{"cell_type":{"0b3c485a":"code","1df266af":"code","003aca27":"code","06db6330":"code","fe0d4144":"code","c9a06db2":"code","b231b79d":"code","9c9b77a1":"code","85bcf534":"code","fc561f10":"code","ef05ae89":"code","d6304da2":"code","23d1de08":"code","c67e73c9":"code","34560696":"code","34d1572e":"code","166b7f1f":"code","9c9cbfd8":"code","17577681":"code","d188cc90":"code","b8432cf7":"code","b8c725a4":"code","88b2962a":"code","ce236a49":"code","e5ff1393":"code","fce77539":"code","7afcbdc7":"code","9e355181":"code","783772e9":"code","01a34d48":"code","cc0c1d99":"code","cc2a4f2f":"code","179f6e51":"code","fbfbea38":"code","374820ff":"code","29df3d12":"code","13578d7a":"code","73badcb5":"code","28e9d5a9":"code","9b392dbe":"code","8fc46d84":"code","b8819a7e":"code","ed054874":"code","8b57135a":"code","7a83bf03":"code","2dc0f367":"code","128dafd1":"code","38d0a8a4":"code","3cbbb25b":"code","72f5be73":"code","469585f1":"code","445a8cc0":"code","2a683bfa":"code","709c5461":"code","24745e0c":"code","38d1b7a5":"code","fac84842":"code","9d3e7dba":"code","ab3e29e7":"code","ae6012f3":"code","5a0caaf7":"code","5ff7091d":"code","aac19d4f":"code","24837ea4":"code","c54a48d8":"code","93e9fcc3":"code","066f1412":"code","df3135f9":"code","9abe9080":"code","123a294b":"code","9ba1ea15":"code","7688bdfd":"code","44755eaa":"code","e4a3f346":"code","550bda5d":"code","91c9ec65":"code","4f629219":"code","c2b05128":"markdown","40d444ae":"markdown","c1f41cb3":"markdown","ce387880":"markdown","320f356a":"markdown","b6cdd2ae":"markdown","8fea7e34":"markdown","757a1554":"markdown","348469fe":"markdown","38c6b567":"markdown","5d091838":"markdown","7834377d":"markdown","c5d4c673":"markdown","632a451d":"markdown","5b1f6618":"markdown","fb1dc06d":"markdown","406906eb":"markdown","d608c09f":"markdown","58c3eb68":"markdown","4470e2c2":"markdown","976c12b1":"markdown","f302795f":"markdown","d0853444":"markdown","3c9392b5":"markdown","cb69a63e":"markdown","39d3e6c7":"markdown","ac987706":"markdown","65aafc93":"markdown","3d6bdb4b":"markdown","d4f9af69":"markdown","4340f952":"markdown","efda220e":"markdown","5cd2066d":"markdown","39ff2d2b":"markdown","c88e8ab9":"markdown","6579f772":"markdown","6abaadfc":"markdown","6ce783d2":"markdown","e0ce0157":"markdown","35ff0776":"markdown","8f1fcac5":"markdown","6d407578":"markdown","6482d7d3":"markdown","b91901d9":"markdown","c98a7190":"markdown","9663e888":"markdown"},"source":{"0b3c485a":"# Import all libraries\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport numpy as np # linear algebra\nimport matplotlib.pyplot as plt # ploting the data\nimport seaborn as sns # ploting the data\nimport math # calculation","1df266af":"# load the data\ndata = pd.read_csv('..\/input\/new-york-city-airbnb-open-data\/AB_NYC_2019.csv')","003aca27":"# Visualize data info\ndata.info()","06db6330":"# Drop the data that are not of interest and\/or causing privacy issues\ndata.drop(['id','host_name','last_review'], axis=1, inplace=True)\n# Visualize the first 5 rows\ndata.head()","fe0d4144":"# Determine the number of missing values for every column\ndata.isnull().sum()","c9a06db2":"#replacing all NaN values in 'reviews_per_month' with 0\n# See https:\/\/www.kaggle.com\/dgomonov\/data-exploration-on-nyc-airbnb\ndata.fillna({'reviews_per_month':0}, inplace=True)","b231b79d":"#examine the dataset\n(data[['price', 'minimum_nights', 'number_of_reviews', 'reviews_per_month',\n       'calculated_host_listings_count', 'availability_365']]\n .describe())","9c9b77a1":"# Exclude property with listed price of 0\ndata = data.loc[data['price'] > 0]\n# data_copy = data.copy()","85bcf534":"#examine the dataset\ndata.describe()","fc561f10":"# Recode data as categorical\n# https:\/\/datascience.stackexchange.com\/questions\/29093\/continuous-variable-to-categorical-by-quartiles\ndata_encoded = data.copy()\ndata_encoded['minimum_nights'] = pd.qcut(data['minimum_nights'], q=2, labels=[\"minimum_nights_low\", \"minimum_nights_high\"])\ndata_encoded['number_of_reviews'] = pd.qcut(data['number_of_reviews'], q=3, labels=[\"number_of_reviews_low\", \"minimum_nights_medium\", \"number_of_reviews_high\"])\ndata_encoded['reviews_per_month'] = pd.qcut(data['reviews_per_month'], q=2, labels=[\"reviews_per_month_low\", \"reviews_per_month_high\"])\ndata_encoded['calculated_host_listings_count'] = pd.cut(data['calculated_host_listings_count'], \n                                                bins=[0, 2, 327],\n                                                labels=[\"calculated_host_listings_count_low\", \"calculated_host_listings_count_high\"])\ndata_encoded['availability_365'] = pd.qcut(data['availability_365'], q=2, labels=[\"availability_low\", \"availability_high\"])","ef05ae89":"data_encoded.isnull().sum()","d6304da2":"data_encoded.head()","23d1de08":"sns.set_palette(\"muted\")\nfrom pylab import *\nf, ax = plt.subplots(figsize=(8, 6))\n\nsubplot(2,3,1)\nsns.distplot(data['price'])\n\nsubplot(2,3,2)\nsns.distplot(data['minimum_nights'])\n\nsubplot(2,3,3)\nsns.distplot(data['number_of_reviews'])\n\nsubplot(2,3,4)\nsns.distplot(data['reviews_per_month'])\n\nsubplot(2,3,5)\nsns.distplot(data['calculated_host_listings_count'])\n\nsubplot(2,3,6)\nsns.distplot(data['availability_365'])\n\nplt.tight_layout() # avoid overlap of plotsplt.draw()","c67e73c9":"from pylab import *\nf, ax = plt.subplots(figsize=(8, 6))\n\nsubplot(2,3,1)\nsns.boxplot(y = data['price']) \n\nsubplot(2,3,2)\nsns.boxplot(y = data['minimum_nights'])\n\nsubplot(2,3,3)\nsns.boxplot(y = data['number_of_reviews'])\n\nsubplot(2,3,4)\nsns.boxplot(y = data['reviews_per_month'])\n\nsubplot(2,3,5)\nsns.boxplot(y = data['calculated_host_listings_count'])\n\nsubplot(2,3,6)\nsns.boxplot(y = data['availability_365'])\n\nplt.tight_layout() # avoid overlap of plots\nplt.draw()","34560696":"# Set up color blind friendly color palette\n# The palette with grey:\ncbPalette = [\"#999999\", \"#E69F00\", \"#56B4E9\", \"#009E73\", \"#F0E442\", \"#0072B2\", \"#D55E00\", \"#CC79A7\"]\n# The palette with black:\ncbbPalette = [\"#000000\", \"#E69F00\", \"#56B4E9\", \"#009E73\", \"#F0E442\", \"#0072B2\", \"#D55E00\", \"#CC79A7\"]\n\n# sns.palplot(sns.color_palette(cbPalette))\n# sns.palplot(sns.color_palette(cbbPalette))\n\nsns.set_palette(cbPalette)\n#sns.set_palette(cbbPalette)","34d1572e":"title = 'Properties per Neighbourhood Group'\nsns.countplot(data['neighbourhood_group'])\nplt.title(title)\nplt.ioff()","166b7f1f":"title = 'Properties per Room Type'\nsns.countplot(data['room_type'])\nplt.title(title)\nplt.ioff()","9c9cbfd8":"plt.figure(figsize=(20,10))\ntitle = 'Correlation matrix of numerical variables'\nsns.heatmap(data.corr(), square=True, cmap='RdYlGn')\nplt.title(title)\nplt.ioff()","17577681":"# See https:\/\/www.kaggle.com\/biphili\/hospitality-in-era-of-airbnb\ntitle = 'Neighbourhood Group Location'\nplt.figure(figsize=(10,6))\nsns.scatterplot(data.longitude,data.latitude,hue=data.neighbourhood_group).set_title(title)\nplt.ioff()\n\ntitle = 'Room type location per Neighbourhood Group'\nplt.figure(figsize=(10,6))\nsns.scatterplot(data.longitude,data.latitude,hue=data.room_type).set_title(title)\nplt.ioff()","d188cc90":"title = 'Room type location per Neighbourhood Group'\nsns.catplot(x='room_type', kind=\"count\", hue=\"neighbourhood_group\", data=data);\nplt.title(title)\nplt.ioff()","b8432cf7":"#https:\/\/jakevdp.github.io\/PythonDataScienceHandbook\/04.14-visualization-with-seaborn.html\n#http:\/\/seaborn.pydata.org\/tutorial\/color_palettes.html\n\nx= 'neighbourhood_group'\ny= 'price'\ntitle = 'Price per Neighbourhood Group'\n\nf, ax = plt.subplots(figsize=(8, 6))\nsns.boxplot(x=x, y=y, data=data)\nplt.title(title)\nplt.ioff()","b8c725a4":"# alternative visualization of median less impacted by the extreme values\n# see https:\/\/www.kaggle.com\/nidaguler\/eda-and-data-visualization-ny-airbnb\n\ntitle = 'Median Price per Neighbourhood Group'\nresult = data.groupby([\"neighbourhood_group\"])['price'].aggregate(np.median).reset_index().sort_values('price')\nsns.barplot(x='neighbourhood_group', y=\"price\", data=data, order=result['neighbourhood_group'])\nplt.title(title)\nplt.ioff()","88b2962a":"# https:\/\/stackoverflow.com\/questions\/54132989\/is-there-a-way-to-change-the-color-and-shape-indicating-the-mean-in-a-seaborn-bo\nx='neighbourhood_group'\ny='price'\n\ntitle = 'Price per neighbourhood_group for Properties under $175'\ndata_filtered = data.loc[data['price'] < 175]\nf, ax = plt.subplots(figsize=(8, 6))\nsns.boxplot(x=x, y=y, data=data_filtered, notch=True, showmeans=True,\n           meanprops={\"marker\":\"s\",\"markerfacecolor\":\"white\", \"markeredgecolor\":\"black\"})\nplt.title(title)\nplt.ioff()\nf\ntitle = 'Price per neighbourhood_group for Properties more than $175'\ndata_filtered = data.loc[data['price'] > 175]\nf, ax = plt.subplots(figsize=(8, 6))\nsns.boxplot(x=x, y=y, data=data_filtered, notch=False, showmeans=True,\n           meanprops={\"marker\":\"s\",\"markerfacecolor\":\"white\", \"markeredgecolor\":\"black\"})\nplt.title(title)\nplt.ioff()","ce236a49":"# Is the location impact on price statiscaly significant?\n# Use on way ANOVA and pairwise comaprison\n# See https:\/\/www.marsja.se\/four-ways-to-conduct-one-way-anovas-using-python\/\n\nimport statsmodels.api as sm\nfrom statsmodels.formula.api import ols\n\ndata_filtered = data.loc[data['price'] < 175]\n\nmod = ols('price ~ neighbourhood_group',data=data_filtered).fit()\n\naov_table = sm.stats.anova_lm(mod, typ=2)\nprint(aov_table)","e5ff1393":"pair_t = mod.t_test_pairwise('neighbourhood_group')\npair_t.result_frame","fce77539":"title = 'Price per Room Type for Properties under $175'\ndata_filtered = data.loc[data['price'] < 175]\nf, ax = plt.subplots(figsize=(8, 6))\nsns.boxplot(x='room_type', y='price', data=data_filtered, notch=True, showmeans=True,\n           meanprops={\"marker\":\"s\",\"markerfacecolor\":\"white\", \"markeredgecolor\":\"black\"})\nplt.title(title)\nplt.ioff()\n\ntitle = 'Price per Room Type for Properties more than $175'\ndata_filtered = data.loc[data['price'] > 175]\nf, ax = plt.subplots(figsize=(8, 6))\nsns.boxplot(x='room_type', y='price', data=data_filtered, notch=False, showmeans=True,\n           meanprops={\"marker\":\"s\",\"markerfacecolor\":\"white\", \"markeredgecolor\":\"black\"})\nplt.title(title)\nplt.ioff()","7afcbdc7":"# see https:\/\/seaborn.pydata.org\/generated\/seaborn.scatterplot.html\nsns.set_palette(\"muted\")\nx = 'reviews_per_month'\ny = 'price'\n\ntitle = 'Price relation to number of review per month for Properties under $175'\ndata_filtered = data.loc[(data['price'] < 175) & (data['reviews_per_month'] < 30)]\nf, ax = plt.subplots(figsize=(8, 6))\nsns.scatterplot(x=x, y=y, data=data_filtered)\nplt.title(title)\nplt.ioff()\n\ntitle = 'Price relation to number of review per month for Properties more than $175'\ndata_filtered = data.loc[data['price'] > 175]\nf, ax = plt.subplots(figsize=(8, 6))\nsns.scatterplot(x=x, y=y, data=data_filtered)\nplt.title(title)\nplt.ioff()\nsns.set_palette(cbPalette)","9e355181":"x='reviews_per_month'\ny='price'\n\ntitle = 'Price per reviews_per_month categories for Properties under $175'\ndata_filtered = data_encoded.loc[data_encoded['price'] < 175]\nf, ax = plt.subplots(figsize=(8, 6))\nsns.boxplot(x=x, y=y, data=data_filtered, notch=True, showmeans=True,\n           meanprops={\"marker\":\"s\",\"markerfacecolor\":\"white\", \"markeredgecolor\":\"black\"})\nplt.title(title)\nplt.ioff()\n\ntitle = 'Price per reviews_per_month categories for Properties more than $175'\ndata_filtered = data_encoded.loc[data_encoded['price'] > 175]\nf, ax = plt.subplots(figsize=(8, 6))\nsns.boxplot(x=x, y=y, data=data_filtered, notch=False, showmeans=True,\n           meanprops={\"marker\":\"s\",\"markerfacecolor\":\"white\", \"markeredgecolor\":\"black\"})\nplt.title(title)\nplt.ioff()","783772e9":"# see https:\/\/seaborn.pydata.org\/generated\/seaborn.scatterplot.html\nsns.set_palette(\"muted\")\nx = 'number_of_reviews'\ny = 'price'\n\ntitle = 'Price relation to number of review per month and Room Type for Properties under $175'\ndata_filtered = data.loc[data['price'] < 175]\nf, ax = plt.subplots(figsize=(8, 6))\nsns.scatterplot(x=x, y=y, data=data_filtered)\nplt.title(title)\nplt.ioff()\n\ntitle = 'Price relation to number of review per month and Room Type for Properties more than $175'\ndata_filtered = data.loc[data['price'] > 175]\nf, ax = plt.subplots(figsize=(8, 6))\nsns.scatterplot(x=x, y=y, data=data_filtered)\nplt.title(title)\nplt.ioff()\nsns.set_palette(cbPalette)","01a34d48":"x = 'number_of_reviews'\ny='price'\n\ntitle = 'Price per number_of_reviews categories for Properties under $175'\ndata_filtered = data_encoded.loc[data_encoded['price'] < 175]\nf, ax = plt.subplots(figsize=(8, 6))\nsns.boxplot(x=x, y=y, data=data_filtered, notch=True, showmeans=True,\n           meanprops={\"marker\":\"s\",\"markerfacecolor\":\"white\", \"markeredgecolor\":\"black\"})\nplt.title(title)\nplt.ioff()\n\ntitle = 'Price per number_of_reviews categories for Properties more than $175'\ndata_filtered = data_encoded.loc[data_encoded['price'] > 175]\nf, ax = plt.subplots(figsize=(8, 6))\nsns.boxplot(x=x, y=y, data=data_filtered, notch=False, showmeans=True,\n           meanprops={\"marker\":\"s\",\"markerfacecolor\":\"white\", \"markeredgecolor\":\"black\"})\nplt.title(title)\nplt.ioff()","cc0c1d99":"# see https:\/\/seaborn.pydata.org\/generated\/seaborn.scatterplot.html\nsns.set_palette(\"muted\")\nx = 'minimum_nights'\ny = 'price'\n\ntitle = 'Price relation to minimum_nights for Properties under $175'\ndata_filtered = data.loc[data['price'] < 175]\nf, ax = plt.subplots(figsize=(8, 6))\nsns.scatterplot(x=x, y=y, data=data_filtered)\nplt.title(title)\nplt.ioff()\n\ntitle = 'Price relation to minimum_nights Properties more than $175'\ndata_filtered = data.loc[data['price'] > 175]\nf, ax = plt.subplots(figsize=(8, 6))\nsns.scatterplot(x=x, y=y, data=data_filtered)\nplt.title(title)\nplt.ioff()\nsns.set_palette(cbPalette)","cc2a4f2f":"x = 'minimum_nights'\ny='price'\n\ntitle = 'Price per minimum_nights categories for Properties under $175'\ndata_filtered = data_encoded.loc[data_encoded['price'] < 175]\nf, ax = plt.subplots(figsize=(8, 6))\nsns.boxplot(x=x, y=y, data=data_filtered, notch=True, showmeans=True,\n           meanprops={\"marker\":\"s\",\"markerfacecolor\":\"white\", \"markeredgecolor\":\"black\"})\nplt.title(title)\nplt.ioff()\n\ntitle = 'Price per minimum_nights categories for Properties more than $175'\ndata_filtered = data_encoded.loc[data_encoded['price'] > 175]\nf, ax = plt.subplots(figsize=(8, 6))\nsns.boxplot(x=x, y=y, data=data_filtered, notch=False, showmeans=True,\n           meanprops={\"marker\":\"s\",\"markerfacecolor\":\"white\", \"markeredgecolor\":\"black\"})\nplt.title(title)\nplt.ioff()","179f6e51":"# see https:\/\/seaborn.pydata.org\/generated\/seaborn.scatterplot.html\nsns.set_palette(\"muted\")\nx = 'calculated_host_listings_count'\ny = 'price'\n\ntitle = 'Price relation to calculated_host_listings_count for Properties under $175'\ndata_filtered = data.loc[data['price'] < 175]\nf, ax = plt.subplots(figsize=(8, 6))\nsns.scatterplot(x=x, y=y, data=data_filtered)\nplt.title(title)\nplt.ioff()\n\ntitle = 'Price relation to calculated_host_listings_count for Properties more than $175'\ndata_filtered = data.loc[data['price'] > 175]\nf, ax = plt.subplots(figsize=(8, 6))\nsns.scatterplot(x=x, y=y, data=data_filtered)\nplt.title(title)\nplt.ioff()\nsns.set_palette(cbPalette)","fbfbea38":"x = 'calculated_host_listings_count'\ny='price'\n\ntitle = 'Price per calculated_host_listings_count categories for Properties under $175'\ndata_filtered = data_encoded.loc[data_encoded['price'] < 175]\nf, ax = plt.subplots(figsize=(8, 6))\nsns.boxplot(x=x, y=y, data=data_filtered, notch=True, showmeans=True,\n           meanprops={\"marker\":\"s\",\"markerfacecolor\":\"white\", \"markeredgecolor\":\"black\"})\nplt.title(title)\nplt.ioff()\n\ntitle = 'Price per calculated_host_listings_count categories for Properties more than $175'\ndata_filtered = data_encoded.loc[data_encoded['price'] > 175]\nf, ax = plt.subplots(figsize=(8, 6))\nsns.boxplot(x=x, y=y, data=data_filtered, notch=False, showmeans=True,\n           meanprops={\"marker\":\"s\",\"markerfacecolor\":\"white\", \"markeredgecolor\":\"black\"})\nplt.title(title)\nplt.ioff()","374820ff":"# see https:\/\/seaborn.pydata.org\/generated\/seaborn.scatterplot.html\nsns.set_palette(\"muted\")\nx = 'availability_365'\ny = 'price'\n\ntitle = 'Price relation to availability for Properties under $175'\ndata_filtered = data.loc[data['price'] < 175]\nf, ax = plt.subplots(figsize=(8, 6))\nsns.scatterplot(x=x, y=y, data=data_filtered)\nplt.title(title)\nplt.ioff()\n\ntitle = 'Price relation to availability for Properties more than $175'\ndata_filtered = data.loc[data['price'] > 175]\nf, ax = plt.subplots(figsize=(8, 6))\nsns.scatterplot(x=x, y=y, data=data_filtered)\nplt.title(title)\nplt.ioff()\nsns.set_palette(cbPalette)","29df3d12":"x = 'availability_365'\ny='price'\n\ntitle = 'Price per calculated_host_listings_count categories for Properties under $175'\ndata_filtered = data_encoded.loc[data_encoded['price'] < 175]\nf, ax = plt.subplots(figsize=(8, 6))\nsns.boxplot(x=x, y=y, data=data_filtered, notch=True, showmeans=True,\n           meanprops={\"marker\":\"s\",\"markerfacecolor\":\"white\", \"markeredgecolor\":\"black\"})\nplt.title(title)\nplt.ioff()\n\ntitle = 'Price per calculated_host_listings_count categories for Properties more than $175'\ndata_filtered = data_encoded.loc[data_encoded['price'] > 175]\nf, ax = plt.subplots(figsize=(8, 6))\nsns.boxplot(x=x, y=y, data=data_filtered, notch=False, showmeans=True,\n           meanprops={\"marker\":\"s\",\"markerfacecolor\":\"white\", \"markeredgecolor\":\"black\"})\nplt.title(title)\nplt.ioff()","13578d7a":"# Load the Dataset  \n#data.drop(['latitude', 'name',], axis=1, inplace=True)\ndata.drop(['name'], axis=1, inplace=True)\ndata_copy = data.copy()","73badcb5":"#data.head()","28e9d5a9":"# # Determine the number of missing values for every column\n# data.isnull().sum()","9b392dbe":"# log10 transform\n# https:\/\/stackoverflow.com\/questions\/30794525\/adding-one-to-all-the-values-in-a-dataframe\n# data_copy = data.copy()\ndata.minimum_nights += 0.000000001\ndata['minimum_nights'] = np.log10(data['minimum_nights'])\ndata.number_of_reviews += 0.000000001\ndata['number_of_reviews'] = np.log10(data['number_of_reviews'])\ndata.reviews_per_month += 0.000000001\ndata['reviews_per_month'] = np.log10(data['reviews_per_month'])\ndata.calculated_host_listings_count += 0.000000001\ndata['calculated_host_listings_count'] = np.log10(data['calculated_host_listings_count'])\ndata.availability_365 += 0.000000001\ndata['availability_365'] = np.log10(data['availability_365'])","8fc46d84":"# Encoding categorical data\ndata = pd.get_dummies(data, columns=['room_type'], drop_first=True)\ndata = pd.get_dummies(data, columns=['neighbourhood'], drop_first=True)\ndata = pd.get_dummies(data, columns=['neighbourhood_group'], drop_first=True)","b8819a7e":"# Filter the dataset for prices between 50 and $175\ndata_filtered_low = data.loc[(data['price'] < 175)]","ed054874":"# data_filtered_low.shape","8b57135a":"# Filter the dataset for prices superior to $175\ndata_filtered_high = data.loc[(data['price'] > 175)]","7a83bf03":"# data_filtered_high.shape","2dc0f367":"# Split the dataset\nX = data_filtered_low.drop('price', axis=1).values\ny = data_filtered_low['price'].values\ny = np.log10(y)","128dafd1":"# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 0)\n\n# Fitting Multiple Linear Regression to the Training set\nfrom sklearn.linear_model import LinearRegression\nlr = LinearRegression()\nlr.fit(X_train, y_train)\n\n# Predicting the Test set results\ny_pred = lr.predict(X_test)","38d0a8a4":"# Compare predicted and actual values\n# https:\/\/towardsdatascience.com\/a-beginners-guide-to-linear-regression-in-python-with-scikit-learn-83a8f7ae2b4f\n# https:\/\/stackoverflow.com\/questions\/19100540\/rounding-entries-in-a-pandas-dafaframe\ndf = pd.DataFrame({'Actual': np.round(10 ** y_test, 0), \n                   'Predicted': np.round(10 ** y_pred, 0)})\ndf.head(10)","3cbbb25b":"# https:\/\/towardsdatascience.com\/a-beginners-guide-to-linear-regression-in-python-with-scikit-learn-83a8f7ae2b4f\n# https:\/\/www.theanalysisfactor.com\/assessing-the-fit-of-regression-models\/\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics\nfrom sklearn.metrics import r2_score\n\nprint('Price mean:', np.round(np.mean(y), 2))  \nprint('Price std:', np.round(np.std(y), 2))\nprint('RMSE:', np.round(np.sqrt(metrics.mean_squared_error(y_test, lr.predict(X_test))), 2))\nprint('R2 score train:', np.round(r2_score(y_train, lr.predict(X_train), multioutput='variance_weighted'), 2))\nprint('R2 score test:', np.round(r2_score(y_test, lr.predict(X_test), multioutput='variance_weighted'), 2))","72f5be73":"# Split the dataset\nX = data_filtered_high.drop('price', axis=1).values\ny = data_filtered_high['price'].values\ny = np.log10(y)","469585f1":"# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 0)\n\n# Fitting Multiple Linear Regression to the Training set\nfrom sklearn.linear_model import LinearRegression\nlr = LinearRegression()\nlr.fit(X_train, y_train)\n\n# Predicting the Test set results\ny_pred = lr.predict(X_test)","445a8cc0":"df = pd.DataFrame({'Actual': np.round(10 ** y_test, 0), \n                   'Predicted': np.round(10 ** y_pred, 0)})\ndf.head(10)","2a683bfa":"# https:\/\/towardsdatascience.com\/a-beginners-guide-to-linear-regression-in-python-with-scikit-learn-83a8f7ae2b4f\n# https:\/\/www.theanalysisfactor.com\/assessing-the-fit-of-regression-models\/\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics\nfrom sklearn.metrics import r2_score\n\nprint('Price mean:', np.round(np.mean(y), 2))  \nprint('Price std:', np.round(np.std(y), 2))\nprint('RMSE:', np.round(np.sqrt(metrics.mean_squared_error(y_test, lr.predict(X_test))), 2))\nprint('R2 score train:', np.round(r2_score(y_train, lr.predict(X_train), multioutput='variance_weighted'), 2))\nprint('R2 score test:', np.round(r2_score(y_test, lr.predict(X_test), multioutput='variance_weighted'), 2))","709c5461":"# Split the dataset\nX = data_filtered_low.drop('price', axis=1).values\ny = data_filtered_low['price'].values\ny = np.log10(y)","24745e0c":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 0)","38d1b7a5":"# Fitting Random Forest Regression to the dataset\nfrom sklearn.ensemble import RandomForestRegressor\nrfr = RandomForestRegressor(max_depth=8, n_estimators = 100, random_state = 0)\nrfr.fit(X_train, y_train)\n\n# Predicting the Test set results\ny_pred = rfr.predict(X_test)","fac84842":"df = pd.DataFrame({'Actual': np.round(10 ** y_test, 0), \n                   'Predicted': np.round(10 ** y_pred, 0)})\ndf.head(10)","9d3e7dba":"# https:\/\/towardsdatascience.com\/a-beginners-guide-to-linear-regression-in-python-with-scikit-learn-83a8f7ae2b4f\n# https:\/\/www.theanalysisfactor.com\/assessing-the-fit-of-regression-models\/\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics\nfrom sklearn.metrics import r2_score\n\nprint('Price mean:', np.round(np.mean(y), 2))  \nprint('Price std:', np.round(np.std(y), 2))\nprint('RMSE:', np.round(np.sqrt(metrics.mean_squared_error(y_test, rfr.predict(X_test))), 2))\nprint('R2 score train:', np.round(r2_score(y_train, rfr.predict(X_train), multioutput='variance_weighted'), 2))\nprint('R2 score test:', np.round(r2_score(y_test, rfr.predict(X_test), multioutput='variance_weighted'), 2))","ab3e29e7":"# Split the dataset\nX = data_filtered_high.drop('price', axis=1).values\ny = data_filtered_high['price'].values\ny = np.log10(y)","ae6012f3":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 0)","5a0caaf7":"# Fitting Random Forest Regression to the dataset\nfrom sklearn.ensemble import RandomForestRegressor\nrfr = RandomForestRegressor(max_depth=8, n_estimators = 100, random_state = 0)\nrfr.fit(X_train, y_train)\n\n# Predicting the Test set results\ny_pred = rfr.predict(X_test)","5ff7091d":"df = pd.DataFrame({'Actual': np.round(10 ** y_test, 0), \n                   'Predicted': np.round(10 ** y_pred, 0)})\ndf.head(10)","aac19d4f":"from sklearn.metrics import mean_squared_error\nfrom sklearn import metrics\nfrom sklearn.metrics import r2_score\n\nprint('Price mean:', np.round(np.mean(y), 2))  \nprint('Price std:', np.round(np.std(y), 2))\nprint('RMSE:', np.round(np.sqrt(metrics.mean_squared_error(y_test, rfr.predict(X_test))), 2))\nprint('R2 score train:', np.round(r2_score(y_train, rfr.predict(X_train), multioutput='variance_weighted'), 2))\nprint('R2 score test:', np.round(r2_score(y_test, rfr.predict(X_test), multioutput='variance_weighted'), 2))","24837ea4":"# # Combined Data and Data_ecoded\n# data['availability_365_cat'] = data_encoded['availability_365']\n# data.head()","c54a48d8":"data_encoded.drop(['name'], axis=1, inplace=True)","93e9fcc3":"data_encoded.head()","066f1412":"# Encoding categorical data\ndata_encoded = pd.get_dummies(data_encoded, columns=['neighbourhood_group'], drop_first=True)\ndata_encoded = pd.get_dummies(data_encoded, columns=['neighbourhood'], drop_first=True)\ndata_encoded = pd.get_dummies(data_encoded, columns=['room_type'], drop_first=True)\ndata_encoded = pd.get_dummies(data_encoded, columns=['minimum_nights'], drop_first=True)\ndata_encoded = pd.get_dummies(data_encoded, columns=['number_of_reviews'], drop_first=True)\ndata_encoded = pd.get_dummies(data_encoded, columns=['reviews_per_month'], drop_first=True)\ndata_encoded = pd.get_dummies(data_encoded, columns=['calculated_host_listings_count'], drop_first=True)\ndata_encoded = pd.get_dummies(data_encoded, columns=['availability_365'], drop_first=True)","df3135f9":"data_encoded.head()","9abe9080":"# Data filtering\n# Filter the dataset for prices between 50 and $175\ndata_filtered_low = data_encoded.loc[(data['price'] < 175)]\n# Filter the dataset for prices superior to $175\ndata_filtered_high = data_encoded.loc[(data['price'] > 175)]","123a294b":"# Split the dataset\nX = data_filtered_low.drop('price', axis=1).values\ny = data_filtered_low['price'].values\ny = np.log10(y)\n\n# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 0)\n\n# Fitting Multiple Linear Regression to the Training set\nfrom sklearn.linear_model import LinearRegression\nlr = LinearRegression()\nlr.fit(X_train, y_train)\n\n# Predicting the Test set results\ny_pred = lr.predict(X_test)\n\n# Compare predicted and actual values\n# https:\/\/towardsdatascience.com\/a-beginners-guide-to-linear-regression-in-python-with-scikit-learn-83a8f7ae2b4f\n# https:\/\/stackoverflow.com\/questions\/19100540\/rounding-entries-in-a-pandas-dafaframe\ndf = pd.DataFrame({'Actual': np.round(10 ** y_test, 0), \n                   'Predicted': np.round(10 ** y_pred, 0)})\ndf.head(10)","9ba1ea15":"# https:\/\/towardsdatascience.com\/a-beginners-guide-to-linear-regression-in-python-with-scikit-learn-83a8f7ae2b4f\n# https:\/\/www.theanalysisfactor.com\/assessing-the-fit-of-regression-models\/\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics\nfrom sklearn.metrics import r2_score\n\nprint('Price mean:', np.round(np.mean(y), 2))  \nprint('Price std:', np.round(np.std(y), 2))\nprint('RMSE:', np.round(np.sqrt(metrics.mean_squared_error(y_test, lr.predict(X_test))), 2))\nprint('R2 score train:', np.round(r2_score(y_train, lr.predict(X_train), multioutput='variance_weighted'), 2))\nprint('R2 score test:', np.round(r2_score(y_test, lr.predict(X_test), multioutput='variance_weighted'), 2))","7688bdfd":"# Split the dataset\nX = data_filtered_high.drop('price', axis=1).values\ny = data_filtered_high['price'].values\ny = np.log10(y)\n\n# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 0)\n\n# Fitting Multiple Linear Regression to the Training set\nfrom sklearn.linear_model import LinearRegression\nlr = LinearRegression()\nlr.fit(X_train, y_train)\n\n# Predicting the Test set results\ny_pred = lr.predict(X_test)\n\ndf = pd.DataFrame({'Actual': np.round(10 ** y_test, 0), \n                   'Predicted': np.round(10 ** y_pred, 0)})\ndf.head(10)","44755eaa":"# https:\/\/towardsdatascience.com\/a-beginners-guide-to-linear-regression-in-python-with-scikit-learn-83a8f7ae2b4f\n# https:\/\/www.theanalysisfactor.com\/assessing-the-fit-of-regression-models\/\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics\nfrom sklearn.metrics import r2_score\n\nprint('Price mean:', np.round(np.mean(y), 2))  \nprint('Price std:', np.round(np.std(y), 2))\nprint('RMSE:', np.round(np.sqrt(metrics.mean_squared_error(y_test, lr.predict(X_test))), 2))\nprint('R2 score train:', np.round(r2_score(y_train, lr.predict(X_train), multioutput='variance_weighted'), 2))\nprint('R2 score test:', np.round(r2_score(y_test, lr.predict(X_test), multioutput='variance_weighted'), 2))","e4a3f346":"# Split the dataset\nX = data_filtered_low.drop('price', axis=1).values\ny = data_filtered_low['price'].values\ny = np.log10(y)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 0)\n\n# Fitting Random Forest Regression to the dataset\nfrom sklearn.ensemble import RandomForestRegressor\nrfr = RandomForestRegressor(max_depth=8, n_estimators = 100, random_state = 0)\nrfr.fit(X_train, y_train)\n\n# Predicting the Test set results\ny_pred = rfr.predict(X_test)\n\ndf = pd.DataFrame({'Actual': np.round(10 ** y_test, 0), \n                   'Predicted': np.round(10 ** y_pred, 0)})\ndf.head(10)","550bda5d":"from sklearn.metrics import mean_squared_error\nfrom sklearn import metrics\nfrom sklearn.metrics import r2_score\n\nprint('Price mean:', np.round(np.mean(y), 2))  \nprint('Price std:', np.round(np.std(y), 2))\nprint('RMSE:', np.round(np.sqrt(metrics.mean_squared_error(y_test, rfr.predict(X_test))), 2))\nprint('R2 score train:', np.round(r2_score(y_train, rfr.predict(X_train), multioutput='variance_weighted'), 2))\nprint('R2 score test:', np.round(r2_score(y_test, rfr.predict(X_test), multioutput='variance_weighted'), 2))","91c9ec65":"# Split the dataset\nX = data_filtered_high.drop('price', axis=1).values\ny = data_filtered_high['price'].values\ny = np.log10(y)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 0)\n\n# Fitting Random Forest Regression to the dataset\nfrom sklearn.ensemble import RandomForestRegressor\nrfr = RandomForestRegressor(max_depth=8, n_estimators = 100, random_state = 0)\nrfr.fit(X_train, y_train)\n\n# Predicting the Test set results\ny_pred = rfr.predict(X_test)\n\ndf = pd.DataFrame({'Actual': np.round(10 ** y_test, 0), \n                   'Predicted': np.round(10 ** y_pred, 0)})\ndf.head(10)\n\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics\nfrom sklearn.metrics import r2_score","4f629219":"print('Price mean:', np.round(np.mean(y), 2))  \nprint('Price std:', np.round(np.std(y), 2))\nprint('RMSE:', np.round(np.sqrt(metrics.mean_squared_error(y_test, rfr.predict(X_test))), 2))\nprint('R2 score train:', np.round(r2_score(y_train, rfr.predict(X_train), multioutput='variance_weighted'), 2))\nprint('R2 score test:', np.round(r2_score(y_test, rfr.predict(X_test), multioutput='variance_weighted'), 2))","c2b05128":"### 5.3.1 Modeling on lower price dataset","40d444ae":"## 5.1 Data Preprocessing","c1f41cb3":"# 4. Modeling first model","ce387880":"# 7. References  \nPython notebooks  \n\n* https:\/\/www.kaggle.com\/dgomonov\/data-exploration-on-nyc-airbnb \n* https:\/\/www.kaggle.com\/biphili\/hospitality-in-era-of-airbnb\n* https:\/\/www.kaggle.com\/chirag9073\/airbnb-analysis-visualization-and-prediction   \n* https:\/\/www.kaggle.com\/jrw2200\/smart-pricing-with-xgb-rfr-interpretations   \n* https:\/\/www.kaggle.com\/mpanfil\/nyc-airbnb-data-science-ml-project  \n* https:\/\/www.kaggle.com\/elcaiseri\/airbnb-data-exploration-on-nyc-visualization  \n* https:\/\/www.kaggle.com\/nidaguler\/eda-and-data-visualization-ny-airbnb  \n* https:\/\/www.kaggle.com\/duygut\/airbnb-nyc-price-prediction  \n\nR notebooks\n\n* https:\/\/www.kaggle.com\/josipdomazet\/mining-nyc-airbnb-data-using-r#data-visualisation   \n\nDataset discussion  \n\n* https:\/\/www.kaggle.com\/dgomonov\/new-york-city-airbnb-open-data\/discussion\/112818#latest-649615  \n\nMachine Learning Ressources  \n\n* https:\/\/towardsdatascience.com\/accuracy-precision-recall-or-f1-331fb37c5cb9   \n* https:\/\/scikit-learn.org\/stable\/tutorial\/machine_learning_map\/index.html   \n\nGeneral Data Science Ressources\n* https:\/\/datascienceguide.github.io\/exploratory-data-analysis\n* https:\/\/jakevdp.github.io\/PythonDataScienceHandbook\/04.14-visualization-with-seaborn.html  \n* http:\/\/seaborn.pydata.org\/tutorial\/color_palettes.html\n* https:\/\/seaborn.pydata.org\/tutorial.html\n* https:\/\/seaborn.pydata.org\/\n* https:\/\/pandas.pydata.org\/pandas-docs\/stable\/\n* https:\/\/www.kaggle.com\/neomatrix369\/six-steps-to-more-professional-data-science-code","320f356a":"Most properties are Entire home or Private room.","b6cdd2ae":"* A majority of Entire home\/apt are located in Manhattan\n* A majority of private rooms are located in Brooklyn","8fea7e34":"#### 3.7 Price relation to minimum_nights","757a1554":"* Examine relation between location and price\n* Examine relation between room type and price","348469fe":"#### 3.6 Price relation to the number_of_reviews","38c6b567":"## 4.1 Data Preprocessing","5d091838":"# 6. Conclusion","7834377d":"## 5.3 Random Forest Regression","c5d4c673":"#### 3.9 Price relation to availability","632a451d":"* **id**: listing ID\n* **name**: name of the listing\n* **host_id**: host ID\n* **host_name**: name of the host\n* **neighbourhood_group**: location\n* **neighbourhood**: area\n* **latitude**: latitude coordinates\n* **longitude**: longitude coordinates\n* **room_type**: listing space type\n* **price**: price in dollars\n* **minimum_nights**: amount of nights minimum\n* **number_of_reviews**: number of reviews\n* **last_review**: latest review\n* **reviews_per_month**: number of reviews per month\n* **calculated_host_listings_count**: amount of listing per host\n* **availability_365**: number of days when listing is available for booking","5b1f6618":"# 3.1 Correlation","fb1dc06d":"## 4.3 Random Forest Regression","406906eb":"### 5.2.1 Modeling on lower price dataset","d608c09f":"# Table of Content\n\n**1. Dataset**  \n**2. Exploratory Data Analysis**  \n**3. Visualization**  \n**4. Modeling first model**  \n**5. Modeling second model**   \n**6. Conclusion**  \n**7. References**  ","58c3eb68":"### 5.2.2 Modeling on higher price dataset","4470e2c2":"## 5.2 Multiple Linear Regression","976c12b1":"We drop the columns that are not of interest or could cause privacy isssues.  \nSee Dgomonov's work here:  https:\/\/www.kaggle.com\/dgomonov\/data-exploration-on-nyc-airbnb   ","f302795f":"Prices are significantly different depending between neighborhood groups for properties under $175.","d0853444":"* Examine the number of variable and columns  \n* Check that the dataset is tidy  \n    * Check that every row is an observation and every column is a variable  \n    * Determine if there are missing values\n* Examine variables distributions","3c9392b5":"## 3.2 Location","cb69a63e":"## 3.4 Price relation to Room Type","39d3e6c7":"* The properties have large differences in prices.  \n* Separating the dataset by price categories is useful for the analysis.\n* The most interesting variables regarding price prediction are:\n    * Location\n    * Room type\n    * calculated_host_listings_count\n    * Number of review\n* Price prediction models are not performing well\n    * Best score is 0.55\n    * Prediction are nore accurate for price under $175 (75% of the dataset)\n    * Using categorical ecnoded data did not improve the model\n* Possible next steps\n    * The next step could be to transform continuous variables into categorical variables as it can help capture non-linear relations.\n    * I doubt a neural network would be useful here because the number of observations is limited.","ac987706":"#### 3.5 Price relation to the number of review per month","65aafc93":"<img src=\"https:\/\/i.imgur.com\/UIQCjMy.jpg\" width=\"700px\">","3d6bdb4b":"## 3.3 Price relation to Neighbourhood Group","d4f9af69":"#### 3.8 Price relation to calculated_host_listings_count","4340f952":"### 5.3.2 Modeling on higher price dataset","efda220e":"Photo by [Andre Benz](https:\/\/unsplash.com\/@trapnation) on Unsplash","5cd2066d":"### 4.3.2 Modeling the higher price dataset","39ff2d2b":"### 4.2.2 Modeling the higher price dataset","c88e8ab9":"# 1. Dataset\nhttps:\/\/www.kaggle.com\/dgomonov\/new-york-city-airbnb-open-data  ","6579f772":"* Properties in Manhattan are more expensive\n* The dataset can be separate between low price and high price properties","6abaadfc":"# NYC Airbnb: EDA, Visualization, Regression\nEDA - Visualization - Modeling","6ce783d2":"# 3. Visualization","e0ce0157":"Most properties are located in Brooklyn and Manhattan.","35ff0776":"# 5. Modeling second model","8f1fcac5":"# 2. Exploratory Data Analysis","6d407578":"### 4.2.1 Modeling on lower price dataset","6482d7d3":"### 4.3.1 Modeling on lower price dataset","b91901d9":"Try to bin the data first.  ","c98a7190":"* Most features are left-skewed. \n* I will use a log transform before the modeling step.","9663e888":"## 4.2 Multiple Linear Regression"}}