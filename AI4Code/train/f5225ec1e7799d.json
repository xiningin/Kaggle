{"cell_type":{"f743b0da":"code","1e3dd650":"code","2ee5b647":"code","0ad08060":"code","f7857a17":"code","d36ff707":"code","e4de5778":"code","ed044061":"code","18df362a":"code","ce071209":"code","f739f612":"code","0ec0b453":"code","afd1b306":"code","9b4264fb":"code","281299c3":"code","3a6a3789":"code","937c9caf":"code","7dbfb661":"code","0513cff3":"code","a6d122c1":"code","771e1949":"code","6ce7cae4":"code","c15859b1":"code","73a80f29":"code","9cd01b26":"code","65c90c7f":"code","395545bf":"markdown","3f31042d":"markdown","c3d41aa1":"markdown","94114125":"markdown","38c3e1c4":"markdown","d4e6dc9f":"markdown","1ff92ec1":"markdown","bca8d2c2":"markdown","025cbb59":"markdown","a106da8c":"markdown","68f1227d":"markdown","864c353a":"markdown","0706a5e9":"markdown","bf30f27d":"markdown","876c7068":"markdown","f3dbf09c":"markdown","179d7daf":"markdown","376abd53":"markdown","886d1f6d":"markdown","925e560f":"markdown","e7e11cc5":"markdown"},"source":{"f743b0da":"import numpy as np\nimport pandas as pd\nimport os\nimport matplotlib.pyplot as plt\nfrom keras.datasets import mnist\nfrom keras.layers import Input, Dense, Conv2D, MaxPooling2D, UpSampling2D, Conv2DTranspose\nfrom keras.models import Model\nfrom keras.preprocessing import image","1e3dd650":"(X_train, _), (X_test, _) = mnist.load_data()","2ee5b647":"print(\"X_train\", X_train.shape)\nprint(\"X_test\", X_test.shape)","0ad08060":"def pre_process(X):\n    X = X\/255.0\n    X = X.reshape((len(X), 784))\n    return X\n\nX_train  =  pre_process(X_train)\nX_test  =  pre_process(X_test)\n\nprint(\"X_train\", X_train.shape)\nprint(\"X_test\", X_test.shape)","f7857a17":"def show_data(X, n=10, height=28, width=28, title=\"\"):\n    plt.figure(figsize=(10, 3))\n    for i in range(n):\n        ax = plt.subplot(2,n,i+1)\n        plt.imshow(X[i].reshape((height,width)))\n        plt.gray()\n        ax.get_xaxis().set_visible(False)\n        ax.get_yaxis().set_visible(False)\n    plt.suptitle(title, fontsize = 20)","d36ff707":"show_data(X_train, title=\"train data\")\nshow_data(X_test, title=\"test data\")","e4de5778":"input_dim, output_dim = 784, 784\nencode_dim = 100\nhidden_dim = 256","ed044061":"# encoder\ninput_layer = Input(shape=(input_dim,), name=\"INPUT\")\nhidden_layer_1 = Dense(hidden_dim, activation='relu', name=\"HIDDEN_1\")(input_layer)\n\n# code\ncode_layer = Dense(encode_dim, activation='relu', name=\"CODE\")(hidden_layer_1)\n\n# decoder\nhidden_layer_2 = Dense(hidden_dim, activation='relu', name=\"HIDDEN_2\")(code_layer)\noutput_layer = Dense(output_dim, activation='sigmoid', name=\"OUTPUT\")(hidden_layer_2)","18df362a":"AE = Model(input_layer, output_layer)\nAE.compile(optimizer='adam', loss='binary_crossentropy')\nAE.summary()","ce071209":"AE.fit(X_train, X_train, epochs=10)","f739f612":"decoded_data = AE.predict(X_test)","0ec0b453":"get_encoded_data = Model(inputs=AE.input, outputs=AE.get_layer(\"CODE\").output)","afd1b306":"encoded_data = get_encoded_data.predict(X_test)","9b4264fb":"show_data(X_test, title=\"original data\")\nshow_data(encoded_data, height=10, width=10, title=\"encoded data\")\nshow_data(decoded_data, title=\"decoded data\")","281299c3":"cat_train_path = \"..\/input\/cat-and-dog\/training_set\/training_set\/cats\/\"\ncat_test_path = \"..\/input\/cat-and-dog\/test_set\/test_set\/cats\/\"\n\ncat_train = []\nfor filename in os.listdir(cat_train_path):\n    if filename.endswith(\".jpg\"):\n        img = image.load_img(cat_train_path+filename, target_size=(128, 128))\n        cat_train.append(image.img_to_array(img))\ncat_train = np.array(cat_train)\n\ncat_test = []\nfor filename in os.listdir(cat_test_path):\n    if filename.endswith(\".jpg\"):\n        img = image.load_img(cat_test_path+filename, target_size=(128, 128))\n        cat_test.append(image.img_to_array(img))\ncat_test = np.array(cat_test)","3a6a3789":"print(\"cat_train\", cat_train.shape)\nprint(\"cat_test\", cat_test.shape)","937c9caf":"def show_cat_data(X, n=10, title=\"\"):\n    plt.figure(figsize=(15, 5))\n    for i in range(n):\n        ax = plt.subplot(2,n,i+1)\n        plt.imshow(image.array_to_img(X[i]))\n        ax.get_xaxis().set_visible(False)\n        ax.get_yaxis().set_visible(False)\n    plt.suptitle(title, fontsize = 20)","7dbfb661":"show_cat_data(cat_train, title=\"train cats\")\nshow_cat_data(cat_test, title=\"test cats\")","0513cff3":"input_layer = Input(shape=(128, 128, 3), name=\"INPUT\")\nx = Conv2D(16, (3, 3), activation='relu', padding='same')(input_layer)\nx = MaxPooling2D((2, 2))(x)\nx = Conv2D(8, (3, 3), activation='relu', padding='same')(x)\nx = MaxPooling2D((2, 2))(x)\nx = Conv2D(8, (3, 3), activation='relu', padding='same')(x)\n\ncode_layer = MaxPooling2D((2, 2), name=\"CODE\")(x)\n\nx = Conv2DTranspose(8, (3, 3), activation='relu', padding='same')(code_layer)\nx = UpSampling2D((2, 2))(x)\nx = Conv2DTranspose(8, (3, 3), activation='relu', padding='same')(x)\nx = UpSampling2D((2, 2))(x)\nx = Conv2DTranspose(16, (3, 3), activation='relu', padding='same')(x)\nx = UpSampling2D((2,2))(x)\noutput_layer = Conv2D(3, (3, 3), padding='same', name=\"OUTPUT\")(x)","a6d122c1":"cat_AE = Model(input_layer, output_layer)\ncat_AE.compile(optimizer='adam', loss='mse')\ncat_AE.summary()","771e1949":"cat_AE.fit(cat_train, cat_train,\n                epochs=30,\n                batch_size=32,\n                shuffle=True,\n                validation_data=(cat_test, cat_test))","6ce7cae4":"cat_AE.save(\"cat_AE.h5\")","c15859b1":"get_encoded_cat = Model(inputs=cat_AE.input, outputs=cat_AE.get_layer(\"CODE\").output)","73a80f29":"encoded_cat = get_encoded_cat.predict(cat_test)\nencoded_cat = encoded_cat.reshape((len(cat_test), 16*16*8))\nencoded_cat.shape","9cd01b26":"reconstructed_cats = cat_AE.predict(cat_test)","65c90c7f":"show_cat_data(cat_test, title=\"original cats\")\nshow_data(encoded_cat, height=32, width=64, title=\"encoded cats\")\nshow_cat_data(reconstructed_cats, title=\"reconstructed cats\")","395545bf":"# *Visualize the results on test set*","3f31042d":"> ## >Part 2\n# *Get the cat images*","c3d41aa1":"# *Get the encoded data*","94114125":"> ## >Part 1\n# *Get MNIST handwritten digit data*","38c3e1c4":"# *Get the decoded (reconstructed) data*","d4e6dc9f":"# *Trian the digit Autoencoder*","1ff92ec1":"# *Make a model to get the encoded representation (i.e. intermediate layer output) for a given cat image.*","bca8d2c2":"---","025cbb59":"# *Get the encoded cats*","a106da8c":"# *Visualize the results on test set*","68f1227d":"# *If you liked this notebook please visit my channel [Normalized Nerd](http:\/\/youtube.com\/NormalizedNerd) \u2764\ufe0f*","864c353a":"# *Preprocess the data*","0706a5e9":"# *Visualize the digits*","bf30f27d":"# *Get the reconstructed cats*","876c7068":"# *Visualize the cats*","f3dbf09c":"# *Build the cat Autoencoder*","179d7daf":"# *Save model*","376abd53":"---","886d1f6d":"# *Make a model to get the encoded representation (i.e. intermediate layer output) for a given input.*","925e560f":"# *Build the digit Autoencoder*","e7e11cc5":"# *Train the cat Autoencoder*"}}