{"cell_type":{"879f9836":"code","6c72e1c6":"code","692a557e":"code","2a9cb53f":"code","11a52a8e":"code","020faeb4":"code","60887092":"code","effc6ad9":"code","8dfee705":"code","d8c68803":"code","7ffa1f5f":"code","80a83c5b":"code","0c6a8909":"code","d2ae07e9":"code","cc568348":"code","ac761348":"code","01398499":"code","b7e79d8a":"code","a62defbf":"code","d635b5a5":"code","7a59d21a":"code","338578df":"code","0686ada3":"code","a93fdab3":"code","1c0b37ce":"code","79747f20":"code","cd278726":"code","160ae4d3":"code","641121b5":"code","ffb8c39a":"markdown","32526c47":"markdown"},"source":{"879f9836":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","6c72e1c6":"df_Train=pd.read_csv('..\/input\/digit-recognizer\/train.csv')\ndf_Test=pd.read_csv('..\/input\/digit-recognizer\/test.csv')\ndf_Train.head()","692a557e":"df_Test1=pd.read_csv('..\/input\/digit-recognizer\/test.csv')","2a9cb53f":"df_Test.head()","11a52a8e":"print(df_Train.shape)\nprint(df_Test.shape)","020faeb4":"X = df_Train.iloc[:, 1:].values\ny = df_Train.iloc[:, 0].values","60887092":"print(X.shape)\nprint(y.shape)","effc6ad9":"sns.countplot(y)","8dfee705":" plt.imshow(X[1400].reshape((28,28)),interpolation='nearest')","d8c68803":"from sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\nX = scaler.fit_transform(X)","7ffa1f5f":"X = X.reshape(X.shape[0], 28, 28, 1)\nX.shape","80a83c5b":"df_Test=scaler.fit_transform(df_Test)\ndf_Test = df_Test.reshape(df_Test.shape[0], 28, 28, 1)","0c6a8909":"df_Test.shape","d2ae07e9":"y = y.reshape(y.shape[0], 1)\nprint (y.shape)","cc568348":"from sklearn.preprocessing import OneHotEncoder\nencoder = OneHotEncoder(sparse=False)\ny = encoder.fit_transform(y)\n\nprint (y.shape)","ac761348":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.1, random_state=2)","01398499":"print(X_train.shape)\nprint(X_test.shape)","b7e79d8a":"from keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom keras.optimizers import RMSprop\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau","a62defbf":"model = Sequential()\n\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu', input_shape = (28,28,1)))\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation = \"softmax\"))","d635b5a5":"optimizer = RMSprop(lr=0.001, rho=0.9, epsilon=1e-08, decay=0.0)","7a59d21a":"model.compile(optimizer = optimizer , loss = \"categorical_crossentropy\", metrics=[\"accuracy\"])\n\nlearning_rate_reduction = ReduceLROnPlateau(monitor='val_acc', \n                                            patience=3, \n                                            verbose=1, \n                                            factor=0.5, \n                                            min_lr=0.0001)\n\nmodel.summary()","338578df":"batch_size=95\nepoch=10","0686ada3":"history = model.fit(X_train,y_train, batch_size=batch_size,\n                              epochs = epoch, validation_data = (X_test,y_test), callbacks=[learning_rate_reduction])","a93fdab3":"plt.plot(history.history['val_loss'], color='g', label=\"validation loss\")\nplt.title(\"Test Loss\")\nplt.xlabel(\"Number of Epochs\")\nplt.ylabel(\"Loss\")\nplt.legend()\nplt.show()\nplt.plot(history.history['accuracy'], color='b', label=\"Acuuracy\")\nplt.title(\"Accuracy\")\nplt.xlabel(\"Number of Epochs\")\nplt.ylabel(\"Accuracy\")\nplt.legend()\nplt.show()\nplt.plot(history.history['loss'], color='r', label=\"loss\")\nplt.title(\"Loss\")\nplt.xlabel(\"Number of Epochs\")\nplt.ylabel(\"Loss\")\nplt.legend()\nplt.show()","1c0b37ce":"plt.figure()\nfig,(ax1, ax2)=plt.subplots(1,2,figsize=(10,4))\nax1.plot(history.history['loss'])\nax1.plot(history.history['val_loss'])\nax1.legend(['training','validation'])\nax1.set_title('loss')\nax1.set_xlabel('epoch')\n\nax2.plot(history.history['accuracy'])\nax2.plot(history.history['val_accuracy'])\nax2.legend(['training','validation'])\nax2.set_title('Acurracy')\nax2.set_xlabel('epoch')\n\n\n\nscore =model.evaluate(X_test,y_test,verbose=0)\nprint('Test Score:',score[0])\nprint('Test Accuracy:',score[1])","79747f20":"from sklearn.metrics import confusion_matrix\npred = model.predict(X_test)\n# Convert predictions classes to one hot vectors \npred_classes = np.argmax(pred,axis = 1) \n# Convert validation observations to one hot vectors\nY_true = np.argmax(y_test,axis = 1) \n# compute the confusion matrix\nconfusion_mtx = confusion_matrix(Y_true, pred_classes) \n# plot the confusion matrix\nf,ax = plt.subplots(figsize=(6, 6))\nsns.heatmap(confusion_mtx, annot=True, linewidths=0.01,cmap=\"Greens\",linecolor=\"gray\", fmt= '.1f',ax=ax)\nplt.xlabel(\"Predicted Label\")\nplt.ylabel(\"True Label\")\nplt.title(\"Confusion Matrix\")\nplt.show()","cd278726":"plt.imshow(X_test[120].reshape(28,28),interpolation='nearest')\nplt.show()","160ae4d3":"image = X_test[120]\ntest_img = image.reshape(1,28,28,1)\n\npreds = model.predict(test_img)\nprint(\"The predicted number is: \",np.argmax(preds))","641121b5":"results = model.predict(df_Test)\nresults = np.argmax(results,axis = 1)\nresults","ffb8c39a":"![Handwriting-digit-recognition-Keras-MNIST.jpg](attachment:Handwriting-digit-recognition-Keras-MNIST.jpg)","32526c47":"![ty.jpg](attachment:ty.jpg)"}}