{"cell_type":{"87f4578d":"code","fd1105fc":"code","ec05e382":"code","b3bf0d71":"code","157c23bc":"code","b2a173a8":"code","1147f19e":"code","ace0ca13":"code","0c734262":"code","60198d57":"code","e43ce3e3":"code","8298aace":"code","d1cfb257":"code","e09eb2f1":"code","57ad96e7":"code","70368886":"code","44300660":"code","2211a73e":"code","dddc2818":"code","000dce65":"code","2520eedc":"code","f00d8ff1":"markdown","4761e70f":"markdown","826eee7a":"markdown","57f4e1f4":"markdown","03da2a9b":"markdown","305047ed":"markdown","6f1f145a":"markdown","14f07277":"markdown","cca76217":"markdown","70913374":"markdown","fef24fdf":"markdown","c28e621e":"markdown","77e78275":"markdown","f6b4be7c":"markdown","185de2e4":"markdown","9e69eea8":"markdown","9135f068":"markdown","b71e29b1":"markdown","ed933215":"markdown","3e12d41f":"markdown","0e83ed08":"markdown","2b91c1e6":"markdown","736ee6e2":"markdown","37f640cc":"markdown","3dda8813":"markdown","d5526c76":"markdown","4718c4a9":"markdown","4ce3b8ac":"markdown","9b38bff4":"markdown"},"source":{"87f4578d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\n\n\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport scipy as sci\nimport itertools\nfrom itertools import repeat,chain\nfrom scipy.stats import boxcox\nfrom pathlib import Path\nimport operator\nfrom collections import namedtuple\n\n\n####<-Visualization Libraries->####\n\nimport holoviews as hv\nimport matplotlib.pyplot as plt\nimport datashader\nimport dask\nimport geoviews\n\n# Standard plotly imports\nimport chart_studio.plotly as py\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objs as go\nimport plotly.express as px\nimport geopandas\nimport shapely\nimport plotly.graph_objects as go\n\nfrom plotly.subplots import make_subplots\nfrom plotly.offline import iplot, init_notebook_mode\n\n# Using plotly + cufflinks in offline mode\nimport cufflinks\ncufflinks.go_offline(connected=True)\ninit_notebook_mode(connected=True)\n\n####---------------------------####\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","fd1105fc":"## Importing dataset\ndata = pd.read_csv(\"\/kaggle\/input\/new-york-city-airbnb-open-data\/AB_NYC_2019.csv\",sep=\",\")\ndata.head(5)","ec05e382":"print(\"The dataset contains {0} rows and {1} columns  \".format(str(data.shape[0]),str(data.shape[1])))","b3bf0d71":"print(\"Data Types: \")\nprint(data.dtypes)","157c23bc":"# Checking missing values\nprint(\"Missing Values: \")\nprint(data.isnull().sum().sort_values(ascending=False))\nprint()\nprint(\"Do reviews_per_month and last_review share the same indices? \"+ str(any(data.loc[data.last_review.isna(),\"reviews_per_month\"].index)))\nprint()","b2a173a8":"# Filling missing data\ndata[\"reviews_per_month\"].fillna(0,inplace=True)\ndata[\"last_review\"].fillna(0,inplace=True)\ndata[[\"host_name\",\"name\"]].fillna(\"Unknown\",inplace=True)","1147f19e":"# Grouping by neighbourhood_group and room_type\ndata_neighgroup_roomtype=data.groupby([\"room_type\",\"neighbourhood_group\"])[\"neighbourhood_group\"].count()\n\n\n## PIE CHART ##\nlabels = data.neighbourhood_group.value_counts().index\nvalues = data.neighbourhood_group.value_counts().values\nfig_pie = go.Figure(data=[go.Pie(labels=labels, values=values)],layout=go.Layout(title=go.layout.Title(text=\"Number of dwellings per neighbourhood\")))\nfig_pie.show()\n\n\n## BARPLOT ##\nx=data_neighgroup_roomtype.index.levels[1]\nroom_type=data_neighgroup_roomtype.index.levels[0]\nfig_bar = go.Figure(go.Bar(x=x, y=data_neighgroup_roomtype[\"Entire home\/apt\"], name=room_type[0]),layout=go.Layout(title=go.layout.Title(text=\"Room type per Neighbourhood\")))\nfig_bar.add_trace(go.Bar(x=x, y=data_neighgroup_roomtype[\"Private room\"], name=room_type[1]))\nfig_bar.add_trace(go.Bar(x=x, y=data_neighgroup_roomtype[\"Shared room\"], name=room_type[2]))\nfig_bar.update_layout(title=\"Number of apartments\",barmode='group', xaxis={'categoryorder':'category ascending'})\n","ace0ca13":"neigh_room_review_mean =data.groupby([\"room_type\",\"neighbourhood_group\"])[\"number_of_reviews\"]\n","0c734262":"neigh_room_review_mean = neigh_room_review_mean.agg({\"mean\":\"mean\"})\nneigh_room_review_mean","60198d57":"nrrm=neigh_room_review_mean.values.reshape(3,5)\nroom_type=['Entire home\/apt', 'Private room', 'Shared room']\n\nfig = go.Figure(data=[\n    go.Bar(name='Bronx', x=room_type, y=nrrm[:,0]),\n    go.Bar(name='Brooklyn', x=room_type, y=nrrm[:,1]),\n    go.Bar(name='Manhattan', x=room_type, y=nrrm[:,2]),\n    go.Bar(name='Queens', x=room_type, y=nrrm[:,3]),\n    go.Bar(name='Staten Island', x=room_type, y=nrrm[:,4])\n\n\n])\nfig.update_layout(title=\"Mean of number of reviews\",barmode='group')\nfig.show()\n","e43ce3e3":"price_loc_room = data.groupby([\"neighbourhood_group\",\"room_type\"])[\"price\"]\nprice_loc  = data.groupby([\"neighbourhood_group\"])[\"price\"]\nprice_room = data.groupby([\"room_type\"])[\"price\"]","8298aace":"price_loc_room.describe()","d1cfb257":"# Removing prices = 0\ndata.drop(data[data[\"price\"]==0].index,inplace=True)\nprice_loc  = data.groupby([\"neighbourhood_group\"])[\"price\"]\nprice_room = data.groupby([\"room_type\"])[\"price\"]\nprice_loc_room = data.groupby([\"neighbourhood_group\",\"room_type\"])[\"price\"]","e09eb2f1":"price_neighgroup_room=data.groupby([\"room_type\",\"neighbourhood_group\"])[\"price\"]\nfig = go.Figure()\n\nfor room in iter(room_type):\n    list_price=[]\n    list_neigh=[]\n    for neigh in iter(x):\n        list_price.append(price_neighgroup_room.get_group((room,neigh)).values)\n        list_neigh.append(list(repeat(neigh,len(price_neighgroup_room.get_group((room,neigh)).values))))\n\n    list_price=np.concatenate(list_price).tolist()\n    list_neigh = list(itertools.chain.from_iterable(list_neigh))\n    \n    fig.add_trace(go.Box(\n    y=list_price,\n    x=list_neigh,\n    name=room))\n    \n    \n\nfig.update_layout(\n    title='Boxplot - Price by neighbourhood and room type',\n    boxmode='group', # group together boxes of the different traces for each value of x\n    yaxis_title=\"$\"\n)\nfig.show()\n    ","57ad96e7":"fig = go.Figure()\nfig.add_trace(go.Histogram(x=price_loc.get_group(\"Bronx\"),name=\"Bronx\"))\nfig.add_trace(go.Histogram(x=price_loc.get_group(\"Brooklyn\"),name=\"Brooklyn\"))\nfig.add_trace(go.Histogram(x=price_loc.get_group(\"Manhattan\"),name=\"Manhattan\"))\nfig.add_trace(go.Histogram(x=price_loc.get_group(\"Queens\"),name=\"Queens\"))\nfig.add_trace(go.Histogram(x=price_loc.get_group(\"Staten Island\"),name=\"Staten Island\"))\n\n# Overlay both histograms\nfig.update_layout(title=\"Price distribution by the location\",barmode='overlay',xaxis_title=\"Price\")\n# Reduce opacity to see both histograms\nfig.update_traces(opacity=0.75)\nfig.show()","70368886":"fig = go.Figure()\nfig.add_trace(go.Histogram(x=price_room.get_group(\"Entire home\/apt\"),name=\"Entire home\/apt\"))\nfig.add_trace(go.Histogram(x=price_room.get_group(\"Private room\"),name=\"Private room\"))\nfig.add_trace(go.Histogram(x=price_room.get_group(\"Shared room\"),name=\"Shared room\"))\n\n# Overlay both histograms\nfig.update_layout(title=\"Price distribution by the room type\",barmode='overlay',xaxis_title=\"Price\")\n# Reduce opacity to see both histograms\nfig.update_traces(opacity=0.75)\nfig.show()","44300660":"high_prices=pd.DataFrame(columns={})\nexceed_price=[]\n\nfor room in iter(room_type):\n    for neigh in iter(x):\n        median = np.median(price_loc_room.get_group((neigh,room)))\n        upper_quartile = np.percentile(price_loc_room.get_group((neigh,room)), 75)\n        lower_quartile = np.percentile(price_loc_room.get_group((neigh,room)), 25)\n\n        iqr = upper_quartile - lower_quartile # Interquartile range\n        upper_whisker = price_loc_room.get_group((neigh,room))[price_loc_room.get_group((neigh,room))<=upper_quartile+1.5*iqr].max()\n        \n        # Now we get the number of rooms (type \"room\") in the neighbourhood (\"neigh\") higher than the upper fence \n        apartments_high_than_upperwhisker = price_loc_room.get_group((neigh,room))[price_loc_room.get_group((neigh,room))>upper_whisker].count()\n        \n        exceed_price.append(apartments_high_than_upperwhisker)\n\nexceed_price=np.array(exceed_price).reshape(3,5)\nroom_type=['Entire home\/apt', 'Private room', 'Shared room']\n\nfig = go.Figure(data=[\n    go.Bar(name='Bronx', x=room_type, y=exceed_price[:,0]),\n    go.Bar(name='Brooklyn', x=room_type, y=exceed_price[:,1]),\n    go.Bar(name='Manhattan', x=room_type, y=exceed_price[:,2]),\n    go.Bar(name='Queens', x=room_type, y=exceed_price[:,3]),\n    go.Bar(name='Staten Island', x=room_type, y=exceed_price[:,4])\n\n\n])\nfig.update_layout(title=\"Number of apartments higher than the upper fence of the boxplot\",barmode='group')\nfig.show()\n","2211a73e":"# The boxcox() SciPy function implements the Box-Cox method. \n# It takes an argument, called lambda, that controls the type of transform to perform.\n# lambda = 0 is a log transformation\ndef log_transform(group):\n    return boxcox(group,0)\n\n\ndata_log=data\ndata_log.price=data_log.price.apply(log_transform)\nprice_loc_log  = data_log.groupby([\"neighbourhood_group\"])[\"price\"]\nprice_room_log = data_log.groupby([\"room_type\"])[\"price\"]\nprice_loc_room_log = data.groupby([\"neighbourhood_group\",\"room_type\"])[\"price\"]\n","dddc2818":"coordinates_and_price = zip(data.latitude,data.longitude,data.neighbourhood_group,data.price)\ncoordinates_and_price = sorted(coordinates_and_price,key=operator.itemgetter(3))\nlatitude   = list(zip(*coordinates_and_price))[0] \nlongitude  = list(zip(*coordinates_and_price))[1] \nneighbours = list(zip(*coordinates_and_price))[2]\nprice      = list(zip(*coordinates_and_price))[3]","000dce65":"## With this cell you can select the neighbourhood you want to plot\n\n# zone = str(input(\"What neighbourhood do you want to see?:\\n\\n0- Bronx\\n1- Brooklyn\\n2- Manhattan\\n3- Queens\\n4- Staten Island\\n5- All\\n\"))\n\nzone=\"All\" # By default\n\nif(zone!=\"All\"):\n    index=[]\n    for i,j in enumerate(neighbours):\n        if(j==zone):\n            index.append(i)\nelse:\n    index=np.arange(len(data))\n","2520eedc":"\nmapbox_access_token = \"pk.eyJ1IjoicG9sb2RlYWx2YXJhZG8iLCJhIjoiY2sycnp4N2YzMGF0OTNtcjZpMmhieDRhNSJ9.HmhtvNNEFy07YqjH4AHKSQ\"\npx.set_mapbox_access_token(mapbox_access_token)\n\n\nfig = go.Figure(go.Scattermapbox(\n        lat=list(operator.itemgetter(*index)(latitude)) ,\n        lon=list(map(longitude.__getitem__, index)) ,\n        mode='markers',\n        marker=go.scattermapbox.Marker(\n            size=10,\n            color=list(map(price.__getitem__, index)),\n            colorscale=\"Earth\",\n             colorbar=dict(\n             title=\"Price\",\n             tickmode=\"array\",             \n             ticks=\"outside\",\n             tickvals=[10,100,500,2000,8000,10000] ,  \n             ticktext=[\"10 $\",\"100 $\",\"500 $\",\"2000 $\",\"8000 $\",\"10000 $\"],\n    \n             \n        )\n   \n        \n    )))\n\nfig.update_layout(\n    title=\"Price in \"+zone+\" neighbourhood\",\n    autosize=True,\n    hovermode='closest',\n    mapbox_style=\"open-street-map\",\n    mapbox=go.layout.Mapbox(\n        accesstoken=mapbox_access_token,\n        bearing=0,\n        center=go.layout.mapbox.Center(\n            lat=40.64749,\n            lon=-73.97237\n        ),\n        pitch=0,\n        zoom=10,\n    )\n)\n\n\nfig.show()","f00d8ff1":"Now we are going to plot","4761e70f":"To get a better insight about the number of reviews we are going to calculate the mean.","826eee7a":"Let's start with some data analysis and visualization imports.","57f4e1f4":"# 1. INTRODUCTION","03da2a9b":"We can observe how the variable follows an exponential distribution and, furthermore, there are a lot of apartments with high prices (higher than the upper fence from the boxplot). Let's check how many apartments exceed this value:\n\n","305047ed":"# EXPLORATORY DATA ANALYSIS: NEW YORK AIRBNB","6f1f145a":"## *Note*","14f07277":"# 2.BASIC ANALISYS","cca76217":" I am going to use the plotly library with the aim of getting a better visualization and interaction.\n \n Let's start: ","70913374":"In this project I am going to analyze the Airbnb New York dataset from [kaggle](https:\/\/www.kaggle.com\/dgomonov\/data-exploration-on-nyc-airbnb\/data).\n\nThe dataset contains the following variables:\n* id (int): identification number \n* name (string): name of the apartment \n* host_id (int): identification number of the host \n* neighbourhood_group (String): neighbourhood group. Four groups (Bronx,Queens,Manhattan,Staten Island,Brooklyn)\n* neighbourhood (String)\n* latitude (Float): Latitude of the apartment\n* longitude (F[](http:\/\/)loat): Longitude of the apartment\n* room_type (String): Type of room \n* price (int): Price per night\n* minimum_nights (int): Minimum nights to stay in the apartment\n* number_of_reviews (String): Number of reviews of the apartment\n* last_review (String): Last review date\n* reviews_per_month (Float):\n* calculated_host_listings_count (int):\n* availability_365 (int): Number of available days of this apartment during the year.","fef24fdf":"Selecting the neighbourhood we can plot the price in the map (now the 5 groups are plotted)","c28e621e":"Again, Brooklyn and Manhattan stand out.\n\nAs we will see in the map section these neighbourhoods will have a high concentration of high-priced apartments. ","77e78275":"As we can observe, Manhattan and Brooklyn show apartments with a price much higher than the average.","f6b4be7c":"The missing observed data do not seem relevant. Given that the missing values in \"reviews_per_month\" and \"last_review\" share the same index I am going to consider that there were no reviews for those apartments.\n\nOn the other hand, columns \"host_name\" and \"name\" are irrelevant and do not provide useful information. So we are going to fill them with \"Unknown\".","185de2e4":"### 1. Number of apartments","9e69eea8":"# CONCLUSION","9135f068":"Let's check the type of each variable:","b71e29b1":"Given that I am not going to work with statiscal properties in this project we can leave it.","ed933215":"Let's look into the price variable.","3e12d41f":"# 3. PRICE MAP","0e83ed08":"Using the Boxcox function of Scipy package we can apply a log transformation and get a normal distribution.","2b91c1e6":"### 2. Price\n","736ee6e2":"### 3. Number of Reviews","37f640cc":"Now let's see how the distribution of the price is.","3dda8813":"As we can observe, there are some observations with a price = 0 (min = 0). Given that it does not make sense (rent an apartment for free ), I am going to drop them.","d5526c76":"Manhattan and Brooklyn gather more than the 75% of the apartments in New York. These two neighbourhoods gather most of the Entire Homes and Private rooms as well. So, as we will see, the price is going to be higher in these areas.\n\n","4718c4a9":"# 3. VISUALIZATION","4ce3b8ac":"![nyc-borough-map.png](attachment:nyc-borough-map.png)","9b38bff4":"We have seen how Manhattan and Brooklyn gather most of the apartments (75%) as well as the ones with the highest price.\n\nOn the other hand this analysis could be done more in depth, analysing each neighbourhood.\nSo, if you are thinking about staying in Manhattan or Brooklyn prepare your wallet ;)"}}