{"cell_type":{"18656371":"code","59e7259a":"code","cf4b0f29":"code","7664d88b":"code","ce144bd8":"code","af6d7d38":"code","72fc703b":"code","582c9456":"code","97e83f59":"code","cc91d31e":"code","0361ce53":"code","ff6fa8e7":"code","0b5aec6f":"code","2b292916":"code","9134ced2":"code","d1bfaf16":"code","308d13f6":"code","646d9f3b":"code","9187c3a6":"code","7683946a":"code","110b5f80":"code","ea051aa8":"code","1988188e":"code","a11d2364":"code","a77ef4ec":"code","2ada9aa8":"markdown","3d73af46":"markdown","2937d000":"markdown","97cda71f":"markdown","bfee9396":"markdown","7ac533e2":"markdown","33d47ae5":"markdown","50388c27":"markdown","d6c0ed05":"markdown","8d79cd97":"markdown","0bb82d31":"markdown","64aa9715":"markdown","6902dc04":"markdown","eb4088a8":"markdown","724d0afc":"markdown","540bb3c1":"markdown","8e81a303":"markdown","b890cea7":"markdown","5d52b846":"markdown","2cb15e22":"markdown","a631773f":"markdown","4f157a1b":"markdown","e22edd6f":"markdown","22026f22":"markdown","508c19e0":"markdown","37817431":"markdown","e9c206c5":"markdown","4024facf":"markdown","d014b1f4":"markdown","6c06f977":"markdown","1013e56a":"markdown","746d93e8":"markdown"},"source":{"18656371":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","59e7259a":"import seaborn as sns\nimport pandas_profiling\nimport matplotlib.pyplot as plt\nimport re","cf4b0f29":"train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv', index_col='PassengerId')","7664d88b":"train.head(10)","ce144bd8":"train.columns","af6d7d38":"train.describe().T","72fc703b":"train.info()","582c9456":"sns.heatmap(train.isnull())","97e83f59":"pandas_profiling.ProfileReport(train)","cc91d31e":"f,ax=plt.subplots(1,2,figsize=(18,8))\ntrain['Survived'].value_counts().plot.pie(explode=[0,0.1],autopct='%1.1f%%',ax=ax[0],shadow=True)\nax[0].set_title('Survived')\nax[0].set_ylabel('')\nsns.countplot('Survived',data=train,ax=ax[1])\nax[1].set_title('Survived')\nplt.show()","0361ce53":"def bar_chart(feature):\n    survived = train[train['Survived']==1][feature].value_counts()\n    dead = train[train['Survived']==0][feature].value_counts()\n    df = pd.DataFrame([survived,dead])\n    df.index = ['Survived','Dead']\n    df.plot(kind='bar',stacked=True, figsize=(10,5))","ff6fa8e7":"bar_chart('Sex')","0b5aec6f":"bar_chart('Pclass')","2b292916":"bar_chart('SibSp')","9134ced2":"bar_chart('Embarked')","d1bfaf16":"bar_chart('Cabin')","308d13f6":"temp = train.copy()\ntemp['Family_size'] = temp['SibSp'] + temp['Parch'] + 1\n\nfig, ax = plt.subplots(1, 1, figsize=(15, 8))\nsns.countplot(data=temp, x='Family_size', hue='Survived', ax=ax)\nax.set_title('Family Size - Survived Plot', size=25, loc='Left', y=1.04)\n\nplt.show()","646d9f3b":"temp = train.copy()\ntemp['Title'] = temp.Name.str.extract(pat='([a-zA-Z]+\\.)')\ntemp.Title[~temp.Title.isin(['Mr.', 'Miss.', 'Mrs.', 'Master.'])] = 'rare'\nfig, ax = plt.subplots(1, 1, figsize=(15, 8))\nsns.countplot(data=temp, x='Title', hue='Survived', ax=ax)\nax.set_title('Title - Survived Plot', loc='Left', size=25, y=1.03)\nplt.show()","9187c3a6":"def ticket_extractor(ticket):\n    alpha = re.sub('\\d', '', ticket)\n    if alpha:\n        return alpha\n    else:\n        num = re.search('\\d{1,9}', ticket)\n        return ticket\n    \ntemp = train.copy()\ntemp['Ticket_extracted'] = temp.Ticket.apply(ticket_extractor)\nfor i in range(len(temp.Ticket)):\n    try:\n        int(temp.Ticket_extracted.iloc[i])\n        temp.Ticket_extracted.iloc[i] = f'Num_{len(temp.Ticket_extracted.iloc[i])}'\n    except:\n        continue\nfor label, pattern in [('_ca', 'C[.]?A[.]?'), ('_PC', 'PC'), ('_SOTON', 'SOTON'), ('_STON', 'STON'), \n                       ('_WC', 'W[.]?[\/]?C'), ('_SC', 'S[.]?C[.]?'), ('_A', 'A[.]?'), ('_SOC', 'S[.]?O[.]?[\/]?C'), \n                       ('_PP', 'PP'), ('_FC', '(F.C.|F.C.C.)'), ('_LS_number', 'Num_(6|7)'), ('_SS_number', 'Num_(3|4|5)'), \n                       ('rare', '^[^_]')]:\n    temp.Ticket_extracted[temp.Ticket_extracted.str.contains(pattern)] = label\n    \ntemp['Ticket_extracted'].value_counts(dropna=False)\n\nfig, ax = plt.subplots(2, 1, figsize=(15, 15))\nsns.countplot(data=temp, x='Ticket_extracted', hue='Survived', ax=ax[0])\nax[0].set_title('Extracted Ticket - Survival \"count\" plot', size=20, loc='Left', y=1.03)\n\nsns.barplot(data=temp, x='Ticket_extracted', y='Survived', ax=ax[1])\nax[1].set_title('Extracted Ticket - Survival \"chance\" plot', size=20, loc='Left', y=1.03)\n\nplt.show()","7683946a":"sns.factorplot('Embarked','Survived',data=train)\nfig=plt.gcf()\nfig.set_size_inches(5,3)\nplt.show()","110b5f80":"g = sns.FacetGrid(train, col='Survived')\ng = g.map(sns.distplot, \"Fare\")","ea051aa8":"g = sns.FacetGrid(train, col='Survived')\ng = g.map(sns.distplot, \"Age\")","1988188e":"sns.heatmap(train.corr(), cmap = 'coolwarm', annot = True)","a11d2364":"t  = train.copy()\ntarget = 'Survived'\nfig, ax = plt.subplots(figsize=(10,5))\nax.scatter(x = t[\"Fare\"], y = t[target])\nplt.ylabel(target, fontsize=13)\nplt.xlabel(\"Fare\", fontsize=13)\nplt.show()\n","a77ef4ec":"t  = train.copy()\ntarget = 'Survived'\nfig, ax = plt.subplots(figsize=(10,5))\nax.scatter(x = t[\"Age\"], y = t[target])\nplt.ylabel(target, fontsize=13)\nplt.xlabel(\"Age\", fontsize=13)\nplt.show()","2ada9aa8":"First, there are some missing values that need to be dealt with. There are (at least) three ways we can deal with this, each one being slightly more effort.\n\n1) We can just drop the rows with missing data. While this might be tempting, dropping a row with around 14 other entries just because of one missing value doesn't sound like the brightest idea.\n\n2) We can replace the missing data with the average age (whether it's median\/mode\/mean) of the data set. This would be a good first pass method and it would let us get the models up and running.\n\n3) We can replace the missing data with the average from similar passengers. For example, if we're missing the age of a 1st class passenger, who is female, who embarked from C etc. we could substitute in the age of other passengers who fit that description.","3d73af46":"# OUTLIERS","2937d000":"Looks decent, what attracts my attention is the ticket A, PC, CA, Large_Serial_number and Small_Serial_number as they are quite a few of these tickets to be confident in the survival chances shown by these tickets. This feature might help us improve the probability of survival of few passengers and may push there probability of survival over 50% if they actually survived, to get classified as survived, which is actually the problem with many instances as they get classified as not survived, i.e probability of survival is lower than 50%.","97cda71f":"# Bar Chart for Categorical Features\nSurvived\n\nPclass\n\nSex\n\nSibSp ( # of siblings and spouse)\n\nParch ( # of parents and children)\n\nEmbarked\n\nCabin","bfee9396":"Interpreting The Heatmap\nThe first thing to note is that only the numeric features are compared as it is obvious that we cannot correlate between alphabets or strings. Before understanding the plot, let us see what exactly correlation is.\n\nPOSITIVE CORRELATION: If an increase in feature A leads to increase in feature B, then they are positively correlated. A value 1 means perfect positive correlation.\n\nNEGATIVE CORRELATION: If an increase in feature A leads to decrease in feature B, then they are negatively correlated. A value -1 means perfect negative correlation.\n\nFare and Survive has best correlation\n","7ac533e2":"The Chart confirms a person aboarded from C slightly more likely survived\n\nThe Chart confirms a person aboarded from Q more likely dead\n\nThe Chart confirms a person aboarded from S more likely dead","33d47ae5":"Age,Cabin have null values that must be treated.\n\nOut of 891 passengers in training set, only around 350 survived i.e Only 38.4% of the total training set survived the crash.\n\nWomen more likely survivied than Men\n\nThe analysis for outliers show that Fare, Embarked and Parch column have some outliers.\nFare and Survive has best correlation.Variable are not very much correlated so we can use them all.\n\nThe chances for survival for Port C is highest around 0.55 while it is lowest for S.\n\nIt is an important feature as it reveals that passengers with family size 2 - 4 had a better survival rate than passengers travelling alone or who had larger families.\n\nPerson aboarded from C slightly more likely survived,Q more likely dead,S more likely dead.\n\n1st class more likely survivied than other classes\n3rd class more likely dead than other classes","50388c27":"Analyze the profile ","d6c0ed05":"Fare\n\nAge","8d79cd97":"# Titanic EDA --Let me tell you the story","0bb82d31":"# Step 1\n# Checking Null Values","64aa9715":"While the picture isn't super clear, you can see that survivors had more expensive fares and a wider spread of fare prices. ","6902dc04":"Data Dictionary\n\n| Variable      | Definition    | Key                     |\n| ------------- |:-------------:| -----------------------:|\n| survival      | Survival      |0 = No, 1 = Yes          |\n|pclass\t        |Ticket class\t|1 = 1st, 2 = 2nd, 3 = 3rd|\n|sex\t        |Sex\t        |                         |\n|Age\t        |Age in years   |\t                      |\n|sibsp\t        |siblings   \t|                         |\n|parch\t        |children aboard|                         |\n|ticket\t        |Ticket number  |                         |\n|fare           |Passenger fare\t|                         |\n|cabin\t        |Cabin number   |                         |\t\n|embarked\t    |Port of Embarkation|\tC = Cherbourg, Q = Queenstown, S = Southampton|  \n\nVariable Notes  \npclass: A proxy for socio-economic status (SES)  \n1st = Upper  \n2nd = Middle  \n3rd = Lower  \n \n\nsibsp: The dataset defines family relations in this way...  \nSibling = brother, sister, stepbrother, stepsister  \nSpouse = husband, wife (mistresses and fianc\u00e9s were ignored)  \n\nparch: The dataset defines family relations in this way...  \nParent = mother, father  \nChild = daughter, son, stepdaughter, stepson  \nSome children travelled only with a nanny, therefore parch=0 for them.  ","eb4088a8":"The chances for survival for Port C is highest around 0.55 while it is lowest for S.","724d0afc":"The above plot shows that Mrs., Miss. and Master. titles had better chances if survival, chances of survival is less than that for survival in case of Mr. and rare title, but it is worse for the Mr. title as we have seen same insights from gender variable.\n","540bb3c1":"# Correlations","8e81a303":"The Chart confirms **1st class** more likely survivied than **other classes**  \nThe Chart confirms **3rd class** more likely dead than **other classes**","b890cea7":"The analysis for outliers show that Fare, Embarked and Parch column have some outliers.\n\nWe will try to remove these outlier rows in each of the columns to make sure our analysis is accurate\n\nOutliers can really influence the final model.\nThey tend to drag averages up or down and can really change the predictive capabilities of the model.","5d52b846":"# Understanding data using single line\nWhenever you want to get started on a problem like regression and classification using machine learning just use ProfileReport it will give us initial insights that will be very useful to understand the data provided.Let's see what we have got..","2cb15e22":"# Chances for Survival by Port Of Embarkation","a631773f":"# Thanks a lot for having a look at this notebook. If you found this notebook useful, Do Upvote.\n\nIf you have forked the kernel and not upvoted yet, then show the support by upvoting :)\n\nPlease leave you constructive criticism and suggestion in comments below!!","4f157a1b":"This kernel serves as a beginner tutorial and basic guideline for approaching the Exploratory data analysis.0.\nI decided to write this kernel because Titanic: Machine Learning from Disaster is one of my favorite competitions on Kaggle. This is a beginner level kernel which focuses on Exploratory Data Analysis. A lot of people start Kaggle with this competition and they get lost in extremely long tutorial kernels. This is a short kernel compared to the other ones. I hope this will be a good guide for starters and inspire them with new feature engineering ideas.\n\nExploratory Data Analysis(EDA):\n1)Analysis of the features.\n2)Finding any relations or trends considering multiple features.","e22edd6f":"In the data provided to us, each individual has a SibSp and Parch, so if we add these features together for an individual and add 1 to it, 1 being the individual themself, we can create a new feature Family_size.\n\nIt is an important feature as it reveals that passengers with family size 2 - 4 had a better survival rate than passengers travelling alone or who had larger families.","22026f22":"# Charts for Numerical Features","508c19e0":"The Chart confirms a person aboarded with more than 2 siblings or spouse more likely survived  \nThe Chart confirms a person aboarded without siblings or spouse more likely dead","37817431":"It is evident that not many passengers survived the accident.\n\nOut of 891 passengers in training set, only around 350 survived i.e Only 38.4% of the total training set survived the crash. We need to dig down more to get better insights from the data and see which categories of the passengers did survive and who didn't.\n\nWe will try to check the survival rate by using the different features of the dataset. Some of the features being Sex, Port Of Embarcation, Age,etc.","e9c206c5":"Roughly 20 percent of the Age data is missing. The proportion of Age missing is likely small enough for reasonable replacement with some form of imputation. Looking at the Cabin column, it looks like we are just missing too much of that data to do something useful with at a basic level. We'll probably drop this later, or change it to another feature like \"Cabin Known: 1 or 0\"\n","4024facf":"# OBSERVATIONS","d014b1f4":"So the total number of rows we have 891 and two variable have missing values.\n\nAge = 891-714 = 177 missing values\n\nCabin = 891 - 204 = 687\n\nSo Cabin has a lot of missing values so we have to decide that if we have to impute values by using a method or to delete this variable.","6c06f977":"# 'Family Size - Survived Plot'","1013e56a":"# The Chart confirms **Women** more likely survivied than **Men**\n It is possible that we could use sex to create a new feature by combining it with other features.","746d93e8":"Too much cabin names so this graph doesn't help much."}}