{"cell_type":{"2773f94f":"code","bd1c54f8":"code","61f753c0":"code","5dc1ed95":"code","c66a21f5":"code","37a3aa0f":"code","d4b31ca6":"code","e2cac68a":"code","fa2a02ad":"markdown","8620ba3b":"markdown","4eed2a7b":"markdown","d2eb10b8":"markdown","270bbfc8":"markdown","809492d4":"markdown","908cba09":"markdown","03e813d7":"markdown","8b92bbe0":"markdown","abf1c3f6":"markdown"},"source":{"2773f94f":"#Load data\nimport pandas as pd\n\ntrain = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')\n\n#Drop features we are not going to use\ntrain = train.drop(['Name', 'Ticket','Fare','Embarked', 'SibSp', 'Cabin'],axis=1)\ntest = test.drop(['Name', 'Ticket', 'Fare', 'Embarked','SibSp', 'Cabin'],axis=1)\n\n#Look at the first 3 rows of our training data\ntrain.head(10)","bd1c54f8":"#Convert ['male','female'] to [1,0] so that our decision tree can be built\nfor df in [train,test]:\n    df['Sex_binary']=df['Sex'].map({'male':1,'female':0})\n   \n#Fill in missing age values with 0 (presuming they are a baby if they do not have a listed age)\ntrain['Age'] = train['Age'].fillna(0)\ntest['Age'] = test['Age'].fillna(0)\n\ntrain['Parch'] = train['Parch'].fillna(0)\ntest['Parch'] = test['Parch'].fillna(0)\n\n\n#Select feature column names and target variable we are going to use for training\nfeatures = ['Pclass','Age','Sex_binary','Parch']\ntarget = 'Survived'\n\n#Look at the first 3 rows (we have over 800 total rows) of our training data.; \n#This is input which our classifier will use as an input.\ntrain[features].head(5)","61f753c0":"#Display first 3 target variables\ntrain[target].head(3).values","5dc1ed95":"from sklearn.tree import DecisionTreeClassifier\n\n#Create classifier object with default hyperparameters\nclf = DecisionTreeClassifier(max_depth=5, min_samples_leaf = 2)\n\n#Fit our classifier using the training features and the training target values\nclf.fit(train[features],train[target]) ","c66a21f5":"#Display decision tree\n\n#Blue on a node or leaf means the tree thinks the person did not survive\n#Orange on a node or leaf means that tree thinks that the person did survive\n\n#In Chrome, to zoom in press control +. To zoom out, press control -. If you are on a Mac, use Command.\n\n#Remove each '#' below to run the two lines below.\n#from IPython.core.display import Image, display\n#display(Image('titanic_tree.png', width=1900, unconfined=True))","37a3aa0f":"#Make predictions using the features from the test data set\npredictions = clf.predict(test[features])\n\n#Display our predictions - they are either 0 or 1 for each training instance \n#depending on whether our algorithm believes the person survived or not.\npredictions","d4b31ca6":"#Create a  DataFrame with the passengers ids and our prediction regarding whether they survived or not\nsubmission = pd.DataFrame({'PassengerId':test['PassengerId'],'Survived':predictions})\n\n#Visualize the first 5 rows\nsubmission.head()","e2cac68a":"#Convert DataFrame to a csv file that can be uploaded\n#This is saved in the same directory as your notebook\nfilename = 'Titanic Predictions new.csv'\n\nsubmission.to_csv(filename,index=False)\n\nprint('Saved file: ' + filename)","fa2a02ad":"# 2. Create and fit the decision tree\n\nThis tree is definitely going to overfit our data. When you get to the challenge stage, you can return here and tune hyperparameters in this cell. For example, you could reduce the maximum depth of the tree to 3 by setting max_depth=3 with the following command:\n>clf = DecisionTreeClassifier(max_depth=3)\n\nTo change multiple hyperparameters, seperate out the parameters with a comma. For example, to change the learning rate and minimum samples per leaf and the maximum depth fill in the parentheses with the following:\n>clf = DecisionTreeClassifier(max_depth=3,min_samples_leaf=2)\n\nThe other parameters are listed below.\nYou can also access the list of parameters by reading the [documentation](http:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.tree.DecisionTreeClassifier.html#sklearn.tree.DecisionTreeClassifier) for decision tree classifiers. Another way to access the parameters is to place your cursor in between the parentheses and then press shift-tab.\n","8620ba3b":"### Prepare the data to be read by our algorithm","4eed2a7b":"This tutorial walks you through submitting a \".csv\" file of predictions to Kaggle for the first time.<br><br>\n\n### Scoring and challenges:<br>\nIf you simply run the code below, your score will be fairly poor. I have intentionally left lots of room for improvement regarding the model used (currently a simple decision tree classifier). <br><br> The idea of this tutorial is to get you started and have you make the decisions of how to improve your score. At the bottom of the tutorial are challenges which, if you follow them, will significantly improve your score.\n\n\n\n### Steps to complete this tutorial on your own computer:\nThe kernel below can be run in the browser. But if you would like to run the code locally on your own computer, you can follow the steps below.\n\n1. Create a Kaggle account (https:\/\/www.kaggle.com\/).\n2. Download Titanic dataset (https:\/\/www.kaggle.com\/c\/titanic\/data).<br>\n    a. Download 'train.csv' and 'test.csv'.<br>\n    b. Place both files in a folder named 'input'.<br>\n    c. Place that folder in the same directory as your notebook.\n3. Install [Jupyter Notebooks](https:\/\/jupyter.org\/) (follow my [installation tutorial](http:\/\/joshlawman.com\/getting-set-up-in-jupyter-notebooks-using-anaconda-to-install-the-jupyter-pandas-sklearn-etc\/) if you are confused)\n4. Download this kernel as a [notebook](https:\/\/github.com\/jlawman\/Meetup\/blob\/master\/11.7%20Meetup%20-%20Decision%20Trees\/Submit%20your%20first%20Kaggle%20prediction%20-%20Titanic%20Dataset.ipynb) with empty cells from my GitHub. If you are new to GitHub go [the repository folder](https:\/\/github.com\/jlawman\/Meetup), click \"Clone or Download\", then unzip the file and pull out the notebook you want.\n5. Run every cell in the notebook (except the optional visualization cells).\n6. Submit CSV containing the predictions.\n7. Try to improve the prediction by using the challenge prompts which are suitable to your level.","d2eb10b8":"# 4. Create csv to upload to Kaggle","270bbfc8":"## 1. Process the data\n\n### Load data","809492d4":"# Challenges\n\nThe default decision tree gives a score of .70813 placing you at rank 8,070 out of 8,767. Can you improve it?\n\n### Level 1: First time on Kaggle\nLevel 1a: Can you try to give the tree a max depth to improve your score?\n\nLevel 1b:  Can you import a different tree models such as the Random Forest Classifier to see how it affects your score? Use the following code line to create it. Compare this model to a decision tree with depth 3.\n> from sklearn.ensemble import RandomForestClassifier<br>\n> clf = RandomForestClassifier() ****\n\n\n### Level 2: Submitted to Kaggle before\nLevel 2a: Can you include other features that were dropped to improve your score? Don't forget to deal with any missing data.\n<br><br>\nLevel 2b: Can you visualize your data using matplotlib or seaborn to glean other insights of how to improve your predictions?\n\n### Level 3: Some familiarity with scikit-learn\nLevel 3a: Can you use GridSearchCV from sklearn.model_selection on the Random Forest Classifier to tune the hyperparameters and improve your score?\n<br><br>\nLevel 3b: Can you train a list of models and then evaluate each one using sklearn.metrics train_test_split function to see which give you the best score?\n<br><br>\nLevel 3c: Can you take the list from challenge 3b and then have the best models in the list vote on how each prediction should be made? ","908cba09":"Let's look at the first 3 corresponding target variables. This is the measure of whether the passenger survived or not (i.e. the first passenger (22 year-old male) did not survive, but the second passenger (38 year-old female did survive).\n<br><br>\nOur classifier will use this to know what the output should be for each of the training instances.","03e813d7":"Our data has the following columns:\n- PassengerId - Each passenger's id\n- Survived - Whether the passenger survived or not (1 - yes, 0 - no)\n- Pclass - The passenger class: (1st class - 1, 2nd class - 2, third class - 3)\n- Sex - Each passenger's sex\n- Age - Each passenger's age\n- Parch - # of parents or children aboard\n- Embarked - Port of Embarkation","8b92bbe0":"# 5. Submit file to Kaggle\n\nGo to the [submission section](https:\/\/www.kaggle.com\/c\/titanic\/submit) of the Titanic competition. Drag your file from the directory which contains your code and make your submission.<br><br> Congratulations - you're on the leaderboard!****","abf1c3f6":"# 3. Make Predictions"}}