{"cell_type":{"e55bfbe1":"code","97fe3e16":"code","78fc47a6":"code","29a3753f":"code","2c1547fa":"code","32bf3f22":"code","cd34f0da":"code","935a40da":"code","9f1d5ca8":"code","09041098":"code","c9c0631a":"code","8ab674aa":"code","f1949611":"code","e0af5cd2":"code","f3f2326e":"code","543196c2":"code","47c6abd4":"code","fce80d6c":"code","cce5e235":"code","1315e68c":"code","74765812":"code","535757b2":"code","8ad95c27":"code","55478149":"code","81679c9e":"code","a9e8f260":"code","e7780010":"code","df900ab0":"code","d325f90c":"code","6cbce5d9":"code","bfec7daf":"code","022f484f":"code","b99489bc":"code","d12f5084":"code","e40ba0b6":"code","43932af6":"code","4f365ed5":"code","ef4a40e9":"code","1ee4dae9":"code","40077685":"code","69e73afa":"code","3fcf425c":"code","55998482":"code","ca4d8e1b":"code","c37b8e2c":"code","25d1c9b3":"code","725658dd":"code","2bd64820":"code","d1740058":"code","49a96547":"code","9fcfc84c":"code","fa5c1dc4":"code","d1cfd770":"code","9211421a":"code","88228960":"code","49b5d9a5":"code","f730d8ff":"code","10e6f060":"code","4d4eec89":"code","7e7e9d5d":"code","772e6f36":"code","25a88018":"code","d236df1e":"code","a8885484":"code","87902fab":"code","4ba4aeda":"code","b5a9f9b0":"code","45ae100b":"code","f8b06e61":"code","17562205":"code","69982326":"code","8e6ec0f0":"code","ee4c6497":"code","4202d9b9":"code","48cabec5":"code","fae43015":"code","01a3a8a7":"code","9b972887":"code","4f96ce28":"code","31d85040":"code","ea6c01c1":"code","3eba581a":"code","344a7020":"code","020aa052":"code","a9c50251":"markdown","0b80047b":"markdown","91c8a483":"markdown","3a54f077":"markdown","9d3740f0":"markdown","d02a98fa":"markdown","491a9b1a":"markdown","b5769979":"markdown","32b112cd":"markdown","02ee8824":"markdown","9cce07f2":"markdown","22150816":"markdown","bc911a2f":"markdown","7dcdd434":"markdown"},"source":{"e55bfbe1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","97fe3e16":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nimport math\nfrom pandas.plotting import scatter_matrix","78fc47a6":"data = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')","29a3753f":"test_data = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","2c1547fa":"data.head()","32bf3f22":"data.shape","cd34f0da":"# Save test predictions to file\n#output = pd.DataFrame({'PassengerId': data.PassengerId,'Survived': preds})\n#output.to_csv('submission.csv', index=False)","935a40da":"copy_data = data","9f1d5ca8":"copy_test_data = test_data","09041098":"data.info()","c9c0631a":"classes = data.Pclass.unique()\nclasses.sort()\nlen(classes)","8ab674aa":"classes","f1949611":"data.describe()","e0af5cd2":"print(\"Number of Passengers is equal to \" + str(len(data)))","f3f2326e":"data.groupby('Pclass').size()","543196c2":"data.groupby('Sex').size()","47c6abd4":"data.groupby('Survived').size()","fce80d6c":"data.columns","cce5e235":"dataset = data[['Sex', 'Age', 'SibSp','Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked']]","1315e68c":"dataset.plot(kind='box', subplots=True, layout=(2,2), sharex=False, sharey=False)\nplt.show()","74765812":"scatter_matrix(dataset)\nplt.show()","535757b2":"sns.set_theme(style=\"darkgrid\")\nsns.countplot(x= \"Survived\", hue=\"Sex\", order=[1, 0], data = data).set(xticklabels=[\"Survived\", \"Not Survived\"])\nplt.xlabel(\"Survivors vs Non-Survivors Comparison\")\nplt.ylabel(\"Number of Passengers\")\nplt.title(\"Comparison\")\nplt.legend(labels=[\"Male\", \"Female\"])\nplt.show()","8ad95c27":"sns.set_theme(style=\"whitegrid\")\nsns.countplot(x= \"Survived\", hue=\"Pclass\", data = data).set(xticklabels=[\"Survived\", \"Not Survived\"])\nplt.xlabel(\"Survivors vs Non-Survivors Comparison\")\nplt.ylabel(\"Number of Passengers\")\nplt.title(\"Comparison\")\nplt.legend(title='Passenger Class', loc='upper right', labels=[\"First Class\", \"Second Class\", \"Third Class\"])\nplt.show()","55478149":"dataset.hist(figsize=(15,7.5))\nplt.show()","81679c9e":"data[\"Age\"].hist(figsize=(10,5))\nplt.show()","a9e8f260":"data[\"Fare\"].plot.hist(figsize=(10,5), bins = 40)\nplt.show()","e7780010":"data.isnull()","df900ab0":"data.isnull().sum()","d325f90c":"sns.heatmap(data.isnull(), yticklabels = False, cmap = \"plasma\")\nplt.show()","6cbce5d9":"sns.set_theme(style=\"darkgrid\")\nsns.boxplot(x= \"Pclass\", y=\"Age\", data = data)\nplt.show()","bfec7daf":"data.head()","022f484f":"data.drop(\"Cabin\", axis =1, inplace =True)","b99489bc":"data.head()","d12f5084":"len(data.columns)","e40ba0b6":"sex = pd.get_dummies(data[\"Sex\"], drop_first = True)\nsex.head(5)","43932af6":"embarked = pd.get_dummies(data[\"Embarked\"], drop_first = True)\nembarked.head(5)","4f365ed5":"Pcl= pd.get_dummies(data[\"Pclass\"], drop_first = True)\nPcl.head(5)","ef4a40e9":"data.head()","1ee4dae9":"len(data.columns)","40077685":"data = pd.concat([data, sex, embarked, Pcl], axis = 1)\ndata.head()","69e73afa":"len(data.columns)","3fcf425c":"data.drop([\"Sex\", \"Pclass\", \"PassengerId\", \"Embarked\", \"Name\"], axis =1, inplace = True)","55998482":"data.drop([\"Ticket\"], axis =1, inplace = True)","ca4d8e1b":"len(data.columns)","c37b8e2c":"data=data.fillna(data.mean())","25d1c9b3":"sns.heatmap(data.isnull(), yticklabels = False, cmap = \"plasma\")\nplt.show()","725658dd":"data.head(5)","2bd64820":"data.shape","d1740058":"X = data.drop(\"Survived\", axis = 1)\ny = data[\"Survived\"]","49a96547":"from sklearn.feature_selection import SelectKBest, f_classif","9fcfc84c":"# using SelectKBest to get scores of all features of the DataFrame\n\ntest = SelectKBest(f_classif, k='all')\ntest_fit = test.fit(X, y)\nfeat_score = test_fit.scores_.round(3)\np_values = -np.log10(test_fit.pvalues_).round(3)\nfeature_list = list(X.columns.values)\nselected_features = test.get_support([test_fit])\nselected_features","fa5c1dc4":"temp_list = list()\nfor i in selected_features:\n    temp_list.append({'Feature':feature_list[i], 'P_Value':p_values[i], 'Score': feat_score[i]  })\n    \nfeat_select = pd.DataFrame(temp_list)\nfeat_select = feat_select.sort_values(by='Score', axis=0, ascending=False, inplace=False, kind='quicksort', na_position='last')\nfeat_select = feat_select.set_index('Feature')\nfeat_select","d1cfd770":"### Dropping the Embarked and Family column\n\nX = X.drop(['S', 'Parch', 'Age', 'SibSp', 'Q'], axis = 1)","9211421a":"X.head()","88228960":"from sklearn.model_selection import train_test_split","49b5d9a5":"features_train, features_test, labels_train, labels_test = \\\n    train_test_split(X, y, test_size=0.3, random_state=42)\nfeatures_train.shape","f730d8ff":"sns.heatmap(test_data.isnull(), yticklabels = False, cmap = \"plasma\")\nplt.show()","10e6f060":"features_test.shape","4d4eec89":"labels_train.shape","7e7e9d5d":"labels_test.shape","772e6f36":"from sklearn.neighbors import NearestNeighbors\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import GridSearchCV","25a88018":"knn = KNeighborsClassifier( )\nk_range = list(range(1,10))\nweights_options = ['uniform','distance']\nk_grid = dict(n_neighbors=k_range, weights = weights_options)\ngrid = GridSearchCV(knn, k_grid, cv=10, scoring = 'precision')\ngrid.fit(features_train, labels_train)","d236df1e":"print (\"Best Score: \",str(grid.best_score_))","a8885484":"print (\"Best Parameters: \",str(grid.best_params_))","87902fab":"print (\"Best Estimators: \",str(grid.best_estimator_))","4ba4aeda":"# predicting scores\n\nlabel_pred = grid.predict(features_test)","b5a9f9b0":"from sklearn.metrics import accuracy_score\n# Calculating Accuracy\n\nacc_clf = accuracy_score(labels_test,label_pred)\nprint (\"classifier's accuracy: \",str(acc_clf) )","45ae100b":"test_set = copy_test_data[['Pclass', 'Sex', 'Fare']].copy()","f8b06e61":"test_set.head()","17562205":"test_set.isnull().sum()","69982326":"test_set=test_set.fillna(test_set.mean())\ntest_set.isnull().sum()","8e6ec0f0":"# Converting values of column \"Sex\" to float\n\ntest_set[\"Sex\"][test_set[\"Sex\"] == \"male\"] = 1\ntest_set[\"Sex\"][test_set[\"Sex\"] == \"female\"] = 0","ee4c6497":"test_set.head()","4202d9b9":"Pcl= pd.get_dummies(test_set[\"Pclass\"], drop_first = True)\nPcl.head(5)","48cabec5":"test_set = test_set.drop([\"Pclass\"], axis = 1)","fae43015":"test_set.rename(columns={'Sex': 'male'}, inplace=True)","01a3a8a7":"cols = [\"Fare\", \"male\"]\ntest_set = test_set[cols]","9b972887":"test_set = pd.concat([test_set, Pcl], axis = 1)","4f96ce28":"test_set.head()","31d85040":"# predicting survivals on test set\n\nfinal_pred = grid.predict(test_set)\nfinal_pred","ea6c01c1":"copy_test_data['Survived'] = pd.Series(final_pred, index=copy_test_data.index)\ncopy_test_data.head()","3eba581a":"output = pd.DataFrame({'PassengerId': copy_test_data.PassengerId, 'Survived': final_pred})\noutput.to_csv('submission2.csv', index=False)","344a7020":"sub = pd.read_csv('.\/submission2.csv')\nsub.shape","020aa052":"sub.head()","a9c50251":"All set, let us now import all the required libraries","0b80047b":"Let us import the data set into the data variable","91c8a483":"Applying K Nearest Neighbours Algorithm","3a54f077":"So three different classes","9d3740f0":"Let us see the different types of passenger classes in this dataset","d02a98fa":"Let us take a look at the shape of the data set","491a9b1a":"Data Wrangling","b5769979":"Let us now describe the data","32b112cd":"All Null Values have been dropped!","02ee8824":"Based on the score above, I have considered top-3 features - Sex, Pclass and Adult - as my final features","9cce07f2":"Ok, so it has 891 rows and 12 columns","22150816":"Data Analysis","bc911a2f":"Now let us take a look at some information regarding this dataset","7dcdd434":"The first 5 rows of the data are"}}