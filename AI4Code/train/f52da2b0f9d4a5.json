{"cell_type":{"adaf9ee4":"code","c02a9954":"code","a65e9ab3":"code","3715191a":"code","57735846":"code","bbad6150":"code","636728a3":"code","74509973":"code","06275369":"code","5e08b67c":"code","8834b9f5":"code","a289a82d":"code","b7a6575c":"code","40295406":"code","e55980a6":"code","fe4a6794":"code","c4fef729":"code","b4169c17":"code","579e2a3d":"code","759fdd8c":"code","bfacb766":"code","bf65f364":"code","42381458":"code","ee783e3c":"code","1c5c0f09":"code","88c7fb42":"code","9eef9327":"code","c856b845":"code","4ed1d20d":"code","6a2fa5e4":"code","76ccf0fe":"code","84af1ea0":"code","b3fc952d":"code","14065f4e":"code","e14b8322":"code","9655805e":"code","7d677369":"code","496ebd7a":"markdown","4b2b8799":"markdown","ace55318":"markdown","d19b361f":"markdown","78494629":"markdown","4d6a9aef":"markdown","5586798d":"markdown","289da01f":"markdown","1173f9ed":"markdown","e6f189d8":"markdown","9f1724cd":"markdown","31ed1332":"markdown","59dadb72":"markdown","b76faadd":"markdown","9173092d":"markdown","f7bde988":"markdown","4a025a74":"markdown","9037f643":"markdown","7412aa9a":"markdown","bd89bb97":"markdown","aaf66be2":"markdown","eba2894e":"markdown","ad36d70b":"markdown","d78d446a":"markdown","1a5fa674":"markdown","715f0ae3":"markdown","5db0878c":"markdown","bb26983a":"markdown","ea67495c":"markdown"},"source":{"adaf9ee4":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport missingno\n\n# for visualisation\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport matplotlib\nfrom matplotlib import cm\nimport geopandas as gpd\nimport plotly.express as px\nimport seaborn as sns\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected=True)    \nimport folium as flm\nfrom folium import plugins\nimport ipywidgets\nimport geopy\nimport geoplot as gplt\nimport geoplot.crs as gcrs\nimport plotly.graph_objects as go\n\nfrom IPython.display import HTML,display\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","c02a9954":"#importing main dataset \ndf1 = pd.read_csv('..\/input\/covid19-in-india\/covid_19_india.csv')\n\n# Delete a single column from the DataFrame\ndf1 = df1.drop(labels=\"Sno\", axis=1)\n\n# delete a range of rows which are all null\ndf1 = df1.drop(labels=range(15086, 15114), axis=0)\n\ndf1.tail(10)\n","a65e9ab3":"df1 = df1.replace(\"-\",np.nan)\nmissingno.matrix(df1)","3715191a":"#keeping only required columns\ndf1 = df1[['Date', 'State\/UnionTerritory','Cured','Deaths','Confirmed']]\n\ndf1.tail(10)","57735846":"#keeping only required columns\ndf1_1 = df1[['State\/UnionTerritory','Cured','Deaths','Confirmed']]","bbad6150":"fp = r'..\/input\/india-states\/Igismap\/Indian_States.shp'\nmap_df = gpd.read_file(fp)\nmap_df.head()","636728a3":"merged = map_df.set_index('st_nm').join(df1_1.set_index('State\/UnionTerritory'))\nmerged.head()","74509973":"gplt.choropleth(\n    merged, hue='Confirmed', projection=gcrs.AlbersEqualArea(),\n    edgecolor='black', linewidth=1,\n    cmap='Blues', legend=True\n)\n","06275369":"import json\n\n# shapefiles can be converted to geojson with QGIS\nwith open(r'..\/input\/geojson\/india_states.geojson') as f:\n    geojson_counties = json.load(f)","5e08b67c":"for i in geojson_counties['features']:\n    i['id'] = i['properties']['NAME_1']\n    \nmap1 = flm.Map(location=[20.5937,78.9629], zoom_start=4)\n\nflm.Choropleth(\n    geo_data=geojson_counties,\n    name='choropleth',\n    data=df1_1,\n    columns=['State\/UnionTerritory', 'Confirmed'],\n    # see folium.Choropleth? for details on key_on\n    key_on='feature.id',\n    fill_color='YlGn',\n    fill_opacity=0.5,\n    line_opacity=0.5).add_to(map1)\n\n# layer control to turn choropleth on or off\nflm.LayerControl().add_to(map1)\n\n# display map\nmap1","8834b9f5":"gplt.choropleth(\n    merged, hue='Cured', projection=gcrs.AlbersEqualArea(),\n    edgecolor='black', linewidth=1,\n    cmap='Greens', legend=True\n)","a289a82d":"gplt.choropleth(\n    merged, hue='Deaths', projection=gcrs.AlbersEqualArea(),\n    edgecolor='black', linewidth=1,\n    cmap='Reds', legend=True\n)","b7a6575c":"df1_2 = df1.groupby(['Date'])['Confirmed', 'Deaths','Cured',].sum().reset_index()","40295406":"#making columns for daily new cases\ndf1_2['new_confirmed'] = df1_1.Confirmed.diff()\ndf1_2['new_deaths'] = df1_2.Deaths.diff()\ndf1_2['new_cured'] = df1_2.Cured.diff()","e55980a6":"fig = go.Figure(go.Bar(x= df1_2.Date, y= df1_2.Cured, name='Recovered'))\nfig.add_trace(go.Bar(x=df1_2.Date, y= df1_2.Deaths, name='Deaths'))\nfig.add_trace(go.Bar(x=df1_2.Date, y= df1_2.Confirmed, name='Confirmed'))\n\nfig.update_layout(barmode='stack',legend_orientation=\"h\",legend=dict(x= 0.3, y=1.0),\n                  xaxis={'categoryorder':'total descending'},\n                 title_text='<b>Covid-19 Total cases in India (March 2020 - May 2021)<b>',\n                  title_x=0.5,\n                      width= 1100,\n    height= 1000\n                 )\nfig.update_xaxes(tickfont=dict(color='black', size=14))\nfig.update_yaxes(tickfont=dict(color='black', size=14))\nfig.show()","fe4a6794":"import plotly.graph_objects as go\n\n\nfig = go.Figure([go.Bar(x= df1_2.Date, y= df1_2.new_deaths,marker_color='red')])\nfig.update_xaxes(tickfont=dict(color='black', size=14))\nfig.update_yaxes(tickfont=dict(color='black', size=14))\n\n\nfig.update_layout(\n    title_text='<b>Covid-19 Total Daily Deaths in India (March 2020 - May 2021)<b>',\n                  title_x=0.5,\n        width= 1100,\n    height= 800\n)\n\nfig.show()","c4fef729":"#importing tests dataset\ndf2 = pd.read_csv('..\/input\/covid19-in-india\/StatewiseTestingDetails.csv' )\n\ndf2.head(10)","b4169c17":"df2 = df2.replace(\"-\",np.nan)\nmissingno.matrix(df2)","579e2a3d":"#keeping only required columns\ndf2_1 = df2[['Date', 'State','TotalSamples']]\n\ndf2_1.tail(10)","759fdd8c":"fig = px.bar(df2_1,x=\"TotalSamples\", y=\"State\", orientation='h')\nfig.update_xaxes(tickfont=dict(color='black', size=14))\nfig.update_yaxes(tickfont=dict(color='black', size=14))\nfig.update_layout(\n    title_text='<b>Number of Samples Tested <b>',\n    title_x=0.5,\n    autosize=False,\n    width= 1100,\n    height= 1000)\nfig.update_traces(marker_color='red')\nfig.show()","bfacb766":"# vaccine statewise dataset\ndf3 = pd.read_csv('..\/input\/covid19-in-india\/covid_vaccine_statewise.csv' )\ndf3 = df3.drop(labels = 4588, axis =0)\ndf3.tail(10)","bf65f364":"df3 = df3.replace(\"-\",np.nan)\nmissingno.matrix(df3)","42381458":"df3_1 = df3.drop(labels=[\"AEFI\", \"18-30 years (Age)\", \"30-45 years (Age)\", \"45-60 years (Age)\", \"60+ years (Age)\"], axis=1)\n\ndf3_1.tail()","ee783e3c":"data = df3_1.loc[df3_1['Updated On'] == '18\/05\/2021']\ndata.shape","1c5c0f09":"data.tail(37)","88c7fb42":"map_df['st_nm'] = map_df['st_nm'].replace(['NTC of Delhi','Jammu & Kashmir','Arunanchal Pradesh', 'Andaman & Nicobar Island'],['Delhi','Jammu and Kashmir','Arunachal Pradesh', 'Andaman and Nicobar Islands'])","9eef9327":"merged2 = map_df.set_index('st_nm').join(data.set_index('State'))","c856b845":"gplt.choropleth(\n    merged2, hue='Total Individuals Vaccinated', projection=gcrs.AlbersEqualArea(),\n    edgecolor='black', linewidth=1,\n    cmap='Greens', legend=True\n)\n","4ed1d20d":"df3_2 = data.groupby(['State'])['Total Doses Administered', 'First Dose Administered','Second Dose Administered',].sum().reset_index()\n\ndisplay(df3_2.iloc[13])\n","6a2fa5e4":"df3_2 = df3_2.drop(labels=13, axis=0) # dropping the row with India as a state\ndf3_2","76ccf0fe":"df3_2.columns = ['State', 'TotalDose','FirstDose','SecondDose']\nfig = go.Figure(go.Bar(x= df3_2.State, y= df3_2.FirstDose, name='First Dose'))\nfig.add_trace(go.Bar(x=df3_2.State, y= df3_2.SecondDose, name='Second Dose'))\nfig.add_trace(go.Bar(x=df3_2.State, y= df3_2.TotalDose, name='Total Doses'))\n\nfig.update_layout(barmode='stack',legend_orientation=\"h\",legend=dict(x= 0.3, y=1.0),\n                  xaxis={'categoryorder':'total descending'},\n                 title_text='<b>Covid-19 Total Vaccinations in India as of 18 May 2021<b>',\n                  title_x=0.5,\n                  width= 1100,\n                  height= 1000\n                 )\nfig.update_xaxes(tickfont=dict(color='black', size=14))\nfig.update_yaxes(tickfont=dict(color='black', size=14))\nfig.show()","84af1ea0":"df3_3 = data.groupby(['State'])['Male(Individuals Vaccinated)','Female(Individuals Vaccinated)','Transgender(Individuals Vaccinated)','Total Individuals Vaccinated'].sum().reset_index()\ndisplay(df3_3.iloc[13])\n","b3fc952d":"df3_3 = df3_3.drop(labels=13, axis=0) # dropping the row with India as a state\ndf3_3","14065f4e":"df3_3.columns = ['State', 'Male','Female','Transgender' ,'Total']\nfig = go.Figure(go.Bar(x= df3_3.State, y= df3_3.Male, name='Male Individuals'))\nfig.add_trace(go.Bar(x=df3_3.State, y= df3_3.Female, name='Female Individuals'))\nfig.add_trace(go.Bar(x=df3_3.State, y= df3_3.Transgender, name='Transgender Individuals'))\nfig.add_trace(go.Bar(x=df3_3.State, y= df3_3.Total, name='Total Individuals'))\n\n\nfig.update_layout(barmode='stack',legend_orientation=\"h\",legend=dict(x= 0.3, y=1.0),\n                  xaxis={'categoryorder':'total descending'},\n                 title_text='<b>Covid-19 Total Vaccinations in India according to Sex (as of 18 May 2021)<b>',\n                  title_x=0.5,\n                  width= 1100,\n                  height= 1000\n                 )\nfig.update_xaxes(tickfont=dict(color='black', size=14))\nfig.update_yaxes(tickfont=dict(color='black', size=14))\nfig.show()","e14b8322":"df3_4 = data.groupby(['State'])['Total Covaxin Administered','Total CoviShield Administered','Total Doses Administered'].sum().reset_index()\ndisplay(df3_4.iloc[13])\n","9655805e":"df3_4 = df3_4.drop(labels=13, axis=0) # dropping the row with India as a state\ndf3_4","7d677369":"df3_4.columns = ['State', 'Covaxin','CoviShield' ,'Total']\nfig = go.Figure(go.Bar(x= df3_4.State, y= df3_4.Covaxin, name='Covaxin Administered'))\nfig.add_trace(go.Bar(x=df3_4.State, y= df3_4.CoviShield, name='CoviShield Administered'))\nfig.add_trace(go.Bar(x=df3_4.State, y= df3_4.Total, name='Total Vaccine Administered'))\n\n\nfig.update_layout(barmode='stack',legend_orientation=\"h\",legend=dict(x= 0.3, y=1.0),\n                  xaxis={'categoryorder':'total descending'},\n                 title_text='<b>Covid-19 Total Vaccinations in India according to type of vaccine(as of 18 May 2021)<b>',\n                  title_x=0.5,\n                  width= 1100,\n                  height= 1000\n                 )\nfig.update_xaxes(tickfont=dict(color='black', size=14))\nfig.update_yaxes(tickfont=dict(color='black', size=14))\nfig.show()","496ebd7a":"Replacing a few state and union territories names in the GIS info dataframe to match exactly to the way they have been described in the dataframe `data`","4b2b8799":"## Importing Libraries and Dependencies\n","ace55318":"Thus, the total number of doses administered in the entire country as of Mid-May 2021 are about 18.5 crore out of which approximately 14.4 crore are First Doses while 4 crore are Second Doses.\n\nSince India has a population of about 130 crores, 18.5 crores is significantly small even though a large value in itself. Morever only 4 crore i.e. 3.1% percent of the population has been full vaccinated (Second Dose Administered).","d19b361f":"From the above map, we conclude that the number of people vaccinated are the highest in Maharastra followed by states like UP and Rajasthan.","78494629":"### Visualising total cured cases in India statewise on the map","4d6a9aef":"### Reading in Statewise Testing Details","5586798d":"## Overview\n\nThis notebook performs exploratory data analysis on India's Covid-19 Situation.\n","289da01f":"Thus, states like UP,Bihar, Tamil Nadu and Maharastra have higher total Samples than the rest.","1173f9ed":"From the above missing values matrix we realise that most of the values of the columns `ConfirmedIndianNational` and `ConfirmedForeignNational` are missing. Thus, its better to drop them.","e6f189d8":"From the above plot, we realise that the deaths are significantly smaller than the recovered cases so let us plot them separately and analyse the data.","9f1724cd":"## Testing done in India EDA","31ed1332":"From above plot, it is evident that Maharastra has the highest number of confirmed cases.\n\nThe north-eastern states on the other hand have very few cases.","59dadb72":"From the above matrix, we realise a lot data for postive and negative testing results as missing so we drop it temporarily.","b76faadd":"## Vaccination details EDA","9173092d":"### Datewise Visualizing total cases, cured and deaths","f7bde988":"From the above matrix, we realise a lot data for age group columns missing so we drop them temporarily.","4a025a74":"### Visualizing Total, First, Second Doses Administered (Statewise)","9037f643":"Merging the dataset file with the shape file","7412aa9a":"### Visualizing Vaccination w.r.t. type of Vaccine","bd89bb97":"## Input Datasets\n\nThe input directories and dataset structure is as follows:\n\n1. `covid19-in-india`  directory contains : \n    * `covid_19_india.csv` file contains the COVID-19 cases at daily level\n    * `StatewiseTestingDetails.csv` file contains the Statewise testing details\n    * `covid_vaccine_statewise.csv` file contains data on the vaccination situation \n\n\n2. `geojson` contains `india_states.geojson` json file which contains India state borders along with their non-spatial attributes (id, name, etc) for use in Plotly Choropleth maps\n\n3. `india-states` directory contains files in various format for geometric information of the geospatial representation of the states of India. We will use the `Indian_States.shp` shape file.","aaf66be2":"From the above data, we conclude that out of the 18.5 crore doses given, CoviShield was Administered to about 16.5 core individuals approximately 89% which is significantly larger approximately of Covaxin given to the rest 2 crore (10 percent).","eba2894e":"### Visualising total cases in India statewise on the map using folium","ad36d70b":"From the above plot, we can conclude that \n* no. of daily death cases gradually increased from March 2020 to mid-September 2020\n* there was a sudden spike in the death count on 17 June 2020\n* first wave peaked was reached in Sept 2020 and the daily death cases started decreasing thereafter till March 2021\n* second wave hit around March 2021 and led to exponential increase in deaths up until now","d78d446a":"### Reading in the GIS info shape file\n","1a5fa674":"### Visualizing total cases in India statewise on the map using geoplot","715f0ae3":"### Visualising total deaths in India statewise on the map","5db0878c":"## ","bb26983a":"### Visualizing Vaccination w.r.t. Sex","ea67495c":"From the above dataframe we now make a new dataframe `data` and take only the last updated data i.e. on 18\/05\/2021 for each state."}}