{"cell_type":{"8e081660":"code","6c690df2":"code","e861b0cc":"code","d6f7cece":"code","123c5ab2":"code","b95794c5":"code","2172a285":"code","2540f2d3":"code","33746578":"code","8323abf2":"code","d854d903":"code","d801a381":"code","fd56074a":"code","0ee5ba15":"code","ba744080":"code","2ad00686":"markdown","2505f3e1":"markdown","bb888293":"markdown","33785600":"markdown","9e4f2ac4":"markdown","0e9d419b":"markdown","ec6f8871":"markdown","cc77e9be":"markdown","c63dec3d":"markdown","ca6abd2f":"markdown","68051c01":"markdown","a90f1c16":"markdown"},"source":{"8e081660":"import numpy as np  # linear algebra\nimport pandas as pd  # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns  # visualization tool\nimport json  # will use for converting json data to str\n\nimport os\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","6c690df2":"# First load data\ndata = pd.read_csv('\/kaggle\/input\/tmdb-movie-metadata\/tmdb_5000_movies.csv')\n","e861b0cc":"# look data inside\ndata.head()\n","d6f7cece":"data.info()","123c5ab2":"highestBudgetMovies = data.nlargest(10, 'budget')  # we keep 10 movies which has highest budget\nplt.subplots(figsize=(12, 10))\nax = pd.Series(highestBudgetMovies.budget).sort_values(ascending=True).plot.barh(width=0.9,\n                                                                                 color=sns.color_palette('rocket', 10))\nfor i, v in enumerate(highestBudgetMovies.title):\n    ax.text(.8, i, v, fontsize=12, color='white', weight='bold')\nplt.title('Highest budget movies')\nplt.xlabel(\"Total budget in $\")\nax.set_yticklabels([])  # hide movie's id\nplt.show()\n","b95794c5":"sns.relplot(kind='scatter', x='budget', y='popularity', data=data)\nplt.show()\n","2172a285":"# lets look genres\nprint(data.genres)\n","2540f2d3":"# JSON to STRING\n# json.loads; used for parse valid JSON String into Python dictionary.\n# range; allows to generate a series of numbers within a given range. Ex; 0,1,2...10\n# append; adds a single item to the existing list\ndata['genres'] = data['genres'].apply(json.loads)  # with apply function each of data.genres will become string\nfor index, i in zip(data.index, data['genres']):\n    list1 = []\n    for j in range(len(i)):\n        list1.append((i[j]['name']))  # 'name' key contains name of the genre\n\n    data.loc[index, 'genres'] = str(list1)\n","33746578":"# STRING to LIST\n# The strip; removes characters from both left and right based on the arg.\ndata['genres'] = data['genres'].str.strip('[]').str.replace(' ', '').str.replace(\"'\", '')\ndata['genres'] = data['genres'].str.split(',')\n","8323abf2":"plt.subplots(figsize=(12, 10))\nlist1 = []\n# extend(); takes a single argument (a list) and adds it to the end.\n# value_counts(); return a series containing counts of unique values.\nfor i in data.genres:\n    list1.extend(i)  # we add all genres to one list\nax = pd.Series(list1).value_counts()[:10].sort_values(ascending=True).plot.barh(width=0.9,\n                                                                                color=sns.color_palette('spring', 10))\n\n# We take each value of unique genres and indexing them like (0:2297),(1:1722) etc and write them to bar.\nfor i, v in enumerate(pd.Series(list1).value_counts()[:10].sort_values(ascending=True).values):\n    ax.text(.8, i, v, fontsize=12, color='white', weight='bold')\nplt.title('Top 10 Genres')\nplt.show()\n","d854d903":"data['nice'] = ['good' if each < data.vote_average.mean() else 'not' for each in data.vote_average]\n# We add new column to our dataset which has 2 unique value\ndata.nice.unique()\n","d801a381":"#  Pie chart, where the slices will be ordered and plotted counter-clockwise.\nlabels = 'Good', 'Not Good'\nsizes = data['nice'].value_counts()  # sizes have number for 'not' and 'good'\nexplode = (0.05, 0)  # first part of pie will be explode\ncolors = [\"lightpink\", \"yellowgreen\"]\nplt.pie(sizes, explode=explode, colors=colors, autopct='%1.1f%%', shadow=True)  # autopct; wrote rates on pies\nplt.title('Good movie or not?')\nplt.legend(labels, loc='upper right')\nplt.show()\n","fd56074a":"data['time'] = ['short' if each < data.runtime.mean() else 'not' for each in data.runtime]\n# We add new column to our dataset which has 2 unique value\ndata.time.unique()\n","0ee5ba15":"labels = 'Short', 'Not Short'\nsizes = data['time'].value_counts()  # sizes have number for 'not' and 'short'\nexplode = (0.05, 0)  # first part of pie will be explode\ncolors = [\"bisque\", \"aqua\"]\nplt.pie(sizes, explode=explode, colors=colors, autopct='%1.1f%%', shadow=True)  # autopct; wrote rates on pies\nplt.title('Short movie or not?')\nplt.legend(labels, loc='upper right')\nplt.show()\n","ba744080":"sns.relplot(kind='line', x='vote_average', y='runtime', data=data)\nplt.show()\n","2ad00686":"# 6-)  Relation between vote average and runtime","2505f3e1":"Lets see the rate !\nWe will show this with Pie Chart.\n","bb888293":"# 2-) Relation between **popularity** and **budget**","33785600":"*  We have to find unique genres values\n*  As we saw our  genres in json format, first we will convert to strings.","9e4f2ac4":"In this notebook i will use **TMDB 5000 Movie Dataset**.","0e9d419b":"What we did here ???\n\n* We deleted space with *str.replace('  ' , '')*\n* We replaced \"'\" character with space with *str.replace(\" ' \" , '')*\n\n['Action', 'Adventure', 'Crime'] => [Adventure, Fantasy, Action]","ec6f8871":"# 3-) Top 10 Genres","cc77e9be":"# 1-)Highest budget movies\n","c63dec3d":"# 4-)Good movie or not ?\n\nFor this we will use list comprehension and **vote_average** column.","ca6abd2f":"The dataset has the following features:-\n\n* budget - The budget in which the movie was made.\n* genres - The genre of the movie, Action, Comedy ,Thriller etc.\n* homepage - A link to the homepage of the movie.\n* keywords - The keywords or tags related to the movie.\n* original_language - The language in which the movie was made.\n* original_title - The title of the movie before translation or adaptation.\n* overview - A brief description of the movie.\n* popularity - A numeric quantity specifying the movie popularity.\n* production_companies - The production house of the movie.\n* production_countries - The country in which it was produced.\n* release_date - The date on which it was released.\n* revenue - The worldwide revenue generated by the movie.\n* runtime - The running time of the movie in minutes.\n* status - \"Released\" or \"Rumored\".\n* tagline - Movie's tagline.\n* title - Title of the movie.\n* vote_average - average ratings the movie recieved.\n* vote_count - the count of votes recieved.","68051c01":"# 5-) Short movie or not ?","a90f1c16":"* And you can see that high popularity doesnt come with high budget :)"}}