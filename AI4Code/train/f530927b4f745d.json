{"cell_type":{"d3b822a8":"code","f414b6e7":"code","8f775753":"code","265297dc":"code","3f03b5c8":"code","4504b1c8":"code","f5bb0509":"code","80b1ca94":"code","9d5319ea":"code","47cb4d92":"code","6544bb28":"code","51e90d24":"code","c2e1e69a":"code","8fd47911":"code","bd8358b1":"code","54484990":"code","9066b2bd":"code","494579b2":"code","5ee262df":"code","f1523cc5":"code","268b944c":"code","a8c1b2f8":"code","436e6c03":"code","e674a9e3":"code","dd2a5185":"code","fbda76d6":"code","2821229e":"code","86745096":"code","01775f02":"code","eb096afd":"code","098eac6f":"code","fe489ce7":"code","a92511da":"code","2bcd6cb7":"code","d705be69":"code","1349c06d":"code","d9f87558":"code","54d2c205":"code","d978d3b0":"code","237df2fc":"code","49b80df4":"code","6a9f6b03":"code","daebb4f9":"code","042285f5":"code","f3cbd0be":"code","bf79c5da":"code","4647485c":"code","24e96461":"code","b25e77d2":"code","7d8a7feb":"code","af24f1fd":"code","75fbb3d2":"code","0a13e8d6":"code","7cfabc52":"code","35de1896":"code","4974a803":"code","b80445b4":"code","47c99448":"code","eca1ca06":"code","d9e857e3":"code","aa399074":"code","cadf2bfe":"code","4831b632":"code","0f5ec260":"code","24a7434e":"code","dcd1216c":"code","703f9727":"code","3e06fd60":"code","0956c1bb":"code","1a510de7":"code","284d2368":"code","79d87741":"code","c8402c47":"code","6c604ca2":"code","22486b85":"code","b1001996":"code","017fb3fd":"code","c31dece9":"code","41e41f57":"code","e27ec06f":"code","58671a83":"code","1d47257d":"code","240f428c":"code","78902cce":"code","0ee7f0f5":"code","a3ed968e":"code","388ce029":"code","2526f951":"code","baeaed14":"code","4a236e9e":"code","be170cc9":"code","e696423b":"code","805e3c1b":"code","0a0ef724":"code","4cbeb30f":"code","1a0f9169":"code","72e8e048":"code","a28d28f9":"code","c4f430e4":"code","73ffbfa3":"markdown","60067ede":"markdown","e5cfb266":"markdown","3ee67756":"markdown","e972a469":"markdown","a090cd70":"markdown","943b4d07":"markdown","d5088e66":"markdown","6f3843b5":"markdown","47144184":"markdown","3c218186":"markdown","bc500452":"markdown","2dba0752":"markdown","55ce86c0":"markdown","4de847f4":"markdown","e2ec6a6f":"markdown","03a01ea2":"markdown","33961c34":"markdown","966ff6be":"markdown","31306941":"markdown","fb269a22":"markdown","76f9da35":"markdown"},"source":{"d3b822a8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f414b6e7":"import pandas as pd\nimport numpy as np \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","8f775753":"df_info=pd.read_csv('..\/input\/lending-club\/lending_club_info.csv',index_col='LoanStatNew')","265297dc":"df_info.head()","3f03b5c8":"df_info['Description']","4504b1c8":"df_info.loc['loan_amnt']['Description']","f5bb0509":"def feature_des(name):\n    return df_info.loc[name]['Description']","80b1ca94":"feature_des('mort_acc')","9d5319ea":"df=pd.read_csv('..\/input\/lending-club\/lending_club_loan_two.csv')","47cb4d92":"df.head()","6544bb28":"df.info()","51e90d24":"sns.countplot(x='loan_status',data=df)","c2e1e69a":"sns.displot(df['loan_amnt'],kde=False,bins=50)","8fd47911":"df.corr()","bd8358b1":"plt.figure(figsize=(14,7))\nsns.heatmap(df.corr(),annot=True,cmap='viridis')","54484990":"sns.scatterplot(x='installment',y='loan_amnt',data=df)","9066b2bd":"sns.boxplot(x='loan_status',y='loan_amnt',data=df)","494579b2":"df.groupby('loan_status')['loan_amnt'].describe()","5ee262df":"print(feature_des('grade'))\nprint(feature_des('sub_grade'))","f1523cc5":"df['grade'].unique()","268b944c":"df['sub_grade'].unique()","a8c1b2f8":"sns.countplot(x='grade',data=df,hue='loan_status')","436e6c03":"plt.figure(figsize=(14,5))\nsns.countplot(x='sub_grade',data=df,hue='loan_status',order=sorted(df['sub_grade'].unique()))","e674a9e3":"F_G=df[(df['grade']=='F') | (df['grade']=='G')]\nplt.figure(figsize=(14,5))\nsns.countplot(x='sub_grade',data=F_G,hue='loan_status',order=sorted(F_G['sub_grade'].unique()))","dd2a5185":"df['loan_status'].map({'Fully Paid':1,'Charged Off':0})","fbda76d6":"df['loan_paid']=df['loan_status'].map({'Fully Paid':1,'Charged Off':0})","2821229e":"df.head()","86745096":"df.corr()['loan_paid'].sort_values().drop('loan_paid').plot(kind='bar')","01775f02":"df.isnull().sum()","eb096afd":"feature_des('emp_title')","098eac6f":"df['emp_title'].value_counts()","fe489ce7":"df.drop('emp_title',axis=1,inplace=True)","a92511da":"df['emp_length'].dropna().unique()","2bcd6cb7":"plt.figure(figsize=(12,4))\nsns.countplot(x='emp_length',data=df,hue='loan_status')","d705be69":"df.drop('emp_length',axis=1,inplace=True)","1349c06d":"df.isnull().sum()","d9f87558":"feature_des('title')","54d2c205":"feature_des('purpose')","d978d3b0":"df[['title','purpose']]","237df2fc":"df.drop('title',axis=1,inplace=True)","49b80df4":"feature_des('mort_acc')","6a9f6b03":"df['mort_acc'].value_counts()","daebb4f9":"df.corr()['mort_acc']","042285f5":"ave_acc=df.groupby('total_acc').mean()['mort_acc']","f3cbd0be":"def fill_missing_mort(total_acc,mort_acc):\n    \n    if np.isnan(mort_acc):\n        return ave_acc[total_acc]\n    else:\n        return mort_acc","bf79c5da":"df['mort_acc']=df.apply(lambda x:fill_missing_mort(x['total_acc'],x['mort_acc']),axis=1)","4647485c":"df['mort_acc']=round(df['mort_acc'])","24e96461":"df['mort_acc'].value_counts()","b25e77d2":"df=df.dropna()","7d8a7feb":"df.isnull().sum()","af24f1fd":"df.select_dtypes(['object']).columns","75fbb3d2":"df.drop('grade',axis=1,inplace=True)","0a13e8d6":"df.select_dtypes(['object']).columns","7cfabc52":"feature_des('term')","35de1896":"df['term']","4974a803":"df['term']=df['term'].apply(lambda term:int(term[:3]))","b80445b4":"df['term']","47c99448":"df.select_dtypes(['object']).columns","eca1ca06":"df['home_ownership'].value_counts()","d9e857e3":"df['home_ownership']=df['home_ownership'].replace(['NONE','ANY'],'OTHER')","aa399074":"df['home_ownership'].value_counts()","cadf2bfe":"df['zip_code']=df['address'].apply(lambda address:int(address[-5:]))","4831b632":"df['zip_code'].value_counts()","0f5ec260":"df.drop('address',axis=1,inplace=True)","24a7434e":"df.select_dtypes(['object']).columns","dcd1216c":"df.drop('issue_d',axis=1,inplace=True)","703f9727":"feature_des('earliest_cr_line')","3e06fd60":"df['earliest_cr_line']=df['earliest_cr_line'].apply(lambda date: int(date[-4:]))","0956c1bb":"df['earliest_cr_line'].value_counts()","1a510de7":"df.select_dtypes(['object']).columns","284d2368":"dummies = pd.get_dummies(df[['sub_grade','home_ownership','verification_status', 'application_type','initial_list_status','purpose' ]],drop_first=True)\ndf = df.drop(['sub_grade','home_ownership','verification_status', 'application_type','initial_list_status','purpose'],axis=1)\ndf = pd.concat([df,dummies],axis=1)","79d87741":"df.select_dtypes(['object']).columns","c8402c47":"df.drop('loan_status',axis=1,inplace=True)","6c604ca2":"df.select_dtypes(['object']).columns","22486b85":"from sklearn.model_selection import train_test_split","b1001996":"X=df.drop('loan_paid',axis=1).values","017fb3fd":"y=df['loan_paid'].values","c31dece9":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=101)","41e41f57":"from sklearn.preprocessing import MinMaxScaler","e27ec06f":"scaler=MinMaxScaler()","58671a83":"X_train=scaler.fit_transform(X_train)","1d47257d":"X_test=scaler.transform(X_test)","240f428c":"import tensorflow as tf","78902cce":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense,Dropout","0ee7f0f5":"df.shape","a3ed968e":"model=Sequential()\n# input layer\nmodel.add(Dense(71,  activation='relu'))\nmodel.add(Dropout(0.2))\n\n# hidden layer\nmodel.add(Dense(35, activation='relu'))\nmodel.add(Dropout(0.2))\n\n# hidden layer\nmodel.add(Dense(17, activation='relu'))\nmodel.add(Dropout(0.2))\n\n# hidden layer\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dropout(0.2))\n\n# output layer\nmodel.add(Dense(units=1,activation='sigmoid'))\n\n# Compile model\nmodel.compile(loss='binary_crossentropy', optimizer='adam')","388ce029":"model.fit(x=X_train, \n          y=y_train, \n          epochs=30,\n          batch_size=256,\n          validation_data=(X_test, y_test), \n          )","2526f951":"from tensorflow.keras.models import load_model","baeaed14":"model.save('loan_model.h5')","4a236e9e":"losses=pd.DataFrame(model.history.history)","be170cc9":"losses","e696423b":"losses.plot()","805e3c1b":"predictions = model.predict_classes(X_test)","0a0ef724":"from sklearn.metrics import classification_report,confusion_matrix","4cbeb30f":"print(classification_report(y_test,predictions))","1a0f9169":"confusion_matrix(y_test,predictions)","72e8e048":"import random\nrandom.seed(42)\nrandom_ind = random.randint(0,len(df))\n\nnew_customer = df.drop('loan_paid',axis=1).iloc[random_ind]\nnew_customer","a28d28f9":"model.predict_classes(new_customer.values.reshape(1,70))","c4f430e4":"df.iloc[random_ind]['loan_paid']","73ffbfa3":"### Loading data","60067ede":"### Creating model","e5cfb266":"#### Lets create a function that returns description of the corresponding feature","3ee67756":"### Train test split","e972a469":"### seems our model is good but not very good ,we can try changing layers ,epochos ,batchsize etc..","a090cd70":"# Lending Club Loan Prediction","943b4d07":"### lets take number of layers are equal to number of features in our case there are 71 features","d5088e66":"#### it seems like ratio of fully paid and charged off is all most same in every category of emp_length, so lets drop emp_length","6f3843b5":"#### total_acc has some positive corelation with mort_acc, so lets try to fill missing mort_acc values with average 'total_acc' values ","47144184":"### Categorical data","3c218186":"#### For easy evaluation lets map fully_paid to 1 and charged _off to 0","bc500452":"### let us focus on loan_status","2dba0752":"#### we can see that there is almost perfect corelation between 'loan_amnt' and 'installment'","55ce86c0":"## Our model predicted well, Thank you for your time and consider upvoting if you like my work. Feel free to give any feedbacks. Happy kaggling!","4de847f4":"##### Dealing with missing data","e2ec6a6f":"#### did this person actually end up paying back their loan? lets check","03a01ea2":"##### It make sence that mean of charged_off is greater than fully_paid, generally pepole cannot pay back because amount is high.","33961c34":"#### title and purpose columns are both same ,lets drop title","966ff6be":"#### F and G grdaes have almost equal number of charged_off and fully_paid rates, so lets explore F and G grades","31306941":"#### let us try to fill missing values in mort_acc column, for that we need corelation of mort_acc","fb269a22":"## Background\n\nLendingClub is a US peer-to-peer lending company, headquartered in San Francisco, California.[3] It was the first peer-to-peer lender to register its offerings as securities with the Securities and Exchange Commission (SEC), and to offer loan trading on a secondary market. LendingClub is the world's largest peer-to-peer lending platform.\n\n## Goal\n\nGiven historical data on loans given out with information on whether or not the borrower defaulted (charge-off), can we build a model that can predict whether or not a borrower will pay back their loan? This way in the future when we get a new potential customer we can assess whether or not they are likely to pay back the loan.\n\n","76f9da35":"#### Normalizing the data"}}