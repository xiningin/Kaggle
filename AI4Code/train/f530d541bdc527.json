{"cell_type":{"100cae90":"code","da0f475a":"code","00c625be":"code","76071f00":"code","2713bad8":"code","1c2d05e4":"code","8e975871":"code","a3c35fcd":"code","a805549f":"code","973bd5da":"code","043014f2":"code","e7a23f0d":"code","206f3f78":"code","cbd504f8":"code","eff32cc3":"code","2a91f11c":"code","47314edf":"code","3d92139e":"code","a4d0aa2c":"code","79731d09":"code","515827a2":"code","01833b8f":"code","013a8a04":"code","acab7e70":"code","5299322e":"code","96646e49":"code","dfe3753e":"code","a9acb190":"code","913a508a":"code","1ffdf0ff":"code","f8848484":"code","fb6afa51":"code","f4f3f973":"code","120a55c6":"code","f0381faa":"code","f54c7955":"code","10050184":"code","1b8bf5de":"code","9078a700":"code","60a61599":"code","ecf76301":"code","42a30686":"code","9f7e2be0":"code","7d202a5f":"code","20946141":"markdown","5e64432c":"markdown","c7cb2471":"markdown","2ad3bce9":"markdown","77dcdc0b":"markdown","31ca3c86":"markdown","ee95c3de":"markdown","9cdb78a6":"markdown","a1268abd":"markdown","13778f93":"markdown","dfa60afe":"markdown","53846292":"markdown","30939f2d":"markdown","d304c132":"markdown","dde84d47":"markdown","584fd8b0":"markdown","9d48dd5a":"markdown","eae88fdf":"markdown"},"source":{"100cae90":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.linear_model import Lasso\nfrom sklearn.feature_selection import SelectFromModel\nfrom sklearn.metrics import r2_score, mean_squared_log_error\nfrom sklearn.model_selection import RandomizedSearchCV\n\npd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', 100)","da0f475a":"df = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ndf.head()","00c625be":"feature_with_na = [i for i in df.columns if df[i].isnull().sum()>1]\n\nfor i in feature_with_na:\n    print('{}: {} % missing values'.format(i, round(df[i].isnull().mean(),3)))","76071f00":"for i in feature_with_na:\n    df1 = df.copy()\n    df1[i] = np.where(df1[i].isnull(),1,0)\n    \n    df1.groupby(i)['SalePrice'].median().plot.bar()\n    plt.title(i)\n    plt.show()","2713bad8":"numerical_feature = [i for i in df.columns if df[i].dtypes != 'O']\nnumerical_feature","1c2d05e4":"year_feature = [ i for i in  numerical_feature if 'Yr' in  i or 'Year' in i]","8e975871":"for i in year_feature:\n    print(i, df[i].unique())\n    print('-'*50)","a3c35fcd":"# Lets Analyse the temporal datetime variable\n\ndf.groupby('YrSold')['SalePrice'].median().plot()\nplt.xlabel('Year sold')\nplt.ylabel('Median house price')\nplt.show()","a805549f":"# Here we will compare the difference betweeen all the year feature with salesprice\n\nfor i in year_feature:\n    if i != 'YrSold':\n        df1 = df.copy()\n        df1[i] = df1['YrSold'] - df1[i]\n        \n        plt.scatter(df1[i], df1['SalePrice'])\n        plt.xlabel(i)\n        plt.ylabel('Saleprice')\n        plt.show()","973bd5da":"Discrete_feature = [i for i in numerical_feature if len(df[i].unique())< 25 and i not in year_feature+['Id']]\nDiscrete_feature","043014f2":"df[Discrete_feature].head()","e7a23f0d":"for i in Discrete_feature:\n    df.groupby(i)['SalePrice'].median().plot.bar()\n    plt.xlabel(i)\n    plt.ylabel('Saleprice')\n    plt.title(i)\n    plt.show()","206f3f78":"cont_feature = [i for i in numerical_feature if i not in Discrete_feature+ year_feature + ['Id']]\ncont_feature","cbd504f8":"for i in cont_feature:\n    df[i].hist(bins = 25)\n    plt.xlabel(i)\n    plt.ylabel('Count')\n    plt.title(i)\n    plt.show()","eff32cc3":"for i in cont_feature:\n    df1 = df.copy()\n    if 0 in df[i].unique():\n        pass\n    else:\n        df1[i] = np.log(df[i])\n        df1[i].hist(bins = 25)\n        plt.xlabel(i)\n        plt.ylabel('Count')\n        plt.title(i)\n        plt.show()\n        plt.scatter(df1[i], df1['SalePrice'])\n        plt.xlabel(i)\n        plt.ylabel('Count')\n        plt.title(i)\n        plt.show()","2a91f11c":"for i in cont_feature:\n    df1 = df.copy()\n    if 0 in df[i].unique():\n        pass\n    else:\n        df1[i] = np.log(df[i])\n        df1.boxplot(i)\n        plt.ylabel(i)\n        plt.title(i)\n        plt.show()","47314edf":"cat_feature = [i for i in df.columns if df[i].dtypes == 'O' ]\ncat_feature","3d92139e":"df[cat_feature].head()","a4d0aa2c":"for i in cat_feature:\n    print('The Feauture is  {} and number of unique values is {}'.format(i, len(df[i].unique())))","79731d09":"# Find out relation with the dependent variable\nfor i in cat_feature:\n    df.groupby(i)['SalePrice'].median().plot.bar()\n    plt.xlabel(i)\n    plt.ylabel('SalePrice')\n    plt.title(i)\n    plt.show()","515827a2":"cat_missing_col = [i for i in df.columns if df[i].isnull().sum()>1 and df[i].dtypes=='O']\n\nfor i in cat_missing_col:\n    print('{}: {}% Missing values'.format(i, round(df[i].isnull().mean(),3)))","01833b8f":"# Replace missings with new variable\ndef replace_cat_feauture(df, cat_missing_col):\n    df[cat_missing_col] = df[cat_missing_col].fillna('Missing')\n    return df\n\ndf = replace_cat_feauture(df,cat_missing_col)","013a8a04":"df[cat_missing_col].isnull().sum()","acab7e70":"num_missing_col = [i for i in df.columns if df[i].isnull().sum()>1 and df[i].dtypes!='O']\n\nfor i in num_missing_col:\n    print('{}: {}% Missing values'.format(i, round(df[i].isnull().mean(),3)))","5299322e":"# Replace the numerical missing value\nfor i in num_missing_col:\n    df[i+'_nan'] = np.where(df[i].isnull(),1,0) # If null then label it 1 else 0\n    df[i] = df[i].fillna(df[i].median())\n    \ndf[num_missing_col].isnull().sum()","96646e49":"# Temporal Variable (Date variables)\n\nfor i in ['YearBuilt', 'YearRemodAdd', 'GarageYrBlt']:\n    df[i] = df['YrSold'] - df[i]","dfe3753e":"df.head()","a9acb190":"num_features = ['LotFrontage', 'LotArea', '1stFlrSF', 'GrLivArea', 'SalePrice']\n\nfor i in num_features:\n    df[i] = np.log(df[i])","913a508a":"df.head()","1ffdf0ff":"cat_feature = [i for i in df.columns if df[i].dtypes=='O']\ncat_feature","f8848484":"for i in cat_feature:\n    temp =  df[i].value_counts()\/len(df)\n    temp_df = temp[temp>0.01].index\n    df[i] = np.where(df[i].isin(temp_df), df[i], 'Rare_var')","fb6afa51":"df.head(35)","f4f3f973":"for i in cat_feature:\n    labels_ordered=df.groupby([i])['SalePrice'].mean().sort_values().index\n    labels_ordered={k:i for i,k in enumerate(labels_ordered)}    # enumerate is a iterable object\n    df[i]=df[i].map(labels_ordered)","120a55c6":"df.head()","f0381faa":"feature_scale = df.columns.difference(['Id', 'SalePrice'])\n\nscaler = MinMaxScaler()\nscaler.fit(df[feature_scale])","f54c7955":"scaler.transform(df[feature_scale])","10050184":"# transform the train and test set, and add on the Id and SalePrice variables\ndf_final = pd.concat([df[['Id', 'SalePrice']].reset_index(drop=True),\n                    pd.DataFrame(scaler.transform(df[feature_scale]), columns=feature_scale)],\n                    axis=1)","1b8bf5de":"df_final.head()","9078a700":"df_final.shape","60a61599":"x_train = df_final.drop(['Id', 'SalePrice'], axis = 1)\ny_train = df_final['SalePrice']","ecf76301":"# Apply feature selection, select the suitable alpha value, the bigger the alpha value the less feature will be selectes,\n# then use selectfrom model, which will select the features with coefficient are non zero\n\nfeature_sel_model = SelectFromModel(Lasso(alpha = 0.005, random_state = 0))\nfeature_sel_model.fit(x_train, y_train)","42a30686":"selected_feature = x_train.columns[feature_sel_model.get_support()]\n\nprint('The Total Features: ', len(x_train.columns))\nprint('The Selected Features: ', len(selected_feature))\nprint('Features with coefficients shrank to zero : {}'.format(np.sum(feature_sel_model.estimator_.coef_==0)))","9f7e2be0":"selected_feature","7d202a5f":"x_train = x_train[selected_feature]\nx_train.head()","20946141":"# Outliers","5e64432c":"> Here the relationship between the missing values and the dependent variable is clearly visible, so we need to replace\nthese nan values with something meaningful which we will do in the Feature engineering section","c7cb2471":"> Here the plot shows that, if the house is old , then the price is low compared to new house","2ad3bce9":"# Missing values","77dcdc0b":"# Discrete Variables","31ca3c86":"### Temporal Variables (Date Time Variables)","ee95c3de":"# Log Normal Operation \n\n> Since the numerical variables are skewed, we will perform log normal distribution","9cdb78a6":"> Since there are many missing values, we need to find the relationship between missing value and sales price","a1268abd":"> Here some of the features has qaussian distribution oters are skewed, so for linear regression, the data should be normally distributed, if not we need to transform to log ","13778f93":"# Continuous variables","dfa60afe":"# EDA\n\n### Missing values","53846292":"# Feature Engineering","30939f2d":"> From the Dataset we have 4 year variable, we need to extract information from the datetime variable like no_of years or no of days","d304c132":"# Handling Rare categorical Feature\n\n> We will remove categorical variables that are present less than 1% of the observation","dde84d47":"# Feature scaling","584fd8b0":"> There is a relationship with the target variable","9d48dd5a":"# Categorical","eae88fdf":"# Feature selection"}}