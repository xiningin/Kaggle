{"cell_type":{"1f09e35a":"code","cf8163e2":"code","95080628":"code","27ffa02b":"code","83d8acb6":"code","102d0d35":"code","0c97d7f4":"code","d9555886":"code","fbda7a3c":"code","4d48dcf8":"code","6f8abc2c":"code","0a1a3523":"code","4ec57995":"code","63fdd433":"code","53457c31":"code","de2d226d":"code","8b9ce4ff":"code","7de6838d":"code","5ec605d9":"code","bdb21db3":"code","2e8cd970":"code","ddc36ca8":"code","8e8339ab":"code","422afe0b":"code","07c2b6e4":"code","04cb8255":"code","6f8b8c2c":"code","0b1c883f":"code","8004864a":"code","b5f7a67b":"code","f24833dd":"code","42aa24b4":"markdown","95aa40f8":"markdown","61b0a97a":"markdown","7513b9ae":"markdown","3013a4d9":"markdown","421e76ea":"markdown","51829f3d":"markdown","e59332dd":"markdown","8e7fc020":"markdown","44dab785":"markdown","d7cffc82":"markdown","8fc44400":"markdown","aa543c0d":"markdown","80d84284":"markdown","d80da329":"markdown","34126ff6":"markdown","fee84861":"markdown","95c1b3c2":"markdown","b98de30b":"markdown","d8ee3f81":"markdown","ae8e2cd8":"markdown","42ad55a6":"markdown","60ea78f4":"markdown","4c7fbb97":"markdown","2f218f89":"markdown","0a3a5da6":"markdown"},"source":{"1f09e35a":"import numpy as np \n\n# data in\/out & eda\nimport pandas as pd \nimport pandas_profiling\n\n# visualisations\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objects as go","cf8163e2":"# let's only read one of the region's power consumptions, to keep this notebook concise\ndf = pd.read_csv('..\/input\/hourly-energy-consumption\/PJME_hourly.csv')\n\n# sort by date & time\ndf['Datetime'] = pd.to_datetime(df['Datetime'])\ndf.sort_values(by=['Datetime'], axis=0, ascending=True, inplace=True)\ndf.reset_index(inplace=True, drop=True)\n\n# renaming the target variable columns\ndf.rename(columns={'PJME_MW':'demand_in_MW'}, inplace=True)\n\n# display the first couple of rows\ndf.head()","95080628":"# deduplicate, only keeping the last measurement per datetime\ndf.drop_duplicates(subset='Datetime', keep='last', inplace=True)","27ffa02b":"# let's see if we have a continuous dataset\ndf = df.set_index('Datetime')\nprint(f'df.index.freq is set to: {df.index.freq}')","83d8acb6":"# custom range\ndate_range = pd.date_range(start=min(df.index), \n                           end=max(df.index), \n                           freq='H')","102d0d35":"print(f'The difference in length between the custom date range and our dataset is {(len(date_range)-len(df))}:')\nprint(date_range.difference(df.index))","0c97d7f4":"# this will append the previously missing datetimes, and create null values in our target variable\ndf = df.reindex(date_range)\n\n# we fill in the blanks with values that lie on a linear curve between existing data points\ndf['demand_in_MW'].interpolate(method='linear', inplace=True)\n\n# now we have a neatly continuous datetime index\nprint(f'The df.index.freq is now: {df.index.freq}, indicating that we no longer have missing instances')","d9555886":"# see: https:\/\/www.kaggle.com\/robikscube\/starter-hourly-energy-consumption\ndf['dow'] = df.index.dayofweek\ndf['doy'] = df.index.dayofyear\ndf['year'] = df.index.year\ndf['month'] = df.index.month\ndf['quarter'] = df.index.quarter\ndf['hour'] = df.index.hour\ndf['weekday'] = df.index.weekday_name\ndf['woy'] = df.index.weekofyear\ndf['dom'] = df.index.day # Day of Month\ndf['date'] = df.index.date \n\n# let's add the season number\ndf['season'] = df['month'].apply(lambda month_number: (month_number%12 + 3)\/\/3)","fbda7a3c":"pandas_profiling.ProfileReport(df)","4d48dcf8":"# plotly doesn't allow us to access the index, so let's copy it into a column \ndf['date_and_time'] = df.index\n\n# plotting\nfig = px.line(df,\n              x='date_and_time',\n              y='demand_in_MW',\n              title=f'Power Demand (MW) over time [{min(df.year)} - {max(df.year)}]')\nfig.update_traces(line=dict(width=0.05))\nfig.update_layout(xaxis_title='Date & Time (yyyy\/mm\/dd hh:MM)',\n                  yaxis_title='Energy Demand [MW]')\nfig.show()","6f8abc2c":"# aggregated data\n_ = df\\\n    .groupby(['hour', 'weekday'], as_index=False)\\\n    .agg({'demand_in_MW':'median'})\n\n# plotting\nfig = px.line(_, \n              x='hour', \n              y='demand_in_MW', \n              color='weekday', \n              title='Median Hourly Power Demand per Weekday')\nfig.update_layout(xaxis_title='Hour',\n                  yaxis_title='Energy Demand [MW]')\nfig.show()","0a1a3523":"# aggregated data\n_ = df\\\n    .groupby(['hour', 'season'], as_index=False)\\\n    .agg({'demand_in_MW':'median'})\n\n# plotting\nfig = px.line(_,\n              x='hour', \n              y='demand_in_MW', \n              color='season', \n              title='Median Hourly Power Demand per Season')\nfig.update_layout(xaxis_title='Hour',\n                  yaxis_title='Energy Demand [MW]')\nfig.show()","4ec57995":"from statsmodels.tsa.seasonal import seasonal_decompose\n\n# seasonal_decompose needs a dataframe with a datetime index\nseries = df[['demand_in_MW']]\nfrequency = 24*365\n\n# decomposing the time-series, with the frequency being 24 hours per 365 days\ndecomposed = seasonal_decompose(series, model='additive', freq=frequency)","63fdd433":"# plotting the different elements constituting our time-series\ndef plot_decompositions(decompositions, titles, line_widths):\n    for d, t, lw in zip(decompositions, titles, line_widths):\n        \n        # draw a line plot of the data\n        fig = px.line(d,\n              y='demand_in_MW',\n              title=t,\n              height=300)\n        \n        # adjust line width\n        fig.update_traces(line=dict(width=lw))\n        \n        # change layout of axes and the figure's margins \n        # to emulate tight_layout\n        fig.update_layout(\n            xaxis=dict(\n                showticklabels=False,\n                linewidth=1\n            ),\n            yaxis=dict(title=''),\n            margin=go.layout.Margin(\n                l=40, r=40, b=0, t=40, pad=0\n            ),\n        )\n        \n        # display\n        fig.show()\n\n# calling the function \nplot_decompositions(decompositions=[decomposed.trend, \n                                    decomposed.seasonal, \n                                    decomposed.resid],\n                    titles=['Trend', \n                            'Seasonality',\n                            'Residuals'],\n                    line_widths=[2, 0.025, 0.05])","53457c31":"f'The last date time point in our dataframe is: {max(df.index)}'","de2d226d":"# set manually\nCUTOFF_DATE = pd.to_datetime('2017-08-01')\nTIME_DELTA = pd.DateOffset(years=8)\n\n# splitting\ntrain = df.loc[(df.index < CUTOFF_DATE) & (df.index >= CUTOFF_DATE-TIME_DELTA) ].copy()\ntest = df.loc[df.index >= CUTOFF_DATE].copy()","8b9ce4ff":"print(f'Training shape: {train.shape} \\nTesting shape: {test.shape}\\n')\nprint(f'The training set lies between the dates: {min(train.index)} and {max(train.index)}')\nprint(f'For the testing set, the dates are: {min(test.index)} and {max(test.index)}')","7de6838d":"import statsmodels.api as sm\n\n# exponential smoothing only takes into consideration patterns in the target variable\n# so we discard the other features\nexp_smooth_train, exp_smooth_test = train['demand_in_MW'], test['demand_in_MW']\n\n# fit & predict\nholt_winter = sm.tsa.ExponentialSmoothing(exp_smooth_train,\n                                          seasonal_periods=24*365,\n                                          seasonal='add').fit()\ny_hat_holt_winter = holt_winter.forecast(len(exp_smooth_test))","5ec605d9":"# create figure\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=exp_smooth_test.index, y=exp_smooth_test,\n                         mode='lines',\n                         name='Test - Ground Truth'))\nfig.add_trace(go.Scatter(x=y_hat_holt_winter.index, y=y_hat_holt_winter,\n                         mode='lines', \n                         name='Test - Prediction'))\n\n# adjust layout\nfig.update_traces(line=dict(width=0.5))\nfig.update_layout(title='Holt-Winter Forecast of Hourly Energy Demand',\n                  xaxis_title='Date & Time (yyyy\/mm\/dd hh:MM)',\n                  yaxis_title='Energy Demand [MW]')","bdb21db3":"def mape(y_true, y_pred):\n    \"\"\" Mean Absolute Percentage Error \"\"\"\n    \n    # convert to numpy arrays\n    y_true, y_pred = np.array(y_true), np.array(y_pred)\n    \n    # take the percentage error\n    pe = (y_true - y_pred) \/ y_true\n    \n    # take the absolute values\n    ape = np.abs(pe)\n    \n    # quantify the performance in a single number\n    mape = np.mean(ape)\n    \n    return f'{mape*100:.2f}%'","2e8cd970":"mape_hw = mape(y_true=exp_smooth_test, y_pred=y_hat_holt_winter)\nprint(f'Our Holt-Winter model has a mean average percentage error of {mape_hw}')","ddc36ca8":"# interval length\ninterval = 24 * 7\n\n# intermediary variables for readability\nx_true, y_true = exp_smooth_test.iloc[:interval].index, exp_smooth_test.iloc[:interval]\nx_pred, y_pred = y_hat_holt_winter.iloc[:interval].index, y_hat_holt_winter.iloc[:interval]\n\n# create figure\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=x_true, y=y_true,\n                         mode='lines',\n                         name='Test - Ground Truth'))\nfig.add_trace(go.Scatter(x=x_pred, y=y_pred,\n                         mode='lines', \n                         name='Test - Prediction'))\n\n# adjust layout\nfig.update_traces(line=dict(width=0.9))\nfig.update_layout(title=f'Holt-Winter Intra-Day Forecast of First {interval} Hours of Energy Demand',\n                  xaxis_title='Date & Time (yyyy\/mm\/dd hh:MM)',\n                  yaxis_title='Energy Demand [MW]')\nfig.show()\n\n# quantify accuracy\nprint(f'MAPE for interval of the first {interval} hours: {mape(y_true, y_pred)}')","8e8339ab":"# interval length\ninterval = -24 * 7\n\n# intermediary variables for readability\nx_true, y_true = exp_smooth_test.iloc[interval:].index, exp_smooth_test.iloc[interval:]\nx_pred, y_pred = y_hat_holt_winter.iloc[interval:].index, y_hat_holt_winter.iloc[interval:]\n\n# create figure\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=x_true, y=y_true,\n                         mode='lines',\n                         name='Test - Ground Truth'))\nfig.add_trace(go.Scatter(x=x_pred, y=y_pred,\n                         mode='lines', \n                         name='Test - Prediction'))\n\n# adjust layout\nfig.update_traces(line=dict(width=0.9))\nfig.update_layout(title=f'Holt-Winter Intra-Day Forecast of Last {abs(interval)} Hours of Energy Demand',\n                  xaxis_title='Date & Time (yyyy\/mm\/dd hh:MM)',\n                  yaxis_title='Energy Demand [MW]')\nfig.show()\n\n# quantify accuracy\nprint(f'MAPE for interval of the last {abs(interval)} hours: {mape(y_true, y_pred)}')","422afe0b":"#we use tra.diff()(differenced data), because this time series is unit root process.\nfig,ax = plt.subplots(2,1,figsize=(20,10))\nfig = sm.graphics.tsa.plot_acf( train['demand_in_MW'].diff().dropna(), lags=72, ax=ax[0])\nfig = sm.graphics.tsa.plot_pacf(train['demand_in_MW'].diff().dropna(), lags=72, ax=ax[1])\nplt.show()","07c2b6e4":"# https:\/\/facebook.github.io\/prophet\/docs\/quick_start.html#python-api\nfrom fbprophet import Prophet\nfrom fbprophet.diagnostics import cross_validation","04cb8255":"# format data for prophet model using 'ds' and 'y'\ntrain_prophet = train[['demand_in_MW']]\\\n                    .reset_index()\\\n                    .rename(columns={\n                        'index':'ds', \n                        'demand_in_MW':'y'\n                    })\n\ntest_prophet = test[['demand_in_MW']]\\\n                    .reset_index()\\\n                    .rename(columns={\n                        'index':'ds',\n                        'demand_in_MW':'y'\n                    })","6f8b8c2c":"# conditions\ndef is_spring(ds):\n    date = pd.to_datetime(ds)\n    return (date.month >= 3) & (date.month <= 5)\n\ndef is_summer(ds):\n    date = pd.to_datetime(ds)\n    return (date.month >= 6) & (date.month <= 8)\n\ndef is_autumn(ds):\n    date = pd.to_datetime(ds)\n    return (date.month >= 9) & (date.month <= 11)\n\ndef is_winter(ds):\n    date = pd.to_datetime(ds)\n    return (date.month >= 12) | (date.month <= 2)\n\ndef is_weekend(ds):\n    date = pd.to_datetime(ds)\n    return date.weekday_name in ('Saturday', 'Sunday')\n\n# adding to train set\ntrain_prophet['is_spring'] = train_prophet['ds'].apply(is_spring)\ntrain_prophet['is_summer'] = train_prophet['ds'].apply(is_summer)\ntrain_prophet['is_autumn'] = train_prophet['ds'].apply(is_autumn)\ntrain_prophet['is_winter'] = train_prophet['ds'].apply(is_winter)\ntrain_prophet['is_weekend'] = train_prophet['ds'].apply(is_weekend)\ntrain_prophet['is_weekday'] = ~train_prophet['ds'].apply(is_weekend)\n\n# adding to test set\ntest_prophet['is_spring'] = test_prophet['ds'].apply(is_spring)\ntest_prophet['is_summer'] = test_prophet['ds'].apply(is_summer)\ntest_prophet['is_autumn'] = test_prophet['ds'].apply(is_autumn)\ntest_prophet['is_winter'] = test_prophet['ds'].apply(is_winter)\ntest_prophet['is_weekend'] = test_prophet['ds'].apply(is_weekend)\ntest_prophet['is_weekday'] = ~test_prophet['ds'].apply(is_weekend)","0b1c883f":"# instantiating the class with custom settings, for the sake of illustration\nprophet = Prophet(\n     daily_seasonality=False,\n    weekly_seasonality=False,\n    yearly_seasonality=False\n)\n\n# custom seasonalities to account for conditional variance \n# (more extreme trends in extreme seasons)\nprophet.add_seasonality(name='yearly', period=365.25, fourier_order=10)\nprophet.add_seasonality(name='weekly_spring', \n                        period=7,\n                        fourier_order=5, \n                        condition_name='is_spring')\nprophet.add_seasonality(name='weekly_summer', \n                        period=7,\n                        fourier_order=5, \n                        condition_name='is_summer')\nprophet.add_seasonality(name='weekly_autumn', \n                        period=7,\n                        fourier_order=5, \n                        condition_name='is_autumn')\nprophet.add_seasonality(name='weekly_winter', \n                        period=7,\n                        fourier_order=5, \n                        condition_name='is_winter')\nprophet.add_seasonality(name='daily_spring',  \n                        period=1,\n                        fourier_order=5, \n                        condition_name='is_spring')\nprophet.add_seasonality(name='daily_summer',  \n                        period=1,\n                        fourier_order=5, \n                        condition_name='is_summer')\nprophet.add_seasonality(name='daily_autumn',  \n                        period=1,\n                        fourier_order=5, \n                        condition_name='is_autumn')\nprophet.add_seasonality(name='daily_winter',  \n                        period=1,\n                        fourier_order=5, \n                        condition_name='is_winter')\nprophet.add_seasonality(name='daily_weekend',  \n                        period=1,\n                        fourier_order=5, \n                        condition_name='is_weekend')\nprophet.add_seasonality(name='daily_weekday',  \n                        period=1,\n                        fourier_order=5, \n                        condition_name='is_weekday')\n\n# account for holidays\n#prophet.add_country_holidays(country_name='US')\n\n# fitting the model\nprophet.fit(train_prophet);\n\n# part of the dataframe on which we want to make predictions\nfuture = test_prophet.drop(['y'], axis=1)\n\n# predicting values\nforecast = prophet.predict(future)\n\n# see https:\/\/github.com\/facebook\/prophet\/issues\/999 for the matplotlib_converts()\npd.plotting.register_matplotlib_converters()\n\n# plotting the seasonality components found\n_ = prophet.plot_components(forecast)","8004864a":"# create figure\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=test_prophet.ds, y=test_prophet.y,\n                         mode='lines',\n                         name='Test - Ground Truth'))\nfig.add_trace(go.Scatter(x=forecast.ds, y=forecast.yhat,\n                         mode='lines', \n                         name='Test - Prediction'))\n\n# adjust layout\nfig.update_traces(line=dict(width=0.5))\nfig.update_layout(title='Prophet Forecast of Hourly Energy Demand',\n                  xaxis_title='Date & Time (yyyy\/mm\/dd hh:MM)',\n                  yaxis_title='Energy Demand [MW]')\nfig.show()\n\n# quantify accuracy\nprint(f'MAPE for Prophet\\'s predictions: {mape(test_prophet.y, forecast.yhat)}')","b5f7a67b":"# interval length\ninterval = 24 * 7\n\n# intermediary variables for readability\nx_true, y_true = test_prophet.iloc[:interval].ds, test_prophet.iloc[:interval].y\nx_pred, y_pred = forecast.iloc[:interval].ds, forecast.iloc[:interval].yhat\n\n# create figure\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=x_true, y=y_true,\n                         mode='lines',\n                         name='Test - Ground Truth'))\nfig.add_trace(go.Scatter(x=x_pred, y=y_pred,\n                         mode='lines', \n                         name='Test - Prediction'))\n\n# adjust layout\nfig.update_traces(line=dict(width=0.9))\nfig.update_layout(title=f'Prophet Intra-Day Forecast of First {interval} Hours of Energy Demand',\n                  xaxis_title='Date & Time (yyyy\/mm\/dd hh:MM)',\n                  yaxis_title='Energy Demand [MW]')\nfig.show()\n\n# quantify accuracy\nprint(f'MAPE for interval of the first {interval} hours: {mape(y_true, y_pred)}')","f24833dd":"# interval length\ninterval = -24 * 7\n\n# intermediary variables for readability\nx_true, y_true = test_prophet.iloc[interval:].ds, test_prophet.iloc[interval:].y\nx_pred, y_pred = forecast.iloc[interval:].ds, forecast.iloc[interval:].yhat\n\n# create figure\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=x_true, y=y_true,\n                         mode='lines',\n                         name='Test - Ground Truth'))\nfig.add_trace(go.Scatter(x=x_pred, y=y_pred,\n                         mode='lines', \n                         name='Test - Prediction'))\n\n# adjust layout\nfig.update_traces(line=dict(width=0.9))\nfig.update_layout(title=f'Prophet Intra-Day Forecast of Last {abs(interval)} Hours of Energy Demand',\n                  xaxis_title='Date & Time (yyyy\/mm\/dd hh:MM)',\n                  yaxis_title='Energy Demand [MW]')\nfig.show()\n\n# quantify accuracy\nprint(f'MAPE for interval of the last {abs(interval)} hours: {mape(y_true, y_pred)}')","42aa24b4":"<a id=\"6\"><\/a> <br>\n# Decomposing the Time-Series\nData points over time can be interesting in the sense that their patterns are complemented by a trend (upward or downward) and\/or seasonality.\nAs we have established in our EDA, these aspects seem to play a role in this dataset.\n\nBecause the seasonal variation in our dataset looks constant over time, we will use the additive model for decomposition (as opposed to the multiplicative model, which is useful for cases where seasonal variation increases over time).","95aa40f8":"Looks like those air conditioners are cranked up during summer!","61b0a97a":"Of course, we have already exposed the weekly and yearly seasonal element during our exploratory data analysis. Checking for autocorrelation at lags ```168 (24 x 7, weekly)``` and ```8760 (24 x 365, yearly)```, respectively, would require a lot of memory. Instead, let's look at a model explicitly designed to account for multiple seasonalities.","7513b9ae":"As before, let's zoom in on some intra-day predictions at the beginning and at the end of the forecasting period.","3013a4d9":"We can quickly tell demand for electricity is lower during the weekends, and dips a little sooner on friday afternoons.","421e76ea":"<a id=\"9\"><\/a> <br>\n# Prophet\n\n\\begin{eqnarray}\n\\mbox{Forecasting Equation}: \\\\\ny(t) & = & g(t) + s(t) + h(t) + \u03b5t \\\\\n&& \\\\\n\\mbox{Where}: \\\\\ng(t) & : & \\mbox{piecewise linear or logistic growth curve for modelling non-periodic changes in time series} \\\\\ns(t) & : & \\mbox{periodic changes (e.g. weekly\/yearly seasonality)} \\\\\nh(t) & : & \\mbox{effects of holidays (user provided) with irregular schedules} \\\\\n\u03b5t & : & \\mbox{error term accounts for any unusual changes not accommodated by the model} \\\\\n\\end{eqnarray}\n\nDelve deeper into the math with [this article](https:\/\/medium.com\/future-vision\/the-math-of-prophet-46864fa9c55a).\n<br>\n\nAn adept name for a model designed to predict time-series. It was developed by Facebook and [released as open source](https:\/\/github.com\/facebook\/prophet) in 2017.\nIt is distinct in the fact that it explicitly lets the user account for and configure seasonalities at multiple frequencies.\n\nAs the mathheads (not to be confused with methheads) amongst us surely know, we can do this by exploiting the nature of Fourier series: Breaking down a function of real numbers into a sum of sine waves. \nThe Prophet documentation has [a section](https:\/\/facebook.github.io\/prophet\/docs\/seasonality,_holiday_effects,_and_regressors.html#fourier-order-for-seasonalities) dedicated to fine-tuning the order of the fourier series for seasonalities. In summary:\n* A **higher order** fits the sine wave more closely to the seasonality in the data, at the risk of capturing too much of the noise (overfitting).\n* A **lower order** smoothes out the noise, at the risk of not capturing enough of the seasonality (underfitting).\n\nA good, general fit lies in between. We will try to find this by employing Prophet's built-in cross-validation method.\n\nIf you want to learn more about Fourier series, do check out the amazing Grant Sanderson's \"[But what is a Fourier series? From heat flow to circle drawings](https:\/\/www.youtube.com\/watch?v=r6sGWTCMz2k)\" on YouTube. Below is one of his many gorgeous visualisations, illustrating the additive concept of sine waves in the context of heat equations:\n![3Brown1Blue](https:\/\/i.imgur.com\/hu8hEpl.png)","51829f3d":"Not bad for an algorithm that only considers patterns in the history of the target variable! \n\nWe can see it fall short around the winter holiday period and late during the summer, but it has clearly recognised the frequency and the degree of variance of the seasonal patterns. Let's quantify its performance.","e59332dd":"## Date & Time Patterns\nWe can use our previously extracted date and time features to see if recurring patterns emerge from aggregated data.\nTake, for instance, the power demand throughout the day for each weekday:","8e7fc020":"### Library Imports","44dab785":"<a id=\"5\"><\/a> <br>\n# Quick Visuals\n\n### Plotting the energy consumption over time","d7cffc82":"<a id=\"2\"><\/a> <br>\n# Cleaning the dataset \n\n## Deduplicating","8fc44400":"## Conditional Seasonalities\nAs stated in the [documentation](https:\/\/facebook.github.io\/prophet\/docs\/seasonality,_holiday_effects,_and_regressors.html#seasonalities-that-depend-on-other-factors):\n> In some instances the seasonality may depend on other factors, such as a weekly seasonal pattern that is different during the summer than it is during the rest of the year, or a daily seasonal pattern that is different on weekends vs. on weekdays. These types of seasonalities can be modeled using conditional seasonalities.\n\nFrom our EDA, we could tell that the variance in the daily seasonality is higher in Winter and Summer. Not coincidentally, these are the seasons where the absolute difference in ambient temperature vs. desired temperature is greatest. Let's try to break down the patterns in our data to account for such interdependent variability.","aa543c0d":"<a id=\"10\"><\/a> <br>\n# Conclusion \n* Holt-Winter seems to capture more of the erraticness, but mistakes it for being a trend. It is not immediately obvious how to fine tune it.\n* Prophet, on the other hand, seems more consistent. It gives us much more insight and flexibility, offering a great baseline on which to improve.\n\nIncorporating weather forecast data is the obvious next step towards improving our predictive performance.","80d84284":"Let's look at some intra-day predictions at the beginning and the end of the requested forecast.","d80da329":"<a id=\"top\"><\/a> <br>\n## Goal Setting\n\nThe objective of this kernel is primarily to illustrate concepts that are relevant to the forecasting of time-series data.\nIn particular, we touch on the topics of trends, (conditional and multiple) seasonalities, and - briefly - fourier series. \n\nWe compare two forecasting models: Holt-Winter and Facebook's Prophet algorithms. We demonstrate how the latter allows the user to taylor the algorithm to the dataset's particular needs.\n\n# Table of Contents\n1. [Load Dataset](#1)\n1. [Cleaning The Dataset](#2)\n<br><span style=\"font-size: 10px\">Deduplicating, filling missing values<\/span>\n1. [Extracting Time Features](#3)\n<br><span style=\"font-size: 10px\"> Use as much as we can from the datetime stamp<\/span>\n1. [EDA](#4)\n<br><span style=\"font-size: 10px\"> Analyse the distribution and correlation of variables, amongst others<\/span>\n1. [Quick Visuals](#5)\n<br><span style=\"font-size: 10px\"> Following the light shed by the EDA, illustrate some of the data's patterns <\/span>\n1. [Decomposing The Time-Series](#6)\n<br><span style=\"font-size: 10px\"> Gradually working our way towards forecasting models, we illustrate how time-series function can be seen as a sum of trend, seasonality, and noise<\/span>\n1. [Forecasting Models](#7)\n<br><span style=\"font-size: 10px\"> Predicting future energy demand, presenting two models<\/span>\n1. [Holt-Winter](#8)\n<br><span style=\"font-size: 10px\"> A somewhat naive, but remarkably powerful method<\/span>\n1. [Prophet](#9)\n<br><span style=\"font-size: 10px\"> Our model of choice to illustrate the concept of multi- as well as conditional seasonality<\/span>\n1. [Conclusion](#10)\n<br><span style=\"font-size: 10px\"> Summarizing insights gathered from the forecasting models, touching on avenues that could lead to further improvements<\/span>\n","34126ff6":"The correlation matrix indicates the variables \"dow\" (day of week) and \"hour\" will be interesting to look at in the context of predicting our target variable.","fee84861":"## Find and Fill Missing DateTime Instances","95c1b3c2":"<a id=\"8\"><\/a> <br>\n# Holt-Winter\n\nThis [forecasting equation](http:\/\/rstudio-pubs-static.s3.amazonaws.com\/422208_46bbd2e18bbc472ea0d6c648cba1b694.html) may looks intimidating, but the important distinction compared to other, simpler models is that it accounts for seasonality with the $I_t$ term. \n\n\\begin{eqnarray}\nF_{t+m} & =  & (S_t + m b_t) I_{t-L+m} & & \\mbox{Forecasting Equation} \\\\\n&& \\\\\nWhere: \\\\\nS_t & = & \\alpha \\frac{y_t}{I_{t-L}} + (1-\\alpha)(S_{t-1}+b_{t-1}) & \\,\\,\\,\\,\\, &  \\mbox{Overal Smoothing} \\\\\nb_t & = & \\gamma (S_t - S_{t-1}) + (1 - \\gamma)b_{t-1} & & \\mbox{Trend} \\\\\nI_t & = & \\beta \\frac{y_t}{S_t} + (1 - \\beta) I_{t-L} & & \\mbox{Seasonality} \\\\\n\\end{eqnarray}\n","b98de30b":"Let's reindex our dataset and then perform imputation.","d8ee3f81":"## The Issue of Double\/Triple Seasonality\nThe Holt-Winters method crams all the seasonalities it can find in a single variable. From the decomposition, we can also tell it mistakes some seasonality for trend. \nWhile it seems to be a decent predictor of the overal trends, its precision could be fine tuned. From the model, however, it is not immediately obvious how to do that.\n\nOther methods, like SARIMA (seasonal ARIMA) allow you to specify the interval of different lags at which seasonality occurs more precisely. You can expose these by looking at autocorrelation, and configure your model accordingly.\n\n### Auto-Correlogram & Partial Auto-Correlogram \nBelow plots distinctly expose the daily recurring element (each lag is an hour, with spikes at the 24, 48, and 72 marks). Intuitively, this should make sense: If you want to know how much energy is going to be used tomorrow, changes are high it will be highly correlated to today's levels (we do not consider exogenous variables like the weather in this notebook). ","ae8e2cd8":"We can definitely identify a seasonal pattern here. Counter-intuitively, though, no immediately apparent trend.","42ad55a6":"<a id=\"4\"><\/a> <br>\n# EDA\nA quick one-liner with pandas_profiling to get an overview of our dataset","60ea78f4":"<a id=\"1\"><\/a> <br>\n# Load Dataset","4c7fbb97":"<a id=\"7\"><\/a> <br>\n# Forecasting Models\nWe will look at the following methods:\n* Triple Exponential Smoothing: Holt-Winter's \n* Explicit Multi-Seasonality: Prophet\n\n## Train\/Test\nLet's make it our goal to accurately predict up to 12 month's worth of energy demand.\nWe will also restrict our training data to a couple of years leading up to that, to make sure we don't capture any outdated trends (industry shifts).\nThis doesn't seem to be the case, judging from our prior visualisations, but it will keep our computational load low and allow us to iterate over models more quickly.","2f218f89":"The fact our datetime index's frequency is set to None is an indication there are some missing data points somewhere (otherwise Python could deduce it). Let's compare it to an uninterruped custom date range.","0a3a5da6":"<a id=\"3\"><\/a> <br>\n# Extracting Time Features\nWe can split up the date-timestamp column into its different components.\nThis will allow us to find patterns for different groups."}}