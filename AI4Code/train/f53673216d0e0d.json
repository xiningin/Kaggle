{"cell_type":{"7725db70":"code","6951e426":"code","2c0a019b":"code","21a0cdf5":"code","196ea71d":"code","598d552b":"code","cd6daa94":"code","acd52229":"code","28ae5c85":"code","cb279306":"code","9660a313":"code","cbc64e62":"code","c4264c01":"code","d98a3821":"code","fe2494ec":"markdown","5f8d7748":"markdown"},"source":{"7725db70":"import warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport glob\n\nfrom scipy.stats import rankdata\nfrom scipy.stats import describe\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","6951e426":"ls '..\/input\/'","2c0a019b":"LABELS = [\"is_click\"]\nall_files = glob.glob(\"..\/input\/wnssubmits\/*.csv\")\nall_files = [i for i in all_files if 'XX' not in i and 'Enet' not in i]\nall_files","21a0cdf5":"scores = np.zeros(len(all_files))\nfor i in range(len(all_files)):\n    print(i,all_files[i])\n    scores[i] = float(all_files[i].replace('_','-').split(\"-\")[1].replace('.csv',''))","196ea71d":"top10 = scores.argsort()[-10:][::-1]\nfor i, f in enumerate(top10):\n    print(i,all_files[f])","598d552b":"outs = [pd.read_csv(all_files[f], index_col=0) for f in top10]\nconcat_sub = pd.concat(outs, axis=1)\ncols = list(map(lambda x: \"m\" + str(x), range(len(concat_sub.columns))))\nconcat_sub.columns = cols\n#concat_sub.reset_index(inplace=True)","cd6daa94":"concat_sub.index","acd52229":"# check correlation\ncorr = concat_sub.iloc[:,1:].corr()\nmask = np.zeros_like(corr, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\n\n# Set up the matplotlib figure\nf, ax = plt.subplots(figsize=(len(cols)+2, len(cols)+2))\n\n# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(corr,mask=mask,cmap='prism',center=0, linewidths=1,\n            annot=True,fmt='.4f', cbar_kws={\"shrink\":.5})","28ae5c85":"rank = np.tril(concat_sub.iloc[:,1:].corr().values,-1)\nm = (rank>0).sum() - (rank>0.99).sum()\nm_gmean, s = 0, 0\nfor n in range(min(rank.shape[0],m)):\n    mx = np.unravel_index(rank.argmin(), rank.shape)\n    w = (m-n)\/(m+n\/8)\n    m_gmean += w*(np.log(concat_sub.iloc[:,mx[0]+1])+np.log(concat_sub.iloc[:,mx[1]+1]))\/2\n    s += w\n    rank[mx] = 1\nm_gmean = np.exp(m_gmean\/s)","cb279306":"m_gmean = (m_gmean-m_gmean.min())\/(m_gmean.max()-m_gmean.min())\ndescribe(m_gmean)","9660a313":"m_gmean.values","cbc64e62":"concat_sub['is_click'] = m_gmean.values\nconcat_sub['impression_id'] = m_gmean.index\nconcat_sub[['impression_id','is_click']].to_csv('stack_gmean.csv',index=False)","c4264c01":"# out = pd.DataFrame()\n# out['is_click'] = m_gmean\n# out['impression_id'] = concat_sub.index\n# out[['impression_id','is_click']].to_csv('stack_gmean.csv',index=False)","d98a3821":"from IPython.display import FileLink, FileLinks\nFileLinks('.') #lists all downloadable files on server","fe2494ec":"# Stacking Approach using GMEAN","5f8d7748":"# Weighted GMEAN by inverse correlation"}}