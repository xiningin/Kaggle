{"cell_type":{"0cedd1eb":"code","c031f6d0":"code","62880597":"code","1a06930d":"code","5b5a0579":"code","2db97b15":"code","91b82c9e":"code","3b0e9212":"code","17c85d17":"code","e40a395e":"code","c6c5a255":"code","8bbabb51":"code","c9841387":"code","67745f2b":"code","448109b8":"code","430048a3":"code","a5db1b1d":"code","bcef051e":"code","3d5ddcf2":"code","a71724cd":"code","cd77645a":"code","7b17ff9c":"code","d4259237":"code","9d53dc11":"code","6b383433":"code","355ff27b":"code","4730fad7":"code","7b5c3e44":"code","45d4e049":"code","433669d8":"code","d6c0c388":"code","5bd1dc16":"code","1b36ab66":"code","1af96abe":"code","f76697f0":"code","e770a6d8":"code","b26a2271":"code","4d235eff":"code","46e6e0d7":"code","14195f1d":"code","d9a0145d":"code","0bda91b6":"code","729bc3f3":"code","34a3dea6":"code","62d591cd":"code","a8db8544":"code","2f6a041f":"code","956aee18":"code","3f693d96":"code","14eb4421":"code","51265e76":"code","031aa147":"code","50217c73":"code","487072ac":"code","166f73bd":"code","209e6dd9":"code","5acbdf8e":"code","bb8d6c2a":"code","c0c77935":"code","68bbddcf":"code","a2c16c2b":"code","26b3cebf":"markdown","c91bf1bd":"markdown","9c105ead":"markdown","a060efa0":"markdown","10771658":"markdown","6c89fcf6":"markdown","75319cfc":"markdown","82fa1b5a":"markdown","d33d976b":"markdown","a85ca7b4":"markdown","0694f6d5":"markdown","98cbf243":"markdown","17912b4a":"markdown","a82467e4":"markdown","bbcccb45":"markdown","b6f92853":"markdown","2b86d12d":"markdown","d25f85d4":"markdown","965226a4":"markdown","f673e84d":"markdown","857d7bb1":"markdown","09396d5f":"markdown","86392f18":"markdown","3066a113":"markdown","63f8be8b":"markdown","1cc335fb":"markdown","22ee8ffb":"markdown","541d4d69":"markdown","addd655a":"markdown","f85bbad3":"markdown","63f6ccce":"markdown","14cd1d1c":"markdown","b65ce0bd":"markdown","dac36168":"markdown","b3c9f016":"markdown","b0ebebe6":"markdown","4232874c":"markdown","e0b6ce75":"markdown","00ec01c9":"markdown"},"source":{"0cedd1eb":"#!pip install cufflinks","c031f6d0":"import pandas as pd\nimport numpy as np \nfrom plotly.offline import iplot ,init_notebook_mode\nimport plotly.graph_objs as go\nimport plotly.express as px\nimport cufflinks as cf\n# You can go offline on demand by using\ncf.go_offline() \n# To connect java script to your notebook\ninit_notebook_mode(connected=True)","62880597":"#Example on Cufflinks visualization\ncf.datagen.box(20).iplot(kind='box',legend=False) # More Simple!!","1a06930d":"df = pd.read_excel('..\/input\/superstore\/US Superstore data.xls')\ndf.head().style.background_gradient(subset=['Sales'] ,cmap='Blues')\\\n.background_gradient(subset=['Profit'] ,cmap='RdPu')\\\n.background_gradient(subset=['Quantity'] ,cmap='Greens')","5b5a0579":"df.info()","2db97b15":"df[['Sales','Discount','Profit','Quantity']].describe().style.background_gradient(cmap='Blues')","91b82c9e":"df.sort_values(by='Sales',ascending=False).head().style.highlight_max(axis=0)","3b0e9212":"# df[['Sales', 'Quantity', 'Discount', 'Profit']].scatter_matrix()","17c85d17":"df.corr().iplot(kind='heatmap',colorscale='Blues',hoverinfo='all',\n                layout = go.Layout(title='Correlation Heatmap',titlefont=dict(size=20)))","e40a395e":"log_sales = pd.DataFrame(np.log10(df['Sales'])).rename(columns={'Sales':'Log Sales Distribution'})\n\nfig1=df['Sales'].figure(kind='histogram',name='Sales Distribution')\nfig2=log_sales.figure(kind='histogram' ,name='Log Sales Distribution')\n\ncf.Figure(cf.subplots([fig1,fig2],shape=(2,1))).iplot()","c6c5a255":"Q25 = np.quantile(df['Sales'],q=0.25)\nQ75 = np.quantile(df['Sales'],q=0.75)\nIQR = Q75 - Q25\ncut_off = IQR * 1.5\n\nprint('Number of Sales Lower Outliers : ',df[df['Sales']<=(Q25 - cut_off)]['Sales'].count())\nprint('Number of Sales Upper Outliers : ',df[df['Sales']>=(Q75 + cut_off)]['Sales'].count())","8bbabb51":"temp_data = df.drop(['Row ID','Order ID','Customer ID','Country','Product ID'],axis=1)","c9841387":"# Defining new columns in the data to deal with the year and months\n\ntemp_data['Order Date'] = pd.to_datetime(temp_data['Order Date'])\n\ntemp_data['year'] = temp_data['Order Date'].apply(lambda data :data.year)\ntemp_data['month'] = temp_data['Order Date'].apply(lambda data :data.month)","67745f2b":"# We can plot a boxplot for each column in a dataframe, so we create a pivot with Quantity as columns and Sales as indices\n\nbox_sales = df[['Sales', 'Quantity']].pivot(columns='Quantity', values='Sales')\n\nbox_sales.iplot(kind='box',\n                layout=go.Layout(title='BoxPlots For Each Quantity',\n                                 titlefont=dict(size=25),\n                                 xaxis=dict(title='Quantity',\n                                            titlefont=(dict(size=18))),\n                                 yaxis=dict(title='Sales',titlefont=(dict(size=18)))))","448109b8":"data = df.groupby('Region').sum().sort_values('Sales',ascending=False)\n\ndata[['Sales','Profit']].iplot(kind='bar',\n                               subplots=True,\n                               horizontal_spacing=.1,\n                               fill=True,\n                               subplot_titles=True,\n                               layout=go.Layout(dict(xaxis1=dict(title='Region',titlefont=dict(size=20)),\n                                                     yaxis1=dict(title='Sales',titlefont=dict(size=20)),\n                                                     xaxis2=dict(title='Region',titlefont=dict(size=20)),\n                                                     yaxis2=dict(title='Profits',titlefont=dict(size=20)))))","430048a3":"showlegend = [ True, False, False, False]\ni = 0\ndata = []\nfor reg in df['Region'].unique():\n    data.append(go.Violin(x=df[df['Region']==reg]['Region'],\n                            y=df[df['Region']==reg]['Sales'],\n                            name='Sales',\n                            jitter=0,\n                            box={'visible':True},\n                            meanline={'visible':True},\n                            line={\"color\": '#F78181'},\n                            side='negative',\n                            marker=dict(color= '#81F781'),\n                           showlegend=showlegend[i]))\n    \n    data.append(go.Violin(x=df[df['Region']==reg]['Region'],\n                            y=df[df['Region']==reg]['Profit'],\n                            name='Profits',\n                            jitter=0,\n                            box={'visible':True},\n                            meanline={'visible':True},\n                            line={\"color\": '#00FF40'},\n                            side='positive',\n                            marker=dict(color= '#F78181'),\n                            showlegend=showlegend[i]))\n    i+=1\n\n\nlayout = dict(title='Sales & Profit Distribution<br><i><i>Grouped By Region',\n              width=1000,height=600,\n              yaxis=dict(title='Profits & Sales',titlefont=dict(size=20)))\n\ncf.Figure(data,layout=layout)","a5db1b1d":"figs_1=[temp_data[temp_data['Region']==d]['Sales'].iplot(kind='hist',asFigure=True) for d in pd.unique(df['Region'])]\nfigs_2=[np.log(temp_data[temp_data['Region']==d]['Sales']).iplot(kind='hist',asFigure=True) for d in pd.unique(df['Region'])]\n\nsp_1 = cf.subplots(figs_1,\n                   subplot_titles=['South Distribution',\n                                     'West Distribution',\n                                     'Central Distribution',\n                                     'East Distribution'])\nsp_1['layout'].update(showlegend=False)\n\nsp_2 = cf.subplots(figs_2,\n                   subplot_titles=['Log South Distribution',\n                                   'Log West Distribution',\n                                   'Log Central Distribution',\n                                   'Log East Distribution'])\nsp_2['layout'].update(showlegend=False)\n\ncf.iplot(sp_1),cf.iplot(sp_2)","bcef051e":"top_sales = temp_data.groupby('State').sum().sort_values(by='Sales',ascending=False)['Sales'][0:10].to_frame()\ntop_sales_profit = temp_data.groupby('State').sum().sort_values(by='Sales',ascending=False)['Profit'][0:10].to_frame()\ndata = pd.merge(top_sales, top_sales_profit, how='outer', left_index=True, right_index=True)\ndata.iplot(kind='bar',\n           fill=True,\n           opacity=0.6,\n           layout=dict(title=\"Grouped Bar Plot For Sales and Profits<br>(For The Top Ten States Sales)\",\n                      barmode='group'))","3d5ddcf2":"#Grouping the data by state, Sort the data by Sales and highlight Sales and Profits \ntemp_data.groupby('State').sum().sort_values('Sales',ascending=False).head(10).\\\nstyle.background_gradient(subset='Sales',cmap='Blues').\\\nbackground_gradient(subset='Profit',cmap='Blues')","a71724cd":"data = temp_data.groupby('State').sum()\ndata.iplot(kind='bubble',x='Sales',y='Profit',mode='markers',size='Quantity',\n           annotations = data.index,\n           layout = go.Layout(title='Sales & Profits by States',\n                              titlefont=dict(size=25),\n                              xaxis=dict(title='Sales',titlefont=dict(size=18)),\n                              yaxis=dict(title='Profits',titlefont=dict(size=18))))","cd77645a":"data = temp_data['Sub-Category'].value_counts().to_frame().reset_index()\ndata.iplot(kind='pie',\n           hole=0.2, \n           theme='white',\n           labels='index', \n           values='Sub-Category', \n           title='Sub-Category Pie Plot', \n           hoverinfo=\"label+percent+name\")","7b17ff9c":"#Creating a sales piviot table for sub_categories with years as indices and months as columns\n\nsub_category_year = pd.pivot_table(data=temp_data,values='Sales',index=['Sub-Category','year'],columns='month').rename(\n    columns={1:'January',2:'February',3:'March',4:'April',5:'May',6:'June',7:'July',8:'August',\n             9:'September',10:'October',11:'November',12:'December'})\n\nsub_category_year.style.background_gradient(cmap='Blues')","d4259237":"data = df.groupby(by=['Sub-Category']).sum().sort_values(by='Sales',ascending=False).reset_index()\ndata[['Sales','Sub-Category']].iplot(kind='bar',x='Sub-Category',\n                                     opacity=0.6,fill=True,\n                                    layout=go.Layout(title='Bar Plot For Sub-Categrotries Sales' ,\n                                                     orientation=45,\n                                                     xaxis=dict(title='Sub-Categroies',titlefont=dict(size=19)),\n                                                     yaxis=dict(title='Sales',titlefont=dict(size=19))))","9d53dc11":"data = df.groupby(by=['Sub-Category']).sum().sort_values(by='Profit',ascending=False).reset_index()\ndata[['Profit','Sub-Category']].iplot(kind='bar',x='Sub-Category',\n                                     opacity=0.6,fill=True,\n                                    layout=go.Layout(title='Bar Plot For Sub-Categrotries Sales' ,\n                                                     orientation=45,\n                                                     xaxis=dict(title='Sub-Categroies',titlefont=dict(size=19)),\n                                                     yaxis=dict(title='Profit',titlefont=dict(size=19))))","6b383433":"data = temp_data.pivot(values='Sales',columns='Sub-Category')\ndata.iplot(kind='box',\n           layout = go.Layout(title='BoxPlots For Sub-Categories' ,\n                              xaxis=dict(title='Sub Categories',\n                                         titlefont=(dict(size=18))),\n                              yaxis=dict(title='Sales',titlefont=(dict(size=18)))))","355ff27b":"temp_data.iplot(kind='scatter',mode='markers',\n                symbol='circle-dot', x='Sales' ,y='Profit',\n                color='blue',size=15,opacity=0.5)","4730fad7":"temp_data = temp_data.drop(temp_data[(temp_data['Sales']>=6000)|(temp_data['Profit']<-4000)].index,axis=0)","7b5c3e44":"temp_data.iplot(kind='scatter',mode='markers',\n                symbol='circle-dot', x='Sales' ,y='Profit',\n                color='blue',size=15,opacity=0.5)","45d4e049":"temp_data['Sales'].iplot(kind='hist',layout = go.Layout(title='Sales Distribution Without Outliers<br>(No sales value higher than 6000 or Profits lower than - 4000)'))","433669d8":"labels = ['o% Discount','20% Discount','70% Discount','80% Discount','30% Discount','40% Discount',\n          '60% Discount','10% Discount','50% Discount','15% Discount','32% Discount','45% Discount']\ndata = temp_data['Discount'].value_counts().to_frame().reset_index()\n\ndata['index'] = labels\n\ndata.iplot(kind='pie', labels='index', values='Discount',  \n           hole=0.2, theme='white',title='Discount Pie Plot',\n           hoverinfo=\"label+percent+name\")","d6c0c388":"temp_data.sort_values('Discount')['Discount'].iplot(kind='hist')","5bd1dc16":"pd.unique(temp_data['Discount'])","1b36ab66":"figs_1 = [temp_data[temp_data['Discount']==d]['Sales'].iplot(kind='hist',asFigure=True) for d in pd.unique(temp_data['Discount'])[:6]]\nfigs_2 = [temp_data[temp_data['Discount']==d]['Sales'].iplot(kind='hist',asFigure=True) for d in pd.unique(temp_data['Discount'])[6:]]\n\nsp_1 = cf.subplots(figs_1,\n                   subplot_titles=['o% Discount','45% Discount','20% Discount',\n                                   '80% Discount','30% Discount','50% Discount'])\nsp_1['layout'].update(showlegend=False)\n\nsp_2 = cf.subplots(figs_2,\n                   subplot_titles=['70% Discount','60% Discount','32% Discount',\n                                   '10% Discount','40% Discount','15% Discount'])\nsp_2['layout'].update(showlegend=False)\n\ncf.iplot(sp_1),cf.iplot(sp_2)","1af96abe":"#Creating a new column With Categorical Discount (very_low_dis , low_dis , high_dis , very_high_dis)\ntemp_data['dis_cat'] = pd.cut(df['Discount'],\n                              bins=(-1,0.15,0.30,.5,1),\n                              labels=['very_low_dis','low_dis','high_dis','very_high_dis'])","f76697f0":"temp_data.pivot(values='Sales',columns='dis_cat').iplot(kind='box',\n                                                        layout=go.Layout(title='BoxPlots For Each Discount Category',\n                                                                         titlefont=dict(size=25),\n                                                                         xaxis=dict(title='Discount Categories',\n                                                                                    titlefont=(dict(size=18))),\n                                                                         yaxis=dict(title='Sales',titlefont=(dict(size=18)))))","e770a6d8":"from scipy.stats import ttest_ind\n# from sklearn.preprocessing\n\nprint(ttest_ind(temp_data['Sales'],pd.get_dummies(temp_data['dis_cat'])))","b26a2271":"import statsmodels.api as sm\nimport statsmodels\n\nresult = statsmodels.formula.api.ols('Sales~dis_cat' ,data=temp_data).fit()\nprint(result.summary())","4d235eff":"months = ['January','February','March','April','May','June','July','August','September','October','November','December']\ndata = temp_data.drop('Postal Code',axis=1).groupby('month').sum()\ndata.index = months\ndata.sort_values('Sales',ascending=False).style.background_gradient(subset='Sales' ,cmap='Blues')","46e6e0d7":"data[['Sales','Profit']].iplot(kind='spread' , title='Sales and Profits Data Line',\n                               xTitle='Months',text=months,labels=months)","14195f1d":"data = temp_data.groupby(['year']).sum()\n\ndata[['Sales','Profit']].iplot(kind='spread' , title='Sales and Profits Data Line',\n                               xTitle='Months',text=months,labels=months)","d9a0145d":"data = pd.DataFrame([np.mean(temp_data[temp_data['Region']==r]['Sales']) for r in pd.unique(temp_data['Region'])],\n                    index=pd.unique(temp_data['Region'])).sort_values(by=0,ascending=False)\ndata.iplot(kind='bar')","0bda91b6":"df_k = df[['Ship Mode','Quantity','Sales','Profit','Sub-Category','Category','Region']].copy()","729bc3f3":"sub_Cat = df_k['Sub-Category'].astype('category')\nsub_Cat_dict = dict(enumerate(sub_Cat.cat.categories))\nprint(sub_Cat_dict)","34a3dea6":"category_cat = df_k['Category'].astype('category')\ncat_dict = dict(enumerate(category_cat.cat.categories))\nprint(cat_dict)","62d591cd":"region_cat = df_k['Region'].astype('category')\nregion_dict = dict(enumerate(region_cat.cat.categories))\nprint(region_dict)","a8db8544":"ship_cat = df_k['Ship Mode'].astype('category')\nship_dict = dict(enumerate(ship_cat.cat.categories))\nprint(ship_dict)","2f6a041f":"# first we reverse our dictionaries to apply them on the dataframe \n\nsub_map = {v: k for k, v in sub_Cat_dict.items()}\ncat_map = {v: k for k, v in cat_dict.items()}\nregion_map = {v: k for k, v in region_dict.items()}\nship_map = {v: k for k, v in ship_dict.items()}\ndf_k = df_k.replace({'Ship Mode':ship_map,'Region':region_map,'Category':cat_map,'Sub-Category':sub_map})\ndf_k","956aee18":"d = pd.merge(df_k['Region'],df.\\\n             rename(columns={'Region':'Region_cat'}),on=df.index)[['Region','Region_cat']]\nd","3f693d96":"d = pd.merge(df_k['Ship Mode'],df.\\\n             rename(columns={'Ship Mode':'Ship_Mode_cat'}),on=df.index)[['Ship Mode','Ship_Mode_cat']]\nd","14eb4421":"d = pd.merge(df_k['Category'],df.\\\n             rename(columns={'Category':'Category_cat'}),on=df.index)[['Category','Category_cat']]\nd","51265e76":"df_k = df_k.dropna()","031aa147":"from sklearn.cluster import KMeans\n\nk = []\nfor i in range(1,30):\n    kmeans = KMeans(n_clusters = i)\n    kmeans.fit(df_k[['Ship Mode','Quantity','Sales','Profit','Sub-Category','Category','Region']])\n    k.append(kmeans.inertia_)","50217c73":"elbow_df = pd.DataFrame(index=range(1,30),data=k).reset_index()\nelbow_df = elbow_df.rename(columns={'index':'Number_of_clusters',0:'Sum_of_intra_cluster_squares'})","487072ac":"elbow_df['Sum_of_intra_cluster_squares'].iplot(kind='line',title='Elbow-Method results')","166f73bd":"from sklearn.cluster import MiniBatchKMeans\n\nkmeans = MiniBatchKMeans(n_clusters=6,\n                          random_state=0,\n                          batch_size=10)\n\ny_pred = kmeans.fit_predict(df_k[['Ship Mode','Quantity','Sales','Profit','Sub-Category','Category','Region']])","209e6dd9":"df_k['k_means_clusters'] = pd.Series(y_pred)\ndf_k","5acbdf8e":"px.scatter(data_frame=df_k ,\n           x='Sales',\n           y='Quantity',\n           color='k_means_clusters')","bb8d6c2a":"px.scatter(data_frame=df_k ,\n           x='Profit',\n           y='Sales',\n           color='k_means_clusters')","c0c77935":"px.scatter_3d(data_frame=df_k,\n              x='Sales',\n              y='Profit',\n              z='Region',\n              color='k_means_clusters',)","68bbddcf":"px.scatter_3d(data_frame=df_k,\n              x='Sales',\n              y='Profit',\n              z='Sub-Category',\n              color='k_means_clusters',)","a2c16c2b":"px.scatter_3d(data_frame=df_k,\n              x='Sales',\n              y='Quantity',\n              z='Ship Mode',\n              color='k_means_clusters',)","26b3cebf":"### Let's do the encoding\n","c91bf1bd":"#### Sub-Category Pie Plot","9c105ead":"#### Top 10 States Sales And Profits","a060efa0":"### Lets see how to do encoding\n>First (Sub-Category)","10771658":"#### Sales Barplot for each sub_categories","6c89fcf6":"# Sub-Categories Analysis","75319cfc":"#### Profits and sales Bar plots for each Region","82fa1b5a":"#### Sales Boxplot for each sub_categories","d33d976b":"#### Removing data have sales value higher than 6000 or Profits lower than - 4000","a85ca7b4":"#### Sales Distribution For each Discount","0694f6d5":"# Discount Analysis","98cbf243":"### <b><h2 align=\"center\" style='color:black' > Thanks<\/h2>","17912b4a":"><b>Second (Category)","a82467e4":"#### Sales outliers","bbcccb45":"#### Discount Pie plot","b6f92853":"# Profits Analysis ","2b86d12d":"#### Sales and Profits Scatter plot with Quantity as a size","d25f85d4":"> <b>Third (Region)","965226a4":"#### Creating a heatmap (more simple)","f673e84d":"> ## pip install cufflinks","857d7bb1":"# States Analysis","09396d5f":"#### creating a boxplot for each quantity","86392f18":"#### Profits and sales Boxplots for each Region","3066a113":"><b>We find that the best number of clusters is 6","63f8be8b":"#### Profits Barplot for each sub_categories","1cc335fb":"<li><b>P-value: The p-value being higher than 0.05 tells us that we take the Null hypothesis, meaning that there is no a significant change between the four discount categories when it comes to Sales (No need to add dis_cat to the data).<\/b><\/li>","22ee8ffb":"# Sales and Profits Data Line","541d4d69":"> ## Let's see the resulst","addd655a":"# Region Analysis","f85bbad3":"# Sales Analysis\n###### Using Logarithms helps us to have a normal distribution which could help us in a number of different ways such as outlier detection","63f6ccce":"### Forth (Ship Mode)","14cd1d1c":"### Preprocessing the Data","b65ce0bd":"#### sales distribution","dac36168":"#### Scatter plot for sales and profits for each region","b3c9f016":"#### Sales Ditribution without outliers","b0ebebe6":"#### Sales Distribution For each Region","4232874c":"### Before applying k-Means Let's apply the elbow method to know the best number of clusters (K)","e0b6ce75":"#### Sales Histogram Plot For Each Discount","00ec01c9":"<h1 align='center'><b>SuperStore Analysis and Clustering with Cufflinks<\/b><\/h1><br>\n<h2 align=\"lef\" style='color:red' > Upvote my work if you found it useful<\/h2>\n<h2 align=\"lef\" style='color:red'>Wait a few seconds until the notebook is ready<\/h2>\n<li>Here, I will do the same analysis in <b><a href='https:\/\/www.kaggle.com\/alaasedeeq\/superstore-analysis-with-plotly'>Sales<\/a><\/b> but wit cufflinks<\/li><br>\n        <li>Plotly is an intractive visualization library, built on top of <b>d3.js<\/b> and is specifically a charting library which can be used directly with Pandas dataframes using another library named <b><a href=\"https:\/\/github.com\/santosjorge\/cufflinks\" >Cufflinks<\/a><\/b>.<\/li><br>\n    <li>Cufflinks connects plotly with pandas<\/li><br>\n    <li>Now, you can directly use Pandas dataframe to display various kinds of plots without having to use trace and figure         objects from graph_objs module as we  have been doing previously.<\/li><br>\n    <li>If not already available, install cufflinks package by using your favourite package manager like pip as given below<\/li><br>\n<b>You can also see:<\/b><br>\n<img src='https:\/\/upload.wikimedia.org\/wikipedia\/en\/2\/20\/NBC_Superstore.png' width=1000 hight=600><br>\n<b>You can also see:<\/b><br>\n<li><b><a href='https:\/\/www.kaggle.com\/alaasedeeq\/hotel-booking-eda-cufflinks-and-plotly'>Hotel booking EDA (Cufflinks and plotly)<\/a>\n<li><b><a href='https:\/\/www.kaggle.com\/alaasedeeq\/data-exploration-and-visualization-uber-data'>Data exploration and visualization(Uber Data)<\/a><br>\n<li><b><a href='https:\/\/www.kaggle.com\/alaasedeeq\/suicide-rates-visualization-and-geographic-maps\/edit\/run\/53135916'>Suicide Rates visualization and Geographic maps<\/a>\n<li><b><a href='https:\/\/www.kaggle.com\/alaasedeeq\/superstore-analysis-with-cufflinks-and-pandas'>Superstore Analysis With Cufflinks and pandas<\/a>\n<li><b><a href='https:\/\/www.kaggle.com\/alaasedeeq\/european-soccer-database-with-sqlite3'>European soccer database with sqlite3<\/a>\n<li><b><a href='https:\/\/www.kaggle.com\/alaasedeeq\/chinook-questions-with-sqlite'>Chinook data questions with sqlite3<\/a><br>\n<li><b><a href='https:\/\/www.kaggle.com\/alaasedeeq\/chinook-sql'>Chinook data sqlite3<\/a>"}}