{"cell_type":{"51b30c82":"code","943bc034":"code","6f6da96b":"code","7fe86214":"code","1b6c4148":"code","d84afdf0":"code","5cbcd18f":"code","47fabeeb":"code","85c0b2e2":"code","d7cf8dc0":"code","29c3c2e3":"code","12de279e":"code","68cdf554":"code","4d81a18a":"code","5817462b":"code","668b64e4":"code","c8cf2a59":"code","7846eb83":"code","cf18072d":"code","b3b602ee":"code","c7a29a50":"code","3ec0314e":"code","8a312007":"code","c323a62f":"markdown","d2dde171":"markdown","4b0a0b21":"markdown","312fd959":"markdown","c474c17d":"markdown","c98ac13d":"markdown","c14dd893":"markdown","3d653509":"markdown","e738eb7f":"markdown","39618e70":"markdown","23a899ff":"markdown","b3c05ba4":"markdown","3edced29":"markdown","3bef6d8b":"markdown","4cf9a49a":"markdown","d46285db":"markdown","6a622564":"markdown","749dfe44":"markdown"},"source":{"51b30c82":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","943bc034":"\ndef create_user_movie_df():\n    \"\"\"\n         Converts Movie and Rating dataset to User * Movie format\n          and converts it to a new dataset with a rating number of more than 1000.\n         Returns\n         -------\n         User * Films dataframe\n    \"\"\"\n    movie = pd.read_csv('..\/input\/movielens-20m-dataset\/movie.csv')\n    rating = pd.read_csv('..\/input\/movielens-20m-dataset\/rating.csv')\n    df = movie.merge(rating, how=\"left\", on=\"movieId\")\n    comment_counts = pd.DataFrame(df[\"title\"].value_counts())\n    rare_movies = comment_counts[comment_counts[\"title\"] <= 1000].index\n    common_movies = df[~df[\"title\"].isin(rare_movies)]\n    user_movie_df = common_movies.pivot_table(index=[\"userId\"], columns=[\"title\"], values=\"rating\")\n    return user_movie_df","6f6da96b":"def get_movies_df_by_userId(dataframe, userId):\n    \"\"\"\n         Determines the movies watched by the user to be recommended\n\n         Parameters\n         ----------\n         dataframe: dataframe\n             User * Movie  dataset\n             \n         userId: int\n             unique id of the user to be suggested\n         Returns\n         -------\n             Returns a list of movies that the user has watched\n    \"\"\"\n    random_user_df = dataframe[dataframe.index == userId]\n    return random_user_df.columns[random_user_df.notna().any()].tolist()\n","7fe86214":"user_movie_df = create_user_movie_df()\nuser_movie_df.head()","1b6c4148":"random_user = 108170\n\nmovies_watched = get_movies_df_by_userId(user_movie_df, random_user)","d84afdf0":"len(movies_watched)","5cbcd18f":"movies_watched_df = user_movie_df[movies_watched]","47fabeeb":"user_movie_count = movies_watched_df.T.notnull().sum()\nuser_movie_count = user_movie_count.reset_index()\nuser_movie_count.columns = [\"userId\", \"movie_count\"]","85c0b2e2":"perc = len(movies_watched) * 60 \/ 100\nusers_same_movies = user_movie_count[user_movie_count[\"movie_count\"] > perc][\"userId\"]\nusers_same_movies.head()","d7cf8dc0":"len(users_same_movies)","29c3c2e3":"final_df = movies_watched_df[movies_watched_df.index.isin(users_same_movies)]","12de279e":"final_df.head()","68cdf554":"corr_df = final_df.T.corr().unstack().sort_values()\ncorr_df = pd.DataFrame(corr_df, columns=[\"corr\"])\ncorr_df.index.names = ['user_id_1', 'user_id_2']\ncorr_df = corr_df.reset_index()","4d81a18a":"corr_df.head()","5817462b":"top_users = corr_df[(corr_df[\"user_id_1\"] == random_user) & (corr_df[\"corr\"] >= 0.65)][\n    [\"user_id_2\", \"corr\"]].reset_index(drop=True)","668b64e4":"top_users = top_users.sort_values(by='corr', ascending=False)","c8cf2a59":"top_users.head()","7846eb83":"top_users.rename(columns={\"user_id_2\": \"userId\"}, inplace=True)","cf18072d":"rating = pd.read_csv('..\/input\/movielens-20m-dataset\/rating.csv')\ntop_users_ratings = top_users.merge(rating[[\"userId\", \"movieId\", \"rating\"]], how='inner')\ntop_users_ratings = top_users_ratings[top_users_ratings[\"userId\"] != random_user]\ntop_users_ratings.head()","b3b602ee":"top_users_ratings['weighted_rating'] = top_users_ratings['corr'] * top_users_ratings['rating']\ntop_users_ratings.head()","c7a29a50":"recommendation_df = top_users_ratings.groupby('movieId').agg({\"weighted_rating\": \"mean\"})\nrecommendation_df = recommendation_df.reset_index()\nrecommendation_df.head()","3ec0314e":"movies_to_be_recommend = recommendation_df[recommendation_df[\"weighted_rating\"] > 3.5].sort_values(\"weighted_rating\",\n                                                                                                 ascending=False).head()\nmovies_to_be_recommend","8a312007":"movie = pd.read_csv('..\/input\/movielens-20m-dataset\/movie.csv')\nmovies_to_be_recommend.merge(movie[[\"movieId\", \"title\"]]).index\n\nmovies_to_be_recommend.merge(movie[[\"movieId\", \"title\"]])[\"title\"]\n","c323a62f":"* watched 186 movies\n\n We select the columns of the movies watched by the user we selected from user_movie_df and create a new df.\n \n","d2dde171":"We found the correlations for all users, but we have determined the user and must be other users besides it.","4b0a0b21":"![user based collaborative filtering](https:\/\/spiyer99.github.io\/images\/pytorch_recommendation\/intro.jpeg)\n\n## USER BASED COLLABORATIVE FILTERING\n\nThe system becomes very simple when you imagine the following event flow in the user based collaborative\n\nStep 1: Find people who watch 60 percent or more of the same movies as me (Ratio is discussed)\n\nStep 2: After you find these people, choose the ones closest to me as likes\n\nStep 3: Suggest me movies that the people I chose in step 2 watched but I didn't watch\n\nThat's the whole thing\n","312fd959":"## Calculating the Weighted Average Recommendation Score\n\n* What is the problem? There are two metrics we need to consider when we want to make recommendations.\n1) Correlation\n2) Rating: the ratings they give the movies\n\nProblem 1\n* A similar habit to a movie with the user we have determined.\nSomeone with # may have given a high rating, someone a low rating.\n\nProblem 2\n* When the users who have a similar correlation with the user we have determined are examined, they are highly correlated.\n* There are those who give 4.5 rating and low correlation but 4.5 rating, which one should I consider?\n\n!!!  * We should make such a score that both the effect of rating and the effect of correlation are taken into account.","c474c17d":"Currently, we have found the most similar users to our user. So what will I suggest? Do I recommend users?\n\nI will go to which movie and how many points these users gave with their id information.\n\nCombining top_users and rating data\n\nWhy are there multiples in this table? A user may have rated more than one movie.","c98ac13d":"What is the problem? The movies are multiple because users may have watched the same movies.\n\nIn order to prevent this, it is solved by taking the group by and taking the mean of the weighted_rating according to the movies.","c14dd893":"## A random user selection and the movies she watched","3d653509":"I should watch at least 60% of the movies similar to the user so that I can make a suggestion based on them.\n\nThere are people who watched at least 1 time, they can watch the same movies as my user, I cannot comment.","e738eb7f":"\n We calculate how many movies each user has watched the selected user has watched\n \nAnd we create a new df.","39618e70":"Who are the users who have the highest correlation with the user we determined?","23a899ff":"## These are the movies that will now be recommended.\n\nLet's get weighted_rating greater than 3.5","b3c05ba4":"## Determining the Users to be Suggested and Most Similar Users\n\n\nFor this we will perform 3 steps:\n1. We will gather the data of the user and other users that we have determined.\n2. We will create the correlation df.\n3. We will find the most similar users (Top Users).","3edced29":"## Suggested movie titles","3bef6d8b":"!!! user_id_2 should be changed because we will merge soon. It should be the same name as userId in the original dataset.","4cf9a49a":"## Selection of most similar users\n\nBringing 65% correlation with the user we have determined and printing a new dataframe.","d46285db":"That's it and it's so simple  \ud83d\ude80\n\n\n## let data be your best friend  \ud83d\ude80\n","6a622564":"!!! Columns must contain users. For this, the transpose of final_df has been taken and taken into the users column.\n\n## Similarity of users\n\nAnd the similarities of the users with each other are calculated","749dfe44":"##### What is the number of users who voted for more than 60% similar movies?"}}