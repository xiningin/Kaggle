{"cell_type":{"4c4a48c1":"code","74137361":"code","2f2bca51":"code","11227141":"code","a3c7748d":"code","87f95123":"code","c4b0ce25":"code","6b38699b":"code","38c89c2b":"code","3fbb1329":"code","d69dd4d8":"code","e67b7118":"code","346539a7":"code","914eef99":"code","b5fe24ef":"code","469b88c6":"code","152aff0d":"code","5c23230e":"code","0080cebc":"code","fc8cb668":"code","fd68d21b":"code","5a565143":"code","f243043d":"code","968702e8":"code","2a15536c":"code","0e7b3b40":"code","5716a461":"code","703eb160":"code","51627988":"code","a8ff9830":"code","b6052306":"code","9f4c41cf":"code","192a9659":"code","ea3cd820":"code","6678fd93":"code","2208c2a1":"code","c777b957":"markdown","0b87731f":"markdown","f59c3ff6":"markdown","3ac82a0a":"markdown","c013cf38":"markdown","3c73759e":"markdown","caba24d9":"markdown","e199265f":"markdown","8cdaefb3":"markdown","8da93c27":"markdown","77abc8ae":"markdown","562f2a2e":"markdown","7528f536":"markdown","a4d89bde":"markdown","b26f2c72":"markdown","5e91c6e3":"markdown","47dc459d":"markdown","6e9c87a0":"markdown","45b898e2":"markdown","1b401404":"markdown","a687ac72":"markdown","d2c65737":"markdown","5643dafe":"markdown","e55ca4c0":"markdown","f2253ec4":"markdown","27ef3228":"markdown","1c76e5a8":"markdown","b5e39ee3":"markdown","09864314":"markdown","1a3913f9":"markdown"},"source":{"4c4a48c1":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import r2_score, mean_squared_error, accuracy_score\nfrom sklearn.preprocessing import StandardScaler\nimport statsmodels.api as sm;\n\n%matplotlib inline\n\n","74137361":"#gathering the data\ndf = pd.read_csv('\/kaggle\/input\/new-york-city-airbnb-open-data\/AB_NYC_2019.csv')","2f2bca51":"df.head()","11227141":"#the number of rows and columns\nnum_rows = df.shape[0]\nnum_cols = df.shape[1]\nprint('number of rows equals to {} '.format(num_rows))\nprint('number of columns equals to {}'.format(num_cols))","a3c7748d":"#set of columns that have no missing values\nno_nulls = set(df.columns[df.isnull().sum() == 0])\nno_nulls","87f95123":"#set of columns that have more than 75% if their values missing\nmost_missing_cols = set(df.columns[df.isnull().mean() > 0.75])\nmost_missing_cols","c4b0ce25":"null_cols = set(df.columns[df.isnull().sum() != 0])\nnull_cols","6b38699b":"df.describe()","38c89c2b":"#check the data types and check if any columns are of different data types that you would expect\n#check the missing values for every column\ndf.info()","3fbb1329":"#discover the number of unique values for categorical columns\nprint(df.minimum_nights.nunique(), df.id.nunique(), df.host_id.nunique())\nprint(df.neighbourhood_group.nunique(), df.neighbourhood.nunique())\nprint(df.room_type.nunique(), df.availability_365.nunique())\nprint(df.price.nunique(), df.number_of_reviews.nunique())","d69dd4d8":"#visualize the categorical values for the neighbourhood_group\nplt.figure(figsize=(6,4))\ncount_neigh = df.neighbourhood_group.value_counts()\n(count_neigh\/df.shape[0]).plot(kind='bar');\nplt.title('the percent of every neighbourhood group', fontsize = 16)\nplt.ylabel('percent', fontsize = 16)\nplt.xlabel('neighbourhood group', fontsize = 16)\n","e67b7118":"#visualize the categorical values for the room_type\ncount_room = df.room_type.value_counts()\n(count_room\/df.shape[0]).plot(kind='bar');\nplt.title('room_type')\nplt.ylabel('the percent of every room type')","346539a7":"def clean(df):\n    '''\n    cleaning the dataframe by converting the data types for the id and host_id to Object,\n    filling the reviews per month with 0 value\n    filling the missing values in the names cloumns with special characters,\n    then removing the last_review column, I'll not use it in my analysis\n    \n    input -> the dataframe which was generated from the dataset\n    output -> a cleaned dataframe\n    '''\n    \n    df[['host_id', 'id']] = df[['host_id', 'id']].astype('str')\n    df['reviews_per_month'].fillna(0,inplace = True)\n    df['name'].fillna(\"$$$\",inplace=True)\n    df['host_name'].fillna(\"$$$\",inplace=True)\n    df.drop(['last_review'],axis=1,inplace=True)\n    return df\n","914eef99":"df = clean(df)","b5fe24ef":"df_host_area = df.groupby(['host_id', 'neighbourhood_group']).count()['id'].to_frame().reset_index()\ndf_host_area.sort_values('id', ascending = False, inplace =True)\ndf_host_area.rename(columns = {'id':'count'}, inplace = True)\n    \n#create a list of the names of the neighbourhood groups\nneigh_list = df_host_area['neighbourhood_group'].unique().tolist()\n    \n#create a dictionary to hold the name od the group with the count of unique hosts\ncount_unique_host = {}\n\ni = 0\nfor group in neigh_list:\n    df_group = df_host_area[df_host_area.neighbourhood_group == group]\n    count_unique_host[group] = df_group.shape[0]\n        \n    #print the first two hosts ids in every group\n    print(df_group.head(2))\n   \n    #plotting the number of unique hosts per group\nplt.figure(figsize=(10,6))\n    \nplt.bar(count_unique_host.keys(), count_unique_host.values())\nplt.title('the number of unique hosts per neighbourhood group', fontsize =16)\nplt.ylabel('the number of unique hosts', fontsize = 14)\nplt.xlabel('the neighbourhood group', fontsize =14)","469b88c6":"#Analyzing the number of rooms for every host and neighbourhood group\ndef unique_hosts(df, neighbour_count = 5, plot = True):\n    \n    '''\n    inputs:\n    df -> the dataframe of all the dataset after cleaning\n    neihbour_count -> the number of neighbourhood groups, here in this dataset equals to 5\n    plot-> True if we needs to making plots\n    \n    output:\n    print(the top 2 host id's)\n    the count of unique hosts in every neighbourhood group\n    \n    plot:\n    the top 10 host's ids who have the highest number of rooms in every group\n    the number of unique hosts per neighbourhood group\n    \n    '''\n    #create a new dataframe with the number of listings for every host_id in every group\n    df_host_area = df.groupby(['host_id', 'neighbourhood_group']).count()['id'].to_frame().reset_index()\n    df_host_area.sort_values('id', ascending = False, inplace =True)\n    df_host_area.rename(columns = {'id':'count'}, inplace = True)\n    \n    #create a list of the names of the neighbourhood groups\n    neigh_list = df_host_area['neighbourhood_group'].unique().tolist()\n    \n    #create a dictionary to hold the name od the group with the count of unique hosts\n    count_unique_host = {}\n    #create a subplots\n    fig, axs = plt.subplots(neighbour_count+1,1, figsize = (20,30))\n    fig.subplots_adjust(hspace=1)\n\n    i = 0\n    for group in neigh_list:\n        df_group = df_host_area[df_host_area.neighbourhood_group == group]\n        count_unique_host[group] = df_group.shape[0]\n        \n        #print the first two hosts ids in every group\n        print(df_group.head(3))\n        #plot the top 10 hosts with the number of their listings\n        if plot:\n            axs[i].bar(df_group.head(10)['host_id'], df_group.head(10)['count'])\n            axs[i].set_title('the top 10 hosts ids who have the highest number of rooms in {} '.format(group))\n            axs[i].set_ylabel('the number of rooms for every host')\n            axs[i].set_xlabel('host id')\n            i += 1\n    #plotting the number of unique hosts per group\n    if plot:\n        axs[neighbour_count].bar(count_unique_host.keys(), count_unique_host.values())\n        axs[neighbour_count].set_title('the number of unique hosts per neighbourhood group')\n        axs[neighbour_count].set_ylabel('the number of unique hosts')\n        axs[neighbour_count].set_xlabel('the neighbourhood group')\n    \n    return count_unique_host    ","152aff0d":"unique_hosts(df)","5c23230e":"def plot_price_group(df):\n    '''\n    This function for plotting the price distribution for every neighbourhood group\n    \n    input -> the dataframe\n    output -> plotting the price distribution on average for every  neighbourhood group based on the neighbourhoods\n    '''\n    neigh_list = df['neighbourhood_group'].unique().tolist()\n    fig,axs = plt.subplots(5,1,figsize=(20,20) )\n    fig.subplots_adjust(hspace=1)\n\n    i = 0\n    for group in neigh_list:\n        df_price = df[df.neighbourhood_group==group][[\"neighbourhood\",\"price\"]]\n        df_price = df_price.groupby(\"neighbourhood\").mean()\n        sns.distplot(df_price, ax = axs[i])\n        axs[i].set_xlabel(' The price in {}'.format(group))\n        axs[i].set_title('the price distribution in {}'.format(group))\n        i += 1\n","0080cebc":"plot_price_group(df)","fc8cb668":"def plot_price_room(df):\n    '''\n    This function for plotting the price distribution for every rom type\n    input -> the dataframe\n    output -> plotting the price distribution for every group\n    '''\n    room_list = df['room_type'].unique().tolist()\n    fig,axs = plt.subplots(3,1,figsize=(10,20) )\n    fig.subplots_adjust(hspace=1)\n\n    i = 0\n    for room in room_list:\n        df_price = df[df.room_type==room][[\"neighbourhood_group\",\"price\"]]\n        df_price = df_price.groupby(\"neighbourhood_group\").mean()\n        sns.distplot(df_price, ax = axs[i])\n        axs[i].set_xlabel(' The price in {}'.format(room))\n        axs[i].set_title('the price distribution in {}'.format(room))\n        i += 1","fd68d21b":"plot_price_room(df)","5a565143":"def price_relation(df, disc_var, max_val, min_val, step):\n    '''\n    This function exploes the relationship between the price and any other numeric feature\n    This function restricts the values of price from 0 to 200\n    inputs:\n    df -> the cleaned dataframe\n    disc_var -> the numeric(discrete) feature\n    max_val -> the maximum value of the numeric feature used in the plot\n    min_val -> the minimum value of the numeric feature used in the plot\n    step -> the step between two values in the plot\n    \n    outputs:\n    plotting the heatmap plot to discover many insights from it\n    '''\n    \n    plt.figure(figsize = [12, 5])\n\n    # left plot: scatterplot of discrete data with jitter and transparency\n    plt.subplot(1, 2, 1)\n    sns.regplot(data = df, x = 'price', y = disc_var, fit_reg = False,\n               x_jitter = 0.2, y_jitter = 0.2, scatter_kws = {'alpha' : 1\/3})\n\n    # right plot: heat map with bin edges between values\n    plt.subplot(1, 2, 2)\n    bins_x = np.arange(0, 200+.5,20)\n    bins_y = np.arange(min_val, max_val+1, step)\n    plt.hist2d(data = df, x = 'price', y = disc_var, cmin = .5,\n               bins = [bins_x, bins_y])\n    plt.colorbar();","f243043d":"price_relation(df, 'minimum_nights', 10, 0, 1)","968702e8":"price_relation(df, 'availability_365', 200, 1, 5)","2a15536c":"price_relation(df, 'number_of_reviews', 25, 0, 1)","0e7b3b40":"def multiexplore(df, disc_var):\n    '''\n    This function explores the relationship between price and \n    another numeric feature(minimum nights, number of reviews, availability) according to\n    every neighbourhood and every room type\n    \n    inputs:\n    df -> the cleaned dataframe\n    disc_var -> the numeric(discrete) feature\n    \n    output:\n    plotting the scatterplots\n    '''\n    g = sns.FacetGrid(data = df, col = 'room_type', row = 'neighbourhood_group', size = 2.5,\n                    margin_titles = True)\n    g.map(plt.scatter, 'price', disc_var)\n    g.fig.set_size_inches(15,20)\n","5716a461":"multiexplore(df, 'minimum_nights')","703eb160":"multiexplore(df, 'number_of_reviews')","51627988":"def explan_price(df):\n    '''\n    This function shows a visualization for the relationship between price, neighbourhood group, and room type\n    \n    inputs:\n    df -> the cleaned dataframe\n    outputs:\n    the line visualization\n    '''\n    plt.figure(figsize = [8,6])\n\n    ax = sns.pointplot(data = df, x = 'room_type', y = 'price', hue = 'neighbourhood_group')\n    ax.set_yticklabels([0,400,50], minor = True)\n    plt.title('The price range in every neighbourhood group for every room type', fontsize = 16)\n    plt.xlabel('Room Type',fontsize = 14)\n    plt.ylabel('Price', fontsize = 14)\n    ax.set_ylim(0,400)\n    ax.set_yticks(range(0,450, 50))\n    plt.show();","a8ff9830":"explan_price(df)","b6052306":"def create_dummy_df(df, dummy_na):\n    '''\n    INPUT:\n    df - pandas dataframe with categorical variables you want to dummy\n    dummy_na - Bool holding whether you want to dummy NA vals of categorical columns or not\n    \n    OUTPUT:\n    df - a new dataframe that has the following characteristics:\n            1. contains all columns that were not specified as categorical\n            2. removes all the original columns in cat_cols and unwanted columns in the prediction\n            3. dummy columns for each of the categorical columns in cat_cols\n            4. if dummy_na is True - it also contains dummy columns for the NaN values\n            5. Use a prefix of the column name with an underscore (_) for separating \n    '''\n    df.drop(['host_name', 'id', 'name', 'host_id', 'neighbourhood', 'latitude', 'longitude',\n         'reviews_per_month', 'calculated_host_listings_count'], axis =1, inplace = True)\n    cat_cols = df.select_dtypes(include=['object']) # Subset to a dataframe only holding the categorical columns\n    for col in  cat_cols:\n        try:\n            # for each cat add dummy var, drop original column\n            df = pd.concat([df.drop(col, axis=1), pd.get_dummies(df[col], prefix=col, prefix_sep='_', drop_first=True, dummy_na=dummy_na)], axis=1)\n        except:\n            continue\n    return df","9f4c41cf":"def price_pred(df):\n    '''\n    This function for predicting the price using these features:\n    neighbourhood_group, room_type, minimum_nights, number_of_reviews, availability_356\n    INPUT:\n    df -> the cleaned dataframe\n    OUTPUT:\n    printing the r-squared score for our model\n    '''\n    df = create_dummy_df(df, dummy_na=False)\n\n    X = df.drop('price', axis =1)\n    y = df['price']\n\n    scaler = StandardScaler() #scaling all the features using the normalization\n    scaled_X = scaler.fit_transform(X)\n\n    X_train, X_test, y_train, y_test = train_test_split(scaled_X, y, test_size = 0.25)#splitting the data to train and test data\n\n    model = LinearRegression() #instantiate the model\n    model.fit(X_train,y_train) #fit the model\n\n    y_test_preds = model.predict(X_test) #predict the test values\n    print(\"The r-squared score for the model was {} on {} values.\".format(r2_score(y_test, y_test_preds), len(y_test)))    ","192a9659":"price_pred(df)","ea3cd820":"#reading the dataframe again and cleaning it (because of the changes in the dataframe happened for prediction)\ndf = pd.read_csv('\/kaggle\/input\/new-york-city-airbnb-open-data\/AB_NYC_2019.csv')\ndf = clean(df)","6678fd93":"def highest_reviews_rooms(df):\n    '''\n    INPUT:\n    df -> the cleaned dataframe\n    \n    OUTPUT:\n    df_max_reviews -> a dataframe holds the names of neighbourhood_group,neighbourhoods that\n                      have the highest number of reviews in every group\n    df_max_rooms ->   a dataframe holds the names of neighbourhood_group,neighbourhoods that\n                      have the highest number of rooms in every group \n                      \n    '''\n    df_group_reviews = df.groupby(['neighbourhood_group', 'neighbourhood']).sum()['number_of_reviews'].to_frame().reset_index()\n    df_max_reviews = df_group_reviews.groupby('neighbourhood_group').max()[['neighbourhood','number_of_reviews']].reset_index()\n        \n    df_group_count = df.groupby(['neighbourhood_group', 'neighbourhood']).count()['id'].to_frame().reset_index()\n    df_max_rooms = df_group_count.groupby('neighbourhood_group').max()[['neighbourhood','id']].reset_index().rename(columns = {'id':'number of listings'})\n        \n    return df_max_reviews, df_max_rooms","2208c2a1":"#print the two tables which have the names of neighbourhoods \n#that have the highest number of reviews, rooms in every group\nprint(highest_reviews_rooms(df)[0], '\\n')\nprint(highest_reviews_rooms(df)[1])\n\n","c777b957":"## Clean","0b87731f":"We can learn from these plots alot, that *Manhattan* has got a host with id `219517861` who has more than 300 rooms in it, while in *Queens* the host with id `137358866` has the highest number of rooms(around 80), In *Broklyn* the host with id `7503643` has 52 rooms, In *Bronx* and *Staten Island*, the hosts with the ids `310670` `104812805` has the highest number of rooms respectively.\n\nThe last plot shows the number of unique hosts in every neighbourhood group, In *Manhattan* which has the highest number of rooms and the highest number of unique hosts, the number of unique hosts in it equals to `16578`, aftrer it comes Brookyn with `15966`. ","f59c3ff6":"the best model to predict the price of the listing is by using  the room type, neighborhood group, minimum nights, number of reviews and the availability features, but these features are contribute in 10% from the price of the listing. that the r-squared is only 0.1 .\n","3ac82a0a":"\n* **how many hosts are in every neighbourhood_group? what are the top host ids who have the highest number of rooms in every neighbourhood_group?** ","c013cf38":"#### The Relationship Between Price And Minimum Nights ","3c73759e":"#### Price Distribution For Every Room Type","caba24d9":"we have missing values in the name and host_name columns, but the id and host_id there're no missing values, so in our investigation, I will depend on the id's columns.\n\nthe last review column also has missing values, so I will drop it later because, I will not use it.\n\nthe reviews per month column has missing values,I will deal with it later.\n","e199265f":"#### Price Distribution in every neighbourhood group","8cdaefb3":"## Analyze\n### Bivariate Exploration","8da93c27":"#### The realtionship between price and another numeric feature\n\nTo explore this relationship, we will use this function","77abc8ae":"## Business Questions","562f2a2e":"* **What are the features that affect on the price? can we predict the price from these features?**","7528f536":"### Making  Predictions(Model)","a4d89bde":"To answer this question, we'll explore the relationship between price and the other features, in Bivariate, multivariate explorations.","b26f2c72":"### Question 2","5e91c6e3":"Here, I will use many of features to predict the price, after doing many iterations with adding and removing features from the model, to make the best model that give us the highest R Squared, I arrived to the model that gave me 0.1 value.","47dc459d":"### Which neighbourhood has the highest number of reviews, and the highest number of rooms for every neighbourhood group?\n\nTo answer this question, we'll use the `neighbourhood_group`, `neighbourhood`, and `number_of_reviews` columns","6e9c87a0":"#### The Relationship Between Price And Availability","45b898e2":"## Take A Look At The Data(Assess)","1b401404":"\n### Multivariate Exploration","a687ac72":"#### the relationship between price and number_of_reviews related to every neighbourhood and every room type","d2c65737":"* how many hosts are in every neighbourhood_group? what are the top host ids who have the highest number of rooms in every      neighbourhood_group?\n* What are the features that affect on the price? can we predict the price from these features? \n* Which neighbourhood has the highest number of reviews, and the highest number of rooms for every neighbourhood group? what can we learn from the results?","5643dafe":"To answer this question, we will use the host_id, neighbourhood_group columns","e55ca4c0":"### Explanatory Visualization(visualize)\n\n","f2253ec4":"This function will be used to explore the relationship between prica and another numeric feature according to neighbourhood group and the room type","27ef3228":" it was clear that there\u2019s a difference in the price in some neighborhood group, that the price range in Manhattan is from 90 to 370 on average, and in Brooklyn is from 60 to 220, In Queens is from 60 to 170, In Staten Island is from 40 to 180, In Bronx is from 30 to 120, these averages were calculated based on the neighborhoods in every group.","1c76e5a8":"#### the relationship between price and minimum nights related to every neighbourhood and every room type","b5e39ee3":"### Question 1","09864314":"This is a blog post on medium showing the insights extracred from the dataset\nhttps:\/\/medium.com\/@manar.aljawarneh\/airbnb-homes-in-new-york-52a115de9282","1a3913f9":"#### The Relationship Between Price And Number Of Reviews"}}