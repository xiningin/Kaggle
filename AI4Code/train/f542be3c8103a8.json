{"cell_type":{"d9a8308e":"code","5d52b2b8":"code","2d8e776f":"code","b2a5a365":"code","0c4ae21e":"code","8391b370":"code","9e8b28db":"code","c85c0d3b":"code","33b622ea":"code","39360070":"code","9a24919c":"code","d900f10e":"code","18644589":"code","d5fbe54b":"code","5227284a":"code","afdd54f9":"code","b09bdf52":"code","0e5e3b43":"code","a8730c84":"code","5be9ddc5":"code","77891006":"code","bbc8dd36":"code","ee029a17":"code","84468d0f":"code","286c1c7a":"code","2e81a19d":"code","625e298e":"code","c8d48dbf":"code","ef0aa048":"code","fa5d939c":"code","841c8439":"code","45c2eae4":"code","36b7f486":"code","e4adaf6a":"code","ed6e809d":"code","6c13944e":"code","1310c0aa":"code","83aaf760":"code","1dc56d7e":"code","e3708bc7":"code","ac384da4":"code","be307b52":"code","37b3ac36":"code","e7f6870e":"code","4d38b049":"markdown","71621956":"markdown","45c4b2ca":"markdown","c4f8a1fb":"markdown","32f7a741":"markdown","d0894646":"markdown","34b7406e":"markdown","f639cb33":"markdown","1ecc9037":"markdown","2390fa2a":"markdown","b8101039":"markdown","5518d113":"markdown"},"source":{"d9a8308e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\n\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","5d52b2b8":"data  = pd.read_csv('..\/input\/train.csv')\ntest  = pd.read_csv('..\/input\/test.csv')","2d8e776f":"data.head()","b2a5a365":"data.shape","0c4ae21e":"data.info()","8391b370":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline  \n","9e8b28db":"plt.figure(figsize = (16,6))\nsns.heatmap(data.isnull(),cmap = 'viridis')","c85c0d3b":"plt.figure(figsize = (16,6))\nsns.heatmap(test.isnull(),cmap = 'viridis')\n","33b622ea":"data.drop(['Id'], axis = 1,inplace = True)\ndata.shape\nId = test.Id\ntest.drop(['Id'], axis = 1,inplace = True)\ntest.shape","39360070":"X = data.drop(['SalePrice'],axis = 1)\ny = data.SalePrice","9a24919c":"test.head()","d900f10e":"AgeofHouse = X.YrSold - X.YearRemodAdd\nAgeoftestHouse = test.YrSold -test.YearRemodAdd","18644589":"X = pd.concat([X,AgeofHouse.rename('HouseAge')],axis = 1 )\ntest = pd.concat([test,AgeoftestHouse.rename('HouseAge')],axis = 1 )","d5fbe54b":"X.drop(['YrSold','YearBuilt','YearRemodAdd'],axis = 1, inplace = True)\ntest.drop(['YrSold','YearBuilt','YearRemodAdd'],axis = 1, inplace = True)","5227284a":"corr = X.corr()\nplt.figure(figsize=(16, 16))\nsns.heatmap(corr, cmap='viridis')","afdd54f9":"X['GarageYrBlt'].corr(X['HouseAge'])","b09bdf52":"X.columns","0e5e3b43":"X.Fence = X.Fence.fillna('NoFence')\nX.MiscFeature = X.MiscFeature.fillna('None')\ntest.Fence = test.Fence.fillna('NoFence')\ntest.MiscFeature = test.MiscFeature.fillna('None')","a8730c84":"X.PoolQC = X.PoolQC.fillna('NoPool')# description says\ntest.PoolQC = test.PoolQC.fillna('NoPool')# description says","5be9ddc5":"for col in ['GarageType', 'GarageCond','GarageFinish','GarageQual']:\n    X[col] = X[col].fillna('none')\nfor col in ['GarageType', 'GarageCond','GarageFinish','GarageQual']:\n    test[col] = test[col].fillna('none')","77891006":"\nX['GarageYrBlt']=X['GarageYrBlt'].fillna(0)\ntest['GarageYrBlt']=test['GarageYrBlt'].fillna(0)","bbc8dd36":"LF = X.LotFrontage.median()\nX['LotFrontage'] = X['LotFrontage'].fillna(LF)\nLFt =test.LotFrontage.median()\ntest['LotFrontage'] = test['LotFrontage'].fillna(LFt)","ee029a17":"X['Alley'] = X['Alley'].fillna('none')\nX['MasVnrType'] = X['MasVnrType'].fillna('none')\nX['MasVnrArea'] = X['MasVnrArea'].fillna(0)\nX['GarageCars'] = X['GarageCars'].fillna(0)\nX['GarageArea'] = X['GarageArea'].fillna(0)\ntest['Alley'] = test['Alley'].fillna('none')\ntest['MasVnrType'] = test['MasVnrType'].fillna('none')\ntest['MasVnrArea'] = test['MasVnrArea'].fillna(0)\ntest['GarageCars'] = test['GarageCars'].fillna(0)\ntest['GarageArea'] = test['GarageArea'].fillna(0)","84468d0f":"for col in ['BsmtQual', 'BsmtCond', 'BsmtExposure','BsmtFinType1','BsmtFinType2']:\n    X[col] = X[col].fillna('none')\nfor col in ['BsmtQual', 'BsmtCond', 'BsmtExposure','BsmtFinType1','BsmtFinType2']:\n    test[col] = test[col].fillna('none')","286c1c7a":"X['Electrical'] = X['Electrical'].fillna('none')\nX['FireplaceQu'] = X['FireplaceQu'].fillna('none')\ntest['Electrical'] = test['Electrical'].fillna('none')\ntest['FireplaceQu'] = test['FireplaceQu'].fillna('none')","2e81a19d":"plt.figure(figsize = (16,6))\nsns.heatmap(test.isnull(),cmap = 'viridis')","625e298e":"col_mask=test.isnull().any(axis=0)\ncol_mask","c8d48dbf":"from sklearn.preprocessing import LabelEncoder","ef0aa048":"cols = ('MSSubClass','MSZoning','Street','Alley','LotShape','LandContour','Utilities','LotConfig',\n        'LandSlope','Neighborhood', 'Condition1','Condition2','BldgType','HouseStyle','RoofStyle',\n        'RoofMatl','Exterior1st','Exterior2nd','MasVnrType','ExterQual','ExterCond','Foundation',\n        'BsmtQual','BsmtCond','BsmtExposure','BsmtFinType1','BsmtFinType2','Heating','HeatingQC',\n        'CentralAir','Electrical','KitchenQual','Functional','FireplaceQu','GarageType','GarageFinish',\n        'GarageQual','GarageCond','PavedDrive','PoolQC','Fence','MiscFeature','SaleType','SaleCondition') ","fa5d939c":"for i in cols:\n    \n    LE = LabelEncoder() \n    LE.fit(list(X[i].values)) \n    X[i] = LE.transform(list(X[i].values))\n   \nfor i in cols:\n    \n    LE = LabelEncoder() \n    LE.fit(list(test[i].values)) \n    test[i] = LE.transform(list(test[i].values))\ntest.head()\n","841c8439":"from sklearn.linear_model import Ridge","45c2eae4":"rr = Ridge(alpha=10)\nrr.fit(X, y)\ny_pred = rr.predict(X)\nresid = y - y_pred\nmean_resid = resid.mean()\nstd_resid = resid.std()\nz = (resid - mean_resid) \/ std_resid\nz = np.array(z)\noutliers = np.where(abs(z) > abs(z).std() * 3)[0]\noutliers","36b7f486":"X.drop([ 178,  185,  218,  231,  377,  412,  440,  473,  496,  523,  588,\n        608,  628,  632,  664,  666,  688,  691,  769,  774,  803,  898,\n       1046, 1169, 1181, 1182, 1243, 1298, 1324, 1423] )\ny.drop ([ 178,  185,  218,  231,  377,  412,  440,  473,  496,  523,  588,\n        608,  628,  632,  664,  666,  688,  691,  769,  774,  803,  898,\n       1046, 1169, 1181, 1182, 1243, 1298, 1324, 1423] )      ","e4adaf6a":"from sklearn.linear_model import LinearRegression\nL1 = LinearRegression()\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\nx_tr,x_ts,y_tr,y_ts = train_test_split(X,y,test_size = 0.3,random_state = 42)","ed6e809d":"L1.fit(x_tr,y_tr)","6c13944e":"pre = L1.predict(x_ts)","1310c0aa":"metrics.r2_score(pre,y_ts)","83aaf760":"plt.scatter(pre,y_ts)","1dc56d7e":"col_mask=test.isnull().any(axis=0)\ncol_mask","e3708bc7":"test.info()","ac384da4":"\ncol_mask=test.isnull().any(axis=0)\ncol_mask\ntest = test.fillna(0)\n\n","be307b52":"col_mask=test.isnull().any(axis=0)\ncol_mask","37b3ac36":"SalePrice = L1.predict(test)\n#test.info()","e7f6870e":"predict_Sales=pd.Series(SalePrice, name = 'SalePrice')\nresult = pd.concat([Id, predict_Sales], axis=1)\nresult.to_csv('Housing_Pred.csv',index=False)\nresult.info()","4d38b049":"lets see if we have any null values and missing data. I want to plot a heatmap for null values. Guess I need Seaborn let's import that and plot the data","71621956":"we have to predict Saleprice so I am creating X without Saleprice and y = Saleprice. Later I want to split my traing data using train test split ","45c4b2ca":"I want to fill all the null values with some meaningful information, And Id column for sure is not needed for data prediction so I am dropping Id column","c4f8a1fb":"Too Confusing but I see Dark blue for GarageYrBlt and HouseAge. I wanted to delete if the value is more that 0.95. Lets see ","32f7a741":"basic training of the data... nothing complicated.\nI will import libraries when I need them :)\n","d0894646":"Plotting correlation map for X","34b7406e":"\nlooks can be deceiving... there are only 1460 rows of data but 81 columns ... may be after cleaning the data i want to use PCA for dimentionality reduction ","f639cb33":"I want to creatre a column AgeofHouse . and I want to delete YrSold, YrRemodeled and YearBuilt\nYearRemodAdd: Remodel date (same as construction date if no remodeling or additions)","1ecc9037":"lets group all the columns where data type is Object and use label Encoder","2390fa2a":"If we observe the above data I think the Garage Colmns with Nan has no garage, As othet Garage features are null too . So  'GarageType', 'GarageFinish', 'GarageQual', 'GarageCond' Should be replaced with None","b8101039":"lets have a look at the data. Hmm looks a little complicated than the one I have learned at udemy. There's first time for handling anything and here's mine :)","5518d113":"for now I will type all the object data type variables in a for loop and use Label Encodeing"}}