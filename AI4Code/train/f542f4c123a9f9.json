{"cell_type":{"1c84687c":"code","c281fc95":"code","414432eb":"code","ac33c8d5":"code","c82e92da":"code","960950ff":"code","e70a69ff":"code","cf8f694b":"code","b69b590d":"code","bcfb4355":"code","017b395a":"code","c1e6d0b3":"code","88e86586":"code","4369c75a":"code","1ce4ddf4":"code","52bd28f1":"code","96c0ca80":"code","a4538ab2":"code","af19acd0":"code","27c38117":"code","9fbbc775":"code","cecd062d":"code","3c475720":"code","be42db37":"code","8a99335d":"code","4e7e40bb":"code","65fdecbc":"code","57cbccf3":"markdown","e820ad9b":"markdown","7ace898d":"markdown","655791a3":"markdown","adea7395":"markdown","1235df39":"markdown","1b228cf9":"markdown","5bd6471e":"markdown","38a620d5":"markdown","d082adf5":"markdown","a5890812":"markdown"},"source":{"1c84687c":"# The package, please to duplicate\n\nimport numpy as np\nimport pandas as pd\nfrom collections import Counter\nfrom tqdm import tqdm_notebook as tqdm","c281fc95":"%%time\ntrain_df = pd.read_csv('..\/input\/train.csv')\ntest_df = pd.read_csv('..\/input\/test.csv')\nsub_df = pd.read_csv('..\/input\/sample_submission.csv')","414432eb":"train_df.head()","ac33c8d5":"test_df.head()","c82e92da":"sub_df.head()","960950ff":"train = train_df.copy()\nprint(len(train))\ntrain.head()","e70a69ff":"test = pd.merge(sub_df, test_df, on = ['ciphertext_id'])\nprint(len(test))\ntest.head()","cf8f694b":"test.tail()","b69b590d":"test.difficulty.value_counts()","bcfb4355":"train['word_list'] = train.text.str.split()\ntrain['word_num'] = train['word_list'].map(len)\ntrain.head()","017b395a":"ciph_1 = test[test.difficulty == 1]\nciph_1.set_index('ciphertext_id',inplace=True)\nciph_1.drop(columns = 'difficulty')\n\nciph_2 = test[test.difficulty == 2]\nciph_2.set_index('ciphertext_id',inplace=True)\nciph_2.drop(columns = 'difficulty')\n\nciph_3 = test[test.difficulty == 3]\nciph_3.set_index('ciphertext_id',inplace=True)\nciph_3.drop(columns = 'difficulty')\n\nciph_4 = test[test.difficulty == 4]\nciph_4.set_index('ciphertext_id',inplace=True)\nciph_4.drop(columns = 'difficulty')","c1e6d0b3":"ciph_1['ciphertextlist'] = ciph_1.ciphertext.str.split()\n\nciph_2['ciphertextlist'] = ciph_2.ciphertext.str.split()\n\nciph_3['ciphertextlist'] = ciph_3.ciphertext.str.split()\n\nciph_4['ciphertextlist'] = ciph_4.ciphertext.str.split()","88e86586":"train['word_num'].value_counts()","4369c75a":"ciph_1['length'] = ciph_1.ciphertextlist.map(len)\nprint(ciph_1.length.value_counts())\n\nciph_2['length'] = ciph_2.ciphertextlist.map(len)\nprint(ciph_2.length.value_counts())\n\nciph_3['length'] = ciph_3.ciphertextlist.map(len)\nprint(ciph_3.length.value_counts())\n\nciph_4['length'] = ciph_4.ciphertextlist.map(len)\nprint(ciph_4.length.value_counts())","1ce4ddf4":"train.head()","52bd28f1":"test.head()","96c0ca80":"ciph_1.head()","a4538ab2":"ciph_2.head()","af19acd0":"ciph_3.head()","27c38117":"ciph_4.head()","9fbbc775":"#Solution 1\ntraind = ' etaoisnrhlducmfygwpb.v,kI\\'TA\"-SEBMxCHDjW)(RLONPGF!Jzq01?KVY:9U2*\/3;58476ZQX%$}#@={[]'\ntestd =  '7lx4v!o2Q[O=y,CzV:}dFX#(Wak\/qbne *JAmKp{fc6DGZj\\'Tg9\"YHS]Ei5)8h1MINwP@s?U3;0%$-rLuBRt.'\nSubEnc_ = str.maketrans(testd, traind)\n\n#Apply to all\ntest['ciphertext'] = test['ciphertext'].map(lambda x: str(x).translate(SubEnc_)).values","cecd062d":"for difficulty in sorted(test['difficulty'].unique()):\n    print('Difficulty: ', difficulty)\n    sample = test[test['difficulty']==difficulty]\n    print(len(sample), sample['ciphertext'].iloc[0][:50])","3c475720":"traind = Counter(' '.join(train['text'].astype(str).values).split(' ')).most_common(400)\ntraind = [(w, c) for w, c in traind if len(w)==6]\nprint(repr(traind))\n\ntest2 = test[test['difficulty']==2].reset_index(drop=True)\ntestd = Counter(' '.join(test2['ciphertext'].astype(str).values).split(' ')).most_common(400)\ntestd = [(w, c) for w, c in testd if len(w)==6]\nprint('*********************************************')\nprint(repr(testd))","be42db37":"t1_ = train[((train['text'].str.contains('should')))]['text'].values[0]\nt2_ = test[((test['difficulty']==2))]['ciphertext'].values[0]\n\nfor i in range(0, len(t1_), 50):\n    print(t1_[i:i+50])\n    print(t2_[i:i+50])\n    if i > 100:\n        break","8a99335d":"possible =  ' !\"#$%\\'()*,-.\/0123456789:;=?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]abcdefghijklmnopqrstuvwxyz{}'\nnosub = ''\ncommon = {}\n\ndef get_common(t1_, t2_):\n    global nosub\n    global common\n    global possible\n    \n    for i in range(len(t1_)):\n        if str(t1_[i]) in common:\n            common[str(t1_[i])]['Subs'].append(str(t2_[i]))\n            common[str(t1_[i])]['Subs'] = list(set(common[str(t1_[i])]['Subs']))\n            common[str(t1_[i])]['Count'] += 1\n        else:\n            common[str(t1_[i])] = {'Subs':[str(t2_[i])], 'Count':1}\n\n    for k in sorted(common):\n        if common[k]['Count'] > 2 and len(common[k]['Subs'])==1:\n            print(k, common[k])\n            nosub += k\n            nosub = ''.join(sorted(set(nosub)))\n\n    a = ''\n    for i in range(len(possible)):\n        if possible[i] in list(nosub):\n            a += possible[i]\n        else:\n            a += '*'\n    print(a)\n    \nget_common(t1_, t2_)","4e7e40bb":"%%time\nnosub = ' !$%(,1456:BEJPQTUVXYZ]acdghijnvw'\ntrain['len'] = train['text'].map(lambda x: len(str(x)))\ntest['len'] = test['ciphertext'].map(lambda x: len(str(x)))\ni_ = 10\nfor i in tqdm(range(len(nosub))):\n    train['nosub_'+str(nosub[i])] = train['text'].map(lambda x: len([v for v in str(x) if str(v)==str(nosub[i])]))\n    train['nosub_'+str(nosub[i])] = train['nosub_'+str(nosub[i])].map(lambda x: x + abs(i_ - (x % i_) if (x % i_) > 0 else x + i_)) #Add some wiggle room\n    test['nosub_'+str(nosub[i])] = test['ciphertext'].map(lambda x: len([v for v in str(x) if str(v)==str(nosub[i])]))\n    test['nosub_'+str(nosub[i])] = test['nosub_'+str(nosub[i])].map(lambda x: x + abs(i_ - (x % i_) if (x % i_) > 0 else x + i_)) #Add some wiggle room","65fdecbc":"train.rename(columns={'len': 'true_len'}, inplace=True)\ntrain['len'] = train['true_len'].map(lambda x: x + abs(100 - (x % 100) if (x % 100) > 0 else x))\ntest_sol2 = pd.merge(test, train, how='inner', on=['nosub_ ',\n       'nosub_!', 'nosub_$', 'nosub_%', 'nosub_(', 'nosub_,', 'nosub_1',\n       'nosub_4', 'nosub_5', 'nosub_6', 'nosub_:', 'nosub_B', 'nosub_E',\n       'nosub_J', 'nosub_P', 'nosub_Q', 'nosub_T', 'nosub_U', 'nosub_V',\n       'nosub_X', 'nosub_Y', 'nosub_Z', 'nosub_]', 'nosub_a', 'nosub_c',\n       'nosub_d', 'nosub_g', 'nosub_h', 'nosub_i', 'nosub_j', 'nosub_n',\n       'nosub_v', 'nosub_w', 'len'])\nprint(len(test_sol2))\ntest_sol2.drop_duplicates(subset=['ciphertext_id_x'], keep='first', inplace=True)\n#test_sol2 = test_sol2[test_sol2['difficulty']== 2] #Lets let others ride for now\ntest_sol2['start'] = ((test_sol2['len'] - test_sol2['true_len']) \/ 2).astype(int)\ntest_sol2['end'] = (((test_sol2['len'] - test_sol2['true_len']) \/ 2) + 0.5).astype(int)\nprint(len(test_sol2))\n# solution1 = pd.read_csv('..\/input\/the-crypto-keeper\/submission.csv')\ntest_sol2_ = test_sol2[['ciphertext_id_x', 'index']].rename(columns={'ciphertext_id_x': 'ciphertext_id', 'index': 'index2'})\nsolution2 = pd.merge(test_sol2_, test_sol2_, how='left', on=['ciphertext_id'])\nsolution2['index'] = solution2.apply(lambda r: r['index2'] if r['index']==0 else r['index'], axis=1).fillna(0).astype(int)\nsolution2[['ciphertext_id', 'index']].to_csv('submission.csv', index=False)","57cbccf3":"The index is labeled by the range from 0 to 108755","e820ad9b":"### Difficulty dolumn analysis\n\nThe work below I use some code from:\n- https:\/\/www.kaggle.com\/sanikamal\/ciphertext-challenge-iii","7ace898d":"The sub_df has two columns.\n- The first column is 'ciphertext_id', which is the id of ciphertext. I will test the id is in the test_df.\n- The second column is 'index', which is the results we will predict.","655791a3":"Now, the question is how to use the difficulty column in test.\n\nIn previous work, some kaggler use the difficulty as a magic number. Let's do some analysis.","adea7395":"The code below is based on https:\/\/www.kaggle.com\/jazivxt\/difficulty-2","1235df39":"# 1 EDA\n\n- analyze the train and test data\n\nwe can get some hints from the previous competetion.","1b228cf9":"The test_df has three columns.\n- The first column is 'ciphertext_id', which is the id of ciphertext.\n- The second column is 'ciphertext', which is the text we will process.\n- The third column is 'difficulty', which means that Every document in the dataset has been padded to the next hundred characters (95->100, 213->300) with random (in-alphabet) characters, then encrypted based on its difficulty level. A difficulty of 1 means that only cipher #1 was used. A difficulty of 2 means cipher #1 was applied, followed by cipher #2, and so on. The difficulty level denotes exactly which ciphers were applied, and in what order..","5bd6471e":"### Test the id in sub_df is in test_df or not.\n\n- using the merge or join function","38a620d5":"A good start is from the previous work. Thanks for Chizuchizu's discussion.https:\/\/www.kaggle.com\/c\/ciphertext-challenge-iii\/discussion\/103414#latest-595317\n\n20 Newsgroups Ciphertext Challenge:\n- https:\/\/www.kaggle.com\/c\/20-newsgroups-ciphertext-challenge\/overview\n- https:\/\/www.kaggle.com\/leflal\/cipher-1-cipher-2-full-solutions\n- https:\/\/www.kaggle.com\/leflal\/cipher-3-solution\n- https:\/\/www.kaggle.com\/rturley\/a-first-crack-tools-tips-3-cipher-solutions\n- https:\/\/www.kaggle.com\/c\/20-newsgroups-ciphertext-challenge\/discussion\/77894\n\nCiphertext Challenge II\n- https:\/\/www.kaggle.com\/c\/ciphertext-challenge-ii\n- https:\/\/www.kaggle.com\/group16\/cracking-the-code-difficulty-1\n- https:\/\/www.kaggle.com\/jazivxt\/difficulty-2\n- https:\/\/www.kaggle.com\/group16\/cracking-the-code-difficulty-3","d082adf5":"**Question**\n\nThe ciphertext_id in test.csv is not in the plaintext_id column of train.csv.","a5890812":"The train_df has three columns.\n- The first column is 'plaintext_id', which is the id of the text.\n- The second column is 'text', which is the text that we will process.\n- The third column is 'index', A unique ID that should be assigned to each ciphertext_id in test.csv when you've decrypted (or think you've correctly decrypted!) its ciphertext.."}}