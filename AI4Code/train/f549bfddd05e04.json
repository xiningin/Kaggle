{"cell_type":{"92c9d49c":"code","ceccb01d":"code","36d96847":"code","1386cbaf":"code","e390318d":"code","f596c357":"code","bb1212af":"code","9b1020e6":"code","67f12472":"code","e30f2d96":"code","3f7e9f20":"code","34a9bf4f":"code","8e35e388":"code","85fab5b7":"code","c2855491":"code","015be17e":"code","11ded3c0":"code","952f7262":"code","3517582b":"code","705a2236":"code","d770f01d":"code","0c083611":"code","dcb3b046":"code","8841dd23":"code","5607cdca":"code","92c2f177":"code","b3a86be0":"code","c6f14777":"code","fd273e60":"code","20513904":"code","9b274937":"code","51c18510":"code","3f6c4b15":"code","daf8719e":"code","e61111d7":"code","41bbabfb":"code","f35bb6fb":"code","17271676":"code","721d951e":"code","37280d03":"code","088688bc":"code","99c503e8":"code","280956a5":"code","0a33b46d":"code","3dfde1cd":"code","e0747daf":"code","57ae7b5f":"code","1cd279f0":"code","a702423e":"code","f64cf876":"code","4bbf3bfd":"code","afe9540b":"code","79661161":"code","bf47e89d":"code","9c68acd6":"code","2c6320db":"code","39509dda":"code","a3fba970":"code","2e3cb447":"code","00a29d9b":"code","7c71aab5":"code","e8f7a245":"code","0a47ec69":"code","678a430a":"code","dff71e81":"code","2f9aefc5":"code","36dcf559":"code","74b2d266":"code","ed7455fa":"code","8b77a80e":"code","8f0102fe":"code","f7618756":"code","55e987c2":"code","7f7549ac":"code","57e789d8":"code","c49c40cc":"code","e23d7907":"code","14ab59fa":"code","e80403e0":"code","0d7d1c59":"code","8c9b0684":"code","76fda443":"code","bc125a72":"code","d1e4034e":"code","187a329a":"markdown","bdb41183":"markdown","c9937231":"markdown","d800c42d":"markdown","1a26a7dd":"markdown","facdd379":"markdown","99dc91a2":"markdown","4511d359":"markdown","cd071e7b":"markdown","98a0d793":"markdown","acdacb7e":"markdown","37f1a812":"markdown","f8a70402":"markdown","374eca78":"markdown","3fef37c3":"markdown","900c779c":"markdown","087a46dd":"markdown","f2d94c31":"markdown"},"source":{"92c9d49c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ceccb01d":"import os\nimport numpy as np\nimport seaborn as sb\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport missingno as msg\nfrom scipy import stats\nfrom sklearn.model_selection import train_test_split , cross_val_score , RandomizedSearchCV\nfrom sklearn.preprocessing import StandardScaler ,MinMaxScaler ,LabelEncoder\nfrom sklearn.metrics import accuracy_score\nfrom xgboost import XGBClassifier\nfrom sklearn.ensemble import RandomForestClassifier","36d96847":"df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ndf1 = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\nsub = pd.read_csv(\"\/kaggle\/input\/titanic\/gender_submission.csv\")\n","1386cbaf":"df","e390318d":"msg.matrix(df)","f596c357":"msg.matrix(df1)","bb1212af":"sb.kdeplot(df['Age'])","9b1020e6":"sb.distplot(df['Age'])","67f12472":"print(\"Skewness of Age is \" , stats.skew(df['Age'].dropna()))\nprint(\"Kurtosis of Age is \" , stats.kurtosis(df['Age'].dropna()))\n","e30f2d96":"df.corr()['Age'].sort_values(ascending = False)","3f7e9f20":"print(df['Age'].isna().sum())\nprint(df1['Age'].isna().sum())\n","34a9bf4f":"sb.boxplot(df['Age'])","8e35e388":"sb.boxplot(df1['Age'])","85fab5b7":"df['Age'].fillna(df['Age'].median() , inplace = True)\ndf1['Age'].fillna(df1['Age'].median() , inplace = True)\n","c2855491":"sb.distplot(df['Age'] , label = \"train_age\" , color = \"red\")\nsb.distplot(df1['Age'] , label = \"test_age\" , color = \"blue\")\n","015be17e":"sb.distplot(df['Fare'])","11ded3c0":"sb.boxplot(df['Fare'])","952f7262":"sb.distplot(df1['Fare'])","3517582b":"sb.boxplot(df1['Fare'])","705a2236":"print(\"Skewness of Fare is \" , stats.skew(df1['Fare'].dropna()))\nprint(\"Kurtosis of Fare is \" , stats.kurtosis(df1['Fare'].dropna()))\n","d770f01d":"print(df['Fare'].value_counts().sort_values(ascending = True))","0c083611":"print(df1['Fare'].value_counts().sort_values(ascending = True))","dcb3b046":"df = df[df['Fare'] < 100]    #remove outlier","8841dd23":"sb.distplot(df['Fare'])","5607cdca":"print(\"Skewness of Fare is \" , stats.skew(df['Fare'].dropna()))\nprint(\"Kurtosis of Fare is \" , stats.kurtosis(df['Fare'].dropna()))\n","92c2f177":"print(df['Fare'].isna().sum())","b3a86be0":"df1['Fare'].fillna(df1['Fare'].median() , inplace = True)","c6f14777":"df['Cabin']","fd273e60":"df['Cabin'].unique()","20513904":"print((df['Cabin'].isna().sum() \/ len(df))*100)","9b274937":"# drop\ndf.drop(['Cabin'],axis =1 , inplace = True)\ndf1.drop(['Cabin'],axis =1 , inplace = True)\n","51c18510":"df.head()","3f6c4b15":"df['Embarked']","daf8719e":"print(df['Embarked'].unique())\nprint(df['Embarked'].nunique())\n","e61111d7":"df['Embarked'].fillna(method = 'ffill' , inplace = True)","41bbabfb":"df['Embarked'].isna().sum()","f35bb6fb":"df1['Embarked'].fillna(method = 'ffill' , inplace = True)","17271676":"df.head()","721d951e":"df.drop(['PassengerId'],axis =1 , inplace =True)\ndf1.drop(['PassengerId'],axis =1 , inplace =True)\n","37280d03":"df['Name']","088688bc":"df = df.reset_index(drop = True)\nfor i in range(len(df)):\n    if (\"Mr\" in df.loc[i , 'Name']) or (\"Master\" in df.loc[i , 'Name']):\n        df.loc[i , \"gender_category\"] = 0\n    else:\n        df.loc[i , 'gender_category'] = 1","99c503e8":"#df = df.reset_index(drop = True)\nfor i in range(len(df1)):\n    if (\"Mr\" in df1.loc[i , 'Name']) or (\"Master\" in df1.loc[i , 'Name']):\n        df1.loc[i , \"gender_category\"] = 0\n    else:\n        df1.loc[i , 'gender_category'] = 1","280956a5":"df.drop(['Name'],axis =1 , inplace = True)\ndf1.drop(['Name'],axis =1 , inplace = True)\n","0a33b46d":"df['Sex']","3dfde1cd":"sb.countplot(df['Sex'])","e0747daf":"sb.countplot(df1['Sex'])","57ae7b5f":"le = LabelEncoder()\ndf['Sex'] = le.fit_transform(df['Sex'])\ndf1['Sex'] = le.fit_transform(df1['Sex'])\n","1cd279f0":"df['Sex'].unique()","a702423e":"df['Ticket']","f64cf876":"df.drop(['Ticket'],axis =1 , inplace = True)\ndf1.drop(['Ticket'],axis =1 , inplace = True)\n","4bbf3bfd":"sb.countplot(df['Embarked'])","afe9540b":"sb.countplot(df1['Embarked'])","79661161":"df['Embarked'] = df['Embarked'].replace({\"S\":3 , \"C\":2 , \"Q\":1})\ndf1['Embarked'] = df1['Embarked'].replace({\"S\":3 , \"C\":2 , \"Q\":1})\n","bf47e89d":"df.head()","9c68acd6":"df1.head()","2c6320db":"plt.figure(figsize = (10,8))\nsb.heatmap(df.corr() , annot = True)","39509dda":"df.corr()['Survived'].sort_values(ascending = False)","a3fba970":"x = df.drop(['Survived'] ,axis =1)\ny = df['Survived']","2e3cb447":"x_train ,x_test , y_train , y_test = train_test_split(x,y,test_size= 0.27 , random_state =100)","00a29d9b":"print(x_train.shape)\nprint(y_train.shape)\nprint(x_test.shape)\nprint(y_test.shape)\n","7c71aab5":"rf = RandomForestClassifier()","e8f7a245":"result = cross_val_score(rf ,x,y, cv =10 ,scoring = 'accuracy',n_jobs =-1 , verbose =1)","0a47ec69":"print(result.mean())","678a430a":"rf.fit(x_train , y_train)","dff71e81":"rf_pred = rf.predict(x_test)","2f9aefc5":"print(\"Acc of RandomForest without HyperParameter tuning is \" , accuracy_score(rf_pred , y_test))","36dcf559":"xgb = XGBClassifier()\nresult = cross_val_score(xgb ,x,y, cv =10 ,scoring = 'accuracy',n_jobs =-1 , verbose =1)","74b2d266":"print(result.mean())","ed7455fa":"print(xgb.fit(x_train , y_train))\nxgb_pred = xgb.predict(x_test)\n","8b77a80e":"print(\"Acc of XGBClassifier without HyperParameter tuning is \" , accuracy_score(xgb_pred , y_test))","8f0102fe":"rf_param = {'n_estimators':list(range(100,500)) , \n         'max_depth':list(range(1,10)) , \n         'criterion':['gini','entropy'] ,\n         'max_samples':list(range(1,10))    \n}","f7618756":"rscv = RandomizedSearchCV(rf ,param_distributions=rf_param ,  cv =5 , n_iter=10 , scoring = 'accuracy',n_jobs =-1 , verbose =10)","55e987c2":"rscv.fit(x,y)","7f7549ac":"print(rscv.best_score_)\nprint(rscv.best_estimator_)\nprint(rscv.best_index_)\nprint(rscv.best_params_)\n","57e789d8":"# Fit and predict\nrf = RandomForestClassifier(criterion='entropy', max_depth=3, max_samples=9,\n                       n_estimators=119)\nprint(rf.fit(x_train , y_train))\nprint(\"Accuracy score of RF after tuning is :\", accuracy_score(rf.predict(x_test) , y_test))","c49c40cc":"xgb_param = {'n_estimators':list(range(100,500)) , \n         'max_depth':list(range(1,10)) , \n         'learning_rate':[0.001,0.002,0.003,0.004,0.005,0.006,0.007,0.008,0.05,0.09] ,\n         'min_child_weight ':list(range(1,10))    \n}\n\nrscv = RandomizedSearchCV(xgb ,param_distributions=xgb_param ,  cv =5 , n_iter=10 , scoring = 'accuracy',n_jobs =-1 , verbose =10)\nrscv.fit(x,y)","e23d7907":"print(rscv.best_score_)\nprint(rscv.best_estimator_)\nprint(rscv.best_index_)\nprint(rscv.best_params_)\n","14ab59fa":"# Fit and predict\nxgb = XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n              colsample_bynode=1, colsample_bytree=1, gamma=0, gpu_id=-1,\n              importance_type='gain', interaction_constraints='',\n              learning_rate=0.09, max_delta_step=0, max_depth=2,\n               min_child_weight =9,\n              monotone_constraints='()', n_estimators=448, n_jobs=0,\n              num_parallel_tree=1, random_state=0, reg_alpha=0, reg_lambda=1,\n              scale_pos_weight=1, subsample=1, tree_method='exact',\n              validate_parameters=1, verbosity=None)\n\nprint(xgb.fit(x_train , y_train))\nprint(\"Accuracy score of XGB after tuning is :\", accuracy_score(xgb.predict(x_test) , y_test))","e80403e0":"df1","0d7d1c59":"main_pred = xgb.predict(df1)","8c9b0684":"main_pred","76fda443":"sub","bc125a72":"sub['Survived'] = main_pred","d1e4034e":"sub.to_csv(\"Main_Submission.csv\" , index = False)","187a329a":"## If you liked this Notebook , please upvote. Gives  Motivation to make new Notebooks :)","bdb41183":"## Analysis on Cabin col","c9937231":"## Analysis on Name col","d800c42d":"# Splitting , Cross Validation and Model Building","1a26a7dd":"# *Let's do Feature Engineering (EDA)*","facdd379":"## Analysis on Fare col","99dc91a2":"## Analysis on Embarked col","4511d359":"## Make Submission file","cd071e7b":"## HyperParam tuning for RandomForest","98a0d793":"## Model - RandomForest","acdacb7e":"## Acc of RF - 75.33\n## Acc of XGB - 83.2\n\n### Final Model selected - XGB","37f1a812":"## Analysis on Embarked","f8a70402":"## HyperParam Tuning for XGBoost classifier","374eca78":"## Analysis on Sex","3fef37c3":"## Analysis on Ticket","900c779c":"# *We will first Analysis Null Values for all the Column .*","087a46dd":"## Model - XGBoostClassifier","f2d94c31":"## Analysis on Age col"}}