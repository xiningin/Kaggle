{"cell_type":{"1de685fa":"code","fe0581c3":"code","5b1d4dda":"code","59877beb":"code","0d5043cb":"code","f6f6c9e2":"code","88479d5d":"code","1bb4f545":"code","c85a6939":"code","80db00d3":"code","b1ed6082":"code","bd9d0389":"code","0f998e89":"code","15a57e76":"code","2521cac3":"code","b79290b7":"code","95674cdb":"code","aa348f54":"code","bc62855a":"code","8a66fd20":"code","c153d702":"code","349880ab":"code","3afb654e":"code","24fbdf65":"code","cd5919ae":"code","3b4163fc":"code","7aea6561":"code","bd712cab":"code","b50e5c62":"code","231b3128":"code","4f44c503":"code","89662e39":"code","5219b94e":"code","7edfd589":"code","3863a074":"code","bf781ece":"code","9bf75d68":"code","812f3a17":"code","839aac89":"code","a4cdf7fa":"code","29d22067":"code","2143d09a":"code","92dd2df7":"code","ff7c4ffc":"code","4d907d0d":"code","28f79a64":"code","11a67b7c":"code","c386161e":"code","de3d04f7":"code","4dd26b0c":"code","2fff860d":"code","39586835":"code","ee74f0cc":"code","d41a81dc":"code","f660dce1":"code","402b920e":"code","36ad70f0":"code","2aca23f2":"code","8508feb5":"code","8de98de1":"code","e1e21671":"code","d50c567f":"code","9eea8fff":"markdown","d9f6a5d4":"markdown","c1a2c96d":"markdown","6b5f81f1":"markdown","c16c6b10":"markdown","fac5827f":"markdown","a7deb142":"markdown","255113ad":"markdown","df34a9eb":"markdown","d71431c7":"markdown","2d3c3fe2":"markdown","f578fdcc":"markdown","c0235f27":"markdown","3bb72887":"markdown","d40eada2":"markdown","fb4c07b8":"markdown","e207699a":"markdown","f97b610b":"markdown","6db46c80":"markdown","535f24ec":"markdown","b239f662":"markdown","adf88fd1":"markdown","b69aba07":"markdown","8ac7dff4":"markdown","d9bbb0a8":"markdown","3370a688":"markdown","ed2cd9a6":"markdown","d8c34b85":"markdown","bac47304":"markdown","1ed22882":"markdown","3efce23f":"markdown","72a34231":"markdown","8e0420cd":"markdown","f21611b4":"markdown","841c24b3":"markdown","4d420e50":"markdown","803a0bc4":"markdown","ed5c3605":"markdown","9fb266ee":"markdown","f283570d":"markdown","fbf79c7c":"markdown","a7913558":"markdown","ac556325":"markdown","008af41c":"markdown","bdd93775":"markdown","7cdf64bd":"markdown","634160ff":"markdown","136d7bab":"markdown","98e53ddb":"markdown","97aada79":"markdown","dafeba11":"markdown","9f282457":"markdown","20ec35b7":"markdown","45e5a28f":"markdown","e1b70083":"markdown","979d493a":"markdown","df592259":"markdown","1dc1c472":"markdown","a5ea06bb":"markdown","7ea2d283":"markdown","79d2f1c3":"markdown","fcad42d4":"markdown","054e64e4":"markdown","f7d8206c":"markdown","b1a3244c":"markdown","d8381898":"markdown","db149f85":"markdown","5cc046e2":"markdown"},"source":{"1de685fa":"import numpy as np \nimport pandas as pd \nimport warnings\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline ","fe0581c3":"data = pd.read_csv(\"..\/input\/employee-attrition-data\/MFG10YearTerminationData.csv\")\ndata.head()","5b1d4dda":"data.shape","59877beb":"data.isnull().sum()","0d5043cb":"data.info()","f6f6c9e2":"data.drop_duplicates(inplace=True)\ndata","88479d5d":"data.drop(['EmployeeID', 'birthdate_key', 'recorddate_key', 'gender_full'], axis=1, inplace=True)","1bb4f545":"data.head()","c85a6939":"data.city_name.unique()","80db00d3":"data.department_name.unique()","b1ed6082":"data.termreason_desc.unique()","bd9d0389":"data.BUSINESS_UNIT.unique()","0f998e89":"data.job_title.unique()","15a57e76":"board = ['CEO','VP Stores', 'Director, Recruitment', 'VP Human Resources', 'VP Finance', 'Director, Accounts Receivable', \n         'Director, Accounting', 'Director, Employee Records', 'Director, Accounts Payable', 'Director, HR Technology', \n         'Director, Investments', 'Director, Labor Relations', 'Director, Audit', 'Director, Training',\n         'Director, Compensation']\n\nexecutive = [ 'Exec Assistant, VP Stores', 'Exec Assistant, Legal Counsel', 'CHief Information Officer', \n             'Exec Assistant, Human Resources', 'Exec Assistant, Finance']\n\nmanager = ['Customer Service Manager', 'Processed Foods Manager', 'Meats Manager',\n           'Bakery Manager', 'Produce Manager', 'Store Manager', 'Trainer', 'Dairy Manager']\n\nemployee = ['Meat Cutter', 'Dairy Person', 'Produce Clerk', 'Baker', 'Cashier',\n            'Shelf Stocker', 'Recruiter', 'HRIS Analyst', 'Accounting Clerk',\n            'Benefits Admin', 'Labor Relations Analyst', 'Accounts Receiveable Clerk',\n            'Accounts Payable Clerk', 'Auditor', 'Compensation Analyst',\n            'Investment Analyst', 'Systems Analyst', 'Corporate Lawyer', 'Legal Counsel']\n\ndef job_title(job):\n    if job in board: return 'board'\n    if job in executive: return 'executive'\n    if job in manager: return 'manager'\n    if job in employee: return 'employee'\n\ndata['job_title'] = data['job_title'].map(job_title)","2521cac3":"data.job_title.unique()","b79290b7":"city_population = {\n    'Vancouver':2313328,\n     'Victoria':289625,\n     'Nanaimo':84905,\n     'New Westminster':58549,\n     'Kelowna':125109,\n     'Burnaby':202799,\n     'Kamloops':68714,\n     'Prince George':65558,\n     'Cranbrook':18610,\n     'Surrey':394976,\n     'Richmond':182000,\n     'Terrace':19443,\n     'Chilliwack':77000,\n     'Trail':9707,\n     'Langley':23606,\n     'Vernon':47274,\n     'Squamish':19512,\n     'Quesnel':13799,\n     'Abbotsford':151683,\n     'North Vancouver':48000,\n     'Fort St John':17402,\n     'Williams Lake':14168,\n     'West Vancouver':42694,\n     'Port Coquitlam':114565,\n     'Aldergrove':12363,\n     'Fort Nelson':3561,\n     'Nelson':9813,\n     'New Westminister':58549,\n     'Grand Forks':4049,\n     'White Rock':66450,\n     'Haney':82256,\n     'Princeton':2828,\n     'Dawson Creek':10802,\n     'Bella Bella':1019,\n     'Ocean Falls':129,\n     'Pitt Meadows':174410,\n     'Cortes Island':1042,\n     'Valemount':1021,\n     'Dease Lake':335,\n     'Blue River':157\n}\n\ndef change_city_into_city_pop(city):\n    return city_population(city)\n\ndata['city_name'] = data['city_name'].map(city_population)","95674cdb":"def change_city(population):\n    str = 'rural'\n    if (population >= 10000) & (population < 100000): str = 'town'\n    if population >= 100000: str = 'mega'\n    return str\n\ndata['city_name'] = data.city_name.map(change_city)","aa348f54":"data['city_name'].unique()","bc62855a":"data.head()","8a66fd20":"data.STATUS.value_counts()","c153d702":"status_label = data.STATUS.value_counts()\nplt.figure(figsize=(10, 5))\nsns.barplot(status_label.index, status_label);\nplt.xlabel('STATUS', fontsize=20);\nplt.ylabel('Count', fontsize=20)","349880ab":"from sklearn.utils import resample\n\n# Separate Target Classes\ndf_1 = data[data.STATUS==\"ACTIVE\"]\ndf_2 = data[data.STATUS==\"TERMINATED\"]\n \n# Upsample minority class\ndf_2_upsampled = resample(df_2, \n                                 replace=True,     # sample with replacement\n                                 n_samples=48168,    # to match majority class\n                                 random_state=123) # reproducible results\n\n# Combine majority class with upsampled minority class\ndf_upsampled = pd.concat([df_1, df_2_upsampled])\n \n# Display new class counts\ndf_upsampled.STATUS.value_counts()","3afb654e":"df_upsampled","24fbdf65":"status_label = df_upsampled.STATUS.value_counts()\nplt.figure(figsize=(10, 5))\nsns.barplot(status_label.index, status_label);\nplt.xlabel('STATUS', fontsize=20);\nplt.ylabel('Count', fontsize=20)","cd5919ae":"plt.figure(figsize=(10, 5))\nsns.countplot(x=\"city_name\", hue=\"STATUS\", data=df_upsampled)","3b4163fc":"plt.figure(figsize=(10, 5))\nsns.countplot(x=\"BUSINESS_UNIT\", hue=\"STATUS\", data=df_upsampled)","7aea6561":"plt.figure(figsize=(10, 5))\nsns.countplot(x=\"job_title\", hue=\"STATUS\", data=df_upsampled)","bd712cab":"plt.figure(figsize=(10, 5))\nplt.hist(\"STATUS_YEAR\", data = df_upsampled[df_upsampled[\"STATUS\"] == \"ACTIVE\"], alpha = 0.5, label = \"ACTIVE\")\nplt.hist(\"STATUS_YEAR\", data = df_upsampled[df_upsampled[\"STATUS\"] == \"TERMINATED\"], alpha = 0.5, label = \"TERMINATED\")\nplt.title(\"Distribution of Status Year with respect to Status\")\nplt.xlabel(\"Status Year\")\nplt.legend(title = \"STATUS\")\nplt.show()","b50e5c62":"plt.figure(figsize=(10, 5))\nplt.hist(\"length_of_service\", data = df_upsampled[df_upsampled[\"STATUS\"] == \"ACTIVE\"], alpha = 0.5, label = \"ACTIVE\")\nplt.hist(\"length_of_service\", data = df_upsampled[df_upsampled[\"STATUS\"] == \"TERMINATED\"], alpha = 0.5, label = \"TERMINATED\")\nplt.title(\"Distribution of Length of Service with respect to Status\")\nplt.xlabel(\"Length of Service\")\nplt.legend(title = \"STATUS\")\nplt.show()","231b3128":"plt.figure(figsize=(10, 5))\nplt.hist(\"age\", data = df_upsampled[df_upsampled[\"STATUS\"] == \"ACTIVE\"], alpha = 0.5, label = \"ACTIVE\")\nplt.hist(\"age\", data = df_upsampled[df_upsampled[\"STATUS\"] == \"TERMINATED\"], alpha = 0.5, label = \"TERMINATED\")\nplt.title(\"Distribution of Age with respect to Status\")\nplt.xlabel(\"Age\")\nplt.legend(title = \"STATUS\")\nplt.show()","4f44c503":"for column in ['store_name', 'STATUS_YEAR', 'length_of_service', 'age']:\n    plt.figure(figsize=(10, 5))\n    sns.distplot(df_upsampled[column], color = '#32384D', label = 'terminated',  kde = True)\n    plt.title(column, size = 14)","89662e39":"df_upsampled.head()","5219b94e":"city_name_label = {value: key for key, value in enumerate(df_upsampled['city_name'].unique())}\ndf_upsampled['city_name'] = df_upsampled['city_name'].map(city_name_label)","7edfd589":"department_name_label = {value: key for key, value in enumerate(df_upsampled['department_name'].unique())}\ndf_upsampled['department_name'] = df_upsampled['department_name'].map(department_name_label)","3863a074":"job_title_label = {value: key for key, value in enumerate(df_upsampled['job_title'].unique())}\ndf_upsampled['job_title'] = df_upsampled['job_title'].map(job_title_label)","bf781ece":"gender_short_label = {value: key for key, value in enumerate(df_upsampled['gender_short'].unique())}\ndf_upsampled['gender_short'] = df_upsampled['gender_short'].map(gender_short_label)","9bf75d68":"term_desc_label = {value: key for key, value in enumerate(df_upsampled['termreason_desc'].unique())}\ndf_upsampled['termreason_desc'] = df_upsampled['termreason_desc'].map(term_desc_label)","812f3a17":"termtype_desc_label = {value: key for key, value in enumerate(df_upsampled['termtype_desc'].unique())}\ndf_upsampled['termtype_desc'] = df_upsampled['termtype_desc'].map(termtype_desc_label)","839aac89":"status_label = {value: key for key, value in enumerate(df_upsampled['STATUS'].unique())}\ndf_upsampled['STATUS'] = df_upsampled['STATUS'].map(status_label)","a4cdf7fa":"business_label = {value: key for key, value in enumerate(df_upsampled['BUSINESS_UNIT'].unique())}\ndf_upsampled['BUSINESS_UNIT'] = df_upsampled['BUSINESS_UNIT'].map(business_label)","29d22067":"df_upsampled.head()","2143d09a":"plt.figure(figsize=(15, 10))\nsns.heatmap(df_upsampled.corr(), annot=True);\nplt.title('Correlation Matrix', fontsize=20);","92dd2df7":"df_upsampled.corr()['STATUS'].sort_values(ascending=False)[1:]","ff7c4ffc":"df_upsampled.drop(['termreason_desc', 'termtype_desc', 'orighiredate_key', 'terminationdate_key'], axis=1, inplace=True)","4d907d0d":"df_upsampled.head()","28f79a64":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nimport xgboost as xgb\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import accuracy_score, f1_score, confusion_matrix, classification_report, roc_auc_score,roc_curve,auc","11a67b7c":"accuracy_list = []\nf1_list = []\nroc_auc_list = []","c386161e":"def result(X, y, ts, rs, model):\n    \n    #train test split\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=ts, random_state=rs)\n    \n    #scaling\n    sc = StandardScaler()\n    X_train = sc.fit_transform(X_train)\n    X_test = sc.transform(X_test)\n    \n    #fit on data\n    model.fit(X_train, y_train)\n    \n    #prediction\n    pred = model.predict(X_test)\n    \n    #performance of model\n    print(\"Classification Report: \\n\", classification_report(y_test, pred))\n    print(\"-\" * 100)\n    print()\n    \n    #accuracy of model\n    acc = accuracy_score(y_test, pred)\n    accuracy_list.append(acc)\n    print(\"Accuracy Score: \", acc)\n    print(\"-\" * 100)\n    print()\n\n    #f1-score of model\n    f1 = f1_score(y_test, pred)\n    f1_list.append(f1)\n    print(\"F1 Score: \", f1)\n    print(\"-\" * 100)\n    print()\n\n    #roc-auc curve of model\n    fpr,tpr,threshold = roc_curve(y_test,pred)\n    auc_value = auc(fpr,tpr)\n    rocauc_score = roc_auc_score(y_test, pred)\n    roc_auc_list.append(rocauc_score)\n    plt.figure(figsize=(5,5),dpi=100)\n    print(\"ROC-AUC Score: \", f1)\n    print(\"-\" * 100)\n    print()\n    plt.plot(fpr,tpr,linestyle='-',label = \"(auc_value = %0.3f)\" % auc_value)\n    plt.xlabel('False Positive Rate')\n    plt.ylabel('True Positive Rate')\n    plt.legend()\n    plt.show()\n    print()\n    \n    #confusion matrix for model\n    print(\"Confusion Matrix: \")\n    plt.figure(figsize=(10, 5))\n    sns.heatmap(confusion_matrix(y_test, pred), annot=True, fmt='g');\n    plt.title('Confusion Matrix', fontsize=20)","de3d04f7":"x = df_upsampled[['age', 'length_of_service', 'city_name', 'department_name', 'job_title', 'store_name', 'gender_short',\n       'STATUS_YEAR', 'BUSINESS_UNIT']]\ny = df_upsampled[['STATUS']]","4dd26b0c":"model = LogisticRegression()\nresult(x, y, 0.25, 42, model)","2fff860d":"rf = RandomForestClassifier()\nresult(x, y, 0.25, 42, rf)","39586835":"knn = KNeighborsClassifier()\nresult(x, y, 0.25, 42, knn)","ee74f0cc":"gb = GradientBoostingClassifier()\nresult(x, y, 0.25, 42, gb)","d41a81dc":"xg = xgb.XGBClassifier()\nresult(x, y, 0.25, 42, xg)","f660dce1":"nb = GaussianNB()\nresult(x, y, 0.25, 42, nb)","402b920e":"dt = DecisionTreeClassifier()\nresult(x, y, 0.25, 42, dt)","36ad70f0":"sgd = SGDClassifier()\nresult(x, y, 0.25, 42, sgd)","2aca23f2":"classifier_list = [\"Logistic Regression\", \"Random Forest\", \"KNN\", \"Gradient Boosting\", \"XGBoost\", \"Naive Bayes\", \"Decision Tree\", \"Stochastic Gradient Descent\"]\nlist_class = []\nfor i in range(0, len(classifier_list)):\n  listclass = [classifier_list[i], accuracy_list[i], f1_list[i], roc_auc_list[i]]\n  list_class.append(listclass)\n\nlist_class","8508feb5":"cc_table = pd.DataFrame(list_class, columns = [\"Classifier\", \"Accuracy\", \"F1 Score\", \"ROC-AUC Score\"])\ncc_table.sort_values(ascending = False, by = \"Accuracy\")","8de98de1":"plt.figure(figsize = (8,6))\nsns.barplot(x = cc_table[\"Accuracy\"]*100, \n            y = cc_table[\"Classifier\"], \n            data = cc_table, \n            order = cc_table.sort_values(\"Accuracy\", ascending = False).Classifier)","e1e21671":"plt.figure(figsize = (8,6))\nsns.barplot(x = cc_table[\"F1 Score\"]*100, \n            y = cc_table[\"Classifier\"], \n            data = cc_table, \n            order = cc_table.sort_values(\"F1 Score\", ascending = False).Classifier)","d50c567f":"plt.figure(figsize = (8,6))\nsns.barplot(x = cc_table[\"ROC-AUC Score\"]*100, \n            y = cc_table[\"Classifier\"], \n            data = cc_table, \n            order = cc_table.sort_values(\"ROC-AUC Score\", ascending = False).Classifier)","9eea8fff":"Random Forest Classifier","d9f6a5d4":"# **Binary Classification**","c1a2c96d":"Decision Tree Classifier","6b5f81f1":"Unique Values in the Business Unit","c16c6b10":"Converting cities to either \"Rural\" or \"Town\"","fac5827f":"Logistic Regression","a7deb142":"# **EDA**","255113ad":"KNN Classifier","df34a9eb":"Distribution of Age with respect to Status","d71431c7":"Distribution of Length of Service with respect to Status","2d3c3fe2":"Distribution of Status","f578fdcc":"Status","c0235f27":"Unique Values in Department Names","3bb72887":"Checking Duplicates","d40eada2":"Type of Termination","fb4c07b8":"Distribution of Status based on City Name ","e207699a":"# **Visualization**","f97b610b":"For F1 Score","6db46c80":"XGBoost Classifier","535f24ec":"Independent and Dependent Features","b239f662":"Distribution of Status Year with respect to Status","adf88fd1":"For ROC-AUC Score","b69aba07":"-> Maximum number of \"Employees\" are the ones with the employee job title and the number of ones with active status is more than the number of ones with terminated status.","8ac7dff4":"Dropping Some Unimportant Columns","d9bbb0a8":"Gradient Boosting Classifier","3370a688":"Converting Job Titles into four Categories","ed2cd9a6":"Unique Values in City Names","d8c34b85":"Checking Data Info","bac47304":"Business Unit","1ed22882":"For Accuracy","3efce23f":"-> We can observe that two classes are highly imbalanced","72a34231":"# **Data Pre-Processing**","8e0420cd":"The following are the columns in our dataset:\n\n-employee id\n\n-employee record date (year of data)\n\n-birth date\n\n-hire date\n\n-termination date\n\n-age\n\n-length of service\n\n-city\n\n-department\n\n-job title\n\n-store number\n\n-gender\n\n-termination reason\n\n-termination type\n\n-status year\n\n-status (LABEL)\n\n-business unit","f21611b4":"Dropping more unimportant columns","841c24b3":"**Conclusion: After comparing the evaluation metrics of each model, we can conclude that Random Forest Classifier seems to be the best classifier that can be used and Decision Tree would be the next best option.**","4d420e50":"**Importing Necessary Libraries**","803a0bc4":"Changing the City Names","ed5c3605":"To make the classes balanced","9fb266ee":"-> More number of employees are from the stores and not from the head-office.\n\n-> Cases of termination are higher in the head-office whereas cases of termination is lower in the stores.","f283570d":"Naive Bayes Classifier","fbf79c7c":"**Employee Attrition is the process of an Employee leaving a company. In this dataset, various factors which could be the reason of attrition is specified. Thus, I have performed EDA on the model to analyze the importance of the features in the model and have performed Classification using 7 Classification Models.**","a7913558":"Stochastic Gradient Descent Classifier","ac556325":"Checking Null Values","008af41c":"Here. 7 Classification Models are used in order to perform Binary Classification. The models used are:\n* Logistic Regression\n* K-Nearest Neighbours Classifier\n* Random Forest Classifier\n* Gradient Boosting Classifier\n* XGBoost Classifier\n* Gaussian Naive Bayes Classifier\n* Decision Tree Classifier\n* Stochastic Gradient Descent Classifier","bdd93775":"Unique Values for Job Title after Reducing Data","7cdf64bd":"# **Classifier Comparison**","634160ff":"Plotting the Comparison Table as a Bar Plot","136d7bab":"Unique Values in Termination Reason Description","98e53ddb":"Dataset after mapping the values","97aada79":"The Classification Report, Confusion Matrix and Evaluation Metrics Accuracy, F1 Score and ROC-AUC Score are checked for each Classifier and are compared in order to decide which Classification Model is the best.","dafeba11":"-> Classes are balanced","9f282457":"Distribution of Status based on Job Title","20ec35b7":"Reason for Termination","45e5a28f":"Unique Values in Job Title","e1b70083":"Checking the Correlation of Status with repect to other features","979d493a":"City Name","df592259":"# **EMPLOYEE ATTRITION**","1dc1c472":"**Reading the Data**","a5ea06bb":"Department Name","7ea2d283":"Distribution of Status based on Business Unit","79d2f1c3":"Gender","fcad42d4":"Job Title","054e64e4":"After Upsampling","f7d8206c":"Train Test Evaluation Function","b1a3244c":"**Correlation Matrix**","d8381898":"-> Maximum number of employees are from the mega city in which the ratio of active to terminated status of the employee is higher (active > terminated)\n\n-> Number of employees from the town are less compared to mega city but mugh higher compared to rural area and the ratio of active to terminated status of the employee is almost the same (active ~ terminated)\n\n-> The least number of employees are from rural areas and the ratio of active to terminated status of the employee is lower (active < terminated)","db149f85":"Distribution Plot","5cc046e2":"Unique Values for Cities after Reducing Data"}}