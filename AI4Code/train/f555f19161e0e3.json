{"cell_type":{"868588a7":"code","4bd3461e":"code","96f66b89":"code","effb13e0":"code","aa765f52":"code","6e489c91":"code","d7ff32b0":"code","c0d847fe":"code","0c9dde8e":"code","50de5ed0":"code","f1517ecf":"code","b98e621d":"code","b1f9fe96":"code","66b19cc8":"code","0b46fc87":"code","2b3aa51b":"code","4c3dd9df":"code","a50f7de2":"code","a8b83f07":"code","74b2f4ba":"code","48859bf3":"code","800a2912":"code","de2b2819":"code","9b997389":"code","6f707941":"code","ae4c5c58":"code","a594a71b":"code","7b2c66f6":"code","314b8bfa":"code","81f82fe6":"code","36d7c8e7":"code","e67a3caa":"code","14123067":"code","182c7eab":"code","12dee572":"code","bd11eb88":"code","d1afac33":"code","7c5665f5":"code","7fa9019d":"code","b8df613c":"code","8db69039":"code","815ab309":"code","3db3d24c":"code","f0b706f0":"code","a8cae00a":"code","0ebb1566":"code","6221a868":"code","d0a273b7":"code","d59ccdaa":"code","6065e7ef":"code","04453102":"code","b294e730":"code","7f1464dd":"code","01ef0d71":"code","8bebbdf9":"code","125e167a":"code","e7acb607":"code","52ce4254":"code","60c93ec3":"code","850d1f40":"code","b5bfde84":"code","e4671d1e":"code","4aad1293":"code","a05b21fb":"code","5b6a08ce":"code","8cc3eda0":"code","e60f04b3":"code","2e9672f5":"code","dd83d8b1":"code","0c9a2f2c":"code","207ad6e9":"code","eb284c30":"code","83e80960":"code","d92ad530":"code","898c24d6":"code","8fd7e360":"code","392264f3":"code","7cd1d288":"code","23f1dd83":"code","2a56f0be":"markdown","cedca294":"markdown","96e06f16":"markdown","e4f18f2a":"markdown","b3c6c7ff":"markdown","97b2f5c3":"markdown","2cd81ac4":"markdown","cd8a16ae":"markdown","be1e4acf":"markdown","aca7ce0b":"markdown","9b8a45d4":"markdown","ecb9fd64":"markdown","e365ad25":"markdown","d011f61a":"markdown","7d12643b":"markdown","8bc9c784":"markdown","814c379f":"markdown","951e765c":"markdown","18d98b6d":"markdown","250458c0":"markdown","6e6cce37":"markdown","e98356e2":"markdown","f5c1a0c1":"markdown","8bfe3fac":"markdown","066bbac2":"markdown"},"source":{"868588a7":"import pandas as pd\nimport numpy as np\nimport plotly.graph_objs as go\nfrom plotly.offline import iplot,init_notebook_mode \nfrom plotly.tools import make_subplots\nfrom lightgbm.sklearn import LGBMRegressor\nfrom sklearn.metrics import cohen_kappa_score\nfrom sklearn.model_selection import StratifiedKFold, train_test_split","4bd3461e":"pd.options.display.max_columns = 100","96f66b89":"init_notebook_mode(connected=True)","effb13e0":"train_data  = pd.read_csv(\"..\/input\/train\/train.csv\")","aa765f52":"test_data = pd.read_csv(\"..\/input\/test\/test.csv\")","6e489c91":"breed_labels = pd.read_csv(\"..\/input\/breed_labels.csv\")","d7ff32b0":"breed_names = {k:v for k, v in zip(list(breed_labels['BreedID']), list(breed_labels['BreedName']))}","c0d847fe":"breed_types = {k:v for k, v in zip(list(breed_labels['BreedID']), list(breed_labels['Type']))}","0c9dde8e":"breed_names[0] = \"NA\"\nbreed_types[0] = \"NA\"","50de5ed0":"color_labels  = pd.read_csv(\"..\/input\/color_labels.csv\")","f1517ecf":"color_names = {k:v for k, v in zip(list(color_labels['ColorID']), list(color_labels['ColorName']))}","b98e621d":"color_names[0] = \"NA\"","b1f9fe96":"state_labels = pd.read_csv(\"..\/input\/state_labels.csv\")","66b19cc8":"state_names = {k:v for k, v in zip(list(state_labels['StateID']), list(state_labels['StateName']))}","0b46fc87":"train_data.columns","2b3aa51b":"train_data[\"Breed1\"] = train_data[\"Breed1\"].apply(lambda x: breed_names[x])\ntrain_data[\"Breed2\"] = train_data[\"Breed2\"].apply(lambda x: breed_names[x])","4c3dd9df":"test_data[\"Breed1\"] = test_data[\"Breed1\"].apply(lambda x: breed_names[x])\ntest_data[\"Breed2\"] = test_data[\"Breed2\"].apply(lambda x: breed_names[x])","a50f7de2":"train_data[\"Color1\"] = train_data[\"Color1\"].apply(lambda x: color_names[x])\ntrain_data[\"Color2\"] = train_data[\"Color2\"].apply(lambda x: color_names[x])\ntrain_data[\"Color3\"] = train_data[\"Color3\"].apply(lambda x: color_names[x])","a8b83f07":"test_data[\"Color1\"] = test_data[\"Color1\"].apply(lambda x: color_names[x])\ntest_data[\"Color2\"] = test_data[\"Color2\"].apply(lambda x: color_names[x])\ntest_data[\"Color3\"] = test_data[\"Color3\"].apply(lambda x: color_names[x])","74b2f4ba":"train_data[\"State\"] = train_data[\"State\"].apply(lambda x: state_names[x])","48859bf3":"test_data[\"State\"] = test_data[\"State\"].apply(lambda x: state_names[x])","800a2912":"train_data[\"Type\"] = train_data[\"Type\"].apply(lambda x: \"Dog\" if x==1 else \"Cat\")","de2b2819":"test_data[\"Type\"] = test_data[\"Type\"].apply(lambda x: \"Dog\" if x==1 else \"Cat\")","9b997389":"yes_no_dict = {1: \"Yes\", 2: \"No\", 3: \"Not Sure\"}\ntrain_data[\"Vaccinated\"] = train_data[\"Vaccinated\"].apply(lambda x: yes_no_dict[x])\ntrain_data[\"Dewormed\"] = train_data[\"Dewormed\"].apply(lambda x: yes_no_dict[x])\ntrain_data[\"Sterilized\"] = train_data[\"Sterilized\"].apply(lambda x: yes_no_dict[x])","6f707941":"test_data[\"Vaccinated\"] = test_data[\"Vaccinated\"].apply(lambda x: yes_no_dict[x])\ntest_data[\"Dewormed\"] = test_data[\"Dewormed\"].apply(lambda x: yes_no_dict[x])\ntest_data[\"Sterilized\"] = test_data[\"Sterilized\"].apply(lambda x: yes_no_dict[x])","ae4c5c58":"gender_dict = {1: \"Male\", 2: \"Female\", 3: \"Mixed\"}\ntrain_data[\"Gender\"] = train_data[\"Gender\"].apply(lambda x: gender_dict[x])","a594a71b":"test_data[\"Gender\"] = test_data[\"Gender\"].apply(lambda x: gender_dict[x])","7b2c66f6":"health_dict = {1 : \"Healthy\", 2 : \"Minor Injury\", 3 : \"Serious Injury\", 0 : \"Not Specified\"}\ntrain_data[\"Health\"] = train_data[\"Health\"].apply(lambda x: health_dict[x])","314b8bfa":"test_data[\"Health\"] = test_data[\"Health\"].apply(lambda x: health_dict[x])","81f82fe6":"size_dict = {1 : \"Small\", 2 : \"Medium\", 3 : \"Large\", 4 : \"Extra Large\", 0 : \"Not Specified\"}\ntrain_data[\"MaturitySize\"] = train_data[\"MaturitySize\"].apply(lambda x: size_dict[x])","36d7c8e7":"test_data[\"MaturitySize\"] = test_data[\"MaturitySize\"].apply(lambda x: size_dict[x])","e67a3caa":"fur_dict =  {1 : \"Short\", 2 : \"Medium\", 3 : \"Long\", 0 : \"Not Specified\"}\ntrain_data[\"FurLength\"] = train_data[\"FurLength\"].apply(lambda x: fur_dict[x])","14123067":"test_data[\"FurLength\"] = test_data[\"FurLength\"].apply(lambda x: fur_dict[x])","182c7eab":"pd.DataFrame({\"Columns Name\": list(train_data.columns),\n              \"Number of unique values (train)\": [train_data[c].unique().shape[0] for c in train_data.columns], \n              \"Number of unique values (test)\": \n              [0 if c==\"AdoptionSpeed\" else test_data[c].unique().shape[0] for c in train_data.columns]})","12dee572":"counts = dict(train_data[\"Type\"].value_counts())\ntrace_train = go.Bar(x=list(counts.keys()), y=list(counts.values()), name=\"Training Data\")\n\ncounts = dict(test_data[\"Type\"].value_counts())\ntrace_test = go.Bar(x=list(counts.keys()), y=list(counts.values()), name=\"Testing Data\")\n\nfig  = make_subplots(rows=1, cols=2)\n\nfig.append_trace(trace_train, 1, 1)\nfig.append_trace(trace_test, 1, 2)\n\nfig[\"layout\"].update(title=\"Number of Pets by Type\")\niplot(fig)","bd11eb88":"trace_train = go.Histogram(x=list(train_data.loc[train_data[\"Age\"] < train_data[\"Age\"].mean()+3*train_data[\"Age\"].std(), \"Age\"]), \n                           opacity=0.75,\n                           xbins=dict(size=1),\n                           name=\"Training Data\")\ntrace_test = go.Histogram(x=list(test_data.loc[test_data[\"Age\"] < test_data[\"Age\"].mean()+3*test_data[\"Age\"].std(), \"Age\"]), \n                          opacity=0.75,\n                          xbins=dict(size=1),\n                          name=\"Testing Data\")\n\nlayout = go.Layout(title=\"Number of pets by Age\", barmode=\"overlay\", xaxis=dict(title=\"Age (Months)\"))\n\nfig = go.Figure(data=[trace_train, trace_test], layout=layout)\n\niplot(fig)","d1afac33":"VALUE_THRESHOLD = 10","7c5665f5":"counts = dict(train_data[\"Breed1\"].value_counts())\ncounts = {k[:15]:v for k,v in counts.items() if v>=3*VALUE_THRESHOLD}\ntrace_train = go.Bar(x=list(counts.keys()), y=list(counts.values()), name=\"Training Data\")\n\ncounts = dict(test_data[\"Breed1\"].value_counts())\ncounts = {k[:15]:v for k,v in counts.items() if v>=VALUE_THRESHOLD}\ntrace_test = go.Bar(x=list(counts.keys()), y=list(counts.values()), name=\"Testing Data\")\n\nfig  = make_subplots(rows=2, cols=1, vertical_spacing = 0.2)\n\nfig.append_trace(trace_train, 1, 1)\nfig.append_trace(trace_test, 2, 1)\n\nfig[\"layout\"].update(title=\"Number of Pets by Breed 1\", height=800, margin=go.layout.Margin(b=150))\niplot(fig)","7fa9019d":"counts = dict(train_data[\"Breed2\"].value_counts())\ncounts = {k[:15]:v for k,v in counts.items() if v>=3*VALUE_THRESHOLD}\ntrace_train = go.Bar(x=list(counts.keys()), y=list(counts.values()), name=\"Training Data\")\n\ncounts = dict(test_data[\"Breed2\"].value_counts())\ncounts = {k[:15]:v for k,v in counts.items() if v>=VALUE_THRESHOLD}\ntrace_test = go.Bar(x=list(counts.keys()), y=list(counts.values()), name=\"Testing Data\")\n\nfig  = make_subplots(rows=2, cols=1)\n\nfig.append_trace(trace_train, 1, 1)\nfig.append_trace(trace_test, 2, 1)\n\nfig[\"layout\"].update(title=\"Number of Pets by Breed 2\", height=800)\niplot(fig)","b8df613c":"counts = dict(train_data[\"Color1\"].value_counts())\ntrace_train = go.Bar(x=list(counts.keys()), y=list(counts.values()), name=\"Training Data\")\n\ncounts = dict(test_data[\"Color1\"].value_counts())\ntrace_test = go.Bar(x=list(counts.keys()), y=list(counts.values()), name=\"Testing Data\")\n\nfig  = make_subplots(rows=2, cols=1)\n\nfig.append_trace(trace_train, 1, 1)\nfig.append_trace(trace_test, 2, 1)\n\nfig[\"layout\"].update(title=\"Number of Pets by color 1\", height=800)\niplot(fig)","8db69039":"counts = dict(train_data[\"Color2\"].value_counts())\ntrace_train = go.Bar(x=list(counts.keys()), y=list(counts.values()), name=\"Training Data\")\n\ncounts = dict(test_data[\"Color2\"].value_counts())\ntrace_test = go.Bar(x=list(counts.keys()), y=list(counts.values()), name=\"Testing Data\")\n\nfig  = make_subplots(rows=2, cols=1)\n\nfig.append_trace(trace_train, 1, 1)\nfig.append_trace(trace_test, 2, 1)\n\nfig[\"layout\"].update(title=\"Number of Pets by color 2\", height=800)\niplot(fig)","815ab309":"counts = dict(train_data[\"Color3\"].value_counts())\ntrace_train = go.Bar(x=list(counts.keys()), y=list(counts.values()), name=\"Training Data\")\n\ncounts = dict(test_data[\"Color3\"].value_counts())\ntrace_test = go.Bar(x=list(counts.keys()), y=list(counts.values()), name=\"Testing Data\")\n\nfig  = make_subplots(rows=2, cols=1)\n\nfig.append_trace(trace_train, 1, 1)\nfig.append_trace(trace_test, 2, 1)\n\nfig[\"layout\"].update(title=\"Number of Pets by color 3\", height=800)\niplot(fig)","3db3d24c":"counts = dict(train_data[\"MaturitySize\"].value_counts())\ntrace_train = go.Bar(x=list(counts.keys()), y=list(counts.values()), name=\"Training Data\")\n\ncounts = dict(test_data[\"MaturitySize\"].value_counts())\ntrace_test = go.Bar(x=list(counts.keys()), y=list(counts.values()), name=\"Testing Data\")\n\nfig  = make_subplots(rows=1, cols=2)\n\nfig.append_trace(trace_train, 1, 1)\nfig.append_trace(trace_test, 1, 2)\n\nfig[\"layout\"].update(title=\"Number of Pets by Size\", height=600)\niplot(fig)","f0b706f0":"counts = dict(train_data[\"FurLength\"].value_counts())\ntrace_train = go.Bar(x=list(counts.keys()), y=list(counts.values()), name=\"Training Data\")\n\ncounts = dict(test_data[\"FurLength\"].value_counts())\ntrace_test = go.Bar(x=list(counts.keys()), y=list(counts.values()), name=\"Testing Data\")\n\nfig  = make_subplots(rows=1, cols=2)\n\nfig.append_trace(trace_train, 1, 1)\nfig.append_trace(trace_test, 1, 2)\n\nfig[\"layout\"].update(title=\"Number of Pets by Fur Length\", height=600)\niplot(fig)","a8cae00a":"counts = dict(train_data[\"Vaccinated\"].value_counts())\ntrace_train = go.Bar(x=list(counts.keys()), y=list(counts.values()), name=\"Training Data\")\n\ncounts = dict(test_data[\"Vaccinated\"].value_counts())\ntrace_test = go.Bar(x=list(counts.keys()), y=list(counts.values()), name=\"Testing Data\")\n\nfig  = make_subplots(rows=1, cols=2)\n\nfig.append_trace(trace_train, 1, 1)\nfig.append_trace(trace_test, 1, 2)\n\nfig[\"layout\"].update(title=\"Number of Pets by Vaccination\", height=600)\niplot(fig)","0ebb1566":"counts = dict(train_data[\"Dewormed\"].value_counts())\ntrace_train = go.Bar(x=list(counts.keys()), y=list(counts.values()), name=\"Training Data\")\n\ncounts = dict(test_data[\"Dewormed\"].value_counts())\ntrace_test = go.Bar(x=list(counts.keys()), y=list(counts.values()), name=\"Testing Data\")\n\nfig  = make_subplots(rows=1, cols=2)\n\nfig.append_trace(trace_train, 1, 1)\nfig.append_trace(trace_test, 1, 2)\n\nfig[\"layout\"].update(title=\"Number of Pets by Deworming\", height=600)\niplot(fig)","6221a868":"counts = dict(train_data[\"Health\"].value_counts())\ntrace_train = go.Bar(x=list(counts.keys()), y=list(counts.values()), name=\"Training Data\")\n\ncounts = dict(test_data[\"Health\"].value_counts())\ntrace_test = go.Bar(x=list(counts.keys()), y=list(counts.values()), name=\"Testing Data\")\n\nfig  = make_subplots(rows=1, cols=2)\n\nfig.append_trace(trace_train, 1, 1)\nfig.append_trace(trace_test, 1, 2)\n\nfig[\"layout\"].update(title=\"Number of Pets by Health\", height=600)\niplot(fig)","d0a273b7":"counts = dict(train_data[\"State\"].value_counts())\ntrace_train = go.Bar(x=list(counts.keys()), y=list(counts.values()), name=\"Training Data\")\n\ncounts = dict(test_data[\"State\"].value_counts())\ntrace_test = go.Bar(x=list(counts.keys()), y=list(counts.values()), name=\"Testing Data\")\n\nfig  = make_subplots(rows=2, cols=1)\n\nfig.append_trace(trace_train, 1, 1)\nfig.append_trace(trace_test, 2, 1)\n\nfig[\"layout\"].update(title=\"Number of Pets by State\", height=800)\niplot(fig)","d59ccdaa":"counts = {\"No Fees (Zero)\": (train_data[\"Fee\"]==0).sum(), \"With Fees (Non-Zero)\":  (train_data[\"Fee\"]!=0).sum()}\ntrace_train = go.Bar(x=list(counts.keys()), y=list(counts.values()), name=\"Training Data\")\n\ncounts = {\"No Fees (Zero)\": (test_data[\"Fee\"]==0).sum(), \"With Fees (Non-Zero)\":  (test_data[\"Fee\"]!=0).sum()}\n\ntrace_test = go.Bar(x=list(counts.keys()), y=list(counts.values()), name=\"Testing Data\")\n\nfig  = make_subplots(rows=1, cols=2)\n\nfig.append_trace(trace_train, 1, 1)\nfig.append_trace(trace_test, 1, 2)\n\nfig[\"layout\"].update(title=\"Number of Pets by Fees\", height=600)\niplot(fig)","6065e7ef":"trace_train = go.Histogram(x=list(train_data.loc[(train_data[\"Fee\"] < (train_data[\"Fee\"].mean() + 3*train_data[\"Fee\"].std())) \n                                    & (train_data[\"Fee\"] > 0) , \"Fee\"]), \n                           xbins=dict(size=10),\n                           opacity=0.75, \n                           name=\"Training Data\")\ntrace_test = go.Histogram(x=list(test_data.loc[(test_data[\"Fee\"] < (test_data[\"Fee\"].mean() + 3*test_data[\"Fee\"].std())) \n                                    & (test_data[\"Fee\"] > 0) , \"Fee\"]),\n                          xbins=dict(size=10),\n                          opacity=0.75, \n                          name=\"Testing Data\")\n\nlayout = go.Layout(title=\"Number of pets by Fee (Non-Zero)\", barmode=\"overlay\", xaxis=dict(title=\"Fees\"))\n\nfig = go.Figure(data=[trace_train, trace_test], layout=layout)\n\niplot(fig)","04453102":"counts = dict(train_data[\"VideoAmt\"].value_counts())\ntrace_train = go.Bar(x=list(counts.keys()), y=list(counts.values()), name=\"Training Data\")\n\ncounts = dict(test_data[\"VideoAmt\"].value_counts())\ntrace_test = go.Bar(x=list(counts.keys()), y=list(counts.values()), name=\"Testing Data\")\n\nfig  = make_subplots(rows=2, cols=1)\n\nfig.append_trace(trace_train, 1, 1)\nfig.append_trace(trace_test, 2, 1)\n\nfig[\"layout\"].update(title=\"Number of Pets by Videos\", height=800)\niplot(fig)","b294e730":"counts = dict(train_data[\"PhotoAmt\"].value_counts())\ntrace_train = go.Bar(x=list(counts.keys()), \n                           y=list(counts.values()), \n                           name=\"Training Data\")\n\ncounts = dict(test_data[\"PhotoAmt\"].value_counts())\ntrace_test = go.Bar(x=list(counts.keys()), \n                          y=list(counts.values()), \n                          name=\"Testing Data\")\n\nfig  = make_subplots(rows=2, cols=1)\n\nfig.append_trace(trace_train, 1, 1)\nfig.append_trace(trace_test, 2, 1)\n\nfig[\"layout\"].update(title=\"Number of Pets by Photos\", height=800)\niplot(fig)","7f1464dd":"train_data.loc[train_data[\"Description\"].isnull(), \"Description\"] = \"\"\ntrain_data[\"Descrpition_Length\"]  = train_data[\"Description\"].apply(lambda s: len(s))","01ef0d71":"test_data.loc[test_data[\"Description\"].isnull(), \"Description\"] = \"\"\ntest_data[\"Descrpition_Length\"]  = test_data[\"Description\"].apply(lambda s: len(s))","8bebbdf9":"trace_train = go.Histogram(x=list(train_data.loc[train_data[\"Descrpition_Length\"] < train_data[\"Descrpition_Length\"].mean()+3*train_data[\"Descrpition_Length\"].std(), \"Descrpition_Length\"]), \n                           opacity=0.75,\n                           xbins=dict(size=50),\n                           name=\"Training Data\")\ntrace_test = go.Histogram(x=list(test_data.loc[test_data[\"Descrpition_Length\"] < test_data[\"Descrpition_Length\"].mean()+3*test_data[\"Descrpition_Length\"].std(), \"Descrpition_Length\"]), \n                          opacity=0.75,\n                          xbins=dict(size=50),\n                          name=\"Testing Data\")\n\nlayout = go.Layout(title=\"Number of pets by Decription Length\", barmode=\"overlay\", xaxis=dict(title=\"Length in Characters\"))\n\nfig = go.Figure(data=[trace_train, trace_test], layout=layout)\n\niplot(fig)","125e167a":"counts = dict(train_data[\"AdoptionSpeed\"].value_counts())\ntrace_train = go.Bar(x=list(counts.keys()), y=list(counts.values()), name=\"Training Data\")\n\nlayout = go.Layout(title=\"Number of Pets by Adoption Speed\")\n\nfig = go.Figure(data=[trace_train], layout=layout)\n\niplot(fig)","e7acb607":"train_data = pd.read_csv(\"..\/input\/train\/train.csv\")","52ce4254":"train_data","60c93ec3":"FOLDS = 5","850d1f40":"catagorical_features = [\"Type\", \"Breed1\", \"Breed2\", \"Color1\", \"Color2\", \"Color3\", \"MaturitySize\", \"FurLength\", \"Vaccinated\", \"Dewormed\", \"Sterilized\", \"Health\", \"State\"]","b5bfde84":"non_features  = [\"Name\", \"Description\", \"PetID\", \"RescuerID\"]","e4671d1e":"label = \"AdoptionSpeed\"","4aad1293":"kfold = StratifiedKFold(n_splits=5, random_state=22)","a05b21fb":"train_data[\"DescriptionLength\"] = train_data[\"Description\"].apply(lambda s: len(s) if isinstance(s, str) else 0)","5b6a08ce":"features = [c for c in train_data.columns if c not in set(non_features+[label])]; features","8cc3eda0":"def clip(x):\n    if x < 0:\n        return 0\n    if x > 4:\n        return 4\n    return x","e60f04b3":"vclip = np.vectorize(clip)","2e9672f5":"models = []\npredictions = []\nids = []\nresult= []\nfor train_indices, val_indices in kfold.split(X=np.arange(train_data.shape[0]), y=train_data[\"AdoptionSpeed\"]):\n    ids.append(train_data.iloc[train_indices][\"PetID\"])\n    model = LGBMRegressor(colsample_bytree=0.9, subsample=0.9, n_estimators=1000, random_state=22, silent=True)\n    model.fit(X=train_data.iloc[train_indices][features], y=train_data.iloc[train_indices][label], categorical_feature=catagorical_features, \n             eval_set=(train_data.iloc[val_indices][features], train_data.iloc[val_indices][label]), early_stopping_rounds=10)\n    pred = np.round(model.predict(train_data.iloc[val_indices][features]))\n    pred = vclip(pred)\n    kappa = cohen_kappa_score(y1=pred, y2=np.array(train_data.iloc[val_indices][label]), weights=\"quadratic\")\n    print(\"Kappa score is \", kappa)\n    predictions.append(pred)\n    result.append(kappa)\n    models.append(model)","dd83d8b1":"np.mean(kappa)","0c9a2f2c":"trace = go.Bar(x=features, y=list(np.mean([models[i].feature_importances_ for i in range(FOLDS)], axis=0)), name=\"Training Data\")\n\nlayout = go.Layout(title=\"Feature Importance\")\n\nfig = go.Figure(data=[trace], layout=layout)\n\niplot(fig)","207ad6e9":"iterations = np.mean([models[i].best_iteration_ for i in range(FOLDS)]); [models[i].best_iteration_ for i in range(FOLDS)]","eb284c30":"test_data = pd.read_csv(\"..\/input\/test\/test.csv\")","83e80960":"test_data[\"DescriptionLength\"] = test_data[\"Description\"].apply(lambda s: len(s) if isinstance(s, str) else 0)","d92ad530":"predictions  = []\nfor i in range(FOLDS):\n    pred = np.round(models[i].predict(test_data[features]))\n    pred = vclip(pred)\n    predictions.append(pred)","898c24d6":"predictions = np.array(predictions, dtype=np.int64)","8fd7e360":"predictions[:, 0]","392264f3":"final_pred = []\nfor i in range(predictions.shape[1]):\n    final_pred.append(np.argmax(np.bincount(predictions[:, i])))","7cd1d288":"submission = pd.DataFrame({\"PetID\": list(test_data[\"PetID\"]), \"AdoptionSpeed\": final_pred})","23f1dd83":"submission.to_csv(\"submission.csv\", index=None)","2a56f0be":"**Insight:** Mixed breed is most populous. Even the second and third _Domestic Short Hair_ and _Domestic Medium Hair_ looks more like some kind of mix breed and not pure breed. This data might be more subjective than expected. Categories with less that _VALUE_THRESHOLD_ number are not shown, for better visualization.","cedca294":"### Unique values for each columns","96e06f16":"We will represent the categorical fields with the category name instaed of a number, for better readability ","e4f18f2a":"**Insight:** A lot of pets are not vaccinated. This might reduce their chances of adoption, as the adopter has to do that expense.","b3c6c7ff":"**Insight:** Medium and small pets are dominant.","97b2f5c3":"**Insight:** Number of cats are higher in test data. If this field turns out to be important, it may be an issue. Keep in mind that this field affects other imporant fields too, like age, as cats and dogs grow at different speed and have different life span.","2cd81ac4":"**Insight:** Here it makes sense to have another field as pets, especially mix breeds will have multiple shades.","cd8a16ae":"**Insight:** Fees are generally in multiple of 50. Outliers are removed for better visualization.","be1e4acf":"**Insight:** Will this be a factor? May be one region is more pet friendly compared to another. We can only know with feature imporance later in this notebook.","aca7ce0b":"**Insight:** Most of the pets are less than a year old, with 1 and 2 months being the most populated. For older pets most converted from year and are multiple of 12, instead of actual age in month. Outliers are removed.","9b8a45d4":"### LightGBM and Feature Importance ","ecb9fd64":"**Insight:** Most pets have 1 to 5 photos.","e365ad25":"**Insight:** Third color seems somewhat unnecessary.","d011f61a":"**Insight:** Pets with minor injuries can have reduced chance of adoption. Seriously injured pets are very rare and can be ignored.","7d12643b":"**Insight:** Deworming is more common, however the same logic applies here.","8bc9c784":"**Insight:** Most pets does not have a video.","814c379f":"Number of unique values for each columns, including numerical ones.","951e765c":"### Analysis of Individual Columns","18d98b6d":"### Columns Description\n- PetID - Unique hash ID of pet profile\n- AdoptionSpeed - Categorical speed of adoption. Lower is faster. This is the value to predict.\n- Type - Type of animal (1 = Dog, 2 = Cat)\n- Name - Name of pet (Empty if not named)\n- Age - Age of pet when listed, in months\n- Breed1 - Primary breed of pet (Refer to BreedLabels dictionary)\n- Breed2 - Secondary breed of pet, if pet is of mixed breed (Refer to BreedLabels dictionary)\n- Gender - Gender of pet (1 = Male, 2 = Female, 3 = Mixed, if profile represents group of pets)\n- Color1 - Color 1 of pet (Refer to ColorLabels dictionary)\n- Color2 - Color 2 of pet (Refer to ColorLabels dictionary)\n- Color3 - Color 3 of pet (Refer to ColorLabels dictionary)\n- MaturitySize - Size at maturity (1 = Small, 2 = Medium, 3 = Large, 4 = Extra Large, 0 = Not Specified)\n- FurLength - Fur length (1 = Short, 2 = Medium, 3 = Long, 0 = Not Specified)\n- Vaccinated - Pet has been vaccinated (1 = Yes, 2 = No, 3 = Not Sure)\n- Dewormed - Pet has been dewormed (1 = Yes, 2 = No, 3 = Not Sure)\n- Sterilized - Pet has been spayed \/ neutered (1 = Yes, 2 = No, 3 = Not Sure)\n- Health - Health Condition (1 = Healthy, 2 = Minor Injury, 3 = Serious Injury, 0 = Not Specified)\n- Quantity - Number of pets represented in profile\n- Fee - Adoption fee (0 = Free)\n- State - State location in Malaysia (Refer to StateLabels dictionary)\n- RescuerID - Unique hash ID of rescuer\n- VideoAmt - Total uploaded videos for this pet\n- PhotoAmt - Total uploaded photos for this pet\n- Description - Profile write-up for this pet. The primary language used is English, with some in Malay or Chinese.","250458c0":"**Insight:** Most pets have no second breed available. This field should not be too important. Too me it seems that when they can decide in which category a perticular animal belongs, they put both.","6e6cce37":"**Insight:** Majority are free adoption, without any fees. However, the one with fees might be more desirable\/ vaccinated etc.","e98356e2":"**Insight:** Most pets have description in the range of 0-300 words with the middle section most populated. This is short description comparable to a tweet. Outliers are removed.","f5c1a0c1":"## PetFinder.my Adoption Prediction\n\nIn this competition you will predict the speed at which a pet is adopted, based on the pet\u2019s listing on PetFinder. Sometimes a profile represents a group of pets.","8bfe3fac":"**Insight:** Black is most popular color, followed by Brown.","066bbac2":"It's of paramount importance to see the ditribution of values for each column and we will do that analysis in this section. We will generally use bar chart for categorical features and histigram for numerical features. For numerical features outlier above and below 3 standard deviation of mean are removed. For categorical for some fields, category with very few examples are not shown."}}