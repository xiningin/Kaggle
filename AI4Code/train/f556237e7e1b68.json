{"cell_type":{"0f742385":"code","156db877":"code","82dfc5ee":"code","f1c2fd3f":"code","2913b62c":"code","bcb4f39a":"code","7d38918b":"code","d8199a30":"markdown","17815b6e":"markdown","86b29a04":"markdown","58633b62":"markdown","d2bf70c4":"markdown"},"source":{"0f742385":"# \u30e9\u30a4\u30d6\u30e9\u30ea\u8aad\u307f\u8fbc\u307f\nimport numpy as np\nimport sklearn.metrics","156db877":"# LwLRAP\u8a08\u7b97\u95a2\u6570\n# from official code https:\/\/colab.research.google.com\/drive\/1AgPdhSp7ttY18O3fEoHOQKlt_3HJDLi8#scrollTo=cRCaCIb9oguU\ndef _one_sample_positive_class_precisions(scores, truth):\n    \"\"\"Calculate precisions for each true class for a single sample.\n\n    Args:\n      scores: np.array of (num_classes,) giving the individual classifier scores.\n      truth: np.array of (num_classes,) bools indicating which classes are true.\n\n    Returns:\n      pos_class_indices: np.array of indices of the true classes for this sample.\n      pos_class_precisions: np.array of precisions corresponding to each of those\n        classes.\n    \"\"\"\n    num_classes = scores.shape[0]\n    pos_class_indices = np.flatnonzero(truth > 0)\n    # Only calculate precisions if there are some true classes.\n    if not len(pos_class_indices):\n        return pos_class_indices, np.zeros(0)\n    # Retrieval list of classes for this sample.\n    retrieved_classes = np.argsort(scores)[::-1]\n    # class_rankings[top_scoring_class_index] == 0 etc.\n    class_rankings = np.zeros(num_classes, dtype=np.int)\n    class_rankings[retrieved_classes] = range(num_classes)\n    # Which of these is a true label?\n    retrieved_class_true = np.zeros(num_classes, dtype=np.bool)\n    retrieved_class_true[class_rankings[pos_class_indices]] = True\n    # Num hits for every truncated retrieval list.\n    retrieved_cumulative_hits = np.cumsum(retrieved_class_true)\n    # Precision of retrieval list truncated at each hit, in order of pos_labels.\n    precision_at_hits = (\n            retrieved_cumulative_hits[class_rankings[pos_class_indices]] \/\n            (1 + class_rankings[pos_class_indices].astype(np.float)))\n    return pos_class_indices, precision_at_hits\n\n\ndef calculate_per_class_lwlrap(truth, scores):\n    \"\"\"Calculate label-weighted label-ranking average precision.\n\n    Arguments:\n      truth: np.array of (num_samples, num_classes) giving boolean ground-truth\n        of presence of that class in that sample.\n      scores: np.array of (num_samples, num_classes) giving the classifier-under-\n        test's real-valued score for each class for each sample.\n\n    Returns:\n      per_class_lwlrap: np.array of (num_classes,) giving the lwlrap for each\n        class.\n      weight_per_class: np.array of (num_classes,) giving the prior of each\n        class within the truth labels.  Then the overall unbalanced lwlrap is\n        simply np.sum(per_class_lwlrap * weight_per_class)\n    \"\"\"\n    assert truth.shape == scores.shape\n    num_samples, num_classes = scores.shape\n    # Space to store a distinct precision value for each class on each sample.\n    # Only the classes that are true for each sample will be filled in.\n    precisions_for_samples_by_classes = np.zeros((num_samples, num_classes))\n    for sample_num in range(num_samples):\n        pos_class_indices, precision_at_hits = (\n            _one_sample_positive_class_precisions(scores[sample_num, :],\n                                                  truth[sample_num, :]))\n        precisions_for_samples_by_classes[sample_num, pos_class_indices] = (\n            precision_at_hits)\n    labels_per_class = np.sum(truth > 0, axis=0)\n    weight_per_class = labels_per_class \/ float(np.sum(labels_per_class))\n    # Form average of each column, i.e. all the precisions assigned to labels in\n    # a particular class.\n    per_class_lwlrap = (np.sum(precisions_for_samples_by_classes, axis=0) \/\n                        np.maximum(1, labels_per_class))\n    # overall_lwlrap = simple average of all the actual per-class, per-sample precisions\n    #                = np.sum(precisions_for_samples_by_classes) \/ np.sum(precisions_for_samples_by_classes > 0)\n    #           also = weighted mean of per-class lwlraps, weighted by class label prior across samples\n    #                = np.sum(per_class_lwlrap * weight_per_class)\n    return per_class_lwlrap, weight_per_class\n","82dfc5ee":"# \u5b9f\u969b\u306b\u8a08\u7b97\u3057\u3066\u307f\u308b\u3002\ny_true = np.array([1, 0, 0,])\ny_score = np.array([0.7, 0.1, 0.2])\npos_class_indices, precision_at_hits = _one_sample_positive_class_precisions(y_score, y_true)\nprint(\"\u6b63\u89e3\u30e9\u30d9\u30eb\", pos_class_indices)\nprint(\"\u30b9\u30b3\u30a2\", precision_at_hits)","f1c2fd3f":"# \u5b9f\u969b\u306b\u8a08\u7b97\u3057\u3066\u307f\u308b\u3002\ny_true = np.array([1, 0, 0,])\ny_score = np.array([0.1, 0.7, 0.2])\npos_class_indices, precision_at_hits = _one_sample_positive_class_precisions(y_score, y_true)\nprint(\"\u6b63\u89e3\u30e9\u30d9\u30eb\", pos_class_indices)\nprint(\"\u30b9\u30b3\u30a2\", precision_at_hits)","2913b62c":"# \u5b9f\u969b\u306b\u8a08\u7b97\u3057\u3066\u307f\u308b\u3002\ny_true = np.array([1, 0, 1,])\ny_score = np.array([0.7, 0.1, 0.2])\npos_class_indices, precision_at_hits = _one_sample_positive_class_precisions(y_score, y_true)\nprint(\"\u6b63\u89e3\u30e9\u30d9\u30eb\", pos_class_indices)\nprint(\"\u30b9\u30b3\u30a2\", precision_at_hits)","bcb4f39a":"# \u5b9f\u969b\u306b\u8a08\u7b97\u3057\u3066\u307f\u308b\u3002\ny_true = np.array([1, 0, 1,])\ny_score = np.array([0.1, 0.7, 0.2])\npos_class_indices, precision_at_hits = _one_sample_positive_class_precisions(y_score, y_true)\nprint(\"\u6b63\u89e3\u30e9\u30d9\u30eb\", pos_class_indices)\nprint(\"\u30b9\u30b3\u30a2\", precision_at_hits)","7d38918b":"# \u5b9f\u969b\u306b\u8a08\u7b97\u3057\u3066\u307f\u308b\u3002\ny_true = np.array([[1, 0, 1,], [0, 1, 1]])\ny_score = np.array([[0.1, 0.7, 0.2], [0.1, 0.7, 0.2]])\n_, precision_at_hits1 = _one_sample_positive_class_precisions(y_score[0], y_true[0])\nprint(\"sample 1 \u306e\u30b9\u30b3\u30a2\", precision_at_hits1)\n_, precision_at_hits2 = _one_sample_positive_class_precisions(y_score[1], y_true[1])\nprint(\"sample 2 \u306e\u30b9\u30b3\u30a2\", precision_at_hits2)\nscore, weight = calculate_per_class_lwlrap(y_true, y_score)\nprint(\"\u5404\u30af\u30e9\u30b9\u306e\u30b9\u30b3\u30a2\", score)\nprint(\"\u5404\u30af\u30e9\u30b9\u306e\u91cd\u307f\", weight)\nLwLRAP = (score*weight).sum()\nprint(\"LwLRAP\", LwLRAP)","d8199a30":"# \u5168\u30b5\u30f3\u30d7\u30eb\u306b\u5bfe\u3059\u308b\u8a08\u7b97\n\u30b5\u30f3\u30d7\u30eb 1:  \u6b63\u89e3\u30e9\u30d9\u30eb = A,C \u4e88\u6e2c = (A: 0.1, B: 0.7, 0.2)  \n\u30b5\u30f3\u30d7\u30eb 2:  \u6b63\u89e3\u30e9\u30d9\u30eb = B,C \u4e88\u6e2c = (A: 0.1, B: 0.7, 0.2)  \n\u306e\u5834\u5408\u3092\u8003\u3048\u308b\u3002  \n\u307e\u305a\u30af\u30e9\u30b9\u3054\u3068\u306e\u30b9\u30b3\u30a2\u3092\u8a08\u7b97\u3059\u308b\u3002  \nScore = \u3042\u308b\u30af\u30e9\u30b9\u306b\u5bfe\u3059\u308bscore\u306e\u5408\u8a08\/\u3042\u308b\u30af\u30e9\u30b9\u306e\u6b63\u89e3\u30e9\u30d9\u30eb\u306e\u6570  \n\u3053\u306e\u5834\u5408\u3001  \n\u30b5\u30f3\u30d7\u30eb1\u306escore= A: 0.6667, C: 0.5  \n\u30b5\u30f3\u30d7\u30eb2\u306escore = B: 1.0, C: 1.0  \n\u306a\u306e\u3067\u3001  \n\u30af\u30e9\u30b9A\u306escore = 0.6667\/1 = 0.6667  \n\u30af\u30e9\u30b9B\u306escore = 1.0\/1 = 1.0  \n\u30af\u30e9\u30b9C\u306escore = (0.5 + 1.0) \/ 2 = 0.75  \n\u3068\u306a\u308b\u3002  \n\u5168\u30af\u30e9\u30b9\u306b\u5bfe\u3059\u308b\u30b9\u30b3\u30a2\u3092\u8a08\u7b97\u3059\u308b\u5834\u5408\u3001\u5404\u30af\u30e9\u30b9\u306e\u30b9\u30b3\u30a2\u3092\u5e73\u5747\u3059\u308b\u3068\u30af\u30e9\u30b9\u3054\u3068\u306e\u6b63\u89e3\u30e9\u30d9\u30eb\u6570\u306e\u504f\u308a\u3092\u8003\u616e\u3057\u306a\u3044\u305f\u3081\u306b\u3001  \n\u51fa\u73fe\u983b\u5ea6\u306e\u9ad8\u3044\u30af\u30e9\u30b9\u306f\u4e00\u3064\u306e\u30e9\u30d9\u30eb\u306e\u6700\u7d42\u30b9\u30b3\u30a2\u3078\u306e\u5f71\u97ff\u304c\u5c0f\u3055\u304f\u306a\u308a\u3001  \n\u51fa\u73fe\u983b\u5ea6\u306e\u4f4e\u3044\u30af\u30e9\u30b9\u306f1\u3064\u306e\u30e9\u30d9\u30eb\u306e\u6700\u7d42\u30b9\u30b3\u30a2\u3078\u306e\u5f71\u97ff\u304c\u5927\u304d\u304f\u306a\u3063\u3066\u3057\u307e\u3046\u3002  \n\u305d\u3053\u3067\u5404\u30af\u30e9\u30b9\u306e\u51fa\u73fe\u6570\u3092\u91cd\u307f\u3068\u3057\u3066\u91cd\u307f\u3064\u304d\u5e73\u5747\u3092\u53d6\u308b\u3002  \n\u6b63\u89e3\u30e9\u30d9\u30eb\u51fa\u73fe\u6570 = (A: 1. B: 1, C:2)  \n\u91cd\u307f = \u6b63\u89e3\u30e9\u30d9\u30eb\u51fa\u73fe\u6570 \/ \u6b63\u89e3\u30e9\u30d9\u30eb\u5408\u8a08\u6570 = (A: 1. B: 2, C:1) \/ 4 = (A: 0.25, B: 0.25. C: 0.5)  \n\u30b9\u30b3\u30a2 = (\u5404\u30af\u30e9\u30b9\u306e\u30b9\u30b3\u30a2 * \u91cd\u307f)\u306e\u5408\u8a08 = A: 0.6667 * 0.25 + B: 1.0 * 0.25 + C: 0.75 * 0.5 = 0.7917  \n\u3053\u308c\u306f\u7d50\u5c40\u3001\u5404\u30e9\u30d9\u30eb\u306b\u5bfe\u3059\u308b\u30b9\u30b3\u30a2\u306e\u5e73\u5747\u306b\u7b49\u3057\u3044\u3002  \n\u5404\u30e9\u30d9\u30eb\u306b\u5bfe\u3059\u308b\u30b9\u30b3\u30a2\u306e\u5e73\u5747 = (0.6667 + 0.5 + 1.0 + 1.0 ) \/ 4 = 0.7917  ","17815b6e":"# 1 sample \u3054\u3068\u306e\u8a08\u7b97  \n### \u6b63\u89e3\u30e9\u30d9\u30eb\u304c1\u3064\u306e\u5834\u5408\u3002  \n\u30af\u30e9\u30b9\u304cA,B,C\u306e3\u7a2e\u985e\u3068\u3059\u308b\u3002  \n\u6b63\u89e3\u30e9\u30d9\u30eb = A, \u4e88\u6e2c = (A: 0.7, B: 0.1, 0.2)\u306e\u5834\u5408\u3092\u4f8b\u3068\u3057\u3066\u8003\u3048\u308b\u3002  \n\u307e\u305a\u4e88\u6e2c\u3092\u30e9\u30f3\u30af\u5316 (\u5024\u306e\u5927\u304d\u3044\u9806\u306b\u6570\u5b57\u3092\u632f\u308b) \u3059\u308b\u3002  \n-> \u4e88\u6e2c = (A: 1, B: 3, C:2)  \nScore = 1\uff5e\u6b63\u89e3\u30e9\u30d9\u30eb\u306e\u30e9\u30f3\u30af\u307e\u3067\u306e\u6b63\u89e3\u6570\/\u6b63\u89e3\u30e9\u30d9\u30eb\u306e\u30e9\u30f3\u30af \u3068\u8a08\u7b97\u3055\u308c\u308b\u3002  \n\u3053\u306e\u5834\u5408\u3001  \n\u6b63\u89e3\u30e9\u30d9\u30eb\u306e\u30e9\u30f3\u30af = 1  \n1\uff5e\u6b63\u89e3\u30e9\u30d9\u30eb\u306e\u30e9\u30f3\u30af\u307e\u3067\u306e\u6b63\u89e3\u6570 = \u30e9\u30f3\u30af1\uff5e1\u307e\u3067\u306e\u6b63\u89e3\u6570 = 1  \n\u306a\u306e\u3067\u3001  \nScore = 1\/1 = 1.0 \u3068\u306a\u308b\u3002","86b29a04":"\u5225\u4f8b  \n\u6b63\u89e3\u30e9\u30d9\u30eb = A, \u4e88\u6e2c = (A: 0.1, B: 0.7, 0.2)\u306e\u5834\u5408\u3002  \n\u30e9\u30f3\u30af\u5316\u4e88\u6e2c = (A: 3, B: 1, C:2)  \n\u6b63\u89e3\u30e9\u30d9\u30eb\u306e\u30e9\u30f3\u30af = 3  \n1\uff5e\u6b63\u89e3\u30e9\u30d9\u30eb\u306e\u30e9\u30f3\u30af\u307e\u3067\u306e\u6b63\u89e3\u6570 = \u30e9\u30f3\u30af1\uff5e3\u307e\u3067\u306e\u6b63\u89e3\u6570 = 1  \n\u306a\u306e\u3067\u3001  \nScore = 1\/3 = 0.33 \u3068\u306a\u308b\u3002","58633b62":"### \u6b63\u89e3\u30e9\u30d9\u30eb\u304c\u8907\u6570\u306e\u5834\u5408\u3002  \n\u30af\u30e9\u30b9\u304cA,B,C\u306e3\u7a2e\u985e\u3068\u3059\u308b\u3002  \n\u6b63\u89e3\u30e9\u30d9\u30eb = A,C \u4e88\u6e2c = (A: 0.7, B: 0.1, 0.2)\u306e\u5834\u5408\u3092\u4f8b\u3068\u3057\u3066\u8003\u3048\u308b\u3002  \nScore\u306f\u6b63\u89e3\u30e9\u30d9\u30eb\u3054\u3068\u306b\u8a08\u7b97\u3055\u308c\u308b\u3002  \n\u307e\u305a\u6b63\u89e3\u30e9\u30d9\u30ebA\u306b\u5bfe\u3059\u308b\u30b9\u30b3\u30a2\u3092\u8a08\u7b97\u3059\u308b\u3068\u3001  \n\u30e9\u30f3\u30af\u5316\u4e88\u6e2c = (A: 1, B: 3, C:2)  \n\u6b63\u89e3\u30e9\u30d9\u30eb\u306e\u30e9\u30f3\u30af = 1  \n1\uff5e\u6b63\u89e3\u30e9\u30d9\u30eb\u306e\u30e9\u30f3\u30af\u307e\u3067\u306e\u6b63\u89e3\u6570 = \u30e9\u30f3\u30af1\uff5e3\u307e\u3067\u306e\u6b63\u89e3\u6570 = 1  \n\u306a\u306e\u3067\u3001  \nScore = 1\/1 = 1.0 \u3068\u306a\u308b\u3002\n\n\u6b21\u306b\u6b63\u89e3\u30e9\u30d9\u30ebC\u306b\u5bfe\u3059\u308b\u30b9\u30b3\u30a2\u3092\u8a08\u7b97\u3059\u308b\u3068\u3001  \n\u30e9\u30f3\u30af\u5316\u4e88\u6e2c = (A: 1, B: 3, C:2)  \n\u6b63\u89e3\u30e9\u30d9\u30eb\u306e\u30e9\u30f3\u30af = 2  \n1\uff5e\u6b63\u89e3\u30e9\u30d9\u30eb\u306e\u30e9\u30f3\u30af\u307e\u3067\u306e\u6b63\u89e3\u6570 = \u30e9\u30f3\u30af1\uff5e2\u307e\u3067\u306e\u6b63\u89e3\u6570 = 2  \n\u306a\u306e\u3067\u3001  \nScore = 2\/2 = 1.0 \u3068\u306a\u308b\u3002","d2bf70c4":"\u5225\u4f8b  \n\n\u6b63\u89e3\u30e9\u30d9\u30eb = A,C \u4e88\u6e2c = (A: 0.1, B: 0.7, 0.2)\u306e\u5834\u5408\u3092\u4f8b\u3068\u3057\u3066\u8003\u3048\u308b\u3002  \nScore\u306f\u6b63\u89e3\u30e9\u30d9\u30eb\u3054\u3068\u306b\u8a08\u7b97\u3055\u308c\u308b\u3002  \n\u307e\u305a\u6b63\u89e3\u30e9\u30d9\u30ebA\u306b\u5bfe\u3059\u308b\u30b9\u30b3\u30a2\u3092\u8a08\u7b97\u3059\u308b\u3068\u3001  \n\u30e9\u30f3\u30af\u5316\u4e88\u6e2c = (A: 3, B: 1, C:2)  \n\u6b63\u89e3\u30e9\u30d9\u30eb\u306e\u30e9\u30f3\u30af = 3  \n1\uff5e\u6b63\u89e3\u30e9\u30d9\u30eb\u306e\u30e9\u30f3\u30af\u307e\u3067\u306e\u6b63\u89e3\u6570 = \u30e9\u30f3\u30af1\uff5e3\u307e\u3067\u306e\u6b63\u89e3\u6570 = 2  \n\u306a\u306e\u3067\u3001  \nScore = 2\/3 = 0.67 \u3068\u306a\u308b\u3002  \n\n\u6b21\u306b\u6b63\u89e3\u30e9\u30d9\u30ebC\u306b\u5bfe\u3059\u308b\u30b9\u30b3\u30a2\u3092\u8a08\u7b97\u3059\u308b\u3068\u3001  \n\u30e9\u30f3\u30af\u5316\u4e88\u6e2c = (A: 1, B: 3, C:2)  \n\u6b63\u89e3\u30e9\u30d9\u30eb\u306e\u30e9\u30f3\u30af = 2  \n1\uff5e\u6b63\u89e3\u30e9\u30d9\u30eb\u306e\u30e9\u30f3\u30af\u307e\u3067\u306e\u6b63\u89e3\u6570 = \u30e9\u30f3\u30af1\uff5e2\u307e\u3067\u306e\u6b63\u89e3\u6570 = 1  \n\u306a\u306e\u3067\u3001  \nScore = 1\/2 = 0.5 \u3068\u306a\u308b\u3002  "}}