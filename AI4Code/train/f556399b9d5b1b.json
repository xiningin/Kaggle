{"cell_type":{"bec9a28d":"code","e2dfa9a6":"code","2aea8ea7":"code","771d0ff2":"code","dd940048":"code","c143bb92":"code","401d41f3":"code","42a1ac61":"code","2bc60212":"code","b9d05203":"code","933030b8":"code","ac3765fc":"code","a9a76323":"code","5e89bb1e":"code","ebdf449c":"code","0b7d42fd":"markdown"},"source":{"bec9a28d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e2dfa9a6":"df = pd.read_csv('\/kaggle\/input\/student-alcohol-consumption\/student-por.csv')\ndf.info()","2aea8ea7":"df.head(3)","771d0ff2":"df.isnull().sum()","dd940048":"df.info()","c143bb92":"object_type_features = df.select_dtypes(\"object\").columns\nobject_type_features","401d41f3":"df.G3.value_counts()","42a1ac61":"'''\nfrom sklearn import preprocessing\nle = preprocessing.LabelEncoder()\n\ndf.school = le.fit_transform(df.school)\ndf.sex = le.fit_transform(df.sex)\ndf.address = le.fit_transform(df.address)\ndf.famsize = le.fit_transform(df.famsize)\ndf.Pstatus = le.fit_transform(df.Pstatus)\ndf.Mjob = le.fit_transform(df.Mjob)\ndf.Fjob = le.fit_transform(df.Fjob)\ndf.reason = le.fit_transform(df.reason)\ndf.guardian = le.fit_transform(df.guardian)\ndf.schoolsup = le.fit_transform(df.schoolsup)\ndf.famsup = le.fit_transform(df.famsup)\ndf.paid = le.fit_transform(df.paid)\ndf.activities = le.fit_transform(df.activities)\ndf.nursery = le.fit_transform(df.nursery)\ndf.higher = le.fit_transform(df.higher)\ndf.internet = le.fit_transform(df.internet)\ndf.romantic = le.fit_transform(df.romantic) \n'''","2bc60212":"from sklearn import preprocessing\nle = preprocessing.LabelEncoder()\n\nfor feat_name in object_type_features: \n    df[feat_name] = le.fit_transform(df[feat_name])","b9d05203":"df.head(2)","933030b8":"X = df.drop(['G3'], axis = 1)\ny = df.G3","ac3765fc":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30)","a9a76323":"from sklearn.metrics import recall_score, precision_score, confusion_matrix\n","5e89bb1e":"from sklearn.linear_model import LogisticRegression\n\nclf = LogisticRegression()\n\nclf.fit(X_train, y_train)\ny_pred = clf.predict(X_test)\nprint(\"Train Score LR-\", clf.score(X_train, y_train)*100 , \"%\")\nprint(\"Test Score LR-\", clf.score(X_test, y_test)*100, \"%\")\nprint(\"Recall score\", recall_score(y_test, y_pred, average='macro'))\nprint(\"Precision score\", precision_score(y_test, y_pred, average='macro'))\nprint (\"CONFUSION MATRIX\", confusion_matrix(y_test, y_pred))","ebdf449c":"from sklearn.tree import DecisionTreeClassifier\nclf_dt = DecisionTreeClassifier()\n\nclf_dt.fit(X_train, y_train)\ny_pred = clf_dt.predict(X_test)\nprint(\"Train Score LR-\", clf_dt.score(X_train, y_train)*100 , \"%\")\nprint(\"Test Score LR-\", clf_dt.score(X_test, y_test)*100, \"%\")\nprint(\"Recall score\", recall_score(y_test, y_pred, average='macro'))\nprint(\"Precision score\", precision_score(y_test, y_pred, average='macro')) \nprint (\"CONFUSION MATRIX\", confusion_matrix(y_test, y_pred))","0b7d42fd":"Decision tree \/ Logistic Regression"}}