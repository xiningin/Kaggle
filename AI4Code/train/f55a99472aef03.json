{"cell_type":{"df6ab2e4":"code","bdc918a4":"code","0f198573":"code","9971b8b9":"code","1e398faf":"code","c8901ad1":"code","c74e0ac7":"code","849e87f6":"code","d8d38066":"code","da13d8c5":"code","cf77667c":"code","9aa01d61":"code","16935b79":"code","48174b1d":"code","66826dad":"code","a93a32e7":"code","60394c9e":"code","b9620915":"code","fca36f29":"code","ea4531d0":"code","cd82492d":"code","edf7dc09":"code","9ef52a91":"code","f0dbb27c":"code","2f5dc177":"code","99a36867":"code","fcda91a7":"code","9bfd62d6":"code","3db95f27":"code","16cfa81c":"code","f215ca0c":"code","d230a27c":"code","b87b2cd4":"code","614bff19":"code","6a31f7d2":"code","51bc404a":"code","681e96b3":"code","8f547621":"code","17eebf92":"code","518efdf6":"code","e9a8adc7":"code","07269a39":"code","9cfc291d":"code","bc3e946f":"code","d49d8c18":"code","08894f8e":"code","d0ea8724":"code","da6bcf9c":"markdown","859022cb":"markdown","bc0d5dd7":"markdown","95c93616":"markdown","18005d54":"markdown","d29f5f08":"markdown","87a6348d":"markdown","8739c5af":"markdown","6be31a75":"markdown","d40c31c7":"markdown","f1bb0e2b":"markdown","eb3a9e32":"markdown","7d2e4a4b":"markdown","feaa15b4":"markdown","b0bf7b54":"markdown"},"source":{"df6ab2e4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","bdc918a4":"df = pd.read_csv(\"..\/input\/deep-learning-az-ann\/Churn_Modelling.csv\")","0f198573":"df.head()","9971b8b9":"#let us list the columns\ndf.columns","1e398faf":"#let us know the data type of each column\ndf.dtypes","c8901ad1":"# let us get the basic statistical description\ndf.describe()","c74e0ac7":"df.info()","849e87f6":"#remove unnecessary columns like row number, surname and customerid\ndf.drop([\"RowNumber\",\"CustomerId\",\"Surname\"], axis=1, inplace=True)","d8d38066":"# let see refined data\ndf.head()","da13d8c5":"import seaborn as sns\nimport matplotlib.pyplot as plt","cf77667c":"sns.distplot(df[\"Age\"])\nplt.axvline(np.mean(df[\"Age\"]))","9aa01d61":"# let us see the box plot\n\nsns.boxplot(df[\"Age\"])","16935b79":"# Let us see how many exit\nsns.countplot(df[\"Exited\"])","48174b1d":"#replace 1 and 0 for the visuals\ndf[\"Exited\"] = df.Exited.replace({1:\"Exited\", 0: \"Not Exited\"})","66826dad":"df.head()","a93a32e7":"#box plot \nsns.boxplot(x=df[\"Age\"], y=df[\"Exited\"]).set(title=\"Box plot of person by Age based on exited or not\")","60394c9e":"#by gender, we will see that we have pretty much more data for male\nsns.countplot(df[\"Gender\"]).set(title=\"Plot by gender\")","b9620915":"sns.boxplot(x=df[\"Age\"], y=df[\"Gender\"], hue=df[\"Exited\"]).set(title=\"Box plot of person by Age based on exited or not\")","fca36f29":"#Lets see the countplot by Geography, it seems we have more data from France\nsns.countplot(df[\"Geography\"]).set(title=\"Count Plot by geography\")\n","ea4531d0":"#group by exited\nsns.countplot(df[\"Geography\"],hue=df[\"Exited\"]).set(title=\"Count Plot by geography\")\n","cd82492d":"sns.boxplot(x = df[\"Age\"],y = df[\"Exited\"], hue=df[\"Geography\"])","edf7dc09":"sns.boxplot(x = df[\"Age\"],hue = df[\"Exited\"], y=df[\"Geography\"])","9ef52a91":"#lets see some more visualization\ndf.columns","f0dbb27c":"df[\"HasCrCard\"] = df.HasCrCard.replace({1:\"Yes\", 0:\"No\"})","2f5dc177":"sns.countplot(df[\"HasCrCard\"]).set(title=\"Count Plot of Person who has Credit card\")","99a36867":"#let us see how many with credit card has exited\nsns.countplot(x=df[\"HasCrCard\"], hue=df['Exited']).set(title=\"Count Plot of Person who has Credit card\")","fcda91a7":"#lets dras 2d contigency table to see how many people have exited with credit card or another way\npd.crosstab(df[\"Geography\"], df[\"Exited\"],normalize=\"columns\")","9bfd62d6":"pd.crosstab([df.HasCrCard,df.Geography],df.Exited)","3db95f27":"#lets normalize with total all\npd.crosstab([df.HasCrCard,df.Geography],df.Exited, normalize='all')","16cfa81c":"#lets normalize with total Columns\npd.crosstab([df.HasCrCard,df.Geography],df.Exited, normalize='columns')","f215ca0c":"#lets normalize with total all\npd.crosstab([df.HasCrCard,df.Geography],df.Exited, normalize='columns')","d230a27c":"df.columns","b87b2cd4":"pd.crosstab(df.Tenure,df.Exited, normalize=\"columns\")","614bff19":"_, ax =  plt.subplots(1, 2, figsize=(15, 7))\ncmap = sns.cubehelix_palette(light=1, as_cmap=True)\nsns.scatterplot(x = \"Age\", y = \"Balance\", hue = \"Exited\", cmap = cmap, sizes = (10, 200), data = df, ax=ax[0])\nsns.scatterplot(x = \"Age\", y = \"CreditScore\", hue = \"Exited\", cmap = cmap, sizes = (10, 200), data = df, ax=ax[1])","6a31f7d2":"_ = sns.FacetGrid(df, col=\"Geography\",  row=\"Exited\").map(plt.scatter, \"CreditScore\", \"Balance\", alpha=0.3).add_legend() #a;pha is intensity","51bc404a":"plt.figure(figsize=(8, 8))\nsns.swarmplot(x = \"HasCrCard\", y = \"Age\", data = df, hue=\"Exited\")\n\"\"\"Draw a categorical scatterplot with non-overlapping points.\n\nThis function is similar to stripplot(), but the points are adjusted (only along the categorical axis) so that\nthey don\u2019t overlap. This gives a better representation of the distribution of values,\nbut it does not scale well to large numbers of observations. \nThis style of plot is sometimes called a \u201cbeeswarm\u201d.\"\"\"","681e96b3":"\"\"\"Initialize the matplotlib figure and FacetGrid object.\n\nThis class maps a dataset onto multiple axes arrayed in a grid of rows and columns that correspond to levels of variables in the dataset. The plots it produces are often called \u201clattice\u201d, \u201ctrellis\u201d, or \u201csmall-multiple\u201d graphics.\"\"\"\nfacet = sns.FacetGrid(df,hue=\"Exited\",aspect=3)\nfacet.map(sns.kdeplot,\"Balance\",shade=True)\nfacet.set(xlim=(0,df[\"Balance\"].max()))\nfacet.add_legend()\n\nplt.show()","8f547621":"plt.figure(figsize=(12,6))\nbplot = df.boxplot(patch_artist=True)\nplt.xticks(rotation=90)       \nplt.show()","17eebf92":"plt.subplots(figsize=(12,8))\nsns.heatmap(df.corr(), annot=True, cmap=\"YlGnBu_r\")\nplt.show()","518efdf6":"df.head(3)","e9a8adc7":"X = df.drop([\"Exited\",\"Geography\",\"Gender\",\"HasCrCard\",\"IsActiveMember\"], axis=1)\ny = df[\"Exited\"]","07269a39":"\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import (accuracy_score, f1_score,average_precision_score, confusion_matrix,\n                             average_precision_score, precision_score, recall_score, roc_auc_score, )\nfrom mlxtend.plotting import plot_confusion_matrix\n\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn import tree\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.preprocessing import LabelEncoder, MinMaxScaler, StandardScaler\n\n\nfrom xgboost import XGBClassifier, plot_importance\nfrom imblearn.over_sampling import SMOTE","9cfc291d":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)","bc3e946f":"clf = GaussianNB()\nclf.fit(X_train, y_train)\npred = clf.predict(X_test)\naccuracy_score(pred, y_test)","d49d8c18":"clf = LogisticRegression()\nclf.fit(X_train, y_train)\npred = clf.predict(X_test)\naccuracy_score(pred, y_test)","08894f8e":"clf = tree.DecisionTreeClassifier()\nclf.fit(X_train, y_train)\npred = clf.predict(X_test)\naccuracy_score(pred, y_test)","d0ea8724":"clf = RandomForestClassifier(n_estimators = 200, random_state=200)\nclf.fit(X_train, y_train)\npred = clf.predict(X_test)\naccuracy_score(pred, y_test)","da6bcf9c":"Although we have same total data from Spain and Germany, but it looks like between these two people from Germany have exited more than Spain.","859022cb":"Here we see that plot for both the gender are almost same for each category of exited column. The point to be noted is that in exited category of female section, we have more outliers whereas in nonexited category of male section, we have more outliers.","bc0d5dd7":"* 40 to 70 years old customers are higher chances to churn\n* Customer with credit score less than 400 are higher chances to churn","95c93616":"\"\"\"Let us first see the plot using column gender and then we will have box plot of people grouped bye exited and age\"\"\"","18005d54":"We have pretty high number of people who have not exited and thus our dataset is not balanced in general","d29f5f08":"## Prediction with ml models","87a6348d":"This box plot conclude that there are some outliers too","8739c5af":"So we compared the prediction with many algorithm, and we also did some data analysis.","6be31a75":"Within person who has exited Germany and France as almost similar percentage of people with no credit card. Whereas Spain has less. In  exited category with credit card too both have almost similar. But in non exited category France has more percentage","d40c31c7":"## Conclusion\nEarlier we saw that we have a large datapoints for people who have not exited.\nHere we see that person who has not exited are relatively lowe age than people who have exited. Also there are outliers here. If we see carefully, than we observer that there is a point in exited boxplot which have very less age\n","f1bb0e2b":"## Some more plotting\nLets see the distrubution of age group by people who have exited","eb3a9e32":"## Conclusion\n1. Here we see that distribution of age is some what right skewed\n2. Mean is approx 38","7d2e4a4b":"## Detecting Outliers using Tukey Boxplot\u00b6\n","feaa15b4":"Despite of having a most dataset from the France, it seems from Germany, more people have exited","b0bf7b54":"We can see that here outliers are mostly in case of not exited case obviously they are of less age in general than others."}}