{"cell_type":{"c20fa070":"code","ee3150ac":"code","f7299cfb":"code","37084527":"code","6755e23e":"code","9c7c7054":"code","873488b7":"code","8b6bf35c":"code","a9873921":"code","bf7024bf":"code","a4055d61":"code","baff8626":"code","6dce1329":"code","3d5bc484":"code","589942b7":"code","50e4656c":"code","22152030":"code","abaf6cb1":"code","782939c1":"markdown","dccfe92a":"markdown","996faa77":"markdown","ece04427":"markdown","f550921a":"markdown","912ba08d":"markdown","3171b25a":"markdown"},"source":{"c20fa070":"!pip install seaborn==0.11","ee3150ac":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\nimport imp\nimport os\n\nimport IPython\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport scipy\nimport seaborn as sns\n\nimp.reload(sns)\nprint(\"Versions:\\nPandas(expected: 1.1.2):\", pd.__version__, \"\\nSeaborn(expected: 0.11.0):\", sns.__version__)\n\nfrom matplotlib import pyplot as plt\n\n#ignore warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\nprint(\"Data files:\")\nbase_dir=\"\/kaggle\/input\/titanic\"\nfor dirname, _, filenames in os.walk(base_dir):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create \n# a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f7299cfb":"!head \/kaggle\/input\/titanic\/train.csv","37084527":"train_df = pd.read_csv(base_dir + \"\/train.csv\")\nprint(\"Train sample\")\ntrain_df.sample(5)","6755e23e":"test_df = pd.read_csv(base_dir + \"\/test.csv\")\nprint(\"Test sample\")\ntest_df.sample(5)","9c7c7054":"#Basic info on data\nprint(\"Training data Info:\\n\",\"-\"*20, sep=\"\")\ntrain_df.info()\nprint(\"\\nTraining data basic stats:\\n\",\"-\"*25, sep=\"\")\nprint(train_df.describe(include=\"all\"))\nprint(\"\\nNull values training data:\\n\",\"-\"*25, sep=\"\")\nprint(train_df.isnull().sum())\nprint(\"\\nNull values test data:\\n\",\"-\"*25, sep=\"\")\nprint(test_df.isnull().sum())","873488b7":"# Substitue null values with Median for \"numeric\", Mode\/\"Missing\" for \"categorical\" values:\ndfs_to_clean = [train_df, test_df]\nfor df in dfs_to_clean:\n    df[\"Age\"].fillna(df[\"Age\"].median(), inplace=True)\n    df[\"Fare\"].fillna(df[\"Fare\"].median(), inplace=True)    \n    df[\"Embarked\"].fillna(df[\"Embarked\"].mode()[0], inplace=True)\n    # Filling cabin \n    df[\"Cabin\"].fillna(\"Missing\", inplace=True)\n\nprint(\"\\nNull values training data:\\n\",\"-\"*25, sep=\"\")\nprint(train_df.isnull().sum())\nprint(\"\\nNull values test data:\\n\",\"-\"*25, sep=\"\")\nprint(test_df.isnull().sum())\n\ntrain_df.drop([\"PassengerId\", \"Ticket\"], axis=1, inplace = True)\ntrain_df.sample(5)","8b6bf35c":"for df in dfs_to_clean:    \n    df[\"FamilySize\"] = 1 + df[\"SibSp\"] + df[\"Parch\"]\n    df[\"IsAlone\"] = (df[\"FamilySize\"]<=1).astype(int)\n    df[\"NamePrefix\"] = df[\"Name\"].str.split(\", \", expand=True)[1].str.split(\".\", expand=True)[0]\n\n# Replace rare name prefixes with \"Misc\"\nnp_value_counts = train_df[\"NamePrefix\"].value_counts()\nprint(\"prefixes before cleanup:\\n\", np_value_counts, sep=\"\")\nname_prefixes = set(np_value_counts[np_value_counts >= 10].index.to_list())\nfor df in dfs_to_clean:\n    df[\"NamePrefix\"] = df[\"NamePrefix\"].apply(lambda x: x if x in name_prefixes else \"Misc\")\n\nprint(\"\\nprefixes after cleanup:\\n\", train_df[\"NamePrefix\"].value_counts(), sep=\"\")\ntrain_df.sample(5)","a9873921":"sns.heatmap(train_df.corr().abs(), annot=True, cmap=\"YlGnBu\")","bf7024bf":"target=\"Survived\"\nnumerical=[\"Pclass\", \"Fare\", \"Age\", \"SibSp\", \"Parch\", \"FamilySize\"]\ncategorical=[\"IsAlone\", \"Sex\", \"NamePrefix\", \"Embarked\", \"Cabin\"]","a4055d61":"for col in numerical:\n    plt.figure()\n    ax=sns.displot(train_df, x=col, hue=target)\n","baff8626":"num_people = len(train_df)\nfor col in categorical:\n    plt.figure()\n    ax = sns.countplot(data=train_df[[col, target]], x=col, hue=target)\n    for p in ax.patches:\n        height = p.get_height()\n        ax.text(p.get_x()+p.get_width()\/2.,\n                height + 3,\n                '{:.0f}%'.format(height\/num_people*100),\n                ha=\"center\") \n    plt.show()\n","6dce1329":"train_df[\"Cabin\"].value_counts()","3d5bc484":"# Encoding categorical features\nohe_cols = [\"Sex\", \"NamePrefix\", \"Embarked\"]\ndummy_df = None \nfor df in dfs_to_clean:\n    dummy_df = pd.get_dummies(df[ohe_cols], prefix=ohe_cols)\n#     print(dummy_df.sample(2))\n    for col in dummy_df.columns:\n        df[col] = dummy_df[col]\ndummy_cols = dummy_df.columns.to_list()\ntrain_cols = [\"IsAlone\"] + numerical + dummy_cols  \nprint(train_df[train_cols].sample(3))","589942b7":"from sklearn import model_selection, linear_model, svm, tree, metrics","50e4656c":"# Cross Validate\nheader=[\"Classifier\", \"Training Time\", \"Accuracy\", \"Precision\", \"Recall\", \"F1\"]\nscoring_cols = [\"accuracy\", \"precision_macro\", \"recall_macro\", \"f1_macro\"]\n\nprint(\"x +\/- y Represents metric value x, with 95% of values lying within +\/- y\") # Confidence intervals\ndef record_metric(s):\n    return \"%0.2f +\/- %0.2f\" % (s.mean(), s.std() * 2)\n\ndata = []\nscore = None\nfor clf in [linear_model.LogisticRegression(), svm.SVC(), tree.DecisionTreeClassifier()]:\n    score = model_selection.cross_validate(\n        clf, train_df[train_cols], train_df[target], \n        scoring=scoring_cols)\n    row = [type(clf).__name__, record_metric(score[\"fit_time\"])]\n    for metric in scoring_cols:\n        row.append(record_metric(score[\"test_\"+metric]))\n    data.append(row)\nprint(score)\npd.DataFrame(data, columns=header)","22152030":"print(\"Accuracy on test data\")\nfor clf in [linear_model.LogisticRegression(), svm.SVC(), tree.DecisionTreeClassifier()]:\n    clf.fit(train_df[train_cols], train_df[target])\n    # optionally pickle model for future use\n    y_pred = clf.predict(test_df[train_cols])\n    print(y_pred[:5])\n#     print(\"%s - %.2f\"%(type(clf).__name__, metrics.accuracy_score(test_df[target], y_pred)))","abaf6cb1":"test_df.isnull().sum()","782939c1":"# 3. Data cleanup","dccfe92a":"# 5. Visualization","996faa77":"## 4.1 Observations\n*A girl in section C, with 1st class ticket, Would she survive ?*\n*Does a Miss or Mrs has higher chance of survival ?*\nWe will ignore \"Cabin\" from features. Since it has lot of different categorical values. Seems like it won't add much value.\n# 5. Modeling\nLets try DecisionTree, LogisticRegression, SVM ","ece04427":"In this notebook we will go through some important stages of solving a Machine llearning problem.\n* Problem definition\n* Data collection\n* Label generation: In some real world problems you need to generate label using some proxy(say user engagement). Or by human evaluators. \n* Data clean up: Approximate the null values. Simplify for machine readability(ex: text clenup)\n* Data visualization\n* Feature engineering\n    * Featture selection\n    * Dimensionailty reduction\n* Modeling\n* Model selection\n    * Cross validation\n    * Hyper paramter tuning\n\n\n# 1. Problem definition\nFrom: https:\/\/www.kaggle.com\/c\/titanic :\nThe sinking of the Titanic is one of the most infamous shipwrecks in history.\n\nOn April 15, 1912, during her maiden voyage, the widely considered \u201cunsinkable\u201d RMS Titanic sank after colliding with an iceberg. Unfortunately, there weren\u2019t enough lifeboats for everyone onboard, resulting in the death of 1502 out of 2224 passengers and crew.\n\nWhile there was some element of luck involved in surviving, it seems some groups of people were more likely to survive than others.\n\nIn this challenge, we ask you to build a predictive model that answers the question: \u201cwhat sorts of people were more likely to survive?\u201d using passenger data (ie name, age, gender, socio-economic class, etc).","f550921a":"# Suggested Read:\n* Pandas for data manipulation : https:\/\/pandas.pydata.org\/docs\/user_guide\/index.html#user-guide\n* Seaborn for data visualization : https:\/\/seaborn.pydata.org\/tutorial.html\n* Scikit learn User guide : https:\/\/scikit-learn.org\/stable\/user_guide.html\n* https:\/\/en.wikipedia.org\/wiki\/Precision_and_recall\n* Model Selection - Cross validation, Hyper paramter optimization, Grid search : https:\/\/scikit-learn.org\/stable\/model_selection.html\n* Ensemble methods : https:\/\/scikit-learn.org\/stable\/modules\/ensemble.html\n* Bias varince tradeoff : https:\/\/towardsdatascience.com\/understanding-the-bias-variance-tradeoff-165e6942b229\n* https:\/\/machinelearningmastery.com\/start-here\/","912ba08d":"# 2. Load Data","3171b25a":"# 4. Feature engineering"}}