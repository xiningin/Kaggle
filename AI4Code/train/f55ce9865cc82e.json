{"cell_type":{"f3034bbd":"code","10e27015":"code","1d367fde":"code","6c2227c1":"code","0e3dcf8f":"code","ea18d58e":"code","206fc9b0":"code","2a42edfe":"code","06eba4e9":"code","b4dd92a7":"code","5041caf4":"code","8aae5d2e":"code","9a4ea404":"code","c3e6ebe3":"code","13c3e44b":"code","e8b77f68":"code","5cd6c397":"code","87734fe8":"code","0772940c":"code","25d834da":"code","03438dee":"code","7cbccb9b":"code","929cfc0a":"code","551e1527":"code","a86925a6":"code","ba2ca91c":"code","b33445a9":"code","83583636":"code","f4996c06":"code","f2329d40":"code","411e270e":"code","437c8c74":"code","ec503ff6":"code","f2068169":"code","a43865de":"code","57dd5dca":"code","42d1e8cb":"code","069a3d17":"code","2acba05b":"code","6a6cffec":"code","6c027cdc":"code","37c87e74":"code","7a4272fb":"code","99787e82":"code","bacaee8d":"code","72697e00":"code","86d8370c":"code","90086852":"code","a9a1d5a1":"code","10c5d3b7":"code","700a6f46":"code","18ef0368":"code","26cd4aa3":"code","c045abd7":"code","e24b1b7e":"code","ef750d20":"code","306dfdd6":"code","1666d252":"code","22934de5":"code","1ec4a4f8":"code","57fafc6c":"code","e027984b":"code","9f8d3f67":"code","0689f41a":"code","bfcbc949":"code","2b3b5363":"code","aad89975":"code","d9d41c33":"code","47fcc4b5":"code","60b5ae3e":"code","8f98a358":"code","95cf9c26":"code","ccf6b096":"code","92dd5ad6":"code","44347e03":"code","418b34b9":"code","65fe5208":"code","2c1f2ca0":"code","7dfe7f02":"code","d78cce57":"code","8e6f268c":"code","0de892fd":"code","946a491e":"code","e2ac0855":"code","fe072613":"code","061097e5":"code","7af58cbe":"code","d8ecea71":"code","e60aee19":"code","a9dcc90d":"code","3651f6bd":"code","e1856205":"code","80ec89cc":"code","4f0492d6":"code","9f48c5ce":"code","7a1dde47":"code","c79d06fd":"code","02218af0":"code","b85dbc60":"code","6f0cb7f2":"code","54200511":"code","35f4241f":"code","392d66a9":"code","37f17102":"code","7a33b021":"code","3a00c7cd":"code","7f3ddb4d":"code","96d283b6":"code","8a347943":"code","42d9a7f0":"code","0f63fa9d":"code","1853d3c5":"code","69796eb2":"code","f3481c55":"code","2b34b41b":"code","445d2093":"code","ff93e749":"code","36e3706a":"code","cdf7f4a1":"code","c0c9fb13":"code","f546ca12":"code","a1280d76":"code","ad4f1d41":"code","f9513b74":"code","1a0c8662":"code","3dba0c43":"code","bd6dbe41":"code","9a4fd4db":"code","5ce341b8":"code","aed84fde":"code","ffc021c0":"code","59b46bef":"code","85d15bb5":"code","49e4a31d":"code","416e87ad":"code","bc695c56":"code","e36fcf64":"code","32a3e004":"code","0327e25b":"code","e31ba436":"code","48764d2b":"code","5a0ab347":"code","c344383d":"code","dcc18bfb":"code","1a098890":"code","27e87268":"code","c9525e13":"code","25e6f985":"code","2390afd9":"code","6756a44d":"code","5c8f6374":"code","95faf9dc":"code","2640e6d6":"code","2061b9d1":"code","2df711d9":"code","6c26a513":"code","85ae8291":"code","ffbc42df":"code","fdd44563":"code","e979f450":"code","b62d8f18":"code","4cb5b8d8":"code","f7b86bec":"code","2698f62c":"code","f7e1e118":"code","04aa5462":"code","292fedc6":"code","8d321d30":"code","899d756d":"code","a3515770":"code","6f355c81":"code","beacd899":"code","9ffd2657":"code","6ad49918":"code","052353dd":"code","523790ea":"code","4e26b8a1":"code","c4ac6059":"code","35ba4975":"code","1b25b6d4":"code","21ab54d9":"code","a2ccfd88":"code","bd506b82":"code","fb5963f3":"code","023c7ce0":"code","d7f4ddc1":"code","e3a5fbdd":"code","8bdb3875":"code","a91c7902":"code","84f7fb1a":"code","0ab39299":"code","ab92405a":"code","154e67a6":"code","bf10b66a":"code","a4d94652":"code","a0c67002":"code","8fcf57df":"code","d6c8bca8":"code","d347870a":"code","d14ce98d":"code","e72edd1e":"code","fd013a6f":"code","d1eb9972":"code","8848b3f5":"code","5bc95cca":"code","94b1140d":"code","77fec69a":"code","a2087ce3":"code","024c5dd6":"markdown","23dbfd73":"markdown","54a9e573":"markdown","540724cf":"markdown","846c278a":"markdown","4e2718b3":"markdown","cfa13ae0":"markdown","39da08b4":"markdown","c789373a":"markdown","a7c9f85b":"markdown","7e4abc73":"markdown","c4775329":"markdown","1d6510de":"markdown","34d15c4a":"markdown","da762d4a":"markdown","ea5f3e1f":"markdown","03cdd893":"markdown","e372e2db":"markdown","6d08d1de":"markdown","19de1ad9":"markdown","8dd533ee":"markdown"},"source":{"f3034bbd":"import pandas as pd\nimport numpy as np\nimport matplotlib.pylab as plt\nimport matplotlib as mpl\nfrom matplotlib.patches import Circle, Rectangle, Arc","10e27015":"import seaborn as sns\nplt.style.use('seaborn-dark-palette')\nmypal = plt.rcParams['axes.prop_cycle'].by_key()['color'] # Grab the color pal\nimport os\nimport gc","1d367fde":"def mkdir(path):\n    import os\n    path = path.strip()\n    path = path.rstrip(\"\\\\\")\n    isExists = os.path.exists(path)\n    if not isExists:\n        os.makedirs(path)\n        print(path + 'Successufully established')\n        return True\n    else:\n        print(path + 'dir existed')\n        return False","6c2227c1":"DIRC_MENS_PATH = '..\/input\/march-madness-analytics-2020\/2020DataFiles\/2020DataFiles\/2020-Mens-Data\/MDataFiles_Stage1'\nDIRC_WOMENS_PATH = '..\/input\/march-madness-analytics-2020\/2020DataFiles\/2020DataFiles\/2020-Womens-Data\/WDataFiles_Stage1'","0e3dcf8f":"MensTeamsDT = pd.read_csv(f'{DIRC_MENS_PATH}\/MTeams.csv')\nWoMensTeamsDT = pd.read_csv(f'{DIRC_WOMENS_PATH}\/WTeams.csv')","ea18d58e":"MensTeamsDT","206fc9b0":"WoMensTeamsDT","2a42edfe":"M_drop_list = [\"FirstD1Season\",\"TeamName\",\"LastD1Season\"]\nW_drop_list = ['TeamName']\nMensTeamsDT.drop(M_drop_list,axis = 1,inplace = True)\nWoMensTeamsDT.drop(W_drop_list,axis = 1,inplace = True)\nMensTeamsDT.head()","06eba4e9":"print(len(MensTeamsDT[\"TeamID\"].unique()))\nprint(len(WoMensTeamsDT[\"TeamID\"].unique()))","b4dd92a7":"# Team_box\ntime_list = [2015,2016,2017,2018,2019]","5041caf4":"MensTeamsDT = pd.read_csv(f'{DIRC_MENS_PATH}\/MTeams.csv')\nWoMensTeamsDT = pd.read_csv(f'{DIRC_WOMENS_PATH}\/WTeams.csv')","8aae5d2e":"M_Seed = pd.read_csv(f'{DIRC_MENS_PATH}\/MNCAATourneySeeds.csv')\nW_Seed = pd.read_csv(f'{DIRC_WOMENS_PATH}\/WNCAATourneySeeds.csv')","9a4ea404":"M_Team_seed = M_Seed[M_Seed['Season'].isin(time_list)]\nW_Team_seed = W_Seed[W_Seed['Season'].isin(time_list)]","c3e6ebe3":"print(len(W_Team_seed))\nprint(len(M_Team_seed))","13c3e44b":"M_game_result_detailed =  pd.read_csv(f'{DIRC_MENS_PATH}\/MRegularSeasonDetailedResults.csv')\nW_game_result_detailed =  pd.read_csv(f'{DIRC_WOMENS_PATH}\/WRegularSeasonDetailedResults.csv')\n\nprint(M_game_result_detailed.head())\nprint(W_game_result_detailed.head())","e8b77f68":"M_game_result_detailed = M_game_result_detailed[M_game_result_detailed['Season'].isin(time_list)]\nW_game_result_detailed = W_game_result_detailed[W_game_result_detailed['Season'].isin(time_list)]\nprint(M_game_result_detailed.head())\nprint(W_game_result_detailed.head())","5cd6c397":"print(len(M_game_result_detailed))\nprint(len(W_game_result_detailed))","87734fe8":"M_game_result_detailed.columns","0772940c":"W_game_result_detailed.columns","25d834da":"win_list = ['Season','WTeamID','WScore','WFGM', 'WFGA', 'WFGM3', 'WFGA3', 'WFTM', 'WFTA', 'WOR', 'WDR',\n       'WAst', 'WTO', 'WStl', 'WBlk', 'WPF']\nM_game_result_win = M_game_result_detailed[win_list]\nW_game_result_win = W_game_result_detailed[win_list]\nW_game_result_win.head()","03438dee":"lose_list = ['Season','LTeamID','LScore','LFGM', 'LFGA', 'LFGM3', 'LFGA3',\n       'LFTM', 'LFTA', 'LOR', 'LDR', 'LAst', 'LTO', 'LStl', 'LBlk', 'LPF']\nM_game_result_lose = M_game_result_detailed[lose_list]\nW_game_result_lose = W_game_result_detailed[lose_list]\nW_game_result_lose.head()","7cbccb9b":"M_team_win_box = M_game_result_win.groupby(['WTeamID','Season']).count()\nW_team_win_box = W_game_result_win.groupby(['WTeamID','Season']).count()","929cfc0a":"drop_list = ['WFGM', 'WFGA', 'WFGM3', 'WFGA3', 'WFTM', 'WFTA', 'WOR', 'WDR',\n       'WAst', 'WTO', 'WStl', 'WBlk', 'WPF']\nM_team_win_box = M_team_win_box.drop(drop_list,axis = 1)\nW_team_win_box = W_team_win_box.drop(drop_list,axis = 1)\nM_team_win_box = M_team_win_box.rename(columns = {'WScore':'count'})\nW_team_win_box = W_team_win_box.rename(columns = {'WScore':'count'})","551e1527":"M_team_count = M_team_win_box.reset_index()\nW_team_count = W_team_win_box.reset_index()","a86925a6":"M_team_win_box = M_game_result_win.groupby(['WTeamID','Season']).sum()\nM_team_win_box = M_team_win_box.reset_index()\nM_team_win_box = pd.merge(M_team_win_box,M_team_count,on = ['WTeamID','Season'])\nwin_rename_columns = {'WTeamID':\"TeamID\",\"WScore\":\"Score\",'WFGM':'FGM', 'WFGA':'FGA', 'WFGM3':'FGM3', 'WFGA3':'FGA3',\n       'WFTM':'FTM', 'WFTA':'FTA', 'WOR':'OR', 'WDR':'DR', 'WAst':'Ast', 'WTO':'TO', 'WStl':'Stl', 'WBlk':'Blk', 'WPF':'PF'}\nM_team_win_box = M_team_win_box.rename(columns=win_rename_columns)\nM_team_win_box.head()","ba2ca91c":"W_team_win_box = W_game_result_win.groupby(['WTeamID','Season']).sum()\nW_team_win_box = W_team_win_box.reset_index()\nW_team_win_box = pd.merge(W_team_win_box,W_team_count,on = ['WTeamID','Season'])\nW_team_win_box = W_team_win_box.rename(columns=win_rename_columns)\nW_team_win_box.head()","b33445a9":"len(W_team_win_box)","83583636":"W_game_result_lose","f4996c06":"M_team_lose_box = M_game_result_lose.groupby(['LTeamID','Season']).count()\ndrop_list = ['LFGM', 'LFGA', 'LFGM3', 'LFGA3', 'LFTM', 'LFTA', 'LOR', 'LDR',\n       'LAst', 'LTO', 'LStl', 'LBlk', 'LPF']\nM_team_lose_box = M_team_lose_box.drop(drop_list,axis = 1)\nM_team_lose_box = M_team_lose_box.rename(columns = {'LScore':'count'})","f2329d40":"W_team_lose_box = W_game_result_lose.groupby(['LTeamID','Season']).count()\nW_team_lose_box = W_team_lose_box.drop(drop_list,axis = 1)\nW_team_lose_box = W_team_lose_box.rename(columns = {'LScore':'count'})","411e270e":"M_team_lose_count = M_team_lose_box.reset_index()\nW_team_lose_count = W_team_lose_box.reset_index()","437c8c74":"M_result_lose = M_game_result_lose.groupby(['LTeamID','Season']).sum()\nM_team_lose_box = M_result_lose.reset_index()\nM_team_lose_box = pd.merge(M_team_lose_box,M_team_lose_count,on = ['LTeamID','Season'])\nrename_columns = {'LTeamID':\"TeamID\",\"LScore\":\"Score\",'LFGM':'FGM', 'LFGA':'FGA', 'LFGM3':'FGM3', 'LFGA3':'FGA3',\n       'LFTM':'FTM', 'LFTA':'FTA', 'LOR':'OR', 'LDR':'DR', 'LAst':'Ast', 'LTO':'TO', 'LStl':'Stl', 'LBlk':'Blk', 'LPF':'PF'}\nM_team_lose_box = M_team_lose_box.rename(columns=rename_columns)\nM_team_lose_box.head()","ec503ff6":"W_result_lose = W_game_result_lose.groupby(['LTeamID','Season']).sum()\nW_team_lose_box = W_result_lose.reset_index()\nW_team_lose_box = pd.merge(W_team_lose_box,W_team_lose_count,on = ['LTeamID','Season'])\nW_team_lose_box = W_team_lose_box.rename(columns=rename_columns)\nW_team_lose_box.head()","f2068169":"assert len(W_team_win_box.columns) == len(W_team_lose_box.columns)","a43865de":"M_result = pd.merge(M_team_win_box,M_team_lose_box,on=['TeamID','Season'])\nW_result = pd.merge(W_team_win_box,W_team_lose_box,on=['TeamID','Season'])","57dd5dca":"M_result = M_team_win_box.append(M_team_lose_box)\nW_result = W_team_win_box.append(W_team_lose_box)","42d1e8cb":"W_result","069a3d17":"M_result = M_result.groupby(['TeamID','Season']).sum()\nW_result = W_result.groupby(['TeamID','Season']).sum()","2acba05b":"W_result","6a6cffec":"element_list = ['Score','FGM','FGA','FGM3','FGA3','FTM','FTA','OR','DR','TO','Stl','Blk','PF','Ast']","6c027cdc":"M_result = M_result[element_list].apply(lambda x:x\/M_result['count'])\nW_result = W_result[element_list].apply(lambda x:x\/W_result['count'])","37c87e74":"W_result","7a4272fb":"M_result_withseed = pd.merge(M_result,M_Team_seed,on=['TeamID','Season'],how = 'outer')\nW_result_withseed = pd.merge(W_result,W_Team_seed,on=['TeamID','Season'],how = 'outer')","99787e82":"W_result_withseed","bacaee8d":"M_team_win_box = M_result_withseed.rename(columns = {'TeamID':'WTeamID'})\nM_team_lose_box = M_result_withseed.rename(columns = {'TeamID':'LTeamID'})\nW_team_win_box = W_result_withseed.rename(columns = {'TeamID':'WTeamID'})\nW_team_lose_box = W_result_withseed.rename(columns = {'TeamID':'LTeamID'})","72697e00":"M_result_withseed.to_csv('M_result.csv')\nW_result_withseed.to_csv('W_result.csv')","86d8370c":"M_game_result =  pd.read_csv(f'{DIRC_MENS_PATH}\/MNCAATourneyCompactResults.csv')\nM_game_result = M_game_result[M_game_result['Season'].isin(time_list)]\nW_game_result =  pd.read_csv(f'{DIRC_WOMENS_PATH}\/WNCAATourneyCompactResults.csv')\nW_game_result = W_game_result[W_game_result['Season'].isin(time_list)]","90086852":"W_game_result","a9a1d5a1":"W_team_lose_box","10c5d3b7":"M_game_result_1 = pd.merge(M_game_result,M_team_win_box,on=['WTeamID','Season'],how = 'left')\nW_game_result_1 = pd.merge(W_game_result,W_team_win_box,on=['WTeamID','Season'],how = 'left')","700a6f46":"W_game_result_1","18ef0368":"M_game_result_final = pd.merge(M_game_result_1,M_team_lose_box,on=['LTeamID','Season'],how = 'left')\nW_game_result_final = pd.merge(W_game_result_1,W_team_lose_box,on=['LTeamID','Season'],how = 'left')","26cd4aa3":"W_game_result_final[['Score_x','Score_y']]","c045abd7":"M_game_result_final.to_csv('M_result_by_game_tourney.csv')\nW_game_result_final.to_csv('W_result_by_game_tourney.csv')","e24b1b7e":"import statsmodels.api as sm\n\nfrom matplotlib import pyplot as plt\n%matplotlib inline\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.datasets import load_diabetes\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.metrics import accuracy_score\n\nimport warnings\nwarnings.filterwarnings('ignore')","ef750d20":"df = M_game_result_final.copy()\ndf1=df.copy()\ndf_WTeamID=df['WTeamID']\ndf_LTeamID=df['LTeamID']\ndf_WScore=df['WScore']\ndf_LScore=df['LScore']\ndf1['WTeamID']=df_LTeamID\ndf1['LTeamID']=df_WTeamID\ndf1['WScore']=df_LScore\ndf1['LScore']=df_WScore\nlabel_x=df1.columns[8:23]\nlabel_y=df1.columns[23:38]\nlabel_x=list(label_x)\nlabel_y=list(label_y)\nfor i in range(len(label_x)):\n    df1[label_x[i]]=df[label_y[i]]\n    df1[label_y[i]]=df[label_x[i]]","306dfdd6":"df['target']=1\ndf1['target']=0\ndf_final=df.append(df1)","1666d252":"df_W = W_game_result_final.copy()\ndf_W1=df_W.copy()\ndf_W_WTeamID=df_W['WTeamID']\ndf_W_LTeamID=df_W['LTeamID']\ndf_W_WScore=df_W['WScore']\ndf_W_LScore=df_W['LScore']\ndf_W1['WTeamID']=df_W_LTeamID\ndf_W1['LTeamID']=df_W_WTeamID\ndf_W1['WScore']=df_W_LScore\ndf_W1['LScore']=df_W_WScore\nlabel_x_W=df_W1.columns[8:23]\nlabel_y_W=df_W1.columns[23:38]\nlabel_x_W=list(label_x_W)\nlabel_y_W=list(label_y_W)\nfor i in range(len(label_x_W)):\n    df_W1[label_x_W[i]]=df_W[label_y_W[i]]\n    df_W1[label_y_W[i]]=df_W[label_x_W[i]]","22934de5":"df_W['target']=1\ndf_W1['target']=0\ndf_W_final=df_W.append(df_W1)","1ec4a4f8":"df_final.to_csv('M_result_by_game_tourney_editored.csv')\ndf_W_final.to_csv('W_result_by_game_tourney_editored.csv')","57fafc6c":"m,n=np.shape(df_final)","e027984b":"df_final.reset_index(inplace = True)","9f8d3f67":"df_final","0689f41a":"df_final = df_final.drop(columns = 'index')","bfcbc949":"df_final","2b3b5363":"data=df_final.copy()\nwseed = data[\"Seed_x\"]\nlseed = data[\"Seed_y\"]\nWseed  = np.zeros([m])\nLseed = np.zeros([m])","aad89975":"data","d9d41c33":"for i in range(m):\n    Wseed[i] = wseed[i][1:3]\n    Lseed[i] = lseed[i][1:3]\n    \nseeddiff=Wseed-Lseed","47fcc4b5":"df_final=df_final.drop(['WLoc','Seed_x','Seed_y','WTeamID','WScore','LTeamID','LScore'],axis=1)","60b5ae3e":"m,n=np.shape(df_final)","8f98a358":"df_final.insert(n-1,'Seeddiff',seeddiff) ","95cf9c26":"df_final.tail()","ccf6b096":"# Split the data \ndf_train=df_final[df_final['Season']<2019]\ndf_test=df_final[df_final['Season']>2018]","92dd5ad6":"x_train = df_train.iloc[:,0:n].values\ny_train = df_train.target.values","44347e03":"x_test = df_test.iloc[:,0:n].values\ny_test = df_test.target.values","418b34b9":"from sklearn.linear_model import LogisticRegressionCV\n\nlogreg = LogisticRegressionCV(cv=5,random_state=0, solver='newton-cg')\nlogreg.fit(x_train, y_train)\n\ny_pred_train = logreg.predict(x_train)\ny_pred_test = logreg.predict(x_test)\n\nprint(\"Coefficients :\", np.round(logreg.intercept_,4), np.round(logreg.coef_,4))","65fe5208":"y_pred_train = logreg.predict(x_train)\ny_pred_test = logreg.predict(x_test)\n\naccuracy_train = accuracy_score(y_train, y_pred_train)\naccuracy_test = accuracy_score(y_test, y_pred_test)\nprint('Accuracy on the training set =', np.round(accuracy_train,4))\nprint('Accuracy on the test set =', np.round(accuracy_test,4))","2c1f2ca0":"m,n=np.shape(df_W_final)","7dfe7f02":"df_W_final.reset_index(inplace = True)","d78cce57":"df_W_final = df_W_final.drop(columns = 'index')","8e6f268c":"data=df_W_final.copy()\nwseed = data[\"Seed_x\"]\nlseed = data[\"Seed_y\"]\nWseed  = np.zeros([m])\nLseed = np.zeros([m])","0de892fd":"for i in range(m):\n    Wseed[i] = wseed[i][1:3]\n    Lseed[i] = lseed[i][1:3]\n    \nseeddiff=Wseed-Lseed","946a491e":"df_W_final=df_W_final.drop(['WLoc','Seed_x','Seed_y','WTeamID','WScore','LTeamID','LScore'],axis=1)","e2ac0855":"m,n=np.shape(df_W_final)","fe072613":"df_W_final.insert(n-1,'Seeddiff',seeddiff) ","061097e5":"# Split the data \ndf_train_W=df_W_final[df_W_final['Season']<2019]\ndf_test_W=df_W_final[df_W_final['Season']>2018]","7af58cbe":"x_train_W = df_train_W.iloc[:,0:n].values\ny_train_W = df_train_W.target.values","d8ecea71":"x_test_W = df_test_W.iloc[:,0:n].values\ny_test_W = df_test_W.target.values","e60aee19":"from sklearn.linear_model import LogisticRegressionCV\n\nlogreg = LogisticRegressionCV(cv=5,random_state=0, solver='newton-cg')\nlogreg.fit(x_train, y_train)\n\ny_pred_train = logreg.predict(x_train_W)\ny_pred_test = logreg.predict(x_test_W)\n\nprint(\"Coefficients :\", np.round(logreg.intercept_,4), np.round(logreg.coef_,4))","a9dcc90d":"y_pred_train = logreg.predict(x_train_W)\ny_pred_test = logreg.predict(x_test_W)\n\naccuracy_train = accuracy_score(y_train_W, y_pred_train)\naccuracy_test = accuracy_score(y_test_W, y_pred_test)\nprint('Accuracy on the training set =', np.round(accuracy_train,4))\nprint('Accuracy on the test set =', np.round(accuracy_test,4))","3651f6bd":"import xgboost as xgb","e1856205":"data_xgb = pd.read_csv(\"M_result_by_game_tourney_editored.csv\")\ndata_xgb","80ec89cc":"wseed = data_xgb[\"Seed_x\"]\nlseed = data_xgb[\"Seed_y\"]\nWseed  = np.zeros([data_xgb.shape[0]])\nLseed = np.zeros([data_xgb.shape[0]])\nfor i in range(data_xgb.shape[0]):\n    Wseed[i] = wseed[i][1:3]\n    Lseed[i] = lseed[i][1:3]\ndata_xgb[\"Seed_x\"] = Wseed\ndata_xgb[\"Seed_y\"] = Lseed","4f0492d6":"data_xgb[\"Score_diff\"] = data_xgb[\"Score_x\"]-data_xgb[\"Score_y\"]\ndata_xgb[\"FGM_diff\"] = data_xgb[\"FGM_x\"]-data_xgb[\"FGM_y\"]\ndata_xgb[\"FGA_diff\"] = data_xgb[\"FGA_x\"]-data_xgb[\"FGA_y\"]\ndata_xgb[\"FGM3_diff\"] = data_xgb[\"FGM3_x\"]-data_xgb[\"FGM3_y\"]\ndata_xgb[\"FGA3_diff\"] = data_xgb[\"FGA3_x\"]-data_xgb[\"FGA3_y\"]\ndata_xgb[\"FTM_diff\"] = data_xgb[\"FTM_x\"]-data_xgb[\"FTM_y\"]\ndata_xgb[\"FTA_diff\"] = data_xgb[\"FTA_x\"]-data_xgb[\"FTA_y\"]\ndata_xgb[\"OR_diff\"] = data_xgb[\"OR_x\"]-data_xgb[\"OR_y\"]\ndata_xgb[\"DR_diff\"] = data_xgb[\"DR_x\"]-data_xgb[\"DR_y\"]\ndata_xgb[\"TO_diff\"] = data_xgb[\"TO_x\"]-data_xgb[\"TO_y\"]\ndata_xgb[\"Stl_diff\"] = data_xgb[\"Stl_x\"]-data_xgb[\"Stl_y\"]\ndata_xgb[\"Blk_diff\"] = data_xgb[\"Blk_x\"]-data_xgb[\"Blk_y\"]\ndata_xgb[\"PF_diff\"] = data_xgb[\"PF_x\"]-data_xgb[\"PF_y\"]\ndata_xgb[\"Seed_diff\"] = data_xgb[\"Seed_x\"]-data_xgb[\"Seed_y\"]\n","9f48c5ce":"trainlabel = data_xgb[data_xgb['Season']<2019]['target']\ntestlabel = data_xgb[data_xgb['Season']==2019]['target']\ntrainlabel","7a1dde47":"traindata = data_xgb[data_xgb['Season']<2019]\ntestdata = data_xgb[data_xgb['Season']==2019]","c79d06fd":"droplist = [\"Unnamed: 0\",\"LTeamID\",\"WTeamID\",\"WLoc\",\"target\",\"WScore\",\"Score_x\",\"FGM_x\",\"FGA_x\",\"FGM3_x\",\"FGA3_x\",\n            \"LScore\",\"FTM_x\",\"FTA_x\",\"OR_x\",\"DR_x\",\"TO_x\",\"Stl_x\",\"Blk_x\",\n           \"PF_x\",\"Score_y\",\"FGM_y\",\"FGA_y\",\"FGM3_y\",\"FGA3_y\",\"FTM_y\",\"FTA_y\",\n            \"OR_y\",\"DR_y\",\"TO_y\",\"Stl_y\",\"Blk_y\",\"PF_y\",\"Seed_x\",\"Seed_y\"]\ntraindata.drop(droplist,axis=1,inplace = True)\ntestdata.drop(droplist,axis=1,inplace = True)\ntraindata","02218af0":"xg_reg = xgb.XGBRegressor(objective ='binary:logistic', colsample_bytree = 0.8, learning_rate = 0.001,\n                max_depth = 10, alpha = 7, n_estimators = 50000)\nxg_reg.fit(traindata,trainlabel)","b85dbc60":"preds  = xg_reg.predict(testdata)\npreds = np.floor(preds+0.5)\nnp.sum(preds==testlabel)\/testdata.shape[0]","6f0cb7f2":"xgb.plot_tree(xg_reg,num_trees=0)\nplt.rcParams['figure.figsize'] = [500, 400]\nplt.show()","54200511":"# xgb.plot_importance(xg_reg)\n#plt.rcParams['figure.figsize'] = [500,400]\n# plt.show()","35f4241f":"data_xgb = pd.read_csv(\"W_result_by_game_tourney_editored.csv\")\n\nwseed = data_xgb[\"Seed_x\"]\nlseed = data_xgb[\"Seed_y\"]\nWseed  = np.zeros([data_xgb.shape[0]])\nLseed = np.zeros([data_xgb.shape[0]])\nfor i in range(data_xgb.shape[0]):\n    Wseed[i] = wseed[i][1:3]\n    Lseed[i] = lseed[i][1:3]\ndata_xgb[\"Seed_x\"] = Wseed\ndata_xgb[\"Seed_y\"] = Lseed","392d66a9":"data_xgb[['Score_x','Score_y']]","37f17102":"data_xgb[\"Score_diff\"] = data_xgb[\"Score_x\"]-data_xgb[\"Score_y\"]\ndata_xgb[\"FGM_diff\"] = data_xgb[\"FGM_x\"]-data_xgb[\"FGM_y\"]\ndata_xgb[\"FGA_diff\"] = data_xgb[\"FGA_x\"]-data_xgb[\"FGA_y\"]\ndata_xgb[\"FGM3_diff\"] = data_xgb[\"FGM3_x\"]-data_xgb[\"FGM3_y\"]\ndata_xgb[\"FGA3_diff\"] = data_xgb[\"FGA3_x\"]-data_xgb[\"FGA3_y\"]\ndata_xgb[\"FTM_diff\"] = data_xgb[\"FTM_x\"]-data_xgb[\"FTM_y\"]\ndata_xgb[\"FTA_diff\"] = data_xgb[\"FTA_x\"]-data_xgb[\"FTA_y\"]\ndata_xgb[\"OR_diff\"] = data_xgb[\"OR_x\"]-data_xgb[\"OR_y\"]\ndata_xgb[\"DR_diff\"] = data_xgb[\"DR_x\"]-data_xgb[\"DR_y\"]\ndata_xgb[\"TO_diff\"] = data_xgb[\"TO_x\"]-data_xgb[\"TO_y\"]\ndata_xgb[\"Stl_diff\"] = data_xgb[\"Stl_x\"]-data_xgb[\"Stl_y\"]\ndata_xgb[\"Blk_diff\"] = data_xgb[\"Blk_x\"]-data_xgb[\"Blk_y\"]\ndata_xgb[\"PF_diff\"] = data_xgb[\"PF_x\"]-data_xgb[\"PF_y\"]\ndata_xgb[\"Seed_diff\"] = data_xgb[\"Seed_x\"]-data_xgb[\"Seed_y\"]\n","7a33b021":"data_xgb['Score_y']","3a00c7cd":"trainlabel = data_xgb[data_xgb['Season']<2019]['target']\ntestlabel = data_xgb[data_xgb['Season']==2019]['target']\ntrainlabel","7f3ddb4d":"traindata = data_xgb[data_xgb['Season']<2019]\ntestdata = data_xgb[data_xgb['Season']==2019]","96d283b6":"traindata","8a347943":"droplist = [\"Unnamed: 0\",\"LTeamID\",\"WTeamID\",\"WLoc\",\"target\",\"WScore\",\"Score_x\",\"FGM_x\",\"FGA_x\",\"FGM3_x\",\"FGA3_x\",\n            \"LScore\",\"FTM_x\",\"FTA_x\",\"OR_x\",\"DR_x\",\"TO_x\",\"Stl_x\",\"Blk_x\",\n           \"PF_x\",\"Score_y\",\"FGM_y\",\"FGA_y\",\"FGM3_y\",\"FGA3_y\",\"FTM_y\",\"FTA_y\",\n            \"OR_y\",\"DR_y\",\"TO_y\",\"Stl_y\",\"Blk_y\",\"PF_y\",\"Seed_x\",\"Seed_y\"]\ntraindata.drop(droplist,axis=1,inplace = True)\ntestdata.drop(droplist,axis=1,inplace = True)\ntraindata","42d9a7f0":"xg_reg = xgb.XGBRegressor(objective ='binary:logistic', colsample_bytree = 0.8, learning_rate = 0.001,\n                max_depth = 10, alpha = 7, n_estimators = 50000)\nxg_reg.fit(traindata,trainlabel)","0f63fa9d":"preds  = xg_reg.predict(testdata)\npreds = np.floor(preds+0.5)\nnp.sum(preds==testlabel)\/testdata.shape[0]","1853d3c5":"#xgb.plot_tree(xg_reg,num_trees=0)\n#plt.rcParams['figure.figsize'] = [500, 400]\n#plt.show()","69796eb2":"# xgb.plot_importance(xg_reg)\n#plt.rcParams['figure.figsize'] = [500,400]\n# plt.show()","f3481c55":"!pip install pygam","2b34b41b":"from pygam import LinearGAM,f,s,l\nimport eli5\nfrom eli5.sklearn import PermutationImportance","445d2093":"X=x_train\ny=y_train","ff93e749":"# perform LASSO CV\n# Note that the regularization strength is denoted by alpha in sklearn.\nfrom sklearn import linear_model\ncv = 10\nlassocv = linear_model.LassoCV(cv=cv)\nlassocv.fit(X, y)\nprint('alpha =',lassocv.alpha_.round(4))","36e3706a":"# draw solution path\nalphas = np.logspace(-8,1,21)\nalphas_lassocv, coefs_lassocv, _ = lassocv.path(X, y, alphas=alphas)\nlog_alphas_lassocv = np.log10(alphas_lassocv)\n\nplt.figure(figsize=(12,8)) \nplt.plot(log_alphas_lassocv,coefs_lassocv.T)\nplt.vlines(x=np.log10(lassocv.alpha_), ymin=np.min(coefs_lassocv), ymax=np.max(coefs_lassocv), \n           color='b',linestyle='-.',label = 'alpha chosen')\nplt.axhline(y=0, color='black',linestyle='--')\nplt.xlabel(r'$\\log_{10}(\\alpha)$', fontsize=12)\nplt.ylabel(r'$\\hat{\\beta}$', fontsize=12, rotation=0)\nplt.title('Solution Path',fontsize=12)\nplt.legend()\nplt.show()","cdf7f4a1":"\n# fit a multiple layer percepton (neural network)\nfrom sklearn.neural_network import MLPClassifier\nnames=df_train.drop('target',axis=1).columns\nnames=list(names)\nclf = MLPClassifier(max_iter=1000, random_state=0)\nclf.fit(X, y)\n# define a permutation importance object\nperm = PermutationImportance(clf).fit(X, y)\n# show the importance\neli5.show_weights(perm, feature_names=names)","c0c9fb13":"df_train[['Seeddiff','Score_y','FGM_y','FGA_y','FTM_x','FTA_x']].values","f546ca12":"x_train =df_train[['Seeddiff','Score_y','FGM_y','FGA_y','FTM_x','FTA_x']].values\nx_test =df_test[['Seeddiff','Score_y','FGM_y','FGA_y','FTM_x','FTA_x']].values","a1280d76":"names = ['Seeddiff','Score_y','FGM_y','FGA_y','FTM_x','FTA_x']\nnames","ad4f1d41":"from pygam import LogisticGAM,f,s,l\n\ngam = LogisticGAM().fit(x_train,y_train)\n# f: factor term\n# some parameters combinations in grid search meet the error exception.\ngam.gridsearch(x_train,y_train)","f9513b74":"# plotting\nfig, axs = plt.subplots(2,3,figsize=(20,8))\nfor i, ax in enumerate(axs.flatten()):\n    XX = gam.generate_X_grid(term=i)\n    plt.subplot(ax)\n    plt.plot(XX[:, i], gam.partial_dependence(term=i, X=XX))\n    plt.plot(XX[:, i], gam.partial_dependence(term=i, X=XX, width=.95)[1], c='grey', ls='--')\n    plt.title(names[i])\nplt.tight_layout()","1a0c8662":"y_pred_train = gam.predict(x_train)\ny_pred_test = gam.predict(x_test)\n\nprint('The Acc on training set:',accuracy_score(y_train,y_pred_train))\nprint('The Acc on testing set:',accuracy_score(y_test,y_pred_test))","3dba0c43":"X=x_train_W\ny=y_train_W","bd6dbe41":"# perform LASSO CV\n# Note that the regularization strength is denoted by alpha in sklearn.\nfrom sklearn import linear_model\ncv = 10\nlassocv = linear_model.LassoCV(cv=cv)\nlassocv.fit(X, y)\nprint('alpha =',lassocv.alpha_.round(4))","9a4fd4db":"# draw solution path\nalphas = np.logspace(-8,1,21)\nalphas_lassocv, coefs_lassocv, _ = lassocv.path(X, y, alphas=alphas)\nlog_alphas_lassocv = np.log10(alphas_lassocv)\n\nplt.figure(figsize=(12,8)) \nplt.plot(log_alphas_lassocv,coefs_lassocv.T)\nplt.vlines(x=np.log10(lassocv.alpha_), ymin=np.min(coefs_lassocv), ymax=np.max(coefs_lassocv), \n           color='b',linestyle='-.',label = 'alpha chosen')\nplt.axhline(y=0, color='black',linestyle='--')\nplt.xlabel(r'$\\log_{10}(\\alpha)$', fontsize=12)\nplt.ylabel(r'$\\hat{\\beta}$', fontsize=12, rotation=0)\nplt.title('Solution Path',fontsize=12)\nplt.legend()\nplt.show()","5ce341b8":"# fit a multiple layer percepton (neural network)\nfrom sklearn.neural_network import MLPClassifier\nnames=df_train.drop('target',axis=1).columns\nnames=list(names)\nclf = MLPClassifier(max_iter=1000, random_state=0)\nclf.fit(X, y)\n# define a permutation importance object\nperm = PermutationImportance(clf).fit(X, y)\n# show the importance\neli5.show_weights(perm, feature_names=names)","aed84fde":"x_train =df_train[['Seeddiff','Score_y','FGM_y','FGA_y','FTM_x','FTA_x']].values\nx_test =df_test[['Seeddiff','Score_y','FGM_y','FGA_y','FTM_x','FTA_x']].values","ffc021c0":"names = ['Seeddiff','Score_y','FGM_y','FGA_y','FTM_x','FTA_x']\nnames","59b46bef":"gam = LogisticGAM().fit(x_train,y_train)\n# f: factor term\n# some parameters combinations in grid search meet the error exception.\ngam.gridsearch(x_train_W,y_train_W)","85d15bb5":"# plotting\nfig, axs = plt.subplots(2,3,figsize=(20,8))\nfor i, ax in enumerate(axs.flatten()):\n    XX = gam.generate_X_grid(term=i)\n    plt.subplot(ax)\n    plt.plot(XX[:, i], gam.partial_dependence(term=i, X=XX))\n    plt.plot(XX[:, i], gam.partial_dependence(term=i, X=XX, width=.95)[1], c='grey', ls='--')\n    plt.title(names[i])\nplt.tight_layout()","49e4a31d":"y_pred_train = gam.predict(x_train)\ny_pred_test = gam.predict(x_test)\n\nprint('The Acc on training set:',accuracy_score(y_train,y_pred_train))\nprint('The Acc on testing set:',accuracy_score(y_test,y_pred_test))","416e87ad":"names=df_train.drop('target',axis=1).columns\nnames=list(names)","bc695c56":"DIRC_MENS_PATH_player = '..\/input\/march-madness-analytics-2020\/2020DataFiles\/2020DataFiles\/2020-Mens-Data'\nDIRC_WOMENS_PATH_player = '..\/input\/march-madness-analytics-2020\/2020DataFiles\/2020DataFiles\/2020-Womens-Data'","e36fcf64":"M_players = pd.read_csv(f'{DIRC_MENS_PATH_player}\/MPlayers.csv')\nW_players = pd.read_csv(f'{DIRC_WOMENS_PATH_player}\/WPlayers.csv')\nW_players.head()","32a3e004":"def high_order_stats(event_by_player):\n    event_by_player['Points'] = event_by_player['made1']+2*event_by_player['made2']+3*event_by_player['made3']\n    element_list = ['assist','block','foul','made1','made2','made3','miss1','miss2','miss3',\n               'reb','steal','sub','timeout','turnover','Points']\n    for item in element_list:\n        event_by_player[item] = event_by_player[item]\/event_by_player['count']\n    event_by_player['Field_goal'] = (event_by_player['made2']+\n                                 event_by_player['made3'])\/(event_by_player['made2']+\n                                                            event_by_player['made3']+\n                                                           event_by_player['miss2']+\n                                                            event_by_player['miss3'])\n    event_by_player['FT_goal'] = event_by_player['made1']\/(event_by_player['miss1']+event_by_player['made1'])\n    event_by_player['3PT'] = event_by_player['made3']\/(event_by_player['miss3']+event_by_player['made3'])\n    # assist vs turnover\n    event_by_player['AT'] = event_by_player['assist']\/event_by_player['turnover']\n    event_by_player['eFG'] = (event_by_player['made2']+\n                          0.5*event_by_player['made3'])\/(event_by_player['made2']+\n                                                         event_by_player['made3']+\n                                                         event_by_player['miss2']+\n                                                         event_by_player['miss3'])\n    event_by_player['TS'] = event_by_player['Points']\/(2*((event_by_player['made2']+\n                                                         event_by_player['made3']+\n                                                         event_by_player['miss2']+\n                                                         event_by_player['miss3'])\n                                                      +0.44*(event_by_player['made1']+\n                                                         event_by_player['made1'])))\n    event_by_player['PER'] = (event_by_player['Points']+event_by_player['assist']+event_by_player['reb']+event_by_player['steal']+\n                         event_by_player['block']-event_by_player['miss1']-event_by_player['turnover'])\/event_by_player['count']\n    return event_by_player\n    \n\n    ","0327e25b":"mkdir('mens_stats')\nmkdir('womens_stats')","e31ba436":"# year of stats\n\nyear = 2015\nfor year in range(2015,2020):\n    M_events = pd.read_csv(f'{DIRC_MENS_PATH_player}\/MEvents{year}.csv')\n    W_events = pd.read_csv(f'{DIRC_WOMENS_PATH_player}\/WEvents{year}.csv')\n    M_game_made = M_events[['DayNum','EventPlayerID']]\n    W_game_made = W_events[['DayNum','EventPlayerID']]\n    M_game_made['count'] = 0\n    W_game_made['count'] = 0\n    M_game_made = M_game_made.drop_duplicates()\n    W_game_made = W_game_made.drop_duplicates()\n    M_game_made = M_game_made.groupby(['EventPlayerID']).count()\n    M_game_made.reset_index(inplace = True)\n    W_game_made = W_game_made.groupby(['EventPlayerID']).count()\n    W_game_made.reset_index(inplace = True)\n    M_game_made.drop(index = 0,inplace = True)\n    W_game_made.drop(index = 0,inplace = True)\n    M_game_made = M_game_made[['EventPlayerID','count']]\n    W_game_made = W_game_made[['EventPlayerID','count']]\n    M_events_useful = M_events[['EventPlayerID','EventType']]\n    W_events_useful = W_events[['EventPlayerID','EventType']]\n    M_events_useful['count'] = 0\n    W_events_useful['count'] = 0\n    M_events_useful = M_events_useful.groupby(['EventPlayerID','EventType']).count()\n    W_events_useful = W_events_useful.groupby(['EventPlayerID','EventType']).count()\n    M_events_reindex = M_events_useful.reset_index()\n    W_events_reindex = W_events_useful.reset_index()\n    M_events_pivoted=M_events_reindex.pivot('EventPlayerID', 'EventType', 'count')\n    W_events_pivoted=W_events_reindex.pivot('EventPlayerID', 'EventType', 'count')\n    M_event_by_player = M_events_pivoted.fillna(0)\n    W_event_by_player = W_events_pivoted.fillna(0)\n    M_event_by_player = M_event_by_player.drop(index = 0)\n    W_event_by_player = W_event_by_player.drop(index = 0)\n    M_event_by_player = pd.merge(M_event_by_player, M_game_made,on = 'EventPlayerID')\n    W_event_by_player = pd.merge(W_event_by_player, W_game_made,on = 'EventPlayerID')\n    M_event_by_player = high_order_stats(M_event_by_player)\n    W_event_by_player = high_order_stats(W_event_by_player)\n    M_players.rename(columns = {'PlayerID':'EventPlayerID'},inplace = True)\n    W_players.rename(columns = {'PlayerID':'EventPlayerID'},inplace = True)\n\n    M_player_stats = pd.merge(M_players,M_event_by_player,on = 'EventPlayerID',how = 'left')\n    W_player_stats = pd.merge(W_players,W_event_by_player,on = 'EventPlayerID',how = 'left')\n    M_player_stats = M_player_stats.fillna(0)\n    W_player_stats = W_player_stats.fillna(0)\n    \n    \n    M_player_stats.to_csv(f'mens_stats\/M_player_stats_{year}.csv')\n    W_player_stats.to_csv(f'womens_stats\/W_player_stats_{year}.csv')","48764d2b":"def pre_processer(df):\n    player_information=df.iloc[:,0:4]\n    EventPlayerID=player_information['EventPlayerID']\n    df=df.drop(['EventPlayerID','LastName','FirstName'],axis=1)\n    df[df==0]=np.nan\n    pd.isnull(df)\n    df=df.dropna(how='all')\n    df.tail()\n    df.insert(0,'EventPlayerID',EventPlayerID)\n    df=pd.merge(player_information, df, on='EventPlayerID')\n    return df","5a0ab347":"def Team_member(df):\n    number_of_teamplayer=Counter(df['TeamID'])\n    #number=list(number_of_tramplayer)\n    number=number_of_teamplayer.values()\n    number=list(number)\n    np.shape(number)\n    \n    return number","c344383d":"def TeamID_made(df):\n    TeamID=list(df.drop_duplicates(['TeamID']).TeamID)\n    k=len(TeamID)\n    \n    return TeamID","dcc18bfb":"def calculator_advanced(i,df,TeamID): \n    df1=df[df['TeamID']==TeamID[i]][['AT','eFG','TS','PER']].sum()\n    #df_sum=df1.append([df2,df3,df4],ignore_index = False)\n    df_sum=pd.DataFrame(df1,columns=[TeamID[i]])\n    return df_sum","1a098890":"def sum_final(df,k,TeamID):\n    df[df['AT']>10000]=0\n    # k=len(TeamID)\n    df_sum_final=calculator_advanced(0,df,TeamID)\n    for i in range (1,k):\n        df_temp=calculator_advanced(i,df,TeamID)\n        df_sum_final=pd.concat([df_sum_final,df_temp],axis=1)\n        #df_sum_final=df_sum_final.append([df_temp],ignore_index = False)\n    return df_sum_final","27e87268":"from collections import Counter\nimport warnings\nwarnings.filterwarnings('ignore')\n\ndf_2015=pd.read_csv(\"mens_stats\/M_player_stats_2015.csv\")\ndf_2016=pd.read_csv(\"mens_stats\/M_player_stats_2016.csv\")\ndf_2017=pd.read_csv(\"mens_stats\/M_player_stats_2017.csv\")\ndf_2018=pd.read_csv(\"mens_stats\/M_player_stats_2018.csv\")\ndf_2019=pd.read_csv(\"mens_stats\/M_player_stats_2019.csv\")","c9525e13":"def pre_processer(df):\n    player_information=df.iloc[:,0:4]\n    EventPlayerID=player_information['EventPlayerID']\n    df=df.drop(['EventPlayerID','LastName','FirstName'],axis=1)\n    df[df==0]=np.nan\n    pd.isnull(df)\n    df=df.dropna(how='all')\n    df.tail()\n    df.insert(0,'EventPlayerID',EventPlayerID)\n    df=pd.merge(player_information, df, on='EventPlayerID')\n    return df\n\ndef Team_member(df):\n    number_of_teamplayer=Counter(df['TeamID'])\n    #number=list(number_of_tramplayer)\n    number=number_of_teamplayer.values()\n    number=list(number)\n    np.shape(number)\n    return number\n\n\ndef TeamID_made(df):\n    TeamID=list(df.drop_duplicates(['TeamID']).TeamID)\n    k=len(TeamID)\n    \n    return TeamID\n\ndef calculator_advanced(i,df,TeamID): \n    df1=df[df['TeamID']==TeamID[i]][['AT','eFG','TS','PER']].sum()\n    #df_sum=df1.append([df2,df3,df4],ignore_index = False)\n    df_sum=pd.DataFrame(df1,columns=[TeamID[i]])\n    return df_sum\n\n\ndef calculator_advanced(i,df,TeamID): \n    df1=df[df['TeamID']==TeamID[i]][['AT','eFG','TS','PER']].sum()\n    #df_sum=df1.append([df2,df3,df4],ignore_index = False)\n    df_sum=pd.DataFrame(df1,columns=[TeamID[i]])\n    return df_sum\n\ndef sum_final(df,k,TeamID):\n    df[df['AT']>10000]=0\n    # k=len(TeamID)\n    df_sum_final=calculator_advanced(0,df,TeamID)\n    for i in range (1,k):\n        df_temp=calculator_advanced(i,df,TeamID)\n        df_sum_final=pd.concat([df_sum_final,df_temp],axis=1)\n        #df_sum_final=df_sum_final.append([df_temp],ignore_index = False)\n    return df_sum_final","25e6f985":"df_2015=pre_processer(df_2015)\nnumber_2015=Team_member(df_2015)\nTeamID_2015=TeamID_made(df_2015)\nk_2015=len(TeamID_2015)\ndf_sum_final_2015=sum_final(df_2015,k_2015,TeamID_2015)\nfor i in range(k_2015):\n    df_sum_final_2015.iloc[:,i]=df_sum_final_2015.iloc[:,i]\/number_2015[i]\n\ndf_2016=pre_processer(df_2016)\nnumber_2016=Team_member(df_2016)\nTeamID_2016=TeamID_made(df_2016)\nk_2016=len(TeamID_2016)\ndf_sum_final_2016=sum_final(df_2016,k_2016,TeamID_2016)\nfor i in range(k_2016):\n    df_sum_final_2016.iloc[:,i]=df_sum_final_2016.iloc[:,i]\/number_2016[i]\n\ndf_2017=pre_processer(df_2017)\nnumber_2017=Team_member(df_2017)\nTeamID_2017=TeamID_made(df_2017)\nk_2017=len(TeamID_2017)\ndf_sum_final_2017=sum_final(df_2017,k_2017,TeamID_2017)\nfor i in range(k_2017):\n    df_sum_final_2017.iloc[:,i]=df_sum_final_2017.iloc[:,i]\/number_2017[i]\n    \ndf_2018=pre_processer(df_2018)\nnumber_2018=Team_member(df_2018)\nTeamID_2018=TeamID_made(df_2018)\nk_2018=len(TeamID_2018)\ndf_sum_final_2018=sum_final(df_2018,k_2018,TeamID_2018)\nfor i in range(k_2018):\n    df_sum_final_2018.iloc[:,i]=df_sum_final_2018.iloc[:,i]\/number_2018[i]\n\ndf_2019=pre_processer(df_2019)\nnumber_2019=Team_member(df_2019)\nTeamID_2019=TeamID_made(df_2019)\nk_2019=len(TeamID_2019)\ndf_sum_final_2019=sum_final(df_2019,k_2019,TeamID_2019)\nfor i in range(k_2019):\n    df_sum_final_2019.iloc[:,i]=df_sum_final_2019.iloc[:,i]\/number_2019[i]\ndf_sum_final_2019.tail()","2390afd9":"mkdir('player_as')","6756a44d":"df_sum_final_2015.to_csv('player_as\/df_sum_final_2015.csv')\ndf_sum_final_2016.to_csv('player_as\/df_sum_final_2016.csv')\ndf_sum_final_2017.to_csv('player_as\/df_sum_final_2017.csv')\ndf_sum_final_2018.to_csv('player_as\/df_sum_final_2018.csv')\ndf_sum_final_2019.to_csv('player_as\/df_sum_final_2019.csv')","5c8f6374":"df_target=pd.read_csv(\"M_result_by_game_tourney_editored.csv\")","95faf9dc":"df_target=df_target[['Season','WTeamID','LTeamID','target']]\ndf_target.tail()","2640e6d6":"def preprocess_win(df,i,TeamID):\n    df_new=df.T\n    df_new.columns=[['AT_win','eFG_win','TS_win','PER_win']]\n    df_new['Season']=i\n    df_new['WTeamID']=TeamID\n    \n    return df_new","2061b9d1":"def preprocess_lose(df,i,TeamID):\n    df_new=df.T\n    df_new.columns=[['AT_lose','eFG_lose','TS_lose','PER_lose']]\n    df_new['Season']=i\n    df_new['LTeamID']=TeamID\n    \n    return df_new","2df711d9":"df_2015_new_win=preprocess_win(df_sum_final_2015,2015,TeamID_2015)\ndf_2016_new_win=preprocess_win(df_sum_final_2016,2016,TeamID_2016)\ndf_2017_new_win=preprocess_win(df_sum_final_2017,2017,TeamID_2017)\ndf_2018_new_win=preprocess_win(df_sum_final_2018,2018,TeamID_2018)\ndf_2019_new_win=preprocess_win(df_sum_final_2019,2019,TeamID_2019)\ndf_2015_new_lose=preprocess_lose(df_sum_final_2015,2015,TeamID_2015)\ndf_2016_new_lose=preprocess_lose(df_sum_final_2016,2016,TeamID_2016)\ndf_2017_new_lose=preprocess_lose(df_sum_final_2017,2017,TeamID_2017)\ndf_2018_new_lose=preprocess_lose(df_sum_final_2018,2018,TeamID_2018)\ndf_2019_new_lose=preprocess_lose(df_sum_final_2019,2019,TeamID_2019)","6c26a513":"df1=df_2015_new_win.append(df_2016_new_win)\ndf2=df1.append(df_2017_new_win)\ndf3=df2.append(df_2018_new_win)\ndf4=df3.append(df_2019_new_win)\ndf_final_win=df4\ndf_final_win","85ae8291":"df1=df_2015_new_lose.append(df_2016_new_lose)\ndf2=df1.append(df_2017_new_lose)\ndf3=df2.append(df_2018_new_lose)\ndf4=df3.append(df_2019_new_lose)\ndf_final_lose=df4\ndf_final_lose","ffbc42df":"df_final_win.columns=df_final_win.columns.get_level_values(0)\ndf_final_win.columns","fdd44563":"#\u7b2c\u4e00\u53e5\u8bdd\u4e0d\u88ab\u8fd0\u884c\u662f\u7b2c\u4e00\u6b21\u7684\u65f6\u5019\u624d\u7528\uff1a\ndf_target_new=pd.merge(df_target,df_final_win,on = ['Season','WTeamID'],how='left')\ndf_target_new.tail()","e979f450":"df_final_lose.columns=df_final_lose.columns.get_level_values(0)\ndf_final_lose.columns","b62d8f18":"df_target_new=pd.merge(df_target_new,df_final_lose,on = ['Season','LTeamID'],how='left')\ndf_target_new.tail()","4cb5b8d8":"df_target_new.to_csv('with_advanced_stat.csv')","f7b86bec":"df_2015=pd.read_csv(\"womens_stats\/W_player_stats_2015.csv\")\ndf_2016=pd.read_csv(\"womens_stats\/W_player_stats_2016.csv\")\ndf_2017=pd.read_csv(\"womens_stats\/W_player_stats_2017.csv\")\ndf_2018=pd.read_csv(\"womens_stats\/W_player_stats_2018.csv\")\ndf_2019=pd.read_csv(\"womens_stats\/W_player_stats_2019.csv\")","2698f62c":"df_2015=pre_processer(df_2015)\nnumber_2015=Team_member(df_2015)\nTeamID_2015=TeamID_made(df_2015)\nk_2015=len(TeamID_2015)\ndf_sum_final_2015=sum_final(df_2015,k_2015,TeamID_2015)\nfor i in range(k_2015):\n    df_sum_final_2015.iloc[:,i]=df_sum_final_2015.iloc[:,i]\/number_2015[i]\n\ndf_2016=pre_processer(df_2016)\nnumber_2016=Team_member(df_2016)\nTeamID_2016=TeamID_made(df_2016)\nk_2016=len(TeamID_2016)\ndf_sum_final_2016=sum_final(df_2016,k_2016,TeamID_2016)\nfor i in range(k_2016):\n    df_sum_final_2016.iloc[:,i]=df_sum_final_2016.iloc[:,i]\/number_2016[i]\n\ndf_2017=pre_processer(df_2017)\nnumber_2017=Team_member(df_2017)\nTeamID_2017=TeamID_made(df_2017)\nk_2017=len(TeamID_2017)\ndf_sum_final_2017=sum_final(df_2017,k_2017,TeamID_2017)\nfor i in range(k_2017):\n    df_sum_final_2017.iloc[:,i]=df_sum_final_2017.iloc[:,i]\/number_2017[i]\n    \ndf_2018=pre_processer(df_2018)\nnumber_2018=Team_member(df_2018)\nTeamID_2018=TeamID_made(df_2018)\nk_2018=len(TeamID_2018)\ndf_sum_final_2018=sum_final(df_2018,k_2018,TeamID_2018)\nfor i in range(k_2018):\n    df_sum_final_2018.iloc[:,i]=df_sum_final_2018.iloc[:,i]\/number_2018[i]\n\ndf_2019=pre_processer(df_2019)\nnumber_2019=Team_member(df_2019)\nTeamID_2019=TeamID_made(df_2019)\nk_2019=len(TeamID_2019)\ndf_sum_final_2019=sum_final(df_2019,k_2019,TeamID_2019)\nfor i in range(k_2019):\n    df_sum_final_2019.iloc[:,i]=df_sum_final_2019.iloc[:,i]\/number_2019[i]\ndf_sum_final_2019.tail()","f7e1e118":"df_sum_final_2015.to_csv('player_as\/W_df_sum_final_2015.csv')\ndf_sum_final_2016.to_csv('player_as\/W_df_sum_final_2016.csv')\ndf_sum_final_2017.to_csv('player_as\/W_df_sum_final_2017.csv')\ndf_sum_final_2018.to_csv('player_as\/W_df_sum_final_2018.csv')\ndf_sum_final_2019.to_csv('player_as\/W_df_sum_final_2019.csv')","04aa5462":"df_target=pd.read_csv(\"W_result_by_game_tourney_editored.csv\")","292fedc6":"df_target=df_target[['Season','WTeamID','LTeamID','target']]\ndf_target.tail()","8d321d30":"df_2015_new_win=preprocess_win(df_sum_final_2015,2015,TeamID_2015)\ndf_2016_new_win=preprocess_win(df_sum_final_2016,2016,TeamID_2016)\ndf_2017_new_win=preprocess_win(df_sum_final_2017,2017,TeamID_2017)\ndf_2018_new_win=preprocess_win(df_sum_final_2018,2018,TeamID_2018)\ndf_2019_new_win=preprocess_win(df_sum_final_2019,2019,TeamID_2019)\ndf_2015_new_lose=preprocess_lose(df_sum_final_2015,2015,TeamID_2015)\ndf_2016_new_lose=preprocess_lose(df_sum_final_2016,2016,TeamID_2016)\ndf_2017_new_lose=preprocess_lose(df_sum_final_2017,2017,TeamID_2017)\ndf_2018_new_lose=preprocess_lose(df_sum_final_2018,2018,TeamID_2018)\ndf_2019_new_lose=preprocess_lose(df_sum_final_2019,2019,TeamID_2019)","899d756d":"df1=df_2015_new_win.append(df_2016_new_win)\ndf2=df1.append(df_2017_new_win)\ndf3=df2.append(df_2018_new_win)\ndf4=df3.append(df_2019_new_win)\ndf_final_win=df4\ndf_final_win","a3515770":"df1=df_2015_new_lose.append(df_2016_new_lose)\ndf2=df1.append(df_2017_new_lose)\ndf3=df2.append(df_2018_new_lose)\ndf4=df3.append(df_2019_new_lose)\ndf_final_lose=df4\ndf_final_lose","6f355c81":"df_final_win.columns=df_final_win.columns.get_level_values(0)\ndf_final_win.columns","beacd899":"#\u7b2c\u4e00\u53e5\u8bdd\u4e0d\u88ab\u8fd0\u884c\u662f\u7b2c\u4e00\u6b21\u7684\u65f6\u5019\u624d\u7528\uff1a\ndf_target_new=pd.merge(df_target,df_final_win,on = ['Season','WTeamID'],how='left')\ndf_target_new.tail()","9ffd2657":"df_final_lose.columns=df_final_lose.columns.get_level_values(0)\ndf_final_lose.columns","6ad49918":"df_target_new_W=pd.merge(df_target_new,df_final_lose,on = ['Season','LTeamID'],how='left')\ndf_target_new_W.tail()","052353dd":"df_target_new_W.to_csv('W_with_advanced_stat.csv')","523790ea":"df_target_new_W","4e26b8a1":"df=df_target_new\n#order=['Season','WTeamID','LTeamID','AT_win','eFG_win','TS_win','PER_win','AT_lose','eFG_lose','TS_lose','PER_lose','target']\ntarget=df['target']\ndf=df.drop('target',axis=1)\ndf['target']=target\ndf.tail()","c4ac6059":"df_plot=df[['target','AT_win','eFG_win','TS_win','PER_win']]\nsns.pairplot(df_plot, hue=\"target\", size=3, diag_kind=\"kde\")","35ba4975":"# Split the data \ndf_train=df[df['Season']<2019]\ndf_test=df[df['Season']>2018]\n\ndf_train=df_train.drop(['Season','WTeamID','LTeamID'],axis=1)\ndf_test=df_test.drop(['Season','WTeamID','LTeamID'],axis=1)\n\nm,n=np.shape(df_train)\n\nx_train = df_train.iloc[:,0:n-1].values\ny_train = df_train.target.values\n\nx_test = df_test.iloc[:,0:n-1].values\ny_test = df_test.target.values","1b25b6d4":"df=df_target_new_W\n#order=['Season','WTeamID','LTeamID','AT_win','eFG_win','TS_win','PER_win','AT_lose','eFG_lose','TS_lose','PER_lose','target']\ntarget=df['target']\ndf=df.drop('target',axis=1)\ndf['target']=target\ndf.tail()","21ab54d9":"df_plot=df[['target','AT_win','eFG_win','TS_win','PER_win']]\nsns.pairplot(df_plot, hue=\"target\", size=3, diag_kind=\"kde\")","a2ccfd88":"# Split the data \ndf_train=df[df['Season']<2019]\ndf_test=df[df['Season']>2018]\n\ndf_train=df_train.drop(['Season','WTeamID','LTeamID'],axis=1)\ndf_test=df_test.drop(['Season','WTeamID','LTeamID'],axis=1)\n\nm,n=np.shape(df_train)\n\nx_train = df_train.iloc[:,0:n-1].values\ny_train = df_train.target.values\n\nx_test = df_test.iloc[:,0:n-1].values\ny_test = df_test.target.values","bd506b82":"df=df_target_new_W\n#order=['Season','WTeamID','LTeamID','AT_win','eFG_win','TS_win','PER_win','AT_lose','eFG_lose','TS_lose','PER_lose','target']\ntarget=df['target']\ndf=df.drop('target',axis=1)\ndf['target']=target","fb5963f3":"df_plot=df[['target','AT_win','eFG_win','TS_win','PER_win']]\nsns.pairplot(df_plot, hue=\"target\", size=3, diag_kind=\"kde\")","023c7ce0":"# Split the data \ndf_train=df[df['Season']<2019]\ndf_test=df[df['Season']>2018]\n\ndf_train=df_train.drop(['Season','WTeamID','LTeamID'],axis=1)\ndf_test=df_test.drop(['Season','WTeamID','LTeamID'],axis=1)\n\nm,n=np.shape(df_train)\n\nx_train = df_train.iloc[:,0:n-1].values\ny_train = df_train.target.values\n\nx_test = df_test.iloc[:,0:n-1].values\ny_test = df_test.target.values","d7f4ddc1":"from sklearn.linear_model import LogisticRegressionCV\nfrom sklearn.metrics import accuracy_score\nlogreg = LogisticRegressionCV(cv=5,random_state=0, solver='newton-cg')\nlogreg.fit(x_train, y_train)\n\ny_pred_train = logreg.predict(x_train)\ny_pred_test = logreg.predict(x_test)\n\nprint(\"Coefficients :\", np.round(logreg.intercept_,4), np.round(logreg.coef_,4))","e3a5fbdd":"y_pred_train = logreg.predict(x_train)\ny_pred_test = logreg.predict(x_test)\n\naccuracy_train = accuracy_score(y_train, y_pred_train)\naccuracy_test = accuracy_score(y_test, y_pred_test)\nprint('Accuracy on the training set =', np.round(accuracy_train,4))\nprint('Accuracy on the test set =', np.round(accuracy_test,4))","8bdb3875":"df_2015=df_2015[['AT','eFG','TS','PER','TeamID']]\ndf_2016=df_2016[['AT','eFG','TS','PER','TeamID']]\ndf_2017=df_2017[['AT','eFG','TS','PER','TeamID']]\ndf_2018=df_2018[['AT','eFG','TS','PER','TeamID']]\ndf_2019=df_2019[['AT','eFG','TS','PER','TeamID']]","a91c7902":"coef=np.round(logreg.coef_,4)\ncoef[0][0:4]","84f7fb1a":"def project(df):\n    df_player_influence=0\n    for i in range(4):  \n        df_player_influence=coef[0][i]*df.iloc[:,i]+df_player_influence\n    df['player_influence']=df_player_influence\n    return df","0ab39299":"df_2015_new=project(df_2015)\ndf_2016_new=project(df_2016)\ndf_2017_new=project(df_2017)\ndf_2018_new=project(df_2018)\ndf_2019_new=project(df_2019)\n\ndf_2015_new.dropna(axis=0,how='any',inplace=True)\ndf_2016_new.dropna(axis=0,how='any',inplace=True)\ndf_2017_new.dropna(axis=0,how='any',inplace=True)\ndf_2018_new.dropna(axis=0,how='any',inplace=True)\ndf_2019_new.dropna(axis=0,how='any',inplace=True)","ab92405a":"def sum_influence(df,k,TeamID,q,number):\n    # k=len(TeamID)\n    df_sum_final=[]\n    df_sum_final.append(df[df['TeamID']==TeamID[0]]['player_influence'].sum())\n    lists=['influence_2015','influence_2016','influence_2017','influence_2018','influence_2019']\n    for i in range (1,k):\n        df_temp=df[df['TeamID']==TeamID[i]]['player_influence'].sum()\n        df_sum_final.append(df_temp)\n        #df_sum_final=df_sum_final.append([df_temp],ignore_index = False)\n    df_sum_final=pd.DataFrame(df_sum_final,columns=[lists[q]])\n    for i in range(k):\n        df_sum_final.loc[i]=df_sum_final.loc[i]\/number[i]\n    return df_sum_final","154e67a6":"team_2015_influence=sum_influence(df_2015_new,k_2015,TeamID_2015,0,number_2015)\nteam_2015_influence['Season_2015']=2015\nteam_2015_influence['TeamID']=TeamID_2015\n\nteam_2016_influence=sum_influence(df_2016_new,k_2016,TeamID_2016,1,number_2016)\nteam_2016_influence['Season_2016']=2016\nteam_2016_influence['TeamID']=TeamID_2016\n\nteam_2017_influence=sum_influence(df_2017_new,k_2017,TeamID_2017,2,number_2017)\nteam_2017_influence['Season_2017']=2017\nteam_2017_influence['TeamID']=TeamID_2017\n\nteam_2018_influence=sum_influence(df_2018_new,k_2018,TeamID_2018,3,number_2018)\nteam_2018_influence['Season_2018']=2018\nteam_2018_influence['TeamID']=TeamID_2018\n\nteam_2019_influence=sum_influence(df_2019_new,k_2019,TeamID_2019,4,number_2019)\nteam_2019_influence['Season_2019']=2019\nteam_2019_influence['TeamID']=TeamID_2019","bf10b66a":"df_1=pd.merge(team_2015_influence,team_2016_influence,on=['TeamID'])\ndf_2=pd.merge(df_1,team_2017_influence,on=['TeamID'])\ndf_3=pd.merge(df_2,team_2018_influence,on=['TeamID'])\ndf_final_influence=pd.merge(df_3,team_2019_influence,on=['TeamID'])\ndf_final_influence=df_final_influence.drop(['Season_2015','Season_2016','Season_2017','Season_2018','Season_2019'],axis=1)\nTeamID=df_final_influence['TeamID']\ndf_final_influence.drop(['TeamID'],axis=1,inplace=True)\ndf_final_influence.insert(0,'TeamID',TeamID)\ndf_final_influence.tail()","a4d94652":"df_final_influence.to_csv('team_influence_time_series.csv')","a0c67002":"!pip install pmdarima","8fcf57df":"import pmdarima as pm\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom statsmodels.tsa.stattools import adfuller\n\ndf_input=df_final_influence.iloc[:,1:6]\ndf_input=df_input.T\ndf_input.tail()\n\n\ndef auto_arima(df,i):\n    model = pm.auto_arima(df.iloc[:,i], trace=False, error_action='ignore', suppress_warnings=True)\n    model.fit(df.iloc[:,i])\n    forecast = model.predict(n_periods=1)\n    \n    return forecast","d6c8bca8":"m,n=np.shape(df_input)\nresult=[]\nfor i in range(n):\n    temp=auto_arima(df_input,i)\n    result.append(temp)","d347870a":"result=pd.DataFrame(result,columns=['prediction_2020'])\nresult=result.T\nresult","d14ce98d":"df_output=df_input.append(result)\ndf_output.tail()","e72edd1e":"df_output.to_csv('team_influence_prediction.csv')","fd013a6f":"!pip install chart_studio\n!pip install bubbly","d1eb9972":"df_output_new=df_output.T\ndf_1=df_output_new[['influence_2015']]\ndf_1.rename(columns={'influence_2015': 'influence'}, inplace=True)\ndf_1['teamid']=TeamID\ndf_1['season']='Real'\n\ndf_2=df_output_new[['influence_2016']]\ndf_2.rename(columns={'influence_2016': 'influence'}, inplace=True)\ndf_2['teamid']=TeamID\ndf_2['season']='Real'\n\ndf_3=df_output_new[['influence_2017']]\ndf_3.rename(columns={'influence_2017': 'influence'}, inplace=True)\ndf_3['teamid']=TeamID\ndf_3['season']='Real'\n\ndf_4=df_output_new[['influence_2018']]\ndf_4.rename(columns={'influence_2018': 'influence'}, inplace=True)\ndf_4['teamid']=TeamID\ndf_4['season']='Real'\n\ndf_5=df_output_new[['influence_2019']]\ndf_5.rename(columns={'influence_2019': 'influence'}, inplace=True)\ndf_5['teamid']=TeamID\ndf_5['season']='Real'\n\ndf_6=df_output_new[['prediction_2020']]\ndf_6.rename(columns={'prediction_2020': 'influence'}, inplace=True)\ndf_6['teamid']=TeamID\ndf_6['season']='Prediction'\n\ndf_bubble=pd.concat([df_1,df_2,df_3,df_4,df_5,df_6],axis=0)\ndf_bubble\n\n#df_bubble.iloc[:,0]=df_bubble.iloc[:,0]-min(df_bubble.iloc[:,0])\ndf_bubble.reset_index(drop=True, inplace=True)\ndf_bubble.sort_values(by='influence',ascending=False,inplace=True)\ndf_bubble_plot=df_bubble.head(100)\ndf_bubble_plot.tail()\n","8848b3f5":"from bubbly.bubbly import bubbleplot \nfrom plotly.offline import iplot\nimport chart_studio.plotly as py\n","5bc95cca":"figure = bubbleplot(dataset=df_bubble_plot, x_column='teamid', y_column='influence', \n                    bubble_column='season', size_column='influence', color_column='season', \n                    x_logscale=True, scale_bubble=2, height=350)\n\niplot(figure)","94b1140d":"import seaborn as sns\ndf_influence = df_bubble['influence']\nplt.figure(figsize=(8,6))\nsns.set_style(\"darkgrid\")\nsns.kdeplot(data=df_influence,label=\"Team_Competitiveness\" ,shade=True)","77fec69a":"logreg = LogisticRegressionCV(cv=5,random_state=0, solver='newton-cg')\nlogreg.fit(x_train_W, y_train_W)\n\ny_pred_train = logreg.predict(x_train_W)\ny_pred_test = logreg.predict(x_test_W)\n\nprint(\"Coefficients :\", np.round(logreg.intercept_,4), np.round(logreg.coef_,4))","a2087ce3":"df_2015=df_2015[['AT','eFG','TS','PER','TeamID']]\ndf_2016=df_2016[['AT','eFG','TS','PER','TeamID']]\ndf_2017=df_2017[['AT','eFG','TS','PER','TeamID']]\ndf_2018=df_2018[['AT','eFG','TS','PER','TeamID']]\ndf_2019=df_2019[['AT','eFG','TS','PER','TeamID']]","024c5dd6":"## data for women","23dbfd73":"To load the data of regular season, use 'MRegularSeasibCompactResults.csv' or 'WRegularSeasibCompactResults.csv'","54a9e573":"## using advanced statistics","540724cf":"# Using PyGam","846c278a":"## xgboost for women","4e2718b3":"#### Create Path directory","cfa13ae0":"# Descriptiond of the Competition\n\n#### There's a reason why it's called March Madness\u00ae. Upsets happen, underdogs become \"cinderellas,\" and games that analysts expected to be blowouts become nail-biters through the final seconds. A team's competitiveness is what keeps games exciting and the tournament truly \"mad.\"\n\n#### In addition to the predictive modeling competitions we typically host (NCAA Men's and Women\u2019s), we are hosting a separate competition using Kaggle Notebooks that challenges you to present an exploratory analysis of the \u201cMadness.\u201d Can you quantify competitiveness? Can you explain \"cinderella\u2026ness\"?\n\n#### Or perhaps, can you determine what dictates the ability of a team to \u201cstay in the game\u201d and increase their chance to win late in the contest? This may or may not be a scalar metric. It might be a clustering of types of competitiveness and then a rating within each. Does this metric have predictive power? The interpretation is up to you.\n\n### Your challenge is to tell a data story about college basketball through a combination of both narrative text and data exploration. A \u201cstory\u201d could be defined any number of ways, and that\u2019s deliberate. You are to deeply explore (through data) the mania of the Men\u2019s and Women\u2019s NCAA College Basketball tournaments. That story can be examined in the macro (for example: How does \u201ccompetitiveness\u201d differ from the regular season to their decisions in the tournament?) or the micro (for example: Does effectively neutralizing an opponent\u2019s star players increase their ability to \u201cstay in the game\u201d?).","39da08b4":"# Logistic Regression","c789373a":"### Load Necessary Library for the competetion","a7c9f85b":"## variable importance","7e4abc73":"## same for women","c4775329":"## lasso selection","1d6510de":"#### We use pairplot to show the bivariate data relation.\n#### Where we find \"target=1\" group shows a tighter convergence than \"target=0\" group. There is a different distribution of these four advanced statistics(AT,eFG,TS,PER) according to these two \"targets\", that is to say to some degree, \"target\" can be explained by these four stats. Hence, we then use Logistic Regression.","34d15c4a":"##  analysis by year","da762d4a":"### Load Data","ea5f3e1f":"# XGboost","03cdd893":"# Begining of player stats mining","e372e2db":"### Create Path","6d08d1de":"# Regression","19de1ad9":"**View Data for male and female**","8dd533ee":"## logistic regression with advanced stats"}}