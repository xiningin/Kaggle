{"cell_type":{"ed7bcf9b":"code","87f926bd":"code","22e9fb0f":"code","484327fb":"code","bb1694d6":"code","51c89725":"code","043d1994":"code","52cdd8fe":"code","eefddc26":"code","07573ccf":"code","1807b203":"code","534cef9a":"code","6306cd08":"code","093a2dc2":"code","645df96e":"code","342be3f5":"code","fe3805da":"code","59514046":"code","6d660784":"code","842f1eaa":"code","7029ffce":"code","0a0958ac":"code","063ebff6":"code","381cfc22":"code","b27566bd":"code","d0d225ce":"code","e93b1562":"code","0268ea07":"code","54bd9037":"code","4d0a9b75":"code","c696136e":"code","b5c067cb":"code","fb57e6f1":"code","3de74363":"code","54115bfc":"code","d5d11ee0":"code","384b4070":"code","914ef948":"code","00d7b8ac":"code","11c20bf6":"code","c194b4e0":"code","af7f8a12":"code","da10022a":"markdown","4c92c243":"markdown","ee2ac9d5":"markdown","e38fed77":"markdown","988ffed6":"markdown","99e2e46b":"markdown","642f0cf7":"markdown","8980f3f7":"markdown","0de52e40":"markdown","319e7484":"markdown","2d16baaf":"markdown","d279cf82":"markdown","4a96539a":"markdown","8d15b370":"markdown","8715cdf0":"markdown","0f18df7c":"markdown","d47c8bae":"markdown","6fa7e968":"markdown","65997700":"markdown","3cd5a215":"markdown","f7a899f7":"markdown"},"source":{"ed7bcf9b":"%matplotlib inline\nimport matplotlib.pyplot as plt\nplt.rcParams['figure.figsize'] = [15, 7.5]\nimport numpy as np\nimport pandas as pd\nimport string\nfrom collections import Counter\nimport nltk\nimport os\nimport re","87f926bd":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')","22e9fb0f":"level_one = train[train['difficulty']==1].copy()","484327fb":"level_one.shape","bb1694d6":"alp = pd.Series(Counter(''.join(level_one['ciphertext'])))\nalp.head(10)","51c89725":"alp.shape","043d1994":"from sklearn.datasets import fetch_20newsgroups\nnews = fetch_20newsgroups(subset='train')","52cdd8fe":"heads = [x[:6] for x in news['data']]","eefddc26":"Counter(heads).most_common(10)","07573ccf":"level_one['ciphertext'].apply(lambda x: x[:6]).value_counts().reset_index().head(10)","1807b203":"subs = {\n    'F': '*',\n    'r': '#',\n    'o': '^',\n    'm': '-',\n    ':': 'G',\n    ' ': '1'\n}\nsubs = {v:k for k, v in subs.items()}","534cef9a":"def decipher(ciphertext):\n    return ''.join([subs[c] if c in subs.keys() else '?' for c in ciphertext])\n\ndef undeciphered(ciphertext):\n    return ''.join(['?' if c in subs.keys() else c for c in ciphertext])","6306cd08":"level_one['ciphertext'].head(10).apply(decipher).reset_index()","093a2dc2":"heads = [x[:9] for x in news['data'] if x[:6] != 'From: ']\nCounter(heads).most_common()","645df96e":"heads = level_one['ciphertext'].apply(lambda x: x[:9]).value_counts().head(20).reset_index()\nheads['deciphered'] = heads['index'].apply(decipher)\nheads","342be3f5":"subs = {v: k for k, v in zip('From: ', '*#^-G1')}\nsubs.update({v: k for k, v in zip('Subject', '>c\u0003X\u001b_t')})","fe3805da":"heads = [x[:14] for x in news['data'] if x[:6] != 'From: ' and x[:9] != 'Subject: ']\nCounter(heads).most_common()","59514046":"heads = level_one['ciphertext'].apply(lambda x: x[:14]).value_counts().head(20).reset_index()\nheads['deciphered'] = heads['index'].apply(decipher)\nheads","6d660784":"subs = {v: k for k, v in zip('From: ', '*#^-G1')}\nsubs.update({v: k for k, v in zip('Subject', '>c\u0003X\u001b_t')})\nsubs.update({v: k for k, v in zip('Organization', '%#dO\u0002ahOta^\u0002')})","842f1eaa":"heads = level_one['ciphertext'].apply(lambda x: x[:14]).value_counts().head(10).reset_index()\nheads['deciphered'] = heads['index'].apply(decipher)\nheads","7029ffce":"heads = [x[:13] for x in news['data'] if x[:6] != 'From: ']\nCounter(heads).most_common(10)","0a0958ac":"heads = level_one['ciphertext'].apply(lambda x: x[:13]).value_counts().head(10).reset_index()\nheads['deciphered'] = heads['index'].apply(decipher)\nheads","063ebff6":"heads['index'][2]","381cfc22":"subs = {v: k for k, v in zip('From: ', '*#^-G1')}\nsubs.update({v: k for k, v in zip('Subject', '>c\u0003X\u001b_t')})\nsubs.update({v: k for k, v in zip('Organization', '%#dO\u0002ahOta^\u0002')})\nsubs.update({v: k for k, v in zip('R', '\\x1e')})","b27566bd":"heads = level_one['ciphertext'].apply(lambda x: x[:13]).value_counts().head(10).reset_index()\nheads['deciphered'] = heads['index'].apply(decipher)\nheads","d0d225ce":"heads = level_one['ciphertext'].apply(lambda x: x[:13]).value_counts().head(50).reset_index()\nheads['deciphered'] = heads['index'].apply(decipher)\nheads[heads['deciphered'].apply(lambda x: x[:4] != 'From')]","e93b1562":"heads = [x[:13] for x in news['data'] if x[:6] != 'From: ' and x[:9] != 'Subject: ']\nCounter(heads).most_common(10)","0268ea07":"subs = {v: k for k, v in zip('From: ', '*#^-G1')}\nsubs.update({v: k for k, v in zip('Subject', '>c\u0003X\u001b_t')})\nsubs.update({v: k for k, v in zip('Organization', '%#dO\u0002ahOta^\u0002')})\nsubs.update({v: k for k, v in zip('R', '\\x1e')})\nsubs.update({v: k for k, v in zip('Ds', 'xv')})","54bd9037":"heads = level_one['ciphertext'].apply(lambda x: x[:13]).value_counts().head(50).reset_index()\nheads['deciphered'] = heads['index'].apply(decipher)\nheads[heads['deciphered'].apply(lambda x: x[:4] != 'From')]","4d0a9b75":"level_one['ciphertext'].apply(decipher).iloc[3]","c696136e":"np.where([re.search(r'Samue\\w Ross', s) != None for s in news['data']])","b5c067cb":"news['data'][1646]","fb57e6f1":"level_one['ciphertext'].iloc[3]","3de74363":"level_one['ciphertext'].apply(decipher).iloc[3]","54115bfc":"level_one['ciphertext'].apply(undeciphered).iloc[3]","d5d11ee0":"news['data'][1646][:300]","384b4070":"subs = {v: k for k, v in zip('From: ', '*#^-G1')}\nsubs.update({v: k for k, v in zip('Subject', '>c\u0003X\u001b_t')})\nsubs.update({v: k for k, v in zip('Organization', '%#dO\u0002ahOta^\u0002')})\nsubs.update({v: k for k, v in zip('R', '\\x1e')})\nsubs.update({v: k for k, v in zip('Ds', 'xv')})\nsubs.update({v: k for k, v in zip('s', 'v')})\nsubs.update({v: k for k, v in zip('6@vl.d()\\nBkfhp!uywL28', '5bz8\\x08A|ysJf]0\\'P@oWFH,')})\nsubs.update({v: k for k, v in zip('N-pHMEAyTKIGCJW01', '\\x7fq9geE\/\\x10{w:\"2}l\\\\L')})","914ef948":"level_one['ciphertext'].apply(decipher).iloc[3]","00d7b8ac":"level_one['ciphertext'].apply(undeciphered).iloc[3]","11c20bf6":"len(subs.keys()) \/ len(alp)","c194b4e0":"for i in range(10):\n    print(level_one['ciphertext'].apply(decipher).iloc[i])\n    print('-' * 30)","af7f8a12":"for i in range(10):\n    print(level_one['ciphertext'].apply(decipher).iloc[-i-1])\n    print('-' * 30)","da10022a":"Row 2 now should be 'Organization'!","4c92c243":"There appears to be some plain text case swap (or it could be in the source text already). But otherwise, this message is cracked!","ee2ac9d5":"Looking at `Subject: Re: `","e38fed77":"### Chipher alphabet","988ffed6":"We found `Distribution: `!","99e2e46b":"Haha! Row 2 is probably 'Subject: '! We move on to the next target:","642f0cf7":"Found it! Not exact match but same post!","8980f3f7":"This step is just to match as many letters as possible by comparing both texts. We now have the results:","0de52e40":"We see that `From: ` is the most common beginning, so it should also mean that primative encryption algorithms will map them to the same block of ciphertext at corresponding positions.","319e7484":"We now have figured out enough letters. We might be able to directly map one text to the source.","2d16baaf":"### Count the Most Common Opening Words\n\nOur strategy is to find common words and phrases at the beginning or end of a text, find common patterns in the corresponding parts of the ciphertext, and try to connect them with each other.","d279cf82":"We can now iterate this process and look for the next matching target: `Subject: `","4a96539a":"We now know the number of distinct characters in the cipher text. Coupled this with interneuron's awesome analysis in the other notebook (cipher characters kind of follow a similar distribution to typical letter distribution), we can guess that cipher 1 uses a substitution algorithm.","8d15b370":"### Loading Data","8715cdf0":"Let us see if we can break simple ciphers with repeated appearing words and phrase! (SPOILER: cipher 1 is quite easy)","0f18df7c":"Onto the next: `?i?tribution:`","d47c8bae":"### Loading Plaintext","6fa7e968":"We have not cracked the full alphabet but this should be sufficient to continue working out all difficulty 1 texts.","65997700":"### Count the Most Common Opening Ciphertext Characters","3cd5a215":"We can confidently infer that\n> 'From: ' -> '*#^-G1'","f7a899f7":"current cipher alphabet coverage:"}}