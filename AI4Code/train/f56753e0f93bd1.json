{"cell_type":{"efd2b347":"code","3d2c7bdd":"code","a4b59f83":"code","510a6c86":"code","ae862221":"code","09da372b":"code","a2cf9c92":"code","2f9ea28a":"code","6e22a418":"code","0065a81a":"code","d1ff645d":"code","c45f04f6":"code","1d4d0894":"code","765afe3a":"code","7994d507":"code","24a916d2":"code","a89b160b":"code","ee501638":"code","3055c9c9":"code","3a294146":"code","32445692":"code","d9b20327":"code","fe14f5f2":"code","a5d06528":"code","c1a17fed":"markdown","5cda2501":"markdown","458e496a":"markdown","18861a8a":"markdown","62922a2a":"markdown","8724266f":"markdown","e609d189":"markdown","c0ac96d1":"markdown","e1e7ade6":"markdown","b960cd97":"markdown","41864a67":"markdown","19241d32":"markdown","0b011a6c":"markdown","19403f57":"markdown","de5e3187":"markdown","5c0ea7d4":"markdown","057d36d9":"markdown","494eac02":"markdown","cf3425a9":"markdown","9306eac1":"markdown","4160865e":"markdown","8170158c":"markdown"},"source":{"efd2b347":"import pandas as pd\n\nfile_folder = '..\/input\/'\nfile_name = 'stars_with_trimmed_skewness_of_anomaly.csv'\npos_data = pd.read_csv(file_folder + file_name, dtype={'source_id': str})\nlen(pos_data)","3d2c7bdd":"pos_data.columns","a4b59f83":"from scipy.stats import binom\n\ndef get_ratio_scale(n, p, confidence_level=0.9999):\n    cumulative_density = 0\n    max_k = None\n    for k in range(0, n):\n        density = binom.pmf(k, n, p)\n        cumulative_density += density\n        if cumulative_density >= confidence_level:\n            max_k = k\n            break\n    if max_k is None:\n        max_k = n\n    expected_k = n * p\n    return max_k \/ expected_k","510a6c86":"get_ratio_scale(200, 0.5)","ae862221":"get_ratio_scale(200, 0.01)","09da372b":"import numpy as np\n\nanomaly_selection_fractions = np.logspace(np.log10(0.0008), np.log10(0.008), 30)\nskewness_selection_fractions = np.logspace(np.log10(0.008), np.log10(0.08), 30)","a2cf9c92":"NEIGHBOR_METRIC_COLUMN = 'best_std_skewness'\npos_data_anomaly_ordering = np.argsort(pos_data['anomaly'].values)\npos_data_skewness_ordering = np.argsort(pos_data[NEIGHBOR_METRIC_COLUMN].values)","2f9ea28a":"from scipy.stats import binom\n\nresults_frame = pd.DataFrame(columns=['f', 'g', 'cand_count', 'expected_count', 'ratio', 'scaled_ratio', 'cumul_density'])\npos_data_len = len(pos_data)\nfor asf in anomaly_selection_fractions:\n    for ssf in skewness_selection_fractions:\n        expected_count = pos_data_len * asf * ssf\n        anomaly_count = int(round(pos_data_len * asf))\n        skewness_count = int(round(pos_data_len * ssf))\n        anomalous_sub_frame = pos_data.iloc[pos_data_anomaly_ordering[:anomaly_count]]\n        skewed_sub_frame = pos_data.iloc[pos_data_skewness_ordering[:skewness_count]]\n        source_id_in_common = set(anomalous_sub_frame['source_id']).intersection(set(skewed_sub_frame['source_id']))\n        cand_count = len(source_id_in_common)\n        actual_p = (anomaly_count \/ pos_data_len) * (skewness_count \/ pos_data_len)\n        ratio = cand_count \/ expected_count\n        ratio_scale = get_ratio_scale(pos_data_len, actual_p)\n        if ratio_scale == 0:\n            raise ValueError('p=' + str(actual_p) + ' is too small!')\n        scaled_ratio = ratio \/ ratio_scale\n        cumul_density = binom.cdf(cand_count - 1, pos_data_len, actual_p)\n        results_frame.loc[len(results_frame)] = [asf, ssf, cand_count, expected_count, ratio, scaled_ratio, cumul_density]","6e22a418":"results_frame.sort_values('scaled_ratio', ascending=False).head(10)","0065a81a":"import matplotlib.pyplot as plt","d1ff645d":"plt.rcParams['figure.figsize'] = (10, 5)\nplt.hist(results_frame['cumul_density'], bins=100)\nplt.title('Distribution of cumulative binomial density\\nin search space')\nplt.xlabel('Cumulative density')\nplt.ylabel('Frequency')\nplt.show()","c45f04f6":"top_count_row = results_frame.sort_values('scaled_ratio', ascending=False).iloc[0]","1d4d0894":"select_anomaly_fraction = top_count_row['f']\nselect_anomaly_fraction","765afe3a":"select_skewness_fraction = top_count_row['g']\nselect_skewness_fraction","7994d507":"anomaly_count = int(round(pos_data_len * select_anomaly_fraction))\nskewness_count = int(round(pos_data_len * select_skewness_fraction))\nanomalous_sub_frame = pos_data.iloc[pos_data_anomaly_ordering[:anomaly_count]]\nskewed_sub_frame = pos_data.iloc[pos_data_skewness_ordering[:skewness_count]]","24a916d2":"source_id_in_common = set(anomalous_sub_frame['source_id']).intersection(set(skewed_sub_frame['source_id']))","a89b160b":"candidates = pos_data[pos_data['source_id'].isin(source_id_in_common)]","ee501638":"len(candidates)","3055c9c9":"def get_sun():\n    new_frame = pd.DataFrame(columns=['source_id', 'x', 'y', 'z'])\n    new_frame.loc[0] = ['sun', 0.0, 0.0, 0.0]\n    return new_frame","3a294146":"import warnings\n\nwarnings.simplefilter(action='ignore', category=FutureWarning)\ncandidates_with_extras = pd.concat([candidates, pos_data[pos_data['source_id'] == '2081900940499099136'], get_sun()])","32445692":"import plotly.plotly as py\nimport plotly.offline as py\nimport plotly.graph_objs as go\n\npy.init_notebook_mode(connected=False)","d9b20327":"def plot_pos_frame(pos_frame, star_color, sun_color = 'blue', bstar_color = 'black'):    \n    star_color = [(bstar_color if row['source_id'] == '2081900940499099136' else (sun_color if row['source_id'] == 'sun' else star_color)) for _, row in pos_frame.iterrows()]\n    trace1 = go.Scatter3d(\n        x=pos_frame['x'],\n        y=pos_frame['y'],\n        z=pos_frame['z'],\n        mode='markers',\n        text=pos_frame['source_id'],\n        marker=dict(\n            size=3,\n            color=star_color,\n            opacity=0.67\n        )\n    )\n    scatter_data = [trace1]\n    layout = go.Layout(\n        margin=dict(\n            l=0,\n            r=0,\n            b=0,\n            t=0\n        )\n    )\n    fig = go.Figure(data=scatter_data, layout=layout)\n    py.iplot(fig)","fe14f5f2":"plot_pos_frame(candidates_with_extras, 'red')","a5d06528":"candidates.to_csv('clustered-bright-candidates.csv', index=False)","c1a17fed":"## Ratio scaling\nWe would like to maximize the ratio of the number of candidates to expected number of spurious candidates. When the probability *p* of sampling spurious candidates out of *n* stars is small, the confidence interval on the expected number of spurious candidates will be comparatively large, so we need to control for that.\n\nThe following function will provide us a scale of the ratio. It calculates the cumulative binomial density with incremental values of *k*, until it reaches at least *confidence_level*, which is set to 99.99%. The last value of *k* is divided by the expected number of spurious candidates. This ratio will be a scaling factor for ratios we find in actual analysis.","5cda2501":"Which means our multi-stellar SETI candidates are given by:","458e496a":"Examples:","18861a8a":"Top picks are clearly significant. For them, cumulative binomial density is nearly 100%. But we're doing multiple comparisons. Let's take a look at the distribution of cumulative densities across the search space.","62922a2a":"As usual, we'll show 3D scatter charts of our candidates. The sun (blue) and KIC 8462852 (black) will be included for reference.","8724266f":"## Overview\nIn [Part 2 of the series](https:\/\/www.kaggle.com\/solorzano\/multi-stellar-seti-candidate-selection-part-2), we searched for stars that are anomalously dim and whose neighbors have an *anomaly* distribution that is highly skewed right. In this kernel, the math is the same, except we reverse the *anomaly* and *skewness* orderings, such that we search for stars that are anomalously bright and whose neighbors have a *skewness* that is anomalously low.\n\nWhat could anomalously bright stars be? No one, to our knowledge, has suggested that brighter-than-expected stars could be SETI candidates. It should be noted that in the dataset we're using, giants have been largely removed. Unusually bright stars should be in the main sequence.\n\nPresumably, binary systems could show up as unexpectedly bright sources. \n\nFrom a SETI perspective, what we could be looking at is stars that haven't gotten brighter necessarily, but instead have become redder without getting much dimmer.\n\nAnomalously bright and clustered candidates are made available in the output tab. The <a href=\"#candidates_scatter_chart\">3D scatter chart<\/a> shows a peculiar pattern, which \u2013 importantly \u2013 does not align with Earth.\n\n**Updates:**\n* 9\/1\/2018: The output of Part 1 changed. Also, the idea of a scaling ratio was introduced.","e609d189":"Let's now get the headset frames based on *anomaly* and *skewness*.","c0ac96d1":"## Significance","e1e7ade6":"## Candidate set\nThe top row of the results frame is:","b960cd97":"## Location of candidates in space","41864a67":"The primary routine follows. It produces a frame with one row for each (*f*, *g*) combination. Each row has the size of the intersection of the headsets of each series (i.e. the number of candidates), the *ratio* to number of spurious candidates, and the scaled ratio. We're also adding the cumulative binomial density for *k = cand_count - 1* (i.e. the odds that one would draw less than *cand_count* samples by chance.)","19241d32":"The Gaia source IDs in common between the two headsets are:","0b011a6c":"## Data\nData comes from the output tab of [Part 1](https:\/\/www.kaggle.com\/solorzano\/multi-stellar-seti-candidate-selection-part-1). The columns we're interested in are *anomaly* and *best_std_skewness*.","19403f57":"It's an interesting pattern, and highly clustered near the galactic plane.","de5e3187":"The best values of *f* and *g* are:","5c0ea7d4":"## Output","057d36d9":"## Grid search of selection fractions\nWe'll define search ranges for *f* and *g*, with 30 steps each. That is, we'll test 900 combinations of *f* and *g* values. We try to center the ranges around best values found in prior runs, but we keep range width at an order of magnitude. Range step scaling is logarithmic.","494eac02":"The search space is not small, so this is convincing. Of course, we haven't ruled out data\/model artifacts or natural astrophysical phenomena as explanatory when it comes to regional *skewness*.","cf3425a9":"Let's now get the ascending order indexes of the *anomaly* and *skewness* series. (This is where the analysis changes relative to Part 1.)","9306eac1":"<a id=\"candidates_scatter_chart\"><\/a>","4160865e":"<a id=\"results_frame\"><\/a>\nThe top 10 results in descending order of 'scaled_ratio' follow.","8170158c":"How many?"}}