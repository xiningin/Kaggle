{"cell_type":{"2fc3b0b1":"code","910ef85c":"code","5db42b17":"code","25804ea6":"code","f6b74fd1":"code","9e36cc61":"code","3e4c16bf":"code","4c5ee119":"code","45b57dd4":"code","86a8be56":"code","2cea5bee":"code","9e78ce58":"code","08eb3b7f":"code","fda211f9":"code","310ce614":"code","79f6de21":"code","e6334b8a":"code","992109da":"code","c7ca5258":"code","f78856cd":"code","30f1fc3d":"code","bc13c98e":"code","4947e38f":"code","6b005f2d":"code","4184c2a1":"code","9eccb7bf":"code","271504c8":"code","12d7645f":"code","88009ccf":"code","34df2c11":"code","062adbc0":"code","ada56682":"code","78027fd3":"code","2871fb0c":"code","98ed51fa":"code","5ee7ab32":"code","aa82b34b":"code","1b20f688":"code","539e16a0":"code","31833cb8":"code","1017c267":"code","dfcd8e7f":"code","3b21772c":"markdown","049ee357":"markdown","67738788":"markdown","05a2c82c":"markdown","45454cd0":"markdown","b5596c74":"markdown","1572306d":"markdown","c7447385":"markdown","2ddca07b":"markdown","8a34c8a7":"markdown","e8c01b45":"markdown","ab7a152a":"markdown","fd9c9aec":"markdown","4d00116a":"markdown","0ecdaa19":"markdown","efd9fb39":"markdown"},"source":{"2fc3b0b1":"tez_path = '..\/input\/tez-lib\/'\neffnet_path = '..\/input\/efficientnet-pytorch\/'\nimport sys\nsys.path.append(tez_path)\nsys.path.append(effnet_path)","910ef85c":"import os\nimport albumentations as A\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\nimport tez\nfrom tez.datasets import ImageDataset\nfrom tez.callbacks import EarlyStopping\n\nimport torch\nimport torch.nn as nn\n\nimport torchvision\n\nimport pickle\n\nfrom sklearn import metrics, model_selection\n\n%matplotlib inline","5db42b17":"dfx = pd.read_csv(\"..\/input\/plant-pathology-2021-fgvc8\/train.csv\")\ndfx.head()","25804ea6":"from sklearn.preprocessing import LabelEncoder\n\nlabelencoder = LabelEncoder()\ndfx[\"encoded_labels\"] = labelencoder.fit_transform(dfx[\"labels\"])\ndfx.head()","f6b74fd1":"dfx.encoded_labels.value_counts()","9e36cc61":"df_train, df_valid = model_selection.train_test_split(dfx, test_size=0.2, random_state=42, stratify=dfx.encoded_labels.values)\n\ndf_train = df_train.reset_index(drop=True)\ndf_valid = df_valid.reset_index(drop=True)","3e4c16bf":"df_train.shape","4c5ee119":"df_valid.shape","45b57dd4":"image_path = \"..\/input\/resized-plant2021\/img_sz_512\"\n\ntrain_image_paths = [\n    os.path.join(image_path, x) for x in df_train.image.values\n]\n\nvalid_image_paths = [\n    os.path.join(image_path, x) for x in df_valid.image.values\n]","86a8be56":"train_image_paths[:5]","2cea5bee":"valid_image_paths[:5]","9e78ce58":"train_target = df_train.encoded_labels.values\nvalid_target = df_valid.encoded_labels.values","08eb3b7f":"train_target","fda211f9":"valid_target","310ce614":"train_dataset = ImageDataset(\n    image_paths = train_image_paths,\n    targets = train_target,\n    augmentations = None\n)","79f6de21":"def plot_img(img_dict):\n    img_tensor = img_dict['image']\n    target = img_dict['targets']\n    print(target)\n    plt.figure(figsize=(5,5))\n    image = img_tensor.permute(1,2,0)\/255\n    plt.imshow(image)","e6334b8a":"plot_img(train_dataset[10])","992109da":"train_aug = A.Compose(\n    [\n        A.RandomResizedCrop(256, 256),\n        A.Transpose(p=0.5),\n        A.HorizontalFlip(p=0.5),\n        A.VerticalFlip(p=0.5),\n        A.HueSaturationValue(\n            hue_shift_limit=0.2, \n            sat_shift_limit=0.2,\n            val_shift_limit=0.2, \n            p=0.5\n        ),\n        A.RandomBrightnessContrast(\n            brightness_limit=(-0.1,0.1), \n            contrast_limit=(-0.1, 0.1), \n            p=0.5\n        ),\n#         A.Normalize(\n#             mean=[0.485, 0.456, 0.406], \n#             std=[0.229, 0.224, 0.225], \n#             max_pixel_value=255.0, \n#             p=1.0\n#         )\n    ]\n)\n\nvalid_aug = A.Compose(\n    [\n        A.CenterCrop(256, 256, p=1.0),\n        A.Transpose(p=0.5),\n        A.HorizontalFlip(p=0.5),\n        A.VerticalFlip(p=0.5),\n        A.HueSaturationValue(\n            hue_shift_limit=0.2, \n            sat_shift_limit=0.2,\n            val_shift_limit=0.2, \n            p=0.5\n        ),\n        A.RandomBrightnessContrast(\n            brightness_limit=(-0.1,0.1), \n            contrast_limit=(-0.1, 0.1), \n            p=0.5\n        ),\n#         A.Normalize(\n#             mean=[0.485, 0.456, 0.406], \n#             std=[0.229, 0.224, 0.225], \n#             max_pixel_value=255.0, \n#             p=1.0\n#         )\n    ]\n)","c7ca5258":"train_dataset = ImageDataset(\n    image_paths = train_image_paths,\n    targets = train_target,\n    augmentations = train_aug\n)\n\nvalid_dataset = ImageDataset(\n    image_paths = valid_image_paths,\n    targets = train_target,\n    augmentations = valid_aug\n)","f78856cd":"plot_img(train_dataset[10])","30f1fc3d":"pretrained=True\npretrained_model = torchvision.models.resnet18(pretrained=True, progress = True)","bc13c98e":"class PlantModel(tez.Model):\n    def __init__(self, num_classes):\n        super().__init__()\n        self.convnet = pretrained_model\n        self.convnet.fc = nn.Linear(512, num_classes)\n        self.step_scheduler_after = \"epoch\"\n        \n    def loss(self, outputs, targets):\n        if targets is None: \n            return None\n        return nn.CrossEntropyLoss()(outputs, targets)\n    \n    def monitor_metrics(self, outputs, targets):\n        outputs = torch.argmax(outputs, dim = 1).cpu().detach().numpy()\n        targets = targets.cpu().detach().numpy()\n        acc = metrics.accuracy_score(targets, outputs)\n        f1 = metrics.f1_score(targets, outputs, average=\"weighted\")\n        \n        if (self.model_state == \"train\"):\n            print(\"tranning\")\n        return{\n            \"accuracy\" : acc,\n            \"f1-score\": f1\n        }\n    \n    def fetch_optimizer(self):\n        opt = torch.optim.Adam(self.parameters(), lr=1e-3)\n        return opt\n\n    def fetch_scheduler(self):\n        sch = torch.optim.lr_scheduler.StepLR(self.optimizer, step_size=0.7)\n        return sch\n        \n    def forward(self, image, targets=None):\n        outputs = self.convnet(image)\n        if targets is not None: \n            loss = self.loss(outputs, targets)\n            mon_metrics = self.monitor_metrics(outputs, targets)\n#             print(mon_metrics)\n            return outputs, loss, mon_metrics\n        return outputs, None, None\n        ","4947e38f":"# torchvision.models.resnet152(pretrained=False)","6b005f2d":"model = PlantModel(num_classes = dfx.encoded_labels.nunique())","4184c2a1":"img = train_dataset[0][\"image\"]\ny = train_dataset[0][\"targets\"]\nmodel(img.unsqueeze(0), y.unsqueeze(0))","9eccb7bf":"# model","271504c8":"es = EarlyStopping(\n    monitor = \"train_accuracy\", \n    model_path = \"model.bin\", \n    patience = 2, \n    mode='max'\n)\n\nmodel.fit(\n    train_dataset,\n    valid_dataset = valid_dataset,\n    train_bs = 32,\n    valid_bs = 64,\n    device = \"cuda\",\n    callbacks = [es],\n    fp16 = True,\n    epochs = 2\n)","12d7645f":"Pkl_Filename = \"Pickle_Resnet152_epoch2.pkl\"\nwith open(Pkl_Filename, 'wb') as file:  \n    pickle.dump(model, file)","88009ccf":"test_dfx = pd.read_csv(\"..\/input\/plant-pathology-2021-fgvc8\/sample_submission.csv\")\nimage_path = \"..\/input\/plant-pathology-2021-fgvc8\/test_images\/\" \n\n# Pkl_Filename = \"..\/input\/resnet152-tez\/Pickle_Resnet152_epoch1.pkl\"\n# with open(Pkl_Filename, 'rb') as file:  \n#     model = pickle.load(file)\n\ntest_dfx.head()","34df2c11":"from sklearn.preprocessing import LabelEncoder\n\nlabelencoder = LabelEncoder()\ntest_dfx[\"encoded_labels\"] = labelencoder.fit_transform(test_dfx[\"labels\"])\ntest_dfx.head()","062adbc0":"test_image_paths = [\n    os.path.join(image_path, x) for x in test_dfx.image.values\n]\n\ntest_target = test_dfx.encoded_labels","ada56682":"test_aug = A.Compose(\n    [\n        A.RandomResizedCrop(256, 256),\n        A.Transpose(p=0.5),\n        A.HorizontalFlip(p=0.5),\n        A.VerticalFlip(p=0.5),\n        A.HueSaturationValue(\n            hue_shift_limit=0.2, \n            sat_shift_limit=0.2,\n            val_shift_limit=0.2, \n            p=0.5\n        ),\n        A.RandomBrightnessContrast(\n            brightness_limit=(-0.1,0.1), \n            contrast_limit=(-0.1, 0.1), \n            p=0.5\n        ),\n#         A.Normalize(\n#             mean=[0.485, 0.456, 0.406], \n#             std=[0.229, 0.224, 0.225], \n#             max_pixel_value=255.0, \n#             p=1.0\n#         )\n    ]\n)","78027fd3":"test_dataset = ImageDataset(\n    image_paths = test_image_paths,\n    targets = test_target,\n    augmentations = test_aug\n)\n\ntest_dataset[0]","2871fb0c":"final_preds = None\nfor j in range(5):\n    preds = model.predict(test_dataset, batch_size=32, n_jobs=-1)\n    temp_preds = None\n    for p in preds:\n        if temp_preds is None:\n            temp_preds = p\n        else:\n            temp_preds = np.vstack((temp_preds, p))\n    if final_preds is None:\n        final_preds = temp_preds\n    else:\n        final_preds += temp_preds\nfinal_preds \/= 5","98ed51fa":"final_preds = final_preds.argmax(axis=1)\nfinal_preds","5ee7ab32":"test_dfx.encoded_labels = final_preds\ntest_dfx.head()","aa82b34b":"lblist = df_train.drop_duplicates(subset=['labels'])\nlblist = lblist.set_index(\"encoded_labels\")\nlblist","1b20f688":"# lblist.at[5, \"labels\"]","539e16a0":"def get_labels(val):\n    return lblist.at[val, \"labels\"]","31833cb8":"pred_lists = []\nfor i, pred in enumerate(final_preds):\n    label = get_labels(pred)\n    pred_lists.append(label)\n    \npred_lists","1017c267":"test_dfx[\"labels\"] = pred_lists\ntest_dfx = test_dfx.drop(columns=['encoded_labels'])\ntest_dfx","dfcd8e7f":"test_dfx.to_csv(\"submission.csv\", index=False)","3b21772c":"# **Augmentation**","049ee357":"**Load test data**","67738788":"**Resnet152 structure**","05a2c82c":"# **Create train_dataset**","45454cd0":"# **Predict testset**","b5596c74":"**Train model**","1572306d":"# **Encoded labels**","c7447385":"# **Load data**","2ddca07b":"**Encode label**","8a34c8a7":"**Plot image**","e8c01b45":"**Set train, valid target**","ab7a152a":"# **Create Model**","fd9c9aec":"**Our custom model**","4d00116a":"**Apply augmentation**","0ecdaa19":"# **Import image**","efd9fb39":"# **Split train, valid & Reset index**"}}