{"cell_type":{"7b4fe807":"code","8c8fc15c":"code","6c5e4941":"code","53b0b564":"code","1fd0ed7b":"code","79c9038a":"code","6d5f1813":"code","7050bc1a":"code","c4038947":"code","f7f193d5":"code","125f0798":"code","5b3c853e":"code","a58163aa":"code","73cbf3cf":"code","10b29dad":"code","f1068dcd":"code","3da1773d":"code","c0325f30":"markdown","2dc04057":"markdown","99b8afd1":"markdown","b1cba4a8":"markdown","c7d5df67":"markdown","3a707317":"markdown","4e410e84":"markdown","70fb1053":"markdown","73e51f6b":"markdown","8aa07d2c":"markdown","1f33ad13":"markdown","bc17b8e6":"markdown","7c7d99fa":"markdown","d844414a":"markdown","d7996d3c":"markdown","83e2d182":"markdown","63f6ea8d":"markdown","a04d3e51":"markdown"},"source":{"7b4fe807":"import numpy as np \nimport pandas as pd \nimport time\nfrom sklearn.model_selection import train_test_split, cross_validate, RandomizedSearchCV, GridSearchCV, StratifiedKFold\nfrom sklearn.preprocessing import RobustScaler\nfrom lightgbm import LGBMClassifier\nfrom sklearn.metrics import f1_score, precision_score, recall_score\nfrom sklearn.cluster import KMeans\nfrom imblearn.pipeline import Pipeline\nfrom imblearn.over_sampling import SMOTE\nfrom collections import Counter\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nsns.set_style(\"darkgrid\")\nfrom warnings import simplefilter\nfrom sklearn.exceptions import ConvergenceWarning\nsimplefilter(\"ignore\", category=ConvergenceWarning)\nsimplefilter(\"ignore\", category=UserWarning)\nfrom pandas.core.common import SettingWithCopyWarning\nsimplefilter(action=\"ignore\", category=SettingWithCopyWarning)","8c8fc15c":"X_all_data = pd.read_csv('\/kaggle\/input\/creditcardfraud\/creditcard.csv')\nX_all_data.info()","6c5e4941":"X_all_data.isnull().sum()","53b0b564":"y_all_data = X_all_data.Class\nX_all_data.drop(['Class'], axis=1, inplace=True)\nX_all_data.head()","1fd0ed7b":"y_all_data.value_counts()","79c9038a":"X_train_valid, X_test, y_train_valid, y_test = train_test_split(X_all_data, y_all_data, train_size=0.85, test_size=0.15, random_state=1)","6d5f1813":"fig = plt.figure(figsize=(18,22))\nfor index in range(len(X_train_valid.columns)):\n    plt.subplot(10,3,index+1)\n    sns.distplot(X_train_valid.iloc[:,index].dropna(), norm_hist=False)\nfig.tight_layout(pad=1.0)","7050bc1a":"fig = plt.figure(figsize=(18,22))\nfor index in range(len(X_train_valid.columns)):\n    plt.subplot(10,3,index+1)\n    sns.boxplot(y=X_train_valid.iloc[:,index], data=X_train_valid.dropna())\nfig.tight_layout(pad=1.0)","c4038947":"plt.figure(figsize=(18,16))\ncorrelation = X_train_valid.corr()\nsns.heatmap(correlation, mask = correlation <0.1, linewidth=0.5, cmap='Blues', annot=True)","f7f193d5":"sm = SMOTE(sampling_strategy = 0.1, n_jobs=-1, random_state = 1)","125f0798":"def evaluate_model(model, name):\n    model_performances = pd.DataFrame({\n        'Model' : [name],\n        'Mean F1 score(val)' : round(model.cv_results_['mean_test_f1'][model.best_index_], 3),\n        'Mean Precision(val)': round(model.cv_results_['mean_test_precision'][model.best_index_], 3),\n        'Mean Recall(val)': round(model.cv_results_['mean_test_recall'][model.best_index_], 3),\n        'Fit time(val)': round(model.cv_results_['mean_fit_time'][model.best_index_], 3)\n    })\n    model_performances.set_index('Model', inplace=True, drop=True)\n    return model_performances","5b3c853e":"kf = StratifiedKFold(5, shuffle=True, random_state=1)","a58163aa":"start = time.time()\n\nlgbm = Pipeline([\n        ('sampling', sm),\n        ('scaling', RobustScaler()),\n        ('model', LGBMClassifier())\n    ])\n\nparam_lst_lgbm = {\n    'model__max_depth' : [2, 3, 5, 7, 8],\n    'model__num_leaves' : [3, 5, 20, 80, 180],\n    'model__learning_rate' : [0.001, 0.01, 0.1, 0.2],\n    'model__n_estimators' : [100, 300, 500, 1000, 1500, 2000],\n    'model__reg_alpha' : [0.001, 0.01, 1, 10, 100],\n    'model__reg_lambda' : [0.001, 0.01, 1, 10, 100],\n    'model__colsample_bytree' : [0.5, 0.7, 0.8],\n    'model__min_child_samples' : [5, 10, 20, 25],\n}\n\nlgbm_cv = RandomizedSearchCV(estimator = lgbm,\n                              param_distributions = param_lst_lgbm,\n                              n_iter = 30,\n                              scoring = ['f1', 'precision', 'recall'],\n                              refit='f1',\n                              cv = kf,\n                              n_jobs = -1)\n       \nlgbm_search = lgbm_cv.fit(X_train_valid, y_train_valid)\n\nbest_param_lgbm = lgbm_search.best_params_\nend = time.time()\ntime_lgbm = round(end-start, 0)\nprint('Dobrane parametry dla modelu LGBM: ', best_param_lgbm)\nprint('Czas dopierania parametr\u00f3w: ', time_lgbm, ' [sek]')","73cbf3cf":"cv_lgbm = evaluate_model(lgbm_search,  'LGBM')\nprint(cv_lgbm)","10b29dad":"def evaluate_model_test(model, X, y, name):\n    start = time.time()\n    pred = model.predict(X) \n    end = time.time()\n    f1_sc = f1_score(y, pred)\n    precision_sc = precision_score(y, pred)\n    recall_sc = recall_score(y, pred)\n    model_performances_test = pd.DataFrame({\n        'Model' : [name],\n        'F1 score(test)' : round(f1_sc, 3),\n        'Precision(test)': round(precision_sc, 3),\n        'Recall(test)': round(recall_sc, 3),\n        'Predict time' : round(end-start, 4)\n    })\n    model_performances_test.set_index('Model', inplace=True, drop=True)\n    return model_performances_test","f1068dcd":"test_lgbm = evaluate_model_test(lgbm_search, X_test, y_test, 'LGBM')\nresults_all = pd.concat([cv_lgbm, test_lgbm ], axis=1)\nresults_all.head()","3da1773d":"feature_imp = pd.DataFrame(sorted(zip(lgbm_search.best_estimator_.named_steps['model'].feature_importances_,X_test.columns)), columns=['Value','Feature'])\n\nplt.figure(figsize=(20, 10))\nsns.barplot(x=\"Value\", y=\"Feature\", data=feature_imp.sort_values(by=\"Value\", ascending=False))\nplt.title('LightGBM Features (avg over folds)')\nplt.tight_layout()\nplt.show()","c0325f30":"# Results","2dc04057":"A function that presents the results of classification on a test set.","99b8afd1":"Distribution of values in individual columns.","b1cba4a8":"Application of the SMOTE algorithm to oversampling an unbalanced data set. Its parameters are listed below, while the algorithm is performed separately for each cross-validation.","c7d5df67":"Split data to x and y","3a707317":"Load libraries","4e410e84":"Model LightGBM.","70fb1053":"Load data","73e51f6b":"Check if the data set is balanced or not.","8aa07d2c":"Check null values","1f33ad13":"# Classification model","bc17b8e6":"Comparison of the results obtained on the test set and on the validation sets.","7c7d99fa":"# Preprocessing","d844414a":"Function showing the results of a 5-fold model validation.","d7996d3c":"Using RobustScaler to reduce the impact of extreme feature values.","83e2d182":"# Load libraries and data","63f6ea8d":"Correlation between individual features.","a04d3e51":"Split data to train\/valid and test set"}}