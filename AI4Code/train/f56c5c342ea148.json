{"cell_type":{"33ebc526":"code","c2dcb5c6":"code","a042d700":"code","31180510":"code","f7850c36":"code","e9f77f3b":"code","cbb8f63b":"code","fa6cd80d":"code","726e7c35":"code","19be7ed5":"code","ac7e4628":"code","30b60e5f":"code","59fb9882":"code","a04008a8":"code","de680e41":"code","418113af":"code","f3ccd05d":"code","bc7cd1ac":"code","ce05ea94":"code","2a672ca1":"code","17286d33":"code","b32b82dc":"code","4063491f":"code","2d09b6bf":"code","0b40a78b":"code","25b578ef":"code","53ab0c80":"code","1d92941b":"code","130efc65":"code","f5d27998":"code","8db29433":"code","f23e238c":"code","6e170727":"code","4b0cc330":"markdown","b893e3c2":"markdown","1a6798de":"markdown","35871329":"markdown","d3ecbf22":"markdown","f6119eb2":"markdown","33a76079":"markdown"},"source":{"33ebc526":"! pip install neural_structured_learning","c2dcb5c6":"import math\nimport numpy as np\nimport pandas as pd\n\nimport scikitplot\nimport seaborn as sns\nfrom matplotlib import pyplot\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.metrics import classification_report\n\nimport tensorflow as tf\nfrom tensorflow.keras import optimizers\nfrom tensorflow.keras.datasets import mnist\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Flatten, Dense, Conv2D, MaxPooling2D\nfrom tensorflow.keras.layers import Dropout, BatchNormalization, LeakyReLU, Activation\nfrom tensorflow.keras.callbacks import Callback, EarlyStopping, ReduceLROnPlateau\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\n\nimport neural_structured_learning as nsl\n\nfrom keras.utils import np_utils","a042d700":"df = pd.read_csv('..\/input\/facial-expression-recognitionferchallenge\/fer2013\/fer2013\/fer2013.csv')\nprint(df.shape)\ndf.head()","31180510":"df.emotion.unique()","f7850c36":"emotion_label_to_text = {0:'anger', 1:'disgust', 2:'fear', 3:'happiness', 4: 'sadness', 5: 'surprise', 6: 'neutral'}","e9f77f3b":"df.emotion.value_counts()","cbb8f63b":"sns.countplot(df.emotion)\npyplot.show()","fa6cd80d":"math.sqrt(len(df.pixels[0].split(' ')))","726e7c35":"fig = pyplot.figure(1, (14, 14))\n\nk = 0\nfor label in sorted(df.emotion.unique()):\n    for j in range(7):\n        px = df[df.emotion==label].pixels.iloc[k]\n        px = np.array(px.split(' ')).reshape(48, 48).astype('float32')\n\n        k += 1\n        ax = pyplot.subplot(7, 7, k)\n        ax.imshow(px, cmap='gray')\n        ax.set_xticks([])\n        ax.set_yticks([])\n        ax.set_title(emotion_label_to_text[label])\n        pyplot.tight_layout()","19be7ed5":"INTERESTED_LABELS = [3, 4, 6]","ac7e4628":"df = df[df.emotion.isin(INTERESTED_LABELS)]\ndf.shape","30b60e5f":"img_array = df.pixels.apply(lambda x: np.array(x.split(' ')).reshape(48, 48, 1).astype('float32'))\nimg_array = np.stack(img_array, axis=0)","59fb9882":"img_array.shape","a04008a8":"le = LabelEncoder()\nimg_labels = le.fit_transform(df.emotion)\nimg_labels = np_utils.to_categorical(img_labels)\nimg_labels.shape","de680e41":"le_name_mapping = dict(zip(le.classes_, le.transform(le.classes_)))\nprint(le_name_mapping)","418113af":"X_train, X_valid, y_train, y_valid = train_test_split(img_array, img_labels,\n                                                    shuffle=True, stratify=img_labels,\n                                                    test_size=0.1, random_state=42)\nX_train.shape, X_valid.shape, y_train.shape, y_valid.shape","f3ccd05d":"del df\ndel img_array\ndel img_labels","bc7cd1ac":"img_width = X_train.shape[1]\nimg_height = X_train.shape[2]\nimg_depth = X_train.shape[3]\nnum_classes = 3","ce05ea94":"# Normalizing results, as neural networks are very sensitive to unnormalized data.\nX_train = X_train \/ 255.\nX_valid = X_valid \/ 255.","2a672ca1":"IMAGE_INPUT_NAME = 'image'\nLABEL_INPUT_NAME = 'label'","17286d33":"def build_net(show_summary=True):\n    \"\"\"\n    This is a Deep Convolutional Neural Network (DCNN). For generalization purpose I used dropouts in regular intervals.\n    I used `ELU` as the activation because it avoids dying relu problem but also performed well as compared to LeakyRelu\n    atleast in this case. `he_normal` kernel initializer is used as it suits ELU. BatchNormalization is also used for better\n    results.\n    \"\"\"\n    net = Sequential(name='DCNN')\n\n    net.add(\n        Conv2D(\n            filters=64,\n            kernel_size=(5,5),\n            input_shape=(img_width, img_height, img_depth),\n            activation='elu',\n            padding='same',\n            kernel_initializer='he_normal',\n            name=IMAGE_INPUT_NAME\n        )\n    )\n    net.add(BatchNormalization(name='batchnorm_1'))\n    net.add(\n        Conv2D(\n            filters=64,\n            kernel_size=(5,5),\n            activation='elu',\n            padding='same',\n            kernel_initializer='he_normal',\n            name='conv2d_2'\n        )\n    )\n    net.add(BatchNormalization(name='batchnorm_2'))\n    \n    net.add(MaxPooling2D(pool_size=(2,2), name='maxpool2d_1'))\n    net.add(Dropout(0.4, name='dropout_1'))\n\n    net.add(\n        Conv2D(\n            filters=128,\n            kernel_size=(3,3),\n            activation='elu',\n            padding='same',\n            kernel_initializer='he_normal',\n            name='conv2d_3'\n        )\n    )\n    net.add(BatchNormalization(name='batchnorm_3'))\n    net.add(\n        Conv2D(\n            filters=128,\n            kernel_size=(3,3),\n            activation='elu',\n            padding='same',\n            kernel_initializer='he_normal',\n            name='conv2d_4'\n        )\n    )\n    net.add(BatchNormalization(name='batchnorm_4'))\n    \n    net.add(MaxPooling2D(pool_size=(2,2), name='maxpool2d_2'))\n    net.add(Dropout(0.4, name='dropout_2'))\n\n    net.add(\n        Conv2D(\n            filters=256,\n            kernel_size=(3,3),\n            activation='elu',\n            padding='same',\n            kernel_initializer='he_normal',\n            name='conv2d_5'\n        )\n    )\n    net.add(BatchNormalization(name='batchnorm_5'))\n    net.add(\n        Conv2D(\n            filters=256,\n            kernel_size=(3,3),\n            activation='elu',\n            padding='same',\n            kernel_initializer='he_normal',\n            name='conv2d_6'\n        )\n    )\n    net.add(BatchNormalization(name='batchnorm_6'))\n    \n    net.add(MaxPooling2D(pool_size=(2,2), name='maxpool2d_3'))\n    net.add(Dropout(0.5, name='dropout_3'))\n\n    net.add(Flatten(name='flatten'))\n        \n    net.add(\n        Dense(\n            128,\n            activation='elu',\n            kernel_initializer='he_normal',\n            name='dense_1'\n        )\n    )\n    net.add(BatchNormalization(name='batchnorm_7'))\n    \n    net.add(Dropout(0.6, name='dropout_4'))\n    \n    net.add(\n        Dense(\n            num_classes,\n            activation='softmax',\n            name='out_layer'\n        )\n    )\n    \n    if show_summary:\n        net.summary()\n    \n    return net","b32b82dc":"def convert_to_dict_generator(image_data_gen):\n    for image, label in image_data_gen:\n        yield {IMAGE_INPUT_NAME: image, LABEL_INPUT_NAME: label} ","4063491f":"base_model = build_net(show_summary=False)\n\n# tune adv_step in range [0.01, 0.1] & multiplier in range [0.1, 0.4]\nadv_config = nsl.configs.make_adv_reg_config(multiplier=0.3, adv_step_size=0.01)\nadv_model = nsl.keras.AdversarialRegularization(base_model, adv_config=adv_config)","2d09b6bf":"lr_scheduler = ReduceLROnPlateau(\n    monitor='val_categorical_accuracy',\n    factor=0.25,\n    patience=3,\n    min_lr=1e-7,\n    verbose=1,\n)\n\ncallbacks = [\n    lr_scheduler,\n]\n\nbatch_size = 32\nepochs = 25","0b40a78b":"train_datagen = ImageDataGenerator(\n    rotation_range=15,\n    width_shift_range=0.15,\n    height_shift_range=0.15,\n    shear_range=0.15,\n    zoom_range=0.15,\n    horizontal_flip=True,\n)\ntrain_datagen.fit(X_train)","25b578ef":"adv_model.compile(\n    optimizer=optimizers.Adam(0.001),\n    loss='categorical_crossentropy',\n    metrics=['accuracy']\n)\n\n# This is a hack to fix the error for tf-2.1, this is instructed by the tf community itself.\n# You can read the issue thread for this, https:\/\/github.com\/tensorflow\/neural-structured-learning\/issues\/52\nadv_model.evaluate({IMAGE_INPUT_NAME: X_valid[:10], LABEL_INPUT_NAME: y_valid[:10]})\n\nhistory = adv_model.fit_generator(\n    convert_to_dict_generator(train_datagen.flow(X_train, y_train, batch_size=batch_size)),\n    validation_data=tf.data.Dataset.from_tensor_slices({IMAGE_INPUT_NAME: X_valid, LABEL_INPUT_NAME: y_valid}).batch(batch_size),\n    steps_per_epoch=len(X_train) \/ batch_size,\n    epochs=epochs,\n    callbacks=callbacks,\n    use_multiprocessing=True,\n)","53ab0c80":"sns.set()\nfig = pyplot.figure(0, (12, 8))\n\nax = pyplot.subplot(2, 2, 1)\nsns.lineplot(history.epoch, history.history['categorical_accuracy'], label=\"train\")\nsns.lineplot(history.epoch, history.history['val_categorical_accuracy'], label=\"validation\")\npyplot.title('Categorical Accuracy')\npyplot.tight_layout()\n\nax = pyplot.subplot(2, 2, 2)\nsns.lineplot(history.epoch, history.history['loss'], label=\"train\")\nsns.lineplot(history.epoch, history.history['val_loss'], label=\"validation\")\npyplot.title('Loss')\npyplot.tight_layout()\n\nax = pyplot.subplot(2, 2, 3)\nsns.lineplot(history.epoch, history.history['adversarial_loss'], label=\"train\")\nsns.lineplot(history.epoch, history.history['val_adversarial_loss'], label=\"validation\")\npyplot.title('Adversarial Loss')\npyplot.tight_layout()\n\nax = pyplot.subplot(2, 2, 4)\nsns.lineplot(history.epoch, history.history['categorical_crossentropy'], label=\"train\")\nsns.lineplot(history.epoch, history.history['val_categorical_crossentropy'], label=\"validation\")\npyplot.title('Categorical Crossentropy')\npyplot.tight_layout()\n\npyplot.show()","1d92941b":"adv_model.evaluate(\n    {IMAGE_INPUT_NAME: X_valid, LABEL_INPUT_NAME: y_valid}\n)","130efc65":"adv_model.evaluate(\n    {IMAGE_INPUT_NAME: X_train, LABEL_INPUT_NAME: y_train}\n)","f5d27998":"adv_model.save_weights(\"adv_model_weights.h5\")\nbase_model.save(\"adv_base_model.h5\")","8db29433":"yhat_valid = base_model.predict_classes(X_valid)\nscikitplot.metrics.plot_confusion_matrix(np.argmax(y_valid, axis=1), yhat_valid, figsize=(7,7))\npyplot.savefig(\"confusion_matrix.png\")\n\nprint(f'total wrong validation predictions: {np.sum(np.argmax(y_valid, axis=1) != yhat_valid)}')\nprint(f\"accuracy: {round(np.sum(np.argmax(y_valid, axis=1) == yhat_valid)\/len(y_valid),5)*100}%\\n\\n\")\nprint(classification_report(np.argmax(y_valid, axis=1), yhat_valid))","f23e238c":"mapper = {\n    0: \"happy\",\n    1: \"sad\",\n    2: \"neutral\",\n}","6e170727":"np.random.seed(2)\nrandom_sad_imgs = np.random.choice(np.where(y_valid[:, 1]==1)[0], size=9)\nrandom_neutral_imgs = np.random.choice(np.where(y_valid[:, 2]==1)[0], size=9)\n\nfig = pyplot.figure(1, (18, 4))\n\nfor i, (sadidx, neuidx) in enumerate(zip(random_sad_imgs, random_neutral_imgs)):\n        ax = pyplot.subplot(2, 9, i+1)\n        sample_img = X_valid[sadidx,:,:,0]\n        ax.imshow(sample_img, cmap='gray')\n        ax.set_xticks([])\n        ax.set_yticks([])\n        ax.set_title(f\"true:sad, pred:{mapper[base_model.predict_classes(sample_img.reshape(1,48,48,1))[0]]}\")\n\n        ax = pyplot.subplot(2, 9, i+10)\n        sample_img = X_valid[neuidx,:,:,0]\n        ax.imshow(sample_img, cmap='gray')\n        ax.set_xticks([])\n        ax.set_yticks([])\n        ax.set_title(f\"t:neut, p:{mapper[base_model.predict_classes(sample_img.reshape(1,48,48,1))[0]]}\")\n\n        pyplot.tight_layout()","4b0cc330":"`Now I will make the data compatible for neural networks.`","b893e3c2":"`Splitting the data into training and validation set.`","1a6798de":"I tried many different configurations of `multiplier` and `adv_step_size` and found below configurations as the best. You can see the results of all my runs [here](https:\/\/app.wandb.ai\/gauravsharma\/NSL?workspace=user-gauravsharma).","35871329":"See in the first row 7th and 8th images looks more like neutral rather than sad and our model even predicted it neutral. Whereas the last image in second row is very much sad.","d3ecbf22":"The confusion matrix clearly shows that our model is doing good job on the class `happy` but it's performance is low on other two classes. One of the reason for this could be the fact that these two classes have less data. But when I looked at the images I found some images from these two classes are even hard for a human to tell whether the person is sad or neutral. Facial expression depends on individual as well. Some person's neutral face looks like sad.","f6119eb2":"`So majority classes belongs to 3:Happy, 4:Sad and 6:Neutral and we are also intersted in these three classes only.`","33a76079":"`Maybe model is underfitting for now.`"}}