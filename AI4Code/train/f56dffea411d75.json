{"cell_type":{"76b407db":"code","8a8d668f":"code","d60bc1b3":"code","1b5e5650":"code","2630f104":"code","c34fa899":"code","09e44c0f":"code","44a1e98a":"code","364c7709":"code","4948f702":"code","9f508477":"code","7c9e39b2":"code","c4944ff7":"code","b486bfb6":"code","8f007cec":"code","13fec7a1":"code","8ef4d4ae":"code","1219edfc":"code","43ede075":"code","4075aecc":"code","9eb66839":"code","7a19a62e":"code","ba5a1655":"code","9ddb136a":"code","1dd7f6f3":"code","92fb65a5":"code","4d2fecdc":"code","325a2f51":"code","af65fdb2":"code","668f0d0e":"code","217fd7a8":"code","7048bf9f":"code","bbef4625":"code","0b7d02b3":"code","4a676bde":"code","e0b6937d":"code","a1c0c2b6":"code","2c0bbeab":"code","f16a983d":"code","297c0885":"code","2207574b":"code","bca0f7e9":"code","679a0f03":"code","80c759c5":"code","4b6229a0":"code","903df65d":"code","d0e7b4c2":"code","d906bb85":"code","0b6b9db4":"code","d67bab05":"code","f9787111":"code","ea778d85":"code","ffaca73e":"code","e1b02310":"code","c506b50f":"markdown","34338388":"markdown","73299886":"markdown","bef08485":"markdown","82036a30":"markdown","a8ce5bcc":"markdown","44e8e1e2":"markdown","ee6d39e3":"markdown","21e21ad0":"markdown","e8015553":"markdown","5fdfdd0b":"markdown","db4e0137":"markdown","07c5763b":"markdown","f611bde2":"markdown","b230a2e1":"markdown","d2eb5722":"markdown"},"source":{"76b407db":"import pandas as pd\nimport numpy as np\npd.set_option(\"display.max_columns\", 500)\n\nfrom pandas_profiling import ProfileReport\n\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.metrics import accuracy_score, f1_score, roc_auc_score, classification_report\nfrom sklearn.preprocessing import StandardScaler\n\nfrom catboost import CatBoostClassifier\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport plotly.graph_objs as go\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style(\"darkgrid\")\n\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\n#import plotly.express as px","8a8d668f":"# Author of this kaggle dataset had two synthetic features, so I dropped them before and made file \"BankChurners_1.csv\"\npath = \"..\/input\/bank-churn-1\/\"\ndata = pd.read_csv(path + \"BankChurners_1.csv\")\ndata.shape","d60bc1b3":"data.head()","1b5e5650":"assert data[\"CLIENTNUM\"].nunique() == data.shape[0], \"There are duplicates\"","2630f104":"data.set_index(\"CLIENTNUM\", inplace = True)","c34fa899":"data.head()","09e44c0f":"data.info()","44a1e98a":"Features = list(data.columns[1:])\nprint(\"Count (\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e) : \", len(Features))\nprint(\"Features (\u041f\u0440\u0438\u0437\u043d\u0430\u043a\u0438) :\\n\", Features)","364c7709":"%%time\n\nprofile = ProfileReport(data[Features], title = \"Summary\")","4948f702":"#profile.to_file(\"Obzor.html\") # you can save it as html-file\nprofile.to_notebook_iframe()","9f508477":"data[\"Attrition_Flag\"] = data[\"Attrition_Flag\"].map({\"Existing Customer\": 0, \"Attrited Customer\": 1})","7c9e39b2":"X = data[Features]\ny = data[\"Attrition_Flag\"]\n\nX.head()","c4944ff7":"y.head()","b486bfb6":"Num_cols = [cname for cname in Features if data[cname].dtype in ['int64', 'float64']]\nCat_cols = [cname for cname in Features if data[cname].dtype == \"object\"]\n\nprint(\"Number of Numeric features (\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432) : \", len(Num_cols))\nprint(\"Numeric (\u0427\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438) :\\n \", Num_cols, \" \\n\")\n\nprint(\"Number of Categorical features (\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432) : \", len(Cat_cols))\nprint(\"Categorical (\u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438) :\\n \", Cat_cols)","8f007cec":"y.value_counts()","13fec7a1":"y.value_counts()[0]\/y.value_counts()[1]","8ef4d4ae":"def build_plot(feature, title_rus):\n    trace1 = go.Histogram(\n        x = data[data[\"Attrition_Flag\"] == 0][feature],\n        name = \"Existing Customer (0)\",\n        marker = dict(color = \"blue\", opacity = 0.6)\n    )\n    trace2 = go.Histogram(\n        x = data[data[\"Attrition_Flag\"] == 1][feature],\n        name = \"Attrited Customer (1)\",\n        marker = dict(color = \"red\", opacity = 0.8)\n    )\n\n    Traces = [trace1, trace2]\n    layout = go.Layout(title = title_rus) \n    fig = go.Figure(data = Traces, layout = layout)\n    return iplot(fig) ","1219edfc":"Watching_Features = [\"Income_Category\", \"Card_Category\", \"Customer_Age\", \"Marital_Status\", \n                     \"Education_Level\", \"Dependent_count\", \"Months_on_book\",\n                     \"Credit_Limit\", \"Total_Trans_Amt\", \"Total_Trans_Ct\"]\nTitles_with_Rus = [\"Income_Category \/ \u0414\u043e\u0445\u043e\u0434\", \"Card_Category \/ \u0422\u0438\u043f \u0431\u0430\u043d\u043a\u043e\u0432\u0441\u043a\u043e\u0439 \u043a\u0430\u0440\u0442\u044b\", \n                   \"Customer_Age \/ \u0412\u043e\u0437\u0440\u0430\u0441\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\", \"Marital_Status \/ \u0421\u0435\u043c\u0435\u0439\u043d\u043e\u0435 \u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435\", \n                   \"Education_Level \/ \u0423\u0440\u043e\u0432\u0435\u043d\u044c \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f\", \"Dependent_count \/ \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u0435\u0442\u0435\u0439\",\n                   \"Months_on_book \/ \u041a\u0430\u043a \u0434\u0430\u0432\u043d\u043e \u0441\u0442\u0430\u043b \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c \u0431\u0430\u043d\u043a\u0430\", \"Credit_Limit \/ \u041a\u0440\u0435\u0434\u0438\u0442\u043d\u044b\u0439 \u041b\u0438\u043c\u0438\u0442\",\n                   \"Total_Trans_Amt \/ \u041e\u0431\u0449\u0430\u044f \u0441\u0443\u043c\u043c\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0439\", \"Total_Trans_Ct \/ \u041e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0439\"] \n\n#for a in Watching_Features:\n#    build_plot(a, Titles_with_Rus[Watching_Features.index(a)])","43ede075":"build_plot(\"Income_Category\", \"Income_Category \/ \u0414\u043e\u0445\u043e\u0434\")","4075aecc":"build_plot(\"Card_Category\", \"Card_Category \/ \u0422\u0438\u043f \u0431\u0430\u043d\u043a\u043e\u0432\u0441\u043a\u043e\u0439 \u043a\u0430\u0440\u0442\u044b\")","9eb66839":"build_plot(\"Customer_Age\", \"Customer_Age \/ \u0412\u043e\u0437\u0440\u0430\u0441\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\")","7a19a62e":"build_plot(\"Marital_Status\", \"Marital_Status \/ \u0421\u0435\u043c\u0435\u0439\u043d\u043e\u0435 \u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435\")","ba5a1655":"build_plot(\"Education_Level\", \"Education_Level \/ \u0423\u0440\u043e\u0432\u0435\u043d\u044c \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f\")","9ddb136a":"build_plot(\"Dependent_count\", \"Dependent_count \/ \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u0435\u0442\u0435\u0439\")","1dd7f6f3":"build_plot(\"Months_on_book\", \"Months_on_book \/ \u041a\u0430\u043a \u0434\u0430\u0432\u043d\u043e \u0441\u0442\u0430\u043b \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c \u0431\u0430\u043d\u043a\u0430\")","92fb65a5":"build_plot(\"Credit_Limit\", \"Credit_Limit \/ \u041a\u0440\u0435\u0434\u0438\u0442\u043d\u044b\u0439 \u041b\u0438\u043c\u0438\u0442\")","4d2fecdc":"build_plot(\"Total_Trans_Amt\", \"Total_Trans_Amt \/ \u041e\u0431\u0449\u0430\u044f \u0441\u0443\u043c\u043c\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0439\")","325a2f51":"build_plot(\"Total_Trans_Ct\", \"Total_Trans_Ct \/ \u041e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0439\")","af65fdb2":"plt.figure(figsize = (12, 8))\nplt.title(\"\u0417\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c Total_Trans_Ct \u043e\u0442 Total_Trans_Amt\")\nsns.scatterplot(data = data, x = \"Total_Trans_Amt\", y = \"Total_Trans_Ct\", hue = \"Attrition_Flag\");","668f0d0e":"plt.figure(figsize = (12, 8))\nplt.title(\"\u0417\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c Total_Amt_Chng_Q4_Q1 \u043e\u0442 Total_Ct_Chng_Q4_Q1\")\nsns.scatterplot(data = data, x = \"Total_Ct_Chng_Q4_Q1\", y = \"Total_Amt_Chng_Q4_Q1\" , hue = \"Attrition_Flag\");","217fd7a8":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 1)\nprint(X_train.shape, y_train.shape, X_test.shape, y_test.shape)","7048bf9f":"# But actually, it I may not use StandardScaler() if I use CatBoostClassifier\nscaler = StandardScaler()\n\nX_train[Num_cols] = scaler.fit_transform(X_train[Num_cols])\nX_test[Num_cols] = scaler.transform(X_test[Num_cols])","bbef4625":"# \u042f \u043d\u0435 \u0441\u0442\u0430\u043b \u0432\u0432\u043e\u0434\u0438\u0442\u044c \u0437\u0434\u0435\u0441\u044c Pipeline, \u0442\u0430\u043a \u043a\u0430\u043a \u043d\u0435\u0442 \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439, \n# \u043d\u0435 \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u044e OneHotEncoder - \u0442\u0430\u043a \u043a\u0430\u043a \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u044e CatBoost\n# \u043d\u0443 \u0438 StandardScaler \u043c\u043e\u0436\u043d\u043e \u0438 \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0437\u0434\u0435\u0441\u044c","0b7d02b3":"params_1 = {'cat_features': Cat_cols,\n            'verbose': 1000,\n            'random_seed': 1}\n\nmodel_Cat_1 = CatBoostClassifier(**params_1);\nmodel_Cat_1.fit(X_train, y_train, \n                eval_set = (X_test, y_test),    \n                use_best_model = True, \n                plot = True);","4a676bde":"%%time\n\nResults = pd.DataFrame(columns = [\"model\", \"roc_auc\", \"f1_micro\"])\n\nscores_r1 = cross_val_score(model_Cat_1, X_test, y_test, \n                            scoring = \"roc_auc\", \n                            cv = 5,\n                            n_jobs = -1)\n\nscores_r2 = cross_val_score(model_Cat_1, X_test, y_test, \n                            scoring = \"f1_micro\", \n                            cv = 5,\n                            n_jobs = -1)\n\nr1 = round(scores_r1.mean(), 6)\nr2 = round(scores_r2.mean(), 6)\n\nprint(\"roc_auc\", r1)\nprint(\"f1_micro\", r2)\nResults.loc[0] = [\"Cat_1\", r1, r2]\n\ny_pred = model_Cat_1.predict(X_test)\nprint(classification_report(y_test, y_pred))","e0b6937d":"params_2 = {'loss_function':'Logloss',\n            'eval_metric':'AUC',\n            'verbose': 1000,\n            'cat_features': Cat_cols,\n            'random_seed': 1,}\n\nmodel_Cat_2 = CatBoostClassifier(**params_2);\nmodel_Cat_2.fit(X_train, y_train, \n                eval_set = (X_test, y_test),    \n                use_best_model = True, \n                plot = True);","a1c0c2b6":"%%time\n\nscores_r1 = cross_val_score(model_Cat_2, X_test, y_test, \n                            scoring = \"roc_auc\", \n                            cv = 5,\n                            n_jobs = -1)\n\nscores_r2 = cross_val_score(model_Cat_2, X_test, y_test, \n                            scoring = \"f1_micro\", \n                            cv = 5,\n                            n_jobs = -1)\n\nr1 = round(scores_r1.mean(), 6)\nr2 = round(scores_r2.mean(), 6)\n\nprint(\"roc_auc\", r1)\nprint(\"f1_micro\", r2)\nResults.loc[1] = [\"Cat_2\", r1, r2]\n\ny_pred = model_Cat_2.predict(X_test)\nprint(classification_report(y_test, y_pred))","2c0bbeab":"#from imblearn.over_sampling import SMOTE\nfrom imblearn.over_sampling import SMOTENC","f16a983d":"Cat_cols","297c0885":"index_of_Cat = []\n\nlistik = list(X.columns)\nfor a in Cat_cols:\n    index_of_Cat.append(listik.index(a))\nprint(\"Count (\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e) : \", len(index_of_Cat))\nprint(\"Index of Categorical (\u0418\u043d\u0434\u0435\u043a\u0441\u044b \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432) : \", index_of_Cat)","2207574b":"smoteNC = SMOTENC(random_state=42, categorical_features = index_of_Cat)\n\nX_smoteNC, y_smoteNC = smoteNC.fit_resample(X, y) \n\nprint(f'''Shape of X before SMOTENC (\u0420\u0430\u0437\u043c\u0435\u0440 X \u0434\u043e): {X.shape}\nShape of X after SMOTENC (\u0420\u0430\u0437\u043c\u0435\u0440 X \u043f\u043e\u0441\u043b\u0435): {X_smoteNC.shape}''')\n\nprint('\\nBalance of positive and negative classes (%): (\u0421\u043e\u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0438 \u043d\u0435\u0433\u0430\u0442\u0438\u0432\u043d\u044b\u0445 \u0441\u043b\u0443\u0447\u0430\u0435\u0432)')\ny_smoteNC.value_counts(normalize=True) * 100","bca0f7e9":"X_train_smNC, X_test_smNC, y_train_smNC, y_test_smNC = train_test_split(X_smoteNC, y_smoteNC, test_size = 0.2, random_state = 1)\nprint(X_train_smNC.shape, y_train_smNC.shape, X_test_smNC.shape, y_test_smNC.shape)","679a0f03":"scaler = StandardScaler()\n\nX_train_smNC[Num_cols] = scaler.fit_transform(X_train_smNC[Num_cols])\nX_test_smNC[Num_cols] = scaler.transform(X_test_smNC[Num_cols])","80c759c5":"params_3 = {'cat_features': Cat_cols,\n            'verbose': 1000,\n            'random_seed': 1,}\n\nmodel_Cat_3 = CatBoostClassifier(**params_3);\nmodel_Cat_3.fit(X_train_smNC, y_train_smNC, \n                eval_set = (X_test_smNC, y_test_smNC),    \n                use_best_model = True, \n                plot = True);","4b6229a0":"%%time\n\nscores_r1 = cross_val_score(model_Cat_3, X_test_smNC, y_test_smNC, \n                            scoring = \"roc_auc\", \n                            cv = 5,\n                            n_jobs = -1)\n\nscores_r2 = cross_val_score(model_Cat_3, X_test_smNC, y_test_smNC, \n                            scoring = \"f1_micro\", \n                            cv = 5,\n                            n_jobs = -1)\n\nr1 = round(scores_r1.mean(), 6)\nr2 = round(scores_r2.mean(), 6)\n\nprint(\"roc_auc\", r1)\nprint(\"f1_micro\", r2)\nResults.loc[2] = [\"Cat_3\", r1, r2]\n\ny_pred = model_Cat_3.predict(X_test_smNC)\nprint(classification_report(y_test_smNC, y_pred))","903df65d":"Results.set_index(\"model\", inplace = True)\nResults","d0e7b4c2":"def plot_Importance(model):\n    Feat_Importance = {\"Names\": Features, \"Importance\": model.get_feature_importance()}\n    Import_Data = pd.DataFrame(Feat_Importance)\n    Import_Data.sort_values(by = [\"Importance\"], ascending = False, inplace = True) \n    plt.figure(figsize = (15, 10))\n    \n    sns.barplot(x = Import_Data[\"Importance\"], y = Import_Data[\"Names\"])\n    plt.title(\"Feature Importance \/ \u0412\u0430\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\")\n    plt.xlabel(\"Importance \/ \u0412\u0430\u0436\u043d\u043e\u0441\u0442\u044c\")\n    plt.ylabel(\"Names \/ \u041f\u0440\u0438\u0437\u043d\u0430\u043a\")","d906bb85":"plot_Importance(model_Cat_3)","0b6b9db4":"data.head()","d67bab05":"data[data[\"Attrition_Flag\"] == 1][\"Income_Category\"].value_counts()","f9787111":"Money_Churn = data[data[\"Attrition_Flag\"] == 1][\"Income_Category\"].value_counts()","ea778d85":"Money_Churn[0]","ffaca73e":"profit_koef = 0.08\nSumma = profit_koef*(Money_Churn[0]*20000 + Money_Churn[1]*50000 + Money_Churn[2]*100000 + Money_Churn[3]*70000 + \\\n        Money_Churn[5]*120000 + Money_Churn[4]*20000)\nprint(\"Summa : \", Summa)","e1b02310":"from IPython.display import Image\nImage(filename = \"..\/input\/carl-meme\/Carl_Meme.jpg\")","c506b50f":"# 2) Vizualization (\u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f)","34338388":"### SMOTE - library to work with imbalance and all Features must be in Numeric format.\n### SMOTENC - library to work with imbalance and you can work wirh Categorical Features.\n\n### SMOTE - \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0434\u0438\u0441\u0431\u0430\u043b\u0430\u043d\u0441\u043e\u043c \u0438 \u0432\u0441\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u043f\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043d\u044b \u0432 \u0446\u0438\u0444\u0440\u0443.\n### SMOTENC - \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0434\u0438\u0441\u0431\u0430\u043b\u0430\u043d\u0441\u043e\u043c \u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u043c\u0438.","73299886":"# Contents (\u0421\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0435)\n**1) Diving into data (\u0417\u043d\u0430\u043a\u043e\u043c\u0441\u0442\u0432\u043e \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438)**\n\n**2) Vizualization (\u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f)**\n\n**3) CatBoostClassifier**\n\n**4) Economic effect (\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u044d\u0444\u0444\u0435\u043a\u0442)**\n","bef08485":"### Check for duplicate lines (clients).\n\n### \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c, \u0435\u0441\u0442\u044c \u043b\u0438 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u044e\u0449\u0438\u0435\u0441\u044f \u0441\u0442\u0440\u043e\u043a\u0438.","82036a30":"# 1) Diving into data (\u0417\u043d\u0430\u043a\u043e\u043c\u0441\u0442\u0432\u043e \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438)","a8ce5bcc":"### I know about <font color = 'blue'>LightGBMClassifier<\/font>  and <font color = 'green'>XGBoostClassifier<\/font>  (H2OGradientBoostingEstimator, GradientBoostingClassifier and others).\n### but I prefer <font color='red'>CatBoostClassifier!<\/font> .\n### \u042f \u043f\u0440\u0435\u0434\u043f\u043e\u0447\u0438\u0442\u0430\u044e CatBoostClassifier.","44e8e1e2":"### More information about imbalance https:\/\/dyakonov.org\/2021\/05\/27\/imbalance\/\n### \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043e \u0434\u0438\u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0435: https:\/\/dyakonov.org\/2021\/05\/27\/imbalance\/","ee6d39e3":"# 4) Economic effect (\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u044d\u0444\u0444\u0435\u043a\u0442)","21e21ad0":"### I will try SomteNC library.\n### \u0420\u0435\u0448\u0438\u043b \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u0421\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u044e Smote (SmoteNC - \u0441 \u0443\u0447\u0451\u0442\u043e\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445)!!!","e8015553":"# 3) CatBoostClassifier","5fdfdd0b":"# About Columns (Features)\n1) **CLIENTNUM** - Client number. Unique identifier for the customer holding the account  (**ID \u043a\u043b\u0438\u0435\u043d\u0442\u0430**)\n\n2) **Attrition_Flag** - Existing and Attrited Customers (**\u041c\u0435\u0442\u043a\u0430 \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u043d\u043e\u0441\u0442\u0438 \u043a \u043e\u0442\u0442\u043e\u043a\u0443**)\n\n3) **Customer_Age** - Demographic variable - Customer's Age in Years (**\u0412\u043e\u0437\u0440\u0430\u0441\u0442**)\n\n4) **Gender** - M = Male, F = Female (**\u041f\u043e\u043b**)\n\n5) **Dependent_count** - Number of dependents (**\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u0435\u0442\u0435\u0439**)\n\n6) **Education_Level** - Educational Qualification of the account holder (**\u0423\u0440\u043e\u0432\u0435\u043d\u044c \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f**)\n\n(example: high school, college graduate, etc.)\n\n7) **Marital_Status** - Married, Single, Unknown (**\u0421\u0435\u043c\u0435\u0439\u043d\u043e\u0435 \u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435**)\n\n8) **Income_Category** - Annual Income Category of the account holder (**\u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f \u0434\u043e\u0445\u043e\u0434\u0430**)\n\n(< $40K, $40K - 60K, $60K - $80K, $80K-$120K, > $120K, Unknown)\n\n9) **Card_Category** - Type of Card (Blue, Silver, Gold, Platinum) (**\u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f \u043a\u0430\u0440\u0442\u044b**)\n\n10) **Months_on_book** - Period of relationship with bank (**\u041a\u0430\u043a \u0434\u0430\u0432\u043d\u043e \u0441\u0442\u0430\u043b \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c \u0431\u0430\u043d\u043a\u0430**)\n\n11) **Total_Relationship_Count** - Total no. of products held by the customer (**\"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u043e\u0432 \u0431\u0430\u043d\u043a\u0430 \u0443 \u043a\u0434\u0438\u0435\u043d\u0442\u0430\"**)\n\n12) **Months_Inactive_12_mon** - Number of months inactive in the last 12 months (**\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0435\u0441\u044f\u0446\u0435\u0432 \u043d\u0435\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438 \u0437\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0433\u043e\u0434**)\n\n13) **Contacts_Count_12_mon** - Number of Contacts in the last 12 months (**\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043d\u0442\u0430\u043a\u0442\u043e\u0432 \u0437\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0433\u043e\u0434**)\n\n14) **Credit_Limit** - Credit Limit on the Credit Card (**\u041a\u0440\u0435\u0434\u0438\u0442\u043d\u044b\u0439 \u043b\u0438\u043c\u0438\u0442**)\n\n15) **Total_Revolving_Bal**\t- Total Revolving Balance on the Credit Card (**\u041e\u0431\u0449\u0438\u0439 \u0432\u043e\u0437\u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u043c\u044b\u0439 \u043e\u0441\u0442\u0430\u0442\u043e\u043a \u043d\u0430 \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u043e\u0439 \u043a\u0430\u0440\u0442\u0435**)\n\n16) **Avg_Open_To_Buy** - Num Open to Buy Credit Line (Average of last 12 months) (**\"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u0445 \u0434\u043b\u044f \u043f\u043e\u043a\u0443\u043f\u043a\u0438 \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u043e\u0439 \u043b\u0438\u043d\u0438\u0438 \u0437\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0433\u043e\u0434\"**)\n\n17) **Total_Amt_Chng_Q4_Q1** - Num Change in Transaction Amount (Q4 over Q1) (**\"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0441\u0443\u043c\u043c\u044b \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0439 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e 2 \u043f\u0435\u0440\u0438\u043e\u0434\u043e\u0432\"**)\n \n18) **Total_Trans_Amt** - Num Total Transaction Amount (Last 12 months) (**\u041e\u0431\u0449\u0435\u0435 \u0441\u0443\u043c\u043c\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0439**)\n\n19) **Total_Trans_Ct** - Num Total Transaction Count (Last 12 months) (**\u041e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0439**)\n\n20) **Total_Ct_Chng_Q4_Q1** - Num Change in Transaction Count (Q4 over Q1) (**\"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u0432 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u044f\u0445 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e 2 \u043f\u0435\u0440\u0438\u043e\u0434\u043e\u0432\"**)\n\n21) **Avg_Utilization_Ratio** - Num\tAverage Card Utilization Ratio (**\u0421\u0440\u0435\u0434\u043d\u0438\u0439 \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f**)","db4e0137":"### It's important for bank for find certainly all client from future churn.\n### So we will evaluate models by Accuracy and F1 Score, which measure FP and FN cases.\n### FalsePositive (FP) cases - when we define that these client are from future churn but they are not from Churn.\n### FalseNegative (FN) cases - when we define that these client are not from future Churn but they are from Churn.\n### It's import to define FN certainly.\n\n### \u0414\u043b\u044f \u0431\u0430\u043d\u043a\u0430 \u043e\u0447\u0435\u043d\u044c \u0432\u0430\u0436\u043d\u043e \u0442\u043e\u0447\u043d\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0432\u0441\u0435\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0438\u0437 \u0431\u0443\u0434\u0443\u0449\u0435\u0433\u043e \u043e\u0442\u0442\u043e\u043a\u0430.\n### \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u0431\u0443\u0434\u0435\u043c \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c \u043f\u043e \u0422\u043e\u0447\u043d\u043e\u0441\u0442\u0438 (Accuracy) \u0438 F1-\u043c\u0435\u0440\u0435 (F1 Score), \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 ### \u041b\u041f \u0438 \u041b\u041e \u0441\u043b\u0443\u0447\u0430\u0438.\n### \u041b\u043e\u0436\u043d\u043e\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 (\u041b\u041f) \u0441\u043b\u0443\u0447\u0430\u0438 - \u0441\u043b\u0443\u0447\u0430\u0438, \u043a\u043e\u0433\u0434\u0430 \u043c\u044b \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043b\u0438, \u0447\u0442\u043e \u044d\u0442\u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u044b \u0438\u0437 \u0431\u0443\u0434\u0443\u0449\u0435\u0433\u043e \u043e\u0442\u0442\u043e\u043a\u0430, \u0430 \u043d\u0430 \u0441\u0430\u043c\u043e\u043c \u0434\u0435\u043b\u0435 \u043d\u0435\u0442.\n### \u041b\u043e\u0436\u043d\u043e\u041d\u0435\u0433\u0430\u0442\u0438\u0432\u043d\u044b\u0435 (\u041b\u041d) \u0441\u043b\u0443\u0447\u0430\u0438 - \u0441\u043b\u0443\u0447\u0430\u0438, \u043a\u043e\u0433\u0434\u0430 \u043c\u044b \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043b\u0438. \u0447\u0442\u043e \u044d\u0442\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u044b \u043d\u0435 \u0438\u0437 \u0431\u0443\u0434\u0443\u0449\u0435\u0433\u043e \u043e\u0442\u0442\u043e\u043a\u0430, \u0430 \u043e\u043d\u0438 \u0438\u0437 \u0431\u0443\u0434\u0443\u0449\u0435\u0433\u043e \u043e\u0442\u0442\u043e\u043a\u0430.\n### \u041e\u0447\u0435\u043d\u044c \u0432\u0430\u0436\u043d\u043e \u0442\u043e\u0447\u043d\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u041b\u041d \u0441\u043b\u0443\u0447\u0430\u0438.","07c5763b":"### Remove from Features \"Attrition_Flag\" because it's a target.\n### \u041d\u0435 \u0432\u043a\u043b\u044e\u0447\u0430\u044e \"Attrition_Flag\" - \u0442\u0430\u043a \u043a\u0430\u043a \u044d\u0442\u043e \u0446\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f.","f611bde2":"### Class Ratio  is very different so there is imbalance and I decided to fight with it.\n### \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0441\u044f \u0435\u0441\u0442\u044c \u0414\u0438\u0441\u0431\u0430\u043b\u0430\u043d\u0441 \u043a\u043b\u0430\u0441\u0441\u043e\u0432.","b230a2e1":"### I decided to calculate how much we lose in money,\n### starting from the mean of the given money category and\n### how many cases we have.\n\n### \u0420\u0435\u0448\u0438\u043b \u043f\u043e\u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0442\u0435\u0440\u044f\u0435\u043c \u0432 \u0434\u0435\u043d\u044c\u0433\u0430\u0445, \n### \u043e\u0442\u0442\u0430\u043b\u043a\u0438\u0432\u0430\u044f\u0441\u044c \u043e\u0442 \u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e \u0434\u0430\u043d\u043d\u043e\u0439 \u0434\u0435\u043d\u0435\u0436\u043d\u043e\u0439 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u0438 \n### \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0442\u0430\u043a\u0438\u0445 \u0441\u043b\u0443\u0447\u0430\u0435\u0432 \u0432 \u044d\u0442\u043e\u0439 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438.\n\n### Suppose, that the bank makes in average 8-10% profit from one account.\n### So <font color = \"green\">profit_koef = 0.08<\/font>.\n\n### \u041f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0438\u043c, \u0447\u0442\u043e \u0431\u0430\u043d\u043a \u0438\u043c\u0435\u0435\u0442 8-10 : \u043f\u0440\u0438\u0431\u044b\u043b\u0438 \u0441 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0441\u0447\u0451\u0442\u0430\n### \u041f\u043e\u044d\u0442\u043e\u043c\u0443 <font color = \"green\">\u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442_\u043f\u0440\u0438\u0431\u044b\u043b\u0438 = 0.08 <\/font> (profit_koef).","d2eb5722":"### Strategy: allocate some money to retain (some part of the future churn).\n### Bank can find out the reasons for the churn and offer more comfortable service!\n\n### \u0421\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u044f \u0431\u043e\u0440\u044c\u0431\u044b : \u0432\u044b\u0434\u0435\u043b\u0438\u0442\u044c \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430 \u0434\u043b\u044f \u0443\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u044f (\u043d\u0435\u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0438\u0437 \u0431\u0443\u0434\u0443\u0449\u0435\u0433\u043e \u043e\u0442\u0442\u043e\u043a\u0430).\n### \u043f\u0443\u0442\u0451\u043c \u0432\u044b\u044f\u0441\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u0438\u0447\u0438\u043d \u043e\u0442\u0442\u043e\u043a\u0430 \u0438 \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0442\u0430\u0440\u0438\u0444\u0430 \u043d\u0430 \u0431\u043e\u043b\u0435\u0435 \u0432\u044b\u0433\u043e\u0434\u043d\u044b\u0445 \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u0445!\n\n### <font color = \"blue\"> Thanks for reading. <\/font> \n### <font color = \"blue\"> \u0421\u043f\u0430\u0441\u0438\u0431\u043e \u0437\u0430 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435. <\/font>  "}}