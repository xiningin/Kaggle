{"cell_type":{"8f4e9719":"code","88a2bf0c":"code","9e0bc192":"code","12723301":"code","30888973":"code","95e0c4f6":"code","b229fcba":"code","c4edd18b":"code","c37ef996":"code","ca2ea3f1":"code","7d8bf484":"code","42263a6b":"code","35099e1d":"code","d1d1f461":"code","bbd90430":"code","908bd018":"code","63bfbf0e":"code","e17e39c3":"code","daf3cab3":"code","66fae388":"code","36e22ca6":"code","125dbbd0":"code","bc09aa4b":"code","a563e4b8":"code","ec977e98":"code","f08a0e69":"code","35f38d0a":"code","5800e25f":"code","d7d1405b":"code","85e98ae1":"code","585a972a":"code","33981429":"code","adde6920":"code","7802d6a7":"code","7e40ddd8":"code","bd053db8":"code","78c94839":"code","49d3dfb8":"code","e3e836d8":"code","a5c8a0c9":"code","16974544":"code","4b3847b2":"code","3b31c6e7":"markdown","a5677cf5":"markdown","22a141a0":"markdown","f12d65f0":"markdown","5381f758":"markdown","4b00aac3":"markdown","225d2cc7":"markdown","6af680df":"markdown","efb404b2":"markdown","75299350":"markdown","c5c44c13":"markdown","a714d45b":"markdown","2c47d64f":"markdown","da34256b":"markdown","78b5fe9b":"markdown","2653bd4c":"markdown","c8b86db1":"markdown","fe35a0c2":"markdown","38c6b23b":"markdown","a9bbd23e":"markdown","37a3e257":"markdown","d00ad54e":"markdown","0ef18a29":"markdown","2f56ff4c":"markdown","bbe39b07":"markdown","1e4c8278":"markdown","0de07fd2":"markdown","c0a3ced8":"markdown","83fc1b4f":"markdown","21b16a65":"markdown","ea350421":"markdown","360e0f37":"markdown"},"source":{"8f4e9719":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import GridSearchCV,train_test_split\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import f1_score,classification_report,roc_auc_score,precision_score,recall_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.preprocessing import StandardScaler\n\nimport warnings\nwarnings.filterwarnings('ignore')","88a2bf0c":"df = pd.read_csv(\"..\/input\/paysim1\/PS_20174392719_1491204439457_log.csv\")","9e0bc192":"df.head()","12723301":"df","30888973":"from sklearn.model_selection import train_test_split\n\ndf_sample, _ = train_test_split(df, test_size=0.92141601,random_state=1234, stratify=df[\"isFraud\"]) \n\n#0.92141601 to take 500000 sample ","95e0c4f6":"df_sample.shape","b229fcba":"df_train, df_test = train_test_split(df_sample, test_size=0.2,random_state=123,stratify=df_sample[\"isFraud\"])\ndf_train, df_val = train_test_split(df_train, test_size=0.25,random_state=123,stratify=df_train[\"isFraud\"])","c4edd18b":"df_train.shape","c37ef996":"df_test.shape","ca2ea3f1":"df_val.shape","7d8bf484":"df_train.info()","42263a6b":"df_train.isnull().sum()","35099e1d":"#Drop Duplicates\n\ndf_train.drop_duplicates(keep=False, inplace=True)","d1d1f461":"df_train.shape","bbd90430":"df_train.describe()","908bd018":"plt.figure(figsize=(4,4))\ndf_train['isFraud'].value_counts()\nsns.set_theme(style=\"darkgrid\")\nax = sns.countplot(x=\"isFraud\", data=df_train,color = \"#0c2054\" )\nfor p in ax.patches:\n    ax.annotate(str(format(int(p.get_height()), ',d')),\n            (p.get_x(), p.get_height()))","63bfbf0e":"df_train['isFlaggedFraud'].value_counts()\nsns.set_theme(style=\"darkgrid\")\nax = sns.countplot(x=\"isFlaggedFraud\", data=df_train,color = \"#0c2054\")\nfor p in ax.patches:\n    ax.annotate(str(format(int(p.get_height()), ',d')), (p.get_x(), p.get_height()))","e17e39c3":"f, ax = plt.subplots(1, 1, figsize=(4, 4))\ndf_train.type.value_counts().plot(kind='bar', title=\"Transaction type\", ax=ax, figsize=(8,8),color = \"#0c2054\")\nplt.ticklabel_format(style='plain', axis='y')","daf3cab3":"pd.crosstab(df_train['type'], df_train['isFraud'])","66fae388":"ax=sns.countplot('type', data=df_train[(df_train['isFraud'] == 1)])\nplt.title('Fraud Distribution', fontsize=14)\nfor p in ax.patches:\n    ax.annotate(str(format(int(p.get_height()), ',d')), (p.get_x(), p.get_height()))\n\nplt.show()","36e22ca6":"fraud = df_train[df_train[\"isFraud\"] == 1]\nNotfraud = df_train[df_train[\"isFraud\"] == 0]","125dbbd0":"Notfraud['transactionHour'] = Notfraud['step'] % 24\nfraud['transactionHour'] = fraud['step'] % 24","bc09aa4b":"sns.histplot(data = Notfraud\n            ,x = 'transactionHour'\n            ,bins=50\n            );","a563e4b8":"df_train['transactionHour'] = df_train['step'] % 24\nfrauds_hour = pd.concat([df_train.groupby(\"transactionHour\")[\"isFraud\"].sum(),df_train.groupby(\"transactionHour\")[\"isFraud\"].count()],axis=1)\nfrauds_hour.columns = [\"Frauds\",\"Transactions\"]\nfrauds_hour[\"fraud_rate\"] = frauds_hour.Frauds\/frauds_hour.Transactions\nsns.barplot(x=frauds_hour.index,y=frauds_hour.fraud_rate)\nplt.show()","ec977e98":"# converting into object type\ndf_train['transactionHour'] = df_train['transactionHour'].astype('object')","f08a0e69":"# avg. transaction amount at each hour for each transaction type\nplt.figure(figsize=(12,3))\nsns.lineplot(data=df_train.groupby(['transactionHour','type']).agg({'amount' : 'mean'}).round(2).reset_index(),\n             x='transactionHour',\n             y='amount',\n             hue='type')\nplt.xlabel('Transaction hour', fontsize=8, fontweight='bold')\nplt.xticks(range(24), range(24),fontsize=8, fontweight='bold', rotation=0)\nplt.ylabel('Average transaction amount (millions)', fontsize=8, fontweight='bold')\nplt.yticks(fontsize=8, fontweight='bold')\nplt.title('Average transaction amount at each hour', fontsize=8, fontweight='bold')\nplt.show()\n","35f38d0a":"newscatplot=df_train[df_train['isFraud']==1]\nplt.figure(figsize=(8,8))\nax = plt.gca()\nax.set_ylim(0,2*1e7)\nax.set_xlim(0,2*1e7)\ndf_train.plot.scatter(x='oldbalanceOrg',y='amount', ax=ax,edgecolors='red',s=100,alpha=0.1,label=\"Legit transaction\")\nnewscatplot.plot.scatter(x='oldbalanceOrg',y='amount', color='#FCD735', ax=ax,edgecolors='red',s=100,alpha=0.1,label=\"Fraud transcation\")\nplt.title('Amount vs Balance',fontsize=25,color='#E43A36')\n","5800e25f":"df_train = df_train.loc[(df_train.type == 'TRANSFER') | (df_train.type == 'CASH_OUT')]","d7d1405b":"df_train[\"errorbalanceOrg\"] = df_train.newbalanceOrig + df_train.amount - df_train.oldbalanceOrg\ndf_train[\"errorbalanceDest\"] = df_train.oldbalanceDest + df_train.amount - df_train.newbalanceDest","85e98ae1":"df_train = pd.concat([df_train, pd.get_dummies(df_train['type'], prefix='type')],axis=1) ","585a972a":"df_train = df_train.drop(['nameOrig', 'nameDest', 'isFlaggedFraud',\"type\",\"transactionHour\"], axis = 1)","33981429":"y_train = df_train[\"isFraud\"]\nX_train = df_train.drop(['isFraud'],axis=1)","adde6920":"df.info()","7802d6a7":"df_val = df_val.loc[(df_val.type == 'TRANSFER') | (df_val.type == 'CASH_OUT')]\n\ndf_val[\"errorbalanceOrg\"] = df_val.newbalanceOrig + df_val.amount - df_val.oldbalanceOrg\ndf_val[\"errorbalanceDest\"] = df_val.oldbalanceDest + df_val.amount - df_val.newbalanceDest\n\ndf_val = pd.concat([df_val, pd.get_dummies(df_val['type'], prefix='type')],axis=1) \n\ndf_val = df_val.drop(['nameOrig', 'nameDest', 'isFlaggedFraud',\"type\"], axis = 1)","7e40ddd8":"y_val = df_val[\"isFraud\"]\nX_val= df_val.drop(['isFraud'],axis=1)","bd053db8":"from sklearn.ensemble import RandomForestClassifier","78c94839":"from sklearn.metrics import confusion_matrix","49d3dfb8":"RF = RandomForestClassifier(random_state=1)\n\nRF.fit(X_train, y_train)\n\ny_predict = RF.predict(X_train)\n\n# evaluate the model\nprint(classification_report(y_train, y_predict))\nprint(confusion_matrix(y_train, y_predict))","e3e836d8":"RF = RandomForestClassifier(random_state=1)\n\nRF.fit(X_train, y_train)\n\ny_predict = RF.predict(X_val)\n\n# evaluate the model\nprint(classification_report(y_val, y_predict))\nprint(confusion_matrix(y_val, y_predict))","a5c8a0c9":"df_test = df_test.loc[(df_test.type == 'TRANSFER') | (df_test.type == 'CASH_OUT')]\n\ndf_test[\"errorbalanceOrg\"] = df_test.newbalanceOrig + df_test.amount - df_test.oldbalanceOrg\ndf_test[\"errorbalanceDest\"] = df_test.oldbalanceDest + df_test.amount - df_test.newbalanceDest\n\ndf_test = pd.concat([df_test, pd.get_dummies(df_test['type'], prefix='type')],axis=1) \n\ndf_test = df_test.drop(['nameOrig', 'nameDest', 'isFlaggedFraud',\"type\"], axis = 1)","16974544":"y_test = df_test[\"isFraud\"]\nX_test = df_test.drop(['isFraud'],axis=1)","4b3847b2":"RF = RandomForestClassifier(random_state=1)\n\nRF.fit(X_train, y_train)\n\ny_predict = RF.predict(X_test)\n\n# evaluate the model\nprint(classification_report(y_test, y_predict))\nprint(confusion_matrix(y_test, y_predict))","3b31c6e7":"The above figure represents the illegal money and how to increase it until it reaches the permissible limit of transfers per day and then stops (example) The permissible limit of transfers per day is $50 at this amount, the customer cannot transfer more than this balance until 24 hours are completed","a5677cf5":"### 4 - Step","22a141a0":"### 1 - isFraud","f12d65f0":"# Random Forest Classifier","5381f758":"# EDA","4b00aac3":"* Exploratory analysis of data to extract the pattern of fraudlent activites.\n\n* Build a machine learning model to classify fraud and non-fraud transactions.\n\n* Reduce the false negatives by tuning the model.\n","225d2cc7":"Ever since the advent of internet the digital revolution has rising and has creeped into all aspects to our lives. One of the most important digital revolution happend in financial system and especially transacting money to someone from any part of the world digitally. Digital transactions have become a part of daily life like purchasing a product online, sending money to friends, depositing cash in bank account, investment purposes etc., They had a lot of benefits so does paved way for fradulent activities. People started using digital money transactions medium to launder money and make the money look like it comes from a legal source. This dataset (https:\/\/www.kaggle.com\/ealaxi\/paysim1) is presently only one of four on Kaggle with information on the rising risk of digital financial fraud, emphasizing the difficulty in obtaining such data.","6af680df":"# Synthetic Financial Datasets For Fraud Detection\n","efb404b2":"As seen earlier, 0 values of oldbalanceOrg,newbalanceOrig,oldbalanceDest,newbalanceDest when amount is not 0 have a good chance of fraudulent transaction, we will create new freatures combining (oldbalanceOrg,newbalanceOrig,amount) and (oldbalanceDest,newbalanceDest,amount)\n","75299350":"## Synthetic Financial Datasets : An Overview","c5c44c13":"\nWe find that of the five types of transactions, fraud occurs only in two of them 'TRANSFER' where money is sent to a customer \/ fraudster and 'CASH_OUT' where money is sent to a merchant who pays the customer \/ fraudster in cash. Remarkably, the number of fraudulent TRANSFERs almost equals the number of fraudulent CASH_OUTs . ","a714d45b":"# Distribution of not fraud","2c47d64f":"# Taking Sample","da34256b":"# Base line","78b5fe9b":"We can see that accuracy in train and test is 100% and this is because the data is manufactured.","2653bd4c":"### 2 - isFlaggedFraud","c8b86db1":"isFraud Column shows that the classes are imbalanced","fe35a0c2":"## Goals\n","38c6b23b":"## Headers\n","a9bbd23e":"* **step** - maps a unit of time in the real world. In this case 1 step is 1 hour of time. Total steps 744 (30 days simulation).\n\n\n* **type** - CASH-IN, CASH-OUT, DEBIT, PAYMENT and TRANSFER.\n\n\n* **amount** - amount of the transaction in local currency.\n\n\n* **nameOrig** - customer who started the transaction\n\n\n* **oldbalanceOrg** - initial balance before the transaction\n\n\n* **newbalanceOrig** - new balance after the transaction\n\n\n* **nameDest** - customer who is the recipient of the transaction\n\n\n* **oldbalanceDest** - initial balance recipient before the transaction. Note that there is not information for customers that start with M (Merchants).\n\n\n* **newbalanceDest** - new balance recipient after the transaction. Note that there is not information for customers that start with M (Merchants).\n\n\n* **isFraud** - This is the transactions made by the fraudulent agents inside the simulation. In this specific dataset the fraudulent behavior of the agents aims to profit by taking control or customers accounts and try to empty the funds by transferring to another account and then cashing out of the system.\n\n\n* **isFlaggedFraud** - The business model aims to control massive transfers from one account to another and flags illegal attempts. An illegal attempt in this dataset is an attempt to transfer more than 200.000 in a single transaction.\n","37a3e257":"Another analysis that can be interesting is at which hour of a day, the fraud attacks generally happen. From the step variable, we can get the hour of day. The below plot shows the frauds at different hours of day. It tells that frauds happen during sleeping hours the most. Close to 20% of transactions that happen during 4 AM and 5 AM are fraud transactions.","d00ad54e":"# Val","0ef18a29":"# Val","2f56ff4c":"The main technical challenge it poses to predicting fraud is the highly imbalanced distribution between positive and negative classes in 6 million rows of data. Another stumbling block to the utility of this data stems from the possible discrepancies in its description.\n\n","bbe39b07":"# Train - Test Split","1e4c8278":"### 3- Type","0de07fd2":"# Train","c0a3ced8":"# Feature engineering ","83fc1b4f":"# Distribution of fraud","21b16a65":"# Loading Data","ea350421":"# Test","360e0f37":"## Problem statement\n"}}