{"cell_type":{"e59d62f5":"code","8d18d1bd":"code","bc2fcbf8":"code","e919bae3":"code","d862cd9e":"code","25369e93":"code","c01d7706":"code","68a19199":"code","9ee076b4":"code","1703f9e1":"code","5afb3958":"code","30f6de18":"code","a1af5256":"code","28b17b3b":"code","5735c636":"code","a1ddf7bc":"code","728603f1":"code","8239c734":"code","98db82e2":"code","ccb50fe3":"code","770bc098":"code","ca06d160":"code","da1bfe6c":"code","e6e19309":"code","ee1f7f78":"code","5916c8cb":"code","f925705d":"code","56d1fee5":"code","555fc7d4":"code","1a14996d":"code","4a928395":"code","49e43261":"code","96012d7b":"code","687c900f":"code","91d0eaa3":"code","fa56a477":"markdown"},"source":{"e59d62f5":"\n%matplotlib inline\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8d18d1bd":"df = pd.read_csv('\/kaggle\/input\/kaggle-survey-2017\/multipleChoiceResponses.csv', encoding = \"ISO-8859-1\")","bc2fcbf8":"sal = pd.read_csv('\/kaggle\/input\/kaggle-survey-2017\/conversionRates.csv')","e919bae3":"w = df['BlogsPodcastsNewslettersSelect'].value_counts().head(10)\nsns.barplot(y=w.index, x= w)","d862cd9e":"def kdeplot(feature):\n    plt.figure(figsize=(9, 4))\n    plt.title(\"KDE for {}\".format(feature))\n    ax0 = sns.kdeplot(df[df['EmploymentStatus'] == 'Employed full-time'][feature].dropna(), color= 'navy', label= 'Employed full-time')\n    ax1 = sns.kdeplot(df[df['EmploymentStatus'] == 'Not employed, but looking for work'][feature].dropna(), color= 'orange', label= 'Not employed, but looking for work')\nkdeplot('Age')","25369e93":"job_factors = [\n    x for x in df.columns if x.find('JobFactor') != -1]","c01d7706":"jfdf = {}\nfor feature in job_factors:\n    a = df[feature].value_counts()\n    a = a\/a.sum()\n    jfdf[feature[len('JobFactor'):]] = a","68a19199":"jfdf = pd.DataFrame(jfdf).transpose()\n\njfdf.plot(kind='bar', figsize=(18,6), \n          title=\"Things to look for while considering Data Science Jobs\")\nplt.show()\n","9ee076b4":"w = df[(df['EmploymentStatus'] == 'Employed full-time')]\nplt.title(\"Languages used by full-time workers\")\nsns.countplot(y='LanguageRecommendationSelect', data = w, order=w['LanguageRecommendationSelect'].value_counts().head(15).index)","1703f9e1":"sns.countplot(y='EmploymentStatus', data=df, order=df['EmploymentStatus'].value_counts().head(15).index)","5afb3958":"q = df['LanguageRecommendationSelect']\nsns.countplot(y='LanguageRecommendationSelect', data=df, order=df['LanguageRecommendationSelect'].value_counts().head(15).index)","30f6de18":"features = [x for x in df.columns if x.find('Learning') != -1]\nfeatures","a1af5256":"df['LearningPlatformSelect'] = df['LearningPlatformSelect'].astype('str').apply(lambda x : x.split(','))\n\ns = df.apply(lambda x : pd.Series(x['LearningPlatformSelect']),axis =1).stack().reset_index(level = 1, drop=True)\ns = s[s != 'nan'].value_counts().head(10)\nsns.barplot(y=s.index, x=s)","28b17b3b":"df['HardwarePersonalProjectsSelect'] = df['HardwarePersonalProjectsSelect'].astype('str').apply(lambda x: x.split(','))\n\nd = df.apply(lambda x: pd.Series(x['HardwarePersonalProjectsSelect']),axis=1).stack().reset_index(level=1, drop=True)\nd = d[d != 'nan'].value_counts().head(15)\nsns.barplot(y=d.index, x=d)","5735c636":"sns.countplot(y='CurrentJobTitleSelect', data=df, order=df['CurrentJobTitleSelect'].value_counts().head(15).index)","a1ddf7bc":"j = df[df['EmploymentStatus'] == 'Employed full-time']\nplt.title('LearningDataScienceTime of Employed full-time')\nsns.countplot(y=j.LearningDataScienceTime, order=j['LearningDataScienceTime'].value_counts().head(10).index)","728603f1":"g = df[(df['EmploymentStatus'] == 'Employed full-time') & \n      (df['LearningDataScienceTime'] == '< 1 year')]\nplt.figure(figsize=(20,12))\nsns.countplot(y=g.Country, order=g['Country'].value_counts().head(20).index)","8239c734":"df['PublicDatasetsSelect'] = df['PublicDatasetsSelect'].astype('str').apply(lambda x : x.split(','))\nf = df.apply(lambda x : pd.Series(x['PublicDatasetsSelect']), axis=1).stack().reset_index(level=1, drop=True)\nf = f[f != 'nan'].value_counts().head(15)\npd.DataFrame(f)\nsns.barplot(y=f.index, x=f)","98db82e2":"s = df['EmploymentStatus'].value_counts().head(10)\nsns.barplot(y=s.index, x=s)","ccb50fe3":"korea = df[df['Country'] == 'South Korea']\n\na = korea.apply(lambda x : pd.Series(x['CurrentEmployerType']), axis=1).stack().reset_index(level = 1, drop=True)\na = a[a != 'nan'].value_counts().head(10)\n\nplt.title('Employer type of Korean Kagglers')\nsns.barplot(y=a.index, x=a)","770bc098":"korean = df[df['Country'] == 'South Korea']\n\nkorean['PastJobTitlesSelect'] = korean['PastJobTitlesSelect'].astype('str').apply(lambda x : x.split(','))\nq = korean.apply(lambda x : pd.Series(x['PastJobTitlesSelect']), axis=1).stack().reset_index(level=1, drop=True)\nq = q[q != 'nan'].value_counts().head(10)\n\nplt.title('Past jobs of Korean Kagglers')\nsns.barplot(y=q.index, x=q)","ca06d160":"def kdeplot(feature):\n    plt.figure(figsize=(9, 4))\n    plt.title(\"KDE for {}\".format(feature))\n\n    ax0 = sns.kdeplot(df[df['Country'] == 'United States'][feature].dropna(), label= 'United States')\n    ax1 = sns.kdeplot(df[df['Country'] == 'South Korea'][feature].dropna(), label= 'South Korea')\n    ax2 = sns.kdeplot(df[df['Country'] == 'India'][feature].dropna(), label= 'India')\n    \nkdeplot('TimeGatheringData')\nkdeplot('TimeProduction')\nkdeplot('TimeVisualizing')","da1bfe6c":"a = [x for x in df.columns if x.find('Time') != -1]\na","e6e19309":"i = {}\nfor feature in a:\n    s = df[feature].value_counts().head(5)\n    s = s\/s.sum()\n    i[feature[len('Time'):]] = s\ni","ee1f7f78":"df['WorkCodeSharing'] = df['WorkCodeSharing'].astype('str').apply(lambda x : x.split(','))\n\ns = df.apply(lambda x : pd.Series(x['WorkCodeSharing']), axis=1).stack().reset_index(level=1, drop=True)\ns = s[s != 'nan']\ns.name = 'codeshare'\ns = pd.DataFrame(s)","5916c8cb":"q = s['codeshare'].value_counts().head(10)\nsns.barplot(y=q.index, x=q)","f925705d":"sns.countplot(y=df.WorkMLTeamSeatSelect, hue =df.GenderSelect).legend(loc = 'center left', bbox_to_anchor=(1, 0.5))","56d1fee5":"f = df[df['GenderSelect'] == 'Female']\nf = f['WorkMLTeamSeatSelect'].value_counts().head(10)\n\nsns.barplot(y=f.index, x=f)","555fc7d4":"sal = sal.drop(['Unnamed: 0'], axis=1)","1a14996d":"df['CompensationAmount'] = df['CompensationAmount'].str.replace(',','')\ndf['CompensationAmount'] = df['CompensationAmount'].str.replace('-','')\n\nsalary = df[['CompensationAmount','CompensationCurrency']].dropna()","4a928395":"salary = salary.merge(sal, left_on ='CompensationCurrency', right_on='originCountry', how='left')","49e43261":"salary['salary'] = pd.to_numeric(salary['CompensationAmount'])* salary['exchangeRate']","96012d7b":"def sal(x):\n    if x <= 200000:\n        return '~200,000'\n    elif 200000 < x and x <= 400000:\n        return '200,000 ~ 400,000'\n    else:\n        return '400,000 ~ 500,000'","687c900f":"salary['salary_cat'] = salary['salary'].map(sal)","91d0eaa3":"n = df[(df['GenderSelect']== 'Male') &\n      (df['EmploymentStatus'] == 'Employed full-time')]\nn = n['WorkMLTeamSeatSelect'].value_counts().head()\n\nsns.barplot(y=n.index, x=n)","fa56a477":"I referred to other kagglers's wisdom. thank you!"}}