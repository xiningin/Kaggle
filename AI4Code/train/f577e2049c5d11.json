{"cell_type":{"ce97e504":"code","d95ea2eb":"code","7e5cfba1":"code","ba89c026":"code","1c301a88":"code","18c53ed1":"code","6e6cfe2b":"code","ac639713":"code","c650be6b":"code","5a9a6697":"code","7db732de":"code","97e90f9e":"code","23d4328d":"code","34380344":"code","19a90883":"code","391b72ea":"code","b3024c3c":"code","272d9c19":"code","dc692c1f":"code","2afb7c57":"code","ae3802bf":"code","1a562d55":"code","6e21d8f5":"code","5d590bd8":"code","06481169":"code","6017f6e0":"code","6f4b50ba":"code","f8f2a4ee":"code","4acb020c":"code","45919405":"code","a65f368f":"code","35f4c6ab":"code","41b971b6":"code","47c9e9ee":"code","6cc03e41":"code","518d497d":"code","caed2fc3":"code","e93804b0":"code","913ef774":"code","6f217904":"code","0f1db3d3":"code","5e9506b8":"code","3c4ff5e2":"code","fff15695":"code","16d3a813":"code","6b52f7d8":"code","8445870d":"code","8782b8af":"code","015381ec":"code","fcd3b60f":"code","c34e14ee":"code","5f67a13f":"code","c6d5e818":"code","9215e83e":"code","2279bd85":"code","3f684518":"code","c4edebd3":"code","93c6e619":"code","fce002b6":"code","696e439e":"code","70c9e258":"code","e0c4ad09":"markdown","30582bb0":"markdown","f557cbbf":"markdown","b1fd2b2e":"markdown","ee167bdc":"markdown","2759ea00":"markdown","a2b710e1":"markdown","c711d63a":"markdown","d5c63851":"markdown","72aa488f":"markdown"},"source":{"ce97e504":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","d95ea2eb":"data=pd.read_csv('..\/input\/SolarEnergy\/SolarPrediction.csv')","7e5cfba1":"data.head()","ba89c026":"data.info()","1c301a88":"data.describe()","18c53ed1":"data.isnull().sum()","6e6cfe2b":"plt.figure(figsize=(12,6))\nsns.heatmap(data.corr(),annot=True)","ac639713":"sns.histplot(x=data['Temperature'],bins=20)","c650be6b":"sns.histplot(x=data['Pressure'],bins=20)","5a9a6697":"plt.figure(figsize=(10,6),dpi=150)\nsns.scatterplot(x=data['Temperature'],y=data['Pressure'],hue=data['Radiation'])","7db732de":"sns.histplot(x=data['WindDirection(Degrees)'],bins=20)","97e90f9e":"sns.histplot(x=data['Humidity'],bins=20)","23d4328d":"sns.histplot(x=data['Speed'],bins=15)","34380344":"plt.figure(figsize=(10,5),dpi=150)\nsns.scatterplot(y=data['WindDirection(Degrees)'],x=data['Speed'],hue=data['Radiation'])","19a90883":"plt.figure(figsize=(10,5),dpi=150)\nsns.scatterplot(y=data['Speed'],x=data['Humidity'],hue=data['Radiation'])","391b72ea":"data['TimeSunSet'].unique()","b3024c3c":"data['TimeSunSet']=data['TimeSunSet'].apply(lambda x:(x).split(\":\")[0])","272d9c19":"data['TimeSunSet(in Hrs)']=data['TimeSunSet']","dc692c1f":"data['TimeSunRise(in Hrs)']=data['TimeSunRise'].apply(lambda x:(x).split(\":\")[0])","2afb7c57":"data['TimeSunSet(in Hrs)']=data['TimeSunSet(in Hrs)'].apply(lambda x:int(x))","ae3802bf":"data['TimeSunRise(in Hrs)']=data['TimeSunRise(in Hrs)'].apply(lambda x:int(x))","1a562d55":"data['Month']=data['Data'].apply(lambda x:(x).split(\"\/\")[0])","6e21d8f5":"data['Day']=data['Data'].apply(lambda x:(x).split(\"\/\")[1])","5d590bd8":"data['Month']=data['Month'].apply(lambda x:int(x))","06481169":"data['Day']=data['Day'].apply(lambda x:int(x))","6017f6e0":"data['Time_Hrs']=data['Time'].apply(lambda x:(x).split(\":\")[0])","6f4b50ba":"data['Time_Mins']=data['Time'].apply(lambda x:(x).split(\":\")[1])","f8f2a4ee":"data['Time_Secs']=data['Time'].apply(lambda x:(x).split(\":\")[2])","4acb020c":"data['Time_Mins']=data['Time_Mins'].apply(lambda x:int(x))","45919405":"data['Time_Secs']=data['Time_Secs'].apply(lambda x:int(x))","a65f368f":"plt.figure(figsize=(10,6),dpi=150)\nsns.heatmap(data.corr(),annot=True)","35f4c6ab":"data.shape","41b971b6":"X=data.drop(['Data','Time','TimeSunRise','TimeSunSet','Radiation'],axis=1)","47c9e9ee":"y=data['Radiation']","6cc03e41":"from sklearn.model_selection import train_test_split","518d497d":"X_train, X_, y_train, y_ = train_test_split(X, y, test_size=0.30, random_state=101)","caed2fc3":"X_val, X_test, y_val, y_test = train_test_split(X_, y_, test_size=0.30, random_state=101)","e93804b0":"from sklearn.preprocessing import StandardScaler","913ef774":"scaler=StandardScaler()","6f217904":"X_train=scaler.fit_transform(X_train)","0f1db3d3":"X_val=scaler.fit_transform(X_val)","5e9506b8":"X_test=scaler.transform(X_test)","3c4ff5e2":"from sklearn.linear_model import LinearRegression,ElasticNet","fff15695":"from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor","16d3a813":"linear_model=LinearRegression()\nlinear_model.fit(X_train,y_train)","6b52f7d8":"ElasticNet_model=ElasticNet()\nElasticNet_model.fit(X_train,y_train)","8445870d":"RandomForest_model=RandomForestRegressor()\nRandomForest_model.fit(X_train,y_train)","8782b8af":"GradientBoosting_model=GradientBoostingRegressor()\nGradientBoosting_model.fit(X_train,y_train)","015381ec":"from sklearn.metrics import mean_absolute_error, mean_squared_error","fcd3b60f":"def report(model):\n    preds = model.predict(X_val)\n    MAE= mean_absolute_error(preds,y_val)\n    MSE=mean_squared_error(preds,y_val)\n    RMSE=np.sqrt(MSE)\n    print('Mean Absolute Error: '+str(MAE))\n    print('Root Mean Squared Error: '+str(RMSE))\n    print(\"Test Score:\" + str(model.score(X_val,y_val)))","c34e14ee":"print('Linear Regression')\nreport(linear_model)","5f67a13f":"print('ElasticNet')\nreport(ElasticNet_model)","c6d5e818":"print('Random Forest Regressor')\nreport(RandomForest_model)","9215e83e":"print('Gradient Boosting Regressor')\nreport(GradientBoosting_model)","2279bd85":"from sklearn.model_selection import GridSearchCV","3f684518":"n_estimators=[50,60,70,80,90,100,110,120]\nmax_features=[2,3,4,5,6,7,8,9,10,11,12,13]","c4edebd3":"param_grid={'n_estimators':n_estimators,'max_features':max_features}","93c6e619":"grid_model=GridSearchCV(RandomForest_model,param_grid)","fce002b6":"grid_model.fit(X_train,y_train)","696e439e":"grid_model.best_params_","70c9e258":"preds_final = grid_model.predict(X_test)\nMAE= mean_absolute_error(preds_final,y_test)\nMSE=mean_squared_error(preds_final,y_test)\nRMSE=np.sqrt(MSE)\nprint('Mean Absolute Error: '+str(MAE))\nprint('Root Mean Squared Error: '+str(RMSE))\nprint(\"Test Score:\" + str(grid_model.score(X_test,y_test)))","e0c4ad09":"###### Data Exploration and Data Visualization","30582bb0":"###### Extracting the 'Hours' from the TimeSunSet and TimeSunRise","f557cbbf":"##### GridSearchCV","b1fd2b2e":"###### Extracting Month and Day from Data","ee167bdc":"##### Final Predictions and Evaluation after Hyperparameter Tuning","2759ea00":"###### Modelling","a2b710e1":"After Hyperparamter Tuning in the RandomForestRegressor model we get a negligible increase in the performance","c711d63a":"##### Model Evalutation","d5c63851":"###### Seperating Time into Hours , Minutes and Seconds","72aa488f":"Since RandomForestRegressor performed better than the rest of the models taken for evaluation, we will proceed further with the RandomForestRegressor model for Cross Validation and see if we can increase the performance after hyperparameter tuning"}}