{"cell_type":{"d49a324a":"code","e066c904":"code","3eac9afe":"code","1a6869e6":"code","a63262fb":"code","084844e7":"code","72b5b3e1":"code","6db0c7e8":"code","06c741da":"code","6fc867fd":"code","a896a547":"code","cfdda693":"code","d57d79fd":"code","1d7350cc":"code","8a43d8ee":"code","8e884da1":"code","25d8a3f1":"code","d3a7947a":"code","ed4d734e":"code","66e7e2e5":"code","a5281c79":"code","38efd369":"code","7b5bc109":"code","ae0af123":"code","81e458ea":"code","53f09c1a":"code","76f74c1d":"code","8060c19c":"code","33ba426a":"code","8dce80d8":"code","688d1816":"code","747ad5b5":"code","c7e9aae9":"code","90e3b7e4":"code","265cecf4":"code","31604683":"code","034c87a7":"code","7851c7ed":"code","fcb2b139":"code","5121d30d":"code","588e3ed7":"code","20577b11":"code","572aaa7b":"code","2baeeee9":"code","8ed54a9e":"code","7ef4b78a":"code","b1843cc9":"code","d810c9a1":"code","c1b483e9":"code","6a957079":"code","aceb6a23":"code","4bb9a5f0":"code","20705543":"code","176ef8c8":"code","cf47cdf3":"code","cd759710":"code","4ad9f979":"code","9773ff24":"code","d7d10277":"code","0480b1c8":"code","789c93ac":"code","e711841b":"code","c1ba9007":"code","d9a276ac":"code","aa3f74f7":"code","13e7a322":"code","99a9e663":"code","fd900056":"code","a4e2fe35":"code","88128ff3":"code","9137d67d":"code","554c8d74":"code","7a15ff79":"code","2a4d13a8":"code","87016d3b":"code","e4223b34":"code","0c5c6edb":"code","97383a53":"code","1aea543b":"code","d54907b4":"code","3a58201d":"code","e505fa13":"code","e25f312d":"code","d0ac545b":"code","9d386d20":"code","b7b499f9":"code","6366b945":"code","9bccecf8":"code","a840dcb0":"code","a22a14e8":"code","c79555fd":"code","57724047":"code","1245ab49":"code","d8b2b285":"code","30c61149":"markdown","b6b8ee03":"markdown","e10d7b00":"markdown","ccc9b119":"markdown","1e80d354":"markdown","5623f2bf":"markdown","0fa0301b":"markdown","49e3864f":"markdown","ee4790e0":"markdown","2b2b8dec":"markdown","1a0c0e2f":"markdown","017d1b43":"markdown","14e288fd":"markdown","28b4153c":"markdown","cb024cf6":"markdown","5cbf76df":"markdown","58ea1893":"markdown","1a003009":"markdown","11683654":"markdown","abb363ad":"markdown","784b8256":"markdown","d5a9a5f6":"markdown","1867f8f7":"markdown","b2678b39":"markdown","dd340a58":"markdown","6a7ce4ed":"markdown","6d488bf8":"markdown","45f91845":"markdown","e106f468":"markdown","d19d5528":"markdown"},"source":{"d49a324a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n!pip install seaborn==0.11.0\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.offline as py\nimport plotly.express as px\nimport missingno as msno\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e066c904":"df = pd.read_csv('..\/input\/pima-indians-diabetes-database\/diabetes.csv')\ndf.head()","3eac9afe":"df.columns","1a6869e6":"df.shape","a63262fb":"df.reset_index(inplace=True)\ndf.rename(columns={'index':'id'}, inplace=True)\ndf.head()","084844e7":"for col in df.columns:\n    df.rename(columns={col:col.lower()}, inplace=True)\n\ndf.rename(columns={'bloodpressure':'blood_pressure','skinthickness':'skin_thickness',\n                  'diabetespedigreefunction':'diabetes_pedigree_function'}, inplace=True)","72b5b3e1":"df.describe()","6db0c7e8":"df_healthy = df.loc[df['outcome'] == 0]\ndf_diabetic = df.loc[df['outcome'] == 1]","06c741da":"total = df.isnull().sum().sort_values(ascending=False)\npercent = ((df.isnull().sum())*100)\/df.isnull().count().sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total','Percent'], sort=False).sort_values('Total', ascending=False)\nmissing_data.head(40)","6fc867fd":"# REPLACE 0 VALUES WITH 'NAN'\ndf[['glucose','blood_pressure','skin_thickness','insulin','bmi']] = df[['glucose','blood_pressure','skin_thickness','insulin','bmi']].replace(0,np.NaN)","a896a547":"# totals = df.isnull().sum().sort_values(ascending=False)\ntotals = pd.DataFrame((len(df['id']) - df.isnull().sum()), columns = ['count'])\npercent = ((df.isnull().sum())*100)\/df.isnull().count().sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['total','percent'], sort=False).sort_values('total', ascending=False)\ntotals","cfdda693":"# VISUALIZE MISSING DATA PERCENTAGES\n\ndef missing_plot(dataset, feature):\n    totals = pd.DataFrame((len(df['id']) - df.isnull().sum()), columns = ['count'])\n    missing_percent = ((df.isnull().sum())*100)\/df.isnull().count().sort_values(ascending=False)\n    df_missing = pd.concat([total, missing_percent], axis=1, keys=['total','percent'], sort=False).sort_values('total', ascending=False)\n    df_missing = df_missing.round(2)\n    \n    trace = go.Bar(x = totals.index, \n                   y = totals['count'],\n                   opacity = 0.8, \n                   text = df_missing['percent'],  \n                   textposition = 'auto',\n                   marker=dict(color = '#41d9b3', line=dict(color='#000000',width=1.5)))\n\n    layout = dict(title =  \"Missing Value Count & Percentage\")\n\n    fig = dict(data = [trace], layout=layout)\n    py.iplot(fig)","d57d79fd":"missing_plot(df, 'id')","1d7350cc":"def get_mean(feat):\n    temp = df[df[feat].notnull()]\n    temp = temp[[feat,'outcome']].groupby(['outcome'])[[feat]].mean().reset_index()\n    temp = temp.round(2)\n    return temp\n","8a43d8ee":"def plot_dist(feature, binsize):\n    # 2 datasets\n    df_healthy = df.loc[df['outcome'] == 0]\n    healthy = df[feature]\n    \n    df_diabetic = df.loc[df['outcome'] == 1]\n    diabetic = df_diabetic[feature]\n    \n    hist_data = [healthy, diabetic]\n    \n    group_labels = ['healthy', 'diabetic']\n    colors = ['#41d9b3', '#c73062']\n\n    fig = ff.create_distplot(hist_data, group_labels, colors = colors, show_hist = True, bin_size = binsize, curve_type='kde')\n    \n    fig['layout'].update(title = feature.upper())\n\n    py.iplot(fig, filename = 'Density plot')","8e884da1":"get_mean('insulin')","25d8a3f1":"# REPLACE NAN VALUES WITH MEAN \n\ndf.loc[(df['outcome'] == 0) & (df['insulin'].isnull()), 'insulin'] = 130.29\ndf.loc[(df['outcome'] == 1) & (df['insulin'].isnull()), 'insulin'] = 206.85","d3a7947a":"plot_dist('insulin', 0)","ed4d734e":"get_mean('glucose')","66e7e2e5":"df.loc[(df['outcome'] == 0) & (df['glucose'].isnull()), 'glucose'] = 110.64\ndf.loc[(df['outcome'] == 1) & (df['glucose'].isnull()), 'glucose'] = 142.32","a5281c79":"plot_dist('glucose',0)","38efd369":"get_mean('blood_pressure')","7b5bc109":"# REPLACE NAN VALUES WITH MEAN \n\ndf.loc[(df['outcome'] == 0) & (df['blood_pressure'].isnull()), 'blood_pressure'] = 70.88\ndf.loc[(df['outcome'] == 1) & (df['blood_pressure'].isnull()), 'blood_pressure'] = 75.32","ae0af123":"plot_dist('blood_pressure', 0)","81e458ea":"get_mean('skin_thickness')","53f09c1a":"df.loc[(df['outcome'] == 0) & (df['skin_thickness'].isnull()), 'skin_thickness'] = 27.24\ndf.loc[(df['outcome'] == 1) & (df['skin_thickness'].isnull()), 'skin_thickness'] = 33.00","76f74c1d":"plot_dist('skin_thickness',0)","8060c19c":"get_mean('bmi')","33ba426a":"df.loc[(df['outcome'] == 0) & (df['bmi'].isnull()), 'bmi'] = 30.86\ndf.loc[(df['outcome'] == 1) & (df['bmi'].isnull()), 'bmi'] = 35.41","8dce80d8":"plot_dist('bmi',0)","688d1816":"get_mean('diabetes_pedigree_function')","747ad5b5":"df.loc[(df['outcome'] == 0) & (df['diabetes_pedigree_function'].isnull()), 'diabetes_pedigree_function'] = 0.43\ndf.loc[(df['outcome'] == 1) & (df['diabetes_pedigree_function'].isnull()), 'diabetes_pedigree_function'] = 0.55","c7e9aae9":"plot_dist('diabetes_pedigree_function',0)","90e3b7e4":"missing_plot(df, 'id')","265cecf4":"plot_dist('age',0)","31604683":"outcome_preg = df.groupby(['outcome','pregnancies'])[['id']].count()\noutcome_preg.reset_index(inplace=True)\noutcome_preg.rename(columns={'id':'count'}, inplace=True)\n\nsns.set_style('darkgrid')\nplt.figure(figsize=(15,6))\nsns.barplot(x='pregnancies', y='count', hue='outcome', data=outcome_preg, palette='viridis')\nplt.title('Diabetes - Pregnancy Outcome Count')\n","034c87a7":"plt.figure(figsize=(10,10))\nsns.heatmap(df.corr(), cbar = True,  square = True, annot=True, cmap= 'YlGnBu')\nplt.title('FEATURE VARIABLE CORRELATIONS')\n","7851c7ed":"def plot_features(feat1, feat2):  \n    diabetic = df[(df['outcome'] == 1)]\n    healthy = df[(df['outcome'] == 0)]\n    \n    trace0 = go.Scatter(x = diabetic[feat1], \n                        y = diabetic[feat2],\n                        name = 'diabetic',\n                        mode = 'markers', \n                        marker = dict(color = '#c73062', line = dict(width = 1)))\n\n    trace1 = go.Scatter(x = healthy[feat1], \n                        y = healthy[feat2],\n                        name = 'healthy',\n                        mode = 'markers',\n                        marker = dict(color = '#41d9b3', line = dict(width = 1)))\n\n    layout = dict(title = feat1.upper() + \" \" + \"vs\" +\" \" + feat2.upper(),\n                  height = 750, width = 1000,\n                  yaxis = dict(title = feat2.upper(), zeroline = False),\n                  xaxis = dict(title = feat1.upper(), zeroline = False))\n\n    plots = [trace0, trace1]\n\n    fig = dict(data = plots, layout=layout)\n    py.iplot(fig)","fcb2b139":"def barplot(feature, sub) :\n    diabetic = df[(df['outcome'] == 1)]\n    healthy = df[(df['outcome'] == 0)]\n#     tmp3 = pd.DataFrame(pd.crosstab(df[feature],df['outcome']), )\n    \n#     tmp3['% diabetic'] = tmp3[1] \/ (tmp3[1] + tmp3[0]) * 100\n\n    color=['#c73062','#41d9b3']\n    trace1 = go.Bar(x=diabetic[feature].value_counts().keys().tolist(),\n                    y=diabetic[feature].value_counts().values.tolist(),\n                    text=diabetic[feature].value_counts().values.tolist(),\n                    textposition = 'auto',\n                    name='diabetic',\n                    opacity = 0.8, \n                    marker=dict(color='#c73062', line=dict(color='#000000',width=1)))\n\n    \n    trace2 = go.Bar(x=healthy[feature].value_counts().keys().tolist(),\n                    y=healthy[feature].value_counts().values.tolist(),\n                    text=healthy[feature].value_counts().values.tolist(),\n                    textposition = 'auto',\n                    name='healthy', \n                    opacity = 0.8, \n                    marker=dict(color='#41d9b3', line=dict(color='#000000',width=1)))\n    \n#     trace3 =  go.Scatter(x=tmp3.index,\n#                          y=tmp3['% diabetic'],\n#                          yaxis = 'y2', \n#                          name='% diabetic', \n#                          opacity = 0.6, \n#                          marker=dict(color='black', line=dict(color='#000000',width=0.5)))\n\n    layout = dict(title = str(feature)+' '+(sub),\n                  xaxis=dict(), \n                  yaxis=dict(title='Count'), \n                  yaxis2=dict(range= [-0, 75], \n                              overlaying= 'y', \n                              anchor= 'x', \n                              side= 'right',\n                              zeroline=False,\n                              showgrid= False, \n                              title= '% diabetic'))\n\n    fig = go.Figure(data=[trace1, trace2], layout=layout)\n    py.iplot(fig)","5121d30d":"# Define pie plot to visualize each variable repartition vs target modalities : Survived or Died (train)\n\ndef pieplot(feature, sub):\n    diabetic = df[(df['outcome'] == 1)]\n    healthy = df[(df['outcome'] == 0)]\n    \n    col =['Silver', 'mediumturquoise','#CF5C36','lightblue','magenta', '#FF5D73','#F2D7EE','mediumturquoise']\n    \n    trace1 = go.Pie(values  = diabetic[feature].value_counts().values.tolist(),\n                    labels  = diabetic[feature].value_counts().keys().tolist(),\n                    textfont=dict(size=15), opacity = 0.8,\n                    hole = 0.5, \n                    hoverinfo = \"label+percent+name\",\n                    domain  = dict(x = [.0,.48]),\n                    name    = \"Diabetic\",\n                    marker  = dict(colors = col, line = dict(width = 1.5)))\n    \n    trace2 = go.Pie(values  = healthy[feature].value_counts().values.tolist(),\n                    labels  = healthy[feature].value_counts().keys().tolist(),\n                    textfont=dict(size=15), opacity = 0.8,\n                    hole = 0.5,\n                    hoverinfo = \"label+percent+name\",\n                    marker  = dict(line = dict(width = 1.5)),\n                    domain  = dict(x = [.52,1]),\n                    name    = \"Healthy\" )\n\n    layout = go.Layout(dict(title = feature.upper() + \" distribution by target: \"+(sub),\n                            annotations = [ dict(text = \"Diabetic\"+\" : \"+\"268\",\n                                                font = dict(size = 13),\n                                                showarrow = False,\n                                                x = .22, y = -0.1),\n                                            dict(text = \"Healthy\"+\" : \"+\"500\",\n                                                font = dict(size = 13),\n                                                showarrow = False,\n                                                x = .8,y = -.1)]))\n                                          \n\n    fig  = go.Figure(data = [trace1,trace2],layout = layout)\n    py.iplot(fig)","588e3ed7":"#CREATE A DATAFRAME WITH A COUNT OF EACH BOROUGH\noutcome = df.groupby(['outcome'])[['id']].count()\noutcome.reset_index(inplace=True)\noutcome.rename(columns={'id':'count'}, inplace=True)\noutcome.sort_values(by='count', ascending=False, inplace=True)\noutcome\n\n#CREATE BARCHART AND PIE CHART FOR BOUROUGH VALUES\nplt.style.use('fivethirtyeight')\n\nplt.figure(figsize=(15,6))\n\nplt.subplot(1,2,1)\nsns.barplot(x='outcome', y='count', data=outcome, palette='viridis')\nplt.title('Diabetes Outcome Count')\n\nplt.subplot(1,2,2)\nplt.pie(outcome['count'], labels=outcome['outcome'], shadow=True, startangle=90)\nplt.title('Diabetes Outcome Percentages')\n\nplt.show()","20577b11":"plot_features('pregnancies','age')","572aaa7b":"df.loc[:,'feat1']=0\ndf.loc[(df['age']<=30) & (df['pregnancies']<=6),'feat1']=1","2baeeee9":"barplot('feat1',':AGE <= 30 & PREGNANCIES <= 6')","8ed54a9e":"pieplot('feat1','AGE <= 30 & PREGNANCIES <= 6')","7ef4b78a":"plot_features('bmi','age')","b1843cc9":"df.loc[:,'feat2']= 0\ndf.loc[(df['age']<=30) & (df['bmi']<=30),'feat2']=1","d810c9a1":"barplot('feat2',': AGE <= 30 & BMI <= 30')","c1b483e9":"pieplot('feat2','AGE <= 30 & BMI <= 30')","6a957079":"plot_features('skin_thickness','age')","aceb6a23":"df.loc[:,'feat3'] = 0\ndf.loc[(df['age'] <= 30) & (df['skin_thickness'] <= 32), 'feat3'] = 1","4bb9a5f0":"barplot('feat3',': AGE <=30 & SKIN THICKNESS <=32')","20705543":"pieplot('feat3','AGE <=30 & SKIN THICKNESS <=32')","176ef8c8":"plot_features('glucose', 'age')","cf47cdf3":"df.loc[:,'feat4'] = 0\ndf.loc[(df['age'] <= 30) & (df['glucose'] <= 120), 'feat4'] = 1","cd759710":"barplot('feat4',': AGE <=30 & GLUCOSE <=120')","4ad9f979":"pieplot('feat4','AGE <= 30 & GLUCOSE <= 120')","9773ff24":"plot_features('glucose','blood_pressure')","d7d10277":"df.loc[:,'feat5'] = 0\ndf.loc[(df['glucose'] <= 100) & (df['blood_pressure'] <= 80), 'feat5'] = 1","0480b1c8":"barplot('feat5',': GLUCOSE <= 100 & BLOOD PRESSURE <=80')","789c93ac":"pieplot('feat5', 'GLUCOSE <= 100 & BLOOD PRESSURE <=80')","e711841b":"plot_features('glucose','bmi')","c1ba9007":"df.loc[:,'feat6'] = 0\ndf.loc[(df['bmi'] <= 40) & (df['glucose'] <= 100), 'feat6'] = 1","d9a276ac":"barplot('feat6',': GLUCOSE <= 100 & BMI <= 40')","aa3f74f7":"pieplot('feat6','GLUCOSE <= 100 & BMI <= 40')","13e7a322":"plot_features('glucose','skin_thickness')","99a9e663":"df.loc[:,'feat7'] = 0\ndf.loc[(df['glucose'] <= 120) & (df['skin_thickness'] <= 32), 'feat7'] = 1","fd900056":"barplot('feat7',': GLUCOSE <= 120 & SKIN THICKNESS <= 32')","a4e2fe35":"pieplot('feat7','GLUCOSE <= 120 & SKIN THICKNESS <= 32')","88128ff3":"plot_features('glucose','insulin')","9137d67d":"df.loc[:,'feat8'] = 0\ndf.loc[(df['insulin'] <= 130) & (df['glucose'] <= 120), 'feat8'] = 1","554c8d74":"barplot('feat8',': GLUCOSE <= 120 & INSULIN <= 130')","7a15ff79":"pieplot('feat8','GLUCOSE <= 120 & INSULIN <= 130')","2a4d13a8":"plot_features('blood_pressure','bmi')","87016d3b":"df.loc[:,'feat9'] = 0\ndf.loc[(df['bmi'] <= 30) & (df['blood_pressure'] <= 80), 'feat9'] = 1","e4223b34":"barplot('feat9',': BMI <= 30 & BLOOD PRESSURE <= 80')","0c5c6edb":"barplot('feat9','BMI <= 30 & BLOOD PRESSURE <= 80')","97383a53":"plot_features('blood_pressure','skin_thickness')","1aea543b":"df.loc[:,'feat10'] = 0\ndf.loc[(df['blood_pressure'] <= 80) & (df['skin_thickness'] <= 28), 'feat10'] = 1","d54907b4":"barplot('feat10',': BLOOD PRESSURE <= 80 & SKIN THICKNESS <= 28')","3a58201d":"pieplot('feat10','BLOOD PRESSURE <= 80 & SKIN THICKNESS <= 28')","e505fa13":"plot_features('skin_thickness','insulin')","e25f312d":"df.loc[:,'feat11'] = 0\ndf.loc[(df['skin_thickness'] <= 40) & (df['insulin'] <= 131), 'feat11'] = 1","d0ac545b":"barplot('feat11',': SKIN THICKNESS <= 28 & INSULIN <= 131')","9d386d20":"pieplot('feat11','SKIN THICKNESS <= 28 & INSULIN <= 131')","b7b499f9":"plot_features('skin_thickness','bmi')","6366b945":"df.loc[:,'feat12'] = 0\ndf.loc[(df['bmi'] <= 30) & (df['skin_thickness'] <= 28), 'feat12'] = 1","9bccecf8":"barplot('feat12',': SKIN THICKNESS <= 28 & BMI <= 30')","a840dcb0":"pieplot('feat12','SKIN THICKNESS <= 28 & BMI <= 30')","a22a14e8":"plot_features('insulin','bmi')","c79555fd":"df.loc[:,'feat13'] = 0\ndf.loc[(df['bmi'] <= 40) & (df['insulin'] <= 131), 'feat13'] = 1","57724047":"barplot('feat13',': BMI <= 40 & INSULIN <= 131')","1245ab49":"pieplot('feat13','BMI <= 40 & INSULIN <= 131')","d8b2b285":"plt.figure(figsize=(18,18))\nsns.heatmap(df.corr(), cbar = True,  square = False, annot=True, cmap= 'YlGnBu')\nplt.title('FEATURE VARIABLE CORRELATIONS')","30c61149":"### FEAT 11: SKIN THICKNESS vs INSULIN","b6b8ee03":"### FEAT6: GLUCOSE vs BMI","e10d7b00":"### FEAT5: GLUCOSE vs BLOOD PRESSURE","ccc9b119":"### DIABETES PEDIGREE FUNCTION","1e80d354":"### INSULIN","5623f2bf":"### FEAT 8: GLUCOSE vs INSULIN","0fa0301b":"### FEAT1: AGE & PREGNANCIES","49e3864f":"According to this dataframe there are no missing values, however some features contain a 0 value which doesn't make sense for features such as BMI. So let's replace 0 with NaN for features that should not contain 0 values. ","ee4790e0":"### FEAT 12: SKIN THICKNESS vs BMI","2b2b8dec":"### FEAT3: AGE vs SKIN THICKNESS","1a0c0e2f":"# <a id='4'>IV. EXPLORATORY DATA ANALYSIS<\/a> ","017d1b43":"# <a id='2'>II. DATA OVERVIEW & INITIAL INSIGHTS<\/a>","14e288fd":"<h3 class=\"list-group-item list-group-item-action active\" data-toggle=\"list\"  role=\"tab\" aria-controls=\"home\">Table of Contents<\/h3>\n\n* <a href='#1'>I. LOAD LIBRARIES & PACKAGES<\/a>\n\n* <a href='#2'>II. DATA OVERVIEW & INSIGHTS<\/a>\n\n* <a href='#3'>III. MISSING DATA & UNIVARIATE ANALYSIS<\/a>\n    \n* <a href='#4'>IV. EXPLORATORY DATA ANALYSIS<\/a>\n    * <a href='#4a'>IVa. Define Plot Functions<\/a> \n    * <a href='#4b'>IVb. Bivariate Exploration<\/a> ","28b4153c":"# <a id='3'>III. MISSING VALUES & UNIVARIATE EXPLORATION<\/a>","cb024cf6":"### SKIN THICKNESS","5cbf76df":"### FEAT 10: BLOOD PRESSURE vs SKIN THICKNESS","58ea1893":"### GLUCOSE","1a003009":"## CORRELATION","11683654":"### FEAT 9: BLOOD PRESSURE vs BMI","abb363ad":"### FEAT 7: GLUCOSE vs SKIN THICKNESS","784b8256":"### BMI","d5a9a5f6":"### FEAT 13: INSULIN vs BMI","1867f8f7":"## <a id='4b'>IVb. BIVARIATE EXPLORATION & NEW FEATURE CREATION<\/a>","b2678b39":"## <a id='4a'>IVa. DEFINE PLOTTING FUNCTIONS<\/a>\n","dd340a58":"### FEAT2: AGE VS BMI","6a7ce4ed":"### GET MEAN VALUES FOR EACH FEAUTRE WITH NAN VALUES","6d488bf8":"# <a id='1'>I. LOAD PACKAGES & LIBRARIES<\/a>","45f91845":"### FEAT4: AGE vs GLUCOSE","e106f468":"### BLOOD PRESSURE","d19d5528":"<p  style=\"text-align: center;\"><font size=\"12\"><b>PIMA INDIANS & DIABETES<\/b><\/font><\/p>\n<p  style=\"text-align: center;\"><font size=\"4\"><b>AN EXPLORATORY DATA ANALYSIS<\/b><\/font><\/p>\n\n### ABOUT THE DATASET\nThe datasets consists of several medical predictor variables and one target variable, **Outcome**. Predictor variables includes the number of pregnancies the patient has had, their **BMI**, **insulin level**, **age**, and so on.\n\n### CONTEXT\nThis dataset is originally from the National Institute of Diabetes and Digestive and Kidney Diseases. The objective of the dataset is to  predict whether or not a patient has diabetes, based on certain diagnostic measurements included in the dataset. All patients here are females at least 21 years old of Pima Indian heritage.\n\n"}}