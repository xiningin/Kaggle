{"cell_type":{"953348ba":"code","01fc2b03":"code","cdff861f":"code","ac089fd3":"code","fcae216b":"code","302bf97e":"code","56cdd249":"code","fd64276f":"code","a1541b64":"code","1eb047a1":"code","5ad4559b":"code","30261ee4":"code","8949ccf1":"code","04228449":"code","0f3092c3":"code","8e55293a":"code","bd8cd9ff":"code","f9fd747b":"code","5344fac3":"code","6603320c":"code","2fca3690":"code","817e0038":"markdown","1ee3ec7f":"markdown","1863574a":"markdown","0f10e0dd":"markdown","a43e1b12":"markdown","7ee60cd0":"markdown","7e066b5b":"markdown","e1bca40f":"markdown","6a71f6f4":"markdown","3aca8dd3":"markdown"},"source":{"953348ba":"# used for data analysis\nimport pandas as pd\nimport numpy as np\n\n\n# Data visualization libraries\n# 1. matplotlib\nimport matplotlib.pyplot as plt\n\n# 2. plotly\nimport cufflinks as cf\nimport plotly.offline\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\n\ncf.go_offline()\ncf.set_config_file(offline=False, world_readable=True)\ninit_notebook_mode(connected=True)\n\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom statsmodels.graphics.tsaplots import plot_acf,plot_pacf \nfrom statsmodels.tsa.seasonal import seasonal_decompose \n#from pmdarima import auto_arima                        \nfrom sklearn.metrics import mean_squared_error\nfrom statsmodels.tools.eval_measures import rmse","01fc2b03":"import warnings\nwarnings.filterwarnings('ignore')","cdff861f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","ac089fd3":"# Loading the train dataset\ntest = pd.read_csv('\/kaggle\/input\/covid19-local-us-ca-forecasting-week-1\/ca_test.csv')\n\n# Loading the test dataset\ntrain = pd.read_csv('\/kaggle\/input\/covid19-local-us-ca-forecasting-week-1\/ca_train.csv')","fcae216b":"train.tail()","302bf97e":"print('The train data has',train.shape[0],'rows.')\nprint('The tarin data has',train.shape[1],'columns.')","56cdd249":"fig = go.Figure()\n\nfig.add_trace(go.Scatter(x=train['Date'], y=train['ConfirmedCases'],\n                    mode='lines+markers',\n                    name='Confirmed Cases'))\nfig.add_trace(go.Scatter(x=train['Date'], y=train['Fatalities'],\n                    mode='lines+markers',\n                    name='Fatalities'))\nfig.update_layout(\n    title=\"Confirmed Cases and Fatalities in CA\",\n    xaxis_title=\"Date\",\n    yaxis_title=\"Count\",\n)\n\nfig.show()","fd64276f":"df = train[train['Date'] > '2020-03-08']\nfig = go.Figure()\n\nfig.add_trace(go.Scatter(x=df['Date'], y=np.log(df['ConfirmedCases']+1),\n                    mode='lines+markers',\n                    name='Confirmed Cases'))\nfig.add_trace(go.Scatter(x=df['Date'], y=np.log(df['Fatalities']+1),\n                    mode='lines+markers',\n                    name='Fatalities'))\nfig.update_layout(\n    title=\"Confirmed Cases and Fatalities in CA\",\n    xaxis_title=\"Date\",\n    yaxis_title=\"Count\",\n)\n\nfig.show()","a1541b64":"# Creating time series data\ntrain_data = train[['Date','ConfirmedCases','Fatalities']]\n#test_data = test[['Date','ConfirmedCases','Fatalities']]\n\ntrain_data.index = pd.to_datetime(train_data['Date'])\ntrain_data = train_data[['ConfirmedCases','Fatalities']]\n#test_data.index = pd.to_datetime(test_data['Date'])","1eb047a1":"# Linear regression\n","5ad4559b":"import statsmodels.api as sm\n\nfig = plt.figure(figsize=(12,8))\nax1 = fig.add_subplot(211)\nfig = sm.graphics.tsa.plot_acf(train['ConfirmedCases'], lags=40, ax=ax1) # \nax2 = fig.add_subplot(212)\nfig = sm.graphics.tsa.plot_pacf(train['ConfirmedCases'], lags=40, ax=ax2)# , lags=40","30261ee4":"from pmdarima.arima import auto_arima\nstepwise_model_cc = auto_arima(train['ConfirmedCases'], start_p=1, start_q=1,\n                           max_p=3, max_q=3, m=12,\n                           start_P=0, seasonal=False,\n                           d=1, trace=True,\n                           error_action='ignore',  \n                           suppress_warnings=True, \n                           stepwise=True)\nprint(stepwise_model_cc.aic())\n\nstepwise_model_cc.fit(train['ConfirmedCases'])","8949ccf1":"arima_model = ARIMA(train_data['ConfirmedCases'], order = (1,1,0))\narima_result = arima_model.fit()\narima_result.summary()","04228449":"arima_pred_conf = arima_result.predict(start = '2020-03-12', end = '2020-04-23', typ=\"levels\").rename(\"ARIMA Predictions\")","0f3092c3":"fig = go.Figure()\n\nfig.add_trace(go.Scatter(x=arima_pred_conf.index, y=arima_pred_conf.values,\n                    mode='lines+markers',\n                    name='Prediction'))\nfig.add_trace(go.Scatter(x=train['Date'], y=train['ConfirmedCases'],\n                    mode='lines+markers',\n                    name='Actual'))\nfig.update_layout(\n    title=\"Confirmed Cases in CA\",\n    xaxis_title=\"Date\",\n    yaxis_title=\"Count\",\n)\n\nfig.show()","8e55293a":"import statsmodels.api as sm\n\nfig = plt.figure(figsize=(12,8))\nax1 = fig.add_subplot(211)\nfig = sm.graphics.tsa.plot_acf(train['Fatalities'], lags=40, ax=ax1) # \nax2 = fig.add_subplot(212)\nfig = sm.graphics.tsa.plot_pacf(train['Fatalities'], lags=40, ax=ax2)# , lags=40","bd8cd9ff":"from pmdarima.arima import auto_arima\nstepwise_model_f = auto_arima(train['Fatalities'], start_p=1, start_q=1,\n                           max_p=3, max_q=3, m=12,\n                           start_P=0, seasonal=False,\n                           d=1, trace=True,\n                           error_action='ignore',  \n                           suppress_warnings=True, \n                           stepwise=True)\nprint(stepwise_model_f.aic())","f9fd747b":"arima_model = ARIMA(train_data['Fatalities'], order = (1,1,0))\narima_result = arima_model.fit()\narima_result.summary()","5344fac3":"arima_pred_fatal = arima_result.predict(start = '2020-03-12', end = '2020-04-23', typ=\"levels\").rename(\"ARIMA Predictions\")","6603320c":"frame = { 'ConfirmedCases': arima_pred_conf, 'Fatalities': arima_pred_fatal } \ndf = pd.DataFrame(frame) \n\ntest.index = pd.to_datetime(test['Date'])\nfinal = pd.merge(test,df,left_index=True,right_index=True,how='left')\nfinal.head()","2fca3690":"final[['ForecastId','ConfirmedCases','Fatalities']].to_csv('submission.csv',index=False)","817e0038":"### Fatalities","1ee3ec7f":"# Modeling","1863574a":"<h1>Table of Contents<span class=\"tocSkip\"><\/span><\/h1>\n<div class=\"toc\"><ul class=\"toc-item\"><li><span><a href=\"#COVID19-Local-US-CA-Forecasting-(Week-1)\" data-toc-modified-id=\"COVID19-Local-US-CA-Forecasting-(Week-1)-1\">COVID19 Local US-CA Forecasting (Week 1)<\/a><\/span><\/li><li><span><a href=\"#Technical-specification\" data-toc-modified-id=\"Technical-specification-2\">Technical specification<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#1.-Hardware-overview\" data-toc-modified-id=\"1.-Hardware-overview-2.1\">1. Hardware overview<\/a><\/span><\/li><li><span><a href=\"#2.-Software-overview\" data-toc-modified-id=\"2.-Software-overview-2.2\">2. Software overview<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#Required-libraries\" data-toc-modified-id=\"Required-libraries-3\">Required libraries<\/a><\/span><\/li><li><span><a href=\"#Reading-data\" data-toc-modified-id=\"Reading-data-4\">Reading data<\/a><\/span><\/li><li><span><a href=\"#Data-understanding-and-wrangling\" data-toc-modified-id=\"Data-understanding-and-wrangling-5\">Data understanding and wrangling<\/a><\/span><\/li><li><span><a href=\"#Modeling\" data-toc-modified-id=\"Modeling-6\">Modeling<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#Regression\" data-toc-modified-id=\"Regression-6.1\">Regression<\/a><\/span><\/li><li><span><a href=\"#ARIMA\" data-toc-modified-id=\"ARIMA-6.2\">ARIMA<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#Confirmed-Cases\" data-toc-modified-id=\"Confirmed-Cases-6.2.1\">Confirmed Cases<\/a><\/span><\/li><li><span><a href=\"#Fatalities\" data-toc-modified-id=\"Fatalities-6.2.2\">Fatalities<\/a><\/span><\/li><\/ul><\/li><\/ul><\/li><li><span><a href=\"#Prediction\" data-toc-modified-id=\"Prediction-7\">Prediction<\/a><\/span><\/li><\/ul><\/div>","0f10e0dd":"# Prediction","a43e1b12":"# Data understanding and wrangling","7ee60cd0":"# Technical specification\n\nFor this project all the data cleaning and all the model building including training, validation and testing was done in Python 3.7.3. Python needs to have the following additional packages installed:\n\n\u2022\tPython <br>\n\u2022\tNumpy <br>\n\u2022\tPandas<br>\n\u2022\tchart_studio<br>\n\u2022\tplotly<br>\n","7e066b5b":"# Reading data","e1bca40f":"## Regression","6a71f6f4":"# Required libraries","3aca8dd3":"## ARIMA\n### Confirmed Cases"}}