{"cell_type":{"db7a640b":"code","8879408f":"code","070d55e8":"code","ec655634":"code","ecc1fdd3":"code","ef1b5eab":"code","f4ce6696":"code","efc34d4c":"code","03da90de":"code","e42c1efb":"code","960312e2":"code","5d7eb7b4":"code","52f872a4":"code","4ab60b58":"code","4eb3f79c":"code","3aa79972":"code","f950adfd":"code","9360c75f":"code","5b91cbd5":"code","f3fdecb2":"code","3a9d228d":"code","db932d95":"code","4cd32ace":"code","54af1ab8":"code","c85de8bc":"code","5e3ac915":"code","c18c901a":"code","a6ebce05":"code","c35daf35":"code","dbbe434c":"code","37a54f1f":"code","4da7ca6d":"code","45b6cbce":"code","43ba9253":"code","f585bd81":"code","cb3c64c6":"code","78c5dc5e":"code","45c1ca37":"code","376f1090":"code","cb1869c9":"code","47aeacfd":"code","ef3c82aa":"code","3b5c37f3":"code","f96f6786":"code","7ea4bbae":"code","9e574986":"code","d9348110":"code","8fd7cfee":"code","1c997484":"code","d28ba256":"code","1c2c6191":"code","6f943ca0":"code","ca267590":"code","c2408649":"code","e235bee7":"code","f7d1eb1f":"code","dfd5dc7a":"markdown","97e294b7":"markdown","24bd5ecb":"markdown","b88467ac":"markdown","bd2612fa":"markdown","130a25e0":"markdown","5dccd5a8":"markdown","de153474":"markdown","bbaaf02b":"markdown","2001df66":"markdown","e945f2c9":"markdown","f2e27f77":"markdown","1fca66db":"markdown","7fb2716e":"markdown","7bca685b":"markdown","ea3c0d80":"markdown","9ee634ce":"markdown","095ffeb4":"markdown","024602ae":"markdown","4667c415":"markdown","7080a832":"markdown","2661c076":"markdown","33db217f":"markdown","6f84a33d":"markdown","6a8ec8ef":"markdown","c122a861":"markdown","8a0bb969":"markdown","eb350968":"markdown","c39a88b9":"markdown","b29f5476":"markdown","93fa514a":"markdown"},"source":{"db7a640b":"import pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as pt\nimport seaborn as sns\n","8879408f":"df_gendersub =  pd.read_csv('..\/input\/titanic\/gender_submission.csv')\ndf_train = pd.read_csv('..\/input\/titanic\/train.csv')\ndf_test = pd.read_csv('..\/input\/titanic\/test.csv')","070d55e8":"print(df_gendersub.shape)\nprint(df_train.shape)\nprint(df_test.shape)\ndf_train.head(3)","ec655634":"df_train = df_train.drop(['PassengerId','Name','Ticket','Cabin'], axis=1)\ndf_train.head(2)","ecc1fdd3":"print('Total :', df_train['Survived'].count())\nprint('Survived:\\n',df_train['Survived'].value_counts())\nsns.countplot(x='Survived',data=df_train)","ef1b5eab":"print(df_train['Sex'].value_counts(),'\\n')\nprint(df_train.groupby(by='Sex')['Survived'].value_counts())\n\npt.figure(figsize=(7,5))\nsns.countplot(x='Sex',hue='Survived',data=df_train)\npt.title('Survived Crash')","f4ce6696":"df_train.head(3)","efc34d4c":"df_train['Age'].describe()","03da90de":"f,ax=pt.subplots(nrows=1,ncols=2,figsize=(12,6))\n\na=sns.histplot(x=df_train.Age.dropna(),bins=list(np.arange(start=0,stop=85,step=5)),color='yellow',label='total population',kde=False,element='step',ax=ax[0])\na=sns.histplot(x=df_train[df_train['Survived']==1].Age.dropna(),bins=list(np.arange(start=0,stop=85,step=5)),color='green',label='survived',kde=False,element='step',ax=ax[0])\na.legend()\n\nb=sns.histplot(x=df_train[df_train['Survived']==0].Age.dropna(),bins=list(np.arange(start=0,stop=85,step=5)),color='blue',label='not survived',kde=False,element='step',ax=ax[1])\nb=sns.histplot(x=df_train[df_train['Survived']==1].Age.dropna(),bins=list(np.arange(start=0,stop=85,step=5)),color='green',label='survived',kde=False,element='step',ax=ax[1])\nb.legend()","e42c1efb":"print(df_train['Embarked'].value_counts(),'\\n')\nprint(df_train.groupby(by='Embarked')['Survived'].value_counts())\n\npt.figure(figsize=(7,5))\nsns.countplot(x='Embarked',hue='Survived',data=df_train)\npt.title(\"Embarked vs Survived\")","960312e2":"df_train.head(3)","5d7eb7b4":"print(df_train['Pclass'].value_counts(),'\\n')\nprint(df_train.groupby(by='Pclass')['Survived'].value_counts())\nsns.countplot(x='Pclass',hue='Survived',data=df_train)","52f872a4":"\ndf_train.head()","4ab60b58":"print('SibSp\\n',df_train['SibSp'].value_counts(),'\\n')\nprint(df_train.groupby(by='SibSp')['Survived'].value_counts(),'\\n')\nprint('Parch\\n',df_train['Parch'].value_counts(),'\\n')\nprint(df_train.groupby(by='Parch')['Survived'].value_counts())","4eb3f79c":"f,ax = pt.subplots(1,2,figsize=(12,6))\nsns.barplot(x='SibSp',y='Survived',data=df_train,ax=ax[0])\nsns.barplot(x='Parch',y='Survived',data=df_train,ax=ax[1])","3aa79972":"data = [df_train, df_test]\nfor dataset in data:\n    dataset['Relatives'] = dataset['SibSp'] + dataset['Parch']\ndf_train.head()","f950adfd":"sns.barplot(x='Relatives',y='Survived',data=df_train)","9360c75f":"df_train.dtypes","5b91cbd5":"df_train['Age'].isnull().sum()","f3fdecb2":"data = [df_train, df_test]\n\nfor dataset in data:\n    mean = df_train[\"Age\"].mean()\n    std = df_test[\"Age\"].std()\n    is_null = dataset[\"Age\"].isnull().sum()\n    # compute random numbers between the mean, std and is_null\n    rand_age = np.random.randint(mean - std, mean + std, size = is_null)\n    # fill NaN values in Age column with random values generated\n    age_slice = dataset[\"Age\"].copy()\n    age_slice[np.isnan(age_slice)] = rand_age\n    dataset[\"Age\"] = age_slice\n    dataset[\"Age\"] = df_train[\"Age\"].astype(int)\ndf_train[\"Age\"].isnull().sum()","3a9d228d":"print('MIN: ',df_train['Age'].min())\nprint('MAX: ',df_train['Age'].max())\nprint('MEAN: ',df_train['Age'].mean())\n\ndata = [df_train, df_test]\nfor dataset in data:\n    dataset['Age'] = dataset['Age'].astype(int)\n    dataset.loc[ dataset['Age'] <= 11, 'Age'] = 0\n    dataset.loc[(dataset['Age'] > 11) & (dataset['Age'] <= 18), 'Age'] = 1\n    dataset.loc[(dataset['Age'] > 18) & (dataset['Age'] <= 22), 'Age'] = 2\n    dataset.loc[(dataset['Age'] > 22) & (dataset['Age'] <= 27), 'Age'] = 3\n    dataset.loc[(dataset['Age'] > 27) & (dataset['Age'] <= 33), 'Age'] = 4\n    dataset.loc[(dataset['Age'] > 33) & (dataset['Age'] <= 40), 'Age'] = 5\n    dataset.loc[(dataset['Age'] > 40) & (dataset['Age'] <= 66), 'Age'] = 6\n    dataset.loc[ dataset['Age'] > 66, 'Age'] = 6\n\n# let's see how it's distributed \ndf_train['Age'].value_counts()","db932d95":"df_train.head()","4cd32ace":"print(df_train['Embarked'].describe())\ndf_test['Embarked'].describe()","54af1ab8":"data = [df_train, df_test]\n\nfor dataset in data:\n    dataset['Embarked'] = dataset['Embarked'].fillna('S')\n    dataset['Embarked'].replace(['S','C','Q'],[0,1,2],inplace=True)\ndf_train['Embarked'].head()","c85de8bc":"df_train.head()","5e3ac915":"data = [df_train, df_test]\n\nfor dataset in data:\n    dataset['Fare'] = dataset['Fare'].fillna(0)\n    dataset['Fare'] = dataset['Fare'].astype(int)","c18c901a":"df_train['Fare_Range']=pd.qcut(df_train['Fare'],4)\ndf_train.groupby(['Fare_Range'])['Survived'].mean().to_frame()","a6ebce05":"df_train.drop(['Fare_Range'],axis=1,inplace=True)","c35daf35":"df_train['Fare_cat']=0\ndf_train.loc[df_train['Fare']<=7,'Fare_cat']=0\ndf_train.loc[(df_train['Fare']>7)&(df_train['Fare']<=14),'Fare_cat']=1\ndf_train.loc[(df_train['Fare']>14)&(df_train['Fare']<=31),'Fare_cat']=2\ndf_train.loc[(df_train['Fare']>31)&(df_train['Fare']<=513),'Fare_cat']=3","dbbe434c":"df_train['Sex'].replace(['male','female'],[0,1],inplace=True)\ndf_test['Sex'].replace(['male','female'],[0,1],inplace=True)","37a54f1f":"df_train.head()","4da7ca6d":"## Adding new feature Fare_per_person\ndata = [df_train, df_test]\nfor dataset in data:\n    dataset['Fare_Per_Person'] = dataset['Fare']\/(dataset['Relatives']+1)\n    dataset['Fare_Per_Person'] = dataset['Fare_Per_Person'].astype(int)\n    \ndf_train.head()","45b6cbce":"sns.heatmap(df_train[['Survived','Pclass','Sex','Relatives','Fare','SibSp','Parch','Embarked','Age','Fare_cat','Fare_Per_Person']].corr(),annot=True)","43ba9253":"df_train.drop([],axis=1,inplace=True)","f585bd81":"X = df_train.drop(\"Survived\", axis=1)\ny = df_train[\"Survived\"]","cb3c64c6":"from sklearn.model_selection import train_test_split\n\n\nX_train,X_test,y_train,y_test =train_test_split(X,y,test_size=0.12,stratify=y)\n\nprint(X_train.shape)\nprint(y_train.shape)\nprint(X_test.shape)\nprint(y_test.shape)","78c5dc5e":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\n\nmodel_lr = LogisticRegression(solver='liblinear')\nmodel_lr.fit(X_train,y_train)\npred_lr=model_lr.predict(X_test)\n\nprint('Training Accuracy: ',round(model_lr.score(X_train,y_train)*100,2))\nprint('Test Accuracy: ',round(accuracy_score(y_test,pred_lr)*100,2))","45c1ca37":"from sklearn.svm import SVC\n\nmodel_svc = SVC(gamma='auto')\nmodel_svc.fit(X_train,y_train)\ny_pred_svc=model_svc.predict(X_test)\n\nprint('Training Accuracy: ',round(model_svc.score(X_train,y_train)*100,2))\nprint('Test Accuracy: ',round(accuracy_score(y_test,y_pred_svc)*100,2))","376f1090":"from sklearn.tree import DecisionTreeClassifier\n\nmodel_dt = DecisionTreeClassifier(criterion='entropy') \nmodel_dt.fit(X_train, y_train)  \ny_pred_dt = model_dt.predict(X_test)  \n\nprint('Training Accuracy: ',round(model_dt.score(X_train,y_train)*100,2))\nprint('Test Accuracy: ',round(accuracy_score(y_test,y_pred_dt)*100,2))","cb1869c9":"from sklearn.ensemble import RandomForestClassifier\n\nmodel_rf = RandomForestClassifier(n_estimators=100,criterion='entropy')\nmodel_rf.fit(X_train,y_train)\ny_pred_rf = model_rf.predict(X_test)\n\nprint('Training Accuracy: ',round(model_rf.score(X_train,y_train)*100,2))\nprint('Test Accuracy: ',round(accuracy_score(y_test,y_pred_rf)*100,2))","47aeacfd":"from sklearn.neighbors import KNeighborsClassifier\n\nmodel_knn = KNeighborsClassifier(n_neighbors = 3) \nmodel_knn.fit(X_train, y_train)  \ny_pred_knn = model_knn.predict(X_test)  \n\nprint('Training Accuracy: ',round(model_knn.score(X_train,y_train)*100,2))\nprint('Test Accuracy: ',round(accuracy_score(y_test,y_pred_knn)*100,2))","ef3c82aa":"from sklearn.model_selection import cross_val_score\n\nrf = RandomForestClassifier(n_estimators=100,criterion='entropy')\n\nscores = cross_val_score(rf,X_train,y_train,cv=10,scoring='accuracy')\n\nprint('Accuracy Scores: ',scores,'\\nMean: ',scores.mean(),'\\nStd Deviation: ',scores.std())","3b5c37f3":"imp_features = pd.DataFrame({'feature':X_train.columns,'importance':np.round(model_rf.feature_importances_,3)})\nimp_features = imp_features.sort_values('importance',ascending=False).set_index('feature')\nimp_features.head(10)","f96f6786":"model_rf_final = RandomForestClassifier(n_estimators=100,oob_score=True)\nmodel_rf_final.fit(X_train,y_train)\npred_rf_final = model_rf_final.predict(X_test)\n\nprint('Accuracy: ',round(accuracy_score(y_test,pred_rf_final)*100,2))\nprint(\"oob score:\", round(model_rf_final.oob_score_,2)*100, \"%\")","7ea4bbae":"from sklearn.model_selection import cross_val_predict\n\npredictions = cross_val_predict(model_rf_final, X_train, y_train, cv=3)\npd.crosstab(y_train, predictions,rownames=['Actual'], colnames=['Predicted'])","9e574986":"from sklearn.metrics import precision_score, recall_score,f1_score\n\nprint(\"Precision:\", precision_score(y_train, predictions))\nprint(\"Recall:\",recall_score(y_train, predictions))\nprint(\"F1-Score:\",f1_score(y_train, predictions))","d9348110":"from sklearn.metrics import roc_auc_score\n\ny_pred_proba = model_rf_final.predict_proba(X_train)\ny_pred_proba = y_pred_proba[:,1]\nr_a_score = roc_auc_score(y_train, y_pred_proba)\nprint(\"ROC-AUC-Score:\", r_a_score)","8fd7cfee":"df_test.drop(['PassengerId','Name','Ticket','Cabin'],axis=1,inplace=True)","1c997484":"df_test['Fare_cat']=0\ndf_test.loc[df_test['Fare']<=7,'Fare_cat']=0\ndf_test.loc[(df_test['Fare']>7)&(df_test['Fare']<=14),'Fare_cat']=1\ndf_test.loc[(df_test['Fare']>14)&(df_test['Fare']<=31),'Fare_cat']=2\ndf_test.loc[(df_test['Fare']>31)&(df_test['Fare']<=513),'Fare_cat']=3","d28ba256":"df_train.head(2)","1c2c6191":"df_test.head(2)","6f943ca0":"y_pred_final = model_rf_final.predict(df_test)","ca267590":"y_pred_final","c2408649":"df_test = pd.read_csv('..\/input\/titanic\/test.csv')\nsubmission = pd.DataFrame({'PassengerId':df_test['PassengerId'],'Survived':y_pred_final})\nsubmission.head()","e235bee7":"accuracy_score(df_gendersub.Survived,submission.Survived)","f7d1eb1f":"submission.to_csv('Titanic_Pred.csv',index=False)","dfd5dc7a":"#### KNN","97e294b7":"##### It will makee more sense if we combine these two features into single feature \"relatives\" ","24bd5ecb":"### Total survived","b88467ac":"## Making Submission","bd2612fa":"### Sex vs Survived","130a25e0":"\n# Prediction","5dccd5a8":"### Embarked vs Survived","de153474":"### SibSp+Parch vs Survived","bbaaf02b":"### Cross validation test","2001df66":"##### Only 33.6% people survived who were embarked from Southampton (S).<br>55.3% people survived who were embarked from Cherbourg (C).<br>38.9% people survived who were embarked from Queenstown (Q).","e945f2c9":"# **EDA**","f2e27f77":"#### Logistics Regression","1fca66db":"#### SVM","7fb2716e":"##### Person having num of relatives between 1,2 & 3  onboard had higher chances of survival as compared to one having less than 1 or more than 3 (except the case with 6 relatives).","7bca685b":"#### Confusion Matrix","ea3c0d80":"# **Titanic crash analysis**","9ee634ce":"##### Only 38.3% (approx) passangers survived the crash","095ffeb4":"##### PassengerId is unique identifier. So we can drop this feature.<br> Also dropping Name,Ticket & Cabin.","024602ae":"#### Age (Handling null and creating int categories)","4667c415":"##### Here, Higher the Pclass (fare\/price of ticket) higher the chances of survival.<br> Pclass=1 had 62.9% rate of survival,<br>Pclass=2 had 47.2% of survival,<br>Pclass=3 had only 24.2% rate of survival","7080a832":"#### Sex","2661c076":"##### Approximate 74.2% Females survived the crash & approx 19% Males survived the crash.\n##### Like the movie, people were saving womans first.\n##### There may be chance of giving priority to childrens also, so feature \"Age\" may be also important (we'll check on this).","33db217f":"#### Random Forest","6f84a33d":"##### Our model has vaerage accuracy of 80.1%   [+-3% to +-4% ]","6a8ec8ef":"#### Embarked ","c122a861":"### Age vs Survived","8a0bb969":"#### Decision Tree","eb350968":"#### Fare","c39a88b9":"##### Younger and Older passengers have relatively more rate of survival when compared to mid-age passengers.","b29f5476":"### PClass vs Survived","93fa514a":"# Data Pre-processing\/enginnering"}}