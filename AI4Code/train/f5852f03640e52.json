{"cell_type":{"9f1f72dc":"code","2337c568":"code","7e56e818":"code","2644c770":"code","b174fff6":"code","1f357e19":"code","a36df628":"code","24827111":"code","7a251f26":"code","06d802ec":"code","05f2bf2d":"code","885bed9c":"code","5102c015":"code","42ce4673":"code","568d1179":"code","7991c788":"code","1c9236c9":"code","cdd070cc":"code","c461e420":"code","d7e73660":"code","87aa1431":"code","089c2799":"code","1f7fc750":"code","181242a7":"code","5525892d":"code","89b6c427":"code","689c8731":"code","6ca17e94":"code","4e0897c4":"code","165747d0":"code","eec45ce7":"code","b355de8d":"code","e1b0285a":"code","77f4a293":"code","86ec6144":"code","c32b848b":"code","c78e49d6":"markdown","56fadf52":"markdown","72226633":"markdown","13224df5":"markdown","d4acbd0e":"markdown","4e9b1742":"markdown","28e5d542":"markdown","03b9a7ec":"markdown","80f1b627":"markdown","8aced6cc":"markdown","30e17c6e":"markdown","9c2c86b7":"markdown","2ec9e684":"markdown","47b4ca04":"markdown","584424d5":"markdown","1648f288":"markdown"},"source":{"9f1f72dc":"import numpy as np\nimport pandas as pd\nfrom sklearn import model_selection, preprocessing, metrics\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\ndf_train =  pd.read_csv('..\/input\/train.csv')\n\ndf_test = pd.read_csv('..\/input\/test.csv')","2337c568":"print(\"Train : \",df_train.shape)\nprint(\"Test : \",df_test.shape)\n","7e56e818":"df_train['Id'].nunique()\n","2644c770":"\ndf_train['groupId'].nunique()\n","b174fff6":"\ndf_train['matchId'].nunique()\n","1f357e19":"df_train.head()","a36df628":"df_train[df_train['groupId']==24]","24827111":"# ---------- single distributions ---------\n\nplt.hist(df_train['winPlacePerc'])\nplt.xlabel(\"winPlacePerc\") \nplt.ylabel(\"count\") \nplt.title('Distribution of winPlacePerc')\n","7a251f26":"f, ax = plt.subplots(figsize=(8, 6))\ndf_train[df_train['matchId']==0]['groupId'].value_counts().sort_values(ascending=False).plot.bar()\nplt.show()\n\n","06d802ec":"plt.figure(figsize=[10,6])\ndf_train['assists'].value_counts().plot(kind='bar')\nplt.title(\"Distribution of assists\") \nplt.ylabel(\"count\") \nplt.show()\nprint(df_train['assists'].value_counts())","05f2bf2d":"\nf, ax = plt.subplots(figsize=(8, 6))\ndf_train['kills'].value_counts().sort_values(ascending=False).plot.bar()\nplt.show()\nprint(df_train['kills'].value_counts())","885bed9c":"f, ax = plt.subplots(figsize=(8, 6))\ndf_train['killStreaks'].value_counts().sort_values(ascending=False).plot.bar()\nprint(df_train['killStreaks'].value_counts())\nplt.show()\n","5102c015":"f, ax = plt.subplots(figsize=(8, 6))\ndf_train['roadKills'].value_counts().sort_values(ascending=False).plot.bar()\nprint(df_train['roadKills'].value_counts())\nplt.show()\n","42ce4673":"f, ax = plt.subplots(figsize=(8, 6))\ndf_train['teamKills'].value_counts().sort_values(ascending=False).plot.bar()\nprint(df_train['teamKills'].value_counts())\nplt.show()\n","568d1179":"plt.figure(figsize=[10,6])\n(df_train.loc[df_train['damageDealt']>500, 'damageDealt'].astype(float)).value_counts().plot(kind='bar')\nplt.title(\"Distribution of damageDealt\") \nplt.ylabel(\"count\") \nplt.show()\n\n","7991c788":"plt.figure(figsize=[10,6])\ndf_train['DBNOs'].value_counts().plot(kind='bar')\nplt.title(\"Distribution of DBNOs\") \nplt.ylabel(\"count\") \nplt.show()\nprint(df_train['DBNOs'].value_counts())","1c9236c9":"plt.figure(figsize=[10,6])\ndf_train['headshotKills'].value_counts().plot(kind='bar')\nplt.title(\"Distribution of headshotKills\") \nplt.ylabel(\"count\") \nplt.show()\nprint(df_train['headshotKills'].value_counts())","cdd070cc":"plt.figure(figsize=[10,6])\ndf_train['heals'].value_counts().plot(kind='bar')\nplt.title(\"Distribution of heals\") \nplt.ylabel(\"count\") \nplt.show()\nprint(df_train['heals'].value_counts())","c461e420":"plt.figure(figsize=[18,4])\ndf_train['killPlace'].value_counts().plot(kind='bar')\nplt.title(\"Distribution of killPlace\") \nplt.ylabel(\"count\") \nplt.show()\n","d7e73660":"#histogram\nf, ax = plt.subplots(figsize=(8, 6))\nsns.distplot(df_train['walkDistance'])","87aa1431":"\nf, ax = plt.subplots(figsize=(8, 6))\nsns.distplot(df_train['rideDistance'])","089c2799":"\n# ---------------- correlation --------------\n\n# variable correlation \ncorrelation = df_train.corr()\ncorrelation = correlation['winPlacePerc'].sort_values(ascending=False)\nprint(correlation.head(20))","1f7fc750":"#heatmap\nsns.heatmap(df_train.corr(),annot=True,cmap='RdYlGn',linewidths=0.2) \nfig=plt.gcf()\nfig.set_size_inches(20,16)\nplt.show()","181242a7":"train_ = df_train\n\ndef show_count_sum(df, col,n=10):\n    return df.groupby(col).agg({'winPlacePerc': ['count', 'mean']}).sort_values(('winPlacePerc', 'count'), ascending=False).head(n)\n","5525892d":"show_count_sum(train_, 'assists')\n","89b6c427":"show_count_sum(train_, 'boosts')","689c8731":"show_count_sum(train_, 'DBNOs')","6ca17e94":"show_count_sum(train_, 'headshotKills')","4e0897c4":"show_count_sum(train_, 'heals')","165747d0":"show_count_sum(train_, 'weaponsAcquired')","eec45ce7":"show_count_sum(train_, 'winPoints')","b355de8d":"show_count_sum(train_, 'revives')","e1b0285a":"#====================== Predicting ============================================\n\nY = (df_train['winPlacePerc'].astype(float)).values\n\nsum_id = df_test[\"Id\"].values\n\ndf_train = df_train.drop(['Id','groupId','matchId','winPlacePerc'], axis = 1)\n                          \ndf_test= df_test.drop(['Id','groupId','matchId'], axis = 1)\n","77f4a293":"from sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\n\nLR = LinearRegression()\n\nLR.fit(df_train, Y)\nX_train, X_val, y_train,y_val = train_test_split(df_train,Y,test_size=0.3, random_state=42) \n\nprint('Accuracy on training\uff1a\\n',LR.score(X_train, y_train)) \nprint('Accuracy on validation\uff1a\\n',LR.score(X_val, y_val))\nprint('LinearRegression Accuracy\uff1a\\n',LR.score(df_train, Y))\n\npred = LR.predict(df_test)\n  \npred = pd.DataFrame({'Id':sum_id, 'winPlacePerc':pred}) \n\npred.to_csv('pred_Linear.csv',index=None) ","86ec6144":"\n#=========================== lgb =================================== \n\nimport lightgbm as lgb\n\nmodel_lgb = lgb.LGBMRegressor(objective='regression',num_leaves=5,\n                              learning_rate=0.05, n_estimators=720,\n                              max_bin = 55, bagging_fraction = 0.8,\n                              bagging_freq = 5, feature_fraction = 0.2319,\n                              feature_fraction_seed=9, bagging_seed=9,\n                              min_data_in_leaf =6, min_sum_hessian_in_leaf = 11)\n\nmodel_lgb.fit(df_train, Y)\nlgb_pred = model_lgb.predict(df_test)\n\nlgb_pred[lgb_pred > 1] = 1\n\n# Submission\n\ntest  = pd.read_csv('..\/input\/test.csv')\ntest['winPlacePercPred'] = lgb_pred\naux = test.groupby(['matchId','groupId'])['winPlacePercPred'].agg('mean').groupby('matchId').rank(pct=True).reset_index()\naux.columns = ['matchId','groupId','winPlacePerc']\ntest = test.merge(aux, how='left', on=['matchId','groupId'])\n    \nsubm = test[['Id','winPlacePerc']]\n    \nsubm.to_csv(\"LGB.csv\", index=False)","c32b848b":"\n#=========================== xgboost ===================================\n\n#----------------- 1 ------------------ \n\nimport xgboost as xgb \n\ndtrain = xgb.DMatrix(df_train, label=Y)\ndtest = xgb.DMatrix(df_test)\n\nparams = {'max_depth':7,\n          'eta':1,\n          'silent':1,\n          'objective':'reg:linear',\n          'eval_metric':'rmse',\n          'learning_rate':0.05\n         }\nnum_rounds = 50\n\nxb = xgb.train(params, dtrain, num_rounds)\n\ny_pred_xgb = xb.predict(dtest)\n\ny_pred_xgb[y_pred_xgb > 1] = 1\n    \ntest  = pd.read_csv('..\/input\/test.csv')\ntest['winPlacePercPred'] = y_pred_xgb\naux = test.groupby(['matchId','groupId'])['winPlacePercPred'].agg('mean').groupby('matchId').rank(pct=True).reset_index()\naux.columns = ['matchId','groupId','winPlacePerc']\ntest = test.merge(aux, how='left', on=['matchId','groupId'])\n    \nsubm = test[['Id','winPlacePerc']]\n    \nsubm.to_csv(\"XGB1.csv\", index=False)","c78e49d6":"\n\n### winPlacePerc is the target we are going to predict on testing set.\n\nIts distribution on training set is not kind of a 'normal distribution' but the opposite -- values close to 0 and 1 are apparently more than the middle values.","56fadf52":"# Predicting\n##  Data Preparation","72226633":"### What is difference Id, groupId, matchId ?\nIn the data description,\n\nmatchId - Integer ID to identify match. There are no matches that are in both the training and testing set.\n\ngroupId - Integer ID to identify a group within a match. If the same group of players plays in different matches, they will have a different groupId each time.","13224df5":"# EDA part","d4acbd0e":"## See the variables' correlation with target","4e9b1742":"# LGB","28e5d542":"PS: DBNO means 'down but not out' in BUPG, it's known in experienced BUPG players that many times you may not be able to kill a encounterd enemy but only beat down them,they can still be saved by their teammates","03b9a7ec":"killStreaks : Max number of enemy players killed in a short amount of time.","80f1b627":"## Linear Regression","8aced6cc":"Here we choose those whose damageDealt is more than 500 to show. We can see above the counts of higher damageDealt smoothly decrease","30e17c6e":":heals means 'number of healing teammates'.We may naively refer that the more you heal your teammate,the more likely you are going to get a higher rank.","9c2c86b7":"## XGB","2ec9e684":"\nThere are 4357336 players participated,they comprised 1888732 groups,and played 47734 matches. \n\nThese numbers are consistent with our commensense of PUBG -- a group consists of 3 or 4 player,about 100 players can play in a single match.","47b4ca04":"* assists : The assists means that i don't kill enemy but help kill enemy. So when you look at the variable, there is also a kill. In other words, if I kill the enemy? kill +1. but if I did not kill the enemy but helped kill the enemy?assists + 1.","584424d5":"kills : Number of enemy players killed.","1648f288":"\nNote : You can see something strange in value counts. Four people are maximum team member and I do not know what it means more than four people.\n"}}