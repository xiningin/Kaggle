{"cell_type":{"5b69b5e7":"code","07fe30f9":"code","e3d6fe06":"code","79701fdc":"code","2bf358d5":"code","1f342fb3":"code","89a68c62":"code","df6ed628":"code","8f49b367":"markdown","6354240f":"markdown","dfbe5765":"markdown","06863093":"markdown","81dcf9b7":"markdown","7e877cba":"markdown"},"source":{"5b69b5e7":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt","07fe30f9":"zone,year=\"NW\",'2016'\nFilename='\/kaggle\/input\/meteonet\/'+zone+'_Ground_Stations\/'+zone+'_Ground_Stations\/'+zone+'_Ground_Stations_'+year+\".csv\"\ndf = pd.read_csv(Filename,parse_dates=[4],infer_datetime_format=True)\ndate_selection='2016-01-01T06:00:00'\ndate_sub=df[ df['date'] == date_selection ] #Sub_tableau avec la date selectionne.","e3d6fe06":"# SHOW AVAIABLE STATION\nplt.scatter(date_sub['lon'], date_sub['lat'], c=date_sub['psl'], cmap='jet')\nplt.show() # Many NAN on the pressure data\nplt.scatter(date_sub['lon'], date_sub['lat'], c=date_sub['t'], cmap='jet')\nplt.show()","79701fdc":"selec_station= 14066001\nstation_sub= df[df[\"number_sta\"]==selec_station]\nstation_sub.head()","2bf358d5":"import folium\nm=folium.Map(location=[df[\"lat\"][0],df[\"lon\"][0]],\n           tiles='Stamen Terrain',\n          zoom_start=8)\ntooltip=\"station\"\nfolium.Marker([df[\"lat\"][0], df[\"lon\"][0]],tooltip=tooltip).add_to(m)\nm","1f342fb3":"Pt_jour=240 # One acquisition every 6 minits, so 240 acquisition for one day\nStation_sub_j0=station_sub.iloc[:Pt_jour]","89a68c62":"tab_variable={\"t\":10,\"dd\":5,\"ff\":6,\"precip\":7,\"hu\":8,\"td\":9,\",psl\":11}\ntab_variable2=[11,10,6,5,8,9,7]\nnb_row=7\nNumber_val=10\ncolorscale=[[0, 'rgb(0,0,255)'], [1,'rgb(255,0,0)']]\n\nHour_loop= np.linspace(0, Number_val*10, Number_val+1 ,dtype=int)\nStation_sub_j0=Station_sub_j0.iloc[Hour_loop,:]","df6ed628":"import plotly.figure_factory as ff\nimport plotly.graph_objects as go\n\nfrom plotly.colors import n_colors\n# COLOR SELECTION FOR THE HEATMAP\ncolors_pmer=[[0, 'rgb(255, 255, 255)'],[1,'rgb(255,255,255)']]\ncolors_hu = n_colors('rgb(255, 255, 255)', 'rgb(0, 0, 255)', 5, colortype='rgb')\ncolors_t =[[0, 'rgb(255, 255, 0)'],[1, 'rgb(231,61,1)']]\ncolors_precip= n_colors('rgb(255, 255, 255)', 'rgb(0, 0, 255)', 10, colortype='rgb')\ncolor_wind=[[0, 'rgb(255, 255, 255)'],[1, 'rgb(135, 233, 144)']]\n\n# SUBPLOT ORGANISATION\nfrom plotly.subplots import make_subplots\nfig=make_subplots(rows=nb_row,cols=Number_val,vertical_spacing=0.02,\n                  specs=[[{\"colspan\":Number_val,\"type\":\"heatmap\"},None,None,None,None,None,None,None,None,None],\n                         [{\"colspan\":Number_val,\"type\":\"heatmap\"},None,None,None,None,None,None,None,None,None],\n                         [{\"colspan\":Number_val,\"type\":\"heatmap\"},None,None,None,None,None,None,None,None,None],\n                         [{\"colspan\":1,\"type\":\"polar\"},{\"colspan\":1,\"type\":\"polar\"},{\"colspan\":1,\"type\":\"polar\"},{\"colspan\":1,\"type\":\"polar\"},{\"colspan\":1,\"type\":\"polar\"},{\"colspan\":1,\"type\":\"polar\"},{\"colspan\":1,\"type\":\"polar\"},{\"colspan\":1,\"type\":\"polar\"},{\"colspan\":1,\"type\":\"polar\"},{\"colspan\":1,\"type\":\"polar\"}],\n                         [{\"colspan\":Number_val,\"type\":\"heatmap\"},None,None,None,None,None,None,None,None,None],\n                         [{\"colspan\":Number_val,\"type\":\"heatmap\"},None,None,None,None,None,None,None,None,None],\n                         [{\"colspan\":Number_val,\"type\":\"heatmap\"},None,None,None,None,None,None,None,None,None]])\n\n# HEAT MAP FOR THE 3 FIRST ROW\nfig.add_trace(go.Heatmap(y=[\"Pressure (Pa)\"],colorscale=colors_pmer,hoverongaps = False,z=[Station_sub_j0['psl'][:Number_val].values],xgap=2,colorbar={\"thickness\":10,\"len\":0.15,'y':-1,'ticktext':['coucou']}),row=1,col=1)\nfig.add_trace(go.Heatmap(y=[\"Temperature (\u00b0C)\"],colorscale=colors_t,z=[Station_sub_j0['t'][:Number_val].values],xgap=2,colorbar={\"thickness\":10,\"len\":0.15,'yanchor':'bottom','y':0.72,'ticktext':['coucou']}),row=2,col=1)\nfig.add_trace(go.Heatmap(y=[\"Wind Speed (ms-1)\"],colorscale=color_wind,z=[Station_sub_j0['ff'][:Number_val].values],xgap=2,colorbar={\"thickness\":10,\"len\":0.15,'yanchor':'bottom','y':0.58,'ticktext':['coucou']}),row=3,col=1)\n\n# POLAR BAR FOR WIND DIRECTION\nfor data in range(Number_val):\n    fig.add_trace(go.Barpolar(showlegend=False,r=[float(Station_sub_j0.iloc[data,6])],theta=[float(Station_sub_j0.iloc[data,5])],width=[40],marker=dict(color=\"black\",colorscale=color_wind,cmin=2,cmax=3)),row=4,col=data+1)\n\n# HEAT MAP FOR THE 3 LAST ROW\nfig.add_trace(go.Heatmap(y=[\"Humidity (%)\"],zmin=80,zmax=100,colorscale=colors_hu,z=[Station_sub_j0['hu'][:Number_val].values],text=[Station_sub_j0['hu'][:Number_val].values] ,hoverlabel={\"bgcolor\":\"blue\"},colorbar={\"thickness\":10,\"len\":0.15,'y':0.28,'yanchor':'bottom','ticktext':['coucou']},opacity=1,hovertext=Station_sub_j0['hu'][:5],xgap=2,ids=Station_sub_j0['hu'][:5].values),row=5,col=1)\nfig.add_trace(go.Heatmap(y=[\"Dew point (\u00b0C)\"],colorscale=colors_t,z=[Station_sub_j0['td'][:Number_val].values],xgap=2,colorbar={\"thickness\":10,\"len\":0.15,'yanchor':'bottom','y':0.13,'ticktext':['coucou']}),row=6,col=1)\nfig.add_trace(go.Heatmap(y=[\"Precipitation\"],zmin=0,zmax=100,colorscale=colors_precip,x=Station_sub_j0['date'][:Number_val].dt.time.values,z=[Station_sub_j0['precip'][:Number_val].values],xgap=2,colorbar={\"thickness\":10,\"len\":0.15,'yanchor':'bottom','y':-0.02,'ticktext':['coucou']}),row=7,col=1)\n\n#REMOVE Xaxis FOR THE 5 FIRST HEATMAP\nfig.update_layout(xaxis_visible=False)\nfig.update_layout(xaxis2_visible=False)\nfig.update_layout(xaxis3_visible=False)\nfig.update_layout(xaxis4_visible=False)\nfig.update_layout(xaxis5_visible=False,xaxis5_title= \"Horaires\")\n\n# UPDATE LAYOUT OF POLAR BAR WIND DIRECTION\nfig.update_layout(polar=dict(radialaxis=dict(range=[0, 3],type= \"linear\",showticklabels=False,ticks=''), angularaxis=dict(showticklabels=False, gridcolor = \"white\",ticks='')))\nfig.update_layout(polar2=dict(radialaxis=dict(range=[0, 3],type= \"linear\",showticklabels=False,ticks=''), angularaxis=dict(showticklabels=False, gridcolor = \"white\",ticks='')))\nfig.update_layout(polar3=dict(radialaxis=dict(range=[0, 3],type= \"linear\",showticklabels=False,ticks=''), angularaxis=dict(showticklabels=False, gridcolor = \"white\",ticks='')))\nfig.update_layout(polar4=dict(radialaxis=dict(range=[0, 3],type= \"linear\",showticklabels=False,ticks=''), angularaxis=dict(showticklabels=False, gridcolor = \"white\",ticks='')))\nfig.update_layout(polar5=dict(radialaxis=dict(range=[0, 3],type= \"linear\",showticklabels=False,ticks=''), angularaxis=dict(showticklabels=False, gridcolor = \"white\",ticks='')))\nfig.update_layout(polar6=dict(radialaxis=dict(range=[0, 3],type= \"linear\",showticklabels=False,ticks=''), angularaxis=dict(showticklabels=False, gridcolor = \"white\",ticks='')))\nfig.update_layout(polar7=dict(radialaxis=dict(range=[0, 3],type= \"linear\",showticklabels=False,ticks=''), angularaxis=dict(showticklabels=False, gridcolor = \"white\",ticks='')))\nfig.update_layout(polar8=dict(radialaxis=dict(range=[0, 3],type= \"linear\",showticklabels=False,ticks=''), angularaxis=dict(showticklabels=False, gridcolor = \"white\",ticks='')))\nfig.update_layout(polar9=dict(radialaxis=dict(range=[0, 3],type= \"linear\",showticklabels=False,ticks=''), angularaxis=dict(showticklabels=False, gridcolor = \"white\",ticks='')))\nfig.update_layout(polar10=dict(radialaxis=dict(range=[0, 3],type= \"linear\",showticklabels=False,ticks=''), angularaxis=dict(showticklabels=False, gridcolor = \"white\",ticks='')))\n\n# UPDATE ANNOTATION BECAUSE THOSE HEATMAP ARE NOT BUILT-IN ANNOTED HEATMAP\nfor row in range(nb_row-1):\n    for data in range(Number_val):\n        if row ==0:\n            fig.add_annotation(xref=\"x\",yref=\"y\",x=data,y=0,text=str(Station_sub_j0.iloc[data,tab_variable2[row]]))\n        elif row < 3:\n            fig.add_annotation(xref=\"x\"+str(row+1),yref=\"y\"+str(row+1),x=data,y=0,text=str(Station_sub_j0.iloc[data,tab_variable2[row]]))   \n        elif row >=3 :\n            fig.add_annotation(xref=\"x\"+str(row+1),yref=\"y\"+str(row+1),x=data,y=0,text=str(Station_sub_j0.iloc[data,tab_variable2[row+1]]))   \n                    \nfig.update_annotations(dict(showarrow=False,\\\n                            font_color='black',\\\n                            font_size=18,\\\n                            font_family=\"Droid Sans\"))\n\n\n# FIGURE LAYOUT\nfig.update_layout(height=600, width=1300,showlegend=False, title_text=\"Observations station \"+str(Station_sub_j0.iloc[0,0]),title_xref=\"paper\",title_font_size=30)\n\n\nfig.show()","8f49b367":"<h1> Now we will make our final vizualisation of the station data <\/h1>\nPrepare the data","6354240f":"This is many possible amelioration for this representation if you want to:\n- Put XY graph to look at the tendency\n- Select bar to select the station or the hour needed\n- Select hour step","dfbe5765":"<h1 style=\"text-align:center;\" > Hands-on data station <\/h1>\n\n<h3> Vizualisation <\/h3>\n<p> In meteorology it's important to have a quick clear view of the observation to compare it with the models! <br>\n    Thus, the aim of this notebook is to present a possible clear vizualisation of the data from a selected station in a time range <\/p>\n    \n<img src=\"https:\/\/www.station-meteo.com\/wp-content\/uploads\/national-geographic\/265-NE-capteurs.jpg \"  height=\"15\"\/>","06863093":"<p> We will use for this study the library PLOTLY and take advantages of the subplot function <\/p>","81dcf9b7":"<p> We will select a specific station for our study and let's show you where she is <\/p>","7e877cba":"<h3>First insight <\/h3>\n<strong>Show the data avaible in the dataset <\/strong>"}}