{"cell_type":{"d7e2bc5a":"code","3a429c27":"code","ea10aad0":"code","25cefc9e":"code","66b675ca":"code","634d0377":"code","c0942509":"code","d1a203b0":"code","34c212a2":"code","c0e8a29e":"code","b365f06d":"code","87c79e3f":"code","94adae00":"code","1e2ba299":"code","6f7d25b0":"code","571eb201":"code","f81aeac1":"code","cc589340":"code","6bffa210":"code","402cf6a0":"code","78ff8a76":"code","d9c152ed":"code","e745d306":"code","5485d6eb":"code","b139ec42":"code","0bdf32cc":"code","be7e22c5":"markdown","4390cf9a":"markdown","7891413a":"markdown","6a945613":"markdown","d369519c":"markdown","0e1aa0da":"markdown","2176f8a7":"markdown","dbfae8f1":"markdown","19f288bb":"markdown"},"source":{"d7e2bc5a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3a429c27":"os.chdir(\"..\/input\")\nos.listdir()","ea10aad0":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndf=pd.read_csv(\"..\/input\/ckdisease\/kidney_disease.csv\")","25cefc9e":"df.info()","66b675ca":"df.isnull().sum()","634d0377":"# '?' character remove process in the dataset\nfor i in ['rc','wc','pcv']:\n    df[i] = df[i].str.extract('(\\d+)').astype(float)","c0942509":"# Filling missing numeric data in the dataset with mean\nfor i in ['age','bp','sg','al','su','bgr','bu','sc','sod','pot','hemo','rc','wc','pcv']:\n    df[i].fillna(df[i].mean(),inplace=True)","d1a203b0":"df.info()","34c212a2":"# Removing tab spaces in the data\ndf['dm'] = df['dm'].replace(to_replace={'\\tno':'no','\\tyes':'yes',' yes':'yes'}) \ndf['cad'] = df['cad'].replace(to_replace='\\tno',value='no') \ndf['classification'] = df['classification'].replace(to_replace='ckd\\t',value='ckd')\n","c0e8a29e":"# Mapping the text to 1\/0 and cleaning the dataset \ndf[['htn','dm','cad','pe','ane']] = df[['htn','dm','cad','pe','ane']].replace(to_replace={'yes':1,'no':0})\ndf[['rbc','pc']] = df[['rbc','pc']].replace(to_replace={'abnormal':1,'normal':0})\ndf[['pcc','ba']] = df[['pcc','ba']].replace(to_replace={'present':1,'notpresent':0})\ndf[['appet']] = df[['appet']].replace(to_replace={'good':1,'poor':0})\ndf['classification'] = df['classification'].replace(to_replace={'ckd':1,'notckd':0})\ndf.rename(columns={'classification':'class'},inplace=True)","b365f06d":"df.drop('id',axis=1,inplace=True)","87c79e3f":"df.info()","94adae00":"# Filling the missing string data as the most repetitive (mod)\ndf=df.apply(lambda x:x.fillna(x.value_counts().index[0]))","1e2ba299":"df.info()","6f7d25b0":"features = [['age', 'bp','sg','al','su','bgr','bu', 'sc', 'sod','pot','hemo','pcv','wc', 'rc']]\n\n\n# Scaling of the data\nfor feature in features:\n    df[feature]=(df[feature]-np.min(df[feature]))\/(np.max(df[feature])-np.min(df[feature]))\n","571eb201":"x_data=df.drop(['class'],axis=1)\ny=df['class'].values","f81aeac1":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test=train_test_split(x_data,y,test_size=0.3,random_state=42)","cc589340":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import precision_score\nfrom sklearn.metrics import recall_score\n\nknn=KNeighborsClassifier(n_neighbors=6) \nknn.fit(x_train,y_train)\n","6bffa210":"knn_pred=knn.predict(x_test)\n\nf1_knn=f1_score(y_test,knn_pred)\n\n\nprecision_knn = precision_score(y_test, knn_pred)\n\n\nrecall_knn = recall_score(y_test, knn_pred)\n\n\n\n\nprint(\"KNN f1 score: \",f1_knn)\nprint(\"KNN Precision: \",precision_knn)\nprint(\"KNN Recall: \", recall_knn)\nprint(\"KNN accuracy score: \",knn.score(x_test,y_test))","402cf6a0":"# find best k value\nimport matplotlib.pyplot as plt\nscore_list=[]\n\nfor each in range(1,40):\n    knn2=KNeighborsClassifier(n_neighbors=each)\n    knn2.fit(x_train,y_train)\n    score_list.append(knn2.score(x_test,y_test))\nplt.plot(range(1,40),score_list)\nplt.xlabel(\"k\")\nplt.ylabel(\"accuracy\")\nplt.show()","78ff8a76":"from sklearn.svm import SVC\nsvm=SVC(random_state=1,gamma=\"auto\")\nsvm.fit(x_train,y_train)\n","d9c152ed":"svm_pred=svm.predict(x_test)\n\n\nf1_svm=f1_score(y_test,svm_pred)\n\n\n\n\nprecision_svm = precision_score(y_test, svm_pred)\n\n\nrecall_svm = recall_score(y_test, svm_pred)\n\n\n\nprint(\"SVM f1 score: \",f1_svm)\nprint(\"SVM Precision: \",precision_svm)\nprint(\"SVM Recall: \", recall_svm)\nprint(\"SVM accuracy score: \",svm.score(x_test,y_test))","e745d306":"from sklearn.tree import DecisionTreeClassifier\ndt=DecisionTreeClassifier()\ndt.fit(x_train,y_train)\n","5485d6eb":"dt_pred=dt.predict(x_test)\n\n\nf1_dt=f1_score(y_test,dt_pred)\n\n\n\nprecision_dt = precision_score(y_test, dt_pred)\n\n\nrecall_dt = recall_score(y_test, dt_pred)\n\n\nprint(\"DT f1 score: \",f1_dt)\nprint(\"DT Precision: \",precision_dt)\nprint(\"DT Recall: \",recall_dt)\nprint(\"DT accuracy score: \",dt.score(x_test,y_test))","b139ec42":"from sklearn.ensemble import RandomForestClassifier\nrf=RandomForestClassifier(n_estimators=100,random_state=1)\nrf.fit(x_train,y_train)\n","0bdf32cc":"rf_pred=rf.predict(x_test)\n\n\n\nf1_rf=f1_score(y_test,rf_pred)\n\n\nprecision_rf = precision_score(y_test, rf_pred)\n\n\nrecall_rf = recall_score(y_test, rf_pred)\n\n\n\nprint(\"RF f1 score: \",f1_rf)\nprint(\"RF Precision: \",precision_rf)\nprint(\"RF Recall:\",recall_rf)\nprint(\"RF accuracy score: \",rf.score(x_test,y_test))\n","be7e22c5":"## Data Pre-Processing","4390cf9a":"## Support Vector Machine","7891413a":"## Preparation of Model Data and Scaling of Data","6a945613":"## Decision Tree Classification","d369519c":"## Random Forest Classification","0e1aa0da":"## hyper parameter","2176f8a7":"## Modelling","dbfae8f1":"## KNN","19f288bb":"# Data Read"}}