{"cell_type":{"8aeed9c0":"code","1af8a517":"code","aab3e82c":"code","56b0efb0":"code","9303353c":"code","a6c7b485":"code","eaf1d8ca":"code","43a0a02c":"code","e0bc6fba":"code","4f10d125":"code","3288be73":"code","15f605b6":"code","81018f8c":"code","892afaa7":"code","f1f99367":"code","9321ac22":"code","afb71584":"code","fa996338":"code","5e7dc264":"code","de9495bb":"code","272982ed":"code","afa14ec1":"markdown","cd6e42ae":"markdown","2d5c903e":"markdown","c36984cb":"markdown","5b2d3657":"markdown","fd183371":"markdown","42d84cb9":"markdown","8ec2526d":"markdown","04131220":"markdown","0fb01114":"markdown","3b5a8aa5":"markdown","e452990a":"markdown","a13cfd4b":"markdown","ebb37a40":"markdown","c1e40d43":"markdown","5a7e9a6f":"markdown","3b8cc79d":"markdown","ecbb9d6c":"markdown","9f5efee6":"markdown","3425f4d1":"markdown","93e47056":"markdown"},"source":{"8aeed9c0":"import json\nimport math\nimport os\n\nimport cv2\nfrom PIL import Image\nimport numpy as np\nfrom keras import layers\nfrom keras.applications import DenseNet121\nfrom keras.callbacks import Callback, ModelCheckpoint\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.models import Sequential\nfrom keras.optimizers import Adam\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import cohen_kappa_score, accuracy_score\nimport scipy\nfrom tqdm import tqdm\n\n%matplotlib inline","1af8a517":"train_df = pd.read_csv('..\/input\/aptos2019-blindness-detection\/train.csv')\ntest_df = pd.read_csv('..\/input\/aptos2019-blindness-detection\/test.csv')\nprint(train_df.shape)\nprint(test_df.shape)\ntest_df.head()","aab3e82c":"def get_pad_width(im, new_shape, is_rgb=True):\n    pad_diff = new_shape - im.shape[0], new_shape - im.shape[1]\n    t, b = math.floor(pad_diff[0]\/2), math.ceil(pad_diff[0]\/2)\n    l, r = math.floor(pad_diff[1]\/2), math.ceil(pad_diff[1]\/2)\n    if is_rgb:\n        pad_width = ((t,b), (l,r), (0, 0))\n    else:\n        pad_width = ((t,b), (l,r))\n    return pad_width\n\ndef preprocess_image(image_path, desired_size=224):\n    im = Image.open(image_path)\n    im = im.resize((desired_size, )*2, resample=Image.LANCZOS)\n#     im = im.resize((desired_size, )*2)\n    \n    return im","56b0efb0":"N = test_df.shape[0]\nx_test = np.empty((N, 224, 224, 3), dtype=np.uint8)\n\nfor i, image_id in enumerate(tqdm(test_df['id_code'])):\n    x_test[i, :, :, :] = preprocess_image(\n        f'..\/input\/aptos2019-blindness-detection\/test_images\/{image_id}.png'\n    )","9303353c":"# model.summary()\ndef load_image_ben_orig(path,resize=True,crop=False,norm255=True,keras=False):\n    image = cv2.imread(path)\n    \n#     if crop:\n#         image = crop_image(image)\n    \n    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n        \n#     if resize:\n#         image = cv2.resize(image,(SIZE,SIZE))\n        \n    image=cv2.addWeighted( image,4, cv2.GaussianBlur( image , (0,0) ,  10) ,-4 ,128)\n#     image=cv2.addWeighted( image,4, cv2.medianBlur( image , 10) ,-4 ,128)\n    \n    # NOTE plt.imshow can accept both int (0-255) or float (0-1), but deep net requires (0-1)\n    if norm255:\n        return image\/255\n    elif keras:\n        #see https:\/\/github.com\/keras-team\/keras-applications\/blob\/master\/keras_applications\/imagenet_utils.py for mode\n        #see https:\/\/github.com\/keras-team\/keras-applications\/blob\/master\/keras_applications\/xception.py for inception,xception mode\n        #the use of tf based preprocessing (- and \/ by 127 respectively) will results in [-1,1] so it will not visualize correctly (directly)\n        image = np.expand_dims(image, axis=0)\n        return preprocess_input(image)[0]\n    else:\n        return image.astype(np.int16)\n    \n    return image\n\ndef transform_image_ben(img,resize=True,crop=False,norm255=True,keras=False):  \n    image=cv2.addWeighted( img,4, cv2.GaussianBlur( img , (0,0) ,  10) ,-4 ,128)\n    \n    # NOTE plt.imshow can accept both int (0-255) or float (0-1), but deep net requires (0-1)\n    if norm255:\n        return image\/255\n    elif keras:\n        image = np.expand_dims(image, axis=0)\n        return preprocess_input(image)[0]\n    else:\n        return image.astype(np.int16)\n    \n    return image","a6c7b485":"def display_samples(df, columns=5, rows=2, Ben=True):\n    fig=plt.figure(figsize=(5*columns, 4*rows))\n\n    for i in range(columns*rows):\n        image_path = df.loc[i,'id_code']\n#         image_id = df.loc[i,'diagnosis']\n        path = f'..\/input\/aptos2019-blindness-detection\/test_images\/{image_path}.png'\n        if Ben:\n            img = load_image_ben_orig(path)\n        else:\n            img = cv2.imread(path)\n            img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n        \n        fig.add_subplot(rows, columns, i+1)\n#         plt.title(image_id)\n        plt.imshow(img)\n    \n    plt.tight_layout()\n\ndisplay_samples(test_df, Ben=False)\ndisplay_samples(test_df, Ben=True)","eaf1d8ca":"from keras import layers\nfrom keras.models import Model\nimport keras.backend as K","43a0a02c":"K.clear_session()\ndensenet = DenseNet121(\n    weights=None,\n    include_top=False,\n    input_shape=(None,None,3)\n)","e0bc6fba":"GAP_layer = layers.GlobalAveragePooling2D()\ndrop_layer = layers.Dropout(0.5)\ndense_layer = layers.Dense(5, activation='sigmoid', name='final_output')","4f10d125":"def build_model_sequential():\n    model = Sequential()\n    model.add(densenet)\n    model.add(GAP_layer)\n    model.add(drop_layer)\n    model.add(dense_layer)\n    return model","3288be73":"modelA = build_model_sequential()\nmodelA.load_weights('..\/input\/aptos-data\/dense_xhlulu_731.h5')\n\nmodelA.summary()","15f605b6":"def build_model_functional():\n    base_model = densenet\n    \n    x = GAP_layer(base_model.layers[-1].output)\n    x = drop_layer(x)\n    final_output = dense_layer(x)\n    model = Model(base_model.layers[0].input, final_output)\n    \n    return model","81018f8c":"model = build_model_functional() # with pretrained weights, and layers we want\nmodel.summary()","892afaa7":"# y_test = model.predict(x_test) > 0.5\n# y_test = y_test.astype(int).sum(axis=1) - 1\n\n# test_df['diagnosis'] = y_test\n# test_df.to_csv('submission.csv',index=False)\n# y_test.shape, x_test.shape","f1f99367":"# import seaborn as sns\n# import cv2\n\n# SIZE=224\n# def create_pred_hist(pred_level_y,title='NoTitle'):\n#     results = pd.DataFrame({'diagnosis':pred_level_y})\n\n#     f, ax = plt.subplots(figsize=(7, 4))\n#     ax = sns.countplot(x=\"diagnosis\", data=results, palette=\"GnBu_d\")\n#     sns.despine()\n#     plt.title(title)\n#     plt.show()","9321ac22":"# create_pred_hist(y_test,title='predicted level distribution in test set')","afb71584":"def gen_heatmap_img(img, model0, layer_name='last_conv_layer',viz_img=None,orig_img=None):\n    preds_raw = model0.predict(img[np.newaxis])\n    preds = preds_raw > 0.5 # use the same threshold as @xhlulu original kernel\n    class_idx = (preds.astype(int).sum(axis=1) - 1)[0]\n#     print(class_idx, class_idx.shape)\n    class_output_tensor = model0.output[:, class_idx]\n    \n    viz_layer = model0.get_layer(layer_name)\n    grads = K.gradients(\n                        class_output_tensor ,\n                        viz_layer.output\n                        )[0] # gradients of viz_layer wrt output_tensor of predicted class\n    \n    pooled_grads=K.mean(grads,axis=(0,1,2))\n    iterate=K.function([model0.input],[pooled_grads, viz_layer.output[0]])\n    \n    pooled_grad_value, viz_layer_out_value = iterate([img[np.newaxis]])\n    \n    for i in range(pooled_grad_value.shape[0]):\n        viz_layer_out_value[:,:,i] *= pooled_grad_value[i]\n    \n    heatmap = np.mean(viz_layer_out_value, axis=-1)\n    heatmap = np.maximum(heatmap,0)\n    heatmap \/= np.max(heatmap)\n\n    viz_img=cv2.resize(viz_img,(img.shape[1],img.shape[0]))\n    heatmap=cv2.resize(heatmap,(viz_img.shape[1],viz_img.shape[0]))\n    \n    heatmap_color = cv2.applyColorMap(np.uint8(heatmap*255), cv2.COLORMAP_SPRING)\/255\n    heated_img = heatmap_color*0.5 + viz_img*0.5\n    \n    print('raw output from model : ')\n    print_pred(preds_raw)\n    \n    if orig_img is None:\n        show_Nimages([img,viz_img,heatmap_color,heated_img])\n    else:\n        show_Nimages([orig_img,img,viz_img,heatmap_color,heated_img])\n    \n    plt.show()\n    return heated_img","fa996338":"def show_image(image,figsize=None,title=None):\n    \n    if figsize is not None:\n        fig = plt.figure(figsize=figsize)\n#     else: # crash!!\n#         fig = plt.figure()\n        \n    if image.ndim == 2:\n        plt.imshow(image,cmap='gray')\n    else:\n        plt.imshow(image)\n        \n    if title is not None:\n        plt.title(title)\n\ndef show_Nimages(imgs,scale=1):\n\n    N=len(imgs)\n    fig = plt.figure(figsize=(25\/scale, 16\/scale))\n    for i, img in enumerate(imgs):\n        ax = fig.add_subplot(1, N, i + 1, xticks=[], yticks=[])\n        show_image(img)\n        \ndef print_pred(array_of_classes):\n    xx = array_of_classes\n    s1,s2 = xx.shape\n    for i in range(s1):\n        for j in range(s2):\n            print('%.3f ' % xx[i,j],end='')\n        print('')","5e7dc264":"NUM_SAMP=10\nSEED=77\nlayer_name = 'relu' #'conv5_block16_concat'\nfor i, (idx, row) in enumerate(test_df[:NUM_SAMP].iterrows()):\n    path=f\"..\/input\/aptos2019-blindness-detection\/test_images\/{row['id_code']}.png\"\n    ben_img = load_image_ben_orig(path)\n    input_img = np.empty((1,224, 224, 3), dtype=np.uint8)\n    input_img[0,:,:,:] = preprocess_image(path)\n        \n    print('test pic no.%d' % (i+1))\n    _ = gen_heatmap_img(input_img[0],\n                        model, layer_name=layer_name,viz_img=ben_img)","de9495bb":"from albumentations import *\nimport time\n\nIMG_SIZE = (224,224)\n\n'''Use case from https:\/\/www.kaggle.com\/alexanderliao\/image-augmentation-demo-with-albumentation\/'''\ndef albaugment(aug0, img):\n    return aug0(image=img)['image']\nidx=8\nimage1=x_test[idx]\n\n'''1. Rotate or Flip'''\naug1 = OneOf([\n    Rotate(p=0.99, limit=160, border_mode=0,value=0), # value=black\n    Flip(p=0.5)\n    ],p=1)\n\n'''2. Adjust Brightness or Contrast'''\naug2 = RandomBrightnessContrast(brightness_limit=0.45, contrast_limit=0.45,p=1)\nh_min=np.round(IMG_SIZE[1]*0.72).astype(int)\nh_max= np.round(IMG_SIZE[1]*0.9).astype(int)\nprint(h_min,h_max)\n\n'''3. Random Crop and then Resize'''\n#w2h_ratio = aspect ratio of cropping\naug3 = RandomSizedCrop((h_min, h_max),IMG_SIZE[1],IMG_SIZE[0], w2h_ratio=IMG_SIZE[0]\/IMG_SIZE[1],p=1)\n\n'''4. CutOut Augmentation'''\nmax_hole_size = int(IMG_SIZE[1]\/10)\naug4 = Cutout(p=1,max_h_size=max_hole_size,max_w_size=max_hole_size,num_holes=8 )#default num_holes=8\n\n'''5. SunFlare Augmentation'''\naug5 = RandomSunFlare(src_radius=max_hole_size,\n                      num_flare_circles_lower=10,\n                      num_flare_circles_upper=20,\n                      p=1)#default flare_roi=(0,0,1,0.5),\n\n'''6. Ultimate Augmentation -- combine everything'''\nfinal_aug = Compose([\n    aug1,aug2,aug3,aug4,aug5\n],p=1)\n\n\nimg1 = albaugment(aug1,image1)\nimg2 = albaugment(aug1,image1)\nprint('Rotate or Flip')\nshow_Nimages([image1,img1,img2],scale=2)\n# time.sleep(1)\n\nimg1 = albaugment(aug2,image1)\nimg2 = albaugment(aug2,image1)\nimg3 = albaugment(aug2,image1)\nprint('Brightness or Contrast')\nshow_Nimages([img3,img1,img2],scale=2)\n# time.sleep(1)\n\nimg1 = albaugment(aug3,image1)\nimg2 = albaugment(aug3,image1)\nimg3 = albaugment(aug3,image1)\nprint('Rotate and Resize')\nshow_Nimages([img3,img1,img2],scale=2)\nprint(img1.shape,img2.shape)\n# time.sleep(1)\n\nimg1 = albaugment(aug4,image1)\nimg2 = albaugment(aug4,image1)\nimg3 = albaugment(aug4,image1)\nprint('CutOut')\nshow_Nimages([img3,img1,img2],scale=2)\n# time.sleep(1)\n\nimg1 = albaugment(aug5,image1)\nimg2 = albaugment(aug5,image1)\nimg3 = albaugment(aug5,image1)\nprint('Sun Flare')\nshow_Nimages([img3,img1,img2],scale=2)\n# time.sleep(1)\n\nimg1 = albaugment(final_aug,image1)\nimg2 = albaugment(final_aug,image1)\nimg3 = albaugment(final_aug,image1)\nprint('All above combined')\nshow_Nimages([img3,img1,img2],scale=2)\nprint(img1.shape,img2.shape)\n","272982ed":"aug_list = [aug5, aug2, aug3, aug4, aug1, final_aug]\naug_name = ['SunFlare', 'brightness or contrast', 'crop and resized', 'CutOut', 'rotate or flip', 'Everything Combined']\n\nidx=8\nlayer_name = 'relu' #'conv5_block16_concat'\nfor i in range(len(aug_list)):\n    path=f\"..\/input\/aptos2019-blindness-detection\/test_images\/{test_df.iloc[idx]['id_code']}.png\"\n    input_img = np.empty((1,224, 224, 3), dtype=np.uint8)\n    input_img[0,:,:,:] = preprocess_image(path)\n    aug_img = albaugment(aug_list[i],input_img[0,:,:,:])\n    ben_img = transform_image_ben(aug_img)\n    \n    print('test pic no.%d -- augmentation: %s' % (i+1, aug_name[i]))\n    _ = gen_heatmap_img(aug_img,\n                        model, layer_name=layer_name,viz_img=ben_img,orig_img=input_img[0])","afa14ec1":"\u73b0\u5728\u8ba9\u6211\u4eec\u4e00\u8d77\u770b\u6211\u4eec\u7684\u6a21\u578b\u662f\u600e\u6837\u8bc6\u522b\u4e0d\u540c\u7684\u56fe\u7247\u589e\u5f3a\u7684\u3002\u6ce8\u610f\u4e86\uff0c\u8fd9\u4e2a\u6d4b\u8bd5\u56fe\u7247\u6a21\u578b\u9884\u6d4b\u4e86\u6ca1\u6709\u56fe\u7247\u589e\u5f3a\uff0c\u5e76\u9884\u6d4b\u4e3a\u4e25\u91cd\u7a0b\u5ea6\u4e3a3 (score `[0.998 1.000 0.999 0.953 0.068]`)\n\n\u56e0\u4e3a\u8fd9\u4e2a\u589e\u5f3a\u662f\u968f\u673a\u7684\uff0c\u4f60\u53ef\u4ee5\u770b\u5230\u4e0d\u540c\u7684\u7ed3\u679c\u3002\u5728\u6211\u7684\u5b9e\u9a8c\u4e2d\uff0c\u8fd9\u4e2a\u6a21\u578b\u662f\u76f8\u5f53\u9c81\u68d2\u7684\uff0c\u56e0\u4e3a\u5b83\u57fa\u672c\u4e0a\u9884\u6d4b\u51fa\u4e00\u6837\u7684\u4e25\u91cd\u7a0b\u5ea6\uff0c\u9664\u4e86\u5c06\u6240\u6709\u589e\u5f3a\u7ed3\u5408\u8d77\u6765\u7684\u90a3\u4e2a\u6709\u65f6\u5019\u4f1a\u9884\u6d4b\u4e3a\u7b49\u7ea74\uff0c\u68c0\u6d4b\u5230\u7684\u7279\u5f81\u4e5f\u90fd\u662f\u6bd4\u8f83\u6b63\u786e\u7684\u3002\n\n\u4e3b\u8981\u662f\u4f60\u53ef\u4ee5\u4f7f\u7528\u6240\u6709\u7684\u76f4\u89c9\u6765\u8c03\u6574\u4f60\u7684\u56fe\u7247\u589e\u5f3a\u7684\u67b6\u6784\uff0c\u4f7f\u5f97\u6a21\u578b\u66f4\u52a0\u9c81\u68d2\u3002\n\n\u6211\u4eec\u672c\u6765\u53ef\u4ee5\u6d4b\u8bd5\u66f4\u591a\u7684\u56fe\u7247\uff0c\u4f46\u662f\u6211\u4f1a\u5c06\u5269\u4e0b\u7684\u90fd\u7559\u7ed9\u4f60\u53bb\u505a\u3002","cd6e42ae":"\u901a\u8fc7\u4f7f\u7528functional\u6a21\u578b\uff0c\u8fd0\u884cmodel.summary()\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u83b7\u53d6\u6a21\u578b\u7684\u7f51\u7edc\u7ed3\u6784\u91cc\u7684\u6240\u6709\u7684\u5c42\u3002\u56e0\u4e3a\u8f93\u51fa\u7684\u5185\u5bb9\u592a\u957f\u4e86\uff0c\u5982\u679c\u8fd9\u4e9b\u5185\u5bb9\u88ab\u9690\u85cf\u4e86\uff0c\u4f60\u53ef\u4ee5\u70b9\u51fb\u6309\u94ae\u5c55\u5f00\u67e5\u770b\u66f4\u591a\u5c42\u3002","2d5c903e":"\u5176\u6b21\uff0c\u6211\u4eec\u5b9a\u4e49\u548c\u6700\u521d\u7684kernel\u4e00\u6837\u76843\u4e2a\u5171\u4eab\u7684\u5934\u90e8\u5c42\u3002\u4f7f\u7528`Sequential()`\u6a21\u578b\u6784\u9020\uff08\u548c\u539f\u59cb\u6a21\u578b\u4e5f\u662f\u4e00\u6837\u7684\uff09\u3002\u4ece`model.summary()`\u7684\u8fd0\u884c\u7ed3\u679c\u4f60\u53ef\u4ee5\u770b\u5230\u6a21\u578b\u7684\u7ec6\u8282\u4f60\u662f\u770b\u4e0d\u5230\u7684\uff0c\u6211\u4eec\u4e0d\u80fd\u76f4\u63a5\u83b7\u53d6\u5377\u79ef\u5c42\u7684\u6700\u540e\u4e00\u5c42\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u4e0d\u80fd\u4ece\u8fd9\u91cc\u83b7\u53d6\u68af\u5ea6\u3002","c36984cb":"\u6211\u4eec\u5f97\u5230\u4e86\u5f88\u591a\u6709\u8da3\u7684\u89c1\u89e3\u3002\n\n* \u7b2c1\u30014\u30015\u30016\u9884\u6d4b\u7ed3\u679c\u770b\u8d77\u6765\u4e0d\u9519\n* \u7b2c2\u4e2a\u9884\u6d4b\u6ca1\u6709\u6307\u51fa\u4e2d\u95f4\u5927\u5927\u7684\u6591\u70b9\n* \u7b2c3\u548c\u7b2c7\u9884\u6d4b\u7ed3\u679c\u540c\u6837\u9519\u8fc7\u4e86\u91cd\u8981\u7684\u6591\u70b9\n* \u7b2c9\u5f20\u56fe\u7247\uff0c\u5230\u5904\u90fd\u662f\u8840\u6591\u70b9\uff0c\u6a21\u578b\u53ea\u6307\u51fa4\u5904\uff0c\u5e76\u6ca1\u6709\u6307\u51fa\u5168\u90e8\u7684\u6591\u70b9\n* \u7b2c8\u300110\u56fe\u7247\u770b\u8d77\u6765\u6bd4\u8f83\u6b63\u5e38\uff0c\u4f46\u662f\u6a21\u578b\u4f3c\u4e4e\u83b7\u53d6\u4e86\u4f2a\u7279\u5f81\uff0c\u5c06\u5176\u5b9a\u4e49\u4e3a\u4e25\u91cd\u7a0b\u5ea6\u4e3a1\u3002\n","5b2d3657":"# 4. \u771f\u7684\u8fd8\u662f\u5047\u7684\u7279\u5f81\n\n\u73b0\u5728\u6211\u4eec\u5f00\u59cb\u6700\u4e3b\u8981\u7684\u6a21\u5757\u3002\u6211\u4eec\u6765\u8c03\u67e5\u4e00\u4e0b\u6a21\u578b\u7684\u6027\u80fd\u3002\u9996\u5148\uff0c\u8ba9\u6211\u4eec\u901a\u8fc7calculation\u51fd\u6570\u5b9a\u4e49\u4e00\u4e2a\u70ed\u529b\u56fe\u3002\u5c31\u597d\u50cf\u4ecb\u7ecd\u4e2d\u8bf4\u5f97\uff0c\u4ee3\u7801\u5f15\u7528\u4e86[\u8fd9\u7bc7\u6587\u7ae0]\n(http:\/\/www.hackevolve.com\/where-cnn-is-looking-grad-cam\/),\u8fd9\u7bc7\u6587\u7ae0\u5f15\u7528\u4e86 F.Chollet \u7684\u4e66.\n\n\u8fd9\u4e2a\u51fd\u6570\u63a5\u6536\u4e864\u4e2a\u53c2\u6570\u4f5c\u4e3a\u8f93\u5165\uff1a\n(1) \u5f85\u53ef\u89c6\u5316\u7684\u56fe\u7247\uff0c\u8bb0\u5f97\u8981\u653e\u5165\u9884\u5904\u7406\u8fc7\u7684\u7248\u672c\u3002 (2) \u6a21\u578b (3) \u6700\u540e\u4e00\u5c42\u5377\u79ef\u5c42 (4) \u4e00\u4e2a\u7528\u4e8e\u7ed3\u5408\u70ed\u529b\u56fe\u6765\u5c55\u793a\u7684\u8f85\u52a9\u56fe\u7247; \u6211\u4f7f\u7528\u4e86Ben\u7684\u9884\u5904\u7406\u65b9\u5f0f\u5904\u7406\u8fc7\u7684\u56fe\u7247\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u5904\u7406\u65b9\u5f0f\u6d88\u9664\u4e86\u5149\u7167\u6761\u4ef6\u7684\u5f71\u54cd\u3002 \u6240\u4ee5\u7279\u522b\u9002\u5408\u6700\u7ec8\u5c55\u793a\u3002","fd183371":"# 3. \u5b9a\u4e49\u6a21\u578b\u3002\u83b7\u53d6\u68af\u5ea6\u7684\u4e00\u4e9b\u6280\u5de7\u3002\n\n\u6982\u5ff5\u4e0a\uff0c\u6211\u4eec\u53ef\u4ee5\u53ea\u662f\u52a0\u8f7d\u9884\u8bad\u7ec3\u6a21\u578b\uff0c\u8ba1\u7b97\u68af\u5ea6\uff0c\u7ed9\u51fa\u70ed\u529b\u56fe\u5c31\u53ef\u4ee5\u4e86\uff01\u4f46\u662f\uff0c\u539f\u59cb\u6a21\u578b\u4f7f\u7528\u4e86\u201cSequential method\u201d\u6765\u6784\u9020\u4e00\u4e2a\u5fae\u8c03\u7684DenseNet\u6a21\u578b\uff0c\u800c\u4e0d\u662f\u201cFunctional method\u201d\u3002\u4e0d\u5e78\u7684\u662f\uff0cSequential method \u6211\u4eec\u4e0d\u80fd\u76f4\u63a5\u83b7\u53d6\u6700\u540e\u4e00\u5c42\u5377\u79ef\u5c42\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u4e0d\u80fd\u8ba1\u7b97\u6fc0\u6d3b\u548c\u68af\u5ea6\u503c\u3002\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u6280\u5de7\u3002\n\n\u8fd9\u4e2a\u6280\u5de7\u4f7f\u7528\u4e86`Sequential method`\uff0c\u4f7f\u7528\u5171\u4eab\u5c42\u6765\u6784\u9020\u4e00\u4e2a\u6a21\u578b\uff0c\u7136\u540e\u5e94\u7528\u9884\u8bad\u7ec3\u53c2\u6570\u3002\u7136\u540e\uff0c\u6211\u7528`Functional method`\u548c\u540c\u6837\u7684\u5c42\u6784\u9020\u4e86\u53e6\u4e00\u4e2a\u5171\u4eab\u6240\u6709\u5c42\u7684\u6a21\u578b\u3002\u56e0\u4e3a\u6240\u6709\u5c42\u90fd\u662f\u5171\u4eab\u7684\uff0c\u8fd9\u4e24\u4e2a\u6a21\u578b\u5176\u5b9e\u90fd\u662f\u4e00\u6837\u7684\uff0c\u6709\u4e00\u6837\u7684\u53c2\u6570\u3002\n","42d84cb9":"### \u663e\u793a\u4e00\u4e9b\u6d4b\u8bd5\u56fe\u7247\n\n\u6211\u4eec\u6765\u53ef\u89c6\u5316\u6d4b\u8bd5\u96c6\u4e2d\u7684\u524d10\u5f20\u773c\u7403\u56fe\u7247\u3002\u5feb\u901f\u67e5\u770b\u540e\u53d1\u73b0\uff0c\u53ea\u67092\/10\u5f20\u773c\u7403\u770b\u8d77\u6765\u6b63\u5e38\u3002\u4e0b\u9762\u6211\u4eec\u5e94\u8be5\u5b9a\u4e49Ben\u7684\u9884\u5904\u7406\u51fd\u6570\u3002\u8fd9\u4e2a\u9884\u5904\u7406\u51fd\u6570\u4f1a\u8ba9\u6211\u4eec\u66f4\u65b9\u4fbf\u5730\u770b\u5230\u4e0d\u6b63\u5e38\u7684\u773c\u7403\u6591\u70b9\uff0c\u5728\u5f85\u4f1a\u513f\u6211\u4eec\u4f7f\u7528\u70ed\u529b\u56fe\u7ed3\u5408\u773c\u7403\u56fe\u7247\u6765\u663e\u793a\u7684\u65f6\u5019\u4e5f\u4f1a\u66f4\u6e05\u6670\u3002\n\n\u5173\u4e8eBen\u7684\u9884\u5904\u7406\u51fd\u6570\uff1a\n\u6307\u7684\u662f2015\u5e74APTOS\u4e5f\u4e3e\u529e\u8fc7\u8fd9\u6837\u7684\u6bd4\u8d5b\uff0c\u6709\u4f4d\u5927\u725bBen\uff0c\u4f7f\u7528\u4e86\u8fd9\u6837\u7684\u9884\u5904\u7406\u65b9\u5f0f\uff1a\nimage=cv2.addWeighted( image,4, cv2.GaussianBlur( image , (0,0) ,  10) ,-4 ,128)\n\u52a0\u4e86\u9ad8\u65af\u6a21\u7cca\uff0c\u4f7f\u5f97\u56fe\u7247\u51cf\u5c11\u4e86\u5149\u7167\u7684\u5f71\u54cd\u3002\u4f46\u662f\u57282019\u5e74\u4eca\u5e74\u7684\u6bd4\u8d5b\u4e2d\uff0c\u5f88\u591a\u4eba\u52a0\u4e86\u8fd9\u6837\u7684\u5904\u7406\u540e\uff0c\u7ed3\u679c\u53d8\u5dee\u3002\u53ef\u80fd\u662f2015\u5e74\u7684\u773c\u7403\u56fe\u7247\u548c\u4eca\u5e74\u7684\u6709\u6240\u5dee\u5f02\u3002\u4f46\u662f\u8fd9\u79cd\u65b9\u5f0f\u5728kernel\u4e2d\u5f88\u706b\u54e6~","8ec2526d":"Grad-CAM\u53ef\u89c6\u5316\u53ef\u4ee5\u88ab\u76f4\u89c2\u5730\u3001\u975e\u6b63\u5f0f\u5316\u5730\u89e3\u91ca\u4e3a\uff1a\n**\u76ee\u6807**\u7740\u91cd\u5f3a\u8c03\u6a21\u578b\u505a\u51b3\u7b56\u7684\u50cf\u7d20\u533a\u57df\uff08\u7a7a\u95f4\u4fe1\u606f\uff09\uff0c\u4f7f\u7528\u70ed\u529b\u56fe\u6765\u53ef\u89c6\u5316\u8fd9\u4e9b\u533a\u57df\uff0c\u5982\u4e0a\u56fe\u6240\u793a\u3002\n**\u7b80\u5355\u63cf\u8ff0**\n* \u6211\u4eec\u76f8\u4fe1\u6700\u91cd\u8981\u7684\u7a7a\u95f4\u4fe1\u606f\u6765\u81ea\u4e8e\u6700\u540e\u4e00\u5c42\u5377\u79ef\u5c42\uff08\u5728\u5168\u5c40\u6c60\u5316\u5c42\u524d\u4e00\u5c42\uff09\uff0c\u4e5f\u5c31\u662f\u79bb\u5168\u8fde\u63a5\u5c42\u6700\u8fd1\u7684\u5e26\u6709\u7a7a\u95f4\u4fe1\u606f\u7684\u5c42\u3002\n* \u5bf9\u4e8e\u8be5\u5c42\u7684\u6bcf\u4e00\u901a\u9053\uff0c\u90a3\u4e9b\u6fc0\u6d3b\u7684\u56fe\u7247\u533a\u57df\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u5e0c\u671b\u8be5\u5c42\u6bcf\u4e2a\u901a\u9053\u53ef\u4ee5\u6293\u53d6\u4e0d\u540c\u7c7b\u522b\u7684\u7279\u5f81\u3002\u6bd4\u5982\uff0c\u901a\u90530\u4ee3\u8868\u4e86class 0\u7684\u6fc0\u6d3b\u533a\u57df\uff0c\u901a\u90531\u4ee3\u8868\u4e86class 1 \u7684\u6fc0\u6d3b\u533a\u57df\u3002\u591a\u5206\u7c7b\u95ee\u9898\u8fd8\u6709\u591a\u4e2a\u901a\u9053\u3002\n* \u6211\u4eec\u901a\u8fc7\u8ba1\u7b97\u7ed3\u679c\u548c\u8be5\u5c42\u7279\u5f81\u7684\u68af\u5ea6\u6765\u5f3a\u8c03\u56fe\u7247\u4e2d\u7684\u91cd\u8981\u4fe1\u606f\u3002\n* \u56e0\u6b64\uff0c\u6211\u4eec\u901a\u8fc7\u5c06\u8ba1\u7b97\u51fa\u6765\u7684\u68af\u5ea6\u548c\u8be5\u5c42\u7684tensor\u76f8\u4e58\u6765\u83b7\u53d6\u70ed\u529b\u56fe\u3002\n* \u6700\u540e\u6211\u4eec\u5c06\u70ed\u529b\u56fe\u7684\u901a\u9053\u53d6\u5e73\u5747\uff0c\u901a\u8fc7relu\u79fb\u9664\u8d1f\u503c\u6765\u83b7\u53d6\u6700\u7ec8\u70ed\u529b\u56fe\u3002\n\u66f4\u591a\u4fe1\u606f\u53ef\u4ee5\u9605\u8bfb\u4f5c\u8005\u7684paper\u3002\n","04131220":"# 5. \u4f7f\u7528Albumentation\u8fdb\u884c\u9c81\u68d2\u6027\u6d4b\u8bd5\n\n\u5728\u8fd9\u4e2a\u6a21\u5757\uff0c\u4e3a\u4e86\u770b\u6a21\u578b\u662f\u5426\u7ed9\u51fa\u6b63\u786e\u7684\u9884\u6d4b\uff0c\u6211\u4f1a\u5411\u5927\u5bb6\u5c55\u793a5\u4e2aalbumentation\u7684\u56fe\u7247\u53d8\u6362\u65b9\u5f0f\uff0c\u7136\u540e\u4f7f\u7528\u6211\u4eec\u7684\u6a21\u578b\u8fdb\u884c\u6d4b\u8bd5\u3002\u7b2c6\u548c\u6700\u7ec8\u7684\u56fe\u7247\u589e\u5f3a\u662f\u5c06\u8fd95\u79cd\u53d8\u6362\u7ed3\u5408\u8d77\u6765\uff01\u4f60\u53ef\u4ee5\u770b\u5230\u8fd9\u4e9b\u6837\u672c\u5728\u4e0b\u9762\u4e00\u884c\u884c\u6392\u5217\u3002\u6ce8\u610f\u4e86\uff0c\u7b2c\u4e00\u5f20\u56fe\u7247\u662f\u539f\u59cb\u56fe\u7247\u3002","0fb01114":"\u70ed\u529b\u56fe\u53ef\u89c6\u5316\u6709\u5f88\u591a\u65b0\u9896\u7684\u5e94\u7528\uff1a\n\n* \u53ef\u89c6\u5316\u589e\u5f3a\u540e\u7684\u56fe\u7247\uff0c\u6765\u770b\u4f60\u7684\u6a21\u578b\u662f\u5426\u8db3\u591f\u9c81\u68d2\uff08\u9884\u6d4b\u7ed3\u679c\u4e00\u6837\uff09\uff0c\u6216\u8005\u6a21\u578b\u662f\u5426\u771f\u7684\u7406\u89e3\u4e86\u56fe\u7247\uff08\u662f\u5426\u6709\u4fdd\u7559\u91cd\u8981\u4fe1\u606f\uff09\n\n* \u5982\u679c\u6a21\u578b\u5b58\u5728\u8fc7\u62df\u5408\uff0c\u53ef\u89c6\u5316\u8bad\u7ec3\u96c6\u6765\u770b\u4e00\u4e9b\u4f2a\u7279\u5f81\u3002\u8bbe\u8ba1\u4e00\u4e9b\u9ad8\u6548\u7684\u56fe\u7247\u589e\u5f3a\u65b9\u5f0f\u6765\u6d88\u9664\u4f2a\u7279\u5f81\u3002\n\n* \u53ef\u89c6\u53160~4\u4e25\u91cd\u7ea7\u522b\u7684\u56fe\u7247\uff0c\u53bb\u627e\u51b3\u5b9a\u6bcf\u4e2a\u4e25\u91cd\u7b49\u7ea7\u7684\u7279\u5f81\u3002\n\n\n\u7ed3\u675f\u4e86\uff0c\u5e0c\u671b\u8fd9\u4e2anotebook\u53ef\u4ee5\u5e2e\u52a9\u5230\u4f60\u54e6~\n\n-- ","3b5a8aa5":"\u9996\u5148\uff0c\u8ba9\u6211\u4eec\u5b9a\u4e49 `DenseNet` \u7684\u4e3b\u5fc3\u9aa8.","e452990a":"## 3.1 \u786e\u4fdd\u6211\u4eec\u62ff\u5230\u4e86\u6b63\u786e\u7684\u53c2\u6570\n\n\u8fd9\u4e2a\u6a21\u5757\u7684\u76ee\u7684\u662f\u786e\u4fdd\u6211\u4eec\u5df2\u7ecf\u52a0\u8f7d\u4e86\u6b63\u786e\u7684\u53c2\u6570\u3002\u867d\u7136\u5728\u4ee5\u524d\u7684\u7248\u672c\u4e2d\uff0c\u5df2\u7ecf\u88ab\u8bc1\u660e\u662f\u6b63\u786e\u7684\u3002\u5728\u8fd9\u91cc\u6211\u53ea\u662f\u8bf4\u660e\u4e00\u4e0b\u3002\n","a13cfd4b":"# 2. \u51c6\u5907\u539f\u59cbkernel\u7684\u5de5\u5177\n\n\u4e3a\u4e86\u4f7f\u7528Grad-CAM\u6765\u53ef\u89c6\u5316\u6a21\u578b\uff0c\u6211\u4eec\u4e0d\u9700\u8981\u518d\u91cd\u65b0\u8bad\u7ec3\u6a21\u578b\uff0c\u6211\u4eec\u53ea\u8981\u76f4\u63a5\u7528\u5df2\u7ecf\u8bad\u7ec3\u597d\u7684\u6765\u81ea@xhlulu\u7684\u539f\u59cbkernel\u7684\u6a21\u578b\u6743\u91cd\u3002\u56e0\u6b64\uff0c\u5728\u5b9e\u9645\u4e0a\uff0c\u6211\u4eec\u6ca1\u6709\u5fc5\u8981\u91cd\u65b0\u9884\u5904\u7406\u8bad\u7ec3\/\u6d4b\u8bd5\u6570\u636e\uff0c\u6211\u4eec\u4f1a\u5728\u7ebf\u9884\u5904\u7406\u3002\u6ce8\u610f\u4e86\uff0c\u539f\u59cbkernel\u4f7f\u7528\u4e86224x224\u7684\u56fe\u7247\u5c3a\u5bf8\uff0c\u6211\u4eec\u4f7f\u7528\u56fe\u7247\u9884\u5904\u7406\u529f\u80fd\uff0c\u5982\u4e0b\u9762\u7684\u4ee3\u7801\u6240\u793a\u3002\n\n\u5c3d\u7ba1\u5982\u6b64\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u6211\u4eec\u52a0\u8f7d\u4e86\u6b63\u786e\u7684\u6a21\u578b\u6743\u91cd\uff0c\u6211\u4f1a\u9884\u5904\u7406\u6d4b\u8bd5\u6570\u636e\uff0c\u6765\u786e\u4fdd\u6211\u4eec\u548c\u539f\u59cbkernel\u4e00\u6837\u9884\u6d4b\u6b63\u786e\u3002","ebb37a40":"\u8fd9\u91cc\u662f\u5c55\u793a\u56fe\u7247\u548c\u9884\u6d4b\u7ed3\u679c\u7684\u5de5\u5177\u51fd\u6570","c1e40d43":"\u6df1\u5ea6\u5b66\u4e60\u7684\u53ef\u89e3\u91ca\u5316\u5de5\u5177Grad-CAM\u76f8\u4fe1\u5927\u5bb6\u90fd\u4e0d\u964c\u751f\u5566~\u672c\u6587\u4ecb\u7ecd\u8be5\u5de5\u5177\u7684\u4f7f\u7528\uff0c\u627e\u4e86kaggle\u4e0a\u8f83\u597d\u7684notebook\u7ffb\u8bd1\u540e\u5206\u4eab\u7ed9\u5927\u5bb6\uff0c\u8be5notebook\u4f7f\u7528keras\u5b9e\u73b0\u3002\n\u539f\u6587\u5730\u5740\uff1ahttps:\/\/www.kaggle.com\/ratthachat\/aptos-augmentation-visualize-diabetic-retinopathy\/notebook\n\n\u56e0\u4e3a\u662f\u53ef\u89c6\u5316\u5de5\u5177\uff0c\u90a3\u80af\u5b9a\u8981\u6709\u95ee\u9898\u6709\u6a21\u578b\uff0c\u518d\u4f7f\u7528\u8fd9\u4e2a\u5de5\u5177\u6765\u770b\u6a21\u578b\u7684\u8bc6\u522b\u60c5\u51b5\uff0c\u8f85\u52a9\u6211\u4eec\u51b3\u7b56\u3002\n\u56e0\u4e3a\u672c\u6587\u662fkaggle\u7ade\u8d5b\u91cc\u7684\u4e00\u4e2akernel\uff0c\u6240\u4ee5\u5927\u5bb6\u9700\u8981\u4e86\u89e3\u4e00\u4e9b\u80cc\u666f\u60c5\u51b5\uff1a\n* \u7ade\u8d5b\u9898\u76ee\uff1a\u901a\u8fc7\u773c\u7403\u56fe\u7247\u6765\u8bc6\u522b\u7cd6\u5c3f\u75c5\u89c6\u7f51\u819c\u75c5\u53d8\u7684\u4e25\u91cd\u7a0b\u5ea6\u3002\u5206\u4e3a5\u4e2a\u4e25\u91cd\u7b49\u7ea7\uff1a0\uff0c1\uff0c2\uff0c3\uff0c4\u30020\u4ee3\u8868\u6b63\u5e38\u773c\u7403\uff0c4\u4ee3\u8868\u975e\u5e38\u4e25\u91cd\u3002\n* \u6587\u4e2d\u4f1a\u51fa\u73b0\u4e00\u4e9bhard exudates\u7b49\u4e13\u4e1a\u540d\u8bcd\uff0c\u6307\u7684\u662f\u533b\u5b66\u4e0a\u5bf9\u773c\u7403\u60c5\u51b5\u7684\u63cf\u8ff0\u3002\u6bd4\u5982\u8fd9\u91cc\u7ffb\u8bd1\u4e3a\uff1a\u575a\u786c\u7684\u6e17\u51fa\u7269\u3002\u8fd8\u6709wood spots\uff0c\u5927\u5bb6\u77e5\u9053\u8fd9\u662f\u5bf9\u773c\u7403\u7684\u63cf\u8ff0\u5c31\u597d\u4e86\uff0c\u8bf7\u539f\u8c05\u6211\u8e69\u811a\u7684\u82f1\u8bed\u30fe(\u2267O\u2266)\u3003\u55f7~\uff08\u6211\u662f\u786c\u7ffb\u8bd1\u7684\uff0c\u6709\u66f4\u597d\u5730\u7ffb\u8bd1\u7684\u540c\u5b66\u8bf7\u7559\u8a00\uff09\u3002\n* \u5173\u4e8eGrad-CAM\u7684\u8bba\u6587\u3002Grad-CAM\u5927\u5bb6\u53ef\u4ee5\u53bb\u627e\u627e\u8d44\u6599\uff0c\u8fd9\u91cc\u4e3b\u8981\u8bb2keras\u7684\u5b9e\u73b0\u65b9\u5f0f\u3002\u6700\u65e9\u4f7f\u7528CAM\u6765\u53ef\u89c6\u5316\uff0cCAM\u63d0\u53d6\u6700\u540e\u4e00\u5c42\u5377\u79ef\u6c60\u5316\u5c42\uff0c\u7136\u540e\u5c06\u540e\u9762\u7684\u5c42\u6539\u4e3aGAP\u5c42\uff0c\u91cd\u65b0\u8bad\u7ec3\u6743\u91cd\u3002\u4ece\u800c\u5f97\u5230GAP\u5c42\u5bf9\u4e8e\u6bcf\u4e2a\u7c7b\u522b\u7684\u6743\u91cd\u3002\u7531\u4e8eGAP\u5c42\u8fd8\u6ca1\u6709\u4e22\u5931\u7a7a\u95f4\u4fe1\u606f\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4f9d\u636e\u6743\u91cd\u6765\u5bf9\u7279\u5f81\u56fe\u4e0a\u91c7\u6837\u3002\u4e0a\u91c7\u6837\u7684\u7ed3\u679c\u548c\u539f\u6765\u7684\u56fe\u7247\u878d\u5408\u5728\u4e00\u8d77\uff0c\u5c31\u662fCAM\u4e86\uff0c\u611f\u5174\u8da3\u7684\u540c\u5b66\u53ef\u4ee5\u770bCAM\u7684\u5b9e\u73b0\uff1ahttps:\/\/github.com\/philipperemy\/tensorflow-class-activation-mapping\n* Grad-CAM\u53ef\u4ee5\u4e0d\u9700\u8981\u518d\u8bad\u7ec3\u4e00\u904d\uff0c\u800c\u4e14\u5bf9\u6ca1\u6709GAP\u5c42\u7684\u7f51\u7edc\u5f88\u5305\u5bb9\u3002\u5177\u4f53\u5927\u5bb6\u5f80\u4e0b\u770b\u54e6~\n","5a7e9a6f":"\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u7528\u540c\u6837\u7684\uff08\u5171\u4eab\uff09\u5c42\u6784\u9020\u53e6\u5916\u4e00\u4e2a\u6a21\u578b\u3002\u5f53\u6211\u4eec\u9884\u8bad\u7ec3\u7b2c\u4e00\u4e2a\u6a21\u578b\u53c2\u6570\u540e\uff0c\u7b2c\u4e8c\u4e2a\u6a21\u578b\u83b7\u5f97\u4e86\u540c\u6837\u7684\u53c2\u6570\uff0c\u56e0\u4e3a\u6240\u6709\u5c42\u90fd\u662f\u5171\u4eab\u7684\u3002","3b8cc79d":"![grad-cam](https:\/\/i.ibb.co\/6FM6VCC\/gradcam-resized.png)\n\n![ref https:\/\/www.eyeops.com\/](https:\/\/sa1s3optim.patientpop.com\/assets\/images\/provider\/photos\/1947516.jpeg)\n\n\u672c\u6b21\u4f7f\u7528\u7684\u53ef\u89c6\u5316\u6280\u672f\u540d\u5b57\u4e3a\u201cGrad-CAM\u201d\uff0c\u4f60\u53ef\u4ee5\u70b9\u51fb\u8fd9\u4e9b\u94fe\u63a5\u6765\u627e\u5230\u8be5\u6280\u672f\u7684\u539f\u59cb\u6750\u6599\uff1a ([Gradient-weighted Class Activation Mapping](http:\/\/gradcam.cloudcv.org\/) ;\u5728\u8fd9\u91cc\uff0c\u6211\u4f1a\u9648\u8ff0\u600e\u4e48\u901a\u8fc7\u8be5\u6280\u672f\u5f97\u5230\u66f4\u591a\u5173\u4e8e\u4f60\u6a21\u578b\u7684\u89c1\u89e3\u3002\n\n\u6211\u503e\u5411\u4e8e\u4f7f\u7528keras\uff0c\u6240\u4ee5\u6211\u9009\u62e9\u53ef\u89c6\u5316\u4ed6\u7684\u6a21\u578b\uff0c\u94fe\u63a5\u662f\uff1a[public Keras model of @xhlulu](https:\/\/www.kaggle.com\/xhlulu\/aptos-2019-densenet-keras-starter)\uff0c\u4ed6\u7684\u6a21\u578b\u5728\u6211\u5199kernel\u7684\u65f6\u5019\u5206\u6570\u6700\u9ad8\u4e86\u3002\uff08\u4f60\u597d\u68d2 @xhlulu!\uff09\u3002\u5bf9\u4e8e\u559c\u6b22pytorch\u7684\u4eba\uff0c\u4f60\u53ef\u4ee5\u770b [this kernel of @daisukelab](https:\/\/www.kaggle.com\/daisukelab\/verifying-cnn-models-with-cam-and-etc-fast-ai)\uff0c\u8fd9\u7bc7\u6587\u7ae0\u4e5f\u7528\u5230\u4e86\u8fd9\u4e2a\u6280\u672f\u3002\n\nkeras\u7248\u672c\u5f15\u7528\u4e86[this article](http:\/\/www.hackevolve.com\/where-cnn-is-looking-grad-cam\/)\uff0c\u8be5\u6587\u7ae0\u5f15\u7528\u4e86F.Chollet\u7684\u4e66","ecbb9d6c":"\u9996\u5148\uff0c\u8ba9\u6211\u4eec\u6d4b\u8bd5\u524d10\u4e2a\u6d4b\u8bd5\u6570\u636e\u91cc\u7684\u6837\u672c\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u6570\u636e\uff0c\u6211\u5c55\u793a\u4e86\u539f\u59cb\u56fe\u7247\u3001\u7ecf\u8fc7Ben\u7684\u65b9\u5f0f\u5904\u7406\u8fc7\u7684\u56fe\u7247\u3001\u70ed\u529b\u56fe\u3001\u548c\u70ed\u529b\u56fe\u7ed3\u5408\u7684\u56fe\u7247\u3002","9f5efee6":"## 1.1 Grad-CAM\u7b80\u4ecb\n\n![](http:\/\/gradcam.cloudcv.org\/static\/images\/network.png)","3425f4d1":"\n\n# 1. \u4ecb\u7ecd \uff1a\u8fd9\u4e9b\u56fe\u7247\u662f\u975e\u5e38\u4e25\u91cd\u7684\uff0c\u6a21\u578b\u6709\u5f88\u597d\u5730\u9884\u6d4b\u5230\u5417\uff1f\n\n\u4f60\u60f3\u8981\u4e86\u89e3\uff0c\u6a21\u578b\u5230\u5e95\u5173\u6ce8\u4e86\u56fe\u7247\u54ea\u4e9b\u5185\u5bb9\uff1f\u548c\u773c\u7403\u56fe\u7247\u81f4\u75c5\u533a\u57df\u662f\u540c\u4e00\u5757\u5730\u65b9\u5417\uff1f\u4e0b\u9762\u7684\u56fe\u7247\u663e\u793a\u4e86CNN\u771f\u6b63\u5173\u6ce8\u4e86\u54ea\u4e9b\u533a\u57df\uff0c\u5b83\u662f\u5426\u771f\u7684\u7406\u89e3\u4e86\u773c\u7403\u81f4\u75c5\u7684\u539f\u56e0\u3002\n\n\u770b\u4e0b\u9762\u7684\u56fe\u7247\uff1a\n\u5728\u7b2c\u4e00\u4e2a\u6848\u4f8b\u4e2d\uff0c\u6a21\u578b\u770b\u8d77\u6765\u8fd0\u884c\u4e0d\u9519\u3002\u5b83\u53ef\u4ee5\u6307\u51fa\u773c\u7403\u4e2d\u7684\u7f3a\u9677\u3002\n\u5728\u7b2c\u4e8c\u4e2a\u6848\u4f8b\u4e2d\uff0c\u6a21\u578b\u5b8c\u5168\u6ca1\u6709\u6307\u51fa\u5728\u773c\u7403\u4e2d\u95f4\u7684wool spots\uff0c\u867d\u7136\u5b83\u5c06\u56fe\u7247\u8bc4\u4f30\u4e3a\u7b49\u7ea73.\u8fd9\u4e2a\u7b49\u7ea7\u8bf4\u660e\u4e86\u6211\u4eec\u6a21\u578b\u8fd8\u6ca1\u6709\u6293\u53d6hard exudates\u7279\u5f81\u3002\n\u53c2\u8003\u7f51\u5740\uff1a https:\/\/www.eyeops.com\/","93e47056":"\u8fd9\u91cc\uff0c\u6211\u4eec\u53ef\u4ee5\u627e\u5230\u6700\u540e\u4e00\u4e2a\u5377\u79ef\u5c42\u3002\u6ce8\u610f\u4e86\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528`conv5_block16_concat`\u6216\u8005`relu`\u6a21\u5757\u3002"}}