{"cell_type":{"f845e672":"code","6fb5fc61":"code","305f026b":"code","c229dddf":"code","59910cf0":"code","065de55d":"code","6d7a717d":"code","61be5a2e":"code","5f2db5a8":"code","3c36e923":"code","222faff1":"code","e126f092":"code","5016555d":"code","9cc4d8d9":"code","922821f1":"code","0862098e":"code","0908c807":"code","62c3bd5f":"code","34de33ae":"code","8f96c2fd":"code","b25add1b":"code","0a053f96":"code","35e08960":"code","10c51731":"code","dbc71c08":"code","05ff1234":"code","ddf0a70e":"code","4412d48f":"code","467c30b4":"code","eeef228d":"code","9f97b4fd":"code","6222bd64":"code","cf9bd65f":"code","0f23c141":"code","8c01183c":"code","da4a8cd6":"code","31f93d65":"code","a9459226":"code","8fda1dd9":"code","d047c6cb":"code","44d529e5":"code","126c0425":"code","81a95429":"code","f6b85be7":"code","f4ce34c4":"code","f590fbbd":"code","5a82048a":"code","2688c318":"code","0cae1103":"code","f2a80818":"code","b52697d4":"code","87de7904":"code","9cff915b":"code","45bfe044":"code","a082d677":"code","5d8d2e39":"code","d9e26136":"code","07e3553b":"code","3b1270ff":"code","f4f86070":"code","58f702a3":"code","9654cdf7":"code","aff689d5":"code","5e319ddc":"code","c0328498":"code","42e026aa":"code","d189a1c9":"code","bf4bffe0":"code","009b2b4d":"code","c3517f07":"code","eb779739":"code","f993160f":"code","f69aa980":"code","1abb16ed":"code","38af07e9":"code","3b50d4df":"code","182bb40f":"code","935630a3":"code","ce578acf":"code","73b2592e":"code","c538c604":"code","b6aafe85":"code","e3238009":"code","d563a1bf":"code","36b7c16c":"code","99c9961a":"code","8ee48796":"code","3a48c138":"code","ee567edb":"code","5ef5a44e":"code","5826447e":"code","95d51ebe":"code","1e7c603b":"code","7ab1eb8d":"code","0cc9ded3":"code","912ddda0":"code","c351fa0a":"code","df49df3f":"code","6792f401":"code","4d67a502":"code","852b019b":"code","b2ae72b2":"code","adf2bb8a":"code","f686444e":"code","ffcafbfc":"code","fefaee25":"code","df781bec":"code","3e99042e":"code","e824df7f":"code","2f5c81ae":"code","f728cd8e":"code","2c76510e":"code","49a43636":"code","64b508a6":"code","a2a932ff":"code","06d9cfef":"code","d2f1b6cf":"code","e1b26039":"code","ab696ecb":"code","0e156a82":"code","b9b512f0":"code","8a237dbe":"code","5b8cf827":"code","ddb7c2d1":"code","2d3eabde":"code","d0dd6098":"code","5595e106":"code","4070fbea":"code","5a69f2f7":"code","d13fb925":"code","cf11f9da":"code","7b56ea71":"code","3faee602":"code","2fcc7bf1":"code","610f1b88":"code","7e13758f":"code","eb8e1f5d":"code","45b14956":"markdown","e3092c5c":"markdown","505f08f7":"markdown","08bc5f29":"markdown","e6f0f01a":"markdown","f06ec4af":"markdown","12f48a1c":"markdown","bd6770e8":"markdown","93204ab7":"markdown","b86a0607":"markdown","7a361647":"markdown","48eeaf66":"markdown","3e38fd52":"markdown","17cb0e66":"markdown","4b3b25fe":"markdown","2dfddf85":"markdown","a62700dc":"markdown","6a89e0be":"markdown","007f45e2":"markdown","49c68b4f":"markdown","f2015e7d":"markdown","ded53b5d":"markdown","b7028b9b":"markdown","92a8c123":"markdown","c4f8c3ff":"markdown","50690831":"markdown","3ad8b981":"markdown","00d3305f":"markdown","8bd35674":"markdown","231b3b35":"markdown","bacba43e":"markdown","86648f0d":"markdown","4ff07ce4":"markdown","1c097ca1":"markdown","f309855f":"markdown","cd2a1fee":"markdown","2c982f6c":"markdown","7faab04b":"markdown","1dab621b":"markdown","255fe46f":"markdown","1e760200":"markdown","6f85b02f":"markdown","f0b84f71":"markdown","a6c651a5":"markdown","0e82e97b":"markdown","49ef377b":"markdown","1c1fea0a":"markdown","7b1d4ae7":"markdown","db733530":"markdown","9eabbaf1":"markdown","ae0962f4":"markdown","68805bfd":"markdown","8415e53f":"markdown","98667217":"markdown","6394fbe7":"markdown","a41653f6":"markdown","a40a46e4":"markdown","6e6e93cd":"markdown","e2538126":"markdown","6114ef12":"markdown","fc15ca74":"markdown","ce584bc9":"markdown","b1fd5883":"markdown","d2987c29":"markdown","d8ce69fe":"markdown","b92c08d0":"markdown","eede44a0":"markdown","ae7449c9":"markdown","f196473a":"markdown","19c7b87f":"markdown","663603c3":"markdown","b07f0e9e":"markdown","a54250f0":"markdown","048eb666":"markdown","18443289":"markdown","bd92b810":"markdown","201d8c7c":"markdown","859d89fc":"markdown","7be78fa2":"markdown","e1c00d7c":"markdown","8096ea85":"markdown","d26b486e":"markdown","c77043e8":"markdown","9e9ec086":"markdown","811448ea":"markdown","6c79b486":"markdown","252871e5":"markdown","36fb8deb":"markdown","d651f1d0":"markdown","f2e9a33a":"markdown","440e1809":"markdown","3bf6db69":"markdown","f4da4fb9":"markdown","04c3e958":"markdown","f375538d":"markdown","17ba9366":"markdown","a90367cd":"markdown","57e759a5":"markdown","c31ed693":"markdown","9f9c1f98":"markdown","422d4293":"markdown","36235a14":"markdown","5334f815":"markdown"},"source":{"f845e672":"#!\/usr\/bin\/env python\n# coding: utf-8\nimport os\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\n%matplotlib inline\n\nfrom mpl_toolkits.basemap import Basemap","6fb5fc61":"import folium\nfrom folium import plugins","305f026b":"os.chdir(\"\/kaggle\/input\/crimes-in-boston\/\")\nos.listdir()","c229dddf":"df=pd.read_csv(r'crime.csv', encoding='unicode_escape',low_memory=False)\ndf.head()","59910cf0":"def pie_plot(list_number, list_unique):\n    plt.figure(figsize=(20,10))\n    plt.pie(list_unique, \n        labels=list_number,\n        autopct='%1.1f%%', \n        shadow=True, \n        startangle=140)\n \n    plt.axis('equal')\n    plt.show()\n    return 0","065de55d":"def bar_chart(list_number, list_unique,xlabel,ylabel):\n    objects = list_unique\n    y_pos = np.arange(len(objects))\n    performance = list_number\n \n    plt.figure(figsize=(20,10))    \n    plt.bar(y_pos, performance, align='center', alpha=0.5)\n    plt.xticks(y_pos, objects)\n    plt.ylabel(ylabel) \n    plt.xlabel(xlabel)\n    plt.show()\n    \n    return 0","6d7a717d":"#df_dy_crim=pd.DataFrame(df.groupby(['DAY_OF_WEEK']).count().INCIDENT_NUMBER.transform(max)).reset_index()\ndf_dy_crim=df.groupby(['DAY_OF_WEEK']).count().INCIDENT_NUMBER.reset_index(name='Number_of_incidents')\ndy_mst_crm=df_dy_crim.sort_values(by=['Number_of_incidents'],ascending=False).head(1)\ndy_mst_crm","61be5a2e":"df.groupby(['DAY_OF_WEEK']).count().INCIDENT_NUMBER.reset_index(name='Number_of_incidents').sort_values(by='Number_of_incidents', ascending=False).head(1)","5f2db5a8":"crm_typ_yr=df.groupby(['OFFENSE_CODE_GROUP','YEAR']).size().reset_index(name='count').sort_values(by=['count'], ascending=False)\ncrm_typ_yr.head()","3c36e923":"loc_crm_typ=df.loc[0:,['OFFENSE_CODE_GROUP','OFFENSE_DESCRIPTION','STREET']].groupby('STREET').agg(' ,'.join).reset_index()\nloc_crm_typ['Lat']= df.loc[0:,['Lat']]\nloc_crm_typ['Long']=df.loc[0:,['Long']]\nloc_crm_typ.head()","222faff1":"df_inc_by_yr=df.groupby('YEAR').count().INCIDENT_NUMBER.reset_index(name=\"Number of Incidents\")\ndf_inc_by_yr_lbl=df['YEAR'].unique()\ndf_inc_by_yr_lbl","e126f092":"def create_list_number_crime(name_column, list_unique):\n    # list_unique = df[name_column].unique()\n    \n    i = 0\n    \n    list_number = list()\n    \n    while i < len(list_unique):\n        list_number.append(len(df.loc[df[name_column] == list_unique[i]]))\n        i += 1\n    \n    return list_unique, list_number","5016555d":"create_list_number_crime('YEAR',df['YEAR'].unique())","9cc4d8d9":"pie_plot(list(df['YEAR'].unique()),df_inc_by_yr['Number of Incidents'])","922821f1":"bar_chart(df_inc_by_yr['Number of Incidents'],df_inc_by_yr['YEAR'],'Year','Number of Incidents')","0862098e":"def drop_NaN_two_var(x, y):\n\n    df1 = df[[x, y]].dropna()\n    print(df1.shape)\n\n    x_value = df1[x]\n    y_value = df1[y]\n\n    del df1\n        \n    print(x + ': ' + str(x_value.shape))\n    print(y + ': ' + str(y_value.shape))\n        \n    return x_value, y_value","0908c807":"df_dst_yr_crm=df.groupby(by=['DISTRICT','YEAR']).count().INCIDENT_NUMBER.reset_index(name='Number of Incidents')\nsns.barplot(x='DISTRICT',y='Number of Incidents',hue='YEAR',data=df_dst_yr_crm)\nplt.tight_layout()\nplt.show()","62c3bd5f":"df_mnth_crm = df.groupby('MONTH').count().INCIDENT_NUMBER.reset_index(name='Number of Incidents')\nbar_chart(df_mnth_crm['Number of Incidents'],df_mnth_crm['MONTH'],'Month','Number of Incidents')","34de33ae":"df_dy_crim=df.groupby(['DAY_OF_WEEK']).count().INCIDENT_NUMBER.reset_index(name='num_of_incidents')\ndf_dy_crim.head()\nday_of_week=['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday']\nbar_chart(df_dy_crim['num_of_incidents'],day_of_week,'Day of the week','Number of Incidents')","8f96c2fd":"hr_num_crm=df.groupby('HOUR').count().INCIDENT_NUMBER.reset_index(name='num_of_inc')\nhr_num_crm\nbar_chart(hr_num_crm['num_of_inc'],hr_num_crm['HOUR'],'Hour of the day','Number of Incidents')","b25add1b":"hr_yr_crm=df.groupby(['HOUR','YEAR']).count().INCIDENT_NUMBER.reset_index(name='Number of Incidents')\n\nsns.barplot(x='HOUR',y='Number of Incidents',hue='YEAR',data=hr_yr_crm)","0a053f96":"crm_off_grp_df=df.groupby(['OFFENSE_CODE_GROUP']).count().INCIDENT_NUMBER.reset_index(name='Number of Incidents').sort_values(by='Number of Incidents', ascending=False)\nfig, ax = plt.subplots()\nfig.set_size_inches(10, 20)\nsns.barplot('Number of Incidents','OFFENSE_CODE_GROUP',data=crm_off_grp_df,ax=ax)","35e08960":"df['SHOOTING'].fillna(0,inplace=True)\n\ndf['SHOOTING'] = df['SHOOTING'].map({\n    0: 0,\n    'Y':1\n})\n\ndf['SHOOTING'].unique()","10c51731":"Shoot_True=len(df.loc[df['SHOOTING'] == 1])\nShoot_False=len(df.loc[df['SHOOTING'] == 0])\n\nprint('With shooting(num): ' + str(Shoot_True))\nprint('With shooting(%):   ' + str(round(Shoot_True*100\/len(df),2))+'%')\nprint()\nprint('Without shooting(num): ' + str(Shoot_False))\nprint('Without shooting(%):   ' + str(round(Shoot_False*100\/len(df),2))+'%')","dbc71c08":"shoot_by_yr=df[df['SHOOTING']==1].groupby('YEAR').count().INCIDENT_NUMBER.reset_index(name='Number of Shootings')\nshoot_by_yr\nbar_chart(shoot_by_yr['Number of Shootings'],shoot_by_yr['YEAR'],'Year','Number of Shootings')","05ff1234":"shoot_by_mnth=df[df['SHOOTING']==1].groupby('MONTH').count().INCIDENT_NUMBER.reset_index(name='Number of Shootings')\nshoot_by_mnth\n\nbar_chart(shoot_by_mnth['Number of Shootings'],shoot_by_mnth['MONTH'],'Month','Number of Shootings')","ddf0a70e":"shoot_by_day=df[df['SHOOTING']==1].groupby('DAY_OF_WEEK').count().INCIDENT_NUMBER.reset_index(name='Number of Shootings')\nshoot_by_day\n\nbar_chart(shoot_by_day['Number of Shootings'],day_of_week,'Day of Week','Number of Shootings')","4412d48f":"shoot_by_hour=df[df['SHOOTING']==1].groupby('HOUR').count().INCIDENT_NUMBER.reset_index(name='Number of Shootings')\nshoot_by_hour\n\nbar_chart(shoot_by_hour['Number of Shootings'],shoot_by_hour['HOUR'],'Hour of the day','Number of Shootings')","467c30b4":"shoot_by_district=df[df['SHOOTING']==1].groupby('DISTRICT').count().INCIDENT_NUMBER.reset_index(name='Number of Shootings')\nshoot_by_district\n\nbar_chart(shoot_by_district['Number of Shootings'],shoot_by_district['DISTRICT'],'Hour of the day','Number of Shootings')","eeef228d":"plt.figure(figsize=[10,5])\ncolor_dis=plt.cm.Spectral(np.linspace(0, 1, len(shoot_by_district['DISTRICT'])))\nplt.bar(shoot_by_district['DISTRICT'],shoot_by_district['Number of Shootings'], color=color_dis)\nplt.show()","9f97b4fd":"plt.figure(figsize=(10,5))\ndf_shoot=df[df['SHOOTING']==1]\ndf_shoot['DISTRICT'].value_counts().plot.bar(color=color_dis)\nplt.show()","6222bd64":"shoot_location = df_shoot[['Lat','Long']]\nshoot_location = shoot_location.dropna()\n\nshoot_location.head()\nshoot_location=shoot_location.loc[(shoot_location['Lat']>40) & (shoot_location['Long'] < -60)]  \n\nx_shoot = shoot_location['Long']\ny_shoot = shoot_location['Lat']\n\nsns.jointplot(x_shoot, y_shoot, kind='scatter')\nsns.jointplot(x_shoot, y_shoot, kind='hex')\nsns.jointplot(x_shoot, y_shoot, kind='kde')\nsns.jointplot(x_shoot,y_shoot,kind='reg')\nplt.show()","cf9bd65f":"shoot_by_UCR=df[df['SHOOTING']==1].groupby('UCR_PART').count().INCIDENT_NUMBER.reset_index(name='Number of Shootings')\n\nplt.figure(figsize=(10,5))\ncolor_ucr=plt.cm.Spectral(np.linspace(0, 1, len(shoot_by_UCR['UCR_PART'])))\ndf_shoot['UCR_PART'].value_counts().plot.bar(color=color_ucr)\nplt.show()","0f23c141":"df[['Lat','Long']].describe()\n\nlocation = df[['Lat','Long']]\nlocation = location.dropna()\n\nlocation = location.loc[(location['Lat']>40) & (location['Long'] < -60)]","8c01183c":"x = location['Long']\ny = location['Lat']\nrand_colors = np.random.rand(len(x))\nplt.figure(figsize=(20,20))\nplt.scatter(x, y,c=rand_colors, alpha=0.5)\nplt.show()","da4a8cd6":"m = folium.Map([42.348624, -71.062492], zoom_start=11)","31f93d65":"#generate various join plots to see if there is a pattern or trend\nsns.jointplot(x, y, kind='scatter')\nsns.jointplot(x, y, kind='hex')\nsns.jointplot(x, y, kind='kde')","a9459226":"df.isnull().sum()","8fda1dd9":"df['Day']=0\ndf['Night']=0\n# Day time for 1st month\ndf['Day'].loc[(df['MONTH'] == 1) & (df['HOUR'] >= 6) & (df['HOUR'] <= 18)] = 1\n\n# Day time for 2st month\ndf['Day'].loc[(df['MONTH'] == 2) & (df['HOUR'] >= 6) & (df['HOUR'] <= 19)] = 1\n\n# Day time for 3rd month\ndf['Day'].loc[(df['MONTH'] == 3) & (df['HOUR'] >= 6) & (df['HOUR'] <= 20)] = 1\n\n# Day time for 4st month\ndf['Day'].loc[(df['MONTH'] == 4) & (df['HOUR'] >= 5) & (df['HOUR'] <= 20)] = 1\n\n# Day time for 5th month\ndf['Day'].loc[(df['MONTH'] == 5) & (df['HOUR'] >= 5) & (df['HOUR'] <= 21)] = 1\n\n# Day time for 6th month\ndf['Day'].loc[(df['MONTH'] == 6) & (df['HOUR'] >= 4) & (df['HOUR'] <= 21)] = 1\n\n# Day time for 7th month\ndf['Day'].loc[(df['MONTH'] == 7) & (df['HOUR'] >= 5) & (df['HOUR'] <= 21)] = 1\n\n# Day time for 8th month\ndf['Day'].loc[(df['MONTH'] == 8) & (df['HOUR'] >= 5) & (df['HOUR'] <= 21)] = 1\n\n# Day time for 9th month\ndf['Day'].loc[(df['MONTH'] == 9) & (df['HOUR'] >= 6) & (df['HOUR'] <= 20)] = 1\n\n# Day time for 10th month\ndf['Day'].loc[(df['MONTH'] == 10) & (df['HOUR'] >= 6) & (df['HOUR'] <= 19)] = 1\n\n# Day time for 11th month\ndf['Day'].loc[(df['MONTH'] == 11) & (df['HOUR'] >= 6) & (df['HOUR'] <= 17)] = 1\n\n# Day time for 12th month\ndf['Day'].loc[(df['MONTH'] == 12) & (df['HOUR'] >= 7) & (df['HOUR'] <= 17)] = 1\n\n\n#Update Night as 1 where Day is 0\ndf['Night'].loc[df['Day']==0]=1","d047c6cb":"plt.figure(figsize=(16,8))\ncolor_DN=plt.cm.Spectral(np.linspace(0, 1, 2))\ndf['Night'].value_counts().plot.bar(color=color_DN)\nplt.show()","44d529e5":"df['OFFENSE_CODE_GROUP'].value_counts().head(15)","126c0425":"list_offense_code_group=('Motor Vehicle Accident Response',\n                           'Larceny',\n                           'Medical Assistance',\n                           'Investigate Person',\n                           'Other',\n                           'Drug Violation',\n                           'Simple Assault',\n                           'Vandalism',\n                           'Verbal Disputes',\n                           'Towed',\n                           'Investigate Property',\n                           'Larceny From Motor Vehicle')\nlist_offense_code_group","81a95429":"df_model = pd.DataFrame()","f6b85be7":"i = 0\n\nwhile i < len(list_offense_code_group):\n\n    df_model = df_model.append(df.loc[df['OFFENSE_CODE_GROUP'] == list_offense_code_group[i]])\n    \n    i+=1","f4ce34c4":"df_model.columns","f590fbbd":"list_column = ['DISTRICT','REPORTING_AREA','MONTH','DAY_OF_WEEK',\n               'HOUR','Lat','Long', 'OFFENSE_CODE_GROUP','Day','Night']","5a82048a":"df_model=df_model[list_column]","2688c318":"df_model['DISTRICT'].unique()","0cae1103":"df_model['DISTRICT'] = df_model['DISTRICT'].map({\n    'B3':1, \n    'E18':2, \n    'B2':3, \n    'E5':4, \n    'C6':5, \n    'D14':6, \n    'E13':7, \n    'C11':8, \n    'D4':9, \n    'A7':10, \n    'A1':11, \n    'A15':12\n})\n\ndf_model['DISTRICT'].unique()","f2a80818":"df_model['REPORTING_AREA'] = pd.to_numeric(df_model['REPORTING_AREA'], errors='coerce')","b52697d4":"df_model['MONTH'].unique()","87de7904":"df_model['DAY_OF_WEEK'] = df_model['DAY_OF_WEEK'].map({\n    'Monday':1,\n    'Tuesday':2,\n    'Wednesday':3,\n    'Thursday':4,\n    'Friday':5,\n    'Saturday':6, \n    'Sunday':7    \n})\n\ndf_model['DAY_OF_WEEK'].unique()","9cff915b":"df_model['HOUR'].unique()","45bfe044":"df_model[['Lat', 'Long']].head()","a082d677":"df_model.fillna(0, inplace = True)","5d8d2e39":"x = df_model[['DISTRICT','REPORTING_AREA','MONTH','DAY_OF_WEEK','HOUR','Lat','Long','Day','Night']]","d9e26136":"y = df_model['OFFENSE_CODE_GROUP']","07e3553b":"y.unique()","3b1270ff":"y=y.map({\n    'Motor Vehicle Accident Response':1, \n    'Larceny':2, \n    'Medical Assistance':3,\n    'Investigate Person':4, \n    'Other':5, \n    'Drug Violation':6, \n    'Simple Assault':7,\n    'Vandalism':8, \n    'Verbal Disputes':9, \n    'Towed':10, \n    'Investigate Property':11,\n    'Larceny From Motor Vehicle':12\n})","f4f86070":"from sklearn.model_selection import train_test_split","58f702a3":"x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.1,random_state=42)\nprint(x_train.shape, y_train.shape)\nprint(x_test.shape, y_test.shape)","9654cdf7":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.naive_bayes import BernoulliNB\nfrom sklearn.tree import ExtraTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.semi_supervised import LabelSpreading\nfrom sklearn.svm import LinearSVC\nfrom sklearn.neighbors.nearest_centroid import NearestCentroid\nfrom sklearn.ensemble import RandomForestClassifier\n#!conda install -c conda-forge lightgbm --yes\nfrom lightgbm import LGBMClassifier","aff689d5":"from sklearn.metrics import f1_score","5e319ddc":"def func_results(result):\n    print('mean: ' + str(result.mean()))\n    print('max: ' + str(result.max()))\n    print('min: ' + str(result.min()))\n    return result","c0328498":"def func_DecisionTreeClassifier(x_train, y_train):\n    dec_tree = DecisionTreeClassifier()\n    dec_tree = dec_tree.fit(x_train, y_train)\n\n    dec_tree_pred = dec_tree.predict(x_test)\n\n    dec_tree_score = f1_score(y_test, dec_tree_pred, average=None)\n    return func_results(dec_tree_score)","42e026aa":"func_DecisionTreeClassifier(x_train,y_train)","d189a1c9":"def func_BernoulliNB(x_train, y_train):\n    bernoulli = BernoulliNB()\n    bernoulli = bernoulli.fit(x_train, y_train)\n\n    bernoulli_pred = bernoulli.predict(x_test)\n\n    bernoulli_score = f1_score(y_test, bernoulli_pred, average=None)\n    return func_results(bernoulli_score)","bf4bffe0":"func_BernoulliNB(x_train,y_train)","009b2b4d":"def func_ext_tree_cls(x_train,y_train):\n    ext_tree=ExtraTreeClassifier()\n    ext_tree=ext_tree.fit(x_train,y_train)\n    ext_tree_pred=ext_tree.predict(x_test)\n    ext_tree_score=f1_score(y_test,ext_tree_pred,average=None)\n    return func_results(ext_tree_score)","c3517f07":"func_ext_tree_cls(x_train,y_train)","eb779739":"def func_KNeighborsClassifier(x_train, y_train,n):\n    Kneigh = KNeighborsClassifier(n_neighbors=n)\n    Kneigh.fit(x_train, y_train) \n\n    Kneigh_pred = Kneigh.predict(x_test)\n\n    Kneigh_score = f1_score(y_test, Kneigh_pred, average=None)\n    return func_results(Kneigh_score),Kneigh_pred\n","f993160f":"KNN_score, KNN_pred=func_KNeighborsClassifier(x_train,y_train,5)\nKNN_score","f69aa980":"from sklearn import metrics","1abb16ed":"Ks=20\nmean_acc = np.zeros((Ks-1))\nstd_acc = np.zeros((Ks-1))\nfor n in range(1,Ks):\n    \n    #Train Model and Predict  \n    neigh = KNeighborsClassifier(n_neighbors = n).fit(x_train,y_train)\n    yhat=neigh.predict(x_test)\n    mean_acc[n-1] = metrics.accuracy_score(y_test, yhat)\n    std_acc[n-1]=np.std(yhat==y_test)\/np.sqrt(yhat.shape[0])\n\nmean_acc","38af07e9":"mean_acc - 1 * std_acc","3b50d4df":"mean_acc + 1 * std_acc","182bb40f":"plt.plot(range(1,Ks),mean_acc,'g')\nplt.fill_between(range(1,Ks),mean_acc - 1 * std_acc,mean_acc + 1 * std_acc, alpha=0.10)\nplt.legend(('Accuracy ', '+\/- 3xstd'))\nplt.ylabel('Accuracy ')\nplt.xlabel('Number of Nabors (K)')\nplt.tight_layout()\nplt.show()","935630a3":"print( \"The best accuracy was with\", mean_acc.max(), \"with k=\", mean_acc.argmax()+1) ","ce578acf":"def func_GaussianNB(x_train, y_train):\n    gaussian = GaussianNB()\n    gaussian = gaussian.fit(x_train, y_train)\n\n    gaussian_pred = gaussian.predict(x_test)\n\n    gaussian_score = f1_score(y_test, gaussian_pred, average=None)\n    return func_results(gaussian_score)\n","73b2592e":"func_GaussianNB(x_train,y_train)","c538c604":"def func_RandomForestClassifier(x_train, y_train):\n    rfc = RandomForestClassifier()\n    rfc = rfc.fit(x_train, y_train)\n\n    rfc_pred = rfc.predict(x_test)\n\n    rfc_score = f1_score(y_test, rfc_pred, average=None)\n    return func_results(rfc_score)","b6aafe85":"func_RandomForestClassifier(x_train,y_train)","e3238009":"def func_LGBMClassifier(x_train, y_train):\n    lgbm = LGBMClassifier()\n    lgbm = lgbm.fit(x_train, y_train)\n\n    lgbm_pred = lgbm.predict(x_test)\n\n    lgbm_score = f1_score(y_test, lgbm_pred, average=None)\n    return func_results(lgbm_score)","d563a1bf":"func_LGBMClassifier(x_train,y_train)","36b7c16c":"df_model_2 = df[['OFFENSE_CODE', 'DISTRICT','MONTH','DAY_OF_WEEK','HOUR','Day','Night']]\ndf_model_2.head()","99c9961a":"df_model_2['OFFENSE_CODE'] = pd.to_numeric(df_model_2['OFFENSE_CODE'], errors='coerce')","8ee48796":"df_model_2['DISTRICT'] = df_model_2['DISTRICT'].map({\n    'B3':1, \n    'E18':2, \n    'B2':3, \n    'E5':4, \n    'C6':5, \n    'D14':6, \n    'E13':7, \n    'C11':8, \n    'D4':9, \n    'A7':10, \n    'A1':11, \n    'A15':12\n})\n\ndf_model_2['DISTRICT'].unique()","3a48c138":"df_model_2['DAY_OF_WEEK'] = df_model_2['DAY_OF_WEEK'].map({\n    'Tuesday':2, \n    'Saturday':6, \n    'Monday':1, \n    'Sunday':7, \n    'Thursday':4, \n    'Wednesday':3,\n    'Friday':5\n})\n\ndf_model_2['DAY_OF_WEEK'].unique()","ee567edb":"df_model_2.isnull().sum()","5ef5a44e":"df_model_2 = df_model_2.dropna()","5826447e":"df_model_2.isnull().sum()","95d51ebe":"df_model_2.shape","1e7c603b":"x = df_model_2[['OFFENSE_CODE','MONTH','DAY_OF_WEEK','HOUR','Day','Night']]\ny = df_model_2['DISTRICT']","7ab1eb8d":"x_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.1, random_state=42)\n\nprint(x_train.shape,y_train.shape)\nprint(x_test.shape,y_test.shape)","0cc9ded3":"func_BernoulliNB(x_train,y_train)","912ddda0":"func_DecisionTreeClassifier(x_train,y_train)","c351fa0a":"func_ext_tree_cls(x_train,y_train)","df49df3f":"func_GaussianNB(x_train,y_train)","6792f401":"func_KNeighborsClassifier(x_train,y_train,5)","4d67a502":"Ks=10\nmean_acc = np.zeros((Ks-1))\nstd_acc = np.zeros((Ks-1))\nfor n in range(1,Ks):\n    \n    #Train Model and Predict  \n    neigh = KNeighborsClassifier(n_neighbors = n).fit(x_train,y_train)\n    yhat=neigh.predict(x_test)\n    mean_acc[n-1] = metrics.accuracy_score(y_test, yhat)\n    std_acc[n-1]=np.std(yhat==y_test)\/np.sqrt(yhat.shape[0])\n\nmean_acc","852b019b":"plt.plot(range(1,Ks),mean_acc,'g')\nplt.fill_between(range(1,Ks),mean_acc - 1 * std_acc,mean_acc + 1 * std_acc, alpha=0.10)\nplt.legend(('Accuracy ', '+\/- 3xstd'))\nplt.ylabel('Accuracy ')\nplt.xlabel('Number of Nabors (K)')\nplt.tight_layout()\nplt.show()","b2ae72b2":"func_LGBMClassifier(x_train,y_train)","adf2bb8a":"func_RandomForestClassifier(x_train,y_train)","f686444e":"df_model3 = df[['DISTRICT','REPORTING_AREA', 'MONTH','DAY_OF_WEEK','HOUR','UCR_PART','Lat','Long']]","ffcafbfc":"df_model3['DISTRICT'] = df_model3['DISTRICT'].map({\n    'B3':1, \n    'E18':2, \n    'B2':3, \n    'E5':4, \n    'C6':5, \n    'D14':6, \n    'E13':7, \n    'C11':8, \n    'D4':9, \n    'A7':10, \n    'A1':11, \n    'A15':12\n})","fefaee25":"df_model3['REPORTING_AREA'] = pd.to_numeric(df_model3['REPORTING_AREA'], errors='coerce')","df781bec":"df_model3['DAY_OF_WEEK'] = df_model3['DAY_OF_WEEK'].map({\n    'Tuesday':2, \n    'Saturday':6, \n    'Monday':1, \n    'Sunday':7, \n    'Thursday':4, \n    'Wednesday':3,\n    'Friday':5\n})","3e99042e":"df_model3['UCR_PART'].unique()","e824df7f":"df_model3['UCR_PART'] = df_model3['UCR_PART'].map({\n    'Part Three':3, \n    'Part One':1, \n    'Part Two':2, \n#    'Other':4\n})","2f5c81ae":"df_model3 = df_model3.dropna()\nprint(df_model3.shape)\ndf_model3.isnull().sum()","f728cd8e":"x = df_model3[['DISTRICT','REPORTING_AREA', 'MONTH','DAY_OF_WEEK','HOUR','Lat','Long']]\ny = df_model3['UCR_PART']","2c76510e":"x_train, x_test, y_train, y_test = train_test_split(\n    x,\n    y, \n    test_size = 0.1,\n    random_state=42\n)\n\nprint(x_train.shape, y_train.shape)\nprint(x_test.shape, y_test.shape)","49a43636":"func_BernoulliNB(x_train,y_train)","64b508a6":"func_DecisionTreeClassifier(x_train,y_train)","a2a932ff":"func_ext_tree_cls(x_train,y_train)","06d9cfef":"func_GaussianNB(x_train,y_train)","d2f1b6cf":"func_KNeighborsClassifier(x_train,y_train,5)","e1b26039":"func_LGBMClassifier(x_train,y_train)","ab696ecb":"func_RandomForestClassifier(x_train,y_train)","0e156a82":"location.isnull().sum()","b9b512f0":"location.shape","8a237dbe":"x = location['Long']\ny = location['Lat']\n\ncolors = np.random.rand(len(location))\n\nplt.figure(figsize=(20,20))\nplt.scatter(x, y,c=colors, alpha=0.5)\nplt.show()","5b8cf827":"X = location\nX = X[~np.isnan(X)]","ddb7c2d1":"from sklearn.cluster import KMeans","2d3eabde":"def Kmeanscl(X, nclust):\n    kmeansmodel = KMeans(nclust)\n    kmeansmodel.fit(X)\n    clust_labels = kmeansmodel.predict(X)\n    cent = kmeansmodel.cluster_centers_\n    return (clust_labels, cent)","d0dd6098":"clust_labels, cent = Kmeanscl(X, 2)\nkmeans = pd.DataFrame(clust_labels)\nX.insert((X.shape[1]),'kmeans',kmeans)","5595e106":"fig = plt.figure(figsize=(20,20))\nax = fig.add_subplot(111)\nscatter = ax.scatter(X['Long'],X['Lat'],\n                     c=kmeans[0],s=50)\nax.set_title('K-Means Clustering')\nax.set_xlabel('Long')\nax.set_ylabel('Lat')\nplt.colorbar(scatter)","4070fbea":"X = location\nX = X[~np.isnan(X)]","5a69f2f7":"clust_labels, cent = Kmeanscl(X, 3)\nkmeans = pd.DataFrame(clust_labels)\nX.insert((X.shape[1]),'kmeans',kmeans)","d13fb925":"fig = plt.figure(figsize=(20,20))\nax = fig.add_subplot(111)\nscatter = ax.scatter(X['Long'],X['Lat'],\n                     c=kmeans[0],s=50)\nax.set_title('K-Means Clustering')\nax.set_xlabel('Long')\nax.set_ylabel('Lat')\nplt.colorbar(scatter)","cf11f9da":"#!conda install -c districtdatalabs yellowbrick --yes","7b56ea71":"from yellowbrick.cluster import KElbowVisualizer","3faee602":"X = location\nX = X[~np.isnan(X)]","2fcc7bf1":"KMdl=KMeans()\nvisualizer = KElbowVisualizer(KMdl, k=(4,12),locate_elbow=True)\n\nvisualizer.fit(X)        # Fit the data to the visualizer\nvisualizer.poof()  ","610f1b88":"KMdl2=KMeans()\nvisualizer2 = KElbowVisualizer(KMdl2, k=(4,12), metric='calinski_harabasz',locate_elbow=True)\nvisualizer2.fit(X)        # Fit the data to the visualizer\nvisualizer2.poof()   ","7e13758f":"ucr_prt1_shoot_crm=df[(df['Lat']>=40) & (df['Long']<=-70) &(df['UCR_PART']=='Part One') & (df['SHOOTING']==1)].fillna(0).reset_index()","eb8e1f5d":"m = folium.Map( [42.3601,-71.0589],zoom_start=13, tiles='OpenStreetMap')\nfor i in range(0,len(ucr_prt1_shoot_crm)):\n    #folium.Marker(ucr_prt1_crm.iloc[i]['Lat'], ucr_prt1_crm.iloc[i]['Long'], popup=ucr_prt1_crm.iloc[i]['OFFENSE_CODE_GROUP']).add_to(m)\n    folium.Marker([ucr_prt1_shoot_crm.iloc[i]['Lat'], ucr_prt1_shoot_crm.iloc[i]['Long']], popup=ucr_prt1_shoot_crm.iloc[i]['OFFENSE_CODE_GROUP']).add_to(m)\n    \nm","45b14956":"***Define our dependent variable--> Y***","e3092c5c":"***DISTRICT Values are being assigned numbers - Each district will be identified by a number***","505f08f7":"***Month wise crime counts over the years***","08bc5f29":"***Month wise Shootings over the years***","e6f0f01a":"***Call our K means model by setting the number of clusters as 2 and add the kmeans predicted cluster value as kmeans column in our X***","f06ec4af":"***Bernoulli classfier function to train, predict and compare with actual values***","12f48a1c":"***Plot the clusters***","bd6770e8":"***Day wise Shooting occurences over the years***","93204ab7":"***Classifying UCR_PART variable***","b86a0607":"**A function to create lablel and data list for chart**","7a361647":"***Group count of Incidents by day of the week***","48eeaf66":"***Check our dependent variable and assign unique numbers to each category or group***","3e38fd52":"***Top Offense code groups***","17cb0e66":"***Import sklearn libraries***","4b3b25fe":"***Check if there is any null value in our dataframe***","2dfddf85":"***List only the needed columns and remove the rest***","a62700dc":"***Plot UCR Part wise Shootings over the years***","6a89e0be":"***Applying LGBM classifier and the mean, max, min of the f1 scores along with actual f1 scores array is returned***","007f45e2":"***Define function to get mean, max and min that will be used to analyze the f1 score of different classifier algorithms***","49c68b4f":"***Shooting occurences count and their percentage in the overall crime***","f2015e7d":"***Crime count on Day & Night***","ded53b5d":"***Convert all the variables to the desired number format as we did before***","b7028b9b":"***Locate UCR_PART = 'Part One' Shooting Crimes alone around the city***","92a8c123":"***Offense Code wise number of incidents over the years***","c4f8c3ff":"***Day wise crime count over the years***","50690831":"***Difference here is that the timings curve is set as False so that is not plotted here and the metric to calculate the score is different here***","3ad8b981":"***After dropping we could see that there is no null value in our data frame***","00d3305f":"***Decision tree classifier function to train, predict and compare with actual values***","8bd35674":"***Group Crime types by Street***","231b3b35":"***If lightgbm is not installed use the following command to get it installed - !conda install -c conda-forge lightgbm --yes***","bacba43e":"***Gaussian classifier function to train, predict and compare with actual values***","86648f0d":"***Create a new category in the dataframe to indicate if the crime happened during Day or Night***","4ff07ce4":"***Generate test and train datasets using train_test_split module of sklearn library***","1c097ca1":"***Define K means fit and predict function that takes X and number of clusters as input***","f309855f":"***Create a Dataframe for 2nd model with the following columns***","cd2a1fee":"***Try to see if we can classify the Offense code group by considering other columns independent variables' behaviour\/ pattern***","2c982f6c":"***LGBM classifier function to train, predict and compare with actual values***","7faab04b":"***Define our x and y then split our data set into test and train sets***","1dab621b":"***Trying to cluster the locations of the crime***","255fe46f":"***We take the details on Day time for each of the 12 months from the above mentioned website and use the same to tag the said hours as Day***","1e760200":"*If folium is not installed please use the following code to install the same* - ***!conda install -c conda-forge folium***","6f85b02f":"***As we did before we are trying KNN Classifier with different K values but the accuracy score used below is not a great representation of accuracy for data sets where imbalanced class distribution exists like in this case***","f0b84f71":"***Install yellowbrick library to visualise KElbow to choose the best k value***","a6c651a5":"***Apply all the classifiers like we did before***","0e82e97b":"***Applying KNN classifier and the mean, max, min of the f1 scores along with actual f1 scores array is returned***","49ef377b":"***As MONTH column values are already numbers we dont have to alter them***","1c1fea0a":"***Import f1-score metric***","7b1d4ae7":"***P.S. joinplot option in seaborn library creates its own figure and axes. Hence it does not have an 'ax' argument to allow us to add subplots***","db733530":"***The result above could be achieved using a single line of code as mentioned below as well***","9eabbaf1":"***Define Pie plot function***","ae0962f4":"***Group by District and Year and plot the number of incidents***","68805bfd":"***Exploring all the crime locations based on longitude and Latitude data and see if it is concentrated somewhere or if there is a pattern visible***","8415e53f":"***Y - OFFENSE_CODE_GROUP;X - 'DISTRICT','REPORTING_AREA','MONTH','DAY_OF_WEEK', 'HOUR','Lat','Long', 'OFFENSE_CODE_GROUP','Day','Night'***","98667217":"***Y - UCR_PART***\n\n***X - DISTRICT, REPORTING_AREA, MONTH, DAY_OF_WEEK, HOUR, LATITUDE, LONGITUDE***","6394fbe7":"***May be we can try using the K value with highest accuracy score above and see if f1 score improves as well***","a41653f6":"***DISTRICT value is mapped to numbers like we did in the previous model***","a40a46e4":"***Applying Decision Tree classifier and the mean, max, min of the f1 scores along with actual f1 scores array is returned***","6e6e93cd":"***Here we are passing the n value as 5 and the f1 score is shown below***","e2538126":"***We are going to consider only top 15 offenses data for our model to minimize the noise***","6114ef12":"***Apply KMeans and predict the best k value***","fc15ca74":"***LAT and LONG values are also in the expected format already***","ce584bc9":"***Define our independent variable\/s --> X***","b1fd5883":"***Start applying the classifiers***","d2987c29":"***As HOUR column values are already numbers we dont have to alter them***","d8ce69fe":"***Plotting Latitude and Longitudes of shooting crime locations in different kinds of joint plots to see if there is a pattern or concentration of crimes pertaining to a specific location***","b92c08d0":"***Random Forest classifier function to train, predict and compare with actual values***","eede44a0":"***Split our data into train and test sets***","ae7449c9":"***Y- DISTRICT\n\nX - OFFENSE_CODE_GROUP, Month, Day of week, Hour, Day, Night***","f196473a":"***Link to determine Day or Night based on Hour in Boston - https:\/\/www.timeanddate.com\/sun\/usa\/boston ***","19c7b87f":"***Assign numbers to REPORTING_AREA column values or convert the string values to numerics***","663603c3":"***Set up our X variable on which clusters are to be determined***","b07f0e9e":"***Plot our location attributes as a scatter plot***","a54250f0":"***Define bar chart function***","048eb666":"***We first standardise and normalise our data like we did in our previous models***","18443289":"***Assign Day number to DAY_OF_WEEK Column values with the week starting from Monday i.e. Monday is assigned the value 1 and so on ***","bd92b810":"***Year wise crime count***","201d8c7c":"***Applying External Tree classifier and the mean, max, min of the f1 scores along with actual f1 scores array is returned***","859d89fc":"***Drop na and nan values from our dataframe***","7be78fa2":"***We are going to convert the available column values into numbers***","e1c00d7c":"***For KNN Classifier K value needs to be passed, if not, default value - 5 is taken as K value***","8096ea85":"***Place the top offense code groups in a list***","d26b486e":"***Applying BernoulliNB classifier and the mean, max, min of the f1 scores along with actual f1 scores array is returned***","c77043e8":"***Highest number of incidents for a particular crime occured in each year***","9e9ec086":"***Import KMeans clustering module from sklearn library***","811448ea":"***Then we Night using the logic that whenever Day==0, Night = 1***","6c79b486":"***Create another model to see how well we can classify the data ***","252871e5":"***Import Classification modules from sklearn***","36fb8deb":"***Now let us see, if the score changes with the K value but here we are considering Accuracy metric instead of f1 score and calculate the score dynamically for each K value and we can see the same in a graph to choose the K value that gives us a better score***","d651f1d0":"***Declare our dependent and independent variables***","f2e9a33a":"***Function to drop Nan values in the input variables***","440e1809":"***Hour wise crime by years***","3bf6db69":"***Applying GaussianNB classifier and the mean, max, min of the f1 scores along with actual f1 scores array is returned***","f4da4fb9":"***Applying Random Forest classifier and the mean, max, min of the f1 scores along with actual f1 scores array is returned***","04c3e958":"***K Neighbor classifier function to train, predict and compare with actual values***","f375538d":"***Now we try the same thing with 3 clusters***","17ba9366":"***Shooting occurences over the years***","a90367cd":"***Hour wise Crime count over the years***","57e759a5":"***Fill nan in our model with 0***","c31ed693":"***Fill na in Shooting column and change it to Numerical category by mapping 0 values to 0 and 'Y' values to 1***","9f9c1f98":"***Extra tree classifier function to train, predict and compare with actual values***","422d4293":"***Assign numbers to DAY_OF_WEEK column values with the week starting from Monday***","36235a14":"***District wise Shooting occurences over the years - Each district is highlighted in a different color using cm.spectral option!\nTwo different ways to achieve the same output is also shown here***","5334f815":"***Day when most of the crimes occurred***"}}