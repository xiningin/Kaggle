{"cell_type":{"d15b88fc":"code","a997ba2f":"code","ffc00f34":"code","a5121687":"code","e740d456":"code","4207b2c5":"code","0a962b0f":"code","bdd50f51":"code","c01af149":"code","7e4eedf0":"code","04be27c9":"code","e1ba86ed":"code","81a81b11":"code","e3663ef4":"code","3a03b1b6":"code","ef2df366":"code","1713abad":"code","e04eb263":"code","e9394470":"code","84c15bc7":"code","301abc82":"code","a8f65748":"code","0f1185de":"code","262305c4":"code","4f6aa525":"code","25168b52":"code","a9af42f9":"code","c34fc0be":"code","70857d1f":"code","4369c57d":"markdown"},"source":{"d15b88fc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n%matplotlib inline\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n%matplotlib inline\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a997ba2f":"train=pd.read_csv('..\/input\/digit-recognizer\/train.csv')","ffc00f34":"train","a5121687":"test=pd.read_csv('..\/input\/digit-recognizer\/test.csv')","e740d456":"\n##required for image reprresention else usually you get a Nonetype error\nX = (train.iloc[:,1:].values).astype('float32')\ny = train.iloc[:,0].values.astype('int32')","4207b2c5":"test1=test.copy()\ntest1 = test1.values.astype('float32')","0a962b0f":"#to make the values to be represented neatly and reuired to work with keras API\nX = X.reshape(X.shape[0], 28, 28,1)\ntest1 = test1.reshape(test1.shape[0], 28, 28,1)\n","bdd50f51":"for i in range(10, 13):\n    plt.subplot(330 + (i+1))#gives the dimensions of the plot area\n    plt.imshow(X[i], cmap=plt.get_cmap('gray'))#considering gray area\n    plt.title(y[i])","c01af149":"plt.imshow(X[10], cmap=plt.get_cmap('gray'))","7e4eedf0":"X1=train.drop(['label'],axis=1)\ny1=train['label']","04be27c9":"X1","e1ba86ed":"y1","81a81b11":"##to apply keras we normalize the data by diving by 255 as rgb values range from 0-255\nX1=X1\/255\n\n","e3663ef4":"X1.head","3a03b1b6":"y1","ef2df366":"from keras.utils import to_categorical\ny1=to_categorical(y1,10)#considering it to be categorised into 10 diff as numbers from 0-9\ny1\n","1713abad":"#modelling:\n\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.layers.experimental import preprocessing\nX_train,X_test,y_train,y_test=train_test_split(X1,y1,test_size=0.3,random_state=50)","e04eb263":"X1.shape","e9394470":"early_stopping = keras.callbacks.EarlyStopping(\n    patience=5,\n    min_delta=0.001,\n    restore_best_weights=True,\n)","84c15bc7":"model=keras.Sequential([\n    layers.Dense(64,activation='relu'),\n    layers.BatchNormalization(),\n    layers.Dropout(0.3),\n    layers.Dense(256,activation='relu'),\n    layers.BatchNormalization(),\n    layers.Dropout(0.3),\n    layers.Dense(512,activation='relu'),\n    layers.Dense(10,activation='softmax')\n    \n    \n])","301abc82":"## we use sparse as multiclass classification and metrics is taken by the model-\n##the one which is best suited\nmodel.compile(\noptimizer='adam',\nloss='categorical_crossentropy',\nmetrics=['accuracy'],\n)","a8f65748":"model.fit(\n    X_train, y_train,\n    validation_data=(X_test, y_test),\n    batch_size=128,\n    epochs=200,\n    callbacks=[early_stopping],\n)","0f1185de":"score=model.evaluate(X_test,y_test)\nscore[1]","262305c4":"test=pd.read_csv('..\/input\/digit-recognizer\/test.csv')","4f6aa525":"test.shape","25168b52":"predictions = model.predict(test)\n\nprint(predictions)\n\n#submissions=pd.DataFrame({\"ImageId\": list(range(1,len(predictions_final)+1)),\n                         #\"Label\": predictions_final})\n#submissions.to_csv(\"submission.csv\", index=False, header=True)\n#print(\"Finished uploading submission file to csv\")","a9af42f9":"Label=np.argmax(predictions,axis=1)\nImageId=np.arange(1,28001)\nsubs=pd.DataFrame(data={\"ImageId\":ImageId,\"Label\":Label})","c34fc0be":"subs","70857d1f":"subs.to_csv('sub1.csv', index=False)","4369c57d":"**Data representation****"}}