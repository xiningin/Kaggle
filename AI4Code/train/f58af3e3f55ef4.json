{"cell_type":{"220b4047":"code","8de52464":"code","f5c9e517":"code","62f3c314":"code","f15d52e7":"code","e203ebff":"code","6f68ff89":"code","9657f159":"code","c3b9ece4":"code","c4dcade3":"code","88fc863a":"code","472bdc83":"code","c652c100":"code","67ae914e":"code","8ab7b333":"code","ae4e2539":"code","282767b9":"markdown","7f4f03db":"markdown","48b46b85":"markdown","c1de81d4":"markdown","96eda8bb":"markdown","3b01dd1e":"markdown","3eb2ebee":"markdown","66c7af24":"markdown","2d025186":"markdown","20eb6787":"markdown","c881f46f":"markdown","59688ca9":"markdown","8f6409a6":"markdown","deabc847":"markdown","6707b96f":"markdown","a14cf76d":"markdown","169b182b":"markdown","cbf8a7a0":"markdown"},"source":{"220b4047":"import os\nimport pandas as pd \nimport plotly.express as px\nfrom tqdm import tqdm","8de52464":"fold0 = pd.read_csv('..\/input\/cv-folds\/cv_fold_0.csv') \nfold1 = pd.read_csv('..\/input\/cv-folds\/cv_fold_1.csv')\nfold2 = pd.read_csv('..\/input\/cv-folds\/cv_fold_2.csv')\nfold3 = pd.read_csv('..\/input\/cv-folds\/cv_fold_3.csv')\nfold4 = pd.read_csv('..\/input\/cv-folds\/cv_fold_4.csv')\nfolds = [fold0, fold1, fold2, fold3, fold4]","f5c9e517":"values=[]\nfor fold in folds:\n    tamil=0\n    hindi=0\n    for _,row in tqdm(fold.iterrows()):\n        if row['language']=='tamil':\n            tamil+=1\n        else:\n            hindi+=1\n    values.append([tamil,hindi])","62f3c314":"values","f15d52e7":"import plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\nlabels = ['Tamil','Hindi']\n\n\n# Create subplots: use 'domain' type for Pie subplot\nfig = make_subplots(rows=1, cols=5, specs=[[{'type':'domain'}, {'type':'domain'}, {'type':'domain'}, {'type':'domain'}, {'type':'domain'}]], subplot_titles=(\"fold 0\", \"fold 1\", \"fold 2\", \"fold 3\", 'fold 4'))\nfig.add_trace(go.Pie(labels=labels, values=values[0], name=\"fold 0\"),\n              1, 1)\nfig.add_trace(go.Pie(labels=labels, values=values[1], name=\"fold 1\"),\n              1, 2)\nfig.add_trace(go.Pie(labels=labels, values=values[2], name=\"fold 2\"),\n              1, 3)\nfig.add_trace(go.Pie(labels=labels, values=values[3], name=\"fold 3\"),\n              1, 4)\nfig.add_trace(go.Pie(labels=labels, values=values[4], name=\"fold 4\"),\n              1, 5)\n\n# Use `hole` to create a donut-like pie chart\nfig.update_traces(hole=.7, hoverinfo=\"label+percent+name\")\n\nfig.update_layout(\n    title_text=\"% Tamil vs % Hindi for each fold\", title_x=0.5)\nfig.show()","e203ebff":"values2=[]\nfor fold in folds:\n    less=0\n    more=0\n    for _,row in tqdm(fold.iterrows()):\n        if len(row['answer_text'])>30:\n            more+=1\n        else:\n            less+=1\n    values2.append([more,less])","6f68ff89":"import plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\nlabels = ['>30','<=30']\n\n\n# Create subplots: use 'domain' type for Pie subplot\nfig = make_subplots(rows=1, cols=5, specs=[[{'type':'domain'}, {'type':'domain'}, {'type':'domain'}, {'type':'domain'}, {'type':'domain'}]], subplot_titles=(\"fold 0\", \"fold 1\", \"fold 2\", \"fold 3\", 'fold 4'))\nfig.add_trace(go.Pie(labels=labels, values=values2[0], name=\"GHG Emissions\"),\n              1, 1)\nfig.add_trace(go.Pie(labels=labels, values=values2[1], name=\"CO2 Emissions\"),\n              1, 2)\nfig.add_trace(go.Pie(labels=labels, values=values2[2], name=\"CO2 Emissions\"),\n              1, 3)\nfig.add_trace(go.Pie(labels=labels, values=values2[3], name=\"CO2 Emissions\"),\n              1, 4)\nfig.add_trace(go.Pie(labels=labels, values=values2[4], name=\"CO2 Emissions\"),\n              1, 5)\n\n# Use `hole` to create a donut-like pie chart\nfig.update_traces(hole=.7, hoverinfo=\"label+percent+name\")\n\nfig.update_layout(\n    title_text=\"'answer_text' Lengths\", title_x=0.5,\n    # Add annotations in the center of the donut pies.\n    annotations=[dict(text='fold 0',x=0.05, font_size=20, showarrow=False),\n                 dict(text='fold 1',x=0.26, font_size=20, showarrow=False),\n                 dict(text='fold 2',x=0.5, font_size=20, showarrow=False),\n                 dict(text='fold 3',x=0.74, font_size=20, showarrow=False),\n                 dict(text='fold 4',x=0.95, font_size=20, showarrow=False)])\nfig.show()","9657f159":"values=[]\nfor fold in folds:\n    lens=[]\n    for _,row in tqdm(fold.iterrows()):\n        lens.append(len(row['answer_text']))\n         \n    values.append(lens)","c3b9ece4":"import numpy as np\nc = ['hsl('+str(h)+',50%'+',50%)' for h in np.linspace(0, 360, 5)]\n\nfig = go.Figure()\nfig.add_trace(go.Box(y=values[0], name = 'fold 0',\n              marker_color = c[0]))\nfig.add_trace(go.Box(y=values[1], name = 'fold 1',\n              marker_color = c[1]))\nfig.add_trace(go.Box(y=values[2], name = 'fold 2',\n              marker_color = c[2]))\nfig.add_trace(go.Box(y=values[3], name = 'fold 3',\n              marker_color = c[3]))\nfig.add_trace(go.Box(y=values[4], name = 'fold 4',\n              marker_color = c[4]))\n\nfig.update_layout(\n    title_text=\"answer_text Lengths (Box Plot)\", title_x=0.5,)\n\nfig.show()","c4dcade3":"scores_1 = [0.6337764253683537, 0.6212957259481922, 0.7170776613403889, 0.69876961603419, 0.706597669097669]\nlb_scores_1 = [0.720, 0.737, 0.761, 0.760, 0.743]\n\nfolds_names = ['fold 0', 'fold 1', 'fold 2', 'fold 3', 'fold 4']\n\nfig = go.Figure(data=[\n    go.Bar(x=folds_names, y=scores_1, name='CV Score', marker_color='salmon'),\n    go.Bar(x=folds_names, y=lb_scores_1, name='LB Score', marker_color='indianred')\n])\nfor data in fig.data:\n    data[\"width\"] = 0.25\n\nfig.update_yaxes(range=[0, 1])\nfig.update_layout(title_text=\"CV and LB Scores for each fold (public model)\", title_x=0.5,)\n\nfig.show()","88fc863a":"scores_2 = [0.6600509956671002, 0.6738531212185921, 0.7170776613403889, 0.69876961603419, 0.706597669097669]\n\nfolds_names = ['fold 0', 'fold 1', 'fold 2', 'fold 3', 'fold 4']\n\nfig = px.bar(x=folds_names, y=scores_2, \n             labels={'x':'fold','y':'Score'}, width = 1000, height = 600)\nfig = px.bar(x=folds_names, y=scores_2, \n             labels={'x':'fold','y':'Score'}, width = 1000, height = 600)\n\nfor data in fig.data:\n    data[\"width\"] = 0.3\n\nfig.update_yaxes(range=[0, 1])\nfig.update_layout(title_text=\"CV Scores for each fold (model-2)\", title_x=0.5,barmode='group')\nfig.update_traces(marker_color='salmon')\nfig.show()","472bdc83":"scores_3 = [0.68865577621183, 0.6638506299380739, 0.7201259876147768, 0.7022838895036204, 0.6932807807807808]\n\nfolds_names = ['fold 0', 'fold 1', 'fold 2', 'fold 3', 'fold 4']\n\nfig = px.bar(x=folds_names, y=scores_3, \n             labels={'x':'fold','y':'Score'}, width = 1000, height = 600)\nfor data in fig.data:\n    data[\"width\"] = 0.3\n\nfig.update_yaxes(range=[0, 1])\nfig.update_layout(title_text=\"CV Scores for each fold (model-3)\", title_x=0.5,)\nfig.update_traces(marker_color='salmon')\nfig.show()","c652c100":"scores_4 = [0.7766629297458894, 0.6212957259481922, 0.6281327852516194, 0.67546711509716, 0.7262144992526158]\n\nfolds_names = ['fold 0', 'fold 1', 'fold 2', 'fold 3', 'fold 4']\n\nfig = px.bar(x=folds_names, y=scores_4, \n             labels={'x':'fold','y':'Score'}, width = 1000, height = 600)\nfor data in fig.data:\n    data[\"width\"] = 0.3\n\nfig.update_yaxes(range=[0, 1])\nfig.update_layout(title_text=\"CV Scores for each fold (model-4)\", title_x=0.5,)\nfig.update_traces(marker_color='salmon')\nfig.show()","67ae914e":"scores_5 = [0.7057788810591502, 0.7244207772795216, 0.7250186846038864, 0.7249119154388213, 0.7219223788169976]\n\nfolds_names = ['fold 0', 'fold 1', 'fold 2', 'fold 3', 'fold 4']\n\nfig = px.bar(x=folds_names, y=scores_5, \n             labels={'x':'fold','y':'Score'}, width = 1000, height = 600)\nfor data in fig.data:\n    data[\"width\"] = 0.3\n\nfig.update_yaxes(range=[0, 1])\nfig.update_layout(title_text=\"CV Scores for each fold (model-5)\", title_x=0.5,)\nfig.update_traces(marker_color='salmon')\nfig.show()","8ab7b333":"fig = go.Figure()\nfig.add_trace(go.Scatter(x=folds_names, y=scores_1,\n                    mode='lines+markers',\n                    name='5-folds-roberta'))\nfig.add_trace(go.Scatter(x=folds_names, y=scores_2,\n                    mode='lines+markers',\n                    name='Private-Model-2'))\nfig.add_trace(go.Scatter(x=folds_names, y=scores_3,\n                    mode='lines+markers', \n                    name='Private-Model-3'))\nfig.add_trace(go.Scatter(x=folds_names, y=scores_4,\n                    mode='lines+markers', \n                    name='Private-Model-4'))\n\nfig.add_trace(go.Scatter(x=folds_names, y=scores_5,\n                    mode='lines+markers', \n                    name='Private-Model-5'))\n\n\nfig.update_layout(title_text=\"CV Scores for each fold\", title_x=0.5,)\n\n\nfig.show()","ae4e2539":"fig = go.Figure()\nfig.add_trace(go.Scatter(x=folds_names, y=lb_scores_1,\n                    mode='lines+markers',\n                    name='5-folds-roberta'))\n# fig.add_trace(go.Scatter(x=folds_names, y=scores_2,\n#                     mode='lines+markers',\n#                     name='Private-Model-2'))\n# fig.add_trace(go.Scatter(x=folds_names, y=scores_3,\n#                     mode='lines+markers', \n#                     name='Private-Model-3'))\n# fig.add_trace(go.Scatter(x=folds_names, y=scores_4,\n#                     mode='lines+markers', \n#                     name='Private-Model-4'))\n\nfig.update_layout(title_text=\"LB Scores for each fold\", title_x=0.5,)\n\n\nfig.show()","282767b9":"# <strong>Trained Models:<\/strong>\n\nI have trained 4 different models with some different parameters:\nOut of which one model is public and has a LB score of 0.792\nThe notebook links to the training kernels are:\n<ul>\n    <li>Training for 2 epochs : <a href=\"https:\/\/www.kaggle.com\/kishalmandal\/chaii-fit-2-epochs-mlqa-xquad-chaii\/\">chaii | FIT - 2 epochs | mlqa, xquad, chaii<\/a> <\/li>\n    <li>Training for 7 epochs with tamil_xquad: <a href=\"https:\/\/www.kaggle.com\/kishalmandal\/chaii-fit-7-epochs-extra-tamil-data\/\">chaii | FIT - 7 epochs | Extra Tamil Data<\/a> <\/li>\n<\/ul>\n\n## <strong>There are 4 models with their cv scores and comparison.<\/strong> \n<ol>\n    <li> Compared the CV results of different folds of a model.<\/li>\n    <li> Compared CV scores of different models w.r.t. their folds.<\/li>\n    <li> Compared the LB score of different folds of the public model (0.792). <\/li>\n    <li> Will compare the LB scores of folds of the other models. <\/li>\n<\/ol>\n\n## Trying to find out some pattern and choose the best models\n","7f4f03db":"# <strong>Folds Exploration<\/strong>","48b46b85":"<hr>\n\n# Comapring the all models based on folds","c1de81d4":"<hr>\n\n## Experimental Results\n\nThe cross validation scores were calculated on the chaii competition dataset, whereas the model was trained using mlqa and xquad data. The graphs shows the cv-scores for each fold.","96eda8bb":"#### Conclusion :\nRatio of <strong>Tamil : Hindi<\/strong> language is equally divided among all the folds. This information might later help us to choose different models for the final ensemble.","3b01dd1e":"#### Conclusion from the box plots\nUpper fence of the box plot shows the value of around 30. So taking max answer length =30 during inference\n\n<hr>","3eb2ebee":"### Other Notebooks::\n\n<ul>  \n    <li>Using the datasets : chaii, mlqa, squad, tamil_xquad <\/li>\n    <li>EDA and data cleaning : <a href=\"https:\/\/www.kaggle.com\/kishalmandal\/some-eda-and-cleaning-chaii\">some eda and cleaning chaii<\/a> <\/li>\n    <li>Training for 2 epochs : <a href=\"https:\/\/www.kaggle.com\/kishalmandal\/chaii-fit-2-epochs-mlqa-xquad-chaii\/\">chaii | FIT - 2 epochs | mlqa, xquad, chaii<\/a> <\/li>\n    <li>Training for 7 epochs with tamil_xquad: <a href=\"https:\/\/www.kaggle.com\/kishalmandal\/chaii-fit-7-epochs-extra-tamil-data\/\">chaii | FIT - 7 epochs | Extra Tamil Data<\/a> <\/li>\n    <li>Inferencing from 5 folds | fold-0 and fold-1 (7-epochs) | fold-2, fold-3 and fold-4 (2-epochs)| based on cross validation scores and a little bit of experimentation \ud83d\ude1c: <a href=\"https:\/\/www.kaggle.com\/kishalmandal\/5-epochs-infer-combined-model-0-792\/\">5 epochs | INFER | combined model (0.792)<\/a><\/li>\n    <li>Tried to used weighted average \ud83d\ude05 using optuna to optimise weights: <a href=\"https:\/\/www.kaggle.com\/kishalmandal\/using-optuna-to-optimise-weighted-average\/\">\ud83d\udd25 Using OPTUNA to optimise weighted average \ud83d\udd25<\/a><\/li>\n    \n<\/ul>\n\n### References : \n\n<ul> \n    <li>For training: <a href=\"https:\/\/www.kaggle.com\/rhtsingh\/chaii-qa-5-fold-xlmroberta-torch-fit\">chaii QA - 5 Fold XLMRoberta Torch | FIT<\/a> by <a href=\"https:\/\/www.kaggle.com\/rhtsingh\">torch<\/a><\/li>\n    <li>For Inference: <a href=\"https:\/\/www.kaggle.com\/rhtsingh\/chaii-qa-5-fold-xlmroberta-torch-infer\">chaii QA - 5 Fold XLMRoberta Torch | Infer<\/a> by <a href=\"https:\/\/www.kaggle.com\/rhtsingh\">torch<\/a><\/li>\n    <li>For post processing outputs: <a href=\"https:\/\/www.kaggle.com\/nbroad\/chaii-qa-torch-5-fold-with-post-processing-765\">chaii QA-Torch 5 fold with post-processing (.765)<\/a> by <a href=\"https:\/\/www.kaggle.com\/nbroad\">Nicholas Broad \ud83d\udfe2<\/a><\/li>\n<\/ul>\n","66c7af24":"<hr>\n\n# Will be updating with LB scores for each fold and each model \ud83d\ude42","2d025186":"#### Note: blue line and the red lines overlap. Since 3folds of the 5foldsroberta are taken from that model","20eb6787":"# \u2764\ufe0f Upvote if you like \u2764\ufe0f\n#### It will really motivate me towards making more kernels","c881f46f":"## 1. 5 folds roberta - public highest scoring model (0.792)\n#### Link : <a href='https:\/\/www.kaggle.com\/kishalmandal\/5foldsroberta'>5 folds roberta<\/a>\n\nfold 0: trained with 7 epochs <br>\nfold 1: trained with 7 epochs <br>\nfold 2: trained with 2 epochs <br>\nfold 3: trained with 2 epochs <br>\nfold 4: trained with 2 epochs ","59688ca9":"# 5. Private-Model-4 (2epochs seed-3)","8f6409a6":"#### CV and LB Scores for each folds:","deabc847":"#### NOTE: Will update soon","6707b96f":"## 3. Private-Model-2 (2epochs seed-2)","a14cf76d":"## 4. Private-Model-3 (7epochs with extra tamil data)","169b182b":"## 2. Private-Model-1 (2epochs seed-1)","cbf8a7a0":"#### Conclusion: \nMaximum answer lengths are <=30. But to be more confident, we will plot box plots to see the IQR."}}