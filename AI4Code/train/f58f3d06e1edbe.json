{"cell_type":{"93cdbd65":"code","eee6adda":"code","ede920ee":"code","c3d350ce":"code","dfbf8046":"code","8f27b5cd":"code","cf19c369":"code","e48f2509":"code","558a1475":"code","06a841af":"code","223c2d53":"code","d4cf1e3d":"markdown","514e355b":"markdown"},"source":{"93cdbd65":"import os\nimport glob\nimport cv2\nimport numpy as np \nimport pandas as pd \n\nimport matplotlib.pyplot as plt\n\nfrom scipy import stats\n\n# Load plotly related packages\nfrom plotly.offline import init_notebook_mode, iplot, plot\nimport plotly as py\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\n%matplotlib inline\n%config InlineBackend.figure_format = 'retina'","eee6adda":"# Read train csv and human-radable categories\ntrain_df = pd.read_csv('..\/input\/landmark-retrieval-2020\/train.csv')\ntrain_df.head()","ede920ee":"# Download csn and get classes\nurl = 'https:\/\/s3.amazonaws.com\/google-landmark\/metadata\/train_label_to_category.csv'\nclasses = pd.read_csv(url, index_col = 'landmark_id', encoding='latin', engine='python') #['category'].to_dict()\nclasses['classes'] = classes['category'].apply(lambda x : x.replace('http:\/\/commons.wikimedia.org\/wiki\/Category:', ''))\nclasses.head()","c3d350ce":"class_cnt = pd.DataFrame(train_df['landmark_id'].value_counts(False))\nclass_cnt.rename(columns={'landmark_id':'count'}, inplace=True)\nclass_cnt.head()","dfbf8046":"classNameCnt = class_cnt.merge(classes, left_index=True, right_index=True)\nclassNameCnt.head(10)","8f27b5cd":"# Select top 20 classes\n\ntop20 = classNameCnt.head(20)\n\ntrace = go.Bar(\n    x=top20['classes'],\n    y=top20['count'],\n    marker=dict(color = 'rgba(255, 17, 25, 0.8)')\n)\n\ndata = [trace]\nlayout = go.Layout(title='Top 20 class names', \n                   yaxis = dict(title = '# of images in train set')\n                  )\n\nfig = go.Figure(data=data, layout=layout)\nfig['layout']['xaxis'].update(dict(title = 'Classes', \n                                   tickfont = dict(size = 12)))\nfig = go.Figure(data = data, layout = layout)\niplot(fig)\n\n#write image to file\n#fig.write_image('top20classes.jpeg')","cf19c369":"train_list = glob.glob('..\/input\/landmark-retrieval-2020\/train\/*\/*\/*\/*')\ntest_list = glob.glob('..\/input\/landmark-retrieval-2020\/test\/*\/*\/*\/*')\nindex_list = glob.glob('..\/input\/landmark-retrieval-2020\/index\/*\/*\/*\/*')\n\nprint(\"Train images: \", len(train_list) )\nprint(\"Test images: \", len(test_list))\nprint(\"Index images: \", len(index_list))","e48f2509":"# Function to display 12 images \n\ndef display_sample(sample_df):\n    plt.rcParams[\"axes.grid\"] = False\n    f, axarr = plt.subplots(4, 3, figsize=(24, 22))\n\n    curr_row = 0\n    for i in range(12):\n        imageFile = sample.iloc[i]['id']\n        path = \"..\/input\/landmark-retrieval-2020\/train\/\"+imageFile[0]+\"\/\"+imageFile[1]+\"\/\"+imageFile[2]+\"\/\"+imageFile+'.jpg'\n        example = cv2.imread(path)\n        example = example[:,:,::-1]\n\n        col = i%4\n        axarr[col, curr_row].imshow(example)\n        #cv2.imwrite(imageFile + '.jpg', example)\n        if col == 3:\n            curr_row += 1","558a1475":"# Lets check some random images from the largest class\n\nsample = train_df[train_df['landmark_id'] == 138982].sample(12) #.reset_index(inplace=True)\ndisplay_sample(sample)","06a841af":"# Lets check some random images from the largest class (Corktown Toronto)\n\nsample = train_df[train_df['landmark_id'] == 126637].sample(12) #.reset_index(inplace=True)\ndisplay_sample(sample)","223c2d53":"# Lets check some random images from the largest class (Noraduz Cemetry)\n\nsample = train_df[train_df['landmark_id'] == 20409].sample(12) #.reset_index(inplace=True)\ndisplay_sample(sample)","d4cf1e3d":"Lets check some sample images from the different classes. We will check for the top 3 classes, viz:\n\n1. Media_contributed_by_the_ETH, Bibliothek\n2. Corktown, Toronto\n3. Noraduz Cemetery","514e355b":"We use plotly to perform some basic EDA on the classes \n\nThen we check some sample images from the top 3 classes and start to wonder what are the media contributed by ETH (Zurich) ! \n\n\nInspiration:\n\nhttps:\/\/www.kaggle.com\/seriousran\/google-landmark-retrieval-2020-eda\/notebook\n\nhttps:\/\/www.kaggle.com\/sudeepshouche\/identify-landmark-name-from-landmark-id\n"}}