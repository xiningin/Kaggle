{"cell_type":{"db1bb293":"code","19050e14":"code","bf9ffd71":"code","07d64ffe":"code","0d536716":"code","5f491f16":"code","2cfb9fec":"code","fa7c11ab":"code","f15480b4":"code","3ee0af76":"code","c94acfda":"code","8bbc3a6c":"code","b8a49310":"code","2ca32996":"code","b2a385bd":"code","19bc7fc5":"code","827962d9":"code","89975e8f":"markdown","a51e70e2":"markdown","0899c5f5":"markdown","0c33b7f1":"markdown","0594b789":"markdown","7408f563":"markdown","c941a6b9":"markdown","8a496044":"markdown","3c70497e":"markdown","e57c8a26":"markdown","33494429":"markdown","524c4a7f":"markdown","ebc32efc":"markdown","ef9cd126":"markdown","1a6256c3":"markdown","f88f117b":"markdown","53df5a36":"markdown","5fca416c":"markdown"},"source":{"db1bb293":"import tensorflow as tf\nimport pandas as pd\nfrom kaggle_datasets import KaggleDatasets\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom tensorflow.keras import applications","19050e14":"# Detect hardware, return appropriate distribution strategy\ntry:\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()  # TPU detection. No parameters necessary if TPU_NAME environment variable is set. On Kaggle this is always the case.\n    print('Running on TPU ', tpu.master())\nexcept ValueError:\n    tpu = None\n\nif tpu:\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\nelse:\n    strategy = tf.distribute.get_strategy() # default distribution strategy in Tensorflow. Works on CPU and single GPU.\n\nprint(\"REPLICAS: \", strategy.num_replicas_in_sync)","bf9ffd71":"IMAGE_SIZE = [192, 192] # at this size, a GPU will run out of memory. Use the TPU\nEPOCHS = 100\nBATCH_SIZE = 16 * strategy.num_replicas_in_sync\n\nNUM_TRAINING_IMAGES = 12753\nNUM_TEST_IMAGES = 7382\nSTEPS_PER_EPOCH = NUM_TRAINING_IMAGES \/\/ BATCH_SIZE\nGCS_DS_PATH = KaggleDatasets().get_gcs_path() # you can list the bucket with \"!gsutil ls $GCS_DS_PATH\"\nprint(GCS_DS_PATH)","07d64ffe":"def decode_image(image_data):\n    image = tf.image.decode_jpeg(image_data, channels=3)\n    image = tf.cast(image, tf.float32) \/ 255.0  # convert image to floats in [0, 1] range\n    image = tf.reshape(image, [*IMAGE_SIZE, 3]) # explicit size needed for TPU\n    return image\n\ndef read_labeled_tfrecord(example):\n    LABELED_TFREC_FORMAT = {\n        \"image\": tf.io.FixedLenFeature([], tf.string), # tf.string means bytestring\n        \"class\": tf.io.FixedLenFeature([], tf.int64),  # shape [] means single element\n    }\n    example = tf.io.parse_single_example(example, LABELED_TFREC_FORMAT)\n    image = decode_image(example['image'])\n    label = tf.cast(example['class'], tf.int32)\n    return image, label # returns a dataset of (image, label) pairs\n\ndef read_unlabeled_tfrecord(example):\n    UNLABELED_TFREC_FORMAT = {\n        \"image\": tf.io.FixedLenFeature([], tf.string), # tf.string means bytestring\n        \"id\": tf.io.FixedLenFeature([], tf.string),  # shape [] means single element\n        # class is missing, this competitions's challenge is to predict flower classes for the test dataset\n    }\n    example = tf.io.parse_single_example(example, UNLABELED_TFREC_FORMAT)\n    image = decode_image(example['image'])\n    idnum = example['id']\n    return image, idnum # returns a dataset of image(s)\n\ndef load_dataset(filenames, labeled=True, ordered=False):\n    # Read from TFRecords. For optimal performance, reading from multiple files at once and\n    # disregarding data order. Order does not matter since we will be shuffling the data anyway.\n\n    ignore_order = tf.data.Options()\n    if not ordered:\n        ignore_order.experimental_deterministic = False # disable order, increase speed\n\n    dataset = tf.data.TFRecordDataset(filenames) # automatically interleaves reads from multiple files\n    dataset = dataset.with_options(ignore_order) # uses data as soon as it streams in, rather than in its original order\n    dataset = dataset.map(read_labeled_tfrecord if labeled else read_unlabeled_tfrecord)\n    # returns a dataset of (image, label) pairs if labeled=True or (image, id) pairs if labeled=False\n    return dataset\n\ndef get_training_dataset():\n    dataset = load_dataset(tf.io.gfile.glob(GCS_DS_PATH + '\/tfrecords-jpeg-192x192\/train\/*.tfrec'), labeled=True)\n    dataset = dataset.repeat() # the training dataset must repeat for several epochs\n    dataset = dataset.shuffle(2048)\n    dataset = dataset.batch(BATCH_SIZE)\n    return dataset\n\ndef get_validation_dataset():\n    dataset = load_dataset(tf.io.gfile.glob(GCS_DS_PATH + '\/tfrecords-jpeg-192x192\/val\/*.tfrec'), labeled=True, ordered=False)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.cache()\n    return dataset\n\ndef get_test_dataset(ordered=False):\n    dataset = load_dataset(tf.io.gfile.glob(GCS_DS_PATH + '\/tfrecords-jpeg-192x192\/test\/*.tfrec'), labeled=False, ordered=ordered)\n    dataset = dataset.batch(BATCH_SIZE)\n    return dataset","0d536716":"def sample_images(images, row_count, column_count):\n    fig, axs = plt.subplots(row_count, column_count, figsize=(10,10))\n    for i in range(row_count):\n        for j in range(column_count):\n            axs[i,j].imshow(images[i * column_count + j])\n            axs[i,j].axis('off')\n    plt.show()","5f491f16":"training_dataset = get_training_dataset()\nvalidation_dataset = get_validation_dataset()","2cfb9fec":"for item in training_dataset:\n    images = item[0].numpy()\n    labels = item[1].numpy()\n    break\nimages.shape, labels.shape","fa7c11ab":"sample_images(images, 4, 4)","f15480b4":"checkpoint_path = \"model.h5\"\ncheckpoint = tf.keras.callbacks.ModelCheckpoint(checkpoint_path, save_best_only=True)","3ee0af76":"LR_START = 0.00005\nLR_MAX =   0.00005 * strategy.num_replicas_in_sync\nLR_MIN =   0.0000025\nLR_RAMPUP_EPOCHS = 3\nLR_SUSTAIN_EPOCHS = 6\nLR_EXP_DECAY = .8\ndef scheduler_callback(epoch):\n    if epoch < LR_RAMPUP_EPOCHS:\n        lr =  np.random.random_sample() * LR_START\n    elif epoch < LR_RAMPUP_EPOCHS + LR_SUSTAIN_EPOCHS:\n        lr = LR_MAX\n    else:\n        lr = (LR_MAX - LR_MIN) * LR_EXP_DECAY**(epoch - LR_RAMPUP_EPOCHS - LR_SUSTAIN_EPOCHS) + LR_MIN\n    return lr\nscheduler = tf.keras.callbacks.LearningRateScheduler(scheduler_callback, verbose=True)","c94acfda":"early_stop = tf.keras.callbacks.EarlyStopping(patience=10)","8bbc3a6c":"callbacks = [early_stop, checkpoint, scheduler]","b8a49310":"optimizer = tf.keras.optimizers.Adam(learning_rate=0.001, \n                                                 beta_1=0.9, \n                                                 beta_2=0.999, \n                                                 epsilon=1e-07, \n                                                 amsgrad=False)","2ca32996":"model_types = [\n    \"dense_net\", \n    \"xception\", \n    \"inception\", \n    \"efficient_0\", \n    \"efficient_1\", \n    \"efficient_2\", \n    \"efficient_3\",\n    \"efficient_4\",\n    \"efficient_5\",\n    \"efficient_6\",\n    \"efficient_7\"\n]\nmodel_type = model_types[1]\ndef get_pretraind_model(model_type, input_shape):\n    if model_type == \"dense_net\":\n        return applications.densenet.DenseNet121(\n                include_top=False,\n                input_shape=input_shape               \n            )\n    if model_type == \"xception\":\n        return applications.Xception(\n            include_top=False,\n            input_shape=input_shape                        \n        )\n    if model_type == \"inception\":\n        return applications.InceptionV3(\n            include_top=False,\n            input_shape=input_shape                          \n        )\n    if model_type == \"efficient_0\":\n        return applications.EfficientNetB0(\n            include_top=False,\n                input_shape=input_shape                         \n        )\n    if model_type == \"efficient_1\":\n        return applications.EfficientNetB1(\n            include_top=False,\n            input_shape=input_shape                         \n        )\n    if model_type == \"efficient_2\":\n        return applications.EfficientNetB2(\n            include_top=False,\n            input_shape=input_shape                        \n        )\n    if model_type == \"efficient_3\":\n        return applications.EfficientNetB3(\n            include_top=False,\n            input_shape=input_shape                       \n        )\n    if model_type == \"efficient_4\":\n        return applications.EfficientNetB4(\n            include_top=False,\n            input_shape=input_shape                       \n        )\n    if model_type == \"efficient_5\":\n        return applications.EfficientNetB5(\n            include_top=False,\n            input_shape=input_shape                       \n        )\n    if model_type == \"efficient_6\":\n        return applications.EfficientNetB6(\n            include_top=False,\n            input_shape=input_shape                       \n        )\n    if model_type == \"efficient_7\":\n        return applications.EfficientNetB7(\n            include_top=False,\n            input_shape=input_shape                       \n        )","b2a385bd":"def train(\n    model_type, epochs, optimizer, callbacks, \n    strategy, layers):\n    tf.keras.backend.clear_session()\n    with strategy.scope():  \n        input_shape = [*IMAGE_SIZE, 3]   \n        pretrained_model = get_pretraind_model(model_type, input_shape)\n        print(pretrained_model.summary())\n        pretrained_model.trainable = True \n        all_layers = [pretrained_model] + layers + [tf.keras.layers.Dense(104, activation='softmax')]\n        model = tf.keras.Sequential(all_layers)\n        model.compile(\n            optimizer=optimizer,\n            loss = 'sparse_categorical_crossentropy',\n            metrics=['sparse_categorical_accuracy']\n        )\n        history = model.fit(training_dataset, \n                            steps_per_epoch=STEPS_PER_EPOCH, \n                            epochs=epochs, \n                            validation_data=validation_dataset, \n                            callbacks=callbacks\n                           )\n        pd.DataFrame(history.history).plot()\n        plt.show()\n        return model","19bc7fc5":"model = train(\n    model_type, EPOCHS, optimizer, callbacks, strategy, \n    layers=[\n        tf.keras.layers.Dropout(0.5), \n        tf.keras.layers.GlobalAveragePooling2D(), \n        tf.keras.layers.Dropout(0.5)\n    ]\n)","827962d9":"test_ds = get_test_dataset(ordered=True) # since we are splitting the dataset and iterating separately on images and ids, order matters.\nmodel.load_weights(checkpoint_path)\nprint('Computing predictions...')\ntest_images_ds = test_ds.map(lambda image, idnum: image)\nprobabilities = model.predict(test_images_ds)\npredictions = np.argmax(probabilities, axis=-1)\nprint(predictions)\n\nprint('Generating submission.csv file...')\ntest_ids_ds = test_ds.map(lambda image, idnum: idnum).unbatch()\ntest_ids = next(iter(test_ids_ds.batch(NUM_TEST_IMAGES))).numpy().astype('U') # all in one batch\nnp.savetxt('submission.csv', np.rec.fromarrays([test_ids, predictions]), fmt=['%s', '%d'], delimiter=',', header='id,label', comments='')","89975e8f":"## Common Functions","a51e70e2":"## Distribution Strategy","0899c5f5":"# Flower Classification on TPU\n## Table of Contents\n- Import Packages\n- Distribution Strategy\n- Common Parameters\n- Common Functions\n- Import datasets\n- Understand the data\n- Model Development\n- Submission","0c33b7f1":"## Early Stopping","0594b789":"### Learning Rate Scheduler","7408f563":"# Model Development","c941a6b9":"### Train the Model","8a496044":"## Import Packages","3c70497e":"### Model Checkpoint","e57c8a26":"## Common Parameters","33494429":"Let's see what the dataset looks like.","524c4a7f":" **Load datasets**","ebc32efc":"**Sample Images**","ef9cd126":"## Import datasets\n\nThis data is loaded from Kaggle and automatically sharded to maximize parallelization.","1a6256c3":"## Understand the data","f88f117b":"## Optimizer","53df5a36":"### Get Pretrain Model\nI will build the Model based on kears pretrained Models. There are many pretrained Models such as InceptionV3, EfficientNet 0 - 7 and so on. You can choose the pretrained Model you like to train the Model.","5fca416c":"## Submission"}}