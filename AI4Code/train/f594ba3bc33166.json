{"cell_type":{"57cfa3b3":"code","7a4ddd2b":"code","1cd4aa42":"code","1f7d2204":"code","c28104f8":"code","84b5659d":"code","89ba565e":"code","4b1c2dc3":"code","6e74d8fd":"code","36b0c8ba":"code","16744231":"code","794fed12":"code","673b3878":"code","a82dd1ed":"code","a7189155":"code","009aa2fe":"code","74025d4b":"code","84358ffd":"code","d9a84ee2":"code","1732003b":"code","85725470":"code","9097d71d":"code","2441e5f9":"code","7460a508":"markdown","fabb3aa8":"markdown","fdf7c049":"markdown","380cd15b":"markdown","f83cb7df":"markdown"},"source":{"57cfa3b3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix, accuracy_score\nfrom mlxtend.plotting import plot_confusion_matrix\n\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","7a4ddd2b":"import tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import Sequential\nfrom tensorflow.keras.layers import Flatten, Dense","1cd4aa42":"# Read the dataset\nbank_df = pd.read_csv('\/kaggle\/input\/predicting-churn-for-bank-customers\/Churn_Modelling.csv')\n","1f7d2204":"bank_df.head()","c28104f8":"X = bank_df.drop(labels=['CustomerId', 'Surname', 'RowNumber', 'Exited'], axis = 1)\ny = bank_df['Exited']","84b5659d":"X.head()","89ba565e":"X.isna().any()","4b1c2dc3":"y.head()\n","6e74d8fd":"label1 = LabelEncoder()\nX['Geography'] = label1.fit_transform(X['Geography'])\n","36b0c8ba":"label = LabelEncoder()\nX['Gender'] = label.fit_transform(X['Gender'])\nX.head()","16744231":"X = pd.get_dummies(X, drop_first=True, columns=['Geography'])\nX.head()","794fed12":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0, stratify = y)\n","673b3878":"scaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","a82dd1ed":"model = Sequential()\nmodel.add(Dense(X.shape[1], activation='relu', input_dim = X.shape[1]))\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dense(1, activation = 'sigmoid'))\n","a7189155":"X.shape[1]\n","009aa2fe":"model.compile(optimizer='adam', loss = 'binary_crossentropy', metrics=['accuracy'])\n","74025d4b":"model.fit(X_train, y_train.to_numpy(), batch_size = 10, epochs = 10, verbose = 1)\n","84358ffd":"y_pred = model.predict_classes(X_test)\n","d9a84ee2":"y_pred\n","1732003b":"y_test\n","85725470":"model.evaluate(X_test, y_test.to_numpy())\n","9097d71d":"confusion_matrix(y_test, y_pred)\n","2441e5f9":"accuracy_score(y_test, y_pred)\n","7460a508":"# 4. Feature Scaling and test train split ","fabb3aa8":"# 1. Import Libraries ","fdf7c049":"# 5. ANN implementation","380cd15b":"# 2. Data exploration","f83cb7df":"# 3. Handling categorical values"}}