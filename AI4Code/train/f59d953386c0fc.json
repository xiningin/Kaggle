{"cell_type":{"1adcab46":"code","42dc5df0":"code","b420e7d5":"code","aa00c776":"code","1cb7ef49":"code","5093debd":"code","9c78bc5c":"code","cd199230":"code","768feea5":"code","f1f165dd":"code","ca8411f2":"code","50294f4b":"code","a48a7218":"code","7868f818":"code","bb2716f8":"code","51140da9":"code","363acd06":"code","efecbf4e":"code","197518c7":"code","d5eaab31":"code","253fe22b":"code","ab594204":"code","393c326e":"code","5008ea48":"code","a2784d56":"code","0aee63ba":"code","4054b8c0":"code","4e7272f3":"code","e604a9ee":"code","5e6ff3f5":"code","1f5d333e":"code","c34c4f44":"code","8432c398":"code","0b96cdde":"code","8b8ab91f":"code","0803638e":"code","b485d444":"code","d413b90d":"code","099c2802":"code","dcdb5677":"code","c10240c1":"code","8c4498f0":"code","db24cdfe":"code","fcc4ed81":"code","01589f00":"code","5adb0ead":"code","2dfb3e3e":"code","48eede77":"code","ded43371":"code","5bc33322":"code","156a2ed9":"code","2138d837":"code","342ef331":"code","00793301":"code","1b7b5a83":"code","720dd124":"markdown","f5e0c5f5":"markdown","4f982225":"markdown","80dfae37":"markdown"},"source":{"1adcab46":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","42dc5df0":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nsns.set()\n\n# plotly library\nimport plotly.graph_objs as go\nfrom plotly import tools\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\n\n\nimport warnings\nwarnings.filterwarnings(\"ignore\", category=DeprecationWarning)\nwarnings.filterwarnings(\"ignore\", category=FutureWarning)\n#warnings.filterwarnings(\"ignore\")\n#warnings.filterwarnings(module='sklearn*', action='ignore', category=DeprecationWarning)\n#warnings.filterwarnings(action='once')\n\nfrom sklearn.utils.testing import ignore_warnings\n\nfrom subprocess import check_output\n\ndef warn(*args, **kwargs):\n    pass\nimport warnings\nwarnings.warn = warn\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))","b420e7d5":"df_train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ngender = pd.read_csv('\/kaggle\/input\/titanic\/gender_submission.csv')","aa00c776":"df_train.head()","1cb7ef49":"df_test.head()","5093debd":"df_train.info()","9c78bc5c":"df_test.info()","cd199230":"fig, ax = plt.subplots(figsize=(9,5))\nsns.heatmap(df_train.isnull(), cbar=False, cmap=\"YlGnBu_r\")\nplt.show()","768feea5":"fig, ax = plt.subplots(figsize=(9,5))\nsns.heatmap(df_test.isnull(), cbar=False, cmap=\"YlGnBu_r\")\nplt.show()","f1f165dd":"pd.isnull(df_test).sum()","ca8411f2":"cols = ['Survived', 'Sex', 'Pclass', 'SibSp', 'Parch', 'Embarked']","50294f4b":"ax=sns.countplot(x='Sex',hue='Survived',data=df_train)","a48a7218":"nr_rows = 2\nnr_cols = 3\n\nfig, axs = plt.subplots(nr_rows, nr_cols, figsize=(nr_cols*3.5,nr_rows*3))\n\nfor r in range(0,nr_rows):\n    for c in range(0,nr_cols):  \n        \n        i = r*nr_cols+c       \n        ax = axs[r][c]\n        sns.countplot(df_train[cols[i]], hue=df_train[\"Survived\"], ax=ax)\n        ax.set_title(cols[i], fontsize=14, fontweight='bold')\n        ax.legend(title=\"survived\", loc='upper center') \n        \nplt.tight_layout()   ","7868f818":"bins = np.arange(0, 80, 5)\ng = sns.FacetGrid(df_train, row='Sex', col='Pclass', hue='Survived', margin_titles=True, size=3, aspect=1.1)\ng.map(sns.distplot, 'Age', kde=False, bins=bins, hist_kws=dict(alpha=0.6))\ng.add_legend()  \nplt.show()  ","bb2716f8":"bins = np.arange(0, 550, 50)\ng = sns.FacetGrid(df_train, row='Sex', col='Pclass', hue='Survived', margin_titles=True, size=3, aspect=1.1)\ng.map(sns.distplot, 'Fare', kde=False, bins=bins, hist_kws=dict(alpha=0.6))\ng.add_legend()  \nplt.show()","51140da9":"sns.barplot(x='Pclass', y='Survived', data=df_train)\nplt.ylabel(\"Survival Rate\")\nplt.title(\"Survival as function of Pclass\")\nplt.show()","363acd06":"sns.barplot(x=\"Sex\", y=\"Survived\", data=df_train)\nplt.ylabel('Survival Sex')\nplt.title('Survival as function of Sex')\nplt.show()","efecbf4e":"sns.barplot(x='Sex', y='Survived', hue='Pclass', data=df_train)\nplt.ylabel(\"Survival Rate\")\nplt.title(\"Survival as function of Pclass and Sex\")\nplt.show()","197518c7":"sns.barplot(x='Embarked', y='Survived', data=df_train)\nplt.ylabel(\"Survival Rate\")\nplt.title(\"Survival as function of Embarked Port\")\nplt.show()","d5eaab31":"sns.barplot(x='Embarked', y='Survived', hue='Pclass', data=df_train)\nplt.ylabel(\"Survival Rate\")\nplt.title(\"Survival as function of Embarked Port\")\nplt.show()","253fe22b":"sns.countplot(x='Embarked', hue='Pclass', data=df_train)\nplt.title(\"Count of Passengers as function of Embarked Port\")\nplt.show()","ab594204":"sns.boxplot(x='Embarked', y='Age', data=df_train)\nplt.title(\"Age distribution as function of Embarked Port\")\nplt.show()","393c326e":"sns.boxplot(x='Embarked', y='Fare', data=df_train)\nplt.title(\"Fare distribution as function of Embarked Port\")\nplt.show()","5008ea48":"cm_surv = [\"darkgrey\" , \"lightgreen\"]","a2784d56":"ax = sns.swarmplot(x='Pclass', y='Age', data=df_train)","0aee63ba":"_=sns.swarmplot(x='Pclass', y='Age', hue='Sex', data=data_train)\n","4054b8c0":"fig, ax = plt.subplots(figsize=(13,7))\nsns.swarmplot(x='Pclass', y='Age', hue='Survived', split=True, data=df_train , palette=cm_surv, size=7, ax=ax)\nplt.title('Survivals for Age and Pclass ')\nplt.show()","4e7272f3":"cx = sns.violinplot(x='Pclass',y='Age',hue='Survived', split = True, data=df_train)","e604a9ee":"fig, ax = plt.subplots(figsize=(13,7))\nsns.violinplot(x=\"Pclass\", y=\"Age\", hue='Survived', data=df_train, split=True, bw=0.05 , palette=cm_surv, ax=ax)\nplt.title('Survivals for Age and Pclass ')\nplt.show()","5e6ff3f5":"g = sns.factorplot(x=\"Pclass\", y=\"Age\", hue=\"Survived\", col=\"Sex\", data=df_train, kind=\"swarm\", split=True, palette=cm_surv, size=7, aspect=.9, s=7)","1f5d333e":"for df in [df_train, df_test] :\n    \n    df['FamilySize'] = df['SibSp'] + df['Parch'] +1\n    \n    df['Alone']=0\n    df.loc[(df.FamilySize==1),'Alone'] = 1\n    \n    df['NameLen'] = df.Name.apply(lambda x : len(x)) \n    df['NameLenBin']=np.nan\n    for i in range(20,0,-1):\n        df.loc[ df['NameLen'] <= i*5, 'NameLenBin'] = i\n    \n    \n    df['Title']=0\n    df['Title']=df.Name.str.extract(r'([A-Za-z]+)\\.') #lets extract the Salutations\n    df['Title'].replace(['Mlle','Mme','Ms','Dr','Major','Lady','Countess','Jonkheer','Col','Rev','Capt','Sir','Don'],\n                    ['Miss','Miss','Miss','Mr','Mr','Mrs','Mrs','Other','Other','Other','Mr','Mr','Mr'],inplace=True)","c34c4f44":"print(df_train[['NameLen' , 'NameLenBin']].head(10))","8432c398":"grps_namelenbin_survrate = df_train.groupby(['NameLenBin'])['Survived'].mean().to_frame()\ngrps_namelenbin_survrate","0b96cdde":"plt.subplots(figsize=(10,6))\nsns.barplot(x='NameLenBin' , y='Survived' , data = df_train)\nplt.ylabel(\"Survival Rate\")\nplt.title(\"Survival as function of NameLenBin\")\nplt.show()","8b8ab91f":"ax = sns.violinplot(x='Pclass', y='NameLenBin', hue='Survived',  data=df_train)","0803638e":"fig, ax = plt.subplots(figsize=(9,7))\nsns.violinplot(x=\"NameLenBin\", y=\"Pclass\", data=df_train, hue='Survived', split=True, \n               orient=\"h\", bw=0.2 , palette=cm_surv, ax=ax)\nplt.show()","b485d444":"g = sns.factorplot(x=\"NameLenBin\", y=\"Survived\", col=\"Sex\", data=df_train, kind=\"bar\", size=5, aspect=1.2)\n","d413b90d":"grps_title_survrate = df_train.groupby(['Title'])['Survived'].mean().to_frame()\ngrps_title_survrate","099c2802":"plt.subplots(figsize=(10,6))\nsns.barplot(x='Title', y='Survived', data=df_train)\nplt.ylabel(\"Survival Rate\")\nplt.title(\"Survival as function of Pclass\")\nplt.show()","dcdb5677":"plt.subplots(figsize=(10,6))\nsns.barplot(x='FamilySize' , y='Survived' , data = df_train)\nplt.ylabel(\"Survival Rate\")\nplt.title(\"Survival as function of FamilySize\")\nplt.show()","c10240c1":"for df in [df_train, df_test]:\n\n    # Title\n    df['Title'] = df['Title'].fillna(df['Title'].mode().iloc[0])\n\n    # Age: use Title to fill missing values\n    df.loc[(df.Age.isnull())&(df.Title=='Mr'),'Age']= df.Age[df.Title==\"Mr\"].mean()\n    df.loc[(df.Age.isnull())&(df.Title=='Mrs'),'Age']= df.Age[df.Title==\"Mrs\"].mean()\n    df.loc[(df.Age.isnull())&(df.Title=='Master'),'Age']= df.Age[df.Title==\"Master\"].mean()\n    df.loc[(df.Age.isnull())&(df.Title=='Miss'),'Age']= df.Age[df.Title==\"Miss\"].mean()\n    df.loc[(df.Age.isnull())&(df.Title=='Other'),'Age']= df.Age[df.Title==\"Other\"].mean()\n    df = df.drop('Name', axis=1)\n","8c4498f0":"# Embarked\ndf_train['Embarked'] = df_train['Embarked'].fillna(df_train['Embarked'].mode().iloc[0])\ndf_test['Embarked'] = df_test['Embarked'].fillna(df_test['Embarked'].mode().iloc[0])\n\n# Fare\ndf_train['Fare'] = df_train['Fare'].fillna(df_train['Fare'].mean())\ndf_test['Fare'] = df_test['Fare'].fillna(df_test['Fare'].mean())","db24cdfe":"for df in [df_train, df_test]:\n    \n    df['Age_bin']=np.nan\n    for i in range(8,0,-1):\n        df.loc[ df['Age'] <= i*10, 'Age_bin'] = i\n        \n    df['Fare_bin']=np.nan\n    for i in range(12,0,-1):\n        df.loc[ df['Fare'] <= i*50, 'Fare_bin'] = i        \n    \n    # convert Title to numerical\n    df['Title'] = df['Title'].map( {'Other':0, 'Mr': 1, 'Master':2, 'Miss': 3, 'Mrs': 4 } )\n    # fill na with maximum frequency mode\n    df['Title'] = df['Title'].fillna(df['Title'].mode().iloc[0])\n    df['Title'] = df['Title'].astype(int)","fcc4ed81":"df_train_ml = df_train.copy()\ndf_test_ml = df_test.copy()\n\npassenger_id = df_test_ml['PassengerId']","01589f00":"df_train_ml.info()","5adb0ead":"df_test_ml.info()","2dfb3e3e":"df_train_ml = pd.get_dummies(df_train_ml, columns=['Sex', 'Embarked', 'Pclass'], drop_first=True)\ndf_test_ml = pd.get_dummies(df_test_ml, columns=['Sex', 'Embarked', 'Pclass'], drop_first=True)\n\ndf_train_ml.drop(['PassengerId','Name','Ticket', 'Cabin', 'Age', 'Fare_bin'],axis=1,inplace=True)\ndf_test_ml.drop(['PassengerId','Name','Ticket', 'Cabin', 'Age', 'Fare_bin'],axis=1,inplace=True)","48eede77":"df_train_ml.dropna(inplace=True)","ded43371":"df_train_ml.info()","5bc33322":"for df in [df_train_ml, df_test_ml]:\n    df.drop(['NameLen'], axis=1, inplace=True)\n\n    df.drop(['SibSp'], axis=1, inplace=True)\n    df.drop(['Parch'], axis=1, inplace=True)\n    df.drop(['Alone'], axis=1, inplace=True)","156a2ed9":"df_train_ml.info()","2138d837":"df_test_ml.info()","342ef331":"df_test_ml.fillna(df_test_ml.mean(), inplace=True)\ndf_test_ml.head()","00793301":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\n\n# for df_train_ml\nscaler.fit(df_train_ml.drop(['Survived'],axis=1))\nscaled_features = scaler.transform(df_train_ml.drop(['Survived'],axis=1))\ndf_train_ml_sc = pd.DataFrame(scaled_features) # columns=df_train_ml.columns[1::])\n\n# for df_test_ml\ndf_test_ml.fillna(df_test_ml.mean(), inplace=True)\n#scaler.fit(df_test_ml)\nscaled_features = scaler.transform(df_test_ml)\ndf_test_ml_sc = pd.DataFrame(scaled_features) # , columns=df_test_ml.columns)","1b7b5a83":"df_test_ml_sc.head()","720dd124":"# \u043d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\n","f5e0c5f5":"# 3 \u0438\u0441\u0441\u043b\u0435\u0434\u0443\u0439\u0442\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438","4f982225":"# 1 \u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u0444\u0430\u0439\u043b\u044b","80dfae37":"# 2 \u043f\u0440\u043e\u0432\u0435\u0440\u044c\u0442\u0435 \u043d\u0430 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438"}}