{"cell_type":{"8569f998":"code","25a900cb":"code","98b607c0":"code","d894cde1":"code","eba430fc":"code","0e814fc5":"code","cde4a361":"markdown"},"source":{"8569f998":"# Get the list of all files under the input directory\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","25a900cb":"# DATA LOADING\n# 'sig_id' is a complex unique ID for each example, we will use simple numerical indexing instead of it\n\nimport pandas as pd\n\ntrain_features = pd.read_csv(\"\/kaggle\/input\/lish-moa\/train_features.csv\")\ntrain_features.drop(['sig_id'], axis='columns', inplace=True)\n\ntrain_target_full = pd.read_csv(\"\/kaggle\/input\/lish-moa\/train_targets_scored.csv\")\ntrain_target = train_target_full.copy()\ntrain_target.drop(['sig_id'], axis='columns', inplace=True)\n\ntest_features_full = pd.read_csv(\"\/kaggle\/input\/lish-moa\/test_features.csv\")\ntest_features = test_features_full.copy()\ntest_features.drop(['sig_id'], axis='columns', inplace=True)\n","98b607c0":"# CATEGORICAL DATA PROCESSING\n# There are 3 categorical features, we need to encoder them to numerical form\n\nfrom sklearn.preprocessing import LabelEncoder\n\nlabel_train_features = train_features.copy()\nlabel_test_features = test_features.copy()\n\nobject_cols = ['cp_type', 'cp_time', 'cp_dose']\nlabel_encoder = LabelEncoder()\nfor col in object_cols:\n    label_train_features[col] = label_encoder.fit_transform(train_features[col])\n    label_test_features[col] = label_encoder.transform(test_features[col])\n\n# Check the encoded features\nlabel_test_features.loc[0:5,['cp_type', 'cp_time', 'cp_dose']]","d894cde1":"# DEEP LEARNING\n# The number of layers and the number of neurons per layer were chosen using keras-tuner:\n# https:\/\/www.tensorflow.org\/tutorials\/keras\/keras_tuner\n\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.layers import Dropout\n\ndef get_model(n_inputs, n_outputs):\n    model = Sequential()\n    model.add(Dropout(0.2, input_shape=(n_inputs,)))\n    model.add(Dense(306, input_dim=n_inputs, kernel_initializer='he_uniform', activation='sigmoid'))\n    model.add(Dropout(0.5)) \n    model.add(Dense(256, activation='sigmoid'))\n    model.add(Dropout(0.5))\n    model.add(Dense(856, activation='sigmoid'))\n    model.add(Dropout(0.5))\n    model.add(Dense(n_outputs, activation='sigmoid'))\n    model.compile(loss='binary_crossentropy', optimizer='adamax', metrics = ['accuracy'])\n    return model","eba430fc":"# TRAIN THE MODEL AND GET PREDICTIONS\n\nn_inputs, n_outputs = label_train_features.shape[1], train_target.shape[1]\nmodel = get_model(n_inputs, n_outputs)\n\nmodel.fit(label_train_features, train_target, verbose=1, epochs=100, validation_split=0.2, batch_size=32)\n\npredictions = model.predict(label_test_features)","0e814fc5":"# SAVE PREDICTIONS FOR SUBMISSION\n\ndata = pd.DataFrame.from_records(predictions)\ndata.insert(0,'sig_id',test_features_full['sig_id'])\ndata.columns = train_target_full.columns\ndata.to_csv('submission.csv', index=False)","cde4a361":"ABOUT THIS NOTEBOOK\n\nThis is my first attempt to use neural network for solving a real task.\n\nI understand that well-done EDA is more than a half of success in ML, but in this case I focused on solving the technical questions related to building a workable neural network.\n\nI still have a lot of questions and a lot of things to learn, and I will be thankful for any ideas to improve the performance of this model."}}