{"cell_type":{"1dd4221c":"code","a9f60ed2":"code","74daa36b":"code","91fa90f0":"code","475cbe60":"code","8d889875":"code","6314ef46":"code","63174144":"code","06ba246a":"code","99730c77":"code","188ebc8f":"code","5ecb852c":"code","5dfdd3f6":"code","63a2e451":"code","0170cf1a":"code","a088be86":"markdown","24624f44":"markdown","9e659f2a":"markdown","fe1a2b6d":"markdown","0e8ec081":"markdown"},"source":{"1dd4221c":"\nimport numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\nprint(os.listdir(\"..\/input\"))\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\n\n#ML libraries\nfrom sklearn.ensemble import RandomForestClassifier\n\n\n# Deep Learning libraries\nfrom keras.utils.np_utils import to_categorical\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPool2D, GlobalAveragePooling2D, Dropout, Flatten, Dense, BatchNormalization\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ModelCheckpoint, LearningRateScheduler\n\n%matplotlib inline\nplt.style.use('ggplot')\nsns.set_style('whitegrid')","a9f60ed2":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')","74daa36b":"train.shape","91fa90f0":"display(train.info())\n\ndisplay(test.info())\n\ndisplay(train.head(n = 2))\ndisplay(test.head(n = 2))","475cbe60":"features_train = train.iloc[:, 1:]\nlabels_train = train.iloc[:, 0:1].values","8d889875":"features_train = features_train \/ 255.0\ntest = test \/ 255.0\n\nsampleImageIndex = 1\n\nsampleImagePixelMap = features_train.iloc[sampleImageIndex, :].values.reshape(28, 28)\nprint(sampleImagePixelMap.shape)\n\nprint(\"The below Image should be a \", labels_train[sampleImageIndex])\ng = plt.imshow(sampleImagePixelMap)","6314ef46":"features_train = features_train.values.reshape(-1, 28, 28, 1)\ntest = test.values.reshape(-1, 28, 28, 1)\n\nprint(features_train.shape)\nprint(test.shape)","63174144":"print(\"The below Image should still be a \", labels_train[sampleImageIndex])\ng = plt.imshow(features_train[sampleImageIndex, :, :, 0])","06ba246a":"labels_train = to_categorical(labels_train, num_classes = 10)\nprint(labels_train[0])","99730c77":"X_train, X_valid, y_train, y_valid = train_test_split(features_train, labels_train, test_size = 0.1)","188ebc8f":"digitNet = Sequential()\n\ndigitNet.add(BatchNormalization(input_shape = (28, 28, 1)))\ndigitNet.add(Conv2D(filters = 16, kernel_size = 3, kernel_initializer = 'he_normal', activation = 'relu', padding = 'same'))\ndigitNet.add(MaxPool2D(pool_size = 2))\ndigitNet.add(BatchNormalization())\n\ndigitNet.add(Conv2D(filters = 32, kernel_size = 3, kernel_initializer= 'he_normal', activation = 'relu', padding = 'same'))\ndigitNet.add(MaxPool2D(pool_size = 2))\ndigitNet.add(BatchNormalization())\n\ndigitNet.add(Conv2D(filters = 64, kernel_size = 3, kernel_initializer = 'he_normal', activation = 'relu', padding = 'same'))\ndigitNet.add(MaxPool2D(pool_size = 2))\ndigitNet.add(BatchNormalization())\n\ndigitNet.add(Conv2D(filters = 128, kernel_size = 3, kernel_initializer = 'he_normal', activation = 'relu', padding = 'same'))\ndigitNet.add(MaxPool2D(pool_size = 2))\ndigitNet.add(BatchNormalization())\n\ndigitNet.add(GlobalAveragePooling2D())\n\ndigitNet.add(Dense(10, activation = 'softmax'))\ndigitNet.summary()","5ecb852c":"digitNet.compile(optimizer = 'rmsprop', loss = 'categorical_crossentropy', metrics = ['accuracy'])","5dfdd3f6":"datagen = ImageDataGenerator(\n        width_shift_range=0.1,\n        height_shift_range=0.1,\n        zoom_range = 0.1,\n        rotation_range=10,\n        horizontal_flip = False,\n        vertical_flip = False,\n)\n\ndatagen.fit(X_train)\n\ncheckpointer = ModelCheckpoint(filepath = 'bestModel.hdf5', \n                               verbose=1, save_best_only = True)\n\nreduce = LearningRateScheduler(lambda x: 1e-3 * 0.90 ** x)\n\ndigitNet.fit_generator(datagen.flow(X_train, y_train, batch_size = 32), \n                       steps_per_epoch = X_train.shape[0] \/\/ 32, \n          validation_data = (X_valid, y_valid), epochs = 64,\n          callbacks=[checkpointer, reduce], verbose=1)","63a2e451":"digitNet.load_weights(\"bestModel.hdf5\")\n","0170cf1a":"results = digitNet.predict(test)\n# select the indix with the maximum probability\nresults = np.argmax(results,axis = 1)\nresults = pd.Series(results,name=\"Label\")\nsubmission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),results],axis = 1)\n\nsubmission.to_csv(\"cnn_mnist_datagen.csv\",index=False)","a088be86":"# Reading Data","24624f44":"# CNN","9e659f2a":"# Model Selection","fe1a2b6d":"# Exploring Data","0e8ec081":"# Preprocessing"}}