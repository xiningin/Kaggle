{"cell_type":{"93bb1792":"code","21752d77":"code","0a259778":"code","e51e4010":"code","39bd80d5":"code","279e807b":"code","3da0bdfd":"code","d18b25cc":"code","68ab6445":"code","c59d1ae2":"code","cc66afe8":"code","e4743fe3":"code","b32fe8da":"code","7ece49b2":"code","5a960ad6":"code","26a2cc0a":"code","3bbd272b":"code","a3e650f3":"code","3283c420":"code","330a6dd7":"code","0ddfd954":"code","40fe8e9d":"code","c01162bf":"code","da809695":"code","f81600fa":"code","8581de1e":"code","22ad2c2e":"code","650ecd01":"code","248dd085":"code","5a3b6f9b":"code","f10b6ca3":"code","9db692d4":"code","168cda34":"code","090214e5":"code","015f6bf4":"code","163c1397":"code","02a0255d":"code","ba199c10":"code","ebf1fb19":"code","02277a5e":"code","1c8bfcba":"code","14211b26":"code","e0094ef7":"code","dc2cb835":"code","9162c324":"code","9c0100b2":"code","364010c0":"code","f64c0bd2":"code","6fae830b":"code","3ef22c8e":"code","ce980ee2":"code","81d14d4e":"markdown","ba755cb2":"markdown","29bee4cb":"markdown","3492e7da":"markdown","93f61490":"markdown","b1ef0de1":"markdown","e1dc148a":"markdown","20038264":"markdown","791c41dd":"markdown","4d7e1b7d":"markdown","a5b3bb79":"markdown","984990a7":"markdown","0ce1342c":"markdown","38d740e5":"markdown","fec6ba44":"markdown","29225d3f":"markdown","d64f3d8f":"markdown","76e18912":"markdown","941c6f9d":"markdown","70d0649e":"markdown","455ffb52":"markdown","f3fe3a57":"markdown","002014fa":"markdown","bc77b58c":"markdown","148f329d":"markdown","35eec594":"markdown","7cf62060":"markdown","f22762ec":"markdown","733ca191":"markdown","ccc6ed11":"markdown","5da1c647":"markdown","25e9798d":"markdown"},"source":{"93bb1792":"# linear algebra\nimport numpy as np\n\n# data processing, CSV file\nimport pandas as pd\n\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n","21752d77":"#Data Visualization\nimport seaborn as sns\n%matplotlib inline\n\nfrom matplotlib import pyplot as plt\nfrom matplotlib import style","0a259778":"# Algorithms\nfrom sklearn import linear_model\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.naive_bayes import GaussianNB","e51e4010":"train_df=pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df=pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ngender_submission=pd.read_csv(\"\/kaggle\/input\/titanic\/gender_submission.csv\")\n","39bd80d5":"train_df.head()","279e807b":"test_df.head()","3da0bdfd":"train_df.describe()","d18b25cc":"# Finding total\n\ntotal = train_df.isnull().sum().sort_values(ascending=False)\n# To find the Percentages\npercent_1=train_df.isnull().sum()\/train_df.isnull().count()*100\npercent_2=(round(percent_1,1)).sort_values(ascending=False)\nmissing_data=pd.concat([total,percent_2],axis=1,keys=['Total','%'])\nmissing_data.head(5)\n\n","68ab6445":"train_df.info()","c59d1ae2":"train_df.columns.values\n","cc66afe8":"survived=\"survived\"\nnot_survived=\"not_survived\"\nfig, axes=plt.subplots(nrows=1,ncols=2, figsize=(10,4))\nwomen=train_df[train_df['Sex']=='female']\nmen=train_df[train_df['Sex']=='male']\n\nax=sns.distplot(women[women['Survived']==1].\n                     Age.dropna(),bins=18,\n                     label=survived, ax=axes[0], \n                     kde=False)\n                     \nax=sns.distplot(women[women['Survived']==0].\n                     Age.dropna(),bins=40,\n                     label=survived, ax=axes[0], kde=False)\nax.legend()                     \nax.set_title(\"Female\")                     \n                     \nax=sns.distplot(men[men['Survived']==1].\n                     Age.dropna(),bins=18,\n                     label=survived, ax=axes[1], kde=False)\n\nax=sns.distplot(men[men['Survived']==0].\n                     Age.dropna(),bins=40,\n                     label=survived, ax=axes[1], kde=False)\nax.legend()\nax.set_title(\"Male\")\n                     \n                     \n                     \n                     ","e4743fe3":"FacetGrid=sns.FacetGrid(train_df,row=\"Embarked\",size=4.5, aspect=1.6)\nFacetGrid.map(sns.pointplot,\"Pclass\",\"Survived\",\"Sex\",palette=None,order=None,hue_order=None)\nFacetGrid.add_legend()","b32fe8da":"sns.barplot(x=\"Pclass\", y=\"Survived\", data=train_df)","7ece49b2":"### Other Pclass count on Survival\ngrid=sns.FacetGrid(train_df, col=\"Survived\", row=\"Pclass\", size=2.2, aspect=1.6)\ngrid.map(plt.hist, \"Age\", alpha=.5, bins=20)\ngrid.add_legend()","5a960ad6":"data=[train_df,test_df]\nfor dataset in data:\n    dataset['relatives']=dataset['SibSp']+dataset['Parch']\n    dataset.loc[dataset['relatives']>0,\n                'not_alone']=0\n    dataset.loc[dataset['relatives']==0,\n                'not_alone']=1\n    dataset['not_alone']=dataset['not_alone'].astype(int)\n    \ntrain_df['not_alone'].value_counts()\n\n\n                \n    ","26a2cc0a":"axes=sns.factorplot('relatives','Survived', data=train_df, aspect=2.5, )","3bbd272b":"# Droping Passenger ID from training set Coz Passenger ID has no function in Survival\n\ntest_df=test_df.drop([\"PassengerId\"],axis=1)\ntest_df.head()\n\n","a3e650f3":"import re\ndeck={'A':1,'B':2,'C':3,'D':4,'E':5,'F':6,'G':7,'U':8}\nlist_data=[train_df,test_df]\n\nfor dataset in list_data:\n    dataset[\"Cabin\"]=dataset[\"Cabin\"].fillna(\"U0\")\n    dataset[\"Deck\"]=dataset[\"Cabin\"].map(lambda x:re.compile(\"([a-zA-Z]+)\").search(x).group())\n    dataset[\"Deck\"]=dataset[\"Deck\"].map (deck)\n    dataset[\"Deck\"]=dataset[\"Deck\"].fillna(0)\n    dataset[\"Deck\"]=dataset[\"Deck\"].astype(int)                                                       \n    \n    \n","3283c420":"train_df=train_df.drop([\"Cabin\"])\ntest_df=test_df.drop([\"Cabin\"])","330a6dd7":"train_df.columns.values","0ddfd954":"\n\ndata=[train_df,test_df]\nfor dataset in list_data:\n    mean=train_df[\"Age\"].mean()\n    std=test_df[\"Age\"].std()\n    is_null=dataset[\"Age\"].isnull().sum()\n    \n    rand_age=np.random.randint(mean - std, mean +std, size=is_null)\n    \n    age_slice=dataset[\"Age\"].copy()\n    age_slice[np.isnan(age_slice)]=rand_age\n    dataset[\"Age\"]=age_slice\n    dataset[\"Age\"]=train_df[\"Age\"].astype(int)\n    \ntrain_df[\"Age\"].isnull().sum()","40fe8e9d":"train_df[\"Embarked\"].describe()","c01162bf":"common_value='S'\nlist_data=[train_df,test_df]\n\nfor dataset in list_data:\n    dataset[\"Embarked\"]=dataset[\"Embarked\"].fillna(common_value)","da809695":"train_df.info()","f81600fa":"list_data=[train_df,test_df]\n\nfor dataset in list_data:\n    dataset[\"Fare\"]=dataset[\"Fare\"].fillna(0)\n    dataset[\"Fare\"]=dataset[\"Fare\"].astype(int)","8581de1e":"train_df.info()","22ad2c2e":"list_data=[train_df,test_df]\n\ntitles={\"Mr.\":1,\"Miss\":2,\"Mrs.\":3,\"Master\":4,\"Rare\":5}\nfor dataset in list_data:\n    #Extract title    \n    dataset[\"Title\"]=dataset.Name.str.extract(\" ([A-Za-z]+)\\.\",expand=False)\n    \n    #Replace title with common one\n    \n    dataset[\"Title\"]=dataset[\"Title\"].replace([\"Lady\",\"Countess\",\"Capt\",\"Col\",\"Don\",\"Dr.\",\\\n                                               \"Major\",\"Rev\",\"Sir\",\"Jonkheer\",\"Dona\"],\"Rare\")\n    \n    dataset[\"Title\"]=dataset[\"Title\"].replace(\"Mille\",\"Miss\")\n    dataset[\"Title\"]=dataset[\"Title\"].replace(\"Ms.\",\"Miss\")\n    dataset[\"Title\"]=dataset[\"Title\"].replace(\"Mme\",\"Mrs.\")\n    \n    \n    dataset[\"Title\"]=dataset[\"Title\"].map(titles)\n    \n    dataset[\"Title\"]=dataset[\"Title\"].fillna(0)\n    \n    \ntrain_df=train_df.drop([\"Name\"],axis=1)\ntest_df=test_df.drop([\"Name\"],axis=1)\n                                               \n                                               \n                                               \n                                              \n                                              ","650ecd01":"train_df.info()","248dd085":"train_df.head()","5a3b6f9b":"dataset['Title']=dataset['Title'].map(title)","f10b6ca3":"dataset['Title']=dataset['Title'].fillna(0)","9db692d4":"train_df=train_df.drop([\"Name\"],axis=1)\ntest_df=test_df.drop([\"Name\"],axis=1)","168cda34":"genders={\"male\":0,\"female\":1}\nlist_data=[train_df,test_df]\nfor dataset in list_data:\n    dataset['Sex']=dataset['Sex'].map(genders)\n    ","090214e5":"train_df[\"Ticket\"].describe()","015f6bf4":"train_df=train_df.drop([\"Ticket\"],axis=1)\ntest_df=test_df.drop([\"Ticket\"],axis=1)","163c1397":"ports={\"S\":0,\"C\":1,\"Q\":2}\nlist_data=[train_df,test_df]\nfor dataset in list_data:\n    dataset['Embarked']=dataset['Embarked'].map(ports)","02a0255d":"#Age Category: Float to int\nlist_data=[train_df,test_df]\nfor dataset in list_data:\n    dataset['Age']=dataset['Age'].astype(int)    \n    dataset.loc[dataset['Age']<= 11,'Age']=0\n    dataset.loc[(dataset['Age']> 11) & (dataset['Age']<=18),'Age']=1 \n    dataset.loc[(dataset['Age']> 18) & (dataset['Age']<=22),'Age']=2\n    dataset.loc[(dataset['Age']> 22) & (dataset['Age']<=27),'Age']=3\n    dataset.loc[(dataset['Age']> 27) & (dataset['Age']<=33),'Age']=4\n    dataset.loc[(dataset['Age']> 33) & (dataset['Age']<=40),'Age']=5\n    dataset.loc[(dataset['Age']> 40) & (dataset['Age']<=66),'Age']=6    \n    dataset.loc[(dataset['Age'] > 66), 'Age'] = 6\n    \ntrain_df['Age'].value_counts()\n       \n","ba199c10":"train_df.head()\nlist_data=[train_df,test_df]\nfor dataset in list_data:\n    dataset.loc[dataset['Fare']<= 7.91,'Fare']=0\n    dataset.loc[(dataset['Fare']> 7.91) & (dataset['Fare']<=14.454),'Fare']=1 \n    dataset.loc[(dataset['Fare']> 14.454) & (dataset['Fare']<=31),'Fare']=2\n    dataset.loc[(dataset['Fare']> 31) & (dataset['Fare']<=99),'Fare']=3\n    dataset.loc[(dataset['Fare']> 99) & (dataset['Fare']<=250),'Fare']=4\n    dataset.loc[(dataset['Fare']> 250),'Fare']=5\n    \n    dataset['Fare']=dataset['Fare'].astype(int)\n\n  ","ebf1fb19":"list_data=[train_df,test_df]\nfor dataset in list_data:\n    dataset['Age_Class']=dataset['Age']*dataset['Pclass']","02277a5e":"### Fare per person\nlist_data=[train_df,test_df]\nfor dataset in list_data:\n    dataset['Fare_Per_Person'] = (dataset['Fare'])\/(dataset['relatives']+1)\n    dataset['Fare_Per_Person'] = dataset['Fare_Per_Person'].astype(int)\n    \ntrain_df.head(10)","1c8bfcba":"X_train = train_df.drop(\"Survived\", axis=1)\nY_train = train_df[\"Survived\"]\nX_test  = test_df.drop(\"PassengerId\", axis=1).copy()\n\n","14211b26":"test_df.head()","e0094ef7":"sgd = linear_model.SGDClassifier(max_iter=5, tol=None)\nsgd.fit(X_train, Y_train)\nY_pred = sgd.predict(X_test)\n\nsgd.score(X_train, Y_train)\n\nacc_sgd = round(sgd.score(X_train, Y_train) * 100, 2)","dc2cb835":"### RANDOM FOREST\n\nrandom_forest = RandomForestClassifier(n_estimators=100)\nrandom_forest.fit(X_train, Y_train)\n\nY_prediction = random_forest.predict(X_test)\n\nrandom_forest.score(X_train, Y_train)\nacc_random_forest = round(random_forest.score(X_train, Y_train) * 100, 2)","9162c324":"logreg = LogisticRegression()\nlogreg.fit(X_train, Y_train)\n\nY_pred = logreg.predict(X_test)\n\nacc_log = round(logreg.score(X_train, Y_train) * 100, 2)","9c0100b2":"# KNN \nknn = KNeighborsClassifier(n_neighbors = 3)\nknn.fit(X_train, Y_train)  \nY_pred = knn.predict(X_test)\nacc_knn = round(knn.score(X_train, Y_train) * 100, 2)","364010c0":"gaussian = GaussianNB()\ngaussian.fit(X_train, Y_train)\nY_pred = gaussian.predict(X_test)\nacc_gaussian = round(gaussian.score(X_train, Y_train) * 100, 2)","f64c0bd2":"perceptron = Perceptron(max_iter=5)\nperceptron.fit(X_train, Y_train)\n\nY_pred = perceptron.predict(X_test)\n\nacc_perceptron = round(perceptron.score(X_train, Y_train) * 100, 2)","6fae830b":"linear_svc = LinearSVC()\nlinear_svc.fit(X_train, Y_train)\n\nY_pred = linear_svc.predict(X_test)\n\nacc_linear_svc = round(linear_svc.score(X_train, Y_train) * 100, 2)","3ef22c8e":"decision_tree = DecisionTreeClassifier()\ndecision_tree.fit(X_train, Y_train)\nY_pred = decision_tree.predict(X_test)\nacc_decision_tree = round(decision_tree.score(X_train, Y_train) * 100, 2)","ce980ee2":"results = pd.DataFrame({\n    'Model': ['Support Vector Machines', 'KNN', 'Logistic Regression', \n              'Random Forest', 'Naive Bayes', 'Perceptron', \n              'Stochastic Gradient Decent', \n              'Decision Tree'],\n    'Score': [acc_linear_svc, acc_knn, acc_log, \n              acc_random_forest, acc_gaussian, acc_perceptron, \n              acc_sgd, acc_decision_tree]})\nresult_df = results.sort_values(by='Score', ascending=False)\nresult_df = result_df.set_index('Score')\nresult_df.head(9)","81d14d4e":"### Importing Algorithm","ba755cb2":"### Fare","29bee4cb":"### Survival correlation with Pclass  ","3492e7da":"### Depending on Gender- Embarked correlation with Survival","93f61490":"### To generate feature extracting title","b1ef0de1":"### Gaussian Neive Bayes","e1dc148a":"### Linear Support Vector Machine - SVC","20038264":"### Embarked, pclass and sex","791c41dd":"### Missing Data :Deck \/ Cabin","4d7e1b7d":"### Logistic Regression MODEL","a5b3bb79":"### Processing Data","984990a7":"### Filling NaN Value with 0","0ce1342c":"### Now, in Embarked there is only 2 missing values","38d740e5":"### Start Building Machine Learning Model\n### Now is the time to train our different Machine Learning Models to compare their Results","fec6ba44":"### To Get Data","29225d3f":"### SGD: Stockastic Gradient Descent","d64f3d8f":"### Above we are missing probability of survivl","76e18912":"### Age and Sex","941c6f9d":"> ### New Feature: Age times class","70d0649e":"### Perceptron","455ffb52":"### FARE- We have to make this same as Age","f3fe3a57":"### Embarked - conver to Numeric","002014fa":"### Ticket","bc77b58c":"### Model- Decision Tree","148f329d":"### SEX feature conversion to Numeric","35eec594":"### Age Feature- Missing Values","7cf62060":"### To find the missing values","f22762ec":"**Parch & Sibsp- including total number of relatives**","733ca191":"### Convert Title into Numbers","ccc6ed11":"### Conclusion: So we find that for Model fitting there arises problem with Categorical Values to convert. Have to solve this with Hot-Encoder lateron","5da1c647":"### Categories - Within Features below:","25e9798d":"### K Nearest Neighbour"}}