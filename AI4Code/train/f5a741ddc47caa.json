{"cell_type":{"15687ed5":"code","a4c4980c":"code","15e8be81":"code","2acefc27":"code","1bba0762":"code","cbf579ca":"code","4cca36e9":"code","a5db5176":"code","1812620d":"code","649381af":"code","18ae668b":"code","45bd53d4":"code","b103a9ad":"code","936e73fa":"code","31d13208":"code","bf1c7663":"code","e3ebaae2":"code","076f0802":"code","e4a7abed":"code","e5b3a6c4":"code","9d507c94":"code","90660caf":"code","0dfb4807":"code","ba7aaf8a":"code","f622110e":"code","3447706f":"code","7b7ffc6f":"code","af5e8e83":"code","f189bbc4":"code","050616a0":"code","4911f5fc":"code","a89aed8d":"code","8fb3c1a9":"code","8649a5da":"code","14729fb8":"code","49c1e6e7":"code","ea907909":"code","bd14bc8b":"code","0fe6a98f":"code","8e825bb2":"code","743bed61":"code","400799fc":"markdown","3ab39ce3":"markdown","aaeddbb5":"markdown","c0567e19":"markdown","3e061971":"markdown","4433391a":"markdown","34169cc5":"markdown","55bb1038":"markdown","7b59c551":"markdown","919e96a0":"markdown","bddcfd44":"markdown"},"source":{"15687ed5":"import numpy as np \nimport pandas as pd \n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport sklearn\n\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.metrics import r2_score","a4c4980c":"dataset = pd.read_csv('\/kaggle\/input\/position-salaries\/Position_Salaries.csv')","15e8be81":"type(dataset)","2acefc27":"dataset.shape","1bba0762":"dataset.dtypes","cbf579ca":"dataset.head()","4cca36e9":"dataset.tail()","a5db5176":"dataset.info()","1812620d":"dataset.describe()","649381af":"dataset.columns","18ae668b":"X = dataset.iloc[: , 1 :-1 ].values\ny = dataset.iloc[:, -1].values","45bd53d4":"X.shape","b103a9ad":"y.shape","936e73fa":"#  from sklearn.linear_model import LinearRegression","31d13208":"model = LinearRegression()","bf1c7663":"model.fit(X,y)","e3ebaae2":"y_pred = model.predict(X)","076f0802":"# Visualising the Linear Regression results\n# ------------------------------------------\n\nplt.scatter(X, y, color='green', label='')\nplt.plot(X, y_pred, color=\"blue\", label='', marker='+')\nplt.title(\"Truth or Bluff (Linear Regression)\")\nplt.xlabel('Position Level')\nplt.ylabel('Salary')\nplt.show()","e4a7abed":"from sklearn.preprocessing import PolynomialFeatures","e5b3a6c4":"poly_reg = PolynomialFeatures(degree =3)","9d507c94":"X_poly = poly_reg.fit_transform(X)","90660caf":"X_poly","0dfb4807":"model2 = LinearRegression()","ba7aaf8a":"model2.fit(X_poly, y)","f622110e":"y_pred1 = model2.predict(X_poly)","3447706f":"y_pred1","7b7ffc6f":"plt.scatter(X, y, color = 'green', label='' )\nplt.plot(X, y_pred1, color = 'blue', label= '')\nplt.title(\"Truth or Bluff (Polynomial Regression)\")\nplt.xlabel('Position Level')\nplt.ylabel('Slary')\nplt.show()","af5e8e83":"# Visualising the Polynomial Regression results \n# (for making more smooth curve)","f189bbc4":"X_grid = np.arange(min(X), max(X), 0.1 )","050616a0":"X_grid","4911f5fc":"X_grid.shape","a89aed8d":"X_grid = X_grid.reshape(len(X_grid), 1)","8fb3c1a9":"X_grid.shape","8649a5da":"plt.scatter(X, y, color='green')\nplt.plot(X_grid, model2.predict(poly_reg.fit_transform(X_grid)), color=\"blue\")\nplt.title(\"Truth or Bluff (Polynomial Regression)\")\nplt.xlabel('Position level')\nplt.ylabel('Salary')\nplt.show()","14729fb8":"# SLR","49c1e6e7":"model.predict([[6.5]])  # Salary","ea907909":"# PLR","bd14bc8b":"model2.predict(poly_reg.fit_transform([[6.5]]))   # Salary","0fe6a98f":"# Implementation by usinf LOap","8e825bb2":"plotting_xs = np.linspace(X.min(), X.max(), 1000)","743bed61":"for i in range(1, 13):\n    # Applying Train Test Split\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)\n    \n    # Creating Polynomial object\n    poly_reg = PolynomialFeatures(degree=i)\n    \n    # Trasforming the training and testing data to required Polynomial degree\n    X_train = poly_reg.fit_transform(X_train.reshape(X_train.shape[0], 1))\n    X_test = poly_reg.fit_transform(X_test.reshape(X_test.shape[0], 1))\n    \n    # Model\n    reg = LinearRegression()\n    \n    # Fitting\n    reg.fit(X_train,y_train)\n    \n    # Predicting\n    y_pred = reg.predict(X_test)\n    \n    # Generating predictions for 1000 points which will help in plotting the curve of regression\n    xs = poly_reg.fit_transform(plotting_xs.reshape(plotting_xs.shape[0], 1))\n    plotting_ys = reg.predict(xs)\n    \n    # Plotting\n    plt.title(f'Degree: {i}, R2 score: {r2_score(y_pred,y_test)}')\n    \n    # Plotting the training data \n    plt.scatter(X, y, label='Training Data')\n    \n    # Plotting the curve of regression\n    plt.plot(plotting_xs, plotting_ys, label='Curve of Regression')\n    plt.legend()\n    plt.show()","400799fc":"#### 2- import Dataset -> \"Position_Salaries\"","3ab39ce3":"### Position level: 6.5","aaeddbb5":"## Question 1:","c0567e19":"# Polynomial Linear Regression (PLR) ","3e061971":"#### 3 - EDA\u00b6","4433391a":"#### 4 - Training the Linear Regression model on the whole dataset","34169cc5":"## Question2:","55bb1038":"#### Predicting a new result with Linear Regression","7b59c551":"#### 5 - Training the Polynomial Regression model on  dataset","919e96a0":"#### 1- import Libraries ","bddcfd44":"## Machine Learning Algorithm  (PLR)"}}