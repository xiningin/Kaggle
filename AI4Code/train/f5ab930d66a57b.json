{"cell_type":{"9f80312b":"code","6fc8eabf":"code","6dd374ec":"code","33ec387d":"code","67f3a1aa":"code","5cc9fb40":"code","fef0e5cc":"code","f191aef9":"code","9fbfcd80":"code","74c4bd61":"code","084ff99f":"code","970003b5":"code","2dbfd14b":"code","6bd240a2":"code","9fdf16de":"code","994191f6":"code","8d9912f8":"code","7d96ff27":"code","7b35ad32":"code","1e4004cb":"code","cc14f3ba":"code","7d2a02bf":"code","26839436":"code","dc23fd4a":"code","4f6199b8":"code","6cac9a85":"code","5837601a":"markdown","f4f41147":"markdown","d94f075f":"markdown","4c7c445b":"markdown","737782a7":"markdown","d7f92dae":"markdown"},"source":{"9f80312b":"import numpy as np \nimport pandas as pd \nfrom sklearn.tree import DecisionTreeClassifier, plot_tree\nfrom sklearn.metrics import confusion_matrix\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing  import StandardScaler, LabelEncoder, MinMaxScaler, RobustScaler\npd.set_option('display.max_rows', None)\nimport sklearn\nfrom sklearn.pipeline import make_pipeline\npd.set_option('display.max_rows', None)","6fc8eabf":"#loading data into dataframes\ntrain = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\ntrain.head()","6dd374ec":"#see information about the data\ntrain.info()\nprint('****'*10)\ntest.info()","33ec387d":"#concatinating dataframes\nntrain = len(train)\nntest = len(test)\ntest_id = test['Id']\nfull_df = pd.concat([train,test])\nfull_df.shape","67f3a1aa":"#Finding the unique values for all the category columns\nfor col in full_df.select_dtypes('O').columns:\n    print(\"we have {} unique values in {} column: {}\".format(len(full_df[col].unique()),col,full_df[col].unique()))","5cc9fb40":"#correlation with SalePrice\ncorr = train.corr()\ncorr['SalePrice'].sort_values(ascending = False)[1:15].to_frame()","fef0e5cc":"#correlation matrix\ncorr = train.corr()\ncmap = sns.diverging_palette(180, 30, as_cmap=True)\nwith sns.axes_style('white'):\n    fig, ax = plt.subplots(figsize=(25, 25))\n    sns.heatmap(corr,   cmap=cmap, annot=True, center=0, vmin=-1, vmax=0.8,\n                square=True, cbar_kws={'shrink':.5, 'orientation': 'vertical'}, linewidth=.02);\n","f191aef9":"#outliers detection\nhigh_corr = corr['SalePrice'].sort_values()[1:13].index.to_list()\nfig, axes = plt.subplots(4,3, figsize=(20, 10), sharey=True);\nplt.subplots_adjust(hspace = 0.7, wspace=0.1)\nfor i,col in zip(range(12),high_corr):\n    sns.scatterplot(y=train['SalePrice'], x=train[col], ax=axes[i\/\/3][i%3])","9fbfcd80":"#selecting index of outliers\ndrop_index = train[((train['GarageArea']>1200) & (train['SalePrice']<300000))|\n                  ((train['GrLivArea']>5000) & (train['SalePrice']<300000))|\n                  ((train['1stFlrSF']>3500) & (train['SalePrice']<300000))|\n                  ((train['TotalBsmtSF']>4000) & (train['SalePrice']<300000))|\n                  ((train['MasVnrArea']>1230) & (train['SalePrice']<700000))|\n                  ((train['SalePrice']>600000))].index","74c4bd61":"for col in full_df.select_dtypes('O').columns:\n    if (len(full_df[col].unique())):\n        print(\"{}\\n{}\\n\".format('****'*10,full_df[col].value_counts()))","084ff99f":"#some columns have onlly one value so we can delete them\ndel full_df['Utilities']\n","970003b5":"#amount of nulls\ncorr = train.corr()\ncorr['SalePrice'].sort_values(ascending = False)[1:15].to_frame()\nfull_df.isnull().sum().sort_values(ascending = False)[:35].to_frame()","2dbfd14b":"#numeric coumns\nnum_cols = ['LotFrontage', 'LotArea', 'YearBuilt','YearRemodAdd', 'MasVnrArea', \n            'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', '1stFlrSF', '2ndFlrSF', 'LowQualFinSF', \n            'GrLivArea', 'BsmtFullBath', 'BsmtHalfBath', 'FullBath', 'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', \n            'Fireplaces', 'GarageYrBlt', 'GarageCars', 'GarageArea', 'WoodDeckSF', 'OpenPorchSF', 'EnclosedPorch', \n            '3SsnPorch', 'ScreenPorch', 'PoolArea', 'MiscVal']\n#categorical columns\ncat_cols = ['MSSubClass', 'MSZoning', 'Street', 'Alley', 'LotShape', 'LandContour','LotConfig', 'LandSlope', 'Neighborhood',\n            'Condition1', 'Condition2','BldgType', 'HouseStyle', 'RoofStyle', 'RoofMatl', 'Exterior1st','Exterior2nd', \n            'MasVnrType', 'ExterQual', 'ExterCond', 'Foundation','BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', \n            'BsmtFinType2','Heating', 'HeatingQC', 'CentralAir', 'Electrical', 'KitchenQual','TotRmsAbvGrd', 'Functional', \n            'FireplaceQu', 'GarageType','GarageFinish', 'GarageQual', 'GarageCond', 'PavedDrive', 'PoolQC','Fence', \n            'MiscFeature', 'MoSold', 'SaleType', 'SaleCondition','OverallCond', 'YrSold']\n\nnull_cat = full_df[cat_cols].isnull().sum()[full_df[cat_cols].isnull().sum()>0].index\nnull_num = full_df[num_cols].isnull().sum()[full_df[num_cols].isnull().sum()>0].index","6bd240a2":"#columns for '0' replacing\nzero_col = ['BsmtFinSF1', 'BsmtFinSF2', 'TotalBsmtSF', \n          'BsmtFullBath','MasVnrArea','BsmtHalfBath',\n          'BsmtUnfSF','GarageYrBlt','GarageCars','GarageArea']\n\n\nfor col in zero_col:\n    full_df[col].fillna(0, inplace=True) \n\n    \n#columns for 'NA' replacing  \nNA_col = ['BsmtCond','BsmtExposure','BsmtQual','BsmtFinType1','BsmtFinType2','GarageCond',\n          'GarageQual','GarageType','GarageFinish',\n         'MasVnrType','PoolQC','Alley','Fence','FireplaceQu','MiscFeature']\n\nfor col in NA_col:\n    full_df[col].fillna('NA', inplace=True)\n\nfull_df['Functional'].fillna('Typ' ,inplace=True)\nfull_df['Electrical'].fillna('SBrkr' ,inplace=True)\nfull_df['SaleType'].fillna('Oth' ,inplace=True)\nfull_df['KitchenQual'].fillna('TA' ,inplace=True)\nfull_df['SaleType'].fillna('Oth' ,inplace=True)\nfull_df['Exterior1st'].fillna('Other' ,inplace=True)\nfull_df['Exterior2nd'].fillna('Other' ,inplace=True)\n\ntrainn = full_df[:ntrain].reset_index().drop('index',axis=1)\ntestt = full_df[ntrain:].reset_index().drop('index',axis=1)\n\nfor data in [trainn,testt]:\n    data['LotFrontage'] = data.groupby('Neighborhood')['LotFrontage'].apply(lambda x: x.fillna(x.median()))\n    data['MSZoning'] = data['MSZoning'].transform(lambda x: x.fillna(x.mode()[0]))\n    \nfull_df=pd.concat([trainn,testt])","9fdf16de":"full_df.isnull().sum()","994191f6":"full_df['YrSold'] = full_df['YrSold'].astype(str)\nfull_df['MoSold'] = full_df['MoSold'].astype(str)\nfull_df['MSSubClass'] = full_df['MSSubClass'].apply(str)\nfull_df['OverallCond'] = full_df['OverallCond'].astype(str)","8d9912f8":"for c in cat_cols:\n    lbl = LabelEncoder() \n    full_df[c] = lbl.fit_transform(full_df[c])\n    full_df[c] = full_df[c].astype(int)","7d96ff27":"Y_train = train['SalePrice']\ndel train['SalePrice']\n\n#Converting the saleprice with Logarithms\nY_train = np.log1p(Y_train)","7b35ad32":"full_df[num_cols] = full_df[num_cols].apply(lambda x:np.log1p(x)) #Normalize the data with Logarithms\n\ntrain_set = full_df[:ntrain].reset_index().drop('index',axis=1)\ntest_set = full_df[ntrain:].reset_index().drop('index',axis=1)\n\ntrain_set = train_set.drop(drop_index)\nY_train = Y_train.drop(drop_index)","1e4004cb":"train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\nsubmission = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv')\nnum_cols = [ 'LotArea', 'YearBuilt','YearRemodAdd', 'MasVnrArea', \n            'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', '1stFlrSF', '2ndFlrSF', 'LowQualFinSF', \n            'GrLivArea', 'BsmtFullBath', 'BsmtHalfBath', 'FullBath', 'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', \n            'Fireplaces', 'GarageYrBlt', 'GarageCars', 'GarageArea', 'WoodDeckSF', 'OpenPorchSF', 'EnclosedPorch', \n            '3SsnPorch', 'ScreenPorch', 'PoolArea', 'MiscVal']\n\ncat_cols = ['MSSubClass',  'Street', 'Alley', 'LotShape', 'LandContour','LotConfig', 'LandSlope', 'Neighborhood',\n            'Condition1', 'Condition2','BldgType', 'HouseStyle', 'RoofStyle', 'RoofMatl', 'Exterior1st','Exterior2nd', \n            'MasVnrType', 'ExterQual', 'ExterCond', 'Foundation','BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', \n            'BsmtFinType2','Heating', 'HeatingQC', 'CentralAir', 'Electrical', 'KitchenQual','TotRmsAbvGrd', 'Functional', \n            'FireplaceQu', 'GarageType','GarageFinish', 'GarageQual', 'GarageCond', 'PavedDrive', 'PoolQC','Fence', \n            'MiscFeature', 'MoSold', 'SaleType', 'SaleCondition','OverallCond', 'YrSold']\n\ndrop_index = train[((train['GarageArea']>1200) & (train['SalePrice']<300000))|\n                  ((train['GrLivArea']>5000) & (train['SalePrice']<300000))|\n                  ((train['1stFlrSF']>4000) & (train['SalePrice']<300000))|\n                  ((train['TotalBsmtSF']>5000) & (train['SalePrice']<300000))|\n                  ((train['MasVnrArea']>1200) & (train['SalePrice']<700000))|\n                  ((train['SalePrice']>600000))].index\n\nY_train = train['SalePrice']\ndel train['SalePrice']\n\n#Converting the saleprice with Logarithms to overcome the high skewness and the outliers\nY_train = np.log1p(Y_train) \n\n#Y_train = Y_train.drop(drop_index)\nY_train.shape","cc14f3ba":"def prepare(df):\n    BS_col = ['BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF','TotalBsmtSF', \n          'BsmtFullBath','MasVnrArea','BsmtHalfBath','BsmtFinSF1', \n          'BsmtFinSF2', 'BsmtUnfSF','GarageYrBlt','GarageCars','GarageArea']\n\n    for col in BS_col:\n        df[col].fillna(0, inplace=True) \n    \n    na_cols = ['BsmtCond','BsmtExposure','BsmtQual','BsmtFinType1',\n               'BsmtFinType2','GarageCond','GarageQual','GarageType',\n               'GarageFinish','MasVnrType','PoolQC','Alley','Fence','FireplaceQu','MiscFeature']\n    \n    for col in na_cols:\n        df[col].fillna('NA', inplace=True) \n        \n    gr_col = ['GarageType','GarageYrBlt','GarageFinish','GarageCars',\n          'GarageArea','GarageQual','GarageCond','MasVnrType','PoolQC','Alley','Fence']\n\n    df['Functional'].fillna('Typ' ,inplace=True)    \n    df['Electrical'].fillna('SBrkr' ,inplace=True) \n    df['SaleType'].fillna('Oth' ,inplace=True)     \n    df['KitchenQual'].fillna('TA' ,inplace=True)   \n    df['SaleType'].fillna('Oth' ,inplace=True)      \n    df['Exterior1st'].fillna('Other' ,inplace=True) \n    df['Exterior2nd'].fillna('Other' ,inplace=True) \n    del df['Utilities']\n    del df['LotFrontage']\n    del df['MSZoning']\n    \n    df['YrSold'] = df['YrSold'].astype(str)\n    df['MoSold'] = df['MoSold'].astype(str)\n    df['MSSubClass'] = df['MSSubClass'].apply(str)\n    df['OverallCond'] = df['OverallCond'].astype(str)\n    \n    for c in cat_cols:\n        lbl = sklearn.preprocessing.LabelEncoder() \n        df[c] = lbl.fit_transform(df[c])\n        \n    for col in cat_cols:\n        df[col] = df[col].astype(int)\n    \n    for col in cat_cols:\n        dumm = pd.get_dummies(df[col], prefix = col, dtype=int)\n        df = pd.concat([df,dumm], axis=1)\n        \n    df.drop(cat_cols, axis=1, inplace=True)\n    df[num_cols] = df[num_cols].apply(lambda x:np.log1p(x)) \n    df = df.drop(drop_index)\n        \nprepare(train)\nprepare(test)","7d2a02bf":"ElasticNet = make_pipeline(sklearn.preprocessing.RobustScaler(),sklearn.linear_model.ElasticNet(alpha=0.0005,l1_ratio=0.9))","26839436":"model = ElasticNet.fit(train,Y_train)","dc23fd4a":"y_pred_test = model.predict(test)\ny_pred_train = model.predict(train)","4f6199b8":"submission = pd.DataFrame({\n        \"Id\": test['Id'],\n        \"SalePrice\": y_pred_test *10000 })\n\ntrain_res = pd.DataFrame({\n        \"Id\": train['Id'],\n        \"SalePrice\": y_pred_train })","6cac9a85":"submission.to_csv('.\/submission.csv', index=False)","5837601a":"<a class=\"anchor\" id=\"2\"><\/a>\n## 2. Download datasets \n##### [Back to Table of Contents](#0.1)","f4f41147":"<a class=\"anchor\" id=\"1\"><\/a>\n## 1. Import libraries \n##### [Back to Table of Contents](#0.1)","d94f075f":"<a class=\"anchor\" id=\"4\"><\/a>\n## 4. Prediction\n##### [Back to Table of Contents](#0.1)\n","4c7c445b":"<a class=\"anchor\" id=\"3\"><\/a>\n## 3. EDA\n##### [Back to Table of Contents](#0.1)\n\n","737782a7":"<a class=\"anchor\" id=\"0.1\"><\/a>\n## **Table of Contents**\n1. [Import libraries](#1)\n2. [Download datasets](#2)\n3. [EDA](#3)\n4. [Prediction](#4)","d7f92dae":"My notebook for studying regression techniques at univercity"}}