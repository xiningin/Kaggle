{"cell_type":{"0b8a920c":"code","eec6f890":"code","5e398962":"code","f55864e9":"code","f5ee9b1c":"code","7202e970":"code","302f271d":"code","02bc72c0":"code","cda78ef1":"code","b052212c":"code","7a278524":"code","25c2358f":"code","d9c413bc":"markdown","a6436273":"markdown","fdd6b0b7":"markdown","06618dae":"markdown","302db816":"markdown","8664d583":"markdown","00221a87":"markdown","0a7546c7":"markdown","0f73d6f7":"markdown"},"source":{"0b8a920c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","eec6f890":"data=pd.read_csv('..\/input\/videogamesales\/vgsales.csv')","5e398962":"data","f55864e9":"plt.figure(figsize=(30,10))\nplt.bar(data['Platform'].value_counts().index,data['Platform'].value_counts())","f5ee9b1c":"plt.figure(figsize=(30,10))\nplt.hist(data['Year'],bins=[a for a in range(1981,2021)],rwidth=0.5)\nplt.show()","7202e970":"plt.figure(figsize=(30,10))\nplt.bar(data['Genre'].value_counts().index,data['Genre'].value_counts())\nplt.show()","302f271d":"df_Publisher=pd.DataFrame(data.groupby(\"Publisher\").Rank.count())\ndf_Publisher = df_Publisher.rename(columns={\"Rank\": \"count\"})\ndf_Publisher = df_Publisher.loc[df_Publisher[\"count\"] > 300]\n\ningredients = list(df_Publisher.index)\nplt.figure(figsize=(22,6))\na = sns.barplot(x=df_Publisher.index, y=df_Publisher[\"count\"])\na.set_xticklabels(labels=df_Publisher.index, rotation=-65) \nplt.show()","02bc72c0":"dff = data.groupby(['Publisher'], as_index=False)['Global_Sales'].count()\ndff=dff[dff['Global_Sales']>400]\nplt.figure(figsize=(30,10))\n\nsns.barplot(x='Publisher',data=dff,y='Global_Sales')","cda78ef1":"df=data[['Name','Global_Sales']].sort_values('Global_Sales',ascending=False)[:10]\nplt.figure(figsize=(30,8))\nsns.barplot(data=df,x='Name',y='Global_Sales')","b052212c":"sales=data[['Genre', 'NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales']]\nsales = sales.groupby('Genre').sum()\nplt.figure(figsize=(20,10))\nsns.heatmap(sales,annot=True,fmt= '.0f')","7a278524":"sales.plot.bar(figsize=(20,10),fontsize=30)\nplt.tight_layout()\nplt.show()","25c2358f":"sales1=data[['Year', 'NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales']].groupby('Year').sum()\nsales1.index=sales1.index.astype(int)\nsales1.plot.bar(figsize=(20,10),fontsize=30)\nplt.tight_layout()\nplt.show()","d9c413bc":"**Genre vs sales heatmap**","a6436273":"Which Genre has the highest no. of games","fdd6b0b7":"**Highest Global_Sales game**","06618dae":"**Platform have highest games**","302db816":"**Genre vs sales plot**","8664d583":"**Year vs sales plot**","00221a87":"VIEW DATA","0a7546c7":"**Game Publishers vs their games count**","0f73d6f7":"**no of Games release in a year**"}}