{"cell_type":{"fec070b6":"code","73672262":"code","9e60ff39":"code","e9bed770":"code","e6773f77":"code","7a52a7cf":"code","815e6b9f":"code","d427ffde":"code","0b1c85d8":"code","fa926ad5":"markdown","56af67dc":"markdown","9cbb5d1e":"markdown","2d113427":"markdown","613a7d8a":"markdown","7a092ecd":"markdown","bfa34db1":"markdown","4518328d":"markdown","dd0cad88":"markdown"},"source":{"fec070b6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom pandas.plotting import register_matplotlib_converters\nregister_matplotlib_converters()\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","73672262":"CGMDatenum_filepath = \"..\/input\/continuous-blood-glucose-monitor-data\/CGMDatenumLunchPat1.csv\"\nCGMSeries_filepath = \"..\/input\/continuous-blood-glucose-monitor-data\/CGMSeriesLunchPat1.csv\"\n\nCGMDatenumDf = pd.read_csv(CGMDatenum_filepath)\nCGMSeriesDf = pd.read_csv(CGMSeries_filepath)\n\nCGMSeriesList = CGMSeriesDf.values.tolist()\nCGMDatenumList = CGMDatenumDf.values.tolist()\n\n\n# CGM Velocity for day 20\nCGMVel = np.subtract(CGMSeriesList[19][:-2], CGMSeriesList[19][1:-1])\nprint(np.flip(CGMVel))\n\nplt.plot(CGMTimestampDf.iloc[19][1:-1],np.flip(CGMVel))\n","9e60ff39":"CGMSeriesDf.shape\nCGMDatenumDf.shape\n\nCGMSeriesDf.head()\nCGMDatenumDf.head()\n\n# function to convert datenum -> timestamp\ndef toDatetime(ts):\n    timestamp = pd.to_datetime(ts-719529, unit='D').round('1s')\n    return timestamp\n\n#convert CGMDatenumDf to timestamp format Df\nCGMTimestampDf = CGMDatenumDf.applymap(lambda i : toDatetime(i))\n\nCGMTimestampDf.shape\nCGMTimestampDf.head()","e9bed770":"plt.figure(figsize=(12,6))\n\nplt.plot_date(CGMTimestampDf.iloc[19], CGMSeriesDf.iloc[19])\n#Day 2 series\n#plt.plot_date(CGMTimestampDf[:2], CGMSeriesDf.iloc[:2,:]) \nplt.show()\n","e6773f77":"CGMDay1 = pd.DataFrame(CGMSeriesList[0])\n\n#construct a new dataset with our new columns\nCGMDay1_lag = pd.concat([CGMDay1.shift(1),CGMDay1], axis=1)\nCGMDay1_lag.columns = ['t-1','t+1']\nprint(CGMDay1_lag.head(5))\n\nplt.plot(CGMDay1_lag)","7a52a7cf":"CGMDay1 = pd.DataFrame(CGMSeriesList[19])\nwidth = 2\nshifted = CGMDay1.shift(width-1)\nwindow = shifted.rolling(window=width)\n#construct a new dataset with our new columns\nCGMDay1_lag = pd.concat([window.min(),window.mean(),window.max(),window.max()-window.min()], axis=1)\nCGMDay1_lag.columns = ['min', 'mean', 'max', 'max-min']\nprint(CGMDay1_lag.head(5))\n\nplt.plot(CGMDay1_lag)","815e6b9f":"from statsmodels.graphics.tsaplots import plot_acf\n\n#print(CGMSeriesDf.T[0])\nplot_acf(CGMSeriesDf.T[0])\nplt.show()","d427ffde":"from statsmodels.graphics.tsaplots import plot_pacf\n\nplot_pacf(CGMSeriesDf.T[0])\nplt.show()","0b1c85d8":"windowSize = 10\nstartSample = 1\nendSample = startSample + windowSize -1\n\nk=1\nwhile endSample<len(CGMSeriesList[19]) and k<=6:\n    meanCGM = np.mean(CGMSeriesList[19][startSample:endSample])\n    startSample = startSample + windowSize\/2\n    endSample = startSample + windowSize\n    k+=1\n    print(startSample, endSample)","fa926ad5":"**Rolling Window Statistics for CGM Day1**","56af67dc":"Overlapping windowed mean","9cbb5d1e":"**CGM TimeSeries plot**","2d113427":"**Data Preprocessing**","613a7d8a":"**Lag Features**","7a092ecd":"**Partial Auto Correlation Function**","bfa34db1":"**Auto Correlation Function**","4518328d":"**Setup Environment**","dd0cad88":"**Read Data from csv files**"}}