{"cell_type":{"b22c1274":"code","4df12ef9":"code","d1a37ce1":"code","34b0a0c4":"code","4a0e39f4":"code","fc9a614b":"code","b018f325":"code","fd1f9ccd":"code","1236eab2":"code","d45e6bd7":"code","64a51f21":"code","69bf5712":"code","0879ce33":"code","a0abd4ff":"code","01f0f05d":"code","909eadde":"code","6c27e56a":"code","8d5ab151":"code","ddcab68b":"code","2e3475c1":"code","7294b11d":"code","1c7dafc7":"code","4a8865eb":"markdown","b11640c1":"markdown","95e7f03f":"markdown","c6f83742":"markdown","6a90370f":"markdown","de0cf25b":"markdown","75658d2b":"markdown","c302f243":"markdown","b4d43657":"markdown","5991b6b5":"markdown","fe0b32b8":"markdown","d5f3ba0c":"markdown","9ee31c28":"markdown","f8befbf0":"markdown","b2325a2d":"markdown","4443b69f":"markdown","1ec9c653":"markdown"},"source":{"b22c1274":"import numpy as np \nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.model_selection import train_test_split\nfrom scipy import stats\n","4df12ef9":"import os\nif not os.path.exists(\"..\/input\/train.csv\"):\n    os.symlink(\"..\/input\/home-data-for-ml-course\/train.csv\", \"..\/input\/train.csv\")  \n    os.symlink(\"..\/input\/home-data-for-ml-course\/test.csv\", \"..\/input\/test.csv\") \nfrom learntools.core import binder\nbinder.bind(globals())\nfrom learntools.ml_intermediate.ex3 import *","d1a37ce1":"X = pd.read_csv('..\/input\/train.csv') \ntest = pd.read_csv('..\/input\/test.csv')\ny=X.SalePrice\n","34b0a0c4":"normalized_data=stats.boxcox(y)\nfig,ax = plt.subplots(1,2)\nsns.distplot(y,ax=ax[0])\nax[0].set_title(\"orginal data\")\nsns.distplot(normalized_data[0] , ax=ax[1])\nax[1].set_title(\"normalized data\")","4a0e39f4":"plt.figure(figsize=(10,10))\nsns.lineplot(data=X)","fc9a614b":"cor=X.corr()\nhigh_cor=cor.index[cor['SalePrice']>.5]\nplt.figure(figsize=(9,9))\nsns.heatmap(X[high_cor].corr(),annot=True,cmap='Blues')","b018f325":"cor['SalePrice'].sort_values(ascending=False)","fd1f9ccd":"features= ['OverallQual', 'GrLivArea', 'GarageCars', 'TotalBsmtSF', 'FullBath', 'YearBuilt','1stFlrSF','TotRmsAbvGrd','YearRemodAdd','GarageYrBlt','MasVnrArea','Fireplaces','LotFrontage']","1236eab2":"for col in features:\n    sns.lmplot(x='SalePrice',y=col,data=X)\n","d45e6bd7":"test_id = test['Id']\ntotal_data = pd.concat([X, test], axis=0, sort=False)\ntotal_data = total_data.drop(['Id', 'SalePrice'], axis=1)","64a51f21":"missing_values_count = total_data.isnull().sum().sort_values(ascending=False)\ntotal_cells = np.product(total_data.shape)\ntotal_missing = missing_values_count.sum()\npercent_missing = (total_missing\/total_cells) * 100\n","69bf5712":"percent= (total_data.isnull().sum() \/ total_data.isnull().count().sort_values(ascending=False)*100)\nmissing_data = pd.concat([missing_values_count,percent], axis=1, keys=['missing', 'percent'])\nmissing_data.head(30)","0879ce33":"total_data.drop(missing_data[missing_data['missing']>5].index,axis=1,inplace=True)","a0abd4ff":"total_data.info()","01f0f05d":"a=total_data.isnull().sum().sort_values(ascending=False)\na.head(20)","909eadde":"from sklearn.preprocessing import LabelEncoder\nobject_cols = [col for col in total_data.columns if total_data[col].dtype == \"object\"]\nlabel_encoder=LabelEncoder()\nfor col in object_cols:\n    total_data[col]=label_encoder.fit_transform(total_data[col])\ntotal_data.info()\n    ","6c27e56a":"from sklearn.impute import SimpleImputer\nnumeric_cols = [col for col in total_data.columns if total_data[col].dtype in ['int64','float64']]\nmy_imputer=SimpleImputer(strategy='median')\ndata = pd.DataFrame(my_imputer.fit_transform(total_data))\ndata.columns = total_data.columns\na=data.isnull().sum().sort_values(ascending=False)\na.head(25)","8d5ab151":"x_train =data[:len(y)]\nx_test = data[len(y):]\nx_train.info()\nx_test.info()","ddcab68b":"X_train, X_valid, y_train, y_valid = train_test_split(x_train, y, train_size=0.8, test_size=0.2, random_state=1)","2e3475c1":"model = RandomForestRegressor(n_estimators=200, random_state=1)\nmodel.fit(X_train, y_train)\npreds = model.predict(X_valid)\nprint(mean_absolute_error(y_valid, preds))","7294b11d":"preds_test =model.predict(x_test)\nprint(preds_test)\n","1c7dafc7":"sub = pd.DataFrame()\nsub['Id'] = test_id\nsub['SalePrice'] = preds_test\nsub.to_csv('mysubmission.csv',index=False)\n","4a8865eb":"**Line plot of train data**","b11640c1":"**if you learn a single word please share with others**","95e7f03f":"# Drop target from train data and add train and test data for clean simple way","c6f83742":"# Import necessary tools","6a90370f":"# Here i use label encoder method for object columns","de0cf25b":" **Here i select highest corelation features**","75658d2b":"**sort value based on saleprice** ","c302f243":"# Here i showed the corelation based on saleprice using heatmap","b4d43657":"# Apply machine learning model","5991b6b5":"**count missing value**","fe0b32b8":"**missing data and precent of missing data for each column**","d5f3ba0c":"# Load train and test file","9ee31c28":"# Here i use boxcox transformation for normalized target variable","f8befbf0":"# if you learn a single word please share with others\n**happy coding...**","b2325a2d":"# Here i showed the relation between features and saleprice","4443b69f":"# here i use simple imputer method for numeric value","1ec9c653":"# separate train and test after clean"}}