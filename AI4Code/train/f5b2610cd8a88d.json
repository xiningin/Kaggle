{"cell_type":{"ad4f804a":"code","0631a0b7":"code","a60be63c":"code","9918c6e0":"code","f5238f52":"code","093368e2":"code","4d43138a":"code","8e0b1a31":"code","68f67dd2":"code","1360fdcb":"code","c3623121":"code","7d5b38c5":"code","e87b3134":"code","4bd19aae":"code","c7ebda81":"code","da55eb41":"code","796a5f59":"code","c23431da":"code","1f44c41c":"code","3756d18f":"code","e2209ee0":"code","06684d97":"code","e61d710b":"code","3272a7ea":"code","0d0bb42c":"code","7100812f":"code","4f648b72":"code","9330acac":"code","d7985bac":"code","a20c4fa7":"code","86ef679a":"code","83ec58c4":"code","1f74010e":"markdown","44dc2078":"markdown","6282fad7":"markdown","6b1ccde2":"markdown","41db74ce":"markdown","1bc04928":"markdown"},"source":{"ad4f804a":"import os\nimport numpy as np\nimport pandas as pd\nimport random\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom contextlib import contextmanager\nfrom time import time\nfrom tqdm import tqdm\nimport lightgbm as lgbm\nimport category_encoders as ce\n\nfrom tensorflow.keras.utils import to_categorical\nfrom sklearn.metrics import classification_report, log_loss, accuracy_score\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import KFold","0631a0b7":"data0=pd.read_csv('..\/input\/oesophageal-cancer-patient-data\/Esophageal Cancer Clinical Data.csv')\ndata0[0:2].T[0:40]","a60be63c":"data0[0:2].T[40:]","9918c6e0":"print(data0.columns.tolist())","f5238f52":"data0.info()","093368e2":"data0['vital_status'].value_counts()","4d43138a":"print(data0.shape)","8e0b1a31":"print(data0.select_dtypes(include=object).columns.tolist())","68f67dd2":"list_cols = ['patient_barcode', 'tissue_source_site', 'patient_id', 'bcr_patient_uuid', 'informed_consent_verified', 'icd_o_3_site', 'icd_o_3_histology', 'icd_10', 'tissue_prospective_collection_indicator', 'tissue_retrospective_collection_indicator', 'country_of_birth', 'gender', 'country_of_procurement', 'state_province_of_procurement', 'city_of_procurement', 'race_list', 'ethnicity', 'other_dx', 'history_of_neoadjuvant_treatment', 'person_neoplasm_cancer_status', 'vital_status', 'alcohol_history_documented', 'reflux_history', 'antireflux_treatment_types', 'h_pylori_infection', 'initial_diagnosis_by', 'barretts_esophagus', 'goblet_cells_present', 'history_of_esophageal_cancer', 'has_new_tumor_events_information', 'has_follow_ups_information', 'has_drugs_information', 'has_radiations_information', 'project', 'stage_event_system_version', 'stage_event_clinical_stage', 'stage_event_pathologic_stage', 'stage_event_tnm_categories', 'primary_pathology_tumor_tissue_site', 'primary_pathology_esophageal_tumor_cental_location', 'primary_pathology_esophageal_tumor_involvement_sites', 'primary_pathology_histological_type', 'primary_pathology_columnar_metaplasia_present', 'primary_pathology_columnar_mucosa_goblet_cell_present', 'primary_pathology_columnar_mucosa_dysplasia', 'primary_pathology_neoplasm_histologic_grade', 'primary_pathology_initial_pathologic_diagnosis_method', 'primary_pathology_init_pathology_dx_method_other', 'primary_pathology_lymph_node_metastasis_radiographic_evidence', 'primary_pathology_primary_lymph_node_presentation_assessment', 'primary_pathology_planned_surgery_status', 'primary_pathology_treatment_prior_to_surgery', 'primary_pathology_residual_tumor', 'primary_pathology_radiation_therapy', 'primary_pathology_postoperative_rx_tx']\nce_ohe = ce.OrdinalEncoder(cols=list_cols,handle_unknown='impute')\ndata1 = ce_ohe.fit_transform(data0)\ndata1","1360fdcb":"data1=data1.fillna(0)","c3623121":"# columns on primary pathology\ncolumns_focused=['primary_pathology_tumor_tissue_site', 'primary_pathology_esophageal_tumor_cental_location', 'primary_pathology_esophageal_tumor_involvement_sites', 'primary_pathology_histological_type', 'primary_pathology_columnar_metaplasia_present', 'primary_pathology_columnar_mucosa_goblet_cell_present', 'primary_pathology_columnar_mucosa_dysplasia', 'primary_pathology_neoplasm_histologic_grade', 'primary_pathology_initial_pathologic_diagnosis_method', 'primary_pathology_init_pathology_dx_method_other', 'primary_pathology_lymph_node_metastasis_radiographic_evidence', 'primary_pathology_primary_lymph_node_presentation_assessment', 'primary_pathology_planned_surgery_status', 'primary_pathology_treatment_prior_to_surgery', 'primary_pathology_residual_tumor', 'primary_pathology_radiation_therapy', 'primary_pathology_postoperative_rx_tx']\n\n# columns on lifestyle\n# columns_focused=['tobacco_smoking_history', 'age_began_smoking_in_years', 'stopped_smoking_year', 'number_pack_years_smoked', 'frequency_of_alcohol_consumption', 'amount_of_alcohol_consumption_per_day',  ]","7d5b38c5":"target=['vital_status']\ndatay=data1[target]\ndatax=data1[columns_focused]","e87b3134":"n=len(data1)\nprint(n)","4bd19aae":"N=list(range(n))\nrandom.seed(2021)\nrandom.shuffle(N)","c7ebda81":"trainX=datax.loc[N[0:(n\/\/4)*3]]\ntrainY=datay.loc[N[0:(n\/\/4)*3]]\ntestX=datax.loc[N[(n\/\/4)*3:]]\ntestY=datay.loc[N[(n\/\/4)*3:]]","da55eb41":"print(trainX.shape)\nprint(testX.shape)","796a5f59":"df_columns = list(datax.columns)\nprint(df_columns)","c23431da":"train_df=trainX\ntest_df=testX","1f44c41c":"train_df.columns=df_columns\ntest_df.columns=df_columns","3756d18f":"def create_numeric_feature(input_df):\n    use_columns = df_columns \n    return input_df[use_columns].copy()","e2209ee0":"from contextlib import contextmanager\nfrom time import time\n\nclass Timer:\n    def __init__(self, logger=None, format_str='{:.3f}[s]', prefix=None, suffix=None, sep=' '):\n\n        if prefix: format_str = str(prefix) + sep + format_str\n        if suffix: format_str = format_str + sep + str(suffix)\n        self.format_str = format_str\n        self.logger = logger\n        self.start = None\n        self.end = None\n\n    @property\n    def duration(self):\n        if self.end is None:\n            return 0\n        return self.end - self.start\n\n    def __enter__(self):\n        self.start = time()\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.end = time()\n        out_str = self.format_str.format(self.duration)\n        if self.logger:\n            self.logger.info(out_str)\n        else:\n            print(out_str)","06684d97":"from tqdm import tqdm\n\ndef to_feature(input_df):\n\n    processors = [\n        create_numeric_feature,\n    ]\n    \n    out_df = pd.DataFrame()\n    \n    for func in tqdm(processors, total=len(processors)):\n        with Timer(prefix='create' + func.__name__ + ' '):\n            _df = func(input_df)\n\n        assert len(_df) == len(input_df), func.__name__\n        out_df = pd.concat([out_df, _df], axis=1)\n        \n    return out_df","e61d710b":"train_feat_df = to_feature(train_df)\ntest_feat_df = to_feature(test_df)","3272a7ea":"import lightgbm as lgbm\nfrom sklearn.metrics import mean_squared_error\n\ndef fit_lgbm(X, y, cv, \n             params: dict=None, \n             verbose: int=50):\n\n    if params is None:\n        params = {}\n\n    models = []\n    oof_pred = np.zeros_like(y, dtype=np.float)\n\n    for i, (idx_train, idx_valid) in enumerate(cv): \n        x_train, y_train = X[idx_train], y[idx_train]\n        x_valid, y_valid = X[idx_valid], y[idx_valid]\n\n        clf = lgbm.LGBMRegressor(**params)\n        \n        with Timer(prefix='fit fold={} '.format(i)):\n            clf.fit(x_train, y_train, \n                    eval_set=[(x_valid, y_valid)],  \n                    early_stopping_rounds=100,\n                    verbose=verbose)\n\n        pred_i = clf.predict(x_valid)\n        oof_pred[idx_valid] = pred_i\n        models.append(clf)\n        print(f'Fold {i} RMSLE: {mean_squared_error(y_valid, pred_i) ** .5:.4f}')\n        print()\n\n    score = mean_squared_error(y, oof_pred) ** .5\n    print('-' * 50)\n    print('FINISHED | Whole RMSLE: {:.4f}'.format(score))\n    return oof_pred, models","0d0bb42c":"params = {\n    'objective': 'rmse', \n    'learning_rate': .1,\n    'reg_lambda': 1.,\n    'reg_alpha': .1,\n    'max_depth': 5, \n    'n_estimators': 10000, \n    'colsample_bytree': .5, \n    'min_child_samples': 10,\n    'subsample_freq': 3,\n    'subsample': .9,\n    'importance_type': 'gain', \n    'random_state': 71,\n    'num_leaves': 62\n}","7100812f":"y = trainY\nprint(y.shape)\nydf=pd.DataFrame(y)\nydf","4f648b72":"from sklearn.model_selection import KFold\n\nfor i in range(1):\n    fold = KFold(n_splits=5, shuffle=True, random_state=71)\n    ydfi=ydf.iloc[:,i]\n    y=np.array(ydfi)\n    cv = list(fold.split(train_feat_df, y))\n    oof, models = fit_lgbm(train_feat_df.values, y, cv, params=params, verbose=500)\n    \n    fig,ax = plt.subplots(figsize=(6,6))\n    ax.set_title(target[i],fontsize=20)\n    ax.set_xlabel('ACTUAL TRAIN '+target[i],fontsize=12)\n    ax.set_ylabel('PREDICTED TRAIN '+target[i],fontsize=12)\n    ax.scatter(y,oof)","9330acac":"def visualize_importance(models, feat_train_df):\n\n    feature_importance_df = pd.DataFrame()\n    for i, model in enumerate(models):\n        _df = pd.DataFrame()\n        _df['feature_importance'] = model.feature_importances_\n        _df['column'] = feat_train_df.columns\n        _df['fold'] = i + 1\n        feature_importance_df = pd.concat([feature_importance_df, _df], \n                                          axis=0, ignore_index=True)\n\n    order = feature_importance_df.groupby('column')\\\n        .sum()[['feature_importance']]\\\n        .sort_values('feature_importance', ascending=False).index[:30]\n    \n    fig, ax = plt.subplots(figsize=(12, max(8, len(order) * .25)))\n    sns.boxenplot(data=feature_importance_df, \n                  x='feature_importance', \n                  y='column', \n                  order=order, \n                  ax=ax, \n                  palette='viridis', \n                  orient='h')\n    \n    ax.tick_params(axis='x', rotation=0)\n    ax.set_title(target[0]+' Importance')\n    ax.grid()\n    fig.tight_layout()\n     \n    return fig,ax\n\n#fig, ax = visualize_importance(models, train_feat_df)","d7985bac":"pred1=[]\nfor i in range(1):\n    fold = KFold(n_splits=5, shuffle=True, random_state=71)\n    ydfi=ydf.iloc[:,i]\n    y=np.array(ydfi)\n    cv = list(fold.split(train_feat_df, y))\n    oof, models = fit_lgbm(train_feat_df.values, y, cv, params=params, verbose=500)\n    fig, ax = visualize_importance(models, train_feat_df)\n    ax.set_title(target[i]+' Imortance on Primary Pathology',fontsize=20)\n    pred0 = np.array([model.predict(test_feat_df.values) for model in models])\n    pred1+=[np.mean(pred0, axis=0)]","a20c4fa7":"pred1=np.array(pred1)\ntestY=np.array(testY)","86ef679a":"print(pred1.T.shape)\nprint(testY.shape)","83ec58c4":"for i in range(1):\n    fig,ax = plt.subplots(figsize=(6,6))\n    ax.set_title(target[i],fontsize=20)\n    ax.set_xlabel('ACTUAL TEST '+target[i],fontsize=12)\n    ax.set_ylabel('PRDICTED TEST '+target[i],fontsize=12)\n    ax.scatter(testY[:,i],pred1.T[:,i])","1f74010e":"## Select columns you focus","44dc2078":"## Train and Test setting","6282fad7":"# Visualize Importance and Predict","6b1ccde2":"# Data processing","41db74ce":"## Select target","1bc04928":"# Model"}}