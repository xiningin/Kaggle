{"cell_type":{"4f1ade87":"code","949d9eda":"code","718b2e5b":"code","a1bd1ec8":"code","376c2cb4":"code","445c76cb":"markdown","8a7fbc83":"markdown","3f476cac":"markdown","989b3fe3":"markdown","b2310628":"markdown","0b15fcbe":"markdown","1e5813ab":"markdown"},"source":{"4f1ade87":"import pandas as pd\n\n# Load data\nmelb_data = pd.read_csv('..\/input\/melbourne-housing-snapshot\/melb_data.csv')\n\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.model_selection import train_test_split\n\nmelb_target = melb_data.Price\nmelb_predictors = melb_data.drop(['Price'], axis=1)\n\n# For the sake of keeping the example simple, we'll use only numeric predictors. \nmelb_numeric_predictors = melb_predictors.select_dtypes(exclude=['object'])","949d9eda":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(melb_numeric_predictors, \n                                                    melb_target,\n                                                    train_size=0.7, \n                                                    test_size=0.3, \n                                                    random_state=0)\n\ndef score_dataset(X_train, X_test, y_train, y_test):\n    model = RandomForestRegressor()\n    model.fit(X_train, y_train)\n    preds = model.predict(X_test)\n    return mean_absolute_error(y_test, preds)","718b2e5b":"cols_with_missing = [col for col in X_train.columns \n                                 if X_train[col].isnull().any()]\n\nreduced_X_train = X_train.drop(cols_with_missing, axis=1)\nreduced_X_test  = X_test.drop(cols_with_missing, axis=1)\nprint(\"Mean Absolute Error from dropping columns with Missing Values:\")\nprint(score_dataset(reduced_X_train, reduced_X_test, y_train, y_test))","a1bd1ec8":"from sklearn.impute import SimpleImputer\n\nmy_imputer = SimpleImputer()\nimputed_X_train = my_imputer.fit_transform(X_train)\nimputed_X_test = my_imputer.transform(X_test)\nprint(\"Mean Absolute Error from Imputation:\")\nprint(score_dataset(imputed_X_train, imputed_X_test, y_train, y_test))","376c2cb4":"imputed_X_train_plus = X_train.copy()\nimputed_X_test_plus = X_test.copy()\n\ncols_with_missing = (col for col in X_train.columns \n                                 if X_train[col].isnull().any())\nfor col in cols_with_missing:\n    imputed_X_train_plus[col + '_was_missing'] = imputed_X_train_plus[col].isnull()\n    imputed_X_test_plus[col + '_was_missing'] = imputed_X_test_plus[col].isnull()\n\n    \n# Imputation\nmy_imputer = SimpleImputer()\nimputed_X_train_plus = my_imputer.fit_transform(imputed_X_train_plus)\nimputed_X_test_plus = my_imputer.transform(imputed_X_test_plus)\nprint(\"Mean Absolute Error from Imputation while Track What Was Imputed:\")\nprint(score_dataset(imputed_X_train_plus, imputed_X_test_plus, y_train, y_test))","445c76cb":"### Create Function to Measure Quality of An Approach\nWe divide our data into **training** and **test**. \n\nWe've loaded a function `score_dataset(X_train, X_test, y_train, y_test)` to compare the quality of diffrent approaches to missing values. This function reports the out-of-sample MAE score from a RandomForest.","8a7fbc83":"### Approach 1: Get Model Score from Dropping Columns with Missing Values","3f476cac":"### Approach 3: Get Score from Imputation with Extra Columns Showing What Was Imputed","989b3fe3":"# Handing missing values Drop vs Imputation vs Extension","b2310628":"# Conclusion\nAs is common, imputing missing values allowed us to improve our model compared to dropping those columns.  We got an additional boost by tracking what values had been imputed.","0b15fcbe":"\nIn this step, you will learn three approaches to dealing with missing values. You will then learn to compare the effectiveness of these approaches on any given dataset. \n\nForked: https:\/\/www.kaggle.com\/dansbecker\/handling-missing-values\n\n# Introduction\n\nThere are many ways data can end up with missing values. For example\n- A 2 bedroom house wouldn't include an answer for _How large is the third bedroom_\n- Someone being surveyed may choose not to share their income\n\nPython libraries represent missing numbers as **nan** which is short for \"not a number\".  You can detect which cells have missing values, and then count how many there are in each column with the command:\n```\nmissing_val_count_by_column = (data.isnull().sum())\nprint(missing_val_count_by_column[missing_val_count_by_column > 0\n```\n\nMost libraries (including scikit-learn) will give you an error if you try to build a model using data with missing values. So you'll need to choose one of the strategies below.\n\n---\n## Solutions\n\n\n## Approach 1 A Simple Option: Drop Columns with Missing Values\nIf your data is in a DataFrame called `original_data`, you can drop columns with missing values. One way to do that is\n```\ndata_without_missing_values = original_data.dropna(axis=1)\n```\n\nIn many cases, you'll have both a training dataset and a test dataset.  You will want to drop the same columns in both DataFrames. In that case, you would write\n\n```\ncols_with_missing = [col for col in original_data.columns \n                                 if original_data[col].isnull().any()]\nreduced_original_data = original_data.drop(cols_with_missing, axis=1)\nreduced_test_data = test_data.drop(cols_with_missing, axis=1)\n```\nIf those columns had useful information (in the places that were not missing), your model loses access to this information when the column is dropped. Also, if your test data has missing values in places where your training data did not, this will result in an error.  \n\nSo, it's somewhat usually not the best solution. However, it can be useful when most values in a column are missing.\n\n\n\n##  Approach 2 A Better Option: Imputation\nImputation fills in the missing value with some number. The imputed value won't be exactly right in most cases, but it usually gives more accurate models than dropping the column entirely.\n\nThis is done with\n```\nfrom sklearn.impute import SimpleImputer\nmy_imputer = SimpleImputer()\ndata_with_imputed_values = my_imputer.fit_transform(original_data)\n```\nThe default behavior fills in the mean value for imputation.  Statisticians have researched more complex strategies, but those complex strategies typically give no benefit once you plug the results into sophisticated machine learning models.\n\nOne (of many) nice things about Imputation is that it can be included in a scikit-learn Pipeline. Pipelines simplify model building, model validation and model deployment.\n\n## Approach 3 An Extension To Imputation\nImputation is the standard approach, and it usually works well.  However, imputed values may by systematically above or below their actual values (which weren't collected in the dataset). Or rows with missing values may be unique in some other way. In that case, your model would make better predictions by considering which values were originally missing.  Here's how it might look:\n```\n# make copy to avoid changing original data (when Imputing)\nnew_data = original_data.copy()\n\n# make new columns indicating what will be imputed\ncols_with_missing = (col for col in new_data.columns \n                                 if new_data[col].isnull().any())\nfor col in cols_with_missing:\n    new_data[col + '_was_missing'] = new_data[col].isnull()\n\n# Imputation\nmy_imputer = SimpleImputer()\nnew_data = pd.DataFrame(my_imputer.fit_transform(new_data))\nnew_data.columns = original_data.columns\n```\n\nIn some cases this approach will meaningfully improve results. In other cases, it doesn't help at all.\n\n---\n# Example (Comparing All Solutions)\n\nWe will see am example predicting housing prices from the Melbourne Housing data.\n\n\n### Basic Problem Set-up","1e5813ab":"### Approach 2: Get Model Score from Imputation"}}