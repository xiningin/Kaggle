{"cell_type":{"d115ce00":"code","5c44382a":"code","95314e41":"markdown"},"source":{"d115ce00":"import numpy as np\n\n# the Map\nmatrix = np.array([\n    [0, 0, 0, 100],\n    [0, 0, 0, -100],\n    [0, 0, 0, 0]\n])\n# the expected value matrix\nmatrix2 = np.zeros((3, 4))\n\nmatrix","5c44382a":"punishment = -3\nitTimes = [1, 2, 5, 10, 100, 1000]\n\nfor j in itTimes:\n    \n    for i in range(j):\n        matrix2[0][0] = (0.8 * matrix[0][1] + 0.1 * matrix[0][0] + 0.1 * matrix[1][0]) -3\n        matrix2[0][1] = (0.8 * matrix[0][2] + 0.2 * matrix[0][1]) -3\n        matrix2[0][2] = (0.8 * matrix[0][3] + 0.1 * matrix[1][2] + 0.1 * matrix[0][2]) -3\n        matrix2[0][3] = 100\n\n        matrix2[1][0] = (0.8 * matrix[0][0] + 0.2 * matrix[1][0]) -3\n        matrix2[1][1] = 0\n        matrix2[1][2] = max(\n            (0.8 * matrix[0][2] + 0.1 * matrix[1][2] + 0.1 * matrix[1][3]) -3,\n            (0.8 * matrix[1][2] + 0.1 * matrix[0][2] + 0.1 * matrix[2][2]) -3\n        )\n        matrix2[1][3] = -100\n\n        matrix2[2][0] = (0.8 * matrix[1][0] + 0.1 * matrix[2][1] + 0.1 * matrix[2][0]) -3\n        matrix2[2][1] = (0.8 * matrix[2][0] + 0.2 * matrix[2][1]) -3\n        matrix2[2][2] = (0.8 * matrix[2][1] + 0.1 * matrix[2][2] + 0.1 * matrix[1][2]) -3\n        matrix2[2][3] = max(\n            (0.8 * matrix[2][3] + 0.1 * matrix[2][3] + 0.1 * matrix[2][2]) -3,\n            (0.8 * matrix[2][2] + 0.1 * matrix[1][3] + 0.1 * matrix[2][3]) -3\n        )\n\n        matrix = matrix2\n        \n    print('-------------------')\n    print(f'itTimes == {j}')\n    print(matrix.astype(int))","95314e41":"[0, 3], [1, 3] are end points, [1, 1] is also the wall\n\nwhenever you hit the wall, bounce back to your original position"}}