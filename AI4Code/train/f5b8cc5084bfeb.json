{"cell_type":{"4bd386dc":"code","3beafef2":"code","1d788397":"code","dc10c8e7":"code","7c6e0040":"code","c691ac1e":"code","4340ce81":"code","4c4bd05f":"code","65f55e82":"code","72107e1e":"code","5b27831a":"code","ec1bce2a":"code","35b265f8":"code","b4155acc":"code","6bc3a79e":"code","d6a75676":"code","94b20b1b":"code","bfdeaa49":"code","9d282a75":"code","19ed22ba":"code","14fcb255":"code","050102e7":"code","bb673c73":"markdown","32a223ae":"markdown","7d755f71":"markdown","c2388741":"markdown","54101aad":"markdown","cc6e6483":"markdown","e7b56ee1":"markdown","221a9787":"markdown"},"source":{"4bd386dc":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport math\nimport seaborn as sns\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import LSTM\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\npd.set_option('display.float_format', lambda x: '%.3f' % x)","3beafef2":"df = pd.read_csv(\"..\/input\/bitcoin-historical-data\/bitstampUSD_1-min_data_2012-01-01_to_2021-03-31.csv\")","1d788397":"df.head()","dc10c8e7":"df.info()","7c6e0040":"df.columns","c691ac1e":"df.isnull().sum()","4340ce81":"df = df.dropna()\ndf.head()","4c4bd05f":"df['date'] = pd.to_datetime(df['Timestamp'],unit='s').dt.date\ngroup = df.groupby('date')\nreal_price = group['Weighted_Price'].mean()","65f55e82":"real_price","72107e1e":"df.info()","5b27831a":"df.corr()","ec1bce2a":"df.describe() ","35b265f8":"f,ax = plt.subplots(figsize=(9, 9))\nsns.heatmap(df.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax)\nplt.show()","b4155acc":"# Line Plot\n\ndf.Weighted_Price.plot(kind = \"line\", color = \"g\", label = \"Weighted_Price\",linewidth=1,alpha=0.5,grid=True,linestyle=':')\n\nplt.legend(loc=\"upper right\")   \nplt.xlabel(\"x axis\")            \nplt.ylabel(\"y axis\")           \nplt.title(\"Line Plot for Weighted_Price\") \n\nplt.show()","6bc3a79e":"# Scatter Plot \n# x = Volume_(BTC), y = Volume_(Currency)\ndf.plot(kind='scatter', x='Volume_(BTC)', y='Volume_(Currency)',alpha = 0.5,color = 'green')\nplt.xlabel('BTC')              \nplt.ylabel('Currency')\nplt.title('BTC - Currency Scatter Plot')\nplt.show()","d6a75676":"# Histogram\n# bins = number of bar in figure\ndf.Weighted_Price.plot(kind = 'hist',bins = 50,figsize = (9,9))\nplt.show()\n","94b20b1b":"# split data\nprediction_days = 30\ndf_train=real_price[:len(real_price)-prediction_days]\ndf_test=real_price[len(real_price)-prediction_days:]","bfdeaa49":"# Data preprocess\ntraining_set = df_train.values\ntraining_set = np.reshape(training_set, (len(training_set), 1))\n\nfrom sklearn.preprocessing import MinMaxScaler\nsc = MinMaxScaler()\ntraining_set = sc.fit_transform(training_set)\nX_train = training_set[0:len(training_set)-1]\ny_train = training_set[1:len(training_set)]\nX_train = np.reshape(X_train, (len(X_train), 1, 1))\n","9d282a75":"### Importing the Keras libraries and packages\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import SimpleRNN\nfrom keras.layers import Dropout","19ed22ba":"# Initialising the RNN\nregressor = Sequential()\n\n# Adding the first RNN layer and some Dropout regularisation\nregressor.add(SimpleRNN(units = 50,activation='tanh', return_sequences = True, input_shape = (X_train.shape[1], 1)))\nregressor.add(Dropout(0.2))\n\n# Adding a second RNN layer and some Dropout regularisation\nregressor.add(SimpleRNN(units = 50,activation='tanh', return_sequences = True))\nregressor.add(Dropout(0.2))\n\n# Adding a third RNN layer and some Dropout regularisation\nregressor.add(SimpleRNN(units = 50,activation='tanh', return_sequences = True))\nregressor.add(Dropout(0.2))\n\n# Adding a fourth RNN layer and some Dropout regularisation\nregressor.add(SimpleRNN(units = 50))\nregressor.add(Dropout(0.2))\n\n# Adding the output layer\nregressor.add(Dense(units = 1))\n\n# Compiling the RNN\nregressor.compile(optimizer = 'adam', loss = 'mean_squared_error')\n\n# Fitting the RNN to the Training set\nregressor.fit(X_train, y_train, epochs = 100, batch_size = 32)\n# epoch= 250","14fcb255":"test_set = df_test.values\ninputs = np.reshape(test_set, (len(test_set), 1))\ninputs = sc.transform(inputs)\ninputs = np.reshape(inputs, (len(inputs), 1, 1))\npredicted_btc_price = regressor.predict(inputs)\npredicted_btc_price = sc.inverse_transform(predicted_btc_price)","050102e7":"plt.figure(figsize = (20,7))\nplt.plot(test_set)\nplt.plot(predicted_btc_price)\nplt.xlabel('Time')\nplt.ylabel('Price')\nplt.title('Closing Price vs Time')\nplt.legend(['Actual price', 'Predicted price'])\nplt.show()","bb673c73":"# Bitcoin Price Prediction with RNN","32a223ae":"# Data Preparation","7d755f71":"# Visualisierung","c2388741":"# Making the predictions","54101aad":"# Visualisierung the Results","cc6e6483":"# Timesteps Preparation","e7b56ee1":"# Library import","221a9787":"# Data reading"}}