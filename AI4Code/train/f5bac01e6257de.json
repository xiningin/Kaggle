{"cell_type":{"39ce6611":"code","770f6afa":"code","ecde61e8":"code","6089f1db":"code","67894a99":"code","77ae3665":"code","87fbedcb":"code","d667f033":"code","edf21fa9":"code","2dabec61":"code","284517f9":"code","cb6fdbf2":"code","fa87c8e9":"code","90dbaaf5":"code","2b0d206d":"code","05d2ae82":"code","71c15cb6":"code","98584f6f":"code","11a4685f":"code","d6a6f4f1":"code","cb3442f4":"markdown","ffa33926":"markdown"},"source":{"39ce6611":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport lightgbm as lgb\nfrom sklearn.model_selection import KFold\nfrom sklearn import model_selection, preprocessing, metrics\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\nimport shap\nimport os\nprint(os.listdir(\"..\/input\"))\nfrom sklearn import preprocessing\nimport xgboost as xgb\nimport gc\n\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\n\n# Any results you write to the current directory are saved as output.","770f6afa":"train = pd.read_csv('..\/input\/standalone-train-and-test-preprocessing\/train.csv')\ntest = pd.read_csv('..\/input\/standalone-train-and-test-preprocessing\/test.csv')","ecde61e8":"train.shape\n","6089f1db":"test.shape","67894a99":"features = [c for c in test.columns if c != \"TransactionDT\"]\nprint(features)","77ae3665":"train = train[features]\ntest = test[features]","87fbedcb":"train['target'] = 0\ntest['target'] = 1","d667f033":"train_test = pd.concat([train, test], axis =0)\ntarget = train_test['target'].values","edf21fa9":"object_columns = np.load('..\/input\/standalone-train-and-test-preprocessing\/object_columns.npy')","2dabec61":"del train, test","284517f9":"gc.collect()","cb6fdbf2":"# Label Encoding\nfor f in object_columns:\n    lbl = preprocessing.LabelEncoder()\n    lbl.fit(list(train_test[f].values) )\n    train_test[f] = lbl.transform(list(train_test[f].values))\n","fa87c8e9":"train, test = model_selection.train_test_split(train_test, test_size=0.33, random_state=42, shuffle=True)","90dbaaf5":"del train_test\ngc.collect()","2b0d206d":"train_y = train['target'].values\ntest_y = test['target'].values\ndel train['target'], test['target']\ngc.collect()","05d2ae82":"train = lgb.Dataset(train, label=train_y)\ntest = lgb.Dataset(test, label=test_y)\n","71c15cb6":"param = {'num_leaves': 50,\n         'min_data_in_leaf': 30, \n         'objective':'binary',\n         'max_depth': 5,\n         'learning_rate': 0.2,\n         \"min_child_samples\": 20,\n         \"boosting\": \"gbdt\",\n         \"feature_fraction\": 0.9,\n         \"bagging_freq\": 1,\n         \"bagging_fraction\": 0.9 ,\n         \"bagging_seed\": 44,\n         \"metric\": 'auc',\n         \"verbosity\": -1}","98584f6f":"num_round = 100\nclf = lgb.train(\n    param,\n    train,\n    num_round,\n    valid_sets=[train, test],\n    verbose_eval=50,\n    early_stopping_rounds = 50\n)","11a4685f":"feature_imp = pd.DataFrame(sorted(zip(clf.feature_importance(),features)), columns=['Value','Feature'])\n\nplt.figure(figsize=(20, 10))\nsns.barplot(x=\"Value\", y=\"Feature\", data=feature_imp.sort_values(by=\"Value\", ascending=False).head(20))\nplt.title('LightGBM Features')\nplt.tight_layout()\nplt.show()\nplt.savefig('lgbm_importances-01.png')","d6a6f4f1":"feature_imp = pd.DataFrame(sorted(zip(clf.feature_importance(importance_type=\"gain\"),features)), columns=['Value','Feature'])\n\nplt.figure(figsize=(20, 10))\nsns.barplot(x=\"Value\", y=\"Feature\", data=feature_imp.sort_values(by=\"Value\", ascending=False).head(20))\nplt.title('LightGBM Features')\nplt.tight_layout()\nplt.show()\nplt.savefig('lgbm_importances-02.png')","cb3442f4":"Still a very high AUC.  \nPerhaps another shaky competition?","ffa33926":"Forked from https:\/\/www.kaggle.com\/tunguz\/adversarial-ieee\n\nMy contribution  \n1) The data is time-split, so doing the validation without the date column makes sense.  \n2) Added feature-importance(gain)"}}