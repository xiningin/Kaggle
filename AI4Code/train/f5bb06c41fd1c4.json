{"cell_type":{"15010432":"code","ad7c497f":"code","ea2c5a46":"code","6083fac3":"code","0346ee33":"code","2d03c75c":"code","047deec5":"code","4e1e655b":"code","4b6d1deb":"code","164da877":"code","f6154262":"code","f5253a22":"code","0fc24f5c":"code","4c81a359":"code","6b98bc1d":"code","9f8b492f":"code","4d581c97":"code","580d659e":"code","21694a64":"code","65ae86b5":"code","495ce4c2":"code","8ecd0068":"code","feb8de33":"code","f4bf4a6f":"code","98838c27":"code","c169fee0":"code","fefc9cef":"code","47dd1be0":"code","aa614607":"code","a100d227":"code","03b9e897":"code","f362fd52":"code","521fe758":"code","c10247e2":"code","e0b7b23a":"code","ceb83d30":"code","0afdf258":"code","8bb34087":"code","4974a671":"code","b3d6f019":"code","7b2d0a6c":"code","add5c695":"code","6262428e":"code","f9713a0e":"code","f48fe272":"code","cfdc4c06":"code","ad3029cd":"code","d3b0638d":"code","42ffc655":"markdown","1480148f":"markdown","b4c17f14":"markdown","a21e8475":"markdown","5a2f868b":"markdown","e69f3a81":"markdown","feddbcf5":"markdown","4a881a8d":"markdown","ec9f3037":"markdown","2f33b073":"markdown","bbf089e1":"markdown","3a8a41fd":"markdown"},"source":{"15010432":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt","ad7c497f":"#Importing data\ndf = pd.read_csv (\"..\/input\/Melbourne_housing_FULL.csv\")","ea2c5a46":"#df.isnull().sum()","6083fac3":"#Changing date column to a pandas datetime format and creating a new column quarter\ndf['Date'] = pd.to_datetime (df['Date'])\ndf['Quarter'] = df.Date.dt.quarter","0346ee33":"#df_work = df.dropna().sort_values(\"Date\")\ndf_work = df","2d03c75c":"from datetime import date\n\nall_Data = []","047deec5":"##Find out number of days since start\ndays_since_start = [(x - df_work[\"Date\"].min()).days for x in df_work[\"Date\"]]\n","4e1e655b":"#Find correlations to target = price\ncorr_matrix = df_work.corr().abs()\n#print (corr_matrix['Price'].sort_values(ascending = False).head(20))\n\n#Visualizing the correlation matrix\n#select upper traingle of correlation matrix\nupper = corr_matrix.where (np.triu(np.ones(corr_matrix.shape), k = 1).astype (np.bool))\n#print (corr_matrix.where (np.triu(np.ones(corr_matrix.shape), k = 1).astype (np.bool)))\nsns.heatmap(upper)\nplt.show()","4b6d1deb":"region_south_metro = pd.DataFrame (df_work [(df_work['Type'] == 'h' ) & (df_work ['Regionname'] == \"Southern Metropolitan\")]) \nregion_south_metro['Date']= pd.to_datetime(region_south_metro['Date'] )\nregion_south_metro = region_south_metro.set_index ('Date' ).resample ('M').mean().dropna()\n#---------------------------\nregion_north_metro = pd.DataFrame (df_work [(df_work['Type'] == 'h' ) & (df_work ['Regionname'] == \"Northern Metropolitan\")]) \nregion_north_metro['Date']= pd.to_datetime(region_north_metro['Date'] )\nregion_north_metro = region_north_metro.set_index ('Date' ).resample ('M').mean().dropna()\n#--------------------\nregion_west_metro = pd.DataFrame (df_work[(df_work['Type'] == 'h' ) & (df_work ['Regionname'] == \"Western Metropolitan\")]) \nregion_west_metro['Date']= pd.to_datetime(region_west_metro['Date'] )\nregion_west_metro = region_west_metro.set_index ('Date' ).resample ('M').mean().dropna()\n#-------------------------\nregion_east_metro = pd.DataFrame (df_work [(df_work['Type'] == 'h' ) & (df_work ['Regionname'] == \"Eastern Metropolitan\")]) \nregion_east_metro['Date']= pd.to_datetime(region_east_metro['Date'] )\nregion_east_metro = region_east_metro.set_index ('Date' ).resample ('M').mean().dropna()\n#------------------------\nregion_south_east_metro = pd.DataFrame (df_work [(df_work['Type'] == 'h' ) & (df_work ['Regionname'] == \"South-Eastern Metropolitan\")]) \nregion_south_east_metro['Date']= pd.to_datetime(region_south_east_metro['Date'] )\nregion_south_east_metro = region_south_east_metro.set_index ('Date' ).resample ('M').mean().dropna()\n#-------------------------\nregion_east_vict = pd.DataFrame (df_work [(df_work['Type'] == 'h' ) & (df_work ['Regionname'] == \"Eastern Victoria\")]) \nregion_east_vict['Date']= pd.to_datetime(region_east_vict['Date'] )\nregion_east_vict = region_east_vict.set_index ('Date' ).resample ('M').mean().dropna()\n#------------------------------------\nregion_north_vict = pd.DataFrame (df_work [(df_work['Type'] == 'h' ) & (df_work ['Regionname'] == \"Northern Victoria\")]) \nregion_north_vict['Date']= pd.to_datetime(region_north_vict['Date'] )\nregion_north_vict = region_north_vict.set_index ('Date' ).resample ('M').mean().dropna()\n#-----------------------------------------\nregion_west_vict = pd.DataFrame (df_work[(df_work['Type'] == 'h' ) & (df_work ['Regionname'] == \"Western Victoria\")]) \nregion_west_vict['Date']= pd.to_datetime(region_west_vict['Date'] )\nregion_west_vict = region_west_vict.set_index ('Date' ).resample ('M').mean().dropna()","164da877":"region_south_metro ['Price']\nfig,ax = plt.subplots(figsize = (15,8))\nax.plot (region_south_metro ['Price'] , label = \"Southern Metro\")\nax.plot (region_north_metro ['Price'], label = \"Northern Metro\")\nax.plot (region_west_metro ['Price'], label = \"Western Metro\")\nax.plot (region_east_metro ['Price'], label = \"Eastern Metro\")\nax.plot (region_south_east_metro ['Price'], label = \"Sout-east Metro\")\nax.plot (region_east_vict ['Price'], label = \"East Vict\")\nax.plot (region_north_vict ['Price'], label = \"North Vict\")\nax.plot (region_west_vict ['Price'], label = \"West Vict\")\nlocs, labels = plt.xticks()\nplt.setp(labels, rotation=90)\nplt.legend(loc='best')\nplt.tight_layout()\nplt.show()","f6154262":"suburb_northcote = pd.DataFrame (df_work [(df_work['Suburb'] == 'Northcote' ) ]) \nsns.countplot (x = 'Type' , data = suburb_northcote)\nplt.title (\"There are more 'h' \")\nplt.show","f5253a22":"fig, ax = plt.subplots (figsize = (10,10))\nsns.catplot ( ax= ax, x = 'Type' , y = 'Price' , kind = \"swarm\" , data = suburb_northcote )\n#ax.set_title (\"The prices of the 'h' are higher than u &t , also the majority of the houses price range is in between $1000000 to $1500000 \")\nplt.show()","0fc24f5c":"suburb_northcote_type = pd.DataFrame(suburb_northcote.loc[(suburb_northcote[\"Type\"] == \"h\") & (suburb_northcote[\"Rooms\"] == 2)])\nsuburb_northcote_type['Date']= pd.to_datetime(suburb_northcote_type['Date'])\nsuburb_northcote_type = suburb_northcote_type.set_index ('Date'). resample ('M').mean().dropna()\n","4c81a359":"plt.figure(figsize = (15,8))\nplt.plot (suburb_northcote_type['Price'])\nlocs, labels = plt.xticks()\nplt.setp(labels, rotation=90)\nplt.legend(loc='best')\nplt.show()","6b98bc1d":"sns.kdeplot(suburb_northcote[\n           (suburb_northcote[\"Type\"]==\"u\")\n         & (suburb_northcote[\"Rooms\"] == 2)][\"Price\"])","9f8b492f":"df_work.groupby(\"Distance\") [\"Price\"].mean().plot()\nplt.show()","4d581c97":"df[(df[\"Rooms\"]>2) & (df[\"Type\"] == \"h\")& (df[\"Landsize\"] <5000)][[\"Landsize\",\"Distance\"]].dropna().groupby(\"Distance\").mean().plot()\nplt.show()","580d659e":"df_work['Bathroom'] = df_work['Bathroom'].fillna(-1)\nbins = [-10,-1,0,1,2,3,4,np.inf]\n\ngroup_names = ['unknown', 'zero','single', 'double', 'triple', 'quadruple', 'five' ]\ncategories = pd.cut (df_work.Bathroom , bins, labels = group_names)\ndf.Bathroom = categories\n\n#Next step is grouping the required features to fill the bathroom unknown values \ndf_work['Car'] = df_work['Car'].fillna(-1)\nbins = [-10,-1, 0,1,2,3,4, np.inf]\n\ngroup_names = ['unknown', 'zero','single', 'double', 'triple', 'quadruple', 'five' ]\ncategories = pd.cut (df_work.Car , bins, labels = group_names)\ndf_work.Car = categories\nprint (df_work.Car.value_counts())\n\n#Next step is grouping the required features to fill the Distance unknown values\nbins = [0,2.5,5,7.5,10.5,13,15.5,17.5,20]\ndf_work['Distance_bins'] = np.digitize (df_work.Distance, bins)\ndf_work.Distance_bins.value_counts()","21694a64":"#Imputing unknown values of Bathroom column\nbathroom_unit_u = df_work.loc [(df_work['Type'] == 'u') & (df_work['Bathroom'] == 'unknown')].Price.mean()\n\n#From this representation it can be seen that ,amy of Unit houses have bathrooms either single or double depending on price,\n#so for this purpose mean of price is calculated and for price above mean it is double bathroom and for price belo mean single.\n                                                                                             \n#df_bath.loc [(df_bath['Type'] == 'u') & (df_bath['Bathroom'] == 'unknown'), 'Bathroom'] = df_bath['Bathroom'].replace ('unknown', 'single') \ndf_work.loc [(df_work['Type'] == 'u') & (df_work['Price'] < bathroom_unit_u), 'Bathroom'] = df_work['Bathroom'].replace ('unknown', 'single') \ndf_work.loc [(df_work['Type'] == 'u') & (df_work['Price'] > bathroom_unit_u), 'Bathroom'] = df_work['Bathroom'].replace ('unknown', 'double')\n","65ae86b5":"#For TYPE \"h\" replacing nan values\nbathroom_unit_h = df_work.loc [(df_work['Type'] == 'h') & (df_work['Bathroom'] == 'unknown')].Price.mean()\n#bathroom_unit_h\n#df_bath.loc [(df_bath['Type'] == 'h') & (df_bath['Price'] < bathroom_unit_h) & (df_bath['Bathroom'] == 'unknown') & (df_bath['Distance_bins'] < 6 ), 'Bathroom']\ndf_work.loc [(df_work['Type'] == 'h') & (df_work['Price'] < bathroom_unit_h) & (df_work['Distance_bins'] <= 6 ) & (df_work['Bathroom'] == 'unknown'), 'Bathroom']  = df_work['Bathroom'].replace ('unknown', 'single')\ndf_work.loc [(df_work['Type'] == 'h') & (df_work['Price'] > bathroom_unit_h) & (df_work['Distance_bins'] >= 6 ) & (df_work['Bathroom'] == 'unknown'), 'Bathroom']  = df_work['Bathroom'].replace ('unknown', 'double')\ndf_work.loc [(df_work['Type'] == 'h') & (df_work['Price'] < bathroom_unit_h) & (df_work['Distance_bins'] >= 6 ) & (df_work['Bathroom'] == 'unknown'), 'Bathroom']  = df_work['Bathroom'].replace ('unknown', 'double')\ndf_work.loc [(df_work['Type'] == 'h') & (df_work['Price'] > bathroom_unit_h) & (df_work['Distance_bins'] <= 6 ) & (df_work['Bathroom'] == 'unknown'), 'Bathroom']  = df_work['Bathroom'].replace ('unknown', 'double')","495ce4c2":"#For TYPE \"h\" replacing nan values\nbathroom_unit_h = df_work.loc [(df_work['Type'] == 't') & (df_work['Bathroom'] == 'unknown')].Price.mean()\n#bathroom_unit_h\n#df_bath.loc [(df_bath['Type'] == 'h') & (df_bath['Price'] < bathroom_unit_h) & (df_bath['Bathroom'] == 'unknown') & (df_bath['Distance_bins'] < 6 ), 'Bathroom']\ndf_work.loc [(df_work['Type'] == 't') & (df_work['Price'] < bathroom_unit_h) & (df_work['Distance_bins'] <= 6 ) & (df_work['Bathroom'] == 'unknown'), 'Bathroom']  = df_work['Bathroom'].replace ('unknown', 'single')\ndf_work.loc [(df_work['Type'] == 't') & (df_work['Price'] > bathroom_unit_h) & (df_work['Distance_bins'] >= 6 ) & (df_work['Bathroom'] == 'unknown'), 'Bathroom']  = df_work['Bathroom'].replace ('unknown', 'double')\ndf_work.loc [(df_work['Type'] == 't') & (df_work['Price'] < bathroom_unit_h) & (df_work['Distance_bins'] >= 6 ) & (df_work['Bathroom'] == 'unknown'), 'Bathroom']  = df_work['Bathroom'].replace ('unknown', 'double')\ndf_work.loc [(df_work['Type'] == 't') & (df_work['Price'] > bathroom_unit_h) & (df_work['Distance_bins'] <= 6 ) & (df_work['Bathroom'] == 'unknown'), 'Bathroom']  = df_work['Bathroom'].replace ('unknown', 'double')","8ecd0068":"#Lets see NaN values for regionname\ndf_work ['Regionname']= df_work['Regionname'].replace (np.nan, 0)\nsuburb_region = df_work.loc [df_work ['Regionname'] == 0, 'Suburb'].reset_index(False)\nsuburb_region","feb8de33":"for i in range (len (suburb_region['Suburb'])):\n    print (i)\n    regionname1 = df_work.loc [df_work['Suburb'] == suburb_region['Suburb'][i], 'Regionname' ].value_counts().idxmax()\n    print (suburb_region['Suburb'][i])\n    print (regionname1)\n    \n    #df_bath['Regionname'] = df_bath['Regionname'].replace (0,regionname1)\n    df_work.loc [(df_work['Suburb'] == suburb_region['Suburb'][i]) & (df_work ['Regionname'] == 0), \"Regionname\"] = df_work['Regionname'].replace (0,regionname1)\n    ","f4bf4a6f":"df_work [df_work['Regionname'] == 0]","98838c27":"#Still there is one unfilled region name. For now I fiill it with most frequent regionname\nregionname_remain = df_work[(df_work ['SellerG'] == \"Brad\") & (df_work ['Price'] < 700000) & (df_work ['Price'] < 600000) & (df_work ['Type'] == \"h\")]['Regionname'].value_counts().idxmax()\ndf_work.loc [df_work['Regionname'] == 0, \"Regionname\"] = df['Regionname'].replace (0,regionname_remain) \ndf_work [df_work['Regionname'] == 0]","c169fee0":"df_work.Car.value_counts()","fefc9cef":"#Now imputing the values of car column\ncar_southern_metro = df_work.loc [(df_work ['Regionname'] == \"Southern Metropolitan\")].Price.mean()\ndf_work.loc [(df_work['Regionname'] == 'Southern Metropolitan') & (df_work['Price'] < car_southern_metro) & (df_work['Distance_bins'] <= 6 ) & (df_work['Car'] == 'unknown'), 'Car']  = df_work['Car'].replace ('unknown', 'single')\ndf_work.loc [(df_work['Regionname'] == 'Southern Metropolitan') & (df_work['Price'] > car_southern_metro) & (df_work['Distance_bins'] <= 6 ) & (df_work['Car'] == 'unknown'), 'Car']  = df_work['Car'].replace ('unknown', 'double')\ndf_work.loc [(df_work['Regionname'] == 'Southern Metropolitan') & (df_work['Price'] > car_southern_metro) & (df_work['Distance_bins'] >= 6 ) & (df_work['Car'] == 'unknown'), 'Car']  = df_work['Car'].replace ('unknown', 'double')\ndf_work.loc [(df_work['Regionname'] == 'Southern Metropolitan') & (df_work['Price'] < car_southern_metro) & (df_work['Distance_bins'] >= 6 ) & (df_work['Car'] == 'unknown'), 'Car']  = df_work['Car'].replace ('unknown', 'double')\n\n#----------------------------\ncar_northern_metro = df_work.loc [(df_work ['Regionname'] == \"Northern Metropolitan\")].Price.mean()\ndf_work.loc [(df_work['Regionname'] == 'Northern Metropolitan') & (df_work['Price'] < car_northern_metro) & (df_work['Distance_bins'] <= 6 ) & (df_work['Car'] == 'unknown'), 'Car']  = df_work['Car'].replace ('unknown', 'single')\ndf_work.loc [(df_work['Regionname'] == 'Northern Metropolitan') & (df_work['Price'] > car_northern_metro) & (df_work['Distance_bins'] <= 6 ) & (df_work['Car'] == 'unknown'), 'Car']  = df_work['Car'].replace ('unknown', 'double')\ndf_work.loc [(df_work['Regionname'] == 'Northern Metropolitan') & (df_work['Price'] > car_northern_metro) & (df_work['Distance_bins'] >= 6 ) & (df_work['Car'] == 'unknown'), 'Car']  = df_work['Car'].replace ('unknown', 'double')\ndf_work.loc [(df_work['Regionname'] == 'Northern Metropolitan') & (df_work['Price'] < car_northern_metro) & (df_work['Distance_bins'] >= 6 ) & (df_work['Car'] == 'unknown'), 'Car']  = df_work['Car'].replace ('unknown', 'double')\n#----------------------------------------\ncar_western_metro = df_work.loc [(df_work ['Regionname'] == \"Western Metropolitan\")].Price.mean()\ndf_work.loc [(df_work['Regionname'] == 'Western Metropolitan') & (df_work['Price'] < car_western_metro) & (df_work['Distance_bins'] <= 6 ) & (df_work['Car'] == 'unknown'), 'Car']  = df_work['Car'].replace ('unknown', 'single')\ndf_work.loc [(df_work['Regionname'] == 'Western Metropolitan') & (df_work['Price'] > car_western_metro) & (df_work['Distance_bins'] <= 6 ) & (df_work['Car'] == 'unknown'), 'Car']  = df_work['Car'].replace ('unknown', 'double')\ndf_work.loc [(df_work['Regionname'] == 'Western Metropolitan') & (df_work['Price'] > car_western_metro) & (df_work['Distance_bins'] >= 6 ) & (df_work['Car'] == 'unknown'), 'Car']  = df_work['Car'].replace ('unknown', 'double')\ndf_work.loc [(df_work['Regionname'] == 'Western Metropolitan') & (df_work['Price'] < car_western_metro) & (df_work['Distance_bins'] >= 6 ) & (df_work['Car'] == 'unknown'), 'Car']  = df_work['Car'].replace ('unknown', 'double')\n#-------------------------------------------------------\ncar_east_metro = df_work.loc [(df_work ['Regionname'] == \"Eastern Metropolitan\")].Price.mean()\ndf_work.loc [(df_work['Regionname'] == 'Eastern Metropolitan') & (df_work['Price'] < car_east_metro) & (df_work['Distance_bins'] <= 6 ) & (df_work['Car'] == 'unknown'), 'Car']  = df_work['Car'].replace ('unknown', 'single')\ndf_work.loc [(df_work['Regionname'] == 'Eastern Metropolitan') & (df_work['Price'] > car_east_metro) & (df_work['Distance_bins'] <= 6 ) & (df_work['Car'] == 'unknown'), 'Car']  = df_work['Car'].replace ('unknown', 'double')\ndf_work.loc [(df_work['Regionname'] == 'Eastern Metropolitan') & (df_work['Price'] > car_east_metro) & (df_work['Distance_bins'] >= 6 ) & (df_work['Car'] == 'unknown'), 'Car']  = df_work['Car'].replace ('unknown', 'double')\ndf_work.loc [(df_work['Regionname'] == 'Eastern Metropolitan') & (df_work['Price'] < car_east_metro) & (df_work['Distance_bins'] >= 6 ) & (df_work['Car'] == 'unknown'), 'Car']  = df_work['Car'].replace ('unknown', 'double')\n#-------------------------------------------------------\ncar_souteast_metro = df_work.loc [(df_work ['Regionname'] == \"South-Eastern Metropolitan\")].Price.mean()\ndf_work.loc [(df_work['Regionname'] == 'South-Eastern Metropolitan') & (df_work['Price'] < car_souteast_metro) & (df_work['Distance_bins'] <= 6 ) & (df_work['Car'] == 'unknown'), 'Car']  = df_work['Car'].replace ('unknown', 'single')\ndf_work.loc [(df_work['Regionname'] == 'South-Eastern Metropolitan') & (df_work['Price'] > car_souteast_metro) & (df_work['Distance_bins'] <= 6 ) & (df_work['Car'] == 'unknown'), 'Car']  = df_work['Car'].replace ('unknown', 'double')\ndf_work.loc [(df_work['Regionname'] == 'South-Eastern Metropolitan') & (df_work['Price'] > car_souteast_metro) & (df_work['Distance_bins'] >= 6 ) & (df_work['Car'] == 'unknown'), 'Car']  = df_work['Car'].replace ('unknown', 'double')\ndf_work.loc [(df_work['Regionname'] == 'South-Eastern Metropolitan') & (df_work['Price'] < car_souteast_metro) & (df_work['Distance_bins'] >= 6 ) & (df_work['Car'] == 'unknown'), 'Car']  = df_work['Car'].replace ('unknown', 'double')","47dd1be0":"df_work['Car'] = df_work['Car'].replace ('unknown' , 'double')","aa614607":"df_work = df_work[np.isfinite(df_work['Price'])]   # This is to drop only values in Price column that are null or na","a100d227":"suburb_dummies = pd.get_dummies(df_work[[\"Type\", \"Method\", \"Bathroom\", \"Car\"]], drop_first = True)","03b9e897":"all_Data = df_work.drop([\"Address\",\"Price\",\"Date\", \"Bedroom2\",\"Distance\",  \"Lattitude\",\"Longtitude\",\"Landsize\", \"Propertycount\", \"BuildingArea\", \"YearBuilt\", \"SellerG\",\"Suburb\",\"Type\",'Bathroom', 'Car' ,\"Method\",\"CouncilArea\",\"Regionname\"],axis=1).join(suburb_dummies)","f362fd52":"all_Data.dtypes","521fe758":"print (all_Data.keys())\nprint (all_Data.shape)","c10247e2":"X = all_Data.dropna (axis = 1)","e0b7b23a":"X.dtypes","ceb83d30":"y = df_work[\"Price\"]","0afdf258":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4)","8bb34087":"from sklearn.linear_model import LinearRegression\n","4974a671":"lm = LinearRegression()","b3d6f019":"X_train.dtypes","7b2d0a6c":"lm.fit (X_train, y_train)","add5c695":"print (lm.intercept_)","6262428e":"coeff_df = pd.DataFrame(lm.coef_,X.columns,columns=['Coefficient'])\nranked_suburbs = coeff_df.sort_values(\"Coefficient\", ascending = False)\nranked_suburbs","f9713a0e":"\nX_test.fillna (method = 'ffill' )\nX_test.isnull().sum()","f48fe272":"predictions = lm.predict (X_test)","cfdc4c06":"from sklearn import metrics","ad3029cd":"print(\"MAE:\", metrics.mean_absolute_error(y_test, predictions))\nprint('MSE:', metrics.mean_squared_error(y_test, predictions))\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, predictions)))","d3b0638d":"from sklearn.linear_model import Ridge, Lasso\nfrom sklearn.model_selection import GridSearchCV\n#Fit parameters by Ridge regression with gridsearchcv\nalphas = np.array ([1,0.1,0.01,0.001,0.0001,0])\nfit_interceptOptions = ([True])\nsolverOptions = ([ 'svd', 'sparse_cg', 'cholesky'])\nmodel = Ridge (normalize=False) \ngrid = GridSearchCV(estimator = model,  param_grid=dict(alpha=alphas, fit_intercept=fit_interceptOptions, solver=solverOptions)                    )\ngrid.fit (X_train, y_train)\nprint (grid)\n#summarize the results of the grid search\nprint(grid.best_score_)\nprint(grid.best_estimator_.alpha)\nprint(grid.best_estimator_.fit_intercept)\nprint(grid.best_estimator_.solver)\n","42ffc655":"From the above plot the variation of the price from 2016 to 2018 according to the various \"Regions\". Apert from Eastern Victoria and Northern Victoria remianing region prices are depreciating, with the good decrease for 'Southern Metropolitan'. The \"Northern Metropolitan\" in which the main focus is on is also decreasing.\n\nNow we will see the price variation in the data for \"Northcote\"","1480148f":"Converting the text values to numeric with one hot encoding method","b4c17f14":" plotting the landsize as a function of distance ","a21e8475":"Plotting the region wise house sale as a function of date","5a2f868b":"Using Ridge regression to predict","e69f3a81":"Dropping the unecessary columns","feddbcf5":"Converting columns with different ranges of values to discrete using bins","4a881a8d":"The above plot gives us the idea about the majority of the house prices in this subrub.\n\nNow lets check how the house prices vary accorind the distance from CBD\n\n","ec9f3037":"The prices of the 'h' are higher than u &t , also the majority of the houses price range is in between  1000000  to 1500000","2f33b073":"Imputing values to couple of columns is done now lets delete the NaN values in price column because it is a target column","bbf089e1":"Imputing values of \"Bathroom\", \"Car\", \"Regionname\"","3a8a41fd":"Plotting the area wise sales"}}