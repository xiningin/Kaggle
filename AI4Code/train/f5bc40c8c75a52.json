{"cell_type":{"0fc49e93":"code","4b019097":"code","976d2ec8":"code","d27a8daa":"code","d7c231b5":"code","a46d8ecd":"code","47e67dcd":"code","34b2b945":"code","e746e064":"code","94466c07":"code","12b73059":"code","7b2e6f43":"code","744afc9a":"code","1910869e":"code","e3625349":"code","f2df8187":"code","d453e5f3":"code","9f78cf13":"code","148b18f6":"code","22d38103":"code","0f07a4f0":"code","f940e91d":"code","265b45ac":"code","b1d1bdab":"code","c87a5f87":"code","613c0f5a":"code","822b969f":"code","61e1dbf0":"code","113f1e8d":"code","8dd2529a":"code","cf5fc798":"code","87985202":"code","0ff640f3":"code","c773cdbe":"code","d8ecf725":"code","86251c4b":"code","69e495d9":"code","de3eab09":"markdown","2cde64c8":"markdown","f375fae6":"markdown","b1ad18e0":"markdown","adbf8625":"markdown"},"source":{"0fc49e93":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import confusion_matrix, classification_report\nfrom sklearn.preprocessing import StandardScaler\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\n","4b019097":"df = pd.read_csv('..\/input\/water-potability\/water_potability.csv')\ndf.head()","976d2ec8":"df.info()","d27a8daa":"df.Potability.value_counts()","d7c231b5":"df.cov()","a46d8ecd":"counts = df.Potability.value_counts()\n# Sorting indices so it's easier to read \ncounts.sort_index(inplace=True)\n\nsns.barplot(x = counts.index, y = counts)\nplt.ylabel('counts')","47e67dcd":"df.isnull().sum()","34b2b945":"df['ph'].fillna(int(df['ph'].mean()), inplace=True)\ndf['Sulfate'].fillna(int(df['Sulfate'].mean()), inplace=True)\ndf['Trihalomethanes'].fillna(int(df['Trihalomethanes'].mean()), inplace=True)","e746e064":"df.isnull().sum()","94466c07":"X = df.drop(['Potability'], axis=1)\nX.shape","12b73059":"y = df['Potability']\ny.shape","7b2e6f43":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nst_scal = scaler.fit(X)","744afc9a":"X_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.1)","1910869e":"log_reg = LogisticRegression()\nlog_reg.fit(X_train,y_train)","e3625349":"pred_log = log_reg.predict(X_test)","f2df8187":"acc_log= accuracy_score(pred_log,y_test)\nacc_log","d453e5f3":"print(classification_report(y_test,pred_log))","9f78cf13":"model_rfc = RandomForestClassifier()\nmodel_rfc.fit(X_train, y_train)","148b18f6":"pred_rfc = model_rfc.predict(X_test)","22d38103":"acc_rfc = accuracy_score(pred_rfc, y_test)\nacc_rfc","0f07a4f0":"print(classification_report(pred_rfc, y_test))","f940e91d":"cf_matrix_rfc = confusion_matrix(y_test, pred_rfc)\nsns.heatmap(cf_matrix_rfc\/np.sum(cf_matrix_rfc), annot=True,fmt= '0.2%')","265b45ac":"model_neigh = KNeighborsClassifier()\nmodel_neigh.fit(X_train, y_train)\npred_neigh = model_neigh.predict(X_test)","b1d1bdab":"acc_neigh = accuracy_score(y_test, pred_neigh)\nacc_neigh","c87a5f87":"print(classification_report(pred_neigh, y_test))","613c0f5a":"cf_matrix_neigh = confusion_matrix(y_test, pred_neigh)\nsns.heatmap(cf_matrix_neigh\/np.sum(cf_matrix_neigh), annot=True,fmt= '0.2%')","822b969f":"model_adaB = AdaBoostClassifier(learning_rate=0.5)\nmodel_adaB.fit(X_train, y_train)\npred_adaB = model_adaB.predict(X_test)","61e1dbf0":"acc_adaB = accuracy_score(y_test, pred_adaB)\nacc_adaB","113f1e8d":"print(classification_report(pred_adaB, y_test))","8dd2529a":"cf_matrix_adaB = confusion_matrix(y_test, pred_adaB)\nsns.heatmap(cf_matrix_adaB\/np.sum(cf_matrix_adaB), annot=True,fmt= '0.2%')","cf5fc798":"model_svc = SVC(kernel='linear',gamma='auto')\nmodel_svc.fit(X_train, y_train)\npred_svc = model_svc.predict(X_test)","87985202":"acc_svc =  accuracy_score(y_test, pred_svc)\nacc_svc","0ff640f3":"print(classification_report(pred_svc, y_test))","c773cdbe":"cf_matrix_svc = confusion_matrix(y_test, pred_svc)\nsns.heatmap(cf_matrix_svc\/np.sum(cf_matrix_svc), annot=True,fmt= '0.2%')","d8ecf725":"output = pd.DataFrame({\"Model\":['Logistic Regression','Random Forest Classifier','KNeighbors Classifier','Adaboost Classifier'],\n           \"Accuracy\":[acc_log, acc_rfc, acc_neigh, acc_adaB]})","86251c4b":"output","69e495d9":"sns.barplot(x= 'Accuracy', y= 'Model', data= output)","de3eab09":"# Logistic Regression","2cde64c8":"# Random Forest Classifier","f375fae6":"# SVC","b1ad18e0":"# Adaboost Classifier","adbf8625":"# KNeighbors Classifier"}}