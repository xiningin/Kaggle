{"cell_type":{"3b23abc6":"code","f849849e":"code","3676ecb0":"code","167479a1":"code","334eb6b3":"code","a1425f08":"code","c0e9e8ee":"code","b1ee8e3c":"code","426788d6":"code","a8e6ac84":"code","568b25ad":"code","18e5a7c0":"code","2274db87":"code","26c86378":"code","3f958314":"code","f7b13164":"code","d4d1ed92":"code","f654486c":"code","2596bb7c":"code","5458dce8":"code","ba59f93f":"markdown","2b384f54":"markdown","25aad82c":"markdown","2c780a89":"markdown","15324b5a":"markdown"},"source":{"3b23abc6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f849849e":"# !pip install xlrd","3676ecb0":"pip install openpyxl","167479a1":"pd.set_option(\"Display.max_columns\", None)","334eb6b3":"df = pd.read_excel(\"\/kaggle\/input\/india-vs-australia-2021-ball-by-ball-data\/India_Aus_20-21_Ball_Data_v2.xlsx\")\ndf.head()","a1425f08":"df.info()","c0e9e8ee":"# First two overs of the series\ndf[-12:]","b1ee8e3c":"# Different type of results\ndf[\"result\"].unique()","426788d6":"result_intances = df.groupby(\"result\").count()\nresult_intances[\"ball\"]","a8e6ac84":"# Runs scored by batsmen\nruns_scored_by_batsmen = result_intances[\"ball\"][:7] * [i for i in range(7)]\ntotal_runs_scored_by_batsmen = runs_scored_by_batsmen.sum()\ntotal_runs_scored_by_batsmen","568b25ad":"runs_scored_by_batsmen","18e5a7c0":"# Plot distribution of runs scored by batsmen\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport matplotlib.style\n\nmatplotlib.style.use(\"bmh\")\n\nruns_scored_by_batsmen.plot(figsize = (12,8), kind = \"bar\")\nplt.xlabel(\"Scoring shot result\")\nplt.title(\"Runs scored per scoring shot\")\nplt.ylabel(\"Runs\")","2274db87":"# Average runs scored per wicket\naverage_runs_per_wicket = round(total_runs_scored_by_batsmen \/\n                               int(result_intances[\"ball\"][-1:]), 2)\naverage_runs_per_wicket","26c86378":"# Create seperate columns for batsman and bowler\ndf[[\"bowler\", \"other_text\"]] = df[\"bowler_batsman\"].str.split(\"to\", expand = True)\ndf","3f958314":"df[[\"batsman\"]] = df['other_text'].str.extract('([A-Z]\\w{0,})', expand=True)\ndf\n","f7b13164":"# Conditional sorting to end up with all runs batsmen have scored\nruns = df.loc[(df[\"result\"] == 1) | (df[\"result\"] == 2) | (df[\"result\"] == 3)| (df[\"result\"] == 4)|\n              (df[\"result\"] == 5) | (df[\"result\"] == 6) | (df[\"result\"] == 0)| (df[\"result\"] == \"2nb\") | \n                   (df[\"result\"] == \"3nb\")| (df[\"result\"] == \"5nb\")]\nruns","d4d1ed92":"runs[\"result\"].unique()","f654486c":"# No balls plus runs are displayed in the \"result\" column. \n# Need to have the runs scored by the batsmen only.\nbatsmen_runs = runs.replace({\"result\": {\"2nb\": 1, \"3nb\": 2, \"5nb\": 4}})\n\n\n# # Checking if I accounted fot the batsmen's runs correctly\ncheck = batsmen_runs[\"bowler_batsman\"].str.contains(\"no ball\")\nbatsmen_runs[check][:5]","2596bb7c":"# Rename \"results\" column to \"runs\"\nbatsmen_runs.rename(columns = {\"result\": \"runs\"}, inplace=True)\nbatsmen_runs[:5]","5458dce8":"# Conditional sorting to end up with all runs batsmen have scored\nbatsmen_runs[\"runs\"] = batsmen_runs[\"runs\"].astype(int)\nbat_runs = batsmen_runs.groupby(\"batsman\").sum()\ntop_ten = bat_runs.sort_values(\"runs\", ascending = False)\ntop_ten[[\"runs\"]][:10]","ba59f93f":"# **Install additional packages**","2b384f54":"# **Additional data cleaning**","25aad82c":"# **Top ten run getters**","2c780a89":"# **Runs scored**\n* Total runs\n* Scoring shots\n* Average runs per wicket\n","15324b5a":"# **Explore the data**"}}