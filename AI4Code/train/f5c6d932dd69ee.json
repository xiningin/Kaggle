{"cell_type":{"ebd8f75f":"code","02b9a1b3":"code","fdc580df":"code","9e321dfc":"code","68a7cd2b":"code","d1e4895e":"code","2458df0e":"code","320290d7":"code","771c32a5":"code","0bb3511a":"code","29f865f9":"code","96eb703d":"code","bcc2d3ba":"code","bd7b0cff":"code","a21e432f":"code","dae8b5cf":"code","cb15a3a4":"code","0437e62f":"code","27a622c4":"code","08b6e128":"code","d887b1bd":"code","6e950ea5":"code","86ab01dc":"code","de501785":"markdown","eecd9213":"markdown","6f45a14c":"markdown","8a7e68fc":"markdown","9040e6ba":"markdown","ef16ebd1":"markdown","98ffded4":"markdown","8e6bcfcd":"markdown","c656fdb7":"markdown","011c89ec":"markdown","9dfa5799":"markdown","54ff4fa9":"markdown","4ad9eb28":"markdown","696b0a1f":"markdown","9d36a9dc":"markdown","14b245f3":"markdown","7005ff79":"markdown","280eecd4":"markdown","d9d28599":"markdown","732778f2":"markdown","82e8d3f1":"markdown","f8ee059a":"markdown","49ff69b4":"markdown"},"source":{"ebd8f75f":"! pip install kaggle_environments==0.2.1 mypy","02b9a1b3":"from typing import List\nimport json","fdc580df":"from kaggle_environments import make\nfrom kaggle_environments.envs.halite.halite import get_to_pos\nfrom kaggle_environments.utils import Struct\nimport pandas as pd","9e321dfc":"env = make(\"halite\")\n_ = env.reset(num_agents=4)","68a7cd2b":"def convert_to_struct(obj):\n    \"\"\"\n    Converts an object to the Kaggle `Struct` format.\n    \"\"\"\n    if isinstance(obj, list):\n        return [convert_to_struct(item) for item in obj]\n    if isinstance(obj, dict):\n        return Struct(**{key: convert_to_struct(value) for key, value in obj.items()})\n    return obj\n\n\nwith open(\"..\/input\/halite-match-steps\/steps.json\", mode=\"r\") as file_pointer:\n    env.steps = convert_to_struct(json.load(file_pointer))","d1e4895e":"env.render(mode=\"ipython\", width=800, height=600)","2458df0e":"def make_actions_df(steps: List[List[Struct]]) -> pd.DataFrame:\n    \n    def actions_from_steps(steps):\n        for step, state in enumerate(steps):\n            step = state[0].observation.step\n            for player_index, player in enumerate(state):\n                for uid, action in player.action.items():\n                    yield {\"step\": step, \"uid\": uid, \"action\": action}\n                    \n    return pd.DataFrame(actions_from_steps(steps))\n\n\ndef make_ships_df(steps: List[List[Struct]]) -> pd.DataFrame:\n    \n    def ships_from_steps(steps):\n        for step, state in enumerate(steps):\n            step = state[0].observation.step\n            for player_index, player in enumerate(state[0].observation.players):\n                for uid, (pos, halite) in player[2].items():\n                    yield {\"step\": step, \"uid\": uid, \"pos\": pos, \"halite\": halite, \"player\": player_index}\n                    \n    return pd.DataFrame(ships_from_steps(steps))\n\ndef make_shipyards_df(steps: List[List[Struct]]) -> pd.DataFrame:\n    \n    def shipyard_from_state(state):\n        for step, state in enumerate(steps):\n            step = state[0].observation.step\n            for player_index, player in enumerate(state[0].observation.players):\n                for uid, pos in player[1].items():\n                    yield {\"step\": step, \"uid\": uid, \"pos\": pos, \"player\": player_index}\n                \n    return pd.DataFrame(shipyard_from_state(steps[-1]))\n\ndef make_players_df(steps: List[List[Struct]]) -> pd.DataFrame:\n    \n    def players_from_steps(steps):\n        for step, state in enumerate(steps):\n            step\n            for player_index, player in enumerate(state[0].observation.players):\n                yield {\"step\": step, \"player\": player_index, \"halite\": player[0]}\n                \n    return pd.DataFrame(players_from_steps(steps))","320290d7":"actions_df = make_actions_df(env.steps)\nactions_df.head()","771c32a5":"ships_df = make_ships_df(env.steps)\nships_df.head()","0bb3511a":"shipyards_df = make_shipyards_df(env.steps)\nshipyards_df.head()","29f865f9":"players_df = make_players_df(env.steps)\nplayers_df.head()","96eb703d":"# Some pipeline functions for our advanced tables.\n\ndef add_halite_delta(df: pd.DataFrame) -> pd.DataFrame:\n    def _halite_delta(ship):\n        ship = ship.sort_values(\"step\", ascending=True)\n        return ship[\"halite\"] - ship.shift()[\"halite\"]\n    df[\"halite_delta\"] = df.groupby(\"uid\").apply(_halite_delta).reset_index(\"uid\")[\"halite\"]\n    return df\n    \ndef add_mine_deposit_actions(df: pd.DataFrame) -> pd.DataFrame:\n    shipyard_present = ~pd.isna(\n        df\n        .merge(shipyards_df, how=\"left\", on=[\"step\", \"pos\"], suffixes=[\"_ship\", \"_shipyard\"])\n        [\"uid_shipyard\"]\n    )\n    \n    filter_ = (pd.isna(df[\"action\"])) & (~pd.isna(df[\"halite_delta\"]))\n    \n    df.loc[filter_ & shipyard_present, \"action\"] = \"DEPOSIT\"\n    df.loc[filter_ & (~shipyard_present), \"action\"] = \"MINE\"\n\n    return df\n\ndef add_halite_delta_abs(df: pd.DataFrame) -> pd.DataFrame:\n    df[\"halite_delta_abs\"] = df[\"halite_delta\"].abs()\n    return df\n\ndef add_step_prev(df: pd.DataFrame) -> pd.DataFrame:\n    df[\"step_prev\"] = df[\"step\"] - 1\n    return df\n\ndef add_expected_pos(df: pd.DataFrame) -> pd.DataFrame:\n    df[\"expected_pos\"] = df.apply(lambda ship: get_to_pos(env.configuration.size, ship[\"pos_prev\"], ship[\"action\"]), axis=1)\n    return df","bcc2d3ba":"ship_actions_df = (\n    actions_df\n    .copy()\n    .pipe(lambda df: df[df[\"action\"].isin((\"NORTH\", \"SOUTH\", \"EAST\", \"WEST\", \"CONVERT\"))])\n    .merge(ships_df, how=\"outer\", on=[\"step\", \"uid\"])\n    .pipe(add_halite_delta)\n    .pipe(add_mine_deposit_actions)\n)","bd7b0cff":"ship_actions_df.head()","a21e432f":"# Number of actions sent per action type.\n(\n    ship_actions_df\n    .groupby(\"action\")\n    .size()\n    .sort_values(ascending=False)\n    .plot(kind=\"bar\")\n)","dae8b5cf":"# Amount of halite minded (deducting the halite spent on moving) per ship.\n(\n    ship_actions_df\n    [ship_actions_df[\"action\"] != \"DEPOSIT\"]\n    .groupby(\"uid\")\n    [\"halite_delta\"]\n    .sum()\n    .sort_values(ascending=False)\n    .head(5)\n    .plot(kind=\"bar\")\n)","cb15a3a4":"shipyard_actions_df = (\n    actions_df\n    .copy()\n    .pipe(lambda df: df[df[\"action\"].isin((\"SPAWN\", ))])\n    .merge(shipyards_df, how=\"right\", on=[\"step\", \"uid\"])\n)","0437e62f":"shipyard_actions_df.head()","27a622c4":"# Number of spawn actions by shipyard.\n(\n    shipyard_actions_df\n    [shipyard_actions_df[\"action\"] == \"SPAWN\"]\n    .groupby(\"uid\")\n    .size()\n    .sort_values(ascending=False)\n    .head()\n    .plot(kind=\"bar\")\n)","08b6e128":"deposit_df = (\n    ship_actions_df\n    [(ship_actions_df[\"action\"] == \"DEPOSIT\") & (~pd.isna(ship_actions_df[\"halite_delta\"]))]\n    .merge(shipyards_df, how=\"left\", on=[\"step\", \"pos\"], suffixes=[\"_ship\", \"_shipyard\"])\n    .pipe(add_halite_delta_abs)\n    [[\"step\", \"pos\", \"uid_ship\", \"uid_shipyard\", \"player_ship\", \"halite_delta_abs\"]]\n    .rename({\"player_ship\": \"player\", \"halite_delta_abs\": \"halite\"}, axis=1)\n)","d887b1bd":"deposit_df.head()","6e950ea5":"(\n    deposit_df\n    .groupby(\"uid_shipyard\")\n    [\"halite\"]\n    .sum()\n    .sort_values(ascending=False)\n    .head()\n    .plot(kind=\"bar\")\n)","86ab01dc":"ship_collision_df = (\n    ship_actions_df\n    .groupby(\"uid\")\n    .apply(lambda ship: ship.sort_values(\"step\").tail(1))\n    .reset_index(drop=True)\n    .pipe(add_step_prev)\n    .merge(ships_df, how=\"left\", left_on=[\"uid\", \"step_prev\"], right_on=[\"uid\", \"step\"], suffixes=[\"\", \"_prev\"])\n    .pipe(add_expected_pos)\n    [[\"step\", \"uid\", \"expected_pos\"]]\n    .rename({\"expected_pos\": \"pos\"}, axis=1)\n    .append(ships_df[[\"step\", \"uid\", \"pos\"]])\n    .groupby([\"step\", \"pos\"])[\"uid\"].aggregate(lambda x: set(x)).reset_index()\n    .pipe(lambda df: df[df[\"uid\"].apply(lambda x: len(x) > 1)])\n)\n\nship_collision_df","de501785":"## Conclusion","eecd9213":"# Analysing Halite Matches\n# _Part 1: Getting the data right with pandas_","6f45a14c":"Mining and depositing halite is done implicitly by not adding an action to a ship. For us this means that we need to figure out whether a ship was mining or depositing when no action was provided. My approach is checking whether we are sharing the cell with a shipyard.","8a7e68fc":"## Motivation","9040e6ba":"Take a look at the replay. You should compare it against the insights the we find throughout this notebook sometimes, it really helps to make sure that everything is working well.","ef16ebd1":"Many top tier players of the Halite 3 competition have stated that analysing the behaviour of their bots was a key ingredient in their success. For example, this is the \"battlestation\" of #3 player [reCurse](https:\/\/recursive.cc\/blog\/halite-iii-postmortem.html):\n\n![reCurse's battlestation](https:\/\/recursive.cc\/blog\/halite-iii-battlestation.png)\n\n\n\nWith this notebook, I am attemtping to start a series that will demonstrate how to get the most information out of the environment data. I am trying to write three notebooks:\n\n1. How to extract and transform the data from the environment (this one!)\n1. How to store the extracted data in Google Big Query and build dashboards with DataStudio (stay tuned!)\n1. How to build dashboards with Jupyter and Voila (stay tuned!)\n\nMaybe at the end of this project we will have our own \"battlestation\" or something similar. :)","98ffded4":"## Setup","8e6bcfcd":"#### Collision table","c656fdb7":"**In this notebook you will learn:**\n\n- How to convert all environment information to pandas dataframes.\n- How to add \"MINE\" and \"DEPOSIT\" actions to the ships.\n- How to extract collisions for the environment.\n- And much more!\n","011c89ec":"#### Shipyard actions","9dfa5799":"With a little bit of pandas pipelining, we can actually extract a lot of useful information from the environment steps!","54ff4fa9":"Random agents are not too good at depositing halite ...","4ad9eb28":"At first, let's build some quite straightforward tables for players, actions ships and shipyards. They will serve as a foundation for our more complicated tables.","696b0a1f":"I was having difficulties presenting a reproducible match, even when setting the random number seed. So I decided to \"pre-play\" a match and store the environment steps here. The game was configured as such:\n\n```python\nenv = make(\"halite\")\n_ = env.reset(num_agents=4)\n_ = env.run([\"random\", \"random\", \"random\", \"random\"])\n```","9d36a9dc":"### Advanced tables","14b245f3":"### Basic tables for players, actions, ships and shipyards","7005ff79":"A critical piece of information but unfortunately quite difficult to extract: Collisions!","280eecd4":"#### Ship action table","d9d28599":"## Bringing the data into the right format","732778f2":"Next I would like to see which shipyards receive the most halite deposists.","82e8d3f1":"#### Deposit table","f8ee059a":"### Building the example match","49ff69b4":"## General Information\n\n### Pandas pipelines\n\nIn this notebook, I use a lot of pipelining in Pandas. If you have not heard of Pandas pipelines before, please refer to this fantastic [talk](https:\/\/www.youtube.com\/watch?v=yXGCKqo5cEY) from [Vicent Warmerdam](https:\/\/twitter.com\/fishnets88).\n\n### UID bug\n\nCurrently there is [a bug](https:\/\/github.com\/Kaggle\/kaggle-environments\/issues\/15) in the interpreter, which stops the step count from incrementing in the first turn. This causes the `uid` to be non-unique, when units are created in the second turn. This also affects this analysis. Don't be too surprised when seeing duplicate uid. I won't attempt to patch this here because I am assuming this will be resolved in the next release.\n\n### WIP\n\nThis is a work in progress. Right now, there is not a lot of explanatory comments yet. I will try to add these over the next days. All plots only serve to show to potential of this data. Proper plotting will be done in the next notebooks.\n\n**Feedback is very appreciated!**"}}