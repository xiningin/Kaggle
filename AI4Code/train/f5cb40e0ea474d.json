{"cell_type":{"f136b5c2":"code","ad0542fd":"code","2876da60":"code","b1ccab44":"code","9aa83357":"code","f288523a":"code","67b884fb":"code","70dac23d":"code","362e471b":"code","5f28bf17":"code","befef14e":"code","b5266a5a":"code","e8758f2a":"code","ce188434":"code","42a833b9":"code","9c63e2ff":"code","f703fe5b":"code","56aef52e":"code","202a603e":"code","94dc09a7":"code","0d3eb261":"code","8cbbdb9b":"code","427345bb":"code","d442c2fd":"markdown","c8b0b201":"markdown","41f66ed2":"markdown","cd0ec6c3":"markdown","ef623c2b":"markdown","d4b8bbb4":"markdown","80fd777d":"markdown","b29ebdaf":"markdown","dabea8be":"markdown","d28278c4":"markdown","e0d1638a":"markdown","a0c57de4":"markdown","7e4b9a3c":"markdown","22668306":"markdown","4f816547":"markdown","76db2edc":"markdown","c9b4b412":"markdown"},"source":{"f136b5c2":"from collections import defaultdict\nfrom scipy.stats import itemfreq\nfrom scipy import ndimage as ndi\nimport matplotlib.pyplot as plt\nfrom skimage import feature\nfrom PIL import Image as IMG\nimport numpy as np\nimport pandas as pd \nimport operator\nimport cv2\nimport os \n\nfrom IPython.core.display import HTML \nfrom IPython.display import Image\n\nimages_path = '..\/input\/sampleavitoimages\/sample_avito_images\/'\nimgs = os.listdir(images_path)\n\nfeatures = pd.DataFrame()\nfeatures['image'] = imgs\n\n","ad0542fd":"def color_analysis(img):\n    # obtain the color palatte of the image \n    palatte = defaultdict(int)\n    for pixel in img.getdata():\n        palatte[pixel] += 1\n    \n    # sort the colors present in the image \n    sorted_x = sorted(palatte.items(), key=operator.itemgetter(1), reverse = True)\n    light_shade, dark_shade, shade_count, pixel_limit = 0, 0, 0, 25\n    for i, x in enumerate(sorted_x[:pixel_limit]):\n        if all(xx <= 20 for xx in x[0][:3]): ## dull : too much darkness \n            dark_shade += x[1]\n        if all(xx >= 240 for xx in x[0][:3]): ## bright : too much whiteness \n            light_shade += x[1]\n        shade_count += x[1]\n        \n    light_percent = round((float(light_shade)\/shade_count)*100, 2)\n    dark_percent = round((float(dark_shade)\/shade_count)*100, 2)\n    return light_percent, dark_percent","2876da60":"def perform_color_analysis(img, flag):\n    path = images_path + img \n    im = IMG.open(path) #.convert(\"RGB\")\n    \n    # cut the images into two halves as complete average may give bias results\n    size = im.size\n    halves = (size[0]\/2, size[1]\/2)\n    im1 = im.crop((0, 0, size[0], halves[1]))\n    im2 = im.crop((0, halves[1], size[0], size[1]))\n\n    try:\n        light_percent1, dark_percent1 = color_analysis(im1)\n        light_percent2, dark_percent2 = color_analysis(im2)\n    except Exception as e:\n        return None\n\n    light_percent = (light_percent1 + light_percent2)\/2 \n    dark_percent = (dark_percent1 + dark_percent2)\/2 \n    \n    if flag == 'black':\n        return dark_percent\n    elif flag == 'white':\n        return light_percent\n    else:\n        return None","b1ccab44":"features['dullness'] = features['image'].apply(lambda x : perform_color_analysis(x, 'black'))\ntopdull = features.sort_values('dullness', ascending = False)\n#print(topdull)\ntopdull.head(5)","9aa83357":"for j,x in topdull.head(2).iterrows():\n    path = images_path + x['image']\n    html = \"<h4>Image : \"+x['image']+\" &nbsp;&nbsp;&nbsp; (Dullness : \" + str(x['dullness']) +\")<\/h4>\"\n    display(HTML(html))\n    display(IMG.open(path).resize((300,300), IMG.ANTIALIAS))","f288523a":"features['whiteness'] = features['image'].apply(lambda x : perform_color_analysis(x, 'white'))\ntopdull = features.sort_values('whiteness', ascending = False)\ntopdull.tail(5)","67b884fb":"for j,x in topdull.tail(10).iterrows():\n    path = images_path + x['image']\n    html = \"<h4>Image : \"+x['image']+\" &nbsp;&nbsp;&nbsp; (Whiteness : \" + str(x['whiteness']) +\")<\/h4>\"\n    display(HTML(html))\n    display(IMG.open(path).resize((300,300), IMG.ANTIALIAS))","70dac23d":"im1 = IMG.open(images_path+'28.png')\nim2 = im1.convert(mode='L')\nim = np.asarray(im2)\n\nedges1 = feature.canny(im, sigma=1)\nedges2 = feature.canny(im, sigma=3)\n\n# display results\nfig, (ax1, ax2, ax3) = plt.subplots(nrows=1, ncols=3, figsize=(8, 3), sharex=True, sharey=True)\n\nax1.imshow(im, cmap=plt.cm.gray)\nax1.axis('off')\nax1.set_title('noisy image', fontsize=20)\n\nax2.imshow(edges1, cmap=plt.cm.gray)\nax2.axis('off')\nax2.set_title('Canny filter, $\\sigma=1$', fontsize=20)\n\nax3.imshow(edges2, cmap=plt.cm.gray)\nax3.axis('off')\nax3.set_title('Canny filter, $\\sigma=3$', fontsize=20)\n\nfig.tight_layout()\n\nplt.show()","362e471b":"def average_pixel_width(img):\n    path = images_path + img \n    im = IMG.open(path)    \n    im_array = np.asarray(im.convert(mode='L'))\n    edges_sigma1 = feature.canny(im_array, sigma=3)\n    apw = (float(np.sum(edges_sigma1)) \/ (im.size[0]*im.size[1]))\n    return apw*100","5f28bf17":"features['average_pixel_width'] = features['image'].apply(average_pixel_width)\ntempdf = features.sort_values('average_pixel_width' , ascending = False)\ntempdf ","befef14e":"for j,x in tempdf.head(6).iterrows():\n    path = images_path + x['image']\n    html = \"<h4>Image : \"+x['image']+\" &nbsp;&nbsp;&nbsp; (Average Pixel Width : \" + str(x['average_pixel_width']) +\")<\/h4>\"\n    display(HTML(html))\n    display(IMG.open(path).resize((300,300), IMG.ANTIALIAS))","b5266a5a":"def get_dominant_color(img):\n    path = images_path + img \n    img = cv2.imread(path)\n    arr = np.float32(img)\n    pixels = arr.reshape((-1, 3))\n\n    n_colors = 5\n    criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 200, .1)\n    flags = cv2.KMEANS_RANDOM_CENTERS\n    _, labels, centroids = cv2.kmeans(pixels, n_colors, None, criteria, 10, flags)\n\n    palette = np.uint8(centroids)\n    quantized = palette[labels.flatten()]\n    quantized = quantized.reshape(img.shape)\n\n    dominant_color = palette[np.argmax(itemfreq(labels)[:, -1])]\n    return dominant_color\n\nfeatures['dominant_color'] = features['image'].apply(get_dominant_color)\nfeatures.head(10)","e8758f2a":"features['dominant_red'] = features['dominant_color'].apply(lambda x: x[0]) \/ 255\nfeatures['dominant_green'] = features['dominant_color'].apply(lambda x: x[1]) \/ 255\nfeatures['dominant_blue'] = features['dominant_color'].apply(lambda x: x[2]) \/ 255\nfeatures[['dominant_red', 'dominant_green', 'dominant_blue']].head(5)","ce188434":"def get_average_color(img):\n    path = images_path + img \n    img = cv2.imread(path)\n    average_color = [img[:, :, i].mean() for i in range(img.shape[-1])]\n    return average_color\n\nfeatures['average_color'] = features['image'].apply(get_average_color)\nfeatures.head(10)","42a833b9":"features['average_red'] = features['average_color'].apply(lambda x: x[0]) \/ 255\nfeatures['average_green'] = features['average_color'].apply(lambda x: x[1]) \/ 255\nfeatures['average_blue'] = features['average_color'].apply(lambda x: x[2]) \/ 255\nfeatures[['average_red', 'average_green', 'average_blue']].head(5)","9c63e2ff":"def getSize(filename):\n    filename = images_path + filename\n    st = os.stat(filename)\n    return st.st_size\n\ndef getDimensions(filename):\n    filename = images_path + filename\n    img_size = IMG.open(filename).size\n    return img_size ","f703fe5b":"features['image_size'] = features['image'].apply(getSize)\nfeatures['temp_size'] = features['image'].apply(getDimensions)\nfeatures['width'] = features['temp_size'].apply(lambda x : x[0])\nfeatures['height'] = features['temp_size'].apply(lambda x : x[1])\nfeatures = features.drop(['temp_size', 'average_color', 'dominant_color'], axis=1)\nfeatures.head()","56aef52e":"def get_blurrness_score(image):\n    path =  images_path + image \n    image = cv2.imread(path)\n    image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n    fm = cv2.Laplacian(image, cv2.CV_64F).var()\n    return fm","202a603e":"features['blurrness'] = features['image'].apply(get_blurrness_score)\nfeatures[['image','blurrness']].sort_values('blurrness', ascending = False).head(40)","94dc09a7":"tempdf = features.sort_values('blurrness', ascending = False)\nfor y,x in tempdf.head(15).iterrows():\n    path = images_path + x['image']\n    html = \"<h4>Image : \"+x['image']+\" &nbsp;&nbsp;&nbsp; (Blurrness : \" + str(x['blurrness']) +\")<\/h4>\"\n    display(HTML(html))\n    display(IMG.open(path).resize((300,300), IMG.ANTIALIAS))","0d3eb261":"print(features.head())","8cbbdb9b":"\navito_dataset = pd.DataFrame(features.filter(['image','dullness','whiteness', 'average_pixel_width' , 'blurrness'], axis=1))\n#print(avito_dataset.head())\n\n\ndef perform_features_scoring(avito_dataset):\n    for column in avito_dataset:\n        if(column == 'dullness'):\n            for index, item in avito_dataset.iterrows():\n                if(avito_dataset.at[index, \"dullness\"] <= np.mean(avito_dataset['dullness'])):\n                       avito_dataset.at[index , 'dullness_score'] =  1\n                else:\n                    avito_dataset.at[index , 'dullness_score'] =  0\n        elif(column == 'whiteness'):\n            for index, item in avito_dataset.iterrows():\n                if(avito_dataset.at[index, \"whiteness\"] <= np.mean(avito_dataset['whiteness'])):\n                       avito_dataset.at[index , 'whiteness_score'] =  1\n                else:\n                    avito_dataset.at[index , 'whiteness_score'] =  0 \n        elif(column == 'average_pixel_width'):\n            for index, item in avito_dataset.iterrows():\n                if(avito_dataset.at[index, \"average_pixel_width\"] <= np.mean(avito_dataset['average_pixel_width'])):\n                       avito_dataset.at[index , 'average_pixel_width_score'] =  1\n                else:\n                    avito_dataset.at[index , 'average_pixel_width_score'] =  0 \n        elif(column == 'blurrness'):\n            for index, item in avito_dataset.iterrows():\n                if(avito_dataset.at[index, \"blurrness\"] <= np.mean(avito_dataset['blurrness'])):\n                       avito_dataset.at[index , 'blurrness_score'] =  1\n                else:\n                    avito_dataset.at[index , 'blurrness_score'] =  0 \n    return avito_dataset\n\n#print(avito_dataset.head())\n    \ndf = perform_features_scoring(avito_dataset)\nprint(df.head())","427345bb":"def calc_image_score(df):\n    for index, item in df.iterrows():\n        df.at[index, 'image_score'] = (int(df.at[ index ,\"dullness_score\"]) & int(df.at[index, \"whiteness_score\"]) & int(df.at[ index, \"average_pixel_width_score\"]) & int(df.at[index, \"blurrness_score\"]))\n    \n    return df\n\ndf_new = calc_image_score(df)\n\nprint(df_new.tail())","d442c2fd":"Lets plot some images having very low average pixel width","c8b0b201":"## 2. Is the Image too bright or white \n\n### Feature 2 : Image Whiteness\n\nSome images can be too white or too bright which might not be good for the advertisement purposes. Using the samy type of color analysis, we can check if the images are too white. ","41f66ed2":"Since , we have values 0 and 1 for respective features we chosen above in our new dataframe. We further decided to evaluate our each image on basic of these four features to overall image score with value 1 (good image) or 0 bad image. We applied logical AND iterating over the Dataframe rows for scores we calculated above. ","cd0ec6c3":"Using existing Kernel By Shivam, finding overall image score. ","ef623c2b":"Above images are most likely nosie and have low average pixel width values.\n\n## 4. What are the key colors used in the image ?\n\nColors used in the images play a significant role in garnering the attraction from users. Additional features related to colors such as Dominant and Average colors can be created. \n\n### Feature 4.1 - Dominant Color","d4b8bbb4":"**We are creating our new DataFrame here having features taken from above Kernel , We have chosen 4 features dullness, whiteness, avg pixel width and blurrness**\n\nWe have seen that we have floating values in these features , we can find mean value for each of the above features and create new score columns for each features having value 0 or 1 . If certain feature value is equal or lower than its mean column value we give it feature_score 1 otherwise 0.\n","80fd777d":"## 5. Dimensions of the Image \n\nToo Big Images or Too Small Images might not be very good for generating good attraction. Users may skip viewing a very large or very small sized image. Hence for advertisers it is important to set precise dimensions and size of the image. Hence we can create additional features. \n\n- Image width\n- Image height\n- Image size","b29ebdaf":"## 6. Is the image too Blurry \n\n### Feature 6 - Image Blurrness\n\nTo measure the image blurrness, I refered to the following paper: \"Diatom Autofocusing in Brightfield Microscopy: A Comparative Study\". \n\nIn this paper the author Pech-Pacheco et al. has provided variance of the Laplacian Filter which can be used to measure if the image blurryness score.\n\nIn this technique, the single channel of an image is convolved  with the the laplacian filter. If the specified value is less than a threshold value, then image is blurry otherwise not.  \n\n![](https:\/\/www.pyimagesearch.com\/wp-content\/uploads\/2015\/09\/detecting_blur_laplacian.png)\n\n-  Paper Link : http:\/\/optica.csic.es\/papers\/icpr2k.pdf  \n-  Reference : https:\/\/www.pyimagesearch.com\/2015\/09\/07\/blur-detection-with-opencv\/\n\n\n\n\n","dabea8be":"\n# Ideas for Generating Image Features and Measuring Image Quality\n\n<br>\n\n![](https:\/\/i.imgur.com\/84TEdoa.png)\n\n<br>\n\n[Avito](https:\/\/www.kaggle.com\/c\/avito-demand-prediction) is Russia's largest Advertisment firm. The quality of the advertisement image significantly affects the demand volume on an item. For both advertisers and Avito, it is important to use authentic high quality images. In this kernel, I have implemented some ideas which can be used to create new features related to images. These features are an indicatory factors about the Image Quality. Following is the list of feature ideas:  \n\n\n### 1. Dullness : Is the Image Very Dull ?   \n    \n   1.1 Image Dullness Score\n\n### 2. Whiteness : Is the Image Very White ?  \n   2.1 Image Whiteness Score  \n    \n### 3. Uniformity : Is the Image too Uniform ?\n   3.1 Average Pixel Width\n\n### 4. Colors : What are the top colors used in the Image ? \n   4.1 Dominant Color of the Image   \n   4.2 Average Color of the Image\n\n### 5. Dimensions : Is the Image too Large or too Small ?  \n   5.1 Width of the Image    \n   5.2 Height of the Image   \n   5.3 Size of the Image    \n\n### 6. Blurrness : Is the Image Too Blurry ?   \n   6.1 Width of the Image      \n\n<br>\n","d28278c4":"## 1. Is the image Very Dull \n\n### Feature 1 : Dullness\n\nDull Images may not be good for the advirtisment purposes. The analysis of prominent colors present in the images can indicate a lot about if the image is dull or not. In the following cell, I have added a code to measure the dullness score of the image which can be used as one of the feature in the model. \n\n","e0d1638a":"Lets split the dominant color's RGB values to separate features \n\n- Feature 4.1.1 dominant_red value\n- Feature 4.1.2 dominant_green value\n- Feature 4.1.3 dominant_blue value","a0c57de4":"### Feature 4.2 Average Color","7e4b9a3c":"Lets plot some of the images with very high dullness","22668306":"\n### Other Ideas about features from Image\n\n- No of objects detected \n- Total Number of Color Present \n- No. of shapes detected \n- Amount of Text Present in the image \n\nOther great kernels on Image Feature Extraction:\n\n1. https:\/\/www.kaggle.com\/wesamelshamy\/ad-image-recognition-and-quality-scoring by wesamelshamy  \n2. https:\/\/www.kaggle.com\/peterhurford\/image-feature-engineering by peterhurford  ","4f816547":"Lets compute the dull score for the sample images from Avito's dataset ","76db2edc":"## 3. Uniform Images (with no pixel variations)\n\n### Feature 3 - Average Pixel Width (using edge detection)\n\nSome images may contain no pixel variation and are entirely uniform. Average Pixel Width is a measure which indicates the amount of edges present in the image. If this number comes out to be very low, then the image is most likely a uniform image and may not represent right content. \n\nTo compute this measure, I am using skimage's Canny Detection","c9b4b412":"Lets plot some of the images having high whiteness score"}}