{"cell_type":{"5563ed21":"code","c025238c":"code","d15a4d0c":"code","09dc84a5":"code","a2e0430b":"code","6e0a646b":"code","862e6a3f":"code","753a956c":"code","9892073a":"code","0f43d4bb":"code","033b7f54":"code","642f7c71":"code","1e0b203b":"code","e58f8c85":"code","cfdd35ff":"code","550fb56e":"code","08696091":"code","bbe03446":"code","b5b4d7c0":"code","6f74bea6":"code","8abc0e4e":"code","290b0e8f":"code","bb859165":"code","ff70fa2e":"code","5d9f116e":"code","aed7f4b1":"code","eed0a1c5":"code","37bad9a5":"code","c36a62a8":"code","a90e6722":"code","5665de4f":"code","aac97934":"code","fc95740c":"code","bfec0b42":"code","9e5cd94c":"code","f0cac9ee":"code","affb7707":"code","75257749":"code","95e0bf22":"code","8b4dff4b":"code","5743581c":"code","c6246571":"code","8bd4e33a":"code","168c3147":"code","27931ad2":"code","5083e0b8":"code","95122d10":"code","b559cdb7":"code","9f2d1825":"code","e3ebf19b":"code","c507d539":"code","64327080":"code","2b32ccaf":"code","f8a05175":"markdown","5bf88765":"markdown","36b3b435":"markdown","28bdb1e2":"markdown","359880f9":"markdown","5241fdc5":"markdown","a3073801":"markdown","4f6280d5":"markdown","b43b0acc":"markdown","9a7bfd54":"markdown","2d220194":"markdown"},"source":{"5563ed21":"#importing libraries\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\npd.set_option('display.max_rows',500)\npd.set_option('display.max_columns', 500)","c025238c":"#loading data\n\ndf = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv',index_col=0)\ndf.head()","d15a4d0c":"#shape of datset\ndf.shape","09dc84a5":"#information of dataset\ndf.info()","a2e0430b":"df.describe().transpose()","6e0a646b":"#check if dataset has any missing values\nmissing_val= df.isnull().sum().sort_values(ascending=False)","862e6a3f":"#plot Missing values\nmissing_val = missing_val[missing_val>0]\nmissing_val.plot.bar()","753a956c":"#DropPING columns with high percentage of Nulls\n\ndf.drop(['PoolQC','MiscFeature','Alley','Fence','FireplaceQu','LotFrontage'],axis=1, inplace=True)","9892073a":"#EDA\nplt.figure(figsize=(12,10))\nsns.histplot(x=df['SalePrice'],kde=True,color='red')","0f43d4bb":"#Correlation plot\ncorr = df.corr()\nplt.subplots(figsize=(20,9))\nsns.heatmap(corr, annot=True)","033b7f54":"top_feature = corr.index[abs(corr['SalePrice']>0.5)]\nplt.subplots(figsize=(12, 8))\ntop_corr = df[top_feature].corr()\nsns.heatmap(top_corr, annot=True)\nplt.show()","642f7c71":"plt.figure(figsize=(10,10))\nsns.lineplot(df['OverallQual'],df['SalePrice'])","1e0b203b":"plt.figure(figsize=(12,12))\nsns.boxplot(y='SalePrice',x='MSSubClass',data=df)","e58f8c85":"col = ['SalePrice', 'OverallQual', 'GrLivArea', 'GarageCars', 'TotalBsmtSF', 'FullBath', 'TotRmsAbvGrd', 'YearBuilt']\nsns.set(style='ticks')\nsns.pairplot(df[col], size=3, kind='reg')","cfdd35ff":"#dropping nulls\n\ndf.dropna(axis=1 ,inplace=True)","550fb56e":"df.isnull().sum().any()","08696091":"df.shape","bbe03446":"#removing outliers in salesprice\n\ndf[df['SalePrice'] > 600000]","b5b4d7c0":"df.drop(df[df['SalePrice'] > 600000].index,inplace=True)","6f74bea6":"#Categorical features\n\ncategorical_feat = df.select_dtypes(exclude = [np.number])","8abc0e4e":"categorical_feat.columns","290b0e8f":"cols = ('MSZoning', 'Street', 'LotShape', 'LandContour', 'Utilities',\n       'LotConfig', 'LandSlope', 'Neighborhood', 'Condition1', 'Condition2',\n       'BldgType', 'HouseStyle', 'RoofStyle', 'RoofMatl', 'Exterior1st',\n       'Exterior2nd', 'ExterQual', 'ExterCond', 'Foundation', 'Heating',\n       'HeatingQC', 'CentralAir', 'KitchenQual', 'Functional', 'PavedDrive',\n       'SaleType', 'SaleCondition')","bb859165":"#Applying Labelencoder on categorical features\n\nfrom sklearn.preprocessing import LabelEncoder\nfor c in cols:\n    lbl = LabelEncoder() \n    lbl.fit(list(df[c].values)) \n    df[c] = lbl.transform(list(df[c].values))","ff70fa2e":"df","5d9f116e":"#splitting data\n\nx = df.iloc[:,:-1]\ny = df.iloc[:,-1]","aed7f4b1":"#train and test split\n\nfrom sklearn.model_selection import train_test_split","eed0a1c5":"X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.20, random_state=42)","37bad9a5":"#Scalling data\n\nfrom sklearn.preprocessing import StandardScaler","c36a62a8":"std_scaler = StandardScaler()\nX_train = std_scaler.fit_transform(X_train)  \nX_test = std_scaler.transform(X_test)  \n","a90e6722":"#import model\nfrom sklearn.linear_model import LinearRegression","5665de4f":"model = LinearRegression()\nmodel","aac97934":"model.fit(X_train, y_train)","fc95740c":"y_predict= model.predict(X_test)\ny_predict","bfec0b42":"sns.distplot(y_predict-y_test)\n             ","9e5cd94c":"#checking performace of model\n\nfrom sklearn.metrics import r2_score\nprint('R2_Score:',r2_score(y_true=y_test, y_pred= y_predict))","f0cac9ee":"#import model\nfrom sklearn.neighbors import KNeighborsRegressor\nmodel = KNeighborsRegressor()","affb7707":"model.fit(X_train, y_train)","75257749":"y_predict= model.predict(X_test)\ny_predict","95e0bf22":"sns.distplot(y_predict-y_test)","8b4dff4b":"#checking performace of model\n\nprint('R2_Score:',r2_score(y_true=y_test, y_pred= y_predict))\n","5743581c":"pip install XGBOOST","c6246571":"#import model\nfrom xgboost import XGBRegressor\nmodel = XGBRegressor()\nmodel.fit(X_train, y_train)\ny_predict= model.predict(X_test)","8bd4e33a":"#checking performace of model\n\nprint('R2_Score:',r2_score(y_true=y_test, y_pred= y_predict))","168c3147":"#booster=['gbtree','gblinear']\n#base_score=[0.25,0.5,0.75,1]\n\n## Hyper Parameter Optimization\n\n\n#n_estimators = [100, 500, 900, 1100, 1500]\n#max_depth = [2, 3, 5, 10, 15]\n#booster=['gbtree','gblinear']\n#learning_rate=[0.05,0.1,0.15,0.20]\n#min_child_weight=[1,2,3,4]\n\n# Define the grid of hyperparameters to search\n#hyperparameter_grid = {\n   # 'n_estimators': n_estimators,\n  #  'max_depth':max_depth,\n   # 'learning_rate':learning_rate,\n   # 'min_child_weight':min_child_weight,\n   # 'booster':booster,\n   # 'base_score':base_score\n #   }","27931ad2":"#model = XGBRegressor()\n#from sklearn.model_selection import RandomizedSearchCV\n#random_cv = RandomizedSearchCV(estimator=model,\n   #         param_distributions=hyperparameter_grid,\n   #         cv=5, n_iter=50,\n   #         scoring = 'neg_mean_absolute_error',n_jobs = 4,\n   #         verbose = 5, \n   #         return_train_score = True,\n    #        random_state=42)","5083e0b8":"#random_cv.fit(X_train,y_train)","95122d10":"#random_cv.best_estimator_","b559cdb7":"model = XGBRegressor()\nmodel = XGBRegressor(base_score=0.25, booster='gbtree', colsample_bylevel=1,\n             colsample_bynode=1, colsample_bytree=1, gamma=0, gpu_id=-1,\n             importance_type='gain', interaction_constraints='',\n             learning_rate=0.1, max_delta_step=0, max_depth=2,\n             min_child_weight=1, monotone_constraints='()',\n             n_estimators=900, n_jobs=4, num_parallel_tree=1, random_state=0,\n             reg_alpha=0, reg_lambda=1, scale_pos_weight=1, subsample=1,\n             tree_method='exact', validate_parameters=1, verbosity=None)\nmodel.fit(X_train, y_train)","9f2d1825":"y_predict= model.predict(X_test)\ny_predict","e3ebf19b":"sns.distplot(y_predict-y_test)","c507d539":"#checking performace of model\n\nprint('R2_Score:',r2_score(y_true=y_test, y_pred= y_predict))","64327080":"model.score(X_train,y_train)","2b32ccaf":"x_ax = range(len(y_test))\nplt.plot(x_ax, y_test, label=\"original\")\nplt.plot(x_ax, y_predict, label=\"predicted\")\nplt.title(\"test data and predicted data\")\nplt.legend()\nplt.show()","f8a05175":"## Now, there is no missing values.","5bf88765":"## KNN","36b3b435":"## HOUSE PRICE PREDICTION                           ","28bdb1e2":"Most of the prices fall in the range between 100,000 and 200,000 range and median lies there and anything above 600,000 seems outliers","359880f9":"## XGBOOST","5241fdc5":"## Checking the missing values","a3073801":"If overall quality is good then House price would be high","4f6280d5":"Here OverallQual is highly correlated with target feature of saleprice by 79%","b43b0acc":"## LINEAR REGRESSION","9a7bfd54":"Features are Linearly correlated","2d220194":"### TUNING MODEL"}}