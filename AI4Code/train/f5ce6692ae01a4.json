{"cell_type":{"a862e490":"code","59e43728":"code","5d589c87":"code","94c75e58":"code","0d17cc3a":"code","ff8d9c0d":"code","bfc67bd9":"code","d97ca19d":"code","90c6fccd":"code","1268629a":"code","159c9f02":"code","ff8cf952":"code","394ca21b":"code","e7a75e2e":"code","442ab68b":"code","4fe368ee":"code","777cc626":"code","8d26e9d2":"code","810e8f96":"code","bb9d89b7":"code","26421e2b":"code","2e272888":"code","540d5cda":"code","928e901b":"code","6ac0b1ec":"code","bb689eda":"code","a380c965":"code","4bfb6614":"code","38d80d68":"code","e3a900e3":"code","8a0c947c":"code","a180dc16":"code","14e6e792":"code","7c9515a6":"code","13e80e68":"markdown","d695a3ed":"markdown","d37f5f27":"markdown","f2b225c9":"markdown","54cb6b3e":"markdown","b29948f8":"markdown","9581d8d9":"markdown","dcce0dc7":"markdown","78a1b876":"markdown","6804ed5d":"markdown"},"source":{"a862e490":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","59e43728":"train_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntrain_data.head()","5d589c87":"test_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_data.head()","94c75e58":"print(\"train_data shape : \", train_data.shape)\nprint(\"test_data shape : \", test_data.shape)","0d17cc3a":"print(\"train_data.columns : \", train_data.columns)\nprint(\"\\ntest_data.columns : \", test_data.columns)","ff8d9c0d":"train_data.info()","bfc67bd9":"train_data.describe()","d97ca19d":"test_data.describe()","90c6fccd":"sns.set_style('darkgrid')","1268629a":"# Lets see, How many male & female survived\nsns.barplot(x=\"Sex\", y=\"Survived\", hue=\"Sex\", data=train_data)","159c9f02":"women = train_data.loc[train_data.Sex == 'female'][\"Survived\"]\nrate_women = sum(women)\/len(women)\n\nprint(\"% of women who survived:\", rate_women)","ff8cf952":"men = train_data.loc[train_data.Sex == 'male'][\"Survived\"]\nrate_men = sum(men)\/len(men)\n\nprint(\"% of men who survived:\", rate_men)","394ca21b":"# Lets see how many people survived based on Pclass\nsns.barplot(x=\"Pclass\", y=\"Survived\", data=train_data)","e7a75e2e":"sns.barplot(x=\"Embarked\", y=\"Survived\", data=train_data)","442ab68b":"sns.histplot(x=\"Age\", data=train_data, bins=60)","4fe368ee":"sns.scatterplot(x='Survived', y='Age', data=train_data, alpha=0.1).set_title(\"AGE wrt SURVIVED\")","777cc626":"sns.barplot(x='SibSp', y=\"Survived\", data=train_data)","8d26e9d2":"sns.barplot(x=\"Parch\", y=\"Survived\", data=train_data)","810e8f96":"plt.figure(figsize=(10, 5))\nsns.boxplot(x='Pclass', y='Age', data=train_data)","bb9d89b7":"from sklearn.ensemble import RandomForestClassifier\n\ny = train_data[\"Survived\"]\n\nfeatures = [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\"]\nX = pd.get_dummies(train_data[features])\nX_test = pd.get_dummies(test_data[features])\n\nmodel = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=1)\nmodel.fit(X, y)\npredictions = model.predict(X_test)\nprint(\"Random forest Accuracy with 4 features : \", round(model.score(X, y)*100, 2))\n\n#output = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\n#output.to_csv('my_submission.csv', index=False)\n#print(\"Your submission was successfully saved!\")","26421e2b":"# lets check if there is null value in our train_data\ntrain_data.isnull()","2e272888":"train_data.isnull().sum()","540d5cda":"plt.figure(figsize=(12, 6))\nsns.heatmap(train_data.isnull(), yticklabels=False, cmap='viridis', cbar=False)","928e901b":"# Likewise lets sum up null datas in test_data\ntest_data.isnull().sum()","6ac0b1ec":"plt.figure(figsize=(12, 6))\nsns.heatmap(test_data.isnull(), yticklabels=False, cmap='viridis', cbar=False)","bb689eda":"# let's see `Embarked` unique values\ntrain_data['Embarked'].unique()","a380c965":"# Lets figure out which is common port\ntrain_data['Embarked'].value_counts()","4bfb6614":"train_data['Embarked'].fillna(value='S', inplace=True)\n\n# lets see if it has been filled\ntrain_data.Embarked.isnull().sum()","38d80d68":"# for train data\ntrain_data.loc[train_data[\"Embarked\"] == \"S\", \"Embarked\"] = 0\ntrain_data.loc[train_data[\"Embarked\"] == \"C\", \"Embarked\"] = 1\ntrain_data.loc[train_data[\"Embarked\"] == \"Q\", \"Embarked\"] = 2\n\n# for test data\ntest_data.loc[test_data[\"Embarked\"] == \"S\", \"Embarked\"] = 0\ntest_data.loc[test_data[\"Embarked\"] == \"C\", \"Embarked\"] = 1\ntest_data.loc[test_data[\"Embarked\"] == \"Q\", \"Embarked\"] = 2","e3a900e3":"train_data.head()","8a0c947c":"test_data['Fare'].fillna(value=test_data.Fare.mean(), inplace=True)\ntest_data.isnull().sum()","a180dc16":"train_data['Age'] = train_data['Age'].fillna(train_data['Age'].median())\ntrain_data['Age'].value_counts()","14e6e792":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn import metrics\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import classification_report\nfrom sklearn.tree import DecisionTreeClassifier\n\nfeatures = [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\", \"Fare\", \"Embarked\"]\n\nX = pd.get_dummies(train_data[features])\ny = train_data[\"Survived\"]\n\nmodel = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=1)\nmodel.fit(X, y)\n\nX_test = pd.get_dummies(test_data[features])\nrf_predictions = model.predict(X_test)\nprint(\"Random forest Accuracy with 6 features (on Train Data): \", round(model.score(X, y)*100, 2))\n\noutput = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': rf_predictions})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","7c9515a6":"# dtree_model = DecisionTreeClassifier(random_state=1)\n# dtree_model.fit(X, y)\n# dtree_predictions = dtree_model.predict(X_test)\n# dtree_train_accuracy = round(dtree_model.score(X, y) * 100, 2)\n# print(\"Decision Tree Classifier Accuracy with 6 features (On Train data): \", dtree_train_accuracy)\n\n# output = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': dtree_predictions})\n# output.to_csv('my_submission.csv', index=False)\n# print(\"Your submission was successfully saved!\")","13e80e68":"As we can see, there is no nan values. Now lets convert these {S, C, Q} values to Numerical value {0, 1, 2}","d695a3ed":"Let's explore our `train data` more.","d37f5f27":"Let's see this from code as well","f2b225c9":"Since 'S' is the most common port, let's fill this nan vaues with \"S\"","54cb6b3e":"Here we can see, \"Embarked\" has been converted to numerical values","b29948f8":"it seems, **62%** of 1st Class, **48%** of 2nd Class & **24%** of 3rd class people Survived.","9581d8d9":"Lets Verify if it has been converted.","dcce0dc7":"### Data cleaning - let's clean our train data","78a1b876":"Here we can see (from bar graph & code as well) that **74% of the women** survived whereas only **18% men survived**.","6804ed5d":"Let's see `general assumption (gender_submission.csv)` file, \n\nwe see that, it assumes that all the female passengers are survived & all male passengers are died.\n\nlet's explore `train.csv` & check if this is a resonable guess."}}