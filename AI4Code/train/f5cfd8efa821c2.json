{"cell_type":{"a06bc60b":"code","a66c7d7e":"code","db956f07":"code","ca384f5a":"markdown","60505d56":"markdown","9aaa8bf0":"markdown"},"source":{"a06bc60b":"!pip install git+https:\/\/github.com\/paulgavrikov\/visualkeras","a66c7d7e":"from tensorflow.python.keras.models import Sequential\nfrom tensorflow.python.keras.layers import Dense, Flatten, Conv2D, Dropout, MaxPooling2D, InputLayer, ZeroPadding2D\n\nimport visualkeras  # <--- Import visualkeras\n\n\n# create VGG16\nimage_size = 224\nmodel = Sequential()\nmodel.add(InputLayer(input_shape=(image_size, image_size, 3)))\n\nmodel.add(ZeroPadding2D((1, 1)))\nmodel.add(Conv2D(64, activation='relu', kernel_size=(3, 3)))\nmodel.add(ZeroPadding2D((1, 1)))\nmodel.add(Conv2D(64, activation='relu', kernel_size=(3, 3)))\nmodel.add(visualkeras.SpacingDummyLayer())  # These are dummy layers to tell visualkeras when to insert additional padding between layers, you can remove them if you want.\n\nmodel.add(MaxPooling2D((2, 2), strides=(2, 2)))\nmodel.add(ZeroPadding2D((1, 1)))\nmodel.add(Conv2D(128, activation='relu', kernel_size=(3, 3)))\nmodel.add(ZeroPadding2D((1, 1)))\nmodel.add(Conv2D(128, activation='relu', kernel_size=(3, 3)))\nmodel.add(visualkeras.SpacingDummyLayer())  # dummy\n\nmodel.add(MaxPooling2D((2, 2), strides=(2, 2)))\nmodel.add(ZeroPadding2D((1, 1)))\nmodel.add(Conv2D(256, activation='relu', kernel_size=(3, 3)))\nmodel.add(ZeroPadding2D((1, 1)))\nmodel.add(Conv2D(256, activation='relu', kernel_size=(3, 3)))\nmodel.add(ZeroPadding2D((1, 1)))\nmodel.add(Conv2D(256, activation='relu', kernel_size=(3, 3)))\nmodel.add(visualkeras.SpacingDummyLayer())  # dummy\n\nmodel.add(MaxPooling2D((2, 2), strides=(2, 2)))\nmodel.add(ZeroPadding2D((1, 1)))\nmodel.add(Conv2D(512, activation='relu', kernel_size=(3, 3)))\nmodel.add(ZeroPadding2D((1, 1)))\nmodel.add(Conv2D(512, activation='relu', kernel_size=(3, 3)))\nmodel.add(ZeroPadding2D((1, 1)))\nmodel.add(Conv2D(512, activation='relu', kernel_size=(3, 3)))\nmodel.add(visualkeras.SpacingDummyLayer())  # dummy\n\nmodel.add(MaxPooling2D((2, 2), strides=(2, 2)))\nmodel.add(ZeroPadding2D((1, 1)))\nmodel.add(Conv2D(512, activation='relu', kernel_size=(3, 3)))\nmodel.add(ZeroPadding2D((1, 1)))\nmodel.add(Conv2D(512, activation='relu', kernel_size=(3, 3)))\nmodel.add(ZeroPadding2D((1, 1)))\nmodel.add(Conv2D(512, activation='relu', kernel_size=(3, 3)))\nmodel.add(MaxPooling2D())\nmodel.add(visualkeras.SpacingDummyLayer())  # dummy\n\nmodel.add(Flatten())\n\nmodel.add(Dense(4096, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(4096, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(1000, activation='softmax'))","db956f07":"visualkeras.layered_view(model, type_ignore=[ZeroPadding2D, Flatten], legend=True)","ca384f5a":"And visualize! This will return a PIL image that is shown within the output but you can also provide the `to_file` parameter to save it in your kaggle output directory.\nThe architecture output is highly customizable, take a look here: https:\/\/github.com\/paulgavrikov\/visualkeras#Usage","60505d56":"Install visualkeras from pypi: `!pip install visualkeras` or github `!pip install git+https:\/\/github.com\/paulgavrikov\/visualkeras` (latest features).","9aaa8bf0":"Create your keras model - there is no need to compile! Here we will recreate VGG16."}}