{"cell_type":{"60643168":"code","b1523661":"code","ac1fbf73":"code","150a9282":"code","d41ad2ed":"code","c655fad9":"code","4a8aaaf0":"code","b1e68104":"code","a66adf1d":"code","2122650c":"code","60a6c6bc":"code","f118d8f8":"code","10b0f6dc":"code","cbc1f056":"code","29ceb238":"code","8f47374b":"code","4be86b92":"code","1bd10e1e":"code","fd27299c":"code","8c52d46a":"code","daa2aec8":"code","3b587659":"markdown","1a3283c2":"markdown","d1e3537a":"markdown","3134e391":"markdown","73dede17":"markdown","1d2e2aaa":"markdown","d5ed5bb3":"markdown","95a1afe2":"markdown","1b221a81":"markdown","20cb75cc":"markdown","648504fa":"markdown","7a492a88":"markdown","9e1a65d1":"markdown","1eea07f7":"markdown","9ff24ae8":"markdown"},"source":{"60643168":"import matplotlib.pyplot as plt # plotting\nimport numpy as np # linear algebra\nimport os # accessing directory structure\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport json\nimport nltk\n\n%matplotlib inline  ","b1523661":"# Reading the dataset \nnRowsRead = 1000 # specify 'None' if want to read whole file\n\n# whats-happening-la-calendar-dataset.csv has 29519 rows in reality, but we are only loading\/previewing the first 1000 rows\nla_cal_df = pd.read_csv('..\/input\/whats-happening-la-calendar-dataset.csv',\\\n                        delimiter=',', nrows = nRowsRead) #, converters={'Location Address':CustomParser})\nla_cal_df.dataframeName = 'whats-happening-la-calendar-dataset.csv'\nnRow, nCol = la_cal_df.shape\nprint(f'There are {nRow} rows and {nCol} columns')","ac1fbf73":"la_cal_df.head(2)","150a9282":"# Cleaning up some missing values\nla_cal_df['Location Address'].fillna('{}', inplace = True)\nla_cal_df['Age Groupings'].replace('Seniors','Senior', inplace=True)","d41ad2ed":"import ast, json\nfrom pandas.io.json import json_normalize\n\ndef only_dict(d):\n    '''\n    Convert json string representation of dictionary to a python dict\n    '''\n    return ast.literal_eval(d)\n\n# extact the information in the Location Address column\nA = json_normalize(la_cal_df['Location Address'].apply(only_dict).tolist()).add_prefix('event_address.')\nA.fillna('{}', inplace = True)\nB = json_normalize(A['event_address.human_address'].apply(only_dict).tolist()).add_prefix('event_address.')\nB=B.rename(columns = {'event_address.address': 'event_address.street'})","c655fad9":"A.head()","4a8aaaf0":"B.head()","b1e68104":"# add the new address columns and fill in missing values with an empty string\nla_cal_df = la_cal_df.join([B, A[['event_address.latitude', \"event_address.longitude\", \"event_address.needs_recoding\"]]]).fillna('')","a66adf1d":"la_cal_df.head()","2122650c":"# count of events by age grouping\nla_cal_df['Age Groupings'].value_counts()","60a6c6bc":"# histogram of the number of events by city\n# Note we are ignoring events that do not have the city specified\n\nfig, ax = plt.subplots(figsize=(10, 6))\nplt.title('Number of Events by City')\nplt.xlabel('City')\nplt.ylabel('Event Count')\nla_cal_df.loc[la_cal_df['event_address.city'] != '']['event_address.city'].value_counts().plot(ax=ax, kind='bar')","f118d8f8":"la_cal_df.loc[la_cal_df['event_address.city'] == 'City'].head(5)","10b0f6dc":"la_cal_df.loc[173]['Location Address']","cbc1f056":"(la_cal_df.loc[la_cal_df['event_address.city'] == 'City'])['Location Common Name'].value_counts()","29ceb238":"# histogram of the number of events by city\n# Note we are ignoring events that do not have the city specified\n\nla_cal_df.loc[la_cal_df['event_address.city'] == 'City', ['event_address.city']] = \"Harbor City\"\n\nfig, ax = plt.subplots(figsize=(10, 6))\nplt.title('Number of Events by City')\nplt.xlabel('City')\nplt.ylabel('Event Count')\nla_cal_df.loc[la_cal_df['event_address.city'] != '']['event_address.city'].value_counts().plot(ax=ax, kind='bar')","8f47374b":"# get a list of bigrams from the given title list\ndef get_bigrams(titles):\n    bigrams_set = [nltk.bigrams(t.split()) for t in titles]\n    b_list=[]\n    for b_set in bigrams_set:\n        for b in b_set:\n            b_list.append(''.join([w+' ' for w in b]))\n    return b_list","4be86b92":"# get the top_n most common bigrams in bigram list\n# returns a dataframe with top_n bigrams and their frequencies\ndef get_bigram_freqs(b_list, top_n=10):\n    bigram_freqs=nltk.FreqDist(b_list)\n    b_res = pd.DataFrame(bigram_freqs.most_common(top_n), \\\n                         columns=['Word', 'Frequency'])\n    return b_res","1bd10e1e":"adult_titles = (la_cal_df.loc[la_cal_df['Age Groupings']=='Adult'])['Event Name'].str.lower()\nadult_bi_list = get_bigrams(adult_titles)\nadult_freq_list = get_bigram_freqs(adult_bi_list, top_n=100)","fd27299c":"fig, ax = plt.subplots(figsize=(20, 6))\nplt.title('Top Bigrams for Adults')\nplt.xlabel('Bigrams')\nplt.ylabel('Frequency')\nplt.xticks(rotation=90)\nax.plot(adult_freq_list['Word'], adult_freq_list['Frequency'])","8c52d46a":"child_titles = (la_cal_df.loc[la_cal_df['Age Groupings']=='Child'])['Event Name'].str.lower()\nchild_bi_list = get_bigrams(child_titles)\nchild_freq_list = get_bigram_freqs(child_bi_list, top_n=100)","daa2aec8":"fig, ax = plt.subplots(figsize=(20, 6))\nplt.title('Top Bigrams for Children')\nplt.xlabel('Bigrams')\nplt.ylabel('Frequency')\nplt.xticks(rotation=90)\nax.plot(child_freq_list['Word'], child_freq_list['Frequency'])","3b587659":"### What is the event frequency for each age group?","1a3283c2":"Looks like LA has the bulk of teh events in this dataset. \n\nHmmm... but what is that \"City\" city on the x axis?","d1e3537a":"#### Events for Adults\nLet's find the most common bigrams (2 word sequences) in events for Adults","3134e391":"### How are the events spread out over different cities?","73dede17":"## Setup","1d2e2aaa":"Let's look at which bigrams are most common. This will tell us something about the events held for this age group.","d5ed5bb3":"Let's look at which bigrams are most common. This will tell us something about the events held for this age group.","95a1afe2":"Let's correct that in our plot then and replace \"City\" with \"Harbor City\"","1b221a81":"The Location Adress column has a lot of useful information. Let us spread that out in seperate columns","20cb75cc":"#### Events for Children\nLet's find the most common bigrams (2 word sequences) in events for Children","648504fa":"## Introduction\nThis is a starter code for visualizing the What's Happening LA Calendar dataset.","7a492a88":"My guess is the street name includes part of the city name..but not sure.\n\nIs the Harbor City - Harbor Gateway the only place referred to as \"City\"? ","9e1a65d1":"Let's look at one of those addresses...","1eea07f7":"Let's take a quick look at what the data looks like:","9ff24ae8":"### What about the event titles? What common themes\/words do they have?"}}