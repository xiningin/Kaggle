{"cell_type":{"ca5f6c09":"code","f490af40":"code","9f6a1fae":"code","486c454b":"code","89de2475":"code","4f26d047":"code","679acf45":"code","b3db20aa":"code","8060847f":"code","27bead26":"code","acd36c81":"code","dd12f9d5":"code","043cc4e5":"code","85e9f978":"code","db5361af":"code","f4c1ae9a":"code","43995a20":"code","76ddfbd3":"code","e673aae7":"code","387c0443":"code","384f0591":"code","756c8c53":"code","3bf55df6":"code","98b41309":"code","8c235bd7":"code","a00cb83b":"code","839fb612":"code","a52677df":"code","f3529a79":"code","75e64a92":"code","67e674dc":"code","8192b262":"code","52de10fc":"code","31d9fb88":"code","f53ab992":"code","35ec61d7":"code","22f672e1":"code","d0ebd904":"code","7eeaecd9":"code","92077638":"code","5f8ededb":"code","8d0965c4":"code","127972ce":"code","b1b96b2c":"code","a944d025":"code","0e24237b":"code","a588f4be":"code","8ee5f60c":"code","9ef7a839":"code","cdeadb81":"code","b168a1d5":"code","bfc9b0e3":"code","7da33621":"code","5253e2f1":"code","192aca19":"code","2ccdc327":"code","bbaae5d0":"code","7629c2f3":"code","a6a48dc7":"code","74ba061a":"code","23e32422":"code","cce984d2":"code","d68c7fad":"code","ac8c18b9":"code","74f25b09":"code","e1deae4b":"code","5b7ded19":"code","c4508630":"code","ba38e6db":"code","c49a1808":"code","ff8818a2":"code","7e740eec":"code","94c060d5":"code","0d66359e":"code","27bfcda0":"code","8e2370d6":"code","1ff5e093":"code","1124eb03":"code","f9db7390":"code","d3f1049f":"code","c3a57701":"code","d26fb711":"code","905995bb":"code","4a625c02":"code","16f82f89":"markdown","4e22c9ac":"markdown","1a74353c":"markdown","183490b7":"markdown","ae46e28f":"markdown","3e079ada":"markdown","1600a84b":"markdown","65f64c6c":"markdown","859f1273":"markdown","6170bde2":"markdown","7e481a56":"markdown","587181ab":"markdown","b77977d9":"markdown","e71d7d33":"markdown","dabd4549":"markdown","8aab875e":"markdown","d4f6973d":"markdown","c9323082":"markdown","5c365ebe":"markdown","5f7fd0ee":"markdown","38132771":"markdown","a32d1092":"markdown","2a6376a5":"markdown","7d51ad13":"markdown","50e32f57":"markdown","d9594086":"markdown","4f2a70ba":"markdown","1adef7c2":"markdown","578d3e94":"markdown","4f6fef7b":"markdown","c5d63ab8":"markdown","553a5a1d":"markdown","76b7d5d6":"markdown","e08281a8":"markdown","0ca4a921":"markdown","dd4e1b3f":"markdown","3c670b05":"markdown","6150a849":"markdown","1f7e72cc":"markdown","16d0f5ff":"markdown","04242ee5":"markdown","608b2e1a":"markdown","92ff4d0e":"markdown","9bda4424":"markdown","82f7ca17":"markdown","de6a59ec":"markdown","dcfeb81f":"markdown"},"source":{"ca5f6c09":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-whitegrid\")\n\nimport seaborn as sns\n\nfrom collections import Counter\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f490af40":"train_df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_PassengerId = test_df[\"PassengerId\"]","9f6a1fae":"train_df.columns","486c454b":"train_df.head()","89de2475":"train_df.describe() #Belli bilgiler verir.","4f26d047":"train_df.info()","679acf45":"def bar_plot(variable):\n    \"\"\"\n    input : variable ex: \"Sex\"\n    output : bar plot & value count\n    \"\"\"\n    # get feature\n    var = train_df[variable]\n    #get number of categorical variable(value,sample)\n    varValue = var.value_counts()\n    \n    #visualize\n    plt.figure(figsize = (9,3))\n    plt.bar(varValue.index, varValue)\n    plt.xticks(varValue.index, varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}: \\n {}\".format(variable,varValue))","b3db20aa":"category1 = [\"Survived\",\"Sex\",\"Pclass\",\"Embarked\",\"SibSp\",\"Parch\"]\nfor c in category1:\n    bar_plot(c)","8060847f":"category2 = [\"Cabin\",\"Name\",\"Ticket\"]\nfor c in category2:\n    print(\"{} \\n\".format(train_df[c].value_counts()))","27bead26":"def plot_hist(variable):\n    plt.figure(figsize = (9,3))\n    plt.hist(train_df[variable], bins = 50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with hist\".format(variable))","acd36c81":"numericVar = [\"Fare\",\"Age\",\"PassengerId\"]\nfor n in numericVar:\n    plot_hist(n)","dd12f9d5":"# Pclass vs Survived\ntrain_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)","043cc4e5":"# Sex vs Survived\ntrain_df[[\"Sex\",\"Survived\"]].groupby([\"Sex\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)","85e9f978":"# SibSp vs Survived\ntrain_df[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)","db5361af":"# Pclass vs Survived\ntrain_df[[\"Parch\",\"Survived\"]].groupby([\"Parch\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)","f4c1ae9a":"def detect_outliers(df,features):\n    outlier_indices = []\n    for c in features:\n        #1st quartile\n        Q1 = np.percentile(df[c],25)\n        #3rd quartile\n        Q3 = np.percentile(df[c],75)\n        #IQR\n        IQR = Q3 - Q1\n        #Outlier step\n        outlier_step = IQR * 1.5\n        #Detect outlier and their indeces\n        outlier_list_col = df[(df[c] < Q1 - outlier_step) | (df[c] > Q3 + outlier_step)].index\n        #store indeces\n        outlier_indices.extend(outlier_list_col)\n        \n    outlier_indices = Counter(outlier_indices) #Elemanlar\u0131n ka\u00e7ar tane oldu\u011funu hesapl\u0131yor.\n    multiple_outliers = list(i for i, v in outlier_indices.items() if v > 2)\n    \n    return multiple_outliers","43995a20":"train_df.loc[detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]","76ddfbd3":"#drop outliers\ntrain_df = train_df.drop(detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"]), axis = 0).reset_index(drop = True)","e673aae7":"train_df_len = len(train_df)\ntrain_df = pd.concat([train_df,test_df], axis = 0).reset_index(drop = True)","387c0443":"train_df.head()","384f0591":"train_df.columns[train_df.isnull().any()]","756c8c53":"train_df.isnull().sum()","3bf55df6":"train_df[train_df[\"Embarked\"].isnull()]","98b41309":"train_df.boxplot(column = \"Fare\", by = \"Embarked\")\nplt.show()","8c235bd7":"train_df[\"Embarked\"] = train_df[\"Embarked\"].fillna(\"C\")","a00cb83b":"train_df[train_df[\"Fare\"].isnull()]","839fb612":"train_df[\"Fare\"] = train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"] == 3][\"Fare\"]))","a52677df":"list1 = [\"SibSp\",\"Parch\",\"Age\",\"Fare\",\"Survived\"]\nsns.heatmap(train_df[list1].corr(), annot = True, fmt = \".2f\")\nplt.show()","f3529a79":"g = sns.factorplot(x = \"SibSp\", y = \"Survived\", data = train_df, kind = \"bar\", size = 6)\ng.set_ylabels(\"Survived Probabilty\")\nplt.show()","75e64a92":"g = sns.factorplot(x = \"Parch\", y = \"Survived\", data = train_df, kind = \"bar\", size = 6)\ng.set_ylabels(\"Survived Probabilty\")\nplt.show()\n# siyah ok standart sapma","67e674dc":"g = sns.factorplot(x = \"Pclass\", y = \"Survived\" , data = train_df, kind = \"bar\", size = 6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","8192b262":"g = sns.FacetGrid(train_df , col = \"Survived\")\ng.map(sns.distplot, \"Age\", bins = 25)\nplt.show()","52de10fc":"g = sns.FacetGrid(train_df, col = \"Survived\", row = \"Pclass\", size = 2)\ng.map(plt.hist, \"Age\", bins = 25)\ng.add_legend()\nplt.show()","31d9fb88":"g = sns.FacetGrid(train_df, row= \"Embarked\", size = 2)\ng.map(sns.pointplot, \"Pclass\",\"Survived\",\"Sex\")\ng.add_legend()\nplt.show()","f53ab992":"g = sns.FacetGrid(train_df , row = \"Embarked\", col = \"Survived\", size = 2.3)\ng.map(sns.barplot, \"Sex\",\"Fare\")\ng.add_legend()\nplt.show()","35ec61d7":"train_df[train_df[\"Age\"].isnull()]","22f672e1":"sns.factorplot(x = \"Sex\", y = \"Age\" , data = train_df , kind = \"box\")\nplt.show()","d0ebd904":"sns.factorplot(x = \"Sex\", y = \"Age\", hue = \"Pclass\", data = train_df, kind = \"box\")\nplt.show()","7eeaecd9":"sns.factorplot(x = \"Parch\", y = \"Age\", data = train_df, kind = \"box\")\nsns.factorplot(x = \"SibSp\", y = \"Age\", data = train_df, kind = \"box\")\nplt.show()","92077638":"train_df[\"Sex\"] = [1 if i == \"male\" else 0 for i in train_df[\"Sex\"]]\nsns.heatmap(train_df[[\"Age\",\"Sex\",\"SibSp\",\"Parch\",\"Pclass\"]].corr(), annot = True)\nplt.show()","5f8ededb":"index_nan_age = list(train_df[\"Age\"][train_df[\"Age\"].isnull()].index)\nfor i in index_nan_age:\n    age_pred = train_df[\"Age\"][((train_df[\"SibSp\"] == train_df.iloc[i][\"SibSp\"]) & (train_df[\"Parch\"] == train_df.iloc[i][\"Parch\"]) & (train_df[\"Pclass\"] == train_df.iloc[i][\"Pclass\"]))].median()\n    age_med = train_df[\"Age\"].median()\n    if not np.isnan(age_pred):\n        train_df[\"Age\"].iloc[i] = age_pred\n    else:\n        train_df[\"Age\"].iloc[i] = age_med","8d0965c4":"train_df[\"Name\"].head(10)","127972ce":"name = train_df[\"Name\"]\ntrain_df[\"Title\"] = [i.split(\".\")[0].split(\",\")[-1].strip() for i in name]","b1b96b2c":"train_df[\"Title\"].head(10)","a944d025":"sns.countplot(x = \"Title\", data = train_df)\nplt.xticks(rotation = 60)\nplt.show()","0e24237b":"# Convert to Categorical\ntrain_df[\"Title\"] = train_df[\"Title\"].replace([\"Lady\",\"the Countess\",\"Jonkheer\",\"Dona\",\"Capt\",\"Col\",\"Don\",\"Dr\",\"Major\",\"Rev\",\"Sir\"],\"other\")\ntrain_df[\"Title\"] = [0 if i == \"Master\" else 1 if i == \"Miss\" or i == \"Ms\" or i == \"Mlle\" or i == \"Mrs\" else 2 if i == \"Mr\" else 3 for i in train_df[\"Title\"]]\ntrain_df[\"Title\"].head(10)","a588f4be":"sns.countplot(x = \"Title\", data = train_df)\nplt.xticks(rotation = 60)\nplt.show()","8ee5f60c":"g = sns.factorplot(x = \"Title\", y = \"Survived\", data = train_df, kind = \"bar\")\ng.set_xticklabels([\"Master\",\"Mrs\",\"Mr\",\"Other\"])\ng.set_ylabels(\"Survival Probability\")\nplt.show()","9ef7a839":"train_df.drop(labels = [\"Name\"], axis = 1, inplace = True)","cdeadb81":"train_df.head()","b168a1d5":"train_df = pd.get_dummies(train_df,columns = [\"Title\"])\ntrain_df.head()","bfc9b0e3":"train_df.head()","7da33621":"train_df[\"Fsize\"] = train_df[\"SibSp\"] + train_df[\"Parch\"] + 1","5253e2f1":"train_df.head()","192aca19":"g = sns.factorplot(x = \"Fsize\", y = \"Survived\", data = train_df, kind = \"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()","2ccdc327":"train_df[\"family_size\"] = [1 if i < 5 else 0 for i in train_df[\"Fsize\"]]","bbaae5d0":"train_df.head(10)","7629c2f3":"sns.countplot(x = \"family_size\", data = train_df)\nplt.show()","a6a48dc7":"g = sns.factorplot(x = \"family_size\", y = \"Survived\", data = train_df, kind = \"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()","74ba061a":"train_df = pd.get_dummies(train_df,columns = [\"family_size\"])\ntrain_df.head()","23e32422":"train_df[\"Embarked\"].head()","cce984d2":"sns.countplot(x = \"Embarked\", data = train_df)\nplt.show()","d68c7fad":"train_df = pd.get_dummies(train_df, columns = [\"Embarked\"])","ac8c18b9":"train_df.head()","74f25b09":"train_df[\"Ticket\"].head(20)","e1deae4b":"tickets = []\nfor i in list(train_df.Ticket):\n    if not i.isdigit():\n        tickets.append(i.replace(\".\",\" \").replace(\"\/\",\" \").strip().split()[0])\n    else:\n        tickets.append(\"x\")\ntrain_df[\"Ticket\"] = tickets","5b7ded19":"train_df[\"Ticket\"].head(20)","c4508630":"train_df = pd.get_dummies(train_df, columns = [\"Ticket\"],prefix = \"T\")\ntrain_df.head(10)\n","ba38e6db":"sns.countplot(x = \"Pclass\", data = train_df)\nplt.show()","c49a1808":"train_df[\"Pclass\"] = train_df[\"Pclass\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df , columns = [\"Pclass\"])\ntrain_df.head(10)","ff8818a2":"train_df[\"Sex\"] = train_df[\"Sex\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df, columns = [\"Sex\"])\ntrain_df.head()","7e740eec":"train_df.drop(labels = [\"PassengerId\",\"Cabin\"], axis = 1, inplace = True)","94c060d5":"train_df.columns","0d66359e":"from sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score","27bfcda0":"train_df_len","8e2370d6":"test = train_df[train_df_len:]\ntest.drop(labels = [\"Survived\"], axis = 1, inplace = True)","1ff5e093":"test.head()","1124eb03":"train = train_df[:train_df_len]\nX_train = train.drop(labels = \"Survived\", axis = 1)\ny_train = train[\"Survived\"]\nX_train, X_test, y_train, y_test = train_test_split(X_train, y_train, test_size = 0.33, random_state = 42)\nprint(\"X_train\",len(X_train))\nprint(\"X_test\",len(X_test))\nprint(\"y_train\",len(y_train))\nprint(\"y_test\",len(y_test))\nprint(\"test\",len(test))","f9db7390":"logreg = LogisticRegression()\nlogreg.fit(X_train,y_train)\nacc_log_train = round(logreg.score(X_train, y_train) * 100,2)\nacc_log_test = round(logreg.score(X_test,y_test) * 100,2)\nprint(\"Training Accuracy: % {}\".format(acc_log_train))\nprint(\"Testing Accuracy: % {}\".format(acc_log_test))","d3f1049f":"random_state = 42\nclassifier = [DecisionTreeClassifier(random_state = random_state),\n             SVC(random_state = random_state),\n             RandomForestClassifier(random_state = random_state),\n             LogisticRegression(random_state = random_state),\n             KNeighborsClassifier()]\n\ndt_param_grid = {\"min_samples_split\" : range(10,500,20),\n                \"max_depth\" : range(1,20,2)}\n\nsvc_param_grid = {\"kernel\" : [\"rbf\"],\n                 \"gamma\" : [0.001, 0.01, 0.1, 1],\n                 \"C\" : [1,10,50,100,200,300,1000]}\n\nrf_param_grid = {\"max_features\": [1,3,10],\n                \"min_samples_split\": [2,3,10],\n                \"min_samples_leaf\": [1,3,10],\n                \"bootstrap\":[False],\n                \"n_estimators\": [100,300],\n                \"criterion\": [\"gini\"]}\n\nlogreg_param_grid = {\"C\" : np.logspace(-3,3,7),\n                     \"penalty\": [\"l1\",\"l2\"]}\n\nknn_param_grid = {\"n_neighbors\" : np.linspace(1,19,10, dtype = int).tolist(),\n                 \"weights\" : [\"uniform\",\"distance\"],\n                 \"metric\" : [\"euclidean\",\"manhattan\"]}\n\nclassifier_param = [dt_param_grid,\n                   svc_param_grid,\n                   rf_param_grid,\n                   logreg_param_grid,\n                   knn_param_grid]","c3a57701":"cv_result = []\nbest_estimators = []\nfor i in range(len(classifier)):\n    clf = GridSearchCV(classifier[i], param_grid=classifier_param[i], cv = StratifiedKFold(n_splits = 10), scoring=\"accuracy\", n_jobs = -1, verbose = 1)\n    clf.fit(X_train, y_train)\n    cv_result.append(clf.best_score_)\n    best_estimators.append(clf.best_estimator_)\n    print(cv_result[i])","d26fb711":"cv_results = pd.DataFrame({\"Cross Validation Means\" : cv_result, \"ML Models\": [\"DecisionTreeClassifier\",\"SVM\",\n                                                                              \"RandomForestClassifier\",\n                                                                              \"LogisticRegression\",\n                                                                              \"KNeighborsClassifier\"]})\n\ng = sns.barplot(\"Cross Validation Means\", \"ML Models\" , data = cv_results)\ng.set_xlabel(\"Mean Accuracy\")\ng.set_title(\"Cross Validation Scores\")\nplt.show()","905995bb":"votingC = VotingClassifier(estimators = [(\"dt\",best_estimators[0]),\n                                        (\"rfc\",best_estimators[2]),\n                                        (\"lr\",best_estimators[3])],\n                                        voting = \"soft\", n_jobs = -1)\nvotingC = votingC.fit(X_train, y_train)\nprint(accuracy_score(votingC.predict(X_test), y_test))","4a625c02":"test_survived = pd.Series(votingC.predict(test), name = \"Survived\").astype(int)\nresults = pd.concat([test_PassengerId, test_survived], axis = 1)\nresults.to_csv(\"titanic.csv\", index = False)","16f82f89":"<a id = \"19\"><\/a>\n### Embarked -- Sex -- Pclass - Survived","4e22c9ac":"* Having a lot of SibSp  have less change to survive.\n* If  SibSp == 0 or 1 or 2, passenger has more chance to survive.\n* We can conside a new feature describing these categories.","1a74353c":"<a id = \"24\"><\/a>\n### Embarked","183490b7":"<a id = \"7\"><\/a>\n## Outlier Detection (Ayr\u0131k say\u0131y\u0131 bulma)","ae46e28f":"<a id = \"28\"><\/a>\n### Drop Passenger ID and Cabin","3e079ada":"<a id = \"11\"><\/a>\n## Visualization","1600a84b":"<a id = \"21\"><\/a>\n## Feature Enginnering\n    ","65f64c6c":"<a id = \"14\"><\/a>\n### Parch -- Survived","859f1273":"* float64(2) : Fare and Age\n* int64(5) : Pclass, Sibsp, Parch, PassengerId and Survived\n* object(5) : Cabin, Embarked, Ticket, Name and Sex","6170bde2":"<a id = \"13\"><\/a>\n### SibSp -- Survived","7e481a56":"# Introduction\nThe sinking of Titanic is one of the most notorious shipwrecks in the history. In 1912, during her voyage, the Titanic sank after colliding with an iceberg, killing 1502 out of 2224 passengers and crew.\n\n## Content:\n1. [Load and Check Data](#1)\n1. [Variable Description](#2)\n    * [Univariate Variable Analysis](#3)\n        * [Categorical Variable](#4)\n        * [Numerical Variable](#5)\n1. [Basic Data Analysis](#6)\n1. [Outlier Detection](#7)\n1. [Missing Value](#8)\n    * [Find Missing Value](#9)\n    * [Fill Missing Value](#10)\n1. [Visualization](#11)\n    * [Correlation Between SibSp -- Parch -- Age -- Fare -- Survived](#12)\n    * [SibSp -- Survived](#13)\n    * [Parch -- Survived](#14)\n    * [Pclass -- Survived](#15)\n    * [Age -- Survived](#16)\n    * [Pclass -- Survived -- Age](#17)\n    * [Embarked -- Sex -- Pclass - Survived](#18)\n    * [Embarked -- Sex -- Fare - Survived](#19)\n    * [Fill Missing: Age Feature](#20)\n1. [Feature Enginnering](#21)\n    * [Name -- Title](#22)\n    * [Family Size](#23)\n    * [Embarked](#24)\n    * [Ticket](#25)\n    * [Pclass](#26)\n    * [Sex](#27)\n    * [Drop Passenger ID and Cabin](#28)\n1. [Modeling](#29)\n    * [Train - Test Split](#30)\n    * [Simple Logistic Regression](#31)\n    * [Hyperparameter Tuning -- Grid Search -- Cross Validation](#32)\n    * [Ensemble Modeling](#33)\n    * [Prediction and Submission](#34)","587181ab":"* Pclass is important feature for model training.","b77977d9":"* Small families have more change to survive than large families.","e71d7d33":"<a id = \"1\"><\/a>\n## Load and Check Data","dabd4549":"<a id = \"16\"><\/a>\n### Age -- Survived","8aab875e":"<a id = \"8\"><\/a>\n## Missing Value\n   * Find Missing Value\n   * Fill Missing Value","d4f6973d":"<a id = \"23\"><\/a>\n### Family Size","c9323082":"<a id = \"4\"><\/a>\n### Categorical Variable\n","5c365ebe":"<a id = \"17\"><\/a>\n### Pclass -- Survived -- Age","5f7fd0ee":"<a id = \"5\"><\/a>\n### Numerical Variable","38132771":"<a id = \"3\"><\/a>\n## Univariate Variable Analysis\n* **Categorical Variable:** Survived, Sex, Pclass, Embarked, Cabin, Name, Ticket, Sibsp and Parch\n* **Numerical Variable:** Age, Fare and PassengerId\n","a32d1092":"<a id = \"30\"><\/a>\n### Train - Test Split","2a6376a5":"<a id = \"26\"><\/a>\n### Pclass","7d51ad13":"* Female passenger have much better survival rate than male.\n* Males have better survival rate in pclass 3 in C.\n* Embarked and Sex will be used in training.","50e32f57":"<a id = \"31\"><\/a>\n### Simple Logistic Regression","d9594086":"* Age is no correlated with sex but it is correlated with Parch, SibSp and Pclass.","4f2a70ba":"* SibSp and Parch can be used for new feature extraction with th = 3\n* Small families have more change to survive\n* There is a std in survival of passenger with parch = 3","1adef7c2":"<a id = \"6\"><\/a>\n## Basic Data Analysis\n\n* Pclass  - Survived\n* Sex - Survived\n* SibSp - Survived\n* Parch - Survived","578d3e94":"* Age <= 10 has a high survival rate,\n* Oldest passenger (80) survived,\n* Large number of 20 years old did not survive,\n* Most passengers are in 15 - 35 age range,\n* Use age feature in training\n* Use age distribution for missing value of age","4f6fef7b":"<a id = \"32\"><\/a>\n### Hyperparameter Tuning -- Grid Search -- Cross Validation\nWe will cmpore 5 ml classifier and evaluate mean accuracy of each of them bystratified cross calidation.\n\n* Decision Tree\n* SVM\n* Random Forest\n* KNN\n* Logistic Regression","c5d63ab8":"<a id = \"33\"><\/a>\n### Ensemble Modeling","553a5a1d":"<a id = \"34\"><\/a>\n### Prediction and Submission","76b7d5d6":"* Sex is not informative for age prediction, age distribution seems to be same.","e08281a8":"<a id = \"2\"><\/a>\n## Veriable Description\n\n1. PassengerId: unique id number to each passenger\n1. Survived: passenger survive(1) or died(0)\n1. Pclass: passenger class\n1. Name: name\n1. Sex: gender of passenger\n1. Age: age of passenger\n1. SibSp: number of siblings\/spouses\n1. Parch: number of passenger\/children\n1. Ticket: ticket number\n1. Fare: amout of money spent on ticket\n1. Cabin: cabin category\n1. Embarked: port where passenger embarked (C = Cherbourg, Q = Queenstown, S = Southompton)","0ca4a921":"<a id = \"9\"><\/a>\n### Find Missing Value","dd4e1b3f":"* Passengers who pay higher fare have better survival. Fare can be used categorical for training.","3c670b05":"* 1st class pasengers older than 2nd, and 2nd is older than 3rd class.","6150a849":"<a id = \"29\"><\/a>\n## Modeling","1f7e72cc":"<a id = \"18\"><\/a>\n### Embarked -- Sex -- Pclass - Survived","16d0f5ff":"<a id = \"27\"><\/a>\n### Sex","04242ee5":"<a id = \"22\"><\/a>\n### Name -- Title","608b2e1a":"Fare feature seems to heave correlation with survived feature (0.26).","92ff4d0e":"<a id = \"12\"><\/a>\n### Correlation Between SibSp -- Parch -- Age -- Fare -- Survived","9bda4424":"<a id = \"15\"><\/a>\n### Pclass -- Survived","82f7ca17":"<a id = \"25\"><\/a>\n### Ticket","de6a59ec":"<a id = \"20\"><\/a>\n### Fill Missing: Age Feature","dcfeb81f":"<a id = \"10\"><\/a>\n### Fill Missing Value\n * Embarked has 2 missing value\n * Fare has only 1"}}