{"cell_type":{"d2f856ce":"code","9b0aee11":"code","c48ea2c2":"code","5f477e4f":"code","f3451f2a":"code","601f66fb":"code","06515518":"code","c340f7bb":"code","c26f710b":"code","f80f6084":"code","de20ef26":"code","603fb8db":"code","96713e4e":"code","930f711c":"code","49dc1bb6":"code","dfd2a822":"code","a332f2b4":"code","7571df86":"code","13f2d7cb":"code","b6da51b1":"code","92a89dad":"code","76e27959":"code","e77b0d05":"code","9fa1188a":"code","75fdf1a8":"code","ff096593":"code","c6476608":"markdown","b2d26cf4":"markdown","3f8faac8":"markdown","1d29a606":"markdown","f2e4e4d3":"markdown","c4636408":"markdown","c095e900":"markdown","31ed8644":"markdown","b1c0604a":"markdown","5fca5547":"markdown","2000909f":"markdown","2cf0b668":"markdown","56d68f0b":"markdown","1dcf83e1":"markdown","90854065":"markdown","9bccbbc9":"markdown","3eca861f":"markdown","11eb59a3":"markdown","4417bac5":"markdown","93bb7e68":"markdown","1701ba53":"markdown","29b0d7ae":"markdown","1b3c3110":"markdown","ffe82f3a":"markdown","9604ac7b":"markdown","06d0223a":"markdown","31c9f5dd":"markdown","18446b2b":"markdown"},"source":{"d2f856ce":"import os\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nfrom scipy.io import loadmat\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits import mplot3d\n\nfrom sklearn.metrics import accuracy_score, confusion_matrix\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import MultinomialNB, GaussianNB\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\n\n# from pycaret.classification import *\nfrom xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n","9b0aee11":"train = []\ntest = []\ndataDir = \"..\/input\/skeleton-dataset\/Skeleton\/\"\nfor file in os.listdir(dataDir):\n    if file.endswith(\".mat\"):\n        if \"s2\" in file or \"s4\" in file or \"s6\" in file or \"s8\" in file:\n            train.append([loadmat(dataDir+file)[\"d_skel\"],file.split(\"_\")[0]])\n        else:\n            test.append([loadmat(dataDir+file)[\"d_skel\"],file.split(\"_\")[0]])","c48ea2c2":"def trim(x,minvalue):\r\n    r = (x.shape[2]\/(minvalue) )\r\n    array = []\r\n    t=0+r\r\n    i=int(t)\r\n    # print(x.shape[2])\r\n    while i+1 < x.shape[2]:\r\n        array.append( x[:,:,i] + ( (x[:,:,i] - x[:,:,i+1])*(t-i) )  )\r\n        t+=r\r\n        i=int(t)-1\r\n    return np.array(array)[:40].transpose(1,2,0)","5f477e4f":"print(test[-1][0].shape)\r\nprint(trim(test[-1][0],41).shape)","f3451f2a":"d = lambda x1,y1,z1,x2,y2,z2 : ((x1-x2)**2 + (y1-y2)**2 + (z1-z2)**2)**0.5\r\ndef dist_func(skl):\r\n    dvals = d(skl[:,0,:],skl[:,1,:],skl[:,2,:],skl[1,0,:],skl[1,1,:],skl[1,2,:])\r\n    dvals = (dvals[:]-dvals.mean())\/dvals.std()\r\n    return dvals","601f66fb":"x = train[0][0][:,0,0]\r\ny = train[0][0][:,1,0]\r\nz = train[0][0][:,2,0]","06515518":"d(x,y,z,x[1],y[1],z[1])","c340f7bb":"np.array([dist_func(train[0][0])[i][0] for i in range(20)])","c26f710b":"def return_distance_and_action(mats):\r\n    x = []\r\n    y = []\r\n    for skl in mats:\r\n        x.append(dist_func(trim(skl[0],41)).flatten())\r\n        y.append(skl[1])\r\n    return np.array(x),np.array(y)","f80f6084":"X_train,y_train = return_distance_and_action(train)\r\nX_test,y_test = return_distance_and_action(test)","de20ef26":"lr = LogisticRegression(solver='newton-cg')\r\nlr.fit(X_train, y_train)\r\ny_pred = lr.predict(X_test)\r\nprint(\"Accuracy: \",(accuracy_score(y_test,y_pred)))","603fb8db":"sns.heatmap(confusion_matrix(y_test,y_pred))\nplt.show()","96713e4e":"knn = KNeighborsClassifier(n_neighbors = 3)\r\nknn.fit(X_train, y_train)\r\ny_pred = knn.predict(X_test)\r\nprint(\"Accuracy: \",accuracy_score(y_test,y_pred))","930f711c":"sns.heatmap(confusion_matrix(y_test,y_pred))\nplt.show()","49dc1bb6":"mnb = MultinomialNB()\r\nms = MinMaxScaler()\r\nmnb.fit(ms.fit_transform(X_train), y_train)\r\ny_pred = mnb.predict(ms.fit_transform(X_test))\r\nprint(\"Accuracy: \",accuracy_score(y_test,y_pred))","dfd2a822":"sns.heatmap(confusion_matrix(y_test,y_pred))\nplt.show()","a332f2b4":"gnb = GaussianNB()\r\ngnb.fit(X_train, y_train)\r\ny_pred = gnb.predict(X_test)\r\nprint(\"Accuracy: \",accuracy_score(y_test,y_pred))","7571df86":"sns.heatmap(confusion_matrix(y_test,y_pred))\nplt.show()","13f2d7cb":"xgb = XGBClassifier()\r\nxgb.fit(X_train, y_train)\r\ny_pred = xgb.predict(X_test)\r\nprint(\"Accuracy: \",accuracy_score(y_test,y_pred))","b6da51b1":"sns.heatmap(confusion_matrix(y_test,y_pred))\nplt.show()","92a89dad":"etc = ExtraTreesClassifier()\r\netc.fit(X_train, y_train)\r\ny_pred = etc.predict(X_test)\r\nprint(\"Accuracy: \",accuracy_score(y_test,y_pred))","76e27959":"sns.heatmap(confusion_matrix(y_test,y_pred))\nplt.show()","e77b0d05":"dtc = DecisionTreeClassifier()\r\ndtc.fit(X_train, y_train)\r\ny_pred = dtc.predict(X_test)\r\nprint(\"Accuracy: \",accuracy_score(y_test,y_pred))","9fa1188a":"sns.heatmap(confusion_matrix(y_test,y_pred))\nplt.show()","75fdf1a8":"lightgbm = LGBMClassifier()\r\nlightgbm.fit(X_train, y_train)\r\ny_pred = lightgbm.predict(X_test)\r\nprint(\"Accuracy: \",accuracy_score(y_test,y_pred))","ff096593":"sns.heatmap(confusion_matrix(y_test,y_pred))\nplt.show()","c6476608":"<p style=\"font-size:1.2em\">Euclidean distance from shoulder center to all other joint points<\/p>","b2d26cf4":"<p style=\"font-size:1.2em\">We have successfully implemented <strong>skeleton based action recognition<\/strong> using data preprocessing techniques for feature extraction by converting all the <strong>d_skel data stored in the .mat files into 1-D array <\/strong> and finally building a <strong>classification models<\/strong> using machine learning techniques<\/p>","3f8faac8":"<div style=\"background:#6689b3;color:#fff;padding:1em 2em 1.5em 2em;border-radius: 5px;font-weight:bold\">\n    <strong>\n        <h4 style = \"color:#fff\">5 | Finding the distance for the values stored in train and test dataset<\/h4>\n    <\/strong>\n<\/div>","1d29a606":"### The skeleton joint order in UTD-MAD dataset:\n1. head,\n2. shoulder_center,\n3. spine,\n4. hip_center,\n5. left_shoulder,\n6. left_elbow,\n7. left_wrist,\n8. left_hand,\n9. right_shoulder,\n10. right_elbow,\n11. right_wrist,\n12. right_hand,\n13. left_hip,\n14. left_knee,\n15. left_ankle,\n16. left_foot,\n17. right_hip,\n18. right_knee,\n19. right_ankle,\n20. right_foot,","f2e4e4d3":"<h3>KNN<\/h3>","c4636408":"![image.png](attachment:image.png)","c095e900":"<p style=\"font-size:1.2em\">Function to find euclidean distance from shoulder center to all the joints<\/p>","31ed8644":"<div style=\"background:#6689b3;color:#fff;padding:1em 2em 1.5em 2em;border-radius: 5px;font-weight:bold\">\n    <strong>\n        <h4 style = \"color:#fff\">3 | Trimming the frames <\/h4>\n    <\/strong>\n<\/div>","b1c0604a":"<h3>Problem Statement<\/h3>\n<p style=\"font-size:1.2em\">To Develop and Evaluate a machine learning model for a 3D skeleton-based action recognition system using UTD MHAD dataset. <\/p>","5fca5547":"<h3>Logistic Regression<\/h3>","2000909f":"<div style=\"background:#6689b3;color:#fff;padding:1em 2em 1.5em 2em;border-radius: 5px;font-weight:bold\">\n    <strong>\n        <h4 style = \"color:#fff\">1 | Importing the Required Packages<\/h4>\n    <\/strong>\n<\/div>","2cf0b668":"<h3>Multinomial Naive Bayes<\/h3>","56d68f0b":"<div style=\"background:#6689b3;color:#fff;padding:1em 2em 1.5em 2em;border-radius: 5px;font-weight:bold\">\n    <strong>\n        <h4 style = \"color:#fff\">7 | Conclusion<\/h4>\n    <\/strong>\n<\/div>","1dcf83e1":"<h3>Finding the euclidean distance using manual method<\/h3>\n<p style=\"font-size:1.2em\">Storing the x, y and z of all the joint points of first frame<\/p>","90854065":"<h3>Decision Tree Classifier<\/h3>","9bccbbc9":"<div style=\"font-size:1.2em\">\n    <strong>\n        <h4>Feature Extraction<\/h4>\n    <\/strong>\n    To Calculate the  Euclidean distance  between Shoulder center joint to remaining all joints.\n<\/div>","3eca861f":"![image.png](attachment:image.png)","11eb59a3":"<div style=\"background:#6689b3;color:#fff;padding:1em 2em 1.5em 2em;border-radius: 5px;font-weight:bold\">\n    <strong>\n        <h4 style = \"color:#fff\">6 | Data Modelling using classification algorithms<\/h4>\n    <\/strong>\n<\/div>","4417bac5":"<h3>Gaussian Naive Bayes<\/h3>","93bb7e68":"<h3>ExtraTrees Classifier<\/h3>","1701ba53":"<div style=\"background:#6689b3;color:#fff;padding:1em 2em 1.5em 2em;border-radius: 5px;font-weight:bold\">\n    <strong>\n        <h4 style = \"color:#fff\">2 | Read data from mat files & splitting test and train data<\/h4>\n    <\/strong>\n<\/div>","29b0d7ae":"<h3>Finding the euclidean distance using dist_func (numpy slicing and lambda mapping)<\/h3>\n<p style=\"font-size:1.2em\">Storing the x, y and z of all the joint points of first frame<\/p>","1b3c3110":"### Actions in Dataset\n#### UTD-MHAD dataset consists of 27 different actions:\n\n1. right arm swipe to the left,\n2. right arm swipe to the right,\n3. right hand wave,\n4. two hand front clap,\n5. right arm throw,\n6. cross arms in the chest,\n7. basketball shoot,\n8. right hand draw x,\n9. right hand draw circle (clockwise),\n10. right hand draw circle (counter clockwise),\n11. draw triangle,\n12. bowling (right hand),\n13. front boxing,\n14. baseball swing from right,\n15. tennis right hand forehand swing,\n16. arm curl (two arms),\n17. tennis serve,\n18. two hand push,\n19. right hand knock on door,\n20. right hand catch an object,\n21. right hand pick up and throw,\n22. jogging in place,\n23. walking in place,\n24. sit to stand,\n25. stand to sit,\n26. forward lunge (left foot forward),\n27. squat (two arms stretch out)","ffe82f3a":"<div style=\"background:#6689b3;color:#fff;padding:1em 2em 1.5em 2em;border-radius: 5px;font-weight:bold\">\n    <strong>\n        <h4 style = \"color:#fff\">4 | Euclidean distance from shoulder center to joint points<\/h4>\n    <\/strong>\n<\/div>","9604ac7b":"<div style=\"background:#6689b3;color:#fff;padding:1em 2em 1.5em 2em;border-radius: 5px;font-weight:bold\">\n    <strong>\n        <h1 style = \"color:#fff\">SKELETON BASED ACTION RECOGNITION<\/h1>\n    <\/strong>\n<\/div>","06d0223a":"<h3>LightGBM Classifier<\/h3>","31c9f5dd":"<div style=\"font-size:1.2em\">\n    <strong>\n        <h4>Train Test Split Criteria<\/h4>\n    <\/strong>\n    Even subjects (S2, S4, S6, S8) to train, Odd Subjects (S1, S3, S5, S7) to test\n<\/div>","18446b2b":"<h3>XGBoost Classifier<\/h3>"}}