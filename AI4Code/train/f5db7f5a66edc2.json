{"cell_type":{"33eae4b5":"code","855e490d":"code","a54b027f":"code","b0a6a30b":"code","2dbaca16":"code","17d9f879":"code","69ead051":"code","a67e05f8":"code","2c514606":"code","4af8b024":"code","b3d1c7fc":"code","afd2d79b":"code","0f631828":"code","1317c87a":"code","5245203f":"code","b0bfa6ed":"code","3315539b":"markdown"},"source":{"33eae4b5":"## define configuration\nPATH_TRAIN = '..\/input\/tabular-playground-series-jul-2021\/train.csv'\nPATH_TEST = '..\/input\/tabular-playground-series-jul-2021\/test.csv'\n\ntime_limit = 6000","855e490d":"## prepare data\nimport gc\nimport os\nimport shutil\nimport pandas as pd\nimport numpy as np\nfrom pathlib import Path\n\ntrain = pd.read_csv(PATH_TRAIN, index_col=\"date_time\", parse_dates=True)\ntest = pd.read_csv(PATH_TEST, index_col=\"date_time\", parse_dates=True)\n\ntarget_carbon_monoxide = train.target_carbon_monoxide.values\ntarget_benzene = train.target_benzene.values\ntarget_nitrogen_oxides = train.target_nitrogen_oxides.values\n\ntrain['dayoftheweek'] = train.index.dayofweek #Weekly Seasonality\ntrain['hourofday'] = train.index.hour #Daily Seasonality\ntrain['time'] = train.index.astype(np.int64) #Yearly Trend\n\ntrain.drop(['target_carbon_monoxide', 'target_benzene', 'target_nitrogen_oxides'], axis=1, inplace=True)\n\ntest['dayoftheweek'] = test.index.dayofweek #Weekly Seasonality\ntest['hourofday'] = test.index.hour #Daily Seasonality\ntest['time'] = test.index.astype(np.int64) #Yearly Trend","a54b027f":"## installing packages\n!python3 -m pip install -q \"mxnet<2.0.0\"\n!python3 -m pip install -q autogluon\n!python3 -m pip install -q graphviz --upgrade","b0a6a30b":"## imports\nfrom autogluon.tabular import TabularPredictor, TabularDataset","2dbaca16":"## run model for carbon monoxide\ntrain['target'] = target_carbon_monoxide\n\nautogluon_carbon_monoxide = TabularPredictor(\n    label='target'\n)\n\nautogluon_carbon_monoxide.fit(train_data=train, \n                              time_limit=time_limit, \n                              presets='best_quality',\n                              num_stack_levels = 3,\n                              num_bag_folds = 5,\n                              num_bag_sets = 1,)\n\ndel train['target']","17d9f879":"## check leaderboard for carbon monoxide\nautogluon_carbon_monoxide.leaderboard()","69ead051":"## run model for benzene\ntrain['target'] = target_benzene\n\nautogluon_benzene = TabularPredictor(\n    label='target'\n)\n\nautogluon_benzene.fit(train_data=train, \n                      time_limit=time_limit, \n                      presets='best_quality',\n                      num_stack_levels = 3,\n                      num_bag_folds = 5,\n                      num_bag_sets = 1,)\n\ndel train['target']","a67e05f8":"## check leaderboard for benzene\nautogluon_benzene.leaderboard()","2c514606":"## run model for nitrogen oxides\ntrain['target'] = target_nitrogen_oxides\n\nautogluon_nitrogen_oxides = TabularPredictor(\n    label='target'\n)\n\nautogluon_nitrogen_oxides.fit(train_data=train, \n                              time_limit=time_limit, \n                              presets='best_quality',\n                              num_stack_levels = 3,\n                              num_bag_folds = 5,\n                              num_bag_sets = 1,)\n\ndel train['target']","4af8b024":"## check leaderboard for nitrogen oxides\nautogluon_nitrogen_oxides.leaderboard()","b3d1c7fc":"test.columns","afd2d79b":"## generate predictions\npreds_autogluon_carbon_monoxide = autogluon_carbon_monoxide.predict(TabularDataset(test))\npreds_autogluon_benzene = autogluon_benzene.predict(TabularDataset(test))\npreds_autogluon_nitrogen_oxides = autogluon_nitrogen_oxides.predict(TabularDataset(test))","0f631828":"dt = pd.DataFrame(test.index.values,  columns=['date_time'])\n\n## create submission\nsubmission = pd.DataFrame({\n    'date_time': preds_autogluon_carbon_monoxide.index,\n    'target_carbon_monoxide': preds_autogluon_carbon_monoxide,\n    'target_benzene': preds_autogluon_benzene,\n    'target_nitrogen_oxides': preds_autogluon_nitrogen_oxides\n})\n\nsubmission.head()","1317c87a":"## save submission\nPATH_AUTOGLUON_SUBMISSION = 'submission_autogluon_' + str(time_limit) + '.csv'\n\nPATH_AUTOGLUON_SUBMISSION","5245203f":"submission.to_csv(PATH_AUTOGLUON_SUBMISSION, index=False)","b0bfa6ed":"## clear memory\nshutil.rmtree('AutogluonModels')\n\ngc.collect()","3315539b":"Baseline code from Notebook: https:\/\/www.kaggle.com\/rohanrao\/automl-tutorial-tps-july-2021"}}