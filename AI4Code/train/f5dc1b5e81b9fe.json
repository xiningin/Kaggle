{"cell_type":{"e51e0465":"code","45fb6406":"code","1eb0b3f2":"code","370a0f65":"code","710f13b8":"code","fb4adaa3":"code","88202205":"code","0bf4c005":"code","68f66db5":"code","ccc600ef":"code","e1a718a4":"code","670047b9":"code","277b6005":"code","8009312a":"code","b8cdfe88":"code","6fa2cc06":"code","70675185":"code","837aa1f0":"code","ac1aab44":"code","71e8525c":"code","31451ff6":"code","a21798f7":"code","962d29b9":"code","ceeda6dd":"code","b3c4ac59":"code","632cb9e8":"code","3a4c09d6":"markdown","6b863f67":"markdown","830da428":"markdown","455e44b8":"markdown","babca8da":"markdown","68df2a95":"markdown","378099bd":"markdown","f7f3f603":"markdown","74dbc929":"markdown","bc22a7f2":"markdown","a85f50e3":"markdown","3e4ea95c":"markdown","64f6c40e":"markdown","49977d06":"markdown","10104352":"markdown","526efc5e":"markdown","ced0c0ca":"markdown","f780465b":"markdown","07ce4994":"markdown","72018a11":"markdown","f572e89e":"markdown","a1c40692":"markdown","f883fa3b":"markdown","fda3245c":"markdown","b972eef2":"markdown","273f1f57":"markdown","e233ff74":"markdown","a57e79f4":"markdown","88d7172f":"markdown","4c9ea973":"markdown","0a40089f":"markdown","e5b927b8":"markdown"},"source":{"e51e0465":"## Database Phase\nimport pandas as pd\nimport numpy as np\n\n#Visualization Phase\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport matplotlib as mpl\nimport matplotlib.pylab as pylab\n%matplotlib inline\npd.set_option('display.max_columns', 500)\nmpl.style.use('ggplot')\nsns.set_style('white')\npylab.rcParams['figure.figsize'] = 12,8\n\n#ignore warnings\nimport warnings\nwarnings.filterwarnings('ignore')\nwarnings.filterwarnings(\"always\")\n\n#paths to file\nimport os\n\n#pivot egineering\nimport scipy as sp\n\n#ML model\nfrom sklearn.metrics.pairwise import cosine_similarity","45fb6406":"#list all files under the input directory\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","1eb0b3f2":"rating_path = \"\/kaggle\/input\/anime-recommendations-database\/rating.csv\"\nanime_path = \"\/kaggle\/input\/anime-recommendations-database\/anime.csv\"","370a0f65":"rating_df = pd.read_csv(rating_path)\nrating_df.head()","710f13b8":"anime_df = pd.read_csv(anime_path)\nanime_df.head()","fb4adaa3":"print(f\"anime set (row, col): {anime_df.shape}\\n\\nrating set (row, col): {rating_df.shape}\")","88202205":"rating_df_user = rating_df['user_id'].unique()\nprint(f\"The total number of people whose data are collected are: {rating_df_user.shape[0]}\")","0bf4c005":"print(\"Anime:\\n\")\nprint(anime_df.info())\nprint(\"\\n\",\"*\"*50,\"\\nRating:\\n\")\nprint(rating_df.info())","68f66db5":"anime_fulldata=pd.merge(anime_df,rating_df,on='anime_id',suffixes= ['', '_user'])\nanime_fulldata = anime_fulldata.rename(columns={'name': 'anime_title', 'rating_user': 'user_rating'})\nanime_fulldata.head()","ccc600ef":"# Creating a dataframe for rating counts\ncombine_anime_rating = anime_fulldata.dropna(axis = 0, subset = ['anime_title'])\nanime_ratingCount = (combine_anime_rating.\n     groupby(by = ['anime_title'])['user_rating'].\n     count().\n     reset_index().rename(columns = {'rating': 'totalRatingCount'})\n    [['anime_title', 'user_rating']]\n    )\n\n\ntop10_animerating=anime_ratingCount[['anime_title', 'user_rating']].sort_values(by = 'user_rating',ascending = False).head(10)\nax=sns.barplot(x=\"anime_title\", y=\"user_rating\", data=top10_animerating, palette=\"Dark2\")\nax.set_xticklabels(ax.get_xticklabels(), fontsize=11, rotation=40, ha=\"right\")\nax.set_title('Top 10 Anime based on rating counts',fontsize = 22)\nax.set_xlabel('Anime',fontsize = 20) \nax.set_ylabel('User Rating count', fontsize = 20)","e1a718a4":"anime_fulldata = anime_fulldata.merge(anime_ratingCount, left_on = 'anime_title', right_on = 'anime_title', how = 'left')\nanime_fulldata = anime_fulldata.rename(columns={'user_rating_x': 'user_rating', 'user_rating_y': 'totalratingcount'})","670047b9":"duplicate_anime=anime_fulldata.copy()\nduplicate_anime.drop_duplicates(subset =\"anime_title\", \n                     keep = 'first', inplace = True)","277b6005":"top10_animemembers=duplicate_anime[['anime_title', 'members']].sort_values(by = 'members',ascending = False).head(10)\nax=sns.barplot(x=\"anime_title\", y=\"members\", data=top10_animemembers, palette=\"gnuplot2\")\nax.set_xticklabels(ax.get_xticklabels(), fontsize=11, rotation=40, ha=\"right\")\nax.set_title('Top 10 Anime based on members',fontsize = 22)\nax.set_xlabel('Anime',fontsize = 20) \nax.set_ylabel('Community Size', fontsize = 20)","8009312a":"plt.figure(figsize = (15, 7))\nplt.subplot(1,2,1)\nanime_fulldata['rating'].hist(bins=70)\nplt.title(\"Rating of people in the website\")\nplt.subplot(1,2,2)\nanime_fulldata['user_rating'].hist(bins=70)\nplt.title(\"Rating of users\")","b8cdfe88":"import plotly.graph_objects as go\nlabels = anime_fulldata['type'].value_counts().index\nvalues = anime_fulldata['type'].value_counts().values\ncolors = ['gold', 'mediumturquoise', 'darkorange', 'lightgreen']\nfig = go.Figure(data=[go.Pie(labels=labels,\n                             values=values)])\nfig.update_traces(hoverinfo='label+percent', textinfo='value', textfont_size=20,\n                  marker=dict(colors=colors, line=dict(color='#000000', width=2)))\n\nfig.update_layout(\n    title={\n        'text': \"Medium of Streaming\",\n        'y':0.9,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'})\n\nfig.show()","6fa2cc06":"nonull_anime=anime_fulldata.copy()\nnonull_anime.dropna(inplace=True)\nfrom collections import defaultdict\n\nall_genres = defaultdict(int)\n\nfor genres in nonull_anime['genre']:\n    for genre in genres.split(','):\n        all_genres[genre.strip()] += 1\n        \nfrom wordcloud import WordCloud\n\ngenres_cloud = WordCloud(width=800, height=400, background_color='white', colormap='gnuplot').generate_from_frequencies(all_genres)\nplt.imshow(genres_cloud, interpolation='bilinear')\nplt.axis('off')","70675185":"print(\"Anime missing values :\\n\")\nprint(anime_df.isnull().sum().sort_values(ascending=False)) \nprint(\"\\n\",\"*\"*50,\"\\n\\nRating missing values :\\n\")\nprint(rating_df.isnull().sum().sort_values(ascending=False))","837aa1f0":"print(anime_df['type'].mode())\nprint(anime_df['genre'].mode())","ac1aab44":"# deleting anime with 0 rating\nanime_df=anime_df[~np.isnan(anime_df[\"rating\"])]\n\n# filling mode value for genre and type\nanime_df['genre'] = anime_df['genre'].fillna(\nanime_df['genre'].dropna().mode().values[0])\n\nanime_df['type'] = anime_df['type'].fillna(\nanime_df['type'].dropna().mode().values[0])\n\n#checking if all null values are filled\nanime_df.isnull().sum()\n","71e8525c":"rating_df['rating'] = rating_df['rating'].apply(lambda x: np.nan if x==-1 else x)\nrating_df.head(20)","31451ff6":"#step 1\nanime_df = anime_df[anime_df['type']=='TV']\n\n#step 2\nrated_anime = rating_df.merge(anime_df, left_on = 'anime_id', right_on = 'anime_id', suffixes= ['_user', ''])\n\n#step 3\nrated_anime =rated_anime[['user_id', 'name', 'rating']]\n\n#step 4\nrated_anime_7500= rated_anime[rated_anime.user_id <= 7500]\nrated_anime_7500.head()","a21798f7":"pivot = rated_anime_7500.pivot_table(index=['user_id'], columns=['name'], values='rating')\npivot.head()","962d29b9":"# step 1\npivot_n = pivot.apply(lambda x: (x-np.mean(x))\/(np.max(x)-np.min(x)), axis=1)\n\n# step 2\npivot_n.fillna(0, inplace=True)\n\n# step 3\npivot_n = pivot_n.T\n\n# step 4\npivot_n = pivot_n.loc[:, (pivot_n != 0).any(axis=0)]\n\n# step 5\npiv_sparse = sp.sparse.csr_matrix(pivot_n.values)","ceeda6dd":"#model based on anime similarity\nanime_similarity = cosine_similarity(piv_sparse)\n\n#Df of anime similarities\nani_sim_df = pd.DataFrame(anime_similarity, index = pivot_n.index, columns = pivot_n.index)","b3c4ac59":"def anime_recommendation(ani_name):\n    \"\"\"\n    This function will return the top 5 shows with the highest cosine similarity value and show match percent\n    \n    example:\n    >>>Input: \n    \n    anime_recommendation('Death Note')\n    \n    >>>Output: \n    \n    Recommended because you watched Death Note:\n\n                    #1: Code Geass: Hangyaku no Lelouch, 57.35% match\n                    #2: Code Geass: Hangyaku no Lelouch R2, 54.81% match\n                    #3: Fullmetal Alchemist, 51.07% match\n                    #4: Shingeki no Kyojin, 48.68% match\n                    #5: Fullmetal Alchemist: Brotherhood, 45.99% match \n\n               \n    \"\"\"\n    \n    number = 1\n    print('Recommended because you watched {}:\\n'.format(ani_name))\n    for anime in ani_sim_df.sort_values(by = ani_name, ascending = False).index[1:6]:\n        print(f'#{number}: {anime}, {round(ani_sim_df[anime][ani_name]*100,2)}% match')\n        number +=1  ","632cb9e8":"anime_recommendation('Shingeki no Kyojin')","3a4c09d6":"## Top 10 Anime based on rating counts\n#### I'm sensing the top anime's based on their rating counts provided by the user id's. Let's see who tops the throne","6b863f67":"## Type of Anime \n#### I'm now seeing from where does this powerul anime's are coming from ","830da428":"## File Paths \ud83d\udcc2","455e44b8":"![](https:\/\/i.redd.it\/aedsomcjvs511.jpg)\n\nDeath Note sweeps the war for rating count followed by SAO, SNK and code geass respectively.","babca8da":"<h2 style='text-align:center;font-family:Comic Sans MS;font-size:30px;background-color:#6E0F00;border:30px;color:white'>Table of contents<h2>\n    \n1. [Introduction](#section-one)\n    \n2. [Data Id](#section-two)\n    \n3. [Aim of the notebook](#section-three)\n\n4. [What is a recommendation system?](#section-four)\n    \n5. [Libraries](#section-five)\n    \n6. [Meet and greet data - Konnichiwa(\u3053\u3093\u306b\u3061\u308f)](#section-six)\n\n7. [Analyze the data](#section-seven)\n\n5. [Recommendation system](#section-eight)\n","68df2a95":"# First few lines","378099bd":"**Insights:**\n* Most of the ratings are spread between 6-10\n* The mode of the distribution is around 7.5-8.0\n* Both the distribution are left skewed\n* We have -1 rating as an outlier in rating of users which can be made into NaN","f7f3f603":"## Merging dataframes\n![](https:\/\/static3.cbrimages.com\/wordpress\/wp-content\/uploads\/2020\/10\/Dragon-Ball-FighterZ-Goku-Vegeta-Fusion-Dance.jpg?q=50&fit=crop&w=960&h=500&dpr=1.5)","74dbc929":"<img src=\"https:\/\/i.pinimg.com\/originals\/f8\/1c\/4a\/f81c4ab79f3aae7151099ccf7cb7a882.jpg\">\n\n<a id=\"section-one\"><\/a>\n\n# Introduction\n\n####  I am a huge Anime fan and so I decided to combine my knowledge of Data Science with my interest of Anime. I will use the Data \"anime.csv\" and \"rating.csv\" on Kaggle, to build a recommendation engine.\n\n## About the Dataset\n\n#### This data set contains information on user preference data from 73,516 users on 12,294 anime. Each user is able to add anime to their completed list and give it a rating and this data set is a compilation of those ratings. The data was scraped thanks to [myanimelist.net](https:\/\/myanimelist.net) API.\n\n<a id=\"section-two\"><\/a>\n# Data Id \ud83d\udccb\n## Anime Dataset\n\nThis dataset is named **anime**. The dataset contains a set of **12,294 records** under **7 attributes**:\n\n| Column Name | Description                                                    |\n|-------------|----------------------------------------------------------------|\n| `anime_id`  | myanimelist.net's unique id identifying an anime.              |\n| `name`      | full name of anime.                                            |\n| `genre`     | comma separated list of genres for this anime.                 |\n| `type`      | movie, TV, OVA, etc.                                           |\n| `episodes`  | how many episodes in this show. (1 if movie).                  |\n| `rating`    |  average rating out of 10 for this anime.                      |\n| `members`   | number of community members that are in this anime's \"group\".  |\n                                                \n\n\n## Rating Dataset\n\nThis dataset is named **rating**. The dataset contains a set of **7,813,737 records** under **3 attributes**:\n\n| Column Name | Description                                                                        |\n|-------------|------------------------------------------------------------------------------------|\n| `user_id`   | non identifiable randomly generated user id.                                       |\n| `anime_id`  | the anime that this user has rated.                                                |\n| `rating`    | rating out of 10 this user has assigned (-1 if the user watched without assigning) |\n\n","bc22a7f2":"<a id=\"section-three\"><\/a>\n# Aim of the Notebook","a85f50e3":"### Now we will engineer our pivot table in the following steps:\n\n1. Value normalization.\n2. Filling `Nan` values as `0`.\n3. Transposing the pivot for the next step.\n4. Dropping columns with the values of `0` (unrated).\n5. Using `scipy` package to convert to sparse matrix format for the similarity computation.\n","3e4ea95c":"# Cosine Similarity Model\n\n![](https:\/\/media3.giphy.com\/headers\/CosineDotRip\/dLeMRat9wmuZ.gif)\n\n**formula:**\n![](https:\/\/cdn-images-1.medium.com\/max\/579\/1*5hJibEtQPavnbgRxg8w2Fg.gif)\n\nCosine similarity measures the similarity between two vectors of an inner product space. It is measured by the cosine of the angle between two vectors and determines whether two vectors are pointing in roughly the same direction (more on [sciencedirect](https:\/\/www.sciencedirect.com\/topics\/computer-science\/cosine-similarity)).","64f6c40e":"# Data shapes and info","49977d06":"## Handling missing values \ud83d\udeab ","10104352":"**Insights:**\n* 67.6% of the anime's were aired on TV followed by 13.5% through Movie\n* 10.2% of anime's are streamed as OVA which is greater than ONA(1.18%)","526efc5e":"<a id=\"section-seven\"><\/a>\n# Analyze the data\n\n<img src=\"https:\/\/giantbomb1.cbsistatic.com\/uploads\/scale_medium\/16\/164924\/2763709-5436457361-Hinat.jpg\">","ced0c0ca":"# Comments\n\n#### mpl.style.use('ggplot') -> is a style of matplotlib which emaculates ggplot found in R. More efficient.\n\n","f780465b":"<a id=\"section-six\"><\/a>\n# Meet and Greet data - Konnichiwa (\u3053\u3093\u306b\u3061\u308f)\n\n<img src=\"https:\/\/media.tenor.com\/images\/a817ee0bafb1e43469f099b63b76ca6b\/tenor.png\">\n\n\n#### Konnichiwa (\u3053\u3093\u306b\u3061\u306f or in kanji \u4eca\u65e5\u306f) is a Japanese greeting, typically a mid-day greeting. It is also used as an informal greeting, \"hello\". So here our guests are the data. So let's welcome our guests !","07ce4994":"### Now we will engineer our Dataframe in the following steps:\n\n1. We want to recomment anime series only so the the relevant `type` is `TV`\n2. We make a new Dataframe combining both anime and rating on the `anime_id` column.\n3. Leaving only `\tuser_id`, `name` and `rating` as the Df.\n4. For computing purpose only we compute our Df based only on the first 7500 users.","72018a11":"<a id=\"section-four\"><\/a>\n# [What is a recommendation engine ?](https:\/\/towardsdatascience.com\/web-scraping-recommender-systems-project-1d360fa678e4)\n\n<img src=\"https:\/\/miro.medium.com\/max\/757\/1*UxsrvB1oWpTYxUgSRNW92g.jpeg\">\n\n###  It is an unsupervised learning algorithm (one that does not have a target variable to measure accuracy against) mostly used to aid in consumer decision making. I\u2019m sure you have seen them while online shopping. They also appear in places like streaming apps (aka Netflix and Hulu) to help you select a TV show or movie to watch next and on journalism\/media websites like Medium to suggest other articles you may like to read, among many other uses. Obviously many e-retailers like Amazon have already been using recommender algorithms for quite some time, but many smaller or newer sites are still in need. There are different varieties of recommenders that base their predictions on different features.","f572e89e":"## Genre cloud!","a1c40692":"## Top 10 Anime based on Community size\n#### I'm now sensing the top anime's based on their community size(membercount) . Let's see who tops the throne","f883fa3b":"\n<h2 style='text-align:center;font-family:Comic Sans MS;font-size:40px;background-color:#6E0F00;border:20px;color:white'>Anime Recommendations<h2>\n\n![](https:\/\/i.pinimg.com\/originals\/a8\/be\/b0\/a8beb06c120be3358360ae2be20588fd.gif)\n    \n","fda3245c":"<a id=\"section-five\"><\/a>\n# Libraries \ud83d\udcd9\ud83d\udcd8\ud83d\udcd7\ud83d\udcd5","b972eef2":"Most of the anime that are collected in this dataset belog to the `Hentai` and type is `TV`\n\n","273f1f57":"![](https:\/\/cdn.myanimelist.net\/s\/common\/uploaded_files\/1445723763-e9f25c3d162260a79d8a5cedce8aef56.jpeg)\n\nOnce again Death Note is victorious followed by SNK,SAO and FMAB respectively.","e233ff74":"P.S - It seems only the anime dataset has missing values.","a57e79f4":"We can sense there are many Comedy genre anime's followd by action, romance,drama in our dataset\n\n<img src=\"https:\/\/ctd-thechristianpost.netdna-ssl.com\/en\/full\/65364\/monkey-dluffy.jpg?w=760&h=419&l=50&t=40\">","88d7172f":"## Distribution of ratings\n#### I'll be now sensing the distribution of ratings on both the datasets. I beleive the rating from anime.csv is from review websites and user_rating in rating.csv is from user id's","4c9ea973":"<a id=\"section-eight\"><\/a>\n# Recmmendation system \ud83d\udc31\u200d\ud83d\udcbb\n\n### Filling Nan values\n\nIn general the value `-1` suggests the user did not register a rating so we will fill with `Nan` values.","0a40089f":"### Pivot Table for similarity\n\nWe will create a pivot table of users as rows and tv show names as columns. The pivot table will help us will be analized for the calcuations of similarity.","e5b927b8":"### Every streaming service needs to optimise their recommendation system so that it recommends viewers content based on their preference to keep their viewers engaged so that they keep coming back to their contents. In this notebook I have tried to make a recommendation system based on the preference of people in the MyAnimelist website. "}}