{"cell_type":{"c63d6a99":"code","0e708240":"code","aa3e9c10":"code","cf7a0804":"code","5e269537":"code","72204f7b":"code","19603eec":"code","cf885ad6":"code","c1e53b99":"code","3cb00eff":"code","047be9b6":"code","97484b88":"code","dc5fc0bb":"code","f41309d1":"code","7f745dfe":"code","9e0205f7":"code","9025865b":"code","edc638c7":"code","b95dc0ce":"code","186ac186":"code","9edf9882":"code","de770679":"code","cfe98219":"code","9bc88a6d":"code","1504c10e":"code","f4f5530b":"code","f2a45537":"code","aa8eedda":"code","3e15a192":"code","bfc52fae":"code","7e7594f8":"code","a1c8de83":"code","c28dc510":"code","00fb3c37":"code","69cc2a68":"code","e42e8d40":"code","9e5333c5":"code","6f6e6bad":"code","0f5ac856":"code","1eac9b81":"code","c2ff3f05":"code","3afc1744":"code","ef0f6019":"code","00309ebf":"code","e8cdb372":"code","b741da8a":"code","24b516d2":"code","fc242436":"code","3eb8965e":"code","4f8dd30d":"code","6f203b32":"code","b89a53bc":"code","739bd52b":"code","9ea232ac":"code","3a9c5653":"code","87cee63f":"code","1a257273":"code","c73211e1":"code","561f9fbe":"code","8b9f697b":"code","bbafeacb":"code","8830122c":"code","67d71ae7":"code","a8aa2ca9":"code","bb7beefe":"code","bfddba4b":"code","3d894b00":"code","4cc551bc":"code","b90164e2":"code","9048d544":"code","624f88d2":"code","94706436":"code","f75f350f":"code","0a5ff5b9":"code","096f73ed":"code","e5ef03d0":"code","83e4383a":"code","6555877c":"code","1e59c9d5":"code","9c1197f3":"code","a7e2f0e6":"code","cd4b358e":"code","ffd9bf24":"code","38f1fcc0":"code","ee10fa38":"code","9311e9f0":"code","97a5afcc":"code","3c01cdd3":"code","031548ab":"code","7e8f3623":"code","21a96ed8":"code","6b24fe0b":"code","2a86eb90":"code","ae3006db":"code","fe64ab9e":"markdown","0474bf2e":"markdown","19d8178e":"markdown","2122dbfe":"markdown","97eb0d3d":"markdown","c32cdee0":"markdown","990b26fb":"markdown","f7c16a79":"markdown","89faa1ec":"markdown","f22f70bd":"markdown","6d251060":"markdown","db0c0a17":"markdown","8fb79918":"markdown","f3723ea7":"markdown","87ecb8ff":"markdown","b11aa509":"markdown","bd5d2e2f":"markdown","2a138995":"markdown","b32cbb01":"markdown","6b78a474":"markdown","18a817e8":"markdown","bab3839c":"markdown","61d9ca5e":"markdown","1a11a700":"markdown","cd2e17d8":"markdown","ffcb671d":"markdown","0f5294f8":"markdown","42951511":"markdown","0abdcde9":"markdown","a1a4aaf1":"markdown","449713ba":"markdown","1a177503":"markdown","7d48f1c5":"markdown","207d89bb":"markdown","320e31a2":"markdown","e1ca6121":"markdown","e894dbd5":"markdown","8d783ad3":"markdown","04cdd408":"markdown","1f459a6d":"markdown","fe3a504a":"markdown","583644b4":"markdown","51e6ee46":"markdown","3018b826":"markdown","06ac0107":"markdown","9a7f9c99":"markdown","af9d39fb":"markdown","3eef0a52":"markdown","96beb6a6":"markdown","572eae1e":"markdown","7f2759ad":"markdown"},"source":{"c63d6a99":"import os\nprint(os.listdir(\"..\/input\/\"))\ndata_train_file='..\/input\/train.csv'\ndata_resource_file='..\/input\/resources.csv'","0e708240":"%config IPCompleter.greedy=True\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n\n\nimport sqlite3\nimport pandas as pd\nimport numpy as np\nimport nltk\nimport string\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.feature_extraction.text import TfidfTransformer\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn import metrics\nfrom sklearn.metrics import roc_curve, auc\nfrom nltk.stem.porter import PorterStemmer\n\nimport re\n# Tutorial about Python regular expressions: https:\/\/pymotw.com\/2\/re\/\nimport string\nfrom nltk.corpus import stopwords\nfrom nltk.stem import PorterStemmer\nfrom nltk.stem.wordnet import WordNetLemmatizer\n\nfrom gensim.models import Word2Vec\nfrom gensim.models import KeyedVectors\nimport pickle\n\nfrom tqdm import tqdm\nimport os","aa3e9c10":"project_data = pd.read_csv(data_train_file)\nresource_data = pd.read_csv(data_resource_file) ","cf7a0804":"print(\"Number of data points in train data\", project_data.shape)\nprint('-'*50)\nprint(\"The attributes of data :\", project_data.columns.values)\nproject_data.tail(100)\nproject_data.shape  ","5e269537":"print(\"Number of data points in train data\", resource_data.shape)\nprint(resource_data.columns.values)\nresource_data.tail(2)","72204f7b":"# PROVIDE CITATIONS TO YOUR CODE IF YOU TAKE IT FROM ANOTHER WEBSITE.\n# https:\/\/matplotlib.org\/gallery\/pie_and_polar_charts\/pie_and_donut_labels.html#sphx-glr-gallery-pie-and-polar-charts-pie-and-donut-labels-py\n\n\ny_value_counts = project_data['project_is_approved'].value_counts()\nprint(\"Number of projects that are approved for funding \", y_value_counts[1], \", (\", (y_value_counts[1]\/(y_value_counts[1]+y_value_counts[0]))*100,\"%)\")\nprint(\"Number of projects that are not approved for funding \", y_value_counts[0], \", (\", (y_value_counts[0]\/(y_value_counts[1]+y_value_counts[0]))*100,\"%)\")\n\nfig, ax = plt.subplots(figsize=(4, 4), subplot_kw=dict(aspect=\"equal\"))\nrecipe = [\"Accepted\", \"Not Accepted\"]\n\ndata = [y_value_counts[1], y_value_counts[0]]\n\nwedges, texts = ax.pie(data, wedgeprops=dict(width=0.3), startangle=56)\n\nbbox_props = dict(boxstyle=\"square,pad=0.5\", fc=\"w\", ec=\"k\", lw=0.6)\nkw = dict(xycoords='data', textcoords='data', arrowprops=dict(arrowstyle=\"-\"),\n          bbox=bbox_props, zorder=0, va=\"center\")\n\nfor i, p in enumerate(wedges):\n    ang = (p.theta2 - p.theta1)\/2. + p.theta1\n    y = np.sin(np.deg2rad(ang))\n    x = np.cos(np.deg2rad(ang))\n    horizontalalignment = {-1: \"right\", 1: \"left\"}[int(np.sign(x))]\n    connectionstyle = \"angle,angleA=0,angleB={}\".format(ang)\n    kw[\"arrowprops\"].update({\"connectionstyle\": connectionstyle})\n    ax.annotate(recipe[i], xy=(x, y), xytext=(1.35*np.sign(x), 1.4*y),\n                 horizontalalignment=horizontalalignment, **kw)\n\nax.set_title(\"Nmber of projects that are Accepted and not accepted\")\n\nplt.show()","19603eec":"# Pandas dataframe groupby count, mean: https:\/\/stackoverflow.com\/a\/19385591\/4084039\n\ntemp = pd.DataFrame(project_data.groupby(\"school_state\")[\"project_is_approved\"].apply(np.mean)).reset_index()\n# if you have data which contain only 0 and 1, then the mean = percentage (think about it)\ntemp.columns = ['state_code', 'num_proposals']\n\n\n''' #How to plot US state heatmap: https:\/\/datascience.stackexchange.com\/a\/9620\n\nscl = [[0.0, 'rgb(242,240,247)'],[0.2, 'rgb(218,218,235)'],[0.4, 'rgb(188,189,220)'],\\\n            [0.6, 'rgb(158,154,200)'],[0.8, 'rgb(117,107,177)'],[1.0, 'rgb(84,39,143)']]\n\ndata = [ dict(\n        type='choropleth',\n        colorscale = scl,\n        autocolorscale = False,\n        locations = temp['state_code'],\n        z = temp['num_proposals'].astype(float),\n        locationmode = 'USA-states',\n        text = temp['state_code'],\n        marker = dict(line = dict (color = 'rgb(255,255,255)',width = 2)),\n        colorbar = dict(title = \"% of pro\")\n    ) ]\n\nlayout = dict(title = 'Project Proposals % of Acceptance Rate by US States',\n        geo = dict(scope='usa',projection=dict( type='albers usa' ),showlakes = True,lakecolor = 'rgb(255, 255, 255)',),)\n\nfig = layout.Figure(data=data, layout=layout)\noffline.iplot(fig, filename='us-map-heat-map')'''\n","cf885ad6":"# https:\/\/www.csi.cuny.edu\/sites\/default\/files\/pdf\/administration\/ops\/2letterstabbrev.pdf\ntemp.sort_values(by=['num_proposals'], inplace=True)\nprint(\"States with lowest % approvals\")\nprint(temp.head(5))\nprint('='*50)\nprint(\"States with highest % approvals\")\nprint(temp.tail(5))\n","c1e53b99":"#stacked bar plots matplotlib: https:\/\/matplotlib.org\/gallery\/lines_bars_and_markers\/bar_stacked.html\ndef stack_plot(data, xtick, col2='project_is_approved', col3='total'):\n    ind = np.arange(data.shape[0])\n    \n    plt.figure(figsize=(20,5))\n    p1 = plt.bar(ind, data[col3].values)\n    p2 = plt.bar(ind, data[col2].values)\n  \n    plt.ylabel('Projects')\n    plt.title('Number of projects aproved vs rejected')\n    plt.xticks(ind, list(data[xtick].values))\n    plt.legend((p1[0], p2[0]), ('total', 'accepted'))\n    plt.show()","3cb00eff":"def univariate_barplots(data, col1, col2='project_is_approved', top=False):\n    # Count number of zeros in dataframe python: https:\/\/stackoverflow.com\/a\/51540521\/4084039\n    temp = pd.DataFrame(project_data.groupby(col1)[col2].agg(lambda x: x.eq(1).sum())).reset_index()\n   \n\n    # Pandas dataframe grouby count: https:\/\/stackoverflow.com\/a\/19385591\/4084039\n    temp['total'] = pd.DataFrame(project_data.groupby(col1)[col2].agg({'total':'count'})).reset_index()['total']\n    temp['Avg'] = pd.DataFrame(project_data.groupby(col1)[col2].agg({'Avg':'mean'})).reset_index()['Avg']\n    \n    \n    \n    temp.sort_values(by=['total'],inplace=True, ascending=False)\n\n    if top:\n        temp = temp[0:top]\n    \n    stack_plot(temp, xtick=col1, col2=col2, col3='total')\n    print(temp.head(5))\n    print(\"=\"*50)\n    print(temp.tail(5))","047be9b6":"univariate_barplots(project_data, 'school_state', 'project_is_approved', False)","97484b88":"univariate_barplots(project_data, 'teacher_prefix', 'project_is_approved' , top=False)\nproject_data.shape  ","dc5fc0bb":"univariate_barplots(project_data, 'project_grade_category', 'project_is_approved', top=False)","f41309d1":"catogories = list(project_data['project_subject_categories'].values)\n# remove special characters from list of strings python: https:\/\/stackoverflow.com\/a\/47301924\/4084039\n\n# https:\/\/www.geeksforgeeks.org\/removing-stop-words-nltk-python\/\n# https:\/\/stackoverflow.com\/questions\/23669024\/how-to-strip-a-specific-word-from-a-string\n# https:\/\/stackoverflow.com\/questions\/8270092\/remove-all-whitespace-in-a-string-in-python\ncat_list = []\nfor i in catogories:\n    temp = \"\"\n    # consider we have text like this \"Math & Science, Warmth, Care & Hunger\"\n    for j in i.split(','): # it will split it in three parts [\"Math & Science\", \"Warmth\", \"Care & Hunger\"]\n        if 'The' in j.split(): # this will split each of the catogory based on space \"Math & Science\"=> \"Math\",\"&\", \"Science\"\n            j=j.replace('The','') # if we have the words \"The\" we are going to replace it with ''(i.e removing 'The')\n        j = j.replace(' ','') # we are placeing all the ' '(space) with ''(empty) ex:\"Math & Science\"=>\"Math&Science\"\n        temp+=j.strip()+\" \" #\" abc \".strip() will return \"abc\", remove the trailing spaces\n        temp = temp.replace('&','_') # we are replacing the & value into \n    cat_list.append(temp.strip())","7f745dfe":"project_data['clean_categories'] = cat_list\nproject_data.drop(['project_subject_categories'], axis=1, inplace=True)\nproject_data.head(2)","9e0205f7":"univariate_barplots(project_data, 'clean_categories', 'project_is_approved', top=20)","9025865b":"# count of all the words in corpus python: https:\/\/stackoverflow.com\/a\/22898595\/4084039\nfrom collections import Counter\nmy_counter = Counter()\nfor word in project_data['clean_categories'].values:\n    my_counter.update(word.split())","edc638c7":"# dict sort by value python: https:\/\/stackoverflow.com\/a\/613218\/4084039\ncat_dict = dict(my_counter)\nsorted_cat_dict = dict(sorted(cat_dict.items(), key=lambda kv: kv[1]))\n\n\nind = np.arange(len(sorted_cat_dict))\nplt.figure(figsize=(20,5))\np1 = plt.bar(ind, list(sorted_cat_dict.values()))\n\nplt.ylabel('Projects')\nplt.title('% of projects aproved category wise')\nplt.xticks(ind, list(sorted_cat_dict.keys()))\nplt.show()","b95dc0ce":"for i, j in sorted_cat_dict.items():\n    print(\"{:20} :{:10}\".format(i,j))","186ac186":"sub_catogories = list(project_data['project_subject_subcategories'].values)\n# remove special characters from list of strings python: https:\/\/stackoverflow.com\/a\/47301924\/4084039\n\n# https:\/\/www.geeksforgeeks.org\/removing-stop-words-nltk-python\/\n# https:\/\/stackoverflow.com\/questions\/23669024\/how-to-strip-a-specific-word-from-a-string\n# https:\/\/stackoverflow.com\/questions\/8270092\/remove-all-whitespace-in-a-string-in-python\n\nsub_cat_list = []\nfor i in sub_catogories:\n    temp = \"\"\n    # consider we have text like this \"Math & Science, Warmth, Care & Hunger\"\n    for j in i.split(','): # it will split it in three parts [\"Math & Science\", \"Warmth\", \"Care & Hunger\"]\n        if 'The' in j.split(): # this will split each of the catogory based on space \"Math & Science\"=> \"Math\",\"&\", \"Science\"\n            j=j.replace('The','') # if we have the words \"The\" we are going to replace it with ''(i.e removing 'The')\n        j = j.replace(' ','') # we are placeing all the ' '(space) with ''(empty) ex:\"Math & Science\"=>\"Math&Science\"\n        temp +=j.strip()+\" \"#\" abc \".strip() will return \"abc\", remove the trailing spaces\n        temp = temp.replace('&','_')\n    sub_cat_list.append(temp.strip())","9edf9882":"project_data['clean_subcategories'] = sub_cat_list\nproject_data.drop(['project_subject_subcategories'], axis=1, inplace=True)\nproject_data.head(2)","de770679":"univariate_barplots(project_data, 'clean_subcategories', 'project_is_approved', top=50)","cfe98219":"# count of all the words in corpus python: https:\/\/stackoverflow.com\/a\/22898595\/4084039\nfrom collections import Counter\nmy_counter = Counter()\nfor word in project_data['clean_subcategories'].values:\n    my_counter.update(word.split())\n    ","9bc88a6d":"# dict sort by value python: https:\/\/stackoverflow.com\/a\/613218\/4084039\nsub_cat_dict = dict(my_counter)\nsorted_sub_cat_dict = dict(sorted(sub_cat_dict.items(), key=lambda kv: kv[1]))\n\n\nind = np.arange(len(sorted_sub_cat_dict))\nplt.figure(figsize=(20,5))\np1 = plt.bar(ind, list(sorted_sub_cat_dict.values()))\n\nplt.ylabel('Projects')\nplt.title('% of projects aproved state wise')\nplt.xticks(ind, list(sorted_sub_cat_dict.keys()))\nplt.show()","1504c10e":"for i, j in sorted_sub_cat_dict.items():\n    print(\"{:20} :{:10}\".format(i,j))","f4f5530b":"#How to calculate number of words in a string in DataFrame: https:\/\/stackoverflow.com\/a\/37483537\/4084039\nword_count = project_data['project_title'].str.split().apply(len).value_counts()\nword_dict = dict(word_count)\nprint(word_dict)\nword_dict = dict(sorted(word_dict.items(), key=lambda kv: kv[1]))\n\n\nind = np.arange(len(word_dict))\nplt.figure(figsize=(20,5))\np1 = plt.bar(ind, list(word_dict.values()))\n\nplt.ylabel('Numeber of projects')\nplt.xlabel('Numeber words in project title')\nplt.title('Words for each title of the project')\nplt.xticks(ind, list(word_dict.keys()))\nplt.show()","f2a45537":"approved_title_word_count = project_data[project_data['project_is_approved']==1]['project_title'].str.split().apply(len)\napproved_title_word_count = approved_title_word_count.values\n\nrejected_title_word_count = project_data[project_data['project_is_approved']==0]['project_title'].str.split().apply(len)\nrejected_title_word_count = rejected_title_word_count.values","aa8eedda":"# https:\/\/glowingpython.blogspot.com\/2012\/09\/boxplot-with-matplotlib.html\nplt.boxplot([approved_title_word_count, rejected_title_word_count])\nplt.xticks([1,2],('Approved Projects','Rejected Projects'))\nplt.ylabel('Words in project title')\nplt.grid()\nplt.show()","3e15a192":"plt.figure(figsize=(10,3))\nsns.kdeplot(approved_title_word_count,label=\"Approved Projects\", bw=0.6)\nsns.kdeplot(rejected_title_word_count,label=\"Not Approved Projects\", bw=0.6)\nplt.legend()\nplt.show()","bfc52fae":"# merge two column text dataframe: \n  \nproject_data[\"essay\"] = project_data[\"project_essay_1\"].map(str)+\\\n                        project_data[\"project_essay_2\"].map(str)+ \\\n                        project_data[\"project_essay_3\"].map(str)+ \\\n                        project_data[\"project_essay_4\"].map(str)\n\n","7e7594f8":"approved_word_count = project_data[project_data['project_is_approved']==1]['essay'].str.split().apply(len)\napproved_word_count = approved_word_count.values\n\nrejected_word_count = project_data[project_data['project_is_approved']==0]['essay'].str.split().apply(len)\nrejected_word_count = rejected_word_count.values","a1c8de83":"# https:\/\/glowingpython.blogspot.com\/2012\/09\/boxplot-with-matplotlib.html\nplt.boxplot([approved_word_count, rejected_word_count])\nplt.title('Words for each essay of the project')\nplt.xticks([1,2],('Approved Projects','Rejected Projects'))\nplt.ylabel('Words in project essays')\nplt.grid()\nplt.show()\n","c28dc510":"plt.figure(figsize=(10,3))\nsns.distplot(approved_word_count, hist=False, label=\"Approved Projects\")\nsns.distplot(rejected_word_count, hist=False, label=\"Not Approved Projects\")\nplt.title('Words for each essay of the project')\nplt.xlabel('Number of words in each eassay')\nplt.legend()\nplt.show()\n ","00fb3c37":"# we get the cost of the project using resource.csv file\nresource_data.head(2)\n","69cc2a68":"# https:\/\/stackoverflow.com\/questions\/22407798\/how-to-reset-a-dataframes-indexes-for-all-groups-in-one-step\nprice_data = resource_data.groupby('id').agg({'price':'sum', 'quantity':'sum'}).reset_index()\nprice_data.head(2)\nproject_data.shape  ","e42e8d40":"# join two dataframes in python: \nproject_data.shape  \nproject_data = pd.merge(project_data, price_data, on='id',how='inner')\nproject_data.shape  ","9e5333c5":"approved_price = project_data[project_data['project_is_approved']==1]['price'].values\n\nrejected_price = project_data[project_data['project_is_approved']==0]['price'].values","6f6e6bad":"# https:\/\/glowingpython.blogspot.com\/2012\/09\/boxplot-with-matplotlib.html\nplt.boxplot([approved_price, rejected_price])\nplt.title('Box Plots of Cost per approved and not approved Projects')\nplt.xticks([1,2],('Approved Projects','Rejected Projects'))\nplt.ylabel('Price')\nplt.grid()\nplt.show()","0f5ac856":"plt.figure(figsize=(10,3))\nsns.distplot(approved_price, hist=False, label=\"Approved Projects\")\nsns.distplot(rejected_price, hist=False, label=\"Not Approved Projects\")\nplt.title('Cost per approved and not approved Projects')\nplt.xlabel('Cost of a project')\nplt.legend()\nplt.show()","1eac9b81":"# http:\/\/zetcode.com\/python\/prettytable\/\nfrom prettytable import PrettyTable\n\n#If you get a ModuleNotFoundError error , install prettytable using: pip3 install prettytable\n\nx = PrettyTable()\nx.field_names = [\"Percentile\", \"Approved Projects\", \"Not Approved Projects\"]\n\nfor i in range(0,101,5):\n    x.add_row([i,np.round(np.percentile(approved_price,i), 3), np.round(np.percentile(rejected_price,i), 3)])\nprint(x)","c2ff3f05":"#ploting bar graph for teacher_number_of_previously_posted_projects\nunivariate_barplots(project_data, 'teacher_number_of_previously_posted_projects', 'project_is_approved', top=50)","3afc1744":"\napproved_previously_posted_projects_count=project_data[project_data['project_is_approved']==1]['teacher_number_of_previously_posted_projects'].values\nrejected_previously_posted_projects_count=project_data[project_data['project_is_approved']==0]['teacher_number_of_previously_posted_projects'].values\n","ef0f6019":"plt.boxplot([approved_previously_posted_projects_count,rejected_previously_posted_projects_count],autorange=True)\nplt.title('Number of previously posted projects by teacher')\nplt.xticks([1,2],('Approved Projects','Rejected Projects'))\nplt.ylabel(\"Number of previously posted projects\")\nplt.show()\n","00309ebf":"plt.figure(figsize=(10,3))\nsns.distplot(approved_previously_posted_projects_count, hist=False, label=\"Approved Projects\")\nsns.distplot(rejected_previously_posted_projects_count, hist=False, label=\"Not Approved Projects\")\nplt.title('Number of previously posted projects by teacher')\nplt.xlabel('Number of previously posted projects')\nplt.legend()\nplt.show()","e8cdb372":"# http:\/\/zetcode.com\/python\/prettytable\/\nx = PrettyTable()\nx.field_names = [\"Percentile\", \"Approved Projects\", \"Not Approved Projects\"]\n\nfor i in range(0,101,5):\n    x.add_row([i,np.round(np.percentile(approved_previously_posted_projects_count,i), 3), np.round(np.percentile(rejected_previously_posted_projects_count,i), 3)])\nprint(x)","b741da8a":"#function to detect  number in strings\ndef hasNum(inputstr):\n    if any(char.isdigit() for char in inputstr):\n        return 1\n    else:\n        return 0\n        \ndigit_in_summary=list(map(hasNum,project_data['project_resource_summary']))\nproject_data['digit_in_summary']=digit_in_summary\nprint(\"Shape of the Project_data after adding digit_in_summary column\",project_data.shape)\nproject_data.head(2)","24b516d2":"#ploting bar plot\nunivariate_barplots(project_data, 'digit_in_summary', 'project_is_approved', top=False)","fc242436":"#Grouping \u201c is digit in summary\u201d variable based on project_is_approved \napproved_digit_in_summary=project_data[project_data['project_is_approved']==1]['digit_in_summary'].values\nrejected_digit_in_summary=project_data[project_data['project_is_approved']==0]['digit_in_summary'].values\nprint(len(approved_digit_in_summary[approved_digit_in_summary[:]==0]),len(rejected_digit_in_summary[rejected_digit_in_summary[:]==0]))","3eb8965e":"#ploting box plot\nplt.boxplot([approved_digit_in_summary,rejected_digit_in_summary],autorange=True)\nplt.title('Is digit in summary ')\nplt.xticks([1,2],('Approved Projects','Rejected Projects'))\nplt.ylabel(\"Number of previously posted projects\")\nplt.show()\n","4f8dd30d":"plt.figure(figsize=(10,3))\nsns.distplot(rejected_digit_in_summary, hist=True, label=\"Not Approved Projects\")\nsns.distplot(approved_digit_in_summary, hist=True, label=\"Approved Projects\")\nplt.title('Is digit in summary 0->no digit in summary and 1->digit is there in summary')\nplt.xlabel('0->no digit in summary and 1->digit is there in summary')\nplt.legend()\nplt.show()","6f203b32":"#percentile of approved_digit_in_summary and rejected_digit_in_summary\nx = PrettyTable()\nx.field_names = [\"Percentile\", \"Approved Projects\", \"Not Approved Projects\"]\n\nfor i in range(0,101,5):\n    x.add_row([i,np.round(np.percentile(approved_digit_in_summary,i), 3), np.round(np.percentile(rejected_digit_in_summary,i), 3)])\nprint(x)","b89a53bc":"project_data.head(2)\n","739bd52b":"# printing some random essays.\nprint(project_data['essay'].values[0])\nprint(\"=\"*50)\nprint(project_data['essay'].values[150])\nprint(\"=\"*50)\nprint(project_data['essay'].values[1000])\nprint(\"=\"*50)\nprint(project_data['essay'].values[20000])\nprint(\"=\"*50)\nprint(project_data['essay'].values[99999])\nprint(\"=\"*50)\n","9ea232ac":"# https:\/\/stackoverflow.com\/a\/47091490\/4084039\nimport re\n\ndef decontracted(phrase):\n    # specific\n    phrase = re.sub(r\"won't\", \"will not\", phrase)\n    phrase = re.sub(r\"can\\'t\", \"can not\", phrase)\n\n    # general\n    phrase = re.sub(r\"n\\'t\", \" not\", phrase)\n    phrase = re.sub(r\"\\'re\", \" are\", phrase)\n    phrase = re.sub(r\"\\'s\", \" is\", phrase)\n    phrase = re.sub(r\"\\'d\", \" would\", phrase)\n    phrase = re.sub(r\"\\'ll\", \" will\", phrase)\n    phrase = re.sub(r\"\\'t\", \" not\", phrase)\n    phrase = re.sub(r\"\\'ve\", \" have\", phrase)\n    phrase = re.sub(r\"\\'m\", \" am\", phrase)\n    return phrase","3a9c5653":"sent = decontracted(project_data['essay'].values[0])\nprint(sent)\nprint(\"=\"*50)","87cee63f":"# \\r \\n \\t remove from string python: http:\/\/texthandler.com\/info\/remove-line-breaks-python\/\nsent = sent.replace('\\\\r', ' ')\nsent = sent.replace('\\\\\"', ' ')\nsent = sent.replace('\\\\n', ' ')\nprint(sent)","1a257273":"#remove spacial character: https:\/\/stackoverflow.com\/a\/5843547\/4084039\nsent = re.sub('[^A-Za-z0-9]+', ' ', sent)\nprint(sent)","c73211e1":"# https:\/\/gist.github.com\/sebleier\/554280\n# we are removing the words from the stop words list: 'no', 'nor', 'not'\nstopwords= ['i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves', 'you', \"you're\", \"you've\",\\\n            \"you'll\", \"you'd\", 'your', 'yours', 'yourself', 'yourselves', 'he', 'him', 'his', 'himself', \\\n            'she', \"she's\", 'her', 'hers', 'herself', 'it', \"it's\", 'its', 'itself', 'they', 'them', 'their',\\\n            'theirs', 'themselves', 'what', 'which', 'who', 'whom', 'this', 'that', \"that'll\", 'these', 'those', \\\n            'am', 'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'having', 'do', 'does', \\\n            'did', 'doing', 'a', 'an', 'the', 'and', 'but', 'if', 'or', 'because', 'as', 'until', 'while', 'of', \\\n            'at', 'by', 'for', 'with', 'about', 'against', 'between', 'into', 'through', 'during', 'before', 'after',\\\n            'above', 'below', 'to', 'from', 'up', 'down', 'in', 'out', 'on', 'off', 'over', 'under', 'again', 'further',\\\n            'then', 'once', 'here', 'there', 'when', 'where', 'why', 'how', 'all', 'any', 'both', 'each', 'few', 'more',\\\n            'most', 'other', 'some', 'such', 'only', 'own', 'same', 'so', 'than', 'too', 'very', \\\n            's', 't', 'can', 'will', 'just', 'don', \"don't\", 'should', \"should've\", 'now', 'd', 'll', 'm', 'o', 're', \\\n            've', 'y', 'ain', 'aren', \"aren't\", 'couldn', \"couldn't\", 'didn', \"didn't\", 'doesn', \"doesn't\", 'hadn',\\\n            \"hadn't\", 'hasn', \"hasn't\", 'haven', \"haven't\", 'isn', \"isn't\", 'ma', 'mightn', \"mightn't\", 'mustn',\\\n            \"mustn't\", 'needn', \"needn't\", 'shan', \"shan't\", 'shouldn', \"shouldn't\", 'wasn', \"wasn't\", 'weren', \"weren't\", \\\n            'won', \"won't\", 'wouldn', \"wouldn't\"]","561f9fbe":"# Combining all the above statemennts \nfrom tqdm import tqdm\npreprocessed_essays = []\n# tqdm is for printing the status bar\nfor sentance in tqdm(project_data['essay'].values):\n    sent = decontracted(sentance)\n    sent = sent.replace('\\\\r', ' ')\n    sent = sent.replace('\\\\\"', ' ')\n    sent = sent.replace('\\\\n', ' ')\n    sent = re.sub('[^A-Za-z0-9]+', ' ', sent)\n    # https:\/\/gist.github.com\/sebleier\/554280\n    sent = ' '.join(e for e in sent.split() if e not in stopwords)\n    preprocessed_essays.append(sent.lower().strip())","8b9f697b":"# after preprocesing\npreprocessed_essays[0]","bbafeacb":"# similarly you can preprocess the titles also\n# Combining all the above statemennts \nfrom tqdm import tqdm\npreprocessed_titles = []\n# tqdm is for printing the status bar\nfor sentance in tqdm(project_data['project_title'].values):\n    sent = decontracted(sentance)\n    sent = sent.replace('\\\\r', ' ')\n    sent = sent.replace('\\\\\"', ' ')\n    sent = sent.replace('\\\\n', ' ')\n    sent = re.sub('[^A-Za-z0-9]+', ' ', sent)\n    # https:\/\/gist.github.com\/sebleier\/554280\n    sent = ' '.join(e for e in sent.split() if e not in stopwords)\n    preprocessed_titles.append(sent.lower().strip())","8830122c":"# after preprocesing\npreprocessed_titles[0]","67d71ae7":"project_data.columns","a8aa2ca9":"# we use count vectorizer to convert the values into one hot encoded features\n# Project categories\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer_categories = CountVectorizer(vocabulary=list(sorted_cat_dict.keys()),lowercase=False, binary=True)\nvectorizer_categories.fit(project_data['clean_categories'].values)\nprint(vectorizer_categories.get_feature_names())\ncategories_one_hot =vectorizer_categories.transform(project_data['clean_categories'].values)\nprint(categories_one_hot.toarray()[0:1])\nprint(\"\\nShape of matrix after one hot encodig for 'Project categories'\",categories_one_hot.shape)","bb7beefe":"# we use count vectorizer to convert the values into one hot encoded features\n# Project subcategories\nvectorizer_subcategories = CountVectorizer(vocabulary=list(sorted_sub_cat_dict.keys()), lowercase=False, binary=True)\nvectorizer_subcategories.fit(project_data['clean_subcategories'].values)\nprint(vectorizer_subcategories.get_feature_names())\nsub_categories_one_hot = vectorizer_subcategories.transform(project_data['clean_subcategories'].values)\nprint(sub_categories_one_hot.toarray()[0:2])\nprint(\"\\nShape of matrix after one hot encodig for 'Project subcategories'\",sub_categories_one_hot.shape)","bfddba4b":"# we use count vectorizer to convert the values into one hot encoded features\n#teacher_prefix\nvectorizer_teacher_prefix = CountVectorizer(lowercase=False, binary=True)\nvectorizer_teacher_prefix.fit(project_data['teacher_prefix'].values.astype('str'))\nprint(vectorizer_teacher_prefix.get_feature_names())\nteacher_prefix_one_hot = vectorizer_teacher_prefix.transform(project_data['teacher_prefix'].values.astype('str'))\nprint(teacher_prefix_one_hot.toarray()[0:1])\nprint(\"\\nShape of matrix after one hot encodig for teacher prefix \",teacher_prefix_one_hot.shape)","3d894b00":"# we use count vectorizer to convert the values into one hot encoded features\n#school_state\nvectorizer_school_state = CountVectorizer(lowercase=False, binary=True)\nvectorizer_school_state.fit(project_data['school_state'].values.astype('str'))\nprint(vectorizer_school_state.get_feature_names())\nschool_state_one_hot = vectorizer_school_state.transform(project_data['school_state'].values.astype('str'))\nprint(school_state_one_hot.toarray()[0:1])\nprint(\"\\nShape of matrix after one hot encodig for school states \",school_state_one_hot.shape)","4cc551bc":"#Preprocessing the project_grade_category\nproject_grade_category_cleaned=[]\nfor grade in tqdm(project_data['project_grade_category'].values):\n    grade = grade.replace(' ', '_')\n    grade = grade.replace('-', '_')\n    project_grade_category_cleaned.append(grade)\nproject_data['Project_grade_category']=project_grade_category_cleaned","b90164e2":"# we use count vectorizer to convert the values into one hot encoded features\n#project_grade_category\nvectorizer_grade_category = CountVectorizer(lowercase=False, binary=True)\nvectorizer_grade_category.fit(project_grade_category_cleaned)\nprint(vectorizer_grade_category.get_feature_names())\ngrade_category_one_hot = vectorizer_grade_category.transform(project_grade_category_cleaned)\nprint(grade_category_one_hot.toarray()[0:1])\nprint(\"\\nShape of matrix after one hot encodig for school states \",grade_category_one_hot.shape)","9048d544":"# We are considering only the words which appeared in at least 10 documents(rows or projects).\n#Bag of words of Project essays\nvectorizer = CountVectorizer(min_df=8)\ntext_bow = vectorizer.fit_transform(preprocessed_essays)\nprint(\"Shape of matrix after one hot encodig \",text_bow.shape)","624f88d2":"print('Some feature names of bag of words of the essays')\nprint('='*50)\nprint(vectorizer.get_feature_names()[1000:1020])\n#print(text_bow.toarray()[0:1])","94706436":"# We are considering only the words which appeared in at least 5 documents(rows or projects).\n#Bag of words project_title\nvectorizer = CountVectorizer(min_df=5)\ntext_bow_title = vectorizer.fit_transform(preprocessed_titles)\nprint(\"Shape of matrix after one hot encodig \",text_bow_title.shape)","f75f350f":"print('Some feature names of bag of words of the project title')\nprint('='*50)\nprint(vectorizer.get_feature_names()[1000:1020])\nprint(text_bow_title.toarray()[0:2])","0a5ff5b9":"from sklearn.feature_extraction.text import TfidfVectorizer\ntfidf_vectorizer_essays = TfidfVectorizer(min_df=10)\ntext_tfidf = tfidf_vectorizer_essays.fit_transform(preprocessed_essays)\nprint(\"Shape of matrix TFIDF Vectorizer on essays \",text_tfidf.shape)","096f73ed":"print('Sample of TFIDF Vectorizer on essays')\nprint('='*50)\n#print(text_tfidf.toarray()[0:1])\nprint(tfidf_vectorizer_essays.get_feature_names()[4000:4010])\nprint(text_tfidf[0:1,0:1116])","e5ef03d0":"# Similarly you can vectorize for title also\nfrom sklearn.feature_extraction.text import TfidfVectorizer\ntfidf_vectorizer_title = TfidfVectorizer(min_df=10)\ntitle_tfidf = tfidf_vectorizer_title.fit_transform(preprocessed_titles)\nprint(\"Shape of matrix of TFIDF Vectorizer on project title\",title_tfidf.shape)","83e4383a":"print('Sample of TFIDF Vectorizer on `project_title`')\nprint('='*50)\nprint(title_tfidf.toarray()[0:1,1980:2000])\nprint(tfidf_vectorizer_title.get_feature_names()[100:110])","6555877c":"# check this one: https:\/\/www.youtube.com\/watch?v=0HOqOcln3Z4&t=530s\n# standardization sklearn: https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.preprocessing.StandardScaler.html\nfrom sklearn.preprocessing import StandardScaler\n\n# price_standardized = standardScalar.fit(project_data['price'].values)\n# this will rise the error\n# ValueError: Expected 2D array, got 1D array instead: array=[725.05 213.03 329.   ... 399.   287.73   5.5 ].\n# Reshape your data either using array.reshape(-1, 1)\n\nprice_scalar = StandardScaler()\nprice_scalar.fit(project_data['price'].values.reshape(-1,1)) # finding the mean and standard deviation of this data\nprint(f\"Mean : {price_scalar.mean_[0]}, Standard deviation : {np.sqrt(price_scalar.var_[0])}\")\n\n# Now standardize the data with above maen and variance.\nprice_standardized = price_scalar.transform(project_data['price'].values.reshape(-1, 1))","1e59c9d5":"price_standardized","9c1197f3":"#quantity\nquantity_scalar = StandardScaler()\nquantity_scalar.fit(project_data['quantity'].values.reshape(-1,1)) # finding the mean and standard deviation of this data\nprint(f\"Mean : {quantity_scalar.mean_[0]}, Standard deviation : {np.sqrt(quantity_scalar.var_[0])}\")\n\n# Now standardize the data with above maen and variance.\nquantity_standardized = quantity_scalar.transform(project_data['quantity'].values.reshape(-1, 1))","a7e2f0e6":"#teacher_number_of_previously_posted_projects\nteacher_number_of_previously_posted_projects_scalar = StandardScaler()\nteacher_number_of_previously_posted_projects_scalar.fit(project_data['teacher_number_of_previously_posted_projects'].values.reshape(-1,1)) # finding the mean and standard deviation of this data\nprint(f\"Mean : {teacher_number_of_previously_posted_projects_scalar.mean_[0]}, Standard deviation : {np.sqrt(teacher_number_of_previously_posted_projects_scalar.var_[0])}\")\n\n# Now standardize the data with above maen and variance.\nteacher_number_of_previously_posted_projects_standardized = teacher_number_of_previously_posted_projects_scalar.transform(project_data['teacher_number_of_previously_posted_projects'].values.reshape(-1, 1))\n","cd4b358e":"print(school_state_one_hot.shape)\nprint(categories_one_hot.shape)\n#print(sub_categories.shape)\nprint(sub_categories_one_hot.shape)\nprint(teacher_prefix_one_hot.shape)\nprint(grade_category_one_hot.shape)\nprint(price_standardized.shape)\nprint(quantity_standardized.shape)\nprint(teacher_number_of_previously_posted_projects_standardized.shape)\nprint(text_bow_title.shape)\n\n","ffd9bf24":"# merge two sparse matrices: https:\/\/stackoverflow.com\/a\/19710648\/4084039\n#categorical, numerical features + project_title(BOW)\nfrom scipy.sparse import hstack\n# with the same hstack function we are concatinating a sparse matrix and a dense matirx :)\nX_BOW= hstack((school_state_one_hot,categories_one_hot, sub_categories_one_hot,teacher_prefix_one_hot,grade_category_one_hot,price_standardized,teacher_number_of_previously_posted_projects_standardized,text_bow_title))\nx_BOW=X_BOW.toarray()\nprint(X_BOW.shape)","38f1fcc0":"# merge two sparse matrices: https:\/\/stackoverflow.com\/a\/19710648\/4084039\n#categorical, numerical features + project_title(TFIDF)\nfrom scipy.sparse import hstack\n# with the same hstack function we are concatinating a sparse matrix and a dense matirx :)\nX_TFIDF= hstack((school_state_one_hot,categories_one_hot, sub_categories_one_hot,teacher_prefix_one_hot,grade_category_one_hot,price_standardized,teacher_number_of_previously_posted_projects_standardized,title_tfidf))\nprint(X_TFIDF.shape)\nX_TFIDF=X_TFIDF.toarray()","ee10fa38":"# merge two sparse matrices: https:\/\/stackoverflow.com\/a\/19710648\/4084039\n# concatenation all the features \nfrom scipy.sparse import hstack\n# with the same hstack function we are concatinating a sparse matrix and a dense matirx :)\nX_all_fetures= hstack((school_state_one_hot,categories_one_hot, sub_categories_one_hot,teacher_prefix_one_hot,grade_category_one_hot,price_standardized,teacher_number_of_previously_posted_projects_standardized,text_bow_title,title_tfidf))\nprint(X_all_fetures.shape)\nX_all_fetures=X_all_fetures.toarray()","9311e9f0":"#https:\/\/pandas.pydata.org\/pandas-docs\/version\/0.22\/generated\/pandas.Series.reshape.html#pandas.Series.reshape\n# please write all of the code with proper documentation and proper titles for each subsection\n# when you plot any graph make sure you use \n    # a. Title, that describes your plot, this will be very helpful to the reader\n    # b. Legends if needed\n    # c. X-axis label\n    # d. Y-axis label\nimport numpy as np\nfrom sklearn.manifold import TSNE\nfrom sklearn import datasets\nimport pandas as pd\nimport matplotlib.pyplot as plt    \n    \nx = x_BOW[0:5000]\ny = project_data['project_is_approved'][0:5000]\n\ntsne = TSNE(n_components=2, perplexity=30, learning_rate=200)\n\nX_embedding = tsne.fit_transform(x)\n# if x is a sparse matrix you need to pass it as X_embedding = tsne.fit_transform(x.toarray()) , .toarray() will convert the sparse matrix into dense matrix\n\nfor_tsne = np.hstack((X_embedding, y.values.reshape(-1,1)))\nfor_tsne_df = pd.DataFrame(data=for_tsne, columns=['Dimension_x','Dimension_y','Score'])\ncolors = {0:'red', 1:'blue'}\nplt.scatter(for_tsne_df['Dimension_x'], for_tsne_df['Dimension_y'], c=for_tsne_df['Score'].apply(lambda x: colors[x]))\nplt.title(\"TSNE with `BOW` encoding of `project_title` feature with perplexity=30\")\nplt.show()   \n    ","97a5afcc":"#https:\/\/pandas.pydata.org\/pandas-docs\/version\/0.22\/generated\/pandas.Series.reshape.html#pandas.Series.reshape\n# please write all of the code with proper documentation and proper titles for each subsection\n# when you plot any graph make sure you use \n    # a. Title, that describes your plot, this will be very helpful to the reader\n    # b. Legends if needed\n    # c. X-axis label\n    # d. Y-axis label\n    \n    \nx = x_BOW[0:5000]\ny = project_data['project_is_approved'][0:5000]\n\ntsne = TSNE(n_components=2, perplexity=50, learning_rate=200)\n\nX_embedding = tsne.fit_transform(x)\n# if x is a sparse matrix you need to pass it as X_embedding = tsne.fit_transform(x.toarray()) , .toarray() will convert the sparse matrix into dense matrix\n\nfor_tsne = np.hstack((X_embedding, y.values.reshape(-1,1)))\nfor_tsne_df = pd.DataFrame(data=for_tsne, columns=['Dimension_x','Dimension_y','Score'])\ncolors = {0:'red', 1:'blue'}\nplt.scatter(for_tsne_df['Dimension_x'], for_tsne_df['Dimension_y'], c=for_tsne_df['Score'].apply(lambda x: colors[x]))\nplt.title(\"TSNE with `BOW` encoding of `project_title` feature with perplexity=50\")\nplt.show() ","3c01cdd3":"#https:\/\/pandas.pydata.org\/pandas-docs\/version\/0.22\/generated\/pandas.Series.reshape.html#pandas.Series.reshape\n# please write all of the code with proper documentation and proper titles for each subsection\n# when you plot any graph make sure you use \n    # a. Title, that describes your plot, this will be very helpful to the reader\n    # b. Legends if needed\n    # c. X-axis label\n    # d. Y-axis label\n    \n    \nx = x_BOW[0:5000]\ny = project_data['project_is_approved'][0:5000]\n\ntsne = TSNE(n_components=2, perplexity=100, learning_rate=300)\n\nX_embedding = tsne.fit_transform(x)\n# if x is a sparse matrix you need to pass it as X_embedding = tsne.fit_transform(x.toarray()) , .toarray() will convert the sparse matrix into dense matrix\n\nfor_tsne = np.hstack((X_embedding, y.values.reshape(-1,1)))\nfor_tsne_df = pd.DataFrame(data=for_tsne, columns=['Dimension_x','Dimension_y','Score'])\ncolors = {0:'red', 1:'blue'}\nplt.scatter(for_tsne_df['Dimension_x'], for_tsne_df['Dimension_y'], c=for_tsne_df['Score'].apply(lambda x: colors[x]))\nplt.title(\"TSNE with `BOW` encoding of `project_title` feature with perplexity=100\")\nplt.show() ","031548ab":"# please write all the code with proper documentation, and proper titles for each subsection\n# when you plot any graph make sure you use \n    # a. Title, that describes your plot, this will be very helpful to the reader\n    # b. Legends if needed\n    # c. X-axis label\n    # d. Y-axis label\nx = X_TFIDF[0:5000]\ny = project_data['project_is_approved'][0:5000]\n\ntsne = TSNE(n_components=2, perplexity=30, learning_rate=200)\n\nX_embedding = tsne.fit_transform(x)\n# if x is a sparse matrix you need to pass it as X_embedding = tsne.fit_transform(x.toarray()) , .toarray() will convert the sparse matrix into dense matrix\n\nfor_tsne = np.hstack((X_embedding,y.values.reshape(-1,1)))\nfor_tsne_df = pd.DataFrame(data=for_tsne, columns=['Dimension_x','Dimension_y','Score'])\ncolors = {0:'red', 1:'blue'}\nplt.scatter(for_tsne_df['Dimension_x'], for_tsne_df['Dimension_y'], c=for_tsne_df['Score'].apply(lambda x: colors[x]))\nplt.title(\"TSNE with `TFIDF` encoding of `project_title` feature with perplexity=30\")\nplt.show()   \n        ","7e8f3623":"# please write all the code with proper documentation, and proper titles for each subsection\n# when you plot any graph make sure you use \n    # a. Title, that describes your plot, this will be very helpful to the reader\n    # b. Legends if needed\n    # c. X-axis label\n    # d. Y-axis label\nx = X_TFIDF[0:5000]\ny = project_data['project_is_approved'][0:5000]\n\ntsne = TSNE(n_components=2, perplexity=50, learning_rate=200)\n\nX_embedding = tsne.fit_transform(x)\n# if x is a sparse matrix you need to pass it as X_embedding = tsne.fit_transform(x.toarray()) , .toarray() will convert the sparse matrix into dense matrix\n\nfor_tsne = np.hstack((X_embedding,y.values.reshape(-1,1)))\nfor_tsne_df = pd.DataFrame(data=for_tsne, columns=['Dimension_x','Dimension_y','Score'])\ncolors = {0:'red', 1:'blue'}\nplt.scatter(for_tsne_df['Dimension_x'], for_tsne_df['Dimension_y'], c=for_tsne_df['Score'].apply(lambda x: colors[x]))\nplt.title(\"TSNE with `TFIDF` encoding of `project_title` feature with perplexity=50\")\nplt.show()   \n        \n        ","21a96ed8":"# please write all the code with proper documentation, and proper titles for each subsection\n# when you plot any graph make sure you use \n    # a. Title, that describes your plot, this will be very helpful to the reader\n    # b. Legends if needed\n    # c. X-axis label\n    # d. Y-axis label\nx = X_TFIDF[0:5000]\ny = project_data['project_is_approved'][0:5000]\n\ntsne = TSNE(n_components=2, perplexity=100, learning_rate=200)\n\nX_embedding = tsne.fit_transform(x)\n# if x is a sparse matrix you need to pass it as X_embedding = tsne.fit_transform(x.toarray()) , .toarray() will convert the sparse matrix into dense matrix\n\nfor_tsne = np.hstack((X_embedding,y.values.reshape(-1,1)))\nfor_tsne_df = pd.DataFrame(data=for_tsne, columns=['Dimension_x','Dimension_y','Score'])\ncolors = {0:'red', 1:'blue'}\nplt.scatter(for_tsne_df['Dimension_x'], for_tsne_df['Dimension_y'], c=for_tsne_df['Score'].apply(lambda x: colors[x]))\nplt.title(\"TSNE with `TFIDF` encoding of `project_title` feature with perplexity=100\")\nplt.show()   \n         \n        ","6b24fe0b":"# please write all the code with proper documentation, and proper titles for each subsection\n# when you plot any graph make sure you use \n    # a. Title, that describes your plot, this will be very helpful to the reader\n    # b. Legends if needed\n    # c. X-axis label\n    # d. Y-axis label\nx =X_all_fetures[0:5000]\ny = project_data['project_is_approved'][0:5000]\n\ntsne = TSNE(n_components=2, perplexity=30, learning_rate=200)\n\nX_embedding = tsne.fit_transform(x)\n# if x is a sparse matrix you need to pass it as X_embedding = tsne.fit_transform(x.toarray()) , .toarray() will convert the sparse matrix into dense matrix\n\nfor_tsne = np.hstack((X_embedding, y.values.reshape(-1,1)))\nfor_tsne_df = pd.DataFrame(data=for_tsne, columns=['Dimension_x','Dimension_y','Score'])\ncolors = {0:'red', 1:'blue'}\nplt.scatter(for_tsne_df['Dimension_x'], for_tsne_df['Dimension_y'], c=for_tsne_df['Score'].apply(lambda x: colors[x]))\nplt.title(\"TSNE with `TFIDF Weighted W2V` encoding of `project_title` feature with perplexity=30\")\nplt.show() \n","2a86eb90":"# please write all the code with proper documentation, and proper titles for each subsection\n# when you plot any graph make sure you use \n    # a. Title, that describes your plot, this will be very helpful to the reader\n    # b. Legends if needed\n    # c. X-axis label\n    # d. Y-axis label\nx =X_all_fetures[0:5000]\ny = project_data['project_is_approved'][0:5000]\n\ntsne = TSNE(n_components=2, perplexity=50, learning_rate=200)\n\nX_embedding = tsne.fit_transform(x)\n# if x is a sparse matrix you need to pass it as X_embedding = tsne.fit_transform(x.toarray()) , .toarray() will convert the sparse matrix into dense matrix\n\nfor_tsne = np.hstack((X_embedding, y.values.reshape(-1,1)))\nfor_tsne_df = pd.DataFrame(data=for_tsne, columns=['Dimension_x','Dimension_y','Score'])\ncolors = {0:'red', 1:'blue'}\nplt.scatter(for_tsne_df['Dimension_x'], for_tsne_df['Dimension_y'], c=for_tsne_df['Score'].apply(lambda x: colors[x]))\nplt.title(\"TSNE with `TFIDF Weighted W2V` encoding of `project_title` feature with perplexity=50\")\nplt.show() \n","ae3006db":"# please write all the code with proper documentation, and proper titles for each subsection\n# when you plot any graph make sure you use \n    # a. Title, that describes your plot, this will be very helpful to the reader\n    # b. Legends if needed\n    # c. X-axis label\n    # d. Y-axis label\nx =X_all_fetures[0:5000]\ny = project_data['project_is_approved'][0:5000]\n\ntsne = TSNE(n_components=2, perplexity=100, learning_rate=200)\n\nX_embedding = tsne.fit_transform(x)\n# if x is a sparse matrix you need to pass it as X_embedding = tsne.fit_transform(x.toarray()) , .toarray() will convert the sparse matrix into dense matrix\n\nfor_tsne = np.hstack((X_embedding, y.values.reshape(-1,1)))\nfor_tsne_df = pd.DataFrame(data=for_tsne, columns=['Dimension_x','Dimension_y','Score'])\ncolors = {0:'red', 1:'blue'}\nplt.scatter(for_tsne_df['Dimension_x'], for_tsne_df['Dimension_y'], c=for_tsne_df['Score'].apply(lambda x: colors[x]))\nplt.title(\"TSNE with `TFIDF Weighted W2V` encoding of `project_title` feature with perplexity=100\")\nplt.show() \n","fe64ab9e":"- we need to merge all the numerical vectors i.e catogorical, text, numerical vectors","0474bf2e":"#### 1.4.2.3 TFIDF vectorizer","19d8178e":"<h1><font color='red'>Assignment 2: Apply TSNE<font><\/h1>","2122dbfe":"__SUMMARY:<br>\n1)\tLots of variation in number of project submission when we consider categories.<br>\n2) Distribution of bar plot almost most looks like power law distribution  <br>\n3) Every clean_categories has greater than 80% success rate in approval.<br>\n4) \u201cWarmth Care_Hunger\u201d category has highest percentage of  acceptance. \n__\n","97eb0d3d":"### 1.2.6 Univariate Analysis: Text features (Title)","c32cdee0":"<h3><font color='red'>1.3.2 Project title Text<\/font><\/h3>","990b26fb":"### 1.2.5 Univariate Analysis: project_subject_subcategories","f7c16a79":"__SUMMARY:<br>\n1) Senior lectures used to send more project proposals and approval rate is also high for senior lectures because they have good knowledge regarding how to write project proposal. \n <br>\n2) Project proposal sent by Mrs., Ms. and Mr. have greater success rate when compared to Teacher and Dr.\n__\n","89faa1ec":"<h4><font color='red'> 1.4.2.4 TFIDF Vectorizer on `project_title`<\/font><\/h4>","f22f70bd":"<h3><font color='red'>1.2.9 Univariate Analysis: teacher_number_of_previously_posted_projects<\/font><\/h3>","6d251060":"# 1.3 Text preprocessing","db0c0a17":"__<br>\n1)\tFrom figure 'TSE with BOW and TFIDF' we can see multiples of small cluster of datapoint but most of the approved project and rejected project datapoint overlapped hence we cannot draw decision line to separate both classes.<br>\n2) Even if perplexity value varies TSNE output remains same, we can see that approved project and rejected project datapoint overlapped we can conclude that most of the words used in project title are same for both approved project and rejected project.\n__","8fb79918":"__ SUMMARY:<br>\n1)  Cannot get much information from box plot and PDF curves.<br>\n2) Most of the approved project cost is less compare to non-approved project.<br>\n3) And maximum cost for approved project is 9999.__\n","f3723ea7":"### Notes on the Essay Data\n\n<ul>\nPrior to May 17, 2016, the prompts for the essays were as follows:\n<li>__project_essay_1:__ \"Introduce us to your classroom\"<\/li>\n<li>__project_essay_2:__ \"Tell us more about your students\"<\/li>\n<li>__project_essay_3:__ \"Describe how your students will use the materials you're requesting\"<\/li>\n<li>__project_essay_4:__ \"Close by sharing why your project will make a difference\"<\/li>\n<\/ul>\n\n\n<ul>\nStarting on May 17, 2016, the number of essays was reduced from 4 to 2, and the prompts for the first 2 essays were changed to the following:<br>\n<li>__project_essay_1:__ \"Describe your students: What makes your students special? Specific details about their background, your neighborhood, and your school are all helpful.\"<\/li>\n<li>__project_essay_2:__ \"About your project: How will these materials make a difference in your students' learning and improve their school lives?\"<\/li>\n<br>For all projects with project_submitted_datetime of 2016-05-17 and later, the values of project_essay_3 and project_essay_4 will be NaN.\n<\/ul>\n","87ecb8ff":"**Observation(s):**\n\n1. Donors choose data set is not balanced data set.","b11aa509":"<p>\nDonorsChoose.org receives hundreds of thousands of project proposals each year for classroom projects in need of funding. Right now, a large number of volunteers is needed to manually screen each submission before it's approved to be posted on the DonorsChoose.org website.\n<\/p>\n<p>\n    Next year, DonorsChoose.org expects to receive close to 500,000 project proposals. As a result, there are three main problems they need to solve:\n<ul>\n<li>\n    How to scale current manual processes and resources to screen 500,000 projects so that they can be posted as quickly and as efficiently as possible<\/li>\n    <li>How to increase the consistency of project vetting across different volunteers to improve the experience for teachers<\/li>\n    <li>How to focus volunteer time on the applications that need the most assistance<\/li>\n    <\/ul>\n<\/p>    \n<p>\nThe goal of the competition is to predict whether or not a DonorsChoose.org project proposal submitted by a teacher will be approved, using the text of project descriptions as well as additional metadata about the project, teacher, and school. DonorsChoose.org can then use this information to identify projects most likely to need further review before approval.\n<\/p>","bd5d2e2f":"%matplotlib inline\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport sqlite3\nimport pandas as pd\nimport numpy as np\nimport nltk\nimport string\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.feature_extraction.text import TfidfTransformer\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn import metrics\nfrom sklearn.metrics import roc_curve, auc\nfrom nltk.stem.porter import PorterStemmer\n\nimport re\n# Tutorial about Python regular expressions: https:\/\/pymotw.com\/2\/re\/\nimport string\nfrom nltk.corpus import stopwords\nfrom nltk.stem import PorterStemmer\nfrom nltk.stem.wordnet import WordNetLemmatizer\n\nfrom gensim.models import Word2Vec\nfrom gensim.models import KeyedVectors\nimport pickle\n\nfrom tqdm import tqdm\nimport os\n\nfrom plotly import plotly\nimport plotly.offline as offline\nimport plotly.graph_objs as go\noffline.init_notebook_mode()\nfrom collections import Counter","2a138995":"### 1.2.8 Univariate Analysis: Cost per project","b32cbb01":" <font color=#F4274F>If you are using any code snippet from the internet, you have to provide the reference\/citations, as we did in the above cells. Otherwise, it will be treated as plagiarism without citations.<\/font>","6b78a474":"<h2> 2.2 TSNE with `TFIDF` encoding of `project_title` feature <\/h2>","18a817e8":"### 1.2.7 Univariate Analysis: Text features (Project Essay's)","bab3839c":"### 1.4.1 Vectorizing Categorical data","61d9ca5e":"<h2> 2.5 Summary <\/h2>","1a11a700":"## 1. 4 Preparing data for models","cd2e17d8":"### 1.4.2 Vectorizing Text data","ffcb671d":"__SUMMARY:<br>\n1)\tLots of variation in number of project submission when we consider Project subcategories.<br>\n2) Distribution of bar plot almost most looks like power law distribution hence we can say that 80% of the project proposals came from 20% of subcategories. <br>\n3) Every clean_categories has greater than 80% success rate in approval.<br>\n__\n","0f5294f8":"### 1.2.2 Univariate Analysis: teacher_prefix","42951511":"__ SUMMARY:<br>\n1) Project acceptation rate is too low when project title has too more number words in title (greeter than 12) and too less number words in title (less than 2)  .<br>\n2) Number of words in title is slightly high for approved project when compared to rejected projects.<br>\n3) PDF curve almost looks like Gaussian distribution and PDF curve of approved projects is slightly ahead when compared to reject project hence we can say chances of accepting the project is more when title have more number of words(less than 12)__\n","0abdcde9":"- https:\/\/www.appliedaicourse.com\/course\/applied-ai-course-online\/lessons\/handling-categorical-and-numerical-features\/","a1a4aaf1":"\n__ SUMMARY:<br>\n1) Number of words in project essays is slightly high for approved project when compared to rejected projects. <br>\n2) PDF curve almost looks like Log-normal distribution and PDF curve of approved projects is slightly ahead when compared to reject project hence we can say chances of accepting the projects are more when essays have a greater number of words.<br>\n3) Chance of rejecting project is high when easy have 200 words because peak for rejecting project is higher than approving project at 200.__\n","449713ba":"<h2> 2.1 TSNE with `BOW` encoding of `project_title` feature <\/h2>","1a177503":"<ol> \n    <li> In the above cells we have plotted and analyzed many features. Please observe the plots and write the observations in markdown cells below every plot.<\/li>\n    <li> EDA: Please complete the analysis of the feature: teacher_number_of_previously_posted_projects<\/li>\n    <li>\n        <ul>Build the data matrix using these features \n            <li>school_state : categorical data (one hot encoding)<\/li>\n            <li>clean_categories : categorical data (one hot encoding)<\/li>\n            <li>clean_subcategories : categorical data (one hot encoding)<\/li>\n            <li>teacher_prefix : categorical data (one hot encoding)<\/li>\n            <li>project_grade_category : categorical data (one hot encoding)<\/li>\n            <li>project_title : text data (BOW, TFIDF, AVG W2V, TFIDF W2V)<\/li>\n            <li>price : numerical<\/li>\n            <li>teacher_number_of_previously_posted_projects : numerical<\/li>\n         <\/ul>\n    <\/li>\n    <li> Now, plot FOUR t-SNE plots with each of these feature sets.\n        <ol>\n            <li>categorical, numerical features + project_title(BOW)<\/li>\n            <li>categorical, numerical features + project_title(TFIDF)<\/li>\n            <li>categorical, numerical features + project_title(AVG W2V)<\/li>\n            <li>categorical, numerical features + project_title(TFIDF W2V)<\/li>\n        <\/ol>\n    <\/li>\n    <li> Concatenate all the features and Apply TNSE on the final data matrix <\/li>\n    <li> <font color='blue'>Note 1: The TSNE accepts only dense matrices<\/font><\/li>\n    <li> <font color='blue'>Note 2: Consider only 5k to 6k data points to avoid memory issues. If you run into memory error issues, reduce the number of data points but clearly state the number of datat-poins you are using<\/font><\/li>\n<\/ol>","7d48f1c5":"<h3><font color='red'>1.2.10 Univariate Analysis: project_resource_summary<\/font><\/h3>","207d89bb":"### 1.2.4 Univariate Analysis: project_subject_categories","320e31a2":"#### 1.4.2.1 Bag of words","e1ca6121":"# 1.2 Data Analysis","e894dbd5":"__SUMMARY:<br>\n1) Cannot get much information from box plot and PDF curves. <br>\n2) This feature will not contribute to make decision because PDF curves overlap on each other.\n__","8d783ad3":"### 1.2.3 Univariate Analysis: project_grade_category","04cdd408":"# DonorsChoose","1f459a6d":"<h2> 2.4 TSNE with all feature <\/h2>","fe3a504a":"## About the DonorsChoose Data Set\n\nThe `train.csv` data set provided by DonorsChoose contains the following features:\n\nFeature | Description \n----------|---------------\n**`project_id`** | A unique identifier for the proposed project. **Example:** `p036502`   \n**`project_title`**    | Title of the project. **Examples:**<br><ul><li><code>Art Will Make You Happy!<\/code><\/li><li><code>First Grade Fun<\/code><\/li><\/ul> \n**`project_grade_category`** | Grade level of students for which the project is targeted. One of the following enumerated values: <br\/><ul><li><code>Grades PreK-2<\/code><\/li><li><code>Grades 3-5<\/code><\/li><li><code>Grades 6-8<\/code><\/li><li><code>Grades 9-12<\/code><\/li><\/ul>  \n **`project_subject_categories`** | One or more (comma-separated) subject categories for the project from the following enumerated list of values:  <br\/><ul><li><code>Applied Learning<\/code><\/li><li><code>Care &amp; Hunger<\/code><\/li><li><code>Health &amp; Sports<\/code><\/li><li><code>History &amp; Civics<\/code><\/li><li><code>Literacy &amp; Language<\/code><\/li><li><code>Math &amp; Science<\/code><\/li><li><code>Music &amp; The Arts<\/code><\/li><li><code>Special Needs<\/code><\/li><li><code>Warmth<\/code><\/li><\/ul><br\/> **Examples:** <br\/><ul><li><code>Music &amp; The Arts<\/code><\/li><li><code>Literacy &amp; Language, Math &amp; Science<\/code><\/li>  \n  **`school_state`** | State where school is located ([Two-letter U.S. postal code](https:\/\/en.wikipedia.org\/wiki\/List_of_U.S._state_abbreviations#Postal_codes)). **Example:** `WY`\n**`project_subject_subcategories`** | One or more (comma-separated) subject subcategories for the project. **Examples:** <br\/><ul><li><code>Literacy<\/code><\/li><li><code>Literature &amp; Writing, Social Sciences<\/code><\/li><\/ul> \n**`project_resource_summary`** | An explanation of the resources needed for the project. **Example:** <br\/><ul><li><code>My students need hands on literacy materials to manage sensory needs!<\/code<\/li><\/ul> \n**`project_essay_1`**    | First application essay<sup>*<\/sup>  \n**`project_essay_2`**    | Second application essay<sup>*<\/sup> \n**`project_essay_3`**    | Third application essay<sup>*<\/sup> \n**`project_essay_4`**    | Fourth application essay<sup>*<\/sup> \n**`project_submitted_datetime`** | Datetime when project application was submitted. **Example:** `2016-04-28 12:43:56.245`   \n**`teacher_id`** | A unique identifier for the teacher of the proposed project. **Example:** `bdf8baa8fedef6bfeec7ae4ff1c15c56`  \n**`teacher_prefix`** | Teacher's title. One of the following enumerated values: <br\/><ul><li><code>nan<\/code><\/li><li><code>Dr.<\/code><\/li><li><code>Mr.<\/code><\/li><li><code>Mrs.<\/code><\/li><li><code>Ms.<\/code><\/li><li><code>Teacher.<\/code><\/li><\/ul>  \n**`teacher_number_of_previously_posted_projects`** | Number of project applications previously submitted by the same teacher. **Example:** `2` \n\n<sup>*<\/sup> See the section <b>Notes on the Essay Data<\/b> for more details about these features.\n\nAdditionally, the `resources.csv` data set provides more data about the resources required for each project. Each line in this file represents a resource required by a project:\n\nFeature | Description \n----------|---------------\n**`id`** | A `project_id` value from the `train.csv` file.  **Example:** `p036502`   \n**`description`** | Desciption of the resource. **Example:** `Tenor Saxophone Reeds, Box of 25`   \n**`quantity`** | Quantity of the resource required. **Example:** `3`   \n**`price`** | Price of the resource required. **Example:** `9.95`   \n\n**Note:** Many projects require multiple resources. The `id` value corresponds to a `project_id` in train.csv, so you use it as a key to retrieve all resources needed for a project:\n\nThe data set contains the following label (the value you will attempt to predict):\n\nLabel | Description\n----------|---------------\n`project_is_approved` | A binary flag indicating whether DonorsChoose approved the project. A value of `0` indicates the project was not approved, and a value of `1` indicates the project was approved.","583644b4":"__ SUMMARY:<br>\n1)  Cannot get much information from box plot and PDF curves. <br>\n2) PDF curve of approved projects is slightly ahead when compared to reject project hence we can say chances of accepting the projects are more when teacher is already requested for many times<br>\n3) If project proposals come many times from same teacher chances accepting proposal is high.__\n","51e6ee46":"we are going to consider\n\n       - school_state : categorical data\n       - clean_categories : categorical data\n       - clean_subcategories : categorical data\n       - project_grade_category : categorical data\n       - teacher_prefix : categorical data\n       \n       - project_title : text data\n       - essays : text data\n       - project_resource_summary: text data\n       \n       - quantity : numerical\n       - teacher_number_of_previously_posted_projects : numerical\n       - price : numerical","3018b826":"<h4><font color='red'> 1.4.2.2 Bag of Words on `project_title`<\/font><\/h4>","06ac0107":"### 1.4.4 Merging all the above features","9a7f9c99":"### 1.4.3 Vectorizing Numerical features","af9d39fb":"# 1.2.1 Univariate Analysis: School State","3eef0a52":"## 1.1 Reading Data","96beb6a6":"### 1.3.1 Essay Text","572eae1e":"__SUMMARY:<br>\n1)\tLots of variation in number of project submission when we consider grades.<br>\n2)\tWe can see that as grade increases , number of project submission decreases because when grade increases students must focus more on studies. <br>\n3) Every grade has greater than 80% success rate in approval.\n__\n","7f2759ad":"__SUMMARY:<br>\n1)Every state has greater than 80% success rate in project approval.<br>\n2)Distribution of bar plot almost most looks like power law distribution hence we can say that 80% of the project proposals came from 20%(10-states of USA) of the USA states.<br>\n3)Lots of variation in number of project proposal in CA When compare to others states.\n__"}}