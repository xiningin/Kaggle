{"cell_type":{"9d7e1240":"code","db5a183d":"code","a2516f39":"code","938ff07e":"code","2b52cad8":"code","dade400b":"code","f80ce52b":"code","113f17d7":"code","098188a1":"code","91463524":"markdown","b7bbfb4d":"markdown","05aec41d":"markdown","6fb9507d":"markdown","cc298db6":"markdown","c31044f8":"markdown","548c7e3f":"markdown","0fce7ef6":"markdown"},"source":{"9d7e1240":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt","db5a183d":"#1D numpy array\nlist1 = [1,2,3,4]\narray = np.array(list)\nprint(array)\n\n#2d numpy array\nlist2 = [2,3,4,5]\narray2d = np.array([list1, list2])\nprint (array2d)\n\nprint ('the shape of the array is : \\n', array.shape)\nprint ('the shape of the array2d is : \\n', array2d.shape)\n\nprint ('the datatype of the array is :', array.dtype)\nprint ('the datatype of the array2d is : \\n', array2d.dtype)\n\nzeroArray = np.zeros(5)\nprint('1D zero array \\n',zeroArray)\n\nzeroArray2d = np.zeros([5,5])\nprint('2d zero array \\n',zeroArray2d)\n\none_array = np.ones(5)\nprint ('1d unit array \\n',one_array)\n\none_array2d = np.ones([5,5])\nprint('2d unit array \\n',one_array2d)\n\nemp_array = np.empty(5)\nprint('1d null array \\n', emp_array)\n\nemp_array2d = np.empty([5,5])\nprint('2d null array \\n', emp_array2d)\n\n#eye function\nidenty_array = np.eye(5)\nprint('identity matrix \\n', identy_array)\n\n#arange\n#arthematic operation.\nap_array = np.arange(0,50,2)\nprint('arthematic progression numbers \\n', ap_array)","a2516f39":"#numpy scalar functions\n#scalar op\n#Scalar mul *\n#expo Mul **\n#sclar sub -\n#sclar div \/\n\nimport numpy as np\n\n\n#scalar array mul\nar1 = np.array([[1,2,3],[3,4,5]])\nprint('ar1  ++++++++++++++++++++++')\nprint (ar1)\nar2 = np.array([[5,4,3],[3,2,1]])\nprint('ar2  ++++++++++++++++++++++')\nprint(ar2)\n\nar3 = ar1 * ar1\nar4 = ar2 * ar2\nar5 = ar1 * ar2\nar6 = ar3 * ar4\nar7 = ar5 * ar6\nprint('ar3  ++++++++++++++++++++++')\nprint(ar3)\nprint('ar4  ++++++++++++++++++++++')\nprint(ar4)\nprint('ar5  ++++++++++++++++++++++')\nprint(ar5)\nprint('ar6  ++++++++++++++++++++++')\nprint(ar6)\nprint('ar7  ++++++++++++++++++++++')\nprint(ar7)\n\n#expo mul\nprint('square')\nar8 = ar1 ** 2\nprint(ar8)\nprint('cube')\nar9 = ar1 ** 3\nprint(ar9)\n\n#scalar sub\n\nar10 = ar8 - ar9\nprint(ar10)\n\n#scalar div\nprint('with number')\nar12 = 2\/ar5\nprint(ar12)\nprint('two arrays')\nar11 = ar8\/ar9\nprint(ar11)","938ff07e":"#indexes in numpy\n\nimport numpy as np\n\narr = np.arange(100,160,2)\nprint (arr)\n\n#intro to indexes \n#indexes are used to locate the value in a array\n#example\n#arr[0] means it will print the zeroth number in the given array\n#i.e 100\n\nprint('element 1')\nprint(arr[0])\nprint('element 2')\nprint(arr[1])\nprint('element 3')\nprint(arr[2])\nprint('element 4')\nprint(arr[3])\nprint('element 5')\nprint(arr[4])\n\n#slicing of array indexes arr[start:stop:step]\nprint(arr[0:5:2])\n\n#updating array using slice\narr[0:5:3]=0\nprint (arr)\n\n#slicing memory\narr2 = arr[4:10]\nprint(arr2)\narr2[:]=1\nprint(arr2)\n\nprint(arr)\n\n#copy fucntion > new \n\narr3 = arr.copy()\nprint(arr3)\narr3[:]=0\nprint(arr3)\nprint(arr)","2b52cad8":"import numpy as np\n\narr2d = np.array([[1,2,3],[2,3,4],[4,5,6]])\nprint(arr2d)\n\nprint(arr2d[0])\nprint(arr2d[1])\n\n#accessing the particualr element\nprint(arr2d[1][1])\n\nprint(arr2d[1][2])\n\nprint (arr2d[2][2])\n\n#slicing 2d array\nslice1 = arr2d[0:1,0:2]\nprint(slice1)\n\nslice2 = arr2d[0:2,0:3]\nprint(slice2)\n\nslice3 = arr2d[:2,:3]\nprint(slice3)\n\nslice4 = arr2d[1:,2:]\nprint(slice4)\n\n#using loops to change index\n\narr_len = arr2d.shape\nprint(arr_len)\nnrows = arr_len[0]\nprint (nrows)\n\nfor i in range(nrows):\n    arr2d[i][i]=i\nprint(arr2d)\n\n\n#accessing rows using list of index values\n\nprint(arr2d[[0,1]])\n\nprint(arr2d[[1,0]])","dade400b":"import numpy as np\n\n#arange function\nA = np.arange(15)\nprint(A)\n\nB = np.arange(5,10)\nprint(B)\n\nC = np.arange(5,10,2)\nprint(C)\n\n#sqrt()\n\nD = np.sqrt(A)\nprint(D)\n\n#expo fun\nE = np.exp(A)\nprint(E)\n\n#random fun\nF = np.random.randn(5)\nprint(F)\n\nG = np.random.randn(5,5)\nprint(G)\n\n#add function\nprint(A)\nprint(D)\nH = np.add(A,D)\nprint(H)\n\n#max function\n\nN = np.array([1,3,5,6,9])\nN1 = np.array([4,5,6,7,10])\nH = np.maximum(N,N1)\nprint(H)","f80ce52b":"#saving and loading array\n\n#why do we need to save array\n#when we  are complex projects there are no. of problmes occur\n#for instance we have 8gb ram in out pc, and sometimes if the pc\n#if the program demands, more but pc cant give the memory there will be\n#memory block\n\nimport numpy as np\n\narr = np.arange(10)\nprint(arr)\n\nnp.save('saved_array', arr)\n\nload_arr1 = np.load('saved_array.npy')\nprint(load_arr1)\n\n# saving multiple array\n\narr2=np.arange(25)\narr3=np.arange(5)\n\nnp.savez('saved_archive.npz', x=arr2, y=arr3)\n\n#loading multiple array\n\nload_npz = np.load('saved_archive.npz')\nprint(load_npz['x'])\nprint(load_npz['y'])\n\n#saving array as text file\n\nnp.savetxt('myarray.txt', arr2, delimiter=',')\nloadtxt=np.loadtxt('myarray.txt', delimiter=',')\nprint(loadtxt)\n\n#delimiter: array is a sequence of values right so in order to spearate, the values\n#we will use delimiter.\n\n!cat myarray.txt","113f17d7":"!pip3 install matplotlib\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nx = np.arange(3)\ny = np.arange(4,8)\nprint(x)\nprint(y)\n\nx2, y2 =np.meshgrid(x,y)\n\nprint (x2)\n\nprint(y2)\n\nz = 2*x2 + 3*y2\nprint (z)\n\nplt.imshow(z)\nplt.title(\"plot of 2x+3y\")\nplt.colorbar()\n\n#cos function\nz2 = np.cos(x2)+np.cos(y2)\nprint(z2)\nplt.imshow(z2)\nplt.title(\"cos function for x2 and y2\")\nplt.colorbar()\nplt.savefig('cosplt.png')\n\n","098188a1":"import numpy as np\n\nx = np.array([100,400,-50,-40]) #each elemet a\ny = np.array([10,14,23,30])# each elem b\ncondition = np.array([True, True, False, False])# each element cond\n\nz = [a if cond else b for a,cond,b in zip(x, condition, y)]\nprint(z)\n\n#Disadvantages\n#using np.where(condition, values for true, values for false)\n\nz2=np.where(condition,x,y)\nprint(z2)\n\nz3 = np.where(x>0, 1,x)\nprint(z3)\n\n#standard function\nprint(x.sum())\n\nx2 = np.array([[1,2],[3,4]])\nprint(x2)\nprint('------------------------------')\nprint(x2.sum(0))\n\nprint(x.mean())\nprint(x.std())\nprint(x.var())\n\n#logical AND, OR operations - any(), all()\n\ncond2 = np.array([True, False, True])\n#OR\nprint(cond2.any())\n#AND\nprint(cond2.all())\n\n#sort funcition\n\nunsorted = np.array([1,5,6,12,63,10,24,673,346])\nprint (unsorted)\nunsorted.sort()\nprint(unsorted)\n\n#unique\nar2 = np.array(['liquid','solid','gas','liquid','solid','gas','liquid','solid','gas'])\nprint(np.unique(ar2))\n\n#inid() list of elements are in aray or not\n\ninid = np.in1d(['solid','gas','earth'], ar2)\n\nprint(inid)","91463524":"# # #**Numpy scalar operation** : \nits just a basic math operations which can perform on each array element, bellow are the examples\nlike \n* multipilcation\n* exponetial multiplication\n* substraction\n* division","b7bbfb4d":"numpy 104","05aec41d":"numpy 107","6fb9507d":"> numpy 106","cc298db6":"numpy 108","c31044f8":"Numpy:\nNumPy, which stands for Numerical Python, is a library consisting of multidimensional array objects and a collection of routines for processing those arrays. Using NumPy, mathematical and logical operations on arrays can be performed.","548c7e3f":"numpy 105","0fce7ef6":"# **Indexes in numpy**\n\nindexes are used to locate the value in a array\nexample\narr[0] means it will print the zeroth number in the given array\ni.e 100\n\n# # # # **Slicing numpy**"}}