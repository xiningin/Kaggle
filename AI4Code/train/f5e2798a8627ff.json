{"cell_type":{"0bce5182":"code","3bb55295":"code","a81844f6":"code","b629a254":"code","f3f8295d":"markdown","cc5f994a":"markdown","705d3475":"markdown"},"source":{"0bce5182":"%matplotlib inline\n#%matplotlib widget\n\n\nimport matplotlib.pyplot as plt\nimport math","3bb55295":"LETTERS = [\n    '1',\n    '2',\n    '3',\n    '4',\n    '5',\n    '6',\n    '7'\n]\nN = len(LETTERS)\nINF = 999\n\nclass Node:\n    def __init__(self, name):\n        self.name = name\n\n\ndef distance(p, q):\n    weight = INF\n    for n in range(N+1):\n        if p[n:] == q[:N-n]:\n            weight = n\n            break\n    return weight\n\n\ndef is_perm(s, alphabet):\n    y = True\n    for k in alphabet:\n        y = y & (k in s)\n        if not y: break\n    return y\n\n\ndef to_perm_list(s, alphabet):\n    perms = []\n    for i, _ in enumerate(s):\n        perm = s[i:i + len(alphabet)]\n        if is_perm(perm, alphabet) and perm not in perms:\n            perms.append(perm)\n    return perms\n\n\ndef draw_list(data, cx, cy, r, level):\n    dt = (2*math.pi)\/ len(data)\n    angle = 0\n    for d in data:\n        angle += dt\n        if d.name.startswith('12'):\n            color = 'b'\n        else:\n            color = 'r'\n        ncx = cx+r*math.cos(angle)\n        ncy = cy+r*math.sin(angle)\n        circle = plt.Circle((ncx, ncy), r\/len(data), color=color)\n        ax.add_patch(circle)\n        #plt.text(ncx, ncy, d.name[:2], fontsize=7)\n\n\ndef draw(data, cx, cy, r, level):\n    dt = (2 * math.pi) \/ len(data)\n    angle = 0\n    for d in data:\n        if len(data) > 1:\n            ncx = cx+r*math.cos(angle)\n            ncy = cy+r*math.sin(angle)\n            angle += dt\n        else:\n            ncx = cx\n            ncy = cy\n        nr = r\/(2*len(data))\n        circle = plt.Circle((ncx, ncy), nr, color='green', fill=False)\n        ax.add_patch(circle)\n        if isinstance(d[0], Node):\n            draw_list(d, ncx, ncy, nr, level+1)\n        else:\n            draw(d, ncx, ncy, nr, level+1)\n\n\ndef draw_connections(data, cx, cy, r):\n    def collect(items, cxx, cyy, rr, points):\n        dt = (2 * math.pi) \/ len(items)\n        angle = 0\n        for d in items:\n            if len(items) > 1:\n                ncx = cxx + rr * math.cos(angle)\n                ncy = cyy + rr * math.sin(angle)\n                angle += dt\n            else:\n                ncx = cxx\n                ncy = cyy\n            nr = rr \/ (2*len(items))\n            if isinstance(d[0], Node):\n                points.append((ncx, ncy))\n            else:\n                collect(d, ncx, ncy, nr, points)\n    lines = []\n    collect(data, cx, cy, r, lines)\n    plt.plot([x for x,_ in lines], [y for _,y in lines], color='orange')\n\n\ndef split(s):\n    perms = to_perm_list(s, LETTERS)\n    all_splits = split_loop(perms, len(LETTERS)-1)\n    return all_splits\n\n\ndef split_loop(perms, k):\n    all_splits = []\n    current_split = []\n    for i in range(len(perms)-1):\n        d = distance(perms[i], perms[i+1])\n        current_split.append(perms[i])\n        if d == k:\n            all_splits.append(current_split)\n            current_split = []\n\n    current_split.append(perms[-1])\n    all_splits.append(current_split)\n    if k > 2:\n        all_splits = [split_loop(s, k-1) for s in all_splits]\n\n    return all_splits\n\n\ndef convert(splits):\n    result = []\n    for s in splits:\n        if isinstance(s[0], str):\n            result.append(Node(''.join(s)))\n        else:\n            result.append(convert(s))\n    return result","a81844f6":"bestb629a254":"fig, ax = plt.subplots()\nsplits = split(best)\n\ndata = convert(splits)\ndraw(data, 0.5, 0.5, 0.25, 0)\ndraw_connections(data, 0.5, 0.5, 0.25)\nplt.show()","f3f8295d":"Simple interactive visualization of a known N=7 solution, to get a better understanding of the symmetries.  \nThe layout was inspired from Greg Egan's visualization https:\/\/www.gregegan.net\/SCIENCE\/Superpermutations\/Superpermutations.html","cc5f994a":"Red circles represent normal permutations, while blue ones represent the mandatory ones.  \nEach cluster is highlighted by a green circle.  \nThe orange lines represent the jumps from one cluster to another.","705d3475":"To allow rendering, matplotlib is set to *inline*, but if you want an interactive graph, you should switch to *widget*"}}