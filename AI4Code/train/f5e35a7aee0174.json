{"cell_type":{"f4c1c771":"code","14149870":"code","bedef599":"code","d82fc1aa":"code","f43bad0d":"code","48ce033d":"code","2ed6d4f6":"code","5fcfee22":"code","0c19f851":"code","f606216e":"code","6182ae66":"code","04a3e96a":"markdown","c4c2b8fd":"markdown","77a40054":"markdown","90037e41":"markdown","ec9ee829":"markdown","9e382823":"markdown","d281b463":"markdown","54e848c0":"markdown","770cde41":"markdown","f847848d":"markdown","5313dd00":"markdown","b1eaf8d6":"markdown"},"source":{"f4c1c771":"!pip install scikit-gstat","14149870":"import numpy as np\nimport pandas as pd\n\n# scikit-gstat = skgstat\nimport skgstat as skg\nfrom skgstat import Variogram, OrdinaryKriging\n\n# visualization\nimport matplotlib.pyplot as plt\nplt.style.use('ggplot')","bedef599":"# Creation the dataset\nnp.random.seed(8)\ndf = pd.DataFrame(np.random.randint(10, 100,size=(100, 3)), columns=list('xyz'))\ndf","d82fc1aa":"# Dataset visualization \nfig = plt.figure(figsize=(8, 8))\nplt.scatter(df.x, df.y, 50, c=df.z, cmap='plasma')","f43bad0d":"%%time\n# Calculation variogram\nV = skg.Variogram(coordinates=df[['x', 'y']].values, values=df['z'].values)\nprint(V)","48ce033d":"# Variogram visualization\nV.plot()\nplt.close","2ed6d4f6":"# Visualization of the variogram with others parameters\nV.n_lags = 10\nV.maxlag = 50\nV.bin_func = 'kmeans'\nV.plot()\nplt.close()","5fcfee22":"# Visualization of the variograms for different models\nfig, _a = plt.subplots(2,3, figsize=(18, 10), sharex=True, sharey=True)\naxes = _a.flatten()\nfor i, model in enumerate(('spherical', 'exponential', 'gaussian', 'matern', 'stable', 'cubic')):\n    V.model = model\n    V.plot(axes=axes[i], hist=False, show=False)\n    axes[i].set_title('Model: %s; RMSE: %.2f' % (model, V.rmse))","0c19f851":"V.model = 'stable'\nok = OrdinaryKriging(V, min_points=3, max_points=5, mode='estimate')\nxx, yy = np.mgrid[0:99:100j, 0:99:100j]\nfield = ok.transform(xx.flatten(), yy.flatten()).reshape(xx.shape)\ns2 = ok.sigma.reshape(xx.shape)\n\nfig, axes = plt.subplots(1, 2, figsize=(16, 8))\nart = axes[0].matshow(field.T, origin='lower', cmap='plasma')\naxes[0].set_title('Interpolation')\naxes[0].plot(df.x, df.y, '+k')\naxes[0].set_xlim((0,100))\naxes[0].set_ylim((0,100))\nplt.colorbar(art, ax=axes[0])\nart = axes[1].matshow(s2.T, origin='lower', cmap='YlGn_r')\naxes[1].set_title('Kriging Error')\nplt.colorbar(art, ax=axes[1])\naxes[1].plot(df.x, df.y, '+w')\naxes[1].set_xlim((0,100))\naxes[1].set_ylim((0,100));","f606216e":"def interpolate(V, ax):\n    # Thanks to https:\/\/scikit-gstat.readthedocs.io\/en\/latest\/tutorials\/02_variogram_models.html\n    \n    xx, yy = np.mgrid[0:99:100j, 0:99:100j]\n    ok = OrdinaryKriging(V, min_points=5, max_points=15, mode='exact')\n    field = ok.transform(xx.flatten(), yy.flatten()).reshape(xx.shape)\n    art = ax.matshow(field, origin='lower', cmap='plasma')\n    ax.set_title('%s model' % V.model.__name__)\n    plt.colorbar(art, ax=ax)\n    return field","6182ae66":"fields = []\nfig, _a = plt.subplots(2,3, figsize=(18, 12), sharex=True, sharey=True)\naxes = _a.flatten()\nfor i, model in enumerate(('spherical', 'exponential', 'gaussian', 'matern', 'stable', 'cubic')):\n    V.model = model\n    fields.append(interpolate(V, axes[i]))","04a3e96a":"## 5. Visualization of the result of geostatistical data interpolation <a class=\"anchor\" id=\"5\"><\/a>\n\n[Back to Table of Contents](#0.1)","c4c2b8fd":"## 1. About SciKit-GStat and Geostatistical analysis <a class=\"anchor\" id=\"1\"><\/a>\n\n[Back to Table of Contents](#0.1)","77a40054":"## 4. Variogram building <a class=\"anchor\" id=\"4\"><\/a>\n\n[Back to Table of Contents](#0.1)","90037e41":"To increase the efficiency of the analysis, it is necessary to set the values not randomly, but on the basis of a certain mathematic function, adding noise so that the method can find existing patterns.","ec9ee829":"## 2. Import libraries <a class=\"anchor\" id=\"2\"><\/a>\n\n[Back to Table of Contents](#0.1)","9e382823":"### Geostatistical analysis with SciKit-GStat from the [Tutorial](https:\/\/scikit-gstat.readthedocs.io\/en\/latest\/tutorials\/tutorials.html) from \n\n**Mirko M\u00e4licke, Egil M\u00f6ller, Helge David Schneider, & Sebastian M\u00fcller. (2021, May 28).**\n\n    mmaelicke\/scikit-gstat: A scipy flavoured geostatistical variogram analysis toolbox (Version v0.6.0). Zenodo. \n\nhttp:\/\/doi.org\/10.5281\/zenodo.4835779","d281b463":"<a class=\"anchor\" id=\"0\"><\/a>\n# Example of Geostatistical analysis with SciKit-GStat","54e848c0":"The basic idea of kriging is to predict the value of a function at a given point by computing a weighted average of the known values of the function in the neighborhood of the point ([Wikipedia](https:\/\/en.wikipedia.org\/wiki\/Kriging)). \n\nThe main application for scikit-gstat is variogram analysis and Kriging (Geostatistical analysis). The [Tutorial](https:\/\/scikit-gstat.readthedocs.io\/en\/latest\/tutorials\/01_getting_started.html) will guide you through the most basic functionality of scikit-gstat. There are other tutorials that will explain specific methods or attributes in scikit-gstat in more detail.","770cde41":"<a class=\"anchor\" id=\"0.1\"><\/a>\n\n## Table of Contents\n\n1. [About SciKit-GStat and Geostatistical analysis](#1)\n1. [Import libraries](#2)\n1. [Creation dataset](#3)\n1. [Variogram building](#4)\n1. [Visualization of the result of geostatistical data interpolation](#5)","f847848d":"I hope you find this notebook useful and enjoyable.\n\nYour comments and feedback are most welcome.\n\n[Go to Top](#0)","5313dd00":"## 3. Creation dataset <a class=\"anchor\" id=\"3\"><\/a>\n\n[Back to Table of Contents](#0.1)","b1eaf8d6":"From the Kriging error map, you can see how the interpolation is very certain close to the observation points, but rather high in areas with only little coverage.\n\nModels \"matern\" and \"stable\" work best with a very different data."}}