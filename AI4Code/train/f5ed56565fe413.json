{"cell_type":{"2e652c1e":"code","4aa19ab1":"code","d57a7ada":"code","c2da2d82":"code","fe6f7a07":"code","6819f6be":"code","c97a8526":"code","08985073":"code","71920361":"code","07142776":"code","d94c271f":"code","f3ea8d3f":"code","eb999c42":"code","df5dc8c8":"code","a37bb630":"code","32999968":"code","c16e1849":"code","b9375293":"code","1cc08f17":"markdown","40c6a133":"markdown","8e5d12f7":"markdown","15a0b331":"markdown","bb339c41":"markdown","697c51b3":"markdown"},"source":{"2e652c1e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","4aa19ab1":"df = pd.read_csv('..\/input\/heart.csv')\ndf.head()","d57a7ada":"import matplotlib.pyplot as plt\nimport matplotlib.pyplot as plt\nfrom plotly import tools\nimport plotly.plotly as py\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\nfrom IPython.display import HTML, Image\n\nlabels = [\"age\", \"resting blood pressure\", \"serum cholestoral\", \"maximum heart rate achieved\"]\nfig = ff.create_distplot([df.age, df.trestbps, df.chol, df.thalach], labels, bin_size=0.5)\nfig['layout'].update(title=\"dataset distribution\")\niplot(fig, filename=\"Distributions\")","c2da2d82":"df.columns\n#labels = [\"age\", \"resting blood pressure\", \"serum cholestoral\", \"maximum heart rate achieved\"]\n#fig = ff.create_distplot([df.age, df.trestbps, df.chol, df.thalach], labels, bin_size=0.5)\nt0 = go.Box(y=df.age, name=\"Ages\")\nt1 = go.Box(y=df.trestbps, name=\"Bld. pressure\")\nt2 = go.Box(y=df.chol, name=\"Cholestoral\")\nt3 = go.Box(y=df.thalach, name=\"Max heart rate\")\ndata=[t0,t1,t2,t3]\n\nfig = {\n    'data' : data, \n    'layout' : {\n        'title' : \"dataset stats\",\n        'yaxis' : {\n            'zeroline' : False\n        }\n    }\n}\n\n\niplot(fig)","fe6f7a07":"heartDisease = df[df.target == 1] \nnoHeartDisease = df[df.target == 0]\n\nt0 = {\n    'type' : 'violin',\n    'x' : max(heartDisease.age),\n    'y' : heartDisease.age.values,\n    'name' : 'age distribution of patients with heart disease',\n    'box' : {\n        'visible' : True\n    },\n    \"meanline\" : {\n        'visible' : True\n    }\n}\n\nt1 = {\n    'type' : 'violin',\n    'x' : max(noHeartDisease.age),\n    'y' : noHeartDisease.age.values,\n    'name' : 'age distribution of patients without heart disease',\n    'box' : {\n        'visible' : True\n    },\n    \"meanline\" : {\n        'visible' : True\n    }\n}\n\ndata = [t0,t1]\n\nfig = {\n    'data' : data, \n    'layout' : {\n        'title' : 'age distribution',\n        'yaxis' : {\n            'zeroline' : False\n        }\n    }\n}\n\niplot(fig, filename=\"ages\", validate=False)","6819f6be":"older = heartDisease[[\"age\", \"trestbps\", \"chol\", \"thalach\"]].sort_values(by='age', ascending=False).iloc[0,:]\nyounger = heartDisease[[\"age\", \"trestbps\", \"chol\", \"thalach\"]].sort_values(by='age', ascending=True).iloc[0,:]\n\nw_older = noHeartDisease[[\"age\", \"trestbps\", \"chol\", \"thalach\"]].sort_values(by='age', ascending=False).iloc[0,:]\nw_younger = noHeartDisease[[\"age\", \"trestbps\", \"chol\", \"thalach\"]].sort_values(by='age', ascending=True).iloc[0,:]\n\nprint(\"with heart disease:\\n---older\\n{}\\n---younger\\n{}\\n\\n\".format(older, younger))\nprint(\"without heart disease:\\n---older\\n{}\\n---younger\\n{}\".format(w_older, w_younger))","c97a8526":"\n#heartDisease = df[df.target == 1] \nlabels = [\"age\", \"resting blood pressure\", \"cholestoral\", \"maximum heart rate achieved\"]\n\n#to_radar = df[[\"age\", \"trestbps\", \"chol\", \"thalach\"]]\nolder_with_heart_disease = go.Scatterpolar(\n    r = older,\n    theta = labels,\n    fill = \"toself\",\n    name = \"older with heart disease\"\n)\n\nolder_without_heart_disease = go.Scatterpolar(\n    r = w_older,\n    theta = labels,\n    fill = \"toself\",\n    name = \"older without heart disease\"\n)\n\ndata = [older_with_heart_disease, older_without_heart_disease]\n\nlayout = go.Layout(\n    polar = dict(\n        radialaxis = dict(\n            visible = True,\n            range = [0, 300]\n        )\n    ),\n    showlegend = True,\n    title = \"older people\"\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig, filename=\"Stats\")","08985073":"\n#heartDisease = df[df.target == 1] \nlabels = [\"age\", \"resting blood pressure\", \"cholestoral\", \"maximum heart rate achieved\"]\n\n#to_radar = df[[\"age\", \"trestbps\", \"chol\", \"thalach\"]]\nyounger_with_heart_disease = go.Scatterpolar(\n    r = younger,\n    theta = labels,\n    fill = \"toself\",\n    name = \"younger with heart disease\"\n)\n\nyounger_without_heart_disease = go.Scatterpolar(\n    r = w_younger,\n    theta = labels,\n    fill = \"toself\",\n    name = \"younger without heart disease\"\n)\n\ndata = [younger_with_heart_disease, younger_without_heart_disease]\n\nlayout = go.Layout(\n    polar = dict(\n        radialaxis = dict(\n            visible = True,\n            range = [0, 300]\n        )\n    ),\n    showlegend = True,\n    title = \"younger people\"\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig, filename=\"Stats\")","71920361":"#age\n#sex\n#cpchest -> pain type\n#trestbpsresting -> blood pressure\n#cholserum -> cholestoral\n#fbs -> (fasting blood sugar > 120 mg\/dl) (1 = true; 0 = false)\n#restecgresting -> electrocardiographic results\n#thalachmaximum -> heart rate achieved\n#exangexercise -> induced angina (1 = yes; 0 = no)\n#oldpeakST -> depression induced by exercise relative to rest\n#slopethe -> slope of the peak exercise ST segment\n#ca -> number of major vessels (0-3) colored by flourosopy\n#thal -> 3 = normal; 6 = fixed defect; 7 = reversable defect\n#target -> 1 or 0\n#for c in heartDisease.columns\ntitles =    [\"pain type\",\n            \"blood pressure\",\n            \"cholestoral\",\n            \"fasting blood sugar > 120 mg\/dl\",\n            \"electrocardiographic results\",\n            \"heart rate achieved\",\n            \"induced angina\",\n            \"depression induced by exercise relative to rest\",\n            \"slope of the peak exercise ST segment\",\n            \"number of major vessels\",\n            \"3 = normal; 6 = fixed defect; 7 = reversable defect\"]\n\nprint(\"Features Overview\")\nfor c, title in zip(heartDisease.columns[2:-1], titles):\n    #plt.title(\"RMS\")\n    #x = np.arange(0,epochs)\n    #plt.plot(x,train_loss_RMS,label = \"train\")\n    #plt.plot(x,test_loss_RMS,label = \"test\")\n    #plt.xlabel(\"epochs\")\n    #plt.ylabel(\"loss\")\n    #plt.legend()\n    #plt.show()\n    plt.title(str(title))\n    plt.hist(heartDisease[c].value_counts(), alpha=0.75, label=\"with\")\n    plt.hist(noHeartDisease[c].value_counts(), alpha=0.75, label=\"without\")\n    plt.legend()\n    plt.show()","07142776":"train = df.sample(220)\ntest = df.sample(100)\n\nx = train.iloc[:,:-1].values\ny = train.iloc[:,-1:].values\n\nx_train = x[:-100]\ny_train = y[:-100]\n\nx = test.iloc[:,:-1].values\ny = test.iloc[:,-1:].values\n\nx_test = x[-100:]\ny_test = y[-100:]\n\nprint(\"train shapes:\\nx {}\\ny {}\\n\".format(x_train.shape, y_train.shape))\nprint(\"test shapes:\\nx {}\\ny {}\\n\".format(x_test.shape, y_test.shape))","d94c271f":"import torch\nimport torchvision\n\nx_train, y_train = torch.Tensor(x_train), torch.Tensor(y_train)\nx_test, y_test = torch.Tensor(x_test), torch.Tensor(y_test)\n\nprint(x_train.type())\nprint(y_train.type())\nprint(x_test.type())\nprint(y_test.type())","f3ea8d3f":"class Net(torch.nn.Module):\n    def __init__(self):\n        super(Net, self).__init__()\n        self.fc1 = torch.nn.Linear(13, 128)\n        self.fc2 = torch.nn.Linear(128, 64)\n        self.fc3 = torch.nn.Linear(64, 1)\n        self.activation = torch.nn.Sigmoid()\n    def forward(self, x):\n        x = self.activation(self.fc1(x))\n        x = self.activation(self.fc2(x))\n        x = self.activation(self.fc3(x))\n        return x","eb999c42":"model = Net()\nprint(model)","df5dc8c8":"# Loss and Optimizer\noptimizer = torch.optim.Adam(model.parameters(), lr=0.001)\nloss_fn = torch.nn.BCELoss()\nprint(optimizer)\nprint(loss_fn)","a37bb630":"for param in model.parameters():\n    param.requires_grad = True","32999968":"def step(x, threshold=0.5):\n    if x >= threshold:\n        return 1\n    else:\n        return 0","c16e1849":"# training the model\nn_epochs = 100\n\nfor epoch in range(n_epochs):\n    loss_per_epoch = 0\n    preds = []\n    model.train()\n    for patient, diagnose in zip(x_train, y_train):\n        optimizer.zero_grad()\n        \n        pred = model(patient)\n        #print(pred)\n        loss = loss_fn(pred, diagnose)\n        #print(loss)\n        loss.backward(retain_graph=True)\n        optimizer.step()\n        \n        with torch.no_grad():\n            loss_per_epoch += loss.item()\n            preds.append(step(pred.item()))\n            \n    model.eval()\n    acc = sum([1 if a==b else 0 for a,b in zip(preds, y_train)]) \/ len(x_train)\n    loss_per_epoch \/= len(x_train)\n    print(\"Epoch {} Loss {} Acc on Train {}\".format(epoch, loss_per_epoch, acc))","b9375293":"preds_test = []\nfor x, y in zip(x_test, y_test):\n    pred = model(x)\n    preds_test.append(step(pred.item()))\n    \nacc = [1 if a==b else 0 for a,b in zip(preds_test, y_test)]\nprint(\"Accuracy: {}\".format(sum(acc)\/len(y_train)))","1cc08f17":"## handle input data","40c6a133":"# The dataset scope","8e5d12f7":"# Comparing features by agnostic","15a0b331":"# Model architecture","bb339c41":"## simple MLP using pytorch gives us a model with 70% accuracy. There's no much data... So, i think it's ok, no good, just ok.","697c51b3":"# Predicting heart disease"}}