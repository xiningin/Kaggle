{"cell_type":{"8be117bc":"code","bb0948a7":"code","42b72858":"code","8bbb03d7":"code","ba018d79":"code","e57f9518":"code","15414b23":"code","a4d4975d":"code","7e58efe5":"markdown","c3db9020":"markdown","b2f16f45":"markdown","397c1a8a":"markdown","d99fe9ed":"markdown","ef0e93f8":"markdown","16b213ec":"markdown","db2c0d92":"markdown","197883cf":"markdown","736d272d":"markdown","78c8d4b6":"markdown","9af64dc9":"markdown","9b392fef":"markdown","f7fe26a9":"markdown","6f16ae33":"markdown","a27b8099":"markdown","7092159f":"markdown","d0bd31d4":"markdown","3195e088":"markdown","adc6eaa5":"markdown"},"source":{"8be117bc":"# Package for tackling with math problems and datasets\nimport pandas as pd\nimport numpy as np\n\n# Packages for visualization\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport seaborn as sns\nfrom plotly.subplots import make_subplots\nimport plotly.figure_factory as ff\n\n# Packages for change in markdown \nfrom IPython.display import HTML\nfrom colorama import Fore as f\n\n# Packages to preprocess the data\nimport re\n\n# Packages for removing some unwanted outputs(\"warnings\")\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Making a script to change the css and some of the formats in th\nHTML(\"\"\"\n<style>\nh1,h2,h3 {\n\tmargin: 1em 0 0.5em 0;\n\tfont-weight: 600;\n\tfont-family: 'Titillium Web', sans-serif;\n\tposition: relative;  \n\tfont-size: 36px;\n\tline-height: 40px;\n\tpadding: 15px 15px 15px 15%;\n\tcolor: #355681;\n\tbox-shadow: \n\t\tinset 0 0 0 1px rgba(53,86,129, 0.4), \n\t\tinset 0 0 5px rgba(53,86,129, 0.5),\n\t\tinset -285px 0 35px white;\n\tborder-radius: 0 10px 0 10px;\n\tbackground: #fff ;\n    \n}\n\/* Three image containers (use 25% for four, and 50% for two, etc) *\/\n.column {\n  float: left;\n  width: 33.33%;\n  padding: 5px;\n}\n\n\/* Clear floats after image containers *\/\n.row::after {\n  content: \"\";\n  clear: both;\n  display: table;\n}\n\n<\/style>\"\"\")","bb0948a7":"# Making a function to remove the characters and only leave the numbers\ndef remove_characters(tex):\n    if tex==' - ':\n        return -1\n    elif '-' in tex :\n        return float(tex.split('-')[0])\n    else:\n        return float(re.sub(r'[^0-9.]','',tex))\n\n# Making a function to convert price\ndef price_changer(tex):\n    if 'lakh' in tex.lower() :\n        num=remove_characters(tex)\n        num*=100000\n    elif 'crore' in tex.lower():\n        num=remove_characters(tex)\n        num*=10000000\n    return num\n\n# Importing the all cars dataset\ncars=pd.read_csv(\"..\/input\/all-cars-in-india-price-and-specifications\/All_cars_dataset.csv\")\n\n# Dropping the Top_Speed column and the other null values\ncars.drop('Top_Speed',axis=1,inplace=True)\ncars.dropna(inplace=True)\n\n# Preprocess the data\ncars['Company']=cars['Name'].apply(lambda x : x.split(' ')[0])\ncars['EMI']=cars['EMI'].apply(lambda x: int(x.replace(',','')))\ncars['Mileage']=cars['Mileage'].apply(remove_characters)\ncars['Price']=cars['Price'].apply(price_changer)\n\n# Since Manual cars are cheaper and we are taking the price for the cheaper model we will consider\n# that the cars we are picking from Manual\/Automatic in Transmission are Manual\ncars['TRANSMISSION'].replace({'Automatic, Manual ':'Manual ','Manual, Automatic ':'Manual ',\n                              'Manual, Semi - Automatic, Automatic ':'Manual ',\n                             'Manual, Automatic, Semi - Automatic ':'Manual '},inplace=True)\n\n\n# Having a look at the data\ncars.head()","42b72858":"# Making the subplot\nfig=make_subplots(rows=2,cols=2,\n                specs=[[{\"rowspan\":2,\"colspan\":1},{\"type\":\"pie\"}],[None,{}]],\n                subplot_titles=(\"Company vs Price\",\"Company Distribution in Dataset \",\"Company vs Average Emi Price\"))\n\n# Getting the grouped data for the plots\ngroup_mean=cars.groupby('Company').mean()\ngroup_mean_price=group_mean.sort_values(\"Price\").iloc[:10]\ngroup_mean_emi=group_mean.sort_values(\"EMI\").iloc[:10]\nval_counts_company=cars['Company'].value_counts()\ncompany_dic={i:j for i,j in zip(list(val_counts_company.index),val_counts_company.values)}\n\n# Proportion of the top 10 companies in the bar plot in the dataset\nproportion_dic={}\nfor i in group_mean_price.index :\n    proportion_dic[i]=company_dic[i]\nproportion_dic[\"Others\"]=len(cars)-sum(proportion_dic.values())\n\n# Adding the trace for the proportion of the companies in the datset\nfig.add_trace(go.Pie(values=list(proportion_dic.values()),labels=list(proportion_dic.keys())),row=1,col=2)\nfig.update_traces(hoverinfo='label+percent', textinfo='value', textfont_size=20,\n                  marker=dict( line=dict(color='#000000', width=2)))\n# Making the figure Company vs Price\n# Adding the trace for the bar plot\nfig.add_trace(go.Bar(x=group_mean_price.index[:1],y=group_mean_price.Price[:1],marker={'color': \"#9dbeb9\"}),row=1,col=1)\nfig.add_trace(go.Bar(x=group_mean_price.index[1:-1],y=group_mean_price.Price[1:-1],marker={'color': \"#ff8882\"}),row=1,col=1)\nfig.add_trace(go.Bar(x=group_mean_price.index[-1:],y=group_mean_price.Price[-1:],marker={'color': \"#194350\"}),row=1,col=1)\n\n# Adding the trace for the Line plot\nfig.add_trace(go.Line(x=group_mean_emi.index,y=group_mean_emi.EMI),row=2,col=2)\nfig.add_trace(go.Bar(x=group_mean_emi.index,y=group_mean_emi.EMI),row=2,col=2)\n\n# Updating the layout of the plot\n\nfig.update_layout(height=700, showlegend=False,template=\"presentation\")\n\n# Showing the plot\nfig.show()","8bbb03d7":"# Let's make a copy of the original dataframe for now and continue with the further preprocessing\ncars2=cars.copy()\n\n# Preprocessing the data and converting the categorical columns to numerical columns\ncars['ENGINE']=cars['ENGINE'].apply(remove_characters)\ncars['TRANSMISSION']=pd.factorize(cars['TRANSMISSION'])[0]\ncars['FUEL TYPE']=pd.factorize(cars['FUEL TYPE'])[0]\ncars['Wheelbase (mm)']=pd.factorize(cars['Wheelbase (mm)'])[0]\ncars['Displacement (cc)']=pd.factorize(cars['Displacement (cc)'])[0]\ncars['Peak Power']=pd.factorize(cars['Peak Power'])[0]\ncars['Peak Torque']=pd.factorize(cars['Peak Torque'])[0]","ba018d79":"df=cars[[\"Mileage\",\"Price\",\"ENGINE\",\"TRANSMISSION\",\"FUEL TYPE\",\"Wheelbase (mm)\",\"Displacement (cc)\",\"Peak Power\",\"Peak Torque\"]]\ncorr = df.corr()\n\nmask = np.triu(np.ones_like(corr, dtype=np.bool))\ncorr = corr.mask(mask)\nfig = ff.create_annotated_heatmap(\n    z=corr.to_numpy().round(2),\n    x=list(corr.index.values),\n    y=list(corr.columns.values),       \n    xgap=3, ygap=3,\n    zmin=-1, zmax=1,\n    colorscale='fall',\n    colorbar_thickness=30,\n    colorbar_ticklen=3,\n)\nfig.update_layout(title_text='Correlation Matrix (continuous features)',\n                  title_x=0.5,\n                  titlefont={'size': 20},\n                  width=600, height=600,\n                  xaxis_showgrid=False,\n                  xaxis={'side': 'bottom'},\n                  yaxis_showgrid=False,\n                  yaxis_autorange='reversed',                   \n                  paper_bgcolor=None,\n                  template=\"simple_white\"\n                  )\nfig.show()","e57f9518":"# Preprocessing data for the plot\ndf.sort_values(\"Price\",ascending=False,inplace=True)\n\n# Putting the threshold for the mileage to be 12\ndf_above_12=df[df['Mileage']>12]\nautomatic_count=df_above_12['TRANSMISSION'].value_counts()[0]\nmanual_count=df_above_12['TRANSMISSION'].value_counts()[1]\n\n# Making the subplot\nfig2=make_subplots(rows=2,cols=3,\n                specs=[[{\"rowspan\":2,\"colspan\":2,\"type\":'scatter'},None,{\"type\":\"indicator\"}],[None,None,{'type':'indicator'}]],\n                subplot_titles=(\"Price vs Mileage\",))\n\n# Adding the scatter plot\nfig2.add_trace(go.Scatter(x=df[\"Price\"].values,y=df[\"Mileage\"].values,mode='markers',\n                          marker=dict(size=df['ENGINE'].values\/1000000,\n                                     color=df['TRANSMISSION'])),row=1,col=1)\n\n# Adding the Indicator\/Gauge plot for automatic Transmission\nfig2.add_trace(go.Indicator( domain = {'x': [0, 1], 'y': [0, 1]},\n    value = automatic_count,\n    mode = \"gauge+number\",\n    title = {'text': \"Above 12 Mileage Automatic Tranmission Cars\",\"font\":{\"size\":14}},\n    gauge = {'axis': {'range': [None, len(df_above_12)]},\n            'steps': [{'range':[0,automatic_count],'color':'cyan'}]}),row=1,col=3)\n\n# Adding the Indicator\/Gauge plot for the Manual Transmission\nfig2.add_trace(go.Indicator( domain = {'x': [0, 1], 'y': [0, 1]},\n    value = manual_count,\n    mode = \"gauge+number+delta\",\n    title = {'text': \"Above 12 Mileage Manual Tranmission Cars\",\"font\":{\"size\":14}},\n    delta = {'reference':automatic_count},\n    gauge = {'axis': {'range': [None, len(df_above_12)]},\n            'steps': [\n                {'range': [0, manual_count], 'color': 'cyan'},\n                {'range': [manual_count,automatic_count ], 'color': 'white'}],\n            'threshold': {\n                'line': {'color': \"red\", 'width': 4},\n                'thickness': 0.75,\n                'value': automatic_count} \n            \n            }),row=2,col=3)\n\nfig2.update_layout(template='simple_white')\nfig2.show()","15414b23":"print(f.YELLOW,\"Manual Transmission Count in Actual Data Percentage : \",f.CYAN,df['TRANSMISSION'].value_counts()[1]*100\/len(df),f.YELLOW,' %')\nprint(\"Automatic Transmission Count in Actual Data Percentage : \",f.CYAN,df['TRANSMISSION'].value_counts()[0]*100\/len(df),f.YELLOW,' %')\nprint(\"Manual Transmission Count in Data for cars with more than 12 mileage\",f.CYAN,manual_count*100\/len(df_above_12),f.YELLOW,' %')\nprint(\"Automatic Transmission Count in Data for cars with more than 12 mileage\",f.CYAN,automatic_count*100\/len(df_above_12),f.YELLOW,' %')","a4d4975d":"# Making a copy of the cars data\ncar=cars.copy()\ncar['Price\/Mileage']=car['Price']\/car['Mileage']\ncar[\"Seating Capacity\"]=car[\"Seating Capacity\"].apply(remove_characters)\ncar=car[car['Seating Capacity']>0]\ngrouped_company=car.groupby('Company').mean()\ngrouped_company.sort_values('Price\/Mileage',ascending=False,inplace=True)\n\n# Making the function by the name rg which means return_grouped data\ndef rg(number_of_seats=2,all_=False) :\n    car=cars.copy()\n    car['Price\/Mileage']=car['Price']\/car['Mileage']\n    car[\"Seating Capacity\"]=car[\"Seating Capacity\"].apply(remove_characters)\n    if all_ :\n        car=car[car['Seating Capacity']>0]\n        grouped_company=car.groupby('Company').mean()\n        grouped_company.sort_values('Price\/Mileage',ascending=False,inplace=True)\n        return grouped_company.index,grouped_company['Price\/Mileage'].values\n    else:\n        car=car[car['Seating Capacity']==number_of_seats]\n        grouped_company=car.groupby('Company').mean()\n        grouped_company.sort_values('Price\/Mileage',ascending=False,inplace=True)\n        return grouped_company.index,grouped_company['Price\/Mileage'].values \n\n# Making a function to return a dataframe with specific columns for a specific company\ndef rd(company,all_=False):\n    if all_ :\n        comp=cars[[\"Name\",\"EMI\",\"Mileage\",\"Price\",\"ENGINE\"]]\n    else:\n        comp=cars2[cars2[\"Company\"]==company][[\"Name\",\"EMI\",\"Mileage\",\"Price\",\"ENGINE\"]]\n    comp.sort_values(\"Mileage\",ascending=False,inplace=True)\n    comp=comp.iloc[:5]\n    l=[]\n    for i in comp.columns:\n        l.append(list(comp[i].values))\n    return list(comp.columns),l\n\n# Making a function to return the visibility\ndef visi(num):\n    vis=[False]*18\n    vis[num]=True\n    vis[num+6]=True\n    vis[num+12]=True\n    return vis\n\n# Making the subplot\nfig3=make_subplots(rows=4,cols=4,\n                  specs=[[{'rowspan':4,'colspan':2,'type':\"bar\"},None,{'colspan':2,\"rowspan\":2,'type':\"table\"},None],\n                         [None,None,None,None],[None,None,{'colspan':2,\"rowspan\":2,'type':'table'},None],\n                        [None,None,None,None]],\n                   subplot_titles=(\"Price - Mileage Ratio\",\"Best Recommendation\",\"Second Best Recommendation\"))\n\n# Adding the barplot\nfig3.add_trace(go.Bar(x=grouped_company.index,y=grouped_company['Price\/Mileage'],marker={'color': \"#ff8882\"},\n                     visible=True,name=\"All Data\"),row=1,col=1)\nfig3.add_trace(go.Bar(x=rg(2)[0],y=rg(2)[1],marker={'color': \"#ff8882\"},\n                     visible=False,name=\"All Data\"),row=1,col=1)\nfig3.add_trace(go.Bar(x=rg(4)[0],y=rg(4)[1],marker={'color': \"#ff8882\"},\n                     visible=False,name=\"All Data\"),row=1,col=1)\nfig3.add_trace(go.Bar(x=rg(5)[0],y=rg(5)[1],marker={'color': \"#ff8882\"},\n                     visible=False,name=\"All Data\"),row=1,col=1)\nfig3.add_trace(go.Bar(x=rg(6)[0],y=rg(6)[1],marker={'color': \"#ff8882\"},\n                     visible=False,name=\"All Data\"),row=1,col=1)\nfig3.add_trace(go.Bar(x=rg(7)[0],y=rg(7)[1],marker={'color': \"#ff8882\"},\n                     visible=False,name=\"All Data\"),row=1,col=1)\n\n# Adding the first tabular data\ntp=[2,4,5,6,7]\nfig3.add_trace(go.Table(\n    header=dict(values=rd('x',all_=True)[0],\n                fill_color='paleturquoise',\n                align='left'),\n    cells=dict(values=rd('x',all_=True)[1],\n               fill_color='lavender',\n               align='left'),visible=True),row=1,col=3)\nfor i in tp :\n    fig3.add_trace(go.Table(\n    header=dict(values=rd(rg(i)[0][-1])[0],\n                fill_color='paleturquoise',\n                align='left'),\n    cells=dict(values=rd(rg(i)[0][-1])[1],\n               fill_color='lavender',\n               align='left'),visible=False),row=1,col=3)\n\n# Adding the second table\nfig3.add_trace(go.Table(\n    header=dict(values=rd('x',all_=True)[0],\n                fill_color='paleturquoise',\n                align='left'),\n    cells=dict(values=rd('x',all_=True)[1],\n               fill_color='lavender',\n               align='left'),visible=True),row=3,col=3)\nfor i in tp :\n    fig3.add_trace(go.Table(\n    header=dict(values=rd(rg(i)[0][-2])[0],\n                fill_color='paleturquoise',\n                align='left'),\n    cells=dict(values=rd(rg(i)[0][-2])[1],\n               fill_color='lavender',\n               align='left'),visible=False),row=3,col=3)\n\n\n# Add dropdown\nfig3.update_layout(\n    updatemenus=[\n        dict(\n            type = \"buttons\",\n            direction = \"left\",\n            buttons=list([\n                dict(\n                    args=[{\"visible\":visi(0)}],\n                    label=\"All Data\",\n                    method=\"restyle\"\n                ),\n                dict(\n                    args=[{\"visible\":visi(1)}],\n                    label=\"2 Seats\",\n                    method=\"restyle\"\n                )\n                ,\n                dict(\n                    args=[{\"visible\":visi(2)}],\n                    label=\"4 Seats\",\n                    method=\"restyle\"\n                )\n            ]),\n            pad={\"r\": 3, \"t\": 3},\n            showactive=True,\n            x=0.115,\n            xanchor=\"left\",\n            y=1.1,\n            yanchor=\"top\"\n        ),\n        dict(\n            type = \"buttons\",\n            direction = \"left\",\n            buttons=list([\n                dict(\n                    args=[{\"visible\":visi(3)}],\n                    label=\"5 Seats \",\n                    method=\"restyle\"\n                ),\n                dict(\n                    args=[{\"visible\":visi(4)}],\n                    label=\"6 Seats\",\n                    method=\"restyle\"\n                ),\n                dict(\n                    args=[{\"visible\":visi(5)}],\n                    label=\"7 Seats\",\n                    method=\"restyle\"\n                )\n            ]),\n            pad={\"r\": 3, \"t\": 3},\n            showactive=True,\n            x=0.115,\n            xanchor=\"left\",\n            y=1,\n            yanchor=\"top\"\n        )\n    ]\n)\n\n# Add annotation\nfig3.update_layout(\n    annotations=[\n        dict(text=\"Number of seats:\", showarrow=False,\n                             x=0, y=1.08, yref=\"paper\", align=\"left\")\n    ]\n)\n\n\n# Updating the layout\nfig3.update_layout(template=\"simple_white\")\n\n# Showing the plot\nfig3.show()","7e58efe5":"### Well there are different ways we can look at the problem . <br>There might be different categories so we can just look for the mean values , but that's not the only way.<br>Let's look at what every company offers.","c3db9020":"#### I took reference from plotly's official site as well as amazing notebook on plotly by [Mr Des](https:\/\/www.kaggle.com\/desalegngeb\/plotly-guide-customize-for-better-visualizations\/) If you liked my file please do give Mr des his fair share of appreciation as well :)","b2f16f45":"### Well don't misunderstand it means nothing like the above pictures hehe , <br><br>**Displacement** : Engine displacement is the **measure of the cylinder volume swept by all of the pistons of a piston engine, excluding the combustion chambers**. It's measures in cubic centimeters , hence also named as cc . <br> <br>**Peak Power**  : peak power is simply the absolute highest amount of power the amplifier or speaker can handle before failing. Max power is the highest amount of power that can be safely sustained. **RMS** is continuous power handling at sustained listening level.<br> <br>**Peak Torque** : cars need more force - or torque - to get them moving. Torque is defined as the engines **rotational force**. You may notice that torque - like horsepower - is always expressed at a certain engine speed. For example, a Ford Fiesta Ecoboost develops peak torque between 1,400rpm and 4,000rpm. ","397c1a8a":"### Well from the above plots we can clearly see that as the price of the cars inversly effects the mileage of the cars we can see clearly that most of the cars with the highest mileage has a lower price as compared to the ones with the low mileage.<br>\n### We also try to compare the number of the cars with mileage more than 12 with their previous data percentage and see the sudden hike in the number which shows that the percentage of manual cars data in the cars with higher mileage than 12 is more than the actual percentage of the whole data which shows that if the car is manual there is a higher chance for it to have higher mileage . <br>","d99fe9ed":"<h1 style=\"background-color:powderblue;\"> Importing the dataset <\/h1>","ef0e93f8":"### Well from the above plot we can clearly see the that the price of the cars from toyota are pretty high followed by MG .<br>Well we can also see the similar kind of relation in the plot (2,2) where we can see if the price of the car is high there is a high EMI for the cars as well . <br>Which company would you prefer ?","16b213ec":"<h1 style=\"background-color:powderblue;\"> Importing Packages<\/h1>","db2c0d92":"![](https:\/\/i.pinimg.com\/474x\/c2\/4f\/c2\/c24fc21a2ba2f9e8847616ae0424788f.jpg)","197883cf":"<h1 style=\"background-color:#ffd3b4;\"> What is Displacement , Peak Power and Peak Torque ?<\/h1>","736d272d":"<h1 style=\"background-color:#f5c0c0;\"> Cars Data Analysis <\/h1>","78c8d4b6":"### Well here we can see the features that are correlated with the mileage feature . <br>Price is negatively correlated with the mileage of the cars which shows that if the price of the car is high there is also a possibility of the car having low mileage . <br>Highest correlation was also seen in price follwed by transmission which shows the relation between the automation of the cars and the mileage offered by the carWe also have some of the terms like peak power and peak torque which also have impact on the mileage of the cars. ","9af64dc9":"<h1 style=\"background-color:#dbf6e9;\"> Let's have a look at some vizz :)<\/h1>","9b392fef":"<div class=\"row\">\n  <div class=\"column\">\n    <img src=\"https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcTFrJqHKK6Ti8unKgxZjDGOziYCLRy5xp8AEQ&usqp=CAU\" alt=\"Snow\" style=\"width:100%\" height=\"200\" width=\"200\">\n  <\/div>\n  <div class=\"column\">\n    <img src=\"https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcQVmqsLjZUgmGDKl879DqthRbybeP6mhLq36g&usqp=CAU\" alt=\"Forest\" style=\"width:100%\" height=\"200\" width=\"200\">\n  <\/div>\n  <div class=\"column\">\n    <img src=\"data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBxMTEhUTEhMWFhUXFxgZGBgYFx8XGBsdFxgYHh0XGh4YHSgiGB0nHhkYITEhJSkrLi4uGh80OTQtOCgtLisBCgoKDg0OGxAQGy0lICYtLS8tLS0tLy0vLS0tLS8tLS0tLS8vLS0vLy0tLS0tLS0tLS8tLS8tLS0tLS8tLS0tL\/\/AABEIAMQBAQMBIgACEQEDEQH\/xAAcAAABBQEBAQAAAAAAAAAAAAAAAwQFBgcCAQj\/xABPEAACAQMCAgUIBAcNCAIDAAABAhEAAyESMQRBBRMiUWEGBzJCcYGR8CNSobFicoKSssHRFBckMzRUc3STs9Lh8VNjg6KjtMLTFUMWNcP\/xAAbAQABBQEBAAAAAAAAAAAAAAADAAECBAYFB\/\/EAD4RAAEDAgIGBggEBgIDAAAAAAEAAhEDIQQxBRJBUXHwE2GBkaGxFCIyM1LB0eE0QlNyBhUjkrLxJENigqL\/2gAMAwEAAhEDEQA\/ANxooqu+VflZZ4FUNxWd7hIREiSFiWJYgBRIz4ina0uMDNOASYCsVFZk\/naSccI8eN1QfsB++u7fnat+twl38l0P3kUf0Wt8J7lLo37itKorPbXnY4UmG4biV8YtEfZdn7Kc\/vn8H9S9+av6npjha4\/I7uP0S6N+49yvNFUgec7g\/q3vzB+pqD5z+C5C8T3aAPvYD7af0TEfpu\/tP0S6J\/wnuKu9FZ+POtws\/wAn4n2xa\/8AdXL+djhRtw3FH2Cz+u9UvQsT+k7+0\/RS6Cr8J7loVFZ7++xw3814r\/o\/+6uT52OH5cNxH5RtD7rpp\/QMV+k7+0pdBV+E9xWiUVm377Nv+a3P7RKD52bf81f+0Sn\/AJdi\/wBN3cn9Hq\/Ce4rSaKzT99hf5qffdH+CvP32V\/mrf2o\/w1L+WYv9M9yf0at8JWmUVmR87S8uF+N4fqSlE87Nvnwr+64h++KR0ZjB\/wBbu5L0Wv8AAe5aTRWbr52bM54a5Hg9sn4Fh99d\/vs8Py4biP8Ao\/8AuqJ0fix\/1O\/tKb0et8B7itForOh51+H58LxHuNo\/fdFet52OH5cNxM+PUgfZeNROBxX6bv7T9E3QVfhPcVolFZz++tZ\/m1389P8AFR++va\/m138+3\/ip\/wCX4r9N3cUugq\/Ce5aNRWc\/vsWf5re\/Otf465PnZt8uFu\/np+2mOBxIzpnuKY0agzae5aRRWbnzsWv5re\/Pt\/4q6Xzs2efCcR7jbP3uKj6JX+B3cUuifuWjUVm587dnlwl\/3m2Puc1zc87Vr1eEvflPbX9FmpvRa\/wHuKbon7itKoqv+SHlKnH2WuIhQo+h1JBg6VbBG4IYd1WCguaWmDmoEQiiiimSRWQ+egfwnhz32bkfkuk\/evwrXqyjz0\/xvC9+i\/8ApWatYH8Q3t8ii0fbCzeugK9Ar2tO1hJXQAlFFe0VZFGFMUztXlck16TXDGrVKmrNJm9GqvQa4oqx0YRywFd6q5JoVCaVFg00NCQa0JGinA4elBZpGoE+sEzminpt1yUptcJtYJpFEU6KUBfn5+d++n10+smuk16MU60VwbVNrA5ppBSQNdTXF2BuQPbikX4tRznxGmPvqvXq0KI1qjw0ZXIF0NzW705opBOJU7MPZu3wHpfk131y82A\/G7P37VFtSk6NR7TIkQRcb88uvLxUYG8c8\/VK17XKuCJBn2UTSdTlCLCV7RXmqvRQHUChmkQuCK8ilCK501Vc0yhwtb8yyRwnEHv4pj8LFgfqNaFVD8zn8iuf1hv7u1V8rL4n3z\/3HzK5r\/aPFFFFFAUEVlHnoX6bhT\/u74\/5rNavWXeeYdvhT+De++1VvAfiWdvkUWj7wLNq8Ne1yxrZUWLq0mkleE0aq5Y1zV0U1dFPeuiacDq+rHp9ZqyezoCY2HplpnmAMb1y3DEBGZSFfXBwZ0MFY7zuSPyT3V2lnaM5KwAS+NGkwPrayB3lT3VWqVaRAIcc8wbSJkExkIM8IO0IbnM3nPZ1bD1b0gbRGYx+z2bUlw9+ZiJyO8AzGf2TyNWryW6IS85Nz0EVSQCRLNMDGYEZ8Y5Yq88FxNlJti2mgYKgCBgYgbYIx4iuBpL+IfR6vRU26xHtTbr3G8Z2jjdM5zzdv+1l4tqT2RsACCQ2RuRCLA2xnPOllsVZ\/KfycRFPE2Fi2PTQdkJiNSx6KjmOQmOYMGlnskBVUsVYkqC4IidL7rIGkjII5TmrWB0gMRRDqd7wQXGRO8mZzte42gjVUGOMRG3ffntTUWvCjq6ehK4dK6GuipoyUmUp4Vrgp8+2pB0Jk0Fuverp11fz8+6uurqXSJ0y0Uhx1zQsx4D4E\/qqU6v599MulLRNtvcT7AQT74+cyAYmo8UXmn7UGNt4tA2pibKC4qRMkk6RnV3q2cHv\/V3ZQYzMRiZ+vkAyROYx9u9evYiUB3GI8QPCDuMc817duEYAzjvbeM5MTmM15gXF7tdxlx2nM9qm4RMiB893PzXCbSRjMDYb7mcLy5cxy2Cw3BwR3fbsN5G0beBoFsgiSQAxPawTqPoZ3MTjbtcq84XVByFG2sn4xBxuNgTTEDNNeQDz9sxeB2ylbZILaZ8dvCAZ8cfeRye27kgH53pgR3DJHvnWAD4ekp\/bS3WaCI1ae6NpJH52rf8AzrRaB0t6LV6Ks7+mbCcmmRe5sM5i03janHq+tzfJPJrpWrgivVr0JwEKbgCErXtciva59SndUXsutl80luOA1fWvXT8G0f8AhV2ql+aT\/wDXqO67e+24x\/XV0rEYn37\/ANzvMrj1PbPEoooooKgisq88p+l4UfgXvvs1qtZR55m+m4UfgXv0rNX9GCcWzt8ij4YTVbzsWdmkmNdmk63VNq71JqKVtW+dcIk07trUnuhEcUWkXUdgYkgDJjHv7pONqdpIKsqusEEPPrAgypGZU6T4SPd7qJVFgQGuN4nrBaEHwHVAj8au1jmYnvkgSQDA2HKf8sc573n2oAkiN7bgdpMG\/BViSc8p8PvbyUv5Jcatu+yNtcQLM+uCxE90y4z+D31Km1ctlyihmuXUAGxYvdIknk2hlQZP8WvsEDw\/RepBca4llXMI1zVLmJBlfQEDBPdO0Ez6pcZk60SVQLdWQbbalkuOTglUKEbDUCATWG0saLsQX03Az7ViPZygxuEWJgg71ARMDPZ1TbLdBSb2L997ccUyWGh1tWLJe5dWF9M5OjMEaYAYTVcvG5a4gcPdtOq6W0swZWJRiASCB2WUSDsYInetC6H6YThbjdcjKl1U0XAur0ZHVgLJI5gAGCzYzNMfKTjLXEg3rhNnRaZbDT2XuAhmRgwBgwoAIDQLhxiZaLxIw7pJs6AcuvZnvnttsVZ1dzKxMerNzc88MwqpaXCgScGWLatRnBHMY3G0iRAMDxkpRUHaOga2XBnSwYbNgdobgocGRkFRXda6nLZbBtlJmdvG2V9yvsBEtjLtn52yg+OabdXXnVU6iii6ylCbi1XnV04iuSKWsU8JuVrlkp1prm4oAkmI3\/1qQcmhVLiei3VwBoOpgElyGMsISAMjMTnGc0t\/+L8Wr3U6jW9kKXVGW40MZVws6nBgxAnB2NW7ybFw33e0tq8yL9GCxGgkNLGAVPcJK7wN5F46LsSqM9l7dxAQGuFC515aTadhk5I2mMYxg9KNo08Q5lJsAZ32m9r2F7dqqOrOD4bs6ufmsA4nhHXR1lq4hM6SyMgJxI7agYGn84e\/17JjUxCkDAInEcuUf547tZ8u7HW27tlrTOyWjeVwQdMMByOoSA2w2B8KoPQnk0eItlmvratzoXWhuM7QpAVV7RjWsn8MY3qgTMR9VNjmgEuvw37OvuUEWAECZzG85T0gM94kUWCXIxp1DPqg7R90bRk0txNk2Hey2HtuVYSY7J3HPbIO+3sCS9oCTGdI\/wCYgH6uR4Dx2pjt80Rp1o29Q55JS1vi9OgSCDGD2mCH2Hks7j1TT+ol7qgCNi0yQZjETPPc+Bp9w3EqR9XSo7RgBox2c+FbX+HdJvqh1Gu6TbVnM2Mjsid97ojXtBgn6fTyHgnYNe0mDzroGtO5k3Sczatp8038g\/41z7xV1qkeaW4DwEfVuuD74b7mFXevP8X+Iqfud\/kVnqw\/qO4nzRRRRVdDRWS+ej+P4X+jvfpWa1qsm89H8fwv9Fe\/Ts10NFfjKfb\/AIlWML74dvkVnTGuK6eua3rRZaJosl7Qp3aWkbSU8tJVeo5CcV2i0Xbcjn7Bz8Pnv94UVa9cwCYJgTA3McvbVV8EX5hQIkXVg6J6TNzqRo03kV1UNhLgjIU+o\/0c5EekASMiQbodjYa2d2Ytp1aUGZCrpHYXAMQc7zmqx5PcLduXhoOg2zJfTMRKkQcHUdYAI2Grumx8V5QcPwt21wzu12\/ecBVkTNwgAucBFkiBjFefaRwzKGJ1KG4GNxzjyIzMHPJAcWhp1jbLvTtjdDQrgoogrpMBzkkTg+r3x35NRfFoepvKfUHXDwKHU0e0ax76kuleOcOiQbY1OjhdJfWApVAWDDIJPjjaCKSs8Obpe2sy9t1lonKRLaQBv3D\/ACqU3PpkOGyO8GyIHgsJHGfFQfV12Lfyfs+fkq2FkZBBEgg7grIIPiCCMdxpYL87\/P8Aoa3prA3GSnr7k06r5+NKcHwdy5cNtVXYGST2QSQDgySSCNPKDJx2nKp+37pPz\/pLeStu02q7rm4CyQrdlUDHTAG8wGnO5iqWLxJY0QSq1eqWiyZ2fJa4VbU+m4GIEZXTMDHeQJzkExMUnc8lri2i3XHWZ9VdPLABBYcszPjyq68LbUgkb\/H5\/wAvbTTjbDMYnHz8a5rcXVJLS7iqYrvyJWd2p0ifSllYdxViN+eIM+NeXdpkCIYEiQCpkEjmJG1THTXRCWAhVmLu\/aHI6iSSAZ0RmI3gDO9RzWsV28NVp1aWrsyM35C6VF7XsjsupCz5aqUU\/R2gx9XU7dloZiugaQYIAbJydhJmOI8sOFCyjtdY4W2isXZjsoBAgk9\/fVH4HoizrC3bjpZ5MqhzbP36fGCRzxto\/QHR3AcPD8KrcTcI7N1Qb0yOVwDqrQI8VFY6to6rSqFrwANkSe7y375zIsScPRaANcv6wA3sMnLtnK02a9EcJeS8LvEwt+7Z1MimVtqH+jtAncgFiTzYtyiq7dscL0anU\/TMAmq40qWZXZRtgPAswYggGdzVtm4eNudaw1dRaOhfQQM92FBiWMKZYxOIA2qm+dbo261sXdataUr9GUGsMCZZH0khdI1MOQQmq1UAVC0dSrYcgtGvkeuPkfJZ10nxov8AEXuIIK9a5YDeAdpxnAGx39lNryHEbDfPeB8Ml\/ZAr0NAnPahcfGJMZz9+K51ymRsQNR7+wMiNzg4qEmZXSa1obqndzfuXJcA9pZaJHPmBzgjPP5C1y4DlbYQZzGY8TifW+NcHh0B7R2JUgZMoo27xiP9cIKwaYGkR7+UkSdjnIO1LVa6\/PmkdZtrcBE98W8L2upPgh2Pafd7vneaWmo3h3IMAwMGWiM\/WA9XBHtqSNelaCxTK+Da1oI1AGnK5AGX3gqdN0iFsPmaM8Je\/rJ\/ubBrQKz3zLH+CXx3cSf7jhz+utCrKY78VV\/c7zKz+I96\/ifNFFFFVUFFZH55m\/hHDjutP9rr+wVrlZH55x\/COH\/o3+xk\/bXR0R+Mp9v+JVnBia7e3yKzxq9tLJrinFhPn5+f1btxgLQGwTmytPLYptaFO0FU3lCK6Pjt4\/rpJkLE4OkSRAIYgASe1GkTKyQOWcifbhkfgmQxBknddIjMz3ZnAmrZwXRQscO928JukC7pnA6rtInuJknOTjYVmNP6bGjaIc0S9xhjTNz+YnI6rRA63WyuhPdzzznuTXoy1d4dCWAAuG2wIkQylZtMSOzqHZDHEg94mt9N+QNw8a\/F9a7o9xrsJIvoxMiImQpO65wIFac1tbtvQ3aV1g+IIyfDvqrdLdINZU2n1dfbhrFzTqVzkIWIGlS2VYHTuYxBrC6M0vWxVYufDqhO72uqABfgBO6ZQHMa72+I553J1b6Wt3Lbs7K7aQ1+04VdbRpLWJaHkqCbcTLjmQDx+7QhT9zt1vMataNbEbM7KdWYGkjV7YkIXrj3LnWXNGrSq9lYnSSdRknPaI9lKqPn599a4aKpuh9QFu9oMjvHfIixgzmnpscwRPO7h5ZJO0hgljqZmZ2I2JYkmO4ZgZ5bzmlSK6FArqCGgAZBTTXjOFDHUZIlJETKqxLjvOCcDfbmKufR9y0UBSDiJGT3Rj2Z5Yqq3BIIBiRE91KcFxJsGZLo5BeR2lMRqxOvIWduZ8BSxFIm4VasybhXC4yWxrOw3iPROCZPIekY+r8VSwYk+JGO8GD9sfO0PY6Us3exqDBhDAZwcEGMDfY+Nc8HxxtrD7slu4x5BurZWGfGwxnvbxxznNIdfaqhEGE08o+jHeLissWwx0tMTyaQcQNXIjtd9QadpVaCAwBE4ORMfaNqmH8oAyHTbdg0x2ZDQSMH0YMYk7GojgrBVArcgPYMDsg89MMfy66mFe9tjlKu0S5tjvUZ0rdNtC4iQVUd3aYCft+ypzgvOQbPDW7KcOC9u2iAtcx2VA1EBZ5TH20y4myGBDAEHBByCO79XzmO4HgLFu4Tcsm6pyPprilT3QX0sp3zt4ziOlMPiawa6iZA\/Lac8xMeeyy6DW4Z7f67C6MoMdh+uY2K1eQvEPeHEX7pLXLlztNELCgQqDko1aYztzM016Q6Q4bjr1zhjeC9h0tDbWzCGuIThwvogA5l9wQaiemPKC4bY4ezbTh7Zi2oQyYPLAAQASSBMgb98T0Vw9lOkOHVgNDLcVtZkNCQslvFoG0E4rOVqBwxDK89I4SBawnN2ed4aL5kxAkL6TqofVjVa0WG4CAB2CLnjnY097DW2ZDqRgQCDIIM+iceMZ+6nHAdHXLzMbZgAgln7WSAdu\/Ybj21b\/Ke5b4vjuyNVu2gWZ9LSRzBlhLNvvoHhXHCXtNy7bVQqJbXSAIyS87Y9QVzq+J1ZDReOeKuUaJLQ5w644znu32vcXVF4vAIK\/SBtIAyuIEnx8IHiIpO4zGARCkkiB8Yj9fcfCn\/AB2XuKTuVbv3Rg2PnY91NzcIOQCPUMcjOMnGAcY38attdYW5gZIOIpar3NmwJGW4kX4gDZGST0AeiSW7yMjHLuwRgicxUyywffTfoqyp1PpEk48PAe+ac3RW+\/hzAmhSNYuk1A05ZATHGZ4JURt+vz3\/AO1rvmW\/kvEf1o\/9vw1aFWdeZhv4NxA5deD8bNr9grRa4GkBGKq\/ud5lcDEe9fxPmiiiiqiCisn89S\/S8Kf93e\/Ts1rFZP56v43hfxL36Vmujon8bT4nyKs4P37edizcCnloUzt70+tVuahXfcU6tilDOYxg8sTypNWAyZgZMZJju8d6V6B4M3r6ITPfnOINwgjbJRcbQYjlyMbimYak6rU9loJMZwN3Wch1wgOMWVi8iej1ZmunItkogOYYxqaSPSknbx76snTdnVaaMEA8iQV9ZTGYIEYnMGDEU54bhktiEUKIAgCNgAPsArq6upWB2IIPvFeH6Qx1TG4h2KeCJIgfC0ZN7PHOLma5uVFeTHGdZYUyDGpZDagdLMsg90qQJA22rryi6Pa5bZkJD9WykCCGRiNVuGxJGx5GOUzD+T98Wbr227ILkKPFgCfcxRveCdslpxPlp1nFngwOqzp6xoYSwBCxkBoONWJxnExp4Wr6QRSaHRDrwWxM3BzGwjusk6Lax6u1HC8SGLYgASIB+2ciRHvVxuuVl4kZOQo3Zuys4wNUE7jlvTe3w7WeJ4heJvXAraLll0tB9atIYOEtGCGABgiSZ5096M4GxdckXrrskEhlKN2gQDLjUFjVGmOeckH04aTHRio9rr52JE7g6ADewJ1Tv3JNLikOKv5CLqLMC0IpZtIg+qCVmQoMc55V2LOhCztxRCyWZU2GPUZS55nCmJ7hUrf4jhbINtnS2TBID6WzsSQdRJjcmTTZL3D3Q44e7qvBdSk3XMEbEgtBWYBERmuLi8bVrv1mOcwbACR2mNvPWpFt8+4pLhbVu4R1XFEysgEoWPjp0AxHzinrdHFEa41w6VUnCicDYd5Ow9oprxT25R1DhdQa8ioZGghtRkQjLudi6k6dR0gvbui6rvfllR7sIY6tRZuMoIUDtNCAy0wdoqsMVjGujpnR1xPXzYIXrE6o79iU4LhHa5oNzS41RqVbgOhgGAKOMqSAQYORvyT4tX0wHXDXo7BwF462AD2sntNnGDEc696MN8XUFq1bVEQtpZo0dcBpZtM6iYeVXGfTmpLhOMuEsiWbNwAsTdl7aElyxUBg5La8yrMoI5EAUQ4irMl0xllb596qvBLhF4Udd6NvFPTt+3S3+KmNzgroBIa3cjddJQnwBLETBG\/eM5qe4jpkl1tJaKuVdz1qHRCFRpV0OlidQyCYAmDtTTh+CZ7fWSG6wakaAcMDpJA8GnHeRsBQXaRx9Mawqdmq2\/h5EFHa+LKCDhhI59+D7DOQRsQdqacUYInY6iW2ACgE\/Zn47k1IXrHaLWmFwb3AhDEcteJkxv36ZiQdXXCcB11zRvbADXGGxVhhFPe\/fyXVsSK1OG0tTq4bpp1SMxtB3X37OrOIKOKlrG6pN7jiXW8bdxUZSbRNs9tCQGuLjMmPGIPOo4sXLPMHU4yCRBMFYMNHZHvFXLyw4i7xRRLGgWLbCCSRqK4lQF9ALqAgiZnbSap1qzoUCZyTPtYtWc0hSxBd6TWEa0RwiYHUBGe\/atHoeoKw6NwyBym9wR84jYBwErwBFtCxYO7RLRBx6o7gM+8+MVx0feg3mP1VHw19\/tpjqrzhLhC3Pwrn6Kqp+1a5JZIPZ5rrPwbWgNG1wO3IbzeVGcaCLjPn1RzI9Bd49u3OnfD9EMcsdIMSBv3nwHsz388L9HIpvXJAJBUr+SiT+kKmBbrc6F0Vh6tBter68iwvAiQZve\/Zx2ZXFD\/kVP3O8\/mmXVgAAbAQKa3kqTdKa3VrZMehtMLUPMx\/JeI\/p\/8A+FmtDrPfM0P4NxH9Zj\/oWD+utCrDaQM4qr+53muBiffP4nzRRRRVNBRWW+en0uG\/FvffarUqyjz1H6Thf6O9+lZroaK\/GU+PyKsYT3zeKza2cindumdOLTVu3haBwT8HnI8Pb8n7R31bPIHh10OwEGdIO5hZUCd4wTnmTvVLuHKkxEgfAOxJ7\/8AOc7VovkZwrJww1iCzO0cxqJifGIxy2rzn+O659AbTmC6oBE5gNJ7RJbPXq7YVZxU8RSXEGEY+B+6lRUJ5ScaVXToYg5JBUYG\/pMIO37RvXmTXufFIiEFrbyqx0taLdr1jIJGDJET+MCFIPeoExNVnovoFHnsw6EanaIIbVIAVpYkg5xyzzqU6T4+44ZUtwDJCsw1QCc4mMxkwDO87qdD6imluy3VrcIUmbmtRBG2lVkDSpnbImTrtH9FTM1z6o2DMnYLcbyQN9pIZ2q51xKsvB6r9k2i08RYyjnGrUIGoxgPBVsYZZjApt0cLouJxAUlG12+r\/8AsgHtPpO5DrGnuBIkmC06K6xLiNbLXrgDaxqEG2I1AQvaMxpmNTRsNrCbRdus4crpvJDOWIC97qBklhAKiDKgyINW62M1mvpYezCZggSN4zMCb7D6o2ynLjm3nd9D3qJ6V6P4XjH1pxL2rpIU6RqXUFAXWpEoY0gSRMDFV3h+EvrdVbAJu22cYyMNpzI2YjnuAc91343o8BF1XrKC2ZW4LToVk6jkX1iTk5jwxSVrirSgdTxGswAOrti6ezqj0NTH02yTPaOcmqpcYt4\/b6ITmOJnVjtjzyR0X5O3nv2+Iv2rS6dQgyzkEyI1FgsMNQAONW42pLpRm6jiWtjVruXEWPFxbZs4gEO0++nh618sl+4P944s2\/YVQgkfjKaeWOj+IgMr2QBgWQhCgAYUODIPjoiPV50MOAdLjdOwhhJcfnnv+cFVi10hdtXuFt2r2o6B11xhKMiXQSA7gFltqzjXg9pMyYr3gPKC878RaSBbtuTaOQ2pr9s2gxByjamGn6qnlMS3TPSgs6OvsPJaAdIZAfra9o3P1oHo12rWFuBrgFq4\/bAdwFc6QvWJDaLjaYXUJIBAMSKODIlGIa4DK+24vMk7pi0WsRuCVtcDc+iD3ZFvUewnV9o7CSWJXLSJHq91c8Vxi2rypbvrZMa7ocza7c6QELABy3aOkjnqksKTsWP3TeYq11bdt4ZlusoYqq9i2LbRpz2mOZBEdz60RwwuFmXq4kkzJPeSxJ2wSWaYWNIWCGpVa2xv1fLbfqQX6vstCR4W7bEn93KSeakE98TeuXMeyKhulekbNu3+57LgoXJv3ARqYv2j6PfK6iMKpgfgxvGm9xbqgaLYMCZk92sg7nAmN\/bUzw\/k9YtqOrRQRH0mGYMGg+A55HOZBBNJuJZRc1xEm1s9uRMDPt7VECMgmTxGIAG3LHu25VWekOjXViVBdSScekJ5GfSX2Z8DVh6U4d7IBRl0QNQNs9gkxtqGlJnvC4GxFNbNq6ymXRWBiNMCcEidTbg4OYnYiJ09fSejcVRArE3vkZB4xBjI5hdDDY11B2syZ4eBVWDbgEEjccx+MPVqS6M6CZ7XEXw4W3bGplZZBbSztBBxIA7\/AEqdcTwBMC4NbRg6dMcuy6YU+BOZie+V4aLXRFwpLG9cI5BvTFqDtB0KTB29tcR2FomHUKmuCY1SIdJyteQcpG20SujiNNOrUw1o1Xzn1bT5Wk22yqWiFHNzBMknT7ApVc5wD7yKsSgESNjt7+dV+3xALELqmSTgjYwd99uVS\/DWHRBph0jbZl8Fkww2wY9+BXT0JpVmELsPiTqgmxOw5EHdltgAgznKLpDDU7VaBBBzgz19vnklbi0xv0568MJBx8D7CDsfCml81vKR1hIyXKC1TzPKBwl7x4kz\/Y2B9wFX6s+8zX8m4j+tH\/t+HrQaxWNtian7neZXAxHvXcT5ooooqqhIrK\/PSO3wv4t79K1WqVk\/npb6XhR+BeP\/ADWa6GifxtPj8irOE9+1ZtStk0lXVs1vTktCU5YyMjs5AjfY59sax8K1boa6TaQyDiMc\/E9xjMePPesqHZ0\/jZ8BpB+2R8PGvOjPKDibQtyC1sXAwGqNw4Cg\/VEjstiQoBAzXm\/8bYA4ptJ1N9w59t86pMHqsO4bL0qrmtN9s\/L6rZzTfiuDS5IYHukEqY7pUgxSHRnStu8mpGB5GNwRuGG6nwpfiePVRMz8\/sk+6vNGa0apB1vFQ1DNlTeP6DhjbSEtzLQNLuAfRkbY3PdMbgiv+XSabYuY+jcDbGlsDHsIme4Vb+kuO0yzELmRJjJ5Z+zwbwgVrhEXi7wdv5NZi5ek4LYZLQjBg5IyYGd67eEc+1R+Qz6\/ucu1KrAYRtKkegfJ\/q+EVrpNu4\/buleywSDpSFyTGPazRmBSjdF8VaAW1xJQSCbZRDp6xjAEiTLTMGASTgCKm9YJNxwQFi5c1bhgJS3iY0jtkDnB5mu+j7bNc13dwAxnADNKqv5KiPbcPOiNrvnWnM8eR8iOCCPVy+irypxVlgz2LbscAvLvqgmJkkbHAxvFSNjysRBpvJcUiBJUkE+MDBP6xU1eeSFUgMdR1xOmMT7QSPgaTtWEe3a0rCaVIU92mFn4g+6hmo13rPb2yZ+aeNyYP5TWS4PW4O6gGYVXO2+7L8KXTyjt+rPgfR+\/avL\/AENw93tgZBZZzjSYIHvFR3F+SsgFLhwdmx3\/AFRUpok3JHFKCnXSHlDav2mt37RNsiCD94Igg9xEHxFJp08r2hagdjFu4Qi6V06SxWcOqyIVdLY2BIWK6Q8nbyjUp1AEYQk++MfZSfA+T15myIncsCJ\/Z8KtU3saCdbxULg2U8\/lJatoEtKYUQNgBHvmq\/0h0lcvjtswAyVVZHdIGSR7M+\/FS\/DeThmTpBA7JVjE+IZTP2UlxfT9q29tOrbq0Oq4Yj6RRqS2TEYcZOACBuNUDplrnepfr3BSDSbJ70f0fxNmFXhHggalLWuUZB6yF9k+qNpMOuIch8g23O9u5EPsIVgSrBliYOCqTHaBfogbs9u\/eGbjLee3aUkTpw+lREQgBaCCd5Mk\/CW7trqriKUgSpyB3RInHI70V1Bud+eepQBJVeCnToLHSRqtlgTI9a3cDbgAwQYJB7xIr3BdG3TcnhkL2zgs7QigzK9Yf40AjDKG3HMtUl070rwXD3CjJcvuhGGdriJIkE9a+mRO4DNmonjfLG5cHZOkAA6UMEQfRZyJAIESoQr3nk1PDlvtXnYOR8lIkKaTo7heG7XF3Rcds6M6DH1LIln\/ACtWe6ozym6VXiVS3aXqUVw5JCy2lSoAVTgZ3J9UYqvcNdkkwwknLHU5jk5OS4xnmIPPCpbvrsYeg1sPab5iLQfsV0aGFY5ofMzzxkdnBRF8aLjKVZpOrUoHP8Hfee\/YUvZ6w4XUin1mxH4q9\/tj30vpJuwqliVEwNtJxJ2WdR3+rzp7\/wDGsf4y4EnkmW\/O\/YAaT8NSc8vfJJMwTt8\/FdBmLdSpmkDbqF+\/f159e1NeH6LTSeqeLnOTIP432Z3pnfYgwwgjBHj+seNSY4GykBS+PwiBz3zHtqN6VuTcXG6HUfYRpn85q0WhcW9lZtE+y7ZuOdurYdm5UyyPWiOrnmFqnmX\/AJLxP9bP\/b8PWh1n\/mZSODvH63Ek\/CzYX\/xrQK52O\/FVf3O8ys5X96\/ifNFFFFVUJFZL56h9Pwp\/3d79KzWtVlfnpHb4X8W9+lZroaJP\/Np8T5FWcH79vOxZlRRRW+WiSjkaScyZHuKCP7sfJpOynWIgiRG2wiOY5nlHjXqnIimVi8eHJB9E+jIwR7ue+eed6x\/8UYYhtOo07XCOswe3IzuXPxjYg7L\/AC56k6HRfWdoErBw4CgAYyoHa98gYnNS\/DWgmetvseZN5wOXINEbAjwBmKZL0mDtERj7vn2jbEr\/ALrXeRHM7xA3+E1iX0y\/2ufmqzYbknXD2i9xUtopZsAkSQBkszbwu5P7RF14aLSi1a0sqgZbd7jrIJ8YliOSx7o7oHgzZUMyjrbw9Fs6UM6UPcTBuNOwWPqyuX1MEt6mZtQQ7SCZe6SNtUzI2UrEFgKo1TrHVGXPPCTmnBS4Kl7VoOjLJczuxUtLNnkQSO8gnASGfcFdHUvcMlG1vJOkgTgR4ZAONh34YcXwy29SJMqmkmN3uDSGAG2lNWBsoFSalSBa0wDbJI7thB8ZP2GgOEc9\/gnF1xwVspExLaV+zUx+JuH3CnrHM1xYUqomC0ATEZ5nG0mvLxMLp7xM905+zFCJlTC54NYtrvks35zE\/rpY7Ch+VcD5+fn7MMTJlOMl1yPxr0GVB2NcMDBjBrhSwtnmwWSO8gSQI+ApAJFK\/Pz8\/sqv+UPk51+p7fVi5piXQNk6Z3BgwoEiCKngeY9tF7keeSADE4yM8jUqb3MdLTCRVc6MPH9QthBbtBARJfW5JYmZKAA5O6n2zTLgvJhV7VziLwBMErdOWnOvnOGkx4zzq13lkmMMpxPfuPaDt72G9etw8kk+i47Q\/CgAMPdg+weNWTi6m0xw53XUC2VXeG6BtWLhXRrli1tnaSebWjPrSZDfHYy9tG0lzUqjq2wVK7FsGfhpKnmoEScv0tyDZc5UCCN4nssCeYIie9QedI8dYBJcNpZfSxKtsNTDkIw0er4qpWPSuJ9Ynn6ptUDJNumujuskGWByrD0sAwJ2DrnSThlJQ7zVLbo24HK37nYGV0SOsG2obFQNiu4IiRz0PhL+pWDErHZye0jGOzPPcFW7iPfG9J9H9YrKxCMDqZonSQIFxAPVaO0PDvBJs4TFGg6Heyebc8NiLSfqm8xtHO1VcXdK6UARRyAj5n40m7e8\/GkePvdSzJcGl1wRy8CDzU7g86ir\/TqjbPsz9u321og9sWXUNehTGYUxcuBRJx9vfUXdRmm4VOmSqty1cx\/yqPaCOVNW664RKkKefpHwBIwoPfjukVbeB4a3btMo7VuO0NMQSOYOw5QYIxMiCBt0p6JWZVY0Og5XvszGRvbr2HZTq4zXcNXIeKvvmd\/kdz+nb+7tVfKp\/mx4YW+EcKZBv3TvO0CPsq4UetWbXquqtycS4TnBMie9cKsZqOPWfNFFFFDQ0VmPnoXs8Mf6Uf3Z\/VWnVm3noT6Lhm7nuD42yf8Axq9owxjKf7h42R8L75nELJ6KKedGcIXAZ+yu+cGNvgSCJGTBCzkjZ47SOHwVPXrOjcBmeA53mACRoH1WszXfRvB6pLDsqQI2luSD5+wNC3T3QxICjRJUQACXzpk6Y7MnEzgBQM1KojBltgQVEIgAIVebMRiT\/rM6WcqpsyYJciWfJJ7yBz7vcNsA+WaR0rVxmI6Z\/wD6t2Ac3cdp6gFz6hNQklUDpXybu2dMknv9YAH1mjbM+84neprzcdAddc\/dN4nqrbdkEQHde1n8BdzyJ94pw2rirvVgwuS8jVG0uSYDEAgDlkAYM1buM4i3YtpZQDSkLp5EgyV22WQWPrHSp3MAq4ip0eoczz4923hX1GzISXSPGFiVWdTDTtkK0dn+kuSCdtIgYiaQcEhrSuVLSLt1TBwDqAIyttBORBZu6e0z43ierUEGLjA6J3VTOq6eepsgGebNzIp\/0avVWw2CzJMEejbIOi3pzlyJMcljkKpH1Wgjs6z9Bu37DmiZ2T23fJuqxxp+kuDcgssBBvkLoXx1TuKkOEVlD3GGp3ggewYQeEn7TUbwvDeiGYF3ZWfM5JkDHdqnu1HuNTw1dZiAoU45kkwPYBB+I7qA7cOdviprpXGrQdwsmNs\/6H4V4RSHAdo3LnexA9iEr94Y\/lV7x\/FW7IVrvWBWIAKWLl0SzBQCbSEAlioAOSTUBTc86rRJS1gBJS7Gikhx\/D6WY3o0adSlGDgswQLpiSdbKhAmCYMHFA42yQ0M5dbgtdV1bLd1lS4XQ8HKDVO2kEzAmieiVvhKj0zN6V+fn5\/XQpz8\/PdSa8bw+gOb2kFLzwykEDhyBe1COyUJAK7\/AAo4fiLdy41q2XZkJDEWbnVghFeDcK6J0spHazIqJw1UX1U\/Ss3pLV22Q5DLI9xhh9q\/GveGtygDiWQ4J3MAgN7wc+0jlXfEWxuQCVyJ5fAVyVK3FYDB7L+wSVb3GR+X4VAKZXfUgqwk9ok+IPOO7In2zTSxcDq9u5+VmIIO4O4yJB9hrtCbd0qxJS5lSeRjKH3CR+Uaacdw5suLiAsNPayCSFKwDO\/ZkTudC+MzAmx55y4pkrwisQBcJNyySNWNTrA3H4Qg+2DuKV48tC3EEkRIxnlB8OR7sH1Ypm9sKivbMG3iSZ+jO2qPVH2DVzANS9hMsMQd17jz+e+e+kbOnnr5\/wBptkKG6wJDAShUqD3el9HcXdlUzjJXlIkBzZvL2dRBCgEMGkoGHoMfWQ8mODGcgGo4XiguLhu0ykEwdSS2vElT1atn8BKQVbll4bnIEQWk6WJTfWDglcTvg4qYZIPPPH7qMrjyo8nV4pDbAi7b1dSSdMgZNhiBtEFT3expq\/Q\/RqJCuulgG1FvSWDkEHuOCM4IO2BeuG4xWTQZKjkoOpRyuW+ZT8HdTjtYqM6b6P1fS2yHuWlkxnrbRA+LpKmRJK6dzselVcG9GctnPO\/KSokCZTEfQMCyykkK2cSNjidJ5jPIifVQ63TEMUnlsoPIDTI0wQcSIIw1OeD4pWtxIIIwTtHNW7wNxz0gn1ct+I4cw1k4IzbY\/oHwyI5SRtIFOM4KmepaX5r7urg2J\/21zv8AwTzJ5k8yO7FXKqJ5pbhPC3laJTiGGNjNqy05z63PnNXuu9R923gFzH+0eKKKKKKoorPvPHwzNwtlwpKpfBcj1VNq6NR8NRUe8VoNFFoVTSqtqD8pB7lOm8scHDYZXzFwNpbrDUQciF1CS3KIO+DzEQciCyz73oIRWGuGLEYAgRCbTtpkRMQBAOncbnRVhp1WLRnebamfbIzTe35N8Gvo8Jw49llB\/wCNV9IdLja3SVHcBGQ7x22E2FgABYOLJMkeKxfh+JFsMxkxMqCDJx6Z5kdwgDxM0xu8dA1XWBJI0oDgzhQZMt795xuSd5PQXCnfhrB\/4Sfsrux0NwyYTh7K\/i21H3CqQwABku8PuonE9Xisr4Dh7fDWCzXLYu3ILkMDoCgkDG+kam8WgbGKYdIHRFx1xEKhYAQNrZ7h6TMcznlg7MejLB3s2vzF\/ZXCdDcMDI4eyD4W1H6qj\/LzM6\/h90vSerx+ywzgirXW4i+6nSZALRLwJLd1tFg7b6QNoM\/0dxNrXN67Zg9rtOgPLEauyY0iOQEbiTrP\/wAfZ\/2Vv8wfspQcMg2RfzRTu0frfn8Mh3pDERsWTjpS0r3L3W2WKgqv0qnUzDcQTuSiDuAJqTt9IWVQFuIt6mAkl1naNgcZ5eJrRf3Mn1F\/NFA4ZPqL+aKEdFg5v8Pun9K6vFZvwHSnDrbCLftHT2f4xSTp9hz7ad8Z0xYuWeqbiLadq2wbWv8A9dxX2JH1QKv62wNgB7BXrIDuAakzRmqdYPvw+6Z2I1hBask4rgeFulw3HIbWm8LSrp1Ib99L7EsH7cOg0wAQOZOaeLa4VHLWuMW2Fu9daUlWCXGttbuaizzcR1bYkEHY8q08IBsB8K6NWPRX\/qeA+qHrt+HxKyHh+C4W2q9X0hZLq14zd0upHEqFupC3VMdlCssSIzqnDjo08NYvdavEcHcci2DddgL3YspaYKA0CVSd8EnBrU+rXuHwrw2VO6r8BSOFqEH1\/wD5+6YPbu8Vnt7prhiZ\/dFn+1T9tJP0tYUD6VI2nWMeO+a0cWE+qvwFd6R3VTGiG7X+EfMo\/pZ3LL7nSvDvb6tuIt6gY16ljUoDB8GI2PdMjwrjhOmuHu2ij37asBB+lUGRzBJzBG+eRrUtA7h8K56lPqr8BU\/5U34vD7pvSjuWL9HdKpacjrbRGVIDKV9LaAcDMj8FiNzUi3SiWX0ret6WUFCXXZfUMmRAIHw3JNasbCfUX4CvBwlsbIg\/JH7KkdGAmdbw+6b0k7lkK8ajXmdGUBysGRCuMDbdSWKnwucuSt42XUJ2Q3IEgSBMISNikOobcBAcgw2qXejLDelZtt7UU\/eK8\/8AieH\/ANha\/s1\/ZTfy28h\/h90\/pP8A4+P2WPXrio2pbjDdlJIkFcNJGJU4Zc6gJE83tvpqzp1dbZRlbUTrEBgDJA1ZVsyN8uJ1QTqg6KsDazaH\/DX9lL\/uZPqL+aKc6NBzf4fdN6T1LB+mrlm0637Fy3pZ+1bDqTbu+kVwe0jekCcSdxK0sb1t1YB00oJidRAIiIB7SxMd6kqYIrcv3Mn1F\/NFIXejLDelZtN7UU\/eKm7AT+bw+\/PGZQxJGxVLzUWyLPEnOluIkE5kizZVob1wCsauZBnINXqk0QAAAAAbACAKUq8xuq0N3Ku4ySUUUUVJMiiiikkiiiikkiiiikkiiiikkiiiikkiiiikkiiiikkiiiikkiiiikkiiiikkiiiikkiiiikkiiiikkiiiikkiiiikkiiiikkiiiikkv\/9k=\" alt=\"Mountains\" style=\"width:100%\" height=\"200\" width=\"200\">\n  <\/div>\n<\/div>","f7fe26a9":"### Well when you go on to buy a car what do you look for ?<br>1. Well is this company well known ?<br>2. Does the car have good reviews ? <br>3. What mileage does it give ?<br>4. What is it's cost ? etc. <br>Exactly so many questions are there !! <br>I will try to solve some of these questions using this awesome dataset<br>Add your questions in the comment section will try to explore that as well :)","6f16ae33":"<h1 style=\"background-color:#dbf6e9;\">Well we worked with mileage and Price but is that it? Umm would it work if your car has 2 seats and you are buying for family of 5 <\/h1>","a27b8099":"### The above plot(1.1) shows the companies vs their price\/mileage plot which shows the price of the car per mileage which means that if the value is small the company provides you with a car with high mileage at low price .<br><br>Every plot has 2 tables beside it showing you the tabular data for the top 2 companies data <br> <br>This is an interactive plot showing other options for different seats as well :)","7092159f":"<h1 style=\"background-color:powderblue;\"> Why do we need this analysis on cars ? <\/h1>","d0bd31d4":"<h1 style=\"background-color:#ffd3b4;\"> Well I have checked the price but what about mileage ?<\/h1>\n\n### Getting this question in your mind is absolutely right . Well if you buy a new car and it's cheap as compared to others , <br>but it's mileage is pretty bad . I'm pretty sure it will cost you more than the other cars in the near future . <br>The next question you might get is what effects mileage of a car well we can know that from a simple heat map you know?<br>Let's try that","3195e088":"<h1 style=\"background-color:powderblue;\"> Which Company Is The Best ? <\/h1>","adc6eaa5":"<div class=\"row\">\n  <div class=\"column\">\n      <img  src='https:\/\/ocean.si.edu\/sites\/default\/files\/styles\/article_full_width\/public\/chameleon_mclaren.jpg?itok=PCU4VPg-' alt=\"Hope\" style=\"width:100%\" height=\"200\" width=\"200\">\n  <\/div>\n  <div class=\"column\">\n    <img src=\"https:\/\/imgcdnblog.carmudi.com.ph\/carmudi-ph\/wp-content\/uploads\/2017\/05\/17060108\/onlineimageresize_com_1967alfaromeotipo33stradale8.jpg\" alt=\"For\" height=\"200\" width=\"200\" style=\"width:100%\">\n  <\/div>\n  <div class=\"column\">\n    <img src=\"data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAoHCBYWFRgWFhYYGRgaGBgYGhoaGhocGRgYGBgZGRgYGBgcIS4lHB4rHxgYJjgmKy8xNTU1GiQ7QDs0Py40NTEBDAwMEA8QGhISHjUrISQ0NDE2NDQ0NDY0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0MTQxNDQ0NDQ0NDY0NP\/AABEIALQBGAMBIgACEQEDEQH\/xAAbAAABBQEBAAAAAAAAAAAAAAADAQIEBQYAB\/\/EAEkQAAIBAgMEBgYHBAcHBQAAAAECAAMRBBIhBTFBUQZhcYGRoRMUIjJSsUJiksHR4fAHFRaCI0NTk6LC0kRUY3KUw\/EkM3ODsv\/EABkBAQEBAQEBAAAAAAAAAAAAAAABAgMEBf\/EAC0RAAIBAwMCBAYCAwAAAAAAAAABAgMREgQhMUFRExQicUJhgZGhsQUyUtHx\/9oADAMBAAIRAxEAPwCgVodZFWEVps4EiIIzPOVoAQmOR4yL6OASkaKZHRrQqtAFyzgkcDHBoAiCFVIgj1fqgHLTh0SDVoVYA8JHqkaBCKIA4LFCTlWGUQBipCClHosMqwAAox60ofQRwYQS4EU4REg6+LVd8qK+1STpoIKXrVAI5K4vvmWOKY8ZKwlcgwDWI4tCobyuwj3AllSWAHQQyiMRYUCAdaEWIBHAQB6wqxiiEQSMBEE6OUToB4Apjss5RCokoBiOUw3o4vo4AMGFW8QUY4IRAHAxQIqqYtoAgBjw5iB5wMAkU3ENpAIsKqwAgEKkBeERoBJQR2ojKbiFJEAJThwkiLUHOSUqCCMKEnM4UXMC+IAlXj8T1wLEjE4zXfI52hl4ylrYmRnrGClhisWWNye6RvTSEapjhVkuCatS8l0Kp5yrSpJVNxzgGiwOPK6TSYDHKw65h6LSywtcqbiUG8SEEz+A2udzC8vaGIRxoYIwqrDZY0LCJBTlEKojRCqIAoE6KJ0gPBgkIEjVaFUygVRCBYqKOUULAGhYhEIYgtAOWc63i5hGu0AQicFg2cRA\/XADBiI8VOcj+lEaasAnI8L6UCV4cxQ5gFj6Uc48YjSVgeFR4BLFTqijE9dpFd4KATMRWtxlTiKpJk1tYJqUgsVrwcnNQgnpwWxGIjDJJWMKQLMACZIpuYmSOCwiEmliLSwoYoSpVYZDKDRUcUJY4TFEG4MzNJ5Ow9W0A3mB2iDoxlqljuMwuFxPXLnCbRy8YBplEIsrMJtC++WSm8AdOnCdIDwtVhkSL6KJkMpLhlMVnEBrBO5gpK9IIJ25SLmMX0ggElTB1IIVIjOYBzHrgyDHRSIAgEIqxq3hUBY2UXPISXCTbshha0udn7Aq1AGIKJzIFz3EjSG2bg1pkO1mfhcAhewHj1y4\/ejfEf12SNSfB1jKjD+12\/wNo9EUHvM7djBfII3zk1ej9Ff6u\/a7n5ASL+9G5nxMa+MJG+Z8OXc0tTTXESY+yqY3UqfeHP8AngHwKDclDvpsf88r3xcA2NkdN9za1kV8JYtgzwTC\/wDT3\/zxjYDmmG\/6cf65U1NogcZErbZUcY8P5mlr0uIl0+Et9DC\/3A\/1wT4f\/h4b+5t\/nmaq7c5SHW2\/b6XnJ4XzNLXX+E0tUBd9LDW\/+Nx5h5WV8fRW5OGRra+xUqIT2anXqmcr7VzfSPiYXZdT0lakmpzOngpznyXzmcLHaGqUnazVz1HD9F8PUTOcyXsdCul9w1XrkOp0XwZJVcbZuTBDr1gZYz9oGOelgUp0iRUrOtNSNCAbsxvwGUML8LzzehsJiNcW2bkqllvxsS4JHcJtI4VZ2k1ZWPQsR0JrAZqTJWH1Tlb7LaecpHwzKxVkZWG9WBBHcZS4WpicBVpN6ZijG4K3QXBGjqDZt40N73PKem9ONtKuFo4kU1qU2KhkbRgGtfI41Rh7Q5aagzSbXJ5nFPgyCJDrTlo+ys1JMRRu9CoodWt7ag8HXgQdLjTThApQM0tzDTWzBUzaS6DnnOXCmETDHlKQssHiJpMBigRYmZSlSIlnhzaCXNUDOlVh8XadBTy\/0q84hYc5T5o4MecEsWTuIGpIxqkcYhxR5AwBzrAuYgqM5yqCTyAufARalMj3iAeW894W9u+0jklydqdGpU\/rFv2QwGLmMcipbV7fyN90bdb6OD\/K9\/ACY8SPc7LQah\/AEQyw2fhRUdULhM3E68N3ad0mYHovXcBiVQHdnuG+yASO+0sj0PJ\/2kL2Jc9xLD5Q5q2whpJZJSaS+5UYnAKjkKxYDja1zyAElYTDlBcI5J5KT8pPfonR+niazHtUeA1tDYTo9g0N71GPW5F+3JlvMZPqeyWkg16W0uyRDajVP9U\/2DGNQr8KL+A\/GXg2fgt\/oE17f9UU4bBL\/UU79SXJms2jj5CL7\/YoRhsR\/Yv\/AIfxj6lOv\/ZP\/h\/GaKlhEb3cPTQc2UX+yJNo7PQb8o\/5UAt2Rm2YeihHls8\/r0MSd1F\/L8ZBr4LGHdh6p7Fv8p6fWwzk+zUUDs9rvY3HlItTCYgaio7dQamP+2PnDkwtJTfU8b2q9enb0tN6d92dWXNzsSNZVvjHM9i2zs44hfRV6dQBra5VYaG4u6s2UX14TPVP2fUL+wG73sPMSZmvJf4tHm71mPGNAM9FboAm7Ija78+vgCl5Nw37PqJ0agb8\/Sso8qjy5Ij0jj1X3PMVDEXHDmbeE1X7OcOXxZY6imhPPViFHlmmpb9mlJtyW\/8Avf70Mt+i3Qz1M1GGpfL71TMAqXIF8i8zDaLCDi021sVn7RKBdqbDdRABHXWuA3aAtv55mcISvujMeeth3jfLfpLtEKWUuXznOynTMb+yptqEAHflj9m9EMbXQO1f1dWF1RKWY5T7p0YEXGtphyb2R7aVKnRWddXb4XQiVcL6yq06q5VzBs6e+hGlxmuDoSLdfCW2Mwzts\/FYNzmekFqobWzKbXIHLVWPI1COEJS\/Zrcf0mMruexkHg6tLfZPQcUM\/o6xbOGUh2DDKy5StggNtx37wJU31PJqpUZNOmrfooegm1ay7My0iM6tV9HmGYXzFgrDiLkjvlLtvaVa6VVNSkKqljTJYCnUU5aiKDYhb2I6m00mjfojXpqESsqAAhUQOAO2xHO5Jvvllsroa2hxGId770B9j\/Fc36xaZeTe53SpRgpJ72+5j+jG1az4lM1V2VTmZS1wwH0SDzJE9KXDgkm1rm9uXVG4\/YYpUD6oiCogugb2g1jcqc3E68R2iD2DthMRSDgZWBKVE4o43r2agjqInSlZNq54dTLxIqSVrbEj1acaKjfHYjGACU9TFG86niLM1lGgM6VIrnlOgHnTYdhG5W5S+9BeOGFEuIyM4yNL\/ZXRl3AeqxRDqBb2yOzh3w3qQmbq7drrXejSr5lRUUFhTIuLXAYKNANO0GYndHp0zg3eSN9R2bQQEKhNxYks3tDkQpAt1Wg1wVBd1Cl3oD85hzt7HJvCMNDfK53sFt7LWvrw0iY7pjWpMFemrXF9GdePIgzjY+vDU0kuWb9KyJ7tKkOxFHyEBtDFvUWynIQQVZVUlTfUgMCLkXF7aAm0wqdObmzUGvp7rg77W3qOcevTakd6VBv+E7hf4uqTGR0VbTvl\/s0Tesj\/AGup9il1fU6j4yvxmOxKGwxTk8bpT03cl\/V4fA4ipXvkw2J3A+0ire97WLuA27hK7GEoxV8NigwJBtSJF+NmFwe4yeo7U3o1vJiHHYn\/AHh\/sp1\/V6x4dsb69iP94f7KdX1eo+MrW6QYcW9mtrqNF1H2o3+IKGv9HVNt\/u\/jFpHfx9Cur\/JfYba1VRZnL9ZsD5CS6W32X3UUddzfvMyY6Q0Tuo1D\/MPuMG\/SWn\/YN3v+AjGRvzuiSt\/s2v8AFNXkvnF\/iuvwyDuP4zIYTbIcgCgqg8WqNYb9TZTyhcTtEo2UpR4653Yadi6nfGMjm9Zoe34NX\/FmI+Jfs\/nO\/imsd727ABMvidoFGyhEY2X+qewLKDa7Ou69r9U6htRy2UpSX3wPYHvKpIF89jcgC4PGS0u5h67QriP4NQu12c2LOx5Ak+QlzgcI5sXYqOV\/a7zuHnPKW6Y4hScno14XCcByuTN1+z7aOIr03q13LAuqp7KqPZ98jKB8QHdNYtK7PPPXQm8aUbG5w6BBoLfPxkilXuZBq1JkulPSN6behoH2z7zDelxcKt9M1tb8BbidG\/J58L3cn9WekesKiszXyqLnS+kjbR2yiUhUC+lRgNUsRlbcesG9u8TwOvtXEUamZs4LfSDli194Yn3tPonfPV+hG06eLwZRQEZQVdV0FmvZ0U7tc3s7gRytKo9zzTjTs3F3YTZXR3Cs\/rWZ6pYghKmXKhuNCoAuV4X8982YxImf2ZsxqSOpqZ82o9gLY2sdx1vp4SxzC172HXNJRXBicpVLOTu0WIriEFQSkfH0l96qg7XUfMwD9IcMu\/E0u51Pyj6nNU2+EXeKUaNy0PYfwNvOB9MBKDEdMcIqkGte4I0RzfTh7OsBsfbqYkuEzEJlzMRZbtewGtydD4TPLs2dVRljdp2RrKDFuM8ywmIahtStRK5FrE+zwzhS6up5EZ\/tDlLbpR0nqUctDDgGs65ixtaml7XIb2bnmbgcjcTEYLa9Sti6L1S3pKVWkj5spJR30YMoAYe03D6Ut9010KorGSdt1sj0tqGaNXZ5lrkERkPCemx8u5XpgSJ0skpniYklgec03vJCEyAhI3SXSeaRGiNtahSqBUrEqu8G1wDcDUffw6pTr0UXNmoVUfsPDkQLiSOkZYvRVSAWJUFrlQd4uARyt3zIVNqMrsrIt1YqSMw3HU31nmkpZOx9vTVqEaUYzS47XNDitkYlVKqlgWBYofey7hYNz5iV218JVfKXQra41Q8bX3jqkvB7Tci61Db6rlracVNsveIfE7eq01LZiwFtCF523gXmMmnY9apaacHJcfIzfqbhg2VTa3Eg6W14DhBrQZSGFMi19blhuOhG\/wA5oG6Wtpnoq1xy\/Ezh0ioH3sNbsyzd5djyujpX\/WdvfcLsjpvXpH26eawsoF0AAFrag\/oSJtXpnicSro2U0ydFykm19AWB320uLdVoWptjCkf+04\/Wn0oM7Zw3wOe\/85lRSd0tyuhTa3qr7FFiEzZbU6hsqqMu72Rb4Txi06TZSvonuSDqwBsL8cu7WW527h+FFj2kRP4go8KPiR+E1eXYi02nXNX8FVTw7KQfR2sd5cHXhoDznfu9vhUdrMflL7D7WRhdaa6aG998KdotwRPA\/jMuTPXD+NoySkpNp9iow2GawB9nsJsOHXD1cK4IyXJF9Tutwty4+Mn\/ALyfkg\/l\/GMbH1PiHcq\/hM5M7L+OoL\/qIz0a7kMb3sBqxPugBSNOQHhOXYrv775d+trAX3nfqY98U53u32iIJnvqdT1m8XZvyOmirW\/JJXo5hkuzVM3IZgFJ10014c5ssPt7C0UVENgtgFUbgNTru778Zg8p5fo6iKDJlI15SiuFb2PRanSmiykobvY5QwO\/hfqmTo4YuS5YZnuxdzlVEvq7nTViRpxLqNLEyrQ2U\/WIQd\/vf4QZM6S4JvUkqKTY1faUcVXMiE9j5\/7wchNw33Z8nXNQl4cfdhdo7DZaYqMWejUupJUKRqAKii5uoYjX5i5FF0Xx9WhVdEdkJVgSpsbi17dRA8gZ6z01UKiUjayU0Rh1WCn7p5H6Ipi15m4J6wGRj\/hv3zT4aPHRfrT+ZtMZXxKojtWRgwuR6d2Zd2jIxFmOpAHwnqvVmgp1Ylj1z0apTVaroECo2GZ0VBTCXNAXuqi+9WPAgkEaEzzpHFt\/Ceeu8bWPdpajlkPREH0R3iFzL8I+ysFmHOcJ5nKT6nqe4YEAaKFvpcACbroxs0YfDqp0Zru994LbgexQB3GZDYeE9LXRPog52H1U1t3mw75s+kuKyYaq17ErkHa5yX87909FFWTbPPWk3aC6mOo4hatWviGDFGdVGT3yhZURVvuJLoDyAJ4SPW2K+G2hSpvpnCGwObJd1dabN9IqV36+9vMmdCWDtTDACm9YlmOgU4dRWAJOgGV2JP1ZOxmLXEbTR1N1WqwB4ZVpMynvyCd0nsj5k5eps3d44NInrafEIjYxAN9+ob56zxE5WiyqG09fcPjOkB5+jx5qcorYRgQM668eHeZIGyn+NPtTHiR7nTCXYznSRyopuT7lRW7LMsznSCjlxFYHiQ32gDNX0owDKqqwBVgTmXVRruJtYHjMo2zlvfO3z\/Cc3NXZ9CnpKs4RlFdLA9i0WzhiDbKbG2hPu6Hjxlxi0ujDmp+UeKwNtRoAAAMoUDcANwEUODxHiJwlK8ro+rQ08oUXFrd3KhKOYJrYa3PV28IUYMWHtqe8A8915z02AtkbQ8Bw1jVqW3o3nPTdHw5Upx5THthB1GRfVd+79W\/GS2rEjS\/n8pBqsQdzHsUymbMacJ1rx4wBwh6vGPLW+i3gYxmPCBuStjnKzr1fI2++WeIS6MTf2QDYEjMScoBI3DUk9Syt2XTbMSQQMttRa5JG7wlrcWIOoYWI8\/unGW0j7ujjKelcfexncQWFjm0IvbMCR1EA3HfDYTIw9qoytrvvl6tRr5SyejSYZaqspGiuntXXhmHOV+I2XY\/0bq4vYDc3C2h7T4GdUtrnyZxqRk073Jq7GVtRWp5bEkliCBpwOu6\/hINDCq9bKt8g1JO\/KurHTdfh2iRvVambLlbNe1gCT5b5eYLDeiQg+81s9tcoGoW\/O+p7hwmZSsjppqEqtRJ8dQmMxGVWbwHC+4AdQ+QgtkU8qXO9zmPYLhfO57xBYrCvVtbKqg6ksO8hb3NhyEnXHDQCwA5ACwHgBOXEfc+qrzrXa9MVZe4zE1bOijkW7zoPkfGbLYOPQ5FdfSIGRXQi\/wDS0QjFQOOYZSOvTnPP8Q96p6jYdwt87z0foRSzUazopUis9Fmb3S1ZiDUUhbra1NbkkAE3sJ0ivSfG1UsqjfzKfa+0qmJxZFVAxUk2C5gjFVcEablVQM3Wecq9q0f\/AFNL\/mf\/APCP82M2aYihh30xFKo62VmyJnpuosQagXhYrqx7pm9u1c+LLEg77sLW9pKQv7Om4HdI2ZobzRrm6aJk9jDEuaS0izFAb5cpbOisTpwYjcN0oMJga1W2SiH+tksOv29wlXQxpU3W17G1wrd4DA69cNiNq1X9+o56mY27lJtOcvVyfQhSVO9nyaM9GUBBrVqVEcVDhmPcSAO68l0BsqjvLVmHMMwPdYKZhjXHV3QT4tRxkUY9iyTfLf0PRW6aUEslHDGwzHU06aZQpLEm9lAAvc23TO9NNt1HoqXRKaOpdFSoj5raKWKkgAE7tPLTJYx2dGCa3sp1ynKWDG1yL+54XkPpDidVQG4VQNLWsL7jxBYue8Too3R5JSxk7Lj9noP7PtnNWwTZVYlapKMAuUMyojn2tMyqtxfq5yY+w\/VqqIzq7ZzcAEOt6LsLjUHQjUE6zI9CulDUaa4dhmpN6XMoJVruqqWDDcwsLd+682GE2WaVDD1XdmqVGqPlNsoUKy3XS+uZTvPvTa5R4p7JlgqDlfxhFXsEjeknZzznoPMSxfmO2LIquec6ANKKeA8Inqq\/CPCBXFj9GPGMX9GeGx7yPtPA3pvlAzZTbr6p5fiaxUmxnrDYxf1rMF0t2MARUoB2zly6gXC7iMoAvY3bnKkdqVVwTRnfXm6v12RPX\/qjxkG\/WImYcxOmKOi1lRcMsk2iOR7rSdh9u5Te7HqbVfAGUFuyJl\/V5MEb8\/U67\/Q1bbeosNUAPUL\/AHRn76o\/D5flMtOtGJVrpdkaj99UvhHh+UaduU\/hHh+UzE68Yl89LsjT\/v1Ph8vynfxAvw+UzF52aTAvnp\/I0w6RfV8vzhB0n\/4Y7\/8AxMteKDGJPNyfYvcTtpnJuAByHL74KpjmYAXAHICw8t8qQ0MjiZcUdoalvZssUqwqVNfPwkBHHOdVrgKwBFyLDv3+UKJ2lXSg22CpvmdSfpPr\/MdZ67W22mGwuGSmqgZkzAj2atdj\/SFh8JObx7J41m+c0+L9LXOFyhnUFbKqliHZgxJA11tbqt1zsfClu9zf4HYtDEbVWtTU+jdBXdGAstS1mFuILAE8yzTJ9KKw9dxIS1lqFBoPoKqf5ZveiWOTD4etiH306ZAB4kuwC9pYIO+eJY7GO1RzmJzOxJ5knU+Mj3RqlJRldl41Xm3n90C+KUb2lBmc84RKbncDM4noepfRFlU2gnb3kxgxd9zhOxSfugKeCqncpkqnsqudwHfLZHN1pEDF4pg1g5Yaa6jusZEuSbk6zQP0dxDgA5OqcvRCv8SjxlTSOcpSlyyX0Gw1Go5So2RgGKE7idCFbkDY68LielbZxSvVpqjIFo0AoDEi7PlJI6vYA8+M84wHRKsjBxWVSCDdQxIPiJraOzwNXOdt5ZtSTxJMzKXYxjfknZm4NSP85v4WhUR+Jpjtfn3SIMEnwjwjvU0+EeEznLuPCj2JyI\/FqX94f9M6QfVE+BfCdHiS7k8GJHsw4jwMYxbqktE0i+iHKQ6lc9Vh9H9eEhV9oEb0Yy9agOUa2FHKCHm22qaOxZabIxNzroTxJW2\/sMpmwzT158Cp3oDIlTZNM70HgJtSJY8p9C0Ph6jIQwVSQQwJF9Ru0M9IPR6id6DzEG3Rekfo+ZlyGJiqm3q7e9kPain5iRn2gx306P8Adp903L9EqZ3X8YBuiCczGSFjDnFH4E+z+BjGxH1E7gfxm3bocvxGDPQ7rlyRLGKNX6o840v1TZt0OPOM\/hA9f67oyQszHBzOzGbL+D\/rHwnfwiOL+UmSLZmOD9kW\/UJsv4RX444dDlP0zF0DGq9uAnValzewGltJtB0MXiT42hV6F0+Ob7UuSBhA00HR3bz4dgy71NxcZgQd6svFT+tRL9ehlDjn+1Cp0Tww+gx7WcfeIyRMQe2dvNiicgVc1nYIrBM1t5DEm+\/xPM3qKHR8nfNVQ2XTQezTA\/XMw6oB9AzDkVIz9DYIHDylhS2Uo3Dy\/KWiuvIx61l\/QmbspDpYMD6PlJC0rfRPhDB+yKS3IeJg0IKZ4fKK1K\/6M4Zvh8zH5CeB8fzgDVo2\/wDJ6uuORT+iTF9E3XFCt1yAUVO3znCrzju35xLdUAUN1Toy3V4GdAEVoTOOR8DIS1eSmEFV\/h8zKZsSwwi5hInpn+GKGfjltAJBaIEO\/wDXyg0zcxCBWPEwB4WIVtGqnae2OZOqAL4TgREWj1ATvRwQcStowlecdkAhMo5wAOkTMIY2jDaCjdJ3ogeHlFLiIanVeLAaaI5DwnGhfge42ji\/K3Xqd3hHX5X84AJcL2+P32neqdvefyhc9uMcHgAkwvXHeqdsIGHOKSIFwa4W0RqVuMK3aYwd\/jIBhQc\/MRPRc\/CF3RQe6ADyRFX9flCZuUTNKBt9eMeG7YjVRyMa5B5iAOFzu\/COykcfGCy9d41nkAcj9WjbdflBrViF\/wBawB7LynQTueBnQCEo1t95\/GSVnToZQqJ2+Jj1HWZ06CCgdZjos6UgkfOnQUcYxp06ADc9QiM\/UPCdOggt4k6dBQbRWnToIPUxhPUN86dBR5jhOnQQ5o5Z06AxYgnToKKfuiPOnQQHmitOnQUG26Ks6dABF92g48Jx3d0SdAEvruE5T1CLOgpwnTp0yD\/\/2Q==\" alt=\"Mon\" style=\"width:100%\" height=\"200\" width=\"200\">\n  <\/div>\n<\/div>"}}