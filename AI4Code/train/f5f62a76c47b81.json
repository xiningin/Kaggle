{"cell_type":{"3925b357":"code","0df8bf9e":"code","d89e999e":"code","ce20248a":"code","b9f3420a":"code","c1b68527":"code","50edffe5":"code","c3dcf8f4":"code","2bda0450":"code","af13e5ff":"code","5bd74b72":"code","5a6b4619":"code","ef88e6e7":"code","112aed76":"code","7c15c0c1":"code","59d205a4":"code","457fcd14":"code","b9709ef4":"code","71f315a8":"code","6176b79b":"code","422e940d":"code","ee07732d":"code","462e36c5":"code","4879fc80":"code","afd0fd49":"code","69ab581d":"code","bde7e050":"code","fca2dbd1":"code","b09dc09c":"markdown","99cbff6f":"markdown","60694a0b":"markdown","8d0bd25c":"markdown","0c44078f":"markdown","7a6fed25":"markdown","184135d7":"markdown","06918273":"markdown","41e7068b":"markdown","e767cdce":"markdown","21ed7f34":"markdown","4d9fed4e":"markdown","c5a1a278":"markdown","5dbd929b":"markdown","aababfb4":"markdown","064c3f15":"markdown","3a39984f":"markdown","196cd0d6":"markdown","23983080":"markdown","f455832d":"markdown","66e79f18":"markdown","1c392283":"markdown","6c922d37":"markdown","a7e6335c":"markdown","ebc29b51":"markdown","8f751471":"markdown","4bafe86e":"markdown"},"source":{"3925b357":"# Anaconda Prompt > \"$ pip install yfinance --upgrade --no-cache-dir\"\n# https:\/\/pypi.org\/project\/fix-yahoo-finance\/","0df8bf9e":"## Optional: Install packages\n!pip install yfinance --upgrade --no-cache-dir","d89e999e":"import pandas as pd\nimport numpy as np\nimport datetime as dt\nfrom sklearn import linear_model\nimport scipy.stats as st\nimport yfinance as yf","ce20248a":"symbols_list = [\"^GSPC\", \"TSLA\", \"GOOGL\", \"WMT\", \"DIS\", \"XOM\"]\nstart = dt.datetime(2015, 1, 1)\nend = dt.datetime(2020, 12, 31)\n\ndata = yf.download(symbols_list, start=start, end=end)","b9f3420a":"data","c1b68527":"# Specify ticker\n# Event: ticker and eventdate\n# Tesla on 10\/24\/2018 announces its earnings. The earnings surprise is +627.27% (i.e., 6X the estimated EPS).\n# ((Actual EPS - Estimated EPS) \/ absolute Estimated EPS) * 100 = EPS Surprise %\n\neventdate = dt.datetime(2018, 10, 24)\nticker = \"TSLA\"\n\nestimation_period = 252\nbefore_event = 20\nevent_window_start = -20\nevent_window_end = 20","50edffe5":"# Calculate returns\nmain_data = data[\"Adj Close\"] \/ data[\"Adj Close\"].shift(1) - 1\nmain_data = main_data.dropna()\nmain_data = main_data.reset_index()\ndata_ret = main_data.copy()","c3dcf8f4":"data_ret.head()","2bda0450":"# Identify post-event dates\ndata_ret['post_event'] = (data_ret['Date'] >= eventdate).astype(int)\n\n# We will use the index to identify trading days relative to the event\ndata_ret = data_ret.reset_index()","af13e5ff":"data_ret","5bd74b72":"# Identify the index for the event date\nevent_date_index = data_ret.groupby(['post_event'])['index'].transform('min').max()\ndata_ret['event_date_index'] = event_date_index\n\n# Create the variable day relative to event\ndata_ret['rel_day'] = data_ret['index'] - data_ret['event_date_index']\n\n# Check whether relative day 0 corresponds to the event date (2018,10,24) \n# event date is 959 trading days from (2015,1,1)\ndata_ret[data_ret['rel_day'] == 0]","5a6b4619":"# Identify estimation period\nestimation = data_ret[(data_ret['rel_day'] < -before_event) & (data_ret['rel_day'] >= -estimation_period-before_event)]\n\n# Check the last (relative) day of the estimation period\nestimation['rel_day'].max()","ef88e6e7":"# convert from row to column vector\n# We call .reshape() on x because this array has to be two-dimensional (i.e., one column and as many rows as necessary). \nx_df = estimation['^GSPC'].values.reshape(-1, 1)","112aed76":"# Create an empty list to store betas\n# Note: for the sake of simplicity, we are ignoring the intercepts here\nbetas = []\nalphas = []\n\nfor y in symbols_list:\n        \n    y_df = estimation[y].values\n    reg = linear_model.LinearRegression()\n    betas.append(reg.fit(x_df, y_df).coef_)\n    alphas.append(reg.fit(x_df, y_df).intercept_)","7c15c0c1":"# Convert the list to a Numpy Array\n# beta coefficients\nbeta_np = np.array(betas)\nprint(beta_np)\n\n# intercepts\n# for brevity, we are ignoring the alphas in calculating the expected returns - the values are very small\nalpha_np = np.array(alphas)\nprint(alpha_np)","59d205a4":"# Identify event period [-20,20]\nevent = data_ret[(data_ret['rel_day'] <= event_window_end) & (data_ret['rel_day'] >= event_window_start)]","457fcd14":"event[[\"index\",\"Date\",\"TSLA\",\"^GSPC\",\"event_date_index\",\"rel_day\"]].head(41)","b9709ef4":"# Expected Returns via Beta\n# Need Numpy Array to do Calculations!\nsp500array = event['^GSPC'].values\n\n# numpy.outer() function compute the outer product of two vectors\nexpected_returns = np.outer(sp500array, beta_np)\nexpected_returns = pd.DataFrame(expected_returns, index=event.index)\nexpected_returns.columns = symbols_list\nexpected_returns = expected_returns.rename(columns={\"TSLA\": \"expected_return\"})\nexpected_returns[['expected_return']]","71f315a8":"# Abnormal Returns\nevent = pd.concat([event, expected_returns], axis=1)\nevent ['abnormal_return'] = event['TSLA'] - event['expected_return']\n","6176b79b":"event.head()","422e940d":"# Event CAR\nwinar1 = event[(event['rel_day'] <= 1)  & (event['rel_day'] >= -1)]['abnormal_return'].sum() # CAR[-1,+1]\nwinar2 = event[(event['rel_day'] <= 1)  & (event['rel_day'] >= 0)]['abnormal_return'].sum() # CAR[0,+1]\n\nprint(\"CAR [-1,+1]  = \" + str(winar1))\nprint(\"CAR [0,1]  = \" + str(winar2))\nprint(\"*\"*80)\n\n# Day-by-day AR\nwinar3 = event[(event['rel_day'] <= -1)  & (event['rel_day'] >= -1)]['abnormal_return'].sum() # Event Day -1\nwinar4 = event[(event['rel_day'] <= 0)  & (event['rel_day'] >= 0)]['abnormal_return'].sum() # Event Day 0\nwinar5 = event[(event['rel_day'] <= 1)  & (event['rel_day'] >= 1)]['abnormal_return'].sum() # Event Day 1\n\nprint(\"AR -1  = \" + str(winar3))\nprint(\"AR 0  = \" + str(winar4))\nprint(\"AR +1  = \" + str(winar5))\nprint(\"*\"*80)\n\n# Post Event CAR\nwinar6 = event[(event['rel_day'] <= 5)  & (event['rel_day'] >= 2)]['abnormal_return'].sum() # CAR[2,5]\nwinar7 = event[(event['rel_day'] <= 10)  & (event['rel_day'] >= 2)]['abnormal_return'].sum() # CAR[2,10]\nwinar8 = event[(event['rel_day'] <= 20)  & (event['rel_day'] >= 2)]['abnormal_return'].sum() # CAR[2,20]\n\nprint(\"CAR [+2,+5]  = \" + str(winar6))\nprint(\"CAR [+2,+10]  = \" + str(winar7))\nprint(\"CAR [+2,+20]  = \" + str(winar8))\nprint(\"*\"*80)\n\n# Pre Event CAR\nwinar9 = event[(event['rel_day'] <= -2)  & (event['rel_day'] >= -5)]['abnormal_return'].sum() # CAR[-5,-2]\nwinar10 = event[(event['rel_day'] <= -2)  & (event['rel_day'] >= -10)]['abnormal_return'].sum() # CAR[-10,-2]\nwinar11 = event[(event['rel_day'] <= -2)  & (event['rel_day'] >= -20)]['abnormal_return'].sum() # CAR[-20,-2]\n\nprint(\"CAR [-5,-2]  = \" + str(winar9))\nprint(\"CAR [-10,-2]  = \" + str(winar10))\nprint(\"CAR [-20,-2]  = \" + str(winar11))\nprint(\"*\"*80)","ee07732d":"def do_event_study(\n    data_ret,\n    eventdate,\n    ticker,\n    estimation_period=252,\n    before_event=20,\n    event_window_start=-20,\n    event_window_end=20,\n    benchmark=\"^GSPC\",\n):\n    \"\"\"\n    Function takes in the historical returns, an event date of a stock, returns the cumulative abnormal returns (CARS) over\n    a specified timeframe \n    \n    Parameters:\n        data_ret (pd.DataFrame): A dataframe containing daily returns of stock(s) and the specified benchmark. columns: tickers, rows: returns \n        eventdate (datetime): the event date to be studied. eventdate must be within the date frame of data_ret\n        ticker (str): ticker or CUSIP code of the stock to be studied. ticker\/CUSIP must be found in data_ret columns\n        estimation_period (int): number of days used to estimate the beta against the given benchmark \n        before_event (int): number of days before the event to evaluate from \n        event_window_start (int): a negative number specifying the relative number of days before the event date\n        event_window_end (int): a positive number specifying the relative number of days after the event date \n        benchmark (str): ticker symbol of the benchmark used. benchmark must be in data_ret.columns\n        \n    Returns:\n        Tuple of the cumulative abnormal returns over different observation days as below\n        \"CAR[-1, +1]\", \"CAR[0,+1]\", \"Event Day -1\", \"Event Day 0\", \"Event Day 1\",\n        CAR[2,5]\", \"CAR[2,10]\", \"CAR[2,20]\", \"CAR[-5,-2]\", \"CAR[-10,-2]\", \"CAR[-20,-2]\"\"\n    \"\"\"\n\n    # Generate post-event indicator\n    data_ret[\"post_event\"] = (data_ret[\"Date\"] >= eventdate).astype(\n        int\n    )  # 1 if after event, 0 otherwise\n    data_ret = (\n        data_ret.reset_index()\n    )  # pushes out the current index column and create a new one\n\n    # Identify the index for the event date\n    event_date_index = data_ret.groupby([\"post_event\"])[\"index\"].transform(\"min\").max()\n    data_ret[\"event_date_index\"] = event_date_index\n\n    # Create the variable day relative to event\n    data_ret[\"rel_day\"] = data_ret[\"index\"] - data_ret[\"event_date_index\"]\n\n    # Identify estimation period\n    estimation = data_ret[\n        (data_ret[\"rel_day\"] < -before_event)\n        & (data_ret[\"rel_day\"] >= -estimation_period - before_event)\n    ]\n\n    # Identify event period\n    event = data_ret[\n        (data_ret[\"rel_day\"] <= event_window_end)\n        & (data_ret[\"rel_day\"] >= event_window_start)\n    ]\n\n    # Calculate expected returns with the market model\n    x_df = estimation[benchmark].values.reshape(-1, 1)\n\n    # Create an empty list to store betas\n    betas = []\n\n    # Calculate betas for the market model\n    for y in [benchmark, ticker]:\n        y_df = estimation[y].values.reshape(-1, 1)\n        reg = linear_model.LinearRegression()\n        betas.append(reg.fit(x_df, y_df).coef_)\n\n    # Convert the list to a Numpy Array\n    beta_np = np.array(betas)\n    beta_np\n\n    # Expected Returns via Beta\n    # Need Numpy Array to do Calculations!\n    sp500array = event[benchmark].values\n    expected_returns = np.outer(sp500array, beta_np)\n    expected_returns = pd.DataFrame(expected_returns, index=event.index)\n    expected_returns.columns = [benchmark, ticker]\n    expected_returns = expected_returns.rename(columns={ticker: \"expected_return\"})\n    del expected_returns[benchmark]\n\n    # Abnormal Returns\n    event = pd.concat([event, expected_returns], axis=1, ignore_index=False)\n\n    event[\"abnormal_return\"] = event[ticker] - event[\"expected_return\"]\n\n    # Event CAR\n    winar1 = event[(event[\"rel_day\"] <= 1) & (event[\"rel_day\"] >= -1)][\n        \"abnormal_return\"\n    ].sum()  # CAR[-1,+1]\n    winar2 = event[(event[\"rel_day\"] <= 1) & (event[\"rel_day\"] >= 0)][\n        \"abnormal_return\"\n    ].sum()  # CAR[0,+1]\n\n    # Day-by-day AR\n    winar3 = event[(event[\"rel_day\"] <= -1) & (event[\"rel_day\"] >= -1)][\n        \"abnormal_return\"\n    ].sum()  # Event Day -1\n    winar4 = event[(event[\"rel_day\"] <= 0) & (event[\"rel_day\"] >= 0)][\n        \"abnormal_return\"\n    ].sum()  # Event Day 0\n    winar5 = event[(event[\"rel_day\"] <= 1) & (event[\"rel_day\"] >= 1)][\n        \"abnormal_return\"\n    ].sum()  # Event Day 1\n\n    # Post Event CAR\n    winar6 = event[(event[\"rel_day\"] <= 5) & (event[\"rel_day\"] >= 2)][\n        \"abnormal_return\"\n    ].sum()  # CAR[2,5]\n    winar7 = event[(event[\"rel_day\"] <= 10) & (event[\"rel_day\"] >= 2)][\n        \"abnormal_return\"\n    ].sum()  # CAR[2,10]\n    winar8 = event[(event[\"rel_day\"] <= 20) & (event[\"rel_day\"] >= 2)][\n        \"abnormal_return\"\n    ].sum()  # CAR[2,20]\n\n    # Pre Event CAR\n    winar9 = event[(event[\"rel_day\"] <= -2) & (event[\"rel_day\"] >= -5)][\n        \"abnormal_return\"\n    ].sum()  # CAR[-5,-2]\n    winar10 = event[(event[\"rel_day\"] <= -2) & (event[\"rel_day\"] >= -10)][\n        \"abnormal_return\"\n    ].sum()  # CAR[-10,-2]\n    winar11 = event[(event[\"rel_day\"] <= -2) & (event[\"rel_day\"] >= -20)][\n        \"abnormal_return\"\n    ].sum()  # CAR[-20,-2]\n\n    return (\n        winar1,\n        winar2,\n        winar3,\n        winar4,\n        winar5,\n        winar6,\n        winar7,\n        winar8,\n        winar9,\n        winar10,\n        winar11,\n    )","462e36c5":"# local_path = \"C:\/jupyter_workspace\/Fintech\/Codes\/Event Studies\/\"\n\ndata_events = pd.read_csv(\n    \"..\/input\/earnings-surprises-ay2122-sem2\/earnings_surprises.csv\", na_values=[\".\"], parse_dates=[\"Date\"]\n)\ndata_events.tail()","4879fc80":"pos_events = data_events[data_events[\"Type\"] == 1].set_index(\"Ticker\")\ndel pos_events[\"Type\"]","afd0fd49":"pos_events.info()","69ab581d":"cars = []\n\n# for ticker, eventdate in pos_events.items():\n\nfor index, row in pos_events.iterrows():\n    data_ret = main_data[[\"Date\", index, \"^GSPC\"]].copy()\n    cars.append(do_event_study(data_ret, ticker=index, eventdate=row[\"Date\"]))","bde7e050":"cars = pd.DataFrame(cars)\ncars.columns = [\n    \"winar1\",\n    \"winar2\",\n    \"winar3\",\n    \"winar4\",\n    \"winar5\",\n    \"winar6\",\n    \"winar7\",\n    \"winar8\",\n    \"winar9\",\n    \"winar10\",\n    \"winar11\",\n]\ncars","fca2dbd1":"# Calculate the Mean and Standard Deviation of the AAR\nmean_AAR = cars.mean()\nstd_AAR = cars.sem()\n\n# Put everything in Dataframes\nstats = pd.DataFrame(mean_AAR, columns=['Mean AAR'])\nstats['STD AAR'] = std_AAR\nstats['T-Test'] = mean_AAR \/ std_AAR\n\n# Note method sf (survival function) from scipy.stats.t (or st.t) calculates P-values from T-stats\n# The method sf takes two arguments: T-statistic and degree of freedom, i.e., sf(absolute value of t-statistic, degree of freedom)\n# For one-tail test multiply the function output by 1, for two-tail test multiply it by 2\nstats['P-Value']  = st.t.sf(np.abs(stats['T-Test']), len(cars)-1)*2\n\n# Display is a great method to show multiple outputs at once\ndisplay(stats)\n\n# Double check the calculation of T-statistics and P-value\nwinars = ['winar1', 'winar2', 'winar3', 'winar4', 'winar5', 'winar6', 'winar7', 'winar8', 'winar9', 'winar10', 'winar11']\n\nfor winar in winars:\n    print(st.ttest_1samp(cars[winar],0))","b09dc09c":"Ray Ball and Philip Brown (1968), [An Empirical Evaluation of Accounting Income Numbers](https:\/\/www.jstor.org\/stable\/2490232?seq=1). Journal of Accounting Research, 6: 159-178. \n\nThis notebook is adapted from code written by [Jeroen Bouma](https:\/\/gist.github.com\/JerBouma\/56a3be80ce02392c4e4fcae2763c5bcf), ALM Advisor, and [Roland Gemayel](https:\/\/www.kcl.ac.uk\/people\/roland-gemayel), King's College, London. ","99cbff6f":"** Is identifying the event date always clear-cut?  ","60694a0b":"<a id=\"subsection-three-one-three\"><\/a>\n### 3.1.3 Estimate the expected returns during the estimation period.","8d0bd25c":"** What is our NULL hypothesis?  \n** Why is a plausible reason for the failure to reject the NULL hypothesis?  ","0c44078f":"** Under what circumstances will the calculation of abnormal returns be problematic?","7a6fed25":"<a id=\"subsection-three-two\"><\/a>\n## 3.2 How do we run an event study (N events)?","184135d7":"# TABLE OF CONTENTS\n\n* [1. INTRODUCTION](#section-one)\n* [2. SETUP](#section-two)\n    - [2.1 Install Yahoo Finance Package](#subsection-two-one)\n    - [2.2 Draw Packages](#subsection-two-two)\n    - [2.3 Import\/Wrangle Data](#subsection-two-three)\n* [3. EVENT STUDY METHOD](#section-three)\n    - [3.1 Question 1: How do we run an event study (1 event)?](#subsection-three-one)\n        - [3.1.1 Event Date](#subsection-three-one-one)\n        - [3.1.2 Collect returns for sample firms and market index](#subsection-three-one-two)\n        - [3.1.3 Estimate the expected returns during the estimation period](#subsection-three-one-three)\n        - [3.1.4 Predict the expected returns during the event period](#subsection-three-one-four)\n        - [3.1.5 Measure abnormal stock returns](#subsection-three-one-five)\n    - [3.2 Question 2: How do we run an event study (N events)?](#subsection-three-two)\n        - [3.2.1 Generate a function to iteratively run an event study for all events (N events)](#subsection-three-two-one)\n        - [3.2.2 Import earnings surprises from Zacks](#subsection-three-two-two)\n        - [3.2.3 Run event studies on positive earnings surprises](#subsection-three-two-three)\n    - [3.3 Question 3: How stock prices behave around positive earnings surprises?](#subsection-three-three)\n\n* [4. CONCLUSION](#section-four)\n* [5. REFERENCES](#section-five)","06918273":"<a id=\"subsection-three-one-four\"><\/a>\n### 3.1.4 Predict the expected returns during the event period.","41e7068b":"** What are the alternative model specifications?  \n** What is the implicit assumption made over the estimation period?","e767cdce":"<a id=\"section-three\"><\/a>\n# 3. EVENT STUDY METHOD","21ed7f34":"<a id=\"section-one\"><\/a>\n# 1. INTRODUCTION\n\n\u201cSecurity prices accurately reflect all available information, and respond rapidly to new information as soon as it becomes available\u201d Richard Brealey, Stewart Myers, & Franklin Allen, Principles of Corporate Finance, 2016.\n\n## Ball and Brown (1968)\n\nIn the seminal paper, \"An Empirical Evaluation of Accounting Income Numbers\" Ball and Brown (1968) design an empirical test (i.e., the event study methodology) to assess whether security prices adjust rapidly to relevant and important news (i.e., earnings announcement and its information content).\n\n## Objective\n\n- Implement event study methodology to study the behavior of security prices around events\n  [Ball and Brown (1968), An Empirical Evaluation of Accounting Income Numbers](https:\/\/www.jstor.org\/stable\/2490232?seq=1).\n- An event study attempts to measure the valuation effects of a corporate event, such as an earnings announcement, by examining the response of the stock price around the announcement of the event.  \n- Assumption: market is efficient. \n\n\n## Motivation\n\n- Do security prices adjust rapidly to value-relevant news?\n  \n\n## Key Steps\n\n1. Event Dates: To obtain precise announcement dates for a sample of firms.  \n2. Collect returns for sample firms and market index.  \n3. Estimate the expected returns during the event period.\n4. Predict the expected returns during the event period.\n5. Measure abnormal stock returns.","4d9fed4e":"<a id=\"section-two\"><\/a>\n# 2. SETUP","c5a1a278":"<a id=\"subsection-three-one\"><\/a>\n## 3.1 How do we run an event study (1 event)?","5dbd929b":"<a id=\"subsection-two-three\"><\/a>\n## 2.3 Import\/Wrangle Data","aababfb4":"<a id=\"subsection-two-one\"><\/a>\n## 2.1 Install Yahoo Finance Package","064c3f15":"<a id=\"subsection-three-two-two\"><\/a>\n### 3.2.2 Import earnings surprises from Zacks","3a39984f":"<a id=\"subsection-three-two-three\"><\/a>\n### 3.2.3 Run event studies on positive earnings surprises","196cd0d6":"** Why do we have four elements here?  \n** Why is the value of the first element one?  ","23983080":"<a id=\"subsection-three-one-one\"><\/a>\n### 3.1.1 Event Date","f455832d":"<a id=\"subsection-three-two-one\"><\/a>\n### 3.2.1 Generate a function to iteratively run an event study for all events (N events)","66e79f18":"<a id=\"section-four\"><\/a>\n# 4. CONCLUSION\n\nWe look at positive earnings surprises, where the reported earnings per share (EPS) exceeds the estimated EPS. The market reaction to positive earnings surprises are statistically significant. CAR[-1,+1] and CAR [0,+1] is 1.26% and 1.37%, respectively; both significant at 5% significance level. The day -1 to day +1 AR breakdown shows that most market reaction is on day 0 (i.e., earnings announcement date). This is consistent with EMH, specifically, semistrong form EMH. There is no evidence of return drift in this small sample (69 positive earnings surprises) that we look at; the post-event CARs are near zero and statistically insignificant. However, there is evidence of pre-event market reaction. The CARs one-month to two-week before events are 2.59% and 1.55% and statistically significant; this may be attributable to confounding events\/news. The CARs one-week before earnings announcement is statistically and economically weaker. In the absence of major confounding events\/news, this is suggestive evidence of potential information leakage or insider trading. ","1c392283":"<a id=\"subsection-two-two\"><\/a>\n## 2.2 Draw Packages","6c922d37":"** Why do we need the variable \"post_event\"?   \n** What are the alternative windows for the estimation period?  ","a7e6335c":"<a id=\"subsection-three-three\"><\/a>\n## 3.3 How do stock prices behave around positive earnings surprises?","ebc29b51":"<a id=\"subsection-three-one-five\"><\/a>\n### 3.1.5 Measure abnormal stock returns","8f751471":"<a id=\"section-five\"><\/a>\n# 5. REFERENCES","4bafe86e":"<a id=\"subsection-three-one-two\"><\/a>\n### 3.1.2 Collect returns for sample firms and market index"}}