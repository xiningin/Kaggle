{"cell_type":{"ed093b14":"code","30fe36f0":"code","d0a9dae3":"code","61810f7a":"code","2b5708b5":"code","1dbff8e1":"code","cae65ec3":"code","5f8b0c86":"code","b7f8186d":"code","347addf4":"code","45b5c8e8":"code","8d26ac53":"code","96fa4cb7":"code","f2f2dc31":"code","052d00b9":"code","9c864f82":"code","357ccb3f":"code","62c4b99a":"code","4f2407e1":"code","67e7f126":"code","588f4d56":"code","d421a9ea":"code","db90aa0e":"code","51a9ceaa":"code","9808085f":"code","9f312a36":"code","05467c36":"code","eae5b514":"code","c91048cf":"code","22d766a8":"code","42c8dc06":"code","2340cec4":"code","2cd6f503":"markdown","2762ab8b":"markdown","e511751d":"markdown","e374d771":"markdown","e82c9741":"markdown","47eca0c9":"markdown","cfa0400b":"markdown","1619420d":"markdown","f6ecb46f":"markdown","0fea43ad":"markdown","3e1dea64":"markdown","73084654":"markdown","e7bc985d":"markdown","474d687d":"markdown","fff918f0":"markdown","f3f87372":"markdown","e73eb9d6":"markdown","58b07def":"markdown","875151fc":"markdown","593aac8d":"markdown","8a500305":"markdown","682e575b":"markdown","0c0a1110":"markdown","43de077e":"markdown","530e2385":"markdown","aaf1aa79":"markdown","66cc2880":"markdown","a88d568c":"markdown","ffe61a9a":"markdown","4c33686d":"markdown","5077a782":"markdown","ec6b48aa":"markdown","08cd9d30":"markdown","8b4d267a":"markdown","930d9b03":"markdown","2c3e6ffa":"markdown","4c77aecc":"markdown","f463a521":"markdown","efe8fc83":"markdown","22e77740":"markdown","3bfa1ce3":"markdown","2adddb88":"markdown"},"source":{"ed093b14":"import numpy as np\nimport pandas as pd\nimport os\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nDATA_PATH = '..\/input\/data-science-bowl-2019\/'","30fe36f0":"train_df = pd.read_csv(DATA_PATH + 'train.csv')\nlabels_df = pd.read_csv(DATA_PATH + 'train_labels.csv')","d0a9dae3":"train_df = train_df.rename(columns={\"installation_id\": \"kid_id\"})\nlabels_df = labels_df.rename(columns={\"installation_id\": \"kid_id\"})","61810f7a":"train_df = train_df[train_df.kid_id.isin(labels_df.kid_id.unique())]","2b5708b5":"train_df.info()","1dbff8e1":"train_df.head()","cae65ec3":"labels_df.info()","5f8b0c86":"labels_df.head()","b7f8186d":"sessions_time = train_df.groupby('game_session').agg({'timestamp': ['min', 'max'],'type' : \"unique\",'world': \"unique\",'title': \"unique\"})\nsessions_time.columns = ['Start Time', 'End Time','Type','World','Title']\nsessions_time[\"Duration\"]= pd.to_datetime(sessions_time[\"End Time\"]) - pd.to_datetime(sessions_time[\"Start Time\"])\nsessions_time[\"Duration\"] = sessions_time[\"Duration\"].apply(lambda x: round(x.total_seconds()\/60))\nsessions_time[\"Type\"] = sessions_time[\"Type\"].apply(', '.join)\nsessions_time[\"World\"] = sessions_time[\"World\"].apply(', '.join)\nsessions_time[\"Title\"] = sessions_time[\"Title\"].apply(', '.join)\nsessions_time = sessions_time.sort_values('Duration',ascending=False)","347addf4":"sessions_time.head(20)","45b5c8e8":"sessions_time.groupby('Type')['Duration'].sum() \\\n    .plot(kind='bar', figsize=(15, 5), title='Time Spent on Session Type',colormap='winter')\nplt.ylabel(\"Time (Minutes)\")\nplt.show()","8d26ac53":"sessions_time.groupby('World')['Duration'].sum() \\\n    .plot(kind='bar', figsize=(15, 5), title='Time Spent on World',colormap='winter')\nplt.ylabel(\"Time (Minutes)\")\nplt.show()","96fa4cb7":"sessions_time[sessions_time[\"Type\"] == 'Activity'].groupby('Title')['Duration'].sum() \\\n    .plot(kind='bar', figsize=(15, 5), title='Time Spent on Activities',colormap='winter')\nplt.ylabel(\"Time (Minutes)\")\nplt.xlabel(\"Activity\")\nplt.show()","f2f2dc31":"sessions_time[sessions_time[\"Type\"] == 'Game'].groupby('Title')['Duration'].sum() \\\n    .plot(kind='bar', figsize=(15, 5), title='Time Spent on Games',colormap='winter')\nplt.ylabel(\"Time (Minutes)\")\nplt.xlabel(\"Game\")\nplt.show()","052d00b9":"sessions_time[sessions_time[\"Type\"] == 'Clip'].groupby('Title')['Duration'].count() \\\n    .plot(kind='bar', figsize=(15, 5), title='Clips Views',colormap='winter')\nplt.ylabel(\"Views\")\nplt.xlabel(\"Clip\")\nplt.show()","9c864f82":"# Session duration is more than 10 hrs.\nsessions_time[sessions_time[\"Duration\"] > 10*60]","357ccb3f":"sessions_time[sessions_time[\"Duration\"] <= 0]","62c4b99a":"valueable_sessions = sessions_time[(sessions_time[\"Duration\"] > 0) & (sessions_time[\"Duration\"] < 600)]\nsessions_df = train_df[train_df.game_session.isin(valueable_sessions.index)]\nlabels_df = labels_df[labels_df.game_session.isin(valueable_sessions.index)]","4f2407e1":"kids_performance = pd.DataFrame(labels_df.groupby(['kid_id','accuracy_group'])['num_correct'].count().sort_values()).reset_index().pivot(index='kid_id', columns='accuracy_group',values='num_correct').fillna(0).astype('int32')\nkids_performance.columns = ['Failed','> 3rd Attempt','2nd Attempt','1st Attempt']\nkids_performance = kids_performance[['1st Attempt','2nd Attempt','> 3rd Attempt','Failed']]\nkids_performance","67e7f126":"sessions = pd.DataFrame(sessions_df.groupby('kid_id')['game_session'].unique())\nsessions['game_session'] = sessions['game_session'].apply(lambda x: len(x))\nkids_performance = pd.merge(right=kids_performance,left=sessions,left_index=True, right_index=True).sort_values(by='game_session',ascending=False)\n\nsessions_type = pd.DataFrame(sessions_df.groupby([\"kid_id\",\"type\"])['game_session'].unique())\nsessions_type['game_session'] = sessions_type['game_session'].apply(lambda x: len(x))\nsessions_type = sessions_type.reset_index().pivot(index='kid_id', columns='type',values='game_session').fillna(0).astype('int32')\nkids_performance = pd.merge(right=kids_performance,left=sessions_type,left_index=True, right_index=True).sort_values(by='game_session',ascending=False)\nkids_performance = kids_performance.rename(columns={\"game_session\": \"Total Sessions\"})","588f4d56":"kids_performance.head(50)","d421a9ea":"kids_performance.tail(50)","db90aa0e":"kids_performance = kids_performance[kids_performance[\"Assessment\"] > 4]\nkids_performance","51a9ceaa":"fig = plt.figure(figsize=(10,10))\nax = fig.add_axes([0,0,1,1])\nax.axis('equal')\ntypes = ['1st Attempt', '2nd Attempt', '>3rd Attemp', 'Failed']\ntypes_sessions = [np.sum(kids_performance['1st Attempt']),np.sum(kids_performance['2nd Attempt']),np.sum(kids_performance['> 3rd Attempt']),np.sum(kids_performance['Failed'])]\nax.pie(types_sessions, labels = types,autopct='%1.2f%%')\nplt.title('Assessments Performance')\nplt.show()","9808085f":"first_attempt = sessions_time[ sessions_time.index.isin(labels_df[labels_df.accuracy_group == 3].game_session)]\nsecond_attempt = sessions_time[ sessions_time.index.isin(labels_df[labels_df.accuracy_group == 2].game_session)]\nthird_attempt = sessions_time[ sessions_time.index.isin(labels_df[labels_df.accuracy_group == 1].game_session)]\nfailed_attempt = sessions_time[ sessions_time.index.isin(labels_df[labels_df.accuracy_group == 0].game_session)]","9f312a36":"first_attempt.groupby('Title')['Duration'].count().sort_values(ascending=False) \\\n    .plot(kind='bar', figsize=(15, 5), title='Solved in 1st Attempt',colormap='winter')\nplt.ylabel(\"Count\")\nplt.xlabel(\"Title\")\nplt.show()","05467c36":"second_attempt.groupby('Title')['Duration'].count().sort_values(ascending=False) \\\n    .plot(kind='bar', figsize=(15, 5), title='Solved in 2nd Attempt',colormap='winter')\nplt.ylabel(\"Count\")\nplt.xlabel(\"Title\")\nplt.show()","eae5b514":"third_attempt.groupby('Title')['Duration'].count().sort_values(ascending=False) \\\n    .plot(kind='bar', figsize=(15, 5), title='Solved in 3rd or more Attempts',colormap='winter')\nplt.ylabel(\"Count\")\nplt.xlabel(\"Title\")\nplt.show()","c91048cf":"failed_attempt.groupby('Title')['Duration'].count().sort_values(ascending=False) \\\n    .plot(kind='bar', figsize=(15, 5), title='Never Solved',colormap='winter')\nplt.ylabel(\"Count\")\nplt.xlabel(\"Title\")\nplt.show()","22d766a8":"fig = plt.figure(figsize=(10,10))\nax = fig.add_axes([0,0,1,1])\nax.axis('equal')\ntypes = ['1st Attempt', '2nd Attempt', '>3rd Attemp', 'Failed']\ntypes_sessions = [np.sum(first_attempt['Duration']),np.sum(second_attempt['Duration']),np.sum(third_attempt['Duration']),np.sum(failed_attempt['Duration'])]\nax.pie(types_sessions, labels = types,autopct='%1.2f%%')\nplt.title('Time Consumed in Assessments')\nplt.show()","42c8dc06":"first_attempt = sessions_time[ sessions_time.index.isin(labels_df[labels_df.accuracy_group == 3].game_session)]\nsecond_attempt = sessions_time[ sessions_time.index.isin(labels_df[labels_df.accuracy_group == 2].game_session)]\nthird_attempt = sessions_time[ sessions_time.index.isin(labels_df[labels_df.accuracy_group == 1].game_session)]\nfailed_attempt = sessions_time[ sessions_time.index.isin(labels_df[labels_df.accuracy_group == 0].game_session)]","2340cec4":"fig = plt.figure(figsize=(10,10))\nax = fig.add_axes([0,0,1,1])\nax.axis('equal')\ntypes = list(sessions_time[sessions_time[\"Type\"] == \"Assessment\"][\"Title\"].unique())\ntypes_sessions = [np.sum(sessions_time[sessions_time[\"Title\"] == types[0]]['Duration']),np.sum(sessions_time[sessions_time[\"Title\"] == types[1]]['Duration']),np.sum(sessions_time[sessions_time[\"Title\"] == types[2]]['Duration']),np.sum(sessions_time[sessions_time[\"Title\"] == types[3]]['Duration']),np.sum(sessions_time[sessions_time[\"Title\"] == types[4]]['Duration'])]\nax.pie(types_sessions, labels = types,autopct='%1.2f%%')\nplt.title('Time Spent in Each Assessment')\nplt.show()","2cd6f503":"### Conclusion - ChowTime & Scrub-A-Dub are favorite games","2762ab8b":"# Assessments Study\n\nLet's consider those kids who attempts at least 5 assessments. ","e511751d":"## Time Spent in Each Assessment","e374d771":"## High Duration Sessions","e82c9741":"## Solved in First Attempt","47eca0c9":"### Conclusion - Kids are working hard to solve hard assessments.","cfa0400b":"### Conclusion - So kids like to play games (My Kids also :)), and skip clips.","1619420d":"## Zero Duration Sessions\n\nKids are kids. They skip the things they don't like. So I think these small sessions can't be used for training as well. ","f6ecb46f":"## Favorite World","0fea43ad":"### Conclusion - Most of active kids are keen to solve assessments except the f6715a6b, He likes games :)","3e1dea64":"## Count Sessions Type","73084654":"### Conclusion - Hills are favorite for kids. Spend almost equal time in caves and city. ","e7bc985d":"## Favorite Games","474d687d":"### Conclusion - Cart Balancer is not interesting for kids. Chest Sorter & Bird Measurer are hard but kids spent good time on these.","fff918f0":"### Conclusion - Can we say these kids are mobile addicted?","f3f87372":"## Favorite Activities","e73eb9d6":"### Conclusion - Bottle Filler is most favorite acitivity in Kids","58b07def":"### Conclusion - Failed rate is very high and 40% assessments solved in first attempt.","875151fc":"**You can still find out more interesting facts so now its your turn :) Please upvote if this kernel is a worth.**","593aac8d":"# Final Words\n\n* This dataset has **suspecious sessions** so you should study them before start training process. \n* Failed rate is very high. It seems that kids stuck on **Chest Sorter** and **Bird Measurer** assessments.\n* Some kids spend lots of time on this app and try to solve hard assessments dedicatedly.\n* Kids, who attempt assessments without spending time on games or activity, are more likely to give up.\n* Mushroom Sorter & Bottle Filler are most favorite for kids.","8a500305":"### Conclusion - Mushroom Sorter is most easiest and Chest Sorter & Bird Measurer are very hard assessments for kids","682e575b":"#### Important Note\n\n* I renamed installation_id to kid_id :), Assuming that each installation_id is belong to a kid","0c0a1110":"## Rename Column","43de077e":"## 50 Most Active Kids","530e2385":"## Remove Kids \n\nFor some kids, assessment results are not exists in train_labels.csv so these kid's sessions can't be used in training process. let's remove them.","aaf1aa79":"# Kids Performance","66cc2880":"### Conclusion - These kids directly jump into assessments and never come back","a88d568c":"# Suspecious Sessions\n\nI calculated sessions duration in minutes and note that few duration are exceptionally very high and some have zero duration.","ffe61a9a":"## Solved in 3rd or more Attempts","4c33686d":"## 50 Least Active Kids","5077a782":"## Solved in Second Attempt","ec6b48aa":"## Time Consumed to Solve Assessments","08cd9d30":"## Success Rate","8b4d267a":"## Never Solved","930d9b03":"# Core Idea\n\nCompetition Goal is \"how young children learn\" so let's observe \"how young children spend time on this app\". Remember the 10,000 hrs of rule? The more time you spend, more you learn. I'm not using fancy charts because they seems to me destructive to get the important facts. ","2c3e6ffa":"## Valueable Sessions","4c77aecc":"## Load Data","f463a521":"**Note** - All assessments results are not exists in train_labels.csv so you'll see difference in Total Assessments and sum of 1st Attemp, 2nd Attemp, >3 Attempt and Failed. ","efe8fc83":"## Most Clicked Clips\n\nKids don't spend much time on clips So we're finding most views clips.","22e77740":"## Favorite Types","3bfa1ce3":"# Calculate Session Duration\n\nTraining dataset has total 175467 unique game sessions so let's calculate session duration and find interesting facts. This is time consuming step.","2adddb88":"## Load Libraries"}}