{"cell_type":{"abf50ac7":"code","4fe5f1da":"code","c12f57e2":"code","bcc46a39":"code","a15bedae":"code","57f2dc53":"code","06a1d067":"code","c0d032b8":"code","4ff83854":"code","c26e9976":"code","07ae3be7":"code","3e4d4f5b":"code","7618d8e3":"code","21633ddc":"code","61ab487f":"code","f39f8754":"code","0e5dfb2d":"code","a115672b":"code","4857728b":"code","c00d0050":"code","c3d68922":"code","7dfff871":"code","41a00395":"code","df4adb01":"code","5aff30df":"code","8d2da3ab":"code","b9b635a5":"code","8fa0ebd1":"code","a2d89839":"markdown","77ec6d9d":"markdown","d7e51ed8":"markdown","6cb2ff49":"markdown","54361318":"markdown","dbaf9b94":"markdown","2a9b2757":"markdown","60c206a7":"markdown","2ca8a86e":"markdown","36a7d211":"markdown"},"source":{"abf50ac7":"import pandas as pd\nimport numpy as np\nfrom tensorflow import keras\nfrom keras import layers\nfrom keras.layers import Input, Dense, Dropout, Activation, BatchNormalization, Add\nfrom keras.layers import Conv1D, GlobalAveragePooling1D, MaxPool1D, ZeroPadding1D, LSTM, Bidirectional, Flatten, GlobalAveragePooling2D\nfrom keras.models import Sequential, Model\nfrom keras.layers.merge import concatenate\nfrom scipy.io import loadmat","4fe5f1da":"SNOMED_scored=pd.read_csv(\"\/kaggle\/input\/physionet-snomed-mappings\/SNOMED_mappings_scored.csv\", sep=\";\")\nSNOMED_unscored=pd.read_csv(\"\/kaggle\/input\/physionet-snomed-mappings\/SNOMED_mappings_unscored.csv\", sep=\";\")","c12f57e2":"snomed_class_names=[\"Pacing Rhythm\", \"Prolonged QT Interval\",\"Atrial Fibrillation\",\"Atrial Flutter\",\n                 \"Left Bundle Branch Block\",\"Q Wave Abnormal\",\"T Wave Abnormal\",\"Prolonged PR Interval\",\"Ventricular Premature Beats\",\n\"Low QRS Voltages\",\"1st Degree AV Block\",\"Premature Atrial Contraction\",\"Left Axis Deviation\",\n\"Sinus Bradycardia\",\"Bradycardia\",\"Sinus Rhythm\",\"Sinus Tachycardia\",\"Premature Ventricular Contractions\",\n\"Sinus Arrhythmia\",\"Left Anterior Fascicular Block\",\"Right Axis Deviation\",\"Right Bundle Branch Block\",\"T Wave Inversion\",\n\"Supraventricular Premature Beats\",\"Nonspecific Intraventricular Conduction Disorder\",\"Incomplete Right Bundle Branch Block\",\n\"Complete Right Bundle Branch Block\"]","bcc46a39":"header_file=\"..\/input\/ptbxl-electrocardiography-database\/WFDB\/HR00002.hea\"\nmat_file=\"..\/input\/ptbxl-electrocardiography-database\/WFDB\/HR00002.mat\"","a15bedae":"import pandas as pd\nwith open(header_file, 'r') as the_file:\n    all_data = [line.strip() for line in the_file.readlines()]\n    data = all_data[8:]\nsnomed_number=int(data[7][5:14])\nvalue_unscored=SNOMED_unscored[\"Dx\"][SNOMED_unscored[\"SNOMED CT Code\"]==snomed_number].values\nvalue_scored=SNOMED_scored[\"Dx\"][SNOMED_scored[\"SNOMED CT Code\"]==snomed_number].values\ntry: \n    disease_unscored=value_unscored[0]\nexcept:\n    disease_unscored=\"\"\n\ntry: \n    disease_scored=value_scored[0]\nexcept:\n    disease_scored=\"\"","57f2dc53":"ann_model = Sequential()\nann_model.add(Dense(50, activation='relu', input_shape=(5000,12)))\nann_model.add(Dense(50, activation='relu'))\nann_model.add(GlobalAveragePooling1D())\nann_model.add(Dense(27, activation='softmax'))","06a1d067":"ann_model.load_weights(\"..\/input\/ecg-models\/ann_model_weights.best.hdf5\")","c0d032b8":"yhat=ann_model.predict(x=loadmat(mat_file)['val'].reshape(1,loadmat(mat_file)['val'].shape[1],loadmat(mat_file)['val'].shape[0]))\nprint(\"Predicted: \"+snomed_class_names[np.argmax(yhat)])\nif disease_unscored!=\"\":\n    print(\"Actual: \"+disease_unscored)\nelse:\n    print(\"Actual: \"+disease_scored)","4ff83854":"lenet_5_model=Sequential()\n\nlenet_5_model.add(Conv1D(filters=64, kernel_size=5, padding='same', input_shape=(5000,12)))\n#lenet_5_model.add(MaxPool1D(pool_size=2, strides=2, padding='same'))\nlenet_5_model.add(BatchNormalization())\nlenet_5_model.add(Activation('relu'))\n\nlenet_5_model.add(Conv1D(filters=64, kernel_size=3, padding='same',))\n#lenet_5_model.add(MaxPool1D(pool_size=2, strides=2, padding='same'))\nlenet_5_model.add(BatchNormalization())\nlenet_5_model.add(Activation('relu'))\n\nlenet_5_model.add(GlobalAveragePooling1D())\n\nlenet_5_model.add(Dense(64, activation='relu'))\n\nlenet_5_model.add(Dense(64, activation='relu'))\n\nlenet_5_model.add(Dense(27, activation = 'softmax'))","c26e9976":"lenet_5_model.load_weights(\"..\/input\/ecg-models\/lenet5_model_weights.best.hdf5\")","07ae3be7":"yhat=lenet_5_model.predict(x=loadmat(mat_file)['val'].reshape(1,loadmat(mat_file)['val'].shape[1],loadmat(mat_file)['val'].shape[0]))\nprint(\"Predicted: \"+snomed_class_names[np.argmax(yhat)])\nif disease_unscored!=\"\":\n    print(\"Actual: \"+disease_unscored)\nelse:\n    print(\"Actual: \"+disease_scored)","3e4d4f5b":"alexNet_model=Sequential()\n\nalexNet_model.add(Conv1D(filters=96, kernel_size=11, padding='same', input_shape=(5000,12)))\n#alexNet_model.add(MaxPool1D(pool_size=2, strides=2, padding='same'))\nalexNet_model.add(BatchNormalization())\nalexNet_model.add(Activation('relu'))\n\nalexNet_model.add(Conv1D(filters=256, kernel_size=5, padding='same'))\n#alexNet_model.add(MaxPool1D(pool_size=2, strides=2, padding='same'))\nalexNet_model.add(BatchNormalization())\nalexNet_model.add(Activation('relu'))\n\nalexNet_model.add(Conv1D(filters=384, padding='same', activation='relu', kernel_size=3))\nalexNet_model.add(Conv1D(filters=384, activation='relu', kernel_size=3))\nalexNet_model.add(Conv1D(filters=256, kernel_size=3))\n#alexNet_model.add(MaxPool1D(pool_size=2, strides=2, padding='same'))\nalexNet_model.add(BatchNormalization())\nalexNet_model.add(Activation('relu'))\n\nalexNet_model.add(GlobalAveragePooling1D())\nalexNet_model.add(Dense(64, activation='relu'))\nalexNet_model.add(Dropout(0.25))\nalexNet_model.add(Dense(64, activation='relu'))\nalexNet_model.add(Dropout(0.25))\nalexNet_model.add(Dense(27, activation='softmax'))","7618d8e3":"alexNet_model.load_weights(\"..\/input\/ecg-models\/alexnet_model_weights.best.hdf5\")","21633ddc":"yhat=alexNet_model.predict(x=loadmat(mat_file)['val'].reshape(1,loadmat(mat_file)['val'].shape[1],loadmat(mat_file)['val'].shape[0]))\nprint(\"Predicted: \"+snomed_class_names[np.argmax(yhat)])\nif disease_unscored!=\"\":\n    print(\"Actual: \"+disease_unscored)\nelse:\n    print(\"Actual: \"+disease_scored)","61ab487f":"vgg_16_model=Sequential()\n\nvgg_16_model.add(Conv1D(filters=64, kernel_size=3, padding='same', activation='relu', input_shape=(5000,12)))\nvgg_16_model.add(Conv1D(filters=64, kernel_size=3, padding='same', activation='relu'))\nvgg_16_model.add(MaxPool1D(pool_size=2, strides=2, padding='same'))\nvgg_16_model.add(BatchNormalization())\n\nvgg_16_model.add(Conv1D(filters=128, kernel_size=3, activation='relu', padding='same'))\nvgg_16_model.add(Conv1D(filters=128, kernel_size=3, activation='relu', padding='same'))\nvgg_16_model.add(MaxPool1D(pool_size=2, strides=2, padding='same'))\nvgg_16_model.add(BatchNormalization())\n\nvgg_16_model.add(Conv1D(filters=256, kernel_size=3, activation='relu', padding='same'))\nvgg_16_model.add(Conv1D(filters=256, kernel_size=3, activation='relu', padding='same'))\nvgg_16_model.add(Conv1D(filters=256, kernel_size=3, activation='relu', padding='same'))\nvgg_16_model.add(MaxPool1D(pool_size=2, strides=2, padding='same'))\nvgg_16_model.add(BatchNormalization())\n\nvgg_16_model.add(Conv1D(filters=512, kernel_size=3, activation='relu', padding='same'))\nvgg_16_model.add(Conv1D(filters=512, kernel_size=3, activation='relu', padding='same'))\nvgg_16_model.add(Conv1D(filters=512, kernel_size=3, activation='relu', padding='same'))\nvgg_16_model.add(MaxPool1D(pool_size=2, strides=2, padding='same'))\nvgg_16_model.add(BatchNormalization())\n\nvgg_16_model.add(Conv1D(filters=512, kernel_size=3, activation='relu', padding='same'))\nvgg_16_model.add(Conv1D(filters=512, kernel_size=1, activation='relu', padding='same'))\nvgg_16_model.add(Conv1D(filters=512, kernel_size=1, activation='relu', padding='same'))\nvgg_16_model.add(MaxPool1D(pool_size=2, strides=2, padding='same'))\nvgg_16_model.add(BatchNormalization())\n\nvgg_16_model.add(GlobalAveragePooling1D())\nvgg_16_model.add(Dense(256, activation='relu'))\nvgg_16_model.add(Dropout(0.25))\nvgg_16_model.add(Dense(128, activation='relu'))\nvgg_16_model.add(Dropout(0.25))\nvgg_16_model.add(Dense(27, activation='softmax'))","f39f8754":"vgg_16_model.load_weights(\"..\/input\/ecg-models\/vgg16_model_weights.best.hdf5\")","0e5dfb2d":"yhat=vgg_16_model.predict(x=loadmat(mat_file)['val'].reshape(1,loadmat(mat_file)['val'].shape[1],loadmat(mat_file)['val'].shape[0]))\nprint(\"Predicted: \"+snomed_class_names[np.argmax(yhat)])\nif disease_unscored!=\"\":\n    print(\"Actual: \"+disease_unscored)\nelse:\n    print(\"Actual: \"+disease_scored)","a115672b":"def identity_block(X, f, filters):\n    F1, F2, F3 = filters\n    \n    X_shortcut = X\n    \n    X = Conv1D(filters = F1, kernel_size = 1, activation='relu', strides = 1, padding = 'valid')(X)\n    X = BatchNormalization()(X)\n    \n    X = Conv1D(filters = F2, kernel_size = f, activation='relu', strides = 1, padding = 'same')(X)\n    X = BatchNormalization()(X)\n\n    X = Conv1D(filters = F3, kernel_size = 1, activation='relu', strides = 1, padding = 'valid')(X)\n    X = BatchNormalization()(X)\n\n    X = Add()([X,X_shortcut])\n    X = Activation('relu')(X)\n    \n    return X\n\ndef convolutional_block(X, f, filters, s = 2):\n    F1, F2, F3 = filters\n    \n    X_shortcut = X\n\n    X = Conv1D(F1, 1, activation='relu', strides = s)(X)\n    X = BatchNormalization()(X)\n    \n    X = Conv1D(F2, f, activation='relu', strides = 1, padding = 'same')(X)\n    X = BatchNormalization()(X)\n\n    X = Conv1D(F3, 1, strides = 1, activation='relu')(X)\n    X = BatchNormalization()(X)\n\n    X_shortcut = Conv1D(F3, 1, strides = s)(X_shortcut)\n    X_shortcut = BatchNormalization()(X_shortcut)\n    \n    X = Add()([X,X_shortcut])\n    X = Activation('relu')(X)\n    \n    return X\n\ndef ResNet50(input_shape):\n    \n    X_input = Input(input_shape)\n\n    X = ZeroPadding1D(3)(X_input)\n    \n    X = Conv1D(64, 7, strides = 2, activation='relu')(X)\n    X = BatchNormalization()(X)\n    X = MaxPool1D(pool_size=2, strides=2, padding='same')(X)\n\n    X = convolutional_block(X, f = 3, filters = [64, 64, 256], s = 1)\n    X = identity_block(X, 3, [64, 64, 256])\n    X = identity_block(X, 3, [64, 64, 256])\n\n    X = convolutional_block(X, f = 3, filters = [128,128,512], s = 2)\n    X = identity_block(X, 3, [128,128,512])\n    X = identity_block(X, 3, [128,128,512])\n    X = identity_block(X, 3, [128,128,512])\n\n    X = convolutional_block(X, f = 3, filters = [256, 256, 1024], s = 2)\n    X = identity_block(X, 3, [256, 256, 1024])\n    X = identity_block(X, 3, [256, 256, 1024])\n    X = identity_block(X, 3, [256, 256, 1024])\n    X = identity_block(X, 3, [256, 256, 1024])\n    X = identity_block(X, 3, [256, 256, 1024])\n\n    X = convolutional_block(X, f = 3, filters = [512, 512, 2048], s = 2)\n    X = identity_block(X, 3, [512, 512, 2048])\n    X = identity_block(X, 3, [512, 512, 2048])\n\n    X = MaxPool1D(pool_size=2, strides=2, padding='same')(X)\n    \n    X = GlobalAveragePooling1D()(X)\n    X = Dense(27,activation='softmax')(X)\n    \n    model = Model(inputs = X_input, outputs = X, name='ResNet50')\n\n    return model","4857728b":"resNet50_model = ResNet50(input_shape = (5000,12))","c00d0050":"resNet50_model.load_weights(\"..\/input\/ecg-models\/resnet50_model_weights.best.hdf5\")","c3d68922":"yhat=resNet50_model.predict(x=loadmat(mat_file)['val'].reshape(1,loadmat(mat_file)['val'].shape[1],loadmat(mat_file)['val'].shape[0]))\nprint(\"Predicted: \"+snomed_class_names[np.argmax(yhat)])\nif disease_unscored!=\"\":\n    print(\"Actual: \"+disease_unscored)\nelse:\n    print(\"Actual: \"+disease_scored)","7dfff871":"def inception_block(prev_layer):\n    \n    conv1=Conv1D(filters = 64, kernel_size = 1, padding = 'same')(prev_layer)\n    conv1=BatchNormalization()(conv1)\n    conv1=Activation('relu')(conv1)\n    \n    \n    conv3=Conv1D(filters = 64, kernel_size = 1, padding = 'same')(prev_layer)\n    conv3=BatchNormalization()(conv3)\n    conv3=Activation('relu')(conv3)\n    \n    conv3=Conv1D(filters = 64, kernel_size = 3, padding = 'same')(conv3)\n    conv3=BatchNormalization()(conv3)\n    conv3=Activation('relu')(conv3)\n   \n    \n    conv5=Conv1D(filters = 64, kernel_size = 1, padding = 'same')(prev_layer)\n    conv5=BatchNormalization()(conv5)\n    conv5=Activation('relu')(conv5)\n    \n    conv5=Conv1D(filters = 64, kernel_size = 5, padding = 'same')(conv5)\n    conv5=BatchNormalization()(conv5)\n    conv5=Activation('relu')(conv5)\n    \n    pool= MaxPool1D(pool_size=3, strides=1, padding='same')(prev_layer)\n    convmax=Conv1D(filters = 64, kernel_size = 1, padding = 'same')(pool)\n    convmax=BatchNormalization()(convmax)\n    convmax=Activation('relu')(convmax)\n    \n    layer_out = concatenate([conv1, conv3, conv5, convmax], axis=1)\n    \n    return layer_out\n\ndef inception_model(input_shape):\n    X_input=Input(input_shape)\n    \n    #X = ZeroPadding1D(3)(X_input)\n    \n    X = Conv1D(filters = 64, kernel_size = 1, padding = 'same')(X_input)\n    #X = MaxPool1D(pool_size=3, strides=2, padding='same')(X)\n    X = BatchNormalization()(X)\n    X = Activation('relu')(X)\n    \n    X = Conv1D(filters = 64, kernel_size = 1, padding = 'same')(X)\n    X = BatchNormalization()(X)\n    X = Activation('relu')(X)\n    \n    \n    X = inception_block(X)\n    X = MaxPool1D(pool_size=2, strides=4, padding='same')(X)\n    X = inception_block(X)\n    X = MaxPool1D(pool_size=2, strides=4, padding='same')(X)\n    X = inception_block(X)\n    X = MaxPool1D(pool_size=2, strides=4, padding='same')(X)\n    X = inception_block(X)\n    X = MaxPool1D(pool_size=2, strides=4, padding='same')(X)\n    \n    \n    X = inception_block(X)\n    X = MaxPool1D(pool_size=2, strides=4, padding='same')(X)\n    \"\"\"X = inception_block(X)\n    X = MaxPool1D(pool_size=2, strides=4, padding='same')(X)\n    X = inception_block(X)\n    X = MaxPool1D(pool_size=2, strides=4, padding='same')(X)\n    X = inception_block(X)\n    X = MaxPool1D(pool_size=2, strides=4, padding='same')(X)\n    X = inception_block(X)\n    X = MaxPool1D(pool_size=2, strides=4, padding='same')(X)\n    X = inception_block(X)\n    X = MaxPool1D(pool_size=2, strides=4, padding='same')(X)\"\"\"\n    \n    X = GlobalAveragePooling1D()(X)\n    X = Dense(64,activation='relu')(X)\n    X = Dense(64,activation='relu')(X)\n    X = Dense(27,activation='softmax')(X)\n    \n    model = Model(inputs = X_input, outputs = X, name='Inception')\n    \n    return model","41a00395":"inception_model = inception_model(input_shape = (5000,12))","df4adb01":"inception_model.load_weights(\"..\/input\/ecg-models\/inception_model2_weights.best.hdf5\")","5aff30df":"yhat=inception_model.predict(x=loadmat(mat_file)['val'].reshape(1,loadmat(mat_file)['val'].shape[1],loadmat(mat_file)['val'].shape[0]))\nprint(\"Predicted: \"+snomed_class_names[np.argmax(yhat)])\nif disease_unscored!=\"\":\n    print(\"Actual: \"+disease_unscored)\nelse:\n    print(\"Actual: \"+disease_scored)","8d2da3ab":"lstm_model = Sequential()\nlstm_model.add(LSTM(64, return_sequences=True, input_shape=(5000,12)))\nlstm_model.add(LSTM(64, return_sequences=True))\nlstm_model.add(LSTM(32, return_sequences=True))\nlstm_model.add(GlobalAveragePooling1D())\nlstm_model.add(Dense(32, activation = 'relu'))\nlstm_model.add(Dense(27, activation = 'softmax'))","b9b635a5":"lstm_model.load_weights(\"..\/input\/ecg-models\/lstm_model_weights.best.hdf5\")","8fa0ebd1":"yhat=lstm_model.predict(x=loadmat(mat_file)['val'].reshape(1,loadmat(mat_file)['val'].shape[1],loadmat(mat_file)['val'].shape[0]))\nprint(\"Predicted: \"+snomed_class_names[np.argmax(yhat)])\nif disease_unscored!=\"\":\n    print(\"Actual: \"+disease_unscored)\nelse:\n    print(\"Actual: \"+disease_scored)","a2d89839":"# ResNet50","77ec6d9d":"# Inception","d7e51ed8":"# VGG-16","6cb2ff49":"# LSTM","54361318":"# RNN","dbaf9b94":"# Simple ANN","2a9b2757":"### Results","60c206a7":"# AlexNet","2ca8a86e":"# CNN","36a7d211":"# Lenet-5"}}