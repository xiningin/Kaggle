{"cell_type":{"481796bb":"code","d23204a2":"code","1f056e33":"code","3bfd01a6":"code","7e4dc2a5":"code","9b7666ec":"code","47c62af3":"code","7e914719":"code","4947746d":"code","a5ec3abf":"code","4de506e1":"code","e9941c59":"code","b59783a0":"code","ecb53c6e":"code","3f8763b6":"code","c4804b0a":"code","ac7a7234":"code","ae153af8":"code","8d346224":"code","35c1b313":"code","444b2db9":"code","ca249dc9":"code","3f74daf0":"code","76ed6a32":"code","21dad63f":"code","e4d9fbcf":"code","79817674":"markdown","3c59e2c5":"markdown","020a6b71":"markdown","a43bc730":"markdown","e8d996b3":"markdown"},"source":{"481796bb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","d23204a2":"import seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom math import sqrt\nfrom sklearn.metrics import mean_squared_error","1f056e33":"df = pd.read_csv(\"..\/input\/insurance.csv\")","3bfd01a6":"df.shape","7e4dc2a5":"df.columns","9b7666ec":"df.info()","47c62af3":"df.head(5).T    ","7e914719":"df.tail(10).T","4947746d":"num_cols = df.select_dtypes(include=np.number).columns\ncat_cols = df.select_dtypes(exclude=np.number).columns","a5ec3abf":"one_hot_data = pd.get_dummies(df[cat_cols])","4de506e1":"one_hot_data.head(3)","e9941c59":"insurance_final = pd.concat([df[num_cols],one_hot_data],axis = 1)","b59783a0":"df.info()","ecb53c6e":"Y = insurance_final[\"expenses\"]\nY[0:3]","3f8763b6":"X = insurance_final.drop(columns = [\"expenses\"] )\nX[0:3]","c4804b0a":"from sklearn import preprocessing","ac7a7234":"X = preprocessing.StandardScaler().fit(X).transform(X.astype(float))\nX[0:5]","ae153af8":"from sklearn.model_selection import train_test_split\nX_train,X_test,Y_train,Y_test = train_test_split (X,Y,test_size=0.3, random_state=42)","8d346224":"X_train.shape","35c1b313":"X_test.shape","444b2db9":"length = round(sqrt(df.shape[0]))","ca249dc9":"length","3f74daf0":"rmse_dict = {}\nrmse_list = []\nfor k in range(1,length+1):\n    model = KNeighborsRegressor(n_neighbors = k).fit(X_train,Y_train)\n    Y_predict = model.predict(X_test)\n    rmse = sqrt(mean_squared_error(Y_test,Y_predict))\n    rmse_dict.update({k:rmse})\n    rmse_list.append(rmse)\n    print(\"Rmse for k = {} is {}\" .format(k,rmse))","76ed6a32":"key_min = min(rmse_dict.keys(), key=(lambda k: rmse_dict[k]))\n\nprint( \"The miminum RMSE value is \",rmse_dict[key_min], \"with k= \", key_min)","21dad63f":"elbow_curve = pd.DataFrame(rmse_list,columns = ['RMSE'])\nelbow_curve.head()","e4d9fbcf":"elbow_curve.plot()","79817674":"**Load the data into pandas dataframe**","3c59e2c5":"Columns in data frame","020a6b71":"\n**Observations**\n\nThere are 1338 observations and 7 columns for insurance dataset.\n","a43bc730":"**Examining the data**","e8d996b3":"There are no Null Values in the insurance dataset"}}