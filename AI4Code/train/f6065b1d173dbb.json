{"cell_type":{"75eaf5b7":"code","03501a0b":"code","0703f70a":"code","cfef89cc":"code","4bf4715b":"code","fae0613a":"code","81b71149":"code","76a1e7bd":"code","a9a0b475":"code","2f222c7e":"code","3ffea542":"code","6ca04b7a":"code","975bb1f5":"code","c43e1840":"code","ba04405d":"markdown","8dc9860d":"markdown","28025998":"markdown","6bf3af4b":"markdown","9feb65ef":"markdown"},"source":{"75eaf5b7":"#importing all of the neccesary libraries\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nfrom statsmodels.tsa.arima_model import ARIMA\nimport pandas_datareader\nimport datetime\n\nimport pandas_datareader.data as web","03501a0b":"#creating a start and an end dates:\nstart = datetime.datetime(2016,1,1)\nend = datetime.datetime.today()","0703f70a":"#JD.com\njd = web.DataReader('JD', 'yahoo', start, end)\njd.head()","cfef89cc":"\njd['Open'].plot(label = 'JD.com')\nplt.legend(loc = 'best');","4bf4715b":"\njd['Volume'].plot(label = 'JD.com')\nplt.legend();","fae0613a":"\njd['Total Traded'] = jd['Open']*jd['Volume']\njd['Total Traded'].plot(figsize = (16,8), label = 'JD.com')\nplt.legend(loc = 'best');","81b71149":"\njd['Avg'] = jd[['High', 'Low']].mean(axis=1)\njd['Total Traded New'] = jd['Avg']*jd['Volume']\njd['Total Traded New'].plot(figsize = (16,8), label = 'JD.com')\nplt.legend(loc = 'best');","76a1e7bd":"\n\njd['MA50'] = jd['Open'].rolling(50).mean()\njd['MA200'] = jd['Open'].rolling(200).mean()","a9a0b475":"jd['Returns'] = jd['Close'].pct_change(1)","2f222c7e":"jd['Returns'].hist(bins = 50);","3ffea542":"\njd['Returns'].hist(bins = 100, figsize=(16,8), label = 'JD.com', alpha=0.4)\nplt.legend();","6ca04b7a":"\njd['Returns'].plot(kind='kde', label = 'JD.com', figsize=(10,8))\nplt.legend();","975bb1f5":"box_df = pd.concat([ jd['Returns']], axis = 1)\nbox_df.columns = [ 'JD Ret']\nbox_df.plot(kind='box', figsize = (8,10));","c43e1840":"model = ARIMA(jd['Total Traded New'], order=(2,0,0)).fit()\ny2 = model.predict(100)\n\ny2.plot()","ba04405d":"### **Moving Average**","8dc9860d":"***\u0412\u0456\u0437\u0443\u0430\u043b\u0456\u0437\u0430\u0446\u0456\u044f \u0434\u0430\u043d\u0438\u0445 \u043f\u0440\u043e \u0444\u043e\u043d\u0434\u043e\u0432\u0438\u0439 \u0440\u0438\u043d\u043e\u043a***","28025998":"# \u0410\u043d\u0430\u043b\u0456\u0437 \u0434\u0430\u043d\u0438\u0445 \u0447\u0430\u0441\u043e\u0432\u0438\u0445 \u0440\u044f\u0434\u0456\u0432","6bf3af4b":"# Boxplots on the returns","9feb65ef":"References to:\n1. [vbmokin](http:\/\/www.kaggle.com\/vbmokin)\n2. https:\/\/www.kaggle.com\/thebrownviking20\/everything-you-can-do-with-a-time-series\n3. https:\/\/towardsdatascience.com\/an-end-to-end-project-on-time-series-analysis-and-forecasting-with-python-4835e6bf050b\n4. https:\/\/habr.com\/ru\/post\/436294\/\n5. https:\/\/www.kaggle.com\/yurazdit\/time-series-v1\/notebook"}}