{"cell_type":{"38c95996":"code","9370355a":"code","de2eea9c":"code","557579cf":"code","8db29715":"code","d9ffa106":"code","2541e287":"code","5090acc7":"code","86836953":"code","15d2bad3":"code","1f90546b":"code","f630da96":"code","52620a73":"code","f4a0c304":"code","f1057feb":"code","3a3e6142":"code","8de90e6e":"code","0c017ee6":"code","7aeecd94":"code","f3a17c1e":"code","e5f26868":"markdown","e34695bd":"markdown","706b9b0a":"markdown","1b02bc73":"markdown","6404cde7":"markdown","27cb764b":"markdown","abd0a94e":"markdown"},"source":{"38c95996":"import tensorflow as tf\nfrom tensorflow import keras\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\n\n%matplotlib inline","9370355a":"(X_train, y_train), (X_test, y_test) = keras.datasets.fashion_mnist.load_data()","de2eea9c":"class_names = [\"T-shirt\/top\", \"Trouser\", \"Pullover\", \"Dress\", \"Coat\", \n               \"Sandal\", \"Shirt\", \"Sneaker\", \"Bag\", \"Ankle boot\"]","557579cf":"sample_class_pics_indices = []\n\nfor i in range(10):\n    \n    sample_class_pics_indices.append(np.where(y_train == i)[0][0])\n    ","8db29715":"sample_class_pics_indices","d9ffa106":"fig, axes = plt.subplots(nrows=2, ncols=5, figsize = (18,8))\n\nfor i in range(2):\n    for j in range(5):\n        axes[i,j].matshow(X_train[sample_class_pics_indices[5*i+j]], cmap='Greys')\n        axes[i,j].set_title(class_names[5*i+j], y = 1.05)\n        axes[i,j].set_xticks([])\n        axes[i,j].set_yticks([])\n        \nplt.show()","2541e287":"X_train = X_train\/255\nX_test = X_test\/255","5090acc7":"X_train.shape","86836953":"model = keras.Sequential([\n    keras.layers.Flatten(input_shape =(28,28)),\n    keras.layers.Dense(400, activation = 'relu'),\n    keras.layers.Dense(100, activation = 'relu'),\n    keras.layers.Dense(10, activation = 'softmax')\n])\n\nmodel.compile(\n    optimizer = 'adam', \n    loss = 'sparse_categorical_crossentropy',\n    metrics = ['accuracy']\n)\n\nmodel.fit(X_train, y_train, epochs = 20)","15d2bad3":"model.evaluate(X_test, y_test)","1f90546b":"y_pred = model.predict(X_test)","f630da96":"y_pred.shape","52620a73":"y_pred_labels = [np.argmax(i) for i in y_pred]","f4a0c304":"confusion_matrix = tf.math.confusion_matrix(labels = y_test, predictions=y_pred_labels)\n\nconfusion_matrix","f1057feb":"plt.figure(figsize = (18,10))\nsns.heatmap(confusion_matrix, annot=True, fmt='d', xticklabels=class_names, yticklabels=class_names)\n\nplt.xlabel('Predicted', fontsize = 20)\nplt.ylabel('Truth', fontsize = 20)\nplt.title('Confusion Matrix Heatmap', fontsize = 25, y=1.03)\n\nplt.show()","3a3e6142":"wrong_pred_labels = []\nwrong_test_labels = []\nfor i, j in zip(y_test, y_pred_labels):\n    if i != j:\n        wrong_pred_labels.append(j)\n        wrong_test_labels.append(i)","8de90e6e":"len(wrong_pred_labels)\/len(y_test)","0c017ee6":"wrong_class_counts = [wrong_test_labels.count(i) for i in range(10)]","7aeecd94":"wrong_class_counts","f3a17c1e":"print(\"WRONG CLASS PERCENTAGE \\n\")\n\nfor i in range(10):\n    \n    print(class_names[i]+':', round(wrong_class_counts[i]\/sum(wrong_class_counts),2))\n","e5f26868":"# Import the Dataset","e34695bd":"# Wrong Predicted Labels & Conclusion","706b9b0a":"# Confusion Matrix & Heatmap","1b02bc73":"# Scaling","6404cde7":"# Building the Model","27cb764b":"# Plot a sample list of main pictures","abd0a94e":"# Import Necessary Libraries"}}