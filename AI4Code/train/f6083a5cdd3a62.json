{"cell_type":{"56ab707b":"code","190744b0":"code","3ddd4703":"code","f6b3c1d8":"code","f94cfcf8":"code","0515c5f0":"code","43c93a01":"code","4a9093cb":"code","c0f6b384":"code","485f6e38":"code","034b1fcf":"code","33dd4c8d":"code","13b389c2":"code","d22fe2de":"code","b632fb54":"code","971cfbaa":"markdown","030f79be":"markdown","8de55f6c":"markdown","67aab707":"markdown","b90e87d8":"markdown","e0122944":"markdown","957d1db7":"markdown","9660c14c":"markdown","71ecbad5":"markdown","54df33f6":"markdown","931ad749":"markdown","b5a65137":"markdown","2602de3f":"markdown","9ff016c4":"markdown","28fde522":"markdown","41d93f51":"markdown"},"source":{"56ab707b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","190744b0":"train = pd.read_csv(\"\/kaggle\/input\/iris\/Iris.csv\")","3ddd4703":"summary.head(10)","f6b3c1d8":"summary = pd.DataFrame(train.dtypes)\nsummary[\"null\"] = train.isnull().sum()\nsummary[\"unique\"] = train.nunique()\nsummary[\"first\"] = train.loc[0,:]\nsummary","f94cfcf8":"train = train.drop(\"Id\", axis = 1)","0515c5f0":"def get_row_col_idx(idx):\n    \"\"\" get the row and column index based on the index to plot on subplots\"\"\"\n    row_idx = idx\/\/2\n    if(idx%2 == 0):\n        col_idx = 0\n    else :\n        col_idx = 1\n    return (row_idx, col_idx)","43c93a01":"fig, axes = plt.subplots(5, 2, figsize= (20,20))\nfor idx, val in enumerate(train.columns.to_list()):\n    sns.histplot(x = val, data = train, ax = axes[idx][0], color=\"green\")\n    if(idx <= 3): # Because target is categorical so just wanna be safe\n        sns.kdeplot(x = val, data = train, ax = axes[idx][1], color = \"red\")","4a9093cb":"target = train.pop(\"Species\") # Extracting target feature!","c0f6b384":"sns.scatterplot(x= 'SepalLengthCm', y= 'SepalWidthCm', hue= target, data=train)","485f6e38":"sns.scatterplot(x= 'PetalLengthCm', y= 'PetalWidthCm', hue= target, data=train, palette=\"Set3\")","034b1fcf":"fig, axes = plt.subplots(2, 2, figsize = (20, 20))\nfor idx, vals in enumerate(train.columns.to_list()):\n    row_idx, col_idx = get_row_col_idx(idx)\n    sns.boxplot(x = target, y = vals, data = train, ax = axes[row_idx, col_idx], palette=\"Set3\")","33dd4c8d":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nX_train, X_test, y_train, y_test = train_test_split(train, target, random_state = 0, test_size =0.2)","13b389c2":"enc = LabelEncoder()\ny_train = enc.fit_transform(y_train)\ny_test = enc.transform(y_test)","d22fe2de":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import confusion_matrix, recall_score, precision_score\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_test)\n\n","b632fb54":"CM = confusion_matrix(y_test, y_pred)\nprint('Confusion Matrix is : \\n', CM)\n\nsns.heatmap(CM, center = True,cmap='cividis')\nplt.show()","971cfbaa":"### Training Model","030f79be":"# Univariate analysis","8de55f6c":"##### Drop the ID","67aab707":"We can see that based on sepal length and sepal width, setosa is pretty much linearly seperable from others","b90e87d8":"So we can see from the data that there are no null values and there are three kind of specific species. We do not need Id, we also need to remove the species and keep it seperately. There are in total 150 unique items present with theire specifications.","e0122944":"#### Relation between PetalLength and PetalWidth","957d1db7":"# Split the data","9660c14c":"# Summary of the data","71ecbad5":"Based on petal width and petal length the species are seperable better so if decision is made on the basis of petal length and petal width it would give a better clarity to the classifier","54df33f6":"# Multivariate Analysis","931ad749":"#### Confusion Matrix!","b5a65137":"With increasing sepal length, petal length and petal width, the species are quite nicely categorised.\nSepal width on the other hand follows a decreasing trend and then increasing trend.","2602de3f":"### Encoding the data","9ff016c4":"From above plots we can see that the species are distributed equally in the data. Distribution of Sepal width is normal and sepal length is near to normal\n","28fde522":"#### Relation between SepalLength and SepalWidth","41d93f51":"# Data Reading"}}