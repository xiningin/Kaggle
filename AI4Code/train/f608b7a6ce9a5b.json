{"cell_type":{"4dd267ea":"code","bb6efe23":"code","cf090607":"code","725a64dc":"code","1511b767":"code","8249584a":"code","92f4be8a":"code","d175a194":"code","5a69425b":"code","08259ff8":"code","9d50fa46":"code","15ce703a":"code","1836461e":"code","66b1a551":"code","32c9974c":"code","199f3bda":"code","32a686a2":"code","e5b9f358":"code","17d50008":"code","f1007ad7":"code","87b0482e":"code","fd41efc0":"code","c7859326":"code","3684a9d3":"code","bf74e699":"code","1f6d77b5":"code","38bbf732":"code","da6f9d4e":"code","920d8c63":"code","9810831d":"code","8935fd8d":"code","384ade85":"code","ab9909f8":"code","68f56333":"code","4fb57747":"code","4591af73":"code","270f4922":"code","19964af9":"code","7a74dbef":"code","8c710ae6":"code","d90ae467":"code","b303cf6e":"code","9b3d74c7":"code","2ef9a81f":"code","094000c5":"code","c058ec09":"code","fa78645c":"code","ce1ca52c":"code","41c91264":"code","19e442e8":"code","ac3bc432":"code","45f32c4b":"code","51335aab":"code","924bb319":"code","4ca44ea1":"code","6b3f7935":"code","c0d07b24":"code","74d21a9a":"code","24a95513":"code","4fd4213d":"code","862a7455":"code","ac0929d2":"code","37a84417":"code","05edfdf5":"code","19402ed3":"code","91c397f2":"code","01841d2b":"code","696cca5c":"code","fcb42fe9":"code","22a28e13":"code","8c4f07ff":"code","9e1b37ea":"code","3c1c9a62":"code","edd27af7":"code","b2a8bf6f":"code","87783d30":"code","9c2308ca":"code","b5749911":"code","41d70476":"code","343a2c37":"code","7665d985":"code","affbdb28":"code","893d6247":"code","a50da9ad":"code","8eb76808":"code","a2d2bd41":"code","777d42c2":"code","84dbe8bd":"code","5cb81025":"code","f10fc5c4":"code","2b92a720":"code","08b54086":"code","02eda393":"code","a05030eb":"code","cb4e00a9":"code","dcdb67a7":"code","7d58b239":"code","ac5301e5":"code","f6b418f0":"code","80ccc837":"code","9c439cd2":"code","1ab2690c":"code","478f963f":"code","11213f7f":"code","fe2f0b03":"code","f7250b51":"code","2ec621cf":"code","907fd369":"code","35c738aa":"code","977ae450":"code","055ee355":"code","a1bd829f":"code","17381415":"code","2f576ada":"code","e304ac6d":"code","1511a5ac":"code","af1ea577":"code","d8ea9e4d":"code","0c3cf9c5":"code","65fbeb4e":"code","bc62f909":"code","813be45a":"code","3dcbb8ca":"code","1647ca3d":"code","626a3aa7":"code","9b72aa95":"code","142cc323":"code","bd073ab3":"code","48ec1b6f":"code","91187a65":"code","b2e56428":"code","53ac9b17":"code","f089a6a8":"code","2b981029":"code","9daa38bc":"code","19b0e390":"code","94ccec12":"code","6d4ea133":"code","7d756f81":"code","3a8b9d5e":"code","90d40021":"code","eb279ed9":"code","b6d6ad06":"code","a48ca630":"code","a81a1f41":"code","57fc0e19":"code","898e7038":"code","71b72db6":"code","c82afde4":"code","97c6a4b8":"code","51650fd0":"code","f874b4c4":"code","abcd9740":"code","94560621":"code","49e9d362":"code","767fd761":"code","49157696":"code","97214e80":"code","140fce9d":"code","2cc26439":"code","cef66fb6":"code","03ed467b":"code","8fca9e88":"code","b5ed48b2":"code","014a366b":"code","27ed2bfd":"code","7b4ad046":"code","563f0998":"code","ad6ff34e":"code","e3d79cec":"code","00cfb9f7":"code","13339864":"code","92a9b8ac":"code","f51f5384":"code","6b4a81ce":"code","8d922e05":"code","84ce1365":"code","55c29352":"code","20ab750c":"code","f043b676":"code","30af5623":"code","00bd2a29":"code","010155c3":"code","3f8a4bbb":"code","eddce359":"code","3ff671a1":"code","4b820a18":"code","e6dd3b78":"code","cccc82f6":"code","30a4a783":"code","41756a57":"code","795f67e1":"code","a34247b5":"code","8bab7e46":"code","9fa3fc97":"code","794bd1c4":"code","708f2e2f":"code","24f4d29f":"code","a82b808b":"code","d4337347":"code","ce66a2df":"code","ead0a6d7":"code","799f10c0":"code","93dc2378":"code","bcb5ed4e":"code","c740833d":"code","bab4e84e":"code","e0cf97e5":"code","cdf7d7ca":"code","4389a101":"code","01db3d51":"code","38870014":"code","a2e761c8":"code","6e444a09":"code","33376491":"code","8b2998a4":"code","9115ae5a":"code","ec529c65":"code","bc912314":"code","7a842b4a":"code","5247f248":"code","4cca88ce":"code","f01eaf0c":"code","519d6621":"code","b7b3c196":"code","d7a108d2":"code","1e2cedff":"code","d946be9b":"code","c3dcd891":"code","c215073d":"code","e04301f5":"code","0f969ad3":"code","2618a30c":"code","b40d32f9":"code","0ddb4b0a":"code","70aa9ccb":"code","7f961c98":"code","c35a15e7":"code","bf45416a":"code","7fad7058":"code","ac1498f0":"code","a5ac0db5":"code","b348d014":"code","695c7ef8":"markdown","7d5c71d0":"markdown","28d0e742":"markdown","6ab98cab":"markdown","92045186":"markdown","a835e9fe":"markdown","a42d53da":"markdown","8e50ff88":"markdown","7dc7fb1f":"markdown","690c3faa":"markdown","c43bc701":"markdown","d0e99485":"markdown","31a67dab":"markdown","672e18cf":"markdown","8dfc973c":"markdown","c64718a0":"markdown","2ebb30c7":"markdown","fd133701":"markdown","6519e643":"markdown","fff07dcf":"markdown","aed82617":"markdown","863608ce":"markdown","9335c4f2":"markdown","acb2fbaf":"markdown","1ddb33dc":"markdown","4db71c4e":"markdown","1c6ef150":"markdown","f8f86639":"markdown","d2851b16":"markdown","cdb1ba11":"markdown","eb6a37c2":"markdown","d1322e3f":"markdown","7cdb7aea":"markdown","a943f4ba":"markdown","2738ad10":"markdown","9e511006":"markdown","1eaaf082":"markdown","5dd65c63":"markdown","6067f78a":"markdown","4ae04401":"markdown","3657b41e":"markdown","6520fe7b":"markdown","2395a2b9":"markdown","5783cdf4":"markdown","81112295":"markdown","4bd01e28":"markdown","51e41fd8":"markdown","1bf801ad":"markdown","5b72cb82":"markdown","c784d839":"markdown","f9bfb931":"markdown","c5610f84":"markdown","60fbb201":"markdown","3e82628f":"markdown","e432ac15":"markdown","e4c9cc27":"markdown","72637636":"markdown","1d76d995":"markdown","22698547":"markdown","b88e2ead":"markdown"},"source":{"4dd267ea":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline","bb6efe23":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input\/house-price'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","cf090607":"# Load train dataset\nload_train = pd.read_csv('\/kaggle\/input\/house-price\/house_price_train_no_missing_data.csv')\ntrain_df = load_train.copy()\n\n# Load test dataset\nload_test = pd.read_csv('\/kaggle\/input\/house-price\/house_price_test_no_missing_data.csv')\ntest_df = load_test.copy()","725a64dc":"pd.set_option('display.max_columns', None)","1511b767":"train_df.head()","8249584a":"train_df.describe(include=[np.object]).T","92f4be8a":"for col in train_df.select_dtypes(include=[np.object]).columns:\n    print(f'{col} has unique {train_df[col].unique()}')","d175a194":"train_df.describe(include=[np.number])","5a69425b":"import seaborn as sns","08259ff8":"fig, ax = plt.subplots(nrows=1, ncols=3, figsize=(14,4))\n\nsns.swarmplot(train_df.MSZoning, train_df.SalePrice, ax=ax[0])\nsns.boxplot(train_df.MSZoning, train_df.SalePrice, ax=ax[1])\nsns.barplot(train_df.MSZoning, train_df.SalePrice, ax=ax[2])","9d50fa46":"# Create columns list for dummies variables\ndummies_list = ['MSZoning']","15ce703a":"fig, ax = plt.subplots(1,3, figsize=(16,4))\nsns.barplot(train_df.Street, train_df.SalePrice, ax=ax[0])\nsns.boxplot(train_df.Street, train_df.SalePrice, ax=ax[1])\nsns.swarmplot(train_df.Street, train_df.SalePrice, ax=ax[2])","1836461e":"train_df.drop('Street', axis=1, inplace=True)\ntest_df.drop('Street', axis=1, inplace=True)","66b1a551":"fig, ax = plt.subplots(1,3, figsize=(16,4))\nsns.barplot(train_df.LotShape, train_df.SalePrice, ax=ax[0])\nsns.boxplot(train_df.LotShape, train_df.SalePrice, ax=ax[1])\nsns.swarmplot(train_df.LotShape, train_df.SalePrice, ax=ax[2])","32c9974c":"dummies_list.append('LotShape')","199f3bda":"fig, ax = plt.subplots(1,3, figsize=(16,4))\nsns.barplot(train_df.LandContour, train_df.SalePrice, ax=ax[0])\nsns.boxplot(train_df.LandContour, train_df.SalePrice, ax=ax[1])\nsns.swarmplot(train_df.LandContour, train_df.SalePrice, ax=ax[2])","32a686a2":"dummies_list.append('LandContour')","e5b9f358":"fig, ax = plt.subplots(1,3, figsize=(16,4))\nsns.barplot(train_df.Utilities, train_df.SalePrice, ax=ax[0])\nsns.boxplot(train_df.Utilities, train_df.SalePrice, ax=ax[1])\nsns.swarmplot(train_df.Utilities, train_df.SalePrice, ax=ax[2])","17d50008":"train_df.drop('Utilities', axis=1, inplace=True)\ntest_df.drop('Utilities', axis=1, inplace=True)","f1007ad7":"fig, ax = plt.subplots(1,3, figsize=(16,4))\nsns.barplot(train_df.LotConfig, train_df.SalePrice, ax=ax[0])\nsns.boxplot(train_df.LotConfig, train_df.SalePrice, ax=ax[1])\nsns.swarmplot(train_df.LotConfig, train_df.SalePrice, ax=ax[2])","87b0482e":"train_df['LotConfig'] = train_df.LotConfig.apply(lambda x: 'FR' if x=='FR2' or x=='FR3' else x)","fd41efc0":"test_df['LotConfig'] = train_df.LotConfig.apply(lambda x: 'FR' if x=='FR2' or x=='FR3' else x)","c7859326":"train_df.LotConfig.value_counts()","3684a9d3":"dummies_list.append('LotConfig')","bf74e699":"fig, ax = plt.subplots(1,3, figsize=(16,4))\nsns.barplot(train_df.LandSlope, train_df.SalePrice, ax=ax[0])\nsns.boxplot(train_df.LandSlope, train_df.SalePrice, ax=ax[1])\nsns.swarmplot(train_df.LandSlope, train_df.SalePrice, ax=ax[2])","1f6d77b5":"train_df['GentleSlope_Flag'] = train_df.LandSlope.map({'Gtl': 1, 'Mod': 0, 'Sev':0})","38bbf732":"test_df['GentleSlope_Flag'] = train_df.LandSlope.map({'Gtl': 1, 'Mod': 0, 'Sev':0})","da6f9d4e":"train_df.GentleSlope_Flag.value_counts()","920d8c63":"test_df.GentleSlope_Flag.value_counts()","9810831d":"train_df.drop('LandSlope', axis=1, inplace=True)\ntest_df.drop('LandSlope', axis=1, inplace=True)","8935fd8d":"dummies_list.append('GentleSlope_Flag')","384ade85":"train_df.Neighborhood.nunique()","ab9909f8":"test_df.Neighborhood.nunique()","68f56333":"plt.figure(figsize=(14,6))\nsns.barplot(train_df.Neighborhood, train_df.SalePrice)\nplt.xticks(rotation=45);","4fb57747":"plt.figure(figsize=(12,5))\nsns.scatterplot(train_df.Neighborhood, train_df.SalePrice)\nplt.xticks(rotation=45);","4591af73":"dummies_list.append('Neighborhood')","270f4922":"order_list = train_df.Neighborhood.value_counts().index","19964af9":"fig, ax = plt.subplots(4,1, figsize=(14,8))\nsns.barplot(train_df.Condition1, train_df.SalePrice,ax=ax[0])\nsns.swarmplot(train_df.Condition1, train_df.SalePrice,ax=ax[1])\n\nsns.barplot(train_df.Condition2, train_df.SalePrice, ax=ax[2])\nsns.swarmplot(train_df.Condition2, train_df.SalePrice, ax=ax[3]);","7a74dbef":"diff = set(train_df.Condition1.value_counts().index) - set(train_df.Condition2.value_counts().index)","8c710ae6":"diff","d90ae467":"train_df.Condition1.value_counts().index","b303cf6e":"def condition(df, col):\n    con_list = []\n    for value in df[col]:\n        if value in ['Feedr','Artery']:\n            con_list.append('Street')\n            \n        elif value in ['RRAn','RRAe','RRNn','RRNe']:\n            con_list.append('Railroad')\n        elif value in ['PosN','PosA']:\n            con_list.append('Off-site')\n        else:\n            con_list.append('Normal')\n    return con_list","9b3d74c7":"train_df['Condition1'] = condition(train_df,'Condition1')","2ef9a81f":"train_df.Condition1.value_counts()","094000c5":"test_df['Condition1'] = condition(test_df, 'Condition1')","c058ec09":"# Drop Condition2 as they contain similar values\ntrain_df.drop('Condition2', axis=1, inplace=True)\ntest_df.drop('Condition2', axis=1, inplace=True)","fa78645c":"dummies_list.append('Condition1')","ce1ca52c":"train_df.shape, test_df.shape","41c91264":"train_df.BldgType.value_counts()","19e442e8":"test_df.BldgType.value_counts()","ac3bc432":"fig, ax = plt.subplots(1,3, figsize=(14,4))\n\nsns.barplot(train_df.BldgType, train_df.SalePrice, ax=ax[0])\nsns.boxplot(train_df.BldgType, train_df.SalePrice, ax=ax[1])\nsns.swarmplot(train_df.BldgType, train_df.SalePrice, ax=ax[2]);","45f32c4b":"# Add it to dummy list\ndummies_list.append('BldgType')","51335aab":"train_df.HouseStyle.value_counts()","924bb319":"test_df.HouseStyle.value_counts()","4ca44ea1":"fig, ax = plt.subplots(2,2, figsize=(14,8))\n\n#plt.tick_params(rotation=45)\n# Bar Chart\nbar_chart = sns.barplot(train_df.HouseStyle, train_df.SalePrice, ax=ax[0,0])\nbar_chart.set_xticklabels(bar_chart.get_xticklabels(), rotation=45)\n# Box Plot\nbox_plot = sns.boxplot(train_df.HouseStyle, train_df.SalePrice, ax=ax[0,1])\nbox_plot.set_xticklabels(box_plot.get_xticklabels(), rotation=45)\n# Swarm Plot\nswarm = sns.swarmplot(train_df.HouseStyle, train_df.SalePrice, ax=ax[1,0])\nswarm.set_xticklabels(swarm.get_xticklabels(), rotation=45)\n# Scatter Plot\nscatter = sns.scatterplot(train_df.HouseStyle, train_df.SalePrice, ax=ax[1,1])\nscatter.set_xticklabels(scatter.get_xticklabels(), rotation=45);","6b3f7935":"# Add to dummies list\ndummies_list.append('HouseStyle')","c0d07b24":"train_df.RoofStyle.value_counts()","74d21a9a":"fig, ax = plt.subplots(2,2, figsize=(14,8))\n\n# Bar Chart\nbar_chart = sns.barplot(train_df.RoofStyle, train_df.SalePrice, ax=ax[0,0])\n# Box Plot\nbox_plot = sns.boxplot(train_df.RoofStyle, train_df.SalePrice, ax=ax[0,1])\n# Swarm Plot\nswarm = sns.swarmplot(train_df.RoofStyle, train_df.SalePrice, ax=ax[1,0])\n# Scatter Plot\nscatter = sns.scatterplot(train_df.RoofStyle, train_df.SalePrice, ax=ax[1,1]);","24a95513":"def groupRoofStyle(df):\n    roof = []\n    for val in df.RoofStyle:\n        if val=='Gable':\n            roof.append('Gable')\n        elif val=='Hip':\n            roof.append('Hip')\n        else:\n            roof.append('Other')\n    return roof","4fd4213d":"train_df['RoofStyle'] = groupRoofStyle(train_df)\ntest_df['RoofStyle'] = groupRoofStyle(test_df)","862a7455":"train_df.RoofStyle.value_counts()","ac0929d2":"test_df.RoofStyle.value_counts()","37a84417":"fig, ax = plt.subplots(2,2, figsize=(14,8))\n\n# Bar Chart\nbar_chart = sns.barplot(train_df.RoofStyle, train_df.SalePrice, ax=ax[0,0])\n# Box Plot\nbox_plot = sns.boxplot(train_df.RoofStyle, train_df.SalePrice, ax=ax[0,1])\n# Swarm Plot\nswarm = sns.swarmplot(train_df.RoofStyle, train_df.SalePrice, ax=ax[1,0])\n# Scatter Plot\nscatter = sns.scatterplot(train_df.RoofStyle, train_df.SalePrice, ax=ax[1,1]);","05edfdf5":"# Add for dummy variables\ndummies_list.append('RoofStyle')","19402ed3":"train_df.RoofMatl.value_counts()","91c397f2":"fig, ax = plt.subplots(2,2, figsize=(12,8))\n\n# Bar Chart\nbar_chart = sns.barplot(train_df.RoofMatl, train_df.SalePrice, ax=ax[0,0])\nbar_chart.set_xticklabels(bar_chart.get_xticklabels(), rotation=45)\n# Box Plot\nbox_plot = sns.boxplot(train_df.RoofMatl, train_df.SalePrice, ax=ax[0,1])\nbox_plot.set_xticklabels(box_plot.get_xticklabels(), rotation=45)\n# Swarm Plot\nswarm = sns.swarmplot(train_df.RoofMatl, train_df.SalePrice, ax=ax[1,0])\nswarm.set_xticklabels(swarm.get_xticklabels(), rotation=45)\n# Scatter Plot\nscatter = sns.scatterplot(train_df.RoofMatl, train_df.SalePrice, ax=ax[1,1])\nscatter.set_xticklabels(scatter.get_xticklabels(), rotation=45);","01841d2b":"train_df.RoofMatl.unique()","696cca5c":"train_df[(train_df.RoofMatl=='WdShngl') & (train_df.SalePrice > 600000)]","fcb42fe9":"train_df.RoofMatl.value_counts()","22a28e13":"test_df.RoofMatl.value_counts()","8c4f07ff":"roof_list = ['WdShngl', 'Metal', 'WdShake', 'Membran', 'Tar&Grv',\n       'Roll', 'ClyTile']","9e1b37ea":"def roof(df, roof_list):\n    roof_mat = []\n    for val in df.RoofMatl:\n        if val in roof_list:\n            roof_mat.append('Other')\n        else:\n            roof_mat.append('CompShg')\n    return roof_mat","3c1c9a62":"train_df['RoofMatl'] = roof(train_df, roof_list)","edd27af7":"train_df.RoofMatl.value_counts()","b2a8bf6f":"test_df['RoofMatl'] = roof(test_df, roof_list)","87783d30":"test_df.RoofMatl.value_counts()","9c2308ca":"# Add this feature to dummy list\ndummies_list.append('RoofMatl')","b5749911":"train_df.Exterior1st.nunique()","41d70476":"train_df.Exterior1st.value_counts()","343a2c37":"test_df.Exterior2nd.nunique()","7665d985":"test_df.Exterior1st.value_counts()","affbdb28":"fig, ax = plt.subplots(2,2, figsize=(14,8))\n\n# Bar Chart\nbar_chart = sns.barplot(train_df.Exterior1st, train_df.SalePrice, ax=ax[0,0])\nbar_chart.set_xticklabels(bar_chart.get_xticklabels(), rotation=45)\n# Box Plot\nbox_plot = sns.boxplot(train_df.Exterior1st, train_df.SalePrice, ax=ax[0,1])\nbox_plot.set_xticklabels(box_plot.get_xticklabels(), rotation=45)\n# Swarm Plot\nstrip = sns.stripplot(train_df.Exterior1st, train_df.SalePrice, ax=ax[1,0])\nstrip.set_xticklabels(swarm.get_xticklabels(), rotation=45)\n# Scatter Plot\nscatter = sns.scatterplot(train_df.Exterior1st, train_df.SalePrice, ax=ax[1,1])\nscatter.set_xticklabels(scatter.get_xticklabels(), rotation=45);","893d6247":"fig, ax = plt.subplots(2,2, figsize=(14,8))\n\n# Bar Chart\nbar_chart = sns.barplot(train_df.Exterior2nd, train_df.SalePrice, ax=ax[0,0])\nbar_chart.set_xticklabels(bar_chart.get_xticklabels(), rotation=45)\n# Box Plot\nbox_plot = sns.boxplot(train_df.Exterior2nd, train_df.SalePrice, ax=ax[0,1])\nbox_plot.set_xticklabels(box_plot.get_xticklabels(), rotation=45)\n# Swarm Plot\nstrip = sns.stripplot(train_df.Exterior2nd, train_df.SalePrice, ax=ax[1,0])\nstrip.set_xticklabels(swarm.get_xticklabels(), rotation=45)\n# Scatter Plot\nscatter = sns.scatterplot(train_df.Exterior2nd, train_df.SalePrice, ax=ax[1,1])\nscatter.set_xticklabels(scatter.get_xticklabels(), rotation=45);","a50da9ad":"diff = set(train_df.Exterior1st.value_counts().index) - set(test_df.Exterior1st.value_counts().index)","8eb76808":"diff","a2d2bd41":"test_df.Exterior1st.value_counts().index","777d42c2":"train_df.Exterior1st.value_counts().index","84dbe8bd":"train_df1 = train_df.copy()\ntest_df1 = test_df.copy()","5cb81025":"test_df1['Exterior1st'] = test_df1.Exterior1st.apply(lambda x: x.replace('0    VinylSd\\ndtype: object','VinylSd')\n                           if x=='0    VinylSd\\ndtype: object' else x)","f10fc5c4":"test_df1.Exterior1st.value_counts().index","2b92a720":"train_df1.Exterior1st.value_counts().index","08b54086":"fig, ax = plt.subplots(2,2, figsize=(16,8))\n\n# Bar Chart\nbar_chart = sns.barplot(test_df1.Exterior1st, train_df.SalePrice, ax=ax[0,0])\nbar_chart.set_xticklabels(bar_chart.get_xticklabels(), rotation=45)\n# Box Plot\nbox_plot = sns.boxplot(test_df1.Exterior1st, train_df.SalePrice, ax=ax[0,1])\nbox_plot.set_xticklabels(box_plot.get_xticklabels(), rotation=45)\n# Swarm Plot\nstrip = sns.stripplot(test_df1.Exterior1st, train_df.SalePrice, ax=ax[1,0])\nstrip.set_xticklabels(swarm.get_xticklabels(), rotation=45)\n# Scatter Plot\nscatter = sns.scatterplot(test_df1.Exterior1st, train_df.SalePrice, ax=ax[1,1])\nscatter.set_xticklabels(scatter.get_xticklabels(), rotation=45);","02eda393":"dummies_list.append('Exterior1st')\ntrain_df1.drop('Exterior2nd', axis=1, inplace=True)\ntest_df1.drop('Exterior2nd', axis=1, inplace=True)","a05030eb":"train_df1.MasVnrType.value_counts()","cb4e00a9":"fig, ax = plt.subplots(2,2, figsize=(14,8))\n\n# Bar Chart\nbar_chart = sns.barplot(train_df1.MasVnrType, train_df1.SalePrice, ax=ax[0,0])\n# Box Plot\nbox_plot = sns.boxplot(train_df1.MasVnrType, train_df1.SalePrice, ax=ax[0,1])\n# Swarm Plot\nswarm = sns.swarmplot(train_df1.MasVnrType, train_df1.SalePrice, ax=ax[1,0])\n# Scatter Plot\nscatter = sns.scatterplot(train_df1.MasVnrType, train_df1.SalePrice, ax=ax[1,1]);","dcdb67a7":"dummies_list.append('MasVnrType')","7d58b239":"train_df1.ExterQual.value_counts()","ac5301e5":"fig, ((ax0,ax1),(ax2,ax3)) = plt.subplots(2,2, figsize=(14,10))\n\nsns.barplot(train_df1.ExterQual, train_df1.SalePrice, ax=ax0)\nsns.boxplot(train_df1.ExterQual, train_df1.SalePrice, ax=ax1)\nsns.stripplot(train_df1.ExterQual, train_df1.SalePrice, ax=ax2)\nsns.scatterplot('ExterQual', 'SalePrice', data=train_df1, ax=ax3);","f6b418f0":"train_df1.ExterCond.value_counts()","80ccc837":"fig, ((ax0,ax1),(ax2,ax3)) = plt.subplots(2,2, figsize=(14,10))\n\nsns.barplot(train_df1.ExterCond, train_df1.SalePrice, ax=ax0)\nsns.boxplot(train_df1.ExterCond, train_df1.SalePrice, ax=ax1)\nsns.stripplot(train_df1.ExterCond, train_df1.SalePrice, ax=ax2)\nsns.scatterplot('ExterCond', 'SalePrice', data=train_df1, ax=ax3);","9c439cd2":"condition_dict = {'Ex':5, 'Gd':4, 'TA':3, 'Fa':2, 'Po':1}\nquality_dict = {'Ex':4, 'Gd':3, 'TA':2, 'Fa':1}\n\n# Map ordinal features\ntrain_df1['ExterCond'] = train_df1.ExterCond.map(condition_dict)\ntest_df1['ExterCond'] = test_df1.ExterCond.map(condition_dict)","1ab2690c":"train_df1['ExterQual'] = train_df1.ExterQual.map(quality_dict)\ntest_df1['ExterQual'] = test_df1.ExterQual.map(quality_dict)","478f963f":"test_df1.head()","11213f7f":"train_df1.Foundation.value_counts()","fe2f0b03":"test_df1.Foundation.value_counts()","f7250b51":"fig, ((ax0,ax1),(ax2,ax3)) = plt.subplots(2,2, figsize=(14,10))\n\nsns.barplot(train_df1.Foundation, train_df1.SalePrice, ax=ax0)\nsns.boxplot(train_df1.Foundation, train_df1.SalePrice, ax=ax1)\nsns.stripplot(train_df1.Foundation, train_df1.SalePrice, ax=ax2)\nsns.scatterplot('Foundation', 'SalePrice', data=train_df1, ax=ax3);","2ec621cf":"dummies_list.append('Foundation')","907fd369":"train_df1.Heating.value_counts()","35c738aa":"test_df1.Heating.value_counts()","977ae450":"fig, ((ax0,ax1),(ax2,ax3)) = plt.subplots(2,2, figsize=(14,10))\n\nsns.barplot(train_df1.Heating, train_df1.SalePrice, ax=ax0)\nsns.boxplot(train_df1.Heating, train_df1.SalePrice, ax=ax1)\nsns.stripplot(train_df1.Heating, train_df1.SalePrice, ax=ax2)\nsns.scatterplot('Heating', 'SalePrice', data=train_df1, ax=ax3);","055ee355":"dummies_list.append('Heating')","a1bd829f":"train_df1.HeatingQC.value_counts()","17381415":"test_df1.HeatingQC.value_counts()","2f576ada":"fig, ((ax0,ax1),(ax2,ax3)) = plt.subplots(2,2, figsize=(14,10))\n\nsns.barplot(train_df1.HeatingQC, train_df1.SalePrice, ax=ax0)\nsns.boxplot(train_df1.HeatingQC, train_df1.SalePrice, ax=ax1)\nsns.stripplot(train_df1.HeatingQC, train_df1.SalePrice, ax=ax2)\nsns.scatterplot('HeatingQC', 'SalePrice', data=train_df1, ax=ax3);","e304ac6d":"heat_dict = {'Ex':5, 'Gd':4, 'TA':3, 'Fa':2, 'Po':1}\n\ntrain_df1['HeatingQC'] = train_df1.HeatingQC.map(heat_dict)\ntest_df1['HeatingQC'] = test_df1.HeatingQC.map(heat_dict)","1511a5ac":"train_df1.CentralAir.value_counts()","af1ea577":"test_df1.CentralAir.value_counts()","d8ea9e4d":"fig, ((ax0,ax1),(ax2,ax3)) = plt.subplots(2,2, figsize=(14,10))\n\nsns.barplot(train_df1.CentralAir, train_df1.SalePrice, ax=ax0)\nsns.boxplot(train_df1.CentralAir, train_df1.SalePrice, ax=ax1)\nsns.stripplot(train_df1.CentralAir, train_df1.SalePrice, ax=ax2)\nsns.scatterplot('CentralAir', 'SalePrice', data=train_df1, ax=ax3);","0c3cf9c5":"train_df1['CentralAir'] = train_df1.CentralAir.apply(lambda x: 1 if x=='Y' else 0)","65fbeb4e":"test_df1['CentralAir'] = test_df1.CentralAir.apply(lambda x: 1 if x=='Y' else 0)","bc62f909":"train_df1.CentralAir.value_counts()","813be45a":"train_df.Electrical.value_counts()","3dcbb8ca":"test_df.Electrical.value_counts()","1647ca3d":"fig, ((ax0,ax1),(ax2,ax3)) = plt.subplots(2,2, figsize=(14,10))\n\nsns.barplot(train_df1.Electrical, train_df1.SalePrice, ax=ax0)\nsns.boxplot(train_df1.Electrical, train_df1.SalePrice, ax=ax1)\nsns.stripplot(train_df1.Electrical, train_df1.SalePrice, ax=ax2)\nsns.scatterplot('Electrical', 'SalePrice', data=train_df1, ax=ax3);","626a3aa7":"train_df1['Standard_Electrical'] = (train_df1.Electrical == \"SBrkr\") * 1\ntest_df1['Standard_Electrical'] = (test_df1.Electrical == 'SBrkr') * 1","9b72aa95":"train_df1.drop('Electrical', axis=1, inplace=True)\ntest_df1.drop('Electrical', axis=1, inplace=True)","142cc323":"train_df1.head()","bd073ab3":"train_df1.KitchenQual.value_counts()","48ec1b6f":"test_df1.KitchenQual.value_counts()","91187a65":"test_df1.KitchenQual.value_counts().index","b2e56428":"test_df1['KitchenQual'] = test_df1.KitchenQual.apply(lambda x: x.replace('0    TA\\ndtype: object', 'TA')\n                                                    if x =='0    TA\\ndtype: object' else x)","53ac9b17":"test_df1.KitchenQual.value_counts()","f089a6a8":"def plot_subplots(df, col):\n    \"\"\"\n    The function creates 2x2 grid with 4 plots\n    \"\"\"\n    fig, ((ax0,ax1),(ax2,ax3)) = plt.subplots(2,2, figsize=(14,10))\n    \n    sns.barplot(df[col], df.SalePrice, ax=ax0)\n    sns.boxplot(df[col], df.SalePrice, ax=ax1)\n    sns.stripplot(df[col], df.SalePrice, ax=ax2)\n    sns.scatterplot(df[col], df.SalePrice, ax=ax3)","2b981029":"plot_subplots(train_df1, 'KitchenQual')","9daa38bc":"kitchen_dict = {'Ex':4, 'Gd':3, 'TA':2, 'Fa':1}\ntrain_df1['KitchenQual'] = train_df1.KitchenQual.map(kitchen_dict)\ntest_df1['KitchenQual'] = test_df1.KitchenQual.map(kitchen_dict)","19b0e390":"train_df1.KitchenQual.head()","94ccec12":"train_df1.Functional.value_counts()","6d4ea133":"test_df1.Functional.value_counts()","7d756f81":"test_df1['Functional'] = test_df1.Functional.apply(lambda x: x.replace('0    Typ\\ndtype: object', 'Typ')\n                                                  if x=='0    Typ\\ndtype: object' else x)","3a8b9d5e":"plot_subplots(train_df1, 'Functional')","90d40021":"func_dict = {'Typ':7,'Min1':6,'Min2':5,'Mod':4,\n             'Maj1':3,'Maj2':2,'Sev':1\n             }\ntrain_df1['Functional'] = train_df1.Functional.map(func_dict)\ntest_df1['Functional'] = test_df1.Functional.map(func_dict)","eb279ed9":"train_df1.PavedDrive.value_counts()","b6d6ad06":"test_df1.PavedDrive.value_counts()","a48ca630":"plot_subplots(train_df1, 'PavedDrive')","a81a1f41":"pave_dict = {'Y':3, 'P':2, 'N':1}\ntrain_df1['PavedDrive'] = train_df1.PavedDrive.map(pave_dict)\ntest_df1['PavedDrive'] = test_df1.PavedDrive.map(pave_dict)","57fc0e19":"train_df1.head()","898e7038":"train_df1.SaleType.value_counts()","71b72db6":"test_df1.SaleType.value_counts()","c82afde4":"test_df1['SaleType'] = test_df1.SaleType.apply(lambda x: x.replace('0    WD\\ndtype: object','WD') \n                                              if x=='0    WD\\ndtype: object' else x)","97c6a4b8":"plot_subplots(train_df1, 'SaleType')","51650fd0":"dummies_list.append('SaleType')","f874b4c4":"train_df1.SaleCondition.value_counts()","abcd9740":"test_df1.SaleCondition.value_counts()","94560621":"plot_subplots(train_df1, 'SaleCondition')","49e9d362":"dummies_list.append('SaleCondition')","767fd761":"train_df1.head()","49157696":"train_df1['MSSubClass'] = train_df1.MSSubClass.astype('category')\ntest_df1['MSSubClass'] = test_df1.MSSubClass.astype('category')\ntrain_df1['MoSold'] = train_df1.MoSold.astype('category')\ntest_df1['MoSold'] = test_df1.MoSold.astype('category')","97214e80":"train_df1.describe(include=[np.number])","140fce9d":"train_df1.select_dtypes(include=[np.number]).columns","2cc26439":"area_col = ['LotFrontage', 'LotArea','MasVnrArea','BsmtFinSF1',\n            'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF','2ndFlrSF', \n            'LowQualFinSF', 'GrLivArea','OpenPorchSF', \n            'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea',\n            'WoodDeckSF']\n\ntrain_df1['TotalArea'] = train_df1[area_col].sum(axis=1)\ntest_df1['TotalArea'] = test_df1[area_col].sum(axis=1)","cef66fb6":"sns.scatterplot('TotalArea', 'SalePrice', data=train_df1)","03ed467b":"sns.scatterplot('PoolArea', 'SalePrice', data=train_df1)","8fca9e88":"train_df1['is_Pool'] = train_df1.PoolArea.apply(lambda x: 1 if x>0 else 0)\ntest_df1['is_Pool'] = test_df1.PoolArea.apply(lambda x: 1 if x>0 else 0)","b5ed48b2":"train_df1['TotalSF'] = train_df1.TotalBsmtSF + train_df1.GrLivArea\ntest_df1['TotalSF'] = test_df1.TotalBsmtSF + test_df1.GrLivArea","014a366b":"train_df1['TotalBath'] = train_df1.FullBath + train_df1.BsmtFullBath + 0.5 * (train_df1.BsmtHalfBath + train_df1.HalfBath)\n\ntest_df1['TotalBath'] = test_df1.FullBath + test_df1.BsmtFullBath + 0.5 * (test_df1.BsmtHalfBath + test_df1.HalfBath)","27ed2bfd":"# Drop all area columns\nfor col in area_col:\n    train_df1.drop(col, axis=1, inplace=True)\n    test_df1.drop(col, axis=1, inplace=True)","7b4ad046":"bath_col = ['BsmtFullBath', 'BsmtHalfBath','FullBath', 'HalfBath']\nfor col in bath_col:\n    train_df1.drop(col, axis=1, inplace=True)\n    test_df1.drop(col, axis=1, inplace=True)","563f0998":"train_df1.describe(include=[np.number])","ad6ff34e":"train_df1.select_dtypes(include=[np.number]).head()","e3d79cec":"year_list = ['YearBuilt', 'YearRemodAdd','YrSold']","00cfb9f7":"train_df1.loc[:, year_list].head()","13339864":"(train_df1.YearBuilt != train_df1.YearRemodAdd) *1","92a9b8ac":"train_df1['RemodAdd'] = (train_df1.YearBuilt != train_df1.YearRemodAdd)*1\ntest_df1['RemodAdd'] = (test_df1.YearBuilt != test_df1.YearRemodAdd)*1","f51f5384":"train_df1['AgeHouse'] = train_df.YearBuilt.max() - train_df1.YearBuilt\ntest_df1['AgeHouse'] = test_df1.YearBuilt.max() - test_df1.YearBuilt","6b4a81ce":"sns.scatterplot('AgeHouse', 'SalePrice', data=train_df1)","8d922e05":"train_df1['AgeWhenSold'] = train_df1.YrSold - train_df1.YearBuilt\ntest_df1['AgeWhenSold'] = test_df1.YrSold - test_df1.YearBuilt\n\nsns.scatterplot('AgeWhenSold', 'SalePrice', data=train_df1)","84ce1365":"train_df1.loc[:, ['AgeWhenSold', 'AgeHouse']]","55c29352":"for col in year_list:\n    train_df1.drop(col, axis=1, inplace=True)\n    test_df1.drop(col, axis=1, inplace=True)","20ab750c":"train_df1.select_dtypes(include=[np.number]).head()","f043b676":"con_list = ['TotalArea', 'TotalSF','AgeHouse','AgeWhenSold','SalePrice']","30af5623":"corr = np.log1p(train_df1[con_list]).corr()\nsns.heatmap(corr, cmap='winter', annot=True)","00bd2a29":"categorical_features = train_df1.select_dtypes(include=['object', 'category']).columns\nnumerical_features = train_df1.select_dtypes(exclude=['object','category']).columns","010155c3":"categorical_features","3f8a4bbb":"# Pairplot for continues variables with log1p\nsns.pairplot(np.log1p(train_df1[con_list]))","eddce359":"numerical_df = train_df1[numerical_features].copy()","3ff671a1":"skewness = numerical_df.skew()\nskewness = skewness[abs(skewness) > 0.5]\nskewed_features = skewness.index\nskewed_features ","4b820a18":"# skewed_f  = ['TotalSF','TotalArea','AgeWhenSold']\n# train_df1[skewed_f] = train_df1[skewed_f].apply(np.log1p)\n\n# test_df1[skewed_f] = test_df1[skewed_f].apply(np.log1p)","e6dd3b78":"train_df1['MSSubClass'] = train_df1.MSSubClass.astype('category')\ntest_df1['MSSubClass'] = test_df1.MSSubClass.astype('category')","cccc82f6":"train_df1.dtypes","30a4a783":"train_df1.drop('AgeHouse', axis=1, inplace=True)\ntest_df1.drop('AgeHouse', axis=1, inplace=True)","41756a57":"train_df2 = train_df1.copy()\ntest_df2 = test_df1.copy()","795f67e1":"# Convert into category\nfor col in categorical_features:\n    train_df2[col] = train_df2[col].astype('category')\n    test_df2[col] = test_df2[col].astype('category')","a34247b5":"train_df2.dtypes","8bab7e46":"test_df2.dtypes","9fa3fc97":"# First combine both datasets\ntrain_to_combine = train_df2.drop('SalePrice', axis=1).copy()\ntest_to_combine = test_df2.drop('Id', axis=1).copy()","794bd1c4":"# Create flag column\ntrain_to_combine['train'] = 1\ntest_to_combine['train'] = 0\n# Combine two dataset \ndf_combined = pd.concat([train_to_combine, test_to_combine])\ndf_combined = pd.get_dummies(df_combined, drop_first=True)\n# Split into train and test dataset\ntrain_df_prep = df_combined[df_combined['train']==1].copy()\ntest_df_prep = df_combined[df_combined['train']==0].copy()\n# Drop flag column\ntrain_df_prep.drop('train', axis=1, inplace=True)\ntest_df_prep.drop('train', axis=1, inplace=True)","708f2e2f":"train_df_prep.shape, test_df_prep.shape","24f4d29f":"train_df_prep.head()","a82b808b":"test_df_prep.head()","d4337347":"X = train_df_prep\ny = np.log1p(train_df2['SalePrice'])","ce66a2df":"# Split into train and test sets\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,\n                                                    y,\n                                                    test_size=0.2,\n                                                    random_state=45)","ead0a6d7":"from sklearn.ensemble import GradientBoostingRegressor, RandomForestRegressor\nfrom sklearn.metrics import r2_score, mean_squared_error, mean_squared_log_error\n# Instantiate model\ngbr_model_base = GradientBoostingRegressor(random_state=45)\n# Fit the model\ngbr_model_base.fit(X_train, y_train)\n# Make predictions\ny_pred = gbr_model_base.predict(X_test)\n\nscore = r2_score(y_test, y_pred)\nrmse = np.sqrt(mean_squared_error(y_test, y_pred))\nrmsle = np.sqrt(mean_squared_log_error(y_test, y_pred))\n\nprint(f'R-squared: {score}')\nprint(f'RMSE: {rmse}')\nprint(f'RMSLE: {rmsle}')","799f10c0":"predictions = gbr_model_base.predict(test_df_prep)","93dc2378":"sns.scatterplot(y_test, y_pred)","bcb5ed4e":"rfc_model_base = RandomForestRegressor(random_state=45)\nrfc_model_base.fit(X_train, y_train)\ny_pred1 = rfc_model_base.predict(X_test)\n\nscore1 = r2_score(y_test, y_pred)\nrmse1 = np.sqrt(mean_squared_error(y_test, y_pred))\nrmsle1 = np.sqrt(mean_squared_log_error(y_test, y_pred))\n\nprint(f'R-squared: {score1}')\nprint(f'RMSE: {rmse1}')\nprint(f'RMSLE: {rmsle1}')","c740833d":"sns.scatterplot(y_pred, y_test)","bab4e84e":"# Submit predictions\n# submission = pd.DataFrame()\n# submission['Id'] = test_df2.Id\n# submission['SalePrice'] = predictions\n# submission.to_csv('nowe_submission.csv', index=False)","e0cf97e5":"gbr_model_base.get_params","cdf7d7ca":"from sklearn.model_selection import GridSearchCV\n\ngrid_params = {'n_estimators': [100, 200, 400, 800],\n               'learning_rate': [0.1, 0.05, 0.02, 0.01],\n               'max_depth': [3,4,6],\n               'min_samples_leaf':[1,3,5],\n               'min_samples_split': [2,4,6],\n               'max_features': ['auto','sqrt','log2']}\n\ngrid_s_model = GridSearchCV(gbr_model_base,\n                            param_grid=grid_params,\n                            verbose=2,\n                            cv=3,\n                            n_jobs=-1)\n\ngrid_s_model.fit(X_train, y_train)","4389a101":"grid_s_model.best_score_","01db3d51":"grid_s_model.best_params_","38870014":"# Instantiate model with best hyperparameters\ngbr_model_best = GradientBoostingRegressor(random_state=45,\n                                           learning_rate=0.02,\n                                           max_depth=6,\n                                           max_features='sqrt',\n                                           min_samples_leaf=1,\n                                           min_samples_split=6,\n                                           n_estimators=800)\n\ngbr_model_best.fit(X_train, y_train)\ny_pred_b = gbr_model_best.predict(X_test)\n\nscore_b = r2_score(y_test, y_pred_b)\nrmse_b = np.sqrt(mean_squared_error(y_test, y_pred_b))\nrmsle_b = np.sqrt(mean_squared_log_error(y_test, y_pred_b))\n\nprint(f'R-squared: {score_b}')\nprint(f'RMSE: {rmse_b}')\nprint(f'RMSLE: {rmsle_b}')","a2e761c8":"plt.figure(figsize=(16,8))\nplt.plot(y_test.values, label='Actual', c='r')\nplt.plot(y_pred_b, label='Predicted', c='b')\nplt.title('Actual vs. Predicted Sale Price of the House')\nplt.ylabel('Sale Price')","6e444a09":"from sklearn.feature_selection import SelectKBest, f_regression","33376491":"X.shape","8b2998a4":"X.head()","9115ae5a":"selector = SelectKBest(f_regression, k=80)\nX_new = selector.fit_transform(X,y)","ec529c65":"X_new","bc912314":"column_names = X.columns[selector.get_support()]\ncolumn_names","7a842b4a":"X_df = pd.DataFrame(X_new, columns=column_names)\nX_df.head()","5247f248":"X_train, X_test, y_train, y_test = train_test_split(X_df,\n                                                    y,\n                                                    test_size=0.2,\n                                                    random_state=45)","4cca88ce":"X_train.shape, X_test.shape, y_train.shape, y_test.shape","f01eaf0c":"gbr_model_selectbest = GradientBoostingRegressor(random_state=45,\n                                           learning_rate=0.02,\n                                           max_depth=6,\n                                           max_features='sqrt',\n                                           min_samples_leaf=1,\n                                           min_samples_split=2,\n                                           n_estimators=800)\n\ngbr_model_selectbest.fit(X_train, y_train)\ny_pred_select = gbr_model_selectbest.predict(X_test)\n\nscore_select = r2_score(y_test, y_pred_select)\nrmse_select = np.sqrt(mean_squared_error(y_test, y_pred_select))\nrmsle_select = np.sqrt(mean_squared_log_error(y_test, y_pred_select))\n\nprint(f'R-squared: {score_select}')\nprint(f'RMSE: {rmse_select}')\nprint(f'RMSLE: {rmsle_select}')","519d6621":"score_dict = {\n    'Models': ['Gradient_base','Gradient_best','Gradient_selectKbest'],\n    'R-squared': [score, score_b, score_select],\n    'RMSE': [rmse, rmse_b, rmse_b],\n    'RMSLE': [rmsle, rmsle_b, rmsle_select]}\n\nscores_df = pd.DataFrame(score_dict)","b7b3c196":"scores_df","d7a108d2":"from sklearn.feature_selection import RFE\n\nrfe = RFE(gbr_model_base, n_features_to_select=80, step=1)\nrfe.fit(X,y)","1e2cedff":"tab = pd.DataFrame({'Name': X.columns,\n                    'Ranking': rfe.ranking_,\n                    'Bool': rfe.support_})","d946be9b":"selected = tab.loc[tab.Bool==True]","c3dcd891":"selected_list = selected.Name.values","c215073d":"gbr_model_rfe = GradientBoostingRegressor(random_state=45)\n\ngbr_model_rfe.fit(X_train, y_train)\ny_pred_rfe = gbr_model_rfe.predict(X_test)\n\nscore_rfe = r2_score(y_test, y_pred_rfe)\nrmse_rfe = np.sqrt(mean_squared_error(y_test, y_pred_rfe))\nrmsle_rfe = np.sqrt(mean_squared_log_error(y_test, y_pred_rfe))\n\nprint(f'R-squared: {score_rfe}')\nprint(f'RMSE: {rmse_rfe}')\nprint(f'RMSLE: {rmsle_rfe}')","e04301f5":"score_dict = {\n    'Models': ['Gradient_base','Gradient_best','Gradient_selectKbest','Gradient_rfe'],\n    'R-squared': [score, score_b, score_select, score_rfe],\n    'RMSE': [rmse, rmse_b, rmse_b, rmse_rfe],\n    'RMSLE': [rmsle, rmsle_b, rmsle_select,rmsle_rfe]}\n\nscores_df = pd.DataFrame(score_dict)\nscores_df","0f969ad3":"X.head()","2618a30c":"X.MSSubClass.values > 20","b40d32f9":"numeric_col = X.select_dtypes(include=['int64','float64']).columns","0ddb4b0a":"col_to_standarize = []\nfor col in numeric_col:\n    print(f'{col} has values {X[col].values}')\n    if set(X[col].values) != set([0,1]):\n        col_to_standarize.append(col)","70aa9ccb":"col_to_standarize","7f961c98":"from sklearn.preprocessing import MinMaxScaler","c35a15e7":"mm_scaler = MinMaxScaler()\nX[col_to_standarize] = mm_scaler.fit_transform(X[col_to_standarize])","bf45416a":"X.head()","7fad7058":"X_train, X_test, y_train, y_test = train_test_split(X,\n                                                    y,\n                                                    test_size=0.2,\n                                                    random_state=45)","ac1498f0":"gbr_model_t = GradientBoostingRegressor(random_state=45)\n\ngbr_model_t.fit(X_train, y_train)\ny_pred_t = gbr_model_t.predict(X_test)\n\nscore_t = r2_score(y_test, y_pred_rfe)\nrmse_t = np.sqrt(mean_squared_error(y_test, y_pred_t))\nrmsle_t = np.sqrt(mean_squared_log_error(y_test, y_pred_t))\n\nprint(f'R-squared: {score_t}')\nprint(f'RMSE: {rmse_t}')\nprint(f'RMSLE: {rmsle_t}')","a5ac0db5":"test_t = test_df_prep.copy()\ntest_t[col_to_standarize] = mm_scaler.fit_transform(test_t[col_to_standarize])\nprediction_t = gbr_model_t.predict(test_t)","b348d014":"# # Submit predictions\n# submission = pd.DataFrame()\n# submission['Id'] = test_df2.Id\n# submission['SalePrice'] = predictions\n# submission.to_csv('submission2.csv', index=False)","695c7ef8":"## Split train dataset into X & y","7d5c71d0":"## Change all object column into category and create dummies variables.\n\nIn order to create dummies variables and avoid the problem with shape of both test and train dataset I'll create new column which will flag them.","28d0e742":"Some features have to be convert into categorical.","6ab98cab":"This feature has some form of order, therfore I will map it.","92045186":"### Feature Importance and model improvements\n\n1. Univariate feature selection","a835e9fe":"### Dataframe with all models scores","a42d53da":"These features are ordinal, so I will map them with grade.","8e50ff88":"I'll drop 'Exterior2nd' and create dummies from 'Exterior1st'. I am not sure what exaclty I can do with them.","7dc7fb1f":"**LandContour**","690c3faa":"For the simplicity of the model I'll create only two groups: 'CompShg' and 'Other'. What is worth notice test.RoofMatl has less values then train dataset.","c43bc701":"**Area columns**","d0e99485":"**HouseStyle**","31a67dab":"### Improve the model using GridSearchCV","672e18cf":"**Exterior1st & Exterior2nd**","8dfc973c":"### Create a checkpoint","c64718a0":"**PavedDrive**","2ebb30c7":"**Foundation**","fd133701":"**Street**","6519e643":"Utilities has two unique values where most of it has one value, which means it holds no predictive power(constant). Therefore I will drop this column.","fff07dcf":"**HeatingQC**\n\nThis is feature is ordinal, therefore I'll map it.","aed82617":"**BldgType**","863608ce":"Later on I'll convert this column into dummy variables","9335c4f2":"### Checkpoint","acb2fbaf":"RoofStyle: Type of roof","1ddb33dc":"There is not much improvment so far ( I wonder if I've done something earlier and our model cannot improve).","4db71c4e":"Looks like this feature have big impact on Sale Price. I'll leave this feature unchange and create dummies variables.","1c6ef150":"**Utilities**","f8f86639":"**MasVnrType**","d2851b16":"**Neighborhood**","cdb1ba11":"**SaleType**","eb6a37c2":"**RoofMatl**","d1322e3f":"### Transform numeric data","7cdb7aea":"Low number of observation assigned to class 'Grvl', therefore I drop this columnm","a943f4ba":"# This notebook is trying to improve score on Kaggle submission by manipulating data. I've clean the data in previous notebook.","2738ad10":"**Heating**","9e511006":"## Numerical variables","1eaaf082":"Type of dwelling:\n   * 1Fam - Single-family Detached\t\n   * 2FmCon - Two-family Conversion; originally built as one-family dwelling\n   * Duplx - Duplex\n   * TwnhsE\t- Townhouse End Unit\n   * TwnhsI - Townhouse Inside Unit","5dd65c63":"**ExterQual & ExterCond**","6067f78a":"**SaleCondition**","4ae04401":"There are different values in test and train series. So I will have to be carefull when I create dummies from this feature. One way to avoid it is to create additional column where train dataframe as 1, and test dataframe as 0. After we create that column we can concatinate both. Next create dummies variables for categorical features. Finally we can split on base of the column we created.","3657b41e":"Most of the houses have gentle slope and overall the severity of the slope doesn't have huge impact on SalePrice. Therefore I create new column to indicate gentle slope or not.","6520fe7b":"**KitchenQual**\n\nThis feature is ordinal, so we map it.","2395a2b9":"**LotConfig**","5783cdf4":"**MSZoning**","81112295":"Condition1: Proximity to various conditions\n\t\n       Artery\tAdjacent to arterial street\n       Feedr\tAdjacent to feeder street\t\n       Norm\tNormal\t\n       RRNn\tWithin 200' of North-South Railroad\n       RRAn\tAdjacent to North-South Railroad\n       PosN\tNear positive off-site feature--park, greenbelt, etc.\n       PosA\tAdjacent to postive off-site feature\n       RRNe\tWithin 200' of East-West Railroad\n       RRAe\tAdjacent to East-West Railroad\n\t\nCondition2: Proximity to various conditions (if more than one is present)\n\t\t\n       Artery\tAdjacent to arterial street\n       Feedr\tAdjacent to feeder street\t\n       Norm\tNormal\t\n       RRNn\tWithin 200' of North-South Railroad\n       RRAn\tAdjacent to North-South Railroad\n       PosN\tNear positive off-site feature--park, greenbelt, etc.\n       PosA\tAdjacent to postive off-site feature\n       RRNe\tWithin 200' of East-West Railroad\n       RRAe\tAdjacent to East-West Railroad","4bd01e28":"**LandSlope**","51e41fd8":"**CentralAir**","1bf801ad":"### Make predictions to Kaggle","5b72cb82":"**Create some new features**","c784d839":"Most houses are on flat contour, however the houses on the hill have the highest SalePrice.\nSince this is categorical variable without order I will create dummie variables from this feature.","f9bfb931":"**Functional**","c5610f84":"'Reg' and 'IR1' have the highest frequency of data points within them. Since it is categorical variable I will create dummies","60fbb201":"**LotShape**","3e82628f":"**Electrical**\n\n     SBrkr - Standard Circuit Breakers & Romex\n     FuseA - Fuse Box over 60 AMP and all Romex wiring (Average)\t\n     FuseF - 60 AMP Fuse Box and mostly Romex wiring (Fair)\n     FuseP - 60 AMP Fuse Box and mostly knob & tube wiring (poor)\n     Mix   - Mixed\n\nA 60-amp service is probably inadequate for a modern home. A 100-amp service is good for a home of less than 3,000 square feet that does not have central air-conditioning or electric heat. A home larger than 2,000 square feet that has central air-conditioning or electric heat probably needs a 200-amp service.\n","e432ac15":"I'll create 4 categories : [Normal,Street,Railroad,Positive_off-site] and combine them together.","e4c9cc27":"**RoofStyle**","72637636":"I'll create dummy variables from this feature","1d76d995":"### -----------------","22698547":"**Condition1 & Condition2**","b88e2ead":"This feature is categorical therefore I'll create dummies variables."}}