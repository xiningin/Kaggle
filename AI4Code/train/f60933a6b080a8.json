{"cell_type":{"17d4479f":"code","fdee57be":"code","122343df":"code","9ffbc382":"code","fc0a3172":"code","c8130c99":"code","d4f14d96":"code","1c348a6c":"code","82199def":"code","83540ade":"code","60e1641e":"code","0f29fe00":"code","d43949dd":"markdown","dbfce4a0":"markdown","23f48ab5":"markdown"},"source":{"17d4479f":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport os\nimport copy\nimport seaborn as sns","fdee57be":"label = ['Class_1', 'Class_2', 'Class_3', 'Class_4', 'Class_5', 'Class_6',\n       'Class_7', 'Class_8', 'Class_9']\nmajority = 4   # < 5\nm_majority = 9  # <= 9\nNCLASS = len(label)","122343df":"# the max number of files is 5\n# input format: pd.DataFrame\n\n\ndef blend(a, b, c = 0, d = 0, e = 0):\n    if (not isinstance(c, pd.DataFrame)) and (not isinstance(d, pd.DataFrame)) and (not isinstance(e, pd.DataFrame)):\n        output = a.copy()   # 0.61 + 0.39\n        for i in label:\n            output[i] = a[i] * 0.61 + b[i] * 0.39\n    elif (not isinstance(d, pd.DataFrame)) and (not isinstance(e, pd.DataFrame)):\n        output = a.copy() # 0.52 + 0.32 + 0.16 \n        for i in label:\n            output[i] = a[i] * 0.52 + b[i] * 0.32 + c[i] * 0.16\n    elif (not isinstance(e, pd.DataFrame)):\n        output = a.copy()  # 0.48 + 0.29 + 0.17 + 0.06\n        for i in label:\n            output[i] = a[i] * 0.48 + b[i] * 0.27 + c[i] * 0.17 + d[i] * 0.06 \n    else: # 0.44 + 0.27 + 0.17 + 0.09 + 0.03\n        output = a.copy()\n        for i in label:\n            output[i] = a[i] * 0.44 + b[i] * 0.27 + c[i] * 0.17 + d[i] * 0.09 + e[i] * 0.03\n#         av = a.values\n#         bv = b.values\n#         cv = c.values\n#         dv = d.values\n#         ev = e.values  \n#         imp = output.copy()\n#         impv = imp.values\n#         number = 0  \n#         for i in range (len(output)):\n#             c_count = 0  \n#             row = impv[i,1:]\n#             row_sort = np.sort(row)        \n#             row5 = av[i,1:]\n#             row4 = bv[i,1:]\n#             row3 = cv[i,1:]\n#             row2 = dv[i,1:]\n#             row1 = ev[i,1:]        \n#             row1_sort = np.sort(row1)\n#             row2_sort = np.sort(row2)\n#             row3_sort = np.sort(row3)\n#             row4_sort = np.sort(row4)\n#             row5_sort = np.sort(row5)\n#             for j in range (NCLASS): \n#                 count = 0\n#                 for k in range (NCLASS):                \n#                     if (row5[j] == row5_sort[k]):                     \n#                         if (row1[j] == row1_sort[k]):\n#                             count = count + 1\n#                         if (row2[j] == row2_sort[k]):\n#                             count = count + 1                   \n#                         if (row3[j] == row3_sort[k]):\n#                             count = count + 1   \n#                         if (row4[j] == row4_sort[k]):\n#                             count = count + 1 \n#                 if (count >= majority):\n#                     c_count = c_count + 1\n#             if ((c_count >= m_majority) and (row5_sort[8] >= row_sort[8])): \n#                 impv[i, 1:] = row5            \n#                 number = number + 1            \n#         imp.iloc[:, 1:] = impv[:, 1:]\n#         p_number = round(((number \/ 100000) * 100),2)   \n#         output = imp\n    output[label] = np.clip(output[label], 0.002500, 0.941)   # (0.002500, 0.941)\n    return output","9ffbc382":"# all the combinations\n# the max number of combinations is 26\n\ndef generate(a, b, c = 0, d = 0, e = 0):\n    if (not isinstance(c, pd.DataFrame)) and (not isinstance(d, pd.DataFrame)) and (not isinstance(e, pd.DataFrame)):\n        ab = blend(a, b)\n        ab.to_csv('ab.csv',index=False)\n    elif (not isinstance(d, pd.DataFrame)) and (not isinstance(e, pd.DataFrame)):\n        ab = blend(a, b)\n        ab.to_csv('ab.csv',index=False)\n        ac = blend(a, c)\n        ac.to_csv('ac.csv',index=False)\n        bc = blend(b, c)\n        bc.to_csv('bc.csv',index=False)  \n        abc = blend(a, b, c)\n        abc.to_csv('abc.csv',index=False)\n    elif (not isinstance(e, pd.DataFrame)):\n        ab = blend(a, b)\n        ab.to_csv('ab.csv',index=False)\n        ac = blend(a, c)\n        ac.to_csv('ac.csv',index=False)\n        ad = blend(a, d)\n        ad.to_csv('ad.csv',index=False)\n        bc = blend(b, c)\n        bc.to_csv('bc.csv',index=False)\n        bd = blend(b, d)\n        bd.to_csv('bd.csv',index=False)\n        cd = blend(c, d)\n        cd.to_csv('cd.csv',index=False)   \n        abc = blend(a, b, c)\n        abc.to_csv('abc.csv',index=False)\n        abd = blend(a, b, d)\n        abd.to_csv('abd.csv',index=False)\n        acd = blend(a, c, d)\n        acd.to_csv('acd.csv',index=False)\n        bcd = blend(b, c, d)\n        bcd.to_csv('bcd.csv',index=False)\n        bde = blend(b, d, e) \n        abcd = blend(a, b, c, d)\n        abcd.to_csv('abcd.csv',index=False)\n    else:\n        ab = blend(a, b)\n        ab.to_csv('ab.csv',index=False)\n        ac = blend(a, c)\n        ac.to_csv('ac.csv',index=False)\n        ad = blend(a, d)\n        ad.to_csv('ad.csv',index=False)\n        ae = blend(a, e)\n        ae.to_csv('ae.csv',index=False)\n        bc = blend(b, c)\n        bc.to_csv('bc.csv',index=False)\n        bd = blend(b, d)\n        bd.to_csv('bd.csv',index=False)\n        be = blend(b, e)\n        be.to_csv('be.csv',index=False)\n        cd = blend(c, d)\n        cd.to_csv('cd.csv',index=False)\n        ce = blend(c, e)\n        ce.to_csv('ce.csv',index=False)\n        de = blend(d, e)\n        de.to_csv('de.csv',index=False)     \n        abc = blend(a, b, c)\n        abc.to_csv('abc.csv',index=False)\n        abd = blend(a, b, d)\n        abd.to_csv('abd.csv',index=False)\n        abe = blend(a, b, e)\n        abe.to_csv('abe.csv',index=False)\n        acd = blend(a, c, d)\n        acd.to_csv('acd.csv',index=False)\n        ace = blend(a, c, e)\n        ace.to_csv('ace.csv',index=False)\n        ade = blend(a, d, e)\n        ade.to_csv('ade.csv',index=False)\n        bcd = blend(b, c, d)\n        bcd.to_csv('bcd.csv',index=False)\n        bce = blend(b, c, e)\n        bce.to_csv('bce.csv',index=False)\n        bde = blend(b, d, e)\n        bde.to_csv('bde.csv',index=False)\n        cde = blend(c, d, e)\n        cde.to_csv('cde.csv',index=False)  \n        abcd = blend(a, b, c, d)\n        abcd.to_csv('abcd.csv',index=False)\n        abce = blend(a, b, c, e)\n        abce.to_csv('abce.csv',index=False)\n        abde = blend(a, b, d, e)\n        abde.to_csv('abde.csv',index=False)\n        acde = blend(a, c, d, e)\n        acde.to_csv('acde.csv',index=False)\n        bcde = blend(b, c, d, e)\n        bcde.to_csv('bcde.csv',index=False)\n        abcde = blend(a, b, c, d, e)\n        abcde.to_csv('abcde.csv',index=False)","fc0a3172":"test_mode = 0","c8130c99":"if not test_mode:\n    file1 = pd.read_csv(\"..\/input\/further-blending-results\/version 18 further 1.74403.csv\")\n    file2 = pd.read_csv(\"..\/input\/further-blending-results\/version 18 further 1.74404.csv\")\n    file3 = pd.read_csv(\"..\/input\/further-blending-results\/version 13 further 1.74405.csv\")\n\n    file41 = pd.read_csv(\"..\/input\/further-blending-results\/version 13 further 1.74406.csv\")\n    file42 = pd.read_csv(\"..\/input\/further-blending-results\/further 1.74407.csv\")\n    file4 = blend(file41, file42)\n    \n    file51 = pd.read_csv(\"..\/input\/further-blending-results\/version 16 further 1.74409 abcd.csv\")\n    file52 = pd.read_csv(\"..\/input\/further-blending-results\/version 16 further 1.74409 abcde.csv\")\n    file53 = pd.read_csv(\"..\/input\/further-blending-results\/version 14 further 1.74409.csv\")\n    file5 = blend(file51, file52, file53)\n    \n    generate(file1, file2, file3, file4, file5)\nelse:\n    file1 = pd.read_csv(\"..\/input\/further-blending-results\/version 13 further 1.74405.csv\")\n    file2 = pd.read_csv(\"..\/input\/further-blending-results\/version 13 further 1.74406.csv\")\n    file3 = pd.read_csv(\"..\/input\/further-blending-results\/further 1.74407.csv\")\n    file4 = pd.read_csv(\"..\/input\/further-blending-results\/version 14 further 1.74409.csv\")\n    file5 = pd.read_csv(\"..\/input\/further-blending-results\/version 16 further 1.74409 abcd.csv\")\n    file6 = pd.read_csv(\"..\/input\/further-blending-results\/version 16 further 1.74409 abcde.csv\")\n    ","d4f14d96":"if test_mode:\n    row_mean = df_sub.mean(axis=1)\n    plt.figure(figsize=(10,10))\n    sns.heatmap(df_sub.corr(), cmap='Spectral')\n    plt.ylabel('file index numbers')\n    plt.xlabel('file index numbers')\n    plt.show()","1c348a6c":"if test_mode:    \n    # basic analysis and visualization of subgroups in different color.\n    plt.figure(figsize=(12, 5))\n    df_mean_corr = pd.DataFrame({'mean_corr': df_sub.corr().mean()})\n    df_mean_corr = df_mean_corr.sort_values('mean_corr', ascending=False)\n    df_mean_corr = df_mean_corr.reset_index()\n\n    plt.plot(df_mean_corr.index[:1], df_mean_corr['mean_corr'].values[:1], 'o', ms=10)\n    plt.plot(df_mean_corr.index[1:2], df_mean_corr['mean_corr'].values[1:2], 'o', ms=10)\n    plt.plot(df_mean_corr.index[2:3], df_mean_corr['mean_corr'].values[2:3], 'o', ms=10)\n    plt.plot(df_mean_corr.index[3:4], df_mean_corr['mean_corr'].values[3:4], 'o', ms=10)\n    plt.plot(df_mean_corr.index[4:5], df_mean_corr['mean_corr'].values[4:5], 'o', ms=10)\n    plt.plot(df_mean_corr.index[5:], df_mean_corr['mean_corr'].values[5:], 'o', ms=10)\n    plt.xticks([*range(len(df_mean_corr))], df_mean_corr['index'].tolist())\n    plt.title('determination of sub_groups')\n    plt.ylabel('a correlation related index')\n    plt.xlabel('file index numbers')\n    plt.show()","82199def":"if test_mode:    \n    df_sub['weighted_avg'] =  (\n        -15 * ( 5 * df_sub['3'] +  5 * df_sub['4']) \/ 10 +\n        15 * (80 *  df_sub['5'] - 43 * df_sub['6']) \/ 37 +\n       150 * (150 * df_sub['1'] + 20 * df_sub['2']) \/ 170\n    ) \/ 150 ","83540ade":"if test_mode:\n    df_sub","60e1641e":"if test_mode:    \n    output = file1.copy()\n    output.Class_2 = df_sub.weighted_avg * 0.4 + row_mean * 0.6\n    output","0f29fe00":"if test_mode:\n    output.to_csv('Class_2 modified + base 1.74405.csv',index=False)","d43949dd":"use generate() method to get the blending results","dbfce4a0":"# Reference:\n# *  https:\/\/www.kaggle.com\/mehrankazeminia\/2-tps-jun-21-comparative-method-for-classifier by Mehran Kazeminia and Somayyeh Gholami\n# *  https:\/\/www.kaggle.com\/hikmetsezen\/blend-boosting-best-score-on-tsp-mar-2021 by Hikmet Sezen","23f48ab5":"# Modify Class_2"}}