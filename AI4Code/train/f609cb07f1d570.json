{"cell_type":{"cd6828cd":"code","e51a6f01":"code","32d905f8":"code","afe9599c":"code","d90bd289":"code","b77d2a5c":"code","1f9a8b85":"code","0b72356f":"code","d043195d":"code","97180f9e":"code","e1d611c8":"code","e4a2c0ec":"code","a8320cc6":"code","eff5e702":"code","0c989a36":"code","1facc439":"code","960123f4":"code","cdcdbf19":"code","b5df79c4":"code","40f57b7c":"code","e1fda35e":"code","e699b665":"code","6d2055ee":"code","abba7592":"code","06fe2dcd":"markdown","b786a7c0":"markdown","eff54a30":"markdown","93b50851":"markdown"},"source":{"cd6828cd":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns # gera\u00e7\u00e3o de gr\u00e1ficos\n\n# Ignorar warnings\nimport warnings\nwarnings.filterwarnings('ignore')","e51a6f01":"df1 = pd.read_csv('..\/input\/breast-cancer-wisconsin-data\/data.csv')","32d905f8":"df1.sample(10)","afe9599c":"from sklearn.preprocessing import LabelEncoder\ndiagnosis = LabelEncoder()\ndf1['diagnosis'] = diagnosis.fit_transform(df1['diagnosis']) ","d90bd289":"df1.head() # 0 = B; 1 = M ","b77d2a5c":"df1.drop(columns =['id','Unnamed: 32'], axis=1, inplace=True)\ndf1.head()","1f9a8b85":"from sklearn.model_selection import train_test_split\n\nx_train, x_test, y_train, y_test = train_test_split(df1.loc[:,df1.columns != 'diagnosis'],\n                                                    df1['diagnosis'],\n                                                    test_size=0.3)","0b72356f":"x_train.head()","d043195d":"print(x_train.shape)\nprint(x_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)","97180f9e":"df_pivot = pd.DataFrame({'types': x_train.dtypes,\n                         'nulls': x_train.isna().sum(),\n                          '% nulls': x_train.isna().sum() \/ x_train.shape[0],\n                          'size': x_train.shape[0],\n                          'uniques': x_train.nunique()})\ndf_pivot","e1d611c8":"fig, ax = plt.subplots(figsize=(12,7))\nsns.heatmap(x_train.corr(), vmin=-1, vmax=1,\n            cmap=sns.diverging_palette(20, 220, as_cmap=True), \n            yticklabels=True) # show all y values\n\nplt.show()","e4a2c0ec":"df1.corr()['diagnosis'].sort_values(ascending=False).head()","a8320cc6":"plt.scatter(x_train['concave points_worst'], x_train['perimeter_worst'], c=y_train, cmap=plt.cm.Spectral)\nplt.colorbar()\nplt.xlabel('concave points_worst')\nplt.ylabel('perimeter_worst')\nplt.title('concave points_worst x perimeter_worst')\nplt.show()\n","eff5e702":"sns.boxplot(y=x_train['concave points_worst'], x=y_train)\nplt.show()","0c989a36":"sns.boxplot(y=x_train['perimeter_worst'], x=y_train)\nplt.show()","1facc439":"# Positive Correlated\nplt.xlabel('area_se')\nplt.ylabel('radius_se')\nplt.scatter(x_train['area_se'], x_train['radius_se'])\nplt.show()","960123f4":"from sklearn import preprocessing\npreprocessParams = preprocessing.StandardScaler().fit(x_train)\nx_train_normalized = preprocessParams.transform(x_train)\nx_test_normalized = preprocessParams.transform(x_test)\n\nx_train_normalized[:1] ","cdcdbf19":"from keras import Sequential\nfrom keras.layers import Dense\nfrom keras.optimizers import SGD","b5df79c4":"NumerOfClasses = len(y_train.unique())\nNumerOfClasses","40f57b7c":"RN = Sequential() # create network structure\nRN.add(Dense(10, input_shape = x_train_normalized.shape[1:], activation ='sigmoid'))\nRN.add(Dense(NumerOfClasses, activation ='sigmoid'))\nRN.summary()","e1fda35e":"# training\nfrom keras.utils import to_categorical\nsgd = SGD(lr=0.1, decay=1e-6, momentum=0.9)\nRN.compile(optimizer=sgd, loss='mean_squared_error', metrics=['accuracy'])\ntrainedRN = RN.fit(x_train_normalized, to_categorical(y_train), epochs=100, verbose=1)","e699b665":"score = RN.evaluate(x_test_normalized, to_categorical(y_test),verbose=0)\nprint('Test Score:', score[0])\nprint('Test Accuracy:', score[1])","6d2055ee":"#Predict\nfrom sklearn.metrics import confusion_matrix\ny_test_predicted = RN.predict(x_test_normalized)\ny_test_predicted_index = np.argmax(y_test_predicted, axis=1)\ny_test_index = y_test.values","abba7592":"#Confusion Matrix\nconfMatrix = pd.DataFrame(confusion_matrix(y_test_predicted_index, y_test_index),\n                           index=['0 - Benigno','1 - Maligno'],columns=['0 - Benigno','1 - Maligno'])\n\nconfMatrix.index.name = 'Actual'\nconfMatrix.columns.name= 'Predicted'\nprint(confMatrix)","06fe2dcd":"**Neural Networks Structure**","b786a7c0":"**Split Train & Test**","eff54a30":"**Exploratory Data Analysis**","93b50851":"**Normalize Data**"}}