{"cell_type":{"e4334070":"code","23b157a3":"code","53fb5d8a":"code","3d6123dd":"code","d761a713":"code","79300ce9":"code","78e3978f":"code","8ee2f702":"code","537e0aa0":"code","f1c415a3":"code","b4b5d690":"code","7a5a3eef":"code","eda3f0c8":"code","500452ef":"code","eccdf159":"code","a7f4c779":"code","dbb95952":"code","47fbc955":"code","f2b28747":"code","8da9a6c0":"code","6c8ec5ae":"code","ad47a5c1":"code","4828a37a":"code","f4a3fe77":"code","f1ca4789":"code","576e1c6f":"code","7f98769c":"code","c2b4e410":"code","47126984":"code","494f2056":"code","1baf9e96":"code","b123baf8":"code","77f3b152":"code","4789d6bb":"markdown","442ec862":"markdown","0082052c":"markdown","94ac6047":"markdown","878b6315":"markdown","66fd801b":"markdown","45909c3e":"markdown","eaf08d9c":"markdown","5c4bf30a":"markdown","acbf01cd":"markdown","cc073c3a":"markdown"},"source":{"e4334070":"import matplotlib.pyplot as plt\nplt.style.use('classic')\nimport numpy as np\nimport pandas as pd\nfrom datetime import timedelta\nimport warnings\nwarnings.filterwarnings('ignore')\n\n%matplotlib inline","23b157a3":"# Create Some Data\ndata_range = np.random.RandomState(0)\nx = np.linspace(0, 10, 500)\ny = np.cumsum(data_range.randn(500, 6), 0)\n\n# viuslaization\nplt.plot(x, y)\nplt.legend('ABCDEF', ncol = 2, loc = 'best')\nplt.tight_layout()\nplt.show()","53fb5d8a":"import seaborn as sns\nsns.set()","3d6123dd":"plt.plot(x, y)\nplt.legend('ABCDEF', ncol = 2, loc = 'best')\nplt.tight_layout()\nplt.show()","d761a713":"data = np.random.multivariate_normal([0, 0], [[5, 2], [2, 2]], size = 10000)\ndata = pd.DataFrame(data, columns=['x', 'y'])\n\nfor col in 'xy':\n    plt.hist(data[col], alpha = 0.5)\n    \n\nplt.title('Seaborn Plots')\nplt.tight_layout()\nplt.show()\n","79300ce9":"for col in 'xy':\n    sns.kdeplot(data[col], shade = True)\nplt.show()","78e3978f":"sns.distplot(data['x'])\nsns.distplot(data['y'])\nplt.show()","8ee2f702":"iris_dataset = sns.load_dataset('iris')\niris_dataset.head()","537e0aa0":"sns.pairplot(iris_dataset, hue = 'species', size = 2.5);","f1c415a3":"tips_dataset = sns.load_dataset('tips')\ntips_dataset.head()","b4b5d690":"tips_dataset['tip_pct'] = 100 * tips_dataset['tip'] \/ tips_dataset['total_bill']\ngrid = sns.FacetGrid(tips_dataset, row = 'sex',col = 'time', margin_titles=True)\ngrid.map(plt.hist, 'tip_pct', bins = np.linspace(0, 40, 15));","7a5a3eef":"with sns.axes_style(style = 'ticks'):\n    g = sns.factorplot('day', 'total_bill', 'sex', data= tips_dataset, kind = 'box')\n    g.set_axis_labels('Day', \"Total Bill\")","eda3f0c8":"with sns.axes_style('white'):\n    sns.jointplot(\"total_bill\", \"tip\", data = tips_dataset, kind='hex')","500452ef":"sns.jointplot(\"total_bill\", \"tip\", data = tips_dataset, kind = 'reg');","eccdf159":"planets_dataset = sns.load_dataset('planets')\nplanets_dataset.head()","a7f4c779":"with sns.axes_style('white'):\n    g = sns.factorplot(\"year\", data = planets_dataset,\n                      aspect = 2,kind = \"count\", color = \"steelblue\")\n    g.set_xticklabels(step = 5)","dbb95952":"with sns.axes_style('white'):\n    g = sns.factorplot(\"year\", data = planets_dataset,\n                      aspect = 2,kind = \"count\", hue = \"method\", order = range(2001, 2015))\n    g.set_ylabels(\"Number of Planets Discovered\")","47fbc955":"marathon_datasets = pd.read_csv(\"..\/input\/marathon-data\/marathon-data.csv\")","f2b28747":"marathon_datasets.head()","8da9a6c0":"marathon_datasets.info()","6c8ec5ae":"marathon_datasets.describe()","ad47a5c1":"def convert_time(s):\n    hour, minute, second  = map(int, s.split(\":\"))\n    return timedelta(hours = hour, minutes = minute, seconds = second)\n\ndataset = pd.read_csv(\"..\/input\/marathon-data\/marathon-data.csv\", converters={'split':convert_time, \"final\":convert_time})\ndataset.head()","4828a37a":"dataset.dtypes","f4a3fe77":"dataset['split_sec'] = dataset['split'].astype(int) \/ 1e9\ndataset['final_sec'] = dataset['final'].astype(int) \/ 1e9","f1ca4789":"dataset.head()","576e1c6f":"with sns.axes_style('white'):\n    g = sns.jointplot('split_sec', \"final_sec\", dataset, kind ='hex')\n    g.ax_joint.plot(np.linspace(4000, 16000),\n                   np.linspace(8000, 32000), \":k\")","7f98769c":"dataset['split_frac'] = 1 -2 * dataset['split_sec'] \/ dataset['final_sec']","c2b4e410":"dataset.head()","47126984":"sns.distplot(dataset['split_frac'], kde = False)\nplt.axvline(0, color = \"K\", linestyle=\"--\")","494f2056":"sum(dataset.split_frac<0)","1baf9e96":"g = sns.PairGrid(dataset, vars = ['age', 'split_sec', 'final_sec','split_frac'],\n                hue = \"gender\", palette = \"RdBu_r\")\ng.map(plt.scatter, alpha = 0.8)\ng.add_legend();","b123baf8":"sns.kdeplot(dataset.split_frac[dataset.gender == 'M'], label= 'Men', shade = True)\nsns.kdeplot(dataset.split_frac[dataset.gender == 'W'], label= 'Women', shade = True)\nplt.xlabel('split_frac')","77f3b152":"sns.violinplot(\"gender\", 'split_frac', data = dataset, palette = ['lightblue', 'lightpink'])","4789d6bb":"## Import Necessary Python Lbraries","442ec862":"<h1>Table of Contents<span class=\"tocSkip\"><\/span><\/h1>\n<div class=\"toc\"><ul class=\"toc-item\"><li><span><a href=\"#Seaborn Versus Matplotlib\" data-toc-modified-id=\"Seaborn Versus Matplotlib-1\">Seaborn Versus Matplotlib<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#1.0-->Matplotlib_Random_Walk\" data-toc-modified-id=\"1.0-1.1\">1.0-->Matplotlib_Random_Walk<\/a><\/span><\/li><li><span><a href=\"#2.0-->Exploring_Seaborn_Plots\" data-toc-modified-id=\"2.0-2.1\">2.0-->Exploring_Seaborn_Plots<\/a><\/span><\/li><li><span><a href=\"#3.0-->PairPlot\" data-toc-modified-id=\"3.0-3.1\">3.0-->PairPlot<\/a><\/span><\/li><li><span><a href=\"#4.0-->Factor_Plot\" data-toc-modified-id=\"4.0-4.1\">4.0-->Factor_Plot<\/a><\/span><\/li><li><span><a href=\"#5.0-->Joint_Distribution\" data-toc-modified-id=\"5.0-5.1\">5.0-->Joint_Distribution<\/a><\/span><\/li><li><span><a href=\"#6.0-->Bar_Plot\" data-toc-modified-id=\"6.0-6.1\">6.0-->Bar_Plot<\/a><\/span><\/li><\/li><\/ul><\/div>","0082052c":"## 1.0-->Matplotlib_Random_Walk","94ac6047":"## Combine Plot Using distplot()","878b6315":"### <b style=\"color:red\">Although the result contains all the information we\u2019d like it to convey, it does so in a way that is not all that aesthetically pleasing, and even looks a bit old-fashioned in the context of 21st-century data visualization. Now let\u2019s take a look at how it works with Seaborn. As we will see, Seaborn has many of its own highlevel plotting routines, but it can also overwrite Matplotlib\u2019s default parameters and in turn get even simple Matplotlib scripts to produce vastly superior output. We can set the style by calling Seaborn\u2019s set() method. By convention, Seaborn is imported as sns:<\/b>","66fd801b":"## 6.0-->Bar_Plot","45909c3e":"## 3.0-->PairPlot","eaf08d9c":"## 5.0-->Joint_Distribution","5c4bf30a":"## 4.0-->Factor_Plot","acbf01cd":"## KDE-plot","cc073c3a":"## 2.0-->Exploring_Seaborn_Plots\nThe main idea of Seaborn is that it provides high-level commands to create a variety of plot types useful\nfor statistical data exploration, and even some statistical model fitting.\nLet\u2019s take a look at a few of the datasets and plot types available in Seaborn. Note that all of the\nfollowing could be done using raw Matplotlib commands (this is, in fact, what Seaborn does under the\nhood), but the Seaborn API is much more convenient."}}