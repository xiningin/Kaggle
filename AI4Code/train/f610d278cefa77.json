{"cell_type":{"07bda948":"code","e576df2b":"code","5c400b85":"code","bd3bbb4f":"code","e98617c4":"code","5aeddb2f":"code","0133656e":"code","806b3fc7":"code","45750517":"code","38086272":"code","ab31a32a":"code","67289bfd":"code","e53f4730":"code","7fefaa38":"code","a321daf8":"code","b8d6cfbe":"code","597b06bf":"code","627eb97d":"code","4dc36605":"code","10330bad":"code","3afce0b2":"code","41c8d9ea":"code","bff8544b":"code","20f5a3cf":"code","02a09578":"code","9a5e091e":"code","f3278c3f":"code","d5605821":"code","895118af":"code","d72c768f":"code","b1d9577e":"code","22a1c696":"code","e7b5da08":"code","1b70151d":"code","5f16bbf6":"code","f0fe678c":"code","70898b1c":"code","af344cd2":"code","bf954a54":"code","ceb3d256":"code","13096dd8":"code","6ca3d7eb":"code","48400be6":"code","ae6ebeae":"code","6c27f321":"code","4f25cb13":"code","c647e803":"code","1ae40570":"markdown","f0f6ff97":"markdown"},"source":{"07bda948":"import numpy as np\nimport pandas as pd\nimport tensorflow as tf\nimport keras\nfrom keras.models import Sequential\nfrom sklearn.preprocessing import RobustScaler\n# from keras.preprocessing.sequence import TimeseriesGenerator\nfrom sklearn.model_selection import train_test_split\n# import tensorflow_probability as tfp\n# import gresearch_crypto\nimport gc","e576df2b":"dir_path = '\/kaggle\/input\/g-research-crypto-forecasting\/'\ntrain = pd.read_csv(dir_path + 'train.csv').set_index('timestamp')\nassets = pd.read_csv(dir_path + 'asset_details.csv' )\nassets_order = pd.read_csv(dir_path + 'supplemental_train.csv').Asset_ID[:14]\nsubmission = pd.read_csv(dir_path + 'example_sample_submission.csv' )","5c400b85":"# train.info()\n# assets.info()","bd3bbb4f":"# train.describe()","e98617c4":"train = train[:1000000]","5aeddb2f":"VWAP_MAX =np.max(train[np.isfinite(train.VWAP)].VWAP)\nVWAP_MIN =np.min(train[np.isfinite(train.VWAP)].VWAP)\nprint(VWAP_MAX)\nprint(VWAP_MIN)","0133656e":"tmp_VWAP = np.nan_to_num(train.VWAP, posinf=VWAP_MAX, neginf=VWAP_MIN)\ndel train['VWAP']\ntrain['VWAP'] = tmp_VWAP\ntrain.shape","806b3fc7":"# print(\"Data NULL: \\n\", train.isnull().sum())","45750517":"train['Target'] = train['Target'].fillna(0)","38086272":"df = train[['Asset_ID','Target']].copy()\ntime = dict((i,j) for j,i in enumerate(df.index.unique()))\ndf['id'] = df.index.map(time)\n# df","ab31a32a":"df['id'] = df['id'].astype(str) + '_' + df['Asset_ID'].astype(str)\n# df","67289bfd":"ids = df.id.copy()\ndel df","e53f4730":"def add_features(df):\n    df['upper'] = df['High'] - np.maximum(df['Close'],df['Open'])\n    df['lower'] = np.minimum(df['Close'],df['Open'])-df['Low']\n    df['range'] = df['High'] - df['Low']\n    df['mean_trade'] = df['Volume']\/df['Count']\n    df['log_price_change'] = np.log(df['Close']\/df['Open'])\n    return df\ntrain=add_features(train)\ntrain.shape","7fefaa38":"# train.head()","a321daf8":"features = train.columns.drop(['Asset_ID','Target'])\ntrain[features] = RobustScaler().fit_transform(train[features])\ntrain.head()","b8d6cfbe":"index = train.index.unique()\n# for i in range(index[0],index[-1]+60,60):\n#     print(i)\ndef reindex(df):\n    df = df.reindex(range(index[0],index[-1]+60,60),method='nearest')\n    df = df.fillna(method=\"ffill\").fillna(method=\"bfill\")\n    return df\ntrain=train.groupby('Asset_ID').apply(reindex).reset_index(0, drop=True).sort_index()\ntrain.shape","597b06bf":"#  \u628agroup_num and row_id \u5408\u4f75\u8d77\u4f86\ntrain['group_num'] = train.index.map(time)\ntrain = train.dropna(subset=['group_num'])\ntrain['group_num'] = train['group_num'].astype('int')\n\n# \u6a19\u8a18\u7522\u751f\u51fa\u4f86\u7684row\u70banon-real\ntrain['id'] = train['group_num'].astype(str) + '_' + train['Asset_ID'].astype(str)\ntrain['is_real'] = train.id.isin(ids)*1\ntrain = train.drop('id', axis=1)","627eb97d":"# non_real \u7684\u8a2d\u70ba0\nfeatures = train.columns.drop(['Asset_ID','group_num','is_real'])\ntrain.loc[train.is_real==0, features]=0","4dc36605":"# \u5c07'supplemental_train.csv' \u4e2d\u7684asset_order\u5408\u4f75\u9032\u4f86\ntrain['asset_order'] = train.Asset_ID.map(assets_order)\ntrain=train.sort_values(by=['group_num', 'asset_order'])\ntrain.head(5)","10330bad":"# train.shape","3afce0b2":"y_train = train.Target.copy()\ny_train.shape","41c8d9ea":"x_train = train.drop(['Target'],axis = 1)\nprint(x_train.shape)\nprint(x_train.head(5))","bff8544b":"x_train = x_train.to_numpy().reshape(-1,16,1)\nx_train.shape","20f5a3cf":"train_x, val_x, train_y, val_y = train_test_split(x_train, y_train, test_size = 0.25, random_state=2)","02a09578":"# model = keras.models.Sequential([\n#       keras.layers.LSTM(64,return_sequences=True,input_shape=(16,1)),\n#       keras.layers.ReLU(),\n#       keras.layers.Dropout(0.2),\n#       # keras.layers.LSTM(40,return_sequences=True, activation='relu'),\n#       # keras.layers.Dropout(0.5),\n#       keras.layers.LSTM(32),\n\n#       keras.layers.Dropout(0.5),\n#       keras.layers.Dense(1,activation = 'linear' )#activation = \"linear\"\n# ])\n# model.summary()","9a5e091e":"from keras.layers import Dense, LSTM, Dropout, GRU\nfrom tensorflow.keras.optimizers import RMSprop\n# The GRU architecture\nregressorGRU = Sequential()\n# First GRU layer with Dropout regularisation\nregressorGRU.add(GRU(units=50, return_sequences=True, input_shape=(train_x.shape[1],1), activation='tanh'))\nregressorGRU.add(Dropout(0.2))\n# Second GRU layer\nregressorGRU.add(GRU(units=50, return_sequences=True, input_shape=(train_x.shape[1],1), activation='tanh'))\nregressorGRU.add(Dropout(0.2))\n# Third GRU layer\nregressorGRU.add(GRU(units=50, return_sequences=True, input_shape=(train_x.shape[1],1), activation='tanh'))\nregressorGRU.add(Dropout(0.2))\n# Fourth GRU layer\nregressorGRU.add(GRU(units=50, activation='tanh'))\nregressorGRU.add(Dropout(0.2))\n# The output layer\nregressorGRU.add(Dense(units=1))","f3278c3f":"# regressorGRU.compile(optimizer=SGD(lr=0.001, decay=1e-7, momentum=0.9, nesterov=False),loss='mse', metrics = ['mae'])\nregressorGRU.compile(optimizer=RMSprop(lr=0.001),loss='mse', metrics = ['mae'])\nearly_stopping = tf.keras.callbacks.EarlyStopping(monitor=\"val_loss\",mode=\"min\",patience=5)","d5605821":"gru = regressorGRU.fit(x_train,y_train, batch_size=64,epochs=5,validation_data=(val_x,val_y), callbacks=[early_stopping], shuffle=True)","895118af":"test = pd.read_csv(dir_path + 'example_test.csv').set_index('timestamp')\nRow_Id = test['row_id']\nGroup_Num = test['group_num']","d72c768f":"VWAP_MAX =np.max(test[np.isfinite(test.VWAP)].VWAP)\nVWAP_MIN =np.min(test[np.isfinite(test.VWAP)].VWAP)\ntmp_VWAP = np.nan_to_num(test.VWAP, posinf=VWAP_MAX, neginf=VWAP_MIN)\ndel test['VWAP']\ntest['VWAP'] = tmp_VWAP\ntest.shape","b1d9577e":"df = test[['Asset_ID']].copy()\ntime = dict((i,j) for j,i in enumerate(df.index.unique()))\n# df['id'] = df.index.map(time)\n#\n# df['id'] = df['id'].astype(str) + '_' + df['Asset_ID'].astype(str)\n# ids = df.id.copy()\n# del df","22a1c696":"def add_features_test(df):\n    df['upper'] = df['High'] - np.maximum(df['Close'],df['Open'])\n    df['lower'] = np.minimum(df['Close'],df['Open'])-df['Low']\n    df['range'] = df['High'] - df['Low']\n    df['mean_trade'] = df['Volume']\/df['Count']\n    df['log_price_change'] = np.log(df['Close']\/df['Open'])\n    return df\ntest=add_features_test(test)\ntest.shape","e7b5da08":"features = test.columns.drop(['Asset_ID','row_id','group_num'])\ntest[features] = RobustScaler().fit_transform(test[features])","1b70151d":"index = test.index.unique()\ndef reindex_test(df):\n    df = df.reindex(range(index[0],index[-1]+60,60),method='nearest')\n    df = df.fillna(method=\"ffill\").fillna(method=\"bfill\")\n    return df\ntest=test.groupby('Asset_ID').apply(reindex_test).reset_index(0, drop=True).sort_index()\ntest.shape","5f16bbf6":"#  \u628agroup_num and row_id \u5408\u4f75\u8d77\u4f86\ntest['group_num'] = test.index.map(time)\ntest = test.dropna(subset=['group_num'])\ntest['group_num'] = test['group_num'].astype('int')\n\n# \u6a19\u8a18\u7522\u751f\u51fa\u4f86\u7684row\u70banon-real\ntest['id'] = test['group_num'].astype(str) + '_' + test['Asset_ID'].astype(str)\ntest['is_real'] = test.id.isin(ids)*1\ntest = test.drop('id', axis=1)","f0fe678c":"# non_real \u7684\u8a2d\u70ba0\nfeatures_test = test.columns.drop(['Asset_ID','group_num','is_real'])\ntest.loc[test.is_real==0, features_test]=0","70898b1c":"test['asset_order'] = test.Asset_ID.map(assets_order)\ntest=test.sort_values(by=['asset_order'])\nprint(test.shape)","af344cd2":"# print(test.head(20))","bf954a54":"del test['row_id']\nprint(test.shape)","ceb3d256":"test = test.to_numpy().reshape(-1,16,1)\ntest.shape","13096dd8":"test_y = np.mean(regressorGRU.predict(test),axis =1)\ntest_y = pd.Series(test_y,name=\"sales\")\ntest_y","6ca3d7eb":"# print(Group_Num)\n# print(Row_Id)","48400be6":"# Group_Num=Group_Num.reset_index(drop=True)\n# Group_Num","ae6ebeae":"# Row_Id = Row_Id.reset_index(drop = True)\n# Row_Id","6c27f321":"import gresearch_crypto\nenv = gresearch_crypto.make_env()   # initialize the environment\niter_test = env.iter_test()    # ","4f25cb13":"(test_df,sample_prediction_df) = next(iter_test)\nsample_prediction_df['Target']= test_y\nenv.predict(sample_prediction_df)","c647e803":"predictions = test_y\n# print(predictions)\nsubmission.Target = predictions\nprint(submission)\nsubmission.to_csv(\"submission.csv\", index=False)","1ae40570":"## train data set","f0f6ff97":"## test data set"}}