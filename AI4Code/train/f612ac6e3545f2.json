{"cell_type":{"63cfaa3a":"code","7fe4e636":"code","c5293cf3":"code","3714b104":"code","22b725f5":"code","78273077":"code","4eac9d81":"code","83d12814":"code","044d65b1":"code","980102ed":"code","7835b757":"code","0a6de1df":"code","915494bf":"code","1c8e4d52":"code","72a6c076":"code","2917a4a7":"code","b2252075":"code","40d4597f":"code","627a384c":"code","3bcf45c9":"code","441c7c67":"code","0810b22c":"code","03068e7f":"code","0322e85b":"code","9bebd1a4":"code","d82683b2":"code","acb47f45":"code","5011d90a":"code","4fe86921":"code","9c3e00cd":"code","94013cfb":"code","0f9b5c6c":"code","3bd03da5":"markdown"},"source":{"63cfaa3a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7fe4e636":"\"\"\"\nImport libraries and packages\n\"\"\"\n\nimport pandas as pd\nfrom pylab import rcParams\nrcParams['figure.figsize'] = 15, 10\npd.set_option('display.float_format', lambda x: '%.2f' % x)\nimport logging\nlogger = logging.getLogger()\nlogger.setLevel(logging.CRITICAL)\n\nimport os\nimport gc\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom sklearn.model_selection import train_test_split\n\nimport xgboost as xgb\n\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport janestreet\n\npd.set_option('display.max_columns', 200)","c5293cf3":"train = pd.read_csv('\/kaggle\/input\/jane-street-market-prediction\/train.csv')","3714b104":"train.describe()","22b725f5":"train.head()","78273077":"\n\n\ntrain[\"actions\"] = [1 if x > 0 else 0 for x in train[\"resp\"]]\ntrain[\"actions\"].describe()\nset(train[\"actions\"])","4eac9d81":"train[\"actions\"].head()","83d12814":"\nimport seaborn as sns, numpy as np\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nplt.style.use('ggplot')\nx = pd.Series(train[\"actions\"], name=\"x Actions\")\nax = sns.distplot(x)\n","044d65b1":"test = pd.read_csv('\/kaggle\/input\/jane-street-market-prediction\/example_test.csv')","980102ed":"test.head()","7835b757":"test.describe()","0a6de1df":"features = pd.read_csv(\"\/kaggle\/input\/jane-street-market-prediction\/features.csv\")","915494bf":"features.head()","1c8e4d52":"features.describe()","72a6c076":"sample_submission = pd.read_csv(\"\/kaggle\/input\/jane-street-market-prediction\/example_sample_submission.csv\")","2917a4a7":"sample_submission.head()","b2252075":"%%time\ntrain = pd.read_csv('\/kaggle\/input\/jane-street-market-prediction\/train.csv')\nfeatures = pd.read_csv('..\/input\/jane-street-market-prediction\/features.csv')\nexample_test = pd.read_csv('..\/input\/jane-street-market-prediction\/example_test.csv')\nsample_prediction_df = pd.read_csv('..\/input\/jane-street-market-prediction\/example_sample_submission.csv')\nprint (\"Data is loaded!\")","40d4597f":"print('train shape is {}'.format(train.shape))\nprint('features shape is {}'.format(features.shape))\nprint('example_test shape is {}'.format(test.shape))\nprint('sample_prediction_df shape is {}'.format(sample_prediction_df.shape))","627a384c":"missing_values_count = train.isnull().sum()\nprint (missing_values_count)\ntotal_cells = np.product(train.shape)\ntotal_missing = missing_values_count.sum()\nprint (\"% of missing data = \",(total_missing\/total_cells) * 100)","3bcf45c9":"features = ['feature_39', 'feature_43', 'feature_5', 'feature_37', 'feature_42', 'feature_3', 'feature_77', \n\t\t\t'feature_44', 'feature_41', 'feature_40', 'feature_27', 'feature_55', 'feature_64', 'feature_6', \n\t\t\t'feature_45', 'feature_4', 'feature_83', 'feature_120', 'feature_101', 'feature_63', 'feature_124', \n\t\t\t'feature_11', 'feature_30', 'feature_107', 'feature_61', 'feature_29', 'feature_62', 'feature_60', \n\t\t\t'feature_90', 'feature_102', 'feature_31', 'feature_113', 'feature_38', 'feature_95', 'feature_68', \n\t\t\t'feature_89', 'feature_21', 'feature_59', 'feature_13', 'feature_121', 'feature_114', 'feature_119', \n\t\t\t'feature_57', 'feature_67', 'feature_74', 'feature_20', 'feature_78', 'feature_35', 'feature_86', \n\t\t\t'feature_56', 'feature_7', 'feature_53', 'feature_126', 'feature_98', 'feature_72', 'feature_128', \n\t\t\t'feature_25', 'feature_33', 'feature_84', 'feature_36', 'feature_92', 'feature_65', 'feature_70', \n\t\t\t'feature_23', 'feature_58', 'feature_125', 'feature_34', 'feature_122', 'feature_19', 'feature_66', \n\t\t\t'feature_12', 'feature_17', 'feature_116', 'feature_32', 'feature_51', 'feature_28', 'feature_22', \n\t\t\t'feature_117', 'feature_54', 'feature_80', 'feature_8', 'feature_104', 'feature_108', 'feature_47', \n\t\t\t'feature_127', 'feature_9', 'feature_96', 'feature_52', 'feature_110', 'feature_123', 'feature_75', \n\t\t\t'feature_24', 'feature_105', 'feature_69', 'feature_111', 'feature_81', 'feature_49', 'feature_15', \n\t\t\t'feature_46', 'feature_18']","441c7c67":"# I have taked this cell from https:\/\/www.kaggle.com\/jazivxt\/the-market-is-reactive\n# And https:\/\/www.kaggle.com\/drcapa\/jane-street-market-prediction-starter-xgb\n\ntrain = train[train['weight'] != 0]\n\ntrain['action'] = ((train['weight'].values * train['resp'].values) > 0).astype('int')\n\n\nX_train = train.loc[:, features[:50]]\ny_train = train.loc[:, 'action']","0810b22c":"X_train = X_train.fillna(-999)","03068e7f":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\npd.set_option('display.max_columns', 500)\n\n\n# Standard plotly imports\nimport plotly as py\nimport plotly.graph_objs as go\nimport plotly.tools as tls\nfrom plotly.offline import iplot, init_notebook_mode\nimport cufflinks\nimport cufflinks as cf\nimport plotly.figure_factory as ff\nimport os\n\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","0322e85b":"x = train['action'].value_counts().index\ny = train['action'].value_counts().values\n\ntrace2 = go.Bar(\n     x=x ,\n     y=y,\n     marker=dict(\n         color=y,\n         colorscale = 'Viridis',\n         reversescale = True\n     ),\n     name=\"Imbalance\",    \n )\nlayout = dict(\n     title=\"Data imbalance - action\",\n     #width = 900, height = 500,\n     xaxis=go.layout.XAxis(\n     automargin=True),\n     yaxis=dict(\n         showgrid=False,\n         showline=False,\n         showticklabels=True,\n #         domain=[0, 0.85],\n     ), \n)\nfig1 = go.Figure(data=[trace2], layout=layout)\niplot(fig1)","9bebd1a4":"import janestreet\nenv = janestreet.make_env() # initialize the environment\niter_test = env.iter_test() # an iterator which loops over the test se","d82683b2":"import os\n\nimport numpy as np\nimport pandas as pd\nfrom sklearn import preprocessing\nimport xgboost as xgb","acb47f45":"# The training part taked from here https:\/\/www.kaggle.com\/xhlulu\/ieee-fraud-xgboost-with-gpu-fit-in-40s\n\nclf = xgb.XGBClassifier(\n    n_estimators=500,\n    max_depth=5,\n    learning_rate=0.05,\n    #subsample=0.9,\n    #colsample_bytree=0.7,\n    missing=-999,\n    random_state=2020,\n    tree_method='gpu_hist'  # THE MAGICAL PARAMETER\n)","5011d90a":"%time clf.fit(X_train, y_train)","4fe86921":"for (test_df, sample_prediction_df) in iter_test:\n    X_test = test_df.loc[:, features[:50]]\n    X_test.fillna(-999, inplace = True)\n    y_preds = clf.predict(X_test)\n    sample_prediction_df.action = y_preds\n    env.predict(sample_prediction_df)","9c3e00cd":"sample_prediction_df.head()","94013cfb":"sub = pd.read_csv(\"\/kaggle\/working\/submission.csv\")","0f9b5c6c":"sub.head()\n","3bd03da5":"The part below is taken from the link below. WIll be changed later...this is just to get accustomed to the data\n\nhttps:\/\/www.kaggle.com\/hamditarek\/market-prediction-xgboost-with-gpu-fit-in-1min"}}