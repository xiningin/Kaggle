{"cell_type":{"4d2cb235":"code","1a50d911":"code","be4302d5":"code","552a9a67":"code","e2295c2e":"code","5d4751d4":"code","4c7ea56b":"code","4b669758":"code","a72a6a56":"code","ecf26fc8":"code","0ee61e03":"code","657c0a3f":"markdown","773af0cf":"markdown","e76c064e":"markdown","6be9c380":"markdown"},"source":{"4d2cb235":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n%matplotlib inline\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","1a50d911":"train_df = pd.read_csv('..\/input\/train.csv')\ntest_df = pd.read_csv('..\/input\/test.csv')\nrul_df = pd.read_csv('..\/input\/RUL.csv')\n\nsensor_columns = [col for col in train_df.columns if col.startswith(\"sensor\")]\nsetting_columns = [col for col in train_df.columns if col.startswith(\"setting\")]","be4302d5":"train_df.head()","552a9a67":"test_df.head()","e2295c2e":"rul_df.head()","5d4751d4":"example_slice = train_df[(train_df.dataset_id == 'FD001') & (train_df.unit_id == 1)]\n\nfig, axes = plt.subplots(7, 3, figsize=(15, 10), sharex=True)\n\nfor index, ax in enumerate(axes.ravel()):\n    sensor_col = sensor_columns[index]\n    example_slice.plot(x='cycle',y=sensor_col, ax=ax, color='black')\n    \n    if index % 3 == 0:\n        ax.set_ylabel(\"Sensor Value\", size=10)\n    else:\n        ax.set_ylabel(\"\")\n    \n    ax.set_xlabel(\"Time (Cycles)\")\n    ax.set_title(sensor_col.title(), size=14)\n    ax.legend_.remove()\n    \nfig.suptitle(\"Sensor Traces : Unit 1, Dataset 1\", size=20, y=1.025)\nfig.tight_layout()","4c7ea56b":"all_units = train_df[train_df['dataset_id'] == 'FD001']['unit_id'].unique()\nunits_to_plot = np.random.choice(all_units, size=10, replace=False)\nplot_data = train_df[(train_df['dataset_id'] == 'FD001') & (train_df['unit_id'].isin(units_to_plot))].copy()\nplot_data.head()","4b669758":"for index, ax in enumerate(axes.ravel()):\n    sensor_col = sensor_columns[index]\n    for unit_id, group in plot_data.groupby('unit_id'):\n        c = group.drop(columns=['dataset_id'],axis=1)","a72a6a56":"fig, axes = plt.subplots(7, 3, figsize=(15, 10), sharex=True)\nfor index, ax in enumerate(axes.ravel()):\n    sensor_col = sensor_columns[index]\n    for unit_id, group in plot_data.groupby('unit_id'):\n        temp = group.drop(['dataset_id'],axis=1)\n        (temp.plot(x='cycle', y=sensor_col, alpha=0.45, ax=ax, color='gray', legend=False))\n        (temp.rolling(window=10, on='cycle').mean().plot(x='cycle', y=sensor_col, alpha=.75, ax=ax, color='black', legend=False));\n    if index % 3 == 0:\n        ax.set_ylabel('Sensor Value', size=10)\n    else:\n        ax.set_ylabel('')\n    ax.set_title(sensor_col.title())\n    ax.set_xlabel('Time (Cycles)')\nfig.suptitle('All Sensor Traces: Dataset 1 (Random Sample of 10 Units)', size=20, y=1.025)\nfig.tight_layout()","ecf26fc8":"def cycles_until_failure(r, lifetimes):\n    return r['cycle'] - lifetimes.ix[(r['dataset_id'], r['unit_id'])]","0ee61e03":"lifetimes = train_df.groupby(['dataset_id','unit_id'])['cycle'].max()\nplot_data['ctf'] = plot_data.apply(lambda r: cycles_until_failure(r, lifetimes), axis=1)\n\nfig, axes = plt.subplots(7,3, figsize=(15,10), sharex = True)\nfor index, ax in enumerate(axes.ravel()):\n    sensor_col = sensor_columns[index]\n    for unit_id, group in plot_data.groupby('unit_id'):\n        temp = group.drop(['dataset_id'],axis=1)\n        (temp.plot(x='ctf', y=sensor_col, alpha=0.45, ax=ax, color='gray', legend=False))\n        (temp.rolling(window=10,on='ctf').mean().plot(x='ctf',y=sensor_col, alpha=.75, ax=ax, color='black',legend=False))\n    if index % 3 == 0:\n        ax.set_ylabel(\"Sensor Value\", size=10)\n    else:\n        ax.set_ylabel(\"\")\n    ax.set_title(sensor_col.title())\n    ax.set_xlabel('Time Before Failure (Cycles)')\n    ax.axvline(x=0, color='r', linewidth=3)\n    ax.set_xlim([None,10])\nfig.suptitle(\"All Sensor Traces: Dataset 1 (Random Sample of 10 Units)\", size=20, y=1.025)\nfig.tight_layout()","657c0a3f":"## Nomrmalize Sensor Traces To End At The Same Time","773af0cf":"## Visualize Multiple Engines' Sensor Readings","e76c064e":"### Visualize A Single Engine's Sensor Readings","6be9c380":"## Visualize The Failure Modes of Sensors, Using Normalized Traces Created Above"}}