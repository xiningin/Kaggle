{"cell_type":{"0b1bdb36":"code","465cc33e":"code","ca5ac943":"code","9d27cb5b":"code","77e60c0e":"code","a07178de":"code","1ca90573":"code","478fceaf":"code","5c74de65":"code","a9d2c9e4":"code","e1b80e53":"code","8ddab1d0":"code","f1c93e13":"code","3f53ed3b":"code","f7742e21":"code","c9e362ea":"code","b5e2d668":"code","14b3a9d9":"code","ec896504":"markdown","470a6514":"markdown","c87a7d5d":"markdown","1ae65f38":"markdown","50264e36":"markdown","833be261":"markdown","d2c7c4af":"markdown","4af9e9b1":"markdown","bfb704c2":"markdown","70bbd567":"markdown","becb8d70":"markdown","629387e3":"markdown","8563387b":"markdown","46c011c8":"markdown"},"source":{"0b1bdb36":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","465cc33e":"import pandas as pd\nimport numpy as np\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nimport re","ca5ac943":"input_data=pd.read_csv(\"\/kaggle\/input\/telecom-users-dataset\/telecom_users.csv\")","9d27cb5b":"input_data.head()","77e60c0e":"input_data.index=input_data[\"customerID\"]\ninput_data.drop(columns=[\"Unnamed: 0\",\"customerID\"],axis=1,inplace=True)","a07178de":"input_data.head()","1ca90573":"input_data.columns[:-1]","478fceaf":"input_data.columns[-1:]","5c74de65":"input_data.iloc[:,:-1].info()","a9d2c9e4":"input_data[\"SeniorCitizen\"]=input_data[\"SeniorCitizen\"].replace(0,\"No\")\ninput_data[\"SeniorCitizen\"]=input_data[\"SeniorCitizen\"].replace(1,\"Yes\")","e1b80e53":"categorical_variables=input_data.select_dtypes([\"object\"]).columns.tolist()\ncategorical_variables.remove(\"TotalCharges\")\ncategorical_variables.remove(\"Churn\")\ncategorical_variables.append(\"SeniorCitizen\")","8ddab1d0":"from matplotlib import pyplot as plt\nimport seaborn as sns\n\ndef plot_categorical_distribution(dataset,columns):\n    cols=2\n    rows=np.ceil(len(columns)\/cols)\n    plt.figure(figsize=(10,20))\n    for i,col in enumerate(columns):\n        plt.subplot(rows,cols,i+1)\n        names=dataset[col].value_counts().keys()\n        values=dataset[col].value_counts().values\n        plt.bar(names,values)\n        plt.title(\"Distribution of {}\".format(col))\n        plt.xticks(rotation=25)\n        plt.tight_layout()","f1c93e13":"plot_categorical_distribution(input_data,categorical_variables)","3f53ed3b":"total_charges=[tc.rstrip().lstrip().strip() for tc in input_data[\"TotalCharges\"]]\ninput_data[\"TotalCharges\"]=total_charges\ninput_data[\"TotalCharges\"]=input_data[\"TotalCharges\"].replace('',0)\ninput_data[\"TotalCharges\"]=input_data[\"TotalCharges\"].astype('float')\nnumerical_variables=input_data.select_dtypes([\"int\",\"float\"]).columns.tolist()","f7742e21":"from matplotlib import pyplot as plt\nimport seaborn as sns\n\ndef plot_numerical_distribution(dataset,columns):\n    cols=2\n    rows=np.ceil(len(columns)\/cols)\n    plt.figure(figsize=(10,7))\n    for i,col in enumerate(columns):\n        plt.subplot(rows,cols,i+1)\n        sns.distplot(dataset[col])\n        plt.title(\"Distribution of {}\".format(col))\n        plt.tight_layout()","c9e362ea":"plot_numerical_distribution(input_data,numerical_variables)","b5e2d668":"from matplotlib import pyplot as plt\nimport seaborn as sns\n\ndef plot_categorical_distribution_with_dependent_variable(dataset,columns):\n    cols=2\n    rows=np.ceil(len(columns)\/cols)\n    plt.figure(figsize=(15,60))\n    for i,col in enumerate(columns):\n        categories=dataset[col].value_counts().keys()\n        churn_perc={}\n        for cat in categories:\n            df=dataset[dataset[col]==cat][\"Churn\"]\n            df=df.replace('No',0)\n            df=df.replace('Yes',1)\n            perc=np.round(df.sum()\/len(df)*100.0)\n            churn_perc[cat]=perc\n            #print(cat)\n            #print(\"Percentage of churn : {} %\".format(np.round(df.sum()\/len(df)*100.0),2))\n        plt.subplot(rows,cols,i+1)\n        sns.countplot(x=col, hue=\"Churn\", data=dataset)\n        plt.title(\"Distribution of {} with respect to {}\\n Churn Rate : {}\".format(col,\"Churn\",churn_perc))\n        plt.xticks(rotation=10)\n        plt.tight_layout()","14b3a9d9":"plot_categorical_distribution_with_dependent_variable(input_data,categorical_variables)","ec896504":"### Following are the insights from the distribution of independent variables with the dependent variable :\n\n### Churn Rate \n\n#### Gender : Male : 26 % Female : 27 % : Both Male and Female have identical churn rate\n#### Partner : No : 33 % Yes : 20 % Customers with No partners are more prone to churning\n#### Dependents : No : 31 % Yes : 16 % Customers with No dependents are more prone to churning\n#### Phone Service : Yes : 27 % No : 25 % Customers both using\/not using phone service have identical churn rate\n#### Internet Service : Fibre Optic : 42 % DSL : 19 % No : 8 % Customers using Fibre optics are more prone to churning\n#### Muliple Lines : No : 25 % Yes : 28 % No Phone service : 25 % Identical churn rates for the different categories of multiple lines\n#### Online Security : No : 42 % Yes : 14 % Internet Service 8 % : Most of the customers not opting for online security churn\n#### Online Backup : No : 40 % Yes : 22 % Internet Service 8 % Most of the customers not opting online backup churn\n#### Streaming TV : No : 33 % Yes : 30 % Internet Service 8 % Nearly equal churn rate of customers who opt or do not opt for streaming TV\n#### Streaming Movies : No : 34 % Yes : 30 % Internet Service 8 % Nearly equal churn rate of customers who opt or do not opt for streaming Movies\n#### Device Protection : No : 39 % Yes : 22 % Internet Service 8 % Most of the customers who don't have device protection churn away\n#### Tech Support : No : 41 % Yes : 15 % Internet Service 8 % Most of the customers who do not have tech support churn away\n#### Contract : Month-to-month : 43 % two-year : 3 & one-year : 12 % Most of the customers going for month-to-month contract churn away\n#### Paperless Billing : Yes : 33 % No : 17 % Most of the customers going for Paperless billing churn\n#### Payment Method : Electronic check : 45 % Mail check : 19 % Bank transfer : 17 % Credit card : 15 % Most of the customers opting for electronic check churn\n#### Senior Citizen : Yes : 42 % No : 24 % : SeniorCitizens are more likely to churning","470a6514":"### Numerical Variables","c87a7d5d":"### Let us see how each of these variables are distributed in our dataset","1ae65f38":"### Let us see the data types and number of missing variables of the independent  variables","50264e36":"### Viewing some sample rows of the dataset","833be261":"### From the above we can see that there no missing data in our analysis. Though it shows that there are 16 categorical variables, 2 integral continuous variables and 1 floating point conitunous variables, yet it is a bit misleading.\n\n### Though SeniorCitizen has been identified as an independent variable, it is basically a categorical variable encoded in numerical representation, so it is better to treat that as a categorical variable.\n\n### TotalCharges should be floating point continuous variable though it has been identified as categorical variable.","d2c7c4af":"### Now let us see how the categorical variables are distributed with respect to the dependent variables","4af9e9b1":"### Removing the column Unnamed: 0 as it is probably the index from the original dataset. Making the customerID as the new index","bfb704c2":"### Reading in the telecom dataset","70bbd567":"### Following are the insights from the distribution of independent variables :\n\n#### Gender : Nearly equal distribution of Male and Female customers\n#### Partner : Nearly equal distribution of customers who are with and without partner\n#### Dependents : Maximum customers do not have dependents\n#### Phone Service : Maximum customers take the phone service\n#### Internet Service : Most of the customers opt for Fibre Optics\n#### Muliple Lines : Most of the customers do not have multiple lines\n#### Online Security : Most of the customers do not have online security\n#### Online Backup : Most of the customers do not have online backup\n#### Streaming TV : Nearly equal distribution of customers who opt or do not opt for streaming TV\n#### Streaming Movies : Nearly equal distribution of customers who opt or do not opt for streaming Movies\n#### Device Protection : Most of the customers do not have device protection\n#### Tech Support : Most of the customers do not have tech support\n#### Contract : Most of the customers go for end-to-end cotract\n#### Paperless Billing : Most of the customers go for Paperless billing\n#### Payment Method : Most of the customers opt for electronic check\n#### Senior Citizen : Most of the customers are not Senior Citizens.","becb8d70":"### Categorical Variables","629387e3":"### The independent variables in our analysis are :","8563387b":"### Encoding the SeniorCitizen column","46c011c8":"### The dependent variable in our analysis is :"}}