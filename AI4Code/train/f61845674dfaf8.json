{"cell_type":{"c3c6d9ce":"code","c7dd31d7":"code","37407d30":"code","e6ad01ea":"code","9aae215a":"code","0d925fc7":"code","2d7267f5":"code","c99081af":"code","ebc41ed5":"code","fb7b7803":"code","a394e936":"code","d029f53d":"code","40fd236e":"code","5946888a":"code","67f4d072":"code","4b5dce43":"code","72c4b9dc":"code","36d0464a":"markdown","6e2cc9c9":"markdown"},"source":{"c3c6d9ce":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","c7dd31d7":"# Imports\n%matplotlib inline\n%config InlineBackend.figure_format = 'retina'\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport torch\nfrom torch import nn, optim\nimport torch.nn.functional as F\nimport torchvision\nfrom torchvision import datasets, transforms, models\nfrom torch.autograd import Variable\nfrom torch.utils.data.sampler import SubsetRandomSampler","37407d30":"!wget https:\/\/raw.githubusercontent.com\/Iamsdt\/60daysofudacity\/master\/day22\/Helper.py","e6ad01ea":"import Helper\nimport torch\nfrom torchvision import datasets, transforms,models\nfrom torch.utils.data import DataLoader\n\ndata_dir = '..\/input\/labelledrice\/Labelled\/'\n\nmean = [0.485, 0.456, 0.406]\nstd = [0.229, 0.224, 0.225]\n\ntrain_transform = transforms.Compose([\n                                transforms.RandomRotation(30),\n                                transforms.Resize(255),\n                                #transforms.RandomResizedCrop(224),\n                                transforms.RandomHorizontalFlip(),\n                                #transforms.ColorJitter(),\n                                transforms.ToTensor(),\n                                transforms.Normalize(mean, std)])\ntest_transform = transforms.Compose([\n                                transforms.Resize(255),\n                                #transforms.CenterCrop(224),\n                                transforms.ToTensor(),\n                                transforms.Normalize(mean, std)])\n\ntrain_data = datasets.ImageFolder(data_dir, transform=train_transform)\ntest_data = datasets.ImageFolder(data_dir, transform=test_transform)\nprint(len(train_data))\n\ntrainloader = torch.utils.data.DataLoader(train_data, batch_size=64, shuffle=True)\ntestloader = torch.utils.data.DataLoader(test_data, batch_size=64)\n\nlen(trainloader)","9aae215a":"train_data.classes","0d925fc7":"classes = os.listdir(data_dir)\nlen(classes)","2d7267f5":"import numpy as np\nimport matplotlib.pyplot as plt\n\ndata_iter = iter(trainloader)\nimages, labels = data_iter.next() #this line\n\nfig = plt.figure(figsize=(25, 5))\nfor idx in range(2):\n    ax = fig.add_subplot(1, 5, idx + 1, xticks=[], yticks=[])\n    # unnormolaize first\n    img = images[idx] \/ 2 + 0.5\n    npimg = img.numpy()\n    img = np.transpose(npimg, (1, 2, 0)) #transpose\n    ax.imshow(img, cmap='gray')\n    ax.set_title(classes[labels[idx]])","c99081af":"model = models.resnet50(pretrained=True)\nmodel.fc","ebc41ed5":"#model = Helper.freeze_parameters(model)","fb7b7803":"import torch.nn as nn\nfrom collections import OrderedDict\n\nclassifier = nn.Sequential(\n  nn.Linear(in_features=2048, out_features=4),\n  #nn.ReLU(),\n  #nn.Dropout(p=0.4),\n  #nn.Linear(in_features=1536, out_features=1024),\n  #nn.ReLU(),\n  #nn.Dropout(p=0.3),\n  #nn.Linear(in_features=1024, out_features=4),\n  nn.LogSoftmax(dim=1) \n)\n    \nmodel.fc = classifier\nmodel.fc","a394e936":"import torch.optim as optim\nimport torch\n\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nmodel.to(device)\n\ncriterion = nn.CrossEntropyLoss()\noptimizer = optim.Adam(model.fc.parameters(), lr=0.003)","d029f53d":"epoch = 25","40fd236e":"model, train_loss, test_loss = Helper.train(model, trainloader, testloader, epoch, optimizer, criterion)","5946888a":"model = Helper.load_latest_model(model)","67f4d072":"Helper.check_overfitted(train_loss, test_loss)","4b5dce43":"Helper.test(model, testloader, criterion)","72c4b9dc":"Helper.test_per_class(model, testloader, criterion, classes)","36d0464a":"# Test","6e2cc9c9":"# Hyper Parameters"}}