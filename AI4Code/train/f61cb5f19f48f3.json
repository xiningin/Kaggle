{"cell_type":{"43b558dc":"code","aafe5242":"code","00eb25e3":"code","78dd67d1":"code","3b513a84":"code","68c22a2f":"code","6c9734f4":"code","29a5ddc6":"code","1ae62617":"code","b471cb52":"code","9729e2a4":"code","f514ab74":"code","6d0bfa10":"code","91926105":"code","ca07b619":"code","ea84c1a1":"code","2517c5bf":"code","48a4205d":"code","542e2248":"code","f260d45b":"code","18fcaeea":"code","dc3bd828":"code","e2ed57ee":"code","e5398be5":"code","2b063417":"code","6f6b15d3":"code","e72fd86b":"code","385d8cce":"code","bf4646d3":"code","3544765e":"code","b4472bd7":"code","5467fdb6":"code","7a7d9d80":"code","c7927800":"code","3766e4ee":"code","7742550f":"code","b1748166":"code","6d720cf9":"code","35a94cbf":"code","60272e41":"code","1e1d69a2":"code","2f41dfe3":"code","bb3b0c8c":"code","f7e7680b":"code","e08662b4":"code","a9f0e9a8":"code","eb9ed3b8":"code","335cb81b":"code","262a9d10":"code","c7fbfc93":"code","593d6ef9":"code","4de7391e":"code","c2e692ea":"code","c3849e5e":"code","f2bd14b8":"code","1796ed04":"code","86158a05":"code","40a013f4":"code","9dbf3f07":"code","b9b8ca19":"code","43b2cdaf":"code","7e35b556":"code","b8af2731":"code","3578a3c7":"code","ecc05665":"code","0a9339cf":"code","614f8329":"code","4f7c5638":"code","3f59333d":"markdown","c83da824":"markdown","04e3b6ea":"markdown","f58d5538":"markdown","82cc7eb5":"markdown","b179e17e":"markdown","42b1f4d6":"markdown","b203e80b":"markdown","ac517326":"markdown","2d4ce714":"markdown","bc77a4f9":"markdown","85f27c6c":"markdown","b8ca71f4":"markdown","251613b8":"markdown","434ac66f":"markdown","7e0b2af8":"markdown","36d8a71f":"markdown","02cfa588":"markdown","297545aa":"markdown","b35e1051":"markdown","b916e8cf":"markdown","d72b70a1":"markdown","d962a71d":"markdown","8d954d41":"markdown"},"source":{"43b558dc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport datetime as dt\n\nimport seaborn as sns\nsns.set()\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","aafe5242":"members = pd.read_csv('\/kaggle\/input\/fitzeedataset\/FitZeeDetails.csv',parse_dates=[6,10])\nmembers.DOB = members.DOB.apply(lambda x : (x - np.timedelta64(100, 'Y')).date() if x > dt.date.today() else x)\nmembers","00eb25e3":"members.isna().sum()","78dd67d1":"members.nunique()","3b513a84":"members['age'] = members.DOB.apply(lambda x : round((dt.date(2018,12,1) - x.date()).days\/365.2425))","68c22a2f":"pd.cut(members.age,bins=5).value_counts(sort=False)","6c9734f4":"pd.cut(members.age,bins=7).value_counts(sort=False).plot.bar(figsize=[13, 5],title='Number of members per age',rot=0)\n\nplt.xlabel('Age Intervals')\nplt.ylabel('Number of Members')\nplt.show()","29a5ddc6":"members['BMI'] = members['Weight']\/(members['Height']**2)*10**4","1ae62617":"members.BMI[~members.BMI.isna()].hist(bins=15)\nplt.title('Histogram of BMI')\nplt.xlabel('BMI')\nplt.ylabel('Number of users')\nplt.show()","b471cb52":"members['membership_age'] = members.MemberSince.apply(lambda x : int((dt.date(2018,12,31) - x.date()).days\/7))","9729e2a4":"members.membership_age.hist(bins=15)\nplt.title('Histogram of Membership Age')\nplt.xlabel('Membership Age (Weeks)')\nplt.ylabel('Number of users')\nplt.show()","f514ab74":"sessions = pd.read_csv('\/kaggle\/input\/fitzeedataset\/SessionData.csv')\nsessions.SessionDate = sessions.SessionDate.apply(pd.to_datetime)\nsessions","6d0bfa10":"sessions.isna().sum()","91926105":"sessions.nunique()","ca07b619":"sessions.SessionTime.value_counts().plot(kind='barh',figsize=[5, 3],title='Histogram of Session Times')\nplt.xlabel('Number of sessions')\nplt.ylabel('Session Time')\nplt.show()","ea84c1a1":"sessions.groupby('SessionDate').size().plot.line(figsize=[7, 3],title='Number of sessions per day')\nplt.xlabel('Date')\nplt.ylabel('Number of Sessions')\nplt.show()","2517c5bf":"sessions['SessionDay'] = sessions.SessionDate.dt.dayofweek","48a4205d":"sessions.SessionDate.dt.day_name().value_counts().plot(kind='barh',figsize=[5, 3],title='Number of sessions per day of week')\nplt.xlabel('Number of sessions')\nplt.ylabel('Day of week')\nplt.show()","542e2248":"sessions['Branch'] = sessions['Location'].apply(lambda x : str(x).split(',')[0])","f260d45b":"df = pd.merge(members,sessions,how='inner',on=['MemberMobilePhone'])\ndf","18fcaeea":"branch_sessions = df.groupby(['Branch','SessionType']).size()\nbranch_sessions","dc3bd828":"branch_sessions.plot.pie(y='MemberMobilePhone',figsize=[8, 8],title='Number of Sessions per Location')\nplt.xlabel('Location-SessionType pairs')\nplt.ylabel('Number of sessions')\nplt.show()","e2ed57ee":"branch_sessions.plot.barh(color=['blue','green'],figsize=[8, 8],title='Number of sessions per session type and location')\nplt.ylabel('Location-SessionType pairs')\nplt.xlabel('Number of sessions')\nplt.show()","e5398be5":"sessions.groupby(['FitnessChampion','SessionType']).size()","2b063417":"sessions.groupby(['FitnessChampion','Location']).size()","6f6b15d3":"df.groupby(['Branch']).MemberMobilePhone.count().plot.barh(figsize=[8, 5],title='Number of Sessions per Location')\nplt.ylabel('Locations')\nplt.xlabel('Total number of sessions')\nplt.show()","e72fd86b":"session_count = df.groupby(['MemberMobilePhone','SessionType']).MemberName.count().reset_index()\nkickboxing = []\nyoga = []\nfor member in members.MemberMobilePhone:\n    vals = session_count[(session_count['MemberMobilePhone']==member)&(session_count['SessionType']=='KickBoxing')].MemberName.values\n    if len(vals) == 1: \n        kickboxing.append(vals[0])\n    else:\n        kickboxing.append(0)\n        \n    vals = session_count[(session_count['MemberMobilePhone']==member)&(session_count['SessionType']=='Yoga')].MemberName.values\n    if len(vals) == 1: \n        yoga.append(vals[0])\n    else:\n        yoga.append(0)\nmembers['kickboxing_sessions'] = kickboxing\nmembers['yoga_sessions'] = yoga\nmembers","385d8cce":"from sklearn.model_selection import train_test_split \nfrom sklearn.linear_model import LinearRegression\nfrom sklearn import metrics\n\nregressor = LinearRegression()\ndata = members[~members.FitnessPointsDec18.isna()]\nX = data[['kickboxing_sessions','yoga_sessions']]\ny = data['FitnessPointsDec18']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=8)\n\nregressor.fit(X_train, y_train)\nkickboxing_coeff, yoga_coeff = regressor.coef_\nprint('kickboxing_coeff:',kickboxing_coeff, 'yoga_coeff:',yoga_coeff)\n\ny_pred = regressor.predict(X_test)\nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))\n\n# Filling in values\nfill = members[members.FitnessPointsDec18.isna()]\nfill = round(kickboxing_coeff*fill.kickboxing_sessions + yoga_coeff*fill.yoga_sessions)\nmembers['FitnessPointsDec18'] = members.FitnessPointsDec18.fillna(fill)","bf4646d3":"members['points_per_week'] = (members.FitnessPointsUpToNov18 + members.FitnessPointsDec18)\/ members.membership_age * 7","3544765e":"members['points_per_week'].hist()\nplt.title('Histogram of fitness points per membership age')\nplt.xlabel('Fitness points per membership age (Points \/ #weeks)')\nplt.ylabel('Number of users')\nplt.show()","b4472bd7":"members.plot.scatter(x='age',y='points_per_week',figsize=[8, 8],title='Scatterplot')\n# plt.title('Scatterplot of fitness points per week of membership')\n# plt.xlabel('Fitness points per week of membership')\nplt.ylabel('User Activity (Fitness Points per week)')\nplt.show()","5467fdb6":"postal = pd.read_csv('\/kaggle\/input\/singapore-postal-code-to-latlon\/SG_postal.csv')\npostal","7a7d9d80":"postal2 = pd.DataFrame({'postal_code':[68891,549556,424245], 'street_name':['Robinson Road','Florence Rd','Sea Ave'],\n           'lat':[1.280316,1.365695,1.305642],'lon':[103.849474,103.885876,103.906999]})\npostal = postal.append(postal2,ignore_index=True)","c7927800":"members_address = pd.merge(members, postal, how='left', left_on='PostalCode',right_on='postal_code')\nmembers_address","3766e4ee":"sessions['Branch_postal'] = sessions['Location'].apply(lambda x : str(x).split()[-1])\nsessions['Branch_postal'] = sessions['Branch_postal'].str.extract('(\\d+)', expand=False)\n\ncleaned = sessions[~sessions['Branch_postal'].isna()]\ncleaned.Branch_postal=cleaned.Branch_postal.astype('int64')\n\nsessions_address = pd.merge(cleaned, postal, how='left', left_on='Branch_postal',right_on='postal_code')\nsessions_address","7742550f":"merged = pd.merge(members_address, sessions_address, how='right', on='MemberMobilePhone')\nmerged","b1748166":"from geopy.distance import geodesic \n\ndef distance(df):\n    return geodesic((df['lat_x'],df['lon_x']),(df['lat_y'],df['lon_y'])).km\n\nmerged['distance'] = merged.apply(distance,axis=1)","6d720cf9":"distance_travelled_per_user = merged.groupby(['MemberMobilePhone']).distance.median()\nmembers = pd.merge(members, distance_travelled_per_user, how='left', on='MemberMobilePhone')","35a94cbf":"members.distance.hist(bins=12)\nplt.title('Distance between home address and favourite branch per users')\nplt.xlabel('Distance (km)')\nplt.ylabel('Number of users')\nplt.show()","60272e41":"merged.groupby(['MemberMobilePhone','Branch']).size().groupby('MemberMobilePhone').size().value_counts()","1e1d69a2":"fav = merged.groupby(['MemberMobilePhone','Branch']).size().groupby('MemberMobilePhone').idxmax()\nfav = fav.apply(lambda x: x[1])\nfav = fav.rename('Fav_Branch')\n\nmembers = pd.merge(members,fav, how='inner', on='MemberMobilePhone')","2f41dfe3":"fav = merged.groupby(['MemberMobilePhone','SessionTime']).size().groupby('MemberMobilePhone').idxmax()\nfav = fav.apply(lambda x: int(x[1][:2]))\nfav = fav.rename('Fav_SessionTime')\nmembers = pd.merge(members,fav, how='inner', on='MemberMobilePhone')","bb3b0c8c":"fav = merged.groupby(['MemberMobilePhone','SessionDay']).size().groupby('MemberMobilePhone').idxmax()\nfav = fav.apply(lambda x: x[1])\nfav = fav.rename('Fav_SessionDay')\nmembers = pd.merge(members,fav, how='inner', on='MemberMobilePhone')","f7e7680b":"members.Fav_Branch.value_counts().plot.barh(figsize=[8, 5])\nplt.title('Number of users primarily visiting each branch')\nplt.ylabel('Branch')\nplt.xlabel('Number of users')\nplt.show()","e08662b4":"members.isna().sum()","a9f0e9a8":"import folium\nfrom folium import Circle, Marker, CircleMarker\nfrom folium.plugins import BeautifyIcon","eb9ed3b8":"branches = merged.groupby(['Branch','lat_y','lon_y']).size().reset_index()\nbranches","335cb81b":"members_cleaned = merged.groupby(['MemberMobilePhone','lat_x','lon_x']).size().reset_index(name='sessions_in_dec')\nmembers_cleaned = pd.merge(members_cleaned, members[['MemberMobilePhone','Fav_Branch','Fav_SessionTime','Fav_SessionDay','MemberName','points_per_week','age','BMI','Gender','membership_age','distance']], on='MemberMobilePhone')\nmembers_cleaned","262a9d10":"sgmap = folium.Map(location=[1.365207, 103.842953], tiles='cartodbpositron', zoom_start=12) # alternate tiles layout: use openstreetmap, cartodbpositron\nfolium.TileLayer('openstreetmap').add_to(sgmap)\nfolium.TileLayer('cartodbdark_matter').add_to(sgmap)\nfolium.LayerControl().add_to(sgmap)\n\ndef color_by_branch(branch):\n    color_map = {'154 West Coast Road':'green','Hougang Mall':'purple','Orchard Gateway':'red',\n                 'Punggol 21 Community Club':'orange','Robinson Road':'blue'}\n    return color_map[branch]\n\n# add branches\nfor idx, row in branches.iterrows():\n    Marker([row['lat_y'], row['lon_y']],popup=str(row['Branch']),icon=folium.Icon(icon='home',color=color_by_branch(row['Branch']))).add_to(sgmap)\n\n# add members\nfor idx, row in members_cleaned.iterrows():\n    CircleMarker(\n        location=[row['lat_x'], row['lon_x']], radius=3, color=color_by_branch(row['Fav_Branch']),\n        tooltip='Name: '+str(row['MemberName'])+'\\n'+'Age: '+str(row['age'])+'\\n'+'Points\/Week: {:.1f}'.format(row['points_per_week'])).add_to(sgmap)\n\nsgmap","c7fbfc93":"sgmap = folium.Map(location=[1.365207, 103.842953], tiles='cartodbpositron', zoom_start=12) # alternate tiles layout: use openstreetmap, cartodbpositron\nfolium.TileLayer('openstreetmap').add_to(sgmap)\nfolium.TileLayer('cartodbdark_matter').add_to(sgmap)\nfolium.LayerControl().add_to(sgmap)\n\ndef color_by_branch(branch):\n    color_map = {'154 West Coast Road':'green','Hougang Mall':'purple','Orchard Gateway':'red',\n                 'Punggol 21 Community Club':'orange','Robinson Road':'blue'}\n    return color_map[branch]\n\n# add branches\nfor idx, row in branches.iterrows():\n    Marker([row['lat_y'], row['lon_y']],tooltip=str(row['Branch']),icon=folium.Icon(icon='home',color=color_by_branch(row['Branch']))).add_to(sgmap)\n\ndef icon_by_point(row):\n    icon_map = {'M':'mars','F':'venus',np.nan:'question-circle'}\n    icon = BeautifyIcon(\n        icon=icon_map[row['Gender']], \n#         number=row['Gender'],\n        text_color=color_by_branch(row['Fav_Branch']),\n        border_color='transparent',\n        background_color='transparent',\n        border_width=3,\n    )\n    return icon\n    \n# add members\nfor idx, row in members_cleaned.iterrows():\n    Marker(location=[row['lat_x'], row['lon_x']],size=[2,2], icon=icon_by_point(row),\n           tooltip='Name: '+str(row['MemberName'])+'\\n'+'Age: '+str(row['age'])+'\\n'+'Points\/Week: {:.1f}'.format(row['points_per_week'])).add_to(sgmap)\n    \nsgmap","593d6ef9":"print(members_cleaned.points_per_week.describe())\nmembers_cleaned.points_per_week.hist()\nplt.title('Distribution of Points per week')\nplt.xlabel('Points per week')\nplt.ylabel('Number of members')\nplt.show()","4de7391e":"sgmap = folium.Map(location=[1.365207, 103.842953], tiles='cartodbpositron', zoom_start=12) # alternate tiles layout: use openstreetmap, cartodbpositron\nfolium.TileLayer('openstreetmap').add_to(sgmap)\nfolium.TileLayer('cartodbdark_matter').add_to(sgmap)\nfolium.LayerControl().add_to(sgmap)\n\ndef color_by_branch(branch):\n    color_map = {'154 West Coast Road':'green','Hougang Mall':'purple','Orchard Gateway':'red',\n                 'Punggol 21 Community Club':'orange','Robinson Road':'blue'}\n    return color_map[branch]\n\n# add branches\nfor idx, row in branches.iterrows():\n    Marker([row['lat_y'], row['lon_y']],tooltip=str(row['Branch']),icon=folium.Icon(icon='home',color=color_by_branch(row['Branch']))).add_to(sgmap)\n\ndef color_by_activity(row):\n    points = row['points_per_week']\n    if points < members_cleaned.points_per_week.quantile(.25):\n        return 'black'\n    elif points < members_cleaned.points_per_week.quantile(.5):\n        return 'gray'\n    elif points < members_cleaned.points_per_week.quantile(.75):\n        return 'green'\n    else:\n        return 'yellow'\n    \ndef icon_by_point(row):\n    icon_map = {'M':'mars','F':'venus',np.nan:'question-circle'}\n    icon = BeautifyIcon(\n#         icon=icon_map[row['Gender']], \n        number=row['age'],\n        text_color=color_by_activity(row),\n        border_color='transparent',\n        background_color='transparent',\n        border_width=3,\n    )\n    return icon\n    \n# add members\nfor idx, row in members_cleaned.iterrows():\n    Marker(location=[row['lat_x'], row['lon_x']],size=[2,2], icon=icon_by_point(row),\n           tooltip='Name: '+str(row['MemberName'])+'\\n'+'Age: '+str(row['age'])+'\\n'+'Points\/Week: {:.1f}'.format(row['points_per_week'])).add_to(sgmap)\n    \nsgmap","c2e692ea":"sgmap = folium.Map(location=[1.365207, 103.842953], tiles='cartodbpositron', zoom_start=12) # alternate tiles layout: use openstreetmap, cartodbpositron\nfolium.TileLayer('openstreetmap').add_to(sgmap)\nfolium.TileLayer('cartodbdark_matter').add_to(sgmap)\nfolium.LayerControl().add_to(sgmap)\n\ndef color_by_branch(branch):\n    color_map = {'154 West Coast Road':'green','Hougang Mall':'purple','Orchard Gateway':'red',\n                 'Punggol 21 Community Club':'orange','Robinson Road':'blue'}\n    return color_map[branch]\n\n# add branches\nfor idx, row in branches.iterrows():\n    Marker([row['lat_y'], row['lon_y']],tooltip=str(row['Branch']),icon=folium.Icon(icon='home',color=color_by_branch(row['Branch']))).add_to(sgmap)\n\ndef icon_by_activity(row):\n    points = row['points_per_week']\n    if points < members_cleaned.points_per_week.quantile(.25):\n        return '1'\n    elif points < members_cleaned.points_per_week.quantile(.5):\n        return '2'\n    elif points < members_cleaned.points_per_week.quantile(.75):\n        return '3'\n    else:\n        return '4'\n    \ndef icon_by_point(row):\n    icon_map = {'M':'mars','F':'venus',np.nan:'question-circle'}\n    icon = BeautifyIcon(\n#         icon=icon_map[row['Gender']], \n#         number=icon_by_activity(row),\n        number=int(row['points_per_week']),\n        text_color=color_by_branch(row['Fav_Branch']),\n        border_color='transparent',\n        background_color='transparent',\n        border_width=3,\n    )\n    return icon\n    \n# add members\nfor idx, row in members_cleaned.iterrows():\n    Marker(location=[row['lat_x'], row['lon_x']],size=[2,2], icon=icon_by_point(row),\n           tooltip='Name: '+str(row['MemberName'])+'\\n'+'Age: '+str(row['age'])+'\\n'+'Points\/Week: {:.1f}'.format(row['points_per_week'])).add_to(sgmap)\n    \nsgmap","c3849e5e":"members.groupby(['WorkPhone']).size().value_counts()","f2bd14b8":"members.groupby(['HomePhone']).size().value_counts()","1796ed04":"households = members.groupby(['Fav_Branch','HomePhone']).size().reset_index(name='num')\nhouseholds[households['num']>1].groupby('Fav_Branch').num.size().plot(kind='barh',title='Number of households (>1 member with same address) per branch')\nplt.xlabel('Number of households')\nplt.ylabel('Favourite Branch')\nplt.show()","86158a05":"feature = 'Fav_SessionDay'\nfor branch in branches.Branch:\n    members_cleaned[members_cleaned['Fav_Branch']==branch][feature].plot.kde(figsize=[10,7], label=branch)\n#     members_cleaned[members_cleaned['Fav_Branch']==branch].points_per_week.hist(stacked=True,alpha=.7,figsize=[10,7])\n\nplt.title('Distribution of user and {} per branch'.format(feature))\nplt.xlabel(feature)\nplt.ylabel('Density of users')\nplt.legend()\nplt.show()","40a013f4":"merged.groupby(['SessionTime','Branch']).size().reset_index()","9dbf3f07":"sns.heatmap(members_cleaned.corr(), annot=True)\nplt.show()","b9b8ca19":"members_cleaned.Gender.value_counts()","43b2cdaf":"for branch in branches.Branch:\n    print(branch)","7e35b556":"members_data = members_cleaned[['Fav_Branch','Gender','points_per_week','age','membership_age','distance','BMI','Fav_SessionTime','Fav_SessionDay']]\nmembers_data = members_data.dropna()\n\nbranch = branches.Branch.iloc[0]\n\nfor branch in branches.Branch:\n    members_branch = members_data[members_data['Fav_Branch']==branch].drop(columns='Fav_Branch')\n\n    members_branch['Gender'] = members_branch['Gender'].astype('category').cat.codes    \n\n#     print('{} members in {}'.format(len(members_branch),branch))\n#     pd.plotting.scatter_matrix(members_branch, alpha = .8, figsize = (14,8), diagonal = 'kde')\n# sns.heatmap(members_branch.corr(), annot=True)\n    sns.jointplot(x=members_branch['age'], y=members_branch['points_per_week'], kind=\"kde\");\n    plt.title(branch)\n    plt.show()","b8af2731":"print('Initial dataset size:',len(members_branch))\n\n# normalize data\nmembers_branch = members_branch.apply(lambda x : (x-x.mean())\/x.std())\n\n# filter outliers\n# members_branch = members_branch[members_branch.apply(lambda x : x.between(x.quantile(0.05),x.quantile(0.95)))].dropna()\nmembers_branch = members_branch[members_branch.apply(lambda x : x.between(-3,3))].dropna()\n\nprint('Filtered dataset size:',len(members_branch))","3578a3c7":"from sklearn.cluster import KMeans\nfrom sklearn.mixture import GaussianMixture","ecc05665":"data_model = members_branch\nwcss = []\nfor k in range(1,15):\n    kmeans = KMeans(n_clusters=k)\n    kmeans.fit(data_model)\n    wcss.append(kmeans.inertia_)\n\nplt.figure(figsize=(15,5))\nplt.plot(range(1,15),wcss)\nplt.xlabel(\"number of k (cluster) value\")\nplt.ylabel(\"wcss\")\nplt.show()","0a9339cf":"data_model = members_branch\nn_components = np.arange(1, 20)\nmodels = [GaussianMixture(n, covariance_type='full', random_state=0).fit(data_model)\n          for n in n_components]\n\nplt.plot(n_components, [m.bic(data_model) for m in models], label='BIC')\nplt.plot(n_components, [m.aic(data_model) for m in models], label='AIC')\nplt.legend(loc='best')\nplt.xlabel('n_components');","614f8329":"k = 6\n\n# kmeans = KMeans(n_clusters=k)\n# data_predict = kmeans.fit_predict(data_model)\n\ngmm = GaussianMixture(n_components=k)\ndata_predict = gmm.fit_predict(data_model)\nfeature = 'BMI'\n\nplt.figure(figsize=(15,10))\nplt.scatter( x = feature ,y = 'points_per_week' , data = data_model , c = data_predict)\nplt.xlabel(feature)\nplt.ylabel(\"Member Activity (FitnessPoints\/week)\")\nplt.title('{} types of members by {}'.format(k,feature))\nplt.show()","4f7c5638":"for col in members_data.columns[3:]:\n#     plt.figure(figsize=[15,10])\n#     sns.scatterplot(x=members_data[col],y=members_data['points_per_week'],hue=members_data.Fav_Branch);\n    sns.lmplot(x=col, y=\"points_per_week\", hue=\"Fav_Branch\", data=members_data);\n    plt.title(col+' against points\/week')\n    plt.show()","3f59333d":"Plotting each feature against points\/week for each branch.","c83da824":"Points per day denotes the average fitness points earned by user per day","04e3b6ea":"Counting kickboxing and yoga classes attended in December per user","f58d5538":"Postal code database obtained from http:\/\/download.geonames.org\/export\/zip\/","82cc7eb5":"Distribution of BMI. Interestingly, it does not follow a normal distribution, but instead a rather uniform distribution.","b179e17e":"We see seasonality in the number of sessions.","42b1f4d6":"Plotting age of each member, coloured by points per week (black < gray < green < yellow, based on quantile value).","b203e80b":"How many members have the same home phone numbers (a proxy for coming from the same household)? Findings: ~16%.","ac517326":"Distribution of number of branches visited per user: We see that most users (187\/200) visit only one branch.","2d4ce714":"# Geospatial analysis","bc77a4f9":"Plotting the members by their favourite branches, we see that most members frequent branches close to their area of residence. The branch with the highest variation in home address of members is the Robinson Road branch.","85f27c6c":"Based on number of unique Addresses vs number of members, we see that some have the same addresses (and are presumably from the same household).\n\nThere are 200 unique mobile phone numbers, so mobile numbers can act as the member's primary key.","b8ca71f4":"Scatterplot + Regression lines of each member feature against fitnesspoints\/week for each branch","251613b8":"Looking at linear correlations of features, we see low linear correlations of member activity (points_per_week) with all features except sessions_in_dec. Sessions in December naturally correlates well with the member's activity.","434ac66f":"# Map visualization","7e0b2af8":"Checking for members that have not clocked in a session in December, we see that there are no such members. However, we have missing values for Decemeber points. Hence, we need to manually calculate the points for data imputation.","36d8a71f":"How many members have the same work phone numbers (a proxy for similar office)? Findings: only 2 people, not a useful insight.","02cfa588":"Task: Define and identify member profiles of FitZee's most valued members, to target and acquire new members.","297545aa":"Plotting Gaussian Kernel Density Estimates of distribution of features per branch","b35e1051":"Plotting points per week of each member, coloured by favourite branch.","b916e8cf":"Regression Imputation: Predict missing FitnessPointsDec18 values of members from number of kickboxing and yoga sessions attended in December.","d72b70a1":"Looking at the number of missing values, we see that most values are intact, except for Work Phone and Fitness points as of Dec 18. We will need to impute the latter from inferring the number of points earned for kickboxing and yoga sessions from the Sessions (Dec) table.","d962a71d":"Distribution of membership age, which follows a uniform distribution as exepcted.","8d954d41":"Manually adding lat-lon values for some missing postal codes."}}