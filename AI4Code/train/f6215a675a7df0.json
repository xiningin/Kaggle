{"cell_type":{"470c3a6c":"code","cde0740d":"code","bda8436b":"code","c0488481":"code","e2e0b358":"code","3f3b09ad":"code","23868648":"code","c11335e2":"code","6d648b28":"code","9aef3a3f":"code","fc9ab72d":"code","b8272f35":"code","e7c5d164":"code","fbb1d2a0":"code","3a9f32d3":"markdown","95b5c537":"markdown","f5856b99":"markdown","4b996fee":"markdown","e0caad4b":"markdown","a38f28d5":"markdown","dd40d9c5":"markdown","548790ff":"markdown","c3f41ab2":"markdown","6927d69b":"markdown","8edbbbfb":"markdown","1e55d8ba":"markdown","4683b513":"markdown","d2cc5480":"markdown","f8594275":"markdown","a9d3c6cd":"markdown","add78703":"markdown","4ed60258":"markdown","4bf22cc8":"markdown","0319f296":"markdown","8d56405f":"markdown","df1f17be":"markdown"},"source":{"470c3a6c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport cv2\nimport time\nfrom timeit import default_timer as timer\nimport matplotlib.pyplot as plt\nimport pickle\n\nfrom keras.models import load_model\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n# for dirname, _, filenames in os.walk('..\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\nprint(os.listdir('..\/input'))\n\n# Any results we write to the current directory are saved as output\n","cde0740d":"# Reading csv file with labels' names\n# Loading two columns [0, 1] into Pandas dataFrame\nlabels = pd.read_csv('..\/input\/traffic-signs-preprocessed\/label_names.csv')\n\n# Check point\n# Showing first 5 rows from the dataFrame\nprint(labels.head())\nprint()\n\n# To locate by class number use one of the following\n# ***.iloc[0][1] - returns element on the 0 column and 1 row\nprint(labels.iloc[0][1])  # Speed limit (20km\/h)\n# ***['SignName'][1] - returns element on the column with name 'SignName' and 1 row\nprint(labels['SignName'][1]) # Speed limit (30km\/h)\n","bda8436b":"# Loading trained CNN model to use it later when classifying from 4 groups into one of 43 classes\nmodel = load_model('..\/input\/traffic-signs-classification-with-cnn\/model-23x23.h5')\n\n# Loading mean image to use for preprocessing further\n# Opening file for reading in binary mode\nwith open('..\/input\/traffic-signs-preprocessed\/mean_image_rgb.pickle', 'rb') as f:\n    mean = pickle.load(f, encoding='latin1')  # dictionary type\n    \nprint(mean['mean_image_rgb'].shape)  # (3, 32, 32)\n","c0488481":"# Trained weights can be found in the course mentioned above\npath_to_weights = '..\/input\/trainedtrafficsignsdetectorbasedonyolov3\/yolov3_ts_train_5000.weights'\npath_to_cfg = '..\/input\/traffic-signs-dataset-in-yolo-format\/yolov3_ts_test.cfg'\n\n# Loading trained YOLO v3 weights and cfg configuration file by 'dnn' library from OpenCV\nnetwork = cv2.dnn.readNetFromDarknet(path_to_cfg, path_to_weights)\n\n# To use with GPU\nnetwork.setPreferableBackend(cv2.dnn.DNN_BACKEND_OPENCV)\nnetwork.setPreferableTarget(cv2.dnn.DNN_TARGET_OPENCL_FP16)\n","e2e0b358":"# Getting names of all YOLO v3 layers\nlayers_all = network.getLayerNames()\n\n# Check point\n# print(layers_all)\n\n# Getting only detection YOLO v3 layers that are 82, 94 and 106\nlayers_names_output = [layers_all[i[0] - 1] for i in network.getUnconnectedOutLayers()]\n\n# Check point\nprint()\nprint(layers_names_output)  # ['yolo_82', 'yolo_94', 'yolo_106']\n","3f3b09ad":"# Minimum probability to eliminate weak detections\nprobability_minimum = 0.2\n\n# Setting threshold to filtering weak bounding boxes by non-maximum suppression\nthreshold = 0.2\n\n# Generating colours for bounding boxes\n# randint(low, high=None, size=None, dtype='l')\ncolours = np.random.randint(0, 255, size=(len(labels), 3), dtype='uint8')\n\n# Check point\nprint(type(colours))  # <class 'numpy.ndarray'>\nprint(colours.shape)  # (43, 3)\nprint(colours[0])  # [25  65 200]\n","23868648":"# Reading video from a file by VideoCapture object\nvideo = cv2.VideoCapture('..\/input\/traffic-signs-dataset-in-yolo-format\/traffic-sign-to-test.mp4')\n# video = cv2.VideoCapture('..\/input\/videofortesting\/ts_video_1.mp4')\n#video = cv2.VideoCapture('..\/input\/videofortesting\/ts_video_6.mp4')\n\n# Writer that will be used to write processed frames\nwriter = None\n\n# Variables for spatial dimensions of the frames\nh, w = None, None\n","c11335e2":"%matplotlib inline\n\n# Setting default size of plots\nplt.rcParams['figure.figsize'] = (3, 3)\n\n# Variable for counting total amount of frames\nf = 0\n\n# Variable for counting total processing time\nt = 0\n\n# Catching frames in the loop\nwhile True:\n    # Capturing frames one-by-one\n    ret, frame = video.read()\n\n    # If the frame was not retrieved\n    if not ret:\n        break\n       \n    # Getting spatial dimensions of the frame for the first time\n    if w is None or h is None:\n        # Slicing two elements from tuple\n        h, w = frame.shape[:2]\n\n    # Blob from current frame\n    blob = cv2.dnn.blobFromImage(frame, 1 \/ 255.0, (416, 416), swapRB=True, crop=False)\n\n    # Forward pass with blob through output layers\n    network.setInput(blob)\n    start = time.time()\n    output_from_network = network.forward(layers_names_output)\n    end = time.time()\n\n    # Increasing counters\n    f += 1\n    t += end - start\n\n    # Spent time for current frame\n    print('Frame number {0} took {1:.5f} seconds'.format(f, end - start))\n\n    # Lists for detected bounding boxes, confidences and class's number\n    bounding_boxes = []\n    confidences = []\n    class_numbers = []\n\n    # Going through all output layers after feed forward pass\n    for result in output_from_network:\n        # Going through all detections from current output layer\n        for detected_objects in result:\n            # Getting 80 classes' probabilities for current detected object\n            scores = detected_objects[5:]\n            # Getting index of the class with the maximum value of probability\n            class_current = np.argmax(scores)\n            # Getting value of probability for defined class\n            confidence_current = scores[class_current]\n\n            # Eliminating weak predictions by minimum probability\n            if confidence_current > probability_minimum:\n                # Scaling bounding box coordinates to the initial frame size\n                box_current = detected_objects[0:4] * np.array([w, h, w, h])\n\n                # Getting top left corner coordinates\n                x_center, y_center, box_width, box_height = box_current\n                x_min = int(x_center - (box_width \/ 2))\n                y_min = int(y_center - (box_height \/ 2))\n\n                # Adding results into prepared lists\n                bounding_boxes.append([x_min, y_min, int(box_width), int(box_height)])\n                confidences.append(float(confidence_current))\n                class_numbers.append(class_current)\n                \n\n    # Implementing non-maximum suppression of given bounding boxes\n    results = cv2.dnn.NMSBoxes(bounding_boxes, confidences, probability_minimum, threshold)\n\n    # Checking if there is any detected object been left\n    if len(results) > 0:\n        # Going through indexes of results\n        for i in results.flatten():\n            # Bounding box coordinates, its width and height\n            x_min, y_min = bounding_boxes[i][0], bounding_boxes[i][1]\n            box_width, box_height = bounding_boxes[i][2], bounding_boxes[i][3]\n            \n            \n            # Cut fragment with Traffic Sign\n            c_ts = frame[y_min:y_min+int(box_height), x_min:x_min+int(box_width), :]\n            # print(c_ts.shape)\n            \n            if c_ts.shape[:1] == (0,) or c_ts.shape[1:2] == (0,):\n                pass\n            else:\n                # Getting preprocessed blob with Traffic Sign of needed shape\n                blob_ts = cv2.dnn.blobFromImage(c_ts, 1 \/ 255.0, size=(32, 32), swapRB=True, crop=False)\n                blob_ts[0] = blob_ts[0, :, :, :] - mean['mean_image_rgb']\n                blob_ts = blob_ts.transpose(0, 2, 3, 1)\n                # plt.imshow(blob_ts[0, :, :, :])\n                # plt.show()\n\n                # Feeding to the Keras CNN model to get predicted label among 43 classes\n                scores = model.predict(blob_ts)\n\n                # Scores is given for image with 43 numbers of predictions for each class\n                # Getting only one class with maximum value\n                prediction = np.argmax(scores)\n                # print(labels['SignName'][prediction])\n\n\n                # Colour for current bounding box\n                colour_box_current = colours[class_numbers[i]].tolist()\n\n                # Drawing bounding box on the original current frame\n                cv2.rectangle(frame, (x_min, y_min),\n                              (x_min + box_width, y_min + box_height),\n                              colour_box_current, 2)\n\n                # Preparing text with label and confidence for current bounding box\n                text_box_current = '{}: {:.4f}'.format(labels['SignName'][prediction],\n                                                       confidences[i])\n\n                # Putting text with label and confidence on the original image\n                cv2.putText(frame, text_box_current, (x_min, y_min - 5),\n                            cv2.FONT_HERSHEY_SIMPLEX, 0.5, colour_box_current, 2)\n\n\n    # Initializing writer only once\n    if writer is None:\n        fourcc = cv2.VideoWriter_fourcc(*'mp4v')\n\n        # Writing current processed frame into the video file\n        writer = cv2.VideoWriter('result.mp4', fourcc, 25,\n                                 (frame.shape[1], frame.shape[0]), True)\n\n    # Write processed current frame to the file\n    writer.write(frame)\n\n\n# Releasing video reader and writer\nvideo.release()\nwriter.release()\n","6d648b28":"print('Total number of frames', f)\nprint('Total amount of time {:.5f} seconds'.format(t))\nprint('FPS:', round((f \/ t), 1))\n","9aef3a3f":"# Saving locally without committing\nfrom IPython.display import FileLink\n\nFileLink('result.mp4')\n","fc9ab72d":"# Reading image with OpenCV library\n# In this way image is opened already as numpy array\n# WARNING! OpenCV by default reads images in BGR format\n# image_BGR = cv2.imread('..\/input\/videofortesting\/traffic_sign.jpg')\n# image_BGR = cv2.imread('..\/input\/videofortesting\/ts_video_1_1.png')\n# image_BGR = cv2.imread('..\/input\/videofortesting\/ts_video_1_2.png')\n# image_BGR = cv2.imread('..\/input\/videofortesting\/ts_video_1_3.png')\n# image_BGR = cv2.imread('..\/input\/videofortesting\/ts_video_1_4.png')\n# image_BGR = cv2.imread('..\/input\/videofortesting\/ts_video_6_1.png')\n# image_BGR = cv2.imread('..\/input\/videofortesting\/ts_video_6_2.png')\n# image_BGR = cv2.imread('..\/input\/videofortesting\/ts_video_6_3.png')\nimage_BGR = cv2.imread('..\/input\/videofortesting\/ts_final_1.png')\n\n# Check point\n# Showing image shape\nprint('Image shape:', image_BGR.shape)  # tuple of (731, 1092, 3)\n\n# Getting spatial dimension of input image\nh, w = image_BGR.shape[:2]  # Slicing from tuple only first two elements\n\n# Check point\n# Showing height an width of image\nprint('Image height={0} and width={1}'.format(h, w))  # 731 1092\n","b8272f35":"# Variable for counting total processing time\nt = 0\n\n# Blob from current frame\nblob = cv2.dnn.blobFromImage(image_BGR, 1 \/ 255.0, (416, 416), swapRB=True, crop=False)\n\n# Forward pass with blob through output layers\nnetwork.setInput(blob)\nstart = time.time()\noutput_from_network = network.forward(layers_names_output)\nend = time.time()\n\n# Time\nt += end - start\nprint('Total amount of time {:.5f} seconds'.format(t))\n\n# Lists for detected bounding boxes, confidences and class's number\nbounding_boxes = []\nconfidences = []\nclass_numbers = []\n\n# Going through all output layers after feed forward pass\nfor result in output_from_network:\n    # Going through all detections from current output layer\n    for detected_objects in result:\n        # Getting 80 classes' probabilities for current detected object\n        scores = detected_objects[5:]\n        # Getting index of the class with the maximum value of probability\n        class_current = np.argmax(scores)\n        # Getting value of probability for defined class\n        confidence_current = scores[class_current]\n\n        # Eliminating weak predictions by minimum probability\n        if confidence_current > probability_minimum:\n            # Scaling bounding box coordinates to the initial frame size\n            box_current = detected_objects[0:4] * np.array([w, h, w, h])\n\n            # Getting top left corner coordinates\n            x_center, y_center, box_width, box_height = box_current\n            x_min = int(x_center - (box_width \/ 2))\n            y_min = int(y_center - (box_height \/ 2))\n\n            # Adding results into prepared lists\n            bounding_boxes.append([x_min, y_min, int(box_width), int(box_height)])\n            confidences.append(float(confidence_current))\n            class_numbers.append(class_current)\n                \n\n# Implementing non-maximum suppression of given bounding boxes\nresults = cv2.dnn.NMSBoxes(bounding_boxes, confidences, probability_minimum, threshold)\n\n# Checking if there is any detected object been left\nif len(results) > 0:\n    # Going through indexes of results\n    for i in results.flatten():\n        # Bounding box coordinates, its width and height\n        x_min, y_min = bounding_boxes[i][0], bounding_boxes[i][1]\n        box_width, box_height = bounding_boxes[i][2], bounding_boxes[i][3]\n            \n            \n        # Cut fragment with Traffic Sign\n        c_ts = image_BGR[y_min:y_min+int(box_height), x_min:x_min+int(box_width), :]\n        # print(c_ts.shape)\n            \n        if c_ts.shape[:1] == (0,) or c_ts.shape[1:2] == (0,):\n            pass\n        else:\n            # Getting preprocessed blob with Traffic Sign of needed shape\n            blob_ts = cv2.dnn.blobFromImage(c_ts, 1 \/ 255.0, size=(32, 32), swapRB=True, crop=False)\n            blob_ts[0] = blob_ts[0, :, :, :] - mean['mean_image_rgb']\n            blob_ts = blob_ts.transpose(0, 2, 3, 1)\n            # plt.imshow(blob_ts[0, :, :, :])\n            # plt.show()\n\n            # Feeding to the Keras CNN model to get predicted label among 43 classes\n            scores = model.predict(blob_ts)\n\n            # Scores is given for image with 43 numbers of predictions for each class\n            # Getting only one class with maximum value\n            prediction = np.argmax(scores)\n            print(labels['SignName'][prediction])\n\n\n            # Colour for current bounding box\n            colour_box_current = colours[class_numbers[i]].tolist()\n            \n            # Green BGR\n            colour_box_current = [0, 255, 61]\n            \n            # Yellow BGR\n#             colour_box_current = [0, 255, 255]\n\n            # Drawing bounding box on the original current frame\n            cv2.rectangle(image_BGR, (x_min, y_min),\n                              (x_min + box_width, y_min + box_height),\n                              colour_box_current, 6)\n\n#             # Preparing text with label and confidence for current bounding box\n#             text_box_current = '{}: {:.4f}'.format(labels['SignName'][prediction],\n#                                                    confidences[i])\n            \n#             # Putting text with label and confidence on the original image\n#             cv2.putText(image_BGR, text_box_current, (x_min, y_min - 15),\n#                             cv2.FONT_HERSHEY_SIMPLEX, 0.9, colour_box_current, 2)\n            \n            if prediction == 5:\n                # Preparing text with label and confidence for current bounding box\n                text_box_current = '{}: {:.4f}'.format('Speed limit 60', confidences[i])\n\n                # Putting text with label and confidence on the original image\n                cv2.putText(image_BGR, text_box_current, (x_min - 110, y_min - 10),\n                                cv2.FONT_HERSHEY_SIMPLEX, 0.9, colour_box_current, 2)\n                \n            elif prediction == 9:            \n                # Preparing text with label and confidence for current bounding box\n                text_box_current = '{}: {:.4f}'.format('No overtaking', confidences[i])\n\n                # Putting text with label and confidence on the original image\n                cv2.putText(image_BGR, text_box_current, (x_min - 110, y_min + box_height + 30),\n                                cv2.FONT_HERSHEY_SIMPLEX, 0.9, colour_box_current, 2)\n\n#             elif prediction == 17:            \n#                 # Preparing text with label and confidence for current bounding box\n#                 text_box_current = '{}: {:.4f}'.format('No entry', confidences[i])\n\n#                 # Putting text with label and confidence on the original image\n#                 cv2.putText(image_BGR, text_box_current, (x_min - 170, y_min - 15),\n#                                 cv2.FONT_HERSHEY_SIMPLEX, 0.9, colour_box_current, 2)\n                \n                \n# Saving image\ncv2.imwrite('result.png', image_BGR)\n","e7c5d164":"%matplotlib inline\n\nplt.rcParams['figure.figsize'] = (35.0, 35.0) # Setting default size of plots\n\nimage_BGR = cv2.imread('\/kaggle\/working\/result.png')\n\n# Showing image shape\nprint('Image shape:', image_BGR.shape)  # tuple of (800, 1360, 3)\n\n# Getting spatial dimension of input image\nh, w = image_BGR.shape[:2]  # Slicing from tuple only first two elements\n\n# Showing height an width of image\nprint('Image height={0} and width={1}'.format(h, w))  # 800 1360\n\nplt.imshow(cv2.cvtColor(image_BGR, cv2.COLOR_BGR2RGB))\nplt.axis('off')\n# plt.title('Keras Visualization', fontsize=18)\n\n# Showing the plot\nplt.show()\n\nplt.close()\n","fbb1d2a0":"# Saving locally without committing\nfrom IPython.display import FileLink\n\nFileLink('result.png')\n","3a9f32d3":"# \ud83d\udcc2 Loading *labels*","95b5c537":"# \ud83d\udcc2 Loading trained Keras CNN model for Classification","f5856b99":"# \ud83c\udfac Reading input video","4b996fee":"# \u26d4\ufe0f Traffic Signs Detection with YOLO v3, OpenCV and Keras","e0caad4b":"# \ud83c\udf88 Reading input images","a38f28d5":"# \ud83c\udf93 Related course for detection tasks","dd40d9c5":"## Loading *trained weights* and *cfg file* into the Network","548790ff":"# \ud83d\udca0 Loading YOLO v3 network by OpenCV dnn library","c3f41ab2":"# \u27bf Processing frames in the loop","6927d69b":"**Training YOLO v3 for Objects Detection with Custom Data.** *Build your own detector by labelling, training and testing on image, video and in real time with camera.* **Join here:** [https:\/\/www.udemy.com\/course\/training-yolo-v3-for-objects-detection-with-custom-data\/](https:\/\/www.udemy.com\/course\/training-yolo-v3-for-objects-detection-with-custom-data\/?referralCode=A283956A57327E37DDAD)\n\nExample of detections on video are shown below. **Trained weights** can be found in the course mentioned above.\n\n![](https:\/\/www.googleapis.com\/download\/storage\/v1\/b\/kaggle-user-content\/o\/inbox%2F3400968%2Fbcdae0b57021d6ac3e86a9aa2e8c4b08%2Fts_detections.gif?generation=1581700736851192&alt=media)","8edbbbfb":"# \ud83e\udd9e Showing processed image","1e55d8ba":"# \ud83c\udf93 Related course for classification tasks","4683b513":"## Getting *output layers* where detections are made","d2cc5480":"# \ud83d\udce5 Importing needed libraries","f8594275":"## Setting *probability*, *threshold* and *colour* for bounding boxes","a9d3c6cd":"# \ud83d\udcf0 Related Papers\n\n1. Sichkar V. N. **Real time detection and classification of traffic signs based on YOLO version 3 algorithm.** *Scientific and Technical Journal of Information Technologies, Mechanics and Optics*, 2020, vol. 20, no. 3, pp. 418\u2013424. DOI: 10.17586\/2226-1494-2020-20-3-418-424 (Full-text available on ResearchGate here: [Real time detection and classification of traffic signs based on YOLO version 3 algorithm](https:\/\/www.researchgate.net\/publication\/342638954_Real_time_detection_and_classification_of_traffic_signs_based_on_YOLO_version_3_algorithm)\n\n1. Sichkar V. N. **Effect of various dimension convolutional layer filters on traffic sign classification accuracy.** *Scientific and Technical Journal of Information Technologies, Mechanics and Optics*, 2019, vol. 19, no. 3, pp. 546\u2013552. DOI: 10.17586\/2226-1494-2019-19-3-546-552 (Full-text available on ResearchGate here: [Effect of various dimension convolutional layer filters on traffic sign classification accuracy](https:\/\/www.researchgate.net\/publication\/334074308_Effect_of_various_dimension_convolutional_layer_filters_on_traffic_sign_classification_accuracy)","add78703":"# \ud83e\uddff Processing single image","4ed60258":"![](https:\/\/www.googleapis.com\/download\/storage\/v1\/b\/kaggle-user-content\/o\/inbox%2F3400968%2Fa57f58b38e3caab6fbf72169895f5074%2Fresult.gif?generation=1585955236302060&alt=media)","4bf22cc8":"# \ud83d\udd0e Example of the result","0319f296":"## \ud83c\udfc1 FPS results","8d56405f":"* Firstly, trained model in Darknet framework **detects Traffic Signs among 4 categories** by OpenCV dnn library.\n* Then, trained model in Keras **classifies** cut fragmets of Traffic Signs into one of **43 classes**.\n* Results are experimental, but can be used for further improvements.","df1f17be":"**Design**, **Train** & **Test** deep CNN for Image Classification.\n\n**Join** the course & enjoy new opportunities to get deep learning skills:\n\n\n[https:\/\/www.udemy.com\/course\/convolutional-neural-networks-for-image-classification\/](https:\/\/www.udemy.com\/course\/convolutional-neural-networks-for-image-classification\/?referralCode=12EE0D74A405BF4DDE9B)\n\n\n![](https:\/\/github.com\/sichkar-valentyn\/1-million-images-for-Traffic-Signs-Classification-tasks\/blob\/main\/images\/slideshow_classification.gif?raw=true)"}}