{"cell_type":{"41b66da2":"code","c3341646":"code","c45faa97":"code","c94d8e94":"code","5309d829":"code","b7c1428d":"code","0379ba72":"code","ff130fb0":"code","bab1c3db":"code","3e6a44af":"code","ead79e08":"code","e08e9c83":"code","24d30aad":"code","50e41cef":"code","81f8fdf0":"code","2b3421ad":"code","bd3bd477":"code","ecb998e8":"code","21ea3758":"code","d1ba1e3e":"code","37aaa888":"code","08a05fc3":"code","2ab98e38":"code","c83eab5a":"code","1822417a":"code","e462cedf":"code","ec8d015e":"code","25ccc6a5":"code","3a0f187a":"code","175cfd50":"code","e8ca91f5":"code","6eff39b5":"code","26e6dd7f":"code","ff02de1d":"code","ebd92dab":"code","2865c6c0":"code","212122dc":"code","8323eee3":"code","f0d9c914":"code","b648265d":"code","311763f5":"code","7856f982":"code","731abbff":"code","99a595f0":"code","d18ec9e6":"code","d9534dbb":"code","d34424ac":"code","29058dab":"code","6540f7dc":"code","466a6a49":"code","b77fdad4":"code","9e6cd390":"code","6e01998e":"code","a7c3cc6b":"code","b29acb2a":"code","c5c1c731":"code","e5d87e5d":"code","29f1c7e5":"code","f2b13412":"code","caf71609":"code","e457d715":"code","77fe1d22":"code","511a455c":"code","310754da":"code","818904f9":"code","5cfb3deb":"code","b4960cae":"code","7435f41d":"code","2814f726":"code","9be05dda":"code","4117f13a":"code","f4cdf07a":"code","9c0dc9ce":"code","0bd4c963":"code","ad0689eb":"code","b0101ee9":"code","90c683fb":"code","d848e664":"code","22ab443a":"code","e3d5aa53":"code","7fb024c9":"code","9a5e1ab4":"code","042ac3f1":"code","990641b3":"code","4124478e":"code","b2b9e2e5":"code","1d2d2044":"code","06e8effc":"code","c1d42832":"markdown","78dc60e0":"markdown","13dc21e7":"markdown","0ba70240":"markdown","6c84b48f":"markdown","3b60ea8f":"markdown","915d256f":"markdown","9ee53ff5":"markdown","07014ac7":"markdown","61bd9289":"markdown","08befb32":"markdown","96c034f1":"markdown","bf89b56f":"markdown","3d07ebf0":"markdown","f3994421":"markdown","71bfcf94":"markdown","81172775":"markdown","96a37d48":"markdown","dce3e79a":"markdown","f6619b8e":"markdown","1d8517b7":"markdown","134ce0cb":"markdown","a80e55ba":"markdown","e8005598":"markdown","0a96ba58":"markdown","62bd60ac":"markdown","270697c1":"markdown","e83de7f0":"markdown"},"source":{"41b66da2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c3341646":"# Read data\nimport numpy as np                           # Linear Algebra (calculate the mean and standard deviation)\nimport pandas as pd                          # manipulate data, data processing, load csv file I\/O (e.g. pd.read_csv)\n\n# Visualization\nimport matplotlib.pyplot as plt              # Visualization using matplotlib\n%matplotlib inline\nimport seaborn as sns                        # Visualization using seaborn\n\n# style\nplt.style.use(\"fivethirtyeight\")             # Set Graphs Background style using matplotlib\nsns.set_style(\"darkgrid\")                    # Set Graphs Background style using seaborn\n\nimport warnings                              # To ignore any warnings\nwarnings.filterwarnings(\"ignore\")","c45faa97":"from sklearn.model_selection import train_test_split                     # split  data into training and testing sets\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier                           # Decision tree Regression\nimport xgboost\nfrom xgboost import XGBClassifier\nfrom catboost import CatBoostClassifier\nfrom lightgbm import LGBMClassifier\nfrom sklearn.metrics import confusion_matrix, classification_report      # this creates a confusion matrix\nfrom sklearn.model_selection import GridSearchCV                         # this will do cross validation","c94d8e94":"# Loading the train, test & sample dataset\ntrain = pd.read_csv(\"\/kaggle\/input\/health-insurance-lead-prediction\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/health-insurance-lead-prediction\/test.csv\")","5309d829":"# make copy of train & test\ntrain_original = train.copy()\ntest_original = test.copy()","b7c1428d":"# checking dimension (num of rows and columns) of datasets\ndisplay(train.shape)\ndisplay(test.shape)","0379ba72":"# import first rows\ntrain.head()","ff130fb0":"# import first rows\ntest.head()","bab1c3db":"# check dataframe structure like columns and its counts, datatypes & Null Values\ntrain.info()","3e6a44af":"# check dataframe structure like columns and its counts, datatypes & Null Values\ntest.info()","ead79e08":"# Gives number of data points in each variable\ntrain.count()","e08e9c83":"# descriptive statistics\ntrain.describe()","24d30aad":"train[\"City_Code\"].nunique()","50e41cef":"test[\"City_Code\"].nunique()","81f8fdf0":"plt.figure(figsize=(10,8))\ntrain[\"City_Code\"].value_counts().plot.bar()","2b3421ad":"train[\"Accomodation_Type\"].nunique()","bd3bd477":"test[\"Accomodation_Type\"].nunique()","ecb998e8":"train[\"Accomodation_Type\"].value_counts()","21ea3758":"train[\"Reco_Insurance_Type\"].nunique()","d1ba1e3e":"test[\"Reco_Insurance_Type\"].nunique()","37aaa888":"train[\"Reco_Insurance_Type\"].value_counts()","08a05fc3":"train[\"Is_Spouse\"].nunique()","2ab98e38":"test[\"Is_Spouse\"].nunique()","c83eab5a":"train[\"Is_Spouse\"].value_counts()","1822417a":"train[\"Health Indicator\"].nunique()","e462cedf":"test[\"Health Indicator\"].nunique()","ec8d015e":"train[\"Health Indicator\"].value_counts()","25ccc6a5":"train[\"Holding_Policy_Duration\"].nunique()","3a0f187a":"train[\"Holding_Policy_Duration\"].value_counts()","175cfd50":"train[\"Holding_Policy_Duration\"] = train[\"Holding_Policy_Duration\"].replace('14+', 14)\ntest[\"Holding_Policy_Duration\"] = test[\"Holding_Policy_Duration\"].replace('14+', 14)","e8ca91f5":"train[\"Holding_Policy_Duration\"].value_counts()","6eff39b5":"train[\"Holding_Policy_Type\"].nunique()","26e6dd7f":"test[\"Holding_Policy_Type\"].nunique()","ff02de1d":"train[\"Holding_Policy_Type\"].value_counts()","ebd92dab":"train[\"Response\"].nunique()","2865c6c0":"train[\"Response\"].value_counts()","212122dc":"train.drop(['ID', 'City_Code', 'Region_Code'], axis=1, inplace=True)\n\ntest.drop(['ID', 'City_Code', 'Region_Code'], axis=1, inplace=True)","8323eee3":"### ii) Missing Values","f0d9c914":"train.isnull().sum()","b648265d":"test.isnull().sum()","311763f5":"plt.figure(figsize=(10,8))\nsns.heatmap(train.isnull(), yticklabels=False, cbar=False, cmap='viridis')","7856f982":"plt.figure(figsize=(10,8))\nsns.heatmap(test.isnull(), yticklabels=False, cbar=False, cmap='viridis')","731abbff":"train[\"Holding_Policy_Duration\"] = train[\"Holding_Policy_Duration\"].astype('float64')\ntest[\"Holding_Policy_Duration\"] = test[\"Holding_Policy_Duration\"].astype('float64')","99a595f0":"train[\"Health Indicator\"] = train[\"Health Indicator\"].fillna(train[\"Health Indicator\"].mode()[0])\ntrain[\"Holding_Policy_Duration\"] = train[\"Holding_Policy_Duration\"].fillna(train[\"Holding_Policy_Duration\"].median())\ntrain[\"Holding_Policy_Type\"] = train[\"Holding_Policy_Type\"].fillna(train[\"Holding_Policy_Type\"].median())\n\ntest[\"Health Indicator\"] = test[\"Health Indicator\"].fillna(test[\"Health Indicator\"].mode()[0])\ntest[\"Holding_Policy_Duration\"] = test[\"Holding_Policy_Duration\"].fillna(test[\"Holding_Policy_Duration\"].median())\ntest[\"Holding_Policy_Type\"] = test[\"Holding_Policy_Type\"].fillna(test[\"Holding_Policy_Type\"].median())","d18ec9e6":"display(train.head(3))\ndisplay(test.head(3))","d9534dbb":"plt.figure(figsize=(17,10))\nsns.boxplot(data=train)\n\nplt.xticks(fontsize=16)\nplt.yticks(fontsize=16)\n\nplt.show()","d34424ac":"plt.figure(figsize=(17,10))\nsns.boxplot(data=test)\n\nplt.xticks(fontsize=16)\nplt.yticks(fontsize=16)\n\nplt.show()","29058dab":"display(train.skew())\ndisplay(test.skew())","6540f7dc":"sns.distplot(train['Reco_Policy_Premium'])\nSkew_Reco_Policy_Premium = train['Reco_Policy_Premium'].skew()\nplt.title(\"Skew:\"+str(Skew_Reco_Policy_Premium))","466a6a49":"sns.distplot(test['Reco_Policy_Premium'])\nSkew_Reco_Policy_Premium = test['Reco_Policy_Premium'].skew()\nplt.title(\"Skew:\"+str(Skew_Reco_Policy_Premium))","b77fdad4":"sns.distplot(train['Holding_Policy_Duration'])\nSkew_Holding_Policy_Duration = train['Holding_Policy_Duration'].skew()\nplt.title(\"Skew:\"+str(Skew_Holding_Policy_Duration))","9e6cd390":"sns.distplot(test['Holding_Policy_Duration'])\nSkew_Holding_Policy_Duration = test['Holding_Policy_Duration'].skew()\nplt.title(\"Skew:\"+str(Skew_Holding_Policy_Duration))","6e01998e":"sns.distplot(train['Holding_Policy_Type'])\nSkew_Holding_Policy_Type = train['Holding_Policy_Type'].skew()\nplt.title(\"Skew:\"+str(Skew_Holding_Policy_Type))","a7c3cc6b":"sns.distplot(train['Reco_Policy_Cat'])\nSkew_Reco_Policy_Cat = train['Reco_Policy_Cat'].skew()\nplt.title(\"Skew:\"+str(Skew_Reco_Policy_Cat))","b29acb2a":"train.corr()['Reco_Policy_Cat']","c5c1c731":"plt.figure(figsize=(10,6)) \nsns.heatmap(train.corr(), annot=True, linecolor = 'white', linewidths = 1, cmap=\"YlGnBu\")\nplt.show()","e5d87e5d":"numeric_cols_train = train.select_dtypes(include=[np.number])\ndisplay(numeric_cols_train.head())","29f1c7e5":"numeric_cols_test = test.select_dtypes(include=[np.number])\ndisplay(numeric_cols_test.head())","f2b13412":"plt.figure(figsize = (15,10))\nfeature = numeric_cols_train.columns[0:6]\nfor i in enumerate(feature):\n    plt.subplot(3,2, i[0]+1)\n    sns.distplot(numeric_cols_train[i[1]], color='crimson')","caf71609":"plt.figure(figsize = (15,10))\nfeature = numeric_cols_test.columns[0:6]\nfor i in enumerate(feature):\n    plt.subplot(3,2, i[0]+1)\n    sns.distplot(numeric_cols_test[i[1]], color='crimson')","e457d715":"plt.figure(figsize = (13, 9)) \ntrain.boxplot()\nplt.show()","77fe1d22":"# Setting color palette\ncolors = ['#D32F2F','#1976D2']\nsns.palplot(sns.color_palette(colors))","511a455c":"plt.figure(figsize=(12,10))\nsns.scatterplot(x=\"Holding_Policy_Duration\", y=\"Holding_Policy_Type\", hue=\"Accomodation_Type\", data=train, palette=colors, marker=\"X\")\nplt.show()","310754da":"plt.figure(figsize=(9,7))\nsns.boxplot(data=train, x='Accomodation_Type', y='Holding_Policy_Type')\nplt.show()","818904f9":"# Pairplot\nsns.pairplot(train, hue='Accomodation_Type')\nplt.show()","5cfb3deb":"# Transform discrete values to columns with 1 and 0s\ntrain_OHE = pd.get_dummies(train)\n\n# Do the same for competition data\ntest_OHE = pd.get_dummies(test)","b4960cae":"display(train_OHE.head())\ndisplay(test_OHE.head())","7435f41d":"print(\"Training Data Shape (Rows,Columns):\",train_OHE.shape)\nprint(\"Competition Data Shape (Rows,Columns):\", test_OHE.shape)","2814f726":"# Independant variable\nX = train_OHE.drop('Response',axis=1)        # All rows & columns exclude Target features\n\n# Dependant variable\ny = train_OHE['Response']                   # Only target feature","9be05dda":"# split  data into training and testing sets of 80:20 ratio\n# 20% of test size selected\n# random_state is random seed\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2, random_state=4)","4117f13a":"# shape of X & Y test \/ train\nprint(X_train.shape, X_test.shape, y_train.shape, y_test.shape)","f4cdf07a":"LogReg = LogisticRegression()\nLogReg.fit(X_train, y_train)","9c0dc9ce":"y_pred_LogReg = LogReg.predict(X_test)","0bd4c963":"print(\"Train Score {:.2f} & Test Score {:.2f}\".format(LogReg.score(X_train, y_train), LogReg.score(X_test, y_test)))","ad0689eb":"rf = RandomForestClassifier(n_estimators=200, max_depth=5, random_state=1)\nrf.fit(X_train, y_train)","b0101ee9":"y_pred_rf = rf.predict(X_test)","90c683fb":"print(\"Train Score {:.2f} & Test Score {:.2f}\".format(rf.score(X_train, y_train), rf.score(X_test, y_test)))","d848e664":"xgb = XGBClassifier()\nxgb.fit(X_train, y_train)","22ab443a":"y_pred_xgb = xgb.predict(X_test)","e3d5aa53":"print(\"Train Score {:.2f} & Test Score {:.2f}\".format(xgb.score(X_train, y_train), xgb.score(X_test, y_test)))","7fb024c9":"CB = CatBoostClassifier(verbose=0, n_estimators=100)\nCB.fit(X_train, y_train)","9a5e1ab4":"y_pred_xgb = CB.predict(X_test)","042ac3f1":"print(\"Train Score {:.2f} & Test Score {:.2f}\".format(CB.score(X_train, y_train), CB.score(X_test, y_test)))","990641b3":"lgbm_model = LGBMClassifier()\nlgbm_model = lgbm_model.fit(X_train, y_train)","4124478e":"y_pred_LGBM = lgbm_model.predict(X_test)","b2b9e2e5":"print(\"Train Score {:.2f} & Test Score {:.2f}\".format(lgbm_model.score(X_train,y_train),lgbm_model.score(X_test,y_test)))","1d2d2044":"y_pred_test = xgb.predict(test_OHE)","06e8effc":"submission = pd.DataFrame({'ID': test_original['ID'], 'Response': y_pred_test})\nsubmission.to_csv('Insurance.csv', index=False)","c1d42832":"<h2 style=\"color:blue\" align=\"left\"> 1. Import necessary Libraries <\/h2>","78dc60e0":"<h2 style=color:green align=\"left\"> b. Clean the data <\/h2>","13dc21e7":"<h2 style=color:green align=\"left\"> f. Data Visualisation <\/h2>","0ba70240":"<h2 style=color:green align=\"left\"> c. Find Outliers <\/h2>","6c84b48f":"### 2. Accomodation_Type","3b60ea8f":"### ii) Bivariate Analysis","915d256f":"<h2 style=\"color:blue\" align=\"left\"> 3. Model building and Evaluation <\/h2>","9ee53ff5":"### 1. City_Code","07014ac7":"### 6. Holding_Policy_Duration","61bd9289":"### 7. Holding_Policy_Type","08befb32":"## 4. CATBOOST","96c034f1":"<h2 style=color:green align=\"left\"> e. Analysis of Relationship between variables <\/h2>","bf89b56f":"## 1. Logistic Regression","3d07ebf0":"## Submission","f3994421":"### 4. Is_Spouse","71bfcf94":"## 5. LGBM","81172775":"<h2 style=color:blue align=\"left\"> 2. EDA(Exploratory Data Analysis) <\/h2>","96a37d48":"<h2 style=color:green align=\"left\"> d. Skew and Kurtosis <\/h2>","dce3e79a":"### ii) Heatmap","f6619b8e":"<h2 style=color:green align=\"left\"> a. Understand the data <\/h2>","1d8517b7":"### 3. Reco_Insurance_Type","134ce0cb":"## 3. XGBoost","a80e55ba":"### i) Univariate Analysis","e8005598":"### 8. Response","0a96ba58":"### i) Drop unwanted features","62bd60ac":"### iii) Multivariate Analysis","270697c1":"## 2. Random Forest Classifier","e83de7f0":"### 5. Health Indicator"}}