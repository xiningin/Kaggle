{"cell_type":{"6dc55533":"code","ca5f266d":"code","08c55cd0":"code","7aedda87":"code","31ca77e0":"code","e0e955b6":"code","095d4c3d":"code","b7eeffbd":"code","8e1c834f":"code","2dfc6b48":"code","a255c036":"code","af58f1c6":"code","b429b4d7":"code","cf9c00ff":"code","d358f7a7":"code","18af9045":"code","237d6cf2":"code","8a619680":"code","3d7cb17f":"code","6550e640":"code","7c9fa83f":"code","db46042c":"code","95520a96":"code","ef768ed2":"code","9d29ddfb":"code","096171d7":"code","f7f7318f":"code","09c69cf9":"code","0084cb81":"code","88dff6b1":"code","66f1d935":"code","96691ba4":"code","0acef0df":"code","0204c815":"code","c2844760":"code","feee131c":"code","16eb5b8f":"code","0cb29d8a":"code","6cdc0236":"markdown","5b56d68b":"markdown","c7a5140e":"markdown","8d5a5f6e":"markdown","b330622b":"markdown","bca13868":"markdown","85fc8cdc":"markdown","d8b35b44":"markdown","b76276c0":"markdown","2adc5624":"markdown","6e64dcab":"markdown","b24e755d":"markdown","11b0679b":"markdown","8176c79a":"markdown","7a0a8a3f":"markdown","71d4d29a":"markdown","9f8aca81":"markdown","42dbafe4":"markdown","e81ed939":"markdown","cdef52c1":"markdown","ee13d872":"markdown","91f418e0":"markdown","5c0efd27":"markdown","e4cf7e45":"markdown","87c43f58":"markdown","90104555":"markdown","5a0e6bad":"markdown","824bfc1d":"markdown","665c9fd7":"markdown","bfcc5362":"markdown","b9aa0a6d":"markdown"},"source":{"6dc55533":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\npd.set_option('max_columns', 10, 'max_rows', 20)","ca5f266d":"tr_train = pd.read_csv('..\/input\/X_train.csv', encoding='cp949')\ntr_test = pd.read_csv('..\/input\/X_test.csv', encoding='cp949')\ntr = pd.concat([tr_train, tr_test])\ntr","08c55cd0":"features = []","7aedda87":"f = tr.groupby('custid')['tot_amt'].agg([('\ucd1d\uad6c\ub9e4\uc561', 'sum')]).reset_index()\nfeatures.append(f); f","31ca77e0":"f = tr.groupby('custid')['tot_amt'].agg([('\uad6c\ub9e4\uac74\uc218', 'size')]).reset_index()\nfeatures.append(f); f","e0e955b6":"f = tr.groupby('custid')['tot_amt'].agg([('\ud3c9\uade0\uad6c\ub9e4\uac00\uaca9', 'mean')]).reset_index()\nfeatures.append(f); f","095d4c3d":"f = tr.groupby('custid')['inst_mon'].agg([('\ud3c9\uade0\ud560\ubd80\uac1c\uc6d4\uc218', 'mean')]).reset_index()\nf.iloc[:,1] = f.iloc[:,1].apply(round, args=(1,))\nfeatures.append(f); f","b7eeffbd":"n = tr.part_nm.nunique()\nf = tr.groupby('custid')['brd_nm'].agg([('\uad6c\ub9e4\uc0c1\ud488\ub2e4\uc591\uc131', lambda x: len(x.unique()) \/ n)]).reset_index()\nfeatures.append(f); f","8e1c834f":"n = 4\nf = tr.groupby('custid')['str_nm'].agg([('\ub9e4\uc7a5\uc774\uc6a9\ub2e4\uc591\uc131', lambda x: len(x.unique()) \/ n)]).reset_index()\nfeatures.append(f); f","2dfc6b48":"tr['sdate'] = tr.sales_date.str[:10]\nf = tr.groupby(by = 'custid')['sdate'].agg([('\ub0b4\uc810\uc77c\uc218','nunique')]).reset_index()\nfeatures.append(f); f","a255c036":"x = tr[tr['import_flg'] == 1].groupby('custid').size() \/ tr.groupby('custid').size()\nf = x.reset_index().rename(columns={0: '\uc218\uc785\uc0c1\ud488_\uad6c\ub9e4\ube44\uc728'}).fillna(0)\nf.iloc[:,1] = (f.iloc[:,1]*100).apply(round, args=(1,))\nfeatures.append(f); f","af58f1c6":"def f2(x):\n    k = x.dayofweek\n    if k <= 2 :\n        return('\uc6d4\ud654\uc218_\uad6c\ub9e4\uac74\uc218')\n    elif 3 <= k < 5 :\n        return('\ubaa9\uae08_\uad6c\ub9e4\uac74\uc218')\n    elif 5 <= k < 6 :\n        return('\ud1a0_\uad6c\ub9e4\uac74\uc218')\n    else :\n        return('\uc77c_\uad6c\ub9e4\uac74\uc218')    \n    \ntr['\uc694\uc77c2'] = pd.to_datetime(tr.sales_date).apply(f2)\nf = pd.pivot_table(tr, index='custid', columns='\uc694\uc77c2', values='tot_amt', \n                   aggfunc=np.size, fill_value=0).reset_index()\nfeatures.append(f); f","b429b4d7":"def fw(x):\n    k = x.dayofweek\n    if k <= 4 :\n        return('\uc8fc\uc911_\ubc29\ubb38')\n    else :\n        return('\uc8fc\ub9d0_\ubc29\ubb38')    \n    \ndf = tr.copy()\ndf = df.drop_duplicates(['custid','sales_date'])\n\ndf['week'] = pd.to_datetime(df.sales_date).apply(fw)\ndf = pd.pivot_table(df, index='custid', columns='week', values='tot_amt', \n                   #aggfunc=np.size, fill_value=0).reset_index()\ndf['\uc8fc\ub9d0\ubc29\ubb38\ube44\uc728'] = ((df.iloc[:,1] \/ (df.iloc[:,1]+df.iloc[:,2]))*100).apply(round, args=(1,))\nf = df.copy().iloc[:,[0,-1]]\nfeatures.append(f); f","cf9c00ff":"def f1(x):\n    k = x.month\n    if 2 <= k <= 4 :\n        return('234\uc6d4_\uad6c\ub9e4\uac74\uc218')\n    elif 5 <= k <= 7 :\n        return('567\uc6d4_\uad6c\ub9e4\uac74\uc218')\n    elif 8 <= k <= 10 :\n        return('8910\uc6d4_\uad6c\ub9e4\uac74\uc218')\n    else :\n        return('11121\uc6d4_\uad6c\ub9e4\uac74\uc218')    \n    \ntr['season2'] = pd.to_datetime(tr.sales_date).apply(f1)\nf = pd.pivot_table(tr, index='custid', columns='season2', values='tot_amt', \n                   aggfunc=np.size, fill_value=0).reset_index()\nfeatures.append(f); f","d358f7a7":"def f2(x):\n    if 901 <= x < 1200 :\n        return('12\uc2dc \uc774\uc804_\uad6c\ub9e4\uac74\uc218')\n    elif 1200 <= x < 1400 :\n        return('12~2\uc2dc_\uad6c\ub9e4\uac74\uc218')\n    elif 1400 <= x < 1600 :\n        return('2~4\uc2dc_\uad6c\ub9e4\uac74\uc218')\n    elif 1600 <= x < 1800 :\n        return('4~6\uc2dc_\uad6c\ub9e4\uac74\uc218')\n    else :\n        return('6\uc2dc\uc774\ud6c4_\uad6c\ub9e4\uac74\uc218')  \n\ntr['timeslot2'] = tr.sales_time.apply(f2)","18af9045":"tr['timeslot2']","237d6cf2":"f = pd.pivot_table(tr, index='custid', columns='timeslot2', values='tot_amt',\n                   aggfunc=np.size, fill_value=0).reset_index()\nfeatures.append(f); f","8a619680":"f = tr.groupby('custid')['dis_amt'].agg([('\ud3c9\uade0\ud560\uc778\uae08\uc561', 'mean')]).reset_index()\nf.iloc[:,1] = f.iloc[:,1].apply(round, args=(1,))\nfeatures.append(f); f","3d7cb17f":"f = tr.groupby('custid')['sales_time'].agg([('\ud3c9\uade0\uad6c\ub9e4\uc2dc\uac04', 'mean')]).reset_index()\nf.iloc[:,1] = f.iloc[:,1].apply(round, args=(1,))\nfeatures.append(f); f","6550e640":"f = tr.groupby('custid')['net_amt'].agg([('\uc2e4\uc81c\uad6c\ub9e4\uae08\uc561', 'sum')]).reset_index()\nf.iloc[:,1] = f.iloc[:,1].apply(round, args=(1,))\nfeatures.append(f); f","7c9fa83f":"f = tr.groupby('custid')['net_amt'].agg([('\uc2e4\uc81c\uad6c\ub9e4\uae08\uc561\ud3c9\uade0', 'mean')]).reset_index()\nf.iloc[:,1] = f.iloc[:,1].apply(round, args=(1,))\nfeatures.append(f); f","db46042c":"f = pd.pivot_table(tr, index='custid', columns='str_nm', values='tot_amt', \n                   aggfunc=np.size, fill_value=0).reset_index()\nfeatures.append(f); f","95520a96":"f = pd.pivot_table(tr, index='custid', columns='part_nm', values='tot_amt', \n                   aggfunc=np.size, fill_value=0).reset_index()\nfeatures.append(f); f","ef768ed2":"f = pd.pivot_table(tr, index='custid', columns='buyer_nm', values='tot_amt', \n                   aggfunc=np.size, fill_value=0).reset_index()\nfeatures.append(f); f","9d29ddfb":"X_train = pd.DataFrame({'custid': tr_train.custid.unique()})\nfor f in features :\n    X_train = pd.merge(X_train, f, how='left')\ndisplay(X_train)\n\nX_test = pd.DataFrame({'custid': tr_test.custid.unique()})\nfor f in features :\n    X_test = pd.merge(X_test, f, how='left')\ndisplay(X_test)","096171d7":"X_train[\"\ud3c9\uade0\ud560\uc778\uc728\"] = (X_train[\"\ud3c9\uade0\ud560\uc778\uae08\uc561\"] \/ X_train[\"\ud3c9\uade0\uad6c\ub9e4\uac00\uaca9\"])*100\nX_test[\"\ud3c9\uade0\ud560\uc778\uc728\"] = (X_test[\"\ud3c9\uade0\ud560\uc778\uae08\uc561\"] \/ X_test[\"\ud3c9\uade0\uad6c\ub9e4\uac00\uaca9\"])*100","f7f7318f":"X_train[\"\ud1a0_\ube44\uc728\"] = (X_train[\"\ud1a0_\uad6c\ub9e4\uac74\uc218\"] \/ X_train[\"\uad6c\ub9e4\uac74\uc218\"])*100\nX_train[\"\uc77c_\ube44\uc728\"] = (X_train[\"\uc77c_\uad6c\ub9e4\uac74\uc218\"] \/ X_train[\"\uad6c\ub9e4\uac74\uc218\"])*100\nX_test[\"\ud1a0_\ube44\uc728\"] = (X_test[\"\ud1a0_\uad6c\ub9e4\uac74\uc218\"] \/ X_test[\"\uad6c\ub9e4\uac74\uc218\"])*100\nX_test[\"\uc77c_\ube44\uc728\"] = (X_test[\"\uc77c_\uad6c\ub9e4\uac74\uc218\"] \/ X_test[\"\uad6c\ub9e4\uac74\uc218\"])*100","09c69cf9":"X_train['\uac00\uc815\uc6a9\ud488R']=X_train['\uac00\uc815\uc6a9\ud488']+X_train['\uac00\uc815\uc6a9\ud488\ud30c\ud2b8']\nX_train['\uacf5\uc0b0\ud488R']=X_train['\uacf5\uc0b0\ud488']+X_train['\uacf5\uc0b0\ud488\ud30c\ud2b8']\nX_train['\ub85c\uc584\ubd80\ub760\ub044R']=X_train['\ub85c\uc584\ubd80\ub760\ub044']+X_train['\ub85c\uc584\ubd80\ud2f1']\nX_train['\uc0dd\uc2dd\ud488R']=X_train['\uc0dd\uc2dd\ud488']+X_train['\uc0dd\uc2dd\ud488\ud30c\ud2b8']\nX_train['\uc2a4\ud3ec\uce20\uce90\uc8fc\uc5bcR']=X_train['\uc2a4\ud3ec\uce20\uce90\uc8fc\uc5bc']+X_train['\uc2a4\ud3ec\uce20\uce90\uc96c\uc5bc']\nX_train['\uc5ec\uc131\uce90\uc8fc\uc5bcR']=X_train['\uc5ec\uc131\uce90\uc8fc\uc5bc']+X_train['\uc5ec\uc131\uce90\uc96c\uc5bc']\nX_train['\uc7a1\ud654R']=X_train['\uc7a1\ud654']+X_train['\uc7a1\ud654\ud30c\ud2b8']\n\nX_test['\uac00\uc815\uc6a9\ud488R']=X_test['\uac00\uc815\uc6a9\ud488']+X_test['\uac00\uc815\uc6a9\ud488\ud30c\ud2b8']\nX_test['\uacf5\uc0b0\ud488R']=X_test['\uacf5\uc0b0\ud488']+X_test['\uacf5\uc0b0\ud488\ud30c\ud2b8']\nX_test['\ub85c\uc584\ubd80\ub760\ub044R']=X_test['\ub85c\uc584\ubd80\ub760\ub044']+X_test['\ub85c\uc584\ubd80\ud2f1']\nX_test['\uc0dd\uc2dd\ud488R']=X_test['\uc0dd\uc2dd\ud488']+X_test['\uc0dd\uc2dd\ud488\ud30c\ud2b8']\nX_test['\uc2a4\ud3ec\uce20\uce90\uc8fc\uc5bcR']=X_test['\uc2a4\ud3ec\uce20\uce90\uc8fc\uc5bc']+X_test['\uc2a4\ud3ec\uce20\uce90\uc96c\uc5bc']\nX_test['\uc5ec\uc131\uce90\uc8fc\uc5bcR']=X_test['\uc5ec\uc131\uce90\uc8fc\uc5bc']+X_test['\uc5ec\uc131\uce90\uc96c\uc5bc']\nX_test['\uc7a1\ud654R']=X_test['\uc7a1\ud654']+X_test['\uc7a1\ud654\ud30c\ud2b8']","0084cb81":"X_train['\ub0a8\uc131\ud30c\ud2b8']=X_train['\uac00\uc815\uc6a9\ud488R']+X_train['\uacf5\uc0b0\ud488R']+X_train['\uc0dd\uc2dd\ud488R']+X_train['\ucf00\uc8fc\uc5bc,\uad6c\ub450,\uc544\ub3d9']\nX_test['\ub0a8\uc131\ud30c\ud2b8']=X_test['\uac00\uc815\uc6a9\ud488R']+X_test['\uacf5\uc0b0\ud488R']+X_test['\uc0dd\uc2dd\ud488R']+X_test['\ucf00\uc8fc\uc5bc,\uad6c\ub450,\uc544\ub3d9']\nX_train['\uc5ec\uc131\ud30c\ud2b8']=X_train['\uc5ec\uc131\uce90\uc8fc\uc5bc']+X_train['\uc601\uce90\ub9ad\ud130']+X_train['\uc601\ud50c\ub77c\uc790']+X_train['\ud328\uc158\uc7a1\ud654'] \nX_test['\uc5ec\uc131\ud30c\ud2b8']=X_test['\uc5ec\uc131\uce90\uc8fc\uc5bc']+X_test['\uc601\uce90\ub9ad\ud130']+X_test['\uc601\ud50c\ub77c\uc790']+X_test['\ud328\uc158\uc7a1\ud654'] ","88dff6b1":"#def f1(x):\n#    if  x < 1200 :\n#        return('1')\n#    elif 1200 <= x < 1400 :\n#        return('2')\n#    elif 1400 <= x < 1700 :\n#        return('3')\n#    elif 1700 <= x < 1800 :\n#        return('4')\n#    else :\n#        return('5')  \n\n#X_train['\ud3c9\uade0\uad6c\ub9e4\uc2dc\uac04B'] = X_train.\ud3c9\uade0\uad6c\ub9e4\uc2dc\uac04.apply(f1)","66f1d935":"#def f1(x):\n#    if  x < 1200 :\n#        return('1')\n#    elif 1200 <= x < 1400 :\n#        return('2')\n#    elif 1400 <= x < 1700 :\n#        return('3')\n#    elif 1700 <= x < 1800 :\n#        return('4')\n#    else :\n#        return('5')  \n\n#X_test['\ud3c9\uade0\uad6c\ub9e4\uc2dc\uac04B'] = X_test.\ud3c9\uade0\uad6c\ub9e4\uc2dc\uac04.apply(f1)","96691ba4":"f = X_train.\ucd1d\uad6c\ub9e4\uc561.where(X_train.\ucd1d\uad6c\ub9e4\uc561>=0, other=0)\nf = np.log(f+1)\nX_train.\ucd1d\uad6c\ub9e4\uc561 = f\n\nf = X_test.\ucd1d\uad6c\ub9e4\uc561.where(X_test.\ucd1d\uad6c\ub9e4\uc561>=0, other=0)\nf = np.log(f+1)\nX_test.\ucd1d\uad6c\ub9e4\uc561 = f\n\nf = X_train.\ud3c9\uade0\uad6c\ub9e4\uac00\uaca9.where(X_train.\ud3c9\uade0\uad6c\ub9e4\uac00\uaca9>=0, other=0)\nf = np.log(f+1)\nX_train.\ud3c9\uade0\uad6c\ub9e4\uac00\uaca9 = f\n\nf = X_test.\ud3c9\uade0\uad6c\ub9e4\uac00\uaca9.where(X_test.\ud3c9\uade0\uad6c\ub9e4\uac00\uaca9>=0, other=0)\nf = np.log(f+1)\nX_test.\ud3c9\uade0\uad6c\ub9e4\uac00\uaca9 = f\n\nf = X_train.\uad6c\ub9e4\uac74\uc218.where(X_train.\uad6c\ub9e4\uac74\uc218>=0, other=0)\nf = np.log(f+1)\nX_train.\uad6c\ub9e4\uac74\uc218 = f\n\nf = X_test.\uad6c\ub9e4\uac74\uc218.where(X_test.\uad6c\ub9e4\uac74\uc218>=0, other=0)\nf = np.log(f+1)\nX_test.\uad6c\ub9e4\uac74\uc218 = f\n\nf = X_train.\ub0b4\uc810\uc77c\uc218.where(X_train.\ub0b4\uc810\uc77c\uc218>=0, other=0)\nf = np.log(f+1)\nX_train.\ub0b4\uc810\uc77c\uc218 = f\n\nf = X_test.\ub0b4\uc810\uc77c\uc218.where(X_test.\ub0b4\uc810\uc77c\uc218>=0, other=0)\nf = np.log(f+1)\nX_test.\ub0b4\uc810\uc77c\uc218 = f\n\n\nf = X_train.\uc2e4\uc81c\uad6c\ub9e4\uae08\uc561\ud3c9\uade0.where(X_train.\uc2e4\uc81c\uad6c\ub9e4\uae08\uc561\ud3c9\uade0>=0, other=0)\nf = np.log(f+1)\nX_train.\uc2e4\uc81c\uad6c\ub9e4\uae08\uc561\ud3c9\uade0 = f\n\nf = X_test.\uc2e4\uc81c\uad6c\ub9e4\uae08\uc561\ud3c9\uade0.where(X_test.\uc2e4\uc81c\uad6c\ub9e4\uae08\uc561\ud3c9\uade0>=0, other=0)\nf = np.log(f+1)\nX_test.\uc2e4\uc81c\uad6c\ub9e4\uae08\uc561\ud3c9\uade0 = f\n\nf = X_train.\uc2e4\uc81c\uad6c\ub9e4\uae08\uc561.where(X_train.\uc2e4\uc81c\uad6c\ub9e4\uae08\uc561>=0, other=0)\nf = np.log(f+1)\nX_train.\uc2e4\uc81c\uad6c\ub9e4\uae08\uc561 = f\n\nf = X_test.\uc2e4\uc81c\uad6c\ub9e4\uae08\uc561.where(X_test.\uc2e4\uc81c\uad6c\ub9e4\uae08\uc561>=0, other=0)\nf = np.log(f+1)\nX_test.\uc2e4\uc81c\uad6c\ub9e4\uae08\uc561 = f\n","0acef0df":"IDtest = X_test.custid;\nX_train.drop(['custid'], axis=1, inplace=True)\nX_test.drop(['custid'], axis=1, inplace=True)\ny_train = pd.read_csv('..\/input\/y_train.csv').gender","0204c815":"X_test.info()","c2844760":"from sklearn.model_selection import cross_val_score\nfrom sklearn.ensemble import GradientBoostingClassifier\ngbc = GradientBoostingClassifier(random_state=2)\nscore = cross_val_score(gbc, X_train, y_train, cv=5, scoring='roc_auc')\nprint('{}\\nmean = {:.5f}\\nstd = {:.5f}'.format(score, score.mean(), score.std()))","feee131c":"from xgboost import XGBClassifier\nparameters = {'xgb__max_depth': 14, 'xgb__subsample': 0.4}\nclf = XGBClassifier(**parameters, random_state=0, n_jobs=-1)\nscore = cross_val_score(clf, X_train, y_train, cv=5, scoring='roc_auc')\nprint('{}\\nmean = {:.5f}\\nstd = {:.5f}'.format(score, score.mean(), score.std()))","16eb5b8f":"from sklearn.ensemble import VotingClassifier\nvotingC = VotingClassifier(estimators=[('gbc', gbc),('clf', clf)], voting='soft')\nscore = cross_val_score(votingC, X_train, y_train, cv=5, scoring='roc_auc')\nprint('{}\\nmean = {:.5f}\\nstd = {:.5f}'.format(score, score.mean(), score.std()))","0cb29d8a":"pred = votingC.fit(X_train, y_train).predict_proba(X_test)[:,1]\nfname = 'submission1130.csv'\nsubmissions = pd.concat([IDtest, pd.Series(pred, name=\"gender\")] ,axis=1)\nsubmissions.to_csv(fname, index=False)\nprint(\"'{}' is ready to submit.\" .format(fname))","6cdc0236":"**[\ud30c\uc0dd\ubcc0\uc218]** \uad6c\ub9e4\uc0c1\ud488 \ub2e4\uc591\uc131: `\uad6c\ub9e4\ud55c \uc11c\ub85c\ub2e4\ub978 \ube0c\ub79c\ub4dc \uc218`","5b56d68b":" *\ud30c\uc0dd\ubcc0\uc218\ub97c \ub9cc\ub4e4\uae30 \uc704\ud55c \ud559\uc2b5\uc6a9\uacfc \uc81c\ucd9c\uc6a9 \uc0c1\ud488\ud310\ub9e4 \ub370\uc774\ud130\ub97c \uc77d\uace0 \ud558\ub098\ub85c \ud569\uce5c\ub2e4.*","c7a5140e":"**[\ud30c\uc0dd\ubcc0\uc218]** \uacc4\uc808\ubcc4 \uad6c\ub9e4\uac74\uc218:  2,3,4\uc6d4\/ 5,6,7\uc6d4 \/ 8,9,10\uc6d4 \/ 11,12,1\uc6d4 - \uc77c\ubc18\uc801\uc778 \ubd84\uae30\ubcf4\ub2e4 1\uac1c\uc6d4 \ub2f9\uae40","8d5a5f6e":"**[\ud30c\uc0dd\ubcc0\uc218]** \uad6c\ub9e4 \ud30c\ud2b8 \ubcc0\uc218\uc758 \uac01 \ud30c\ud2b8\uc758 \ube48\ub3c4\uac12 \ub3c4\ucd9c","b330622b":"**[\ud30c\uc0dd\ubcc0\uc218]** \uc2dc\uac04\ub300\ubcc4 \uad6c\ub9e4\uac74\uc218: 12\uc2dc \uc774\uc804 \/ 12~2\uc2dc \/ 2~5\uc2dc \/ 5~6\uc2dc \/ 6\uc2dc \uc774\ud6c4","bca13868":"## Step 1) Make features ## \n- \uc0c1\ud488\ud310\ub9e4 \ub370\uc774\ud130\ub85c\ubd80\ud130 \uc801\uc808\ud55c \ud30c\uc0dd\ubcc0\uc218(feature)\ub97c \ub9cc\ub4e0 \ud6c4 \ud559\uc2b5\uc6a9(`X_train`)\uacfc \ud3c9\uac00\uc6a9(`X_test`)\uc73c\ub85c \ub098\ub204\uc5b4 \uc800\uc7a5\ud55c\ub2e4.\n- scikit-learn\uc5d0\uc11c\ub294 categorical feature\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc5c6\uae30 \ub54c\ubb38\uc5d0 One-hot-encoding\uc744 \ud1b5\ud574 numeric feature\ub85c \ubcc0\uacbd\ud574\uc57c \ud55c\ub2e4.","85fc8cdc":"**[\ud30c\uc0dd\ubcc0\uc218]** \uc694\uc77c \uad6c\ub9e4\ud328\ud134 with `\uc8fc\ub9d0\ubc29\ubb38\ube44\uc728`","d8b35b44":"**[\ud30c\uc0dd\ubcc0\uc218]** \uc2e4\uc81c\uad6c\ub9e4\uae08\uc561\ud3c9\uade0","b76276c0":"**[\ud30c\uc0dd\ubcc0\uc218]** \uad6c\uc785 \uc9c0\uc810 \ube48\ub3c4\uac12 \ub3c4\ucd9c","2adc5624":"**[\ud30c\uc0dd\ubcc0\uc218]** \uc694\uc77c\ubcc4 \uad6c\ub9e4\uac74\uc218 - \uc694\uc77c\uc744 \uc0c8\ub85c\uc6b4 \uae30\uc900\uc73c\ub85c \uad6c\ubd84\ud574\ubd04","6e64dcab":"**[\ud30c\uc0dd\ubcc0\uc218]** \ucd1d \uad6c\ub9e4\uc561","b24e755d":"<font color='green'>\n### Categorical Features","11b0679b":"**[\ud30c\uc0dd\ubcc0\uc218]** \ud3c9\uade0\ud560\uc778\uae08\uc561","8176c79a":"**[\ud30c\uc0dd\ubcc0\uc218]** \uc218\uc785\uc0c1\ud488 \uad6c\ub9e4\ube44\uc728: `\uc218\uc785\uc0c1\ud488 \uad6c\ub9e4\uac74\uc218` \/ `\ucd1d \uad6c\ub9e4\uac74\uc218`","7a0a8a3f":"**[\ud30c\uc0dd\ubcc0\uc218]** \uad6c\ub9e4\uac74\uc218","71d4d29a":"**[\ud30c\uc0dd\ubcc0\uc218]** \ud3c9\uade0 \ud560\ubd80\uac1c\uc6d4\uc218","9f8aca81":"<font color='green'>\n### Numeric Features","42dbafe4":"**[\ud30c\uc0dd\ubcc0\uc218]** \ub0b4\uc810\uc77c\uc218","e81ed939":"<br><br>\n*\uc544\ub798 \ucf54\ub4dc\ub97c \uc218\ud589\ud558\uba74 \uc0dd\uc131\ud55c \ubaa8\ub4e0 \ud30c\uc0dd\ubcc0\uc218\uac00 \ubcd1\ud569\ub418\uace0 \ud559\uc2b5\uc6a9\uacfc \ud3c9\uac00\uc6a9\uc73c\ub85c \ub098\ub258\uc5b4\uc9c4\ub2e4.*","cdef52c1":"**[\ub85c\uadf8\uce58\ud658]** \uce58\uc6b0\uce5c \ub370\uc774\ud0c0 \ub85c\uadf8\uce58\ud658\ud558\uae30","ee13d872":"**[\ud30c\uc0dd\ubcc0\uc218]** \uc131\ubcc4 \uad6c\uc785\uac74\uc218\uac00 \ub9ce\uc740 \ud30c\ud2b8 \ubb36\uc5b4\uc8fc\uae30","91f418e0":"*\ud30c\uc0dd\ubcc0\uc218\ub97c \uc800\uc7a5\ud560 \ube48 \ub9ac\uc2a4\ud2b8\ub97c \ub9cc\ub4e0\ub2e4.*","5c0efd27":"## Step 2) Evaluate performance ##\n- Step 1)\uc5d0\uc11c \uc0dd\uc131\ud55c `X_train`\uacfc `X_test`\ub97c \uc774\uc6a9\ud558\uc5ec \uc544\ub798 \ucf54\ub4dc\ub97c \uc2e4\ud589\ud55c \ud6c4 \ubaa8\ud615\uc131\ub2a5\uc744 \ud655\uc778\ud55c\ub2e4.\n  - [5-fold cross validation](http:\/\/scikit-learn.org\/stable\/modules\/cross_validation.html)\uc744 \uc218\ud589\ud55c \ud6c4 \ubaa8\ud615\uc131\ub2a5\uc758 \ud3c9\uade0 \uac12\uacfc \ud45c\uc900\ud3b8\ucc28 \ub4f1\uc744 \ucd9c\ub825\ud55c\ub2e4.\n  - \ubaa8\ud615\uc131\ub2a5\uc740 [ROC-AUC](http:\/\/scikit-learn.org\/stable\/auto_examples\/model_selection\/plot_roc.html#sphx-glr-auto-examples-model-selection-plot-roc-py)\ub85c \uce21\uc815\ud558\uba70, \uac12\uc774 \ub192\uc744\uc218\ub85d \uc131\ub2a5\uc774 \uc88b\uc740 \ubaa8\ub378\uc774\ub2e4. (*0 <= ROC-AUC <=1*)\n- \uc2e4\ud589 \ud6c4 \uc0dd\uc131\ub418\ub294 `submissions.csv`\ub97c Kaggle\uc5d0 \uc81c\ucd9c\ud558\uc5ec \"public leaderboard\"\uc5d0\uc11c \ubcf8\uc778\uc758 Score(ROC-AUC)\uc640 \ub4f1\uc218\ub97c \ud655\uc778\ud55c\ub2e4. ","e4cf7e45":"**[\ud30c\uc0dd\ubcc0\uc218]** \ub3d9\uc77c \uad6c\uc785\ud30c\ud2b8 \ud569\uccd0\uc90c","87c43f58":"**[\ud30c\uc0dd\ubcc0\uc218]** \uc2e4\uc81c \uad6c\ub9e4\uae08\uc561","90104555":"**[\ud30c\uc0dd\ubcc0\uc218]** \ud3c9\uade0 \uad6c\ub9e4\uac00\uaca9","5a0e6bad":"**[\ud30c\uc0dd\ubcc0\uc218]** \ud3c9\uade0\ud560\uc778\uc728 \uc0b0\ucd9c","824bfc1d":"**[\ud30c\uc0dd\ubcc0\uc218]** \uc774\uc6a9\uc9c0\uc810 \ub2e4\uc591\uc131: `\uc774\uc6a9\ud55c \uc11c\ub85c\ub2e4\ub978 \ub9e4\uc7a5 \uc218`","665c9fd7":"**[\ud30c\uc0dd\ubcc0\uc218]** \uad6c\ub9e4\uc81c\ud488 \ubcc0\uc218\uc758 \uac01 \ud30c\ud2b8\uc758 \ube48\ub3c4\uac12 \ub3c4\ucd9c","bfcc5362":"**[\ud30c\uc0dd\ubcc0\uc218]** \uc8fc\ub9d0 \uc694\uc77c\ubcc4 \uad6c\ub9e4\ube44\uc728","b9aa0a6d":"**[\ud30c\uc0dd\ubcc0\uc218]** \ud3c9\uade0\uad6c\ub9e4\uc2dc\uac04"}}