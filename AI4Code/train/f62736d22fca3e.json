{"cell_type":{"d27b3e4a":"code","d33fcbcf":"code","6f0245ff":"code","c9b5a380":"code","add9128a":"code","88cb0377":"code","5187530e":"code","f1150e1d":"code","fec06164":"code","dcd86c63":"code","93caebb1":"code","c5255ce4":"code","3f918e1c":"code","85f663f6":"code","8a65dd51":"code","0f0ca268":"code","a1a4fc10":"code","eafb450e":"code","f52b2908":"code","ef095792":"code","4e03b3b2":"code","d5fc21c4":"code","d3a41ad3":"code","ad735e78":"code","8bfb4753":"code","8790ed94":"code","9810f06c":"code","69497398":"code","6697ee37":"code","05a15ee8":"code","cce9f47f":"code","1a736589":"code","faf48369":"code","bfcdc178":"code","7e2b481a":"code","8cc55b01":"code","e08601a8":"code","51ecb967":"code","205ca052":"markdown","77e3485e":"markdown","fe6e5ce3":"markdown","78e08d0c":"markdown","ad832d4d":"markdown","a9739d69":"markdown"},"source":{"d27b3e4a":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn import preprocessing\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nprint(\"setup complete\")","d33fcbcf":"data = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')","6f0245ff":"X_test = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","c9b5a380":"pd.set_option('display.max_columns', None)\n#pd.set_option('display.max_rows', None)","add9128a":"data.head(5)","88cb0377":"corr = data.corr()\ncorr = corr.loc[:,['SalePrice']].sort_values(by = ['SalePrice'],ascending = False)\ncorr = corr[1:]\nremove_less_corr_columns = corr.loc[corr['SalePrice'] < 0.30]\nremove_less_corr_columns\ndata.drop(remove_less_corr_columns.index,axis = 1,inplace = True)\nX_test.drop(remove_less_corr_columns.index,axis = 1,inplace = True)","5187530e":"plt.figure(figsize = (15,15))\ng= sns.barplot(x = corr.index,y = corr['SalePrice'])\ng.set_xticklabels(g.get_xticklabels(),rotation = 90)\ng.set_ylabel('Correlation with SalePrice')\ng.set_xlabel('Column Names')\ng.set_ylim(-0.30, 1)","f1150e1d":"null_values_col = data.isnull().sum()\nnull_values_col = null_values_col.loc[null_values_col > 0]\ndtyes = [data[d].dtype for d in null_values_col.index]\nnull_values_col = null_values_col.reset_index()\nnull_values_col['dtypes'] = dtyes\nnull_values_col.columns = ['Column Name','Number of Missing Values','Data Type']\ntotal_missing = null_values_col['Number of Missing Values'].sum()\nnull_values_col['% Missing'] = null_values_col['Number of Missing Values'].apply(lambda x: ((x\/total_missing)*100)).round(2)\nnull_values_col.set_index(['Column Name'],inplace = True)","fec06164":"null_values_col","dcd86c63":"cat_columns = [col for col in data.columns if data[col].dtype=='object']\ncat_columns = pd.DataFrame(cat_columns)\ncat_columns.rename(columns = {0:'Column Name'},inplace = True)\ncat_columns.set_index(['Column Name'],inplace = True)\ncat_col_unique_values = [data[col].nunique() for col in cat_columns.index] \ncat_columns['Number of unique values'] = cat_col_unique_values\ncat_columns_values = {}\nfor col in cat_columns.index:\n    cat_columns_values[col] = data[col].unique()\ncat_columns['Values'] = cat_columns_values.values()","93caebb1":"plt.figure(figsize = (15,10))\nbarplotdata = data.groupby(['Neighborhood'])['SalePrice'].count()\nq = sns.barplot(x = barplotdata.index,y = barplotdata)\nq.set_xticklabels(q.get_xticklabels(),rotation = 90)","c5255ce4":"salespricelabels = ['100k','150k','200k','350k','400k','450k','500k','550k','600k','650k','700k','750k','800k']\nfor i,col in enumerate(cat_columns.index):\n    p = sns.boxplot(x = col,y='SalePrice', data = data)\n    p.set_yticklabels(salespricelabels)\n    p.set_xticklabels(p.get_xticklabels(),rotation = 45)\n    p.set_title(col + ' vs SalePrice')\n    plt.show()","3f918e1c":"fig,ax = plt.subplots(nrows = 2,ncols = 2,figsize = (15,8))\nsns.stripplot(x = 'HouseStyle',y = 'SalePrice', data = data,jitter = False,ax = ax[0][0])\nax[0][0].set_xticklabels(ax[0][0].get_xticklabels(),rotation = 45)\nax[0][0].set_title('House Style vs SalePrice')\nsns.boxplot(x = 'Neighborhood',y = 'SalePrice',data = data, ax = ax[0][1])\nax[0][1].set_xticklabels(ax[0][1].get_xticklabels(),rotation = 90)\nax[0][1].set_title('Neighborhood vs SalePrice')\nsns.barplot(x = barplotdata.index,y = barplotdata,ax = ax[1][0],fc = 'cyan',ec = 'k')\nax[1][0].set_xticklabels(ax[1][0].get_xticklabels(),rotation = 90)\nax[1][0].set_title('Number of houses sold by neighborhood')\nax[1][0].set_ylabel(\"Number of houses sold\")\nsns.stripplot(x = 'Foundation',y = 'SalePrice',data = data,jitter = False,ax = ax[1][1])\nax[1][1].set_xticklabels(ax[1][1].get_xticklabels(),rotation = 90)\nax[1][1].set_title('Foundation vs SalePrice')\nfig.tight_layout()","85f663f6":"plt.figure(figsize = (15,15))\nsns.distplot(a = data['YearBuilt'],kde = True,\n             hist_kws = {\"histtype\" : \"barstacked\",\"fc\":\"red\"},\n              kde_kws = {'cut':0}\n            )","8a65dd51":"plt.figure(figsize = (15,15))\nsns.distplot(a = data['LotFrontage'],kde = True,\n             hist_kws = {\"histtype\" : \"barstacked\",\"fc\":\"k\"},\n              kde_kws = {'cut':0}\n            )\n","0f0ca268":"y_data = data['SalePrice']\ndata.drop('SalePrice',axis = 1,inplace = True)","a1a4fc10":"X_train, X_valid, y_train, y_valid = train_test_split(data,y_data, train_size=0.8, test_size=0.2,\n                                                      random_state=0)","eafb450e":"int_columns = [col for col in data.columns if (data[col].dtype=='int64' or data[col].dtype=='float64')]","f52b2908":"se = SimpleImputer(strategy = 'mean')\nX_train_int_imp = X_train\nX_valid_int_imp = X_valid\nX_test_int_imp = X_test\nX_train_int_imp[int_columns] = se.fit_transform(X_train[int_columns])\nX_valid_int_imp[int_columns] = se.transform(X_valid[int_columns])\nX_test_int_imp[int_columns] = se.transform(X_test[int_columns])\nX_train_int_imp.columns = X_train.columns\nX_valid_int_imp.columns = X_train.columns\nX_test_int_imp.columns = X_train.columns","ef095792":"se = SimpleImputer(strategy = 'most_frequent')\nX_train_cat_imp = X_train_int_imp\nX_valid_cat_imp = X_valid_int_imp\nX_test_cat_imp = X_test_int_imp\nX_train_cat_imp[cat_columns.index] = se.fit_transform(X_train[cat_columns.index])\nX_valid_cat_imp[cat_columns.index] = se.transform(X_valid[cat_columns.index])\nX_test_cat_imp[cat_columns.index] = se.transform(X_test[cat_columns.index])","4e03b3b2":"X_train_cat_imp.columns = X_train.columns\nX_valid_cat_imp.columns = X_train.columns\nX_test_cat_imp.columns = X_train.columns","d5fc21c4":"scaler = StandardScaler()\nX_train_scale = X_train_cat_imp\nX_valid_scale = X_valid_cat_imp\nX_test_scale = X_test_cat_imp\nX_train_scale[int_columns] = scaler.fit_transform(X_train_cat_imp[int_columns])\nX_valid_scale[int_columns] = scaler.transform(X_valid_cat_imp[int_columns])\nX_test_scale[int_columns] = scaler.transform(X_test_cat_imp[int_columns])","d3a41ad3":"cat_columns","ad735e78":"cat_cardinality_less_10 = cat_columns.loc[cat_columns['Number of unique values'] <= 10]\ncat_cardinality_less_10","8bfb4753":"OHE = OneHotEncoder(handle_unknown = 'ignore',sparse = False)\nX_train_OHE = pd.DataFrame(OHE.fit_transform(X_train_scale[cat_cardinality_less_10.index]))\nX_valid_OHE = pd.DataFrame(OHE.transform(X_valid_scale[cat_cardinality_less_10.index]))\nX_test_OHE = pd.DataFrame(OHE.transform(X_test_scale[cat_cardinality_less_10.index]))\n\nX_train_OHE.index = X_train_scale.index\nX_valid_OHE.index = X_valid_scale.index\nX_test_OHE.index = X_test_scale.index\n\nX_train_del = X_train_scale.drop(cat_cardinality_less_10.index,axis = 1)\nX_valid_del = X_valid_scale.drop(cat_cardinality_less_10.index,axis = 1)\nX_test_del = X_test_scale.drop(cat_cardinality_less_10.index,axis = 1)\n\n\nX_train_total_OHE = pd.concat([X_train_del,X_train_OHE],axis= 1)\nX_valid_total_OHE = pd.concat([X_valid_del,X_valid_OHE],axis = 1)\nX_test_total_OHE = pd.concat([X_test_del,X_test_OHE],axis = 1)","8790ed94":"cardinality_col_more_10 = list(set(cat_columns.index)- set(cat_cardinality_less_10.index))\ncardinality_col_more_10","9810f06c":"le = LabelEncoder()\nfinal_X_train = X_train_total_OHE\nfinal_X_valid = X_valid_total_OHE\nfinal_X_test = X_test_total_OHE\n\nfor col in cardinality_col_more_10:\n    final_X_train[col] = le.fit_transform(X_train_total_OHE[col])\n    final_X_valid[col] = X_valid_total_OHE[col].map(lambda s: 'other' if s not in le.classes_ else s)\n    le.classes_ = np.append(le.classes_, 'other')\n    final_X_valid[col] = le.transform(X_valid_total_OHE[col])\n    final_X_test[col] =  le.transform(X_test_total_OHE[col])","69497398":"print(final_X_train.shape)\nprint(final_X_valid.shape)\nprint(final_X_test.shape)","6697ee37":"model = RandomForestRegressor(n_estimators = 500,random_state=0)","05a15ee8":"model.fit(final_X_train,y_train)","cce9f47f":"preds = model.predict(final_X_valid)","1a736589":"from sklearn.metrics import mean_absolute_error\nscore = mean_absolute_error(y_valid,preds)\nscore","faf48369":"from xgboost import XGBRegressor\nmodel2 = XGBRegressor(n_estimators = 500)\nmodel2.fit(final_X_train,y_train)\npreds2 = model2.predict(final_X_valid)\nscore2 = mean_absolute_error(y_valid,preds2)","bfcdc178":"score2","7e2b481a":"results_on_test = model.predict(final_X_test)","8cc55b01":"test_id = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","e08601a8":"finalresult = pd.DataFrame()\nfinalresult['Id'] = test_id['Id']\nfinalresult['SalePrice'] = results_on_test\nfinalresult.to_csv(\"FinalPredictions.csv\",index = False)","51ecb967":"finalresult.head()","205ca052":"Removing columns with correlation less than 0.30","77e3485e":"ONE HOT ENCODING columns with cardinality less than of equal to 10","fe6e5ce3":"Label Encoding Columns with cardinality more than 10","78e08d0c":"Categorical Columns and Integer\/Float columns. This will be useful for performing imputation. ","ad832d4d":"Imputing categorical columns in train test and valid","a9739d69":"Imputing integer columns in train test and valid"}}