{"cell_type":{"cd1c8a24":"code","3235b4e3":"code","70a90163":"code","6dc3bee1":"code","5bd0c77d":"code","92932585":"code","c23e1d91":"code","b69af027":"code","02d78d3f":"markdown","7fe1d6ea":"markdown","6e617e67":"markdown","9ba431f6":"markdown","ec576f2f":"markdown","eee40d06":"markdown","2f2b11aa":"markdown"},"source":{"cd1c8a24":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3235b4e3":"datadir = Path(\"..\/input\/a-large-scale-fish-dataset\/Fish_Dataset\/Fish_Dataset\")\nfiledir = list(datadir.glob(r\"**\/*.png\"))\nlabels = list(map(lambda x: os.path.split(os.path.split(x)[0])[1],filedir))\nfiledir = pd.Series(filedir).astype(str)\nlabels = pd.Series(labels)\ndf = pd.concat([filedir,labels],axis=1)\ndf.columns = ['image', 'label']\ndf = df[df[\"label\"].apply(lambda x: x[-2:] != \"GT\")].reset_index(drop=True)\nx_interim, val = train_test_split(df, test_size=0.2, random_state=42, shuffle=True) \nx_train, x_test = train_test_split(x_interim, test_size=0.2, random_state=52) \nval1 = val.copy()\nprint(df.image.shape)","70a90163":"img_gen = ImageDataGenerator(preprocessing_function=tf.keras.applications.mobilenet_v2.preprocess_input)\nx_train = img_gen.flow_from_dataframe(dataframe=x_train,x_col='image',y_col='label',target_size=(224, 224),color_mode='rgb',class_mode='categorical',batch_size=32,shuffle=False)\nx_test = img_gen.flow_from_dataframe(dataframe=x_test,x_col='image',y_col='label',target_size=(224, 224),color_mode='rgb',class_mode='categorical',batch_size=32,shuffle=False)\nval = img_gen.flow_from_dataframe(dataframe=val,x_col='image',y_col='label',target_size=(224, 224),color_mode='rgb',class_mode='categorical',batch_size=32,shuffle=False)","6dc3bee1":"model = Sequential()\nmodel.add(Conv2D(35, kernel_size=(3, 3), activation='relu', input_shape=(224,224, 3)))\nmodel.add(Conv2D(65, kernel_size=(3, 3), activation='relu')) \nmodel.add(MaxPooling2D(pool_size=(2, 2))) \nmodel.add(Conv2D(65, kernel_size=(3, 3), activation='relu')) \nmodel.add(Dense(130, activation='relu'))\nmodel.add(Dropout(0.25))\nmodel.add(Flatten(input_shape=())) \nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dropout(0.25))\nmodel.add(Dense(9,activation=\"softmax\",name='preds'))\nmodel.summary()","5bd0c77d":"model.compile(optimizer=\"Adam\",loss=\"categorical_crossentropy\",metrics=[\"accuracy\"])\nhist = model.fit(x_train,validation_data = x_test,epochs = 5)","92932585":"score = model.evaluate(val, verbose=0)\nprint(score[0])\nprint(score[1])","c23e1d91":"eval_score = model.evaluate(val,verbose=0)\npretrained_cnn_history = hist\nfig = plt.figure(1)\nplt.subplot(211)\nplt.plot(pretrained_cnn_history.history['val_accuracy'])\nplt.title('val acc & loss')\nplt.ylabel('Acc')\nplt.subplot(212)\nplt.plot(pretrained_cnn_history.history['val_loss'], 'r')\nplt.xlabel('Epoch')\nplt.ylabel('Loss value');","b69af027":"pred = model.predict(val)\npred = np.argmax(pred,axis=1)\nl2 = (x_train.class_indices)\nl2 = dict((v,k) for k,v in l2.items())\npred2 = [l2[k] for k in pred]\ny_val = val1.label\nprint(classification_report(y_val, pred2))","02d78d3f":"1) Sorting the dataset into images and labels, which will be fed into the model. 2) Using the Path and split function to scan the entire directory and getting labels from them","7fe1d6ea":"Dividing data into training and testing. Setting mode to 'categorical' so that the model uses multiple classes instead of binar","6e617e67":"Plotting and visualizing accuracy with change in epoch","9ba431f6":"The model: most fun part of the entire code :) I've added activation softmax in the end, since it usually goes well in the output layer Also printing the model's shape","ec576f2f":"Using the Adam Optimizer, categorical corssentropy loss function, and accuracy as the metric. I have used 5 epochs since it gave the highest accuracy and the model overfitted once trained with 6 epochs. Sometimes, the model overfits even with 5 epochs so in that case we will have to use 3 epochs","eee40d06":"Getting precision, recall, and F1 for all the predictions and actual labels. I think a really great outcome","2f2b11aa":"printing Test loss (score[0]) and testing accuracy (score[1])"}}