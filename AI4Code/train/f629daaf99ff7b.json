{"cell_type":{"51389dfa":"code","605aaf03":"code","9607bb5d":"code","a66fc587":"code","3b6791d6":"code","10f9cefb":"code","49862793":"code","b0218942":"code","c0102db6":"code","f20a85d8":"code","7f99ba37":"code","9b92d8a6":"code","d2084d2b":"code","bca0a233":"code","b7398c66":"code","c21839c5":"code","c5323112":"code","5f108fe6":"code","be7c033b":"code","8e7b92d6":"code","2277b746":"code","9bcf78a6":"code","1be06064":"code","46a643a8":"code","4b7b4365":"code","b61d449d":"code","42b5add1":"code","c4a4c304":"code","09bd2a28":"code","900bf5a1":"code","7e8a82ec":"code","02760309":"code","17083692":"code","32b1515e":"code","9853f798":"code","fd98a5c7":"code","ea2e25db":"code","67f455e3":"markdown","13989ade":"markdown","ba299b81":"markdown","46e728d2":"markdown","248b0261":"markdown","267406aa":"markdown","8dc7b548":"markdown","62ae6385":"markdown","596b660b":"markdown","bd9faf76":"markdown","25df3995":"markdown","a7e4ac74":"markdown","7118fe05":"markdown","e61671a1":"markdown","92f0a4b7":"markdown","14633cce":"markdown","d9dc5d75":"markdown","d0e18ce7":"markdown","afe417bc":"markdown","51525705":"markdown","3b7dfc86":"markdown","ddcbcc6b":"markdown","e144200e":"markdown","bcf7bd2e":"markdown","adfbc941":"markdown","66950bed":"markdown","d03dd4ad":"markdown","55c2bb7e":"markdown","0e35308f":"markdown","0a341f8d":"markdown","001f4fba":"markdown","bd5dcec8":"markdown","197531ab":"markdown","23a2da52":"markdown","9798b650":"markdown","14f58796":"markdown"},"source":{"51389dfa":"import pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport matplotlib\nimport seaborn as sns\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\nwarnings.simplefilter(action='ignore', category=UserWarning)\nsns.set(style=\"white\")\n\n\nimport plotly\nimport plotly.express as px\n\nimport geopandas as gpd\n\nfrom plotly.offline import plot, iplot, init_notebook_mode\ninit_notebook_mode(connected=True)\n\n\ndf = pd.read_csv(\n    \n    '..\/input\/world-cities-average-internet-prices-2010-2020\/cities_internet_prices_historical.24-10-2021.csv'\n)","605aaf03":"df.head()","9607bb5d":"df.tail()","a66fc587":"df.isnull().sum()","3b6791d6":"df.replace(0., np.nan, inplace=True)\ndf.isnull().sum()","10f9cefb":"new_columns = list(df.columns[:3])\nfor column in df.columns[3:]:\n    new_columns.append('price_in_' + column[-4:])\n\ndf.columns = new_columns","49862793":"df.sample()","b0218942":"from typing import List\n\ndef percentage_nan_numeric(data_frame=df):\n    \"\"\"This function takes pandas DataFrame by default it's df,\n    it returns percentile of null values in every numeric column\"\"\"\n    \n    numeric_columns = df.select_dtypes(include=[np.number])\n    \n    total_rows:int = numeric_columns.shape[0]\n    \n    numeric_columns_null_values:List[int] = numeric_columns.isnull().sum().to_dict()\n    \n    for column, null_values in numeric_columns_null_values.items():\n        print(f'Percentage of null values {column} : {round((null_values \/ total_rows) * 100)}%' )\n    ","c0102db6":"percentage_nan_numeric()","f20a85d8":"def inpute_means(data_frame=df):\n    \n    \"\"\"takes one kwarg data_frame by default it's df \n    returns new data frame with null values filled with means\"\"\"\n    \n    not_numeric = df.select_dtypes(exclude=[np.number])\n    numeric = df.select_dtypes(include=[np.number])\n    \n    for column in numeric:\n        numeric[column].fillna(np.mean(df[column]), inplace=True)\n        \n    return pd.concat([not_numeric, numeric], axis=1) # connecting not numeric coulumns with numeric","7f99ba37":"df_copy = df # setting the copy of the old data frame\ndf = inpute_means()","9b92d8a6":"df.describe()","d2084d2b":"def plot_histogram(column_name, data_frame=df):\n    \n    \"\"\"arguments: column_name:str - name of the column to be ploted\n       returns: histogram object\n    \"\"\"\n    \n    #  in case when column is not in data frame\n    if column_name not in data_frame.columns:\n        raise ValueError(f'Chose correct column from data frame colums: {data_frame.columns}')\n        \n    fig = px.histogram(data_frame=data_frame.sort_values(by=column_name), x=column_name,\n                       color_discrete_sequence=['blue'])\n    \n    \n    fig.update_layout(font=dict(family='Lato', size=16), \n                      title=dict(text=f'<b>histogram - {column_name}<b>',\n                                font=dict(size=24),\n                                x=.5),\n                     plot_bgcolor='lightblue',\n                     paper_bgcolor='lightblue',\n                     xaxis=dict(showgrid=False),\n                     yaxis=dict(showgrid=False))\n    \n    fig.show()","bca0a233":"numeric_columns = df.select_dtypes(include=[np.number])\n\nfor column in numeric_columns:\n    plot_histogram(column)","b7398c66":"columns_to_drop = []\n\nfor x in range(2010, 2016):\n    column_name:str = 'price_in_' + str(x)\n    columns_to_drop.append(column_name)\n    \ncolumns_to_drop","c21839c5":"df.drop(columns=columns_to_drop, inplace=True)","c5323112":"internet_prices = (\n       df[\n    (df['price_in_2016'] < 80) \n    & (df['price_in_2017'] < 80)\n    & (df['price_in_2018'] < 80) \n    & (df['price_in_2019'] < 80) \n    & (df['price_in_2020'] < 80)]\n   )","5f108fe6":"numeric_columns = internet_prices.select_dtypes(include=[np.number])\n\nfor column in numeric_columns:\n    plot_histogram(column, data_frame=numeric_columns)","be7c033b":"def bar_plot(column_name, data_frame=df, tribe='value_counts', by=None, limit=3, \n             ascending=False,**kwargs):\n    \n    \"\"\"arguments:\n    column_name:str name of column from pandas data drame\n    data_frame:pandas data frame default df\n    tribe:str value counts by default, change to 'sort' if you want to have\n    values in decreasing order\n    by:str works only if sort tribe chosed, takes name of the column\n        you want to sort values by\"\n    limit:int limit of values displayed\"\"\"\n    \n    \n    # if column is not str type or column not in columns of data frame\n    if type(column_name) != str or column_name not in data_frame.columns:\n        raise ValueError('Incorect column name or type')\n        \n    if type(limit) != int:\n        raise ValueErroc(f'excepted int type, got {type(limit)}')\n    \n    \n    # sorted data frame\n    if tribe == 'sort' :\n        # if column is not in data frame\n        if not by or by not in data_frame.columns:\n            raise ValueError('by paramter must be column from data frame!')\n        # in case if ascending is not provided as boolean\n        if type(ascending) != bool:\n            raise ValueError(f'expected ascending paramter to be bool type got: {ascending}')\n        data = data_frame.sort_values(by=by, ascending=ascending).head(limit)\n        y = data[by].values\n        x = data[column_name]\n        title = by\n    \n    # value counts\n    elif tribe == 'value_counts':\n        data = data_frame[column_name].value_counts().head(limit)\n        x=data.index\n        y=data.values\n        title = column_name\n    \n    \n    fig = px.bar(x=x, \n                 y=y,\n            color_discrete_sequence=['mintcream']\n                )\n\n    fig.update_layout(font=dict(family='Lato', size=16), \n                  title=dict(text=f'<b>{title}<b>',\n                           font=dict(size=30), x=.5), \n                  paper_bgcolor= 'lightblue', plot_bgcolor='lightblue',\n                 xaxis=dict(title=f'', showgrid=False),\n                 yaxis=dict(title=f'count', showgrid=False))\n        \n    fig.show()","8e7b92d6":"bar_plot(column_name='City', tribe='sort', by='price_in_2016',\n        data_frame=internet_prices, limit=10, ascending=True)","2277b746":"bar_plot(column_name='City', tribe='sort', by='price_in_2016',\n        data_frame=internet_prices, limit=10)","9bcf78a6":"bar_plot(column_name='City', tribe='sort', by='price_in_2017',\n        data_frame=internet_prices, limit=10, ascending=True)","1be06064":"bar_plot(column_name='City', tribe='sort', by='price_in_2017',\n        data_frame=internet_prices, limit=10, ascending=False)","46a643a8":"bar_plot(column_name='City', tribe='sort', by='price_in_2018',\n        data_frame=internet_prices, limit=10, ascending=True)","4b7b4365":"bar_plot(column_name='City', tribe='sort', by='price_in_2018',\n        data_frame=internet_prices, limit=10)","b61d449d":"bar_plot(column_name='City', tribe='sort', by='price_in_2019',\n        data_frame=internet_prices, limit=10, ascending=True)","42b5add1":"bar_plot(column_name='City', tribe='sort', by='price_in_2019',\n        data_frame=internet_prices, limit=10)","c4a4c304":"bar_plot(column_name='City', tribe='sort', by='price_in_2020',\n        data_frame=internet_prices, limit=10, ascending=True)","09bd2a28":"bar_plot(column_name='City', tribe='sort', by='price_in_2020',\n        data_frame=internet_prices, limit=10)","900bf5a1":"world = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))","7e8a82ec":"averages_for_countries =(internet_prices[['Country', 'price_in_2016', \n                       'price_in_2017', 'price_in_2018',\n                       'price_in_2019','price_in_2020']]\n                      .groupby('Country').mean())\n\naverages_for_countries","02760309":"world.rename(columns={'name': 'Country'}, inplace=True)\n\nworld = world.merge(averages_for_countries, how='left', on='Country')","17083692":"def map_plot(column_name:str, data_frame=world):\n    \"\"\"this function takes two parameters,\n    first is column_name: str and second is data frame \n    by default it's world\n    returns: map of the world with values from column_name parameter\"\"\"\n    fig, ax = plt.subplots(figsize=(15,10))\n\n    ax.set_xticks([]) #  removing ticks\n    ax.set_yticks([])\n\n    ax.set_title(column_name, weight = 'bold', fontsize  = 20)\n    data_frame.plot(column_name,\n           legend = True, \n           ax = ax,\n           missing_kwds= {'color': 'lightgrey', 'edgecolor': 'red', 'hatch': '\/\/\/', 'label': 'No data'},\n           cmap='flare', scheme = 'quantiles',\n          legend_kwds={'loc': 'lower left'},\n)","32b1515e":"columns_to_plot = (\n                    'price_in_2016', 'price_in_2017', 'price_in_2018', \n                   'price_in_2019','price_in_2020'\n                  )","9853f798":"for column in columns_to_plot:\n    map_plot(column)","fd98a5c7":"poland = internet_prices[internet_prices['Country'] == 'Poland']","ea2e25db":"columns_to_plot = (\n                    'price_in_2016', 'price_in_2017', 'price_in_2018', \n                   'price_in_2019','price_in_2020'\n                  )\n\nfor column in columns_to_plot:\n    bar_plot('City', data_frame=poland, tribe='sort', by=column, limit=11)","67f455e3":"After handling with null values it's time to handle with outliers, i'm going to set upper bound as less than 80.","13989ade":"### WHERE INTERNET WAS THE CHEAPEST AND WHERE IT WAS THE MOST EXPENSIVE?","ba299b81":"#### CHEAPEST","46e728d2":"there are supposed to be 90 empty values in Region but it's not right, it's much much more and not only in this column.\n\n\nLet's replace 0. with Nan.","248b0261":"#### MOST EXPENSIVE","267406aa":"### 2016","8dc7b548":"### 2019","62ae6385":"### MAP","596b660b":"Basic informations:\n\n* 695 rows\n* 14 columns\n\nThis dataset contatins data about internet prices from whole world in years 2010 - 2020.\nI' m going to use this dataset to answer questions I'm interested in:\n\n* WHERE INTERNET WAS THE CHEAPEST AND WHERE IT WAS THE MOST EXPENSIVE?\n* HOW INTERNET PRICES DISTRIBUTION CHANGED OVER YEARS?\n* HOW INTERNET PRICES WAS CHANGING OVER THE YEARS IN POLAND?\n","bd9faf76":"### MOST EXPENSIVE","25df3995":"### CHEAPEST","a7e4ac74":"### 2017","7118fe05":"First thing which is visible for me is that in many columns we can see value 0. it may be a big problem which may make all further analysis unreliable","e61671a1":"Following conclusions can be drawn from the plots above:\n\n* Internet in USA and Canada is relativery expensive, the same situtation is in Australia\n* West Europe have relatively lower prices of internet than East Europe\n* in last 3 years price of internet in Russia decreased\n* Internet in Africa seems to be quite expensive but there's a lot of missing data on this continent\n* Internet price in South America seems to decrase over years\n* Internet price in Asia seems to dercrease over years as well","92f0a4b7":"At the first glance:\n\nI think that droping prices from 2010 to 2015 (inclusive) is \nnecessarily","14633cce":"### MOST EXPENSIVE","d9dc5d75":"I thought that internet price in Warsaw or Krakow will be the biggest,\nbut according to the plot above - that's not True.","d0e18ce7":"Basics informations:","afe417bc":"I need to calculate average price for every country first","51525705":"[IQR range](https:\/\/www.statisticshowto.com\/probability-and-statistics\/interquartile-range\/) - looks really bad in prices from 2010 to 2015,\n[standard deviation](https:\/\/en.wikipedia.org\/wiki\/Standard_deviation)\nis also quite alarming but this is the result of what was done before (inputing means). Droping some columns might be inevitable.","3b7dfc86":"Before analysis go any further I'm going to replace columns names.","ddcbcc6b":"### MOST EXPENSIVE","e144200e":"#### CHEAPEST","bcf7bd2e":"Null values?","adfbc941":"## 2. DATA VISUALIZATIONS","66950bed":"There's many null values in this column, but we can see pattern, with every year it's less and less.\n\nBut there's one outlier - Internet price in 2020 has 32 %, it doesn't match the pattern I described above.\n\nAnyway I'll use one method to handle with null values.\n\n* I will take mean of not null values from every column and replace null values with this mean.\n\n* good approach migth be using supervised method KNN from sklearn. More about KNN may be find in this great article: [KNN](https:\/\/towardsdatascience.com\/machine-learning-basics-with-the-k-nearest-neighbors-algorithm-6a6e71d01761) but I'll leave it only as a clue because I'm not going to use it","d03dd4ad":"#### MOST EXPENSIVE","55c2bb7e":"### 2018","0e35308f":"## 1.DATA PREPROCESSING","0a341f8d":"Now we can see how much null vales we have in real, let's see how it looks in percentages","001f4fba":"#### CHEAPEST","bd5dcec8":"### First approach - means","197531ab":"Last thing I'm going to see how internet prices changed over year in Poland.","23a2da52":"First five and last five values:","9798b650":"### 2020","14f58796":"### CHEAPEST"}}