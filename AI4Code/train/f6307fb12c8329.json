{"cell_type":{"bc0a56e8":"code","6e146b68":"code","daa602b6":"code","f4477ec0":"code","9a50ad62":"code","52a4d4cd":"code","1c79d178":"code","52cf4bd4":"markdown","93cc16b0":"markdown"},"source":{"bc0a56e8":"import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.feature_selection import VarianceThreshold\nfrom sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis\nfrom tqdm import tqdm_notebook\nimport warnings\nimport multiprocessing\nfrom scipy.optimize import minimize  \nwarnings.filterwarnings('ignore')","6e146b68":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')\n\ncols = [c for c in train.columns if c not in ['id', 'target', 'wheezy-copper-turtle-magic']]","daa602b6":"oof = np.zeros(len(train))\npreds = np.zeros(len(test))\n\nfor i in tqdm_notebook(range(512)):\n\n    train2 = train[train['wheezy-copper-turtle-magic']==i]\n    test2 = test[test['wheezy-copper-turtle-magic']==i]\n    idx1 = train2.index; idx2 = test2.index\n    train2.reset_index(drop=True,inplace=True)\n\n    data = pd.concat([pd.DataFrame(train2[cols]), pd.DataFrame(test2[cols])])\n    data2 = VarianceThreshold(threshold=2).fit_transform(data[cols])\n\n    train3 = data2[:train2.shape[0]]; test3 = data2[train2.shape[0]:]\n\n    skf = StratifiedKFold(n_splits=24, random_state=24)\n    for train_index, test_index in skf.split(train2, train2['target']):\n\n        clf = QuadraticDiscriminantAnalysis(0.5)\n        clf.fit(train3[train_index,:],train2.loc[train_index]['target'])\n        oof[idx1[test_index]] = clf.predict_proba(train3[test_index,:])[:,1]\n        preds[idx2] += clf.predict_proba(test3)[:,1] \/ skf.n_splits\n\nauc = roc_auc_score(train['target'], oof)\nprint(f'AUC: {auc:.5}')","f4477ec0":"test['target'] = preds\ntest.loc[test['target'] > 0.99, 'target'] = 1\ntest.loc[test['target'] < 0.01, 'target'] = 0","9a50ad62":"usefull_test = test[(test['target'] == 1) | (test['target'] == 0)]\nnew_train = pd.concat([train, usefull_test]).reset_index(drop=True)\nnew_train.loc[oof > 0.99, 'target'] = 1\nnew_train.loc[oof < 0.01, 'target'] = 0","52a4d4cd":"oof2 = np.zeros(len(train))\npreds2 = np.zeros(len(test))\nfor i in tqdm_notebook(range(512)):\n\n    train2 = new_train[new_train['wheezy-copper-turtle-magic']==i]\n    test2 = test[test['wheezy-copper-turtle-magic']==i]\n    idx1 = train[train['wheezy-copper-turtle-magic']==i].index; idx2 = test2.index\n    train2.reset_index(drop=True,inplace=True)\n\n    data = pd.concat([pd.DataFrame(train2[cols]), pd.DataFrame(test2[cols])])\n    data2 = StandardScaler().fit_transform(VarianceThreshold(threshold=2).fit_transform(data[cols]))\n    train3 = data2[:train2.shape[0]]; test3 = data2[train2.shape[0]:]\n\n    skf = StratifiedKFold(n_splits=24, random_state=24)\n    for train_index, test_index in skf.split(train2, train2['target']):\n        oof_test_index = [t for t in test_index if t < len(idx1)]\n        \n        clf = QuadraticDiscriminantAnalysis(0.5)\n        clf.fit(train3[train_index,:],train2.loc[train_index]['target'])\n        if len(oof_test_index) > 0:\n            oof2[idx1[oof_test_index]] = clf.predict_proba(train3[oof_test_index,:])[:,1]\n        preds2[idx2] += clf.predict_proba(test3)[:,1] \/ skf.n_splits\n        \nauc = roc_auc_score(train['target'], oof2)\nprint(f'AUC: {auc:.5}')","1c79d178":"sub = pd.read_csv('..\/input\/sample_submission.csv')\nsub['target'] = preds2\nsub.to_csv('submission.csv',index=False)","52cf4bd4":"Mhviraf's [kernel](https:\/\/www.kaggle.com\/mhviraf\/synthetic-data-for-next-instant-gratification) shows the data might be generated by using sklearn's `make_classification`\n\nUsing QDA I got a few train rows with high oof score & label 0, or low oof score & label 1.\n\nSo I change these data's target to see if it works.\n\nMost part of this notebook is taken from Roman's [kernel](https:\/\/www.kaggle.com\/nroman\/i-m-overfitting-and-i-know-it) & Chris's [kernel](https:\/\/www.kaggle.com\/cdeotte\/pseudo-labeling-qda-0-969)","93cc16b0":"It brings ~0.0002 LB boost, be careful using it still."}}