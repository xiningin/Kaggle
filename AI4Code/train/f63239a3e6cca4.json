{"cell_type":{"d4e26f43":"code","577e6069":"code","fdcdedba":"code","844b6213":"code","afd5deb1":"code","a93515d6":"code","8ad36576":"code","bcf193bb":"code","cf3387c8":"code","ace6a5fb":"code","5ab63882":"code","2cd38bc8":"code","1d82cedc":"code","1186d1ce":"code","d5268035":"code","c294dabe":"code","aaefbd62":"code","b773e2cd":"code","1430ab1c":"code","82064a6b":"code","9da3b3ee":"code","4b1718c1":"code","169c708a":"code","e2103785":"code","21ba3138":"code","5ac42aff":"code","3860ac54":"code","7c53dd3e":"code","c838b6c4":"code","5dc905c0":"code","3c97a447":"code","a61e0c25":"code","c52443e3":"markdown","9bf5fa15":"markdown","c5645f04":"markdown","9026f400":"markdown","cd60a404":"markdown","ffb8780f":"markdown","0d72503c":"markdown","8b19e25f":"markdown","25300ed9":"markdown","3f072115":"markdown","57b26c33":"markdown","6338bfa0":"markdown","06e439e0":"markdown","7bd0734c":"markdown","9db08dee":"markdown","5ea45775":"markdown","eaf7f998":"markdown","e31a9d15":"markdown","7d7b6c8d":"markdown","147d4397":"markdown","31f18301":"markdown","fd105efe":"markdown","4c15b454":"markdown","c646d1a1":"markdown","add5130b":"markdown","42510547":"markdown","19641f0a":"markdown","fe387d17":"markdown","384d1f4b":"markdown","91b088d4":"markdown"},"source":{"d4e26f43":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","577e6069":"pip install minisom","fdcdedba":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\nfrom sklearn.preprocessing import LabelEncoder, MinMaxScaler, StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score, classification_report, roc_curve, roc_auc_score\nfrom minisom import MiniSom\nfrom pylab import bone, pcolor, colorbar, plot, show\nimport re","844b6213":"train_data = pd.read_csv('\/kaggle\/input\/loan-prediction-based-on-customer-behavior\/Training Data.csv')\ntest_data = pd.read_csv('\/kaggle\/input\/loan-prediction-based-on-customer-behavior\/Test Data.csv')\nprint(\"The shape of training data is: \", train_data.shape)\nprint(\"The shape of test data is: \", test_data.shape)","afd5deb1":"print(\"Training Data\")\nprint(\"******************************\")\ndisplay(train_data.head())\nprint()\nprint(\"Test Data\")\nprint(\"******************************\")\ndisplay(test_data.head())","a93515d6":"print(\"Training Data\")\nprint(\"******************************\")\ndisplay(train_data.describe(include = 'all'))\nprint()\nprint(\"Test Data\")\nprint(\"******************************\")\ndisplay(test_data.describe(include = 'all'))","8ad36576":"print(\"Training Data\")\nprint(\"******************************\")\ndisplay(train_data.info())\nprint()\nprint(\"Test Data\")\nprint(\"******************************\")\ndisplay(test_data.info())","bcf193bb":"print(\"Training Data\")\nprint(\"******************************\")\ndisplay(train_data.isnull().sum())\nprint()\nprint(\"Test Data\")\nprint(\"******************************\")\ndisplay(test_data.isnull().sum())","cf3387c8":"fig = px.box(data_frame = train_data, y = 'Income', title = 'Box Plot for Statisctical analysis of the Income Column')\nfig.show()","ace6a5fb":"fig = px.box(data_frame = train_data, y = 'Age', title = 'Box Plot for Statisctical analysis of the Age Column')\nfig.show()","5ab63882":"train_data[\"House_Ownership\"].replace({\"rented\": \"Rented\", \"owned\": \"Owned\", \"norent_noown\": \"Neither Rent nor Own\"}, inplace=True)\nfig = go.Figure(data = [go.Pie(labels = train_data['House_Ownership'], pull=[0.05, 0])])\nfig.update_traces(hoverinfo = 'label+percent', textinfo = 'label+value', textfont_size = 15, hole = 0.4,\n                  marker = dict(line = dict(color = '#000000', width = 2)))\nfig.update_layout( title_text = \"House Ownership\")\nfig.show()","2cd38bc8":"train_data[\"Car_Ownership\"].replace({\"no\": \"No\", \"yes\": \"Yes\"}, inplace=True)\nfig = go.Figure(data = [go.Pie(labels = train_data['Car_Ownership'])])\nfig.update_traces(hoverinfo = 'label+percent', textinfo = 'label+value', textfont_size=15, hole = 0.4,\n                  marker=dict(line = dict(color = '#000000', width = 2)))\nfig.update_layout( title_text=\"Car Ownership\")\nfig.show()","1d82cedc":"train_data[\"Married\/Single\"].replace({\"single\": \"Single\", \"married\": \"Married\"}, inplace=True)\nfig = go.Figure(data = [go.Pie(labels = train_data['Married\/Single'])])\nfig.update_traces(hoverinfo = 'label+percent', textinfo = 'label+value', textfont_size=15, hole = 0.4,\n                  marker=dict(line = dict(color = '#000000', width = 2)))\nfig.update_layout( title_text=\"Maritial Status\")\nfig.show()","1186d1ce":"for i in range(0, 252000):\n    state = train_data['STATE'][i]\n    state = re.sub('_', ' ', state)\n    train_data['STATE'][i] = state\n\nfig = go.Figure(data = [go.Pie(labels = train_data['STATE'])])\nfig.update_traces(textposition='inside', hoverinfo = 'label+percent', textinfo = 'label+value', textfont_size = 15, hole = 0.4,\n                  marker = dict(line = dict(color = '#000000', width = 2)))\nfig.update_layout(title_text = \"State Analysis\", \n                  annotations=[dict(text='States', x=0.5, y=0.5, font_size=15, showarrow=False)])\nfig.show()","d5268035":"for i in range(0, 252000):\n    profession = train_data['Profession'][i]\n    profession = re.sub('_', ' ', profession)\n    train_data['Profession'][i] = profession\n\nfig = go.Figure(data = [go.Pie(labels = train_data['Profession'])])\nfig.update_traces(textposition='inside', hoverinfo = 'label+percent', textinfo = 'label+value', textfont_size = 15, hole = 0.4,\n                  marker = dict(line = dict(color = '#000000', width = 2)))\nfig.update_layout(title_text = \"Profession Analysis\", \n                  annotations=[dict(text='Professions', x=0.5, y=0.5, font_size=15, showarrow=False)])\nfig.show()","c294dabe":"train_data['Age Bins'] = ''\nfor i in range(0, 252000):\n    if train_data['Age'][i] > 15 and train_data['Age'][i] < 25:\n        train_data['Age Bins'][i] = 'Youth'\n    elif train_data['Age'][i] >= 25 and train_data['Age'][i] <= 50:\n        train_data['Age Bins'][i] = 'Adult'\n    elif train_data['Age'][i] > 50:\n        train_data['Age Bins'][i] = 'Senior'\n    else:\n         train_data['Age Bins'][i] = 'Child'\n\ndf = train_data['Age Bins'].value_counts()\nfig = go.Figure(data=[go.Bar(x = df.index, y = df.values, text = df.values)])\nfig.update_traces(marker_color='rgb(100,200,200)', marker_line_color='rgb(0,0,0)',\n                  marker_line_width=2, opacity=0.5, texttemplate = '%{text:.2s}', textposition = 'outside')\nfig.update_layout(title_text='Age Binning', uniformtext_minsize = 12, uniformtext_mode='hide')\nfig.show()","aaefbd62":"fig = px.histogram(x = train_data['Age Bins'], color = train_data['House_Ownership'], title = 'Categorization of House Ownership amongst different Age Groups',\n            labels = {'x': 'Age Groups'})\nfig.update_traces(marker_line_color='rgb(0,0,0)', marker_line_width=2, opacity=0.5)\nfig.show()","b773e2cd":"fig = px.histogram(x = train_data['Age Bins'], color = train_data['Car_Ownership'], title = 'Categorization of Car Ownership amongst different Age Groups',\n            labels = {'x': 'Age Groups'})\nfig.update_traces(marker_line_color='rgb(0,0,0)', marker_line_width=2, opacity=0.5)\nfig.show()","1430ab1c":"fig = px.histogram(x = train_data['Age Bins'], color = train_data['Married\/Single'], title = 'Categorization of Maritial Status amongst different Age Groups',\n            labels = {'x': 'Age Groups'})\nfig.update_traces(marker_line_color='rgb(0,0,0)', marker_line_width=2, opacity=0.5)\nfig.show()","82064a6b":"fig = px.histogram(x = train_data['Age Bins'], color = train_data['Risk_Flag'], title = 'Categorization of Risk Flag amongst different Age Groups',\n            labels = {'x': 'Age Groups'})\nfig.update_traces(marker_line_color='rgb(0,0,0)', marker_line_width=2, opacity=0.5)\nfig.show()","9da3b3ee":"def feature_engineering(df):\n    \n    labelEncoder = LabelEncoder()\n    df['Married\/Single'] = labelEncoder.fit_transform(df['Married\/Single'])\n    df['House_Ownership'] = labelEncoder.fit_transform(df['House_Ownership'])\n    df['Car_Ownership'] = labelEncoder.fit_transform(df['Car_Ownership'])\n    df['Profession'] = labelEncoder.fit_transform(df['Profession'])\n    df['CITY'] = labelEncoder.fit_transform(df['CITY'])\n    df['STATE'] = labelEncoder.fit_transform(df['STATE'])\n    \n    return df","4b1718c1":"new_train = dtrain_data = train_data.copy()","169c708a":"train = feature_engineering(train_data)\ntrain.drop(['Id', 'Age Bins'], inplace = True, axis = 1)\n\nX = train.iloc[:, :-1].values\ny = train.iloc[:, -1].values\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)\n\n# Feature Scaling\nsc_X = StandardScaler()\nX_train = sc_X.fit_transform(X_train)\nX_test = sc_X.fit_transform(X_test)","e2103785":"rf = RandomForestClassifier(n_estimators = 400, criterion = 'entropy')\nrf.fit(X_train, y_train)\nrf.score(X_train, y_train)","21ba3138":"predictions = rf.predict(X_test)\n\nprint(\"The accuracy score of Random Forest Classifier is {}\".format(accuracy_score(y_test, predictions)))\nprint()\nprint(\"Classification Report:\")\nprint(classification_report(y_test, predictions))\nprint()\nprint(\"The AUC-ROC score is {}\".format(roc_auc_score(y_test, predictions)))","5ac42aff":"# roc curve for models\nfpr1, tpr1, thresh1 = roc_curve(y_test, predictions, pos_label=1)\n\n# roc curve for tpr = fpr \nrandom_probs = [0 for i in range(len(y_test))]\np_fpr, p_tpr, _ = roc_curve(y_test, random_probs, pos_label=1)\n\nplt.figure(figsize = (12, 8))\nplt.plot(fpr1, tpr1, linestyle='--',color='orange', label='Random Forest Classifier')\nplt.plot(p_fpr, p_tpr, linestyle='--', color='blue')\n# title\nplt.title('ROC curve')\n# x label\nplt.xlabel('False Positive Rate')\n# y label\nplt.ylabel('True Positive rate')\n\nplt.legend(loc='best')\nplt.show()","3860ac54":"test = feature_engineering(test_data)\ntest.drop('ID', inplace = True, axis = 1)\n\n# Feature Scaling\nsc_X = StandardScaler()\ntest = sc_X.fit_transform(test)\n\npred = rf.predict(test)","7c53dd3e":"new_train.drop('Age Bins', inplace = True, axis = 1)\n\nlabelEncoder = LabelEncoder()\nnew_train['Married\/Single'] = labelEncoder.fit_transform(new_train['Married\/Single'])\nnew_train['House_Ownership'] = labelEncoder.fit_transform(new_train['House_Ownership'])\nnew_train['Car_Ownership'] = labelEncoder.fit_transform(new_train['Car_Ownership'])\nnew_train['Profession'] = labelEncoder.fit_transform(new_train['Profession'])\nnew_train['CITY'] = labelEncoder.fit_transform(new_train['CITY'])\nnew_train['STATE'] = labelEncoder.fit_transform(new_train['STATE'])\n\nX = new_train.iloc[:, :-1].values\ny = new_train.iloc[:, -1].values\n\n# Feature Scaling\nsc_X = MinMaxScaler(feature_range = (0, 1))\nX = sc_X.fit_transform(X)","c838b6c4":"# Training the SOM\nsom = MiniSom(x = 10, y = 10, input_len = 12, sigma = 1.0, learning_rate = 0.5)\nsom.random_weights_init(X)\nsom.train_random(data = X, num_iteration = 100)","5dc905c0":"# Visualizing the Results\nplt.figure(figsize = (12, 8))\nbone()\npcolor(som.distance_map().T)\n# distance_map() - will return all the Mean Inter-neuron Distances in one Matrix.\ncolorbar()\nmarkers = ['o', 's'] \ncolors = ['r', 'g']  \nfor i,x in enumerate(X): \n    w = som.winner(x)  \n    plot(w[0] + 0.5,\n         w[1] + 0.5,\n         markers[y[i]],\n         markeredgecolor = colors[y[i]],\n         markerfacecolor= 'None',\n         markersize = 10,\n         markeredgewidth = 2)","3c97a447":"# Finding the Risk_Flags\nmappings = som.win_map(X)\nrisk = np.concatenate((mappings[(1,1)], mappings[(8,3)]), axis = 0)\nrisk = sc_X.inverse_transform(risk)","a61e0c25":"# Printing the list of Risk_Flags\nprint('Risk Flag Customer IDs: ')\nfor i in risk[:, 0]:\n    print(int(i))","c52443e3":"**Observations** : \n1. The Profession of a \"Physician\" is the most popular, followed closely by that of a \"Statistician\".\n2. Supprisingly the Profession, which is least opted is that of an \"Engineer\".","9bf5fa15":"**Observations** : \n1. Mean age is around 50.\n2. Maximum age: 79, Minimum age: 21.","c5645f04":"# **The End !**\n## **Thank You**","9026f400":"# **Importing the Training and Test data**","cd60a404":"**Observations** : \n1. Around 69.8% of the entire population doesn't own a Car, accounting to around 176K people.\n2. On the contrary around 30.2% of the entire population owns a Car.","ffb8780f":"## **Making New Predictions on the Test Data**","0d72503c":"**Observations** : \n1. Approximately 92% of the entire population rents a House, accounting to around 232K people.\n2. Renting a House seems to be more of an obvious choice than owning one, which accounts to nearly 5.13% of the entire population.\n3. Only 2.85% of the total population neither owns a House nor rents one.","8b19e25f":"## **Splitting the dataset and applying Feature Scaling**","25300ed9":"# **Random Forest Classifier**\n### Classifying Loan Defaulters based on Random Forest","3f072115":"# **Loan Prediction Based on Customer Behavior**","57b26c33":"## Content\n> All values were provided at the time of the loan application.\n\n![image.png](attachment:aabbac16-88c2-4b3c-8640-3bb67e220a77.png)\n\n>The risk_flag indicates whether there has been a default in the past or not.","6338bfa0":"## **Feature Engineering**","06e439e0":"# **Exploratory Data Analysis**","7bd0734c":"# **Importing the Libraries**","9db08dee":"# **Self Organizing Map (SOM)**\n### Predicting the future risk_flag based on customer behaviours","5ea45775":"**Observations** : \n1. Around 89.8% of the entire population is \"Single\", accounting to around 226K people.\n2. On the contrary only 10.2% of the entire population is \"Married\".","eaf7f998":"## **Visualizing the Results**","e31a9d15":"**Observations** : \n1. Maximum loan deafulters are either Adults or Senior Citizens\n2. A small fraction of the Youth consitutes the loan deafulters category.","7d7b6c8d":"# **Basic Data Wrangling**","147d4397":"## **Training the Random Forest Classifier**","31f18301":"**Observations** : \n1. The state accounting to the maximum census in this dataset is \"Uttar Pradesh\", followed by \"Maharashtra\" and \"Andhra Pradesh\".\n2. \"Sikkim\" accounts for the least population in this dataset, constituting only around 0.24% of the entire dataset.","fd105efe":"**Observations** : \n1. Mean income 5M\n2. Highest income: 9.99M, Lowest income: 10.3K","4c15b454":"## **Training the Self Organizing Map**","c646d1a1":"**Observations** : \n1. Maximum of the Youth population lives in Rented Houses\/Apartments\n2. A similar trend can be seen in the case of Adults as well as Senior citizens, a fraction of the population Owns a House\/Apartment.","add5130b":"**Observations** : \n1. A huge chunk of the population don't own a car.\n2. Going green. Nice.","42510547":"![image.png](attachment:88f871cc-ca43-4deb-ae43-50b10105f24e.png)","19641f0a":"## **Splitting the Training dataset and applying Feature Scaling**","fe387d17":"**Observations** : \n1. Mostly the dataset comprises of Seniors and Adults, with each category accounting ti about 120K and 110K respectively.\n2. Youth pouplation constitutes only around 17K of the entire population.","384d1f4b":"## **Making New Predictions and determining various Statistical Metrics**","91b088d4":"**Observations** : \n1. The majority of the census is Unmarried."}}