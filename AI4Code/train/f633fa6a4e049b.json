{"cell_type":{"cc21f24f":"code","59cf506e":"code","5d6bf23b":"code","b5e45713":"code","891e003a":"code","95256c99":"code","652f23d6":"code","b49598a8":"code","c324bd89":"code","6af743cf":"code","ad554928":"code","dcf552a5":"code","b8b64712":"code","f9f05e6a":"code","3880dd9e":"code","f97dd16f":"code","a75759bd":"code","84a4cb8f":"code","73fb9a18":"code","bf8ade5b":"code","b5ad1c2d":"code","081b1660":"code","a93582ac":"code","ca0db0b5":"code","5453da40":"code","25f857e1":"code","e50f0eea":"code","12210f3d":"code","d239f63f":"code","d88e874b":"code","e7dfb1cb":"code","0d76a048":"code","289a01fc":"code","d26033b6":"code","f3aa93c9":"code","063872a7":"code","245051fc":"code","fc1fb775":"code","5dd9891e":"code","5f4d16f0":"code","3cbeb5ec":"code","f79787cc":"code","3ffdf143":"code","f793c70b":"code","74597f5f":"code","25cb5dcf":"markdown","f15762fe":"markdown","bebdf8fa":"markdown","386f2a0e":"markdown","f62848dd":"markdown","12ee80ba":"markdown","7add2abd":"markdown","a0d9b347":"markdown","a704299b":"markdown","0d347d19":"markdown","93b3102e":"markdown","e7a75f5c":"markdown"},"source":{"cc21f24f":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","59cf506e":"%matplotlib inline","5d6bf23b":"dia_data = pd.read_csv(\"..\/input\/diabetes\/diabetes.csv\")\ndia_data.head()","b5e45713":"# check the shape of our dataset\ndia_data.shape","891e003a":"dia_data.info()","95256c99":"dia_data.describe()","652f23d6":"dia_data.head()","b49598a8":"dia_data.isnull().sum()","c324bd89":"dia_data.duplicated().sum()","6af743cf":"# droping duplicate data\ndia_data.drop_duplicates(inplace = True)","ad554928":"dia_data.shape","dcf552a5":"print(\"total no of rows :: {} \".format(len(dia_data)))\nprint(\"total no of rows missing Pregnancies :: {} \".format(len(dia_data.loc[dia_data['Pregnancies'] == 0])))\nprint(\"total no of rows missing glucose :: {} \".format(len(dia_data.loc[dia_data['Glucose'] == 0])))\nprint(\"total no of rows missing bp :: {} \".format(len(dia_data.loc[dia_data['BloodPressure'] == 0])))\nprint(\"total no of rows missing insulin :: {} \".format(len(dia_data.loc[dia_data['Insulin'] == 0])))\nprint(\"total no of rows missing SkinThickness :: {} \".format(len(dia_data.loc[dia_data['SkinThickness'] == 0])))\nprint(\"total no of rows missing DiabetesPedigreeFunction :: {} \".format(len(dia_data.loc[dia_data['DiabetesPedigreeFunction'] == 0])))\nprint(\"total no of rows missing bmi :: {} \".format(len(dia_data.loc[dia_data['BMI'] == 0])))\nprint(\"total no of rows missing age :: {} \".format(len(dia_data.loc[dia_data['Age'] == 0])))","b8b64712":"dia_data.iloc[:,:-1].columns","f9f05e6a":"fig = plt.figure(figsize = (10,5))\nplt.title(\"Ploting of missing values\")\nsns.barplot([ len(dia_data.loc[dia_data['Pregnancies'] == 0]),\n              len(dia_data.loc[dia_data['Glucose'] == 0]),\n              len(dia_data.loc[dia_data['BloodPressure'] == 0]),\n              len(dia_data.loc[dia_data['Insulin'] == 0]),\n              len(dia_data.loc[dia_data['SkinThickness'] == 0]),\n              len(dia_data.loc[dia_data['DiabetesPedigreeFunction'] == 0]),\n              len(dia_data.loc[dia_data['BMI'] == 0]),\n              len(dia_data.loc[dia_data['Age'] == 0])\n            ], dia_data.iloc[:,:-1].columns)\nplt.show()","3880dd9e":"fig , s= plt.subplots(3,2, figsize = (15,10))\ns[0][0].set_title(\"Histogram of pregnancies column\")\ns[1][0].set_title(\"Histogram of Glucose column\")\ns[2][0].set_title(\"Histogram of BloodPressure column\")\ns[0][1].set_title(\"Histogram of Insulin column\")\ns[1][1].set_title(\"Histogram of SkinThickness column\")\ns[2][1].set_title(\"Histogram of BMI column\")\n\ns[0][0].hist(dia_data['Pregnancies'], rwidth = 0.8)\ns[1][0].hist(dia_data['Glucose'], rwidth = 0.8)\ns[2][0].hist(dia_data['BloodPressure'], rwidth = 0.8)\ns[0][1].hist(dia_data['Insulin'] ,rwidth = 0.8)\ns[1][1].hist(dia_data['SkinThickness'],rwidth = 0.8)\ns[2][1].hist(dia_data['BMI'], rwidth = 0.8)\nplt.show()","f97dd16f":"plt.figure(figsize=(15,5))\nsns.scatterplot(x= 'Age',y= 'Pregnancies', hue = 'Outcome', data = dia_data)\nplt.show()","a75759bd":"plt.figure(figsize=(15,5))\nsns.scatterplot(x= 'Age',y= 'Glucose', hue = 'Outcome', data = dia_data)\nplt.show()","84a4cb8f":"plt.figure(figsize=(15,5))\nsns.scatterplot(x= 'Age',y= 'BloodPressure', hue = 'Outcome', data = dia_data)\nplt.show()","73fb9a18":"plt.figure(figsize=(15,5))\nsns.scatterplot(x= 'Age',y= 'SkinThickness', hue = 'Outcome', data = dia_data)\nplt.show()","bf8ade5b":"plt.figure(figsize=(15,5))\nsns.scatterplot(x= 'Age',y= 'Insulin', hue = 'Outcome', data = dia_data)\nplt.show()","b5ad1c2d":"plt.figure(figsize=(15,5))\nsns.scatterplot(x= 'Age',y= 'BMI', hue = 'Outcome', data = dia_data)\nplt.show()","081b1660":"plt.figure(figsize=(15,5))\nsns.scatterplot(x= 'Age',y= 'DiabetesPedigreeFunction', hue = 'Outcome', data = dia_data)\nplt.show()","a93582ac":"corr_data = dia_data.corr() # correlated metrics\ntop_corr_features = corr_data.index","ca0db0b5":"corr_data","5453da40":"top_corr_features","25f857e1":"plt.figure(figsize = (8,5))\n# annot is used to show each values\n# cmap is used for color map on the graph\nsns.heatmap(corr_data, annot = True, cmap = 'RdYlGn')","e50f0eea":"# features set (independent data)\nfeatures_column = list(dia_data.iloc[:,:-1].columns)\npredicted_column = ['Outcome']\nprint(\"features columns :: {} \\n predicted columns :: {}\".format(features_column,predicted_column))","12210f3d":"X = dia_data[features_column].values\ny = dia_data[predicted_column].values\n\n# print(\"features columns :: {} \\n predicted columns :: {}\".format(X,y))","d239f63f":"X.shape  , y.shape","d88e874b":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 10)","e7dfb1cb":"x_train.shape, y_train.shape  , x_test.shape, y_test.shape\n# dia_data.head()","0d76a048":"from sklearn.impute import SimpleImputer\nfill_null_value = SimpleImputer(missing_values = 0, strategy = 'mean')\n\nx_train = fill_null_value.fit_transform(x_train)\nx_test = fill_null_value.fit_transform(x_test)","289a01fc":"from sklearn.ensemble import RandomForestRegressor\n\nrf = RandomForestRegressor(n_estimators = 10, random_state = 10)\n# n_estimators ==> determine the no of decision trees\n# random_state ==> It ensures that the splits that you generate are reproducible.\n# Eg. when random_state set to an integer, train_test_split will return same results for each execution.\n# when random_state set to an None, train_test_split will return different results for each execution.","d26033b6":"# train the model \nrf.fit( x_train , y_train.ravel())","f3aa93c9":"# Predicting values from the model \ny_pred = rf.predict(x_test)","063872a7":"y_pred = np.array([0 if i < 0.5 else 1 for i in y_pred])","245051fc":"y_pred.shape, y_test.ravel().shape","fc1fb775":"from sklearn.metrics import confusion_matrix, accuracy_score\n\ncm = confusion_matrix(y_test, y_pred)\nacc = accuracy_score(y_test, y_pred)","5dd9891e":"from sklearn.metrics import classification_report\nclass_report = classification_report(y_test, y_pred)","5f4d16f0":"print(\"confusion matrix :: {} \\n\\n Accuracy = {} \\n\\n classification report :: \\n{}\".format(cm,acc,class_report))","3cbeb5ec":"test_data2 = pd.read_csv('..\/input\/diabites-dataset\/diabetes.csv')","f79787cc":"x_test2 = test_data2.iloc[:,:-1]\ny_test2 = np.array(test_data2.iloc[:,-1])","3ffdf143":"x_test2.shape","f793c70b":"y_pred2 = rf.predict(x_test2)\ny_pred2 = np.array([0 if i < 0.5 else 1 for i in y_pred2])","74597f5f":"y_pred2[:100:5], y_test2[:100:5]","25cb5dcf":"# Correlation between each features","f15762fe":"<h2>\n    Ploting heat map of the correlated data\n<\/h2>","bebdf8fa":"## Creating Random Forest model","386f2a0e":"<h2>\n    Check Missing values in the data\n<\/h2>","f62848dd":"<h2>\n    Checking accuracy score of our model\n<\/h2>","12ee80ba":"<h2>\n    Spliting training and testing dataset\n<\/h2>","7add2abd":"<h2>\n    Importing necessary libraries\n <\/h2>","a0d9b347":"<h2> \n    Checking Duplicate data\n<\/h2>","a704299b":"<h2>\n    Uploading Diabetes Dataset\n<\/h2>","0d347d19":"<h1>\n    Appling random  testing dataset\n<\/h1>","93b3102e":"<h2>\n    Checking null values in the dataset\n<\/h2>","e7a75f5c":"<h2>\n    Filling missing values in training set\n<\/h2>"}}