{"cell_type":{"98372459":"code","3efeb3e5":"code","f665ea88":"code","426a02b3":"code","1080daf4":"code","fddc5767":"code","a9a7f070":"code","15391ed1":"code","269904b4":"code","e5a3cab7":"code","9321dde7":"code","69e3acf2":"code","d8e67127":"code","369508dd":"code","f33dfd9b":"code","5c3c90e7":"code","9e849edc":"code","7c051210":"code","b79fd35a":"code","52a92187":"code","05d7e1c3":"code","d9f5daa2":"code","d5ff4a1a":"code","61a722ff":"markdown"},"source":{"98372459":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.ensemble import RandomForestClassifier\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.graph_objects as go\nimport plotly.express as px\nfrom xgboost import XGBClassifier\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","3efeb3e5":"ds_train = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\nds_test = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\nds_result = pd.read_csv(\"\/kaggle\/input\/titanic\/gender_submission.csv\")\nprint('Dataset is imported')","f665ea88":"print('Training set has {} datapoints'.format(ds_train.shape[(0)]))\nprint('Test set has {} datapoints'.format(ds_test.shape[(0)]))","426a02b3":"ds_train.describe()","1080daf4":"ds_train.info()","fddc5767":"ds_train.head()","a9a7f070":"#drop the Ticket and cabin column for simplicity\nds_train = ds_train.drop([\"Ticket\", \"Cabin\", \"Name\"],axis = 1)\nds_train.head()","15391ed1":"#visualizing the age distribution\nage_sr = pd.Series(ds_train['Age'].value_counts())\nfig = px.scatter(age_sr, y= age_sr.values, x = age_sr.index)\nfig.show()","269904b4":"print('No. of passengers having age less than 20 is {}'.format(len(ds_train[ds_train['Age']<20])))\n","e5a3cab7":"#drop the Embarked column for simplicity\nds_train = ds_train.drop([\"Embarked\"],axis = 1)\nds_train.head()","9321dde7":"ds_train.corr()","69e3acf2":"ds_train['Family_size'] = ds_train['SibSp'] +ds_train['Parch'] + 1\nds_train.head()","d8e67127":"age_by_Pclass = ds_train.groupby(['Sex', 'Pclass']).median()['Age']\nfor Pclass in range(1,4):\n    for Sex in ['male', 'female']:\n        print('Median of pclass{} of {}s :{}'.format(Pclass, Sex, age_by_Pclass[Sex][Pclass]))","369508dd":"ds_train['Age']= ds_train.groupby(['Sex','Pclass'])['Age'].apply(lambda x: x.fillna(x.median()))\nds_train.info()","f33dfd9b":"#Replacing 'Male' and 'Female' with '0' and '1' respectively\nds_train=ds_train.replace(to_replace='male',value=0)\nds_train=ds_train.replace(to_replace='female',value=1)\nds_train.head()","5c3c90e7":"X_train = ds_train.drop(['Survived'], axis =1)\ny_train = ds_train['Survived'].values\nprint('x_train shape: {}'.format(x_train.shape))\nprint('y_train shape: {}'.format(y_train.shape))","9e849edc":"classifier_rf=RandomForestClassifier(criterion='gini', \n                                           n_estimators=1100,\n                                           max_depth=5,\n                                           min_samples_split=4,\n                                           min_samples_leaf=5,\n                                           max_features='auto',\n                                           oob_score=True,\n                                           random_state=42,\n                                           n_jobs=-1,\n                                           verbose=1)\nclassifier_rf.fit(X_train,y_train)","7c051210":"classifier_xgb=XGBClassifier(max_depth=3, n_estimators=300, learning_rate=0.05)\nclassifier_xgb.fit(X_train,y_train)","b79fd35a":"ds_test.info()","52a92187":"age_by_pclass_sex = ds_test.groupby(['Sex', 'Pclass']).median()['Age']\n\nfor pclass in range(1, 4):\n    for sex in ['female', 'male']:\n        print('Median age of Pclass {} {}s: {}'.format(pclass, sex, age_by_pclass_sex[sex][pclass]))\nprint('Median age of all passengers: {}'.format(ds_test['Age'].median()))\n\n# Filling the missing values in Age with the medians of Sex and Pclass groups\nds_test['Age'] = ds_test.groupby(['Sex', 'Pclass'])['Age'].apply(lambda x: x.fillna(x.median()))","05d7e1c3":"#Filling missing fare with median fare\nnull_index=ds_test['Fare'].isnull().index\nmedianFare=ds_test['Fare'].median()\nds_test.at[null_index,'Fare'] = medianFare\nprint(\"Missing Fare updated as Median Fare :{}\".format(medianFare))","d9f5daa2":"#Drop columns from test data set\nds_test=ds_test.drop(['Ticket','Cabin','Embarked','Name'],axis=1)\nprint(\"Columns Dropped Successfully\")\n\n#Creating Family Size columns from test data set\nds_test['Family_Size'] = ds_test['SibSp'] + ds_test['Parch'] + 1\nprint(\"Family Size column created sucessfully\")\n\n#Encoding Gender column from test data set\nds_test=ds_test.replace(to_replace='male',value=0)\nds_test=ds_test.replace(to_replace='female',value=1)\nX_test=ds_test\n\nX_test.head()","d5ff4a1a":"#Prediction test results\ny_pred_rf=classifier_rf.predict(X_test)\n#y_pred_xgb=classifier_xgb.predict(X_test)\n\n#Converting 2 dimensional  y_pred array into single dimension \ny_pred_rf=y_pred_rf.ravel()\n#y_pred_xgb=y_pred_xgb.ravel()\n\n#Creating submission data frame and subsequent csv file for submission\nsubmission_df_rf = pd.DataFrame(columns=['PassengerId', 'Survived'])\nsubmission_df_rf['PassengerId'] = X_test['PassengerId'].astype(int)\nsubmission_df_rf['Survived'] = y_pred_rf\nsubmission_df_rf.to_csv('submissions_rf.csv', header=True, index=False)\n\n# submission_df_xgb = pd.DataFrame(columns=['PassengerId', 'Survived'])\n# submission_df_xgb['PassengerId'] = X_test['PassengerId'].astype(int)\n# submission_df_xgb['Survived'] = y_pred_xgb\n# submission_df_xgb.to_csv('submissions_xgb.csv', header=True, index=False)","61a722ff":"For filling out the missing values, we fill by the median but classwise not the median of whole dataset\n"}}