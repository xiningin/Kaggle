{"cell_type":{"f44a16e5":"code","80079ee6":"code","8f46d568":"code","f73a1c66":"code","6cb7ee35":"code","aa7bfea0":"code","59570768":"code","f3913b50":"code","6b6b47a8":"code","4ff49444":"code","4d86a42c":"code","32a435c0":"code","72f6fb78":"code","ad9e3a61":"code","37f55013":"code","74df1449":"code","b3d2058d":"code","7722b848":"markdown","7ae74141":"markdown","73bcc23d":"markdown","20e73728":"markdown","9e369088":"markdown","8f47336c":"markdown","9955a1e1":"markdown"},"source":{"f44a16e5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt \nimport seaborn as sb\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Activation\nfrom keras.utils.np_utils import to_categorical\nfrom keras.datasets import mnist\nfrom keras.optimizers import SGD\nfrom keras.layers.core import Dropout\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\nimport random\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n# Any results you write to the current directory are saved as output.","80079ee6":"import operator\ndef showGraphs(speciesList,feature,style):\n    rgb = [0.2,0.1,0.4]\n    for species in speciesList:\n        method = getattr(plt,style)\n        method(species.Id,getattr(species,feature),color=(rgb[0], rgb[1], rgb[2], 1), label=species.Species)\n        plt.xlabel(\"Id\")\n        plt.ylabel(feature)\n        rgb[0]+=0.3\n        rgb[1] +=0.1\n        rgb[2] -=0.1\n        ","8f46d568":"data = pd.read_csv(\"..\/input\/iris\/Iris.csv\")","f73a1c66":"print(data.columns)","6cb7ee35":"data.info()","aa7bfea0":"print(data.Species.unique())","59570768":"SpeciesList = [data[data.Species == \"Iris-setosa\"],\n               data[data.Species == \"Iris-versicolor\"],\n               data[data.Species == \"Iris-virginica\"]]","f3913b50":"showGraphs(SpeciesList,\"PetalWidthCm\",\"plot\")","6b6b47a8":"showGraphs(SpeciesList,\"PetalWidthCm\",\"scatter\")\n\n#We will use it to classify if iris is setosa or not\nmaxP = (data[data.Species== \"Iris-setosa\"].PetalWidthCm).max()","4ff49444":"#I designed species list for these 2 species we need to clarify\nIrisSetosaForTest = SpeciesList[:1]\nSpeciesList = SpeciesList[1:]\nfor species in SpeciesList:\n    print(species.Species.unique())","4d86a42c":"showGraphs(SpeciesList,\"SepalLengthCm\",\"scatter\")","32a435c0":"showGraphs(SpeciesList,\"SepalWidthCm\",\"scatter\")","72f6fb78":"showGraphs(SpeciesList,\"PetalLengthCm\",\"scatter\")","ad9e3a61":"np.array(SpeciesList[0].SepalLengthCm)\n","37f55013":"#Firstly, we must set dataset to train network\nX_Train = np.zeros((50,2),dtype=float)\nY_Train = np.zeros((50,2),dtype=int)\nversiSepal = np.array(SpeciesList[0].SepalLengthCm)\nversiPetal = np.array(SpeciesList[0].PetalLengthCm)\nvirgiSepal = np.array(SpeciesList[1].SepalLengthCm)\nvirgiPetal = np.array(SpeciesList[1].PetalLengthCm)\n#X_Train = SpeciesList[0].drop([\"Id\",\"SepalWidthCm\",\"PetalWidthCm\"],axis=1,inplace = True)\nfor i in range(0,50):\n    X_Train[i][0]= versiSepal[i] if i%2==0 else virgiSepal[i]\n    X_Train[i][1]= versiPetal[i] if i%2==0 else virgiPetal[i]\n    Y_Train[i][0]=(i%2==0)\n    Y_Train[i][1]=(i%2==1)\nprint(X_Train, Y_Train)\nX_Test = np.copy(X_Train)\n","74df1449":"model = Sequential()\nX_Test = X_Train[:10,:]\nY_Test = Y_Train[:10,:]\nX_Train = X_Train[10:,:]\nY_Train = Y_Train[10:,:]\nmodel.add(Dense(32,input_dim=2,\n                kernel_initializer  =   'uniform',\n                activation = 'relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(32,input_dim=2,\n                kernel_initializer  =   'uniform',\n                activation = 'relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(2 , kernel_initializer='uniform')) # outputs for one hot encoding\nmodel.add(Activation('softmax'))\nmodel.compile(loss = 'binary_crossentropy',\n              optimizer = 'adam')\nmodel.fit(X_Train,\n          Y_Train,\n          epochs = 200,\n          batch_size = 10,\n          validation_split = 0.1,\n          verbose = 1)\nresults = model.evaluate(X_Test,Y_Test)\nprint(results)\n","b3d2058d":"def classify_iris(specy,model):\n    if specy.PetalWidthCm <= maxP:\n        print(\"Iris-Setosa\")\n    else:\n        inputs = np.zeros((1,2),dtype=float)\n        inputs[0][0]=specy.SepalLengthCm\n        inputs[0][1]=specy.PetalLengthCm\n        result = np.zeros((1,2),dtype=\"float\")\n        result = model.predict(inputs)\n        if(result[0][0]>result[0][1]): print(\"Iris-Versicolor\")\n        else: print(\"Iris-Virginica\")\n        \nparam = SpeciesList[0].iloc[0] #versicolor\nclassify_iris(param,model)\nparam = SpeciesList[1].iloc[0] #virginica\nclassify_iris(param,model)\nparam = IrisSetosaForTest[0].iloc[0] #Setosa\nclassify_iris(param,model)\n","7722b848":"There is my function to show graphs with that, code will look simplier now","7ae74141":"Now let's compare these two species with another features","73bcc23d":"Wow... Can't use that too :(","20e73728":"These graphs shows us that we can understand which species is the given Iris clearly by looking its Petal Width. On the other hand, unlike Iris-Setosa, Iris-versicolor and Iris-virginica have a possibility of having same Petal width. So that, we can find some way to clarify this situation by looking these 2 species' other features.","9e369088":"We created an artificial neural network to classificate iris species as iris-versicolor or iris-virginica. Iris-setosa can be classified easily just looking at PetalWidthCm feature. So last function to classify an iris sample:","8f47336c":"I was waiting for better difference but it is better than other comparations, i am going to use neural network to identify if type is versicolor or virginica.","9955a1e1":"We can't use this too, there is one feature left"}}