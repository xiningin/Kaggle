{"cell_type":{"4d65d00c":"code","ae3a8da0":"code","8133a1c5":"code","0c1c9884":"code","4dbe0fee":"code","214095f9":"code","0ad9672e":"code","b705f48e":"code","24deeb6e":"code","878f6dfa":"code","5575fddd":"code","c9c80bb8":"code","df731874":"code","97fee777":"code","78a838fa":"code","c68e7b85":"code","ea4873e8":"code","c5e4beaf":"code","609e14c6":"code","01fa9650":"code","27995b23":"code","d2bd6fdf":"code","595954cb":"code","bd02a1ab":"code","c65370e6":"code","0153ec89":"code","1451baef":"code","51e5fe1d":"code","1f78d3b1":"code","0bbf423c":"code","bb5a8fc3":"code","575e4924":"code","cf90e543":"code","def42454":"code","2e13d39c":"code","8b5354e0":"code","a57854d5":"code","ef0ee2f0":"code","6f8c45bf":"code","ca56c688":"code","b7019fee":"code","0e97b395":"code","5a4fc627":"code","b6e35c39":"code","400c1161":"code","e04db4c0":"code","10d098af":"code","e5dfe259":"code","18ea914e":"markdown","14795bb2":"markdown","8aeee9b0":"markdown","0f7b33bc":"markdown","f408ac2d":"markdown","baa93459":"markdown","d3b249e1":"markdown","3f08426e":"markdown","94a5dc76":"markdown","9e17a65a":"markdown","496a2ca6":"markdown","91fcb03d":"markdown"},"source":{"4d65d00c":"import os\nimport tarfile\nimport torch\nimport torchvision\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom torchvision.datasets.utils import download_url\nfrom torch.utils.data import random_split\nfrom torchvision.datasets import ImageFolder\nfrom torchvision.transforms import ToTensor\nfrom torch.utils.data.dataloader import DataLoader\nfrom torchvision.utils import make_grid\nimport matplotlib.pyplot as plt\n%matplotlib inline","ae3a8da0":"project_name='05-cifar10-cnn'","8133a1c5":"# Dowload the dataset\ndataset_url = \"http:\/\/files.fast.ai\/data\/cifar10.tgz\"\ndownload_url(dataset_url, '.')","0c1c9884":"# Extract from archive\nwith tarfile.open('.\/cifar10.tgz', 'r:gz') as tar:\n    tar.extractall(path='.\/data')","4dbe0fee":"data_dir = '.\/data\/cifar10'\n\nprint(os.listdir(data_dir))\nclasses = os.listdir(data_dir + \"\/train\")\nprint(classes)","214095f9":"airplane_files = os.listdir(data_dir + \"\/train\/airplane\")\nprint('No. of training examples for airplanes:', len(airplane_files))\nprint(airplane_files[:5])","0ad9672e":"ship_test_files = os.listdir(data_dir + \"\/test\/ship\")\nprint(\"No. of test examples for ship:\", len(ship_test_files))\nprint(ship_test_files[:5])","b705f48e":"dataset = ImageFolder(data_dir+'\/train', transform=ToTensor())","24deeb6e":"img, label = dataset[0]\nprint(img.shape, label)\nimg","878f6dfa":"print(dataset.classes)","5575fddd":"def show_example(img, label):\n    print('Label: ', dataset.classes[label], \"(\"+str(label)+\")\")\n    plt.imshow(img.permute(1, 2, 0))","c9c80bb8":"show_example(*dataset[0])","df731874":"show_example(*dataset[1099])","97fee777":"random_seed = 42\ntorch.manual_seed(random_seed);","78a838fa":"val_size = 5000\ntrain_size = len(dataset) - val_size\n\ntrain_ds, val_ds = random_split(dataset, [train_size, val_size])\nlen(train_ds), len(val_ds)","c68e7b85":"batch_size=128","ea4873e8":"train_dl = DataLoader(train_ds, batch_size, shuffle=True, num_workers=4, pin_memory=True)\nval_dl = DataLoader(val_ds, batch_size*2, num_workers=4, pin_memory=True)","c5e4beaf":"def show_batch(dl):\n    for images, labels in dl:\n        fig, ax = plt.subplots(figsize=(12, 6))\n        ax.set_xticks([]); ax.set_yticks([])\n        ax.imshow(make_grid(images, nrow=16).permute(1, 2, 0))\n        break","609e14c6":"show_batch(train_dl)","01fa9650":"def apply_kernel(image, kernel):\n    ri, ci = image.shape       # image dimensions\n    rk, ck = kernel.shape      # kernel dimensions\n    ro, co = ri-rk+1, ci-ck+1  # output dimensions\n    output = torch.zeros([ro, co])\n    for i in range(ro): \n        for j in range(co):\n            output[i,j] = torch.sum(image[i:i+rk,j:j+ck] * kernel)\n    return output","27995b23":"sample_image = torch.tensor([\n    [3, 3, 2, 1, 0], \n    [0, 0, 1, 3, 1], \n    [3, 1, 2, 2, 3], \n    [2, 0, 0, 2, 2], \n    [2, 0, 0, 0, 1]\n], dtype=torch.float32)\n\nsample_kernel = torch.tensor([\n    [0, 1, 2], \n    [2, 2, 0], \n    [0, 1, 2]\n], dtype=torch.float32)\n\napply_kernel(sample_image, sample_kernel)","d2bd6fdf":"simple_model = nn.Sequential(\n    nn.Conv2d(3, 8, kernel_size=3, stride=1, padding=1),\n    nn.MaxPool2d(2, 2)\n)","595954cb":"for images, labels in train_dl:\n    print('images.shape:', images.shape)\n    out = simple_model(images)\n    print('out.shape:', out.shape)\n    break","bd02a1ab":"def accuracy(outputs, labels):\n    _, preds = torch.max(outputs, dim=1)\n    return torch.tensor(torch.sum(preds == labels).item() \/ len(preds))\n\nclass ImageClassificationBase(nn.Module):\n    def training_step(self, batch):\n        images, labels = batch \n        out = self(images)                  # Generate predictions\n        loss = F.cross_entropy(out, labels) # Calculate loss\n        return loss\n    \n    def validation_step(self, batch):\n        images, labels = batch \n        out = self(images)                    # Generate predictions\n        loss = F.cross_entropy(out, labels)   # Calculate loss\n        acc = accuracy(out, labels)           # Calculate accuracy\n        return {'val_loss': loss.detach(), 'val_acc': acc}\n        \n    def validation_epoch_end(self, outputs):\n        batch_losses = [x['val_loss'] for x in outputs]\n        epoch_loss = torch.stack(batch_losses).mean()   # Combine losses\n        batch_accs = [x['val_acc'] for x in outputs]\n        epoch_acc = torch.stack(batch_accs).mean()      # Combine accuracies\n        return {'val_loss': epoch_loss.item(), 'val_acc': epoch_acc.item()}\n    \n    def epoch_end(self, epoch, result):\n        print(\"Epoch [{}], train_loss: {:.4f}, val_loss: {:.4f}, val_acc: {:.4f}\".format(\n            epoch, result['train_loss'], result['val_loss'], result['val_acc']))","c65370e6":"class Cifar10CnnModel(ImageClassificationBase):\n    def __init__(self):\n        super().__init__()\n        self.network = nn.Sequential(\n            nn.Conv2d(3, 32, kernel_size=3, padding=1),\n            nn.ReLU(),\n            nn.Conv2d(32, 64, kernel_size=3, stride=1, padding=1),\n            nn.ReLU(),\n            nn.MaxPool2d(2, 2), # output: 64 x 16 x 16\n\n            nn.Conv2d(64, 128, kernel_size=3, stride=1, padding=1),\n            nn.ReLU(),\n            nn.Conv2d(128, 128, kernel_size=3, stride=1, padding=1),\n            nn.ReLU(),\n            nn.MaxPool2d(2, 2), # output: 128 x 8 x 8\n\n            nn.Conv2d(128, 256, kernel_size=3, stride=1, padding=1),\n            nn.ReLU(),\n            nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1),\n            nn.ReLU(),\n            nn.MaxPool2d(2, 2), # output: 256 x 4 x 4\n\n            nn.Flatten(), \n            nn.Linear(256*4*4, 1024),\n            nn.ReLU(),\n            nn.Linear(1024, 512),\n            nn.ReLU(),\n            nn.Linear(512, 10))\n        \n    def forward(self, xb):\n        return self.network(xb)","0153ec89":"model = Cifar10CnnModel()\nmodel","1451baef":"for images, labels in train_dl:\n    print('images.shape:', images.shape)\n    out = model(images)\n    print('out.shape:', out.shape)\n    print('out[0]:', out[0])\n    break","51e5fe1d":"def get_default_device():\n    \"\"\"Pick GPU if available, else CPU\"\"\"\n    if torch.cuda.is_available():\n        return torch.device('cuda')\n    else:\n        return torch.device('cpu')\n    \ndef to_device(data, device):\n    \"\"\"Move tensor(s) to chosen device\"\"\"\n    if isinstance(data, (list,tuple)):\n        return [to_device(x, device) for x in data]\n    return data.to(device, non_blocking=True)\n\nclass DeviceDataLoader():\n    \"\"\"Wrap a dataloader to move data to a device\"\"\"\n    def __init__(self, dl, device):\n        self.dl = dl\n        self.device = device\n        \n    def __iter__(self):\n        \"\"\"Yield a batch of data after moving it to device\"\"\"\n        for b in self.dl: \n            yield to_device(b, self.device)\n\n    def __len__(self):\n        \"\"\"Number of batches\"\"\"\n        return len(self.dl)","1f78d3b1":"device = get_default_device()\ndevice","0bbf423c":"train_dl = DeviceDataLoader(train_dl, device)\nval_dl = DeviceDataLoader(val_dl, device)\nto_device(model, device);","bb5a8fc3":"@torch.no_grad()    # This is to say that PyTorch to stop tracking of grad\ndef evaluate(model, val_loader):\n    model.eval()\n    outputs = [model.validation_step(batch) for batch in val_loader]\n    return model.validation_epoch_end(outputs)\n\ndef fit(epochs, lr, model, train_loader, val_loader, opt_func=torch.optim.SGD):\n    history = []\n    optimizer = opt_func(model.parameters(), lr)\n    for epoch in range(epochs):\n        # Training Phase \n        model.train()\n        train_losses = []\n        for batch in train_loader:\n            loss = model.training_step(batch)\n            train_losses.append(loss)\n            loss.backward()\n            optimizer.step()\n            optimizer.zero_grad()\n        # Validation phase\n        result = evaluate(model, val_loader)\n        result['train_loss'] = torch.stack(train_losses).mean().item()\n        model.epoch_end(epoch, result)\n        history.append(result)\n    return history","575e4924":"model = to_device(Cifar10CnnModel(), device)","cf90e543":"evaluate(model, val_dl)","def42454":"num_epochs = 10\nopt_func = torch.optim.Adam\nlr = 0.001","2e13d39c":"history = fit(num_epochs, lr, model, train_dl, val_dl, opt_func)","8b5354e0":"def plot_accuracies(history):\n    accuracies = [x['val_acc'] for x in history]\n    plt.plot(accuracies, '-x')\n    plt.xlabel('epoch')\n    plt.ylabel('accuracy')\n    plt.title('Accuracy vs. No. of epochs');\n\ndef plot_losses(history):\n    train_losses = [x.get('train_loss') for x in history]\n    val_losses = [x['val_loss'] for x in history]\n    plt.plot(train_losses, '-bx')\n    plt.plot(val_losses, '-rx')\n    plt.xlabel('epoch')\n    plt.ylabel('loss')\n    plt.legend(['Training', 'Validation'])\n    plt.title('Loss vs. No. of epochs');","a57854d5":"plot_accuracies(history)","ef0ee2f0":"plot_losses(history)","6f8c45bf":"test_dataset = ImageFolder(data_dir+'\/test', transform=ToTensor())","ca56c688":"def predict_image(img, model):\n    # Convert to a batch of 1\n    xb = to_device(img.unsqueeze(0), device)\n    # Get predictions from model\n    yb = model(xb)\n    # Pick index with highest probability\n    _, preds  = torch.max(yb, dim=1)\n    # Retrieve the class label\n    return dataset.classes[preds[0].item()]","b7019fee":"img, label = test_dataset[0]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', dataset.classes[label], ', Predicted:', predict_image(img, model))","0e97b395":"img, label = test_dataset[1002]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', dataset.classes[label], ', Predicted:', predict_image(img, model))","5a4fc627":"img, label = test_dataset[6153]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', dataset.classes[label], ', Predicted:', predict_image(img, model))","b6e35c39":"test_loader = DeviceDataLoader(DataLoader(test_dataset, batch_size*2), device)\nresult = evaluate(model, test_loader)\nresult","400c1161":"torch.save(model.state_dict(), 'cifar10-cnn.pth')","e04db4c0":"model2 = to_device(Cifar10CnnModel(), device)","10d098af":"model2.load_state_dict(torch.load('cifar10-cnn.pth'))","e5dfe259":"evaluate(model2, test_loader)","18ea914e":"* ***User***: [@manishshah120](https:\/\/www.kaggle.com\/manishshah120)\n* ***LinkedIn***: https:\/\/www.linkedin.com\/in\/manishshah120\/\n* ***GitHub***: https:\/\/github.com\/ManishShah120\n* ***Twitter***: https:\/\/twitter.com\/ManishShah120\n\n> *This Notebook was created while undergoing a course \"[Deep Learning with PyTorch: Zero to GANs](https:\/\/jovian.ml\/forum\/t\/start-here-welcome-to-deep-learning-with-pytorch-zero-to-gans\/1622)\" from \"jovian.ml\" in collaboratoin with \"freecodecamp.org\"*","14795bb2":"## **Training and Validation Datasets**","8aeee9b0":"## **Imports**","0f7b33bc":"## Defining the Model (Convolutional Neural Network)","f408ac2d":"If interested to save all the hyperparams, and some others metrics values foloows this notebook\n[Notebook](https:\/\/jovian.ml\/aakashns\/05-cifar10-cnn) ","baa93459":"## **Testing with individual images**","d3b249e1":"# **Image Classification using Convolutional Neural Networks in PyTorch Minimal**","3f08426e":"## **Saving and loading the model**","94a5dc76":"## Exploring the data","9e17a65a":"# ***THE END***","496a2ca6":"## Training the Model","91fcb03d":"### Data Loaders"}}