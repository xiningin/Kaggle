{"cell_type":{"6fa343d5":"code","ed152a1e":"code","fb16c9e7":"code","45cee025":"code","ec803427":"code","7d851724":"markdown","63e64e47":"markdown","807b8baf":"markdown","c3043a3c":"markdown","13c69e0f":"markdown","4b939a8d":"markdown","95e552d9":"markdown","aa4b9142":"markdown"},"source":{"6fa343d5":"import cv2\nimport numpy as np\nimport os\n\nclass ReadImage:\n    def __init__(self):\n        self.name = \"Load Image Challenge 1\"\n        self.unix = np.eye(43)\n\n    def listFileFrom(self, source):\n        all, cla = np.array(self.getListOfFile(\"..\\\\\"+source))\n        self.sourceFile = all\n        self.sourceClassify = cla\n        self.pathLabel = self.folderLable(source)\n\n    def folderLable(self, s):\n        arr = []\n        for i in range(43):\n            arr.append(\"..\\\\\"+s+\"\\\\\"+str(i))\n        return arr\n\n    def getListOfFile(self, dirName):\n        listOfFile = os.listdir(dirName)\n        allFiles = list()\n        classify = list()\n\n        for entry in listOfFile:\n            fullPath = os.path.join(dirName, entry)\n            if os.path.isdir(fullPath):\n                all, cla = self.getListOfFile(fullPath)\n                allFiles = allFiles + all\n                classify = classify + cla\n            else:\n                allFiles.append(fullPath)\n                classify.append(os.path.basename(os.path.dirname(fullPath)))\n        return allFiles, classify\n    \n    #T\u0103ng \u0111\u1ed9 t\u01b0\u01a1ng ph\u1ea3n c\u1ee7a \u1ea3nh\n    def bgr(self, img):\n        lab = cv2.cvtColor(img, cv2.COLOR_BGR2LAB)\n        lab_planes = cv2.split(lab)\n        clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8, 8))\n        lab_planes[0] = clahe.apply(lab_planes[0])\n        lab = cv2.merge(lab_planes)\n        bgr = cv2.cvtColor(lab, cv2.COLOR_LAB2BGR)\n        return bgr\n    #D\u1ecbch chuy\u1ec3n \u1ea3nh \u0111i 5%\n    def translation(self, img):\n        M = np.float32([[1, 0, 5], [0, 1, 5]])\n        dst = cv2.warpAffine(img, M, (48, 48))\n        return dst\n    \n    #Xoay \u1ea3nh \u0111i m\u1ed9t g\u00f3c = angle\n    def rotation(self, img, angle):\n        image_center = tuple(np.array(img.shape[1::-1]) \/ 2)\n        rot_mat = cv2.getRotationMatrix2D(image_center, angle, 1.0)\n        result = cv2.warpAffine(img, rot_mat, img.shape[1::-1], flags=cv2.INTER_LINEAR)\n        return result\n    \n    #\u0110\u1ecdc \u1ea3nh train - f(int) = from, t(int) = to, sorce(str) = t\u00ean folder ch\u1ee9a t\u1eadp train, classify(arr) = m\u1ea3ng class mu\u1ed1n \u0111\u1ecdc\n    #VD: getImage(1, 1000, \"train\", [1, 2, 3]) - L\u1ea5y 1000 \u1ea3nh t\u1eeb t\u1eadp \"train\" c\u00f3 nh\u00e3n l\u00e0 1, 2 3\n    def getImage(self, f = 0, t = None, sorce = \"\", classify=None):\n        print(\"From: \"+str(f))\n        if t is None:\n            print(\"To: All\")\n        else:\n            print(\"To: \", str(t))\n        if classify is not None:\n            print(\"Classify = \"+str(classify))\n        print(\"Load Image \"+sorce+\"...\")\n        self.listFileFrom(sorce)\n        arr = []\n        label = []\n        path = []\n        if t is None:\n            t = len(self.sourceFile)\n\n        for i in range(f, t, 1):\n            if classify is not None:\n                for res in classify:\n                    if self.sourceClassify[i] == res:\n                        image = cv2.imread(self.sourceFile[i])\n                        image = cv2.resize(image, (48, 48))\n                        image = self.bgr(image)\n                        arr.append(image)\n                        path.append(str(self.sourceFile[i]))\n                        label.append(self.unix[int(self.sourceClassify[i])])\n\n            else:\n                image = cv2.imread(self.sourceFile[i])\n                path.append(str(self.sourceFile[i]))\n                image = cv2.resize(image, (48, 48))\n                image = self.bgr(image)\n                arr.append(image)\n                label.append(self.unix[int(self.sourceClassify[i])])\n\n\n        return arr, label, path\n    \n    #Load \u1ea3nh t\u1eeb t\u1eadp public_test\n    def getTest(self, f = 0, t = None, sorce = \"\"):\n        print(\"From: \" + str(f))\n        if t is None:\n            print(\"To: All\")\n        else:\n            print(\"To: \", str(t))\n        print(\"Load Image \" + sorce + \"...\")\n        self.listFileFrom(sorce)\n        arr = []\n        label = []\n        if t is None:\n            t = len(self.sourceFile)\n\n        for i in range(f, t, 1):\n            image = cv2.imread(self.sourceFile[i])\n            image = cv2.resize(image, (48, 48))\n            image = self.bgr(image)\n            arr.append(image)\n            label.append(os.path.basename(self.sourceFile[i]))\n        return arr, label\n\n    def test(self):\n        label = []\n        label.append(self.unix[1])\n        print(label)\n\n\nif __name__ == '__main__':\n    t = ReadImage()\n    t.test()","ed152a1e":"class Panel1(wx.Panel):\n    def __init__(self, parent, id):\n        wx.Panel.__init__(self, parent, id)\n        try:\n            bmp = wx.Image('..\/train2\/0\/1c682747f4bf4eeb8326d936eebacd6d.png', wx.BITMAP_TYPE_ANY).ConvertToBitmap()\n            self.bitmap1 = wx.StaticBitmap(self, -1, bmp, (0, 0))\n            parent.SetTitle(\"Year\")\n        except IOError:\n            print(\"Not found\")\n            raise SystemExit\n\n        self.button1 = wx.Button(self, id=-1, label='Change', pos=(50, 100))\n        self.button1.Bind(wx.EVT_BUTTON, self.OnClicked)\n        self.label_predict = wx.StaticText(self, label=\"-1\", pos=(60, 0))\n        self.target_label = wx.TextCtrl(self, pos=(60, 50))\n        \n    #B\u1eaft s\u1ef1 ki\u1ec7n click\n    def OnClicked(self, event):\n        print(\"From: \", self.label_predict.GetLabel())\n        val = int(self.target_label.GetValue())\n        print(\"To:\", t.pathLabel[val] + \"\\\\f_\" + os.path.basename(self.label_predict.GetLabel()))\n        os.rename(self.label_predict.GetLabel(),\n                  t.pathLabel[val] + \"\\\\f_\" + os.path.basename(self.label_predict.GetLabel()))\n        \napp = wx.App()\nframe = wx.Frame(None, -1, \"Image\", size=(350, 400))\n\npanel = Panel1(frame, -1)\nframe.Show()\n\ndef setImage(link, text):\n    print(link)\n    bmp = wx.Image(link, wx.BITMAP_TYPE_ANY).ConvertToBitmap()\n    panel.bitmap1 = wx.StaticBitmap(frame, -1, bmp, (0, 0))\n    panel.label_predict = wx.StaticText(frame, label=text, pos=(60, 0))\n    cv2.imshow(\"delay\", 0)\n    cv2.waitKey(0)\n    \n##Load model and check\n\napp.MainLoop()","fb16c9e7":"import tensorflow as tf\nimport main.ReadImg as ri\nimport numpy as np\nimport cv2\n\nt = ri.ReadImage()\nX_train = []\nY_train = []\nX_test = []\nY_test = []\ndef shuffleData(X, Y):\n    c = np.arange(X.shape[0])\n    np.random.shuffle(c)\n    return X[c], Y[c]\n\ndef loadData(X, Y, scaleTrain, scaleTest):\n    total = scaleTrain+scaleTest\n    p = round((len(X)\/total)*scaleTrain)\n    return (X[:p, :], Y[:p, :]), (X[p:, :], Y[p:, :])\n\nunix = np.eye(43)\n\nfor i in range(43):\n    #load image\n    x, y, _ = t.getImage(sorce=\"train3\", classify=[str(i)])\n    x = np.array(x)\n    y = np.array(y)\n    #Tr\u1ed9n\n    x, y = shuffleData(x, y)\n    #Chia t\u1eadp t\u1ef7 l\u1ec7 8-1\n    (x_train, y_train), (x_test, y_test) = loadData(x, y, 8, 1)\n    ax = []\n    ay = []\n    #\u0110a d\u1ea1ng \u1ea3nh\n    for j in range(len(x_train)):\n        ax.append(t.rotation(x_train[j], 18))\n        ay.append(unix[i])\n        ax.append(t.rotation(x_train[j], -18))\n        ay.append(unix[i])\n        \n    x_train = np.append(x_train, np.array(ax), axis=0)\n    y_train = np.append(y_train, ay, axis=0)\n    \n    if i == 0:\n        X_train = x_train\n        Y_train = y_train\n        X_test = x_test\n        Y_test = y_test\n    else:\n        X_train = np.append(X_train, x_train, axis=0)\n        Y_train = np.append(Y_train, y_train, axis=0)\n        X_test = np.append(X_test, x_test, axis=0)\n        Y_test = np.append(Y_test, y_test, axis=0)\n\nprint(\"Data X = {}\".format(X_train.shape))\nprint(\"Data Y = {}\".format(Y_train.shape))\n\nX_train = X_train.reshape(-1, 48, 48, 3)\nX_test = X_test.reshape(-1, 48, 48, 3)\n#Tr\u1ed9n t\u1eadp train\nX_train, Y_train = shuffleData(X_train, Y_train)","45cee025":"tf.reset_default_graph()\nmX = tf.placeholder(\"float\", [None, 48, 48, 3])\nmY = tf.placeholder(\"float\", [None, 43])\nkeep_prob = tf.placeholder(tf.float32)\n\ndef model(X, keep_prob):\n\n    C1 = tf.layers.conv2d(X, 32, kernel_size=3, padding=\"VALID\", activation=tf.nn.relu)\n    P1 = tf.layers.max_pooling2d(C1, 2, 2, padding=\"VALID\")\n    D1 = tf.layers.dropout(P1, keep_prob)\n\n    C2 = tf.layers.conv2d(D1, 64, kernel_size=4, padding=\"VALID\", activation=tf.nn.relu)\n    P2 = tf.layers.max_pooling2d(C2, 2, 2, padding=\"VALID\")\n    D2 = tf.layers.dropout(P2, keep_prob)\n\n    C3 = tf.layers.conv2d(D2, 128, kernel_size=3, padding=\"VALID\", activation=tf.nn.relu)\n    P3 = tf.layers.max_pooling2d(C3, 2, 2, padding=\"VALID\")\n    D3 = tf.layers.dropout(P3, keep_prob)\n\n    fc1 = tf.contrib.layers.flatten(D3)\n    fc1 = tf.layers.dense(fc1, 200)\n\n    output = tf.layers.dense(fc1, 43)\n\n    return output\n\nY_pred = model(mX, keep_prob)\ncost = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits=Y_pred, labels=mY))\n\noptimizer = tf.train.RMSPropOptimizer(0.001, 0.9).minimize(cost)\npredict_op = tf.argmax(Y_pred, 1)","ec803427":"#Training....\nepochs = 60\n\nsaver = tf.train.Saver()\n\nwith tf.Session() as sess:\n    sess.run(tf.global_variables_initializer())\n\n    for epoch in range(epochs):\n        for start, end in zip(range(0, len(X_train), 128), range(128, len(X_train)+1, 128)):\n            sess.run(optimizer, feed_dict={mX: X_train[start:end], mY: Y_train[start:end], keep_prob: 0.5})\n\n        if epoch%10 == 0:\n            arr = sess.run(predict_op, feed_dict={mX: X_test, keep_prob: 1.0})\n            arr = np.array(arr)\n            accuracy = np.mean(np.argmax(Y_test, axis=1) == arr)\n            print(\"Epoch: {} and accuracy: {}\".format(epoch, accuracy))\n            save_path = saver.save(sess, \"..\/tmp\/model.ckpt\")\n            print(\"Model saved in path: %s\" % save_path)\n    print(\"Final: {}\".format(np.mean(np.argmax(Y_test, axis=1) == sess.run(predict_op, feed_dict={mX: X_test, keep_prob:1.0}))))\n    save_path = saver.save(sess, \"..\/tmp\/model.ckpt\")\n    print(\"Model saved in path: %s\" % save_path)","7d851724":"2.3 \u0110a d\u1ea1ng d\u1eef li\u1ec7u\nTrong code \u0111\u1ecdc data tr\u00ean c\u00f3 cung c\u1ea5p 3 d\u1ea1ng chuy\u1ec3n \u0111\u1ed5i \u1ea3nh: T\u0103ng \u0111\u1ed9 t\u01b0\u01a1ng ph\u1ea3n, d\u1ecbch \u1ea3nh 5% v\u00e0 xoay anh.\n- T\u0103ng \u0111\u1ed9 t\u01b0\u01a1ng ph\u1ea3n - CLAHE method:\n[CLAHE - G\u1ed1c]\n![CLAHE - G\u1ed1c](https:\/\/i.imgur.com\/mzzcp1k.png)\n![CLAHE - G\u1ed1c](https:\/\/i.imgur.com\/LjD0jJ1.png)\n- Xoay \u1ea3nh:\n![Xoay d\u01b0\u01a1ng, xoay \u00e2m](https:\/\/i.imgur.com\/08Tylbl.png)","63e64e47":"\u1ea2nh g\u1ed1c:\n![G\u1ed1c](https:\/\/i.imgur.com\/2KGagug.png)\n\n\u1ea2nh \u0111\u01b0a v\u00e0o input:\n![Input](https:\/\/i.imgur.com\/46Mdl8x.png)","807b8baf":"2.2 L\u1ecdc nhi\u1ec5u\nV\u1ec1 l\u1ecdc nhi\u1ec5u th\u00ec m\u00ecnh train m\u1ed9t model c\u00f3 th\u1ec3 t\u1ea1m th\u1eddi nh\u1eadn bi\u1ebft v\u00e0 ph\u00e2n lo\u1ea1i \u0111\u01b0\u1ee3c \u1ea3nh. Sau \u0111\u00f3 s\u1eed d\u1ee5ng model \u0111\u00f3 l\u1ecdc l\u1ea1i data train \u0111\u1ec3 x\u00e1c \u0111\u1ecbnh m\u1ed9t s\u1ed1 nhi\u1ec5u. R\u1ed3i sau \u0111\u00f3 s\u1eed d\u1ee5ng m\u1ed9t app \u0111\u01a1n gi\u1ea3n b\u1eb1ng python \u0111\u1ec3 l\u1ecdc nhi\u1ec5u b\u1eb1ng AI ch\u1ea1y b\u1eb1ng c\u01a1m.\nL\u1eb7p l\u1ea1i qu\u00e1 tr\u00ecnh cho \u0111\u1ebfn khi nhi\u1ec5u \u1ed5n \u0111\u1ecbnh.\n![app](https:\/\/i.imgur.com\/gWXwJ3h.png)\n","c3043a3c":"* **S\u1eed d\u1ee5ng m\u1ea1ng CNN - Acc 0.91562 (top 2)**\n* ***Duong Lee*** - T\u1ee5 Qu\u1ea3 Dong\n* *6\/3\/2019*\n* 1. Gi\u1edbi thi\u1ec7u\n* 2. D\u1eef li\u1ec7u\n*     2.1 \u0110\u1ecdc d\u1eef li\u1ec7u.\n*    2.2 L\u1ecdc nhi\u1ec5u\n*    2.3 \u0110a d\u1ea1ng d\u1eef li\u1ec7u\n* 3. Ph\u01b0\u01a1ng th\u1ee9c ti\u1ebfp c\u1eadn\n*    3.1 X\u1eed l\u00fd d\u1eef li\u1ec7u \u0111\u1ea7u v\u00e0o.\n*    3.2 CNN\n* 4. \u0110\u00e1nh gi\u00e1\n\n> 1. Gi\u1edbi thi\u1ec7u\nPh\u01b0\u01a1ng ph\u00e1p t\u1eadp trung kh\u00e1 nhi\u1ec1u v\u00e0o vi\u1ec7c x\u1eed l\u00fd d\u1eef li\u1ec7u \u0111\u1ea7u v\u00e0o ban \u0111\u1ea7u b\u1eb1ng ph\u01b0\u01a1ng ph\u00e1p th\u1ee7 c\u00f4ng. Sau \u0111\u00f3 s\u1eed d\u1ee5ng m\u1ea1ng CNN \u0111\u1ec3 th\u1ef1c hi\u1ec7n vi\u1ec7c h\u1ecdc v\u00e0 ph\u00e2n lo\u1ea1i.\n2.1 \u0110\u1ecdc d\u1eef li\u1ec7u.\nD\u01b0\u1edbi \u0111\u00e2y m\u00ecnh c\u00f3 cung c\u1ea5p m\u1ed9t class \u0111\u1ec3 load t\u1ea5t c\u1ea3 file t\u1eeb folder l\u00ean ho\u1eb7c load theo t\u1eebng class ri\u00eang bi\u1ec7t.","13c69e0f":"4. \u0110\u00e1nh gi\u00e1 k\u1ebft qu\u1ea3.\n- \u0110\u1ea1t 0.99 v\u1edbi b\u1ed9 train\n- \u0110\u1ea1t 0.92 v\u1edbi b\u1ed9 public_test\n- \u0110\u1ea1t 0.92 v\u1edbi b\u1ed9 private_test","4b939a8d":"3.1 X\u1eed l\u00fd d\u1eef li\u1ec7u v\u00e0o:\nC\u00e1c b\u01b0\u1edbc: Load \u1ea3nh, resize(48, 48) + CLAHO, Tr\u1ed9n \u1ea3nh trong m\u1ed9t nh\u00e3n, Chia t\u1eadp train v\u00e0 test, \u0110a d\u1ea1ng d\u1eef li\u1ec7u, Tr\u1ed9n d\u1eef li\u1ec7u t\u1eadp train.","95e552d9":"![Model](https:\/\/i.imgur.com\/d7LLzpl.png)","aa4b9142":"3.2 CNN"}}