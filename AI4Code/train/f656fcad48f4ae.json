{"cell_type":{"a6a92d35":"code","71feaa3d":"code","2fa227d3":"code","0f26c799":"code","ffd1b813":"code","6a0c26e7":"code","8fd09435":"code","4d652c87":"code","d8865de3":"code","2889cab1":"code","7027a8ec":"code","95096c59":"code","27cffc78":"code","de7817d5":"code","942cbb60":"code","302a2b58":"code","4aa3aeb3":"code","80aefc84":"code","5d50572f":"code","4e225928":"code","441a2429":"markdown","1ffb3ddc":"markdown","459013e7":"markdown","4c7987cb":"markdown","e04a9624":"markdown","68f96474":"markdown","fab04214":"markdown","3cd24bfd":"markdown","c9b2231b":"markdown","ed591c06":"markdown","7a71984e":"markdown"},"source":{"a6a92d35":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom xgboost import XGBClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import classification_report, confusion_matrix, plot_confusion_matrix, precision_score, accuracy_score, roc_curve, auc","71feaa3d":"data = pd.read_csv('..\/input\/creditcardfraud\/creditcard.csv')\nprint(data.shape)\ndata.head()","2fa227d3":"data.info()","0f26c799":"data['Class'] = data['Class'].astype('category')","ffd1b813":"data.describe()","6a0c26e7":"classes = data['Class'].value_counts()\nclasses","8fd09435":"pie, ax = plt.subplots(figsize=[15,10])\nlabels = ['Non-fraud', 'Fraud']\ncolors = ['Salmon', 'Chartreuse']\nplt.pie(x = classes, autopct='%.1f%%', explode=[0.05]*2, labels=labels, pctdistance=0.5, colors = colors)\nplt.title('% of FRAUD & NON-FRAUD transactions')\nplt.show()","4d652c87":"zero_trans = data[data['Amount'] == 0]\ng = zero_trans['Class'].value_counts()\ng","d8865de3":"pie, ax = plt.subplots(figsize=[15,10])\nlabels = ['Non-fraud', 'Fraud']\ncolors = ['Salmon', 'Chartreuse']\nplt.pie(x = g, autopct='%.1f%%', explode=[0.05]*2, labels=labels, pctdistance=0.5, colors = colors)\nplt.title('% of FRAUD & NON-FRAUD transactions when AMOUNT is 0')\nplt.show()","2889cab1":"FRAUD = data[data['Class']==1]\nNONFRAUD = data[data['Class']==0]\n\nfig, ax = plt.subplots(2,1, figsize=(12, 8))\n\nax[0].hist(FRAUD['Amount'], bins=100, color='Chartreuse')\nax[0].set_title(\"Distribution of 'Amount' for FRAUD transactions\")\nax[0].grid()\nax[1].hist(NONFRAUD['Amount'], bins=100, color='Salmon')\nax[1].set_title(\"Distribution of 'Amount' for NON-FRAUD transactions\")\nax[1].grid()\n\nfig.text(0.5, 0.04, 'Amount', ha='center')\nfig.text(0.04, 0.5, 'Count', va='center', rotation='vertical')\n\n\nplt.show()","7027a8ec":"fig, ax = plt.subplots(2,1, figsize=(12,8))\n\nax[0].plot(FRAUD['Time'],FRAUD['Amount'], color='Chartreuse')\nax[0].set_title(\"'Amount' on 'Time' (seconds after transaction 0) for FRAUD transactions\")\nax[0].grid()\nax[1].plot(NONFRAUD['Time'], NONFRAUD['Amount'], color='Salmon')\nax[1].set_title(\"'Amount' on 'Time' (seconds after transaction 0) for NON-FRAUD transactions\")\nax[1].grid()\n\nfig.text(0.5, 0.04, 'Time', ha='center')\nfig.text(0.04, 0.5, 'Amount', va='center', rotation='vertical')\n\n\nplt.show()","95096c59":"v=[i for i in data.columns if 'V' in i]\n\nfig, ax = plt.subplots(2,1, figsize=(12,8))\nax[0].bar(v, FRAUD.describe().iloc[2,1:-1], color ='Chartreuse')\nax[0].set_title(\"Principal components STD for FRAUD transactions\")\nax[0].grid()\nax[1].bar(v, NONFRAUD.describe().iloc[2,1:-1], color ='Salmon')\nax[1].set_title(\"Principal components STD for NON-FRAUD transactions\")\nax[1].grid()\n\nfig.text(0.5, 0.04, 'Principal Components', ha='center')\nfig.text(0.04, 0.5, 'STD', va='center', rotation='vertical')\nplt.show()","27cffc78":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler","de7817d5":"df = data.copy()\n\nX = df.iloc[:, :-1]\ny = df.iloc[:, -1]\n\nprint(X.shape, y.shape)","942cbb60":"scaler = StandardScaler()\n\nX = scaler.fit_transform(X)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 123)\n\nprint(X_train.shape, y_train.shape)\nprint(X_test.shape, y_test.shape)","302a2b58":"models = [LogisticRegression(), KNeighborsClassifier(), RandomForestClassifier(), SVC(), XGBClassifier(), GaussianNB()]\n\nresults = []\nfor model in models:\n  #print(model)\n  model.fit(X_train, y_train)\n  y_hat = model.predict(X_test)\n  result = accuracy_score(y_test, y_hat)\n  results.append(result)\n\nresults = np.array(results)\nprint('\\n')\nprint('The best classifier:')\nprint(models[np.argmax(results)],'\\n', \"with the accuracy: \", results[np.argmax(results)])","4aa3aeb3":"RF = RandomForestClassifier()\nRF.fit(X_train, y_train)\n\npreds = RF.predict(X_test)","80aefc84":"plot_confusion_matrix(RF, X_test, y_test)\nplt.show()","5d50572f":"print(classification_report(y_test, preds))","4e225928":"probs = RF.predict_proba(X_test)\npred = probs[:,1]\nfpr, tpr, threshold = roc_curve(y_test, pred)\nroc_auc = auc(fpr, tpr)\n\nplt.title('ROC')\nplt.plot(fpr, tpr, 'b', label = 'AUC = %0.2f' % roc_auc)\nplt.legend(loc = 'lower right')\nplt.plot([0,1], [0,1], 'r--')\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.show()","441a2429":"# Reading the data","1ffb3ddc":"Out of 5692 TEST samples, the model misleads 30 samples.","459013e7":"# Libraries","4c7987cb":"# Preparation","e04a9624":"It contains only numerical input variables which are the result of a PCA transformation. Unfortunately, due to confidentiality issues, we cannot provide the original features and more background information about the data. Features V1, V2, \u2026 V28 are the principal components obtained with PCA, the only features which have not been transformed with PCA are 'Time' and 'Amount'. Feature 'Time' contains the seconds elapsed between each transaction and the first transaction in the dataset. The feature 'Amount' is the transaction Amount, this feature can be used for example-dependant cost-senstive learning. Feature 'Class' is the response variable and it takes value 1 in case of fraud and 0 otherwise.","68f96474":"## Random Forest","fab04214":"# <b color = 'red'>Credit Card Fraud Detection using Machine Learning <\/b>\n\nThe datasets contains transactions made by credit cards in September 2013 by european cardholders.\n\nThis dataset presents transactions that occurred in two days, where we have 492 frauds out of 284,807 transactions.\n\nThe dataset is highly unbalanced, the positive class (frauds) account for 0.172% of all transactions","3cd24bfd":"![](https:\/\/dfi.wa.gov\/sites\/default\/files\/credit-card-fraud-16x9.jpg)","c9b2231b":"# Exploration","ed591c06":"## Multiple classifiers evaluation","7a71984e":"# Modelling"}}