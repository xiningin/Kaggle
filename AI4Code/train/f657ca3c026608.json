{"cell_type":{"8173b524":"code","6f8fbd50":"code","ea35bed9":"code","75694f12":"code","8b429fce":"code","c9a8a8f8":"code","38555a79":"code","a6ee955a":"code","30b759a6":"code","a6501ac4":"code","d832a4d6":"code","24f355cd":"code","141b5782":"code","829d15ed":"code","1134ba0b":"code","a6c77fd5":"code","f7797703":"code","eb00dfb9":"code","79d71daf":"code","771a562d":"code","20636431":"code","3f0465f4":"code","f605f59e":"code","fc36b5cc":"code","55e0eadb":"code","40407d1c":"code","b0744aa2":"code","be70bf34":"markdown","e9ed1278":"markdown","91401715":"markdown","5b66da31":"markdown","682e388d":"markdown","8bd1538f":"markdown","e03ec70b":"markdown","2db25c1c":"markdown"},"source":{"8173b524":"# verify dataset is there\n!ls ..\/input","6f8fbd50":"%reload_ext autoreload\n%autoreload 2\n%matplotlib inline","ea35bed9":"# load fastai libraries\nfrom fastai.imports import *\nfrom fastai.torch_imports import *\nfrom fastai.transforms import *\nfrom fastai.conv_learner import *\nfrom fastai.model import *\nfrom fastai.dataset import *\nfrom fastai.sgdr import *\nfrom fastai.plots import *","75694f12":"# load additional libraries\nimport h5py","8b429fce":"# verify GPU\nprint(torch.cuda.is_available(), torch.backends.cudnn.enabled)","c9a8a8f8":"def load_dataset(path_to_train, path_to_test):\n    train_dataset = h5py.File(path_to_train)\n    train_x = np.array(train_dataset['train_set_x'][:])\n    train_y = np.array(train_dataset['train_set_y'][:])\n\n    test_dataset = h5py.File(path_to_test)\n    test_x = np.array(test_dataset['test_set_x'][:])\n    test_y = np.array(test_dataset['test_set_y'][:])\n\n    # y reshaped\n    train_y = train_y.reshape((1, train_x.shape[0]))\n    test_y = test_y.reshape((1, test_y.shape[0]))\n\n    return train_x, train_y, test_x, test_y","38555a79":"PATH = \"..\/input\"\nX_train, Y_train, X_test, Y_test = load_dataset(f\"{PATH}\/train_happy.h5\", f\"{PATH}\/test_happy.h5\")\n# swap dimensions (Andrew Ng likes them flipped around)\nY_train = Y_train.T.squeeze()\nY_test = Y_test.T.squeeze()","a6ee955a":"print(X_train.shape, Y_train.shape)\nprint(X_test.shape, Y_test.shape)","30b759a6":"# visualize a training example\nplt.imshow(X_train[0])","a6501ac4":"# and it's label\nY_train[0]","d832a4d6":"# setup architecture\narch = resnet34\nsz = 64\nbs = 10","24f355cd":"wd = '\/kaggle\/working'\ndef get_data(sz):\n    tfms = tfms_from_model(arch, sz, aug_tfms=transforms_side_on, max_zoom=1.1)\n    return ImageClassifierData.from_arrays(path=f\"{wd}\", \n                                       trn=(X_train, Y_train),\n                                       val=(X_test, Y_test),\n                                       bs=bs,\n                                       classes=Y_train,\n                                       tfms=tfms)","141b5782":"data = get_data(sz)","829d15ed":"# run learner with precompute enabled\nlearn = ConvLearner.pretrained(arch, data, precompute=True)","1134ba0b":"# find optimal learning rate\nlrf = learn.lr_find()\nlearn.sched.plot()","a6c77fd5":"lr = 0.01","f7797703":"# increase batch size\n# could increase learning rate as well, but current one works just as well\n# learning rate finder doesn't work with larger batch size due to lack of training examples\nbs=30\ndata = get_data(sz)","eb00dfb9":"# train\nlearn.fit(lr, 7, cycle_len=1, cycle_mult=2)","79d71daf":"learn.sched.plot_loss()","771a562d":"# add test time augmentation\nlog_preds,y = learn.TTA()\nprobs = np.mean(np.exp(log_preds),0)","20636431":"accuracy_np(probs, y)","3f0465f4":"preds = np.argmax(probs, axis=1)\nprobs = probs[:,1]","f605f59e":"from sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y, preds)","fc36b5cc":"classes = np.unique(Y_train)\nplot_confusion_matrix(cm, classes)","55e0eadb":"def load_img_id(idx):\n    #print(idx)\n    img = X_test[idx].reshape(64,64,3)\n    return img\n\ndef plot_val_with_title(idxs, title):\n    print(idxs)\n    imgs = [load_img_id(x) for x in idxs]\n    title_probs = [(preds[x], y[x]) for x in idxs]\n    print(title)\n    return plots(imgs, rows=4, titles=title_probs, figsize=(16,8)) if len(imgs)>0 else print('Not Found.')","40407d1c":"# count incorrect predictions\nincorrect_digits = np.where(preds != y)[0]\nlen(incorrect_digits)","b0744aa2":"# visualize incorrect predictions\nplot_val_with_title(incorrect_digits, \"Incorrect digits (prediction, label)\")","be70bf34":"### Confusion Matrix","e9ed1278":"# About","91401715":"# Setup","5b66da31":"# Inspect data","682e388d":"### Incorrect predictions","8bd1538f":"# Results","e03ec70b":"Detect if a person is smiling or not.  Dataset is from Coursera Deep Learning Specialization - Course 4 - Convolutional Neural Networks.","2db25c1c":"# Model"}}