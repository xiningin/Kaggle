{"cell_type":{"6ceb56d4":"code","0a11ad6b":"code","dd2289f3":"code","e3d5601a":"code","1551c450":"code","902ce26c":"code","bc0bcec8":"code","947af403":"code","5755f073":"code","bd57af72":"code","98b9edd3":"code","59acf683":"code","b316b61d":"code","d51cb992":"code","8302fc2c":"code","052b7bb1":"code","547f847b":"code","9f52b12f":"code","854ab976":"code","0cab03ae":"code","98b427f6":"code","27a58430":"code","a089b529":"code","8e690d62":"markdown","16452e2b":"markdown","40b64b40":"markdown","da99baf2":"markdown","146040d0":"markdown","e06da1a3":"markdown","b1a11161":"markdown","c18f40f0":"markdown","d30f9039":"markdown","6a81afcd":"markdown","69cf8568":"markdown"},"source":{"6ceb56d4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0a11ad6b":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nplt.style.use(\"fivethirtyeight\")\nsns.set_style(\"darkgrid\")","dd2289f3":"from sklearn.preprocessing import StandardScaler, LabelEncoder\nfrom sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score, KFold","e3d5601a":"train = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-apr-2021\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-apr-2021\/test.csv\")\nsub = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-apr-2021\/sample_submission.csv\")","1551c450":"train.head()","902ce26c":"test.head()","bc0bcec8":"sub.head()","947af403":"print('Rows and Columns in train dataset:', train.shape)\nprint('Rows and Columns in test dataset:', test.shape)","5755f073":"print('Missing values per columns in train dataset')\nfor col in train.columns:\n    train_col = train[col].isnull().sum()\n    print(f'{col}: {train_col}')","bd57af72":"print('Missing values per columns in test dataset')\nfor col in test.columns:\n    test_col = test[col].isnull().sum()\n    print(f'{col}: {test_col}')","98b9edd3":"train = train.drop(['PassengerId', 'Name', 'Cabin'], axis=1)\ntest = test.drop(['PassengerId', 'Name', 'Cabin'], axis=1)","59acf683":"display(train.head(2))\ndisplay(test.head(2))","b316b61d":"# Fill Missing values in train and test\ntrain['Age'] = train['Age'].fillna(train['Age'].mean())\ntest['Age'] = test['Age'].fillna(test['Age'].mean())\n\ntrain['Fare'] = train['Fare'].fillna(train['Fare'].mean())\ntest['Fare'] = test['Fare'].fillna(test['Fare'].mean())","d51cb992":"le = LabelEncoder()\n\ntrain['Sex'] = le.fit_transform(train['Sex'])\ntrain['Embarked'] = le.fit_transform(train['Embarked'])\n\ntest['Sex'] = le.fit_transform(test['Sex'])\ntest['Embarked'] = le.fit_transform(test['Embarked'])","8302fc2c":"tickets = train['Ticket'].str.split()\ntickets = [\n    ticket[-1] if len(ticket) > 1 else ticket[0] \n    for ticket in [\n        ['9999999999'] if ticket is np.nan else ticket \n    for ticket in tickets]\n]\ntickets = [int(elem) if elem.isdigit() else 9999999999 for elem in tickets]\ntrain['Ticket'] = tickets\n\ntickets = test['Ticket'].str.split()\ntickets = [\n    ticket[-1] if len(ticket) > 1 else ticket[0] \n    for ticket in [\n        ['9999999999'] if ticket is np.nan else ticket \n    for ticket in tickets]\n]\ntickets = [int(elem) if elem.isdigit() else 9999999999 for elem in tickets]\ntest['Ticket'] = tickets","052b7bb1":"y = train.loc[:, ['Survived']]\nX = train.drop(axis=1, columns=['Survived'])","547f847b":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","9f52b12f":"!pip install auto-sklearn","854ab976":"import autosklearn\nprint(autosklearn.__version__)","0cab03ae":"import autosklearn.classification\ncls = autosklearn.classification.AutoSklearnClassifier(\n    time_left_for_this_task=10*60,\n    per_run_time_limit=60,\n    n_jobs=-1)\ncls.fit(X_train, y_train)","98b427f6":"predictions = cls.predict(test)","27a58430":"# Print the final ensemble constructed by auto-sklearn\nprint(cls.show_models())","a089b529":"sub['Survived'] = predictions\nsub.to_csv('submission.csv', index=False)","8e690d62":"## <p style=\"background-color:magenta; font-family:newtimeroman; font-size:140%; text-align:center; border-radius: 15px 50px;\">Load Data","16452e2b":"## <p style=\"background-color:magenta; font-family:newtimeroman; font-size:140%; text-align:center; border-radius: 15px 50px;\">EDA(Exploratory Data Analysis)","40b64b40":"### a) Missing Values","da99baf2":"## <p style=\"background-color:magenta; font-family:newtimeroman; font-size:140%; text-align:center; border-radius: 15px 50px;\">Submission","146040d0":"- Print First 5 rows in the submission dataset","e06da1a3":"## <p style=\"background-color:magenta; font-family:newtimeroman; font-size:140%; text-align:center; border-radius: 15px 50px;\">Import Required Libraries","b1a11161":"## <p style=\"background-color:magenta; font-family:newtimeroman; font-size:140%; text-align:center; border-radius: 15px 50px;\">Feature Engineering","c18f40f0":"## First 5 rows\n- Print First 5 rows in the train dataset","d30f9039":"- Print First 5 rows in the test dataset","6a81afcd":"### Numbers of rows and columns","69cf8568":"## <p style=\"background-color:magenta; font-family:newtimeroman; font-size:140%; text-align:center; border-radius: 15px 50px;\">Auto-Sklearn"}}