{"cell_type":{"60d7cf9f":"code","166fbedf":"code","eb3582c3":"code","04af9c18":"code","5f762d93":"code","b56c9398":"code","486964e4":"code","2eec1822":"code","6ea34cb3":"code","d6a4b0bd":"code","7195a3cf":"code","25b86e10":"code","c81134c9":"code","febddaba":"code","72c56caa":"code","3c9e7dfb":"code","0c2c45ae":"code","c2002d65":"code","5690d029":"code","d55984ad":"code","5e4e89f5":"code","7f9c669b":"code","92f634c7":"code","19e885f5":"code","abf87a9a":"code","f0e1c47e":"code","96e0580b":"code","d3551566":"code","e0cc6fc3":"code","58812b9c":"code","b97b3c58":"code","68ca8b60":"code","21ed1561":"code","9907fb91":"code","8d322388":"code","9f7bfd23":"code","8acf8964":"code","03e867bd":"code","eed37330":"code","46e49d7e":"code","d2d1a467":"code","aaed9ed0":"code","055055ae":"code","d72cce7c":"code","45a66a66":"markdown","8d29484a":"markdown","39ff6ff9":"markdown","cf03d311":"markdown"},"source":{"60d7cf9f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","166fbedf":"df=pd.read_csv(\"..\/input\/HR-Employee-Attrition.csv\")\ndf.head()\n","eb3582c3":"df.info()","04af9c18":"df.duplicated().sum()","5f762d93":"df.describe().T","b56c9398":"df.Attrition.value_counts()","486964e4":"df.BusinessTravel.value_counts()","2eec1822":"df.Department.value_counts()","6ea34cb3":"df.EducationField.value_counts()","d6a4b0bd":"df.Gender.value_counts()","7195a3cf":"df.JobRole.value_counts()","25b86e10":"df.MaritalStatus.value_counts()","c81134c9":"df.Over18.value_counts()","febddaba":"df.OverTime.value_counts()","72c56caa":"df['Attrition'].replace({'No':0,'Yes':1},inplace=True)","3c9e7dfb":"df.corr().Attrition","0c2c45ae":"cat_col = df.select_dtypes(exclude=np.number).columns\nnum_col = df.select_dtypes(include=np.number).columns\n\n","c2002d65":"encoded_cat_col = pd.get_dummies(df[cat_col])","5690d029":"emp_ready_model = pd.concat([df[num_col],encoded_cat_col], axis = 1)","d55984ad":"X = emp_ready_model.drop(columns='Attrition')\ny = emp_ready_model['Attrition']\n                         ","5e4e89f5":"from sklearn.model_selection import train_test_split\nimport warnings\nwarnings.filterwarnings('ignore')","7f9c669b":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn import metrics\nlogreg = LogisticRegression()\nlogreg.fit(X_train, y_train)","92f634c7":"train_Pred = logreg.predict(X_train)","19e885f5":"metrics.confusion_matrix(y_train,train_Pred)","abf87a9a":"metrics.accuracy_score(y_train,train_Pred)","f0e1c47e":"test_Pred = logreg.predict(X_test)","96e0580b":"metrics.confusion_matrix(y_test,test_Pred)","d3551566":"metrics.accuracy_score(y_test,test_Pred)","e0cc6fc3":"from sklearn.metrics import classification_report\nprint(classification_report(y_test, test_Pred))","58812b9c":"\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import roc_curve\nlogit_roc_auc = roc_auc_score(y_test, logreg.predict(X_test))\nfpr, tpr, thresholds = roc_curve(y_test, logreg.predict_proba(X_test)[:,1])\nplt.figure()\nplt.plot(fpr, tpr, label='Logistic Regression (area = %0.2f)' % logit_roc_auc)\nplt.plot([0, 1], [0, 1],'r--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver operating characteristic')\nplt.legend(loc=\"lower right\")\nplt.savefig('Log_ROC')\nplt.show()","b97b3c58":"emp_ready_model.head()","68ca8b60":"X = emp_ready_model.drop(columns='Attrition').values\ny = emp_ready_model['Attrition'].values\n                  ","21ed1561":"from sklearn import preprocessing\nX = preprocessing.StandardScaler().fit(X).transform(X.astype(float))\nX[0:5]","9907fb91":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split( X, y, test_size=0.2, random_state=4)\nprint ('Train set:', X_train.shape,  y_train.shape)\nprint ('Test set:', X_test.shape,  y_test.shape)","8d322388":"from sklearn.neighbors import KNeighborsClassifier, KNeighborsRegressor","9f7bfd23":"k = 5\n#Train Model and Predict  \nneigh = KNeighborsClassifier(n_neighbors = k).fit(X_train,y_train)\nneigh","8acf8964":"yhat = neigh.predict(X_test)\nyhat[0:5]","03e867bd":"from sklearn import neighbors\nfrom sklearn.metrics import mean_squared_error \nfrom math import sqrt\nimport matplotlib.pyplot as plt\n%matplotlib inline","eed37330":"from sklearn import metrics\nprint(\"Train set Accuracy: \", metrics.accuracy_score(y_train, neigh.predict(X_train)))\nprint(\"Test set Accuracy: \", metrics.accuracy_score(y_test, yhat))","46e49d7e":"metrics.confusion_matrix(y_train, neigh.predict(X_train))","d2d1a467":"metrics.confusion_matrix(y_test, yhat)","aaed9ed0":"Ks = 800\nmean_acc = np.zeros((Ks-1))\nstd_acc = np.zeros((Ks-1))\nConfustionMx = [];\nfor n in range(1,Ks):\n    \n    #Train Model and Predict  \n    neigh = KNeighborsClassifier(n_neighbors = n).fit(X_train,y_train)\n    yhat=neigh.predict(X_test)\n    mean_acc[n-1] = metrics.accuracy_score(y_test, yhat)\n\n    \n    std_acc[n-1]=np.std(yhat==y_test)\/np.sqrt(yhat.shape[0])\n\nmean_acc","055055ae":"plt.plot(range(1,Ks),mean_acc,'g')\nplt.fill_between(range(1,Ks),mean_acc - 1 * std_acc,mean_acc + 1 * std_acc, alpha=0.10)\nplt.legend(('Accuracy ', '+\/- 3xstd'))\nplt.ylabel('Accuracy ')\nplt.xlabel('Number of Nabors (K)')\nplt.tight_layout()\nplt.show()","d72cce7c":"print( \"The best accuracy was with\", mean_acc.max(), \"with k=\", mean_acc.argmax()+1)","45a66a66":"cat_col = df.select_dtypes(exclude=np.number).columns\nnum_col = df.select_dtypes(include=np.number).columns\nprint(cat_col)\nprint(num_col)\nplt.figure(figsize=(40,40))\nsns.heatmap(data=df[num_col],annot=True)","8d29484a":"KNN algorithm","39ff6ff9":"There is no null values and duplicate rows","cf03d311":"import matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns"}}