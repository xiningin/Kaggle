{"cell_type":{"b3c00d32":"code","0cce9fba":"code","4479a38d":"code","bc2907b5":"code","976db648":"code","bd4ebe4c":"code","a7c617ae":"code","b8d6e180":"code","c79b8b85":"code","d207397e":"code","3eabfa77":"code","5d6ce9c7":"code","4830758c":"code","29301366":"code","1af0a1af":"code","1887d505":"code","8751535c":"code","8be6bdb5":"code","f2a0aefd":"code","063d4b79":"code","04722d98":"code","071e714c":"code","e92602b8":"code","94fb516c":"code","2ed6efeb":"code","0e70f9b0":"code","93128319":"code","6ca583ab":"code","203e6461":"code","1025b7ef":"code","3ad4d4e7":"code","1a75e21d":"code","81e44d75":"code","bbea67f3":"markdown","5642659f":"markdown","cea86842":"markdown","9ad03244":"markdown","10a3b1f9":"markdown","2c4c7400":"markdown","68f1aa44":"markdown","817a8b88":"markdown","91441bec":"markdown","32188da2":"markdown","14bac55b":"markdown","7049511c":"markdown","62945595":"markdown","a7abff87":"markdown","0896cdcb":"markdown","edab6b82":"markdown","5e9a9632":"markdown","cae45667":"markdown","afb4c3f5":"markdown","e2c3c92a":"markdown","3dcd4158":"markdown","41211a43":"markdown","97fab432":"markdown","b8f430a5":"markdown","4a367bf6":"markdown","457229be":"markdown","6a877723":"markdown","8645db7e":"markdown","6518d45c":"markdown","2a9310a1":"markdown","0fc4d8e8":"markdown","a96d9aac":"markdown","62bcbbb0":"markdown","90d52f96":"markdown","c3a60dfd":"markdown","dc549078":"markdown","e3ac9da2":"markdown","826e4730":"markdown","4a041070":"markdown","57ccc532":"markdown","4b0ac6ad":"markdown","a196f16c":"markdown","39d8dbe0":"markdown","da3f6f3c":"markdown","983f9cf2":"markdown","ae11181d":"markdown","457f29e5":"markdown","6006d591":"markdown","253b36af":"markdown","a1c01eb2":"markdown","fef14868":"markdown","aba6e581":"markdown","8bf01982":"markdown","a593bfcf":"markdown","6bd35baa":"markdown","1839798d":"markdown"},"source":{"b3c00d32":"#for data wrangling \/ cleaning\nimport pandas as pd\nimport numpy as np\nimport math\nprint(\"Data Wrangling \/ Cleaning Libraries Imported Successfully\")\n\n#for data visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\nprint(\"Data Visualization Libraries Imported Successfully\")\n\n#for machine learning\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nprint(\"Machine Learning Libraries Imported Successfully\")","0cce9fba":"#import datasets using filepath\nfilepath_test = \"..\/input\/mobile-price-classification\/test.csv\"\nfilepath_train = \"..\/input\/mobile-price-classification\/train.csv\"\n\n#assign datasets to variable\ntrain = pd.read_csv(filepath_train)\ntest = pd.read_csv(filepath_test)\n\n#concatenate the two datasets into one\ndata = pd.concat([train, test])\n\n#view the first 10 values of the data dataset\ndata.head(10)","4479a38d":"#view the first 10 values of the train dataset\ntrain.head(10)","bc2907b5":"#view the first 10 values of the test dataset\ntest.head(10)","976db648":"data.columns","bd4ebe4c":"# to convert to numeric datatype\ncols = ['battery_power', 'blue', 'clock_speed', 'dual_sim', 'fc', 'four_g', 'int_memory', 'm_dep', 'mobile_wt', 'n_cores', 'pc', 'px_height', 'px_width', 'ram', 'sc_h', 'sc_w', 'talk_time', 'three_g','touch_screen', 'wifi', 'price_range']\ntrain[cols] = train[cols].apply(pd.to_numeric, errors='coerce', axis=1)\n\n# remove columns from dataset\ntrain = train.drop(['m_dep', 'mobile_wt', 'px_height', 'px_width', 'n_cores', 'talk_time'], axis=1)\ntrain","a7c617ae":"#to calculate the diagonal size of the phone\ntrain['ph_size'] = np.sqrt(train[\"sc_h\"]**2 + train[\"sc_w\"]**2)\ntrain['ph_size'] = train['ph_size'].round(decimals=1)\ntrain.head()","b8d6e180":"# dividing and grouping column battery_power\ntrain['BatteryBand'] = pd.cut(train['battery_power'], 4)\nbb = train[['BatteryBand', 'price_range']].groupby(['BatteryBand'], as_index=False).mean().sort_values(by='BatteryBand', ascending=True)\n\n# dividing and grouping column clock_speed\ntrain['clockBand'] = pd.cut(train['clock_speed'], 4)\ncb = train[['clockBand', 'price_range']].groupby(['clockBand'], as_index=False).mean().sort_values(by='clockBand', ascending=True)\n\n# dividing and grouping column fc\ntrain['fcBand'] = pd.cut(train['fc'], 4)\nfb = train[['fcBand', 'price_range']].groupby(['fcBand'], as_index=False).mean().sort_values(by='fcBand', ascending=True)\n\n# dividing and grouping column int_memory\ntrain['intmemBand'] = pd.cut(train['int_memory'], 4)\nib = train[['intmemBand', 'price_range']].groupby(['intmemBand'], as_index=False).mean().sort_values(by='intmemBand', ascending=True)\n\n# dividing and grouping column pc\ntrain['pcBand'] = pd.cut(train['pc'], 4)\npb = train[['pcBand', 'price_range']].groupby(['pcBand'], as_index=False).mean().sort_values(by='pcBand', ascending=True)\n\n# dividing and grouping column ph_size\ntrain['sizeBand'] = pd.cut(train['ph_size'], 4)\nsb = train[['sizeBand', 'price_range']].groupby(['sizeBand'], as_index=False).mean().sort_values(by='sizeBand', ascending=True)\n\n# dividing and grouping column ram\ntrain['ramBand'] = pd.cut(train['ram'], 4)\nrb = train[['ramBand', 'price_range']].groupby(['ramBand'], as_index=False).mean().sort_values(by='ramBand', ascending=True)\n\n# grouping column blue\nblb = train[['blue', 'price_range']].groupby(['blue'], as_index=False).mean()\n\n# grouping column dual_sim\ndsb = train[['dual_sim', 'price_range']].groupby(['dual_sim'], as_index=False).mean()\n\n# grouping column four_g\nfob = train[['four_g', 'price_range']].groupby(['four_g'], as_index=False).mean()\n\n# grouping column touch_screen\ntsb = train[['touch_screen', 'price_range']].groupby(['touch_screen'], as_index=False).mean()\n\n# grouping column wifi\nwfb = train[['wifi', 'price_range']].groupby(['wifi'], as_index=False).mean()\n\n# printing results\nprint(bb, '\\n')\nprint(cb, '\\n')\nprint(fb, '\\n')\nprint(ib, '\\n')\nprint(pb, '\\n')\nprint(sb, '\\n')\nprint(blb, '\\n')\nprint(dsb, '\\n')\nprint(fob, '\\n')\nprint(tsb, '\\n')\nprint(wfb, '\\n')","c79b8b85":"#plotting Graph\nfig, ax = plt.subplots(figsize=(10,5))\nplt.rcParams['font.sans-serif'] = 'Arial'\nplt.rcParams['font.family'] = 'sans-serif'\nplt.rcParams['text.color'] = '#000000'\nplt.rcParams['axes.labelcolor']= '#000000'\nplt.rcParams['xtick.color'] = '#000000'\nplt.rcParams['ytick.color'] = '#000000'\nplt.rcParams['font.size']=14\n\nsns.despine()\nsns.set_style(\"white\")\nsns_battery_price = sns.barplot(x='BatteryBand', y='price_range', data=bb.reset_index(), label=\"BatteryBand\", ax=ax)\nax.set_title(\"Average Price Range based on Battery Size\", fontsize=17)\nax.set_ylabel(\"Average Price Range\")\nax.set_xlabel(\"Battery Size Range (in mAh)\")\nax.set_xticklabels(['499.5 - 875.25', '875.25 - 1249.5', '1249.5 - 1623.75', '1623.75 - 1998.0'], rotation=-30)\nplt.show()","d207397e":"#plotting Graph\nfig, ax = plt.subplots(figsize=(10,5))\nplt.rcParams['font.sans-serif'] = 'Arial'\nplt.rcParams['font.family'] = 'sans-serif'\nplt.rcParams['text.color'] = '#000000'\nplt.rcParams['axes.labelcolor']= '#000000'\nplt.rcParams['xtick.color'] = '#000000'\nplt.rcParams['ytick.color'] = '#000000'\nplt.rcParams['font.size']=14\n\nsns.despine()\nsns.set_style(\"white\")\nsns_battery_price = sns.barplot(x='clockBand', y='price_range', data=cb.reset_index(), label=\"clockBand\", ax=ax)\nax.set_title(\"Average Price Range based on Clock Speed\", fontsize=17)\nax.set_ylabel(\"Average Price Range\")\nax.set_xlabel(\"Clock Speed Range (in GHz)\")\nax.set_xticklabels(['0.5 - 1.125', '1.125 - 1.75', '1.75 - 2.375', '2.375 - 3.0'], rotation=-30)\nplt.show()","3eabfa77":"#plotting Graph\nfig, ax = plt.subplots(figsize=(10,5))\nplt.rcParams['font.sans-serif'] = 'Arial'\nplt.rcParams['font.family'] = 'sans-serif'\nplt.rcParams['text.color'] = '#000000'\nplt.rcParams['axes.labelcolor']= '#000000'\nplt.rcParams['xtick.color'] = '#000000'\nplt.rcParams['ytick.color'] = '#000000'\nplt.rcParams['font.size']=14\n\nsns.despine()\nsns.set_style(\"white\")\nsns_battery_price = sns.barplot(x='fcBand', y='price_range', data=fb.reset_index(), label=\"fcBand\", ax=ax)\nax.set_title(\"Average Price Range based on Front Camera Resolution\", fontsize=17)\nax.set_ylabel(\"Average Price Range\")\nax.set_xlabel(\"Front Camera Resolution Range (in pixels)\")\nax.set_xticklabels(['0 - 4.75', '4.75 - 9.5', '9.5 - 14.25', '14.25 - 19.0'], rotation=-30)\nplt.show()","5d6ce9c7":"#plotting Graph\nfig, ax = plt.subplots(figsize=(10,5))\nplt.rcParams['font.sans-serif'] = 'Arial'\nplt.rcParams['font.family'] = 'sans-serif'\nplt.rcParams['text.color'] = '#000000'\nplt.rcParams['axes.labelcolor']= '#000000'\nplt.rcParams['xtick.color'] = '#000000'\nplt.rcParams['ytick.color'] = '#000000'\nplt.rcParams['font.size']=14\n\nsns.despine()\nsns.set_style(\"white\")\nsns_battery_price = sns.barplot(x='intmemBand', y='price_range', data=ib.reset_index(), label=\"intmemBand\", ax=ax)\nax.set_title(\"Average Price Range based on Internal Memory\", fontsize=17)\nax.set_ylabel(\"Average Price Range\")\nax.set_xlabel(\"Internal Memory Range (in GB)\")\nax.set_xticklabels(['1.9 - 17.5', '17.5 - 33.0', '33.0 - 48.5', '48.5 - 64.0'], rotation=-30)\nplt.show()","4830758c":"#plotting Graph\nfig, ax = plt.subplots(figsize=(10,5))\nplt.rcParams['font.sans-serif'] = 'Arial'\nplt.rcParams['font.family'] = 'sans-serif'\nplt.rcParams['text.color'] = '#000000'\nplt.rcParams['axes.labelcolor']= '#000000'\nplt.rcParams['xtick.color'] = '#000000'\nplt.rcParams['ytick.color'] = '#000000'\nplt.rcParams['font.size']=14\n\nsns.despine()\nsns.set_style(\"white\")\nsns_battery_price = sns.barplot(x='pcBand', y='price_range', data=pb.reset_index(), label=\"pcBand\", ax=ax)\nax.set_title(\"Average Price Range based on Primary Camera\", fontsize=17)\nax.set_ylabel(\"Average Price Range\")\nax.set_xlabel(\"Primary Camera Resolution (in pixels)\")\nax.set_xticklabels(['0 - 5.0', '5.0 - 10.0', '10.0 - 15.0', '15.0 - 20.0'], rotation=-30)\nplt.show()","29301366":"#plotting Graph\nfig, ax = plt.subplots(figsize=(10,5))\nplt.rcParams['font.sans-serif'] = 'Arial'\nplt.rcParams['font.family'] = 'sans-serif'\nplt.rcParams['text.color'] = '#000000'\nplt.rcParams['axes.labelcolor']= '#000000'\nplt.rcParams['xtick.color'] = '#000000'\nplt.rcParams['ytick.color'] = '#000000'\nplt.rcParams['font.size']=14\n\nsns.despine()\nsns.set_style(\"white\")\nsns_battery_price = sns.barplot(x='sizeBand', y='price_range', data=sb.reset_index(), label=\"sizeBand\", ax=ax)\nax.set_title(\"Average Price Range based on Screen Size\", fontsize=17)\nax.set_ylabel(\"Average Price Range\")\nax.set_xlabel(\"Screen Size (in cm)\")\nax.set_xticklabels(['4.9 - 10.3', '10.3 - 15.6', '15.6 - 20.9', '20.9 - 26.2'], rotation=-30)\nplt.show()","1af0a1af":"#plotting Graph\nfig, ax = plt.subplots(figsize=(10,5))\nplt.rcParams['font.sans-serif'] = 'Arial'\nplt.rcParams['font.family'] = 'sans-serif'\nplt.rcParams['text.color'] = '#000000'\nplt.rcParams['axes.labelcolor']= '#000000'\nplt.rcParams['xtick.color'] = '#000000'\nplt.rcParams['ytick.color'] = '#000000'\nplt.rcParams['font.size']=14\n\nsns.despine()\nsns.set_style(\"white\")\nsns_battery_price = sns.barplot(x='blue', y='price_range', data=blb.reset_index(), label=\"blue\", ax=ax)\nax.set_title(\"Average Price Range based on Bluetooth Availability\", fontsize=17)\nax.set_ylabel(\"Average Price Range\")\nax.set_xlabel(\"Bluetooth Availability\")\nax.set_xticklabels(['No', 'Yes'], rotation=-30)\nplt.show()","1887d505":"#plotting Graph\nfig, ax = plt.subplots(figsize=(10,5))\nplt.rcParams['font.sans-serif'] = 'Arial'\nplt.rcParams['font.family'] = 'sans-serif'\nplt.rcParams['text.color'] = '#000000'\nplt.rcParams['axes.labelcolor']= '#000000'\nplt.rcParams['xtick.color'] = '#000000'\nplt.rcParams['ytick.color'] = '#000000'\nplt.rcParams['font.size']=14\n\nsns.despine()\nsns.set_style(\"white\")\nsns_battery_price = sns.barplot(x='dual_sim', y='price_range', data=dsb.reset_index(), label=\"dual_sim\", ax=ax)\nax.set_title(\"Average Price Range based on Dual SIM Availability\", fontsize=17)\nax.set_ylabel(\"Average Price Range\")\nax.set_xlabel(\"Dual SIM Availability\")\nax.set_xticklabels(['No', 'Yes'], rotation=-30)\nplt.show()","8751535c":"#plotting Graph\nfig, ax = plt.subplots(figsize=(10,5))\nplt.rcParams['font.sans-serif'] = 'Arial'\nplt.rcParams['font.family'] = 'sans-serif'\nplt.rcParams['text.color'] = '#000000'\nplt.rcParams['axes.labelcolor']= '#000000'\nplt.rcParams['xtick.color'] = '#000000'\nplt.rcParams['ytick.color'] = '#000000'\nplt.rcParams['font.size']=14\n\nsns.despine()\nsns.set_style(\"white\")\nsns_battery_price = sns.barplot(x='four_g', y='price_range', data=fob.reset_index(), label=\"four_g\", ax=ax)\nax.set_title(\"Average Price Range based on 4G Availability\", fontsize=17)\nax.set_ylabel(\"Average Price Range\")\nax.set_xlabel(\"4G Availability\")\nax.set_xticklabels(['No', 'Yes'], rotation=-30)\nplt.show()","8be6bdb5":"#plotting Graph\nfig, ax = plt.subplots(figsize=(10,5))\nplt.rcParams['font.sans-serif'] = 'Arial'\nplt.rcParams['font.family'] = 'sans-serif'\nplt.rcParams['text.color'] = '#000000'\nplt.rcParams['axes.labelcolor']= '#000000'\nplt.rcParams['xtick.color'] = '#000000'\nplt.rcParams['ytick.color'] = '#000000'\nplt.rcParams['font.size']=14\n\nsns.despine()\nsns.set_style(\"white\")\nsns_battery_price = sns.barplot(x='touch_screen', y='price_range', data=tsb.reset_index(), label=\"touch_screen\", ax=ax)\nax.set_title(\"Average Price Range based on Touch Screen Availability\", fontsize=17)\nax.set_ylabel(\"Average Price Range\")\nax.set_xlabel(\"Touchscreen Availability\")\nax.set_xticklabels(['No', 'Yes'], rotation=-30)\nplt.show()","f2a0aefd":"#plotting Graph\nfig, ax = plt.subplots(figsize=(10,5))\nplt.rcParams['font.sans-serif'] = 'Arial'\nplt.rcParams['font.family'] = 'sans-serif'\nplt.rcParams['text.color'] = '#000000'\nplt.rcParams['axes.labelcolor']= '#000000'\nplt.rcParams['xtick.color'] = '#000000'\nplt.rcParams['ytick.color'] = '#000000'\nplt.rcParams['font.size']=14\n\nsns.despine()\nsns.set_style(\"white\")\nsns_battery_price = sns.barplot(x='wifi', y='price_range', data=wfb.reset_index(), label=\"wifi\", ax=ax)\nax.set_title(\"Average Price Range based on WiFi Availability\", fontsize=17)\nax.set_ylabel(\"Average Price Range\")\nax.set_xlabel(\"WiFi Availability\")\nax.set_xticklabels(['No', 'Yes'], rotation=-30)\nplt.show()","063d4b79":"# view the first 10 values of the train dataset\ntrain.head(10)","04722d98":"# segregate battery_power\ntrain.loc[ train['battery_power'] <= 875.25, 'battery_power'] = 0\ntrain.loc[(train['battery_power'] > 875.25) & (train['battery_power'] <= 1249.5), 'battery_power'] = 1\ntrain.loc[(train['battery_power'] > 1249.5) & (train['battery_power'] <= 1623.75), 'battery_power'] = 2\ntrain.loc[ train['battery_power'] > 1623.75, 'battery_power'] = 3\n\n# segregate clock_speed\ntrain.loc[ train['clock_speed'] <= 1.125, 'clock_speed'] = 0\ntrain.loc[(train['clock_speed'] > 1.125) & (train['clock_speed'] <= 1.75), 'clock_speed'] = 1\ntrain.loc[(train['clock_speed'] > 1.75) & (train['clock_speed'] <= 2.375), 'clock_speed'] = 2\ntrain.loc[ train['clock_speed'] > 2.375, 'clock_speed'] = 3\n\n# segregate fc\ntrain.loc[ train['fc'] <= 4.75, 'fc'] = 0\ntrain.loc[(train['fc'] > 4.75) & (train['fc'] <= 9.5), 'fc'] = 1\ntrain.loc[(train['fc'] > 9.5) & (train['fc'] <= 14.25), 'fc'] = 2\ntrain.loc[ train['fc'] > 14.25, 'fc'] = 3\n\n# segregate int_memory\ntrain.loc[ train['int_memory'] <= 17.5, 'int_memory'] = 0\ntrain.loc[(train['int_memory'] > 17.5) & (train['int_memory'] <= 33), 'int_memory'] = 1\ntrain.loc[(train['int_memory'] > 33) & (train['int_memory'] <= 48.5), 'int_memory'] = 2\ntrain.loc[ train['int_memory'] > 48.5, 'int_memory'] = 3\n\n# segregate pc\ntrain.loc[ train['pc'] <= 5, 'pc'] = 0\ntrain.loc[(train['pc'] > 5) & (train['pc'] <= 10), 'pc'] = 1\ntrain.loc[(train['pc'] > 10) & (train['pc'] <= 15), 'pc'] = 2\ntrain.loc[ train['pc'] > 15, 'pc'] = 3\n\n# segregate ram\ntrain.loc[ train['ram'] <= 1191.5, 'ram'] = 0\ntrain.loc[(train['ram'] > 1191.5) & (train['ram'] <= 2127), 'ram'] = 1\ntrain.loc[(train['ram'] > 2127) & (train['ram'] <= 3062.5), 'ram'] = 2\ntrain.loc[ train['ram'] > 3062.5, 'ram'] = 3\n\n# segregate ph_size\ntrain.loc[ train['ph_size'] <= 10.3, 'ph_size'] = 0\ntrain.loc[(train['ph_size'] > 10.3) & (train['ph_size'] <= 15.6), 'ph_size'] = 1\ntrain.loc[(train['ph_size'] > 15.6) & (train['ph_size'] <= 20.9), 'ph_size'] = 2\ntrain.loc[ train['ph_size'] > 20.9, 'ph_size'] = 3\n\n# drop the remaining unwanted columns\ntrain = train.drop(['sc_h', 'sc_w', 'BatteryBand', 'clockBand', 'fcBand', 'intmemBand', 'pcBand', 'sizeBand', 'ramBand'], axis=1)\n\n# convert the dataset to an integer type\ntrain = train.astype(int)\n\n#display the whole dataset\ntrain","071e714c":"# convert screen height and width into one screen size column\ntest['ph_size'] = np.sqrt(test[\"sc_h\"]**2 + test[\"sc_w\"]**2)\ntest['ph_size'] = test['ph_size'].round(decimals=1)\n\n# segregate battery_power\ntest.loc[ test['battery_power'] <= 875.25, 'battery_power'] = 0\ntest.loc[(test['battery_power'] > 875.25) & (test['battery_power'] <= 1249.5), 'battery_power'] = 1\ntest.loc[(test['battery_power'] > 1249.5) & (test['battery_power'] <= 1623.75), 'battery_power'] = 2\ntest.loc[ test['battery_power'] > 1623.75, 'battery_power'] = 3\n\n# segregate clock_speed\ntest.loc[ test['clock_speed'] <= 1.125, 'clock_speed'] = 0\ntest.loc[(test['clock_speed'] > 1.125) & (test['clock_speed'] <= 1.75), 'clock_speed'] = 1\ntest.loc[(test['clock_speed'] > 1.75) & (test['clock_speed'] <= 2.375), 'clock_speed'] = 2\ntest.loc[ train['clock_speed'] > 2.375, 'clock_speed'] = 3\n\n# segregate fc\ntest.loc[ test['fc'] <= 4.75, 'fc'] = 0\ntest.loc[(test['fc'] > 4.75) & (test['fc'] <= 9.5), 'fc'] = 1\ntest.loc[(test['fc'] > 9.5) & (test['fc'] <= 14.25), 'fc'] = 2\ntest.loc[ test['fc'] > 14.25, 'fc'] = 3\n\n# segregate int_memory\ntest.loc[ test['int_memory'] <= 17.5, 'int_memory'] = 0\ntest.loc[(test['int_memory'] > 17.5) & (test['int_memory'] <= 33), 'int_memory'] = 1\ntest.loc[(test['int_memory'] > 33) & (test['int_memory'] <= 48.5), 'int_memory'] = 2\ntest.loc[ test['int_memory'] > 48.5, 'int_memory'] = 3\n\n# segregate pc\ntest.loc[ test['pc'] <= 5, 'pc'] = 0\ntest.loc[(test['pc'] > 5) & (test['pc'] <= 10), 'pc'] = 1\ntest.loc[(test['pc'] > 10) & (test['pc'] <= 15), 'pc'] = 2\ntest.loc[ test['pc'] > 15, 'pc'] = 3\n\n# segregate ram\ntest.loc[ test['ram'] <= 1191.5, 'ram'] = 0\ntest.loc[(test['ram'] > 1191.5) & (test['ram'] <= 2127), 'ram'] = 1\ntest.loc[(test['ram'] > 2127) & (test['ram'] <= 3062.5), 'ram'] = 2\ntest.loc[ test['ram'] > 3062.5, 'ram'] = 3\n\n# segregate ph_size\ntest.loc[ test['ph_size'] <= 10.3, 'ph_size'] = 0\ntest.loc[(test['ph_size'] > 10.3) & (test['ph_size'] <= 15.6), 'ph_size'] = 1\ntest.loc[(test['ph_size'] > 15.6) & (test['ph_size'] <= 20.9), 'ph_size'] = 2\ntest.loc[ test['ph_size'] > 20.9, 'ph_size'] = 3\n\n# drop the remaining unwanted columns\ntest = test.drop(['sc_h', 'sc_w', 'm_dep', 'mobile_wt', 'n_cores', 'px_height', 'px_width', 'talk_time'], axis=1)\n\n# convert the dataset to an integer type\ntest = test.astype(int)\n\n# view the whole dataset\ntest","e92602b8":"X_train = train.drop(\"price_range\", axis=1)\nY_train = train[\"price_range\"]\nX_test  = test.drop(['id'], axis=1).copy()\nX_train.shape, Y_train.shape, X_test.shape","94fb516c":"svc = SVC()\nsvc.fit(X_train, Y_train)\nY_pred = svc.predict(X_test)\nacc_svc = round(svc.score(X_train, Y_train) * 100, 2)\nacc_svc","2ed6efeb":"knn = KNeighborsClassifier(n_neighbors = 3)\nknn.fit(X_train, Y_train)\nY_pred = knn.predict(X_test)\nacc_knn = round(knn.score(X_train, Y_train) * 100, 2)\nacc_knn","0e70f9b0":"gaussian = GaussianNB()\ngaussian.fit(X_train, Y_train)\nY_pred = gaussian.predict(X_test)\nacc_gaussian = round(gaussian.score(X_train, Y_train) * 100, 2)\nacc_gaussian","93128319":"perceptron = Perceptron()\nperceptron.fit(X_train, Y_train)\nY_pred = perceptron.predict(X_test)\nacc_perceptron = round(perceptron.score(X_train, Y_train) * 100, 2)\nacc_perceptron","6ca583ab":"sgd = SGDClassifier()\nsgd.fit(X_train, Y_train)\nY_pred = sgd.predict(X_test)\nacc_sgd = round(sgd.score(X_train, Y_train) * 100, 2)\nacc_sgd","203e6461":"decision_tree = DecisionTreeClassifier()\ndecision_tree.fit(X_train, Y_train)\nY_pred = decision_tree.predict(X_test)\nacc_decision_tree = round(decision_tree.score(X_train, Y_train) * 100, 2)\nacc_decision_tree","1025b7ef":"random_forest = RandomForestClassifier(n_estimators=100)\nrandom_forest.fit(X_train, Y_train)\nY_pred = random_forest.predict(X_test)\nrandom_forest.score(X_train, Y_train)\nacc_random_forest = round(random_forest.score(X_train, Y_train) * 100, 2)\nacc_random_forest","3ad4d4e7":"#checking success rate of each classification algorithm\nmodels = pd.DataFrame({'Model': ['SVC', 'KNN', 'Random Forest', 'Naive Bayes', 'Perceptron', 'SGD', 'Decision Tree'], 'Score': [acc_svc, acc_knn, acc_random_forest, acc_gaussian, acc_perceptron, acc_sgd, acc_decision_tree]})\nmodels.sort_values(by='Score', ascending=True)","1a75e21d":"fig, ax = plt.subplots(figsize=(10, 8))\nplt.rcParams['font.sans-serif'] = 'Arial'\nplt.rcParams['font.family'] = 'sans-serif'\nplt.rcParams['text.color'] = '#000000'\nplt.rcParams['axes.labelcolor']= '#000000'\nplt.rcParams['xtick.color'] = '#000000'\nplt.rcParams['ytick.color'] = '#000000'\nplt.rcParams['font.size']=12\n\nsns.despine()\nsns.set_style(\"white\")\nsns_agelive = sns.barplot(y='Model', x='Score', data=models.reset_index(), ax=ax)\nax.set_title(\"Machine Learning Models - Performance\", fontsize=15)\nax.set_ylabel(\"Score\")\nax.set_xlabel(\"Machine Learning Model\")\nax.set_yticklabels(models.Model)\nplt.show()","81e44d75":"# convert the submission into a csv file\nsubmission = pd.DataFrame({\n        \"id\": test[\"id\"],\n        \"price_range\": Y_pred\n    })\nsubmission.to_csv(\"Predictions_Mobile_Price_Classification.csv\")","bbea67f3":"This project looks at various categories that influence the price of a particular phone. \n\nPrice is given in the form of a range - 0 (lowest), 1 (mid), 2 (upper) and 3 (highest) range. Categories have all been given their individual values and are represented for the most part in integer values. \n\nWhat I am going to do witht his project is to start with cleaning the dataset, presenting the dataset in the form of a range constituting integer values, and use that as means to define my machine learning algorithm of choice. \n\nI am going to divide this project into 3 parts -\n* Data Wrangling \/ Cleaning\n* Data Visualization\n* Machine Learning\n\nFor Data Wrangling and Cleaning, I will be using pandas and numpy libraries offered by Python to perform relatively simple tasks all revolving around grouping and restructuring data. \n\nFor Data Visualization, I am going to stick to seaborn as upon first glance, this dataset does not require any fancy graphs to provide explanations. However, I will import matplotlib and plotly just for backup. \n\nFor Machine Learning, I am going to stick to the 7 most popular classifier algorithms - \n* Decision Tree Classifier\n* Random Forest Classifier\n* Support Vector Classifier (SVC)\n* K Neighbour or K-Nearest Neighbour Classifier\n* Gaussian Naive Bayes Classifier\n* Perceptron Classifier\n* Stochastic Gradient Descent (SGD) Classifier\n\nHopefully, this will give us the result that we nee in order to make the best prediction for given test dataset. ","5642659f":"This bar graph will help us visualise the price range for the internal memory available in any device. It will also help us analyse the relation between the internal memory and price of the device. ","cea86842":"#### Perceptron Classification Algorithm","9ad03244":"We present our submissions in the form of a dataset. \n\nDataset is comprised of the ID of the device and the price range it fits into. ","10a3b1f9":"### Import Libraries and Dataset","2c4c7400":"#### Comparing Availability of Bluetooth to Price Range","68f1aa44":"This bar graph will help us visualise the price range for the primary camera resolution available in any device. It will also help us analyse the relation between the primary camera resolution and price of the device. ","817a8b88":"# Thank You!\n\nDo kindly leave your suggestions and inputs for this project. ","91441bec":"#### Comparing Screen Size (in **cm**) to Price Range ","32188da2":"#### Random Forest Classification Algorithm","14bac55b":"#### Comparing Availability of Touchscreen to Price Range ","7049511c":"#### Comparing Availability of WiFi to Price Range","62945595":"Withing this subsection we are going to assign a price range to the devices present in the test dataset, based on predictions using values we encountered in the training dataset. \n\nFor the most successful prediction of the test dataset, we will be using 7 key classification algorithms - \n\n* Decision Tree Classifier\n* Random Forest Classifier\n* Support Vector Classifier (SVC)\n* K Neighbour or K-Nearest Neighbour Classifier\n* Gaussian Naive Bayes Classifier\n* Perceptron Classifier\n* Stochastic Gradient Descent (SGD) Classifier\n\nBut before we get into the classification process, we first need to have a look at the dataset. \n\n","a7abff87":"The columns that are represented in the dataset have the following meaning - \n* **battery_power**: Total energy a battery can store in one time (in mAh)\n* **blue**: Has bluetooth or not\n* **clock_speed**: speed at which microprocessor executes instructions\n* **dual_sim**: Has dual sim support or not\n* **fc**: Front Camera Resolution (in mp)\n* **four_g**: Has 4G or not\n* **int_memory**: Internal Memory (in GB)\n* **m_dep**: Mobile Depth in cm\n* **mobile_wt**: Weight of mobile phone\n* **n_cores**: Number of Processing Cores\n* **pc**: Primary Camera Resolution (in mp)\n* **px_height**: Pixel Resolution Height\n* **px_width**: Pixel Resolution Width\n* **ram**: Random Access Memory (in MB)\n* **sc_h**: Screen Height of mobile (in cm)\n* **sc_w**: Screen Width of mobile (in cm)\n* **talk_time**: longest time that a single battery charge will last when you are\n* **three_g**: Has 3G or not\n* **touch_screen**: Has touch screen or not\n* **wifi**: Has wifi or not\n* **price_range**: This is the target variable with value of 0(low cost), 1(medium cost), 2(high cost) and 3(very high cost).","0896cdcb":"Now that we have imported the libraries, we move onto importing the dataset. Since there are two datasets available, **train** and **test**, we will register both of them to separate variables of their own and create a concatenated dataset, called **data**. ","edab6b82":"In order to do that, we first need to assign the values to X-train, Y_train and X_test","5e9a9632":"## Using Machine Learning Classifier Algorithms to achieve a 99.75 success rate","cae45667":"This bar graph will help us visualise the primary camera resolution for the battery power available in any device. It will also help us analyse the relation between the primary camera resolution and price of the device. ","afb4c3f5":"#### Comparing Availability of Dual SIM to Price Range","e2c3c92a":"We can even plot this on a bar graph","3dcd4158":"This bar graph will help us visualise the relation that presence of dual SIM support within the device has on the price of the device. ","41211a43":"#### Decision Tree Classification Algorithm","97fab432":"We can clearly see that the values present in the dataset are confusing.\n\nNot to mention the ranges we declared previously are a part of this dataset too, and need to be removed. \n\nBut before that, I will use the ranges to segregate the data along the range of (0, 1, 2, 3), just like the price column, to get a neater and more accurate dataset. ","b8f430a5":"### Machine Learning and Classification","4a367bf6":"#### Stochastic Gradient Classification Algorithm","457229be":"### Data Visualization","6a877723":"Now both our datasets are finally ready to be used for prediction of the price ranges in the test dataset. \n\nLet us start with individual classification algorithms and see which ives us the best performance. ","8645db7e":"In order to make sure that all the values present in the dataset are of a numeric or integer nature, we will convert the entire data to a nueric datatype. \n\nWe will follow that up by removing columns that are of no use to us - 'm_dep', 'mobile_wt', 'px_height', 'px_width', 'three_g', 'n_cores', 'talk_time'","6518d45c":"#### Comparing Primary Camera Resolution to Price Range","2a9310a1":"#### Comparing Internal Memory to Price Range","0fc4d8e8":"We have successfully completed cleaning and wrangling our data. Now its time to explore Data Visualization. ","a96d9aac":"We have two columns to denote the size of the phone - screen height and screen width. We can use these two columns to present the size of the phone as a singular value. \n\nPhone screen size is usually measured in a diagonal fashion, and so we can do the same in this case. \n\nNow that we know the height and width of the phone, we can simply use a bit of Pythagoras Theorem in order to calculate the value of the diagonal. \n\ndiagonal^2 = height^2 + width^2","62bcbbb0":"#### Gaussian Naive Bayes Classification Algorithm","90d52f96":"This bar graph will help us visualise the relation that a touchscreen device has on the price of the device. ","c3a60dfd":"#### Comparing Battery Size to the Price Range","dc549078":"This bar graph will help us visualise the relation that presence of WiFi support within the device has on the price of the device. ","e3ac9da2":"### Data Wrangling \/ Cleaning","826e4730":"#### Comparing Availability of 4G to Price Range","4a041070":"This bar graph will help us visualise the price range for the battery power available in any device. It will also help us analyse the relation between the battery size and price of the device. ","57ccc532":"The dataset looks much neater, and is now ready to be used for predictions. \n\nBut before that, we need to do the same operations we have done to the training dataset throughout this project and bring it up to the same valuations that are present in the train dataset. \n\nThat means - \n* introduction of the diagonal screen size\n* conversion of data values into ranges\n* cleaning any remaining columns\n* converting dataset to integer type","4b0ac6ad":"This bar graph will help us visualise the relation that presence of bluetooth within the device has on the price of the device. ","a196f16c":"This bar graph will help us visualise the price range for the screen size available on any device. It will also help us analyse the relation between the screen size and price of the device. ","39d8dbe0":"#### Comparing Clock Speed to the Price Range","da3f6f3c":"The data that is present in the dataset is spread across various limits, some going as high as 2000 and beyond. This would make it difficult to get an accurate prediction, hence a lesser rate of success. \n\nWe can start off by bringing all the values in each individual dataset column within a range. Since we already have a range reference with the price, we know that in order to create a range for each column, we need to group the individual columns within 4 divisions. \n\nCertain columns have used 0 and 1 in order to present a 'Yes' and 'No' type valuation. These columns will be left as they are. \n\nThese ranges are going to be extremely important for both **data visualization** and **machine learning**. ","983f9cf2":"We have successfully completed importing the libraries and the datasets. Now it is time for a bit of data cleaning. ","ae11181d":"#### Comparing Primary Camera Resolution to Price Range","457f29e5":"#### K Neighbours or K-Nearest Neughbours Classification Algorithm","6006d591":"This is a relatively big dataset, at least in terms of columns. Not all columns are visible to us (denoted by the 3 dots in the middle of the dataset) and therefore we will not be able to accurately clean data unless we know the columns that are present in the dataset. \n\nHence, we first start off by looking at the list of columns in the dataset. ","253b36af":"This bar graph will help us visualise the relation that presence of 4G connection within the device has on the price of the device. ","a1c01eb2":"We start off the process by importing the functions and libraries we require, and the dataset we will implement them on. We will import along the lines of the categories I previously listed. ","fef14868":"This bar graph will help us visualise the price range for the clock speed available in any device. It will also help us analyse the relation between the clock speed and price of the device. ","aba6e581":"There are multiple values within the dataset that present conflicting results, and therefore we will not get the best graph that easily explains our parameters. \n\nRather than using the values from the dataset, we can use the range we calculated earlier. \n\nThis range will help us define the graph better and compare in an easier manner to the price. ","8bf01982":"# Mobile Price Classification - a Machine Learning Project","a593bfcf":"#### Support Vector Classification Algorithm","6bd35baa":"Now that we have successfully completed our data visualization, a few key things to note - \n\n* Greater the battery size, greater the price range\n\n* There is a sudden rise in price range for devices with primary camera resolution beyond 15MP\n* There is a sudden rise in price range for devices with front camera resolution beyond 14MP\n* There is a sudden rise in price range for devices with screen size beyond 20.9cm (8inch)\n\n* No particular inference can be brought about with respect to clock speed\n* No particular inference can be brought about with respect to internal memory\n\n* There is a marginal rise in price for any device containing Bluetooth, WiFi, 4G and Dual SIM\n* Touchscreen is the only category where the lack of that feature on that device incurs a greater price. \n\nWe can now move onto creating price range predictions for the test dataset, using machine learning classifiers. ","1839798d":"Now that we have our individual scores, it is time to see which classification algorith gave us the best success rate. "}}