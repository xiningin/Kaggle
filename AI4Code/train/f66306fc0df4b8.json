{"cell_type":{"d6d802c6":"code","e8952158":"code","b22c7b12":"code","00083713":"code","57038ec3":"code","660b11c9":"code","778d6806":"code","09f0a54d":"code","5313bd4e":"code","2cd83440":"code","2f5bb154":"code","4c172eef":"code","ed8e3a90":"code","d4bd7d41":"markdown","4ace3738":"markdown","76994725":"markdown","fff309d9":"markdown","057268d6":"markdown","278fb02d":"markdown"},"source":{"d6d802c6":"import numpy as np\nimport pandas as pd\nimport os\nimport sys\nimport matplotlib.pyplot as plt\nimport plotly.graph_objects as go\nimport plotly.express as px\nimport plotly.offline as py\nimport math\nimport itertools\npy.init_notebook_mode(connected=True)","e8952158":"myList = []\nwith open(\"..\/input\/bomb-party-dict\/dict.txt\") as f:\n    for word in f:\n        word = word.replace(\"\\n\", \"\")\n        myList.append(word)","b22c7b12":"wordFreqDict = {}\ntotalWords = 0\n\nfor word in myList:\n    if word[0] not in wordFreqDict:\n        wordFreqDict[word[0]] = 1\n    else:\n        wordFreqDict[word[0]] += 1\n        \n    totalWords += 1\n        \nprint(wordFreqDict)\nprint(f\"Total Words: {totalWords}\")","00083713":"wordPropDict = {}\nfor key in wordFreqDict:\n    wordPropDict[key] = wordFreqDict[key] \/ totalWords\n    \nprint(wordPropDict)","57038ec3":"tmp_list = []\nfor key in wordFreqDict:\n    tmp_list.append([key, wordFreqDict[key], np.round(wordPropDict[key], 5)])\n    \nprop_df = pd.DataFrame(tmp_list, columns=[\"Letter\", \"Total\", \"Proportion\"])\nprop_df.set_index(\"Letter\", inplace=True)\nprop_df","660b11c9":"fig = px.bar(prop_df, y=\"Proportion\", color=\"Proportion\", hover_data=[\"Total\"])\nfig.update_layout(title={'text': \"Relative Frequencies of Each Letter\", 'x': 0.5,\n                         'xanchor': 'center', 'font': {'size': 20}})\nfig.show()","778d6806":"prop_sorted_df = prop_df.sort_values(\"Proportion\", ascending=False)\nfig = px.bar(prop_sorted_df, y=\"Proportion\", color=\"Proportion\", hover_data=[\"Total\"])\nfig.update_layout(title={'text': \"Relative Frequencies of Each Letter, Sorted\", 'x': 0.5,\n                         'xanchor': 'center', 'font': {'size': 20}})\nfig.show()","09f0a54d":"wordLengthDict = {}\nfor word in myList:\n    n = len(word)\n    if n not in wordLengthDict:\n        wordLengthDict[n] = 1\n    else:\n        wordLengthDict[n] += 1\n        \nprint(wordLengthDict)","5313bd4e":"length_df = pd.DataFrame.from_dict(wordLengthDict, orient='index', columns=[\"Total\"]).sort_index()\nlength_df.index.names = [\"Length\"]\nlength_df[\"Cumulative\"] = length_df[\"Total\"].cumsum()\nlength_df[\"Cumulative Frequency\"] = length_df[\"Cumulative\"] \/ totalWords\nlength_df","2cd83440":"fig = px.bar(length_df, y=\"Total\", color=\"Total\")\nfig.update_layout(title={'text': \"Relative Frequencies of Each Word Length\", 'x': 0.5,\n                         'xanchor': 'center', 'font': {'size': 20}}, xaxis=dict(tickmode='linear', tick0 = min(length_df.index), dtick=1))\nfig.show()","2f5bb154":"fig = px.line(length_df, y=\"Cumulative Frequency\", hover_data=[\"Cumulative\", \"Total\"])\nfig.update_layout(title={'text': \"Cumulative Frequencies of Each Word Length\", 'x': 0.5,\n                         'xanchor': 'center', 'font': {'size': 20}}, xaxis=dict(tickmode='linear', tick0 = min(length_df.index), dtick=1))\nfig.show()","4c172eef":"twoWordDict = {}\nfor word in myList:\n    for i in range(1, len(word)):\n        wordSlice = word[i-1:i+1]\n        if wordSlice not in twoWordDict:\n            twoWordDict[wordSlice] = 1\n        else:\n            twoWordDict[wordSlice] += 1\n\nprint(twoWordDict)","ed8e3a90":"threeWordDict = {}\nfor word in myList:\n    for i in range(2, len(word)):\n        wordSlice = word[i-2:i+1]\n        if wordSlice not in threeWordDict:\n            threeWordDict[wordSlice] = 1\n        else:\n            threeWordDict[wordSlice] += 1\n\nprint(threeWordDict)","d4bd7d41":"# Word Combos","4ace3738":"# Word Length Frequencies","76994725":"# Starting Letter Frequencies","fff309d9":"# Bomb Party Dictionary Analysis\n\nIn this notebook, I provide a quick analysis of the 200,000+ words that I use for my bomb party hack, linked <a href=\"https:\/\/github.com\/IronicNinja\/bomb-party-hack\">here<\/a>. Feel free to play the actual game on https:\/\/jklm.fun\/!","057268d6":"<h1> Essential Imports <\/h1>","278fb02d":"And that's it! If you liked the notebook, please drop a like :)"}}