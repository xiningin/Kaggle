{"cell_type":{"552d8d6d":"code","b6a69e83":"code","aae30759":"code","094b7097":"code","bd485ae9":"code","e367a1c5":"code","699e8b90":"code","d3ea2389":"code","9e0cee74":"code","da168c2f":"code","1f4deabc":"code","0df2c906":"code","a2ba0d00":"code","0a5744d2":"code","998d1a98":"code","85f1316f":"code","26dafae8":"code","8197b91a":"code","17a46ded":"code","b29a21ed":"code","7643b6f6":"code","22301080":"code","6dbc072b":"code","033662f1":"code","be5a16ae":"code","1f0294c0":"code","0348d426":"code","f688cbb7":"code","51895b7d":"code","b7af7574":"code","a5594e26":"code","d9f6bc66":"code","57ca6a5e":"code","a7475a4d":"code","d30c1a05":"code","8a64b706":"code","794f7e44":"code","66a8f632":"code","997045bc":"code","d0e9adc1":"code","7c067d03":"code","57fd7997":"code","a74d44e6":"code","3a81cd10":"code","8d2baccc":"code","cf3c182b":"code","bd9fbe2d":"code","f9eda94b":"code","05217a82":"code","75616883":"code","0016ac18":"code","0a4ab5eb":"markdown","15aac3e7":"markdown","188e4f15":"markdown"},"source":{"552d8d6d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom collections import Counter\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","b6a69e83":"# Read datas\nmedian_house_hold_in_come = pd.read_csv('..\/input\/MedianHouseholdIncome2015.csv', encoding=\"windows-1252\")\npercentage_people_below_poverty_level = pd.read_csv('..\/input\/PercentagePeopleBelowPovertyLevel.csv', encoding=\"windows-1252\")\npercent_over_25_completed_highSchool = pd.read_csv('..\/input\/PercentOver25CompletedHighSchool.csv', encoding=\"windows-1252\")\nshare_race_city = pd.read_csv('..\/input\/ShareRaceByCity.csv', encoding=\"windows-1252\")\nkill = pd.read_csv('..\/input\/PoliceKillingsUS.csv', encoding=\"windows-1252\")","aae30759":"percentage_people_below_poverty_level.head()","094b7097":"percentage_people_below_poverty_level.info()","bd485ae9":"percentage_people_below_poverty_level.poverty_rate.value_counts()","e367a1c5":"percentage_people_below_poverty_level['Geographic Area'].unique()#show us the states of USA\n#len (percentage_people_below_poverty_level['Geographic Area'].unique())#show us the states of USA","699e8b90":"# Poverty rate of each state\npercentage_people_below_poverty_level.poverty_rate.replace(['-'],0.0,inplace = True)\npercentage_people_below_poverty_level.poverty_rate = percentage_people_below_poverty_level.poverty_rate.astype(float)#poverty_rate can not be object\narea_list = list(percentage_people_below_poverty_level['Geographic Area'].unique())\narea_poverty_ratio = []\nfor i in area_list:\n    x = percentage_people_below_poverty_level[percentage_people_below_poverty_level['Geographic Area']==i]#take one state but all rows\n    area_poverty_rate = sum(x.poverty_rate)\/len(x)#x state avarage of poverty\n    area_poverty_ratio.append(area_poverty_rate)#add avarage the series\ndata = pd.DataFrame({'area_list': area_list,'area_poverty_ratio':area_poverty_ratio})#new dataframe list two column\nnew_index = (data['area_poverty_ratio'].sort_values(ascending=False)).index.values#change index by poverty ratio sequence \n#print (type(new_index)) this is an array\n#print (new_index)\nsorted_data = data.reindex(new_index)#reindex command is regenarate index by new_index\n# visualization\nplt.figure(figsize=(15,10))\nsns.barplot(x=sorted_data['area_list'], y=sorted_data['area_poverty_ratio'])\nplt.xticks(rotation= 45)\nplt.xlabel('States')\nplt.ylabel('Poverty Rate')\nplt.title('Poverty Rate Given States')","d3ea2389":"kill.info()","9e0cee74":"kill.head()","da168c2f":"kill.name.value_counts()","1f4deabc":"seperate= kill.name[kill.name !='TK TK'].str.split()\n#print(seperate) #like an array :  [Tim, Elliot]\na,b=zip(*seperate)#zip is use to transform array to tuple \n#print(a,b) --('Tim', 'Lewis', 'John',.... ) name and surname\nname_list=a+b\n#print (name_list)\nname_count = Counter(name_list) \n#print(name_count)\nmost_common_names = name_count.most_common(15) #most used 15 names and numbers in sheet\nx,y = zip(*most_common_names)#x replace of name y is taking numbers\n#print (x,y)\nx,y = list(x),list(y)#tupbles to array transform\n#print (x,y)\nplt.figure(figsize=(15,10))\nax= sns.barplot(x=x, y=y,palette = sns.cubehelix_palette(len(x)))#different diagram types cubehelix_palette by seaborn\nplt.xlabel('Name or Surname of killed people')\nplt.ylabel('Frequency')\nplt.title('Most common 15 Name or Surname of killed people')\n\n","0df2c906":"percent_over_25_completed_highSchool.head()","a2ba0d00":"\npercent_over_25_completed_highSchool.info()","0a5744d2":"x=percent_over_25_completed_highSchool[percent_over_25_completed_highSchool['Geographic Area']=='AL']\nx","998d1a98":"# High school graduation rate of the population that is older than 25 in states\npercent_over_25_completed_highSchool.percent_completed_hs.replace('-',0.0,inplace=True)\npercent_over_25_completed_highSchool.percent_completed_hs=percent_over_25_completed_highSchool.percent_completed_hs.astype(float)\narea_list =list (percent_over_25_completed_highSchool['Geographic Area'].unique())\narea_highschool=[]\nfor i in area_list:\n    x=percent_over_25_completed_highSchool[percent_over_25_completed_highSchool['Geographic Area']==i]\n    area_highschool_rate=sum(x.percent_completed_hs)\/len(x)\n    area_highschool.append(area_highschool_rate)\ndata=pd.DataFrame({'area_list':area_list,'area_highschool_ratio': area_highschool})\nnew_index=data.area_highschool_ratio.sort_values(ascending=True).index.values\n#print(new_index)\nsorted_data2=data.reindex(new_index)\n\nplt.figure(figsize=(15,10))\nsns.barplot(x=sorted_data2['area_list'],y=sorted_data2['area_highschool_ratio'])\nplt.xticks(rotation=90)\nplt.xlabel('States')\nplt.ylabel('High School Graduate Rate')\nplt.title(\"Percentage of Given State's Population Above 25 that Has Graduated High School\")\n    ","85f1316f":"share_race_city.head()","26dafae8":"share_race_city.info()","8197b91a":"# Percentage of state's population according to races that are black,white,native american, asian and hispanic\nshare_race_city.replace(['-'],0.0,inplace = True)\nshare_race_city.replace(['(X)'],0.0,inplace = True)\nshare_race_city.loc[:,['share_white','share_black','share_native_american','share_asian','share_hispanic']] = share_race_city.loc[:,['share_white','share_black','share_native_american','share_asian','share_hispanic']].astype(float)\narea_list = list(share_race_city['Geographic area'].unique())\nshare_white = []\nshare_black = []\nshare_native_american = []\nshare_asian = []\nshare_hispanic = []\nfor i in area_list:\n    x = share_race_city[share_race_city['Geographic area']==i]\n    share_white.append(sum(x.share_white)\/len(x))\n    share_black.append(sum(x.share_black) \/ len(x))\n    share_native_american.append(sum(x.share_native_american) \/ len(x))\n    share_asian.append(sum(x.share_asian) \/ len(x))\n    share_hispanic.append(sum(x.share_hispanic) \/ len(x))\n\n# visualization\nf,ax = plt.subplots(figsize = (9,15))\nsns.barplot(x=share_white,y=area_list,color='green',alpha = 0.5,label='White' )\nsns.barplot(x=share_black,y=area_list,color='blue',alpha = 0.7,label='African American')\nsns.barplot(x=share_native_american,y=area_list,color='cyan',alpha = 0.6,label='Native American')\nsns.barplot(x=share_asian,y=area_list,color='yellow',alpha = 0.6,label='Asian')\nsns.barplot(x=share_hispanic,y=area_list,color='red',alpha = 0.6,label='Hispanic')\n\nax.legend(loc='lower right',frameon = True)     # legendlarin gorunurlugu\nax.set(xlabel='Percentage of Races', ylabel='States',title = \"Percentage of State's Population According to Races \")\nplt.show()","17a46ded":"# high school graduation rate vs Poverty rate of each state\nsorted_data['area_poverty_ratio'] = sorted_data['area_poverty_ratio']\/max( sorted_data['area_poverty_ratio'])\nsorted_data2['area_highschool_ratio'] = sorted_data2['area_highschool_ratio']\/max( sorted_data2['area_highschool_ratio'])\ndata = pd.concat([sorted_data,sorted_data2['area_highschool_ratio']],axis=1)\ndata.sort_values('area_poverty_ratio',inplace=True)\n\n# visualize\nf,ax1 = plt.subplots(figsize =(20,10))\nsns.pointplot(x='area_list',y='area_poverty_ratio',data=data,color='lime',alpha=0.8)\nsns.pointplot(x='area_list',y='area_highschool_ratio',data=data,color='red',alpha=0.8)\nplt.text(40,0.6,'high school graduate ratio',color='red',fontsize = 17,style = 'italic')\nplt.text(40,0.55,'poverty ratio',color='lime',fontsize = 18,style = 'italic')\nplt.xlabel('States',fontsize = 15,color='blue')\nplt.ylabel('Values',fontsize = 15,color='blue')\nplt.title('High School Graduate  VS  Poverty Rate',fontsize = 20,color='blue')\nplt.grid()","b29a21ed":"# Visualization of high school graduation rate vs Poverty rate of each state with different style of seaborn code\n# joint kernel density\n# pearsonr= if it is 1, there is positive correlation and if it is, -1 there is negative correlation.\n# If it is zero, there is no correlation between variables\n# Show the joint distribution using kernel density estimation \ng = sns.jointplot(data.area_poverty_ratio, data.area_highschool_ratio, kind=\"kde\", height=7)\nplt.savefig('graph.png')#save the figure kaggle's page. \n\nplt.show()","7643b6f6":"# you can change parameters of joint plot\n# kind : { \u201cscatter\u201d | \u201creg\u201d | \u201cresid\u201d | \u201ckde\u201d | \u201chex\u201d }\n# Different usage of parameters but same plot with previous one\ng = sns.jointplot(\"area_poverty_ratio\", \"area_highschool_ratio\", data=data,height=5, ratio=3, color=\"r\")","22301080":"#combine tow gragh with plot_joint. n_levels is number of line in the graph.\ng = (sns.jointplot(\"area_poverty_ratio\", \"area_highschool_ratio\", data=data,height=5, ratio=3, color=\"r\").plot_joint(sns.kdeplot, zorder=0, n_levels=6))","6dbc072b":"g = sns.jointplot(data.area_poverty_ratio, data.area_highschool_ratio, kind=\"reg\", height=7)\nplt.show()","033662f1":"kill.head()","be5a16ae":"kill.race.value_counts()","1f0294c0":"#pie chart is member of matplot libraray\nkill.race.dropna(inplace=True)#delete nan value rows\nlabels=kill.race.value_counts().index#assign of grouped value of race in index\ncolors = ['grey','blue','red','yellow','green','brown']\nexplode = [0.1,0.1,0.1,0.1,0.1,0.1] #throw the slice\nsizes = kill.race.value_counts().values#value count of numbers in to sizes \n\nplt.figure(figsize=(7,7))\nplt.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%')\nplt.title('Killed People According to Races',color='black',fontsize=15)","0348d426":"# kdeplot\nsns.kdeplot(data.area_poverty_ratio, data.area_highschool_ratio, shade=True, cut=3)#cut is size of shape in the graph, shade is fill in shape with color\nplt.show()","f688cbb7":"# Show each distribution with both violins and points\n# Use cubehelix to get a custom sequential palette\npal = sns.cubehelix_palette(2, rot=-.5, dark=.3)#it is like cumulation of each part on the same graph\nsns.violinplot(data=data, palette=pal, inner=\"points\")#use data dataframe and pal for palette and inner=\"points\" is point in the shape\nplt.show()","51895b7d":"#correlation map\n# Visualization of high school graduation rate vs Poverty rate of each state with different style of seaborn code\nf,ax = plt.subplots(figsize=(5, 5))\nsns.heatmap(data.corr(), annot=True, linewidths=0.5,linecolor=\"red\", fmt= '.1f',ax=ax)\n#annot=True is visualation of numbers in the rectangle\n#ax=ax is establish the heatmap in to the generated plot. \nplt.show()","b7af7574":"kill.head()","a5594e26":"kill.head()\n","d9f6bc66":"a=kill.groupby(['state','race'], as_index=False).agg({\"id\": \"count\"})\na=a.sort_values('id', ascending=False)\n","57ca6a5e":"a.head()","a7475a4d":"#Killed people and number of races state by state\n#for example most people killed in CA and their races is Hispanic, second is white\nf,ax1 = plt.subplots(figsize =(20,10))\nsns.swarmplot(x=\"state\", y=\"id\",hue=\"race\", data=a)\nplt.show()","d30c1a05":"# visualize\nf,ax1 = plt.subplots(figsize =(20,10))\nsns.pointplot(x='state',y='id',data=a,color='lime',alpha=0.8)\nplt.text(40,0.6,'high school graduate ratio',color='red',fontsize = 17,style = 'italic')\nplt.text(40,0.55,'poverty ratio',color='lime',fontsize = 18,style = 'italic')\nplt.xlabel('States',fontsize = 15,color='blue')\nplt.ylabel('COUNTS',fontsize = 15,color='blue')\nplt.title('Killed People - States',fontsize = 20,color='blue')\nplt.grid()","8a64b706":"#x is gender, y is age and distirbution about manner of death. we use as data 'kill' and colouring palette 'PRGn'=Purple-Green\nsns.boxplot(x='gender', y='age',hue='manner_of_death', data=kill, palette='PRGn')\nplt.show()","794f7e44":"sns.swarmplot(x=\"gender\", y=\"age\",hue=\"manner_of_death\", data=kill)\nplt.show()","66a8f632":"#Pairplot shows us to 4 chart and 2 is point others line plot. And x  and y values are changing.\nsns.pairplot(data)\nplt.show()","997045bc":"sns.countplot(kill.gender)\n#sns.countplot(kill.manner_of_death)\nplt.title(\"gender\",color = 'blue',fontsize=15)","d0e9adc1":"sns.countplot(kill.manner_of_death)\nplt.title(\"manner of death\" , color='blue', fontsize=15)","7c067d03":"armed=kill.armed.value_counts()#armed occur from two colomns that index is name of arm and values is number of used.\n#print(armed)\nplt.figure(figsize=(10,7))\nsns.barplot(x=armed[:7].index,y=armed[:7].values)\nplt.xlabel('Weapon Types')\nplt.ylabel('Weapon Numbers')\nplt.title('Kill weapon',color = 'blue',fontsize=15)\nplt.show()","57fd7997":"above25=['above25' if i>25 else 'below25' for i in kill.age]#we choose and create a list \ndf=pd.DataFrame({'age':above25})\n#print (df)\nsns.countplot(x=df.age)#we determine the x axis here\nplt.ylabel('Number of Killed People')\nplt.title('Age of killed people',color = 'blue',fontsize=15)\nplt.show()","a74d44e6":"sns.countplot(data=kill, x='race')#another using of countplot; we can give data and x axis like this <-\nplt.title('Race of killed people',color = 'blue',fontsize=15)\nplt.show()","3a81cd10":"kill.head()","8d2baccc":"#a=kill.set_index(['race','city']).count(level=\"race\")\n#kill.city.dropna(inplace=True)\na=kill.sort_values(by=['race'])\na","cf3c182b":"area_list = list(kill['city'].unique())\nshare_white1 = []\nshare_black1 = []\nshare_native_american1 = []\nshare_asian1 = []\nshare_hispanic1 = []\nfor i in area_list:\n    x = kill[kill['city']==i]","bd9fbe2d":"# Most dangerous cities\ncity=kill.city.value_counts()\nplt.figure(figsize=(12,10))\nsns.barplot(x=city[:12].index, y=city[:12].values)\nplt.xticks(rotation=45)\nplt.xlabel('Cities')\nplt.ylabel('Number of Killed People')\nplt.title(' Most dangerous cities',color = 'blue',fontsize=15)\nplt.show()\n\n","f9eda94b":"# Most dangerous cities\nstates=kill.state.value_counts()\nplt.figure(figsize=(12,10))\nsns.barplot(x=states[:12].index, y=states[:12].values)\nplt.xticks(rotation=45)\nplt.xlabel('States')\nplt.ylabel('Number of Killed People')\nplt.title(' Most dangerous states',color = 'blue',fontsize=15)\nplt.show()","05217a82":"sns.countplot(kill.signs_of_mental_illness)\nplt.xlabel('Mental illness')\nplt.ylabel('Number of Mental illness')\nplt.title('Having mental illness or not',color = 'blue', fontsize = 15)\nplt.show()","75616883":"sns.countplot(kill.threat_level)\nplt.xlabel('Threat Types')\nplt.title('Threat types',color = 'blue', fontsize = 15)\nplt.show()","0016ac18":"# Flee types\nsns.countplot(kill.flee)\nplt.xlabel('Flee Types')\nplt.title('Flee types',color = 'blue', fontsize = 15)","0a4ab5eb":"**Gender - Age - Manner of Death with Box Plot**\n\nGraph on the below explain that killed man by shot average age is little than killed by shot and Tasered. And we can see that killed male or female average age is close. But killed man numbers and killed female numbers is different but in this chart the shapes size are same. So, in this chart shape about only manner of death, not about count.","15aac3e7":"Above graph shows that the number of people is graduate from high school go up while poverty is down. Which means graduate from school connected to wealthy. \nBut something about poverty is point of 0.5. Mostly graduate from high school people poverty is 0.5 poverty ratio. Maybe it is show that the American people has poverty percentage is mostly 0.5.","188e4f15":"Difference from boxplot we can see the actual counts and nice design, but we cant see the average ages\nNot: Swarmplot performance is down when records 10K. "}}