{"cell_type":{"70fe2381":"code","aec0d81a":"code","fbb8b5eb":"code","46d26a87":"code","a425278a":"code","fba5fe82":"code","830c2f72":"code","2d1b4603":"code","83f3d424":"code","dbe5dbd8":"code","b00adc0a":"code","dcaad871":"code","8c98a09d":"code","fa8cc3ab":"code","5fd762f3":"code","c3835d4d":"code","f6d91ed4":"code","b5469851":"code","1e45c45d":"code","b1930d4d":"code","2444c505":"code","81e06865":"code","7cdd566f":"code","a4304156":"code","f4b70ac4":"code","67f8e232":"code","36040cd2":"code","5d1eeb05":"code","db9e53db":"code","d3438ed9":"code","0184cceb":"code","ff166e0e":"code","3008450f":"code","cdbcb453":"code","46afb950":"markdown","9fc4c67e":"markdown","f5183ba2":"markdown","dd7d8410":"markdown","c019a8d8":"markdown","8ebf3ac2":"markdown","e02a458b":"markdown","6f5679fd":"markdown","2faa984f":"markdown","ceb0d174":"markdown","749da5d4":"markdown","f025d7a8":"markdown","64a15dc0":"markdown","75af04d4":"markdown","a34a001e":"markdown","5837593c":"markdown","9f1783f2":"markdown","919102b0":"markdown","4271d616":"markdown"},"source":{"70fe2381":"# import library data manipulation & visualization\nimport os\nimport warnings\nwarnings.filterwarnings('ignore')\nimport numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nplt.style.use('fivethirtyeight')\n","aec0d81a":"# this is a special style template for matplotlib, highly useful for visualizing time series data\n\n%matplotlib inline\nfrom pylab import rcParams\nfrom plotly import tools\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\nimport statsmodels.api as sm\nfrom numpy.random import normal, seed\nfrom scipy.stats import norm\nfrom statsmodels.tsa.arima_model import ARMA\nfrom statsmodels.tsa.stattools import adfuller\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\nfrom statsmodels.tsa.arima_process import ArmaProcess\nfrom statsmodels.tsa.arima_model import ARIMA\nimport math\nfrom sklearn.metrics import mean_squared_error\nprint(os.listdir(\"..\/input\"))\n","fbb8b5eb":"google = pd.read_csv('..\/input\/stock-time-series-20050101-to-20171231\/GOOGL_2006-01-01_to_2018-01-01.csv', index_col='Date', parse_dates=['Date'])\ngoogle","46d26a87":"amazon = pd.read_csv('..\/input\/stock-time-series-20050101-to-20171231\/AMZN_2006-01-01_to_2018-01-01.csv', index_col='Date', parse_dates=['Date'])\namazon.head()","a425278a":"IBM = pd.read_csv('..\/input\/stock-time-series-20050101-to-20171231\/IBM_2006-01-01_to_2018-01-01.csv', index_col='Date', parse_dates=['Date'])\nIBM.head()\n","fba5fe82":"apple = pd.read_csv('..\/input\/stock-time-series-20050101-to-20171231\/AAPL_2006-01-01_to_2018-01-01.csv', index_col='Date', parse_dates=['Date'])\napple.head()","830c2f72":"google.isnull().sum()","2d1b4603":"google['2006':'2017'].plot(subplots=True, figsize=(10,12))\nplt.title('Google stock attributes from 2008 to 2010')\nplt.savefig('stocks.png')\nplt.show()","83f3d424":"# Creating a Timestamp\ntimestamp = pd.Timestamp(2017, 1, 1, 10)\ntimestamp","dbe5dbd8":"# Creating a period\nperiod = pd.Period('2017-01-01')\nperiod","b00adc0a":"# Checking if the timestamp exists in the period\nperiod.start_time < timestamp < period.end_time","dcaad871":"# Converting timestamp to period\nperiod1 = timestamp.to_period(freq='H')\nperiod1","8c98a09d":"# Converting period to timestamp\ntimestamp1 = period.to_timestamp(freq='H', how='start')\ntimestamp1","fa8cc3ab":"# Creating a datetimeindex with daily frequency\ndr1 = pd.date_range(start='1\/1\/18', end='30\/12\/18')\ndr1","5fd762f3":"# Creating a datetimeindex with monthly frequency\ndr2 = pd.date_range(start='1\/1\/18', end='1\/1\/19', freq='M')\ndr2","c3835d4d":"# Creating a datetimeindex without specifying start date and using periods\ndr3 = pd.date_range(end='1\/4\/2014', periods=12)\ndr3","f6d91ed4":"# Creating a datetimeindex specifying start date , end date and periods\ndr4 = pd.date_range(start='2013-04-24', end='2014-11-27', periods=3)\ndr4","b5469851":"df = pd.DataFrame({'year': [2020, 2021], 'month': [2, 3], 'day': [4, 5]})\ndf","1e45c45d":"df = pd.to_datetime(df)\ndf","b1930d4d":"google.head()","2444c505":"google['Change'] = google.High.div(google.High.shift())\ngoogle['Change'].plot(figsize=(20,8));","81e06865":"google['Return'] = google.Change.sub(1).mul(10)\ngoogle['Return'].plot(figsize=(20,8));","7cdd566f":"# Another way to calculate returns\ngoogle.High.pct_change().mul(10).plot(figsize=(20,6)) ;","a4304156":"google.High.diff().plot(figsize=(20,6))","f4b70ac4":"# We choose Amazon stocks to compare them with google\n# Plotting before normalization\n\ngoogle.High.plot(figsize=(20,6))\namazon.High.plot(figsize=(20,6))\nplt.legend(['Google','amazon'])\nplt.show()","67f8e232":"# Normalizing and comparison\n# Both stocks start from 100\nnormalized_google = google.High.div(google.High.iloc[0]).mul(100)\nnormalized_amazont = amazon.High.div(amazon.High.iloc[0]).mul(100)\nnormalized_google.plot(figsize=(20,6))\nnormalized_amazont.plot(figsize=(20,6))\nplt.legend(['Google','amazon'])\nplt.show()","36040cd2":"# We choose IMB stocks to compare them with google\n# Plotting before normalization\n\ngoogle.High.plot(figsize=(20,6))\nIBM.High.plot(figsize=(20,6))\nplt.legend(['Google','IBM'])\nplt.show()","5d1eeb05":"# Normalizing and comparison\n# Both stocks start from 100\nnormalized_google = google.High.div(google.High.iloc[0]).mul(100)\nnormalized_IBM = IBM.High.div(IBM.High.iloc[0]).mul(100)\nnormalized_google.plot(figsize=(20,6))\nnormalized_amazont.plot(figsize=(20,6))\nplt.legend(['Google','IBM'])\nplt.show()","db9e53db":"# We choose Apple stocks to compare them with google\n# Plotting before normalization\n\ngoogle.High.plot(figsize=(20,6))\napple.High.plot(figsize=(20,6))\nplt.legend(['Google','apple'])\nplt.show()","d3438ed9":"# Normalizing and comparison\n# Both stocks start from 100\nnormalized_google = google.High.div(google.High.iloc[0]).mul(100)\nnormalized_apple = apple.High.div(apple.High.iloc[0]).mul(100)\nnormalized_google.plot(figsize=(20,6))\nnormalized_amazont.plot(figsize=(20,6))\nplt.legend(['Google','apple'])\nplt.show()","0184cceb":"# Rolling window functions\nrolling_google = google.High.rolling('90D').mean()\ngoogle.High.plot(figsize=(20,6))\nrolling_google.plot(figsize=(20,6))\nplt.legend(['High','Rolling Mean'])\n# Plotting a rolling mean of 90 day window with original High attribute of google stocks\nplt.show()","ff166e0e":"# Expanding window functions\ngoogle_mean = google.High.expanding().mean()\ngoogle_std = google.High.expanding().std()\ngoogle.High.plot(figsize=(20,6))\ngoogle_mean.plot(figsize=(20,6))\ngoogle_std.plot(figsize=(20,6))\nplt.legend(['High','Expanding Mean','Expanding Standard Deviation'])\nplt.show()","3008450f":"# OHLC chart of June 2016\ntrace = go.Ohlc(x=google['06-2016'].index,\n                open=google['06-2016'].Open,\n                high=google['06-2016'].High,\n                low=google['06-2016'].Low,\n                close=google['06-2016'].Close)\ndata = [trace]\niplot(data, filename='simple_ohlc')","cdbcb453":"# OHLC chart of 2016\ntrace = go.Ohlc(x=google['2016'].index,\n                open=google['2016'].Open,\n                high=google['2016'].High,\n                low=google['2016'].Low,\n                close=google['2016'].Close)\ndata = [trace]\niplot(data, filename='simple_ohlc')","46afb950":"##  Visualizing the datasets","9fc4c67e":"### Using to_datetime\n* **pandas.to_datetime()** : is used for converting arguments to datetime. Here, a DataFrame is converted to a datetime series.","f5183ba2":"### Comaring two or more time series\n\nWe will compare 2 time series by normalizing them. This is achieved by dividing each time series element of all time series by the first element. This way both series start at the same point and can be easily compared.","dd7d8410":"### Stock returns","c019a8d8":"## A- Google Stocks Data","8ebf3ac2":"## 1.1 Importing time series data\n\n### How to import data?\n* The required time series column is imported as a datetime column using parse_dates parameter \n* selected as index of the dataframe using index_col parameter.","e02a458b":"### Timestamps and Periods\n\n##### What are timestamps and periods and how are they useful?\n\n* Timestamps : are used to represent a point in time. \n* Periods represent an interval in time. Periods can used to check if a specific event in the given period. They can also be converted to each other's form.","6f5679fd":"### Absolute change in successive rows","2faa984f":"###  Window functions\n\n1. Window functions : used to identify sub periods, calculates sub-metrics of sub-periods.\n\n    **Rolling** - Same size and sliding\n\n    **Expanding** - Contains all prior values","ceb0d174":"### Using date_range\n\n##### What is date_range and how is it useful?\n\n* **date_range** : is a method that returns a fixed frequency datetimeindex. It is quite useful when creating your own time series attribute for pre-existing data or arranging the whole data around the time series attribute created by you.","749da5d4":"## data cleaning ","f025d7a8":"#### Apple stocks to compare them with google","64a15dc0":"Google stocks data doesn't have any missing values","75af04d4":"## data that we gonna use \n\n1. Google Stocks Data\n2. Amazon Stocks Data\n3. IBM Stocks Data\n4. Apple Stocks Data","a34a001e":"## Open-high-low-close Chart\n\n![image.png](attachment:image.png)\n\n#### Description\nAlso known as OHLC Chart, Price Chart, Bar Chart.\n\nOpen-high-low-close Charts (or OHLC Charts) are used as a trading tool to visualise and analyse the price changes over time for securities, currencies, stocks, bonds, commodities, etc. OHLC Charts are useful for interpreting the day-to-day sentiment of the market and forecasting any future price changes through the patterns produced.\n\nThe y-axis on an OHLC Chart is used for the price scale, while the x-axis is the timescale. On each single time period, an OHLC Charts plots a symbol that represents two ranges: the highest and lowest prices traded, and also the opening and closing price on that single time period (for example in a day). On the range symbol, the high and low price ranges are represented by the length of the main vertical line. The open and close prices are represented by the vertical positioning of tick-marks that appear on the left (representing the open price) and on right (representing the close price) sides of the high-low vertical line.\n\nColour can be assigned to each OHLC Chart symbol, to distinguish whether the market is \"bullish\" (the closing price is higher than it opened) or \"bearish\" (the closing price is lower than it opened).\n\n### Anatomy\n\n![image.png](attachment:image.png)","5837593c":"#### IMB stocks to compare them with google","9f1783f2":"#### Amazon stocks to compare them with google","919102b0":"## Problem statement\nYou need to help Unicorn ventures with the decision. They usually invest in B2C start-ups less than 4 years old looking for pre-series A funding. In order to help Unicorn Ventures in their decision, you need to forecast the traffic on JetRail for the next 7 months. You are provided with traffic data of JetRail since inception in the test file.","4271d616":"##  Finance and statistics\n###  Percent change"}}