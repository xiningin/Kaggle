{"cell_type":{"8f87163c":"code","e7e295ba":"code","6729026f":"code","49c39050":"code","6b7af507":"code","459a5cbd":"code","6ad4fb01":"code","7498be50":"code","dd4639d4":"code","a45362e2":"code","69c4c49b":"code","802a9a09":"code","9e29ceb5":"code","4235f0bf":"code","b65ef517":"code","233e8256":"code","cef4cb24":"code","32aeb411":"code","20f0b0dc":"code","0f61d0fc":"code","0625bcd8":"code","35e6511c":"code","0cc57f07":"code","24747bb4":"code","42289e3e":"code","5de6ef67":"code","d3ced04d":"code","56a25e78":"code","104c6103":"code","57f79c92":"code","3da4a2b0":"code","ccbc8c9d":"code","99c1f13c":"code","80421d57":"code","970ecc35":"code","d06847ed":"code","fe0b3eb5":"markdown","aa4c19b3":"markdown","e5464e93":"markdown","34de2838":"markdown","af78c1ca":"markdown","4c6d1576":"markdown","417feba2":"markdown","f8a6f646":"markdown","1d003731":"markdown","17b2e05f":"markdown","4c89948f":"markdown","c899581d":"markdown","f095499d":"markdown","823b54b7":"markdown","fd9a376b":"markdown","841dd6aa":"markdown","21ec94b0":"markdown","3274e6e9":"markdown","4f68b9ee":"markdown","b57f9c62":"markdown","cc86ca69":"markdown"},"source":{"8f87163c":"import numpy as np \nimport pandas as pd \nimport seaborn as sns\nimport  plotly.plotly  as py\nimport matplotlib.pyplot as plt\n\nimport os\nprint(os.listdir(\"..\/input\"))\n","e7e295ba":"inspections = pd.read_csv(\"..\/input\/inspections.csv\")\nviolations = pd.read_csv(\"..\/input\/violations.csv\")","6729026f":"inspections.head()","49c39050":"violations.head()","6b7af507":"# violations['violation_code'].unique()","459a5cbd":"inspections.info()","6ad4fb01":"violations.info()","7498be50":"# groupby activity_day to create new column with the name count\ncount_ins = inspections.groupby(['activity_date']).size().reset_index(name='count')\nx = pd.DataFrame(count_ins['activity_date'])\ny = pd.DataFrame(count_ins['count'])\n# create separate df \ntimePlot = pd.concat([x,y], axis=1)\ntimePlot.activity_date = pd.to_datetime(timePlot.activity_date)\ntimePlot.set_index('activity_date', inplace=True)\n# show the first 10 raws, what we get\ntimePlot.head(10)\n","dd4639d4":"inspections.activity_date.max()\ninspections.activity_date.min()","a45362e2":"timePlot.plot.area(figsize=(20,6), linewidth=5, fontsize=15, stacked=False)\nplt.xlabel('Activity Date', fontsize=15)","69c4c49b":"pd.crosstab(index=inspections['pe_description'], columns='count').sort_values(by=['count'],ascending=False)","802a9a09":"inspections.groupby(['pe_description']).size()","9e29ceb5":"# Number of Food Inspections by Risk\nsns.set(rc={'figure.figsize':(14.7,8.27)})\ng = sns.countplot(x=\"pe_description\", data=inspections, order = inspections['pe_description'].value_counts().index, palette=\"Blues_d\")\ng.set_xticklabels(g.get_xticklabels(),rotation=90)\ng.tick_params(labelsize=10)","4235f0bf":"inspections['risk_level'] = inspections['pe_description'].apply(lambda x: x.split(\")\")[1])\nprint(inspections['risk_level'].head(5),'\\n')","b65ef517":"rsk = inspections.loc[inspections['pe_description'] == \"RESTAURANT (0-30) SEATS HIGH RISK\"]\nrsk.head()","233e8256":"pd.crosstab(index=rsk['facility_name'], columns='count').sort_values(by=['count'],ascending=False).head(20)","cef4cb24":"pd.crosstab(index=inspections['risk_level'], columns='count').sort_values(by=['count'],ascending=False)","32aeb411":"cntRisk = inspections.groupby(['risk_level']).size().reset_index(name='count')\ncntRisk.head()\n","20f0b0dc":"cntRisk['percent'] =  cntRisk['count']\/cntRisk['count'].sum()\ncntRisk.head()","0f61d0fc":"# pie plot with percent\nplot = cntRisk.plot.pie(y='percent', figsize=(5, 5))","0625bcd8":"# bar plot \nax = sns.barplot(x=\"percent\", y=\"risk_level\", data=cntRisk)","35e6511c":"# chart with sorting\ninspections['risk_level'] = inspections['risk_level'].str.replace('SEATS', 'RESTAURANTS')\nax = inspections['risk_level'].value_counts().plot(kind='barh',colormap='Blues_r', figsize=(15,7),\n                                         fontsize=13);\nax.set_alpha(0.5)\nax.set_title(\"Risk Level\", fontsize=18)\ntotals = []\n\n# find the values and append to list\nfor i in ax.patches:\n    totals.append(i.get_width())\n\n# set individual bar lables using above list\ntotal = sum(totals)\n\n# set individual bar lables using above list\nfor i in ax.patches:\n    # get_width pulls left or right; get_y pushes up or down\n    ax.text(i.get_width()+.3, i.get_y()+.38, \\\n            str(round((i.get_width()\/total)*100, 2))+'%', fontsize=10,\ncolor='dimgrey')\n\n# invert for largest on top \nax.invert_yaxis()","0cc57f07":"pd.crosstab(index=inspections['employee_id'], columns='count').sort_values(by=['count'],ascending=False)","24747bb4":"count_id = inspections.groupby(['employee_id']).size().reset_index(name='count')\nx = pd.DataFrame(count_id['employee_id'])\ny = pd.DataFrame(count_id['count'])\ncount_id = pd.concat([x,y], axis=1)\ncount_id['count'].describe()","42289e3e":"pd.crosstab(index=inspections['facility_name'], columns='count').sort_values(by=['count'],ascending=False)","5de6ef67":"inspections['facility_name'].value_counts().nlargest(20).plot(kind=\"bar\", figsize=(15, 6), fontsize=12, colormap='Blues_r')","d3ced04d":"subway = inspections.loc[inspections['facility_name'] == 'SUBWAY']\nsubway.head()","56a25e78":"pd.crosstab(index=subway['risk_level'], columns='count').sort_values(by=['count'],ascending=False)","104c6103":"# inspections['facility_city'].count()\npd.crosstab(index=inspections['facility_city'], columns='count').sort_values(by=['count'],ascending=False)","57f79c92":"# Fix bad data\ninspections['facility_city'] = inspections['facility_city'].str.replace('Kern', 'KERN')\ninspections['facility_city'] = inspections['facility_city'].str.replace('NORTHRISGE', 'NORTHRIDGE')\ninspections['facility_city'] = inspections['facility_city'].str.replace('Rowland Heights', 'ROWLAND HEIGHTS')\ninspections['facility_city'] = inspections['facility_city'].str.replace('WINNEKA', 'WINNETKA')","3da4a2b0":"print(inspections['facility_city'].describe())","ccbc8c9d":"df_merge = inspections.merge(right=violations.reset_index(), how='left', on='serial_number', suffixes=('', '_codes_'))\ndf_merge.head()\n","99c1f13c":"pd.crosstab(index=df_merge['violation_description'], columns='count').sort_values(by=['count'],ascending=False)","80421d57":"# df_merge['violation_description'].value_counts().nlargest(10).plot(kind=\"bar\", figsize=(15, 6), fontsize=12, colormap='Blues_r')","970ecc35":"# sns.plotting_context(font_scale=5.5)\nsns.set(rc={'figure.figsize':(14.7,10.27)})\ntop10 = sns.countplot(y=\"violation_description\", data=df_merge, order = df_merge['violation_description'].value_counts().nlargest(10).index, palette=\"Blues_d\")\ntop10.tick_params(labelsize=20)\n#top10.set_xticklabels(top10.get_xticklabels(),rotation=45)\n","d06847ed":"df_merge['facility_zip'].value_counts().nlargest(40).plot(kind=\"bar\", figsize=(15, 6), fontsize=12, colormap='tab20c')","fe0b3eb5":"**Number of Food Inspections by Inspection Date**","aa4c19b3":"The next thing I would want to know is to find a mean value of inspections, that one inspector does. For this pupose I can creat a crosstab and look at the min amd max value. But to know mean value is it enough just to perform **df['column_name'].describe()** command: ","e5464e93":"**Conclusion: **\nI finished with the first stage of exploration\nAfter conducting a brief analyzation of the dataset. We found out that in LA county there are ongoing inspections that check food establishments for the presence of health codes violation. Different violations reflect different levels of risk to the public's health and safety. From 2015 until 2018 there were 191371 inspections, 53% of which have High Risk Level. We also created a list with the Food establishments that have the highest amount of health violation codes. In addition to that we have the top 10 codes description and probability of encountering them today. \n\nBon appetit. :) ","34de2838":"Given the large number of inspections that inspectors have to complete, the time and effort it takes to discover critical violations can mean prolonged exposure to potential disease, illness, and unsanitary conditions at some food establishments.","af78c1ca":"The next step in our investigation is to find food establishments with the most critical violations, that needs special attention over time. We have 18 different types of risk levels. The largest group is Restaurant High Risks levels.\n","4c6d1576":"Subway has the highest amount of inspections. Lets investigate the risk level.","417feba2":"It helps a bit, but did not solve the whole problem.  Anyway now let's concentrated on exploration health code vialotions. And we can return to this problem later.","f8a6f646":"This is a bar plot from matplotlib library, it shows the top 20 Food Establishments sorted by count of inspections.\n","1d003731":"As we can see Subway has only Moderate Risk Level.\nWe can investigate a bit facility city. But it's preaty obvious, that majority instections would be in LA city. To prove it I create a crosstab and show amount. ","17b2e05f":"As was defined let\u2019s explore the number of food inspections by inspection date. Using the information from .info() we can see that the activity_date column has an object data type, so we need to change the data type. ","4c89948f":"The winner is the last chart! Very clear and understandable.","c899581d":"To see the entire whole amount of High Level risk group, we need to create a new feature, that contains only a risk level for restaurant or food market. We have 3 groups of levels: high, medium and low. 55,37% of inspections are for high risk restaurant.\n","f095499d":"**Context:**\nRestaurants and markets in Los Angeles county are regularly inspected for health code violations. A critical violation, according to the Department of Health, can lead to food contamination or illness. Some critical violations, like rodents in a kitchen, tend to alarm the general public while a violations like the wrong temperature for food or unlabeled cleaning chemicals are most susceptible to  spreading of food borne illnesses.\nWe have two files with inspections and codes description. I would want to find food establishments that are most likely to have critical violations so that they may be inspected first and avoided by people who care. For this purpose we need to calculate the number of complete inspections and explore risk levels. ","823b54b7":"To get the first view of dataset, we can use pandas commands:\n* df.describe()\n* df.head() # shows several rows\n* df.shape()\n* df.columns() # name of columns\n* df.info() # data type\n The output from **inspections.info()** should look like this: \n","fd9a376b":"Let's try different plots to visualize risks level and define what is better:","841dd6aa":"We can see that there are some bad data in ficility_city feature. Tthere are different ways how to deal with bad data, one of it is to replace: ","21ec94b0":"The last thing I want to visualize is the Number of Food Inspections by Zip Codes. \nNumber of Food Inspections by Zip","3274e6e9":"I would want to see the top 10 health code violations with description. We can use bar plot in horizontal view to look at the top 10 codes description. For this purpose we need to merge two datasets.","4f68b9ee":"With the next bar plot we can see Food Establishments that have the highest amount of inspections:","b57f9c62":"We can find min\/max date time we defined exact period of time from  2015-07-01 till 2017-12-29.","cc86ca69":"We can see how many rows in the dataset, names and data types of columns and information about null values. Inspections.csv does not contain any null values, which is quite a rare case in real life. Normally data would require some cleaning and transformation. "}}