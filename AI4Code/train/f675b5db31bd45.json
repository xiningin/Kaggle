{"cell_type":{"0adc4a2c":"code","2e41dd98":"code","e2a5442d":"code","f62ffe8f":"code","de3da4bc":"code","db5ff8b0":"code","af0ed74b":"code","2f0f313d":"code","5f0076f3":"code","e4e4bb9a":"code","714e471a":"code","8195ebca":"code","dcfdd95d":"markdown","b332250f":"markdown","1d5f5ea6":"markdown"},"source":{"0adc4a2c":"import os\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport cv2\nimport tensorflow as tf\nfrom tqdm import tqdm\n\n%matplotlib inline\n\n!pip install mtcnn\nfrom mtcnn.mtcnn import MTCNN","2e41dd98":"image_paths = []\nimage_names = []\nimage_dir = \"..\/input\/pins-face-recognition\/105_classes_pins_dataset\/pins_Mark Zuckerberg\/\"\n\nfor image_name in tqdm(os.listdir(image_dir)) : \n    image_path = image_dir+image_name\n    image_paths.append(image_path)\n    image_names.append(image_name)    ","e2a5442d":"image_dataframe = pd.DataFrame(index=np.arange(len(image_names)),columns=[\"image_name\",\"path\"])\n\ni=0 \nfor name, path in tqdm(zip(image_names, image_paths)) : \n    image_dataframe.iloc[i][\"image_name\"] = name\n    image_dataframe.iloc[i][\"path\"] = path\n    i+=1","f62ffe8f":"def get_sample_images(): \n    \n    sample = []\n    random_image_paths = [np.random.choice(image_dataframe[\"path\"]) for i in range(4)]\n    plt.figure(figsize = (8,8))\n    \n    for i in range(4) : \n        plt.subplot(2,2,i+1)\n        image = cv2.imread(random_image_paths[i])\n        image = cv2.cvtColor(image,cv2.COLOR_BGR2RGB)   ###\n        sample.append(image)\n        plt.imshow(image,cmap=\"gray\")\n        plt.title(\"Image {}\".format(i+1))\n        plt.xticks([])\n        plt.yticks([])\n        plt.grid(False)\n        \n    plt.tight_layout()\n    \n    return sample","de3da4bc":"detector = MTCNN()","db5ff8b0":"def mtcnn_detector(images) : \n    for image in images: \n        face_location = detector.detect_faces(image)\n        for face in zip(face_location): \n            x_coordinate,y_coordinate,width,height=face[0]['box']\n            cv2.rectangle(image,(x_coordinate,y_coordinate),(x_coordinate+width,y_coordinate+height),(0,0,80),2)","af0ed74b":"sample1 = get_sample_images()\nmtcnn_detector(sample1)","2f0f313d":"plt.figure(figsize = (8,8))\n\nfor i in range(4) : \n    plt.subplot(2,2,i+1)\n    plt.imshow(sample1[i],cmap=\"gray\")\n    plt.title(\"Image {}\".format(i+1))\n    plt.xticks([])\n    plt.yticks([])\n    plt.grid(False)\n    \nplt.tight_layout() ","5f0076f3":"def mosaic(src, ratio=0.1):\n    small = cv2.resize(src, None, fx=ratio, fy=ratio, interpolation=cv2.INTER_NEAREST)\n    return cv2.resize(small, src.shape[:2][::-1], interpolation=cv2.INTER_NEAREST)","e4e4bb9a":"def mtcnn_mosaic(images) : \n    for image in images: \n        face_location = detector.detect_faces(image)\n        for face in zip(face_location): \n            x_coordinate,y_coordinate,width,height=face[0]['box']\n            mosaic_image=mosaic(image[(y_coordinate):(y_coordinate+height),(x_coordinate):(x_coordinate+width)])\n            image[(y_coordinate):(y_coordinate+height),(x_coordinate):(x_coordinate+width)]=mosaic_image","714e471a":"sample2 = get_sample_images()\nmtcnn_mosaic(sample2)","8195ebca":"plt.figure(figsize = (8,8))\n\nfor i in range(4) : \n    plt.subplot(2,2,i+1)\n    plt.imshow(sample2[i],cmap=\"gray\")\n    plt.title(\"Image {}\".format(i+1))\n    plt.xticks([])\n    plt.yticks([])\n    plt.grid(False)\n    \nplt.tight_layout() ","dcfdd95d":"# Get images","b332250f":"# Face Mosaic","1d5f5ea6":"# Face Rectangle\nhttps:\/\/github.com\/ipazc\/mtcnn"}}