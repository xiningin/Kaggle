{"cell_type":{"6a2c83e4":"code","2ab7da00":"code","d141674c":"code","11da2d07":"code","d1f2ab3e":"code","9226b776":"code","9ac5aeb9":"code","1bbe0232":"code","1ddb0b92":"code","ae337781":"code","53a033bb":"code","c8c10b0e":"code","3ae3f54d":"code","e3115652":"code","8e544393":"code","747ee45e":"code","a3f63ab4":"code","98e21ed1":"code","d40e3d05":"markdown"},"source":{"6a2c83e4":"!pip install lifetimes\n!pip install sqlalchemy","2ab7da00":"from sqlalchemy import create_engine\nimport datetime as dt\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom lifetimes import BetaGeoFitter\nfrom lifetimes import GammaGammaFitter\nfrom lifetimes.plotting import plot_period_transactions\n\npd.set_option('display.max_columns', None)\npd.set_option('display.width', 500)\npd.set_option('display.float_format', lambda x: '%.4f' % x)\nfrom sklearn.preprocessing import MinMaxScaler","d141674c":"def outlier_thresholds(dataframe, variable):\n    quartile1 = dataframe[variable].quantile(0.01)\n    quartile3 = dataframe[variable].quantile(0.99)\n    interquantile_range = quartile3 - quartile1\n    up_limit = quartile3 + 1.5 * interquantile_range\n    low_limit = quartile1 - 1.5 * interquantile_range\n    return low_limit, up_limit\n\ndef replace_with_thresholds(dataframe, variable):\n    low_limit, up_limit = outlier_thresholds(dataframe, variable)\n    dataframe.loc[(dataframe[variable] < low_limit), variable] = low_limit\n    dataframe.loc[(dataframe[variable] > up_limit), variable] = up_limit","11da2d07":"!pip install openpyxl\ndf_ = pd.read_excel(\"..\/input\/online-retail-ii-uci\/online_retail_II.xlsx\",\n                    sheet_name=\"Year 2010-2011\")","d1f2ab3e":"df = df_.copy()\ndf.shape","9226b776":"df.dropna(inplace=True)\ndf = df[~df[\"Invoice\"].str.contains(\"C\", na=False)]\ndf = df[df[\"Quantity\"] > 0]","9ac5aeb9":"replace_with_thresholds(df, \"Quantity\")\nreplace_with_thresholds(df, \"Price\")\ndf.describe().T","1bbe0232":"df[\"TotalPrice\"] = df[\"Quantity\"] * df[\"Price\"]\ntoday_date = dt.datetime(2011, 12, 11)","1ddb0b92":"# recency: The elapsed time since the last purchase. Weekly. (according to analysis day on cltv_df, user specific here)\n# T: The age of the customer. Weekly. (how long before the analysis date the first purchase was made)\n# frequency: total number of repeat purchases (frequency>1)\n# monetary_value: average earnings per purchase\n\n\ncltv_df = df.groupby('Customer ID').agg({'InvoiceDate': [lambda date: (date.max() - date.min()).days,\n                                                         lambda date: (today_date - date.min()).days],\n                                         'Invoice': lambda num: num.nunique(),\n                                         'TotalPrice': lambda TotalPrice: TotalPrice.sum()})\n\ncltv_df.columns = cltv_df.columns.droplevel(0)\ncltv_df.columns = ['recency', 'T', 'frequency', 'monetary']\n\n# express monetary value as average earnings per purchase\ncltv_df[\"monetary\"] = cltv_df[\"monetary\"] \/ cltv_df[\"frequency\"]\n\n# selecting monetary values \u200b\u200bgreater than zero\ncltv_df = cltv_df[cltv_df[\"monetary\"] > 0]\ncltv_df.head()\n\n# Expression of recency and T for BGNBD in weekly terms\ncltv_df[\"recency\"] = cltv_df[\"recency\"] \/ 7\ncltv_df[\"T\"] = cltv_df[\"T\"] \/ 7\n\n# frequency must be greater than 1.\ncltv_df = cltv_df[(cltv_df['frequency'] > 1)]","ae337781":"bgf = BetaGeoFitter(penalizer_coef=0.001)\n\nbgf.fit(cltv_df['frequency'],\n        cltv_df['recency'],\n        cltv_df['T'])","53a033bb":"bgf.conditional_expected_number_of_purchases_up_to_time(1,\n                                                        cltv_df['frequency'],\n                                                        cltv_df['recency'],\n                                                        cltv_df['T']).sort_values(ascending=False).head(10)\n\ncltv_df[\"expected_purc_1_week\"] = bgf.predict(1,\n                                              cltv_df['frequency'],\n                                              cltv_df['recency'],\n                                              cltv_df['T'])\n\ncltv_df.head()","c8c10b0e":"bgf.predict(4,\n            cltv_df['frequency'],\n            cltv_df['recency'],\n            cltv_df['T']).sort_values(ascending=False).head(10)\n\ncltv_df[\"expected_purc_1_month\"] = bgf.predict(4,\n                                               cltv_df['frequency'],\n                                               cltv_df['recency'],\n                                               cltv_df['T'])\n\ncltv_df.sort_values(\"expected_purc_1_month\", ascending=False).head(20)","3ae3f54d":"bgf.predict(4,\n            cltv_df['frequency'],\n            cltv_df['recency'],\n            cltv_df['T']).sum()","e3115652":"bgf.predict(4 * 3,\n            cltv_df['frequency'],\n            cltv_df['recency'],\n            cltv_df['T']).sum()","8e544393":"plot_period_transactions(bgf)\nplt.show()\n","747ee45e":"\nggf = GammaGammaFitter(penalizer_coef=0.01)\nggf.fit(cltv_df['frequency'], cltv_df['monetary'])\n\nggf.conditional_expected_average_profit(cltv_df['frequency'],\n                                        cltv_df['monetary']).head(10)\n\nggf.conditional_expected_average_profit(cltv_df['frequency'],\n                                        cltv_df['monetary']).sort_values(ascending=False).head(10)\n\ncltv_df[\"expected_average_profit\"] = ggf.conditional_expected_average_profit(cltv_df['frequency'],\n                                                                             cltv_df['monetary'])\n\ncltv_df.sort_values(\"expected_average_profit\", ascending=False).head(20)","a3f63ab4":"cltv = ggf.customer_lifetime_value(bgf,\n                                   cltv_df['frequency'],\n                                   cltv_df['recency'],\n                                   cltv_df['T'],\n                                   cltv_df['monetary'],\n                                   time=3,  # 3 ayl\u0131k\n                                   freq=\"W\",  # T'nin frekans bilgisi.\n                                   discount_rate=0.01)\n\ncltv.head()\n\ncltv.shape\ncltv = cltv.reset_index()\ncltv.sort_values(by=\"clv\", ascending=False).head(50)\n\ncltv_final = cltv_df.merge(cltv, on=\"Customer ID\", how=\"left\")\ncltv_final.sort_values(by=\"clv\", ascending=False).head(10)\n\nscaler = MinMaxScaler(feature_range=(0, 1))\nscaler.fit(cltv_final[[\"clv\"]])\ncltv_final[\"scaled_clv\"] = scaler.transform(cltv_final[[\"clv\"]])\n\ncltv_final.sort_values(by=\"scaled_clv\", ascending=False).head()","98e21ed1":"cltv_final[\"segment\"] = pd.qcut(cltv_final[\"scaled_clv\"], 4, labels=[\"D\", \"C\", \"B\", \"A\"])\ncltv_final.head()\n\ncltv_final.sort_values(by=\"scaled_clv\", ascending=False).head(50)\n\ncltv_final.groupby(\"segment\").agg(\n    {\"count\", \"mean\", \"sum\"})","d40e3d05":"<h2 style='background:#11489c; border:0; color:white'><center>Customer Lifetime Value Prediction<\/center><\/h2>\n\nCustomer lifetime value (CLV or customer LTV) is the predicted sum total of all future revenues (or profits) that a particular customer will generate for a business. Using accurate estimates of CLV as the basis for marketing decisions will maximize the company's revenues (or profits)\n\n<a href=\"https:\/\/imgbb.com\/\"><img src=\"https:\/\/i.ibb.co\/LQvsNMS\/pasted-image.jpg\" alt=\"pasted-image\" border=\"0\"><\/a>"}}