{"cell_type":{"df486de4":"code","b28a9221":"code","8474b16f":"code","01575753":"code","19cac315":"code","0830ec34":"code","ddd90331":"code","a51dd0d3":"code","d00dddb6":"code","f6d31a69":"code","ad473960":"code","4a88897a":"code","f729d0d0":"code","0d0301f0":"code","033f0f48":"code","cb0dff80":"code","4bcce8f4":"code","255a199f":"code","7e9a26bc":"code","5b613dd7":"code","5c2d1d72":"code","8ad31ef4":"code","6319cf50":"code","c520be5a":"code","9a37cf73":"code","18be60f9":"markdown","ad71386f":"markdown","8ebdc73d":"markdown","96158bc9":"markdown"},"source":{"df486de4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n\n# Tutorial from: \n# https:\/\/medium.com\/open-machine-learning-course\/open-machine-learning-course-topic-1-exploratory-data-analysis-with-pandas-de57880f1a68\n\n\n\n# Load the data\ndf = pd.read_csv('..\/input\/bigml_59c28831336c6604c800002a.csv')\ndf.head()\n\n# Summarythe Data \n# Shape it (correspond to size() in Octave)\nprint(df.shape)\n\n# Columns\nprint(df.columns)\n\n# General info\nprint(df.info())\n# The code above is different of \"print(df.info)\" - without parenthesis inside\n\n","b28a9221":"# See that dtypes indicates data types:\n# bool = logical\n# object = categorical\n# float and int = numeric\n\n# with this code we can see if there are MISSING VALUES. It's not the case here because we have, in each column, 3333 entries, exactly the\n# total number of rows of the table (we see that with SHAPE code)\n\n# To CONVERT one column of one data type to another data type. Using \"astype\" code\ndf['churn'] = df['churn'].astype('int64') # Here, from bool (logical) to int64 (numerical)\n\n# And see again\nprint(df.info()) # Very funny\n\n# Using \"describe\" code, the \"summary\" function of Python\ndf.describe()          # Again, is different use with parenthesis and without parenthesis\n\n\n","8474b16f":"# Count is the number of non-missing values\n# The others you can know by reading...\n# But the code above works only for numerical features. To use for non-numerical features we run:\n\ndf.describe(include=['object', 'bool'])\n\n# Another way for non-numerical is\ndf['churn'].value_counts()\ndf['international plan'].value_counts()\n\n# To see the proportion\ndf['churn'].value_counts(normalize=True)\ndf['international plan'].value_counts(normalize=True)","01575753":"# Sort the Data\ndf.sort_values(by = 'total day charge', ascending=False).head()\n\n# Sort by multiple columns\ndf.sort_values(by=['churn', 'total day charge'], ascending=[False, False]).head()","19cac315":"# Indexing and retrieving data\n# Andwer the question: what is the proportion of churned users in our dataframe?\ndf[\"churn\"].mean() # Since this feature was bool type (0 and 1 entries), the mean will give us the proportion of the True Answers\n\n# Another Question:\n# What are average values of numerical variables for churned users?\ndf[df['churn'] == 1].mean() # That is, mean of the (numerical) records in \"df\" that satisfy the condition (churn == 1). The mean() function\n# applies only for numerical variables\n\n# One more\n# How much time (on average) do churned users spend on phone during daytime?\ndf[df['churn'] == 1]['total day minutes'].mean()\n\n# That is more than the total average, shit!\ndf['total day minutes'].mean()","0830ec34":"# What is the maximum length of international calls among loyal users (Churn == 0) \n# who do not have an international plan? - TWO CONDITIONS\n\ndf[(df['churn'] == 0) & (df['international plan'] == 'no')]['total intl minutes'].max()\n\n\n# Other way for Indexing\ndf.loc[0:5, 'state':'area code']  # The loc method is used for indexing by name (ROWS don't have name...)\n\n# Or, that returns the same:\ndf.iloc[0:5, 0:3]  # iloc() is used for indexing by number.\n\n# In Python, the first (1) row\/column is indexed as zero(0). And, the last indexed row\/column isn't included.\n# You can see in the code above, the row five is indexed, but not included in the output.\n# The same for columns. The column three is indexed, but not included in the output.\n\n# If we need the first line\n\ndf[:1] # with all columns. The number we put before the two points is the number of lines the output will have (Starting by the begin of the Table)\n\n# or last line of the data frame\ndf[-1:]  # with all columns. It's like we said: \"Need from the -1 row (the last row) to the last\".\n","ddd90331":"# Applying Functions to Cells, Columns and Rows\n\n# The apply() function\ndf.apply(np.max)","a51dd0d3":"# lambda function\ndf[df['state'].apply(lambda state: state[0] == 'W')].head()","d00dddb6":"# Map method\nd = {'no' : False, 'yes' : True} \ndf['international plan'] = df['international plan'].map(d) \ndf","f6d31a69":"# Replace method\n\ndf = df.replace({'voice mail plan': d}) \ndf.head()","ad473960":"# Example of Grouping\ncolumns_to_show = ['total day minutes', 'total eve minutes', \n                   'total night minutes']\ndf.groupby(['churn'])[columns_to_show].describe(percentiles=[])","4a88897a":"# Another example using agg(), passing a list of functions\n\ncolumns_to_show = ['total day minutes', 'total eve minutes', \n                   'total night minutes']\ndf.groupby(['churn'])[columns_to_show].agg([np.mean, np.std, \n                                            np.min, np.max])","f729d0d0":"# Crosstab method\npd.crosstab(df['churn'], df['international plan'])","0d0301f0":"pd.crosstab(df['churn'], df['voice mail plan'], normalize=True)\n# The normalize argument we use to see the proportions","033f0f48":"# pivot_table method\ndf.pivot_table(['total day calls', 'total eve calls', 'total night calls'], ['area code'], aggfunc='mean')","cb0dff80":"# Total calls\ntotal_calls = df['total day calls'] + df['total eve calls'] + \\\n              df['total night calls'] + df['total intl calls'] \ndf.insert(loc=len(df.columns), column='total calls', value=total_calls) \ndf.head()\n\n# See the \"\\\" to jump from one line to another (WTF)","4bcce8f4":"# The same act (now with charges), without the intermediate object\n\ndf['total charge'] = df['total day charge'] + df['total eve charge'] + \\\n                     df['total night charge'] + df['total intl charge']\ndf.head()","255a199f":"# Deleting rows or columns\n\n# get rid of just created columns \ndf.drop(['total charge', 'total calls'], axis=1, inplace=True) \n# axis = 1 means delete column, axis = 0 (or default\/nothing) means delete rows\n# inplace argument tells if we want to change the existing DataFrame (True) or not(False)\ndf","7e9a26bc":"# and here\u2019s how you can delete rows \ndf.drop([1, 2]).head() # means delete row 1 and 2\n# axis here is default (0)\n# inplace here is default (False)","5b613dd7":"# Contingency Table\npd.crosstab(df['churn'], df['international plan'], margins=True)\n# The margins argument add the All column and Row","5c2d1d72":"# some imports and \"magic\" commands to set up plotting \n%matplotlib inline                          # What is it?! \nimport matplotlib.pyplot as plt \n# pip install seaborn \nimport seaborn as sns\nplt.rcParams['figure.figsize'] = (10, 10) # adjust the size of the Picture (nice!) - From the matplotlib package\nsns.countplot(x='international plan', hue='churn', data=df) # Bar Plot (Count Plot, from the Seaborn package)","8ad31ef4":"# Crossing another variables\npd.crosstab(df['churn'], df['customer service calls'], margins=True)","6319cf50":"sns.countplot(x='customer service calls', hue='churn', data=df)","c520be5a":"# Let's add a new feature. A binary variable = Customer service calls > 3 (why that? Because we have a important change in the value 3)\ndf['many_service_calls'] = (df['customer service calls'] > 3).astype('int') # Creating the feature direct, without an intermediate object\npd.crosstab(df['many_service_calls'], df['churn'], margins=True) # Making a Cross Table\nsns.countplot(x='many_service_calls', hue='churn', data=df); # Making a plot","9a37cf73":"pd.crosstab(df['many_service_calls'] & df['international plan'] , df['churn'])","18be60f9":"# DataFrame transformations\n\n\n### Let's add a column","ad71386f":"# First Analysis","8ebdc73d":"# Summary Tables\n\n### Let's see how the observations in our sample are distributed in the context of two variables\u200a\u2014\u200aChurn and International plan","96158bc9":"# Grouping\n\n\n## *General Syntax*\n> ### *df.groupby(by=grouping_columns)[columns_to_show].function()*"}}