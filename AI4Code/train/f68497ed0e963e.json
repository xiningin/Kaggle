{"cell_type":{"6d4d961b":"code","bbf9cda1":"code","c377dfe6":"code","a9873a37":"code","bb7bcabf":"code","779c413e":"code","2e29ce05":"code","12bc7608":"code","b7e9ab45":"code","2284979c":"code","7c97aa02":"code","ebe393dd":"code","4366002f":"code","baabc7d4":"code","a3541078":"code","71550260":"code","b9cf1ec9":"code","2eb2b734":"code","5fa8d29d":"code","f8f3299d":"code","822259f6":"code","166ca19d":"code","dccef924":"code","24593ff0":"code","15ddc3de":"code","21faa6ef":"code","905097bf":"markdown","3e942660":"markdown","725e6ff0":"markdown"},"source":{"6d4d961b":"import re\nimport sys\nimport time\nimport datetime\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom sklearn import metrics\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.ensemble import RandomForestRegressor","bbf9cda1":"sns.set(style='darkgrid')\nsns.set_palette('PuBuGn_d')","c377dfe6":"df = pd.read_csv(\"..\/input\/google-play-store-apps\/googleplaystore.csv\")\ndf.head()","a9873a37":"df.info()","bb7bcabf":"plt.figure(figsize=(7, 5))\nsns.heatmap(df.isnull(), cmap='viridis')\ndf.isnull().sum()","779c413e":"df.isnull().sum()","2e29ce05":"#handle missing data\n\ndf['Rating'] = df['Rating'].fillna(df['Rating'].median())\n\n# Before filling null values we have to clean all non numerical values & unicode charachters \nreplaces = [u'\\u00AE', u'\\u2013', u'\\u00C3', u'\\u00E3', u'\\u00B3', '[', ']', \"'\"]\nfor i in replaces:\n\tdf['Current Ver'] = df['Current Ver'].astype(str).apply(lambda x : x.replace(i, ''))\n\nregex = [r'[-+|\/:\/;(_)@]', r'\\s+', r'[A-Za-z]+']\nfor j in regex:\n\tdf['Current Ver'] = df['Current Ver'].astype(str).apply(lambda x : re.sub(j, '0', x))\n\ndf['Current Ver'] = df['Current Ver'].astype(str).apply(lambda x : x.replace('.', ',',1).replace('.', '').replace(',', '.',1)).astype(float)\ndf['Current Ver'] = df['Current Ver'].fillna(df['Current Ver'].median())","12bc7608":"# Count number of unique values in category column \ndf['Category'].unique()","b7e9ab45":"# Check record  of unreasonable value which is 1.9\ni = df[df['Category'] == '1.9'].index\ndf.loc[i]","2284979c":"df = df.drop(i)","7c97aa02":"# Removing NaN values\ndf = df[pd.notnull(df['Last Updated'])]\ndf = df[pd.notnull(df['Content Rating'])]","ebe393dd":"# App values encoding\nle = preprocessing.LabelEncoder()\ndf['App'] = le.fit_transform(df['App'])\ndf['Genres'] = le.fit_transform(df['Genres'])\ndf['Content Rating'] = le.fit_transform(df['Content Rating'])","4366002f":"# Category features encoding\ncategory_list = df['Category'].unique().tolist() \ncategory_list = ['cat_' + word for word in category_list]\ndf = pd.concat([df, pd.get_dummies(df['Category'], prefix='cat')], axis=1)","baabc7d4":"# Price cleaning\ndf['Price'] = df['Price'].apply(lambda x : x.strip('$'))\ndf['Installs'] = df['Installs'].apply(lambda x : x.strip('+').replace(',', ''))","a3541078":"# Type encoding\ndf['Type'] = pd.get_dummies(df['Type'])","71550260":"# Last Updated encoding\ndf['Last Updated'] = df['Last Updated'].apply(lambda x : time.mktime(datetime.datetime.strptime(x, '%B %d, %Y').timetuple()))","b9cf1ec9":"# Convert kbytes to mbytes \nk_indices = df['Size'].loc[df['Size'].str.contains('k')].index.tolist()\nconverter = pd.DataFrame(df.loc[k_indices, 'Size'].apply(lambda x: x.strip('k')).astype(float).apply(lambda x: x \/ 1024).apply(lambda x: round(x, 3)).astype(str))\ndf.loc[k_indices,'Size'] = converter","2eb2b734":"# Size cleaning\ndf['Size'] = df['Size'].apply(lambda x: x.strip('M'))\ndf[df['Size'] == 'Varies with device'] = 0\ndf['Size'] = df['Size'].astype(float)","5fa8d29d":"# Split data into training and testing sets\nfeatures = ['App', 'Reviews', 'Size', 'Installs', 'Type', 'Price', 'Content Rating', 'Genres', 'Last Updated', 'Current Ver']\nfeatures.extend(category_list)\nX = df[features]\ny = df['Rating']","f8f3299d":"# Split the dataset into 75% train data and 25% test data.\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 10)","822259f6":"# Look at the 5 closest neighbors\nmodel = KNeighborsRegressor(n_neighbors=5)","166ca19d":"# Find the mean accuracy of knn regression using X_test and y_test\nmodel.fit(X_train, y_train)","dccef924":"# Calculate the mean accuracy of the KNN model\naccuracy = model.score(X_test,y_test)\nprint('Accuracy: ' + str(np.round(accuracy*100, 2)) + '%')","24593ff0":"# Try different numbers of n_estimators\nn_neighbors = np.arange(1, 20, 1)\nscores = []\nfor n in n_neighbors:\n    model.set_params(n_neighbors=n)\n    model.fit(X_train, y_train)\n    scores.append(model.score(X_test, y_test))\nplt.figure(figsize=(7, 5))\nplt.title(\"Effect of Estimators\")\nplt.xlabel(\"Number of Neighbors K\")\nplt.ylabel(\"Score\")\nplt.plot(n_neighbors, scores)","15ddc3de":"model = RandomForestRegressor(n_jobs=-1)\n# Try different numbers of n_estimators\nestimators = np.arange(10, 150, 10)\nscores = []\nfor n in estimators:\n    model.set_params(n_estimators=n)\n    model.fit(X_train, y_train)\n    scores.append(model.score(X_test, y_test))\nplt.figure(figsize=(7, 5))\nplt.title(\"Effect of Estimators\")\nplt.xlabel(\"no. estimator\")\nplt.ylabel(\"score\")\nplt.plot(estimators, scores)\nresults = list(zip(estimators,scores))\nresults","21faa6ef":"predictions = model.predict(X_test)\nprint('Mean Absolute Error:', metrics.mean_absolute_error(y_test, predictions))\nprint('Mean Squared Error:', metrics.mean_squared_error(y_test, predictions))\nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, predictions)))","905097bf":"# KNN","3e942660":"Looks like there are missing values in \"Rating\", \"Type\", \"Content Rating\" and \" Android Ver\" also has some missing values, but most of these missing values in \"Rating\" column.","725e6ff0":"# RandomForestRegressor"}}