{"cell_type":{"eee17e2f":"code","68cb2925":"code","855bc764":"code","d1723bf7":"code","ffca3aaa":"code","8dc045ea":"code","1fb19524":"code","e6ec4c00":"code","def71b96":"code","ec7a0f69":"code","c8e03e22":"code","30ea467b":"code","bbeb3159":"code","6f02002b":"code","c3489f2e":"code","b31679e3":"markdown","22a64a0d":"markdown","a235caad":"markdown"},"source":{"eee17e2f":"#import\nimport numpy as np\nimport matplotlib.pyplot as plt","68cb2925":"#create data\nN = 1000\nx, y, z = np.random.normal(0, 1, (3, N))","855bc764":"# Data for a three-dimensional line\nfig = plt.figure()\nax = plt.axes(projection='3d')\n\nzline = np.linspace(0, 15, 1000)\nxline = np.sin(zline)\nyline = np.cos(zline)\nax.plot3D(xline, yline, zline, 'black')","d1723bf7":"def f(x, y):\n    return np.sin(np.sqrt(x ** 2 + y ** 2))\n\nx = np.linspace(-6, 6, 1000)\ny = np.linspace(-6, 6, 1000)\n\nX, Y = np.meshgrid(x, y)\nZ = f(X, Y)\n\nfig = plt.figure()\nax = plt.axes(projection='3d')\nax.contour3D(X, Y, Z, 50, cmap='binary')\nax.set_xlabel('x')\nax.set_ylabel('y')\nax.set_zlabel('z');","ffca3aaa":"def f(x, y):\n    return np.sin(5*x)*np.cos(5*y)\/5\n\nx = np.linspace(-1, 1, 1000)\ny = np.linspace(-1, 1, 1000)\n\nX, Y = np.meshgrid(x, y)\nZ = f(X, Y)\n\nfig = plt.figure()\nax = plt.axes(projection='3d')\nax.contour3D(X, Y, Z, 50, cmap='binary')\nax.set_xlabel('x')\nax.set_ylabel('y')\nax.set_zlabel('z');","8dc045ea":"def f(x, y):\n    return np.sin(10*(x**2+y**2))\/10\n        \nx = np.linspace(-0.8, 0.8, 100)\ny = np.linspace(-0.8, 0.8, 100)\n\nX, Y = np.meshgrid(x, y)\nZ = f(X, Y)\n\nfig = plt.figure()\nax = plt.axes(projection='3d')\nax.contour3D(X, Y, Z, 50, cmap='binary')\nax.set_xlabel('x')\nax.set_ylabel('y')\nax.set_zlabel('z');","1fb19524":"def f(x, y):\n    return 1-abs(x+y)-abs(y-x)\n        \nx = np.linspace(-6, 6, 1000)\ny = np.linspace(-6, 6, 1000)\n\nX, Y = np.meshgrid(x, y)\nZ = f(X, Y)\n\nfig = plt.figure()\nax = plt.axes(projection='3d')\nax.contour3D(X, Y, Z, 50, cmap='binary')\nax.set_xlabel('x')\nax.set_ylabel('y')\nax.set_zlabel('z');","e6ec4c00":"def f(x, y):\n    return 1\/(15*(x**2+y**2))\n        \nx = np.linspace(-1, 1, 10)\ny = np.linspace(-1, 1, 10)\n\nX, Y = np.meshgrid(x, y)\nZ = f(X, Y)\n\nfig = plt.figure()\nax = plt.axes(projection='3d')\nax.contour3D(X, Y, Z, 50, cmap='binary')\nax.set_xlabel('x')\nax.set_ylabel('y')\nax.set_zlabel('z');","def71b96":"def f(x, y):\n    return 0.75\/np.exp(((x*5)**2)*((y*5)**2))\n        \nx = np.linspace(-1, 1, 100)\ny = np.linspace(-1, 1, 100)\n\nX, Y = np.meshgrid(x, y)\nZ = f(X, Y)\n\nfig = plt.figure()\nax = plt.axes(projection='3d')\nax.contour3D(X, Y, Z, 50, cmap='binary')\nax.set_xlabel('x')\nax.set_ylabel('y')\nax.set_zlabel('z');","ec7a0f69":"import plotly.express as px\nimport plotly.graph_objects as go\nimport numpy as np","c8e03e22":"# Helix equation\nt = np.linspace(0, 10, 50)\nx, y, z = np.cos(t), np.sin(t), t\n\nfig = go.Figure(data=[go.Scatter3d(x=x, y=y, z=z,\n                                   mode='markers')])\nfig.show()","30ea467b":"def f(x, y):\n    return 1-abs(x+y)-abs(y-x)\n        \nx = np.linspace(-6, 6, 100)\ny = np.linspace(-6, 6, 100)\nX, Y = np.meshgrid(x, y)\nZ = f(X, Y)\n\nfig = go.Figure(data=[go.Surface(z=Z, x=X, y=Y)])\nfig.update_layout(title='Piramid', autosize=False,\n                  width=500, height=500,\n                  margin=dict(l=65, r=50, b=65, t=90))\nfig.show()","bbeb3159":"def f(x, y):\n    return 1\/(15*(x**2+y**2))\n        \nx = np.linspace(-0.1, 0.1, 100)\ny = np.linspace(-0.1, 0.1, 100)\nX, Y = np.meshgrid(x, y)\nZ = f(X, Y)\n\nfig = go.Figure(data=[go.Surface(z=Z, x=X, y=Y)])\nfig.update_layout(title='Tube', autosize=False,\n                  width=500, height=500,\n                  margin=dict(l=65, r=50, b=65, t=90))\nfig.show()","6f02002b":"def f(x, y):\n    return 0.75\/np.exp(((x*5)**2)*((y*5)**2))\n        \nx = np.linspace(-1, 1, 100)\ny = np.linspace(-1, 1, 100)\nX, Y = np.meshgrid(x, y)\nZ = f(X, Y)\n\nfig = go.Figure(data=[go.Surface(z=Z, x=X, y=Y)])\nfig.update_layout(title='Intersecting Fences', autosize=False,\n                  width=500, height=500,\n                  margin=dict(l=65, r=50, b=65, t=90))\nfig.show()","c3489f2e":"def f(x, y):\n    return np.sin(10*(x**2+y**2))\/10\n        \nx = np.linspace(-0.8, 0.8, 100)\ny = np.linspace(-0.8, 0.8, 100)\nX, Y = np.meshgrid(x, y)\nZ = f(X, Y)\n\nfig = go.Figure(data=[go.Surface(z=Z, x=X, y=Y)])\nfig.update_layout(title='Ripple', autosize=False,\n                  width=500, height=500,\n                  margin=dict(l=65, r=50, b=65, t=90))\nfig.show()","b31679e3":"## Using plotly to plot 3D shapes","22a64a0d":"## Using matplotlib to plot 3D shapes","a235caad":"## Following the tutorial on Matplotlib"}}