{"cell_type":{"6d7d2379":"code","da8ef038":"code","77049353":"code","56750e4b":"code","eef10486":"code","a7a029b1":"code","a7f116c8":"code","36aca7db":"code","f73d5ed4":"code","5dce0a74":"code","02267210":"code","fd1ff6bb":"code","887ab391":"code","fd379360":"code","ee1f7514":"code","4d59419a":"code","f2daf231":"code","c104a1a0":"code","09639fb7":"code","bd790845":"code","8c52da2b":"code","3cc8f1f2":"code","996a075a":"code","8def80b4":"code","ca3f0a1f":"code","3a43dd1f":"code","c0e5cbc2":"markdown","d4b757fb":"markdown","9426342d":"markdown","f88a40fc":"markdown","6a403423":"markdown","a5661bec":"markdown","10a1ca44":"markdown","81a047c3":"markdown","5298972a":"markdown","ab7da925":"markdown","665a0a5c":"markdown","6ff1f9fc":"markdown","c1b2e199":"markdown","cb6be5ff":"markdown","90c01de8":"markdown","eb8dfa8a":"markdown","0eed67da":"markdown","39392d1e":"markdown","eb30c4ef":"markdown","6a4e7ed7":"markdown","b348ae26":"markdown","1445ee4c":"markdown","ca8ffdfb":"markdown","cc5c1ec2":"markdown","d7507e8c":"markdown","57be2e25":"markdown","2b0f4c88":"markdown","eda83f78":"markdown","33a592ba":"markdown","e0363232":"markdown","c4489dc5":"markdown"},"source":{"6d7d2379":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk(''):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","da8ef038":"import numpy as np   \nimport pandas as pd   \nimport matplotlib.pyplot as plt    \nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import confusion_matrix,mean_squared_error,accuracy_score\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.model_selection import train_test_split\nimport seaborn as sns\nfrom mlxtend.plotting import heatmap","77049353":"bank = pd.read_csv('..\/input\/UniversalBank123.csv')\nbank.head()","56750e4b":"bank.info()","eef10486":"bank.dtypes","a7a029b1":"bank.drop([\"ID\",\"ZIP Code\"],axis=1,inplace=True)\n","a7f116c8":"bank.describe()","36aca7db":"sns.FacetGrid(bank, hue= \"Personal Loan\",size=5).map(sns.distplot,'Family').add_legend()\nplt.title(\"Chances of getting loan\")\nplt.ylabel(\"Probability\")\nplt.show()","f73d5ed4":"sns.FacetGrid(bank,hue= \"CreditCard\",size=5).map(sns.distplot,'Income').add_legend()\nplt.title(\"Having Credit Card\")\nplt.ylabel(\"Probability\")\nplt.show()","5dce0a74":"sns.FacetGrid(bank,hue= \"Personal Loan\",size=5).map(sns.distplot,'Education').add_legend()\nplt.ylabel(\"Probability\")\nplt.show()","02267210":"sns.FacetGrid(bank,hue=\"Personal Loan\",size=5).map(sns.distplot,'CCAvg').add_legend()\nplt.xlabel('Average Expenditure ')\nplt.ylabel('Number of customers')","fd1ff6bb":"sns.boxplot(x='Personal Loan',y='Experience',data=bank)\n\nplt.show()\nsns.boxplot(x='Personal Loan',y='Age',data=bank)\nplt.show()\nsns.boxplot(x='Personal Loan',y='Family',data=bank)\nplt.show()","887ab391":"sns.boxplot(x='Personal Loan',y='CCAvg',data=bank)\nplt.show()\nsns.boxplot(x='Personal Loan',y='Income',data=bank)\nplt.show()","fd379360":"sns.set_style(\"whitegrid\")\nsns.FacetGrid(bank, hue = \"Personal Loan\", height = 6)\\\n.map(plt.scatter, \"Age\", \"Experience\")\\\n.add_legend()\nplt.show()","ee1f7514":"sns.relplot(x=\"Experience\",y=\"Income\",kind='line',data=bank)","4d59419a":"sns.relplot(x=\"Income\", y=\"CCAvg\",kind='line' ,data=bank)","f2daf231":"sns.relplot(x=\"Family\", y=\"Income\", hue=\"Personal Loan\", data=bank, x_jitter=.1)","c104a1a0":"cols = ['Age','Experience','Income','Family','CCAvg','Education','Mortgage','Personal Loan','Securities Account','CD Account','Online']\ncm = np.corrcoef(bank[cols].values.T)\nhm=heatmap(cm,column_names=cols,row_names=cols,figsize=(20, 20))","09639fb7":"cat_cols = [\"Family\",\"Education\",\"Personal Loan\",\"Securities Account\",\"CD Account\",\"Online\",\"CreditCard\"]\nbank = pd.get_dummies(bank,columns=cat_cols,drop_first=True,)","bd790845":"X = bank.copy().drop(\"Personal Loan_1\",axis=1)\ny = bank[\"Personal Loan_1\"]\n\n\ntrainx, testx, trainy, testy = train_test_split(X, y, test_size=0.20)\n\n\nprint(trainx.shape)\nprint(testx.shape)\nprint(trainy.shape)\nprint(testy.shape)","8c52da2b":"from sklearn.preprocessing import StandardScaler\n\n## Scale the numeric attributes\nscaler = StandardScaler()\nscaler.fit(trainx.iloc[:,:5])\n\ntrainx.iloc[:,:5] = scaler.transform(trainx.iloc[:,:5])\ntestx.iloc[:,:5] = scaler.transform(testx.iloc[:,:5])","3cc8f1f2":"X = trainx\ny = trainy\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score \nmodel = LogisticRegression()\nmodel.fit(X , y)\npredicted_classes = model.predict(X)\naccuracy = accuracy_score(y,predicted_classes)\nparameters = model.coef_\nprint(\"Accuracy=\",accuracy)\nprint(\"Parameters=\",parameters)\nprint(\"Model=\",model)","996a075a":"model.fit(testx , testy)\npredicted_classes_test = model.predict(testx)\naccuracy = accuracy_score(testy,predicted_classes_test)\nprint(\"Accuracy=\",accuracy)","8def80b4":"from sklearn import tree\nfrom sklearn.metrics import accuracy_score, mean_absolute_error\nfrom sklearn.model_selection import GridSearchCV\ndtc = tree.DecisionTreeClassifier()\ndtc.fit(trainx,trainy)","ca3f0a1f":"pred_train = dtc.predict(trainx)\npred_test = dtc.predict(testx)\n\nprint(\"Accuracy on train is:\",accuracy_score(trainy,pred_train))\nprint(\"Accuracy on test is:\",accuracy_score(testy,pred_test))\n","3a43dd1f":"dtc_2 = tree.DecisionTreeClassifier(max_depth=3)\ndtc_2.fit(trainx,trainy)\n\npred_train2 = dtc_2.predict(trainx)\npred_test2 = dtc_2.predict(testx)\n\nprint(\"Accuracy on train is:\",accuracy_score(trainy,pred_train2))\nprint(\"Accuracy on test is:\",accuracy_score(testy,pred_test2))","c0e5cbc2":"From the above observation we could that the Family with size 1 has less chances compared to the family with size 3 of about 0.6 probability\n   conclusion:\n     As the family size increases the getting chances of loan increases","d4b757fb":"**Logistic Regression**","9426342d":"Observations:<br>\n  We cannot find any meaningful relationship between Personal Loan and Age and Experience of the customers.<br>\n  As the family members increses,the prospect of taking a loan is high.<br>\n  The median is exactly 2 for the customers with family members equal to 2 for not taking a Personal loan.<br>","f88a40fc":"<h2>BOX PLOT<\/h2>","6a403423":"**Scaling Numeric features**","a5661bec":"<H2>****Univariate Analysis****<\/H2>","10a1ca44":"We see:<br>\nPeople with education level Undergrad  tend to not take personal loan.<br>\nPeople with education level Graduate and Advanced\/Professiona  have higher tendency to take personal loan,but there is a significant number of people who do not take loan.\n\n\n","81a047c3":"Meaningful obsevation :\n People with high credit card usage tends to take more loans,\n People with high number of customers who dont take up the loan with expenditure less than 20000","5298972a":"Cleaning the data.","ab7da925":"<h2>Heat Map<\/h2>","665a0a5c":"Importing all the library in the notebook.","6ff1f9fc":"The customers with less experience also have a great income salary as compared to customers with high income.","c1b2e199":"<h3>Scatter plot<\/h3>","cb6be5ff":"Describing the data","90c01de8":"****Train-Test Split****","eb8dfa8a":"The relationship between Income and CCAvg with a rank of 0.65.<br>\nThe CCAvg and Personal Loan rank is 0.37<br>\nThe personal Loan and Income rank is 0.50<br>\nThe personal Loan and CD account rank is 0.32<br>","0eed67da":"Data types in the Dataset","39392d1e":"Converting Categorical Columns to Dummies","eb30c4ef":"Now comes the visualization part","6a4e7ed7":"The analysis of univariate data is thus the simplest form of analysis since the information deals with only one quantity that changes.","b348ae26":"A box and whisker plot also called a box plot displays the five-number summary of a set of data. The summary is the minimum, first quartile, median, third quartile, and maximum. It extends from the lower to upper quartile values of the data, with a line at the median. The whiskers extend from the box to show the range of the data. It also contains the outliers.\n\n","1445ee4c":"<h2>Bivariate Analysis<\/h2>","ca8ffdfb":"There is overlapping over the income with respect of having credit card so can't get any insighrs from here.","cc5c1ec2":"Observation:<br>\n   The customers with greater expenditure tend to take up the loan.<br>\n   People earning less income do not buy the personal loan.<br>\n   People having high source of income tend to take the loan.<br>","d7507e8c":"Reading the dataset","57be2e25":"Age= Customer\u2019s age in completed years<br>\nExperience= Number of years of professional experience<br>\nIncome= Annual income of the customer<br>\nFamily =Size Family size of the customer<br>\nCCAvg= Average spending on credit cards per month <br>\nEducation Education Level.= 1: Undergrad; 2: Graduate; 3:Advanced\/Professional<br>\nMortgage Value of house mortgage if any <br>\nSecurities Account= Coded as 1 if customer has securities account with bank<br>\nCD Account = Coded as 1 if customer has certificate of deposit (CD) account with bank<br>\nOnline Banking=Coded as 1 if customer uses Internet banking facilities<br>\nCredit Card= Coded as 1 if customer uses credit card issued by Universal Bank<br>\n","2b0f4c88":"There is a sharp increse in the average credit card expenditure when the income is more than 180+.","eda83f78":"<H2>Describing the dataset<\/H2>","33a592ba":"The graph shows the relationship with the experience and age","e0363232":"**Decision Tree**","c4489dc5":"The result shows that it has 15 columns and 5000 rows with column \"CCAvg\""}}