{"cell_type":{"856536b6":"code","2d2954a8":"code","16f34a0b":"code","4767e95e":"code","d3f44eb5":"code","84ba6fea":"code","5d64c657":"code","b58ad641":"code","166064d1":"code","2b685316":"code","117ad49c":"code","f927f69a":"code","c2b89b79":"code","bcfa88ef":"markdown"},"source":{"856536b6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom typing import List, Dict, Optional\n\nimport numpy as np\nfrom torch.utils.data import Dataset\n\nimport pandas as pd\nimport torch\nfrom sklearn.model_selection import train_test_split\nimport torch\nfrom torch import nn as nn\nimport torch.nn.functional as F\nfrom torch.autograd import Variable\nimport math\nfrom torch.utils.data import TensorDataset, DataLoader\nfrom typing import Dict, Union\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2d2954a8":"sub = pd.read_csv('\/kaggle\/input\/lish-moa\/sample_submission.csv')\ntrain_features = pd.read_csv('\/kaggle\/input\/lish-moa\/train_features.csv')\ntest_features = pd.read_csv('\/kaggle\/input\/lish-moa\/test_features.csv')\ntrain_targets_nonscored = pd.read_csv('\/kaggle\/input\/lish-moa\/train_targets_nonscored.csv')\ntrain_targets_scored = pd.read_csv('\/kaggle\/input\/lish-moa\/train_targets_scored.csv')\n","16f34a0b":"s = pd.DataFrame({'sig_id': test_features['sig_id'].values})","4767e95e":"n_h_layers = 2048\nlearning_rate = 5e-3\ncriterion = nn.BCEWithLogitsLoss()\n\nclass Net(nn.Module):\n    def __init__(self, n_in, n_h, n_out, n_out1):\n        super(Net, self).__init__()\n        self.fc1 = nn.Linear(n_in, n_h)\n        self.fc2 = nn.Linear(n_h, math.ceil(n_h\/4))\n        self.fc3 = nn.Linear(math.ceil(n_h\/4), n_out)\n        self.fc4 = nn.Linear(math.ceil(n_h\/4), n_out1)\n        self.bn = nn.BatchNorm1d(n_in)\n        self.bn1 = nn.BatchNorm1d(n_h)\n        self.bn2 = nn.BatchNorm1d(math.ceil(n_h\/4))\n        self.drop = nn.Dropout(0.4)\n        self.n_out = n_out\n        self.selu = nn.SELU()\n        self.sigm = nn.Sigmoid()\n    def forward(self, x, targets, targets1):\n        \n        \n        self.loss = criterion\n        x = self.fc1(self.bn(x))\n        x = self.selu(x)\n        x = self.fc2(self.drop(self.bn1(x)))\n        x = self.selu(x)\n        \n        # scored targets\n        x1 = self.fc3(self.bn2(x))\n        # non scored targets\n        x2 = self.fc4(self.bn2(x))\n        loss = (self.loss(x1, targets) + self.loss(x2, targets1)) \/ 2\n        real_loss = self.loss(x1, targets)\n        # probabilities\n        out = self.sigm(x1)\n        return out, loss, real_loss\n    \nnet = Net(n_in = 879, n_h = n_h_layers, n_out = 206, n_out1 = 402)","d3f44eb5":"class MoADataset(Dataset):\n    def __init__(\n        self,\n        data,\n        targets = None,\n        targets1 = None,\n        mode = 'train'\n    ):\n        \"\"\"\n\n        Args:\n        \"\"\"\n\n        self.mode = mode\n        self.data = data\n        self.targets = targets\n        self.targets1 = targets1\n\n    def __getitem__(self, idx: int) -> Dict[str, np.array]:\n        data = self.data[idx]\n        if self.targets is not None:\n            target = self.targets[idx]\n            target1 = self.targets1[idx]\n        else:\n            target = np.zeros((206,))\n            target1 = np.zeros((402,))\n            \n        sample = {'data': torch.tensor(data).float(),\n                  'target': torch.tensor(target).float(),\n                  'target1': torch.tensor(target1).float()}\n\n        return sample\n\n    def __len__(self) -> int:\n        return len(self.data)","84ba6fea":"test_features = pd.concat([test_features, pd.get_dummies(test_features['cp_time'], prefix='cp_time')], axis=1)\ntest_features = pd.concat([test_features, pd.get_dummies(test_features['cp_dose'], prefix='cp_dose')], axis=1)\ntest_features = pd.concat([test_features, pd.get_dummies(test_features['cp_type'], prefix='cp_type')], axis=1)\n# test_features = test_features.loc[test_features['cp_type'] != 'ctl_vehicle']\ntest_features = test_features.drop(['cp_type', 'cp_time', 'cp_dose'], axis=1)","5d64c657":"test_dataset = MoADataset(data=test_features.iloc[:, 1:].values)\ntest_loader = torch.utils.data.DataLoader(\n            test_dataset,\n            batch_size=1024,\n            num_workers=0,\n            shuffle=False,\n        )","b58ad641":"net.load_state_dict(torch.load('\/kaggle\/input\/lish-moa-baseline-approach\/model.pt'))\nnet.eval()","166064d1":"predictions = np.zeros((test_features.shape[0], 206))\nfor ind, batch in enumerate(test_loader):\n    p = net(batch['data'], batch['target'], batch['target1'])[0].detach().cpu().numpy()\n    predictions[ind * 1024:(ind + 1) * 1024] = p","2b685316":"for col in train_targets_scored.columns[1:].tolist():\n    s[col] = 0","117ad49c":"s.loc[s['sig_id'].isin(test_features['sig_id']), train_targets_scored.columns[1:]] = predictions","f927f69a":"s.to_csv('submission.csv', index=False)","c2b89b79":"plt.hist(predictions.mean())\nplt.title('Distribution of prediction means');","bcfa88ef":"This is inference from my kernel: https:\/\/www.kaggle.com\/artgor\/lish-moa-baseline-approach#Pytorch-lightning"}}