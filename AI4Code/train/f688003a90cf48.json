{"cell_type":{"e498869a":"code","21a430ce":"code","50b794ec":"code","48c14bf0":"code","e13753f9":"code","f1970bb3":"code","eb0a87f3":"code","4733e087":"code","2027e50e":"code","6e3fe3e1":"code","9002efa7":"markdown","e0fbfc2f":"markdown","23b7e8f4":"markdown"},"source":{"e498869a":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport cv2\nimport matplotlib.pyplot as plt\nplt.rcParams['figure.figsize'] = [12, 12]\n\nnp.random.seed(1111)","21a430ce":"def ret_freq(A=5, F=1.):\n    time = np.arange(6*273)\n    F = 1 + 0.667*(np.random.rand()-0.5)\n    K = 2 * 3.14159 * np.random.rand()\n    freq = A * np.random.rand() * np.sin(2*3.14156*6*F*time\/(273*6) + K)\n    return freq.astype(np.float32)\n\ndef ret_line():\n    k = 8 + np.random.randint(256-16)\n    l = (np.random.rand()-0.5) * 0.075\n    a = np.random.rand() * 0.002 * l\n    a = np.cumsum(a*np.ones(6*273))\n    res = np.clip( k + np.cumsum((l+a)*np.ones(6*273)) , 0 , 255 )\n    return res.astype(np.float32)\n\ndef aug_target(target=0):\n    tmax = 0\n    while tmax <= 0:\n        tgt = np.zeros( (6*273,256), dtype=np.float32)\n        \n        if target==0: # Straight Line + Sine\n            sls = ret_freq(A=10, F=1.) + ret_line()\n\n            ini = max([0,np.random.randint(273+136) - 136])\n            fim = min( [5*273, 4*273+np.random.randint(273+136)] )\n            for t in range(ini,fim):\n                py = int(np.round(sls[t]))\n                if (py<=1)or(py>=254):\n                    continue\n                a = sls[t] - py\n                if a>=0:\n                    a = 1-a\n                    b = 1-a\n                    tgt[t,py] = a + np.random.normal(0, 0.1)\n                    tgt[t,py+1] = b + np.random.normal(0, 0.1)\n                else:\n                    a = 1+a\n                    b = 1-a\n                    tgt[t,py] = a + np.random.normal(0, 0.1)\n                    tgt[t,py-1] = b + np.random.normal(0, 0.1)\n                   \n        elif target==1:# Straight Line\n            sls = ret_line()\n\n            ini = max([0,np.random.randint(273+136) - 136])\n            fim = min( [5*273, 4*273+np.random.randint(273+136)] )\n            for t in range(ini,fim):\n                py = int(np.round(sls[t]))\n                if (py<=1)or(py>=254):\n                    continue\n                a = sls[t] - py\n                if a>=0:\n                    a = 1-a\n                    b = 1-a\n                    tgt[t,py] = a + np.random.normal(0, 0.1)\n                    tgt[t,py+1] = b + np.random.normal(0, 0.1)\n                else:\n                    a = 1+a\n                    b = 1-a\n                    tgt[t,py] = a + np.random.normal(0, 0.1)\n                    tgt[t,py-1] = b + np.random.normal(0, 0.1)\n                    \n        elif target==2: # Straight Line + random jitter + randon intensity.\n            for n in [0,2,4]:\n                I = np.random.normal(0,0.05)-0.95\n                K = np.random.randint(256)\n                A = 2.0*np.random.rand()\n                \n                ini = (n*273) + np.random.randint(273)\n                fim = ini + 16 + np.random.randint(136+136\/\/2)\n                for t in range(ini, fim):\n                    if np.random.normal() >= I:\n                        py = int(np.round(K))\n                        if (py<=0)or(py>=255):\n                            continue\n                        tgt[t,py] = np.random.normal(1, 0.1)\n                    else:\n                        K = K + np.random.normal(0,A)\n                    \n        elif target==3:  # Straight Line + random jitter + randon intensity.                       \n            K = np.random.randint(256)\n            for n in [0,2,4]:\n                I = np.random.normal(0,0.05)-1.95\n                \n                ini = (n*273) + np.random.randint(273)\n                fim = ini + 16 + np.random.randint(64)\n                for t in range(ini, fim):\n                    if np.random.normal() >= I:\n                        py = int(np.round(K))\n                        if (py<=0)or(py>=255):\n                            continue\n                        tgt[t,py] = np.random.normal(1, 0.1)\n                    \n        elif target==4: # Bright Dot ??? \n            for n in range(5):\n                if np.random.rand()>0.5:\n                    K = np.random.choice([0,2,4])*273 + np.random.randint(273) + 1\n                    Y = np.random.randint(256-2)+1\n                    tgt[K,Y] = np.random.normal(1, 0.1) \n                    tgt[K,Y+1] = np.random.normal(1, 0.1) \n                    tgt[K+1,Y] = np.random.normal(1, 0.1) \n                    tgt[K,Y-1] = np.random.normal(1, 0.1) \n                    tgt[K-1,Y] = np.random.normal(1, 0.1) \n            \n\n        tgt = np.stack((tgt[:273,:],tgt[2*273:3*273,:],tgt[4*273:5*273,:]))\n        tgt = tgt.astype(np.float32)\n        \n        tmax = tgt.max()\n        if tmax>0:\n            tgt \/= tmax\n        \n    return tgt","50b794ec":"for i in range(8):\n    img = aug_target(0)\n    print( img.shape)\n\n    img = np.vstack( img )\n    plt.imshow(np.rot90(img))\n    plt.show()","48c14bf0":"for i in range(8):\n    img = aug_target(1)\n    print( img.shape)\n\n    img = np.vstack( img )\n    plt.imshow(np.rot90(img))\n    plt.show()","e13753f9":"for i in range(8):\n    img = aug_target(2)\n    print( img.shape)\n\n    img = np.vstack( img )\n    plt.imshow(np.rot90(img))\n    plt.show()","f1970bb3":"import glob\n\nfiles = glob.glob('..\/input\/seti-breakthrough-listen\/train\/0\/*.npy')\nlen(files)","eb0a87f3":"# Load an image\nimage = np.load(files[132]).astype(np.float32)\nimage = image[[1,3,5]].copy()\n\nplt.imshow(np.rot90(np.vstack(image)))","4733e087":"# Build a random signal mask\nmask = aug_target(0)\n\nplt.imshow(np.rot90(np.vstack(mask)))","2027e50e":"# Apply to the image\n\nfor i in range(3):\n    S = np.max([0.1,(np.random.normal(0.75,0.1))])*image[i].std()\n    print(S)\n    image[i] += S*mask[i]\n    image[i] \/= image[i].std()\n\nplt.imshow(np.rot90(np.vstack(image)))","6e3fe3e1":"plt.imshow( \n    np.vstack((\n        np.rot90(np.vstack(image\/image.max())),\n        np.rot90(np.vstack(mask)),\n    ))\n)","9002efa7":"One of my strategies in this competition was to train segmentation models using synthetic signals added only to control images from train and test.\n\n\nA model trained only using that simulated targets scored Public LB: 0.77128 and Private: 0.76992, showing that simulated signal generator matches, not perfectly, but very well the signals injected by hosts.\n\n\nTo generate the simulated masks I was based in 2017 SETI competition signal generator.\nThe signals are:\n\n\n0 - Straight Line\n\n\n1 - Straight Line + Sine\n\n\n2 - Straight Line + random jitter + randon intensity.","e0fbfc2f":"# Now you can train segmentation models","23b7e8f4":"# How to use the signal masks"}}