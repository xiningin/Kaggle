{"cell_type":{"5902a937":"code","2670e164":"code","159c6dc6":"code","ec2204b6":"code","2fce4a07":"code","e3d67b17":"code","cc8fb4c2":"code","b0fc81e6":"code","724a87cf":"code","312a9ef2":"code","bf88d5e9":"code","d68ac5df":"code","bef01489":"code","13cf63ea":"code","2c02c9ff":"code","246871ba":"code","e1598b02":"code","efbfa580":"code","2a38fc88":"code","15d6bfbe":"code","44ab3592":"code","4bd3f636":"code","ce8f7e0d":"code","eea9382a":"code","e1bde162":"code","dc2c23d0":"code","c34705f7":"code","68bc53ae":"code","cfdfb0f8":"code","0af5e397":"code","eb3d9510":"code","e48581fc":"markdown","30608cf8":"markdown","08d7a061":"markdown","f1bff8e1":"markdown"},"source":{"5902a937":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2670e164":"!unzip -q -o '\/kaggle\/input\/dogs-vs-cats-redux-kernels-edition\/train.zip'","159c6dc6":"!unzip -q -o '\/kaggle\/input\/dogs-vs-cats-redux-kernels-edition\/test.zip'","ec2204b6":"# test\/10007.jpg\n# train\/cat.4511.jpg","2fce4a07":"from PIL import Image\n\nImage.open('train\/cat.4511.jpg')","e3d67b17":"import glob\n\ntrain = pd.DataFrame({'path' : glob.glob('train\/*')})\ntrain.head(2)","cc8fb4c2":"train['target'] = train['path'].apply(lambda x: x.split('\/')[1].split('.')[0])\ntrain","b0fc81e6":"from keras.preprocessing.image import ImageDataGenerator","724a87cf":"idg = ImageDataGenerator()\nidg2 = ImageDataGenerator(horizontal_flip = True, brightness_range = [0.2,1.0])","312a9ef2":"from sklearn.model_selection import train_test_split\n\nx_train, x_valid = train_test_split(train, test_size = 0.2, random_state = 42, \n                                   stratify = train['target'])","bf88d5e9":"x_valid['target'].value_counts()","d68ac5df":"x_train['target'].value_counts()","bef01489":"train_generator = idg2.flow_from_dataframe(x_train, x_col = 'path', y_col = 'target',\n                                         target_size = (300,300))","13cf63ea":"valid_generator = idg.flow_from_dataframe(x_valid, x_col = 'path', y_col = 'target',\n                                         target_size = (300,300))","2c02c9ff":"import matplotlib.pyplot as plt\n\n\nplt.figure(figsize = (12,12))\nfor i in range(0,15):\n    plt.subplot(5,3,i+1)\n    for x, y in train_generator:\n        image = x[0]\n        plt.imshow(image.astype('uint8'))\n        break\n# plt.tight_layout()\nplt.show()","246871ba":"from tensorflow.keras import Sequential\n\nfrom tensorflow.keras.layers import *\n\nfrom tensorflow.keras.applications import EfficientNetB0\nfrom tensorflow.keras.applications import EfficientNetB1","e1598b02":"eb0 = EfficientNetB0(include_top = False, pooling = 'avg')\neb1 = EfficientNetB1(include_top = False, pooling = 'avg')","efbfa580":"model = Sequential()\n\nmodel.add(eb1)\nmodel.add(Dense(2, activation = 'softmax'))\n\nfrom tensorflow.keras.optimizers import SGD\n\nmodel.compile(metrics = ['acc'], loss = 'categorical_crossentropy',\n             optimizer = SGD(momentum = 0.9 , nesterov = True, lr = 0.01))","2a38fc88":"model.summary()","15d6bfbe":"##callback\n\nfrom tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint, ReduceLROnPlateau\n\nes = EarlyStopping(patience = 5, verbose = 1)\n\nmc = ModelCheckpoint('best.h5', save_best_only = True, verbose = 1)\n\nrl = ReduceLROnPlateau(patience = 3, verbose = 1)","44ab3592":"model.fit(train_generator, epochs = 100, callbacks = [es, mc, rl], validation_data = valid_generator)","4bd3f636":"test = pd.DataFrame({'path' : glob.glob('test\/*')})","ce8f7e0d":"test_generator = idg.flow_from_dataframe(test, x_col = 'path', y_col = None,\n                                        class_mode = None, target_size = (300,300),\n                                        shuffle = False)","eea9382a":"result  = model.predict(test_generator, verbose=  1)","e1bde162":"result","dc2c23d0":"from keras.preprocessing.image import load_img\n\n\nn = 10\nfor i, (index, row) in enumerate(test.iterrows()):\n    if i >= n:\n        break\n    fig = plt.figure(figsize=(8, 32))\n    img = load_img(row['path'], target_size=(100, 100))\n    subfig = fig.add_subplot(n, 1, i + 1)\n    pred = result[i][0]\n    pred_label = 'cat' if pred > 0.5 else 'dog'\n    pred = pred if pred > 0.5 else 1-pred\n    plt.title('Looks like a {0} with probability {1}'.format(pred_label, pred))\n    f = plt.imshow(img)\n    f.axes.get_xaxis().set_visible(False)\n    f.axes.get_yaxis().set_visible(False)","c34705f7":"sub= pd.read_csv('\/kaggle\/input\/dogs-vs-cats-redux-kernels-edition\/sample_submission.csv')\nsub","68bc53ae":"sub['id'] = test['path'].apply(lambda x : x.split('\/')[1].split('.')[0] )","cfdfb0f8":"sub['label'] = result[:,1].clip(0.005, 0.995)\nsub","0af5e397":"sub.to_csv('base.csv', index = 0)","eb3d9510":"# csv1 = pd.read_csv('\/kaggle\/input\/ensemble\/DogVsCats_submission (7).csv')\n# csv2 = pd.read_csv('\/kaggle\/input\/ensemble\/DogVsCats_submission (1) (3).csv')\n\n# csv1 = csv1.sort_values('id').reset_index(drop = True)\n# csv2 = csv2.sort_values('id').reset_index(drop = True)\n\n# sub = pd.read_csv('\/kaggle\/input\/dogs-vs-cats-redux-kernels-edition\/sample_submission.csv')\n# sub['label'] = (csv1['label'] * 0.5) + (csv2['label'] *0.5)\n# sub.to_csv('sub1.csv', index = 0)","e48581fc":"### 4. \uc810\uc218\uc62c\ub9ac\uae30 - Ensemble (Blending, Stacking..) Blending","30608cf8":"## 2. \uc810\uc218\uc62c\ub9ac\uae30 --> \ubaa8\ub378\uc744 B0 -> B1","08d7a061":"## 3. \uc810\uc218\uc62c\ub9ac\uae30-  callback \ud568\uc218 \ucd94\uac00","f1bff8e1":"## 1. \uc810\uc218 \uc62c\ub9ac\uae30 -> data augmentation"}}