{"cell_type":{"e98b9da5":"code","5a5b44f9":"code","1aae2aa8":"code","ee3c913f":"code","5a8e168f":"code","a8f3472a":"code","4220d64e":"code","52d17c45":"code","bcd26d6d":"code","ad9d8fd3":"code","f5987f4d":"code","2066d99e":"code","eca64e55":"code","3bb317b6":"code","76d57979":"code","20ff0d7a":"code","6ea2d8ed":"code","f7936b8c":"code","9d009f46":"code","c227e5e0":"code","9d1f9cda":"code","07b00f50":"code","337778ac":"code","6cc5f92b":"code","86af4c0f":"code","14280410":"code","6005e205":"code","c263b806":"code","7600fa7f":"code","d3f8dee9":"code","aedf870f":"code","ca483422":"code","ec2e0d67":"code","abfa0bbb":"code","f0a93eee":"code","411547e0":"code","b1784052":"code","6ad476d1":"code","5668fca0":"code","ca164b7e":"code","8f958c75":"code","1c42d614":"code","d4024665":"code","165df8e5":"code","a143a9e3":"code","331abf2e":"code","89c42fa0":"code","accd2dff":"code","c221eef5":"code","048c22c9":"code","a48d6bd9":"code","050c54f1":"code","18678d0d":"code","860eacfe":"code","e08ea8df":"code","26019b1e":"code","776b8eb2":"code","be081f91":"code","51848395":"code","3898bdef":"code","f23d2e46":"code","1626fc0b":"code","e2b9fc61":"code","60db2b72":"code","11f65330":"code","d9d0ca81":"code","ccf0715a":"code","10105b97":"code","1c3dc98b":"code","5907cf89":"code","04c23962":"code","7aa1a563":"code","b17b1a98":"code","5de8de75":"code","2cdae798":"code","d2434d5d":"code","7d8e8c01":"code","93d0c629":"code","db203a6b":"code","7c740340":"code","865fab78":"code","5e570331":"code","a3506223":"code","b0c6d7ae":"code","ca0de9e1":"code","b829cff9":"code","5e902e50":"code","16edbd8b":"code","3188293d":"code","5125e45d":"code","6378cfea":"code","56e8f720":"code","2e5678fa":"code","6c334973":"code","99ef5303":"code","2c95aab5":"code","fcc441c0":"code","2b622322":"code","d6b6d75f":"code","bafe50c6":"markdown","e995ce4f":"markdown","112280b7":"markdown","c29cc0d4":"markdown","8381c8c9":"markdown","ebfee8f0":"markdown","348f2cb1":"markdown","ebfaa3c7":"markdown","e39069bc":"markdown","477eaa75":"markdown","9eb0900c":"markdown","c97f7b0e":"markdown","5154f08c":"markdown","d3628d72":"markdown","113f7ee4":"markdown","d8228758":"markdown","433b8f7d":"markdown","3211be7a":"markdown","4c772a39":"markdown","970dbc2c":"markdown","1162b295":"markdown","2fdd4769":"markdown","0afb58b1":"markdown","e3ed60b0":"markdown"},"source":{"e98b9da5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport re\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nfrom collections import Counter\n\nfrom datetime import datetime, timedelta\n\nfrom sklearn.model_selection import train_test_split\n\npd.set_option('display.max_columns', 90)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5a5b44f9":"# \u0432\u0441\u0435\u0433\u0434\u0430 \u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0439\u0442\u0435 RANDOM_SEED, \u0447\u0442\u043e\u0431\u044b \u0432\u0430\u0448\u0438 \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b!\nRANDOM_SEED = 42 ","1aae2aa8":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","ee3c913f":"DATA_DIR = '\/kaggle\/input\/restaurant-rating-prediction\/'\ndf_train = pd.read_csv(DATA_DIR+'main_task.csv')\n#df_test = pd.read_csv(DATA_DIR+'kaggle_task.csv')\ndf_cit = pd.read_csv('\/kaggle\/input\/world-cities\/worldcities.csv')\ndf_cost=pd.read_csv('\/kaggle\/input\/2020-cost-of-living\/cost of living 2020.csv')","5a8e168f":"df_train.head()","a8f3472a":"df_train.info()","4220d64e":"df_train.isna().sum()","52d17c45":"df_train.columns","bcd26d6d":"#\u041f\u0440\u0438\u0432\u0435\u0434\u0435\u043c \u043a \u0431\u043e\u043b\u0435\u0435 \u043f\u0440\u0438\u0432\u044b\u0447\u043d\u043e\u043c\u0443 \u0434\u043b\u044f \u043c\u0435\u043d\u044f \u0432\u0438\u0434\u0443\ndf_train.rename(columns={'Price Range' : 'Price_Range',\n                     'Cuisine Style':'Cuisine_Style',\n                    'Number of Reviews':'Num_of_Revs'}, inplace=True)","ad9d8fd3":"#df_test.head()","f5987f4d":"#df_test.info()","2066d99e":"#df_test.isna().sum()","eca64e55":"df_cit.head()","3bb317b6":"df_cit.info()","76d57979":"df_cit.isna().sum()","20ff0d7a":"df_cost.head()","6ea2d8ed":"df_cost.isna().sum()","f7936b8c":"#df_train['sample'] = 1 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0440\u0435\u0439\u043d\n#df_test['sample'] = 0 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0435\u0441\u0442\n#df_test['Rating'] = 0\n#df_train = df_test.append(df_train, sort=False).reset_index(drop=True)","9d009f46":"df_train.info()","c227e5e0":"df_train.Restaurant_id.value_counts()","9d1f9cda":"df_train.City.unique()","07b00f50":"df_train.City.nunique()","337778ac":"cityes=set()\ndf_train['City'].apply(lambda x: cityes.add(x))\ncityes\nlen(cityes)","6cc5f92b":"df_cit.columns","86af4c0f":"# \u0423\u0431\u0435\u0440\u0435\u043c \u043b\u0438\u0448\u043d\u0438\u0435 \u043a\u043e\u043b\u043e\u043d\u043a\u0438, \u0430 \u0442\u0430\u043a \u0436\u0435 \u0437\u0430\u043c\u0435\u0442\u0438\u043c, \u0447\u0442\u043e \u0435\u0432\u0440\u043e\u043f\u0435\u0439\u0441\u043a\u0438\u0435 \u0433\u043e\u0440\u043e\u0434\u0430 \u043a\u0430\u043a-\u0442\u043e \u043f\u043e\u043f\u0430\u043b\u0438 \u0432 \u0441\u0442\u043e\u043b\u0431\u0435\u0446 country \u0432 United States, \n#\u044d\u0442\u043e \u043d\u0430\u0434\u043e \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u0440\u0430\u0432\u0438\u0442\u044c\ndf_cit = df_cit.drop(['city_ascii', 'lat', 'lng', 'iso2',\n                      'iso3', 'admin_name', 'capital', 'id'], axis='columns')\ndf_cit = df_cit.loc[df_cit.city.isin(cityes)]\ndf_cit","14280410":"df_cit=df_cit.loc[df_cit['country']!='United States']\nnew_city=set()\ndf_cit.city.apply(lambda x: new_city.add(x))\n\n#\u0412\u0441\u0435 \u043b\u0438 \u0433\u043e\u0440\u043e\u0434\u0430 \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u044e\u0442? \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c\ncityes-new_city ","6005e205":"#\u0423\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0445 \u0432\u044b\u0448\u0435 \u0433\u043e\u0440\u043e\u0434\u043e\u0432 \u043d\u0435\u0442, \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u0438\u0445 \u0432\u0440\u0443\u0447\u043d\u0443\u044e\ndf_cit.loc[2586]=['Krakow', 'Poland',779115]\ndf_cit.loc[2587]=['Oporto', 'Portugal',240000]\ndf_cit.loc[2588]=['Zurich', 'Germany',1300000]\ndf_cit.tail(5)","c263b806":"df_cost.head()","7600fa7f":"#\u0423\u0431\u0435\u0440\u0435\u043c \u0447\u0430\u0441\u0442\u044c \u043b\u0438\u0448\u043d\u0438\u0445 \u043a\u043e\u043b\u043e\u043d\u043e\u043a, \u043e\u0441\u0442\u0430\u0432\u0438\u043c \u0438\u043d\u0434\u0435\u043a\u0441 \u0446\u0435\u043d \u0432 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430\u0445, \u0438\u043d\u0434\u0435\u043a\u0441 \u0431\u0438\u0433\u043c\u0430\u043a\u0430, \u0418\u043d\u0434\u0435\u043a\u0441 \u043c\u0435\u0441\u0442\u043d\u043e\u0439 \u043f\u043e\u043a\u0443\u043f\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u0438\ndf_cost = df_cost.drop(['Rank 2020', 'Cost of Living Index', 'Cost of Living Plus Rent Index', 'Groceries Index',\n                        'Unnamed: 9', 'Rent Index'], axis='columns')\ndf_cost = df_cost.loc[df_cost.Country.isin(df_cit['country'])]\ndf_cost.sample(5)","d3f8dee9":"df_cost.rename(columns={'Restaurant Price Index':'Rest_pr_index', 'Local Purchasing Power Index':'Loc_Purch_Pow'}, inplace=True)","aedf870f":"df_cost.head()","ca483422":"#\u041e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u043c \u0434\u0432\u0430 \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u0430 \u043c\u0435\u0436\u0434\u0443 \u0441\u043e\u0431\u043e\u0439\ndf_cit=df_cit.merge(df_cost, left_on='country',right_on= 'Country', how='inner')\ndf_cit=df_cit.drop(['country','Country'], axis='columns')\ndf_cit.head(5)","ec2e0d67":"# \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u043c \u0442\u0435\u043f\u0435\u0440\u044c \u0441 \u0431\u043e\u043b\u044c\u0448\u0438\u043c \u0444\u0440\u0435\u0439\u043c\u043e\u043c\ndf_train=df_train.merge(df_cit, left_on='City',right_on= 'city', how='inner')\ndf_train.head(5)","abfa0bbb":"df_train['Cuisine_Style']=df_train['Cuisine_Style'].fillna(\"['no_info']\") #\u0437\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a \ndef make_a_list (x):\n    x=x[1:-1]\n    x=x.replace(\"'\", \"\")\n    x=x.split(', ')\n    return (x)\ncousine_list=[]\ndf_train['Cuisine_Style']=df_train['Cuisine_Style'].apply(make_a_list)\ndf_train['Cuisine_Style'].apply(lambda x: cousine_list.extend(x))\nCounter(cousine_list).most_common(3)","f0a93eee":"def change_cuisine(x):\n    if x == ['no_info']:\n        return ['European', 'Vegetarian Friendly']\n    else:\n        return x\ndf_train['Cuisine_Style']=df_train['Cuisine_Style'].apply(change_cuisine)\ncousine_list=[]\ndf_train['Cuisine_Style'].apply(lambda x: cousine_list.extend(x))\nCounter(cousine_list).most_common(5)\n","411547e0":"df_train['Cuisine_Style']=df_train['Cuisine_Style'].apply(lambda x: len(x))\ndf_train.head()","b1784052":"df_train.Price_Range.value_counts()","6ad476d1":"df_train['Price_Range']=df_train['Price_Range'].fillna('$$ - $$$')","5668fca0":"def replace_price(x):\n    if x == \"$$ - $$$\":\n        return 'medium price'\n    elif x == \"$$$$\":\n        return 'high price'\n    elif x == \"$\":\n        return 'low price'","ca164b7e":"df_train['Price_Range'] = df_train['Price_Range'].apply(replace_price)","8f958c75":"data_price = pd.get_dummies(df_train['Price_Range'])\ndf_train['high price'] = data_price['high price']\ndf_train['low price'] = data_price['low price']\ndf_train['medium price'] = data_price['medium price']","1c42d614":"def replace_price_to_value(x):\n    if x == \"medium price\":\n        return '2'\n    elif x == \"high price\":\n        return '3'\n    elif x == \"low price\":\n        return '1'","d4024665":"df_train['Price_Range'] = df_train['Price_Range'].apply(replace_price_to_value)","165df8e5":"df_train['Price_Range'].dropna(inplace=True)","a143a9e3":"df_train.head()","331abf2e":"df_train['Num_of_Revs'].value_counts()","89c42fa0":"df_train['Num_of_Revs'].hist(bins=100)\ndf_train['Num_of_Revs'].describe()","accd2dff":"mode=df_train['Num_of_Revs'].mode()\nmean=df_train['Num_of_Revs'].mean()\nmedian=df_train['Num_of_Revs'].median()","c221eef5":"print(\"Mode: {}, \\n\\nMean: {},\\nMedian: {}\".format(mode,mean,median))","048c22c9":"median = df_train['Num_of_Revs'].median()\nIQR = df_train['Num_of_Revs'].quantile(0.75) - df_train['Num_of_Revs'].quantile(0.25)\nperc25 = df_train['Num_of_Revs'].quantile(0.25)\nperc75 = df_train['Num_of_Revs'].quantile(0.75)\nprint('25-\u0439 \u043f\u0435\u0440\u0446\u0435\u043d\u0442\u0438\u043b\u044c: {},'.format(perc25), '75-\u0439 \u043f\u0435\u0440\u0446\u0435\u043d\u0442\u0438\u043b\u044c: {},'.format(perc75)\n      , \"IQR: {}, \".format(IQR),\"\u0413\u0440\u0430\u043d\u0438\u0446\u044b \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432: [{f}, {l}].\".format(f=perc25 - 1.5*IQR, l=perc75 + 1.5*IQR))\ndf_train['Num_of_Revs'].loc[df_train['Num_of_Revs'].between(perc25 - 1.5*IQR, perc75 + 1.5*IQR)].hist(bins = 50, range = (0, 40), \n                                                                                             label = 'IQR')\nplt.legend();","a48d6bd9":"df_train['Num_of_Revs'] = df_train['Num_of_Revs'][df_train['Num_of_Revs'].between(perc25 - 1.5*IQR, perc75 + 1.5*IQR)]","050c54f1":"mean_val = round(df_train['Num_of_Revs'].mean(), 0)\ndf_train['Num_of_Revs'] = df_train['Num_of_Revs'].fillna(mean_val)","18678d0d":"df_train['Num_of_Revs'].hist()\ndf_train['Num_of_Revs'].describe()","860eacfe":"for i, cell in enumerate(df_train['Reviews']):\n    print(cell)\n    if i == 20:\n        break","e08ea8df":"df_train['Reviews'].fillna('', inplace=True)","26019b1e":"count = 0\nfor i in df_train['Reviews']:\n    if i == '[[], []]':\n        count +=1\nprint(count)","776b8eb2":"count = 0\nfor i in df_train['Reviews']:\n    if i == '[[], []]':\n        df_train.drop(index = count, inplace = True, axis = 0)\n    count +=1","be081f91":"df_train['Reviews'].isna().sum()","51848395":"df_train['Reviews_date_1'] = df_train['Reviews'].apply(lambda x: re.findall(r'\\d\\d\\\/\\d\\d\\\/\\d{4}', x))","3898bdef":"df_train['Reviews_date_2'] = df_train['Reviews_date_1']","f23d2e46":"df_train['Reviews_date_1'] = df_train['Reviews_date_1'].apply(lambda x: x[0])","1626fc0b":"df_train['Reviews_date_2'] = df_train['Reviews_date_2'].apply(\n    lambda x: x[1] if len(x) > 1 else x[0])","e2b9fc61":"df_train.head()","60db2b72":"df_train['Reviews_date_1'] = df_train['Reviews_date_1'].apply(\n    lambda x: datetime.strptime(x, '%m\/%d\/%Y'))\ndf_train['Reviews_date_2'] = df_train['Reviews_date_2'].apply(\n    lambda x: datetime.strptime(x, '%m\/%d\/%Y'))","11f65330":"df_train['Dif_Reviews_date'] = df_train['Reviews_date_1'] - \\\n    df_train['Reviews_date_2']\ndf_train['Dif_Reviews_date'] = df_train['Dif_Reviews_date'].dt.days.astype(\n    'int16')","d9d0ca81":"df_train.head()","ccf0715a":"df_train['Dif_Reviews_date'].hist()\ndf_train['Dif_Reviews_date'].describe()","10105b97":"median = df_train['Dif_Reviews_date'].median()\nIQR = df_train['Dif_Reviews_date'].quantile(0.75) - df_train['Dif_Reviews_date'].quantile(0.25)\nperc25 = df_train['Dif_Reviews_date'].quantile(0.25)\nperc75 = df_train['Dif_Reviews_date'].quantile(0.75)\nprint('25-\u0439 \u043f\u0435\u0440\u0446\u0435\u043d\u0442\u0438\u043b\u044c: {},'.format(perc25), '75-\u0439 \u043f\u0435\u0440\u0446\u0435\u043d\u0442\u0438\u043b\u044c: {},'.format(perc75)\n      , \"IQR: {}, \".format(IQR),\"\u0413\u0440\u0430\u043d\u0438\u0446\u044b \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432: [{f}, {l}].\".format(f=perc25 - 1.5*IQR, l=perc75 + 1.5*IQR))\ndf_train['Dif_Reviews_date'].loc[df_train['Dif_Reviews_date'].between(perc25 - 1.5*IQR, perc75 + 1.5*IQR)].hist(bins = 50, range = (0, 40), \n                                                                                             label = 'IQR')\nplt.legend();","1c3dc98b":"df_train['Dif_Reviews_date'] = df_train['Dif_Reviews_date'][df_train['Dif_Reviews_date'].between(perc25 - 1.5*IQR, perc75 + 1.5*IQR)]","5907cf89":"mean_val = round(df_train['Dif_Reviews_date'].mean(), 0)\ndf_train['Dif_Reviews_date'] = df_train['Dif_Reviews_date'].fillna(mean_val)","04c23962":"df_train['Dif_Reviews_date'].hist()\ndf_train['Dif_Reviews_date'].describe()","7aa1a563":"Jan_temp={'Paris':4.8, 'Stockholm':-1.4, 'London':5.0, 'Berlin':1.3, 'Munich':0, 'Oporto':11.4,\n       'Milan':4.8, 'Bratislava':0.4, 'Vienna':0.7, 'Rome':8.8, 'Barcelona':10.7, 'Madrid':7.6,\n       'Dublin':6, 'Brussels':4.1, 'Zurich':0.9, 'Warsaw':-1.1, 'Budapest':0.6, 'Copenhagen':2.4,\n       'Amsterdam':5, 'Lyon':3.4, 'Hamburg':2, 'Lisbon':12.7, 'Prague':0, 'Oslo':-4.5,\n       'Helsinki':-2.8, 'Edinburgh':4.1, 'Geneva':0.1, 'Ljubljana':0.6, 'Athens':10.1,\n       'Luxembourg':1.7, 'Krakow':-1.2}\nApr_temp={'Paris':11.7, 'Stockholm':5.9, 'London':10.8, 'Berlin':10.8, 'Munich':9.6, 'Oporto':14.9,\n       'Milan':13.7, 'Bratislava':11.9, 'Vienna':11.9, 'Rome':15.1, 'Barcelona':15.3, 'Madrid':14,\n       'Dublin':8.5, 'Brussels':11.1, 'Zurich':10, 'Warsaw':10.3, 'Budapest':13.5, 'Copenhagen':7.8,\n       'Amsterdam':10.1, 'Lyon':11.5, 'Hamburg':9.2, 'Lisbon':16.3, 'Prague':10.2, 'Oslo':5,\n       'Helsinki':3.9, 'Edinburgh':7.8, 'Geneva':11.7, 'Ljubljana':10.8, 'Athens':16.4,\n       'Luxembourg':9.8, 'Krakow':10.1}\nJul_temp={'Paris':20.1, 'Stockholm':17.7, 'London':19.1, 'Berlin':20.5, 'Munich':18.4, 'Oporto':21.6,\n       'Milan':24.5, 'Bratislava':22.1, 'Vienna':21.8, 'Rome':26.6, 'Barcelona':26, 'Madrid':28.1,\n       'Dublin':15.5, 'Brussels':19.1, 'Zurich':19, 'Warsaw':20.9, 'Budapest':23.6, 'Copenhagen':18.1,\n       'Amsterdam':18.3, 'Lyon':20.7, 'Hamburg':18, 'Lisbon':22.4, 'Prague':19.7, 'Oslo':16.3,\n       'Helsinki':17.7, 'Edinburgh':14.7, 'Geneva':18, 'Ljubljana':20.5, 'Athens':28.2,\n       'Luxembourg':17.9, 'Krakow':19.6}\nOct_temp={'Paris':13.5, 'Stockholm':8.1, 'London':13.1, 'Berlin':11.6, 'Munich':9.8, 'Oporto':18.8,\n       'Milan':16.1, 'Bratislava':12, 'Vienna':12, 'Rome':19, 'Barcelona':19.7, 'Madrid':18.3,\n       'Dublin':11.5, 'Brussels':12.3, 'Zurich':10.5, 'Warsaw':10.8, 'Budapest':13.6, 'Copenhagen':11.3,\n       'Amsterdam':12.7, 'Lyon':13, 'Hamburg':10.9, 'Lisbon':20.3, 'Prague':10.7, 'Oslo':6.1,\n       'Helsinki':7.5, 'Edinburgh':10.1, 'Geneva':10.3, 'Ljubljana':10.9, 'Athens':20.7,\n       'Luxembourg':10.5, 'Krakow':10.5}\nMean_sal={'Paris':2900, 'Stockholm':4329, 'London':2507, 'Berlin':2596, 'Munich':2500, 'Oporto':1200,\n       'Milan':1916, 'Bratislava':1176, 'Vienna':3406, 'Rome':1847, 'Barcelona':2000, 'Madrid':2000,\n       'Dublin':784, 'Brussels':3200, 'Zurich':7839, 'Warsaw':887, 'Budapest':682, 'Copenhagen':3100,\n       'Amsterdam':2152, 'Lyon':1691, 'Hamburg':2500, 'Lisbon':852, 'Prague':1275, 'Oslo':4400,\n       'Helsinki':2600, 'Edinburgh':3698, 'Geneva':7600, 'Ljubljana': 1172, 'Athens':2700,\n       'Luxembourg':3300, 'Krakow':757}\nMin_sal={'Paris':1219, 'Stockholm':1101, 'London':1237, 'Berlin':646, 'Munich':646, 'Oporto':649,\n       'Milan':800, 'Bratislava':335, 'Vienna':1500, 'Rome':800, 'Barcelona':600, 'Madrid':580,\n       'Dublin':480, 'Brussels':1594, 'Zurich':1762, 'Warsaw':523, 'Budapest':582, 'Copenhagen':2000,\n       'Amsterdam':1653, 'Lyon':1200, 'Hamburg':1496, 'Lisbon':600, 'Prague':562, 'Oslo':2200,\n       'Helsinki':1900, 'Edinburgh':432, 'Geneva':1660, 'Ljubljana':0.6, 'Athens':758,\n       'Luxembourg':2300, 'Krakow':509}\ntourists={'Paris':19.0, 'Stockholm':2.7, 'London':19.5, 'Berlin':6.2, 'Munich':4.2, 'Oporto':2.8,\n       'Milan':6.6, 'Bratislava':1, 'Vienna':6.6, 'Rome':10.3, 'Barcelona':7.0, 'Madrid':5.6,\n       'Dublin':5.4, 'Brussels':4.2, 'Zurich':1.5, 'Warsaw':2.8, 'Budapest':4.0, 'Copenhagen':3.2,\n       'Amsterdam':8.8, 'Lyon':3.5, 'Hamburg':6.8, 'Lisbon':3.6, 'Prague': 9.1, 'Oslo':0.7,\n       'Helsinki':0.4, 'Edinburgh':4.4, 'Geneva':1.3, 'Ljubljana':0.4, 'Athens':0.24,\n       'Luxembourg':0.9, 'Krakow':8.1}\nrains={'Paris':6.37, 'Stockholm':5.27, 'London':6.21, 'Berlin':5.7, 'Munich':6.22, 'Oporto':11.78,\n       'Milan':10.13, 'Bratislava':6.94, 'Vienna':10.31, 'Rome':9.34, 'Barcelona':6.12, 'Madrid':4.5,\n       'Dublin':7.67, 'Brussels':7.82, 'Zurich':10.85, 'Warsaw':10.02, 'Budapest':5.64, 'Copenhagen':11.64,\n       'Amsterdam':8.05, 'Lyon':7.63, 'Hamburg':7.38, 'Lisbon':6.91, 'Prague': 4.86, 'Oslo':7.40,\n       'Helsinki':6.5, 'Edinburgh':7.06, 'Geneva':9.34, 'Ljubljana':12.90, 'Athens':3.97,\n       'Luxembourg':8.31, 'Krakow':6.78}","b17b1a98":"def january_temp_column(C):\n    for  city in Jan_temp:\n        if city==C:\n            return(Jan_temp[city])\ndf_train['January_temp']=df_train['city'].apply(january_temp_column)\n\ndef april_temp_column(C):\n    for  city in Apr_temp:\n        if city==C:\n            return(Apr_temp[city])\ndf_train['April_temp']=df_train['city'].apply(april_temp_column)\n\ndef july_temp_column(C):\n    for  city in Jul_temp:\n        if city==C:\n            return(Jul_temp[city])\ndf_train['July_temp']=df_train['city'].apply(july_temp_column)\n\ndef october_temp_column(C):\n    for  city in Oct_temp:\n        if city==C:\n            return(Oct_temp[city])\ndf_train['October_temp']=df_train['city'].apply(october_temp_column)\n\ndef mean_salary_column(C):\n    for  city in Mean_sal:\n        if city==C:\n            return(Mean_sal[city])\ndf_train['Mean_salary']=df_train['city'].apply(mean_salary_column)\n\ndef min_sal_column(C):\n    for  city in Min_sal:\n        if city==C:\n            return(Min_sal[city])\ndf_train['Min_salary']=df_train['city'].apply(min_sal_column)\n\ndef tourist_flow_column(C):\n    for  city in tourists:\n        if city==C:\n            return(tourists[city])\ndf_train['tourists_flow']=df_train['city'].apply(tourist_flow_column)\n\ndef rain_column(C):\n    for  city in tourists:\n        if city==C:\n            return(rains[city])\ndf_train['rains']=df_train['city'].apply(rain_column)","5de8de75":"df_train.head()","2cdae798":"#\u0423\u0431\u0435\u0440\u0435\u043c \u0432\u0441\u0435 \u043d\u0435\u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043a\u043e\u043b\u043e\u043d\u043a\u0438\ndf_train.drop(columns=['Restaurant_id','City','Reviews','URL_TA','ID_TA','city','Reviews_date_1','Reviews_date_2'], inplace=True, axis=1)","d2434d5d":"df_train.head()","7d8e8c01":"df_train1=df_train\ndf_train2=df_train\n","93d0c629":"df_train.info()","db203a6b":"df_train","7c740340":"from sklearn.ensemble import RandomForestRegressor # \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438\nfrom sklearn import metrics\nfrom sklearn.model_selection import train_test_split\ndf = pd.read_csv(DATA_DIR+'main_task.csv')\ndf=df.dropna(axis=1)\ndf=df.fillna(0)\ndf.drop(columns=['City','Reviews', 'URL_TA','ID_TA'],  inplace=True)\nX0 = df.drop(['Restaurant_id', 'Rating'], axis = 1)\ny0 = df['Rating']\nX0_train, X0_test, y0_train, y0_test = train_test_split(X0, y0, test_size=0.25)\nregr = RandomForestRegressor(n_estimators=100, verbose=1, n_jobs=-1, random_state=RANDOM_SEED)\nregr.fit(X0_train, y0_train)\ny0_pred = regr.predict(X0_test)\nprint('MAE:', metrics.mean_absolute_error(y0_test, y0_pred))","865fab78":"df_train.head()","5e570331":"X = df_train.drop(['Rating'], axis = 1)\ny = df_train['Rating']\n# \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f \u0440\u0430\u0437\u0431\u0438\u0432\u043a\u0438:\nfrom sklearn.model_selection import train_test_split\n# \u041d\u0430\u0431\u043e\u0440\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u043c\u0435\u0442\u043a\u043e\u0439 \"train\" \u0431\u0443\u0434\u0443\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438, \"test\" - \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.\n# \u0414\u043b\u044f \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043c\u044b \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c 25% \u043e\u0442 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430.\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25)\n# \u0418\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438:\nfrom sklearn.ensemble import RandomForestRegressor # \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438\nfrom sklearn import metrics # \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u043c\u043e\u0434\u0435\u043b\u0438\n# \u0421\u043e\u0437\u0434\u0430\u0451\u043c \u043c\u043e\u0434\u0435\u043b\u044c\nregr = RandomForestRegressor(n_estimators=100, verbose=1, n_jobs=-1, random_state=RANDOM_SEED)\n\n# \u041e\u0431\u0443\u0447\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435 \u0434\u0430\u043d\u043d\u044b\u0445\nregr.fit(X_train, y_train)\n\n# \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u043e\u0431\u0443\u0447\u0435\u043d\u043d\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435.\n# \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e y_pred\ny_pred = regr.predict(X_test)\n# \u0421\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f (y_pred) \u0441 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u043c\u0438 (y_test), \u0438 \u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043e\u043d\u0438 \u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u043c \u043e\u0442\u043b\u0438\u0447\u0430\u044e\u0442\u0441\u044f\n# \u041c\u0435\u0442\u0440\u0438\u043a\u0430 \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f Mean Absolute Error (MAE) \u0438 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043e\u0442 \u0444\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445.\nprint('MAE:', metrics.mean_absolute_error(y_test, y_pred))","a3506223":"from sklearn.preprocessing import MinMaxScaler\nnames = df_train1.columns.values\nscaler=MinMaxScaler()\ndf_train1 = pd.DataFrame(scaler.fit_transform(df_train1))\ndf_train1.columns=names","b0c6d7ae":"X1 = df_train1.drop(['Rating'], axis = 1)\ny1 = df_train1['Rating']\nX1_train, X1_test, y1_train, y1_test = train_test_split(X1, y1, test_size=0.2)\n\nregr1 = RandomForestRegressor(n_estimators=100, verbose=1, n_jobs=-1, random_state=RANDOM_SEED)\n\nregr1.fit(X1_train, y1_train)\n\ny1_pred = regr1.predict(X1_test)\nprint('MAE:', metrics.mean_absolute_error(y1_test, y1_pred))","ca0de9e1":"from sklearn.preprocessing import StandardScaler\nnames = df_train2.columns.values\nscaler = StandardScaler()\ndf_train2 = pd.DataFrame(scaler.fit_transform(df_train2))\ndf_train2.columns = names\nX2 = df_train2.drop(['Rating'], axis=1)\ny2 = df_train2['Rating']\nX2_train, X2_test, y2_train, y2_test = train_test_split(X2, y2, test_size=0.25)\n\nregr2 = RandomForestRegressor(n_estimators=100, verbose=1, n_jobs=-1, random_state=RANDOM_SEED)\n\nregr2.fit(X2_train, y2_train)\n\ny2_pred = regr2.predict(X2_test)\nprint('MAE:', metrics.mean_absolute_error(y2_test, y2_pred))","b829cff9":"print(\"\u041c\u0410\u0415 \u0434\u043b\u044f \u0441\u044b\u0440\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445: {}, \\n\u041c\u0410\u0415 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445: {}, \\n\u041c\u0410\u0415 \u0434\u043b\u044f MinMaxScaler: {}, \\n\u041c\u0410\u0415 \u0434\u043b\u044f StandardScaler: {}.\".format(metrics.mean_absolute_error(y0_test, y0_pred), metrics.mean_absolute_error(\n    y_test, y_pred), metrics.mean_absolute_error(y1_test, y1_pred), metrics.mean_absolute_error(y2_test, y2_pred)))","5e902e50":"fig, ax = plt.subplots(figsize=(16, 16))\ncorrelation = df_train1.corr()\nsns.heatmap(correlation, annot=True, cmap='coolwarm', linewidth=0.7)","16edbd8b":"#\u0412\u044b\u0434\u0435\u043b\u0438\u043c \u0441\u0430\u043c\u044b\u0435 \u0437\u043d\u0430\u0447\u0438\u043c\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\nplt.rcParams['figure.figsize'] = (11,11)\nfeat_importances = pd.Series(regr.feature_importances_, index=X.columns)\nfeat_importances.nlargest(15).plot(kind='barh')","3188293d":"DATA_DIR_1 = '\/kaggle\/input\/submissioncsv\/sample_submission (1).csv'\nsample_submission = pd.read_csv(DATA_DIR_1)\nsample_submission1 = pd.read_csv(DATA_DIR_1)\nsample_submission2 = pd.read_csv(DATA_DIR_1)","5125e45d":"tdata = df_train.drop(['Rating'], axis=1)","6378cfea":"predict_submission = regr.predict(tdata)","56e8f720":"sample_submission['Rating'] = predict_submission[:10000]\nsample_submission.to_csv('submission.csv', index=False)\nsample_submission.head(10)","2e5678fa":"tdata1 = df_train1.drop(['Rating'], axis=1)","6c334973":"predict_submission1 = regr1.predict(tdata1)","99ef5303":"sample_submission1['Rating'] = predict_submission1[:10000]\nsample_submission1.to_csv('submission1.csv', index=False)\nsample_submission1.head(10)","2c95aab5":"tdata2 = df_train2.drop(['Rating'], axis=1)\npredict_submission2 = regr2.predict(tdata2)","fcc441c0":"sample_submission2['Rating'] = predict_submission2[:10000]\nsample_submission2.to_csv('submission2.csv', index=False)\nsample_submission2.head(10)","2b622322":"df_train3=df_train\ndf_train3.head()","d6b6d75f":"X3 = df_train3.drop(['Rating','Loc_Purch_Pow','McMeal($)','rains','tourists_flow'], axis = 1)\ny3 = df_train3['Rating']\n\nX3_train, X3_test, y3_train, y3_test = train_test_split(X3, y3, test_size=0.25)\n\nregr3 = RandomForestRegressor(n_estimators=100, verbose=1, n_jobs=-1, random_state=RANDOM_SEED)\n\nregr3.fit(X3_train, y3_train)\n\ny3_pred = regr3.predict(X3_test)\n\nprint('MAE:', metrics.mean_absolute_error(y3_test, y3_pred))","bafe50c6":"#### \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0442\u0435\u043f\u043b\u043e\u0432\u0443\u044e \u043a\u0430\u0440\u0442\u0443","e995ce4f":"### \u041f\u0440\u043e\u0439\u0434\u0435\u043c\u0441\u044f \u043f\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u043c \u0434\u0430\u043d\u043d\u044b\u043c","112280b7":"\u0421\u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u0435, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u0438 \u043d\u0430 \u0432\u0445\u043e\u0434\u0435. \u041a\u0430\u043a\u0438\u0435 \u041c\u0410\u0415 \u0431\u044b\u043b\u043e?","c29cc0d4":"## Number of Reviews","8381c8c9":"\u041d\u0430 \u0434\u0430\u043d\u043d\u044b\u0439 \u043c\u043e\u043c\u0435\u043d\u0442 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u041c\u0410\u0415 \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u043e\u0441\u044c 0.193(.......), \u043e\u0434\u043d\u0430\u043a\u043e \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043b\u043e\u043d\u043e\u043a \u0434\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u0431\u043e\u043b\u044c\u0448\u043e\u0435. \u0412 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0432\u044b\u0440\u0438\u0430\u043d\u0442\u0430\u0445 \u0432 \u0441\u0432\u043e\u0435\u043c \u043d\u043e\u0443\u0442\u0431\u0443\u043a\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u043e\u0441\u044c \u0434\u043e\u0431\u0438\u0442\u044c\u0441\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u043c\u0435\u043d\u044c\u0448\u0435\u0433\u043e. \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043f\u043e\u043b\u0443\u0438\u0442\u044c \u0435\u0433\u043e \u0438 \u0437\u0434\u0435\u0441\u044c, \u0443\u0431\u0440\u0430\u0432 \u0447\u0430\u0441\u0442\u044c \u043a\u043e\u043b\u043e\u043d\u043e\u043a \u0438\u0437 \u0430\u043d\u0430\u043b\u0438\u0437\u0430.","ebfee8f0":"### \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043d\u0430\u0448\u0438 \u041c\u0410\u0415","348f2cb1":"## Price Range","ebfaa3c7":"## Reviews","e39069bc":"\u0421\u0434\u0435\u043b\u0430\u0435\u043c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043a\u043e\u043f\u0438\u0444 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430, \u0447\u0442\u043e\u0431\u044b \u043d\u0435 \u0431\u044b\u043b\u043e \u043a\u043e\u043d\u0444\u043b\u0438\u043a\u0442\u043e\u0432 \u043f\u0440\u0438 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u043c \u0430\u043d\u0430\u043b\u0438\u0437\u0435","477eaa75":"\u041a\u0430\u043a-\u0442\u043e \u043e\u0447\u0435\u043d\u044c \u0445\u0438\u0442\u0440\u043e \u0437\u0430\u0432\u0435\u0440\u0443\u0442\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u043e\u0441\u044c, \u043d\u043e \u043f\u043e \u0445\u043e\u0434\u0443 \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u043b\u0438 \u0440\u0430\u0437\u043d\u044b\u0435 \u043c\u044b\u0441\u043b\u0438, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043f\u0440\u0438\u0448\u043b\u043e\u0441\u044c \u0441\u0442\u0430\u0432\u0438\u0442\u044c \"\u043a\u043e\u0441\u0442\u044b\u043b\u044c\"","9eb0900c":"## City","c97f7b0e":"## \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","5154f08c":"### \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0432\u0441\u0435 \u0444\u0430\u0439\u043b\u044b, \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0442\u044c, \u0441 \u0447\u0435\u043c \u043c\u044b \u0431\u0443\u0434\u0435\u043c \u043e\u043f\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c","d3628d72":"### \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c \u043e\u0434\u043d\u043e\u0433\u043e \u0438\u0437 \u0421\u043a\u0435\u0439\u043b\u0435\u0440\u043e\u0432 (MinMaxScaler)","113f7ee4":"## Cuisine Style","d8228758":"### \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0441 StandardScaler ","433b8f7d":"## \u0422\u0435\u043f\u0435\u0440\u044c \u043f\u043e\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u0441 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f\u043c\u0438","3211be7a":"### \u0422\u0435\u043f\u0435\u0440\u044c \u043f\u0440\u0438\u0441\u0442\u0443\u043f\u0438\u043c \u043a \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044e \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430","4c772a39":"# **\u0421\u0430\u043c\u043e\u0435 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u043e\u0435**","970dbc2c":"## \u041f\u043e\u0434\u0433\u0440\u0443\u0437\u0438\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0444\u0430\u0439\u043b\u044b","1162b295":"##  Restaurant_id","2fdd4769":"## \u041f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u0447\u043d\u044b\u0439 \u0438\u0442\u043e\u0433","0afb58b1":"### \u0422\u0435\u043f\u0435\u0440\u044c \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u043c StandardScaler \u043a \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u043c \u0434\u0430\u043d\u043d\u044b\u043c","e3ed60b0":"### \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0441 MinMaxScaler "}}