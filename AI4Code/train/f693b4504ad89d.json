{"cell_type":{"543c3cb4":"code","0e7f1d7b":"code","9e463168":"code","c6355e08":"code","02bc122b":"code","26998115":"code","bb251603":"code","81aab717":"code","5581d9d6":"markdown","4ff1d685":"markdown","d86c2269":"markdown","bcbe6317":"markdown","c03d7169":"markdown","93f0139b":"markdown"},"source":{"543c3cb4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n%matplotlib inline\n","0e7f1d7b":"# More Imports\nfrom tensorflow import keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.datasets import mnist\nfrom keras.utils import to_categorical\n\nfrom sklearn.model_selection import train_test_split","9e463168":"tr = pd.read_csv('..\/input\/mnist-in-csv\/mnist_train.csv')\ntt = pd.read_csv('..\/input\/mnist-in-csv\/mnist_test.csv')\n\nX = tr.copy()\ny = tr.pop('label')\n\n# Coerce to float and normalize\nX = X.drop(['label'], axis=1).astype('float64') \/ 256\n\ntest = tt.copy()\ntest_y = to_categorical(tt.pop('label'))\ntest_X = tt.astype('float64') \/ 256","c6355e08":"#(X_train, y_train), (X_valid, y_valid) = mnist.load_data()\nX_train, X_valid, y_train, y_valid = train_test_split(X, y,\n                                                     test_size=0.15,\n                                                     random_state=0x1337)\n\n\ny_train = to_categorical(y_train)\ny_valid = to_categorical(y_valid)\n\nfig = plt.figure\n\ndef show_image(row: pd.Series) -> None:\n    image = row.to_numpy().reshape((28,28))\n    \n    plt.imshow(image, cmap='gray')\n\nshow_image(X_train.iloc[0])","02bc122b":"model = Sequential([\n    Dense(512, activation='relu', input_shape=[28*28,]),\n    Dense(10, activation='softmax'),\n])\n\nmodel.compile(\n    optimizer='rmsprop',\n    loss='categorical_crossentropy',\n    metrics=['accuracy']\n)","26998115":"history = model.fit(X_train, y_train,\n                    epochs=5,\n                    batch_size=128,\n                    validation_data=(X_valid, y_valid))","bb251603":"hist = pd.DataFrame(history.history)\nhist[['loss', 'accuracy', 'val_accuracy']].plot()","81aab717":"loss, accuracy = model.evaluate(test_X, test_y)\nprint(f'\\nmodel achieved {loss*100:.2f}% loss with {accuracy*100:.2f}% accuracy')","5581d9d6":"Now let's see how our model performs:","4ff1d685":"Now we import necessary things from Keras:","d86c2269":"Now let's see that the data actually makes sense. Do we need to do anything funky to it?","bcbe6317":"First let's start out be reading the data:","c03d7169":"Now we do the training and see what we get:","93f0139b":"Now let's make a neural network"}}