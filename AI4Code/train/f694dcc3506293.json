{"cell_type":{"73d32b7d":"code","b38b8935":"code","b10c5da2":"code","4b036693":"code","33fb1ee2":"code","31ce09c0":"code","ef8b5efc":"code","0c44c59b":"code","4f404707":"code","097c2853":"code","953763cb":"code","e4e57ab5":"code","90433622":"code","cf4f8318":"code","4250c590":"code","dd9cd7da":"code","e038f127":"code","d87df40f":"code","af3ddbfe":"code","b8fec917":"code","28c159dd":"code","eef187e9":"code","857617e2":"code","910eef67":"code","9f695d1e":"code","c7a6e7c0":"code","aca995b0":"code","c45ea4e8":"code","bc5229db":"code","14b892ff":"code","84990ee6":"code","0ad0c2a4":"code","eb2cb59d":"code","48197fc0":"code","dd02ffa0":"code","4dd9fa26":"code","5a7de0fa":"code","a079c061":"code","d2599170":"code","c4a46f21":"code","559acdd8":"code","46ad2e4f":"code","1a8c633d":"code","7087a384":"code","14164506":"code","4516a463":"code","2d94886c":"code","2857dfb8":"code","9cefef2f":"code","38f01fb3":"code","ac5b0e62":"code","ee6a5f13":"markdown","0c8e703e":"markdown","a91e8033":"markdown","d2fc00f4":"markdown","918b60e8":"markdown","a140ac7f":"markdown","a2602a14":"markdown","3294f085":"markdown","4f1af201":"markdown","d8eb7a47":"markdown","ce1a5e44":"markdown","714a630e":"markdown"},"source":{"73d32b7d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b38b8935":"!pip install geopandas","b10c5da2":"import pandas as pd\nPATH='\/kaggle\/input\/cft-shift2022\/'\n\ntrain = pd.read_csv(PATH+'train.csv')\ntest = pd.read_csv(PATH+'test.csv')","4b036693":"from shapely.geometry import box\nmin_longitude = min(test.longitude.min(), train.longitude.min())\nmax_longitude = max(test.longitude.max(), train.longitude.max())\nmin_latitude = min(test.latitude.min(), train.latitude.min())\nmax_latitude = max(test.latitude.max(), train.latitude.max())\nbig_box = box(min_longitude - 0.03, min_latitude - 0.03, max_longitude + 0.03, max_latitude + 0.03)","33fb1ee2":"ALL =         '\/kaggle\/input\/osm-central-region-of-russia\/central-fed-district-latest-free.shp'\nTRAFFIC =     '\/kaggle\/input\/osm-central-region-of-russia\/central-fed-district-latest-free.shp\/gis_osm_traffic_a_free_1.shp'\nTRANSPORT =   '\/kaggle\/input\/osm-central-region-of-russia\/central-fed-district-latest-free.shp\/gis_osm_transport_free_1.shp'\nWATER =       '\/kaggle\/input\/osm-central-region-of-russia\/central-fed-district-latest-free.shp\/gis_osm_water_a_free_1.shp'\nWATERWAYS =   '\/kaggle\/input\/osm-central-region-of-russia\/central-fed-district-latest-free.shp\/gis_osm_waterways_free_1.shp'\nPOWF =        '\/kaggle\/input\/osm-central-region-of-russia\/central-fed-district-latest-free.shp\/gis_osm_pofw_free_1.shp'\nPOFW_A =      '\/kaggle\/input\/osm-central-region-of-russia\/central-fed-district-latest-free.shp\/gis_osm_pofw_a_free_1.shp'\nLANDUSE =     '\/kaggle\/input\/osm-central-region-of-russia\/central-fed-district-latest-free.shp\/gis_osm_landuse_a_free_1.shp'\nPLACES =      '\/kaggle\/input\/osm-central-region-of-russia\/central-fed-district-latest-free.shp\/gis_osm_places_free_1.shp'\nPLACES_A =    '\/kaggle\/input\/osm-central-region-of-russia\/central-fed-district-latest-free.shp\/gis_osm_places_a_free_1.shp'\nPOIS =        '\/kaggle\/input\/osm-central-region-of-russia\/central-fed-district-latest-free.shp\/gis_osm_pois_free_1.shp'\nPOIS_A =      '\/kaggle\/input\/osm-central-region-of-russia\/central-fed-district-latest-free.shp\/gis_osm_pois_a_free_1.shp'\nNATURAL =     '\/kaggle\/input\/osm-central-region-of-russia\/central-fed-district-latest-free.shp\/gis_osm_natural_free_1.shp'\nNATURAL_A =   '\/kaggle\/input\/osm-central-region-of-russia\/central-fed-district-latest-free.shp\/gis_osm_natural_a_free_1.shp'\nBUILDINGS_A = '\/kaggle\/input\/osm-central-region-of-russia\/central-fed-district-latest-free.shp\/gis_osm_buildings_a_free_1.shp'\nROADS =       '\/kaggle\/input\/osm-central-region-of-russia\/central-fed-district-latest-free.shp\/gis_osm_roads_free_1.shp'","31ce09c0":"import geopandas as gp\nPOIS_A_m = gp.read_file(POIS_A, bbox=big_box)\nTRANSPORT_m = gp.read_file(TRANSPORT, bbox=big_box)\nLANDUSE_m = gp.read_file(LANDUSE, bbox=big_box)","ef8b5efc":"WATER_m = gp.read_file(WATER, bbox=big_box)\nPOFW_A_m = gp.read_file(POFW_A, bbox=big_box)\nBUILDING_A_m = gp.read_file(BUILDINGS_A, bbox=big_box)","0c44c59b":"driver = [\n    {\n        'layer': POIS_A_m[POIS_A_m.code == 2083],\n        'distance': 0.5\n    },\n    {\n        'layer': POIS_A_m[POIS_A_m.code == 2082],\n        'distance': 0.5\n    },\n    {\n        'layer': TRANSPORT_m[TRANSPORT_m.code == 5651],\n        'distance': 3\n    },\n    {\n        'layer': TRANSPORT_m[TRANSPORT_m.code == 5601],\n        'distance': 1\n    },\n    {\n        'layer': POIS_A_m[POIS_A_m.code == 2081],\n        'distance': 1\n    },\n    {\n        'layer': POIS_A_m[POIS_A_m.code == 2084],\n        'distance': 1\n    },\n    {\n        'layer': POIS_A_m[POIS_A_m.code == 2010],\n        'distance': 1.5\n    },\n    {\n        'layer': LANDUSE_m[LANDUSE_m.code == 7201],\n        'distance': 3\n    },\n    {\n        'layer': LANDUSE_m[LANDUSE_m.code == 7202],\n        'distance': 1.5\n    },\n    {\n        'layer': LANDUSE_m[LANDUSE_m.code == 7206],\n        'distance': 0.5\n    },\n    {\n        'layer': TRANSPORT_m[TRANSPORT_m.code == 5621],\n        'distance': 0.4\n    },\n    {\n        'layer': TRANSPORT_m[TRANSPORT_m.code == 5620],\n        'distance': 0.6\n    },\n    {\n        'layer': POIS_A_m[POIS_A_m.code == 2301],\n        'distance': 0.7\n    },\n    {\n        'layer': POIS_A_m[POIS_A_m.code == 2303],\n        'code': 2303,\n        'distance': 0.7\n    },\n    {\n        'layer': POIS_A_m[POIS_A_m.code == 2201],\n        'distance': 1.4\n    },\n    {\n        'layer': POIS_A_m[POIS_A_m.code == 2501],\n        'distance': 0.5\n    },\n    \n    {\n        'layer': POIS_A_m[POIS_A_m.code == 2110],\n        'distance': 1\n    },\n    {\n        'layer': POIS_A_m[POIS_A_m.code == 2401],\n        'distance': 1.4\n    },\n    {\n        'layer': POIS_A_m[POIS_A_m.code == 2405],\n        'distance': 1.4\n    },\n    {\n        'layer': POIS_A_m[POIS_A_m.code == 2601],\n        'distance': 0.7\n    },\n    {\n        'layer': POIS_A_m[POIS_A_m.code == 2001],\n        'distance': 1\n    },\n    {\n        'layer': WATER_m[WATER_m.code == 8201],\n        'distance': 1\n    },\n    {\n        'layer': POFW_A_m,\n        'distance': 0.7\n    },\n    {\n        'layer': BUILDING_A_m[(BUILDING_A_m['type'] == 'retail')],\n        'distance': 0.7\n    },\n    {\n        'layer': BUILDING_A_m[(BUILDING_A_m['type'] == 'industrial')],\n        'distance': 1\n    },\n    {\n        'layer': BUILDING_A_m[(BUILDING_A_m['type'] == 'shed')],\n        'distance': 0.2\n    },\n    {\n        'layer': BUILDING_A_m[(BUILDING_A_m['type'] == 'garages')],\n        'distance': 0.2\n    }\n]","4f404707":"def flatten(t):\n    return [item for sublist in t for item in sublist]\n\nnames0 = [\n    'kindergarten',\n    'school',\n    'airport',\n    'railway_station',\n    'university',\n    'college',\n    'prison',\n    'forest',\n    'park',\n    'cemetery',\n    'bus_stop',\n    'parking',\n    'restaurant',\n    'cafe',\n    'theatre',\n    'supermarket',\n    'hospital',\n    'hotel',\n    'hostel',\n    'bank',\n    'police',\n    'water',\n    'pofw',\n    'retail',\n    'industrial',\n    'shed',\n    'garages'\n]\n\nnames = ['id'] + flatten(list(map(lambda x: (x+'_count', x+'_area', x+'_inv_dist'), names0)))","097c2853":"from shapely.geometry import box, Point\nimport geopandas as gpd\nfrom functools import reduce\n\nfactor = 10**6\n\ndef get_area(geometries, factor):\n    return reduce(lambda sum1, element2: sum1 + element2.area * factor, geometries, 0)\n\ndef get_min_way(start_point, geometries, factor):\n    if len(geometries) == 0: \n        return 0\n    minDist = min(geometries.distance(start_point))\n    if minDist == 0: return factor\n    return 1 \/ minDist\n    \ndef get_feature(longitude, latitude, obj, factor):\n    d = obj['distance'] \/ 111\n    bbox = box(longitude - d, latitude - d, longitude + d, latitude + d)\n    info = obj['layer']\n    info = info[info.geometry.intersects(bbox)]\n    \n    return info.shape[0], get_area(info.geometry, factor), get_min_way(Point(longitude, latitude), info.geometry, factor)\n\ndef get_features(longitude, latitude, factor):\n    feature_list = list(map(lambda obj: get_feature(longitude, latitude, obj, factor), driver))\n    return flatten(feature_list)","953763cb":"from tqdm import tqdm\n\ndef save(dataframe, index):\n    output = open('\/kaggle\/working\/features_train8000.csv', 'w')\n    dataframe.to_csv(output, index=False)\n\ndef extract_features_for_dataset(dataframe: pd.DataFrame, minindex: int = 0, maxindex: int = 5, period: int = 100):\n    trainFeatures = []\n    for index, data in tqdm(dataframe.iterrows()):\n        if (index < minindex): continue\n        if ((index >= maxindex) & (maxindex != -1)): break\n            \n        main_info = [data.ID]\n        features = get_features(data.longitude, data.latitude, factor)\n        trainFeatures.append(main_info + features)\n        \n        if (index % period == period - 1): \n            save(pd.DataFrame(trainFeatures, columns=names), index \/ period)\n        \n    return pd.DataFrame(trainFeatures, columns = names)","e4e57ab5":"%%time\nimport warnings\nwarnings.filterwarnings('ignore')\nfeatures_temp = extract_features_for_dataset(train, 3900, 4000, 100)","90433622":"import pandas as pd\nfeatures_train = pd.read_csv('\/kaggle\/input\/dist-data\/features_train8000dist.csv')\nfeatures_test = pd.read_csv('\/kaggle\/input\/dist-data\/features_test4000dist.csv')","cf4f8318":"drawinglist = ['kindergarten_count', 'university_count', 'school_count', 'shed_count']\nfeatures_Kind_t = features_train[drawinglist + ['target']]","4250c590":"import matplotlib.pyplot as plt\nimport seaborn as sns\n# sns.set_theme(style=\"whitegrid\")\nax = sns.countplot(x=\"kindergarten_count\", hue=\"target\", data=features_Kind_t)","dd9cd7da":"import matplotlib.pyplot as plt\nimport seaborn as sns\nfig, axs = plt.subplots(ncols=len(drawinglist))\nfig.tight_layout()\n\nfor index, value in enumerate(drawinglist):\n    sns.violinplot(x=\"target\", y=value,\n                    data=features_Kind_t, palette=\"Set2\",\n                    scale=\"count\", ax=axs[index]).set_title(value)","e038f127":"from sklearn.model_selection import train_test_split\n\ny,X=features_train.iloc[:, 1:2],features_train.iloc[:, 2:]\ny = y.to_numpy().flatten()\n\n\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.33, random_state=42)","d87df40f":"y_test_ids,X_test = features_test.iloc[:, 0:1],features_test.iloc[:, 1:]","af3ddbfe":"def feature_importances(importances, columns):\n    cat_iris_imp = pd.Series(importances, columns)\n    fig, ax = plt.subplots(figsize=(16,14))\n    cat_iris_imp.plot.bar(ax=ax)\n    ax.set_title(\"\u0412\u0430\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\")\n    ax.set_ylabel('\u0412\u0430\u0436\u043d\u043e\u0441\u0442\u044c, %')\n    fig.tight_layout()","b8fec917":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV","28c159dd":"_forest_clf = RandomForestClassifier(random_state=0)\nforest_parameters = [\n    {\n        \"max_depth\": [17, 18, 19], \n        \"n_estimators\": [40, 60],\n        \"max_features\": [15, 20]\n    },\n]\nforest_clf = GridSearchCV(_forest_clf,forest_parameters, verbose=1,scoring='roc_auc')","eef187e9":"forest_clf.fit(X_train, y_train)","857617e2":"forest_clf.best_params_","910eef67":"from sklearn.metrics import roc_auc_score\nforest_auc=roc_auc_score(y_val, forest_clf.predict_proba(X_val)[:, 1])\nprint('Forest ROC-AUC:',forest_auc)","9f695d1e":"feature_importances(forest_clf.best_estimator_.feature_importances_, X_train.columns)","c7a6e7c0":"forest_proba = forest_clf.predict_proba(X_test)","aca995b0":"from catboost import CatBoostClassifier\ncat_parameters = [\n    {\n        'depth': [8,10],\n        'learning_rate': [1e-3],\n        'n_estimators': [100,120]\n    }\n]\n_cat_clf=CatBoostClassifier(\n    od_type='Iter',\n    od_wait=1000,\n    eval_metric='AUC'\n)\ncat_clf = GridSearchCV(_cat_clf,cat_parameters,verbose=0,scoring='roc_auc')","c45ea4e8":"cat_clf.fit(X_train,y_train, verbose=0)","bc5229db":"cat_clf.best_params_","14b892ff":"from sklearn.metrics import roc_auc_score\n\ncat_auc=roc_auc_score(y_val, cat_clf.predict_proba(X_val)[:, 1])\nprint('CatBoost ROC-AUC:',cat_auc)","84990ee6":"cat_proba = cat_clf.predict_proba(X_test)","0ad0c2a4":"feature_importances(cat_clf.best_estimator_.get_feature_importance(), X_train.columns)","eb2cb59d":"tuned_parameters = [\n    {\n        'hidden_layer_sizes': [(50, 30), (150, 80, 30), (45, 20)],\n        'learning_rate_init': [0.01, 0.05, 0.001],\n        'max_iter': [1000, 200]\n    }\n]","48197fc0":"from sklearn.neural_network import MLPClassifier \nfrom sklearn.model_selection import GridSearchCV\n\n_mlp_clf = MLPClassifier(\n    alpha=1e-5,\n    random_state=1\n)\nmlp_clf = GridSearchCV(_mlp_clf, tuned_parameters, verbose=1,scoring='roc_auc')","dd02ffa0":"mlp_clf.fit(X_train,y_train)","4dd9fa26":"mlp_clf.best_params_","5a7de0fa":"mlp_auc=roc_auc_score(y_val, mlp_clf.predict_proba(X_val)[:, 1])\n\nprint('Multilayer preceptron ROC-AUC:',mlp_auc)","a079c061":"dt_parameters = [\n    {\n        \"max_depth\": [12], \n        \"max_features\": [35],\n        \"splitter\": [\"best\"]\n    },\n]","d2599170":"from sklearn.tree import DecisionTreeClassifier\n\n_dt_clf = DecisionTreeClassifier(random_state=0)\ndt_clf = GridSearchCV(_dt_clf, dt_parameters, verbose=1,scoring='roc_auc')","c4a46f21":"dt_clf.fit(X_train, y_train)","559acdd8":"dt_clf.best_params_","46ad2e4f":"dt_auc=roc_auc_score(y_val, dt_clf.predict_proba(X_val)[:, 1])\n\nprint('Decicion tree ROC-AUC:',dt_auc)","1a8c633d":"feature_importances(dt_clf.best_estimator_.feature_importances_, X_train.columns)","7087a384":"dt_proba = dt_clf.predict_proba(X_test)","14164506":"import xgboost as xgb\nparameters = {\n  'learning_rate': [1e-2], #so called eta value\n  'max_depth': [7, 9],\n  'subsample': [0.8],\n  'colsample_bytree': [0.7],\n  'n_estimators': [20] #number of trees, change it to 1000 for better results\n}\n\n_xgb_clf = xgb.XGBClassifier(\n    objective='binary:logistic',\n    booster='gbtree',\n    eval_metric='auc',\n    tree_method='hist',\n    grow_policy='lossguide',\n    use_label_encoder=False,\n    seed=5\n#     learning_rate= 1e-2,\n#     max_depth= 9,\n#     silent= 1,\n#     subsample= 0.8,\n#     colsample_bytree= 0.7,\n#     n_estimators=70\n)\n\n\nxgb_clf = GridSearchCV(_xgb_clf, parameters, n_jobs=-1, \n                   scoring='roc_auc',\n                   verbose=2, refit=True)","4516a463":"xgb_clf.fit(X_train, y_train)","2d94886c":"xgb_clf.best_params_","2857dfb8":"xgb_auc=roc_auc_score(y_val, xgb_clf.predict_proba(X_val)[:, 1])\nprint('XGBoost ROC-AUC:',xgb_auc)","9cefef2f":"xgb_proba = xgb_clf.predict_proba(X_test)","38f01fb3":"import numpy as np\nprobas = [cat_proba, xgb_proba]\nprobas_avg = np.sum(probas, axis=0) \/ len(probas)","ac5b0e62":"res = probas_avg[:,1:]\nanswer = y_test_ids.assign(target=res).rename(columns={'id': 'ID'})\nanswer.ID = answer.ID.astype(int)\nanswer.target = answer.target.astype(float)\nanswer.to_csv('\/kaggle\/working\/submission.csv', index=False)\npd.read_csv('\/kaggle\/working\/submission.csv')","ee6a5f13":"#### Random Forest","0c8e703e":"#### MLPC","a91e8033":"### Train test","d2fc00f4":"### Features extraction","918b60e8":"### Load data","a140ac7f":"#### Result","a2602a14":"### Consts and drivers","3294f085":"#### XGBoost","4f1af201":"### Process","d8eb7a47":"#### Cat Boost","ce1a5e44":"#### Decision Tree","714a630e":"# \u0421\u043e\u0432\u043c\u0435\u0441\u0442\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u042d\u0434\u0443\u0430\u0440\u0434\u0430 \u0425\u0443\u0441\u043d\u0443\u0442\u0434\u0438\u043d\u043e\u0432\u0430 \u0438 \u0412\u043b\u0430\u0434\u0438\u043c\u0438\u0440\u0430 \u041c\u044b\u043d\u043a\u0430"}}