{"cell_type":{"5098de0e":"code","bc4f87b6":"code","14f12670":"code","1266981a":"code","fffa0183":"code","a4bfd36f":"code","219dd7a5":"code","48e467d1":"code","f2d1f99f":"code","e4809596":"code","a897828e":"code","e73e1647":"code","f98da29a":"code","dc6aeedd":"code","92f9ce05":"code","86e23df3":"markdown","4d79dbc2":"markdown","b6446939":"markdown","8c17169a":"markdown","8c0e4355":"markdown","2399bc0b":"markdown","ad7f2339":"markdown","e981b49c":"markdown"},"source":{"5098de0e":"import numpy as np\nimport pandas as pd\n\nimport os\nimport matplotlib.pyplot as plt\nimport pandas_datareader as web\nimport datetime as dt\n\nfrom sklearn.preprocessing import MinMaxScaler\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, LSTM\nfrom tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping","bc4f87b6":"def load_data(company, start, end):\n    data = web.DataReader(company, 'yahoo', start, end)\n    return data","14f12670":"# Company to be focused on\nticker = 'DOGE-USD'\nstart_date = dt.datetime(2020,9,1)\nend_date = dt.datetime(2021,2,1)\n\n# how many days do i want to base my predictions on ?\nprediction_days = 30","1266981a":"data = load_data(company=ticker, start=start_date, end=end_date)","fffa0183":"print(data.head())","a4bfd36f":"scaler = MinMaxScaler(feature_range=(0,1))\nscaled_data = scaler.fit_transform(data['Close'].values.reshape(-1,1))\n\nx_train = []\ny_train = []\n\nfor x in range(prediction_days, len(scaled_data)):\n    x_train.append(scaled_data[x-prediction_days:x,0])\n    y_train.append(scaled_data[x,0])\n    \nx_train, y_train = np.array(x_train), np.array(y_train)\nx_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1],1))","219dd7a5":"print(x_train.shape)","48e467d1":"def LSTM_model():\n    \n    model = Sequential()\n    \n    model.add(LSTM(units = 50, return_sequences = True, input_shape = (x_train.shape[1],1)))\n    model.add(Dropout(0.2))\n\n    model.add(LSTM(units = 50, return_sequences = True))\n    model.add(Dropout(0.2))\n\n    model.add(LSTM(units = 50))\n    model.add(Dropout(0.2))\n    \n    model.add(Dense(units=1))\n    \n    return model","f2d1f99f":"model = LSTM_model()\nmodel.summary()\nmodel.compile(optimizer='adam', \n              loss='mean_squared_error')","e4809596":"# Define callbacks\n\n# Save weights only for best model\ncheckpointer = ModelCheckpoint(filepath = 'weights_best.hdf5', \n                               verbose = 2, \n                               save_best_only = True)\n\nmodel.fit(x_train, \n          y_train, \n          epochs=25, \n          batch_size = 32,\n          callbacks = [checkpointer])","a897828e":"# test model acc on existing data\ntest_data = load_data(company=ticker, start=end_date, end=dt.datetime.now())\n\nactual_prices = test_data['Close'].values\n\ntotal_dataset = pd.concat((data['Close'], test_data['Close']), axis=0)\n\nmodel_inputs = total_dataset[len(total_dataset) - len(test_data) - prediction_days:].values\nmodel_inputs = model_inputs.reshape(-1,1)\nmodel_inputs = scaler.transform(model_inputs)","e73e1647":"x_test = []\nfor x in range(prediction_days, len(model_inputs)):\n    x_test.append(model_inputs[x-prediction_days:x, 0])\n\nx_test = np.array(x_test)\nx_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1] ,1))\n\npredicted_prices = model.predict(x_test)\npredicted_prices = scaler.inverse_transform(predicted_prices)","f98da29a":"plt.plot(actual_prices, color='black', label=f\"Actual {ticker} price\")\nplt.plot(predicted_prices, color= 'green', label=f\"predicted {ticker} price\")\nplt.title(f\"{ticker} share price\")\nplt.xlabel(\"time\")\nplt.ylabel(f\"{ticker} share price\")\nplt.legend()\nplt.show()","dc6aeedd":"# predicting next day\nreal_data = [model_inputs[len(model_inputs)+1 - prediction_days:len(model_inputs+1),0]]\nreal_data = np.array(real_data)\nreal_data = np.reshape(real_data, (real_data.shape[0], real_data.shape[1], 1))","92f9ce05":"prediction = model.predict(real_data)\nprediction = scaler.inverse_transform(prediction)\nprint(f\"prediction: {prediction}\")","86e23df3":"# <div id=\"chap5\">5. Predictions","4d79dbc2":"# <div id=\"chap3\">3. Build LSTM model","b6446939":"# <div id=\"chap4\">4. Training","8c17169a":"**<font color=\"blue\" size=\"4\">What is a LSTM ?<\/font>**\n\n> Long Short Term Memory networks\n\n> A good read: https:\/\/colah.github.io\/posts\/2015-08-Understanding-LSTMs\/\n","8c0e4355":"# <div id=\"chap1\">1. Import libraries","2399bc0b":"<div align='center'><font size=\"5\" color='#353B47'>Predicting Doge Price<\/font><\/div>\n<br>\n<hr>","ad7f2339":"**<font size=\"2\"><a href=\"#summary\">Back to summary<\/a><\/font>**\n\n----","e981b49c":"# <div id=\"chap2\">2. Preprocessing"}}