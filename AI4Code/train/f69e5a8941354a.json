{"cell_type":{"6e5a952b":"code","bfb519d3":"code","b09a146e":"code","80a01e00":"code","c44c0a0c":"code","d9f95dbb":"code","bddd37ce":"code","afcad122":"code","dcda1592":"code","147bda8e":"code","7bf8120c":"code","1d56c51b":"code","9c47158a":"code","05b991bd":"code","03b2f7b2":"code","53102a43":"code","9b33ec09":"code","905f9a69":"code","3173bff7":"code","82cb7939":"code","9959793b":"code","15deb9c1":"code","008a60fa":"code","391349b7":"code","c72beaab":"code","8bcaf026":"code","96470474":"code","21eec43f":"code","ee47b5d6":"code","c8c9acee":"code","b7ce6553":"code","567f0d02":"code","b8d4482e":"code","344e73cf":"code","0c1e179d":"code","b74b65f3":"code","c0884ba5":"code","0c1a40ad":"code","451354e6":"markdown","abe7fd65":"markdown","2f139feb":"markdown","2a83c8cb":"markdown","0047bc15":"markdown","c7f67498":"markdown","2f585f24":"markdown","d517bfa0":"markdown","c9d47da1":"markdown","e7e0c478":"markdown","78742722":"markdown","25a7c4b2":"markdown","833685e9":"markdown","b4f46ed2":"markdown","50f9b40c":"markdown","a7cc8528":"markdown","397eb7a5":"markdown","cf0c01cf":"markdown"},"source":{"6e5a952b":"import os\nimport cv2\nimport csv\nimport glob\nimport pandas as pd\nimport numpy as np\nimport random\nimport itertools\nfrom collections import Counter\nfrom math import ceil\nimport matplotlib.pyplot as plt\nfrom tqdm.notebook import tqdm\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"all\"\n%matplotlib inline\n\nfrom matplotlib.patches import Rectangle\nfrom PIL import Image\n","bfb519d3":"os.listdir('..\/input\/global-wheat-detection')","b09a146e":"\n\ntrain = pd.read_csv(\"\/kaggle\/input\/global-wheat-detection\/train.csv\")  \nimage_folder_path = \"\/kaggle\/input\/global-wheat-detection\/train\/\"\n\n","80a01e00":"train","c44c0a0c":"train.nunique()","d9f95dbb":"\n\ntrain['bbox'] = train['bbox'].apply(lambda x: x[1:-1].split(\",\"))\ntrain['x_min'] = train['bbox'].apply(lambda x: x[0]).astype('float32')\ntrain['y_min'] = train['bbox'].apply(lambda x: x[1]).astype('float32')\ntrain['width'] = train['bbox'].apply(lambda x: x[2]).astype('float32')\ntrain['height'] = train['bbox'].apply(lambda x: x[3]).astype('float32')\ntrain = train[['image_id','x_min', 'y_min', 'width', 'height']]\ntrain[\"x_max\"] = train.apply(lambda col: col.x_min + col.width, axis=1)\ntrain[\"y_max\"] = train.apply(lambda col: col.y_min + col.height, axis = 1)\ntrain.head()\n\n","bddd37ce":"\n\ntrain[train[\"x_max\"] > 1024]\n\n\n","afcad122":"train[train[\"y_max\"] > 1024]\n","dcda1592":"train[train[\"x_min\"] < 0]\n","147bda8e":"train[train[\"y_min\"] < 0]","7bf8120c":"x_max = np.array(train[\"x_max\"].values.tolist())\ny_max = np.array(train[\"y_max\"].values.tolist())\ntrain[\"x_max\"] = np.where(x_max > 1024, 1024, x_max).tolist()\ntrain[\"y_max\"] = np.where(y_max > 1024, 1024, y_max).tolist()","1d56c51b":"train[\"class\"] = \"1\"","9c47158a":"def check_file_type(image_folder_path):\n    extension_type = []\n    file_list = os.listdir(image_folder_path)\n    for file in file_list:\n        extension_type.append(file.rsplit(\".\", 1)[1].lower())\n    print(Counter(extension_type).keys())\n    print(Counter(extension_type).values())\n    \n    \ncheck_file_type(image_folder_path)\n","05b991bd":"train[\"image_id\"] = train[\"image_id\"].apply(lambda x: str(x) + \".jpg\")\ntrain.head()","03b2f7b2":"train[\"image_id\"] = train[\"image_id\"].astype(\"str\")","53102a43":"train.to_csv(\"wheat.csv\", index=False)","9b33ec09":"\n\ndef check_image_size(image_folder_path):\n    total_img_list = glob.glob(os.path.join(image_folder_path,\"*\"))\n    counter = 0\n    for image in tqdm(total_img_list, desc = \"Checking in progress\"):\n        try:\n            img = cv2.imread(image)\n            height, width = img.shape[1], img.shape[0]\n            if not (height == 1024 and width == 1024):\n                counter = counter + 1\n        except:\n            print(\"This {} is problematic.\".format(image))\n    return counter \n        \n        \n\n","905f9a69":"\n\ncheck_image_size(image_folder_path)\n\n","3173bff7":"wheat = pd.read_csv(\"wheat.csv\") \nimage_folder_path = \"\/kaggle\/input\/global-wheat-detection\/train\/\"\nimage_annotation_file = \"wheat.csv\"","82cb7939":"wheat.head()","9959793b":"\n\ndef sanity_tally(image_folder_path, image_annotation_file):\n    img_annotation_list=[]\n    with open(image_annotation_file, \"r\") as file:\n        next(file)\n        for row in file:\n            try:\n                image_name, x_min, y_min,width,height ,x_max, y_max, class_idx = row.split(\",\")\n                if image_name not in  img_annotation_list:\n                     img_annotation_list.append(image_name)\n                \n            except ValueError:\n                print(\"Could not convert float to string, likely that your data has empty values.\")\n        \n    \n    total_img_list = os.listdir(image_folder_path)\n    if set(img_annotation_list) == set(total_img_list):\n        print(\"Sanity Check Status: True\")\n    else:\n        print(\"Sanity Check Status: Failed. \\nThe elements in wheat\/train.csv but not in the train image folder is {}. \\nThe elements in train image folder but not in wheat\/train.csv is {}\".format(\n                set(img_annotation_list) - set(total_img_list), set(total_img_list) - set(img_annotation_list)))\n        return list(set(img_annotation_list) - set(total_img_list)), list(set(total_img_list) - set(img_annotation_list))\n\n","15deb9c1":"set_diff1, set_diff2 = sanity_tally(image_folder_path, image_annotation_file = image_annotation_file)\n\nprint(\"\\n\\nThere are {} images without annotations in the train\/wheat.csv\".format(len(set_diff2)))\nprint('\\n\\nThere are {} images that are in train_csv but not in train images'.format(len(set_diff1)))","008a60fa":"def plot_multiple_img(list1):\n    f, axarr = plt.subplots(4,3,figsize=(16,12))\n\n    k=0\n    for i in range(0,4):\n        for j in range(0,3):\n            axarr[i,j].imshow(list1[k])\n            k+=1\n","391349b7":"\n\ndef plot_random_images(image_folder_path, image_annotation_file, num = 12):\n    img_annotation_list=[]\n    with open(image_annotation_file, \"r\") as file:\n        next(file)\n        for row in file:\n            try:\n                image_name, x_min, y_min,width,height ,x_max, y_max, class_idx = row.split(\",\")\n                if image_name not in  img_annotation_list:\n                     img_annotation_list.append(image_name)\n                \n            except ValueError:\n                print(\"Could not convert float to string, likely that your data has empty values.\")\n                \n    # randomly choose 12 images to plot\n    img_files_list = np.random.choice(img_annotation_list, num)\n    print(\"The images' names are {}\".format(img_files_list))\n    img_matrix_list = []\n    \n    for img_file in img_files_list:\n        image_file_path = os.path.join(image_folder_path, img_file)\n        img = cv2.imread(image_file_path)[:,:,::-1]  \n        img_matrix_list.append(img)\n\n    \n    plot_multiple_img(img_matrix_list)\n","c72beaab":"\n\nplot_random_images(image_folder_path, image_annotation_file, num = 12)\n\n","8bcaf026":"\nfrom matplotlib.patches import Rectangle\nfrom PIL import Image\n\nim = Image.open('..\/input\/global-wheat-detection\/train\/b6ab77fd7.jpg')\n\n# Display the image\nplt.imshow(im)\n\n# Get the current reference\nax = plt.gca()\n\n# Create a Rectangle patch\nrect = Rectangle((226.0 ,548.0), 130.0 ,58.0 ,linewidth=1,edgecolor='r',facecolor='none')\n\n# Add the patch to the Axes\nax.add_patch(rect)","96470474":"image_id=wheat['image_id']\n","21eec43f":"def plot_boxes(img,list1):\n    fig, axa = plt.subplots(figsize=(20,10))\n    axa.imshow(img)\n\n    ax = plt.gca()\n\n    for i in range(0,len(list1)):\n        rect = Rectangle((list1[i][0] ,list1[i][1]), list1[i][2] ,list1[i][3] ,linewidth=1,edgecolor='r',facecolor='none')\n        ax.add_patch(rect)","ee47b5d6":"def print_random_bbox():\n    img_file = np.random.choice(image_id, 1)\n    image_file_path = os.path.join(image_folder_path, img_file[0])\n    img = cv2.imread(image_file_path)[:,:,::-1]\n    box_data=wheat[wheat['image_id']==img_file[0]]\n    box_data=box_data[['x_min','y_min','width','height']]\n    list1=[]\n    for i in list(box_data.index):\n        rowData = box_data.loc[ i , : ]\n        list1.append(list(rowData))\n        \n \n    plot_boxes(img,list1)\n\n","c8c9acee":"print_random_bbox()","b7ce6553":"listofzeros = [0] * len(set_diff2)","567f0d02":"wheat1=pd.DataFrame({'image_id':[*set_diff2],'x_min':[*listofzeros], 'y_min':[*listofzeros], 'width':[*listofzeros], 'height':[*listofzeros], 'x_max':[*listofzeros], 'y_max':[*listofzeros],'class':[*listofzeros]})\n    ","b8d4482e":"wheat1.head()","344e73cf":"wheat1.shape","0c1e179d":"wheat.shape","b74b65f3":"wheat=wheat.append(wheat1)","c0884ba5":"wheat.shape","0c1a40ad":"wheat.tail()","451354e6":"* we have some images in train folder which have no data in csv file that means they have no wheat buds in them . we will append this in our data after our vusalisations are done","abe7fd65":"Let's see the list of files in the given dataset","2f139feb":"* now we have to check if all the images in train path are of same shape","2a83c8cb":"import the training data","0047bc15":"* now let's save the processesd dataframe into csv file for further use","c7f67498":"* now we have to change the image_id in the same format as image name with file extension so that we can map images with data using image_id easily","2f585f24":"![image.png](attachment:image.png)","d517bfa0":"* now let's see how the bbox co-ordinate data should be utilised","c9d47da1":"* now let's plot some random images from the train dataset","e7e0c478":"# Visualisation of the training data","78742722":"* now we have to check if all the images in the train dataset have bbox information in the csv file","25a7c4b2":"* the bbox column has x_min, y_min,width, hight values in it so split the values and create new coumns\n* replace width , height with width , height data of the bounding box\n* create new columns for top right point of the bounding box (necessary for some visualisations)","833685e9":"* now let's add the data of the image files with no wheat buds in the training data","b4f46ed2":"let's analyse the columns of the train csv file \n* image_id: is the id of the image of the wheat plants there are multipe columns with the same id because a photo has multiple wheat buds which we are going to identify. \n*  width, height : it is the aspect ratio of the image . these are same all images, so later can be excluded\n* bbox: it is list containg four elements. first two eare the co-ordinates of the bottom left point of the rectangular box drawn around the wheat bud, and the remaining two are the width and height of the box.\n* souce: sorce from which the image data is obtained , not impact on the data","50f9b40c":"* by using the above method we can create a function that can plot all the bboxes of a image that are present in csv file","a7cc8528":"* now let's check if there are images with bounding box co-ordinates outside the aspect ratio and correct them","397eb7a5":"* now let's check if all the images are jpg are not","cf0c01cf":"* create a column class to classify the the data either having the bboc co-ordinates or not,all the data this in train csv have bbox co-ordinates so fill it with '1' "}}