{"cell_type":{"9afd7be8":"code","724970b7":"code","d06e40d2":"code","e8ccfbcc":"code","fcca7062":"code","5d90fc66":"code","901a3ba4":"code","f2cc3208":"code","bae81ea1":"code","4993a170":"code","930f13db":"code","4d3d8e18":"code","a3301af8":"code","ccf32fb4":"code","3559439d":"code","6afd3fe6":"code","97d34a6c":"markdown","e2a04d1e":"markdown","83866529":"markdown","4c0eb508":"markdown","39c82f3f":"markdown","a88a219b":"markdown","06ba4fdc":"markdown","eb96a32e":"markdown","0658ae1f":"markdown","d5d00e87":"markdown","f50a9eca":"markdown"},"source":{"9afd7be8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\n\nimport matplotlib.pyplot as plt","724970b7":"train_df = pd.read_csv('\/kaggle\/input\/contradictory-my-dear-watson\/train.csv')\nprint('The Training data has {} records'. format(train_df.shape[0]))\ntrain_df.head()","d06e40d2":"test_df = pd.read_csv('\/kaggle\/input\/contradictory-my-dear-watson\/test.csv')\nprint(\"The Test data has {} records\". format(test_df.shape[0]))\ndisplay(test_df.head())","e8ccfbcc":"train_df.isnull().any()","fcca7062":"test_df.isnull().any()","5d90fc66":"train_df['language'].value_counts()","901a3ba4":"english = train_df[train_df['language'] == 'English'].copy()\n\nprint('Premise: {}'.format(english.iloc[1]['premise']))\nprint('Hypothesis: {}'.format(english.iloc[1]['hypothesis']))\n","f2cc3208":"def drawGraph(x, y, title):\n    \n    # Figure Size\n    fig, ax = plt.subplots(figsize=(15,10))\n\n    # Horizontal Bar Plot\n    ax.barh(x, y, color='crimson')\n\n    # Remove axes splines\n    for s in ['top','bottom','left','right']:\n        ax.spines[s].set_visible(False)\n\n    # Remove x,y Ticks\n    ax.xaxis.set_ticks_position('none')\n    ax.yaxis.set_ticks_position('none')\n\n    # Add padding between axes and labels\n    ax.xaxis.set_tick_params(pad=5)\n    ax.yaxis.set_tick_params(pad=10)\n\n    # Add x,y gridlines\n    ax.grid(b=True, color='grey', linestyle='-.', linewidth=0.5, alpha=0.2)\n\n    # Show top values \n    ax.invert_yaxis()\n\n    # Add Plot Title\n    ax.set_title(title,\n                 loc='left', pad=10)\n\n    # Add annotation to bars\n    for i in ax.patches:\n        ax.text(i.get_width()+100, i.get_y()+0.5, str(round((i.get_width()), 2)),\n                fontsize=10, fontweight='bold', color='grey')\n\n    # Add Text watermark\n    fig.text(0.9, 0.15, '@introvertedspud', fontsize=12, color='grey',\n             ha='right', va='bottom', alpha=0.5)\n\n    # Save Plot as image\n    fig.savefig('Top Reasons for Requesting Loan.png', dpi=100,\n                bbox_inches='tight')\n\n    # Show Plot\n    plt.show()","bae81ea1":"drawGraph(train_df['language'].value_counts().index, train_df['language'].value_counts(), 'Language Distribution for Train Data')","4993a170":"drawGraph(test_df['language'].value_counts().index, test_df['language'].value_counts(), 'Language Distribution for Test Data')","930f13db":"unqiues = train_df['label'].value_counts().index\nuniqueString = []\nfor x,y in enumerate(unqiues):\n    uniqueString.append(str(y))\n\ndrawGraph(uniqueString, train_df['label'].value_counts(), 'Label Distribution for Training Data')","4d3d8e18":"def drawHistogram(records, col, title):\n    fig, ax = plt.subplots()\n    fig = plt.gcf()\n    fig.set_size_inches(15,10)\n    plt.hist(records, 10, density=False, color='crimson', log=True)\n    plt.xlabel(col)\n    plt.ylabel('Frequency')\n    plt.title(title)\n    plt.grid(True)\n    plt.show()","a3301af8":"drawHistogram(train_df['premise'].str.count(' ') + 1, \"Word Count\", \"Word Count Frequency for 'Premise' Training Data\")","ccf32fb4":"drawHistogram(train_df['hypothesis'].str.count(' ') + 1, \"Word Count\", \"Word Count Frequency for 'Hypothesis' Training Data\")","3559439d":"drawHistogram(test_df['premise'].str.count(' ') + 1, \"Word Count\", \"Word Count Frequency for 'Premise' Test Data\")","6afd3fe6":"drawHistogram(train_df['hypothesis'].str.count(' ') + 1, \"Word Count\", \"Word Count Frequency for 'Hypothesis' Training Data\")","97d34a6c":"![Sherlock Holmes](https:\/\/i.ibb.co\/k30XzxD\/kisspng-john-h-watson-sherlock-holmes-vector-graphics-cli-sherlock-homes-cliparts-free-download-clip.png)","e2a04d1e":"# Word Count Histogram\nHow many words are there for each record?","83866529":"# Graph Training Data Label Distribution\nHow often are each labels used for the training data?","4c0eb508":"# Thank you\nThank you for taking a look at my EDA for Contradictory, My Dear Watson.  I would love feedback.  Good luck on the competition!","39c82f3f":"### Example Premise and hypothesis","a88a219b":"# EDA for Contradictory, My Dear Watson\nKaggle Challenge: https:\/\/www.kaggle.com\/c\/contradictory-my-dear-watson\/notebooks\n\nPrettier Plots: https:\/\/bmanohar16.github.io\/blog\/customizing-bar-plots","06ba4fdc":"### View files that are part of the challenge","eb96a32e":"### Make sure data has no missing values\nAlways make sure there are no nulls","0658ae1f":"### Load DataFrames\nLoad the DataFrames, and get record count.","d5d00e87":"# Graphs for Language Distribution\nDraw graphs to better see how the distribution is looking.","f50a9eca":"### Languages\nThere are multiple languages in here.  How often are they used in the data set?"}}