{"cell_type":{"e3e01db3":"code","ca6a3070":"code","f313d450":"code","2687621d":"code","a4266cb2":"code","9e5d387d":"code","09abbc0b":"code","7e9c5e90":"code","30af317d":"code","2580fa18":"code","bdd1e586":"code","a23afdd4":"code","0da2ed36":"code","15d1e782":"markdown","1f6db61f":"markdown","24659f63":"markdown","2bec0354":"markdown","6dee1029":"markdown","eee1b31b":"markdown","f476ce97":"markdown","8039755f":"markdown"},"source":{"e3e01db3":"import pickle\nimport pandas as pd\nimport numpy as np\nwith (open(\"\/kaggle\/input\/math-project-4-analysis\/tsne_x.pkl\", \"rb\")) as openfile:\n    data = pickle.load(openfile)\nimport keras\n(X_train, y_train), (X_test, y_test) = keras.datasets.mnist.load_data()\ny = y_test # this is the label - 7, 2, 1, etc.","ca6a3070":"def std(arr):\n    mean1, mean2 = np.mean(arr[:,0]), np.mean(arr[:,1])\n    dist = np.sqrt((arr[:,0]-mean1)**2 + (arr[:,1]-mean2)**2)\n    return np.sum(dist)\/len(arr)","f313d450":"stds = [std(data[key]) for key in data.keys()]","2687621d":"import matplotlib.pyplot as plt\nimport seaborn as sns\nplt.style.use('fivethirtyeight')\nsns.set_style('whitegrid')\nplt.figure(figsize=(15,7))\nplt.scatter(list(data.keys()),stds, s=100)\nplt.xlabel('Number of Neurons in Bottleneck')\nplt.ylabel('Average Distance from Mean')\nplt.title('Spread of Entire Latent Space by Bottleneck Size')\nplt.tight_layout()\nplt.savefig('img.png', dpi=400)\nplt.show()","a4266cb2":"print(pd.DataFrame({\"Neurons\":list(data.keys()),\"Avg. Distance from Mean\":stds}).to_latex(index=False))","9e5d387d":"class_std = [[std(data[key][y==digit]) for key in data.keys()] for digit in range(10)]\n\n# plt.style.use('fivethirtyeight')\nsns.set_style('whitegrid')\nplt.figure(figsize=(15,7))\n\nviridis = plt.cm.get_cmap('plasma', 10)\ncolors = viridis(range(10))\n\nfor digit in range(len(class_std)):\n    plt.figure(figsize=(15,7))\n    plt.plot(list(data.keys()),class_std[digit], label=digit, color=colors[digit], linewidth=1.5, alpha=0.5)\n    plt.scatter(list(data.keys()),class_std[digit], color=colors[digit])\n    plt.xlabel('Number of Neurons in Bottleneck')\n    plt.ylabel('Average Distance from Mean')\n    plt.title(f'Spread of Digit Clusters by Bottleneck Size for Digit {digit}')\n    plt.tight_layout()\n    plt.legend()\n    plt.savefig('img.png', dpi=400)\n    plt.show()\n    \n#     deg = 3\n#     coefs = np.polyfit(list(data.keys()), class_std[digit], deg=deg)\n#     inp = np.linspace(0,200,num=1000)\n#     out = np.zeros(len(inp))\n#     for i in range(deg+1):\n#         out += coefs[i] * (inp**(deg-i))\n#     plt.plot(inp, out, label=digit, color=colors[digit])\n\n# plt.xlabel('Number of Neurons in Bottleneck')\n# plt.ylabel('Average Distance from Mean')\n# plt.title('Spread of Digit Clusters by Bottleneck Size')\n# plt.tight_layout()\n# plt.legend()\n# plt.savefig('img.png', dpi=400)\n# plt.show()","09abbc0b":"import pandas as pd\nsample = pd.DataFrame(class_std, columns=[f\"{n}\" for n in data.keys()])","7e9c5e90":"sample = np.round(sample,2)","30af317d":"print(sample.to_latex()) ","2580fa18":"means = np.array([np.mean(data[key],axis=0) for key in data.keys()])\ndistance = np.zeros((len(means),len(means)))\nfor i in range(len(means)):\n    for j in range(len(means)):\n        distance[i][j] = np.sqrt(sum((means[i] - means[j])**2))","bdd1e586":"means_dist = []\nstds_dist = []\nfor num_bot in data.keys():\n    means = np.array([np.mean(data[num_bot][y==digit],axis=0) for digit in range(10)])\n    distance = np.zeros((len(means),len(means)))\n    for i in range(len(means)):\n        for j in range(len(means)):\n            distance[i][j] = np.sqrt(sum((means[i] - means[j])**2))\n\n    plt.figure(figsize=(9,8))\n    sns.heatmap(distance, annot=True, cmap='Blues', fmt=\".1f\")\n    plt.title(f'Distances Between Digit Centroids for {num_bot} Neurons')\n    plt.savefig('img.png', dpi=400)\n    plt.show()\n\n    all_dists = []\n    for i in range(0,10):\n        for j in range(0,i+1):\n            all_dists.append(distance[i][j])\n    all_dists = np.array(all_dists)\n    all_dists = all_dists[all_dists!=0]\n    print(\"Mean of distances:\", np.mean(all_dists))\n    print(\"Standard Deviation of distances:\", np.std(all_dists))\n    means_dist.append(np.mean(all_dists))\n    stds_dist.append(np.std(all_dists))\n    plt.figure(figsize=(20,7))\n    sns.distplot(all_dists, bins=10)\n    plt.title(f\"Distribution of Distances Between Centroids for {num_bot} Bottleneck Neurons\")\n    plt.savefig('img.png', dpi=400)\n    plt.show()","a23afdd4":"plt.figure(figsize=(20,7))\nplt.scatter(list(data.keys()), means_dist)\nplt.savefig('img.png', dpi=400)\nplt.title('Means of Distances Between Clusters Across Bottleneck Size')\nplt.xlabel('Bottleneck Size')\nplt.ylabel('Means of Distances Between Clusters')\nplt.show()\n\nplt.figure(figsize=(20,7))\nplt.scatter(list(data.keys()), stds_dist, s=100)\nplt.savefig('img.png', dpi=400)\nplt.title('Standard Deviations of Distances Between Clusters Across Bottleneck Size')\nplt.xlabel('Bottleneck Size')\nplt.ylabel('Standard Deviations of Distances Between Clusters')\nplt.show()","0da2ed36":"print(pd.DataFrame({'Neurons':list(data.keys()), 'Standard Devition of Distance Between Digit Centroids':stds_dist}).to_latex(index=False))","15d1e782":"Idea - perhaps take correlation between mean and bottleneck size, log bottleneck size?","1f6db61f":"# Distances from Means","24659f63":"## Mean by Digit","2bec0354":"## Standard Deviation by Class","6dee1029":"# Analyzing Standard Deviation","eee1b31b":"![image.png](attachment:1c074302-2186-4858-97a4-05ee048dae34.png)","f476ce97":"## Standard Deviation for All Points","8039755f":"## Global Mean"}}