{"cell_type":{"4ff8a300":"code","ec351fb0":"code","00274930":"code","41f1ad5a":"code","0fc2c34b":"code","dbd43c9c":"code","3fa7dedb":"code","d342d21a":"code","e0330426":"code","63dfa14a":"code","c494f83c":"code","bd4a5aab":"code","d273a929":"code","f99e7ad2":"code","b38b70c7":"code","af6233ce":"code","643b8d0c":"code","e17396db":"code","778aa9c8":"code","5d3f6900":"code","710fd6b5":"code","5066df8d":"code","1a2bbbcf":"code","f30b8a70":"code","0ec95ee2":"code","32f8c85e":"code","af7beb3b":"code","a9451805":"code","9944497e":"code","71ff6156":"code","fec83618":"code","e74589b6":"code","370b3dfb":"code","b92fc40f":"code","55d626c4":"code","fbbd9a83":"code","b77f100d":"code","b8b7e905":"code","384f7d1a":"code","ade03ca3":"code","ff639ffc":"code","0e551bf1":"code","ec16e236":"code","ee7d14ed":"code","b572600d":"code","f452553e":"code","4ca09ba2":"code","a07b42a4":"code","1ca4288f":"code","106a58b7":"code","7dea45be":"code","3a7ee314":"code","dccafb6f":"code","2d5878b6":"code","8cdcf388":"code","22e40576":"code","3b1424ec":"code","3aa2d903":"code","9ec46077":"code","4629a1d3":"code","765e5f01":"code","911b0815":"code","e58cd5f0":"code","33f98826":"code","16db25b8":"code","65a8c77d":"code","46a3f7b4":"code","5b09afe0":"code","831340f2":"code","aa77bb27":"code","7d0e2676":"code","d3d43a57":"code","44c124a1":"code","f425748f":"markdown","8622efbd":"markdown","b3a5daea":"markdown","81c2f344":"markdown","f2d6c9a3":"markdown","77c15aad":"markdown","acbbcf87":"markdown"},"source":{"4ff8a300":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n \nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\n\nfrom lightgbm import LGBMClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import VotingClassifier\nimport pandas_profiling as pp\nimport math \nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import cross_val_score,GridSearchCV\nfrom sklearn.metrics import accuracy_score\nfrom xgboost import XGBClassifier\n#!pip install m\nimport matplotlib.pyplot as plt\n%matplotlib inline\nprint(\"done\")\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","ec351fb0":"\nimport warnings\nwarnings.filterwarnings('ignore')\n\n","00274930":"train_Data=pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\n\n\ntest_Data=pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\n\ngender_Data=pd.read_csv(\"\/kaggle\/input\/titanic\/gender_submission.csv\")\n\n\n","41f1ad5a":"gender_Data.info()","0fc2c34b":"train_Data.info()","dbd43c9c":"test_Data.info()","3fa7dedb":"train_Data.shape","d342d21a":"test_Data.info()","e0330426":"test_Data.shape","63dfa14a":"train_Data.isnull().sum()","c494f83c":"df=train_Data\ndf_1=test_Data","bd4a5aab":"df.describe()","d273a929":"df_1.describe()","f99e7ad2":"print((df.isnull().sum().sort_values(ascending=False)\/len(df))*100)","b38b70c7":"print((df_1.isnull().sum().sort_values(ascending=False))\/len(df)*100)","af6233ce":"pp.ProfileReport(df)","643b8d0c":"pp.ProfileReport(df_1)","e17396db":"df['Title']=df.Name.str.extract('([A-Za-z]+)\\.')\ndf_1['Title']=df_1.Name.str.extract('([A-Za-z]+)\\.')","778aa9c8":"sns.catplot(x='Pclass',y='Age',hue='Sex',kind='box',data=df)\nplt.xlabel('PClass')\nplt.ylabel('Age')\n","5d3f6900":"sns.catplot(x='Embarked',y='Age',hue='Sex',kind='box',data=df)","710fd6b5":"sns.pointplot(x='Survived',y='Age',hue='Sex',data=df,dodge=True,linestyles=['-','--'])","5066df8d":"sns.pointplot(x='Parch',y='Survived',hue='Sex',data=df,dodge=True)","1a2bbbcf":"sns.boxplot(x='Fare',data=df)","f30b8a70":"sns.boxplot(x='Age',data=df)","0ec95ee2":"sns.boxplot(x='SibSp',data=df)","32f8c85e":"df.Title.unique()","af7beb3b":"def Replace_Title(X_titles,y_replcaed):\n    x=dict.fromkeys(X_titles,y_replcaed)\n    return x","a9451805":"df.Title=df.Title.replace(Replace_Title(['Ms', 'Mlle'],'Miss'))\ndf.Title=df.Title.replace(Replace_Title(['Dr', 'Major', 'Col', 'Sir', 'Rev', 'Jonkheer', 'Capt', 'Don'],'Mr'))\n\ndf.Title=df.Title.replace(Replace_Title(['Mme', 'Countess', 'Lady', 'Dona'],'Mrs'))\n\n\n","9944497e":"df_1.Title=df_1.Title.replace(Replace_Title(['Ms', 'Mlle'],'Miss'))\ndf_1.Title=df_1.Title.replace(Replace_Title(['Dr', 'Major', 'Col', 'Sir', 'Rev', 'Jonkheer', 'Capt', 'Don'],'Mr'))\n\ndf_1.Title=df_1.Title.replace(Replace_Title(['Mme', 'Countess', 'Lady', 'Dona'],'Mrs'))\n\n","71ff6156":"df.Title.unique()","fec83618":"df_1.Title.unique()","e74589b6":"df.groupby('Title').Survived.mean()\n","370b3dfb":"sns.barplot(x='Title',y='Survived',data=df)","b92fc40f":"df['Ticket_letter']=df.Ticket.apply(lambda x: x[:2])\n\ndf['Ticket_length']=df.Ticket.apply(lambda x: len(x))\n\n\ndf_1['Ticket_letter']=df_1.Ticket.apply(lambda x: x[:2])\n\ndf_1['Ticket_length']=df_1.Ticket.apply(lambda x: len(x))","55d626c4":"df.Ticket_letter","fbbd9a83":"df.SibSp.value_counts()","b77f100d":"df_1.SibSp.value_counts()","b8b7e905":"fig, axarr = plt.subplots(1,2,figsize=(12,6))\na = sns.countplot(df['SibSp'], ax=axarr[0]).set_title('Passengers count by SibSp')\naxarr[1].set_title('Survival rate by SibSp')\nb = sns.barplot(x='SibSp', y='Survived', data=df, ax=axarr[1]).set_ylabel('Survival rate')","384f7d1a":"fi,ax=plt.subplots(1,2,figsize=(12,6))\n\nsns.countplot(df['Parch'],ax=ax[0]).set_title('Passengers count by parch ')\nax[1].set_title('Survival Rate of Passengers')\nsns.barplot(x='Parch',y='Survived',data=df).set_ylabel('Survival Rate')","ade03ca3":"# Creation of a new Fam_size column\ndf['Fam_size'] = df['SibSp'] + df['Parch'] + 1\ndf_1['Fam_size'] = df_1['SibSp'] + df_1['Parch'] + 1","ff639ffc":"plt.title('Survival rate by family size')\nsns.barplot(x='Fam_size',y='Survived',data=df).set_ylabel('Survival_rate')","0e551bf1":"df['Family_type']=pd.cut(df.Fam_size,[0,1,4,7,11],labels=['Solo','Small','Big','Very Big'])\n\ndf_1['Family_type']=pd.cut(df_1.Fam_size,[0,1,4,7,11],labels=['Solo','Small','Big','Very Big'])","ec16e236":"plt.title('Survival rate by Family type')\nsns.barplot(x='Family_type',y='Survived',data=df)","ee7d14ed":"y=df['Survived']\n\nfeatures=['Pclass','Title','Fare','Embarked','Ticket_letter','Ticket_length','Family_type']\n\nx=df[features]","b572600d":"x.head()","f452553e":"numerical_cat=['Fare']\n\ncategorical_cols=['Pclass','Title','Embarked','Ticket_letter','Ticket_length','Family_type']\n\n\n#Preprocessing for numerical data\n\nnumerical_transformer= SimpleImputer(strategy='median')\n\n#Preprocessing for Categorical data\n\ncategorical_transformer=Pipeline(steps=[('imputer',SimpleImputer(strategy='most_frequent')),('onehot',OneHotEncoder(handle_unknown='ignore'))])\n\n\n#Bundle preprocessing for numerical and categorical data\n\nPreprocessor=ColumnTransformer(transformers=[('num',numerical_transformer,numerical_cat),('cat',categorical_transformer,categorical_cols)])\n\n\n#Bundle preprocessing and modeling code\ntitanic_pipeline=Pipeline(steps=[('preprocessor',Preprocessor),('model',DecisionTreeClassifier())])\n\ntitanic_pipeline_1=Pipeline(steps=[('preprocessor',Preprocessor),('model_R',RandomForestClassifier())])\n\n\ntitanic_pipeline_2=Pipeline(steps=[('preprocessor',Preprocessor),('model_1',LogisticRegression(penalty='l2',C=2.7825594022071245))])\n\ntitanic_pipeline_3=Pipeline(steps=[('preprocessor',Preprocessor),('model_2',XGBClassifier())])\n\ntitanic_pipeline_4=Pipeline(steps=[('preprocessor',Preprocessor),('model_3',LGBMClassifier())])\n","4ca09ba2":"\n#DecisionTRee\nparameters={\n    \"model\":[DecisionTreeClassifier()],\n    \"model__criterion\":['gini','entropy'],\n    \"model__max_depth\":[1,2,4,5,10,None],\n    \"model__min_samples_split\":[2,3,5,10],\n    \"model__min_samples_leaf\":[1,5,10,20]\n}","a07b42a4":"grid_Decision_Tree=GridSearchCV(titanic_pipeline,param_grid=parameters,cv=5).fit(x,y)","1ca4288f":"grid_Decision_Tree.best_params_","106a58b7":"titanic_pipeline_Decision_Tree=Pipeline(steps=[('preprocessor',Preprocessor),('model_DT',DecisionTreeClassifier(criterion='entropy',max_depth=4,min_samples_leaf=1,min_samples_split=2))])\n","7dea45be":"#RandomForest\n\nparameters_R={\n    \n    \n     'model_R':[RandomForestClassifier()],\n     'model_R__n_estimators':[2,4,5,8,10,15],\n     \"model_R__criterion\": [\"gini\", \"entropy\"],\n     'model_R__max_features':['auto','log2'],\n     'model_R__max_depth':[1,2,3,5,10],\n     \"model_R__min_samples_split\": [2, 3, 5, 10],\n     'model_R__min_samples_leaf':[2,3,5,10],\n\n\n}","3a7ee314":"grid=GridSearchCV(titanic_pipeline_1,param_grid=parameters_R,cv=5)","dccafb6f":"grid_Forest=grid.fit(x,y)","2d5878b6":"grid_Forest.best_score_","8cdcf388":"grid_Forest.best_params_","22e40576":"titanic_pipeline_Forest=Pipeline(steps=[('preprocessor',Preprocessor),('model_RF',RandomForestClassifier(criterion='gini',max_depth=5,max_features='auto',min_samples_leaf=5,min_samples_split=2,n_estimators=4))])\n","3b1424ec":"#XGboost\n\nparameters_XG={\n        \n                \"model_2__max_depth\":[3,4,5,6,7,8],\n                \"model_2__n_estimators\":[5,10,20,50,100],\n                \"model_2__learning_rate\":np.linspace(0.02,0.16,8)\n    \n    \n}","3aa2d903":"grid_XG=GridSearchCV(titanic_pipeline_3,param_grid=parameters_XG,cv=5)","9ec46077":"Grid_XG=grid_XG.fit(x,y)","4629a1d3":"Grid_XG.best_params_","765e5f01":"titanic_pipeline_XG=Pipeline(steps=[('preprocessor',Preprocessor),('model_XG',XGBClassifier(max_depth=5,n_estimators=50,learning_rate=0.1))])\n","911b0815":"#LGBM\n\nparameters_LGBM={\n                    'model_3__n_estimators':[5,50,100],\n                    'model_3__max_depth':range(3,8),\n                    'model_3__num_leaves':[31,61],\n                    'model_3__min_data_in_leaf':[20,30,40],\n                    'model_3__learning_rate':np.linspace(0.02,0.16,4)\n}","e58cd5f0":"grid_LGBM=GridSearchCV(titanic_pipeline_4,param_grid=parameters_LGBM,cv=5)","33f98826":"grid_Lgbm_=grid_LGBM.fit(x,y)","16db25b8":"grid_Lgbm_.best_params_","65a8c77d":"titanic_pipeline_LGBM=Pipeline(steps=[('preprocessor',Preprocessor),('model_3',LGBMClassifier(n_estimators=100 ,max_depth=5 , num_leaves=31 , min_data_in_leaf= 20, learning_rate=0.16))])\n","46a3f7b4":"titanic_pipeline_Decision_Tree=Pipeline(steps=[('preprocessor',Preprocessor),('model_DT',DecisionTreeClassifier(criterion='entropy',max_depth=4,min_samples_leaf=1,min_samples_split=2))])\n\ntitanic_pipeline_Forest=Pipeline(steps=[('preprocessor',Preprocessor),('model_RF',RandomForestClassifier(criterion='gini',max_depth=5,max_features='auto',min_samples_leaf=5,min_samples_split=2,n_estimators=4))])\n\ntitanic_pipeline_XG=Pipeline(steps=[('preprocessor',Preprocessor),('model_XG',XGBClassifier(max_depth=5,n_estimators=50,learning_rate=0.1))])\n","5b09afe0":"voting_classifier=Pipeline([['model_V',VotingClassifier(estimators=[('titanic_pipeline_Decision',titanic_pipeline_Decision_Tree),('titanic_pipeline_Forest',titanic_pipeline_Forest),('titanic_pipeline_XG',titanic_pipeline_XG),('titanic_pipeline_LGBM',titanic_pipeline_LGBM)])]])","831340f2":"voting_classifier.fit(x,y)","aa77bb27":"\nX_test=df_1[features]\nX_test.head()","7d0e2676":"X_test.isnull().sum()","d3d43a57":"predictions=voting_classifier.predict(X_test)","44c124a1":"output=pd.DataFrame({'PassengerId':df_1.PassengerId,'Survived':predictions})\n\noutput.to_csv('sub.csv',index=False)\nprint('Your submission was successfully saved!')","f425748f":"#Percentage of Unique values","8622efbd":"# Modeling\n**# We start by selecting the features we will use and isolating the target.\n**As I said, I will not consider Cabin and in the end, I also excluded Age as the relevant information which is being a young man is encoded in the Master title.\nI also did not use Sex as it is not useful given the Title column: adult males and young children have the same sex but are really different categories as we saw before, so we don't want to confuse our algorithm.\nIf you don't extract the Title column, remember to put Sex in your models as it is pretty important!","b3a5daea":"# Cabin and Ticket\n# \n**\nThe Cabin feature is somewhat problematic as there are many missing values.\nI don't expect it to help our model too much so I don't even analyze it.\nOn the other side, a correctly engineered Ticket column is the best way to find family groups but it is not the approach I chose for this notebook (I will maybe try it in another one).\nSince it is a pity to delete it knowing its full potential, I decided to create two new columns: one for the ticket first two letters and the second one for the ticket length.****","81c2f344":"# Parch\n**# Similar to the SibSp column, this feature contains the number of parents or children each passenger was traveling with.\n**Here we draw the same conclusions as SibSp: we see again that small families had more chances to survive than bigger ones and passengers who traveled alone.**","f2d6c9a3":"# Family type\n**# Since we have two seemingly weak predictors, one thing we can do is combine them to get a stronger one.\n**In the case of SibSp and Parch, we can join the two variables to get a family size feature, which is the sum of SibSp, Parch and 1 (who is the passenger himself).","77c15aad":"In order to improve the performance of the model we had find the parameters that best suits for the model so trying to findout the parameters using GridSearchCv.","acbbcf87":"Since from the EDA I remember that we have missing values in both train and test data and multiple categorical variables to deal with, I decided to use pipelines to simplify all the work."}}