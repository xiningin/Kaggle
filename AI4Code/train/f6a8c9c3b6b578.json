{"cell_type":{"e97605e5":"code","133055bf":"code","91150b89":"code","345e06a0":"code","7da34b10":"code","0c75c268":"code","6093b0aa":"code","8da549db":"code","e6aed7dc":"code","81eec754":"code","b1069fbb":"code","2005bf1a":"code","faa4c016":"code","fbb22df2":"code","a173c495":"code","e93c7ab9":"code","030ed144":"code","80f55421":"code","b38fdbb3":"code","6754b961":"markdown","c087d9a4":"markdown","27888816":"markdown","8574e27a":"markdown","9be36c90":"markdown","e5b8c436":"markdown","416f75d0":"markdown","a6685dea":"markdown","e972e858":"markdown","2d355611":"markdown","9e72308b":"markdown","ba67d946":"markdown","28dea351":"markdown","ee597ea9":"markdown","ef2d2caa":"markdown","f0861a36":"markdown"},"source":{"e97605e5":"def missing(df) : \n    missing_number = df.isnull().sum().sort_values(ascending = False)\n    missing_percent = (df.isnull().sum()\/df.isnull().count()).sort_values(ascending = False)\n    missing_values = pd.concat([missing_number, missing_percent], axis = 1, keys = ['Missing_number', 'Missing_percent'])\n    return missing_values \n\ndef categorize(df) :\n    Quantitive_features = df.select_dtypes([np.number]).columns\n    Discrete_features = [col for col in Quantitive_features if len(df[col].unique()) < 10]\n    Continuous_features = [col for col in Quantitive_features if col not in Discrete_features]\n    Categorical_features = df.select_dtypes(exclude = [np.number]).columns\n    print(\"Quantitive feautres : {} \\nDiscrete features : {} \\nContinous features : {} \\nCategorical features : {}\\n\"\n     .format(Quantitive_features, Discrete_features, Continuous_features, Categorical_features))\n    print(\"Number of quantitive feautres : {} \\nNumber of discrete features : {} \\nNumber of continous features : {} \\nNumber of categorical features : {}\"\n     .format(len(Quantitive_features), len(Discrete_features), len(Continuous_features), len(Categorical_features)))\n    \ndef unique(df) : \n    tb1 = pd.DataFrame({'Columns' : df.nunique().index.tolist(), 'Number_of_Unique' : df.nunique().values.tolist(),\n                       'Unique_values' : np.array(df.apply(lambda x : x.unique()).values)})\n    return tb1\n    \ndef data_glimpse(df) :   \n    \n    # Dataset preview \n    print(\"1. Dataset Preview \\n\")\n    display(df.head())\n    print(\"-------------------------------------------------------------------------------\\n\")\n    \n    # Columns imformation\n    print(\"2. Column Imformation \\n\")\n    print(\"Dataset have {} columns and {} rows\".format(df.shape[0], df.shape[1]))\n    print(\"\\n\") \n    print(\"Dataset Column name : {}\".format(df.columns.values))\n    print(\"\\n\")\n    categorize(df)\n    print(\"-------------------------------------------------------------------------------\\n\")\n    \n    # Basic imformation table \n    print(\"3. Missing data table : \\n\")\n    display(missing(df))\n    print(\"-------------------------------------------------------------------------------\\n\")\n    \n    print(\"4. Number of unique value by column : \\n\")\n    display(unique(df))\n    print(\"-------------------------------------------------------------------------------\\n\")\n    \n    print(\"5. Describe table : \\n\")\n    display(df.describe(include = 'all'))\n    print(\"-------------------------------------------------------------------------------\\n\")\n    \n    print(df.info())\n    print(\"-------------------------------------------------------------------------------\\n\")","133055bf":"# Data Analysis\nimport warnings \nwarnings.filterwarnings('ignore')\n    \nimport pandas as pd\nimport numpy as np\nimport os \nimport missingno as msno\n    \n# Data View\npd.options.display.max_columns = 200\n\n# Import Basic Visualization\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n    \n# Data Visualization : Plotly library \nimport cufflinks as cf\ncf.go_offline(connected = True )\n    \nimport plotly.express as px\n    \nimport plotly.graph_objects as go\nimport plotly.offline as pyo\npyo.init_notebook_mode()\n    \nfrom plotly.subplots import make_subplots \nimport plotly.figure_factory as ff ","91150b89":"df_raw = pd.read_csv(\"..\/input\/worldwide-covid-19\/worldwide covid data.csv\")\ndf_raw.head()","345e06a0":"country = pd.read_csv(\"..\/input\/latitude-and-longitude-for-every-country-and-state\/world_country_and_usa_states_latitude_and_longitude_values.csv\")\ncountry.head()","7da34b10":"data_glimpse(df_raw)","0c75c268":"df = df_raw[['Country', 'Total Cases\/1M population', 'Deaths\/1M population', 'Total Cases', 'Total Deaths', 'Population']]\ndf.head()","6093b0aa":"df.isnull().sum()","8da549db":"df[df['Total Deaths'].isnull() == True]","e6aed7dc":"df.fillna(0, inplace = True)\ndf.isnull().sum()","81eec754":"combine_con = country[['country_code', 'country', 'latitude', 'longitude']]\ncombine_con.head()","b1069fbb":"total = pd.merge(df, combine_con, left_on = 'Country', right_on = 'country')\ntotal.head()","2005bf1a":"total[['Country', 'Total Cases']].sort_values(by = 'Total Cases', ascending = False).head(10).Country","faa4c016":"total[['Country', 'Deaths\/1M population']].sort_values(by = 'Deaths\/1M population', ascending = False).head(10).Country","fbb22df2":"fig = go.Figure()\n\nfig.add_trace(go.Scatter(\n    x = np.log(total.Population), \n    y = np.log(total['Total Cases']),\n    marker = dict(size = np.log(total['Total Cases']),\n                  color = list(range(len(total))),\n                  colorscale = 'Viridis'),\n    text = total['country_code'],\n    mode = 'markers'))\n\nfig.update_layout(\n    {\n        \"title\": {\n            \"text\": \"<b>Scatterplot of population and total cases in logscale<\/b>\",\n            \"x\": 0.5,\n            \"y\": 0.9,\n            \"font\": {\n                \"size\": 15\n            }\n        },\n        \"xaxis\": {\n            \"title\": \"Population(logscale)\",\n            \"showticklabels\":True,\n            \"tickfont\": {\n                \"size\": 10                \n            }\n        },\n        \"yaxis\": {\n            \"title\": \"Total cases(logscale)\",\n            \"tickfont\": {\n                \"size\": 10                \n            }\n        },\n        \"template\":'plotly_white'\n    }\n)\n\nfig.show()","a173c495":"fig = go.Figure()\n\nfig.add_trace(go.Scatter(\n    x = np.log(total['Population']), \n    y = np.log(total['Total Deaths']+1), # Cause there is 0 value in Total Deaths\n    marker = dict(size = np.log(total['Total Deaths']+1),\n                  color = list(range(len(total))),\n                  colorscale = 'Viridis'),\n    mode = 'markers'))\n\nfig.update_layout(\n    {\n        \"title\": {\n            \"text\": \"<b>Scatterplot of Population and total deaths in logscale<\/b>\",\n            \"x\": 0.5,\n            \"y\": 0.9,\n            \"font\": {\n                \"size\": 15\n            }\n        },\n        \"xaxis\": {\n            \"title\": \"Population(logscale)\",\n            \"showticklabels\":True,\n            \"tickfont\": {\n                \"size\": 10                \n            }\n        },\n        \"yaxis\": {\n            \"title\": \"Total deaths(logscale)\",\n            \"tickfont\": {\n                \"size\": 10                \n            }\n        },\n        \"template\":'plotly_white'\n    }\n)\n\nfig.show()","e93c7ab9":"p1 = total.sort_values(by = 'Total Cases\/1M population', ascending = False).head(30)\np1.head()","030ed144":"colors = [px.colors.sequential.OrRd[-1]]*6 + [px.colors.sequential.OrRd[-3]]*6 + [px.colors.sequential.OrRd[4]]*6 + [px.colors.sequential.OrRd[2]]*6 + [px.colors.sequential.OrRd[0]]*6 \n\nfig = go.Figure()\n\nfig.add_trace(go.Scattergeo(\n    locationmode = 'ISO-3',\n    lon = p1['longitude'],\n    lat = p1['latitude'],\n    marker = dict(\n        size = p1['Total Cases\/1M population']\/5000,\n        color = colors,\n        cmax = max(p1['Total Cases\/1M population']),\n        cmin = min(p1['Total Cases\/1M population']),\n        colorbar = dict(\n            title = 'Colorbar'),\n    )\n))\n    \nfig.show()","80f55421":"p2 = total.sort_values(by = 'Deaths\/1M population', ascending = False)\np2.head()","b38fdbb3":"colors = [px.colors.sequential.OrRd[-1]]*6 + [px.colors.sequential.OrRd[-3]]*6 + [px.colors.sequential.OrRd[4]]*6 + [px.colors.sequential.OrRd[2]]*6 + [px.colors.sequential.OrRd[0]]*6 \n\nfig = go.Figure()\n\nfig.add_trace(go.Scattergeo(\n    locationmode = 'ISO-3',\n    lon = p2['longitude'],\n    lat = p2['latitude'],\n    marker = dict(\n        size = p2['Deaths\/1M population']\/100,\n        color = colors,\n        cmax = max(p2['Deaths\/1M population']),\n        cmin = min(p2['Deaths\/1M population']),\n        colorbar = dict(\n            title = 'Colorbar'),\n    )\n))\n    \nfig.show()","6754b961":"## Top30 geographic of case rate and critical rate by country","c087d9a4":"**Top 10 Critical country**","27888816":"We need column 'Country', 'Total Cases', 'Total Deaths', 'Population' in df_Raw for analysis. ","8574e27a":"# Data Preprocessing","9be36c90":"# EDA + Visualization","e5b8c436":"## Data importing","416f75d0":"## Library importing","a6685dea":"**Top 10 Total cases country**","e972e858":"# Data glimpse","2d355611":"## Combine long and lat together","9e72308b":"## Extract need feature","ba67d946":"# Analysis Preparation\n\n## Function importing","28dea351":"# <center> World Wide Covid Analysis\n    \n# Data Description\n## Datasource explaining\n\n    1. Datasets name : \"worldwide covid data.csv\"\n    2. Datasets soure : \n    3. Datasets feature table : \n\n| Feature | Column name | Data type | \n| :---: | :---: | :---: | \n| Categorical | Country | object64 | \n| Quantitive - Continuous | Total cases | int64 | \n| Quantitive - Continuous | Total Deaths | int64 | \n| Quantitive - Continuous | Total Recovered | int64 | \n| Quantitive - Continuous | Active Cases | int64 | \n| Quantitive - Continuous | Total Cases\/1M population | int64 | \n| Quantitive - Continuous | Deaths\/1M population | int64 | \n| Quantitive - Continuous | Total Tests | int64 | \n| Quantitive - Continuous | Test\/1M population | int64 | \n| Quantitive - Continuous | population | int64 |     ","ee597ea9":"It might be there is no deaths in that country.","ef2d2caa":"## Deal NaN Values","f0861a36":"## Scatterplot of case-population-country"}}