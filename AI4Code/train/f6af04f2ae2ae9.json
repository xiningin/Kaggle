{"cell_type":{"a244c2c5":"code","fe8e23ab":"code","c08fec47":"code","d5f50956":"code","5d27b796":"code","4bee9e38":"code","f537adda":"code","5fd887b8":"code","0861eb46":"code","79002c2d":"code","3f02f133":"code","de412e32":"code","d5b9f3d1":"code","0fa7c7cf":"code","29a7c274":"code","458fc65b":"code","2baa300c":"code","3d83a195":"code","d4572dff":"markdown","3a70711b":"markdown","15ffafcf":"markdown","6b10e8b5":"markdown","0b1a0d4d":"markdown"},"source":{"a244c2c5":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nprint(os.listdir(\"..\/input\"))","fe8e23ab":"header_name = ['Age', 'Workclass','fnlwgt', 'Education', 'Education-num', 'Marital-status', 'Occupation', 'Relationship', 'Race', 'Sex', 'Capital-gain', 'Capital-loss', 'Hours-per-week', 'Native-country']\ntrain_header = header_name + ['target']\n# \u662fcategorical \u7684\u6b04\u4f4d\u540d\u7a31\ncat_column = ['Workclass', 'Education', \n        'Marital-status', 'Sex', 'Occupation', 'Education-num',\n        'Relationship', 'Race', 'Native-country']\ntraining = pd.read_csv('..\/input\/train.csv', header=None,names=train_header)\ntesting = pd.read_csv('..\/input\/test.csv',header=None,names=header_name)\nprint(training.head())","c08fec47":"import seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","d5f50956":"from sklearn import preprocessing\ndef preprocess(training, testing):\n    y_train = training['target'].values\n    training = training.drop(['target'], axis=1)\n\n    for col in training.columns:\n        if col in cat_column:\n            label = preprocessing.LabelEncoder()\n            label.fit(training[col].values)\n            training[col] = label.transform(training[col].values)\n            testing[col] = label.transform(testing[col].values)\n    if 'target' in testing.columns:\n        y_test = testing['target'].values\n        testing = testing.drop(['target'], axis=1)\n        return training, y_train, testing, y_test\n    return training, y_train, testing","5d27b796":"viz_df,target, _ = preprocess(training, testing)\nviz_df['target'] = target\nhmap = viz_df.corr()\nplt.subplots(figsize=(12, 9))\nsns.heatmap(hmap, vmax=.9,annot=True,cmap=\"BrBG\", square=True);","4bee9e38":"fig, a = plt.subplots(1,1,figsize=(15,4))\nsns.countplot(training['Age'],hue=training['target'], ax=a)","f537adda":"fig, a = plt.subplots(1,1,figsize=(15,4))\nsns.countplot(training['Education'],hue=training['target'], ax=a)","5fd887b8":"fig, a = plt.subplots(1,1,figsize=(15,4))\nsns.countplot(training['Sex'],hue=training['target'], ax=a)","0861eb46":"from sklearn.model_selection import KFold\nfrom sklearn.metrics import f1_score, accuracy_score\nfrom xgboost import XGBClassifier","79002c2d":"training = pd.read_csv('..\/input\/train.csv', header=None,names=train_header)\ntesting = pd.read_csv('..\/input\/test.csv',header=None,names=header_name)\ntrain, target, X_validate = preprocess(training, testing)","3f02f133":"kf = KFold(n_splits=8, random_state=42)\nf1_scores = []\n\nfor train_idx, test_idx in kf.split(target):\n    X_train, X_test = train.iloc[train_idx], train.iloc[test_idx]\n    y_train, y_test = target[train_idx], target[test_idx]\n    clf = XGBClassifier(colsample_bylevel=0.6, \n            colsample_bytree= 0.9, gamma= 5, max_delta_step= 3, max_depth= 11,\n            min_child_weight= 5, n_estimators= 209, subsample= 0.9)\n    clf.fit(X_train, y_train)\n    y_pred = clf.predict(X_test)\n    f1_scores.append(f1_score(y_test, y_pred, average='weighted'))","de412e32":"print(\"F1 \u5e73\u5747: %f, \u6a19\u6e96\u5dee : %f\" % (np.mean(f1_scores), np.std(f1_scores)))","d5b9f3d1":"kf = KFold(n_splits=8, random_state=42)\nf1_scores = []\ntrain = train.drop(['fnlwgt'], axis=1)\nfor train_idx, test_idx in kf.split(target):\n    X_train, X_test = train.iloc[train_idx], train.iloc[test_idx]\n    y_train, y_test = target[train_idx], target[test_idx]\n    clf = XGBClassifier(colsample_bylevel=0.6, \n            colsample_bytree= 0.9, gamma= 5, max_delta_step= 3, max_depth= 11,\n            min_child_weight= 5, n_estimators= 209, subsample= 0.9)\n    clf.fit(X_train, y_train)\n    y_pred = clf.predict(X_test)\n    f1_scores.append(f1_score(y_test, y_pred, average='weighted'))","0fa7c7cf":"print(\"F1 \u5e73\u5747: %f, \u6a19\u6e96\u5dee : %f\" % (np.mean(f1_scores), np.std(f1_scores)))","29a7c274":"clf = XGBClassifier(colsample_bylevel=0.6, \n        colsample_bytree= 0.9, gamma= 5, max_delta_step= 3, max_depth= 11,\n        min_child_weight= 5, n_estimators= 209, subsample= 0.9)\nclf.fit(train, target)\nX_validate = X_validate.drop(['fnlwgt'], axis=1)\ny_validate = clf.predict(X_validate)","458fc65b":"submission = pd.read_csv('..\/input\/sub.csv')\nprint(submission.head())","2baa300c":"submission['ans'] = y_validate.flatten().astype(int)","3d83a195":"submission.to_csv('submission.csv', index=False)","d4572dff":"\u6240\u4ee5\u8981\u8cfa\u9322\uff0c\u5e74\u9f61\u3001\u6559\u80b2\u3001\u6027\u5225\u3001\u8cc7\u7522\u589e\u76ca\u3001\u6bcf\u661f\u671f\u5de5\u4f5c\u6642\u9593\u5f88\u91cd\u8981\uff1f","3a70711b":"\u597d\u50cf\u4e0d\u932f\uff0c\u4f46\u662f\u53bb\u6389\u5947\u602a\u7684 feature fnlwgt \u6703\u4e0d\u6703\u5f71\u97ff\u7d50\u679c\u5462\uff1f","15ffafcf":"\u4f3c\u4e4e\u66f4\u597d\u4e86~~~","6b10e8b5":"\u5e74\u85aa\u8d85\u904e 50k \u7684\u4eba\u591a\u6578\u572844\u6b72\u523054\u6b72\u6bd4\u4f8b\u8f03\u9ad8","0b1a0d4d":"\u770b\u4f86\u9ad8\u4e2d\u7562\u696d\u4eba\u6578\u4f54\u6700\u591a\uff0c\u6b64\u5916\u6709\u78a9\u58eb\u5b78\u4f4d\u3001\u535a\u58eb\u5b78\u4f4d\u4f60\u7684\u5e74\u85aa\u8d85\u904e 50k \u6a5f\u7387\u8d85\u904e\u4e00\u534a"}}