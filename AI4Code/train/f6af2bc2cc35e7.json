{"cell_type":{"815abe21":"code","54b64ba9":"code","3888d373":"code","cea3040f":"code","6bc12b9c":"code","b33addb2":"code","9277f52d":"code","46ebd570":"code","5bf713d2":"code","19202a6f":"code","cd3d26fa":"code","af95c517":"code","4d038494":"code","1c7a27b2":"code","a331aac7":"code","6518d419":"code","6863f608":"code","e1548956":"markdown","2ea0efc6":"markdown","f344353a":"markdown","ca6041dc":"markdown","805d0fb2":"markdown","722cebc7":"markdown","4d5fd3ae":"markdown","9fdb9d93":"markdown","2e97d908":"markdown","0f7f701f":"markdown"},"source":{"815abe21":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \nfrom sklearn.model_selection import train_test_split, GridSearchCV, StratifiedKFold, cross_val_score\nfrom sklearn.model_selection import cross_validate\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, roc_curve, precision_recall_curve, auc, make_scorer, confusion_matrix, f1_score, fbeta_score\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.ensemble import BaggingClassifier, RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn import svm\nfrom xgboost import XGBClassifier\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nplt.style.use('seaborn-notebook')\nfrom matplotlib.ticker import StrMethodFormatter\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler, LabelBinarizer\n","54b64ba9":"train_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntrain_data.head()","3888d373":"test_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_data.head()","cea3040f":"# Check the Null and Duplicates in the training dataset\nprint('\\nNull Values in Training \\n{}'.format(train_data.isnull().sum()))\nprint('\\nNull Values in Testing \\n{}'.format(test_data.isnull().sum()))\n\nprint('\\nDuplicated values in train {}'.format(train_data.duplicated().sum()))\nprint('Duplicated values in test {}'.format(test_data.duplicated().sum()))","6bc12b9c":"#Data Preprocessing\n#Fill the missing value in 'Age' with random integer between (mean-standard deviation, mean+standard deviation)\ndata = [train_data, test_data]\nfor dataset in data:\n    meandata = train_data[\"Age\"].mean()\n    std = test_data[\"Age\"].std()\n    is_null = dataset[\"Age\"].isnull().sum()\n    rand_age = np.random.randint(meandata - std, meandata + std, size = is_null)\n    age_slice = dataset[\"Age\"].copy()\n    age_slice[np.isnan(age_slice)] = rand_age\n    dataset[\"Age\"] = age_slice\n    dataset[\"Age\"] = train_data[\"Age\"].astype(int)\n\n#Fill the missing value in 'Embarked' with mode number, which is 'S'.\ndef embarked_impute(train_data, test_data):\n    for i in [train_data, test_data]:\n        i['Embarked'] = i['Embarked'].fillna('S')\n    return train_data, test_data\ntrain_data, test_data = embarked_impute(train_data, test_data)\n\n\n#Fill the missing value in 'Fare' with the mean value of 'Fare' from the training set\ntest_data['Fare'].fillna(train_data['Fare'].mean(), inplace = True)","b33addb2":"#Group the missing value in \"Cabin\" as Group\"Z\" and see the ticket fare of Group Z\ntrain_data['Cabin'] = pd.Series(['Z' if pd.isnull(ii) else ii[0] for ii in train_data['Cabin']])\ntest_data['Cabin'] = pd.Series(['Z' if pd.isnull(ii) else ii[0] for ii in test_data['Cabin']])\n\nplt.figure(figsize=(12,5))\nplt.title('Box Plot of Ticket Fare by Group')\nsns.boxplot(x='Cabin',y='Fare',data=train_data, palette='Set1')\nplt.tight_layout()","9277f52d":"print('Mean Fare of Cabin A {}'.format(train_data[train_data['Cabin']=='A']['Fare'].mean()))\nprint('Mean Fare of Cabin B {}'.format(train_data[train_data['Cabin']=='B']['Fare'].mean()))\nprint('Mean Fare of Cabin C {}'.format(train_data[train_data['Cabin']=='C']['Fare'].mean()))\nprint('Mean Fare of Cabin D {}'.format(train_data[train_data['Cabin']=='D']['Fare'].mean()))\nprint('Mean Fare of Cabin E {}'.format(train_data[train_data['Cabin']=='E']['Fare'].mean()))\nprint('Mean Fare of Cabin G {}'.format(train_data[train_data['Cabin']=='G']['Fare'].mean()))\nprint('Mean Fare of Cabin F {}'.format(train_data[train_data['Cabin']=='F']['Fare'].mean()))\nprint('Mean Fare of Cabin T {}'.format(train_data[train_data['Cabin']=='T']['Fare'].mean()))","46ebd570":"#Fill the missing value in \"Cabin\"(Group Z) to its most likely group using ticket fare\ndef fill_cabin(cabin_fare):\n    \n    cabin = cabin_fare[0]\n    fare = cabin_fare[1]\n    \n    if cabin=='Z':\n        if (fare >= 113.5):\n            return 'B'\n        if ((fare < 113.5) and (fare > 100)):\n            return 'C'\n        if ((fare < 100) and (fare > 57)):\n            return 'D'\n        if ((fare < 57) and (fare > 46)):\n            return 'E'\n        if ((fare < 46) and (fare > 18)):\n            return 'F'\n        if ((fare < 18) and (fare > 13)):\n            return 'G'\n        \n        else:\n            return 'Z'\n    else:\n        return cabin\n      \ntrain_data['Cabin'] = train_data[['Cabin', 'Fare']].apply(fill_cabin, axis=1)\ntest_data['Cabin'] = test_data[['Cabin', 'Fare']].apply(fill_cabin, axis=1)\n\nplt.figure(figsize=(12,5))\nplt.title('Box Plot of Ticket Fare by Cabin Group')\nsns.boxplot(x='Cabin',y='Fare',data=train_data, palette='Set1')\nplt.tight_layout()","5bf713d2":"def family_feature(SibSp_Parch):\n    if (SibSp_Parch[0]+SibSp_Parch[1])==0:\n        return 1\n    else:\n        return 0\n \ntrain_data['Alone'] = train_data[['SibSp','Parch']].apply(family_feature, axis=1)\ntrain_data['Family'] = 1 + train_data['SibSp'] + train_data['Parch']\n\ntest_data['Alone'] = test_data[['SibSp','Parch']].apply(family_feature, axis=1)\ntest_data['Family'] = 1 + test_data['SibSp'] + test_data['Parch']","19202a6f":"# Now we can visualize the survival distribution of every feature in our dataset.\nfig, axx = plt.subplots(2, 3, figsize=(20,15))\naxx[0,0].set_title('Survive\/Not Survive')\nsns.countplot(x='Survived', data=train_data, ax=axx[0,0])\naxx[0,1].set_title('Survivors by Sex')\nsns.countplot(x='Survived', hue='Sex', data=train_data, ax=axx[0,1])\naxx[0,2].set_title('Survivors by Pclass')\nsns.countplot(x='Survived', hue='Pclass', data=train_data, ax=axx[0,2])\naxx[1,0].set_title('Accompanied survivors')\nsns.countplot(x='Survived', hue='Alone', data=train_data, ax=axx[1,0])\naxx[1,1].set_title('Accompanied survivors')\nsns.countplot(x='Family', hue='Survived', data=train_data, ax=axx[1,1])\naxx[1,2].set_title('Alone members by Pclass')\nsns.countplot(x='Pclass', hue='Alone', data=train_data, ax=axx[1,2])\nplt.tight_layout()","cd3d26fa":"categories = {\"female\": 1, \"male\": 0}\ntrain_data['Sex']= train_data['Sex'].map(categories)\ntest_data['Sex']= test_data['Sex'].map(categories)\n\ncategories = {\"S\": 1, \"C\": 2, \"Q\": 3}\ntrain_data['Embarked']= train_data['Embarked'].map(categories)\ntest_data['Embarked']= test_data['Embarked'].map(categories)\n\ncategories = train_data.Cabin.unique()\ntrain_data['Cabin'] = train_data.Cabin.astype(\"category\").cat.codes\ntest_data['Cabin'] = test_data.Cabin.astype(\"category\").cat.codes\n\nplt.figure(figsize=(10,5))\nsns.heatmap(train_data.corr(), annot=True)\nsns.color_palette(\"hls\", 8)\nplt.tight_layout()","af95c517":"#Drop the features that are not correlated with survive\/not survive, such as ticket number and passenger name.\ntrain_data = train_data.drop(['Name','Ticket','PassengerId'], axis=1)\ntest_data = test_data.drop(['Name','Ticket','PassengerId'], axis=1)","4d038494":"\nfrom sklearn.ensemble import RandomForestClassifier\n\nrf = RandomForestClassifier(criterion='gini', \n                             n_estimators=50,\n                             min_samples_split=10,\n                             min_samples_leaf=1,\n                             max_features='auto',\n                             oob_score=True,\n                             random_state=1,\n                             n_jobs=-1)\nrf.fit(train_data.iloc[:, 1:], train_data.iloc[:, 0])\nY_pred=rf.predict(test_data)\nprint(round(rf.oob_score_*100),2)","1c7a27b2":"from sklearn.preprocessing import MinMaxScaler\n\n# Dropping label\nLABEL = 'Survived'\ny = train_data[LABEL]\ntrain_data = train_data.drop(LABEL, axis=1)  # Dropping label to normalize\n\nscaler = MinMaxScaler()\nscaled_train = scaler.fit_transform(train_data)\nscaled_test = scaler.transform(test_data)\n\nscaled_train = pd.DataFrame(scaled_train, columns=train_data.columns, index=train_data.index)\nscaled_test = pd.DataFrame(scaled_test, columns=test_data.columns, index=test_data.index)\nfeature_imp = pd.Series(rf.feature_importances_, index=scaled_train.columns).sort_values(ascending=False)\n\n#print(\"Accuracy: {}\".format(metrics.accuracy_score(y_test, y_pred)))\n\nplt.figure(figsize=(10,6))\nsns.barplot(x=feature_imp, y=feature_imp.index)\n# Add labels to your graph\nplt.xlabel('Feature Importance Score')\nplt.ylabel('Features')\nplt.title(\"Visualizing Important Features\")\nplt.tight_layout()","a331aac7":"from sklearn import metrics\nfrom sklearn.metrics import classification_report\n# Removing less important features\nnew_train = scaled_train.drop(['Alone','Parch','Embarked'], axis=1)\nnew_test = scaled_test.drop(['Alone','Parch','Embarked'], axis=1)\n\nX_train, X_test, y_train, y_test = train_test_split(new_train, y, test_size=0.2)\nclf = RandomForestClassifier(criterion='gini', \n                             n_estimators=100,\n                             min_samples_split=10,\n                             min_samples_leaf=1,\n                             max_features='auto',\n                             oob_score=True,\n                             random_state=1,\n                             n_jobs=-1)\n\n\n#Train the model using the training sets y_pred=clf.predict(X_test)\nclf.fit(X_train, y_train)\n\ny_pred = clf.predict(X_test)\n\nprint(\"   Accuracy: {}\".format(metrics.accuracy_score(y_test, y_pred)))\n\nprint(classification_report(y_test,y_pred))\n\nconf_matrix = confusion_matrix(y_test, y_pred)\n\nplt.figure(figsize=(8,5))\nsns.heatmap(conf_matrix, annot=True)\nplt.title('Confusion Matrix')\nplt.tight_layout()\n\nprediction = clf.predict(new_test)\n\ntest_data['Survival_Predictions'] = pd.Series(prediction)\ntest_data.head()","6518d419":"X_train, X_test, y_train, y_test = train_test_split(new_train, y, test_size=0.2)\nbf = RandomForestClassifier(criterion='entropy', \n                             n_estimators=400,\n                             min_samples_split=12,\n                             min_samples_leaf=1,\n                             max_features='auto',\n                             oob_score=True,\n                             random_state=1,\n                             n_jobs=-1)\n\n#Train the model using the training sets y_pred=clf.predict(X_test)\nbf.fit(X_train, y_train)\n\ny_pred = bf.predict(X_test)\n\nprint(\"   Accuracy: {}\".format(metrics.accuracy_score(y_test, y_pred)))\n\n\nprediction = bf.predict(new_test)\n","6863f608":"test = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\") \nmy_submission = pd.DataFrame({'PassengerId': test.PassengerId, 'Survived': prediction})\n\nmy_submission.to_csv('Angie_submission2.csv', index=False)","e1548956":"## 1. Import modules, the Titanic training data and testing data","2ea0efc6":"## 2. Data Preprocessing and Cleaning","f344353a":"## 3. Feature Engineering","ca6041dc":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.ensemble import RandomForestClassifier\n\naf = RandomForestClassifier(max_features='auto', oob_score=True, random_state=1, n_jobs=-1)\n\nparam_grid = { \"criterion\" : [\"gini\", \"entropy\"], \"min_samples_leaf\" : [1, 5, 10], \"min_samples_split\" : [2, 4, 10, 12, 16], \"n_estimators\": [50, 100, 400, 700, 1000]}\n\ngs = GridSearchCV(estimator=af, param_grid=param_grid, scoring='accuracy', cv=3, n_jobs=-1)\n\ngs = gs.fit(X_train, y_train)\n\ncv_scores = cross_val_score(gs, X_train, y_train)\nprint(cv_scores)\n#find best parameters\nprint('Logistic Regression parameters: ',gs.best_params_)","805d0fb2":"Our machine learning model deals better with numbers, not categories. Therefore, we will map those categorical features into numerical features. We will define 1 for female, and 0 for male. For 'Embark', we will define 1 for 'S', 2 for 'C', and 3 for 'Q'.","722cebc7":"### From above boxplot, we observe the mean ticket fare of the cabin group \"Z\" is very low. Outliers in group \"Z\" is obvious, so we will presume the outliers are those in group B or C. we will fill the missing value in \"cabin\" (Group Z) based on its ticket fare. In order to classify the missing value group (Group Z) to a most likely group, we need to find the mean ticket fare of every cabin group.","4d5fd3ae":"## 4. Data Modeling and Evaluation - Regression Forest","9fdb9d93":"We can create a new feature named 'family', which combines the 'Sib\/Sp'(Sibling\/Spouse) feature and the 'Parch'(Parents\/Children) feature together, to see if the passenger is boarding alone or with family. ","2e97d908":"### Now we can see almost all of the missing value in 'Cabin' has been filled based on its ticket fare. We don't have any null value now.","0f7f701f":"test = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\nmy_submission = pd.DataFrame({'PassengerId': test.PassengerId, 'Survived': test_data.Survival_Predictions})\n# you could use any filename. We choose submission here\nmy_submission.to_csv('Angie_submission2.csv', index=False)\n"}}