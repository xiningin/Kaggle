{"cell_type":{"a99a214d":"code","dbae8019":"code","9244b088":"code","2c38e4fe":"code","e8ef454a":"code","f7d36ed8":"code","374dbea1":"code","31848d87":"code","185881f9":"code","36d0c543":"code","2aefc735":"code","6271630b":"code","5776fe61":"code","e1267547":"code","af7d5bef":"code","88f6ad21":"code","042e327a":"code","da8ade6d":"code","c1467789":"markdown","63f2ca27":"markdown","e6fbc999":"markdown","2ad14b79":"markdown","2ebfb739":"markdown","0c32a04c":"markdown","1247e665":"markdown","84d889b2":"markdown","9888f0a4":"markdown","f5dacb86":"markdown","e3e26047":"markdown","2a72839b":"markdown","1ef60ac6":"markdown","e385c683":"markdown","b3a4738e":"markdown","8b561f1c":"markdown","f5857ee1":"markdown"},"source":{"a99a214d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","dbae8019":"dict = {'color' : ['black', 'white', 'black', 'white', 'black',\n                      'white', 'black', 'white', 'black', 'white'],\n            'size' : ['S','M','L','M','L','S','S','XL','XL','M'],\n        'date':pd.date_range('1\/1\/2019',periods=10, freq='W' ),\n            'feature_1': np.random.randn(10),\n            'feature_2': np.random.normal(0.5, 2, 10)}\narray=[['A','B','B','B','C','A','B','A','C','C'],['JP','CN','US','US','US','CN','CN','CA','JP','CA']]\n                                                 \nindex = pd.MultiIndex.from_arrays(array, names=['class', 'country'])\ndf = pd.DataFrame(dict,index=index)\ndf","9244b088":"group_1 = df.groupby('size')\nprint(list(group_1))","2c38e4fe":"group_1.sum().add_prefix('sum_')","e8ef454a":"group_1.get_group('M')","f7d36ed8":"group_2 = df.groupby(['size', 'color'])\nprint(list(group_2))","374dbea1":"print(group_1.size())\nprint(group_2.size())","31848d87":"def get_letter_type(letter):\n    if 'feature' in letter:\n        return 'feature'\n    else:\n        return 'other'\nprint(list(df.groupby(get_letter_type, axis=1)))","185881f9":"print(list(df.groupby(level='class')))","36d0c543":"group_3=df.groupby(['country','color'])\nfor name, group in group_3:\n    print(name)\n    print(group)","2aefc735":"group_3.agg({'feature_1' : np.min,'feature_2' : np.mean})","6271630b":"data_range = lambda x: x.max() - x.min()\ndf.groupby('size').transform(data_range)","5776fe61":"df.iloc[1, 3:5] = np.NaN\nf = lambda x: x.fillna(x.mean())\ndf_trans = group_1.transform(f)\ndf_trans","e1267547":"df.groupby('color').rolling(3).feature_1.mean()","af7d5bef":"group_2.expanding().sum()","88f6ad21":"df.groupby('class').filter(lambda x: len(x) > 3)","042e327a":"df.groupby('class')['feature_1'].apply(lambda x: x.describe())","da8ade6d":"def f(group):\n    return pd.DataFrame({'original' : group,'demeaned' : group - group.mean()})\ndf.groupby('class')['feature_1'].apply(f)","c1467789":"\u5f53GroupBy\u5bf9\u8c61\u88ab\u5efa\u7acb\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u7528agg\u51fd\u6570\u5bf9\u5206\u7ec4\u540e\u7684\u6570\u636e\u8fdb\u884c\u8ba1\u7b97\u3002\u4e0b\u4f8b\u4e2d\u8ba1\u7b97\u4e86group_3\u4e2dfeature_1\u7684\u6700\u5927\u503c\u548cfeature_2\u7684\u5747\u503c\u3002","63f2ca27":"\u5206\u7ec4\u5bf9\u8c61\u9664\u4e86\u5217\u6807\u7b7e\u4e4b\u5916\uff0c\u8fd8\u53ef\u4ee5\u662f\u7d22\u5f15\uff0c\u5176\u4e2d\u7528\u4e0d\u540c\u7684level\u503c\u6765\u533a\u5206\u591a\u91cd\u7d22\u5f15\u3002","e6fbc999":"\u5bf9GroupBy\u5bf9\u8c61\u8fdb\u884c\u5206\u7ec4\u8fd0\u7b97\uff0c\u5982sum(),\u975e\u6570\u503c\u6570\u636e\u5219\u4e0d\u8fdb\u884c\u5206\u7ec4\u8fd0\u7b97\u3002\u5c06\u8ba1\u7b97\u5f97\u5230\u7684\u6570\u636e\u6dfb\u52a0\u8868\u5934\u524d\u7f00\u540e\u8f93\u51fa\n     ","2ad14b79":"DataFrame\u53ef\u4ee5\u6839\u636e\u5217\u6807\u7b7e\u548c\u7d22\u5f15\u4e24\u8005\u540c\u65f6\u5206\u7ec4,\u5206\u7ec4\u540e\u53ef\u4ee5\u5728\u4e0d\u540c\u7ec4\u95f4\u8fdb\u884c\u8fed\u4ee3","2ebfb739":"\u5c06dataframe\u6839\u636esize\u548ccolor\u4e24\u4e2a\u5217\u6807\u7b7e\u8fdb\u884c\u591a\u91cd\u5206\u7ec4\uff0c\u5f97\u5230group_2","0c32a04c":"\u6839\u636esize\u8fdb\u884c\u5206\u7ec4\u540e\u83b7\u5f97\u6240\u6709size\u503c\u4e3aM\u7684\u884c\u5411\u91cf","1247e665":"# \u5f15\u7528\u5305","84d889b2":"\u63a5\u4e0b\u6765\u6211\u4eec\u4f7f\u7528transform\u51fd\u6570\u5bf9groupby\u5bf9\u8c61\u8fdb\u884c\u53d8\u6362\uff0ctransform\u7684\u8ba1\u7b97\u7ed3\u679c\u548c\u539f\u59cb\u6570\u636e\u7684\u5f62\u72b6\u4fdd\u6301\u4e00\u81f4\u3002\u4e0b\u4f8b\u4e2d\u6211\u4eec\u81ea\u5b9a\u4e49\u4e86\u51fd\u6570data_range\u6765\u83b7\u5f97\u6839\u636esize\u5206\u7ec4\u540e\u5404\u4e2a\u503c\u7684\u8303\u56f4\u3002","9888f0a4":"\u6839\u636e\u5217\u6807\u7b7ecolor\u8fdb\u884c\u5206\u7ec4\u540e\u5bf9\u5217\u6807\u7b7efeature_1\u4f7f\u7528rolling\u65b9\u6cd5,\u6eda\u52a8\u8ba1\u7b97\u6700\u65b0\u7684\u4e09\u4e2a\u503c\u7684\u5e73\u5747\u3002","f5dacb86":"# \u6570\u636e\u5bfc\u5165","e3e26047":"\u6b64\u5916\u8fd8\u53ef\u4ee5\u5229\u7528\u51fd\u6570\u8fdb\u884c\u5206\u7ec4\u3002\u6ce8\u610f\u5230groupby\u51fd\u6570\u4e2daxis=1\u5bf9\u5217\u8fdb\u884c\u5206\u7ec4\uff0caxis=0\u5bf9\u884c\u8fdb\u884c\u5206\u7ec4","2a72839b":"# \u5206\u7ec4\n\u5c06dataframe\u6839\u636esize\u8fdb\u884c\u5206\u7ec4\uff0c\u5f97\u5230group_1\u3002\u5728\u8fd9\u91cc\u6211\u4eec\u5c06GroupBy\u5bf9\u8c61\u8f6c\u6362list\u540e\u8f93\u51fa\u3002","1ef60ac6":"\u6709\u4e9b\u5bf9\u4e8e\u5206\u7ec4\u6570\u636e\u7684\u5904\u7406\u7528transform\u548caggregate\u90fd\u5f88\u96be\u5b8c\u6210\uff0c\u8fd9\u65f6\u5019\u6211\u4eec\u9700\u8981\u4f7f\u7528apply\u51fd\u6570\uff0capply\u76f8\u8f83\u4e24\u8005\u66f4\u52a0\u7075\u6d3b\u3002\u5728apply\u4e2d\u53ef\u4f7f\u7528\u7528\u81ea\u5b9a\u4e49\u51fd\u6570\u3002","e385c683":"expanding\u51fd\u6570\u4f1a\u5bf9\u7ed9\u5b9a\u7684\u64cd\u4f5c\uff08\u5982\u4e0b\u4f8b\u4e2d\u7684sum\uff09\u8fdb\u884c\u53e0\u52a0","b3a4738e":"\u5bf9\u5206\u7ec4\u540e\u7684\u6570\u636esize\u51fd\u6570\u83b7\u5f97\u7ec4\u522b\u4e2a\u6570","8b561f1c":"\u53e6\u5916\u6211\u4eec\u8fd8\u5e38\u5e38\u901a\u8fc7transform\u51fd\u6570\u5c06\u7f3a\u5931\u503c\u66ff\u6362\u4e3a\u7ec4\u95f4\u5e73\u5747\u503c\u3002","f5857ee1":"filter\u51fd\u6570\u7684\u53c2\u6570\u662f\u4f5c\u7528\u4e8e\u6574\u4e2a\u7ec4\u4e14\u8fd4\u56de\u503c\u4e3aTrue\u6216False\u7684\u51fd\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528filter\u51fd\u6570\u5f97\u5230\u5206\u7ec4\u540e\u7684\u67d0\u4e9b\u7279\u5b9a\u7ec4\u522b,\u5982\u4e0b\u4f8b\u4e2d\u5143\u7d20\u4e2a\u6570\u5927\u4e8e\u4e09\u7684\u5206\u7ec4\u3002"}}