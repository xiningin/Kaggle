{"cell_type":{"d2e247b9":"code","6061decd":"code","092e9b26":"code","b89b9637":"code","26688e81":"code","217adaa0":"code","4f626de6":"code","c7ca4a52":"code","30d82cdc":"code","f21c4ddc":"code","faf50f04":"markdown"},"source":{"d2e247b9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6061decd":"import os\nos.chdir('\/kaggle\/input\/tomatoleaf\/tomato\/')\nos.listdir()","092e9b26":"import warnings\nwarnings.filterwarnings('ignore')\n\nimport numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nfrom PIL import Image\n\nfrom tensorflow import keras\nfrom tensorflow.keras.applications import ResNet152V2\nfrom tensorflow.keras.layers import GlobalAveragePooling2D, Dense\nfrom tensorflow.keras.models import Model","b89b9637":"# Forming datasets\n\ndatagen = keras.preprocessing.image.ImageDataGenerator(rescale=1\/255, validation_split=0.3)\n# Training and validation dataset\ntrain = datagen.flow_from_directory('.\/train', seed=123, subset='training')\nval = datagen.flow_from_directory('.\/train', seed=123, subset='validation')\n\n# Test dataset for evaluation\ndatagen2 = keras.preprocessing.image.ImageDataGenerator(rescale=1\/255)\n\ntest = datagen2.flow_from_directory('.\/val')","26688e81":"# Training data visualization\n\nclasses = os.listdir('.\/train')\n\nplt.figure(figsize=(25,10))\n\nfor i in enumerate(classes):\n    pic = os.listdir('.\/train\/'+i[1])[0]\n    image = Image.open('.\/train\/'+i[1]+'\/'+pic)\n    image = np.asarray(image)\n    plt.subplot(2,5,i[0]+1)\n    plt.title('{0} \/ Shape = {1}'.format(i[1], image.shape))\n    plt.imshow(image)\nplt.show()","217adaa0":"# Function to initialize model (ResNet152V2)\n\ndef get_model():\n    \n    base_model = ResNet152V2(input_shape=(256,256,3), include_top=False)\n    \n    for layers in base_model.layers[:140]:\n        layers.trainable = False\n    for layers in base_model.layers[140:]:\n        layers.trainable = True\n        \n    \n    x = base_model.output\n    x = GlobalAveragePooling2D()(x)\n    x = Dense(1000, activation='relu')(x)\n    pred = Dense(10, activation='softmax')(x)\n    \n    model = Model(inputs=base_model.input, outputs=pred)\n    \n    return model","4f626de6":"# Model initialization\nmodel = get_model()\nmodel.summary()","c7ca4a52":"# Model training\nmodel.compile(loss='categorical_crossentropy', optimizer='sgd', metrics='accuracy')\nmodel.fit(train, batch_size=80, epochs=5, validation_data=val)","30d82cdc":"model.evaluate(test)","f21c4ddc":"# Prediction and visualizations\n\nclasses = os.listdir('.\/val')\n\nplt.figure(figsize=(18,28))\n\nfor i in enumerate(classes):\n    pic = os.listdir('.\/val\/'+i[1])\n    pic = pic[np.random.randint(len(pic)-1)]\n    image = Image.open('.\/val\/'+i[1]+'\/'+pic)\n    image = np.asarray(image)\n    \n    pred = np.argmax(model.predict(image.reshape(-1,256,256,3)\/255))\n    for j in list(enumerate(list(test.class_indices.keys()))):\n        if pred == j[0]:\n            prediction =  j[1]\n    \n    plt.subplot(5,2,i[0]+1)\n    plt.title('Actual: {0} \/ Predicted: {1}'.format(i[1], prediction))\n    plt.imshow(image)\nplt.show()","faf50f04":"We are getting around 96.7% accuracy."}}