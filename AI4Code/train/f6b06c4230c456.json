{"cell_type":{"650a41fe":"code","b362fc80":"code","72b7d67f":"code","78a31525":"code","c00d2b08":"code","0a31d30a":"code","608317c7":"code","089d2ee8":"code","b82eb293":"code","4397e75d":"code","034482f7":"code","29eb0ac9":"code","6f42e4e5":"code","9bc84908":"code","9915dd65":"code","8a08d717":"code","56399dfb":"code","318de7fd":"code","b04114a6":"code","939dc5f0":"markdown","a609c6a4":"markdown","abf09d80":"markdown","31605d55":"markdown","4a08a606":"markdown","e53c326e":"markdown","10577372":"markdown","188159e8":"markdown","c39dd7da":"markdown","5c5cd025":"markdown","e4bc6d5f":"markdown","56e90152":"markdown","7522982d":"markdown","278732ea":"markdown","1b158fdb":"markdown","94d8a0be":"markdown","a55f2b02":"markdown","2067056b":"markdown","ef368651":"markdown","6a16fd33":"markdown","837e876b":"markdown","4f199bc3":"markdown","f3e02d13":"markdown","c7b6697e":"markdown","f9a4977c":"markdown","d6ae3097":"markdown","2ac7343d":"markdown","f5568dba":"markdown","b9c14836":"markdown","3b0107e8":"markdown","94c72ea7":"markdown","00e32f4b":"markdown","49bdd3ec":"markdown","303cfc88":"markdown","3d3c7a21":"markdown","71158e78":"markdown","dc9a4097":"markdown","dd4de284":"markdown","68e08174":"markdown","bee0da59":"markdown","f0189a2b":"markdown","cf442a29":"markdown","6627c45c":"markdown","bbcb6d5d":"markdown"},"source":{"650a41fe":"''' \n    Creating a Class named \"Car\"\n    \n    Class Varibales = 'feul_type' ----- Same across all car class object\n    Object Variable = 'model','color','mileage'--Different for different car objects\n    Object Methods\/Attributes = 'description','max_speed'\n\n'''\nclass Car:\n    \n    'Common for all the objects of Car Class'\n    fuel_type = 'Petrol'       ## Class Attribute\n    \n    def __init__(self, model,color,mileage): ## the default method which will be called \n                                             #autmatically when the object of this calls is called.\n        \n        self.model_name = model ## object attribute\n        self.color = color     ## object attribute\n        self.mileage = mileage ## object attribute\n        print(\"In init method\")\n        \n    \n    def description(self):\n        print(\"The {} gives the mileage of {} kmpl\".format(self.model_name,self.mileage))\n        \n    \n    def max_speed(self,speed):\n        return(\"The {} runs at the maximum speed of {}kmphr\".format(self.model_name,speed))\n        ","b362fc80":"## Create an object of Class Car\nobj1 = Car(\"Audi A6\",\"Red\",17.01)\n\n## Call the methods and variables defined for this object from Car class.\nobj1.description()\nprint(obj1.max_speed(233))\nprint(obj1.color)\n\n## Call the Car Class variable.\nprint(Car.fuel_type)\n\n## Create another object of Class car.\nobj2 = Car(\"Audi A8\",\"Black\",19)\nobj2.max_speed(800)","72b7d67f":"print(\"Address of obj1\",id(obj1))\nprint(\"Address of obj2\",id(obj2))","78a31525":"print(type(obj1))  ## User-defined Class. So \"obj1\" is the object of \"Car\" Class.\na = 5\nprint(type(a))     ## In-built Class. So \"a\" is the object of \"int\" Class.","c00d2b08":"class Car:\n    \n    'Common for all the objects of Car Class'\n    fuel_type = 'Petrol'## Class Attribute\n    \n    def __init__(self, model,color,mileage): \n        \n        self.model_name = model ## object attribute\n        self.color = color     ## object attribute\n        self.mileage = mileage ## object attribute\n        print(\"In init method\")     ","0a31d30a":"class Car:\n    \n    'Common for all the objects of Car Class'\n    fuel_type = 'Petrol'## Class Attribute\n    \n    def __init__(self, model,color,mileage): ## the default method which will be called autmatically \n                                             ## when the object of this calls is called.\n        \n        self.model_name = model     ## object attribute\n        self.color = color     ## object attribute\n        self.mileage = mileage ## object attribute\n        print(\"In init method\")\n        \n    \n    def description(self):\n        print(\"The {} gives the mileage of {} kmpl\".format(self.model_name,self.mileage))\n        \n    \n    def max_speed(self,speed):\n        return(\"The {} runs at the maximum speed of {}kmphr\".format(self.model_name,speed))\n\n    \nobj1 = Car(\"Audi A8\",\"Black\",19) \nprint(Car.max_speed(obj1,500)) ### Calling the \"max_speed\" method with obj1 as a parameter which in \n                               ### default case is done by the self keyword.\n\n\nprint(obj1.max_speed(800)) ## Calling the method with single argument","608317c7":"class Car:\n    \n    'Common for all the objects of Car Class'\n    fuel_type = 'Petrol'## Class Attribute\n    \n    def __init__(self, model,color,mileage): ## the default method which will be called autmatically \n                                             ## when the object of this calls is called.\n        \n        self.model_name = model ## object attribute\n        self.color = color     ## object attribute\n        self.mileage = mileage ## object attribute\n        \n    \n    def description(self):\n        print(\"The {} gives the mileage of {} kmpl\".format(self.model_name,self.mileage))\n        \n    \n    def max_speed(self,speed):\n        return(\"The {} runs at the maximum speed of {}kmphr\".format(self.model_name,speed))\n\n    def compare(self,other):\n        if self.mileage == other.mileage:\n            return True\n        else:\n            False\n\ncar1 = Car(\"Audi A8\",\"Blue\",18)\ncar2 = Car(\"Audi A6\",\"Red\",19)\n\nif car1.compare(car2):\n    print(\"Same mileage\")\nelse:\n    print(\"Difference in mileage\")","089d2ee8":"class Car:\n    \n    'Common for all the objects of Car Class'\n    fuel_type = 'Petrol'## Class Attribute\n    \n    def __init__(self, model,color,mileage): ## the default method which will be called autmatically \n                                             ## when the object of this calls is called.\n        \n        self.model_name = model ## object attribute\n        self.color = color     ## object attribute\n        self.mileage = mileage ## object attribute\n\n    def get_mileage(self): ### ------> The Accessor Method as it is feteching the values\n        return(self.mileage)\n    \n    def set_mileage(self,value): ### -----> The Mutators method as it is modifying the existing Value\n        self.mileage = value\n        return(self.mileage)\n    \n    @classmethod  ## ---> We must indicate the \"decorator\" here which is indicating it is a Class method\n    def info(cls): ## ---> This is a Class Method example\n        \n        return(cls.fuel_type)\n    \n    @staticmethod   ## ----> We must use the decorator to define that it is a \"static method\"\n    def about_car():\n        print(\"This is all about Audi Cars\")\n    \ncar1 = Car(\"Audi A6\",\"Red\",18)\n\nprint(car1.get_mileage())\nprint(car1.set_mileage(19))\n\nCar.about_car() ## ---> This is how we call the \"Static methods\" using the class names\n\nprint(Car.info()) ## --> This is how we call the \"Call methods\"","b82eb293":"class Car:  ## Parent class\n\n    def __init__(self, name, mileage):\n        self.name = name \n        self.mileage = mileage \n\n    def description(self):                \n        return f\"The {self.name} car gives the mileage of {self.mileage}km\/l\"\n\nclass BMW(Car): ## Child Class\n    pass\n\nclass Audi(Car):     ## Child class\n    def audi_desc(self):\n        return \"This is the description method of class Audi.\"","4397e75d":"obj1 = BMW(\"BMW 7-series\",39.53)\nprint(obj1.description())\n\nobj2 = Audi(\"Audi A8 L\",14)\nprint(obj2.description())\nprint(obj2.audi_desc())","034482f7":"class car:\n\n    def __init__(self, name, mileage):\n        self._name = name  #protected variable\n        self.mileage = mileage \n\n    def description(self):                \n        return f\"The {self._name} car gives the mileage of {self.mileage}km\/l\"","29eb0ac9":"obj = car(\"BMW 7-series\",39.53)\n\n#accessing protected variable via class method \nprint(obj.description())\n\n#accessing protected variable directly from outside\nprint(obj._name)\nprint(obj.mileage)","6f42e4e5":"class Car:\n\n    def __init__(self, name, mileage):\n        self.__name = name              #private variable        \n        self.mileage = mileage \n\n    def description(self):                \n        return f\"The {self.__name} car gives the mileage of {self.mileage}km\/l\"\n","9bc84908":"obj = Car(\"BMW 7-series\",39.53)\n\n#accessing private variable via class method \nprint(obj.description())\n\n#accessing private variable directly from outside\nprint(obj.mileage)\nprint(obj.__name)","9915dd65":"class Car:\n\n    def __init__(self, name, mileage):\n        self.__name = name  #private variable        \n        self.mileage = mileage \n\n    def description(self):                \n        return f\"The {self.__name} car gives the mileage of {self.mileage}km\/l\"\n","8a08d717":"obj = Car(\"BMW 7-series\",39.53)\n\n#accessing private variable via class method \nprint(obj.description())\n\n#accessing private variable directly from outside\nprint(obj.mileage)\nprint(obj._Car__name)      #mangled name\n","56399dfb":"class Audi:\n    def description(self):\n        print(\"This the description function of class AUDI.\")\n\nclass BMW:\n    def description(self):\n        print(\"This the description function of class BMW.\")","318de7fd":"audi = Audi()\nbmw = BMW()\nfor car in (audi,bmw):\n    car.description()","b04114a6":"from abc import ABC, abstractmethod \n  \nclass Polygon(ABC): \n  \n    # abstract method \n    def noofsides(self): \n        pass\n\nclass Triangle(Polygon): \n  \n    # overriding abstract method \n    def noofsides(self): \n        print(\"I have 3 sides\") \n\n        \nclass Pentagon(Polygon): \n  \n    # overriding abstract method \n    def noofsides(self): \n        print(\"I have 5 sides\") \n        \nclass Hexagon(Polygon): \n  \n    # overriding abstract method \n    def noofsides(self): \n        print(\"I have 6 sides\") \n        \n        \nclass Quadrilateral(Polygon): \n  \n    # overriding abstract method \n    def noofsides(self): \n        print(\"I have 4 sides\") \n  \n# Driver code \nR = Triangle() \nR.noofsides() \n  \nK = Quadrilateral() \nK.noofsides() \n  \nR = Pentagon() \nR.noofsides() \n  \nK = Hexagon() \nK.noofsides() ","939dc5f0":"<h2 align = \"center\"><u> 2.Inheritance <\/u><\/h2>","a609c6a4":"<h2 align = \"center\"><u> 1.Classes and Objects <\/u><\/h2>","abf09d80":"<h4><u>Note:<\/u> The objects\/instances are stored in heap memory with different memory address.\nEvery time you create an object it is allocated to new space in the heap memory.<\/h4>\n<h4>Size of the object ?<\/h4>\nIt depends on the number of variables and size of each variable.\n<h4>Who allocates size to object ?<\/h4>\nConstructor\n<h4>See below example<\/h4>","31605d55":"<h4>Note:<\/h4> When the function is called using the object audi then the function of class Audi is called and when it is called using the object bmw then the function of class BMW is called.\n","4a08a606":"<h2 align = \"center\"><u>3. Encapsulation <\/u><\/h2>","e53c326e":"<h1 align = \"center\"><u>Object-Oriented Programming in Python<\/u><\/h1>","10577372":"<b><u>Note:<\/u>\n\"Car\" is an User-defined Class. So \"obj1\" is the object of \"Car\" Class.  \n\"Int\" is an In-built Class. So \"a\" is the object of \"int\" Class.<\/b>","188159e8":"This is a Greek word. If we break the term Polymorphism, we get \u201cpoly\u201d-many and \u201cmorph\u201d-forms. So Polymorphism means having many forms. In OOP it refers to the functions having the same names but carrying different functionalities.","c39dd7da":"<font color='blue'><h2 align = 'center' style = 'background:LightGray'><u> Quick Navigation <\/h2><\/u><\/font>\n\n#### [1.Classes and Objects](#1)\n#### [2.The __init__ method](#2)\n#### [3. Constructors, Self and Comparing objects](#2)\n#### [4. Types of Variables](#4)\n#### [5. Types of Methods](#5)\n#### [6. Inheritance](#6)\n#### [7. Encapsulation](#7)\n#### [8. Ploymorphism](#8)\n#### [9. Abstract Class](#9)","5c5cd025":"<h3><u>Types of Method<\/u><\/h3>\n\n<b>1. Instance Method<\/b>\n\n a) Accessor Method\n b) Mutator method\n \n<b>2. Class Method<\/b>\n\n<b>3. Static Method<\/b>\n\n<b><u>Instance Method<\/u><\/b>: The methods which takes objects as the arguments are called as Instance methods.In short those methods which uses instance variables are referred as Instance method.\n\nInstance methds are further classified into Accessor and Mutator methods.\n\n<b>Accessor Methods:<\/b> If we are using the method only to fetech the valuesof the instance variables then it is called as Accessor method.\n\n<b>Mutator Methods:<\/b> if we are using the method to modify the existing value of the insance variable then it is referred as Mutator Methods.\n\n<b><u>Class Methods:<\/u><\/b> Method which uses Class variables are referred as Class methods.\n\n<b><u> Static Method: <\/u><\/b> Those methods which has nothing to do with the class variables or the instance variables then we can use this Static Method.","e4bc6d5f":"<h3> How to create the Class objects and How to call the methods and variables of Class.<\/h3>","56e90152":"![polymorphism.png](attachment:polymorphism.png)\nImage Credit: Polymorphism[11]","7522982d":"<b>Object-Oriented programming(OOP)<\/b> is all about creating \"<b>Objects<\/b>\", which can contain variables and functions:<b>Variables<\/b> in the form of fields(called <b>Attributes<\/b> or properties) and <b>Functions<\/b>, in the form of procedures(called as <b>Methods<\/b>).\n\nSo in short these variables are often referred as properties of the objects and functions are referred to as the behavior of the objects.\n\nAnother example- If we consider a dog as an object then its properties would be- his color, his breed, his name, his weight, etc. And his behavior\/function would be walking, barking, playing, etc.\n\nFor instance, an object could represent a person with <b>properties<\/b> like a name, age, and address and behaviors such as walking, talking, breathing, and running. Or it could represent an email with properties like a recipient list, subject, and body and <b>behaviors(or methods)<\/b> like adding attachments and sending.\n\nPut another way, object-oriented programming is an approach for modeling concrete, real-world things, like cars, as well as relations between things, like companies and employees, students and teachers, and so on. OOP models real-world entities as software objects that have some data associated with them and can perform certain functions.\n\n<b><u>Building blocks of OOP<\/u><\/b>:\n\n-> <b>Class<\/b>\n-> <b>Objects<\/b>\n-> <b>Methods<\/b>\n-> <b>Attributes<\/b>","278732ea":"<h2 align = \"center\"><u>5. Abstract Class in Python <\/u><\/h2>","1b158fdb":"<h1 align = \"center\"><font color = \"red\">If you like this notebook,Please upvote as it motivates me in my upcoming kernels<\/font><\/h1>","94d8a0be":"<h3>NOTE:<\/h3> \n\nWhen we tried accessing the private variable using the description() method, we encountered no error. But when we tried accessing the private variable directly outside the class, then Python gave us an error stating: car object has no attribute \u2018__name\u2019.\n\nYou can still access this attribute directly using its mangled name. Name mangling is a mechanism we use for accessing the class members from outside. The Python interpreter rewrites any identifier with \u201c__var\u201d as \u201c_ClassName__var\u201d. And using this you can access the class member from outside as well.\n","a55f2b02":"An <b>abstract<\/b> class can be considered as a blueprint for other classes. It allows you to create a set of methods that must be created within any child classes built from the abstract class. A class which contains one or more abstract methods is called an abstract class. An abstract method is a method that has a declaration but does not have an implementation. While we are designing large functional units we use an abstract class. When we want to provide a common interface for different implementations of a component, we use an abstract class.","2067056b":"![inheritance.png](attachment:inheritance.png)\nImage Creadits: Inheritance[9]","ef368651":"<h4> Syntax<\/h4>\n\nclass parent_class:\n\nbody of parent class\n\nclass child_class( parent_class):\n\nbody of child class","6a16fd33":"Basically, it hides the data from the access of outsiders. Such as if an organization wants to protect an object\/information from unwanted access by clients or any unauthorized person then encapsulation is the way to ensure this.\n\nYou can declare the methods or the attributes protected by using a single underscore ( _ ) before their names. Such as- self._name or def _method( ); Both of these lines tell that the attribute and method are protected and should not be used outside the access of the class and sub-classes but can be accessed by class methods and objects.\n\nThough Python uses \u2018 _ \u2018 just as a coding convention, it tells that you should use these attributes\/methods within the scope of the class. But you can still access the variables and methods which are defined as protected, as usual.\n\nNow for actually preventing the access of attributes\/methods from outside the scope of a class, you can use \u201cprivate members\u201c. In order to declare the attributes\/method as private members, use double underscore ( __ ) in the prefix. Such as \u2013 self.__name or def __method(); Both of these lines tell that the attribute and method are private and access is not possible from outside the class.","837e876b":"Say you have a <b>class<\/b> called <b>Car<\/b> and an instance of this class called <b>obj1<\/b>. When you call a method of this object as <b>obj1.method(arg1, arg2)<\/b>, this is automatically converted by Python into <b>Car.method(obj1, arg1, arg2)<\/b> - this is all the special self is about.\n\nThis also means that if you have a method which takes no arguments, then you still have to have one argument - the self.","4f199bc3":"<h3>References:<\/h3>\n\n#### [1.https:\/\/youtu.be\/qiSCMNBIP2g](#1)\n#### [2.https:\/\/python.swaroopch.com\/oop.html](#2)\n#### [3. https:\/\/www.analyticsvidhya.com\/blog\/2020\/09\/object-oriented-programming\/](#2)\n#### [4. https:\/\/medium.com\/@manjuladube\/encapsulation-abstraction-35999b0a3911](#4)\n#### [5. https:\/\/www.geeksforgeeks.org\/polymorphism-in-python\/](#5)\n#### [6. https:\/\/www.faceprep.in\/python\/abstraction-in-python\/](#6)\n#### [7. https:\/\/www.geeksforgeeks.org\/abstract-classes-in-python\/](#7)\n#### [8. http:\/\/www.danamuise.net\/blog\/2016\/1\/12\/v12kquly0pw63trxg7bg1kvr8qwguj](#8)\n#### [9. https:\/\/www.geeksforgeeks.org\/inheritance-in-c\/](#9)\n#### [10.http:\/\/online.infomatics.info\/Course\/Core-Python\/Encapsulation](#10)\n#### [11. https:\/\/javatutorial.net\/java-polymorphism-example](#11)","f3e02d13":"The job of the class constructor is to assign the values to the data members of the class when an object of the class is created.There can be various properties of a car such as its name, color, model, brand name, engine power, weight, price, etc. \n\nThe properties of the car or any other object must be inside a method that we call __init__( ). This __init__() method is also known as the constructor method. We call a constructor method whenever an object of the class is constructed.\n\nNow let\u2019s talk about the parameter of the __init__() method. So, the first parameter of this method has to be self. Then only will the rest of the parameters come.\n\nThe two statements inside the constructor method are \u2013\n\n<b>self.model_name = model<\/b>\n\n<b>self.color = color<\/b>\n\n<b>self.mileage = milegage<\/b>\n\nThis will create new attributes namely model_name,color and mileage and then assign the value of the respective parameters to them. \n\nThe \u201cself\u201d keyword represents the instance of the class. By using the \u201cself\u201d keyword we can access the attributes and methods of the class. It is useful in method definitions and in variable initialization. The \u201cself\u201d is explicitly used every time we define a method.\n\nNote: You can create attributes outside of this __init__() method also. But those attributes will be universal to the whole class and you will have to assign the value to them.\n\nSuppose all the cars in your showroom has fuel_type \"Petrol\" and instead of specifying it again and again you can fix the value of fuel_type as \"Petrol\" by creating an attribute outside the __init__().","c7b6697e":"<h4>Notice how we accessed the protected variable without any error. It is clear that access to the variable is still public. Let us see how encapsulation works-<\/h4>","f9a4977c":"<h4>How Abstract Base classes work :<\/h4>\n\nBy default, Python does not provide abstract classes. Python comes with a module which provides the base for defining <b>Abstract Base classes(ABC)<\/b> and that module name is ABC. ABC works by decorating methods of the base class as abstract and then registering concrete classes as implementations of the abstract base. A method becomes abstract when decorated with the <b>keyword @abstractmethod.<\/b>","d6ae3097":"<h3>Comparing the objets of a class<\/h3>","2ac7343d":"<h3>How to Define a Class<\/h3>","f5568dba":"<h4>Note: For comparing 2 objects use \"compare\" method compare(who is calling,whom to compare)<\/h4>","b9c14836":"<h4>Why use Abstract Base Classes :<\/h4>\n\nBy defining an abstract base class, you can define a common Application Program Interface(API) for a set of subclasses. This capability is especially useful in situations where a third-party is going to provide implementations, such as with plugins, but can also help you when working in a large team or with a large code-base where keeping all classes in your mind is difficult or not possible.","3b0107e8":"<h4>Key Points to Remember:<\/h4>\n\nWe have created two child classes namely \u201cBMW\u201d and \u201cAudi\u201d who have inherited the methods and properties of the parent class \u201cCar\u201d.  We have provided no additional features and methods in the class BMW. Whereas one additional method inside the class Audi.\n\nNotice how the instance method description() of the parent class is accessible by the objects of child classes with the help of obj1.description() and obj2.description(). And also the separate method of class Audi is also accessible using obj2.audi_desc().","94c72ea7":"<b>Class methods<\/b> have only one specific difference from ordinary functions - they must have an extra first name that has to be added to the beginning of the parameter list, but you do not give a value for this parameter when you call the method, Python will provide it. This particular variable refers to the object itself, and by convention, it is given the name <b>self<\/b>.","00e32f4b":"![encapsulation.png](attachment:encapsulation.png)\nImage Credit: Encapsulation[10]","49bdd3ec":"<h3> User-defined Vs In-built type of Class objects.<\/h3>","303cfc88":"<b>Encapsulation<\/b> is one of the fundamental concepts in object-oriented programming (OOP). It describes the idea of wrapping data and the methods that work on data within one unit. This puts restrictions on accessing variables and methods directly and can prevent the accidental modification of data. To prevent accidental change, an object\u2019s variable can only be changed by an object\u2019s method. Those types of variables are known as <b>private variable<\/b>. ","3d3c7a21":"<h4>A class is an example of encapsulation as it encapsulates all the data that is member functions, variables, etc.<\/h4>\n ","71158e78":"![objects_class.png](attachment:objects_class.png)\n    Image Credits : Object-oriented programming [8]","dc9a4097":"<h2 align = \"center\"><u>4. Polymorphism <\/u><\/h2>","dd4de284":"<h3> Understanding the \"self\" keyword<\/h3>","68e08174":"<h4>Note that the mangling rule\u2019s design mostly avoids accidents. But it is still possible to access or modify a variable that is considered private. This can even be useful in special circumstances, such as in the debugger.<\/h4>","bee0da59":"<h3><u>About Class and Objects in Simple terms<\/u> ---- <\/h3>\n\nA Class is a collection of objects.\n\n<b>Classes Vs Objects:<\/b> -> Classes are used to create user-defined data structures.Classes define functions called <b>Methods<\/b>, which identify the behaviors and actions that an object created from the class can perform with its variables.\n\nA class is a blueprint or design for an object.An instance(object) that is built from a class and contains real data.\n\nThe object of class Car Class is not a blue-print anymore.It's an actual car with a model name like \"Audi R8\", color is \"red\".  ","f0189a2b":"<h3> Class Constructor<\/h3>","cf442a29":"<b>Inheritance<\/b> is the procedure in which one class inherits the attributes and methods of another class.  The class whose properties and methods are inherited is known as Parent class. And the class that inherits the properties from the parent class is the Child class.","6627c45c":"![oops.jpg](attachment:oops.jpg)","bbcb6d5d":"<h3> Types of Variables<\/h3>\n\n<h4>1. Instance Variable<\/h4>\n<h4>2. Class Variable(static Variable)<\/h4>"}}