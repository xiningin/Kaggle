{"cell_type":{"8e344097":"code","a9ed9ea3":"code","79d66cc0":"code","d73b72d7":"code","3c2f05e0":"code","bccbd10a":"code","e6cd3163":"code","402f6226":"code","56372b25":"code","4afb255d":"code","af7d580e":"code","2de133ef":"code","1d4566e2":"code","7ef98f7b":"code","ca5ff6be":"markdown","aa6da33e":"markdown","1352dbc9":"markdown","f11b3a3d":"markdown","b83db7f9":"markdown","11877287":"markdown","402a7b30":"markdown","fa841fbf":"markdown","e270ac4e":"markdown","8cf5f6a3":"markdown"},"source":{"8e344097":"from IPython.display import clear_output\n!pip3 install -U lazypredict\n\nclear_output()","a9ed9ea3":"!pip3 install -U pandas==1.2.3 #Upgrading pandas\nimport numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt \nimport lazypredict\nfrom lazypredict import Supervised\nfrom lazypredict.Supervised import LazyClassifier\n\n\nplt.style.use('fivethirtyeight')\nplt.rcParams[\"figure.figsize\"] = (20,5)\nclear_output()","79d66cc0":"import pandas as pd \nfrom sklearn.model_selection import train_test_split\nimport datetime\n\ntrain = pd.read_csv(\"..\/input\/tabular-playground-series-nov-2021\/train.csv\" )\ntest = pd.read_csv(\"..\/input\/tabular-playground-series-nov-2021\/test.csv\")","d73b72d7":"X = train.drop(['id','target'], axis=1)\ny = train['target']","3c2f05e0":"#Spliting into training and validation set\nfrom sklearn.model_selection import train_test_split\nX_train, X_valid, y_train, y_valid = train_test_split(X,y,test_size = 0.20,random_state =42)","bccbd10a":"del X,y,train,test","e6cd3163":"num_models = 29 #Total number of model is 29 for classification models\nselected_num_models = 22\nreg_idx = [i for i in range(selected_num_models)]\nnoregs_idx = [4,9,9,9,13,20,20] # Removing 7 models from 29 models. Some of these models are time consuming whereas other require lot of ram and some getting error\nregs_name =[]\nregs = []\nfor i in range(num_models):\n    regs_name.append(lazypredict.Supervised.CLASSIFIERS[i][0])\n    regs.append(lazypredict.Supervised.CLASSIFIERS[i][1])\n\nfor i in noregs_idx:\n    del regs_name[i]\n    del regs[i]","402f6226":"print(\"ALL 22 AVAILABLE CLASSIFICATION MODELS:\")\nfor i in range(selected_num_models):\n    print(i+1 , regs_name[i])","56372b25":"results = pd.DataFrame()\nfor i in range(selected_num_models):\n    print(i,regs_name[i])\n    reg = LazyClassifier(verbose=0, \n                    ignore_warnings=False,\n                    custom_metric=None,\n                    classifiers = [regs[i]])\n    models, predictions = reg.fit(X_train, X_valid, y_train, y_valid)\n    models.index = [regs_name[i]]\n    results = results.append(models)\n    print(results)\nclear_output()","4afb255d":"print(results)","af7d580e":"plt.plot(reg_idx , results[\"ROC AUC\"],label = \"ROC AUC\" ,marker='o')\nplt.xlabel(\"Model ID\")\nplt.ylabel(\"ROC AUC\")\nplt.title(\"ROC AUC Comparison of 22 Different Models\")\nplt.legend()\nplt.show()","2de133ef":"plt.plot(reg_idx , results[\"Time Taken\"],label = \"Time Taken\" , color = 'r')\nplt.xlabel(\"Model ID\")\nplt.ylabel(\"Time Taken\")\nplt.title(\"TIME TAKEN for 22 Different Models\")\nplt.legend()\nplt.show()","1d4566e2":"results = results.sort_values(by = \"ROC AUC\",ascending=False)","7ef98f7b":"results.head()","ca5ff6be":"# <h1 style=' border:0; color:#FFA500 '><center> If you find this notebook usefull support me with giving \u2b06\ufe0f!<\/left><\/h1> ","aa6da33e":"  ## <h1 style=' border:0; color:#F7B2B0 '><center>Comparing with 22 models<\/center><\/h1>","1352dbc9":"# <h1 style=' border:0; color:#FFA500 '><left>\ud83e\udd47 Top 5 Performing Models<\/left><\/h1> ","f11b3a3d":"# <h1 style=' border:0; color:#FFA500 '><left>Installing Lazy Predict \ud83d\ude34<\/left><\/h1> ","b83db7f9":"# <h1 style=' border:0; color:#FFA500 '><left>Training on 22 different models \ud83c\udfcb\ufe0f<\/left><\/h1> ","11877287":"# <h1 style=' border:0; color:#FFA500 '><left>Import Libraries \ud83d\udcda<\/left><\/h1> ","402a7b30":"# <h1 style=' border:0; color:#FFA500 '><left>Model Selection \ud83d\udcda<\/left><\/h1> ","fa841fbf":"# <h1 style=' border:0; color:#FFA500 '><left> Comparison Plots \ud83d\udcc8 <\/left><\/h1> ","e270ac4e":"# <h1 style=' border:0; color:#FFA500 '><left>Loading Data \ud83d\ude9a<\/left><\/h1> ","8cf5f6a3":"# <h1 style=' border:0; color:#FFA500 '><left>\u2714\ufe0f Results<\/left><\/h1> "}}