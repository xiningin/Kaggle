{"cell_type":{"fb969fd5":"code","737f2f85":"code","d5f2e1f3":"code","8373f2ab":"code","987eec2d":"code","8f0f131e":"code","8e4e3180":"code","953e2ea2":"code","492e518a":"code","f9869c41":"code","37b24185":"code","62f5e658":"code","567615c1":"code","2b404d04":"code","4a7dff63":"code","73626384":"code","f7d953b0":"code","08f93b1b":"code","a491052b":"code","8c261f6d":"code","00b0752f":"code","a8efc605":"code","f8b5bd4f":"code","42d8dc2e":"code","4020b9de":"code","20e72521":"code","da13eec5":"code","3f454514":"code","a9d5d62a":"code","29ffc6e1":"code","e688c940":"code","14c418cd":"code","810cf881":"code","9f622a04":"code","4b9bb950":"code","b55ef905":"markdown","ed93c310":"markdown","90eccf49":"markdown","d8bff1f4":"markdown","7b670ce0":"markdown"},"source":{"fb969fd5":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy.stats import norm, skew","737f2f85":"df=pd.read_csv('..\/input\/house-prices-data\/train.csv')\ntest=pd.read_csv('..\/input\/house-prices-data\/test.csv')\ny_train = df['SalePrice']\ntest_id = test['Id']\nall_data = pd.concat([df, test], axis=0, sort=False)\nall_data = all_data.drop(['Id', 'SalePrice'], axis=1)\n","d5f2e1f3":"df","8373f2ab":"len(df.columns)","987eec2d":" sns.distplot(df['SalePrice'])\n","8f0f131e":"df['SalePrice'] = np.log1p(df['SalePrice'])\nsns.distplot(df['SalePrice'], fit=norm);\n\n","8e4e3180":"cor = df.corr()\nf, ax = plt.subplots(figsize=(12, 9))\nsns.heatmap(cor, vmax=.8, square=True);\n","953e2ea2":"cor2 = df.corr()\nhighest_corr_features = cor2.index[abs(cor2[\"SalePrice\"])>0.5]\nplt.figure(figsize=(10,10))\ng = sns.heatmap(df[highest_corr_features].corr(),annot=True,cmap=\"magma\")\n","492e518a":"cols = ['SalePrice', 'OverallQual', 'GrLivArea', 'GarageCars', 'TotalBsmtSF', 'FullBath', 'YearBuilt']\nsns.pairplot(df[cols])","f9869c41":"cor2[\"SalePrice\"].sort_values(ascending=False)","37b24185":"Total = all_data.isnull().sum().sort_values(ascending=False)\npercent = (all_data.isnull().sum() \/ all_data.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([Total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data.head(25)\n","62f5e658":"all_data.drop((missing_data[missing_data['Total'] > 5]).index, axis=1, inplace=True)\nprint(all_data.isnull().sum().max())\n","567615c1":"total = all_data.isnull().sum().sort_values(ascending=False)\ntotal.head(20)","2b404d04":"numeric_missed = ['BsmtFinSF1',\n                  'BsmtFinSF2',\n                  'BsmtUnfSF',\n                  'TotalBsmtSF',\n                  'BsmtFullBath',\n                  'BsmtHalfBath',\n                  'GarageArea',\n                  'GarageCars']\n\nfor feature in numeric_missed:\n    all_data[feature] = all_data[feature].fillna(0)\n#Filling values not available by zero","4a7dff63":"all_data['Functional']","73626384":"categorical_missed = ['Exterior1st',\n                  'Exterior2nd',\n                  'SaleType',\n                  'MSZoning',\n                   'Electrical',\n                     'KitchenQual']\n\nfor feature in categorical_missed:\n    all_data[feature] = all_data[feature].fillna(all_data[feature].mode()[0])\n","f7d953b0":"\nall_data['Functional'] = all_data['Functional'].fillna('Typ')\n","08f93b1b":"all_data.drop(['Utilities'], axis=1, inplace=True)","a491052b":"all_data.isnull().sum().max() #just checking that there's no missing data missing...\n","8c261f6d":"numeric_feats = all_data.dtypes[all_data.dtypes != 'object'].index#data type is not object then store those data in numeric features\nskewed_feats = all_data[numeric_feats].apply(lambda x: skew(x)).sort_values(ascending=False)#checks if skew ,yes then sorts in descendin order\nhigh_skew = skewed_feats[abs(skewed_feats) > 0.5]#highly skewed classification\nhigh_skew\n","00b0752f":"type(high_skew)","a8efc605":"all_data['LowQualFinSF']","f8b5bd4f":"sns.distplot(all_data['LowQualFinSF'],fit=norm)","42d8dc2e":"for feature in high_skew.index:\n    all_data[feature] = np.log1p(all_data[feature])\n","4020b9de":"all_data['TotalSF'] = all_data['TotalBsmtSF'] + all_data['1stFlrSF'] + all_data['2ndFlrSF']\n","20e72521":"sns.displot(all_data['TotalSF'])","da13eec5":"all_data = pd.get_dummies(all_data)\nall_data.head()","3f454514":"x_train =all_data[:len(y_train)]\nx_test = all_data[len(y_train):]","a9d5d62a":"x_test.shape , x_train.shape","29ffc6e1":"from sklearn.metrics import make_scorer\nfrom sklearn.model_selection import KFold, cross_val_score\nfrom sklearn.metrics import mean_squared_error\nscorer = make_scorer(mean_squared_error,greater_is_better = False)\n\ndef rmse_CV_train(model):\n    kf = KFold(5,shuffle=True,random_state=123).get_n_splits(x_train.values)\n    rmse = np.sqrt(-cross_val_score(model, x_train, y_train,scoring =\"neg_mean_squared_error\",cv=kf))\n    return (rmse)\ndef rmse_CV_test(model):\n    kf = KFold(5,shuffle=True,random_state=123).get_n_splits(df.values)\n    rmse = np.sqrt(-cross_val_score(model, x_test, y_test,scoring =\"neg_mean_squared_error\",cv=kf))\n    return (rmse)\n","e688c940":"from xgboost.sklearn import XGBRegressor","14c418cd":"xgb1=XGBRegressor()","810cf881":"xgb1.fit(x_train, y_train)\ny_predict = xgb1.predict(x_test)\ny_predict","9f622a04":"sub = pd.DataFrame()\nsub['Id'] = test_id\nsub['SalePrice'] = y_predict\nsub.to_csv('mysubmission3.csv',index=False)","4b9bb950":"sub","b55ef905":"## Feature Engineering","ed93c310":"Utilities is not present here","90eccf49":"<a href=\"https:\/\/colab.research.google.com\/github\/a-ma-n\/ISTE_Task1\/blob\/main\/task_1_final.ipynb\" target=\"_parent\"><img src=\"https:\/\/colab.research.google.com\/assets\/colab-badge.svg\" alt=\"Open In Colab\"\/><\/a>","d8bff1f4":"## Categorical to numerical data","7b670ce0":"## Importing modules"}}