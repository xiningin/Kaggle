{"cell_type":{"34f3d4d7":"code","3061fcec":"code","9319bb99":"code","c68bd6ae":"code","12a28ed4":"code","a07eea3d":"code","e1a984f0":"code","9082e608":"code","d39204ce":"code","d8af32e3":"code","c83e1d1d":"code","5208f2ea":"code","23b099f7":"code","2960914b":"code","377626d0":"code","74803354":"code","f3626405":"code","c9c0da2d":"code","7eca36b1":"code","6b0ebcb9":"code","b92483d2":"code","e2a7d109":"code","214bfb65":"code","18ec71ba":"code","0aaedfb6":"markdown","6dbae786":"markdown","1777bd69":"markdown","f7b9b50f":"markdown","3152b7fc":"markdown","5b990f6e":"markdown","90fd378f":"markdown","d3add3e4":"markdown","2e40ea82":"markdown","22963f7b":"markdown","31118779":"markdown"},"source":{"34f3d4d7":"# \uc2dc\ud5d8\ud658\uacbd \uc138\ud305 (\ucf54\ub4dc \ubcc0\uacbd X)\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\n\ndef exam_data_load(df, target, id_name=\"\", null_name=\"\"):\n    if id_name == \"\":\n        df = df.reset_index().rename(columns={\"index\": \"id\"})\n        id_name = 'id'\n    else:\n        id_name = id_name\n    \n    if null_name != \"\":\n        df[df == null_name] = np.nan\n    \n    X_train, X_test = train_test_split(df, test_size=0.2, shuffle=True, random_state=2021)\n    y_train = X_train[[id_name, target]]\n    X_train = X_train.drop(columns=[id_name, target])\n    y_test = X_test[[id_name, target]]\n    X_test = X_test.drop(columns=[id_name, target])\n    return X_train, X_test, y_train, y_test \n    \ndf = pd.read_csv(\"..\/input\/adult-census-income\/adult.csv\")\nX_train, X_test, y_train, y_test = exam_data_load(df, target='income', null_name='?')\n\nX_train.shape, X_test.shape, y_train.shape, y_test.shape","3061fcec":"# \uc2dc\ud5d8\ud658\uacbd\uc5d0\uc11c\ub294 \uc544\ub798\uc640 \uac19\uc774 \uc81c\uacf5\ub428\n# import pandas as pd\n# X_test = pd.read_csv(\"data\/X_test.csv\")\n# X_train = pd.read_csv(\"data\/X_train.csv\")\n# y_train = pd.read_csv(\"data\/y_train.csv\")","9319bb99":"import pandas as pd\nimport numpy as np","c68bd6ae":"# \ub370\uc774\ud130 \ud06c\uae30 \ud655\uc778\nX_train.shape, X_test.shape, y_train.shape, y_test.shape","12a28ed4":"# \ub370\uc774\ud130 \ud655\uc778\nX_train.head()","a07eea3d":"# \ud0c0\uac9f \uc218 \ud655\uc778\ny_train['income'].value_counts()","e1a984f0":"# type\ud655\uc778\nX_train.info()","9082e608":"# \ud53c\ucc98 \uad6c\ubd84\n# Numeric features\nnumeric_features = [\n                    'age',\n                    'fnlwgt', \n                    'education.num',\n                    'capital.gain', \n                    'capital.loss', \n                    'hours.per.week',                     \n                   ]\n\n# Categorical features\ncat_features = [\n                 'workclass',              \n                 'education',            \n                 'marital.status', \n                 'occupation', \n                 'relationship', \n                 'race', \n                 'sex',\n                 'native.country'\n]","d39204ce":"X_train[numeric_features].describe()","d8af32e3":"X_train[cat_features].describe()","c83e1d1d":"X_train.isnull().sum()","5208f2ea":"X_test.isnull().sum()","23b099f7":"X_train['workclass'].value_counts()","2960914b":"X_train['occupation'].value_counts()","377626d0":"X_train['native.country'].value_counts()","74803354":"def data_fillna(df):\n    df['workclass'] = df['workclass'].fillna(df['workclass'].mode()[0])\n    df['occupation'] = df['occupation'].fillna(\"null\")\n    df['native.country'] = df[\"native.country\"].fillna(df['native.country'].mode()[0])\n    return df\n\nX_train = data_fillna(X_train)\nX_test = data_fillna(X_test)\n\nX_train.isnull().sum()","f3626405":"# \ub77c\ubca8\uc778\ucf54\ub529\nfrom sklearn.preprocessing import LabelEncoder\n\nall_df = pd.concat([X_train.assign(ind=\"train\"), X_test.assign(ind=\"test\")])\nle = LabelEncoder()\nall_df[cat_features] = all_df[cat_features].apply(le.fit_transform)\n\nX_train = all_df[all_df['ind'] == 'train']\nX_train = X_train.drop('ind',axis=1)\nX_train\n\nX_test = all_df[all_df['ind'] == 'test']\nX_test = X_test.drop('ind',axis=1)\nX_test","c9c0da2d":"# \uc2a4\ucf00\uc77c\ub9c1\nfrom sklearn.preprocessing import MinMaxScaler\n\nscaler = MinMaxScaler()\nX_train[numeric_features] = scaler.fit_transform(X_train[numeric_features])\nX_test[numeric_features] = scaler.transform(X_test[numeric_features])\nX_train","7eca36b1":"# target\uac12 \ubcc0\uacbd\ny = (y_train['income'] != '<=50K').astype(int)\ny[:5]","6b0ebcb9":"# \ud559\uc2b5\uc6a9 \ub370\uc774\ud130\uc640 \uac80\uc99d\uc6a9 \ub370\uc774\ud130\ub85c \uad6c\ubd84\nfrom sklearn.model_selection import train_test_split\nX_tr, X_val, y_tr, y_val = train_test_split(X_train, y, test_size=0.15, random_state=2021)\nX_tr.shape, X_val.shape, y_tr.shape, y_val.shape","b92483d2":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score\n\nmodel = DecisionTreeClassifier(max_depth=120,min_samples_leaf=120,random_state = 2022)\nmodel.fit(X_tr, y_tr)\npred = model.predict(X_val)\nprint('accuracy score:', (accuracy_score(y_val, pred)))","e2a7d109":"#help(DecisionTreeClassifier)\n#help(RandomForestClassifier)","214bfb65":"from sklearn.ensemble import RandomForestClassifier\n\nmodel = RandomForestClassifier(max_depth=70,n_estimators=200,random_state = 2022)\nmodel.fit(X_tr, y_tr)\npred = model.predict(X_val)\nprint('accuracy score:', (accuracy_score(y_val, pred)))","18ec71ba":"y_test = (y_test['income'] != '<=50K').astype(int)\npred = model.predict(X_test)\n\nfrom sklearn.metrics import accuracy_score\nprint('accuracy score:', (accuracy_score(y_test, pred)))","0aaedfb6":"## \ud53c\ucc98\uc5d4\uc9c0\ub2c8\uc5b4\ub9c1","6dbae786":"## \ucc44\uc810 (\uc218\ud5d8\uc790\ub294 \ud655\uc778 \ubd88\uac00)","1777bd69":"## EDA","f7b9b50f":"## \ub77c\uc774\ube0c\ub7ec\ub9ac \ubd88\ub7ec\uc624\uae30","3152b7fc":"## \uacb0\uce21\uce58 \ucc98\ub9ac","5b990f6e":"# \uc0ac\uc6a9\uc790 \ucf54\ub529","90fd378f":"## \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30(\uc0dd\ub7b5)","d3add3e4":"## \uac80\uc99d\uc6a9 \ub370\uc774\ud130 \ubd84\ub9ac","2e40ea82":"# \uc131\uc778 \uc778\uad6c\uc870\uc0ac \uc18c\ub4dd \uc608\uce21\n\n- age: \ub098\uc774\n- workclass: \uace0\uc6a9 \ud615\ud0dc\n- fnlwgt: \uc0ac\ub78c\uc758 \ub300\ud45c\uc131\uc744 \ub098\ud0c0\ub0b4\ub294 \uac00\uc911\uce58(final weight)\n- education: \uad50\uc721 \uc218\uc900\n- education.num: \uad50\uc721 \uc218\uc900 \uc218\uce58\n- marital.status: \uacb0\ud63c \uc0c1\ud0dc\n- occupation: \uc5c5\uc885\n- relationship: \uac00\uc871 \uad00\uacc4\n- race: \uc778\uc885\n- sex: \uc131\ubcc4\n- capital.gain: \uc591\ub3c4 \uc18c\ub4dd\n- capital.loss: \uc591\ub3c4 \uc190\uc2e4\n- hours.per.week: \uc8fc\ub2f9 \uadfc\ubb34 \uc2dc\uac04\n- native.country: \uad6d\uc801\n- income: \uc218\uc775 (\uc608\uce21\ud574\uc57c \ud558\ub294 \uac12)","22963f7b":"## \ubaa8\ub378 & \ud3c9\uac00","31118779":"- \uacb0\uce21\uce58\ub294 \ucd5c\ube48\uac12\uacfc \ucc28\uc774\uac00 \ud06c\uba74 \ucd5c\ube48\uac12\uc73c\ub85c \uac12\uc774 \ube44\uc2b7\ud558\uba74 \ubcc4\ub3c4\uc758 \uac12\uc73c\ub85c \ub300\uccb4\ud568"}}