{"cell_type":{"49e3ea68":"code","27ff6550":"code","c2a99963":"code","2565ad8e":"code","40a76428":"code","3c4aa3ec":"code","d2c54470":"code","fce29412":"code","5d376fd2":"code","ab13b0ef":"code","b7e386e2":"code","ce0205bd":"code","82e30682":"code","eba16253":"code","8f031bfd":"code","8e773445":"code","134314f8":"code","602a6718":"code","d4c0f2b5":"markdown","3ad6afa3":"markdown","6205110f":"markdown","89535eb9":"markdown","f9e4744f":"markdown"},"source":{"49e3ea68":"import pandas as pd\nimport numpy as np\nfrom pathlib import Path\n\nimport seaborn as sns\nfrom matplotlib import pyplot as plt","27ff6550":"ls ..\/input","c2a99963":"tr = pd.read_csv('..\/input\/train.csv').iloc[:, 2:]\nte = pd.read_csv('..\/input\/test.csv').iloc[:, 1:]","2565ad8e":"trte = pd.concat([tr, te])","40a76428":"trte_mean = trte.mean()\ntrte_std = trte.std()","3c4aa3ec":"np.round(np.random.normal(trte_mean[0], trte_std[0], 200000), 4)","d2c54470":"train = pd.concat([pd.Series(np.round(np.random.normal(trte_mean[i], trte_std[i], 200000), 4)) for i in range(200)], axis=1)\ntrain.columns = [\"var_\" + str(i) for i in range(200)]\n\ntest = pd.concat([pd.Series(np.round(np.random.normal(trte_mean[i], trte_std[i], 200000), 4)) for i in range(200)], axis=1)\ntest.columns = [\"var_\" + str(i) for i in range(200)]","fce29412":"trte.var_0.hist(bins=100); plt.title('original')","5d376fd2":"train.var_0.hist(bins=100); plt.title('simulated train var_0')","ab13b0ef":"test.var_0.hist(bins=100); plt.title('simulated test var_0')","b7e386e2":"trte.var_1.hist(bins=100); plt.title('original')","ce0205bd":"train.var_1.hist(bins=100); plt.title('simulated train var_1')","82e30682":"test.var_1.hist(bins=100); plt.title('simulated test var_1')","eba16253":"x = train['var_0'].value_counts()\nx = x[x==1].reset_index(drop=False)\nx.head()","8f031bfd":"candidates = []\nfor c in train.columns[1:-1]:\n    if(train[train[c] == x['index'][0]].shape[0]==1):\n        candidates.append(c)\nindexes = []\nfor c in candidates:\n    indexes.append(train[train[c] == x['index'][0]].index.values[0])\ny = train.iloc[indexes][candidates]\ny.head(y.shape[0])","8e773445":"candidates = []\nfor c in test.columns[1:-1]:\n    if(test[test[c] == x['index'][0]].shape[0]==1):\n        candidates.append(c)\nindexes = []\nfor c in candidates:\n    indexes.append(test[test[c] == x['index'][0]].index.values[0])\ny = test.iloc[indexes][candidates]\ny.head(y.shape[0])","134314f8":"candidates = []\nfor c in train.columns[1:-1]:\n    if(train[train[c] == x['index'][1]].shape[0]==1):\n        candidates.append(c)\nindexes = []\nfor c in candidates:\n    indexes.append(train[train[c] == x['index'][1]].index.values[0])\ny = train.iloc[indexes][candidates]\ny.head(y.shape[0])","602a6718":"candidates = []\nfor c in test.columns[1:-1]:\n    if(test[test[c] == x['index'][1]].shape[0]==1):\n        candidates.append(c)\nindexes = []\nfor c in candidates:\n    indexes.append(test[test[c] == x['index'][1]].index.values[0])\ny = test.iloc[indexes][candidates]\ny.head(y.shape[0])","d4c0f2b5":"## var_1","3ad6afa3":"## var_0","6205110f":"# Check distribution","89535eb9":"I can't say it's perfect, but lgtm","f9e4744f":"Fork from https:\/\/www.kaggle.com\/brandenkmurray\/weird-data-structure-random-data\n\nThis is same distribution version."}}