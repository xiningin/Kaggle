{"cell_type":{"c1aa6ac3":"code","c7c441bd":"code","73f3ea7e":"code","7f5e01f7":"code","ba4d5798":"code","21fc40e6":"code","c9e87104":"code","d721424d":"code","2883c52f":"code","4bacbb5d":"code","a297d85d":"code","3b346a15":"code","574f2b45":"code","c57f7e9e":"code","ce787f45":"code","dd5aea44":"code","13f46718":"markdown","9ac8c136":"markdown","799e90f4":"markdown","5996626c":"markdown","52373522":"markdown"},"source":{"c1aa6ac3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c7c441bd":"!pip install openpyxl ","73f3ea7e":"url = 'https:\/\/archive.ics.uci.edu\/ml\/machine-learning-databases\/00352\/Online%20Retail.xlsx'\nretail = pd.read_excel(url)","7f5e01f7":"retail_proc = retail.copy()\nretail_proc['is_cancelled'] = retail_proc['InvoiceNo'].astype(str).apply(lambda v: 1 if v.startswith('C') else 0)\nretail_proc = retail_proc[retail_proc['is_cancelled'] == 0]\nretail_proc = retail_proc[retail_proc['Quantity']>0]\nretail_proc = retail_proc[retail_proc['UnitPrice']>=0]","ba4d5798":"retail.shape, retail_proc.shape","21fc40e6":"retail.head()","c9e87104":"num_cols = ['UnitPrice', 'Quantity']\nretail_proc[num_cols].describe()","d721424d":"retail_proc[retail_proc['UnitPrice']<0]","2883c52f":"cat_cols = [\"InvoiceNo\", 'CustomerID', 'StockCode','Country']\nretail_proc[cat_cols].astype(object).describe()","4bacbb5d":"retail_proc[retail_proc['StockCode'] == '85123A'].iloc[0]['Description']","a297d85d":"retail_proc['InvoiceDate'] = pd.to_datetime(retail_proc['InvoiceDate'], format='%Y-%m-%d %H:%M:%S')\nretail_proc['InvoiceDate'].describe()","3b346a15":"from wordcloud import WordCloud\nimport matplotlib.pyplot as plt\nsentences = ['i love india', 'i love tea', 'i also love cricket']\nwc = WordCloud(background_color='white').generate(' '.join(sentences))\nplt.imshow(wc);","574f2b45":"sentences = retail_proc['Description'].dropna()\nplt.figure(figsize=(14,4))\nwc = WordCloud(background_color='white').generate(' '.join(sentences))\nplt.imshow(wc);","c57f7e9e":"retail_proc.isna().sum()","ce787f45":"retail_proc['Items_total'] = retail_proc['UnitPrice'] * retail_proc['Quantity']\ninvoice_data = retail_proc.groupby('InvoiceNo').agg(\n    invoice_amount=('Items_total', 'sum'),\n    CustomerID=('CustomerID', 'first'),\n    uniq_products=('StockCode', 'count'),\n    Country=('Country', 'first')\n).reset_index()\ninvoice_data.head()","dd5aea44":"customers_data = invoice_data[~invoice_data['CustomerID'].isnull()].groupby('CustomerID').agg(\n    country=('Country', 'first'),\n    total_sales=('invoice_amount', 'sum'),\n    avg_sales=('invoice_amount', 'mean'),\n    total_invoices=('InvoiceNo', 'nunique'),\n    avg_quantity_per_invoice=('uniq_products', 'mean')\n)\ncustomers_data","13f46718":"### On date columns","9ac8c136":"### On categorical columns","799e90f4":"## Customer Segmentation Analysis\n### Descriptive analysis on customer's data","5996626c":"### On Text Columns","52373522":"### Descriptive Analysis on Raw Data\n#### On numerical columns"}}