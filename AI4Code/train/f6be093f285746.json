{"cell_type":{"f36ebd1e":"code","5de7140f":"code","28c34591":"code","5c2d7595":"code","b81478c6":"code","0c044b3e":"code","f70fb56c":"code","16dc8abf":"code","20d824c8":"code","fac601bd":"code","7cbc6512":"code","5f72a4a0":"code","0e1dd1b7":"code","6334f269":"code","6803a8ac":"markdown","76907742":"markdown"},"source":{"f36ebd1e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import RandomForestRegressor\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5de7140f":"train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\n#train= pd.get_dummies(train)\ntest =pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\n#test= pd.get_dummies(test)\nreal =pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv')","28c34591":"test.columns","5c2d7595":"colunas = train.columns[:-1]\ncolunas = ['LotFrontage','LotArea','YrSold']","b81478c6":"x_train = train[colunas]","0c044b3e":"#x_train.isna().values.any()\n#x_train = x_train.dropna()\nx_train = x_train.fillna(0)\nx_train.isnull().sum()","f70fb56c":"y_train = train['SalePrice']\nx_test= test[colunas]\nprint(y_train.isnull().sum())\nprint(x_test.isnull().sum())\nx_test = x_test.fillna(0)\nprint(x_test.isnull().sum())\n","16dc8abf":"#one_hot_encoded_training_predictors = pd.get_dummies(x_train)\n#one_hot_encoded_test_predictors = pd.get_dummies(x_test)\n\n#final_train, final_test = one_hot_encoded_training_predictors.align(one_hot_encoded_test_predictors,\n#                                                                    join='left', \n#                                                                    axis=1)","20d824c8":"# https:\/\/stackabuse.com\/random-forest-algorithm-with-python-and-scikit-learn\/\nfrom sklearn import preprocessing\nsc = StandardScaler()\nX_train = sc.fit_transform(x_train)\nX_train\nX_test = sc.transform(x_test)","fac601bd":"regressor = RandomForestRegressor(n_estimators=20, random_state=0)\nregressor.fit(X_train, y_train)\ny_pred = regressor.predict(X_test)","7cbc6512":"y_pred","5f72a4a0":"import matplotlib.pyplot as plt\nplt.plot( y_pred)","0e1dd1b7":"resultado = pd.DataFrame([real['Id'], y_pred])\nresultado = resultado.T\nresultado.columns=['Id','SalePrice']\nresultado.to_csv('y.csv')","6334f269":"resultado","6803a8ac":"Cleaning data - verificando se existem dados NAN no dataframe, onde est\u00e3o. \u00c9 preciso localiza-los e exclui-los no x_train, mas tbm fazer isso nas mesmas linhas do y_train para a amostra ficar compat\u00edvel\n\n","76907742":"Lendo o conjunto de treino e o conjunto de teste e separando as colunas que iremos utilizar neste exemplo"}}