{"cell_type":{"a9184144":"code","b5c34a67":"code","fdac0d6e":"code","ba52804d":"code","1fab77cb":"code","997b3ea2":"code","a5b09e27":"code","e1904099":"code","d53545ca":"code","4f7c7969":"code","64e770bd":"code","caed6693":"markdown","abbaf10a":"markdown","417d2429":"markdown","c523e605":"markdown","83d642be":"markdown","238da442":"markdown"},"source":{"a9184144":"#numpy and pandas initialization\nimport numpy as np\nimport pandas as pd","b5c34a67":"#Loading the PlayTennis data\nPlayTennis = pd.read_csv(\"..\/input\/PlayTennis.csv\")","fdac0d6e":"PlayTennis","ba52804d":"from sklearn.preprocessing import LabelEncoder\nLe = LabelEncoder()\n\nPlayTennis['outlook'] = Le.fit_transform(PlayTennis['outlook'])\nPlayTennis['temp'] = Le.fit_transform(PlayTennis['temp'])\nPlayTennis['humidity'] = Le.fit_transform(PlayTennis['humidity'])\nPlayTennis['windy'] = Le.fit_transform(PlayTennis['windy'])\nPlayTennis['play'] = Le.fit_transform(PlayTennis['play'])","1fab77cb":"PlayTennis","997b3ea2":"y = PlayTennis['play']\nX = PlayTennis.drop(['play'],axis=1)","a5b09e27":"# Fitting the model\nfrom sklearn import tree\nclf = tree.DecisionTreeClassifier(criterion = 'entropy')\nclf = clf.fit(X, y)","e1904099":"# We can visualize the tree using tree.plot_tree\ntree.plot_tree(clf)","d53545ca":"import graphviz \ndot_data = tree.export_graphviz(clf, out_file=None) \ngraph = graphviz.Source(dot_data) \ngraph","4f7c7969":"# The predictions are stored in X_pred\nX_pred = clf.predict(X)","64e770bd":"# verifying if the model has predicted it all right.\nX_pred == y","caed6693":"In the above graph,\n\n* X[0] -> Outlook\n* X[1] -> Temperature\n* X[2] -> Humidity\n* X[3] -> Wind\n\nvalues![image.png](attachment:image.png)\n\n","abbaf10a":"[GraphViz](https:\/\/www.graphviz.org\/) gives a better and clearer Graph.","417d2429":"# **Implementing Decision Tree using Scikit Learn**\n\nThis notebook is a reference notebook to a blog, [Decision Tree for Beginers](https:\/\/link.medium.com\/wLnRkIdpR3). ","c523e605":"* Lets split the training data and its coresponding prediction values.\n* y - holds all the decisions.\n* X - holds the training data.","83d642be":"It is easy to implement Decision Tree with numerical values. We can convert all the non numerical values into numerical values using [LabelEncoder](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.preprocessing.LabelEncoder.html)","238da442":"Since we dont have any data to test. we can just make the model to predict our train data."}}