{"cell_type":{"858d6c66":"code","b8ed0496":"code","3e9794ad":"code","00acede6":"code","00d49088":"code","3ac329a9":"code","f08c2dee":"code","c88df5f7":"code","97148afe":"code","79ee13b0":"code","dbc1ab4e":"code","a61be025":"code","fb331cba":"code","95e0baa7":"code","235be37c":"code","6725dbfa":"code","a74794b8":"code","09b20dd2":"code","e9e66c49":"code","7bf99456":"code","0edfc85d":"code","f63c10d2":"code","ac2a5650":"code","87239921":"code","2b122fc4":"code","b870d2f9":"code","f7e953b2":"code","f12faf29":"code","8206e758":"code","dfb0844f":"code","00a796da":"code","2ff511cc":"code","27bc3421":"code","e9232e6c":"code","eb512c45":"code","e2542e6c":"code","d3cb4cf3":"code","3dd42ff1":"code","cd4a4867":"code","2aec462a":"code","e3f8e5d2":"code","993d1865":"code","af099f98":"code","46b77212":"code","cef58dc0":"code","74c0f7dc":"code","de1bf898":"code","997496c1":"code","fa843b38":"code","614a89a1":"code","8102f29e":"code","2417ed6b":"code","b024c0ce":"code","ef0678c1":"code","3c766e57":"code","559108c9":"code","1e50dab0":"code","773c04b1":"code","81be466e":"code","9758741e":"code","1b741479":"code","8fbd2dcb":"code","7c2491e7":"code","e1c48bfa":"code","a6a71dc3":"code","e7179123":"code","03e1d4fb":"code","a7de29f1":"code","26b56b20":"code","eb594fb9":"code","07d2639a":"code","c5b75846":"code","92fd8bcf":"code","8a74db8a":"code","fc3668b6":"code","00f36358":"code","1cd7b00d":"code","9cb40dad":"code","eb587c4e":"code","294ba65d":"markdown","0c8a2612":"markdown","9f27d346":"markdown","271f27b3":"markdown","4fe0c8a8":"markdown","46c4a3b3":"markdown","619a4dbc":"markdown","5759c328":"markdown","a1e1f603":"markdown","9d628340":"markdown","c6081f98":"markdown","6b3fcfa7":"markdown","93963716":"markdown","8ebf944a":"markdown","4c312b7a":"markdown","eaffa1d0":"markdown","031db07b":"markdown","bf53ca54":"markdown","81651333":"markdown","04784a84":"markdown","65216c81":"markdown","c153e826":"markdown","af74754a":"markdown","c93011f8":"markdown","f093a763":"markdown","ad1ca875":"markdown"},"source":{"858d6c66":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b8ed0496":"import pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\n%matplotlib inline\nimport matplotlib \nmatplotlib.rcParams[\"figure.figsize\"] = (20,10)","3e9794ad":"df1 = pd.read_csv(\"..\/input\/bengaluru-house-price-data\/Bengaluru_House_Data.csv\")\ndf1.head()","00acede6":"df1.shape","00d49088":"# get the information of data\ndf1.info()","3ac329a9":"df1.columns","f08c2dee":"df1['area_type'].unique()","c88df5f7":"df1['area_type'].value_counts()","97148afe":"import seaborn as sns\nsns.scatterplot(df1['balcony'], df1['price'])","79ee13b0":"sns.countplot(df1['area_type'], hue='balcony', data=df1)","dbc1ab4e":"sns.jointplot(x=df1['bath'], y=df1['price'], data=df1)","a61be025":"df1.describe()\n# We have only 3 neumerical features - bath, balcony and price\n# 6 categorical features - area type, availability, size, society, and total_srft\n# Target Feature =======>>>>>> price >>>>>>\n# Price in lakh\n \n#observe 75% and max value it shows huge diff","fb331cba":"sns.pairplot(df1)\n\n# bath and price have slightly linear correlation with some outliers","95e0baa7":"# value count of each feature\ndef value_count(df1):\n  for var in df1.columns:\n    print(df1[var].value_counts())\n    print(\"--------------------------------\")","235be37c":"value_count(df1)","6725dbfa":"# correlation heatmap\nnum_vars = [\"bath\", \"balcony\", \"price\"]\nsns.heatmap(df1[num_vars].corr(),cmap=\"coolwarm\", annot=True)\n \n# correlation of bath is greater than a balcony with price","a74794b8":"df1.isnull().sum()","09b20dd2":"df1.shape","e9e66c49":"df1.isnull().mean()*100 # % of measing value\n\n#society has 41.3% missing value (need to drop)","7bf99456":"# visualize missing value using heatmap to get idea where is the value missing\n \nplt.figure(figsize=(16,9))\nsns.heatmap(df1.isnull())","0edfc85d":"del_col = ['area_type','availability','society','balcony']\ndf2 = df1.drop(del_col, axis=1)","f63c10d2":"# drop na value rows from df2\n# because there is very less % value missing\ndf3 = df2.dropna()\ndf3.shape","ac2a5650":"df3.isnull().sum()","87239921":"df3.head()","2b122fc4":"df3['size'].unique()","b870d2f9":"df3['bhk'] = df3['size'].apply(lambda x : int(x.split(' ')[0]))","f7e953b2":"df3.head()","f12faf29":"def is_float(x):\n    try:\n        float(x)\n    except:\n        return False\n    return True","8206e758":"df3[~df3['total_sqft'].apply(is_float)].head(10)","dfb0844f":"# here we observe that 'total_sqft' contain string value in diff format\n#float, int like value 1689.28,817 \n# range value: 540 - 740 \n# number and string: 142.84Sq. Meter, 117Sq. Yards, 1Grounds\n \n# best strategy is to convert it into number by spliting it\n\ndef convert_sqft_to_num(x):\n    tokens = x.split('-')\n    if len(tokens) == 2:\n        return (float(tokens[0])+float(tokens[1]))\/2\n    try:\n        return float(x)\n    except:\n        return None","00a796da":"df4 = df3.copy()\ndf4['total_sqft'] = df4['total_sqft'].apply(convert_sqft_to_num)","2ff511cc":"df4.head()","27bc3421":"df4.isna().sum()","e9232e6c":"df5 = df4.copy()","eb512c45":"df5['price_per_sqft'] = df5['price']* 100000 \/ df5['total_sqft']","e2542e6c":"df5.head()","d3cb4cf3":"df5.dtypes","3dd42ff1":"# function to create histogram, Q-Q plot and boxplot\n \n# for Q-Q plots\nimport scipy.stats as stats\n\ndef diagnostic_plots(df, variable):\n    # function takes a dataframe (df) and\n    # the variable of interest as arguments\n \n    # define figure size\n    plt.figure(figsize=(16, 4))\n \n    # histogram\n    plt.subplot(1, 3, 1)\n    sns.distplot(df[variable], bins=30)\n    plt.title('Histogram')\n \n    # Q-Q plot\n    plt.subplot(1, 3, 2)\n    stats.probplot(df[variable], dist=\"norm\", plot=plt)\n    plt.ylabel('Variable quantiles')\n \n    # boxplot\n    plt.subplot(1, 3, 3)\n    sns.boxplot(y=df[variable])\n    plt.title('Boxplot')\n \n    plt.show()\n    \nnum_var = [\"bath\",\"total_sqft\",\"bhk\",\"price\"]\nfor var in num_var:\n    print(\"******* {} *******\".format(var))\n    diagnostic_plots(df5, var)\n \n  # here we observe outlier using histogram,, qq plot and boxplot","cd4a4867":"df5['location'] = df5['location'].apply(lambda x : x.strip())\n\nloc_status = df4.groupby('location')['location'].agg('count')\nloc_status.sort_values(ascending = False)","2aec462a":"len(loc_status[loc_status <=10])","e3f8e5d2":"loc_status_less_10 = loc_status[loc_status <=10]","993d1865":"df5['location'] = df5['location'].apply(lambda x : 'other' if x in loc_status_less_10 else x)\ndf5.head()","af099f98":"df5.shape","46b77212":"df5[df5['total_sqft']\/ df5['bhk'] <300 ].head()  #remove these rows","cef58dc0":"df6 = df5[~(df5['total_sqft']\/ df5['bhk'] <300) ]\nprint(df6.head())\ndf6.shape","74c0f7dc":"df6['price_per_sqft'].describe()","de1bf898":"# Removing outliers using help of 'price per sqrt'  taking std and mean per location\ndef remove_pps_outliers(df):\n  df_out = pd.DataFrame()\n  for key, subdf in df.groupby('location'):\n    m=np.mean(subdf.price_per_sqft)\n    st=np.std(subdf.price_per_sqft)\n    reduced_df = subdf[(subdf.price_per_sqft>(m-st)) & (subdf.price_per_sqft<=(m+st))]\n    df_out = pd.concat([df_out, reduced_df], ignore_index = True)\n  return df_out","997496c1":"df7 = remove_pps_outliers(df6)\ndf7.shape","fa843b38":"def scatter_chart(df, location):\n    bhk2 = df[(df['location'] == location) & (df['bhk'] == 2)]\n    bhk3 = df[(df['location'] == location) & (df['bhk'] == 3)]\n    \n    matplotlib.rcParams['figure.figsize'] = (15,10)\n    \n    plt.scatter(bhk2['total_sqft'], bhk2['price_per_sqft'], label='2 BHK', s=50)\n    plt.scatter(bhk3['total_sqft'], bhk3['price_per_sqft'], marker='+',label= '3 BHK', s= 50, color='green')\n    plt.xlabel(\"Total Square Feat Area\")\n    plt.ylabel(\"Price per Sqft\")\n    plt.title(location)\n    plt.legend()","614a89a1":"scatter_chart(df7, 'Rajaji Nagar')\n\n# in below scatterplot we observe that at same location price of\n# 2 bhk house is greater than 3 bhk so it is outlier","8102f29e":"scatter_chart(df7, \"Hebbal\")\n\n# in below scatterplot we observe that at same location price of\n# 3 bhk house is less than 2 bhk so it is outlier","2417ed6b":"def rm_bhk_outliers(df):\n    exclude_indices = np.array([])\n    for location, location_df in df.groupby('location'):\n        bhk_stats = {}\n        for bhk, bhk_df in location_df.groupby('bhk'):\n            bhk_stats[bhk] = {\n                'mean' : np.mean(bhk_df['price_per_sqft']),\n                'std'  : np.std(bhk_df['price_per_sqft']),\n                'count' : bhk_df.shape[0]\n            }\n            \n        for bhk, bhk_df in location_df.groupby('bhk'):\n            stats  = bhk_stats.get(bhk -1)\n            \n            if stats and stats['count'] > 5:\n                exclude_indices = np.append(exclude_indices, bhk_df[bhk_df['price_per_sqft'] < (stats['mean'])].index.values)\n    return df.drop(exclude_indices, axis='index')","b024c0ce":"df8 = rm_bhk_outliers(df7)\ndf8.shape","ef0678c1":"scatter_chart(df8, 'Rajaji Nagar')","3c766e57":"scatter_chart(df8, \"Hebbal\")","559108c9":"import matplotlib\nmatplotlib.rcParams[\"figure.figsize\"] = (20,10)\nplt.hist(df8.price_per_sqft,rwidth=0.8)\nplt.xlabel(\"Price Per Square Feet\")\nplt.ylabel(\"Count\")","1e50dab0":"df8.bath.unique()","773c04b1":"plt.hist(df8.bath,rwidth=0.8)\nplt.xlabel(\"Number of bathrooms\")\nplt.ylabel(\"Count\")","81be466e":"df8[df8.bath>10]\n\n#It is unusual to have 2 more bathrooms than number of bedrooms in a home","9758741e":"df8[df8.bath>df8.bhk+2]","1b741479":"#if you have 4 bedroom home and even if you have bathroom in all 4 rooms plus one guest bathroom, you will have total bath = total bed + 1 max.\n\ndf9 = df8[df8.bath<df8.bhk+2]\ndf9.shape","8fbd2dcb":"df9.head(2)","7c2491e7":"df10 = df9.drop(['size','price_per_sqft'],axis='columns')\ndf10.head(3)","e1c48bfa":"dummies = pd.get_dummies(df10.location)\ndummies.head(3)","a6a71dc3":"df11 = pd.concat([df10,dummies.drop('other',axis='columns')],axis='columns')\ndf11.head()","e7179123":"df12 = df11.drop('location',axis='columns')\ndf12.head(2)","03e1d4fb":"df12.shape","a7de29f1":"X = df12.drop(['price'],axis='columns')\nX.head(3)","26b56b20":"X.shape","eb594fb9":"y = df12.price\ny.head(3)","07d2639a":"len(y)","c5b75846":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2,random_state=10)","92fd8bcf":"from sklearn.linear_model import LinearRegression\nlr_clf = LinearRegression()\nlr_clf.fit(X_train,y_train)\nlr_clf.score(X_test,y_test)","8a74db8a":"from sklearn.model_selection import ShuffleSplit\nfrom sklearn.model_selection import cross_val_score\n\ncv = ShuffleSplit(n_splits=6, test_size=0.2, random_state=10)\n\ncross_val_score(LinearRegression(), X, y, cv=cv)","fc3668b6":"from sklearn.model_selection import GridSearchCV\n\nfrom sklearn.linear_model import Lasso\nfrom sklearn.tree import DecisionTreeRegressor\n\ndef find_best_model_using_gridsearchcv(X,y):\n    algos = {\n        'linear_regression' : {\n            'model': LinearRegression(),\n            'params': {\n                'normalize': [True, False]\n            }\n        },\n        'lasso': {\n            'model': Lasso(),\n            'params': {\n                'alpha': [1,2],\n                'selection': ['random', 'cyclic']\n            }\n        },\n        'decision_tree': {\n            'model': DecisionTreeRegressor(),\n            'params': {\n                'criterion' : ['mse','friedman_mse'],\n                'splitter': ['best','random']\n            }\n        }\n    }\n    scores = []\n    cv = ShuffleSplit(n_splits=5, test_size=0.2, random_state=10)\n    for algo_name, config in algos.items():\n        gs =  GridSearchCV(config['model'], config['params'], cv=cv, return_train_score=False)\n        gs.fit(X,y)\n        scores.append({\n            'model': algo_name,\n            'best_score': gs.best_score_,\n            'best_params': gs.best_params_\n        })\n\n    return pd.DataFrame(scores,columns=['model','best_score','best_params'])\n\nfind_best_model_using_gridsearchcv(X,y)","00f36358":"def predict_price(location,sqft,bath,bhk):    \n    loc_index = np.where(X.columns==location)[0][0]\n\n    x = np.zeros(len(X.columns))\n    x[0] = sqft\n    x[1] = bath\n    x[2] = bhk\n    if loc_index >= 0:\n        x[loc_index] = 1\n\n    return lr_clf.predict([x])[0]","1cd7b00d":"predict_price('1st Phase JP Nagar',1000, 2, 2)","9cb40dad":"predict_price('Indira Nagar', 1000, 2, 2 )","eb587c4e":"predict_price('1st Phase JP Nagar', 1000, 3, 3)","294ba65d":"## **Finding Outlier and Removing**","0c8a2612":"### **Outlier Removal Using Bathrooms Feature**","9f27d346":"##  **Import Libraries**","271f27b3":"### **Build a Model Now...**","4fe0c8a8":"GridSearchCV is a library function that is a member of sklearn\u2019s model_selection package. It helps to loop through predefined hyperparameters and fit your estimator (model) on your training set. So, in the end, you can select the best parameters from the listed hyperparameters.","46c4a3b3":"## **Use One Hot Encoding For Location**","619a4dbc":"### **Use K Fold cross validation to measure accuracy of our LinearRegression model**","5759c328":"## **Explore Location Feature**","a1e1f603":"#### **As general, total_sqft per bedroom can't be less than 300**","9d628340":"A one hot encoding is a representation of categorical variables as binary vectors.\n\nThis first requires that the categorical values be mapped to integer values.\nThen, each integer value is represented as a binary vector that is all zero values except the index of the integer, \nwhich is marked with a 1.","c6081f98":"## **Exploratory Data Analysis**","6b3fcfa7":"We can see that in 5 iterations we get a score above 80% all the time. This is pretty good but we want to test few other algorithms for regression to see if we can get even better score. We will use GridSearchCV for this purpose\u00b6","93963716":"## **Feature Engineering**","8ebf944a":"## **Working on size feature**","4c312b7a":"### **GridSearchCV**","eaffa1d0":"### **Test the model for few properties**","031db07b":"## **Load Dataset**","bf53ca54":"divides all the samples in k groups of samples, called folds (if k=n, this is equivalent to the Leave One Out strategy), of equal sizes (if possible). The prediction function is learned using k-1 folds, and the fold left out is used for test.","81651333":"#### **price_per_sqft**","04784a84":"#### **remove 2 bedroom having value less than 1 bedroom**","65216c81":"Based on above results we can say that Linear Regression gives the best score. Hence we will use that","c153e826":"#### **plot a scatter plot for 2 and 3 bedroom**","af74754a":"## **Outlier Remove**","c93011f8":"# **Bangalore House Price Prediction**","f093a763":"## **Data Cleaning: Handle NA values**","ad1ca875":"**The main goal of this project is to find the price of the Bangalore house using their features.**"}}