{"cell_type":{"b8eb35c5":"code","75b71a90":"code","90c9e725":"code","ea80fef4":"code","4432cdd7":"code","b638e296":"code","80e88a18":"code","2ebc781e":"code","4deb80d0":"code","9e233b51":"code","322a24b3":"code","ca155734":"code","270ad170":"code","d12c820b":"code","a58d1464":"code","e81ab057":"markdown","ffe8d1da":"markdown","0fc337d6":"markdown","fc032fb7":"markdown","b98c916f":"markdown","083cce58":"markdown","5ebf5a9a":"markdown","7f021ae7":"markdown"},"source":{"b8eb35c5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","75b71a90":"#Import the data for predictions\ntrain_data = pd.read_csv('\/kaggle\/input\/30-days-of-ml\/train.csv')\ntest_data = pd.read_csv('\/kaggle\/input\/30-days-of-ml\/test.csv')","90c9e725":"#Let us see some stats on our data\ntrain_data.describe()","ea80fef4":"#NOw we come to the size of our data\ntrain_data.shape","4432cdd7":"#Let's look at a sample of the data\ntrain_data.head()","b638e296":"#Just check the bottom part of the data, you can never know in the case of cut off files\ntrain_data.tail()","80e88a18":"#Let us start with the prediction target, and inspect the to 5 rows\ny = train_data.target\ny.head()","2ebc781e":"#Select the features\nmy_features = ['id', 'cont0', 'cont1', 'cont2', 'cont3', 'cont4', 'cont5',\n       'cont6', 'cont7', 'cont8', 'cont9', 'cont10', 'cont11', 'cont12']\nX = train_data[my_features]","4deb80d0":"#Some stats on the features\nX.describe()","9e233b51":"#Top 5 rows of our data\nX.head()","322a24b3":"#First let us split the data into train data and validation\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeRegressor\n\ntrain_X, val_X, train_y, val_y = train_test_split(X, y, random_state = 1)\n\n#Define the model\nmy_model = DecisionTreeRegressor(random_state = 1)\n\n#Fit the model\nmy_model.fit(train_X, train_y)\nmy_model.predict(val_X)","ca155734":"print(my_model.predict(val_X.head()))","270ad170":"#Now calculate the Mean Absolute Error\nfrom sklearn.metrics import mean_absolute_error\nval_mae = mean_absolute_error(val_y, my_model.predict(val_X))\n\n# uncomment following line to see the validation_mae\nprint(val_mae)","d12c820b":"test_X = test_data[my_features]\nmy_preds = my_model.predict(test_X)\nmy_preds","a58d1464":"# Run the code to save predictions in the format used for competition scoring\n\noutput = pd.DataFrame({'id': test_data.id,\n                       'target': my_preds})\noutput.to_csv('submission.csv', index=False)","e81ab057":"1. Import the data to use for predictions","ffe8d1da":"2. Explore the Data","0fc337d6":"Inspect your predictions, print a few prediction data","fc032fb7":"Let us have a look see into our features","b98c916f":"The data looks good, we can now start choosing our features and target variables","083cce58":"Now let's choose the features","5ebf5a9a":"Output and submit your predictions","7f021ae7":"Now that we have our Prediction target as well as our features, time to build the model"}}