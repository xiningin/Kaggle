{"cell_type":{"2150d3da":"code","e30fac53":"code","bcd20901":"code","8804d21c":"code","042f7b1a":"code","d85bb593":"code","a8624c81":"code","938b3476":"code","b31096b1":"code","41382d08":"code","e90d8700":"code","81f68a2b":"code","91433da3":"markdown","b1946db2":"markdown","81e29fa4":"markdown","bb8afd91":"markdown","d77bb820":"markdown","f2e15531":"markdown","9657f3ed":"markdown","4432f5f7":"markdown","7533667b":"markdown","227eda05":"markdown","b319b4c1":"markdown","173a4c33":"markdown"},"source":{"2150d3da":"import numpy as np\nimport pandas as pd\nfrom IPython.display import display\nimport random\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport matplotlib.pyplot as plt\nimport time\n\npd.options.display.max_columns = None","e30fac53":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bcd20901":"train = pd.read_csv('\/kaggle\/input\/lish-moa\/train_features.csv')\ntest = pd.read_csv('\/kaggle\/input\/lish-moa\/test_features.csv')\n\ntrain['dataset'] = 'train'\ntest['dataset'] = 'test'\n\ndf = pd.concat([train, test])","8804d21c":"train.head(10)","042f7b1a":"test.head(10)","d85bb593":"print('Training Set - Number of rows {} and Number of columns {}: '.format(train.shape[0], train.shape[1]-1))\nprint('Teseting Set - Number of row {} and Number of columns {}'.format(test.shape[0], test.shape[1]-1))","a8624c81":"ds = df[df['dataset'] == 'train']\nds = ds.groupby(['cp_dose', 'cp_type', 'cp_time'])['sig_id'].count().reset_index()\nds.columns = ['cp_dose', 'cp_type', 'cp_time', 'count']\n\nfig = px.sunburst(ds, path = ['cp_dose', 'cp_type', 'cp_time'], values = 'count',\n                 title = \"Sunburst chart for cp_dose, cp_type, cp_time\", width = 600, height = 600\n                 )\n\nfig.show()","938b3476":"train_columns = train.columns.to_list()\ng_list = [i for i in train_columns if i.startswith('g-')]\nc_list = [i for i in train_columns if i.startswith('c-')]\n\ncolumns = g_list + c_list\n\ncorrelation_var = random.choices(columns, k=40)\ndata = df[correlation_var]\n\nf = plt.figure(figsize=(20,18))\nplt.matshow(data.corr(), fignum = f.number)\nplt.xticks(range(data.shape[1]), data.columns, fontsize=15, rotation=50)\nplt.yticks(range(data.shape[1]), data.columns, fontsize = 15)\ncb = plt.colorbar()\ncb.ax.tick_params(labelsize=15)\n","b31096b1":"cols = ['cp_time'] + columns\nall_columns = []\n\nfor i in range(0, len(cols)):\n    for j in range(i + 1, len(cols)):\n        if abs(train[cols[i]].corr(train[cols[j]])) > 0.9:\n            all_columns.append(cols[i])\n            all_columns.append(cols[j])\nall_columns = list(set(all_columns))\ndata = df[all_columns]\n\nf = plt.figure(figsize = (20,18))\nplt.matshow(data.corr(), fignum= f.number)\nplt.xticks(range(data.shape[1]), data.columns, fontsize = 15, rotation = 50)\nplt.yticks(range(data.shape[1]), data.columns, fontsize=15)\ncb = plt.colorbar()\ncb.ax.tick_params(labelsize=15)","41382d08":"import seaborn as sns\nfrom colorama import Fore, Back, Style\ny_ = Fore.YELLOW\nr_ = Fore.RED\ng_ = Fore.GREEN\nb_ = Fore.BLUE\nm_ = Fore.MAGENTA\nsr_ = Style.RESET_ALL\n\ndef distribution(feature, color):\n    plt.figure(figsize = (16,8))\n    plt.subplot(121)\n    sns.distplot(train[feature], color = color)\n    plt.subplot(122)\n    sns.violinplot(train[feature])\n    print(\"{}Max value of {} is: {} {:.2f} \\n{}Min value of {} is: {} {:.2f}\\n{}Mean of {} is: {}{:.2f}\\n{}Standard Deviation of {} is:{}{:.2f}\"\\\n      .format(y_,feature,r_,train[feature].max(),g_,feature,r_,train[feature].min(),b_,feature,r_,train[feature].mean(),m_,feature,r_,train[feature].std()))","e90d8700":"distribution(\"g-1\",\"blue\")","81f68a2b":"train['g_mean'] = train[[x for x in train.columns if x.startswith(\"g-\")]].mean(axis = 1)\ntest['g_mean'] = test[[x for x in test.columns if x.startswith(\"g-\")]].mean(axis = 1)\ndistribution(\"g_mean\", \"yellow\")","91433da3":"# 2. Loading Libraries and Packages","b1946db2":"# Distribution of Gene Expression","81e29fa4":"# Mechanisms of Action (MoA) Exploratory Data Analysis (EDA)","bb8afd91":"**Understanding the shape of train and test data**","d77bb820":"# 3. Loading Dataset","f2e15531":"# Training features variables correlation visualization","9657f3ed":"# Distribution of mean of Gene expression","4432f5f7":"# Correlation between columns","7533667b":"# 1. Introduction","227eda05":"**Let's have look at training and Test data**","b319b4c1":"# Sunburst Chart for cp_type, co_time, cp_dose","173a4c33":"References -\n\nhttps:\/\/www.kaggle.com\/maunish\/moa-super-cool-eda-and-pytorch-baseline\n\nhttps:\/\/www.kaggle.com\/isaienkov\/mechanisms-of-action-moa-prediction-eda\n"}}