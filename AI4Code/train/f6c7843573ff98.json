{"cell_type":{"ea3343e2":"code","2bb025d9":"code","b2e80e90":"code","b5d99f4c":"code","d0996679":"code","3b7def7b":"code","f2237911":"code","9f7088b3":"code","844581a9":"code","eeac1ba7":"code","e12625b2":"code","7a25aaf0":"code","29158f2c":"code","52b9a901":"code","53f93e3c":"code","340bea8a":"code","347b4c57":"code","615173c1":"code","c36edb67":"code","b77c42aa":"code","1b68a2ab":"code","139cc8a4":"code","41b812d5":"code","28f87f47":"code","d36997a7":"code","226d1c99":"code","9b9ec1b4":"code","ccdbc8c9":"code","a2f9cf78":"markdown","e06dfd37":"markdown","e6f30c48":"markdown","54d55a91":"markdown","62e5296a":"markdown","79e5385d":"markdown"},"source":{"ea3343e2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2bb025d9":"df = pd.DataFrame(pd.read_csv('\/kaggle\/input\/movie-metadatacsv\/movie_metadata.csv'))\ndf.head()","b2e80e90":"df.shape","b5d99f4c":"df.dtypes","d0996679":"df.describe()","3b7def7b":"# Check which column contains null value\ndf.isnull().any()","f2237911":"# % of null items in the column \n(df.isnull().sum()\/df.shape[0])*100","9f7088b3":"df = df.fillna(value=df.mean())\ndf.shape","844581a9":"fig, ax = plt.subplots(figsize=(20,20))\nsns.heatmap(df.corr(), annot = True)","eeac1ba7":"# Simple function to get the name of most correlated attributes\ndef get_correlated_col(cor_data, threshold):\n    #cor_data to be column along which corelation to be measured\n    #threshold be the value above which of correlation to be considered\n    feature=[]\n    value=[]\n    \n    for i, index in enumerate(cor_data.index):\n        if abs(cor_data[index]) > threshold:\n            feature.append(index)\n            value.append(cor_data[index])\n    \n    df = pd.DataFrame(data=value, index = feature, columns= ['corr value'])\n    return df\n    \n","e12625b2":"top_correlated_value = get_correlated_col(df.corr()['imdb_score'], 0.2)\ntop_correlated_value","7a25aaf0":"final_df = df[top_correlated_value.index]\nfinal_df","29158f2c":"cat_df = df.select_dtypes(include=['object'])\ncat_df.head()","52b9a901":"#Changing categorical values(Object) into numerical value using Encoder\nfrom sklearn.preprocessing import LabelEncoder \n\ncat_col = cat_df.columns\nfor i in cat_col:\n    enc = LabelEncoder()\n    cat_df[i] = enc.fit_transform(cat_df[i].astype('str'))","53f93e3c":"cat_df.head()","340bea8a":"# Adding target column in the cat_df to get the correlation\ncat_df['imdb_score'] = df['imdb_score'] ","347b4c57":"cat_df.head()","615173c1":"fig, ax = plt.subplots(figsize=(20,20))\nsns.heatmap(cat_df.corr(), annot = True)","c36edb67":"#Adding correlated attribute to final_df\nfinal_df['color'] = cat_df['color']\nfinal_df['director_name'] = cat_df['director_name']\nfinal_df['genres'] = cat_df['genres']\nfinal_df['language'] = cat_df['language']\n","b77c42aa":"final_df.head()","1b68a2ab":"#spliting attributes and target \nX = final_df.drop(['imdb_score'], axis=1)\ny = final_df['imdb_score']","139cc8a4":"X.head()","41b812d5":"X.shape","28f87f47":"#Now we'll transform features by scaling each feature to a given range (0 to 1)\n\nfrom sklearn.preprocessing import MinMaxScaler\n\nscaler = MinMaxScaler()\nX = pd.DataFrame(scaler.fit_transform(X), columns=X.columns)\nX.head()","d36997a7":"#Now lets split data in test train pairs in 0.7\/0.3\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.30)","226d1c99":"#Fitting the model\nfrom sklearn.linear_model import LinearRegression\n\nLinearReg = LinearRegression()\nLinearReg.fit(X_train, y_train)","9b9ec1b4":"#Prediction\ny_pred = LinearReg.predict(X_test)\npred_df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})\npred_df.head()","ccdbc8c9":"#Evaluating the Model\n\nfrom sklearn import metrics\n\nprint('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))  \nprint('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))  \nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))","a2f9cf78":"Percentage of Nan value is very less, so we can replace the Nan with 0","e06dfd37":"The mean error in our prediction is less than 15% which is acceptable.","e6f30c48":"Loading the dataset","54d55a91":"Now, if we apply heatmap to the whole dataset, it'll create heatmap of columns with dtype int or float (excluding object)","62e5296a":"Now lets work with columns with dtype of object","79e5385d":"Now we'll find the correlation between the attributes and target variable (IMDB score) using heatmap"}}