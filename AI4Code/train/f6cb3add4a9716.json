{"cell_type":{"d9a3f454":"code","00310d71":"code","d27b5fa9":"code","d6b21ef0":"code","c8215af0":"code","4d301583":"code","ab9b267f":"code","9d3bcd51":"code","1264cf5e":"code","9f68809a":"code","f03f15c4":"code","afd6a092":"code","af7bf0ee":"code","4e9376ed":"code","3360844b":"code","0ceb915e":"code","ccd812a0":"code","55eb9440":"code","905ee222":"code","33d4cc02":"code","58538f72":"code","6d70bfd4":"code","1cb2e003":"code","43a065cf":"code","2811268b":"code","80c8530c":"code","6a5b9a40":"code","d1c4b1d6":"markdown","5ec82df3":"markdown","1e37fa3c":"markdown"},"source":{"d9a3f454":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","00310d71":"data_price=pd.read_csv('\/kaggle\/input\/nyse\/prices-split-adjusted.csv')\n","d27b5fa9":"data_price.head()","d6b21ef0":"data_price.sample(10)","c8215af0":"data_price = data_price.loc[data_price['symbol']=='MSFT']\ndata_price.drop('symbol', axis=1, inplace=True)\nprint(np.shape(data_price))\ndata_price.head()","4d301583":"data_price.describe()","ab9b267f":"data_price.isnull().sum()","9d3bcd51":"data_price.dtypes","1264cf5e":"import plotly.graph_objects as go\nfrom datetime import datetime\n\n\nfig = go.Figure(data=[go.Candlestick(x=data_price['date'],\n                open=data_price['open'],\n                high=data_price['high'],\n                low=data_price['low'],\n                close=data_price['close'])])\nfig.update_layout(xaxis_rangeslider_visible=False)\n\nfig.show()","9f68809a":"data_price.shape","f03f15c4":"from datetime import datetime\ndata_price['date']= pd.to_datetime(data_price['date'])\n# Confirm the date column is in datetime format\nprint(data_price.info())","afd6a092":"data_price.date.value_counts().count()","af7bf0ee":"import matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns","4e9376ed":"dupes=data_price.duplicated()\ndata_price[dupes]","3360844b":"plt.figure(figsize=(12,8))\nsns.heatmap(data_price.iloc[:,0:13].corr(),annot=True,fmt='.2f',cmap='rainbow',mask=np.triu(data_price.iloc[:,0:13].corr(),+1))\nplt.show()","0ceb915e":"data_price = data_price.drop(['date'],axis=1)","ccd812a0":"X = data_price.drop('close', axis=1)\n\n# Copy target into the y dataframe. \ny = data_price[['close']]","55eb9440":"# Split X and y into training and test set in 75:25 ratio\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25 , random_state=1)","905ee222":"regression_model = LinearRegression()\nregression_model.fit(X_train, y_train)","33d4cc02":"# Let us explore the coefficients for each of the independent attributes\n\nfor idx, col_name in enumerate(X_train.columns):\n    print(\"The coefficient for {} is {}\".format(col_name, regression_model.coef_[0][idx]))","58538f72":"regression_model.score(X_train, y_train)","6d70bfd4":"regression_model.score(X_test, y_test)","1cb2e003":"y_pred = regression_model.predict(X_test)\nplt.scatter(y_test['close'], y_pred)","43a065cf":"data_train = pd.concat([X_train, y_train], axis=1)\ndata_test=pd.concat([X_test,y_test],axis=1)\ndata_train.head()","2811268b":"expr= 'close ~ high + low + open + volume'","80c8530c":"import statsmodels.formula.api as smf\nlm1 = smf.ols(formula= expr, data = data_train).fit()\nlm1.params","6a5b9a40":"print(lm1.summary())","d1c4b1d6":"> Since we can not use the datetime format in the linear regression model hence we can go ahead and remove the date for modelling","5ec82df3":"> **Important points highligted by using OLS model.**\n* Standard Errors assume that the covariance matrix of the errors is correctly specified.\n* The condition number is large, 3.18e+08. This might indicate that there are\nstrong multicollinearity or other numerical problems.\n> **This is also evident looking at the heatmap we plotted for the data **","1e37fa3c":"> This notebook contains the stock records of New york Stock market.\nContent\nDataset consists of following files:\nGiven below is the data dictionary\n\n> Notebook used :**prices-split-adjusted.csv**: same as prices, but there have been added adjustments for splits.\n\n>**date**:Date of the stock filling.\n**close**:closing price pf the stock\n**open**:opening price of the stock in market\n**low**:lowest price the stock touched in a day in the market.\n\n> **The main objective here would be to make a linear regression model on the top stock holder firm of USA which is microsoft (MSFT)\n**\n\n![](https:\/\/media.marketrealist.com\/brand-img\/-Pt21_7zp\/1440x754\/uploads\/2020\/04\/us-stock-market-q1-vs-q2.jpg)"}}