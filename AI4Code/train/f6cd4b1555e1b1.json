{"cell_type":{"7afe6281":"code","8127faad":"code","f99b9a47":"code","87c48323":"code","7ce18739":"code","56a1391d":"code","5b118623":"code","0062f066":"code","98f38c5a":"code","7723198b":"code","40ff2ca7":"code","860a2b4d":"code","ca843790":"code","c8185f09":"code","d4195842":"code","cc8e2f85":"code","87d898a1":"code","755a5fcf":"code","a90ca65f":"code","bb4d66bf":"code","deab7cd2":"markdown","3a95a0ff":"markdown","d478340b":"markdown","62476b44":"markdown","149039c5":"markdown","457ada96":"markdown","9be83240":"markdown","5ec59106":"markdown","0aa78be3":"markdown","6762691b":"markdown","d66f0241":"markdown","000d28c3":"markdown","279bf79b":"markdown","80a95477":"markdown","58b47912":"markdown","e64e0e5a":"markdown","b6999069":"markdown","9e63eac3":"markdown"},"source":{"7afe6281":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","8127faad":"import matplotlib.pyplot as plt, matplotlib.image as mpimg\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import svm, tree\n#%matplotlib inline","f99b9a47":"# load the data\nlabeled_images = pd.read_csv('..\/input\/train.csv')\nimages = labeled_images.iloc[0:5000,1:]\nlabels = labeled_images.iloc[0:5000,:1]\ntrain_images, test_images,train_labels, test_labels = train_test_split(images, labels, test_size=0.2, random_state=0)\n#initialized variable a, b, c, d for Question 6 (4)\na = train_images\nb = test_images\nc = train_labels\nd = test_labels","87c48323":"# now we gonna load the second image, reshape it as matrix than display it\ni=1\nimg=train_images.iloc[i].values\nimg=img.reshape((28,28))\nplt.imshow(img,cmap='gray')\nplt.title(train_labels.iloc[i,0])","7ce18739":"#create an index list that the value number is 0, 1, 2, ..., 8, 9\nnum = [12, 4, 18, 2, 42, 9, 1, 0, 11, 7]\n#use for loop to display the result\nfor i in num:\n    img=train_images.iloc[i].values\n    img=img.reshape((28,28))\n    plt.figure()\n    plt.imshow(img,cmap='gray')\n    plt.title(train_labels.iloc[i,0])","56a1391d":"#train_images.iloc[i].describe()\n#print(type(train_images.iloc[i]))\nplt.hist(train_images.iloc[i])","5b118623":"# create histogram for each class (data merged per class)\nnum = [12, 4, 18, 2, 42, 9, 1, 0, 11, 7]\nfor i in num:\n    plt.figure()\n    plt.hist(train_images.iloc[i])","0062f066":"clf = svm.SVC()\nclf.fit(train_images, train_labels.values.ravel())\nclf.score(test_images,test_labels)","98f38c5a":"print(train_labels.values.ravel())\nprint(np.unique(test_labels)) # to see class number","7723198b":"test_images[test_images>0]=1\ntrain_images[train_images>0]=1\n\nimg=train_images.iloc[i].values.reshape((28,28))\nplt.imshow(img,cmap='binary')\nplt.title(train_labels.loc[train_labels.index[i],'label'])","40ff2ca7":"# now plot again the histogram\nplt.hist(train_images.iloc[i])","860a2b4d":"clf = svm.SVC()\nclf.fit(train_images, train_labels.values.ravel())\nclf.score(test_images,test_labels)","ca843790":"# Test again to data test\ntest_data=pd.read_csv('..\/input\/test.csv')\ntest_data[test_data>0]=1\nresults=clf.predict(test_data[0:5000])","c8185f09":"# separate code section to view the results\nprint(results)\nprint(len(results))","d4195842":"# dump the results to 'results.csv'\ndf = pd.DataFrame(results)\ndf.index.name='ImageId'\ndf.index+=1\ndf.columns=['Label']\ndf.to_csv('results.csv', header=True)","cc8e2f85":"#check if the file created successfully\nprint(os.listdir(\".\"))","87d898a1":"# from https:\/\/www.kaggle.com\/rtatman\/download-a-csv-file-from-a-kernel\n\n# import the modules we'll need\nfrom IPython.display import HTML\nimport pandas as pd\nimport numpy as np\nimport base64\n\n# function that takes in a dataframe and creates a text link to  \n# download it (will only work for files < 2MB or so)\ndef create_download_link(df, title = \"Download CSV file\", filename = \"data.csv\"):  \n    csv = df.to_csv()\n    b64 = base64.b64encode(csv.encode())\n    payload = b64.decode()\n    html = '<a download=\"{filename}\" href=\"data:text\/csv;base64,{payload}\" target=\"_blank\">{title}<\/a>'\n    html = html.format(payload=payload,title=title,filename=filename)\n    return HTML(html)\n\ncreate_download_link(df)","755a5fcf":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import mean_absolute_error\nclf_model = DecisionTreeClassifier(random_state=0)\nclf_model.fit(train_images, train_labels)\nval_predictions = clf_model.predict(test_images)\nresult1 = mean_absolute_error(test_labels, val_predictions)\nprint(result1)\n\n#SVM\nclf = svm.SVC()\nclf.fit(train_images, train_labels.values.ravel())\nresult2 = clf.score(test_images,test_labels)\nprint(result2)","a90ca65f":"#DecisionTreeRegressor\nfrom sklearn.tree import DecisionTreeRegressor\n#define model\nimages_model = DecisionTreeRegressor(random_state=0)\n#fit model\nimages_model.fit(train_images, train_labels)\n#get predicted on validation data\nval_predictions = images_model.predict(test_images)\nresult3 = mean_absolute_error(test_labels, val_predictions)\n\ndf = pd.DataFrame([[result3], [result1], [result2]], index=['DTR', 'DTC', \"SVM\"], columns=['result'])\nprint(df)","bb4d66bf":"#define model\nclf_model = DecisionTreeClassifier(random_state=0)\n#fit model\nclf_model.fit(a, c)\n#get predicted on validation data\nval_predictions = clf_model.predict(b)\nprint(mean_absolute_error(d, val_predictions))","deab7cd2":"## Answer Q3\nThis histogram shows the number of each value of the pixel in train_images, there are 783 values, histogram values of pixels others are determined by the number of each value contained in the pixel","3a95a0ff":"# Library Import\nHere's what do I need:\n1. At least a classification algorithm (SVM or Decision Tree is a Good Choice)\n1. Matplotlib\n1. Preprocessing tools\n1. Train test split And since we have been import numpy and panda no need to import them.","d478340b":"## Prediction labelling","62476b44":"## Answer Q6 (3)","149039c5":"## Train the model","457ada96":"## Answer Q6 (2)","9be83240":"## Answer Q2\nPlot an image for each image class","5ec59106":"## Answer Q1\n.iloc[] is purely integer-location based indexing for selection by position. An integer based base (from 0 to length-1 of the axis), but can also be used with boolean arrays.","0aa78be3":"## Answer Q6 (1)\nThe factor was class_weight","6762691b":"Now plot the histogram within img","d66f0241":"## Hello World","000d28c3":"## Answer Q6 (4)","279bf79b":"## Retrain the model","80a95477":"# Load Data\nLoad the data with pandas. For simplicity I'll only load first 5000 train images then split them again into our personal train & test set for testing.","58b47912":"## Improving Performance","e64e0e5a":"## Answer Q4\nSVM. score() returns the mean accuracy on the given test data and labels, in contrast to MAE function computes mean absolute error. When I executed the results was different between scores() and mae().","b6999069":"## Data Download","9e63eac3":"## Answer Q5\nWhen the value is limited to [0.1] its performance will increase because the variation in the calculated data value will be less."}}