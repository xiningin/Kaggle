{"cell_type":{"dcf0c0e8":"code","66faa111":"code","32805815":"code","168aa5e4":"code","018be493":"code","39e53ac9":"code","06c152b6":"code","42c7a2be":"code","32a6e3f3":"code","ea371b8d":"code","681f4218":"code","8c556a87":"code","6b4f8ccf":"code","4add86d5":"code","ead6d3b4":"code","488a80eb":"code","fac2fcb4":"code","77bf0535":"code","38df79c0":"code","ee978cc5":"code","76bd11da":"code","cc97629d":"code","fbe71ffe":"code","57a67d00":"code","2b52176c":"code","f6f6d3bf":"code","8f3fac6c":"code","effb3049":"code","cbfd5166":"code","dbd238ea":"code","bfea02d7":"code","f6f0fb97":"code","cf041689":"code","94cf22e2":"code","88b3f32a":"code","96c53636":"code","66ea27f3":"code","3ed9a505":"code","13bb49bb":"code","b2ec6c9a":"code","e6b50a59":"code","dd697e53":"code","09d01e3f":"code","aff91c1f":"code","e9b8b4fa":"code","e5ea63c5":"code","05c430e5":"code","dd824d63":"code","492b3bea":"code","dd7876b0":"code","fb4f61b0":"code","5ba48bec":"code","1185d655":"code","7bc3955f":"code","5436fca6":"code","ffe4e049":"code","027b724c":"code","2c083922":"code","5e7da130":"code","aae17aa9":"code","52b85777":"code","8a1567b5":"code","025260de":"code","e13cd8f2":"code","564cc8b8":"code","e3af3db4":"code","39bf0551":"code","b47b3596":"code","54d0dea8":"code","4217e5c5":"code","0f3728ff":"code","5b5a7605":"code","4e30b093":"code","fe4409ad":"code","e02e8254":"code","29eae3ad":"code","6de368fc":"code","b8ad488b":"code","535cd3fa":"code","87db60c1":"code","eafb7a89":"code","f3da7ad3":"code","12aa84e0":"code","90e9783d":"code","0b7d9203":"code","2e2e48e6":"code","34816c77":"code","7c74bf3c":"code","910ed736":"code","97063f59":"code","9856a10e":"code","351f4f34":"code","5229f885":"code","6c68dc91":"code","b0902e3b":"code","afea8243":"code","c69c7ebe":"code","14f1cf93":"code","ca61c829":"code","27e05333":"markdown","722e2aca":"markdown","fdd31a5b":"markdown","387c4383":"markdown","11ddf36b":"markdown","bc679f55":"markdown","e2cb3e88":"markdown","1fa19e84":"markdown","2f48d7f4":"markdown","1709109d":"markdown","deb19409":"markdown","4e5b2373":"markdown","b9247d11":"markdown","0bd95f8f":"markdown","6c6ce8b3":"markdown","2b2a293f":"markdown","00587873":"markdown","0c0c9d44":"markdown","a1a440fa":"markdown","05eaf733":"markdown","a5b4216e":"markdown","2410e9a2":"markdown","2a42bd62":"markdown","f36815cf":"markdown","80050f12":"markdown","5413642b":"markdown","c8943845":"markdown","2b2ce87c":"markdown","457d92ee":"markdown","372a9a62":"markdown","08e82d34":"markdown","eba2a5f1":"markdown","4bae7d5d":"markdown","6fdc7be2":"markdown","7f5aad90":"markdown","5d15035a":"markdown","cb6c0ac0":"markdown","a02b58bf":"markdown","f8a35766":"markdown","7ef4a8ee":"markdown","368e6e5b":"markdown","66a1658e":"markdown","a9285d3d":"markdown"},"source":{"dcf0c0e8":"import pandas as pd\nimport numpy as np\nimport itertools\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom sklearn.metrics import mean_squared_error\nimport plotly.express as px\nfrom pandas.plotting import autocorrelation_plot, lag_plot\nimport statsmodels.api as sm\nfrom statsmodels.tsa.stattools import adfuller, acf, pacf,arma_order_select_ic\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom statsmodels.tsa.ar_model import AR\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import (LinearRegression, Ridge, Lasso,LogisticRegression)\nimport warnings\nwarnings.simplefilter('ignore')\nfrom math import sqrt","66faa111":"train=pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-2\/train.csv\")\ntest=pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-2\/test.csv\")\nsubmission=pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-2\/submission.csv\")","32805815":"train.sample(6)","168aa5e4":"train.columns","018be493":"train.shape","39e53ac9":"train.info()","06c152b6":"cnf, dth, rec, act = '#393e46', '#ff2e63', '#21bf73', '#fe9801' \ntemp = train[['Date','Fatalities', 'ConfirmedCases']]\ntemp = temp.melt(id_vars=\"Date\", value_vars=['Fatalities', 'ConfirmedCases'])\nfig = px.treemap(temp, path=[\"variable\"], values=\"value\", height=225, \n                 color_discrete_sequence=[rec, dth])\nfig.data[0].textinfo = 'label+text+value'\nfig.show()","42c7a2be":"#Confirmed cases by Country\ncc = train.fillna('NA').groupby(['Country_Region','Province_State','Date'])['ConfirmedCases'].sum() \\\n                          .groupby(['Country_Region','Province_State']).max().sort_values() \\\n                          .groupby(['Country_Region']).sum().sort_values(ascending = False)","32a6e3f3":"top10cc = pd.DataFrame(cc).head(10)\ntop10cc","ea371b8d":"#Fatalities cases by Country\nfc = train.fillna('NA').groupby(['Country_Region','Province_State','Date'])['Fatalities'].sum() \\\n                          .groupby(['Country_Region','Province_State']).max().sort_values() \\\n                          .groupby(['Country_Region']).sum().sort_values(ascending = False)","681f4218":"top10fc = pd.DataFrame(fc).head(10)\ntop10fc","8c556a87":"fig = px.bar(top10cc, x=top10cc.index, y='ConfirmedCases', labels={'x':'Country'},\n             color=\"ConfirmedCases\", color_continuous_scale=px.colors.sequential.Plotly3)\nfig.update_layout(title_text='Confirmed COVID-19 cases by country')\nfig.show()","6b4f8ccf":"def plot_map(df, col, pal):\n    df = df[df[col]>0]\n    fig = px.choropleth(df, locations=\"Country_Region\", locationmode='country names', \n                  color=col, hover_name=\"Country_Region\", \n                  title=col, hover_data=[col], color_continuous_scale=pal)\n    fig.show()","4add86d5":"plot_map(cc.reset_index(),'ConfirmedCases', 'matter')","ead6d3b4":"fig = px.bar(top10fc, x=top10fc.index, y='Fatalities', labels={'x':'Country'},\n             color=\"Fatalities\", color_continuous_scale=px.colors.sequential.Turbo)\nfig.update_layout(title_text='Deaths COVID-19 Cases by Country')\nfig.show()","488a80eb":"plot_map(fc.reset_index(),'Fatalities', 'PuRd')","fac2fcb4":"df_by_date = pd.DataFrame(train.fillna('NA').groupby(['Country_Region','Date'])['ConfirmedCases'].sum()\n                          .sort_values().reset_index())\n\nfig = px.bar(df_by_date.loc[(df_by_date['Country_Region'] == 'US') &(df_by_date.Date >= '2020-03-01')]\n             .sort_values('ConfirmedCases',ascending = False), \n             x='Date', y='ConfirmedCases', color=\"ConfirmedCases\", color_continuous_scale=px.colors.sequential.Rainbow)\nfig.update_layout(title_text='Confirmed COVID-19 cases per day in US')\nfig.show()\n","77bf0535":"df_by_date = pd.DataFrame(train.fillna('NA').groupby(['Country_Region','Date'])['ConfirmedCases'].sum()\n                          .sort_values().reset_index())\n\nfig = px.bar(df_by_date.loc[(df_by_date['Country_Region'] == 'Italy') &(df_by_date.Date >= '2020-03-01')]\n             .sort_values('ConfirmedCases',ascending = False), \n             x='Date', y='ConfirmedCases', color=\"ConfirmedCases\", color_continuous_scale=px.colors.sequential.Plasma)\nfig.update_layout(title_text='Confirmed COVID-19 cases per day in Italy')\nfig.show()","38df79c0":"df_by_date = pd.DataFrame(train.fillna('NA').groupby(['Country_Region','Date'])['ConfirmedCases'].sum()\n                          .sort_values().reset_index())\n\nfig = px.bar(df_by_date.loc[(df_by_date['Country_Region'] == 'China') &(df_by_date.Date >= '2020-01-01')]\n             .sort_values('ConfirmedCases',ascending = False), \n             x='Date', y='ConfirmedCases', color=\"ConfirmedCases\", color_continuous_scale=px.colors.sequential.Aggrnyl)\nfig.update_layout(title_text='Confirmed COVID-19 cases per day in China')\nfig.show()\n","ee978cc5":"def plot_treemap(col,dtfr):\n    df=dtfr.reset_index()\n    fig = px.treemap(df, path=[\"Country_Region\"], values=col, height=700,\n                 title=col, color_discrete_sequence = px.colors.qualitative.Dark2)\n    fig.data[0].textinfo = 'label+text+value'\n    fig.show()","76bd11da":"plot_treemap('ConfirmedCases',cc)","cc97629d":"plot_treemap('Fatalities',fc)","fbe71ffe":"def plot_hbar(df, col, n, hover_data=[]):\n    fig = px.bar(df.sort_values(col).tail(n), \n                 x=col, y=\"Country_Region\", color=col,  \n                 text=col, orientation='h', width=700, hover_data=hover_data,\n                 color_discrete_sequence = px.colors.qualitative.Dark2)\n    fig.update_layout(title=col, xaxis_title=\"\", yaxis_title=\"\", \n                      yaxis_categoryorder = 'total ascending',\n                      uniformtext_minsize=8, uniformtext_mode='hide')\n    fig.show()","57a67d00":"plot_hbar(cc.reset_index(), 'ConfirmedCases', 20)","2b52176c":"plot_hbar(fc.reset_index(), 'Fatalities', 20)","f6f6d3bf":"temp = train.groupby('Date')['ConfirmedCases','Fatalities'].sum().reset_index()\ntemp = temp.melt(id_vars=\"Date\", value_vars=['ConfirmedCases','Fatalities'],\n                 var_name='Case', value_name='Count')\ntemp.head()\n\nfig = px.area(temp, x=\"Date\", y=\"Count\", color='Case', height=600, width=700,\n             title='Cases over time', color_discrete_sequence = [rec, dth])\nfig.update_layout(xaxis_rangeslider_visible=True)\nfig.show()","8f3fac6c":"df=train.groupby(['Date','Country_Region']).agg('sum').reset_index()\ndf.head(5)","effb3049":"df.columns","cbfd5166":"def pltCountry_cases(ConfirmedCases,*argv):\n    f, ax=plt.subplots(figsize=(16,5))\n    labels=argv\n    for a in argv: \n        country=df.loc[(df['Country_Region']==a)]\n        plt.plot(country['Date'],country['ConfirmedCases'],linewidth=3)\n        plt.xticks(rotation=40)\n        plt.legend(labels)\n        ax.set(title='Evolution of the number of confirmed cases' )","dbd238ea":"def pltCountry_fatalities(Fatalities,*argv):\n    f, ax=plt.subplots(figsize=(16,5))\n    labels=argv\n    for a in argv: \n        country=df.loc[(df['Country_Region']==a)]\n        plt.plot(country['Date'],country['Fatalities'],linewidth=3)\n        plt.xticks(rotation=40)\n        plt.legend(labels)\n        ax.set(title='Evolution of the number of fatalities' )","bfea02d7":"pltCountry_cases('ConfirmedCases','China')\npltCountry_fatalities('Fatalities','China')","f6f0fb97":"pltCountry_cases('ConfirmedCases', 'US','Italy','Spain','China')\npltCountry_fatalities('Fatilities','Italy','Spain','US','France')","cf041689":"def roll(country,case):\n    ts=df.loc[(df['Country_Region']==country)]  \n    ts=ts[['Date',case]]\n    ts=ts.set_index('Date')\n    ts.astype('int64')\n    a=len(ts.loc[(ts[case]>=10)])\n    ts=ts[-a:]\n    return (ts.rolling(window=4,center=False).mean().dropna())","94cf22e2":"tsc=roll('US','ConfirmedCases')\ntsf=roll('US','Fatalities')","88b3f32a":"# create a time series Confirmed Cases\nsc = pd.Series(tsc.unstack().values, index=tsc.index)","96c53636":"# create a time series Fatalities\nsf = pd.Series(tsf.unstack().values, index=tsf.index)","66ea27f3":"fig = plt.figure(figsize=(19, 7))\nplt.plot(sc, linewidth=3)\nplt.title('Time Series', fontsize=22, fontweight=\"bold\")\nplt.xlabel('Date', fontsize=18)\nplt.ylabel('ConfirmedCases', fontsize=18)","3ed9a505":"fig = plt.figure(figsize=(19, 7))\nplt.plot(sf, linewidth=3)\nplt.title('Time Series', fontsize=22, fontweight=\"bold\")\nplt.xlabel('Date', fontsize=18)\nplt.ylabel('Fatalities', fontsize=18)","13bb49bb":"sc.hist()","b2ec6c9a":"sf.hist()","e6b50a59":"# create a scatter plot for confirmed cases\nlag_plot(sc)","dd697e53":"# create a scatter plot for fatalities\nlag_plot(sf)","09d01e3f":"# create an autocorrelation plot for confirmed cases\nautocorrelation_plot(sc)","aff91c1f":"# create an autocorrelation plot for fatalities\nautocorrelation_plot(sf)","e9b8b4fa":"# autocorrelation plot of time series as a line plot for confirmed cases\nfrom statsmodels.graphics.tsaplots import plot_acf\nplot_acf(sc)","e5ea63c5":"# autocorrelation plot of time series as a line plot for fatalities\nfrom statsmodels.graphics.tsaplots import plot_acf\nplot_acf(sf)","05c430e5":"from statsmodels.tsa.stattools import adfuller\ndef ad_test(dataset):\n     dftest = adfuller(dataset, autolag = 'AIC')\n     print(\"1. ADF : \",dftest[0])\n     print(\"2. P-Value : \", dftest[1])\n     print(\"3. Num Of Lags : \", dftest[2])\n     print(\"4. Num Of Observations Used For ADF Regression:\",dftest[3])\n     print(\"5. Critical Values :\")\n     for key, val in dftest[4].items():\n         print(\"\\t\",key, \": \", val)\nad_test(sc)","dd824d63":"ad_test(sf)","492b3bea":"sc_diff = sc.diff(periods=1)\nsf_diff = sf.diff(periods=1)\nsc_diff = sc_diff[1:]\nsf_diff = sf_diff[1:]","dd7876b0":"# Format date\ntrain[\"Date\"] = train[\"Date\"].apply(lambda x: x.replace(\"-\",\"\"))\ntrain[\"Date\"]  = train[\"Date\"].astype(int)\ntrain.head()","fb4f61b0":"# Drop NaNs\ntrain = train.drop(['Province_State'],axis=1)\ntrain = train.dropna()\ntrain.isnull().sum()","5ba48bec":"#Cleaning Test Data\ntest[\"Date\"] = test[\"Date\"].apply(lambda x: x.replace(\"-\",\"\"))\ntest[\"Date\"]  = test[\"Date\"].astype(int)","1185d655":"train.isnull().sum()","7bc3955f":"train2=train.loc[(train['Country_Region'] == 'US')]\ntest2=test.loc[(test['Country_Region'] == 'US')]     \nx = train2[['Date']]\ny1 = train2[['ConfirmedCases']]\ny2 = train2[['Fatalities']]\nx_test = test2[['Date']]\nfrom sklearn.preprocessing import StandardScaler\nX = StandardScaler().fit_transform(x)\nX_test=StandardScaler().fit_transform(x_test)\nX_train, X_test, y_train, y_test = train_test_split(X, y1, test_size=0.25, random_state=324)\nX_train2, X_test2, y_train2, y_test2 = train_test_split(X, y2, test_size=0.25, random_state=324)","5436fca6":"def split(ts):\n    size = int(len(ts) * 0.85)\n    train= ts[:size]\n    test = ts[size:]\n    return(train,test)\ntscc=tsc['ConfirmedCases'].values\ntsfc=tsf['Fatalities'].values\ntraincc,testcc=split(tscc)\ntrainfc,testfc=split(tsfc)","ffe4e049":"#liste pour stocker les rmse\nrmsecc=[]\nrmsefc=[]","027b724c":"# train autoregression for Confirmed cases\npredictions = []\nmodel = AR(traincc)\nmodel_fit = model.fit()\nwindow = model_fit.k_ar\ncoef = model_fit.params","2c083922":"# walk forward over time steps in test\nhistory = traincc[len(traincc)-window:]\nhistory = [history[i] for i in range(len(history))]\npredictions = []\nfor t in range(len(testcc)):\n    length = len(history)\n    lag = [history[i] for i in range(length-window,length)]\n    yhat = coef[0]\n    for d in range(window):\n        yhat += coef[d+1] * lag[window-d-1]\n    obs = testcc[t]\n    predictions.append(yhat)\n    history.append(obs)\n    #print('predicted=%f, expected=%f' % (yhat, obs))\nRMSE_arcc = sqrt(mean_squared_error(y_true = testcc, y_pred = predictions))","5e7da130":"print('Test RMSE: %.3f' % RMSE_arcc)\nrmsecc.append(RMSE_arcc)","aae17aa9":"# plot\nplt.plot(testcc)\nplt.plot(predictions, color='red')","52b85777":"test_period = 3\nfor i in range(test_period):\n    print('predicted=%f, expected=%f' % (predictions[i], testcc[i]))\n\nRMSE_arcc = np.sqrt(mean_squared_error(testcc[:test_period], predictions[:test_period]))","8a1567b5":"# train autoregression for Fatalities\npredictions = []\nmodel = AR(trainfc)\nmodel_fit = model.fit()\nwindow = model_fit.k_ar\ncoef = model_fit.params","025260de":"# walk forward over time steps in test\nhistory = trainfc[len(trainfc)-window:]\nhistory = [history[i] for i in range(len(history))]\npredictions = []\nfor t in range(len(testfc)):\n    length = len(history)\n    lag = [history[i] for i in range(length-window,length)]\n    yhat = coef[0]\n    for d in range(window):\n        yhat += coef[d+1] * lag[window-d-1]\n    obs = testfc[t]\n    predictions.append(yhat)\n    history.append(obs)\n    #print('predicted=%f, expected=%f' % (yhat, obs))\nRMSE_arfc = np.sqrt(mean_squared_error(testfc, predictions))","e13cd8f2":"print('Test RMSE: %.3f' % RMSE_arfc)\nrmsefc.append(RMSE_arfc)","564cc8b8":"# plot\nplt.plot(testfc)\nplt.plot(predictions, color='red')","e3af3db4":"test_period = 3\nfor i in range(test_period):\n    print('predicted=%f, expected=%f' % (predictions[i], testcc[i]))\n\nRMSE_arfc = np.sqrt(mean_squared_error(testfc[:test_period], predictions[:test_period]))","39bf0551":"from sklearn.ensemble import RandomForestRegressor\nrf = RandomForestRegressor(max_depth=200, random_state=0)","b47b3596":"rf.fit(X_train, y_train)\ny_pred = rf.predict(X_test)\nRMSE_RF = sqrt(mean_squared_error(y_true = y_test, y_pred = y_pred))\nrfcc = pd.DataFrame(y_pred)\nrfcc.columns = [\"Prediction_Confirmed\"]\nprint(RMSE_RF)\nrmsecc.append(RMSE_RF)","54d0dea8":"rfcc","4217e5c5":"rf.fit(X_train2, y_train2)\ny_pred = rf.predict(X_test2)\nRMSE_RF = sqrt(mean_squared_error(y_true = y_test2, y_pred = y_pred))\nrffc = pd.DataFrame(y_pred)\nrffc.columns = [\"Prediction_Fatalities\"]\nprint(RMSE_RF)\nrmsefc.append(RMSE_RF)","0f3728ff":"rffc","5b5a7605":"sub = submission[[\"ForecastId\"]]\nsubmit = pd.concat([rfcc,rffc,sub],axis=1)\nsubmit.head()","4e30b093":"from xgboost import XGBRegressor\nxg = XGBRegressor(n_estimators=100)\nxg.fit(X_train, y_train)\ny_pred = xg.predict(X_test)\nRMSE_xg = sqrt(mean_squared_error(y_true = y_test, y_pred = y_pred))\nxgcc = pd.DataFrame(y_pred)\nxgcc.columns = [\"Prediction_Confirmed\"]\nprint(RMSE_xg)\nrmsecc.append(RMSE_xg)","fe4409ad":"xgcc","e02e8254":"xg.fit(X_train2, y_train2)\ny_pred = xg.predict(X_test2)\nRMSE_xg = sqrt(mean_squared_error(y_true = y_test2, y_pred = y_pred))\nxgfc = pd.DataFrame(y_pred)\nxgfc.columns = [\"Prediction_Fatalities\"]\nprint(RMSE_xg)\nrmsefc.append(RMSE_xg)","29eae3ad":"xgfc","6de368fc":"sub = submission[[\"ForecastId\"]]\nsubmit = pd.concat([xgcc,xgfc,sub],axis=1)\nsubmit.head()","b8ad488b":"dtr = DecisionTreeRegressor(max_depth=20)\ndtr.fit(X_train, y_train)\ny_pred = dtr.predict(X_test)\nRMSE_dtr = sqrt(mean_squared_error(y_true = y_test, y_pred = y_pred))\ndtrcc = pd.DataFrame(y_pred)\ndtrcc.columns = [\"Prediction_Confirmed\"]\nprint(RMSE_dtr)\nrmsecc.append(RMSE_dtr)\ndtrcc","535cd3fa":"dtr.fit(X_train2, y_train2)\ny_pred = dtr.predict(X_test2)\nRMSE_dtr = sqrt(mean_squared_error(y_true = y_test2, y_pred = y_pred))\ndtrfc = pd.DataFrame(y_pred)\ndtrfc.columns = [\"Prediction_Fatalities\"]\nprint(RMSE_dtr)\nrmsefc.append(RMSE_dtr)\ndtrfc","87db60c1":"sub = submission[[\"ForecastId\"]]\nsubmit = pd.concat([dtrcc,dtrfc,sub],axis=1)\nsubmit.head()","eafb7a89":"from sklearn.ensemble import AdaBoostRegressor\nada = AdaBoostRegressor(DecisionTreeRegressor(max_depth=30), learning_rate=0.5, random_state=42)\nada.fit(X_train, y_train)\ny_pred = ada.predict(X_test)\nRMSE_ada = sqrt(mean_squared_error(y_true = y_test, y_pred = y_pred))\nadacc = pd.DataFrame(y_pred)\nadacc.columns = [\"Prediction_Confirmed\"]\nprint(RMSE_ada)\nrmsecc.append(RMSE_ada)\nadacc","f3da7ad3":"ada.fit(X_train2, y_train2)\ny_pred = ada.predict(X_test2)\nRMSE_ada = sqrt(mean_squared_error(y_true = y_test2, y_pred = y_pred))\nadafc = pd.DataFrame(y_pred)\nadafc.columns = [\"Prediction_Fatalities\"]\nprint(RMSE_ada)\nrmsefc.append(RMSE_ada)\nadafc","12aa84e0":"sub = submission[[\"ForecastId\"]]\nsubmit = pd.concat([adacc,adafc,sub],axis=1)\nsubmit.head()","90e9783d":"ls = Lasso(alpha=0.1, normalize=True)\nls.fit(X_train, y_train)\ny_pred = ls.predict(X_test)\nRMSE_ls = sqrt(mean_squared_error(y_true = y_test, y_pred = y_pred))\nlscc = pd.DataFrame(y_pred)\nlscc.columns = [\"Prediction_Confirmed\"]\nprint(RMSE_ls)\nrmsecc.append(RMSE_ls)\nlscc","0b7d9203":"ls.fit(X_train2, y_train2)\ny_pred = ls.predict(X_test2)\nRMSE_ls = sqrt(mean_squared_error(y_true = y_test2, y_pred = y_pred))\nlsfc = pd.DataFrame(y_pred)\nlsfc.columns = [\"Prediction_Fatalities\"]\nprint(RMSE_ls)\nrmsefc.append(RMSE_ls)\nlsfc","2e2e48e6":"sub = submission[[\"ForecastId\"]]\nsubmit = pd.concat([lscc,lsfc,sub],axis=1)\nsubmit.head()","34816c77":"lr = LinearRegression()\nlr.fit(X_train, y_train)\ny_pred = lr.predict(X_test)\nRMSE_lr = sqrt(mean_squared_error(y_true = y_test, y_pred = y_pred))\nlrcc = pd.DataFrame(y_pred)\nlrcc.columns = [\"Prediction_Confirmed\"]\nprint(RMSE_lr)\nrmsecc.append(RMSE_lr)\nlrcc","7c74bf3c":"lr.fit(X_train2, y_train2)\ny_pred = lr.predict(X_test2)\nRMSE_lr = sqrt(mean_squared_error(y_true = y_test2, y_pred = y_pred))\nlrfc = pd.DataFrame(y_pred)\nlrfc.columns = [\"Prediction_Fatalities\"]\nprint(RMSE_lr)\nrmsefc.append(RMSE_lr)\nlrfc","910ed736":"sub = submission[[\"ForecastId\"]]\nsubmit = pd.concat([lrcc,lrfc,sub],axis=1)\nsubmit.head()","97063f59":"pip install pmdarima","9856a10e":"#Checking for the best model\nfrom pmdarima import auto_arima\nstepwise_fit = auto_arima(traincc, trace=True,\nsuppress_warnings=True)","351f4f34":"#Checking for the best model\nfrom pmdarima import auto_arima\nstepwise_fit = auto_arima(trainfc, trace=True,\nsuppress_warnings=True)","5229f885":"def mape(y2, y_pred):\n    return sqrt(mean_squared_error(y_true = y2, y_pred = y_pred))\n\n#Arima modeling for ts\ndef arima(ts,test):\n    p=d=q=range(0,6)\n    a=99999\n    pdq=list(itertools.product(p,d,q))\n    \n    #Determining the best parameters\n    for var in pdq:\n        try:\n            model = ARIMA(ts, order=var)\n            result = model.fit()\n\n            if (result.aic<=a) :\n                a=result.aic\n                param=var\n        except:\n            continue\n            \n    #Modeling\n    model = ARIMA(ts, order=param)\n    result = model.fit()\n    result.plot_predict(start=int(len(ts) * 0.7), end=int(len(ts) * 1.2))\n    pred=result.forecast(steps=len(test))[0]\n    #Plotting results\n    f,ax=plt.subplots()\n    plt.plot(pred,c='green', label= 'predictions')\n    plt.plot(test, c='red',label='real values')\n    plt.legend()\n    plt.title('True vs predicted values')\n    #Printing the error metrics\n    print(result.summary())        \n    \n    print('\\nMean squared error: %f'%mape(test,pred))\n    return (pred)","6c68dc91":"pred=arima(traincc,testcc)\nRMSE_arimacc=sqrt(mean_squared_error(y_true = testcc, y_pred = pred))\nrmsecc.append(RMSE_arimacc)","b0902e3b":"pred=arima(trainfc,testfc)\nRMSE_arimafc=sqrt(mean_squared_error(y_true = testfc, y_pred = pred))\nrmsefc.append(RMSE_arimafc)","afea8243":"rmsecc","c69c7ebe":"rmsefc","14f1cf93":"tablecc=pd.DataFrame({'RMSE':rmsecc,'Algorithmes':['AR Model','RandomForestRegressor','XGBRegressor','DecisionTreeRegressor',\n                                                   'AdaBoostRegressor','Lasso','LinearRegression','ARIMA']})\ntablecc","ca61c829":"tablefc=pd.DataFrame({'RMSE':rmsefc,'Algorithmes':['AR Model','RandomForestRegressor','XGBRegressor','DecisionTreeRegressor',\n                                                   'AdaBoostRegressor','Lasso','LinearRegression','ARIMA']})\ntablefc","27e05333":"## Top 20 ","722e2aca":"### Remarque : p > 0.05 donc les donn\u00e9es sont non stationnaires","fdd31a5b":"Les TIMESERIES suppose une relation entre une observation et l'observation pr\u00e9c\u00e9dente. Les observations pr\u00e9c\u00e9dentes dans une s\u00e9rie chronologique sont appel\u00e9es des retards, avec l'observation au pas de temps pr\u00e9c\u00e9dent appel\u00e9 lag = 1, l'observation \u00e0 deux pas de temps il y a lag = 2, et ainsi de suite. Un type de graphique utile pour explorer la relation entre chaque observation et un d\u00e9calage de cette observation est appel\u00e9 le scatter plot. Pandas a une fonction int\u00e9gr\u00e9e pour exactement cela appel\u00e9 le  lag plot. Il trace l'observation au temps t sur l'axe des x et le d\u00e9calage = 1 observation (t-1) sur l'axe des y.\n\nSi les points se regroupent le long d'une diagonale allant du bas \u00e0 gauche vers le haut \u00e0 droite du graphique, cela sugg\u00e8re une relation de corr\u00e9lation positive. Si les points se regroupent le long d'une ligne diagonale allant du haut \u00e0 gauche vers le bas \u00e0 droite, cela sugg\u00e8re une relation de corr\u00e9lation n\u00e9gative. Les deux relations sont bonnes car elles peuvent \u00eatre mod\u00e9lis\u00e9es. Plus de points plus serr\u00e9s dans la ligne diagonale sugg\u00e8rent une relation plus forte et une plus grande diffusion \u00e0 partir de la ligne sugg\u00e8re une relation plus faible. Une balle au milieu ou une propagation \u00e0 travers l'intrigue sugg\u00e8re une relation faible ou inexistante.","387c4383":"## Autocorrelation Plots","11ddf36b":"# Create Time Series for US","bc679f55":"# Checking For Stationarity","e2cb3e88":"# Advanced Visualisations ","1fa19e84":"# Linear Regression","2f48d7f4":"# Lasso","1709109d":"# Importing DataSet","deb19409":"### Remarque : p > 0.05 donc les donn\u00e9es sont non stationnaires","4e5b2373":"# ARIMA Model","b9247d11":"# Importing Necessary Packages","0bd95f8f":"## Lag Scatter Plots","6c6ce8b3":"## Confirmed COVID-19 cases per day in China","2b2a293f":"#### Pour \u00eatre s\u00fbr que les donn\u00e9es sont stationnaires ou non, nous ex\u00e9cutons un test statistique fixe en utilisant le code suivant:","00587873":"# Data Cleaning ","0c0c9d44":"# Visualisation & Analysis Data","a1a440fa":"# AR Model","05eaf733":"## Confirmed COVID-19 cases per day in US","a5b4216e":"### Note: From this graph we can say that with a short period of time the virus spread to the United States and held on to the 1st place.","2410e9a2":"### Note: From the graph above we can say that in China this virus started and has continued to spread. From this region, the virus began to spread to all parts of the world. In China, confirmed cases are increasing day by day.","2a42bd62":"### Note: From the charts above, we can say that the United States has the most confirmed cases and is followed by Italy. The virus started in China but the virus shows a bigger impact on the United States and Italy than China.","f36815cf":"# Comparative table of the different models","80050f12":"## Confirmed COVID-19 Cases by Country (Map)","5413642b":"# Time evaluation","c8943845":"# Random Forest Regressor","2b2ce87c":"## Confirmed COVID-19 Cases by Country","457d92ee":"## Confirmed COVID-19 cases per day in Italy","372a9a62":"## Deaths COVID-19 Cases by Country","08e82d34":"## Converting series to stationary","eba2a5f1":"# XGBoost","4bae7d5d":"# Prepare Training","6fdc7be2":"# AdaBoost","7f5aad90":"Nous pouvons quantifier la force et le type de relation entre les observations et leurs retards. Dans les statistiques, cela s'appelle la corr\u00e9lation, et lorsqu'elle est calcul\u00e9e par rapport aux valeurs de retard dans les s\u00e9ries temporelles, elle est appel\u00e9e autocorr\u00e9lation (auto-corr\u00e9lation). Une valeur de corr\u00e9lation calcul\u00e9e entre deux groupes de nombres, comme les observations et leurs valeurs de d\u00e9calage = 1, donne un nombre compris entre -1 et 1. Le signe de ce nombre indique une corr\u00e9lation n\u00e9gative ou positive respectivement. Une valeur proche de z\u00e9ro sugg\u00e8re une faible corr\u00e9lation, tandis qu'une valeur plus proche de -1 ou 1 indique une forte corr\u00e9lation.\n\nDes valeurs de corr\u00e9lation, appel\u00e9es coeficients de corr\u00e9lation, peuvent \u00eatre calcul\u00e9es pour chaque observation et diff\u00e9rentes valeurs de retard. Une fois calcul\u00e9, un graphique peut \u00eatre cr\u00e9\u00e9 pour aider \u00e0 mieux comprendre comment cette relation change avec le d\u00e9calage. Ce type de trac\u00e9 est appel\u00e9 autocorrelation plot.","5d15035a":"## Cases over time","cb6c0ac0":"# Note: XGBoost is the highest performing algorithm for deaths prediction","a02b58bf":"## Deaths COVID-19 Cases by Country (Map)","f8a35766":"### Note: In Italy, the spread of the virus lasted a long time and therefore affected more people. But in the United States in a short time, the spread is more in this way the United States had a great impact","7ef4a8ee":"### Note: From the charts above, we can say that Italy has the most deaths and is followed by Spain. The virus started in China but the virus shows a greater impact on Italy than China in terms of deaths.","368e6e5b":"# Decision Tree Regressor","66a1658e":"# Note: ARIMA is the algorithm with the highest performance for the prediction of confirmed cases ","a9285d3d":"# Explore Time Series Data"}}