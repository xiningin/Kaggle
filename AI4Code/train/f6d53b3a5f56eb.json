{"cell_type":{"1da1a7e9":"code","d9afd9c1":"code","1581fda7":"code","a3048e4e":"code","57406dcf":"code","e7c341f3":"code","f2c2ec9b":"code","db424aeb":"code","de95c362":"code","7c6f6d4a":"code","80e2b97e":"code","7ff3be85":"code","2717edef":"code","0c560b03":"code","e1ddcd3a":"code","4de27e5d":"code","c99698e3":"code","fe5a118e":"code","018bfdf2":"code","0c4d0a57":"code","da0e7886":"code","3ba241be":"code","5161d37c":"code","3c86fee1":"code","1b07871a":"code","f679a2cd":"code","9f25e354":"code","5c965d47":"code","6344744c":"code","ff734cb8":"code","b670bb95":"code","026ec9f1":"code","384ae12e":"code","9821c94a":"code","3a95c5f2":"code","71f7da56":"code","5e02e50b":"code","992f3ad1":"code","3b092685":"code","c1c6b3b5":"code","b4db94dc":"code","cc2c1141":"code","5706df65":"markdown","72d99f98":"markdown","77af974d":"markdown","52c54c11":"markdown","3516705a":"markdown","08798fdb":"markdown","dce8d4fa":"markdown","688cdcd5":"markdown","32296e2d":"markdown","0e6ea443":"markdown","e3543549":"markdown","dd4056b0":"markdown","d6348e16":"markdown","965490e8":"markdown","71b5d36e":"markdown","d837af10":"markdown","ec61d885":"markdown","89954d4e":"markdown"},"source":{"1da1a7e9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d9afd9c1":"df = pd.read_csv('\/kaggle\/input\/quickest-electric-cars-ev-database\/Quickestelectriccars-EVDatabase.csv')","1581fda7":"import seaborn as sns\nimport matplotlib.pyplot as plt","a3048e4e":"df.head()","57406dcf":"df.info()","e7c341f3":"df.isnull().sum()\n# as the price poitns of these vehicles has nothing to do with their performance, we'll ignore the \n# null price values","f2c2ec9b":"#If we hope to train a regression model to predict price point for electric vehicles, we'll have to clean \n# up the dat aa bit. \n\n# First, well have to handle the missing price data. As the price in UK column is missing more data,\n#we'll drop this column and make price predictions based on the price in Germany column.\n\n#We'll also drop the 'Name'\n\ndf.drop(['PriceinUK', 'Name'], axis =1 , inplace = True)\ndf.dropna(axis = 0, how = 'any', inplace = True)","db424aeb":"df['PriceinGermany (euros)'] = df['PriceinGermany'].apply(lambda x:x.split('\u20ac')[1]).apply(lambda x:x.split(','))\\\n.apply(lambda x:''.join(x))\ndf.drop('PriceinGermany', axis = 1, inplace = True)\ndf['PriceinGermany (euros)'] = list(map(float, df['PriceinGermany (euros)']))","de95c362":"# Making the subtitle column useable\ndf['subtitle (kWh)'] = df['Subtitle'].apply(lambda x:x.split()[4])\ndf.drop('Subtitle', axis = 1, inplace = True)\ndf['subtitle (kWh)'] = list(map(float, df['subtitle (kWh)']))","7c6f6d4a":"# I assume acceleration is really the 0 to 60 time in seconds???\ndf['acceleration (s)'] = df['Acceleration'].apply(lambda x:x.split()[0])\ndf.drop('Acceleration', axis = 1, inplace = True)\ndf['acceleration (s)'] = list(map(float, df['acceleration (s)']))","80e2b97e":"df['topspeed (km\/h)'] = df['TopSpeed'].apply(lambda x:x.split()[0])\ndf.drop('TopSpeed', axis = 1, inplace = True)\ndf['topspeed (km\/h)'] = list(map(float, df['topspeed (km\/h)']))","7ff3be85":"df['range (km)'] = df['Range'].apply(lambda x:x.split()[0])\ndf.drop('Range', axis = 1, inplace = True)\ndf['range (km)'] = list(map(float, df['range (km)']))","2717edef":"df['efficiency (Wh\/km)'] = df['Efficiency'].apply(lambda x:x.split()[0])\ndf.drop('Efficiency', axis = 1, inplace = True)\ndf['efficiency (Wh\/km)'] = list(map(float, df['efficiency (Wh\/km)']))","0c560b03":"# will have to look up what fast charge speed corresponds to\ndf['fastchargespeed (km\/h)'] = df['FastChargeSpeed'].apply(lambda x:x.split()[0])\ndf.drop('FastChargeSpeed', axis = 1, inplace = True)\ndf.drop(df[df['fastchargespeed (km\/h)'] == '-'].index, axis = 0, inplace = True)\ndf['fastchargespeed (km\/h)'] = list(map(float, df['fastchargespeed (km\/h)']))","e1ddcd3a":"drive_dummies = pd.get_dummies(df['Drive'],drop_first= True)\ndf.drop('Drive', axis = 1, inplace = True)\ndf = pd.concat([df, drive_dummies], axis = 1)","4de27e5d":"plt.figure(figsize= (8,6))\nsns.heatmap(df.corr(), annot = True, cmap = 'Spectral')\n# some interesting correlations to explore here","c99698e3":"# price vs. energy \nsns.scatterplot(x = 'PriceinGermany (euros)', y = 'subtitle (kWh)', data =df, hue = 'Front Wheel Drive')","fe5a118e":"# price vs. acceleration \nsns.scatterplot(x = 'PriceinGermany (euros)', y = 'acceleration (s)', data =df, hue = 'Front Wheel Drive')","018bfdf2":"# price vs. acceleration \nsns.scatterplot(x = 'PriceinGermany (euros)', y = 'topspeed (km\/h)', data =df, hue = 'Front Wheel Drive')","0c4d0a57":"# negative correlation between top speed and acceleration. \n# The front wheel drive cars in the dataset have the greatest acceleration\n# and the lowest top speed\nsns.scatterplot(x = 'acceleration (s)', y = 'topspeed (km\/h)', data = df,\\\n                hue = 'Front Wheel Drive')","da0e7886":"# strong positive correlation between top speed and range of vehicle. \n# front wheel drive vehicles have the least amount of range (and lowest top speeds)\nsns.scatterplot(x = 'range (km)', y = 'topspeed (km\/h)', data = df,   hue = 'Front Wheel Drive')","3ba241be":"# strong negative correlation between range and top speed\n\nsns.scatterplot(x = 'range (km)', y = 'acceleration (s)', data =df, hue = 'Front Wheel Drive' )","5161d37c":"sns.countplot(x = 'NumberofSeats', data = df, hue = 'Rear Wheel Drive')","3c86fee1":"# Positive correlation between the number of seats and efficieny. This is an interesting correlation \n# that, energeticlaly, one would expect to be inverted. \n# Do car manufacturers account for the number of seats in the efficiency rating?\n# One would also expect vehicles with larger efficiencies will have a greater range...\nsns.violinplot(x = 'NumberofSeats', y = 'efficiency (Wh\/km)', data =df)","1b07871a":"# somehow efficiency does not correlate with range. \n\n# it makes one wonder, is the efficiency quantification process the same for all vehicles? \n\nsns.scatterplot(x = 'efficiency (Wh\/km)', y = 'range (km)', data = df, hue = 'NumberofSeats')","f679a2cd":"# postive correlation between fast charge speed and range. \n# front wheel drive vehicles make up the bottom of the pack in both features. \nsns.scatterplot(x = 'fastchargespeed (km\/h)', y = 'range (km)', data = df, hue = 'Front Wheel Drive')","9f25e354":"# negative correlation between fast charge speed and acceleration\nsns.scatterplot(x = 'fastchargespeed (km\/h)', y = 'acceleration (s)', data = df, hue = 'Front Wheel Drive')","5c965d47":"# postive correlation between fast charge speed and topspeed\nsns.scatterplot(x = 'fastchargespeed (km\/h)', y = 'topspeed (km\/h)', data = df, hue = 'Front Wheel Drive')","6344744c":"# We'll train several regression models on this dataset","ff734cb8":"X = df.drop('PriceinGermany (euros)', axis = 1)\ny = df['PriceinGermany (euros)']","b670bb95":"from sklearn.model_selection import train_test_split","026ec9f1":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=101)","384ae12e":"from sklearn.linear_model import LinearRegression\nlr = LinearRegression()\nlr.fit(X_train,y_train)\nlr_pred = lr.predict(X_test)","9821c94a":"sns.scatterplot(x = lr_pred, y = y_test)","3a95c5f2":"from sklearn import metrics\nprint('MAE:', metrics.mean_absolute_error(y_test, lr_pred))\nprint('MSE:', metrics.mean_squared_error(y_test, lr_pred))\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, lr_pred)))\nprint('r2:', metrics.r2_score(y_test, lr_pred))\n\n#reported errors in euros\n#we'll use the MAE for comparison between models\n\nlr_MAE = metrics.mean_absolute_error(y_test, lr_pred)\nlr_r2 =  metrics.r2_score(y_test, lr_pred)","71f7da56":"from sklearn.tree import DecisionTreeRegressor\ndtr = DecisionTreeRegressor()\ndtr.fit(X_train, y_train)\ndtr_pred = dtr.predict(X_test)","5e02e50b":"print('MAE:', metrics.mean_absolute_error(y_test, dtr_pred))\nprint('MSE:', metrics.mean_squared_error(y_test, dtr_pred))\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, dtr_pred)))\nprint('r2:', metrics.r2_score(y_test, dtr_pred))\n\n\ndtr_MAE = metrics.mean_absolute_error(y_test, dtr_pred)\ndtr_r2 =  metrics.r2_score(y_test, dtr_pred)","992f3ad1":"from sklearn.ensemble import RandomForestRegressor\nrfr = RandomForestRegressor()\nrfr.fit(X_train, y_train)\nrfr_pred = rfr.predict(X_test)","3b092685":"print('MAE:', metrics.mean_absolute_error(y_test, rfr_pred))\nprint('MSE:', metrics.mean_squared_error(y_test, rfr_pred))\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, rfr_pred)))\nprint('r2:', metrics.r2_score(y_test, rfr_pred))\n\n\nrfr_MAE = metrics.mean_absolute_error(y_test, rfr_pred)\nrfr_r2 = metrics.r2_score(y_test, rfr_pred)","c1c6b3b5":"from xgboost import XGBRegressor\nxr = XGBRegressor()\nxr.fit(X_train, y_train)\nxr_pred = xr.predict(X_test)","b4db94dc":"print('MAE:', metrics.mean_absolute_error(y_test, xr_pred))\nprint('MSE:', metrics.mean_squared_error(y_test, xr_pred))\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, xr_pred)))\nprint('r2:', metrics.r2_score(y_test, xr_pred))\n\n\nxr_MAE = metrics.mean_absolute_error(y_test, xr_pred)\nxr_r2 = metrics.r2_score(y_test, xr_pred)","cc2c1141":"results = pd.DataFrame({'Model': ['Linear Regression', 'Decision Tree Regressor', 'Random Forest Regressor',\\\n                                  'XGBoost Regressor'], 'MAE': [lr_MAE, dtr_MAE, rfr_MAE, xr_MAE],\\\n                        'r2':[lr_r2, dtr_r2, rfr_r2, xr_r2] })\n\nresults","5706df65":"# No fantastic model performance. Random Forest Regressor Wins!","72d99f98":"# Price point prediction","77af974d":"# Decision Tree Regressor","52c54c11":"# range","3516705a":"# Drive","08798fdb":"# Linear Regression","dce8d4fa":"# Subtitle ","688cdcd5":"# top speed","32296e2d":"# Random Forest Regressor","0e6ea443":"# Price in Germany","e3543549":"# Price in UK","dd4056b0":"# Dataset split","d6348e16":"# fast charge speed?","965490e8":"# Acceleration ? (see comment below)","71b5d36e":"# XGBoost Regressor","d837af10":"# Results","ec61d885":"# EDA","89954d4e":"# Efficiency"}}