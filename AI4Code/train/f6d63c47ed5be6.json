{"cell_type":{"2245612f":"code","cf79c401":"code","a7341895":"code","e1b0a8ae":"code","46d03017":"code","2b8a0fb3":"code","8fa7832c":"code","ba893280":"markdown","3abde3b0":"markdown","28109bce":"markdown","fdf8bd1e":"markdown","88618b7b":"markdown","295270b0":"markdown","2e451ba8":"markdown","55e8189e":"markdown"},"source":{"2245612f":"import os\nimport cv2\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as patch\n\nimport torch.nn as nn\nfrom torch.utils.data import Dataset\nfrom torch.utils.data import DataLoader\nfrom torchvision import datasets\nfrom torchvision.transforms import ToTensor","cf79c401":"home_dir = \"..\/input\/nfl-health-and-safety-helmet-assignment\/\"\nfor files in os.listdir(home_dir):\n    if ('.csv' in files):\n        print(files,'\\n')\n        dataset = pd.read_csv(os.path.join(home_dir,files))\n        print(dataset.head(),'\\n')\n        print(\"---------------------------------\")","a7341895":"class NFLDataset(Dataset):\n    \"\"\"NFL Helmet Assignment Dataset\"\"\"\n    def __init__(self, path_to_labels, path_to_images):\n        self.bounding_boxes = pd.read_csv(path_to_labels['detection'])\n        self.tracking = pd.read_csv(path_to_labels['tracking'])\n        self.identity = pd.read_csv(path_to_labels['identity'])\n        self.image_info = pd.read_csv(path_to_labels['images'])\n        self.unique_img_info = path_to_labels['unqimgs']\n        self.image_dir = path_to_images\n    \n    def __len__(self):\n        return len(self.unique_img_info)\n       \n    def __getitem__(self, index):\n        image = self.unique_img_info['unqimgs'][index]\n        sample = {'image':image}\n        return sample","e1b0a8ae":"image_root_dir = '..\/input\/nfl-health-and-safety-helmet-assignment\/images'\ntrain_identity_labels = f'{home_dir}\/train_labels.csv'\ntrain_tracking_labels = f'{home_dir}\/train_player_tracking.csv'\ntrain_helmet_detection_labels = f'{home_dir}\/train_baseline_helmets.csv'\ntrain_image_labels = f'{home_dir}\/image_labels.csv'\n\nimgs = pd.read_csv(train_image_labels)\ndf = {'unqimgs':imgs.image.unique()}\nunique_imgs = pd.DataFrame(df)\n\npath_to_train_labels = {'identity':train_identity_labels, 'tracking': train_tracking_labels, \n                        'detection':train_helmet_detection_labels, 'images': train_image_labels,\n                       'unqimgs': unique_imgs}\n\ntrain_dataset = NFLDataset(path_to_train_labels, image_root_dir)","46d03017":"train_dataloader = DataLoader(train_dataset, batch_size=4, shuffle=False)","2b8a0fb3":"data_info = pd.read_csv(train_image_labels)\n\ndef _get_bbox_info(img_path):\n    indx = data_info[data_info['image']==img_path].index.tolist()\n    left = data_info['left'][indx].tolist()\n    top = data_info['top'][indx].tolist()\n    width = data_info['width'][indx].tolist()\n    height = data_info['height'][indx].tolist()\n    right = [x+y for x,y in zip(left,width)]\n    bottom = [x+y for x,y in zip(top,height)]\n    start_point = [(x,y) for x,y in zip(left,top)]\n    end_point = [(x,y) for x,y in zip(right,bottom)]\n    \n    return (start_point, end_point)\n    \ndef _draw_bbox(img, sp, ep):\n    return cv2.rectangle(img, sp, ep, (255,0,0), 2)    ","8fa7832c":"fig, ax = plt.subplots(nrows=2, ncols=2, figsize=(20,12))\nfor batch in train_dataloader:\n    for (index, img_path) in enumerate(batch['image']):\n        img = cv2.imread(f'{image_root_dir}\/{img_path}')\n        sp, ep = _get_bbox_info(img_path)\n        for (x,y) in zip(sp,ep):\n            img = _draw_bbox(img, x, y)         \n        ax[index\/\/2][index%2].imshow(img)\n    break    ","ba893280":"### Objective\n\nThe main objective is to track the player helmet assigning them proper identity, for better understanding of collision during game. For a given play a sideline and endzone view are taken. Overall the main aim is to detect and track multiple helmets. Detection involves predicting the right bounding boxes. The label assigned should be same as the one present on the jersey.    \n\n#### Datasets\nDirectory Information:\n* Train Data: train\/\n* Train Labels: train_labels.csv\n* Test Videoss: test\/\n* Images of Helmets: images\/\n* Bounding box info of helmets: image_labels.csv\n* Baseline helmet Detection Boxes: train_baseline_helmets.csv","3abde3b0":"### Import Libraries","28109bce":"### Using DataLoader to wrap over the dataset\nUsing Dataset and Dataloader helps simplify the overall pipeline. It helps in loading and iterating over the given dataset.  \nIt allows to load minibatch of data and shuffle it along the way.  \nThis helps in mutiprocessing while at the same time prevents us from loading the complete data in the memory.","fdf8bd1e":"### Visualize Data\nNow each iteration throgh the dataloader returns a batch of features and labels.  \nThe next() and iter() built in function works as its name.\n* **iter()** creates a stream of data to iterate over\n* **next()** selects the next data from the given stream  \nThis combination can be used on the train_dataset (instance of custom dataset) to iterate over our given dataset.","88618b7b":"Further details related to training and inference will be added soon","295270b0":"#### Exploring the csv files","2e451ba8":"### About Custom Datasets\nAn efficient way of loading datasets in pytorch, which helps in making the code more readable.  \nOur custom dataset inherits from the Dataset library and overrides the __len__ and __getitem__ methods  \n* **len** - returns the size of the dataset\n* **getitem** - for a given index returns the element at the index  \n\nA general approach:\n* load the csv files in the init method\n* load the images in the getitem magic function.   \nThis prevents loading all the images at once hence is memory efficient","55e8189e":"<span style=\"color:red\">**NOTE**<\/span>   In ***image_labels.csv*** since information about a single image is shared in multiple rows, using this directly for custom dataset is not recommended. Because when the data is loaded using dataloader with a particular batch size, for a single image bounding box information will be distributed among different batches which is not what we want.  \n\nInstead for a given image we want all the bounding boxes combined as its label. In the below cell this is done by creating a seperate dataframe consisting of only unique image name, which then used to load the image and all its corresponding bounding boxes together."}}