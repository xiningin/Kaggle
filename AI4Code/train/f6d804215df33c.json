{"cell_type":{"57a02e32":"code","ee89f3f4":"code","acfd1a8b":"code","e9abb4e3":"code","cee1a1df":"code","bcbf10a1":"code","3ee54182":"code","4c8a625d":"code","f5f1e58d":"code","25b67eb8":"code","c1ac11f9":"code","aade5821":"code","f3fbb590":"code","7b5d5c26":"code","4785e8f4":"code","440eb720":"code","624fea53":"code","86e01f69":"code","f6f4a21f":"code","b507ac6a":"code","1d11cdcf":"code","88cb5c8e":"code","f609813d":"code","3b3e086e":"code","a390f337":"code","f7647b38":"code","3cdd1eaa":"code","f873a9b1":"code","82ca6336":"code","a221201e":"code","e55f6fa6":"code","cfb6b9b1":"code","14cab03d":"code","b9c48cf7":"code","f80cf985":"code","90c17662":"code","ace68feb":"code","689918cc":"code","b98e22c5":"code","8a362380":"code","eb22514f":"code","a906275d":"code","8b85f018":"code","9218f4fc":"code","e296081d":"code","b0e985e3":"code","90fbb41b":"code","6db54172":"code","dbae3b24":"code","fbd1f266":"markdown","deebf6ae":"markdown","98d09ad8":"markdown","1804ca0b":"markdown","680f8ca2":"markdown","761b3638":"markdown","079fb902":"markdown","ad9a0b87":"markdown","11adaba0":"markdown","28643923":"markdown","ae1a788d":"markdown","9847e8e9":"markdown","43743307":"markdown","2a71c326":"markdown","e91ac15d":"markdown","6b9d7ab3":"markdown","aa64f402":"markdown"},"source":{"57a02e32":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","ee89f3f4":"import pandas as pd, numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport os\nprint(os.listdir(\"..\/input\"))\ntraindf = pd.read_csv('..\/input\/predict-the-churn-for-customer-dataset\/Train File.csv',index_col='customerID')\ntraindf.head(10)\n#Numerical fields- Senior Citizen, tenure,monthly charges, total charges","acfd1a8b":"traindf.info()","e9abb4e3":"#Finding Churn Percentage in dataset train\npercent=traindf['Churn'].value_counts(sort = True)\ncolor=['green','red']\nlabels=['No','Yes']\nplt.pie(percent,colors=color,labels=labels,autopct='%1.1f%%')\nplt.show()","cee1a1df":"traindf.describe()","bcbf10a1":"traindf.isnull().sum(axis=0)\n","3ee54182":"#Plotting bar for categorical variables\ntraindf.gender.value_counts(normalize=True).plot(kind='bar')\n","4c8a625d":"traindf.SeniorCitizen.value_counts(normalize=True).plot(kind='bar')","f5f1e58d":"traindf.Partner.value_counts(normalize=True).plot(kind='bar')","25b67eb8":"traindf.Dependents.value_counts(normalize=True).plot(kind='bar')\n","c1ac11f9":"traindf.tenure.value_counts(normalize=True).plot(kind='bar')","aade5821":"traindf.PhoneService.value_counts(normalize=True).plot(kind='bar')","f3fbb590":"traindf.MultipleLines.value_counts(normalize=True).plot(kind='bar')","7b5d5c26":"traindf.InternetService.value_counts(normalize=True).plot(kind='bar')\n","4785e8f4":"traindf.Contract.value_counts(normalize=True).plot(kind='bar')\n","440eb720":"traindf.PaymentMethod.value_counts(normalize=True).plot(kind='bar')","624fea53":"pairs = sns.pairplot(traindf, hue='Churn')\npairs.fig.set_size_inches(15,15)\nplt.show()","86e01f69":"#Totalcharges seems to be not numeric. so making Totalcharges to numeric. Using errors=\u2019coerce\u2019. It will replace all non-numeric values with NaN.\ntraindf['TotalCharges'] = pd.to_numeric(traindf['TotalCharges'], errors = 'coerce')\ntraindf.loc[traindf['TotalCharges'].isna()==True]\n#All values of TotalCharges are blank for Tenure 0. So instead of NAN, replace it with 0.\ntraindf[traindf['TotalCharges'].isna()==True] = 0","f6f4a21f":"#Categorical Variables: gender,Partner,Dependents,PhoneService,MultipleLines,InternetService,OnlineSecurity,OnlineBackup,\n#DeviceProtection,TechSupport,StreamingTV,StreamingMovies,Contract,PaperlessBilling,PaymentMethod,Churn\ntraindf= pd.get_dummies(traindf,columns=['gender','Partner','Dependents','PhoneService', 'MultipleLines','StreamingTV',\n       'StreamingMovies','Contract','PaperlessBilling','InternetService','PaymentMethod','OnlineSecurity','OnlineBackup','DeviceProtection','TechSupport','Churn'],drop_first=True)\n","b507ac6a":"traindf.info()","1d11cdcf":"#Find correlation to figure out which customer feature need to include in churn model\ncorrs=traindf.corr()","88cb5c8e":"corrs","f609813d":"fig,ax=plt.subplots(figsize=(20,20))\nsns.heatmap(corrs,annot=True,cmap=\"Reds\",annot_kws={\"size\":8},ax=ax)  ","3b3e086e":"#As TotalCharges highly correlated with Tenure and Monthly Charges; drop TotalCharges variable.\ntraindf.pop('TotalCharges')","a390f337":"from sklearn.model_selection import train_test_split\ntrain, test = train_test_split(traindf, test_size = 0.25)\n\ntrain_y = train['Churn_No']\ntest_y = test['Churn_No']\n\ntrain_x = train\ntrain_x.pop('Churn_No')\ntest_x = test\ntest_x.pop('Churn_No')\ntest_x","f7647b38":"train.shape, test.shape","3cdd1eaa":"#Precision tells us how many churned users did our classifier predicted correctly. On the other side, recall tell us how many churned users it mi\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import confusion_matrix, classification_report\n\nlogreg = LogisticRegression()\nlogreg.fit(X=train_x, y=train_y)\n\n","f873a9b1":"logreg.coef_","82ca6336":"train_y_pred = logreg.predict(train_x)\ntest_y_pred = logreg.predict(test_x)","a221201e":"from sklearn.metrics import accuracy_score\naccuracy_score(train_y, train_y_pred)","e55f6fa6":"accuracy_score(test_y, test_y_pred)","cfb6b9b1":"preds=logreg.predict(test_x[train_x.keys()])\npreds=1-preds\ndf_pred=pd.DataFrame()\ndf_pred","14cab03d":"# To get the weights of all the variables\nweights = pd.Series(logreg.coef_[0], index=train.columns.values)\nweights.sort_values(ascending = False)","b9c48cf7":"train.info()","f80cf985":"test.info()","90c17662":"from sklearn.metrics import confusion_matrix","ace68feb":"confusion_matrix(train_y, train_y_pred)","689918cc":"accuracy_score(test_y, test_y_pred)","b98e22c5":"confusion_matrix=confusion_matrix(test_y, test_y_pred)","8a362380":"#Precision tells us how many churned users did our classifier predicted correctly. On the other side, recall tell us how many churned users it mi\nprint('Intercept: ' + str(logreg.intercept_))\nprint('Regression: ' + str(logreg.coef_))\nprint('Accuracy of logistic regression classifier on test set: {:.2f}'.format(logreg.score(test_x, test_y)))\nprint(classification_report(test_y, test_y_pred))\n\nconfusion_matrix_df = pd.DataFrame(confusion_matrix, ('No churn', 'Churn'), ('No churn', 'Churn'))\nheatmap = sns.heatmap(confusion_matrix_df, annot=True, annot_kws={\"size\": 20}, fmt=\"d\")\nheatmap.yaxis.set_ticklabels(heatmap.yaxis.get_ticklabels(), rotation=0, ha='right', fontsize = 14)\nheatmap.xaxis.set_ticklabels(heatmap.xaxis.get_ticklabels(), rotation=45, ha='right', fontsize = 14)\nplt.ylabel('True label', fontsize = 14)\nplt.xlabel('Predicted label', fontsize = 14)","eb22514f":"traindf['Churn_Yes'].value_counts()","a906275d":"traindf['Churn_No'].value_counts()","8b85f018":"df_test = pd.read_csv('..\/input\/predict-the-churn-for-customer-dataset\/Test File.csv')","9218f4fc":"df_concat","e296081d":"data\ndata.index.names = ['customerID']","b0e985e3":"df_test.info()","90fbb41b":"data=data.rename(columns={'Churn_No': 'Churn'})\n","6db54172":"data.info()","dbae3b24":"\nChurn=pd.DataFrame(test_y_pred)\nsubmission=pd.concat([traindf['customerID'],Churn],axis=1)\nsubmission=submission.set_index(\"customerID\", inplace = False)\nsubmission=submission.rename(columns={0:'Churn'})\nsubmission['Churn'] = np.where(submission['Churn']==1, 'Yes', 'No')\nsubmission.to_csv('jis.csv')","fbd1f266":"**Exploratory Data Analysis**\n","deebf6ae":"**Predictive Modelling using Logistic Regression**","98d09ad8":"**Visualising pairwise associations**","1804ca0b":"**Importing Libraries and getting data**","680f8ca2":"no null values","761b3638":"**\nSome variables have a positive relation to our predicted variable and some have a negative relation. A positive value has a positive impact on our predicted variable Churn. Factors which have negative relation such as InternetService_Fiber optic,Contract_Month-to-month,SeniorCitizen,PaperlessBilling_Yes,tenure_group,PaperlessBilling plays a role in customer churn.\n\nCustomers in a month-to-month contract, with PaperlessBilling and are within 12 months tenure, are more likely to churn; On the other hand, customers with one or two year contract, with longer than 12 months tenure, that are not using PaperlessBilling, are less likely to churn.Gender Does'nt Play an important Role in Predicting Our Target Variable.\n\nMost of the People that Were Partner will Stay Longer with The Company. Here We can See Tenure and Total Charges as well as Monthly charges and Total Charges are correlated with each other. \n**","079fb902":"No trend between Churn Rate and Monthly\/Total Charges. High tenure means low churn\n","ad9a0b87":"**Testing the model**","11adaba0":"**Convert categorical variables into numerical variables**","28643923":"**Avoiding MultiColinearity**","ae1a788d":"**Finding Correlation between customer data features and customer churn**","9847e8e9":"Total charges and monthly charges are highly correlated.\nCorrelated variables-tenure-TotalCharges,InternetService-MonthlyCharges,Contract-Tenure,MonthlyCharges-TotalCharges,MonthlyCharges-StreamingTV,StreamingMovies,MonthlyCharges-InternetService\n","43743307":"3 numeric and 18 categorical variables","2a71c326":"\n\n\n\n26.5% Of the total amount of customer churn.\n","e91ac15d":"**Confusion Matrix on Train Data**","6b9d7ab3":"1) Looking for null values in the dataset","aa64f402":"2)Converting Numerical Features From Object"}}