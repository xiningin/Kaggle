{"cell_type":{"5821b41a":"code","8ab0d7b0":"code","9f1577b0":"code","e591f857":"code","6d7aa322":"code","d0998a6f":"code","8993a10b":"code","f9d73828":"code","fe95ab9c":"code","6a2d70ca":"code","16a1ddbd":"code","29e413ac":"code","862e7018":"code","832d3cde":"code","d088924b":"code","2a6ea372":"code","3b1acefc":"code","de685b08":"code","1ff65c65":"code","12e29f7b":"code","bf382a40":"code","23a696ff":"markdown","5456ff95":"markdown","92f40669":"markdown","4fedf78a":"markdown","d9469afb":"markdown","4bc610c9":"markdown","be4b1ed6":"markdown","7c6746e3":"markdown","01c35933":"markdown","b1456772":"markdown","c3d05633":"markdown","13bce4b1":"markdown","f3c3a8c2":"markdown","bc4667a5":"markdown","2d24135f":"markdown","07652fad":"markdown","2120119b":"markdown","40fd872a":"markdown","6bc3755b":"markdown","d3477efe":"markdown","6d168d79":"markdown","1607b234":"markdown","9f8554a9":"markdown","8a36fc0f":"markdown","1b7bdc93":"markdown","b9d5b380":"markdown","49ca1848":"markdown","d1e54d35":"markdown"},"source":{"5821b41a":"# @title Tutorial slides\n\n# @markdown These are the slides for the videos in this tutorial\n\n# @markdown If you want to locally download the slides, click [here](https:\/\/osf.io\/dftym\/download)\nfrom IPython.display import IFrame\nIFrame(src=f\"https:\/\/mfr.ca-1.osf.io\/render?url=https:\/\/osf.io\/dftym\/?direct%26mode=render%26action=download%26mode=render\", width=854, height=480)","8ab0d7b0":"# @title Install dependencies\n!pip install git+https:\/\/github.com\/NeuromatchAcademy\/evaltools --quiet\nfrom evaltools.airtable import AirtableForm\n\n# generate airtable form\natform = AirtableForm('appn7VdPRseSoMXEG','W2D5_T2','https:\/\/portal.neuromatchacademy.org\/api\/redirect\/to\/9c55f6cb-cdf9-4429-ac1c-ec44fe64c303')","9f1577b0":"# Imports\nimport torch\nimport numpy as np\nimport matplotlib.pyplot as plt","e591f857":"# @title Figure settings\nimport ipywidgets as widgets       # interactive display\n%config InlineBackend.figure_format = 'retina'\nplt.style.use(\"https:\/\/raw.githubusercontent.com\/NeuromatchAcademy\/content-creation\/main\/nma.mplstyle\")","6d7aa322":"# @title Plotting functions\n\nld_true = [-7.0066e-01, -2.6368e-01, -2.4250e+00, -2.0247e+00, -1.1795e+00,\n        -4.5558e-01, -7.1316e-01, -1.0932e-01, -7.8608e-01, -4.5838e-01,\n        -1.0530e+00, -9.1201e-01, -3.8020e+00, -1.7787e+00, -1.2246e+00,\n        -6.5677e-01, -3.6001e-01, -2.2313e-01, -1.8262e+00, -1.2649e+00,\n        -3.8330e-01, -8.8619e-02, -9.2357e-01, -1.3450e-01, -8.6891e-01,\n        -5.9257e-01, -4.8415e-02, -3.3197e+00, -1.6862e+00, -9.8506e-01,\n        -1.1871e+00, -7.0422e-02, -1.7378e+00, -1.3099e+00, -1.8926e+00,\n        -3.4508e+00, -1.5696e+00, -7.2787e-02, -3.2420e-01, -2.9795e-01,\n        -6.4189e-01, -1.4120e+00, -5.3684e-01, -3.4066e+00, -1.9753e+00,\n        -1.4178e+00, -2.0399e-01, -2.3173e-01, -1.2792e+00, -7.2990e-01,\n        -1.9872e-01, -2.9378e-03, -3.5890e-01, -5.6643e-01, -1.8003e-01,\n        -1.5818e+00, -5.2227e-01, -2.1862e+00, -1.8743e+00, -1.4200e+00,\n        -3.1988e-01, -3.5513e-01, -1.5905e+00, -4.2916e-01, -2.5556e-01,\n        -8.2807e-01, -6.5568e-01, -4.8475e-01, -2.1049e-01, -2.0104e-02,\n        -2.1655e+00, -1.1496e+00, -3.6168e-01, -8.9624e-02, -6.7098e-02,\n        -6.0623e-02, -5.1165e-01, -2.7302e+00, -6.0514e-01, -1.6756e+00,\n        -3.3807e+00, -5.7368e-02, -1.2763e-01, -6.6959e+00, -5.2157e-01,\n        -8.7762e-01, -8.7295e-01, -1.3052e+00, -3.6777e-01, -1.5904e+00,\n        -3.8083e-01, -2.8388e-01, -1.5323e-01, -3.7549e-01, -5.2722e+00,\n        -1.7393e+00, -2.8814e-01, -5.0310e-01, -2.2077e+00, -1.5507e+00,\n        -6.8569e-01, -1.4620e+00, -9.2639e-02, -1.4160e-01, -3.6734e-01,\n        -1.0053e+00, -6.7353e-01, -2.2676e+00, -6.0812e-01, -1.0005e+00,\n        -4.2908e-01, -5.1369e-01, -2.2579e-02, -1.8496e-01, -3.4798e-01,\n        -7.3089e-01, -1.1962e+00, -1.6095e+00, -1.7558e-01, -3.3166e-01,\n        -1.1445e+00, -2.4674e+00, -5.0600e-01, -2.0727e+00, -5.4371e-01,\n        -8.0499e-01, -3.0521e+00, -3.6835e-02, -2.0485e-01, -4.6747e-01,\n        -3.6399e-01, -2.6883e+00, -1.9348e-01, -3.1448e-01, -1.6332e-01,\n        -3.2233e-02, -2.3336e-01, -2.6564e+00, -1.2841e+00, -1.3561e+00,\n        -7.4717e-01, -2.7926e-01, -8.7849e-01, -3.3715e-02, -1.4933e-01,\n        -2.7738e-01, -1.6899e+00, -1.5758e+00, -3.2608e-01, -6.5770e-01,\n        -1.7136e+00, -5.8316e+00, -1.1988e+00, -8.3828e-01, -1.8033e+00,\n        -2.3017e-01, -8.9936e-01, -1.1917e-01, -1.6659e-01, -2.7669e-01,\n        -1.2955e+00, -1.2076e+00, -2.2793e-01, -1.0528e+00, -1.4894e+00,\n        -5.7428e-01, -7.3208e-01, -9.5673e-01, -1.6617e+00, -3.9169e+00,\n        -1.2182e-01, -3.8092e-01, -1.1924e+00, -2.4566e+00, -2.7350e+00,\n        -2.8332e+00, -9.1506e-01, -6.7432e-02, -7.8965e-01, -2.0727e-01,\n        -3.4615e-02, -2.8868e+00, -2.1218e+00, -1.2368e-03, -9.0038e-01,\n        -5.3746e-01, -5.4080e-01, -3.1625e-01, -1.1786e+00, -2.2797e-01,\n        -1.1498e+00, -1.3978e+00, -1.9515e+00, -1.1614e+00, -5.1456e-03,\n        -1.9316e-01, -1.3849e+00, -9.2799e-01, -1.1649e-01, -2.3837e-01]\n\n\ndef plotting_ld(ld, true=ld_true):\n  fig, ax = plt.subplots(figsize=(7, 7))\n  ax.plot([-6, 1], [-6, 1], label=\"Ground Truth\")\n  ax.scatter(true, ld, marker=\"x\",\n             label=\"Your implementation\")\n  ax.set_xlabel(\"Loss from oracle implementation\")\n  ax.set_ylabel(\"Loss from your implementation\")\n  ax.legend()\n  ax.set_title(\"Discriminator Loss\")\n\n\nlg_true = [-7.0066e-01, -2.6368e-01, -2.4250e+00, -2.0247e+00, -1.1795e+00,\n        -4.5558e-01, -7.1316e-01, -1.0932e-01, -7.8608e-01, -4.5838e-01,\n        -1.0530e+00, -9.1201e-01, -3.8020e+00, -1.7787e+00, -1.2246e+00,\n        -6.5677e-01, -3.6001e-01, -2.2313e-01, -1.8262e+00, -1.2649e+00,\n        -3.8330e-01, -8.8619e-02, -9.2357e-01, -1.3450e-01, -8.6891e-01,\n        -5.9257e-01, -4.8415e-02, -3.3197e+00, -1.6862e+00, -9.8506e-01,\n        -1.1871e+00, -7.0422e-02, -1.7378e+00, -1.3099e+00, -1.8926e+00,\n        -3.4508e+00, -1.5696e+00, -7.2787e-02, -3.2420e-01, -2.9795e-01,\n        -6.4189e-01, -1.4120e+00, -5.3684e-01, -3.4066e+00, -1.9753e+00,\n        -1.4178e+00, -2.0399e-01, -2.3173e-01, -1.2792e+00, -7.2990e-01,\n        -1.9872e-01, -2.9378e-03, -3.5890e-01, -5.6643e-01, -1.8003e-01,\n        -1.5818e+00, -5.2227e-01, -2.1862e+00, -1.8743e+00, -1.4200e+00,\n        -3.1988e-01, -3.5513e-01, -1.5905e+00, -4.2916e-01, -2.5556e-01,\n        -8.2807e-01, -6.5568e-01, -4.8475e-01, -2.1049e-01, -2.0104e-02,\n        -2.1655e+00, -1.1496e+00, -3.6168e-01, -8.9624e-02, -6.7098e-02,\n        -6.0623e-02, -5.1165e-01, -2.7302e+00, -6.0514e-01, -1.6756e+00,\n        -3.3807e+00, -5.7368e-02, -1.2763e-01, -6.6959e+00, -5.2157e-01,\n        -8.7762e-01, -8.7295e-01, -1.3052e+00, -3.6777e-01, -1.5904e+00,\n        -3.8083e-01, -2.8388e-01, -1.5323e-01, -3.7549e-01, -5.2722e+00,\n        -1.7393e+00, -2.8814e-01, -5.0310e-01, -2.2077e+00, -1.5507e+00]\n\n\ndef plotting_lg(lg, true=lg_true):\n  fig, ax = plt.subplots(figsize=(7, 7))\n  ax.plot([-6, 1], [-6, 1], label=\"Ground Truth\")\n  ax.scatter(true, lg, marker=\"x\",\n             label=\"Your implementation\")\n  ax.set_xlabel(\"Loss from oracle implementation\")\n  ax.set_ylabel(\"Loss from your implementation\")\n  ax.legend()\n  ax.set_title(\"Generator loss\")\n\n\ndef plotting_ratio_impl(ax, x_real, x_fake, ratio, yscale=\"linear\"):\n  dist_p = torch.distributions.normal.Normal(loc=0, scale=1)\n  dist_q = torch.distributions.normal.Normal(loc=-2, scale=1)\n  x = torch.linspace(-3, 5, 100)\n  prob_p = torch.exp(dist_p.log_prob(x))\n  prob_q = torch.exp(dist_q.log_prob(x))\n  trueRatio = prob_p \/ prob_q\n  ax.plot(x, trueRatio, label=\"True tatio\")\n\n  x = torch.cat([x_real, x_fake])\n  ax.scatter(x[:,0][::10], ratio[:,0][::10], marker=\"x\",\n             label=\"Ratio from discriminator\")\n  ax.hist(x_real[:,0], density=True, bins=50, histtype=\"step\", label=\"Real\")\n  ax.hist(x_fake[:,0], density=True, bins=50, histtype=\"step\", label=\"Fake\")\n  ax.set_yscale(yscale)\n  title = \"Densities and the ratio from discriminator\"\n  if yscale == \"log\":\n    title += \" in log scale\"\n  ax.set_title(title)\n  ax.legend()\n\n\ndef plotting_ratio(x_real, x_fake, ratio):\n  fig, axes = plt.subplots(1, 2, figsize=(2 * 7, 7))\n  plotting_ratio_impl(axes[0], x_real, x_fake, ratio, yscale=\"linear\")\n  plotting_ratio_impl(axes[1], x_real, x_fake, ratio, yscale=\"log\")\n\n\nclass Interactive:\n  def display_widgets(self):\n    for widget in self.widgets:\n      display(widget)\n\n  def __init__(self, widgets, handler):\n    def handler_with_extra_steps(b):\n      clear_output(wait=True)\n      handler(*map(lambda w: w.value, widgets))\n      self.display_widgets()\n    self.widgets = widgets\n    for widget in self.widgets:\n      widget.observe(handler_with_extra_steps,\n                     names=['value'])\n    handler(*map(lambda w: w.value, widgets))\n    self.display_widgets()\n\n\n# Using Interactive\n# All widgets: https:\/\/ipywidgets.readthedocs.io\/en\/latest\/examples\/Widget%20List.html\n\n\ndef make_plot(xmax, title, ftype):\n  fig, ax = plt.subplots()\n  x = np.linspace(-2, xmax, 100)\n  if ftype == \"sin\":\n    y = np.sin(x)\n  if ftype == \"cos\":\n    y = np.cos(x)\n  if ftype == \"tanh\":\n    y = np.tanh(x)\n  ax.scatter(x, y)\n  ax.set_xlim(-2.1, 2.1)\n  ax.set_ylim(-2, 2)\n  if title:\n    ax.set_title(f\"Range from -1 to {xmax}\")\n  return fig","d0998a6f":"# @title Set random seed\n\n# @markdown Executing `set_seed(seed=seed)` you are setting the seed\n\n# for DL its critical to set the random seed so that students can have a\n# baseline to compare their results to expected results.\n# Read more here: https:\/\/pytorch.org\/docs\/stable\/notes\/randomness.html\n\n# Call `set_seed` function in the exercises to ensure reproducibility.\nimport random\nimport torch\n\ndef set_seed(seed=None, seed_torch=True):\n  if seed is None:\n    seed = np.random.choice(2 ** 32)\n  random.seed(seed)\n  np.random.seed(seed)\n  if seed_torch:\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed_all(seed)\n    torch.cuda.manual_seed(seed)\n    torch.backends.cudnn.benchmark = False\n    torch.backends.cudnn.deterministic = True\n\n  print(f'Random seed {seed} has been set.')\n\n\n# In case that `DataLoader` is used\ndef seed_worker(worker_id):\n  worker_seed = torch.initial_seed() % 2**32\n  np.random.seed(worker_seed)\n  random.seed(worker_seed)","8993a10b":"# @title Set device (GPU or CPU). Execute `set_device()`\n# especially if torch modules used.\n\n# inform the user if the notebook uses GPU or CPU.\n\ndef set_device():\n  device = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n  if device != \"cuda\":\n    print(\"WARNING: For this notebook to perform best, \"\n        \"if possible, in the menu under `Runtime` -> \"\n        \"`Change runtime type.`  select `GPU` \")\n  else:\n    print(\"GPU is enabled in this notebook.\")\n\n  return device","f9d73828":"SEED = 2021\nset_seed(seed=SEED)\nDEVICE = set_device()","fe95ab9c":"# @title Video 1: Generative Adversarial Networks\nfrom ipywidgets import widgets\n\nout2 = widgets.Output()\nwith out2:\n  from IPython.display import IFrame\n  class BiliVideo(IFrame):\n    def __init__(self, id, page=1, width=400, height=300, **kwargs):\n      self.id=id\n      src = \"https:\/\/player.bilibili.com\/player.html?bvid={0}&page={1}\".format(id, page)\n      super(BiliVideo, self).__init__(src, width, height, **kwargs)\n\n  video = BiliVideo(id=f\"BV1o64y1i7xA\", width=854, height=480, fs=1)\n  print(\"Video available at https:\/\/www.bilibili.com\/video\/{0}\".format(video.id))\n  display(video)\n\nout1 = widgets.Output()\nwith out1:\n  from IPython.display import YouTubeVideo\n  video = YouTubeVideo(id=f\"FmUbll93kms\", width=854, height=480, fs=1, rel=0)\n  print(\"Video available at https:\/\/youtube.com\/watch?v=\" + video.id)\n  display(video)\n\nout = widgets.Tab([out1, out2])\nout.set_title(0, 'Youtube')\nout.set_title(1, 'Bilibili')\n\n# add event to airtable\natform.add_event('Video 1: Generative Adversarial Networks')\n\ndisplay(out)","6a2d70ca":"# @markdown *Execute this cell to enable helper functions*\n\ndef get_data():\n  return \"get_data\"\n\n\nclass Disc:\n\n  def loss(self, x_real, x_fake):\n    assert x_real == \"get_data\" and x_fake == \"gen.sample\",\"Inputs to disc.loss is wrong\"\n\n  def classify(self, x):\n    return \"disc.classify\"\n\n\nclass Gen:\n\n  def loss(self, x_fake, disc_fn):\n    assert x_fake == \"gen.sample\" and disc_fn(None) == \"disc.classify\", \"Inputs to gen.loss is wrong\"\n\n  def sample(self, num_samples):\n    return \"gen.sample\"\n\n\ndef backprop(loss, model):\n  pass\n\n\ndef update(model, grad):\n  pass","16a1ddbd":"def train_gan_iter(data, disc, gen):\n  \"\"\"Update the discriminator (`disc`) and the generator (`gen`) using `data`\n\n  Args:\n    data (ndarray): An array of shape (N,) that contains the data\n    disc (Disc): The discriminator\n    gen (Gen): The generator\n\n  Returns:\n  \"\"\"\n  #################################################\n  # Intructions for students:                        #\n  # Fill out ... in the function and remove below #\n  #################################################\n\n  # Number of samples in the data batch\n  num_samples = 200\n\n  # The data is the real samples\n  x_real = data\n\n  ## Discriminator training\n\n  # Ask the generator to generate some fake samples\n  x_fake = gen.sample(num_samples)\n\n  #################################################\n  ## TODO for students: details of what they should do ##\n  # Fill out function and remove\n  # raise NotImplementedError(\"Student exercise: Write code to compute disc_loss\")\n  #################################################\n  # Compute the discriminator loss\n  disc_loss = disc.loss(x_real, x_fake)\n\n  # Compute the gradient for discriminator\n  disc_grad = backprop(disc_loss, disc)\n\n  # Update the discriminator\n  update(disc, disc_grad)\n\n  ## Generator training\n\n  # Ask the generator to generate some fake samples\n  x_fake = gen.sample(num_samples)\n\n  #################################################\n  ## TODO for students: details of what they should do ##\n  # Fill out function and remove\n  # raise NotImplementedError(\"Student exercise: Write code to compute gen_loss\")\n  #################################################\n  # Compute the generator loss\n  gen_loss = gen.loss(x_fake, disc.classify) # see mistake\n\n  # Compute the gradient for generator\n  gen_grad = backprop(gen_loss, gen)\n\n  # Update the generator\n  update(gen, gen_grad)\n\n  print(\"Your implementation passes the check!\")\n\n  return None\n\n\n# add event to airtable\natform.add_event('Coding Exercise 1: The GAN training loop')\n\ndata = get_data()\ndisc = Disc()\ngen = Gen()\n## Uncomment below to check your function\ntrain_gan_iter(data, disc, gen)","29e413ac":"# @title Video 2: Principles of GANs\nfrom ipywidgets import widgets\n\nout2 = widgets.Output()\nwith out2:\n  from IPython.display import IFrame\n  class BiliVideo(IFrame):\n    def __init__(self, id, page=1, width=400, height=300, **kwargs):\n      self.id=id\n      src = \"https:\/\/player.bilibili.com\/player.html?bvid={0}&page={1}\".format(id, page)\n      super(BiliVideo, self).__init__(src, width, height, **kwargs)\n\n  video = BiliVideo(id=f\"BV1bo4y1U7YT\", width=854, height=480, fs=1)\n  print(\"Video available at https:\/\/www.bilibili.com\/video\/{0}\".format(video.id))\n  display(video)\n\nout1 = widgets.Output()\nwith out1:\n  from IPython.display import YouTubeVideo\n  video = YouTubeVideo(id=f\"U_4z5-hX1Kg\", width=854, height=480, fs=1, rel=0)\n  print(\"Video available at https:\/\/youtube.com\/watch?v=\" + video.id)\n  display(video)\n\nout = widgets.Tab([out1, out2])\nout.set_title(0, 'Youtube')\nout.set_title(1, 'Bilibili')\n\n# add event to airtable\natform.add_event('Video 2: Principles of GANs')\n\ndisplay(out)","862e7018":"# @markdown *Execute this cell to enable helper functions*\n\ndef get_data(num_samples=100, seed=0):\n  set_seed(seed)\n  return torch.randn([num_samples, 1])\n\n\nclass DummyGen:\n  def sample(self, num_samples=100, seed=1):\n    set_seed(seed)\n    return torch.randn([num_samples, 1]) + 2\n\n\nclass DummyDisc:\n  def classify(self, x, seed=0):\n    set_seed(seed)\n    return torch.rand([x.shape[0], ])","832d3cde":"def loss_disc(disc, x_real, x_fake):\n  \"\"\"Compute the discriminator loss for `x_real` and `x_fake` given `disc`\n\n  Args:\n    disc: The discriminator\n    x_real (ndarray): An array of shape (N,) that contains the real samples\n    x_fake (ndarray): An array of shape (N,) that contains the fake samples\n\n  Returns:\n    ndarray: The discriminator loss\n  \"\"\"\n\n  label_real = 1\n  #################################################\n  # TODO for students: Loss for real data\n  # raise NotImplementedError(\"Student exercise: Implement loss for real samples\")\n  #################################################\n  loss_real = label_real * torch.log(disc.classify(x_real))\n\n  label_fake = 0\n  #################################################\n  # TODO for students: Loss for fake data\n  # raise NotImplementedError(\"Student exercise: Implement loss for fake samples\")\n  #################################################\n  loss_fake = (1-label_fake) * torch.log(1 - disc.classify(x_fake))\n\n\n  return torch.cat([loss_real, loss_fake])\n\n\n# add event to airtable\natform.add_event('Coding Exercise 3.1: Implement Discriminator Loss')\n\ndisc = DummyDisc()\ngen = DummyGen()\n\nx_real = get_data()\nx_fake = gen.sample()\n\n## Uncomment to check your function\nld = loss_disc(disc, x_real, x_fake)\nplotting_ld(ld)","d088924b":"def loss_gen(disc, x_fake):\n  \"\"\"Compute the generator loss for `x_fake` given `disc`\n\n  Args:\n    disc: The generator\n    x_fake (ndarray): An array of shape (N,) that contains the fake samples\n\n  Returns:\n    ndarray: The generator loss\n  \"\"\"\n\n  #################################################\n  # TODO for students: Loss for fake data\n  # raise NotImplementedError(\"Student exercise: Implement loss for fake data\")\n  #################################################\n  label_fake = 1\n  loss_fake = label_fake * torch.log(disc.classify(x_fake))\n\n  return loss_fake\n\n\n# add event to airtable\natform.add_event('Coding Exercise 2.3: The generator loss')\n\ndisc = DummyDisc()\ngen = DummyGen()\n\nx_fake = gen.sample()\n## Uncomment below to check your function\nlg = loss_gen(disc, x_fake)\nplotting_lg(lg)","2a6ea372":"# @title Video 3: GAN generator Learning Idea\nfrom ipywidgets import widgets\n\nout2 = widgets.Output()\nwith out2:\n  from IPython.display import IFrame\n  class BiliVideo(IFrame):\n    def __init__(self, id, page=1, width=400, height=300, **kwargs):\n      self.id=id\n      src = \"https:\/\/player.bilibili.com\/player.html?bvid={0}&page={1}\".format(id, page)\n      super(BiliVideo, self).__init__(src, width, height, **kwargs)\n\n  video = BiliVideo(id=f\"BV1aL411J7SE\", width=854, height=480, fs=1)\n  print(\"Video available at https:\/\/www.bilibili.com\/video\/{0}\".format(video.id))\n  display(video)\n\nout1 = widgets.Output()\nwith out1:\n  from IPython.display import YouTubeVideo\n  video = YouTubeVideo(id=f\"Iqqz2_USUGs\", width=854, height=480, fs=1, rel=0)\n  print(\"Video available at https:\/\/youtube.com\/watch?v=\" + video.id)\n  display(video)\n\nout = widgets.Tab([out1, out2])\nout.set_title(0, 'Youtube')\nout.set_title(1, 'Bilibili')\n\n# add event to airtable\natform.add_event('Video 3: GAN generator Learning Idea')\n\ndisplay(out)","3b1acefc":"# @title GAN training demo\n# @markdown Make sure you execute this cell to enable the widget!\n\nfrom IPython.display import IFrame\nIFrame(src='https:\/\/xukai92.github.io\/gan_demo\/index.html', width=900, height=600)","de685b08":"# @title Student Response\nfrom ipywidgets import widgets\n\n\ntext=widgets.Textarea(\n   value='Type your answer here and click on `Submit!`',\n   placeholder='Type something',\n   description='',\n   disabled=False\n)\n\nbutton = widgets.Button(description=\"Submit!\")\n\ndisplay(text,button)\n\ndef on_button_clicked(b):\n   atform.add_answer('q1', text.value)\n   print(\"Submission successful!\")\n\n\nbutton.on_click(on_button_clicked)","1ff65c65":"# @title Video 4: GAN Failure Models\nfrom ipywidgets import widgets\n\nout2 = widgets.Output()\nwith out2:\n  from IPython.display import IFrame\n  class BiliVideo(IFrame):\n    def __init__(self, id, page=1, width=400, height=300, **kwargs):\n      self.id=id\n      src = \"https:\/\/player.bilibili.com\/player.html?bvid={0}&page={1}\".format(id, page)\n      super(BiliVideo, self).__init__(src, width, height, **kwargs)\n\n  video = BiliVideo(id=f\"BV17M4y1L7w9\", width=854, height=480, fs=1)\n  print(\"Video available at https:\/\/www.bilibili.com\/video\/{0}\".format(video.id))\n  display(video)\n\nout1 = widgets.Output()\nwith out1:\n  from IPython.display import YouTubeVideo\n  video = YouTubeVideo(id=f\"fmU2UM_QzLo\", width=854, height=480, fs=1, rel=0)\n  print(\"Video available at https:\/\/youtube.com\/watch?v=\" + video.id)\n  display(video)\n\nout = widgets.Tab([out1, out2])\nout.set_title(0, 'Youtube')\nout.set_title(1, 'Bilibili')\n\n# add event to airtable\natform.add_event('Video 4: GAN Failure Models')\n\ndisplay(out)","12e29f7b":"# @title GanLab\nfrom IPython.display import HTML\nHTML('<iframe width=\"1500\" height=\"660\" src=\"https:\/\/poloclub.github.io\/ganlab\/\" allowfullscreen><\/iframe>')","bf382a40":"# @title Airtable Submission Link\nfrom IPython import display as IPydisplay\nIPydisplay.HTML(\n   f\"\"\"\n <div>\n   <a href= \"{atform.url()}\" target=\"_blank\">\n   <img src=\"https:\/\/github.com\/NeuromatchAcademy\/course-content-dl\/blob\/main\/tutorials\/static\/AirtableSubmissionButton.png?raw=1\"\n alt=\"button link to Airtable\" style=\"width:410px\"><\/a>\n   <\/div>\"\"\" )","23a696ff":"In this section we will develop an intuition for the training dynamics of GANs.","5456ff95":"**Our 2021 Sponsors, including Presenting Sponsor Facebook Reality Labs**\n\n<p align='center'><img src='https:\/\/github.com\/NeuromatchAcademy\/widgets\/blob\/master\/sponsors.png?raw=True'\/><\/p>","92f40669":"**A note on numerical stability**\n\nIt is common that functions like $\\log$ throw a numerical error.\nFor $\\log$, it happens when $x$ in $\\log(x)$ is very close to 0.\nThe most common practice is to always add some very small value $\\epsilon$ to $x$, i.e. use $\\log(x + \\epsilon)$ instead.\nMost build-in functions in modern DL frameworks like TensorFlow or PyTorch handle such things in their build-in loss already, e.g., `torch.nn.BCE`, which is equivalent to the loss you implemented above.","4fedf78a":"<a href=\"https:\/\/colab.research.google.com\/github\/NeuromatchAcademy\/course-content-dl\/blob\/main\/tutorials\/W2D5_GenerativeModels\/student\/W2D5_Tutorial2.ipynb\" target=\"_parent\"><img src=\"https:\/\/colab.research.google.com\/assets\/colab-badge.svg\" alt=\"Open In Colab\"\/><\/a> &nbsp; <a href=\"https:\/\/kaggle.com\/kernels\/welcome?src=https:\/\/raw.githubusercontent.com\/NeuromatchAcademy\/course-content-dl\/main\/tutorials\/W2D5_GenerativeModels\/student\/W2D5_Tutorial2.ipynb\" target=\"_parent\"><img src=\"https:\/\/kaggle.com\/static\/images\/open-in-kaggle.svg\" alt=\"Open in Kaggle\"\/><\/a>","d9469afb":"---\n\n## Tutorial Objectives\n\nThe goal of this tutorial is two-fold; first you will be introduced to GANs training, and you will be able to understand how GANs are connected to other generative models that we have been before. \n\nBy the end of the first part of this tutorial you will be able to:\n- Understand, at a high level, how GANs are implemented.\n- Understand the training dynamics of GANs. \n- Know about a few failure modes of GAN training.\n- Understand density ratio estimation using a binary classifier\n- Understand the connection between GANs and other generative models.\n- Implement a GAN.","4bc610c9":"---\n# Setup","be4b1ed6":"The training objective of GANs consists of the losses for generators and discriminators respectively. In this section we will be implementing these objectives.","7c6746e3":"[*Click for solution*](https:\/\/github.com\/NeuromatchAcademy\/course-content-dl\/tree\/main\/\/tutorials\/W2D5_GenerativeModels\/solutions\/W2D5_Tutorial2_Solution_0fd7c972.py)\n\n","01c35933":"---\n# Section 2: GAN Training Objective\n\n*Time estimate: ~20mins*","b1456772":"## Section 2.3:  The generator loss\n\nNow that we have a trained critic, lets see how to train the generator using it.","c3d05633":"In this section we will be playing with a complete implementation of GAN.","13bce4b1":"---\n# Summary\n\nThrough this tutorial, we have learned\n\n- How to implement the training loop of GANs.\n- Developed an intuition about the training dynamics of GANs.\n- How to implement the training objectives for the generator and discriminator of GANs.\n- How are GANs connected to density ratio estimation.\n\nNext tutorial will cover conditional GANs and ethical issues of DL.","f3c3a8c2":"## Interactive Demo 4: GAN training in action\n","bc4667a5":"## Think! 2: What makes GANs hard to train?\n\nYou have played with the demo and it's time to think about a few questions\n\n1. Which target is more stable to train, 1D or 2D?\n2. If you keep increasing the learning rate, what happens? Does it happen in both the cases, i.e., 1D\/2D targets?\n3. Can you think of some drawbacks of using small learning rates?","2d24135f":"## Interactive Demo 2: Failure modes of GAN training\n\nGAN training is notoriously difficult because \nit is very sensitive to hyper-parameters such as learning rate and model architecture. To help you develop a sense of this here is a very simple GAN training demo that we have borrowed from [Andrej Karpathy's website](https:\/\/cs.stanford.edu\/people\/karpathy\/gan\/).  \n\nThe generator $G$, pictured in red, takes inputs sampled from a uniform distribution, $z$. It attempts to transform these to match a data distribution, shown below in blue. Meanwhile, the discriminator $D$ attempts to determine whether a sample is from the data distribution or the generating distribution. In the demo, the green curve represents the output of the discriminator. Its value is high where the discriminator is more confident that a sample with that value is drawn from the data distribution.\n\nEven though the GAN in this demo is very simple and operates in either 1D or 2D spaces, it is however very sensitive to the learning rate. Try it for yourself!","07652fad":"[*Click for solution*](https:\/\/github.com\/NeuromatchAcademy\/course-content-dl\/tree\/main\/\/tutorials\/W2D5_GenerativeModels\/solutions\/W2D5_Tutorial2_Solution_fc8cd748.py)\n\n*Example output:*\n\n<img alt='Solution hint' align='left' width=971.0 height=971.0 src=https:\/\/raw.githubusercontent.com\/NeuromatchAcademy\/course-content-dl\/main\/tutorials\/W2D5_GenerativeModels\/static\/W2D5_Tutorial2_Solution_fc8cd748_2.png>\n\n","2120119b":"### Coding Exercise 2.1: Implement Discriminator Loss\n\nTo get you started we have implemented a simple GAN in pseudocode and partially implemented the discriminator training objective.\n\n**Your goal** is to complete the missing part in the training objective of the discriminator in the function `loss_disc`.\n\n`loss_disc` also allows you evaluate the loss function on some random samples.\nIf your implementation is correct, you will see a plot where the loss values from your implementation will match the ground truth loss values.\n\nIn practice, given $N$ samples, we estimate BCE as\n\n\\begin{equation}\n\\text{BCE}_\\omega = -\\frac{1}{N} \\sum_{i=1}^N y_i \\log(\\sigma(D_\\omega(x_i)) + (1-y_i) \\log(1-\\sigma(D_\\omega(x_i))).\n\\end{equation}\n\nHere, $y$ is the label. $y=1$ when $x \\sim p$ (real data) and $y=0$ when $x \\sim q$ (i.e., fake data).\n\nPlease note, `disc.classify` = $\\sigma(D_\\omega)$ in `loss_disc`.","40fd872a":"### Coding Exercise 2.3: The generator loss\n\nWe will now implement the generator loss function and evaluate it on some fixed points.\n\n**Your goal** is to complete the implementation of the function `loss_gen` using the optimal critic from above.\n\nUpon correct implementation, you shall see a plot where the loss values from generator samples align with the \"Correct\" values.\n\n**HINT:** You simply need to change the labels. ","6bc3755b":"# Tutorial 2: Introduction to GANs and Density Ratio Estimation Perspective of GANs\n\n**Week 2, Day 5: Generative Models**\n\n**By Neuromatch Academy**\n\n__Content creators:__ Kai Xu, Seungwook Han, Akash Srivastava\n\n__Content reviewers:__ Polina Turishcheva, Melvin Selim Atay, Hadi Vafaei, Deepak Raya, Charles J Edelson, Kelson Shilling-Scrivo\n\n__Content editors:__ Charles J Edelson, Kelson Shilling-Scrivo, Spiros Chavlis\n\n__Production editors:__ Arush Tagade, Spiros Chavlis","d3477efe":"## Section 2.1:  Discriminator Loss\n\nThe critic or the discriminator in a vanilla GAN is trained as a binary classifier using the BCE criteria. In this section, we will implement the training objective for the discriminator. \n\n\\begin{equation}\n\\text{BCE}_\\omega = \\mathbb{E}_{x \\sim p}[\\log(\\sigma(D_\\omega(x)))] + \\mathbb{E}_{x \\sim q}[\\log(1 - \\sigma(D_\\omega(x)))]\n\\end{equation}\n\nHere, $p$ is the data distribution and $q$ is the generator distribution. $D_\\omega$ is the logit, which represents $\\log \\frac{p}{q}$. $\\sigma$ is the sigmoid function and therfore, $\\sigma(D_\\omega)$ represents $\\frac{p}{p+q}$.","6d168d79":"**Did you notice?**\n\nThe loss you implemented for generator is essentially the part for real data in `loss_disc`, i.e., it is saying, \"*the data I am feeding to you is real and not fake*\".","1607b234":"GANs consist two networks: A critic or discriminator (`disc`) and a generator (`gen`) that are trained by alternating between the following two steps:\n- In step 1, we update the parameters (`disc.params`) of the discriminator by backpropagating through the discriminator loss (BCE loss) `disc.loss`.\n- In step 2, we update the parameters (`gen.params`) of the generator by backpropagating through the generator loss, `gen.loss` (-1 * BCE loss).\n\nWe will now implement a simple GAN training loop!","9f8554a9":"---\n# Section 3: The difficulty of GAN training.\n\n*Time estimate: ~10mins*","8a36fc0f":"[*Click for solution*](https:\/\/github.com\/NeuromatchAcademy\/course-content-dl\/tree\/main\/\/tutorials\/W2D5_GenerativeModels\/solutions\/W2D5_Tutorial2_Solution_c47d1549.py)\n\n*Example output:*\n\n<img alt='Solution hint' align='left' width=971.0 height=971.0 src=https:\/\/raw.githubusercontent.com\/NeuromatchAcademy\/course-content-dl\/main\/tutorials\/W2D5_GenerativeModels\/static\/W2D5_Tutorial2_Solution_c47d1549_2.png>\n\n","1b7bdc93":"---\n# Section 1: How to train GANs\n\n*Time estimate: ~15mins*","b9d5b380":"## Coding Exercise 1: The GAN training loop\n\nTo get you started we have implemented a simple GAN in pseudocode. All you have to do is to implement the training loop.\n\n__Your goal__ is to arrange the functions given below in the correct order in the `train_gan_iter` function\n- `disc.loss(x_real, x_fake)`: Discriminator loss\n- `disc.classify(x)`: Classify `x` as real or fake\n- `gen.loss(x_fake, disc_fn)`: Generator loss\n- `disc.classify(x)` is a function to check `x` is real or fake.\n- `gen.sample(num_samples)`: Generate samples from the generator\n- `backprop(loss, model)`: Compute gradient of `loss` wrt `model`\n- `model` is either `disc` or `gen`\n\nWe have already taken care of most of these functions. So you only have to figure out the placement of `disc.loss` and `gen.loss` functions.\n\n__We highly recommend studying `train_gan_iter` function to understand how the GAN training loop is structured.__ ","49ca1848":"---\n# Section 4: GAN training in action!\n\n*Time estimate: ~4mins*","d1e54d35":"[*Click for solution*](https:\/\/github.com\/NeuromatchAcademy\/course-content-dl\/tree\/main\/\/tutorials\/W2D5_GenerativeModels\/solutions\/W2D5_Tutorial2_Solution_8febc070.py)\n\n"}}