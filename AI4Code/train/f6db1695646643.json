{"cell_type":{"201e2b50":"code","b001cf52":"code","6f5ae4fd":"code","e3022ea9":"code","0ef352c1":"code","c9529946":"code","20688fd0":"code","899b25b0":"code","0b2de933":"code","27bc9693":"code","bbd1479c":"code","2a24228e":"code","7a1a1696":"code","3b4a2012":"code","37c14215":"code","87b78fd0":"code","30217262":"code","62a65165":"code","953ea0fc":"code","89056901":"code","30d2ac66":"code","8bfd3842":"code","5d28871c":"code","98a96374":"code","ee44396d":"code","71ecd5f1":"code","4f56efa3":"code","454eb9d3":"code","a68a1301":"code","c6f96384":"code","6d8eb28d":"code","ca4e1254":"code","fcece753":"code","ef82c313":"code","a1ca1859":"code","512ee023":"code","89e521c8":"code","3145cb14":"code","c16699aa":"code","3e2de8ca":"code","f172b33b":"code","b0a98b38":"code","5e55af1d":"code","9fc8df1e":"code","b64a8760":"code","c7424986":"code","cccec03c":"code","a907074f":"code","97987449":"code","fbbb7548":"code","27eda7ac":"code","1afd367e":"code","4b61d22b":"code","d140dee9":"code","0ff3a464":"markdown","1543c6dc":"markdown"},"source":{"201e2b50":"import warnings\nwarnings.filterwarnings('ignore')","b001cf52":"!pip install dataprep","6f5ae4fd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport dataprep \nfrom dataprep.eda import create_report\nfrom dataprep.eda import plot\nfrom dataprep.eda import plot_correlation\nfrom dataprep.eda import plot_missing\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e3022ea9":"# Create DataFrame\ndf = pd.read_csv('\/kaggle\/input\/students-performance-in-exams\/StudentsPerformance.csv')\ndf.head(10)","0ef352c1":"df['average score'] = ((df['math score']+ df['reading score'] + df['writing score'])\/3).round(2)\ndf.head()","c9529946":"# Check if there is missing data\ndf.isnull().sum()","20688fd0":"df.describe()","899b25b0":"df.info()","0b2de933":"# Students Gender\nstudents_age = df.groupby('gender')['math score'].count()\nplt.figure(figsize=(10,5))\nax = sns.barplot(students_age.index, students_age.values)\nax.set_xlabel('Gender')\nax.set_ylabel('Population')\nax.set_title('Students Population grouped by Gender')\nplt.show()","27bc9693":"df['race\/ethnicity'].nunique()","bbd1479c":"# Race \/ Ethnicity Distribution\nrace_distribution = df.groupby('race\/ethnicity')['math score'].count()\npie, ax = plt.subplots(figsize=[10,6])\nlabels = race_distribution.keys()\nplt.pie(x = race_distribution, autopct = '%.1f%%', explode=[0.05]*5, labels = labels, pctdistance = 0.5)\nplt.title('Race\/ Ethnicity Distribution ')\nplt.show()","2a24228e":"df['parental level of education'].nunique()","7a1a1696":"# Parental Level of Education Distribution\nparental_distribution = df.groupby('parental level of education')['math score'].count()\npie, ax = plt.subplots(figsize=[10,6])\nlabels = parental_distribution.keys()\nplt.pie(x = parental_distribution, autopct = '%.1f%%', explode=[0.05]*6, labels = labels, pctdistance = 0.5)\nplt.title('Parental Level of Education Distribution ')\nplt.show()","3b4a2012":"df['lunch'].unique()","37c14215":"# How Students take Their Lunch Distribution\nlunch_distribution = df.groupby('lunch')['math score'].count()\npie, ax = plt.subplots(figsize=[10,6])\nlabels = lunch_distribution.keys()\nplt.pie(x = lunch_distribution, autopct = '%.1f%%', explode=[0.05]*2, labels = labels, pctdistance = 0.5)\nplt.title('Distribution of How Students take Their Lunch')\nplt.show()","87b78fd0":"# How Students take Their Preparation Course Distribution\nprep_distribution = df.groupby('test preparation course')['math score'].count()\npie, ax = plt.subplots(figsize=[10,6])\nlabels = prep_distribution.keys()\nplt.pie(x = prep_distribution, autopct = '%.1f%%', explode=[0.05]*2, labels = labels, pctdistance = 0.5)\nplt.title('Distribution of How Students take Their Preparation Course')\nplt.show()","30217262":"# Create Class of Average Score\nbins = [0, 11, 21, 31, 41, 51, 61, 71, 81, 91, 100]\nlabels = ['0 - 10','11 - 20','21 - 30','31 - 40','41 - 50','51 - 60','61 - 70','71 - 80','81 - 90','91 - 100']\ndf['Average Score Range'] = pd.cut(df['average score'], bins, labels = labels, include_lowest = True)\ndf.head()","62a65165":"plt.figure(figsize=(15,7))\nax = sns.countplot(y = 'Average Score Range', data = df, hue = 'test preparation course', palette = 'gnuplot', order = df['Average Score Range'].value_counts().index)\nplt.show()","953ea0fc":"# Let's say Average Score under 50 considered as fail and if any of the Score under 41 considered as fail\n# Create a pass\/ fail column\ndef f(row):\n    if row['average score'] < 50 and (row['math score'] <= 45 or row['reading score'] <= 45 or row['writing score'] <=45):\n        val = 'fail'\n    else:\n        val = 'pass'\n    return val\n         \ndf['Pass\/ Fail'] = df.apply(f, axis = 1)\ndf.head()","89056901":"# Percentage of Pass\/ Fail Students Without take preparation course\npasfail_distribution1 = df[df['test preparation course'] == 'none'].groupby('Pass\/ Fail')['math score'].count()\npie, ax = plt.subplots(figsize=[10,6])\nlabels = pasfail_distribution1.keys()\nplt.pie(x = pasfail_distribution1, autopct = '%.1f%%', explode=[0.05]*2, labels = labels, pctdistance = 0.5)\nplt.title('Distribution of Pass\/ Fail Students Without take Test Preparation Course')\nplt.show()","30d2ac66":"# Percentage of Pass\/ Fail Students WIth take preparation course\npasfail_distribution2 = df[df['test preparation course'] == 'completed'].groupby('Pass\/ Fail')['math score'].count()\npie, ax = plt.subplots(figsize=[10,6])\nlabels = pasfail_distribution2.keys()\nplt.pie(x = pasfail_distribution2, autopct = '%.1f%%', explode=[0.05]*2, labels = labels, pctdistance = 0.5)\nplt.title('Distribution of Pass\/ Fail Students With take Test Preparation Course')\nplt.show()","8bfd3842":"# Create columns that contain Mark (A,B,C,D,E) for each subject\ndef f(row, column):\n    if row[column] < 30:\n        val = 'E'\n    elif 30 <= row[column] <= 45:\n        val = 'D'\n    elif 45 < row[column] <= 70:\n        val = 'C'\n    elif 70 < row[column] <= 85:\n        val = 'B'\n    else:\n        val = 'A'\n    return val\n         \ndf['math mark'] = df.apply(f, axis = 1, column = 'math score')\ndf.head()","5d28871c":"df['reading mark'] = df.apply(f, axis = 1, column = 'reading score')\ndf.head()","98a96374":"df['writing mark'] = df.apply(f, axis = 1, column = 'writing score')\ndf.head()","ee44396d":"# Plot Data for Math Mark\nplt.figure(figsize=(15,7))\nax = sns.countplot(y = 'math mark', data = df, hue = 'parental level of education', palette = 'gnuplot', \n                   order = df['math mark'].value_counts().index)\nplt.show()","71ecd5f1":"# Plot Data for Math Mark\nplt.figure(figsize=(15,7))\nax = sns.countplot(y = 'reading mark', data = df, hue = 'parental level of education', palette = 'gnuplot', \n                   order = df['reading mark'].value_counts().index)\nplt.show()","4f56efa3":"# Plot Data for Math Mark\nplt.figure(figsize=(15,7))\nax = sns.countplot(y = 'writing mark', data = df, hue = 'parental level of education', palette = 'gnuplot', \n                   order = df['writing mark'].value_counts().index)\nplt.show()","454eb9d3":"def f(size,a):\n    plt.figure(figsize=(size))\n    n = 1\n    for col in ['math score','reading score', 'writing score', 'average score']:\n        plt.subplot(2,2,n)\n        sns.boxplot(x = a, y = col, data = df)\n        plt.title(col + ' variation')\n        n=n+1","a68a1301":"f(size = (15,10),a = df['test preparation course'])","c6f96384":"f(size = (15,10),a = df['race\/ethnicity'])","6d8eb28d":"f(size = (15,10),a = df['gender'])","ca4e1254":"f(size = (25,15),a = df['parental level of education'])","fcece753":"f(size = (15,10),a = df['lunch'])","ef82c313":"df.head()","a1ca1859":"def f(a,b):\n    plt.figure(figsize = (20,10))\n    ax = sns.countplot(x = a, data = df, hue = b, palette = 'gnuplot', \n                   order = df[a].value_counts().index)","512ee023":"f(a = 'gender',b = 'parental level of education')","89e521c8":"f(a = 'race\/ethnicity',b = 'parental level of education')","3145cb14":"f(a = 'race\/ethnicity',b = 'gender')","c16699aa":"f(a = 'race\/ethnicity',b = 'Average Score Range')","3e2de8ca":"f(a = 'race\/ethnicity',b = 'Pass\/ Fail')","f172b33b":"f(a = 'race\/ethnicity',b = 'math mark')","b0a98b38":"f(a = 'race\/ethnicity',b = 'reading mark')","5e55af1d":"f(a = 'race\/ethnicity',b = 'writing mark')","9fc8df1e":"f(a = 'parental level of education',b = 'writing mark')","b64a8760":"f(a = 'parental level of education',b = 'math mark')","c7424986":"f(a = 'parental level of education',b = 'reading mark')","cccec03c":"f(a = 'parental level of education',b = 'Average Score Range')","a907074f":"plot(df, 'math score')","97987449":"plot(df, 'writing score')","fbbb7548":"plot(df, 'reading score')","27eda7ac":"plot(df, 'average score')","1afd367e":"df.head()","4b61d22b":"education_race = pd.DataFrame({'count' : df.groupby( [ \"parental level of education\", \"race\/ethnicity\",'Average Score Range'] ).size()}).reset_index()\neducation_race.head()","d140dee9":"fig = px.treemap(education_race, names = 'Average Score Range', values = 'count', path = ['parental level of education', 'race\/ethnicity', 'Average Score Range'], \n                 color_discrete_sequence = px.colors.qualitative.Set1, width = 1500, height = 1000)\nfig.show()","0ff3a464":"**Students Profile Statistics**","1543c6dc":"**How Test Preparation Course Affected the Students Average Score**"}}