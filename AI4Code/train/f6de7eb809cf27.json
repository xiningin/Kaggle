{"cell_type":{"13a2fa34":"code","9b02e269":"code","8a83fff4":"code","312f5a1d":"code","a615534a":"code","cd4b3662":"code","d318255c":"code","04b29eaf":"code","abb08d5c":"code","df636c19":"markdown","01a824b9":"markdown","3a312b27":"markdown","33fb1a2e":"markdown","cb3c338f":"markdown","84d5a730":"markdown","c7e4e9fc":"markdown","3c9fa3b5":"markdown","be5cbdb3":"markdown"},"source":{"13a2fa34":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9b02e269":"dt = pd.read_csv('..\/input\/heart-disease-uci\/heart.csv')\ndt.head()","8a83fff4":"dt.info()","312f5a1d":"Y = dt[dt.target == 1]\nN = dt[dt.target == 0]","a615534a":"# scatter plot\nplt.scatter(Y.age,Y.thalach, color = \"red\", label = \"Heart Diease Present\")\nplt.scatter(N.age,N.thalach, color = \"green\", label = \"Heart Diease NOT Present\")\nplt.xlabel(\"age\")\nplt.ylabel(\"thalach\")\nplt.legend()\nplt.show()","cd4b3662":"y = dt.target.values\nx_dt = dt.drop([\"target\"], axis = 1)\nx = (x_dt - np.min(x_dt))\/(np.max(x_dt)-np.min(x_dt))","d318255c":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 0.2, random_state = 42)","04b29eaf":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors = 3) # I chose K = 3 just for now.\nknn.fit(x_train, y_train)\nprediction = knn.predict(x_test)\nprint(\"{} nn score: {} \".format(3,knn.score(x_test,y_test)))","abb08d5c":"score_list = []\nfor each in range(1,30):\n    knn2 = KNeighborsClassifier(n_neighbors = each)\n    knn2.fit(x_train,y_train)\n    score_list.append(knn2.score(x_test,y_test))\n    \nplt.plot(range(1,30),score_list)\nplt.xlabel(\"K values\")\nplt.ylabel(\"Accuracy\")\nplt.show()","df636c19":"<a id = \"5\"><\/a><br>\n## Finding K Value\n* Above, I chose K = 3. The accuracy of the model is %83.6\n* The accuracy of the model will change according to the K value\n* Since the aim is to reach the highest accuracy, we need to try different K values and find the best value which gives the highes accuracy.","01a824b9":"<a id = \"3\"><\/a><br>\n## Splitting the Data\n* %80 of the data will be used for training the model\n* %20 of the data will be used for testing the model\n* I chose random_state = 42 in order to obtain the same rows as train and test at each splitting.","3a312b27":"<a id = \"1\"><\/a><br>\n## About the Dataset\n\nThis dataset has 14 features, one of which is the target feature. Target feature tells us weather a patient has a hearth disease or not. About the target feature:\n* 1 = Patient has heart disease\n* 0 = Patient doesn't have heart disease\n\nYou can reach the meanings of the other features from [my prior study](https:\/\/www.kaggle.com\/albatros1602\/visualization-for-heart-disease-prediction).\n\nLets check the data first...","33fb1a2e":"# Introduction\n\n* In this study I will make a prediction of a heart disease presence with KNN. \n* I will compare the result with [LR method](https:\/\/www.kaggle.com\/albatros1602\/heart-disease-prediction-with-lr) which I studied before.\n* You may want to check my prior study for [visualisation](https:\/\/www.kaggle.com\/albatros1602\/visualization-for-heart-disease-prediction) of this data.\n\n<font color = 'blue'>\n## Content\n1. [About the Dataset](#1)\n1. [Normalization](#2)\n1. [Splitting the Data](#3)\n1. [KNN](#4)  \n1. [Finding K Value](#5)\n1. [Conclusion](#6)","cb3c338f":"* There is not a very distinct seperation between green and red dots.\n* The KNN method will try to find the nearest \"k\" number of points to a selected point and will make a prediction according to the value of the nearest points.","84d5a730":"<a id = \"4\"><\/a><br>\n## KNN","c7e4e9fc":"<a id = \"6\"><\/a><br>\n## Conclusion\n\nFor this data:\n* The accuracy of KNN model is %85.25\n* The accuracy of LR model is %83.61\n* The accuracy of the models may change according to the data.\n* You can reach more ML tutorials at [DATAI Team](https:\/\/www.kaggle.com\/kanncaa1)'s page.","3c9fa3b5":"<a id = \"2\"><\/a><br>\n## Normalization\n\n* We need to normalize the data, otherwise one feature may dominate an other feature.","be5cbdb3":"* For K = 18 or K = 24 the model reaches the highest accuracy which is %85.25"}}