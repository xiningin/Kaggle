{"cell_type":{"3caf7f4d":"code","6de59edc":"code","0ffbc24a":"code","5502e4dd":"code","73c48bd3":"code","f9ff9958":"code","bc92b678":"code","bd539f24":"markdown","d17c8fd5":"markdown","6ccd887b":"markdown","bafdfee1":"markdown","d098fe02":"markdown","bec76b14":"markdown","b9a32be1":"markdown"},"source":{"3caf7f4d":"import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.feature_selection import VarianceThreshold\nfrom sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis\nfrom tqdm import tqdm_notebook\nimport warnings\nimport multiprocessing\nwarnings.filterwarnings('ignore')","6de59edc":"def load_data(data):\n    return pd.read_csv(data)\n\nwith multiprocessing.Pool() as pool:\n    train, test, sub = pool.map(load_data, ['..\/input\/train.csv', '..\/input\/test.csv', '..\/input\/sample_submission.csv'])","0ffbc24a":"cols = [c for c in train.columns if c not in ['id', 'target', 'wheezy-copper-turtle-magic']]\noof = np.zeros(len(train))\npreds = np.zeros(len(test))\n\nfor i in tqdm_notebook(range(512)):\n\n    train2 = train[train['wheezy-copper-turtle-magic']==i]\n    test2 = test[test['wheezy-copper-turtle-magic']==i]\n    idx1 = train2.index; idx2 = test2.index\n    train2.reset_index(drop=True,inplace=True)\n\n    data = pd.concat([pd.DataFrame(train2[cols]), pd.DataFrame(test2[cols])])\n    data2 = VarianceThreshold(threshold=2).fit_transform(data[cols])\n\n    train3 = data2[:train2.shape[0]]; test3 = data2[train2.shape[0]:]\n\n    skf = StratifiedKFold(n_splits=11, random_state=42)\n    for train_index, test_index in skf.split(train2, train2['target']):\n\n        clf = QuadraticDiscriminantAnalysis(0.6)\n        clf.fit(train3[train_index,:],train2.loc[train_index]['target'])\n        oof[idx1[test_index]] = clf.predict_proba(train3[test_index,:])[:,1]\n        preds[idx2] += clf.predict_proba(test3)[:,1] \/ skf.n_splits\n\nauc = roc_auc_score(train['target'], oof)\nprint(f'AUC: {auc:.5}')","5502e4dd":"test['target'] = preds\ntest.loc[test['target'] > 0.99999, 'target'] = 1\ntest.loc[test['target'] < 0.00001, 'target'] = 0","73c48bd3":"usefull_test = test[(test['target'] == 1) | (test['target'] == 0)]\nnew_train = pd.concat([train, usefull_test]).reset_index(drop=True)","f9ff9958":"oof = np.zeros(len(new_train))\npreds = np.zeros(len(test))\n\nfor i in tqdm_notebook(range(512)):\n\n    train2 = new_train[new_train['wheezy-copper-turtle-magic']==i]\n    test2 = test[test['wheezy-copper-turtle-magic']==i]\n    idx1 = train2.index; idx2 = test2.index\n    train2.reset_index(drop=True,inplace=True)\n\n    data = pd.concat([pd.DataFrame(train2[cols]), pd.DataFrame(test2[cols])])\n    data2 = VarianceThreshold(threshold=2).fit_transform(data[cols])\n\n    train3 = data2[:train2.shape[0]]; test3 = data2[train2.shape[0]:]\n\n    skf = StratifiedKFold(n_splits=15, random_state=42)\n    for train_index, test_index in skf.split(train2, train2['target']):\n\n        clf = QuadraticDiscriminantAnalysis(0.1)\n        clf.fit(train3[train_index,:],train2.loc[train_index]['target'])\n        oof[idx1[test_index]] = clf.predict_proba(train3[test_index,:])[:,1]\n        preds[idx2] += clf.predict_proba(test3)[:,1] \/ skf.n_splits\n\nauc = roc_auc_score(new_train['target'], oof)\nprint(f'AUC: {auc:.5}')","bc92b678":"sub['target'] = preds\nsub.to_csv('submission.csv', index=False)","bd539f24":"Edit: Fixed a problem with CV, which was incorrect because of pandas DataFrame indexes collisions.","d17c8fd5":"Loading data with multiprocessing. Lets make those CPU cores work.","6ccd887b":"# Attention! Warning! Use at your own risk!\n\nIf you are going to use pseudo labeling technique (which is used in this kernel) make sure you **understand what you are doing**. Otherwise you will **horribly overfit** to Public LB and will be shaken down on Private LB.\n\nThus you should not use this submission as is, but instead find a way to improve your model with this technique.\n\n![](https:\/\/cdn1.imggmi.com\/uploads\/2019\/6\/4\/52f979f0a731c7806f225c5b5cdc1b87-full.png)","bafdfee1":"Training first model with QDA, since it performs best on this dataset. We need predictions to make pseudo labeles furter on.","d098fe02":"And the next model we are building is now training on this combined data.","bec76b14":"Alright. By now we have predictions in *preds* variable. On some rows in test set model is pretty sure with its prediction, so some samples are predicted as 0.99999 and some as 0.00001. \n\nWe assume that this is a correct case and simply label those samples as 1's and 0's respectively.","b9a32be1":"Now we are adding this new marked samples to our training set. So next we will train on whole training set and a **part** of test set. This is where overfitting comes from."}}