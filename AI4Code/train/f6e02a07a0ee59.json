{"cell_type":{"5090dd8b":"code","72d5a93b":"code","6ba0d44f":"code","cff78cc3":"code","f1a236f7":"code","381a847d":"code","0edc9d31":"code","897585d7":"code","410659a1":"code","04a3043c":"code","384084cc":"code","edc8d631":"code","b479aad3":"code","fd5f04fa":"code","891b4246":"code","f0b15069":"code","f54043ff":"code","db332f27":"code","51f52233":"code","02d87b97":"code","3e900862":"code","a1eee0a7":"code","181c8f8b":"code","40ccb6d1":"code","0f4bfc10":"code","7781cf5f":"code","fa46c9d9":"code","7f7f947f":"code","b1d5e198":"code","d36d97cb":"code","8504d8ea":"code","85be0125":"code","329f2a2e":"code","765a1f8b":"code","be82ecca":"code","a6cf7d04":"markdown","e4d2e9e4":"markdown"},"source":{"5090dd8b":"# normal libraries\nimport pandas as pd\nimport numpy as np\n\n# importing graph libraries \nfrom mpl_toolkits.mplot3d import Axes3D\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objs as go\nfrom pylab import rcParams\nrcParams['figure.figsize'] = 14, 8\n\n# With Gridspec you can make static dashboards\nfrom matplotlib.gridspec import GridSpec\n\n\n# Machine learning libraries\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom scipy.stats import norm\nfrom scipy.stats import probplot\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom xgboost import XGBRegressor\nfrom sklearn.linear_model import Ridge, Lasso\n\n# warning libraries\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n\n# Maps\nimport folium\n\n# Very powerfull plugin for maps\nfrom folium.plugins import FastMarkerCluster, HeatMap\n\n\n# Deep leerning imports\nimport tensorflow as tf\nfrom tensorflow.keras.models import Sequential # for creating the model\nfrom tensorflow.keras.layers import Dense # for creating the layers\n\n\n#  Metrics\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import r2_score\n\nfrom sklearn.feature_selection import RFE\nfrom sklearn.decomposition import PCA\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","72d5a93b":"train = pd.read_csv(r\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\", index_col=[\"Id\"])\n","6ba0d44f":"shape = train.shape\nprint(f\"there are {shape[0]} rows and {shape[1]} columns in the train-dataframe\")\n","cff78cc3":"Sum = train.isnull().sum()\nPercentage = (train.isnull().sum()\/train.isnull().count())\ndf_null= pd.concat([Sum,Percentage], axis =1 , keys = [\"Sum\",\"Percentage\"])\ndf_null=df_null.sort_values(by = \"Sum\",ascending=False)\ndf_null= df_null.style.background_gradient(\"Reds\")\ndf_null","f1a236f7":"def devide(train):\n    numbers = train.select_dtypes(include= \"number\")\n    objects = train.select_dtypes(include= \"object\")\n    return numbers, objects\n","381a847d":"numbers, objects = devide(train)","0edc9d31":"numbers.isnull().sum().sort_values(ascending=False)","897585d7":"numbers[\"LotFrontage\"]= numbers[\"LotFrontage\"].fillna(numbers[\"LotFrontage\"].mean())","410659a1":"numbers[\"MasVnrArea\"]= numbers[\"MasVnrArea\"].fillna(0)","04a3043c":"numbers[\"GarageYrBlt\"] = numbers[\"GarageYrBlt\"].dropna()","384084cc":"plt.figure(figsize=(25,25))\ndrop = np.zeros_like(train.corr())\ndrop[np.triu_indices_from(drop)] = True\nsns.heatmap(train.corr(), annot = True, fmt = \".1f\", cmap = \"Blues\", linewidth = 1, mask = drop);\n\nplt.title(\"Correlation\");\nsns.set_style(\"white\")","edc8d631":"objects.isnull().sum().sort_values(ascending=False)","b479aad3":"for x in [\"PoolQC\",\"MiscFeature\",\"Alley\",\"Fence\",\"FireplaceQu\",\"GarageType\",\"GarageCond\",\"GarageQual\",\"GarageFinish\"]:\n    objects[x] = objects[x].fillna(\"None\")\n    ","fd5f04fa":"objects = objects.dropna()\n","891b4246":"All_objects = pd.DataFrame({})\n\nfor y in objects:\n    var = pd.get_dummies(objects[y], drop_first=True, prefix=y+\"_\")\n    objects = pd.concat([objects, var], axis=1)\n    objects.drop(y, axis=1, inplace=True)\n    \n    \n    ","f0b15069":"train = pd.concat([numbers,objects], axis = 1)","f54043ff":"train.isnull().sum().sort_values(ascending=False)","db332f27":"# after cleaning \nafter_clean = train.shape\nprint(f\" After cleaning there are {after_clean[0]} rows and {after_clean[1]} columns in this dataframe\")\n","51f52233":"train = train.dropna()","02d87b97":"scores = pd.DataFrame({\"Model\":[],\n                       \"Cross_vall_score\":[], \n                       \"Mean_squared_error\":[],\n                       \"R2\":[]})","3e900862":"\nsns.set_style(\"dark\")\n\n\nfig = plt.figure(constrained_layout= True);\n\ngs = GridSpec(3,3, fig)\n\nax = fig.add_subplot(gs[0,:])\nax2 = fig.add_subplot(gs[1,:])\nax3 = fig.add_subplot(gs[2,:])\n\n\nsumis = round(train[\"SalePrice\"].mean(),2)\n\nskew = round(train[\"SalePrice\"].skew(),2)\nkurt = round(train[\"SalePrice\"].kurt(),2)\n\n\nax.set_title(\"Price averange\", fontsize=40, pad = 10, color='dimgrey' )\nax.text(0.25, 0.43, f' $ {sumis}', fontsize=30, color='mediumseagreen', ha='center',        \n        bbox=dict(facecolor='navy', alpha=0.1, pad=10, boxstyle='round, pad=.7'))\nax.text(0.25, 0.81, 'Total sum of price',color='darkslateblue', fontsize=20, ha='center')\n\n\nax.text(0.50, 0.43, f'{skew}', fontsize=40, color='mediumseagreen', ha='center',\n          bbox=dict(facecolor='navy', alpha=0.1, pad=10, boxstyle='round, pad=.4'))\n\nax.text(0.50, 0.81, 'skew:',color='darkslateblue', fontsize=20, ha='center')\n\n\nax.text(0.75, 0.43, f'{kurt}', fontsize=40, color='mediumseagreen', ha='center',\n          bbox=dict(facecolor='navy', alpha=0.1, pad=1, boxstyle='round, pad=.4'))\nax.text(0.75, 0.81, 'kurtosis:',color='darkslateblue', fontsize=20, ha='center')\n\nax2.set_title(\"Boxplot of price\", fontsize=20, pad = 10, color='dimgrey' )\n\nsns.boxplot(train[\"GrLivArea\"],ax = ax3)\nsns.boxplot(train[\"SalePrice\"],ax = ax2)\n\n\nax.axis(\"off\");","a1eee0a7":"log = np.log1p(train[\"SalePrice\"])\n\n\nfig, (ax1, ax2, ax3, ax4) = plt.subplots(4,1);\n\nsns.distplot(train[\"SalePrice\"], fit = norm, ax = ax1);\nsns.distplot(log, fit = norm, ax = ax2);\nprobplot(train[\"SalePrice\"], plot=ax3);\nprobplot(log, plot=ax4);","181c8f8b":"train.isnull().sum().sort_values(ascending=False)","40ccb6d1":"train[\"SalePrice\"] = np.log1p(train[\"SalePrice\"])","0f4bfc10":"X = train.drop([\"SalePrice\"], axis = 1)\ny = train[\"SalePrice\"]\n","7781cf5f":"X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.25, random_state = 42)","fa46c9d9":"lin = LinearRegression()\nlin.fit(X_train,y_train)\npredict = lin.predict(X_test)\nscore_bass = round(np.sqrt(mean_squared_error(predict,y_test)),2)\nbase_r2=round(r2_score(predict,y_test),2)\nBase_cross = round(cross_val_score(lin,X_train,y_train,cv=5).mean(),2)\nscores.loc[0] = [\"Simple_linear\", Base_cross,score_bass,base_r2]\nprint(scores)\n","7f7f947f":"las = Lasso(alpha=0.01)\nlas.fit(X_train,y_train)\npredict3 = las.predict(X_test)\ncross_vall_lass1 = round(cross_val_score(las,X_train,y_train,cv=5).mean(),2)\nscore_lass1 = round(np.sqrt(mean_squared_error(predict3,y_test)),2)\nr2_score_lass1 = round(r2_score(predict3,y_test),2)\n\nn = scores.shape[0]\nscores.loc[n] = [\"Lasso_Regression1\",cross_vall_lass1,score_lass1,r2_score_lass1]\nprint(scores)","b1d5e198":"las = Lasso(alpha=0.5)\nlas.fit(X_train,y_train)\npredict3 = las.predict(X_test)\ncross_vall_lass2 = round(cross_val_score(las,X_train,y_train,cv=5).mean(),2)\nscore_lass2 = round(np.sqrt(mean_squared_error(predict3,y_test)),2)\nr2_score_lass2 = round(r2_score(predict3,y_test),2)\n\nn = scores.shape[0]\nscores.loc[n] = [\"Lasso_Regression2\",cross_vall_lass2,score_lass2,r2_score_lass2]\nprint(scores)","d36d97cb":"las = Lasso(alpha=0.0001)\nlas.fit(X_train,y_train)\npredict3 = las.predict(X_test)\ncross_vall_lass3 = round(cross_val_score(las,X_train,y_train,cv=5).mean(),2)\nscore_lass3 = round(np.sqrt(mean_squared_error(predict3,y_test)),2)\nr2_score_lass3 = round(r2_score(predict3,y_test),2)\n\nn = scores.shape[0]\nscores.loc[n] = [\"Lasso_Regression3\",cross_vall_lass3,score_lass3,r2_score_lass3]\nprint(scores)","8504d8ea":"rid = Ridge(alpha=0.001)\nrid.fit(X_train,y_train)\npredict4 = las.predict(X_test)\ncross_vall_rid1 = round(cross_val_score(las,X_train,y_train,cv=5).mean(),2)\nscore_rid1 = round(np.sqrt(mean_squared_error(predict4,y_test)),2)\nr2_score_rid1 = round(r2_score(predict4,y_test),2)\n\nn = scores.shape[0]\nscores.loc[n] = [\"Ridge1\",cross_vall_rid1,score_rid1,r2_score_rid1]\nprint(scores)\n","85be0125":"tree = DecisionTreeRegressor()\ntree.fit(X_train,y_train)\npredict5 = tree.predict(X_test)\ncross_vall_tree = round(cross_val_score(tree,X_train,y_train,cv=5).mean(),2)\nscore_tree = round(np.sqrt(mean_squared_error(predict5,y_test)),2)\nr2_score_tree = round(r2_score(predict5,y_test),2)\n\nn = scores.shape[0]\nscores.loc[n] = [\"Tree\",cross_vall_tree,score_tree,r2_score_tree]\nprint(scores)","329f2a2e":"forest = RandomForestRegressor(n_estimators=100)\nforest.fit(X_train,y_train)\npredict6 = forest.predict(X_test)\ncross_vall_forest = round(cross_val_score(forest,X_train,y_train,cv=5).mean(),2)\nscore_forest = round(np.sqrt(mean_squared_error(predict6,y_test)),2)\nr2_score_forest = round(r2_score(predict6,y_test),2)\n\nn = scores.shape[0]\nscores.loc[n] = [\"forest\",cross_vall_forest,score_forest,r2_score_forest]\nprint(scores)","765a1f8b":"xgb = XGBRegressor()\nxgb.fit(X_train,y_train)\npredict7 = xgb.predict(X_test)\ncross_vall_xgb = round(cross_val_score(xgb,X_train,y_train,cv=5).mean(),2)\nscore_xgb = round(np.sqrt(mean_squared_error(predict7,y_test)),2)\nr2_score_xgb = round(r2_score(predict7,y_test),2)\n\nn = scores.shape[0]\nscores.loc[n] = [\"xgb\",cross_vall_xgb,score_xgb,r2_score_xgb]\nprint(scores)","be82ecca":"\nfig =  go.Figure(go.Bar(x= scores[\"Model\"], y = round(scores[\"Cross_vall_score\"],2),\n                       marker={'color': scores['Cross_vall_score'],\n                              'colorscale': 'Viridis'},\n                        text=round(scores['Cross_vall_score'],2),\n                        textposition =  \"outside\"\n                       ))\n\n\nfig.update_layout(title_text = \"Models\")","a6cf7d04":"![Abbey_House_Gardens_Malmesbury.jpg](attachment:Abbey_House_Gardens_Malmesbury.jpg)","e4d2e9e4":" #<div align=\"center\"> **Predicting house prices with machine learning**"}}