{"cell_type":{"569a994c":"code","602207fd":"code","44948e6d":"code","605e00fc":"code","52b8af6e":"code","1a5175dc":"code","46eb49d0":"code","80ed5113":"code","34bbec44":"code","ee0c9168":"code","cfcecdc5":"code","b3e2fbe1":"code","c35a8c67":"code","da6deda7":"code","6984825b":"code","c3b83449":"code","a968e484":"code","7a986924":"code","6e218af2":"code","2396383f":"code","23ecf9cc":"code","ea4e6cdf":"code","55211c3d":"code","88c5b603":"code","ebb78dbb":"code","afc73da8":"code","8a42d25d":"code","9822d857":"code","c99a6930":"code","31b3b2da":"code","fb9f7d63":"code","cb291cef":"markdown","859fb437":"markdown","9776dac2":"markdown","8e37cb87":"markdown","d1130bac":"markdown","a646dbf5":"markdown","2233d7a5":"markdown","836ffce1":"markdown","9c8eb178":"markdown","7e1b1c33":"markdown","3fb1bf7a":"markdown","5a888665":"markdown","2e8d277f":"markdown","ebdaae8d":"markdown","c3450753":"markdown","c35589ed":"markdown","e2f65811":"markdown","535a1929":"markdown","ab212f3c":"markdown","7ed8f8ee":"markdown","50faef0d":"markdown","3e9b751d":"markdown","20744ece":"markdown"},"source":{"569a994c":"#import library\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport numpy as np # linear algebra\nimport matplotlib.pyplot as plt\nimport seaborn as sns  # visualization tool\n# plotly\nimport plotly.plotly as py\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\n# word cloud library\nfrom wordcloud import WordCloud\n","602207fd":"#read to csv\ndata = pd.read_csv(\"..\/input\/googleplaystore.csv\")","44948e6d":"data.info()","605e00fc":"data.columns","52b8af6e":"data.shape","1a5175dc":"data.head()","46eb49d0":"data.tail()","80ed5113":"data1 = data.head()\ndata2 = data.tail()\nconcat_data = pd.concat([data1,data2],axis=0,ignore_index=True)\nconcat_data","34bbec44":"data['Category'].unique()","ee0c9168":"data[data['Category'] == '1.9']","cfcecdc5":"data.loc[10472] = data.loc[10472].shift()\ndata['App'].loc[10472] = data['Category'].loc[10472]\ndata['Category'].loc[10472] = np.nan\ndata.loc[10472]","b3e2fbe1":"data['Rating'].unique()","c35a8c67":"data['Rating'] = pd.to_numeric(data['Rating'], errors='coerce')\ndata['Rating'].dtype","da6deda7":"data['Reviews'].unique()","6984825b":"data[data['Reviews'] =='3.0M']","c3b83449":"data['Reviews'] = data.Reviews.replace(\"0.0\",0)\ndata['Reviews'] = data.Reviews.replace(\"3.0M\",3000000.0)\ndata['Reviews'] = data['Reviews'].astype(float)\ndata['Reviews'].dtype","a968e484":"data['Size'].unique()","7a986924":"data['Size'] = data.Size.replace(\"Varies with device\",np.nan)\ndata['Size'] = data.Size.str.replace(\"M\",\"000\") # All size values became the kilobyte type.\ndata['Size'] = data.Size.str.replace(\"k\",\"\")\ndata['Size'] = data.Size.replace(\"1,000+\",1000)\ndata['Size'] =data['Size'].astype(float)\ndata['Size'].dtype","6e218af2":"data['Installs'].unique()","2396383f":"data['Installs'] = data.Installs.str.replace(\",\",\"\")\ndata['Installs'] = data.Installs.str.replace(\"+\",\"\")\ndata['Installs'] = data.Installs.replace(\"Free\",np.nan)\ndata['Installs'] = data['Installs'].astype(float)\ndata['Installs'].dtype","23ecf9cc":"data['Price'].unique()","ea4e6cdf":"data['Price'] = data.Price.replace(\"Everyone\",np.nan)\ndata['Price'] = data.Price.str.replace(\"$\",\"\").astype(float)\ndata['Price'].dtype","55211c3d":"data['Last Updated'].unique()","88c5b603":"data['Last Updated'] = pd.to_datetime(data['Last Updated'])\ndata['Last Updated']","ebb78dbb":"data.corr()","afc73da8":"#correlation map\nf,ax = plt.subplots(figsize=(12, 12))\nsns.heatmap(data.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax)\nplt.show()","8a42d25d":"data.describe()","9822d857":"category_list = list(data['Category'].unique())\ncategory_review = []\nfor i in category_list:\n    x = data[data['Category'] == i]\n    if(len(x)!=0):\n        review = sum(x.Reviews)\/len(x)\n        category_review.append(review)\n    else:\n        review = sum(x.Reviews)\n        category_review.append(review)\n#sorting\ndata_category_reviews = pd.DataFrame({'category': category_list,'review':category_review})\nnew_index = (data_category_reviews['review'].sort_values(ascending=False)).index.values\nsorted_data =data_category_reviews.reindex(new_index)\n\n# visualization\nplt.figure(figsize=(15,10))\nsns.barplot(x=sorted_data['category'], y=sorted_data['review'])\nplt.xticks(rotation=80)\nplt.xlabel(\"Category\")\nplt.ylabel(\"Reviews\")\nplt.title(\"Category and Reviews\")\nplt.show()","c99a6930":"category_list = list(data['Category'].unique())\ncategory_install = []\nfor i in category_list:\n    x = data[data['Category'] == i]\n    if(len(x)!=0):\n        install = sum(x.Installs)\/len(x)\n        category_install.append(install)\n    else:\n        install = sum(x.Installs)\n        category_install.append(install)\n        \n#sorting\ndata_category_install = pd.DataFrame({'category': category_list,'install':category_install})\nnew_index = (data_category_install['install'].sort_values(ascending=False)).index.values\nsorted_data =data_category_install.reindex(new_index)\n\n# visualization\nplt.figure(figsize=(15,10))\nsns.barplot(x=sorted_data['category'], y=sorted_data['install'])\nplt.xticks(rotation=80)\nplt.xlabel(\"Category\")\nplt.ylabel(\"Install\")\nplt.title(\"Category and Install\")\nplt.show()","31b3b2da":"plt.subplots(figsize=(8,8))\nwordcloud = WordCloud(\n                          background_color='white',\n                          width=512,\n                          height=384\n                         ).generate(\" \".join(data))\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.savefig('graph.png')\n\nplt.show()","fb9f7d63":"plt.figure(figsize=(10,7))\nsns.countplot(data=data, x='Content Rating')\nplt.xticks(rotation=80)\nplt.title('Content Rating',color = 'blue',fontsize=15)\nplt.show()","cb291cef":"<a id=\"e\"><\/a>\n## Installs","859fb437":"<a id=\"d\"><\/a>\n## Size","9776dac2":"<a id=\"b\"><\/a>\n## Rating ","8e37cb87":"<a id=\"d1\"><\/a>\n## Content Rating","d1130bac":"We can make NaN category value. At that time we can get a clean data. I used shift() method that is found Pandas library.","a646dbf5":"<a id=\"b1\"><\/a>\n## Category and Installs","2233d7a5":"<a id=\"2\"><\/a>\n# 2. Cleaning Data\n\nDataset can contain missing data, numerical string value, various cues. If we can clean them, we can make easy our analysis.  <br\/>\n\nLet's have some fun. :)\n\n<a id=\"a\"><\/a>\n## Category","836ffce1":"<a id=\"c1\"><\/a>\n## Word Cloud","9c8eb178":"Data type of Size is object. I had to convert the column because it contains the application sizes. Firstly I changed 'Varies with device' value with Nan. After, I dropped 'M' and 'k'. I changed from '1000+' to 1000. Finally, I converted float value.","7e1b1c33":"<a id=\"1\"><\/a>\n# 1. INTRODUCTION TO DATA\n\nFirstly let's get to know data.  While I was analyzing the data, I used Pandas library.  <br\/>\n* info(): It informs about data columns and data types. <br\/>\n* head(): It returns the first five data. <br\/>\n* tail(): It returns the last five data. <br\/>\n* columns : It returns data columns <br\/>\n* shape : It gives number of rows and columns in a tuble.\n","3fb1bf7a":"Data type of Rating is object. If we convert from string to numeric, we can make easy.","5a888665":"Data type of Last Uptated is object. I converted from string to date type.","2e8d277f":"<a id=\"c\"><\/a>\n## Reviews","ebdaae8d":"<a id=\"g\"><\/a>\n## Last Updated","c3450753":"We can combine tables to make it easier to see data. For this, we are gonna use \"concat function\" that is found Pandas library. <br\/> <br\/>\npd.concat([data frame parameters], axis,ignore_index) : It combines 2 tables. <br\/> \n**axis** : It adds the tables as horizontal or vertical. If axis equals 0, it adds as horizontal. If axis equals 1, it adds as vertical. <br\/>\n**ignore_index** : It ignores index values.\n","c35589ed":"Hi everybody !\n\nIn this notebook, I'm gonna analyze Google Play Store datas. While I was analyzing the data, I used Python. This study is my first data analyzing study. If you liked this kernel or it was benefit to you, forgot upvotes! \nGood studies. :) <br\/>\n<br\/>\n### **CONTENT** \n\n1. [Introduction to data](#1)  <br\/>\n2. [Cleaning Data](#2)         <br\/>\n&nbsp;&nbsp;&nbsp;&nbsp; A. [Category](#a)   <br\/>\n&nbsp;&nbsp;&nbsp;&nbsp; B. [Rating](#b)      <br\/>\n&nbsp;&nbsp;&nbsp;&nbsp; C. [Reviews](#c)   <br\/>\n&nbsp;&nbsp;&nbsp;&nbsp; D. [Size](#d)   <br\/>\n&nbsp;&nbsp;&nbsp;&nbsp; E. [Installs](#e)   <br\/>\n&nbsp;&nbsp;&nbsp;&nbsp; F. [Price](#f)   <br\/>\n&nbsp;&nbsp;&nbsp;&nbsp; G. [Last Updated](#g)  <br\/>\n3. [Exploratory Data Analysis](#3)  <br\/>\n&nbsp;&nbsp;&nbsp;&nbsp; A. [Category and Reviews](#a1)   <br\/>\n&nbsp;&nbsp;&nbsp;&nbsp; B. [Category and Installs](#b1)      <br\/>\n&nbsp;&nbsp;&nbsp;&nbsp; C. [Word Cloud](#c1)   <br\/>\n&nbsp;&nbsp;&nbsp;&nbsp; D. [Content Rating](#d1)   <br\/>","e2f65811":"<a id=\"4\"><\/a>\n# Conclusion\n\nThis is the end of the story. I hope It benefits to you. You can visualize with a lot of different model. Actually, I thought that EDA study could be boring. But It's important for ML models. I'm definitely gonna myself about this subject. You can help with your comments. Wish to see you with different datasets.\n\n**Thank you for your votes and comments **","535a1929":"'1.9' is wrong value. So I have to see in which rows '1.9' corresponds to.","ab212f3c":"<a id=\"a1\"><\/a>\n## Category and Reviews","7ed8f8ee":"<a id=\"3\"><\/a>\n# Exploratory Data Analysis\n\nAfter, I prepared to analyze our data, somewhat let's explore the datas. :)\n\n* corr() : It returns correlation. \n* describe (): It returns number of entries, average of entries, outlier values, standart deviation, minimum and maximum entry.","50faef0d":"Data type of Price is object. I have made similar processes, which I made the in 'Size'. ","3e9b751d":"Data type of Size is object. I'm gonna make similar processes, which I made the in 'Size'. ","20744ece":"<a id=\"f\"><\/a>\n## Price"}}