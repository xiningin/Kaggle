{"cell_type":{"c1d6497c":"code","f93c9782":"code","1e3abf85":"code","dcc878f1":"code","10ab1312":"code","e5c0354f":"code","dc890b13":"code","60ed745b":"code","12ab3197":"code","52c5428f":"code","18f8386f":"code","07ecfaeb":"code","ff88e7e3":"code","1eb93cf4":"code","8662257e":"code","f58ece67":"markdown","ab30b9cc":"markdown","09e5d899":"markdown","a292a886":"markdown","24d1b00a":"markdown"},"source":{"c1d6497c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f93c9782":"df = pd.read_csv('..\/input\/data-science-job-posting-on-glassdoor\/Cleaned_DS_Jobs.csv')\ndfc = df.copy()\ndfc","1e3abf85":"df.columns","dcc878f1":"df['job_simp'].unique()","10ab1312":"import matplotlib.pyplot as plt\nimport plotly.graph_objs as go\nfrom wordcloud import WordCloud\nfrom matplotlib import colors ","e5c0354f":"dfj = df['job_simp'].value_counts().head(10).sort_values(ascending = True).reset_index()\ndfj.drop(dfj[dfj['index'] =='na'].index, inplace=True)\n\ndfc = df['Company Name'].value_counts().head(10).sort_values(ascending = True).reset_index()\ndfs = df['avg_salary'].value_counts().head(10).sort_values(ascending = True).reset_index()\ndfl = df['Location'].value_counts().head(10).sort_values(ascending = True).reset_index()","dc890b13":"fig = go.Figure()\nfig.add_trace(go.Bar(x = dfj['job_simp'],\n                     y = dfj['index'],\n                     orientation='h',\n                     name = 'Job Title',\n                     marker = dict(color = 'LightCoral')))\n\nfig.add_trace(go.Bar(x = dfc['Company Name'],\n                     y = dfc['index'],\n                     orientation='h',\n                     name = 'Company',\n                     marker = dict(color = '#D9594C')))\n\nfig.add_trace(go.Bar(x = dfs['avg_salary'],\n                     y = dfs['index'],\n                     orientation='h',\n                     name = 'Average Salary',\n                     marker = dict(color = '#A26769')))\n\nfig.add_trace(go.Bar(x = dfl['Location'],\n                     y = dfl['index'],\n                     orientation='h',\n                     name = 'Location',\n                     marker = dict(color = '#B8B08D')))\n\n\nfig.update_layout( \n    updatemenus=[ \n        dict( \n            type = \"buttons\",\n            direction=\"left\", \n            pad={\"r\": 10, \"t\": 10},\n            showactive=True, \n            x=0.16, \n            xanchor=\"left\",\n            y=1.12, \n            yanchor=\"top\",\n            font = dict(color = 'Indigo',size = 14),\n            buttons=list([ \n                dict(label=\"All\", \n                     method=\"update\", \n                     args=[ {\"visible\": [True, True, True,True,]}, \n                            {'showlegend' : True} \n                        ]),\n                dict(label=\"Job Title\", \n                     method=\"update\", \n                     args=[ {\"visible\": [True, False, False,False,]}, \n                            {'showlegend' : True} \n                        ]), \n\n                dict(label='Company', \n                     method=\"update\",\n                     args=[ {\"visible\": [False, True,False, False,]}, \n                            {'showlegend' : True}]),\n                \n                dict(label='Salary', \n                     method=\"update\", \n                     args=[ {\"visible\": [False,False, True, False,]}, \n                            {'showlegend' : True} \n                     ]), \n                \n                dict(label='Location', \n                     method=\"update\", \n                     args=[ {\"visible\": [False, False, False, True,]}, \n                            {'showlegend' : True} \n                     ]), \n                \n            ]),\n        )])\n\nfig.update_layout(\n    annotations=[\n        dict(text=\"Choose:\", showarrow=False,\n             x=0, y=1.075, yref=\"paper\", align=\"right\",\n             font=dict(size=16,color = 'DarkSlateBlue'))])\n\nfig.update_layout(title =\"Top 10 DS Jobs, Companies, Salary and Locations \\n\",\n                  title_x = 0.5,\n                  title_font = dict(size = 20, color = 'LightCoral'))\n\nfig.show()","60ed745b":"dfd1 = df[df['job_simp']== 'data scientist']\ndfd2 = df[df['job_simp']== 'analyst']\ndfd3 = df[df['job_simp']== 'data engineer']\ndfd4 = df[df['job_simp']== 'mle']\ndfd5 = df[df['job_simp']== 'manager']\ndfd6 = df[df['job_simp']== 'director']","12ab3197":"Cdf1 = dfd1['Sector'].value_counts()[:10].reset_index()\nCdf2 = dfd2['Sector'].value_counts()[:10].reset_index()\nCdf3 = dfd3['Sector'].value_counts()[:10].reset_index()\nCdf4 = dfd4['Sector'].value_counts()[:10].reset_index()\nCdf5 = dfd5['Sector'].value_counts()[:10].reset_index()\nCdf6 = dfd6['Sector'].value_counts()[:10].reset_index()","52c5428f":"Cdf2","18f8386f":"Cdf1.drop(Cdf1[Cdf1['index'] =='-1'].index, inplace=True)\nCdf2.drop(Cdf2[Cdf2['index'] =='-1'].index, inplace=True)\nCdf3.drop(Cdf3[Cdf3['index'] =='-1'].index, inplace=True)\nCdf4.drop(Cdf4[Cdf4['index'] =='-1'].index, inplace=True)\nCdf5.drop(Cdf5[Cdf5['index'] =='-1'].index, inplace=True)\nCdf6.drop(Cdf6[Cdf6['index'] =='-1'].index, inplace=True)","07ecfaeb":"Cdf2","ff88e7e3":"fig = go.Figure()\n\nfig.add_trace(go.Bar(x = Cdf1[\"index\"],\n                     y = Cdf1[\"Sector\"],\n                     marker = dict(color = 'Tomato'),\n                     name = 'Data Scientist'))\n\nfig.add_trace(go.Bar(x = Cdf2['index'],\n                     y = Cdf2['Sector'],\n                     name = 'Analyst',\n                     marker = dict(color = 'LightCoral')))\n\nfig.add_trace(go.Bar(x = Cdf3['index'],\n                     y = Cdf3['Sector'],\n                     name = 'Data Engineer',\n                     marker = dict(color = 'SteelBlue')))\n\nfig.add_trace(go.Bar(x = Cdf4['index'],\n                     y = Cdf4['Sector'],\n                     name = 'Machine Learning Engineer',\n                     marker = dict(color = '#B74F6F')))\n\nfig.add_trace(go.Bar(x = Cdf5['index'],\n                     y = Cdf5['Sector'],\n                     name = 'Manager',\n                     marker = dict(color = '#62A87C')))\n\nfig.add_trace(go.Bar(x = Cdf5['index'],\n                     y = Cdf5['Sector'],\n                     name = 'Director',\n                     marker = dict(color = 'CadetBlue')))\n\n\nfig.update_layout( \n    updatemenus=[ \n        dict( \n            direction=\"down\", \n            pad={\"r\": 10, \"t\": 10},\n            showactive=True, \n            x=0.13, \n            xanchor=\"left\",\n            y=1.12, \n            yanchor=\"top\",\n            font = dict(color = 'Indigo',size = 14),\n            buttons=list([ \n                dict(label=\"All\", \n                     method=\"update\", \n                     args=[ {\"visible\": [True, True, True,True, True, True]}, \n                            {'showlegend' : True} \n                        ]),\n                dict(label=\"Data Scientist\", \n                     method=\"update\", \n                     args=[ {\"visible\": [True, False, False,False, False,False]}, \n                            {'showlegend' : True} \n                        ]),\n                dict(label='Analyst', \n                     method=\"update\", \n                     args=[ {\"visible\": [False, True, False,False, False,False]}, \n                            {'showlegend' : True} \n                     ]), \n                dict(label='Data Engineer', \n                     method=\"update\", \n                     args=[ {\"visible\": [False, False, True,False, False,False]}, \n                            {'showlegend' : True} \n                        ]),  \n                dict(label='Machine Learning Engineer', \n                     method=\"update\", \n                     args=[ {\"visible\": [False, False,False,True, False,False]}, \n                            {'showlegend' : True}]),\n                dict(label='Manager', \n                     method=\"update\", \n                     args=[ {\"visible\": [False, False, False,False, True,False]}, \n                            {'showlegend' : True} \n                        ]),\n                dict(label='Director', \n                     method=\"update\", \n                     args=[ {\"visible\": [False, False, False,False, False,True]}, \n                            {'showlegend' : True} \n                        ]),\n            ]),\n        )])\n\nfig.update_layout(\n    annotations=[\n        dict(text=\"Choose:\", showarrow=False,\n             x=0, y=1.075, yref=\"paper\", align=\"right\",\n             font=dict(size=16,color = 'DarkSlateBlue'))])\n\nfig.update_layout(title =\"The distribution of Sectors by DS Job Titles\",\n                  title_x = 0.5,\n                  title_font = dict(size = 20, color = 'LightCoral'))\n\nfig.show()","1eb93cf4":"color_list=  ['DarkBlue','Teal','LightBlue','MediumAquamarine','Plum','OrangeRed','DarkRed','Pink','LightGoldenrodYellow']\n\ncolormap = colors.ListedColormap(color_list)\n\nplt.rcParams['figure.figsize'] = (15,15)\n\nwordcloud =  WordCloud(background_color= 'white',\n                       width = 1200,height = 800 ,\n                       max_words = 120,colormap = colormap ).generate(\" \".join(df['Job Title']))\nplt.imshow(wordcloud)\nplt.axis(\"off\")\nplt.show()","8662257e":"color_list=  ['DarkBlue','Teal','LightBlue','MediumAquamarine','Plum','OrangeRed','DarkRed','Pink','LightGoldenrodYellow']\n\ncolormap = colors.ListedColormap(color_list)\n\nplt.rcParams['figure.figsize'] = (15,15)\n\nwordcloud =  WordCloud(background_color= 'white',\n                       width = 1200,height = 800 ,\n                       max_words = 120,colormap = colormap ).generate(\" \".join(df['Job Description']))\nplt.imshow(wordcloud)\nplt.axis(\"off\")\nplt.show()","f58ece67":"**Word Cloud**","ab30b9cc":"Exploration\n","09e5d899":"Drop the \"-1\" Value","a292a886":" Buttons for Visualization","24d1b00a":"Dropdown Menu:"}}