{"cell_type":{"799b5419":"code","82379cd9":"code","f487857b":"code","928ee0b3":"code","7f424a9d":"code","8091ea45":"code","d374dbc9":"code","e7c6caf3":"code","bb3f8d19":"code","ccb613d2":"code","f3fbe9e6":"code","1a54df17":"code","b4d5b123":"code","7123f4c3":"markdown","b8afb54d":"markdown","ee4f422f":"markdown","d0990fa2":"markdown","d6e175b5":"markdown","3de90da1":"markdown","21820362":"markdown","832d4fdb":"markdown","b16fb429":"markdown","0e87019a":"markdown","a0b2ea11":"markdown","ad73a8c6":"markdown","9d73cdd0":"markdown"},"source":{"799b5419":"import numpy\nimport shapely.geometry as shg\nimport fiona\nimport geopandas\nimport matplotlib.pyplot as plt","82379cd9":"poly1 = [(1,1), (1,5), (5, 5), (5, 1), (1, 1)]\npoly2 = [(2,1.3), (5, 1.2), (6,3),(6,4),(3, 5), (1.4, 3), (1.5, 2), (2, 1.3)]","f487857b":"shgpoly1 = shg.Polygon(poly1)\nshgpoly2 = shg.Polygon(poly2)\n\nprint('Area of poly 1 is {}'.format(shgpoly1.area))\nprint('Area of poly 2 is {}'.format(shgpoly2.area))","928ee0b3":"plt.plot(shgpoly1.exterior.xy[0], shgpoly1.exterior.xy[1])\nplt.plot(shgpoly2.exterior.xy[0], shgpoly2.exterior.xy[1])","7f424a9d":"\"\"\"\nCalculates the spatial mean of a set of xy coordinates\nparameters: a list of coord eg [(1,1), (1,5), (5, 5), (5, 1), (1, 1)]\nreturns: the mean x and y values\nusage: x, y = spatialmean(coords)\n\"\"\"\ndef spatialmean(coords):\n    # decide whether to ignore the last coordinate or not\n    # ignore last coordinate if same as first\n    adj=1\n    if coords[0] != coords[-1]:\n        adj==0\n    \n    x, y = zip(*coords)\n    mx = 0\n    my = 0\n    for i in range(len(coords)-adj):\n        mx = mx + x[i]\n        my = my + y[i]\n    mx = mx \/ (len(coords)-adj)\n    my = my \/ (len(coords)-adj)   \n    return mx, my","8091ea45":"x, y = spatialmean(poly1)\nprint(x, y)","d374dbc9":"# iterating over a polygon\n# accessing pairs of coodinates\n\nfor i in range(len(poly1)-1):\n    print (poly1[i], poly1[i+1])","e7c6caf3":"#def areapoly(poly):\n    # set running sum to zero\n    # calculate meanx and meany (use the spatialmean function)\n    # Iterate over the Polygon coordinates\n         # use range object as need to visit current and next (i and i+1)\n              # stop one before the end (len(poly)-1)\n         # For each set of coordinate pairs calculate sum\n         # add this to the running total\n    # When loop complete\n    # calculate half the absolute area of the running total\n    #return area\n","bb3f8d19":"#Dummy function - delete me\ndef areapoly(poly):\n    #math.fabs()\n    return 16","ccb613d2":"area1 = areapoly(poly1)\narea2 = areapoly(poly2)\n\nprint('Area of poly 1 is {} and from function {}'.format(shgpoly1.area, area1))\nprint('Area of poly 2 is {} and from function {}'.format(shgpoly2.area, area2))\n\n","f3fbe9e6":"# Loading shapefile data into a list\nshapefile_polygons = []                  #a list to store the polygons we load\n\n\nc = fiona.open('..\/input\/ceg1713-data-files\/polygons.shp') #Open the shapefile\n\nfor each_poly in c:\n    geom = shg.shape(each_poly['geometry'])\n    poly_data = each_poly[\"geometry\"][\"coordinates\"][0]  #EXTERIOR RING ONLY\n    poly = shg.Polygon(poly_data)\n    print(poly)\n    #Converts into the same format as the other data\n    shapefile_polygons.append(list(poly.exterior.coords))\n\ndisplay(shapefile_polygons)","1a54df17":"plt.gca().set_aspect('equal', adjustable='box')  #To make the x and y axis the same scale\n\nfor poly in shapefile_polygons:\n    xy = list(zip(*poly))\n    plt.fill(xy[0], xy[1], alpha=0.5)\n    ","b4d5b123":"for shp in shapefile_polygons:\n    print(areapoly(shp))","7123f4c3":"# 1st we need a spatial mean function\n* note the comments on the function explaining it\n* this one has been extended to ignore the last coordinate","b8afb54d":"# To complete\n* test with the buildings file\n* test against objective truth eg Shapely or ArcGIS\n* test with other polygons? (manually created)\n* construct a notebook with markdown\/comments\n  * to demonstrate how the function works and how it was tested\n  * think about presenting your results visually etc.\n  * Save the notebook and copy the link and function to your submitted doc\n  * Remember to add 'geoanorak' as a collaborator","ee4f422f":"# Plotting them","d0990fa2":"# OK, now we can write and test a function\n* over to you...\n* write and test before going further\n* Key is iterating over the polygon","d6e175b5":"# OK let's add the data from a file\n* we will use the simple polygons file first","3de90da1":"# Test the function and compare with shapely","21820362":"# If you get errors or the wrong answers go back and edit the function until it works\n* don't go any further until it works....","832d4fdb":"# Pass these polygons to our function","b16fb429":"# We end up with a list of polygons\n# Let's plot them out","0e87019a":"# Check our function works","a0b2ea11":"# First some simple test data","ad73a8c6":"# And some objective truth to test against\n* create shapely polygons and calc area using shapely\n* plot them so we know what are dealing with","9d73cdd0":"# Assessment 2\n\n* Write a function to calculate the area of any simple polygon\n* test the function using both manual inputs and data read from shapefiles\n* Create a kaggle notebook that documents the development and testing of the function\n* Consider how you show outputs\n* Add the CEG1713-data-files dataset"}}