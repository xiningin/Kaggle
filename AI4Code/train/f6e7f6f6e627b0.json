{"cell_type":{"72d3c3e4":"code","562d6108":"code","4896c0d6":"code","a44408af":"code","62b2ff27":"code","2d16d655":"code","40979ef5":"markdown","60f41969":"markdown","6f9c886a":"markdown","4ffbd633":"markdown","552440ad":"markdown","165dc24f":"markdown","e78fc8a0":"markdown"},"source":{"72d3c3e4":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","562d6108":"# for simplicity and plotting, the dataset has only 2 columns (x,y)\ndf = pd.read_csv(\"..\/input\/salary-data-simple-linear-regression\/Salary_Data.csv\")\nprint(df.head())\nx = df['YearsExperience']\ny = df['Salary']\nm=len(y)","4896c0d6":"plt.scatter(x,y)\nplt.title(\"\")\nplt.xlabel(\"No:of years of experience\")\nplt.ylabel(\"Salary\")\nplt.show()","a44408af":"def ComputeCost(X,y,theta):\n    error = np.dot(X,theta)-y\n    return np.sum(np.power(error,2))\/(2*m)  # squared-error\n\ndef GradientDescent(X,y,theta,iterations,alpha):\n    J_history=np.zeros([iterations,1])\n    m=len(y)\n    for i in range (iterations):\n        temp=np.dot(X,theta)-y\n        temp=np.dot(X.T,temp)\n        theta=theta-(alpha\/m)*temp\n\n        J_history[i]=ComputeCost(X,y,theta)\n    return theta,J_history","62b2ff27":"X = x[:,np.newaxis]                        #increasing dimension\ny = y[:,np.newaxis]                        #increasing dimension\ntheta = np.zeros([2,1])\nX = np.hstack((np.ones([m,1]), X))  #addind intercept term\n\niterations = 1500\nalpha = 0.01\n\nJ = ComputeCost(X,y,theta)\nprint(\"Cost=\",J)\n\ntheta,J_history = GradientDescent(X,y,theta,iterations,alpha)\nprint(\"\\nTheta= \",theta)\n\nJ = ComputeCost(X,y,theta)\nprint(\"\\nOptimised Cost= \",J)","2d16d655":"#.....Plotting Best Fit Graph.....\nplt.scatter(x,y)\nplt.title('BEST FIT GRAPH')\nplt.xlabel('Population of city in 10,000s')\nplt.ylabel('Profit in Rs.10,000s')\nplt.plot(x,np.dot(X,theta),color='green')\nplt.show()\n\n#.....Plotting Convergence Graph.....\nits=np.zeros([iterations,1])\nfor i in range (iterations):\n    its[i]=i\n\nplt.plot(its,J_history)\nplt.title('CONVERGENCE GRAPH')\nplt.xlabel('No: of Iterations')\nplt.ylabel('Cost Function')\nplt.show()","40979ef5":"### Thank you","60f41969":"### Load and Plot Dataset","6f9c886a":"### Plotting Learning Curves","4ffbd633":"### Import Libraries","552440ad":"### Define required functions","165dc24f":"### Linear Regression","e78fc8a0":"### Plotting Dataset"}}