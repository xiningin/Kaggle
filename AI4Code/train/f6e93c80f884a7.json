{"cell_type":{"f81344e8":"code","2b3a85b1":"code","00e15651":"code","010f393d":"code","5a7cbc22":"code","be6ce977":"code","8e6a60e6":"code","2cde7b4a":"code","8b55de4f":"code","11de12f2":"code","7673f300":"code","48ca11f1":"code","432ffcbe":"code","03079e3d":"code","b2048e69":"code","41b8507a":"code","c1e23fe6":"code","c32e815d":"code","2243b947":"markdown","2e5ad11a":"markdown","4d536959":"markdown","73ffa6ca":"markdown","8920ffca":"markdown"},"source":{"f81344e8":"import numpy as np \nimport pandas as pd \nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Lambda\nfrom keras.layers.normalization import BatchNormalization\nfrom keras.layers import Convolution2D, MaxPooling2D\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau\nfrom sklearn.model_selection import train_test_split\nfrom keras.utils.np_utils import to_categorical","2b3a85b1":"train = pd.read_csv(\"..\/input\/digit-recognizer\/train.csv\")\ntest = pd.read_csv(\"..\/input\/digit-recognizer\/test.csv\")","00e15651":"train.info()","010f393d":"train.columns","5a7cbc22":"y_train= train[\"label\"]\nX_train = (train.drop(\"label\",axis=1).values).astype('float32') \ny_train = y_train.values.astype('int32') \nX_test = test.values.astype('float32')\ny_train= to_categorical(y_train)","be6ce977":"X_train = X_train \/ 255.0\nX_test = X_test \/ 255.0","8e6a60e6":"X_train = X_train.reshape(-1,28,28,1)\nX_test = X_test.reshape(-1,28,28,1)","2cde7b4a":"media = X_train.mean()\nstd = X_train.std()\n\ndef standarizador(x): \n    return (x-media)\/std","8b55de4f":"X_train=standarizador(X_train)\nX_test=standarizador(X_test)","11de12f2":"X_train, X_valid, y_train, y_valid = train_test_split(X_train, y_train, test_size = 0.1, random_state=42)","7673f300":"import tensorflow as tf\nfrom tensorflow.keras.callbacks import EarlyStopping\n\ncustom_early_stopping = EarlyStopping(\n    monitor='val_accuracy', \n    patience=30,\n    restore_best_weights=True\n)","48ca11f1":"generatordata = ImageDataGenerator(zoom_range = 0.2,height_shift_range = 0.1,width_shift_range = 0.2,rotation_range = 12)","432ffcbe":"model = Sequential()\nmodel.add(Convolution2D(64,(3,3), activation='relu',input_shape=(28,28,1)))\nmodel.add(MaxPooling2D((2, 2)))\nmodel.add(Dropout(0.5))\nmodel.add(Convolution2D(64,(3,3), activation='relu'))\nmodel.add(MaxPooling2D((2, 2)))\nmodel.add(Dropout(0.5))\nmodel.add(Convolution2D(32,(3,3), activation='relu'))\nmodel.add(MaxPooling2D((2, 2)))\nmodel.add(Dropout(0.5))\nmodel.add(Flatten())\nmodel.add(Dense(256, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation='softmax'))","03079e3d":"model.compile(optimizer = \"adam\" , loss = \"categorical_crossentropy\", metrics=[\"accuracy\"])","b2048e69":"model.summary()","41b8507a":"batch_size=16\nepochs=150","c1e23fe6":"history = model.fit(generatordata.flow(X_train, y_train, batch_size=batch_size),epochs=epochs,\n                              verbose=1,\n                              validation_data = (X_valid,y_valid),\n                    callbacks=[custom_early_stopping])\n","c32e815d":"preds = model.predict_classes(X_test, verbose=0)\npreds = pd.Series(preds,name=\"Label\")\nsubm = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),preds],axis = 1)\nsubm.to_csv(\"CNN-DR1.csv\", index=False, header=True)","2243b947":"## Submission","2e5ad11a":"### Earlystopping","4d536959":"# Preprocessing","73ffa6ca":"### Prepare DataGenerator","8920ffca":"# CNN"}}