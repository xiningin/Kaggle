{"cell_type":{"ad640071":"code","09c7ffad":"code","d809e069":"code","f047f9bb":"code","368e9226":"code","bd2f068d":"code","18e5f218":"code","f2e207ae":"code","b2c53686":"code","b9b12149":"code","501edb58":"code","d6a15619":"code","028c7436":"code","58052508":"code","f8bf8652":"code","bb6b2103":"code","a01ba161":"code","288fa3ef":"code","929f643f":"code","ad592529":"code","77d26357":"code","f96c8101":"code","750bff24":"code","642609b8":"code","9857bf85":"code","929d4e0e":"code","12ec2931":"code","65f9a0ef":"code","113b0cf3":"code","f7e33b1a":"code","d9171b92":"code","1bcccebd":"code","1a2bd5cc":"code","a8188663":"code","0178eeea":"code","7df06c12":"code","fb1f2fbe":"code","39c402fd":"code","fc13327f":"code","31d2e033":"code","c232ad68":"code","53f65a2c":"code","0d6e54e1":"code","72db8981":"code","a11c4e02":"code","94f49b42":"code","66c9988a":"code","546ad9db":"code","2cd19bb9":"code","40aaed91":"code","96bc739d":"code","9706544e":"code","2526a371":"code","5750aef2":"code","a77fbfa9":"code","e8f9e3bd":"markdown","70ff3604":"markdown"},"source":{"ad640071":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom collections import Counter\n%matplotlib inline\n\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\/fatal-police-shootings-in-the-us\"]).decode(\"utf8\"))","09c7ffad":"\nmedian_household_income = pd.read_csv('..\/input\/fatal-police-shootings-in-the-us\/MedianHouseholdIncome2015.csv', encoding=\"windows-1252\")\n\npercentage_ppl_below_poverty = pd.read_csv('..\/input\/fatal-police-shootings-in-the-us\/PercentagePeopleBelowPovertyLevel.csv', encoding=\"windows-1252\")\n\npercent_over_25_completed_highSchool = pd.read_csv('..\/input\/fatal-police-shootings-in-the-us\/PercentOver25CompletedHighSchool.csv', encoding=\"windows-1252\")\n\npolice_killings = pd.read_csv('..\/input\/fatal-police-shootings-in-the-us\/PoliceKillingsUS.csv', encoding=\"windows-1252\")\n\nshare_race_city = pd.read_csv('..\/input\/fatal-police-shootings-in-the-us\/ShareRaceByCity.csv', encoding=\"windows-1252\")","d809e069":"percentage_ppl_below_poverty.head()","f047f9bb":"percentage_ppl_below_poverty.info()","368e9226":"percentage_ppl_below_poverty.poverty_rate.value_counts()","bd2f068d":"# we dont know what the 201 values are, so we change them with zero\n# since the purpose of this course is to understand visualization.\n\npercentage_ppl_below_poverty.poverty_rate.replace([\"-\"],0,inplace=True)\npercentage_ppl_below_poverty.poverty_rate.value_counts()","18e5f218":"# transforming poverty_rate values from string to float\n\npercentage_ppl_below_poverty.poverty_rate = percentage_ppl_below_poverty.poverty_rate.astype(float)","f2e207ae":"percentage_ppl_below_poverty[\"Geographic Area\"].unique()","b2c53686":"area_list = list(percentage_ppl_below_poverty[\"Geographic Area\"].unique())","b9b12149":"area_poverty_ratio = []","501edb58":"for i in area_list:\n    x = percentage_ppl_below_poverty[percentage_ppl_below_poverty[\"Geographic Area\"]==i]\n    area_poverty_rate = sum(x.poverty_rate)\/len(x)\n    area_poverty_ratio.append(area_poverty_rate)","d6a15619":"data = pd.DataFrame({\"area_list\": area_list, \"area_poverty_ratio\":area_poverty_ratio})\nnew_index = (data[\"area_poverty_ratio\"].sort_values(ascending=False)).index.values\nsorted_data = data.reindex(new_index)","028c7436":"# visualizing poverty rate by state\n\nplt.figure(figsize=(15,10))\nax= sns.barplot(x=sorted_data[\"area_list\"], y=sorted_data[\"area_poverty_ratio\"])\nplt.xticks(rotation = 45)\nplt.xlabel(\"States\")\nplt.ylabel(\"Poverty Rate\")\nplt.title(\"Poverty Rate by State\")\nplt.show()","58052508":"police_killings.head()","f8bf8652":"police_killings.name.value_counts()","bb6b2103":"seperate = police_killings.name[police_killings.name != \"TK TK\"].str.split()\na,b = zip(*seperate)\nname_list =a+b\nname_count = Counter(name_list)\nmost_common_names = name_count.most_common(15)","a01ba161":"# most common names which we want to visualize\n\nmost_common_names","288fa3ef":"x,y = zip(*most_common_names)\nx,y = list(x),list(y)\n# \nplt.figure(figsize=(15,10))\nax= sns.barplot(x=x, y=y,palette = sns.hls_palette(len(x)))\nplt.xlabel('Name or Surname of killed people')\nplt.ylabel('Frequency')\nplt.title('Most common 15 Name or Surname of killed people')","929f643f":"percent_over_25_completed_highSchool.info()","ad592529":"percent_over_25_completed_highSchool.percent_completed_hs.value_counts()","77d26357":"# High school graduates of the population older than 25, by state\n\npercent_over_25_completed_highSchool.percent_completed_hs.replace(['-'],0.0,inplace = True)\npercent_over_25_completed_highSchool.percent_completed_hs = percent_over_25_completed_highSchool.percent_completed_hs.astype(float)\narea_list = list(percent_over_25_completed_highSchool[\"Geographic Area\"].unique())\narea_highschool = []\nfor i in area_list:\n    x = percent_over_25_completed_highSchool[percent_over_25_completed_highSchool[\"Geographic Area\"]==i]\n    area_highschool_rate = sum(x.percent_completed_hs)\/len(x)\n    area_highschool.append(area_highschool_rate)\n    \n# sorting our data:\n    \ndata = pd.DataFrame({\"area_list\": area_list, \"area_highschool_ratio\":area_highschool})\nnew_index = (data[\"area_highschool_ratio\"].sort_values(ascending=False)).index.values\nsorted_data2 = data.reindex(new_index)\n\n# plotting our data:\n\nplt.figure(figsize=(15,10))\nsns.barplot(x=sorted_data2[\"area_list\"],y=sorted_data2[\"area_highschool_ratio\"])\nplt.xticks(rotation = 45)\nplt.xlabel(\"State\")\nplt.ylabel(\"High school graduation rate\")\nplt.title(\"High school graduates of the population older than 25, by state\")","f96c8101":"# Percentage of each states population in relation to race\n\nshare_race_city.head()","750bff24":"share_race_city.info()","642609b8":"share_race_city.value_counts","9857bf85":"share_race_city.isnull()","929d4e0e":"share_race_city.share_hispanic","12ec2931":"# Races of the USA, by state\n\nshare_race_city.replace(['-'],0.0,inplace = True)\nshare_race_city.replace(['(X)'],0.0,inplace = True)\nshare_race_city.loc[:,['share_white','share_black','share_native_american','share_asian','share_hispanic']] = share_race_city.loc[:,['share_white','share_black','share_native_american','share_asian','share_hispanic']].astype(float)\narea_list = list(share_race_city['Geographic area'].unique())\nshare_white = []\nshare_black = []\nshare_native_american = []\nshare_asian = []\nshare_hispanic = []\nfor i in area_list:\n    x = share_race_city[share_race_city['Geographic area']==i]\n    share_white.append(sum(x.share_white)\/len(x))\n    share_black.append(sum(x.share_black) \/ len(x))\n    share_native_american.append(sum(x.share_native_american) \/ len(x))\n    share_asian.append(sum(x.share_asian) \/ len(x))\n    share_hispanic.append(sum(x.share_hispanic) \/ len(x))","65f9a0ef":"# visualization\n# finding average population of each race by state\n\nf,ax = plt.subplots(figsize = (9,15))\nsns.barplot(x=share_white,y=area_list,color='green',alpha = 0.5,label='White' )\nsns.barplot(x=share_black,y=area_list,color='blue',alpha = 0.7,label='African American')\nsns.barplot(x=share_native_american,y=area_list,color='cyan',alpha = 0.6,label='Native American')\nsns.barplot(x=share_asian,y=area_list,color='yellow',alpha = 0.6,label='Asian')\nsns.barplot(x=share_hispanic,y=area_list,color='red',alpha = 0.6,label='Hispanic')\n\nax.legend(loc='lower right',frameon = True)     # legendlarin gorunurlugu\nax.set(xlabel='Percentage of Races', ylabel='States',title = \"Percentage of State's Population According to Races \")","113b0cf3":"sorted_data.head()","f7e33b1a":"sorted_data2.head()","d9171b92":"# high school graduation rate vs Poverty rate of each state\n\nsorted_data['area_poverty_ratio'] = sorted_data['area_poverty_ratio']\/max( sorted_data['area_poverty_ratio'])\nsorted_data2['area_highschool_ratio'] = sorted_data2['area_highschool_ratio']\/max( sorted_data2['area_highschool_ratio'])\ndata = pd.concat([sorted_data,sorted_data2['area_highschool_ratio']],axis=1)\ndata.sort_values('area_poverty_ratio',inplace=True)\n\n# visualize\n\nf,ax1 = plt.subplots(figsize =(20,10))\n\nsns.pointplot(x='area_list',y='area_poverty_ratio',data=data,color='black',alpha=0.8)\nsns.pointplot(x='area_list',y='area_highschool_ratio',data=data,color='red',alpha=0.8)\n\nplt.text(40,0.6,'high school graduation ratio',color='red',fontsize = 17,style = 'italic')\nplt.text(40,0.55,'poverty ratio',color='black',fontsize = 18,style = 'italic')\nplt.xlabel('States',fontsize = 15,color='blue')\nplt.ylabel('Values',fontsize = 15,color='blue')\nplt.title('High School Graduate  VS  Poverty Rate',fontsize = 20,color='blue')\nplt.grid()\n\n# note: writing data=data makes seaborn understand feature names easier","1bcccebd":"# same visualization with different style of seaborn code\n# joint kernel density\n# pearsonr= if it is 1, there is positive correlation and if it is, -1 there is negative correlation.\n# If it is zero, there is no correlation between variables\n# Show the joint distribution using kernel density estimation \ng = sns.jointplot(data.area_poverty_ratio, data.area_highschool_ratio, kind=\"kde\", size=7)\n\nplt.show()","1a2bd5cc":"# you can change parameters of joint plot\n# kind : { \u201cscatter\u201d | \u201creg\u201d | \u201cresid\u201d | \u201ckde\u201d | \u201chex\u201d }\n# Different usage of parameters but same plot with previous one\ng = sns.jointplot(\"area_poverty_ratio\", \"area_highschool_ratio\", data=data,size=5, ratio=3, color=\"r\")","a8188663":"# you can change parameters of joint plot\n# kind : { \u201cscatter\u201d | \u201creg\u201d | \u201cresid\u201d | \u201ckde\u201d | \u201chex\u201d }\n# Different usage of parameters but same plot with previous one\ng = sns.jointplot(\"area_poverty_ratio\", \"area_highschool_ratio\", data=data,size=5, ratio=3, color=\"r\")","0178eeea":"police_killings","7df06c12":"police_killings.value_counts()","fb1f2fbe":"police_killings.race.value_counts()","39c402fd":"police_killings.race.dropna(inplace = True)\nlabels = police_killings.race.value_counts().index\ncolors = ['grey','blue','red','yellow','green','brown']\nexplode = [0,0,0,0,0,0]\nsizes = police_killings.race.value_counts().values\n\n# visual\nplt.figure(figsize = (7,7))\nplt.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%')\nplt.title('Killed People According to Races',color = 'blue',fontsize = 15)","fc13327f":"# one again, high school graduation rate vs Poverty rate\n# Show the results of a linear regression within each dataset\nsns.lmplot(x=\"area_poverty_ratio\", y=\"area_highschool_ratio\", data=data)\nplt.show()","31d2e033":"data.head()","c232ad68":"# cubehelix plot\nsns.kdeplot(data.area_poverty_ratio, data.area_highschool_ratio, shade=True, cut=3)\nplt.show()","53f65a2c":"pal = sns.cubehelix_palette(2, rot=-.5, dark=.3)\nsns.violinplot(data=data, palette=pal, inner=\"points\")\nplt.show()","0d6e54e1":"data.corr()","72db8981":"f,ax = plt.subplots(figsize=(5, 5))\nsns.heatmap(data.corr(), annot=True, linewidths=0.5,linecolor=\"red\", fmt= '.1f',ax=ax)\nplt.show()","a11c4e02":"police_killings.manner_of_death.unique()","94f49b42":"sns.boxplot(x=\"gender\", y=\"age\", hue=\"manner_of_death\", data=police_killings, palette=\"PRGn\")\nplt.show()","66c9988a":"sns.swarmplot(x=\"gender\", y=\"age\",hue=\"manner_of_death\", data=police_killings)\nplt.show()","546ad9db":"sns.pairplot(data)\nplt.show()","2cd19bb9":"police_killings.gender.value_counts()","40aaed91":"sns.countplot(police_killings.gender)\nplt.title(\"gender\",color = 'blue',fontsize=15)\nplt.show()","96bc739d":"armed = police_killings.armed.value_counts()\nplt.figure(figsize=(10,7))\nsns.barplot(x=armed[:7].index,y=armed[:7].values)\nplt.ylabel('Number of Weapon')\nplt.xlabel('Weapon Types')\nplt.title('Kill weapon',color = 'blue',fontsize=15)","9706544e":"above25 =['above25' if i >= 25 else 'below25' for i in police_killings.age]\ndf = pd.DataFrame({'age':above25})\nsns.countplot(x=df.age)\nplt.ylabel('Number of Killed People')\nplt.title('Age of killed people',color = 'blue',fontsize=15)","2526a371":"sns.countplot(data = police_killings, x='race')\nplt.title('Race of killed people',color = 'blue',fontsize=15)","5750aef2":"city = police_killings.city.value_counts()\nplt.figure(figsize=(10,7))\nsns.barplot(x=city[:12].index,y=city[:12].values)\nplt.xticks(rotation=45)\nplt.title('Most dangerous cities',color = 'blue',fontsize=15)","a77fbfa9":"state = police_killings.state.value_counts()\nplt.figure(figsize=(10,7))\nsns.barplot(x=state[:20].index,y=state[:20].values)\nplt.title('Most dangerous state',color = 'blue',fontsize=15)","e8f9e3bd":"# INTRODUCTION\n\nThis was created by following a tutorial. \n\nUsing the given data, we will see how we can use the tools which seaborn provides.\n* [Bar Plot](#1)\n* [Point Plot](#2)\n* [Joint Plot](#3)\n* [Pie Chart](#4)\n* [Lm Plot](#5)\n* [Kde Plot](#6)\n* [Violin Plot](#7)\n* [Heatmap](#8)\n* [Box Plot](#9)\n* [Swarm Plot](#10)\n* [Pair Plot](#11)\n* [Count Plot](#12)\n    \n","70ff3604":"We will try to find the answers to:\n\n1. How do we read the given data\n1. Poverty rate of each state\n1. Most common names\/surnames of shot people\n1. High school graduation rate\n1. Percentage of each states population in relation to race\n1. High school graduation rate vs. Poverty rate of each state\n1. Police shooting properties:\n    *  Manner of death\n    *  Murder weapon\n    *  Age of victim\n    *  Race of victim\n    *  Most dangerous cities\n    *  Most dangerous states\n    *  Victim's mental state\n    *  Types of threat\n    *  Types of fleeing\n    *  Police had bodycam or not\n1. Race rates by state in shooting data\n1. Shooting numbers from states\n1. "}}