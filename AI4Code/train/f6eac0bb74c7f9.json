{"cell_type":{"c552236e":"code","cb90631d":"code","e8bb4d28":"code","b171f829":"code","54a46f01":"code","3146248f":"code","cbb1728d":"code","792142d7":"code","8cd1f8e7":"code","ee8683f1":"code","be0eb3f9":"code","cfb9b08e":"code","cfe9b95e":"code","795a1378":"code","058deec0":"markdown","dad96d34":"markdown","0e7cc670":"markdown","ab9e7ccb":"markdown","15e85f9c":"markdown","82002e29":"markdown","95ce7c04":"markdown","f1cab162":"markdown"},"source":{"c552236e":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport lightgbm as lgbm\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.metrics import accuracy_score, recall_score, precision_score, f1_score\nfrom sklearn.model_selection import GridSearchCV\n%matplotlib inline","cb90631d":"train_df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\n\n#\u540d\u524d\u3001\u30c1\u30b1\u30c3\u30c8\u3001Cabin\u306f\u3001\u95a2\u4fc2\u306a\u3055\u305d\u3046\u306a\u306e\u3067\u3001\u3068\u308a\u3042\u3048\u305a\u3001\u524a\u9664\ndf_list=[train_df,test_df]\nfor df in df_list:\n    df.drop(['Name', 'Ticket', 'Cabin'], axis=1, inplace=True)\n# Passenger ID \u3082\u524a\u9664\u3001\u305f\u3060\u3001\u63d0\u51fa\u7528\u306btest_df\u306ePassenger ID\u306f\u4fdd\u5b58\ntest_passenger_ids = test_df.pop('PassengerId')\ntrain_df.drop(['PassengerId'], axis=1, inplace=True)\n\n#Sex\u3092\u6570\u5b57\u306b\u5909\u63db\nfor df in df_list:\n    from sklearn.preprocessing import LabelEncoder\n    le = LabelEncoder()\n    le = le.fit(df[\"Sex\"])\n    df[\"Sex\"]=le.transform(df[\"Sex\"])\n\n#Encoder\u3092\u4f7f\u3046\u306b\u306f\u3001NaN\u3092\u57cb\u3081\u3001\u30c7\u30fc\u30bf\u306e\u578b\u3092\u63c3\u3048\u308b\u5fc5\u8981\u304c\u3042\u308b\n#Embarked\u3092\u6570\u5b57\u306b\u5909\u63db\n#NaN\u3092\u57cb\u3081\u308b\u5fc5\u8981\u304c\u3042\u308b\nfor df in df_list:\n    df[\"Embarked\"]=df[\"Embarked\"].fillna(\"N\")\n    le = LabelEncoder()\n    le = le.fit(df[\"Embarked\"])\n    df[\"Embarked\"]=le.transform(df[\"Embarked\"])\n# Separate the label\ny = train_df.pop('Survived')\n\n# Take a hold out set randomly\nX_train, X_test, y_train, y_test = train_test_split(train_df, y, test_size=0.2, random_state=42)\n\n# Create an LGBM dataset for training\ncategorical_features = ['Sex', 'Pclass', 'Embarked']\ntrain_data = lgbm.Dataset(data=X_train, label=y_train, categorical_feature=categorical_features, free_raw_data=False)\n# Create an LGBM dataset from the test\ntest_data = lgbm.Dataset(data=X_test, label=y_test, categorical_feature=categorical_features, free_raw_data=False)\n# Finally, create a dataset for the FULL training data to give us maximum amount of data to train on after \n# performance has been calibrate\nfinal_train_set = lgbm.Dataset(data=train_df, label=y, \n                              categorical_feature=categorical_features, free_raw_data=False)\n","e8bb4d28":"lgbm_params = {\n    'boosting': 'gbdt',          \n    'num_leaves': 41,           \n    'reg_alpha': 1,     \n    'reg_lambda': 15,   \n              }\n#\u30e2\u30c7\u30eb\u69cb\u7bc9\nmodel = lgbm.train(params=lgbm_params,train_set=train_data)","b171f829":"preds = np.round(model.predict(X_test))\nprint('Accuracy score = \\t {}'.format(accuracy_score(y_test, preds)))\nprint('Precision score = \\t {}'.format(precision_score(y_test, preds)))\nprint('Recall score =   \\t {}'.format(recall_score(y_test, preds)))\nprint('F1 score =      \\t {}'.format(f1_score(y_test, preds)))","54a46f01":"gbm = lgbm.LGBMClassifier()","3146248f":"# \u8a66\u884c\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u7f85\u5217\nparams = {\n    'boosting': ['gbdt'],             \n    'num_leaves': [6, 7, 8, 9, 10,20,30,41],\n    'reg_alpha': [0, 1, 2, 3, 4, 5,10, 100],\n    'reg_lambda': [10, 15, 18, 20, 21, 22, 23, 25, 27, 29]\n}\n\ngrid_search = GridSearchCV(gbm, param_grid=params, cv=2)\ngrid_search.fit(X_train, y_train)\n\nprint(grid_search.best_score_)\nprint(grid_search.best_params_)","cbb1728d":"model = lgbm.train(params=grid_search.best_params_,train_set=final_train_set)","792142d7":"from sklearn.metrics import accuracy_score, recall_score, precision_score, f1_score\npreds = np.round(model.predict(X_test))\nprint('Accuracy score = \\t {}'.format(accuracy_score(y_test, preds)))\nprint('Precision score = \\t {}'.format(precision_score(y_test, preds)))\nprint('Recall score =   \\t {}'.format(recall_score(y_test, preds)))\nprint('F1 score =      \\t {}'.format(f1_score(y_test, preds)))","8cd1f8e7":"#\u30d1\u30e9\u30e1\u30fc\u30bf\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u306e\u7d50\u679c\u3092\u898b\u3066\u307f\u308b\n#\u3069\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u5927\u4e8b\u304b\ngrid_result=pd.DataFrame.from_dict(grid_search.cv_results_)\ngrid_result=grid_result.sort_values(\"mean_test_score\",ascending=False)[['param_num_leaves','param_reg_alpha','param_reg_lambda','mean_test_score']]\n\ngrid_result.groupby(\"param_num_leaves\").mean().plot()\ngrid_result.groupby(\"param_reg_alpha\").mean().plot()\ngrid_result.groupby(\"param_reg_lambda\").mean().plot()","ee8683f1":"gbm = lgbm.LGBMClassifier()","be0eb3f9":"# \u8a66\u884c\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u7f85\u5217\nparams = {\n    'boosting': ['gbdt'],             \n    'num_leaves': [2,3,4,5,6, 7, 8],\n    'reg_alpha': [0, 1, 2, 3],\n    'reg_lambda': [2,4,6,8,10],\n    \"max_depth\": [3,6,8,10, 25],\n    \"learning_rate\" : [0.01,0.1],\n}\n\ngrid_search = GridSearchCV(gbm, param_grid=params, cv=2)\ngrid_search.fit(X_train, y_train)\n\nprint(grid_search.best_score_)\nprint(grid_search.best_params_)","cfb9b08e":"model = lgbm.train(params=grid_search.best_params_,train_set=final_train_set)","cfe9b95e":"from sklearn.metrics import accuracy_score, recall_score, precision_score, f1_score\npreds = np.round(model.predict(X_test))\nprint('Accuracy score = \\t {}'.format(accuracy_score(y_test, preds)))\nprint('Precision score = \\t {}'.format(precision_score(y_test, preds)))\nprint('Recall score =   \\t {}'.format(recall_score(y_test, preds)))\nprint('F1 score =      \\t {}'.format(f1_score(y_test, preds)))","795a1378":"y_pred = np.round(model.predict(test_df)).astype(int)\n\noutput_df = pd.DataFrame({'PassengerId': test_passenger_ids, 'Survived': y_pred})\n\noutput_df.to_csv(\"submit.csv\",index=False)","058deec0":"**3-1 \u9069\u5f53\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u8a66\u3059**","dad96d34":"**2\u3067\u884c\u3063\u305f\u6700\u4f4e\u9650\u306e\u30c7\u30fc\u30bf\u52a0\u5de5**","0e7cc670":"### 3. \u30d1\u30e9\u30e1\u30fc\u30bf\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","ab9e7ccb":"**3-2 \u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\u3067\u30d1\u30e9\u30e1\u30fc\u30bf\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0**","15e85f9c":"**3-3 \u8a66\u3059\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u5897\u3084\u3057\u3066\u307f\u308b**","82002e29":"**\u63d0\u51fa**","95ce7c04":"### Part A\n\n1.\u30c7\u30fc\u30bf\u306e\u52a0\u5de5\u305b\u305a\u306b\u3001\u305d\u306e\u307e\u307e\u30e2\u30c7\u30eb\u306b\u3064\u3063\u3053\u3080\n\u2192\u30a8\u30e9\u30fc\n\n2.\u6700\u4f4e\u9650\u306e\u52a0\u5de5\u3092\u3057\u3066\u3001\u30e2\u30c7\u30eb\u3092\u69cb\u7bc9\u3057\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u8a55\u4fa1\n  \u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\n  \n### Part B\n \n3.\u4f7f\u3046\u30c7\u30fc\u30bf\u306f\uff12\u3068\u540c\u69d8\u3067\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3057\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u5411\u4e0a\u3092\u72d9\u3046\n","f1cab162":"\u3042\u307e\u308a\u5909\u308f\u3089\u306a\u3044\u3002\u30d1\u30e9\u30e1\u30fc\u30bf\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3063\u3066\u3088\u308a\u3001\u7279\u5fb4\u91cf\u30a8\u30f3\u30b8\u30cb\u30a2\u30ea\u30f3\u30b0\u304c\u5fc5\u8981\u304b\u3082\u3057\u308c\u306a\u3044"}}