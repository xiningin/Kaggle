{"cell_type":{"d0640332":"code","e6928cc7":"code","6495da09":"code","0c5080c1":"code","0553ea80":"code","02e92a35":"code","9f80c00b":"code","03039dfa":"code","30d88f42":"code","b38f0a28":"code","8f33ed48":"code","d039a6f9":"code","0d2760a1":"code","b93fbdae":"code","4c958831":"code","1963bac5":"code","562ba9b0":"code","f47666b2":"code","34256f8e":"code","b49db57d":"code","b4a47bff":"code","ade9ca8e":"code","bf469f25":"code","b03b8a1a":"code","a9aef77c":"code","d92715be":"code","cebd7b9f":"code","174ab989":"code","41a618b8":"code","236485f6":"code","7b4298c3":"code","0154049b":"code","bcecf27c":"code","4aa8b704":"code","1ff3d681":"markdown","6124d37d":"markdown"},"source":{"d0640332":"import pandas as pd \nimport matplotlib.pyplot as plt\nfrom matplotlib.image import  imread\nimport tensorflow as tf \nimport numpy as np \nimport seaborn as sns \nimport os","e6928cc7":"df = pd.read_csv('..\/input\/nicht-mnist\/train.csv',index_col = 0,header=None)","6495da09":"test = pd.read_csv('..\/input\/nicht-mnist\/test.csv',index_col = 0,header=None)","0c5080c1":"test_np = test.values","0553ea80":"test_np = test_np \/ 255","02e92a35":"test_np = test_np.reshape(-1, 28, 28 , 1).astype('float32')","9f80c00b":"df.head()","03039dfa":"X = df.drop(columns = [1])\ny = df[1]","30d88f42":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(X,y)","b38f0a28":"X_train.shape,X_test.shape","8f33ed48":"\nim = np.array(X_train.iloc[50]).astype('uint8').reshape(28,28)\nplt.imshow(im)","d039a6f9":"y.nunique()","0d2760a1":"y_train","b93fbdae":"from sklearn.preprocessing import LabelEncoder \nlabel = LabelEncoder()\ny_train = label.fit_transform(y_train)\ny_test = label.transform(y_test)","4c958831":"from tensorflow.keras.utils import to_categorical\ny_train = to_categorical(y_train)\ny_test = to_categorical(y_test)","1963bac5":"y_test","562ba9b0":"y_train","f47666b2":"X_train = X_train.values\nX_test = X_test.values","34256f8e":"X_train = X_train \/ 255\nX_test = X_test \/255","b49db57d":"X_train_np = X_train.reshape(-1, 28, 28 , 1).astype('float32')","b4a47bff":"X_test_np = X_test.reshape(-1, 28, 28 , 1).astype('float32')","ade9ca8e":"X_train_np.shape,X_test_np.shape","bf469f25":"from tensorflow.keras.models import Sequential \nfrom tensorflow.keras.layers import Dense , Conv2D ,MaxPool2D , Flatten","b03b8a1a":"model = Sequential()\n\nmodel.add(Conv2D(filters=64, kernel_size=(4,4),input_shape=(28,28,1), activation='relu',padding = 'same'))\nmodel.add(MaxPool2D(pool_size=(2, 2)))\n\n\nmodel.add(Conv2D(filters=64, kernel_size=(4,4),input_shape=(28,28,1), activation='relu',padding = 'same'))\nmodel.add(MaxPool2D(pool_size=(2, 2)))\ntf.keras.layers.Dropout(0.2),\n\nmodel.add(Conv2D(filters=64, kernel_size=(4,4),input_shape=(28,28,1), activation='relu',padding = 'same'))\nmodel.add(MaxPool2D(pool_size=(2, 2))) \ntf.keras.layers.Dropout(0.2),\n\nmodel.add(Conv2D(filters=64, kernel_size=(4,4),input_shape=(28,28,1), activation='relu',padding = 'same'))\nmodel.add(MaxPool2D(pool_size=(2, 2))) \ntf.keras.layers.Dropout(0.2),\n\nmodel.add(Flatten())\n\n\nmodel.add(Dense(256, activation='relu'))\n\nmodel.add(Dense(10, activation='softmax'))\n\n\nmodel.compile(loss='categorical_crossentropy',\n              optimizer='adam',\n              metrics=['accuracy'])","a9aef77c":"model.summary()","d92715be":"from tensorflow.keras.callbacks import EarlyStopping \nearly_stopping = EarlyStopping(monitor = 'val_accuracy',patience = 5)\n","cebd7b9f":"model.fit(X_train_np, y_train, epochs=15, callbacks= [early_stopping],validation_data=(X_test_np,y_test),batch_size = 30)\n","174ab989":"metrices = pd.DataFrame(model.history.history)","41a618b8":"metrices[['accuracy','val_accuracy']].plot()","236485f6":"predictions = model.predict_classes(test_np)","7b4298c3":"predictions","0154049b":"predictions = label.inverse_transform(predictions)","bcecf27c":"result = pd.DataFrame({\n    'id':test.index,\n    'target':predictions}\n)","4aa8b704":"result.to_csv('Nicht MNIST Competetion.csv',index = False)","1ff3d681":"# Creating the Model ","6124d37d":"# Preprocess the images\n\n"}}