{"cell_type":{"dbea5931":"code","0c6d4a01":"code","287d7a24":"code","01bc07a5":"code","b37b8d87":"code","90255c2a":"code","ec9eef7a":"code","3743f230":"code","4e966231":"code","1b1733f0":"code","1a05595a":"code","05434e0c":"code","65336621":"code","608014de":"code","bbcd556d":"code","d8776bea":"code","8192c00b":"code","c537fb29":"code","8cffd9cb":"code","3cbb3302":"code","7e91eee1":"code","4a10e415":"code","662220f8":"code","27a22f35":"code","d8851eac":"code","812cb988":"code","4f94baf1":"code","90133ad8":"code","e6d84969":"code","f6f2c607":"code","c296f32b":"code","85ca8d2c":"code","e6ef5b9a":"code","469ac54f":"code","36e30f4c":"code","7001f26a":"code","02b50be5":"code","454011e9":"code","5500b8ae":"code","62a821fd":"markdown","8f3c5a2d":"markdown","08eb6519":"markdown","fafdf0bd":"markdown","de5e5044":"markdown","d674913a":"markdown","b45d1fdc":"markdown","e910ee4a":"markdown","6e2788be":"markdown","27f29ad0":"markdown","831e817a":"markdown","55c64806":"markdown","6807e739":"markdown","8c66c10d":"markdown"},"source":{"dbea5931":"%pylab inline\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\n\nimport numpy as np\nimport pandas as pd","0c6d4a01":"df_train = pd.read_csv('\/kaggle\/input\/i2a2-bone-age-regression\/train.csv')\ndf_train.head()","287d7a24":"df_train_femele = df_train.query('patientSex == \"F\"')\ndf_train_femele.describe()","01bc07a5":"df_train_femele.hist(column = 'boneage', bins = 40, color = 'blue', alpha = 0.5, figsize=(20, 10))\nplt.show()","b37b8d87":"first_female_group = df_train_femele.query('boneage < 50')\nprint('Less than 50 months: ', len(first_female_group))\n\nsecond_female_group = df_train_femele.query('boneage >= 50 and boneage < 100')\nprint('Between 50 and 100 months: ', len(second_female_group))\n\nthird_female_group = df_train_femele.query('boneage >= 100 and boneage < 150')\nprint('Between 100 and 150 months: ', len(third_female_group))\n\nfourth_female_group = df_train_femele.query('boneage >= 150 and boneage < 200')\nprint('Between 150 and 200 months: ', len(fourth_female_group))\n\nfifth_female_group = df_train_femele.query('boneage >= 200')\nprint('More than 200 months: ', len(fifth_female_group))","90255c2a":"df_train_male = df_train.query('patientSex == \"M\"')\ndf_train_male.hist(column = 'boneage', bins = 40, color = 'blue', alpha = 0.5, figsize=(20, 10))\nplt.show()","ec9eef7a":"first_male_group = df_train_male.query('boneage < 50')\nprint('Less than 50 months: ', len(first_male_group))\n\nsecond_male_group = df_train_male.query('boneage >= 50 and boneage < 100')\nprint('Between 50 and 100 months: ', len(second_male_group))\n\nthird_male_group = df_train_male.query('boneage >= 100 and boneage < 150')\nprint('Between 100 and 150 months: ', len(third_male_group))\n\nfourth_male_group = df_train_male.query('boneage >= 150 and boneage < 200')\nprint('Between 150 and 200 months: ', len(fourth_male_group))\n\nfifth_male_group = df_train_male.query('boneage >= 200')\nprint('More than 200 months: ', len(fifth_male_group))","3743f230":"import cv2\nimport numpy as np\nimport os","4e966231":"def normalize_images(path):\n    df = pd.read_csv(f'\/kaggle\/input\/i2a2-bone-age-regression\/{path}.csv')\n\n    for filename in df['fileName']:\n       _clean_image(path, filename)","1b1733f0":"def _clean_image(path, filename):\n    image = cv2.imread(f\"\/kaggle\/input\/i2a2-bone-age-regression\/images\/{filename}\")\n    contours = _get_contours(image)\n    \n    mask = np.zeros_like(image)\n    cv2.drawContours(mask, contours, -1, (0, 255, 0), 2)\n    (x, y, _) = np.where(mask == 255)\n \n    if len(x) > 0 and len(y) > 0:\n        (topx, topy) = (np.min(x), np.min(y))\n        (bottomx, bottomy) = (np.max(x), np.max(y))\n\n        image = image[topx:bottomx+1, topy:bottomy+1]\n        print('contours', len(contours))\n\n        height, width, _ = image.shape\n        print('width', width)\n\n        if width > 800:\n            width_cutoff = width \/\/ 2\n            image = image[:, width_cutoff:]\n\n    if not os.path.exists(f'\/kaggle\/output\/kaggle\/working\/clean-images-{path}'):\n      os.makedirs(f'\/kaggle\/output\/kaggle\/working\/clean-images-{path}')\n\n    cv2.imwrite(f\"\/kaggle\/output\/kaggle\/working\/clean-images-{path}\/{filename}\", image)","1a05595a":"def _get_contours(image):\n    image_gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n\n    image_edges = cv2.Canny(image_gray, 40, 180)\n\n    contours, hierarchy = cv2.findContours(image_edges, cv2.RETR_LIST, cv2.CHAIN_APPROX_SIMPLE)\n\n    return contours","05434e0c":"# normalize_images('train')","65336621":"df = pd.read_csv(f'\/kaggle\/input\/i2a2-bone-age-regression\/train.csv')\ndf = df.head(10)\n\nfor filename in df['fileName']:\n  plt.title('Before')\n  before = mpimg.imread(f\"\/kaggle\/input\/i2a2-bone-age-regression\/images\/{filename}\")\n  imgplot = plt.imshow(before)\n  plt.show()\n\n  plt.title('After')\n  after = mpimg.imread(f\"\/kaggle\/output\/kaggle\/working\/clean-images-train\/{filename}\")\n  imgplot = plt.imshow(after)\n  plt.show()","608014de":"from numpy import expand_dims\nfrom keras.preprocessing.image import load_img\nfrom keras.preprocessing.image import img_to_array\nfrom keras.preprocessing.image import ImageDataGenerator","bbcd556d":"image = load_img(\"\/kaggle\/output\/kaggle\/working\/clean-images-train\/1377.png\")\ndata = img_to_array(image)\n\nsamples = expand_dims(data, 0)\ndatagen = ImageDataGenerator(\n            rotation_range=40,\n            width_shift_range=0.2,\n            height_shift_range=0.2,\n            shear_range=0.2,\n            zoom_range=0.2,\n            horizontal_flip=True,\n            fill_mode='constant')\n\niterator = datagen.flow(samples, batch_size=1)\nfor i in range(9):\n    plt.subplot(330 + 1 + i)\n    batch = iterator.next()\n    image_generated = batch[0].astype('uint8')\n    plt.imshow(image_generated)\nplt.show()","d8776bea":"def image_generated(filename, number_samples):\n  image = load_img(f\"\/kaggle\/output\/kaggle\/working\/clean-images-train\/{filename}\")\n  data = img_to_array(image)\n\n  samples = expand_dims(data, 0)\n  datagen = ImageDataGenerator(\n                rotation_range=40,\n                width_shift_range=0.2,\n                height_shift_range=0.2,\n                shear_range=0.2,\n                zoom_range=0.2,\n                horizontal_flip=True,\n                fill_mode='constant')\n\n  iterator = datagen.flow(samples, batch_size=1)\n  new_images = []\n  for i in range(number_samples):\n    batch = iterator.next()\n    image_generated = batch[0].astype('uint8')\n    new_images.append(image_generated)\n  \n  return new_images","8192c00b":"def update_dataset(dataset, patientSex, number_samples):\n  mean_bornage = dataset['boneage'].mean()\n\n  for filename in dataset['fileName']:\n    new_images = image_generated(filename, number_samples)\n    for idx, image in enumerate(new_images):\n      cv2.imwrite(f\"\/kaggle\/output\/kaggle\/working\/clean-images-train\/{idx}-{filename}\", image)\n\n      new_data = pd.DataFrame({\"fileName\":[f\"{idx}-{filename}\"], \"patientSex\":[patientSex], \"boneage\": [mean_bornage]})\n      dataset = pd.concat([dataset, new_data], ignore_index=True)\n  \n  return dataset","c537fb29":"first_increased_female_group = update_dataset(first_female_group, 'F', 4).head(1000)\nfirst_increased_female_group","8cffd9cb":"second_female_group = second_female_group.sample(n=1000, random_state=1)\nthird_female_group = third_female_group.sample(n=1000, random_state=1)\nfourth_female_group = fourth_female_group.sample(n=1000, random_state=1)\n\ntrain_female_final = pd.concat([first_increased_female_group, second_female_group, third_female_group, fourth_female_group], ignore_index=True)","3cbb3302":"train_female_final.to_csv('\/kaggle\/output\/kaggle\/working\/F-train.csv')","7e91eee1":"!ls -all -h \/kaggle\/output\/kaggle\/working","4a10e415":"first_increased_male_group = update_dataset(first_male_group, 'M', 4).head(1000)\nfirst_increased_male_group","662220f8":"fifth_increased_male_group = update_dataset(fifth_male_group, 'M', 4).head(1000)\nfifth_increased_male_group","27a22f35":"second_male_group = second_male_group.sample(n=1000, random_state=1)\nthird_male_group = third_male_group.sample(n=1000, random_state=1)\nfourth_male_group = fourth_male_group.sample(n=1000, random_state=1)\n\ntrain_male_final = pd.concat([first_increased_male_group, second_male_group, third_male_group, fourth_male_group, fifth_increased_male_group], ignore_index=True)","d8851eac":"train_male_final.to_csv('\/kaggle\/output\/kaggle\/working\/M-train.csv')","812cb988":"!ls -all -h \/kaggle\/output\/kaggle\/working","4f94baf1":"import matplotlib.pyplot as plt\nimport numpy as np\nimport os\nimport pandas as pd\nimport random\nimport tensorflow as tf\n\nfrom keras.applications.resnet import ResNet50, preprocess_input\nfrom keras.callbacks import EarlyStopping, ModelCheckpoint   \nfrom keras.layers import Conv2D, Dense, Dropout, Flatten, GlobalMaxPooling2D, MaxPooling2D\nfrom keras.models import Model, Sequential\nfrom keras.preprocessing.image import img_to_array\nfrom keras.preprocessing.image import load_img\nfrom keras.utils import np_utils\n\nfrom sklearn.model_selection import train_test_split","90133ad8":"def init_model(patientSex):\n    if not os.path.isfile(f'\/kaggle\/output\/kaggle\/working\/model.hand.x-ray.weights.{patientSex}.best.hdf5'):\n        images, outputs = _prepare_dataset(patientSex)\n        model = _train(patientSex, images, outputs)\n        print('New train!')\n    else:\n        model = _create_model()\n        model.load_weights(f'\/kaggle\/output\/kaggle\/working\/model.hand.x-ray.weights.{patientSex}.best.hdf5')\n        print('Using network trained!')\n\n    return model","e6d84969":"def _preprocess_images(filename):\n    image = load_img(filename, target_size=(128, 128))\n    image = img_to_array(image)\n    image = image.reshape((image.shape[0], image.shape[1], image.shape[2]))\n    return preprocess_input(image) \n\ndef _prepare_dataset(patientSex):\n    df = pd.read_csv(f'\/kaggle\/output\/kaggle\/working\/{patientSex}-train.csv')\n\n    images = [_preprocess_images(f\"\/kaggle\/output\/kaggle\/working\/clean-images-train\/{filename}\") for filename in df['fileName']]\n    images = np.array(images, dtype=np.float32)\n\n    outputs = df['boneage']\n    outputs = np.array(outputs, dtype=np.float32)\n\n    return images, outputs","f6f2c607":"def _create_model():\n    base_model = ResNet50(weights=\"imagenet\", include_top=False, input_shape= (128, 128, 3))\n    \n    number_of_frozen_layers = 0\n    for i, layer in enumerate(base_model.layers):\n      if i>=number_of_frozen_layers:\n        break\n      layer.trainable = False\n\n    x = GlobalMaxPooling2D()(base_model.output)\n    x = Flatten()(x)\n    x = Dense(16, activation = 'relu')(x)\n    x = Dense(1, activation = 'linear')(x)\n\n    model = Model(base_model.input, x)\n    model.summary()\n    \n    return model","c296f32b":"def _train(patientSex, images, outputs):\n    print('Number images:', len(images))\n    print('Number outputs:', len(outputs))\n\n    # divindo dataset de treinamento em treinamento, teste e valida\u00e7\u00e3o\n    seed = 42\n    x_train, x_test, y_train, y_test = train_test_split(images, outputs, test_size = 0.20, random_state=seed)\n    x_train, x_valid, y_train, y_valid = train_test_split(x_train, y_train, test_size = 0.20, random_state = seed)\n\n    # normaliza\u00e7\u00e3o\n    x_train = x_train.astype('float32')\/255\n    x_valid = x_valid.astype('float32')\/255\n    x_test = x_test.astype('float32')\/255\n\n    # mudando escala de idades para valores entre [0-1]\n    max_bornage = outputs.max()\n    y_train = y_train \/ max_bornage\n    y_valid = y_valid \/ max_bornage\n    y_test = y_test \/ max_bornage\n\n    model = _create_model()\n    model.compile(loss='mse', optimizer='adam', metrics=['mse'])\n\n    checkpointer = [ModelCheckpoint(filepath=f'\/kaggle\/output\/kaggle\/working\/model.hand.x-ray.weights.{patientSex}.best.hdf5', save_best_only=True),\n                    EarlyStopping(patience= 5)]\n    history = model.fit(x_train, y_train,\n           batch_size=32,\n           epochs=100,\n           verbose=1,\n           validation_data=(x_valid, y_valid),\n           callbacks=checkpointer)\n    \n    plt.plot(history.history['mse'])\n    plt.show()\n    \n    # carregando os pesos que geraram a melhor precis\u00e3o de valida\u00e7\u00e3o\n    model.load_weights(f'\/kaggle\/output\/kaggle\/working\/model.hand.x-ray.weights.{patientSex}.best.hdf5')\n\n    # avaliar e imprimir a precis\u00e3o do teste\n    loss, mse = model.evaluate(x_test, y_test, verbose=2)\n    print(\"Testing set Mean Square Error: {:5.2f} MPG\".format(mse))\n\n    return model, x_test, y_test","85ca8d2c":"images, outputs = _prepare_dataset('F')","e6ef5b9a":"model, x_test, y_test = _train('F', images, outputs)","469ac54f":"max_bornage = outputs.max()\npredict_boneages = max_bornage * model.predict(x_test, batch_size = 32, verbose = True)\nreal_boneages = max_bornage * y_test\n\nord_ind = np.argsort(y_test)\nord_ind = ord_ind[np.linspace(0, len(ord_ind)-1, 8).astype(int)]\nfig, axs = plt.subplots(4, 2, figsize = (15, 30))\nfor (ind, ax) in zip(ord_ind, axs.flatten()):\n    ax.imshow(x_test[ind, :,:,0], cmap = 'bone')\n    ax.set_title('Age: %fY\\nPredicted Age: %fY' % (real_boneages[ind], \n                                                   predict_boneages[ind]))\n    ax.axis('off')\nfig.savefig('image_predictions-F.png', dpi = 300)","36e30f4c":"fig, ax = plt.subplots(figsize = (7,7))\nax.plot(real_boneages, predict_boneages, 'r.', label = 'predictions')\nax.plot(real_boneages, real_boneages, 'b-', label = 'actual')\nax.legend(loc = 'upper right')\nax.set_xlabel('Actual Age (Months)')\nax.set_ylabel('Predicted Age (Months)')","7001f26a":"images_M, outputs_M = _prepare_dataset('M')","02b50be5":"model_M, x_test_M, y_test_M = _train('M', images_M, outputs_M)","454011e9":"max_bornage_M = outputs_M.max()\npredict_boneages_M = max_bornage_M * model.predict(x_test_M, batch_size = 32, verbose = True)\nreal_boneages_M = max_bornage_M * y_test_M\n\nord_ind = np.argsort(y_test_M)\nord_ind = ord_ind[np.linspace(0, len(ord_ind)-1, 8).astype(int)]\nfig, axs = plt.subplots(4, 2, figsize = (15, 30))\nfor (ind, ax) in zip(ord_ind, axs.flatten()):\n    ax.imshow(x_test_M[ind, :,:,0], cmap = 'bone')\n    ax.set_title('Age: %fY\\nPredicted Age: %fY' % (real_boneages_M[ind], \n                                                   predict_boneages_M[ind]))\n    ax.axis('off')\nfig.savefig('image_predictions-M.png', dpi = 300)","5500b8ae":"fig, ax = plt.subplots(figsize = (7,7))\nax.plot(real_boneages_M, predict_boneages_M, 'r.', label = 'predictions')\nax.plot(real_boneages_M, real_boneages_M, 'b-', label = 'actual')\nax.legend(loc = 'upper right')\nax.set_xlabel('Actual Age (Months)')\nax.set_ylabel('Predicted Age (Months)')","62a821fd":"## Neural network","8f3c5a2d":"Like we saw before, the numbers images to ages is very differnet. So the train dataset isn't balanced enought to apply a model.\n\nFor that, we'll increase images in range with less images and use less images in age ranges where there much more than is necessary.\n\nWe'll use data augmentation to it.","08eb6519":"Clean images in train dataset.","fafdf0bd":"## Analyse data","de5e5044":"So, we'll the same to boys's data.\n\nIn this case, we'll increase the first and the last groups doing a dataset with 5000 samples, 1000 samples of each group.","d674913a":"First, let's clean the dataset images to extract realy Hand X-Ray images, without for example black boards around and things possible to disturb the neural network learning.","b45d1fdc":"## Prepare images","e910ee4a":"In `df_train_femele` we'll increase the first group, and choose ramdon 1000 elemnets each other group to create a balanced dataset with 4000 samples.\n\nWe won't use the last group because it has so small numbers of images.","6e2788be":"Examples images before and after.","27f29ad0":"Now, We'll separe what data in train dataset will be incresed.\n\nWe have already seen that train datasest isn't balanced. Look again girl's data.","831e817a":"Girls and boys like women and men have so much different ossea structure, for that, for this solution, we'll train two models one to apply to girls Hand X-Ray and another to boys.","55c64806":"## Prepare train dataset","6807e739":"A example to apply data augementation to generate new images from one.","8c66c10d":"This is the first notebook for this solution. Here we'll only analyse data and prepare datasets to apply on neural networks models in the next notebook."}}