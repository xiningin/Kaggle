{"cell_type":{"9374928f":"code","7608720f":"code","3055103c":"code","28d49591":"code","d3bd399e":"code","36c0bdad":"code","f3fc3bc9":"code","00fa78a2":"code","51dd3fda":"code","ff9914ab":"code","fb3767be":"code","aa6977b0":"code","655206e1":"code","fd0f62fe":"code","2d81bb67":"code","2f31f4b0":"code","f794ff25":"code","d1f27f97":"code","de0b5b23":"code","fa6a5f0a":"markdown","33420fe7":"markdown"},"source":{"9374928f":"import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import GaussianNB, MultinomialNB\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.ensemble import StackingClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\n\ncustomer = pd.read_csv(\"..\/input\/ai-lab-24\/CustomerChurn.csv\")\ncustomer","7608720f":"customer[\"International plan\"] = LabelEncoder().fit_transform(customer[\"International plan\"])\ncustomer[\"Voice mail plan\"] = LabelEncoder().fit_transform(customer[\"Voice mail plan\"])\ncustomer[\"Churn\"] = LabelEncoder().fit_transform(customer[\"Churn\"])\ncustomer[\"State\"] = LabelEncoder().fit_transform(customer[\"State\"])\ncustomer","3055103c":"import seaborn as sns\nsns.countplot(\"Churn\", data=customer)","28d49591":"X_train, X_test, y_train, y_test = train_test_split(\n    customer.drop([\"Churn\"], axis=1), customer[\"Churn\"], test_size=0.2, random_state=42, stratify = customer[\"Churn\"])","d3bd399e":"k_nei = list(range(1, 30))\ntr, val = [], []\nfor i in k_nei:\n    knn = KNeighborsClassifier(n_neighbors=i).fit(X_train, y_train)\n    tr.append(knn.score(X_train, y_train))\n    val.append(knn.score(X_test, y_test))\n\nimport matplotlib.pyplot as plt\nplt.plot(tr)\nplt.plot(val)","36c0bdad":"gaussnb = GaussianNB().fit(X_train, y_train)\nknn = KNeighborsClassifier(n_neighbors=10).fit(X_train, y_train)\nlr = LogisticRegression(max_iter=5000).fit(X_train, y_train)\nrf = RandomForestClassifier(n_estimators=300, random_state=42).fit(X_train, y_train)\ngaussnb.score(X_test, y_test), knn.score(X_test, y_test), lr.score(X_train, y_train), rf.score(X_test, y_test)","f3fc3bc9":"estimators =[\n    (\"rf\", GaussianNB()),\n    (\"knn\", KNeighborsClassifier(n_neighbors=15)),\n    (\"gaussnb\", RandomForestClassifier(random_state=41569))\n]\nclf = StackingClassifier(estimators=estimators, final_estimator=LogisticRegression(max_iter=5000))\nclf.fit(X_train, y_train)\nclf.score(X_test, y_test)","00fa78a2":"train = pd.read_csv(\"..\/input\/bigmart-sales-data\/Train.csv\")\ntest = pd.read_csv(\"..\/input\/bigmart-sales-data\/Test.csv\")\nsales = pd.concat([train, test], axis=0)\nsales","51dd3fda":"sales.isna().sum()","ff9914ab":"train[\"Outlet_Size\"].fillna(\"NotAvail\", inplace=True)\ntest[\"Outlet_Size\"].fillna(\"NotAvail\", inplace=True)\nsales[\"Outlet_Size\"].fillna(\"NotAvail\", inplace=True)\nsales.isna().sum()","fb3767be":"sales.columns\nsales[['Item_Identifier', 'Item_Weight', 'Item_Fat_Content', 'Item_Visibility',\n       'Item_Type', 'Item_MRP', 'Outlet_Identifier',\n       'Outlet_Establishment_Year', 'Outlet_Size', 'Outlet_Location_Type',\n       'Outlet_Type']]","aa6977b0":"sales[\"Item_Fat_Content\"].unique()\nd = {\n    \"Low Fat\": 0,\n    \"Regular\": 1,\n    \"low fat\": 0,\n    \"LF\": 0,\n    \"reg\": 1\n}\nsales[\"Item_Fat_Content\"] = sales[\"Item_Fat_Content\"].map(d)\nsales_test[\"Item_Fat_Content\"] = sales_test[\"Item_Fat_Content\"].map(d)\nsales","655206e1":"sales.describe()","fd0f62fe":"categorical_cols = [\"Item_Identifier\", \"Item_Fat_Content\", \"Item_Type\", \"Outlet_Identifier\", \"Outlet_Size\", \"Outlet_Location_Type\", \"Outlet_Type\"]\nfor col in categorical_cols:\n    print(sales[col].value_counts(dropna=False))","2d81bb67":"from sklearn.model_selection import train_test_split\ntrain, val, train_labels, val_labels  = train_test_split(train.drop(\"Item_Outlet_Sales\", axis=1), \n                                                         train[\"Item_Outlet_Sales\"], random_state=34125, test_size=0.2)","2f31f4b0":"import catboost as cb\n\ntrain_pool = cb.Pool(train, train_labels, cat_features=categorical_cols)\nval_pool = cb.Pool(val, val_labels, cat_features=categorical_cols)\ntest_pool = cb.Pool(test, cat_features=categorical_cols)","f794ff25":"model = cb.CatBoostRegressor(iterations=1000)\nmodel.fit(train_pool, eval_set=val_pool, verbose=100)","d1f27f97":"model.predict(test_pool)","de0b5b23":"sub = test[[\"Item_Identifier\", \"Outlet_Identifier\"]]\nsub[\"Item_Outlet_Sales\"] = model.predict(test_pool).clip(0)\nsub.to_csv(\"submission.csv\", index=False)\nsub","fa6a5f0a":"# Baseline RMSE score: 1151\nTest score is not available until competition ends.\nhttps:\/\/datahack.analyticsvidhya.com\/contest\/practice-problem-big-mart-sales-iii","33420fe7":"# Baselines\n\nCatBoost is a GBDT library like XGBoost or LightGBM."}}