{"cell_type":{"81bb0173":"code","0d5de4d5":"code","df28611b":"code","f5c7c0a7":"code","ba447011":"code","dc6cb5e9":"code","a92193d6":"code","aa847c90":"code","6a6a4365":"code","f2e1b688":"code","01bde449":"markdown","149e8af4":"markdown","9cad899f":"markdown","0c69551b":"markdown","8ae09db4":"markdown","0b8375db":"markdown","f381e89f":"markdown","0252df6b":"markdown"},"source":{"81bb0173":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom ast import literal_eval\nimport plotly.express as px\nimport plotly.graph_objects as go\n\nfrom PIL import Image","0d5de4d5":"df = pd.read_csv(\"\/kaggle\/input\/na-lcs-summer-2020-player-locations\/nalcssummer2020.csv\")\ndf.head()","df28611b":"team = \"ggs\"\n\neg = df[df.team == team]\neg","f5c7c0a7":"mid_points_b = []\nsup_points_b = []\ntop_points_b = []\nadc_points_b = []\nmove_in_points_b = []\ncounts_b = np.array([])\n\nmid_points_r = []\nsup_points_r = []\ntop_points_r = []\nadc_points_r = []\nmove_in_points_r = []\ncounts_r = np.array([])\n\n\nfor n in [1 + 5*i for i in range((eg.shape[0])\/\/5)]:\n    game = eg.iloc[n]\n    \n    if(game['side'] == \"red\"):\n        count = 0\n        pressure = False\n        for i in range(20,1200):\n            try:\n                point = literal_eval(game[i])\n                if(point[0] > (5\/4)*point[1]):\n                    if(count > 10 and not pressure):\n                        pressure = True\n                        counts_r = np.append(counts_r,count)\n                        count = 0\n                    elif(not pressure):\n                        pressure = not pressure\n                        count = 0\n                    elif(pressure):\n                        count += 1\n                else:\n                    if(pressure and count > 10):\n                        top_points_r.append(literal_eval(eg.iloc[n-1][i]))\n                        mid_points_r.append(literal_eval(eg.iloc[n+1][i]))\n                        adc_points_r.append(literal_eval(eg.iloc[n+2][i]))\n                        sup_points_r.append(literal_eval(eg.iloc[n+3][i]))\n                        move_in_points_r.append(point)\n                        pressure = False\n                        count = 0\n                    elif(pressure):\n                        pressure = not pressure\n                        count = 0\n                    elif(not pressure):\n                        count += 1\n                cv2.imshow('minimap',lcsmap)\n                if cv2.waitKey(1) & 0xFF == ord('q'):\n                    break\n            except:\n                pass\n    else:\n        count = 0\n        pressure = False\n        for i in range(20,1200):\n            try:\n                point = literal_eval(game[i])\n                if(point[0] > (5\/4)*point[1]-25):\n                    if(count > 10 and not pressure):\n                        if(point[0] < (5\/4)*point[1]+30):\n                            move_in_points_b.append(point)\n                            top_points_b.append(literal_eval(eg.iloc[n-1][i]))\n                            mid_points_b.append(literal_eval(eg.iloc[n+1][i]))\n                            adc_points_b.append(literal_eval(eg.iloc[n+2][i]))\n                            sup_points_b.append(literal_eval(eg.iloc[n+3][i]))\n                        pressure = True\n                        count = 0\n                    elif(pressure):\n                        pressure = not pressure\n                        count = 0\n                    elif(not pressure):\n                        count += 1\n                else:\n                    if(count > 10 and not pressure):\n                        pressure = True\n                        counts_b = np.append(counts_b,count)\n                        count = 0\n                    elif(not pressure):\n                        pressure = not pressure\n                        count = 0\n                    elif(pressure):\n                        count += 1\n            except:\n                pass","ba447011":"mid_points_b_2 = [i for i in mid_points_b if i[0] < 155-i[1]+40 and i[0] > 155-i[1]-40]\naxes_mid = list(zip(*mid_points_b_2))\n\nadc_points_b_2 = [i for i in adc_points_b if i[0] > 155-i[1]+60]\naxes_adc = list(zip(*adc_points_b_2))\n\ntop_points_b_2 = [i for i in top_points_b if i[0] < 155-i[1]-90]\naxes_top = list(zip(*top_points_b_2))\n\njgl_points_b_2 = [i for i in move_in_points_b if i[0] < i[1]+10]\naxes_jgl = list(zip(*jgl_points_b_2))","dc6cb5e9":"fig = go.Figure()\n\nfig.add_trace(go.Histogram2dContour(\n        x = axes_top[0],\n        y = axes_top[1],\n        colorscale = ['rgba(0,255,0,0)','white'],\n    name = \"Top\"\n))\n\nfig.add_trace(go.Histogram2dContour(\n        x = axes_mid[0],\n        y = axes_mid[1],\n        colorscale = ['rgba(0,0,255,0)','white'],\n        name=\"Mid\"\n))\n\nfig.add_trace(go.Histogram2dContour(\n        x = axes_adc[0],\n        y = axes_adc[1],\n        colorscale = ['rgba(255,0,0,0)','white'],\n    name = \"ADC\"\n))\n\n\nfig.update_xaxes(range=[0,155])\nfig.update_yaxes(range=[153,0])\n\nfig.add_layout_image(\n        dict(\n            source=Image.open(\"\/kaggle\/input\/na-lcs-summer-2020-player-locations\/lcs.png\"),\n            xref=\"x\",\n            yref=\"y\",\n            x=0,\n            y=0,\n            sizex = 155,\n            sizey = 153, \n            sizing=\"stretch\",\n            opacity=0.8,\n            layer=\"below\"))\n\nfig.update_layout(\n    title = \"%s: Positions when jungler pushes past halfway point: Blue side\" % team.upper(),\n    template = \"plotly_white\",\n    xaxis_showgrid = False,\n    yaxis_showgrid = False,\n    height = 800,\n    width = 800\n    )\n\nfig.update_traces(showlegend=True, showscale=False)\n\nfig.update_xaxes(showticklabels = False, title_text = \"\")\nfig.update_yaxes(showticklabels = False, title_text = \"\")\n\nfig.show()","a92193d6":"fig = go.Figure()\n\nfig.add_trace(go.Histogram2dContour(\n        x = axes_jgl[0],\n        y = axes_jgl[1],\n        colorscale = ['rgba(0,0,255,0)','white']\n))\n\nfig.update_xaxes(range=[0,155])\nfig.update_yaxes(range=[153,0])\n\nfig.add_layout_image(\n        dict(\n            source=Image.open(\"\/kaggle\/input\/na-lcs-summer-2020-player-locations\/lcs.png\"),\n            xref=\"x\",\n            yref=\"y\",\n            x=0,\n            y=0,\n            sizex = 155,\n            sizey = 153, \n            sizing=\"stretch\",\n            opacity=0.7,\n            layer=\"below\"))\n\nfig.update_layout(\n    title = \"%s: Positions where jungler pushes past halfway point: Blue side\" % team.upper(),\n    template = \"plotly_white\",\n    xaxis_showgrid = False,\n    yaxis_showgrid = False,\n    height = 800,\n    width = 800\n    )\n\nfig.update_traces(showlegend=False, showscale=False)\n\nfig.update_xaxes(showticklabels = False, title_text = \"\")\nfig.update_yaxes(showticklabels = False, title_text = \"\")\n\nfig.show()","aa847c90":"def invade_graphs(team):\n    eg = df[df.team == team]\n\n    mid_points_b = []\n    sup_points_b = []\n    top_points_b = []\n    adc_points_b = []\n    move_in_points_b = []\n    counts_b = np.array([])\n\n    mid_points_r = []\n    sup_points_r = []\n    top_points_r = []\n    adc_points_r = []\n    move_in_points_r = []\n    counts_r = np.array([])\n\n\n    for n in [1 + 5*i for i in range((eg.shape[0])\/\/5)]:\n        game = eg.iloc[n]\n\n        if(game['side'] == \"red\"):\n            count = 0\n            pressure = False\n            for i in range(20,1200):\n                try:\n                    point = literal_eval(game[i])\n                    if(point[0] > (5\/4)*point[1]):\n                        if(count > 10 and not pressure):\n                            pressure = True\n                            counts_r = np.append(counts_r,count)\n                            count = 0\n                        elif(not pressure):\n                            pressure = not pressure\n                            count = 0\n                        elif(pressure):\n                            count += 1\n                    else:\n                        if(pressure and count > 10):\n                            top_points_r.append(literal_eval(eg.iloc[n-1][i]))\n                            mid_points_r.append(literal_eval(eg.iloc[n+1][i]))\n                            adc_points_r.append(literal_eval(eg.iloc[n+2][i]))\n                            sup_points_r.append(literal_eval(eg.iloc[n+3][i]))\n                            move_in_points_r.append(point)\n                            pressure = False\n                            count = 0\n                        elif(pressure):\n                            pressure = not pressure\n                            count = 0\n                        elif(not pressure):\n                            count += 1\n                    cv2.imshow('minimap',lcsmap)\n                    if cv2.waitKey(1) & 0xFF == ord('q'):\n                        break\n                except:\n                    pass\n        else:\n            count = 0\n            pressure = False\n            for i in range(20,1200):\n                try:\n                    point = literal_eval(game[i])\n                    if(point[0] > (5\/4)*point[1]-25):\n                        if(count > 10 and not pressure):\n                            if(point[0] < (5\/4)*point[1]+30):\n                                move_in_points_b.append(point)\n                                top_points_b.append(literal_eval(eg.iloc[n-1][i]))\n                                mid_points_b.append(literal_eval(eg.iloc[n+1][i]))\n                                adc_points_b.append(literal_eval(eg.iloc[n+2][i]))\n                                sup_points_b.append(literal_eval(eg.iloc[n+3][i]))\n                            pressure = True\n                            count = 0\n                        elif(pressure):\n                            pressure = not pressure\n                            count = 0\n                        elif(not pressure):\n                            count += 1\n                    else:\n                        if(count > 10 and not pressure):\n                            pressure = True\n                            counts_b = np.append(counts_b,count)\n                            count = 0\n                        elif(not pressure):\n                            pressure = not pressure\n                            count = 0\n                        elif(pressure):\n                            count += 1\n                except:\n                    pass\n\n    mid_points_b_2 = [i for i in mid_points_b if i[0] < 155-i[1]+40 and i[0] > 155-i[1]-40]\n    axes_mid = list(zip(*mid_points_b_2))\n\n    adc_points_b_2 = [i for i in adc_points_b if i[0] > 155-i[1]+60]\n    axes_adc = list(zip(*adc_points_b_2))\n\n    top_points_b_2 = [i for i in top_points_b if i[0] < 155-i[1]-90]\n    axes_top = list(zip(*top_points_b_2))\n\n    jgl_points_b_2 = [i for i in move_in_points_b if i[0] < i[1]+10]\n    axes_jgl = list(zip(*jgl_points_b_2))\n\n    fig = go.Figure()\n\n    fig.add_trace(go.Histogram2dContour(\n            x = axes_top[0],\n            y = axes_top[1],\n            colorscale = ['rgba(0,255,0,0)','white'],\n        name = \"Top\"\n    ))\n\n    fig.add_trace(go.Histogram2dContour(\n            x = axes_mid[0],\n            y = axes_mid[1],\n            colorscale = ['rgba(0,0,255,0)','white'],\n            name=\"Mid\"\n    ))\n\n    fig.add_trace(go.Histogram2dContour(\n            x = axes_adc[0],\n            y = axes_adc[1],\n            colorscale = ['rgba(255,0,0,0)','white'],\n        name = \"ADC\"\n    ))\n\n\n    fig.update_xaxes(range=[0,155])\n    fig.update_yaxes(range=[153,0])\n\n    fig.add_layout_image(\n            dict(\n                source=Image.open(\"\/kaggle\/input\/na-lcs-summer-2020-player-locations\/lcs.png\"),\n                xref=\"x\",\n                yref=\"y\",\n                x=0,\n                y=0,\n                sizex = 155,\n                sizey = 153, \n                sizing=\"stretch\",\n                opacity=0.8,\n                layer=\"below\"))\n\n    fig.update_layout(\n        title = \"%s: Positions when jungler pushes past halfway point: Blue side\" % team.upper(),\n        template = \"plotly_white\",\n        xaxis_showgrid = False,\n        yaxis_showgrid = False,\n        height = 800,\n        width = 800\n        )\n\n    fig.update_traces(showlegend=True, showscale=False)\n\n    fig.update_xaxes(showticklabels = False, title_text = \"\")\n    fig.update_yaxes(showticklabels = False, title_text = \"\")\n\n    fig.show()\n\n    fig = go.Figure()\n\n    fig.add_trace(go.Histogram2dContour(\n            x = axes_jgl[0],\n            y = axes_jgl[1],\n            colorscale = ['rgba(0,0,255,0)','white']\n    ))\n\n    fig.update_xaxes(range=[0,155])\n    fig.update_yaxes(range=[153,0])\n\n    fig.add_layout_image(\n            dict(\n                source=Image.open(\"\/kaggle\/input\/na-lcs-summer-2020-player-locations\/lcs.png\"),\n                xref=\"x\",\n                yref=\"y\",\n                x=0,\n                y=0,\n                sizex = 155,\n                sizey = 153, \n                sizing=\"stretch\",\n                opacity=0.7,\n                layer=\"below\"))\n\n    fig.update_layout(\n        title = \"%s: Positions where jungler pushes past halfway point: Blue side\" % team.upper(),\n        template = \"plotly_white\",\n        xaxis_showgrid = False,\n        yaxis_showgrid = False,\n        height = 800,\n        width = 800\n        )\n\n    fig.update_traces(showlegend=False, showscale=False)\n\n    fig.update_xaxes(showticklabels = False, title_text = \"\")\n    fig.update_yaxes(showticklabels = False, title_text = \"\")\n\n    fig.show()","6a6a4365":"invade_graphs(\"eg\")","f2e1b688":"invade_graphs(\"dig\")","01bde449":"# League of Legends: Graphing Lane States at Invades\n\nIn League of Legends, as in any competitive scene, it's important to find patterns in how opposing teams play. In this notebook I'll try to find patterns in how professional teams play around their *Jungler* making aggressive plays. More specifically, I'll visualise how a Jungler's teammates position when their Jungler leaves their side of the map and invades the enemy side.\n\nThe Jungler generally spends a significant amount of time on his own side of the map gathering resources. However, they will often push past the halfway point of the map and make an aggressive foray into the enemy side, known as an invade. When this happens, he puts himself at risk. He may not know the locations of the enemies and could walk into a dangerous situation with little backup, meaning it's important to know where his teammates are at these times. If they are not in a position to provide assistance, it could be an exploitable weakness in the team's play. It can also be useful to see where the jungler tends to invade, as you can base a counter strategy around something like this.\n\nFor this study, I'll use a subset of games from the 2020 Summer split of the North American League of Legends Championship Series (NA LCS).","149e8af4":"Overall, this is but an idea of how to graph these lane states. On a larger dataset, it may become easier to spot patterns in the data. One particular point of interest is the fact that the teams seem to have their junglers invade on the top side all the time, this may be an issue with the algorithm.","9cad899f":"This can be repeated for any team in the dataset","0c69551b":"I'll look at the games for the 'Golden Guardians' team (GGS) on blue side. ","8ae09db4":"After this, it's simple enough to plot the patterns using contour maps","0b8375db":"You can also see the Jungler's positions","f381e89f":"The way it works is simple; Anytime the jungler passes the halfway point and leaves his side of the map, the positions of the team are logged for that moment. The positions are gathered for every game in the dataset and saved","0252df6b":"The data covers the first 20 minutes of the game, but we only care about the times when the teammates were in their lanes. So we'll only consider points that lie within the 3 lanes"}}