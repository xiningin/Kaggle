{"cell_type":{"7eb3f37d":"code","3e9bc834":"code","c599408c":"code","4f60e5aa":"code","b762535c":"code","abe4ea24":"code","666ac57e":"code","da36bf62":"code","177910db":"code","c2211344":"code","09b2bcea":"code","3791927b":"code","503689ba":"code","c4880bd1":"code","f80a528d":"code","63c1c8c9":"code","439ae235":"code","9b8c1119":"code","a0dffe5c":"code","13cbc4a9":"code","d03e7d98":"code","bbc20eef":"markdown","3ae7e20a":"markdown","ad5a15f3":"markdown","1c32d270":"markdown","c1704064":"markdown","ec882ac0":"markdown","904d36c7":"markdown","fb27de32":"markdown"},"source":{"7eb3f37d":"import os\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom skimage import io\nfrom skimage import measure \nfrom skimage import feature\nfrom skimage.morphology import disk\nfrom skimage.filters import rank\nfrom skimage import exposure\nimport warnings\nwarnings.filterwarnings(\"ignore\")","3e9bc834":"marks = pd.read_csv('..\/input\/airbus-ship-detection\/train_ship_segmentations.csv') # Markers for ships\nfiles = os.listdir('..\/input\/airbus-ship-detection\/train') # Images for training\nship = io.imread('..\/input\/picture\/picture.png') \nos.chdir(\"..\/input\/airbus-ship-detection\/train\")","c599408c":"Img_Height = 768\nImg_Width = 768","4f60e5aa":"def mask_part(pic):\n    '''\n    Function that converts single marker from 'marks' into the image\n    '''\n    back = np.zeros(Img_Height**2)\n    starts = pic.split()[0::2]\n    lens = pic.split()[1::2]\n    for i in range(len(lens)):\n        back[(int(starts[i])-1):(int(starts[i])-1+int(lens[i]))] = 1\n    return np.reshape(back, (Img_Height, Img_Width))","b762535c":"def is_empty(key):\n    '''\n    Checks if there is a marker for specific image\n    i.e. if there is a ship on image\n    '''\n    df = marks[marks['ImageId'] == key].iloc[:,1]\n    if len(df) == 1 and type(df.iloc[0]) != str and np.isnan(df.iloc[0]):\n        return True\n    else:\n        return False","abe4ea24":"def masks_all(key):\n    '''\n    Collects together all single markers belonging to the same image\n    '''\n    df = marks[marks['ImageId'] == key].iloc[:,1]\n    masks= np.zeros((Img_Height, Img_Width))\n    if is_empty(key):\n        return masks\n    else:\n        for i in range(len(df)):\n            masks += mask_part(df.iloc[i])\n        return masks.T","666ac57e":"def draw(file, rgb=0):\n    '''\n    Draws original image, correspondin mask and sum of two'''\n    plt.figure(figsize = (15,10))\n    plt.subplot(131, title ='Original Image')\n    plt.imshow(plt.imread(file))\n    plt.axis('off')\n    plt.subplot(132, title ='Mask of an Image')\n    plt.imshow(masks_all(file))\n    plt.axis('off')\n    plt.subplot(133, title ='Combined') \n    plt.imshow(plt.imread(file)[:,:,rgb]+masks_all(file)*200)\n    plt.axis('off')\n    plt.suptitle(file, y=0.77, verticalalignment ='top', fontsize = 22)\n    plt.show()\n    print('')","da36bf62":"ships = [] # Here I restrict images only on those containing ship, for the sake of visualization\nfor file in files:\n    if not is_empty(file):\n        ships.append(file)","177910db":"for file in np.random.choice(ships, 20):\n    draw(file, rgb=1)","c2211344":"def Parameter(file):\n    p = np.arange(10,250,20)\n    for i in p:\n        if Param(file, i):\n            break\n    return i","09b2bcea":"def Param(file, param):\n    '''\n    Chooses feasible parameter for the function Contour (below)'''\n    img = io.imread(file)\n    img0 = img[:,:,0]\n    contours0 = measure.find_contours(img0, param)\n    img1 = img[:,:,1]\n    contours1 = measure.find_contours(img1, param)\n    img2 = img[:,:,2]\n    contours2 = measure.find_contours(img2, param)\n    if len(contours0) == 0 or len(contours1)==0 or len(contours2)==0:\n        return False\n    else:\n        return True","3791927b":"def Contour(file, param=150):\n    '''\n    Looks for contours on images across all three channels\n    '''\n    img = io.imread(file)\n    img0 = img[:,:,0]\n    contours0 = measure.find_contours(img0, param)\n    contour0 = max(contours0, key=len)\n    img1 = img[:,:,1]\n    contours1 = measure.find_contours(img1, param)\n    contour1 = max(contours1, key=len)\n    img2 = img[:,:,2]\n    contours2 = measure.find_contours(img2, param)\n    contour2 = max(contours2, key=len)\n    return contour0, contour1, contour2","503689ba":"def Draw_contour(file, param=150):\n    '''\n    Plots together contour on an original image,\n    zoomed part of original image containing contoure and contoure alone\n    in each of three color channels\n    '''\n    img = io.imread(file)\n    img0, img1, img2 = img[:,:,0],img[:,:,1],img[:,:,2]\n    contour0, contour1, contour2 = Contour(file, param)\n    fig, (ax, ax3, ax2) = plt.subplots(ncols=3, figsize=(20, 10))\n    fig.figsize = (20,20)\n    ax.plot(contour0[::,1], contour0[::,0], color = 'g', linewidth = 0.2)\n    ax.imshow(img0, origin='lower', cmap='Reds')\n    ax.axis('off')\n    ax.set(title = 'Red Spectrum')\n    ax2.plot(contour0[::,1], contour0[::,0], color = 'tan')\n    asp = np.diff(ax2.get_xlim())[0] \/ np.diff(ax2.get_ylim())[0]\n    ax2.set_aspect(asp)\n    ax2.axis('off')\n    ax2.set(title = 'Only Contour')\n    ax3.set(xlim=(min(contour0[::,1])-50,max(contour0[::,1])+50), ylim=(min(contour0[::,0])-50,max(contour0[::,0])+50), autoscale_on=False,\n               title='Zoom Section with Contour')\n    ax3.plot(contour0[::,1], contour0[::,0], color = 'g', linewidth = 0.9)\n    ax3.imshow(img0, cmap='Reds')\n    ax3.axis('off')\n    plt.suptitle(file, y=0.85, fontsize = 22, x=0.25)\n    plt.show()\n\n    fig, (ax, ax3, ax2) = plt.subplots(ncols=3, figsize=(20, 10))\n    fig.figsize = (20,20)\n    ax.plot(contour1[::,1], contour1[::,0], color = 'r', linewidth = 0.2)\n    ax.imshow(img1, origin='lower', cmap='Greens')\n    ax.axis('off')\n    ax.set(title = 'Green Spectrum')\n    ax2.plot(contour1[::,1], contour1[::,0], color = 'tan')\n    asp = np.diff(ax2.get_xlim())[0] \/ np.diff(ax2.get_ylim())[0]\n    ax2.set_aspect(asp)\n    ax2.axis('off')\n    ax2.set(title = 'Only Contour')\n    ax3.set(xlim=(min(contour1[::,1])-50,max(contour1[::,1])+50), ylim=(min(contour1[::,0])-50,max(contour1[::,0])+50), autoscale_on=False,\n               title='Zoom Section with Contour')\n    ax3.plot(contour1[::,1], contour1[::,0], color = 'r', linewidth = 0.9)\n    ax3.imshow(img1, cmap='Greens')\n    ax3.axis('off')\n    plt.suptitle(file, y=0.85, fontsize = 22, x=0.25)\n    plt.show()\n\n    fig, (ax, ax3, ax2) = plt.subplots(ncols=3, figsize=(20, 10))\n    fig.figsize = (20,20)\n    ax.plot(contour2[::,1], contour2[::,0], color = 'r', linewidth = 0.2)\n    ax.imshow(img2, origin='lower', cmap='Blues')\n    ax.axis('off')\n    ax.set(title = 'Blue Spectrum')\n    ax2.plot(contour2[::,1], contour2[::,0], color = 'tan')\n    asp = np.diff(ax2.get_xlim())[0] \/ np.diff(ax2.get_ylim())[0]\n    ax2.set_aspect(asp)\n    ax2.axis('off')\n    ax2.set(title = 'Only Contour')\n    ax3.set(xlim=(min(contour2[::,1])-20,max(contour2[::,1])+20), ylim=(min(contour2[::,0])-20,max(contour2[::,0])+20), autoscale_on=False,\n               title='Zoom Section with Contour')\n    ax3.plot(contour2[::,1], contour2[::,0], color = 'r', linewidth = 0.9)\n    ax3.imshow(img2, cmap='Blues')\n    ax3.axis('off')\n    plt.suptitle(file, y=0.85, fontsize = 22, x=0.25)\n    plt.show()\n    print('')","c4880bd1":"for file in np.random.choice(ships, 20):\n    Draw_contour(file, Parameter(file))","f80a528d":"def Equalizer(file):\n    '''\n    Equalizes image spectrum (in gray scale)\n    '''\n    img = io.imread(file, as_grey=True)\n    selem = disk(100)\n    img_eq = rank.equalize(img, selem=selem)\n    return img_eq","63c1c8c9":"for file in np.random.choice(ships, 10):\n    plt.imshow(Equalizer(file), cmap='inferno')\n    plt.axis('off')\n    plt.show()","439ae235":"def Contrast(file, channel = None):\n    '''\n    Creates high contrast image (in specified channel)\n    '''\n    img = io.imread(file, as_grey= False)\n    left, right = np.percentile(img, (30, 70))\n    if channel ==None:\n        img_rescale = exposure.rescale_intensity(img, in_range=(left, right))\n    else:\n        img_rescale = exposure.rescale_intensity(img[:,:,channel], in_range=(left, right))\n    return img_rescale","9b8c1119":"def draw_contrast(file):\n    '''\n    Plots together original image, \n    high contrast image (in rgb and in each of color channels)\n    and lower contrast image\n    '''\n    img = io.imread(file) \n    print('')\n    plt.figure(figsize = (15,15))\n    plt.subplot(161, title ='Original')\n    plt.imshow(img)\n    plt.axis('off')\n    plt.subplot(162, title ='High Contrast (HC)')\n    plt.imshow(Contrast(file))\n    plt.axis('off')\n    plt.subplot(163, title ='HC Red Spectrum') \n    plt.imshow(Contrast(file, 0), cmap='inferno')\n    plt.axis('off')\n    plt.subplot(164, title ='HC Green Spectrum') \n    plt.imshow(Contrast(file, 1), cmap='inferno')\n    plt.axis('off')\n    plt.subplot(165, title ='HC Blue Spectrum') \n    plt.imshow(Contrast(file, 2), cmap='inferno')\n    plt.axis('off')\n    plt.subplot(166, title ='Equalized Image') \n    plt.imshow(Equalizer(file), cmap='inferno')\n    plt.axis('off')\n    plt.suptitle(file, y=0.63, fontsize = 22)\n    plt.show()      ","a0dffe5c":"for file in np.random.choice(ships, 20):\n    draw_contrast(file)","13cbc4a9":"def plot_all(file):\n    '''\n    Plots all extracted features together\n    '''\n    img = io.imread(file)\n    plt.figure(figsize = (12,15))\n    plt.subplot(431)\n    plt.xlim(4000,0)\n    plt.imshow(ship)\n    plt.axis('off')\n    plt.subplot(432, title ='Original')\n    plt.imshow(img)\n    plt.axis('off')\n    plt.subplot(433)\n    plt.imshow(ship)\n    plt.axis('off')\n    plt.subplot(434, title ='Mask')\n    plt.imshow(masks_all(file))\n    plt.axis('off')\n    plt.subplot(435, title ='High Contrast (HC)')\n    plt.imshow(Contrast(file))\n    plt.axis('off')\n    plt.subplot(436, title ='Equalized Image') \n    plt.imshow(Equalizer(file), cmap='inferno')\n    plt.axis('off')\n    plt.subplot(437, title ='HC Red Spectrum') \n    plt.imshow(Contrast(file, 0), cmap='inferno')\n    plt.axis('off')\n    plt.subplot(438, title ='HC Green Spectrum') \n    plt.imshow(Contrast(file, 1), cmap='inferno')\n    plt.axis('off')\n    plt.subplot(439, title ='HC Blue Spectrum') \n    plt.imshow(Contrast(file, 2), cmap='inferno')\n    plt.axis('off')\n    c0, c1, c2 = Contour(file, param=Parameter(file))\n    plt.subplot(4,3,10, title ='Red Spectrum Contours') \n    plt.plot(c0[::,1], c0[::,0], color = 'tan')\n    plt.axis('off')\n    plt.imshow(np.zeros((768,768)), cmap = 'summer')\n    plt.subplot(4,3,11, title ='Green Spectrum Contours') \n    plt.plot(c0[::,1], c0[::,0], color = 'tan')\n    plt.axis('off')\n    plt.imshow(np.zeros((768,768)), cmap = 'summer')\n    plt.subplot(4,3,12, title ='Blue Spectrum Contours') \n    plt.plot(c0[::,1], c0[::,0], color = 'tan')\n    plt.axis('off')\n    plt.imshow(np.zeros((768,768)), cmap ='summer')\n    plt.suptitle(file, y=0.92, fontsize = 22)\n    plt.show()\n    print('')","d03e7d98":"for file in np.random.choice(ships, 20):\n    plot_all(file)","bbc20eef":"### Below are 20 randomly chosen images with corresponding masks\nAs you can see from these plots, it is often very hard task even for you to detect a ship (or all the ships). So, you'll need a hell of a good model to achieve good results. ","3ae7e20a":"##### That's all folks","ad5a15f3":"## Equalizing and Stretching Image Contrast\nLowering contrast is common in image processing, but also often used in order to 'nicer' looking picture, \npresenting in a way we consider looking good. On the other side, contrast stretching creates pictures that\naren't so 'nice' but are probably better suited for problems like this where you want to detect object.\nBoth these techniques are shown below.","1c32d270":"Object detection is very popular field of interest and new and new algorithms for improving it are realised by the day. In Airbus Ship Detection Challege the accent is on speed (of course not neglecting the accuracy too) which makes problem even more complicated. When working on such kind of models people often need to do some Image Processing first.\n### The idea of this Kernel is to do some feature engineering on images before feeding it to machine learning algorithms.  \nWith this in mind I performed several image processing techniques and went lightly through them, showing the joined results in the end. This could be good start before building predicting algorithm.","c1704064":"## Finding Contours\nIt maght be interesting to look for the contours on image, becouse they could be around the ship and make problem a little easier.\nThis is not so trivial, becouse parameter must be choosen differently for different images so you need functions that will pick it wisely. The 'Parameter' function below tries to deal with this problem in a somewhat naive way, looking only if parameter is feasible, but not iff it gives good result.","ec882ac0":"### Plotting contours through color channels\nFrom the plots below we can see how contour on the same image can differ widely depending on spectrum. Sometimes this feature seems to be really helpful pointing to the whole ship or parts of it, but unfortunately, more offten it corresponds to the coast line or the border of a cloud. Even so, it might be of use to detect the cosat line when looking for ship. Anyway, with some better parameter tuning maybe results would be better too.","904d36c7":"## All Together\nWe have come to the end, and below are presented together all features extracted. Hope this was usefull","fb27de32":"![min](http:\/\/www.muslimheritage.com\/sites\/default\/files\/east_meets_west_venice_02_1.jpg?slideshow=true&slideshowAuto=false&slideshowSpeed=4000&speed=350&transition=elastic)"}}