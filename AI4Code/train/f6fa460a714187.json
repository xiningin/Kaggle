{"cell_type":{"8318423c":"code","7f32f738":"code","6fc7ddc2":"code","dd7c56af":"code","2047b788":"code","ebee4ef7":"code","c63951f0":"code","03119c98":"code","97423fae":"code","836d7185":"code","d9c604af":"code","5ae4ffe0":"code","02d0e873":"code","ab6e98d3":"code","bba3382c":"code","ef693083":"code","09f99375":"code","21a494c6":"code","64ea3171":"code","b561f708":"code","e8364b2b":"code","03367cf9":"code","240a15ef":"code","9806a9db":"code","2a12dca2":"code","e04fd08a":"code","d046940d":"code","571bf8bd":"code","a8468b42":"code","70c4865f":"code","1a12fb7f":"code","cdb91758":"code","10752b15":"code","5dc74ce8":"code","d46aae53":"code","b65e6182":"code","d2b413a9":"code","7fb09017":"code","d4b440f5":"code","8a613f65":"code","813a89d9":"code","2e321232":"code","5cc8ad54":"code","65d37ba4":"code","7d69e1fe":"code","72c5b670":"code","aaa48490":"code","d7faadba":"code","8778dbb0":"code","12696ddb":"code","6513f919":"code","6f74bbd4":"code","44247d2c":"code","4289cbb1":"code","5a57f7b5":"code","5de6069a":"code","be2a6a43":"code","475f83a4":"code","a9b5b5e0":"code","318fc551":"code","197c9179":"code","7652785e":"code","366b7a95":"code","35391d5e":"code","336a4cbc":"code","7369749e":"code","ea1df471":"code","98371ca8":"code","8269d04b":"code","f5e1a2b5":"code","bf0db8ee":"code","73d1659a":"code","fd29c554":"code","3fe74ece":"code","d0f5a6b9":"code","407e2090":"code","33c7ae59":"code","079688c7":"code","375bd836":"code","012adfa2":"markdown","586c6363":"markdown","d5fc0a67":"markdown","54a4a59a":"markdown","ffbbe7f1":"markdown"},"source":{"8318423c":"!pip install dabl","7f32f738":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport dabl\nimport plotly.express as px\n\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score","6fc7ddc2":"train_data = pd.read_csv('..\/input\/titanic\/train.csv')","dd7c56af":"train_data.head(10)","2047b788":"train_data.drop(['Name', 'Ticket', 'PassengerId', 'Cabin'], axis=1, inplace=True)","ebee4ef7":"train_data.head(10)","c63951f0":"train_data.info()","03119c98":"train_data['Sex'].value_counts()","97423fae":"train_data['Sex'] = train_data.Sex.map({\"male\":1, \"female\":0})","836d7185":"train_data.head(10)","d9c604af":"train_data['Embarked'].value_counts()","5ae4ffe0":"train_data['Embarked'] = train_data.Embarked.map({\"C\":0, \"Q\":1, \"S\":2})","02d0e873":"train_data.head(10)","ab6e98d3":"train_data['Embarked'] = train_data['Embarked'].fillna(train_data['Embarked'].median())","bba3382c":"train_data.head(20)","ef693083":"train_data['Age'].isnull().sum(axis = 0)","09f99375":"train_data['Age'] = train_data['Age'].fillna(train_data['Age'].median())","21a494c6":"train_data.head(10)","64ea3171":"train_data['Age'].value_counts()","b561f708":"\"\"\"\nHere, it makes sense for tha age of a passenger to influence whether the person survives the crash.\nSo, accordingly we can consolidate the information we want our model to learn by mapping the \"Age\" onto the following categories.\n\n\"\"\"\nbins = [0, 18, 30, 50, 80, np.inf]\nnames = ['Child', 'Adult', 'Elder', 'Senior', 'Ancient']\ntrain_data['Age'] = pd.cut(train_data['Age'], bins, labels=names)","e8364b2b":"train_data.head(20)","03367cf9":"\"\"\"\n\"SibSp\" and \"Parch\" variables tells us the number of siblings plus spouses and parents plus children respectively.\n\"\"\"\n#SibSp + Parch > Family\ntrain_data['Family'] = train_data['SibSp'] + train_data['Parch'] + 1","240a15ef":"train_data.head(10)","9806a9db":"train_data.drop(['SibSp', 'Parch'], axis=1, inplace=True)","2a12dca2":"train_data.head(20)","e04fd08a":"train_data['Fare'].value_counts()","d046940d":"fare_bins = [-0.001, 7.91, 14.454, 31.0, 512.329, np.inf]\nfare_names = ['Low', 'Medium', 'High', 'Luxury', 'Premium']\ntrain_data['Fare'] = pd.cut(train_data['Fare'], fare_bins, labels=fare_names)","571bf8bd":"train_data.head(20)","a8468b42":"train_data.info()","70c4865f":"fig = px.histogram(train_data, x = \"Survived\")\nfig.show()","1a12fb7f":"dabl.plot(train_data, target_col = \"Survived\")","cdb91758":"plt.figure(figsize=(20,20))\nc = train_data.corr()","10752b15":"sns.heatmap(c, cmap=\"inferno\")\nplt.title('Heatmap to understand the correlation between input data', fontsize=15)\nplt.show()","5dc74ce8":"train_data.head(10)","d46aae53":"y = train_data['Survived']","b65e6182":"y","d2b413a9":"train_data.drop(['Survived'], axis = 1, inplace = True)","7fb09017":"train_data.head(20)","d4b440f5":"Pclass_OH = pd.get_dummies(train_data['Pclass'], prefix = 'pclass')\nSex_OH = pd.get_dummies(train_data['Sex'], prefix = 'sex')\nAge_OH = pd.get_dummies(train_data['Age'], prefix = 'age')\nFare_OH = pd.get_dummies(train_data['Fare'], prefix = 'fare')\nEmbarked_OH = pd.get_dummies(train_data['Embarked'], prefix = 'embarked')\nFamily_OH = pd.get_dummies(train_data['Family'], prefix = 'family')","8a613f65":"train_data_OH = pd.concat([train_data,\n                         Pclass_OH,\n                         Sex_OH,\n                         Age_OH,\n                         Fare_OH,\n                         Embarked_OH,\n                         Family_OH], axis = 1)","813a89d9":"train_data_OH.drop(['Pclass', 'Age','Fare','Sex', 'Embarked', 'Family'], axis = 1, inplace = True)","2e321232":"train_data_OH.info()","5cc8ad54":"X = train_data_OH.iloc[:,:]","65d37ba4":"X.shape","7d69e1fe":"y.shape","72c5b670":"X_train, X_val, Y_train, Y_val = train_test_split(X, y, test_size = 0.2, random_state = 0)","aaa48490":"X_train.shape","d7faadba":"X_val.shape","8778dbb0":"from sklearn.svm import SVC\nsvm = SVC(kernel = 'linear', random_state = 0)\nmodel_SVM = svm.fit(X_train, Y_train)","12696ddb":"accuracy = model_SVM.score(X_val, Y_val) * 100\naccuracy","6513f919":"from sklearn import tree\ndecision_tree = tree.DecisionTreeClassifier(max_depth = 3)\nmodel_DT = decision_tree.fit(X_train, Y_train)","6f74bbd4":"accuracy = model_DT.score(X_val, Y_val) * 100\naccuracy","44247d2c":"from sklearn.ensemble import RandomForestClassifier\nclassifier = RandomForestClassifier(n_estimators = 10, criterion = 'entropy', random_state = 0)\nmodel_RF = classifier.fit(X_train, Y_train)","4289cbb1":"accuracy = model_RF.score(X_val, Y_val) * 100\naccuracy","5a57f7b5":"from sklearn.ensemble import GradientBoostingClassifier\nxg = GradientBoostingClassifier(n_estimators = 100, learning_rate = 0.5, criterion = 'friedman_mse', random_state = 0)\nmodel_XG = xg.fit(X_train, Y_train)","5de6069a":"accuracy = model_XG.score(X_val, Y_val) * 100\naccuracy","be2a6a43":"test_data = pd.read_csv('..\/input\/titanic\/test.csv')","475f83a4":"test_data.head(10)","a9b5b5e0":"test_data.drop(['Name', 'Ticket', 'PassengerId', 'Cabin'], axis=1, inplace=True)","318fc551":"test_data.info()","197c9179":"test_data['Sex'] = test_data.Sex.map({\"male\":1, \"female\":0})","7652785e":"test_data['Embarked'] = test_data.Embarked.map({\"C\":0, \"Q\":1, \"S\":2})","366b7a95":"test_data['Embarked'] = test_data['Embarked'].fillna(test_data['Embarked'].median())","35391d5e":"test_data['Age'] = test_data['Age'].fillna(test_data['Age'].median())","336a4cbc":"#SibSp + Parch > Family\ntest_data['Family'] = test_data['SibSp'] + test_data['Parch'] + 1","7369749e":"test_data.drop(['SibSp', 'Parch'], axis=1, inplace=True)","ea1df471":"test_data['Age'] = pd.cut(test_data['Age'], bins, labels=names)","98371ca8":"test_data['Fare'] = pd.cut(test_data['Fare'], fare_bins, labels=fare_names)","8269d04b":"test_data.head(20)","f5e1a2b5":"test_Pclass_OH = pd.get_dummies(test_data['Pclass'], prefix = 'pclass')\ntest_Sex_OH = pd.get_dummies(test_data['Sex'], prefix = 'sex')\ntest_Age_OH = pd.get_dummies(test_data['Age'], prefix = 'age')\ntest_Fare_OH = pd.get_dummies(test_data['Fare'], prefix = 'fare')\ntest_Embarked_OH = pd.get_dummies(test_data['Embarked'], prefix = 'embarked')\ntest_Family_OH = pd.get_dummies(test_data['Family'], prefix = 'family')","bf0db8ee":"test_data_OH = pd.concat([test_data,\n                         test_Pclass_OH,\n                         test_Sex_OH,\n                         test_Age_OH,\n                         test_Fare_OH,\n                         test_Embarked_OH,\n                         test_Family_OH], axis = 1)","73d1659a":"test_data_OH.drop(['Pclass', 'Age','Fare','Sex', 'Embarked', 'Family'], axis = 1, inplace = True)","fd29c554":"test_data_OH.info()","3fe74ece":"pred = model_RF.predict(test_data_OH)","d0f5a6b9":"pred = pred.astype(int)","407e2090":"submission = pd.read_csv('..\/input\/titanic\/gender_submission.csv')","33c7ae59":"submission['Survived'] = pred","079688c7":"submission.to_csv('submission.csv', index = False)","375bd836":"#end","012adfa2":"# Preprocessing and Evaluation of the Test Data","586c6363":"# Loading the Datasets and Data Preprocessing","d5fc0a67":"# Exploratory Data Analysis","54a4a59a":"# Modelling and Evaluation ","ffbbe7f1":"# Mapping all the categorical data to numerical values"}}