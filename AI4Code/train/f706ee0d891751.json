{"cell_type":{"1b38193c":"code","cd4f29e7":"code","81e2e412":"code","085b02d8":"code","be5f9b65":"code","cbff6a81":"code","d5b05826":"code","2f66ca85":"code","59d507a9":"code","bb608192":"code","59c0359c":"code","6b627fc1":"code","c0caa26f":"code","5a9ea74e":"code","227955ae":"code","04606a3d":"code","7e1b4266":"code","b33e5e30":"code","f299429c":"code","6c7394d1":"code","1fafa228":"code","1ae9e76d":"code","55fc9daf":"code","cc6d23eb":"code","ca0fd9ed":"code","d4cfefb5":"code","848ccb9d":"code","761a23a5":"code","87965912":"markdown","2e8d511b":"markdown","e6fdc0f9":"markdown","df182b8b":"markdown","666a31a7":"markdown","afcfa20b":"markdown"},"source":{"1b38193c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cd4f29e7":"import pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nhit = pd.read_csv(\"\/kaggle\/input\/hitters\/Hitters.csv\")\ndf = hit.copy()\ndf = df.dropna()\ndf.head()","81e2e412":"df.info()","085b02d8":"df.describe().T","be5f9b65":"dms = pd.get_dummies(df[['League', 'Division', 'NewLeague']])\ndms.head() #one hot encoding","cbff6a81":"y = df[\"Salary\"]","d5b05826":"X_ = df.drop([\"Salary\",\"League\",\"Division\",\"NewLeague\"], axis = 1).astype(\"float64\")","2f66ca85":"X_.head()","59d507a9":"X = pd.concat([X_, dms[[\"League_N\", \"Division_W\",\"NewLeague_N\"]]], axis = 1)\nX.head()","bb608192":"from sklearn.model_selection import train_test_split, cross_val_score, cross_val_predict\nX_train, X_test, y_train, y_test = train_test_split(X, \n                                                    y, \n                                                    test_size=0.25, \n                                                    random_state=42)\n\nprint(\"X_train\", X_train.shape)\n\nprint(\"y_train\",y_train.shape)\n\nprint(\"X_test\",X_test.shape)\n\nprint(\"y_test\",y_test.shape)\n\ntraining = df.copy()\n\nprint(\"training\", training.shape)","59c0359c":"from sklearn.decomposition import PCA\nfrom sklearn.preprocessing import scale \npca = PCA()","6b627fc1":"X_reduced_train = pca.fit_transform(scale(X_train))","c0caa26f":"X_reduced_train[0:1,:]","5a9ea74e":"np.cumsum(np.round(pca.explained_variance_ratio_, decimals = 4)*100)[0:5]","227955ae":"lm = LinearRegression()\npcr_model = lm.fit(X_reduced_train, y_train)\npcr_model.intercept_","04606a3d":"pcr_model.coef_","7e1b4266":"from sklearn.metrics import mean_squared_error, r2_score\ny_pred = pcr_model.predict(X_reduced_train)\ny_pred[0:5]","b33e5e30":"np.sqrt(mean_squared_error(y_train, y_pred))","f299429c":"df[\"Salary\"].mean()","6c7394d1":"r2_score(y_train, y_pred)","1fafa228":"pca2 = PCA()\nX_reduced_test = pca2.fit_transform(scale(X_test))\ny_pred = pcr_model.predict(X_reduced_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","1ae9e76d":"lm = LinearRegression()\npcr_model = lm.fit(X_reduced_train[:,0:10], y_train)\ny_pred = pcr_model.predict(X_reduced_test[:,0:10])\nprint(np.sqrt(mean_squared_error(y_test, y_pred)))","55fc9daf":"from sklearn import model_selection\ncv_10 = model_selection.KFold(n_splits = 10, shuffle = True, random_state = 1)\nlm = LinearRegression()","cc6d23eb":"RMSE = []","ca0fd9ed":"for i in np.arange(1, X_reduced_train.shape[1] + 1):\n    \n    score = np.sqrt(-1*model_selection.cross_val_score(lm, \n                                                       X_reduced_train[:,:i], \n                                                       y_train.ravel(), \n                                                       cv=cv_10, \n                                                       scoring='neg_mean_squared_error').mean())\n    RMSE.append(score)","d4cfefb5":"import matplotlib.pyplot as plt\nplt.figure(figsize=(12,6))\nplt.plot(RMSE, '-v')\nplt.xlabel('Components')\nplt.ylabel('RMSE')\nplt.title('PCR Model Tuning for Salary Estimation Model');","848ccb9d":"lm = LinearRegression()\npcr_model = lm.fit(X_reduced_train[:,0:6], y_train)\ny_pred = pcr_model.predict(X_reduced_train[:,0:6])\nprint(np.sqrt(mean_squared_error(y_train, y_pred)))","761a23a5":"y_pred = pcr_model.predict(X_reduced_test[:,0:6])\nprint(np.sqrt(mean_squared_error(y_test, y_pred)))","87965912":"## Prediction","2e8d511b":"# PCR Model","e6fdc0f9":"We extracted the dependent variable and the initial states of the categorical variables from our data set.","df182b8b":"The data set contains some information of American Basketball League players. There is a salary variable depending on the variables such as error, assist, experience, shooting belonging to the players.\nWe have to convert categorical variables to dummy variable format.","666a31a7":"We made the variables we have ready for modeling.","afcfa20b":"## Model Tuning"}}