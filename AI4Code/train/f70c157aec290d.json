{"cell_type":{"46ff9017":"code","24fa2df3":"code","5e0c2652":"code","fa0c8d9b":"code","6bfae674":"code","749d08de":"code","5ef4a45b":"code","cb101498":"code","9bc37496":"code","f2f1dbf7":"code","ac11e543":"code","078434af":"code","076e42b0":"code","9c3745bf":"markdown","a68f1af4":"markdown","f3288fc7":"markdown","6ae4e977":"markdown","6a516c53":"markdown"},"source":{"46ff9017":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom tensorflow.keras.datasets import cifar10\nfrom tensorflow.keras.utils import to_categorical\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Conv2D, MaxPool2D, Flatten\nfrom tensorflow.keras.callbacks import EarlyStopping\nfrom sklearn.metrics import classification_report,confusion_matrix","24fa2df3":"# Unpacking of the data in training & testing set\n(x_train, y_train), (x_test, y_test) = cifar10.load_data()\n\n# Normalizing the data\nx_train = x_train\/255\nx_test = x_test\/255\n\n# One hot encoding\ny_cat_train = to_categorical(y_train,10)\ny_cat_test = to_categorical(y_test,10)","5e0c2652":"model = Sequential()\n\n## FIRST SET OF LAYERS\n\n# CONVOLUTIONAL LAYER\nmodel.add(Conv2D(filters=32, kernel_size=(4,4),input_shape=(32, 32, 3), activation='relu',))\n# POOLING LAYER\nmodel.add(MaxPool2D(pool_size=(2, 2)))\n\n## SECOND SET OF LAYERS\n\n# CONVOLUTIONAL LAYER\nmodel.add(Conv2D(filters=32, kernel_size=(4,4),input_shape=(32, 32, 3), activation='relu',))\n# POOLING LAYER\nmodel.add(MaxPool2D(pool_size=(2, 2)))\n\n# FLATTEN IMAGES FROM 28 by 28 to 764 BEFORE FINAL LAYER\nmodel.add(Flatten())\n\n# 256 NEURONS IN DENSE HIDDEN LAYER (YOU CAN CHANGE THIS NUMBER OF NEURONS)\nmodel.add(Dense(256, activation='relu'))\n\n# LAST LAYER IS THE CLASSIFIER, THUS 10 POSSIBLE CLASSES\nmodel.add(Dense(10, activation='softmax'))\n\n\nmodel.compile(loss='categorical_crossentropy',\n              optimizer='rmsprop',\n              metrics=['accuracy'])","fa0c8d9b":"model.summary()","6bfae674":"early_stop = EarlyStopping(monitor='val_loss',patience=3)\nmodel.fit(x_train,y_cat_train,epochs=15,validation_data=(x_test,y_cat_test),callbacks=[early_stop])","749d08de":"losses = pd.DataFrame(model.history.history)\nlosses.head()","5ef4a45b":"print('losses columns:',losses.columns)\nprint('metrics:',model.metrics_names)\nlosses[['accuracy','val_accuracy']].plot()\nlosses[['loss','val_loss']].plot()","cb101498":"print(model.metrics_names)\nprint(model.evaluate(x_test,y_cat_test,verbose=0))","9bc37496":"predictions = model.predict_classes(x_test)","f2f1dbf7":"print('Classification report:')\nprint('\\n')\nprint(classification_report(y_test,predictions))\nprint('\\n')\nprint('Confusion matrix:')\nprint('\\n')\nprint(confusion_matrix(y_test,predictions))","ac11e543":"plt.figure(figsize=(10,6))\nsns.heatmap(confusion_matrix(y_test,predictions),annot=True)","078434af":"my_image = x_test[16]\nprint(y_test[16])\nplt.imshow(my_image)","076e42b0":"# SHAPE --> (num_images,width,height,color_channels)\nmodel.predict_classes(my_image.reshape(1,32,32,3))\n# model is correctly predicting the value for the image of object dog ","9c3745bf":"\n# Building the Model","a68f1af4":"# Predicting a given image","f3288fc7":"# The End","6ae4e977":"# Data Preprocessing","6a516c53":"# The Data\n\nCIFAR-10 is a dataset of 50,000 32x32 color training images, labeled over 10 categories, and 10,000 test images."}}