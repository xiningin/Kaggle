{"cell_type":{"04f34899":"code","be48e692":"code","0bd3671b":"code","a496ec1e":"code","ef8c74e7":"code","876e379c":"code","0fb016dc":"code","4d92b3f9":"code","cde081bb":"markdown","3de7ed90":"markdown","19304b57":"markdown","2d1d4f60":"markdown","158ec9c5":"markdown","3f45c821":"markdown"},"source":{"04f34899":"from PIL import Image, ImageStat, ImageEnhance\nfrom multiprocessing import Pool, cpu_count\nimport glob, zipfile, os, itertools\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom sklearn import *\nimport pandas as pd\nimport numpy as np\nimport scipy, cv2\nimport imagehash\n\n# \u7d71\u8a08\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\n# Get statistical data\ndef get_features(path):\n    try:\n        st = []\n        # \u753b\u50cf\u306epixcel\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\n        # Get pixel data of image\n        img = Image.open(path)\n        img = img.resize((100,int(img.size[1]\/(img.size[0]\/100))), Image.ANTIALIAS)\n        img = img.crop((0, 0, 64, 64))\n        # \u753b\u50cf\u306epixcel\u30c7\u30fc\u30bf\u306eRGB\u5225\u306e\u7d71\u8a08\u7d50\u679c\u3092\u958b\u59cb\n        # Start statistics by RGB of pixcel data of image\n        im_stats_ = ImageStat.Stat(img)\n        # \u5408\u8a08\n        # total\n        st += im_stats_.sum\n        # \u5e73\u5747\u5024\n        # Average value\n        st += im_stats_.mean\n        # \u4e8c\u4e57\u5e73\u5747\u5e73\u65b9\u6839\n        # Root mean square\n        st += im_stats_.rms\n        # \u5206\u6563\n        # dispersion\n        st += im_stats_.var\n        # \u6a19\u6e96\u504f\u5dee\n        # standard deviation\n        st += im_stats_.stddev\n        img = np.array(img)\n        m, s = cv2.meanStdDev(img)\n        st += list(m)\n        st += list(s)\n        st += [cv2.Laplacian(img, cv2.CV_64F).var()]\n        st += [cv2.Sobel(img,cv2.CV_64F,1,0,ksize=5).var()]\n        st += [cv2.Sobel(img,cv2.CV_64F,0,1,ksize=5).var()]\n        img = img[:,:,:3]\n        st += [scipy.stats.kurtosis(img[:,:,0].ravel())]\n        st += [scipy.stats.kurtosis(img[:,:,1].ravel())]\n        st += [scipy.stats.kurtosis(img[:,:,2].ravel())]\n        st += [scipy.stats.skew(img[:,:,0].ravel())]\n        st += [scipy.stats.skew(img[:,:,1].ravel())]\n        st += [scipy.stats.skew(img[:,:,2].ravel())]\n    except:\n        print(path)\n    return [path, st]\n\n# \u4e26\u5217\u51e6\u7406\n# Parallel processing\ndef normalize_img(paths):\n    imf_d = {}\n    p = Pool(cpu_count())\n    # get_features\u95a2\u6570\u3092\u4e26\u5217\u51e6\u7406\n    # Parallelize get_features function\n    ret = p.map(get_features, paths)\n    # \u4e26\u5217\u51e6\u7406\u306e\u7d50\u679c\u3092\u914d\u5217\u5316\n    # Arrange the result of parallel processing\n    for i in range(len(ret)):\n        imf_d[ret[i][0]] = ret[i][1]\n    ret = []\n    fdata = [imf_d[f] for f in paths]\n    return pd.DataFrame(fdata)\n\n# \u753b\u50cf\u30c7\u30fc\u30bf\u306e\u30d1\u30b9\u3092\u8aad\u307f\u8fbc\u307f\n# Load path of image data\ndog_bytes = pd.DataFrame(glob.glob('..\/input\/all-dogs\/all-dogs\/**'), columns=['Path'])\n# \u753b\u50cf\u6bce\u306bpixcel\u30c7\u30fc\u30bf\u306e\u7d71\u8a08\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\n# Get statistical data of pixcel data for each image\ndog_bytes = pd.concat((dog_bytes, normalize_img(dog_bytes.Path.values)), axis=1)","be48e692":"labels = pd.DataFrame(glob.glob('..\/input\/annotation\/Annotation\/**\/**'), columns=['Path'])\nlabels['Labels'] = labels['Path'].map(lambda x: x.split('\/')[4].split('-')[1])\nlabels['FileName'] = labels['Path'].map(lambda x: x.split('\/')[-1] + '.jpg')\nlabels = {f:l for f,l in labels[['FileName', 'Labels']].values}\n\ndog_bytes['FileName'] = dog_bytes['Path'].map(lambda x: x.split('\/')[-1])\ndog_bytes['Labels'] = dog_bytes['FileName'].map(labels)\ndog_bytes.head()","0bd3671b":"# KMeans\u6cd5\u306b\u3088\u3063\u3066\u3001\u753b\u50cf\u30c7\u30fc\u30bf\u3092100\u5206\u985e\u306b\u5206\u5272\n# Divide image data into 100 classifications by KMeans method\ndog_bytes['Group'] = cluster.KMeans(n_clusters=400, random_state=4, n_jobs=-1).fit_predict(dog_bytes[list(range(30))])\n# 100\u5206\u985e\u304b\u3089\u6570\u304c\u591a\u30445\u5206\u985e\u3092\u53d6\u5f97\uff08\u8868\u793a\uff09\n#  Get 5 classifications with many from 400 classifications (display)\ndog_bytes['Group'].value_counts()[:5]","a496ec1e":"# \u753b\u50cf\u3092\u8868\u793a\u3059\u308bwindow\u3092\u751f\u6210\n# \u5358\u4f4d\u306f\u30a4\u30f3\u30c1\n# Generate a window to display the image\n# Unit is in inches\nfig = plt.figure(figsize=(8, 80))\nsamples = []\n# \u7279\u5b9a\u306e\u5206\u985e\u306e\u753b\u50cf\u30c7\u30fc\u30bf\u304b\u30895\u3064\u305a\u3064\u30b5\u30f3\u30d7\u30eb\u3092\u53d6\u5f97\n# Get 5 samples from image data of specific classification\nfor i in range(400):\n    # \u7279\u5b9a\u306e\u5206\u985e\u306e\u753b\u50cf\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\n    # Get image data of a specific classification\n    g = dog_bytes[dog_bytes['Group'] == i]\n    if len(g) > 5:\n        # \u7279\u5b9a\u306e\u5206\u985e\u306e\u753b\u50cf\u30c7\u30fc\u30bf\u304b\u30895\u3064\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u53d6\u5f97\n        # Get 5 samples from image data of specific classification\n        samples += list(g['Path'].values[:5])\n\n# \u5206\u985e\u6bce\u306e\u753b\u50cf\u3092\u8868\u793a\n# Display images by classification\nfor i in range(len(samples))[:50]:\n    # 5\u884c5\u5217\u5206\u306ewindow\u306e\u5185\u3001\u4e00\u3064\u3092\u53d6\u5f97\n    # Get one of the 5 rows and 5 columns of windows\n    ax = fig.add_subplot(len(samples)\/5, 5, i+1, xticks=[], yticks=[])\n    # \u753b\u50cf\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\n    # Get image data\n    img = Image.open(samples[i])\n    # \u753b\u50cf\u30c7\u30fc\u30bf\u3092\u30ea\u30b5\u30a4\u30ba\n    # \u5358\u4f4d\u306fpixel\n    # \u89e3\u50cf\u5ea6(dpi) = pixel \/ \u30a4\u30f3\u30c1\n    # Resize image data\n    # Unit is pixel\n    # Resolution (dpi) = pixel \/ inch\n    img = img.resize((100,int(img.size[1]\/(img.size[0]\/100))), Image.ANTIALIAS)\n    img = img.crop((0, 0, 64, 64))\n    plt.imshow(img)","ef8c74e7":"def sim_img(path):\n    img = Image.open(path).convert('RGB')\n    img = img.resize((100,int(img.size[1]\/(img.size[0]\/100))), Image.ANTIALIAS)\n    img = img.crop((0, 0, 64, 64))\n    return img\n\nsamples = []\nfor i in range(400):\n    g = dog_bytes[dog_bytes['Group'] == i]\n    p = g['Path'].values\n    for i in range(0,len(p)-2, 2):\n        samples.append([p[i],p[i+1]])\n    if len(samples) > 11_000: break\nfor i in range(0,len(samples)-1):\n    samples.append([samples[i][0],samples[i+1][0]])\n    if len(samples) > 11_000: break\nprint(len(samples))","876e379c":"z = zipfile.PyZipFile('images.zip', mode='w')\nfor i in range(10_000):\n    p1, p2 = samples[i]\n    # \u540c\u3058\u5206\u985e\u5185\u306e\uff12\u3064\u306e\u753b\u50cf\u3092\u6df7\u5408\u3057\u3001\u65b0\u3057\u3044\u753b\u50cf\u3092\u4f5c\u6210\n    # Mix two images in the same category and create a new image\n    # out = p1 * (1 - 0.01) + p2 * 0.01\n    im = Image.blend(sim_img(p1), sim_img(p2), alpha=0.01)\n    f = str(i)+'.png'\n    im.save(f,'PNG'); z.write(f); os.remove(f)\n    if i % 1000==0:\n        print(i)\nprint (len(z.namelist()))\nz.close()","0fb016dc":"d = ensemble.RandomForestClassifier(n_jobs=-1, n_estimators=400, random_state=3)\n\ngroups = dog_bytes['Group'].value_counts().index[:100]\ndog_bytes['Original'] = dog_bytes['Group'].map(lambda x: 0 if x in groups else 1) #target label\n\n#Lets create test set\ng = dog_bytes[dog_bytes['Group'].isin(groups)]\ns = list([p for p,_ in itertools.groupby(sorted([sorted(p) for p in list(itertools.permutations(g['Path'].values[:60], 2))]))])\ntest = pd.DataFrame(s, columns=['Path1', 'Path2'])\ntest['Image'] = test.index.map(lambda x: 'test\/' + str(x) + '.png')\nos.mkdir('test\/')\nfor i in range(len(test)):\n    im = Image.blend(sim_img(test.Path1[i]), sim_img(test.Path2[i]), alpha=0.5)\n    im.save(test['Image'][i],'PNG')\ntest = pd.concat((test, normalize_img(test.Image.values)), axis=1)\n\nd.fit(dog_bytes[list(range(30))], dog_bytes['Original'])\ntest['Original'] = d.predict_proba(test[list(range(30))])[:,1]\ntest = test.sort_values(by=['Original'], ascending=False).reset_index(drop=True)\ndog_bytes.Original.value_counts()","4d92b3f9":"fig = plt.figure(figsize=(4, 20))\nfor i in range(10):\n    ax = fig.add_subplot(10, 3, (3*i)+1, xticks=[], yticks=[])\n    plt.imshow(Image.open(test.Path1[i]).resize((100,int(img.size[1]\/(img.size[0]\/100))), Image.ANTIALIAS))\n    ax = fig.add_subplot(10, 3, (3*i)+2, xticks=[], yticks=[])\n    plt.imshow(Image.open(test.Path2[i]).resize((100,int(img.size[1]\/(img.size[0]\/100))), Image.ANTIALIAS))\n    ax = fig.add_subplot(10, 3, (3*i)+3, xticks=[], yticks=[])\n    plt.imshow(Image.open(test.Image[i]))\nimport shutil; shutil.rmtree('test\/')","cde081bb":"Motivation\n==============","3de7ed90":"Submission\n=============","19304b57":"Inspiration\n===========","2d1d4f60":"\uff28\ud835\udc00\ud835\udc77\ud835\udc77\ud835\udcce \ud83c\uddf0\ud835\uddee\ud835\ude28\ud835\ude28\ud83c\uddf1\ud835\udd8e\uff2e\u0262  \ud83d\udcaf\n====================","158ec9c5":"Lets spin some more ML in to this\n===============================","3f45c821":"DISCLAIMER\n===========\nUse at your own risk, this is not an acceptable approach per the competition rules. Posted for continued learning only.  For explanation on why it works check out [@cdeotte](https:\/\/www.kaggle.com\/cdeotte) great [kernel](https:\/\/www.kaggle.com\/cdeotte\/supervised-generative-dog-net) \n\nTranslations and comments by [@takumiito](https:\/\/www.kaggle.com\/takumiito) and [@timdarcet](https:\/\/www.kaggle.com\/timdarcet)"}}