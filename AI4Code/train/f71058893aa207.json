{"cell_type":{"1bb8c124":"code","7f1fd35a":"code","1f317015":"code","d28ca84d":"code","4279687d":"code","a53d5864":"code","1e616702":"code","9f420dab":"code","c10598bb":"code","fbd78955":"markdown","10ddd11f":"markdown"},"source":{"1bb8c124":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7f1fd35a":"\nimport pandas as pd\nimport numpy as np\nimport matplotlib \nimport matplotlib.pyplot as plt\nimport datetime as dt\nimport seaborn as sns\nimport xgboost as xgb\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import log_loss\nimport tensorflow as tf\nfrom keras.models import Sequential\nfrom keras.layers import Dense,Activation,Dropout","1f317015":"sample=pd.read_csv(\"\/kaggle\/input\/sf-crime\/sampleSubmission.csv.zip\")\ntrain= pd.read_csv(\"\/kaggle\/input\/sf-crime\/train.csv.zip\")\ntest= pd.read_csv(\"\/kaggle\/input\/sf-crime\/test.csv.zip\")\n","d28ca84d":"\ntrain = pd.concat([train, pd.get_dummies(train['DayOfWeek'])], axis=1)\ntrain.drop('DayOfWeek', axis=1, inplace=True)\n\ntest = pd.concat([test, pd.get_dummies(test['DayOfWeek'])], axis=1)\ntest.drop('DayOfWeek', axis=1, inplace=True)\ntrain = pd.concat([train, pd.get_dummies(train['PdDistrict'])], axis=1)\ntrain.drop('PdDistrict', axis=1, inplace=True)\n\ntest = pd.concat([test, pd.get_dummies(test['PdDistrict'])], axis=1)\ntest.drop('PdDistrict', axis=1, inplace=True)\ntrain.drop(['Address', 'Descript', 'Resolution', 'Dates'], axis=1, inplace=True)\n\ntest.drop(['Address', 'Dates'], axis=1, inplace=True)\n","4279687d":"test.head()","a53d5864":"from sklearn.model_selection import train_test_split\nX=train.drop(['Category'],axis=1)\n\ny=train['Category']\ny=pd.get_dummies(y)\nfrom sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.25)\n","1e616702":"\n\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.ensemble import RandomForestRegressor\n\nfrom sklearn.metrics import  log_loss\n\n\ncategorical_cols = [cname for cname in X_train.columns if\n                    \n                    X_train[cname].dtype == \"object\"]\nnumerical_cols = [cname for cname in X_train.columns if \n                X_train[cname].dtype in ['int64', 'float64']]\n\nmy_cols = categorical_cols + numerical_cols\nnumerical_transformer = SimpleImputer(strategy='constant')\ncategorical_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='most_frequent')),\n    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n])\n\n\n\npreprocessor = ColumnTransformer(transformers=[('num', numerical_transformer, numerical_cols),('cat', categorical_transformer, categorical_cols)])\nmodel = RandomForestRegressor(n_estimators=100, random_state=0)\nclf = Pipeline(steps=[('preprocessor', preprocessor),('model', model)])\n\nclf.fit(X_train, y_train)\n\n\npreds = clf.predict(test.drop('Id',axis=1))\n\n\n","9f420dab":"from sklearn.preprocessing import LabelEncoder\nLB = LabelEncoder()\ntar = LB.fit_transform(train['Category'])","c10598bb":"Submission = pd.DataFrame(preds, columns = LB.inverse_transform(np.linspace(0, 38, 39, dtype='int16')),index=test.index) \n\nSubmission.to_csv('Submission.csv', index_label = 'Id')","fbd78955":"Step1-Convert catedorical columns to numerical representations","10ddd11f":"Using pipeline model with random forest regressor"}}