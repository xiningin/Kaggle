{"cell_type":{"394add2c":"code","f1394d51":"code","2345ff0b":"code","d88b44e2":"code","d2c8085c":"code","d7211531":"code","a7cd65eb":"code","affa6eae":"code","3faac290":"code","90d1d22f":"code","64f05b82":"code","8e8ecfa1":"code","6e46555e":"code","267bf727":"code","69117652":"code","0c77c632":"code","2ec5befb":"code","a265b284":"code","61259c74":"code","3a5fe630":"code","e141098f":"code","4151c47c":"code","45aa6e77":"code","4d530865":"code","2cdc4cb8":"code","7e0c6f63":"code","129c9dd8":"code","2a199068":"code","3d4fb8bc":"code","3aa1b878":"code","4c6e0a10":"code","08ebe330":"code","ca80ec0f":"code","d89016f2":"code","e95756d2":"code","c511d1f8":"code","26e22087":"code","3658dd1f":"code","a557ee0a":"code","56577d43":"code","c16bd8eb":"code","68495631":"code","5c9f2857":"code","1f4f79c7":"code","ab577ff8":"code","75934dc1":"code","327c0a75":"code","fdad7c1e":"code","c5723f49":"code","cd820597":"code","81a50894":"code","94e34b95":"code","97787900":"code","031e8f99":"code","f71a5b72":"code","3d280170":"code","dadd80ef":"code","2cb2a762":"code","1804406c":"code","cb33934d":"code","c829691a":"code","9cac6fce":"code","513378c0":"code","6bb02db7":"code","0afefbf5":"code","ee6fff7e":"code","48f3f6f5":"code","9e42d6ee":"code","813ac997":"code","7f55ca38":"code","2bd0511b":"code","ba916fb5":"code","914b5ecc":"code","d889099f":"code","f7ce66e5":"code","ef67752a":"code","4793937e":"code","10d4b0f3":"code","f63828a6":"code","3ef7370f":"code","641ac2bc":"code","5429d03f":"code","b6a58ba3":"code","502cffc1":"code","fa177c1a":"code","3fb82a73":"code","8be08217":"code","5a1496ba":"code","99a8192e":"code","61eecd01":"code","a54e168e":"code","dbcf7b1c":"code","0e604064":"code","8f8ca012":"code","8134d01a":"code","fb2816cb":"code","c6bd6351":"code","b6ba2bc7":"code","9fef6ca8":"code","a69e7518":"code","3c6cdb66":"code","7b6debae":"code","b3a677ef":"code","7ba57088":"code","35a4d0d6":"code","ab9f078a":"code","1c2b2288":"code","85be842a":"code","f4e3d179":"code","2bc0f36f":"code","8f9b52cb":"code","c2c47cc4":"code","eda0631f":"code","455457bd":"code","f05fb1eb":"code","1033677f":"markdown","92e45be6":"markdown","fcee822f":"markdown","e3ceb827":"markdown","feaada94":"markdown","738348b0":"markdown","bd169e03":"markdown","8c575ea4":"markdown","132cb97e":"markdown","840d41aa":"markdown","63aecb97":"markdown","ff67d6e2":"markdown","5936bdae":"markdown","e08191f8":"markdown","ee84cca8":"markdown","eb940aa1":"markdown","0f91d14e":"markdown","034fecea":"markdown","eb72fb0d":"markdown","dd398561":"markdown","3b50cf52":"markdown","11d1d8c1":"markdown","be3c6e54":"markdown","7783fac3":"markdown","43586483":"markdown"},"source":{"394add2c":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os","f1394d51":"df = pd.DataFrame([\n        [2, 'foo', np.NaN],\n        [2, 'bar', np.NaN],\n        [3, 'x', np.NaN],\n        [3, 'bar', np.NaN],\n        [3, np.NaN, np.NaN],\n    ], columns=['rtx', 'name','test'])\n\ndf","2345ff0b":"v = [0,0,0,1,0]\ndf['v'] = v\ndf","d88b44e2":"df_x = df[['rtx','name']]\ndf_x","d2c8085c":"df_x = df_x.replace(np.nan, 'unknown', regex=True)\ndf_x","d7211531":"(df['name'] == 'foo').sum(), (df['name'] == 'bar').sum()","a7cd65eb":"df[df['rtx'] == 2]","affa6eae":"df.groupby('name')['rtx'].mean()","3faac290":"df.name.value_counts()","90d1d22f":"df.describe()","64f05b82":"round(df.rtx.std(),2)","8e8ecfa1":"round(df.rtx.median(),2)","6e46555e":"pd.crosstab(df['rtx'], df['name'], margins=True)","267bf727":"df[df['name'] != 'x']","69117652":"df = df[df['name'] != 'x'].groupby('name').count().sort_values('name',ascending=False)\ndf.head()","0c77c632":"df = df.drop(\"v\", axis=1)\ndf.head()","2ec5befb":"pd.concat([df,df], axis=0)","a265b284":"pd.concat([df,df], axis=1)","61259c74":"df.fillna(10,inplace=True)\ndf","3a5fe630":"#df = pd.read_csv(path\/'train.csv',)#.sample(frac=0.05)","e141098f":"a = pd.DataFrame(columns = ['file','text'])\na.loc[0]=['text','s']\na.loc[1]=['text2','s2']\na","4151c47c":"d = {}\nfor i in range(0,5):\n     d.setdefault('result', [])\n     d['result'].append(i)\n\ndf = pd.DataFrame(d)\ndf","45aa6e77":"df = pd.DataFrame({'a':range(10),'b':range(10 ,20),'c':sorted(list(range(5))+list(range(5)))})\ndf","4d530865":"df.set_index('c',inplace=True)\ndf","2cdc4cb8":"pd.DataFrame(index=df.index, data=df, columns = ['a'])","7e0c6f63":"source_dict = {\n    'A': ['foo', 'bar', 'baz', 'foo', 'bar', 'baz'],\n    'B': ['cat_a', 'cat_a', 'cat_a', 'cat_b', 'cat_b', 'cat_b'],\n    'C': [1, 2, 3, 2, 2, 0]\n}\n\nexample = pd.DataFrame(source_dict)\n\nexample\n","129c9dd8":"example.groupby(['B']).max()","2a199068":"example.groupby(['B']).C.apply(lambda x: x.is_monotonic_decreasing)","3d4fb8bc":"example.groupby(['B']).C.apply(lambda x: max(x) )","3aa1b878":"df = pd.DataFrame({'a':range(10),'b':range(10 ,20),'c':sorted(list(range(5))+list(range(5)))})\ndf","4c6e0a10":"chunk = 1\ndef mysum(a):\n    global chunk\n    #print(\"chunk\",chunk)\n    chunk += 1\n    #print(a)\n    return a.sum()\n\ndf.groupby('c').apply(mysum)","08ebe330":"chunk = 1\ndf.rolling(window=2).apply(mysum,raw=True)","ca80ec0f":"df = pd.DataFrame({'B': [1, 1, 1, 1, 1,1,1,1,2,2,2,2,2,2]})\ndf","d89016f2":"df['B'].rolling(3, win_type ='triang').mean()","e95756d2":"df.B =df.rolling(3, min_periods=1).sum()","c511d1f8":"import matplotlib.pyplot as plt\nplt.plot(df['B'],label= 'B')\nplt.plot(df['B'].rolling(2).mean(),label= 'MA 2')\nplt.plot(df['B'].rolling(6).mean(),label= 'MA 6')\nplt.legend(loc='best')\nplt.title('Wells Fargo\\nClose and Moving Averages')\nplt.show()","26e22087":"df = pd.DataFrame({'a': [1,2,3], 'b': [2,3,4], 'c':['dd','ee','ff'], 'd':[5,9,1]})\ndf","3658dd1f":"df['e'] = df.sum(axis=1)\ndf","a557ee0a":"col_list= list(df)\ncol_list.remove('e')\ncol_list","56577d43":"df['f'] = df[col_list].sum(axis=1)\ndf","c16bd8eb":"df['g'] = df['a'] + df['b'] + df['d']\ndf","68495631":"df['h']=df.iloc[:,[0,3]].sum(axis=1)\ndf","5c9f2857":"df.iloc[:,1:]","1f4f79c7":"df['h']=df.iloc[:,1:].sum(axis=1)\ndf","ab577ff8":"df = pd.DataFrame([\n        [1, '10'],\n        [1, '21'],\n        [1, '30'],\n        [2, '10'],\n        [2, '20'],\n        [2, '30'],\n        [3, '10'],\n        [3, '20'],\n    ], columns=['userid', 'name'])\n\ndf","75934dc1":"df_stack = df.sort_values('userid').groupby('userid')['name'].apply(lambda df: df.reset_index(drop=True)).unstack()\ndf_stack","327c0a75":"df_stack = pd.DataFrame(df_stack.to_records())\ndf_stack","fdad7c1e":"cat_cols = ['userid']","c5723f49":"def f(x):\n    if x != 'userid':\n         return x+'S'\n    else :\n        return x","cd820597":"df_stack.rename(columns=lambda x: f(x), inplace=True)\ndf_stack","81a50894":"def regression(df):\n\n    # first edit Date column from datetime to days\n    x  = (df['Date'] - df['Date'].min()).astype('timedelta64[D]')\n    y = df['Sales']\n    \n    # test if data contains more atleast 2 points\n    if len(x) < 2:\n        return np.nan\n    \n    # https:\/\/docs.scipy.org\/doc\/numpy\/reference\/generated\/numpy.polyfit.html\n    m, b = np.polyfit(x, y, 1) # degree 1 = linear regression\n\n    return m","94e34b95":"#example.groupby(['B']).apply(regression)","97787900":"def catog() :\n    df = pd.DataFrame({'A' : list('aabcda'), 'B' : list('bcdaae')})\n    return df\ndf = catog()\ndf","031e8f99":"#df.apply(lambda x: x.astype('category'))","f71a5b72":"#dict([(category, code) for code, category in enumerate(df.col.cat.categories)])","3d280170":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ndf['A'] = le.fit_transform(df['A'])\ndf","dadd80ef":"le.classes_","2cb2a762":"df.B.astype('category').cat.codes","1804406c":"df.B.astype('category').cat.categories","cb33934d":"mycolumns = ['A', 'B']\ndf = pd.DataFrame(columns=mycolumns)\nrows = [['a','b'],['d','g'],['y','z'],[np.nan,np.nan]]\nfor row in rows:\n    df.loc[len(df)] = row\ndf","c829691a":"#pd.get_dummies(df, dummy_na=True)","9cac6fce":"char_cols = df.dtypes.pipe(lambda x: x[x == 'object']).index\nlabel_mapping = {}\n\nfor c in char_cols:\n    df[c], label_mapping[c] = pd.factorize(df[c])","513378c0":"df","6bb02db7":"label_mapping","0afefbf5":"for n,c in df.items(): \n    df = pd.get_dummies(df, dummy_na=True)\n    df = pd.concat([df], axis=1)","ee6fff7e":"df","48f3f6f5":"df = pd.DataFrame({'A' : list('aabcda'), 'B' : list('bcdaae')})\ndf","9e42d6ee":"labels = df['A'].astype('category').cat.categories.tolist()\nlabels","813ac997":"replace_map_comp = {'A' : {k: v for k,v in zip(labels,list(range(1,len(labels)+1)))}}\nreplace_map_comp","7f55ca38":"df.replace(replace_map_comp, inplace=True)\ndf.head()","2bd0511b":"#df.A.replace(replace_map_comp, inplace=True)\n#df.head()","ba916fb5":"df = catog()\ndf","914b5ecc":"cat_dict = {col: {n: cat for n, cat in enumerate(df[col].astype('category').cat.categories)} \n     for col in df}\n\ncat_dict","d889099f":"enc_dict = {}\nfor key, value in cat_dict.items():\n    enc_dict[key] = dict(map(reversed, value.items()))","f7ce66e5":"cat_dict ","ef67752a":"#dict_a = {'A': {'a': 1, 'b': 2, 'c': 3, 'd': 4}}\n#dict_b = {'B': {0: 'a', 1: 'b', 2: 'c', 3: 'd', 4: 'e'}}","4793937e":"df.replace(enc_dict, inplace=True)\ndf.head()","10d4b0f3":"df = df.replace(np.nan, 'np.nan', regex=True)\ndf","f63828a6":"df = catog()\ndf","3ef7370f":"df.loc[ (df['A'] == 'a') & ( df['B']=='b') ] \n","641ac2bc":"df.loc[df['A'] == 'a', :]","5429d03f":"df.loc[df['A'] == 'a', :].sort_values(by='B')","b6a58ba3":"df.iloc[ : , 1:2 ]","502cffc1":"df1 = pd.DataFrame({'A': ['A0', 'A1', 'A2', 'A3'],\n   ...:                     'B': ['B0', 'B1', 'B2', 'B3'],\n   ...:                     'C': ['C0', 'C1', 'C2', 'C3'],\n   ...:                     'D': ['D0', 'D1', 'D2', 'D3']})\ndf1.set_index('A', inplace=True)\ndf1","fa177c1a":"df2 = pd.DataFrame({'A': ['A3', 'A4', 'A5', 'A6'],\n   ...:                     'B': ['B0', 'B1', 'B2', 'B3'],\n   ...:                     'C': ['C0', 'C1', 'C2', 'C3'],\n   ...:                     'D': ['D0', 'D1', 'D2', 'D3']})\ndf2.set_index('A', inplace=True)\ndf2","3fb82a73":"cc_join = pd.concat([df1, df2], axis=1, join='inner')\ncc_join","8be08217":"df3 = pd.DataFrame({'A': ['A3', 'A3', 'A5', 'A6'],\n   ...:                     'E': ['B0', 'B1', 'B2', 'B3'],\n   ...:                     'F': ['C0', 'C1', 'C2', 'C3'],\n   ...:                     'G': ['D0', 'D1', 'D2', 'D3']})\ndf3.set_index('A', inplace=True)\ndf3","5a1496ba":"cc_merge = df1.merge(df3, on='A')\n\ncc_merge.groupby('A').agg('count')","99a8192e":"cc_merge = df1.join(df3, on='A')\ncc_merge","61eecd01":"import numpy as np\nfrom sklearn.model_selection import StratifiedKFold, KFold\nX = np.array([1, 2, 3, 4])\ny = np.array([0, 0, 1, 1])\n#skf = StratifiedKFold(n_splits=2)\nskf = KFold(n_splits=4)\nskf.get_n_splits(X, y)","a54e168e":"print(skf)  \n#StratifiedKFold(n_splits=3, random_state=None, shuffle=False)\n#for train_index, test_index in skf.split(X, y):\nfor n_fold, (train_index, test_index) in enumerate(skf.split(X, y)):\n    print(\"************************* Training on fold \" + str(n_fold+1) + \" ***********************\")\n    \n    print(\"train_index:\", train_index, \" test_index:\", test_index)\n    X_train = X[train_index]\n    X_test = X[test_index]\n    \n    y_train = y[train_index]\n    y_test = y[test_index]\n    \n    print(\"\\nX_train:\", X_train, \" \\nX_test:\", X_test)\n    print(\"\\ny_train:\", y_train, \" \\ny_test:\", y_test)","dbcf7b1c":"from sklearn.model_selection import TimeSeriesSplit\ntime_split = TimeSeriesSplit(n_splits=5)","0e604064":"from sklearn.model_selection import TimeSeriesSplit\nX = np.array([[1, 2], [3, 4], [1, 2], [3, 4], [1, 2], [3, 4]])\ny = np.array([1, 2, 3, 4, 5, 6])\n\nprint(time_split)  \nTimeSeriesSplit(max_train_size=None, n_splits=5)\nfor train_index, test_index in time_split.split(X):\n    print(\"TRAIN:\", train_index, \"TEST:\", test_index)\n    X_train, X_test = X[train_index], X[test_index]\n    y_train, y_test = y[train_index], y[test_index]\n","8f8ca012":"#from fastai import structured","8134d01a":"df = pd.DataFrame({'col1' : [1, np.nan, 3], 'col2' : ['a', 'b', 'a']})\ndf","fb2816cb":"#structured.train_cats(df)    \n#df","c6bd6351":"#x, y, nas = structured.proc_df(df, 'col1')\n#x","b6ba2bc7":"df = pd.DataFrame([\n        ['1', 16],\n        ['1', 23],\n        ['2', 25],\n        ['2', 34],\n     ['2', 30],\n    ['2', 30],\n    ['2', 30],\n        ['3', 38],\n        ['3', 44],\n    ], columns=['class', 'age'])\n\ndf","9fef6ca8":"df.hist()","a69e7518":"df.hist('age', bins=5)","3c6cdb66":"import seaborn as sns","7b6debae":"sns.boxplot(df['class'], df['age']);","b3a677ef":"import matplotlib.pyplot as plt\n# Set up the matplotlib figure\nf, (ax1, ax2) = plt.subplots(2, 1, figsize=(7, 5), sharex=True)\n\nsns.barplot(x=df['class'], y=df['age'], palette=\"rocket\", ax=ax1)\nsns.barplot(x=df['class'], y=df['age'], palette=\"rocket\", ax=ax2)","7ba57088":"df.age.quantile(0.95)","35a4d0d6":"df = pd.DataFrame({'A': [1, 2, 3], \n                   'B': [1, 1, 1],\n                   'C': [1, 2, 1]})\ndf.head()","ab9f078a":"df.nunique(axis=0) #row wise","1c2b2288":"df[['A','B']]","85be842a":"df[['A','B']].nunique(axis=1) #column wise","f4e3d179":"df.nunique(axis=1) #column wise","2bc0f36f":"np.log(df.A.values)","8f9b52cb":"df = pd.DataFrame([[1, 'a'], [2, 'b']],columns=['fn','label'])\ndf.head()","c2c47cc4":"df.to_csv('train_labels_as_strings.csv', index=False)","eda0631f":"!cat train_labels_as_strings.csv","455457bd":"df = pd.DataFrame([[1, 'a'], [2, 'b']],columns=['fn','label'])\ndf.head()","f05fb1eb":"df.to_feather('feather.ftr');\n\nreadFrame = pd.read_feather('feather.ftr');\n\nreadFrame","1033677f":"# Text Encoding Categorical ","92e45be6":"https:\/\/www.datacamp.com\/community\/tutorials\/categorical-data","fcee822f":"# Regression","e3ceb827":"## Statistics","feaada94":"# Merging","738348b0":"# Groupby","bd169e03":"https:\/\/pandas.pydata.org\/pandas-docs\/stable\/10min.html","8c575ea4":"# Fast AI","132cb97e":"# Feather","840d41aa":"**# .loc","63aecb97":"https:\/\/www.geeksforgeeks.org\/python-pandas-dataframe-rolling\/","ff67d6e2":"## Index","5936bdae":"# Group By","e08191f8":"https:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.DataFrame.loc.html","ee84cca8":"## Graphs","eb940aa1":"### Save to csv","0f91d14e":"# References\n\n1. https:\/\/medium.com\/@msalmon00\/helpful-python-code-snippets-for-data-exploration-in-pandas-b7c5aed5ecb9\n1. https:\/\/towardsdatascience.com\/be-a-more-efficient-data-scientist-today-master-pandas-with-this-guide-ea362d27386","034fecea":"# Automated Text Encoding Categorical ","eb72fb0d":"# Sum by column","dd398561":"## Time Series\nhttps:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.model_selection.TimeSeriesSplit.html","3b50cf52":"# Concat","11d1d8c1":"# .iloc","be3c6e54":"https:\/\/pandas.pydata.org\/pandas-docs\/stable\/merging.html","7783fac3":"# Rolling Sum & Mean","43586483":"# KFold\nhttp:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.model_selection.StratifiedKFold.html"}}