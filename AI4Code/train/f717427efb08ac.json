{"cell_type":{"937df0df":"code","218c16ef":"code","49f7d89d":"code","5cafe99d":"code","ca27e71c":"code","7caf21fd":"code","e66d6e11":"code","0d2a5dcd":"code","f8ad4d39":"code","70e5454c":"code","c5211e93":"code","c3fae7e8":"code","121625da":"code","29212db9":"code","dd471032":"code","b77867c9":"code","3a46c1e6":"code","e8c16392":"code","a6c5d7d3":"code","be3f9fb0":"code","11dc9d08":"code","69d5fab0":"code","fbd4fe80":"code","e8973f3b":"code","aee94c7b":"code","5b2626d2":"markdown","6cb471b5":"markdown","96d49b79":"markdown","751cb13c":"markdown","66d5cc81":"markdown","7235db99":"markdown","1e38d164":"markdown","9c32ad9e":"markdown","cfdf41d4":"markdown","e520720c":"markdown","b4bb61b2":"markdown","67762c3c":"markdown","60d8db54":"markdown","960ebe0e":"markdown","259b90f9":"markdown","8fcbac9e":"markdown","0d778165":"markdown","00240b75":"markdown","037e849b":"markdown","e16eba07":"markdown"},"source":{"937df0df":"# library for handling multiple csv file\nimport glob\n\n# library for data manupulation\nimport pandas as pd\n\n# library for mathematical opration\nimport numpy as np\n\n#libraries for data visulization\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.graph_objs as go\nimport missingno as mn\n%matplotlib inline","218c16ef":"#name of all csv files are stored in 'all_files' variable\n#all_files = [i for i in glob.glob('*.{}'.format('csv'))]\n#all_files","49f7d89d":"#combine all files in the list\n#combined_csv = pd.concat([pd.read_csv(f) for f in all_files ])\n\n#export to csv\n#combined_csv.to_csv( \"stock_data.csv\", index=False, encoding='utf-8-sig')","5cafe99d":"# Here, I used Alphabet Inc.stock.csv\ndata = pd.read_csv('..\/input\/mncs-stock-dataset-for-the-last-20-years\/Alphabet Inc.stock.csv')\ndata.head()","ca27e71c":"print('Dataframe having {} features and {} entries'.format(data.shape[1],data.shape[0]))","7caf21fd":"data.info()","e66d6e11":"print('Features name in our dataset : ',list(data.columns[0:]))","0d2a5dcd":"date_format = '%Y-%m-%d'\ndata['Date'] = pd.to_datetime(data['Date'],format=date_format)","f8ad4d39":"data.info()","70e5454c":"# find count of nall values\ndata.isnull().sum()","c5211e93":"#find percentage of null values\ndata.isnull().mean()","c3fae7e8":"mn.matrix(data,color=(.3, .7, .9))\nplt.xlabel(\"Feature\",fontsize=25,color='#0099cc')\nplt.ylabel(\"Count\",fontsize=25,color='#0099cc')\nplt.title(\" Cheking Null values in each feature Visully\",fontsize=30,color='#007399')","121625da":"from pandas_profiling import ProfileReport","29212db9":"auto_eda = ProfileReport(data, title=\"Performing EDA on 20 year's MNC's stock dataset\" ,explorative=True)","dd471032":"ProfileReport(data)","b77867c9":"# Shifts is a day in which you want to predict price of stock\nshifts = [1,5,10]\n\n#perform training and testing data\ntrain_per = 0.75 #70%\n\n#plotting dimention\nw = 16 #d\nh = 6 #height","3a46c1e6":"#create lag function\n\n#which is help us to move close\n\ndef createlags(data,lag_size):\n    shift = -lag_size\n    data['Close_lag']=data['Close'].shift(shift)\n    return data,shift","e8c16392":"#function to split data in training and testing\ndef SplitData(data,train_per,shift):\n    train_pt = int(len(data)*train_per)\n    \n    train_data = data.drop(['Company'],axis=1).iloc[:train_pt,:]\n    test_data = data.drop(['Company'],axis=1).iloc[train_pt:,:]\n    \n    x_train = train_data.iloc[:shift,1:-1]\n    y_train = train_data['Close_lag'][:shift]\n    x_test = test_data.iloc[:shift,1:-1]\n    y_test = test_data['Close'][:shift]\n    \n    print(len(x_train),len(y_train),len(x_test),len(y_test)) \n    return x_train,y_train,x_test,y_test,train_data,test_data\n\n","a6c5d7d3":"# Making visulization helper function\ndef visulization_plotly(train_data,test_data,pred,ticker,w,h,shift_days,name):\n    #this is parameters for scatter plot\n    plot1 = go.Scatter(x = train_data.index,y = train_data['Close'], name = 'Actual Training Data') # train data\n    plot2 = go.Scatter(x = test_data.index,y = test_data['Close'], name = 'Actual Testing Data') # test Data\n    plot3 = go.Scatter(x = test_data.index,y = pred, name = 'Predicted Data') # Prediction    \n    \n    # this line set parameters\n    line = { 'data':[plot1,plot2,plot3],\n            'layout':\n                {\n                    'xaxis':{'title':'Date'},\n                    'yaxis':{'title':'$'},\n                    'title' : name + ' - ' + ticker + ' - ' +str(shift_days)\n                }          \n            }\n    fig = go.Figure(line)\n    fig.show()","be3f9fb0":"# import libraries for model building\n\nfrom sklearn.linear_model import LinearRegression\n\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.neural_network import MLPRegressor","11dc9d08":"# linear regression\ndef LinearReg_fun(x_train,y_train,x_test,y_test):\n    print(\"Linear Regression \")\n    \n    #regression model\n    lr = LinearRegression()\n    print(\"object created\")\n    \n    #fit model\n    lr.fit(x_train,y_train)\n    print(\"model fit\")\n    \n    #predict\n    lr_pred = lr.predict(x_test)\n    print(\"value predicted\")\n    \n    #calculate MSE\n    lr_mse = mean_squared_error(y_test,lr_pred)\n    \n    #calculate R2\n    lr_r2 = lr.score(x_test,y_test)\n    \n    print('MSE is : {} \\n R2 is : {}'.format(lr_mse,lr_r2))\n    return lr_pred","69d5fab0":"# ANN regression\ndef ANN_fun(x_train,y_train,x_test,y_test):\n    print(\"ANN Regression\")\n    \n    #perfor standardscaler\n    scaler = StandardScaler()\n    scaler.fit(x_train)\n    x_train_scaled = scaler.transform(x_train)\n    x_test_scaled = scaler.transform(x_test)\n    \n    #regression model\n    mlp = MLPRegressor(activation='identity',random_state=1,max_iter=1000)\n    \n    #fit model\n    mlp.fit(x_train_scaled,y_train)\n    \n    #predict\n    mlp_pred = mlp.predict(x_test_scaled)\n    \n    #calculate MSE\n    mlp_mse = mean_squared_error(y_test,lr_pred)\n    \n    #calculate R2\n    mlp_r2 = mlp.score(x_test_scaled,y_test)\n    \n    print('MSE is : {} \\n R2 is : {}'.format(mlp_mse,mlp_r2))\n    return mlp_pred","fbd4fe80":"# Call function\nticker = 'GOOG'\nfor j in shifts:\n    print(str(j)+' -days out prediction \\n -----------------------------------')\n    \n    # create lags\n    data_lag,shift = createlags(data,j)\n    \n    #split the data\n    x_train,y_train,x_test,y_test,train_data,test_data = SplitData(data_lag,train_per,shift)\n    print(\"Preprocessing is done\")\n    \n    #Linear Regression\n    lr_pred = LinearReg_fun(x_train,y_train,x_test,y_test)\n    visulization_plotly(train_data,test_data,lr_pred,ticker,w,h,j,'Linear Regression')\n    \n    #ANN Regression\n    mlp_pred = ANN_fun(x_train,y_train,x_test,y_test)\n    visulization_plotly(train_data,test_data,lr_pred,ticker,w,h,j,'ANN Regression')","e8973f3b":"def calprofit(test_data):\n    pd.set_option('mode.chained_assignment',None)\n    test_data['pred'] = np.nan\n    test_data['pred'].iloc[:-j] = lr_pred\n    \n    test_data['Change'] = test_data['Close_lag']-test_data['Close']\n    test_data['Change_pred'] = test_data['Close_lag'] - test_data['Close']\n    test_data['Made_Money?'] = np.where(test_data['Change_pred']\/test_data['Change']>0,1,-1)\n    test_data['Profit'] = np.abs(test_data['Change_pred'])*test_data['Made_Money?']\n    \n    profit = test_data['Profit'].sum()\n    days = len(test_data['Made_Money?']==1)\n    \n    return \"- Would have made $ {}, Percentage of days we made money : {}\".format(profit,days)","aee94c7b":"calprofit(test_data)","5b2626d2":"<h2 style='color:#c61aff'> \n- Understand Data","6cb471b5":"<h1 align= 'center' style='color:#ff8c1a'> Predicting the price of the stock and Calculating profit using linear Regression \ud83d\udcc8 \ud83d\udcc9 \ud83d\udcc8 \ud83d\udcc9 <\/h1>\n\n<h3 style='color:#9999ff'> Index: <\/h3>\n\n-   import required libraries  \n    \n    - Library for data manupulation\n    - Library for Linear Algebra\n    - libraries for Data Visulization\n\n\n-   Getting \/ Collecting Data\n    \n    - load dataset\/csv file \n \n\n-   Understanding of Data\n    \n    - Find shape of dataset\n    - Collecting information about each feature\n    - Getting columns \/ feature name\n \n \n-    Ensuring columns are the right type\n    - Convert Data feature type to datetime\n\n\n\n-    Cheking null values\n    - Find count of null values\n    - Find Percentage of null values\n    - Check Visually\n    \n    \n    \n-    Perform EDA using pandas_profiling    \n    - Overview\n    - Variables\n    - Interactions\n    - Correlations\n    - Missing values\n    - Sample\n    \n    \n-   Perform Prediction \n     - Define model parameters\n     - Create lag function\n     - Splitting dataset into train and test\n     - Data visualization using plotly\n\n\n- Model Building\n    - Importing required libraries\n    - Apply Linear Regression\n        - Create Object \n        - Fit model\n        - Prediction\n        - Calculate MSE\n        - Calculate R2\n        - print \n    - Apply ANN Regression\n        - Create Object \n        - Perfor StandardScaler\n        - Fit model\n        - Prediction\n        - Calculate MSE\n        - Calculate R2\n        - print \n        \n        \n- Function Calling\n\n\n- Calculating Profit\n\n\n- Thank you!","96d49b79":"Now,Our Data is in perfect format","751cb13c":"*Collecting information about each feature*","66d5cc81":"<h2 style='color:#c61aff'>- Model Building","7235db99":"*create function of each*","1e38d164":"<h1 align='center' style='color:#80ff80'>  Thank you !","9c32ad9e":"*Find shape of dataset*","cfdf41d4":"<h2 style='color:#c61aff'>- Getting data","e520720c":"- From above we can say that :\n    - Dataset having 8 feature and 55742 entries.\n    - ['Date','Company'] this features are object type.\n    - ['High', 'Low', 'Open', 'Close', 'Volume', 'Adj Close'] this features are float type.\n    - There is no null value are present in our dataset.","b4bb61b2":"*Features name in our dataset*","67762c3c":"*In dataset Data feature is of object type insted of datatime so we chnage it to datatime formate*","60d8db54":"<h2 style='color:#c61aff'> - Perform Prediction","960ebe0e":"<h2 style='color:#c61aff'>- Function calling","259b90f9":"#### Define model parameters","8fcbac9e":"<h2 style='color:#c61aff'>- Import required libraries","0d778165":"<h2 style='color:#c61aff'>- Perform EDA using pandas_profiling","00240b75":"<h2 style='color:#c61aff'>  \n    - Calculting Profit","037e849b":"<h2 style='color:#c61aff'>- Check Null Values","e16eba07":"<h2 style='color:#c61aff'>- Ensuring columns are the right type"}}