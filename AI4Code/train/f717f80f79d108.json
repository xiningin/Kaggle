{"cell_type":{"d5950eca":"code","b48583c1":"code","fd555471":"code","00ea6f92":"code","1de3a6b3":"code","2aacee93":"code","6106a5a8":"code","3c370f6b":"code","b684b963":"code","0980cccc":"code","ddd5092d":"code","36d3071e":"code","6a24ba59":"code","dbf46c0c":"code","9382e306":"code","9818852a":"code","fec2dce3":"code","ac329f62":"code","066b1873":"code","419ba05d":"code","88384783":"code","34ab276c":"code","7ffb5a8a":"code","5fe3d913":"code","d8cb6c97":"code","b2bad960":"code","03c67bcb":"code","8b4d1923":"code","f1e2d38c":"code","ae1f8268":"code","ff9ea004":"code","abcbe9b5":"code","c5766fb6":"code","40843ff1":"code","2d884680":"code","76968c33":"code","c3d8da87":"code","6f62d22d":"code","df860ba2":"code","e6722d9a":"code","874f63f0":"code","46601119":"code","14d89738":"markdown","5be6585d":"markdown","144d35e8":"markdown","7a1ff6d4":"markdown","a9049d55":"markdown","2a361c68":"markdown","e19861b4":"markdown","f1b581ba":"markdown","34b9413b":"markdown","303ad453":"markdown","ec8c2fe1":"markdown","cfc0740d":"markdown","d6971a67":"markdown","0b376417":"markdown","974854fb":"markdown","150f5e89":"markdown","0aece046":"markdown","50ded09d":"markdown","3b1e10f5":"markdown","66399c31":"markdown","5f6541d3":"markdown","7fd10ac8":"markdown","62ceb383":"markdown","675b46e3":"markdown","715a7577":"markdown","5db1c4f1":"markdown","4b604f4e":"markdown","8a9c1a70":"markdown","ad96ec19":"markdown","d5bb8bd9":"markdown","9e83c26f":"markdown","511f5c6b":"markdown","8cb7046c":"markdown","89fa4ec4":"markdown","1b8e2aef":"markdown","821f0e4e":"markdown","b15b1d65":"markdown","c51e651e":"markdown","5161d27c":"markdown","a505d570":"markdown"},"source":{"d5950eca":"import numpy as np\nimport pandas as pd\nimport math\n\nimport statsmodels.api as sm\nimport statsmodels.tsa.api as smt\nimport statsmodels.formula.api as smf\nfrom statsmodels.tsa.stattools import adfuller\nfrom sklearn.metrics import mean_squared_error\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport itertools\nimport warnings\nwarnings.filterwarnings('ignore')","b48583c1":"filename = '..\/input\/pune_1965_to_2002.csv'","fd555471":"rainfall_data_matrix = pd.read_csv(filename)\nrainfall_data_matrix.head()","00ea6f92":"rainfall_data_matrix.set_index('Year', inplace=True)\nrainfall_data_matrix.head()","1de3a6b3":"rainfall_data_matrix = rainfall_data_matrix.transpose()\nrainfall_data_matrix","2aacee93":"dates = pd.date_range(start='1965-01', freq='MS', periods=len(rainfall_data_matrix.columns)*12)\ndates","6106a5a8":"plt.figure(figsize=(13,7))\nplt.plot(rainfall_data_matrix)\nplt.xlabel('Year')\nplt.ylabel('Precipitation(mm)')\nplt.title('Month vs Precipitation across all years')","3c370f6b":"plt.figure(figsize=(10,5))\nplt.boxplot(rainfall_data_matrix)\nplt.xlabel('Month')\nplt.ylabel('Precipitation(mm)')\nplt.title('Month vs Precipitation across all years')","b684b963":"rainfall_data_matrix_np = rainfall_data_matrix.transpose().as_matrix()\n\nshape = rainfall_data_matrix_np.shape\nrainfall_data_matrix_np = rainfall_data_matrix_np.reshape((shape[0] * shape[1], 1))","0980cccc":"rainfall_data = pd.DataFrame({'Precipitation': rainfall_data_matrix_np[:,0]})\nrainfall_data.set_index(dates, inplace=True)\n\ntest_rainfall_data = rainfall_data.ix['1995': '2002']\nrainfall_data = rainfall_data.ix[: '1994']\nrainfall_data.head()","ddd5092d":"plt.figure(figsize=(20,5))\nplt.plot(rainfall_data, color='blue')\nplt.xlabel('Year')\nplt.ylabel('Precipitation(mm)')\nplt.title('Precipitation in mm')","36d3071e":"plt.figure(figsize=(20,5))\nplt.plot(rainfall_data.ix[:60], color='blue')\nplt.xlabel('Year')\nplt.ylabel('Precipitation(mm)')\nplt.title('Precipitation in mm')","6a24ba59":"decomposition = sm.tsa.seasonal_decompose(rainfall_data, model='additive')","dbf46c0c":"fig = decomposition.plot()\nfig.set_figwidth(12)\nfig.set_figheight(8)\nfig.suptitle('Decomposition of time series')\nplt.show()","9382e306":"plt.figure(figsize=(20,5))\nfour_months_moving_average = rainfall_data.rolling(window=4).mean()\nplt.plot(rainfall_data, color='blue', label='Original')\nplt.plot(four_months_moving_average, color='red', label='Rolling Mean')\nplt.legend(loc='best')\nplt.title('4 Months Moving Average')","9818852a":"plt.figure(figsize=(20,5))\nsix_months_moving_average = rainfall_data.rolling(window=6).mean()\nplt.plot(rainfall_data, color='blue', label='Original')\nplt.plot(six_months_moving_average, color='red', label='Rolling Mean')\nplt.legend(loc='best')\nplt.title('6 Months Moving Average')","fec2dce3":"plt.figure(figsize=(20,5))\neight_months_moving_average = rainfall_data.rolling(window=8).mean()\nplt.plot(rainfall_data, color='blue', label='Original')\nplt.plot(eight_months_moving_average, color='red', label='Rolling Mean')\nplt.legend(loc='best')\nplt.title('8 Months Moving Average')","ac329f62":"plt.figure(figsize=(20,5))\ntwelve_months_moving_average = rainfall_data.rolling(window=12).mean()\nplt.plot(rainfall_data, color='blue', label='Original')\nplt.plot(twelve_months_moving_average, color='red', label='Rolling Mean')\nplt.legend(loc='best')\nplt.title('12 Months Moving Average')","066b1873":"def test_stationary(timeseries, window=12):\n    \n    # Rolling statistics\n    movingAverage = timeseries.rolling(window=window).mean()\n    movingSTD = timeseries.rolling(window=window).std()\n    \n    # Plot rolling statistics\n    plt.figure(figsize=(20,5))\n    plt.plot(timeseries, color='blue', label='Original')\n    plt.plot(movingAverage, color='red', label='Rolling Mean')\n    plt.plot(movingSTD, color='black', label='Rolling Std')\n    plt.legend(loc='best')\n    plt.title('Rolling Mean & Standard Deviation\\n')\n    plt.show(block=False)\n    \n    # Dickey Fuller test\n    print('Results of Dickey Fuller Test:\\n')\n    dftest = adfuller(timeseries['Precipitation'], autolag='AIC')\n    dfoutput = pd.Series(dftest[0:4], index=['Test Statistic', 'p-value', 'No. of Lags used', 'Number of observations used'])\n    for key,value in dftest[4].items():\n        dfoutput['Critical Value (%s)' %key] = value\n    print(dfoutput)","419ba05d":"test_stationary(rainfall_data, window=12)","88384783":"fig, axes = plt.subplots(1, 2, sharey=False, sharex=False)\nfig.set_figwidth(12)\nfig.set_figheight(4)\nsmt.graphics.plot_acf(rainfall_data, lags=30, ax=axes[0], alpha=0.5)\nsmt.graphics.plot_pacf(rainfall_data, lags=30, ax=axes[1], alpha=0.5)\nplt.tight_layout()","34ab276c":"diff_12 = rainfall_data.diff(periods=12)\ndiff_12.dropna(inplace=True)\n\nplt.plot(diff_12)","7ffb5a8a":"test_stationary(diff_12)","5fe3d913":"# Define the p, d and q parameters to take any value between 0 and 2\np = d = q = range(0, 2)\n\n# Generate all different combinations of p, d and q triplets\npdq = list(itertools.product(p, d, q))\n\n# Generate all different combinations of seasonal p, q and q triplets\nseasonal_pdq = [(x[0], x[1], x[2], 12) for x in list(itertools.product(p, d, q))]","d8cb6c97":"pdq","b2bad960":"seasonal_pdq","03c67bcb":"best_aic = np.inf\nbest_pdq = None\nbest_seasonal_pdq = None\ntemp_model = None\n\nfor param in pdq:\n    for param_seasonal in seasonal_pdq:        \n        try:\n            temp_model = sm.tsa.statespace.SARIMAX(rainfall_data,\n                                             order = param,\n                                             seasonal_order = param_seasonal,\n                                             enforce_stationarity=True,\n                                             enforce_invertibility=True)\n            results = temp_model.fit()\n            if results.aic < best_aic:\n                best_aic = results.aic\n                best_pdq = param\n                best_seasonal_pdq = param_seasonal\n        except:\n            continue\n\nprint(\"Best SARIMAX{}x{}12 model - AIC:{}\".format(best_pdq, best_seasonal_pdq, best_aic))","8b4d1923":"best_pdq = (0, 1, 1)\nbest_seasonal_pdq = (0, 1, 1, 12)","f1e2d38c":"best_model = sm.tsa.statespace.SARIMAX(rainfall_data,\n                                      order=best_pdq,\n                                      seasonal_order=best_seasonal_pdq,\n                                      enforce_stationarity=True,\n                                      enforce_invertibility=True)\nbest_results = best_model.fit()","ae1f8268":"print(best_results.summary().tables[0])","ff9ea004":"pd.to_datetime('1990-01-01')","abcbe9b5":"pred_dynamic = best_results.get_prediction(start=pd.to_datetime('1990-01-01'), dynamic=True, full_results=True)\npred_dynamic_ci = pred_dynamic.conf_int()","c5766fb6":"rainfall_predicted = pred_dynamic.predicted_mean\nrainfall_truth = rainfall_data['1990':].Precipitation","40843ff1":"mse = ((rainfall_predicted - rainfall_truth) ** 2).mean()\nprint('The Mean Squared Error of our predictions is {}'.format(round(mse, 4)))","2d884680":"rainfall_data.index[-1]","76968c33":"# Plot the actual values.\naxis_plt = rainfall_data['1985':].plot(label='Observed', figsize=(10, 6))\n\n# Plot the predicted values.\npred_dynamic.predicted_mean.plot(ax=axis_plt, label='Dynamic Forecast')\n\n# Plot confidence values and fill it with some colour.\naxis_plt.fill_between(pred_dynamic_ci.index, pred_dynamic_ci.iloc[:, 0], pred_dynamic_ci.iloc[:, 1], color='k', alpha=0.1)\naxis_plt.fill_betweenx(axis_plt.get_ylim(), pd.to_datetime('1990'), rainfall_data.index[-1], alpha=0.1, zorder=-1)\n\n# Set labels.\naxis_plt.set_xlabel('Years')\naxis_plt.set_ylabel('Precipitation')\n\n# Put legend on the plot at the best place it fits.\nplt.legend(loc='best')","c3d8da87":"# Get forecast 96 steps (8 years) ahead in future\nn_steps = 96\npred_uc_95 = best_results.get_forecast(steps=n_steps, alpha=0.05) # alpha=0.05 95% CI\n\n# Get confidence intervals 95% of the forecasts\npred_ci_95 = pred_uc_95.conf_int()","6f62d22d":"index = pd.date_range(rainfall_data.index[-1] + 1, periods=n_steps, freq='MS')\nforecast_data = pd.DataFrame(np.column_stack([pred_uc_95.predicted_mean, pred_ci_95]), \n                     index=index, columns=['forecast', 'lower_ci_95', 'upper_ci_95'])\n\nforecast_data.head()","df860ba2":"axis_plt = rainfall_data['1984':].plot(label='Observed', figsize=(15, 6))\n\ntest_rainfall_data.Precipitation.plot(ax=axis_plt, label='Actual values')\nforecast_data['forecast'].plot(ax=axis_plt, label='Forecast', alpha=0.7, color='r')\n\naxis_plt.fill_between(forecast_data.index, forecast_data['lower_ci_95'], forecast_data['upper_ci_95'], color='k', alpha=.25)\n\naxis_plt.set_xlabel('Years')\naxis_plt.set_ylabel('Precipitation')\nplt.legend(loc='best')","e6722d9a":"axis_plt = test_rainfall_data['1995':].plot(label='Actual values', figsize=(20, 5), color='orange')\nforecast_data['forecast'].plot(ax=axis_plt, label='Forecast', alpha=0.7, color='r')\n\naxis_plt.set_xlabel('Years')\naxis_plt.set_ylabel('Precipitation')\nplt.legend(loc='best')","874f63f0":"mse = math.sqrt(((test_rainfall_data['1995-01-01':].Precipitation - forecast_data['forecast']) ** 2).mean())\nprint('The Mean Squared Error of our forecasts is {}'.format(round(mse, 4)))","46601119":"## MAPE","14d89738":"### Parameters - p, d, q, P, D, Q\n- Let's try all possible parameters and choose the best set of parameters that gives less AIC score.","5be6585d":"### Visualize data","144d35e8":"## <center>Algorithm: Auto Regressive Integrated Moving Average model(ARIMA)<\/center>","7a1ff6d4":"### Data\n- Downloaded from http:\/\/www.indiawaterportal.org\/met_data\/\n- State: Maharashtra\n- District: PUNE\n- Data type: Precipitation\n- Data Range: Monthly mean precipitation for all the years from 1972 to 2002","a9049d55":"### Transpose data for easy visualiztion","2a361c68":"### Next steps:\n- As time series is stationary, differencing is not required.\n- Now, we have to find p and q values by plotting ACF and PACF plots.","e19861b4":"### Analysis:\n- After fitting the data with different combination of models, we got the best parameters as following:\n    - p = 0, d = 1, q = 1\n    - P = 0, D = 1, Q = 1\n    - s = 12","f1b581ba":"### How to formally check stationarity?\n- There are two tests to check whether a time series is stationary or not.\n    - **Rolling statistics (Visual test)** - We can plot the moving average or moving variance and see if it varies with time. By moving average\/variance we mean that at any instant 't', we'll take the average\/variance of the last year, i.e. last 12 months. But again this is more of a visual technique.\n    - **Dickey Fuller test** - This is one of the statistical tests for checking stationarity. Here the null hypothesis is that the TS is non-stationary. The test results comprise of a **Test Statistic** and some **Critical Values** for difference confidence levels. If the \u2018Test Statistic\u2019 is less than the \u2018Critical Value\u2019, we can reject the null hypothesis and say that the series is stationary.\n\n**Let's write a function to plot and check both tests at a time.**","34b9413b":"### Convert matrix into Series","303ad453":"### Moving Average - Find window or seasonality time period \"s\"\n\n**Moving Average** - The idea with moving average is to remove all the zigzag motion from the time series to produce a steady trend through averaging adjacent values of a time period.\n\nNow, let\u2019s try to remove zigzag motion from our time series using moving average. We will take moving average of different time periods i.e. 4,6,8, and 12 months as shown below. Here, moving average is shown in red and actual series in blue.","ec8c2fe1":"### Use the best parameters and build a model","cfc0740d":"### Filename","d6971a67":"### Genearete dates from 1965-01(January 1965) to 2002-12(December 2002)","0b376417":"# <center>Time Series Analysis on Pune precipitation data from 1965 to 2002.<\/center>","974854fb":"### Stationarity:\n- A time series is said to be stationary if its statistical properties such as mean, variance remain constant over time.\n- The basic assumption before applying different models like ARIMA is that the time series should be stationary.","150f5e89":"### Apply Differencing D = 1","0aece046":"### Visuaization of true and predicted values","50ded09d":"### Visualize the whole data","3b1e10f5":"### Get predictions ","66399c31":"### Set 'Year' as index","5f6541d3":"### Mean square error of the forecasts","7fd10ac8":"### 12-Months Moving Average","62ceb383":"### Box plot\n- Box plot helps us to understand the data better.","675b46e3":"### Extract the predicted and true values of our time series","715a7577":"### 4- Months Moving Average","5db1c4f1":"### To decipher underlying patterns we must decompose the series.","4b604f4e":"### Forecast\n- Predict Precipitation for next 7 years.","8a9c1a70":"### Visualize data(zoomed version) - 5 years(1972 - 1977)","ad96ec19":"### Plot the forecast along with confidence band","d5bb8bd9":"### 8-Months Moving Average","9e83c26f":"### Insights from the plot\n- The rainfall in the months November, December, January, February, March and April is very less.\n- The rainfall in the months June, July and August are high compared to rainfall in other months of the year. \n- We can observe the seasonality effect.","511f5c6b":"### Import libraries","8cb7046c":"### Split the whole data into train(1965 - 1995) and test data(1995 - 2002)","89fa4ec4":"- If there is seasonality, it will be better if we try all combinations of different parameters and choose the best set ofparameters that gives less AIC score.","1b8e2aef":"### ACF and PACF plots","821f0e4e":"### 6-Months Moving Average","b15b1d65":"### Compute the mean square error","c51e651e":"- As we could see, there is seasonality effect.","5161d27c":"### Analysis\n- As we could see, p-value is very less. Also, \"Test statistic\" is less compared to \"Critical Value\".\n- Therefore, Null hypothesis is rejected, which means, Time series is stationary.","a505d570":"### Analysis of above plots\n- As we could see in the above plots, 12-month moving average could produce a wrinkle free curve when compared to other moving averages.\n- Therefore, s=12.\n\n- This is to find the period of seasonality."}}