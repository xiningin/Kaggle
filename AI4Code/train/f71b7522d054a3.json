{"cell_type":{"2975d2c1":"code","0df55782":"code","7e82746d":"code","4caf7c45":"code","57eb477f":"code","c5e3c20d":"code","e0153f20":"code","d86945a9":"code","6f0c3280":"code","9489fc07":"code","42cb4e98":"code","6143531b":"code","7d25c82a":"code","4e56c424":"code","b10bb603":"code","21fdec25":"code","1033eac1":"code","c06cf7e4":"markdown","0a01e07e":"markdown","b686b206":"markdown","e7ef634e":"markdown","88222e14":"markdown","f405b1a7":"markdown","b3eb5edf":"markdown","65dfedeb":"markdown","2c424aeb":"markdown","506875b6":"markdown","d98b2c89":"markdown","8f598f64":"markdown"},"source":{"2975d2c1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nfrom datetime import date, timedelta\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0df55782":"df_pgen1 = pd.read_csv('..\/input\/solar-power-generation-data\/Plant_1_Generation_Data.csv')\ndf_pgen2 = pd.read_csv('..\/input\/solar-power-generation-data\/Plant_1_Weather_Sensor_Data.csv')\ndf_pgen3 = pd.read_csv('..\/input\/solar-power-generation-data\/Plant_2_Generation_Data.csv')\ndf_pgen4 = pd.read_csv('..\/input\/solar-power-generation-data\/Plant_2_Weather_Sensor_Data.csv')\ndf_pgen1['DATE_TIME'] = pd.to_datetime(df_pgen1['DATE_TIME'], format = '%d-%m-%Y %H:%M')\ndf_pgen1['DATE'] = df_pgen1['DATE_TIME'].apply(lambda x:x.date())\ndf_pgen1['TIME'] = df_pgen1['DATE_TIME'].apply(lambda x:x.time())\ndf_pgen1['DATE'] = pd.to_datetime(df_pgen1['DATE'],format = '%Y-%m-%d')\ndf_pgen1['HOUR'] = pd.to_datetime(df_pgen1['TIME'],format='%H:%M:%S').dt.hour\ndf_pgen1['MINUTES'] = pd.to_datetime(df_pgen1['TIME'],format='%H:%M:%S').dt.minute\ndf_pgen2['DATE_TIME'] = pd.to_datetime(df_pgen2['DATE_TIME'], format = '%Y-%m-%d %H:%M:%S')\ndf_pgen2['DATE'] = df_pgen2['DATE_TIME'].apply(lambda x:x.date())\ndf_pgen2['TIME'] = df_pgen2['DATE_TIME'].apply(lambda x:x.time())\ndf_pgen2['DATE'] = pd.to_datetime(df_pgen2['DATE'],format = '%Y-%m-%d')\ndf_pgen2['HOUR'] = pd.to_datetime(df_pgen2['TIME'],format='%H:%M:%S').dt.hour\ndf_pgen2['MINUTES'] = pd.to_datetime(df_pgen2['TIME'],format='%H:%M:%S').dt.minute\ndf_pgen3['DATE_TIME'] = pd.to_datetime(df_pgen3['DATE_TIME'], format = '%Y-%m-%d %H:%M:%S')\ndf_pgen3['DATE'] = df_pgen3['DATE_TIME'].apply(lambda x:x.date())\ndf_pgen3['TIME'] = df_pgen3['DATE_TIME'].apply(lambda x:x.time())\ndf_pgen3['DATE'] = pd.to_datetime(df_pgen3['DATE'],format = '%Y-%m-%d')\ndf_pgen3['HOUR'] = pd.to_datetime(df_pgen3['TIME'],format='%H:%M:%S').dt.hour\ndf_pgen3['MINUTES'] = pd.to_datetime(df_pgen3['TIME'],format='%H:%M:%S').dt.minute\ndf_pgen4['DATE_TIME'] = pd.to_datetime(df_pgen4['DATE_TIME'], format = '%Y-%m-%d %H:%M:%S')\ndf_pgen4['DATE'] = df_pgen4['DATE_TIME'].apply(lambda x:x.date())\ndf_pgen4['TIME'] = df_pgen4['DATE_TIME'].apply(lambda x:x.time())\ndf_pgen4['DATE'] = pd.to_datetime(df_pgen4['DATE'],format = '%Y-%m-%d')\ndf_pgen4['HOUR'] = pd.to_datetime(df_pgen4['TIME'],format='%H:%M:%S').dt.hour\ndf_pgen4['MINUTES'] = pd.to_datetime(df_pgen4['TIME'],format='%H:%M:%S').dt.minute\nprint(len(df_pgen1['SOURCE_KEY'].unique()))\nprint(len(df_pgen3['SOURCE_KEY'].unique()))","7e82746d":"#Exploring Data \ndf_pgen1['DC_POWER'].mean()\ndf_pgen1[df_pgen1['SOURCE_KEY'] == 'wCURE6d3bPkepu2']['DC_POWER'].mean()\ndf_pgen1.head()\ndf_pgen1.tail()\ndf_pgen1.value_counts()\ndf_pgen1['DATE_TIME'].value_counts()\ndf_pgen1.describe()\n\n\n","4caf7c45":"#Mean Task1 Subtask 1\n\nprint(\"Mean of Daily Yield of Plant 1:\", df_pgen1['DAILY_YIELD'].mean())\nprint(\"Mean of Daily Yield of Plant 2:\", df_pgen3['DAILY_YIELD'].mean())\ntsum = df_pgen1['DAILY_YIELD'].sum()+df_pgen3['DAILY_YIELD'].sum()\n#type(tsum)\ntlen = len(df_pgen3['SOURCE_KEY'])+len(df_pgen1['SOURCE_KEY'])\n#type(tlen)\ntmean = float(tsum)\/float(tlen)\nprint(\"Mean of Daily Yield of Plant 1 and Plant 2:\", tmean )\n","57eb477f":"#Irradiation Task 1 Subatask 2\nprint(\"Plant 1:\")\nstart_date = date(2020, 5, 15)\nend_date = date(2020, 6, 17)\ndelta = timedelta(days=1)\nprint(\"Date       :  Total Irradiation\")\ndf_pgen2['IRRADIATION'][df_pgen2['DATE']=='start_date'].sum()\nwhile start_date <= end_date:\n    print (str(start_date),\":\",df_pgen2['IRRADIATION'][df_pgen2['DATE']==str(start_date)].sum())\n    start_date += delta","c5e3c20d":"#Irradiation Task 1 Subatask 2\nprint(\"Plant 2:\")\nstart_date = date(2020, 5, 15)\nend_date = date(2020, 6, 17)\ndelta = timedelta(days=1)\nprint(\"Date       :  Total Irradiation\")\nwhile start_date <= end_date:\n    print (str(start_date),\":\",df_pgen4['IRRADIATION'][df_pgen4['DATE']==str(start_date)].sum())\n    start_date += delta","e0153f20":"#Max Task 1 Subtask 3\n#df_pgen2.info()\nprint(\"Plant 1: Maximum Ambient Temp :\", df_pgen2['AMBIENT_TEMPERATURE'].max())\nprint(\"Plant 2: Maximum Ambient Temp :\", df_pgen4['AMBIENT_TEMPERATURE'].max())\nprint(\"Plant 1: Maximum Module Tempe :\", df_pgen2['MODULE_TEMPERATURE'].max())\nprint(\"Plant 2: Maximum Module Tempe :\", df_pgen4['MODULE_TEMPERATURE'].max())","d86945a9":"# inverters Task 1 Subtask 4\nprint(\"Plant 1:\",len(df_pgen1['SOURCE_KEY'].unique()))\nprint(\"Plant 2:\",len(df_pgen3['SOURCE_KEY'].unique()))","6f0c3280":"#MinMax Task1 Subtask5\nprint(\"PLANT 1:\")\nstart_date = date(2020, 5, 15)\nend_date = date(2020, 6, 17)\ndelta = timedelta(days=1)\nprint(\"Date       :  Max\")\nwhile start_date <= end_date:\n    print (str(start_date),\":\",df_pgen1['DC_POWER'][df_pgen1['DATE']==str(start_date)].max())\n    start_date += delta    \nstart_date = date(2020, 5, 15)\nend_date = date(2020, 6, 17)\ndelta = timedelta(days=1)\nprint()\nprint()\nprint(\"Date       :  Min\")\nwhile start_date <= end_date:\n    print (str(start_date),\":\",df_pgen1['DC_POWER'][df_pgen1['DATE']==str(start_date)].min())\n    start_date += delta\n    ","9489fc07":"#MinMax Task1 Subtask5\nprint(\"PLANT 2:\")\nstart_date = date(2020, 5, 15)\nend_date = date(2020, 6, 17)\ndelta = timedelta(days=1)\nprint(\"Date       :  Max\")\n#df_pgen1['IRRADIATION'][df_pgen1['DATE']=='start_date'].sum()\n\nwhile start_date <= end_date:\n    print (str(start_date),\":\",df_pgen3['DC_POWER'][df_pgen3['DATE']==str(start_date)].max())\n    start_date += delta\n    \nstart_date = date(2020, 5, 15)\nend_date = date(2020, 6, 17)\ndelta = timedelta(days=1)\nprint()\nprint()\nprint(\"Date       :  Min\")\n#df_pgen1['IRRADIATION'][df_pgen1['DATE']=='start_date'].sum()\n\nwhile start_date <= end_date:\n    print (str(start_date),\":\",df_pgen3['DC_POWER'][df_pgen3['DATE']==str(start_date)].min())\n    start_date += delta\n    ","42cb4e98":"# power Task 1 Subtask 6\n#print(df_pgen1['AC_POWER'].max())\n\ndf_pgen1['AC_POWER'].argmax() \nprint(\"Plant 1:\")\nprint(\"Maximum DC Invertor :\", df_pgen1['SOURCE_KEY'].values[df_pgen1['DC_POWER'].argmax()])\nprint(\"Minimum DC Invertor :\", df_pgen1['SOURCE_KEY'].values[df_pgen1['DC_POWER'].argmin()])\nprint(\"Maximum AC Generator:\", df_pgen1['SOURCE_KEY'].values[df_pgen1['AC_POWER'].argmax()])\nprint(\"Minimum AC Generator:\", df_pgen1['SOURCE_KEY'].values[df_pgen1['AC_POWER'].argmin()])\n\nprint(\"Plant 2:\")\nprint(\"Maximum DC Invertor :\", df_pgen3['SOURCE_KEY'].values[df_pgen3['DC_POWER'].argmax()])\nprint(\"Minimum DC Invertor :\", df_pgen3['SOURCE_KEY'].values[df_pgen3['DC_POWER'].argmin()])\nprint(\"Maximum AC Generator:\", df_pgen3['SOURCE_KEY'].values[df_pgen3['AC_POWER'].argmax()])\nprint(\"Minimum AC Generator:\", df_pgen3['SOURCE_KEY'].values[df_pgen3['AC_POWER'].argmin()])\n\nprint(\"Overall:\")\nif(df_pgen3['DC_POWER'].argmax()>df_pgen1['DC_POWER'].argmax()):\n    print(\"Maximum DC\/AC Invertor :\", df_pgen3['SOURCE_KEY'].values[df_pgen3['DC_POWER'].argmax()])\nelse:\n    print(\"Maximum DC\/AC Invertor :\", df_pgen1['SOURCE_KEY'].values[df_pgen1['DC_POWER'].argmax()])\n\nif(df_pgen3['DC_POWER'].argmin()<df_pgen1['DC_POWER'].argmin()):\n    print(\"Minimum DC\/AC Invertor :\", df_pgen3['SOURCE_KEY'].values[df_pgen3['DC_POWER'].argmin()])\nelse:\n    print(\"Minimum DC\/AC Invertor :\", df_pgen1['SOURCE_KEY'].values[df_pgen1['DC_POWER'].argmin()])\n\n","6143531b":"#sort Task 1 Subtask 7\n#First Plant\nprint(df_pgen1.sort_values(by='DC_POWER', ascending=False))\n\n","7d25c82a":"#Second Plant\ndf_pgen3.sort_values(by='DC_POWER', ascending=False)","4e56c424":"# Null Task1 Subtask 8\ndf_pgen1.isnull().sum()\ndf_pgen2.isnull().sum()\ndf_pgen3.isnull().sum()\ndf_pgen4.isnull().sum()\n\n#df_pgen1['DATE'].value_counts().sort_index()\n#there are missing values as there are less number of time intervals recorded than there should be","b10bb603":"import matplotlib.pyplot as plt\n_, ax = plt.subplots(1, 1, figsize=(18, 9))\ndf_subset = df_pgen1[df_pgen1['DATE']=='2020-05-21']\n\n\nax.plot(df_subset.DATE_TIME,\n        df_subset.DC_POWER\/10,\n        marker = 'o',\n        linestyle='',\n        label='DC_POWER'\n       )\n\nax.plot(df_subset.DATE_TIME,\n        df_subset.AC_POWER,\n        marker = 'o',\n        linestyle='',\n        label='AC_POWER'\n       )\n\nax.grid()\nax.margins(0.05)\nax.legend()\nplt.title('DC Power and AC Power over 34 Days')\nplt.xlabel('Date and Time')\nplt.ylabel('Power')\nplt.show()","21fdec25":"_, ax = plt.subplots(1, 1, figsize=(18, 9))\ndf_subset = df_pgen1[df_pgen1['DATE']=='2020-05-21']\n\n\nax.plot(df_subset.DATE_TIME,\n        df_subset.DC_POWER\/10,\n        marker = '.',\n        linestyle='',\n        label='DC_POWER'\n       )\n\nax.plot(df_subset.DATE_TIME,\n        df_subset.AC_POWER,\n        marker = '.',\n        linestyle='',\n        label='AC_POWER'\n       )\n\nax.grid()\nax.margins(0.05)\nax.legend()\nplt.title('DC Power and AC Power over 34 Days')\nplt.xlabel('Date and Time')\nplt.ylabel('Power')\nplt.show()","1033eac1":"import matplotlib.pyplot as plt\ndf_subset = df_pgen1[['SOURCE_KEY','AC_POWER']]\ndf_pgen1.plot(x ='SOURCE_KEY', y='AC_POWER', kind = 'bar')\n\n'''\ndf_subset.plot(df_subset.SOURCE_KEY,\n        df_subset.AC_POWER,\n        marker = 'o',\n        linestyle='',\n        label='AC_POWER'\n       )\n\n\nax.plot(df_subset.DATE_TIME,\n        df_subset.AC_POWER,\n        marker = '.',\n        linestyle='',\n        label='AC_POWER'\n       )\n       \n\nax.grid()\nax.margins(0.05)\nax.legend()\nplt.title('DC Power and AC Power over 34 Days')\nplt.xlabel('Date and Time')\nplt.ylabel('Power')\nplt.show()\n#df.plot(x ='Unemployment_Rate', y='Stock_Index_Price', kind = 'scatter')\n'''\n\n#df_subset","c06cf7e4":"# Exploring the data","0a01e07e":"# **Missing Values**","b686b206":"# Rank Invertors","e7ef634e":"# Task 4 - Number of Invertors","88222e14":"**Plant 2**","f405b1a7":"By checking the isNulll there does not seem to be any value missing but it seems that the missing values are those values which were not recorded because of Machine Downtime or any other reason as the Times Vary","b3eb5edf":"**Plant 1**","65dfedeb":"# Task 1 - Mean of Daily Yield","2c424aeb":"# Task 2: Calculate Irradiation per day","506875b6":"# Task 5 - MIN\/MAX DC & AC Power","d98b2c89":"# Task 6 - Calculate Maximum Power Generated","8f598f64":"# Task 3 - Ambient & Module Temperature"}}