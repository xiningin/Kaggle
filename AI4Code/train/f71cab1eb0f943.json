{"cell_type":{"5b1513ba":"code","f6e2750c":"code","f96b460d":"code","5dc7dbe7":"code","e02defc1":"code","ed9d8c1b":"code","bf33b9f0":"code","aeb99498":"markdown","cc963b89":"markdown"},"source":{"5b1513ba":"import numpy as np, pandas as pd\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn import svm, neighbors, linear_model, neural_network\nfrom sklearn.svm import NuSVC\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\nfrom tqdm import tqdm_notebook\nfrom sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.feature_selection import VarianceThreshold\n\nimport warnings\nwarnings.filterwarnings('ignore')","f6e2750c":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')\n\ncols = [c for c in train.columns if c not in ['id', 'target', 'wheezy-copper-turtle-magic']]","f96b460d":"oof_svnu = np.zeros(len(train)) \npred_te_svnu = np.zeros(len(test))\n\noof_qda = np.zeros(len(train)) \npred_te_qda = np.zeros(len(test))","5dc7dbe7":"for i in tqdm_notebook(range(512)):\n\n    train2 = train[train['wheezy-copper-turtle-magic']==i]\n    test2 = test[test['wheezy-copper-turtle-magic']==i]\n    idx1 = train2.index; idx2 = test2.index\n    train2.reset_index(drop=True,inplace=True)\n\n    #### Preprocessing for both train and test data\n    data = pd.concat([pd.DataFrame(train2[cols]), pd.DataFrame(test2[cols])])\n    data2 = StandardScaler().fit_transform(PCA(svd_solver='full',n_components='mle').fit_transform(data[cols]))\n    train3 = data2[:train2.shape[0]]; test3 = data2[train2.shape[0]:]\n    \n    data2 = StandardScaler().fit_transform(VarianceThreshold(threshold=1.5).fit_transform(data[cols]))\n    train4 = data2[:train2.shape[0]]; test4 = data2[train2.shape[0]:]\n    \n    skf = StratifiedKFold(n_splits=25, random_state=42)\n    \n    for train_index, test_index in skf.split(train2, train2['target']):\n        qda_clf = QuadraticDiscriminantAnalysis(reg_param=0.111)\n        qda_clf.fit(train4[train_index,:],train2.loc[train_index]['target'])\n        oof_qda[idx1[test_index]] = qda_clf.predict_proba(train4[test_index,:])[:,1]\n        pred_te_qda[idx2] += qda_clf.predict_proba(test4)[:,1] \/ skf.n_splits\n        \n        nusvc_clf = NuSVC(probability=True, kernel='poly', degree=4, gamma='auto', random_state=4, nu=0.59, coef0=0.053)\n        nusvc_clf.fit(train3[train_index,:],train2.loc[train_index]['target'])\n        oof_svnu[idx1[test_index]] = nusvc_clf.predict_proba(train3[test_index,:])[:,1]\n        pred_te_svnu[idx2] += nusvc_clf.predict_proba(test3)[:,1] \/ skf.n_splits","e02defc1":"print('nusvc', roc_auc_score(train['target'], oof_svnu))\nprint('qda', roc_auc_score(train['target'], oof_qda))\nprint('blend 1', roc_auc_score(train['target'], oof_qda*0.8+oof_svnu*0.2))\nprint('blend 2', roc_auc_score(train['target'], oof_qda*0.7+oof_svnu*0.3))\nprint('blend 3', roc_auc_score(train['target'], oof_qda*0.65+oof_svnu*0.35))\nprint('blend 4', roc_auc_score(train['target'], oof_qda*0.6+oof_svnu*0.4))\nprint('blend 5', roc_auc_score(train['target'], oof_qda*0.5+oof_svnu*0.5))\nprint('blend 6', roc_auc_score(train['target'], oof_qda*0.4+oof_svnu*0.6))\nprint('blend 7', roc_auc_score(train['target'], oof_qda*0.3+oof_svnu*0.7))","ed9d8c1b":"sub_nusvc = pd.read_csv('..\/input\/sample_submission.csv')\nsub_qda = pd.read_csv('..\/input\/sample_submission.csv')\nsub_blend1 = pd.read_csv('..\/input\/sample_submission.csv')\nsub_blend2 = pd.read_csv('..\/input\/sample_submission.csv')\nsub_blend3 = pd.read_csv('..\/input\/sample_submission.csv')\nsub_blend4 = pd.read_csv('..\/input\/sample_submission.csv')\nsub_blend5 = pd.read_csv('..\/input\/sample_submission.csv')\nsub_blend6 = pd.read_csv('..\/input\/sample_submission.csv')\nsub_blend7 = pd.read_csv('..\/input\/sample_submission.csv')","bf33b9f0":"sub_qda['target'] = pred_te_qda\nsub_qda.to_csv('QDA_Baseline2.csv', index=False)\n\nsub_nusvc['target'] = pred_te_svnu\nsub_nusvc.to_csv('NUsvc_Baseline.csv', index=False)\n\nsub_blend1['target'] = pred_te_svnu*0.2 + pred_te_qda*0.8\nsub_blend1.to_csv('blend_qda0.8_svnu0.2.csv', index=False)\n\nsub_blend2['target'] = pred_te_svnu*0.3 + pred_te_qda*0.7\nsub_blend2.to_csv('blend_qda0.7_svnu0.3.csv', index=False)\n\nsub_blend3['target'] = pred_te_svnu*0.35 + pred_te_qda*0.65\nsub_blend3.to_csv('blend_qda0.65_svnu0.35.csv', index=False)\n\nsub_blend4['target'] = pred_te_svnu*0.4 + pred_te_qda*0.6\nsub_blend4.to_csv('blend_qda0.6_svnu0.4.csv', index=False)\n\nsub_blend5['target'] = pred_te_svnu*0.5 + pred_te_qda*0.5\nsub_blend5.to_csv('blend_qda0.5_svnu0.5.csv', index=False)\n\nsub_blend6['target'] = pred_te_svnu*0.6 + pred_te_qda*0.4\nsub_blend6.to_csv('blend_qda0.4_svnu0.6.csv', index=False)\n\nsub_blend7['target'] = pred_te_svnu*0.7 + pred_te_qda*0.3\nsub_blend7.to_csv('blend_qda0.3_svnu0.7.csv', index=False)","aeb99498":"@Credits to Vladislav Bahkteev for QDA kernel","cc963b89":"# QDA Baseline 2 & NuSVC Baseline & QDA+NuSVC Various Blends"}}