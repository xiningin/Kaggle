{"cell_type":{"bb423a05":"code","6e9f29c2":"code","1c3a012e":"code","67f8f1e0":"code","c955ed9e":"code","06d4066d":"code","d36081c4":"code","4a2d2205":"code","14e02877":"code","fceba1cc":"markdown","21863b6e":"markdown","b2a91808":"markdown","d22d0118":"markdown","79eefea2":"markdown","5e83182f":"markdown","322d1df2":"markdown","36d7b6bd":"markdown","fcedaa18":"markdown"},"source":{"bb423a05":"!pip install cudf","6e9f29c2":"import numpy as np\nimport cudf","1c3a012e":"train = cudf.read_csv('..\/input\/titanic\/train.csv')\ntest = cudf.read_csv('..\/input\/titanic\/test.csv')","67f8f1e0":"drop_elements = ['PassengerId', 'Name', 'Ticket', 'Cabin', 'SibSp','Parch']\ntrain = train.drop(drop_elements, axis = 1)\ntest = test.drop(drop_elements, axis = 1)","c955ed9e":"def checkNull_fillData(df):\n    for col in df.columns:\n        if len(df.loc[df[col].isnull() == True]) != 0:\n            if df[col].dtype == \"float64\" or df[col].dtype == \"int64\":\n                df.loc[df[col].isnull() == True,col] = df[col].mean()\n            else:\n                df.loc[df[col].isnull() == True,col] = df[col].mode()[0]\n                \ncheckNull_fillData(train)\ncheckNull_fillData(test)","06d4066d":"str_list = [] \nnum_list = []\nfor colname, colvalue in train.iteritems():\n    if type(colvalue[1]) == str:\n        str_list.append(colname)\n    else:\n        num_list.append(colname)\n        \ntrain = cudf.get_dummies(train, columns=str_list)\ntest = cudf.get_dummies(test, columns=str_list)","d36081c4":"import xgboost as xgb\nfrom cuml import train_test_split\ny = train['Survived']\nX = train.drop(['Survived'], axis=1)\n\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.2, random_state=42)","4a2d2205":"xgb_params = {'n_estimators': 10000,\n               'learning_rate': 0.03689407512484644,\n               'max_depth': 8,\n               'colsample_bytree': 0.3723914688159835,\n               'subsample': 0.780714581166012,\n               'eval_metric': 'auc',\n               'use_label_encoder': False,\n               'gamma': 0,\n               'reg_lambda': 50.0,\n               'tree_method': 'gpu_hist',\n               'gpu_id': 0,\n               'predictor': 'gpu_predictor',\n               'random_state': 42}\n\nxgb_classifier = xgb.XGBClassifier(**xgb_params)\nxgb_classifier.fit(X_train, y_train, eval_set=[(X_valid, y_valid)], early_stopping_rounds=10, verbose=True)","14e02877":"output = cudf.read_csv(\"..\/input\/titanic\/gender_submission.csv\")\noutput[\"Survived\"] = (xgb_classifier.predict_proba(test)[:,-1] > 0.5).astype(int)\noutput.to_csv('submission.csv', index=False)","fceba1cc":"# split input + target \n## (split train set + validation set)","21863b6e":"# install cudf","b2a91808":"# check missing data and fill new data","d22d0118":"# predict test data and submit result","79eefea2":"# load data","5e83182f":"# make model xgboost classification","322d1df2":"# check string type data -> number format data ","36d7b6bd":"# import basic library","fcedaa18":"# delete insignificant columns"}}