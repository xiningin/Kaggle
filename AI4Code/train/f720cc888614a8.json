{"cell_type":{"320a23e4":"code","1e8d50cb":"code","cbec1d57":"code","4e05cee6":"code","0b66a349":"code","c34022d5":"code","110162d0":"code","56347a5f":"code","b6286f7e":"code","adb0aea1":"code","d4fef03d":"code","6a81e850":"code","e14990e2":"code","94c4fd59":"code","27bb3eb3":"code","30037a8d":"code","00a5b0ee":"code","b9a9cedf":"code","6d55149d":"code","00b098fc":"code","009662a2":"code","728284e3":"code","c51c3a4c":"code","65677b0e":"code","d7ea490d":"code","43c6938b":"code","4f2ed969":"code","7664cf6a":"code","6f79f3e3":"code","a0d0bd69":"code","bd94a3bc":"code","06baa5ff":"code","2bb64340":"code","3c2332be":"code","74ae8a92":"code","151aa60b":"code","56345773":"code","b520185c":"code","11db1892":"code","934cee46":"code","d56cf172":"code","63d1e4c3":"code","7eaad550":"code","ca22d32c":"code","e384e48d":"code","8ff695fa":"code","a3068bee":"code","b2d9cc61":"code","bd5211dc":"code","a230d611":"code","428c72bc":"code","f009a0eb":"code","63c30e73":"code","61c0e1ea":"code","a932023d":"code","1eeadac9":"code","8aacc8a8":"code","3fa0d4e3":"code","97a46060":"code","7880ced2":"code","0acee363":"code","fe0dc8c1":"code","297567c6":"code","5bada569":"code","90905827":"code","0b246137":"code","5282fbdc":"code","8cced9bc":"code","1f7c83e1":"code","a6dd617c":"code","20e11aa5":"code","49405589":"code","f8e26f90":"code","cd41532f":"code","9489cf93":"code","f5be063d":"code","6184bbd2":"code","96671483":"code","1ba7d207":"code","3b3cf35b":"code","03645b76":"markdown","933b2f91":"markdown","4576151c":"markdown","1f2fd3c9":"markdown","bda558f2":"markdown","8a469ad9":"markdown","d11d2b9f":"markdown","ac810cd4":"markdown","d8412c8a":"markdown","719c9403":"markdown","169f14d0":"markdown","e8687aec":"markdown","b34fadd1":"markdown","07b782c2":"markdown","6e6ae78d":"markdown","561c73e0":"markdown","2b25f377":"markdown","1e755c2c":"markdown","411869d8":"markdown","e9198c3a":"markdown","0a4305c8":"markdown","c6348099":"markdown","2579d5ac":"markdown","3ae63f8d":"markdown","62d99ab8":"markdown","06f70fe4":"markdown","d1bba022":"markdown","2e3bb539":"markdown","4da2c0ee":"markdown","38c50064":"markdown","6008c3f2":"markdown","b011ec9f":"markdown","bf36fe13":"markdown","f0b13c06":"markdown","fce8fb88":"markdown","22aef8a9":"markdown","9cdc2572":"markdown","d746e4c2":"markdown","dfd14f95":"markdown","7a809b86":"markdown","3cab8702":"markdown","75b5c8ed":"markdown","e06008a3":"markdown","443ad917":"markdown","ea6bbba5":"markdown","eb5c657a":"markdown","6c1d10e5":"markdown","20e9e8fb":"markdown"},"source":{"320a23e4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Modelling importations\nfrom sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier,VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score\n\n\nplt.style.use(\"seaborn-whitegrid\")\n\nimport seaborn as sns\nfrom collections import Counter\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","1e8d50cb":"train_df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_PassengerId = test_df[\"PassengerId\"]","cbec1d57":"train_df.columns","4e05cee6":"train_df.head()","0b66a349":"train_df.describe()","c34022d5":"train_df.info()","110162d0":"def bar_plot(variable):\n    \"\"\"\n        input: variable e.g. Sex\n        output: bar plot & value count\n    \"\"\"\n    # get feature\n    var = train_df[variable]\n    #count numer of categorical variable(value\/sample)\n    varValue = var.value_counts()\n    \n    #visualize\n    plt.figure(figsize=(9,3))\n    plt.bar(varValue.index,varValue)\n    plt.xticks(varValue.index, varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}: \\n {}\".format(variable,varValue))","56347a5f":"category1 = [\"Survived\",\"Sex\",\"SibSp\",\"Parch\",\"Pclass\",\"Embarked\"]\nfor cat in category1:\n    bar_plot(cat)","b6286f7e":"category2 = [\"Cabin\",\"Name\",\"Ticket\"]\nfor cat in category2:\n    print(\"{} \\n\".format(train_df[cat].value_counts))","adb0aea1":"def plot_hist(variable):\n    plt.figure(figsize = (9,3))\n    plt.hist(train_df[variable],bins=75)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with histogram\".format(variable))\n    plt.show()","d4fef03d":"numericVariables = [\"Fare\",\"Age\",\"PassengerId\"]\nfor numer in numericVariables:\n    plot_hist(numer)","6a81e850":"#Pclass - Survived\ntrain_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"],as_index=False).mean().sort_values(by=\"Survived\",ascending=False)","e14990e2":"#Sex - Survived\ntrain_df[[\"Sex\",\"Survived\"]].groupby([\"Sex\"],as_index=False).mean().sort_values(by=\"Survived\",ascending=False)","94c4fd59":"#SibSp - Survived\ntrain_df[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"],as_index=False).mean().sort_values(by=\"Survived\",ascending=False)","27bb3eb3":"#Parch - Survived\ntrain_df[[\"Parch\",\"Survived\"]].groupby([\"Parch\"],as_index=False).mean().sort_values(by=\"Survived\",ascending=False)","30037a8d":"def detect_outlier(df,features):\n    outlier_indices = []\n    \n    \n    for c in features:\n        #first quartile\n        Q1 = np.percentile(df[c],25)\n        #third quartile\n        Q3 = np.percentile(df[c],75)\n        #IQR\n        IQR = Q3 - Q1 \n        \n        #Outlier Step\n        outlier_step = IQR * 1.5\n        \n        #detect outlier and their indices\n        outlier_list_column = df[(df[c] < Q1 - outlier_step) | (df[c] > Q3 + outlier_step)].index\n        #store indices\n        outlier_indices.extend(outlier_list_column)\n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i, v in outlier_indices.items() if v > 2)\n    \n    return multiple_outliers","00a5b0ee":"train_df.loc[detect_outlier(train_df,[\"Age\",\"SibSp\",\"Fare\",\"Parch\"])]","b9a9cedf":"# Drop outliers\ntrain_df = train_df.drop(detect_outlier(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"]),axis=0).reset_index(drop=False)","6d55149d":"train_df_len = len(train_df)\ntrain_df = pd.concat([train_df,test_df],axis=0).reset_index(drop=True)","00b098fc":"train_df.columns[train_df.isnull().any()]","009662a2":"train_df.isnull().sum()","728284e3":"train_df[train_df[\"Embarked\"].isnull()]","c51c3a4c":"train_df.boxplot(column=\"Fare\",by=\"Embarked\")\nplt.show()","65677b0e":"train_df[\"Embarked\"] = train_df[\"Embarked\"].fillna(\"C\")","d7ea490d":"train_df[train_df[\"Fare\"].isnull()]","43c6938b":"train_df[train_df[\"Pclass\"]==3][\"Fare\"].mean()","4f2ed969":"train_df[\"Fare\"] = train_df[\"Fare\"].fillna(train_df[train_df[\"Pclass\"]==3][\"Fare\"].mean())","7664cf6a":"list1 = [\"SibSp\",\"Parch\",\"Age\",\"Fare\",\"Survived\"]\nsns.heatmap(train_df[list1].corr(),annot=True,fmt=\".2f\")","6f79f3e3":"g = sns.factorplot(x=\"SibSp\",y=\"Survived\",data=train_df,kind=\"bar\",size=5)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","a0d0bd69":"g = sns.factorplot(x=\"Parch\",y=\"Survived\",kind=\"bar\",data=train_df,size=5)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","bd94a3bc":"g = sns.factorplot(x=\"Pclass\",y=\"Survived\",data=train_df,kind=\"bar\",size=5)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","06baa5ff":"g = sns.FacetGrid(train_df,col=\"Survived\")\ng.map(sns.distplot,\"Age\",bins=25)\nplt.show()","2bb64340":"g = sns.FacetGrid(train_df,col=\"Survived\",row=\"Pclass\")\ng.map(plt.hist,\"Age\",bins=25)\ng.add_legend()\nplt.show()","3c2332be":"g = sns.FacetGrid(train_df,row=\"Embarked\")\ng.map(sns.pointplot,\"Pclass\",\"Survived\",\"Sex\",bins=25)\ng.add_legend()\nplt.show()","74ae8a92":"g = sns.FacetGrid(train_df,row=\"Embarked\",col=\"Survived\",size=3.5)\ng.map(sns.barplot,\"Sex\",\"Fare\")\ng.add_legend()\nplt.show()","151aa60b":"train_df[train_df[\"Age\"].isnull()]","56345773":"sns.factorplot(x=\"Sex\",y=\"Age\",data=train_df,kind=\"box\")\nplt.show()","b520185c":"sns.factorplot(x=\"Sex\",y=\"Age\",hue=\"Pclass\",data=train_df,kind=\"box\")\nplt.show()","11db1892":"sns.factorplot(x=\"Parch\",y=\"Age\",data=train_df,kind=\"box\")\nsns.factorplot(x=\"SibSp\",y=\"Age\",data=train_df,kind=\"box\")\nplt.show()","934cee46":"train_df[\"Sex\"] = [1 if i == \"male\" else 0 for i in train_df[\"Sex\"]]","d56cf172":"sns.heatmap(train_df[[\"Age\",\"Sex\",\"SibSp\",\"Parch\",\"Pclass\"]].corr(),annot=True)\nplt.show()","63d1e4c3":"index_nan_age = list(train_df[\"Age\"][train_df[\"Age\"].isnull()].index)\nfor i in index_nan_age:\n    age_pred = train_df[\"Age\"][((train_df[\"SibSp\"]==train_df.iloc[i][\"SibSp\"]) & (train_df[\"Parch\"]==train_df.iloc[i][\"Parch\"]) & (train_df[\"Pclass\"]==train_df.iloc[i][\"Pclass\"]))].median()\n    age_med = train_df[\"Age\"].median()\n    if not np.isnan(age_pred):\n        train_df[\"Age\"].iloc[i] = age_pred\n    else:\n        train_df[\"Age\"].iloc[i] = age_med","7eaad550":"train_df[\"Name\"].sample(10)","ca22d32c":"name = train_df[\"Name\"]\ntrain_df[\"Title\"] = [i.split(\".\")[0].split(\",\")[-1].strip() for i in name]","e384e48d":"train_df[\"Title\"].sample(10)","8ff695fa":"sns.countplot(x=\"Title\",data=train_df)\nplt.xticks(rotation=90)\nplt.show()","a3068bee":"train_df[\"Title\"] = train_df[\"Title\"].replace([\"Lady\",\"The Countess\",\"Capt\",\"Col\",\"Don\",\"Dr\",\"Major\",\"Rev\",\"Sir\",\"Jonkheer\",\"Dona\"],\"other\")\ntrain_df[\"Title\"] = [0 if i == \"Master\" else 1 if i == \"Miss\" or i == \"Ms\" or i==\"Mile\" or i==\"Mrs\" else 2 if i == \"Mr\" else 3 for i in train_df[\"Title\"]]","b2d9cc61":"sns.countplot(x=\"Title\",data=train_df)\nplt.xticks(rotation=90)\nplt.show()","bd5211dc":"train_df[\"Title\"].sample(10)","a230d611":"g = sns.factorplot(x=\"Title\",y=\"Survived\",data=train_df,kind=\"bar\")\ng.set_xticklabels([\"Master\",\"Mrs\",\"Mr\",\"Other\"])\ng.set_ylabels(\"Survival Probability\")\nplt.show()","428c72bc":"train_df.drop(labels = [\"Name\"],axis=1,inplace=True)\ntrain_df.sample(10)","f009a0eb":"train_df = pd.get_dummies(train_df,columns=[\"Title\"])\ntrain_df.head()","63c30e73":"train_df[\"Fsize\"] = train_df[\"SibSp\"] + train_df[\"Parch\"] + 1","61c0e1ea":"g = sns.factorplot(x=\"Fsize\",y=\"Survived\",data=train_df,kind=\"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()","a932023d":"train_df[\"family_size\"] = [1 if i<5 else 0 for i in train_df[\"Fsize\"]]","1eeadac9":"train_df.sample(10)","8aacc8a8":"sns.countplot(x=\"family_size\",data=train_df)\nplt.show()","3fa0d4e3":"g = sns.factorplot(x=\"family_size\",y=\"Survived\",data=train_df,kind=\"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()","97a46060":"train_df = pd.get_dummies(train_df,columns=[\"family_size\"])","7880ced2":"train_df.sample(10)","0acee363":"train_df[\"Embarked\"].sample(10)","fe0dc8c1":"sns.countplot(x=\"Embarked\",data=train_df)\nplt.show()","297567c6":"train_df = pd.get_dummies(train_df,columns=[\"Embarked\"])\ntrain_df.sample(10)","5bada569":"train_df[\"Ticket\"].sample(10)","90905827":"tickets = []\nfor i in list(train_df[\"Ticket\"]):\n    if not i.isdigit():\n        tickets.append(i.replace(\".\",\"\").replace(\"\/\",\"\").strip().split(\" \")[0])\n    else:\n        tickets.append(\"x\")\ntrain_df[\"Ticket\"] = tickets","0b246137":"train_df[\"Ticket\"].sample(10)","5282fbdc":"train_df = pd.get_dummies(train_df,columns=[\"Ticket\"],prefix=\"T\")\ntrain_df.sample(10)","8cced9bc":"sns.countplot(x=\"Pclass\",data=train_df)\nplt.show()","1f7c83e1":"train_df[\"Pclass\"] = train_df[\"Pclass\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df,columns=[\"Pclass\"])\ntrain_df.sample(10)","a6dd617c":"train_df[\"Sex\"] = train_df[\"Sex\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df,columns=[\"Sex\"])\ntrain_df.sample(10)","20e11aa5":"train_df.drop(labels=[\"PassengerId\",\"Cabin\"],axis=1,inplace=True)","49405589":"train_df_len","f8e26f90":"test = train_df[train_df_len:]\ntest.drop(labels=[\"Survived\"],axis=1,inplace=True)","cd41532f":"test.sample(7)","9489cf93":"train=train_df[:train_df_len]\nx_train=train.drop(labels = \"Survived\",axis=1)\ny_train=train[\"Survived\"]\nx_train,x_test,y_train,y_test = train_test_split(x_train, y_train, test_size = 0.3,random_state = 25)","f5be063d":"logReg = LogisticRegression()\nlogReg.fit(x_train,y_train)\n\naccLogRegTrain = logReg.score(x_train,y_train)\naccLogRegTest = logReg.score(x_test,y_test)\nprint(\"Train Acc: {}\\nTest Acc: {}\".format(accLogRegTrain,accLogRegTest))","6184bbd2":"random_state = 25\nclassifier = [DecisionTreeClassifier(random_state = random_state),\n             SVC(random_state = random_state),\n             RandomForestClassifier(random_state = random_state),\n             LogisticRegression(random_state = random_state),\n             KNeighborsClassifier()]\n\ndt_param_grid = {\"min_samples_split\" : range(10,500,20),\n                \"max_depth\": range(1,20,2)}\n\nsvc_param_grid = {\"kernel\" : [\"rbf\"],\n                 \"gamma\": [0.001, 0.01, 0.1, 1],\n                 \"C\": [1,10,50,100,200,300,1000]}\n\nrf_param_grid = {\"max_features\": [1,3,10],\n                \"min_samples_split\":[2,3,10],\n                \"min_samples_leaf\":[1,3,10],\n                \"bootstrap\":[False],\n                \"n_estimators\":[100,300],\n                \"criterion\":[\"gini\"]}\n\nlogreg_param_grid = {\"C\":np.logspace(-3,3,7),\n                    \"penalty\": [\"l1\",\"l2\"]}\n\nknn_param_grid = {\"n_neighbors\": np.linspace(1,19,10, dtype = int).tolist(),\n                 \"weights\": [\"uniform\",\"distance\"],\n                 \"metric\":[\"euclidean\",\"manhattan\"]}\nclassifier_param = [dt_param_grid,\n                   svc_param_grid,\n                   rf_param_grid,\n                   logreg_param_grid,\n                   knn_param_grid]","96671483":"cv_result = []\nbest_estimators = []\nfor i in range(len(classifier)):\n    clf = GridSearchCV(classifier[i],param_grid=classifier_param[i],cv = StratifiedKFold(n_splits=10),scoring=\"accuracy\",n_jobs=-1,verbose=1)\n    clf.fit(x_train,y_train)\n    cv_result.append(clf.best_score_)\n    best_estimators.append(clf.best_estimator_)\n    print(cv_result[i])","1ba7d207":"votingC = VotingClassifier(estimators = [(\"dt\",best_estimators[0]),\n                                        (\"rfc\",best_estimators[2]),\n                                        (\"lr\",best_estimators[3])],\n                                        voting = \"soft\", n_jobs = -1)\nvotingC = votingC.fit(x_train, y_train)\nprint(accuracy_score(votingC.predict(x_test),y_test))","3b3cf35b":"test_survived = pd.Series(votingC.predict(test), name = \"Survived\").astype(int)\nresults = pd.concat([test_PassengerId, test_survived],axis = 1)\nresults.to_csv(\"titanic.csv\", index = False)","03645b76":"<a id='8.3'><\/a> \n## Hyperparameter Tuning, Grid Search, Cross Validation","933b2f91":"<a id=\"7.3\"><\/a>\n## Embarked\n    ","4576151c":"<a id=\"7.1\"><\/a>\n### Name -- Title","1f2fd3c9":"# Introduction\n\nRMS Titanic was a British passenger liner operated by the White Star Line that sank in the North Atlantic Ocean in the early morning hours of April 15, 1912, after striking an iceberg during her maiden voyage from Southampton to New York City. Of the estimated 2,224 passengers and crew aboard, more than 1,500 died, making the sinking one of modern history's deadliest peacetime commercial marine disasters. RMS Titanic was the largest ship afloat at the time she entered service and was the second of three Olympic-class ocean liners operated by the White Star Line. She was built by the Harland and Wolff shipyard in Belfast. Thomas Andrews, chief naval architect of the shipyard at the time, died in the disaster.\n\n<font color=\"blue\">\n### Content\n1. [Load and Check Data](#1)\n2. [Variable Description](#2)\n    * [Univariate Variable Analysis](#2.1)\n        * [Categorical Variable Analysis](#2.1.1)\n        * [Numerical Variable Analysis](#2.1.2)\n3. [Basic Data Analysis](#3)\n4. [Outlier Detection](#4)\n5. [Missing Value](#5)\n    * [Find Missing Value](#5.1)\n    * [Fill Missing Value](#5.2)\n6. [Visualization](#6)\n    * [Correlation Between Sibsp -- Parch -- Age -- Fare -- Survived](#6.1)\n    * [SibSp -- Survived](#6.2)\n    * [Parch -- Survived](#6.3)\n    * [Pclass -- Survived](#6.4)\n    * [Age -- Survived](#6.5)\n    * [Pclass -- Survived -- Age](#6.6)\n    * [Embarked -- Sex -- Pclass -- Survived](#6.7)\n    * [Embarked -- Sex -- Fare -- Survived](#6.8)\n    * [Filling Missing Value: Age Feature](#6.9)\n7. [Feature Engineering](#7.0)\n    * [Name -- Title](#7.1)\n    * [Family Size](#7.2)\n    * [Embarked](#7.3)\n    * [Ticket](#7.4)\n    * [Pclass](#7.5)\n    * [Sex](#7.6)\n    * [Drop Paseenger ID and Cabin](#7.7)\n8. [Modeling](#8)\n    * [Train - Test Split](#8.1)\n    * [Logistic Regression Model](#8.2)\n    * [Hyperparameter Tuning, Grid Search, Cross Validation](#8.3)\n    * [Ensemble Modeling](#8.4)\n    * [Prediction](#8.5)","bda558f2":"* Female passengers have much better survival rate than male passengers.\n* Male passengers have better survival rate in Pclass = 3 in C\n* Embarked and sex will be used in training model.","8a469ad9":"Conver to categorical","d11d2b9f":"First class older than passengers second, and older than third class.","ac810cd4":"<a id='5'><\/a>\n# Missing Value\n   * [Find Missing Value](#5.1)\n   * [Fill Missing Value](#5.2)","d8412c8a":"<a id='5.1'><\/a>\n## Find Missing Value","719c9403":"<a id='8.4'><\/a>\n## Ensemble Modeling","169f14d0":"<a id='8.1'><\/a>\n## Train - Test Split","e8687aec":"<a id=\"7.0\"><\/a>\n## Feature Engineering","b34fadd1":"<a id=\"7.2\"><\/a>\n## Family Size","07b782c2":"<a id=\"7.6\"><\/a>\n## Sex\n","6e6ae78d":" * Passengers who pay higerer fare have better survival.\n * Face can be used as categorical for training.\n ","561c73e0":"Small families have more chance to survive than large families.","2b25f377":"Age is not correlated with sex but it's correlated with parch, sibsp and pclass.","1e755c2c":"<a id=\"6.1\"><\/a>\n### Correlation Between Sibsp -- Parch -- Age -- Fare -- Survived","411869d8":"<a id='3'><\/a>\n# Basic Data Analysis\n* PClass - Survived\n* Sex - Survived\n* SipSp - Survived\n* Parch - Survived","e9198c3a":"<a id='8.5'><\/a>\n## Prediction","0a4305c8":"<a id='2.1.2'><\/a>\n## Numerical Variable Analysis","c6348099":"<a id=\"6.8\"><\/a>\n### Embarked -- Sex -- Fare -- Survived","2579d5ac":"<a id=\"6\"><\/a>\n# Visualization\n","3ae63f8d":"<a id=\"6.2\"><\/a>\n### SibSp -- Survived","62d99ab8":"<a id='5.2'><\/a>\n## Fill Missing Value\n* Embarked has 2 missing value\n* Fare has only 1 missing value","06f70fe4":"<a id='2.1.2'><\/a>\n## Categorical Variable Analysis","d1bba022":"* Pclass is important for model training.","2e3bb539":"<a id=\"6.7\"><\/a>\n### Embarked -- Sex -- Pclass -- Survived\n   ","4da2c0ee":"<a id=\"6.6\"><\/a>\n### Pclass -- Survived -- Age\n    ","38c50064":"Fare feature seems to have correlation with survived feature (0.26)","6008c3f2":"<a id=\"6.4\"><\/a>\n### Pclass -- Survived\n   ","b011ec9f":"SibSp and parch can be used for new feature extraction with th = 3<br\/>\nSmall families have more chance to survive.<br\/>\nThere is a std in survival of passengers with parch = 3<br\/>","bf36fe13":"<a id=\"7.7\"><\/a>\n## Drop Paseenger ID and Cabin","f0b13c06":"<a id=\"6.9\"><\/a>\n## Filling Missing Value: Age Feature","fce8fb88":"<a id=\"1\"><\/a>\n# Load and Check Data","22aef8a9":"<a id=\"6.5\"><\/a>\n### Age -- Survived \n    ","9cdc2572":"<a id=\"7.4\"><\/a>\n## Ticket\n    ","d746e4c2":"<a id=\"7.5\"><\/a>\n## Pclass","dfd14f95":"Having a lot of SibSp have** less chance** to survive.<br\/>\nIf *SibSp == 0 or 1 or 2* passenger has **more chance** to survive.<br\/>\nWe can consider a **new feature** describing these categories.","7a809b86":"<a id='2.1'><\/a>\n# Univariate Variable Analysis\n* [Categorical Variable Analysis](#2.1.1): Survived, Sex, Pclass, Embarked, Cabin, Name, Ticket, Sipsp and Parch\n* [Numerical Variable Analysis](#2.1.2): Age, PassengerId and Fare","3cab8702":"**Sex is not informative for age prediction.**","75b5c8ed":"<a id=\"6.3\"><\/a>\n### Parch -- Survived\n    ","e06008a3":"<a id='8'><\/a>\n# Modeling\n    ","443ad917":"* Age <= 10 has a high survival rate\n* oldest passengers (80) survived\n* large number of 20 years old did not survive\n* most passengers are in 15-35 age range\n* use age feature in training\n* use age distribution for missing value of age","ea6bbba5":"<a id='4'><\/a>\n#  Outlier Detection","eb5c657a":"<a id='8.2'><\/a>\n## Logistic Regression Model","6c1d10e5":"* float64(2): Fare and Age\n* int64(5): Pclass, sibsp, parch,passengerId and survived\n* object(5): Cabin, embarked, Name, sex and ticket.","20e9e8fb":"<a id=\"2\"><\/a>\n# Variable Description\n\n1. PassengerId: Unique id number to each passenger\n2. Survived: Passenger survived(1) or died(0).\n3. Pclass: Passenger class\n4. Name: Name of passenger\n5. Sex: Gender of passenger\n6. Age: Age of passenger\n7. SibSp: Number of siblings\/spouses\n8. Parch: Number of parents\/children\n9. Ticket: Ticket number\n10. Fare: Amount of money spent of ticket\n11. Cabin: Cabin category\n12. Embarked: Port where passenger embarked (C = Cherbourg, Q = Queenstown, S = Southampton )"}}