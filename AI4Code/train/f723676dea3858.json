{"cell_type":{"2b1e8bb5":"code","0596ff0a":"code","e41643d5":"code","5eb5aa62":"code","0169ba82":"code","ca54be8c":"code","5ef6b8ac":"code","82bfaad3":"code","51b0f75d":"code","19ad9cf4":"code","1c4966e1":"code","af903693":"code","356de67c":"code","888e01ce":"code","7df36424":"code","6612469a":"code","5800910b":"code","af52bf1d":"code","169b05d8":"code","3cfaf215":"code","bcb3e477":"code","9f49c80a":"code","e64884fe":"code","621d6885":"code","85261b0e":"code","c837351b":"code","db1e3e5f":"code","81af6d72":"code","32a8cce2":"code","27011dee":"code","581e60c7":"code","60017e6c":"code","cda1c0c1":"code","9289d963":"code","86ccb3e6":"code","1ec22e70":"code","5ae560b3":"code","798744c8":"code","1d243835":"code","3d4b4d46":"code","52dc98e6":"code","c9387a49":"code","ca5b985d":"markdown","e9482c0f":"markdown","137e29f2":"markdown","11b9c362":"markdown","28407603":"markdown","da091ded":"markdown","f581a357":"markdown","a40f5fa2":"markdown","bc31c86a":"markdown","fbe0897b":"markdown"},"source":{"2b1e8bb5":"import numpy as np\nimport pandas as pd\nfrom sklearn.cluster import AgglomerativeClustering\nimport scipy.cluster.hierarchy as sch\nimport matplotlib.pyplot as plt","0596ff0a":"#Read the Data\ndata_train_hr = pd.read_csv('..\/input\/hr-analytics-job-change-of-data-scientists\/aug_train.csv')\ndata_test_hr  = pd.read_csv('..\/input\/hr-analytics-job-change-of-data-scientists\/aug_test.csv')\ndata_submission_hr = pd.read_csv('..\/input\/hr-analytics-job-change-of-data-scientists\/sample_submission.csv')","e41643d5":"# Combine test and train datasets\ndata_hr = data_train_hr.append(data_test_hr)\ndata_hr","5eb5aa62":"data_hr.head()","0169ba82":"data_submission_hr.head()","ca54be8c":"data_hr.info","5ef6b8ac":"data_hr.columns","82bfaad3":"data_hr.shape","51b0f75d":"data_hr.isnull()","19ad9cf4":"data_hr.isnull().sum()","1c4966e1":"data_hr.dropna(inplace=True)","af903693":"data_hr.isnull().sum()","356de67c":"#print type of data \ndata_hr.dtypes","888e01ce":"print('Numeric Columns:')\n# select numeric columns\ndf_numeric = data_hr.select_dtypes(include=[np.number])\nnumeric_cols = df_numeric.columns.values\nprint(numeric_cols)\n#select non numeric columns\nprint('Non Numeric Columns:')\ndf_non_numeric = data_hr.select_dtypes(exclude=[np.number])\nnon_numeric_cols = df_non_numeric.columns.values\nprint(non_numeric_cols)\n","7df36424":"from sklearn.preprocessing import LabelEncoder\nlabel_En = LabelEncoder()\ndata_hr['city']= label_En.fit_transform(data_hr['city'])\ndata_hr['relevent_experience'] = label_En.fit_transform(data_hr['relevent_experience'])\ndata_hr['enrolled_university'] = label_En.fit_transform(data_hr['enrolled_university'])\n#astype(str) because encoder working when parameter is str or float\ndata_hr['gender'] = label_En.fit_transform(data_hr['gender'].astype(str))\ndata_hr['education_level'] = label_En.fit_transform(data_hr['education_level'].astype(str))\ndata_hr['major_discipline'] = label_En.fit_transform(data_hr['major_discipline'].astype(str))\ndata_hr['experience'] = label_En.fit_transform(data_hr['experience'].astype(str))\ndata_hr['company_size'] = label_En.fit_transform(data_hr['company_size'].astype(str))\ndata_hr['company_type'] = label_En.fit_transform(data_hr['company_type'].astype(str))\ndata_hr['last_new_job'] = label_En.fit_transform(data_hr['last_new_job'].astype(str))","6612469a":"data_hr.head()","5800910b":"#x is features , y is target\nX=data_hr.drop('target' , axis=1)\nY=data_hr['target']","af52bf1d":"#show first 5 row from X - data \nX.head()","169b05d8":"#show first 5 row from Y - data\nY.head()","3cfaf215":"#split data 70% for train and 30% for test\nfrom sklearn.model_selection import train_test_split\nx_train, x_test , y_train , y_test = train_test_split(X,Y,test_size=0.3 , random_state=0)","bcb3e477":"#dendogram without fit model(Train)\nimport scipy.cluster.hierarchy as sch\nimport matplotlib.pyplot as plt\ndendrogram = sch.dendrogram(sch.linkage(x_train[1:30], method='ward'))\nplt.title('Taining Set')\nplt.xlabel('X Values')\nplt.ylabel('Distance')\nplt.show()","9f49c80a":"#dendogram without fit model(Test)\nimport matplotlib.pyplot as plt\ndendrogram = sch.dendrogram(sch.linkage(x_test[1:30], method='ward'))\nplt.title('Testting Set')\nplt.xlabel('X Values')\nplt.ylabel('Distance')\nplt.show()","e64884fe":"#fit model \nAggClusterModel = AgglomerativeClustering(n_clusters=2, affinity = 'euclidean' , linkage = 'ward' , )","621d6885":"#predict\ny_pred_train = AggClusterModel.fit_predict(x_train)\ny_pred_test  = AggClusterModel.fit_predict(x_test)","85261b0e":"#print shape for x_train\nx_train.shape","c837351b":"#number of row in data \ny_pred_train.shape","db1e3e5f":"y_pred_train[2:15]","81af6d72":"x_test.shape","32a8cce2":"y_pred_test.shape","27011dee":"y_pred_test[2:15]","581e60c7":"#dendrogram for training set in range(0,60)\ndendrogram = sch.dendrogram(sch.linkage(x_train[0:60] , method='ward'))\nplt.title('Training Set')\nplt.xlabel('X values')\nplt.ylabel('Distances')\nplt.show()\n#2 cluster red and green","60017e6c":"#dendrogram for training set in range(0,10)\ndendrogram = sch.dendrogram(sch.linkage(x_train[0:10] , method='ward'))\nplt.title('Training Set')\nplt.xlabel('X values')\nplt.ylabel('Distances')\nplt.show()\n#2 cluster red and green","cda1c0c1":"#dendrogram for test set in range(1,20)\ndendrogram = sch.dendrogram(sch.linkage(x_test[1:20] , method='ward'))\nplt.title('Testting Set')\nplt.xlabel('X Values')\nplt.ylabel('Distance')\nplt.show()","9289d963":"dendrogram = sch.dendrogram(sch.linkage(x_test[1:50], method='ward'))\nplt.title('Testting Set')\nplt.xlabel('X Values')\nplt.ylabel('Distance')\nplt.show()","86ccb3e6":"#Split to 2 cluster 0 and 1\nAggClusterModel.labels_","1ec22e70":"y_pred_test[ :10]","5ae560b3":"y_test[ :10]","798744c8":"x_train.info()","1d243835":"x_train.head()","3d4b4d46":"#draw scatter train set\nplt.scatter(x_train[y_pred_train == 0].iloc[:,0], x_train[y_pred_train == 0].iloc[:,1] , s=2 , c='red' , label='Cluster1')\nplt.scatter(x_train[y_pred_train == 1].iloc[:,0], x_train[y_pred_train == 1].iloc[:,1] , s=2 , c='blue' , label='Cluster2')\n#plt.scatter(x_train[y_pred_train == 2].iloc[:,0], x_train[y_pred_train == 2].iloc[:,1] , s=2 , c='green' , label='Cluster3')\n#plt.scatter(x_train[y_pred_train == 3].iloc[:,0], x_train[y_pred_train == 3].iloc[:,1] , s=2 , c='yellow' , label='Cluster4')\n#plt.scatter(x_train[y_pred_train == 4].iloc[:,0], x_train[y_pred_train == 4].iloc[:,1] , s=2 , c='black' , label='Cluster5')\nplt.title('Training Set')\nplt.xlabel('X values')\nplt.ylabel('Y values')\nplt.legend()\nplt.show()","52dc98e6":"#draw scatter train set\nplt.scatter(x_train[y_pred_train == 0].iloc[5:30,0], x_train[y_pred_train == 0].iloc[5:30,1] , s=2 , c='red' , label='Cluster1')\nplt.scatter(x_train[y_pred_train == 1].iloc[5:30,0], x_train[y_pred_train == 1].iloc[5:30,1] , s=2 , c='blue' , label='Cluster2')\n#plt.scatter(x_train[y_pred_train == 2].iloc[5:30,0], x_train[y_pred_train == 2].iloc[5:30,1] , s=2 , c='green' , label='Cluster3')\n#plt.scatter(x_train[y_pred_train == 3].iloc[5:30,0], x_train[y_pred_train == 3].iloc[5:30,1] , s=2 , c='yellow' , label='Cluster4')\n#plt.scatter(x_train[y_pred_train == 4].iloc[5:30,0], x_train[y_pred_train == 4].iloc[5:30,1] , s=2 , c='black' , label='Cluster5')\n\nplt.title('Training Set')\nplt.xlabel('X values')\nplt.ylabel('Y values')\nplt.legend()\nplt.show()","c9387a49":"#draw scatter train set\nplt.scatter(x_test[y_pred_test == 0].iloc[5:30,0], x_test[y_pred_test == 0].iloc[5:30,1] , s=2 , c='red' , label='Cluster1')\nplt.scatter(x_test[y_pred_test == 1].iloc[5:30,0], x_test[y_pred_test == 1].iloc[5:30,1] , s=2 , c='blue' , label='Cluster2')\n#plt.scatter(x_test[y_pred_test == 2].iloc[5:30,0], x_test[y_pred_test == 2].iloc[5:30,1] , s=2 , c='green' , label='Cluster3')\n#plt.scatter(x_test[y_pred_test == 3].iloc[5:30,0], x_test[y_pred_test == 3].iloc[5:30,1] , s=2 , c='yellow' , label='Cluster4')\n#plt.scatter(x_test[y_pred_test == 4].iloc[5:30,0], x_test[y_pred_test == 4].iloc[5:30,1] , s=2 , c='black' , label='Cluster5')\nplt.title('Training Set')\nplt.xlabel('X values')\nplt.ylabel('Y values')\nplt.legend()\nplt.show()","ca5b985d":"# Draw Scatter for Train set","e9482c0f":"# Importing Libraries","137e29f2":"# Information about Data","11b9c362":"# Drop null columns","28407603":"# Splitting Data To Train and Test Data","da091ded":"# HR-Analytics Data With Hierarchical_Clusters","f581a357":"# Fiting Cluster Model","a40f5fa2":"# Dendogram","bc31c86a":"# Encoder","fbe0897b":"# Show Numeric and Non Numeric Columns "}}