{"cell_type":{"79482bd0":"code","35aa02ce":"code","87059725":"code","8567f9e3":"code","bbe0fa71":"code","0f4b61c7":"code","66ce73d8":"code","0254cac1":"code","14ad820f":"code","57272675":"code","9f5f3681":"code","e3061315":"code","daf2537a":"code","3db7d40f":"code","e9031603":"code","fd888fcc":"markdown","039de12a":"markdown","71e438e3":"markdown","6e4e90f7":"markdown","4aa67599":"markdown","8f058542":"markdown","82b06e3d":"markdown","9ef31c3e":"markdown","7c5edd33":"markdown","a43e1efd":"markdown"},"source":{"79482bd0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom sklearn.ensemble import RandomForestClassifier\n\nfrom sklearn.model_selection import train_test_split\n#constants\n\nIMG_HEIGHT=28\nIMG_WIDTH=28\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","35aa02ce":"loaded_images=pd.read_csv('..\/input\/train.csv')\nloaded_images.head()","87059725":"images=loaded_images.iloc[:,1:]\nlabels=loaded_images.iloc[:,:1]   # for the labels to be a dataframe . iloc[:,0] returns a Series  iloc[:,:1] returns a Dataframe\nlabels.head()","8567f9e3":"train_images,test_images,train_labels,test_labels=train_test_split(images,labels,test_size=0.2,random_state=13)","bbe0fa71":"train_images.describe()","0f4b61c7":"forest=RandomForestClassifier(criterion='gini',random_state=1)\nforest.fit(train_images,train_labels)","66ce73d8":"forest.score(train_images,train_labels.values.ravel())","0254cac1":"forest.score(test_images,test_labels.values.ravel())","14ad820f":"figr,axes=plt.subplots(figsize=(10,10),ncols=3,nrows=3)\naxes=axes.flatten()\nfor i in range(0,9):\n    jj=np.random.randint(0,test_images.shape[0])          #pick a random image\n    axes[i].imshow(test_images.iloc[[jj]].values.reshape(IMG_HEIGHT,IMG_WIDTH))\n    axes[i].set_title('predicted: '+str(forest.predict(test_images.iloc[[jj]])[0]))\n\n\n","57272675":"new_data=pd.read_csv('..\/input\/test.csv')\nnew_data.head(n=3)","9f5f3681":"y_pred=forest.predict(new_data)","e3061315":"y_pred.shape","daf2537a":"submissions=pd.DataFrame({\"ImageId\":list(range(1,len(y_pred)+1)), \"Label\":y_pred})\nsubmissions.head()","3db7d40f":"submissions.to_csv(\"mnist_random_forest_submit.csv\",index=False,header=True)","e9031603":"!ls","fd888fcc":"possible overfitting on the training data.","039de12a":"**Submission **  \n\nload the data in test.csv  \npredict using the model","71e438e3":"create a dataframe which will then be exported as a csv file for submissions.","6e4e90f7":"get both the train and the test scores.","4aa67599":"further split into training and test sets","8f058542":"**Loading the data**  \nusing pandas.read_csv to load in the training data. ","82b06e3d":"Since out of all the features that are used to split a node, the one that maximizes the Information Gain is the one that the node is split  on.\n\n*IG is defined in terms of the impurity measure \"I\" which could be defined in terms of either entropy or the gini index. Each of these indices describes how pure a node is . So entropy of 1 implies a very impure node and an entropy of 0 implies that all members of the node belong to the same class i.e a pure node. similar with the gini index. Scaling is not an issue here since the impurity functions are defined in terms of probabilities which are values between 0 and 1*  \n\nTherefore features need not be scaled when dealing with DTs.  and therefore with Random Forests\n  \n**Classification using a Random Forests**  \nusing the [RandomForestClassifier in sklearn](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.ensemble.RandomForestClassifier.html)","9ef31c3e":"In this notebook I  have  performed digit  classification using a random forest.  ","7c5edd33":"93% accuracy on the test data.\nSpot check to see if the predictions are correct . Plotting the predictions as labels.","a43e1efd":"Split into images and labels.  "}}