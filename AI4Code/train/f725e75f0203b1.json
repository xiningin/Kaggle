{"cell_type":{"4a890bc3":"code","cbe4ff03":"code","3aaae648":"code","79f9fc34":"code","6ef33287":"code","b512e1e1":"code","753bf744":"code","4b1a50a2":"code","a6985169":"code","8fbe88e0":"code","329e5369":"code","8d8228ed":"markdown","d391746a":"markdown","13b0d2d7":"markdown","4af3147c":"markdown"},"source":{"4a890bc3":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib import rc\nfrom scipy.stats import chi2_contingency, ttest_ind, ttest_rel, f_oneway\n%matplotlib inline\nimport statsmodels.api as sm\nfrom statsmodels.formula.api import ols\nimport seaborn as sns\nrc('pdf', fonttype=42)","cbe4ff03":"def contingency_table(df_review, columns=[]):\n    tab = pd.crosstab(df_review['model_attr'], df_review['user_attr'], margins=True)\n    if len(columns)>0:\n        tab = tab[columns]\n    print('contingency table')\n    display(tab)\n    tab = df_review.groupby(['model_attr', 'user_attr'])['rating'].size().unstack()\n    if len(columns)>1:\n        tab = tab[columns[:-1]]\n    g, p, dof, expctd = chi2_contingency(tab.values)\n    print('chi2', g.round(3), 'p-value', p.round(3))\n    print('')\n    print('real market size - expcted market size')\n    display((tab-expctd).round(2))\n    ","3aaae648":"def chi2_test_by_year(df_review):\n    chi, p, _, expctd = chi2_contingency(df_review.groupby(['model_attr', 'user_attr'])['rating'].size().unstack().values)\n    chi1, p1, _, expctd1 = chi2_contingency(df_review.loc[\n        df_review['timestamp'].apply(lambda x: x.year<=2014)].groupby([\n        'model_attr', 'user_attr'])['rating'].size().unstack().values)\n    chi2, p2, _, expctd2 = chi2_contingency(df_review.loc[\n        df_review['timestamp'].apply(lambda x: x.year==2015)].groupby([\n        'model_attr', 'user_attr'])['rating'].size().unstack().values)\n    chi3, p3, _, expctd3 = chi2_contingency(df_review.loc[\n        df_review['timestamp'].apply(lambda x: x.year==2016)].groupby([\n        'model_attr', 'user_attr'])['rating'].size().unstack().values)\n    chi4, p4, _, expctd4 = chi2_contingency(df_review.loc[\n        df_review['timestamp'].apply(lambda x: x.year>=2017)].groupby([\n        'model_attr', 'user_attr'])['rating'].size().unstack().values)\n    df = pd.DataFrame(np.array([[chi, p, expctd.sum()],\n                                [chi1, p1, expctd1.sum()],\n                                [chi2, p2, expctd2.sum()],\n                                [chi3, p3, expctd3.sum()],\n                                [chi4, p4, expctd4.sum()],]), \n                      columns=['chi2', 'p-value', 'sum'],\n                      index=['all', '<=2014', '2015', '2016', '>=2017'])\n    display(df.round(3))","79f9fc34":"def two_way_anova(df_review, metric):\n    test3 = sm.stats.anova_lm(ols(metric+' ~ model_attr*user_attr', data=df_review).fit()).values[:3,-2:]\n    df = pd.DataFrame(test3, columns=['F-stat', 'p-value'], index=['product', 'user', 'product:user'])\n    display(df.round(3))\n    return df","6ef33287":"def plot_avg_by_segment(df_review, metric, figsize, index=[], dataset='', dump=True):\n    fig = plt.figure(figsize=figsize)\n    group_rating = df_review.groupby(['user_attr', 'model_attr'])[metric].mean().unstack()\n    group_std = 1.96*df_review.groupby(['user_attr', 'model_attr'])[metric].sem().unstack()\n    if len(index)>0:\n        group_rating = group_rating.loc[index]\n    group_rating.index = group_rating.index.rename('user identity')\n    group_rating.columns = group_rating.columns.rename('product image')\n    text = []\n    for ri in range(group_rating.shape[0]):\n        row = []\n        for ci in range(group_rating.shape[1]):\n            row.append(str(group_rating.values[ri, ci].round(2))+'\\n('+r'$\\pm$'+str(group_std.values[ri, ci].round(2))+')')\n        text.append(row)\n    text = np.array(text)\n    \n    sns.heatmap(group_rating, annot=text, fmt='s', cmap=\"YlGnBu\", annot_kws={\"size\": 13},\n                cbar=False)\n    if dump:\n        fig.savefig('.\/plot\/'+dataset+'_'+metric+'_heatmap.pdf', bbox_inches='tight')","b512e1e1":"dataset = 'modcloth'\n\ndf_review = pd.read_csv('..\/input\/marketing-bias-dataset\/df_modcloth.csv')\ndf_review['timestamp'] = pd.to_datetime(df_review['timestamp'])\ndf_review['fit_score'] = 0.0\ndf_review['fit_score'].loc[df_review['fit'] == 'Just right'] = 1.0\ndf_review['fit_score'].loc[df_review['fit'].isna()] = None\ndf_review['timestamp'] = pd.to_datetime(df_review['timestamp'])","753bf744":"df_review.head()","4b1a50a2":"contingency_table(df_review, ['Small', 'Large', 'All'])","a6985169":"chi2_test_by_year(df_review)","8fbe88e0":"_ = two_way_anova(df_review, 'rating')\nplot_avg_by_segment(df_review, 'rating', (2.2,2), ['Small', 'Large'], dataset, dump=False)","329e5369":"_ = two_way_anova(df_review, 'fit_score')\nplot_avg_by_segment(df_review, 'fit_score', (2.2,2), ['Small', 'Large'], dataset, dump=False)","8d8228ed":"# ModCloth","d391746a":"## Product Selection vs. Marketing Bias (ModCloth)\n### Chi2 test of contingency table","13b0d2d7":"## Consumer Satisfaction vs. Marketing Bias (ModCloth)\n### 2-way ANOVA on rating score","4af3147c":"### 2-way ANOVA on clothing fit feedback"}}