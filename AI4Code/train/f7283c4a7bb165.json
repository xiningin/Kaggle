{"cell_type":{"f5c9d64b":"code","f0af03b4":"code","bd91812a":"code","61a6d378":"code","284009a6":"code","49afff3d":"code","9e2b563c":"code","9070536f":"code","25b36a62":"code","81bc5047":"code","21fee059":"code","1fd2c040":"code","874c14e9":"code","7ca73718":"code","14987d77":"code","325131d4":"code","792352ef":"code","900854ec":"code","5ab07af5":"code","dacc2057":"code","da2f4725":"code","f7f76077":"code","a2216960":"code","be684101":"code","3410425c":"code","467aa5ad":"code","986371a4":"code","d9563299":"code","65a54044":"code","52076b1d":"code","1d628761":"code","600b86ee":"code","cbd2fc50":"code","1efbc7e8":"code","6786523c":"code","8c6c1379":"code","53e6df2f":"code","749c157a":"code","f6c01991":"code","6dda8aa3":"code","f7039597":"code","8a7d8960":"code","e64ae112":"markdown","35c9d021":"markdown","7afd9f27":"markdown"},"source":{"f5c9d64b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f0af03b4":"data = pd.read_csv('\/kaggle\/input\/water-potability\/water_potability.csv')","bd91812a":"data.head()","61a6d378":"data.isnull().sum()","284009a6":"data_copy = data","49afff3d":"data_copy = data_copy.fillna(data_copy.mean())","9e2b563c":"data_copy.isnull().sum()","9070536f":"import seaborn as sns\nimport matplotlib.pyplot as plt","25b36a62":"sns.histplot(data_copy.ph,color = 'red')","81bc5047":"sns.histplot(data_copy.Hardness)","21fee059":"y = data_copy.Potability\nmin(y),max(y)","1fd2c040":"data_copy.drop('Potability' ,axis = 1,inplace = True)","874c14e9":"plt.figure(figsize = (15,10))\nsns.heatmap(data_copy.corr(),annot = True)","7ca73718":"len(data_copy)","14987d77":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\ndata_copy = scaler.fit_transform(data_copy)","325131d4":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(data_copy,y.values,test_size = 0.2,random_state = 42)","792352ef":"np.max(x_train)","900854ec":"from sklearn.svm import SVC\nclassifier = SVC()","5ab07af5":"from sklearn.naive_bayes import GaussianNB\nclassifier2 = GaussianNB()","dacc2057":"from sklearn.ensemble import RandomForestClassifier\nclassifier3 = RandomForestClassifier()","da2f4725":"classifier.fit(x_train,y_train)\nclassifier2.fit(x_train,y_train)\nclassifier3.fit(x_train,y_train)","f7f76077":"predict = classifier.predict(x_test)\npredict2 = classifier2.predict(x_test)\npredict3 = classifier3.predict(x_test)","a2216960":"from sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test,predict)","be684101":"cm2 = confusion_matrix(y_test,predict)","3410425c":"from sklearn.metrics import accuracy_score\naccuracy_score(y_test, predict)*100","467aa5ad":"accuracy_score(y_test, predict2)*100","986371a4":"accuracy_score(y_test, predict3)*100","d9563299":"from sklearn.impute import KNNImputer","65a54044":"y_m = data.Potability\ndata.drop('Potability',axis = 1,inplace = True)","52076b1d":"cols = data.columns","1d628761":"def fill_na(col):\n    imputer = KNNImputer(n_neighbors=10)\n    da = imputer.fit_transform(data[col].values.reshape(-1,1))\n    da = da.squeeze()\n    return da","600b86ee":"for col in data.columns:\n    data[col] = fill_na(col)","cbd2fc50":"data","1efbc7e8":"data.isnull().sum()","6786523c":"data = scaler.fit_transform(data)","8c6c1379":"from sklearn.model_selection import train_test_split\nx_train_,x_test_,y_train_,y_test_ = train_test_split(data,y_m.values,test_size = 0.2,random_state = 42)","53e6df2f":"classifier.fit(x_train_,y_train_)\nclassifier2.fit(x_train_,y_train_)\nclassifier3.fit(x_train_,y_train_)\npredict_ = classifier.predict(x_test_)\npredict2_ = classifier2.predict(x_test_)\npredict3_ = classifier3.predict(x_test_)","749c157a":"from sklearn.metrics import accuracy_score\naccuracy_score(y_test_, predict_)*100","f6c01991":"accuracy_score(y_test_, predict2_)*100","6dda8aa3":"accuracy_score(y_test_, predict3_)*100","f7039597":"submi = pd.DataFrame(predict3_,columns = ['Potability'])\nsubmi.to_csv('submission.csv',index = False)","8a7d8960":"!head 'submission.csv'","e64ae112":"*We can see that the  Sulfate , Trihalomethanes and ph have some null value.*","35c9d021":"# **Using K nearest neighbor**\nTo fill missing data","7afd9f27":"We Can Use **Mean** values to fill all null values , or we can use **K Nearest Neighbor** to fill the NULL values."}}