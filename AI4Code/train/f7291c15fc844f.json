{"cell_type":{"8b3816a5":"code","bca3d84e":"code","a1fbb50a":"code","73170b6d":"code","2dfb4c1f":"code","d842712d":"code","b430ff9c":"code","3c758928":"code","ac052e09":"code","8ff789bf":"code","22220f59":"code","fad2ee2a":"code","dd983630":"code","58f74f5a":"markdown","93764e99":"markdown","c1d513b4":"markdown","e6340450":"markdown","8cb397f4":"markdown","1845d3ac":"markdown","e47b1938":"markdown","6e2082b0":"markdown","f4bb37eb":"markdown","bfe62441":"markdown"},"source":{"8b3816a5":"import numpy as np\nimport pandas as pd\nimport mxnet as mx\nfrom mxnet.gluon import nn\n\nimport os\nimport matplotlib.pyplot as plt\n\nfrom multiprocessing import cpu_count\nCPU_COUNT = cpu_count()\n\nfrom mxnet import np, npx\nfrom mxnet.gluon import nn\n\nnpx.set_np()","bca3d84e":"train_path = '..\/input\/hummingbirds-at-my-feeders\/hummingbirds\/train'\ntest_path = '..\/input\/hummingbirds-at-my-feeders\/hummingbirds\/test'\nvalid_path = '..\/input\/hummingbirds-at-my-feeders\/hummingbirds\/valid'","a1fbb50a":"transform_fn = mx.gluon.data.vision.transforms.ToTensor()\n\ntrain_dataset = mx.gluon.data.vision.datasets.ImageFolderDataset(train_path)\ntrain_dataset = train_dataset.transform_first(transform_fn)\n\ntest_dataset = mx.gluon.data.vision.datasets.ImageFolderDataset(test_path)\ntest_dataset = test_dataset.transform_first(transform_fn)\n\nvalid_dataset = mx.gluon.data.vision.datasets.ImageFolderDataset(valid_path)\nvalid_dataset = test_dataset.transform_first(transform_fn)\n\ntrain_loader = mx.gluon.data.DataLoader(train_dataset, batch_size=8, \n                                        shuffle=True, num_workers=CPU_COUNT)\ntest_loader = mx.gluon.data.DataLoader(test_dataset, batch_size=8, \n                                       shuffle=True, num_workers=CPU_COUNT)\nvalid_loader = mx.gluon.data.DataLoader(test_dataset, batch_size=len(valid_dataset), \n                                       shuffle=True, num_workers=CPU_COUNT)","73170b6d":"labels = os.listdir(train_path)\nnr_labels = len(labels)","2dfb4c1f":"class Residual(nn.Block):  #@save\n    \"\"\"\n        The Residual block of ResNet.\n    \"\"\"\n    def __init__(self, num_channels, use_1x1conv=False, strides=1, **kwargs):\n        super().__init__(**kwargs)\n        self.conv1 = nn.Conv2D(num_channels, kernel_size=3, padding=1,\n                               strides=strides)\n        self.conv2 = nn.Conv2D(num_channels, kernel_size=3, padding=1)\n        if use_1x1conv:\n            self.conv3 = nn.Conv2D(num_channels, kernel_size=1,\n                                   strides=strides)\n        else:\n            self.conv3 = None\n        self.bn1 = nn.BatchNorm()\n        self.bn2 = nn.BatchNorm()\n\n    def forward(self, X):\n        Y = npx.relu(self.bn1(self.conv1(X)))\n        Y = self.bn2(self.conv2(Y))\n        if self.conv3:\n            X = self.conv3(X)\n        return npx.relu(Y + X)","d842712d":"from mxnet import gluon, autograd, ndarray\n\ndef resnet_block(num_channels, num_residuals, first_block=False):\n    \"\"\"\n        Single Resnet Block.\n    \"\"\"\n    blk = nn.Sequential()\n    for i in range(num_residuals):\n        if i == 0 and not first_block:\n            blk.add(Residual(num_channels, use_1x1conv=True, strides=2))\n        else:\n            blk.add(Residual(num_channels))\n    return blk\n\ndef construct_net():\n    \"\"\"\n        Network Construction.\n    \"\"\"\n    net = nn.Sequential()\n    net.add(nn.Conv2D(64, kernel_size=7, strides=2, padding=3), nn.BatchNorm(),\n            nn.Activation('relu'), nn.MaxPool2D(pool_size=3, strides=2,\n                                                padding=1))\n    net.add(resnet_block(64, 2, first_block=True), resnet_block(128, 2),\n        resnet_block(256, 2), resnet_block(512, 2))\n    net.add(nn.GlobalAvgPool2D(), nn.Dense(nr_labels))\n    return net\n\n# construct and initialize network.\nctx =  mx.gpu() if mx.context.num_gpus() else mx.cpu()\n\nnet = construct_net()\nnet.initialize(mx.init.Xavier(), ctx=ctx)","b430ff9c":"# loss function\ncriterion = gluon.loss.SoftmaxCrossEntropyLoss()\n\n# optimizer\ntrainer = gluon.Trainer(net.collect_params(), 'nag', {'learning_rate': 0.005,\n                                                      'momentum': 0.5})","3c758928":"def train(loader, cs, samples):\n    c_loss, c_acc = cs\n    \n    for batch_idx, (data, label) in enumerate(loader):\n        data = data.as_in_context(ctx)\n        label = label.as_in_context(ctx)\n        \n        with autograd.record():\n            output = net(data.as_np_ndarray())\n            output_max = np.argmax(output, axis=1)\n            \n            loss = criterion(output.as_np_ndarray(), label.as_np_ndarray())\n            acc = np.sum(output_max == label.as_np_ndarray())\n            \n        loss.backward()\n        trainer.step(data.shape[0])\n        \n        c_loss += loss.as_nd_ndarray().sum()\n        c_acc += acc.as_nd_ndarray().astype(np.float32)\n        \n        samples += data.shape[0]\n       \n    cs = c_loss, c_acc\n    return cs, samples","ac052e09":"epochs = 10\n\ntrain_loss, train_acc = [], []\ntest_loss, test_acc = [], []\n\nfor epoch in range(epochs):\n    # training loop\n    cumulative_train_loss = mx.nd.zeros(1, ctx=ctx)\n    cumulative_train_acc = mx.nd.zeros(1, ctx=ctx)\n    \n    training_samples = 0\n    cs = cumulative_train_loss, cumulative_train_acc\n    cs, training_samples = train(train_loader, cs, training_samples)\n    cumulative_train_loss, cumulative_train_acc = cs\n    \n    train_loss.append(cumulative_train_loss.asscalar()\/training_samples)\n    train_acc.append(cumulative_train_acc.asscalar()\/training_samples)\n\n    # testing loop\n    cumulative_test_loss = mx.nd.zeros(1, ctx)\n    cumulative_test_acc = mx.nd.zeros(1, ctx)\n    \n    test_samples = 0\n    cs = cumulative_test_loss, cumulative_test_acc\n    cs, test_samples = train(test_loader, cs, test_samples)\n    cumulative_test_loss, cumulative_test_acc = cs\n    \n    test_loss.append(cumulative_test_loss.asscalar()\/test_samples)\n    test_acc.append(cumulative_test_acc.asscalar()\/test_samples)\n\n    if((epoch+1) % 1 == 0):\n        print(\"Epoch {:3d}, training loss: {:.2f}, training acc: {:.2f},\" \\\n                  \" testing loss: {:.2f}, testing acc: {:.2f}\"\n                      .format(epoch+1, train_loss[-1], train_acc[-1],\n                                  test_loss[-1], test_acc[-1]))","8ff789bf":"_ = plt.figure(figsize=(12,8))\n_ = plt.title(\"Losses\")\n_ = plt.plot(train_loss, label=\"Training Losee\")\n_ = plt.plot(test_loss, label=\"Testing Losee\")\n_ = plt.legend()\nplt.show()","22220f59":"_ = plt.figure(figsize=(12,8))\n_ = plt.title(\"Accuracies\")\n_ = plt.plot(train_acc, label=\"Training Accuracies\")\n_ = plt.plot(test_acc, label=\"Testing Accuracies\")\n_ = plt.legend()\nplt.show()","fad2ee2a":"cumulative_valid_loss = mx.nd.zeros(1, ctx)\ncumulative_valid_acc = mx.nd.zeros(1, ctx)\n\nvalid_samples = 0\ncs = cumulative_valid_loss, cumulative_valid_acc\ncs, valid_samples = train(valid_loader, cs, valid_samples)\ncumulative_valid_loss, cumulative_valid_acc = cs\n\nvalid_loss = cumulative_valid_loss.asscalar()\/valid_samples\nvalid_acc = cumulative_valid_acc.asscalar()\/valid_samples","dd983630":"print('Validation Loss:{:.3f}, Validation Accuracy:{:.3f}'\n          .format(valid_loss, valid_acc))","58f74f5a":"<h1 id=\"analysis\" style=\"color:#fefd1c; background:#829055;\"> \n    <center>Analysis\n        <a class=\"anchor-link\" href=\"#analysis\" target=\"_self\">\u00b6<\/a>\n    <\/center>\n<\/h1>","93764e99":"<h1 id=\"training\" style=\"color:#fefd1c; background:#829055;\"> \n    <center>Training\n        <a class=\"anchor-link\" href=\"#training\" target=\"_self\">\u00b6<\/a>\n    <\/center>\n<\/h1>","c1d513b4":"<h1 id=\"dataset\" style=\"color:#fefd1c; background:#829055;\"> \n    <center>Dataset\n        <a class=\"anchor-link\" href=\"#dataset\" target=\"_self\">\u00b6<\/a>\n    <\/center>\n<\/h1>","e6340450":"## Training function","8cb397f4":"<h1 id=\"resnet\" style=\"color:#fefd1c; background:#829055;\"> \n    <center>Residual Network\n        <a class=\"anchor-link\" href=\"#resnet\" target=\"_self\">\u00b6<\/a>\n    <\/center>\n<\/h1>","1845d3ac":"## Residual Block","e47b1938":"## Residual Network","6e2082b0":"## Training\/Testing Loop","f4bb37eb":"<h1 id=\"validation\" style=\"color:#fefd1c; background:#829055;\"> \n    <center>Validation\n        <a class=\"anchor-link\" href=\"#validation\" target=\"_self\">\u00b6<\/a>\n    <\/center>\n<\/h1>","bfe62441":"<div>\n    <img src=\"https:\/\/storage.googleapis.com\/kaggle-datasets-images\/714100\/1244227\/10140c73afdcca422e2e9149fc2cc36d\/dataset-cover.jpg\"\/>\n<\/div>"}}