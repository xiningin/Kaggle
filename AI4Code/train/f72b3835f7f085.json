{"cell_type":{"69af3355":"code","bedee6f6":"code","52625827":"code","f84f5f0a":"code","c4a61394":"code","a1fdb67e":"code","67e54d0e":"code","7693912a":"code","12716d72":"code","9fe99e00":"code","72154f63":"code","3855e3dc":"code","61244141":"markdown","9919bece":"markdown"},"source":{"69af3355":"import pandas as pd\n\nmain_file_path = '..\/input\/house-prices-advanced-regression-techniques\/train.csv' # this is the path to the Iowa data that you will use\ndata = pd.read_csv(main_file_path)\n\n# Run this code block with the control-enter keys on your keyboard. Or click the blue botton on the left\ndata.columns;","bedee6f6":"Price = data.SalePrice\n\ncolumns_of_interest = ['SalePrice', 'YrSold']\nSP_YS = data[columns_of_interest]\nSP_YS.describe()\n","52625827":"y = Price\nPredictors = ['LotArea', 'YearBuilt', '1stFlrSF', '2ndFlrSF', 'FullBath', 'BedroomAbvGr', 'TotRmsAbvGrd']\nX = data[Predictors]\nX.head()","f84f5f0a":"from sklearn.tree import DecisionTreeRegressor\n\nIowa_model = DecisionTreeRegressor()\n\nIowa_model.fit(X,y)","c4a61394":"'''print('Predictions for the following 5 houses')\nprint(X.head(10))\nprint('The Predictions can be found below')\nprint(Iowa_model.predict(X.head(10)))'''","a1fdb67e":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_absolute_error\n\ntrain_X, val_X, train_y, val_y = train_test_split(X,y, random_state = 0)\n\ntraining_model = Iowa_model.fit(train_X, train_y)\n\nYpredictions = Iowa_model.predict(val_X)\n\nprint(mean_absolute_error(val_y, Ypredictions))\n\n\n","67e54d0e":"def get_MAE(max_leaf_nodes, predictors_train, predictors_val, targ_train, targ_val):\n    model = DecisionTreeRegressor(max_leaf_nodes=max_leaf_nodes, random_state=0)\n    model.fit(predictors_train, targ_train)\n    preds_val = model.predict(predictors_val)\n    MAE = mean_absolute_error(targ_val, preds_val)\n    return(MAE)","7693912a":"for max_leaf_nodes in [5,46,30,5000]:\n    my_MAE = get_MAE(max_leaf_nodes, train_X, val_X, train_y, val_y)\n    print('Max leaf nodes: %d \\t\\t MAE: %d' %(max_leaf_nodes, my_MAE))","12716d72":"from sklearn.ensemble import RandomForestRegressor\n\nforest_model = RandomForestRegressor()\nforest_model.fit(train_X , train_y)\nIowa_pred = forest_model.predict(val_X)\nprint(mean_absolute_error(val_y, Iowa_pred))","9fe99e00":"import pandas as pd\nIowa_data = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\n\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.model_selection import train_test_split\n\nIowa_data.describe()\n\nIowa_target = Iowa_data.SalePrice\nIowa_pred = Iowa_data.drop(['SalePrice'], axis = 1)\nIowa_pred = Iowa_pred.select_dtypes(exclude=['object'])\n\nX_train, X_test, y_train, y_test = train_test_split(Iowa_pred, \n                                                    Iowa_target,\n                                                    train_size=0.7, \n                                                    test_size=0.3, \n                                                    random_state=0)\ndef score_dataset(X_train, X_test, y_train, y_test):\n    model = RandomForestRegressor()\n    model.fit(X_train, y_train)\n    preds = model.predict(X_test)\n    return mean_absolute_error(y_test, preds)\n\ncols_w_missing = [col for col in X_train.columns\n                                 if X_train[col].isnull().any()]\nX_train_red = X_train.drop(cols_w_missing, axis = 1)\nX_test_red = X_test.drop(cols_w_missing, axis = 1)\nprint(\"Mean Absolute Error from dropping columns with Missing Values:\")\nprint(score_dataset(X_train_red, X_test_red, y_train, y_test))","72154f63":"from sklearn.impute import SimpleImputer\n\nmy_imp = SimpleImputer()\nX_train_imp = my_imp.fit_transform(X_train)\nX_test_imp = my_imp.fit_transform(X_test)\nprint(\"Mean Absolute Error from Imputation:\")\nprint(score_dataset(X_train_imp, X_test_imp, y_train, y_test))","3855e3dc":"imputed_X_train_plus = X_train.copy()\nimputed_X_test_plus = X_test.copy()\n\ncols_with_missing = (col for col in X_train.columns \n                                 if X_train[col].isnull().any())\nfor col in cols_with_missing:\n    imputed_X_train_plus[col + '_was_missing'] = imputed_X_train_plus[col].isnull()\n    imputed_X_test_plus[col + '_was_missing'] = imputed_X_test_plus[col].isnull()\n    \nmy_imputer = SimpleImputer()\nimputed_X_train_plus = my_imputer.fit_transform(imputed_X_train_plus)\nimputed_X_test_plus = my_imputer.transform(imputed_X_test_plus)\n\nprint(\"Mean Absolute Error from Imputation while Track What Was Imputed:\")\nprint(score_dataset(imputed_X_train_plus, imputed_X_test_plus, y_train, y_test))\n\n","61244141":"\n**If you have any questions or hit any problems, come to the [Learn Discussion](https:\/\/www.kaggle.com\/learn-forum) for help. **\n\n**Return to [ML Course Index](https:\/\/www.kaggle.com\/learn\/machine-learning)**","9919bece":"# Introduction\n**This will be your workspace for the [Machine Learning course](https:\/\/www.kaggle.com\/learn\/machine-learning).**\n\nYou will need to translate the concepts to work with the data in this notebook, the Iowa data. Each page in the Machine Learning course includes instructions for what code to write at that step in the course.\n\n# Write Your Code Below"}}