{"cell_type":{"b0b7c2be":"code","158dab39":"code","a27c66be":"code","eef41991":"code","62114c3a":"code","6e730681":"code","1d979283":"code","a05ea9bf":"code","307e4a53":"code","927e6350":"code","515f1f2b":"code","3a6163af":"code","9a79000a":"code","14322a79":"code","7e190d53":"code","a900039b":"code","1a42fa19":"code","ae42d1a4":"code","de0345b0":"code","efc23108":"code","584f2acf":"code","d36e04bb":"code","0f592caf":"code","4a964edc":"code","e9ecd121":"code","e2352ed0":"code","51345c66":"code","f66b43e1":"code","a6a0f78c":"code","da7e7b37":"code","a36aee23":"code","1c099f3d":"code","8e97cc5e":"code","91124f5e":"code","73da06e0":"code","f936dd8d":"code","b72614bb":"code","c1f0afc8":"code","d0e51fc2":"code","74799abe":"code","c57dc0f5":"code","19cfe3c5":"code","036386a2":"code","d22d93a1":"code","fbe00886":"code","cc78caf9":"code","b251a1d5":"code","12186fdd":"code","b0136bfa":"code","644a19e3":"code","4093bfb5":"code","113197be":"code","554366b2":"code","6060f9f3":"code","3396933b":"code","3736c22d":"code","b54f8e82":"code","4d97c052":"code","b7225aa1":"code","1f0c1f4a":"code","692473c4":"code","3e0dba39":"code","23016e43":"code","a5761f6c":"markdown","b41d7b9d":"markdown","6721b799":"markdown","8d6f925f":"markdown","08d20afc":"markdown","91f87a44":"markdown","85a6b6af":"markdown","fd39e06c":"markdown","ca70dac0":"markdown","b0d0bd59":"markdown","c6e23208":"markdown","fa1f660d":"markdown","bc146924":"markdown"},"source":{"b0b7c2be":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","158dab39":"train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest = pd.read_csv(\"..\/input\/titanic\/test.csv\")","a27c66be":"train.head()","eef41991":"train.info()","62114c3a":"test.info()","6e730681":"test.info()","1d979283":"train_clean = train.copy()\ntest_clean = test.copy()\n","a05ea9bf":"train.drop(\"Cabin\", axis=1, inplace = True)\n","307e4a53":"del test[\"Cabin\"]","927e6350":"train_clean.dropna(axis=0,inplace=True)\ntest_clean.dropna(axis=0,inplace=True)","515f1f2b":"train.Embarked.fillna(train_clean[\"Embarked\"].mode()[0], inplace=True)","3a6163af":"train.Age.fillna(train_clean.Age.median(), inplace=True)","9a79000a":"train.info()","14322a79":"sns.distplot(test_clean[\"Age\"])","7e190d53":"test.Age.fillna(test_clean.Age.median(), inplace=True)","a900039b":"sns.distplot(test_clean[\"Fare\"])","1a42fa19":"test.Fare.fillna(test_clean.Fare.median(), inplace=True)","ae42d1a4":"test.info()\n","de0345b0":"sns.barplot(x=\"Survived\", y=\"Age\", data= train)","efc23108":"sns.barplot(x=\"Sex\", y=\"Survived\",data= train)","584f2acf":"sns.barplot(x=\"Pclass\", y=\"Survived\",data= train)","d36e04bb":"sns.barplot(x=\"Age\", y=\"Survived\",data= train )","0f592caf":"train[\"child\"]= train.Age","4a964edc":"train.loc[train[\"child\"] < 7, \"child\"] = -1\ntrain.loc[(train[\"child\"] >= 7) &  (train[\"child\"] <= 65), \"child\"] = 0\ntrain.loc[train[\"child\"] >65, \"child\"] = 1\n\n","e9ecd121":"sns.barplot(x=\"child\", y=\"Survived\",data= train )","e2352ed0":"train.child.value_counts()","51345c66":"test[\"child\"]= test.Age","f66b43e1":"test.loc[test[\"child\"] < 7, \"child\"] = -1\ntest.loc[(test[\"child\"] >= 7) &  (test[\"child\"] <= 65), \"child\"] = 0\ntest.loc[test[\"child\"] >65, \"child\"] = 1","a6a0f78c":"test.child.value_counts()","da7e7b37":"train[\"family\"] = train.SibSp + train.Parch\ntest[\"family\"] = test.SibSp + test.Parch","a36aee23":"train.loc[train[\"family\"] > 0, \"family\"] = 1\ntest.loc[train[\"family\"] > 0, \"family\"] = 1","1c099f3d":"sns.barplot(x=\"family\", y = \"Survived\", data = train)","8e97cc5e":"g = sns.FacetGrid(train, col='Survived')\ng.map(plt.hist, 'Fare', bins=20)","91124f5e":"train.Fare.describe()","73da06e0":"train[\"Fare1\"] = train.Fare","f936dd8d":"test[\"Fare1\"] = test.Fare","b72614bb":"train.loc[train[\"Fare1\"] < 8, \"Fare1\"] = -1\ntrain.loc[(train[\"Fare1\"] >= 8) &  (train[\"Fare1\"] <= 20), \"Fare1\"] = 0\ntrain.loc[train[\"Fare1\"] >20, \"Fare1\"] = 1","c1f0afc8":"test.loc[test[\"Fare1\"] < 8, \"Fare1\"] = -1\ntest.loc[(test[\"Fare1\"] >= 8) &  (test[\"Fare1\"] <= 20), \"Fare1\"] = 0\ntest.loc[test[\"Fare1\"] >20, \"Fare1\"] = 1","d0e51fc2":"sns.barplot(x=\"Fare1\", y = \"Survived\", data= train)","74799abe":"trainClean=train.copy()","c57dc0f5":"trainClean.drop(\"Name\",axis=1,inplace=True)","19cfe3c5":"trainClean.drop(\"Ticket\",axis=1,inplace=True)","036386a2":"testClean=test.copy()\ntestClean.drop(\"Name\",axis=1,inplace=True)\ntestClean.drop(\"Ticket\",axis=1,inplace=True)\n","d22d93a1":"trainClean.head()","fbe00886":"#trainClean.replace([\"female\",\"male\"],[0,1],inplace = True)\ntrainClean.replace([\"C\",\"Q\",\"S\"],[0,1,2], inplace = True)\ntrainClean.head()\n","cc78caf9":"#testClean.replace([\"female\",\"male\"],[0,1],inplace = True)\ntestClean.replace([\"C\",\"Q\",\"S\"],[0,1,2], inplace = True)\ntestClean.head()","b251a1d5":"correlation = trainClean.corr()\ncorrelation.Survived.sort_values(ascending= True)","12186fdd":"from sklearn.preprocessing import StandardScaler\nss = StandardScaler()\n\nage = np.array(trainClean['Age']).reshape(-1,1)\nfare = np.array(trainClean['Fare']).reshape(-1,1)\nPclass = np.array(trainClean['Pclass']).reshape(-1,1)\nEmbarked = np.array(trainClean['Embarked']).reshape(-1,1)\n\nage1 = np.array(testClean['Age']).reshape(-1,1)\nfare1 = np.array(testClean['Fare']).reshape(-1,1)\nPclass1 = np.array(testClean['Pclass']).reshape(-1,1)\nEmbarked1 = np.array(testClean['Embarked']).reshape(-1,1)\n\ntrainClean['Age'] = ss.fit_transform(age)\ntrainClean['Fare'] = ss.fit_transform(fare)\ntrainClean['Pclass'] = ss.fit_transform(Pclass)\ntrainClean['Embarked'] = ss.fit_transform(Embarked)\n\ntestClean['Age'] = ss.fit_transform(age1)\ntestClean['Fare'] = ss.fit_transform(fare1)\ntestClean['Pclass'] = ss.fit_transform(Pclass1)\ntestClean['Embarked'] = ss.fit_transform(Embarked1)\n\n","b0136bfa":"sexOhe = pd.get_dummies(trainClean.Sex)\nsexOhe1 = pd.get_dummies(testClean.Sex)","644a19e3":"trainClean = trainClean.join(sexOhe)\ntestClean = testClean.join(sexOhe1)","4093bfb5":"trainClean.head()","113197be":"testClean.head()","554366b2":"from sklearn.model_selection import train_test_split\n\n\nX_train, X_test, y_train, y_test = train_test_split(trainClean[[\"female\",\"male\", \"Pclass\",\"Fare1\",\"child\",\"family\"]], trainClean.Survived, test_size = 0.30)\n\n\n\nprint (X_train.shape,X_test.shape, y_train.shape, y_test.shape)\n","6060f9f3":"from sklearn.ensemble import RandomForestClassifier\n\nrfc = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=1)\n\nrfc.fit(X_train, y_train)\n\npredictionrfc = rfc.predict(X_test)\n","3396933b":"from sklearn import svm\n\nclf = svm.SVC()\nclf.fit(X_train, y_train)\npredictionclf = clf.predict(X_test)\n","3736c22d":"from sklearn.linear_model import LogisticRegression\n\nlinreg = LogisticRegression(solver='liblinear', multi_class=\"ovr\")\nlinreg.fit(X_train,y_train)\npredictionlinreg = linreg.predict(X_test)\n\n","b54f8e82":"lin_clf = svm.LinearSVC()\nlin_clf.fit(X_train, y_train)\npredictionlin_clf = lin_clf.predict(X_test)","4d97c052":"from sklearn import neighbors\nknn = neighbors.KNeighborsClassifier(n_neighbors = 3)\n\nknn.fit(X_train, y_train)\n\npredictionknn = knn.predict(X_test)","b7225aa1":"from sklearn.metrics import accuracy_score\n\naccuracyrfc=accuracy_score(y_test,predictionrfc)\naccuracyclf=accuracy_score(y_test,predictionclf)\naccuracylin_clf=accuracy_score(y_test,predictionlin_clf)\naccuracyknn=accuracy_score(y_test,predictionknn)\naccuracylinreg=accuracy_score(y_test,predictionlinreg)\n","1f0c1f4a":"models = pd.DataFrame({\n    'Model': ['Random Forest', 'KNN', 'Logistic Regression', \n              \"Linear SVC\", \"SVM\"],\n    'Score': [accuracyrfc, accuracyknn, accuracylinreg, \n              accuracyclf, accuracyclf]})\nmodels.sort_values(by='Score', ascending=False)","692473c4":"\nX_testFinal = testClean.drop('PassengerId', axis = 1)\nX_train =  trainClean[[\"female\",\"male\", \"Pclass\",\"Fare1\",\"child\",\"family\"]]\ny_train =  trainClean.Survived\nrfc = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=1)\nrfc.fit(X_train, y_train)","3e0dba39":"submission_predictions = rfc.predict(X_testFinal[[\"female\", \"male\", \"Pclass\",\"Fare1\",\"child\",\"family\"]]) # pr\u00e9diction faite sur le X_test (ce dernier qui est rest\u00e9 non touch\u00e9 durant tout le projet)","23016e43":"submission = pd.DataFrame({            # export des r\u00e9sultats dans un format csv \n        \"PassengerId\": test[\"PassengerId\"],\n        \"Survived\": submission_predictions\n    })\n\nsubmission.to_csv(\"titanic2.csv\", index=False)\nprint(submission.shape)","a5761f6c":"## Data Featuring : creating new column with Age, Family, and Fare price","b41d7b9d":"# Import Librairies and first visualisation","6721b799":"## Train test split then algorythm fitting","8d6f925f":"## Data Cleaning","08d20afc":"## Data Pre-Processing","91f87a44":"### Scaling + One hot encoder","85a6b6af":"## Execution of the random forest algorythm on the test set and export results\n","fd39e06c":"### Cleaning and replace discrete values by quantitative values","ca70dac0":"### Creating a column family, person with a family are more likely to survive","b0d0bd59":"## DataViz","c6e23208":"### Age column : transform to have the child (more likely to survive), average, and old person","fa1f660d":"### Creating a column Fare to regroup low, average and high fare","bc146924":"## Result"}}