{"cell_type":{"bcbc94db":"code","bbb03ad4":"code","581b8aa2":"code","ad59326a":"code","686a6971":"code","0d2a765d":"code","9745cc97":"code","03bd1ee1":"code","2cccd54b":"code","22ad1ff9":"code","d4f1ebb5":"code","98dfca73":"code","d81beea7":"code","ad93f181":"code","14a5ee2b":"code","03552699":"code","0c7c1406":"code","5233faba":"code","b58577e2":"code","6deb7df9":"code","438486a3":"code","1379294c":"code","078c88ee":"code","5633c8c7":"code","f7f55de5":"code","9f7d28a1":"code","00f61c0b":"code","f950b18b":"code","146538cc":"code","f58b4d1d":"code","7d081198":"code","11188737":"code","07f28062":"code","22c3755c":"code","c4d14121":"code","5e793252":"code","03e61af8":"code","992cd298":"code","c17f46fe":"code","5328667a":"code","41206752":"code","ef71a025":"code","02d54ed4":"code","85a984f0":"code","b1ccc430":"code","84c24977":"code","77facf16":"code","0d94e6ff":"code","2fe09371":"code","52492b22":"code","b3abc806":"code","8661c60b":"code","6cfac74b":"code","f223ba45":"code","0370560f":"code","5241b9a0":"code","81dfd31c":"code","c05709cc":"code","0ad2fbe5":"code","64a87b18":"code","a72b9325":"code","8da8ddab":"code","1a7340e0":"markdown","f7326b03":"markdown","88872ae2":"markdown","2fcaa3e3":"markdown","85aede25":"markdown","a51372ae":"markdown","00fedcc4":"markdown","0c55fe17":"markdown","a1e4aeca":"markdown","527216d4":"markdown","d2265eb8":"markdown","5354b434":"markdown","897cca6b":"markdown","efddf8c1":"markdown","7048dfac":"markdown","d12a935e":"markdown","fb88b8db":"markdown","299f98ae":"markdown"},"source":{"bcbc94db":"import numpy as np \nimport pandas as pd \nimport torch\nfrom torch.utils.data import Dataset, random_split, DataLoader\nfrom PIL import Image\nimport torchvision.models as models\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport torchvision.transforms as T\nfrom sklearn.metrics import f1_score\nimport torch.nn.functional as F\nimport torch.nn as nn\nfrom torchvision.utils import make_grid","bbb03ad4":"DATA_DIR = '..\/input\/jovian-pytorch-z2g\/Human protein atlas'\n\nTRAIN_DIR = DATA_DIR + '\/train'                           # Contains training images\nTEST_DIR = DATA_DIR + '\/test'                             # Contains test images\n\nTRAIN_CSV = DATA_DIR + '\/train.csv'                       # Contains real labels for training images\nTEST_CSV = '..\/input\/jovian-pytorch-z2g\/submission.csv'   # Contains dummy labels for test image","581b8aa2":"train = pd.read_csv(TRAIN_CSV)\ntest = pd.read_csv(TEST_CSV)","ad59326a":"train.head()","686a6971":"test.head()","0d2a765d":"labels = {\n    0: 'Mitochondria',\n    1: 'Nuclear bodies',\n    2: 'Nucleoli',\n    3: 'Golgi apparatus',\n    4: 'Nucleoplasm',\n    5: 'Nucleoli fibrillar center',\n    6: 'Cytosol',\n    7: 'Plasma membrane',\n    8: 'Centrosome',\n    9: 'Nuclear speckles'\n}","9745cc97":"# Encoding the labels to vectors\ndef encode_label(label):\n    target = torch.zeros(10)\n    for l in str(label).split(' '):\n        target[int(l)] = 1.\n    return target\n\n# Decoding the vectors back to their original labels\ndef decode_target(target, text_labels=False, threshold=0.5):\n    result = []\n    for i, x in enumerate(target):\n        if (x >= threshold):\n            if text_labels:\n                result.append(labels[i] + \"(\" + str(i) + \")\")\n            else:\n                result.append(str(i))\n    return ' '.join(result)","03bd1ee1":"encode_label('2 4 5')","2cccd54b":"decode_target(torch.tensor([0., 0., 1., 0., 1., 1., 0., 0., 0., 0.]))","22ad1ff9":"decode_target(torch.tensor([0., 0., 1., 0., 1., 1., 0., 0., 0., 0.]),text_labels=True)","d4f1ebb5":"class HumanProteinDataset(Dataset):\n    def __init__(self, df, root_dir, transform=None):\n        self.df = df\n        self.transform = transform\n        self.root_dir = root_dir\n        \n    def __len__(self):\n        return len(self.df)    \n    \n    def __getitem__(self, idx):\n        row = self.df.loc[idx]\n        img_id, img_label = row['Image'], row['Label']\n        img_fname = self.root_dir + \"\/\" + str(img_id) + \".png\"\n        img = Image.open(img_fname)\n        if self.transform:\n            img = self.transform(img)\n        return img, encode_label(img_label)","98dfca73":"train_transform = T.Compose([T.RandomHorizontalFlip(), \n                       T.RandomRotation(10), \n                       T.ColorJitter(brightness=0.1, contrast=0.05, hue=0.1), \n                       T.ToTensor()])\nval_transform = T.Compose([T.ToTensor()])","d81beea7":"np.random.seed(42)\nlen_df = np.random.rand(len(train)) < 0.8\n\ntrain_df = train[len_df].reset_index()\nval_df = train[~len_df].reset_index()","ad93f181":"len(len_df)","14a5ee2b":"train_ds = HumanProteinDataset(train_df, TRAIN_DIR, transform=train_transform)\nval_ds = HumanProteinDataset(val_df, TRAIN_DIR, transform=val_transform)\nlen(train_df), len(val_df)","03552699":"def show_sample(img, target, invert=True):\n    if invert:\n        plt.imshow(1 - img.permute((1, 2, 0)))\n    else:\n        plt.imshow(img.permute(1, 2, 0))\n    print('Labels:', decode_target(target, text_labels=True))","0c7c1406":"show_sample(*train_ds[0], invert=False)","5233faba":"show_sample(*train_ds[0])","b58577e2":"# First we will set a batch size\nbatch_size = 64","6deb7df9":"# Then we will create training and validation data loaders\ntrain_dl = DataLoader(train_ds, batch_size, shuffle=True, num_workers=2, pin_memory=True)\nval_dl = DataLoader(val_ds, batch_size*2, num_workers=2, pin_memory=True)","438486a3":"def show_batch(dl, invert=True):\n    for images, labels in dl:\n        fig, ax = plt.subplots(figsize=(16, 8))\n        ax.set_xticks([]); ax.set_yticks([])\n        data = 1-images if invert else images\n        ax.imshow(make_grid(data, nrow=16).permute(1, 2, 0))\n        break","1379294c":"def F_score(output, label, threshold=0.5, beta=1):\n    prob = output > threshold\n    label = label > threshold\n\n    TP = (prob & label).sum(1).float()\n    TN = ((~prob) & (~label)).sum(1).float()\n    FP = (prob & (~label)).sum(1).float()\n    FN = ((~prob) & label).sum(1).float()\n\n    precision = torch.mean(TP \/ (TP + FP + 1e-12))\n    recall = torch.mean(TP \/ (TP + FN + 1e-12))\n    F2 = (1 + beta**2) * precision * recall \/ (beta**2 * precision + recall + 1e-12)\n    return F2.mean(0)","078c88ee":"class MultilabelImageClassificationBase(nn.Module):\n    def training_step(self, batch):\n        images, targets = batch \n        out = self(images)                      \n        loss = F.binary_cross_entropy(out, targets)      \n        return loss\n    \n    def validation_step(self, batch):\n        images, targets = batch \n        out = self(images)                           # Generate predictions\n        loss = F.binary_cross_entropy(out, targets)  # Calculate loss\n        score = F_score(out, targets)\n        return {'val_loss': loss.detach(), 'val_score': score.detach() }\n        \n    def validation_epoch_end(self, outputs):\n        batch_losses = [x['val_loss'] for x in outputs]\n        epoch_loss = torch.stack(batch_losses).mean()   # Combine losses\n        batch_scores = [x['val_score'] for x in outputs]\n        epoch_score = torch.stack(batch_scores).mean()      # Combine accuracies\n        return {'val_loss': epoch_loss.item(), 'val_score': epoch_score.item()}\n    \n    def epoch_end(self, epoch, result):\n        print(\"Epoch [{}], train_loss: {:.4f}, val_loss: {:.4f}, val_score: {:.4f}\".format(\n            epoch, result['train_loss'], result['val_loss'], result['val_score']))","5633c8c7":"class ProteinCnnModel(MultilabelImageClassificationBase):\n    def __init__(self):\n        super().__init__()\n        # Use a pretrained model\n        self.network = models.resnet34(pretrained=True)\n        # Replace last layer\n        num_ftrs = self.network.fc.in_features\n        self.network.fc = nn.Linear(num_ftrs, 10)\n    \n    def forward(self, xb):\n        return torch.sigmoid(self.network(xb))\n    \n    def freeze(self):\n        # To freeze the residual layers\n        for param in self.network.parameters():\n            param.require_grad = False\n        for param in self.network.fc.parameters():\n            param.require_grad = True\n    \n    def unfreeze(self):\n        # Unfreeze all layers\n        for param in self.network.parameters():\n            param.require_grad = True","f7f55de5":"model = ProteinCnnModel()\nmodel","9f7d28a1":"# Setting the default device to 'cuda'\ndef get_default_device():\n    \"\"\"Pick GPU if available, else CPU\"\"\"\n    if torch.cuda.is_available():\n        return torch.device('cuda')\n    else:\n        return torch.device('cpu')\n    \ndef to_device(data, device):\n    \"\"\"Move tensor(s) to chosen device\"\"\"\n    if isinstance(data, (list,tuple)):\n        return [to_device(x, device) for x in data]\n    return data.to(device, non_blocking=True)\n\nclass DeviceDataLoader():\n    \"\"\"Wrap a dataloader to move data to a device\"\"\"\n    def __init__(self, dl, device):\n        self.dl = dl\n        self.device = device\n        \n    def __iter__(self):\n        \"\"\"Yield a batch of data after moving it to device\"\"\"\n        for b in self.dl: \n            yield to_device(b, self.device)\n\n    def __len__(self):\n        \"\"\"Number of batches\"\"\"\n        return len(self.dl)","00f61c0b":"device = get_default_device()\ndevice","f950b18b":"train_dl = DeviceDataLoader(train_dl, device)\nval_dl = DeviceDataLoader(val_dl, device)\nto_device(model, device);","146538cc":"def try_batch(dl):\n    for images, labels in dl:\n        print('images.shape:', images.shape)\n        out = model(images)\n        print('out.shape:', out.shape)\n        print('out[0]:', out[0])\n        break\n\ntry_batch(train_dl)","f58b4d1d":"from tqdm.notebook import tqdm","7d081198":"@torch.no_grad()\ndef evaluate(model, val_loader):\n    model.eval()\n    outputs = [model.validation_step(batch) for batch in val_loader]\n    return model.validation_epoch_end(outputs)\n\ndef get_lr(optimizer):\n    for param_group in optimizer.param_groups:\n        return param_group['lr']\n\ndef fit_one_cycle(epochs, max_lr, model, train_loader, val_loader, \n                  weight_decay=0, grad_clip=None, opt_func=torch.optim.SGD):\n    torch.cuda.empty_cache()\n    history = []\n    \n    # Set up cutom optimizer with weight decay\n    optimizer = opt_func(model.parameters(), max_lr, weight_decay=weight_decay)\n    # Set up one-cycle learning rate scheduler\n    sched = torch.optim.lr_scheduler.OneCycleLR(optimizer, max_lr, epochs=epochs, \n                                                steps_per_epoch=len(train_loader))\n    \n    for epoch in range(epochs):\n        # Training Phase \n        model.train()\n        train_losses = []\n        lrs = []\n        for batch in tqdm(train_loader):\n            loss = model.training_step(batch)\n            train_losses.append(loss)\n            loss.backward()\n            \n            # Gradient clipping\n            if grad_clip: \n                nn.utils.clip_grad_value_(model.parameters(), grad_clip)\n            \n            optimizer.step()\n            optimizer.zero_grad()\n            \n            # Record & update learning rate\n            lrs.append(get_lr(optimizer))\n            sched.step()\n        \n        # Validation phase\n        result = evaluate(model, val_loader)\n        result['train_loss'] = torch.stack(train_losses).mean().item()\n        result['lrs'] = lrs\n        model.epoch_end(epoch, result)\n        history.append(result)\n    return history","11188737":"model = to_device(ProteinCnnModel(), device)","07f28062":"history = [evaluate(model, val_dl)]\nhistory","22c3755c":"model.freeze()","c4d14121":"epochs = 5\nmax_lr = 0.01\ngrad_clip = 0.1\nweight_decay = 1e-4\nopt_func = torch.optim.Adam","5e793252":"%%time\nhistory += fit_one_cycle(epochs, max_lr, model, train_dl, val_dl, \n                         grad_clip=grad_clip, \n                         weight_decay=weight_decay, \n                         opt_func=opt_func)","03e61af8":"model.unfreeze()","992cd298":"%%time\nhistory += fit_one_cycle(epochs, 0.001, model, train_dl, val_dl, \n                         grad_clip=grad_clip, \n                         weight_decay=weight_decay, \n                         opt_func=opt_func)","c17f46fe":"def plot_scores(history):\n    scores = [x['val_score'] for x in history]\n    plt.plot(scores, '-x')\n    plt.xlabel('epoch')\n    plt.ylabel('score')\n    plt.title('F1 score vs. No. of epochs');","5328667a":"plot_scores(history)","41206752":"def plot_losses(history):\n    train_losses = [x.get('train_loss') for x in history]\n    val_losses = [x['val_loss'] for x in history]\n    plt.plot(train_losses, '-bx')\n    plt.plot(val_losses, '-rx')\n    plt.xlabel('epoch')\n    plt.ylabel('loss')\n    plt.legend(['Training', 'Validation'])\n    plt.title('Loss vs. No. of epochs');","ef71a025":"plot_losses(history)","02d54ed4":"def plot_lrs(history):\n    lrs = np.concatenate([x.get('lrs', []) for x in history])\n    plt.plot(lrs)\n    plt.xlabel('Batch no.')\n    plt.ylabel('Learning rate')\n    plt.title('Learning Rate vs. Batch no.');","85a984f0":"plot_lrs(history)","b1ccc430":"def predict_single(image):\n    xb = image.unsqueeze(0)\n    xb = to_device(xb, device)\n    preds = model(xb)\n    prediction = preds[0]\n    print(\"Prediction: \", prediction)\n    show_sample(image, prediction)","84c24977":"test_dataset = HumanProteinDataset(test, TEST_DIR, transform=train_transform)","77facf16":"img, target = test_dataset[0]\nimg.shape","0d94e6ff":"predict_single(test_dataset[100][0])","2fe09371":"predict_single(test_dataset[74][0])","52492b22":"predict_single(test_dataset[105][0])","b3abc806":"predict_single(test_dataset[0][0])","8661c60b":"predict_single(test_dataset[2000][0])","6cfac74b":"predict_single(test_dataset[1994][0])","f223ba45":"test_dl = DeviceDataLoader(DataLoader(test_dataset, batch_size, num_workers=2, pin_memory=True), device)","0370560f":"@torch.no_grad()\ndef predict_dl(dl, model):\n    torch.cuda.empty_cache()\n    batch_probs = []\n    for xb, _ in tqdm(dl):\n        probs = model(xb)\n        batch_probs.append(probs.cpu().detach())\n    batch_probs = torch.cat(batch_probs)\n    return [decode_target(x) for x in batch_probs]","5241b9a0":"test_preds = predict_dl(test_dl, model)","81dfd31c":"submission_df = pd.read_csv(TEST_CSV)\nsubmission_df.Label = test_preds\nsubmission_df.head()","c05709cc":"sub_fname = 'submission.csv'","0ad2fbe5":"submission_df.to_csv(sub_fname, index=False)","64a87b18":"!pip install jovian --upgrade","a72b9325":"import jovian","8da8ddab":"jovian.commit(project='zerogans-protein-competition')","1a7340e0":"Now we will load the training and the testing data. When you start a notebook in a Kaggle Competition, the data is automotically loaded in the \/input folder.","f7326b03":"You might be wondering what `invert` does? Well, some of the images in our dataset are dark, so in order to make them lighter we use the `invert` function.","88872ae2":"Yay! Its giving correct results. Now, lets get the protein names corresponding to the labels. This is the reason we created a dictionary of labels and their corresponding protein names.","2fcaa3e3":"Okay.... This is correct. Now let's check if we get the original label using the decoding code...","85aede25":"## Training and Validation datasets","a51372ae":"## Let's make predictions now:","00fedcc4":"Let's have a look at how the image of a sample protiein looks like in our dataset.","0c55fe17":"## Let's start creating our model:","a1e4aeca":"Now we will encode the labels as vectors of 1's and 0's. For example is the label is `'2 4 5'` then we will encode it as `([0 0 1 0 1 1 0 0 0 0])`","527216d4":"For our understanding and for later use we will create a dictionary of labels with their corresponding protein names.","d2265eb8":"## Let's create Datasets and Dataloaders","5354b434":"Let's see if the code works and gives us correct results what we expect....","897cca6b":"### Now its time to create DataLoaders:","efddf8c1":"## It's time to train our model:","7048dfac":"First, freeze the ResNet layers and train some epochs. This only trains the final layer to start classifying the images.","d12a935e":"Without `invert`","fb88b8db":"## We have to submit it, so let's create a submission file:","299f98ae":"Now we will do some transformation on the data using the `transfoms` method."}}