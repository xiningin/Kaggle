{"cell_type":{"a2843912":"code","87c60a7d":"code","0f6c230a":"code","605e28f2":"code","ce3cd663":"code","a4cd026a":"code","2a9cab4a":"code","e774fec4":"code","cec96499":"code","6f4b68ac":"code","6819be38":"code","b04c39da":"code","01b9d399":"code","b81c25c8":"code","3f1d14e1":"code","351bcb9c":"code","5a751f2e":"code","c0d91a2b":"code","129b0228":"code","3943a4a7":"code","32bc3cc2":"code","64bff3f8":"code","b8479662":"code","7070c7ce":"code","a00d66a1":"code","2467d27a":"code","f0097b76":"code","c62592d2":"code","70d803a3":"code","adff3a1f":"code","f6a39867":"code","5907b7f2":"code","d4e57b27":"code","c1d49b82":"code","25abf11d":"code","930372b1":"code","6f1ac30c":"code","31edbed1":"code","9eadbeff":"code","ec472254":"code","0f46cb39":"code","bf33f4be":"code","4fba77eb":"code","d482b34a":"code","ef2f1cf0":"code","2ae5d75b":"code","3660859d":"code","ced3bae7":"code","bf2102a6":"code","5e57ea23":"code","60c4cc1e":"code","1ae61b6c":"code","696ec9b6":"markdown","ac5e46c8":"markdown","d1dea475":"markdown","eb4b18a7":"markdown","1f07d676":"markdown","40c8ac21":"markdown","f9e40034":"markdown","4feaa223":"markdown","a9ab0bf0":"markdown","d950e6e9":"markdown","5a673d9e":"markdown","abaeb1d2":"markdown","b91d75c4":"markdown","c3b61f82":"markdown","7ff861c7":"markdown","45d29b66":"markdown","81d7f34f":"markdown","5b796d6a":"markdown","1e8d65f6":"markdown","149d59ea":"markdown","93bf2e60":"markdown","0be2d9ad":"markdown","5d3c6f3c":"markdown","a79b98da":"markdown","b86d162e":"markdown","7e442b01":"markdown","63f88b79":"markdown"},"source":{"a2843912":"import numpy as np\nimport pandas as pd\nfrom pandas import Series\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns","87c60a7d":"### \u0418\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435, \u0441 \u043a\u043e\u0442\u043e\u0440\u044b\u043c\u0438 \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c ","0f6c230a":"DATA_DIR = '\/kaggle\/input\/sf-scoring\/'\ndata_train = pd.read_csv(DATA_DIR+'train.csv')\ndata_test = pd.read_csv(DATA_DIR+'test.csv')\nsample_submission = pd.read_csv(DATA_DIR+'sample_submission.csv')\nprint('\u0420\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u044c data_train: ', data_train.shape)\ndisplay(data_train.head())\nprint('\u0420\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u044c data_test: ', data_test.shape)\ndisplay(data_test.head())\nprint('\u0420\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u044c sample_submission.csv: ', sample_submission.shape)\ndisplay(sample_submission.head())","605e28f2":"data_train.info()","ce3cd663":"data_test.info()","a4cd026a":"sample_submission.info()","2a9cab4a":"data_train['sample'] = 1\ndata_test['sample'] = 0\ndata_test['default'] = 0\ndata = data_test.append(data_train, sort=False).reset_index(drop=True)","e774fec4":"data.shape","cec96499":"data.head()","6f4b68ac":"data.info()","6819be38":"data.describe()","b04c39da":"data.dtypes.value_counts()","01b9d399":"data.isna().sum()","b81c25c8":"data['education'].value_counts().plot.barh()\ndata['education'].value_counts()","3f1d14e1":"data['education'].fillna('SCH', inplace = True)","351bcb9c":"data.isna().sum()","5a751f2e":"data['app_date'] = pd.to_datetime(data['app_date'], format='%d%b%Y')","c0d91a2b":"data['days'] = (data['app_date'] - data['app_date'].min()).dt.days","129b0228":"time_cols = ['app_date']\nbin_cols = ['sex', 'car', 'car_type', 'good_work', 'foreign_passport']\ncat_cols = ['education', 'region_rating', 'home_address', 'work_address', 'sna', 'first_time']\nnum_cols = ['age', 'decline_app_cnt', 'score_bki', 'bki_request_cnt', 'income', 'days']","3943a4a7":"from sklearn.feature_selection import f_classif, mutual_info_classif\n\nimp_num = pd.Series(f_classif(data[num_cols], data['default'])[0], index=num_cols)\nimp_num.sort_values(inplace=True)\nimp_num.plot(kind='barh')","32bc3cc2":"from sklearn.preprocessing import LabelEncoder, OneHotEncoder, StandardScaler\nfrom sklearn.feature_selection import f_classif, mutual_info_classif\n\nlabel_encoder = LabelEncoder()\n\nfor column in bin_cols:\n    data[column] = label_encoder.fit_transform(data[column])","64bff3f8":"from sklearn.feature_selection import f_classif, mutual_info_classif","b8479662":"label_encoder_ed = LabelEncoder()\n\ndata['education'] = pd.Series(label_encoder_ed.fit_transform(data['education']))\nprint(dict(enumerate(label_encoder_ed.classes_)))","7070c7ce":"imp_cat = Series(mutual_info_classif(data[bin_cols + cat_cols], data['default'], discrete_features=True), index=bin_cols + cat_cols)\nimp_cat.sort_values(inplace=True)\nimp_cat.plot(kind='barh')","a00d66a1":"num_cols_an = ['age', 'decline_app_cnt', 'score_bki', 'bki_request_cnt', 'income', 'days']","2467d27a":"for i in num_cols_an:\n    plt.figure()\n    sns.distplot(data[i], kde=False, rug=False)\n    plt.title(i)\n    plt.show()","f0097b76":"for i in num_cols_an:\n    plt.figure()\n    sns.distplot(np.log(data[i] + 1), kde=False, rug=False)\n    plt.title(i)\n    plt.show()","c62592d2":"data[num_cols].describe()","70d803a3":"data_1 = data[num_cols][data['sample'] == 1]\nq_min = data.quantile(q=0.25) - 1.5 *(data.quantile(q=0.75) - data.quantile(q=0.25))\nq_max = data.quantile(q=0.25) + 1.5 *(data.quantile(q=0.75) - data.quantile(q=0.25))","adff3a1f":"qfil = (data_1 < q_min) | (data_1 > q_max)\nqfil.sum()\nqfil.sum()\/len(qfil)","f6a39867":"fig, ax = plt.subplots(figsize=(20, 15))\nsns_heatmap = sns.heatmap(qfil, yticklabels=False, cmap='summer')","5907b7f2":"sns.heatmap(data[num_cols].corr().abs(), vmin=0, vmax=1)","d4e57b27":"data = pd.get_dummies(data, columns=cat_cols, dummy_na=False)","c1d49b82":"data[num_cols] = pd.DataFrame(StandardScaler().fit_transform(data[num_cols]), columns=num_cols)","25abf11d":"data.drop('app_date', axis=1, inplace=True)\ndata.columns\ndata","930372b1":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import auc, roc_auc_score, roc_curve\n\nrandom_state=42","6f1ac30c":"X = data[data['sample'] == 1].drop(['client_id', 'sample', 'default'], axis=1)\ny = data[data['sample'] == 1]['default']","31edbed1":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=random_state)","9eadbeff":"model = LogisticRegression(random_state=42, max_iter=10000)\nmodel.fit(X_train, y_train)\n\nprobs = model.predict_proba(X_test)\nprobs = probs[:,1]\n\nfpr, tpr, threshold = roc_curve(y_test, probs)\nroc_auc = roc_auc_score(y_test, probs)\n\nplt.figure()\nplt.plot([0, 1], label='Baseline', linestyle='--')\nplt.plot(fpr, tpr, label = 'Regression')\nplt.title('Logistic Regression ROC AUC = %0.3f' % roc_auc)\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.legend(loc = 'lower right')\nplt.show()","ec472254":"from sklearn.model_selection import GridSearchCV\n\npenalty = ['l1', 'l2']\nC = np.logspace(0, 4, 10)\nhyperparameters = dict(C=C, penalty=penalty)\nmodel = LogisticRegression(solver='liblinear', max_iter=10000)\nmodel.fit(X_train, y_train)\nclf = GridSearchCV(model, hyperparameters, cv=5, verbose=0)\nbest_model = clf.fit(X_train, y_train)\n\nprint('\u041b\u0443\u0447\u0448\u0435\u0435 Penalty:', best_model.best_estimator_.get_params()['penalty'])\nprint('\u041b\u0443\u0447\u0448\u0435\u0435 C:', best_model.best_estimator_.get_params()['C'])","0f46cb39":"probs = best_model.predict_proba(X_test)\nprobs = probs[:, 1]\n\nfpr, tpr, threshold = roc_curve(y_test, probs)\nroc_auc = roc_auc_score(y_test, probs)\n\nplt.figure()\nplt.plot([0, 1], label='Baseline', linestyle='--')\nplt.plot(fpr, tpr, label = 'Regression')\nplt.title('Logistic Regression ROC AUC = %0.3f' % roc_auc)\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.legend(loc = 'lower right')\nplt.show()","bf33f4be":"t_data = data[data['sample'] == 0].drop(['client_id', 'sample', 'default'], axis=1)","4fba77eb":"t_data.sample(10)","d482b34a":"t_data.shape, data_test.shape","ef2f1cf0":"sample_submission","2ae5d75b":"predict_submission = best_model.predict_proba(t_data)","3660859d":"best_model.classes_","ced3bae7":"submission = pd.DataFrame(data[data['sample'] == 0]['client_id'])","bf2102a6":"submission['default'] = predict_submission[:, 1]","5e57ea23":"submission","60c4cc1e":"submission.sample(10)","1ae61b6c":"submission.to_csv('submission.csv', index=False)","696ec9b6":"### \u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u0433\u0440\u0430\u0444\u0438\u043a\u0438 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445, \u0447\u0442\u043e\u0431\u044b \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0441\u0442\u0430\u043b\u0438 \u043c\u0435\u043d\u0435\u0435 \u0441\u043c\u0435\u0449\u0435\u043d\u043d\u044b\u043c\u0438. ","ac5e46c8":"#### \u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438, \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435, \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u0438 \u0437\u0430\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043a\u0430\u0442\u0435\u0433\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0432 \u043e\u0434\u043d\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\u043e\u0435 \u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u043e, \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0432 \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0438 \u0446\u0435\u043b\u0435\u0432\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e default","d1dea475":"#### \u0412\u044b\u0432\u043e\u0434: \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0437\u043d\u0430\u0447\u0438\u043c\u044b\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 - sna.","eb4b18a7":"# \u041f\u0440\u043e\u0435\u043a\u0442 4. \"\u041a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440 \u0433\u043e\u0432\u043e\u0440\u0438\u0442 \u043d\u0435\u0442\"","1f07d676":"#### \u041d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0437\u043d\u0430\u0447\u0438\u043c\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a - score_bki","40c8ac21":"#### \u0412\u044b\u0432\u043e\u0434: \u0432 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435 73799 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432, \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435 - 36349.  \u0412\u0441\u0435\u0433\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 478, \u0432\u0441\u0435 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 education. ","f9e40034":"### Submission","4feaa223":"### \u0417\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u044c \u043d\u0435\u043f\u0440\u0435\u0440\u044b\u0432\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439","a9ab0bf0":"### \u0414\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u043c \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0435 \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u043e\u0434\u0438\u043d \u0434\u0430\u0442\u0430\u0441\u0435\u0442.","d950e6e9":"#### \u041f\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u043c, \u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c \u0432\u0441\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438. ","5a673d9e":"## \u0417\u0430\u0434\u0430\u0447\u0430: \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c \u0431\u0430\u043d\u043a\u043e\u0432\u0441\u043a\u043e\u0433\u043e \u0441\u043a\u043e\u0440\u0438\u043d\u0433\u0430, \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0449\u0443\u044e \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044c \u0434\u0435\u0444\u043e\u043b\u0442\u0430 \u043a\u043b\u0438\u0435\u0442\u0430","abaeb1d2":"### \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438","b91d75c4":"### \u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438","c3b61f82":"### \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0441\u0433\u0440\u0443\u043f\u043f\u0438\u0440\u0443\u0435\u043c \u0432 \u0442\u0440\u0438 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u043f\u043e \u0442\u0438\u043f\u0443 \u0438\u0445 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 (\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435, \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435, \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u0438 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435) \u0434\u043b\u044f \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430 \u043f\u0440\u0438 \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0438 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430.","7ff861c7":"#### \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c dummy-\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435","45d29b66":"### \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445:\nclient_id - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n\neducation - \u0443\u0440\u043e\u0432\u0435\u043d\u044c \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f\n\nsex - \u043f\u043e\u043b \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430\n\nage - \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430\n\ncar - \u0444\u043b\u0430\u0433 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f\n\ncar_type - \u0444\u043b\u0430\u0433 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f \u0438\u043d\u043e\u043c\u0430\u0440\u043a\u0438\n\ndecline_app_cnt - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0448\u043b\u044b\u0445 \u0437\u0430\u044f\u0432\u043e\u043a\n\ngood_work - \u0444\u043b\u0430\u0433 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u201c\u0445\u043e\u0440\u043e\u0448\u0435\u0439\u201d \u0440\u0430\u0431\u043e\u0442\u044b\n\nbki_request_cnt - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u0411\u041a\u0418\n\nhome_address - \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0437\u0430\u0442\u043e\u0440 \u0434\u043e\u043c\u0430\u0448\u043d\u0435\u0433\u043e \u0430\u0434\u0440\u0435\u0441\u0430\n\nwork_address - \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0437\u0430\u0442\u043e\u0440 \u0440\u0430\u0431\u043e\u0447\u0435\u0433\u043e \u0430\u0434\u0440\u0435\u0441\u0430\n\nincome - \u0434\u043e\u0445\u043e\u0434 \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430\n\nforeign_passport - \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0437\u0430\u0433\u0440\u0430\u043d\u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430\n\nsna - \u0441\u0432\u044f\u0437\u044c \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430 \u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c\u0438 \u0431\u0430\u043d\u043a\u0430\n\nfirst_time - \u0434\u0430\u0432\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0435\n\nscore_bki - \u0441\u043a\u043e\u0440\u0438\u043d\u0433\u043e\u0432\u044b\u0439 \u0431\u0430\u043b\u043b \u043f\u043e \u0434\u0430\u043d\u043d\u044b\u043c \u0438\u0437 \u0411\u041a\u0418\n\nregion_rating - \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0440\u0435\u0433\u0438\u043e\u043d\u0430\n\napp_date - \u0434\u0430\u0442\u0430 \u043f\u043e\u0434\u0430\u0447\u0438 \u0437\u0430\u044f\u0432\u043a\u0438\n\ndefault - \u0444\u043b\u0430\u0433 \u0434\u0435\u0444\u043e\u043b\u0442\u0430 \u043f\u043e \u043a\u0440\u0435\u0434\u0438\u0442\u0443","81d7f34f":"### \u0414\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u0438 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u0438 \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e mutual_info_classif \u0438\u0437 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 sklearn.","5b796d6a":"### \u041e\u0446\u0435\u043d\u043a\u0430 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0439","1e8d65f6":"## \u0427\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438: age, decline_app_cnt, score_bki, bki_request_cnt, income, days.","149d59ea":"#### \u041a\u0430\u043a \u043c\u044b \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u043b\u0438 \u0440\u0430\u043d\u0435\u0435, \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0438\u043c\u0435\u044e\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 education.","93bf2e60":"## \u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438: education, region_rating, home_address, work_address, sna, first_time.","0be2d9ad":"### \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u043a \u043c\u0430\u0448\u0438\u043d\u043d\u043e\u043c\u0443 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044e","5d3c6f3c":"#### \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a app_date \u0432 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 datetime \u0438 \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043d\u0430 \u0435\u0433\u043e \u043e\u0441\u043d\u043e\u0432\u0435 \u043d\u043e\u0432\u044b\u0439 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a - day","a79b98da":"### \u0426\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f - default","b86d162e":"#### \u0417\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u0435\u0442\u0441\u044f \u0447\u0430\u0449\u0435 \u0432\u0441\u0435\u0433\u043e - SCH","7e442b01":"### \u041f\u043e\u0438\u0441\u043a \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432","63f88b79":"### \u041f\u043e\u0434\u0431\u043e\u0440 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432"}}