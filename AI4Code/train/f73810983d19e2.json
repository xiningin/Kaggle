{"cell_type":{"07ac69bd":"code","ae8dfef8":"code","8eb04452":"code","c3ebbc4d":"code","98cc3853":"code","8cff891c":"code","49aebd0c":"code","47b66cfe":"code","7f8d7e17":"code","3419fea0":"code","6f4e1ae1":"code","bf07cd71":"code","98d19c32":"code","56a0fdc5":"code","f0c2776a":"code","20a98499":"code","44cfd200":"code","b38cf1bc":"markdown","27538d0f":"markdown","85ae5ca1":"markdown","11fa5868":"markdown","0edc443e":"markdown","c5d3a89d":"markdown","e4261e84":"markdown","fbe8a70a":"markdown","b9df7c55":"markdown"},"source":{"07ac69bd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfrom nltk.tokenize import sent_tokenize, word_tokenize\nfrom nltk.stem import PorterStemmer\nfrom nltk.corpus import stopwords\nfrom string import punctuation\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.metrics import accuracy_score, classification_report, confusion_matrix\nfrom sklearn.model_selection import GridSearchCV, StratifiedKFold, cross_val_score, train_test_split\nfrom sklearn.svm import SVC\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","ae8dfef8":"df = pd.read_csv(os.path.join('\/', 'kaggle', 'input', 'bbc-fulltext-and-category', 'bbc-text.csv'))\ndf.head()","8eb04452":"df.info()","c3ebbc4d":"df['category'].value_counts()","98cc3853":"df['category'].value_counts().plot.bar(figsize=(12, 8))","8cff891c":"le = LabelEncoder()\ndf['labels'] = le.fit_transform(df['category'])\ndf.head()","49aebd0c":"stemmer = PorterStemmer()\nto_exclude = set(stopwords.words('english') + list(punctuation))\nfilter_func = lambda text: ' '.join([stemmer.stem(word) for word in word_tokenize(text) if word not in to_exclude])","47b66cfe":"df['text'] = df['text'].apply(filter_func)\ndf.head()","7f8d7e17":"tf_vect = TfidfVectorizer(ngram_range=(1, 2))\nX = tf_vect.fit_transform(df['text'].values)\ny = df['labels'].values\n\nprint('X shape: {}, y shape: {}'.format(X.shape, y.shape))","3419fea0":"svc = SVC(random_state=1)\nsvc.get_params()","6f4e1ae1":"svc_grid = {\n    'kernel': ['poly', 'rbf', 'sigmoid', 'linear'],\n    'C': np.linspace(.1, .9, 6)\n}","bf07cd71":"cv = StratifiedKFold(n_splits=5, shuffle=True, random_state=1)\ngrid_search_estimator = GridSearchCV(svc, svc_grid, scoring='accuracy', cv=cv, n_jobs=-1)\ngrid_search_estimator.fit(X, y)","98d19c32":"grid_search_estimator.best_params_","56a0fdc5":"print('SVM best score: {:.8f}'.format(grid_search_estimator.best_score_))","f0c2776a":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=.2)\npredicted = grid_search_estimator.best_estimator_.fit(X_train, y_train).predict(X_test)","20a98499":"print(classification_report(y_test, predicted))","44cfd200":"print(confusion_matrix(y_test, predicted))","b38cf1bc":"Define grid","27538d0f":"Look at the best params and score","85ae5ca1":"Encode categories into labels","11fa5868":"Tokenize texts, stem and remove punctuation and stopwords","0edc443e":"Using TF-IDF vectorizer including 2-grams","c5d3a89d":"Download data and look at the top 5 records","e4261e84":"We will use SVM and find best kernel by GridSearch","fbe8a70a":"Confusion matrix and classification report(precision, recall, F1-score)","b9df7c55":"### Getting the data "}}