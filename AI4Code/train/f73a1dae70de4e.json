{"cell_type":{"703babdb":"code","ad8ed5cc":"code","feeee85e":"code","01d2369d":"code","f4268d51":"code","0b23fa59":"code","5921315b":"code","f2cb3a1f":"code","fd9719c1":"code","53a93260":"code","4575a8ab":"code","7badd7bc":"code","089070d4":"code","78384a14":"code","037d2651":"code","90151317":"code","95b7a764":"code","31f7f7bd":"code","a5839677":"code","cd1cd12a":"code","a83d23a7":"markdown","ba2a4ee9":"markdown","837fcbfb":"markdown","16c5fd6c":"markdown","94f516b3":"markdown","732583a0":"markdown","df0db2b4":"markdown","bedd33b9":"markdown"},"source":{"703babdb":"import os\nimport zipfile\nimport numpy as np\nimport pandas as pd\nimport random\nimport tensorflow as tf\nfrom tensorflow.keras.optimizers import RMSprop\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator, load_img\nfrom keras.utils import to_categorical\nfrom sklearn.model_selection import train_test_split","ad8ed5cc":"train_df = pd.read_csv('..\/input\/sign-language-mnist\/sign_mnist_train.csv')\ntrain_df.head()","feeee85e":"test_df = pd.read_csv('..\/input\/sign-language-mnist\/sign_mnist_test.csv')\ntest_df.head()","01d2369d":"labels = train_df['label'].values","f4268d51":"train_df.drop('label', axis=1, inplace=True)","0b23fa59":"images = train_df.values.reshape(-1, 28, 28, 1)","5921315b":"import matplotlib\nfrom matplotlib import pyplot as plt\n\nindex = 24 # change this index to see other images\nplt.imshow(images[index].reshape(28,28))\n","f2cb3a1f":"x_train, x_valid, y_train, y_valid = train_test_split(images, labels, test_size=0.3, random_state=42)","fd9719c1":"print('Training set size: ' + str(x_train.shape[0]))\nprint('Validation set size: ' + str(x_valid.shape[0]))\n","53a93260":"np.unique(labels) # label 9 missing, cannot use to_categorical() in keras to one hot encode","4575a8ab":"from sklearn import preprocessing\nlb = preprocessing.LabelBinarizer()\ny_train_onehot = lb.fit_transform(y_train)\ny_valid_onehot = lb.transform(y_valid)","7badd7bc":"batch_size = 128\nepochs = 50\nnum_classes = len(np.unique(labels)) # 24 classes","089070d4":"# Normalize train-validation data\nx_train = x_train\/255\nx_valid = x_valid\/255","78384a14":"from keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPooling2D, Dropout, Flatten, Dense, Activation, BatchNormalization\nfrom keras.optimizers import RMSprop\n\nmodel = Sequential()\n\nmodel.add(Conv2D(64, (3, 3), activation='relu', input_shape=(28, 28, 1)))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(64, (3, 3), activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\n\n#model.add(Conv2D(64, (3, 3), activation='relu'))\n#model.add(BatchNormalization())\n#model.add(MaxPooling2D(pool_size=(2, 2)))\n#model.add(Dropout(0.25))\n\nmodel.add(Flatten())\nmodel.add(Dense(512, activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.5))\nmodel.add(Dense(num_classes, activation='softmax')) \n\nmodel.compile(loss='categorical_crossentropy', optimizer=RMSprop(lr=0.001), metrics=['accuracy'])\n\nmodel.summary()","037d2651":"history = model.fit(x_train, y_train_onehot, validation_data = (x_valid, y_valid_onehot), epochs = epochs, batch_size = batch_size)","90151317":"# Retrieve a list of list results on training and test data sets for each training epoch\nacc      = history.history[     'acc' ]\nval_acc  = history.history[ 'val_acc' ]\nloss     = history.history[    'loss' ]\nval_loss = history.history['val_loss' ]\n\nplt.plot(range(epochs), acc, 'r', label='Training accuracy')\nplt.plot(range(epochs), val_acc, 'b', label='Validation accuracy')\nplt.title('Training and validation accuracy')\nplt.legend()\n\nplt.show()","95b7a764":"y_test = test_df['label']\ny_test_onehot = lb.transform(y_test)","31f7f7bd":"test_df.drop('label', axis=1, inplace=True)","a5839677":"x_test = test_df.values.reshape(-1,28,28,1)\/255","cd1cd12a":"model.evaluate(x_test, y_test_onehot, batch_size = batch_size)","a83d23a7":"# Load data","ba2a4ee9":"# Evaluate model on test set","837fcbfb":"# Fit model","16c5fd6c":"# Visualize some images in training set","94f516b3":"# Build CNN model","732583a0":"# Split train - validation set","df0db2b4":"# Import libraries","bedd33b9":"# Plot training - validation accuracy & loss"}}