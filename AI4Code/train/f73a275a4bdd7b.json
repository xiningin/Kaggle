{"cell_type":{"ce013d08":"code","9ac191b9":"code","71841641":"code","aec41321":"code","269a3a11":"code","daac30cc":"code","35af16fe":"code","d4f14a3c":"code","39b408f1":"code","6bf4e239":"code","677dff82":"code","d23b8559":"markdown","50dd4a97":"markdown","f1a772ec":"markdown","b93b9f37":"markdown","fe5edc4d":"markdown","ac620860":"markdown","f721d0fd":"markdown","4b1cc656":"markdown","38d3cf00":"markdown","b8fb9029":"markdown","b4f3855a":"markdown","f0d6f498":"markdown","2cd13772":"markdown"},"source":{"ce013d08":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt \nimport seaborn as sns \nfrom sklearn.model_selection import train_test_split \nfrom sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error\nfrom xgboost import XGBRegressor \nimport os \nimport shap \nsns.set() ","9ac191b9":"# Create pandas data frame\ndata = pd.read_csv(\"\/kaggle\/input\/petfinder-pawpularity-score\/train.csv\")\ndata = pd.DataFrame(data)\n\n# Define target and columns to drop\ntarget = \"Pawpularity\"\ndrop_cols = [\"Id\", target]  # ID not a predictive column\n\n# Split in to X and Y\nY = data[target]\nX = data.drop(columns = drop_cols)","71841641":"scores = {\n\t\"R2\": r2_score,\n\t\"mae\" : mean_absolute_error,\n\t\"mse\" : mean_squared_error\n}\nmetrics = {}\nfor score in scores:\n\tmetrics[score] = [] ","aec41321":"N = 5\nplotting = False\nfor k in range(N):\n\n    # Train test split \n    trainX, validateX, trainY, validateY = train_test_split(X, Y, test_size = 0.2) \n\n    # Train model \n    model = XGBRegressor() \n    model.fit(trainX, trainY) \n\n    # Predictions \n    predictions = model.predict(validateX) \n\n    # Validate predictions with scores \n    for score in scores:\n        value = scores[score](validateY, predictions)\n        metrics[score].append(value)\n\n    if plotting:\n        plt.scatter(predictions, validateY)\n        plt.show()","269a3a11":"average_scores = {}\nfor score in scores:\n\tavg = np.mean(metrics[score])\n\tprint(score + \": \" + str(avg) )\n\taverage_scores[score] = np.mean(avg) \n    ","daac30cc":"model = XGBRegressor()\nmodel.fit(X, Y) ","35af16fe":"explainer = shap.TreeExplainer(model)\nshap_values = explainer.shap_values(X) \nshap_values = pd.DataFrame(shap_values, columns = X.columns)\n\n# Need to create some mean_values\nmean_vals = {}\nfor column in X.columns:\n\tmean_vals[column] = np.mean(shap_values[column]) \n\nplt.barh(list(mean_vals.keys()), list(mean_vals.values()))\nplt.tight_layout()\nplt.show()","d4f14a3c":"test_data = pd.read_csv(\"\/kaggle\/input\/petfinder-pawpularity-score\/test.csv\")\ntest_data = pd.DataFrame(test_data)\n\n# Drop columns not predictive\ntest_drop_cols = [\"Id\"]\nto_predict = test_data.drop(columns = test_drop_cols)  # don't need ID to be predictive","39b408f1":"submission = pd.DataFrame()\npredictions = model.predict(to_predict)","6bf4e239":"explainer = shap.TreeExplainer(model)\ntest_shap_values = explainer.shap_values(to_predict) \ntest_shap_values = pd.DataFrame(test_shap_values, columns = to_predict.columns)\n\n# Need to create some mean_values\ntest_mean_vals = {}\nfor column in to_predict.columns:\n\ttest_mean_vals[column] = np.mean(to_predict[column]) \n\nplt.barh(list(test_mean_vals.keys()), list(test_mean_vals.values()))\nplt.tight_layout()\nplt.show()","677dff82":"submission[\"Id\"] = test_data[\"Id\"]\nsubmission[\"Pawpularity\"] = predictions\n\n# Save to .csv \nsubmission.to_csv(\"submission.csv\", index = False)","d23b8559":"# Perform a cross-validation to verify metrics","50dd4a97":"## Create set of predictions","f1a772ec":"## Cross Validation - 5-fold","b93b9f37":"# Check Shapley values on test dataset","fe5edc4d":"## Instantiate Metrics Graph","ac620860":"## Average cross-validation scores","f721d0fd":"# Import Data","4b1cc656":"# Import Modules","38d3cf00":"# See which features are most important using Shapley values","b8fb9029":"Answering the question of, \"On average, how much does a feature influence the outcome of 'Pawpularity'?\"","b4f3855a":"# Submission","f0d6f498":"# Predict test data","2cd13772":"# Now that scores are verified, train overall model"}}