{"cell_type":{"939ea6fd":"code","2a0b4aac":"code","6cc9fea9":"code","edf443a6":"code","9bae4fba":"code","e85f1b73":"code","2917a99b":"code","a50ce643":"code","ee61f8d3":"code","1aed51c1":"code","ff09f92d":"code","0e9e52b9":"code","9b14c3af":"code","8b3e0c80":"code","f75236c3":"code","9d82c169":"code","ed360ac8":"code","460c6cfa":"code","3beacf9b":"code","9c5ffc3d":"code","0ed3f4b8":"code","c39c3b98":"code","5b19b4ce":"code","2a007268":"code","c5903c75":"code","c2481a0a":"code","5db643c3":"code","b82e0853":"code","a1dbf518":"code","2ba56f39":"code","d5e591aa":"code","002c084c":"code","50227a7b":"code","6cbfd6a8":"code","d68c7128":"code","e490015e":"code","8bcc8986":"code","09e741cc":"code","d6c4113b":"code","256c173d":"code","d6ac691c":"code","acae1dd2":"markdown","fb0f0a48":"markdown","d03ea744":"markdown","dd4a57a0":"markdown","bf10ae31":"markdown","fd686f6a":"markdown","f2cb0b17":"markdown","18e27a9f":"markdown","f4306ba4":"markdown","c6089715":"markdown","8015b5d5":"markdown","27d730ff":"markdown","b88be621":"markdown","9b0422f6":"markdown","bbc86eb0":"markdown","683d778e":"markdown","3ff83b40":"markdown","14aa6454":"markdown","fdb61377":"markdown","afecb605":"markdown","174caac1":"markdown","51eb4bf4":"markdown","c726192a":"markdown","b3239fcb":"markdown","89fb79c4":"markdown","a9b246e8":"markdown","a7b1c816":"markdown","0e07da51":"markdown","141e511b":"markdown","1f4f2d91":"markdown","6cee9f90":"markdown","62638862":"markdown","318ea54c":"markdown","a8c2f504":"markdown","65114556":"markdown","4a47a742":"markdown"},"source":{"939ea6fd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\n## How to display full (non-truncated) datafrRumiame information in html when converting from pandas dataframe to html?\npd.set_option('display.max_colwidth', -1)\n## How to display all the columns without truncating in between. \npd.set_option('display.max_columns', 5000)\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n## ignores warning. \nimport warnings\nwarnings.filterwarnings('ignore')\n# Any results you write to the current directory are saved as output.\n\n# 2017\nresponse_2017 = pd.read_csv(\"..\/input\/kaggle-survey-2017\/multipleChoiceResponses.csv\", encoding='ISO-8859-1')\nconversion_ration_2017 = pd.read_csv(\"..\/input\/kaggle-survey-2017\/conversionRates.csv\")\nschema_2017 = pd.read_csv(\"..\/input\/kaggle-survey-2017\/schema.csv\")\nfree_from_response_2017 = pd.read_csv(\"..\/input\/kaggle-survey-2017\/freeformResponses.csv\")\n\n#2018\nresponse_2018 = pd.read_csv(\"..\/input\/kaggle-survey-2018\/multipleChoiceResponses.csv\")\nschema_2018 = pd.read_csv(\"..\/input\/kaggle-survey-2018\/SurveySchema.csv\")\nfree_from_responses_2018 = pd.read_csv(\"..\/input\/kaggle-survey-2018\/freeFormResponses.csv\")\n\n# 2019\nresponse_2019 = pd.read_csv(\"..\/input\/kaggle-survey-2019\/multiple_choice_responses.csv\")\nquestions_2019 = pd.read_csv(\"..\/input\/kaggle-survey-2019\/questions_only.csv\")\nschema_2019 = pd.read_csv(\"..\/input\/kaggle-survey-2019\/survey_schema.csv\")\nother_text_response_2019 = pd.read_csv(\"..\/input\/kaggle-survey-2019\/other_text_responses.csv\")","2a0b4aac":"pd.options.display.max_columns = 999\n\npd.set_option('display.max_colwidth', -1)","6cc9fea9":"Dont delete this line as the names were changed. \n# response_2017 = multiple_choice_response_2017\n# response_2018 = multiple_choice_response","edf443a6":"response_2017.GenderSelect.replace(['A different identity', 'Non-binary, genderqueer, or gender non-conforming'], 'other', inplace=True)\nresponse_2018.Q1.replace([\"Prefer not to say\", \"Prefer to self-describe\"], \"other\", inplace=True)\nresponse_2019.Q2.replace([\"Prefer not to say\", \"Prefer to self-describe\"], \"other\", inplace=True)\n\ntemp1 = response_2017.GenderSelect.value_counts()\n\ntemp2 = response_2018.Q1.value_counts()\ntemp2 = temp2[:len(temp2)-1]\n\ntemp3 = response_2019.Q2.value_counts()\ntemp3 = temp3[:len(temp3)-1]","9bae4fba":"import plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\n# labels = temp1.keys()\n\nfig = make_subplots(1, 3, specs=[[{'type':'domain'}, {'type':'domain'}, {'type':'domain'}]],\n                    subplot_titles=['2017', '2018', '2019'])\nfig.add_trace(go.Pie(labels=temp1.keys(), values=temp1.values, scalegroup='one',\n                     name=\"2017\"), 1, 1)\nfig.add_trace(go.Pie(labels=temp2.keys(), values=temp2.values, scalegroup='one',\n                     name=\"2018\"), 1, 2)\nfig.add_trace(go.Pie(labels=temp3.keys(), values=temp3.values, scalegroup='one',\n                     name=\"2019\"), 1, 3)\n\nfig.update_layout(title_text='Kaggle Surveys(2017-2019)')\nfig.show()","e85f1b73":"response_2017.Country.replace(\"People 's Republic of China\", \"China\", inplace=True)\n\nresponse_2018.Q3.replace(\"United States of America\", \"United States\", inplace=True)\nresponse_2018.Q3.replace(\"United Kingdom of Great Britain and Northern Ireland\", \"United Kingdom\", inplace=True)\n\nresponse_2019.Q3.replace(\"United States of America\", \"United States\", inplace=True)\nresponse_2019.Q3.replace(\"People 's Republic of China\", \"China\", inplace=True)\nresponse_2019.Q3.replace(\"United Kingdom of Great Britain and Northern Ireland\", \"United Kingdom\", inplace=True)","2917a99b":"def remove_text_implement_val_counts(df, feature, text = 'Other'):\n    df = df.loc[:feature][df.loc[:feature] != text]\n    df = df[feature].value_counts()\n    return df\n\ntemp9 = remove_text_implement_val_counts(response_2019, \"Q3\", \"Other\") \ntemp8 = remove_text_implement_val_counts(response_2018, \"Q3\") # default text is \"Other\" so there is no need to specify\ntemp7 = remove_text_implement_val_counts(response_2017, \"Country\")\n\ntempdf = pd.concat([temp7, temp8, temp9], axis=1, join = 'inner',)\ntempdf.columns = ['2017', '2018', '2019']","a50ce643":"import plotly.graph_objects as go\ncountries = tempdf.index\n\nfig = go.Figure(data=[\n    go.Bar(name='2017', x=countries, y=tempdf['2017'].values),\n    go.Bar(name='2018', x=countries, y=tempdf['2018'].values), \n    go.Bar(name='2019', x=countries, y=tempdf['2019'].values)\n])\n# Change the bar mode\nfig.update_layout(barmode='group')\nfig.show()","ee61f8d3":"## creating age bins for 2017 survey according to age groups done by 2018 survey, so that we can compare side by side. \ndef age_group(age):\n    a = ''\n    if age <= 21:\n        a = '18-21'\n    elif age <= 24: \n        a = '22-24'\n    elif age <= 29:\n        a = '25-29'\n    elif age <= 34:\n        a = '30-34'\n    elif age <= 39:\n        a = '35-39'\n    elif age <= 44:\n        a = '40-44'\n    elif age <= 49:\n        a = '45-49'\n    elif age <= 54:\n        a = '50-54'\n    elif age <= 59:\n        a = '55-59'\n    elif age <= 69:\n        a = '60-69'\n    elif age <= 79:\n        a = '70-79'\n    else:\n        a = '80+'\n    return a\n## creating a new columns Age_bins and applying \"age_group\" function. \nresponse_2017['Age_bins'] = response_2017.Age.map(age_group)","1aed51c1":"##2017 age value_counts()\ntemp = pd.DataFrame(response_2017.Age_bins.value_counts())\n\n##2018 age value_counts()\ntemp1 = pd.DataFrame(response_2018.Q2.value_counts())\ntemp1 = temp1[:len(temp1)-1]\n\n##2019 age value_counts()\ntemp2 = pd.DataFrame(response_2019.Q1.value_counts())\ntemp2 = temp2[:len(temp2)-1]\n\n## merging 2017 & 2018\ntemp = temp.merge(temp1, how = 'inner', left_index=True, right_index=True)\ntemp = temp.merge(temp2, how = 'inner', left_index=True, right_index=True)\n\n\ntemp.columns = ['2017','2018', '2019']","ff09f92d":"x = temp.index.tolist()\ny7 = temp[\"2017\"].tolist()\ny8 = temp[\"2018\"].tolist()\ny9 = temp[\"2019\"].tolist()\n\ntrace1 = go.Bar(\n    x=x,\n    y=y7,\n    name=\"2017\",\n    #text=y,\n    textposition = 'auto',\n    marker=dict(\n        color='rgb(0,0,128)',\n        line=dict(\n            color='rgb(8,48,107)',\n            width=1.5),\n        ),\n    opacity=0.6\n)\n\ntrace2 = go.Bar(\n    x=x,\n    y=y8,\n    name = '2018',\n    #text=y2,\n    textposition = 'auto',\n    marker=dict(\n        color='rgb(0,128,225)',\n        line=dict(\n            color='rgb(8,48,107)',\n            width=1.5),\n        ),\n    opacity=0.6\n)\ntrace3 = go.Bar(\n    x=x,\n    y=y9,\n    name = '2019',\n    #text=y2,\n    textposition = 'auto',\n    marker=dict(\n        color='rgb(0,128,105)',\n        line=dict(\n            color='rgb(8,48,205)',\n            width=1.5),\n        ),\n    opacity=0.6\n)\n\n\ndata = [trace1,trace2, trace3]\nlayout= go.Layout(\n    title ='Age Groups of The Respondents (2017-2018)',\n\n)\nfig = go.Figure(data=data, layout=layout)\nfig['layout']['xaxis'].update(title='Age group')\nfig['layout']['yaxis'].update(title='Count')\n\nfig.show()","0e9e52b9":"temp = response_2017[response_2017.FormalEducation != 'I prefer not to answer']\ntemp.FormalEducation.replace('I did not complete any formal education past high school', 'No formal education past high school', inplace=True)\ntemp.FormalEducation.replace(\"Master's degree\", \"Master\u2019s degree\", inplace=True)\ntemp.FormalEducation.replace(\"Bachelor's degree\", \"Bachelor\u2019s degree\", inplace=True)\ntemp.FormalEducation.replace(\"Some college\/university study without earning a bachelor's degree\", \"Some college\/university study without earning a bachelor\u2019s degree\", inplace=True)\ntemp = temp.FormalEducation.value_counts()\n\n\n\ntemp1 = response_2018[response_2018.Q4 != 'I prefer not to answer']\ntemp1 = temp1.Q4.value_counts()\ntemp1 = temp1[:len(temp1)-1]\ntemp1\n\ntemp = pd.DataFrame(temp).merge(pd.DataFrame(temp1), how = 'inner', left_index = True, right_index = True)\ntemp.columns = ['2017','2018']","9b14c3af":"fig = {\n  \"data\": [\n    {\n      \"values\": temp['2017'].values.tolist(),#\n      \"labels\": temp.index.tolist(),\n      \"domain\": {\"x\": [0, .48]},\n      \"name\": \"in 2017\",\n      \"hoverinfo\":\"label+percent+name\",\n      \"hole\": .4,\n      \"type\": \"pie\",\n         \"marker\": {\"line\":{\"color\":'#000000', \"width\":2}} \n    },\n    {\n      \"values\": temp['2018'].values.tolist(), \n      \"labels\": temp.index.tolist(),\n      #\"text\":[\"CO2\"],\n      \"textposition\":\"inside\",\n      \"domain\": {\"x\": [.52, 1]},\n      \"name\": \"in 2018\",\n      \"hoverinfo\":\"percent+label+name\",\n      \"hole\": .4,\n      \"type\": \"pie\",\n         \"marker\": {\"line\":{\"color\":'#000000', \"width\":2}} \n        \n    }],\n  \"layout\": {\n        \"title\":\"Male & Female Ratio(2017-2018)\",\n        \"annotations\": [\n            {\n                \"font\": {\n                    \"size\": 20\n                },\n                \"showarrow\": False,\n                \"text\": \"2017\",\n                \"x\": 0.225,\n                \"y\": 0.5\n            },\n            {\n                \"font\": {\n                    \"size\": 20\n                },\n                \"showarrow\": False,\n                \"text\": \"2018\",\n                \"x\": 0.775,\n                \"y\": 0.5\n            }\n        ]\n    }\n    \n}\n\nfig.show()","8b3e0c80":"response_2018.Q5.replace(['Environmental science or geology','A business discipline (accounting, economics, finance, etc.)'], 'Other', inplace=True)\n\nresponse_2017.MajorSelect.replace(['Management information systems','A health science'],'Other', inplace=True)\n\nresponse_2017.MajorSelect.replace('Electrical Engineering','Engineering (non-computer focused)', inplace=True)\n\nresponse_2018.Q5.replace('Computer science (software engineering, etc.)', 'Computer Science', inplace=True)\n\nresponse_2017.MajorSelect.replace('A humanities discipline','Humanities (history, literature, philosophy, etc.)', inplace=True)\n\nresponse_2017.MajorSelect.replace('Physics', 'Physics or astronomy', inplace=True)\n\nresponse_2017.MajorSelect.replace('Biology', 'Medical or life sciences (biology, chemistry, medicine, etc.)', inplace=True)\n\nresponse_2017.MajorSelect.replace(['A social science','Psychology'], 'Social sciences (anthropology, psychology, sociology, etc.)', inplace=True)","f75236c3":"temp = response_2018.Q5.value_counts(dropna=False)\ntemp = temp[:len(temp)-1]\n\ntemp1 = response_2017.MajorSelect.value_counts()\n\ntemp = pd.DataFrame(temp).merge(pd.DataFrame(temp1), how = 'inner', left_index = True, right_index = True)\ntemp.columns = ['2018','2017']","9d82c169":"temp = temp.reindex([i for i in reversed(temp.index)])\ntrace1 = go.Bar(\n    y=temp.index.tolist(),\n    x=temp['2017'].tolist(),\n    name='2017',\n    orientation = 'h',\n    marker = dict(\n        color = 'rgb(0,0,128)',\n        line = dict(\n            color = 'rgb(0,128,100)',\n            width = 3)\n    )\n)\ntrace2 = go.Bar(\n    y=temp.index.tolist(),\n    x=temp['2018'].tolist(),\n    name='2018',\n    orientation = 'h',\n    marker = dict(\n        color = 'rgb(0,128,255)',\n        line = dict(\n            color = 'rgb(0,128,100)',\n            width = 3)\n    )\n)\n\ndata = [trace1, trace2]\nlayout = go.Layout(\n    barmode='group', \n    margin=go.layout.Margin(l = 400)\n)\n\nfig = go.Figure(data=data, layout=layout)\nfig.layout.update(height = 700)\nfig.show()","ed360ac8":"## Importing Necessary modules. \nfrom wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\nimport matplotlib.pyplot as plt\nfrom PIL import Image\n\n## Getting the image. \nwine_mask = np.array(Image.open(\"..\/input\/png-files3\/paw.png\"))\n\n##\ndef transform_format(val):\n    if val == 0:\n        return 255\n    else:\n        return val\n# Transform your mask into a new one that will work with the function:\ntransformed_wine_mask = np.ndarray((wine_mask.shape[0],wine_mask.shape[1]), np.int32)\n\nfor i in range(len(wine_mask)):\n    transformed_wine_mask[i] = list(map(transform_format, wine_mask[i]))\n\n\n#print(names)\nnames = response_2018[\"Q6\"][~pd.isnull(response_2018[\"Q6\"])]\n\n# Create a word cloud image\nwc = WordCloud(background_color=\"white\",\n               colormap = 'Blues',\n               #max_font_size=30, \n               #height = 1200,\n               #max_words=1000, \n              # min_font_size=12,\n               mask=transformed_wine_mask,\n               stopwords=STOPWORDS,\n               contour_width=2, \n               contour_color='blue')\n\n# Generate a wordcloud\nwc.generate(' '.join(names))   \n\n\n\n## show\nplt.figure(figsize=(20,20))\nplt.imshow(wc, interpolation='bilinear')\nplt.title(\"What is Their Title?\", fontsize=35)\nplt.axis(\"off\")\nplt.show() ","460c6cfa":"#print(names)\nnames = response_2018[\"Q7\"][~pd.isnull(response_2018[\"Q7\"])]\n\n# Creating mask\nmask = np.array(Image.open(\"..\/input\/png-files3\/U2Epn.png\")) \n\n## Generating wordcloud\nwordcloud_usa = WordCloud(stopwords=STOPWORDS, \n                          background_color=\"white\", \n                          colormap = 'Blues_r',\n                          #mode=\"RGB\", \n                          #max_words=1000, \n                          mask=mask).generate(' '.join(names))\n\n# create coloring from image\n#image_colors = ImageColorGenerator(mask)\nplt.figure(figsize=[20,20])\nplt.imshow(wordcloud_usa, interpolation=\"bilinear\")\nplt.axis(\"off\")\nplt.title(\"In What Industries do They Work?\", fontsize = 40)\nplt.show()\n","3beacf9b":"## creating df's to analyze responses only from the professionals. \nprofessionals_df_18 = response_2018[(response_2018.Q6 != 'Student') & (response_2018.Q7 != 'I am a student')]\nprofessionals_df_17 = response_2017[(response_2017.EmploymentStatus != 'Not employed, but looking for work') & (response_2017.EmploymentStatus != 'I prefer not to say')]","9c5ffc3d":"temp = professionals_df_18[(professionals_df_18.Q9 != 'What is your current yearly compensation (approximate $USD)?') & \n                         (professionals_df_18.Q9 != 'I do not wish to disclose my approximate yearly compensation')]\ntemp.Q9.dropna(inplace=True)\n\n## Writing a function to determine the average. \ndef temp_avg_fun(c):\n    a = c.split(\"-\")[0]\n    a = a.strip('+')\n    a = a.split(\",\")[0]\n    a = int(a+str('000'))\n    try:\n        b = c.split(\"-\")[1]\n    except:\n        b = '500,000'\n    b = b.split(',')[0]\n    b = int(b+str('000'))\n    d = (a+b)\/2\n    return d\n\n## Creating a new column with avg_salary. \ntemp['Avg_salary'] = temp.Q9.apply(lambda x: temp_avg_fun(x))\n\n##getting rid of \"Other\" from the country('Q3') column. \ntemp = temp[temp.Q3 != 'Other']","0ed3f4b8":"## Getting the top 10 countries. \ntemp_df = pd.DataFrame(temp.Q3.value_counts())\n##Changing the column names. \ntemp_df.columns = ['total']\n## Getting percentage\n","c39c3b98":"temp_df['percent'] = temp_df.total.apply(lambda x: round(x\/sum(temp_df.total)*100,2))\n\ntemp_df = temp_df.merge(temp.pivot_table(values = 'Avg_salary', index='Q3').reset_index(),left_index=True, right_on='Q3', how='left')\n\ntemp_df.sort_values(by = 'percent', inplace=True, ascending=False)\n\ntemp_df = temp_df.head(10)\n\ntemp_df.sort_values(by = 'percent', inplace=True, ascending=True)","5b19b4ce":"y_saving = temp_df.percent.tolist()\ny_net_worth = temp_df.Avg_salary.tolist()\nx_saving = temp_df.Q3.tolist()\nx_net_worth = temp_df.Q3.tolist()\ntrace0 = go.Bar(\n    x=y_saving,\n    y=x_saving,\n    marker=dict(\n        color='rgb(0,0,128)',\n        line=dict(\n            color='rgba(50, 171, 96, 1.0)',\n            width=1),\n    ),\n    name='Percentage of the Respondent Countries',\n    orientation='h',\n)\ntrace1 = go.Scatter(\n    x=y_net_worth,\n    y=x_net_worth,\n    mode='lines+markers',\n    line=dict(\n        color='rgb(0,0, 205)'),\n    name='Average Salary',\n)\nlayout = dict(\n    title='Percentage of the Respondents Countries and Average Salary',\n    yaxis=dict(\n        showgrid=False,\n        showline=False,\n        showticklabels=True,\n        domain=[0, 0.85],\n    ),\n    yaxis2=dict(\n        showgrid=False,\n        showline=True,\n        showticklabels=False,\n        linecolor='rgba(102, 102, 102, 0.8)',\n        linewidth=2,\n        domain=[0, 0.85],\n    ),\n    xaxis=dict(\n        zeroline=False,\n        showline=False,\n        showticklabels=True,\n        showgrid=True,\n        domain=[0, 0.42],\n    ),\n    xaxis2=dict(\n        zeroline=False,\n        showline=False,\n        showticklabels=True,\n        showgrid=True,\n        domain=[0.47, 1],\n        side='top',\n        dtick=25000,\n    ),\n    legend=dict(\n        x=0.029,\n        y=1.038,\n        font=dict(\n            size=10,\n        ),\n    ),\n    margin=dict(\n        l=100,\n        r=20,\n        t=70,\n        b=70,\n    ),\n    paper_bgcolor='rgb(152, 204, 255)',\n    plot_bgcolor='rgb(152, 204, 255)',\n)\n\nannotations = []\n\ny_s = np.round(y_saving, decimals=2)\ny_nw = np.rint(y_net_worth)\n\n# Adding labels\nfor ydn, yd, xd in zip(y_nw, y_s, x_saving):\n    # labeling the scatter savings\n    annotations.append(dict(xref='x2', yref='y2',\n                            y=xd, x=ydn - 20000,\n                            text='{:,}'.format(ydn) + 'M',\n                            font=dict(family='Arial', size=12,\n                                      color='rgb(0, 0, 205)'),\n                            showarrow=False))\n    # labeling the bar net worth\n    annotations.append(dict(xref='x1', yref='y1',\n                            y=xd, x=yd + 3,\n                            text=str(yd) + '%',\n                            font=dict(family='Arial', size=12,\n                                      color='rgb(0, 0, 128)'),\n                            showarrow=False))\n# Source\nannotations.append(dict(xref='paper', yref='paper',\n                        x=-0.2, y=-0.109,\n                       # text='OECD \"' +\n                       #      '(2015), Household savings (indicator), ' +\n                       #      'Household net worth (indicator). doi: ' +\n                        #     '10.1787\/cfc6f499-en (Accessed on 05 June 2015)',\n                        font=dict(family='Arial', size=10,\n                                  color='rgb(150,150,150)'),\n                        showarrow=False))\n\nlayout['annotations'] = annotations\n\n# Creating two subplots\nfig = tools.make_subplots(rows=1, cols=2, specs=[[{}, {}]], shared_xaxes=True,\n                          shared_yaxes=False, vertical_spacing=0.001)\n\nfig.append_trace(trace0, 1, 1)\nfig.append_trace(trace1, 1, 2)\n\nfig['layout'].update(layout)\nfig.show()","2a007268":"trace = go.Bar(\n    x = professionals_df_17.LearningDataScienceTime.value_counts().index,\n    y = professionals_df_17.LearningDataScienceTime.value_counts().values,\n    opacity=0.5,\n    marker=dict(\n        color='rgba(152,204,255,0.9)',\n        line=dict(\n            color='rgba(0,0,0,0.5)',\n            width=1.5,\n        )\n    \n),\n) \n\nlayout= go.Layout(\n    title ='How long does it take to learn Data Science?',\n\n)\ndata = [trace]\nfig = go.Figure(data=data, layout=layout)\nfig['layout']['xaxis'].update(title='Age group')\nfig['layout']['yaxis'].update(title='Response Count')\nfig['layout'].update(paper_bgcolor='rgb(255,255,255)')\nfig.show()","c5903c75":"\ntrace = go.Bar(\n    x = professionals_df_17.MLToolNextYearSelect.value_counts().index,\n    y = professionals_df_17.MLToolNextYearSelect.value_counts().values,\n    opacity=0.5,\n    marker=dict(\n        color='rgba(152,204,255,0.9)',\n        line=dict(\n            color='rgba(0,0,0,0.5)',\n            width=1.5,\n        )\n    \n),\n) \n\nlayout= go.Layout(\n    title ='Recommended Choice of Machine Learning Tools',\n    margin=go.layout.Margin(b = 400)\n\n)\ndata = [trace]\nfig = go.Figure(data=data, layout=layout)\nfig['layout']['xaxis'].update(title='Machine Learning Tools')\nfig['layout']['yaxis'].update(title='Response Count')\nfig['layout'].update(paper_bgcolor='rgb(255,255,255)')\nfig.layout.update(height = 1000)\nfig.show()","c2481a0a":"\n\ntrace = go.Bar(\n    x = professionals_df_17.MLMethodNextYearSelect.value_counts().index,\n    y = professionals_df_17.MLMethodNextYearSelect.value_counts().values,\n    opacity=0.5,\n    marker=dict(\n        color='rgba(152,204,255,0.9)',\n        line=dict(\n            color='rgba(0,0,0,0.5)',\n            width=1.5,\n        )\n    \n),\n) \n\nlayout= go.Layout(\n    title ='Recommended Choice of Machine Learning Methods',\n    margin=go.layout.Margin(b = 222)\n\n)\ndata = [trace]\nfig = go.Figure(data=data, layout=layout)\nfig['layout']['xaxis'].update(title='Machine Learning Methods')\nfig['layout']['yaxis'].update(title='Response Count')\nfig['layout'].update(paper_bgcolor='rgb(255,255,255)')\nfig.layout.update(height = 1000)\nfig.show()","5db643c3":"trace = go.Bar(\n    x = professionals_df_17.LanguageRecommendationSelect.value_counts().index,\n    y = professionals_df_17.LanguageRecommendationSelect.value_counts().values,\n    opacity=0.5,\n    marker=dict(\n        color='rgba(152,204,255,0.9)',\n        line=dict(\n            color='rgba(0,0,0,0.5)',\n            width=1.5,\n        )\n    \n),\n) \n\nlayout= go.Layout(\n    title ='Recommended Choice of Languages',\n    #margin=go.layout.Margin(b = 222)\n\n)\ndata = [trace]\nfig = go.Figure(data=data, layout=layout)\nfig['layout']['xaxis'].update(title='Languages')\nfig['layout']['yaxis'].update(title='Response Count')\nfig['layout'].update(paper_bgcolor='rgb(255,255,255)')\nfig.show()","b82e0853":"# getting only the working columns\ntemp_df = professionals_df_17.loc[:,\"JobSkillImportanceBigData\":\"JobSkillImportanceVisualizations\"]\n#temp = temp_df.JobSkillImportanceBigData.value_counts(dropna=True)\n#temp = pd.DataFrame(temp)\n#temp.columns=['BigData']\n#temp.BigData = temp.BigData.apply(lambda x: round(x\/sum(temp.BigData)*100,0))\n\n## writing to function to get the percentage of a column, round it and then returning a df with that rounded percentage. \ndef find_percentage(df, col):\n    return pd.DataFrame(round(df[col].value_counts()\/df[col].value_counts().sum()*100,1))\n\n\n## \ncount = 0\nfor i in temp_df.columns:\n    if count == 0:\n        temp = find_percentage(temp_df, str(i))\n    else:\n        temp1 = find_percentage(temp_df, str(i))\n        temp = temp.merge(temp1, left_index=True, right_index=True, how='inner')\n    count += 1\n\n## custom ma\ntemp.columns = ['BigData','Degree','Statistics','Enterprise Tools','Python','R','SQL','Kaggle Ranking','Online Courses','Visualizations']","a1dbf518":"temp.head()","2ba56f39":"temp = temp.reindex(['Unnecessary','Nice to have', 'Necessary'])\n\n## [much worse, slightly worse....much better]\n## list of indexes\ntop_labels = temp.index.tolist()\n\ncolors = ['rgba(135,206,250,0.8)', 'rgba(0,191,255, 0.8)','rgba(30,144,255, 0.8)','rgba(0,0,255,0.8)','rgba(0,0,128,0.8)']\n\n\n#[percents]\n## creating a list of lists with x data's\nx_data = [temp[i].tolist() for i in temp.columns]\n\n# y axis\n## creating a list of column names\n#y_data = ['Online', 'Bootcamp']\ny_data = temp.columns.tolist()\n\ntraces = []\n\nfor i in range(0, len(x_data[0])):\n    for xd, yd in zip(x_data, y_data):\n        traces.append(go.Bar(\n            x=[xd[i]],\n            y=[yd],\n            orientation='h',\n            marker=dict(\n                color=colors[i],\n                line=dict(\n                        color='rgb(248, 248, 249)',\n                        width=1)\n            )\n        ))\n\nlayout = go.Layout(\n    xaxis=dict(\n        showgrid=False,\n        showline=False,\n        showticklabels=False,\n        zeroline=False,\n        domain=[0.15, 1]\n    ),\n    yaxis=dict(\n        showgrid=False,\n        showline=False,\n        showticklabels=False,\n        zeroline=False,\n    ),\n    barmode='stack',\n    paper_bgcolor='rgb(224, 255, 255)',\n    plot_bgcolor='rgb(224, 255, 255)',\n    margin=dict(\n        l=120,\n        r=10,\n        t=140,\n        b=80\n    ),\n    showlegend=False,\n)\n\nannotations = []\n\nfor yd, xd in zip(y_data, x_data):\n    # labeling the y-axis\n    annotations.append(dict(xref='paper', yref='y',\n                            x=0.14, y=yd,\n                            xanchor='right',\n                            text=str(yd),\n                            font=dict(family='Arial', size=14,\n                                      color='rgb(67, 67, 67)'),\n                            showarrow=False, align='right'))\n    # labeling the first percentage of each bar (x_axis)\n    annotations.append(dict(xref='x', yref='y',\n                            x=xd[0] \/ 2, y=yd,\n                            text=str(xd[0]) + '%',\n                            font=dict(family='Arial', size=12,\n                                      color='rgb(248, 248, 255)'),\n                            showarrow=False))\n    # labeling the first Likert scale (on the top)\n    if yd == y_data[-1]:\n        annotations.append(dict(xref='x', yref='paper',\n                                x=xd[0] \/ 2, y=1.1,\n                                text=top_labels[0],\n                                font=dict(family='Arial', size=14,\n                                          color='rgb(67, 67, 67)'),\n                                showarrow=False))\n    space = xd[0]\n    for i in range(1, len(xd)):\n            # labeling the rest of percentages for each bar (x_axis)\n            annotations.append(dict(xref='x', yref='y',\n                                    x=space + (xd[i]\/2), y=yd, \n                                    text=str(xd[i]) + '%',\n                                    font=dict(family='Arial', size=14,\n                                              color='rgb(248, 248, 255)'),\n                                    showarrow=False))\n            # labeling the Likert scale\n            if yd == y_data[-1]:\n                annotations.append(dict(xref='x', yref='paper',\n                                        x=space + (xd[i]\/2), y=1.1,\n                                        text=top_labels[i],\n                                        font=dict(family='Arial', size=14,\n                                                  color='rgb(67, 67, 67)'),\n                                        showarrow=False))\n            space += xd[i]\n\nlayout['annotations'] = annotations\n\nfig = go.Figure(data=traces, layout=layout)\nfig.show()","d5e591aa":"professionals_df_18.Q39_Part_1.replace('Neither better nor worse', \"Neutral\", inplace=True)\nprofessionals_df_18.Q39_Part_1.replace('No opinion; I do not know', \"Neutral\", inplace=True)\nprofessionals_df_18.Q39_Part_2.replace('No opinion; I do not know', \"Neutral\", inplace=True)\nprofessionals_df_18.Q39_Part_2.replace('Neither better nor worse', \"Neutral\", inplace=True)\n\n## Online learning platforms and MOOCs:\ntemp = professionals_df_18.Q39_Part_1.value_counts()\ntemp = temp[:len(temp)-1]\ntemp = pd.DataFrame(temp,)\n\n## - In-person bootcamps:\ntemp1 = professionals_df_18.Q39_Part_2.value_counts()\ntemp1 = temp1[:len(temp1)-1]\ntemp1 = pd.DataFrame(temp1)\n\n## merging both dataframes. \ntemp = temp.merge(temp1 ,left_index=True, right_index=True, how = 'inner')\ntemp.columns = ['online_total', 'bootCamp_total']\n\n## format the index as I like. \nindexes = [\"Much worse\", \"Slightly worse\", \"Neutral\", \"Slightly better\", \"Much better\"]\n## rearrange indexes\ntemp = temp.reindex(indexes)  \n\n\ntemp['online_percent'] = round(temp.online_total\/sum(temp.online_total)*100,0).apply(lambda x: int(x))\ntemp['bootcamp_percent'] = round(temp.bootCamp_total\/sum(temp.online_total)*100,0).apply(lambda x: int(x))\n\n#temp.online_percent = temp.online_percent.apply(lambda x: int(x))\n#temp.bootcamp_percent = temp.bootcamp_percent.apply(lambda x: int(x))","002c084c":"## [much worse, slightly worse....much better]\ntop_labels = temp.index.tolist()\n\ncolors = ['rgba(135,206,250,0.8)', 'rgba(0,191,255, 0.8)','rgba(30,144,255, 0.8)','rgba(0,0,255,0.8)','rgba(0,0,128,0.8)','rgba(0,0,128,0.8)' ]\n\n\n\n#[percents]\nx_data = [temp.online_percent.tolist(),\n          temp.bootcamp_percent.tolist()]\n\n# y axis\ny_data = ['Online', 'Bootcamp']\n\n\ntraces = []\n\nfor i in range(0, len(x_data[0])):\n    for xd, yd in zip(x_data, y_data):\n        traces.append(go.Bar(\n            x=[xd[i]],\n            y=[yd],\n            orientation='h',\n            marker=dict(\n                color=colors[i],\n                line=dict(\n                        color='rgb(248, 248, 249)',\n                        width=1)\n            )\n        ))\n\nlayout = go.Layout(\n    xaxis=dict(\n        showgrid=False,\n        showline=False,\n        showticklabels=False,\n        zeroline=False,\n        domain=[0.15, 1]\n    ),\n    yaxis=dict(\n        showgrid=False,\n        showline=False,\n        showticklabels=False,\n        zeroline=False,\n    ),\n    barmode='stack',\n    paper_bgcolor='rgb(224, 255, 255)',\n    plot_bgcolor='rgb(224, 255, 255)',\n    margin=dict(\n        l=120,\n        r=10,\n        t=140,\n        b=80\n    ),\n    showlegend=False,\n)\n\nannotations = []\n\nfor yd, xd in zip(y_data, x_data):\n    # labeling the y-axis\n    annotations.append(dict(xref='paper', yref='y',\n                            x=0.14, y=yd,\n                            xanchor='right',\n                            text=str(yd),\n                            font=dict(family='Arial', size=14,\n                                      color='rgb(67, 67, 67)'),\n                            showarrow=False, align='right'))\n    # labeling the first percentage of each bar (x_axis)\n    annotations.append(dict(xref='x', yref='y',\n                            x=xd[0] \/ 2, y=yd,\n                            text=str(xd[0]) + '%',\n                            font=dict(family='Arial', size=12,\n                                      color='rgb(248, 248, 255)'),\n                            showarrow=False))\n    # labeling the first Likert scale (on the top)\n    if yd == y_data[-1]:\n        annotations.append(dict(xref='x', yref='paper',\n                                x=xd[0] \/ 2, y=1.1,\n                                text=top_labels[0],\n                                font=dict(family='Arial', size=14,\n                                          color='rgb(67, 67, 67)'),\n                                showarrow=False))\n    space = xd[0]\n    for i in range(1, len(xd)):\n            # labeling the rest of percentages for each bar (x_axis)\n            annotations.append(dict(xref='x', yref='y',\n                                    x=space + (xd[i]\/2), y=yd, \n                                    text=str(xd[i]) + '%',\n                                    font=dict(family='Arial', size=14,\n                                              color='rgb(248, 248, 255)'),\n                                    showarrow=False))\n            # labeling the Likert scale\n            if yd == y_data[-1]:\n                annotations.append(dict(xref='x', yref='paper',\n                                        x=space + (xd[i]\/2), y=1.1,\n                                        text=top_labels[i],\n                                        font=dict(family='Arial', size=14,\n                                                  color='rgb(67, 67, 67)'),\n                                        showarrow=True))\n            space += xd[i]\n\nlayout['annotations'] = annotations\n\nfig = go.Figure(data=traces, layout=layout)\nfig.show()","50227a7b":"temp_df = professionals_df_17.loc[:,\"JobFactorLearning\":\"JobFactorPublishingOpportunity\"]\n\ncount = 0\nfor i in temp_df.columns:\n    if count == 0:\n        temp = find_percentage(temp_df, str(i))\n    else:\n        temp1 = find_percentage(temp_df, str(i))\n        temp = temp.merge(temp1, left_index=True, right_index=True, how='inner')\n    count += 1\n\ntemp.columns = ['Learning','Salary','Office','Languages','Commute','Management','Experience Level','Department','Title','Company Funding','Impact','Remote','Industry','Leader Reputation','Diversity','Publishing Opportunity']\n","6cbfd6a8":"temp = temp.reindex(['Not important','Somewhat important', 'Very Important'])\n\n## [much worse, slightly worse....much better]\n## list of indexes\ntop_labels = temp.index.tolist()\ncolors = ['rgba(135,206,250,0.8)', 'rgba(0,191,255, 0.8)','rgba(30,144,255, 0.8)','rgba(0,0,255,0.8)','rgba(0,0,128,0.8)','rgba(0,0,128,0.8)' ]\n\n#[percents]\n## creating a list of lists with x data's\nx_data = [temp[i].tolist() for i in temp.columns]\n\n# y axis\n## creating a list of column names\n#y_data = ['Online', 'Bootcamp']\ny_data = temp.columns.tolist()\n\ntraces = []\n\nfor i in range(0, len(x_data[0])):\n    for xd, yd in zip(x_data, y_data):\n        traces.append(go.Bar(\n            x=[xd[i]],\n            y=[yd],\n            orientation='h',\n            marker=dict(\n                color=colors[i],\n                line=dict(\n                        color='rgb(248, 248, 249)',\n                        width=1)\n            )\n        ))\n\nlayout = go.Layout(\n    xaxis=dict(\n        showgrid=False,\n        showline=False,\n        showticklabels=False,\n        zeroline=False,\n        domain=[0.15, 1]\n    ),\n    yaxis=dict(\n        showgrid=False,\n        showline=False,\n        showticklabels=False,\n        zeroline=False,\n    ),\n    barmode='stack',\n    paper_bgcolor='rgb(224, 255, 255)',\n    plot_bgcolor='rgb(224, 255, 255)',\n    margin=dict(\n        l=120,\n        r=10,\n        t=140,\n        b=80\n    ),\n    showlegend=False,\n)\n\nannotations = []\n\nfor yd, xd in zip(y_data, x_data):\n    # labeling the y-axis\n    annotations.append(dict(xref='paper', yref='y',\n                            x=0.14, y=yd,\n                            xanchor='right',\n                            text=str(yd),\n                            font=dict(family='Arial', size=14,\n                                      color='rgb(67, 67, 67)'),\n                            showarrow=False, align='right'))\n    # labeling the first percentage of each bar (x_axis)\n    annotations.append(dict(xref='x', yref='y',\n                            x=xd[0] \/ 2, y=yd,\n                            text=str(xd[0]) + '%',\n                            font=dict(family='Arial', size=10,\n                                      color='rgb(248, 248, 255)'),\n                            showarrow=False))\n    # labeling the first Likert scale (on the top)\n    if yd == y_data[-1]:\n        annotations.append(dict(xref='x', yref='paper',\n                                x=xd[0] \/ 2, y=1.05,\n                                text=top_labels[0],\n                                font=dict(family='Arial', size=14,\n                                          color='rgb(67, 67, 67)'),\n                                showarrow=False))\n    space = xd[0]\n    for i in range(1, len(xd)):\n            # labeling the rest of percentages for each bar (x_axis)\n            annotations.append(dict(xref='x', yref='y',\n                                    x=space + (xd[i]\/2), y=yd, \n                                    text=str(xd[i]) + '%',\n                                    font=dict(family='Arial', size=14,\n                                              color='rgb(248, 248, 255)'),\n                                    showarrow=False))\n            # labeling the Likert scale\n            if yd == y_data[-1]:\n                annotations.append(dict(xref='x', yref='paper',\n                                        x=space + (xd[i]\/2), y=1.05,\n                                        text=top_labels[i],\n                                        font=dict(family='Arial', size=14,\n                                                  color='rgb(67, 67, 67)'),\n                                        showarrow=False))\n            space += xd[i]\n\nlayout['annotations'] = annotations\n\nfig = go.Figure(data=traces, layout=layout)\nfig.layout.update(height = 800)\nfig.show()","d68c7128":"temp_df = professionals_df_17.loc[:,\"WorkToolsFrequencyAmazonML\":\"WorkToolsFrequencyUnix\"]\n\ncount = 0\nfor i in temp_df.columns:\n    if count == 0:\n        temp = find_percentage(temp_df, str(i))\n    else:\n        temp1 = find_percentage(temp_df, str(i))\n        temp = temp.merge(temp1, left_index=True, right_index=True, how='inner')\n    count += 1\n\ntemp.columns = ['AmazonML','AWS','Angoss','C','Cloudera','DataRobot','Flume','GCP','Hadoop','IBMCognos','IBMSPSSModeler','IBMSPSSStatistics','IBMWatson','Impala','Java','Julia','Jupyter','KNIMECommercial','KNIMEFree','Mathematica','MATLAB','Azure','Excel','MicrosoftRServer','MicrosoftSQL','Minitab','NoSQL','Oracle','Orange','Perl','Python','Qlik','R','RapidMinerCommercial','RapidMinerFree','Salfrod','SAPBusinessObjects','SASBase','SASEnterprise','SASJMP','Spark','SQL','Stan','Statistica','Tableau','TensorFlow','TIBCO','Unix']","e490015e":"temp = temp.reindex(['Rarely','Sometimes', 'Often','Most of the time'])\n\n## [much worse, slightly worse....much better]\n## list of indexes\ntop_labels = temp.index.tolist()\n\ncolors = ['rgba(135,206,250,0.8)', 'rgba(0,191,255, 0.8)','rgba(30,144,255, 0.8)','rgba(0,0,255,0.8)','rgba(0,0,128,0.8)']\n\n\n#[percents]\n## creating a list of lists with x data's\nx_data = [temp[i].tolist() for i in temp.columns]\n\n# y axis\n## creating a list of column names\n#y_data = ['Online', 'Bootcamp']\ny_data = temp.columns.tolist()\n\ntraces = []\n\nfor i in range(0, len(x_data[0])):\n    for xd, yd in zip(x_data, y_data):\n        traces.append(go.Bar(\n            x=[xd[i]],\n            y=[yd],\n            orientation='h',\n            marker=dict(\n                color=colors[i],\n                line=dict(\n                        color='rgb(248, 248, 249)',\n                        width=1)\n            )\n        ))\n\nlayout = go.Layout(\n    xaxis=dict(\n        showgrid=False,\n        showline=False,\n        showticklabels=False,\n        zeroline=False,\n        domain=[0.15, 1]\n    ),\n    yaxis=dict(\n        showgrid=False,\n        showline=False,\n        showticklabels=False,\n        zeroline=False,\n    ),\n    barmode='stack',\n    paper_bgcolor='rgb(224, 255, 255)',\n    plot_bgcolor='rgb(224, 255, 255)',\n    margin=dict(\n        l=80,\n        r=10,\n        t=120,\n        b=30\n    ),\n    showlegend=False,\n)\n\nannotations = []\n\nfor yd, xd in zip(y_data, x_data):\n    # labeling the y-axis\n    annotations.append(dict(xref='paper', yref='y',\n                            x=0.14, y=yd,\n                            xanchor='right',\n                            text=str(yd),\n                            font=dict(family='Arial', size=14,\n                                      color='rgb(67, 67, 67)'),\n                            showarrow=False, align='right'))\n    # labeling the first percentage of each bar (x_axis)\n    annotations.append(dict(xref='x', yref='y',\n                            x=xd[0] \/ 2, y=yd,\n                            text=str(xd[0]) + '%',\n                            font=dict(family='Arial', size=14,\n                                      color='rgb(248, 248, 255)'),\n                            showarrow=False))\n    # labeling the first Likert scale (on the top)\n    if yd == y_data[-1]:\n        annotations.append(dict(xref='x', yref='paper',\n                                x=xd[0] \/ 2, y=1.02,\n                                text=top_labels[0],\n                                font=dict(family='Arial', size=14,\n                                          color='rgb(67, 67, 67)'),\n                                showarrow=False))\n    space = xd[0]\n    for i in range(1, len(xd)):\n            # labeling the rest of percentages for each bar (x_axis)\n            annotations.append(dict(xref='x', yref='y',\n                                    x=space + (xd[i]\/2), y=yd, \n                                    text=str(xd[i]) + '%',\n                                    font=dict(family='Arial', size=14,\n                                              color='rgb(248, 248, 255)'),\n                                    showarrow=False))\n            # labeling the Likert scale\n            if yd == y_data[-1]:\n                annotations.append(dict(xref='x', yref='paper',\n                                        x=space + (xd[i]\/2), y=1.02,\n                                        text=top_labels[i],\n                                        font=dict(family='Arial', size=14,\n                                                  color='rgb(67, 67, 67)'),\n                                        showarrow=False))\n            space += xd[i]\n\nlayout['annotations'] = annotations\n\nfig = go.Figure(data=traces, layout=layout)\nfig['layout'].update(height = 1300);\niplot(fig, filename='bar-colorscale')","8bcc8986":"temp_df = professionals_df_17.loc[:,'WorkChallengeFrequencyPolitics':'WorkChallengeFrequencyDataAccess']\n\ncount = 0\nfor i in temp_df.columns:\n    if count == 0:\n        temp = find_percentage(temp_df, str(i))\n    else:\n        temp1 = find_percentage(temp_df, str(i))\n        temp = temp.merge(temp1, left_index=True, right_index=True, how='inner')\n    count += 1\n    \ntemp.columns = ['Politics','Unused Results','Unuseful Instrumenting','Deployment','Dirty Data','Explaining','Pass','Integration','Talent','Data Funds','Domain Expertise','ML','Tools','Expectations','IT Coordination','Hiring Funds','Privacy','Scaling','Environments','Clarity','DataAccess']","09e741cc":"temp = temp.reindex(['Rarely','Sometimes', 'Often','Most of the time'])\n\n## [much worse, slightly worse....much better]\n## list of indexes\ntop_labels = temp.index.tolist()\ncolors = ['rgba(135,206,250,0.8)', 'rgba(0,191,255, 0.8)','rgba(30,144,255, 0.8)','rgba(0,0,255,0.8)','rgba(0,0,128,0.8)']\n\n#[percents]\n## creating a list of lists with x data's\nx_data = [temp[i].tolist() for i in temp.columns]\n\n# y axis\n## creating a list of column names\n#y_data = ['Online', 'Bootcamp']\ny_data = temp.columns.tolist()\n\ntraces = []\n\nfor i in range(0, len(x_data[0])):\n    for xd, yd in zip(x_data, y_data):\n        traces.append(go.Bar(\n            x=[xd[i]],\n            y=[yd],\n            orientation='h',\n            marker=dict(\n                color=colors[i],\n                line=dict(\n                        color='rgb(248, 248, 249)',\n                        width=1)\n            )\n        ))\n\nlayout = go.Layout(\n    xaxis=dict(\n        showgrid=False,\n        showline=False,\n        showticklabels=False,\n        zeroline=False,\n        domain=[0.15, 1]\n    ),\n    yaxis=dict(\n        showgrid=False,\n        showline=False,\n        showticklabels=False,\n        zeroline=False,\n    ),\n    barmode='stack',\n    paper_bgcolor='rgb(224, 255, 255)',\n    plot_bgcolor='rgb(224, 255, 255)',\n    margin=dict(\n        l=80,\n        r=10,\n        t=120,\n        b=30\n    ),\n    showlegend=False,\n)\n\nannotations = []\n\nfor yd, xd in zip(y_data, x_data):\n    # labeling the y-axis\n    annotations.append(dict(xref='paper', yref='y',\n                            x=0.14, y=yd,\n                            xanchor='right',\n                            text=str(yd),\n                            font=dict(family='Arial', size=14,\n                                      color='rgb(67, 67, 67)'),\n                            showarrow=False, align='right'))\n    # labeling the first percentage of each bar (x_axis)\n    annotations.append(dict(xref='x', yref='y',\n                            x=xd[0] \/ 2, y=yd,\n                            text=str(xd[0]) + '%',\n                            font=dict(family='Arial', size=10,\n                                      color='rgb(248, 248, 255)'),\n                            showarrow=False))\n    # labeling the first Likert scale (on the top)\n    if yd == y_data[-1]:\n        annotations.append(dict(xref='x', yref='paper',\n                                x=xd[0] \/ 2, y=1.02,\n                                text=top_labels[0],\n                                font=dict(family='Arial', size=14,\n                                          color='rgb(67, 67, 67)'),\n                                showarrow=False))\n    space = xd[0]\n    for i in range(1, len(xd)):\n            # labeling the rest of percentages for each bar (x_axis)\n            annotations.append(dict(xref='x', yref='y',\n                                    x=space + (xd[i]\/2), y=yd, \n                                    text=str(xd[i]) + '%',\n                                    font=dict(family='Arial', size=14,\n                                              color='rgb(248, 248, 255)'),\n                                    showarrow=False))\n            # labeling the Likert scale\n            if yd == y_data[-1]:\n                annotations.append(dict(xref='x', yref='paper',\n                                        x=space + (xd[i]\/2), y=1.02,\n                                        text=top_labels[i],\n                                        font=dict(family='Arial', size=14,\n                                                  color='rgb(67, 67, 67)'),\n                                        showarrow=False))\n            space += xd[i]\n\nlayout['annotations'] = annotations\n\nfig = go.Figure(data=traces, layout=layout)\nfig['layout'].update(height = 1300);\niplot(fig, filename='bar-colorscale')","d6c4113b":"temp_df = professionals_df_17.loc[:,'WorkMethodsFrequencyA\/B':'WorkMethodsFrequencyTimeSeriesAnalysis']\n\ncount = 0\nfor i in temp_df.columns:\n    if count == 0:\n        temp = find_percentage(temp_df, str(i))\n    else:\n        temp1 = find_percentage(temp_df, str(i))\n        temp = temp.merge(temp1, left_index=True, right_index=True, how='inner')\n    count += 1\n    \ntemp.columns = ['A\/B','Association Rules','Bayesian','CNNs','Collaborative Filtering','Cross Validation','Data Visualization','Decision Trees','Ensemble Methods','Evolutionary Approaches','GANs','GBM','HMMs','KNN','LiftAnalysis','Logistic Regression','MLN','Naive Bayes','NLP','Neural Networks','PCA','Prescriptive Modeling','Random Forests','Recommender Systems','RNNs','Segmentation','Simulation','SVMs','Text Analysis','Time Series Analysis']","256c173d":"temp = temp.reindex(['Rarely','Sometimes', 'Often','Most of the time'])\n\n## [much worse, slightly worse....much better]\n## list of indexes\ntop_labels = temp.index.tolist()\ncolors = ['rgba(135,206,250,0.8)', 'rgba(0,191,255, 0.8)','rgba(30,144,255, 0.8)','rgba(0,0,255,0.8)','rgba(0,0,128,0.8)']\n\n#[percents]\n## creating a list of lists with x data's\nx_data = [temp[i].tolist() for i in temp.columns]\n\n# y axis\n## creating a list of column names\n#y_data = ['Online', 'Bootcamp']\ny_data = temp.columns.tolist()\n\ntraces = []\n\nfor i in range(0, len(x_data[0])):\n    for xd, yd in zip(x_data, y_data):\n        traces.append(go.Bar(\n            x=[xd[i]],\n            y=[yd],\n            orientation='h',\n            marker=dict(\n                color=colors[i],\n                line=dict(\n                        color='rgb(248, 248, 249)',\n                        width=1)\n            )\n        ))\n\nlayout = go.Layout(\n    xaxis=dict(\n        showgrid=False,\n        showline=False,\n        showticklabels=False,\n        zeroline=False,\n        domain=[0.15, 1]\n    ),\n    yaxis=dict(\n        showgrid=False,\n        showline=False,\n        showticklabels=False,\n        zeroline=False,\n    ),\n    barmode='stack',\n    paper_bgcolor='rgb(224, 255, 255)',\n    plot_bgcolor='rgb(224, 255, 255)',\n    margin=dict(\n        l=80,\n        r=10,\n        t=120,\n        b=30\n    ),\n    showlegend=False,\n)\n\nannotations = []\n\nfor yd, xd in zip(y_data, x_data):\n    # labeling the y-axis\n    annotations.append(dict(xref='paper', yref='y',\n                            x=0.14, y=yd,\n                            xanchor='right',\n                            text=str(yd),\n                            font=dict(family='Arial', size=14,\n                                      color='rgb(67, 67, 67)'),\n                            showarrow=False, align='right'))\n    # labeling the first percentage of each bar (x_axis)\n    annotations.append(dict(xref='x', yref='y',\n                            x=xd[0] \/ 2, y=yd,\n                            text=str(xd[0]) + '%',\n                            font=dict(family='Arial', size=10,\n                                      color='rgb(248, 248, 255)'),\n                            showarrow=False))\n    # labeling the first Likert scale (on the top)\n    if yd == y_data[-1]:\n        annotations.append(dict(xref='x', yref='paper',\n                                x=xd[0] \/ 2, y=1.02,\n                                text=top_labels[0],\n                                font=dict(family='Arial', size=14,\n                                          color='rgb(67, 67, 67)'),\n                                showarrow=False))\n    space = xd[0]\n    for i in range(1, len(xd)):\n            # labeling the rest of percentages for each bar (x_axis)\n            annotations.append(dict(xref='x', yref='y',\n                                    x=space + (xd[i]\/2), y=yd, \n                                    text=str(xd[i]) + '%',\n                                    font=dict(family='Arial', size=14,\n                                              color='rgb(248, 248, 255)'),\n                                    showarrow=False))\n            # labeling the Likert scale\n            if yd == y_data[-1]:\n                annotations.append(dict(xref='x', yref='paper',\n                                        x=space + (xd[i]\/2), y=1.02,\n                                        text=top_labels[i],\n                                        font=dict(family='Arial', size=14,\n                                                  color='rgb(67, 67, 67)'),\n                                        showarrow=False))\n            space += xd[i]\n\nlayout['annotations'] = annotations\n\nfig = go.Figure(data=traces, layout=layout)\nfig['layout'].update(height = 1300);\niplot(fig, filename='bar-colorscale')","d6ac691c":"import pandas as pd\nmultiple_choice_responses = pd.read_csv(\"..\/input\/kaggle-survey-2019\/multiple_choice_responses.csv\")\nother_text_responses = pd.read_csv(\"..\/input\/kaggle-survey-2019\/other_text_responses.csv\")\nquestions_only = pd.read_csv(\"..\/input\/kaggle-survey-2019\/questions_only.csv\")\nsurvey_schema = pd.read_csv(\"..\/input\/kaggle-survey-2019\/survey_schema.csv\")","acae1dd2":"![Title](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/7\/7c\/Kaggle_logo.png)\n\n\nIn this Kernel, I am going to focus on the last two years Kaggle survey dataset. I will use these responses to create a guideline for those, who are trying to break into the field of **Data Science.** \n\nThe idea of this kernel is simple. First, we will give an overview of the responses through visualization. Then we will go into more depth with each answer. So, let's get started. ","fb0f0a48":"## What are the Recommended Choice of Machine Learning Methods?","d03ea744":"According to the professionals, the most important aspects of a job is **learning** besides **office environment and salary**. So, if you are in a job that you are not learning anything; it is probably a good idea to look for a change. ","dd4a57a0":"## What are the Frequently used Skills\/Tools?","bf10ae31":"## How much do they earn?","fd686f6a":"Even though the participation rates increased in Kaggle surveys, the ratio between male and female stayed almost the same. ","f2cb0b17":"## What are the Key Factors in a Job Environment?","18e27a9f":"Hmm.. .   . <b>Dirty data and Hiring funds<\/b> seems to be the top challenging aspects that companies deal with. ","f4306ba4":"It looks like most of the respondents have come from Computer Science, Math or Engineering background.","c6089715":"## What are the Recommended Choice of Machine Learning Tools?","8015b5d5":"For those who are not familier with wordcloud like the one above, it is used to find out frequiently used terms in any text. In this case, we are using it to find the frequiently used titles given by survey takers. According to this wordcloud above, most of the respondents are either **Data Scientist** or **Software Engineer**","27d730ff":"According to most professionals, it takes <b> less than a year to learn Data Science.<\/b>","b88be621":"## What are the Recommended Choice of Languages?","9b0422f6":"## What do Professionals Think are the Most Important Job Skills?","bbc86eb0":"It is true that <b> the United States, India & China<\/b> are the three leading countries in the tech industry. If you are following the latest trends you would know that China is going all out and trying to dominate the tech industry. However, with all that being said, the market for US citizens is still a lot better than other countries as the chart above shows. ","683d778e":"# Credits\n\n* All thanks to [Plotly](https:\/\/plot.ly\/python\/) for publishing well documented data visualization resources. \n* Thanks to Kaggle for being an incredible host and providing these amazing datasets. \n* And most of all, thanks to Kaggle community. It's been an amazing ride. \n\n<div>\n*** This kernel will always be a work in progress. I will incorporate more charts with each update. If you have any idea\/suggestions about this notebook, please let me know. Any feedback about further improvements would be genuinely appreciated.***\n\n***\nIf you like to discuss any other projects or have a chat about data science topics, I'll be more than happy to connect with you on:\n\n**LinkedIn:** https:\/\/www.linkedin.com\/in\/masumrumi\/ \n\n**My Website:** http:\/\/masumrumi.com\/ \n\n\n### If you have come this far, Congratulations!!\n\n### If this notebook helped you in any way or you liked it, please upvote and\/or leave a comment!! :) \n***","3ff83b40":"Most of the survey takers work in the <b>Computers Technology<\/b> industry. There are also others who work in the Academic, Education, Accounting and Finance. ","14aa6454":"<b>Data Visualization, Cross Validation, NLP and Neural Networks<\/b> are some of the most used methods in the tech industry.","fdb61377":"## What was their Major?","afecb605":"## What is Their Title?","174caac1":"Most respondents are within the range from **18 to 39 years of age.** It seems like this is the perfect age to invest your time towards learning data science. ","51eb4bf4":"Most respondents hold at least a Master's degree. ","c726192a":"It looks like United States and India is participating the most, What took my attention is when I looked at China. The participation rate massively incresed during the year 2018 and went down in 2019. I am guessing China has already made their own version of Kaggle somewhere in the web. ","b3239fcb":"Most respondents are from **United States, India and China.** However, it looks like the amount of participation from these countries decreases in 2018. ","89fb79c4":"# Exploratory Data Analysis(EDA)\n***\n## What are the Male\/Female ratio?","a9b246e8":"It looks like **Python, SQL, Unix and Jupyter Notebook** are some of the most used tools\/skills based on the survey given by professionals. ","a7b1c816":"## Top Ten Countries with Most Respondents?","0e07da51":"It looks like the two most important skills are <b>Python & Statistics.<\/b> There is also a pretty good emphesis on **BigData** & **Visualixation.** Contrary to popular belief, most professionals don't think having a **degree** is neceassary and some **13%** thinks its unnecessary. ","141e511b":"## In What Industries do They Work??","1f4f2d91":"## What do Professionals think about learning Online\/BootCamp vs Traditional Brick and mortar institutions?","6cee9f90":"## What are their ages?","62638862":"## What Certificates do they hold?","318ea54c":"## What are Some of the Challenges Companies Deal With?","a8c2f504":"\nThough most professionals stayed neutral, As many as almost half of them thinks it is either slightly better or much better to take a **coding boot camp** or **online courses** than getting a degree from traditional schools. ","65114556":"## How long does it take to learn Data Science?","4a47a742":"## What are the Frequently used Methods in the Work Place?"}}