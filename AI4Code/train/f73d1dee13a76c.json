{"cell_type":{"67d60ca1":"code","12b533ec":"code","3f516ad1":"code","c916a0b3":"code","8f6baeae":"code","e0346416":"code","47fbdbc4":"code","35a24883":"code","cff2b7d1":"code","e559fdec":"code","8442cac9":"code","809d9a64":"code","f18ef58e":"code","d5737a45":"code","67953335":"code","f6359918":"code","5eb2d909":"code","f79b4bb7":"code","8ef5ad44":"code","1acf3f6b":"markdown","1a5335ca":"markdown","b54fb879":"markdown","9c56d8af":"markdown","3041226d":"markdown","21e57a68":"markdown","eb676092":"markdown","d168b29c":"markdown","ecd5ef3b":"markdown","2aaf2db5":"markdown","b884686e":"markdown","f051bf3b":"markdown","94901a08":"markdown","67b49991":"markdown","ba48622d":"markdown","bda89691":"markdown","aa3b200a":"markdown","3d7d9c71":"markdown","43a1a1b6":"markdown"},"source":{"67d60ca1":"import os\nimport pandas as pd\nimport numpy as np\nimport tensorflow as tf\nimport json\nimport cv2\nimport matplotlib.pyplot as plt\nimport datetime as dt\nfrom tqdm import tqdm\nfrom tensorflow import keras\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D\nfrom tensorflow.keras.layers import Dense, Dropout, Flatten, Activation, BatchNormalization\nfrom tensorflow.keras.metrics import categorical_accuracy, top_k_categorical_accuracy, categorical_crossentropy\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.applications import MobileNet\nfrom tensorflow.keras.applications.mobilenet import preprocess_input","12b533ec":"DP_DIR = '..\/input\/shuffle-csvs\/'\nINPUT_DIR = '..\/input\/quickdraw-doodle-recognition\/'\nNCSVS = 100\nNCATS = 340\nBASE_SIZE = 256\nsize = 64\nepochs = 30\nbatch_size = 100\nstart = dt.datetime.now()","3f516ad1":"def draw_img(lines):\n    img = np.zeros((BASE_SIZE, BASE_SIZE))\n    for line in lines:\n        for i in range(len(line[0]) - 1):\n            _ = cv2.line(img, (line[0][i], line[1][i]), (line[0][i + 1], line[1][i + 1]), 255, 6)\n    return cv2.resize(img, (size, size))","c916a0b3":"def image_gen(batchsize, cnt):\n    while True:\n        for k in np.random.permutation(cnt):\n            filename = os.path.join(DP_DIR, 'train_k{}.csv.gz'.format(k))\n            for df in pd.read_csv(filename, chunksize=batchsize):\n                df['drawing'] = df['drawing'].apply(json.loads)\n                x = np.zeros((len(df), size, size, 1))\n                for i, lines in enumerate(df.drawing.values):\n                    x[i, :, :, 0] = draw_img(lines)\n                    \n                x = preprocess_input(x).astype(np.float32)\n                y = keras.utils.to_categorical(df.y, num_classes=NCATS)\n                \n                yield x, y","8f6baeae":"def df_to_image(df):\n    df['drawing'] = df['drawing'].apply(json.loads)\n    x = np.zeros((len(df), size, size, 1))\n    for i, lines in enumerate(df.drawing.values):\n        x[i, :, :, 0] = draw_img(lines)\n    x = preprocess_input(x).astype(np.float32)\n    return x","e0346416":"train_datagen = image_gen(batch_size, range(NCSVS - 1))","47fbdbc4":"files = sorted(os.listdir('..\/input\/quickdraw-doodle-recognition\/train_simplified\/'), reverse=False, key=str.lower)\nclass_dict = {file[:-4].replace(\" \", \"_\"): i for i, file in enumerate(files)}\nclassreverse_dict = {v: k for k, v in class_dict.items()}","35a24883":"def CNN_model():\n    model = MobileNet(input_shape=(size, size, 1), alpha=1., weights=None, classes=NCATS)\n    \n#     My Own Model\n#     model = Sequential()\n\n#     model.add(Conv2D(32,kernel_size=3,activation='relu',padding='same',input_shape=(size,size,1)))\n#     model.add(BatchNormalization())\n#     model.add(Conv2D(32,kernel_size=3,activation='relu', padding='same'))\n#     model.add(BatchNormalization())\n#     model.add(Conv2D(32,kernel_size=5,strides=2,padding='same',activation='relu'))\n#     model.add(BatchNormalization())\n#     model.add(Dropout(0.4))\n\n#     model.add(Conv2D(64,kernel_size=3,activation='relu', padding='same'))\n#     model.add(BatchNormalization())\n#     model.add(Conv2D(64,kernel_size=3,activation='relu', padding='same'))\n#     model.add(BatchNormalization())\n#     model.add(Conv2D(64,kernel_size=5,strides=2,padding='same',activation='relu'))\n#     model.add(BatchNormalization())\n#     model.add(Dropout(0.4))\n\n#     model.add(Flatten())\n#     model.add(Dense(2 * NCATS, activation='relu'))\n#     model.add(BatchNormalization())\n#     model.add(Dropout(0.4))\n#     model.add(Dense(NCATS, activation='softmax'))\n\n    model.summary()\n    \n    return model","cff2b7d1":"def top_3_accuracy(y_true, y_pred):\n    return top_k_categorical_accuracy(y_true, y_pred, k=3)","e559fdec":"model = CNN_model()\n\nmodel.compile(optimizer=Adam(lr=0.0024), loss='categorical_crossentropy', metrics=[categorical_crossentropy, categorical_accuracy, top_3_accuracy])","8442cac9":"callbacks = [ReduceLROnPlateau(monitor='val_acc', patience=3, verbose=1, factor=0.5, min_lr=0.00001)]","809d9a64":"valid_df = pd.read_csv(os.path.join(DP_DIR, 'train_k{}.csv.gz'.format(NCSVS - 1)), nrows=34000)\nx_valid = df_to_image(valid_df)\ny_valid = keras.utils.to_categorical(valid_df.y, num_classes=NCATS)\nprint(x_valid.shape, y_valid.shape)\nprint('Validation array memory {:.2f} GB'.format(x_valid.nbytes \/ 1024.**3 ))","f18ef58e":"history = model.fit_generator(train_datagen, epochs = epochs, verbose = 1, \n                              validation_data=(x_valid, y_valid),\n                              steps_per_epoch=x_valid.shape[0] \/\/ batch_size, callbacks=callbacks)","d5737a45":"test = pd.read_csv(os.path.join(INPUT_DIR, 'test_simplified.csv'))\ntest.head()","67953335":"x_test = df_to_image(test)\nprint(test.shape, x_test.shape)\nprint('Test array memory {:.2f} GB'.format(x_test.nbytes \/ 1024.**3 ))","f6359918":"test_predictions = model.predict(x_test, batch_size=batch_size)","5eb2d909":"top3 = pd.DataFrame(np.argsort(-test_predictions, axis=1)[:, :3])\ntop3.head()","f79b4bb7":"word = top3.replace(classreverse_dict)\ntest['word'] = word[0] + ' ' + word[1] + ' ' + word[2]\nsubmission = test[['key_id', 'word']]\nsubmission.to_csv('submission.csv', index=False)\nsubmission.head()","8ef5ad44":"end = dt.datetime.now()\nprint('Latest run {}.\\nTotal time {}s'.format(end, (end - start).seconds))","1acf3f6b":"This code is based on [this kernel](https:\/\/www.kaggle.com\/gaborfodor\/greyscale-mobilenet-lb-0-892).","1a5335ca":"# 3. Training","b54fb879":"## Check image's info","9c56d8af":"Use Adam optimizers.","3041226d":"# 2. Construct Model","21e57a68":"It's too bigger than memory given to us(140GB >> 13GB). So, we will use other data.  \n<https:\/\/www.kaggle.com\/gaborfodor\/shuffle-csvs>  \nIn this kernel, gaborfodor makes shuffle-csvs. Each of csv files includes all kinds of pictures. A file is fully available within the memory given to us.  ","eb676092":"Make map with number and category's name.","d168b29c":"Select top3 category.","ecd5ef3b":"# 1. Check data\n\n## 1-1. Check data's size","2aaf2db5":"## 1-2. Draw Image","b884686e":"## annealing","f051bf3b":"# 4. Predict test data","94901a08":"# quickdraw-doodle-recognition\n\nHello, everyone. This competition is a level3 image classification. \n\n**Dataset's name:description(size, count of train data, count of test data)**  \nLevel 1 : **MNIST** : pictures of 0~9, grey(28\\*28, 60000, 10000)  \nLevel 2 : **CIFAR-10** : pictures of 10 objects, rgb(32\\*32, 50000, 10000)  \nLevel 3 : **CIFAR-100** : pictures of 100 objects, rgb(32\\*32, 50000, 10000)  \nLevel 4 : **ImageNet** : pictures of 1000 objects, rgb(224\\*224)\n(I set this level by my criteria.)\n\nIn image classification, generally, people go through the following steps:  \n1. Check data  \n    1-1. Check data's size  \n    1-2. Draw image(when data is not an image)  \n    1-3. Check image's info  \n2. Construct Model  \n    2-1. VGG, ResNet, GoogleNet, your own model etc...  \n    2-2. Set parameters  \n    2-3. optimizers, annealing  \n3. Training  \n4. Predict test data  \n    4-1. If you don't satisfy, go to step2.  \n5. Make submissions  \n\nThen let's start.","67b49991":"## Hyper Parameter","ba48622d":"# 5. Make submissions","bda89691":"Make image randomly.","aa3b200a":"Change number to category's name, and submit submissions.","3d7d9c71":"Make validation data.","43a1a1b6":"Draw image with line function in cv2 module."}}