{"cell_type":{"b6ad5eb7":"code","e44d88bd":"code","7cec80c8":"code","f239300e":"code","6ef69f3f":"code","7d45acb6":"code","61504318":"code","bdfc2978":"code","3622541b":"code","9f2b236f":"code","2a6e4077":"code","2dd80711":"code","c9494bec":"code","eea4f035":"code","29be98a0":"code","899cb0b3":"code","efe76ea2":"code","c70cf34c":"code","c317e5bd":"code","21e2e283":"code","ffcc230c":"code","48417b24":"code","6702dd0e":"code","07e013fe":"code","996a8abc":"code","2bbbb36b":"code","f9f10822":"code","05c7c505":"code","e678b2a0":"code","a6da6e38":"code","e27748c8":"code","0181cc1a":"code","d96c5e3a":"code","835a582a":"code","651bb084":"code","ddd9c639":"code","151168f4":"code","03ebe0a3":"code","d597218e":"code","c2965819":"code","fd10b42c":"code","67d2065c":"code","dabbb1a9":"code","e437f94d":"code","5cd86ac4":"code","d1f6ab8d":"code","42dfab15":"code","3fcc8c94":"code","bd66ae47":"code","33a2f159":"code","6000942d":"code","3bd55b15":"code","64779251":"code","4db8a6f9":"code","92bebe2c":"code","0f93b806":"code","50c1de99":"code","aed4fdb6":"code","2449cbe9":"code","7de0e2bc":"code","9ce123d8":"markdown","e06b02d2":"markdown","783703f5":"markdown","ecbd234e":"markdown","5256d846":"markdown"},"source":{"b6ad5eb7":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport scipy\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom wordcloud import WordCloud,STOPWORDS\nfrom sklearn.metrics import accuracy_score \nfrom sklearn.preprocessing import StandardScaler\nfrom collections import Counter\nfrom sklearn.linear_model import Ridge, LogisticRegression\nfrom sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer\nfrom sklearn.preprocessing import LabelBinarizer\nfrom sklearn.ensemble import RandomForestClassifier, RandomForestRegressor\n\nfrom nltk.stem import PorterStemmer, WordNetLemmatizer\nfrom nltk.corpus import wordnet","e44d88bd":"!pip install xgboost","7cec80c8":"from xgboost import XGBClassifier","f239300e":"train_df = pd.read_csv('..\/input\/iba-ml1-final-project\/train.csv')\ntest_df = pd.read_csv('..\/input\/iba-ml1-final-project\/test.csv')","6ef69f3f":"train_df.head()","7d45acb6":"# train_df = train_df.drop(\"Id\",axis=1)\ndf = pd.concat([train_df, test_df], 0)\nnrow_train = train_df.shape[0]\ny_train_1 = train_df[\"Rating\"]\ny_train_2 = train_df[\"Recommended\"]","61504318":"df[\"Product_Category\"] = df[\"Product_Category\"].fillna(\"Other\").astype(\"category\")\ndf[\"Department\"] = df[\"Department\"].fillna(\"unknown\")\ndf[\"Division\"] = df[\"Division\"].fillna(\"unknown\")","bdfc2978":"df[\"Review\"] = df[\"Review\"].fillna(\"None\")\ndf[\"Review_Title\"] = df[\"Review_Title\"].fillna(\"None\")","3622541b":"count = CountVectorizer(min_df=10)\nX_title = count.fit_transform(df[\"Review_Title\"])","9f2b236f":"unique_categories = pd.Series(\"\/\".join(df[\"Product_Category\"].unique().astype(\"str\")).split(\"\/\")).unique()\nunique_categories","2a6e4077":"df['unstemmed'] = df['Review'].str.split()","2dd80711":"df['stemmed'] = df['unstemmed'].apply(lambda x: [PorterStemmer().stem(y) for y in x]) # Stem every word.","c9494bec":"df = df.drop(columns=['unstemmed']) ","eea4f035":"df['stemmed_review'] = df['stemmed'].apply(lambda x: ' '.join(x))","29be98a0":"count_review = TfidfVectorizer(max_features = 5000, \n                              ngram_range = (1,3),\n                              stop_words = \"english\")\nX_review = count_review.fit_transform(df[\"stemmed_review\"])","899cb0b3":"df[\"Department\"].value_counts()","efe76ea2":"df[\"Division\"].value_counts()","c70cf34c":"vect = LabelBinarizer(sparse_output=True)\nX_cat = vect.fit_transform(df[\"Product_Category\"])","c317e5bd":"X_dummies = scipy.sparse.csr_matrix(pd.get_dummies(df[[\n    \"Division\", \"Department\"]], sparse = True).values)","21e2e283":"scaler = StandardScaler()\nX_age = scaler.fit_transform(df[\"Age\"].values.reshape(-1,1))\nX_PFC = scaler.fit_transform(df[\"Pos_Feedback_Cnt\"].values.reshape(-1,1))","ffcc230c":"X = scipy.sparse.hstack((X_dummies, \n                         X_review,\n                         X_cat,\n                         X_title,\n                         X_age,\n                         X_PFC\n                         )).tocsr()","48417b24":"X.shape","6702dd0e":"X_train = X[:nrow_train]\nmodel = Ridge(solver = \"lsqr\", fit_intercept=False)","07e013fe":"model.fit(X_train, y_train_2)","996a8abc":"X_test = X[nrow_train:]\nrecommended_preds = model.predict(X_test)","2bbbb36b":"recommended_preds","f9f10822":"print(recommended_preds.min())\nprint(recommended_preds.max())","05c7c505":"recommended_preds = np.where(recommended_preds>0.5,1,0)","e678b2a0":"Counter(recommended_preds).values() # counts the elements' frequency","a6da6e38":"recommended = df['Recommended'][:nrow_train]","e27748c8":"recommended","0181cc1a":"recommended = recommended.append(pd.Series(np.asarray(recommended_preds)))","d96c5e3a":"recommended","835a582a":"X = scipy.sparse.hstack((X_dummies, \n                         X_review,\n                         X_cat,\n                         X_title,\n                         X_age,\n                         X_PFC,\n                         recommended.values.reshape(-1,1)\n                         )).tocsr()","651bb084":"X_train = X[:nrow_train]\nX_test = X[nrow_train:]","ddd9c639":"# model2 = RandomForestClassifier()\nmodel2 = RandomForestRegressor()\nmodel2.fit(X_train, y_train_1)","151168f4":"review_preds = model2.predict(X_test)","03ebe0a3":"review_preds = review_preds.round()","d597218e":"review_preds","c2965819":"pd.Series(review_preds).hist()","fd10b42c":"pd.Series(recommended_preds).hist()","67d2065c":"recommended_preds","dabbb1a9":"submission = pd.DataFrame({\n        \"Id\": test_df[\"Id\"],\n        \"Rating\": review_preds,\n        \"Recommended\" : recommended_preds,\n    })","e437f94d":"submission","5cd86ac4":"submission.to_csv('.\/submission.csv', index=False)","d1f6ab8d":"X_train,X_test,y_train,y_test = train_test_split(X[:nrow_train],y_train_1)\nX_train2,X_test2,y_train2,y_test2 = train_test_split(X[:nrow_train],y_train_2)","42dfab15":"model1 = XGBClassifier()\n# model2 = Ridge(solver = \"lsqr\", fit_intercept=False)\nmodel2 = RandomForestRegressor()","3fcc8c94":"model1.fit(X_train,y_train)\nmodel2.fit(X_train2,y_train2)","bd66ae47":"recommended_preds = model2.predict(X_test2)\nreview_preds = model1.predict(X_test)","33a2f159":"review_preds = review_preds.round()","6000942d":"pd.Series(review_preds).hist()","3bd55b15":"pd.Series(review_preds).hist()","64779251":"recommended_preds","4db8a6f9":"recommended_preds = np.where(recommended_preds>0.5,1,0)","92bebe2c":"recommended_preds","0f93b806":"Counter(recommended_preds).values() # counts the elements' frequency","50c1de99":"Counter(review_preds).values()","aed4fdb6":"accuracy_score(y_test,review_preds)","2449cbe9":"# new accuracy\naccuracy_score(y_test,review_preds)","7de0e2bc":"accuracy_score(y_test2,recommended_preds)","9ce123d8":"Proportion of predictions on Recommended look accurate, however it is not the case for Rating","e06b02d2":"# Creating model","783703f5":"Concatinating Recommended in train set and predicted Recommended to use it when predicting Rating","ecbd234e":"# Test model\n","5256d846":"#### stemming and lemmatization"}}