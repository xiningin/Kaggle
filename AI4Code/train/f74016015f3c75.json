{"cell_type":{"cb58c99e":"code","8101e400":"code","7d876411":"code","a3c2bcb1":"code","dc6b91c7":"code","9cef8ebe":"code","5fe72902":"code","bcacfcc8":"code","092f10b0":"code","512b5134":"code","3e3405c7":"code","600e0e2d":"code","2d9d59e9":"code","398c6590":"code","b50d50d1":"code","9199c458":"code","d3e97d80":"code","501c9dd8":"code","d105dd43":"code","301edc07":"code","50c62f12":"code","6b848cbb":"code","3db02dad":"markdown","cc17a467":"markdown","6760f85f":"markdown","8cebcb6c":"markdown"},"source":{"cb58c99e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8101e400":"data = pd.read_csv('..\/input\/titanic\/train.csv')\ndata.tail()","7d876411":"data.isna().sum()","a3c2bcb1":"print(data['Ticket'].nunique(), len(data))","dc6b91c7":"print(data['Age'].mean())\nprint(data['Age'].median())","9cef8ebe":"data['Embarked'].value_counts()","5fe72902":"gender = {'male': 0, 'female': 1}\ndata['Sex'] = [gender[x] for x in data['Sex']]\nembarked = {'C': 0, 'S': 1, 'Q': 2}\ndata['Embarked'] = data['Embarked'].fillna('S')\ndata['Embarked'] = [embarked[x] for x in data['Embarked']]","bcacfcc8":"import seaborn as sns\n\nfeatures = ['Survived', 'Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare']\nsns.heatmap(data[features].corr(), annot=True)","092f10b0":"import matplotlib\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfig, axs = plt.subplots(nrows=2, ncols=2, figsize=(12, 12))\naxs[0, 0].bar(data['Sex'].unique(), data['Sex'].value_counts())\naxs[0, 0].set_title('Sex')\n\naxs[0, 1].bar(data['Pclass'].unique(), data['Pclass'].value_counts())\naxs[0, 1].set_title('Pclass')\n\naxs[1, 0].bar(data['PassengerId'], data['Age'])\naxs[1, 0].set_title('Age')\n\naxs[1, 1].bar(data['PassengerId'], data['Fare'])\naxs[1, 1].set_title('Fare')\n\nplt.show()","512b5134":"res = []\nfor i in range(len(data)):\n    if data['Pclass'][i] == 1 and data['Sex'][i] == 0:\n        res.append(0)\n    elif data['Pclass'][i] == 1 and data['Sex'][i] == 1:\n        res.append(1)\n    elif data['Pclass'][i] == 2 and data['Sex'][i] == 0:\n        res.append(2)\n    elif data['Pclass'][i] == 2 and data['Sex'][i] == 1:\n        res.append(3)\n    elif data['Pclass'][i] == 3 and data['Sex'][i] == 0:\n        res.append(4)\n    else:\n        res.append(5)\ndata['Sex & Class'] = res\ndata.head()","3e3405c7":"for i in range(6):\n    print('Class', i)\n    print(len(data[data['Sex & Class'] == i][data['Survived'] == 0]))\n    print(len(data[data['Sex & Class'] == i][data['Survived'] == 1]))\n    print('\\n')","600e0e2d":"data = data[['Survived', 'Sex', 'Age', 'Pclass', 'Fare', 'Sex & Class']]\nsns.heatmap(data.corr(), annot=True)","2d9d59e9":"from sklearn.model_selection import train_test_split\n\nf = ['Sex', 'Pclass', 'Fare']\nx_train, x_test, y_train, y_test = train_test_split(data[f], data['Survived'], test_size=0.2, random_state=74)","398c6590":"!pip install catboost","b50d50d1":"from catboost import CatBoostClassifier\nfrom sklearn.metrics import f1_score, roc_auc_score\n\ncb = CatBoostClassifier()\ncb.fit(x_train, y_train)\n\ntrain_pred = cb.predict(x_train)\ntest_pred = cb.predict(x_test)\n\nprint('Train accuracy')\nprint(f'F score: {f1_score(y_train, train_pred)}')\nprint(f'ROC-AUC: {roc_auc_score(y_train, train_pred)}')\nprint('\\n')\n\nprint('Test accuracy')\nprint(f'F score: {f1_score(y_test, test_pred)}')\nprint(f'ROC-AUC: {roc_auc_score(y_test, test_pred)}')","9199c458":"from sklearn.model_selection import GridSearchCV\n\nparams = {'learning_rate': [0.04, 0.07, 0.1, 0.13], 'depth': [4, 6, 8], 'iterations': [250, 500, 1000]}\nsearch = GridSearchCV(CatBoostClassifier(), params)\nsearch.fit(x_train, y_train)","d3e97d80":"search.best_params_","501c9dd8":"x_train.head()","d105dd43":"cb1 = CatBoostClassifier(learning_rate=0.05, max_depth=4, n_estimators=250)\ncb1.fit(x_train, y_train)\n\ntrain_pred = cb1.predict(x_train)\ntest_pred = cb1.predict(x_test)\n\nprint('Train accuracy')\nprint(f'F score: {f1_score(y_train, train_pred)}')\nprint(f'ROC-AUC: {roc_auc_score(y_train, train_pred)}')\nprint('\\n')\n\nprint('Test accuracy')\nprint(f'F score: {f1_score(y_test, test_pred)}')\nprint(f'ROC-AUC: {roc_auc_score(y_test, test_pred)}')","301edc07":"test = pd.read_csv('..\/input\/titanic\/test.csv')\ntest['Sex'] = [gender[x] for x in test['Sex']]\ntest = test[['Sex', 'Fare', 'Pclass']]\ntest.isna().any()","50c62f12":"test = test.fillna(test['Fare'].median())\nprediction = cb1.predict(test)\nprediction","6b848cbb":"import csv\n\ntest = pd.read_csv('..\/input\/titanic\/test.csv')\n\nwith open('submission1.csv', 'w') as file:\n  wr = csv.writer(file, delimiter=',')\n  wr.writerow(['PassengerId', 'Survived'])\n  for i in range(len(prediction)):\n    wr.writerow([test['PassengerId'][i], prediction[i]])","3db02dad":"I won't also use ticket column as it has too many unique values","cc17a467":"Difference between mean and median values is not that big but I still prefer to use median","6760f85f":"It is better to remove \"Cabin\" becauese this column has too many nan values","8cebcb6c":"This gives 0.78229"}}