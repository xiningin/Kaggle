{"cell_type":{"bbdf3192":"code","58d74949":"code","5810c9eb":"code","5a40d431":"code","27cf5522":"code","b986975d":"code","97394157":"code","2aef4e6c":"code","4b3ae6cf":"code","0d3c4555":"code","9d5b5af9":"code","30c7c59c":"code","103ea516":"code","a32444a7":"code","580656e7":"code","aba29a57":"code","3826743f":"code","c0086f9d":"code","ed492f21":"code","995ba2ec":"code","cb0cd77f":"code","619a170c":"code","dac517c6":"code","624ce963":"code","93502334":"code","aeb8654f":"code","e0efee7f":"code","d9d3bdc3":"code","d8aad9cd":"code","b1ebde62":"code","f22948b7":"code","662940d3":"code","d1adda27":"code","4ddd8be3":"code","db9695ca":"code","2bf67ca1":"code","fa3c1491":"code","9fcfe5ed":"code","b3fa9afe":"code","c5ae90a6":"code","838152cf":"code","ab52aba4":"code","b1d8db27":"code","43862759":"code","3302a956":"code","619b3ac1":"code","d9e22da6":"code","fa0cd8e5":"code","11cd5fe0":"code","3bed93ed":"code","9e69dd8e":"code","529e18fe":"code","bd3ce452":"code","14b0dd27":"markdown","2f4d6eec":"markdown","04cf64df":"markdown","fde0e836":"markdown","4e646333":"markdown","e8ba55b2":"markdown","8d031555":"markdown","019e5b4a":"markdown","45d660b4":"markdown","fc8259c3":"markdown","9b716022":"markdown","6b37c2de":"markdown","19747961":"markdown","3d09122c":"markdown","03684d0e":"markdown","ddc1b1f2":"markdown","d75b320b":"markdown","9da0e289":"markdown","71ec4951":"markdown","175b4757":"markdown","f12cd754":"markdown","2b055557":"markdown","e15ca3e4":"markdown","9b09a52a":"markdown","d788ce3d":"markdown","f0a399ad":"markdown","e4bbf9a2":"markdown","fce2bd5b":"markdown","dec473f0":"markdown","46e058c2":"markdown","e07b8a04":"markdown","39cce4e0":"markdown","7da85d17":"markdown","cb8628c6":"markdown","b49bf109":"markdown","be428969":"markdown","0e0ef802":"markdown","b0766434":"markdown"},"source":{"bbdf3192":"import seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import f1_score\nfrom collections import Counter\nfrom yellowbrick.classifier import ROCAUC\nfrom yellowbrick.features import Rank1D, Rank2D\nfrom xgboost import plot_importance\nfrom matplotlib import pyplot\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import StratifiedKFold, cross_val_score, learning_curve, cross_validate, train_test_split, KFold\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom xgboost import XGBClassifier\nimport numpy as np\nimport pandas as pd\nimport warnings\nwarnings.filterwarnings(\"ignore\")","58d74949":"data=pd.read_csv('\/kaggle\/input\/fetal-health-classification\/fetal_health.csv')","5810c9eb":"sns.countplot(data.fetal_health)\nplt.show()","5a40d431":"cols=data.columns\ncols","27cf5522":"data.isnull().any()","b986975d":"from pandas_profiling import ProfileReport\nimport pandas_profiling as pdp\n\n#https:\/\/pandas-profiling.github.io\/pandas-profiling\/docs\/master\/rtd\/pages\/advanced_usage.html\n    \nprofile = ProfileReport(data, title='Pandas Profiling Report', minimal=True,progress_bar=False,      \n    missing_diagrams={\n          'heatmap': False,\n          'dendrogram': False,\n      } )\nprofile","97394157":"features = ['baseline value', 'accelerations', 'fetal_movement',\n       'uterine_contractions', 'light_decelerations', 'severe_decelerations',\n       'prolongued_decelerations', 'abnormal_short_term_variability',\n       'mean_value_of_short_term_variability',\n       'percentage_of_time_with_abnormal_long_term_variability',\n       'mean_value_of_long_term_variability', 'histogram_width',\n       'histogram_min', 'histogram_max', 'histogram_number_of_peaks',\n       'histogram_number_of_zeroes', 'histogram_mode', 'histogram_mean',\n       'histogram_median', 'histogram_variance', 'histogram_tendency']\n\nX = pd.DataFrame(data=data, columns=features)\ny = pd.DataFrame(data=data, columns=['fetal_health'])\ny = y.astype(int)\n# to make labels start from 0 to n_classes, otherwise I couldn't manage to run xgb with labels starting from 1 to n_classes \ud83d\ude1f\ud83d\ude1f\ud83d\ude1f\ny = y-1 \nX.head()\n","2aef4e6c":"from scipy.stats import probplot,skew\n\nfor i in cols:\n    fig, axes = plt.subplots(1, 3, figsize=(20,4))\n    sns.distplot(data[i],kde=False, ax=axes[0])\n    sns.boxplot(data[i], ax=axes[1])\n    probplot(data[i], plot=axes[2])\n    skew_val=round(data[i].skew(), 1)\n    axes[1].set_yticklabels([])\n    axes[1].set_yticks([])\n    axes[0].set_title(i + \" | Distplot\")\n    axes[1].set_title(i + \" | Boxplot\")\n    axes[2].set_title(i + \" | Probability Plot - Skew: \"+str(skew_val))\n    plt.show()","4b3ae6cf":"def correlation_heatmap(train):\n    correlations = train.corr()\n    fig, ax = plt.subplots(figsize=(15,15))\n    sns.heatmap(correlations, vmax=1.0, center=0, fmt='.2f', cmap=\"YlGnBu\",\n                square=True, linewidths=.5, annot=True, cbar_kws={\"shrink\": .70}\n                )\n    plt.show()\n","0d3c4555":"correlation_heatmap(data)","9d5b5af9":"# 30% test and 70% train data as mentioned by dataset Author\n# in the task https:\/\/www.kaggle.com\/andrewmvd\/fetal-health-classification\/tasks?taskId=2410\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=42, test_size=0.30, stratify=y)\n\nX_train.shape, y_train.shape, X_test.shape, y_test.shape,","30c7c59c":"import xgboost as xgb\nfrom sklearn.metrics import classification_report, confusion_matrix\n\ndtrain = xgb.DMatrix(data=X_train, label=y_train)\ndtest = xgb.DMatrix(data=X_test)","103ea516":"params = {\n    'max_depth': 6,\n    'objective': 'multi:softmax',\n    'num_class': 3,\n    # Set number of GPUs if available   \n    'n_gpus': 0\n}","a32444a7":"bst = xgb.train(params, dtrain)","580656e7":"pred = bst.predict(dtest)\nCounter(pred)","aba29a57":"print(classification_report(y_test, pred))","3826743f":"cm = confusion_matrix(y_test, pred)\ncm","c0086f9d":"def plot_confusion_matrix(cm, classes, normalized=True, cmap='bone'):\n    plt.figure(figsize=[7, 6])\n    norm_cm = cm\n    if normalized:\n        norm_cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n        sns.heatmap(norm_cm, annot=cm, fmt='g', xticklabels=classes, yticklabels=classes, cmap=cmap)\n\nplot_confusion_matrix(cm, ['Normal', 'Suspect', 'Pathological'])","ed492f21":"f1_score(y_test, pred, average=None)","995ba2ec":"plot_importance(bst,importance_type='weight')\npyplot.show()","cb0cd77f":"import shap\nexplainer = shap.TreeExplainer(bst)\nshap_values = explainer.shap_values(X_test)\n\nclasses=['Normal', 'Suspect', 'Pathological']\n\nshap.summary_plot(shap_values, X_test, plot_type=\"bar\", class_names=classes)","619a170c":"rf=RandomForestClassifier(random_state=55,class_weight='balanced_subsample')\nlr=LogisticRegression(random_state=55, multi_class='multinomial')\nsv = SVC(probability=True,random_state=55)\nlogreg = LogisticRegression(n_jobs=-1, solver='newton-cg',random_state=55) \ngb = GradientBoostingClassifier(random_state=55)\ngnb = GaussianNB()\nxgb= XGBClassifier(random_state=55)","dac517c6":"models=[rf, lr, sv, logreg, gb, gnb, xgb]\ncv = StratifiedKFold(10, shuffle=True, random_state=42)","624ce963":"model_results = pd.DataFrame()\nrow_number = 0\nresults = []\nnames = []\n\nfor ml in models:\n    model_name=ml.__class__.__name__\n    cv_results = cross_validate(ml, X_train, y_train, cv=cv, scoring='f1_macro', return_train_score=True, n_jobs=-1 )\n    model_results.loc[row_number,'Model Name']=model_name\n    model_results.loc[row_number, 'Train Accuracy Mean']=cv_results['train_score'].mean()\n    model_results.loc[row_number, 'Test Accuracy Mean']=cv_results['test_score'].mean()\n    model_results.loc[row_number, 'Fit Time Mean']=cv_results['fit_time'].mean()\n    results.append(cv_results)\n    names.append(model_name)\n    \n    row_number+=1","93502334":"cv_results_array = []\nfor tt in results:\n    cv_results_array.append(tt['test_score'])\n\nfig = plt.figure(figsize=(18, 6))\nfig.suptitle('Algorithm Comparison')\nax = fig.add_subplot(111)\nplt.boxplot(cv_results_array)\nax.set_xticklabels(names)\nplt.show()","aeb8654f":"display(model_results.style.background_gradient(cmap='summer_r'))","e0efee7f":"from sklearn.ensemble import StackingClassifier\n\nestimators = [\n    ('rf', RandomForestClassifier(random_state=55,class_weight='balanced_subsample')),\n    ('gb', GradientBoostingClassifier(random_state=55),\n    ('xgb',XGBClassifier(random_state=55)), \n    #('lr',LogisticRegression(random_state=55,multi_class='multinomial'))\n    )\n]\nclf = StackingClassifier(\n    estimators=estimators, final_estimator=RandomForestClassifier(random_state=55), cv=5\n)\n\nclf.fit(X_train, y_train).score(X_test, y_test)","d9d3bdc3":"pred = clf.predict(X_test)\ncm = confusion_matrix(y_test, pred)\ncm","d8aad9cd":"plot_confusion_matrix(cm, ['Normal', 'Suspect', 'Pathological'])","b1ebde62":"print(classification_report(y_test, pred))","f22948b7":"f1_score(y_test, pred, average=None)","662940d3":"from sklearn.utils import class_weight\nclass_weights = list(class_weight.compute_class_weight('balanced',\n                                             np.unique(y_train['fetal_health']),\n                                             y_train['fetal_health']))\n\nw_array = np.ones(y_train.shape[0], dtype = 'float')\nfor i, val in enumerate(y_train['fetal_health']):\n    w_array[i] = class_weights[val-1]\nsns.countplot(w_array)","d1adda27":"xgb= XGBClassifier(random_state=55)\nxgb.fit(X_train, y_train, sample_weight=w_array)","4ddd8be3":"pred = xgb.predict(X_test)\ncm = confusion_matrix(y_test, pred)\ncm","db9695ca":"plot_confusion_matrix(cm, ['Normal', 'Suspect', 'Pathological'])","2bf67ca1":"print(classification_report(y_test, pred))","fa3c1491":"f1_score(y_test, pred, average=None)","9fcfe5ed":"!pip install BorutaShap","b3fa9afe":"from BorutaShap import BorutaShap\n\n\nmodel = XGBClassifier(random_state=55)\nFeature_Selector = BorutaShap(model=model, importance_measure='shap', classification=True)\n\n\nFeature_Selector.fit(X=X_train, y=y_train.values, n_trials=100, random_state=0)","c5ae90a6":"Feature_Selector.plot(which_features='all',X_size=14, figsize=(18,8),y_scale='log')","838152cf":"# Returns a subset of the original data with the selected features\nsubset = Feature_Selector.Subset()\nsubset.head()","ab52aba4":"xgb = XGBClassifier(random_state=55)\nxgb.fit(X_train[subset.columns],y_train)\n\npred = xgb.predict(X_test[subset.columns])\ncm = confusion_matrix(y_test, pred)\ncm","b1d8db27":"plot_confusion_matrix(cm, ['Normal', 'Suspect', 'Pathological'])","43862759":"print(classification_report(y_test, pred))","3302a956":"f1_score(y_test, pred, average=None)","619b3ac1":"from sklearn.preprocessing import MinMaxScaler\n\nscaler = MinMaxScaler()\nscaler.fit(X_train)\n\nX_train_scaled=scaler.transform(X_train)\nX_test_scaled=scaler.transform(X_test)\n","d9e22da6":"X_train_scaled_df=pd.DataFrame(X_train_scaled, index=X_train.index, columns=X_train.columns)\nX_test_scaled_df=pd.DataFrame(X_test_scaled, index=X_test.index, columns=X_test.columns)\nX_train_scaled_df.head()","fa0cd8e5":"from sklearn.model_selection import StratifiedKFold, GridSearchCV\nfrom sklearn.metrics import make_scorer, f1_score, precision_score, recall_score, accuracy_score\n\nxgb = XGBClassifier(random_state=55, nthread=-1)\n\nparams = {\n            'n_estimators' : [100, 150, 200, 250],\n            'max_depth': [10, 15],\n        }\n        \n\nscorers = {\n            'f1_score':make_scorer(f1_score,average='macro'),\n            'f1_score_weighted':make_scorer(f1_score,average='weighted'),\n            'precision_score': make_scorer(precision_score,average='macro'),\n            'recall_score': make_scorer(recall_score,average='weighted'),\n            'accuracy_score': make_scorer(accuracy_score)\n          }\n\nskf = StratifiedKFold(n_splits=2)\n\ngrid = GridSearchCV(xgb, \n                    param_grid = params, \n                    scoring = scorers, \n                    n_jobs = -1, \n                    cv = skf.split(X_train_scaled_df, y_train),\n                    refit = \"f1_score_weighted\")\n\ngrid.fit(X_train_scaled_df, y_train)","11cd5fe0":"best_params= grid.best_params_\nbest_model = grid.best_estimator_\nbest_params","3bed93ed":"xgb = XGBClassifier(random_state=55,n_estimators=200,max_depth=10)\nxgb.fit(X_train_scaled_df,y_train)\npred = xgb.predict(X_test_scaled_df)\ncm = confusion_matrix(y_test, pred)\ncm","9e69dd8e":"plot_confusion_matrix(cm, ['Normal', 'Suspect', 'Pathological'])","529e18fe":"print(classification_report(y_test, pred))","bd3ce452":"f1_score(y_test, pred, average=None)","14b0dd27":"# **Classificaiton Report**","2f4d6eec":"# **Confusion Matrix**","04cf64df":"When we transform data to scaled format it's now in array format.<br>\nBut we can transorm scaled data format back into pandas datafarme easily \ud83d\ude03","fde0e836":"# **F1 Score**","4e646333":"# **Features**","e8ba55b2":"# **F1 Score**","8d031555":"# **Feature Importance with XGBoost Built-in**\n\nOK we use xgboost builtin plot_importance here to plot out most important features for model. I used 'weight' as importance type here. which is \nOther **importance_types**\n\n- \u2018weight\u2019 - the number of times a feature appears in tree(s).\n- \u2018gain\u2019 - the average gain across all splits the feature is used in.\n- \u2018cover\u2019 - the average coverage across all splits the feature is used in.\n- \u2018total_gain\u2019 - the total gain across all splits the feature is used in.\n- \u2018total_cover\u2019 - the total coverage across all splits the feature is used in. <p>\n    \n## **NOTE:**\n    \nIt's also possible to get features out of model without using plot_importance() function with get_score().<br>\nbst.get_score(importance_type='weight')","019e5b4a":"# **Scaling Data**\n\nFor further testing trying to scale data","45d660b4":"# **Report**","fc8259c3":"# **F1 Score**","9b716022":"# **Run Models**","6b37c2de":"# **Basic Feature Stats**","19747961":"# **Features in Dataset**","3d09122c":"# **Classification Report**","03684d0e":"# **Data Profiling**","ddc1b1f2":"# **Correlation Heatmap**","d75b320b":"# **Classification Report**","9da0e289":"# **Other Models**","71ec4951":"The which_features parameter has four different modes, \u2018all\u2019, \u2018accepted\u2019, \u2018rejected\u2019 and \u2018tentative\u2019.","175b4757":"# **F1 Score**","f12cd754":"# **Model**","2b055557":"# **Model Results**","e15ca3e4":"F1 Score","9b09a52a":"# **Fit Model**","d788ce3d":"# **Missing Values**\n\nLooks like we don't have any missing values.","f0a399ad":"# **Target Variable**\n\nTarget variable distribution looks imbalanced. \nSome options are over\/under sampling data or weighting classes.","e4bbf9a2":"# **BorutaShap**\n\nBorutaShap is a wrapper feature selection method which combines both the Boruta feature selection algorithm with shapley values. Despite BorutaShap's runtime improvments the SHAP TreeExplainer scales linearly with the number of observations making it's use cumbersome for large datasets. To combat this, BorutaShap includes a sampling procedure which uses the smallest possible subsample of the data availble at each iteration of the algorithm.\n\n\nif we don't define model parameter, default model is RandomForest for BorutaShap.\nSince we used xgboost mainly and above done some tests with sample weight and no weight models, I'll try with feature selection with Boruta to see results.\nWe set Classification True since this is a classification problem. \n\n\nReference: [https:\/\/github.com\/Ekeany\/Boruta-Shap](https:\/\/github.com\/Ekeany\/Boruta-Shap)","fce2bd5b":"# **Weighted XGBoost for Multiclass**\n\nAssign each training item it's class weight calculated with sklearn class_weight class","dec473f0":"# **XGBoost with Boruta Selected Features**","46e058c2":"# **GridSearchCV and XGBoost**","e07b8a04":"# **Fetal Health Dataset Notebook**\n\n\nI tried to demonstrate multiple methods in a single notebook:<p>\n- XGBoost multiclass mode\n- XGBoost built-in feature importance\n- XGBoost feature importance with Shap\n- Feature Selection with BorutaShap\n- Multiple model running and selection\n- Model Stacking with sklearn\n- Data profiling and Visualization\n- Scaling data\n- Finding best parameter with GridSearchCV\n   \n    \n    ","39cce4e0":"# **Feature importance with SHAP**","7da85d17":"# **Train Test Split**","cb8628c6":"# **Confusion Matrix**","b49bf109":"# **Classification Report**","be428969":"If we compare target variable 'fetal_health' and correlations, 3 features looks most important ones as\n- prolongued_decelerations\n- abnormal_short_term_variability\n- percentage_of_time_with_abnormal_long_term_variability","0e0ef802":"# **Predict**","b0766434":"# **Stacking Models**"}}