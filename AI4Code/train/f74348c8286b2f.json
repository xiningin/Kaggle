{"cell_type":{"8988805c":"code","f5ea0f15":"code","be74b263":"code","cc8d6baf":"code","9023b892":"code","138c5495":"code","d96b1434":"code","25aa4192":"code","791e412b":"code","552466a4":"markdown","2df04006":"markdown","522e4558":"markdown","c8d181a4":"markdown","33624124":"markdown","5103f894":"markdown","80d23ae0":"markdown","08eb7ec0":"markdown"},"source":{"8988805c":"import pandas as pd, numpy as np\nfrom sklearn.model_selection import train_test_split, KFold\nimport matplotlib.pyplot as plt","f5ea0f15":"train = pd.read_csv('..\/input\/digit-recognizer\/train.csv')\ntest = pd.read_csv('..\/input\/digit-recognizer\/test.csv')\n\nx_train = train[train.columns[1:]]\nx_test = test\ny_train = train[train.columns[0]]\n\ntrain.head()","be74b263":"def train_predict():\n    from sklearn.neighbors import KNeighborsClassifier\n    knn = KNeighborsClassifier(n_neighbors=3)\n    knn.fit(x_train, y_train)\n    return knn.predict(test)","cc8d6baf":"%%time\ny_pred_original = train_predict()","9023b892":"!pip install scikit-learn-intelex --progress-bar off >> \/tmp\/pip_sklearnex.log","138c5495":"from sklearnex import patch_sklearn\npatch_sklearn()","d96b1434":"%%time\ny_pred_oprimized = train_predict()","25aa4192":"np.mean(y_pred_oprimized == y_pred_original)","791e412b":"sub = pd.read_csv('..\/input\/digit-recognizer\/sample_submission.csv')\nsub.Label = y_pred_oprimized\nsub.to_csv('submission_sklearnex.csv',index=False)\nsub.head()","552466a4":"Let's take the training and predict into a separate function:","2df04006":"The training of the KNN model took **almost 35 minutes**. Let's try to use scikit-learn-intelex. First, download it:","522e4558":"Let\u2019s run the same code to train and predict the KNN model:","c8d181a4":"# Optimizing Kaggle kernels using Intel(R) Extension for Scikit-learn*\n\nFor classical machine learning algorithms, we often use the most popular Python library, [scikit-learn](https:\/\/scikit-learn.org\/stable\/). We use it to fit models and search for optimal parameters, but\u202fscikit-learn\u202fsometimes works for hours, if not days. Speeding up this process is something anyone who uses scikit-learn would be interested in.\n\nI want to show you how to get results faster without changing the code. To do this, we will use another Python library,\u202f**[scikit-learn-intelex](https:\/\/github.com\/intel\/scikit-learn-intelex)**. It accelerates scikit-learn and does not require you changing the code written for scikit-learn.\n\nI will use a Kaggle notebook in which the training of the KNN model executed in **over 35 minutes**.","33624124":"Save the result. Now the search for the perfect model has accelerated significantly.","5103f894":"With scikit-learn-intelex patching you can:\n\n- Use your scikit-learn code for training and inference without modification.\n- Train and predict scikit-learn models up to **35 times faster**.\n- Get the same quality of predictions as other tested frameworks.\n\n*Please, upvote if you like.*","80d23ae0":"This time, the training and predict took a **little over minute**, which saved us **almost 35 minutes**! Let\u2019s make sure that the quality has not changed:","08eb7ec0":"To get optimizations, patch scikit-learn using scikit-learn-intelex:"}}