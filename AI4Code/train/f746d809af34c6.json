{"cell_type":{"18c54251":"code","260a5445":"code","3411b424":"code","5dfc86a3":"code","981fdb87":"code","5f503be6":"code","011d63ac":"code","020eb522":"code","f4257846":"code","449ceac5":"code","a62e44ab":"code","08c4f307":"code","8098c239":"code","3eea9eed":"code","73e8ce8e":"code","811e7c23":"code","60e86081":"code","6aa2322d":"code","7e9be839":"code","4cb9759f":"code","3dc9c9fc":"code","ae7cce50":"code","78a197ad":"code","af856aab":"code","d30d4438":"code","af2615b1":"code","41cdaba2":"code","7eecb2e5":"code","6b1447b5":"code","c5718223":"code","b272bdb7":"code","3da5678e":"code","4ff558ee":"code","b2b1e58a":"code","2fc092f6":"code","07803c7c":"code","cc97f230":"code","077e8258":"code","b8637ac5":"code","5a76434e":"code","d1098c59":"code","f7981096":"code","028ac67b":"code","986d863e":"code","a7738c57":"code","474e0030":"code","b1d19fce":"code","00b856a4":"code","9632413d":"code","71c4a510":"code","7baff296":"code","5b60e58b":"code","64f4db71":"code","566b4b6a":"code","83de4f24":"code","7ab3c9f1":"code","72e1c1bb":"code","aef7a894":"code","18c98e7d":"code","39eb9e54":"code","6b46c7f1":"code","ca87b80d":"code","5e31e290":"code","9d79ae70":"code","3ae05b55":"code","05b48e07":"code","eb8d4c7b":"code","e8a6a4ec":"code","507a6a93":"code","500493d5":"code","5fdca6e3":"code","b0fb93ce":"code","a90030d0":"code","4aa85389":"code","d690d8df":"code","ad8fc02b":"markdown","8dbfb1ab":"markdown","32687c17":"markdown","4e592726":"markdown","4c9ca0ca":"markdown","a4275db8":"markdown","34beb6a5":"markdown","7bdc00fd":"markdown","2d6108be":"markdown","bc30d8c5":"markdown","592acc64":"markdown","4602b1b3":"markdown"},"source":{"18c54251":"#!pip install iterative-stratification","260a5445":"import sys\nsys.path.append('..\/input\/iterative-stratification\/iterative-stratification-master\/')\nfrom iterstrat.ml_stratifiers import MultilabelStratifiedKFold","3411b424":"import numpy as np\nimport pandas as pd\nimport tensorflow as tf\nimport tensorflow.keras.backend as K\nimport tensorflow.keras.layers as L\nimport tensorflow.keras.models as M\nfrom tensorflow.keras.callbacks import ReduceLROnPlateau, ModelCheckpoint\nimport tensorflow_addons as tfa\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import log_loss\nfrom tqdm.notebook import tqdm\n","5dfc86a3":"train_features = pd.read_csv('..\/input\/lish-moa\/train_features.csv')\ntrain_targets = pd.read_csv('..\/input\/lish-moa\/train_targets_scored.csv')\ntest_features = pd.read_csv('..\/input\/lish-moa\/test_features.csv')\nss = pd.read_csv('..\/input\/lish-moa\/sample_submission.csv')","981fdb87":"#def preprocess(df):\n#    df = df.copy()\n#    df.loc[:, 'cp_type'] = df.loc[:, 'cp_type'].map({'trt_cp':0, 'ctl_vehicle':1})\n#    df.loc[:, 'cp_dose'] = df.loc[:, 'cp_dose'].map({'D1':0, 'D2':1})\n#    del df['sig_id']\n#    return df","5f503be6":"####Drop ID's\ntrain_targets=train_targets.drop(train_targets.columns[0],axis=1)\ntrain_targets.head()","011d63ac":"####Drop ID's but Save Test ID's\ntest_id=test_features['sig_id']\ntest_features=test_features.drop(test_features.columns[0],axis=1)\ntest_features.head()","020eb522":"####Drop ID's\ntrain_features =train_features.drop(train_features.columns[0],axis=1)\ntrain_features.head() ","f4257846":"train_features.iloc[:,3:]","449ceac5":"test_features","a62e44ab":"train_targets['total']=train_targets.sum(axis=1)\ntrain_targ_control=train_targets[train_targets['total']==0]\ntrain_targ_control_index=train_targ_control.index.values.tolist() \ndel train_targets['total']","08c4f307":"train_features_control=train_features.iloc[train_targ_control_index]","8098c239":"control_stats=pd.DataFrame(train_features_control.describe())\ncontrol_col_25=pd.DataFrame(control_stats.iloc[4])\ncontrol_col_75=pd.DataFrame(control_stats.iloc[6])\n","3eea9eed":"control_stats","73e8ce8e":"adj_features=train_features.iloc[:,3:]\nadj_features","811e7c23":"adj_test_features=test_features.iloc[:,3:]\nadj_test_features","60e86081":"adj_test_features_trans=adj_test_features.T","6aa2322d":"adj_features_trans=adj_features.T","7e9be839":"control_col_25=control_col_25.iloc[1:,:]","4cb9759f":"control_col_75=control_col_75.iloc[1:,:]","3dc9c9fc":"control_col_75.iloc[1][0]","ae7cce50":"(adj_test_features_trans.iloc[0]>control_col_25.iloc[0][0]) & (adj_test_features_trans.iloc[0]<control_col_75.iloc[0][0])","78a197ad":"#(adj_test_features_trans.iloc[rowindex]>control_col_25.iloc[colindex][0]) & (adj_test_features_trans.iloc[rowindex]<control_col_75.iloc[colindex][0])","af856aab":"#adj_test_features_trans.iloc[0]","d30d4438":"#adj_test_features.iloc[:,0][(adj_test_features_trans.iloc[0]>control_col_25.iloc[0][0]) & (adj_test_features_trans.iloc[0]<control_col_75.iloc[0][0])]=0","af2615b1":"####Iterate through rows removing activity within 25 to 75 percentile for each gene\nfor i in range(872):\n    adj_test_features.iloc[:,i][(adj_test_features_trans.iloc[i]>control_col_25.iloc[i][0]) & (adj_test_features_trans.iloc[i]<control_col_75.iloc[i][0])]=0","41cdaba2":"####Iterate through training set\nfor i in range(872):\n    adj_features.iloc[:,i][(adj_features_trans.iloc[i]>control_col_25.iloc[i][0]) & (adj_test_features_trans.iloc[i]<control_col_75.iloc[i][0])]=0","7eecb2e5":"adj_test_features","6b1447b5":"adj_features","c5718223":"train_features=train_features.iloc[:,:3].join(adj_features)\ntrain_features","b272bdb7":"test_features=test_features.iloc[:,:3].join(adj_test_features)\ntest_features","3da5678e":"train_features=train_features[train_features['cp_type'] != 'ctl_vehicle']","4ff558ee":"indexs_list2=train_features.index.values.tolist() ","b2b1e58a":"train_targets=train_targets.iloc[indexs_list2]","2fc092f6":"###Reindex\ntrain_features = train_features.reset_index()\ndel train_features['index']\ntrain_features","07803c7c":"###Reindex\ntrain_targets = train_targets.reset_index()\ndel train_targets['index']\ntrain_targets","cc97f230":"filter_col_g = [col for col in train_features if col.startswith('g-')]\ngenes=train_features[filter_col_g]\ngenes.head()","077e8258":"filter_col_c = [col for col in train_features if col.startswith('c-')]\ncells=train_features[filter_col_c]\ncells.head()","b8637ac5":"filter_col_c_test = [col for col in test_features if col.startswith('c-')]\ncells_test=test_features[filter_col_c_test]\ncells_test.head()","5a76434e":"filter_col_g_test = [col for col in test_features if col.startswith('g-')]\ngenes_test=test_features[filter_col_g_test]\ngenes_test.head()","d1098c59":"from sklearn.decomposition import PCA\n###Add PCA Features###\npca_c = PCA(.9)\npca_g = PCA(.9)\n\n#fit PCA on Training Set\npca_c.fit(cells)\npca_g.fit(genes)\n\n### Apply PCA Mapping to Training and Test Set: Converts to a np.array\npca_cells_train = pca_c.transform(cells)\npca_genes_train = pca_g.transform(genes)\npca_cells_test = pca_c.transform(cells_test)\npca_genes_test = pca_g.transform(genes_test)\n\n#####Create Dataframe of PCA Features\nPCA_g_train=pd.DataFrame(pca_genes_train)\nPCA_c_train=pd.DataFrame(pca_cells_train)\nPCA_g_test=pd.DataFrame(pca_genes_test)\nPCA_c_test=pd.DataFrame(pca_cells_test)","f7981096":"PCA_g_train = PCA_g_train.reset_index()\ndel PCA_g_train['index']\n\nPCA_c_train = PCA_c_train.reset_index()\ndel PCA_c_train['index']\n\nPCA_g_test = PCA_g_test.reset_index()\ndel PCA_g_test['index']\n\nPCA_c_test = PCA_c_test.reset_index()\ndel PCA_c_test['index']","028ac67b":"print(PCA_g_train.shape)\nprint(PCA_c_train.shape)\nprint(PCA_g_test.shape)\nprint(PCA_c_test.shape)\nprint(test_features.shape)\nprint(train_features.shape)","986d863e":"PCA_train=pd.merge(PCA_g_train, PCA_c_train,right_index=True, left_index=True)\nPCA_test=pd.merge(PCA_g_test, PCA_c_test,right_index=True, left_index=True)","a7738c57":"####One Hot Code Train Columns: cp_type and cp_dose\ndummies=train_features[['cp_type','cp_dose']]\ncat_columns = ['cp_type','cp_dose']","474e0030":"dummies2=pd.get_dummies(dummies, prefix_sep=\"_\",\n                              columns=cat_columns)\ndummies2","b1d19fce":"del train_features['cp_type']\ndel train_features['cp_dose']\n","00b856a4":"from sklearn.preprocessing import PowerTransformer\n# perform a yeo-johnson transform of the dataset\npt = PowerTransformer(method='yeo-johnson')\ndata1 = pt.fit_transform(train_features)\n# convert the array back to a dataframe\ntrain_features = pd.DataFrame(data1)","9632413d":"train_features.insert(loc=0, column='cp_type', value=dummies2['cp_type_trt_cp'])\ntrain_features.insert(loc=2, column='cp_dose', value=dummies2['cp_dose_D1'])\n#train_features['cp_type']=dummies2['cp_type_trt_cp']\n#train_features['cp_dose']=dummies2['cp_dose_D1']","71c4a510":"####One Hot Code Columns: cp_type and cp_dose\ndummies3=test_features[['cp_type','cp_dose']]","7baff296":"dummies4=pd.get_dummies(dummies3, prefix_sep=\"_\",\n                              columns=cat_columns)\ndummies4","5b60e58b":"del test_features['cp_type']\ndel test_features['cp_dose']","64f4db71":"# perform a yeo-johnson transform of the dataset\npt = PowerTransformer(method='yeo-johnson')\ndata2 = pt.fit_transform(test_features)\n# convert the array back to a dataframe\ntest_features = pd.DataFrame(data2)","566b4b6a":"test_features.insert(loc=0, column='cp_type', value=dummies4['cp_type_trt_cp'])\ntest_features.insert(loc=2, column='cp_dose', value=dummies4['cp_dose_D1'])\n#test_features['cp_type']=dummies4['cp_type_trt_cp']\n#test_features['cp_dose']=dummies4['cp_dose_D1']","83de4f24":"test_cont=test_features['cp_type'] == 0\ntest_cont","7ab3c9f1":"train_targets = train_targets.reset_index()\ndel train_targets['index']\ntrain_targets","72e1c1bb":"#import numpy as np\n#sys.path.append('..\/input\/hellinger2\/hellinger_distance_criterion.pyx')\n#import hellinger_distance_criterion.pyx\n#from sklearn.ensemble import RandomForestClassifier\n\n#hdc = HellingerDistanceCriterion(1, np.array([2],dtype='int64'))\n#clf = RandomForestClassifier(criterion=hdc, max_depth=4, n_estimators=100)\n#clf.fit(X_train, y_train)\n#print('hellinger distance score: ', clf.score(X_test, y_test))","aef7a894":"def create_model(num_columns):\n    model = tf.keras.Sequential([\n    tf.keras.layers.Input(num_columns), \n    tf.keras.layers.BatchNormalization(), \n    tf.keras.layers.Dropout(0.2), \n    tf.keras.layers.Dense(800, activation=\"swish\"),\n    #2048\n    tf.keras.layers.BatchNormalization(),\n    tf.keras.layers.Dropout(0.5),\n    tf.keras.layers.Dense(400, activation=\"swish\"),\n    #1048\n    tf.keras.layers.BatchNormalization(),\n    tf.keras.layers.Dropout(0.5),\n    tf.keras.layers.Dense(206, activation=\"sigmoid\")\n    ])\n  \n    model.compile(optimizer=tf.optimizers.Adam(),\n                  loss='binary_crossentropy')\n    return model","18c98e7d":"top_feats = [  1,   2,   3,   4,   5,   6,   7,   9,  11,  14,  15,  16,  17,\n        18,  19,  20,  21,  22,  23,  24,  25,  26,  27,  29,  30,  31,\n        32,  33,  35,  36,  37,  38,  39,  40,  41,  42,  43,  44,  46,\n        47,  48,  49,  50,  51,  52,  53,  54,  55,  56,  58,  59,  60,\n        61,  62,  63,  64,  65,  66,  67,  68,  69,  70,  71,  72,  73,\n        74,  75,  76,  78,  79,  80,  81,  82,  83,  84,  86,  87,  88,\n        89,  90,  91,  92,  93,  94,  95,  96,  97,  98,  99, 100, 101,\n       102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114,\n       115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128,\n       129, 130, 131, 132, 133, 136, 137, 138, 139, 140, 141, 142, 143,\n       144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157,\n       158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170,\n       171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183,\n       184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197,\n       198, 199, 200, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212,\n       213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226,\n       227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239,\n       240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253,\n       254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266,\n       267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280,\n       281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294,\n       295, 296, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309,\n       310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323,\n       324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336,\n       337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349,\n       350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362,\n       363, 364, 365, 366, 367, 368, 369, 370, 371, 374, 375, 376, 377,\n       378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 390, 391,\n       392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404,\n       405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418,\n       419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431,\n       432, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446,\n       447, 448, 449, 450, 453, 454, 456, 457, 458, 459, 460, 461, 462,\n       463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475,\n       476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489,\n       490, 491, 492, 493, 494, 495, 496, 498, 500, 501, 502, 503, 505,\n       506, 507, 509, 510, 511, 512, 513, 514, 515, 518, 519, 520, 521,\n       522, 523, 524, 525, 526, 527, 528, 530, 531, 532, 534, 535, 536,\n       538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551,\n       552, 554, 557, 559, 560, 561, 562, 565, 566, 567, 568, 569, 570,\n       571, 572, 573, 574, 575, 577, 578, 580, 581, 582, 583, 584, 585,\n       586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599,\n       600, 601, 602, 606, 607, 608, 609, 611, 612, 613, 615, 616, 617,\n       618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630,\n       631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644,\n       645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 658, 659,\n       660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672,\n       673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685,\n       686, 687, 688, 689, 691, 692, 693, 694, 695, 696, 697, 699, 700,\n       701, 702, 704, 705, 707, 708, 709, 710, 711, 713, 714, 716, 717,\n       718, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732,\n       733, 734, 735, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747,\n       748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 760, 761,\n       762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774,\n       775, 776, 777, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788,\n       789, 790, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803,\n       804, 805, 806, 808, 809, 811, 813, 814, 815, 816, 817, 818, 819,\n       821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835,\n       837, 838, 839, 840, 841, 842, 845, 846, 847, 848, 850, 851, 852,\n       854, 855, 856, 858, 859, 860, 861, 862, 864, 866, 867, 868, 869,\n       870, 871, 872, 873, 874]\n\nprint(len(top_feats))","39eb9e54":"top=train_features.iloc[:, top_feats]\ntop","6b46c7f1":"top.shape","ca87b80d":"def metric(y_true, y_pred):\n    metrics = []\n    for _target in train_targets.columns:\n        metrics.append(log_loss(y_true.loc[:, _target], y_pred.loc[:, _target].astype(float), labels=[0,1]))\n    return np.mean(metrics)","5e31e290":"train_targets","9d79ae70":"print(train_features.shape)\nprint(test_features.shape)\nprint(PCA_train.shape)\nprint(PCA_test.shape)","3ae05b55":"test_features=test_features.iloc[:, top_feats]\ntrain_features=train_features.iloc[:, top_feats]","05b48e07":"test_features = test_features.reset_index()\ndel test_features['index']\n\ntrain_features = train_features.reset_index()\ndel train_features['index']","eb8d4c7b":"train_features=pd.merge(train_features, PCA_train,right_index=True, left_index=True)","e8a6a4ec":"test_features=pd.merge(test_features, PCA_test,right_index=True, left_index=True)\n","507a6a93":"train=train_features.copy()\ntrain","500493d5":"test=test_features.copy()","5fdca6e3":"input_dim = train.shape[1]","b0fb93ce":"N_STARTS = 3\n# tensorflow\ntf.random.set_seed(42)\n\nres = train_targets.copy()\n\nss.loc[:, train_targets.columns] = 0\nres.loc[:, train_targets.columns] = 0\n\n\nfor seed in range(N_STARTS):\n    for n, (tr, te) in enumerate(MultilabelStratifiedKFold(n_splits=5, random_state=seed, shuffle=True).split(train_targets, train_targets)):\n        print(f'Fold {n}')\n        \n        model = create_model(input_dim)\n        checkpoint_path = f'repeat:{seed}_Fold:{n}.hdf5'\n\n        reduce_lr_loss = ReduceLROnPlateau(\n            monitor='val_loss',\n            factor=0.1, patience=3,\n            verbose=1,\n            epsilon=1e-4,\n            mode='min'\n        )\n        \n\n        cb_checkpt = ModelCheckpoint(\n            checkpoint_path,\n            monitor='val_loss',\n            verbose=0,\n            save_best_only=True,\n            save_weights_only=True,\n            mode='min'\n        )\n        \n        model.fit(\n            train.values[tr],\n            train_targets.values[tr],\n            validation_data = (train.values[te], train_targets.values[te]),\n            epochs=40,\n            batch_size=128,\n            callbacks=[reduce_lr_loss, cb_checkpt],\n            verbose=2\n                 )\n        \n        model.load_weights(checkpoint_path)\n        test_predict = model.predict(test.values)\n        val_predict = model.predict(train.values[te])\n        \n        ss.loc[:, train_targets.columns] += test_predict\n        res.loc[te, train_targets.columns] += val_predict\n        print('')\n        \nss.loc[:, train_targets.columns] \/= ((n+1) * N_STARTS)\nres.loc[:, train_targets.columns] \/= N_STARTS","a90030d0":"print(f'OOF Metric: {metric(train_targets, res)}')","4aa85389":"ss.loc[test_cont, train_targets.columns] = 0","d690d8df":"ss.to_csv('submission.csv', index=False)","ad8fc02b":"# Mechanisms of Action 25th and 75th Percentile Control Method","8dbfb1ab":"## Public Score: .01919\n\n**1) Smoothing Predictions: As discussed in comments, I applied smoothing to predictions.**\n\n**2) Remove Noise: A control group was created out of gene\/cell observations without a MoA. I then zeroed out all observations in the training set for each gene and cell between the 25th and 75th of the control for that gene.** \n\n**3) A yeo-johnson transformation was used to fix any skew.**\n\n**4) I used my model settings with the Multi Label K Fold Evaluation and Blending code developed by https:\/\/www.kaggle.com\/simakov\/keras-multilabel-neural-network-v1-2**\n\n**5) I have been shifting between columns selected by simakov and those using Variance Threshold.** \n\n**6) I used a Swoosh activation rather than a Relu which seems to shorten necessary epochs and slightly reduce my score.** \n\n**To Do:**\n\n**1) Deal with Group Imbalance**\n\n**2) Although this is unlikely to work, explore linear activation with a further reduced data set. Remove all values between the min and max of control.**\n\n**3) Add PCA Reduced data to dataset.**\n","32687c17":"# Remove Control Rows","4e592726":"### The idea is that this approach blows up activity far from the mean and std of control. Another approach might be to check if data is within 25% or 75% range and if not boost it somehow. ","4c9ca0ca":"# PCA Merge","a4275db8":"# Isolate Control ","34beb6a5":"# One Hot Code ","7bdc00fd":"# Run Code","2d6108be":"# PCA Each Group and Add to Dataset","bc30d8c5":"### Goal: Create a neural network using Keras to predict mechanisms of action from imbalanced, high dimensional cell and gene data.","592acc64":"**One Hot Code Test Set**","4602b1b3":"**One Hot Code Training Set**"}}