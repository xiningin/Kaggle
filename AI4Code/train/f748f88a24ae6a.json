{"cell_type":{"b398561b":"code","9ef06d37":"code","b2c8b209":"code","14b688a6":"code","cd56bb2e":"code","457ec71b":"code","d4365448":"code","ba2472fe":"code","9d38f8d8":"code","6bd01ca2":"code","866854f2":"code","b36d5088":"code","610be6fa":"code","ec6f7a72":"markdown","24736662":"markdown","aae406cb":"markdown","dd0ee26e":"markdown","9452bd67":"markdown","c9855507":"markdown","407f9a05":"markdown","0649d4a9":"markdown","8a6097e9":"markdown","6125ec3b":"markdown","d42118ed":"markdown","615a26c9":"markdown","1a89bf1d":"markdown"},"source":{"b398561b":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","9ef06d37":"import numpy as np\nimages = np.load('\/kaggle\/input\/sf-captcha-recognition\/data\/images.npy')\nlabels = np.load('\/kaggle\/input\/sf-captcha-recognition\/data\/labels.npy')\nimages_sub = np.load('\/kaggle\/input\/sf-captcha-recognition\/data\/images_sub.npy')\nprint(f'images: {images.shape} of type {images.dtype}')\nprint(f'labels: {labels.shape} of type {labels.dtype}')\nprint(f'images_sub: {images_sub.shape} of type {images_sub.dtype}')\n\nnum_classes = 26 #\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043b\u0430\u0441\u0441\u043e\u0432\nimg_shape = (48, 48, 3) #\u0440\u0430\u0437\u043c\u0435\u0440 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439","b2c8b209":"import matplotlib.pyplot as plt\n\ndef label_to_letter(label):\n    return chr(ord('A') + label)\n\ndef show_symbols(images, labels = None, columns = 10, **kwargs):\n    if labels is None: labels = [None] * len(images)\n    rows = (len(images) - 1) \/\/ columns + 1\n    fig = plt.figure(figsize = (25, (1.8 * 13 \/ columns) * rows))\n    for i, (img, label) in enumerate(zip(images, labels)):\n        ax = fig.add_subplot(rows, columns, i + 1)\n        imshow_kwargs = {'vmin': 0, 'vmax': 255}\n        imshow_kwargs.update(kwargs)\n        ax.imshow(img, **imshow_kwargs)\n        if label is not None: ax.set_title(label)\n        ax.get_xaxis().set_ticks([])\n        ax.get_yaxis().set_ticks([])\n    fig.tight_layout(pad = 0.5)\n    plt.show()\n\ndisplay_count = 7*3\nshow_symbols(\n    images[:display_count],\n    labels = [f'{label_to_letter(x)} ({x})' for x in labels[:display_count]],\n    columns = 7\n)","14b688a6":"import string\nplt.bar(x = list(string.ascii_uppercase), height = np.bincount(labels));\nplt.show()\n\nprint(f'\u0412\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044c \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u0443\u0433\u0430\u0434\u044b\u0432\u0430\u043d\u0438\u044f: {1\/num_classes:.4f}')","cd56bb2e":"images_normalized = images \/ 255\nimages_sub_normalized = images_sub \/ 255","457ec71b":"import keras # Keras - \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u0434\u043b\u044f \u0433\u043b\u0443\u0431\u043e\u043a\u043e\u0433\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f\nfrom IPython.display import clear_output\n\n# \u043d\u0435\u0439\u0440\u043e\u043d\u043d\u0430\u044f \u0441\u0435\u0442\u044c \u0437\u0430\u0434\u0430\u0435\u0442\u0441\u044f \u043a\u0430\u043a \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0441\u043b\u043e\u0435\u0432\nmodel = keras.Sequential([\n    keras.Input(shape = img_shape), # img_shape == (48, 48, 3)\n    # \u0441\u043b\u043e\u0439 Dense \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043e\u0434\u043d\u043e\u043c\u0435\u0440\u043d\u044b\u0439 \u0432\u0435\u043a\u0442\u043e\u0440, \u0430 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0442\u0440\u0435\u0445\u043c\u0435\u0440\u043d\u043e,\n    #\u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0441\u043b\u043e\u0439 Flatten \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0430 \u0432 1-\u043c\u0435\u0440\u043d\u044b\u0439 \u0432\u0435\u043a\u0442\u043e\u0440\n    keras.layers.Flatten(),\n    # \u0441\u043a\u0440\u044b\u0442\u044b\u0439 \u0441\u043b\u043e\u0439 \u0438\u0437 1000 \u043d\u0435\u0439\u0440\u043e\u043d\u043e\u0432\n    keras.layers.Dense(1000, activation = 'sigmoid'),\n    # \u0432\u044b\u0445\u043e\u0434\u043d\u043e\u0439 \u0441\u043b\u043e\u0439 \u0438\u0437 26 \u043d\u0435\u0439\u0440\u043e\u043d\u043e\u0432, \u043d\u0435 \u0437\u0430\u0431\u0443\u0434\u0435\u043c \u0430\u043a\u0442\u0438\u0432\u0430\u0446\u0438\u044e 'softmax'\n    keras.layers.Dense(num_classes, activation = 'softmax')\n])\n\nmodel.compile(\n    # \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u0442\u0435\u0440\u044c \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043d\u0435\u0439\u0440\u043e\u043d\u043d\u043e\u0439 \u0441\u0435\u0442\u0438\n    loss = 'sparse_categorical_crossentropy',\n    # \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0442\u043e\u0440, \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 learning rate\n    optimizer = keras.optimizers.Adam(1e-5),\n    #\u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043c\u0435\u0442\u0440\u0438\u043a\u0430 - \u0434\u043e\u043b\u044f \u0432\u0435\u0440\u043d\u043e \u0440\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u043d\u043d\u044b\u0445 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439\n    metrics = 'accuracy'\n)","d4365448":"for epoch in range(50): # \u043e\u0431\u0443\u0447\u0430\u0435\u043c \u0432 \u0442\u0435\u0447\u0435\u043d\u0438\u0435 50 \u044d\u043f\u043e\u0445 (\u0441 GPU \u043d\u0430 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u0443\u0439\u0434\u0435\u0442 \u043e\u043a\u043e\u043b\u043e 5 \u043c\u0438\u043d\u0443\u0442)\n    history = model.fit(\n        #\u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f - \u0432\u0445\u043e\u0434\u043d\u044b\u0435 (\u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f) \u0438 \u0446\u0435\u043b\u0435\u0432\u044b\u0435 (\u043c\u0435\u0442\u043a\u0438 \u043a\u043b\u0430\u0441\u0441\u043e\u0432)\n        images_normalized, labels,\n        #\u0440\u0430\u0437\u043c\u0435\u0440 \u0431\u0430\u0442\u0447\u0430\n        batch_size = 8,\n        # \u043c\u044b \u043d\u0435 \u0434\u0435\u043b\u0438\u043c \u0432\u0440\u0443\u0447\u043d\u0443\u044e \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0438\u0435 \u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0435, \u0441 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u043c\n        # validation_split \u043c\u0435\u0442\u043e\u0434 .fit() \u0434\u0435\u043b\u0430\u0435\u0442 \u044d\u0442\u043e \u0437\u0430 \u043d\u0430\u0441\n        validation_split = 0.15,\n        # \u043e\u0431\u0443\u0447\u0430\u0435\u043c \u043f\u043e \u043e\u0434\u043d\u043e\u0439 \u044d\u043f\u043e\u0445\u0435 (\u0441\u043c. \u0432\u043d\u0435\u0448\u043d\u0438\u0439 \u0446\u0438\u043a\u043b)\n        epochs = 1,\n        # \u044d\u0442\u043e\u0442 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u043d\u0443\u0436\u0435\u043d, \u0447\u0442\u043e\u0431\u044b \u0432 \u0442\u0435\u0447\u0435\u043d\u0438\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u043b\u0430\u0441\u044c \u043c\u0435\u0442\u0440\u0438\u043a\u0438\n        callbacks = ([model.history] if epoch > 0 else None)\n    )\n    # \u043f\u043e\u0441\u043b\u0435 \u043a\u0430\u0436\u0434\u043e\u0439 \u044d\u043f\u043e\u0445\u0438 \u043e\u0447\u0438\u0449\u0430\u0435\u043c \u0432\u044b\u0432\u043e\u0434 \u044f\u0447\u0435\u0439\u043a\u0438 \u0438 \u043f\u0435\u0440\u0435\u0440\u0438\u0441\u043e\u0432\u044b\u0432\u0430\u0435\u043c \u0433\u0440\u0430\u0444\u0438\u043a \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438\n    clear_output(wait = True)\n    plt.plot(history.history['accuracy'], label = 'accuracy')\n    plt.plot(history.history['val_accuracy'], label = 'val_accuracy')\n    plt.legend()\n    plt.show()","ba2472fe":"model = keras.Sequential([\n    keras.Input(shape = img_shape),\n    keras.layers.Conv2D(32, (3, 3), activation = 'relu'),\n    keras.layers.Conv2D(64, (3, 3), activation = 'relu'),\n    keras.layers.MaxPooling2D(),\n    keras.layers.Conv2D(64, (3, 3), activation = 'relu'),\n    keras.layers.Conv2D(128, (3, 3), activation = 'relu'),\n    keras.layers.MaxPooling2D(),\n    keras.layers.Conv2D(64, (3, 3), activation = 'relu'),\n    keras.layers.Conv2D(128, (3, 3), activation = 'relu'),\n    keras.layers.MaxPooling2D(),\n    keras.layers.Flatten(),\n    keras.layers.Dense(100, activation = 'relu'),\n    keras.layers.Dense(num_classes, activation = 'softmax')\n])\n\nmodel.compile(\n    loss = 'sparse_categorical_crossentropy',\n    optimizer = keras.optimizers.Adam(1e-4),\n    metrics = 'accuracy'\n)","9d38f8d8":"for epoch in range(20):\n    history = model.fit(\n        images_normalized, labels,\n        batch_size = 8,\n        validation_split = 0.15,\n        epochs = 1,\n        callbacks = ([model.history] if epoch > 0 else None)\n    )\n    clear_output(wait = True)\n    plt.plot(history.history['accuracy'], label = 'accuracy')\n    plt.plot(history.history['val_accuracy'], label = 'val_accuracy')\n    plt.legend()\n    plt.show()","6bd01ca2":"predictions = model.predict(images_sub_normalized)\nprint(predictions.shape)","866854f2":"predictions = predictions.argmax(axis = 1)\nprint(predictions.shape)\nprint(predictions[:10]) # \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043f\u0435\u0440\u0432\u044b\u0435 10 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0439","b36d5088":"import pandas as pd\nsubmission = pd.DataFrame()\nsubmission['Id'] = list(range(len(predictions)))\nsubmission['Category'] = predictions\nsubmission.to_csv('submission.csv', index = False)\n\n","610be6fa":"import numpy as np\nimport pandas as pd\nimport keras\nfrom keras import *\nfrom keras.layers import *\n\nimages = np.load('\/kaggle\/input\/sf-captcha-recognition\/data\/images.npy') \/ 255\nlabels = np.load('\/kaggle\/input\/sf-captcha-recognition\/data\/labels.npy')\nimages_sub = np.load('\/kaggle\/input\/sf-captcha-recognition\/data\/images_sub.npy') \/ 255\n\nmodel = Sequential([ # \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u0435 \u043d\u0430 \u0432\u0430\u0448\u0443 \u043c\u043e\u0434\u0435\u043b\u044c\n    Flatten(input_shape = (48, 48, 3)),\n    Dense(26, activation = 'softmax')\n])\n\nmodel.compile(loss = 'sparse_categorical_crossentropy', optimizer = 'adam', metrics = 'accuracy')\nmodel.fit(images, labels, batch_size = 8, validation_split = 0.1, epochs = 10)\n\npredictions = model.predict(images_sub).argmax(axis = 1)\nsubmission = pd.DataFrame({'Id': list(range(len(predictions))), 'Category': predictions})\nsubmission.to_csv('submission2.csv', index = False)","ec6f7a72":"\u0413\u0440\u0430\u0444\u0438\u043a \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0439 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u043f\u043e\u043b\u043d\u043e\u0441\u0432\u044f\u0437\u043d\u043e\u0439 \u0441\u0435\u0442\u0438 \u0441\u0438\u043b\u044c\u043d\u043e \u043e\u043f\u0435\u0440\u0435\u0436\u0430\u0435\u0442 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u0443\u044e \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c - \u044d\u0442\u043e \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442, \u0447\u0442\u043e \u043c\u043e\u0434\u0435\u043b\u044c \u043f\u0435\u0440\u0435\u043e\u0431\u0443\u0447\u0438\u043b\u0430\u0441\u044c. \u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043d\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \u0435\u0434\u0432\u0430 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u0435\u0442 10%, \u044d\u0442\u043e \u043d\u0435 \u0441\u0438\u043b\u044c\u043d\u043e \u043c\u043d\u043e\u0433\u043e, \u043d\u043e \u0433\u043e\u0440\u0430\u0437\u0434\u043e \u0432\u044b\u0448\u0435 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u0443\u0433\u0430\u0434\u044b\u0432\u0430\u043d\u0438\u044f.\n\n\u0422\u0435\u043f\u0435\u0440\u044c \u043e\u0431\u0443\u0447\u0438\u043c \u043f\u0440\u043e\u0441\u0442\u0443\u044e \u0441\u0432\u0435\u0440\u0442\u043e\u0447\u043d\u0443\u044e \u0441\u0435\u0442\u044c \u0438 \u0443\u0432\u0438\u0434\u0438\u043c \u0440\u0430\u0437\u043d\u0438\u0446\u0443. \u0412 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u043c, \u0438\u0437\u0443\u0447\u0430\u044f \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b \u043a\u0443\u0440\u0441\u0430, \u0432\u044b \u0441\u043c\u043e\u0436\u0435\u0442\u0435 \u0435\u0449\u0435 \u0431\u043e\u043b\u044c\u0448\u0435 \u043f\u043e\u0432\u044b\u0441\u0438\u0442\u044c \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c.","24736662":"\u041f\u0440\u0438\u0441\u0442\u0443\u043f\u0430\u0435\u043c \u043a \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044e \u043c\u043e\u0434\u0435\u043b\u0438. \u041d\u0435 \u0437\u0430\u0431\u0443\u0434\u044c\u0442\u0435 \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u044c GPU \u0432 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430\u0445 \u043d\u043e\u0443\u0442\u0431\u0443\u043a\u0430, \u0447\u0442\u043e\u0431\u044b \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u0448\u043b\u043e \u0431\u044b\u0441\u0442\u0440\u0435\u0435 (Accelerator -> GPU).\n\n\u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b `loss`, `optimizer`, `metrics` \u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 `model.compile()`, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 `activation` \u0432 \u0441\u043b\u043e\u0435 `Dense` \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u0434\u0430\u0432\u0430\u0442\u044c \u043a\u0430\u043a \u0441\u0442\u0440\u043e\u043a\u0430\u043c\u0438, \u0442\u0430\u043a \u0438 \u043a\u043b\u0430\u0441\u0441\u0430\u043c\u0438, \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043e\u0431 \u044d\u0442\u043e\u043c \u0440\u0430\u0441\u0441\u043a\u0430\u0437\u0430\u043d\u043e \u0432 \u043a\u0443\u0440\u0441\u0435.","aae406cb":"\u041d\u0435 \u0437\u0430\u0431\u0443\u0434\u0435\u043c \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f, \u0442\u043e \u0435\u0441\u0442\u044c \u043f\u0435\u0440\u0435\u0432\u0435\u0441\u0442\u0438 \u043f\u0438\u043a\u0441\u0435\u043b\u0438 \u0438\u0437 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430 \u043e\u0442 0 \u0434\u043e 255 \u0432 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d \u043e\u0442 0 \u0434\u043e 1, \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0432 \u043c\u0430\u0441\u0441\u0438\u0432 \u043d\u0430 255. \u0415\u0441\u0442\u044c \u0438 \u0434\u0440\u0443\u0433\u043e\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 - \u043f\u0435\u0440\u0435\u0432\u043e\u0434 \u0432 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d \u043e\u0442 -1 \u0434\u043e 1 (\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043d\u0430 128 \u0438 \u0432\u044b\u0447\u0438\u0442\u0430\u043d\u0438\u0435 \u0435\u0434\u0438\u043d\u0438\u0446\u044b).","dd0ee26e":"\u041c\u044b \u043d\u0435 \u0441\u043c\u043e\u0436\u0435\u043c \u0443\u0437\u043d\u0430\u0442\u044c \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043d\u0430 submission-\u0434\u0430\u043d\u043d\u044b\u0445 \u0431\u0435\u0437 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0444\u0430\u0439\u043b\u0430 \u0441 \u043e\u0442\u0432\u0435\u0442\u0430\u043c\u0438 \u043d\u0430 \u0441\u0430\u0439\u0442. \u0424\u0430\u0439\u043b `submission.csv` \u043d\u0443\u0436\u043d\u043e \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u043d\u0430 Kaggle. \u042d\u0442\u043e \u043c\u043e\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043b\u0438\u0431\u043e \u0441\u043a\u0430\u0447\u0430\u0432 \u0444\u0430\u0439\u043b \u0432 \u043f\u0430\u043d\u0435\u043b\u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0441\u043f\u0440\u0430\u0432\u0430 \u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0432 \u0435\u0433\u043e \u043a\u043d\u043e\u043f\u043a\u043e\u0439 **Submit predictions** \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435 \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u044f, \u043b\u0438\u0431\u043e \u0447\u0435\u0440\u0435\u0437 \u043e\u043f\u0446\u0438\u044e Save & Run All (Commit) \u0432 \u043d\u043e\u0443\u0442\u0431\u0443\u043a\u0435. \u0412 \u044d\u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435, \u043a\u043e\u0433\u0434\u0430 \u043d\u043e\u0443\u0442\u0431\u0443\u043a \u043e\u0442\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0434\u043e \u043a\u043e\u043d\u0446\u0430 \u0432 \u0431\u044d\u043a\u0433\u0440\u0430\u0443\u043d\u0434\u0435, \u0432\u043d\u0438\u0437\u0443 \u0432 \u043d\u043e\u0443\u0442\u0431\u0443\u043a\u0435 \u043f\u043e\u044f\u0432\u0438\u0442\u0441\u044f \u043a\u043d\u043e\u043f\u043a\u0430 \u0441\u0430\u0431\u043c\u0438\u0442\u0430.\n\n--------------\n\n\u0412 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u044f\u0447\u0435\u0439\u043a\u0435 \u043f\u043e\u043a\u0430\u0436\u0435\u043c \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u0438\u0441\u0442\u0438\u0447\u043d\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440 \u043f\u043e\u043b\u043d\u043e\u0433\u043e \u0446\u0438\u043a\u043b\u0430: \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445, \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438, \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u0438 \u0441\u0430\u0431\u043c\u0438\u0442.","9452bd67":"\u041c\u044b \u0431\u0443\u0434\u0435\u043c \u043e\u0431\u0443\u0447\u0430\u0442\u044c \u0441\u0432\u0435\u0440\u0442\u043e\u0447\u043d\u0443\u044e \u0441\u0435\u0442\u044c \u0432 \u0442\u0435\u0447\u0435\u043d\u0438\u0435 20 \u044d\u043f\u043e\u0445 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u0430, \u0445\u043e\u0442\u044f \u0431\u043e\u043b\u044c\u0448\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043f\u043e\u0445 \u0434\u0430\u043b\u043e \u0431\u044b \u0435\u0449\u0435 \u0431\u043e\u043b\u0435\u0435 \u0432\u044b\u0441\u043e\u043a\u0443\u044e \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c. ","c9855507":"\u0422\u0435\u043f\u0435\u0440\u044c \u0441\u0434\u0435\u043b\u0430\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0441\u0432\u0435\u0440\u0442\u043e\u0447\u043d\u043e\u0439 \u0441\u0435\u0442\u0438 \u043d\u0430 \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0445 sumbission-\u0434\u0430\u043d\u043d\u044b\u0445.","407f9a05":"\u0412 \u043f\u0430\u043f\u043a\u0435 `\/kaggle\/input\/sf-captcha-recognition` \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u0441\u044f \u0434\u0430\u043d\u043d\u044b\u0435 \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u044f. \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a\u0438\u0435 \u0444\u0430\u0439\u043b\u044b \u0442\u0430\u043c \u0435\u0441\u0442\u044c.","0649d4a9":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u044b \u043a\u043b\u0430\u0441\u0441\u044b \u0432 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043f\u043e\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044c \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u0443\u0433\u0430\u0434\u044b\u0432\u0430\u043d\u0438\u044f \u043a\u043b\u0430\u0441\u0441\u0430.","8a6097e9":"\u041f\u0435\u0440\u0432\u0430\u044f \u043e\u0441\u044c - \u043d\u043e\u043c\u0435\u0440 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f, \u0432\u0442\u043e\u0440\u0430\u044f - \u043d\u043e\u043c\u0435\u0440 \u043a\u043b\u0430\u0441\u0441\u0430, \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435 - \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u0438. \u041d\u0430\u043c \u043e\u0441\u0442\u0430\u043b\u043e\u0441\u044c \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u043d\u0430\u0439\u0442\u0438 \u043a\u043b\u0430\u0441\u0441, \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044c \u0434\u043b\u044f \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0430\u044f, \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u043c\u0435\u0442\u043e\u0434 `argmax` \u0434\u043b\u044f \u043e\u0441\u0438 1.","6125ec3b":"\u0422\u0435\u043f\u0435\u0440\u044c \u043c\u044b \u0438\u043c\u0435\u0435\u043c \u043c\u0430\u0441\u0441\u0438\u0432 \u0438\u0437 50 \u0442\u044b\u0441\u044f\u0447 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0439. \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0444\u0430\u0439\u043b `submission.csv`. \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430 \u043d\u0435 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u0438\u043c\u0435\u043d\u043d\u043e \u0442\u0430\u043a\u0438\u043c, \u0433\u043b\u0430\u0432\u043d\u043e\u0435 - \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0432 \u043d\u0435\u0433\u043e \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u043d\u0443\u0436\u043d\u043e\u043c \u0444\u043e\u0440\u043c\u0430\u0442\u0435.","d42118ed":"\u0422\u0435\u043f\u0435\u0440\u044c \u043e\u0431\u0443\u0447\u0438\u043c \u043c\u043e\u0434\u0435\u043b\u044c MLP, \u0442\u043e \u0435\u0441\u0442\u044c \u043f\u043e\u043b\u043d\u043e\u0441\u0432\u044f\u0437\u043d\u0443\u044e \u0441\u0435\u0442\u044c, \u0438 \u043e\u0446\u0435\u043d\u0438\u043c \u0435\u0435 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c.","615a26c9":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a \u0432\u044b\u0433\u043b\u044f\u0434\u044f\u0442 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f.","1a89bf1d":"\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u044b numpy."}}