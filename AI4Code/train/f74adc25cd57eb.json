{"cell_type":{"e0b53510":"code","2f8f8b14":"code","68217409":"code","3b1e2224":"code","df6335d1":"code","56324186":"code","e03be567":"code","e26272b6":"code","15f5b122":"code","60e5a671":"code","675f067a":"code","fd27e9b5":"code","99aef7a0":"code","b8ca7d71":"code","b96222c5":"code","64f6d164":"code","3d7215ea":"code","40dca0c2":"code","ddf7788d":"code","5f931b9f":"code","aba68c01":"code","908bf976":"code","bf53a60e":"code","ee1ad8c0":"code","5a77dc33":"code","8088b2d0":"code","5482dbfd":"code","5a5d5f94":"code","6ef4bcfb":"code","6a0c8344":"code","9fe1aafd":"code","c76131a2":"code","6643cb91":"code","f4c2180a":"code","b447fa75":"code","46282d56":"code","322e7a5c":"code","cca4b17c":"code","e4da8c22":"code","c836f4b7":"code","8639b3e9":"code","13038899":"code","51d13c65":"code","10181f04":"code","e163d853":"code","b4406afd":"code","f6962721":"code","d457dca0":"code","49656ca7":"code","6d76a3e1":"code","d02e4def":"code","e178c1e1":"code","3297085c":"code","038b68cf":"code","a35358eb":"code","bf757841":"code","cc392948":"code","7646c8fc":"code","b14e16dc":"code","16f6cd3b":"code","7d93d0ae":"code","8406e9f3":"code","4ad59280":"code","fc70a6d8":"code","5e78b61b":"code","e451461d":"code","27db8e6a":"code","a55a4f85":"code","bb4310ca":"code","4da37fd5":"code","6f8ca035":"code","f63a2818":"code","fc729b43":"code","4eea2b03":"code","f600f6b5":"code","7f053bc3":"code","a520ba7b":"code","f487408f":"code","74147f6e":"code","3099b34e":"code","1dc5d314":"code","2a9b6932":"code","f8e6166d":"code","54dd0f82":"code","f7a8ab63":"code","ed7b9d00":"code","2535274e":"code","5502fc70":"code","3f351697":"code","9d284ffe":"code","85b6dbf6":"markdown","d0e790c0":"markdown","87e9a2d8":"markdown","9f4cf3cf":"markdown","8d5b61f5":"markdown","74b5d4b3":"markdown","a1089a3a":"markdown","bc28be48":"markdown","fa4d4c12":"markdown","05e0f4ed":"markdown","8fd771b4":"markdown","0b4aa6bc":"markdown","e4a607c1":"markdown","1cb26e6e":"markdown","43404b9a":"markdown","1bf6dac8":"markdown","b7244587":"markdown","26a1c680":"markdown","d7f3e8e2":"markdown","a364d317":"markdown","c2b93aee":"markdown","09e988ca":"markdown","48f6be64":"markdown","b3827c58":"markdown","53bb621b":"markdown","b379b630":"markdown","963f6229":"markdown","fbb4fcc3":"markdown"},"source":{"e0b53510":"# make calendar maps\n! pip install calmap","2f8f8b14":"import calmap","68217409":"! pip install squarify","3b1e2224":"import squarify","df6335d1":"import os\n    \n# Main libraries that we will use in this kernel\nimport datetime\nimport numpy as np\nimport pandas as pd\n\n# # garbage collector: free some memory is needed\nimport gc\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# statistical package and some useful functions to analyze our timeseries\nfrom statsmodels.tsa.stattools import pacf\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nimport statsmodels.tsa.stattools as stattools\n\nimport time\n\nfrom string import punctuation\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.linear_model import LinearRegression\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","56324186":"# PATH_DATA = os.path.join(os.getcwd(), \"Competition Data\", \"Sample Translated Data\")\nPATH_DATA = \"..\/input\/nuclio06-dsc-str-0321\"","e03be567":"def print_files():\n    for dirname, _, filenames in os.walk(PATH_DATA):\n        for filename in filenames:\n            print(os.path.join(dirname, filename))","e26272b6":"# Let's see how many different files we are dealing with\nprint_files()","15f5b122":"# import the df\nshops = pd.read_csv(os.path.join(PATH_DATA, \"shops.csv\"))\nshops.shape","60e5a671":"shops.head()","675f067a":"# We don't have any duplicates in the shop_name field\nshops.shape[0] == len(shops[\"shop_name\"].unique())","fd27e9b5":"# However inspecting the df by name, we can see that shop_id 10 and 11 are very similar. Later we will try and group them once we inspect the sales per shop\nshops[shops[\"shop_id\"].isin([10, 11])]","99aef7a0":"# The same happens with the shops with shop_id 23 and 24\nshops[shops[\"shop_id\"].isin([23, 24])]","b8ca7d71":"# No missing values in the shops df\nshops.isnull().sum().sum()","b96222c5":"\n# let's correct the shops df and also generate a few more features\ndef fix_shops(shops):\n    '''\n    This function modifies the shops df inplace.\n    It correct's 3 shops that we have found to be 'duplicates'\n    and also creates a few more features: extracts the city and encodes it using LabelEncoder\n    '''\n    shops = shops[~shops[\"shop_id\"].isin([0, 1, 10, 23])]\n\n    # replace all the punctuation in the shop_name columns\n    shops[\"shop_name_cleaned\"] = shops[\"shop_name\"].apply(lambda s: \"\".join([x for x in s if x not in punctuation]))\n    \n    # extract the city name\n    shops[\"city\"] = shops[\"shop_name_cleaned\"].apply(lambda s: s.split()[0])\n    \n    # encode it using a simple LabelEncoder\n    shops[\"city_code\"] = LabelEncoder().fit_transform(shops['city'])\n    \n    return shops","64f6d164":"# apply our function to the shops_df\nshops = fix_shops(shops)","3d7215ea":"# import df\nitems_category = pd.read_csv(os.path.join(PATH_DATA, \"item_categories.csv\"))\nitems_category.shape","40dca0c2":"items_category.head()","ddf7788d":"# We don't have any duplicates in the item_category_name field\nitems_category.shape[0] == len(items_category[\"item_category_name\"].unique())","5f931b9f":"# allow pandas to show all the rows from this df\npd.options.display.max_rows = items_category.shape[0]","aba68c01":"# If we take a closer look, we can see that we have a lot of Play Station categories: like accesories, games and so on. We have the same categories for XBOX and also for PC Games.\n# A lot of categories have to deal with books, presents and computer software and music (CD).\n# We will generate later some features by parsing the names and making groupedby features.\nitems_category.head()","908bf976":"# If we apply a simple lambda function and extract the everything that contains PS, we will get 16 different categories for PlayStation\nitems_category[\"PS_flag\"] = items_category[\"item_category_name\"].apply(lambda x: True if \"PS\" in x else False)\nitems_category[items_category[\"PS_flag\"] == True]","bf53a60e":"# No missing values in the items_category df\nitems_category.isnull().sum().sum()","ee1ad8c0":"# import df\nitems = pd.read_csv(os.path.join(PATH_DATA, \"items.csv\"))\nitems.shape","5a77dc33":"# allow pandas to show all the rows from this df\npd.options.display.max_rows = items.shape[0]\nitems.head()","8088b2d0":"# No missing values in the items category\nitems.isnull().sum().sum()","5482dbfd":"# Let's see the top 10 and bottom 10 item categories\nitems_gb = items.groupby(\"item_category_id\").size().sort_values(ascending = False).to_frame()\nitems_gb.head()","5a5d5f94":"items[items[\"item_category_id\"] == 23]","6ef4bcfb":"items_gb.rename(columns = {0:\"counts\"}, inplace = True)","6a0c8344":"top_10 = items_gb[:10]","9fe1aafd":"bottom_10 = items_gb[-10:]","c76131a2":"top_10 = top_10.append(bottom_10)\ntop_10 = top_10.sort_values(\"counts\", ascending = False)","6643cb91":"top_10.reset_index()","f4c2180a":"# We can notice that in the top 10 most popular items products we have PS3\n# At the same time, in the bottom 10 products, we can find 2 PS2.\n# This means, that we have to be careful while generating features like PS\npd.merge(top_10, items_category, left_on = \"item_category_id\", right_on = \"item_category_id\")","b447fa75":"# import df\nsales = pd.read_csv(os.path.join(PATH_DATA, \"sales_train.csv\"))\nsales.shape","46282d56":"sales.sample(10)","322e7a5c":"sales.info()","cca4b17c":"# No null values in the sales df\n\n# Is this True?\n\nsales.isnull().sum()","e4da8c22":"sorted(list(sales[\"item_cnt_day\"].unique()))[:20]","c836f4b7":"del shops, items_category, items, sales\ngc.collect()","8639b3e9":"# a simple function that creates a global df with all joins and also shops corrections\ndef create_df(path):\n    '''\n    This is a helper function that creates the train df.\n    '''\n    # import all df\n    shops = pd.read_csv(os.path.join(path, \"shops.csv\"))                    \n    items_category = pd.read_csv(os.path.join(path, \"item_categories.csv\"))\n    items = pd.read_csv(os.path.join(path, \"items.csv\"))\n    sales = pd.read_csv(os.path.join(path, \"sales_train.csv\"))\n    \n    # fix shop_id in sales so that we can leater merge the df\n    \n    d = {0:57, 1:58, 10:11, 23:24}\n    sales[\"shop_id\"] = sales[\"shop_id\"].map(lambda x: d[x] if x in d.keys() else x)\n    sales_shape_start = sales.shape[0]\n    shops = fix_shops(shops) # fix the shops as we have seen before\n    \n    # create df by merging the previous dataframes\n    df = pd.merge(items, items_category, left_on = \"item_category_id\", right_on = \"item_category_id\")\n    df = pd.merge(sales, df, left_on = \"item_id\", right_on = \"item_id\")\n    df = pd.merge(df, shops, left_on = \"shop_id\", right_on = \"shop_id\")\n    \n    # sort the values\n    df.sort_values(by = [\"shop_id\", \"date\"], ascending = True, inplace = True)\n    df_shape_end = df.shape[0]\n    \n    assert sales_shape_start == df_shape_end, \"You have created a cartessian!\"\n    \n    return df","13038899":"df = create_df(path = PATH_DATA)","51d13c65":"# It seems that there are no null values, however this is not fully true. \n# As we will see in the next section, when we groupby and plot the data, there are a lot of months where there have been no sales so basically it's a null value, and we have to impute zero sales for that month.\ndf.isnull().sum().sum()","10181f04":"df.info()","e163d853":"# Let's group by Month and see all the sales\n\n# resample in timeseries is the same as groupby\n# in order it to work, we must set the date column as index, and it must be a datetime format (strings are not valid)\n# when we resample it, we can pass D: daily, W: weekly or M: monthly\n# we can then perform operation on the 'resampled' columns like\n# sum, mean and others.\n\n# calculate the monthly sales\ndf[\"date\"] = pd.to_datetime(df[\"date\"], format = \"%d.%m.%Y\")","b4406afd":"df[\"Year\"] = df[\"date\"].dt.year","f6962721":"df[\"Month\"] = df[\"date\"].dt.month","d457dca0":"df.head()","49656ca7":"# resample the data on a monthly basis\nx = df[[\"date\", \"item_cnt_day\"]].set_index(\"date\").resample(\"M\").sum()\n\n# plot the data using matplotlib\nplt.figure(figsize = (10, 6))\nplt.plot(x, color = \"blue\", label = \"Monthly sales\")\nplt.title(\"Monthly sales\")\nplt.legend();","6d76a3e1":"# perform the same operations but on a weekly basis\nx = df[[\"date\", \"item_cnt_day\"]].set_index(\"date\").resample(\"W\").sum()\n\nplt.figure(figsize = (10, 6))\nplt.plot(x.index, x, color = \"blue\", label = \"Weekly sales\")\nplt.title(\"Weekly sales\")\nplt.legend();","d02e4def":"russian_holidays_start = [\ndatetime.datetime(2013, 1, 1),\ndatetime.datetime(2013, 2, 23),\ndatetime.datetime(2013, 3, 8),\ndatetime.datetime(2013, 5, 1),\ndatetime.datetime(2013, 5, 9),\ndatetime.datetime(2013, 6, 12),\ndatetime.datetime(2013, 11, 4),\n\ndatetime.datetime(2014, 1, 1),\ndatetime.datetime(2014, 2, 23),\ndatetime.datetime(2014, 3, 8),\ndatetime.datetime(2014, 5, 1),\ndatetime.datetime(2014, 5, 9),\ndatetime.datetime(2014, 6, 12),\ndatetime.datetime(2014, 11, 4),\n\ndatetime.datetime(2015, 1, 1),\ndatetime.datetime(2015, 2, 23),\ndatetime.datetime(2015, 3, 8),\ndatetime.datetime(2015, 5, 1),\ndatetime.datetime(2015, 5, 9),\ndatetime.datetime(2015, 6, 12),\ndatetime.datetime(2015, 11, 4)\n]","e178c1e1":"russian_holidays_end = [\ndatetime.datetime(2013, 1, 8),\ndatetime.datetime(2013, 2, 23),\ndatetime.datetime(2013, 3, 8),\ndatetime.datetime(2013, 5, 1),\ndatetime.datetime(2013, 5, 9),\ndatetime.datetime(2013, 6, 12),\ndatetime.datetime(2013, 11, 4),\n\ndatetime.datetime(2014, 1, 8),\ndatetime.datetime(2014, 2, 23),\ndatetime.datetime(2014, 3, 8),\ndatetime.datetime(2014, 5, 1),\ndatetime.datetime(2014, 5, 9),\ndatetime.datetime(2014, 6, 12),\ndatetime.datetime(2014, 11, 4),\n\ndatetime.datetime(2015, 1, 8),\ndatetime.datetime(2015, 2, 23),\ndatetime.datetime(2015, 3, 8),\ndatetime.datetime(2015, 5, 1),\ndatetime.datetime(2015, 5, 9),\ndatetime.datetime(2015, 6, 12),\ndatetime.datetime(2015, 11, 4)\n]","3297085c":"for iterable in sorted(list(df[\"shop_name\"].unique())):\n\n    # create the size of the figure\n    plt.figure(figsize = (30, 10))\n\n    # create the subplot for Monthly sales of the each shop\n    plt.subplot(1, 2, 1)\n    \n    # calculate the Monthly sales of each shop\n    short_df = df[df[\"shop_name\"] == iterable][[\"date\",\"item_cnt_day\"]]\n    short_df[\"date\"] = pd.to_datetime(short_df[\"date\"], format = \"%d.%m.%Y\")\n    short_df[\"YEAR\"] = short_df[\"date\"].dt.year\n    short_df = short_df.set_index(\"date\").groupby(\"YEAR\").resample(\"M\")[\"item_cnt_day\"].sum()\n    short_df = short_df.reset_index()\n    \n    # adding moving average\n    short_df[\"MA3M\"] = short_df[\"item_cnt_day\"].rolling(window = 3).mean()\n    short_df[\"MA4M\"] = short_df[\"item_cnt_day\"].rolling(window = 4).mean()\n    short_df[\"MA5M\"] = short_df[\"item_cnt_day\"].rolling(window = 5).mean()\n    \n    # assing the data to plot\n    sales = short_df[\"item_cnt_day\"]\n    dates = short_df[\"date\"]\n    \n    average_3_months = short_df[\"MA3M\"]\n    average_4_months = short_df[\"MA4M\"]\n    average_5_months = short_df[\"MA5M\"]\n\n    # plot the data and add label\n    plt.plot(dates, sales, 'o-', label = \"Monthly sales\")\n    \n    plt.plot(dates, average_3_months, '.-', label = \"Average sales of the last 3 months\")\n\n    # get current axis and plot the areas\n    ax = plt.gca()\n    alpha = 0.2\n    \n    for start_date, end_date in zip(russian_holidays_start, russian_holidays_end):\n        \n        # add shaded areas for holidays 2013\n        ax.axvspan(start_date, end_date, alpha = alpha, color = 'red')    \n       \n    # add title and show legend    \n    plt.title('Monthly sales of shop {}'.format(iterable))\n    plt.ylabel('Total Monthly sales of shop {}'.format(iterable))\n    plt.xlabel(\"Time grouped by month\")\n    plt.legend()\n    \n    #######################################################################################\n    # Weekly sales\n    #######################################################################################\n    \n    plt.subplot(1, 2, 2)\n    \n      # calculate the Weekly sales of each shop\n    short_df = df[df[\"shop_name\"] == iterable][[\"date\",\"item_cnt_day\"]]\n    short_df[\"date\"] = pd.to_datetime(short_df[\"date\"], format = \"%d.%m.%Y\")\n    short_df[\"YEAR\"] = short_df[\"date\"].dt.year\n    short_df = short_df.set_index(\"date\").groupby(\"YEAR\").resample(\"W\")[\"item_cnt_day\"].sum()\n    short_df = short_df.reset_index()\n    \n    # adding moving average\n    short_df[\"MA3W\"] = short_df[\"item_cnt_day\"].rolling(window=3).mean()\n    short_df[\"MA4W\"] = short_df[\"item_cnt_day\"].rolling(window=4).mean()\n    short_df[\"MA5W\"] = short_df[\"item_cnt_day\"].rolling(window=5).mean()\n    \n    # assing the data to plot\n    \n    # general sales\n    sales = short_df[\"item_cnt_day\"]\n    dates = short_df[\"date\"]\n    \n    average_3_weeks = short_df[\"MA3W\"]\n    average_4_weeks = short_df[\"MA4W\"]\n    average_5_weeks = short_df[\"MA5W\"]\n\n    # plot the data and add label\n    plt.plot(dates, sales, 'o-', label = \"Weekly sales\")\n    plt.plot(dates, average_3_weeks, '.-', label = \"Average sales of the last 3 weeks\")\n    \n    # get current axis and plot the areas\n    ax = plt.gca()\n    \n    for start_date, end_date in zip(russian_holidays_start, russian_holidays_end):\n        \n        # add shaded areas for holidays 2013\n        ax.axvspan(start_date, end_date, alpha = alpha, color = 'red')\n    \n    # add title and show legend\n    plt.title('Weekly sales of shop {}'.format(iterable))\n    plt.ylabel('Total Weekly sales of shop {}'.format(iterable))\n    plt.xlabel(\"Time grouped by week\")\n    plt.legend()\n    \n    # general sales\n    plt.show()","038b68cf":"for iterable in sorted(list(df[\"item_category_name\"].unique()))[:5]:\n\n    # create the size of the figure\n    plt.figure(figsize = (30, 10))\n\n    # create the subplot for Monthly sales of the each shop\n    plt.subplot(1, 2, 1)\n    \n    # calculate the Monthly sales of each shop\n    short_df = df[df[\"item_category_name\"] == iterable][[\"date\",\"item_cnt_day\"]]\n    short_df[\"date\"] = pd.to_datetime(short_df[\"date\"], format = \"%d.%m.%Y\")\n    short_df[\"YEAR\"] = short_df[\"date\"].dt.year\n    short_df = short_df.set_index(\"date\").groupby(\"YEAR\").resample(\"M\")[\"item_cnt_day\"].sum()\n    short_df = short_df.reset_index()\n    \n    # adding moving average\n    short_df[\"MA3M\"] = short_df[\"item_cnt_day\"].rolling(window=3).mean()\n    short_df[\"MA4M\"] = short_df[\"item_cnt_day\"].rolling(window=4).mean()\n    short_df[\"MA5M\"] = short_df[\"item_cnt_day\"].rolling(window=5).mean()\n    \n    # assing the data to plot\n    sales = short_df[\"item_cnt_day\"]\n    dates = short_df[\"date\"]\n    \n    average_3_months = short_df[\"MA3M\"]\n    average_4_months = short_df[\"MA4M\"]\n    average_5_months = short_df[\"MA5M\"]\n\n    # plot the data and add label\n    plt.plot(dates, sales, 'o-', label = \"Monthly sales\")\n    \n    plt.plot(dates, average_3_months, '.-', label = \"Average sales of the last 3 months\")\n\n    # get current axis and plot the areas\n    ax = plt.gca()\n    alpha = 0.2\n    \n    for start_date, end_date in zip(russian_holidays_start, russian_holidays_end):\n        \n        # add shaded areas for holidays 2013\n        ax.axvspan(start_date, end_date, alpha = alpha, color = 'red')   \n    \n    # add title and show legend\n    plt.title('Monthly sales of item category {}'.format(iterable))\n    plt.ylabel('Total Monthly sales of item category {}'.format(iterable))\n    plt.xlabel(\"Time grouped by month\")\n    plt.legend()\n    \n    #######################################################################################\n    # Weekly sales\n    #######################################################################################\n    \n    plt.subplot(1, 2, 2)\n    \n      # calculate the Weekly sales of each shop\n    short_df = df[df[\"item_category_name\"] == iterable][[\"date\",\"item_cnt_day\"]]\n    short_df[\"date\"] = pd.to_datetime(short_df[\"date\"], format = \"%d.%m.%Y\")\n    short_df[\"YEAR\"] = short_df[\"date\"].dt.year\n    short_df = short_df.set_index(\"date\").groupby(\"YEAR\").resample(\"W\")[\"item_cnt_day\"].sum()\n    short_df = short_df.reset_index()\n    \n    # adding moving average\n    short_df[\"MA3W\"] = short_df[\"item_cnt_day\"].rolling(window = 3).mean()\n    short_df[\"MA4W\"] = short_df[\"item_cnt_day\"].rolling(window = 4).mean()\n    short_df[\"MA5W\"] = short_df[\"item_cnt_day\"].rolling(window = 5).mean()\n    \n    # assing the data to plot\n    \n    # general sales\n    sales = short_df[\"item_cnt_day\"]\n    dates = short_df[\"date\"]\n    \n    average_3_weeks = short_df[\"MA3W\"]\n    average_4_weeks = short_df[\"MA4W\"]\n    average_5_weeks = short_df[\"MA5W\"]\n\n    # plot the data and add label\n    plt.plot(dates, sales, 'o-', label = \"Weekly sales\")\n    plt.plot(dates, average_3_weeks, '.-', label = \"Average sales of the last 3 weeks\")\n    \n    # get current axis and plot the areas\n    ax = plt.gca()\n    \n    for start_date, end_date in zip(russian_holidays_start, russian_holidays_end):\n        \n        # add shaded areas for holidays 2013\n        ax.axvspan(start_date, end_date, alpha = alpha, color = 'red')\n        \n    # add title and show legend\n    plt.title('Weekly sales of item category {}'.format(iterable))\n    plt.ylabel('Total Weekly sales of item category {}'.format(iterable))\n    plt.xlabel(\"Time grouped by week\")\n    plt.legend()\n    # general sales\n    plt.show()","a35358eb":"# we can observe a general trend of decrasing sales.\n# let's add a second axis to see the variation of intradays sales\n\n# select the columns of interest\ndf_var = df[[\"date\", \"item_cnt_day\"]]\n\n# convert to datetime\ndf_var[\"date\"] = pd.to_datetime(df[\"date\"], format = \"%d.%m.%Y\")\n\n# set date as index\ndf_var.set_index(\"date\", inplace = True)\n\n# resample\/groupby by date and convert to frame the total daily sales\ndf_var = df_var.resample(\"M\")[\"item_cnt_day\"].sum().to_frame()\n\n# calculate the intra week variation between total sales\ndf_var[\"Variation\"] = df_var[\"item_cnt_day\"].diff()\/df_var[\"item_cnt_day\"].shift(1)\n\ndf_var.head()","bf757841":"# separate x and y\ny_sales = df_var[\"item_cnt_day\"]\ny_variation = df_var[\"Variation\"]\n\n# instanciate the figure\nfig = plt.figure(figsize = (15, 10))\nax = fig.add_subplot(111)\n\n# plot the total sales\nplot1 = ax.plot(y_sales, label = \"Total monthly sales\", color = \"blue\", alpha = 0.5)\n\n# create a secondary axis and plot the variation data\nax_bis = ax.twinx()\nplot2 = ax_bis.plot(y_variation, label = \"Intra - month variation of sales\", color = \"red\", alpha = 0.5)\n\n# create a common legend for both plots\nlns = plot1 + plot2\nlabs = [l.get_label() for l in lns]\nax.legend(lns, labs, loc = \"upper left\")\n\n# add a custom title to the plot\nax.set_title(\"Total monthly sales and variation\");","cc392948":"# start with the regular df\ndf_for_question_1 = create_df(PATH_DATA)","7646c8fc":"# calendar heatmaps are really useful to see the overall activity for a certain period of time per day and per month.\n# let's build one using python.\n# we will be using the calmap package for this, because it makes it extremenly easy to plot this data\n# select the columns\ndf_calendar = df[[\"date\", \"item_cnt_day\"]]\n\n# set date as index and resample\ndf_calendar.set_index(\"date\", inplace = True)\n# notice that this time, we don't convert it to_frame()\n# df_calendar is a pandas series\n# THIS IS IMPORTANT since calmap expects a series\n# with a datetime index and the values to plot\ndf_calendar = df_calendar.resample(\"D\")[\"item_cnt_day\"].sum()\ndf_calendar.head()","b14e16dc":"# ----------------------------------------------------------------------------------------------------\n# plot the data using calmap\ncalmap.calendarplot(df_calendar, # pass the series\n                    fig_kws = {'figsize': (16,10)}, \n                    yearlabel_kws = {'color':'black', 'fontsize':14}, \n                    subplot_kws = {'title':'Total sales per year'});","16f6cd3b":"# This plot are fundamental in timeseries analysis.\n# Basically here we compare the a series again itself but with some lags.\n# These are plots that graphically summarize the strength of a relationship with an observation in a time series with observations at prior time steps.\n\n# More info: \n# https:\/\/machinelearningmastery.com\/gentle-introduction-autocorrelation-partial-autocorrelation\/\n\n# ----------------------------------------------------------------------------------------------------\n# instanciate the figure\nfig, (ax1, ax2) = plt.subplots(1, 2,figsize = (16,6), dpi = 80)\n\n# ----------------------------------------------------------------------------------------------------\n# plot the data using the built in plots from the stats module\n\n# The AutoCorrelation plot: compares a value v with the value v but n times in the past.\nplot_acf(df.set_index(\"date\").resample(\"D\")[\"item_cnt_day\"].sum(), ax = ax1, lags = 14)\n\n# The Parcial AutoCorrelation plot: partial autocorrelation at lag k is the correlation that results after removing the effect of any correlations due to the terms at shorter lags.\nplot_pacf(df.set_index(\"date\").resample(\"D\")[\"item_cnt_day\"].sum(), ax = ax2, lags = 14);","7d93d0ae":"# This code snippets show you have to calculate the Partial Autocorrelation\n# Partial Autocorrelation can be very counter intuitive since in some of our steps we are fitting a linear model\n# to predict the values of t - 2 using t - 1\n# Wait, what? Why we use values from yesterday to predict values before yesterday?\n# Basically because we assume that our timeseries is auto regressive. This means that the data at point t captures\n# all the variance\/information from all the previuos data points.\n# This way, t - 1, must have captured all the variance from previous points, thus t - 2, and so t - 1 becomes\n# a good predictor for values from t - 2.","8406e9f3":"# create a dataframe with total sales per day (all shops and all items)\ndf_total_sales = df.set_index(\"date\").resample(\"D\")[\"item_cnt_day\"].sum().to_frame()\n\n# rename the column item_cnt_day to total_sales\ndf_total_sales.columns = [\"total_sales\"]\n","4ad59280":"df_total_sales.head()","fc70a6d8":"\n# create a few features that we need in order to calculate the parcial autocorrelation\ndf_total_sales[\"T-1\"] = df_total_sales[\"total_sales\"].shift(1)\ndf_total_sales[\"T-2\"] = df_total_sales[\"total_sales\"].shift(2)\n\n# we have a few nan for the first 2 rows so we must drop them\nprint(df_total_sales.shape)\ndf_total_sales.dropna(axis = \"rows\", inplace = True)\nprint(df_total_sales.shape)","5e78b61b":"# instanciate the Linear model\nmodel = LinearRegression()\n\n# separate X and y\nX = df_total_sales[[\"T-1\"]]\ny = df_total_sales[\"total_sales\"]\n\n# fit and predict with the model\nmodel.fit(X, y)\npredictions = model.predict(X)\n\n# save our predictions to the total_sales df\ndf_total_sales[\"total_sales_from_T-1\"] = predictions","e451461d":"df_total_sales.head()","27db8e6a":"# instanciate the Linear model\nmodel = LinearRegression()\n\n# separate X and y\nX = df_total_sales[[\"T-1\"]]\ny = df_total_sales[\"T-2\"]\n\n# fit and predict with the model\nmodel.fit(X, y)\npredictions = model.predict(X)\n\n# save our predictions to the total_sales df\ndf_total_sales[\"T-2_from_T-1\"] = predictions","a55a4f85":"df_total_sales.head()","bb4310ca":"# calculate the residual\n# this means: total_sales - total_sales_from_T-1\n# and: T-2 - \"T-2_from_T-1\"\ndf_total_sales[\"Residual_total_sales_T-1\"] = df_total_sales[\"total_sales\"] - df_total_sales[\"total_sales_from_T-1\"]\n\n# this step is very important based on the asumptions we have about many of the timeseries\n# for more information I recommend this read\n# https:\/\/towardsdatascience.com\/understanding-partial-auto-correlation-fa39271146ac\ndf_total_sales[\"Residual_T-2_T-1\"] = df_total_sales[\"T-2\"] - df_total_sales[\"T-2_from_T-1\"]","4da37fd5":"df_total_sales.head()","6f8ca035":"# calculathe the parcial autocorrelation using manual method\nmanual_pacf = df_total_sales.corr(method = \"pearson\")[\"Residual_total_sales_T-1\"][\"Residual_T-2_T-1\"]\nprint(\"Manual parcial autocorrelation method {}\".format(round(manual_pacf, 5)))\n\n# calculate the parcial autocorrelation using statsmodel package\nstats_pacf = pacf(df_total_sales['total_sales'], nlags = 2)[2]\nprint(\"Parcial autocorrelation method using stats package {}\".format(round(stats_pacf, 5)))","f63a2818":"df_timeindex = df.set_index(\"date\").resample(\"W\")[\"item_cnt_day\"].sum().to_frame()\n\n# decompose the series using stats module\n# results in this case is a special class \n# whose attributes we can acess\nresult = seasonal_decompose(df_timeindex[\"item_cnt_day\"])\n\n# ----------------------------------------------------------------------------------------------------\n# instanciate the figure\n# make the subplots share teh x axis\nfig, axes = plt.subplots(ncols = 1, nrows = 4, sharex = True, figsize = (12,10))\n\n# ----------------------------------------------------------------------------------------------------\n# plot the data\n# using this cool thread:\n# https:\/\/stackoverflow.com\/questions\/45184055\/how-to-plot-multiple-seasonal-decompose-plots-in-one-figure\n# This allows us to have more control over the plots\n\n# plot the original data\nresult.observed.plot(ax = axes[0], legend = False)\naxes[0].set_ylabel('Observed')\naxes[0].set_title(\"Decomposition of a series\")\n\n# plot the trend\nresult.trend.plot(ax = axes[1], legend = False)\naxes[1].set_ylabel('Trend')\n\n# plot the seasonal part\nresult.seasonal.plot(ax = axes[2], legend = False)\naxes[2].set_ylabel('Seasonal')\n\n# plot the residual\nresult.resid.plot(ax = axes[3], legend = False)\naxes[3].set_ylabel('Residual')\n\n# ----------------------------------------------------------------------------------------------------\n# prettify the plot\n\n# get the xticks and the xticks labels\nxtick_location = df_timeindex.index.tolist()\n\n# set x_ticks\nax.set_xticks(xtick_location);","fc729b43":"# start with the regular df\ndf_for_question_2 = create_df(PATH_DATA)","4eea2b03":"# prepare the data\n\n# extract each year using dt.year\ndf[\"YEAR\"] = df[\"date\"].dt.year\n\n# create a smaller df for year 2013\nshort_df = df[df[\"YEAR\"] == 2013][[\"item_cnt_day\", \"city\"]]\n\n# groupby by city and sum all the sales\nshort_df = short_df.groupby(\"city\")[\"item_cnt_day\"].sum().to_frame()\n\n# sort the values in the smaller df inplace\nshort_df.sort_values(\"item_cnt_day\", ascending = False, inplace = True)\n\n# we will do the same plot as before but without custom colors\n# Moscow is a big outlier so it pales the rest of the cities\n\nshort_df = df[df[\"YEAR\"] == 2014][[\"item_cnt_day\", \"city\"]]\nshort_df = short_df.groupby(\"city\")[\"item_cnt_day\"].sum().to_frame()\nshort_df.sort_values(\"item_cnt_day\", ascending = False, inplace = True)\n\nmy_values = short_df[\"item_cnt_day\"]\nmy_pct = short_df[\"item_cnt_day\"]\/short_df[\"item_cnt_day\"].sum()\nlabels = ['{} - Sales :{}k \\n {}% of total'.format(city, sales\/1000, round(pct, 2)*100) for city, sales, pct in zip(short_df.index, my_values, my_pct)]\n\nplt.figure(figsize = (30, 8))\nsquarify.plot(sizes = my_values, label = labels,  alpha = 0.8)\nplt.title(\"Sales by city and their % over total sales in 2014\",fontsize = 23, fontweight = \"bold\")\n\nplt.axis('off')\nplt.tight_layout()","f600f6b5":"df[[\"city\", \"city_code\"]].drop_duplicates()","7f053bc3":"# treemaps are very useful to see the difference and the weights of categories\n# but they don't give us that much of information about the distribution of each category\n# let's use boxplot to see the distribution of Moscow city\n\n# we can see huge outliers for Moscow city.\nplt.figure(figsize = (10, 10))\nsns.boxplot(x = \"city\",\n            y = \"item_cnt_day\", \n            data = df[(df[\"YEAR\"] == 2013) & (df[\"city_code\"] == 9)]);","a520ba7b":"# start with the regular df\ndf_for_question_3 = create_df(PATH_DATA)","f487408f":"# This plot will help us visualize the missing values for each datetime and item_id\n# This is the most granular plots possible, since we will be seeing individual sales by day and item_id\n# This plot can be very consufing, but the main point is to show all the \"missing values\" we have\n# We have seen previously in our EDA, that when we groupby and resamples our sales, we might think\n# that we don't have any missing values. But its not true, we only have the reported sales\n# This means that, if we have a shop or item_id that only had 3 sales per year, when we resample\n# our df by day, pandas will generate additional days with null sales.\n# those null sales is what we want to plot here\n# the values are ordered from less nulls to more nulls\n\ngb_df_ = df.pivot_table(index = [\"date\"], columns = ['item_id'], values = \"item_cnt_day\", aggfunc = sum).isnull()\norder_of_columns = list(gb_df_.sum().sort_values().index)\ngb_df_ = gb_df_[order_of_columns]\nplt.figure(figsize = (20, 10))\nplot = sns.heatmap(gb_df_, cbar = True, cmap = \"inferno\")\nplot.set_title(\"Null sales by item_id and day\");","74147f6e":"gc.collect()\ndel gb_df_","3099b34e":"df[[\"shop_name\",\"shop_id\"]].drop_duplicates()","1dc5d314":"# this will allow us to see a all the columns of the df\npd.options.display.max_columns = 999","2a9b6932":"# create a smaller df\nshort_df = df[[\"date\", \"item_cnt_day\", \"shop_name\"]]\n# set the date to be the index (to resample later)\nshort_df.set_index(\"date\", inplace = True)\n# groupby by shop_name\ngb = short_df.groupby(\"shop_name\")\n# resample the df by month sales (resample = groupby by months in timeseries)\ngbr = gb.resample(\"M\")[\"item_cnt_day\"].sum()\n# unstack the gbr to have columns name\ngbr = gbr.unstack(level = -1).T\n# sort the values, from no nulls to more null values\norder_of_columns = list(gbr.isnull().sum().sort_values().index)\n# change the order of the df\ngbr = gbr[order_of_columns]","f8e6166d":"# let's plot the null values for each shop\nplt.figure(figsize=(20, 10))\n# this lines gbr.unstack(level = -1).T.isnull()*1\n# converts any null to 1 and the rest will be 0\nsns.heatmap(gbr.isnull()*1, cmap = \"inferno\", cbar = True).set_title(\"Null values by shop and Month\");","54dd0f82":"# create a smaller df\nshort_df = df[[\"date\", \"item_cnt_day\", \"item_category_name\"]]\n\n# set the date to be the index (to resample later)\nshort_df.set_index(\"date\", inplace = True)\n\n# groupby by shop_name\ngb = short_df.groupby(\"item_category_name\")\n\n# resample the df by month sales (resample = groupby by months in timeseries)\ngbr = gb.resample(\"M\")[\"item_cnt_day\"].sum()\n\n# unstack the gbr to have columns name\ngbr = gbr.unstack(level = -1).T\n\n# sort the values, from no nulls to more null values\norder_of_columns = list(gbr.isnull().sum().sort_values().index)\n\n# change the order of the df\ngbr = gbr[order_of_columns]","f7a8ab63":"# let's plot the null values for each shop\nplt.figure(figsize=(20, 10))\n\n# this lines gbr.unstack(level = -1).T.isnull()*1\n# converts any null to 1 and the rest will be 0\nsns.heatmap(gbr.isnull()*1, cmap = \"inferno\", cbar = True).set_title(\"Null values by item category and Month\");","ed7b9d00":"# let's look at outliers for item sales\n# We will use boxplots because they are very useful to see the distribution of values\nplt.figure(figsize = (10,4))\nsns.boxplot(x = df[\"item_cnt_day\"]);","2535274e":"# let's look at outliers for item price\nplt.figure(figsize = (10,4))\nplt.xlim(df[\"item_price\"].min(), df[\"item_price\"].max()*1.1)\nsns.boxplot(x = df[\"item_price\"]);","5502fc70":"# joint plot is another very convenient way to plot the relationship between 2 variables\n# but because we have huge outliers, we don't see them \n# https:\/\/seaborn.pydata.org\/generated\/seaborn.jointplot.html\nplt.figure(figsize = (10,4))\nsns.jointplot(x = \"item_price\", y = \"item_cnt_day\", data = df);","3f351697":"# let's filter the outliers and make the same joint plot\ndf = df[(df[\"item_price\"] < np.percentile(df[\"item_price\"], q = 99)) & (df[\"item_cnt_day\"] >= 0) & (df[\"item_cnt_day\"] < np.percentile(df[\"item_cnt_day\"], q = 99))]","9d284ffe":"# we have removed the outliers and now \nplt.figure(figsize = (10, 10))\nsns.jointplot(x = \"item_price\", y = \"item_cnt_day\", data = df);","85b6dbf6":"<a id = \"sales_viz_2_axis\"><\/a>\n# Total sales and the variation on secondary axis\n[Go back to the Table of Contents](#table_of_contents)","d0e790c0":"<a id = \"viz_null_values\"><\/a>\n# Visualizing nulls values\n[Go back to the Table of Contents](#table_of_contents)","87e9a2d8":"<a id = \"decomp_weekly\"><\/a>\n# Timeseries decomposition plots: weekly sales\n[Go back to the Table of Contents](#table_of_contents)","9f4cf3cf":"<a id = \"question_3\"><\/a>\n# Question 3: Create a treemap plot for item_category and the total combined sales\n\n<span style=\"color:red\">If the % of a category over total is less 1%, don't put any label!!!<\/span>\n\n[Go back to the Table of Contents](#table_of_contents)","8d5b61f5":"<a id = \"conclusion\"><\/a>\n# Conclusion\n[Go back to the Table of Contents](#table_of_contents)\n\nAfter taking a look at the sales data, here are some conclusion we can extract:\n\n1. We see that the total sales decrease over time. This is very important because, we have to create features for our model that catch this trend.\n\n2. We have seen that the sales present huge spikes in Christmas season. Datetime features can help a lot our model.\n\n3. Data has a lot of missing values and we have not found a specific or category affected by this. More likely it's just the nature of the data.\n\n4. Top 3 cities capture more than 50% of total sales. City based features can be very helpful for the model.\n\n5. The top 3 categories represent more than 40% of total sales: they are Movies, PC Games and Music.\n\n6. Data presents outliers at the sales and price level. Before generating features or training a model, data must be cleaned properly.\n\n7. We have seen thanks to our calendar plots that we a small increase in sales on the weekends. We do see however bigger sales on 14 of February or 9 of May (holidays).","74b5d4b3":"<a id = \"autocorrelation_calculation\"><\/a>\n# Manually calculate the Partial Autocorrelation\n[Go back to the Table of Contents](#table_of_contents)","a1089a3a":"<a id = \"sales_viz\"><\/a>\n# Viz of sales per week, month of shops and item_category columns\n[Go back to the Table of Contents](#table_of_contents)","bc28be48":"<a id = \"quick_look_item_cat\"><\/a>\n# Quick look at items_category df\n[Go back to the Table of Contents](#table_of_contents)","fa4d4c12":"In the next plots we will represent the monthly sales (left plot) and weekly sales (right plot) for each item category. \n\nWe will also plot the percentile 5 and 95 for each shop by year.\n\nIn the light red\/pink areas of each plot, we will mark the national holidays in Russia and see if there is any connection with sales spikes.","05e0f4ed":"# Welcome to this kernel\n\nThe goal of this kernel is very simple. It aims to provide some useful insights about the data and hopefully can guide you into what features to generate and how to tackle the modelling part.","8fd771b4":"<a id = \"eda\"><\/a>\n# Exploratory Data Analysis (EDA)\n[Go back to the Table of Contents](#table_of_contents)","0b4aa6bc":"<a id = \"corr_plots_daily\"><\/a>\n# Timeseries autocorrelation and partial autocorrelation plots: daily sales\n[Go back to the Table of Contents](#table_of_contents)","e4a607c1":"<a id = \"viz_cities\"><\/a>\n# Visualizing the most important cities\n[Go back to the Table of Contents](#table_of_contents)","1cb26e6e":"<a id =\"question_1\"><\/a>\n# Question 1: Create a plot with the moving average of total sales (7 days) and the variation on the second axis.\n[Go back to the Table of Contents](#table_of_contents)","43404b9a":"<a id = \"join_df\"><\/a>\n# Joining df\n[Go back to the Table of Contents](#table_of_contents)","1bf6dac8":"<a id = \"question_2\"><\/a>\n# Question 2: Create a decomposition plot for a city of weekly sales\n[Go back to the Table of Contents](#table_of_contents)","b7244587":"<a id = \"viz_outliers\"><\/a>\n# Visualization of outliers\n[Go back to the Table of Contents](#table_of_contents)","26a1c680":"<a id =\"table_of_contents\"><\/a>\n# Table of contents\n\n\n[Imports](#imports)\n\n[Quick look at shops df](#quick_look_shops)\n\n[Fix shops df and generate some features](#fix_shops)\n\n[Quick look at item category df](#quick_look_item_cat)\n\n[Quick look at items df](#quick_look_item)\n\n[Quick look at sales df](#quick_look_sales)\n\n[Joining df](#join_df)\n\n[Exploratory Data Analysis (EDA)](#eda)\n\n[Viz of sales per week, month of shops and item_category columns](#sales_viz)\n\n[Total sales and the variation on secondary axis](#sales_viz_2_axis)\n\n--> [Question 1: Create a plot with the moving average of total sales (7 days) and the variation on the second axis.](#question_1)\n\n[Calendar heatmap](#calendar_heatmap)\n\n[Timeseries autocorrelation and partial autocorrelation plots: daily sales](#corr_plots_daily)\n\n[Manually calculate the Partial Autocorrelation](#autocorrelation_calculation)\n\n[Timeseries decomposition plots: weekly sales](#decomp_weekly)\n\n--> [Question 2: Create a decomposition plot for a city of weekly sales](#question_2)\n\n[Visualizing the most important cities](#viz_cities)\n\n--> [Question 3: Create a treemap plot for item_category and the total combined sales](#question_3)\n\n[Visualizing nulls values](#viz_null_values)\n\n[Visualization of outliers](#viz_outliers)\n\n[Conclusion](#conclusion)","d7f3e8e2":"<a id = \"quick_look_shops\"><\/a>\n# Quick look at shops df\n[Go back to the Table of Contents](#table_of_contents)","a364d317":"<a id = \"fix_shops\"><\/a>\n# Fix shops df and generate some features\n[Go back to the Table of Contents](#table_of_contents)","c2b93aee":"<a id = \"quick_look_item\"><\/a>\n# Quick look at items df\n[Go back to the Table of Contents](#table_of_contents)","09e988ca":"In the next plots we will represent the monthly sales (left plot) and weekly sales (right plot) for each shop. \n\nIn the light red\/pink areas of each plot, we will mark the national holidays in Russia and see if there is any connection with sales spikes.","48f6be64":"Analyzing data on a weekly basis, gives us much more information. We can see more variation between weeks, but the main point stays the same: we have spines in January and sales that go down overtime.","b3827c58":"<a id = \"imports\"><\/a>\n# Imports\n[Go back to the Table of Contents](#table_of_contents)","53bb621b":"<a id = \"quick_look_sales\"><\/a>\n# Quick look at sales df\n[Go back to the Table of Contents](#table_of_contents)","b379b630":"From our very first and simple figure, we can already extract very useful information.\n* First of all, we can see big spikes in January, like to be motivated with national holidays in Russia.\n* Second: we see a general trend to decline in our timeseries. If you are planning to use a parametrical model, you must take into account this.","963f6229":"<a id = \"calendar_heatmap\"><\/a>\n# Calendar heatmap\n[Go back to the Table of Contents](#table_of_contents)","fbb4fcc3":"Treemaps are a very useful and visual tools to see different categories and their overall importance in a dataset.\nAlso, they are very cool and easy to make using Python and squarify."}}