{"cell_type":{"4fdfa715":"code","769a6380":"code","c55f58e9":"code","969f0b09":"code","a93c1dc8":"code","08eb80bd":"code","dbee4f8e":"code","61f3dbe2":"code","1a08afb6":"code","dda49ffa":"code","16dd68cb":"code","c024db71":"code","211d46a2":"code","dde38bb1":"code","0b5b8ff0":"code","d93e35a8":"code","446ffe0b":"code","bd4b8474":"code","e84a9a0b":"code","06d6999b":"code","1163b5e5":"code","c1e696dd":"code","9dc15a40":"code","28ef7eee":"code","03be9b43":"code","e5772b0c":"code","a6a29722":"code","3d444032":"code","7c4cddeb":"code","90b7257a":"code","ca7f1e3b":"code","e8d37978":"code","fb3e0291":"code","3a01e284":"code","6e6351c1":"code","a57609a1":"code","8f7509a3":"code","59023b0c":"code","85f3ddf7":"markdown","a90de399":"markdown","dbecb3ea":"markdown","bafbfc33":"markdown"},"source":{"4fdfa715":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n\nplt.style.use('seaborn')\n\nfigure = {'dpi': '200'}\nfont = {'family': 'fantasy'}\ngrid = {'linestyle': ':', 'alpha': .9}\naxes = {'titlecolor': 'black', 'titlesize': 20, 'titleweight': 'bold',\n        'labelsize': 12, 'labelweight': 'bold'}\n\nplt.rc('font', **font)\nplt.rc('figure', **figure)\nplt.rc('grid', **grid)\nplt.rc('axes', **axes)","769a6380":"train = pd.read_csv('..\/input\/tabular-playground-series-jul-2021\/train.csv')\ntest = pd.read_csv('..\/input\/tabular-playground-series-jul-2021\/test.csv')","c55f58e9":"train.head()","969f0b09":"train['date_time'] = pd.to_datetime(train['date_time'])","a93c1dc8":"train.shape","08eb80bd":"train['dayofweek'] = train['date_time'].dt.dayofweek\ntrain['dayofyear'] = train['date_time'].dt.dayofyear\ntrain['week'] = train['date_time'].dt.week\ntrain['month'] = train['date_time'].dt.month\ntrain['year'] = train['date_time'].dt.year","dbee4f8e":"train.shape","61f3dbe2":"train = train.set_index('date_time')","1a08afb6":"corr = train.corr()\nmask = np.triu(np.ones_like(corr, dtype = bool))\n\nplt.figure(figsize = (10, 10))\nplt.title('Correlation matrix')\nsns.heatmap(corr, mask = mask, cmap = 'magma', linewidths = .5)\nplt.show()","dda49ffa":"train.plot(figsize = (11, 25), subplots = True, linewidth = 0.8)\nplt.xlabel('')\nplt.show()","16dd68cb":"target_name = ['target_carbon_monoxide', 'target_benzene', 'target_nitrogen_oxides']","c024db71":"X = train.drop(target_name, axis = 1)\ny = train[target_name]","211d46a2":"from sklearn.model_selection import train_test_split","dde38bb1":"X_train, X_valid, y_train, y_valid = train_test_split(X, y, \n                                                      test_size = 0.2,\n                                                      random_state = 0,\n                                                      shuffle = False)","0b5b8ff0":"from xgboost import XGBRegressor\n\n# The basic model\nparams = {'n_estimators': 400,\n          'subsample': 0.8,\n          'max_depth': 8,\n          'learning_rate': 0.05,\n          'n_jobs': -1,\n          'colsample_bytree': 0.8,\n          'reg_alpha': 0.1,\n          'reg_lambda': 0.1,\n          'random_state': 0}\n\nmodel1 = XGBRegressor(**params).fit(X_train, y_train.iloc[:, 0])\nmodel2 = XGBRegressor(**params).fit(X_train, y_train.iloc[:, 1])\nmodel3 = XGBRegressor(**params).fit(X_train, y_train.iloc[:, 2])","d93e35a8":"from sklearn.metrics import mean_squared_log_error","446ffe0b":"y_pred1 = model1.predict(X_valid)\nprint('RMSLE ({}): {}'.format(target_name[0], round(np.sqrt(mean_squared_log_error(y_valid.iloc[:, 0], y_pred1)), 4)))\ny_pred2 = model2.predict(X_valid)\nprint('RMSLE ({}): {}'.format(target_name[1], round(np.sqrt(mean_squared_log_error(y_valid.iloc[:, 1], y_pred2)), 4)))\ny_pred3 = model3.predict(X_valid)\nprint('RMSLE ({}): {}'.format(target_name[2], round(np.sqrt(mean_squared_log_error(y_valid.iloc[:, 2], y_pred3)), 4)))","bd4b8474":"import tensorflow as tf","e84a9a0b":"# define baseline model\ndef baseline_ann_model(hidden_dim = 128):\n    ann = tf.keras.models.Sequential()\n    ann.add(tf.keras.layers.Dense(hidden_dim, input_dim = X.shape[1], kernel_initializer='he_uniform', activation='relu'))\n    ann.add(tf.keras.layers.Dense(hidden_dim, activation='relu'))\n\n    ann.add(tf.keras.layers.Dense(3, activation = 'linear'))\n    ann.compile(optimizer = 'adam', loss = 'mean_squared_logarithmic_error')\n    return ann","06d6999b":"ann = baseline_ann_model(hidden_dim = 8)\nann.summary()","1163b5e5":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nX_train_scaled = scaler.fit_transform(X_train)","c1e696dd":"history = ann.fit(X_train_scaled, y_train, epochs = 200, batch_size = 16, verbose = 1, validation_split = 0.3)","9dc15a40":"# summarize history for loss\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","28ef7eee":"X_valid_scaled = scaler.fit_transform(X_valid)","03be9b43":"y_pred = ann.predict(X_valid_scaled)\nprint('RMSLE baseline: {}'.format(round(np.sqrt(mean_squared_log_error(y_valid, y_pred)), 4)))","e5772b0c":"y_pred = pd.DataFrame(y_pred, columns = y_valid.columns, index = y_valid.index)","a6a29722":"print('RMSLE ({}): {}'.format(target_name[0], \n                              round(np.sqrt(mean_squared_log_error(y_valid.iloc[:, 0], y_pred.iloc[:, 0])), 4)))\n\nprint('RMSLE ({}): {}'.format(target_name[1], \n                              round(np.sqrt(mean_squared_log_error(y_valid.iloc[:, 1], y_pred.iloc[:, 1])), 4)))\n\nprint('RMSLE ({}): {}'.format(target_name[2], \n                              round(np.sqrt(mean_squared_log_error(y_valid.iloc[:, 2], y_pred.iloc[:, 2])), 4)))","3d444032":"date = pd.to_datetime(X_valid.reset_index().date_time).apply(lambda x: x.strftime('%Y\/%m\/%d'))\n\nvalid_preds = pd.DataFrame({'date': date,\n                            'target_carbon_monoxide': y_valid.iloc[:, 0].values,\n                            'target_benzene': y_valid.iloc[:, 1].values,\n                            'target_nitrogen_oxides': y_valid.iloc[:, 2].values,\n                            'preds_carbon_monoxide': y_pred.iloc[:, 0].values,\n                            'preds_benzene': y_pred.iloc[:, 1].values,\n                            'preds_nitrogen_oxides': y_pred.iloc[:, 2].values})\nvalid_preds = valid_preds.groupby('date').mean()","7c4cddeb":"plt.figure(figsize = (15, 5))\nvalid_preds['target_carbon_monoxide'].plot(color = 'blue', label = 'true')\nvalid_preds['preds_carbon_monoxide'].plot(color = 'red', label = 'preds')\nplt.legend()\nplt.xlabel('')\nplt.show()","90b7257a":"plt.figure(figsize = (15, 5))\nvalid_preds['target_benzene'].plot(color = 'blue', label = 'true')\nvalid_preds['preds_benzene'].plot(color = 'red', label = 'preds')\nplt.legend()\nplt.xlabel('')\nplt.show()","ca7f1e3b":"plt.figure(figsize = (15, 5))\nvalid_preds['target_nitrogen_oxides'].plot(color = 'blue', label = 'true')\nvalid_preds['preds_nitrogen_oxides'].plot(color = 'red', label = 'preds')\nplt.legend()\nplt.xlabel('')\nplt.show()","e8d37978":"test['date_time'] = pd.to_datetime(test['date_time'])","fb3e0291":"test['dayofweek'] = test['date_time'].dt.dayofweek\ntest['dayofyear'] = test['date_time'].dt.dayofyear\ntest['week'] = test['date_time'].dt.week\ntest['month'] = test['date_time'].dt.month\ntest['year'] = test['date_time'].dt.year","3a01e284":"test = test.drop('date_time', axis = 1)","6e6351c1":"submission = pd.read_csv('..\/input\/tabular-playground-series-jul-2021\/sample_submission.csv')\nsubmission = submission.set_index('date_time')","a57609a1":"ann = baseline_ann_model(hidden_dim = 8)\nX_scaled = scaler.fit_transform(X)\nhistory = ann.fit(X_scaled, y, epochs = 200, batch_size = 16, verbose = 1)\ntest_scaled = scaler.fit_transform(test)\npredictions = ann.predict(test_scaled)\npredictions = pd.DataFrame(predictions, columns = submission.columns, index = submission.index)","8f7509a3":"predictions = predictions.reset_index()\npredictions.head()","59023b0c":"predictions.to_csv('submission.csv', index = False)","85f3ddf7":"## Neural network testing","a90de399":"## Hi everyone!","dbecb3ea":"## maksymshkliarevskyi's XGBRegressor","bafbfc33":"After checking out all of the top notebooks in this competition (July 2nd) I wanted to see if a simple neural network could beat the best Machine Learning model I found.\n\nCheck out maksymshkliarevskyi's kernel for a great EDA walkthrough and a very strong baseline model using XGBRegressor!\n\nhttps:\/\/www.kaggle.com\/maksymshkliarevskyi\/tps-july-eda-baseline-analysis-xgbregressor\n\nThe artificial neural network could not beat maksymshkliarevskyi's model, but got somewhat close.\n\nDon't forget to upvote!"}}