{"cell_type":{"5737e046":"code","cf9c7824":"code","b1f60ad3":"code","e730a82a":"code","4c2d6305":"code","12be1248":"code","7979e043":"code","7548c179":"code","dbf8dc0d":"code","72b7adf5":"code","ba318113":"code","42d2bd8e":"code","e8de2da8":"code","59ee153e":"code","d44dd642":"code","4124ab0c":"code","57477447":"code","600f0db8":"code","e631c7da":"code","af41fbf2":"code","495eb586":"code","d04aaca8":"code","1b0de36d":"code","70dd3405":"code","f82e417a":"code","56544fa4":"code","75bfeb06":"code","af98c192":"code","57f828c2":"code","aa89aa6f":"code","31c79861":"code","39646f51":"code","891e9c90":"code","77f421bc":"code","388c5216":"code","048c2c10":"code","cc6e9d4a":"code","ef809888":"code","5c919e2c":"code","07d6147d":"code","5a79a4f1":"code","f100f34a":"code","0d68fb0a":"code","21b5c46c":"code","1df9c7c2":"code","ec26ecb0":"code","eb26cb6b":"code","95f45528":"code","c3811f60":"code","b1f042ca":"code","814ec1cb":"code","6de79dab":"code","20665b00":"code","1630cdfa":"code","f334aa0e":"code","3a417511":"code","231152b6":"code","8714709e":"code","90df78eb":"code","0ed17577":"markdown"},"source":{"5737e046":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","cf9c7824":"# raries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\n# print(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.\nimport itertools\nimport os\n\n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport tensorflow as tf\n\nfrom sklearn.preprocessing import LabelBinarizer, LabelEncoder\nfrom sklearn.metrics import confusion_matrix\n\nfrom tensorflow import keras\nlayers = keras.layers\nmodels = keras.models\n\n\n# This code was tested with TensorFlow v1.8\nprint(\"You have TensorFlow version\", tf.__version__)","b1f60ad3":"import pandas as pd\nbbc_text = pd.read_csv(\"..\/input\/bbc-fulltext-and-category\/bbc-text.csv\")","e730a82a":"bbc_text.head()\ndata = bbc_text","4c2d6305":"data.head()","12be1248":"import logging\nimport pandas as pd\nimport numpy as np\nfrom numpy import random\nimport gensim\nimport nltk\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer\nfrom sklearn.metrics import accuracy_score, confusion_matrix\nimport matplotlib.pyplot as plt\nfrom nltk.corpus import stopwords\nimport re\nfrom bs4 import BeautifulSoup\n%matplotlib inline\n\ndf = data\ndf = df[pd.notnull(df['category'])]\nprint(df.head(10))\nprint(df['text'].apply(lambda x: len(x.split(' '))).sum())","7979e043":"data['category'].value_counts()\n","7548c179":"my_tags = [cat for cat in data['category'].unique()]\nplt.figure(figsize=(10,4))\ndf.category.value_counts().plot(kind='bar')","dbf8dc0d":"def print_plot(index):\n    example = df[df.index == index][['text', 'category']].values[0]\n    if len(example) > 0:\n        print(example[0])\n        print('Tag:', example[1])\nprint_plot(10)","72b7adf5":"print_plot(30)","ba318113":"REPLACE_BY_SPACE_RE = re.compile('[\/(){}\\[\\]\\|@,;]')\nBAD_SYMBOLS_RE = re.compile('[^0-9a-z #+_]')\nSTOPWORDS = set(stopwords.words('english'))\n\ndef clean_text(text):\n    \"\"\"\n        text: a string\n        \n        return: modified initial string\n    \"\"\"\n#     text = BeautifulSoup(text, \"lxml\").text # HTML decoding\n    text = text.lower() # lowercase text\n    text = REPLACE_BY_SPACE_RE.sub(' ', text) # replace REPLACE_BY_SPACE_RE symbols by space in text\n    text = BAD_SYMBOLS_RE.sub('', text) # delete symbols which are in BAD_SYMBOLS_RE from text\n    text = ' '.join(word for word in text.split() if word not in STOPWORDS) # delete stopwors from text\n    return text\n    \ndf['text'] = df['text'].apply(clean_text)\nprint_plot(10)","42d2bd8e":"df['text'].apply(lambda x: len(x.split(' '))).sum()","e8de2da8":"X = df.text\ny = df.category\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state = 42)","59ee153e":"\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.feature_extraction.text import TfidfTransformer\n\nnb = Pipeline([('vect', CountVectorizer()),\n               ('tfidf', TfidfTransformer()),\n               ('clf', MultinomialNB()),\n              ])\nnb.fit(X_train, y_train)\n\n%time\nfrom sklearn.metrics import classification_report\ny_pred = nb.predict(X_test)\n\nprint('accuracy %s' % accuracy_score(y_pred, y_test))\nprint(classification_report(y_test, y_pred,target_names=my_tags))","d44dd642":"\nfrom sklearn.linear_model import SGDClassifier\n\nsgd = Pipeline([('vect', CountVectorizer()),\n                ('tfidf', TfidfTransformer()),\n                ('clf', SGDClassifier(loss='hinge', penalty='l2',alpha=1e-3, random_state=42, max_iter=5, tol=None)),\n               ])\nsgd.fit(X_train, y_train)\n\n%time\n\ny_pred = sgd.predict(X_test)\n\nprint('accuracy %s' % accuracy_score(y_pred, y_test))\nprint(classification_report(y_test, y_pred,target_names=my_tags))","4124ab0c":"from sklearn.linear_model import LogisticRegression\n\nlogreg = Pipeline([('vect', CountVectorizer()),\n                ('tfidf', TfidfTransformer()),\n                ('clf', LogisticRegression(n_jobs=1, C=1e5)),\n               ])\nlogreg.fit(X_train, y_train)\n\n%time\n\ny_pred = logreg.predict(X_test)\n\nprint('accuracy %s' % accuracy_score(y_pred, y_test))\nprint(classification_report(y_test, y_pred,target_names=my_tags))","57477447":"EMBEDDING_FILE = '\/root\/input\/GoogleNews-vectors-negative300.bin.gz'\n!wget -P \/root\/input\/ -c \"https:\/\/s3.amazonaws.com\/dl4j-distribution\/GoogleNews-vectors-negative300.bin.gz\"\n","600f0db8":"from gensim.models import Word2Vec\nwv = gensim.models.KeyedVectors.load_word2vec_format(EMBEDDING_FILE, binary=True)\nwv.init_sims(replace=True)","e631c7da":"def word_averaging(wv, words):\n    all_words, mean = set(), []\n    \n    for word in words:\n        if isinstance(word, np.ndarray):\n            mean.append(word)\n        elif word in wv.vocab:\n            mean.append(wv.vectors_norm[wv.vocab[word].index])\n            all_words.add(wv.vocab[word].index)\n\n    if not mean:\n        logging.warning(\"cannot compute similarity with no input %s\", words)\n        # FIXME: remove these examples in pre-processing\n        return np.zeros(wv.vector_size,)\n\n    mean = gensim.matutils.unitvec(np.array(mean).mean(axis=0)).astype(np.float32)\n    return mean\n\ndef  word_averaging_list(wv, text_list):\n    return np.vstack([word_averaging(wv, post) for post in text_list ])","af41fbf2":"def w2v_tokenize_text(text):\n    tokens = []\n    for sent in nltk.sent_tokenize(text, language='english'):\n        for word in nltk.word_tokenize(sent, language='english'):\n            if len(word) < 2:\n                continue\n            tokens.append(word)\n    return tokens\n    \ntrain, test = train_test_split(df, test_size=0.3, random_state = 42)\n\ntest_tokenized = test.apply(lambda r: w2v_tokenize_text(r['text']), axis=1).values\ntrain_tokenized = train.apply(lambda r: w2v_tokenize_text(r['text']), axis=1).values\n\nX_train_word_average = word_averaging_list(wv,train_tokenized)\nX_test_word_average = word_averaging_list(wv,test_tokenized)","495eb586":"from sklearn.linear_model import LogisticRegression\nlogreg = LogisticRegression(n_jobs=1, C=1e5)\nlogreg = logreg.fit(X_train_word_average, train['category'])\ny_pred = logreg.predict(X_test_word_average)\nprint('accuracy %s' % accuracy_score(y_pred, test.category))\nprint(classification_report(test.category, y_pred,target_names=my_tags))","d04aaca8":"import itertools\nimport os\n\n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport tensorflow as tf\n\nfrom sklearn.preprocessing import LabelBinarizer, LabelEncoder\nfrom sklearn.metrics import confusion_matrix\n\nfrom tensorflow import keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Activation, Dropout\nfrom keras.preprocessing import text, sequence\nfrom keras import utils\n\ntrain_size = int(len(df) * .7)\ntrain_posts = df['text'][:train_size]\ntrain_tags = df['category'][:train_size]\n\ntest_posts = df['text'][train_size:]\ntest_tags = df['category'][train_size:]\n\nmax_words = 5000\ntokenize = text.Tokenizer(num_words=max_words, char_level=False)\ntokenize.fit_on_texts(train_posts) # only fit on train\n\nx_train = tokenize.texts_to_matrix(train_posts)\nx_test = tokenize.texts_to_matrix(test_posts)\n\nencoder = LabelEncoder()\nencoder.fit(train_tags)\ny_train = encoder.transform(train_tags)\ny_test = encoder.transform(test_tags)\n\nnum_classes = np.max(y_train) + 1\ny_train = utils.to_categorical(y_train, num_classes)\ny_test = utils.to_categorical(y_test, num_classes)\n\nbatch_size = 32\nepochs = 10\n\n# Build the model\nmodel = Sequential()\nmodel.add(Dense(512, input_shape=(max_words,)))\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(num_classes))\nmodel.add(Activation('softmax'))\n\nmodel.compile(loss='categorical_crossentropy',\n              optimizer='adam',\n              metrics=['accuracy'])\n              \nhistory = model.fit(x_train, y_train,\n                    batch_size=batch_size,\n                    epochs=epochs,\n                    verbose=1,\n                    validation_split=0.2)","1b0de36d":"data_list = data['text']","70dd3405":"import nltk \nimport string \nimport re \n\ndef text_lowercase(text): \n    return text.lower()\n\n# Remove numbers \ndef remove_numbers(text): \n    result = re.sub(r'\\d+', '', text) \n    return result \n\n# remove punctuation \ndef remove_punctuation(text): \n    translator = str.maketrans('', '', string.punctuation) \n    return text.translate(translator) \n\n# remove whitespace from text \ndef remove_whitespace(text): \n    return  \" \".join(text.split()) \n\nfrom nltk.corpus import stopwords \nfrom nltk.tokenize import word_tokenize \n  \n# remove stopwords function \ndef remove_stopwords(text): \n    stop_words = set(stopwords.words(\"english\")) \n    word_tokens = word_tokenize(text) \n    filtered_text = [word for word in word_tokens if word not in stop_words] \n    return filtered_text \n  \nfrom nltk.stem.porter import PorterStemmer \nfrom nltk.tokenize import word_tokenize \nstemmer = PorterStemmer() \n  \n# stem words in the list of tokenised words \ndef stem_words(text): \n    word_tokens = word_tokenize(text) \n    stems = [stemmer.stem(word) for word in word_tokens] \n    return stems \n\n\n\nfrom nltk.stem import WordNetLemmatizer \nfrom nltk.tokenize import word_tokenize \nlemmatizer = WordNetLemmatizer() \n# lemmatize string \ndef lemmatize_word(text): \n    word_tokens = word_tokenize(text) \n    # provide context i.e. part-of-speech \n    lemmas = [lemmatizer.lemmatize(word, pos ='v') for word in word_tokens] \n    return lemmas \n\n\ndef preprocessing(text):\n    result = text_lowercase(text)\n#     result = remove_numbers(result)\n#     result = remove_punctuation(result)\n#     result = remove_whitespace(result)\n    result = remove_stopwords(result)\n    \n#     result = stem_words(result)\n#     result = lemmatize_word(result)\n    \n    \n    return result\n","f82e417a":"#using data_list we can preprocess the sentences here\nimport time\nsentences = [sentence for sentence in data_list]\nprint(len(sentences))\nstart_time  = time.time()\npreprocessed_sentences = [preprocessing(sentence) for sentence in sentences]\nend_time = time.time()\nprint(\"total time taken in preprocessing {}\".format(end_time-start_time))","56544fa4":"print(len(preprocessed_sentences))\nprint(len(sentences[4]))\nprint(len(preprocessed_sentences[4]))\nprint(sentences[4])\nprint(preprocessed_sentences[4])","75bfeb06":"# dictionary for words according to frequency\nfrom collections import defaultdict\nword_freq = defaultdict(int)\n\nfor sent in preprocessed_sentences:\n    for i in sent:\n        word_freq[i] += 1\nprint(len(word_freq))\n\nword_freq['subject']\nmost_freq_words = sorted(word_freq, key=word_freq.get, reverse=True)[:2000]","af98c192":"vocabulary = [(key,value) for key,value in word_freq.items() if(value>=5)]","57f828c2":"\nprint(len(vocabulary))\nvocabulary[10]\n\ndef Convert(tup, di): \n    for a, b in tup: \n        di.setdefault(a, []).append(b) \n    return di \n\nvocabulary_dict = {}\nvocabulary_dict = Convert(vocabulary,vocabulary_dict)\nprint(len(vocabulary_dict))","aa89aa6f":"EMBEDDING_FILE = '\/root\/input\/GoogleNews-vectors-negative300.bin.gz'\n!wget -P \/root\/input\/ -c \"https:\/\/s3.amazonaws.com\/dl4j-distribution\/GoogleNews-vectors-negative300.bin.gz\"\n","31c79861":"from gensim.models import KeyedVectors\nword2vec = KeyedVectors.load_word2vec_format(EMBEDDING_FILE, binary=True)\nx = word2vec.word_vec(\"test\")","39646f51":"import multiprocessing\n\nfrom gensim.models import Word2Vec\n\nimport logging  # Setting up the loggings to monitor gensim\nlogging.basicConfig(format=\"%(levelname)s - %(asctime)s: %(message)s\", datefmt= '%H:%M:%S', level=logging.INFO)\n\ncores = multiprocessing.cpu_count()\n\nprint(cores)","891e9c90":"from gensim.test.utils import get_tmpfile\nfrom gensim.models.callbacks import CallbackAny2Vec\n\n\nclass EpochSaver(CallbackAny2Vec):\n#      '''Callback to save model after each epoch.'''\n\n    def __init__(self, path_prefix):\n        self.path_prefix = path_prefix\n        self.epoch = 0\n\n    def on_epoch_end(self, model):\n        output_path = get_tmpfile('{}_epoch{}.model'.format(self.path_prefix, self.epoch))\n        model.save(output_path)\n        self.epoch += 1","77f421bc":"class EpochLogger(CallbackAny2Vec):\n    def __init__(self):\n        self.epoch = 0\n   \n    def on_epoch_begin(self, model):\n         print(\"Epoch #{} start\".format(self.epoch))\n\n    def on_epoch_end(self, model):\n        print(\"Epoch #{} end\".format(self.epoch))\n        self.epoch += 1\n\nepoch_logger = EpochLogger()\n# w2v_model = Word2Vec(common_texts, iter=5, size=10, min_count=0, seed=42, callbacks=[epoch_logger])","388c5216":"from gensim.models import Word2Vec\nimport time\nw2v_model = Word2Vec(min_count=5,\n                     window=2,\n                     size=300,\n                     sample=6e-5, \n                     alpha=0.03, \n                     min_alpha=0.0007, \n                     negative=20,\n                     workers=4)\n\nstart = time.time()\nw2v_model.build_vocab(preprocessed_sentences, progress_per=10000\/2)\ntotal_examples = w2v_model.corpus_count\nprint(total_examples)\n\nw2v_model.build_vocab([list(word2vec.vocab.keys())], update=True)\nw2v_model.intersect_word2vec_format(EMBEDDING_FILE, binary =True, encoding='utf8')\nw2v_model.train(preprocessed_sentences,total_examples=total_examples,epochs=30,callbacks=[epoch_logger])\n\nprint(\"total time taken {}\".format(time.time()-start))\n\n\nw2v_model.save('fine_tuned_30epochs_bbc_model')\n","048c2c10":"import os\nos.getcwd()","cc6e9d4a":"from gensim.models import Word2Vec\nfrom gensim.models import KeyedVectors\nw2v_model = Word2Vec.load(\"fine_tuned_30epochs_bbc_model\")\nvector  = w2v_model.wv['news']\nprint(vector.shape)\nw2v_model = w2v_model.wv","ef809888":"# vector","5c919e2c":"import time\nstart_time  = time.time()\npreprocessed_sentences = [preprocessing(sentence) for sentence in sentences]\nend_time = time.time()\nprint(\"total time taken in preprocessing {}\".format(end_time-start_time))","07d6147d":"start = time.time()\ndata_matrix = []\nfor i in range(len(preprocessed_sentences)):\n    word_dict ={}\n    for index,j in enumerate(preprocessed_sentences[i]):\n            if(j not in word_dict):\n                word_dict[j]=1\n            else:\n                word_dict[j]+=1\n    arr = []\n    for word in w2v_model.vocab:\n        if(word in word_dict):\n            arr.append(word_dict[word])\n        else:\n            arr.append(0)\n        \n    \n    data_matrix.append(arr)\nend = time.time()\nprint('total time taken in building matrix {}'.format(end-start))\n","5a79a4f1":"data_matrix = np.array(data_matrix)\nprint(data_matrix.shape)\nprint(data_matrix.dtype)\ndata_matrix = data_matrix.astype('int32')\nnp.save('data_matrix',data_matrix)","f100f34a":"data_matrix = np.load('data_matrix.npy')","0d68fb0a":"len(most_freq_words)\nmost_freq_words[101]","21b5c46c":"H_matrix = []\nstart = time.time()\nfor i in w2v_model.vocab:\n    arr = []\n    for word in most_freq_words:\n        similar = w2v_model.similarity(word, i)\n        if(similar>0):\n            arr.append(similar)\n        else:\n            arr.append(0)\n    H_matrix.append(arr)\n\n\n\n\n\n\n\nprint('time taken in generation {}'.format(time.time()-start))\nstart = time.time()\nH_matrix = np.array(H_matrix)\n\n\nprint('time taken in saving H_matrix {}'.format(time.time() - start))","1df9c7c2":"type(w2v_model.vocab)","ec26ecb0":"print(H_matrix.dtype)\nH_matrix = H_matrix.astype('float16')\nnp.save(\"H_matrix\",H_matrix)\nH_matrix = np.load('H_matrix.npy')","eb26cb6b":"\nprint('data_matrix shape : {} and dtype of data : {}'.format(data_matrix.shape, data_matrix.dtype))\nprint('H_matrix shape : {} and dtype of H_matrix : {}'.format(H_matrix.shape, H_matrix.dtype))\n","95f45528":"import time\nstart = time.time()\nmatrix_z = data_matrix.dot(H_matrix)\nprint('time taken in saving H_matrix {}'.format (time.time() - start))","c3811f60":"np.save('matrix_z_bbc_without_negSimilarity',matrix_z)\n\nprint('finally I get this matrix! huuu,,,')","b1f042ca":"import numpy as np","814ec1cb":"matrix_z = np.load('..\/input\/mydata\/matrix_z_bbc_without_negSimilarity.npy')\nmatrix_z = np.around(matrix_z,decimals=3)","6de79dab":"from sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.metrics import mean_squared_error,confusion_matrix, precision_score, recall_score, auc,roc_curve, classification_report\nfrom sklearn import ensemble, linear_model, neighbors, svm, tree, neural_network\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.linear_model import Ridge\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn import svm,model_selection, tree, linear_model, neighbors, naive_bayes, ensemble, discriminant_analysis, gaussian_process\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')","20665b00":"data.replace(cleanup_nums,inplace = True)\ncleanup_nums = {\"category\":     {\"tech\": 0, \"business\": 1,\"sport\":2, 'entertainment':3, 'politics':4}}\n            ","1630cdfa":"# y = data['category']\nX = matrix_z","f334aa0e":"y = data['category']\ny.unique()","3a417511":"X_train, X_test, y_train, y_test = train_test_split(X , y , test_size=0.2, random_state=38)","231152b6":"from sklearn.model_selection import GridSearchCV \nfrom sklearn.svm import SVC\nimport time\nstart = time.time()\n# defining parameter range \nparam_grid = {'C': [0.001,0.01, 0.1],  \n              'gamma': [1, 0.1, 0.01, 0.001, 0.0001], \n              'kernel': ['linear']}  \n  \ngrid = GridSearchCV(SVC(), param_grid, refit = True, verbose = 3,n_jobs=4) \n  \n# fitting the model for grid search \ngrid.fit(X_train, y_train) \n\nprint('time taken in training SMV model is {}'.format(time.time()-start))\n# print best parameter after tuning \nprint(grid.best_params_) \n  \n# print how our model looks after hyper-parameter tuning \nprint(grid.best_estimator_) \n","8714709e":"grid_predictions = grid.predict(X_test)\n\nprint(classification_report(y_test, grid_predictions)) \nprint(confusion_matrix(y_test,grid_predictions))","90df78eb":"tree_clf = tree.DecisionTreeClassifier()\nstart = time.time()\ntree_clf.fit(X_train,y_train)\nprint('time taken in training tree_clf model is {}'.format(time.time()-start))\npredictions_tree = tree_clf.predict(X_test)\nprint(confusion_matrix(y_test,predictions_tree))\nprint(classification_report(y_test,predictions_tree))\n","0ed17577":"# **Load word embedding pretrained on word Google news corpus**"}}