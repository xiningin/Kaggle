{"cell_type":{"33da2ebe":"code","5e86b6ac":"code","ec8dd028":"code","1a429b59":"code","8727f9b4":"code","15db88e7":"code","6b7cbb3c":"code","b2e4d259":"code","f736d227":"code","8a412fed":"code","c1972667":"code","2ee25111":"code","32f5c7b5":"code","f823211d":"code","182a6e7d":"code","11ecf20f":"code","5e5e0899":"code","31d254e8":"code","a8b5a521":"code","68d0ee55":"code","a3f1b6e1":"markdown","f75af97b":"markdown"},"source":{"33da2ebe":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5e86b6ac":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import Ridge, Lasso, LinearRegression\n\nimport sys\nimport warnings\n\nwarnings.simplefilter('ignore')\n\nimport plotly.express as px\nimport plotly.graph_objects as go\n\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)","ec8dd028":"df = pd.read_csv('..\/input\/house-price-tehran-iran\/housePrice.csv')\n\ndf_copy = df.copy()\ndf_copy = df_copy.drop(['Price'],axis=1)\ndf_copy.head()","1a429b59":"df_copy.shape","8727f9b4":"df_copy.info()","15db88e7":"df_copy[\"Parking\"] =df_copy['Parking'].astype('int')\ndf_copy[\"Warehouse\"] = df_copy['Warehouse'].astype('int')\ndf_copy[\"Elevator\"] = df_copy['Elevator'].astype('int')\ndf_copy[\"Area\"] = df_copy[\"Area\"].str.replace(',', '')\ndf_copy[\"Area\"] = df_copy[\"Area\"].astype('float')","6b7cbb3c":"sns.heatmap(df_copy.isnull())","b2e4d259":"df_copy = df_copy.dropna(how='any')","f736d227":"cat_features = df_copy.iloc[:,2:5].columns.tolist()\n\nRP=plt.figure(figsize=(12,20))\nfor i, feature in enumerate(cat_features):\n    r=RP.add_subplot(5,2,i+1)\n    sns.countplot(x=feature, data=df_copy)\n    r.set_title(feature+\" Histogram Plot\",color='DarkRed')\nRP.tight_layout()  ","8a412fed":"values_column = df_copy['Room'].value_counts()\nvalues = values_column.values\n\nfig = go.Figure(data=[go.Pie(labels=values_column.index,values=values_column, hole=.3)])\nfig.update_layout(template='plotly_dark',title_text='most common room numbers in entire houses')","c1972667":"plt.figure(figsize=(12,5))\ng = sns.FacetGrid(df_copy, col=\"Parking\",  row=\"Warehouse\",hue='Elevator',size=5)\ng = g.map(plt.scatter, \"Room\", \"Price(USD)\").add_legend()","2ee25111":"Prices = df_copy.groupby('Address')['Price(USD)'].sum().sort_values(ascending=False).head(10)\n\nfig = go.Figure()\nfig.add_trace(go.Bar(\n    x=Prices.index,\n    y=Prices.values,\n    name='Primary Product',\n    marker_color='indianred'\n))\n\nfig.update_layout(\n    title=\"10 TOP Address of Price(USD)\",\n    xaxis_title=\"Address\",\n    yaxis_title=\"Price(USD)\",\n    legend_title=\"Legend Title\",\n    font=dict(\n        family=\"Courier New, monospace\",\n        size=18,\n        color=\"RebeccaPurple\"\n    )\n)\n\nfig.update_layout(barmode='group', xaxis_tickangle=-45)\n\nfig.show()","32f5c7b5":"df1 = df_copy[\"Address\"].value_counts().to_dict()\ndf_copy[\"Address\"] = df_copy[\"Address\"].map(df1)\ndf_copy[\"Address\"]","f823211d":"X = df_copy.drop(['Price(USD)'],axis=1)\ny = df_copy['Price(USD)']","182a6e7d":"X_train,X_test,y_train,y_test = train_test_split(df_copy,y,test_size=0.3,random_state =42)","11ecf20f":"lf = LinearRegression()\nlf.fit(X_train , y_train )\n\ny_pred=lf.predict(X_test)","5e5e0899":"from sklearn import metrics\nMAE= metrics.mean_absolute_error(y_test, y_pred)\nMSE= metrics.mean_squared_error(y_test, y_pred)\nRMSE=np.sqrt(MSE)\n\npd.DataFrame([MAE, MSE, RMSE], index=['MAE', 'MSE', 'RMSE'], columns=['Metrics'])","31d254e8":"test_residuals=y_test-y_pred","a8b5a521":"sns.scatterplot(x=y_test, y=y_pred)\nplt.xlabel('Y-Test')\nplt.ylabel('Y-Pred')","68d0ee55":"sns.scatterplot(x=y_test, y=test_residuals)\nplt.axhline(y=0, color='c', ls='--')","a3f1b6e1":"<h1 style=\"padding: 1rem 2rem;border-left: 5px solid #000;background: #f4f4f4;\">EDA<\/h1>","f75af97b":"<h1 style=\"padding: 1rem 2rem;border-left: 5px solid #000;background: #f4f4f4;\">LinearRegression<\/h1>"}}