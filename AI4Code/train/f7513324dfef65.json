{"cell_type":{"caf70c4f":"code","35bc785b":"code","80b1135b":"code","c3ccf5cc":"code","893c7b0e":"code","58f3b7aa":"code","f5d6b0c1":"code","2f749799":"code","ada819ae":"code","7c3af488":"code","47461411":"code","859af295":"code","8ae68a94":"code","2e54b293":"code","a31679c3":"code","6ab7e750":"code","5b9a6037":"code","7845fc1c":"code","7b1afd7c":"code","86aac848":"code","01e181cc":"code","e735c08d":"code","d0860e27":"code","85cfea88":"code","acfed9e7":"code","2a0d1eba":"code","b6bcb3e5":"code","b411173f":"code","50f45176":"code","69136008":"code","876f6347":"code","463da691":"code","64bbcde5":"code","0367038f":"code","a4247f52":"code","3d730921":"code","e3f8f799":"code","0416b1fc":"code","8a37734c":"code","5e2a157b":"code","066f1b1f":"code","d52b17cb":"code","039c78cd":"code","17c6955f":"code","eb1bdc90":"code","b47f8799":"code","b5fd3631":"code","977525b7":"code","c775f323":"markdown","2dbde96e":"markdown","2767f862":"markdown","cfb770a5":"markdown","14aee90c":"markdown","1464bb3f":"markdown","70960da5":"markdown","a38a2d34":"markdown","f2c7a4b3":"markdown","06c26ffa":"markdown","87e9746b":"markdown","79106651":"markdown","b705668a":"markdown","7a15e433":"markdown","3a6f50bc":"markdown","d6d7eced":"markdown","193f000f":"markdown","07a14f14":"markdown","18cd59d2":"markdown","21e46928":"markdown","5edc44dc":"markdown","ec6ff20a":"markdown","a18afd5c":"markdown","fd822ac2":"markdown","f0e0886b":"markdown","512c1749":"markdown","885121a2":"markdown","72859d02":"markdown","ba67b161":"markdown"},"source":{"caf70c4f":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\n\n\nplt.style.use('ggplot')\nsns.__version__","35bc785b":"df = pd.read_csv('..\/input\/heart.csv')","80b1135b":"df.head(5)","c3ccf5cc":"print('total number of features: ', len(df.columns)-1)\nprint(\"Feature names: \", list(df.columns.drop('target')))","893c7b0e":"columns = df.columns\nunique = df.nunique()\nplt.figure(figsize=(8, 8))\nplt.barh(columns, unique)\nplt.xlabel('Unique values')\nplt.ylabel('Feature names')\nplt.show()","58f3b7aa":"print('Unique values in Target: ',  df['target'].nunique())","f5d6b0c1":"df.describe()","2f749799":"df.isnull().values.any()","ada819ae":"df.info()","7c3af488":"pd.DataFrame(df.corr(method='spearman')['target'])","47461411":"vars = np.array(['cp', 'oldpeak', 'thalach', 'slope'])\nplt.figure(figsize=(10, 10))\nfor i in vars:\n    plt.subplot(2,2,np.where(i == vars)[0][0]+1)\n    sns.stripplot(x=\"target\", y=i, data=df)\n    \nplt.suptitle('Figure - Strip plot', x=0.5, y=0.9, verticalalignment='center', fontsize= 18)\nplt.show()","859af295":"vars = np.array(['cp', 'oldpeak', 'thalach', 'slope'])\nplt.figure(figsize=(10, 10))\nfor i in vars:\n    plt.subplot(2,2,np.where(i == vars)[0][0]+1)\n    sns.kdeplot(df['target'], df[i], shade=True, cut=4)\n    \nplt.suptitle('Figure - Kernel density estimation plot', x=0.5, y=0.9, verticalalignment='center', fontsize= 18)\nplt.show()","8ae68a94":"sns.pairplot(df, vars=['cp', 'restecg', 'thalach', 'slope'], height=4, hue='target', \n             diag_kind='kde', markers=[\"D\", \"s\"], diag_kws=dict(shade=True))\nplt.suptitle('Figure - Scatter plot of features ', x=0.5, y=1.01, verticalalignment='center', fontsize= 20)\nplt.show()","2e54b293":"vars = np.array(['age', 'oldpeak', 'thalach', 'chol', 'trestbps'])\nplt.figure(1 , figsize=(20, 10))\nfor i in vars:\n    plt.subplot(2,3,np.where(i == vars)[0][0]+1)\n    sns.distplot(a = df[i], rug=True, color = 'blue')\n\nplt.suptitle('Figure - Histograms', x=0.5, y=0.9, verticalalignment='center', fontsize= 18)\nplt.show()","a31679c3":"plt.figure(figsize=(24,12))\nplt.subplot(1,2,1)\nsns.countplot(x=\"sex\", hue='target', data=df)\nplt.subplot(1,2,2)\nsns.countplot(x=\"age\", hue='target', data=df)\nplt.suptitle('Figure - Count plot of sex and age with target grouping variable', \n             x=0.5, y=0.9, verticalalignment='center', fontsize= 18)","6ab7e750":"plt.figure(figsize=(14,7))\nplt.subplot(1,2,1)\nsns.kdeplot(df['sex'], df['target'], shade=True, cut=3)\nplt.subplot(1,2,2)\nsns.kdeplot(df['age'], df['target'], shade=True, cut=3)\nplt.suptitle('Figure - KDE plot of sex and age wrt target', x=0.5, y=1, verticalalignment='center', fontsize= 18)\nplt.show()","5b9a6037":"vars = np.array(['cp', 'oldpeak', 'thalach', 'slope'])\nplt.figure(figsize=(15, 15))\nfor i in vars:\n    plt.subplot(2,2,np.where(i == vars)[0][0]+1)\n    sns.distplot(df[i][df['sex'] == 1], color='blue', label='male')\n    sns.distplot(df[i][df['sex'] == 0], label='female')\n    plt.legend()\n    \nplt.suptitle('Figure - Histogram of features wrt sex', x=0.5, y=0.9, verticalalignment='center', fontsize= 18)\nplt.show()","7845fc1c":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LogisticRegression, SGDClassifier\nfrom sklearn import svm\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import precision_recall_fscore_support\nimport xgboost as xgb","7b1afd7c":"y = df['target']\nx = df.drop(columns=['target'])","86aac848":"scaler = StandardScaler().fit(x)\nrescaledX = scaler.transform(x)","01e181cc":"X_train, X_test, y_train, y_test = train_test_split(rescaledX, y, random_state=5)\n\nprint(\"X train: \", X_train.shape)\nprint(\"X test: \", X_test.shape)\nprint(\"y train: \", y_train.shape)\nprint(\"y test: \", y_test.shape)","e735c08d":"lr = svm.SVC(kernel='linear')\nlr.fit(X_train, y_train)","d0860e27":"y_pred = lr.predict(X_test)\nlr.score(X_test, y_test)","85cfea88":"confusion_matrix(y_test, y_pred)","acfed9e7":"precision_recall_fscore_support(y_test, y_pred, average='binary')","2a0d1eba":"X_train, X_test, y_train, y_test = train_test_split(x, y, random_state=5)\n\nprint(\"X train: \", X_train.shape)\nprint(\"X test: \", X_test.shape)\nprint(\"y train: \", y_train.shape)\nprint(\"y test: \", y_test.shape)","b6bcb3e5":"lr = svm.SVC(kernel='linear')\nlr.fit(X_train, y_train)","b411173f":"y_pred = lr.predict(X_test)\nlr.score(X_test, y_test)","50f45176":"confusion_matrix(y_test, y_pred)","69136008":"precision_recall_fscore_support(y_test, y_pred, average='binary')","876f6347":"X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=5)\n\nprint(\"X train: \", X_train.shape)\nprint(\"X test: \", X_test.shape)\nprint(\"y train: \", y_train.shape)\nprint(\"y test: \", y_test.shape)","463da691":"lr = LogisticRegression(C=0.1, solver='liblinear')\nlr.fit(X_train, y_train)","64bbcde5":"y_pred = lr.predict(X_test)\nlr.score(X_test, y_test)","0367038f":"confusion_matrix(y_test, y_pred)","a4247f52":"precision_recall_fscore_support(y_test, y_pred, average='binary')","3d730921":"scaler = StandardScaler().fit(x)\nrescaledX = scaler.transform(x)","e3f8f799":"X_train, X_test, y_train, y_test = train_test_split(rescaledX, y, test_size=0.15, random_state=5)\n\nprint(\"X train: \", X_train.shape)\nprint(\"X test: \", X_test.shape)\nprint(\"y train: \", y_train.shape)\nprint(\"y test: \", y_test.shape)","0416b1fc":"sgd = SGDClassifier(max_iter=50, random_state=5)\nsgd.fit(X_train, y_train)","8a37734c":"y_pred = lr.predict(X_test)\nsgd.score(X_test, y_test)","5e2a157b":"confusion_matrix(y_test, y_pred)","066f1b1f":"precision_recall_fscore_support(y_test, y_pred, average='binary')","d52b17cb":"X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.1, random_state=5)\n\nprint(\"X train: \", X_train.shape)\nprint(\"X test: \", X_test.shape)\nprint(\"y train: \", y_train.shape)\nprint(\"y test: \", y_test.shape)","039c78cd":"accuracy = []\n\nmax_dep = range(1,10)\n\nfor i in max_dep:\n    xg = xgb.XGBClassifier(max_depth=i, min_samples_leaf=2)\n    xg.fit(X_train, y_train)\n    accuracy.append(xg.score(X_test, y_test))\n    \nprint('List of accuracy: ', accuracy)    ","17c6955f":"plt.plot(max_dep, accuracy, label='Accuracy of validation set')\nplt.ylabel('Accuracy')\nplt.xlabel('Max Depth')\nplt.legend()\nplt.show()","eb1bdc90":"xg =  xgb.XGBClassifier(max_depth=3, min_samples_leaf=2)\nxg.fit(X_train, y_train)","b47f8799":"y_pred = xg.predict(X_test)\nxg.score(X_test, y_test)","b5fd3631":"confusion_matrix(y_test, y_pred)","977525b7":"precision_recall_fscore_support(y_test, y_pred, average='binary')","c775f323":"### Hence, this is a binary classification problem. ","2dbde96e":"## Descriptive statistics for each column","2767f862":"## Histogram for dispered features","cfb770a5":"## Normalising dataset","14aee90c":"### Left plot shows that just great than 20 females and more than 100 males have no heart problem. The latter plot signifies that people over 54 age have less heart problems.","1464bb3f":"### For KDE, Strip plot and pairplot mapping, 4 features are used which positively correlated to target variable","70960da5":"## Strip plot","a38a2d34":"## Print total number of features available and names","f2c7a4b3":"## Find the significant features for predicting target","06c26ffa":"## Plot important features wrt sex","87e9746b":"# Logistic regression ","79106651":"## Print values for each feature of first 5 samples","b705668a":"## Unique values in all columns","7a15e433":"## Barplot of age and sex wrt target variable","3a6f50bc":"# Support Vector Classification using Linear Kernel","d6d7eced":"### Both the above plots show the distribution of highly correlated features wrt target, but KDE provides dense distribution.","193f000f":"## Print columns' information","07a14f14":"## Scatter plot","18cd59d2":"### From the above plots, we can verify statements I have written above.","21e46928":"##  Kernel density estimation plot","5edc44dc":"# XGBoost Model","ec6ff20a":"### From above, chest pain type (cp), maximum heart rate achieved (thalach) are top 2 features.","a18afd5c":"1. age: in years\n2. sex: (1 = male; 0 = female)\n3. cp: chest pain type\n4. trestbps: resting blood pressure (in mm Hg on admission to the hospital)\n5. chol: serum cholestoral in mg\/dl\n6. fbs: (fasting blood sugar > 120 mg\/dl) (1 = true; 0 = false)\n7. restecg: resting electrocardiographic results\n8. thalach: maximum heart rate achieved\n9. exang: exercise induced angina (1 = yes; 0 = no)\n10. oldpeak: ST depression induced by exercise relative to rest\n11. slope: the slope of the peak exercise ST segment\n12. ca: number of major vessels (0-3) colored by flourosopy\n13. thal: 3 = normal; 6 = fixed defect; 7 = reversable defect\n14. target: 1 or 0","fd822ac2":"## Without normalising dataset","f0e0886b":"# Stochastic Gradient Descent (SGD)","512c1749":"## Check any NaN value in dataset","885121a2":"## Create features and labels ","72859d02":"## Load dataset","ba67b161":"## Description of columns"}}