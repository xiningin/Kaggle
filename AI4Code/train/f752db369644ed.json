{"cell_type":{"5bbba960":"code","df0060c3":"code","0cf4d7c9":"code","a4449f11":"code","703ae020":"code","98659255":"code","ff89eb5d":"code","a7489734":"code","cf0d7495":"code","5fa95752":"code","d37f0b22":"code","e49d7511":"code","08ff049f":"code","ac9fc14c":"code","47bfc975":"code","78f323f9":"code","1eb95cd2":"code","0b46c5fe":"code","2dde20d5":"code","c2857262":"code","85e7fa75":"code","14ffadca":"code","8723c0e3":"code","54dec233":"code","f1474030":"code","dbf71dce":"code","7a81ed80":"code","d1de9585":"code","32e5f161":"code","2c09e8a3":"code","03db1285":"code","7bf01063":"code","83b7b03d":"code","eb98bc13":"code","13aeb0b6":"code","9ef41428":"code","f779771e":"code","3cdc486b":"code","f8213d2b":"code","df0d7297":"code","f87d5e66":"code","5b1c65b7":"code","01112e6b":"code","95cdcc3e":"code","bf6df7f3":"code","6d139a14":"code","da0d7938":"code","1932b603":"markdown"},"source":{"5bbba960":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom xgboost.sklearn import XGBClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import auc, roc_curve\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import precision_recall_fscore_support\nfrom sklearn.preprocessing import StandardScaler as ss\nfrom sklearn.decomposition import PCA\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import preprocessing","df0060c3":"data = pd.read_csv(\"..\/input\/data.csv\")","0cf4d7c9":"print(data.head())","a4449f11":"data.describe()","703ae020":"print(data.describe())","98659255":"data.shape","ff89eb5d":"# feature names as a list\ncol = data.columns","a7489734":"print(col)","cf0d7495":"# Drop useless variables\ndata = data.drop(['Unnamed: 32','id'],axis = 1)\n\n# Reassign target\ndata.diagnosis.replace(to_replace = dict(M = 1, B = 0), inplace = True)","5fa95752":"# 2 datasets\nM = data[(data['diagnosis'] != 0)]\nB = data[(data['diagnosis'] == 0)]","d37f0b22":"X = data.drop(\"diagnosis\", axis=1)\ny = data[\"diagnosis\"].values","e49d7511":"scale = ss()\nX = scale.fit_transform(X)\nprint(X.shape)","08ff049f":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.4)","ac9fc14c":"dt = DecisionTreeClassifier()\nrf = RandomForestClassifier(n_estimators=50)\netc = ExtraTreesClassifier(n_estimators=50)\nknc = KNeighborsClassifier()\nxg = XGBClassifier(learning_rate=0.5, reg_alpha= 5, reg_lambda= 0.1)\ngbm = GradientBoostingClassifier()","47bfc975":"#Train the data\ndt1 = dt.fit(X_train,y_train)\nrf1 = rf.fit(X_train,y_train)\netc1 = etc.fit(X_train,y_train)\nknc1 = knc.fit(X_train,y_train)\nxg1 = xg.fit(X_train,y_train)\ngbm1 = gbm.fit(X_train,y_train)","78f323f9":"#Predict the data\ny_pred_dt = dt1.predict(X_test)\ny_pred_rf = rf1.predict(X_test)\ny_pred_etc= etc1.predict(X_test)\ny_pred_knc= knc1.predict(X_test)\ny_pred_xg= xg1.predict(X_test)\ny_pred_gbm= gbm1.predict(X_test)","1eb95cd2":"#Fetch probabilities\ny_pred_dt_prob = dt1.predict_proba(X_test)\ny_pred_rf_prob = rf1.predict_proba(X_test)\ny_pred_etc_prob = etc1.predict_proba(X_test)\ny_pred_knc_prob = knc1.predict_proba(X_test)\ny_pred_xg_prob = xg1.predict_proba(X_test)\ny_pred_gbm_prob= gbm1.predict_proba(X_test)","0b46c5fe":"#Get accuracy scores\naccuracy_score(y_test,y_pred_dt)\naccuracy_score(y_test,y_pred_rf)\naccuracy_score(y_test,y_pred_etc)\naccuracy_score(y_test,y_pred_knc)\naccuracy_score(y_test,y_pred_xg)\naccuracy_score(y_test,y_pred_gbm)","2dde20d5":"print(accuracy_score(y_test,y_pred_dt))\nprint(accuracy_score(y_test,y_pred_rf))\nprint(accuracy_score(y_test,y_pred_etc))\nprint(accuracy_score(y_test,y_pred_knc))\nprint(accuracy_score(y_test,y_pred_xg))\nprint(accuracy_score(y_test,y_pred_gbm))","c2857262":"#Confusion matrix\nconfusion_matrix(y_test,y_pred_dt)","85e7fa75":"confusion_matrix(y_test,y_pred_rf)","14ffadca":"#ROC Graph\nfpr_dt, tpr_dt, thresholds = roc_curve(y_test, y_pred_dt_prob[: , 1], pos_label= 1)","8723c0e3":"fpr_rf, tpr_rf, thresholds = roc_curve(y_test, y_pred_rf_prob[: , 1], pos_label= 1)","54dec233":"#Fetch AUC\nauc(fpr_dt,tpr_dt)","f1474030":"auc(fpr_rf,tpr_rf)","dbf71dce":"#Calculate Precision, Recall and F-score\nprecision_recall_fscore_support(y_test,y_pred_dt)","7a81ed80":"precision_recall_fscore_support(y_test,y_pred_rf)","d1de9585":"#Plotting ROC Curve\nfig = plt.figure(figsize=(10,10))\nax = fig.add_subplot(111)\nax.set_xlabel('False Positive Rate')\nax.set_ylabel('True Positive Rate')\nax.set_title('ROC Curve')\nax.plot(fpr_dt, tpr_dt, label = \"dt\")\nax.plot(fpr_rf, tpr_rf, label = \"rf\")\nplt.show()","32e5f161":"drop_list1 = ['perimeter_mean','radius_mean','compactness_mean','concave points_mean','radius_se','perimeter_se','radius_worst','perimeter_worst','compactness_worst','concave points_worst','compactness_se','concave points_se','texture_worst','area_worst']\ndata_1 = data.drop(drop_list1,axis = 1 )        \ndata_1.head()","2c09e8a3":"ax = sns.countplot(y,label=\"Count\")\ny = data.diagnosis\nB, M = y.value_counts()\nprint('Number of Benign: ',B)\nprint('Number of Malignant : ',M)","03db1285":"#correlation map\nf,ax = plt.subplots(figsize=(14, 14))\nsns.heatmap(data_1.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax)","7bf01063":"cm = confusion_matrix(y_test,rf.predict(X_test))\nsns.heatmap(cm,annot=True,fmt=\"d\")","83b7b03d":"# seaborn version : Uncorrelated features\nfig = plt.figure(figsize=(12,12))\npalette ={0 : 'lightblue', 1 : 'gold'}\nedgecolor = 'blue'\nplt.subplot(221)\nax1 = sns.scatterplot(x = data['smoothness_mean'], y = data['texture_mean'], hue = \"diagnosis\",\n                    data = data, palette =palette, edgecolor=edgecolor)\nplt.title('smoothness mean vs texture mean')\nplt.subplot(222)\nax2 = sns.scatterplot(x = data['radius_mean'], y = data['fractal_dimension_worst'], hue = \"diagnosis\",\n                    data = data, palette =palette, edgecolor=edgecolor)\nplt.title('radius mean vs fractal dimension_worst')\nplt.subplot(223)\nax3 = sns.scatterplot(x = data['texture_mean'], y = data['symmetry_mean'], hue = \"diagnosis\",\n                    data = data, palette =palette, edgecolor=edgecolor)\nplt.title('texture mean vs symmetry mean')\nplt.subplot(224)\nax4 = sns.scatterplot(x = data['texture_mean'], y = data['symmetry_se'], hue = \"diagnosis\",\n                    data = data, palette =palette, edgecolor=edgecolor)\nplt.title('texture mean vs symmetry se')\n\nfig.suptitle('Uncorrelated features', fontsize = 20)\nplt.savefig('2')\nplt.show()","eb98bc13":"confusion_matrix(y_test,y_pred_etc)\nconfusion_matrix(y_test,y_pred_knc)\nconfusion_matrix(y_test,y_pred_xg)\nconfusion_matrix(y_test,y_pred_gbm)","13aeb0b6":"fpr_etc, tpr_etc, thresholds = roc_curve(y_test, y_pred_etc_prob[: , 1], pos_label= 1)","9ef41428":"fpr_knc, tpr_knc, thresholds = roc_curve(y_test, y_pred_knc_prob[: , 1], pos_label= 1)","f779771e":"fpr_xg, tpr_xg, thresholds = roc_curve(y_test, y_pred_xg_prob[: , 1], pos_label= 1)","3cdc486b":"fpr_gbm, tpr_gbm, thresholds = roc_curve(y_test, y_pred_gbm_prob[: , 1], pos_label= 1)","f8213d2b":"auc(fpr_etc,tpr_etc)","df0d7297":"auc(fpr_knc,tpr_knc)","f87d5e66":"auc(fpr_xg,tpr_xg)","5b1c65b7":"auc(fpr_gbm,tpr_gbm)","01112e6b":"precision_recall_fscore_support(y_test,y_pred_etc)","95cdcc3e":"precision_recall_fscore_support(y_test,y_pred_knc)","bf6df7f3":"precision_recall_fscore_support(y_test,y_pred_xg)","6d139a14":"precision_recall_fscore_support(y_test,y_pred_gbm)","da0d7938":"#Plotting ROC Curve\nfig = plt.figure(figsize=(10,10))\nax = fig.add_subplot(111)\nax.set_xlabel('False Positive Rate')\nax.set_ylabel('True Positive Rate')\nax.set_title('ROC Curve')\nax.plot(fpr_dt, tpr_dt, label = \"dt\")\nax.plot(fpr_rf, tpr_rf, label = \"rf\")\nax.plot(fpr_etc, tpr_etc, label = \"etc\")\nax.plot(fpr_knc, tpr_knc, label = \"knc\")\nax.plot(fpr_xg, tpr_xg, label = \"xg\")\nax.plot(fpr_gbm, tpr_gbm, label = \"gbm\")\nplt.show()","1932b603":"#import all the necessary libraries required for data visualization"}}