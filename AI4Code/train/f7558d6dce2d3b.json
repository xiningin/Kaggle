{"cell_type":{"a6c1ee1f":"code","433bf6a3":"code","52eae44b":"code","6c14fb57":"code","f624ba3e":"code","63afaed7":"code","800b51e2":"code","76e765a5":"code","3ba0e008":"code","a3ae31f1":"code","80ce748b":"code","795d0321":"code","e7b03f71":"code","d4d6fa17":"code","897514b2":"code","c7d6d697":"code","c8cfb517":"code","9dc8a9ab":"code","7622e34a":"code","cda82e2e":"code","00798e11":"code","13c4a4d4":"code","67d23b65":"code","941a6068":"code","100b4070":"code","78d73fcb":"code","b44a0dee":"code","495b0ce8":"code","09ae9f55":"code","c3dc4011":"code","71dae4dc":"code","7a925b06":"markdown","0f95e9c6":"markdown","0ced82fa":"markdown","22b4471c":"markdown","ba8e8ebf":"markdown","02848452":"markdown","7c9c516d":"markdown","7914ce02":"markdown","fde18df9":"markdown","f4797324":"markdown","1ea8f5d6":"markdown","33578290":"markdown"},"source":{"a6c1ee1f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","433bf6a3":"import numpy as np\nimport pandas as pd\n        \nimport plotly.express as px\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objs as go\n\npd.set_option('display.max_columns', None)","52eae44b":"games = pd.read_csv('\/kaggle\/input\/nfl-big-data-bowl-2022\/games.csv')\ngames.head()","6c14fb57":"check = games['gameDate'].value_counts().reset_index()\n\ncheck.columns = [\n    'date', \n    'games'\n]\ncheck = check.sort_values('games')\n\nfig = px.bar(\n    check, \n    y='date', \n    x=\"games\", \n    orientation='h', \n    title='Number of games for every date', \n    height=800, \n    width=800\n)\nfig.show()\n\n\n\ncheck = games['homeTeamAbbr'].value_counts().reset_index()\n\ncheck.columns = [\n    'team', \n    'games'\n]\n\ncheck = check.sort_values('games')\n\nfig = px.bar(\n    check, \n    y='team', \n    x=\"games\", \n    orientation='h', \n    title='Number of games for every team (home)', \n    height=900, \n    width=800\n)\n\nfig.show()\n\n","f624ba3e":"check = games['gameTimeEastern'].value_counts().reset_index()\n\ncheck.columns = [\n    'time', \n    'games'\n]\n\ncheck = check.sort_values('games')\n\nfig = px.bar(\n    check, \n    y='time', \n    x=\"games\", \n    orientation='h', \n    title='Number of games for every time', \n    height=900, \n    width=800\n)\n\nfig.show()","63afaed7":"visitor = games['visitorTeamAbbr'].value_counts().reset_index()\n\nvisitor.columns = [\n    'team', \n    'games'\n]\n\nvisitor = visitor.sort_values('games')\n\nfig = px.bar(\n    visitor, \n    y='team', \n    x=\"games\", \n    orientation='h', \n    title='Number of games for every team (away)', \n    height=700, \n    width=800\n)\n\nfig.show()","800b51e2":"check = games['week'].value_counts().reset_index()\n\ncheck.columns = [\n    'week', \n    'games'\n]\n\ncheck = check.sort_values('games')\ncheck['week'] = check['week'].astype(str) + '-'\n\nfig = px.bar(\n    check, \n    y='week', \n    x=\"games\", \n    orientation='h', \n    title='Number of games for every week', \n    height=900, \n    width=800\n)\n\nfig.show()","76e765a5":"players = pd.read_csv('\/kaggle\/input\/nfl-big-data-bowl-2022\/players.csv')\nplayers.head()","3ba0e008":"check = players['height'].str.split('-',expand=True)\n\ncheck.columns = [\n    'first', \n    'second'\n]\n\ncheck.loc[(check['second'].notnull()), 'first'] = check[check['second'].notnull()]['first'].astype(np.int16) * 12 + check[check['second'].notnull()]['second'].astype(np.int16)\nplayers['height'] = check['first']\nplayers['height'] = players['height'].astype(np.float32)\nplayers['height'] \/= 12\n\nplayers.head()","a3ae31f1":"fig = make_subplots(rows=1, cols=2)\ntraces = [\n    go.Histogram(\n        x=players[col[0]], \n        nbinsx=col[1], \n        name=col[0]\n    ) for col in [('height', 20), ('weight', 50)]\n]\n\nfor i in range(len(traces)):\n    fig.append_trace(\n        traces[i], \n        (i \/\/ 2) + 1, \n        (i % 2) + 1\n    )\n\nfig.update_layout(\n    title_text='Height & weight distributions',\n    height=400,\n    width=800\n)\n\nfig.show()\n\n","80ce748b":"check = players['collegeName'].value_counts().reset_index()\n\ncheck.columns = [\n    'college', \n    'players'\n]\n\ncheck = check.sort_values('players').tail(50)\n\nfig = px.bar(\n    check, \n    y='college', \n    x=\"players\", \n    orientation='h', \n    title='Top 50 colleges by number of players',\n    height=900,\n    width=800\n)\n\nfig.show()","795d0321":"check = players['Position'].value_counts().reset_index()\n\ncheck.columns = [\n    'position', \n    'players'\n]\n\ncheck = check.sort_values('players')\n\nfig = px.bar(\n    check, \n    y='position', \n    x=\"players\", \n    orientation='h', \n    title='Top positions by number of players',\n    height=600,\n    width=800\n)\n\nfig.show()","e7b03f71":"plays = pd.read_csv('\/kaggle\/input\/nfl-big-data-bowl-2022\/plays.csv')\nplays.head()","d4d6fa17":"check = plays['quarter'].value_counts().reset_index()\n\ncheck.columns = [\n    'quarter', \n    'plays'\n]\n\ncheck = check.sort_values('plays')\n\nfig = px.pie(\n    check, \n    names='quarter', \n    values=\"plays\",  \n    title='Number of plays of every quarter',\n    height=500,\n    width=800\n)\n\nfig.show()","897514b2":"check = plays['down'].value_counts().reset_index()\n\ncheck.columns = [\n    'down', \n    'plays'\n]\n\ncheck = check.sort_values('plays')\nfig = px.pie(\n    check, \n    names='down', \n    values=\"plays\",  \n    title='Number of plays of every down',\n    height=500,\n    width=800\n)\n\nfig.show()","c7d6d697":"check = plays['yardsToGo'].value_counts().reset_index()\n\ncheck.columns = [\n    'yardsToGo', \n    'plays'\n]\n\ncheck['yardsToGo'] = check['yardsToGo'].astype(str) + '-'\ncheck = check.sort_values('plays')\n\nfig = px.bar(\n    check, \n    y='yardsToGo', \n    x=\"plays\", \n    orientation='h', \n    title='Number of plays for every yards to go category',\n    height=800,\n    width=800\n)\n\nfig.show()","c8cfb517":"check = plays['possessionTeam'].value_counts().reset_index()\n\ncheck.columns = [\n    'team', \n    'plays'\n]\n\ncheck = check.sort_values('plays')\n\nfig = px.bar(\n    check, \n    y='team', \n    x=\"plays\", \n    orientation='h', \n    title='Number of plays for every team',\n    height=800,\n    width=800\n)\nfig.show()\n","9dc8a9ab":"check = plays['specialTeamsPlayType'].value_counts().reset_index()\n\ncheck.columns = [\n    'type', \n    'plays'\n]\n\ncheck = check.sort_values('plays')\n\nfig = px.pie(\n    check, \n    names='type', \n    values=\"plays\",  \n    title='Number of plays of every type',\n    height=500,\n    width=800\n)\n\nfig.show()","7622e34a":"check = plays['yardlineSide'].value_counts().reset_index()\n\ncheck.columns = [\n    'yardlineSide', \n    'plays'\n]\n\ncheck = check.sort_values('plays')\n\nfig = px.bar(\n    check, \n    y='yardlineSide', \n    x=\"plays\", \n    orientation='h', \n    title='Number of plays for every team yard side',\n    height=800,\n    width=800\n)\n\nfig.show()","cda82e2e":"check = plays['yardlineNumber'].value_counts().reset_index()\n\ncheck.columns = [\n    'yardline', \n    'plays'\n]\n\ncheck = check.sort_values('plays')\n\nfig = px.bar(\n    check, \n    x='yardline', \n    y=\"plays\",  \n    title='Number of plays for every yardline',\n    height=500,\n    width=800\n)\n\nfig.show()","00798e11":"check = plays['possessionTeam'].value_counts().reset_index()\n\ncheck.columns = [\n    'personnelO', \n    'plays'\n]\n\ncheck = check.sort_values('plays')\n\nfig = px.bar(\n    check, \n    y='personnelO', \n    x=\"plays\", \n    orientation='h', \n    title='Number of plays for every possessionTeam',\n    height=1000,\n    width=800\n)\n\nfig.show()","13c4a4d4":"plays = pd.read_csv('\/kaggle\/input\/nfl-big-data-bowl-2022\/tracking2018.csv')\nplays=plays.head(10000)\n","67d23b65":"fig = px.histogram(plays,x=\"x\", width=400, height=400,nbins=50, title='X coordinate distribution')\nfig.show()\n\nfig = px.histogram( plays,  x=\"y\",width=400,height=400,nbins=50,title='Y coordinate distribution')\nfig.show()\n\nfig = px.histogram( plays, x=\"s\", width=400, height=400, nbins=50,title='Speed distribution')\nfig.show()\n\nfig = px.histogram(plays,  x=\"a\", width=400, height=400,nbins=50,title='Acceleration distribution')\nfig.show()\n\nfig = px.histogram(plays,x=\"dis\",width=400, height=400,nbins=50,title='Distance distribution (yards)')\nfig.show()\n\nfig = px.histogram(plays,x=\"o\",width=400, height=400,nbins=50,title='Player orientation distribution')\nfig.show()\n\nfig = px.histogram(plays,x=\"dir\",width=400,height=400,nbins=50,title='Angle of player motion distribution')\nfig.show()","941a6068":"plays19 = pd.read_csv('\/kaggle\/input\/nfl-big-data-bowl-2022\/tracking2019.csv')\nplays19=plays19.head(10000)","100b4070":"fig = px.histogram(plays19,x=\"x\", width=400, height=400,nbins=50, title='X coordinate distribution')\nfig.show()\n\nfig = px.histogram( plays19,  x=\"y\",width=400,height=400,nbins=50,title='Y coordinate distribution')\nfig.show()\n\nfig = px.histogram( plays19, x=\"s\", width=400, height=400, nbins=50,title='Speed distribution')\nfig.show()\n\nfig = px.histogram(plays19,  x=\"a\", width=400, height=400,nbins=50,title='Acceleration distribution')\nfig.show()\n\nfig = px.histogram(plays19,x=\"dis\",width=400, height=400,nbins=50,title='Distance distribution (yards)')\nfig.show()\n\nfig = px.histogram(plays19,x=\"o\",width=400, height=400,nbins=50,title='Player orientation distribution')\nfig.show()\n\nfig = px.histogram(plays19,x=\"dir\",width=400,height=400,nbins=50,title='Angle of player motion distribution')\nfig.show()","78d73fcb":"plays20 = pd.read_csv('\/kaggle\/input\/nfl-big-data-bowl-2022\/tracking2020.csv')\nplays20=plays20.head(10000)","b44a0dee":"fig = px.histogram(plays20,x=\"x\", width=400, height=400,nbins=50, title='X coordinate distribution')\nfig.show()\n\nfig = px.histogram( plays20,  x=\"y\",width=400,height=400,nbins=50,title='Y coordinate distribution')\nfig.show()\n\nfig = px.histogram( plays20, x=\"s\", width=400, height=400, nbins=50,title='Speed distribution')\nfig.show()\n\nfig = px.histogram(plays20,  x=\"a\", width=400, height=400,nbins=50,title='Acceleration distribution')\nfig.show()\n\nfig = px.histogram(plays20,x=\"dis\",width=400, height=400,nbins=50,title='Distance distribution (yards)')\nfig.show()\n\nfig = px.histogram(plays20,x=\"o\",width=400, height=400,nbins=50,title='Player orientation distribution')\nfig.show()\n\nfig = px.histogram(plays20,x=\"dir\",width=400,height=400,nbins=50,title='Angle of player motion distribution')\nfig.show()","495b0ce8":"pff = pd.read_csv(r'..\/input\/nfl-big-data-bowl-2022\/PFFScoutingData.csv')\npff.head()","09ae9f55":"pff.info()","c3dc4011":"check = pff['kickType'].value_counts().reset_index()\ncheck.columns = ['type', 'plays']\ncheck = check.sort_values('plays')\nfig = px.pie(check,names='type',values=\"plays\",title='kick Type',height=500, width=800)\nfig.show()\n\ncheck = pff['kickDirectionIntended'].value_counts().reset_index()\ncheck.columns = ['type', 'plays']\ncheck = check.sort_values('plays')\nfig = px.pie(check,names='type',values=\"plays\",title='kick Direction Intended',height=500, width=800)\nfig.show()\n                 \ncheck = pff['kickDirectionActual'].value_counts().reset_index()\ncheck.columns = ['type', 'plays']\ncheck = check.sort_values('plays')\nfig = px.pie(check,names='type',values=\"plays\",title='kick Direction Actual',height=500, width=800)\nfig.show()\n\n\ncheck = pff['returnDirectionIntended'].value_counts().reset_index()\ncheck.columns = ['type', 'plays']\ncheck = check.sort_values('plays')\nfig = px.pie(check,names='type',values=\"plays\",title='return Direction Intended',height=500, width=800)\nfig.show()","71dae4dc":"#Thanks ","7a925b06":"<p style=\"padding: 10px;\n          color:#0000FF;\n          font-weight: bold;\n          text-align: center;\n          font-size:200%;\">\nPlayer Data\n     <\/p>","0f95e9c6":"<p>  \n    \n    Game data: The games.csv contains match information. The key variable is gameId. \n\n    GameId: Game identifier, unique (numeric)\n    \n    season: Year of the match\n    \n    week: week of the season\n    \n    gameDate: Game Date (time, mm\/dd\/yyyy)\n\n    gameTimeEastern: Start time of game (time, HH:MM:SS, EST)\n\n    homeTeamAbbr: Home team three-letter code (text)\n\n    visitorTeamAbbr: Visiting team three-letter code (text)\n<\/p>","0ced82fa":"<p style=\"padding: 10px;\n          color:#0000FF;\n          font-weight: bold;\n          text-align: center;\n          font-size:200%;\">\nPlay Data \n     <\/p>","22b4471c":"\n    Player data: The players.csv file contains player-level information. The key variable is nflId. There are 7 columns.\n\n    nflId: Player identification number\n\n    height: Player height \n\n    weight: Player weight \n\n    birthDate: Date of birth (YYYY-MM-DD)\n\n    collegeName: Player college \n\n    position: Player position \n\n    displayName: Player name \n\n","ba8e8ebf":"<p style=\"padding: 10px;\n          color:#0000FF;\n          font-weight: bold;\n          text-align: center;\n          font-size:200%;\">\nTracking Data 2019\n     <\/p>","02848452":"<p style=\"padding: 10px;\n          color:#0000FF;\n          font-weight: bold;\n          text-align: center;\n          font-size:200%;\">\nTracking Data 2020\n     <\/p>","7c9c516d":"Since, height column values are in feet as well as in cm. Converting all height values to feet.","7914ce02":"![image.png](attachment:481afbb6-9ae4-48a7-9917-be18dda70895.png)","fde18df9":"<p style=\"padding: 10px;\n          color:#0000FF;\n          font-weight: bold;\n          text-align: center;\n          font-size:200%;\">\nTracking Data 2018\n     <\/p>","f4797324":"<p style=\"padding: 10px;\n          color:#0000FF;\n          font-weight: bold;\n          text-align: center;\n          font-size:200%;\">\nPFFScouting Data\n     <\/p>","1ea8f5d6":"<p style=\"padding: 10px;\n          color:#0000FF;\n          font-weight: bold;\n          text-align: center;\n          font-size:200%;\">\nGame Data \n     <\/p>","33578290":"<p style=\"padding: 10px;\n          color:#0000FF;\n          font-weight: bold;\n          text-align: center;\n          font-size:260%;\">\nNFL Big Data Bowl 2022 EDA \n     <\/p>"}}