{"cell_type":{"18d83538":"code","ba2b0c9e":"code","618eadf9":"code","4bcc8dce":"code","55f338e4":"code","5daa290f":"code","f9a73bfe":"code","8c1903b3":"code","5d5ae5c3":"code","8f50f2c8":"code","406921c2":"code","b0a3d124":"code","0d9bf466":"code","d768d195":"code","43f550e6":"code","d1d34131":"code","86e6aa77":"code","5f3ea661":"code","83898da5":"code","938effc9":"code","138a5762":"code","5a300daa":"code","bebfe157":"code","232196af":"code","38539c41":"code","6aae4275":"code","a1a82dbc":"code","0fe52ddd":"code","e49c1f5f":"code","b74bff94":"code","fee500b6":"code","7ff5a9a6":"code","50c8d2ba":"code","bdd73375":"code","d0260a3e":"code","56601593":"code","260c3761":"code","6820cd08":"markdown","1767e8e4":"markdown","c0d42248":"markdown","d83bee96":"markdown","40053394":"markdown","7fa721fd":"markdown","3352e5f2":"markdown","9aeed201":"markdown","950b6349":"markdown","8a03dd17":"markdown","c5f1d3d3":"markdown","32a7629e":"markdown","81799a57":"markdown","428269b5":"markdown","b53dfbe5":"markdown","2a9c52b5":"markdown","d2b4e9ea":"markdown","e36dd3c4":"markdown","68a8927f":"markdown","daf513e8":"markdown","3ed5524d":"markdown","33c4754e":"markdown","dbaee07d":"markdown","c5dcd58e":"markdown","368a4686":"markdown","6083f5a7":"markdown","a76c9675":"markdown","dfae4987":"markdown","6b81d59a":"markdown","a2adb3a0":"markdown","714a6ab2":"markdown","11ffdf77":"markdown","12580075":"markdown","1f325b26":"markdown","5b889e1c":"markdown","405524d5":"markdown","84dc3497":"markdown","4aa691d5":"markdown","b7913d77":"markdown","65fa346d":"markdown","e8d6ae38":"markdown"},"source":{"18d83538":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ba2b0c9e":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')","618eadf9":"train = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")","4bcc8dce":"print(train.shape)\nprint(test.shape)","55f338e4":"train.head()","5daa290f":"train.info()","f9a73bfe":"train.describe()","8c1903b3":"#\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u578b\u306e\u8981\u7d20\u6570\u3001\u30e6\u30cb\u30fc\u30af\u6570\u3001\u6700\u983b\u5024\u306e\u51fa\u73fe\u56de\u6570\u3092\u8868\u793a\ntrain.describe(include='O')","5d5ae5c3":"# import pandas_profiling as pdp\n# pdp.ProfileReport(train)","8f50f2c8":"sns.pairplot(train)\nplt.show","406921c2":"display(pd.crosstab(train[\"Sex\"],train[\"Survived\"]))","b0a3d124":"display(pd.crosstab(train[\"Sex\"],train[\"Survived\"],normalize=\"index\"))","0d9bf466":"#\u6027\u5225\u5225\u306e\u751f\u5b58\u6570\ng = sns.countplot(x=\"Sex\", hue=\"Survived\", data=train)\n","d768d195":"#\u6027\u5225\u5225\u306e\u751f\u5b58\u7387 \ng = sns.factorplot(x=\"Sex\", y=\"Survived\", data=train, kind=\"bar\")\n","43f550e6":"\n# \u7b49\u7d1a\u5225\u306e\u751f\u5b58\u7387\ng = sns.factorplot(x=\"Pclass\", y=\"Survived\", data=train, size=6,kind=\"bar\")","d1d34131":"# \u7b49\u7d1a\u3001\u6027\u5225\u5225\u306e\u751f\u5b58\u7387\ng = sns.factorplot(x=\"Pclass\", y=\"Survived\", hue=\"Sex\", size=6, data=train, kind=\"bar\")","86e6aa77":"plt.figure(figsize=(8,6))\ncmap = sns.color_palette(\"coolwarm\", 200)\nsns.heatmap(train.corr(), square=True, annot=True, cmap=cmap)","5f3ea661":"sns.pairplot(train, x_vars=['Pclass'], y_vars=['Fare'])","83898da5":"train.groupby(\"Pclass\")[[\"Fare\"]].mean()\n","938effc9":"g=sns.FacetGrid(train,col=\"Survived\")\ng=g.map(sns.distplot,\"Age\")\ng.add_legend()","138a5762":"g=sns.FacetGrid(train,col=\"Sex\",hue=\"Survived\")\ng=g.map(sns.distplot,\"Age\")\ng.add_legend()\n","5a300daa":"train.isnull().sum()","bebfe157":"test.isnull().sum()","232196af":"train[\"Fare\"]=train[\"Fare\"].fillna(train[\"Fare\"].median())\ntrain[\"Age\"]=train[\"Age\"].fillna(train[\"Age\"].median())\ntrain[\"Embarked\"]=train[\"Embarked\"].fillna(\"S\")\n\ntest[\"Fare\"]=test[\"Fare\"].fillna(test[\"Fare\"].median())\ntest[\"Age\"]=test[\"Age\"].fillna(test[\"Age\"].median())\ntest[\"Embarked\"]=test[\"Embarked\"].fillna(\"S\")\n\ntest.isnull().sum()\n","38539c41":"train = pd.get_dummies(train, columns=[\"Sex\",\"Pclass\",\"Embarked\"])\ntest = pd.get_dummies(test, columns=[\"Sex\",\"Pclass\",\"Embarked\"])\n\ntrain.head()","6aae4275":"train[\"FamilyNum\"] = train[\"SibSp\"] + train[\"Parch\"]\ntrain[\"hasFamily\"] = train[\"FamilyNum\"].apply(lambda x : 1 if x >= 1 else 0)\ntrain = train.drop(labels = [\"SibSp\"], axis = 1)\ntrain = train.drop(labels = [\"Parch\"], axis = 1)\n\ntest[\"FamilyNum\"] = test[\"SibSp\"] + test[\"Parch\"]\ntest[\"hasFamily\"] = test[\"FamilyNum\"].apply(lambda x : 1 if x >= 1 else 0)\ntest = test.drop(labels = [\"SibSp\"], axis = 1)\ntest = test.drop(labels = [\"Parch\"], axis = 1)\n","a1a82dbc":"g = sns.factorplot(x=\"hasFamily\", y=\"Survived\", data=train,kind=\"bar\")","0fe52ddd":"#FamilyNum\u306e\u751f\u5b58\u7387\u3092\u78ba\u8a8d\ng=sns.FacetGrid(train,hue=\"Survived\")\ng=g.map(sns.distplot,\"FamilyNum\")\ng.add_legend()\n","e49c1f5f":"#\u4e0d\u8981\u30ab\u30e9\u30e0\u524a\u9664\ntrain = train.drop([\"PassengerId\", \"Name\", \"Ticket\", \"Cabin\"],axis=1)\ntest = test.drop([\"PassengerId\", \"Name\", \"Ticket\", \"Cabin\"],axis=1)\ntest.head()\n","b74bff94":"from sklearn.model_selection import train_test_split\n\ntrain_X = train.drop('Survived',axis = 1)\ntrain_y = train.Survived\n(X_train, X_test, y_train, y_test) = train_test_split(train_X, train_y , test_size = 0.3 , random_state = 0)\n\nprint(\"X_train:\"+str(X_train.shape))\nprint(\"X_test:\"+str(X_test.shape))\nprint(\"y_train:\"+str(y_train.shape))\nprint(\"y_test:\"+str(y_test.shape))\n","fee500b6":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import precision_score\nfrom sklearn.metrics import recall_score\n\n#\u30e2\u30c7\u30eb\u306e\u69cb\u7bc9\nrfc = RandomForestClassifier(random_state=0)\n#\u5b66\u7fd2\u30c7\u30fc\u30bf\u306b\u3066\u5b66\u7fd2\nrfc.fit(X_train, y_train)\n\n# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u3066\u4e88\u6e2c\ny_pred = rfc.predict(X_test)\nprint(y_pred)\n","7ff5a9a6":"#\u6b63\u89e3\u7387\nprint(f'accuracy:{accuracy_score(y_test, y_pred)}')\n#\u7684\u4e2d\u7387\nprint(f'precision:{precision_score(y_test, y_pred)}')\n#\u88dc\u8db3\u7387\nprint(f'recall:{recall_score(y_test, y_pred)}')\n#\u6df7\u540c\u884c\u5217\ncm = confusion_matrix(y_test, y_pred)\nprint(f'cm:{cm}')\n","50c8d2ba":"y_proba = rfc.predict_proba(X_test)\nprint(y_proba)\n","bdd73375":"y_pred = (rfc.predict_proba(X_test)[:, 0] < 0.5).astype(int)\nprint(f'score_Threshold=0.5')\nprint(f'precision:{precision_score(y_test, y_pred)}')\nprint(f'recall:{recall_score(y_test, y_pred)}')\n\ny_pred = (rfc.predict_proba(X_test)[:, 0] < 0.6).astype(int)\nprint(f'score_Threshold=0.6')\nprint(f'precision:{precision_score(y_test, y_pred)}')\nprint(f'recall:{recall_score(y_test, y_pred)}')\n\ny_pred = (rfc.predict_proba(X_test)[:, 0] < 0.7).astype(int)\nprint(f'score_Threshold=0.7')\nprint(f'precision:{precision_score(y_test, y_pred)}')\nprint(f'recall:{recall_score(y_test, y_pred)}')\n","d0260a3e":"from sklearn import metrics\nfpr, tpr, thresholds = metrics.roc_curve(y_test, y_proba[:,1])\nauc = metrics.auc(fpr, tpr)\nplt.plot(fpr, tpr, label='ROC curve (area = %.2f)'%auc)\nplt.legend()\nplt.xlabel('FPR: False positive rate')\nplt.ylabel('TPR: True positive rate')\nplt.grid()\nplt.show()\n","56601593":"plt.figure(figsize=(20,10))\nplt.barh(\n    X_train.columns[np.argsort(rfc.feature_importances_)],\n    rfc.feature_importances_[np.argsort(rfc.feature_importances_)],\n     label='RandomForestClassifier'\n )\nplt.title('RandomForestClassifier feature importance')\n","260c3761":"# \u3010\u53c2\u8003\u3011\u30b9\u30b3\u30a2\u63d0\u51fa\n# test_hon = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\n# 'PassengerId'\u3092\u62bd\u51fa\u3059\u308b(\u7d50\u679c\u3068\u7d50\u5408\u3059\u308b\u305f\u3081)\n# test_index = test_hon.loc[:, ['PassengerId']]\n# x_test_hon = test.values\n# y_test_hon = rfc.predict(x_test_hon)\n# PassengerId \u306eDataFrame\u3068\u7d50\u679c\u3092\u7d50\u5408\u3059\u308b\n# df_output = pd.concat([test_index, pd.DataFrame(y_test_hon, columns=['Survived'])], axis=1)\n# result.csv\u3092\u30ab\u30ec\u30f3\u30c8\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u66f8\u304d\u8fbc\u3080\n# df_output.to_csv('result.csv', index=False)","6820cd08":"\u30af\u30ed\u30b9\u96c6\u8a08(\u6027\u5225\u5225\u306e\u751f\u5b58\u6570)","1767e8e4":"* \u30ab\u30c6\u30b4\u30ea\u5909\u6570\u3092One-hot encoding\u306b\u3066\u30c0\u30df\u30fc\u5909\u6570\u5316","c0d42248":"* \u6b20\u640d\u5024\u306e\u78ba\u8a8d(\u5b66\u7fd2\u30c7\u30fc\u30bf)","d83bee96":"* \u7b49\u7d1a\u3001\u6027\u5225\u5225\u306e\u751f\u5b58\u7387\u3092\u78ba\u8a8d\n","40053394":"* \u6027\u5225\u5225\u306e\u751f\u5b58\u7387\u3092\u78ba\u8a8d","7fa721fd":"* \u6b20\u640d\u5024\u51e6\u7406","3352e5f2":"* \u5b66\u7fd2\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306b\u8aad\u307f\u8fbc\u307f","9aeed201":"* \u5b66\u7fd2\u30c7\u30fc\u30bf\u306e\u6570\u5024\u9805\u76ee\u306e\u7d71\u8a08\u8981\u7d04\u91cf\u3092\u8868\u793a","950b6349":"* pandas-profiling\u3092\u4f7f\u7528\u3057\u30c7\u30fc\u30bf\u6982\u8981\u3092\u4e00\u62ec\u78ba\u8a8d","8a03dd17":"* \u6b63\u89e3\u7387\u3001\u7684\u4e2d\u7387\u3001\u88dc\u8db3\u7387\u3001\u6df7\u540c\u884c\u5217\u3092\u8868\u793a","c5f1d3d3":"* FamilyNum\u306e\u751f\u5b58\u7387\u3092\u78ba\u8a8d","32a7629e":"# \u3010\u6f14\u7fd2\u3011\u30c7\u30fc\u30bf\u306e\u63a2\u7d22","81799a57":"* \u5e74\u9f62\u5225\u306e\u751f\u5b58\u7387\u3092\u78ba\u8a8d","428269b5":"* \u5e74\u9f62\u5225\u3001\u6027\u5225\u5225\u306e\u751f\u5b58\u7387\u3092\u78ba\u8a8d","b53dfbe5":"* \u30af\u30ed\u30b9\u96c6\u8a08(\u6027\u5225\u5225\u306e\u751f\u5b58\u7387)","2a9c52b5":"* \u4e88\u6e2c\u78ba\u7387\u3092\u5143\u306bROC\u30ab\u30fc\u30d6\u3092\u4f5c\u6210","d2b4e9ea":"\u5b66\u7fd2\u30c7\u30fc\u30bf\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u578b\u306e\u30ec\u30b3\u30fc\u30c9\u6570\u3001\u30e6\u30cb\u30fc\u30af\u6570\u3001\u6700\u983b\u5024\u306e\u51fa\u73fe\u56de\u6570\u3092\u8868\u793a","e36dd3c4":"# \u3010\u6f14\u7fd2\u3011\u6b20\u640d\u5024\u51e6\u7406","68a8927f":"* \u6563\u5e03\u56f3(Fare\u3068Pclass)","daf513e8":"* \u30d5\u30a9\u30fc\u30eb\u30c9\u30a2\u30a6\u30c8\u6cd5\u306b\u3088\u308a\u3001\u5b66\u7fd2\u30c7\u30fc\u30bf\u3092\u5b66\u7fd2\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b7:3\u306b\u5206\u5272","3ed5524d":"# \u3010\u6f14\u7fd2\u3011\u65b0\u305f\u306a\u7279\u5fb4\u91cf\u306e\u4f5c\u6210","33c4754e":"* \u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u306b\u3066\u5b66\u7fd2\u3092\u884c\u3044\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3067\u306e\u4e88\u6e2c\u7d50\u679c\u3092\u8868\u793a","dbaee07d":"* hasFamily\u306e\u751f\u5b58\u7387\u3092\u78ba\u8a8d","c5dcd58e":"# \u3010\u6f14\u7fd2\u3011\u91cd\u8981\u5ea6\u306e\u78ba\u8a8d","368a4686":"* \u5fc5\u8981\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\n ","6083f5a7":"* \u76f8\u95a2\u95a2\u4fc2\u306e\u30d2\u30fc\u30c8\u30de\u30c3\u30d7","a76c9675":"* \u65b0\u305f\u306a\u7279\u5fb4\u91cf\u3092\u4f5c\u6210","dfae4987":"* \u5b66\u7fd2\u30c7\u30fc\u30bf\u306e\u30c7\u30fc\u30bf\u8868\u793a(\u6700\u521d\u306e5\u884c\u76ee)","6b81d59a":"* \u30b9\u30b3\u30a2\u95be\u5024\u3092\u30c7\u30d5\u30a9\u30eb\u30c8(0.5)\u304b\u3089\u5909\u66f4\u3057\u305f\u969b\u306e\u7684\u4e2d\u7387\u3068\u88dc\u8db3\u7387\u306e\u63a8\u79fb","a2adb3a0":"# \u3010\u6f14\u7fd2\u3011\u4e0d\u8981\u30ab\u30e9\u30e0\u524a\u9664","714a6ab2":"* \u5b66\u7fd2\u30c7\u30fc\u30bf\u306e\u30c7\u30fc\u30bf\u5b9a\u7fa9\u3092\u78ba\u8a8d","11ffdf77":"* \u4e88\u6e2c\u78ba\u7387\u3092\u8868\u793a","12580075":"* \u6563\u5e03\u56f3\u884c\u5217(\u5168\u5909\u6570\u306e\u7d44\u307f\u5408\u308f\u305b)","1f325b26":"* \u5b66\u7fd2\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u30ec\u30b3\u30fc\u30c9\u6570\u3068\u30ab\u30e9\u30e0\u6570\u3092\u78ba\u8a8d","5b889e1c":"* \u4e0d\u8981\u30ab\u30e9\u30e0\u3092\u524a\u9664","405524d5":"# \u3010\u6f14\u7fd2\u3011\u30d5\u30a9\u30fc\u30eb\u30c9\u30a2\u30a6\u30c8\u6cd5","84dc3497":"# \u3010\u6f14\u7fd2\u3011\u30e2\u30c7\u30eb\u5b66\u7fd2","4aa691d5":"* RandamForest\u306e\u91cd\u8981\u5ea6\u3092\u78ba\u8a8d","b7913d77":"# \u3010\u6f14\u7fd2\u3011\u30ab\u30c6\u30b4\u30ea\u30c7\u30fc\u30bf\u306e\u51e6\u7406","65fa346d":"* \u6027\u5225\u5225\u306e\u751f\u5b58\u6570\u3092\u78ba\u8a8d","e8d6ae38":"* \u6b20\u640d\u5024\u306e\u78ba\u8a8d(\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf)"}}