{"cell_type":{"0a221e3c":"code","5c0829a3":"code","e1e834c8":"code","8ec2a878":"code","44d91fdc":"code","2746a1cf":"code","b4ec84ca":"code","70abae26":"code","bcbb0e9a":"code","542baa19":"code","6891c95a":"code","66d8a6c1":"code","2886e799":"code","6f092928":"code","afea007a":"code","fe9324ce":"code","f1030db2":"code","4ec7d696":"code","ffd2c7cc":"code","b462c362":"code","78548516":"code","c7f24dd1":"code","7b1c8730":"code","14288175":"code","15e64280":"code","7b474d1b":"code","a9c4fea1":"code","bb38864d":"code","f0bc39c0":"code","22a390a5":"code","55599aa3":"code","94635ae7":"code","50035a86":"code","1031941c":"code","6dc8cbde":"code","449e4d0d":"code","d7b4fc52":"code","26a8cd3e":"code","2d18cecb":"code","628651ce":"code","1c3d813d":"code","d9bb677f":"code","7acd9140":"code","d7cf7db3":"code","66711e69":"code","40aab8cd":"code","849fc481":"code","a855e03d":"code","9d1b7326":"code","62b35dbd":"code","6bba3ee6":"code","74ffc484":"code","41f178ef":"code","ad72d83b":"code","73198317":"code","adab7a7d":"code","25a46c7a":"code","5b9f8a95":"code","92332781":"code","da19827c":"code","7e193086":"code","07ddae88":"code","cbaa6419":"code","0fbb6177":"code","9720f8d4":"code","81a06ff6":"code","bf3dd87d":"code","7a1ba6a6":"code","64f48322":"code","8bf6df7e":"code","81c5a7c5":"code","44d186ac":"code","b6a5515b":"code","7b15e200":"code","8a624a37":"code","17928475":"code","9b4c09f9":"code","c5825e44":"code","0f40e1e0":"code","f6ca2b2a":"code","e13d16df":"code","619d8213":"code","d8914478":"code","b459836d":"code","c6d45be7":"code","c028fbce":"code","2ebbbfad":"code","cd2f8943":"code","7140c275":"code","1ae83014":"code","6162ce24":"code","8cbb4162":"code","5c8c81ed":"code","0cb25452":"code","b8cbee8c":"code","5a556ea1":"code","a928c452":"code","d8a4c873":"code","b30d935d":"code","0fbb7f57":"code","0cc1176f":"code","ab6fea83":"code","d95c982d":"code","5505a4ff":"code","93aa043a":"code","d0e7ca4c":"code","1e23d444":"code","59fdca83":"code","3663f198":"code","0293466e":"code","cb7a12b6":"code","19768f31":"code","620f5e19":"code","1f158e8b":"code","46c7d016":"code","09bd5057":"code","8ae0fa61":"code","c3535663":"code","2c6cf5be":"code","65b3a5ac":"code","cb139d88":"code","eb5768b8":"code","45b965d9":"code","0fc47e41":"code","1ce4080a":"code","26c5d2e8":"code","df57adf9":"code","5ece8ef1":"code","32c62e64":"code","72b44c9e":"code","f83782ab":"code","cd456a14":"code","a2f3e5ad":"code","5f8542b9":"code","c6f098ce":"code","8a14c620":"code","23d0e7c6":"code","e6a99519":"code","00bf1204":"code","a7137536":"code","151560a6":"code","6ccbe7ff":"code","513990df":"code","2648a580":"code","dd3fad9b":"code","8c5b3f87":"code","e490b616":"code","a410263b":"code","21cec192":"code","b7926a65":"code","ecd73718":"code","f7b93dcb":"code","2c81b69d":"markdown","0f701235":"markdown","fc69a852":"markdown","ab01f97a":"markdown","a2a1ec7a":"markdown","6b31170e":"markdown","f951c2c5":"markdown","94cb543e":"markdown","9bd194c5":"markdown","d11e2ed6":"markdown","458fb5fd":"markdown","44174686":"markdown","70e45746":"markdown","5e8a3925":"markdown","1005e10e":"markdown","4e02a450":"markdown","bb721ea2":"markdown","92163387":"markdown","a53bb411":"markdown","2e4dc03e":"markdown","69e86daf":"markdown","31a4f86e":"markdown","366c28c9":"markdown"},"source":{"0a221e3c":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom warnings import filterwarnings\nfrom mpl_toolkits.mplot3d import Axes3D\nimport statsmodels.api as sm\nimport missingno as msno\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import scale\nfrom sklearn.neighbors import LocalOutlierFactor\nfrom scipy.stats import levene\nfrom scipy.stats import shapiro\nfrom scipy.stats.stats import pearsonr\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split, cross_val_score, cross_val_predict\nfrom sklearn.preprocessing import scale\nfrom sklearn.model_selection import ShuffleSplit, GridSearchCV\nfrom sklearn.metrics import mean_squared_error, r2_score\nfrom sklearn import model_selection\nfrom sklearn.tree import DecisionTreeClassifier, DecisionTreeRegressor\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import BaggingRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.neural_network import MLPRegressor\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.cross_decomposition import PLSRegression\nfrom sklearn.linear_model import Ridge\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import LassoCV\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.linear_model import ElasticNetCV\nfrom sklearn import linear_model\nfrom sklearn.ensemble import RandomForestRegressor, RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingRegressor, GradientBoostingClassifier\nimport xgboost as xgb\nfrom xgboost import XGBRegressor, XGBClassifier\nfrom lightgbm import LGBMRegressor, LGBMClassifier\nfrom catboost import CatBoostRegressor, CatBoostClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\nfrom sklearn import tree\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report, roc_auc_score, roc_curve\n\n#### for warnings\n\nfilterwarnings(\"ignore\", category=DeprecationWarning) \nfilterwarnings(\"ignore\", category=FutureWarning) \nfilterwarnings(\"ignore\", category=UserWarning)","5c0829a3":"Stroke = pd.read_csv(\"..\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv\") # main\nStroke = Stroke.drop(\"id\", axis=1)","e1e834c8":"Stroke[\"smoking_status\"] = Stroke[\"smoking_status\"].replace(\"Unknown\",np.NaN)","8ec2a878":"data = Stroke.copy() # to protect main data","44d91fdc":"df = data.select_dtypes(include=[\"float64\",\"int64\",\"int32\"])\n# for mathematical analysis, to guarantee even though it is not necessary","2746a1cf":"dataVisualization = data.copy() # for visualization\ndataVisualization[\"gender\"] = pd.Categorical(dataVisualization[\"gender\"])\ndataVisualization[\"hypertension\"] = pd.Categorical(dataVisualization[\"hypertension\"])\ndataVisualization[\"heart_disease\"] = pd.Categorical(dataVisualization[\"heart_disease\"])\ndataVisualization[\"ever_married\"] = pd.Categorical(dataVisualization[\"ever_married\"])\ndataVisualization[\"work_type\"] = pd.Categorical(dataVisualization[\"work_type\"])\ndataVisualization[\"Residence_type\"] = pd.Categorical(dataVisualization[\"Residence_type\"])\ndataVisualization[\"smoking_status\"] = pd.Categorical(dataVisualization[\"smoking_status\"])\ndataVisualization[\"stroke\"] = pd.Categorical(dataVisualization[\"stroke\"])","b4ec84ca":"print(data.head())","70abae26":"print(data.shape)","bcbb0e9a":"print(data.columns)","542baa19":"print(data.info())","6891c95a":"print(data.describe().T)","66d8a6c1":"print(df.corr())","2886e799":"print(df.cov())","6f092928":"print(data.groupby([\"stroke\"])[\"age\"].mean())","afea007a":"print(data.groupby([\"stroke\"])[\"bmi\"].mean())","fe9324ce":"print(data.groupby([\"stroke\"])[\"avg_glucose_level\"].mean())","f1030db2":"print(data.groupby([\"stroke\",\"hypertension\"])[\"age\"].mean())","4ec7d696":"print(data.groupby([\"stroke\",\"hypertension\"])[\"bmi\"].mean())","ffd2c7cc":"print(data.groupby([\"stroke\",\"hypertension\"])[\"avg_glucose_level\"].mean())","b462c362":"print(data.groupby([\"stroke\",\"heart_disease\"])[\"age\"].mean())","78548516":"print(data.groupby([\"stroke\",\"heart_disease\"])[\"bmi\"].mean())","c7f24dd1":"print(data.groupby([\"stroke\",\"heart_disease\"])[\"avg_glucose_level\"].mean())","7b1c8730":"print(data.groupby([\"stroke\",\"ever_married\"])[\"age\"].mean())","14288175":"print(data.groupby([\"stroke\",\"ever_married\"])[\"bmi\"].mean())","15e64280":"print(data.groupby([\"stroke\",\"ever_married\"])[\"avg_glucose_level\"].mean())","7b474d1b":"print(data.groupby([\"stroke\",\"work_type\"])[\"age\"].mean())","a9c4fea1":"print(data.groupby([\"stroke\",\"work_type\"])[\"bmi\"].mean())","bb38864d":"print(data.groupby([\"stroke\",\"work_type\"])[\"avg_glucose_level\"].mean())","f0bc39c0":"print(data.groupby([\"stroke\",\"Residence_type\"])[\"age\"].mean())","22a390a5":"print(data.groupby([\"stroke\",\"Residence_type\"])[\"bmi\"].mean())","55599aa3":"print(data.groupby([\"stroke\",\"Residence_type\"])[\"avg_glucose_level\"].mean())","94635ae7":"print(data.groupby([\"stroke\",\"smoking_status\"])[\"age\"].mean())","50035a86":"print(data.groupby([\"stroke\",\"smoking_status\"])[\"bmi\"].mean())","1031941c":"print(data.groupby([\"stroke\",\"smoking_status\"])[\"avg_glucose_level\"].mean())","6dc8cbde":"print(data[\"stroke\"].value_counts())","449e4d0d":"print(data[\"smoking_status\"].value_counts())","d7b4fc52":"print(data[\"hypertension\"].value_counts())","26a8cd3e":"print(data[\"heart_disease\"].value_counts())","2d18cecb":"print(data[\"ever_married\"].value_counts())","628651ce":"print(data[\"Residence_type\"].value_counts())","1c3d813d":"print(data.where(data[\"bmi\"] < data[\"bmi\"].mean()).value_counts().sum())","d9bb677f":"print(data.where(data[\"age\"] < 20).value_counts().sum())","7acd9140":"print(data.where(data[\"age\"] > 70).value_counts().sum())","d7cf7db3":"print(data.where(data[\"avg_glucose_level\"] > data[\"avg_glucose_level\"].mean()).value_counts().sum())","66711e69":"print(data.isnull().all())","40aab8cd":"print(data.isnull().sum())","849fc481":"msno.matrix(data,figsize=(8,5))\nplt.show()\n# missing relationship","a855e03d":"msno.bar(data,figsize=(8,5))\nplt.show()\n# missing counting","9d1b7326":"msno.heatmap(data,figsize=(8,5))\nplt.show()\n# missing correlation","62b35dbd":"data[\"bmi\"].fillna(data.groupby([\"age\"])[\"bmi\"].transform(\"mean\"),\n                   inplace=True)\n# best focus is age\nprint(data[\"bmi\"].isnull().sum())","6bba3ee6":"data[\"smoking_status\"].fillna(data[\"smoking_status\"].mode()[0],\n                   inplace=True)\nprint(data[\"smoking_status\"].isnull().sum())","74ffc484":"print(data.isnull().sum())","41f178ef":"encode = LabelEncoder()","ad72d83b":"print(data[\"smoking_status\"].value_counts())\nprint(\"---\"*20)\ndata[\"smoking_status\"] = encode.fit_transform(data[\"smoking_status\"])\nprint(data[\"smoking_status\"].value_counts())","73198317":"print(data[\"Residence_type\"].value_counts())\nprint(\"---\"*20)\ndata[\"Residence_type\"] = encode.fit_transform(data[\"Residence_type\"])\nprint(data[\"Residence_type\"].value_counts())","adab7a7d":"print(data[\"work_type\"].value_counts())\nprint(\"---\"*20)\ndata[\"work_type\"] = encode.fit_transform(data[\"work_type\"])\nprint(data[\"work_type\"].value_counts())","25a46c7a":"print(data[\"ever_married\"].value_counts())\nprint(\"---\"*20)\ndata[\"ever_married\"] = encode.fit_transform(data[\"ever_married\"])\nprint(data[\"ever_married\"].value_counts())","5b9f8a95":"print(data[\"heart_disease\"].value_counts())\nprint(\"---\"*20)\ndata[\"heart_disease\"] = encode.fit_transform(data[\"heart_disease\"])\nprint(data[\"heart_disease\"].value_counts())","92332781":"print(data[\"hypertension\"].value_counts())\nprint(\"---\"*20)\ndata[\"hypertension\"] = encode.fit_transform(data[\"hypertension\"])\nprint(data[\"hypertension\"].value_counts())","da19827c":"print(data[\"gender\"].value_counts())\nprint(\"---\"*20)\ndata[\"gender\"] = encode.fit_transform(data[\"gender\"])\nprint(data[\"gender\"].value_counts())","7e193086":"print(data.info())\n# checking again","07ddae88":"DataForA = data.copy() # to protect main","cbaa6419":"clf = LocalOutlierFactor()\nclf.fit_predict(DataForA)","0fbb6177":"score = clf.negative_outlier_factor_","9720f8d4":"sortedscore = np.sort(score)","81a06ff6":"print(sortedscore[0:50])\n# checking outlier, look where the biggest jump took place\n# we can identify 2.index as point","bf3dd87d":"point = sortedscore[2]\nprint(point)\nprint(DataForA[score == point])","7a1ba6a6":"outlier = DataForA < point","64f48322":"normal = DataForA > point","8bf6df7e":"print(DataForA[outlier].value_counts().sum())\n# checking outlier","81c5a7c5":"print(DataForA[normal].value_counts().sum())\n# checking normal","44d186ac":"corrPearson = data.corr(method=\"pearson\")","b6a5515b":"corrSpearman = data.corr(method=\"spearman\")","7b15e200":"figure = plt.figure(figsize=(15,8))\nsns.heatmap(corrPearson,annot=True,vmin=-1,center=0,vmax=1)\nplt.title(\"PEARSON\")\nplt.xlabel(\"COLUMNS\")\nplt.xlabel(\"COLUMNS\")\nplt.show()","8a624a37":"figure = plt.figure(figsize=(15,8))\nsns.heatmap(corrSpearman,annot=True,vmin=-1,center=0,vmax=1)\nplt.title(\"SPEARMAN\")\nplt.xlabel(\"COLUMNS\")\nplt.xlabel(\"COLUMNS\")\nplt.show()","17928475":"print(data[\"stroke\"].corr(data[\"age\"],method=\"pearson\"))\nprint(data[\"stroke\"].corr(data[\"age\"],method=\"spearman\"))","9b4c09f9":"print(data[\"stroke\"].corr(data[\"ever_married\"],method=\"pearson\"))\nprint(data[\"stroke\"].corr(data[\"ever_married\"],method=\"spearman\"))","c5825e44":"print(data[\"stroke\"].corr(data[\"work_type\"],method=\"pearson\"))\nprint(data[\"stroke\"].corr(data[\"work_type\"],method=\"spearman\"))","0f40e1e0":"print(data[\"stroke\"].corr(data[\"heart_disease\"],method=\"pearson\"))\nprint(data[\"stroke\"].corr(data[\"heart_disease\"],method=\"spearman\"))","f6ca2b2a":"print(data[\"stroke\"].corr(data[\"hypertension\"],method=\"pearson\"))\nprint(data[\"stroke\"].corr(data[\"hypertension\"],method=\"spearman\"))","e13d16df":"print(data[\"stroke\"].corr(data[\"Residence_type\"],method=\"pearson\"))\nprint(data[\"stroke\"].corr(data[\"Residence_type\"],method=\"spearman\"))","619d8213":"print(data[\"stroke\"].corr(data[\"smoking_status\"],method=\"pearson\"))\nprint(data[\"stroke\"].corr(data[\"smoking_status\"],method=\"spearman\"))","d8914478":"print(data[\"stroke\"].corr(data[\"avg_glucose_level\"],method=\"pearson\"))\nprint(data[\"stroke\"].corr(data[\"avg_glucose_level\"],method=\"spearman\"))","b459836d":"print(data[\"stroke\"].corr(data[\"bmi\"],method=\"pearson\"))\nprint(data[\"stroke\"].corr(data[\"bmi\"],method=\"spearman\"))","c6d45be7":"print(data[\"stroke\"].corr(data[\"gender\"],method=\"pearson\"))\nprint(data[\"stroke\"].corr(data[\"gender\"],method=\"spearman\"))","c028fbce":"covv = data.cov()","2ebbbfad":"figure = plt.figure(figsize=(15,8))\nsns.heatmap(covv,annot=True,vmin=-1,center=0,vmax=1)\nplt.title(\"COVARIANCE\")\nplt.xlabel(\"COLUMNS\")\nplt.xlabel(\"COLUMNS\")\nplt.show()","cd2f8943":"for i in data.columns:\n    print(i)\n    print(\"---\"*5)\n    print(\"%.4f - %.4f\" % shapiro(data[i]))\n    print(\"-----\"*20)","7140c275":"print(\"%.4f - %.4f\" % levene(data[\"stroke\"],data[\"smoking_status\"],data[\"work_type\"]))","1ae83014":"print(\"%.4f - %.4f\" % levene(data[\"stroke\"],data[\"bmi\"],data[\"avg_glucose_level\"]))","6162ce24":"print(\"%.4f - %.4f\" % levene(data[\"stroke\"],data[\"ever_married\"],data[\"heart_disease\"]))","8cbb4162":"print(\"%.4f - %.4f\" % levene(data[\"stroke\"],data[\"age\"],data[\"hypertension\"]))","5c8c81ed":"data.hist(figsize=(20,8))\nplt.show()","0cb25452":"figure = plt.figure(figsize=(15,8))\nsns.pairplot(data,hue=\"stroke\")\nplt.show()","b8cbee8c":"figure = plt.figure(figsize=(15,8))\nsns.scatterplot(x=\"avg_glucose_level\",y=\"bmi\",hue=\"stroke\",data=data)\nplt.show()","5a556ea1":"figure = plt.figure(figsize=(15,8))\nsns.scatterplot(x=\"avg_glucose_level\",y=\"age\",hue=\"stroke\",data=data)\nplt.show()","a928c452":"figure = plt.figure(figsize=(15,8))\nsns.scatterplot(x=\"bmi\",y=\"age\",hue=\"stroke\",data=data)\nplt.show()","d8a4c873":"figure = plt.figure(figsize=(15,8))\nsns.lineplot(x=\"bmi\",y=\"age\",hue=\"stroke\",data=data)\nplt.show()","b30d935d":"figure = plt.figure(figsize=(15,8))\nsns.lineplot(x=\"avg_glucose_level\",y=\"age\",hue=\"stroke\",data=data)\nplt.show()","0fbb7f57":"figure = plt.figure(figsize=(15,8))\nsns.lineplot(x=\"ever_married\",y=\"age\",hue=\"stroke\",data=data)\nplt.show()","0cc1176f":"figure = plt.figure(figsize=(15,8))\nsns.lineplot(x=\"heart_disease\",y=\"age\",hue=\"stroke\",data=data)\nplt.show()","ab6fea83":"figure = plt.figure(figsize=(15,8))\nsns.lineplot(x=\"work_type\",y=\"age\",hue=\"stroke\",data=data)\nplt.show()","d95c982d":"figure = plt.figure(figsize=(15,8))\nsns.lineplot(x=\"smoking_status\",y=\"age\",hue=\"stroke\",data=data)\nplt.show()","5505a4ff":"figure = plt.figure(figsize=(15,8))\nsns.lineplot(x=\"work_type\",y=\"hypertension\",hue=\"stroke\",data=data)\nplt.show()","93aa043a":"figure = plt.figure(figsize=(15,8))\nsns.lineplot(x=\"stroke\",y=\"hypertension\",data=data)\nplt.show()","d0e7ca4c":"figure = plt.figure(figsize=(15,8))\nsns.lineplot(x=\"stroke\",y=\"heart_disease\",data=data)\nplt.show()","1e23d444":"figure = plt.figure(figsize=(15,8))\nsns.lineplot(x=\"stroke\",y=\"smoking_status\",data=data)\nplt.show()","59fdca83":"figure = plt.figure(figsize=(15,8))\nsns.boxplot(x=\"stroke\",y=\"avg_glucose_level\",data=dataVisualization)\nplt.show()","3663f198":"figure = plt.figure(figsize=(15,8))\nsns.boxplot(x=\"stroke\",y=\"bmi\",data=dataVisualization)\nplt.show()","0293466e":"figure = plt.figure(figsize=(15,8))\nsns.boxplot(x=\"heart_disease\",y=\"bmi\",hue=\"stroke\",data=dataVisualization)\nplt.show()","cb7a12b6":"figure = plt.figure(figsize=(15,8))\nsns.boxplot(x=\"smoking_status\",y=\"bmi\",hue=\"stroke\",data=dataVisualization)\nplt.show()","19768f31":"figure = plt.figure(figsize=(15,8))\nsns.boxplot(x=\"work_type\",y=\"bmi\",hue=\"stroke\",data=dataVisualization)\nplt.show()","620f5e19":"figure = plt.figure(figsize=(15,8))\nsns.boxplot(x=\"heart_disease\",y=\"avg_glucose_level\",hue=\"stroke\",data=dataVisualization)\nplt.show()","1f158e8b":"figure = plt.figure(figsize=(15,8))\nsns.boxplot(x=\"smoking_status\",y=\"avg_glucose_level\",hue=\"stroke\",data=dataVisualization)\nplt.show()","46c7d016":"figure = plt.figure(figsize=(15,8))\nsns.boxplot(x=\"work_type\",y=\"avg_glucose_level\",hue=\"stroke\",data=dataVisualization)\nplt.show()","09bd5057":"figure = plt.figure(figsize=(15,8))\nsns.boxplot(x=\"hypertension\",y=\"avg_glucose_level\",hue=\"stroke\",data=dataVisualization)\nplt.show()","8ae0fa61":"data.boxplot(by=\"stroke\",figsize=(15,8))\nplt.show()","c3535663":"figure = plt.figure(figsize=(15,8))\nsns.histplot(\n    data,\n    x=\"bmi\", hue=\"stroke\",\n    multiple=\"stack\",\n    palette=\"light:m_r\",\n    edgecolor=\".3\",\n    linewidth=.5,\n    log_scale=True,\n)\nplt.show()","2c6cf5be":"figure = plt.figure(figsize=(15,8))\nsns.histplot(\n    data,\n    x=\"avg_glucose_level\", hue=\"stroke\",\n    multiple=\"stack\",\n    palette=\"light:m_r\",\n    edgecolor=\".3\",\n    linewidth=.5,\n    log_scale=True,\n)\nplt.show()","65b3a5ac":"figure = plt.figure(figsize=(20,8))\nsns.barplot(x=\"work_type\",y=\"stroke\", color=\"#4CB391\",data=data)\nplt.show()","cb139d88":"figure = plt.figure(figsize=(20,8))\nsns.barplot(x=\"smoking_status\",y=\"stroke\", color=\"#4CB391\",data=data)\nplt.show()","eb5768b8":"figure = plt.figure(figsize=(20,8))\nsns.barplot(x=\"heart_disease\",y=\"stroke\", color=\"#4CB391\",data=data)\nplt.show()","45b965d9":"figure = plt.figure(figsize=(20,8))\nsns.barplot(x=\"ever_married\",y=\"stroke\", color=\"#4CB391\",data=data)\nplt.show()","0fc47e41":"figure = plt.figure(figsize=(20,8))\nsns.distplot(data[data['stroke'] == 0][\"avg_glucose_level\"], color='black',label='No') \nsns.distplot(data[data['stroke'] == 1][\"avg_glucose_level\"], color='red',label='Yes')\nplt.title('stroke', fontsize=10)\nplt.legend()","1ce4080a":"figure = plt.figure(figsize=(20,8))\nsns.distplot(data[data['stroke'] == 0][\"bmi\"], color='black',label='No') \nsns.distplot(data[data['stroke'] == 1][\"bmi\"], color='green',label='Yes')\nplt.title('stroke', fontsize=10)\nplt.legend()","26c5d2e8":"figure = plt.figure(figsize=(20,8))\nsns.distplot(data[data['stroke'] == 0][\"heart_disease\"], color='black',label='No') \nsns.distplot(data[data['stroke'] == 1][\"heart_disease\"], color='blue',label='Yes')\nplt.title('stroke', fontsize=10)\nplt.legend()","df57adf9":"figure = plt.figure(figsize=(20,8))\nsns.distplot(data[data['stroke'] == 0][\"hypertension\"], color='black',label='No') \nsns.distplot(data[data['stroke'] == 1][\"hypertension\"], color='purple',label='Yes')\nplt.title('stroke', fontsize=10)\nplt.legend()","5ece8ef1":"g = sns.JointGrid(data=data, x=\"avg_glucose_level\", y=\"stroke\", space=0)\ng.plot_joint(sns.kdeplot,cmap=\"rocket\")\nplt.show()","32c62e64":"g = sns.JointGrid(data=data, x=\"bmi\", y=\"stroke\", space=0)\ng.plot_joint(sns.kdeplot,cmap=\"rocket\")\nplt.show()","72b44c9e":"g = sns.JointGrid(data=data, x=\"work_type\", y=\"heart_disease\", space=0)\ng.plot_joint(sns.kdeplot,cmap=\"rocket\")\nplt.show()","f83782ab":"g = sns.JointGrid(data=data, x=\"ever_married\", y=\"heart_disease\", space=0)\ng.plot_joint(sns.kdeplot,cmap=\"rocket\")\nplt.show()","cd456a14":"data['stroke'].value_counts().plot.pie(autopct='%1.1f%%',shadow=True,figsize=(15,8))\nplt.show()","a2f3e5ad":"data['heart_disease'].value_counts().plot.pie(autopct='%1.1f%%',shadow=True,figsize=(15,8))\nplt.show()","5f8542b9":"data['work_type'].value_counts().plot.pie(autopct='%1.1f%%',shadow=True,figsize=(15,8))\nplt.show()","c6f098ce":"data['smoking_status'].value_counts().plot.pie(autopct='%1.1f%%',shadow=True,figsize=(15,8))\nplt.show()","8a14c620":"data['ever_married'].value_counts().plot.pie(autopct='%1.1f%%',shadow=True,figsize=(15,8))\nplt.show()","23d0e7c6":"figure = plt.figure(figsize=(20,8))\nsns.jointplot(x=\"bmi\",y=\"avg_glucose_level\", kind='hex' ,data=data)\nplt.show()","e6a99519":"fig = plt.figure(figsize=(20,10))\nax = Axes3D(fig)\nax.scatter(data[\"avg_glucose_level\"], data[\"bmi\"], data[\"stroke\"], c=\"black\", s=80, alpha=0.5)\nplt.show()","00bf1204":"fig = plt.figure(figsize=(20,10))\nax = Axes3D(fig)\nax.scatter(data[\"avg_glucose_level\"], data[\"bmi\"], data[\"heart_disease\"], c=\"red\", s=80, alpha=0.5)\nplt.show()","a7137536":"x = data.drop(\"stroke\",axis=1)\ny = data[\"stroke\"]","151560a6":"xTrain,xTest,yTrain,yTest = train_test_split(x,y,test_size=0.25,random_state=42)","6ccbe7ff":"lj = LogisticRegression(solver=\"liblinear\").fit(xTrain,yTrain)\ngnb = GaussianNB().fit(xTrain,yTrain)\nknnc = KNeighborsClassifier().fit(xTrain,yTrain)\ncartc = DecisionTreeClassifier(random_state=42).fit(xTrain,yTrain)\nrfc = RandomForestClassifier(random_state=42,verbose=False).fit(xTrain,yTrain)\ngbmc = GradientBoostingClassifier(verbose=False).fit(xTrain,yTrain)\nxgbc = XGBClassifier().fit(xTrain,yTrain)\nlgbmc = LGBMClassifier().fit(xTrain,yTrain)\ncatbc = CatBoostClassifier(verbose=False).fit(xTrain,yTrain)","513990df":"modelsc = [lj,gnb,knnc,cartc,rfc,gbmc,xgbc,lgbmc,catbc]","2648a580":"for model in modelsc:\n    name = model.__class__.__name__\n    predict = model.predict(xTest)\n    R2CV = cross_val_score(model,xTest,yTest,cv=10,verbose=False).mean()\n    error = -cross_val_score(model,xTest,yTest,cv=10,scoring=\"neg_mean_squared_error\",verbose=False).mean()\n    roc = roc_curve(yTest,predict)\n    print(name + \": \")\n    print(\"-\" * 10)\n    print(\"ACC-->\",accuracy_score(yTest,predict))\n    print(\"R2CV-->\",R2CV)\n    print(\"MEAN SQUARED ERROR-->\",np.sqrt(error))\n    print(\"ROC-->\",roc)\n    print(\"-\" * 30)","dd3fad9b":"r = pd.DataFrame(columns=[\"MODELS\",\"R2CV\"])\nfor model in modelsc:\n    name = model.__class__.__name__\n    R2CV = cross_val_score(model,xTest,yTest,cv=10,verbose=False).mean()\n    result = pd.DataFrame([[name,R2CV*100]],columns=[\"MODELS\",\"R2CV\"])\n    r = r.append(result)\n    \nfigure = plt.figure(figsize=(20,8))   \nsns.barplot(x=\"R2CV\",y=\"MODELS\",data=r,color=\"k\")\nplt.xlabel(\"R2CV\")\nplt.ylabel(\"MODELS\")\nplt.xlim(0,100)\nplt.title(\"MODEL ACCURACY COMPARISON\")\nplt.show()","8c5b3f87":"r = pd.DataFrame(columns=[\"MODELS\",\"error\"])\nfor model in modelsc:\n    name = model.__class__.__name__\n    error = -cross_val_score(model,xTest,yTest,cv=10,scoring=\"neg_mean_squared_error\").mean()\n    result = pd.DataFrame([[name,np.sqrt(error)]],columns=[\"MODELS\",\"error\"])\n    r = r.append(result)\n    \nfigure = plt.figure(figsize=(20,8))   \nsns.barplot(x=\"error\",y=\"MODELS\",data=r,color=\"r\")\nplt.xlabel(\"ERROR\")\nplt.ylabel(\"MODELS\")\nplt.xlim(0,1)\nplt.title(\"MODEL ERROR COMPARISON\")\nplt.show()","e490b616":"scaler = StandardScaler().fit(xTrain,yTrain)\nxRTrain = scaler.transform(xTrain)\nxRTest = scaler.transform(xTest)","a410263b":"mlpc = MLPClassifier().fit(xRTrain,yTrain)\npredict = mlpc.predict(xRTest)\n\nR2CV = cross_val_score(mlpc,xRTest,yTest,cv=10).mean()\nprint(R2CV)\nerror = -cross_val_score(mlpc,xRTest,yTest,cv=10,scoring=\"neg_mean_squared_error\").mean()\nprint(np.sqrt(error))","21cec192":"loj = sm.Logit(yTrain,xTrain).fit()\nprint(loj.summary())","b7926a65":"params = {\"max_depth\": [2, 5, 8, 10],\n          \"max_features\": [2, 5, 8],\n          \"n_estimators\": [10, 500, 1000],\n          \"min_samples_split\": [2, 5, 10]}","ecd73718":"cv = GridSearchCV(rfc,params,cv=10,verbose=False,n_jobs=-1).fit(xTrain,yTrain)\nprint(cv.best_params_)\nprint(cv.best_score_)","f7b93dcb":"Importance = pd.DataFrame({\"Importance\": rfc.feature_importances_ * 100},\n                          index=xTrain.columns)\n\n\nImportance.sort_values(by=\"Importance\", axis=0, ascending=True).plot(kind=\"barh\", color=\"r\")\nplt.show()","2c81b69d":"# ENCODING","0f701235":"# EXPLORATORY DATA ANALYSIS","fc69a852":"# HISTORY\n\n* id: Unique identifier\n* gender: Male, Female, Other\n* age: Age of the patient\n* hypertension: 0 - doesn't have hypertension, 1 - has hypertension\n* heart_disease: 0 - doesn't have any heart diseases, 1 - has a heart disease\n* ever_married: No or Yes\n* work_type: children, Govt_jov, Never_worked, Private, Self-employed\n* Residence_type: Rural or Urban\n* avg_glucose_level: Average glucose level in blood\n* bmi: Body mass index\n* smoking_status: formerly smoked, never smoked, smokes or Unknown\n* stroke: 1 - had a stroke, 0 - not\n\n#### PROCESS\n\n* id - we don't need, because we will focus on \"had a stroke\" or \"not\"\n* gender, hypertension, heart_disease, ever_married, work_type, Residence_type, smoking_status, stroke, we will set them as a category for visualization\n* Unknown(smoke) will be set as NaN\n* stroke is target for our models","ab01f97a":"# RANDOM FOREST TUNING","a2a1ec7a":"# MISSING VALUE","6b31170e":"#### Random Forest Importance","f951c2c5":"#### NORMALITY","94cb543e":"# MODEL PROCESS FOR CLASSIFICATION","9bd194c5":"# CORRELATION - COVARIANCE - NORMALITY - HOMOGENEITY","d11e2ed6":"#### LOGIT - ADDITIONAL","458fb5fd":"#### X & Y","44174686":"# VISUALIZATION","70e45746":"#### CORRELATION","5e8a3925":"> BEST IS RandomForestClassifier -- > 0.9381","1005e10e":"#### HOMOGENEITY","4e02a450":"# DATA PROCESS","bb721ea2":"#### MODELS","92163387":"#### CNN - ADDITIONAL","a53bb411":"# OUTLIER","2e4dc03e":"# PACKAGES AND LIBRARIES","69e86daf":"#### COMPARISON","31a4f86e":"#### COVARIANCE","366c28c9":"#### COMPARISON VISUALIZATION"}}