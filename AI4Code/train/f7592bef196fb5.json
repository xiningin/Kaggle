{"cell_type":{"da5156ad":"code","2b2ffc04":"code","92126cac":"code","243b11ea":"code","7e69febb":"code","3c321bc2":"code","0c93384d":"code","975c1c61":"code","69e78b7d":"code","041ca662":"code","5e710cd0":"markdown"},"source":{"da5156ad":"import numpy as np, pandas as pd, matplotlib.pyplot as plt\nimport tqdm\nfrom skimage.io import imread\n\ntrainids = pd.read_csv('..\/input\/train.csv')['id'].tolist()\ndef read_image(imgid):\n    fn = '..\/input\/train\/images\/{}.png'.format(imgid)\n    return imread(fn)[...,0].astype(np.float32) \/ 255\n\ndef read_mask(imgid):\n    fn = '..\/input\/train\/masks\/{}.png'.format(imgid)\n    return imread(fn).astype(np.uint8)    ","2b2ffc04":"from skimage.feature import greycomatrix, greycoprops\nfrom multiprocessing import Pool\n\ndef glcm_props(patch):\n    lf = []\n    props = ['dissimilarity', 'contrast', 'homogeneity', 'energy', 'correlation']\n\n    # left nearest neighbor\n    glcm = greycomatrix(patch, [1], [0], 256, symmetric=True, normed=True)\n    for f in props:\n        lf.append( greycoprops(glcm, f)[0,0] )\n\n    # upper nearest neighbor\n    glcm = greycomatrix(patch, [1], [np.pi\/2], 256, symmetric=True, normed=True)\n    for f in props:\n        lf.append( greycoprops(glcm, f)[0,0] )\n        \n    return lf\n\ndef patch_gen(img, PAD=4):\n    img1 = (img * 255).astype(np.uint8)\n\n    W = 101\n    imgx = np.zeros((101+PAD*2, 101+PAD*2), dtype=img1.dtype)\n    imgx[PAD:W+PAD,PAD:W+PAD] = img1\n    imgx[:PAD,  PAD:W+PAD] = img1[PAD:0:-1,:]\n    imgx[-PAD:, PAD:W+PAD] = img1[W-1:-PAD-1:-1,:]\n    imgx[:, :PAD ] = imgx[:, PAD*2:PAD:-1]\n    imgx[:, -PAD:] = imgx[:, W+PAD-1:-PAD*2-1:-1]\n\n    xx, yy = np.meshgrid(np.arange(0, W), np.arange(0, W))\n    xx, yy = xx.flatten() + PAD, yy.flatten() + PAD\n\n    for x, y in zip(xx, yy):\n        patch = imgx[y-PAD:y+PAD+1, x-PAD:x+PAD+1]\n        yield patch\n\ndef glcm_feature(img, verbose=False):\n    \n    W, NF, PAD = 101, 10, 4\n\n    if img.sum() == 0:\n        return np.zeros((W,W,NF), dtype=np.float32)\n    \n    l = []\n    with Pool(3) as pool:\n        for p in tqdm.tqdm(pool.imap(glcm_props, patch_gen(img, PAD)), total=W*W, disable=not verbose):\n            l.append(p)\n        \n    fimg = np.array(l, dtype=np.float32).reshape(101, 101, -1)\n    return fimg","92126cac":"def visualize_glcm(imgid):\n    img = read_image(imgid)\n    mask = read_mask(imgid)\n    \n    fimg = glcm_feature(img, verbose=1)\n    \n    _, (ax0, ax1) = plt.subplots(1, 2, figsize=(6,3))\n    ax0.imshow(img)\n    ax1.imshow(mask)\n    plt.show()\n    \n    amin = np.amin(fimg, axis=(0,1))\n    amax = np.amax(fimg, axis=(0,1))\n    fimg = (fimg - amin) \/ (amax - amin)\n\n    fimg[...,4] = np.power(fimg[...,4], 3)\n    fimg[...,9] = np.power(fimg[...,9], 3)\n\n    _, axs = plt.subplots(2, 5, figsize=(15,6))\n    axs = axs.flatten()\n\n    for k in range(fimg.shape[-1]):\n        axs[k].imshow(fimg[...,k])\n    plt.show()","243b11ea":"visualize_glcm(np.random.choice(trainids))","7e69febb":"visualize_glcm(np.random.choice(trainids))","3c321bc2":"visualize_glcm(np.random.choice(trainids))","0c93384d":"visualize_glcm(np.random.choice(trainids))","975c1c61":"visualize_glcm(np.random.choice(trainids))","69e78b7d":"visualize_glcm(np.random.choice(trainids))","041ca662":"visualize_glcm(np.random.choice(trainids))","5e710cd0":"GLCMs( grey level co-occurrence matrics )s features are good for analyzing images with spatial variations without fixed objectiveness like seismic data.  They are obtained by summing up all co-occurrences of grey scale values at a specifed offset (distance and angle in 2d case) over an image, with following aggregations.  They further detailed  'dissimilarity', 'contrast', 'homogeneity', 'energy' and 'correlation' by ways of aggregation.  One can google \"glcm + seismic\" to find applications of GLCMs.  \n\n[scikit-image, GLCM features API](http:\/\/scikit-image.org\/docs\/dev\/api\/skimage.feature.html#skimage.feature.greycoprops)<br\/>\n[GLCM Texture Features example code](http:\/\/scikit-image.org\/docs\/dev\/auto_examples\/features_detection\/plot_glcm.html)"}}