{"cell_type":{"f71d7730":"code","fee7580e":"code","ac98d42c":"code","be939648":"code","55113b16":"code","76e2f2b5":"code","f11661a1":"code","7c85875a":"code","b7417193":"code","2755b6f4":"code","2d465d22":"code","0b95fe1e":"code","87a99748":"code","6c9e2053":"code","254eda6c":"code","34e21069":"code","33918f7e":"code","cb3f6b5e":"code","4ac5477f":"code","8601a177":"code","e801b847":"code","f94e24ca":"code","f43a3f43":"code","29b8233f":"code","292a6295":"code","e4b71062":"code","5254d153":"code","2ff0df03":"code","d0d593d2":"code","a475abee":"code","ed85dc0e":"code","f467095d":"code","2d1cfdd0":"code","5ea09e24":"code","1728b57a":"code","d72be238":"code","c2a00067":"code","69b6fbcf":"code","2e8b1ddf":"code","c38cdffc":"code","2bd0e29b":"code","9f3961cf":"code","c00803ae":"code","dcda2c86":"code","419558c2":"code","0b69ea2d":"code","a0829ad0":"code","71e40a1c":"code","cfebbb76":"code","75037a93":"code","2e79a7eb":"code","262c4b52":"code","690e5299":"code","73abc8c2":"code","5a2b37bc":"code","eba549f1":"code","f630d794":"code","5304cac7":"code","3bff09a0":"code","b542e905":"code","5e15bfd3":"code","db313aaf":"code","d579ee2e":"code","efbee586":"code","6d047568":"code","58ec33f2":"code","ce8ab7bd":"code","eba1083b":"code","35264fb0":"code","30d422d7":"code","0bcbbd31":"code","f039a29c":"code","bc7f4215":"code","df7e9dad":"code","25f4e697":"code","748d877b":"code","79561161":"code","1f9d7ee1":"code","52371900":"code","bbf4f17f":"code","66c13f4d":"code","436b3b1c":"code","d9b77b4f":"code","202d8f37":"code","f55bfed5":"code","76421eb7":"code","dbf919a7":"code","1ae5434f":"code","d5f825ef":"code","75cb0e06":"code","f06d3c16":"code","ff3d61e8":"code","e603e47c":"code","4df3e9e2":"code","7c5dbc03":"code","e5596a38":"code","6fdda836":"code","50b1984b":"code","24d5f50d":"code","18a1f4b2":"code","fe4cf60a":"code","abe32612":"code","7ac60e24":"code","84ef613e":"code","96e421f2":"code","2248be85":"markdown","98b8d09d":"markdown","a28edee4":"markdown","266a32e7":"markdown","432969ad":"markdown","ee402e21":"markdown","efc830a7":"markdown","f383d922":"markdown","f9c4bd51":"markdown","d388098b":"markdown","fe5785b4":"markdown","53f28b22":"markdown","87be8469":"markdown","478640e1":"markdown","40bb61be":"markdown","ef3c71c8":"markdown","bf41270a":"markdown","a2e9e6c2":"markdown","ce5cd1c9":"markdown","0d2e6d4e":"markdown","c7c6fa8e":"markdown","716235ea":"markdown","0592fe0b":"markdown","61de5cd5":"markdown","3613db6f":"markdown","4adcf143":"markdown","9b545eab":"markdown","c997197c":"markdown","cd7c3f76":"markdown","6149588d":"markdown","b3145ec4":"markdown","701be410":"markdown","aae57475":"markdown","6912a9db":"markdown","6e5cdcbd":"markdown"},"source":{"f71d7730":"import numpy as np  \nimport pandas as pd  \nimport matplotlib.pyplot as plt \nimport plotly.express as px\nimport plotly.figure_factory as ff\nimport seaborn as sns \nfrom scipy import stats\nfrom scipy.stats import norm , skew \nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport plotly.offline as py\nimport missingno as msno\nfrom sklearn.linear_model import ElasticNet, Lasso,  BayesianRidge, LassoLarsIC,Ridge,RidgeCV\nfrom sklearn.ensemble import RandomForestRegressor,  GradientBoostingRegressor\nfrom sklearn.kernel_ridge import KernelRidge\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import RobustScaler ,scale\nfrom sklearn.base import BaseEstimator, TransformerMixin, RegressorMixin, clone\nfrom sklearn.svm import SVR\nfrom sklearn.model_selection import KFold, cross_val_score, train_test_split\nfrom sklearn.metrics import mean_squared_error ,r2_score\nfrom sklearn.preprocessing import LabelEncoder\nimport xgboost as xgb\nfrom xgboost import XGBRegressor\nfrom lightgbm import LGBMRegressor\nfrom mlxtend.regressor import StackingCVRegressor\nimport warnings\nwarnings.filterwarnings('ignore')","fee7580e":"Train=pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\nTest=pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","ac98d42c":"pd.set_option('display.max_columns', None)\nTrain.head(10)","be939648":"Train.columns.values","55113b16":"Train['SalePrice'].describe()","76e2f2b5":"Data=Train['SalePrice']\nfig = px.box(Data, x='SalePrice', points=\"all\" ,title=\"Sale Price Box Plot\")\nfig.show()","f11661a1":"plt.figure(figsize=(12,8))\nsns.distplot(Train['SalePrice'], color= \"red\" )\nplt.title('Distribution of Sales Price', fontsize=18)\n\nplt.show()\nprint(\"Skewness: %f\" % Train['SalePrice'].skew())\nprint(\"Kurtosis: %f\" % Train['SalePrice'].kurt())","7c85875a":"Train.describe().T","b7417193":"Train.describe(include='O').T","2755b6f4":"corr=Train.corr()\ncorr=corr.sort_values(by='SalePrice')\ncolorscale = [[0, '#edf8fb'], [.3, '#b3cde3'],  [.6, '#8856a7'],  [1, '#810f7c']]\nfig= go.Figure(data=go.Heatmap(z=corr.values,  y=corr.index,x=corr.columns, colorscale=colorscale))\nfig.update_layout(\n    autosize=False,\n    width=850,\n    height=850)\nfig.show()\n","2d465d22":"top=10\ntop_corr=corr.nlargest(top,'SalePrice')['SalePrice'].index\ntop_corr_values=np.corrcoef(Train[top_corr.values].values.T)\ncolorscale = [[0, '#edf8fb'], [.3, '#b3cde3'],  [.6, '#8856a7'],  [1, '#810f7c']]\nfig= go.Figure(data=go.Heatmap(z=top_corr_values,  y=top_corr,x=top_corr, colorscale=colorscale))\nfig.update_layout(\n    autosize=False,\n    width=500,\n    height=500)\n\nfig.show()","0b95fe1e":"df=Train[top_corr]\nfig = px.scatter_matrix(df,dimensions=top_corr)\nfig.update_traces(diagonal_visible=False)\nfig.update_layout(\n    title='top correlation',\n    dragmode='select',\n    width=950,\n    height=1000,\n    hovermode='closest',\n)\nfig.show()","87a99748":"data=pd.DataFrame()\ndata['Year Sold']=Train.groupby(['YrSold']).size().index.astype(str)\ndata['Houses']=Train.groupby(['YrSold']).size().values\nfig=px.bar(data,y='Year Sold',x='Houses',color='Year Sold',title=\"Top Year Sold\")\nfig.show()","6c9e2053":"data = pd.concat([Train['SalePrice'], Train['YrSold']], axis=1)\nfig = px.box(data, y='SalePrice', x='YrSold',color='YrSold',title=\"BoxPlot Year Sold\")\nfig.show()","254eda6c":"fig = px.histogram(Train,x = 'SalePrice',title = 'Distribution of House Price Across Years',nbins=200,color='YrSold'  )\nfig.show()","34e21069":"data=Train.groupby(['YrSold','MSZoning'])['SalePrice'].count().unstack()\nx=data.index\nfig = go.Figure(go.Bar(x=x, y=data['C (all)'], name='C (all)'))\nfig.add_trace(go.Bar(x=x, y=data['FV'], name='FV'))\nfig.add_trace(go.Bar(x=x, y=data['RH'], name='RH'))\nfig.add_trace(go.Bar(x=x, y=data['RL'], name='RL'))\nfig.add_trace(go.Bar(x=x, y=data['RM'], name='RM'))\nfig.update_layout(barmode='stack', xaxis={'categoryorder':'category ascending'},title = 'BarPlot of House Zoining Across Years')\nfig.show()","33918f7e":"data=Train.groupby(['YrSold','OverallQual'])['SalePrice'].count().unstack()\nx=data.index\nfig = go.Figure(go.Bar(x=x, y=data[1], name='1'))\nfig.add_trace(go.Bar(x=x, y=data[2], name='2'))\nfig.add_trace(go.Bar(x=x, y=data[3], name='3'))\nfig.add_trace(go.Bar(x=x, y=data[4], name='4'))\nfig.add_trace(go.Bar(x=x, y=data[5], name='5'))\nfig.add_trace(go.Bar(x=x, y=data[6], name='6'))\nfig.add_trace(go.Bar(x=x, y=data[7], name='7'))\nfig.add_trace(go.Bar(x=x, y=data[8], name='8'))\nfig.add_trace(go.Bar(x=x, y=data[9], name='9'))\nfig.add_trace(go.Bar(x=x, y=data[10], name='10'))\n\nfig.update_layout(barmode='stack', xaxis={'categoryorder':'category ascending'},title = 'BarPlot of Quality Across Years')\nfig.show()","cb3f6b5e":"data=pd.DataFrame()\ndata['Zoining']=Train['MSZoning'].unique()\ndata['Houses']=Train['MSZoning'].value_counts().values\n\nfig = px.bar(data, x='Houses', y='Zoining',color='Zoining', height=400,title='BarPlot MS Zoining')\nfig.show()\n","4ac5477f":"data=pd.concat([Train['SalePrice'],Train['MSZoning']],axis=1)\nfig = px.box(data, y='SalePrice', x='MSZoning',color='MSZoning',title='BoxPlot MS Zoining by SalePrice')\nfig.show()","8601a177":"Data=pd.concat([Train['OverallQual'],Train['MSZoning']],axis=1)\nfig=px.box(Data,x='OverallQual',y='MSZoning',color='MSZoning',title='BoxPlot MS Zoining by Quality')\nfig.show()\n","e801b847":"col_name=list(Train['MSZoning'].unique())\nlabels=list(Train['OverallQual'].unique())\nRL=Train[Train['MSZoning']=='RL'][['OverallQual']].value_counts()\nRM=Train[Train['MSZoning']=='RM'][['OverallQual']].value_counts()\nCall=Train[Train['MSZoning']=='C (all)'][['OverallQual']].value_counts()\nFV=Train[Train['MSZoning']=='FV'][['OverallQual']].value_counts()\nRH=Train[Train['MSZoning']=='RH'][['OverallQual']].value_counts()\ncols=5\nrows=1\nspecs = [[{'type':'domain'}] * cols] * rows\nfig = make_subplots(rows=rows, cols=cols,specs=specs,subplot_titles=col_name)\nfig.add_trace(go.Pie(labels=labels, values=RL, name=\"Rl\"),1, 1)\nfig.add_trace(go.Pie(labels=labels, values=RM, name=\"RM\"),1, 2)\nfig.add_trace(go.Pie(labels=labels, values=Call, name=\"RM\"),1, 3)\nfig.add_trace(go.Pie(labels=labels, values=FV, name=\"RM\"),1, 4)\nfig.add_trace(go.Pie(labels=labels, values=RH, name=\"RM\"),1, 5)\nfig.update_traces(hoverinfo=\"label+percent\")\nfig.update_layout(\n    margin=dict(t=0, b=0, l=0, r=0),\n    title_text=\" Distribution Quality in MsZoning\")\nfig.show()","f94e24ca":"data=Train.groupby(['Neighborhood','MSZoning'])['SalePrice'].count().unstack()\nx=data.index\nfig = go.Figure(go.Bar(x=x, y=data['C (all)'], name='C (all)'))\nfig.add_trace(go.Bar(x=x, y=data['FV'], name='FV'))\nfig.add_trace(go.Bar(x=x, y=data['RH'], name='RH'))\nfig.add_trace(go.Bar(x=x, y=data['RL'], name='RL'))\nfig.add_trace(go.Bar(x=x, y=data['RM'], name='RM'))\nfig.update_layout(barmode='stack', xaxis={'categoryorder':'category ascending'},title='BarPlot Distribution Neighborhood by MsZoning')\nfig.show()","f43a3f43":"data=pd.DataFrame()\ndata['Neighborhood']=Train['Neighborhood'].unique()\ndata['Houses']=Train['Neighborhood'].value_counts().values\n\nfig = px.bar(data, y='Neighborhood', x='Houses',color='Neighborhood',title='BarPlot Neighborhood')\nfig.show()","29b8233f":"data = pd.concat([Train['SalePrice'], Train['Neighborhood']], axis=1)\nfig = px.box(data, y='SalePrice', x='Neighborhood',color='Neighborhood',title='BoxPlot Neighborhood by SalePrice')\nfig.show()","292a6295":"data=Train.groupby(['Neighborhood', 'OverallQual']).size().unstack()\nx=data.index\nfig = go.Figure(go.Bar(x=x, y=data[1], name=1))\nfig.add_trace(go.Bar(x=x, y=data[2], name=2))\nfig.add_trace(go.Bar(x=x, y=data[3], name=3))\nfig.add_trace(go.Bar(x=x, y=data[4], name=4))\nfig.add_trace(go.Bar(x=x, y=data[5], name=5))\nfig.add_trace(go.Bar(x=x, y=data[6], name=6))\nfig.add_trace(go.Bar(x=x, y=data[7], name=7))\nfig.add_trace(go.Bar(x=x, y=data[8], name=8))\nfig.add_trace(go.Bar(x=x, y=data[9], name=9))\nfig.add_trace(go.Bar(x=x, y=data[10], name=10))\n\nfig.update_layout(barmode='stack', xaxis={'categoryorder':'category ascending'},title='BarPlot Distribution Neighborhood by Qualty')\nfig.show()","e4b71062":"col_name=list(Train['MSZoning'].unique())\nlabels=list(Train['Neighborhood'].unique())\nRL=Train[Train['MSZoning']=='RL'][['Neighborhood']].value_counts()\nRM=Train[Train['MSZoning']=='RM'][['Neighborhood']].value_counts()\nCall=Train[Train['MSZoning']=='C (all)'][['Neighborhood']].value_counts()\nFV=Train[Train['MSZoning']=='FV'][['Neighborhood']].value_counts()\nRH=Train[Train['MSZoning']=='RH'][['Neighborhood']].value_counts()\ncols=5\nrows=1\nspecs = [[{'type':'domain'}] * cols] * rows\nfig = make_subplots(rows=rows, cols=cols,specs=specs,subplot_titles=col_name)\nfig.add_trace(go.Pie(labels=labels, values=RL, name=\"Rl\"),1, 1)\nfig.add_trace(go.Pie(labels=labels, values=RM, name=\"RM\"),1, 2)\nfig.add_trace(go.Pie(labels=labels, values=Call, name=\"RM\"),1, 3)\nfig.add_trace(go.Pie(labels=labels, values=FV, name=\"RM\"),1, 4)\nfig.add_trace(go.Pie(labels=labels, values=RH, name=\"RM\"),1, 5)\nfig.update_traces(hoverinfo=\"label+percent\")\nfig.update_layout(\n    margin=dict(t=0, b=0, l=0, r=0),\n    title_text=\" Distribution Neighborhood in MsZoning \")\nfig.show()","5254d153":"data=pd.DataFrame()\ndata['MSSubClass']=Train['MSSubClass'].value_counts().index\ndata['Houses']=Train['MSSubClass'].value_counts().values\nfig = px.pie(data, values='Houses', names='MSSubClass',color='MSSubClass',color_discrete_sequence=px.colors.sequential.RdBu)\nfig.update_traces(textposition='inside', textinfo='percent+label',title = 'Distribution of Sub Class ')\nfig.show()","2ff0df03":"col_name=list(Train['MSZoning'].unique())\nlabels=list(Train['MSSubClass'].unique())\nRL=Train[Train['MSZoning']=='RL'][['MSSubClass']].value_counts()\nRM=Train[Train['MSZoning']=='RM'][['MSSubClass']].value_counts()\nCall=Train[Train['MSZoning']=='C (all)'][['MSSubClass']].value_counts()\nFV=Train[Train['MSZoning']=='FV'][['MSSubClass']].value_counts()\nRH=Train[Train['MSZoning']=='RH'][['MSSubClass']].value_counts()\ncols=5\nrows=1\nspecs = [[{'type':'domain'}] * cols] * rows\nfig = make_subplots(rows=rows, cols=cols,specs=specs,subplot_titles=col_name)\nfig.add_trace(go.Pie(labels=labels, values=RL, name=\"Rl\"),1, 1)\nfig.add_trace(go.Pie(labels=labels, values=RM, name=\"RM\"),1, 2)\nfig.add_trace(go.Pie(labels=labels, values=Call, name=\"RM\"),1, 3)\nfig.add_trace(go.Pie(labels=labels, values=FV, name=\"RM\"),1, 4)\nfig.add_trace(go.Pie(labels=labels, values=RH, name=\"RM\"),1, 5)\nfig.update_traces(hoverinfo=\"label+percent\")\nfig.update_layout(\n    margin=dict(t=0, b=0, l=0, r=0),\n    title_text=\"Distribution SubClass in MsZoning\")\nfig.show()","d0d593d2":"fig = make_subplots(rows=1, cols=5)\nfig.add_trace(go.Scatter(y=Train['SalePrice'],x=Train[\"GarageYrBlt\"],mode='markers',name='GarageYrBlt'), row=1, col=1)\nfig.add_trace(go.Scatter(y=Train['SalePrice'],x=Train[\"GarageCars\"],mode='markers',name='GarageCars'), row=1, col=2)\nfig.add_trace(go.Scatter(y=Train['SalePrice'],x=Train[\"GarageArea\"],mode='markers',name='GarageArea'), row=1, col=3)\nfig.add_trace(go.Box(y=Train['SalePrice'],x=Train[\"GarageType\"],name='GarageType'), row=1, col=4)\nfig.add_trace(go.Box(y=Train['SalePrice'],x=Train[\"GarageFinish\"],name='GarageFinish'), row=1, col=5)\nfig.update_layout(title_text=\"Garage with SalePrice\")\nfig.show()","a475abee":"fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(nrows=2, ncols=2, figsize=(14,10))\nplt.suptitle('Relationship between Saleprice \\n and Categorical Utilities', fontsize=18)\nsns.pointplot(x='CentralAir', y='SalePrice', data=Train, ax=ax1)\nsns.pointplot(x='Heating', y='SalePrice', data=Train, ax=ax2)\nsns.pointplot(x='Fireplaces', y='SalePrice', data=Train, ax=ax3)\nsns.pointplot(x='Electrical', y='SalePrice', data=Train, ax=ax4)\nplt.legend(loc='best')\nplt.show()\n\n","ed85dc0e":"plt.style.use('seaborn-white')\nfig, ax = plt.subplots(figsize=(14,8))\npalette = [\"#9b59b6\", \"#3498db\", \"#95a5a6\", \"#e74c3c\", \"#34495e\", \"#2ecc71\", \"#FF8000\", \"#AEB404\", \"#FE2EF7\", \"#64FE2E\"]\nsns.swarmplot(x=\"OverallQual\", y=\"SalePrice\", data=Train, ax=ax, palette=palette, linewidth=1)\nplt.show()","f467095d":"Data=pd.concat([Train['OverallQual'],Train['SalePrice']],axis=1)\nfig=px.box(Data,x='OverallQual',y='SalePrice',color='OverallQual')\nfig.show()\n","2d1cfdd0":"plt.figure(figsize=(15,15))\nplt.subplot(3,2,1)\nplt.scatter(x=Train['GrLivArea'],y=Train['SalePrice'])\nplt.axvline(x=4600 ,color='red',linestyle='dashed')\nplt.title('GrLivArea',fontsize=15,weight='bold')\n\nplt.subplot(3,2,2)\nplt.scatter(x=Train['TotalBsmtSF'],y=Train['SalePrice'])\nplt.axvline(x=5900 ,color='red',linestyle='dashed')\nplt.title('TotalBsmtSF',fontsize=15,weight='bold')\n\nplt.subplot(3,2,3)\nplt.scatter(x=Train['1stFlrSF'],y=Train['SalePrice'])\nplt.axvline(x=4000 ,color='red',linestyle='dashed')\nplt.title('1stFlrSF',fontsize=15,weight='bold')\n\nplt.subplot(3,2,4)\nplt.scatter(x=Train['MasVnrArea'],y=Train['SalePrice'])\nplt.axvline(x=1500 ,color='red',linestyle='dashed')\nplt.title('MasVnrArea ',fontsize=15,weight='bold')\n\nplt.subplot(3,2,5)\nplt.scatter(x=Train['GarageArea'],y=Train['SalePrice'])\nplt.axvline(x=1230 ,color='red',linestyle='dashed')\nplt.title('GarageArea',fontsize=15,weight='bold')\n\nplt.subplot(3,2,6)\nplt.scatter(x=Train['TotRmsAbvGrd'],y=Train['SalePrice'])\nplt.axvline(x=13 ,color='red',linestyle='dashed')\nplt.title('TotRmsAbvGrd',fontsize=15,weight='bold')\n\n\nplt.show()","5ea09e24":"Train = Train.drop(Train[(Train['GrLivArea']>4000) & (Train['SalePrice']<200000)].index)\nTrain = Train.drop(Train[(Train['TotalBsmtSF']>56000) & (Train['SalePrice']<320000)].index)\nTrain = Train.drop(Train[(Train['1stFlrSF']>4600) & (Train['SalePrice']<200000)].index)\nTrain = Train.drop(Train[(Train['MasVnrArea']>1500) & (Train['SalePrice']<300000)].index)\nTrain = Train.drop(Train[(Train['GarageArea']>1200) & (Train['SalePrice']<300000)].index)\nTrain = Train.drop(Train[(Train['TotRmsAbvGrd']>13) & (Train['SalePrice']<300000)].index)","1728b57a":"plt.figure(figsize=(15,15))\nplt.subplot(3,2,1)\nplt.scatter(x=Train['GrLivArea'],y=Train['SalePrice'])\nplt.axvline(x=4600 ,color='red',linestyle='dashed')\nplt.title('GrLivArea',fontsize=15,weight='bold')\n\nplt.subplot(3,2,2)\nplt.scatter(x=Train['TotalBsmtSF'],y=Train['SalePrice'])\nplt.axvline(x=5900 ,color='red',linestyle='dashed')\nplt.title('TotalBsmtSF',fontsize=15,weight='bold')\n\nplt.subplot(3,2,3)\nplt.scatter(x=Train['1stFlrSF'],y=Train['SalePrice'])\nplt.axvline(x=4000 ,color='red',linestyle='dashed')\nplt.title('1stFlrSF',fontsize=15,weight='bold')\n\nplt.subplot(3,2,4)\nplt.scatter(x=Train['MasVnrArea'],y=Train['SalePrice'])\nplt.axvline(x=1500 ,color='red',linestyle='dashed')\nplt.title('MasVnrArea ',fontsize=15,weight='bold')\n\nplt.subplot(3,2,5)\nplt.scatter(x=Train['GarageArea'],y=Train['SalePrice'])\nplt.axvline(x=1230 ,color='red',linestyle='dashed')\nplt.title('GarageArea',fontsize=15,weight='bold')\n\nplt.subplot(3,2,6)\nplt.scatter(x=Train['TotRmsAbvGrd'],y=Train['SalePrice'])\nplt.axvline(x=13 ,color='red',linestyle='dashed')\nplt.title('TotRmsAbvGrd',fontsize=15,weight='bold')\n\n\n\nplt.show()","d72be238":"\nsns.distplot(Train['SalePrice'], fit=norm, color= \"red\")\nfig = plt.figure()\nres = stats.probplot(Train['SalePrice'], plot=plt)\nplt.show()","c2a00067":"Train[\"SalePrice\"] = np.log1p(Train[\"SalePrice\"])\nsns.distplot(Train['SalePrice'], fit=norm, color= \"red\")\nfig = plt.figure()\nres = stats.probplot(Train['SalePrice'], plot=plt)\nplt.show()\nprint(\"Skewness: %f\" % Train['SalePrice'].skew())\nprint(\"Kurtosis: %f\" % Train['SalePrice'].kurt())","69b6fbcf":"y_train =Train['SalePrice']\nntrain = Train.shape[0]\nntest = Test.shape[0]\ntest_id=Test['Id']\nfeatures=pd.concat([Train,Test],axis=0,sort=False)\nfeatures=features.drop(['Id','SalePrice'],axis=1)\n","2e8b1ddf":"total =features.isnull().sum().sort_values(ascending=False)\npercent = (features.isnull().sum()\/features.isnull().count()*100).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data=missing_data.drop((missing_data[missing_data['Total']==0]).index,0) \nmissing_data.head(20)\ndisplay(missing_data.head(20).style.background_gradient(cmap='Reds'))","c38cdffc":"null_cols =(features.isna().sum()[features.isna().sum()>0]).index\nmsno.matrix(features.loc[:,null_cols],labels=True,figsize=(20,12),fontsize=14,inline=False)","2bd0e29b":"\n#features=features.drop((missing_data[missing_data['Percent']>50]).index,1)\n","9f3961cf":"null_num_features =(features.select_dtypes(exclude=object).isna().sum().sort_values(ascending=False)[features.isna().sum()>0]).index\n","c00803ae":"null_num_features=null_num_features.drop('LotFrontage')\n","dcda2c86":"features.loc[:,null_num_features].head(10)","419558c2":"for col  in null_num_features:\n    features[col] = features[col].fillna(0)","0b69ea2d":"features['LotFrontage']=features.groupby(\"Neighborhood\")[\"LotFrontage\"].transform(lambda x: x.fillna(x.median()))","a0829ad0":"null_cat_features_low =(features.select_dtypes(include=object).isnull().sum().sort_values(ascending=False)[features.isnull().sum()>0][features.isnull().sum()<10]).index\nnull_cat_features_high =(features.select_dtypes(include=object).isnull().sum().sort_values(ascending=False)[features.isnull().sum()>0][features.isnull().sum()>10]).index\n","71e40a1c":"null_cat_features_low","cfebbb76":"for col in null_cat_features_low:\n    features[col]=features[col].fillna(features[col].mode()[0])","75037a93":"null_cat_features_high","2e79a7eb":"for col in null_cat_features_high:\n    features[col]=features[col].fillna(\"None\")","262c4b52":"total =features.isnull().sum().sort_values(ascending=False)\npercent = (features.isnull().sum()\/features.isnull().count()*100).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data=missing_data.drop((missing_data[missing_data['Total']==0]).index,0) \nmissing_data.head(34)","690e5299":"features['age_houses']= (features['YrSold'] - features['YearBuilt'] )\nfeatures['age_houses'].describe()","73abc8c2":"features[features['age_houses']<0]\n","5a2b37bc":"features.loc[features['YrSold'] < features['YearBuilt'],'YrSold' ] = 2009\nfeatures['age_houses']= (features['YrSold'] - features['YearBuilt'] )\nfeatures['age_houses'].describe()","eba549f1":"features['TotalSF'] = features['TotalBsmtSF']+features['1stFlrSF']+features['2ndFlrSF']\n","f630d794":"features['OverallCond'] = features['OverallCond'].astype(str)\nfeatures['MSSubClass'] = features['MSSubClass'].astype(str)\nfeatures['YrSold'] = features['YrSold'].astype(str)\nfeatures['MoSold'] = features['MoSold'].astype(str)","5304cac7":"numerical=features.select_dtypes(exclude=object).columns\nskewness=features[numerical].apply(lambda x: skew(x.dropna())).sort_values(ascending=False)\nskewness=skewness[abs(skewness)>0.75]\nskewness.head(10)","3bff09a0":"from scipy.special import boxcox1p\nskewed_features = skewness.index\nlam = 0.15\nfor cols in skewed_features:\n    features[cols] = boxcox1p(features[cols], lam)\n    ","b542e905":"\ncategorical=features.select_dtypes(include=object)\nfeatures=pd.get_dummies(features)","5e15bfd3":"X_train = features[:ntrain]\nX_test = features[ntrain:]","db313aaf":"def M_error(y_true,y_pred):\n    MSR=np.sqrt(mean_squared_error(y_true,y_pred))\n    return(MSR)","d579ee2e":"n_folds = 12\nkf = KFold(n_folds, shuffle=True, random_state=42)\ndef val_score(model):\n     cvl= np.sqrt(-cross_val_score(model, X_train, y_train, scoring=\"neg_mean_squared_error\", cv = kf))\n     return(cvl)","efbee586":"lasso = make_pipeline(RobustScaler(), Lasso(alpha =0.0005, random_state=1))","6d047568":"lightgbm = LGBMRegressor(objective='regression', num_leaves=6,learning_rate=0.01,\n                         n_estimators=7000,max_bin=200, bagging_fraction=0.8,\n                         bagging_freq=4, bagging_seed=8,feature_fraction=0.2,\n                         feature_fraction_seed=8,min_sum_hessian_in_leaf = 11,\n                         verbose=-1,random_state=42)","58ec33f2":"KRR = KernelRidge(alpha=0.6, kernel='polynomial', degree=2, coef0=2.5)","ce8ab7bd":"rf = RandomForestRegressor(n_estimators=1200,max_depth=15,min_samples_split=5,\n                           min_samples_leaf=5,max_features=None,oob_score= True,random_state=42)","eba1083b":"gbr = GradientBoostingRegressor(n_estimators=6000,learning_rate=0.01,max_depth=4,\n                                max_features='sqrt', min_samples_leaf=15,min_samples_split=10,\n                                loss='huber',random_state=42)","35264fb0":"svr = make_pipeline(RobustScaler(), SVR(C= 20, epsilon= 0.008, gamma=0.0003))","30d422d7":"model_xgb = xgb.XGBRegressor(colsample_bytree=0.4603,gamma=0.0468,learning_rate=0.05,\n                             max_depth=3,min_child_weight=1.7817,n_estimators=2200,\n                             reg_alpha=0.4640, reg_lambda=0.8571, subsample=0.5213,silent=1,\n                             random_state =7, nthread = -1)","0bcbbd31":"model_lgb = LGBMRegressor(objective='regression',num_leaves=5,learning_rate=0.05,\n                              n_estimators=720,max_bin = 55, bagging_fraction = 0.8,\n                              bagging_freq = 5,feature_fraction = 0.2319,feature_fraction_seed=9, \n                              bagging_seed=9,min_data_in_leaf =6,min_sum_hessian_in_leaf = 11)","f039a29c":"ENet = make_pipeline(RobustScaler(), ElasticNet(alpha=0.0005, l1_ratio=.9, random_state=3))","bc7f4215":"scores={}\nscore = val_score(KRR)\nprint(\"KRR: {:.4f} ({:.4f})\".format(score.mean(), score.std()))\nscores['KRR'] = (score.mean(), score.std())","df7e9dad":"score = val_score(rf)\nprint(\"rf: {:.4f} ({:.4f})\".format(score.mean(), score.std()))\nscores['rf'] = (score.mean(), score.std())","25f4e697":"score = val_score(gbr)\nprint(\"gbr: {:.4f} ({:.4f})\".format(score.mean(), score.std()))\nscores['gbr'] = (score.mean(), score.std())","748d877b":"score = val_score(svr)\nprint(\"svr: {:.4f} ({:.4f})\".format(score.mean(), score.std()))\nscores['svr'] = (score.mean(), score.std())","79561161":"score = val_score(model_lgb)\nprint(\"model_lgb: {:.4f} ({:.4f})\".format(score.mean(), score.std()))\nscores['model_lgb'] = (score.mean(), score.std())","1f9d7ee1":"score = val_score(ENet)\nprint(\"ENet: {:.4f} ({:.4f})\".format(score.mean(), score.std()))\nscores['ENet'] = (score.mean(), score.std())","52371900":"score = val_score(lightgbm)\nprint(\"lightgbm: {:.4f} ({:.4f})\".format(score.mean(), score.std()))\nscores['lightgbm'] = (score.mean(), score.std())","bbf4f17f":"score = val_score(lasso)\nprint(\"lasso: {:.4f} ({:.4f})\".format(score.mean(), score.std()))\nscores['lasso'] = (score.mean(), score.std())","66c13f4d":"scores=pd.DataFrame(scores).T\nscores.columns=['Mean','STD']\ndisplay(scores.sort_values(by='Mean',ascending=False).style.background_gradient(cmap='Reds'))","436b3b1c":"KRR.fit(X_train,y_train)\nprint('KRR Done')","d9b77b4f":"rf.fit(X_train,y_train)\nprint('rf Done')","202d8f37":"gbr.fit(X_train,y_train)\nprint('gbr Done')","f55bfed5":"svr.fit(X_train,y_train)\nprint('svr Done')","76421eb7":"model_lgb.fit(X_train,y_train)\nprint('model_lgb Done')","dbf919a7":"ENet.fit(X_train,y_train)\nprint('ENet Done')","1ae5434f":"lightgbm.fit(X_train,y_train)\nprint('ENet Done')","d5f825ef":"lasso.fit(X_train,y_train)\nprint('ENet Done')","75cb0e06":"mean_sr={}","f06d3c16":"mean_sr['KRR']=M_error(y_train,KRR.predict(X_train))\nprint(\"KRR\",M_error(y_train,KRR.predict(X_train)))","ff3d61e8":"mean_sr['rf']=M_error(y_train,rf.predict(X_train))\nprint(\"rf\",M_error(y_train,rf.predict(X_train)))","e603e47c":"mean_sr['gbr']=M_error(y_train,gbr.predict(X_train))\nprint(\"gbr\",M_error(y_train,gbr.predict(X_train)))","4df3e9e2":"mean_sr['svr']=M_error(y_train,svr.predict(X_train))\nprint(\"svr\",M_error(y_train,svr.predict(X_train)))","7c5dbc03":"mean_sr['model_lgb']=M_error(y_train,model_lgb.predict(X_train))\nprint(\"model_lgb\",M_error(y_train,model_lgb.predict(X_train)))","e5596a38":"mean_sr['ENet']=M_error(y_train,ENet.predict(X_train))\nprint(\"ENet\",M_error(y_train,ENet.predict(X_train)))","6fdda836":"mean_sr['lightgbm']=M_error(y_train,lightgbm.predict(X_train))\nprint(\"lightgbm\",M_error(y_train,lightgbm.predict(X_train)))","50b1984b":"mean_sr['lasso']=M_error(y_train,lasso.predict(X_train))\nprint(\"lasso\",M_error(y_train,lasso.predict(X_train)))","24d5f50d":"mean_sr=pd.DataFrame([mean_sr]).T\nmean_sr.columns=['mean_squared_error']\ndisplay(mean_sr.sort_values(by='mean_squared_error').style.background_gradient(cmap='Reds'))","18a1f4b2":"fig=go.Figure()\nfig.add_trace(go.Scatter(y=mean_sr['mean_squared_error'],x=scores.index,mode='lines+markers',name='mean_squared_error',marker=dict(size=16,color='black')))\nfig.add_trace(go.Scatter(y=scores['Mean'],x=scores.index,mode='lines+markers',name='score',marker_color='red',marker=dict(size=16)))\nfig.show()","fe4cf60a":"def pred(X):\n    y_pred=(KRR.predict(X)*.50+lightgbm.predict(X)*.35\n    +gbr.predict(X)*.07+model_lgb.predict(X)*.03\n    +rf.predict(X)*.02+svr.predict(X)*.01\n    +ENet.predict(X)*.01+lasso.predict(X)*.01)\n    return y_pred","abe32612":"M_error(y_train,pred(X_train))","7ac60e24":"y_pred=np.floor(np.expm1(pred(X_test)))","84ef613e":"submission = pd.DataFrame()\nsubmission['Id'] = test_id\nsubmission['SalePrice'] = y_pred\nsubmission.to_csv('submission.csv',index=False)","96e421f2":"submission.head()","2248be85":"# Skuw","98b8d09d":"Now the Top 10","a28edee4":"lasso","266a32e7":"Random Forest \n","432969ad":"Gradient Boosting","ee402e21":"# real estate investment\nis one best type of invastment becouse the statble,The benefits of investing in real estate are numerous\nWith well-chosen assets, investors can enjoy predictable cash flow, excellent returns, tax advantages, and diversification\u2014and it's possible to leverage real estate to build wealth.\nReal estate investors make money through rental income, any profits generated by property-dependent business activity, and appreciation. Real estate values tend to increase over time, and with a good investment, you can turn a profit when it's time to sell. Rents also tend to rise over time, which can lead to higher cash flow. \nThis chart from the Federal Reserve Bank of St. Louis shows average home prices in the U.S. since 1963. The areas shaded in grey indicate U.S. recessions","efc830a7":"Let's see a comprehensive look at the categorical features","f383d922":"Let's make a quick analysis","f9c4bd51":"Transform Feature","d388098b":"# Data preprossing\n","fe5785b4":"![Abc63d98.webp](attachment:Abc63d98.webp)","53f28b22":"KernelRidge","87be8469":"All correlation ","478640e1":"OK Time to Fix skew \n","40bb61be":" Libarary\n******","ef3c71c8":"# Goals\n1. reading the Data \n2. analyzing Data \n3. preprocessing Data \n4. predict","bf41270a":"XGBRegressor","a2e9e6c2":"You can read this article https:\/\/towardsdatascience.com\/skewed-data-a-problem-to-your-statistical-model-9a6b5bb74e37","ce5cd1c9":"SVR","0d2e6d4e":"and now numerical feature","c7c6fa8e":" I hope it helps","716235ea":"i'm from finance background but im love coding and I know that the analyzing and predicting is very important to making decision and I think it is the best tool for making decisions","0592fe0b":"LGBM","61de5cd5":"Read the data \n","3613db6f":"ElasticNet","4adcf143":"This kernel helps me a lot, I just learned how to do things as parts, but when I started, I had to put all of these parts together into one project, this is very difficult for me, this is my first kernel and I saw great kernels learning a lot of things and I saw a new codes , It really helps me a lot and i thank everyone for sharing the kernel of this thing really helps the beginners a lot","9b545eab":"# Encoding","c997197c":"OutLiar -)","cd7c3f76":"There is a problem with kurtosis but I will fix it later","6149588d":"# Create new features\n","b3145ec4":"2009 is the year that homes have been sold the most and the least\nIt was 2010","701be410":"![](https:\/\/images.all-free-download.com\/images\/graphiclarge\/house_flat_style_vector_background_583184.jpg)","aae57475":"lightgbm","6912a9db":"# missing data","6e5cdcbd":"skewed data, the tail region may act as an outlier for the statistical model and we know that outliers adversely affect the model\u2019s performance especially regression-based models. There are statistical model that are robust to outlier like a Tree-based models but it will limit the possibility to try other models. So there is a necessity to transform the skewed data to close enough to a Gaussian distribution or Normal distribution. This will allow us to try more number of statistical model."}}