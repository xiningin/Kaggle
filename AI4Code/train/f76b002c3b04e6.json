{"cell_type":{"5b8d4edd":"code","adde2bd3":"code","b5f6d2fe":"code","613cce5b":"code","cf6789e5":"code","4baedcf4":"code","6ae8ac72":"code","c7ff80ab":"code","c59df2a6":"code","6cd959e0":"code","86c538f6":"code","e74b647d":"code","a6db43c3":"code","5e5f5f06":"code","e17e916d":"code","ef0c11de":"code","aa80b3c2":"code","6e0f8632":"code","f3104d2b":"code","65242814":"code","d38b141a":"code","2132ecf2":"code","d107e117":"code","94d6dd2b":"code","b136c6b3":"code","17ac8336":"code","59a171a2":"code","bef14466":"code","7b92e251":"code","e6ced1da":"markdown","4c747e58":"markdown","8413748c":"markdown","8a6e732c":"markdown","e51ebbc7":"markdown","7641e562":"markdown","c2851936":"markdown","9f98648c":"markdown","f6f0de66":"markdown","e3c886ca":"markdown","d93e86eb":"markdown","33e7c91a":"markdown","98961351":"markdown","279115ab":"markdown","595b4c80":"markdown","a316960b":"markdown","040c3b2e":"markdown","0e86ea7c":"markdown","965b539e":"markdown","2d083bda":"markdown","442cb5ef":"markdown","4d2e1668":"markdown","34c217c3":"markdown","7545b101":"markdown","53143e84":"markdown","191cf163":"markdown"},"source":{"5b8d4edd":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n","adde2bd3":"#Dataframe manipulation library\nimport pandas as pd\n#Math functions, we'll only need the sqrt function so let's import only that\nfrom math import sqrt\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline","b5f6d2fe":"#Storing the movie information into a pandas dataframe\nmovies_df = pd.read_csv('\/kaggle\/input\/movielens-20m-dataset\/movie.csv')\n#Storing the user information into a pandas dataframe\nratings_df = pd.read_csv('\/kaggle\/input\/movielens-20m-dataset\/rating.csv')","613cce5b":"#Head is a function that gets the first N rows of a dataframe. N's default is 5.\nmovies_df.head()","cf6789e5":"#Using regular expressions to find a year stored between parentheses\n#We specify the parantheses so we don't conflict with movies that have years in their titles\nmovies_df['year'] = movies_df.title.str.extract('(\\(\\d\\d\\d\\d\\))',expand=False)\n#Removing the parentheses\nmovies_df['year'] = movies_df.year.str.extract('(\\d\\d\\d\\d)',expand=False)\n#Removing the years from the 'title' column\nmovies_df['title'] = movies_df.title.str.replace('(\\(\\d\\d\\d\\d\\))', '')\n#Applying the strip function to get rid of any ending whitespace characters that may have appeared\nmovies_df['title'] = movies_df['title'].apply(lambda x: x.strip())","4baedcf4":"movies_df.head()","6ae8ac72":"#Dropping the genres column\nmovies_df = movies_df.drop('genres', 1)","c7ff80ab":"movies_df.head()","c59df2a6":"ratings_df.head()","6cd959e0":"#Drop removes a specified row or column from a dataframe\nratings_df = ratings_df.drop('timestamp', 1)","86c538f6":"ratings_df.head()","e74b647d":"userInput = [\n            {'title':'Breakfast Club, The', 'rating':5},\n            {'title':'Toy Story', 'rating':3.5},\n            {'title':'Jumanji', 'rating':2},\n            {'title':\"Pulp Fiction\", 'rating':5},\n            {'title':'Akira', 'rating':4.5}\n         ] \ninputMovies = pd.DataFrame(userInput)\ninputMovies","a6db43c3":"#Filtering out the movies by title\ninputId = movies_df[movies_df['title'].isin(inputMovies['title'].tolist())]\n#Then merging it so we can get the movieId. It's implicitly merging it by title.\ninputMovies = pd.merge(inputId, inputMovies)\n#Dropping information we won't use from the input dataframe\ninputMovies = inputMovies.drop('year', 1)\n#Final input dataframe\n#If a movie you added in above isn't here, then it might not be in the original \n#dataframe or it might spelled differently, please check capitalisation.\ninputMovies","5e5f5f06":"#Filtering out users that have watched movies that the input has watched and storing it\nuserSubset = ratings_df[ratings_df['movieId'].isin(inputMovies['movieId'].tolist())]\nuserSubset.head()","e17e916d":"#Groupby creates several sub dataframes where they all have the same value in the column specified as the parameter\nuserSubsetGroup = userSubset.groupby(['userId'])","ef0c11de":"userSubsetGroup.get_group(1130)","aa80b3c2":"#Sorting it so users with movie most in common with the input will have priority\nuserSubsetGroup = sorted(userSubsetGroup,  key=lambda x: len(x[1]), reverse=True)","6e0f8632":"userSubsetGroup[0:3]","f3104d2b":"userSubsetGroup = userSubsetGroup[0:100]","65242814":"#Store the Pearson Correlation in a dictionary, where the key is the user Id and the value is the coefficient\npearsonCorrelationDict = {}\n\n#For every user group in our subset\nfor name, group in userSubsetGroup:\n    #Let's start by sorting the input and current user group so the values aren't mixed up later on\n    group = group.sort_values(by='movieId')\n    inputMovies = inputMovies.sort_values(by='movieId')\n    #Get the N for the formula\n    nRatings = len(group)\n    #Get the review scores for the movies that they both have in common\n    temp_df = inputMovies[inputMovies['movieId'].isin(group['movieId'].tolist())]\n    #And then store them in a temporary buffer variable in a list format to facilitate future calculations\n    tempRatingList = temp_df['rating'].tolist()\n    #Let's also put the current user group reviews in a list format\n    tempGroupList = group['rating'].tolist()\n    #Now let's calculate the pearson correlation between two users, so called, x and y\n    Sxx = sum([i**2 for i in tempRatingList]) - pow(sum(tempRatingList),2)\/float(nRatings)\n    Syy = sum([i**2 for i in tempGroupList]) - pow(sum(tempGroupList),2)\/float(nRatings)\n    Sxy = sum( i*j for i, j in zip(tempRatingList, tempGroupList)) - sum(tempRatingList)*sum(tempGroupList)\/float(nRatings)\n    \n    #If the denominator is different than zero, then divide, else, 0 correlation.\n    if Sxx != 0 and Syy != 0:\n        pearsonCorrelationDict[name] = Sxy\/sqrt(Sxx*Syy)\n    else:\n        pearsonCorrelationDict[name] = 0\n","d38b141a":"pearsonCorrelationDict.items()","2132ecf2":"pearsonDF = pd.DataFrame.from_dict(pearsonCorrelationDict, orient='index')\npearsonDF.columns = ['similarityIndex']\npearsonDF['userId'] = pearsonDF.index\npearsonDF.index = range(len(pearsonDF))\npearsonDF.head()","d107e117":"topUsers=pearsonDF.sort_values(by='similarityIndex', ascending=False)[0:50]\ntopUsers.head()","94d6dd2b":"topUsersRating=topUsers.merge(ratings_df, left_on='userId', right_on='userId', how='inner')\ntopUsersRating.head()","b136c6b3":"#Multiplies the similarity by the user's ratings\ntopUsersRating['weightedRating'] = topUsersRating['similarityIndex']*topUsersRating['rating']\ntopUsersRating.head()","17ac8336":"#Applies a sum to the topUsers after grouping it up by userId\ntempTopUsersRating = topUsersRating.groupby('movieId').sum()[['similarityIndex','weightedRating']]\ntempTopUsersRating.columns = ['sum_similarityIndex','sum_weightedRating']\ntempTopUsersRating.head()","59a171a2":"#Creates an empty dataframe\nrecommendation_df = pd.DataFrame()\n#Now we take the weighted average\nrecommendation_df['weighted average recommendation score'] = tempTopUsersRating['sum_weightedRating']\/tempTopUsersRating['sum_similarityIndex']\nrecommendation_df['movieId'] = tempTopUsersRating.index\nrecommendation_df.head()","bef14466":"recommendation_df = recommendation_df.sort_values(by='weighted average recommendation score', ascending=False)\nrecommendation_df.head(10)","7b92e251":"movies_df.loc[movies_df['movieId'].isin(recommendation_df.head(10)['movieId'].tolist())]","e6ced1da":"# Test User","4c747e58":"#### Add movieId to input user\n\nWith the input complete, let's extract the input movies's ID's from the movies dataframe and add them into it.\n\nWe can achieve this by first filtering out the rows that contain the input movies' title and then merging this subset with the input dataframe. We also drop unnecessary columns for the input to save memory space.\n","8413748c":"Now, let's start recommending movies to the input user.\n\n#### Rating of selected users to all movies\n\nWe're going to do this by taking the weighted average of the ratings of the movies using the Pearson Correlation as the weight. But to do this, we first need to get the movies watched by the users in our **pearsonDF** from the ratings dataframe and then store their correlation in a new column called _similarityIndex\". This is achieved below by merging of these two tables.\n","8a6e732c":"Now all we need to do is simply multiply the movie rating by its weight (The similarity index), then sum up the new ratings and divide it by the sum of the weights.\n\nWe can easily do this by simply multiplying two columns, then grouping up the dataframe by movieId and then dividing two columns:\n\nIt shows the idea of all similar users to candidate movies for the input user:\n","e51ebbc7":"We now group up the rows by user ID.\n","7641e562":"Let's remove the year from the **title** column by using pandas' replace function and store in a new **year** column.\n","c2851936":"### Advantages and Disadvantages of Collaborative Filtering\n\n##### Advantages\n\n-   Takes other user's ratings into consideration\n-   Doesn't need to study or extract information from the recommended item\n-   Adapts to the user's interests which might change over time\n\n##### Disadvantages\n\n-   Approximation function can be slow\n-   There might be a low of amount of users to approximate\n-   Privacy issues when trying to learn the user's preferences","9f98648c":"Every row in the ratings dataframe has a user id associated with at least one movie, a rating and a timestamp showing when they reviewed it. We won't be needing the timestamp column, so let's drop it to save on memory.\n","f6f0de66":"With that, let's also drop the genres column since we won't need it for this particular recommendation system.\n","e3c886ca":"#### The users who has seen the same movies\n\nNow with the movie ID's in our input, we can now get the subset of users that have watched and reviewed the movies in our input.\n","d93e86eb":"# Read Data","33e7c91a":"Here's how the final ratings Dataframe looks like:\n","98961351":"Now let's sort it and see the top 20 movies that the algorithm recommended!\n","279115ab":"<hr>\n\n<a id=\"ref3\"><\/a>\n\n# Collaborative Filtering","595b4c80":"Let's begin by creating an input user to recommend movies to:\n\nNotice: To add more movies, simply increase the amount of elements in the userInput. Feel free to add more in! Just be sure to write it in with capital letters and if a movie starts with a \"The\", like \"The Matrix\" then write it in like this: 'Matrix, The' .","a316960b":"# Find Similar Users","040c3b2e":"#### The top x similar users to input user\n\nNow let's get the top 50 users that are most similar to the input.\n","0e86ea7c":"# Recommend Movies","965b539e":"# Preprocess Data","2d083bda":"Now, time to start our work on recommendation systems. \n\nThe first technique we're going to take a look at is called **Collaborative Filtering**, which is also known as **User-User Filtering**. As hinted by its alternate name, this technique uses other users to recommend items to the input user. It attempts to find users that have similar preferences and opinions as the input and then recommends items that they have liked to the input. There are several methods of finding similar users (Even some making use of Machine Learning), and the one we will be using here is going to be based on the **Pearson Correlation Function**.\n\n<img src=\"https:\/\/cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud\/IBMDeveloperSkillsNetwork-ML0101EN-SkillsNetwork\/labs\/Module%205\/images\/User_Item.png\" width=800px>\n\nThe process for creating a User Based recommendation system is as follows:\n\n-   Select a user with the movies the user has watched\n-   Based on his rating to movies, find the top X neighbours \n-   Get the watched movie record of the user for each neighbour.\n-   Calculate a similarity score using some formula\n-   Recommend the items with the highest score\n\n","442cb5ef":"Let's also sort these groups so the users that share the most movies in common with the input have higher priority. This provides a richer recommendation since we won't go through every single user.\n","4d2e1668":"Now, we calculate the Pearson Correlation between input user and subset group, and store it in a dictionary, where the key is the user Id and the value is the coefficient\n","34c217c3":"So each movie has a unique ID, a title with its release year along with it (Which may contain unicode characters) and several different genres in the same field. Let's remove the year from the title column and place it into its own one by using the handy [extract](http:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.Series.str.extract.html#pandas.Series.str.extract?cm_mmc=Email_Newsletter-_-Developer_Ed%2BTech-_-WW_WW-_-SkillsNetwork-Courses-IBMDeveloperSkillsNetwork-ML0101EN-SkillsNetwork-20718538&cm_mmca1=000026UJ&cm_mmca2=10006555&cm_mmca3=M12345678&cvosrc=email.Newsletter.M12345678&cvo_campaign=000026UJ&cm_mmc=Email_Newsletter-_-Developer_Ed%2BTech-_-WW_WW-_-SkillsNetwork-Courses-IBMDeveloperSkillsNetwork-ML0101EN-SkillsNetwork-20718538&cm_mmca1=000026UJ&cm_mmca2=10006555&cm_mmca3=M12345678&cvosrc=email.Newsletter.M12345678&cvo_campaign=000026UJ) function that Pandas has.\n","7545b101":"lets look at one of the users, e.g. the one with userID=1130\n","53143e84":"#### Similarity of users to input user\n\nNext, we are going to compare all users (not really all !!!) to our specified user and find the one that is most similar.  \nwe're going to find out how similar each user is to the input through the **Pearson Correlation Coefficient**. It is used to measure the strength of a linear association between two variables. The formula for finding this coefficient between sets X and Y with N values can be seen in the image below. \n\nWhy Pearson Correlation?\n\nPearson correlation is invariant to scaling, i.e. multiplying all elements by a nonzero constant or adding any constant to all elements. For example, if you have two vectors X and Y,then, pearson(X, Y) == pearson(X, 2 * Y + 3). This is a pretty important property in recommendation systems because for example two users might rate two series of items totally different in terms of absolute rates, but they would be similar users (i.e. with similar ideas) with similar rates in various scales .\n\n![alt text](https:\/\/wikimedia.org\/api\/rest_v1\/media\/math\/render\/svg\/bd1ccc2979b0fd1c1aec96e386f686ae874f9ec0 \"Pearson Correlation\")\n\nThe values given by the formula vary from r = -1 to r = 1, where 1 forms a direct correlation between the two entities (it means a perfect positive correlation) and -1 forms a perfect negative correlation. \n\nIn our case, a 1 means that the two users have similar tastes while a -1 means the opposite.\n\nWe will select a subset of users to iterate through. This limit is imposed because we don't want to waste too much time going through every single user.\n","191cf163":"Here's the final movies dataframe:\n"}}