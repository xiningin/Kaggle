{"cell_type":{"769d9d64":"code","39c0c06d":"code","e851b797":"code","af5b26c6":"code","aaadd434":"code","88a59122":"code","ee8f70d8":"code","e1b468ce":"code","53ffd2a2":"code","cba80f4f":"code","37348385":"code","845efb52":"code","8378ca95":"code","aeca185c":"code","fb22acf0":"code","47c42e8f":"code","a8e0d93f":"code","1df3d5fb":"code","075de392":"code","4b9ea187":"code","3028b123":"code","d4234e23":"code","1a9c71d9":"code","0e8ac2c2":"code","4131c4ec":"code","e44004a9":"code","04e7e63a":"code","833da658":"code","e3376fda":"code","0ef16c5f":"code","e50bc9ca":"code","32565204":"code","0d31ce19":"code","8ad96e37":"code","b00be9bb":"code","0798cc48":"code","3008a6ea":"code","92353f77":"code","03723ac9":"code","1ae9d3ea":"code","02139cc4":"code","e902602a":"code","b0739d01":"code","c2046955":"code","4fb7e6d1":"code","d7e213b4":"code","460bb6ed":"code","af4b1e4e":"code","8b43dfa8":"code","e57f7f41":"code","c4a92ed4":"code","653f59c0":"code","7e4e2f89":"code","c66b9f7c":"code","9ff78b4c":"code","af7c29c2":"code","e98e5859":"code","68cb53f9":"code","bdc98e19":"code","6f466323":"code","44f7bfdd":"code","74f07447":"code","88d15524":"code","9edd7628":"code","fde3a7e9":"code","356633d7":"code","4e9b42bf":"code","57f0f901":"markdown","cbec6422":"markdown","a1ca54e3":"markdown","b2adbfe3":"markdown","c2faecbb":"markdown"},"source":{"769d9d64":"import warnings\nwarnings.filterwarnings('ignore')","39c0c06d":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","e851b797":"df = pd.read_csv(\"..\/input\/breast-cancer-dataset\/data.csv\")\ndf","af5b26c6":"df.columns","aaadd434":"df.info()","88a59122":"df['Unnamed: 32']","ee8f70d8":"df = df.drop(\"Unnamed: 32\", axis=1)","e1b468ce":"df.head()","53ffd2a2":"df.drop('id', axis = 1, inplace = True)","cba80f4f":"df.columns","37348385":"type(df.columns)","845efb52":"l = list(df.columns)\nprint(l)","8378ca95":"features_mean = l[1:11]\n\nfeatures_se = l[11:21]\n\nfeatures_worst = l[21:]","aeca185c":"print(features_mean)","fb22acf0":"print(features_se)","47c42e8f":"print(features_worst)","a8e0d93f":"df['diagnosis'].unique()","1df3d5fb":"df['diagnosis'].value_counts()","075de392":"sns.countplot(df['diagnosis'], label=\"Count\");","4b9ea187":"df.shape","3028b123":"df.describe()","d4234e23":"len(df.columns)","1a9c71d9":"# Correlation Plot\ncorr = df.corr()\ncorr","0e8ac2c2":"corr.shape","4131c4ec":"plt.figure(figsize=(8,8))\nsns.heatmap(corr);","e44004a9":"df.head()","04e7e63a":"df['diagnosis'] = df['diagnosis'].map({'M':1, 'B':0})","833da658":"df.head()","e3376fda":"df['diagnosis'].unique()","0ef16c5f":"X = df.drop('diagnosis', axis=1)\nX.head()","e50bc9ca":"y = df['diagnosis']\ny.head()","32565204":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state = 0)","0d31ce19":"df.shape","8ad96e37":"X_test.shape","b00be9bb":"X_train.shape","0798cc48":"y_test.shape","3008a6ea":"y_train.shape","92353f77":"X_train.head(1)","03723ac9":"from sklearn.preprocessing import StandardScaler\nss = StandardScaler()\nX_train = ss.fit_transform(X_train)\nX_test = ss.transform(X_test)","1ae9d3ea":"X_train","02139cc4":"from sklearn.linear_model import LogisticRegression\nlr = LogisticRegression()\nlr.fit(X_train, y_train)","e902602a":"y_pred = lr.predict(X_test)","b0739d01":"y_pred","c2046955":"y_test","4fb7e6d1":"from sklearn.metrics import accuracy_score\nprint(accuracy_score(y_test, y_pred))","d7e213b4":"lr_acc = accuracy_score(y_test, y_pred)\nprint(lr_acc)","460bb6ed":"results = pd.DataFrame()\nresults","af4b1e4e":"tempResults = pd.DataFrame({'Algorithm':['Logistic Regression Method'], 'Accuracy':[lr_acc]})\nresults = pd.concat( [results, tempResults] )\nresults = results[['Algorithm','Accuracy']]\nresults","8b43dfa8":"from sklearn.tree import DecisionTreeClassifier\ndtc = DecisionTreeClassifier()\ndtc.fit(X_train, y_train)","e57f7f41":"y_pred = dtc.predict(X_test)\ny_pred","c4a92ed4":"y_test","653f59c0":"from sklearn.metrics import accuracy_score\nprint(accuracy_score(y_test, y_pred))","7e4e2f89":"dtc_acc = accuracy_score(y_test, y_pred)\nprint(dtc_acc)","c66b9f7c":"tempResults = pd.DataFrame({'Algorithm':['Decision tree Classifier Method'], 'Accuracy':[dtc_acc]})\nresults = pd.concat( [results, tempResults] )\nresults = results[['Algorithm','Accuracy']]\nresults","9ff78b4c":"from sklearn.ensemble import RandomForestClassifier\nrfc = RandomForestClassifier()\nrfc.fit(X_train, y_train)","af7c29c2":"y_pred = rfc.predict(X_test)\ny_pred","e98e5859":"y_test","68cb53f9":"from sklearn.metrics import accuracy_score\nprint(accuracy_score(y_test, y_pred))","bdc98e19":"rfc_acc = accuracy_score(y_test, y_pred)\nprint(rfc_acc)","6f466323":"tempResults = pd.DataFrame({'Algorithm':['Random Forest Classifier Method'], 'Accuracy':[rfc_acc]})\nresults = pd.concat( [results, tempResults] )\nresults = results[['Algorithm','Accuracy']]\nresults","44f7bfdd":"from sklearn import svm\nsvc = svm.SVC()\nsvc.fit(X_train,y_train)","74f07447":"y_pred = svc.predict(X_test)\ny_pred","88d15524":"y_test","9edd7628":"from sklearn.metrics import accuracy_score\nprint(accuracy_score(y_test, y_pred))","fde3a7e9":"svc_acc = accuracy_score(y_test, y_pred)\nprint(svc_acc)","356633d7":"tempResults = pd.DataFrame({'Algorithm':['Support Vector Classifier Method'], 'Accuracy':[svc_acc]})\nresults = pd.concat( [results, tempResults] )\nresults = results[['Algorithm','Accuracy']]\nresults","4e9b42bf":"# Replace M & B with 1 & 0 respectively.\n\ncancer_data = (13.28,20.28,87.32,545.2,0.1041,0.1436,0.09847,0.06158,0.1974,0.06782,0.3704,0.8249,2.427,31.33,0.005072,0.02147,0.02185,0.00956,0.01719,0.003317,17.38,28,113.1,907.2,0.153,0.3724,0.3664,0.1492,0.3739,0.1027)\n\n# changing input_data to a numpy array\ninput_data_as_numpy_array = np.asarray(cancer_data)\n\n# reshape the array\ninput_data_reshaped = input_data_as_numpy_array.reshape(1,-1)\n\nprediction = lr.predict(input_data_reshaped)\n\nif prediction[0] == 0:\n    print('The diagnosis is Benign')\n    \nelse:\n    print('The diagnosis is Malignant')","57f0f901":"# Logistic Regression Model","cbec6422":"# Explore the Data\n","a1ca54e3":"# Decission Tree Classifier Model","b2adbfe3":"# Support Vector Classifier\n","c2faecbb":"# Random Forest Classifier"}}