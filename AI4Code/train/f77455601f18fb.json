{"cell_type":{"f0cfef9c":"code","9b4709d5":"code","045b52ab":"code","34b0173a":"code","4cdae69b":"code","4e2b1a93":"code","57293db2":"code","44165817":"code","9f87f0fc":"code","0378bbbf":"code","e5eddb60":"code","67a8f610":"code","ea0a503a":"code","59c300b2":"code","f2bee74f":"code","767b3234":"code","cf121461":"code","92b4c45d":"code","1e31ca01":"code","e7facf0c":"code","644519e8":"code","cc19348c":"code","85f7eb0d":"code","f404807b":"code","f17360d6":"code","d3124401":"code","62a153cc":"code","16fae267":"code","8aa3893a":"code","4742ffd8":"code","1749401a":"code","83951ec9":"code","57167b6b":"code","7b1ad26b":"code","3a792c95":"code","0ff271fb":"code","291f7af5":"code","0c71f9ce":"code","d6abad43":"code","5cfac57f":"code","8183cbe1":"code","a0e508b7":"code","a5877255":"code","3be4c4ef":"code","f0c31f91":"code","5441f291":"code","2036d225":"code","a7f14d4f":"markdown","5f5eb967":"markdown","62d7f8f1":"markdown","438db188":"markdown","2bd057f3":"markdown","f7afabd6":"markdown","d9caf5d2":"markdown","ff64c5d8":"markdown","7dece8b0":"markdown","352ea9a4":"markdown","01f23d15":"markdown","13d46e2b":"markdown","1bfbc128":"markdown","2d41ed36":"markdown","e8924cfb":"markdown","6953535b":"markdown","4949bb06":"markdown","13dd1e57":"markdown","5c624e03":"markdown","bd4eeae7":"markdown","0a9fcd5f":"markdown","c47449b9":"markdown","46961cdc":"markdown","1a549ba5":"markdown","4dbe61b1":"markdown","8749cd56":"markdown","c925d5c1":"markdown","e3f8fcb1":"markdown","663b373d":"markdown","57f763f9":"markdown","30bc6750":"markdown"},"source":{"f0cfef9c":"# Data handling\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport datetime as dt\nfrom pandas.io.json import json_normalize\n\n# save utils\nimport pickle\n\n# Visualisation\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(style=\"darkgrid\")\nfrom plotly import tools\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport cufflinks as cf\ncf.go_offline()\n\n# ML\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression, Ridge\nfrom xgboost import XGBRegressor\nfrom xgboost import plot_importance","9b4709d5":"train = pd.read_csv('..\/input\/train_V2.csv').dropna() # One line is dropped\ntest = pd.read_csv('..\/input\/test_V2.csv')","045b52ab":"train.head()","34b0173a":"print(\"There are %s matches in the training set and %s in the test set\" % (train['matchId'].nunique(), test['matchId'].nunique()))","4cdae69b":"train_grouped = train[['matchType', 'matchId']]\\\n    .drop_duplicates().groupby('matchType').agg({'matchId': 'count'}).reset_index()\n\ndata = [go.Bar(x=train_grouped.matchType, y=train_grouped.matchId)]\n\nlayout = go.Layout(\n    title='matchType training set distribution',\n    xaxis=dict(\n        title='matchType'\n    ),\n    yaxis=dict(\n        title='Number of occurences'\n    )\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","4e2b1a93":"train_grouped = train[['Id', 'matchId']]\\\n    .groupby('matchId')\\\n    .agg({'Id': 'count'})\\\n    ['Id'].value_counts()\\\n    .reset_index()\n                                                                 \ndata = [go.Bar(x=train_grouped['index'], y=train_grouped.Id)]\n\nlayout = go.Layout(\n    title='Number of player per match distribution',\n    xaxis=dict(\n        title='Number of players'\n    ),\n    yaxis=dict(\n        title='Number of occurences'\n    )\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","57293db2":"train_grouped = train[['Id', 'matchId','matchType']]\\\n    .groupby(['matchId','matchType'], as_index=False)\\\n    .agg({'Id': 'count'})\\\n    .groupby(['matchType', 'Id'], as_index=False)\\\n    .agg({'matchId': 'count'})\\\n    .rename(columns={'Id': 'Nb_Players'})\\\n    .pivot(index='Nb_Players', columns='matchType', values='matchId')\\\n    .fillna(0)    \n\ntrain_grouped.iplot(kind='bar', barmode='stack', title='Number of players distributions per matchType')   ","44165817":"train_grouped = train.assign(matchDurationMin = lambda x: np.floor(x.matchDuration \/ 60))[['matchDurationMin', 'matchId']]\\\n    .groupby('matchDurationMin', as_index = False)\\\n    .agg({'matchId': 'count'})\\\n\ndata = [go.Bar(x=train_grouped.matchDurationMin, y=train_grouped.matchId)]\n\nlayout = go.Layout(\n    title='Match duration in minute training set distribution',\n    xaxis=dict(\n        title='matchDuration in minutes'\n    ),\n    yaxis=dict(\n        title='Number of occurences'\n    )\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","9f87f0fc":"train_grouped = train.assign(matchDurationMin = lambda x: np.floor(x.matchDuration \/ 60))[['matchType', 'matchDurationMin', 'matchId']]\\\n    .groupby(['matchType', 'matchDurationMin'], as_index = False)\\\n    .agg({'matchId': 'count'})\\\n    .pivot(index='matchDurationMin', columns='matchType', values='matchId')\\\n    .fillna(0)\n\ntrain_grouped.iplot(kind='bar', barmode='stack', title='Match duration in minutes distribution per matchType')                   ","0378bbbf":"def addNbPlayersFeature(df):\n    df_res = df\n    df_res = df_res.assign(nb_players_total=df_res.groupby('matchId')['Id'].transform('count'))\n    df_res = df_res.assign(nb_players_team=df_res.groupby(['matchId', 'groupId'])['Id'].transform('count'))\n    return df_res\n\ntrain = addNbPlayersFeature(train)","e5eddb60":"def addNbKillsFeature(df):\n    df_res = df.assign(nb_kills_team = df.groupby(['matchId', 'groupId'])['kills'].transform('sum'))\n    return df_res\n\ntrain = addNbKillsFeature(train)","67a8f610":"def addKillPlaceQuantileInformation(df):\n    df_res = df\n    \n    df_res['median_kill_place_team'] = df_res.groupby(['matchId', 'groupId'])['killPlace'].transform(np.median)\n    df_res['median_kill_place_all'] = df_res.groupby('matchId')['killPlace'].transform(np.median)\n    df_res['delta_median_kill_place_team_all'] = df_res.median_kill_place_all - df_res.median_kill_place_team\n    df_res['max_kill_place_team'] = df_res.groupby(['matchId', 'groupId'])['killPlace'].transform(np.max)\n    df_res['min_kill_place_team'] = df_res.groupby(['matchId', 'groupId'])['killPlace'].transform(np.min)\n\n    return df_res\n    \ntrain = addKillPlaceQuantileInformation(train)","ea0a503a":"trf = train.groupby([pd.cut(train.median_kill_place_team, 25), pd.cut(train.median_kill_place_all, 25)]).winPlacePerc.mean().unstack()\n\ndata = [\n    go.Contour(\n        z=trf.values,\n    )]\n\nlayout = go.Layout(\n    title='mean winRankPct in the training set (color) given Median team kill Place and ',\n    xaxis=dict(\n        title='median killPlace team (\/4)'\n    ),\n    yaxis=dict(\n        title='median killPlace all (\/4)'\n    )\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","59c300b2":"sample = train.sample(frac=0.0001)\n\n# Create a trace\ntrace = go.Scatter(\n    x = sample.median_kill_place_all - sample.median_kill_place_team,\n    y = sample.winPlacePerc,\n    text= ['winPlacePerc: %s' % s for s in sample.winPlacePerc],\n    mode = 'markers'\n)\n\ndata = [trace]\n\nlayout = go.Layout(\n    title='winPlacePerc given difference in killPlace team\/all (sample)',\n    xaxis=dict(\n        title='median killPlace all - median killPlace team'\n    ),\n    yaxis=dict(\n        title='winPlacePerc'\n    )\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","f2bee74f":"sample = train.sample(frac=0.0001)\n\n# Create a trace\ntrace = go.Scatter(\n    x = sample.median_kill_place_all - sample.killPlace,\n    y = sample.winPlacePerc,\n    text= ['winPlacePerc: %s' % s for s in sample.winPlacePerc],\n    mode = 'markers',\n    marker=dict(\n        color=sample.nb_players_team\n    )\n)\n\ndata = [trace]\n\nlayout = go.Layout(\n    title='winPlacePerc given difference in killPlace individual\/all (sample)',\n    xaxis=dict(\n        title='median killPlace all - median killPlace individual'\n    ),\n    yaxis=dict(\n        title='winPlacePerc'\n    )\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","767b3234":"# \/!\\ quantiles 75 and 95 take time to compute\ndef addRankingQuantileInformation(df):\n    df_res = df\n    \n    df_res['median_ranking_team'] = df_res.groupby(['matchId', 'groupId'])['rankPoints'].transform(np.median)\n    #df_res['pct75_ranking_team'] = df_res.groupby(['matchId', 'groupId'])['rankPoints'].transform(lambda x:np.quantile(x, 0.75))\n    #df_res['pct95_ranking_team'] = df_res.groupby(['matchId', 'groupId'])['rankPoints'].transform(lambda x:np.quantile(x, 0.95))\n    \n    df_res['median_ranking_all'] = df_res.groupby('matchId')['rankPoints'].transform(np.median)\n    #df_res['pct75_ranking_all'] = df_res.groupby('matchId')['rankPoints'].transform(lambda x:np.quantile(x, 0.75))\n    #df_res['pct95_ranking_all'] = df_res.groupby('matchId')['rankPoints'].transform(lambda x:np.quantile(x, 0.95))\n    \n    df_res['delta_median_ranking_team_all'] = df_res.median_ranking_all - df_res.median_ranking_team\n    \n    return df_res\n    \ntrain = addRankingQuantileInformation(train)","cf121461":"sample = train.sample(frac=0.0001)\n\n# Create a trace\ntrace = go.Scatter(\n    x = sample.median_ranking_team,\n    y = sample.median_ranking_all,\n    text= ['winPlacePerc: %s' % s for s in sample.winPlacePerc],\n    mode = 'markers',\n    marker=dict(\n        size=7,\n        color=10*sample.winPlacePerc\n    )\n)\n\ndata = [trace]\nlayout = go.Layout(\n    title='winPlacePerc (bubble color) given median_ranking_team, median_ranking_all (sample)',\n    xaxis=dict(\n        title='median ranking team'\n    ),\n    yaxis=dict(\n        title='median ranking all'\n    )\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","92b4c45d":"sample = train.sample(frac=0.0001)\n\n# Create a trace\ntrace = go.Scatter(\n    x = sample.median_ranking_all - sample.median_ranking_team,\n    y = sample.winPlacePerc,\n    text= ['winPlacePerc: %s' % s for s in sample.winPlacePerc],\n    mode = 'markers'\n)\n\ndata = [trace]\nlayout = go.Layout(\n    title='winPlacePerc given difference median_ranking_team, median_ranking_all (sample)',\n    xaxis=dict(\n        title='median ranking all - median ranking team'\n    ),\n    yaxis=dict(\n        title='winPlacePerc'\n    )\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","1e31ca01":"def addDamageDealtInformation(df):\n    df_res = df\n    \n    df_res['mean_damage_dealt_team'] = df_res.groupby(['matchId', 'groupId'])['damageDealt'].transform(np.mean)\n    df_res['max_damage_dealt_team'] = df_res.groupby(['matchId', 'groupId'])['damageDealt'].transform(np.max)\n    df_res['min_damage_dealt_team'] = df_res.groupby(['matchId', 'groupId'])['damageDealt'].transform(np.min)\n    \n    df_res['mean_damage_dealt_all'] = df_res.groupby('matchId')['damageDealt'].transform(np.mean)\n    df_res['max_damage_dealt_all'] = df_res.groupby('matchId')['damageDealt'].transform(np.max)\n    df_res['min_damage_dealt_all'] = df_res.groupby('matchId')['damageDealt'].transform(np.min)\n    \n    return df_res\n    \ntrain = addDamageDealtInformation(train)","e7facf0c":"sample = train.sample(frac=0.0001)\n\n# Create a trace\ntrace = go.Scatter(\n    x = sample.mean_damage_dealt_all - sample.damageDealt,\n    y = sample.winPlacePerc,\n    text= ['winPlacePerc: %s' % s for s in sample.winPlacePerc],\n    mode = 'markers'\n)\n\ndata = [trace]\n\nlayout = go.Layout(\n    title='winPlacePerc given difference mean_damageDealt_team, mean_damageDealt_all (sample)',\n    xaxis=dict(\n        title='mean damageDealt all - mean damageDealt team'\n    ),\n    yaxis=dict(\n        title='winPlacePerc'\n    )\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","644519e8":"def addDistanceWalked(df):\n    df_res = df\n    df_res['mean_distance_walked_team'] = df_res.groupby(['matchId', 'groupId'])['walkDistance'].transform(np.mean)\n    df_res['max_distance_walked_team'] = df_res.groupby(['matchId', 'groupId'])['walkDistance'].transform(np.max)\n    df_res['min_distance_walked_team'] = df_res.groupby(['matchId', 'groupId'])['walkDistance'].transform(np.min)\n    \n    df_res['mean_distance_walked_all'] = df_res.groupby(['matchId'])['walkDistance'].transform(np.mean)\n    df_res['max_distance_walked_all'] = df_res.groupby(['matchId'])['walkDistance'].transform(np.max)\n    df_res['min_distance_walked_all'] = df_res.groupby(['matchId'])['walkDistance'].transform(np.min)\n    \n    df_res['delta_mean_distance_walked_team_all'] = df_res.mean_distance_walked_team - df_res.mean_distance_walked_all\n    \n    return df_res\n\ntrain = addDistanceWalked(train)","cc19348c":"sample = train.sample(frac=0.0001)\n\n# Create a trace\ntrace = go.Scatter(\n    x = sample.mean_distance_walked_team - sample.mean_distance_walked_all,\n    y = sample.winPlacePerc,\n    text= ['winPlacePerc: %s' % s for s in sample.winPlacePerc],\n    mode = 'markers',\n    marker=dict(\n        color=sample.nb_players_team\n    )\n)\n\ndata = [trace]\nlayout = go.Layout(\n    title='winPlacePerc given difference mean_distance_walked_team, mean_distance_walked_all (sample)',\n    xaxis=dict(\n        title='mean_distance_walked_team - mean_distance_walked_all'\n    ),\n    yaxis=dict(\n        title='winPlacePerc'\n    )\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","85f7eb0d":"def addWeaponsAcquired(df):\n    df_res = df\n    df_res['mean_weapons_acquired_team'] = df_res.groupby(['matchId', 'groupId'])['weaponsAcquired'].transform(np.mean)\n    df_res['max_weapons_acquired_team'] = df_res.groupby(['matchId', 'groupId'])['weaponsAcquired'].transform(np.max)\n    df_res['min_weapons_acquired_team'] = df_res.groupby(['matchId', 'groupId'])['weaponsAcquired'].transform(np.min)\n    \n    df_res['mean_weapons_acquired_all'] = df_res.groupby(['matchId'])['weaponsAcquired'].transform(np.mean)\n    df_res['max_weapons_acquired_all'] = df_res.groupby(['matchId'])['weaponsAcquired'].transform(np.max)\n    df_res['min_weapons_acquired_all'] = df_res.groupby(['matchId'])['weaponsAcquired'].transform(np.min)\n    \n    df_res['delta_mean_weapons_acquired_team_all'] = df_res.mean_weapons_acquired_team - df_res.mean_weapons_acquired_all\n    \n    return df_res\n\ntrain = addWeaponsAcquired(train)","f404807b":"train_f = train[(train.mean_weapons_acquired_team>0) & (train.mean_weapons_acquired_team<10)]\ntrain_f = train_f[(train_f.mean_weapons_acquired_all>0) & (train_f.mean_weapons_acquired_all<10)]\n\ntrf = train_f.groupby([pd.cut(train_f.mean_weapons_acquired_team, 5), pd.cut(train_f.mean_weapons_acquired_all, 5)]).winPlacePerc.mean().unstack()\n\ndata = [\n    go.Contour(\n        z=trf.values\n    )]\n\nlayout = go.Layout(\n    title='mean winRankPct in the training set (color) given mean acquired weapons team\/all',\n    xaxis=dict(\n        title='mean acquired weapons team (\/2)'\n    ),\n    yaxis=dict(\n        title='mean acquired weapons all (\/2)'\n    )\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","f17360d6":"sample = train.sample(frac=0.0001)\n\n# Create a trace\ntrace = go.Scatter(\n    x = sample.mean_weapons_acquired_all - sample.mean_weapons_acquired_team,\n    y = sample.winPlacePerc,\n    text= ['winPlacePerc: %s' % s for s in sample.winPlacePerc],\n    mode = 'markers'\n)\n\ndata = [trace]\nlayout = go.Layout(\n    title='winPlacePerc given difference mean_acquiredWeapons all\/team (sample)',\n    xaxis=dict(\n        title='mean_weapons_acquired_all - mean_weapons_acquired_team'\n    ),\n    yaxis=dict(\n        title='winPlacePerc'\n    )\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","d3124401":"other_features = ['assists', 'boosts', 'DBNOs', 'headshotKills', 'heals',\n            'revives', 'vehicleDestroys', 'killStreaks', 'roadKills']\n\ndef addOtherDeltaFeatures(df):\n    df_res = df\n    for f in other_features:\n        df_res['mean_%s_team' % f] = df_res.groupby(['matchId', 'groupId'])[f].transform(np.mean)\n        df_res['mean_%s_all' % f] = df_res.groupby('matchId')[f].transform(np.mean)\n        df_res['delta_mean_%s_team_all' % f] = df_res['mean_%s_team' % f] - df_res['mean_%s_all' % f]\n        \n    return df_res\n\ntrain = addOtherDeltaFeatures(train)\n    \n        ","62a153cc":"corr = train[['winPlacePerc',\n       'delta_median_ranking_team_all',\n       'delta_median_kill_place_team_all',\n       'delta_mean_distance_walked_team_all',\n      'delta_mean_weapons_acquired_team_all',\n             'delta_mean_assists_team_all',\n       'delta_mean_boosts_team_all', 'delta_mean_DBNOs_team_all',\n       'delta_mean_headshotKills_team_all', 'delta_mean_heals_team_all',\n       'delta_mean_revives_team_all', 'delta_mean_vehicleDestroys_team_all',\n       'delta_mean_killStreaks_team_all', 'delta_mean_roadKills_team_all']].corr()","16fae267":"\ntrace = go.Heatmap(z=corr.values,\n                   x=corr.index,\n                   y=corr.columns)\ndata=[trace]\npy.iplot(data, filename='labelled-heatmap')","8aa3893a":"# Save train dataframe\ntrain.to_pickle('train.pkl')\n\n# Compute features and save test dataframe\ntest = addNbPlayersFeature(test)\ntest = addNbKillsFeature(test)\ntest = addRankingQuantileInformation(test)\ntest = addKillPlaceQuantileInformation(test)\ntest = addDistanceWalked(test)\ntest = addWeaponsAcquired(test)\ntest = addDamageDealtInformation(test)\ntest = addOtherDeltaFeatures(test)\n\ntest.to_pickle('test.pkl')","4742ffd8":"from sklearn.linear_model import LinearRegression, Ridge\n","1749401a":"features_selected = [\n    'delta_median_kill_place_team_all',\n    'delta_mean_distance_walked_team_all',\n    'delta_mean_weapons_acquired_team_all',\n    'delta_mean_boosts_team_all',\n    'delta_mean_heals_team_all',\n    'delta_mean_killStreaks_team_all',\n    'winPlacePerc'\n]","83951ec9":"reg = LinearRegression()\n#reg = Ridge(alpha = 100000)","57167b6b":"train_linear = train[features_selected].dropna()\ntest_linear = test[[f for f in features_selected if f!='winPlacePerc'] + ['Id']]","7b1ad26b":"Y_train = train_linear.winPlacePerc\nX_train = train_linear.drop(columns=['winPlacePerc'], axis=1)\n\nreg = reg.fit(X_train, Y_train)\nfirst_pred = reg.predict(X_train)","3a792c95":"# With a linear regression we could expect ~0.08MAE\nnp.mean(abs(first_pred-Y_train))","0ff271fb":"train = pd.read_pickle('train.pkl')\ntest = pd.read_pickle('test.pkl')\n","291f7af5":"test.columns","0c71f9ce":"# Select features\nfeatures_selected = [\n    # - - - Dataset features \n    #'Id',\n    #'groupId',\n    #'matchId',\n    'assists',\n    'boosts',\n    #'damageDealt',\n    #'DBNOs',\n    #'headshotKills',\n    'heals',\n    'killPlace',\n    'killPoints',\n    'kills',\n    'killStreaks',\n    #'longestKill',\n    'matchDuration',\n    #'matchType',\n    #'maxPlace',\n    'numGroups',\n    'rankPoints',\n    #'revives',\n    #'rideDistance',\n    #'roadKills',\n    #'swimDistance',\n    'teamKills',\n    #'vehicleDestroys',\n    #'walkDistance',\n    #'weaponsAcquired',\n    'winPoints',\n    'winPlacePerc',\n    # - - - Computed features \n    'nb_players_total',\n    'nb_players_team',\n    'nb_kills_team',\n    'median_ranking_team',\n    'median_ranking_all',\n    'median_kill_place_team',\n    'delta_median_ranking_team_all',\n    'delta_median_kill_place_team_all',\n    'mean_damage_dealt_team',\n    'max_damage_dealt_team',\n    'min_damage_dealt_team',\n    'mean_damage_dealt_all',\n    'max_damage_dealt_all',\n    'min_damage_dealt_all',\n    #'delta_mean_distance_walked_team_all',\n    'mean_distance_walked_team',\n    'max_distance_walked_team',\n    'min_distance_walked_team',\n    'mean_distance_walked_all',\n    'max_distance_walked_all',\n    'min_distance_walked_all',\n    #'delta_mean_weapons_acquired_team_all',\n    'max_weapons_acquired_team',\n    'min_weapons_acquired_team',\n    'mean_weapons_acquired_team',\n    'max_weapons_acquired_all',\n    'min_weapons_acquired_all',\n    'mean_weapons_acquired_all',\n    #'linear_pred',\n    #'delta_mean_assists_team_all',\n    'mean_assists_all',\n    'mean_assists_team',\n    #'delta_mean_boosts_team_all',\n    'mean_boosts_all',\n    'mean_boosts_team',\n    #'delta_mean_DBNOs_team_all',\n    'mean_DBNOs_all',\n    'mean_DBNOs_team',\n    'delta_mean_headshotKills_team_all',\n    'delta_mean_heals_team_all',\n    #'delta_mean_revives_team_all',\n    #'delta_mean_vehicleDestroys_team_all',\n    'delta_mean_killStreaks_team_all',\n    'delta_mean_roadKills_team_all',\n    'mean_roadKills_team',\n    'mean_roadKills_all'\n]\n","d6abad43":"train = train[features_selected].dropna()\ntest = test[[f for f in features_selected if f!='winPlacePerc'] + ['Id']]\n\ntrain, valid = train_test_split(train, test_size=0.2)","5cfac57f":"Y_train = train.winPlacePerc\nX_train = train.drop(columns=['winPlacePerc'], axis=1)\n\nY_valid = valid.winPlacePerc\nX_valid = valid.drop(columns=['winPlacePerc'], axis=1)","8183cbe1":"X_train.info()","a0e508b7":"\nfrom xgboost import XGBRegressor\nfrom xgboost import plot_importance\nimport time\nts = time.time()\n\nmodel = XGBRegressor(\n    max_depth=8,\n    n_estimators=200,\n    min_child_weight=100, \n    colsample_bytree=0.8, \n    subsample=0.8, \n    eta=0.6,    \n    seed=42)\n\nmodel.fit(\n    X_train, \n    Y_train, \n    eval_metric=\"mae\", \n    eval_set=[(X_train, Y_train), (X_valid, Y_valid)], \n    verbose=True, \n    early_stopping_rounds = 10)\n\ntime.time() - ts\n","a5877255":"def plot_features(booster, figsize):    \n    fig, ax = plt.subplots(1,1,figsize=figsize)\n    return plot_importance(booster=booster, ax=ax)\n\nplot_features(model, (10,14))\n","3be4c4ef":"Y_pred = model.predict(test[[f for f in features_selected if f!='winPlacePerc']]).clip(0, 1)","f0c31f91":"Y_pred","5441f291":"\nsubmission = pd.DataFrame({\n    \"ID\": test.Id, \n    \"winPlacePerc\": Y_pred\n})\nsubmission.to_csv('xgb_submission.csv', index=False)\n\n# save predictions for an ensemble\npickle.dump(Y_pred, open('xgb_train.pickle', 'wb'))","2036d225":"submission","a7f14d4f":"## Number of players","5f5eb967":"It almost looks linearly separable, we can guess this will be useful in regression. another way to llok at it is to make a sampled scatterplot","62d7f8f1":" # Regression baseline","438db188":"\n## Computed features correlation with winPlacePct","2bd057f3":"## Distance walked","f7afabd6":"This feature seems nice as well (we could have guessed that upfront). Color here shows the nb of players in the game","d9caf5d2":"We see here outliers with rank=0. Zooming in the bubble, we don't see something coming up in particular, confirmed by the scatterplot below:","ff64c5d8":"Note: Looking 'per team' is important. As you can see below individual killPlace is not as strong:","7dece8b0":"This might be because the winPlacePerc is computed 'per team'","352ea9a4":"This does not seem related to any matchType in particular. This might be due to the gameplay itself. (battle royal with shrinking areas)","01f23d15":"## Other features","13d46e2b":"# Checkpoint","1bfbc128":"The idea is to give as much context as possible about the match for each player (what has done his team if any, what about the opponents)","2d41ed36":"This shows that the other features (except boosts) seem less powerful (poorly correlated with winPlacePerc) than killPlace, distanceWalked, or weaponsAcquired.","e8924cfb":"### How many players games typically gather ?","6953535b":"# Imports","4949bb06":"### How long do games last ?","13dd1e57":"##\u00a0Linear Regression","5c624e03":"### What types of games are mostly played ?","bd4eeae7":"matchTypes occurences are very imbalanced and some matchTypes pretty rares.","0a9fcd5f":"We make out two distincts bulks, let's see if this corresponds to different types of games.","c47449b9":"## XGBoost","46961cdc":"Zooming in we make out that small games are mostly solo games","1a549ba5":"The bulk of the distribution is around 100 players. Let's see if the small clusters correspond to any type of game in particular.","4dbe61b1":"# Data overview ","8749cd56":"#\u00a0Feature Engineering","c925d5c1":"## Number of kills & killPlace","e3f8fcb1":"This looks also almost linearly separable","663b373d":"## Players rankings","57f763f9":"## Weapons Acquired","30bc6750":"## Damage Dealt"}}