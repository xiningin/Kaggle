{"cell_type":{"7b33479f":"code","959a07de":"code","9e5fff61":"code","6f1f90b4":"code","69611b8c":"code","889550e9":"code","01c7ee77":"code","fc7fb6fe":"code","4a7d369d":"code","d15c310d":"code","783a6de2":"code","181fc228":"code","b28f9811":"code","b1995d3f":"code","ca38ef00":"code","974bc052":"code","dfbfce39":"code","da697c1f":"code","239411a3":"code","d3232fbd":"code","024492d8":"code","9afd65ee":"code","274d7e8c":"code","5536f546":"code","5acdd3a4":"code","f03b4dcc":"code","431389c8":"code","a7dd18e7":"code","5e0803ef":"code","29926235":"code","b5246a2b":"code","e1d6b4d1":"code","44c88b73":"code","875ec6a8":"code","2c181502":"code","87230349":"code","a48d91fe":"code","09b64fcf":"code","2b52e571":"code","7cc211e5":"code","5027edeb":"code","71a4e8f0":"code","16d98460":"code","a2349b4b":"code","c67e05db":"code","5697cdf7":"code","76e9b71b":"code","951ff6a1":"code","8369c94a":"code","34f76494":"code","a3bce397":"code","84cbe2ce":"code","3e48b7ed":"code","16432e49":"code","0d4d11e9":"code","09882b62":"code","1b5ac719":"code","94c2dfb9":"code","98f992e6":"code","a4f6f16a":"code","05be4710":"code","4073a8ac":"markdown","1c44bf98":"markdown","03313c81":"markdown","fe8bfe72":"markdown","e3eb1c60":"markdown","bd26bd94":"markdown","446d25a1":"markdown","8525cf47":"markdown","174774e4":"markdown","81d2fe39":"markdown","102518f4":"markdown","42c39fb7":"markdown","987f0176":"markdown","8592d909":"markdown","d0aae9cb":"markdown","8228a4c4":"markdown","4cbfe523":"markdown","c7f2d890":"markdown","a79623cf":"markdown","eae47b98":"markdown","4423b57d":"markdown","82929280":"markdown","087375ed":"markdown","cb08d35a":"markdown","cb0604b7":"markdown","954d5867":"markdown","f6afc997":"markdown","d4f4a82c":"markdown","10ea39c4":"markdown","3b52e402":"markdown","8ede33d0":"markdown"},"source":{"7b33479f":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nplt.style.use('ggplot')\nimport warnings\nwarnings.filterwarnings('ignore')\n\n\nfrom tabulate import tabulate\n\nimport nltk        # Imports the natural language toolkit\nfrom nltk.corpus import stopwords\n\npd.set_option(\"display.max_colwidth\", 100)","959a07de":"train_df = pd.read_parquet('..\/input\/kaggle-pog-series-s01e01\/train.parquet')\ntest_df = pd.read_parquet('..\/input\/kaggle-pog-series-s01e01\/test.parquet')\n# ss = pd.read_csv('..\/input\/kaggle-pog-series-s01e01\/sample_submission.csv')\n\n# train_df = pd.read_parquet('train.parquet')\n# test_df = pd.read_parquet('test.parquet')","9e5fff61":"train_df.head(3)","6f1f90b4":"train_df['ratings_disabled'].value_counts()","69611b8c":"train_df.groupby('ratings_disabled')['target'].mean()","889550e9":"train_df=train_df[~train_df['ratings_disabled']]","01c7ee77":"#https:\/\/stackoverflow.com\/questions\/29177498\/python-pandas-replace-nan-in-one-column-with-value-from-corresponding-row-of-sec\ntrain_df.loc[train_df['description'].isnull(),'description'] = train_df['title']","fc7fb6fe":"#https:\/\/stackoverflow.com\/questions\/19377969\/combine-two-columns-of-text-in-pandas-dataframe\ntrain_df['description_2'] = train_df[['title','description']].agg(' '.join, axis=1)\ntrain_df[['title','description','description_2']].head(15)","4a7d369d":"#below only used to clean text for word length count\n\ndef text_process_1(text):\n    #text=text.decode('utf-8')\n    \n    # Replace the xa0 with a space\n    #text=text.replace('xa0',' ')\n    # Replace the \\xa0 with a space\n    #text=text.replace('\\xa0',' ')\n    # Replace the \\n\\n with a space\n    text=text.replace('\\n\\n',' ')\n    # Replace the \\n with a space\n    text=text.replace('\\n',' ')\n    # Replace apostrophes with nothing\n    text=text.replace('\\'','')\n    # Replace http with a space\n    text=text.replace('http','')\n    \n    text=text.replace('#',' ')\n    text=text.replace('!',' ')\n    \n    text=text.replace('\\r',' ')\n    \n    text=text.replace('vlogs',' video logs')\n    \n    \n    tokens = nltk.word_tokenize(text)\n    \n    cleaned_words=[w.lower() for w in tokens if w.isalnum()]\n    #remove any words that are actually digits. \n    no_integers = [x for x in cleaned_words if not (x.isdigit() or x[0] == '-' and x[1:].isdigit())]\n    no_integers = ' '.join(no_integers)\n    \n    return no_integers","d15c310d":"import time\nt_start = time.time()\n\ntrain_df['clean']=train_df['description_2'].apply(lambda x: text_process_1(x))\ntrain_df['wd_len']=train_df['clean'].apply(lambda x: len(nltk.word_tokenize(x)))\n\n\n\nt_stop = time.time()\nprint('Time elapsed: {:.3f} seconds'.format(t_stop - t_start))","783a6de2":"def text_cleaner(df_input):    \n    df_input['clean_text']=df_input['description_2'].str.lower()\n\n    df_input['clean_text']=df_input['clean_text'].str.replace('\\n\\n',' ')\n    df_input['clean_text']=df_input['clean_text'].str.replace('\\n',' ')\n    df_input['clean_text']=df_input['clean_text'].str.replace('\\s',' ')\n    df_input['clean_text']=df_input['clean_text'].str.replace('xa0',' ')\n    df_input['clean_text']=df_input['clean_text'].str.replace('\\xa0',' ')\n\n    df_input['clean_text']=df_input['clean_text'].str.replace('http',' ')\n    #df_input['clean_text']=df_input['clean_text'].str.replace('utc',' ')\n    df_input['clean_text']=df_input['clean_text'].str.replace('www',' ')\n    df_input['clean_text']=df_input['clean_text'].str.replace(r'\\.com',' ')\n    df_input['clean_text']=df_input['clean_text'].str.replace('-',' ')\n    df_input['clean_text']=df_input['clean_text'].str.replace('=',' ')\n    df_input['clean_text']=df_input['clean_text'].str.replace(':',' ')\n    df_input['clean_text']=df_input['clean_text'].str.replace(',',' ')\n    df_input['clean_text']=df_input['clean_text'].str.replace('*',' ')\n\n\n\n    df_input['clean_text']=df_input['clean_text'].str.replace('!','! ') \n    #df_input['clean_text']=df_input['clean_text'].str.replace('\\\"',' ')\n\n    df_input['clean_text']=df_input['clean_text'].str.replace('#',' ')\n    df_input['clean_text']=df_input['clean_text'].str.replace('!',' ')\n    df_input['clean_text']=df_input['clean_text'].str.replace('\\r',' ')\n    df_input['clean_text']=df_input['clean_text'].str.replace('vlogs',' video logs')\n    df_input['clean_text']=df_input['clean_text'].str.replace('lmao',' laughing my ass off')\n    \n    df_input['clean_text']=df_input['clean_text'].str.replace('pga',' professional golf association ')\n    df_input['clean_text']=df_input['clean_text'].str.replace('nba',' national basketball association ')\n    df_input['clean_text']=df_input['clean_text'].str.replace('mlb',' major league baseball ')\n    df_input['clean_text']=df_input['clean_text'].str.replace('nhl',' national hockey league ')\n    df_input['clean_text']=df_input['clean_text'].str.replace('nfl',' national football league ')\n    \n    #iPadOS\n    #iOS etc\n\n        # specific contractions\n    df_input['clean_text']=df_input['clean_text'].str.replace(r\"won\\'t\", \"will not\")\n    df_input['clean_text']=df_input['clean_text'].str.replace(r\"can\\'t\", \"can not\")\n\n        # general contractions\n    df_input['clean_text']=df_input['clean_text'].str.replace(r\"n\\'t\", \" not\")\n    df_input['clean_text']=df_input['clean_text'].str.replace(r\"\\'re\", \" are\")\n    df_input['clean_text']=df_input['clean_text'].str.replace(r\"\\'s\", \" is\")\n    df_input['clean_text']=df_input['clean_text'].str.replace(r\"\\'d\", \" would\")\n    df_input['clean_text']=df_input['clean_text'].str.replace(r\"\\'ll\", \" will\")\n    df_input['clean_text']=df_input['clean_text'].str.replace(r\"\\'t\", \" not\")\n    df_input['clean_text']=df_input['clean_text'].str.replace(r\"\\'ve\", \" have\")\n    df_input['clean_text']=df_input['clean_text'].str.replace(r\"\\'m\", \" am\")\n    \n    \n    df_input['clean_text']=df_input['clean_text'].str.replace(r\"won\\\u2019t\", \"will not\")\n    df_input['clean_text']=df_input['clean_text'].str.replace(r\"can\\\u2019t\", \"can not\")\n\n        # general contractions\n    df_input['clean_text']=df_input['clean_text'].str.replace(r\"n\\\u2019t\", \" not\")\n    df_input['clean_text']=df_input['clean_text'].str.replace(r\"\\\u2019re\", \" are\")\n    df_input['clean_text']=df_input['clean_text'].str.replace(r\"\\\u2019s\", \" is\")\n    df_input['clean_text']=df_input['clean_text'].str.replace(r\"\\\u2019d\", \" would\")\n    df_input['clean_text']=df_input['clean_text'].str.replace(r\"\\\u2019ll\", \" will\")\n    df_input['clean_text']=df_input['clean_text'].str.replace(r\"\\\u2019t\", \" not\")\n    df_input['clean_text']=df_input['clean_text'].str.replace(r\"\\\u2019ve\", \" have\")\n    df_input['clean_text']=df_input['clean_text'].str.replace(r\"\\\u2019m\", \" am\")\n    \n    # Replace apostrophes with nothing\n    df_input['clean_text']=df_input['clean_text'].str.replace('\\'','')\n\n    df_input['clean_text']=df_input['clean_text'].str.replace(r'[^a-zA-Z0-9]',' ')\n    df_input['clean_text']=df_input['clean_text'].str.lower()\n\n    df_input['clean_text'] = df_input['clean_text'].str.replace(r'\\s\\s+', ' ')\n    df_input['clean_text'] = df_input['clean_text'].str.replace('\\s', ' ')\n\n    return df_input","181fc228":"import time\nt_start = time.time()\n\ntrain_df_2=train_df[(train_df['wd_len']<=200) & (train_df['wd_len']>5)].copy()\ntrain_df_2=train_df_2.reset_index()\ntrain_df_2.pop('index')\n\ntrain_df_2=text_cleaner(train_df_2)\n\n\nt_stop = time.time()\nprint('Time elapsed: {:.3f} seconds'.format(t_stop - t_start))","b28f9811":"#https:\/\/stackoverflow.com\/questions\/31726643\/how-to-plot-in-multiple-subplots\n#https:\/\/stackoverflow.com\/questions\/63895392\/seaborn-is-not-plotting-within-defined-subplots\n\nplt.subplot(1,2, 1)\nax = sns.histplot(data=train_df, x='wd_len')\n#ax = sns.displot(data=train_df, x='target', height=8, aspect=1.5)#, bins=30)\n\n#plt.show()\n\nplt.subplot(1,2, 2)\nax = sns.histplot(data=train_df, x='target')\n#ax = sns.displot(data=train_df, x='wd_len', height=8, aspect=1.5)#, bins=30)\n#plt.show()\nplt.gcf().set_size_inches(25,5)\n","b1995d3f":"train_df.loc[train_df['target']<.1,'target_cat'] = 'point_1'\ntrain_df.loc[(train_df['target']>=.1)&(train_df['target']<.2),'target_cat'] = 'point_2'\ntrain_df.loc[(train_df['target']>=.2)&(train_df['target']<.3),'target_cat'] = 'point_3'\ntrain_df.loc[(train_df['target']>=.3)&(train_df['target']<.5),'target_cat'] = 'point_4'","ca38ef00":"plt.subplot(1,2,1)\nax = sns.histplot(data=train_df, x='wd_len', hue='target_cat')\nax = sns.displot(data=train_df, x='wd_len', hue='target_cat',height=8, aspect=1.5)#, bins=30)\n\nplt.subplot(1,2,2)\nax = sns.histplot(data=train_df[train_df['wd_len']<=600], x='wd_len', hue='target_cat')\n#ax = sns.displot(data=train_df[train_df['wd_len']<=600], x='wd_len', hue='target_cat',height=8, aspect=1.5,multiple=\"stack\")#, bins=30)\nplt.gcf().set_size_inches(35,5)","974bc052":"import seaborn as sns, numpy as np\nax = sns.displot(data=train_df[train_df['wd_len']<=600], x='wd_len', hue='target_cat',height=8, aspect=1.5,multiple=\"stack\")#, bins=30)","dfbfce39":"import numpy as np # linear algebra\nimport os, sys\n\nfrom gensim.models import Word2Vec, KeyedVectors\nfrom gensim.test.utils import datapath\n\nimport time\nt_start = time.time()\n\n\n# Get path to file\nvector_size = 300\n\n\nglove_file = '..\/input\/fasttext-crawl-300d-2m\/crawl-300d-2M.vec'\n#glove_file = 'crawl-300d-2M.vec'\n\n# Load with gensim\nmodel = KeyedVectors.load_word2vec_format(glove_file)\n\nt_stop = time.time()\nprint('Time elapsed: {:.3f} seconds'.format(t_stop - t_start))","da697c1f":"min_cols=train_df_2.groupby('video_id').min()\nmin_cols=min_cols.reset_index()\nmin_dt=min_cols[['video_id','trending_date']].copy()\nmin_dt.columns=['video_id', 'min_trending_dt']\n\ntrain_df_4=train_df_2.merge(min_dt, how='inner', on='video_id')\ntrain_df_5=train_df_4[(train_df_4['trending_date']==train_df_4['min_trending_dt'])].copy()\ntrain_df_5=train_df_5.reset_index()","239411a3":"#average first 30 words in the sentence\ndef sent_vectorizer_1(text):\n    n=len(text)\n    text_1=text[0:n]\n    vectors = [model[x] for x in text_1.split(' ') if x in model.key_to_index]\n    #sent_vector=sum(vectors)\/len(vectors)\n    if len(vectors) != 0:\n        sent_vector=sum(vectors)\/len(vectors)\n    elif len(text) !=0:\n        sent_vector=sum(vectors)\/len(text)\n    else:\n        sent_vector=sum(vectors)\/1\n    return sent_vector","d3232fbd":"X=train_df_5['clean_text']\ny=train_df_5['target']","024492d8":"import time\nt_start = time.time()\n\ndf_glove=pd.DataFrame(X)\ndf_glove.columns=['text']\ndf_glove['sent_vec_1']=df_glove['text'].apply(lambda x: sent_vectorizer_1(x))\n\n\nt_stop = time.time()\nprint('Time elapsed: {:.3f} seconds'.format(t_stop - t_start))","9afd65ee":"df_glove","274d7e8c":"import time\nt_start = time.time()\n\nX_glove=df_glove['sent_vec_1']\n\n\nddd=pd.DataFrame()\n\n\nfor idx, row in enumerate(X_glove):\n    #print((roww))\n    #print(list(roww))\n    row_df=pd.Series(X_glove[idx]).to_frame()\n    row_df_2=row_df.T\n    ddd=pd.concat([ddd, row_df_2])\n    #row_df= pd.DataFrame(roww)\n#     row_df_2=row_df.T\n#     ddd=pd.concat([ddd, row_df_2])\n    \nt_stop = time.time()\nprint('Time elapsed: {:.3f} seconds'.format(t_stop - t_start))","5536f546":"df_glove_avg_2=ddd.reset_index()\ndf_glove_avg_2.pop('index')\nmerged_df=df_glove_avg_2.merge(y,left_index=True, right_index=True)","5acdd3a4":"#delete problematic rows\nmerged_df[merged_df[0]==0]","f03b4dcc":"merged_df_2=merged_df[~(merged_df[0]==0)]","431389c8":"import time\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm\n%matplotlib inline\n\nimport keras\nimport tensorflow\n\nimport tensorflow.keras\nfrom tensorflow.keras.constraints import MaxNorm\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.optimizers import SGD\nfrom keras.utils import np_utils\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.layers import Dense, Activation, Flatten, Dropout, BatchNormalization\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D\nfrom tensorflow.keras.datasets import cifar10\nfrom tensorflow.keras import regularizers\nfrom tensorflow.keras.callbacks import LearningRateScheduler\nfrom tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint, TensorBoard\nimport numpy as np\n\nfrom keras.layers.convolutional import Conv1D, MaxPooling1D\n\n\nimport keras.utils\nfrom keras import utils as np_utils\n\nfrom keras.utils import np_utils\n\n\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.layers import LSTM\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\n\nfrom keras.layers import Dense, Input, LSTM, Embedding, Dropout, Activation, GRU, Convolution1D, Flatten, LeakyReLU\nfrom keras.layers import Bidirectional, GlobalMaxPool1D, GlobalAveragePooling1D, MaxPooling1D, GlobalMaxPooling1D\nfrom keras.layers import SpatialDropout1D, MaxPooling1D, Bidirectional, GRU, concatenate\n\n\n# import necessary tools and models \nimport seaborn as sns\nimport matplotlib.pyplot as plt \n\nimport sklearn.model_selection as cv\nfrom sklearn.model_selection import cross_val_score\nimport numpy as np","a7dd18e7":"import seaborn as sns, numpy as np\nax = sns.distplot(merged_df_2['target'])","5e0803ef":"from sklearn.preprocessing import PowerTransformer\nfrom sklearn.preprocessing import QuantileTransformer\n\ntrans_y = QuantileTransformer(output_distribution=\"uniform\")\n#trans_y = PowerTransformer()\n#trans_y = MinMaxScaler()\n\n\ny_2 = trans_y.fit_transform(merged_df_2['target'].values.reshape(-1, 1))","29926235":"ax_2 = sns.distplot(y_2)","b5246a2b":"X=merged_df_2.loc[:, merged_df_2.columns!='target']","e1d6b4d1":"# Regular Toxic - separate train - test data \nX_train_g200, X_test_g200, y_train_g200, y_test_g200 = cv.train_test_split(X, y_2,test_size=0.2)\n\n#get number of columns in training data\nn_cols = X_train_g200.shape[1]\n#n_cols = X_train_tfidf.shape[1]","44c88b73":"X_train_g200.shape","875ec6a8":"#https:\/\/datascience.stackexchange.com\/questions\/72351\/how-to-prevent-vanishing-gradient-or-exploding-gradient\n#https:\/\/stackoverflow.com\/questions\/54011173\/what-is-the-default-weight-initializer-in-keras\nDL_model = keras.models.Sequential([\n#    keras.layers.BatchNormalization(),\n    keras.layers.Dense(256, activation=\"relu\",input_shape=(n_cols,)),\n    keras.layers.Dropout(0.4),\n    keras.layers.Dense(128, activation=\"relu\"),\n    keras.layers.Dropout(0.4),\n    keras.layers.BatchNormalization(),\n    keras.layers.Dense(64, activation=\"relu\"),\n    keras.layers.Dropout(0.4),\n    keras.layers.Dense(10, activation=\"relu\"),\n    keras.layers.Dropout(0.3),\n    keras.layers.Dense(1)])\n    #keras.layers.Dense(1, activation=\"relu\")])\n    #])","2c181502":"# Fit model\nepochs = 200\nbatch_size=32","87230349":"DL_model.compile(loss=keras.losses.MeanAbsoluteError(),\n              optimizer=tensorflow.keras.optimizers.Adadelta())","a48d91fe":"# my_callbacks = [\n#     EarlyStopping(monitor='val_loss', min_delta=0, patience=500,restore_best_weights=True),\n#     ModelCheckpoint(filepath='model.{epoch:02d}-{val_loss:.4f}.h5',save_best_only=True,),\n#     TensorBoard(log_dir='logs'),\n# ]\n\nmy_callbacks = [\n    EarlyStopping(monitor='val_loss', min_delta=0, patience=500,restore_best_weights=True)#,\n    #ModelCheckpoint(filepath='model.{epoch:02d}-{val_loss:.4f}.h5',save_best_only=True,),\n    #TensorBoard(log_dir='logs'),\n]","09b64fcf":"history = DL_model.fit(X_train_g200, y_train_g200,\n                       #epochs=100, batch_size=32,\n                       epochs=55000, batch_size=512,\n                       validation_split=0.2, callbacks=my_callbacks,shuffle=True,\n                      )","2b52e571":"DL_model.save('best_model.h5')","7cc211e5":"plt.figure(221)\n\n\nplt.figure(1)\nplt.plot(history.history['loss'],'r')\nplt.plot(history.history['val_loss'],'g')\nplt.xticks(np.arange(0, 21000, 1000))\nplt.rcParams['figure.figsize'] = (25,5)\nplt.xlabel(\"Num of Epochs\")\nplt.ylabel(\"Loss\")\nplt.title(\"Training Loss vs Validation Loss\")\nplt.legend(['train','validation'])\n\nplt.gcf().set_size_inches(15,5)\nplt.show()","5027edeb":"#testing\n#500 epochs produced loss: 0.2461\n#500 more epochs produced loss: 0.2025\nscores = DL_model.evaluate(X_test_g200, y_test_g200, batch_size=32, verbose=1)","71a4e8f0":"Y_train_pred=DL_model.predict(X)\nY_train_pred_2=trans_y.inverse_transform(Y_train_pred)\nY_train_pred_2=pd.DataFrame(Y_train_pred_2)\nY_train_pred_2.columns=['Y_train_pred']","16d98460":"v_id_lookup=train_df_5[['video_id','target']].merge(merged_df,left_index=True, right_index=True)\nv_id_lookup=v_id_lookup.iloc[:,[0,1,2]]\nv_id_lookup.columns=['video_id','target','w2v']\n\n#need to remove the problematic row merged_df_2=merged_df[~(merged_df[0]==0)]\nv_id_lookup=v_id_lookup[~(v_id_lookup['w2v']==0)]\nv_id_lookup=v_id_lookup.reset_index()\nv_id_lookup.pop('index')\nv_id_lookup","a2349b4b":"Y_train_pred_2","c67e05db":"training_submit_df_3=pd.concat([v_id_lookup, Y_train_pred_2], axis=1)","5697cdf7":"training_submit_df_3.to_csv('training_submit_df.csv', index=False)","76e9b71b":"#test_df[test_df['description'].isnull()]","951ff6a1":"test_df.loc[test_df['description'].isnull(),'description'] = test_df['title']","8369c94a":"#https:\/\/stackoverflow.com\/questions\/19377969\/combine-two-columns-of-text-in-pandas-dataframe\ntest_df['description_2'] = test_df[['title','description']].agg(' '.join, axis=1)\ntest_df[['title','description','description_2']].head(15)","34f76494":"import time\nt_start = time.time()\n\ntest_df=text_cleaner(test_df)\n\n\nt_stop = time.time()\nprint('Time elapsed: {:.3f} seconds'.format(t_stop - t_start))","a3bce397":"pred_X=test_df['clean_text']","84cbe2ce":"import time\nt_start = time.time()\n\ndf_glove_test=pd.DataFrame(pred_X)\ndf_glove_test.columns=['text']\ndf_glove_test['sent_vec_1']=df_glove_test['text'].apply(lambda x: sent_vectorizer_1(x))\n\n\nt_stop = time.time()\nprint('Time elapsed: {:.3f} seconds'.format(t_stop - t_start))","3e48b7ed":"import time\nt_start = time.time()\n\nX_glove_test=df_glove_test['sent_vec_1']\n\n\nddd=pd.DataFrame()\n\n\nfor idx, row in enumerate(X_glove_test):\n    #print((roww))\n    #print(list(roww))\n    row_df=pd.Series(X_glove_test[idx]).to_frame()\n    row_df_2=row_df.T\n    ddd=pd.concat([ddd, row_df_2])\n    #row_df= pd.DataFrame(roww)\n#     row_df_2=row_df.T\n#     ddd=pd.concat([ddd, row_df_2])\n    \nt_stop = time.time()\nprint('Time elapsed: {:.3f} seconds'.format(t_stop - t_start))","16432e49":"df_glove_avg_2_test=ddd.reset_index()\ndf_glove_avg_2_test.pop('index')\nmerged_df_test=df_glove_avg_2_test.merge(test_df['id'],left_index=True, right_index=True)","0d4d11e9":"merged_df_test[merged_df_test[0]==0]","09882b62":"merged_df_test_2=merged_df_test[~(merged_df_test[0]==0)]","1b5ac719":"pred_X_2=merged_df_test_2.loc[:, merged_df_test_2.columns!='id']\nY_test_pred=DL_model.predict(pred_X_2)","94c2dfb9":"#Merge on indices, the test ids onto predicted values\nY_test_pred=pd.DataFrame(Y_test_pred)\n#Y_test_pred\npred_test_ids=pd.DataFrame(merged_df_test_2['id'])\npred_test_ids=pred_test_ids.reset_index()\npred_test_ids.pop('index')\n#pred_test_ids\npred_y_df=pd.concat([pred_test_ids, Y_test_pred], axis=1)\nall_test_ids=pd.DataFrame(merged_df_test['id'])\nsubmit_df=all_test_ids.merge(pred_y_df,how='left', on='id')\nsubmit_df.columns=['id','target']","98f992e6":"submit_df_2=submit_df.fillna(submit_df.mean())\nsubmit_df_2","a4f6f16a":"target_2=submit_df_2['target'].values.reshape(-1,1)\ntarget_3=trans_y.inverse_transform(target_2)\ntarget_4=pd.Series(target_3.flatten())\n\nsubmit_df_3=pd.concat([submit_df_2, target_4], axis=1)\nsubmit_df_3.pop('target')\nsubmit_df_3.columns=['id','target']","05be4710":"submit_df_3.to_csv('submission.csv', index=False)","4073a8ac":"#### Fill Nan Values (those video descriptions not found in Fasttext Dictionary) with Mean Prediction","1c44bf98":"### Evaluate Test Set","03313c81":"# Predict on Training set and save to csv","fe8bfe72":"#### If there exists Null Values in Video Description, replace Description field with Video's Title","e3eb1c60":"#### Concatenate the Video's Title Before and After the Video Description","bd26bd94":"## Compile and Train Neural Network","446d25a1":"### delete problematic rows","8525cf47":"#### If there exists Null Values in Video Description, replace Description field with Video's Title","174774e4":"#### Concatenate the Video's Title Before and After the Video Description","81d2fe39":"### Test Data - Create Sentence Vector for each Description by Averaging the Word Vectors","102518f4":"#### Predict value using trained model, then join video_id back onto predicted values.","42c39fb7":"# Video Description Word Embeddings and NNs","987f0176":"### Test Data - Creates Data Frame where 1 sentence is 1 Row, with 300 columns","8592d909":"### Split into Train and Test sets","d0aae9cb":"### Scale Target Variable to Prevent Vanishing Gradients","8228a4c4":"### Appears as if theres a higher proportion of High View Count Ratio videos the lower the word count\n\n- Filter for those descriptions less than 100 words","4cbfe523":"### Import Deep Learning Libraries","c7f2d890":"#### Inverse Transform","a79623cf":"### Creates Data Frame where 1 sentence is 1 Row, with 300 columns","eae47b98":"## Create Sentence Vector for each Description by Averaging the Word Vectors","4423b57d":"## Load Pre-trained Glove and Word2Vec embeddings","82929280":"## Clean Video Descriptions and Perform EDA","087375ed":"### Delete Problematic Rows\n\n#### 6 Problematic Rows - Predicted Target will be Mean of all Predicted Targets","cb08d35a":"### Test Data - Clean Text","cb0604b7":"### EDA - Word Length and Target Ratio Distribution","954d5867":"# Submission Data Set","f6afc997":"### Plot the loss curve","d4f4a82c":"#### Create Submission Data Frame","10ea39c4":"#### In Test Set - 409 out of 5800 videos have Null Descriptions","3b52e402":"### Further EDA - Word Length Distribution by Video's Target Ratio ","8ede33d0":"### Want Initial View Count - Only Select Video's with first trending date. "}}