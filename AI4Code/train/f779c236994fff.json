{"cell_type":{"e7b7fc7d":"code","b1fe6777":"code","c016c5bb":"code","4d3c4507":"code","39299f93":"code","56d6caff":"code","9cf7b15c":"code","8367a2b2":"code","d3578d72":"code","18b5009f":"code","bcbef4cb":"code","896631e6":"code","8c85d588":"code","f0a04fa9":"code","0c414964":"code","0b3cf1b7":"code","1f078e14":"code","76bd9f28":"code","ec2ceeb4":"code","198e43c3":"code","a01e6787":"code","0186328b":"code","d5e6ee23":"code","222e1491":"code","e74ce1db":"markdown","fafdea74":"markdown","4967f939":"markdown","ad2a3fd2":"markdown","8a342994":"markdown","0e0879fb":"markdown","d1ff81cc":"markdown","3f2d585e":"markdown","3c76c14f":"markdown"},"source":{"e7b7fc7d":"# libraries\nimport pandas as pd\nimport numpy as np\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import GridSearchCV\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import scale\n\n# dataset\ndf_full = pd.read_csv(\"..\/input\/train.csv\")\ndf=df_full.iloc[:8000,:]\n","b1fe6777":"# about the dataset\n\n# dimensions\nprint(\"Dimensions: \", df.shape, \"\\n\")\n\n# data types\nprint(df.info())\n\n# Top 5 Rows\ndf.head()","c016c5bb":"print(df.columns)","4d3c4507":"#Printing Unique Labels\ndigits = list(np.sort(df['label'].unique()))\nprint(digits)","39299f93":"# basic plots: How do various attributes vary with the labels\/digits\n\nplt.figure(figsize=(16, 8))\nsns.barplot(x='label', y='pixel60', \n            data=df, \n            order=digits)","56d6caff":"digit_means = df.groupby('label').mean()\ndigit_means.head()","9cf7b15c":"\nplt.figure(figsize=(18, 10))\nsns.heatmap(digit_means)","8367a2b2":"# average feature values\nround(df.drop('label', axis=1).mean(), 2)","d3578d72":"# splitting into X and y\nX = df.drop(\"label\", axis = 1)\ny = df['label']","18b5009f":"# scaling the features\nX_scaled = scale(X)\n\n# train test split\nX_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size = 0.3, random_state = 42)","bcbef4cb":"# linear model\n\nmodel_linear = SVC(kernel='linear')\nmodel_linear.fit(X_train, y_train)\n\n# predict\ny_pred = model_linear.predict(X_test)","896631e6":"# confusion matrix and accuracy\n\n# accuracy\nprint(\"accuracy:\", metrics.accuracy_score(y_true=y_test, y_pred=y_pred), \"\\n\")\n\n# cm\nprint(metrics.confusion_matrix(y_true=y_test, y_pred=y_pred))","8c85d588":"# non-linear model\n# using rbf kernel, C=1, default value of gamma\n\n# model\nnon_linear_model = SVC(kernel='rbf')\n\n# fit\nnon_linear_model.fit(X_train, y_train)\n\n# predict\ny_pred = non_linear_model.predict(X_test)","f0a04fa9":"# confusion matrix and accuracy\n\n# accuracy\nprint(\"accuracy:\", metrics.accuracy_score(y_true=y_test, y_pred=y_pred), \"\\n\")\n\n# cm\nprint(metrics.confusion_matrix(y_true=y_test, y_pred=y_pred))","0c414964":"# creating a KFold object with 5 splits \nfolds = KFold(n_splits = 3, shuffle = True, random_state = 101)\n\n# specify range of hyperparameters\n# Set the parameters by cross-validation\nhyper_params = [ {'gamma': [1e-1,1e-2, 1e-3, 1e-4],\n                     'C': [1, 10, 100, 1000]}]\n\n\n# specify model\nmodel = SVC(kernel=\"rbf\")\n\n# set up GridSearchCV()\nmodel_cv = GridSearchCV(estimator = model, \n                        param_grid = hyper_params, \n                        scoring= 'accuracy', \n                        cv = folds, \n                        verbose = 1,\n                        return_train_score=True)      \n\n# fit the model\nmodel_cv.fit(X_train, y_train)                  \n","0b3cf1b7":"# cv results\ncv_results = pd.DataFrame(model_cv.cv_results_)\ncv_results","1f078e14":"# converting C to numeric type for plotting on x-axis\ncv_results['param_C'] = cv_results['param_C'].astype('int')\n\n# # plotting\nplt.figure(figsize=(16,6))\n\n# subplot 1\/3\nplt.subplot(131)\ngamma_01 = cv_results[cv_results['param_gamma']==0.01]\n\nplt.plot(gamma_01[\"param_C\"], gamma_01[\"mean_test_score\"])\nplt.plot(gamma_01[\"param_C\"], gamma_01[\"mean_train_score\"])\nplt.xlabel('C')\nplt.ylabel('Accuracy')\nplt.title(\"Gamma=0.01\")\nplt.ylim([0.60, 1])\nplt.legend(['test accuracy', 'train accuracy'], loc='upper left')\nplt.xscale('log')\n\n# subplot 2\/3\nplt.subplot(132)\ngamma_001 = cv_results[cv_results['param_gamma']==0.001]\n\nplt.plot(gamma_001[\"param_C\"], gamma_001[\"mean_test_score\"])\nplt.plot(gamma_001[\"param_C\"], gamma_001[\"mean_train_score\"])\nplt.xlabel('C')\nplt.ylabel('Accuracy')\nplt.title(\"Gamma=0.001\")\nplt.ylim([0.60, 1])\nplt.legend(['test accuracy', 'train accuracy'], loc='upper left')\nplt.xscale('log')\n\n\n# subplot 3\/3\nplt.subplot(133)\ngamma_0001 = cv_results[cv_results['param_gamma']==0.0001]\n\nplt.plot(gamma_0001[\"param_C\"], gamma_0001[\"mean_test_score\"])\nplt.plot(gamma_0001[\"param_C\"], gamma_0001[\"mean_train_score\"])\nplt.xlabel('C')\nplt.ylabel('Accuracy')\nplt.title(\"Gamma=0.0001\")\nplt.ylim([0.60, 1])\nplt.legend(['test accuracy', 'train accuracy'], loc='upper left')\nplt.xscale('log')\n","76bd9f28":"Let's now choose the best hyperparameters. ","ec2ceeb4":"# printing the optimal accuracy score and hyperparameters\nbest_score = model_cv.best_score_\nbest_hyperparams = model_cv.best_params_\n\nprint(\"The best test score is {0} corresponding to hyperparameters {1}\".format(best_score, best_hyperparams))","198e43c3":"# model with optimal hyperparameters\n\n# model\nmodel = SVC(C=1000, gamma=0.01, kernel=\"rbf\")\n\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_test)\n\n# metrics\nprint(\"accuracy\", metrics.accuracy_score(y_test, y_pred), \"\\n\")\nprint(metrics.confusion_matrix(y_test, y_pred), \"\\n\")\n\n","a01e6787":"# printing the optimal accuracy score and hyperparameters\nbest_score = model_cv.best_score_\nbest_hyperparams = model_cv.best_params_\n\nprint(\"The best test score is {0} corresponding to hyperparameters {1}\".format(best_score, best_hyperparams))","0186328b":"X_test=pd.read_csv('test.csv')\nX_test.head()","d5e6ee23":"predicted = model_cv.predict(X_test)","222e1491":"df = pd.DataFrame({'ImageId':X_test.index, 'Label':predicted})","e74ce1db":"### Predictions on test Set","fafdea74":"The plots above show some useful insights:\n- Non-linear models (high gamma) perform *much better* than the linear ones\n- At any value of gamma, a high value of C leads to better performance\n- None of the models tend to overfit (even the complex ones), since the training and test accuracies closely follow each other\n\nThis suggests that the problem and the data is **inherently non-linear** in nature, and a complex model will outperform simple, linear models in this case.","4967f939":"## Data Preparation\n\nLet's conduct some data preparation steps before modeling. Firstly, let's see if it is important to **rescale** the features, since they may have varying ranges. For example, here are the average values:","ad2a3fd2":"# Letter Recognition Using SVM\n\nWe'll first explore the dataset a bit, prepare it (scale etc.) and then experiment with linear and non-linear SVMs with various hyperparameters.\n\n\n## Data Understanding \n\nLet's first understand the shape, attributes etc. of the dataset.","8a342994":"The non-linear model gives approx. 95.6% accuracy. Thus, going forward, let's choose hyperparameters corresponding to non-linear models.","0e0879fb":"The linear model gives approx. 92% accuracy. Let's look at a sufficiently non-linear model with randomly chosen hyperparameters.","d1ff81cc":"## Grid Search: Hyperparameter Tuning\n\nLet's now tune the model to find the optimal values of C and gamma corresponding to an RBF kernel. We'll use 5-fold cross validation.","3f2d585e":"## Model Building\n\nLet's first build two basic models - linear and non-linear with default hyperparameters, and compare the accuracies.m","3c76c14f":"### Building and Evaluating the Final Model\n\nLet's now build and evaluate the final model, i.e. the model with highest test accuracy."}}