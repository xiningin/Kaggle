{"cell_type":{"c970a9ee":"code","037825a7":"code","0dd5384b":"code","87081806":"code","d8f4b5a3":"code","472210dc":"code","39ee3f01":"code","6f662a46":"code","e8056d55":"code","229a8f34":"code","1082af78":"code","b995a0cb":"code","5c32323b":"code","7554e463":"code","619da44d":"code","04d23f33":"markdown","757733ad":"markdown","351b0ffb":"markdown"},"source":{"c970a9ee":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns # data visualisation\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","037825a7":"synthanic_raw = pd.read_csv('\/kaggle\/input\/tabular-playground-series-apr-2021\/train.csv',\n                            index_col='PassengerId')\nsynthanic_test_raw = pd.read_csv('\/kaggle\/input\/tabular-playground-series-apr-2021\/test.csv',\n                                 index_col='PassengerId')","0dd5384b":"synthanic_raw.head()","87081806":"# The editable copy\nsynthanic = synthanic_raw.copy()\nsynthanic_test = synthanic_test_raw.copy()","d8f4b5a3":"# Extracting first letter of Cabin\nsynthanic['CabinAlpha'] = synthanic['Cabin'].\\\n    fillna('Unknown').\\\n    astype(str).\\\n    map(lambda row: row[0])\n\nsynthanic.drop('Cabin', axis=1, inplace=True)\n\n# Extracting first letter of Ticket\nsynthanic['TicketAlpha'] = synthanic['Ticket'].\\\n    fillna('Unknown').\\\n    astype(str).\\\n    map(lambda row: row[0])\n\nsynthanic.drop('Ticket', axis=1, inplace=True)\n\nsynthanic.head()","472210dc":"synthanic_test['CabinAlpha'] = synthanic_test['Cabin'].\\\n    fillna('Unknown').\\\n    astype(str).\\\n    map(lambda row: row[0])\n\nsynthanic_test.drop('Cabin', axis=1, inplace=True)\n\n# Extracting first letter of Ticket\nsynthanic_test['TicketAlpha'] = synthanic_test['Ticket'].\\\n    fillna('Unknown').\\\n    astype(str).\\\n    map(lambda row: row[0])\n\nsynthanic_test.drop('Ticket', axis=1, inplace=True)","39ee3f01":"# Step 1: drop high cardinality categorical columns\ndisplay(synthanic.select_dtypes(include=['object']).nunique())\n\nhigh_cardinality_cols = synthanic.select_dtypes(include=['object']).nunique()[synthanic.select_dtypes(include=['object']).nunique() > 20].index\n\nsynthanic.drop(high_cardinality_cols, axis=1, inplace=True)\nsynthanic_test.drop(high_cardinality_cols, axis=1, inplace=True)\n\nsynthanic.head()","6f662a46":"# Step 2: drop rows with any null entries\nsynthanic.drop(synthanic[synthanic.isnull().any(axis=1)].index, axis=0, inplace=True)\n\nsynthanic.head()","e8056d55":"synthanic_target = pd.DataFrame()\nsynthanic_test_target = pd.DataFrame()\n\nfor col in synthanic.columns:\n    if col in synthanic.select_dtypes(include=['object', 'int']).columns:\n        synthanic_target[col] = synthanic[col].replace(dict(synthanic.groupby(col)['Survived'].mean()))\n    else:\n        synthanic_target[col] = synthanic[col]\n\nfor col in synthanic_test.columns:\n    if col in synthanic_test.select_dtypes(include=['object', 'int']).columns:\n        synthanic_test_target[col] = synthanic_test[col].replace(dict(synthanic.groupby(col)['Survived'].mean()))\n    else:\n        synthanic_test_target[col] = synthanic_test[col]\n\nsynthanic_target.to_csv('synthanic_target_encoded.csv')\nsynthanic_test_target.to_csv('synthanic_test_target_encoded.csv')","229a8f34":"from sklearn.model_selection import train_test_split\n\ny = synthanic_target['Survived']\nX = synthanic_target.drop('Survived', axis=1)\nX_test = synthanic_test_target\n\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, train_size=0.8, test_size=0.2,\n                                                      random_state=1)","1082af78":"from xgboost import XGBClassifier\n\nmodel = XGBClassifier(objective='binary:logistic', use_label_encoder=False,\n                      n_estimators=200,\n                      verbosity=1, \n                      learning_rate=0.05, \n                      random_state=1,\n                      )","b995a0cb":"model.fit(X_train, y_train,\n          eval_set=[(X_train, y_train), (X_valid, y_valid)],\n          early_stopping_rounds=5,\n          eval_metric='logloss',\n          verbose=1)\n\nevals_result = model.evals_result()","5c32323b":"preds = model.predict(X)","7554e463":"sample_submission = pd.read_csv('\/kaggle\/input\/tabular-playground-series-apr-2021\/sample_submission.csv')\nsample_submission","619da44d":"submission = pd.DataFrame(model.predict(X_test))\nsubmission.columns = ['Survived']\nsubmission.index = X_test.index\nsubmission.reset_index(inplace=True)\nsubmission.to_csv('submission.csv')","04d23f33":"# Simple model","757733ad":"# Target encoding","351b0ffb":"# Target encoding (for categorical variables)"}}