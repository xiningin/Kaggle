{"cell_type":{"8e64c9d2":"code","312b2a24":"code","ab57a9f4":"code","0caed9a1":"code","3f1ddd28":"code","a2994194":"code","9d025d4e":"code","c8917c3f":"code","04a8a0c8":"code","aeb39698":"code","31ba5622":"code","4b9eb92b":"code","b3bc5b2a":"code","0ab4b2fc":"code","42308ad6":"code","08315ad5":"code","c3fe6f5d":"code","845924d4":"code","0304eb08":"code","3d1b4c6e":"code","d38e635f":"code","a8dbb0e5":"markdown"},"source":{"8e64c9d2":"import matplotlib.pylab as plt\nimport tensorflow as tf\nimport tensorflow_hub as hub\n\nimport os\nimport numpy as np\n\nimport tensorflow_datasets as tfds\n\nimport warnings\nwarnings.filterwarnings('ignore')","312b2a24":"datasets , info = tfds.load(name = 'beans', with_info = True, as_supervised = True, split = ['train', 'test', 'validation'])","ab57a9f4":"info","0caed9a1":"datasets","3f1ddd28":"train, info_train = tfds.load(name = 'beans', with_info = True, split = 'test')\n\n# tfds.show_examples(info_train, train) # Deprecated","a2994194":"tfds.show_examples(train, info_train)","9d025d4e":"def scale(image, label):\n    image = tf.cast(image, tf.float32)\n    image \/= 255.0\n    \n    return tf.image.resize(image, [224, 224]), tf.one_hot(label, 3)","c8917c3f":"def get_dataset(batch_size = 32):\n    train_dataset_sclaed = datasets[0].map(scale).shuffle(1000).batch(batch_size)\n    test_dataset_sclaed = datasets[1].map(scale).batch(batch_size)\n    validation_dataset_sclaed = datasets[2].map(scale).batch(batch_size)\n    \n    return train_dataset_sclaed, test_dataset_sclaed, validation_dataset_sclaed\n    ","04a8a0c8":"train_dataset, test_dataset, val_dataset = get_dataset()\n\ntrain_dataset.cache()\nval_dataset.cache()","aeb39698":"len(list(datasets[0]))","31ba5622":"feature_extractor = 'https:\/\/tfhub.dev\/google\/tf2-preview\/mobilenet_v2\/feature_vector\/4'","4b9eb92b":"feature_extractor_layer = hub.KerasLayer(feature_extractor, input_shape = (224, 224, 3))","b3bc5b2a":"feature_extractor_layer.trainable = False","0ab4b2fc":"model = tf.keras.Sequential(\n    [\n        feature_extractor_layer,\n        tf.keras.layers.Dropout(0.3),\n        tf.keras.layers.Dense(3, activation = 'softmax')\n    ]\n)","42308ad6":"model.summary()","08315ad5":"model.compile(\n    optimizer = tf.keras.optimizers.Adam(),\n    loss = tf.keras.losses.CategoricalCrossentropy(from_logits = True),\n    metrics = ['acc']\n)","c3fe6f5d":"hist = model.fit(train_dataset, epochs = 6, validation_data = val_dataset)","845924d4":"result = model.evaluate(test_dataset)","0304eb08":"%matplotlib inline","3d1b4c6e":"for test_sample in datasets[1].take(10):\n    image, label = test_sample[0], test_sample[1]\n    image_scaled, label_arr = scale(test_sample[0], test_sample[1])\n    image_scaled = np.expand_dims(image_scaled, axis = 0)\n    \n    img = tf.keras.preprocessing.image.img_to_array(image)\n    \n    pred = model.predict(image_scaled)\n    \n    print(pred)\n    \n    plt.figure()\n    plt.imshow(image)\n    plt.show()\n    \n    print(\"Actual Label : %s\" %info.features['label'].names[label.numpy()])\n    print(\"Predicted Label : %s\" %info.features['label'].names[np.argmax(pred)])\n    ","d38e635f":"for f0, f1 in datasets[1].map(scale).batch(200):\n    y = np.argmax(f1, axis = 1)\n    y_pred = np.argmax(model.predict(f0), axis = 1)\n    \n    print(tf.math.confusion_matrix(labels = y, predictions = y_pred, num_classes = 3))","a8dbb0e5":"WARNING: For consistency with `tfds.load`, the `tfds.show_examples` signature has been modified from (info, ds) to (ds, info).\nThe old signature is deprecated and will be removed. Please change your call to `tfds.show_examples(ds, info)`"}}