{"cell_type":{"b7a0e3f0":"code","efb7841a":"code","b5f43364":"code","cdef11dc":"code","16b8e657":"code","dfaeaf18":"code","f4981ffe":"code","9d58028d":"code","4730e065":"code","821257b6":"code","990d43f9":"markdown","68aecd75":"markdown","bdd6d0f4":"markdown","40daa3df":"markdown","612cf6a2":"markdown","76670641":"markdown"},"source":{"b7a0e3f0":"%%time\n\nimport os\nimport logging\nimport sys\nimport warnings\nwarnings.simplefilter(\"ignore\")\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib as plt\n\nimport plotly.figure_factory as ff\nimport plotly.express as px\n\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.linear_model import LogisticRegression","efb7841a":"%%time\n\nfolds_dir = \"..\/input\/tps-september-2021-skfolds\/\"\ndata_dir = \"..\/input\/tabular-playground-series-sep-2021\/\"\n\ndf_train = pd.read_csv(folds_dir + \"train_folds.csv\")\ndf_test = pd.read_csv(data_dir + \"test.csv\")\nsubmission = pd.read_csv(data_dir + \"sample_solution.csv\")\n\nTARGET = \"claim\"","b5f43364":"%%time\n\npreds_dir = \"..\/input\/tps-september-2021-preds\/\"\n\npreds_train_files = [    \n    \"lgb_train_3.csv\",\n    \"xgb_train_3.csv\",\n    \"cb_train_3.csv\",\n    #\"hgb_train_3.csv\",\n    \n    \"lgb_train_4.csv\",\n    \"xgb_train_4.csv\",\n    \"cb_train_4.csv\",\n    \"hgb_train_4.csv\",\n    \n    \"vote_train_1.csv\",\n    \"vote_train_1_1.csv\",\n    \"vote_train_2.csv\",\n    \n    \"lgb1_train_5.csv\",\n    \"lgb2_train_5.csv\",\n    \"lgb3_train_5.csv\",\n    \"lgb4_train_5.csv\",\n]\n\npreds_test_files = [\n    \"lgb_test_3.csv\",\n    \"xgb_test_3.csv\",\n    \"cb_test_3.csv\",\n    #\"hgb_test_3.csv\",\n    \n    \"lgb_test_4.csv\",\n    \"xgb_test_4.csv\",\n    \"cb_test_4.csv\",\n    \"hgb_test_4.csv\",\n    \n    \"vote_test_1.csv\",\n    \"vote_test_1_1.csv\",\n    \"vote_test_2.csv\",\n    \n    \"lgb1_test_5.csv\",\n    \"lgb2_test_5.csv\",\n    \"lgb3_test_5.csv\",\n    \"lgb4_test_5.csv\",\n]\n\nfeatures = [    \n    \"lgb_pred_3\", \n    \"xgb_pred_3\", \n    \"cb_pred_3\", \n    #\"hgb_pred_3\", \n    \n    \"lgb_pred_4\",\n    \"xgb_pred_4\",\n    \"cb_pred_4\",\n    \"hgb_pred_4\",\n    \n    \"vote_pred_1\",\n    \"vote_pred_1_1\",\n    \"vote_pred_2\",\n    \n    \"lgb1_pred_5\",\n    \"lgb2_pred_5\",\n    \"lgb3_pred_5\",\n    \"lgb4_pred_5\",\n]\n\n\ndef merge_preds_df(df, preds_files):\n    for preds_file in preds_files:\n        df_tmp = pd.read_csv(preds_dir + preds_file)\n        df = df.merge(df_tmp, on=\"id\", how=\"left\")\n    return df\n\ndf_train = merge_preds_df(df_train, preds_train_files)\ndf_test = merge_preds_df(df_test, preds_test_files)\n\ndf_test = df_test[features]","cdef11dc":"def load_vis_data(preds_files):\n    # Read test preds files\n    df_list = []\n    for preds_file in preds_files:\n        df_tmp = pd.read_csv(f\"{preds_dir}\/{preds_file}\")\n        df_tmp.columns = [\"id\", \"claim\"]\n        df_list.append((preds_file, df_tmp))\n        \n    hist_data = []\n    for i in range(len(df_list)):\n        _, df = df_list[i]\n        hist_data.append(df[TARGET])\n        \n    return hist_data","16b8e657":"%%time\n\nvis_data = load_vis_data(preds_test_files)","dfaeaf18":"%%time\n\nfig1 = ff.create_distplot(vis_data, preds_test_files, bin_size=0.3, show_hist=False, show_rug=False)\nfig1.show()","f4981ffe":"%%time\n\nfig2 = px.imshow(np.corrcoef(vis_data), x=preds_test_files, y=preds_test_files)\nfig2.show()","9d58028d":"def predict(model, df_train, df_test, folds=5):\n    test_preds = []\n    valid_preds = {}\n    scores = []\n    \n    for fold in range(folds):\n        x_train = df_train[df_train.kfold != fold].reset_index(drop=True)\n        x_valid = df_train[df_train.kfold == fold].reset_index(drop=True)\n        x_test = df_test.copy()\n        \n        valid_ids = x_valid.id.values.tolist()\n\n        y_train = x_train[TARGET]\n        y_valid = x_valid[TARGET]\n\n        x_train = x_train[features]\n        x_valid = x_valid[features]\n\n        model.fit(x_train, y_train)\n        \n        valid_pred = model.predict_proba(x_valid)[:, 1]\n        test_pred = model.predict_proba(x_test)[:, 1]\n        \n        test_preds.append(test_pred)\n        valid_preds.update(dict(zip(valid_ids, valid_pred)))\n\n        score = roc_auc_score(y_valid, valid_pred)\n        print(f\"Fold {fold} | AUC: {score}\")\n        scores.append(score)\n    \n    test_preds = np.mean(np.column_stack(test_preds), axis=1)\n    valid_preds = pd.DataFrame.from_dict(valid_preds, orient=\"index\").reset_index()\n    \n    return test_preds, valid_preds, scores","4730e065":"lr1_params = {\n    \"C\": 2.1434537945516228, \n    \"random_state\": 0, \n    \"solver\": \"saga\"\n}\n\nlr2_params = {\n    \"C\": 2.4622964608689104, \n    \"fit_intercept\": True, \n    \"random_state\": 42, \n    \"solver\": \"sag\", \n    \"tol\": 0.009995426310967661\n}\n\nlr3_params = {\n    \"C\": 2.106528532902824, \n    \"fit_intercept\": True, \n    \"random_state\": 88, \n    \"solver\": \"sag\", \n    \"tol\": 0.00809989768012382\n}\n\nlr4_params = {\n    \"C\": 2.752343403147011, \n    \"fit_intercept\": True, \n    \"random_state\": 1, \n    \"solver\": \"sag\", \n    \"tol\": 0.009277692817264553\n}\n\nlr5_params = {\n    \"C\": 2.577491520675309, \n    \"fit_intercept\": True, \n    \"random_state\": 100, \n    \"solver\": \"sag\", \n    \"tol\": 0.0076982708195162605\n}\n\nmodels = [\n    (\"lr1\", LogisticRegression(**lr1_params)),\n    (\"lr2\", LogisticRegression(**lr2_params)),\n    (\"lr3\", LogisticRegression(**lr3_params)),\n    (\"lr4\", LogisticRegression(**lr4_params)),\n    (\"lr5\", LogisticRegression(**lr5_params)),\n]","821257b6":"%%time\n\nfor name, model in models:\n    print(f\"Using {name}...\")\n    test_preds, valid_preds, scores = predict(model, df_train.copy(), df_test.copy())\n    print(np.mean(scores), np.std(scores))\n\n    # Save predictions\n    print(\"Saving submission files...\")\n    pred_col =  f\"{name}_pred_2\"\n    valid_preds.columns = [\"id\", pred_col]\n    valid_preds.to_csv(f\"{name}_train_2.csv\", index=False)\n\n    test_preds_df = pd.DataFrame({\"id\": submission.id, pred_col: test_preds})\n    test_preds_df.to_csv(f\"{name}_test_2.csv\", index=False)\n\n    sub = pd.DataFrame({\"id\": submission.id, \"claim\": test_preds})\n    sub.to_csv(f\"{name}_submission_2.csv\", index=False)\n    print(\"Done.\")\n\n    print(\"-\" * 50)","990d43f9":"## Merge preds to main data-frames","68aecd75":"#  TPS September 2021 - Blend LGB\/XGB\/CB\/HGB\/Voting","bdd6d0f4":"## Import libraries","40daa3df":"## Load datasets","612cf6a2":"## Check for correlations","76670641":"## Predict"}}