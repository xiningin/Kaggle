{"cell_type":{"361b7233":"code","93f964c6":"code","bfcaf8b8":"code","6b7f5ce9":"code","ecb6a34a":"code","d207d905":"code","07e3e716":"code","44904e18":"code","78110d97":"code","4a7f3413":"code","bcc910c0":"code","de881139":"code","92eb32aa":"code","bdf6b032":"code","077d72eb":"code","d549c69d":"code","c1ea2dc5":"code","471de3a9":"code","197e3ba4":"code","c9770a30":"code","c8556f52":"code","bf042a2e":"code","2285317a":"code","e4a76805":"code","c25df8cd":"code","9e0c79e6":"code","353f3b83":"code","70a317df":"code","db876fcb":"code","6da1e979":"code","95f04e48":"code","424fa0be":"code","91eeea28":"code","ee3d3067":"code","d892efc4":"code","600f6e05":"code","65455262":"code","1399b0c9":"code","8170e84f":"code","a1bf3fa6":"code","6979d323":"code","928fe9ac":"code","5dc81b57":"code","0eed9392":"code","6c874083":"code","d92fb8ed":"code","bd632a53":"code","33737f6b":"markdown","e30f1114":"markdown","dbb72b5d":"markdown","18db80a8":"markdown","d98d7420":"markdown","511b1420":"markdown","20c65d58":"markdown","c4b8ad3e":"markdown","b8427493":"markdown","e12cc601":"markdown","9c721acb":"markdown","20ab8712":"markdown","3a9540b4":"markdown","e686354c":"markdown","fbdc96a0":"markdown","1dbaa0b6":"markdown","bb6546f2":"markdown","21f8fad4":"markdown","7acabb2f":"markdown","89938963":"markdown","9233278a":"markdown","3e72187a":"markdown","aa214618":"markdown","93e0bff9":"markdown"},"source":{"361b7233":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import PolynomialFeatures, StandardScaler\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report\nfrom warnings import filterwarnings\nfilterwarnings('ignore')","93f964c6":"data = pd.read_csv('..\/input\/drug-classification\/drug200.csv')","bfcaf8b8":"data.head()","6b7f5ce9":"data.isnull().sum()","ecb6a34a":"data.info()","d207d905":"fig, ax = plt.subplots(figsize  = (10, 10))\nsns.heatmap(data.corr(), cmap = 'BuPu', cbar = True, linewidth = 0.5, annot = True, ax = ax)\nplt.show()","07e3e716":"data['Drug'].value_counts()","44904e18":"sns.countplot(x = 'Drug', data= data)","78110d97":"data['Sex'].value_counts()","4a7f3413":"sns.countplot(x = 'Sex', data= data)","bcc910c0":"data['BP'].value_counts()","de881139":"sns.countplot(x = 'BP', data= data)","92eb32aa":"data['Cholesterol'].value_counts()","bdf6b032":"sns.countplot(x = 'Cholesterol', data= data)","077d72eb":"data['Na_to_K'].describe()","d549c69d":"sns.distplot(x = data['Na_to_K'])","c1ea2dc5":"sns.histplot(x = 'Age', kde=True, bins = 25, data = data)","471de3a9":"sns.scatterplot(x = 'Age', y = 'Na_to_K', data = data, hue = 'Drug')","197e3ba4":"data_sex_drug = data.groupby(['Drug','Sex']).size().reset_index(name = 'count')\nprint(data_sex_drug)","c9770a30":"sns.countplot(x = 'Drug', data= data, hue = 'Sex')","c8556f52":"data_BP_drug = data.groupby(['Drug','BP']).size().reset_index(name = 'count')\nprint(data_BP_drug)","bf042a2e":"sns.countplot(x = 'Drug', data= data, hue = 'BP')","2285317a":"data_Cholesterol_drug = data.groupby(['Drug','Cholesterol']).size().reset_index(name = 'count')\nprint(data_Cholesterol_drug)","e4a76805":"sns.countplot(x = 'Drug', data= data, hue = 'Cholesterol')","c25df8cd":"data['Sex'] = data['Sex'].map({'M': 1, 'F': 0})\ndata['Cholesterol'] = data['Cholesterol'].map({'HIGH' : 1, 'NORMAL' : 0})\ndata['Drug'] = data['Drug'].map({'DrugY':1, 'drugC':2, 'drugX':3, 'drugA':4, 'drugB':5})\ndata.head()","9e0c79e6":"data.shape","353f3b83":"data = pd.get_dummies(data)\ndata.head()","70a317df":"data.shape","db876fcb":"fig, ax = plt.subplots(figsize  = (10, 10))\nsns.heatmap(data.corr(), cmap = 'BuPu', cbar = True, linewidth = 0.5, annot = True, ax = ax)\nplt.show()","6da1e979":"X = data.drop('Drug', axis = 1).values\ny = data['Drug'].values.reshape((-1,1))","95f04e48":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 1)\nprint('x train shape {}'.format(X_train.shape))\nprint('x test shape  {}'.format(X_test.shape))\nprint('y train shape {}'.format(y_train.shape))\nprint('y test shape  {}'.format(y_test.shape))","424fa0be":"logistic_model = LogisticRegression(C = 2 ,solver = 'liblinear', tol = .001)","91eeea28":"logistic_model.fit(X_train, y_train)\ny_pred = logistic_model.predict(X_test)\nprint(logistic_model.score(X_train,y_train)*100)\nlogistic_score = accuracy_score(y_test, y_pred)\nprint(logistic_score*100)\nprint(confusion_matrix(y_test, y_pred))\nprint(classification_report(y_test, y_pred))","ee3d3067":"KNN_class = KNeighborsClassifier(n_neighbors = 3)","d892efc4":"KNN_class.fit(X_train, y_train)\ny_pred = KNN_class.predict(X_test)\nprint(logistic_model.score(X_train,y_train)*100)\nKNN_score = accuracy_score(y_test, y_pred)\nprint(KNN_score*100)\nprint(confusion_matrix(y_test, y_pred))\nprint(classification_report(y_test, y_pred))","600f6e05":"SVC_class = SVC(C = 0.5, kernel = 'linear')","65455262":"SVC_class.fit(X_train,y_train)\ny_pred = SVC_class.predict(X_test)\nprint(SVC_class.score(X_train,y_train)*100)\nSVC_score = accuracy_score(y_test, y_pred)\nprint(SVC_score*100)\nprint(confusion_matrix(y_test, y_pred))\nprint(classification_report(y_test, y_pred))","1399b0c9":"tree_class = DecisionTreeClassifier(criterion = 'gini', max_depth = 4, splitter = 'best', random_state = 1)","8170e84f":"tree_class.fit(X_train, y_train)\ny_pred = tree_class.predict(X_test)\nprint(tree_class.score(X_train,y_train)*100)\ntree_score = accuracy_score(y_test, y_pred)\nprint(tree_score*100)\nprint(confusion_matrix(y_test, y_pred))\nprint(classification_report(y_test, y_pred))","a1bf3fa6":"Random_class = RandomForestClassifier(n_estimators=200, criterion='gini', max_depth=4, random_state = 1)","6979d323":"Random_class.fit(X_train, y_train)\ny_pred = Random_class.predict(X_test)\nprint(Random_class.score(X_train,y_train)*100)\nForest_score = accuracy_score(y_test, y_pred)\nprint(Forest_score*100)\nprint(confusion_matrix(y_test, y_pred))\nprint(classification_report(y_test, y_pred))","928fe9ac":"poly_feat = PolynomialFeatures()","5dc81b57":"X_poly_train = poly_feat.fit_transform(X_train)\nX_poly_test = poly_feat.fit_transform(X_test)","0eed9392":"logistic_model_2 = LogisticRegression(solver = 'liblinear')","6c874083":"logistic_model_2.fit(X_poly_train,y_train)\ny_pred = logistic_model_2.predict(X_poly_test)\nprint(logistic_model_2.score(X_poly_train,y_train)*100)\nsecond_logistic_score = accuracy_score(y_test, y_pred)\nprint(SVC_score*100)\nprint(confusion_matrix(y_test, y_pred))\nprint(classification_report(y_test, y_pred))","d92fb8ed":"x = ['logistic_score', 'KNN_score', 'SVC_score', 'tree_score', 'Forest_score', 'second_logistic_score']\ny = [logistic_score, KNN_score, SVC_score, tree_score, Forest_score, second_logistic_score]","bd632a53":"sns.barplot(x = x, y = y)\nplt.ylabel('model accurecy')\nplt.xlabel('models name')\nplt.xticks(rotation = 30)\nplt.title(\"Model Comparison - Model Accuracy\", fontsize=15, fontname=\"Helvetica\", y=1.03)","33737f6b":"# **Logistic Regression**","e30f1114":"**there is no missing values in the date**<\/br>\n**we have 6 coulmns**<\/br>\n**and 200 rows**","dbb72b5d":"# **data Visualization**","18db80a8":"# **KNN classifier**","d98d7420":"**We will find out the number of each Drug type per BP**","511b1420":"**We will use map operation for Sex coulmn, Cholesterol and Drug coulmns**<\/br>\n**map used in Sex coulmn becouse it has only two values (F, M) so it can be converted into (0 , 1)**<\/br>\n**map used in Cholesterol coulmn becouse it has only two values (HIGH, NORMAL) so it can be converted into (0 , 1)**<\/br>\n**map used in Drug coulmn becouse it is target coulmn**<\/br>","20c65d58":"# **finding NAN values**","c4b8ad3e":"# **Logistic regrassion after scaler**","b8427493":"# **Importing libraries**","e12cc601":"# **SVM classifier**","9c721acb":"# **Dummy variables**\n**Convert categorical variables into dummy**","20ab8712":"# **Random Forest Classifier**","3a9540b4":"# **Decision Tree Classifier**","e686354c":"# **loading Data**","fbdc96a0":"**Number of High and Normal Cholesterol in the data**","1dbaa0b6":"# **scaler data**","bb6546f2":"**discover numbers of drug for each type and display it**","21f8fad4":"**Discover Number of females and males in data**","7acabb2f":"**In the last fig we find all the items have more than 15 Na_to_K have DrugY type**","89938963":"**the we will used get_dummies function in pandas for other categorical variables in the data**","9233278a":"**In the next**<\/br>\n**We will find out the number of each Drug type per Sex**","3e72187a":"**We will find out the number of each drug type per Cholesterol**","aa214618":"**Number of High, Low and Normal BP in the data**","93e0bff9":"# **accurecy fig**\n**We will built a fig for the algorithms accurecy which are used**"}}