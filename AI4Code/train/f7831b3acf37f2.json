{"cell_type":{"1730d006":"code","4763d536":"code","d8d93658":"code","7b46cd15":"code","095a407e":"code","dd3f25a2":"code","84dc59b1":"code","abc9a215":"code","0ccd6c74":"code","eaa7e66f":"code","47a98dd9":"code","b58eecf6":"code","e303b3da":"code","d1a11aa5":"code","7a4c0482":"code","35a1d969":"code","e632df0d":"code","18b1f8bd":"code","c26109c6":"code","2b4a1630":"code","f215167a":"code","16ba8957":"code","6b62541b":"code","1f8e290a":"code","b112ea55":"code","31797a67":"code","40eaa14f":"code","28000f48":"code","1de57969":"code","bb1a7e00":"code","3160740d":"code","f95d05c3":"code","5f48c5b4":"code","a0f4a9b3":"code","579293da":"code","5299318f":"code","f32ab84f":"code","9ef7821e":"code","cd845023":"code","e9e7e85a":"code","f8c6b7d7":"code","c6ba6125":"code","618db7eb":"code","bb32c96d":"code","3540989c":"code","32a941a8":"code","a269a479":"code","e7b1fb82":"code","8504e9d5":"code","f01ad75d":"code","c9d39231":"code","cb1a8a51":"code","b7e71bfb":"code","6c841c5c":"code","aa1f503c":"code","65f94809":"markdown","1e834cfb":"markdown","32101ff4":"markdown","a6995cdc":"markdown","47807362":"markdown","804a1efe":"markdown","083bf4c9":"markdown","2aa3f7f9":"markdown","7d590279":"markdown","5954743c":"markdown","715c6106":"markdown","6d2ebdbb":"markdown","addab286":"markdown","2555bb02":"markdown"},"source":{"1730d006":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4763d536":"import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.set()","d8d93658":"import plotly.express as px\nfrom plotly import tools\nfrom plotly.offline import init_notebook_mode,iplot\ninit_notebook_mode(connected=False)\nimport plotly.figure_factory as ff\nimport plotly.graph_objs as go\nfrom plotly.subplots import make_subplots","7b46cd15":"df_matches=pd.read_csv('\/kaggle\/input\/ipldata\/matches.csv')\ndf_matches.head()","095a407e":"df_deliveries=pd.read_csv('\/kaggle\/input\/ipldata\/deliveries.csv')\ndf_deliveries.head()","dd3f25a2":"df_matches.isnull().sum()","84dc59b1":"df_matches=df_matches.drop('umpire3',axis=1)","abc9a215":"print(df_matches[df_matches['city'].isnull()])","0ccd6c74":"df_matches['city']=df_matches['city'].fillna('Dubai')","eaa7e66f":"print(df_matches[df_matches['winner'].isnull()])","47a98dd9":"df_matches.city.unique()","b58eecf6":"df_matches.replace({'city':'Bangalore'},'Bengaluru',inplace=True)","e303b3da":"df_matches.team1.unique()","d1a11aa5":"x=['Sunrisers Hyderabad', 'Mumbai Indians', 'Gujarat Lions',\n    'Rising Pune Supergiant', 'Royal Challengers Bangalore',\n    'Kolkata Knight Riders', 'Delhi Daredevils', 'Kings XI Punjab',\n    'Chennai Super Kings', 'Rajasthan Royals', 'Deccan Chargers',\n    'Kochi Tuskers Kerala', 'Pune Warriors', 'Rising Pune Supergiants', 'Delhi Capitals']\n\ny = ['SRH','MI','GL','RPS','RCB','KKR','DC','KXIP','CSK','RR','SRH','KTK','PW','RPS','DC']\n\ndf_matches.replace(x,y,inplace = True)\ndf_deliveries.replace(x,y,inplace = True)","7a4c0482":"winner=df_matches.drop_duplicates(subset=['season'], keep='last')[['season','winner']].reset_index(drop=True)\nwinner = winner['winner'].value_counts()\nwinner = winner.to_frame()\nwinner.reset_index(inplace=True)\nwinner.rename(columns={'index':'team'},inplace=True)\nwinner","35a1d969":"px.pie(names = winner.team,values=winner.winner,title = \"IPL winners \")","e632df0d":"px.bar(x = df_matches.winner.value_counts().index, y = df_matches.winner.value_counts().values , \n       color =df_matches.winner.value_counts().index,labels = {\"x\":\"IPL Teams\",\"y\":\"matches won\"})","18b1f8bd":"df_wins=pd.concat([df_matches['team1'],df_matches['team2']])\ndf_wins=df_wins.value_counts().reset_index()\ndf_wins.columns=['Team','Total Matches']\ndf_wins['wins']=df_matches['winner'].value_counts().reset_index()['winner']\ndf_wins.set_index('Team',inplace=True)\ndf_wins['win_percentage']= round(df_wins['wins']\/df_wins['Total Matches'],2)*100","c26109c6":"df_wins","2b4a1630":"trace1 = go.Bar(x=df_wins.index,y=df_wins['Total Matches'], name='Total Matches')\ntrace2 = go.Bar(x=df_wins.index,y=df_wins['wins'],name='Matches Won',marker=dict(color='red'),opacity=0.6)\ntrace3 = go.Bar(x=df_wins.index,y=df_wins['win_percentage'],name='Win %',marker=dict(color='gold'),opacity=0.7)\n\ndata = [trace1, trace2, trace3]\n\nlayout = go.Layout(title='Match Played, Wins And Win Percentage',\n                   xaxis=dict(title='Team'),yaxis=dict(title='Count'),bargap=0.2,bargroupgap=0.1)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","f215167a":"wickets=df_matches[df_matches.win_by_wickets!=0].win_by_wickets.values\nruns=df_matches[df_matches.win_by_runs!=0].win_by_runs.values\nplt.figure(figsize=(10,5))\nplt.subplot('121')\nsns.distplot(wickets, hist_kws={'color': 'Gold'}, kde_kws={'color': 'black'})\nplt.xlabel('wickets')\nplt.title(\"mean wickets - {}\".format(int(wickets.mean())))\nplt.plot([6,6],[0,.4],'--b')\nplt.subplot('122')\n\nsns.distplot(runs, hist_kws={'color': 'Teal'}, kde_kws={'color': 'black'})\nplt.title(\"median runs - {}\".format(int(np.median(runs))))\nplt.plot([np.median(runs),np.median(runs)],[0,.030],'--b')\nplt.xlabel('runs')","16ba8957":"df_vs=df_matches[['season','team1','team2','toss_winner','winner','city']]\ndf_vs.head()","6b62541b":"def one_vs_one(team_1,team_2):\n    \n \n    df=df_vs[((df_vs.team1==team_1) & (df_vs.team2==team_2)) | ((df_vs.team1==team_2) & (df_vs.team2==team_1))]\n    df2=df_vs[((df_vs.team1==team_1) & (df_vs.team2==team_2)) | ((df_vs.team1==team_2) & (df_vs.team2==team_1))]\n    \n    labels = [team_1,team_2]\n\n    fig = make_subplots(rows=1, cols=2, specs=[[{'type':'domain'}, {'type':'domain'}]])\n    fig.add_trace(go.Pie(labels=labels, values=df.winner.value_counts().values, name=\"match win %\"),\n                  1, 1)\n    fig.add_trace(go.Pie(labels=labels, values=df2.toss_winner.value_counts().values, name=\"toss win %\"),\n                  1, 2)\n    fig.update_traces(hole=.4, hoverinfo=\"label+percent+name\")\n\n    fig.update_layout(\n        title_text=\"Team comparison Match vs Toss\",\n        # Add annotations in the center of the donut pies.\n        annotations=[dict(text=\"Match\", x=0.19, y=0.5, font_size=20, showarrow=False),\n                     dict(text=\"Toss\", x=0.79, y=0.5, font_size=20, showarrow=False)])\n    fig.show()","1f8e290a":"one_vs_one('MI','CSK')","b112ea55":"one_vs_one('RCB','CSK')","31797a67":"one_vs_one('MI','RCB')","40eaa14f":"one_vs_one('MI','SRH')","28000f48":"px.pie(names = df_matches.toss_decision.value_counts().index,\n       values=df_matches.toss_decision.value_counts().values,title = \"Fielding or Batting\")","1de57969":"df_matches[df_matches.result == \"tie\"][[\"season\",\"team1\",\"team2\",\"result\"]]","bb1a7e00":"runs_per_over = df_deliveries.pivot_table(index=['over'],columns='batting_team',values='total_runs',aggfunc=sum)\nruns_per_over.reset_index(inplace=True)\nruns_per_over.drop(['KTK','PW','RPS','GL'],axis=1,inplace=True)","3160740d":"trace1 = go.Scatter(x=runs_per_over['over'],y = runs_per_over['RR'],name='RR')\ntrace2 = go.Scatter(x=runs_per_over['over'],y = runs_per_over['SRH'],name='SRH')\ntrace3 = go.Scatter(x=runs_per_over['over'],y = runs_per_over['KXIP'],name='KXIP')\ntrace4 = go.Scatter(x=runs_per_over['over'],y = runs_per_over['MI'],name='MI')\ntrace5 = go.Scatter(x=runs_per_over['over'],y = runs_per_over['RCB'],name='RCB')\ntrace6 = go.Scatter(x=runs_per_over['over'],y = runs_per_over['CSK'],name='CSK')\ntrace7 = go.Scatter(x=runs_per_over['over'],y = runs_per_over['DC'],name='DC')\ntrace8 = go.Scatter(x=runs_per_over['over'],y = runs_per_over['KKR'],name='KKR')\n\ndata = [trace1,trace2,trace3,trace4,trace5,trace6,trace7,trace8]\n\nlayout = go.Layout(title='Average Run in Each Over',xaxis = dict(tickmode='linear',title=\"Over\"),\n                                    yaxis = dict(title= \"Runs\"))\n\nfig = go.Figure(data=data,layout=layout)\niplot(fig)","f95d05c3":"df_batsmen = df_matches[['id','season']].merge(df_deliveries, left_on = 'id', right_on = 'match_id', how = 'left').drop('id', axis = 1)\ndf_season=df_batsmen.groupby(['season'])['total_runs'].sum().reset_index()\nSeason_boundaries=df_batsmen.groupby(\"season\")[\"batsman_runs\"].agg(lambda x: (x==6).sum()).reset_index()\nfours=df_batsmen.groupby(\"season\")[\"batsman_runs\"].agg(lambda x: (x==4).sum()).reset_index()\nSeason_boundaries=Season_boundaries.merge(fours,left_on='season',right_on='season',how='left')\nSeason_boundaries=Season_boundaries.rename(columns={'batsman_runs_x':'6\"s','batsman_runs_y':'4\"s'})\n\nSeason_boundaries['6\"s'] = Season_boundaries['6\"s']*6\nSeason_boundaries['4\"s'] = Season_boundaries['4\"s']*4\nSeason_boundaries['total_runs'] = df_season['total_runs']","5f48c5b4":"trace1 = go.Bar(x=Season_boundaries['season'], \n                y=Season_boundaries['total_runs']-(Season_boundaries['6\"s']+Season_boundaries['4\"s']),\n                name='ones, twos,threes',opacity=0.6)\ntrace2 = go.Bar(x=Season_boundaries['season'], y=Season_boundaries['4\"s'],name='Run by 4\"s',opacity=0.7)\ntrace3 = go.Bar(x=Season_boundaries['season'], y=Season_boundaries['6\"s'],name='Run by 6\"s',opacity=0.7)\n\n\ndata = [trace1, trace2, trace3]\nlayout = go.Layout(title=\"Run Distribution per year\",barmode='stack',\n                   xaxis = dict(tickmode='linear',title=\"Year\"), yaxis = dict(title= \"Run Distribution\"))\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","a0f4a9b3":"fig = px.bar(df_matches, y=df_matches.player_of_match.value_counts().head(15), \n             x=df_matches.player_of_match.value_counts().index[0:15],\n             color=df_matches.player_of_match.value_counts().index[0:15],\n            labels={'x':'Player','y':'Count: Man of the match'})\n             \nfig.show()","579293da":"df_cen = df_deliveries.groupby(['batsman','match_id']).agg({'batsman_runs':'sum'})\ndf_cen = df_cen[df_cen['batsman_runs']>=100]\ndf_cen = df_cen.groupby(['batsman']).agg({'count'})\ndf_cen.columns = df_cen.columns.droplevel()\ndf_cen = df_cen.sort_values(by='count',ascending=False).reset_index()\n\ndf_half_cen = df_deliveries.groupby(['batsman','match_id']).agg({'batsman_runs':'sum'})\ndf_half_cen = df_half_cen[df_half_cen['batsman_runs']>=50]\ndf_half_cen = df_half_cen[df_half_cen['batsman_runs']<100]\ndf_half_cen = df_half_cen.groupby(['batsman']).agg({'count'})\ndf_half_cen.columns = df_half_cen.columns.droplevel()\ndf_half_cen = df_half_cen.sort_values(by='count',ascending=False).reset_index()","5299318f":"df_cen.head(10)","f32ab84f":"top_10_cen=df_cen.sort_values(\"count\", axis=0,ascending=False).head(10)","9ef7821e":"fig = px.bar(top_10_cen, x='batsman', y='count', color='batsman')\nfig.show()","cd845023":"top_10_half_cen=df_half_cen.sort_values(\"count\", axis=0,ascending=False).head(10)","e9e7e85a":"fig = px.bar(top_10_half_cen, x='batsman', y='count', color='batsman')\nfig.show()","f8c6b7d7":"\n#runs per match\nruns_per_match = df_deliveries.groupby(['batsman','match_id']).agg({'batsman_runs':'sum'})\ntotal_runs = runs_per_match.groupby(['batsman']).agg({'sum' ,'mean','count'})\ntotal_runs.rename(columns ={'sum' : 'batsman run','count' : 'match count','mean' :'average score'}, inplace=True)\ntotal_runs.columns = total_runs.columns.droplevel()\n\n#strike Rate\nstrike_rate = df_deliveries.groupby(['batsman']).agg({'ball':'count','batsman_runs':'mean'}).sort_values(by='batsman_runs',ascending=False)\nstrike_rate.rename(columns ={'batsman_runs' : 'strike rate'}, inplace=True)\n\n# 4s and 6s\nsixes = df_deliveries[['batsman','batsman_runs']][df_deliveries.batsman_runs==6].groupby(['batsman']).agg({'batsman_runs':'count'})\nfour = df_deliveries[['batsman','batsman_runs']][df_deliveries.batsman_runs==4].groupby(['batsman']).agg({'batsman_runs':'count'})\n\n#Merging Table\ndf_batsman_stat = pd.merge(pd.merge(pd.merge(strike_rate,total_runs, left_index=True, right_index=True),\n                  sixes, left_index=True, right_index=True),four, left_index=True, right_index=True)\n","c6ba6125":"df_50_100 = pd.merge(df_cen,df_half_cen, on='batsman',how='right')\ndf_50_100 = df_50_100.fillna(0)","618db7eb":"df_batsman_stat.rename(columns = {'batsman_runs_x' :'six','batsman_runs_y':'four'},inplace=True)\ndf_batsman_stat['strike rate'] = df_batsman_stat['strike rate']*100\ndf_batsman_stat = df_batsman_stat.sort_values(by='batsman run',ascending=False).reset_index()\n\nbatsman_stats = pd.merge(df_batsman_stat,df_50_100, on='batsman',how='left').fillna(0)\nbatsman_stats.rename(columns = {'count_x' : '100s', 'count_y' : '50s'},inplace=True)","bb32c96d":"df_batsman_stat.head()","3540989c":"df_batsman_stat['point'] = (df_batsman_stat['six']*1) + (df_batsman_stat['four']*0.5) + (df_batsman_stat['batsman run']*0.5)\ndf_batsman_stat.sort_values(by='point',inplace=True,ascending=False)","32a941a8":"df_batsman_stat.head()","a269a479":"\nfig = go.Figure(data=[go.Table(\n     domain=dict(x=[0, 0.6],\n                 y=[0, 1.0]),\n                header=dict(values=['Batsmen','Sixes','Fours','Points'], align='center',height=30,\n                           font = dict(size=14)),\n                cells=dict(values=[df_batsman_stat.batsman.head(10),df_batsman_stat.six.head(10)\n                ,df_batsman_stat.four.head(10),df_batsman_stat.point.head(10)],\n                fill_color='lavender',align='center')) ])\n\nfig.show()","e7b1fb82":"fig = px.bar(df_batsman_stat.head(10), x='batsman', y='point', color='batsman')\nfig.show()","8504e9d5":"condition_catch = (df_deliveries.dismissal_kind == 'caught')\ncondition_run= (df_deliveries.dismissal_kind == 'run out')\ncondition_stump= (df_deliveries.dismissal_kind == 'stumped')\ncondition_caught_bowled = (df_deliveries.dismissal_kind == 'caught and bowled')\n\ns_catch = df_deliveries.loc[condition_catch,:].groupby(df_deliveries.fielder).dismissal_kind.count().sort_values(ascending=False)\ns_run = df_deliveries.loc[condition_run,:].groupby(df_deliveries.fielder).dismissal_kind.count().sort_values(ascending=False)\ns_stump = df_deliveries.loc[condition_stump,:].groupby(df_deliveries.fielder).dismissal_kind.count().sort_values(ascending=False)\ns_caught_bowled = df_deliveries.loc[condition_caught_bowled,:].groupby(df_deliveries.bowler).dismissal_kind.count().sort_values(ascending=False)\n\ndf_catch= s_catch.to_frame().reset_index().rename(columns ={'dismissal_kind' : 'catch'})\ndf_run= s_run.to_frame().reset_index().rename(columns ={'dismissal_kind' : 'run_out'})\ndf_stump= s_stump.to_frame().reset_index().rename(columns ={'dismissal_kind' : 'stump'})\ndf_caught_bowled = s_caught_bowled.to_frame().reset_index().rename(columns ={'dismissal_kind' : 'caught and bowled'})                                                                                                                           \n                                                                                                                           \ndf_field = pd.merge(pd.merge(df_catch,df_run,on='fielder', how='outer'),df_stump,on='fielder',how='outer')\nfield_stats = df_field[~df_field['fielder'].str.contains(\"(sub)\")].reset_index().drop(['index'],axis=1).fillna(0)","f01ad75d":"\n\ncondition = ((df_deliveries.dismissal_kind.notnull()) &(df_deliveries.dismissal_kind != 'run out')&\n            (df_deliveries.dismissal_kind != 'retired hurt' )&(df_deliveries.dismissal_kind != 'hit wicket') \n            &(df_deliveries.dismissal_kind != 'obstructing the field')&(df_deliveries.dismissal_kind != 'caught and bowled'))\n        \ndf_bowlers = df_deliveries.loc[condition,:].groupby(df_deliveries.bowler).dismissal_kind.count().sort_values(ascending=False).reset_index()\ndf_bowlers = pd.merge(df_bowlers,df_caught_bowled , on='bowler',how='left').fillna(0)\n\nhigh=df_deliveries.groupby(['match_id', 'bowler']).agg({'total_runs':'sum'}).reset_index()\n\nover_count=df_deliveries.groupby(['match_id', 'bowler','over']).agg({'total_runs':'sum'}).reset_index()\novers = over_count.groupby(['match_id','bowler']).agg({'over':'count'}).reset_index()\novers = overs[overs['over']>=2]\n\nbowlers = pd.merge(high,overs,on=['match_id', 'bowler'], how='right')\nbowlers['economy'] = bowlers['total_runs']\/bowlers['over']\nbowlers['eco_range'] = pd.cut(bowlers['economy'], [0, 4, 5, 6, 9, 10, 11, 30], labels=['below4', '4-5', '5-6', '6-9','9-10','10-11','above11'])\n\nbowlers = pd.concat([bowlers,pd.get_dummies(bowlers['eco_range'], prefix='eco')],axis=1)\neconomy_rates=bowlers.groupby(['bowler']).agg({'eco_below4':'sum','eco_4-5':'sum','eco_5-6':'sum','eco_6-9':'sum','eco_9-10':'sum','eco_10-11':'sum','eco_above11':'sum'}).reset_index()\n\nmaiden_over = over_count[over_count['total_runs']==0]\nmaidens = maiden_over['bowler'].value_counts().to_frame().reset_index().rename({'index':'bowler','bowler':'maiden_overs'},axis=1)\n\nhauls=df_deliveries.groupby(['match_id', 'bowler']).agg({'player_dismissed':'count'}).reset_index()\nhauls = hauls[hauls['player_dismissed']>=4]\nhauls['haul'] = pd.cut(hauls['player_dismissed'], [0,4,8], labels=['4', '5'])\nhauls = pd.concat([hauls,pd.get_dummies(hauls['haul'], prefix='haul')],axis=1)\nhauls.drop(['player_dismissed','haul'],inplace=True,axis=1)\nhauls=hauls.groupby(['bowler']).agg({'haul_4':'sum','haul_5':'sum'}).reset_index()\n\nbowlers_stats = pd.merge(pd.merge(pd.merge(economy_rates,maidens,on='bowler', how='left'),df_bowlers,on='bowler',how='left'),hauls,on='bowler',how='right').fillna(0)\nbowlers_stats.rename(columns ={'dismissal_kind' : 'wickets'},inplace=True)\n\n","c9d39231":"fours = df_batsman_stat.sort_values(by='four').tail(15)\nsixes = df_batsman_stat.sort_values(by='six').tail(15)\nruns = df_batsman_stat.sort_values(by='batsman run').tail(15)","cb1a8a51":"trace1 = go.Scatter(x=sixes.batsman,y =sixes.six,name='6\"s',marker =dict(color= \"blue\",size = 9),line=dict(width=2,dash='dash'),showlegend=True)\ntrace2 = go.Scatter(x=fours.batsman,y = fours.four,name='4\"s',marker =dict(color= \"green\",size = 9),line=dict(width=2,dash='longdash'))\ntrace3 = go.Scatter(x=runs.batsman,y = runs['batsman run'],name='2\"s',marker =dict(color= \"red\",size = 9),line=dict(width=2,dash='dashdot'))\n\nfig = tools.make_subplots(rows=3, cols=1, subplot_titles=('Top 6\"s Scorer','Top 4\"s Scorer',\"Highest total runs\"), print_grid=False)\n\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 2, 1)\nfig.append_trace(trace3, 3, 1)\n\nfig['layout'].update(height=700, width=820,title='Top Scorer in Boundaries and Total Runs',showlegend=False)\niplot(fig)","b7e71bfb":"trace1 = go.Bar(x=field_stats.fielder.head(15),y=field_stats.catch,\n                name='Caught',opacity=0.4)\n\ntrace2 = go.Bar(x=field_stats.fielder.head(15),y=field_stats.run_out,name='Run out',\n                marker=dict(color='red'),opacity=0.4)\n\ntrace3 = go.Bar(x=field_stats.fielder.head(15),y=field_stats.stump,name='Stump out',\n                marker=dict(color='lime'),opacity=0.4)\n\ndata = [trace1, trace2, trace3]\nlayout = go.Layout(title='Best fielders',\n                   xaxis=dict(title='Player',tickmode='linear'),\n                   yaxis=dict(title='Dismissals'),bargap=0.2,bargroupgap=0.1)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","6c841c5c":"field = field_stats[['fielder','stump','catch','run_out']]\n\n\nfield1 = field[(field['stump'] > 0)]\nfield2 = field[~(field['stump'] > 0)]\n\nfield1['points'] = (field1['catch']*4) + (field1['stump']*6) + (field1['run_out']*2)\nfield2['points'] = (field2['catch']*4) + (field2['stump']*6) + (field2['run_out']*6)\n\n\nfield = pd.concat([field1, field2])\nfield.sort_values(by='points',ascending=False,inplace=True)\n\nfield1.sort_values(by='points',ascending=False,inplace=True)\nfield2.sort_values(by='points',ascending=False,inplace=True)\n\nbest_fielder = field[['fielder','points']]\n\n","aa1f503c":"trace = go.Table(\n    domain=dict(x=[0, 0.65],\n                y=[0, 1.0]),\n    header=dict(values=[\"Fielder\",\"Stump\",\"Catch\",\"Run out\",\"Points\"],\n                fill = dict(color = 'grey'),\n                font = dict(color = 'white', size = 14),\n                align = ['center'],\n               height = 30),\n    cells=dict(values=[field['fielder'].head(10),field['stump'].head(10),field['catch'].head(10),field['run_out'].head(10),field['points'].head(10)],\n               fill = dict(color = ['lightgrey', 'white']),\n               align = ['center']))\nfig1 = dict(data=[trace], layout=layout)\niplot(fig1)","65f94809":"# Rating batsmen by points\n","1e834cfb":"1. Man of the match","32101ff4":"Looks like the match was abandon due to rain. No MoM and winner.","a6995cdc":"2. Centuries and half centuries","47807362":"# Run Distribution of each year","804a1efe":"# Player performance\n","083bf4c9":"\nIn December 2018, Delhi Daredevils changed its name to the Delhi Capitals and \nSunrisers Hyderabad replaced the Deccan Chargers in 2012.\n","2aa3f7f9":"**Which Team won most number of matches?**","7d590279":"****there is a significant dip in the runs in over 7: It may be because PP1 is upto over 6**","5954743c":"# Team Performance","715c6106":"**Is winning Toss a advantage**","6d2ebdbb":"# Fielders Analysis","addab286":"**what is mean number of wicket and run if a team wins**","2555bb02":"**Clearly we can see more toss win% means more win %**"}}