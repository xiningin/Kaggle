{"cell_type":{"6ea55a58":"code","4bd7c599":"code","95e47d35":"code","1a1ec365":"code","1943cfd4":"code","e45fdcf4":"code","463ed61a":"code","f13242c9":"code","f42e0f9a":"code","48d60217":"code","19ea4c73":"code","60c9f697":"code","38c2b7a1":"code","3f7bd731":"code","45330e1a":"code","8165c13e":"code","68ce51ef":"code","c70d58b9":"code","8da24cb0":"code","e3d9332e":"code","b21ce657":"code","db1a7e20":"code","67053860":"code","9e942146":"code","2b047ce9":"code","28c22a10":"code","e093e8a4":"code","0b35e7e4":"code","d214c792":"code","dddef161":"code","5b25698b":"code","51e93651":"code","effc2274":"code","ae6fbe99":"code","06264549":"code","254da2e2":"code","d4f5edd3":"code","827c94fe":"code","b957c133":"code","43818ad1":"code","95bc55b7":"code","c87caa65":"code","9e0316b2":"code","7fbbcaad":"code","22ef494d":"markdown","0446e83a":"markdown","6d84662f":"markdown","af62b077":"markdown","0e22338b":"markdown","8cd92523":"markdown","b1bd3438":"markdown","dfcb372e":"markdown","50ee720e":"markdown","be12774d":"markdown","aa207480":"markdown","343b83a3":"markdown","5fa80003":"markdown","33d61fb6":"markdown","fbc6590a":"markdown"},"source":{"6ea55a58":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","4bd7c599":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","95e47d35":"df = pd.read_csv('\/kaggle\/input\/irish-weather-hourly-data\/hourly_irish_weather.csv')\ndf","1a1ec365":"stations = df['station'].unique()\nstations","1943cfd4":"type(df['date'][0])","e45fdcf4":"df['date'] = pd.to_datetime(df['date'], infer_datetime_format=True)\ntype(df['date'][0])","463ed61a":"df = df.set_index('date')\ndf","f13242c9":"plt.figure(figsize=(16, 9))\nsns.boxplot(x=\"temp\", y=\"station\", data=df,\n            whis=\"range\", palette=\"vlag\")","f42e0f9a":"station3 = df.loc[lambda df: df.station == stations[3], :]\nstation3","48d60217":"sns.set()\n%matplotlib inline\nplt.figure(figsize=(16, 9))\nsns.lineplot(x=station3.index,y=\"temp\", data=station3, hue='station')","19ea4c73":"station3['month_str'] = station3.index.strftime('%b')\nstation3['month_num'] = station3.index.month\nstation3","60c9f697":"plt.figure(figsize=(16, 9))\nsns.boxplot(x=\"temp\", y=\"month_str\", data=station3, palette=\"vlag\")","38c2b7a1":"station3.columns","3f7bd731":"station3 = station3[['Unnamed: 0', 'station', 'county', 'longitude', 'latitude', 'month_str', 'month_num', 'rain',\n       'temp', 'wetb', 'dewpt', 'vappr', 'rhum', 'msl', 'wdsp', 'wddir', 'ww',\n       'w', 'sun', 'vis', 'clht', 'clamt']]","45330e1a":"station3","8165c13e":"station3.loc[:, 'rain':'wddir'].describe()","68ce51ef":"station3.loc[:, 'month_str':'wddir'].corr()","c70d58b9":"sns.pairplot(station3.loc[:, 'month_str':'wddir'], vars=['rain', 'temp', 'wetb', 'dewpt', 'vappr'],  hue='month_str', height=4)","8da24cb0":"station3['year'] = station3.index.year\nstation3['day'] = station3.index.day\nstation3['hour'] = station3.index.hour\n\nstation3","e3d9332e":"station3 = station3[['Unnamed: 0', 'station', 'county', 'longitude', 'latitude', 'month_str', 'year',\n       'month_num', 'day', 'hour', 'rain', 'temp', 'wetb', 'dewpt', 'vappr', 'rhum', 'msl',\n       'wdsp', 'wddir', 'ww', 'w', 'sun', 'vis', 'clht', 'clamt']]\nstation3","b21ce657":"station3 = station3.dropna(subset=['temp'])","db1a7e20":"from sklearn.model_selection import train_test_split\n\nX = station3.month_num\nX = np.array(X)\nX = X.reshape(-1,1)\nX = np.append(X, np.array(station3.day).reshape(-1,1), axis=1)\nX = np.append(X, np.array(station3.hour).reshape(-1,1), axis=1)\nX.shape","67053860":"X","9e942146":"y = np.array(station3.temp)\ny","2b047ce9":"X_train, X_test, y_train, y_test = train_test_split(X, y)\nX_train","28c22a10":"from sklearn.linear_model import SGDRegressor\n\nsgd_reg = SGDRegressor()\nsgd_reg.fit(X_train, y_train)","e093e8a4":"from sklearn.metrics import mean_squared_error\nsgd_reg_predict = sgd_reg.predict(X_train)\nsgd_mse = mean_squared_error(y_train, sgd_reg_predict)\nprint(\"RMSE Entrenamiento: \", np.sqrt(sgd_mse))","0b35e7e4":"sgd_reg_predict = sgd_reg.predict(X_test)\nsgd_mse = mean_squared_error(y_test, sgd_reg_predict)\nprint(\"RMSE Test: \", np.sqrt(sgd_mse))","d214c792":"pred = np.array([11, 28, 14]).reshape(1,-1)\nsgd_reg.predict(pred)","dddef161":"from sklearn.preprocessing import PolynomialFeatures\n\npoly = PolynomialFeatures(degree=4)\npoly = poly.fit_transform(X_train)","5b25698b":"from sklearn.linear_model import LinearRegression \nlin_reg = LinearRegression()\nlin_reg.fit(poly, y_train)","51e93651":"lin_reg_predict = lin_reg.predict(poly)\nlin_mse = mean_squared_error(y_train, lin_reg_predict)\nprint(\"RMSE Entrenamiento: \", np.sqrt(lin_mse))","effc2274":"poly_test = PolynomialFeatures(degree=4)\npoly_test = poly_test.fit_transform(X_test)\nlin_reg_predict = lin_reg.predict(poly_test)\nlin_mse = mean_squared_error(y_test, lin_reg_predict)\nprint(\"RMSE Test: \", np.sqrt(lin_mse))","ae6fbe99":"pred_lin = np.array([11, 28, 16]).reshape(1,-1)\npred_poly = PolynomialFeatures(degree=4)\npred_poly = pred_poly.fit_transform(pred_lin)\nlin_reg.predict(pred_poly)","06264549":"from sklearn.model_selection import cross_val_score\n\nlin_reg2 = LinearRegression()\npoly_total = PolynomialFeatures(degree=4)\npoly_total = poly_total.fit_transform(X)\n\nscores = cross_val_score(lin_reg2, poly_total, y, scoring=\"neg_mean_squared_error\", cv=100)\nrmse_scores = np.sqrt(-scores)","254da2e2":"print(\"Scores: \", rmse_scores)\nprint(\"Promedio: \", rmse_scores.mean())\nprint(\"Desv\u00edo estandar: \", rmse_scores.std())","d4f5edd3":"from sklearn.model_selection import GridSearchCV\n\nparam_grid = [\n    {'learning_rate': ['constant', 'optimal', 'invscaling', 'adaptive'], 'max_iter': [1000, 1500, 2000, 2500],\n     'penalty': ['none', 'l2', 'l1', 'elasticnet'], 'validation_fraction': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]},\n]","827c94fe":"sgd_reg2 = SGDRegressor()\ngrid_search = GridSearchCV(sgd_reg2, param_grid, cv=5,\n                           scoring='neg_mean_squared_error', \n                           return_train_score=True)\ngrid_search.fit(X_train, y_train)","b957c133":"sgd_reg3 = SGDRegressor(alpha=0.0001, average=False,\n                                    early_stopping=False, epsilon=0.1,\n                                    eta0=0.01, fit_intercept=True,\n                                    l1_ratio=0.15, learning_rate='invscaling',\n                                    loss='squared_loss', max_iter=1000,\n                                    n_iter_no_change=5, penalty='l2',\n                                    power_t=0.25, random_state=None,\n                                    shuffle=True, tol=0.001,\n                                    validation_fraction=0.1,\n                                    warm_start=False)\nsgd_reg3.fit(X_train, y_train)","43818ad1":"sgd_reg_predict3 = sgd_reg3.predict(X_train)\nsgd_mse3 = mean_squared_error(y_train, sgd_reg_predict3)\nprint(\"RMSE Entrenamiento: \", np.sqrt(sgd_mse3))","95bc55b7":"sgd_reg_predict3 = sgd_reg3.predict(X_test)\nsgd_mse3 = mean_squared_error(y_test, sgd_reg_predict3)\nprint(\"RMSE Test with Grid search: \", np.sqrt(sgd_mse3))\nprint(\"RMSE Test without Grid search: \", np.sqrt(sgd_mse))","c87caa65":"param_grid2 = [\n    {'fit_intercept': [True, False], 'normalize': [True, False],\n     'copy_X': [True, False], 'n_jobs': [1, -1]},\n]\n\nlin_reg3 = LinearRegression()\ngrid_search2 = GridSearchCV(lin_reg3, param_grid2, cv=5,\n                           scoring='neg_mean_squared_error', \n                           return_train_score=True)\ngrid_search2.fit(poly, y_train)","9e0316b2":"lin_reg4 = LinearRegression(copy_X=True, fit_intercept=True,\n                                        n_jobs=None, normalize=False)\nlin_reg4 = lin_reg4.fit(poly, y_train)\nlin_reg_predict4 = lin_reg4.predict(poly)\nlin_mse4 = mean_squared_error(y_train, lin_reg_predict4)\nprint(\"RMSE Entrenamiento: \", np.sqrt(lin_mse4))","7fbbcaad":"lin_reg_predict4 = lin_reg4.predict(poly_test)\nlin_mse4 = mean_squared_error(y_test, lin_reg_predict4)\nprint(\"RMSE Test: \", np.sqrt(lin_mse4))","22ef494d":"## Getting a list with the name of each station","0446e83a":"## Visualizing data","6d84662f":"**Lineplot for one station**","af62b077":"## Predict temperature for SherkinIsland station (station3)","0e22338b":"**Boxplot with the new feature**","8cd92523":"## Statistics for SherkinIsland station (station3)","b1bd3438":"**Linear regresion with Polinomial features**","dfcb372e":"**Adding the feature 'month' from date**","50ee720e":"## Reading the csv file","be12774d":"**Plotting the most correlated variables**","aa207480":"**Cross validation for Linear Regression**","343b83a3":"**Boxplot for all stations**","5fa80003":"## Changing date from string to datetime object and passing it to index","33d61fb6":"## Grid search for Linear Regression with polynomial features","fbc6590a":"## Grid search for SGDRegressor"}}