{"cell_type":{"20ee49b2":"code","1f80ea94":"code","056f4eba":"code","6c5b6b5a":"code","46d673f5":"code","56cbe2fb":"code","21526819":"code","3ec1a4b6":"code","44f8fe82":"code","8f99712a":"code","ac7c5091":"code","9355b5f1":"code","68844f18":"code","50bcb049":"code","8be6e394":"code","c5869722":"code","70eaa210":"code","21e41f39":"markdown","3143c4e7":"markdown","fb3929f3":"markdown","d9754f6e":"markdown"},"source":{"20ee49b2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1f80ea94":"import cv2\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nfrom tensorflow.keras.layers import Input Flatten, Dense\nfrom tensorflow.keras.models import Model\n#from tensorflow.keras.applications.resnet50 import  ResNet50, preprocess_input\nfrom tensorflow.keras.applications.vgg16 import VGG16, preprocess_input\nfrom tensorflow.keras.preprocessing import image\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator, load_img\nfrom tensorflow.keras.models import Sequential\nfrom glob import glob","056f4eba":"img_size = [200, 200]\n\ntrain_data = '\/kaggle\/input\/yoga-poses-dataset\/DATASET\/TRAIN'\nvalid_data = '\/kaggle\/input\/yoga-poses-dataset\/DATASET\/TEST'","6c5b6b5a":"# for getting number of output classes\nnum_classes = glob('\/kaggle\/input\/yoga-poses-dataset\/DATASET\/TRAIN\/*')\nprint(num_classes)\nlen(num_classes)","46d673f5":"# Using data augmentation for increasing training dataset\n\ntrain_gen = ImageDataGenerator(rescale=1.\/255,\n                               shear_range=0.2,\n                               zoom_range=0.2,\n                               horizontal_flip=True)\n\ntest_gen = ImageDataGenerator(rescale=1.\/255)","56cbe2fb":"train_set = train_gen.flow_from_directory('\/kaggle\/input\/yoga-poses-dataset\/DATASET\/TRAIN',\n                                          target_size=(200,200),\n                                          batch_size=32,\n                                          class_mode='categorical')\n\ntest_set = test_gen.flow_from_directory('\/kaggle\/input\/yoga-poses-dataset\/DATASET\/TEST',\n                                          target_size=(200,200),\n                                          batch_size=32,\n                                          class_mode='categorical')","21526819":"vgg16 = VGG16(input_shape = img_size + [3], weights='imagenet', include_top=False)","3ec1a4b6":"vgg16.summary()","44f8fe82":"# we dont want to retrain existing weights\nfor layer in vgg16.layers:\n  layer.trainable = False","8f99712a":"# our layer \nx = Flatten()(vgg16.output)","ac7c5091":"prediction = Dense(len(num_classes), activation='softmax')(x)\n\n# creat model object\nmodel = Model(inputs = vgg16.input, outputs = prediction)","9355b5f1":"model.summary()","68844f18":"model.compile(optimizer='adam',\n              loss='categorical_crossentropy',\n              metrics=['accuracy'])","50bcb049":"from PIL import ImageFile\nImageFile.LOAD_TRUNCATED_IMAGES = True","8be6e394":"hist = model.fit(train_set, validation_data=test_set, epochs=5)","c5869722":"plt.figure(0)\nplt.plot(hist.history['loss'],'g')\nplt.plot(hist.history['val_loss'],'b')\nplt.plot(hist.history['accuracy'],'r')\nplt.plot(hist.history['val_accuracy'],'black')\nplt.show()","70eaa210":"preds = model.predict(test_set)\npreds = np.argmax(preds, axis=1)\npreds","21e41f39":"### As we have very less number of data for training we'll use data augmentation technique to increase number of images in our training dataset","3143c4e7":"### we will use VGG16 model here","fb3929f3":"## Data Augmentation","d9754f6e":"## Transfer learning Technique"}}