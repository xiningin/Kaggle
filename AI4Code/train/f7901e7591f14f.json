{"cell_type":{"0907af3e":"code","d0192c05":"code","28415ac8":"code","61ebe8cc":"code","03233dc6":"code","712c7c21":"code","c16e5b51":"code","4f4db5b5":"code","44c30ceb":"code","11746e00":"code","bf357b2a":"code","36602983":"code","ec14313f":"code","6255cd68":"code","b8cd29b4":"code","39ec4ce3":"code","d4e55c10":"code","d139db19":"code","d44b22db":"code","79e1f89e":"code","c9d287df":"code","b1b764eb":"code","60018d67":"code","abd0b71a":"code","6c38839f":"code","4e5130dd":"code","8c8e5e0a":"code","569e8539":"code","c5b164c6":"code","4b733f99":"code","dab2bc12":"code","96efa6be":"code","be8269c9":"code","f836fd61":"code","01c9f165":"code","d8c52703":"code","44d44f19":"code","98c10cad":"code","2ff625d3":"code","a9319efc":"code","ba62fe1a":"code","7f711307":"code","423af6bc":"code","43e2b782":"code","899986ff":"code","c92b080d":"code","ce3236d5":"code","ebe3d31b":"code","ffb01fb6":"code","fa597511":"code","1a31d33e":"code","bc31f452":"code","4d61d04d":"code","6e8b26d2":"code","0fc66f60":"code","649ba9fe":"code","fef8831f":"code","1c1e2e77":"code","040e3775":"code","50256fde":"code","84ca08b2":"code","75c47553":"markdown","5486ad3b":"markdown","8057adc5":"markdown","1bf1335e":"markdown","d9ba94b9":"markdown","05dc328d":"markdown","a8149823":"markdown","c1d6bc3c":"markdown","9e5d7484":"markdown","7d74647d":"markdown","919555b1":"markdown","75dab32d":"markdown","02212670":"markdown","0f75d80e":"markdown","87afa6db":"markdown","b0e534f8":"markdown","120bdf00":"markdown","5951820e":"markdown","4f9b8b31":"markdown","daf8dfe0":"markdown","6688d818":"markdown","1caa6903":"markdown","27041218":"markdown"},"source":{"0907af3e":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom sklearn.model_selection import train_test_split, StratifiedKFold\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"all\"\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import RandomizedSearchCV\npd.set_option('display.max_columns',None)","d0192c05":"tr=pd.read_csv('..\/input\/kickoff\/FIFA_train.csv')\ntst = pd.read_csv('..\/input\/kickoff\/FIFA_test_player_data.csv')","28415ac8":"tr.head()","61ebe8cc":"tst.shape","03233dc6":"l=list(tr.columns)","712c7c21":"m = [l[i] for i in range(21,43)] + [l[i] for i in range(77,103)]\n","c16e5b51":"pd.set_option('display.max_rows',None)\ntr.isnull().sum()","4f4db5b5":"import seaborn as sns","44c30ceb":"# Here, we check the distribution of missing values.\n# In the plot below, the white lines represent missing values while black areas have non-null values.\n\nplt.figure(figsize=(15,15))\nsns.heatmap(tr.loc[:,m].isnull(), cbar=False)\nplt.title('Distribution of missing values')\nplt.show()","11746e00":"plt.figure(figsize=(15,15))\nsns.heatmap(tst.loc[:,m].isnull(), cbar=False)\nplt.title('Distribution of missing values')\nplt.show()","bf357b2a":"tr.body_type.value_counts()","36602983":"tr.dtypes","ec14313f":"tst.body_type.value_counts()","6255cd68":"tr['body_type'][tr['body_type'] == 'Messi'] = 'Lean'\ntr['body_type'][tr['body_type'] == 'C. Ronaldo'] = 'Normal'\ntr['body_type'][tr['body_type'] == 'Neymar'] = 'Lean'\ntr['body_type'][tr['body_type'] == 'Courtois'] = 'Lean'\n\n#PLAYER_BODY_TYPE_25 is Normal body type\ntr['body_type'][tr['body_type'] == 'PLAYER_BODY_TYPE_25'] = 'Normal'\ntr['body_type'][tr['body_type'] == 'Shaqiri'] = 'Stocky'\ntr['body_type'][tr['body_type'] == 'Akinfenwa'] = 'Stocky'\n\n\ntst['body_type'][tst['body_type'] == 'Courtois'] = 'Lean'\ntst['body_type'][tst['body_type'] == 'Messi'] = 'Lean'\ntst['body_type'][tst['body_type'] == 'Akinfenwa'] = 'Stocky'\n","b8cd29b4":"tr.work_rate.value_counts()","39ec4ce3":"tst.work_rate.value_counts()","d4e55c10":" #Create new column for first work_rate\ntr[\"work_rate1\"]= tr[\"work_rate\"].apply(lambda x:x.split('\/')[0])  \n#Create new column for second work_rate\ntr[\"work_rate2\"]= tr[\"work_rate\"].apply(lambda x:x.split('\/')[1])  \ntr.drop(columns=['work_rate'],inplace=True)\n\n#Create new column for first work rate\ntst[\"work_rate1\"]= tst[\"work_rate\"].apply(lambda x:x.split('\/')[0])    \n#Create new column for second work rate\ntst[\"work_rate2\"]= tst[\"work_rate\"].apply(lambda x:x.split('\/')[1]) \ntst.drop(columns=['work_rate'],inplace=True)","d139db19":"#Joined Column\nimport datetime\ntr['joined']=pd.to_datetime(tr['joined'])\ntr['joined_yr'] = pd.DatetimeIndex(tr['joined']).year\ntr['joined_m'] = pd.DatetimeIndex(tr['joined']).month\n\ntst['joined']=pd.to_datetime(tst['joined'])\ntst['joined_yr'] = pd.DatetimeIndex(tst['joined']).year\ntst['joined_m'] = pd.DatetimeIndex(tst['joined']).month\n\n","d44b22db":"tr['contract_length'] = tr['contract_valid_until']-tr['joined_yr']\ntst['contract_length'] = tst['contract_valid_until']-tst['joined_yr']","79e1f89e":"import datetime\ntr['dob']=pd.to_datetime(tr['dob'])\ntr['dob_yr'] = pd.DatetimeIndex(tr['dob']).year\ntr['dob_m'] = pd.DatetimeIndex(tr['dob']).month\n\ntst['dob']=pd.to_datetime(tst['dob'])\ntst['dob_yr'] = pd.DatetimeIndex(tst['dob']).year\ntst['dob_m'] = pd.DatetimeIndex(tst['dob']).month\n","c9d287df":"tr['joining_age'] = tr['joined']-tr['dob']\ntst['joining_age'] = tst['joined']-tst['dob']\n\ntr['joining_age']=pd.to_timedelta(tr['joining_age'], errors='coerce').dt.days\ntst['joining_age']=pd.to_timedelta(tst['joining_age'], errors='coerce').dt.days\n\ntr['joining_age'] = tr['joining_age']\/\/365\ntst['joining_age'] = tst['joining_age']\/\/365\n\n\ntr.drop(columns=['dob','joined'],inplace=True)\ntst.drop(columns=['dob','joined'],inplace=True)","b1b764eb":"plt.figure(figsize=(20, 10));\nplt.scatter(tr.age,tr.value)\nplt.title('Age vs Value of Players',fontsize=14,fontweight='bold');\nplt.xlabel('Age');\nplt.ylabel('Value');","60018d67":"tr['age_category'] = tr['age'].apply(lambda x:3 if 22<=x<=32 else 1 if x>=40 else 2)\ntst['age_category'] = tst['age'].apply(lambda x:3 if 22<=x<=32 else 1 if x>=40 else 2)","abd0b71a":"tr['fifa_yr'] = tr['player_url'].apply(lambda x:2000+int(x.split('\/')[-2]))\ntst['fifa_yr'] = tst['player_url'].apply(lambda x:2000+int(x.split('\/')[-2]))","6c38839f":"tr['membership_yrs'] = tr['fifa_yr'] - tr['joined_yr']\ntst['membership_yrs'] = tst['fifa_yr'] - tst['joined_yr']","4e5130dd":"tr['preferred_foot'] = tr['preferred_foot'].apply(lambda x: 1 if x=='Right' else 0)\ntst['preferred_foot'] = tst['preferred_foot'].apply(lambda x: 1 if x=='Right' else 0)","8c8e5e0a":"def get_pos(x):\n    given_pos = x['player_positions'].split(',')\n    arr = []\n    for pos in given_pos:\n        try:\n            check_pos = x[pos.lower().strip()]\n            #print(check_pos)\n            if '+' in check_pos:\n                check_pos = int(check_pos.split('+')[0])\n            elif '-' in check_pos:\n                check_pos = int(check_pos.split('-')[0])\n            else:\n                check_pos = int(check_pos)\n            arr.append([check_pos, pos])\n        except:\n            pass    \n    if arr == []:\n        return x['player_positions']\n    arr.sort(key = lambda x: -x[0])\n    return arr[0][1]            \n        \n","569e8539":"tr['best_position'] = tr.apply(lambda row: get_pos(row), axis = 1)\ntst['best_position'] = tst.apply(lambda row: get_pos(row), axis = 1)","c5b164c6":"def label_pos (row):\n    if (\"RB\" in row.player_positions or \"CB\" in row.player_positions or \"LB\" in row.player_positions or \n       \"LWB\" in row.player_positions or \"RCB\" in row.player_positions or \"RWB\" in row.player_positions or \n       \"LCB\" in row.player_positions):\n        return 'Defender'\n    \n    if(\"RW\" in row.player_positions or \"CF\" in row.player_positions or \"LW\" in row.player_positions or \n       \"ST\" in row.player_positions or \"RS\"in row.player_positions or \"LS\" in row.player_positions \n       or \"LF\"in row.player_positions or \"RF\" in row.player_positions):\n        return 'Forward'\n    \n    if(\"RM\" in row.player_positions or \"CM\" in row.player_positions or \"LM\" in row.player_positions \n       or \"CAM\" in row.player_positions or \"LDM\" in row.player_positions or \"RDM\" in row.player_positions\n      or \"LAM\" in row.player_positions or \"RAM\" in row.player_positions or \"CDM\" in row.player_positions\n       or \"RCM\" in row.player_positions or \"LCM\" in row.player_positions ):\n        return 'MidFielder'\n\n    return \"GK\"","4b733f99":"tr['field_position'] = tr.apply(lambda row: label_pos(row), axis=1)\ntst['field_position'] = tst.apply(lambda row: label_pos(row), axis=1)","dab2bc12":"tr.field_position.value_counts()","96efa6be":"s_idx = list(tr.columns).index('pace')\ne_idx = list(tr.columns).index('attacking_crossing')\n\nfor i in range(s_idx,e_idx):\n    tr[list(tr.columns)[i]].fillna(0,inplace=True)\n    tst[list(tr.columns)[i]].fillna(0,inplace=True)\n    \n\n\ns_idx = list(tr.columns).index('attacking_crossing')\ne_idx = list(tr.columns).index('rb')\n\nfor i in range(s_idx,e_idx+1):\n    tr[list(tr.columns)[i]].fillna('0',inplace=True)\n    tst[list(tr.columns)[i]].fillna('0',inplace=True)","be8269c9":"\ndef skill_split(col,df):\n    df.loc[:,col+'diff'] = df.loc[:,col].apply(lambda x : [int(i) for i in x.split('+')][-1] if '+' in x else [int(i) for i in x.split('-')][-1] if '-' in x else 0)\n\ndef skill_convert(col,df):\n    df.loc[:,col] = df.loc[:,col].apply(lambda x : [int(i) for i in x.split('+')][0] if '+' in x else [int(i) for i in x.split('-')][0] if '-' in x else int(x))","f836fd61":"cols = list(tr.columns)\nstart_idx = cols.index('attacking_crossing')\nend_idx = cols.index('rb')\n\nfor col in range(start_idx,end_idx+1):\n    skill_split(cols[col],tr)\n    skill_convert(cols[col],tr)\n\n\nfor col in range(start_idx,end_idx+1):\n    skill_split(cols[col],tst)\n    skill_convert(cols[col],tst)","01c9f165":"tr['time_to gain_speed'] = tr['movement_sprint_speed']\/tr['movement_acceleration']\ntst['time_to gain_speed'] = tst['movement_sprint_speed']\/tst['movement_acceleration']","d8c52703":"plt.figure(figsize=(20, 10));\nplt.scatter(tr.mentality_aggression,tr.value)\nplt.title('Agression vs Value of Players',fontsize=14,fontweight='bold');\nplt.xlabel('Agression');\nplt.ylabel('Value');","44d44f19":"plt.figure(figsize=(20, 10));\nplt.scatter(tr.overall,tr.value)\nplt.title('Overall vs Value of Players',fontsize=14,fontweight='bold');\nplt.xlabel('overall');\nplt.ylabel('Value');","98c10cad":"import seaborn as sns\nplt.figure(figsize=(20, 10));\np = sns.lineplot(x = 'age', y = 'overall', ci = None, data = tr, label = 'Overall')\np = sns.lineplot(x = 'age', y = 'potential', ci = None, data = tr, label = 'Potential')\np = plt.ylabel('Potential vs Overall')\np = plt.legend(loc = 1)","2ff625d3":"#plt.rcParams['figure.figsize'] = (15, 7)\nsns.countplot(tr['field_position'],color=\"royalblue\")\nplt.title(\"Player's positions distribution\", fontsize = 20)\nplt.tick_params(axis='x', rotation=70)\nplt.xlabel('Field Position',fontsize=15,fontweight='bold')\nplt.ylabel('Count',fontsize=15,fontweight='bold')\nplt.show()","a9319efc":"position_count = tr['best_position'].value_counts()\nplt.figure(figsize=(20,15))\nsns.barplot(position_count.values,position_count.index,  alpha=0.8)\nplt.title('No. of players by best position')\nplt.ylabel('Position', fontsize=12)\nplt.xlabel('Players', fontsize=12)","ba62fe1a":"col = [ 'age', 'height_cm', 'weight_kg', 'overall', 'potential',\n        'value', 'preferred_foot', 'international_reputation', 'weak_foot',\n        'skill_moves', 'dob_yr', 'dob_m', 'age_category', 'fifa_yr','release_clause_eur', 'team_jersey_number', 'contract_valid_until',\n        'nation_jersey_number', 'pace', 'shooting', 'passing', 'dribbling',\n        'defending', 'physic', 'gk_diving', 'gk_handling', 'gk_kicking',\n        'gk_reflexes', 'gk_speed', 'gk_positioning', 'joined_yr', 'joined_m',\n        'contract_length', 'joining_age', 'membership_yrs']","7f711307":"plt.rcParams['figure.figsize']=(25,16)\nhm=sns.heatmap(tr[col].corr(), annot = True, linewidths=.5, cmap='Reds')\nhm.set_title(label='Heatmap of dataset', fontsize=20)\nhm;","423af6bc":"tr.drop(columns=['short_name','player_traits','player_tags','sofifa_id','long_name','player_url','loaned_from','real_face','nation_position','nation_jersey_number','team_position','team_jersey_number'],inplace=True)\ntst.drop(columns=['short_name','player_traits','player_tags','sofifa_id','long_name','player_url','loaned_from','real_face','nation_position','nation_jersey_number','team_position','team_jersey_number'],inplace=True)","43e2b782":"import pickle","899986ff":"modelc = pickle.load(open('cat.txt', 'rb'))","c92b080d":"cat = modelc.predict(tst)","ce3236d5":"modell = lightgbm.Booster(model_file='lgb.txt')","ebe3d31b":"lgb=model.predict(test1)","ffb01fb6":"fp = {'Defender':0.5,'MidFielder':0.75,'Forward':1,'GK':0.25}\ntr['field_position'] = tr['field_position'].apply(lambda x:fp[x] if not pd.isnull(x) else x)\ntst['field_position'] = tst['field_position'].apply(lambda x:fp[x] if not pd.isnull(x) else x)","fa597511":"tp={'SUB':27,'RES':26,'RCB':25,'LCB':24,'LB':23,'RB':22,'ST':21,'RM':20,'LM':19,'RCM':18,'LCM':17,'CAM':16,'LDM':15,'RDM':14,'RS':13,'LS':12,'CDM':11,'LW':10,'RW':9,'CB':8,'CM':7,'LWB':6,'RWB':5,'RAM':4,'LAM':3,'CF':2,'LF':1,'RF':0,'GK':0}\n\ntr['best_position'] = tr['best_position'].apply(lambda x:tp[x.lstrip()] if not pd.isnull(x) else x)\ntst['best_position'] = tst['best_position'].apply(lambda x:tp[x.lstrip()] if not pd.isnull(x) else x)","1a31d33e":"xgb = pickle.load(open('xgb.txt', \"rb\"))","bc31f452":"df1 = pd.DataFrame()\ndf1['cat'] = cat\ndf1['lgb'] = lgb\ndf1['xgb'] = xgbReg.predict(X_test)","4d61d04d":"tst1=pd.read_csv('kick-off\\\\FIFA_test.csv')\ntst=pd.read_csv('kick-off\\\\FIFA_test_player_data.csv')","6e8b26d2":"tst['value']= 0.3*df1['xgb']+ 0.6*df1['cat']+0.1*df1['lgb']","0fc66f60":"from collections import defaultdict\nids=list(tst.sofifa_id)\nval=list(tst.value) \ndic = {}\n\nfor i in range(len(ids)):\n    if ids[i] in dic:\n        dic[ids[i]]=max(dic[ids[i]],val[i])\n    else:\n        dic[ids[i]] = val[i]\n\n# for i in range(len(ids)):\n#     dictt[ids[i]][0] += val[i]\n#     dictt[ids[i]][1] += 1\n    \n# dic = {}\n# for x, y in dictt.items():\n#     dic[x] = y[0] \/ y[1]","649ba9fe":"mvp=[]\nfor idx,row in tst1.iterrows():\n    \n    r = row['player_ids']\n    r = r[1:-1].split(',')\n    r = [int(x) for x in r]\n    v = [dic[i] for i in r]\n    mvp.append(r[v.index(max(v))])\n    \n","fef8831f":"tst1['most_valued_player_id']=mvp","1c1e2e77":"tst1.set_index(['player_ids'],inplace=True,drop='True')","040e3775":"tst1.to_csv('submission.csv')","50256fde":"tr_gk = tr[tr.player_positions=='GK']\ntr_ngk= tr[tr.player_positions!='GK']\n\ntr_ngk.drop(columns=['gk_diving','gk_handling','gk_kicking','gk_reflexes','gk_speed','gk_positioning'],inplace=True)\ntr_gk.drop(columns=['pace','shooting','passing','dribbling','defending','physic','ls','st','rs','lw','lf','cf','rf','rw','lam','cam','ram','lm','lcm','cm','rcm','rm','lwb','ldm','cdm','rdm','rwb','lb','lcb','cb','rcb','rb'],inplace=True)","84ca08b2":"tst_gk = tst[tst.player_positions=='GK']\ntst_ngk= tst[tst.player_positions!='GK']\n\ntst_ngk.drop(columns=['gk_diving','gk_handling','gk_kicking','gk_reflexes','gk_speed','gk_positioning'],inplace=True)\ntst_gk.drop(columns=['pace','shooting','passing','dribbling','defending','physic','ls','st','rs','lw','lf','cf','rf','rw','lam','cam','ram','lm','lcm','cm','rcm','rm','lwb','ldm','cdm','rdm','rwb','lb','lcb','cb','rcb','rb'],inplace=True)","75c47553":"## EDA","5486ad3b":"## SPRINT SPEED AND ACCELARATION","8057adc5":"## MEMBERSHIP YEARS","1bf1335e":"#### The above 3 models should be trained on each part of the data and then the results should be combined.","d9ba94b9":"## WORK RATE","05dc328d":"## CAT BOOST","a8149823":"## SKILL CONVERSION","c1d6bc3c":"## LGB","9e5d7484":"# MODEL BUILDING","7d74647d":"An other approach is to split the dataset so as to separate the goal keepers from the remaining players","919555b1":"## PREFERRED FOOT","75dab32d":"## PREDICTIONS","02212670":"### ALTERNATE APPROACH ","0f75d80e":"## CONTRACT LENGTH","87afa6db":"## BODY TYPE","b0e534f8":"#### Encoding categorical features as xgb cant handle them","120bdf00":"## FIFA YEAR","5951820e":"## JOINING AGE","4f9b8b31":"## JOINED","daf8dfe0":"## AGE CATEGORY","6688d818":"## PLAYER POSITIONS","1caa6903":"## Team Name - Samosa Tree\n### Members:\n#### 1. CHETANA \n#### 2. SUNIL KUMAR","27041218":"## XGB"}}