{"cell_type":{"9a4649e4":"code","097fe84d":"code","136b40c8":"code","89d9ea5c":"code","ffe14c72":"code","bf9cc599":"code","ce53bedc":"code","939a8cfe":"code","6d4d8f13":"code","ba02cb69":"code","edfe4d08":"code","7ed74724":"code","56e4219d":"code","9f21f281":"code","0a348c79":"markdown","d37dcbd7":"markdown","4a558e49":"markdown","509f7045":"markdown"},"source":{"9a4649e4":"# This workbook leads directly to assessment number 1 in this module\n# Copy or type out the commands in your own notebook","097fe84d":"import shapely.geometry as shg\nimport matplotlib.pyplot as plt\nfrom pylab import rcParams\n\nrcParams['figure.figsize'] = 12, 12 #makes our plots bigger!","136b40c8":"#Create some polygons\np1 = [(1.0, 1.0), (1.0, 5.0), (5.0, 5.0), (5.0, 1.0), (1.0, 1.0)]\np2 = [(2, 1), (5, 1), (6, 3), (6, 4),(3, 8),(1, 4), (1, 2), (2, 1)]\n\n#Visualise them\nxy1 = list(zip(*p1))\nxy2 = list(zip(*p2))\n\nplt.plot(xy1[0], xy1[1])\nplt.plot(xy2[0], xy2[1])\n","89d9ea5c":"#Check areas using shapely\nsp1 = shg.Polygon(p1)\nsp2 = shg.Polygon(p2)\nprint('Area of polygon 1 {} is {}'.format(sp1, sp1.area))\nprint('Area of polygon 2 {} is {}'.format(sp2, sp2.area))","ffe14c72":"#Calculate the area of a polygon using vector product\ndef newarea(poly):\n    sumarea = 0\n    for i in range(0, len(poly)-1):\n        xi = poly[i][0]\n        yi = poly[i][1]\n        xj = poly[i+1][0]\n        yj = poly[i+1][1]\n        sumarea = sumarea + ((xi*yj)-(yi*xj))\n    sumarea = (sumarea) * 0.5\n    return sumarea","bf9cc599":"print('Area of polygon 1 is {}'.format(newarea(p1)))\n","ce53bedc":"#Switch order of polygon vertices using the REVERSE function and we now get +16\nprint ('Polygon 1: {}'.format(p1))\np1.reverse()\nprint ('Polygon 1: {}'.format(p1))\nprint('Area of polygon 1 is {}'.format(newarea(p1)))","939a8cfe":"print('Area of polygon 2 is: {}'.format(newarea(p2)))","6d4d8f13":"#So that works now lets change the function so that it provides just the sign rather than the actual area\n\ndef areasign(poly):\n    sumarea = 0\n    for i in range(0, len(poly)-1):\n        xi = poly[i][0]\n        yi = poly[i][1]\n        xj = poly[i+1][0]\n        yj = poly[i+1][1]\n        sumarea = sumarea + ((xi*yj)-(yi*xj))\n        \n    if sumarea == 0: return 0\n    if sumarea < 0:  return -1\n    if sumarea > 0:  return 1","ba02cb69":"#And test it\nprint('Areasign of polygon 1 is: {}'.format(areasign(p1)))\np1.reverse()\nprint('Areasign of polygon 1 is: {}'.format(areasign(p1)))","edfe4d08":"#test the handedness of a point (does it lie to the left, right or collinear with a line segment)\n#see slide 11 in lecture 2 p, p' and p'' and line qr\n\ntestline = [(2,2), (5,5)]\ntp1 = (1,5)\ntp2 = (6,2)\ntp3 = (1,1)","7ed74724":"#Plot them out so we can visualise them\n#tp1 is to the left of the line (the line is going up)\n#tp2 is to the right of the line\n#tp3 is collinear with the line\n\ntl1xy = list(zip(*testline))\nplt.plot(tl1xy[0], tl1xy[1])\nplt.plot(tp1[0], tp1[1], 'rx')\nplt.plot(tp2[0], tp2[1], 'bx')\nplt.plot(tp3[0], tp3[1], 'gx')","56e4219d":"# Need to create triangles representing\n# pqr p'qr and p''qr\n\n#Create a copy of the line\ntri1 = testline.copy()\ntri2 = testline.copy()\ntri3 = testline.copy()\n\n#insert the test point at the start\ntri1.insert(0, tp1)\ntri2.insert(0, tp2)\ntri3.insert(0, tp3)\n\n#Close the polygon by adding at the start coordinate at the end\ntri1.append(tp1)\ntri2.append(tp2)\ntri3.append(tp3)\n\nprint(tri1)\nprint(tri2)\nprint(tri3)\n","9f21f281":"print(areasign(tri1)) \nprint(areasign(tri2))\nprint(areasign(tri3))","0a348c79":"# [Functions in Python](https:\/\/www.w3schools.com\/python\/python_functions.asp)","d37dcbd7":"Value is Negative as the polygon is encoded clockwise","4a558e49":"# Understand the output\n* 1 then p lies to the left of the line\n* -1 then p lies to the right of the line\n* 0 then p is collinear with the line","509f7045":"# Further work\n* Create a polygon from the image below and test both the area functions to compute the area and areasign\n* Check answers using Shapely\n* plot it out!\n![image.png](attachment:image.png)\n\n"}}