{"cell_type":{"5cd4c103":"code","7c1fc60c":"code","b5298983":"code","7a823bfc":"code","3bbc67d6":"code","55b736fd":"code","e7d56a5b":"code","4407f6a1":"markdown","6ad3f27b":"markdown","c65bc0af":"markdown","75fdba36":"markdown","5ecbd339":"markdown","99471254":"markdown","f5ee6b15":"markdown"},"source":{"5cd4c103":"import pandas as pd\nimport os\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","7c1fc60c":"# Importing required modules\nimport pandas as pd          \nimport numpy as np               # For mathematical calculations \nimport matplotlib.pyplot as plt  # For plotting graphs \nimport datetime as dt\nfrom datetime import datetime    # To access datetime \nfrom pandas import Series        # To work on series \n%matplotlib inline \n\nimport warnings                   # To ignore the warnings \nwarnings.filterwarnings(\"ignore\")\n\n\n# Settings for pretty nice plots\nplt.style.use('fivethirtyeight')\nplt.show()","b5298983":"# Load the 'diet' csv file into a dataframe - diet\ndiet = pd.read_csv('..\/input\/week6dataset\/diet.csv')\ndiet.head()","7a823bfc":"# Convert string to datetime64\ndiet['Week'] = diet['Week'].apply(pd.to_datetime)\ndiet.info()","3bbc67d6":"# We can use pandas datetime attribute 'dt' to access the datetime components\ndiet['year'] = diet['Week'].dt.year\nprint(diet['year'])","55b736fd":"# Convert the date index to datetime\ndiet['year'] = diet['Week'].dt.year\n\n\n# Plot data  \ndiet['year'].plot()\nplt.show()","e7d56a5b":"# Read the MSFT csv into a dataframe MSFT\nMSFT = pd.read_csv('\/kaggle\/input\/financial-time-series-datasets\/data\/MSFT.csv')\n\n# DateTimeIndex is needed to convert 'Date' from string to DateTime\nMSFT['Date'] = pd.to_datetime(MSFT['Date'])\n\n# Convert the daily data to weekly data\nMSFT = MSFT.set_index('Date').resample(rule='w', how='last')\n\n# Compute the percentage change of prices\nreturns = MSFT.pct_change()\n\n# Compute and print the autocorrelation of returns\nautocorrelation = returns['Adj Close'].autocorr()\nprint(\"The autocorrelation of weekly returns is %4.2f\" %(autocorrelation))","4407f6a1":"# A Popular Strategy Using Autocorrelation\n\nOne puzzling anomaly with stocks is that investors tend to overreact to news. Following large jumps, either up or down, stock prices tend to reverse. This is described as mean reversion in stock prices: prices tend to bounce back, or revert, towards previous levels after large moves, which are observed over time horizons of about a week. A more mathematical way to describe mean reversion is to say that stock returns are negatively autocorrelated.\n\nThis simple idea is actually the basis for a popular hedge fund strategy. If you're curious to learn more about this hedge fund strategy (although it's not necessary reading for anything else later in the course), see here.\n\nYou'll look at the autocorrelation of weekly returns of MSFT stock from 2012 to 2017. You'll start with a DataFrame MSFT of daily prices. You should use the .resample() method to get weekly prices and then compute returns from prices. Use the pandas method .autocorr() to get the autocorrelation and show that the autocorrelation is negative. Note that the .autocorr() method only works on Series, not DataFrames (even DataFrames with one column), so you will have to select the column in the DataFrame.\n\nINSTRUCTIONS\n\nUse the .resample() method with rule='W' and how='last' to convert daily data to weekly data.\nCreate a new DataFrame, returns, of percent changes in weekly prices using the .pct_change() method.\nCompute the autocorrelation using the .autocorr() method on the series of closing stock prices, which is the column Adj Close in the DataFrame returns.\n\nNotice that autocorrelation of returns for MSFT is negative, so the stock is 'mean reverting'","6ad3f27b":"## Introduction to Times Series Analysis with Python\n## Correlation and Autocorrelation","c65bc0af":"****\nGoogle Trends allows users to see how often a term is searched for. We downloaded a file from Google Trends containing the frequency over time for the search word \"diet\". \n\nA first step when analyzing a time series is to visualize the data with a plot. You should be able to clearly see a gradual decrease in searches for \"diet\" throughout the calendar year, hitting a low around the December holidays, followed by a spike in searches around the new year as people make New Year's resolutions to lose weight.\n\nLike many time series datasets you will be working with, the index of dates are strings and should be converted to a datetime index before plotting.\n\nINSTRUCTIONS\n\nConvert the date index to datetime using pd.to_datetime().\nUse the .plot() method with slicing to plot data for only 2016.\nPlot the entire time series and set the argument grid=True to better see the year-ends.","75fdba36":"It appears that the 'Week' column is being treated as a string rather than as dates. To fix this, we\u2019ll use the pandas `to_datetime()` feature which converts the arguments to dates.[](http:\/\/)","5ecbd339":"# Time series data\n\nTime series data is a sequence of data points in chronological order that is used by businesses to analyze past data and make future predictions. These data points are a set of observations at specified times and equal intervals, typically with a datetime index and corresponding value. Common examples of time series data in our day-to-day lives include:      \n\n* Measuring weather temperatures \n* Measuring the intensity of earthquakes\n* Predicting a company\u2019s stock prices for the next day\n\n## Components of Time\u00a0Series\n\nTime series data consist of four components:\n\n* Trend Component: This is a variation that moves up or down in a reasonably predictable pattern over a long period.\n\n* Seasonality Component: is the variation that is regular and periodic and repeats itself over a specific period such as a day, week, month, season, etc.,\n\n* Cyclical Component: is the variation that corresponds with business or economic 'boom-bust' cycles or follows their own peculiar cycles, and\n\n* Random Component: is the variation that is erratic or residual and does not fall under any of the above three classifications.","99471254":"### Key Points\n* Pandas for time series analysis\n - Converting Date Index to datetime\n* Google Trends\n* AutoCorrelation\n* Mean Reversion","f5ee6b15":"<h1 style=\"color:brown\">Time Series Forecasting for Stock Returns"}}