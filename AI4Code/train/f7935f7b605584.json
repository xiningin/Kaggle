{"cell_type":{"a4c246f0":"code","0cd2c80a":"code","409afcca":"code","6045fe35":"code","7d30409f":"code","71cbf2a6":"code","7c6949d6":"code","638dbb19":"code","8979c0e0":"code","5e885185":"code","8bd15721":"code","38ea9e2c":"code","aff186bb":"code","8d22033f":"code","0b71fdda":"code","a4572192":"code","fbb1fcd1":"code","0c05fa3b":"code","689f3181":"code","8632d759":"code","64524306":"markdown","fbf2a843":"markdown","7cb86133":"markdown","22eaa16a":"markdown","92ba5a7c":"markdown","1a11fde8":"markdown","caaf1761":"markdown","95efc5fa":"markdown","9789268c":"markdown","cc4b96e0":"markdown","4761bf25":"markdown","a420e5bc":"markdown","0effe16a":"markdown"},"source":{"a4c246f0":"%matplotlib inline\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.rcParams[\"figure.figsize\"] = (15, 10)\nplt.rcParams[\"figure.dpi\"] = 125\nplt.rcParams[\"font.size\"] = 14\nplt.rcParams['font.family'] = ['sans-serif']\nplt.rcParams['font.sans-serif'] = ['DejaVu Sans']\nplt.style.use('ggplot')\nsns.set_style(\"whitegrid\", {'axes.grid': False})\nplt.rcParams['image.cmap'] = 'gray' # grayscale looks better","0cd2c80a":"from pathlib import Path\nimport numpy as np\nimport pandas as pd\nimport os\nfrom skimage.io import imread as imread\nfrom skimage.util import montage\nfrom PIL import Image\nmontage_rgb = lambda x: np.stack([montage(x[:, :, :, i]) for i in range(x.shape[3])], -1)\nfrom skimage.color import label2rgb","409afcca":"dx_name_dict = {\n    'nv': 'melanocytic nevi',\n    'mel': 'melanoma',\n    'bcc': 'basal cell carcinoma',\n    'akiec': 'Actinic keratoses and intraepithelial carcinoma',\n    'vasc': 'vascular lesions',\n    'bkl': 'benign keratosis-like',\n    'df': 'dermatofibroma'\n}\ndx_name_id_dict = {id: name for id, name in enumerate(dx_name_dict.values())}","6045fe35":"from sklearn.preprocessing import OneHotEncoder\nohe = OneHotEncoder(sparse=False, categories=\"auto\")\n\ncolor_file = Path('..') \/ 'input' \/  'skin-images-to-features' \/ 'color_features.json'\ncolor_feat_df = pd.read_json(color_file)\ncolor_feat_df['dx_vec'] = [x for x in ohe.fit_transform(color_feat_df['dx_id'].values.reshape(-1, 1))]\ncolor_feat_df.sample(2)","7d30409f":"from sklearn.model_selection import train_test_split\ntrain_df, valid_df = train_test_split(color_feat_df, \n                 test_size = 0.2, \n                 random_state=2019,\n                  # hack to make stratification work                  \n                 stratify = color_feat_df['dx_name'])\ntrain_df.reset_index(inplace=True)\nvalid_df.reset_index(inplace=True)\nprint(train_df.shape[0], 'training images')\nprint(valid_df.shape[0], 'validation images')","71cbf2a6":"train_x_vec = np.stack(train_df['color_features'].values, 0)\ntrain_y_vec = np.stack(train_df['dx_vec'], 0)\nprint(train_x_vec.shape, '->', train_y_vec.shape)\nvalid_x_vec = np.stack(valid_df['color_features'].values, 0)\nvalid_y_vec = np.stack(valid_df['dx_vec'], 0)\nprint(valid_x_vec.shape, '->', valid_y_vec.shape)","7c6949d6":"from sklearn.metrics import roc_auc_score, roc_curve, accuracy_score\ndef show_model_results(in_model, use_split='valid', plot_type='swarm'):\n    if use_split=='valid':\n        x_vec = valid_x_vec\n        y_vec = valid_y_vec\n        example_df = valid_df\n    elif use_split=='train':\n        x_vec = train_x_vec\n        y_vec = train_y_vec\n        example_df = train_df\n    else:\n        raise ValueError('Unknown split: {}'.format(use_split))\n    \n    valid_pred = in_model.predict(x_vec)\n    fig, m_axs = plt.subplots(4, 2, figsize=(20, 40))\n    all_rows = []\n    ax1 = m_axs[0,0]\n    print(y_vec.shape, valid_pred.shape)\n    for i, c_dx in dx_name_id_dict.items():\n        tpr, fpr, _ = roc_curve(y_vec[:, i], valid_pred[:, i])\n        auc = roc_auc_score(y_vec[:, i], valid_pred[:, i])\n        acc = accuracy_score(y_vec[:, i], valid_pred[:, i]>0.5)\n        ax1.plot(tpr, fpr, '.-', label='{}: AUC {:0.2f}, Accuracy: {:2.0%}'.format(c_dx, auc, acc))\n        all_rows+=[{'dx_name': c_dx, \n                    'prediction': valid_pred[j, i], \n                    'class': 'Positive' if y_vec[j, i]>0.5 else 'Negative'} \n                         for j in range(valid_pred.shape[0])]\n    \n    d_ax = m_axs[0, 1]\n    t_yp = np.mean(valid_pred, 0)\n    t_y = np.mean(y_vec, 0)\n    d_ax.barh(np.arange(len(dx_name_id_dict))+0.1, t_yp, alpha=0.5, label='Predicted')\n    d_ax.barh(np.arange(len(dx_name_id_dict))-0.1, t_y+0.001, alpha=0.5, label='Ground Truth')\n    d_ax.set_xlim(0, 1)\n    d_ax.set_yticks(range(len(dx_name_id_dict)))\n    d_ax.set_yticklabels(dx_name_id_dict.values(), rotation=0)\n    d_ax.set_title('Overall')\n    d_ax.legend()\n    \n    # show example images\n    ax1.legend()\n    for (_, c_row), (c_ax, d_ax) in zip(\n        example_df.sample(m_axs.shape[0]).iterrows(), \n                               m_axs[1:]):\n        \n        c_ax.imshow(imread(c_row['image_path']))\n        c_ax.set_title(c_row['dx_name'])\n        c_ax.axis('off')\n        t_yp = in_model.predict(np.expand_dims(c_row['color_features'], 0))\n        t_y = np.array(c_row['dx_vec'])\n        d_ax.barh(np.arange(len(dx_name_id_dict))+0.1, t_yp[0], alpha=0.5, label='Predicted')\n        d_ax.barh(np.arange(len(dx_name_id_dict))-0.1, t_y+0.001, alpha=0.5, label='Ground Truth')\n        d_ax.set_yticks(range(len(dx_name_id_dict)))\n        d_ax.set_yticklabels(dx_name_id_dict.values(), rotation=0)\n        d_ax.set_xlim(0, 1)\n        d_ax.legend();\n    \n    # nice dataframe of output\n    c_all_df = pd.DataFrame(all_rows)\n    fig, ax1 = plt.subplots(1, 1, figsize=(12, 5))\n    if plot_type=='swarm':\n        sns.swarmplot(data=c_all_df, hue='class', y='prediction', x='dx_name', size=2.0, ax=ax1)\n    elif plot_type=='box':\n        sns.boxplot(data=c_all_df, hue='class', y='prediction', x='dx_name', ax=ax1)\n    ax1.set_ylim(-0.05, 1.05)\n    return c_all_df","638dbb19":"from sklearn.neighbors import KNeighborsRegressor\nknn = KNeighborsRegressor(n_neighbors=1)\nknn.fit(train_x_vec, train_y_vec)","8979c0e0":"show_model_results(knn, use_split='train', plot_type='box');","5e885185":"fig, m_axs = plt.subplots(6, 4, figsize=(30, 40))\ndummy_web_image = Image.new(size=(1,1), mode='RGB').convert('P', palette='web')\n\nfor (c_ax, c_feat_ax, d_ax, d_feat_ax), (_, c_row) in zip(m_axs, \n                            color_feat_df.sample(m_axs.shape[0], random_state=2018).iterrows()):\n    \n    query_img = Image.open(c_row['image_path'])\n    idx_to_color = np.array(query_img.convert('P', palette='web').getpalette()).reshape((-1, 3))\/255.0\n    c_ax.imshow(query_img)\n    c_ax.set_title(c_row['lesion_id'][:25])\n    c_ax.axis('off')\n    counts, bins = np.histogram(np.ravel(query_img.convert('P', palette='web')), \n                                bins=np.arange(256))\n    \n    for i in range(counts.shape[0]):\n        c_feat_ax.bar(bins[i], counts[i], color=idx_to_color[i], edgecolor='k', linewidth=0.1)\n    c_feat_ax.set_yscale('log')\n    c_feat_ax.set_xlabel('Color Id')\n    c_feat_ax.set_ylabel('Pixel Count')\n    c_feat_ax.set_title('Feature Vector')\n    \n    dist, idx = knn.kneighbors(np.expand_dims(c_row['color_features'], 0))\n    m_row = train_df.iloc[idx[0][0]]\n    matched_img = Image.open(m_row['image_path'])\n    \n    d_ax.imshow(matched_img)\n    d_ax.set_title('Closest Match\\n{}\\nDistance: {:2.1%}'.format(m_row['lesion_id'][:25], dist[0][0]))\n    d_ax.axis('off')\n    \n    counts, bins = np.histogram(np.ravel(matched_img.convert('P', palette='web')), \n                                bins=np.arange(256))\n    \n    for i in range(counts.shape[0]):\n        d_feat_ax.bar(bins[i], counts[i], color=idx_to_color[i], edgecolor='k', linewidth=0.1)\n    d_feat_ax.set_yscale('log')\n    d_feat_ax.set_xlabel('Color Id')\n    d_feat_ax.set_ylabel('Pixel Count')\n    c_feat_ax.set_title('Matched Feature')","8bd15721":"show_model_results(knn, use_split='valid');","38ea9e2c":"from sklearn.linear_model import LinearRegression\nlr = LinearRegression()\nlr.fit(train_x_vec, train_y_vec)","aff186bb":"show_model_results(lr);","8d22033f":"from sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.feature_selection import VarianceThreshold\nlr_pipe = make_pipeline(RobustScaler(), VarianceThreshold(0.99), LinearRegression())\nlr_pipe.fit(train_x_vec, train_y_vec)","0b71fdda":"show_model_results(lr_pipe);","a4572192":"from sklearn.tree import DecisionTreeRegressor\nfrom sklearn.decomposition import PCA\ndt_pipe = make_pipeline(RobustScaler(), \n                        PCA(n_components=10), \n                        DecisionTreeRegressor(max_depth=5, min_samples_split=50))\ndt_pipe.fit(train_x_vec, train_y_vec)\nshow_model_results(dt_pipe);","fbb1fcd1":"from sklearn.tree import export_graphviz\nimport graphviz\ndef show_tree(in_tree):\n    return graphviz.Source(export_graphviz(in_tree, out_file=None))\n\nshow_tree(dt_pipe.steps[-1][1])","0c05fa3b":"from sklearn.ensemble import RandomForestRegressor\nrf_pipe = make_pipeline(RobustScaler(), RandomForestRegressor(n_estimators=200))\nrf_pipe.fit(train_x_vec, train_y_vec)\nshow_model_results(rf_pipe);","689f3181":"from xgboost import XGBRegressor\nfrom sklearn.multioutput import MultiOutputRegressor\nxg_pipe = make_pipeline(RobustScaler(), \n                        MultiOutputRegressor(XGBRegressor(objective='reg:linear')))\nxg_pipe.fit(train_x_vec, train_y_vec)","8632d759":"show_model_results(xg_pipe);","64524306":"Split up the groups so we can validate our model on something besides the direct training data","fbf2a843":"## Read in the Color Features","7cb86133":"# More Complicated Models\nWe can try decision trees to get better results","22eaa16a":"## Use on the validation split","92ba5a7c":"# The Simplist Model\nNearest Neighbor works by finding the most similar case from the training data using the feature vector. We can directly visualize this by showing which training image was being looked at.","1a11fde8":"## XGBoost\nOne of the most powerful classification tools","caaf1761":"# Linear Regression Model","95efc5fa":"## Show the results\nWe get incredibly good, nearly perfect results! Are we done now? Time to build an app and sell it to google for $$$?","9789268c":"# Goal\nThe goal is to make a simple model that can go from an image (taken with a smartphone) to a prediction of how likely different allergens are to be present in the food. It could be part of a helpful app for people trying to avoid foods they might be allergic to.\n\n## Setup\nWe basically take the precomputed color features and build simple models in order to determine if the food contains any of the 8 different allergens identified [here](https:\/\/www.kaggle.com\/kmader\/ingredients-to-allergies-mapping\/). We try to create a balanced training group and a realistic validation group to know if the model is learning anything useful","cc4b96e0":"# Display Results Nicely\nWe want to have code to display our results nicely so we can see what worked well and what didn't","4761bf25":"## Normalize the input\n\nWe can make a pipeline to normalize the input and remove bad features","a420e5bc":"## Let's dig down a bit deeper, how does it work?","0effe16a":"# Fancier Models\nHere we can use much fancier models like random forest to even further improve the performance"}}