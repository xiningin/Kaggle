{"cell_type":{"882e57ed":"code","db5484db":"code","be02081e":"code","0d5d3c7d":"code","7440626d":"code","5b37a4b2":"code","2cbe0712":"code","f61509fa":"code","d3c8a54c":"code","babb3b23":"code","73cf4a34":"code","4e9d45a9":"code","47d9c6ca":"code","8d6fccec":"code","d7c37e79":"code","a28a08fe":"code","6b3eb510":"code","d71a71f6":"code","04febe4d":"code","179bc7f9":"code","fc17defd":"code","88ef95db":"code","f7a6039d":"code","70bc3205":"code","bde1c6ad":"code","bc126b0a":"code","8f687c2a":"code","29550eb4":"code","dcc4f2cc":"code","a9214573":"code","553821df":"code","5975733c":"code","66043fed":"code","1538905d":"code","ebc101c4":"code","f7825cb5":"code","aabe9db8":"code","c02da1c8":"code","d249bbf1":"code","0c101bfd":"code","e67ca946":"code","ae523a62":"code","d2713ba9":"code","960ec075":"code","04ea7b2e":"code","91091968":"code","e8e850ca":"code","0d9398ee":"code","f0d6a60f":"code","cbef6bf0":"code","1d6917b3":"code","d3af9cb9":"code","939af8c3":"code","e2b02972":"code","8ea61622":"code","cc66bb0f":"code","07f90773":"code","78fa8e15":"code","92eed9b4":"code","d0f24556":"code","5e6e54b2":"code","b9e40a19":"code","cd870757":"code","dc6c29fd":"code","5a0f2c7c":"code","1db739b4":"code","b7553ce8":"code","60f80bce":"code","295378c7":"markdown","f7895f93":"markdown","2164ae33":"markdown","1f1d32ca":"markdown","360677c3":"markdown","3a623288":"markdown","1697659d":"markdown","455a9b8e":"markdown","4018d10b":"markdown","040e5376":"markdown","2ced84e9":"markdown","337cd705":"markdown","05ac30e3":"markdown","d4bb3db3":"markdown","52d43e58":"markdown","e99b3ecf":"markdown","80747b48":"markdown","197bf740":"markdown","bd7a1ddc":"markdown","8813daed":"markdown","91764b1f":"markdown","728bb3da":"markdown","34ece25c":"markdown","c86f6cfe":"markdown","4b08149a":"markdown","e1404460":"markdown","3ed71282":"markdown","8104114d":"markdown","32611cbb":"markdown","9c38dde8":"markdown","5ca906c5":"markdown","56ebd11d":"markdown","68670985":"markdown","95837c3d":"markdown","a79aa474":"markdown","7a6ef168":"markdown","e1c2f5d6":"markdown","b2678191":"markdown","c2c556c0":"markdown","e3e32ab9":"markdown","324cefe9":"markdown","6e377647":"markdown","f082568d":"markdown"},"source":{"882e57ed":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","db5484db":"# importing libraries\nimport matplotlib.pyplot as plt","be02081e":"df=pd.read_csv(\"\/kaggle\/input\/anz-synthesised-transaction-dataset\/anz.csv\")","0d5d3c7d":"df.head()","7440626d":"df.shape","5b37a4b2":"df.info()","2cbe0712":"df.bpay_biller_code.value_counts()","f61509fa":"df.drop(['bpay_biller_code','merchant_code'],axis=1,inplace=True)","d3c8a54c":"df.isna().sum()","babb3b23":"import missingno as msno","73cf4a34":"msno.matrix(df)","4e9d45a9":"msno.matrix(df[['card_present_flag','merchant_id','merchant_suburb','merchant_state','merchant_long_lat']])","47d9c6ca":"df.dropna(inplace=True)","8d6fccec":"msno.matrix(df)","d7c37e79":"print(f\"we are left with {df.shape[0]} rows and {df.shape[1]} columns\")","a28a08fe":"df.status.value_counts()","6b3eb510":"plt.plot(df.status)","d71a71f6":"df.drop(['status'],axis=1,inplace=True)","04febe4d":"df['card_present_flag'].value_counts()","179bc7f9":"plt.hist(df['card_present_flag'])","fc17defd":"df['account'].value_counts()","88ef95db":"df.drop(['account'],axis=1,inplace=True)","f7a6039d":"df['currency'].value_counts()","70bc3205":"df.drop(['currency'],axis=1,inplace=True)","bde1c6ad":"df.long_lat.value_counts()","bc126b0a":"# new data frame with split value columns \nco_ordinates = df[\"long_lat\"].str.split(\" \", n = 1, expand = True) \n  \n# making separate first name column from new data frame \ndf[\"longitude\"]= co_ordinates[0] \n  \n# making separate last name column from new data frame \ndf[\"latitude\"]= co_ordinates[1] ","8f687c2a":"df['latitude'] = df['latitude'].astype(float)\ndf['longitude'] = df['longitude'].astype(float)","29550eb4":"from mpl_toolkits.basemap import Basemap\nfig = plt.figure(figsize=(12,9))\nm = Basemap(projection='mill',\n           llcrnrlat = -90,\n           urcrnrlat = 90,\n           llcrnrlon = -180,\n           urcrnrlon = 180,\n           resolution = 'c')\nm.drawcoastlines()\nm.drawparallels(np.arange(-90,90,10),labels=[True,False,False,False])\nm.drawmeridians(np.arange(-180,180,30),labels=[0,0,0,1])\nsites_lat_y = df['latitude'].tolist()\nsites_lon_x = df['longitude'].tolist()\nm.scatter(sites_lon_x,sites_lat_y,latlon=True)\nplt.title('Basemap', fontsize=20)\nplt.show()","dcc4f2cc":"df.drop(['long_lat'],axis=1,inplace=True)","a9214573":"df['txn_description'].value_counts()","553821df":"plt.hist(df['txn_description'])","5975733c":"cleanup_txn = {\"txn_description\":{\"POS\": 1, \"SALES-POS\":0}}\ndf.replace(cleanup_txn, inplace=True)","66043fed":"df['merchant_id'].value_counts()","1538905d":"df.drop(['merchant_id'],axis=1,inplace=True)","ebc101c4":"df.first_name.value_counts()","f7825cb5":"df.balance.value_counts()","aabe9db8":"plt.hist(df.balance)","c02da1c8":"df=df[df['balance']<100000]","d249bbf1":"plt.hist(df.balance)","0c101bfd":"df.date.value_counts()","e67ca946":"type(df.date[0])","ae523a62":"\ndf['date']= pd.to_datetime(df['date']) \ndf['year'] = pd.DatetimeIndex(df['date']).year\ndf['month'] = pd.DatetimeIndex(df['date']).month","d2713ba9":"df.year.value_counts()","960ec075":"df.drop(['date','year'],axis=1,inplace=True)","04ea7b2e":"df.month.value_counts()","91091968":"df['gender'].value_counts()","e8e850ca":"cleanup_gender = {\"gender\":{\"M\": 1, \"F\":0}}\ndf.replace(cleanup_gender, inplace=True)","0d9398ee":"plt.hist(df.age)","f0d6a60f":"df['merchant_suburb'].nunique()","cbef6bf0":"df['merchant_state'].value_counts()","1d6917b3":"df.extraction.value_counts()","d3af9cb9":"df.drop(['extraction'],axis=1,inplace=True)","939af8c3":"plt.hist(df.amount)","e2b02972":"df.amount.max()","8ea61622":"perc =[.80,.90,.99] \ndf.amount.describe(percentiles=perc)","cc66bb0f":"df=df[df['amount']<378]","07f90773":"df['transaction_id'].value_counts()","78fa8e15":"df.drop(['transaction_id'],axis=1,inplace=True)","92eed9b4":"df['country'].value_counts()","d0f24556":"df.drop(['country'],axis=1,inplace=True)","5e6e54b2":"df['customer_id'].value_counts()","b9e40a19":"df.drop(['customer_id'],axis=1,inplace=True)","cd870757":"df.columns","dc6c29fd":"df['merchant_long_lat'].value_counts()","5a0f2c7c":"df.drop(['merchant_long_lat'],axis=1,inplace=True)","1db739b4":"df['movement'].value_counts()","b7553ce8":"df.drop(['movement'],axis=1,inplace=True)","60f80bce":"df","295378c7":"1. the column data is balanced and evenly distributed\n2. let's convert this strings into numeric","f7895f93":"we can see some outliers here","2164ae33":"there are some outlier like values but they can have some meaning. \n\nlet's not remove them.","1f1d32ca":"card_present_flag is pretty much imbalanced","360677c3":"Let's recheck the whole dataframe","3a623288":"this data is just rubbish and of no use.","1697659d":"converting string to date type \n\nsplitting date into only month and year","455a9b8e":"# currency","4018d10b":"since we have all the transactions in year 2018, it's obvious to remove this column","040e5376":"# customer_id","2ced84e9":"# account","337cd705":"let's remove this as it has only one value and will create noise in predictive analysis","05ac30e3":"# txn_description","d4bb3db3":"# merchant_id","52d43e58":"# first_name","e99b3ecf":"Here, we find exact number of null values for merchant data\n\nlet's check if the missing values are common for rows","80747b48":"Dropping this column too because of single value nature","197bf740":"these are probably the account numbers and won't much add value to the predictions\n\nlet's drop this column too","bd7a1ddc":"these values are probably the timestamps\n\nlet's remove for now.","8813daed":"# movement","91764b1f":"# transaction_id","728bb3da":"# merchant_suburb","34ece25c":"we can find the missing values are common with rows\n\nlet's confirm by selecting only null based columns and compare pattern","c86f6cfe":"# balance","4b08149a":"# amount","e1404460":"# country","3ed71282":"# Status","8104114d":"this seems as an outlier","32611cbb":"good proportion.\n\nlet's convert this into numeric form","9c38dde8":"single class. drop","5ca906c5":"# merchant_long_lat","56ebd11d":"encoding such unique values will increase shape and noise.\n\nlet's not make any chances to this column","68670985":"# gender","95837c3d":"let's check for each column","a79aa474":"# card_present_flag","7a6ef168":"# merchant_state","e1c2f5d6":"1. lets visualise these co-ordinates\n2. seperate lat and long for visualisation\n3. convert str to float\n4. plot on basemap","b2678191":"# final data","c2c556c0":"we can now confirm that missing values are at common rows. \nlet's eliminate the rows","e3e32ab9":"# date ","324cefe9":"we can see only that transactions happened only during august, september and october","6e377647":"# age","f082568d":"# long_lat"}}