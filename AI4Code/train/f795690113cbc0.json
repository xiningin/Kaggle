{"cell_type":{"feeb6e0a":"code","a9527c8a":"code","d1d6fb83":"code","5468f405":"code","1a8ba10c":"code","56946c4d":"code","857a2170":"code","0b7c1011":"code","3e9a36b2":"code","0a576a6a":"code","92a40e8d":"code","392c0608":"code","24cf2756":"code","b234ca94":"code","27a753f8":"code","c95fd1fd":"code","e2719f8f":"code","39de9103":"code","473f08eb":"code","db5326e7":"code","a8c4ee33":"code","b7b368e3":"code","d27d5654":"code","17acbbd2":"code","4f31f374":"code","391dbd66":"code","7ace9889":"code","5f9210ba":"code","1dd71ffe":"code","ef3457c5":"code","d58595e9":"code","2c389baa":"code","7b4af979":"code","34f9e0b9":"code","e0566ee3":"code","7800faac":"code","d6debc8c":"code","5691617d":"code","6b3eb779":"code","ec154cf7":"code","4fc54575":"code","13dfae41":"code","e4c63193":"code","7b62d396":"code","a0a64ceb":"code","fd477004":"code","d8c45fe0":"markdown","5e27a87b":"markdown","4bd13675":"markdown","9fe1b819":"markdown","49c8862c":"markdown","ef39f03a":"markdown","bbf8f7ac":"markdown","bd28d5f6":"markdown","ee3db28d":"markdown","b900fcbd":"markdown","b075f95e":"markdown","08021ff4":"markdown","cb56633c":"markdown","36f18932":"markdown","ac317767":"markdown","b90a5053":"markdown","6051c5d6":"markdown","e982a4ca":"markdown","b2d11280":"markdown","3685c80c":"markdown","960cc91a":"markdown","5d680d8b":"markdown","334e6dcf":"markdown","8efa743b":"markdown","a537aaad":"markdown","f758d972":"markdown","940c2aca":"markdown","da9dc5f9":"markdown","d52e5aaf":"markdown","422d2dbe":"markdown","153d8495":"markdown"},"source":{"feeb6e0a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a9527c8a":"import seaborn as sns \nraw_dataset = pd.read_csv(os.path.join(dirname,\"healthcare-dataset-stroke-data.csv\"))\nraw_dataset.head()","d1d6fb83":"raw_dataset.shape","5468f405":"raw_dataset.describe()","1a8ba10c":"raw_dataset.info()","56946c4d":"print(raw_dataset['age'].isna().sum())\nprint(raw_dataset['hypertension'].isna().sum())\nprint(raw_dataset['heart_disease'].isna().sum())\nprint(raw_dataset['avg_glucose_level'].isna().sum())\nprint(raw_dataset['bmi'].isna().sum())","857a2170":"stroke = raw_dataset[raw_dataset['stroke'] == 1]\nno_stroke = raw_dataset[raw_dataset['stroke'] == 0]\n\nprint (\"Stroke: %i (%.1f%%)\"%(len(stroke), float(len(stroke))\/len(raw_dataset)*100.0))\nprint (\"No stroke: %i (%.1f%%)\"%(len(no_stroke), float(len(no_stroke))\/len(raw_dataset)*100.0))\nprint (\"Total: %i\"%len(raw_dataset))","0b7c1011":"raw_dataset.gender.value_counts()","3e9a36b2":"raw_dataset.groupby('gender').stroke.value_counts()","0a576a6a":"raw_dataset[['gender', 'stroke']].groupby(['gender'], as_index=False).mean()","92a40e8d":"sns.barplot(x='gender', y='stroke', data=raw_dataset)","392c0608":"fig = plt.figure(figsize=(10,5))\nax = plt.axes()\nsns.violinplot(x=\"age\", data=raw_dataset, split=True, ax=ax)","24cf2756":"fig = plt.figure(figsize=(12,8))\nax1 = fig.add_subplot(221)\nax2 = fig.add_subplot(222)\nax3 = fig.add_subplot(223)\nax4 = fig.add_subplot(224)\n\nsns.violinplot(x=\"gender\", y=\"age\", hue=\"stroke\", data=raw_dataset, split=True, ax=ax1)\nsns.violinplot(x=\"work_type\", y=\"age\", hue=\"stroke\", data=raw_dataset, split=True, ax=ax2)\nsns.violinplot(x=\"Residence_type\", y=\"age\", hue=\"stroke\", data=raw_dataset, split=True, ax=ax3)\nsns.violinplot(x=\"smoking_status\", y=\"age\", hue=\"stroke\", data=raw_dataset, split=True, ax=ax4)","b234ca94":"fig = plt.figure(figsize=(10,5))\nax1 = fig.add_subplot(121)\nax2 = fig.add_subplot(122)\nsns.barplot(x='hypertension', y='stroke', data=raw_dataset, ax=ax1)\nsns.barplot(x='heart_disease', y='stroke', data=raw_dataset, ax=ax2)","27a753f8":"fig = plt.figure(figsize=(10,5))\nax1 = fig.add_subplot(121)\nax2 = fig.add_subplot(122)\nsns.barplot(x='hypertension', y='stroke', hue='gender', data=raw_dataset, ax=ax1)\nsns.barplot(x='heart_disease', y='stroke', hue='gender', data=raw_dataset, ax=ax2)","c95fd1fd":"fig = plt.figure(figsize=(10,5))\nax1 = fig.add_subplot(121)\nax2 = fig.add_subplot(122)\nsns.barplot(x='ever_married', y='stroke', data=raw_dataset, ax=ax1)\nsns.barplot(x='ever_married', y='stroke', hue='gender', data=raw_dataset, ax=ax2)","e2719f8f":"ever_married = raw_dataset[raw_dataset['ever_married'] == 'Yes']\nnever_married = raw_dataset[raw_dataset['ever_married'] == 'No']\n\nprint (\"Ever married: %i (%.1f%%)\"%(len(ever_married), float(len(ever_married))\/len(raw_dataset)*100.0))\nprint (\"Never married: %i (%.1f%%)\"%(len(never_married), float(len(never_married))\/len(raw_dataset)*100.0))\nprint (\"Total: %i\"%len(raw_dataset))","39de9103":"ps = float(len(stroke))\/len(raw_dataset)\nmarried_n_stroke = raw_dataset[(raw_dataset['ever_married'] == 'Yes') & (raw_dataset['stroke'] == 1)]\npms = float(len(married_n_stroke))\/len(raw_dataset)\npm_s = pms\/ps\nprint (\"The probability of being married knowing that we have a stroke is %0.1f%%\"%float(pm_s*100.0))","473f08eb":"sns.violinplot(x=\"gender\", y=\"avg_glucose_level\", hue=\"stroke\", data=raw_dataset, split=True)","db5326e7":"raw_dataset['avg_glucose_band'] = pd.cut(raw_dataset['avg_glucose_level'], 20)\nraw_dataset.avg_glucose_band.value_counts()","a8c4ee33":"figbar = plt.figure(figsize=(10,6))\naxis = plt.axes()\nglu_labels = ('(54.903, 65.951]','(65.951, 76.782]','(76.782, 87.613]', '(87.613, 98.444]','(98.444, 109.275]', '(109.275, 120.106]',\n          '(120.106, 130.937]','(130.937, 141.768]','(141.768, 152.599]','(152.599, 163.43]','(163.43, 174.261]','(174.261, 185.092]',\n          '(185.092, 195.923]','(195.923, 206.754]','(206.754, 217.585]','(217.585, 228.416]',\n          '(228.416, 239.247]','(239.247, 250.078]','(250.078, 260.909]','(260.909, 271.74]')\nsns.countplot(x=\"avg_glucose_band\",data=raw_dataset,ax=axis)\naxis.set_xlabel(\"Records by band of avg_glucose_level\")\naxis.set_xticklabels(glu_labels, fontsize=9, rotation=90);","b7b368e3":"print(raw_dataset[['avg_glucose_band', 'stroke']].groupby(['avg_glucose_band'], as_index=False).mean())","d27d5654":"figbar = plt.figure(figsize=(15,6))\naxbar = plt.axes()\nsns.barplot(x='avg_glucose_band', y='stroke', data=raw_dataset, ax=axbar)\naxbar.set_xticklabels(glu_labels, fontsize=9, rotation=90);","17acbbd2":"sns.violinplot(x=\"gender\", y=\"bmi\", hue=\"stroke\", data=raw_dataset, split=True)","4f31f374":"dataset =  raw_dataset.copy(deep = True)\n\nbmi_avg = dataset['bmi'].mean()\nbmi_std = dataset['bmi'].std()\nbmi_null_count = dataset['bmi'].isnull().sum()\nbmi_null_random_list = np.random.randint(bmi_avg - bmi_std, bmi_avg + bmi_std, size=bmi_null_count)\nmask  = dataset[dataset['bmi'].isna()==True].index\ndataset.loc[mask, 'bmi']= bmi_null_random_list\ndataset['bmi'] = dataset['bmi'].astype(float)\nprint(dataset['bmi'].isna().sum())","391dbd66":"dataset.head()","7ace9889":"dataset['bmi_band'] = pd.cut(dataset['bmi'], 20)\ndataset.bmi_band.value_counts()","5f9210ba":"figbar = plt.figure(figsize=(10,6))\naxbmi = plt.axes()\nbmi_labels = ['(10.213, 14.665]','(14.665, 19.03]','(19.03, 23.395]','(23.395, 27.76]','(27.76, 32.125]','(32.125, 36.49]',\n              '(36.49, 40.855]','(40.855, 45.22]','(45.22, 49.585]','(49.585, 53.95]','(53.95, 58.315]','(58.315, 62.68]',\n              '(62.68, 67.045]','(67.045, 71.41]','(71.41, 75.775]','(75.775, 80.14]','(80.14, 84.505]','(84.505, 88.87]',\n              '(88.87, 93.235]','(93.235, 97.6]']\nsns.countplot(x=\"bmi_band\",data=dataset,ax=axbmi)\naxbmi.set_xlabel(\"Records by band of bmi\")\naxbmi.set_xticklabels(bmi_labels, fontsize=9, rotation=90);","1dd71ffe":"figbar = plt.figure(figsize=(15,6))\naxbar = plt.axes()\nsns.barplot(x='bmi_band', y='stroke', data=dataset, ax=axbar)\naxbar.set_xticklabels(bmi_labels, fontsize=9, rotation=90);","ef3457c5":"dataset['gender'] = dataset['gender'].map( {'Female': 1, 'Male': 0, 'Other' : 1} ).astype(int)","d58595e9":"dataset['ever_married'] = dataset['ever_married'].map( {'Yes': 1, 'No': 0} ).astype(int)","2c389baa":"dataset.work_type.unique()","7b4af979":"dataset.work_type.value_counts()","34f9e0b9":"dataset['work_type'] = dataset['work_type'].map( {'Private':4, 'Self-employed':2, 'Govt_job':3, 'children':1, 'Never_worked':0} ).astype(int)","e0566ee3":"dataset.Residence_type.unique()","7800faac":"dataset['Residence_type'] = dataset['Residence_type'].map( {'Urban':1, 'Rural':0} ).astype(int)","d6debc8c":"dataset.smoking_status.unique()","5691617d":"dataset['smoking_status'] = dataset['smoking_status'].map( {'formerly smoked':2, 'never smoked':0, 'smokes':3, 'Unknown':1} ).astype(int)","6b3eb779":"features_drop = ['id', 'Residence_type', 'avg_glucose_band', 'bmi_band']\ndataset = dataset.drop(features_drop, axis=1)","ec154cf7":"dataset['bmi'] = dataset['bmi'].astype(int)\ndataset['age'] = dataset['age'].astype(int)\ndataset['avg_glucose_level'] = dataset['avg_glucose_level'].astype(int)","4fc54575":"dataset.head()","13dfae41":"plt.figure(figsize=(18,8))\ncorrMatrix = dataset.corr()\nsns.heatmap(corrMatrix, annot=True)\nplt.show()","e4c63193":"from sklearn.model_selection import train_test_split\ntrain, test = train_test_split(dataset, test_size=0.2, random_state=42, shuffle=True)","7b62d396":"X_train = train.drop('stroke', axis=1)\ny_train = train['stroke']\nX_test = test.drop(\"stroke\", axis=1).copy()\ny_test = test['stroke']\n\nX_train.shape, y_train.shape, X_test.shape, y_test.shape","a0a64ceb":"from sklearn.ensemble import RandomForestClassifier\nclf = RandomForestClassifier(n_estimators=100)\nclf.fit(X_train, y_train)\ny_pred_random_forest = clf.predict(X_test)","fd477004":"from sklearn.metrics import f1_score\nf1_score(y_test, y_pred_random_forest, average='weighted')","d8c45fe0":"## Train and test datasets\nWe are now going to split the dataset into train and test datasets (80% and 20%). The label variable is 'stroke' and we are going to perform a logistic regression on the other variables to figure the 'stroke' from others. ","5e27a87b":"Only *ever_married* and *age* are of non-neglectible correlation","4bd13675":"## Feature Selection\n\nWe drop unnecessary columns\/features and keep only the useful ones for our experiment.","9fe1b819":"### smoking_status Feature\nWe convert the categorical value of Residence_type into numeric.","49c8862c":"The band (76.8, 98.4] effectively has a huge number of records.","ef39f03a":"### ever_married Feature\nWe convert the categorical value of ever_married into numeric. We represent 1 as Yes and 0 as No. ","bbf8f7ac":"### age vs. stroke","bd28d5f6":"We convert float columns to int.","ee3db28d":"Again, it looks like there is a lot of records for *bmi* around 28. \nFor better understanding of the dataset, we can create a new column named bmi_band which categorizes age into 20 different bmi range. But we won't here. What we are going to do is to first fill the NaN values of bmi with a random number between (mean_bmi - std_bmi) and (mean_bmi + std_bmi).","b900fcbd":"There is a higher percentage of females with hypertension who develop stroke than for males. Inverse for heart disease.\n\n","b075f95e":"### gender Feature\nWe convert the categorical values of gender into numeric. We represent 0 as female and 1 as male. The \"Other\" gender has a unique entry, we will also turn it into the most represented gender in the dartaset: the females. ","08021ff4":"### hypertension & heart_disease vs. stroke","cb56633c":"### work_type Feature\nWe convert the categorical value of _work_type into numeric.  ","36f18932":"# Thank you for reading and share. ","ac317767":"(87.613, 98.444] is the band we are looking for.","b90a5053":"### Residence_type Feature\nWe convert the categorical value of *Residence_type* into numeric.","6051c5d6":"### Marriage vs. stroke","e982a4ca":"## Classification & Accuracy \n\nWe rely on the Random Forest classification.\n\n[Random forests](https:\/\/en.wikipedia.org\/wiki\/Random_forest) or **random decision forests** are an **ensemble learning method** for classification, regression and other tasks, that operate by constructing a multitude of decision trees at training time and outputting the class that is the mode of the classes (classification) or mean prediction (regression) of the individual trees. Random decision forests correct for *decision trees' habit of overfitting to their training set*.\nOur measure of accuracy will be the **F1 score** because the dataset is unbalanced. ","b2d11280":"Our accurracy is **91.18%**. It's a good accuracy as well, surely somewhere about human expert accuracy. ","3685c80c":"Males seem more likely to have a stroke.","960cc91a":"### bmi vs. stroke","5d680d8b":"From this violonplot, we can see that the data mostly target aged people; namely around 50 years old. This is coherent with the mean age of 43 years. ","334e6dcf":"### avg_glucose_level vs. stroke","8efa743b":"Let's evaluate the probability to be married when having a stroke. \n* $M$ : \"To be married\"\n* $S$ : \"To have a stroke\"\n\n$P_S(M) = \\frac{P(M \\cap S)}{P(S)}$\n\n$P_S(M) \\rightarrow $ pm_s\n\n$P(S) \\rightarrow $ ps\n\n$P(M \\cap S) \\rightarrow$ pms\n","a537aaad":"## Feature Extraction\nIn this section, we select the appropriate features to train our classifier. Here, convert categorical features into numeric form in addition to the \"band\" features already created. We also display ultimately the correlation matrix. ","f758d972":"From *gender* violinplot, we can see that being a male increase the risks to have a stroke early (before 80). \n\nFrom *work_type* violinplot, we can see that:\n* In the private sector, strokes arise ealier than in others, but the higher occurences in early ages are in gvt job work type.\n* Stoke occurennces plateau from the late 50 yo to the early 80 yo in govt work type. \n* Self-employment are in stroke risk relatively late. \n* Stoke risks for youths peak in mid-adolescence\n* After a certain age (around 21), the chances of never having worked are null.\n\nFrom *residence* violinplot, we can see that residence type those not influence significantly the age-wise distribution of strokes. \n\nFrom *smoking* violinplot, we can see that smokers are at stroke risk (and also peak) earlier compared to others. \n\n","940c2aca":"Both *stroke* and no *stroke* peak a little below 100. It may be because the mean *avg_glucose_level* (106.15) is near. We are going to see if a huge number of records have *avg_glucose_level* a little below 100. In fact a little below 100 may have the highest effective among those which are sufficiently high enough to favor strokes. For this purpose we create a new column named *avg_glucose_band*. This categorizes *avg_glucose_level* into 20 different avg_glucose_level ranges.","da9dc5f9":"But be careful !! There is something to do because age increases significantly the probability to have ever been married but also the probability to do a stroke. ","d52e5aaf":"## Relationship between Features and Stroke\n\nIn this section, we analyze relationship between different features with respect to *stroke*. We see how different feature values show different stroke occurences. We also plot different kinds of diagrams to **visualize** our data and findings.","422d2dbe":"Hypertension and heart disease increase the risk of stroke.","153d8495":"### gender vs. stroke\n"}}