{"cell_type":{"fec75e36":"code","5c26d172":"code","22c43590":"code","acbc827f":"code","a1fd350c":"code","90ca7de2":"code","15ed37b4":"code","8217975d":"code","c59c0530":"code","1b9bbe77":"code","4c51d32b":"code","1c7dadc6":"code","3e787ef0":"code","dc20ae77":"code","591c51fa":"code","57c95cf1":"code","de126686":"code","3356d9dc":"code","bcc21484":"code","56f38509":"code","3c533a4e":"code","0d4a7ae7":"code","4a094967":"code","19c9c363":"code","5e642994":"code","be0d13c8":"code","75172823":"code","7c6430e7":"code","b8ed3a91":"code","40d8bce8":"code","c398f1eb":"code","aaef28ad":"code","cdb45a9e":"code","48f70023":"code","5c94b56f":"code","d600faab":"code","a2e12a7d":"code","cd5d3db8":"code","6b0305b8":"markdown","2c7affcb":"markdown","3a19d732":"markdown","ed3214fb":"markdown","c3599400":"markdown","5ff2fd56":"markdown","053fd490":"markdown","bbdc22ac":"markdown","83a2ff59":"markdown","be3aff13":"markdown","a3f7585a":"markdown","619e2edf":"markdown","b8ca4bd2":"markdown","a03bb595":"markdown","a6dd69fe":"markdown","2cb4ccef":"markdown","083dbad0":"markdown","a3c6aa82":"markdown","5aaa1bfb":"markdown","29817ef3":"markdown","776e2aa0":"markdown","da5802a2":"markdown","5f214655":"markdown","e41c1469":"markdown","b3d62f86":"markdown","0f4ebffa":"markdown","3089ebee":"markdown","ade50245":"markdown","3b7da52a":"markdown","e5289370":"markdown","2a31ee0b":"markdown","80623c36":"markdown","3f759d08":"markdown","3a75e351":"markdown","eb695f9a":"markdown","7f7046bb":"markdown","ef0955e5":"markdown","038b4fde":"markdown","5098cef0":"markdown","c631c6fb":"markdown","e620e01b":"markdown","d9480171":"markdown","00e47566":"markdown"},"source":{"fec75e36":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","5c26d172":"data = pd.read_csv('..\/input\/black-friday\/train.csv')\ndata.head()","22c43590":"print(\"Number of Rows: \", data.shape[0])","acbc827f":"data.describe()","a1fd350c":"data.info()","90ca7de2":"print(\"Missing Values in Each Column:\")\nprint(data.isna().sum())","15ed37b4":"fig, axes = plt.subplots(nrows=1, ncols=2)\nsns.boxplot(data.Product_Category_2, ax=axes[0])\ndata.Product_Category_2.plot(kind='box', ax=axes[1])\nplt.show()","8217975d":"fig, axes = plt.subplots(nrows=1, ncols=2)\nsns.boxplot(data.Product_Category_3, ax=axes[0])\ndata.Product_Category_3.plot(kind='box', ax=axes[1])\nplt.show()","c59c0530":"data.fillna(method='ffill', inplace=True)\ndata.isna().sum()","1b9bbe77":"data.fillna(method='bfill', inplace=True)\ndata.isna().sum()","4c51d32b":"print(\"Now lets see how's our data looking: \")\ndata.head(15)","1c7dadc6":"data.info()","3e787ef0":"data.nunique()","dc20ae77":"# but first let confirm that is there any missing values left in a data\nassert pd.notnull(data).all().all()","591c51fa":"col = list(data.columns)\nprint(\"Unique Values in each column:\\n\")\nfor c in col:\n    print(c, \": \", data[c].unique())\n    print()","57c95cf1":"data['Gender'] = data.Gender.map({\n    'M' : 0,\n    'F' : 1\n})\ndata.head()","de126686":"data.Gender.unique()","3356d9dc":"from sklearn.preprocessing import LabelEncoder\nlE = LabelEncoder()\ndata.City_Category = lE.fit_transform(data.City_Category)\ndata.head()","bcc21484":"data.City_Category.unique()","56f38509":"data.info()","3c533a4e":"data.loc[data['Stay_In_Current_City_Years'] == '4+','Stay_In_Current_City_Years'] = '4'\ndata.Stay_In_Current_City_Years = data.Stay_In_Current_City_Years.astype('int64')\ndata.info()","0d4a7ae7":"print(\"Unique Values in Age Column:\")\ndata.Age.unique()","4a094967":"sns.countplot(x=data.Age)\nplt.show()","19c9c363":"ax = sns.countplot(data.Gender)\ngen = ['M', 'F']\nax.set(xticklabels=gen)\nplt.show()","5e642994":"ax = sns.countplot(data.Marital_Status)\nmar = ['Married', 'Single']\nax.set(xlabel='Martial Status', xticklabels=mar)\nplt.show()","be0d13c8":"print('Martial Status: 0=Married, 1=Single')\nprint('Gender: 0=Male, 1=Female')\nax = data.groupby(['Marital_Status', 'Gender'])['Purchase'].count().plot(kind='bar')\nax.set(xlabel='Martial Status and Gender', ylabel='Purchase', title='Gender and Martial Status in respect to Purchase')\nplt.show()","75172823":"plt.bar(['PC1', 'PC2', 'PC3'], [data.Product_Category_1.sum(), data.Product_Category_2.sum(), data.Product_Category_3.sum()])\nplt.show()","7c6430e7":"data.groupby('Stay_In_Current_City_Years')['Purchase'].count()","b8ed3a91":"plt.bar([0, 1, 2, 3, 4], data.groupby('Stay_In_Current_City_Years')['Purchase'].count())\nplt.show()","40d8bce8":"plt.bar(['A', 'B', 'C'], data.groupby('City_Category')['Purchase'].mean())\nplt.show()","c398f1eb":"data.groupby('Gender')['Purchase'].mean()","aaef28ad":"sns.regplot(x='Gender', y='Purchase', data=data)\nplt.show()","cdb45a9e":"data.groupby('City_Category')['Purchase'].mean()","48f70023":"sns.regplot(x='City_Category', y='Purchase', data=data)\nplt.show()","5c94b56f":"cols = ['Gender', 'Occupation', 'City_Category', 'Stay_In_Current_City_Years', 'Marital_Status', 'Product_Category_1', 'Product_Category_2', 'Product_Category_3', 'Purchase']\ncorr_result = data[cols].corr()\ncorr_result","d600faab":"sns.heatmap(corr_result, annot=True)\nplt.show()","a2e12a7d":"data.groupby(['Age', 'Marital_Status', 'Gender']).count()","cd5d3db8":"print(\"Let see which user pays the maximum price for a product and for which Product:\")\ndata.loc[data.Purchase.idxmax()]","6b0305b8":"#### x = Gender, y = Purchase","2c7affcb":"Here we can see there are NaN values in Product Category 2 and 3, and also there are Two IDs column one is User ID and other is Product ID.\nStarting 4 rows have same user because it has a ID of 1000001 and that person is Female who bought 4 Products.","3a19d732":"As a result from the plot we can see that Male are one who order's the most in this black friday.","ed3214fb":"It is a range column so we can't change so we can't change for this situation","c3599400":"The maximum Purchase is of $23961","5ff2fd56":"## Further Analysis","053fd490":"There are many missing values in Product Category 2 and 3. What we can do is fill the data with the mean\/median or forward fill. The data type of these two columns are float64 so the better option is mean, median or mode.","bbdc22ac":"## Import Dataset","83a2ff59":"## Import Libraries","be3aff13":"Great! there's no missing values in a dataset.\nNow let's explore the unique values in every column.","a3f7585a":"As we can see -ve and +ve correlation with Purchase column","619e2edf":"No outliers in Product Category 3. ","b8ca4bd2":"Age between 26-35 orders the most in a black friday","a03bb595":"Let's explore unique values count in each column","a6dd69fe":"Here the product which falls in a category 3 were purchased the most","2cb4ccef":"#### Stay in Current City Years","083dbad0":"As we can see User who are married tend to buy the most","a3c6aa82":"No outliers in Product Category 2","5aaa1bfb":"All cities has a good purchase rate but city which falls in category C has the max ","29817ef3":"## Plotting","776e2aa0":"Here\n* M is Male which is 0\n* F is Female which is 1","da5802a2":"All good so far but we have a age column and we have to explore it","5f214655":"Here we can see that Gender, City Category, Martial Status, Stay in current city years  can be turn into a category.","e41c1469":"#### X = City Category, y = Purchase","b3d62f86":"There's one missing value in the both column because the first row value was empty too and we used the ffill method now we will use bfill to fill the remaining values.","0f4ebffa":"User with Age between 26-35, Married, Male purchased the most in Black Friday","3089ebee":"So we are going to change the gender and city category by LabelEncode and mapping","ade50245":"#### Explore Gender Column","3b7da52a":"Here in Stay_In_Current_City_Years column:  There are 5 unique values which are=>['2' '4+' '3' '1' '0'].\nInstead of 4+ we will replace it into 4. and then change the data type of the column to integer","e5289370":"Now we will LabelEncode the City Category Column","2a31ee0b":"As we can see that Gender and City Category is now Integer64 data type","80623c36":"Males and Females who are married tends to buy the most products in Black Friday","3f759d08":"#### Product Category","3a75e351":"#### City Category","eb695f9a":"Here the person which is male, age between 26-35, is unmarried bought that product which has the highest price.","7f7046bb":"#### Exploring Age Column","ef0955e5":"As we can see that both City Category and Gender are not correlated to Purchase. We can further explore by using Corr method on a dataset","038b4fde":"So now what we can do is replace that NaN values with ffill and bfill method because if we take the mean it would put the average there and if we use the mode it will put the most frequent product category in a missing place both will create an error","5098cef0":"Now again we should look at the data info","c631c6fb":"#### Plotting Gender and Martial Status in respect to Purchase","e620e01b":"Here:\n* A is 0\n* B is 1\n* C is 2","d9480171":"#### Explore Martial Column","00e47566":"As we can see that there are many missing values in a Product Category 2 and 3. Let see how many values are missing in these two columns."}}