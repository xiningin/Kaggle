{"cell_type":{"680c7e48":"code","5ae36f25":"code","980126a2":"code","6d48fb89":"code","948d3dad":"code","7caf2c2f":"code","c84d4c43":"code","f2b39544":"code","1c4527bf":"code","6ba769ed":"code","f66dd81c":"code","32e55095":"code","bab1a367":"code","163700ed":"code","2ee62c78":"code","8862a828":"code","d992700d":"code","fb7826c0":"code","b7a850fc":"markdown","564074b9":"markdown","43ebd00a":"markdown","dce9d9d5":"markdown","9b38be61":"markdown","9209360e":"markdown","1afe9e39":"markdown"},"source":{"680c7e48":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","5ae36f25":"train_data = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest_data = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","980126a2":"train_data = train_data.drop(columns=['Name','Cabin'])\ntrain_data['family_member'] = train_data['SibSp'] + train_data['Parch']\ntrain_data = train_data.drop(columns=['SibSp', 'Parch'])","6d48fb89":"test_data = test_data.drop(columns=['Name','Cabin'])\ntest_data['family_member'] = test_data['SibSp'] + test_data['Parch']\ntest_data = test_data.drop(columns=['SibSp', 'Parch'])","948d3dad":"def impute_age(cols):\n    Age = cols[0]\n    Pclass = cols[1]\n    \n    if pd.isnull(Age):\n        \n        if Pclass == 1 :\n            return 37\n        elif Pclass == 2:\n            return 29\n        else:\n            return 24\n    else:\n        return Age","7caf2c2f":"train_data['Age'] = train_data[['Age', 'Pclass']].apply(impute_age, axis=1)\ntest_data['Age'] = test_data[['Age', 'Pclass']].apply(impute_age, axis=1)","c84d4c43":"train_data.fillna(0,inplace=True)\ntest_data.fillna(0,inplace=True)","f2b39544":"X = train_data.drop(columns=['Survived'])\nY = train_data['Survived']\n\n\n\n#choose the features we want to train, just forget the float data\ncate_features_index = np.where(X.dtypes != float)[0]\n","1c4527bf":"from catboost import CatBoostClassifier, cv, Pool","6ba769ed":"from sklearn.model_selection import train_test_split","f66dd81c":"#make the x for train and test (also called validation data) \nxtrain,xtest,ytrain,ytest = train_test_split(X,Y,train_size=0.90,random_state=42)","32e55095":"clf =CatBoostClassifier(eval_metric='Accuracy',use_best_model=True,random_seed=42)","bab1a367":"#now just to make the model to fit the data\nclf.fit(xtrain,ytrain,cat_features=cate_features_index,eval_set=(xtest,ytest), early_stopping_rounds=50)","163700ed":"test_id = test_data.PassengerId","2ee62c78":"test_data.isnull().sum()","8862a828":"prediction = clf.predict(test_data)","d992700d":"len(test_id),len(prediction)","fb7826c0":"df_sub = pd.DataFrame()\ndf_sub['PassengerId'] = test_id\ndf_sub['Survived'] = prediction.astype(np.int)\n\ndf_sub.to_csv('gender_submission.csv', index=False)","b7a850fc":"**Remove Cabin as it contains many Nan Data**","564074b9":"Percentage of column ith missing ","43ebd00a":"**kfOLD validation**","dce9d9d5":"**Now apply that function!**","9b38be61":"**Preprocessing Test_Data like train data**","9209360e":"**We can see the wealthier passengers in the higher classes tend to be older, which makes sense. We'll use these average age values to impute based on Pclass for Age.**","1afe9e39":"**Splitting labels and target**"}}