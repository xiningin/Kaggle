{"cell_type":{"01e2aa52":"code","c2db1f26":"code","2c34cb3b":"code","20ff313d":"code","42df9473":"code","281951c9":"code","b8c6382a":"code","71c3f7e1":"code","70593971":"markdown"},"source":{"01e2aa52":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\"\"\"\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\"\"\"\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c2db1f26":"import os\nimport gc\nimport sys\nimport json\nimport glob\nimport random\nfrom pathlib import Path\n\nimport cv2\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nimport itertools\nfrom tqdm import tqdm\n\nfrom imgaug import augmenters as iaa\nfrom sklearn.model_selection import StratifiedKFold, KFold","2c34cb3b":"df = pd.read_csv('\/kaggle\/input\/imaterialist-fashion-2019-FGVC6\/train.csv')","20ff313d":"with open(\"\/kaggle\/input\/imaterialist-fashion-2019-FGVC6\/label_descriptions.json\") as f:\n    label_descriptions = json.load(f)\n\nlabel_names = [x['name'] for x in label_descriptions['categories']]","42df9473":"df['CategoryId'] = df['ClassId'].str.split('_').str[0]\ndf['AttributeId'] = df['ClassId'].str.split('_').str[1:]\n\nprint(\"Total segments: \", len(df))\n","281951c9":"def show_img(img):\n    I = cv2.imread(\"\/kaggle\/input\/train\/\" + img, cv2.IMREAD_COLOR)\n    I = cv2.cvtColor(I, cv2.COLOR_BGR2RGB)\n    I = cv2.resize(I, (IMAGE_SIZE, IMAGE_SIZE), interpolation=cv2.INTER_AREA)  \n    plt.imshow(I)","b8c6382a":"from skimage.transform import resize\n\ndef show_img(img):\n    I = cv2.imread(\"\/kaggle\/input\/imaterialist-fashion-2019-FGVC6\/train\/\" + img, cv2.IMREAD_COLOR)\n    I = cv2.cvtColor(I, cv2.COLOR_BGR2RGB)\n    I = cv2.resize(I, (256, 256), interpolation=cv2.INTER_AREA)  \n    plt.imshow(I)\n\ndef get_mask(df, img_id):\n    a = df[df.ImageId == img_id]\n    a = a.groupby('CategoryId', as_index=False).agg({'EncodedPixels':' '.join, 'Height':'first','Width':'first'})\n    H = a.iloc[0,2]\n    W = a.iloc[0,3]\n    masks =[]\n    categories =[]\n    for line in a[['EncodedPixels','CategoryId']].iterrows():\n        mask = np.full(H*W,dtype='int',fill_value = 0)\n        EncodedPixels = line[1][0]\n        pixel_loc = list(map(int,EncodedPixels.split(' ')[0::2]))\n        iter_num =  list(map(int,EncodedPixels.split(' ')[1::2]))\n        for p,i in zip(pixel_loc,iter_num):\n            mask[p:(p+i)] = line[1][1]\n        mask = mask.reshape(W,H).T\n        masks+=[mask]\n        categories+=[line[1][1]]\n    return masks, categories\n\ndef new_mask(mask):\n    matrix = [[0 for x in range(512)] for y in range(512)] \n    for i in range(0, len(mask)):\n        mask[i] = cv2.resize(mask[i], (512, 512), interpolation=cv2.INTER_NEAREST)\n    for m in mask:\n        for i in range(0, 512):\n            for j in range(0, 512):\n                if m[i][j] != 0:\n                    matrix[i][j]=m[i][j]\n    matrix = np.array(matrix)\n    return matrix\n\ndef masked_image(df, image_id):\n    masked_list, categories = get_mask(df, image_id)\n    plt.figure(figsize=[30,30])\n    plt.subplot(1,10,1)\n    I = cv2.imread(\"\/kaggle\/input\/imaterialist-fashion-2019-FGVC6\/train\/\" + image_id, cv2.IMREAD_COLOR)\n    I = cv2.cvtColor(I, cv2.COLOR_BGR2RGB)\n    I = cv2.resize(I, (512, 512), interpolation=cv2.INTER_AREA)  \n    plt.imshow(I)    \n    plt.title('Input Image')\n    i=1\n    gray = cv2.cvtColor(I, cv2.COLOR_BGR2GRAY)\n    \n    plt.imshow(I)    \n    for mask, cat in zip(masked_list, categories):\n        mask = cv2.resize(mask, (512, 512), interpolation=cv2.INTER_NEAREST)\n        plt.subplot(1,10,i+1)\n        plt.imshow(mask)\n        plt.title(label_names[int(cat)])\n        plt.subplots_adjust(wspace=0.4, hspace=-0.65)\n        i+=1\n        if i ==10:\n            break\n    new_mask_ = new_mask(masked_list)\n    I[new_mask_ == 0] = 0\n    plt.imshow(I)    \n","71c3f7e1":"ids = df['ImageId'].unique()\nfor idx in ids[0:10]:\n    masked_image(df, idx)","70593971":"working progress"}}