{"cell_type":{"225abd93":"code","18a32c85":"code","2aca74b8":"code","abecf04a":"code","09d1945b":"code","aee6128d":"code","980214fc":"code","a15aa4ad":"code","ff7806ce":"code","2fcd7ae0":"code","005f8914":"code","3ded4f73":"code","e3add4a2":"code","92507fbb":"code","ecd89daa":"code","3ae0cf0d":"code","5a1b9f83":"code","4d649035":"code","4e730e15":"code","fda37e14":"code","71a83934":"code","ede58ce8":"code","7666ca8f":"code","78cb7b22":"code","7218159a":"code","deb01a2b":"code","2fcecb1b":"code","7c4ac4cd":"code","f8320edb":"code","0a115d9d":"code","c3453e73":"code","9493e2d8":"code","4857b62e":"code","bc0e107c":"code","59a30880":"code","37d53050":"code","a6fe3ca1":"code","441c8219":"code","3e0985fe":"code","849655c0":"code","ca71b739":"code","d3aa29cd":"code","6ce076e6":"code","206a8ca4":"code","34f0d79c":"code","a3943bb3":"code","ec918a2b":"code","1b770004":"code","3792ec62":"code","aadcecf0":"code","af09d33f":"code","d16638cc":"code","cc4fbe61":"code","aec7def4":"code","dca173ab":"code","b25466cc":"code","1f51060b":"code","8da39bbf":"code","f6a8b738":"code","8afc994c":"code","91fa4c8b":"code","1ccd025c":"code","1d8e7bd4":"code","1122a6c7":"markdown","b24b5a0e":"markdown","41cabedd":"markdown","30e26344":"markdown","84d51037":"markdown","ce7ccb6b":"markdown","bae6b310":"markdown","41910214":"markdown","496506d8":"markdown","816c162b":"markdown","90e806cc":"markdown","17d86258":"markdown","3dbf91ef":"markdown","f836821d":"markdown","eb719835":"markdown","d64aaa14":"markdown","3b8a4002":"markdown","40ef4c90":"markdown","de5a17ee":"markdown","c185d72c":"markdown","209be68c":"markdown","4cb63342":"markdown","1c538e64":"markdown","e34984f1":"markdown","e0e961e2":"markdown","a87940ea":"markdown","473aef82":"markdown","706565fa":"markdown","421547b0":"markdown"},"source":{"225abd93":"import os\nimport numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport shap\nimport lightgbm as lgb\nimport seaborn as sns\nimport xgboost as xgb\nimport zipfile\nfrom sklearn import model_selection, preprocessing\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.tree import DecisionTreeRegressor  \nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_log_error, r2_score\nimport catboost as cb\nimport warnings\n\ncolor = sns.color_palette()\n%matplotlib inline\nwarnings.filterwarnings(\"ignore\")\n\npd.set_option('display.max_columns', 500)\npd.set_option('display.max_rows', 50)","18a32c85":"train_zip = zipfile.ZipFile('\/kaggle\/input\/sberbank-russian-housing-market\/train.csv.zip') \ntest_zip = zipfile.ZipFile('\/kaggle\/input\/sberbank-russian-housing-market\/test.csv.zip')\nsample_submit_zip = zipfile.ZipFile('\/kaggle\/input\/sberbank-russian-housing-market\/sample_submission.csv.zip') \nmacro_zip = zipfile.ZipFile('\/kaggle\/input\/sberbank-russian-housing-market\/macro.csv.zip') \n\n\ndf_train = pd.read_csv(train_zip.open('train.csv'))\ndf_test = pd.read_csv(test_zip.open('test.csv'))\nsample_submit = pd.read_csv(sample_submit_zip.open('sample_submission.csv'))\ndf_macro = pd.read_csv(macro_zip.open('macro.csv'))\n\nprint(\"Train shape:\", df_train.shape)\nprint(\"Test shape:\", df_test.shape)","2aca74b8":"df_train.describe()","abecf04a":"fig, ax = plt.subplots(figsize=(10,5))\nsns.distplot(df_train['price_doc'].values, bins=100, kde=True, ax=ax)\nplt.xlabel('price_doc', fontsize=12)\nplt.show()","09d1945b":"fig, ax = plt.subplots(figsize=(10,5))\nsns.distplot(np.log(df_train['price_doc']).values, bins=100, kde=True, ax=ax)\nplt.xlabel('log(price_doc)', fontsize=12)\nplt.show()","aee6128d":"df_train['price_doc_log'] = np.log(df_train['price_doc'])","980214fc":"corrs = df_train.corr(method='pearson')\ncorr_with_prices = corrs[\"price_doc\"][:-1]\ncorr_with_prices[abs(corr_with_prices).argsort()[::-1]].tail(100)","a15aa4ad":"toDelete = list(corr_with_prices[abs(corr_with_prices).argsort()[::-1]].tail(100).index)\nprint(toDelete[0], toDelete[-1]) # \u0423\u0431\u0435\u0436\u0434\u0430\u0435\u043c\u0441\u044f, \u0447\u0442\u043e \u0432\u0437\u044f\u043b\u0438 \u0442\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438","ff7806ce":"print(df_train.shape, '\\n', df_test.shape)\n\nfor col in toDelete:\n    df_train.drop(col, axis=1, inplace=True)\n    df_test.drop(col, axis=1, inplace=True)\n\nprint(df_train.shape, '\\n', df_test.shape)","2fcd7ae0":"temp_df = df_train.groupby(['floor'])['price_doc'].aggregate(np.median).reset_index()\nplt.figure(figsize=(10, 8))\nsns.pointplot(x='floor', y='price_doc', data=temp_df)\nplt.ylabel('\u0421\u0440\u0435\u0434\u043d\u044f\u044f \u0446\u0435\u043d\u0430', fontsize=12)\nplt.xlabel('\u041d\u043e\u043c\u0435\u0440 \u044d\u0442\u0430\u0436\u0430', fontsize=12)\nplt.xticks(rotation='vertical')\nplt.show()","005f8914":"df_train[(df_train['floor']) == 33]","3ded4f73":"df_train.drop(df_train.index[7457], inplace=True)","e3add4a2":"df_train['timestamp'][0:3]","92507fbb":"df_train['year'] = df_train['timestamp'].apply(lambda x: x[:4]).astype(int)\ndf_train['month'] = df_train['timestamp'].apply(lambda x: x[5:7]).astype(int)\n\ndf_test['year'] = df_test['timestamp'].apply(lambda x: x[:4]).astype(int)\ndf_test['month'] = df_test['timestamp'].apply(lambda x: x[5:7]).astype(int)","ecd89daa":"fig, ax = plt.subplots(figsize=(10,6))\nsns.barplot(x='month', y='price_doc', data=df_train)\nplt.title('\u0426\u0435\u043d\u0430 \u043f\u0440\u043e\u0434\u0430\u0436\u0438 \u043f\u043e \u043c\u0435\u0441\u044f\u0446\u0430\u043c', fontsize=18)\nplt.xticks(rotation='vertical')\nplt.show()","3ae0cf0d":"missingValues = df_train.columns[df_train.isnull().any()].tolist()\n\npd.isnull(df_train[missingValues]).sum().sort_values(ascending=False)","5a1b9f83":"cols_fillna_mode = ['floor',\n 'product_type',\n 'num_room',\n 'state',\n 'hospital_beds_raion',\n 'build_count_brick',\n 'build_count_monolith',\n 'green_part_2000']\n\ncols_fillna_mean = ['life_sq',\n 'metro_min_walk',\n 'metro_km_walk',\n 'railroad_station_walk_km',\n 'railroad_station_walk_min',\n 'cafe_sum_1500_min_price_avg',\n 'cafe_sum_1500_max_price_avg',\n 'cafe_avg_price_1500',\n 'cafe_sum_2000_max_price_avg',\n 'cafe_avg_price_2000']","4d649035":"for col in cols_fillna_mode:\n    df_train[col].fillna(df_train[col].mode().iloc[0],inplace=True)\n    df_test[col].fillna(df_train[col].mode().iloc[0],inplace=True)\n\nfor col in cols_fillna_mean:\n    df_train[col].fillna(df_train[col].mean(),inplace=True)\n    df_test[col].fillna(df_train[col].mean(),inplace=True)","4e730e15":"numerical_features = df_train.dtypes[df_train.dtypes != \"object\"].index\ncategorical_features = df_train.dtypes[df_train.dtypes == \"object\"].index\n\nprint(\"\u041a\u043e\u043b-\u0432\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432: \", len(numerical_features))\nprint(\"\u041a\u043e\u043b-\u0432\u043e \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432: \", len(categorical_features))","fda37e14":"df_train.isna().sum().sort_values(ascending=False)","71a83934":"df_train.drop(['id', 'price_doc', 'timestamp'], axis=1, inplace=True)\nid_test = df_test['id']\ndf_test.drop(['id', 'timestamp'], axis=1, inplace=True)","ede58ce8":"numerical_features = df_train.dtypes[df_train.dtypes != \"object\"].index\ncategorical_features = df_train.dtypes[df_train.dtypes == \"object\"].index\n\nprint(\"\u041a\u043e\u043b-\u0432\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432: \", len(numerical_features))\nprint(\"\u041a\u043e\u043b-\u0432\u043e \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432: \", len(categorical_features))","7666ca8f":"encoder = OneHotEncoder(handle_unknown='error')\nencoder_cols_train = pd.DataFrame(encoder.fit_transform(df_train[categorical_features]).toarray())\nencoder_cols_test = pd.DataFrame(encoder.transform(df_test[categorical_features]).toarray())","78cb7b22":"# \u0432\u0435\u0440\u043d\u0435\u043c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u0438 \u0438\u043d\u0434\u0435\u043a\u0441\u044b\nencoder_cols_train.columns = encoder.get_feature_names(categorical_features)\nencoder_cols_test.columns = encoder.get_feature_names(categorical_features)\n\nencoder_cols_train.index = df_train.index\nencoder_cols_test.index = df_test.index","7218159a":"num_df_train = df_train.drop(categorical_features, axis=1)\nnum_df_test = df_test.drop(categorical_features, axis=1)","deb01a2b":"df_train_encoded = pd.concat([num_df_train, encoder_cols_train], axis=1)\ndf_test_encoded = pd.concat([num_df_test, encoder_cols_test], axis=1)\n\nprint(\"Train dataset shape:\", df_train_encoded.shape)\nprint(\"Test dataset shape:\", df_test_encoded.shape)","2fcecb1b":"df_train_encoded.median().sort_values(ascending=False)","7c4ac4cd":"X = df_train_encoded.drop(['price_doc_log'], axis=1)\ny = df_train_encoded['price_doc_log']\n\nprint(\"X shape:\", X.shape)\nprint(\"y shape:\", y.shape)","f8320edb":"X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=2022)\n\nX_test = df_test_encoded","0a115d9d":"tree = DecisionTreeRegressor(random_state=2022, max_depth=5, min_samples_split=20)  \n\ntree.fit(X_train, y_train)\ntree_predictions_log = tree.predict(X_val)\ntree_predictions = np.exp(tree_predictions_log)","c3453e73":"print('RMSLE:', np.sqrt(mean_squared_log_error(np.exp(y_val), tree_predictions)))","9493e2d8":"predict = np.exp(tree.predict(X_test))\nsubmission = pd.DataFrame({'id': id_test, 'price_doc': predict})\nsubmission.head()","4857b62e":"submission.to_csv('DecisionTree.csv', index=False)","bc0e107c":"dmatrix_train = xgb.DMatrix(X_train, y_train) # _scaled\ndmatrix_val = xgb.DMatrix(X_val, y_val)\n\ndmatrix_test = xgb.DMatrix(X_test)","59a30880":"xgb_params = {\n    'eta': 0.05,\n    'max_depth': 5,\n    'subsample': 1.0,\n    'colsample_bytree': 0.7,\n    'objective': 'reg:squarederror',\n    'eval_metric': 'rmse',\n    'verbosity': 0\n}\n\npartial_model = xgb.train(xgb_params, dmatrix_train, num_boost_round=1000, evals=[(dmatrix_val, 'val')],\n                       early_stopping_rounds=20, verbose_eval=20)\n\nnum_boost_round = partial_model.best_iteration","37d53050":"model = xgb.train(dict(xgb_params, verbose=1), dmatrix_train, num_boost_round=num_boost_round)","a6fe3ca1":"predict = np.exp(model.predict(dmatrix_val))\nprint('RMSLE:', np.sqrt(mean_squared_log_error(np.exp(y_val), predict)))","441c8219":"ylog_pred = model.predict(dmatrix_test)\ny_pred = np.exp(ylog_pred)\n\nsubmission = pd.DataFrame({'id': id_test, 'price_doc': y_pred})\nsubmission.head()","3e0985fe":"submission.to_csv(\"XGB_new_clear_submission.csv\", index=False)","849655c0":"explainer = shap.TreeExplainer(model)\nshap_values = explainer.shap_values(dmatrix_test)\nshap.summary_plot(shap_values, X_test)","ca71b739":"dmatrix_train = xgb.DMatrix(X_train, y_train)\ndmatrix_test = xgb.DMatrix(X_test)","d3aa29cd":"xgb_params = {\n    'eta': 0.05,\n    'max_depth': 5,\n    'subsample': 0.7,\n    'colsample_bytree': 0.7,\n    'objective': 'reg:squarederror',\n    'eval_metric': 'rmse',\n    'verbosity': 0\n}","6ce076e6":"cv_output = xgb.cv(xgb_params, \n                   dmatrix_train, \n                   num_boost_round=1000, \n                   early_stopping_rounds=20,\n                   verbose_eval=50, \n                   show_stdv=False)\n\nnum_boost_rounds = len(cv_output)","206a8ca4":"model = xgb.train(dict(xgb_params, verbose=1), dmatrix_train, num_boost_round=num_boost_rounds)","34f0d79c":"predict = np.exp(model.predict(dmatrix_test))\nsubmission = pd.DataFrame({'id': id_test, 'price_doc': predict})\nsubmission.head()","a3943bb3":"explainer = shap.TreeExplainer(model)\nshap_values = explainer.shap_values(dmatrix_test)\nshap.summary_plot(shap_values, X_test)","ec918a2b":"submission.to_csv('XGB_CV.csv', index=False)","1b770004":"X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=2022)\n\nX_test = df_test_encoded","3792ec62":"pca = PCA(n_components=20).fit(X_train)\n\nX_train_pca=pca.transform(X_train)\nX_val_pca=pca.transform(X_val)","aadcecf0":"dmatrix_train = xgb.DMatrix(X_train_pca, y_train)\ndmatrix_val = xgb.DMatrix(X_val_pca, y_val)\ndmatrix_test = xgb.DMatrix(X_test)","af09d33f":"xgb_params = {\n    'eta': 0.05,\n    'max_depth': 5,\n    'subsample': 1.0,\n    'colsample_bytree': 0.7,\n    'objective': 'reg:squarederror',\n    'eval_metric': 'rmse',\n    'verbosity': 0\n}\n\npartial_model = xgb.train(xgb_params, \n                          dmatrix_train,\n                          num_boost_round=1000, \n                          evals=[(dmatrix_val, 'val')],\n                          early_stopping_rounds=20, \n                          verbose_eval=20)\n\nnum_boost_round = partial_model.best_iteration","d16638cc":"model = xgb.train(dict(xgb_params, verbose=1), dmatrix_train, num_boost_round=num_boost_round)","cc4fbe61":"predict = np.exp(model.predict(dmatrix_val))\nrmsle = np.sqrt(mean_squared_log_error(np.exp(y_val), predict))\n\nprint('RMSLE: {:.3f}'.format(rmsle))","aec7def4":"# predict = np.exp(model.predict(dmatrix_test))\n# submission = pd.DataFrame({'id': id_test, 'price_doc': predict})\n# submission.head()","dca173ab":"# submission.to_csv('XGB_PCA.csv', index=False)","b25466cc":"fig, ax = plt.subplots(1, 1, figsize=(10, 20))\nxgb.plot_importance(model, max_num_features=20, height=0.5, ax=ax);","1f51060b":"X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=2022)\n\nX_test = df_test_encoded","8da39bbf":"train_dataset = cb.Pool(X_train, y_train) \ntest_dataset = cb.Pool(X_val, y_val)","f6a8b738":"model = cb.CatBoostRegressor(loss_function='RMSE')","8afc994c":"grid = {'iterations': [150, 200],\n        'learning_rate': [0.03, 0.05],\n        'depth': [5, 7],\n        'l2_leaf_reg': [1]}\n\nmodel.grid_search(grid, train_dataset)","91fa4c8b":"pred = np.exp(model.predict(X_val))\nrmsle = np.sqrt(mean_squared_log_error(np.exp(y_val), pred))\n\nprint('RMSLE: {:.3f}'.format(rmsle))","1ccd025c":"predict = np.exp(model.predict(X_test))\nsubmission = pd.DataFrame({'id': id_test, 'price_doc': predict})\nsubmission.head()","1d8e7bd4":"submission.to_csv('Catboost.csv', index=False)","1122a6c7":"## \u0418\u043c\u043f\u043e\u0440\u0442 \u043c\u043e\u0434\u0443\u043b\u0435\u0439\n---","b24b5a0e":"---\n# <center>Sberbank Russian Housing Market<\/center>","41cabedd":"\u041c\u0435\u0442\u0440\u0438\u043a\u0430 \u043d\u0435 \u043e\u0447\u0435\u043d\u044c \u0432\u043f\u0435\u0447\u0430\u0442\u043b\u044f\u044e\u0449\u0430\u044f, \u0442\u0430\u043a \u0447\u0442\u043e \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0443\u0441\u0442\u0438\u043d\u0433\u0438","30e26344":"\u041c\u0435\u0442\u0440\u0438\u043a\u0430 \u0441\u0442\u0430\u043b\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043b\u0443\u0447\u0448\u0435. \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0430\u043d\u0430\u043b\u0438\u0437 \u0432\u0430\u0436\u043d\u043e\u0441\u0442\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043e\u0442 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 SHAP","84d51037":"## Feature Engineering\n---","ce7ccb6b":"\u0412\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u043c timestamp \u0447\u0442\u043e\u0431\u044b \u0438\u0437\u0432\u043b\u0435\u0447\u044c \u0438\u0437 \u043d\u0435\u0433\u043e \u0434\u0432\u0430 \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 - \u0433\u043e\u0434 \u0438 \u043c\u0435\u0441\u044f\u0446","bae6b310":"#### XGBoost (+ Cross Validation)","41910214":"#### PCA + XGBoost","496506d8":"## Exploratory Data Analysis\n---","816c162b":"#### CatBoost","90e806cc":"\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u043d\u0430\u0448 \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u043d\u0430 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438","17d86258":"\u0412 \u044d\u0442\u043e\u0442 \u0440\u0430\u0437 \u0432\u0437\u0433\u043b\u044f\u043d\u0435\u043c \u043d\u0430 \u0433\u0440\u0430\u0444\u0438\u043a \u0432\u0430\u0436\u043d\u043e\u0441\u0442\u0438 \u0444\u0438\u0447\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 XGBoost","3dbf91ef":"\u0421\u043a\u043e\u0440 \u0437\u0430\u043c\u0435\u0442\u043d\u043e \u0443\u043f\u0430\u043b. \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u043c\u0435\u0442\u043e\u0434 \u0433\u043b\u0430\u0432\u043d\u044b\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u043d\u0435 \u043f\u043e\u0434\u043e\u0439\u0434\u0435\u0442 \u0434\u043b\u044f \u044d\u0442\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438","f836821d":"\u0421\u0440\u0430\u0437\u0443 \u0436\u0435 \u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u0441\u0430\u043c\u044b\u0439 \u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u0438\u043f\u0430\u043a\u0442 \u0432\u043d\u043e\u0441\u0438\u0442 \u043f\u043e\u043b\u043d\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043d\u0435\u0434\u0432\u0438\u0436\u0438\u043c\u043e\u0441\u0442\u0438, \u0447\u0442\u043e \u043d\u0435\u0443\u0434\u0438\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e. \u041d\u043e \u0442\u0430\u043a\u0436\u0435 \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u043c\u0435\u0442\u0438\u0442\u044c, \u0447\u0442\u043e \u043a\u0430\u0444\u0435 \u0442\u043e\u0436\u0435 \u043f\u043e\u0432\u043b\u0438\u044f\u043b \u043d\u0430 \u043c\u043e\u0434\u0435\u043b\u044c","eb719835":"\u041f\u043e\u0445\u043e\u0436\u0435, \u0447\u0442\u043e \u043a\u0430\u0436\u0434\u0430\u044f \u0438\u0437 20 \u0433\u043b\u0430\u0432\u043d\u044b\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u043e\u043a\u0430\u0437\u0430\u043b\u0430\u0441\u044c \u0432\u0430\u0436\u043d\u043e\u0439 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438","d64aaa14":"#### Data Files\n---\n* train.csv, test.csv: \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e\u0431 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0445 \u0441\u0434\u0435\u043b\u043a\u0430\u0445. \u0421\u0442\u0440\u043e\u043a\u0438 \u0438\u043d\u0434\u0435\u043a\u0441\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u043f\u043e \u043f\u043e\u043b\u044e \u00abid\u00bb, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0441\u044f \u043a \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u043c \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u044f\u043c (\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0435 \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u0430 \u043c\u043e\u0433\u0443\u0442 \u043f\u043e\u044f\u0432\u043b\u044f\u0442\u044c\u0441\u044f \u0431\u043e\u043b\u0435\u0435 \u043e\u0434\u043d\u043e\u0433\u043e \u0440\u0430\u0437\u0430 \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0445 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u044f\u0445). \u042d\u0442\u0438 \u0444\u0430\u0439\u043b\u044b \u0442\u0430\u043a\u0436\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0440\u0430\u0439\u043e\u043d\u0435 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043d\u0435\u0434\u0432\u0438\u0436\u0438\u043c\u043e\u0441\u0442\u0438.\n\n* macro.csv: \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e \u043c\u0430\u043a\u0440\u043e\u044d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0435 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u043e\u043c\u0443 \u0441\u0435\u043a\u0442\u043e\u0440\u0443 \u0420\u043e\u0441\u0441\u0438\u0438 (\u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u044b \u043a \u043d\u0430\u0431\u043e\u0440\u0443 \u043f\u043e\u0435\u0437\u0434\u043e\u0432 \u0438 \u0442\u0435\u0441\u0442\u043e\u0432 \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0435 \u00abtimestamp\u00bb)\n\n* sample_submission.csv: \u043f\u0440\u0438\u043c\u0435\u0440 \u0441\u0430\u0431\u043c\u0438\u0442\u0430\n* data_dictionary.txt: \u043e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u0435\u0439, \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u0432 \u0434\u0440\u0443\u0433\u0438\u0445 \u0444\u0430\u0439\u043b\u0430\u0445 \u0434\u0430\u043d\u043d\u044b\u0445","3b8a4002":"#### Decision Tree","40ef4c90":"#### XGBoost","de5a17ee":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c One Hot Encoder \u0438 \u0437\u0430\u043a\u043e\u0434\u0438\u0440\u0443\u0435\u043c \u043d\u0430\u0448\u0438 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435, \u0447\u0442\u043e\u0431\u044b \u043d\u0430\u0448\u0438\u043c \u043c\u043e\u0434\u0435\u043b\u044c\u043a\u0430\u043c \u0431\u044b\u043b\u043e \u0443\u0434\u043e\u0431\u043d\u0435\u0435 \u0443\u0447\u0438\u0442\u044c\u0441\u044f.","c185d72c":"\u041f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u043e\u043a\u0430\u0437\u0430\u043b\u043e\u0441\u044c \u043e\u0447\u0435\u043d\u044c \u043c\u043d\u043e\u0433\u043e. \u0417\u0430\u043c\u0435\u043d\u0438\u043c \u0447\u0430\u0441\u0442\u044c \u0438\u0437 \u043d\u0438\u0445 \u043c\u043e\u0434\u043e\u0439, \u0430 \u0447\u0430\u0441\u0442\u044c \u0441\u0440\u0435\u0434\u043d\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c","209be68c":"\u0412\u0438\u0434\u0438\u043c \u0441\u0442\u0440\u0430\u043d\u043d\u0443\u044e \u0430\u043d\u043e\u043c\u0430\u043b\u0438\u044e \u0446\u0435\u043d\u044b \u0434\u043b\u044f 33-\u044d\u0442\u0430\u0436\u043d\u043e\u0433\u043e \u0434\u043e\u043c\u0430, \u0443\u0434\u0430\u043b\u0438\u043c \u0435\u0451.","4cb63342":"\u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u0432 \u0446\u0435\u043b\u043e\u043c, \u0438 \u043d\u0430\u0448 \u0442\u0430\u0440\u0433\u0435\u0442","1c538e64":"\u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u044c \u043c\u0435\u0442\u043e\u0434 \u0441\u043d\u0438\u0436\u0435\u043d\u0438\u044f \u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u0438, \u0438 \u043e\u0431\u0443\u0447\u0438\u0442\u044c \u0431\u0443\u0441\u0442\u0438\u043d\u0433 \u0443\u0436\u0435 \u043d\u0430 \u043d\u0435\u043c","e34984f1":"\u041d\u0435\u0432\u043e\u043e\u0440\u0443\u0436\u0435\u043d\u043d\u044b\u043c \u0432\u0437\u0433\u043b\u044f\u0434\u043e\u043c \u0432\u0438\u0434\u043d\u043e \u043d\u0435\u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435, \u0441\u0442\u043e\u0438\u0442 \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u044c \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435","e0e961e2":"\u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438 \u043d\u0430\u0448\u0435\u0433\u043e \u0446\u0435\u043b\u0435\u0432\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u0441 \u0434\u0440\u0443\u0433\u0438\u043c\u0438:","a87940ea":"\u041b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430\u0448\u0435\u0433\u043e \u0442\u0430\u0440\u0433\u0435\u0442\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u043e\u043c\u043e\u0433\u043b\u043e, \u0434\u0430\u043d\u043d\u044b\u0435 \u0441\u0442\u0430\u043b\u043e \u0443\u0434\u043e\u0431\u043d\u0435\u0439 \u0432\u043e\u0441\u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c. \u0417\u0430\u043c\u0435\u043d\u0438\u043c \u044d\u0442\u043e\u0442 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435","473aef82":"\u041a\u0430\u043a \u043e\u043a\u0430\u0437\u0430\u043b\u043e\u0441\u044c, \u043a\u0430\u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u0446\u0435\u043b\u0430\u044f \u0441\u043e\u0442\u043d\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043d\u0438\u043a\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u043d\u0435 \u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u0443\u0435\u0442 \u0441 \u043d\u0430\u0448\u0438\u043c \u0442\u0430\u0440\u0433\u0435\u0442\u043e\u043c. \u0415\u0441\u0442\u044c \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0438\u0445.","706565fa":"\u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043e\u0431\u0443\u0447\u0438\u0442\u044c \u043e\u0431\u0443\u0447\u043d\u043e\u0435 \u0434\u0435\u0440\u0435\u0432\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u0439 \u0438 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043c\u0435\u0442\u0440\u0438\u043a\u0443","421547b0":"## Model Building\n---"}}