{"cell_type":{"4654732d":"code","86f40dfd":"code","224310a7":"code","5e5e3a56":"code","0bbdb3b6":"code","c3caa43c":"code","d66728ce":"code","04149791":"markdown","73b62974":"markdown","7b13b28e":"markdown","f09d9f19":"markdown","ce57bc56":"markdown","c640e654":"markdown"},"source":{"4654732d":"!pip install openpyxl\n# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport openpyxl\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport missingno\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n#matplotlib inline\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfolder_path = '..\/input\/eeg-raw-data-collected-from-human-brain\/EEG Raw Data Controls updated\/EEG Raw Data Controls updated'\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","86f40dfd":"tempdf1=pd.read_csv('..\/input\/eeg-raw-data-collected-from-human-brain\/EEG Raw Data Controls updated\/EEG Raw Data Controls updated\/OpenBCI-RAW-con3_EC.txt')\ntempdf1.info()\ntempdf1.isnull().sum() #checking for null","224310a7":"tempdf2=pd.read_csv('..\/input\/eeg-raw-data-collected-from-human-brain\/EEG Raw Data Controls updated\/EEG Raw Data Controls updated\/OpenBCI-RAW-con3_EO.txt')\ntempdf2.info()\ntempdf2.isnull().sum() #checking for null","5e5e3a56":"def numeric_eda1(tempdf1, hue=None):\n    \"\"\"Given dataframe, generate EDA of numeric data\"\"\"\n    print(\"\\nTo check: \\nDistribution of numeric data\")\n    display(tempdf1.describe().T)\n    columns = tempdf1.select_dtypes(include=np.number).columns\n    figure = plt.figure(figsize=(20, 10))\n    figure.add_subplot(1, len(columns), 1)\n    for index, col in enumerate(columns):\n        if index > 0:\n            figure.add_subplot(1, len(columns), index + 1)\n        sns.boxplot(y=col, data=tempdf1, boxprops={'facecolor': 'None'})\n    figure.tight_layout()\n    plt.show()\n\n\n    # Plot the pairwise joint distributions\n    print(\"\\nTo check pairwise joint distribution of numeric data\")\n    if hue==None:\n        sns.pairplot(tempdf1.select_dtypes(include=np.number))\n    else:\n        sns.pairplot(tempdf1.select_dtypes(include=np.number).join(tempdf1[[hue]]), hue=hue)\n    plt.show()   \n    \ndef categorical_eda1(tempdf1, hue=None):\n    \"\"\"Given dataframe, generate EDA of categorical data\"\"\"\n    print(\"\\nTo check: \\nUnique count of non-numeric data\\n\")\n    print(tempdf1.select_dtypes(include=['object', 'category']).nunique())\n    # Plot count distribution of categorical data\n    for col in tempdf1.select_dtypes(include='category').columns:\n        fig1 = sns.catplot(x=col, kind=\"count\", data=tempdf1, hue=hue)\n        fig1.set_xticklabels(rotation=90)\n        plt.show()\n    \ndef eda1(tempdf1):\n    \"\"\"Given dataframe, generate exploratory data analysis\"\"\"\n    # check that input is pandas dataframe\n    if type(tempdf1) != pd.core.frame.DataFrame:\n        raise TypeError(\"Only pandas dataframe is allowed as input\")\n        \n    # replace field that's entirely space (or empty) with NaN\n    tempdf1 = tempdf1.replace(r'^\\s*$', np.nan, regex=True)\n    print(\"Preview of data:\")\n    #display(df.head.unique())\n    display(tempdf1.head(40))\n\n    print(\"\\nTo check: \\n (1) Total number of entries \\n (2) Column types \\n (3) Any null values\\n\")\n    print(tempdf1.info())\n\n    # generate count statistics of duplicate entries\n    if len(tempdf1[tempdf1.duplicated()]) > 0:\n        print(\"\\n***Number of duplicated entries: \", len(tempdf1[tempdf1.duplicated()]))\n        display(tempdf1[tempdf1.duplicated(keep=False)].sort_values(by=list(tempdf1.columns)).head())\n    else:\n        print(\"\\nNo duplicated entries found\")\n\n    # EDA of categorical data\n    categorical_eda1(tempdf1)\n    \n    # EDA of numeric data\n    numeric_eda1(tempdf1)#hue='City_name')\n        \n    # Plot time series plot of numeric data\n    #time_series_plot(df)","0bbdb3b6":"eda1(tempdf1)","c3caa43c":"def numeric_eda2(tempdf2, hue=None):\n    \"\"\"Given dataframe, generate EDA of numeric data\"\"\"\n    print(\"\\nTo check: \\nDistribution of numeric data\")\n    display(tempdf2.describe().T)\n    columns2 = tempdf2.select_dtypes(include=np.number).columns\n    figure2 = plt.figure(figsize=(20, 10))\n    figure2.add_subplot(1, len(columns2), 1)\n    for index, col in enumerate(columns2):\n        if index > 0:\n            figure2.add_subplot(1, len(columns2), index + 1)\n        sns.boxplot(y=col, data=tempdf2, boxprops={'facecolor': 'None'})\n    figure2.tight_layout()\n    plt.show()\n    \n    # Plot the pairwise joint distributions\n    print(\"\\nTo check pairwise joint distribution of numeric data\")\n    if hue==None:\n        sns.pairplot(tempdf2.select_dtypes(include=np.number))\n    else:\n        sns.pairplot(tempdf2.select_dtypes(include=np.number).join(tempdf2[[hue]]), hue=hue)\n    plt.show()   \n    \ndef categorical_eda2(tempdf2, hue=None):\n    \"\"\"Given dataframe, generate EDA of categorical data\"\"\"\n    print(\"\\nTo check: \\nUnique count of non-numeric data\\n\")\n    print(tempdf2.select_dtypes(include=['object', 'category']).nunique())\n    # Plot count distribution of categorical data\n    for col in tempdf2.select_dtypes(include='category').columns:\n        fig2 = sns.catplot(x=col, kind=\"count\", data=tempdf2, hue=hue)\n        fig2.set_xticklabels(rotation=90)\n        plt.show()\n    \ndef eda2(tempdf2):\n    \"\"\"Given dataframe, generate exploratory data analysis\"\"\"\n    # check that input is pandas dataframe\n    if type(tempdf2) != pd.core.frame.DataFrame:\n        raise TypeError(\"Only pandas dataframe is allowed as input\")\n        \n    # replace field that's entirely space (or empty) with NaN\n    tempdf2 = tempdf2.replace(r'^\\s*$', np.nan, regex=True)\n    print(\"Preview of data:\")\n    #display(df.head.unique())\n    display(tempdf2.head(40))\n\n    print(\"\\nTo check: \\n (1) Total number of entries \\n (2) Column types \\n (3) Any null values\\n\")\n    print(tempdf2.info())\n\n    # generate count statistics of duplicate entries\n    if len(tempdf2[tempdf2.duplicated()]) > 0:\n        print(\"\\n***Number of duplicated entries: \", len(tempdf2[tempdf2duplicated()]))\n        display(tempdf2[tempdf2.duplicated(keep=False)].sort_values(by=list(tempdf2.columns)).head())\n    else:\n        print(\"\\nNo duplicated entries found\")\n\n    # EDA of categorical data\n    categorical_eda2(tempdf2)\n    \n    # EDA of numeric data\n    numeric_eda2(tempdf2)#hue='City_name')\n        \n    # Plot time series plot of numeric data\n    #time_series_plot(df)","d66728ce":"eda2(tempdf2)","04149791":"**EDA Function for Subject's Eyes Closed Data**","73b62974":"**EDA Function for Subject's Eyes Opened Data**","7b13b28e":"**EDA Function for Subject's Eyes Closed Data File**","f09d9f19":"**Analysing Subject's Eyes Closed Data**","ce57bc56":"**Analysing Subject's Eyes Closed Dat**a","c640e654":"**EDA Function for Subject's Eyes Opened Data File**"}}