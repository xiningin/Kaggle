{"cell_type":{"e14e35a2":"code","11dbc151":"code","ce33e7a2":"code","832f307b":"code","ba2f012f":"code","8f796734":"code","90287fbc":"code","96e119b2":"code","e184fca9":"code","9e4e3f1f":"code","8bcd7e22":"code","91db058b":"code","cb3ebe70":"code","20b7ede9":"code","704d9b26":"code","2e05fa60":"code","9b49a9c6":"code","99c87987":"code","6a829c77":"code","87354d00":"code","34527d61":"code","c4d8d3a5":"code","96c60073":"markdown","25314d89":"markdown","9bc74dfd":"markdown","fca4deff":"markdown","4823d7e6":"markdown","6bb0b236":"markdown","832df669":"markdown","339024aa":"markdown","7ead3f39":"markdown","6dd3a311":"markdown","e8aae1b3":"markdown","0bc26593":"markdown","9f3565c4":"markdown"},"source":{"e14e35a2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-whitegrid\")\n\nimport seaborn as sns\nfrom collections import Counter\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","11dbc151":"train_df= pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df= pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_PassengerId = test_df[\"PassengerId\"]","ce33e7a2":"train_df.columns","832f307b":"train_df.head()","ba2f012f":"train_df.describe()","8f796734":"train_df = train_df.drop[\"\"]","90287fbc":"plt.style.available","96e119b2":"train_df.info()","e184fca9":"def bar_plot(variable):\n    \"\"\"\n    input: variable ex : \"Sex\"\n    output: bar plot & values count\n    \n    \"\"\"\n    # get feature\n    var = train_df[variable]\n    \n    # count number of categorical variable (value\/sample)\n    varValue = var.value_counts()\n    # visualize\n    plt.figure(figsize=(9,3))\n    plt.bar(varValue.index, varValue)\n    plt.xticks(varValue.index, varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    \n    print(\"{} : \\n {}\".format(variable,varValue))","9e4e3f1f":"Category1 = [\"Survived\", \"Pclass\", \"Sex\", \"SibSp\", \"Parch\", \"Embarked\"]\n\nfor c in Category1:\n    bar_plot(c) ","8bcd7e22":"Category2 =[\"Cabin\",\"Name\",\"Ticket\"]\nfor c in Category2:\n    print(\"{} \\n\".format(train_df[c].value_counts()))","91db058b":" def plot_hist(variable):\n        plt.figure(figsize=(9,3))\n        plt.hist(train_df[variable], bins=10)\n        plt.xlabel(variable)\n        plt.ylabel(\"Frequency\")\n        plt.title(\"{} distribution with hist \".format(variable))\n        plt.show()","cb3ebe70":"Numerical = [\"Age\",\"Fare\",\"PassengerId\"]\n\nfor n in Numerical:\n    plot_hist(n)","20b7ede9":"# Pclass - Survived\n\ntrain_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"], as_index=False).mean().sort_values(\"Survived\",ascending=False)","704d9b26":"# Sex - Survived\ntrain_df[[\"Sex\",\"Survived\"]].groupby([\"Sex\"], as_index=False).mean().sort_values(\"Survived\", ascending= False)","2e05fa60":"# SibSp - Survived\ntrain_df[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"], as_index=False).mean().sort_values(\"Survived\",ascending=False)","9b49a9c6":"# Parch - Survived\ntrain_df[[\"Parch\",\"Survived\"]].groupby([\"Parch\"], as_index=False).mean().sort_values(\"Survived\",ascending=False)","99c87987":"def detect_outliers(df,features):\n    outlier_indices = []\n    \n    for c in features:\n        # 1st quantile\n        Q1 = np.percentile(df[c],25)\n        # 3th quantile\n        Q3 = np.percentile(df[c],75)\n        # IQR\n        IQR = Q3-Q1\n        # Outlier step\n        outlier_step = IQR * 1.5\n        # Detect outlier and their indices\n        outlier_list_col = df[(df[c] < Q1 - outlier_step) | (df[c] > Q3+outlier_step)].index\n        # store indices\n        outlier_indices.extend(outlier_list_col)\n        \n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i,v in outlier_indices.items() if v>2)\n    \n    return multiple_outliers","6a829c77":"train_df.loc[detect_outliers(train_df, [\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]","87354d00":"train_df_len = len(train_df)\ntrain_df = pd.concat([train_df,test_df], axis=0).reset_index(drop=True)","34527d61":"train_df.head()","c4d8d3a5":"train_df.columns[train_df.isnull()]","96c60073":"## <a id=8><\/a>\n","25314d89":"<a id=\"4\"><\/a>\n## Categorical variable analysis","9bc74dfd":"<a id=2><\/a>\n# Variable description","fca4deff":"## Find Missing Value","4823d7e6":"# Introduction \n\n<font color=\"Blue\">\n\n### Content:\n\n  1. [Load and check data](#1)\n  1. [Variable description](#2)\n    \n    * [Univariate variable analysis](#3)\n    \n       * [Categorical variable analysis](#4)\n       * [Numerical variable analysis](#5)\n    \n  1. [Basic Data Analysis](#6)\n    \n  1. [Outlier Detection](#7)\n    \n  1. [Missing Value](#8)\n    * [Finding Missing Value](#9)\n    * [Filling Missing Value](#10)","6bb0b236":"1. PassengerId\n1. Survived\n1. Pclass \n1. Name \n1. Sex \n1. Age \n1. SibSp\n1. Parch \n1. Ticket \n1. Fare \n1. Cabin \n1. Embarked","832df669":"<a id=\"1\"><\/a> <br>\n# Load and check data","339024aa":"<a id=8><\/a>\n# Missing Value\n* Find Missing Value\n* Fill Missing Value","7ead3f39":"## Fill Missing Value","6dd3a311":"<a id=7><\/a>\n# Outlier Detection\n<br>\nfirst quantile = Q1\nsecond quantile = median\nthird quantile = Q3\n\nIQR = Q3 - Q1\n\nIQR * 1.5 ==> Outlier detection step (ODS)\n\nQ1 - ODS || Q3 + ODS","e8aae1b3":"<a id=\"3\"><\/a> <br>\n\n# Univariate variable analysis\n\n  ##### * Categorical variable analysis : Survived, PClass, Name, Sex, Tickects, SibSp, Parch, Cabin, Embarked\n  ##### * Numerical variable analysis : PassengerId, Age, Fare","0bc26593":"<a id=\"6\"><\/a>\n# Basic data analysis\n\n* Pclass - Survived\n* Sex - Survived\n* SibSp - Survived\n* Parch - Survived","9f3565c4":"<a id=\"5\"><\/a>\n## Numerical variable analysis"}}