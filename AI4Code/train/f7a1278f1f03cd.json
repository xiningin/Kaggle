{"cell_type":{"cfdb626e":"code","8ac315ba":"code","e08c52e3":"code","55a793e6":"code","eb03215c":"code","d22ab787":"code","769e0b6e":"code","5a1ee39c":"code","1b551953":"code","5c60f29d":"code","11110354":"code","8f3d1054":"code","fc2a614e":"code","8d254e54":"code","e5845bdb":"code","927bb114":"code","e3868062":"code","8f2564d7":"code","248d2e7c":"code","20fb2aee":"code","9d7095a4":"code","1b993bf3":"code","be7657bb":"code","6ca6f88e":"code","0ef1616e":"code","54d4c78e":"code","f1ac2fa1":"code","bad01c67":"code","da2d2d34":"code","dcc51efe":"code","17f0f037":"code","0539bc8d":"code","c1701af2":"code","1d859dbc":"code","4aadc1ba":"code","58617e4f":"code","23100c4e":"code","286576e2":"code","6cd0cca3":"code","b7fb35a3":"code","803b4622":"code","1fe76a56":"code","29114a78":"code","15fd8a92":"code","43eb4571":"code","ff51072b":"code","5c8ee023":"code","e5cfc149":"markdown","0f1cca4b":"markdown","3aaf294b":"markdown","d8d843da":"markdown","3218cadd":"markdown","569026db":"markdown","c9acbc23":"markdown","b09b4398":"markdown","590aab3d":"markdown","793e3331":"markdown","e5fa9944":"markdown","8ae92cdf":"markdown","59341231":"markdown","69f01495":"markdown","acdf3ea0":"markdown","22386e39":"markdown","70dea43a":"markdown","8eaa985e":"markdown"},"source":{"cfdb626e":"import pandas as pd\nimport numpy as np\n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\nmpl.rc('axes', labelsize=12)\nmpl.rc('xtick', labelsize=10)\nmpl.rc('ytick', labelsize=10)\nmpl.rc('lines', linewidth=2, linestyle='-.')\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport warnings\nwarnings.filterwarnings('ignore')","8ac315ba":"from sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import cross_val_score, KFold","e08c52e3":"df = pd.read_csv('..\/input\/titanic\/train.csv')\ndf.head()","55a793e6":"df.info()","eb03215c":"df.isna().sum()","d22ab787":"df['Age'].fillna(df['Age'].median(), inplace=True)","769e0b6e":"df['FamSize'] = df['SibSp'] + df['Parch'] + 1","5a1ee39c":"df.drop(columns=['PassengerId', 'Name', 'Ticket', 'SibSp', 'Parch', 'Cabin', 'Embarked'], axis=1, inplace=True)","1b551953":"fig = px.histogram(df, x='Survived', color='Sex', barmode='group', title='<b>Survived w.r.t Sex<b>')\nfig.update_layout(width=600, height=600, bargap=0.1)\nfig.show()","5c60f29d":"fig = px.histogram(df, x='Survived', color='Pclass', barmode='group', title='<b>Survived w.r.t Pclass<b>')\nfig.update_layout(width=600, height=600, bargap=0.1)\nfig.show()","11110354":"fig = px.strip(df, x='Age', y='Survived', orientation='h', color='Sex', title='<b>Survived w.r.t Sex and Age<b>')\nfig.update_layout(width=1250, height=600)\nfig.show()","8f3d1054":"fig = px.box(df, x='Survived', y='Fare')\nfig.update_layout(width=600, height=600)\nfig.show()","fc2a614e":"imputer = SimpleImputer(strategy='median')\ndf['Age'] = imputer.fit_transform(df[['Age']])","8d254e54":"df.isna().sum()","e5845bdb":"cat_encoder = OneHotEncoder(handle_unknown='error', dtype ='int', sparse=False, drop='first')\ndf['Sex'] = cat_encoder.fit_transform(df[['Sex']])","927bb114":"scaler = StandardScaler()\nnum = ['Pclass', 'Age', 'Fare', 'FamSize']\ndf[num] = scaler.fit_transform(df[num])","e3868062":"num = ['Pclass', 'Age', 'Fare', 'FamSize']\n\ncat_pipe = Pipeline([('one-hot-encoder', OneHotEncoder(handle_unknown='error', dtype ='int', sparse=False, drop='first'))])\nnum_pipe = Pipeline([('normalize', StandardScaler())])\n\nfull_pipeline = ColumnTransformer(transformers=[('cat', cat_pipe, ['Sex']),\n                                                ('num', num_pipe, num)],\n                                                remainder='passthrough')\n\ndf_tr = full_pipeline.fit_transform(df.drop(columns=['Survived']))\ndf_tr","8f2564d7":"# cat = cat_encoder.get_feature_names(['Sex'])","248d2e7c":"# full_cols = np.concatenate([cat, num, ['Survived']])","20fb2aee":"# df_tr = pd.DataFrame(transformed_values, columns=full_cols)\n# df_tr.head()","9d7095a4":"plt.figure(figsize=(9,7))\nsns.heatmap(data=df.corr(), cmap=\"YlGnBu\")\nplt.show()","1b993bf3":"X = df_tr\ny = df['Survived'].values","be7657bb":"# X = df_tr.drop(columns=['Survived'], axis=1)\n# y = df_tr['Survived'].copy()","6ca6f88e":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","0ef1616e":"log_reg = LogisticRegression()\nlog_reg.fit(X, y)","54d4c78e":"log_reg_predictions = log_reg.predict(X)\nlog_reg_predictions","f1ac2fa1":"print(classification_report(y, log_reg_predictions))","bad01c67":"log_reg_weights = pd.DataFrame({'feature_name':df.drop(columns=['Survived']).columns,\n                                'weights': log_reg.coef_[0]}).sort_values('weights', ascending=False)\n\nlog_reg_weights.style.background_gradient(cmap='Blues')","da2d2d34":"kfold = KFold(n_splits=5, shuffle=True, random_state=42)\n\nexperiment_k = range(1, 25, 2)\naccuracy_rate = []\n\nfor i in experiment_k:\n    knn = KNeighborsClassifier(n_neighbors=i, p=2)\n    accuracy = cross_val_score(knn, X, y, cv=kfold, scoring='accuracy').mean()\n    accuracy_rate.append(accuracy)","dcc51efe":"plt.figure(figsize=(9, 7))\nplt.plot(experiment_k, accuracy_rate, marker='o')\nplt.xticks(experiment_k)\nplt.grid('on')\nplt.show()","17f0f037":"knn_final = KNeighborsClassifier(n_neighbors=7, p=2)\nknn_final.fit(X, y)","0539bc8d":"knn_predictions = knn_final.predict(X)\nprint(classification_report(y, knn_predictions))","c1701af2":"df_test = pd.read_csv('..\/input\/titanic\/test.csv')\ndf_test.head()","1d859dbc":"test_copy = df_test.copy()","4aadc1ba":"df_test.info()","58617e4f":"df_test.isna().sum()","23100c4e":"df_test['Age'].fillna(df_test['Age'].median(), inplace=True)","286576e2":"df_test['FamSize'] = df_test['SibSp'] + df_test['Parch'] + 1","6cd0cca3":"df_test.drop(columns=['PassengerId', 'Name', 'Ticket', 'SibSp', 'Parch', 'Cabin', 'Embarked'], axis=1, inplace=True)","b7fb35a3":"df_test['Age'] = imputer.transform(df_test[['Age']])","803b4622":"df_test['Sex'] = cat_encoder.transform(df_test[['Sex']])","1fe76a56":"df_test[num] = scaler.transform(df_test[num])","29114a78":"df_test['Fare'].fillna(df_test['Fare'].mean(), inplace=True)","15fd8a92":"df_test_tr = full_pipeline.transform(df_test)\ndf_test_tr","43eb4571":"predictions = knn_final.predict(df_test_tr)","ff51072b":"submission = pd.DataFrame({'PassengerID' : test_copy['PassengerId'].values,\n                          'Survived' : predictions})","5c8ee023":"submission.to_csv('.\/submission_1.csv', index=False)","e5cfc149":"### Fill missing values","0f1cca4b":"### Preprocess categorical features","3aaf294b":"### Normalize numeric features","d8d843da":"# Load the dataset","3218cadd":"### Combine full pipeline","569026db":"### Classification report","c9acbc23":"## KNN","b09b4398":"# Evaluate the models on test set","590aab3d":"### Feature importance","793e3331":"### Show correlation between variables","e5fa9944":"# Prepare the data for Machine Learning algorithms","8ae92cdf":"## Logistic Regression","59341231":"# Import libraries and modules","69f01495":"### Split train and test sets","acdf3ea0":"# Clean and visualize the data","22386e39":"### Fit the final model","70dea43a":"### K-fold cross validation","8eaa985e":"# Select and train a model"}}