{"cell_type":{"c61824a9":"code","2b4a801f":"code","5983988d":"code","65d1936c":"code","c022c187":"code","4f6e1157":"code","a1c956e0":"code","968bcc48":"code","03a490ec":"code","07ac75cd":"code","fef9c19d":"code","c029203b":"code","172dfaf5":"code","e4078026":"code","65c5c10c":"code","c4a93a17":"code","46d2a9e2":"code","47cf56a4":"code","76bc6c6b":"code","690109d2":"code","9368f9d3":"code","bfd53cec":"code","c328079c":"code","3d25df4c":"code","b966029d":"code","2f44d229":"code","688857bf":"code","0459dea3":"code","ebd8a57c":"code","bfefd719":"code","f7da03cd":"code","762fd621":"code","6c0f1d8b":"code","1e53d57a":"code","ea2005bf":"code","aed4c1ad":"code","685928c7":"markdown","7d6a9ebe":"markdown"},"source":{"c61824a9":"import pandas as pd\nimport tensorflow as tf\nimport keras\nfrom keras import layers\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom keras.layers import LSTM, Dense,Input, Embedding\nfrom sklearn.utils import shuffle\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport re\nimport string\n\nimport warnings\nwarnings.filterwarnings('ignore')\n","2b4a801f":"data = pd.read_csv('..\/input\/hindienglish-corpora\/Hindi_English_Truncated_Corpus.csv',encoding='utf-8')\ndata.head()","5983988d":"# counting sources\ndata['source'].value_counts()","65d1936c":"\nsns.countplot(data['source'],data = data)\nplt.show()","c022c187":"print(\"Total data: \",data.shape[0])","4f6e1157":"# selcting data with source ted\ndata = data[data.source == 'ted']\ndata.shape","a1c956e0":"# checking null values\ndata.isna().sum()","968bcc48":"# checking duplicated data\nisDuplicated = data.duplicated().any()\nif isDuplicated:\n    total_duplicates = data.duplicated().sum()\n    print(\"Total duplicate rows are: \",total_duplicates)\n    data.drop_duplicates(inplace = True)","03a490ec":"## sampling 20000 rows randomly\ndata = data.sample(n = 20000, random_state = 31)\ndata.shape","07ac75cd":"## changing uppercase to lowercase\ndata['english_sentence'] = data['english_sentence'].apply(lambda x: x.lower())\ndata['hindi_sentence']=data['hindi_sentence'].apply(lambda x: x.lower())\n\n# Remove quotes\ndata['english_sentence']=data['english_sentence'].apply(lambda x: re.sub(\"'\", '', x))\ndata['hindi_sentence']=data['hindi_sentence'].apply(lambda x: re.sub(\"'\", '', x))\n","fef9c19d":"to_exclude = set(string.punctuation) # Set of all special characters\nprint(\"punctuations to exclude:: \",to_exclude)\n# Remove all the special characters\ndata['english_sentence']=data['english_sentence'].apply(lambda x: ''.join(ch for ch in x if ch not in to_exclude))\ndata['hindi_sentence']=data['hindi_sentence'].apply(lambda x: ''.join(ch for ch in x if ch not in to_exclude))","c029203b":"from string import digits\n# Remove all numbers from text\nremove_digits = str.maketrans('', '', digits)\n\ndata['english_sentence']=data['english_sentence'].apply(lambda x: x.translate(remove_digits))\ndata['hindi_sentence']=data['hindi_sentence'].apply(lambda x: x.translate(remove_digits))\n\ndata['hindi_sentence'] = data['hindi_sentence'].apply(lambda x: re.sub(\"[\u0968\u0969\u0966\u096e\u0967\u096b\u096d\u096f\u096a\u096c]\", \"\", x))\n\n# Remove extra spaces\ndata['english_sentence']=data['english_sentence'].apply(lambda x: x.strip())\ndata['hindi_sentence']=data['hindi_sentence'].apply(lambda x: x.strip())\ndata['english_sentence']=data['english_sentence'].apply(lambda x: re.sub(\" +\", \" \", x))\ndata['hindi_sentence']=data['hindi_sentence'].apply(lambda x: re.sub(\" +\", \" \", x))","172dfaf5":"## adding start and end token to the target sentence\ndata['hindi_sentence'] = data['hindi_sentence'].apply(lambda x: \"START_ \" + x + \" _END\")","e4078026":"## counting length of english and hindi sentence\ndata['english_length'] = data['english_sentence'].apply(lambda x: len(x.split(' ')))\ndata['hindi_length'] = data['hindi_sentence'].apply(lambda x: len(x.split(' ')))\n\ndata.head()","65c5c10c":"print(\"Maximum length of English Sentence: \", max(data['english_length']))\nprint(\"Maximum length of Hindi Sentence: \",max(data['hindi_length']))","c4a93a17":"### Get English and Hindi Vocabulary\nall_eng_words=set()\nfor eng in data['english_sentence']:\n    for word in eng.split():\n        if word not in all_eng_words:\n            all_eng_words.add(word)\n\nall_hindi_words=set()\nfor hin in data['hindi_sentence']:\n    for word in hin.split():\n        if word not in all_hindi_words:\n            all_hindi_words.add(word)\n            \n\nprint(\"toral english words: \",len(all_eng_words))\nprint('total hind words: ',len(all_hindi_words))","46d2a9e2":"## using only sentence with length less than 20\nmask1 = data['english_length'] < 21\nmask2 = data['hindi_length'] < 21\ndata = data[mask1 & mask2]\ndata.shape","47cf56a4":"print(\"maximum length of Hindi Sentence \",max(data['hindi_length']))\nprint(\"maximum length of English Sentence \",max(data['english_length']))","76bc6c6b":"input_words = sorted(list(all_eng_words))\ntarget_words = sorted(list(all_hindi_words))\nnum_encoder_tokens = len(all_eng_words)\nnum_decoder_tokens = len(all_hindi_words)\n\nnum_encoder_tokens, num_decoder_tokens","690109d2":"num_decoder_tokens += 1 #for zero padding\n","9368f9d3":"input_token_index = dict([(word, i+1) for i, word in enumerate(input_words)])\ntarget_token_index = dict([(word, i+1) for i, word in enumerate(target_words)])\nprint(\"Token for accelerating is: \",input_token_index['accelerating'])\n","bfd53cec":"reverse_input_char_index = dict((i, word) for word, i in input_token_index.items())\nreverse_target_char_index = dict((i, word) for word, i in target_token_index.items())\nprint(\"Character for toker 50 is: \",reverse_input_char_index[50])","c328079c":"# splitting data\nX_, y_ = data['english_sentence'], data['hindi_sentence']\nX_train, X_test, y_train, y_test = train_test_split(X_, y_, test_size = 0.2,random_state=42)\nprint(\"Total number of training data: \",X_train.shape[0])\nprint(\"Toral number of testing data: \",X_test.shape[0])","3d25df4c":"latent_dim = 300\n# Encoder\nencoder_inputs = Input(shape=(None,))\nenc_emb =  Embedding(num_encoder_tokens, latent_dim, mask_zero = True)(encoder_inputs)\nencoder_lstm = LSTM(latent_dim, return_state=True)\nencoder_outputs, state_h, state_c = encoder_lstm(enc_emb)\n# We discard `encoder_outputs` and only keep the states.\nencoder_states = [state_h, state_c]\n\n\n# Set up the decoder, using `encoder_states` as initial state.\ndecoder_inputs = Input(shape=(None,))\ndec_emb_layer = Embedding(num_decoder_tokens, latent_dim, mask_zero = True)\ndec_emb = dec_emb_layer(decoder_inputs)\n# We set up our decoder to return full output sequences,\n# and to return internal states as well. We don't use the\n# return states in the training model, but we will use them in inference.\ndecoder_lstm = LSTM(latent_dim, return_sequences=True, return_state=True)\ndecoder_outputs, _, _ = decoder_lstm(dec_emb,\n                                     initial_state=encoder_states)\ndecoder_dense = Dense(num_decoder_tokens, activation='softmax')\ndecoder_outputs = decoder_dense(decoder_outputs)\n\n# Define the model that will turn\n# `encoder_input_data` & `decoder_input_data` into `decoder_target_data`\nmodel = tf.keras.Model([encoder_inputs, decoder_inputs], decoder_outputs)\nmodel.summary()","b966029d":"model.compile(optimizer='rmsprop', loss='categorical_crossentropy', metrics = ['accuracy'])","2f44d229":"max_length_src = 20\nmax_length_tar = 20 \n\ndef generate_batch(X = X_train, y = y_train, batch_size = 128):\n    ''' Generate a batch of data '''\n    while True:\n        for j in range(0, len(X), batch_size):\n            encoder_input_data = np.zeros((batch_size, max_length_src),dtype='float32')\n            decoder_input_data = np.zeros((batch_size, max_length_tar),dtype='float32')\n            decoder_target_data = np.zeros((batch_size, max_length_tar, num_decoder_tokens),dtype='float32')\n            for i, (input_text, target_text) in enumerate(zip(X[j:j+batch_size], y[j:j+batch_size])):\n                for t, word in enumerate(input_text.split()):\n                    encoder_input_data[i, t] = input_token_index[word] # encoder input seq\n                for t, word in enumerate(target_text.split()):\n                    if t<len(target_text.split())-1:\n                        decoder_input_data[i, t] = target_token_index[word] # decoder input seq\n                    if t>0:\n                        # decoder target sequence (one hot encoded)\n                        # does not include the START_ token\n                        # Offset by one timestep\n                        decoder_target_data[i, t - 1, target_token_index[word]] = 1.\n            yield([encoder_input_data, decoder_input_data], decoder_target_data)","688857bf":"train_samples = len(X_train)\nval_samples = len(X_test)\nbatch_size = 128\nepochs = 100","0459dea3":"model.fit_generator(generator = generate_batch(X_train, y_train, batch_size = batch_size),\n                    steps_per_epoch = train_samples\/\/batch_size,\n                    epochs=epochs,\n                    validation_data = generate_batch(X_test, y_test, batch_size = batch_size),\n                    validation_steps = val_samples\/\/batch_size)","ebd8a57c":"# Encode the input sequence to get the \"thought vectors\"\nencoder_model = tf.keras.Model(encoder_inputs, encoder_states)\n\n# Decoder setup\n# Below tensors will hold the states of the previous time step\ndecoder_state_input_h = Input(shape=(latent_dim,))\ndecoder_state_input_c = Input(shape=(latent_dim,))\ndecoder_states_inputs = [decoder_state_input_h, decoder_state_input_c]\n\ndec_emb2= dec_emb_layer(decoder_inputs) # Get the embeddings of the decoder sequence\n\n# To predict the next word in the sequence, set the initial states to the states from the previous time step\ndecoder_outputs2, state_h2, state_c2 = decoder_lstm(dec_emb2, initial_state=decoder_states_inputs)\ndecoder_states2 = [state_h2, state_c2]\ndecoder_outputs2 = decoder_dense(decoder_outputs2) # A dense softmax layer to generate prob dist. over the target vocabulary\n\n# Final decoder model\ndecoder_model = tf.keras.Model(\n    [decoder_inputs] + decoder_states_inputs,\n    [decoder_outputs2] + decoder_states2)\n\ndef decode_sequence(input_seq):\n    # Encode the input as state vectors.\n    states_value = encoder_model.predict(input_seq)\n    # Generate empty target sequence of length 1.\n    target_seq = np.zeros((1,1))\n    # Populate the first character of target sequence with the start character.\n    target_seq[0, 0] = target_token_index['START_']\n\n    # Sampling loop for a batch of sequences\n    # (to simplify, here we assume a batch of size 1).\n    stop_condition = False\n    decoded_sentence = ''\n    while not stop_condition:\n        output_tokens, h, c = decoder_model.predict([target_seq] + states_value)\n\n        # Sample a token\n        sampled_token_index = np.argmax(output_tokens[0, -1, :])\n        sampled_char = reverse_target_char_index[sampled_token_index]\n        decoded_sentence += ' '+sampled_char\n\n        # Exit condition: either hit max length\n        # or find stop character.\n        if (sampled_char == '_END' or\n           len(decoded_sentence) > 50):\n            stop_condition = True\n\n        # Update the target sequence (of length 1).\n        target_seq = np.zeros((1,1))\n        target_seq[0, 0] = sampled_token_index\n\n        # Update states\n        states_value = [h, c]\n\n    return decoded_sentence","bfefd719":"train_gen = generate_batch(X_train, y_train, batch_size = 1)\nk = -1","f7da03cd":"\nk+=1\n(input_seq, actual_output), _ = next(train_gen)\ndecoded_sentence = decode_sequence(input_seq)\nprint('Input English sentence:', X_train[k:k+1].values[0])\nprint('Actual Hindi Translation:', y_train[k:k+1].values[0][6:-4])\nprint('Predicted Hindi Translation:', decoded_sentence[:-4])","762fd621":"k = k + 1\n(input_seq, actual_output), _ = next(train_gen)\ndecoded_sentence = decode_sequence(input_seq)\nprint('Input English sentence:', X_train[k:k+1].values[0])\nprint('Actual Hindi Translation:', y_train[k:k+1].values[0][6:-4])\nprint('Predicted Hindi Translation:', decoded_sentence[:-4])","6c0f1d8b":"k = k + 1\n(input_seq, actual_output), _ = next(train_gen)\ndecoded_sentence = decode_sequence(input_seq)\nprint('Input English sentence:', X_train[k:k+1].values[0])\nprint('Actual Hindi Translation:', y_train[k:k+1].values[0][6:-4])\nprint('Predicted Hindi Translation:', decoded_sentence[:-4])","1e53d57a":"k = k + 1\n(input_seq, actual_output), _ = next(train_gen)\ndecoded_sentence = decode_sequence(input_seq)\nprint('Input English sentence:', X_train[k:k+1].values[0])\nprint('Actual Hindi Translation:', y_train[k:k+1].values[0][6:-4])\nprint('Predicted Hindi Translation:', decoded_sentence[:-4])","ea2005bf":"k = k + 1\n(input_seq, actual_output), _ = next(train_gen)\ndecoded_sentence = decode_sequence(input_seq)\nprint('Input English sentence:', X_train[k:k+1].values[0])\nprint('Actual Hindi Translation:', y_train[k:k+1].values[0][6:-4])\nprint('Predicted Hindi Translation:', decoded_sentence[:-4])","aed4c1ad":"k = k + 1\n(input_seq, actual_output), _ = next(train_gen)\ndecoded_sentence = decode_sequence(input_seq)\nprint('Input English sentence:', X_train[k:k+1].values[0])\nprint('Actual Hindi Translation:', y_train[k:k+1].values[0][6:-4])\nprint('Predicted Hindi Translation:', decoded_sentence[:-4])","685928c7":"## Text preprocessing","7d6a9ebe":"## Import Necesary Libraries"}}