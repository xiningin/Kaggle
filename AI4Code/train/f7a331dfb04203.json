{"cell_type":{"e994daba":"code","d14e31d2":"code","ab0796ca":"code","aa3b91a3":"code","922dce0f":"code","8099deb1":"code","2d107fe9":"code","816e2960":"code","660ea7bd":"code","f75232ff":"code","185e6683":"code","6ad0733d":"code","0e215b44":"code","dd6e4704":"code","a55f0073":"code","8f114ffa":"code","4194324a":"code","6e09f185":"code","263cf1b4":"code","c4ebc993":"code","7026fc7d":"code","a34922d1":"code","d2a2e07f":"code","89e82da7":"code","1e9bb9ec":"code","eec9e35f":"code","53a90195":"markdown","c937b7e1":"markdown","8cb598fb":"markdown","9b07fdb2":"markdown","31e4c022":"markdown","a801d6fe":"markdown","1ebb6639":"markdown","1c9be1ce":"markdown","ca0887bb":"markdown","3067b866":"markdown","410cef36":"markdown","a9118759":"markdown","7698c296":"markdown","71e0eecd":"markdown","4c5c55fc":"markdown","d2d4fa40":"markdown","a2166cb9":"markdown","6fd4a2b2":"markdown","25f71256":"markdown","f565824d":"markdown","225921d3":"markdown","18ae82d2":"markdown","f8742f83":"markdown","9e023efa":"markdown","23c6d5b7":"markdown","c8691883":"markdown"},"source":{"e994daba":"!pip install seaborn --upgrade\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nprint(\"Seaborn version used is {}\".format(sns.__version__))\nprint(\"Pandas version used is {}\".format(pd.__version__))\n","d14e31d2":"ted_data = pd.read_csv(\"\/kaggle\/input\/ted-talks\/ted_main.csv\")\nted_data.head()","ab0796ca":"display(ted_data.shape)\ndisplay(ted_data.describe())\ndisplay(ted_data.info())","aa3b91a3":"ted_data.isnull().sum()","922dce0f":"def date_convert(x):\n    return pd.to_datetime(x,unit='s')\n\nted_data['film_date'] = ted_data['film_date'].apply(date_convert)\nted_data['published_date'] = ted_data['published_date'].apply(date_convert)\nted_data['duration'] = ted_data['duration'].apply(lambda x: round(x\/60, 2))\ndisplay(ted_data.head())","8099deb1":"print(\"Average duration = {}\".format(round(ted_data[\"duration\"].mean(), 2)))\n\nprint(\"Median duration = {}\".format(round(ted_data[\"duration\"].median(), 2)))\n\ndisplay(ted_data[[\"main_speaker\", \"title\", \"event\", \"duration\"]].sort_values(\"duration\", ascending=False).head(10))\n\nplt.figure(figsize=(10,5))\nax = sns.barplot(x=\"duration\", y=\"main_speaker\", data=ted_data.sort_values('duration', ascending=False)[:10])\nax.set_title(\"Top duration\", pad=10, fontdict={'fontsize': 20})\nplt.show()","2d107fe9":"ted_data[[\"main_speaker\", \"title\", \"event\", \"duration\"]].sort_values(\"duration\").head(10)","816e2960":"print(\"Average views = {}\".format(round(ted_data[\"views\"].mean(), 2)))\n\nprint(\"Median views = {}\".format(round(ted_data[\"views\"].median(), 2)))\n\ndisplay(ted_data[[\"main_speaker\", \"title\", \"event\", \"views\"]].sort_values('views', ascending=False).head(10))\n\nplt.figure(figsize=(10,5))\nax = sns.barplot(x=\"views\", y=\"main_speaker\", data=ted_data.sort_values('views', ascending=False)[:10])\nax.set_title(\"Top Viewed\", pad=10, fontdict={'fontsize': 20})\nplt.show()","660ea7bd":"print(\"Average comments = {}\".format(round(ted_data[\"comments\"].mean(), 2)))\n\nprint(\"Median comments = {}\".format(round(ted_data[\"comments\"].median(), 2)))\n\nplt.figure(figsize=(10,5))\ndisplay(ted_data[[\"main_speaker\", \"title\", \"event\", \"comments\"]].sort_values('comments', ascending=False).head(10))\nax = sns.barplot(x=\"comments\", y=\"main_speaker\", data=ted_data.sort_values('comments', ascending=False)[:10])\nax.set_title(\"Top Comments\", pad=10, fontdict={'fontsize': 20})\nplt.show()","f75232ff":"sns.pairplot(data=ted_data, vars=[\"views\", \"comments\", \"duration\"])\ndisplay(ted_data[[\"views\", \"comments\", \"duration\"]].corr())","185e6683":"top_viewed = ted_data[[\"name\", \"title\", \"views\"]].sort_values(\"views\", ascending=False).head(10)\ntop_commented = ted_data[[\"name\", \"comments\"]].sort_values(\"comments\", ascending=False).head(10)\n\ntop_viewed.merge(top_commented, on=\"name\")","6ad0733d":"print(\"Total no. of speakers = {}\".format(ted_data[\"speaker_occupation\"].value_counts().sum()))\ndisplay(ted_data[\"speaker_occupation\"].value_counts(normalize=True).head())\n\ndf = pd.DataFrame(data=ted_data[\"speaker_occupation\"].value_counts().head(10))\n\ndf.reset_index(inplace=True)\ndf.columns = [\"speaker_occupation\", \"count\"]\n\nplt.figure(figsize=(15,5))\nax = sns.barplot(data=df, x=\"speaker_occupation\", y=\"count\")\nax.set_title(\"Top speaker occupation\", pad=10, fontdict={'fontsize': 20})\nplt.show()","0e215b44":"months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\nted_data['month'] = ted_data['film_date'].apply(lambda x: months[x.month - 1])\nted_data['year'] = ted_data['film_date'].apply(lambda x: x.year)\ntalk_months = ted_data['month'].value_counts().reset_index()\n\ntalk_months.columns = [\"month\", \"no_of_talks\"]\n\nplt.figure(figsize=(15,5))\nax = sns.barplot(x=\"month\", y=\"no_of_talks\", data=talk_months, order=months)\nax.set_title(\"Number of talks over months\", pad=10, fontdict={'fontsize': 20})\nplt.show()","dd6e4704":"talk_years = ted_data['year'].value_counts().reset_index()\n\ntalk_years.columns = [\"year\", \"no_of_talks\"]\n\nplt.figure(figsize=(18,5))\nax = sns.barplot(x=\"year\", y=\"no_of_talks\", data=talk_years)\nax.set_title(\"Number of talks over years\", pad=10, fontdict={'fontsize': 20})\nplt.show()","a55f0073":"# print first few values in the ratings column to understand its structure.\nfor i in ted_data['ratings'][0:2]:\n    print(\"Value: {}\".format(i))\n    print(\"Type: {}\".format(type(i)))\n    print(\"\\n\")\n","8f114ffa":"import ast\nted_data[\"ratings\"] = ted_data[\"ratings\"].apply(lambda x: ast.literal_eval(x))","4194324a":"for i in ted_data['ratings'][0:2]:\n    print(\"Value: {}\".format(i))\n    print(\"Type: {}\".format(type(i)))\n    print(\"\\n\")","6e09f185":"ratings_list = []\nfor x in ted_data[\"ratings\"]:\n    d = (pd.json_normalize(x)\n    .drop(columns=\"id\")\n    .set_index(keys=\"name\")\n     .T)\n    ratings_list.append(d)\n\nratings_df = pd.concat(ratings_list)\nratings_df.reset_index(drop=True, inplace=True)\nratings_df.head()","263cf1b4":"speaker_ratings_df = pd.concat([ted_data[[\"main_speaker\", \"title\"]], ratings_df], axis=1)","c4ebc993":"display(speaker_ratings_df[[\"main_speaker\", \"title\", \"Funny\"]].sort_values(\"Funny\", ascending=False).head(10))\n\nplt.figure(figsize=(15,5))\nax = sns.barplot(data=speaker_ratings_df.sort_values(\"Funny\", ascending=False).head(10), \n            y=\"main_speaker\", x=\"Funny\", ci=None) # ci=None is needed to remove the error bars\nax.set_title(\"Top Funny talks\", pad=10, fontdict={'fontsize': 20})\nplt.show()","7026fc7d":"display(speaker_ratings_df[[\"main_speaker\", \"title\", \"Confusing\"]].sort_values(\"Confusing\", ascending=False).head(10))\n\nplt.figure(figsize=(15,5))\nax = sns.barplot(data=speaker_ratings_df.sort_values(\"Confusing\", ascending=False).head(10), \n            y=\"main_speaker\", x=\"Confusing\", ci=None) # ci=None is needed to remove the error bars\nax.set_title(\"Top Confusing talks\", pad=10, fontdict={'fontsize': 20})\nplt.show()","a34922d1":"display(speaker_ratings_df[[\"main_speaker\", \"title\", \"Inspiring\"]].sort_values(\"Inspiring\", ascending=False).head(10))\n\nplt.figure(figsize=(15,5))\nax = sns.barplot(data=speaker_ratings_df.sort_values(\"Inspiring\", ascending=False).head(10), \n            y=\"main_speaker\", x=\"Inspiring\", ci=None) # ci=None is needed to remove the error bars\nax.set_title(\"Top Inspiring talks\", pad=10, fontdict={'fontsize': 20})\nplt.show()","d2a2e07f":"# print first few values in the tags column to understand its structure.\nfor i in ted_data['tags'][0:2]:\n    print(\"Value: {}\".format(i))\n    print(\"Type: {}\".format(type(i)))\n    print(\"\\n\")","89e82da7":"ted_data[\"tags\"] = ted_data[\"tags\"].apply(lambda x: ast.literal_eval(x))","1e9bb9ec":"for i in ted_data['tags'][0:2]:\n    print(\"Value: {}\".format(i))\n    print(\"Type: {}\".format(type(i)))\n    print(\"\\n\")","eec9e35f":"tags = ted_data[\"tags\"].explode().value_counts().head(10)\ndisplay(ted_data[\"tags\"].explode().value_counts(normalize=True).head(10))\ndisplay(ted_data[\"tags\"].explode().value_counts(normalize=True).head(10).sum())\nplt.figure(figsize=(15,5))\nax = sns.barplot(x=tags.index, y=tags.values)\nax.set_title(\"Top tags\", pad=10, fontdict={'fontsize': 20})\nplt.show()","53a90195":"<h2>3: Top months and years with most talks<\/h2>","c937b7e1":"<h2>2: Top 10s<\/h2>\n<h3>Top 10 most talked<\/h3>","8cb598fb":"* __Ken Robinson__'s talk titled __Do schools kill creativity__ seems to be most funniest talk with more then double votes then the 2nd funniest talk by __James Veitch__'s titled __This .is what happens when you reply to spam email__\n* __Ken Robinson__ also had another talk titled __Bring on the learning revolution!__ that shows up in the top 10 most funny talks.","9b07fdb2":"Lets see which top 10 viewed talks also show up in the top 10 commented.","31e4c022":"* Lot of interesting insights can be derived from ted_data, outside of what is done here.\n* TED is a very interesting and informative platform and looking at the way it has evloved over years, it will be exciting to see how it grows in future.\n* I will be closing this analysis here. Thanks!\n","a801d6fe":"<h3>Top 10 most comments<\/h3>","1ebb6639":"* Talk titled __I believe we evolved from aquatic apes__ by __Elaine Morgan__ seems to be most confusing for viewers.\n* Interestingly, __Ken Robinson__'s talk __Do schools kill creativity__ also is in the top 10 confusing talk, while it was also the most funniest talk.","1c9be1ce":"<h2>Available features:<\/h2>\n\n* <b>comments:<\/b> Number of comments on the talk.\n* <b>description:<\/b> A quick description of the talk.\n* <b>duration:<\/b> Duration of the talk in seconds.\n* <b>event:<\/b> TED or TEDx, and the year the evnt took place.\n* <b>film_date:<\/b> UNIX timestamp when the talk was filmed.\n* <b>lanuages:<\/b> Number of languages the talk is available in.\n* <b>main_speaker:<\/b> Number of comments on the talk.\n* <b>name:<\/b> Name of the speaker and the title of the talk.\n* <b>num_speaker:<\/b> Number of speakers on the talk.\n* <b>published_date:<\/b> UNIX timestamp when the talk was published on ted.com.\n* <b>ratings:<\/b> A dictionary of ratings like funny, confusing, etc on the talk.\n* <b>related_talks:<\/b> A list of related talks.\n* <b>speaker_occupation:<\/b> Occuation of the speaker.\n* <b>tags:<\/b> Tags assocaited with the talk.\n* <b>title:<\/b> Title of the talk.\n* <b>url:<\/b> URL to the talk.\n* <b>views:<\/b> Number of views for the talk.\n","ca0887bb":"* There are 2550 rows and 17 columns.\n* **speaker_occupation** column have 6 missing values.\n\n<h3>Next:<\/h3>\n\n* Convert the UNIX timestamp to datetime format.\n* Convert the duration from seconds to mins.","3067b866":"<h2>4: Top ratings<\/h2>","410cef36":"* Once again here __Ken Robinson__'s talk seems to be most inspiring, followed closely by __Simon Sinek__'s talk titled __How great leaders inspire action__.\n* __Steve Jobs__'s talk __How to live before you die__ is also amongst the top 10 inspiring talks.","a9118759":"* Apparently looks like the __ratings__ columns has list in it, but the data type for it shows to be string.\n* So, we first we need to convert this into a list format.","7698c296":"Lets see which are the top Funny, top Confusing and top Inspiring talks.","71e0eecd":"<h2>1: Quick look at the data<\/h2>","4c5c55fc":"* __Writers__ seem to be most popular occupation of the speakers, followed by __Artist__, __Designer__, __Journalist__ and __Entrepreneur__.\n* But still __Writers__ seem to represent only about __1.7% of the total 2544__ total speakers.","d2d4fa40":"* Most of the talks seem to happen in the month of February, followed by March.\n* January and August seem to be the least popular for talks to be filmed.","a2166cb9":"<h3>Top 10 most viewed<\/h3>","6fd4a2b2":"* TED talks seem to have increased drmatically from 2008 onwards.","25f71256":"* As expected, out of top 10 between most viewed and most commented, 4 of them are common.\n* The 4 talks came from __Ken Robinson__, __Amy Cuddy__, __Simon Sinek__ and __Jill Bolte Taylor__.","f565824d":"* The most views came from __Ken Robinson__ for title named \"__Do schools kill creativity?__\", with almost __47 million__ views, which is huge when compared to average views of about 1.7 million, and a median of about 1.12 million.\n* At second place is __Amy Cuddy__'s talk, titled \"__Your body language may shape who you are__\" with __43 million__ views.\n* All of the top viewed talks came from actual TED talks hosted at various TED shows globally.","225921d3":"* From the correlation table and pair plot, we can see that __views and comments have a corr factor of 0.5, suggesting medium to strong correlation__.\n* While duration have very weak correlation to views and comments, suggesting longer talks don't seem to gather more attention from the audience.","18ae82d2":"* Now the ratings column is converted to a list.\n* Lets create another dataframe for ratings.","f8742f83":"* The most commented talk came from __Richard Dawkins__ for the talk titled \"__Militant atheism__\" hosted at TED in 2002, with 6404 comments, which is big compared to average comments of 191, and median of 118.\n* Quite a few of the top viewed talks also seem to have top comments on them, signalling that more views does attract more comments, as expected.\n<hr>\n\nLets see if there is any correlation between views, comments and duration.","9e023efa":"* Knowing that on an average most TED talks are usually about 18 mins long, __average of 13.7 mins__ and __median of 14.1 mins__ for the entore dataset seems a little lower.\n* Having talks that over an hour are uncommon.\n* The longest talk comes from __Douglas Adams__ for title named __Parrots, the universe and everything__, timed at about 87 mins. This is actually not a TED talk at all, since it was given at the University of California.\n* Infact most of the top duration talks aren't TED talks as seen from the _event_ column. These talks were just hosted on ted.com website.\n* The smallest talk came from __Murray Gell-Mann__ for title named __The ancestor of language__, timed at about 2.25 mins.","23c6d5b7":"* Apparently,tags column has a list but shows up as str type.\n* Lets convert it to list type first.","c8691883":"* So, most talks seem to be coming __Technology__ category, followed by __Science__, __Global issues__ and __Culture__.\n* Still, top 10 tags seem to account for only 22% of the total categories."}}