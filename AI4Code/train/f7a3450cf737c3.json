{"cell_type":{"8a487bfe":"code","905b17bd":"code","b78350d1":"code","5b37a5b7":"code","c4a0dc19":"code","e4242566":"code","59140eaa":"code","91426498":"code","dd7497f3":"code","9f21b4b3":"code","f2cdd0d7":"code","f89e7a6d":"code","2d7fb0e7":"code","fb6092c5":"code","ce5b901d":"code","2614cd6d":"code","eda94aa9":"code","abee8ce3":"code","709f1fd3":"code","08db16f7":"code","0c20e1d1":"code","be7899af":"code","a4d3c2b6":"code","4c6c6ca9":"code","a2c5a20d":"code","8af9af8c":"code","83055a0c":"code","58776712":"code","0d9d2034":"markdown"},"source":{"8a487bfe":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \nimport zipfile\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom fastai.vision import *\nimport cv2\nimport torch\nfrom matplotlib import pyplot as plt\nfrom pathlib import Path\nimport matplotlib\nimport shutil\nfrom tqdm import tqdm_notebook as tqdm\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","905b17bd":"import PIL","b78350d1":"#https:\/\/www.kaggle.com\/paulorzp\/rle-functions-run-lenght-encode-decode\ndef mask2rle(img):\n    '''\n    img: numpy array, 1 - mask, 0 - background\n    Returns run length as string formated\n    '''\n    pixels= img.T.flatten()\n    pixels = np.concatenate([[0], pixels, [0]])\n    runs = np.where(pixels[1:] != pixels[:-1])[0] + 1\n    runs[1::2] -= runs[::2]\n    return ' '.join(str(x) for x in runs)\n \ndef rle2mask(mask_rle,shape=(1600,256)):\n    '''\n    mask_rle: run-length as string formated (start length)\n    shape: (width,height) of array to return \n    Returns numpy array, 1 - mask, 0 - background\n\n    '''\n    s = mask_rle.split()\n    starts, lengths = [np.asarray(x, dtype=int) for x in (s[0:][::2], s[1:][::2])]\n    starts -= 1\n    ends = starts + lengths\n    img = np.zeros(shape[0]*shape[1], dtype=np.uint8)\n    for lo, hi in zip(starts, ends):\n        img[lo:hi] = 1\n    return img.reshape(shape).T\ndef multiplerle2mask(mask_rle_row,shape=(1600,256)):\n    '''\n    mask_rle: run-length as string formated (start length)\n    shape: (width,height) of array to return \n    Returns numpy array, 1 - mask, 0 - background\n\n    '''\n    img = np.zeros(shape[0]*shape[1], dtype=np.uint8)\n    if(mask_rle_row['has_rle'] > 0):\n        for i in mask_rle_row.index[:-1]:\n            class_id = int(i)\n            if(not pd.isnull(mask_rle_row[i])):\n                s = mask_rle_row[i].split()\n                starts, lengths = [np.asarray(x, dtype=int) for x in (s[0:][::2], s[1:][::2])]\n                starts -= 1\n                ends = starts + lengths\n                for lo, hi in zip(starts, ends):\n                    img[lo:hi] = class_id\n    return img.reshape(shape).T","5b37a5b7":"def count_masks(x):\n#     print(x,x[0])\n#     print(pd.isnull(x[0]))\n    count = 0\n    if not pd.isnull(x[0]) : count = count + 1\n    if not pd.isnull(x[1]) : count = count + 1\n    if not pd.isnull(x[2]) : count = count + 1\n    if not pd.isnull(x[3]) : count = count + 1\n    return count","c4a0dc19":"train_df = pd.read_csv(\"\/kaggle\/input\/train.csv\")","e4242566":"train_df.head()","59140eaa":"train_df['ClassId'] = train_df['ImageId_ClassId'].apply(lambda x: x.split(\"_\")[1])","91426498":"train_df['ImageName'] = train_df['ImageId_ClassId'].apply(lambda x: x.split(\"_\")[0])","dd7497f3":"train_df.head()","9f21b4b3":"train_df_pivot = train_df.pivot(index='ImageName',columns='ClassId',values = 'EncodedPixels')","f2cdd0d7":"train_df_pivot['has_rle'] = train_df_pivot.apply(lambda row: count_masks(row), axis = 1)","f89e7a6d":"train_df_pivot","2d7fb0e7":"train_df_pivot.has_rle.value_counts()","fb6092c5":"train_df_pivot[train_df_pivot['has_rle']==1].count()","ce5b901d":"test_entry = train_df_pivot.iloc[0]","2614cd6d":"test_entry","eda94aa9":"image_path = Path(\"\/kaggle\/input\/train_images\")","abee8ce3":"img = open_image(str(Path(\"\/kaggle\/input\/train_images\")\/test_entry.name))","709f1fd3":"mask_paths = Path(\".\/train_masks\")","08db16f7":"def mask_name(name):\n    name = Path(name)\n    return Path(name.stem+\"_mask.png\")","0c20e1d1":"mask_paths\/mask_name(train_df_pivot.iloc[0].name)","be7899af":"import os\nos.makedirs(mask_paths)","a4d3c2b6":"temp_mask = multiplerle2mask(train_df_pivot.iloc[0])\nPIL.Image.fromarray(temp_mask).save('test.png')","4c6c6ca9":"mask = open_mask('test.png')","a2c5a20d":"mask2rle(mask.data.numpy()) , train_df_pivot.iloc[0]['1']","8af9af8c":"z = zipfile.ZipFile(\"masks.zip\",\"w\",zipfile.ZIP_DEFLATED)\nfor name,row in tqdm(train_df_pivot.iterrows()):\n    temp_mask = multiplerle2mask(row)\n    mask_file_name = mask_name(name)\n    PIL.Image.fromarray(temp_mask).save(mask_file_name)\n#     matplotlib.image.imsave(mask_file_name, temp_mask)\n    z.write(mask_file_name)\n    os.remove(mask_file_name)\nz.printdir()\nz.close()\n","83055a0c":"# shutil.make_archive(\"masks.zip\", 'zip', \"train_masks\")","58776712":"# SegmentationItemList.label_from_func??","0d9d2034":"<a href=\"masks.zip\"> Masks <\/a>"}}