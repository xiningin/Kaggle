{"cell_type":{"c3262aae":"code","55489e2e":"code","c6049712":"code","56e0598c":"code","fdc66422":"code","f6afbbe2":"code","3b1042fc":"code","0be07615":"code","b843f283":"code","eb85054e":"code","2a46ad13":"code","a79a42eb":"code","c42d53db":"code","8aeaa92d":"code","59a2da3a":"code","a44fdd1a":"code","bc75f012":"code","034a42e2":"code","ebe62a52":"code","5237502a":"code","6f67ef18":"code","6d746e9e":"code","a695fb39":"code","9e1cdb55":"code","69ce475f":"code","cfd363a1":"code","b10a7ec6":"code","2718f9d3":"code","3fd60a9f":"code","cd87a0ff":"code","4fbf3216":"code","c44bb131":"code","ea2a38e1":"code","0f748906":"code","6a2f4ab7":"code","d6261de2":"code","c758fa08":"code","b9c63a97":"code","2ea50c51":"code","844be1c4":"code","3c02ee4e":"code","c0e0e43c":"code","1ffcb854":"code","e4c5b501":"code","0a0d7677":"code","95b4f5dd":"code","82265cc6":"code","472dd340":"code","959ff573":"code","0d0ddb3c":"code","523ff958":"code","26115aa7":"code","9186fbe8":"code","9fd00b1a":"code","7c76ea6f":"code","cf83feec":"code","70932e0f":"code","52da17d7":"code","f6f039bc":"code","3d40f573":"code","ea5363c3":"code","eb3fce07":"code","5cb783c3":"code","16422dfb":"code","1f9a06a0":"code","497e4837":"markdown","0b6adf9b":"markdown","b324e957":"markdown","50ea0409":"markdown","8f450ef4":"markdown","332ab3a5":"markdown","f0b1118b":"markdown","cf158529":"markdown","e81dfaf3":"markdown","468e9a38":"markdown","cb3d6c96":"markdown","8e825b36":"markdown","d46a509d":"markdown","d5658698":"markdown","7476944e":"markdown","1bc65106":"markdown","b59004cd":"markdown","82ee9cd9":"markdown","d3326d86":"markdown","d5cfe591":"markdown","f3a5fa6d":"markdown","88328da4":"markdown","ac32aa53":"markdown","ae001b76":"markdown","0bf68c25":"markdown","7c32835b":"markdown","b9a82698":"markdown","4f739fc9":"markdown","2610374f":"markdown","8882ddd7":"markdown","4c9b89fd":"markdown","c9ad5c6a":"markdown","27e8dd77":"markdown","bc67ac33":"markdown"},"source":{"c3262aae":"pip install geopy","55489e2e":"pip install lxml","c6049712":"pip install requests","56e0598c":"pip install BeautifulSoup4","fdc66422":"import numpy as np # library to handle data in a vectorized manner\nimport pandas as pd # library for data analsysis\nimport requests   # library to handle requests\nfrom bs4 import BeautifulSoup\nimport json # library to handle JSON files\n\nprint('Libraries imported.')","f6afbbe2":"#get the wikipedia page html and parse it\n\nd = pd.read_html('https:\/\/www.geonames.org\/postalcode-search.html?q=Edmonton&country=CA&adminCode1=AB')\n\n","3b1042fc":"len(d)  #shows there are 3 tables on the page","0be07615":"df = d[2] #get the 3rd table\ndf","b843f283":"df.drop(df.columns[0], axis=1, inplace = True) \ndf","eb85054e":"# getting latitudes from the Place column\nlist = df[\"Place\"].tolist()  #make \"place\" a list\ndel list[::2]                #remove every second elemnt to leave just coordinates\nlist","2a46ad13":"df1 = df.iloc[::2]   #delete every other row in df\n\ndf1","a79a42eb":"df2 = df1[:-1]\ndf2","c42d53db":"df2['Coordinates'] = list\ndf2.reset_index(drop=True, inplace=True)\ndf2","8aeaa92d":"df3 = pd.DataFrame(df2.Coordinates.str.split('\/',1).tolist(),\n                                   columns = ['Latitude','Longitude'])\ndf3","59a2da3a":"edmonton = pd.concat([df2, df3], axis=1)\nedmonton","a44fdd1a":"edmonton.drop(['Country', 'Admin1', 'Admin2', 'Admin3', 'Coordinates'], axis=1, inplace = True) \nedmonton.rename(columns={'Place': 'Neighborhood'}, inplace=True)\n\nedmonton","bc75f012":"edmonton[['Latitude', 'Longitude']] = edmonton[['Latitude', 'Longitude']].astype(float)","034a42e2":"edmonton.dtypes","ebe62a52":"\nimport json # library to handle JSON files\n\n#!conda install -c conda-forge geopy --yes # uncomment this line if you haven't completed the Foursquare API lab\nfrom geopy.geocoders import Nominatim # convert an address into latitude and longitude values\n\nimport requests # library to handle requests\nfrom pandas.io.json import json_normalize # tranform JSON file into a pandas dataframe\n\n# Matplotlib and associated plotting modules\nimport matplotlib.cm as cm\nimport matplotlib.colors as colors\n\n# import k-means from clustering stage\nfrom sklearn.cluster import KMeans\n\n#!conda install -c conda-forge folium=0.5.0 --yes # uncomment this line if you haven't completed the Foursquare API lab\nimport folium # map rendering library\n\nprint('Libraries imported.')","5237502a":"#using geopy library to get latitude and longitude values of Edmonton city\n\naddress = 'Edmonton, Canada'\n\ngeolocator = Nominatim(user_agent=\"edm_explorer\")\nlocation = geolocator.geocode(address)\nlatitude = location.latitude\nlongitude = location.longitude\nprint('The geograpical coordinate of Edmonton are {}, {}.'.format(latitude, longitude))","6f67ef18":"# create map of Edmonton using latitude and longitude values\nmap_edmonton = folium.Map(location=[latitude, longitude], zoom_start=10)\n\n# add markers to map\nfor lat, lng, code, neighborhood in zip(edmonton['Latitude'], edmonton['Longitude'], edmonton['Code'], edmonton['Neighborhood']):\n    label = '{}, {}'.format(neighborhood, code)\n    label = folium.Popup(label, parse_html=True)\n    folium.CircleMarker(\n        [lat, lng],\n        radius=5,\n        popup=label,\n        color='blue',\n        fill=True,\n        fill_color='#3186cc',\n        fill_opacity=0.7,\n        parse_html=False).add_to(map_edmonton)  \n    \nmap_edmonton","6d746e9e":"CLIENT_ID = '4MZ4U1YKCDSQCP5CGALCWZYFTEU0GLKTJ1UBLYDD15CQZ1VI' # your Foursquare ID\nCLIENT_SECRET = 'AI505REPCBBLDK4VR3MQASWG2LKOAL2Z3LZ4JO1RJUIEQMCK' # your Foursquare Secret\nVERSION = '20191213' # Foursquare API version\n\nprint('Your credentails:')\nprint('CLIENT_ID: ' + CLIENT_ID)\nprint('CLIENT_SECRET:' + CLIENT_SECRET)","a695fb39":"# get the url\nLIMIT = 100 # limit of number of venues returned by Foursquare API\nradius = 500 # define radius\nneighborhood_latitude = 53.456\nneighborhood_longitude = -113.521\n# create URL\nurl = 'https:\/\/api.foursquare.com\/v2\/venues\/explore?&client_id=4MZ4U1YKCDSQCP5CGALCWZYFTEU0GLKTJ1UBLYDD15CQZ1VI&client_secret=AI505REPCBBLDK4VR3MQASWG2LKOAL2Z3LZ4JO1RJUIEQMCK&v=20191213&ll=53.456,-113.521&radius=500&limit=100'.format(\n    CLIENT_ID, \n    CLIENT_SECRET, \n    VERSION, \n    neighborhood_latitude, \n    neighborhood_longitude, \n    radius, \n    LIMIT)\nurl # display URL","9e1cdb55":"#examining the result with the 'get' request:\n\nresults = requests.get(url).json()\nresults","69ce475f":"# defining the function that extracts the category of the venues\n\ndef get_category_type(row):\n    try:\n        categories_list = row['categories']\n    except:\n        categories_list = row['venue.categories']\n        \n    if len(categories_list) == 0:\n        return None\n    else:\n        return categories_list[0]['name']","cfd363a1":"# clean the json and create a pandas dataframe\n\nvenues = results['response']['groups'][0]['items']\n    \nnearby_venues = json_normalize(venues) # flatten JSON\n\n# filter columns\nfiltered_columns = ['venue.name', 'venue.categories', 'venue.location.lat', 'venue.location.lng']\nnearby_venues =nearby_venues.loc[:, filtered_columns]\n\n# filter the category for each row\nnearby_venues['venue.categories'] = nearby_venues.apply(get_category_type, axis=1)\n\n# clean columns\nnearby_venues.columns = [col.split(\".\")[-1] for col in nearby_venues.columns]\n\nnearby_venues.head()","b10a7ec6":"print('{} venues were returned by Foursquare.'.format(nearby_venues.shape[0]))","2718f9d3":"def getNearbyVenues(names, latitudes, longitudes, radius=500):\n    \n    venues_list=[]\n    for name, lat, lng in zip(names, latitudes, longitudes):\n        print(name)\n            \n        # create the API request URL\n        url = 'https:\/\/api.foursquare.com\/v2\/venues\/explore?&client_id={}&client_secret={}&v={}&ll={},{}&radius={}&limit={}'.format(\n            CLIENT_ID, \n            CLIENT_SECRET, \n            VERSION, \n            lat, \n            lng, \n            radius, \n            LIMIT)\n            \n        # make the GET request\n        results = requests.get(url).json()[\"response\"]['groups'][0]['items']\n        \n        # return only relevant information for each nearby venue\n        venues_list.append([(\n            name, \n            lat, \n            lng, \n            v['venue']['name'], \n            v['venue']['location']['lat'], \n            v['venue']['location']['lng'],  \n            v['venue']['categories'][0]['name']) for v in results])\n\n    nearby_venues = pd.DataFrame([item for venue_list in venues_list for item in venue_list])\n    nearby_venues.columns = ['Neighborhood', \n                  'Latitude', \n                  'Longitude', \n                  'Venue', \n                  'Venue Latitude', \n                  'Venue Longitude', \n                  'Venue Category']\n    \n    return(nearby_venues)","3fd60a9f":"edmonton.dtypes","cd87a0ff":"# Running the above function on each neighborhood\n\nedmonton_venues = getNearbyVenues(names=edmonton['Neighborhood'],\n                                   latitudes=edmonton['Latitude'],\n                                   longitudes=edmonton['Longitude']\n                                  )","4fbf3216":"# check the size of the resulting dataframe\nprint(edmonton_venues.shape)\nedmonton_venues.head()","c44bb131":"#check how many venues were returned for each neighborhood\n\nedmonton_venues.groupby('Neighborhood').count()","ea2a38e1":"# to find out how many unique categories can be curated from all the returned values\n\nprint('There are {} uniques categories.'.format(len(edmonton_venues['Venue Category'].unique())))","0f748906":"# one hot encoding\nedmonton_onehot = pd.get_dummies(edmonton_venues[['Venue Category']], prefix=\"\", prefix_sep=\"\")\n\n# add neighborhood column back to dataframe\nedmonton_onehot['Neighborhood'] = edmonton_venues['Neighborhood'] \n\n# move neighborhood column to the first column\n\nedmonton_onehot","6a2f4ab7":"# the new dataframe size:\nedmonton_onehot.shape","d6261de2":"edmonton_grouped = edmonton_onehot.groupby('Neighborhood').mean().reset_index()\nedmonton_grouped","c758fa08":"# see the size\nedmonton_grouped.shape","b9c63a97":"#print each neighborhood along with the top 10 most common venues\n\nnum_top_venues = 10\n\nfor hood in edmonton_grouped['Neighborhood']:\n    print(\"----\"+hood+\"----\")\n    temp = edmonton_grouped[edmonton_grouped['Neighborhood'] == hood].T.reset_index()\n    temp.columns = ['venue','freq']\n    temp = temp.iloc[1:]\n    temp['freq'] = temp['freq'].astype(float)\n    temp = temp.round({'freq': 2})\n    print(temp.sort_values('freq', ascending=False).reset_index(drop=True).head(num_top_venues))\n    print('\\n')","2ea50c51":"# writing a function to sort the venues in descending order\n\ndef return_most_common_venues(row, num_top_venues):\n    row_categories = row.iloc[1:]\n    row_categories_sorted = row_categories.sort_values(ascending=False)\n    \n    return row_categories_sorted.index.values[0:num_top_venues]","844be1c4":"# create the new dataframe and display the top 10 venues for each neighborhood\n\nnum_top_venues = 10\n\nindicators = ['st', 'nd', 'rd']\n\n# create columns according to number of top venues\ncolumns = ['Neighborhood']\nfor ind in np.arange(num_top_venues):\n    try:\n        columns.append('{}{} Most Common Venue'.format(ind+1, indicators[ind]))\n    except:\n        columns.append('{}th Most Common Venue'.format(ind+1))\n\n# create a new dataframe\nneighborhoods_venues_sorted = pd.DataFrame(columns=columns)\nneighborhoods_venues_sorted['Neighborhood'] = edmonton_grouped['Neighborhood']\n\nfor ind in np.arange(edmonton_grouped.shape[0]):\n    neighborhoods_venues_sorted.iloc[ind, 1:] = return_most_common_venues(edmonton_grouped.iloc[ind, :], num_top_venues)\n\nneighborhoods_venues_sorted","3c02ee4e":"# shape of the sorted data\nneighborhoods_venues_sorted.shape","c0e0e43c":"# set number of clusters\nkclusters = 5\n\nedmonton_grouped_clustering = edmonton_grouped.drop('Neighborhood', 1)\n\n# run k-means clustering\nkmeans = KMeans(n_clusters=kclusters, random_state=0).fit(edmonton_grouped_clustering)\n\n# check cluster labels generated for each row in the dataframe\nkmeans.labels_[0:10] ","1ffcb854":"# Let's create a new dataframe that includes the clusters, as well as the top 10 venues for each neighborhood\n# add clustering labels\nneighborhoods_venues_sorted.insert(0, 'Cluster Labels', kmeans.labels_)\n\nedmonton_merged = edmonton\n\n# merge edmonton_grouped with edmonton_data to add latitude\/longitude for each neighborhood\nedmonton_merged = edmonton_merged.join(neighborhoods_venues_sorted.set_index('Neighborhood'), on='Neighborhood')\n\nedmonton_merged # check the last columns!","e4c5b501":"edmonton_merged.dropna(subset=[\"Cluster Labels\"], axis=0, inplace=True)  #to drop neighborhoods that couldn't get in any cluster (NaN)\nedmonton_merged[['Cluster Labels']] = edmonton_merged[['Cluster Labels']].astype(int)  # to change the data type in the 'Cluster label' column","0a0d7677":"# create map\nmap_clusters = folium.Map(location=[latitude, longitude], zoom_start=11)\n\n# set color scheme for the clusters\nx = np.arange(kclusters)\nys = [i + x + (i*x)**2 for i in range(kclusters)]\ncolors_array = cm.rainbow(np.linspace(0, 1, len(ys)))\nrainbow = [colors.rgb2hex(i) for i in colors_array]\n\n# add markers to the map\nmarkers_colors = []\nfor lat, lon, poi, cluster in zip(edmonton_merged['Latitude'], edmonton_merged['Longitude'], edmonton_merged['Neighborhood'], edmonton_merged['Cluster Labels']):\n    label = folium.Popup(str(poi) + ' Cluster ' + str(cluster), parse_html=True)\n    folium.CircleMarker(\n        [lat, lon],\n        radius=5,\n        popup=label,\n        color=rainbow[cluster-1],\n        fill=True,\n        fill_color=rainbow[cluster-1],\n        fill_opacity=0.7).add_to(map_clusters)\n       \nmap_clusters","95b4f5dd":"del list","82265cc6":"edmonton_merged.loc[edmonton_merged['Cluster Labels'] == 0, edmonton_merged.columns[[0]+list(range(5,edmonton_merged.shape[1]))]]","472dd340":"edmonton_merged.loc[edmonton_merged['Cluster Labels'] == 1, edmonton_merged.columns[[0]+list(range(5,edmonton_merged.shape[1]))]]","959ff573":"edmonton_merged.loc[edmonton_merged['Cluster Labels'] == 2, edmonton_merged.columns[[0]+list(range(5,edmonton_merged.shape[1]))]]","0d0ddb3c":"edmonton_merged.loc[edmonton_merged['Cluster Labels'] == 3, edmonton_merged.columns[[0]+list(range(5,edmonton_merged.shape[1]))]]","523ff958":"edmonton_merged.loc[edmonton_merged['Cluster Labels'] == 4, edmonton_merged.columns[[0]+list(range(5,edmonton_merged.shape[1]))]]","26115aa7":"# Import libraries\nimport numpy as np # library to handle data in a vectorized manner\nimport json # library to handle JSON files\nimport pandas as pd\n\n!conda install -c conda-forge geopy --yes \nfrom geopy.geocoders import Nominatim # convert an address into latitude and longitude values\n\nimport requests # library to handle requests\nfrom pandas.io.json import json_normalize # tranform JSON file into a pandas dataframe\n\n# Matplotlib and associated plotting modules\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm\nimport matplotlib.colors as colors\n\nfrom bs4 import BeautifulSoup\n\n# Import k-means from clustering stage\nfrom sklearn.cluster import KMeans\n\n!conda install -c conda-forge folium=0.5.0 --yes \nimport folium # map rendering library\n\nprint('Libraries imported.')\n","9186fbe8":"# Explore a plot of this data (a violin plot is used which is a density estimation of the underlying distribution).\n# The top 3 venue types as specified by the client for each neighborhood are used for the plotting.\n\nimport seaborn as sns\n\nfig = plt.figure(figsize=(50,25))\nsns.set(font_scale=1.1)\n\nax = plt.subplot(3,1,1)\nsns.violinplot(x=\"Neighborhood\", y=\"French Restaurant\", data=edmonton_onehot, cut=0);\nplt.xlabel(\"\")\n\nax = plt.subplot(3,1,2)\nsns.violinplot(x=\"Neighborhood\", y=\"Grocery Store\", data=edmonton_onehot, cut=0);\nplt.xlabel(\"\")\n\nplt.subplot(3,1,3)\nsns.violinplot(x=\"Neighborhood\", y=\"Farmers Market\", data=edmonton_onehot, cut=0);\n\nax.text(-1.0, 3.1, 'Frequency distribution for the top 3 venue categories for each neighborhood (click to enlage)', fontsize=60)\nplt.savefig (\"Distribution_Frequency_Venues_3_categories.png\", dpi=240)","9fd00b1a":"# function to repeat the exploring process to all the neighborhoods in Edmonton for specific category IDs\nimport urllib\ndef getNearbyVenues2(names, latitudes, longitudes, radius=5000, categoryIds=''):\n    try:\n        venues_list=[]\n        for name, lat, lng in zip(names, latitudes, longitudes):\n            #print(name)\n\n            # create the API request URL\n            url = 'https:\/\/api.foursquare.com\/v2\/venues\/search?&client_id={}&client_secret={}&v={}&ll={},{}&radius={}&limit={}'.format(CLIENT_ID, CLIENT_SECRET, VERSION, lat, lng, radius, LIMIT)\n\n            if (categoryIds != ''):\n                url = url + '&categoryId={}'\n                url = url.format(categoryIds)\n\n            # make the GET request\n            response = requests.get(url).json()\n            results = response[\"response\"]['venues']\n\n            # return only relevant information for each nearby venue\n            for v in results:\n                success = False\n                try:\n                    category = v['categories'][0]['name']\n                    success = True\n                except:\n                    pass\n\n                if success:\n                    venues_list.append([(\n                        name, \n                        lat, \n                        lng, \n                        v['name'], \n                        v['location']['lat'], \n                        v['location']['lng'],\n                        v['categories'][0]['name']\n                    )])\n\n        nearby_venues2 = pd.DataFrame([item for venue_list in venues_list for item in venue_list])\n        nearby_venues.columns = ['Neighborhood', \n                  'Latitude', \n                  'Longitude', \n                  'Venue', \n                  'Venue Latitude', \n                  'Venue Longitude', \n                  'Venue Category']\n    \n    except:\n        print(url)\n        print(response)\n        print(results)\n        print(nearby_venues2)\n\n    return(nearby_venues2)","7c76ea6f":"# Use category id 4bf58dd8d48988d10c941735 to only get all french restaurant venues in Edmonton\nedmonton_venues_frenchR = getNearbyVenues2(names=edmonton['Neighborhood'], latitudes=edmonton['Latitude'], longitudes=edmonton['Longitude'], radius=1000, categoryIds='4bf58dd8d48988d10c941735')\nedmonton_venues_frenchR","cf83feec":"frenchR_grouped = edmonton_venues_frenchR.groupby([0]).mean().reset_index()\nfrenchR_grouped","70932e0f":"edmonton1 = edmonton.set_index('Neighborhood')\nedmonton1","52da17d7":"edmonton2 = edmonton1.loc[['Edmonton (Central Londonderry)', 'Edmonton (East Castledowns)', 'Edmonton (Meadows)', 'Edmonton (North Capilano)', 'Edmonton (Riverbend)', 'Edmonton (SE Capilano \/ West Southeast Industrial \/ East Bonnie Doon)', 'Edmonton (South Bonnie Doon \/ East University)', 'Edmonton (South Industrial)', 'Edmonton (West University \/ Strathcona Place)']]\nedmonton2","f6f039bc":"edmonton2.reset_index(inplace=True)\nedmonton2","3d40f573":"# Use category id 4d4b7105d754a06375d81259 to only get all professional & office venues in Edmonton\nedmonton_venues_offices = getNearbyVenues2(names=edmonton2['Neighborhood'], latitudes=edmonton2['Latitude'], longitudes=edmonton2['Longitude'], radius=1000, categoryIds='4d4b7105d754a06375d81259')\nedmonton_venues_offices","ea5363c3":"offices_grouped = edmonton_venues_offices.groupby([0]).count().reset_index()\noffices_grouped","eb3fce07":"offices_grouped.drop(offices_grouped.columns[[2, 3, 4, 5, 6]], axis=1, inplace=True)\noffices_grouped","5cb783c3":"offices_grouped.columns = ['Neighborhood', 'Number of offices']\noffices_grouped","16422dfb":"offices_grouped.set_index('Neighborhood', inplace=True)\noffices_grouped","1f9a06a0":"offices_grouped.plot(kind='bar')\nplt.title('Bar Chart of the number of offices & professional venues in each chosen neighborhood')\nplt.ylabel('Number of offices')\nplt.xlabel('Neighborhood')\nplt.show()","497e4837":"### Frequency of occurence French Restaurants in all the neighborhoods of Edmonton","0b6adf9b":"#### Examine each cluster and compare discriminating venue categories that distinguish each cluster","b324e957":"Edmonton, capital of Canada's Alberta province, sits on the North Saskatchewan River. The city had a population of 932,546 in 2016, making it Alberta's second-largest city and Canada's fifth-largest municipality. Also in 2016, Edmonton had a metropolitan population of 1,321,426, making it the sixth-largest census metropolitan area (CMA) in Canada. Edmonton is North America's northernmost metropolitan area with a present population over one million. Since I am a resident of Edmonton, I decided to use Edmonton as the research city in my project.\n\nDue to cultural diversity that has been fueled by Canada's generous immigration policies, Edmonton is highly multicultural; more so because Edmonton is the major economic centre for the oil and gas industry. These provide favourable grounds for business opportunities, thus a highly competitive market. So, a careful analysis has to be carried out in order to make informed decisions on starting a new business here. Information derived from this analysis will provide deep knowledge of the neighborhoods that have a competitive edge. The target audience for this analysis are investors who are seeking to start a restaurant business in Edmonton.\n\nEdmonton's cultural diversity also means the city is blessed with restaurants offering an array of international cuisines. In this very competitive market, a potential new French restaurant, ABC Ltd is faced with this problem:\nWhich neighbourhood will be the best location for the new French restaurant? The best locations that will be considered here will be the ones that have relatively few or no French restaurants, better accessibility to raw materials (in this case, ingredients used for cooking), and surrounded by more offices and professional venues.\n","50ea0409":"#### Cluster 5","8f450ef4":"#### Putting that into a *pandas* dataframe","332ab3a5":"### Analyse each of the neighborhoods","f0b1118b":"#### Group rows by neighborhood, by taking the mean of the frequency of occurrence of each category","cf158529":"#### Exploring the first neighborhood, Kaskitayo with coordinates 53.456, -113.521","e81dfaf3":"This reveals the following neighborhoods have at least one french restaurant: North Downtown, North Jasper Place, Central BonnieDoon, South Downtown Fringe, North&East Downtown Fringe.\n\nIt further reduces the list of favourable neighborhoods to 9:\n\n- Central Londonderry\n- East Castledowns\n- Meadows\n- North Capilano\n- Riverbend\n- Capilano\/West Southeast Industrial\n- South BonnieDoon\/East University\n- South Industrial\n- West University\/Stratcona\n\n","468e9a38":"#### Let's find out among the 9 possible locations, which one has the most number offices & professional venues, and visualize this using a bar chart","cb3d6c96":"### Next, we are going to start utilizing the Foursquare API to explore the neighborhoods and segment them","8e825b36":"### Availability of at least French Restaurant in each neighborhood chosen","d46a509d":"### Cluster 4","d5658698":"## A. Introduction","7476944e":"### Exploring all the neighborhoods in Edmonton","1bc65106":"#### Data Collection from geonames data","b59004cd":"The analysis could go further by eliminating every neighborhood that already has at least 1 French Restaurant. ","82ee9cd9":"Now, let's visualize the neighborhoods by creating a map of Edmonton with Neighborhoods superimposed","d3326d86":"### We can now see that the neighborhood, West University\/Strathcona Place is the best location to open a new French restaurant since it has no French Restaurant and has the highest number of offices and professional venues.","d5cfe591":"# Coursera Capstone Project - The Battle of Neighborhoods","f3a5fa6d":"Since the client intends to embark on running a French restaurant, one of the factors in choosing a store location will be absence or scarcity of French restaurants in a neighborhood of interest. I've used a violin plot from the seaborn library - it is a great way to visualise frequency distribution datasets, they display a density estimation of the underlying distribution.","88328da4":"### FourSquare data collection","ac32aa53":"### A.1. Background and Problem Description","ae001b76":"Based on the problem, the following data will be used to solve the problem:\n\n- List of all neighbourhoods in Edmonton. This was retrieved from Canada's geonames data available online on geonames.org. https:\/\/www.geonames.org\/postalcode-search.html?q=Edmonton&country=CA&adminCode1=AB. This data was useful in this analysis in that it will give a big picture of all neighbourhoods available to explore. \n\n- The coordinates of the neighbourhoods and venues which were retrieved from the same geonames data. This was used to map the location of the venues. \n\n- The top 10 Venues of all Edmonton neighbourhoods. This was retrieved form the FourSquare location data. This data was used to cluster neighbourhoods into groups. \n","0bf68c25":"#### Cluster 1","7c32835b":"At this point, we have upto 9 neighborhoods to choose from. We understand that restaurants located around offices and business have a higher probability of getting customers than those that aren't. We can narrow down the present list by selecting the neighborhood that has the highest number of offices and professional venues","b9a82698":"Now, let's visualize the resulting clusters","4f739fc9":"### Clustering the neighbourhoods into 5 clusters using K_means","2610374f":"##### Getting the top 100 venues in a 500m radius:","8882ddd7":"As can be seen from the analysis, based on the presence of French restaurants, the following 12 neighborhoods can be removed from the list of possible locations as they already have a presence of French restaurants:\n- Central Beverly\n- East Southwest Industrial\/South Clareview\n- Ellerslie\n- Glenora\/SW Downtown\n- Heritage Valley\n- Landbank\/Oliver\/East Lake District\n- North Westmount\/West Calder\n- South Downtown and Fringe\n- West Castledowns\n- West Clareview\/East Londonderry\n- West Lake District\n- West Northwest Industries\/Winterburn \n\nFrom the rest of the neighborhoods, based on the factor of nearness to raw materials for the restaurant business, the analysis is based on the availability of Grocery Stores or farmers Markets. \n\nTherefore the following list of 12 neighborhoods will provide a better choice of location of a new French restaurant considering that there is presently very few (or no) French restaurants and because they each have a relatively higher concentration of Grocery Stores or Farmers Markets:\n- Central BonnieDoon\n- Central Londonderry\n- East Castledowns\n- Meadows\n- North Capilano\n- North Jasper Place\n- North&East Downtown Fringe\n- Riverbend\n- Capilano\/West Southeast Industrial\n- South BonnieDoon\/East University\n- South Industrial\n- West University\/Stratcona\n","4c9b89fd":"#### Cluster 2","c9ad5c6a":"### Further analysis : Nearness to offices and professional venues","27e8dd77":"#### Cluster 3","bc67ac33":"## B. Data"}}