{"cell_type":{"fae921e5":"code","05f8ca59":"code","386fa380":"code","24375a95":"code","61229cc8":"code","cf532d19":"code","94aa9f4c":"code","ef0fdd0a":"code","e903251b":"code","9f396c90":"code","04ff85a0":"code","28c5edfc":"code","856a809e":"code","fc2e8268":"code","8d59f3ed":"code","d5bb47dd":"code","cf670a2f":"code","27d0cf80":"code","e2d1e9d2":"code","0d03b6fb":"code","798a4be3":"code","2bc19bb0":"code","07bbe633":"code","00e2a629":"code","2a7440c6":"code","75a9e6c3":"code","839c02bf":"code","f693834e":"markdown","20ad4e47":"markdown","9bbe5b7d":"markdown","13bac8fc":"markdown","88754387":"markdown","6cb89fc3":"markdown","fe42cef9":"markdown","e514f72a":"markdown","95d2e988":"markdown","74a73834":"markdown","69944888":"markdown","488de811":"markdown","b2241d64":"markdown"},"source":{"fae921e5":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\nimport seaborn as sns\nimport math\nfrom scipy import stats\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\nfrom scipy.stats.mstats import winsorize\nfrom sqlalchemy import create_engine\nimport warnings\n\nimport plotly.express as px","05f8ca59":"import pandas as pd\nle_df = pd.read_csv(\"..\/input\/life-expectancy-who\/Life Expectancy Data.csv\")","386fa380":"le_df.info()\n\n#output cut out some of the columns. hacked it.\nle_df[:5].T.head(22)","24375a95":"# I'm going to adjust the columns names and remove extra spacing for ease of use\nle_df.rename(columns = lambda x: x.strip().replace(' ', '_').lower(), inplace=True)\n\n# one column doesn't match our underscoring convention or the Kaggle description. fixing.\nle_df.rename(columns = {'thinness__1-19_years':'thinness_10-19_years'}, inplace=True)\n\nprint((f'Number of columns: {len(le_df.columns)}'))\nle_df.columns\n# that's better","61229cc8":"# checking for nans\nle_df.isnull().sum()","cf532d19":"# will fill nans multiple ways to see what approach is best\nle_df2 = le_df.copy() # will fill by mean\nle_df3 = le_df.copy() # will fill mean by country\nle_df4 = le_df.copy() # will fill by interpolation\n\ncountries = le_df2['country'].unique()\nna_cols = ['life_expectancy', 'adult_mortality', 'alcohol', 'hepatitis_b',\n       'bmi', 'polio', 'total_expenditure','diphtheria', 'gdp', 'population', \n        'thinness_10-19_years', 'thinness_5-9_years', \n        'income_composition_of_resources', 'schooling']\n\n# fill with overall mean\nfor col in na_cols:\n    le_df2[col].fillna(le_df2[col].mean(), inplace=True)\n\n# mean by country\nfor col in na_cols:\n    for country in countries:\n        le_df3.loc[le_df3['country']== country, col] = le_df3.loc[le_df3['country'] == country, col].fillna(\n            le_df3[le_df3['country'] == country][col].mean())\n        \n# interpolated by entire df\n# due to missing values, I did not interpolate by country as there are too many missing values\nfor col in na_cols:\n    le_df4.loc[:,col] = le_df4.loc[:,col].interpolate(limit_direction='both')\n","94aa9f4c":"#printing nulls for each method\ndfs = [le_df, le_df2, le_df3, le_df4]\ndf_names = ['le_df', 'le_df2', 'le_df3', 'le_df4']\n\nfor name, df in zip(df_names, dfs):\n    print('_'*60)\n    print(f'nulls for {name}')\n    print('_'*60)\n    print(df.isnull().sum())","ef0fdd0a":"#plotting each method by column\nplt.figure(figsize=(13,60))\n\nfor i, col in enumerate(na_cols):\n    df = pd.concat([le_df[col], le_df2[col], le_df3[col], le_df4[col]], axis=1)\n\n    plt.subplot(len(na_cols), 3, i+1)\n    plt.bar(['original', 'overall mean', 'mean by ctry', 'interpolate'],df.median(), color=('xkcd:cranberry') )\n    plt.title(f'Mod of {col}')\n    plt.xticks(rotation=45)\n\nplt.tight_layout()\nplt.show()","e903251b":"#let's look at the distributions of our continuous variables\nnum_cols = ['life_expectancy', 'adult_mortality',\n       'infant_deaths', 'alcohol', 'percentage_expenditure', 'hepatitis_b',\n       'measles', 'bmi', 'under-five_deaths', 'polio', 'total_expenditure',\n       'diphtheria', 'hiv\/aids', 'gdp', 'population', 'thinness_10-19_years',\n       'thinness_5-9_years', 'income_composition_of_resources', 'schooling']\n\n# detecting outliers\nplt.figure(figsize=(20,60))\n\nfor i, col in enumerate(num_cols):\n    plt.subplot(len(na_cols), 4, i+1)\n    sns.boxplot(le_df4[col], color=('xkcd:lime'))\n    plt.title(f'{col}', fontsize=18)\n    plt.xlabel('')\n\nplt.tight_layout()\nplt.show()","9f396c90":"# detecting outliers and distribution via histograms\nplt.figure(figsize=(20,60))\n\nfor i, col in enumerate(num_cols):\n    plt.subplot(len(na_cols), 4, i+1)\n    sns.distplot(le_df4[col], color=('xkcd:green'))\n    plt.title(f'Distribution of {col}', fontsize=18)\n    plt.xlabel('')\n    plt.axvline(le_df4.loc[:,col].mean(), color=('xkcd:cranberry')) #red line is the mean\n\nplt.tight_layout()\nplt.show()","04ff85a0":"# dropping mistakes in the data collection per the reasoning above\nadj_le_df4 = le_df4[(le_df4.infant_deaths<1000) & (le_df4.measles<1000) & (le_df4['under-five_deaths']<1000)]\n\n# winsorizations\nadj_le_df4['winz_life_exp'] = winsorize(adj_le_df4['life_expectancy'], (0.10,0.0))\nadj_le_df4['winz_tot_exp'] = winsorize(adj_le_df4['total_expenditure'], (0.0,0.10))\nadj_le_df4['winz_adult_mort'] = winsorize(adj_le_df4['adult_mortality'], (0.0,0.10))\nadj_le_df4['winz_polio'] = winsorize(adj_le_df4['polio'], (0.15,0.0))\nadj_le_df4['winz_diph'] = winsorize(adj_le_df4['diphtheria'], (0.10,0.0))\nadj_le_df4['winz_hepb'] = winsorize(adj_le_df4['hepatitis_b'], (0.15,0.0))\nadj_le_df4['winz_thin_1019_yr'] = winsorize(adj_le_df4['thinness_10-19_years'], (0.0,0.10))\nadj_le_df4['winz_thin_59_yr'] = winsorize(adj_le_df4['thinness_5-9_years'], (0.0,0.10))\nadj_le_df4['winz_income_comp'] = winsorize(adj_le_df4['income_composition_of_resources'], (0.10,0.0))\nadj_le_df4['winz_schooling'] = winsorize(adj_le_df4['schooling'], (0.10,0.05))\nadj_le_df4['winz_under5_deaths'] = winsorize(adj_le_df4['under-five_deaths'], (0.0, 0.20))\nadj_le_df4['winz_infant_deaths'] = winsorize(adj_le_df4['infant_deaths'], (0.0, 0.15))\nadj_le_df4['winz_hiv\/aids'] = winsorize(adj_le_df4['hiv\/aids'], (0.0, 0.21))\nadj_le_df4['winz_measles'] = winsorize(adj_le_df4['measles'], (0.0, 0.17))\n\n\n# transformations\nadj_le_df4['winz_log_gdp'] = winsorize(np.log(adj_le_df4['gdp']), (0.10, 0.0))\nadj_le_df4['winz_log_population'] = winsorize(np.log(adj_le_df4['population']), (0.10, 0.0))\nadj_le_df4['log_pct_exp'] = np.log(adj_le_df4['percentage_expenditure'])","28c5edfc":"# reinspecting to see how outliers were handled\nadj_num_cols = [ 'winz_life_exp', 'winz_tot_exp',\n       'winz_adult_mort', 'winz_polio', 'winz_diph', 'winz_hepb',\n       'winz_thin_1019_yr', 'winz_thin_59_yr', 'winz_income_comp',\n       'winz_schooling', 'winz_under5_deaths', 'winz_infant_deaths',\n       'winz_log_gdp', 'winz_log_population', 'log_pct_exp', 'winz_hiv\/aids',\n       'winz_measles']\n\nplt.figure(figsize=(20,90))\n\nfor i, col in enumerate(adj_num_cols):\n    plt.subplot(len(adj_num_cols), 6, i+1)\n    sns.boxplot(y=adj_le_df4[col], color=('xkcd:purple'))\n    plt.title(f'{col}', fontsize=18)\n    plt.ylabel('')\n\nplt.tight_layout()\nplt.show()\n# all outliers have been dealt with","856a809e":"# correlation heat map\nadj_corr = adj_le_df4[['year', 'status', 'country', 'winz_life_exp', 'winz_tot_exp',\n       'winz_adult_mort', 'winz_polio', 'winz_diph', 'winz_hepb', 'bmi',\n       'winz_thin_1019_yr', 'winz_thin_59_yr', 'winz_income_comp',\n       'winz_schooling', 'winz_under5_deaths', 'winz_infant_deaths',\n       'winz_log_gdp', 'winz_log_population', 'log_pct_exp', 'winz_hiv\/aids',\n       'winz_measles']].corr()\n\nplt.figure(figsize=(15,12))\nsns.heatmap(adj_corr, square=True, annot=True, cmap='viridis');\n","fc2e8268":"#Let's take a visual of these correlations\nplt.figure(figsize=(8,6))\n\nplt.subplot(2,2,1)\n# Turns out winz_hiv\/aids is actually a categorical variable, so I am using a bar plot\nax = sns.barplot(x='winz_hiv\/aids', y='winz_life_exp', data=adj_le_df4, color='magenta')\nax.set_ylim(30,80)\n\nplt.subplot(2,2,2)\nax1 = sns.scatterplot(x='winz_life_exp', y='winz_adult_mort', data=adj_le_df4, color='magenta')\n\nplt.subplot(2,2,3)\nax2 = sns.scatterplot(x='winz_life_exp', y='winz_income_comp', data=adj_le_df4, color='magenta')\n\nplt.subplot(2,2,4)\nax3 = sns.scatterplot(x='winz_life_exp', y='winz_schooling', data=adj_le_df4, color='magenta')\n\nplt.tight_layout()\nplt.show;","8d59f3ed":"# Comparing Developed vs Developing\n# In order to do this, we will need to correct the incorrectly labeled countries\n\n# List of incorrectly classified countries\nincorr_status = ['Canada', 'Chile', 'Greece', 'Finland', 'France', 'Israel', 'Republic of Korea']\n\n# Loop through and change them to Developed\nfor country in incorr_status:\n    adj_le_df4['status'].loc[adj_le_df4.country == country] = 'Developed'\n\n# Verify\nprint(adj_le_df4[adj_le_df4['status']=='developed']['country'].unique()) \n# Verified;","d5bb47dd":"# Plotting Developed v Developing\nplt.figure(figsize=(8,5))\n\nsns.barplot(y='status', x='winz_life_exp', data=adj_le_df4, orient='h', \n            palette = ['xkcd:cranberry','xkcd:neon green'], errcolor='grey');\nplt.title('Life Expectancy by Country Status', fontsize=20)\nplt.xlabel('Life Expectancy (Winsorized)')\nplt.ylabel('');","cf670a2f":"# Differences in life expectancy seem drastic\n# Running an independent T Test to see if results are significant\nstats.ttest_ind(adj_le_df4[adj_le_df4['status']=='Developed']['winz_life_exp'],\n               adj_le_df4[adj_le_df4['status']=='Developing']['winz_life_exp'])","27d0cf80":"# trying my hand at a sort of sickness ratio and health ratio\nadj_le_df4['sickness_index'] = ((adj_le_df4['winz_infant_deaths']+adj_le_df4['winz_measles']+\n                                adj_le_df4['winz_under5_deaths']+\n                                 adj_le_df4['winz_hiv\/aids'])\/4)*((adj_le_df4['winz_thin_59_yr']+\n                                                                   adj_le_df4['winz_thin_1019_yr'])\/2)\n\nadj_le_df4['health_index'] = (adj_le_df4['winz_measles']+adj_le_df4['winz_polio']+\n                                 adj_le_df4['winz_diph'])\/3\n\n# Creating binary variable for Developed and Developing replacing Status\nadj_le_df4 = pd.concat([adj_le_df4, pd.get_dummies(adj_le_df4.status)], axis=1)","e2d1e9d2":"# dropping non-transformed columns and low correlation items\nadj_le_df4.drop(['status', 'life_expectancy', 'adult_mortality',\n       'infant_deaths', 'percentage_expenditure', 'hepatitis_b',\n       'measles', 'under-five_deaths', 'polio', 'total_expenditure',\n       'diphtheria', 'hiv\/aids', 'gdp', 'population', 'thinness_10-19_years',\n       'thinness_5-9_years', 'income_composition_of_resources', 'schooling', 'winz_tot_exp',\n        'winz_hepb', 'Developing', 'winz_log_population', 'winz_measles',\n        'winz_log_gdp', 'year', 'alcohol', 'bmi', 'winz_polio', 'winz_diph'], \n        axis=1, inplace=True)\n\n","0d03b6fb":"plt.figure(figsize=(15,12))\nsuite_corr = adj_le_df4.corr()\n\nsns.heatmap(suite_corr, square=True, annot=True);","798a4be3":"PCA_df = adj_le_df4[['winz_life_exp', 'winz_adult_mort', 'winz_thin_1019_yr',\n       'winz_thin_59_yr', 'winz_income_comp', 'winz_schooling',\n       'winz_under5_deaths', 'winz_infant_deaths', 'winz_hiv\/aids']]\n\nstndzd_PCA_df = StandardScaler().fit_transform(PCA_df)\n\nsklearn_PCA = PCA(n_components=4)\n\nPCs = sklearn_PCA.fit_transform(stndzd_PCA_df)\n\nprint(\n    'The percentage of total variance in the dataset explained by each',\n    'component from Sklearn PCA: \\n',\n    #sklearn_PCA.components_,\n    sklearn_PCA.explained_variance_ratio_,\n    '\\n Eigenvalues of each component: \\n',\n    sklearn_PCA.explained_variance_\n    \n)","2bc19bb0":"# Let's visualize the above values\nfig, ax = plt.subplots(figsize=(10,5))\n\nax1 = plt.subplot(121)\nplt.plot(sklearn_PCA.explained_variance_)\nax1.set_xticks([0,1,2,3])\nax1.set_xticklabels([1,2,3,4])\nax1.set_xlabel('Components')\nax1.set_ylabel('Eigenvalues')\n\n\nax2 = fig.add_subplot(122)\nplt.plot(np.cumsum(sklearn_PCA.explained_variance_ratio_))\nax2.set_ylabel('% of Variance Explained')\nax2.set_xlabel('Components')\nax2.set_xticks([0,1,2,3])\nax2.set_xticklabels([1,2,3,4])\nax2.set_ylim(.6,1);\n\nplt.tight_layout()","07bbe633":"# Bear with me as I create a dictionary of ISO country codes for plotly\nISOs_Country = {\n'ABW':'Aruba', 'AFG':'Afghanistan','AGO':'Angola','AIA':'Anguilla','ALA':'\u00c5land Islands','ALB':'Albania',\n'AND':'Andorra','ARE':'United Arab Emirates','ARG':'Argentina','ARM':'Armenia','ASM':'American Samoa',\n'ATA':'Antarctica','ATF':'French Southern Territories','ATG':'Antigua and Barbuda','AUS':'Australia',\n'AUT':'Austria','AZE':'Azerbaijan','BDI':'Burundi','BEL':'Belgium','BEN':'Benin',\n'BES':'Bonaire, Sint Eustatius and Saba','BFA':'Burkina Faso','BGD':'Bangladesh','BGR':'Bulgaria',\n'BHR':'Bahrain','BHS':'Bahamas','BIH':'Bosnia and Herzegovina','BLM':'Saint Barth\u00e9lemy','BLR':'Belarus',\n'BLZ':'Belize','BMU':'Bermuda','BOL':'Bolivia (Plurinational State of)','BRA':'Brazil','BRB':'Barbados',\n'BRN':'Brunei Darussalam','BTN':'Bhutan','BVT':'Bouvet Island','BWA':'Botswana','CAF':'Central African Republic',\n'CAN':'Canada','CCK':'Cocos (Keeling) Islands','CHE':'Switzerland','CHL':'Chile','CHN':'China',\n'CIV':'C\u00f4te d\\'Ivoire','CMR':'Cameroon','COD':'Democratic Republic of the Congo','COG':'Congo',\n'COK':'Cook Islands','COL':'Colombia','COM':'Comoros','CPV':'Cabo Verde','CRI':'Costa Rica','CUB':'Cuba',\n'CUW':'Cura\u00e7ao','CXR':'Christmas Island','CYM':'Cayman Islands','CYP':'Cyprus','CZE':'Czechia',\n'DEU':'Germany','DJI':'Djibouti','DMA':'Dominica','DNK':'Denmark','DOM':'Dominican Republic','DZA':'Algeria',\n'ECU':'Ecuador','EGY':'Egypt','ERI':'Eritrea','ESH':'Western Sahara','ESP':'Spain','EST':'Estonia',\n'ETH':'Ethiopia','FIN':'Finland','FJI':'Fiji','FLK':'Falkland Islands (Malvinas)','FRA':'France',\n'FRO':'Faroe Islands','FSM':'Micronesia (Federated States of)','GAB':'Gabon',\n'GBR':'United Kingdom of Great Britain and Northern Ireland','GEO':'Georgia','GGY':'Guernsey','GHA':'Ghana',\n'GIB':'Gibraltar','GIN':'Guinea','GLP':'Guadeloupe','GMB':'Gambia','GNB':'Guinea-Bissau',\n'GNQ':'Equatorial Guinea','GRC':'Greece','GRD':'Grenada','GRL':'Greenland','GTM':'Guatemala',\n'GUF':'French Guiana','GUM':'Guam','GUY':'Guyana','HKG':'Hong Kong','HMD':'Heard Island and McDonald Islands',\n'HND':'Honduras','HRV':'Croatia','HTI':'Haiti','HUN':'Hungary','IDN':'Indonesia','IMN':'Isle of Man',\n'IND':'India','IOT':'British Indian Ocean Territory','IRL':'Ireland','IRN':'Iran (Islamic Republic of)',\n'IRQ':'Iraq','ISL':'Iceland','ISR':'Israel','ITA':'Italy','JAM':'Jamaica','JEY':'Jersey','JOR':'Jordan',\n'JPN':'Japan','KAZ':'Kazakhstan','KEN':'Kenya','KGZ':'Kyrgyzstan','KHM':'Cambodia','KIR':'Kiribati',\n'KNA':'Saint Kitts and Nevis','KOR':'Republic of Korea','KWT':'Kuwait','LAO':'Lao People\\'s Democratic Republic',\n'LBN':'Lebanon','LBR':'Liberia','LBY':'Libya','LCA':'Saint Lucia', 'LIE':'Liechtenstein','LKA':'Sri Lanka',\n'LSO':'Lesotho','LTU':'Lithuania','LUX':'Luxembourg','LVA':'Latvia','MAC':'Macao',\n'MAF':'Saint Martin (French part)','MAR':'Morocco','MCO':'Monaco','MDA':'Republic of Moldova',\n'MDG':'Madagascar','MDV':'Maldives','MEX':'Mexico','MHL':'Marshall Islands','MKD':'North Macedonia',\n'MLI':'Mali','MLT':'Malta','MMR':'Myanmar','MNE':'Montenegro','MNG':'Mongolia','MNP':'Northern Mariana Islands',\n'MOZ':'Mozambique','MRT':'Mauritania','MSR':'Montserrat','MTQ':'Martinique','MUS':'Mauritius','MWI':'Malawi',\n'MYS':'Malaysia','MYT':'Mayotte','NAM':'Namibia','NCL':'New Caledonia','NER':'Niger','NFK':'Norfolk Island',\n'NGA':'Nigeria','NIC':'Nicaragua','NIU':'Niue','NLD':'Netherlands','NOR':'Norway','NPL':'Nepal','NRU':'Nauru',\n'NZL':'New Zealand','OMN':'Oman','PAK':'Pakistan','PAN':'Panama','PCN':'Pitcairn','PER':'Peru','PHL':'Philippines',\n'PLW':'Palau','PNG':'Papua New Guinea','POL':'Poland','PRI':'Puerto Rico','PRK':'Democratic People\\'s Republic of Korea',\n'PRT':'Portugal','PRY':'Paraguay','PSE':'Palestine, State of','PYF':'French Polynesia','QAT':'Qatar','REU':'R\u00e9union',\n'ROU':'Romania','RUS':'Russian Federation','RWA':'Rwanda','SAU':'Saudi Arabia','SDN':'Sudan','SEN':'Senegal',\n'SGP':'Singapore','SGS':'South Georgia and the South Sandwich Islands','SHN':'Saint Helena, Ascension and Tristan da Cunha',\n'SJM':'Svalbard and Jan Mayen','SLB':'Solomon Islands','SLE':'Sierra Leone','SLV':'El Salvador','SMR':'San Marino',\n'SOM':'Somalia','SPM':'Saint Pierre and Miquelon','SRB':'Serbia','SSD':'South Sudan','STP':'Sao Tome and Principe',\n'SUR':'Suriname','SVK':'Slovakia','SVN':'Slovenia','SWE':'Sweden','SWZ':'Eswatini','SXM':'Sint Maarten (Dutch part)',\n'SYC':'Seychelles','SYR':'Syrian Arab Republic','TCA':'Turks and Caicos Islands','TCD':'Chad','TGO':'Togo',\n'THA':'Thailand','TJK':'Tajikistan','TKL':'Tokelau','TKM':'Turkmenistan','TLS':'Timor-Leste','TON':'Tonga',\n'TTO':'Trinidad and Tobago','TUN':'Tunisia','TUR':'Turkey','TUV':'Tuvalu','TWN':'Taiwan,\u00a0Province of China',\n'TZA':'United Republic of Tanzania','UGA':'Uganda','UKR':'Ukraine','UMI':'United States Minor Outlying Islands',\n'URY':'Uruguay','USA':'United States of America','UZB':'Uzbekistan','VAT':'Holy See','VCT':'Saint Vincent and the Grenadines',\n'VEN':'Venezuela (Bolivarian Republic of)','VGB':'Virgin Islands (British)','VIR':'Virgin Islands (U.S.)','VNM':'Viet Nam',\n'VUT':'Vanuatu','WLF':'Wallis and Futuna','WSM':'Samoa','YEM':'Yemen','ZAF':'South Africa','ZMB':'Zambia',\n'ZWE':'Zimbabwe'}","00e2a629":"# Turning above dict into df\nISO_df = pd.DataFrame.from_dict(ISOs_Country, orient='index', columns=['country'])","2a7440c6":"# Grouping WHO df by Country and aggregating the continuous variables we want to plot\nreduced_adj_df = adj_le_df4.groupby('country')['winz_life_exp', 'Developed', \n                                               'winz_income_comp', 'winz_schooling'].agg(\n    {'winz_life_exp':'mean', 'Developed':'min', 'winz_income_comp':'mean', 'winz_schooling':'mean'}) \n","75a9e6c3":"# Merging ISO and WHO dfs together\nmerged = pd.merge(reduced_adj_df, ISO_df, left_index=True, right_on='country')","839c02bf":"# Plotting via the Plotly library\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\nfig = make_subplots(\n    rows=4, cols=1,\n    row_heights=[0.25, 0.25, 0.25, 0.25],\n    vertical_spacing=0.025,\n    subplot_titles=(\"World Life Expectancy\", \"Status of Countries\", \n                    \"Income Composition of Resources\", \"Highest Average Age of Schooling\"),\n    specs=[[{\"type\": \"Choropleth\", \"rowspan\": 1}],\n           [{\"type\": \"Choropleth\", \"rowspan\": 1}],\n          [{\"type\": \"Choropleth\", \"rowspan\": 1}],\n           [{\"type\": \"Choropleth\", \"rowspan\": 1}]])\n\nfig.add_trace( # Life Expectancy\n    go.Choropleth(locations = merged.index,\n                  z= merged['winz_life_exp'], \n                  text=merged['country'],\n                  name='Life Expectancy',\n                  colorbar={'title':'Life<br>Expectancy', 'len':.25, 'x':.99,'y':.896},\n                  colorscale='spectral',),\n    row=1,col=1\n)\n\nfig.add_trace( #Developed v Developing\n    go.Choropleth(locations = merged.index,\n                  z= merged['Developed'], \n                  text=merged['country'],\n                  name='Status of Countries',\n                  colorbar={'len':.227, 'x':.99,'y':.629, 'tickmode':'array','nticks':2,\n                           'tickvals':[0,1], 'ticktext':('Developing', 'Developed')},\n                  colorscale='burgyl_r'),\n    row=2,col=1\n)\n\nfig.add_trace( # Income Comp\n    go.Choropleth(locations = merged.index,\n                  z= merged['winz_income_comp'], \n                  text=merged['country'],\n                  name='Income Composition of Resources',\n                  colorbar={'title':'Index', 'len':.24, 'x':.99,'y':.378},\n                  colorscale='bluered',),\n    row=3,col=1\n)\n\nfig.add_trace( #Schooling\n    go.Choropleth(locations = merged.index,\n                  z= merged['winz_schooling'], \n                  text=merged['country'],\n                  name='Highest Average Age of Schooling',\n                  colorbar={'len':.248, 'x':.99,'y':.1275, 'title':'Schooling<br>Age'},\n                  colorscale='burgyl_r'),\n    row=4,col=1\n)\n\nfig.update_layout(\n    margin=dict(r=1, t=30, b=10, l=30),\n    width=700,\n    height=1400,\n)\n\nfig.show()","f693834e":"From the graphs above, we can see geographic correlations regarding the differences in Life Expectancy, Developing or Developed nations, Income Composition of Resources, and Highest Average Age of Schooling. It further supports our earlier findings that Developed nations on average have a higher life expectancy than those in Developing nations, and it shows that Income Composition of Resources and Highest Average Age of Schooling are also correlated to Life Expectancy.","20ad4e47":"These graphs confirm what we saw with the correlation matrix above:  negative correlations with winz_hiv\/aids and winz_adult_mort; ; positive correlations with winz_income_comp and winz_schooling.\n\nIt also a little strange seeing the splits in the scatter plots. Likely due to the collection method since multiple data frames were cobbled together.","9bbe5b7d":"# Factors that affect life expectancy\n\nI will be using the Life Expectancy data from WHO, and will be going over data cleaning, inspection, PCA, and plotting geographic data with plotly.\n\nAs the comments on this data suggest, there are a lot of issues with the data collection methods and the resulting observations, but it is still usable to gain valuable insights. \n\nLet's go ahead and dive into the inspection and cleaning.\n","13bac8fc":"The life expectancy of Developed countries is significantly different from Developing countries","88754387":"### **Let's explore the data using univariate and multivariate exploration techniques to try to find the relevant variables that may be correlated with life expectancy**","6cb89fc3":"While there were many issues with the data due to how it was collected (Most notably the outliers at the beginning and the fact China, India, and multiple countries near the Indian Ocean were excluded due to a lack of data or incorrectly collected data) , there were still valuable insights from this data set. ","fe42cef9":"**Lets inspect the data for nans, any outliers, and fix some issues with the data collection**","e514f72a":"The highest negative correlations for __winz_life_exp__ are with __winz_hiv\/aids__ and __winz_adult_mort__; contrastingly, the highest positive correlations are with __winz_income_comp__ and __winz_schooling__","95d2e988":"We see here that the top 2 components of the PCA explain 76% of the variance in our data. While respectable, it is not as high of a percentage as some of our other variables.","74a73834":"Here are some issues (of many) I'm seeing:\n1. __infant_deaths__ (per 1000 of population) has outliers around 1800. Mathematically unlikely they are having more infant deaths than actual infants. Likely a data collection error. We will drop outliers over 1000.\n2. __measles__ (number of reported cases per 1000) has possible outliers at 212k. Same explanation and course of action as above \n3. __under_five_deaths__ (per 1000 of population) has outliers of 2500. Same explantion and course of action as above\n4. __percentage_expenditure__ \"as a percent of GDP\" has outliers around 20k. Unlikely a country is spending 20,000% of their GDP on health, but a large portion of the data is over 300% of GDP, which also seems very high. Because of the range, we will take the log.\n5. __population__ and __gdp__ outliers are likely correct as there are few very rich and highly populated countries. Obtaining the log of these values will be helpful and we can winsorize if needed afterwards\n6. __bmi__ has a distribution that does not make sense. A bmi over 40 is morbidly obese and somehow some countries recorded a mean of almost 90? That means there is a country (or multiple) with a such a large population of people that are shorter than 5'0\" and weigh over 400 lbs. This variable may be dropped entirely.\n7. __status__, while a categorical variable, many countries are not categorized correctly as France and Canada (plus about 6 others) are listed as \"developing\".  ","69944888":"## **Summarizing Our Findings**","488de811":"1. Overall mean is really skewing a few of the columns likely due the most developed countries having a large population and GDP\n2. Country by country seems to match the original le_df the closest, but that is likely because there are many nulls still left and dropping them would lose a lot of data.\n3. While interpolate seems to affect the data slightly in a few columns, it is closest to the original, and it lets us keep all observations\n\nI will proceed with le_df4's interpolation ","b2241d64":"### Let's endeavor to feature engineer a couple of basic variables [](http:\/\/)\n\n"}}