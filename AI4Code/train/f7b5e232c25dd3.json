{"cell_type":{"e5507323":"code","3b902aae":"code","acb26804":"code","5029f9d3":"code","b970e435":"code","1568a153":"code","c22b65f9":"code","caf34a34":"code","933cdf68":"code","be23da18":"code","dfb2c76c":"code","41c474a3":"code","73d4ea08":"code","bed2d51b":"code","f9adc2ce":"code","1f386bef":"code","09e812ac":"code","ef6938c2":"code","14b23768":"code","7b15f2d8":"code","28648901":"code","766be157":"code","14495343":"code","f869fead":"code","3fd2a432":"code","80547a31":"code","e4cae590":"code","5c9d9442":"code","b6209203":"code","469ee23f":"code","0e667272":"code","d584bfdb":"code","0bfa1903":"markdown","6c003d3b":"markdown","e8d6b49f":"markdown","e47df01d":"markdown","abe0f4ab":"markdown","255ddc99":"markdown","28ca221e":"markdown"},"source":{"e5507323":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# Any results you write to the current directory are saved as output.","3b902aae":"%matplotlib inline\nimport matplotlib.pyplot as plt\n","acb26804":"corona = pd.read_csv('\/kaggle\/input\/corona-virus-report\/covid_19_clean_complete.csv')","5029f9d3":"def tidy(data, start, confirmed_key='Confirmed', recovered_key='Recovered', deaths_key='Deaths', date_key='Date'):\n    data[\"Active\"] = data[confirmed_key] - data[recovered_key] - data[deaths_key]\n    data[\"Date\"] = pd.to_datetime(data[date_key]) \n    data[\"Days\"] = (data[\"Date\"] - pd.to_datetime([start]*len(data))).astype('timedelta64[D]')\n    assert('Active' in data)\n    assert('Date' in data)\n    assert('Days' in data)\n","b970e435":"tidy(corona, corona['Date'].iloc[0])","1568a153":"TODAY_DAY = (pd.to_datetime('today') - corona['Date'].iloc[0]).days","c22b65f9":"it = corona[corona[\"Country\/Region\"] == \"Italy\"]\n_ = it.plot(x = \"Days\", y =\"Active\", kind='scatter', title=\"Active cases in Italy\")","caf34a34":"import pymc3 as pm","933cdf68":"# De Nicolao's data are slightly different from John Hopkins' ones\ndn_data = pd.DataFrame([(34, 322), (35, 400), (36, 650), (37, 821), (38, 1049), (39, 1577)], columns=[\"Days\", \"Active\"])\ndn_data","be23da18":"# De Nicolao considers data starting from day 34\nDN_START = dn_data[\"Days\"][0] -  1","dfb2c76c":"import theano","41c474a3":"observations = theano.shared(np.array(np.log(dn_data['Active'])))\nvariable = theano.shared(np.array(dn_data['Days'] - DN_START).astype('int'))","73d4ea08":"with pm.Model() as log_linear:\n    alpha = pm.HalfNormal(\"alpha\", sd=20)\n    beta = pm.HalfNormal(\"beta\", sd=20)\n    sigma = pm.HalfNormal(\"sigma\", sd=20)\n    log_active = pm.Normal(\"log_active\", mu=alpha*variable + beta, sigma=sigma, observed=observations)","bed2d51b":"with log_linear:\n    dn_MAP = pm.find_MAP()","f9adc2ce":"\nfig = plt.figure(figsize=(20, 10))\nx = np.arange(dn_data['Days'][0], TODAY_DAY)\nstart, end = (i.strftime(\"%a %d %b %Y\") for i in (it['Date'].iloc[0] + pd.to_timedelta(str(DN_START+1)+'d'), it['Date'].iloc[-1])) \nfig.suptitle(\"Generated data vs. observed from {} to {}\".format(start, end))\nax = fig.add_subplot(121, xlabel='Days', ylabel='Active', title='Log scale'.format(start, end))\nax.scatter(dn_data['Days'], np.log(dn_data['Active']), label='Observed (De Nicolao data)')\nax.scatter(it[it['Days'] > DN_START+len(dn_data)]['Days'], np.log(it[it['Days'] > DN_START+len(dn_data)]['Active']), \n           label='Observed (John Hopkins data)')\nax.plot(x, dn_MAP['alpha']*(x  - DN_START) + dn_MAP['beta'], label='Generated')\nax.legend()\nax = fig.add_subplot(122, xlabel='Days', ylabel='Active', title='Active cases')\nax.scatter(dn_data['Days'], dn_data['Active'], label='Observed (De Nicolao data)')\nax.scatter(it[it['Days'] > DN_START+len(dn_data)]['Days'], it[it['Days'] > DN_START+len(dn_data)]['Active'], \n           label='Observed (John Hopkins data)')\nax.plot(x, np.exp(dn_MAP['alpha'].mean()*(x  - DN_START) + dn_MAP['beta'].mean()), label='Generated')\nax.legend()\nplt.show()\nplt.close()","1f386bef":"h_data = it[(it['Days'] > DN_START) & (it['Date'] <= pd.to_datetime('2020-03-01'))]","09e812ac":"observations.set_value(np.array(np.log(h_data['Active'])))\nvariable.set_value(np.array(h_data['Days'] - DN_START).astype('int'))","ef6938c2":"with log_linear:\n    h_MAP = pm.find_MAP()","14b23768":"fig = plt.figure(figsize=(20, 10))\nfig.suptitle(\"Generated data vs. observed (John Hopkins' data) from {} to {}\".format(start, end))\nx = np.arange(h_data['Days'].iloc[0], TODAY_DAY)\nh_obs = it[it['Days'] > DN_START+len(h_data)]\nax = fig.add_subplot(121, xlabel='Days', ylabel='Active', title='Log scale')\nax.scatter(h_data['Days'], np.log(h_data['Active']), label='Observed')\nax.scatter(it[it['Days'] > DN_START+len(h_data)]['Days'], np.log(it[it['Days'] > DN_START+len(h_data)]['Active']), \n           label='Observed')\nax.plot(x, h_MAP['alpha']*(x  - DN_START) + h_MAP['beta'], label='Generated')\nax.legend()\nax = fig.add_subplot(122, xlabel='Days', ylabel='Active', title='Active cases')\nax.scatter(h_data['Days'], h_data['Active'], label='Observed')\nax.scatter(h_obs['Days'], h_obs['Active'], label='Observed')\nax.plot(x, np.exp(h_MAP['alpha']*(x  - DN_START) + h_MAP['beta']), label='Generated')\nax.legend()\nplt.savefig(\"it.png\")\nplt.show()\nplt.close()","7b15f2d8":"from scipy.interpolate import BSpline","28648901":"def mkB(n, data, degree=1):\n    \"\"\"Given the number of knots and data, \n       makes a matrix of B-splines basis, \n       with knots on quantiles. By default it uses linear splines.\"\"\"\n    knot_list = list(np.quantile(data, np.linspace(start=0, stop=1, num=n)))\n    t = ([knot_list[0]]*degree)+knot_list+([knot_list[n-1]]*degree)\n    c = [0]*(n+2) # zero weigths to get basis\n    B = []\n    for i in range(len(c)):\n        c[i] = 1\n        B.append(BSpline(t=t, c=c, k=degree)(data))\n        c[i] = 0  \n    \n    return np.stack(B, axis=1)","766be157":"def spline_country(data, country, ax_log, ax, knots=6, k_key='Country\/Region', active_key='Active', days_key='Days', use_MAP=True):\n    \"\"\"Model the number of active cases in country, \n       with the given number of linear splines with knots on quantiles.\n       By default it uses the much faster `find_MAP` method, \n       but sometimes this gives not sensible results, \n       and the slower MCMC `sample` might be better. \n       It returns the sampled model.\"\"\"\n    data_k = data[(data[k_key] == country) & (data[active_key] > 0)]\n    active = sorted(data_k.groupby(days_key).sum()[active_key])\n    days = sorted(data_k[days_key].unique())\n\n    B_k = mkB(knots, days, 1)\n\n    with pm.Model() as hopkins_k:\n        alpha = pm.Normal(\"alpha\",  mu=0, sd=1, shape=B_k.shape[1])\n        beta = pm.HalfNormal(\"beta\", sd=20)\n        sigma = pm.HalfNormal(\"sigma\", sd=20)\n        mu=pm.math.dot(B_k, alpha) + beta\n        log_active = pm.Normal(\"log_active\", mu=mu, sigma=sigma, observed=np.log(active))\n        if use_MAP:\n            h_k = pm.find_MAP(return_raw=True)\n        if not use_MAP or not h_k[1].success:\n            h_k = pm.sample()\n    \n    if use_MAP:\n        print('{}: using find_MAP'.format(country))\n        a, b = h_k[0]['alpha'], h_k[0]['beta']\n    else:\n        print('{}: using MCMC sampling'.format(country))        \n        a, b = h_k['alpha'].mean(axis=0), h_k['beta'].mean()\n    generated = np.dot(B_k, a) + b\n    ax_log.scatter(days, np.log(active), s=3, label='{}: Observed'.format(country))\n    ax_log.plot(days, generated, label='{}: Generated'.format(country))\n    ax_log.legend()\n    ax.scatter(days, active, label='{}: Observed'.format(country))\n    ax.plot(days, np.exp(generated), label='{}: Generated'.format(country))\n    ax.legend()\n    return h_k","14495343":"COUNTRIES = ('Italy', 'Germany', 'Spain', 'France', 'United Kingdom', 'South Korea', 'US', 'Poland', 'Switzerland', 'China', 'India')","f869fead":"fig = plt.figure(figsize=(20, 10))\nstart, end = (corona['Date'].iloc[i].strftime(\"%a %d %b %Y\") for i in (0, -1))\nWEEKS = int((corona['Date'].iloc[-1] - corona['Date'].iloc[0]).days \/ 7) + 1\nfig.suptitle(\"Generated data vs. observed (John Hopkins' data) from {} to {}\".format(start, end))\nax_log = fig.add_subplot(121, xlabel='Days', ylabel='Active', title='Generated data vs. observed (Log scale)')\nax = fig.add_subplot(122, xlabel='Days', ylabel='Active', title='Generated data vs. observed')\nfor k in COUNTRIES:\n    try:\n        spline_country(corona, k, ax_log, ax, WEEKS)\n    except Exception as e:\n        print(e, k)\nplt.savefig('countries.png')\nplt.show()\nplt.close()","3fd2a432":"# http:\/\/www.governo.it\/it\/approfondimento\/coronavirus\/13968 \nit_events = [('2020-01-30', 'Flights to\/from China blocked'),\n             ('2020-02-21', 'Quarantine for active cases'),\n             ('2020-02-23', 'Red zones'),\n             ('2020-02-25', 'Schools closed in some regions'),\n             ('2020-03-01', 'Partial lockdown in some regions'),\n             ('2020-03-04', 'Schools closed'),\n             ('2020-03-08', 'Strict lockdown in some regions'),\n             ('2020-03-09', 'Strict lockdown'),\n             ('2020-03-20', 'Stricter mobility restrictions'),\n             ('2020-03-22', 'Halt all non-essential work activities'),\n             ('2020-03-24', 'Higher fines for lockdown rebels'),\n             ('2020-04-13', 'Preliminary unlocking in some regions'),\n             ('2020-05-04', 'First unlocking steps nationwide'),\n             ('2020-05-18', 'Many commercial activities are permitted to open'),\n             ('2020-06-03', 'Interregional mobility'),\n             ('2020-06-15', 'Wider reopening'),\n             ('2020-08-17', 'Masks mandatory after 18:00'),\n             ('2020-10-08', 'Masks mandatory all the day'),\n            ]\nSTART = pd.to_datetime(corona['Date'].iloc[0])\nit_events = [((pd.to_datetime(d) - START).days, e) for d, e in it_events]","80547a31":"fig = plt.figure(figsize=(20, 10))\nfig.suptitle(\"Generated data vs. observed (John Hopkins' data) from {} to {}\".format(start, end))\nax_log = fig.add_subplot(121, xlabel='Days', ylabel='Active', title='Generated data vs. observed (Log scale)')\nax = fig.add_subplot(122, xlabel='Days', ylabel='Active', title='Generated data vs. observed')\nspline_country(corona,'Italy', ax_log, ax, WEEKS)\nfor i, (d, e) in enumerate(it_events):\n    ax_log.axvline(x=d, color='C{}'.format((i + 1) % 10), ls=':', label=e)\nax_log.legend()\nplt.savefig('it-events.png')\nplt.show()\nplt.close()","e4cae590":"dpc_region = pd.read_csv('\/kaggle\/input\/covid19-in-italy\/covid19_italy_region.csv')","5c9d9442":"tidy(dpc_region, corona['Date'].iloc[0], confirmed_key='TotalPositiveCases')","b6209203":"REGIONS = ('Lombardia', 'Veneto', 'Emilia-Romagna', 'Lazio', 'Marche', 'Toscana', 'Campania', 'Piemonte')","469ee23f":"fig = plt.figure(figsize=(20, 10))\nstart, end = (dpc_region['Date'].iloc[i].strftime(\"%a %d %b %Y\") for i in (0, -1))\nfig.suptitle(\"Generated data vs. observed (Dipartimento Protezione Civile's data) from {} to {}\".format(start, end))\nax_log = fig.add_subplot(121, xlabel='Days', ylabel='Active', title='Generated data vs. observed (Log scale)')\nax = fig.add_subplot(122, xlabel='Days', ylabel='Active', title='Generated data vs. observed')\nfor r in REGIONS:\n    try: \n        spline_country(dpc_region, r, ax_log, ax, WEEKS, k_key='RegionName')\n    except Exception as e:\n        print(r, e)\nfor i, (d, e) in enumerate(it_events[2:]):\n    ax_log.axvline(x=d, color='C{}'.format((i + 1) % 10), ls=':', label=e)\nax_log.legend()\nplt.savefig('regions.png')\nplt.show()\nplt.close()","0e667272":"fig = plt.figure(figsize=(20, 10))\nfig.suptitle(\"Generated data vs. observed (Dipartimento Protezione Civile's data) from {} to {}\".format(start, end))\nax_log = fig.add_subplot(121, xlabel='Days', ylabel='Deaths', title='Generated data vs. observed (Log scale)')\nax = fig.add_subplot(122, xlabel='Days', ylabel='Deaths', title='Generated data vs. observed')\nfor r in REGIONS:\n    try:\n        spline_country(dpc_region, r, ax_log, ax, WEEKS, k_key='RegionName', active_key='Deaths')\n    except Exception as e:\n        print(r, e)\nfor i, (d, e) in enumerate(it_events[2:]):\n    ax_log.axvline(x=d, color='C{}'.format((i + 1) % 10), ls=':', label=e)\nax_log.legend()\nplt.savefig('regions-deaths.png')\nplt.show()\nplt.close()","d584bfdb":"fig = plt.figure(figsize=(20, 10))\nfig.suptitle(\"Generated data vs. observed (Dipartimento Protezione Civile's data) from {} to {}\".format(start, end))\nax_log = fig.add_subplot(121, xlabel='Days', ylabel='Hospitalized', title='Generated data vs. observed (Log scale)')\nax = fig.add_subplot(122, xlabel='Days', ylabel='Hospitalized', title='Generated data vs. observed')\nfor r in REGIONS:\n    try:\n        spline_country(dpc_region, r, ax_log, ax, WEEKS, k_key='RegionName', active_key='TotalHospitalizedPatients', use_MAP=(r != 'Veneto'))\n    except Exception as e:\n        print(r, e)\nfor i, (d, e) in enumerate(it_events[2:]):\n    ax_log.axvline(x=d, color='C{}'.format((i + 1) % 10), ls=':', label=e)\nax_log.legend()\nplt.savefig('regions-hospital.png')\nplt.show()\nplt.close()","0bfa1903":"## Replication of (early) De Nicolao's regression model","6c003d3b":"Data from De Nicolao's blog: https:\/\/statisticallearningtheory.wordpress.com\/2020\/03\/02\/previsione-della-crescita-esponenziale-dei-covid19-positivi-in-italia-lombardia-veneto-ed-e-romagna\/. I try to replicate his model by following a *probabilistic programming* approach (see http:\/\/xcelab.net\/rm\/sr2\/ for a good introduction).","e8d6b49f":"Model:\n\n$\\sigma, \\alpha, \\beta \\sim HalfNormal(0, 20)$\n\n$log(active) \\sim \\mathcal{N}(\\alpha \\cdot (days - DN\\_START) + \\beta, \\sigma)$","e47df01d":"# An analysis of COVID-19 trends by fitting simple log-linear models (main focus on Italy)","abe0f4ab":"## Italian data from \"Dipartimento Protezione Civile\"","255ddc99":"## A new model with splines","28ca221e":"Now I will model **all** the data for a given country with a mixture of (linear) B-splines."}}