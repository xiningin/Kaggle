{"cell_type":{"ff75379a":"code","241df118":"code","de77ecdd":"code","38039273":"code","a72fa58c":"code","b74de430":"code","394402d8":"code","a7901881":"code","f177dc3a":"code","911b984d":"code","226bf140":"code","d5f65528":"code","c214a33b":"code","c8dd5e74":"code","6b6334c9":"code","22b6340a":"code","8a4b0eab":"code","2f8206d5":"code","6e0412be":"code","cd5f8eb5":"code","cf1e4f91":"code","99541147":"code","61e51c50":"code","aa71df15":"code","98760a2c":"code","1a9ecf09":"code","1d1253ee":"code","4aea9479":"code","d050762a":"code","faf41168":"code","2cf12fe2":"code","023de1d7":"code","8026505a":"code","7ae8c3a0":"code","79e77f6a":"code","8dfa085e":"code","e77f21f6":"code","05c5dce7":"code","a37c5aff":"code","b5fa4e7b":"code","db693580":"code","d5b33ed6":"code","aa8b347b":"code","4c9364c9":"code","b1be9b93":"code","d520e319":"code","e454e936":"code","00eecbec":"code","da5b0333":"code","ab4ac16b":"code","a7348e40":"markdown","c15b4c58":"markdown","11e1304b":"markdown","4f9cda3e":"markdown","a010323b":"markdown","bc60c3ac":"markdown","185a5253":"markdown","27170669":"markdown","e0a387ef":"markdown","2c3c4cec":"markdown","383d180f":"markdown","c58e9d89":"markdown","875770f1":"markdown","6515ab72":"markdown","d771d8d4":"markdown","e5d5f156":"markdown","0072a23a":"markdown","1972fc53":"markdown","b75d4d7c":"markdown","976cade1":"markdown","85b7c1ff":"markdown","6da5fdae":"markdown","cafb79a5":"markdown","b25f4254":"markdown","f136319a":"markdown","304e51d0":"markdown"},"source":{"ff75379a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","241df118":"import zipfile\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nfrom sklearn.metrics import mean_squared_log_error","de77ecdd":"zf_train = zipfile.ZipFile('\/kaggle\/input\/sberbank-russian-housing-market\/train.csv.zip') \ndf_train = pd.read_csv(zf_train.open('train.csv'))\n\nzf_test = zipfile.ZipFile('\/kaggle\/input\/sberbank-russian-housing-market\/test.csv.zip') \ndf_test = pd.read_csv(zf_test.open('test.csv'))\n\nzf_submit = zipfile.ZipFile('\/kaggle\/input\/sberbank-russian-housing-market\/sample_submission.csv.zip') \nsample_submit = pd.read_csv(zf_submit.open('sample_submission.csv'))\n\nzf_macro = zipfile.ZipFile('\/kaggle\/input\/sberbank-russian-housing-market\/macro.csv.zip') \ndf_macro = pd.read_csv(zf_macro.open('macro.csv'))\n\nprint(\"Train dataset shape:\", df_train.shape)\nprint(\"Test dataset shape:\", df_test.shape)","38039273":"data_dict = open('\/kaggle\/input\/sberbank-russian-housing-market\/data_dictionary.txt', 'r')\ndata_dict.read().split('\\n')","a72fa58c":"df_train['price_doc'].describe()","b74de430":"fig, ax = plt.subplots(figsize=(8,5))\nsns.distplot(df_train['price_doc'].values, bins=100, kde=True, ax=ax)\nplt.title('\u0426\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f price_doc', fontsize=18)\nplt.xlabel('price_doc', fontsize=12)\nplt.show()","394402d8":"fig, ax = plt.subplots(figsize=(8,5))\nsns.distplot(np.log(df_train['price_doc']).values, bins=100, kde=True, ax=ax)\nplt.title('Log(price_doc)', fontsize=18)\nplt.xlabel('Log(price_doc)', fontsize=12)\nplt.show()","a7901881":"df_train['price_doc_log'] = np.log(df_train['price_doc'])","f177dc3a":"missingValueCols = df_train.columns[df_train.isnull().any()].tolist()\n\npd.isnull(df_train[missingValueCols]).sum().sort_values(ascending=False) \/ len (df_train)","911b984d":"nr_rows = 17\nnr_cols = 3\n\nfig, axs = plt.subplots(nr_rows, nr_cols, figsize=(15,60))\n   \nfor r in range(0,nr_rows):\n    for c in range(0,nr_cols):  \n        i = r*nr_cols+c\n        i_col = missingValueCols[i]\n        sns.distplot(df_train[df_train[i_col].notna()][i_col], bins=30, kde=False, ax = axs[r][c])\n    \nfig.suptitle('\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0441 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u043c\u0438', y=1.01, fontsize=18)        \nplt.tight_layout()    \nplt.show()","226bf140":"fig, ax = plt.subplots(figsize=(20,4))\nax = sns.countplot(x='build_year',data=df_train)\nplt.title('build_year', fontsize=18)\nplt.xticks(rotation='vertical')\nplt.show()","d5f65528":"df_train[(df_train['build_year'] > 2020) | (df_train['build_year'] < 1000) ]['build_year'].sort_values(ascending=False).value_counts()","c214a33b":"df_train['build_year'] = df_train['build_year'].replace({20052009: 2007, 0 : 2000, 1 : 2001, 3 : 2003, 20 : 1920, 71 : 1971,\n                                4965 : df_train['build_year'].mode().iloc[0],\n                                215 : df_train['build_year'].mode().iloc[0]})","c8dd5e74":"fig, ax = plt.subplots(figsize=(20,4))\nax = sns.countplot(x='build_year',data=df_train)\nplt.title('build_year (\u043f\u043e\u0444\u0438\u043a\u0441\u0438\u043b\u0438 \u043e\u0448\u0438\u0431\u043a\u0438 \u0432 \u0434\u0430\u043d\u043d\u044b\u0445)', fontsize=18)\nplt.xticks(rotation='vertical')\nplt.show()","6b6334c9":"fig, ax = plt.subplots(figsize=(8,30))\nsns.boxplot(x='price_doc', y='build_year', data=df_train, orient='h', ax=ax)\nplt.title('\u0417\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c price_doc \u043e\u0442 build_year', fontsize=18)\nplt.show()","22b6340a":"fig, ax = plt.subplots(1, 2, figsize=(12,4))\n\nax[0].scatter(y='price_doc', x='life_sq', alpha=0.2, data=df_train)\nax[0].set_title('life_sq', fontsize=18)\nax[0].set_xlim([0,1000])\nax[0].set_ylim([0,100000000])\n\nax[1].scatter(y='price_doc', x='life_sq', alpha=0.2, data=df_train)\nax[1].set_title('life_sq \u0431\u0435\u0437 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432', fontsize=18)\nax[1].set_xlim([0,125])\nax[1].set_ylim([0,30000000])\nplt.show()","8a4b0eab":"fig, ax = plt.subplots(1, 2, figsize=(12,4))\n\nax[0].scatter(y='price_doc', x='kitch_sq', alpha=0.2, data=df_train)\nax[0].set_title('kitch_sq', fontsize=18)\n\nax[1].scatter(y='price_doc', x='kitch_sq', alpha=0.2, data=df_train)\nax[1].set_title('kitch_sq \u0431\u0435\u0437 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432', fontsize=18)\nax[1].set_xlim([0,40])\nplt.show()","2f8206d5":"cols_fillna_mode = ['floor',\n 'product_type', \n 'build_year',                 \n 'max_floor',\n 'material',\n 'num_room',\n 'state',\n 'preschool_quota',\n 'school_quota',\n 'hospital_beds_raion',\n 'raion_build_count_with_material_info',\n 'raion_build_count_with_builddate_info',\n 'ID_railroad_station_walk',\n 'build_count_block',\n 'build_count_wood',\n 'build_count_frame',\n 'build_count_brick',\n 'build_count_monolith',\n 'build_count_panel',\n 'build_count_foam',\n 'build_count_slag',\n 'build_count_mix',\n 'build_count_before_1920',\n 'build_count_1921-1945',\n 'build_count_1946-1970',\n 'build_count_1971-1995',\n 'build_count_after_1995',\n 'green_part_2000']\n\ncols_fillna_mean = ['life_sq',\n 'kitch_sq',\n 'metro_min_walk',\n 'metro_km_walk',\n 'railroad_station_walk_km',\n 'railroad_station_walk_min',\n 'cafe_sum_500_min_price_avg',\n 'cafe_sum_500_max_price_avg',\n 'cafe_avg_price_500',\n 'cafe_sum_1000_min_price_avg',\n 'cafe_sum_1000_max_price_avg',\n 'cafe_avg_price_1000',\n 'cafe_sum_1500_min_price_avg',\n 'cafe_sum_1500_max_price_avg',\n 'cafe_avg_price_1500',\n 'cafe_sum_2000_min_price_avg',\n 'cafe_sum_2000_max_price_avg',\n 'cafe_avg_price_2000',\n 'cafe_sum_3000_min_price_avg',\n 'cafe_sum_3000_max_price_avg',\n 'cafe_avg_price_3000',\n 'prom_part_5000',\n 'cafe_sum_5000_min_price_avg',\n 'cafe_sum_5000_max_price_avg',\n 'cafe_avg_price_5000']","6e0412be":"for col in cols_fillna_mode:\n    df_train[col].fillna(df_train[col].mode().iloc[0],inplace=True)\n    df_test[col].fillna(df_test[col].mode().iloc[0],inplace=True)\n    \nfor col in cols_fillna_mean:\n    df_train[col].fillna(df_train[col].mean(),inplace=True)\n    df_test[col].fillna(df_test[col].mean(),inplace=True)\n    \n# for col in cols_fillna_none:\n#     df_train[col].fillna('None',inplace=True)\n#     df_test[col].fillna('None',inplace=True)","cd5f8eb5":"df_train[missingValueCols].info()","cf1e4f91":"numerical_feats = df_train.dtypes[df_train.dtypes != \"object\"].index\nprint(\"Number of Numerical features: \", len(numerical_feats))\n\ncategorical_feats = df_train.dtypes[df_train.dtypes == \"object\"].index\nprint(\"Number of Categorical features: \", len(categorical_feats))","99541147":"for cat in categorical_feats:\n    print(cat, df_train[cat].nunique())","61e51c50":"df_train['year_month'] = df_train['timestamp'].apply(lambda x: x[:4] + x[5:7]).astype(int)\ndf_train['year'] = df_train['timestamp'].apply(lambda x: x[:4]).astype(int)\ndf_train['month'] = df_train['timestamp'].apply(lambda x: x[5:7]).astype(int)\n# df_train['month_day'] = df_train['timestamp'].apply(lambda x: x[5:7] + x[8:]).astype(int)\n\ndf_test['year_month'] = df_test['timestamp'].apply(lambda x: x[:4] + x[5:7]).astype(int)\ndf_test['year'] = df_test['timestamp'].apply(lambda x: x[:4]).astype(int)\ndf_test['month'] = df_test['timestamp'].apply(lambda x: x[5:7]).astype(int)\n# df_test['month_day'] = df_test['timestamp'].apply(lambda x: x[5:7] + x[8:]).astype(int)\n\ndf_train.drop('timestamp', axis=1, inplace=True)\ndf_test.drop('timestamp', axis=1, inplace=True)\n\nnumerical_feats = df_train.dtypes[df_train.dtypes != \"object\"].index\nprint(\"Number of Numerical features: \", len(numerical_feats))\n\ncategorical_feats = df_train.dtypes[df_train.dtypes == \"object\"].index\nprint(\"Number of Categorical features: \", len(categorical_feats))","aa71df15":"fig, ax = plt.subplots(figsize=(20,8))\nsns.barplot(x='year_month', y='price_doc', data=df_train)\nplt.title('\u0417\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u0442\u0430\u0440\u0433\u0435\u0442-\u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u043e\u0442 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 year_month', fontsize=18)\nplt.xticks(rotation='vertical')\nplt.show()","98760a2c":"fig, ax = plt.subplots(figsize=(10,6))\nsns.barplot(x='month', y='price_doc', data=df_train)\nplt.title('\u0417\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u0442\u0430\u0440\u0433\u0435\u0442-\u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u043e\u0442 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 month', fontsize=18)\nplt.xticks(rotation='vertical')\nplt.show()","1a9ecf09":"nr_rows = 5\nnr_cols = 3\n\nfig, axs = plt.subplots(nr_rows, nr_cols, figsize=(nr_cols*5,nr_rows*3))\n\nfor r in range(0,nr_rows):\n    for c in range(0,nr_cols):  \n        i = r*nr_cols+c\n        i_col = categorical_feats[i]\n        sns.countplot(x=i_col, data=df_train,ax = axs[r][c])\n\nfig.suptitle('Countplots \u0434\u043b\u044f \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432', y=1.02, fontsize=18)  \nplt.tight_layout()    \nplt.show()\n    ","1d1253ee":"cols_violin = categorical_feats.drop(['ecology', 'sub_area'], errors='ignore')","4aea9479":"nr_rows = 7\nnr_cols = 2\n\nfig, axs = plt.subplots(nr_rows, nr_cols, figsize=(nr_cols*3,nr_rows*3))\ndf_train['temp'] = ''\n\nfor r in range(0,nr_rows):\n    for c in range(0,nr_cols):  \n        i = r*nr_cols+c\n        if i < 13:\n            i_col = cols_violin[i]\n            sns.violinplot(y='price_doc_log', x='temp', hue=i_col, bw=0.2, split=True, data=df_train, ax = axs[r][c])\n        \n#         sns.countplot(x=i_col, data=df_train,ax = axs[r][c])\n#         sns.boxplot(data=df_train, y=df_train[categorical_feats[i]],x=\"price_doc_log\", orient='h', ax = axs[r][c])\n#         sns.distplot(df_train[df_train[i_col].notna()][i_col], bins=30, kde=False, ax = axs[r][c])\n\nfig.suptitle('\u0417\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u0442\u0430\u0440\u0433\u0435\u0442-\u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u043e\u0442 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432', y=1.02, fontsize=18)  \nplt.tight_layout()    \nplt.show()","d050762a":"fig, ax = plt.subplots(figsize=(14,6))\nax = sns.violinplot(x='ecology', y='price_doc_log', bw=.05, data=df_train)\nplt.title('\u0417\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u0442\u0430\u0440\u0433\u0435\u0442-\u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u043e\u0442 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 ecology', fontsize=18)\nplt.show()","faf41168":"fig, ax = plt.subplots(figsize=(10,30))\nsns.barplot(y='sub_area', x='price_doc', data=df_train, orient='h')\nplt.title('\u0417\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u0442\u0430\u0440\u0433\u0435\u0442-\u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u043e\u0442 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 sub-area', fontsize=18)\nplt.show()","2cf12fe2":"df_train.drop(['temp', 'id', 'price_doc'], axis=1, inplace=True)\nid_test = df_test['id']\ndf_test.drop(['id'], axis=1, inplace=True)","023de1d7":"categorical_feats","8026505a":"from sklearn.preprocessing import OneHotEncoder\n\nohe = OneHotEncoder(handle_unknown='error')\nohe_cols_train = pd.DataFrame(ohe.fit_transform(df_train[categorical_feats]).toarray())\nohe_cols_test = pd.DataFrame(ohe.transform(df_test[categorical_feats]).toarray())\n\n# \u043d\u0435 \u0437\u043d\u0430\u044e \u043a\u0430\u043a \u0432\u044b, \u0430 \u044f \u043d\u0435 \u043c\u043e\u0433\u0443 \u0431\u0435\u0437 \u0440\u043e\u0434\u043d\u044b\u0445 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0439\nohe_cols_train.columns = ohe.get_feature_names(categorical_feats)\nohe_cols_test.columns = ohe.get_feature_names(categorical_feats)\n\n# \u0432\u0435\u0440\u043d\u0435\u043c \u0438\u043d\u0434\u0435\u043a\u0441\u044b, \u0438\u0445 \u0437\u0430\u0431\u0440\u0430\u043b\u0438 \u0438 \u043d\u0435 \u0441\u043f\u0440\u043e\u0441\u0438\u043b\u0438\nohe_cols_train.index = df_train.index\nohe_cols_test.index = df_test.index\n\n# \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0444\u0438\u0447\u0438 \u0441\u0434\u0435\u043b\u0430\u043b\u0438 \u0441\u0432\u043e\u0435 \u0434\u0435\u043b\u043e, \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0444\u0438\u0447\u0438 \u043c\u043e\u0433\u0443\u0442 \u0443\u0445\u043e\u0434\u0438\u0442\u044c\nnum_df_train = df_train.drop(categorical_feats, axis=1)\nnum_df_test = df_test.drop(categorical_feats, axis=1)\n\n# \u0441\u043e\u0431\u0438\u0440\u0430\u0435\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u044b\ndf_train_ohe = pd.concat([num_df_train, ohe_cols_train], axis=1)\ndf_test_ohe = pd.concat([num_df_test, ohe_cols_test], axis=1)\n\nprint(\"Train dataset shape:\", df_train_ohe.shape)\nprint(\"Test dataset shape:\", df_test_ohe.shape)","7ae8c3a0":"df_train_ohe.median().sort_values(ascending=False)","79e77f6a":"y = df_train_ohe['price_doc_log']\nX = df_train_ohe.drop(['price_doc_log'], axis=1)\n\nprint(\"X shape:\", X.shape)\nprint(\"y shape:\", y.shape)","8dfa085e":"from sklearn.model_selection import train_test_split\n\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.2, random_state=42)","e77f21f6":"from sklearn.preprocessing import StandardScaler\n\nx_sc = StandardScaler()\nX_train_scaled = pd.DataFrame(x_sc.fit_transform(X_train), columns=X_train.columns)\nX_valid_scaled = pd.DataFrame(x_sc.transform(X_valid), columns=X_valid.columns)","05c5dce7":"from sklearn.linear_model import LinearRegression\n\nlinreg = LinearRegression()\nlinreg.fit(X_train_scaled, y_train)\nlin_predictions_log = linreg.predict(X_valid_scaled)\nlin_predictions = np.exp(lin_predictions_log)","a37c5aff":"print('RMSLE linear regression (valid dataset):', np.sqrt(mean_squared_log_error(np.exp(y_valid), lin_predictions)))","b5fa4e7b":"from sklearn.tree import DecisionTreeRegressor  \n  \ntree = DecisionTreeRegressor(random_state = 42, max_depth=7, min_samples_split=20)  \ntree.fit(X_train_scaled, y_train)\n\ntree_predictions_log = tree.predict(X_valid_scaled)\ntree_predictions = np.exp(tree_predictions_log)","db693580":"print('RMSLE Decision Tree (valid dataset):', np.sqrt(mean_squared_log_error(np.exp(y_valid), tree_predictions)))","d5b33ed6":"import xgboost as xgb\nfrom sklearn.model_selection import GridSearchCV","aa8b347b":"xgb_train = xgb.DMatrix(X_train_scaled, y_train)\nxgb_valid = xgb.DMatrix(X_valid_scaled)\n\nxgb_model = xgb.XGBRegressor(seed=42)\n\nparameters = {'objective':['reg:squarederror'],\n              'learning_rate': [.03, 0.05, .07],\n#               'learning_rate': [0.05],\n              'max_depth': [5, 7],\n#               'max_depth': [5],\n              'min_child_weight': [4],\n              'subsample': [0.7],\n              'colsample_bytree': [0.7],\n              'n_estimators': [500]}\n\nxgb_grid = GridSearchCV(xgb_model,\n                        parameters,\n                        cv = 2,\n                        n_jobs = -1,\n                        verbose=True)","4c9364c9":"xgb_grid.fit(X_train_scaled, y_train)\nprint(xgb_grid.best_score_)\nprint(xgb_grid.best_params_)","b1be9b93":"xgb_grid.best_estimator_","d520e319":"xgb_predictions_log = xgb_grid.best_estimator_.predict(X_valid_scaled)\nxgb_predictions = np.exp(xgb_predictions_log)","e454e936":"print('RMSLE XGB (valid dataset):', np.sqrt(mean_squared_log_error(np.exp(y_valid), xgb_predictions)))","00eecbec":"fig, ax = plt.subplots(1, 1, figsize=(8, 10))\n_= xgb.plot_importance(xgb_grid.best_estimator_, max_num_features=30, height=0.5, ax=ax)","da5b0333":"# df_test_scaled = pd.DataFrame(x_sc.transform(df_test_ohe), columns=df_test_ohe.columns)","ab4ac16b":"# xgb_pred_test_log = xgb_model.predict(df_test_scaled)\n# xgb_pred_test = np.exp(xgb_predictions_log)\n\n# ylog_pred = xgb_model.predict(df_test_scaled)\n# y_pred = np.exp(ylog_pred)\n\n# df_sub = pd.DataFrame({'id': id_test, 'price_doc': y_pred})\n\n# df_sub.to_csv('sub.csv', index=False)","a7348e40":"# Decision Tree Regressor","c15b4c58":"\u0426\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f $price_doc$ - \u043d\u0435\u043f\u0440\u0435\u0440\u044b\u0432\u043d\u0430, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u0438\u043c\u0435\u0435\u043c \u0437\u0430\u0434\u0430\u0447\u0443 \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438.","11e1304b":"# \u041e\u0431\u044b\u0447\u043d\u0430\u044f \u041b\u0438\u043d\u0435\u0439\u043d\u0430\u044f \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044f","4f9cda3e":"# The End","a010323b":"# Boosting","bc60c3ac":"\u041f\u043e\u0447\u0435\u043c\u0443 \u044d\u0442\u043e \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u0435 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0430:\n\n1. \u041a\u043e\u0440\u044f\u0432\u044b\u0435 \u0432\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 (\u0432\u0441\u0435 \u043a\u0430\u043a \u0432 \u0436\u0438\u0437\u043d\u0438)\n2. \u0417\u0430\u0434\u0430\u0447\u0430 \u043a\u0430\u043a \u043d\u0430 \u0440\u0430\u0431\u043e\u0442\u0435, \u0442\u043e\u043b\u044c\u043a\u043e \u0435\u0449\u0435 \u0438 \u043d\u0435 \u043f\u043b\u0430\u0442\u044f\u0442 \u0434\u0435\u043d\u044c\u0433\u0438\n3. \u041d\u0435\u0430\u043d\u043e\u043d\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 - \u0445\u043e\u0442\u0435\u043b \u043f\u0440\u0438\u0434\u0443\u043c\u044b\u0432\u0430\u0442\u044c \u0444\u0438\u0447\u0438. \u0423\u0432\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u0438\u0437 \u044d\u0442\u043e\u0433\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u0441\u044f  \u00af\\_(\u30c4)_\/\u00af","185a5253":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u0447\u0442\u043e \u0438\u0437 \u0441\u0435\u0431\u044f \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0442 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u044b \u0441 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u043c\u0438:","27170669":"\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u0442\u0435\u043b\u044c\u043d\u043e, \u043d\u043e \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u0439 \u043f\u043e\u043b\u043e\u0432\u0438\u043d\u0435 \u0433\u043e\u0434\u0430 (\u0438 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e \u0432 \u043e\u043a\u0442\u044f\u0431\u0440\u0435 \u0438 \u043d\u043e\u044f\u0431\u0440\u0435) - \u0446\u0435\u043d\u044b \u043d\u0438\u0436\u0435.","e0a387ef":"\u0417\u0430\u043c\u0435\u0442\u0435\u043d \u0442\u0440\u0435\u043d\u0434 \u043d\u0430 \u0440\u043e\u0441\u0442 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 c \u0443\u0432\u0435\u043b\u0438\u0447\u0435\u043d\u0438\u0435\u043c \u0434\u0430\u0442\u044b","2c3c4cec":"# \u0410\u043d\u0430\u043b\u0438\u0437 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","383d180f":"\u041c\u0435\u043d\u044f \u0437\u0430\u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043e\u0432\u0430\u043b\u0438 - life_sq, build_year, kitch_sq ","c58e9d89":"# \u0410\u043d\u0430\u043b\u0438\u0437 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0432 \u0434\u0430\u043d\u043d\u044b\u0445","875770f1":"![image.png](attachment:image.png)","6515ab72":"# \u0417\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438","d771d8d4":"\u041d\u0430\u0447\u043d\u0435\u043c \u0441 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432:","e5d5f156":"\u041c\u0435\u0442\u0440\u0438\u043a\u0430 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 - **Root Mean Squared Logarithmic Error (RMSLE)**. \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438:\n1. \u0423\u0441\u0442\u043e\u0439\u0447\u0438\u0432\u0430 \u043a \u0432\u044b\u0431\u0440\u043e\u0441\u0430\u043c\n2. \u0411\u043e\u043b\u044c\u0448\u0435 \u0448\u0442\u0440\u0430\u0444\u0443\u0435\u0442 \u0437\u0430 \u043d\u0435\u0434\u043e\u043f\u0440\u043e\u0433\u043d\u043e\u0437, \u0447\u0435\u043c \u043f\u0435\u0440\u0435\u043f\u0440\u043e\u0433\u043d\u043e\u0437\n3. \u0414\u043e\u0431\u0440\u044b\u0435 \u043b\u044e\u0434\u0438 \u0437\u0430\u043f\u0438\u043b\u0438\u043b\u0438 \u0435\u0435 \u0432 sklearn (\u043d\u043e \u0442\u043e\u043b\u044c\u043a\u043e \u0431\u0435\u0437 np.sqrt)\n","0072a23a":"\u0411\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u043e \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 - \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0435.","1972fc53":"> # \u0410\u043d\u0430\u043b\u0438\u0437 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439","b75d4d7c":"\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u043e\u0432 \u043e\u0442\u043b\u0438\u0447\u0430\u044e\u0442\u0441\u044f \u043d\u0430 \u043f\u043e\u0440\u044f\u0434\u043a\u0438, \u043d\u0430\u043c \u043f\u043e\u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435. \u041d\u043e \u0434\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043e\u0442\u0434\u0435\u043b\u0438\u043c \u0446\u0435\u043b\u0435\u0432\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e.","976cade1":"![image.png](attachment:image.png)","85b7c1ff":"# Housing Market Price Prediction","6da5fdae":"# \u041a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","cafb79a5":"# \u041c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","b25f4254":"![](https:\/\/miro.medium.com\/max\/402\/1*2foyXif7hwkO8wWB5T9KtQ.png)","f136319a":"\u0417\u0430\u0434\u0430\u0447\u0430 - \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c, \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0449\u0438\u0439 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u043d\u0435\u0434\u0432\u0438\u0436\u0438\u043c\u043e\u0441\u0442\u0438 \u0432 \u041c\u043e\u0441\u043a\u0432\u0435 \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a \u0436\u0438\u043b\u044c\u044f \u0438 \u043c\u0430\u043a\u0440\u043e\u044d\u043a\u043e\u043d\u043e\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432.","304e51d0":"\u0415\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0447\u043d\u044b\u0435 \u0432\u044b\u0431\u0440\u043e\u0441\u044b - \u043d\u043e \u043d\u0435\u043f\u043e\u043d\u044f\u0442\u043d\u0430 \u0438\u0445 \u043f\u0440\u0438\u0440\u043e\u0434\u0430 (\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u043e\u0433\u0440\u043e\u043c\u043d\u0430\u044f kitch_sq - \u044d\u0442\u043e \u043f\u0440\u043e \u0437\u0434\u0430\u043d\u0438\u044f \u043e\u0431\u0449\u0435\u043f\u0438\u0442\u0430). \u041f\u043e\u043a\u0430 \u043d\u0435 \u0431\u0443\u0434\u0435\u043c \u043e\u0442 \u043d\u0438\u0445 \u0438\u0437\u0431\u0430\u0432\u043b\u044f\u0442\u044c\u0441\u044f."}}