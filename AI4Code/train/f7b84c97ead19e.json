{"cell_type":{"1ebac34e":"code","f1772815":"code","01c1a5aa":"code","0e5a3af1":"code","b52c3541":"code","cb14bca6":"code","df259047":"code","ea69012c":"code","e747fed6":"code","3e977940":"code","d1f1b197":"markdown","4f667eef":"markdown","1ba2b68e":"markdown","5558a9a6":"markdown","cca6d905":"markdown"},"source":{"1ebac34e":"'''\nAuthor: Ritwik Biswas\nDescription: Using a Keras Sequential Neural Network to predict whether a mushroom is edible or poisonous\n'''\nimport numpy as np \nimport pandas as pd \nfrom keras.models import Sequential\nfrom keras.layers import Dense\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport os\n\n\n#random seed for reproducibility\nnp.random.seed(7)","f1772815":"df = pd.read_csv('..\/input\/mushrooms.csv')\ndf.head()","01c1a5aa":"total_size = df['class'].count()\nprint(\"Size: \"+ str(total_size))\n\nprint(\"First entry sample:\")\nprint(df.iloc[0])","0e5a3af1":"class_list = []\nfeature_list = []\n\n#Hash table for numerical encoding of features\nnum_lookup = {'a': 1,'b':2,'c':3,'d':4,'e':5,'f':6,'g':7,'h':8,'i':9,'j':10,'k':11,'l':12,'m':13,\n              'n':14,'o':15,'p':16,'q':17,'r':18,'s':19,'t':20,'u':21,'v':22,'w':23,'x':24,'y':25,'z':26}\nclass_training = {16: 0, 5:1} #for binary classes to be assigned from 0 to 1\nclass_lookup = {0: 'poisonus', 1: 'edible'}\ndef encode(vec):\n    '''\n    Takes an shroom feature vector and encodes it to a numerical feature space\n    '''\n    encoded_temp = []\n    for i in vec:\n        try:\n            val= num_lookup[i]\n        except:\n            val = 0\n        encoded_temp.append(val)\n    return encoded_temp\n#Encode discrete features to numerical feature space and split \nfor row in df.iterrows():\n    index, data = row\n    temp = encode(data.tolist())\n    class_list.append(class_training[temp[0]])\n    feature_list.append(temp[1:])\n    \nprint(\"One data point:\")\nprint(class_list[8000])\nprint(feature_list[8000])","b52c3541":"training_size = int(0.9*total_size)\ntrain_class = np.array(class_list[:training_size])\ntrain_features = np.array(feature_list[:training_size])\ntest_class = np.array(class_list[training_size:])\ntest_features = np.array(feature_list[training_size:])\nprint(\"Training Length: \" + str(len(train_features)))\nprint(\"Testing Length: \" + str(len(test_features)))","cb14bca6":"# 4 layer network [20->10->5->1]\nmodel = Sequential()\nmodel.add(Dense(20, input_dim=22, activation='relu'))\nmodel.add(Dense(10, activation='relu'))\nmodel.add(Dense(5, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))","df259047":"# Define loss and optimizer\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])","ea69012c":"model.fit(train_features, train_class, epochs=100, batch_size=10)","e747fed6":"# Evaluate on Testing set\nscores = model.evaluate(test_features, test_class)\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))","3e977940":"#shrooms to test\ntest_shrooms = [['x', 'y', 'w', 't', 'p', 'f', 'c', 'n', 'n', 'e', 'e', 's', 's', 'w', 'w', 'p', 'w', 'o', 'p', 'k', 's', 'u'], # poisonous\n                ['x', 's', 'y', 't', 'a', 'f', 'c', 'b', 'k', 'e', 'c', 's', 's', 'w', 'w', 'p', 'w', 'o', 'p', 'n', 'n', 'g'], # edible\n                ['x', 's', 'g', 'f', 'n', 'f', 'w', 'b', 'k', 't', 'e', 's', 's', 'w', 'w', 'p', 'w', 'o', 'e', 'n', 'a', 'g']] # edible\n#encode shrooms\nencoded_shrooms = []\nfor shroom in test_shrooms:\n    encoded_shrooms.append(encode(shroom))\nencoded_shrooms = np.array(encoded_shrooms)\n\n#prediction\npredictions = model.predict(encoded_shrooms)\nprint(\"raw_predictions: \")\nprint(predictions)\n\n#decode predictions\nprint(\"\\ndecoded_predictions: \")\nfor result in predictions:\n    print(class_lookup[int(round(result[0]))])","d1f1b197":"## Model Creation\/Training","4f667eef":"### Train Model","1ba2b68e":"## Data Import and Pre-processing","5558a9a6":"### Sample Predictions","cca6d905":"### Data Split and Encoding"}}