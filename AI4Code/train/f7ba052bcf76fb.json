{"cell_type":{"db817a34":"code","75966857":"code","a01f2bbf":"code","557c48ea":"code","dc2f2cfd":"code","edefac4c":"code","6f81f780":"code","4fb8b539":"code","2c581f1a":"code","33e581c1":"code","33a9e1c6":"code","1f386562":"code","de52f7e1":"code","6f16c63c":"code","f080221a":"code","f6213f94":"code","a29322f0":"code","0436b211":"code","0fae76b4":"code","8fa8b982":"code","026c5ee8":"code","1b7e41ab":"code","09120c64":"code","9c338784":"code","d3c6a036":"code","d906ade7":"code","bf087fc2":"code","61e263b4":"code","5a8137d0":"code","6ddeb44d":"code","65733df5":"code","23ca9f7b":"code","3b3919ae":"code","1b21b703":"code","1f6e4e66":"code","14e4f234":"code","a2729ec1":"code","47b94ccd":"code","ee6d09b9":"code","9aefa988":"code","9b9becb7":"code","60c1a88f":"code","3d7fea13":"code","a265d2ad":"code","569e0897":"code","d11af449":"code","d617c7ee":"code","137f912a":"code","7ceaccdd":"code","7a394c7e":"code","170b06b7":"code","c0914e04":"code","9f1a3c00":"code","4d9a1dbf":"code","71eefdd4":"code","79d76dc9":"code","f7236806":"code","a9c67f42":"code","a7f273da":"code","f43e70a6":"code","10d1b0bd":"code","e4cb3f05":"code","34a0d458":"code","a677d7c6":"code","652c59de":"code","077ff10f":"code","e1118042":"code","aeea9266":"code","708d5e2a":"code","a0a7a05e":"code","12951b3b":"code","7e1a237f":"code","90d23dd7":"code","22f5a03e":"code","be8d96f4":"markdown","ca86838b":"markdown","672ed667":"markdown","48b2abdc":"markdown","215b643e":"markdown","a17447f1":"markdown","81360491":"markdown","d60a56dc":"markdown","27b7fb8f":"markdown","0336e1a4":"markdown","c40ccba7":"markdown","daf15586":"markdown","effbabba":"markdown","fba75e00":"markdown","7c8dccfe":"markdown","49f177dc":"markdown","38305a7d":"markdown","c12d6670":"markdown","0613f439":"markdown","f4257130":"markdown","01bd9298":"markdown","db68d952":"markdown","f0c4c08b":"markdown","37819808":"markdown","36dd6b92":"markdown","9440e9b8":"markdown","7f0bb91a":"markdown","bc373f0e":"markdown","7042e4ec":"markdown"},"source":{"db817a34":"!cat \/kaggle\/input\/odfinvasivespecies1\/invasive-species-workshop-1\/requirements.txt | xargs -n 1 pip install","75966857":"!curl -sL https:\/\/deb.nodesource.com\/setup_13.x | bash -\n!apt-get install -y nodejs","a01f2bbf":"# Set up the Kepler GL widget to display maps inline in the notebooks\n!jupyter nbextension install --py --sys-prefix keplergl\n!jupyter nbextension enable --py --sys-prefix keplergl","557c48ea":"# Render test for Kepler - if you don't see a map, please refresh this page. \nfrom keplergl import KeplerGl\nmap_1 = KeplerGl()\nmap_1","dc2f2cfd":"from pathlib import Path\nkaggle_path = Path('\/kaggle\/input\/odfinvasivespecies1\/invasive-species-workshop-1')","edefac4c":"import sys\nimport warnings\n\nif not sys.warnoptions:\n    warnings.simplefilter(\"ignore\")\n    \nfrom IPython.display import Image\nfrom IPython.core.display import HTML\nfrom IPython.display import IFrame\n\n%matplotlib inline","6f81f780":"# Imports\nimport numpy as np\nimport pandas as pd\nimport geopandas as gpd\nimport json\nimport swifter","4fb8b539":"# Load all the data we have\n\n## Presence\npres_df = pd.read_csv(str(Path(kaggle_path, 'Presence\/records.csv')),\n                      delimiter='\\t')[['decimalLatitude', 'decimalLongitude', \n                                       'eventDate']].dropna().set_index('eventDate')\npres_df = pres_df.sort_index().reset_index()\n\n## Port data\nbaltic_ports = pd.read_csv(Path(kaggle_path,'baltic_ports.txt'), sep=' ', index_col=0)\n\n## River data\nhydro = gpd.GeoDataFrame.from_file(Path(kaggle_path,'Europe_Hydrography\/Europe_Hydrography.shp')).to_json()","2c581f1a":"from keplergl import KeplerGl\nmap_1 = KeplerGl(width = 800, height=600)\nmap_1.add_data(pres_df, name='pres')\nmap_1","33e581c1":"from keplergl import KeplerGl\nmap_1 = KeplerGl(width = 800, height=600)\nmap_1.add_data(pres_df, name='presence')\nmap_1.add_data(baltic_ports, name='absence')\nmap_1.add_data(hydro, name='rivers')\nmap_1","33a9e1c6":"all_ports = [[feature['geometry']['coordinates'][1], feature['geometry']['coordinates'][0]] for \\\n             feature in json.load(open(Path(kaggle_path, 'ports.json')))['features']]","1f386562":"from sklearn.neighbors import KNeighborsClassifier","de52f7e1":"def get_nearest_station(array, w_stations):\n    knn = KNeighborsClassifier(algorithm='ball_tree', n_neighbors=1, metric='euclidean')\n    X = np.array([[i[0], i[1]] for i in w_stations])\n    y = np.arange(len(w_stations))\n    knn.fit(X, y)\n    ids = knn.predict(array)\n    return ids","6f16c63c":"nsoc_data = pd.read_csv(Path(kaggle_path, 'north_sea_temp_salinity_historical.txt'), sep=' ')\nnsoc_data['coordinates'] = list(zip(nsoc_data.lat, nsoc_data.lon))\nnsoc_data = nsoc_data[(nsoc_data.temp > -100) & (nsoc_data.salinity > -100)]","f080221a":"pres_df['coordinates'] = list(zip(pres_df.decimalLatitude, pres_df.decimalLongitude))\npres_df['reference_port'] = pres_df.swifter.apply(lambda x: \\\n                                          all_ports[get_nearest_station(\n                                          np.array(x['coordinates']).reshape(1, -1), all_ports)[0]], 1)\npres_df[['ref_port_lat', 'ref_port_lon']] = pd.DataFrame(pres_df['reference_port'].tolist(), index=pres_df.index)    \n\npres_df[['temp', 'salinity']] = pres_df.swifter.apply(lambda x: \\\n                                nsoc_data[nsoc_data.date.str[:7] == x['eventDate'][:7]].iloc[get_nearest_station(\n                                np.array(\n                                x['reference_port']).reshape(1, -1),\n                                nsoc_data[nsoc_data.date.str[:7] == x['eventDate'][:7]]['coordinates'])[0]] \\\n                                [['temp', 'salinity']] \n                                if len(nsoc_data[nsoc_data.date.str[:7] == x['eventDate'][:7]]) > 0 else None, 1)","f6213f94":"# export for fast import\n#pres_df.to_csv('pres_df.csv')","a29322f0":"pres_df = pd.read_csv(Path(kaggle_path, 'pres_df.csv'))","0436b211":"np_ports = pd.read_csv(Path(kaggle_path,'baltic_ports.txt'), sep=' ', index_col=0)\nbaltic_temp = pd.read_csv(\n                Path(kaggle_path,'baltic_temperatures_latest.txt'), sep='\\t', encoding='cp1252')[['Provtagningsdatum', \n                                                                                'Provets latitud (DD)',\n                                                                                'Provets longitud (DD)',\n                                                                                'M\u00e4tv\u00e4rde']].dropna()\nbaltic_sal = pd.read_csv(\n                Path(kaggle_path,'baltic_salinity_latest.txt'), sep='\\t', encoding='cp1252')[['Provtagningsdatum',\n                                                                            'Provets latitud (DD)',\n                                                                            'Provets longitud (DD)',\n                                                                            'M\u00e4tv\u00e4rde']].dropna()","0fae76b4":"baltic_temp = baltic_temp[baltic_temp.Provtagningsdatum.str[5:7].isin(['12', '01', '02'])]\nbaltic_sal = baltic_sal[baltic_sal.Provtagningsdatum.str[5:7].isin(['12', '01', '02'])]","8fa8b982":"baltic_temp.columns = ['date', 'lat', 'lon', 'temperature']\nbaltic_sal.columns = ['date', 'lat', 'lon', 'salinity']","026c5ee8":"baltic_temp[['lat', 'lon', 'temperature']] = baltic_temp[['lat', 'lon', 'temperature']].apply(\n                                             lambda x: x.str.replace(',', '.')).astype(float)\nbaltic_sal[['lat', 'lon', 'salinity']] = baltic_sal[['lat', 'lon', 'salinity']].apply(\n                                            lambda x: x.str.replace(',', '.')).astype(float)","1b7e41ab":"baltic_temp = baltic_temp.groupby(by=['lat','lon']).mean().reset_index()\nbaltic_sal = baltic_sal.groupby(by=['lat','lon']).mean().reset_index()","09120c64":"np_ports['temp'] = [baltic_temp.iloc[i]['temperature'] for \n                    i in get_nearest_station([i[0] for i in zip(\n                    np_ports[['lat', 'lon']].values)], \n                    [i[0] for i in zip(baltic_temp[['lat', 'lon']].values)])]\nnp_ports['salinity'] = [baltic_sal.iloc[i]['salinity'] for i in get_nearest_station([i[0] for i in zip(\n                    np_ports[['lat', 'lon']].values)], \n                    [i[0] for i in zip(baltic_sal[['lat', 'lon']].values)])]","9c338784":"p_plot = pres_df[['eventDate', 'ref_port_lat', 'ref_port_lon', 'temp', 'salinity']].iloc[1:]\np_plot.columns = ['date', 'lat', 'lon', 'temp', 'salinity']\np_plot = p_plot[p_plot.date.str[5:7].isin(['10', '11', '12', '01', '02'])]\np_plot = p_plot.groupby(by=['lat','lon']).mean().reset_index()\np_plot['obs'] = 1","d3c6a036":"np_ports['obs'] = 0","d906ade7":"plot_df = pd.concat([p_plot[['lat', 'lon', 'temp', 'salinity', 'obs']], \n                     np_ports[['lat', 'lon', 'temp', 'salinity', 'obs']]])","bf087fc2":"plot_df = plot_df.dropna()","61e263b4":"map_2 = KeplerGl(width = 800, height=600)\nmap_2.add_data(plot_df, name='o')\nmap_2","5a8137d0":"from sklearn import tree\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","6ddeb44d":"X = plot_df[['lat', 'lon', 'temp', 'salinity']]\ny = plot_df['obs']","65733df5":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=777, shuffle=False)","23ca9f7b":"clf = tree.DecisionTreeClassifier(max_depth=2)","3b3919ae":"clf = clf.fit(X_train[['temp', 'salinity']], y_train)","1b21b703":"y.value_counts()","1f6e4e66":"accuracy_score(y_test, clf.predict(X_test[['temp', 'salinity']]))","14e4f234":"plt.figure(figsize=(15,10))\ntree.plot_tree(clf.fit(X_train[['temp', 'salinity']], y_train)) ","a2729ec1":"IFrame(src='https:\/\/en.wikipedia.org\/wiki\/Dikerogammarus_villosus', width=1000, height=400)","47b94ccd":"box_df = plot_df.iloc[:,2:]\nbox_df['obs'] = box_df['obs'].astype(str)\nbox_df['temp'] = box_df['temp'].astype(float)\nbox_df['salinity'] = box_df['salinity'].astype(float)\nbox_df.boxplot(column=['temp', 'salinity'], by='obs', figsize=(15,5))","ee6d09b9":"from pyimpute import load_training_vector, load_targets, impute, evaluate_clf\nfrom sklearn.ensemble import RandomForestClassifier","9aefa988":"post_pres_df = pd.read_csv(Path(kaggle_path, 'pres_df.csv'))","9b9becb7":"post_pres_df = post_pres_df[['decimalLatitude', 'decimalLongitude']]","60c1a88f":"post_pres_df['obs'] = 1","3d7fea13":"np_ports[['decimalLatitude', 'decimalLongitude']] = np_ports[['lat', 'lon']]","a265d2ad":"np_ports['obs'] = 0","569e0897":"total_df = post_pres_df.append(np_ports[['decimalLatitude', 'decimalLongitude', 'obs']])","d11af449":"total_df.drop_duplicates(['decimalLatitude', 'decimalLongitude', 'obs'], inplace=True)","d617c7ee":"total_df.to_csv(Path(kaggle_path,'total_df.csv'))","137f912a":"total_df = pd.read_csv(Path(kaggle_path,'total_df.csv'))","7ceaccdd":"total_df = gpd.GeoDataFrame(total_df, \n                                 geometry=gpd.points_from_xy(total_df.decimalLongitude, \n                                                                   total_df.decimalLatitude))","7a394c7e":"total_df[['obs', 'geometry']].to_file(Path(kaggle_path,\"output.json\"), driver=\"GeoJSON\")","170b06b7":"import rasterstats\nimport rasterio\nfrom rasterio.plot import show, show_hist, plotting_extent","c0914e04":"ls","9f1a3c00":"src = rasterio.open(Path(kaggle_path,'BO\/Present.Surface.Salinity.Mean.tif'))\nplt.figure(figsize=(15,10))\nplt.imshow(src.read(1, masked=True))\nplt.colorbar()","4d9a1dbf":"src = rasterio.open(Path(kaggle_path,'BO\/Present.Surface.Temperature.Mean.tif'))\nplt.figure(figsize=(15,10))\nplt.imshow(src.read(1, masked=True))\nplt.colorbar()","71eefdd4":"from affine import Affine\n\nxmin = -15\nxmax = 50\nymin = 30\nymax = 70\n\n\ndef window_from_extent(xmin, xmax, ymin, ymax, aff):\n    col_start, row_start = ~aff * (xmin, ymax)\n    col_stop, row_stop = ~aff * (xmax, ymin)\n    return ((int(row_start), int(row_stop)), (int(col_start), int(col_stop)))","79d76dc9":"src = rasterio.open(Path(kaggle_path,'BO\/Present.Surface.Temperature.Mean.tif'))","f7236806":"europe_window = window_from_extent(xmin, xmax, ymin, ymax, src.transform)","a9c67f42":"europe_view = src.read(1, window=europe_window)","a7f273da":"europe_transform = src.window_transform(europe_window)","f43e70a6":"with rasterio.open(Path(kaggle_path,'BO\/europe_temp.tif'), #filename\n                   'w', # file mode, with 'w' standing for \"write\"\n                   driver='GTiff', # format to write the data\n                   height=europe_view.shape[0], # height of the image, often the height of the array\n                   width=europe_view.shape[1], # width of the image, often the width of the array\n                   count=1, # the number of bands to write\n                   dtype='float64',# the dtype of the data, usually `ubyte` if data is stored in integers\n                   nodata=src.nodata,\n                   crs=src.crs, # the coordinate reference system of the data\n                   transform=europe_transform # the affine transformation for the image\n                  ) as outfile:\n    outfile.write(europe_view, indexes=1) # write the `austin_nightlights` as the first band\n","10d1b0bd":"europe = rasterio.open(Path(kaggle_path,'BO\/europe_temp.tif'))\nplt.figure(figsize=(15,10))\nplt.imshow(europe.read(1, masked=True))\nplt.colorbar()","e4cb3f05":"explanatory_rasters = [Path(kaggle_path,'BO\/europe_salinity.tif'),\n                       Path(kaggle_path,'BO\/europe_temp.tif')]\nresponse_data = Path(kaggle_path,'output.json')\n\ntrain_xs, train_y = load_training_vector(response_data,\n                                         explanatory_rasters,\n                                         response_field=\"obs\")","34a0d458":"train_xs","a677d7c6":"valid = np.where(np.sum(train_xs == [None, None], axis=1) != 2)[0]","652c59de":"train_xs = train_xs[valid]\ntrain_y = train_y[valid]","077ff10f":"clf = RandomForestClassifier(n_estimators=1000, n_jobs=1, class_weight=\"balanced\")\nclf.fit(train_xs.astype('float32'), train_y.astype('float32'))","e1118042":"evaluate_clf(clf, train_xs, train_y)","aeea9266":"target_xs, raster_info = load_targets(explanatory_rasters)","708d5e2a":"import matplotlib.pyplot as plt\nimport os\n%matplotlib inline","a0a7a05e":"def plotit(x, title, cmap='Blues'):\n    plt.figure(figsize=(15,10))\n    plt.imshow(x, cmap=cmap, interpolation='nearest')\n    plt.colorbar()\n    plt.title(title)\n    plt.show()\n","12951b3b":"impute(target_xs, clf, raster_info, outdir=Path(kaggle_path,'BO'),\n        linechunk=1000, class_prob=True, certainty=True)\n\nassert os.path.exists(Path(kaggle_path,\"BO\/responses.tif\"))\nassert os.path.exists(Path(kaggle_path,\"BO\/certainty.tif\"))\nassert os.path.exists(Path(kaggle_path,\"BO\/probability_0.tif\"))\nassert os.path.exists(Path(kaggle_path,\"BO\/probability_1.tif\"))","7e1a237f":"res = rasterio.open(Path(kaggle_path,'BO\/probability_1.tif'))","90d23dd7":"masking = europe.read(1, masked=True).mask","22f5a03e":"plotit(np.where(masking, -0.1, res.read(1, masked=True)), 'D. Villosus Climatic Suitability', cmap='GnBu')","be8d96f4":"<div class=\"alert alert-info\" role=\"alert\">\n\n### Tree Model for Classification\n    \n<\/div>","ca86838b":"<div class=\"alert alert-success\" role=\"alert\">\n\n\n### Climatic Suitability Map\n    \n<\/div>","672ed667":"<div class=\"alert alert-info\" role=\"alert\">\n\n    \n### Sanity check \n    \nWe can now investigate whether our temperature and salinity data makes sense in the context of our port locations. \nOur processed dataframe can now be passed as a single layer to Kepler GL.\n    \nIn the Point layer, we can now colour each point by the temperature value. \n    \nAnother way to look at this data is to choose \"Hexbin\" under the Basic section, and then customise the height based on the temperature value. This is more useful when many features are available. \n    \n<\/div>\n\n<div class=\"progress\">\n  <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 50%;\" aria-valuenow=\"50\" aria-valuemin=\"0\" aria-valuemax=\"100\">50%<\/div>\n<\/div>","48b2abdc":"<div class=\"alert alert-info\" role=\"alert\">\n    \n### NOTE: Data folder should be at the same level as the notebooks provided. \n    \n<\/div>\n","215b643e":"![](https:\/\/www.oceanecology.ca\/species_model_data.jpg)","a17447f1":"<div class=\"alert alert-info\" role=\"alert\">\n\n### Subtask: Matching each port to its nearest weather observation\n    \n<\/div>","81360491":"<div class=\"jumbotron jumbotron-fluid\">\n  <div class=\"container\">\n    <h1 class=\"display-4\">Invasive Species Prediction - D. Villosus<\/h1>\n    <p class=\"lead\">A short notebook introducing techniques for GIS Data analysis on the potential migration of the Killer Shrimp into the Baltic Sea region.<\/p>\n  <\/div>\n<\/div>","d60a56dc":"<div class=\"alert alert-info\" role=\"alert\">\n\n\n#### Adding features to the model can simply be done by adding more rasters to the input\n    \n<\/div>\n\n","27b7fb8f":"<div class=\"alert alert-info\" role=\"alert\">\n\n\n### European Cropped Raster\n    \n<\/div>","0336e1a4":"<div class=\"alert alert-info\" role=\"alert\">\n    \n### Next question: How do we visualize this?\n    \n<\/div>","c40ccba7":"<div>\n<img src=\"https:\/\/www.geosci-model-dev.net\/12\/1189\/2019\/gmd-12-1189-2019-f01-web.png\" width=\"500\"\/>\n<\/div>","daf15586":"##### Dont run","effbabba":"<div class=\"alert alert-info\" role=\"alert\">\n\n\n### ML model Pipeline\n    \n<\/div>","fba75e00":"<div class=\"alert alert-success\" role=\"alert\">\n\n### So far we have only visualisation, now some modelling...\n<\/div>\n<div class=\"progress\">\n  <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 25%;\" aria-valuenow=\"25\" aria-valuemin=\"0\" aria-valuemax=\"100\">25%<\/div>\n<\/div>","7c8dccfe":"<div class=\"alert alert-info\" role=\"alert\">\n\n\n### Visualising rasters\n\n\n<\/div>\n","49f177dc":"<div class=\"alert alert-info\" role=\"alert\">\n\n    \n### What about rasters?\n    \n<\/div>\n\n<div class=\"progress\">\n  <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 100%;\" aria-valuenow=\"100\" aria-valuemin=\"0\" aria-valuemax=\"100\">100%<\/div>\n<\/div>","38305a7d":"<div class=\"alert alert-warning\" role=\"alert\">\n\n### For our purposes, we focus on the winter months of December - February\n    \n<\/div>\n","c12d6670":"![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcR5eEvt95JEQ0TwjMr_Wk0Aw4E0QD1XkxgPyjWaMgClG1o8-btIcQ&s)","0613f439":"<div class=\"alert alert-info\" role=\"alert\">\n\n### Adding layers on top\n    \n<\/div>","f4257130":"<div class=\"alert alert-info\" role=\"alert\">\n\n\n### Now that we have a pipeline we can add many other features:\n\n- Substrates (sand or rocks)\n- Altitude\n- ...etc\n    \n<\/div>","01bd9298":"<div class=\"alert alert-info\" role=\"alert\">\n\n    \n### Sanity check \n    \nFrom Wikipedia we can glean the climatic conditions under which the Killer Shrimp can survive and we can cross-reference this with our model results.\n\n<\/div>\n\n<div class=\"progress\">\n  <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 75%;\" aria-valuenow=\"75\" aria-valuemin=\"0\" aria-valuemax=\"100\">75%<\/div>\n<\/div>","db68d952":"<div class=\"alert alert-info\" role=\"alert\">\n\n### Simple Kepler GL layer\n    \n<\/div>","f0c4c08b":"<div class=\"alert alert-success\" role=\"alert\">\n\n### So, we have found some data:\n\n1. Port locations in Europe (EMODNET Human Activities)\n2. Ocean surface temperatures and salinity for Baltic Sea (SMHI) and North Sea regions (SeaDataNet)\n3. Presence data of D. Villosus from observations ranging from 1928-2019 (from GBIF)\n    \n<\/div>\n\n<div class=\"progress\">\n  <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 0%;\" aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"100\">0%<\/div>\n<\/div>","37819808":"<div class=\"alert alert-warning\" role=\"alert\">\n\n#### Some assumptions:\n#### 1. The ports in the baltic are labelled \"absence\" locations\n#### 2. We assume that the nearest measurement is appropriate for a given location (i.e. no interpolation)\n    \n<\/div>\n\n\n","36dd6b92":"<div class=\"alert alert-info\" role=\"alert\">\n\n## Question: How do temperature and salinity affect the presence of killer shrimp?\n    \n<\/div>","9440e9b8":"<div class=\"alert alert-info\" role=\"alert\">\n\n\n### Modelling Species Distribution\n\n\n<\/div>\n\n","7f0bb91a":"<div class=\"alert alert-success\" role=\"alert\">\n\n<p><img src=\"https:\/\/d1a3f4spazzrp4.cloudfront.net\/kepler.gl\/website\/icons\/kepler.gl-logo.png\" align=\"left\" alt=\"Kepler GL\" width=\"200\"><\/p>\n<p align=\"left\">Kepler.gl is a powerful open source geospatial analysis tool for large-scale data sets.<\/p>\n    \n<\/div>","bc373f0e":"<div class=\"alert alert-info\" role=\"alert\">\n\n    \n### How does the model decide between the two classes?\n    \n<\/div>","7042e4ec":"![](https:\/\/d1a3f4spazzrp4.cloudfront.net\/kepler.gl\/website\/showcase\/lines-s.png)"}}