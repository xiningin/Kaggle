{"cell_type":{"eacabcd3":"code","d20a3964":"code","7c02c4a9":"code","ded0e6ed":"code","0d1e2702":"code","db474536":"code","cf614857":"code","3eba85ca":"code","72d510cd":"code","096472fd":"code","f38bd61f":"code","f408edca":"code","fcd4af4c":"code","1452d52c":"code","fa1e1785":"code","d6b802ad":"code","4543c2ce":"code","e6f60a49":"markdown","1ac85c09":"markdown","ad216dd7":"markdown","06b32b78":"markdown","8c0d1bb8":"markdown","eaeb9444":"markdown","8c7943cf":"markdown","0c1eef5b":"markdown","7959f7be":"markdown","564ee4b3":"markdown","8b35b091":"markdown","2fac6df4":"markdown","251a418c":"markdown","ee9d2377":"markdown","4ba27bf7":"markdown","8353e6cd":"markdown"},"source":{"eacabcd3":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nimport folium \nfrom folium import plugins\n# from folium.plugins import HeatMap\n\nimport json \nfrom datetime import datetime\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","d20a3964":"patient = pd.read_csv('\/kaggle\/input\/coronavirusdataset\/PatientInfo.csv')\nroute = pd.read_csv('\/kaggle\/input\/coronavirusdataset\/PatientRoute.csv')\nregion = pd.read_csv('\/kaggle\/input\/coronavirusdataset\/Region.csv')","7c02c4a9":"patient.head()","ded0e6ed":"region.head()","0d1e2702":"m = folium.Map([36, 128], zoom_start=7) \n\n# you can try these options\n# m = folium.Map([37, 128], zoom_start=7, tiles='Stamen Terrain') \n# m = folium.Map([37, 128], zoom_start=7, tiles='Stamen Toner') \n\nm","db474536":"m = folium.Map([36, 128], zoom_start=7) \n\nplugins.Fullscreen(position='topright',  # Full screen\n                   title='Click to Expand', \n                   title_cancel='Click to Exit', \n                   force_separate_button=True).add_to(m)\n\nplugins.MousePosition().add_to(m) ## you can easily get coordinates.\n\n\nm","cf614857":"regional_patient = pd.merge(patient[['patient_id','confirmed_date','sex','age','province','city']],region[['province','city','latitude','longitude']], how = 'left', on = ['province','city'])\ndisplay(regional_patient.head())\nprint('There are a few missing values')\nprint('\uc57d\uac04\uc758 missing \uac12\ub4e4\uc774 \uc788\ub124\uc694. \ubd84\uc11d\ud560 \ub54c \uc720\uc758\ud574\uc57c\ud560 \uac83 \uac19\uc2b5\ub2c8\ub2e4.')\ndisplay(regional_patient.isnull().sum() \/ regional_patient.shape[0])","3eba85ca":"regional_count = regional_patient[['latitude','longitude']].dropna() # drop missing values\n\nm = folium.Map([36, 128], zoom_start=7)\n\nplugins.MousePosition().add_to(m) \n\nplugins.MarkerCluster(regional_count).add_to(m)\n\nm","72d510cd":"male_patient = regional_patient\\\n.query('sex in (\"male\")')[['latitude','longitude']].dropna()\n\nfemale_patient = regional_patient\\\n.query('sex in (\"female\")')[['latitude','longitude']].dropna()\n\n\nm = folium.Map([36, 128], zoom_start=7) \n\ninitial = folium.plugins.MarkerCluster(control=False)\n\nm.add_child(initial)\n\n\nfemale_g = plugins.FeatureGroupSubGroup(initial, 'Female')\nm.add_child(female_g)\n\nmale_g = plugins.FeatureGroupSubGroup(initial, 'Male') \nm.add_child(male_g)\n\n\nplugins.MarkerCluster(female_patient).add_to(female_g)\n\nplugins.MarkerCluster(male_patient).add_to(male_g)\n\n\n\nfolium.LayerControl(collapsed=False).add_to(m)\n\nm","096472fd":"heat_data = regional_patient\\\n.groupby(['latitude','longitude'])['patient_id'].count().reset_index()\\\n.values\\\n.tolist()\n\nm = folium.Map([36, 128], zoom_start=7)#, tiles = 'stamentoner')\n\nfolium.plugins.HeatMap(heat_data).add_to(m)\n\nm","f38bd61f":"heat_data = region[['latitude','longitude','nursing_home_count']].values.tolist() # nursing home count \n\nmark_data = regional_patient[['latitude','longitude']].dropna() # drop missing values\n\nm = folium.Map([36, 128], zoom_start=7)\n\nplugins.MarkerCluster(mark_data).add_to(m) # Layer 1\n\nfolium.plugins.HeatMap(heat_data, max_opacity = 0.3).add_to(m) # Layer 2\n\nm","f408edca":"#prepare data\n\nregional_patient_bytime = regional_patient\\\n.groupby(['confirmed_date','latitude','longitude'])['patient_id'].count().reset_index()\\\n.sort_values(by = 'confirmed_date')\n\ndate_rng = pd.date_range(regional_patient_bytime['confirmed_date'].min(), regional_patient_bytime['confirmed_date'].max())\ndate_rng = [str(i)[:10] for i in date_rng]\n\nall_date_region = pd.DataFrame({'confirmed_date' : np.repeat(date_rng,region[['latitude','longitude']].drop_duplicates().shape[0]),\n              'latitude' : np.tile(list(region['latitude'].drop_duplicates()), len(date_rng)),\n              'longitude' : np.tile(list(region['longitude'].drop_duplicates()), len(date_rng))})\n\nall_date_region = pd.merge(all_date_region, regional_patient_bytime, on = ['confirmed_date','latitude','longitude'], how = 'left').fillna(0)\nall_date_region['cumsum'] = all_date_region.groupby(['latitude','longitude'])['patient_id'].cumsum()\n\nall_date_region = all_date_region[all_date_region['cumsum'] != 0]\n\ntime_index, data = [], []\n\nfor date in all_date_region['confirmed_date'].unique():\n    time_index += [date[6:].replace('-','\/')]\n    temp_list = all_date_region.query('confirmed_date == @date')[['latitude','longitude','cumsum']].values.tolist()\n    data += [temp_list]\n    del temp_list","fcd4af4c":"data[:5], time_index[:5]","1452d52c":"# make a map\n    \nm = folium.Map([36, 128], zoom_start=7)#, tiles = 'Mapbox Bright')\n\nhm = folium.plugins.HeatMapWithTime(data, index=time_index, auto_play=False, min_opacity=0.3, radius = 25, )\n\nhm.add_to(m)\n\nfor bottom, click in zip([60,90,120,150,180],['Loop','Forward','Play','Reverse','Backward']):\n    \n    # Thank you for html code. https:\/\/www.kaggle.com\/poonsfc5\/ds4c-covid-19-in-korea-eda-with-geo-data\n    name = '''\n            <div style=\"position: fixed; bottom: '''+str(bottom)+'''px; left: 50px; width: 100px; height: 29px; \n                        background-color: white; border:1px solid grey; z-index:9999; font-size:11px;text-align:center;\"\n                        >&nbsp; <br><b>Click : '''+ click +'''<\/b><\/div>'''  \n\n    m.get_root().html.add_child(folium.Element(name))\n\nm","fa1e1785":"# prepare data\ndf_dropna = regional_patient.dropna()\ndf_dropna['timestamp'] = [i+'T00:00:00' for i in df_dropna['confirmed_date']]\n\npoints = []\nfor date in sorted(df_dropna['confirmed_date'].unique()):\n    temp = df_dropna.query('confirmed_date == @date')\n    \n    temp_dict = {}\n    temp_dict['coordinates'] = temp[['longitude','latitude']].values.tolist()\n    temp_dict['dates'] = temp['timestamp'].values.tolist()\n    \n    points += [temp_dict]\n\nfeatures = [ { 'type': 'Feature', \n                  'geometry': { 'type': 'MultiPoint', \n                               'coordinates': point['coordinates'], }, \n                  'properties': { 'times': point['dates'],\n                                 'icon' : 'circle'}\n             } for point in points ] ","d6b802ad":"features[:3]","4543c2ce":"m = folium.Map( location=[36, 128], zoom_start=7 )\n\nplugins.TimestampedGeoJson({ \n    'type': 'FeatureCollection', \n    'features': features, \n}, period='P1D', auto_play = False).add_to(m)\n\nm","e6f60a49":"### TimestampedGeoJson needs this type of input data.","1ac85c09":"### Pydeck to be continued!","ad216dd7":"### Additional try : MarkCluster Layer On the Heatmap Layer.\n\nSometimes, we need to plot several statistics on only one map.(Multivariate)\n\nSo i tried it with Heatmap and MarkCluster.\n\n\uac00\ub054 \uc9c0\ub3c4 \uc704\uc5d0 \uc5ec\ub7ec\uac1c\uc758 \ud1b5\uacc4\ub7c9\uc744 \ub098\ud0c0\ub0b4\uc57c\ud560 \ub54c\uac00 \uc788\ub294\ub370\uc694, Heatmap\uacfc MarkCluster\ub85c \uc2dc\ub3c4\ud574\ubd24\uc2b5\ub2c8\ub2e4\n","06b32b78":"# 5. Heatmap with time : time series heat map\n\n```python\nfolium.plugins.HeatMapWithTime(data, index=None, name=None, \n                               radius=15, min_opacity=0, max_opacity=0.6, \n                               scale_radius=False, gradient=None, \n                               use_local_extrema=False, auto_play=False, \n                               display_index=True, index_steps=1, min_speed=0.1, \n                               max_speed=10, speed_step=0.1, position='bottomleft', \n                               overlay=True, control=True, show=True)\n```\n\n**Parameter** what i find important\n```\ndata \u2013 The points you want to plot. The outer list corresponds to the various time steps in sequential order. (weight is in (0, 1] range and defaults to 1 if not specified for a point)\n\nindex  \u2013 the same length as data, or is replaced by a simple count if not specified.\n\nradius (default 15.) \u2013 The radius used around points for the heatmap.\n\nmin_opacity (default 0) \u2013 The minimum opacity for the heatmap.\n\nmax_opacity (default 0.6) \u2013 The maximum opacity for the heatmap.\n\nscale_radius (default False) \u2013 Scale the radius of the points based on the zoom level.\n\nauto_play (default False) \u2013 Automatically play the animation across time.\n```\n\n[More](https:\/\/python-visualization.github.io\/folium\/plugins.html)","8c0d1bb8":"# Geospatial visualization tutorial - 1\n\nHi all :-)\n\nThis is Yeonjun IN who made the kernel named as [\\[DS4C\\]time series geospatial eda using folium.](https:\/\/www.kaggle.com\/mbnb8317\/ds4c-time-series-geospatial-eda-using-folium)\n\nThis time, I made a Tutorial about Folium, a Package for Geospatial visualization, for novice of EDA.\n\nI hope it helps\n\nThank you :)","eaeb9444":"# 2. MarkerCluster : Lets see the number of regional confirmed patient.\n\uc9c0\uc5ed\ubcc4\ub85c \uba87\uba85\uc758 \ud655\uc9c4\ud658\uc790\uac00 \ub098\uc654\ub294\uc9c0 \ud55c\ubc88 \ubd10\ubcfc\uae4c\uc694?","8c7943cf":"# 6. Make Circles with timebar : Timestamped Geojson\n\n```python\nTimestampedGeoJson(data, transition_time=200, loop=True, auto_play=True, \n                   add_last_point=True, period='P1D', min_speed=0.1, max_speed=10, \n                   loop_button=False, date_options='YYYY-MM-DD HH:mm:ss', \n                   time_slider_drag_update=False, duration=None)\n```\n\nparameter i find important\n```\nperiod (str, default \"P1D\") \u2013  \u2018P1M\u2019 1\/month, \u2018P1D\u2019 1\/day, \u2018PT1H\u2019 1\/hour, and \u2018PT1M\u2019 1\/minute\n```\n\n[more](https:\/\/python-visualization.github.io\/folium\/plugins.html)","0c1eef5b":"### Captial Area(value of 724), including Seoul, Gyeonggi-do, Incheon etc., Gyeongsangbuk-do(972) look serious.\n\n\uc11c\uc6b8 \uacbd\uae30 \uc778\ucc9c \uc9c0\uc5ed, \uc989 \uc218\ub3c4\uad8c \uc9c0\uc5ed\uacfc, \uacbd\ubd81\uc9c0\uc5ed\uc758 \uac10\uc5fc\uc790\uc218\uac00 \uac00\uc7a5 \ub192\uc740 \uac83\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4.","7959f7be":"# 1. plotting just a map \n\uc81c\uc77c \uba3c\uc800, \uadf8\ub0e5 \uc9c0\ub3c4 \ub744\uc6b0\uae30\n\n```python\nfolium.Map([37,128]. zoom_start = 7, *tiles='Stamen Terrain'*)\nfolium.Map([37,128]. zoom_start = 7, *tiles='Stamen Toner'*)\n```\nThere are several types of map, default, Stamen Terrain, and Stamen Toner. \n\nI prefer default option. ","564ee4b3":"# 4. Make a Heat map : Instead of the number\n\n\uc9c0\uc5ed\ubcc4\ub85c \uc5bc\ub9c8\ub098 \ub9ce\uc740 \uac10\uc5fc\uc790\uac00 \uc788\ub294\uc9c0, \uc22b\uc790\ub85c \ubcf4\ub294 \uac83\uc774 \uc544\ub2cc, heat map\uc744 \ud65c\uc6a9\ud558\uc5ec \uc2dc\uac01\uc801\uc73c\ub85c \ub098\ud0c0\ub0b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4\n\n**Heatmap parameter**\n\n```python\nfolium.plugins.HeatMap(data, name=None, min_opacity=0.5, \n                       max_zoom=18, max_val=1.0, radius=25, blur=15, \n                       gradient=None, overlay=True, control=True, show=True, **kwargs)\n```\n\n```\n- min_opacity (default 1.) \u2013 The minimum opacity the heat will start at.\n- max_zoom (default 18) \u2013 Zoom level where the points reach maximum intensity (as intensity scales with zoom), equals maxZoom of the map by default\n- max_val (float, default 1.) \u2013 Maximum point intensity\n- radius (int, default 25) \u2013 Radius of each \u201cpoint\u201d of the heatmap\n- blur (int, default 15) \u2013 Amount of blur\n- gradient (dict, default None) \u2013 Color gradient config. e.g. {0.4: \u2018blue\u2019, 0.65: \u2018lime\u2019, 1: \u2018red\u2019}\n- overlay (bool, default True) \u2013 Adds the layer as an optional overlay (True) or the base layer (False).\n- control (bool, default True) \u2013 Whether the Layer will be included in LayerControls.\n- show (bool, default True) \u2013 Whether the layer will be shown on opening (only for overlays).\n```\n\n[Link](https:\/\/python-visualization.github.io\/folium\/plugins.html)\n","8b35b091":"# Thank you for attention!!\n\n","2fac6df4":"# 3. Make subgroups to plot : Female \/ Male\n\uc5ec\uc131, \ub0a8\uc131 \uac10\uc5fc\uc790\ub97c \ud558\uc704\uadf8\ub8f9\uc73c\ub85c \ud558\uc5ec \ub530\ub85c\ub530\ub85c \ubcfc \uc218 \uc788\ub3c4\ub85d \uc9c0\ub3c4\ub97c \uadf8\ub824\ubcf4\uaca0\uc2b5\ub2c8\ub2e4\n","251a418c":"### Additional tool : Fullscreen, MousePosition(get coordinates)\n\ucd94\uac00 \uae30\ub2a5 : \ud480\uc2a4\ud06c\ub9b0\uc73c\ub85c \ub9cc\ub4e4\uae30, \ub9c8\uc6b0\uc2a4 \uac16\ub2e4\ub300\uba74 \uc88c\ud45c \ub728\uac8c \ud558\uae30","ee9d2377":"### Doesn't look good. \n\n\ubcf4\uae30 \uc88b\uc9c4 \uc54a\ub124\uc694.","4ba27bf7":"### HeatMapWithTime needs this type of input data.\n","8353e6cd":"### In my opinion, I prefer Heatmap to MarkCluster. How about you? :-)\n\uc800 \uac1c\uc778\uc801\uc73c\ub85c\ub294 \ud788\ud2b8\ub9f5\uc774 \ubcf4\uae30 \uc88b\ub124\uc694 \uc5ec\ub7ec\ubd84\ub4e4\uc740 \uc5b4\ub5a0\uc2e0\uac00\uc694? \u314e\u314e\u314e"}}