{"cell_type":{"f5d055d0":"code","69a06a0d":"code","b646e972":"code","9a050ca6":"code","1d43fdfd":"code","be603161":"code","264c4616":"code","c1e08752":"code","a9c94e0d":"code","b21cb707":"code","2b34ffe6":"code","e400bf2b":"markdown","442525a2":"markdown","2bff98f3":"markdown","4d505b80":"markdown","9d683d6b":"markdown","06a6ea65":"markdown","b4ca1a5b":"markdown","aa006701":"markdown","9b6919ed":"markdown"},"source":{"f5d055d0":"import numpy as np \nimport pandas as pd \n\nfrom sklearn import ensemble\n\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import cross_validate,GridSearchCV\nimport xgboost as xgb","69a06a0d":"train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest = pd.read_csv(\"..\/input\/titanic\/test.csv\")","b646e972":"#1. delete unnecessary columns\ndrop_elements = ['PassengerId', 'Name', 'Ticket', 'Cabin', 'SibSp','Parch']\ntrain = train.drop(drop_elements, axis = 1)\ntest = test.drop(drop_elements, axis = 1)\n\n#2.find null data and fill new data \ndef checkNull_fillData(df):\n    for col in df.columns:\n        if len(df.loc[df[col].isnull() == True]) != 0:\n            if df[col].dtype == \"float64\" or df[col].dtype == \"int64\":\n                df.loc[df[col].isnull() == True,col] = df[col].mean()\n            else:\n                df.loc[df[col].isnull() == True,col] = df[col].mode()[0]\n                \ncheckNull_fillData(train)\ncheckNull_fillData(test)\n\n#3.one hot encoding \nstr_list = [] \nnum_list = []\nfor colname, colvalue in train.iteritems():\n    if type(colvalue[1]) == str:\n        str_list.append(colname)\n    else:\n        num_list.append(colname)\n        \ntrain = pd.get_dummies(train, columns=str_list)\ntest = pd.get_dummies(test, columns=str_list)","9a050ca6":"train.info()","1d43fdfd":"y = train['Survived']\nX = train.drop(['Survived'], axis=1)\nX_test = test","be603161":"from sklearn.model_selection import train_test_split\n\nX_train, X_val, y_train, y_val = train_test_split(  X, y, test_size=0.25, random_state=42)","264c4616":"params={\"n_estimators\":np.arange(100,200,100),\n        \"max_depth\":np.arange(1,5,2),\n        \"learning_rate\":[0.1,0.5]\n       }","c1e08752":"xgb_est=xgb.XGBClassifier(booster='gbtree', \n                    random_state=2, \n                          objective='binary:logistic',\n                          eval_metric=\"auc\"\n               \n        )\n\ngr_xgb_est=GridSearchCV( xgb_est,param_grid=params,cv=5,n_jobs=-1,verbose=10)\n\ngr_xgb_est.fit(X_train,y_train)","a9c94e0d":"y_pred = gr_xgb_est.predict(X_val)\nprint(accuracy_score(y_val, y_pred))","b21cb707":"pred_test = gr_xgb_est.predict(X_test)","2b34ffe6":"submission = pd.read_csv('..\/input\/titanic\/gender_submission.csv')\nsubmission['Survived'] = (pred_test > 0.5).astype(int)\nsubmission.to_csv('sub.csv', index=False)\nsubmission.head()","e400bf2b":"# submit result","442525a2":"# predict test data using model","2bff98f3":"# import libraries","4d505b80":"# evaluate model","9d683d6b":"# split data (train data \/ validation data)","06a6ea65":"# split data ( input data \/ label data )","b4ca1a5b":"# preprocessing","aa006701":"# load data ","9b6919ed":"# GridSearch Ensembel "}}