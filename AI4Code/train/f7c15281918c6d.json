{"cell_type":{"36e75be7":"code","8024283e":"code","34bfb753":"code","7b31d50e":"code","bf8f42f1":"code","c5f8c0b4":"code","2360869f":"code","adf9841d":"code","5b908126":"code","ede2274a":"code","8a50512b":"code","cd4a0eed":"code","9efa9c4c":"code","eff8ef4b":"code","cd724378":"code","0e86c02a":"code","9f3583a4":"code","1bed02a3":"code","2c4e83ae":"code","b758afd2":"code","24c21023":"code","0362019d":"code","db2f059a":"code","f20aa1df":"code","dda2a869":"code","8426af0c":"code","a8279d0b":"code","2da9857c":"code","ee37dd55":"code","01022107":"code","6255689a":"code","abff51af":"code","bca4ada0":"markdown","3ffd5152":"markdown","0bf00265":"markdown","1851be1d":"markdown","430885f7":"markdown","47dfb805":"markdown","dcf5d96c":"markdown","fc8c6444":"markdown","8af3b4a9":"markdown","5fb4da5c":"markdown","d7941dd2":"markdown","5e79bf95":"markdown","6558ba6b":"markdown","b043026c":"markdown","03b0d2ff":"markdown","4e3c1645":"markdown","892d27f0":"markdown","eafe424e":"markdown","9dce1515":"markdown","0ecc9f51":"markdown","d271944b":"markdown"},"source":{"36e75be7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8024283e":"import nltk","34bfb753":"nltk.download()","7b31d50e":"paragraph = \"I have three visions for India. In 3000 years of our history people from all over the world have come and invaded us, captured our lands, conquered our minds. From Alexander onwards the Greeks, the Turks, the Moguls, the Portuguese, the British, the French, the Dutch, all of them came and looted us, took over what was ours. Yet we have not done this to any other nation. We have not conquered anyone. We have not grabbed their land, their culture and their history and tried to enforce our way of life on them. Why? Because we respect the freedom of others. That is why my FIRST VISION is that of FREEDOM. I believe that India got its first vision of this in 1857, when we started the war of Independence. It is this freedom that we must protect and nurture and build on. If we are not free, no one will respect us.\"","bf8f42f1":"sentence = nltk.sent_tokenize(paragraph)","c5f8c0b4":"type(sentence)","2360869f":"sentence","adf9841d":"words = nltk.word_tokenize(paragraph)","5b908126":"type(words)","ede2274a":"words","8a50512b":"from nltk.stem import PorterStemmer","cd4a0eed":"from nltk.corpus import stopwords","9efa9c4c":"stopwords.words('english')","eff8ef4b":"stemmer = PorterStemmer()","cd724378":"for i in range(len(sentence)):\n    words=nltk.word_tokenize(sentence[i])\n    words=[stemmer.stem(word) for word in words if word not in set(stopwords.words('english'))]\n    sentence[i]=' '.join(words)","0e86c02a":"sentence","9f3583a4":"from nltk.stem import WordNetLemmatizer","1bed02a3":"lemmatizer = WordNetLemmatizer()","2c4e83ae":"\nfor i in range(len(sentence)):\n    words=nltk.word_tokenize(sentence[i])\n    words=[lemmatizer.lemmatize(word) for word in words if word not in set(stopwords.words('english'))]\n    sentence[i]=' '.join(words)","b758afd2":"sentence","24c21023":"from nltk.corpus import stopwords\nfrom nltk.stem import WordNetLemmatizer\nlemmatizer=WordNetLemmatizer()","0362019d":"import re\ncorpus = []\nfor i in range(len(sentence)):\n    ab = re.sub('[^a-zA-Z]',' ',sentence[i])\n    ab=ab.lower()\n    ab=ab.split()\n    ab=[lemmatizer.lemmatize(word) for word in ab if word not in set(stopwords.words('english'))]\n    ab=' '.join(ab)\n    corpus.append(ab)","db2f059a":"type(corpus)","f20aa1df":"corpus","dda2a869":"len(corpus)","8426af0c":"from sklearn.feature_extraction.text import CountVectorizer\ncv=CountVectorizer()\nx=cv.fit_transform(corpus).toarray()","a8279d0b":"type(x)","2da9857c":"print(x)","ee37dd55":"x.shape","01022107":"from sklearn.feature_extraction.text import TfidfVectorizer","6255689a":"tfidf=TfidfVectorizer()\ny=tfidf.fit_transform(corpus).toarray()","abff51af":"y","bca4ada0":"# Tokenisation","3ffd5152":"We created the bag of words model with 12 sentences(row) with 50 features in the columns","0bf00265":"Now we can see that the stop words are removed and words are properly lemmatized","1851be1d":"It removes the redundancy of words like history,historical => history (gives histori while doing stemming)","430885f7":"**Removing the stop words from the sentence and stemming the remaining words**","47dfb805":"There are twelve sentences in the corpus","dcf5d96c":"We can able to see that history -> histori , invaded -> invad","fc8c6444":"# Create Bag of Words model","8af3b4a9":"**Words tokenization**","5fb4da5c":"**Stop words removes the words of less value eg: must,there, them, like**","d7941dd2":"**Taking only text and apart from a-Z values with ' ' space**","5e79bf95":"**Now our text data is cleaned well**","6558ba6b":"# Lemmatization","b043026c":"# Cleaning texts","03b0d2ff":"**Tokenising sentences**","4e3c1645":"Rather than bag of words model( having only 1's and 0's, we cannot be able to get the values of words) using tf idf we can able to get higher values for words of importance","892d27f0":"# Create a Tf-Idf model","eafe424e":"**Stemming removes unncessary redundancy of words Eg: history, historical => histori**","9dce1515":"**We are going to take only words without punctuations and numbers**","0ecc9f51":"# Stemming","d271944b":"**So here, we can have words of different values in sentences**"}}