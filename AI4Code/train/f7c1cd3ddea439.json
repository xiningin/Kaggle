{"cell_type":{"7c310a34":"code","cf8eb01c":"code","0acbf1c9":"code","5d27c94d":"code","6df83886":"code","ee5c3285":"code","292e6f8f":"code","0abcb766":"code","65f998d3":"code","6d09835e":"code","4d4eb0e6":"code","59776acc":"code","442d5f71":"code","07f841d3":"code","1e3a30c5":"code","7ed9dd72":"code","4f6cc1a4":"code","240111e6":"code","a26a5e2e":"code","6b6b76d2":"code","381c5d71":"code","64833acd":"code","0c8f7090":"code","1d1606dc":"code","14af46f6":"code","fed27128":"code","baeecc14":"code","00eda07f":"code","8f51b736":"code","2fbe6183":"code","f173e9e8":"code","fc2ddcbf":"code","c992ea05":"code","74df0f2d":"code","3818eaf6":"code","9a934192":"code","4d1ed4ca":"code","0aac6d87":"code","ec5074b8":"code","7598d0b3":"code","17f6543c":"code","3e4e9096":"code","3ec59389":"code","10d1ca27":"code","096ccb96":"code","87710713":"code","04aa7e40":"code","76392a75":"code","1b817cf7":"code","5c9398f9":"code","4c569fc6":"code","b0991c14":"code","837dc760":"code","b0437bd5":"code","0a0aab17":"code","89d83adb":"code","23fef982":"code","c41b6a3c":"code","47ba6bfb":"code","3bca83a5":"code","fe3b8103":"code","a4cc415f":"code","d8443f42":"markdown","e6ad24a4":"markdown","138ca3e6":"markdown","e7f37423":"markdown","8951bcbc":"markdown","e3c74f2c":"markdown","b2eb07f6":"markdown","1d39e7f6":"markdown","c2020675":"markdown","fce37378":"markdown","90a889b1":"markdown","60583502":"markdown"},"source":{"7c310a34":"import pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# metrics\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import mean_squared_error, median_absolute_error, r2_score\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, classification_report, confusion_matrix\n\n# cross validation\nfrom sklearn.model_selection import GridSearchCV\n\n# split data\nfrom sklearn.model_selection import train_test_split\n\n# models\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import BaggingClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis, QuadraticDiscriminantAnalysis\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.naive_bayes import GaussianNB, MultinomialNB\n\n# Plots\nfrom sklearn.metrics import ConfusionMatrixDisplay\n\n# deprecation error \nimport warnings \nwarnings.filterwarnings('ignore')\n\nprint(\"Setup Complete\")","cf8eb01c":"# Reading the data\ntrain = pd.read_csv('\/kaggle\/input\/titanic\/train.csv', index_col = 'PassengerId')\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv', index_col = 'PassengerId')","0acbf1c9":"display(train.head(2))\ndisplay(test.head(2))\ndisplay(train.shape)\ndisplay(test.shape)","5d27c94d":"display(train.describe())\ndisplay(test.describe())","6df83886":"display(train.info())\ndisplay(test.info())","ee5c3285":"train['Title'] = train['Name'].str.rsplit(',').str[1]\ntrain['Title'] = train['Title'].str.rsplit('.').str[0]\n\ntest['Title'] = test['Name'].str.rsplit(',').str[1]\ntest['Title'] = test['Title'].str.rsplit('.').str[0]\n\ndisplay(train['Title'].value_counts())\ndisplay(test['Title'].value_counts())","292e6f8f":"common = [' Mr',' Miss',' Mrs',' Mlle',' Ms',' Mme',' Don',' Dona']\n\nfor i, row in train.iterrows():\n    if row['Title'] in common:\n            train.loc[i,'Title'] = 'Common'\n    else:\n        train.loc[i,'Title'] = 'Uncommon'\n\nfor i, row in test.iterrows():\n    if row['Title'] in common:\n        test.loc[i,'Title'] = 'Common'\n    else:\n        test.loc[i,'Title'] = 'Uncommon'\n\ndisplay(train['Title'].value_counts())\ndisplay(test['Title'].value_counts())","0abcb766":"train['FamSize'] = train['SibSp'] + train['Parch']\ntest['FamSize'] = test['SibSp'] + test['Parch']\n\ndisplay(train['FamSize'].describe())\ndisplay(test['FamSize'].describe())","65f998d3":"#Droping unnecesary variables\ntrain.drop(['Name','SibSp','Parch','Ticket','Cabin'], axis = 1, inplace = True)\ntest.drop(['Name','SibSp','Parch','Ticket','Cabin'], axis = 1, inplace = True)\n\ndisplay(train.head(2))\ndisplay(test.head(2))","6d09835e":"df = pd.concat([train,test])\n\ndisplay(df.info())\ndisplay(df.shape)","4d4eb0e6":"# Imputing meadian and mode in null values\nmean_age = df['Age'].mean()\nmedian_age = df['Age'].median()\n\nsns.distplot(df['Age'])\nplt.axvline(x=mean_age, linewidth=3, color='g', label=\"mean\", alpha=0.5)\nplt.axvline(x=median_age, linewidth=3, color='y', label=\"median\", alpha=0.5)\nplt.show()\n\nmean_fare = df['Fare'].mean()\nmedian_fare = df['Fare'].median()\n\nsns.distplot(df['Fare'])\nplt.axvline(x=mean_fare, linewidth=3, color='g', label=\"mean\", alpha=0.5)\nplt.axvline(x=median_fare, linewidth=3, color='y', label=\"median\", alpha=0.5)\nplt.show()\n\nmode_embarked = df['Embarked'].mode()\n\ndf['Age'].fillna(value=median_age, inplace=True)\ndf['Fare'].fillna(value=median_fare, inplace=True)\ndf['Embarked'].fillna(value=mode_embarked[0], inplace=True)","59776acc":"# No more missing values\ndisplay(df.info())","442d5f71":"# splitting the Data again\ntrain = df.iloc[0:891,:]\ntest = df.iloc[891:1309,:].drop('Survived',axis = 1)\ndisplay(train.info())\ndisplay(test.info())","07f841d3":"categoricals = []\nnumericals = []\nfor column in train.columns.drop('Survived'):\n    if train[column].dtype == 'object':\n        categoricals.append(train[column].name)\n    else:\n        numericals.append(train[column].name)\nprint(categoricals, '\\n', numericals)","1e3a30c5":"train_categorical = train[train.columns.intersection(categoricals)]\ntrain_categorical['Pclass'] = train['Pclass']\ntrain_categorical['FamSize'] = train['FamSize']\n \ntrain_numerical = train[train.columns.intersection(numericals)].drop(['Pclass', 'FamSize'],axis = 1)\ndisplay(train_categorical.head(2))\ndisplay(train_numerical.head(2))","7ed9dd72":"for col_name in train_numerical:\n    sns.distplot(train_numerical.loc[:,col_name])\n    plt.show()","4f6cc1a4":"for col_name in train_categorical.columns:\n    percent = train_categorical.loc[:,col_name].value_counts(normalize = True)\n    \n    fig, ax = plt.subplots()\n    sns.barplot(x = percent.index, y = percent, palette = 'Blues').set(ylim=(0,1))     \n    plt.show()","240111e6":"for col_name in train_categorical.columns:\n    fig, ax = plt.subplots()\n    sns.barplot(x = train_categorical.loc[:,col_name], y = train['Survived'], palette = 'Blues')\n    plt.show()","a26a5e2e":"for col_name in train_numerical.columns:\n    fig, ax = plt.subplots()\n    sns.boxplot(y = train_numerical.loc[:,col_name], x = train['Survived'], palette = 'Blues')\n    plt.show()","6b6b76d2":"for i, row in train.iterrows():\n    if row['Sex'] == 'Female':\n        train.loc[i, 'Sex'] = 0\n    else:\n        train.loc[i, 'Sex'] = 1\n    if row['Embarked'] == 'C':\n        train.loc[i, 'Embarked'] = 0\n    elif row['Embarked'] == 'S':\n        train.loc[i, 'Embarked'] = 1\n    else:\n        train.loc[i, 'Embarked'] = 2\n    if row['Title'] == 'Common':\n        train.loc[i, 'Title'] = 0\n    else:\n        train.loc[i, 'Title'] = 1\n\nfor i, row in test.iterrows():\n    if row['Sex'] == 'Female':\n        test.loc[i, 'Sex'] = 0\n    else:\n        test.loc[i, 'Sex'] = 1\n    if row['Embarked'] == 'C':\n        test.loc[i, 'Embarked'] = 0\n    elif row['Embarked'] == 'S':\n        test.loc[i, 'Embarked'] = 1\n    else:\n        test.loc[i, 'Embarked'] = 2\n    if row['Title'] == 'Common':\n        test.loc[i, 'Title'] = 0\n    else:\n        test.loc[i, 'Title'] = 1","381c5d71":"train['Sex'] = train['Sex'].astype('int64')\ntrain['Embarked'] = train['Embarked'].astype('int64')\ntrain['Title'] = train['Title'].astype('int64')\n\ntest['Sex'] = test['Sex'].astype('int64')\ntest['Embarked'] = test['Embarked'].astype('int64')\ntest['Title'] = test['Title'].astype('int64')\n\ndisplay(train.info())\ndisplay(test.info())","64833acd":"X = train.drop('Survived',axis=1)\ny = train['Survived']","0c8f7090":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 2021)","1d1606dc":"X_train.shape, y_train.shape,X_test.shape, y_test.shape","14af46f6":"X_train.info()","fed27128":"# Logistic Regression\nlog_model = LogisticRegression(solver='liblinear', random_state = 2021)\nlog_model.fit(X_train, y_train)\ny_hat = log_model.predict(X_test)","baeecc14":"cm = confusion_matrix(y_test,y_hat)\n\ndisp = ConfusionMatrixDisplay(confusion_matrix=cm,\n                               display_labels=log_model.classes_)\ndisp.plot()\n\n\nplt.show()","00eda07f":"accuracy_log = accuracy_score(y_test, y_hat).round(2)\nprecision_log = precision_score(y_test, y_hat).round(2)\nrecall_log = recall_score(y_test, y_hat).round(2)\nf1_log = f1_score(y_test, y_hat).round(2)","8f51b736":"# Desicion Tree\ntree_model = DecisionTreeClassifier(random_state = 2021)\ntree_model.fit(X_train, y_train)\ny_hat = tree_model.predict(X_test)","2fbe6183":"cm = confusion_matrix(y_test,y_hat)\n\ndisp = ConfusionMatrixDisplay(confusion_matrix=cm,\n                               display_labels=tree_model.classes_)\ndisp.plot()\n\n\nplt.show()","f173e9e8":"accuracy_tree = accuracy_score(y_test, y_hat).round(2)\nprecision_tree = precision_score(y_test, y_hat).round(2)\nrecall_tree = recall_score(y_test, y_hat).round(2)\nf1_tree = f1_score(y_test, y_hat).round(2)","fc2ddcbf":"# Bagging\nbag_model = BaggingClassifier(random_state = 2021) \nbag_model.fit(X_train, y_train)\ny_hat = bag_model.predict(X_test)","c992ea05":"cm = confusion_matrix(y_test,y_hat)\n\ndisp = ConfusionMatrixDisplay(confusion_matrix=cm,\n                               display_labels=bag_model.classes_)\ndisp.plot()\n\n\nplt.show()","74df0f2d":"accuracy_bag = accuracy_score(y_test, y_hat).round(2)\nprecision_bag = precision_score(y_test, y_hat).round(2)\nrecall_bag = recall_score(y_test, y_hat).round(2)\nf1_bag = f1_score(y_test, y_hat).round(2)","3818eaf6":"# Random Forest\nrf_model = RandomForestClassifier(random_state = 2021)\nrf_model.fit(X_train, y_train)\ny_hat = tree_model.predict(X_test)","9a934192":"cm = confusion_matrix(y_test,y_hat)\n\ndisp = ConfusionMatrixDisplay(confusion_matrix=cm,\n                               display_labels=rf_model.classes_)\ndisp.plot()\n\n\nplt.show()","4d1ed4ca":"accuracy_rf = accuracy_score(y_test, y_hat).round(2)\nprecision_rf = precision_score(y_test, y_hat).round(2)\nrecall_rf = recall_score(y_test, y_hat).round(2)\nf1_rf = f1_score(y_test, y_hat).round(2)","0aac6d87":"# LDA\nlda_model = LinearDiscriminantAnalysis()\nlda_model.fit(X_train, y_train)\ny_hat = lda_model.predict(X_test)","ec5074b8":"cm = confusion_matrix(y_test,y_hat)\n\ndisp = ConfusionMatrixDisplay(confusion_matrix=cm,\n                               display_labels=lda_model.classes_)\ndisp.plot()\n\n\nplt.show()","7598d0b3":"accuracy_lda = accuracy_score(y_test, y_hat).round(2)\nprecision_lda = precision_score(y_test, y_hat).round(2)\nrecall_lda = recall_score(y_test, y_hat).round(2)\nf1_lda = f1_score(y_test, y_hat).round(2)","17f6543c":"#QDA\nqda_model = QuadraticDiscriminantAnalysis()\nqda_model.fit(X_train, y_train)\ny_hat = lda_model.predict(X_test)","3e4e9096":"cm = confusion_matrix(y_test,y_hat)\n\ndisp = ConfusionMatrixDisplay(confusion_matrix=cm,\n                               display_labels=qda_model.classes_)\ndisp.plot()\n\n\nplt.show()","3ec59389":"accuracy_qda = accuracy_score(y_test, y_hat).round(2)\nprecision_qda = precision_score(y_test, y_hat).round(2)\nrecall_qda = recall_score(y_test, y_hat).round(2)\nf1_qda = f1_score(y_test, y_hat).round(2)","10d1ca27":"# Suport Vector Machine\nsvm_model = SVC(random_state = 2021)\nsvm_model.fit(X_train, y_train)\ny_hat = svm_model.predict(X_test)","096ccb96":"cm = confusion_matrix(y_test,y_hat)\n\ndisp = ConfusionMatrixDisplay(confusion_matrix=cm,\n                               display_labels=svm_model.classes_)\ndisp.plot()\n\n\nplt.show()","87710713":"accuracy_svm = accuracy_score(y_test, y_hat).round(2)\nprecision_svm = precision_score(y_test, y_hat).round(2)\nrecall_svm = recall_score(y_test, y_hat).round(2)\nf1_svm = f1_score(y_test, y_hat).round(2)","04aa7e40":"# Linear SVM\nlsvm_model = LinearSVC(random_state = 2021)\nlsvm_model.fit(X_train, y_train)\ny_hat = lsvm_model.predict(X_test)","76392a75":"cm = confusion_matrix(y_test,y_hat)\n\ndisp = ConfusionMatrixDisplay(confusion_matrix=cm,\n                               display_labels=lsvm_model.classes_)\ndisp.plot()\n\n\nplt.show()","1b817cf7":"accuracy_lsvm = accuracy_score(y_test, y_hat).round(2)\nprecision_lsvm = precision_score(y_test, y_hat).round(2)\nrecall_lsvm = recall_score(y_test, y_hat).round(2)\nf1_lsvm = f1_score(y_test, y_hat).round(2)","5c9398f9":"models = pd.DataFrame({\n    'Model': ['Logistic Regression','Desicion Tree','Bagging','Random Forest','LDA','QDA','SVM','Linear SVM'],\n    'Accuracy' : [accuracy_log, accuracy_tree, accuracy_bag, accuracy_rf, accuracy_lda, accuracy_qda, accuracy_svm, accuracy_lsvm],\n    'Precision': [precision_log, precision_tree, precision_bag, precision_rf, precision_lda, precision_qda, precision_svm, precision_lsvm],\n    'Recall' : [recall_log, recall_tree, recall_bag, recall_rf, recall_lda, recall_qda, recall_svm, recall_lsvm],\n    'F1' : [f1_log, f1_tree, f1_bag, f1_rf, f1_lda, f1_qda, f1_svm, f1_lsvm]\n})","4c569fc6":"models.sort_values('F1', ascending = False)","b0991c14":"# Cross validation\nparam_grid = {\n    'bootstrap': [True],\n    'criterion': ['gini','entropy'],\n    'max_features': [2,3,4,5,6,7],\n    'n_estimators':[800,900,1000]\n}\n\ngrid_search = GridSearchCV(estimator = rf_model, scoring = 'f1', param_grid = param_grid, cv = 3, n_jobs = -1, verbose = 2)","837dc760":"grid_search.fit(X_train, y_train)","b0437bd5":"grid_search.best_params_","0a0aab17":"y_hat = grid_search.predict(X_test)","89d83adb":"cm = confusion_matrix(y_test,y_hat)\n\ndisp = ConfusionMatrixDisplay(confusion_matrix=cm,\n                               display_labels=grid_search.classes_)\ndisp.plot()\n\n\nplt.show()","23fef982":"accuracy_rf2 = accuracy_score(y_test, y_hat)\nprecision_rf2 = precision_score(y_test, y_hat)\nrecall_rf2 = recall_score(y_test, y_hat)\nf1_rf2 = f1_score(y_test, y_hat)","c41b6a3c":"models = pd.DataFrame({\n    'Models' : ['Random Forest','CV Random Forest'],\n    'Accuracy': [accuracy_rf, accuracy_rf2],\n    'Precision': [precision_rf, precision_rf2],\n    'Recall': [recall_rf, recall_rf2],\n    'F1': [f1_rf, f1_rf2]\n})","47ba6bfb":"models","3bca83a5":"final_model = RandomForestClassifier(random_state = 2021, \n                                     bootstrap = [True],\n                                     criterion = 'entropy',\n                                     max_features = 2,\n                                     n_estimators = 800)\nfinal_model.fit(X,y)\npredictions = final_model.predict(test)","fe3b8103":"test.index","a4cc415f":"sub = pd.DataFrame({\n    test.index.name: test.index,\n    'Survived': predictions.astype('int64')\n})\nsub.to_csv('submission.csv', index=False)","d8443f42":"Can be observed that females had much more probability of survival than males, also you were much more likely of survival if you were embarked from C, people with Uncommon titles were more likely of survival than Common title people and seems like you had much better chance of survival if you were from upper class and if you family size were between one and three members besides of you.  ","e6ad24a4":"5. <a id=\"5\"><\/a> <br>\n# Modeling","138ca3e6":"1. <a id=\"1\"><\/a> <br>\n# Import libraries and load data","e7f37423":"Splitting data","8951bcbc":"It seems that the possibility of survival is indifferent to age, but people with greater fare tend to be more likely of survival, also the greater the family size the better the chance of survival.","e3c74f2c":"4. <a id=\"4\"><\/a> <br>\n# Exploratory Data Analysis","b2eb07f6":"# Introduction\nTo everyone reading this (if any).\n\nIm a mostly self taught in Machine learning and this is my first notebook and competition submission so any comment and feedback would be much apreciated \nso i can improve myself in this disipline.\n\nThank you!!","1d39e7f6":"3. <a id=\"3\"><\/a> <br>\n# Handling missing values","c2020675":"Males were the predominant sex aboard, most people embarked through S, most people had a common title and most of them belonged to the lower class also most of the people embarked alone","fce37378":"Final Model","90a889b1":"Random Forest is chosen as the model to use due it has the highest F1 score","60583502":"2. <a id=\"2\"><\/a> <br>\n# Deriving variables"}}