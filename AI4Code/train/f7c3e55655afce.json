{"cell_type":{"44d949bc":"code","6823c725":"code","9103b25d":"code","d2288d3c":"code","43a9beb6":"markdown","0ba3ae73":"markdown","59dafa70":"markdown","bb4b8e55":"markdown"},"source":{"44d949bc":"import pandas as pd\nimport seaborn as sns; sns.set()\nimport matplotlib.pyplot as plt\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.pipeline import make_pipeline\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\ndata_train = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ndata_test = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ndata_train","6823c725":"#variables used\nhist_vars = ['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare']\n\nfig, ax = plt.subplots(6, figsize=(7, 30))\nclasses = set(data_train['Survived'])\nfor i, class_ in enumerate(classes):\n    class_df = data_train.query('Survived == @class_')\n    for j, vars_ in enumerate(hist_vars):\n        ax[j].hist(class_df[vars_], alpha = 0.5, label = class_)\n        ax[j].legend()","9103b25d":"#fill in Age with mean value by Sex\ndata_train['Age'] = data_train.groupby(\"Sex\").transform(lambda x: x.fillna(x.mean()))['Age']\n#fill in Embarked with most frequent value\nmost_frequent = data_train.groupby([\"Embarked\"])['PassengerId'].value_counts().index[0][0]\ndata_train[\"Embarked\"].fillna(most_frequent, inplace = True)\n#fill in Age and Fare with mean value by Sex (for test x)\ndata_test['Age'] = data_test.groupby(\"Sex\").transform(lambda x: x.fillna(x.mean()))['Age']\ndata_test['Fare'] = data_test.groupby(\"Sex\").transform(lambda x: x.fillna(x.mean()))['Fare']","d2288d3c":"#variables used in modeling\nvars_ = ['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked']\nX_train = pd.get_dummies(data_train[vars_], columns = ['Sex', 'Embarked'])\ny_train = data_train['Survived']\nX_test = pd.get_dummies(data_test[vars_], columns = ['Sex', 'Embarked'])\n\nmodel = RandomForestClassifier(n_estimators = 10, random_state = 0)\ngrid = GridSearchCV(estimator = model, param_grid = {'max_depth': range(1, 6)}, cv = 10)\ngrid.fit(X_train, y_train)\n\npredict = grid.predict(X_test)\noutput = pd.DataFrame({'PassengerId': data_test.PassengerId, 'Survived': predict})\noutput = output.astype({'Survived': 'int32'})\noutput.to_csv('RFWithGrid_submission.csv', index=False)","43a9beb6":"# **INPUT MODULES AND READ DATA**","0ba3ae73":"# DATA IDENTIFICATION BY HISTOGRAM","59dafa70":"# **REPAIR MISSING VALUES**","bb4b8e55":"# **PREDICT THE RESULT**"}}