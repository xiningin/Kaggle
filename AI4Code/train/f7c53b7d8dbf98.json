{"cell_type":{"0bed40fe":"code","c46a938b":"code","14a263ca":"code","ef410293":"code","c3ea3c98":"code","369c1fb4":"code","e52cd16e":"code","02f6873c":"code","ae8d300f":"code","cd12c3ff":"code","359229ee":"code","54ace3fd":"code","253c5984":"code","027bb567":"code","82e78c19":"code","54f02d5d":"code","3360d2a1":"code","41d9f469":"code","30a5bd94":"code","31a21790":"code","5a96adc4":"code","1e03d241":"code","540825dc":"code","00cb0994":"code","5df6327b":"code","cf0e1003":"code","90a6b8cf":"code","5252f564":"code","52c94587":"code","55d9eceb":"code","c1ef20cd":"code","e42c0f4b":"code","b71c81d7":"code","4d3b8ccb":"code","d8fe30ba":"code","e697501d":"code","f7e45507":"code","8237a5cb":"code","dd9bf8a5":"code","c5fa4e52":"code","f8a37fe4":"code","6f36fb05":"code","5e3cee82":"markdown","ea6b12ef":"markdown","f2092f11":"markdown","bc72aee6":"markdown","84ba487d":"markdown","aa8bc2e0":"markdown","8f19ac3c":"markdown","1b9a0c7e":"markdown","893cb200":"markdown","824e5693":"markdown","bb242753":"markdown","f240d835":"markdown","d8c3a423":"markdown","be87060a":"markdown","41bb197c":"markdown","e1695a2d":"markdown","64b72496":"markdown","9f5d461f":"markdown","13814817":"markdown","f8843449":"markdown","7eda467e":"markdown","8e2ed1a9":"markdown","b6d44356":"markdown","5d83b280":"markdown","4891b105":"markdown","79072286":"markdown","94a9c94e":"markdown","d2a6e71e":"markdown"},"source":{"0bed40fe":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings \nwarnings.filterwarnings('ignore')\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c46a938b":"df_train = pd.read_csv('..\/input\/loan-eligible-dataset\/loan-train.csv')\ndf_test = pd.read_csv('..\/input\/loan-eligible-dataset\/loan-test.csv')","14a263ca":"df_train.head()","ef410293":"df_train.drop(columns='Loan_ID', inplace = True)\ndf_test.drop(columns='Loan_ID', inplace = True)","c3ea3c98":"df_train.info()","369c1fb4":"df_train.describe().transpose()","e52cd16e":"sns.set(style = 'whitegrid')\nplt.figure(figsize = (16,8))\nplt.subplot(2,2,1)\nsns.countplot(x = 'Gender' , data = df_train)\nplt.subplot(2,2,2)\nsns.countplot(x = 'Married', data= df_train)\nplt.subplot(2,2,3)\nsns.countplot(x = 'Gender', hue= 'Loan_Status', data = df_train)\nplt.subplot(2,2,4)\nsns.countplot(x = 'Married',hue = 'Loan_Status' , data= df_train)\nplt.show()","02f6873c":"sns.pairplot(df_train)\nplt.show()","ae8d300f":"plt.figure(figsize = (16,8))\nsns.scatterplot(x = 'LoanAmount' , y = 'ApplicantIncome' , hue = 'Loan_Status', data = df_train)\nplt.show()","cd12c3ff":"sns.set(style = 'whitegrid')\nplt.figure(figsize = (16,8))\nplt.subplot(2,2,1)\nsns.countplot(x = 'Education' , data = df_train)\nplt.subplot(2,2,2)\nsns.countplot(x = 'Property_Area', data= df_train)\nplt.subplot(2,2,3)\nsns.countplot(x = 'Education', hue= 'Loan_Status', data = df_train)\nplt.subplot(2,2,4)\nsns.countplot(x = 'Property_Area',hue = 'Loan_Status' , data= df_train)\nplt.show()","359229ee":"graduate = df_train['Education'].value_counts()['Graduate']\nnot_graduate = df_train['Education'].value_counts()['Not Graduate']\ngraduate_yes = df_train[df_train['Loan_Status'] == 'Y']['Education'].value_counts()['Graduate']\nnot_graduate_yes = df_train[df_train['Loan_Status'] == 'Y']['Education'].value_counts()['Not Graduate']","54ace3fd":"print(graduate_yes \/ graduate)\nprint(not_graduate_yes \/ not_graduate)","253c5984":"plt.figure(figsize = (12,4))\nplt.subplot(1,2,1)\nplt.pie(df_train['Self_Employed'].value_counts(),explode = [0,0.2] , autopct='%.1f%%' , shadow = True , labels = ['No', 'Yes'])\nplt.title('percent of values in Self employed column')\nplt.subplot(1,2,2)\nplt.pie(df_train['Loan_Status'].value_counts(), explode = [0,0.2], autopct = '%.1f%%' , labels = ['N', 'Y'])\nplt.title('percent of acceptance')\nplt.show()","027bb567":"plt.figure(figsize = (10,5))\nsns.countplot('Self_Employed' , hue = 'Loan_Status' , data = df_train)\nplt.show()","82e78c19":"sns.boxplot(x = 'Gender', y='ApplicantIncome' , data = df_train)\nplt.show()","54f02d5d":"plt.bar('mean of Applicant Income',df_train['ApplicantIncome'].mean())\nplt.bar('mean of Loan Amount', df_train['LoanAmount'].mean())\nplt.show()","3360d2a1":"print('Unique values in Gender :',df_train['Gender'].unique())\nprint('Unique values in Married :',df_train['Married'].unique())\nprint('Unique values in Dependents :',df_train['Dependents'].unique())\nprint('Unique values in Education :',df_train['Education'].unique())\nprint('Unique values in Self Employed :',df_train['Self_Employed'].unique())\nprint('Unique values in Property Area :',df_train['Property_Area'].unique())\nprint('Unique values in Loan Status :',df_train['Loan_Status'].unique())","41d9f469":"df_train['Gender'] = df_train['Gender'].replace(['Male','Female'],[1,0])","30a5bd94":"df_train['Married'] = df_train['Married'].replace(['Yes','No'],[1,0])\ndf_train['Dependents'] = df_train['Dependents'].replace(['0','1','2'],[0,1,2])\ndf_train['Dependents'] = df_train['Dependents'].replace('3+' , 3)\ndf_train['Education'] = df_train['Education'].replace(['Graduate' , 'Not Graduate'],[1,0])\ndf_train['Self_Employed'] = df_train['Self_Employed'].replace(['Yes','No'],[1,0])\ndf_train['Property_Area'] = df_train['Property_Area'].replace(['Urban' ,'Rural' ,'Semiurban'],[0,1,2])\ndf_train['Loan_Status'] = df_train['Loan_Status'].replace(['Y','N'],[1,0])","31a21790":"df_train.describe()","5a96adc4":"df_train.isnull().sum()","1e03d241":"df_test.isnull().sum()","540825dc":"df_temp = df_train.dropna()","00cb0994":"df_temp.describe()","5df6327b":"df_temp = pd.get_dummies(df_temp , columns = ['Property_Area'])","cf0e1003":"df_temp","90a6b8cf":"corr = df_temp.corr()\nplt.figure(figsize = (16,8))\nsns.heatmap(corr , annot = True )\nplt.show()","5252f564":"df_test.dropna(inplace = True)","52c94587":"df_test['Property_Area'] = df_test['Property_Area'].replace(['Urban' ,'Rural' ,'Semiurban'],[0,1,2])","55d9eceb":"df_test = pd.get_dummies(df_test , columns = ['Property_Area'])","c1ef20cd":"df_test['Married'] = df_test['Married'].replace(['Yes', 'No'], [1,0])","e42c0f4b":"df_tr_x = df_temp[['Married' , 'Credit_History' , 'Property_Area_1', 'Property_Area_2']].values\ndf_tr_y = df_temp['Loan_Status'].values\ndf_ts = df_test[['Married', 'Credit_History', 'Property_Area_1', 'Property_Area_2']].values","b71c81d7":"from sklearn.model_selection import train_test_split,cross_val_score\nfrom sklearn.metrics import classification_report,plot_confusion_matrix\nfrom sklearn.ensemble import RandomForestClassifier,GradientBoostingClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier","4d3b8ccb":"x_train, x_test, y_train, y_test = train_test_split(df_tr_x , df_tr_y , test_size = 0.25)","d8fe30ba":"cls_lr = LogisticRegression()\ncls_lr.fit(x_train, y_train)\ny_pred = cls_lr.predict(x_test)\nprint(classification_report(y_test , y_pred))\nplot_confusion_matrix(cls_lr , x_test, y_test)\nplt.show()","e697501d":"cross_val = cross_val_score(cls_lr , x_train, y_train , cv=10)\nprint(cross_val.mean())","f7e45507":"cls_rf = RandomForestClassifier()\ncls_rf.fit(x_train, y_train)\ny_pred = cls_rf.predict(x_test)\nprint(classification_report(y_test , y_pred))\nplot_confusion_matrix(cls_rf, x_test, y_test)\nplt.show()","8237a5cb":"cross_val = cross_val_score(cls_rf , x_train, y_train , cv=10)\nprint(cross_val.mean())","dd9bf8a5":"results = []\nfor i in range(1,25): \n    cls_knn_2 = KNeighborsClassifier(n_neighbors=i)\n    cls_knn_2.fit(x_train, y_train)\n    score = cls_knn_2.score(x_test ,y_test)\n    results.append([score])","c5fa4e52":"plt.plot(list(range(1,25)) , results)\nplt.show()","f8a37fe4":"cls_knn = KNeighborsClassifier(n_neighbors=11)\ncls_knn.fit(x_train, y_train)\npredicted = cls_knn.predict(df_ts)","6f36fb05":"predicted","5e3cee82":"Its look like ApplicantIncome and LoanAmount have a linear relationship (or poly?) , and this relationship is make sense cause more income more loan amount can affort .","ea6b12ef":"the Loan_ID column is not useful for us and building a model then we must drop it","f2092f11":"Lets get more data from our columns by df.info()","bc72aee6":"Surprisingly the accuracy of Random Forest and Logistic Regressin is the same.\\\nnot only accuracy but also f1-score , recall and etc in the classification report","84ba487d":"above plot show us that with k is higher than 11 we have highest accuracy except when k equals to 20","aa8bc2e0":"what percentage of people are self employed? and what percentage of people can take a loan?","8f19ac3c":"# to be continued .....","1b9a0c7e":"# Lets build models","893cb200":"# Lets load data","824e5693":"droping the nan value from test set","bb242753":"now when we know their value , we can turn them to numeric.\\\nit could be done by 3 ways ( at least the ways i know :) ).\\\n1.using replace method like what we are going to do\\\n2.using map method then we should build a dictionary\\\n3.using Lable encoder from sklearn library","f240d835":"oh its look like if you are graduate you have more possiblity to take Loan","d8c3a423":"it is showing us that men have higher median income than women and there are someones that have income more than 20 thousends dollar at year even its rising up to 80 thousends dollar but all of the women have 20 thousends dollar and lower .","be87060a":"## if you like this notebook please Upvote , thank you ! \n## i will be happy if you share your coments about this notebook :)","41bb197c":"lets check the K Nearest Neighbors ","e1695a2d":"Accuracy is not bad but the f1 score and recall is low.\\\nlet try with KFold Cross Validation to find the mean Accuracy","64b72496":"By comparing this two describe table , we realized that the mean for every column change near 1 percent then its a good technique ","9f5d461f":"Lets find out how many missing value we have","13814817":"# Lets plot the Correlation Matrix\nto find the high correlated columns with Loan Status","f8843449":"## Lets check if we drop the missing values then data is going to skewed or not","7eda467e":"well the accuracy is even lower than the first try.\\\nlets try Random Forest","8e2ed1a9":"## lets check it more","b6d44356":"for the columns that are object type we need to take care of them by turn them into numerical columns.\\\nNow we need to know what value they have","5d83b280":"### important note : first i will do feature selcetion for buliding a model after that for next days i will complete notebook with data visualization","4891b105":"## Lets check category variables more","79072286":"the Property Area column has 3 diffrent value , since we turn them to numric maybe there is no order between them so its better to have one column for every value.\\\nit could be done by 2 ways.\\\nfirst using pd.get_dummies method\\\nsecond using One Hot Encoder from sklearn library\\\ni think the first one is simple than the second ","94a9c94e":"And it is look like there is no obvious relationship between these 2 features and Loan_Status","d2a6e71e":"number of who are not self employed is high so the number of them who can take loan is higher than the rest"}}