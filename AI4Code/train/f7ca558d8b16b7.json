{"cell_type":{"9f640937":"code","4a41acd4":"code","7d852570":"code","96601992":"code","d2284628":"code","43fb8ed2":"code","9a5fcf72":"code","6abc6427":"code","80bf27ed":"code","3a5ff2da":"code","70fc7695":"code","1225adf3":"code","bb462039":"code","01e8e0e4":"code","dbfaff01":"code","eea49a1a":"code","1ca5bdcb":"markdown","199366c6":"markdown","9fded455":"markdown","a5201fb9":"markdown","ff840655":"markdown","c7d81961":"markdown","44dfa18d":"markdown","72b41ff9":"markdown","a296ffb4":"markdown","edfeb7a2":"markdown","0abdbea1":"markdown","ecefd14f":"markdown","20fe8a6b":"markdown","25b9b52f":"markdown","1db59f33":"markdown","882f9fdc":"markdown","7e655211":"markdown","eee65092":"markdown","c43a3ca3":"markdown","3cdcae8e":"markdown","42b745db":"markdown","08c160a5":"markdown","15198302":"markdown"},"source":{"9f640937":"import pandas as pd \nimport numpy as np\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nfrom sklearn.preprocessing import MinMaxScaler \nimport matplotlib.pyplot as plt\nimport math\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import LSTM\nfrom sklearn.metrics import mean_squared_error\nimport matplotlib.pyplot as plt\nimport warnings\nfrom sklearn.model_selection import train_test_split\nimport datetime\nwarnings.filterwarnings(\"ignore\")\nnp.random.seed(32)","4a41acd4":"data=pd.read_csv('..\/input\/covid-world-vaccination-progress\/country_vaccinations.csv')\ndata2=pd.read_csv('..\/input\/covid-19\/data\/countries-aggregated.csv')","7d852570":"data.head()","96601992":"data.dropna(subset=['daily_vaccinations'],inplace=True)\ns=data['date'].str.split('-',expand=True)\ndata['Year']=s[0]\ndata['Month']=s[1]\ndata['Date']=s[2]\nfig1=px.scatter_geo(data,color='vaccines',locationmode=\"ISO-3\",locations=\"iso_code\",opacity=0.6,\n                     hover_name=\"iso_code\", size=\"daily_vaccinations\",projection='conic equal area',animation_group =\"iso_code\",color_continuous_scale='blackbody',\n                     animation_frame=\"Date\",scope='world',symbol='vaccines',template=\"plotly_dark\",title='Vaccination Count Over The World Over Time' )\nfig1.layout.updatemenus[0].buttons[0].args[1][\"frame\"][\"duration\"] = 400\n\nfig1.update_geos(\n    landcolor=\"white\",\n    oceancolor=\"#006994\",\n    showocean=True,\n    lakecolor=\"LightBlue\"\n)\n\nfig1.update_traces(\n    marker_coloraxis=None\n)\nfig1.show()","d2284628":"s=data.drop_duplicates(subset=['iso_code'])['vaccines'].apply(lambda x: x.split(','))\ndic={}\nfor i in s:\n    for j in i :\n        if j[0]==' ':\n            k= j[1:]\n        elif j[-1]==' ':\n            k=j[:-1]\n        else:\n            k=j\n        if k not in dic :\n            dic[k]=1\n        else:\n            dic[k]+=1\npx.bar(x=list(dic.keys()),y=list(dic.values()),color=list(dic.keys()),template='plotly_dark',labels={'x':'Vaccine Name','y':'Total Count'})","43fb8ed2":"arr=[]\nindex1=data.groupby(['country','date']).count().index\nindex2=data2.groupby(['Country','Date']).count().index\nfor i in index2:\n    if i in index1:\n        arr.append(1)\n    else:\n        arr.append(0)\ndata2['Vaccine_is_there']=arr\ndata2.head()","9a5fcf72":"t=data2.groupby(['Country']).sum()\ncons=t[t['Vaccine_is_there']==0].index\ndan=data2[~data2['Country'].isin(cons)]","6abc6427":"dt=data['source_name'].value_counts()\npx.pie(values=dt.values,names=dt.index,template='plotly_dark')","80bf27ed":"len(data2['Country'].unique())","3a5ff2da":"data2['Date']=pd.to_datetime(data2['Date'])\ndfs=list(data2.groupby(\"Country\"))\nfirst_title = dfs[0][0]+' '*30 +'1 here represents :2399'\ntraces = []\nbuttons = []\nfor i,d in enumerate(dfs):\n    visible=[False]*len(dfs)\n    visible[i]=True\n    name=d[0]\n    scale=MinMaxScaler()\n    yp=scale.fit_transform(d[1][['Deaths']])\n    fig = go.Figure()\n    fig.add_trace(go.Scatter(x=d[1]['Date'],y=[i[0] for i in yp]))\n    mm=max(d[1]['Deaths'])\n    traces.append(\n    fig.update_traces(visible=True if i==0 else False).data[0])\n    buttons.append(dict(label=name,\n                        method=\"update\",\n                        args=[{\"visible\":visible},\n                              {\"title\":str(name)+' '*30+'1 here represents :'+str(mm)}]))\n\nupdatemenus = [{'active':0, \"buttons\":buttons}]\nshapes=[({'type': 'line',\n               'xref': 'x',\n               'yref': 'y',\n               'x0': '2020-12-20' ,\n               'y0': 0,\n               'x1': '2020-12-20',\n               'y1': 1})]\nfig = go.Figure(data=traces,\n                 layout=dict(updatemenus=updatemenus,shapes=shapes,template='plotly_dark'))\nfig.update_layout(title=first_title, title_x=0.5)\nfig.show()","70fc7695":"datan=data[['country','iso_code','date','total_vaccinations_per_hundred','daily_vaccinations']]\ndatan.sort_values('date',inplace=True)\ndatan.dropna(inplace=True)\nfig = px.scatter(datan, x=\"total_vaccinations_per_hundred\", y='daily_vaccinations', animation_frame=\"date\", animation_group=\"iso_code\",\n           hover_name=\"iso_code\", text='iso_code',range_x=[-10,100], range_y=[-100000,1500000])\n\nfig.update_traces(marker=dict(size=32,  color='DarkSlateGrey'))\nfig.update_layout(template='plotly_dark')\nfig.show()","1225adf3":"# We are gonna use keras model with LSTM here to do some predictions :)\nname=input('Please enter the country name for the time series analysis :')\ndatacd=data[data['country']==name]","bb462039":"# Using simple LSTM code to do some time series predictions :)\n\ndatacd.sort_values('date',inplace=True)\nlp='total_vaccinations_per_hundred'\ndatacd.dropna(subset=[lp],inplace=True)\ndatac=datacd[[lp]]\ndates=datacd['date'].values\ntrain,test=train_test_split(datac,test_size=0.2,shuffle=False)\ndef create_test_train(dataset,look_back=1):\n    x=dataset.values[0:len(dataset)-look_back]\n    y=dataset.values[look_back:len(dataset)]\n    return x,y\nlook_back = 2\ntrainX, trainY = create_test_train(train, look_back)\ntestX, testY = create_test_train(test, look_back)\n# reshape input to be [samples, time steps, features]\ntrainX = np.reshape(trainX, (trainX.shape[0], 1, trainX.shape[1]))\ntestX = np.reshape(testX, (testX.shape[0], 1, testX.shape[1]))\n\n# Making the model\nmodel = Sequential()\nmodel.add(LSTM(1000, input_shape=(1, 1)))\nmodel.add(Dense(1000))\nmodel.add(Dense(100))\nmodel.add(Dense(1))\nmodel.compile(loss='mean_squared_error', optimizer='adam')\nfitted_model=model.fit(trainX, trainY, epochs=100, batch_size=8, verbose=2,validation_data=(testX,testY))","01e8e0e4":"# Plotting the loss of the model\nplt.plot(fitted_model.history['loss'])\nplt.plot(fitted_model.history['val_loss'])","dbfaff01":"# make predictions\ntrainPredict = fitted_model.model.predict(trainX)\ntestPredict = fitted_model.model.predict(testX)\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\n# Create figure with secondary y-axis\nfig = make_subplots(specs=[[{\"secondary_y\": True}]])\n\n# Add traces\nfig.add_trace(\n    go.Scatter(x=datacd['date'][:len(trainPredict)],y=trainX.flatten(), name=\"Original data\"),\n    secondary_y=False,\n)\n\nfig.add_trace(\n    go.Scatter(x=datacd['date'][:len(trainPredict)],y=trainPredict.flatten(), name=\"Predicted data\"),\n    secondary_y=True,\n)\nfig.update_layout(template='plotly_dark')\nfig.show()","eea49a1a":"# Let's predict for 10 days more :)\nn=int(input())\ndate_n=datacd[len(trainPredict)-1:len(trainPredict)+n+1]['date']\nl=[]\nt=trainX[-1]\nfor i in range(n):\n    \n    pred=fitted_model.model.predict(t.reshape(1,1,1))\n    l.append(pred)\n    t=pred\nl=[i[0][0] for i in l]\n# Create figure with secondary y-axis\nfig = make_subplots(specs=[[{\"secondary_y\": True}]])\n\n# Add traces\nfig.add_trace(\n    go.Scatter(x=datacd['date'][:len(trainPredict)],y=trainX.flatten(), name=\"Original data\"),\n    secondary_y=False,\n)\n\n\nfig.add_trace(go.Scatter(x=date_n,y=l,name='Forecast'),secondary_y=False)\n\nfig.update_layout(template='plotly_dark')\nfig.show()","1ca5bdcb":"![](https:\/\/media2.giphy.com\/media\/UwrdbvJz1CNck\/giphy.gif?cid=ecf05e47yozvx1unhdgaus9s1iigclsbkrb5atr3zc9ain9w&rid=giphy.gif)","199366c6":"### We can clearly see that Pfizer\/Biotech's impact in USA is huge and it keeps on growing by the date increases . We can also see heavy impact of CNBG\/Cinovac starting in China . Sinovac takes a sudden roll in Turkey on 14th and keeps on growing after that :)","9fded455":"# Source Distribution of the data","a5201fb9":"This figure shows the increase in the total_vaccinations_per_hundred for different countries :)","ff840655":"## White line here represents the introduction of vaccine to the world and we can clearly see the decline in the rate of increase in the deaths ","c7d81961":"# Importing Packages","44dfa18d":"# we can clearly see the predictions using this model :) ","72b41ff9":"![](data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBxEQDxIREBISFRIXFhUYGBgVFRUVGRUYFhIXGBUWGBUbHSggGBolGxgeITMhJTUrLi8uFx8zODMtNygtLisBCgoKDg0OGhAQGislHyAwMC8tMC8tLS0tLSstLSsvKzUtMC0vKy0tLS0tLSsrLS8tLS0tLi8rLS0uKystKystK\/\/AABEIALcBEwMBIgACEQEDEQH\/xAAcAAEAAgMBAQEAAAAAAAAAAAAABQYCAwQHAQj\/xABCEAACAQIDBAUJBAgGAwAAAAAAAQIDEQQSIQUxQVETYXGBkQYUIlOSobHB0TJSYuEHFSNCY4Lw8TRUcnOTwzOywv\/EABkBAQADAQEAAAAAAAAAAAAAAAABAgQDBf\/EACkRAQACAgICAQMCBwAAAAAAAAABAgMRBCESMUETUWEycRQigaGx4fD\/2gAMAwEAAhEDEQA\/APVgAcnUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB8lJJXbSS5kZidsxWkFmfN6L6sbdMeK+Sf5YSgIrZm0J1KjjK1rN6LdqiVESZMdsdvGwAcG1sXKko5bat79dwVpSb2isO8ENQ239+PfH6MlaFeNRXg7r4dqESvkwXx\/qhsAAcgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAc+Ow3Swcb24rtXMrdehKEsslZ\/HrRZlioZ8mZZuXyvzOTbqXRq++6t8ysw3cXLalopMdS4tgtdK+eV28Ud218TOmouDSu3fRPs395Wq2NhRacpWlvVt\/uM6e1liHbO21uTVu21tCN9NOTDFs0WmY19li2Pip1FLO07WtolzvuMNv26OPPN8nciqNSdN3hJr59xhiK05u822\/64DfSI42s3nHprjFtpJXb4Fg2VgXSTcn6T4cEvmzh2Dl6SV\/tW08dbEhX2lCFTI79b5Ex91OVe9rfTrDtATvqgWeYAAAAAAAAAAAAAAAAGUItuy3lS8t\/KXF4HI6GCnXpuLzVE3anLWycIxb67uy4X5eRY3yo2njqfmtSpVrJyTcYUoqba3RtTgm1fW3NI6VxzbtWbafo2pQcUm+JqKj+j3ycWDoqbjJVp04Krmm5LNFJtRTdkrt7uPci3FJ1vpeYmOpY1Z5YuVm7Juy3uyvZdZ515J+VG18diIT6ChDCSlFvMmpRpuKl6Es6cpOMl6TVn1bj1Glg5PV6L3lK2FtKUsVGlOMI2c4SyqyUs6gsseHpOzXXfhrMb16c5yUrOrT79futYOmWCmt1ma\/N5\/dZGpW3DUDKrBxV5Ky5swjK+q+aIT+X0A5dp1slKTW96LvC1aza0RHy4pbYtUtZdHe1+PaSsvSi8r3rRrrWjKideE2jOmrKzXJ8OwrFnpZuHGonH7hhiMPOlOz3700+veKlRy9Kcm+0Va8pyc5\/wBlyRnhaWZ5n3Iq096ibe0NjdhVKs3OMkk7aSvfdbkdezPJ9Unnm80uHJX+JPpJJttJLe3okaaGOo1JZYVIuXLVX7L7+4blnm\/bnlQXJEZtqnPom6bd01e2+3GxP1IkW9o0XLKqkb99u57mIdK32quD2pUg1eTlHim7vtTLThKXSTjG9r8e65or7OpOWZwjfw8VxM02ndaNB1rFtT2tlCkoRUVeyVtSMx+1XGeWnZ23t8epHHU2rVlG10utKzOEtNvsy4eHqZtk7WzD1lOKktzX90bCJ2BV9GUOTuu\/f\/XWSxaHn5sf07zUAAcwAAAABzY\/aFHDxjKtUjBSkopydrye5e46rFG\/Sz\/haH+9\/wBcyk+dVPWT9qX1JXrTcbe32NSxELuOZXW9XPFPOqnrJ+1L6l1w+d4OOVtzdFWd9c3R6avjc7YcUXmYZeXlnBETHe5XmNRNr0l4o7qeMoxeRSV+\/wD9tx55HDVNG6j4aW65O2\/rS\/lJLEP9nBcHJe5N\/FHS2DwmO\/cuOHlRki8zH6Y3\/wB0t2LVPLeLgtbuzWt+JjgKak76NL4nnmFw1Zwi51GpW1W\/W8eN+SftF02LNwwFVp+lFVHfrVNai\/H8Y3tTFzJvbx0k8VjFKE40pLNdRveKy3laUlfRuKu+48+2XhJfrOrGDyxVWs4yndqybaeZu714mudCo5JQk4w6Pf8AizcudjqoUpRbzSck9y5elJ\/BpfynWON+WTLyvLU69TteZY55mk4tJn3z+XJe8ptKo4NSjvRbOglaLSumk9OtXM+bFOP5b+NyIzb61MPmJrOpHLJK3eazZ0Mvuy8GOhl92Xgzg2bazTi8Mqscsr776G4EJiZidwj4bHpLfmfa\/oR+1cCqVnFvK+fBkrtLFulBNJNt217G\/kQuPxzrWTSSXXe9ys6ehxZzWtFpnpUv1hUnWi1J2zJKN9LXtaxeKKKvs7Y+StmlJNR1ivhfsLLSkVlotE\/Li8qpS6CNvs51m8Ha\/Vf5Fb2dCUq1NQ+1mjbqs7t9heXaSaaTT3p6p9xhh8NTp36OEYt8UtfERPThphtam50akYfacXbr6u\/cefzXM9GnI4K+FpylmcIOXNxVxErxVx4BydGm5b8vH3e6xrxeIjTWabsvidtRkB5SRdoPhd+LSt8GPctMTqE3siEK8laXotN6b9OBO\/qmlyfiyl+TNSUYykna0tO3Krlp2Ti5zqvM73j3aNcCY16ZuRGWY8621EQkMLgoUm3G93zdzpALvLtabTuQABAAAAAAo36Wf8LQ\/wB7\/rmVD9VYn\/L1\/wDin9D2HF4OlWSVWnCaUlJKcVJKS3SV9zN4Xi+o08X\/AFVif8vX\/wCKf0Lfs\/ERhRpwldSUIpppppqKTTXMvJrjQgpOSjFSe9pK77Wd8OX6czOmXl4vrxEetKl55Dn7mbI7Qp2yy1XY9D0DBU0oLr1N+VHa2eLxqYZcXFtit5Ut\/b286ppS\/wDHJTXK9pL6+7vJjZW0accPXpSbzelok\/3oW+KZObQh6W7gcnQxdrpbzlbPaY8WmnFxRbziNffXr\/SnQxkLLX3My88hz9zLhtLyoweHbhOonNfuQTlLddLTRd555Kc1bGQeWTr1OvK9Jrt3tdxo\/ifw8jNgrj9Tv7\/hL4ap0s1Cmrt73wiuLZcOklljG+iSS4blYidieUDxianCMZwtfK9JZr624buveSZmzZZvL0uHipWnlWd7ZZ3zfiM75vxMQcG19bPgOTalaUKeaG+615JhalZtaKx8tmNwqqxUW2rO+n9dZD7VwMaSi4t63WrXiYR2tWXFPtSObEYiVR3m7v4dxSZh6eDBlpaNz01036XcdlORwy5m+EyrXeu0NtzaVXpXCM5RjG32W1e6Tu2u07fJ7as5t06jzNK6b370mnz3n3aGzY1mpXyy3Xte\/ajLZmzo0Lu+aT0va1lySLdaZ\/CdpStWUYuT3JNvuVymYradWcs2eS5JNpItlRppp7mmn3kNT2JBSu5OS5NW8XxEdJ8JSGHquVODlvcU322MKtOM01JJp8Gfa9ZRi5Sdkjhwe1I1J5FFrfZu2tvgQ7xqOpTGxcJDpIxssqTduf11LJChBO6jFPmkkVSnNxacXZrijpe0q3334L6ExLLyOPfJbdZ6WUETsXEVJylmk2klv53\/ALksXh5uXHOO3jIAA5gAAAAAAABlCN2lzMTGpNRTbBrfSYlVhBayikubSObE7VpQipelJP7izd\/YV6lhlUm5tLrdvciSnBNW4FvJe2KtJiJn922e0KdZLo27rfeLVr9vYYEdQlknZ9jIrbnlMo3p4dpy3Oe9R\/08317u0iN2c+TanHjcz18IDyjaeMrP8SXhFL5ErhsJm2VNv7zqL+WST9yZE7K2VVxU9LqN\/Sm9y5\/6pdRctrU40cDUhHSMabiu\/Txuy8z8PHwY5v55bepiVb8jKuXEuP3oSXg0\/ky8FK8iaN685fdh75NfJMupW3ts4G\/o\/wBQAFW0MK9JTjKL3NWMwCJ1O4VGcGm4tap27ybwWyYqN6ivJ8L6Lq03s7XhYOefKs3P+uJuKxVtzcybxEV6+6r+UuAcIPom1mWivqrNXSfWim4bG1KUtG+uLvbw4F22jSqdK1K7bfo9avol9DXtHYajFTmoS3X01X1Qa6zHjWJt3LmoV80YyW5pPxRtzmpIhtturm0zdHb929r8b2Kw0W1EJ1yMWyvbHhV6RNZlDje9mvmywCYTWdxtGbdpzlCKim1fWyvw0+Y2Fs5xkpVPRvZL8Kb1bJvBYWVWVlouL5I6sdstwy9Hmkno+afdwJ705WvSL6me0nU2fSlDKopcmt\/bfiV7EUXCTjLevf1li2dhXShlbu3q+S6kba2HhNpyim1uJmNvPxcn6VpiZ3DRsnD5KSvver+S8DsALMt7Te02n5AAFQAAAAAAAH2xxyvVdl9hceZIUHvjeykmvFaGmNPL6PLQSvS0V7+SMUlZbjm2ntGjhqUq1epGnTjvlLr3JLe2+S1OojvKLY9PG4Wrhqm6a0fGElrCa61JJkxpSZVXbm1J4iUXS1ozjGUHFP8AaRaTu+PHdwO3YvkwpJVK704QX\/0\/kvE0foqw7pYGrhqsMtWjiKsKitvbyyUk+Kaas+ot+DozTccsrN6Ozt4lpnU6hnjiUvM5LzM\/aJ+zZSpxhFRikorckrJdxCeWVbLhsv35xXcry+SJ+pDK7O3cVjy5lRjSpzr140YqTisybUpSje2nG0WVj2nPW1sU1p7k8h6NqVSf3ppezG\/xkWUhPI\/E0KmEpvD1Y1Y6ttaNNu9pQ3xa3WfImxb2nj08McVkABDsAAAAAFiH2zjU10cddfSfZwJHHU5SpyUHaXh2q\/ArNWlKLtJNPrK2lu4WKtp8pnuPhtwOG6Wajey3t9RIY7ZcIU3KLkmlxadzm2JO1a3NNfP5E9WpKcXGSumIjp05Oe9Msd9K3gKCqVFGTaTvu36I6NqbPVNKUW8t7O\/AlKGzqcJKUU7rddtmnb0v2SXOS+DGuiOTN81fCekXs7GdFK7V4vR\/UsdKopJSi7plSSvoic2LhpwzOWifB8+duArKebiprz33\/lJgAs8wAAAAAAAAAAHyS62Yun+KXivoZgDU6P4p+K+h86D8c\/FfQ3ADT5v+OfivofPN\/wAdTxX0N4A0ebP1lTxX0M3GbSj0tSy5NLxaWpsBI5\/NX6yp4r6EftvyaoY2mqWJ6ScFJSSzuNpJNXvGz3N+JMARMwhUcD+jjZ1CrCtShVjUg1KMumqOzTuuOuvBll81frKnj+R0gTaZ9mnN5o\/WVPH8h5o\/WVPa\/I6QQlzeaP1lT2vyHmj9ZU9r8jpAHN5o\/WVPa\/IeaP1lT2vyOkAc3mj9ZU9oxngFJWlObXW0zrAPTgp7KhF3jKafNNG3zN+sqe0dQCbWm3cy5fM36yp7RhV2cpK0pza63c7QCJ1O4cNPZkY\/ZlNdjsbPMv4lT2jqAJmZncuXzP8AiVPaPvmn8Sp7R0gIaFhvx1Pa\/I3RVvzPoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP\/9k=)","a296ffb4":"![](https:\/\/media2.giphy.com\/media\/l2QEilXOdTp3kKdeU\/giphy.gif?cid=ecf05e475ahizqq6fkrx597vazuqzizm01u1vg1z8meqd7ft&rid=giphy.gif)","edfeb7a2":" # When will the vaccine per hundred will become hundred ??","0abdbea1":"# Rate in increase of deaths over time","ecefd14f":"# Vaccinations over the world over time ","20fe8a6b":"# Reading The Data","25b9b52f":"# Effect Of Covid Vaccination on the world ","1db59f33":"![](https:\/\/media4.giphy.com\/media\/FO8CZ01HoTCA5ahQQq\/giphy.gif?cid=ecf05e47s7bm84o02deie6dzeavlr3rl1dgjh6lt56sbana0&rid=giphy.gif)","882f9fdc":"From this we cans see that Pfizer is the vaccine most spread in the world in Januray 2021 followed by Moderna and Sinovac :)","7e655211":"# Thank you :)\n\n\n\n# To be continued ....","eee65092":"# Total vaccinations vs Vaccination per hundred :P","c43a3ca3":"![](https:\/\/i.pinimg.com\/originals\/86\/92\/f1\/8692f18df55b22ac4cba9935210b41e9.gif)","3cdcae8e":"![](https:\/\/media0.giphy.com\/media\/YWWeMTgSprEAqzbanh\/giphy.gif?cid=ecf05e47na6liahmvi7fd20boi1nx9hjwr0ekfjtb7xyyrzc&rid=giphy.gif)","42b745db":"# Which vaccine is distributed in the world the most ??","08c160a5":"**While the world is under the influence of covid 19 the vaccine is a big ray hope for everyone . This file is about the Vaccine distribution in the world . Hope you like it :)**","15198302":"![](https:\/\/media2.giphy.com\/media\/WoWm8YzFQJg5i\/giphy.gif?cid=ecf05e47fdhl1ngusnm4zyubqs1klcp5seajwez0lad85jb8&rid=giphy.gif)"}}