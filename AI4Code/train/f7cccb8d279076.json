{"cell_type":{"e04b2a85":"code","27b14369":"code","cbe877bf":"code","2292553a":"code","c2ccda58":"code","84e66ef7":"code","79cc02cd":"code","62dad492":"code","42da753f":"code","65bc15cc":"code","0db3c2ed":"code","0395dd12":"code","f7d32605":"code","98edf697":"code","ae2a1f82":"code","b2169ef3":"code","a776e683":"code","cfe532c1":"code","9e74912e":"code","211156ae":"code","e1786cbb":"code","9a3d0d0d":"code","7694d283":"code","cc693cd0":"code","9be294d5":"code","ba48a7ac":"code","8ccf2495":"code","220ded52":"code","2e2d4a96":"code","dd542eb3":"code","f8d6f2f4":"code","ce1f9806":"code","12f2f18d":"code","0f16b439":"code","61137492":"code","f17456e9":"code","99da9b7e":"code","4117355f":"code","80b3eed0":"code","3d62aa62":"code","f171d5a4":"code","2f943364":"code","1f0339a9":"code","ec9183c5":"code","10e76f3f":"code","831ddf6d":"code","d2180900":"code","9a2ea720":"code","824b1f24":"code","6a3a08c2":"code","ef075f44":"code","a8167a58":"code","d019a209":"code","af221135":"code","699a1ea7":"code","c08ecf32":"code","861b9e7c":"code","4f3b0584":"code","41cb94f0":"code","3ea77345":"code","154255af":"code","1a84dcde":"code","a873d561":"code","fe78fcf9":"code","9b7bbed5":"code","0216e16c":"code","01ed1716":"code","58958b99":"code","e9b1b499":"code","5ba8dc19":"code","2ade5d7a":"code","228a1f8e":"code","6af1a5b6":"code","010ea145":"code","91344ce2":"code","98b50fa7":"markdown","1072fd84":"markdown","19ff029a":"markdown","65f555e7":"markdown","e3319381":"markdown","46eb470a":"markdown","cb69a7a3":"markdown","e56aa46e":"markdown","d007be25":"markdown","3c52eec3":"markdown","f612fc0f":"markdown","fd137a0b":"markdown","e6c33498":"markdown","69e32f30":"markdown","f6904aad":"markdown","e2c6ad62":"markdown","629a1922":"markdown","04ebca96":"markdown","68aa521b":"markdown","34b2064b":"markdown","8d3c3eb4":"markdown","0796e208":"markdown","5104987f":"markdown","c96bf217":"markdown","edd21ada":"markdown","60117ec9":"markdown","396e977c":"markdown","36c8a75f":"markdown","c97550fd":"markdown","30dc89a3":"markdown","555ca3da":"markdown","8823853a":"markdown","fa0dccde":"markdown","d0f2f243":"markdown","06b19540":"markdown","000b3a3e":"markdown"},"source":{"e04b2a85":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","27b14369":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nfrom sklearn.tree import DecisionTreeClassifier\nfrom xgboost import XGBClassifier\nimport catboost as catb\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.metrics import (roc_auc_score, roc_curve, auc, confusion_matrix, \\\n                             accuracy_score, classification_report, plot_confusion_matrix, \\\n                             plot_precision_recall_curve, precision_recall_curve, recall_score,\n                             plot_roc_curve, f1_score)\n\nimport warnings\nwarnings.filterwarnings('ignore')","cbe877bf":"def evaluate_preds(model, X_train, X_valid, y_train, y_valid):\n    y_train_pred = model.predict(X_train)\n    y_valid_pred = model.predict(X_valid)\n    print(\"TRAIN\\n\", round(f1_score(y_train, y_train_pred), 3))\n    print(\"TEST\\n\", round(f1_score(y_valid, y_valid_pred), 3))\n    get_classification_report(y_train, y_train_pred, y_valid, y_valid_pred)","2292553a":"def get_classification_report(y_train_true, y_train_pred, y_valid_true, y_valid_pred):\n    print('TRAIN\\n\\n' + classification_report(y_train_true, y_train_pred))\n    print('VALID\\n\\n' + classification_report(y_valid_true, y_valid_pred))\n    print('CONFUSION MATRIX\\n')\n    print(pd.crosstab(y_valid_true, y_valid_pred))","c2ccda58":"TRAIN_DATASET_PATH = '..\/input\/gb-credit-default\/train.csv'\nTEST_DATASET_PATH = '..\/input\/gb-credit-default\/test.csv'\nSAMPLE_SUBMIT_PATH = '..\/input\/gb-credit-default\/sample_submission.csv'","84e66ef7":"df_train = pd.read_csv(TRAIN_DATASET_PATH)\ndf_train.head()","79cc02cd":"df_test = pd.read_csv(TEST_DATASET_PATH)\ndf_test.head()","62dad492":"df_test.shape","42da753f":"df_train.info()","65bc15cc":"df_train['Credit Default'].value_counts()","0db3c2ed":"df_train.describe()","0395dd12":"df_train.hist(bins = 20, figsize = (16, 16))\nplt.show()","f7d32605":"for cat_colname in df_train.select_dtypes(include='object').columns:\n    print(str(cat_colname) + '\\n\\n' + str(df_train[cat_colname].value_counts()) + '\\n' + '*' * 100 + '\\n')","98edf697":"plt.figure(figsize=(10, 6))\n\ncorr_matrix = df_train.corr()\ncorr_matrix = np.round(corr_matrix, 2)\ncorr_matrix[np.abs(corr_matrix) < 0.3] = 0\n\nsns.heatmap(corr_matrix, annot=True, linewidths=.5, cmap='coolwarm')\n\nplt.title('Correlation matrix')\nplt.show()","ae2a1f82":"df_train[df_train['Credit Score'] <= 850]['Credit Score'].count()","b2169ef3":"df_train[df_train['Credit Score'] > 1000]['Credit Score'].count()","a776e683":"df_train['Credit Score Outlier'] = 0\ndf_train.loc[df_train['Credit Score'] > 1000, 'Credit Score Outlier'] = 1\ndf_train.loc[df_train['Credit Score'] > 1000, 'Credit Score'] = df_train.loc[df_train['Credit Score'] > 1000, 'Credit Score'] \/ 10","cfe532c1":"df_train['Credit Score'].hist(bins = 20, figsize = (5, 5))\nplt.show()","9e74912e":"df_train.loc[df_train['Credit Score Outlier'] == 1, 'Credit Score'].hist(bins = 20, figsize = (5, 5))\nplt.show()","211156ae":"df_train['Current Loan Amount'].value_counts()","e1786cbb":"df_train['Current Loan Amount Outlier'] = 0\ndf_train.loc[df_train['Current Loan Amount'] == 99999999.0, 'Current Loan Amount Outlier'] = 1\ndf_train.loc[df_train['Current Loan Amount'] == 99999999.0, 'Current Loan Amount'] = df_train['Current Loan Amount'].median()","9a3d0d0d":"df_train[df_train['Current Loan Amount'] == 99999999.0]['Current Loan Amount'].count()","7694d283":"df_train['Maximum Open Credit'].hist(bins = 20, figsize = (4, 4))\nplt.show()","cc693cd0":"max_credit = 99999999.0","9be294d5":"df_train[df_train['Maximum Open Credit'] > max_credit]['Maximum Open Credit'].value_counts()","ba48a7ac":"df_train['Maximum Open Credit Outlier'] = 0\ndf_train.loc[df_train['Maximum Open Credit'] > max_credit, 'Maximum Open Credit Outlier'] = 1\ndf_train.loc[df_train['Maximum Open Credit'] > max_credit, 'Maximum Open Credit'] = max_credit","8ccf2495":"df_train[df_train['Maximum Open Credit Outlier'] == 1]","220ded52":"df_train['Months since last delinquent'].describe()","2e2d4a96":"NaN_percentage = df_train['Months since last delinquent'].isna().sum() \/ df_train.shape[0]\nNaN_percentage","dd542eb3":"df_train.isna().sum()","f8d6f2f4":"df_train['Annual Income'].median()","ce1f9806":"df_train['Annual Income NaN'] = 0\ndf_train.loc[df_train['Annual Income'].isna(), 'Annual Income NaN'] = 1\ndf_train[df_train['Annual Income NaN']==1].count()","12f2f18d":"df_train['Annual Income'].fillna(df_train['Annual Income'].median(), inplace = True)","0f16b439":"df_train['Annual Income'].isna().sum()","61137492":"df_train['Annual Income'].hist(bins = 20, figsize = (4, 4))\nplt.show()","f17456e9":"mode = df_train['Years in current job'].mode().values[0]\nmode","99da9b7e":"df_train['Years in current job NaN'] = 0\ndf_train.loc[df_train['Years in current job'].isna(), 'Years in current job NaN'] = 1\ndf_train['Years in current job'].fillna(mode, inplace = True)","4117355f":"df_train['Years in current job'].isna().sum()","80b3eed0":"df_train.drop('Months since last delinquent', axis=1, inplace=True)","3d62aa62":"df_train['Bankruptcies'].median()","f171d5a4":"df_train['Bankruptcies NaN'] = 0\ndf_train.loc[df_train['Bankruptcies'].isna(), 'Bankruptcies NaN'] = 1\ndf_train['Bankruptcies'].fillna(df_train['Bankruptcies'].median(), inplace = True)\ndf_train['Bankruptcies'].isna().sum()","2f943364":"df_train['Credit Score'].median()","1f0339a9":"df_train['Credit Score NaN'] = 0\ndf_train.loc[df_train['Credit Score'].isna(), 'Credit Score NaN'] = 1\ndf_train['Credit Score'].fillna(df_train['Credit Score'].median(), inplace = True)\ndf_train['Credit Score'].isna().sum()","ec9183c5":"df_train['Credit Score'].hist(bins=20, figsize = (4, 4))\nplt.show()","10e76f3f":"df_train.isna().sum()","831ddf6d":"df_train['Long Term'] = df_train['Term'].map({'Long Term': 1, 'Short Term': 0})","d2180900":"df_train['Years in current job'] = df_train['Years in current job'].map({'< 1 year':0, \n                                                                       '1 year':0, \n                                                                       '2 years':0, \n                                                                       '3 years':0, \n                                                                       '4 years':1, \n                                                                       '5 years':1, \n                                                                       '6 years':1, \n                                                                       '7 years':2,\n                                                                       '8 years':2,\n                                                                       '9 years':2,\n                                                                       '10+ years':3})","9a2ea720":"df_train = pd.concat([df_train, pd.get_dummies(df_train['Home Ownership'])], axis=1)","824b1f24":"def credit_score_to_cat(X):\n    bins = [300, 579, 669, 739, 799, 850]\n    X['Credit Score Cat'] = pd.cut(X['Credit Score'], bins=bins, labels=False)\n    \n    X['Credit Score Cat'].fillna(-1, inplace=True)\n    return X","6a3a08c2":"df_train = credit_score_to_cat(df_train)","ef075f44":"class DataPreparation:\n    \n    def __init__(self):\n        self.medians = None\n        self.modes = None\n        self.max_score = 850\n        self.max_credit = 99999999.0\n        \n    def fit(self, X):\n        \"\"\"\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\"\"\"\n        X = X.copy()\n        # \u0420\u0430\u0441\u0447\u0435\u0442 \u043c\u0435\u0434\u0438\u0430\u043d \u0438 \u043c\u043e\u0434\n        self.medians = X.median()\n        self.modes = X.mode().loc[0]\n        \n    def transform(self, X):\n        \"\"\"\u0422\u0440\u0430\u043d\u0441\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445\"\"\"\n        \n        # Credit Score (\u0431\u0430\u043b\u043b\u044b \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u043e\u0433\u043e \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430)\n        X['Credit Score Outlier'] = 0\n        X['Credit Score NaN'] = 0\n        X.loc[X['Credit Score'] > self.max_score, 'Credit Score Outlier'] = 1\n        X.loc[X['Credit Score'].isna(), 'Credit Score NaN'] = 1\n        \n        X.loc[X['Credit Score'] > self.max_score, 'Credit Score'] = \\\n                                X.loc[df_train['Credit Score'] > self.max_score, 'Credit Score'] \/ 10\n        \n        # Current Loan Amount (\u0442\u0435\u043a\u0443\u0449\u0430\u044f \u0441\u0443\u043c\u043c\u0430 \u043a\u0440\u0435\u0434\u0438\u0442\u0430)\n        X['Current Loan Amount Outlier'] = 0\n        X.loc[X['Current Loan Amount'] == self.max_credit, 'Current Loan Amount Outlier'] = 1\n        X.loc[X['Current Loan Amount'] == self.max_credit, 'Current Loan Amount'] = self.medians['Current Loan Amount']\n        \n        # Maximum Open Credit (\u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u0439 \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u0439 \u043a\u0440\u0435\u0434\u0438\u0442)\n        X['Maximum Open Credit Outlier'] = 0\n        X.loc[X['Maximum Open Credit'] > max_credit, 'Maximum Open Credit Outlier'] = 1\n        X.loc[X['Maximum Open Credit'] > max_credit, 'Maximum Open Credit'] = max_credit\n        \n        # Annual Income (\u0433\u043e\u0434\u043e\u0432\u043e\u0439 \u0434\u043e\u0445\u043e\u0434)\n        X['Annual Income NaN'] = 0\n        X.loc[X['Annual Income'].isna(), 'Annual Income NaN'] = 1\n        X['Annual Income'].fillna(self.medians['Annual Income'], inplace = True)\n        \n        # Years in current job (\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043b\u0435\u0442 \u043d\u0430 \u0442\u0435\u043a\u0443\u0449\u0435\u043c \u043c\u0435\u0441\u0442\u0435 \u0440\u0430\u0431\u043e\u0442\u044b)\n        X['Years in current job NaN'] = 0\n        X.loc[X['Years in current job'].isna(), 'Years in current job NaN'] = 1\n        X['Years in current job'].fillna(self.modes['Years in current job'], inplace = True)\n        \n        # Months since last delinquent (\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0435\u0441\u044f\u0446\u0435\u0432 \u0441 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u043f\u0440\u043e\u0441\u0440\u043e\u0447\u043a\u0438 \u043f\u043b\u0430\u0442\u0435\u0436\u0430)\n        X.drop('Months since last delinquent', axis=1, inplace=True)\n        \n        # Bankruptcies (\u0431\u0430\u043d\u043a\u0440\u043e\u0442\u0441\u0442\u0432\u0430)\n        X['Bankruptcies NaN'] = 0\n        X.loc[X['Bankruptcies'].isna(), 'Bankruptcies NaN'] = 1\n        #X['Bankruptcies'].fillna(self.medians['Bankruptcies'], inplace = True)\n        X['Bankruptcies'].fillna(self.modes['Bankruptcies'], inplace = True)\n        \n        X.fillna(self.medians, inplace=True)\n        X.fillna(self.modes, inplace=True)\n        \n        return X","a8167a58":"class FeatureGenerator():\n    \"\"\"\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u0444\u0438\u0447\"\"\"\n    \n    def fit(self, X, y=None):\n        X = X.copy()\n        \n    def transform(self, X):\n        \n        #Term (\u0441\u0440\u043e\u043a \u043a\u0440\u0435\u0434\u0438\u0442\u0430)\n        X['Long Term'] = X['Term'].map({'Long Term' : 1, 'Short Term': 0})\n        \n        # Years in current job (\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043b\u0435\u0442 \u043d\u0430 \u0442\u0435\u043a\u0443\u0449\u0435\u043c \u043c\u0435\u0441\u0442\u0435 \u0440\u0430\u0431\u043e\u0442\u044b)\n        X['Years in current job'] = X['Years in current job']. map({'< 1 year':0,\n                                                                   '1 year':0,\n                                                                   '2 years':0,\n                                                                   '3 years':0,\n                                                                   '4 years':1,\n                                                                   '5 years':1,\n                                                                   '6 years':1,\n                                                                   '7 years':2,\n                                                                   '8 years':2,\n                                                                   '9 years':2,\n                                                                   '10+ years':3,})\n        \n        # Home Ownership (\u0434\u043e\u043c\u043e\u0432\u043b\u0430\u0434\u0435\u043d\u0438\u0435)\n        X = pd.concat([X, pd.get_dummies(X['Home Ownership'])], axis=1)\n        \n        # Credit Score (\u0431\u0430\u043b\u043b\u044b \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u043e\u0433\u043e \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430)\n        X = self.credit_score_to_cat(X)\n        \n        return X\n    \n    def credit_score_to_cat(self, X):\n        bins = [300, 579, 669, 739, 799, 850]\n        X['Credit Score Cat'] = pd.cut(X['Credit Score'], bins=bins, labels=False)\n        \n        X['Credit Score Cat'].fillna(-1, inplace=True)\n        return X","d019a209":"feature_names = ['Annual Income', \n                 'Tax Liens', \n                 'Number of Open Accounts', \n                 'Years of Credit History', \n                 'Maximum Open Credit', \n                 'Number of Credit Problems', \n#                  'Months since last delinquent', \n                 'Bankruptcies',\n                 'Current Loan Amount', \n                 'Current Credit Balance', \n                 'Monthly Debt', \n                 'Credit Score', \n                 'Years in current job', \n#                  'Purpose'\n                ]\n\nnew_feature_names = [\n#                          'Home Ownership',\n#                          'Term',\n#                          'Credit Score Outlier',\n#                          'Current Loan Amount Outlier',\n#                          'Maximum Open Credit Outlier',\n#                          'Annual Income NaN',\n#                          'Years in current job NaN',\n#                          'Bankruptcies NaN',\n#                          'Credit Score NaN',\n                         'Long Term',\n                         'Have Mortgage',\n                         'Home Mortgage',\n                         'Own Home',\n                         'Rent',\n                         'Credit Score Cat'\n                    ]\n\ntarget_name = 'Credit Default'","af221135":"all_feature_names = (feature_names)+(new_feature_names)\nlen(all_feature_names)","699a1ea7":"df_train = pd.read_csv(TRAIN_DATASET_PATH)\ndf_test = pd.read_csv(TEST_DATASET_PATH)","c08ecf32":"X = df_train.drop(columns=target_name)\ny = df_train[target_name]","861b9e7c":"X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.33, shuffle=True, random_state=14)","4f3b0584":"preprocessor = DataPreparation()\npreprocessor.fit(X_train) # fit \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u043a X_train\n\nX_train = preprocessor.transform(X_train)\nX_valid = preprocessor.transform(X_valid)\ndf_test = preprocessor.transform(df_test)","41cb94f0":"X_train.shape, X_valid.shape, df_test.shape","3ea77345":"features_gen = FeatureGenerator()\nfeatures_gen.fit(X_train, y_train) # fit \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u043c \u0442\u043e\u043b\u044c\u043a\u043e X_train, y_train\n\nX_train = features_gen.transform(X_train)\nX_valid = features_gen.transform(X_valid)\ndf_test = features_gen.transform(df_test)","154255af":"X_train.shape, X_valid.shape, df_test.shape","1a84dcde":"\"\"\"\u0432\u043e \u0432\u0441\u0435\u0445 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u0430\u0445 \u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u043d\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 (all_feature_names)\"\"\"\nX_train = X_train[all_feature_names]\nX_valid = X_valid[all_feature_names]\ndf_test = df_test[all_feature_names]","a873d561":"X_train.shape, X_valid.shape, df_test.shape","fe78fcf9":"X_train.isna().sum().sum(), X_valid.isna().sum().sum(), df_test.isna().sum().sum()","9b7bbed5":"X_train.isna().sum()","0216e16c":"imbalance = y_train.value_counts()[0] \/ y_train.value_counts()[1]\nimbalance","01ed1716":"model_catb = catb.CatBoostClassifier(\n                                    silent=True,\n                                    random_state=14,\n                                    class_weights=[1, imbalance],\n                                    eval_metric='F1',\n                                    early_stopping_rounds=35,\n                                    use_best_model=True,\n                                    custom_metric=['Precision', 'Recall'],\n                                    iterations=150,\n                                    max_depth=5,\n                                    min_data_in_leaf=5\n                                    )\nmodel_catb.fit(X_train, y_train, plot=True, eval_set=(X_valid, y_valid))","58958b99":"evaluate_preds(model_catb, X_train, X_valid, y_train, y_valid)","e9b1b499":"feature_importances = pd.DataFrame(zip(X_train.columns, model_catb.feature_importances_), \n                                   columns=['feature_name', 'importance'])\n\nfeature_importances.sort_values(by='importance', ascending=False)","5ba8dc19":"df_test.shape","2ade5d7a":"submit = pd.read_csv(SAMPLE_SUBMIT_PATH)\nsubmit.head()","228a1f8e":"predictions = model_catb.predict(df_test)\npredictions","6af1a5b6":"len(predictions)","010ea145":"submit['Credit Default'] = predictions","91344ce2":"submit.to_csv('submit_Credit_default150550Bmodas.csv', index=False)","98b50fa7":"#### Home ownership (\u0434\u043e\u043c\u043e\u0432\u043b\u0430\u0434\u0435\u043d\u0438\u0435)","1072fd84":"* Credit Score (\u0431\u0430\u043b\u043b\u044b \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u043e\u0433\u043e \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430)\n* Current Loan Amount (\u0442\u0435\u043a\u0443\u0449\u0430\u044f \u0441\u0443\u043c\u043c\u0430 \u043a\u0440\u0435\u0434\u0438\u0442\u0430)\n* Maximum Open Credit (\u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u0439 \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u0439 \u043a\u0440\u0435\u0434\u0438\u0442)\n* Months since last delinquent (\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0435\u0441\u044f\u0446\u0435\u0432 \u0441 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u043f\u0440\u043e\u0441\u0440\u043e\u0447\u043a\u0438 \u043f\u043b\u0430\u0442\u0435\u0436\u0430)","19ff029a":"#### Bankruptcies (\u0431\u0430\u043d\u043a\u0440\u043e\u0442\u0441\u0442\u0432\u0430)","65f555e7":"\u0442.\u043a. \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 50+% \u0434\u0430\u043d\u043d\u044b\u0445, \u0442\u043e \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u0434\u0435\u043b\u0430\u0435\u043c \u0438 \u0434\u0440\u043e\u043f\u043d\u0435\u043c \u0432 \u0440\u0430\u0437\u0434\u0435\u043b\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432.","e3319381":"### \u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\nTerm (\u0441\u0440\u043e\u043a \u043a\u0440\u0435\u0434\u0438\u0442\u0430) - \u0437\u0430\u043c\u0435\u043d\u0430 \u043d\u0430 Long Term (\u0434\u043e\u043b\u0433\u043e\u0441\u0440\u043e\u0447\u043d\u044b\u0439 \u043a\u0440\u0435\u0434\u0438\u0442): 1-\u0434\u0430, 0-\u043d\u0435\u0442","46eb470a":"#### Years in current job (\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043b\u0435\u0442 \u043d\u0430 \u0442\u0435\u043a\u0443\u0449\u0435\u043c \u043c\u0435\u0441\u0442\u0435 \u0440\u0430\u0431\u043e\u0442\u044b) - \u0441\u0434\u0435\u043b\u0430\u0435\u043c \u0440\u0430\u0437\u0431\u0438\u0432\u043a\u0443 \u043d\u0430 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438:<3, 4-6, 7-9, 10+ \u043b\u0435\u0442","cb69a7a3":"#### \u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","e56aa46e":"#### \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430\n* Home Ownership - \u0434\u043e\u043c\u043e\u0432\u043b\u0430\u0434\u0435\u043d\u0438\u0435\n* Annual Income - \u0433\u043e\u0434\u043e\u0432\u043e\u0439 \u0434\u043e\u0445\u043e\u0434\n* Years in current job - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043b\u0435\u0442 \u043d\u0430 \u0442\u0435\u043a\u0443\u0449\u0435\u043c \u043c\u0435\u0441\u0442\u0435 \u0440\u0430\u0431\u043e\u0442\u044b\n* Tax Liens - \u043d\u0430\u043b\u043e\u0433\u043e\u0432\u044b\u0435 \u043e\u0431\u0440\u0435\u043c\u0435\u043d\u0435\u043d\u0438\u044f\n* Number of Open Accounts - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u0445 \u0441\u0447\u0435\u0442\u043e\u0432\n* Years of Credit History - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043b\u0435\u0442 \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u043e\u0439 \u0438\u0441\u0442\u043e\u0440\u0438\u0438\n* Maximum Open Credit - \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u0439 \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u0439 \u043a\u0440\u0435\u0434\u0438\u0442 (\u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0441\u0443\u043c\u043c\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043a\u043e\u0433\u0434\u0430-\u043b\u0438\u0431\u043e \u0431\u044b\u043b\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0443)\n* Number of Credit Problems - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u043e\u0431\u043b\u0435\u043c \u0441 \u043a\u0440\u0435\u0434\u0438\u0442\u043e\u043c\n* Months since last delinquent - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0435\u0441\u044f\u0446\u0435\u0432 \u0441 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u043f\u0440\u043e\u0441\u0440\u043e\u0447\u043a\u0438 \u043f\u043b\u0430\u0442\u0435\u0436\u0430\n* Bankruptcies - \u0431\u0430\u043d\u043a\u0440\u043e\u0442\u0441\u0442\u0432\u0430\n* Purpose - \u0446\u0435\u043b\u044c \u043a\u0440\u0435\u0434\u0438\u0442\u0430\n* Term - \u0441\u0440\u043e\u043a \u043a\u0440\u0435\u0434\u0438\u0442\u0430\n* Current Loan Amount - \u0442\u0435\u043a\u0443\u0449\u0430\u044f \u0441\u0443\u043c\u043c\u0430 \u043a\u0440\u0435\u0434\u0438\u0442\u0430 (\u0441\u0443\u043c\u043c\u0430, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0435\u0449\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u043e\u0438\u0442 \u0432\u044b\u043f\u043b\u0430\u0442\u0438\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0443)\n* Current Credit Balance - \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u044b\u0439 \u0431\u0430\u043b\u0430\u043d\u0441 (\u0441\u0443\u043c\u043c\u0430, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043c\u043e\u0436\u0435\u0442 \u0442\u0440\u0430\u0442\u0438\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442 \u0441 \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u043e\u0433\u043e \u0441\u0447\u0435\u0442\u0430)\n* Monthly Debt - \u0435\u0436\u0435\u043c\u0435\u0441\u044f\u0447\u043d\u044b\u0439 \u0434\u043e\u043b\u0433\n* Credit Score - \u0431\u0430\u043b\u043b\u044b \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u043e\u0433\u043e \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430\n* Credit Default - \u0444\u0430\u043a\u0442 \u043d\u0435\u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u044b\u0445 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432 (0 - \u043f\u043e\u0433\u0430\u0448\u0435\u043d \u0432\u043e\u0432\u0440\u0435\u043c\u044f, 1 - \u043f\u0440\u043e\u0441\u0440\u043e\u0447\u043a\u0430)","d007be25":"#### \u0412\u0430\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","3c52eec3":"#### Credit Score (\u0431\u0430\u043b\u043b\u044b \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u043e\u0433\u043e \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430)","f612fc0f":"\u0432 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u044f Current Loan Amount = 99 999 999.00. \u043f\u0440\u0438\u043c\u0435\u043c \u0435\u0433\u043e \u0437\u0430 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0439 \u043a\u0440\u0435\u0434\u0438\u0442","fd137a0b":"#### Annual Income (\u0433\u043e\u0434\u043e\u0432\u043e\u0439 \u0434\u043e\u0445\u043e\u0434)\n\u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043c\u0435\u0434\u0438\u0430\u043d\u043e\u0439","e6c33498":"## \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a \u0438 \u0441\u043a\u0440\u0438\u043f\u0442\u043e\u0432","69e32f30":"#### \u041f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435","f6904aad":"Credit Score(\u0431\u0430\u043b\u043b\u044b \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u043e\u0433\u043e \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430) - \u0421\u0434\u0435\u043b\u0430\u0435\u043c \u0440\u0430\u0437\u0431\u0438\u0432\u043a\u0443 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430 \u043d\u0430 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438:\n* Excellent: 800 to 850\n* Very Good: 740 to 799\n* Good: 670 to 739\n* Fair: 580 to 669\n* Poor: 300 to 579","e2c6ad62":"## \u041e\u0431\u0437\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445","629a1922":"#### Years in current job (\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043b\u0435\u0442 \u043d\u0430 \u0442\u0435\u043a\u0443\u0449\u0435\u043c \u043c\u0435\u0441\u0442\u0435 \u0440\u0430\u0431\u043e\u0442\u044b)\n\u0417\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043c\u043e\u0434\u043e\u0439.","04ebca96":"#### \u041e\u0431\u0437\u043e\u0440 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","68aa521b":"870 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439, \u043d\u0430 \u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c\u0435. \u0417\u0430\u043c\u0435\u043d\u0438\u043c \u043d\u0430 \u043c\u0435\u0434\u0438\u0430\u043d\u0443.","34b2064b":"#### Months since last delinquent (\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0435\u0441\u044f\u0446\u0435\u0432 \u0441 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u043f\u0440\u043e\u0441\u0440\u043e\u0447\u043a\u0438 \u043f\u043b\u0430\u0442\u0435\u0436\u0430)","8d3c3eb4":"### \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432.","0796e208":"### \u0420\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u0435 \u043d\u0430 train \u0438 test","5104987f":"### \u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438","c96bf217":"#### Credit Score (\u0431\u0430\u043b\u043b\u044b \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u043e\u0433\u043e \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430)","edd21ada":"### \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432","60117ec9":"* Annual Income (\u0433\u043e\u0434\u043e\u0432\u043e\u0439 \u0434\u043e\u0445\u043e\u0434)\n* Years in current job (\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043b\u0435\u0442 \u043d\u0430 \u0442\u0435\u043a\u0443\u0449\u0435\u043c \u043c\u0435\u0441\u0442\u0435 \u0440\u0430\u0431\u043e\u0442\u044b)\n* Months since last delinquent (\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0435\u0441\u044f\u0446\u0435\u0432 \u0441 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u043f\u0440\u043e\u0441\u0440\u043e\u0447\u043a\u0438 \u043f\u043b\u0430\u0442\u0435\u0436\u0430)\n* Bankruptcies (\u0431\u0430\u043d\u043a\u0440\u043e\u0442\u0441\u0442\u0432\u0430)\n* Credit Score (\u0431\u0430\u043b\u043b\u044b \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u043e\u0433\u043e \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430)","396e977c":"#### \u041e\u0431\u0437\u043e\u0440 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 \u0438 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439","36c8a75f":"#### Months since last delinquent (\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0435\u0441\u044f\u0446\u0435\u0432 \u0441 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u043f\u0440\u043e\u0441\u0440\u043e\u0447\u043a\u0438 \u043f\u043b\u0430\u0442\u0435\u0436\u0430)","c97550fd":"### \u041c\u0430\u0442\u0440\u0438\u0446\u0430 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438","30dc89a3":"\u0415\u0441\u0442\u044c 400 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0432 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435 \u0431\u043e\u043b\u0435\u0435 1000, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0430 \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u0431\u043e\u043b\u044c\u0448\u0435 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0445 5543 \u0432 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435 [300, 850]. \u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u043e\u0433\u043e \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430 FICO credit score, \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043c\u0435\u0436\u0434\u0443 300\u2013850 \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0442 \u043a\u0440\u0435\u0434\u0438\u0442\u043e\u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u044c \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430. https:\/\/www.investopedia.com\/terms\/c\/credit_score.asp \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0431\u043e\u043b\u0435\u0435 850 \u043d\u0430 10.","555ca3da":"## \u041f\u0443\u0442\u0438 \u043a \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044f\u043c \u0438 \u0444\u0430\u0439\u043b\u0430\u043c","8823853a":"#### Current Loan Amount (\u0442\u0435\u043a\u0443\u0449\u0430\u044f \u0441\u0443\u043c\u043c\u0430 \u043a\u0440\u0435\u0434\u0438\u0442\u0430)","fa0dccde":"### \u041a\u043b\u0430\u0441\u0441\u044b \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445\n#### \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0441\u0432 \u0438 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432","d0f2f243":"#### \u041e\u0431\u0437\u043e\u0440 \u043d\u043e\u043c\u0438\u043d\u0430\u0442\u0438\u0432\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","06b19540":"#### \u041e\u0442\u0431\u043e\u0440 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","000b3a3e":"#### Maximum Open Credit (\u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u0439 \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u0439 \u043a\u0440\u0435\u0434\u0438\u0442) - \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0441\u0443\u043c\u043c\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043a\u043e\u0433\u0434\u0430-\u043b\u0438\u0431\u043e \u0431\u044b\u043b\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 (\u0435\u0441\u0442\u044c 1 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 1.3 \u043c\u043b\u0440\u0434)"}}