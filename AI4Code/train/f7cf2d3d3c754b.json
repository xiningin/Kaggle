{"cell_type":{"b46274fa":"code","787c4e58":"code","dbdd256f":"code","0459bd93":"code","fc2e4720":"code","3ea4981d":"code","b13495bf":"code","3920714f":"code","2b45ec7a":"code","7dc57838":"code","f4b83423":"code","6184a75e":"code","524e3044":"code","023c5079":"code","57f8acb9":"markdown"},"source":{"b46274fa":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","787c4e58":"train_data=pd.read_csv('..\/\/input\/\/train.csv')\ntest_data=pd.read_csv('..\/\/input\/\/test.csv')","dbdd256f":"x_train=train_data.drop('label',axis=1).values\ny_train=train_data['label'].values","0459bd93":"x_train=x_train.reshape(42000,28,28)","fc2e4720":"import matplotlib.pyplot as plt\nplt.figure(figsize=(10,10))\nfor i in range(25):\n    plt.subplot(5,5,i+1)\n    plt.xticks([])\n    plt.yticks([])\n    plt.imshow(x_train[i],cmap=plt.cm.gray)\n    plt.xlabel(y_train[i])","3ea4981d":"#Normalization\nx_train=x_train\/255\nx_test=test_data\/255","b13495bf":"import keras\nfrom keras.utils import to_categorical\nfrom keras.models import Sequential\nfrom keras.layers import Dense,Dropout,Flatten","3920714f":"#Converting labels in to categorical variables\ny_train=to_categorical(y_train)","2b45ec7a":"#Adding Learning Rate Decay Regularization \nfrom keras.optimizers import SGD\nlr=0.01\nepochs=100\ndecay_rate=lr\/epochs\nsgd=SGD(lr=lr,momentum=0.8,decay=decay_rate)\n\nmodel3=Sequential()\nmodel3.add(Flatten(input_shape=(28,28)))\nmodel3.add(Dense(256,activation='relu'))\nmodel3.add(Dense(128,activation='relu'))\nmodel3.add(Dense(32,activation='relu'))\nmodel3.add(Dense(10,activation='softmax'))\n\nmodel3.compile(optimizer=sgd,loss='categorical_crossentropy',metrics=['accuracy'])\nhistory_3=model3.fit(x_train,y_train,batch_size=128,epochs=10,verbose=0,validation_split=0.33,shuffle=True)","7dc57838":"model3.evaluate(x_train,y_train)","f4b83423":"x_test=test_data.values.reshape(28000,28,28)","6184a75e":"results = model3.predict(x_test)\nresults = np.argmax(results,axis = 1)\ndata_out = pd.DataFrame({'ImageId': range(1, len(x_test) + 1), 'Label': results})","524e3044":"data_out.to_csv('MNIST-Prediction.csv', index = None)","023c5079":"plt.figure(figsize=(10,10))\nfor i in range (25):\n    plt.subplot(5,5,1+i)\n    plt.xticks([])\n    plt.yticks([])\n    plt.imshow(x_test[i],cmap=plt.cm.gray)\n    plt.xlabel(np.argmax(y_predict[i]))","57f8acb9":"Output Plot"}}