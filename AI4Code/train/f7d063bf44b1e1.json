{"cell_type":{"4218569a":"code","c16b8515":"code","19153366":"code","d66a4350":"code","6133f804":"code","7f54a892":"code","6f23e930":"code","b41c321c":"code","94644015":"code","4eb57c34":"code","4c2857fc":"code","ed3c4dd1":"code","7ec9c15b":"code","5d123df8":"code","707e85c3":"code","5502fb07":"code","9cc57202":"markdown","64828b4c":"markdown","c62fb4e6":"markdown","d78e5287":"markdown","093b93b1":"markdown","50b48f62":"markdown","9eab62bc":"markdown","1d28d308":"markdown"},"source":{"4218569a":"import os\nfor file in os.listdir('\/kaggle\/input\/dogs-vs-cats'):\n    print(file)","c16b8515":"from zipfile import ZipFile as zf\ntrain_zip = zf('\/kaggle\/input\/dogs-vs-cats\/train.zip', 'r')\ntrain_zip.extractall()\ntrain_zip.close()\ntest_zip = zf('\/kaggle\/input\/dogs-vs-cats\/test1.zip', 'r')\ntest_zip.extractall()\ntest_zip.close()","19153366":"print('there exist ' + str(len(os.listdir('.\/train'))) + ' training examples')\nprint('there exist ' + str(len(os.listdir('.\/test1'))) + ' test examples')\nprint(os.listdir('.\/train')[0:10]) # print the first ten file names in the training set\nprint(os.listdir('.\/test1')[0:10]) # print the first ten file names in the training set","d66a4350":"os.mkdir('.\/train1')\nos.mkdir('.\/train1\/cats')\nos.mkdir('.\/train1\/dogs')","6133f804":"import shutil\n\nfor file_name in os.listdir('.\/train'):\n    if file_name.split('.')[0] == 'cat':\n        shutil.copy(os.path.join('.\/train\/', file_name) , os.path.join('.\/train1\/cats', file_name))\n    elif file_name.split('.')[0] == 'dog':\n        shutil.copy(os.path.join('.\/train\/', file_name) , os.path.join('.\/train1\/dogs', file_name))","7f54a892":"print(len(os.listdir('.\/train1\/cats')))\nprint(len(os.listdir('.\/train1\/dogs')))","6f23e930":"os.mkdir('.\/training_set')\nos.mkdir('.\/training_set\/cats')\nos.mkdir('.\/training_set\/dogs')\nos.mkdir('.\/val_set')\nos.mkdir('.\/val_set\/cats')\nos.mkdir('.\/val_set\/dogs')","b41c321c":"import random\ntraincats = os.listdir('.\/train1\/cats')\nrandom.shuffle(traincats)\ntraindogs = os.listdir('.\/train1\/dogs')\nrandom.shuffle(traindogs)\nfor file_name in traincats[:10000]:\n    shutil.copy(os.path.join('.\/train1\/cats', file_name) , os.path.join('.\/training_set\/cats', file_name))\nfor file_name in traincats[10000:]:\n    shutil.copy(os.path.join('.\/train1\/cats', file_name) , os.path.join('.\/val_set\/cats', file_name))\nfor file_name in traindogs[:10000]:\n    shutil.copy(os.path.join('.\/train1\/dogs', file_name) , os.path.join('.\/training_set\/dogs', file_name))\nfor file_name in traindogs[10000:]:\n    shutil.copy(os.path.join('.\/train1\/dogs', file_name) , os.path.join('.\/val_set\/dogs', file_name))","94644015":"print(len(os.listdir('.\/training_set\/cats\/')))\nprint(len(os.listdir('.\/training_set\/dogs\/')))\nprint(len(os.listdir('.\/val_set\/cats\/')))\nprint(len(os.listdir('.\/val_set\/dogs\/')))","4eb57c34":"import tensorflow as tf\nimport tensorflow.keras.layers as tfl\n\nmodel = tf.keras.Sequential([\n    tfl.Conv2D(64, (3,3), activation='relu', input_shape=(150, 150, 3)),\n    tfl.BatchNormalization(),\n    tfl.MaxPooling2D(2,2),\n    tfl.Conv2D(128, (3,3), activation='relu'),\n    tfl.BatchNormalization(),\n    tfl.MaxPooling2D(2,2),\n    tfl.Conv2D(256, (3,3), activation='relu'),\n    tfl.BatchNormalization(),\n    tfl.MaxPooling2D(2,2),\n    tfl.Flatten(),\n    tfl.Dense(512, activation='relu'),\n    tfl.Dense(1, activation='sigmoid')\n])","4c2857fc":"model.summary()","ed3c4dd1":"model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate = 0.001), loss='binary_crossentropy', metrics=['binary_accuracy'])","7ec9c15b":"from tensorflow.keras.preprocessing.image import ImageDataGenerator","5d123df8":"train_datagen = ImageDataGenerator(rescale=1.\/255,\n                                  rotation_range = 40,\n                                  width_shift_range = 0.2,\n                                  height_shift_range = 0.2,\n                                   shear_range = 0.2,\n                                   zoom_range = 0.2,\n                                   horizontal_flip = True,\n                                   fill_mode = 'nearest'\n                                  )\ntrain_generator = train_datagen.flow_from_directory(\n    '.\/training_set',\n    target_size = (150,150),\n    batch_size = 8,\n    class_mode = 'binary'\n)\nval_datagen = ImageDataGenerator(rescale=1.\/255)\nval_generator = val_datagen.flow_from_directory(\n    '.\/val_set\/',\n    target_size = (150,150),\n    batch_size = 8,\n    class_mode = 'binary'\n)","707e85c3":"history = model.fit_generator(train_generator, epochs=100, validation_data=val_generator)","5502fb07":"import matplotlib.pyplot as plt \nacc = history.history['binary_accuracy']\nval_acc = history.history['val_binary_accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\nepochs_range = range(len(acc))\n\nplt.figure(figsize=(15, 15))\nplt.subplot(2, 2, 1)\nplt.plot(epochs_range, acc, label='Training Accuracy')\nplt.plot(epochs_range, val_acc, label='Validation Accuracy')\nplt.legend(loc='lower right')\nplt.title('Training and Validation Accuracy')\n\nplt.subplot(2, 2, 2)\nplt.plot(epochs_range, loss, label='Training Loss')\nplt.plot(epochs_range, val_loss, label='Validation Loss')\nplt.legend(loc='upper right')\nplt.title('Training and Validation Loss')\nplt.show()","9cc57202":"Now we have two main directories containing the dataset, a directory for the training set and another one for the test set. Both directories are in the working directory \".\/\". Let's see how big is the dataset.","64828b4c":"**As shown above, the data is stored in two zip files named test1.zip and train.zip. So in order to deal with the data, we first have to extract these files.**","c62fb4e6":"Now that we have 25,000 training examples, we will split them into training set and validation set. We will not deal with the 12500 testing examoles now.","d78e5287":"* In this notebook we are trying to build a model that has the ability to classify cats and dogs. \n* The input data we will use is from a dataset provided by kaggle.\n* This dataset consists of 25,000 images of cats and dogs.\n* The dataset we will use is saved for us in '\/kaggle\/input\/dogs-vs-cats'.\n* The following command is to show us the format of the data.","093b93b1":"Now, we are ready to train our Model. Except first we need to introduce our labeled data to our model. For this we will use the ImageDataGenerator.","50b48f62":"Now let's define our model.","9eab62bc":"Now we want to split the data into training and validation","1d28d308":"Now we are ready to train our Model"}}