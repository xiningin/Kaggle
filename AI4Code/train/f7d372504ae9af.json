{"cell_type":{"95405515":"code","c99f3cb3":"code","9f518da4":"code","2ed3497f":"code","aa31fb4c":"code","6cff7a2e":"code","96906c1f":"code","4ad17811":"code","83072799":"code","66b6ff08":"code","d14a8500":"code","fa6cbb30":"code","fa75cdcc":"code","1cb26971":"code","15b252d9":"code","63c0b9ab":"code","af20a003":"code","32cb05b4":"code","2245c059":"code","21dade1d":"code","53700d29":"code","73601e0a":"code","741a532d":"code","6111ebfb":"code","24ab1753":"code","78794e26":"code","705ebb26":"code","1c516c2f":"code","f4bda8f0":"code","f3e422e4":"code","ac8e7d91":"code","1ae34d3c":"code","0c5d1d2b":"code","e869ffa8":"code","6fdcbd60":"code","fdbe1211":"code","d48b166e":"code","b3c22f91":"code","0521c239":"code","d9cb66fc":"code","555bdaf7":"code","8ec36b87":"code","624d298d":"code","c06c5c70":"code","3df9ca5d":"code","bc696ab0":"code","8d936b88":"code","e3db126a":"code","ba4ae5c5":"code","1722d601":"code","77baed8b":"code","624e791c":"code","0a39213f":"code","07742bc3":"code","5f7d253d":"code","94f3715f":"code","ea32c05e":"code","acd0fbb1":"code","26856471":"code","96d9e2b4":"code","ed21be0d":"code","1c03e8a3":"code","f0518888":"code","49a17451":"code","443d865c":"code","c20f3c71":"code","100e7c5a":"code","dc3bd3b4":"code","4759d204":"code","7cf509ca":"code","b687dc8b":"code","bc2cb379":"code","01eee2ce":"code","ce5779d5":"code","1603814b":"markdown","f8fc11d9":"markdown","7b1fec7f":"markdown","dfa140e2":"markdown","a4fad802":"markdown","2bdae04a":"markdown","92299a71":"markdown","af5be5a4":"markdown","4f68551a":"markdown","95dddaa2":"markdown","2fd6b7e7":"markdown","ff594d40":"markdown","e70233c9":"markdown","ddd8b839":"markdown","faec7e92":"markdown","05a0ccf3":"markdown","f998662a":"markdown","a30914e4":"markdown","94e7613d":"markdown","b6379ace":"markdown","a6a50ee9":"markdown","bb291681":"markdown","3d33111b":"markdown","f227346c":"markdown","7f360a17":"markdown","6b0c3882":"markdown","d12cc024":"markdown","090f6899":"markdown","50bf791d":"markdown","4b81ce9a":"markdown","c6d7fb1d":"markdown","7b527248":"markdown","93490567":"markdown","e2a4d37d":"markdown","9314eb1b":"markdown","e07ac612":"markdown","808539f8":"markdown","75c65782":"markdown","38862169":"markdown","e3720847":"markdown","b4d8f54a":"markdown","b4e5d6cd":"markdown","1c8ed69a":"markdown","a4a03409":"markdown","e81fe1df":"markdown","4c52a2e4":"markdown","0555a712":"markdown","a585594f":"markdown","a5884bb0":"markdown","552ef043":"markdown","dcd5da43":"markdown","4840c073":"markdown","22405a8c":"markdown","3bd2c560":"markdown","aa69bdfd":"markdown","561b00d8":"markdown","9c8de6a6":"markdown","dcaa9d04":"markdown","5dc8fd3c":"markdown","2001db11":"markdown","4c681eec":"markdown","e1318073":"markdown","f94c13ee":"markdown"},"source":{"95405515":"# Some basic libs\n!python3.7 -m pip install --upgrade pip\n!pip install chart_studio\nimport numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\n\n# Plotly to create interactive graph\nimport chart_studio.plotly as py\nfrom plotly import tools\nfrom plotly.offline import init_notebook_mode,iplot\ninit_notebook_mode(connected=False)\nimport plotly.figure_factory as ff\nimport plotly.graph_objs as go\n\n%matplotlib inline\nsns.set_style(\"whitegrid\")\nplt.style.use(\"fivethirtyeight\")\n\n# To remove un-necessary warnings\nimport warnings\nwarnings.filterwarnings(\"ignore\")","c99f3cb3":"deliveries = pd.read_csv('\/kaggle\/input\/ipl-complete-dataset-20082020\/IPL Ball-by-Ball 2008-2020.csv')\nmatches = pd.read_csv('\/kaggle\/input\/ipl-complete-dataset-20082020\/IPL Matches 2008-2020.csv')","9f518da4":"x=['Sunrisers Hyderabad', 'Mumbai Indians', 'Gujarat Lions',\n    'Rising Pune Supergiant', 'Royal Challengers Bangalore',\n    'Kolkata Knight Riders', 'Delhi Daredevils', 'Kings XI Punjab',\n    'Chennai Super Kings', 'Rajasthan Royals', 'Deccan Chargers',\n    'Kochi Tuskers Kerala', 'Pune Warriors', 'Rising Pune Supergiants', 'Delhi Capitals']\n\ny = ['SRH','MI','GL','RPS','RCB','KKR','DC','KXIP','CSK','RR','SRH','KTK','PW','RPS','DC']\n\nmatches.replace(x,y,inplace = True)\ndeliveries.replace(x,y,inplace = True)","2ed3497f":"matches['season'] = matches['date'].str[:4].astype(int)","aa31fb4c":"data = [go.Histogram(x=matches['season'], marker=dict(color='#EB89B5', line=dict(color='#000000', width=1)), opacity=0.75)]\nlayout = go.Layout(title='Matches In Every Season ',xaxis=dict(title='Season',tickmode='linear'),\n                    yaxis=dict(title='Count'),bargap=0.2, plot_bgcolor='rgb(245,245,245)')\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","6cff7a2e":"matches_played=pd.concat([matches['team1'],matches['team2']])\nmatches_played=matches_played.value_counts().reset_index()\nmatches_played.columns=['Team','Total Matches']\nmatches_played['wins']=matches['winner'].value_counts().reset_index()['winner']\n\nmatches_played.set_index('Team',inplace=True)\ntotm = matches_played.reset_index().head(8)","96906c1f":"trace = go.Table(\n    header=dict(values=[\"Team\",\"Total Matches\",\"Wins\"],\n                fill = dict(color='#ff96ea'),\n                font = dict(color=['rgb(45, 45, 45)'] * 5, size=14),\n                align = ['center'],\n               height = 30),\n    cells=dict(values=[totm['Team'], totm['Total Matches'], totm['wins']],\n               fill = dict(color=['rgb(235, 193, 238)', 'rgba(228, 222, 249, 0.65)']),\n               align = ['center'], font_size=13, height=25))\n\nlayout = dict(\n    width=750,\n    height=420,\n    autosize=False,\n    title='Total Matches vs Wins per team',\n    margin = dict(t=100),\n    showlegend=False,    \n)\n\nfig1 = dict(data=[trace], layout=layout)\niplot(fig1)","4ad17811":"trace1 = go.Bar(x=matches_played.index,y=matches_played['Total Matches'],\n                name='Total Matches',opacity=0.4)\n\ntrace2 = go.Bar(x=matches_played.index,y=matches_played['wins'],\n                name='Matches Won',marker=dict(color='red'),opacity=0.4)\n\ntrace3 = go.Bar(x=matches_played.index,\n               y=(round(matches_played['wins']\/matches_played['Total Matches'],3)*100),\n               name='Win Percentage',opacity=0.6,marker=dict(color='gold'))\n\ndata = [trace1, trace2, trace3]\n\nlayout = go.Layout(title='Match Played, Wins And Win Percentage',xaxis=dict(title='Team'),\n                   yaxis=dict(title='Count'),bargap=0.2,bargroupgap=0.1, plot_bgcolor='rgb(245,245,245)')\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","83072799":"win_percentage = round(matches_played['wins']\/matches_played['Total Matches'],3)*100\nwin_percentage.head(3)","66b6ff08":"venue_matches=matches.groupby('venue').count()[['id']].sort_values(by='id',ascending=False).head()\nser = pd.Series(venue_matches['id']) \nser","d14a8500":"venue_matches=matches.groupby('venue').count()[['id']].reset_index()\n\ndata = [{\"y\": venue_matches['id'],\"x\": venue_matches['venue'], \n          \"marker\": {\"color\": \"lightblue\", \"size\": 12},\n         \"line\": {\"color\": \"red\",\"width\" : 2,\"dash\" : 'dash'},\n          \"mode\": \"markers+lines\", \"name\": \"Women\", \"type\": \"scatter\"}]\n\nlayout = {\"title\": \"Stadiums Vs. Matches\", \n          \"xaxis\": {\"title\": \"Matches Played\", }, \n          \"yaxis\": {\"title\": \"Stadiums\"},\n          \"autosize\":False,\"width\":900,\"height\":700,\"plot_bgcolor\":\"rgb(245,245,245)\"}\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","fa6cbb30":"ump=pd.concat([matches['umpire1'],matches['umpire2']])\nump=ump.value_counts()\numps=ump.to_frame().reset_index()","fa75cdcc":"ump.head()","1cb26971":"data = [go.Bar(x=umps['index'],y=umps[0],opacity=0.4)]\n\nlayout = go.Layout(title='Umpires in Matches',\n                   yaxis=dict(title='Matches'),bargap=0.2, plot_bgcolor='rgb(245,245,245)')\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","15b252d9":"data = [go.Bar(\n    x = matches[\"toss_decision\"].value_counts().index,\n    y = matches[\"toss_decision\"].value_counts().values,\n    marker = dict(line=dict(color='#000000', width=1))\n)]\n\nlayout = go.Layout(\n   {\n      \"title\":\"Most Likely Decision After Winning Toss\",\n       \"xaxis\":dict(title='Decision'),\n       \"yaxis\":dict(title='Number of Matches'),\n       \"plot_bgcolor\":'rgb(245,245,245)'\n   }\n)\nfig = go.Figure(data=data,layout = layout)\niplot(fig)","63c0b9ab":"batsmen = matches[['id','season']].merge(deliveries, left_on = 'id', right_on = 'id', how = 'left').drop('id', axis = 1)\nseason=batsmen.groupby(['season'])['total_runs'].sum().reset_index()\n\navgruns_each_season=matches.groupby(['season']).count().id.reset_index()\navgruns_each_season.rename(columns={'id':'matches'},inplace=1)\navgruns_each_season['total_runs']=season['total_runs']\navgruns_each_season['average_runs_per_match']=avgruns_each_season['total_runs']\/avgruns_each_season['matches']","af20a003":"fig = {\"data\" : [{\"x\" : season[\"season\"],\"y\" : season[\"total_runs\"],\n                  \"name\" : \"Total Run\",\"marker\" : {\"color\" : \"lightblue\",\"size\": 12},\n                  \"line\": {\"width\" : 3},\"type\" : \"scatter\",\"mode\" : \"lines+markers\" },\n        \n                 {\"x\" : season[\"season\"],\"y\" : avgruns_each_season[\"average_runs_per_match\"],\n                  \"name\" : \"Average Run\",\"marker\" : {\"color\" : \"brown\",\"size\": 12},\n                  \"type\" : \"scatter\",\"line\": {\"width\" : 3},\"mode\" : \"lines+markers\",\n                  \"xaxis\" : \"x2\",\"yaxis\" : \"y2\",}],\n       \n        \"layout\" : {\"title\": \"Total and Average run per Season\",\n                    \"xaxis2\" : {\"domain\" : [0, 1],\"anchor\" : \"y2\",\n                    \"showticklabels\" : False},\"margin\" : {\"b\" : 111},\n                    \"yaxis2\" : {\"domain\" : [.55, 1],\"anchor\" : \"x2\",\"title\": \"Average Run\"},                    \n                    \"xaxis\" : {\"domain\" : [0, 1],\"tickmode\":'linear',\"title\": \"Year\"},\n                    \"yaxis\" : {\"domain\" :[0, .45], \"title\": \"Total Run\"}}}\n\niplot(fig)","32cb05b4":"avgr = avgruns_each_season.sort_values(by='total_runs', ascending=False).head(2)\n\ntrace = go.Table(\n    header=dict(values=[\"Season\",\"Matches\",\"Total Runs\", \"Average Runs per Match\"],\n                fill = dict(color = '#119DFF'),\n                font = dict(color = 'white', size = 14),\n                align = ['center'],\n               height = 30),\n    cells=dict(values=[avgr['season'], avgr['matches'], avgr['total_runs'], round(avgr['average_runs_per_match'],2)],\n               fill = dict(color = ['#25FEFD', 'rgba(228, 222, 249, 0.65)']),\n               align = ['center'], font_size=13, height=25))\n\nlayout = dict(\n    width=930,\n    height= 270,\n    autosize=False,\n    title='Seasons with Highest Runs',\n    margin = dict(t=100),\n    showlegend=False,    \n)\n\nfig1 = dict(data=[trace], layout=layout)\niplot(fig1)","2245c059":"Season_boundaries=batsmen.groupby(\"season\")[\"batsman_runs\"].agg(lambda x: (x==6).sum()).reset_index()\nfours=batsmen.groupby(\"season\")[\"batsman_runs\"].agg(lambda x: (x==4).sum()).reset_index()\nSeason_boundaries=Season_boundaries.merge(fours,left_on='season',right_on='season',how='left')\nSeason_boundaries=Season_boundaries.rename(columns={'batsman_runs_x':'6\"s','batsman_runs_y':'4\"s'})","21dade1d":"Season_boundaries['6\"s'] = Season_boundaries['6\"s']*6\nSeason_boundaries['4\"s'] = Season_boundaries['4\"s']*4\nSeason_boundaries['total_runs'] = season['total_runs']","53700d29":"trace1 = go.Bar(\n    x=Season_boundaries['season'],\n    y=Season_boundaries['total_runs']-(Season_boundaries['6\"s']+Season_boundaries['4\"s']),\n    marker = dict(line=dict(color='#000000', width=1)),\n    name='Remaining runs',opacity=0.6)\n\ntrace2 = go.Bar(\n    x=Season_boundaries['season'],\n    y=Season_boundaries['4\"s'],\n    marker = dict(line=dict(color='#000000', width=1)),\n    name='Run by 4\"s',opacity=0.7)\n\ntrace3 = go.Bar(\n    x=Season_boundaries['season'],\n    y=Season_boundaries['6\"s'],\n    marker = dict(line=dict(color='#000000', width=1)),\n    name='Run by 6\"s',opacity=0.7)\n\n\ndata = [trace1, trace2, trace3]\nlayout = go.Layout(title=\"Run Distribution per year\",barmode='stack',xaxis = dict(tickmode='linear',title=\"Year\"),\n                                    yaxis = dict(title= \"Run Distribution\"), plot_bgcolor='rgb(245,245,245)')\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","73601e0a":"high_scores=deliveries.groupby(['id', 'inning','batting_team','bowling_team'])['total_runs'].sum().reset_index() \nhigh_scores=high_scores[high_scores['total_runs']>=200]\nhss = high_scores.nlargest(10,'total_runs')","741a532d":"trace = go.Table(\n    header=dict(values=[\"Inning\",\"Batting Team\",\"Bowling Team\", \"Total Runs\"],\n                fill = dict(color = 'red'),\n                font = dict(color = 'white', size = 14),\n                align = ['center'],\n               height = 30),\n    cells=dict(values=[hss['inning'], hss['batting_team'], hss['bowling_team'], hss['total_runs']],\n               fill = dict(color = ['lightsalmon', 'rgb(245, 245, 249)']),\n               align = ['center'], font_size=13))\n\nlayout = dict(\n    width=830,\n    height=410,\n    autosize=False,\n    title='Highest scores of IPL',\n    showlegend=False,    \n)\n\nfig1 = dict(data=[trace], layout=layout)\niplot(fig1)","6111ebfb":"high_scores=high_scores[high_scores.batting_team != 'GL']\nhigh_scores=high_scores[high_scores.bowling_team != 'RPS']\nhigh_scores=high_scores[high_scores.bowling_team != 'GL']\nhigh_scores=high_scores[high_scores.bowling_team != 'PW']","24ab1753":"high_scores=high_scores.groupby(['inning','batting_team']).count().reset_index()\nhigh_scores.drop([\"bowling_team\",\"total_runs\"],axis=1,inplace=True)\nhigh_scores.rename(columns={\"id\":\"total_times\"},inplace=True)\n\nhigh_scores_1 = high_scores[high_scores['inning']==1]\nhigh_scores_2 = high_scores[high_scores['inning']==2]\n\ntot = high_scores_1.sort_values(by = 'total_times',ascending=False).head(2)","78794e26":"trace = go.Table(\n    header=dict(values=[\"Inning\",\"Batting Team\",\"Total Times\"],\n                fill = dict(color = '#119DFF'),\n                font = dict(color = 'white', size = 14),\n                align = ['center'],\n               height = 30),\n    cells=dict(values=[tot['inning'], tot['batting_team'], tot['total_times']],\n               fill = dict(color = ['#25FEFD', 'rgb(245, 245, 249)']),\n               align = ['center'], font_size=13, height=25))\n\nlayout = dict(\n    width=830,\n    height= 270,\n    autosize=False,\n    title='Batsman with highest points by centuries and half centuries',\n    margin = dict(t=100),\n    showlegend=False,    \n)\n\nfig1 = dict(data=[trace], layout=layout)\niplot(fig1)","705ebb26":"trace1 = go.Bar(x=high_scores_1['batting_team'],y=high_scores_1['total_times'],name='Ist Innings',  marker = dict(line=dict(color='#000000', width=1.5)))\ntrace2 = go.Bar(x=high_scores_2['batting_team'],y=high_scores_2['total_times'],name='IInd Innings', marker = dict(line=dict(color='#000000', width=1.5)))\n\nfig = tools.make_subplots(rows=1, cols=2, subplot_titles=('At Ist Innings','At IInd Innings'))\n\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 1, 2)\n\niplot(fig)","1c516c2f":"high_scores=deliveries.groupby(['id', 'inning','batting_team','bowling_team'])['total_runs'].sum().reset_index()\nhigh_scores1=high_scores[high_scores['inning']==1]\nhigh_scores2=high_scores[high_scores['inning']==2]\nhigh_scores1=high_scores1.merge(high_scores2[['id','inning', 'total_runs']], on='id')\nhigh_scores1.rename(columns={'inning_x':'inning_1','inning_y':'inning_2','total_runs_x':'inning1_runs','total_runs_y':'inning2_runs'},inplace=True)\nhigh_scores1=high_scores1[high_scores1['inning1_runs']>=200]\nhigh_scores1['is_score_chased']=1\nhigh_scores1['is_score_chased'] = np.where(high_scores1['inning1_runs']<=high_scores1['inning2_runs'], 'yes', 'no')","f4bda8f0":"slices=high_scores1['is_score_chased'].value_counts().reset_index().is_score_chased\nlist(slices)\nlabels=['No','Yes']\nslices","f3e422e4":"trace0 = go.Pie(labels=labels, values=slices,\n              hoverinfo='label+value',  marker = dict(line=dict(color='#000000', width=2)))\n\nlayout=go.Layout(title='200 score chased ?')\nfig = go.Figure(data=[trace0], layout=layout)\niplot(fig)","ac8e7d91":"agg = matches[['id','season', 'winner', 'toss_winner', 'toss_decision', 'team1']].merge(deliveries, left_on = 'id', right_on = 'id', how = 'left')\nbatsman_grp = agg.groupby([\"season\",\"id\", \"inning\", \"batting_team\", \"batsman\"])\nbatsmen = batsman_grp[\"batsman_runs\"].sum().reset_index()\nruns_scored = batsmen.groupby(['season','batting_team', 'batsman'])['batsman_runs'].agg(['sum','mean']).reset_index()\nruns_scored['mean']=round(runs_scored['mean'])","1ae34d3c":"agg_battingteam = agg.groupby(['season','id', 'inning', 'batting_team', 'bowling_team','winner'])['total_runs'].sum().reset_index()\nwinner = agg_battingteam[agg_battingteam['batting_team'] == agg_battingteam['winner']]#agg_batting = agg_battingteam.groupby(['season', 'inning', 'team1','winner'])['total_runs'].sum().reset_index()\nwinner_batting_first = winner[winner['inning'] == 1]\nwinner_batting_second = winner[winner['inning'] == 2]\n\nwinner_runs_batting_first = winner_batting_first.groupby(['season', 'winner'])['total_runs'].mean().reset_index().round()\nwinner_runs_batting_second = winner_batting_second.groupby(['season', 'winner'])['total_runs'].mean().reset_index().round()\n\nwinner_runs = winner_runs_batting_first.merge(winner_runs_batting_second, on = ['season','winner'])\nwinner_runs.columns = ['season', 'winner', 'batting_first', 'batting_second']","0c5d1d2b":"total_win=matches.groupby(['season','winner']).count()[['id']].reset_index()\nwinner_runs[\"wins\"]= total_win['id']","e869ffa8":"winner_runs.sort_values(by = ['season'],inplace=True)\n\ncsk= winner_runs[winner_runs['winner'] == 'CSK']\nrr= winner_runs[winner_runs['winner'] == 'RR']\nsrh= winner_runs[winner_runs['winner'] == 'SRH']\nkkr= winner_runs[winner_runs['winner'] == 'KKR']\nmi= winner_runs[winner_runs['winner'] == 'MI']\nrcb= winner_runs[winner_runs['winner'] == 'RCB']\nkxip= winner_runs[winner_runs['winner'] == 'KXIP']\ndd= winner_runs[winner_runs['winner'] == 'DC']","6fdcbd60":"trace1 = go.Scatter(x=csk['season'],y = csk['batting_first'],name='Batting First')\ntrace2 = go.Scatter(x=csk['season'],y = csk['batting_second'],name='Batting Second')\ntrace3 = go.Scatter(x=rr['season'],y = rr['batting_first'],name='Batting First')\ntrace4 = go.Scatter(x=rr['season'],y = rr['batting_second'],name='Batting Second')\ntrace5 = go.Scatter(x=srh['season'],y = srh['batting_first'],name='Batting First')\ntrace6 = go.Scatter(x=srh['season'],y = srh['batting_second'],name='Batting Second')\ntrace7 = go.Scatter(x=kkr['season'],y = kkr['batting_first'],name='Batting First')\ntrace8 = go.Scatter(x=kkr['season'],y = kkr['batting_second'],name='Batting Second')\ntrace9 = go.Scatter(x=rcb['season'],y = rcb['batting_first'],name='Batting First')\ntrace10 = go.Scatter(x=rcb['season'],y = rcb['batting_second'],name='Batting Second')\ntrace11 = go.Scatter(x=kxip['season'],y = kxip['batting_first'],name='Batting First')\ntrace12 = go.Scatter(x=kxip['season'],y = kxip['batting_second'],name='Batting Second')\ntrace13 = go.Scatter(x=mi['season'],y = mi['batting_first'],name='Batting First')\ntrace14 = go.Scatter(x=mi['season'],y = mi['batting_second'],name='Batting Second')\ntrace15 = go.Scatter(x=dd['season'],y = dd['batting_first'],name='Batting First')\ntrace16 = go.Scatter(x=dd['season'],y = dd['batting_second'],name='Batting Second')\n\nfig = tools.make_subplots(rows=4, cols=2, subplot_titles=('CSK', 'RR','SRH', 'KKR','RCB', 'KXIP','MI', 'DC'))\n\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 1, 1)\nfig.append_trace(trace3, 1, 2)\nfig.append_trace(trace4, 1, 2)\nfig.append_trace(trace5, 2, 1)\nfig.append_trace(trace6, 2, 1)\nfig.append_trace(trace7, 2, 2)\nfig.append_trace(trace8, 2, 2)\nfig.append_trace(trace9, 3, 1)\nfig.append_trace(trace10, 3, 1)\nfig.append_trace(trace11, 3, 2)\nfig.append_trace(trace12, 3, 2)\nfig.append_trace(trace13, 4, 1)\nfig.append_trace(trace14, 4, 1)\nfig.append_trace(trace15, 4, 2)\nfig.append_trace(trace16, 4, 2)\n\nfig['layout'].update(title='Batting first vs Batting Second of Teams',showlegend=False, plot_bgcolor='rgb(245,245,245)')\niplot(fig)","fdbe1211":"runs_per_over = deliveries.pivot_table(index=['over'],columns='batting_team',values='total_runs',aggfunc=sum)\nruns_per_over.reset_index(inplace=True)\nruns_per_over.drop(['KTK','PW','RPS','GL'],axis=1,inplace=True)","d48b166e":"trace1 = go.Scatter(x=runs_per_over['over'],y = runs_per_over['CSK'],name='CSK',marker= dict(color= \"blue\",size=12))\ntrace2 = go.Scatter(x=runs_per_over['over'],y = runs_per_over['DC'],name='DC')\ntrace3 = go.Scatter(x=runs_per_over['over'],y = runs_per_over['KKR'],name='KKR')\ntrace4 = go.Scatter(x=runs_per_over['over'],y = runs_per_over['KXIP'],name='KXIP')\ntrace5 = go.Scatter(x=runs_per_over['over'],y = runs_per_over['MI'],name='MI')\ntrace6 = go.Scatter(x=runs_per_over['over'],y = runs_per_over['RCB'],name='RCB')\ntrace7 = go.Scatter(x=runs_per_over['over'],y = runs_per_over['RR'],name='RR')\ntrace8 = go.Scatter(x=runs_per_over['over'],y = runs_per_over['SRH'],name='SRH')\n\ndata = [trace1,trace2,trace3,trace4,trace5,trace6,trace7,trace8]\n\nlayout = go.Layout(title='Average Run in Each Over',xaxis = dict(tickmode='linear',title=\"Over\"),\n                                    yaxis = dict(title= \"Runs\"), plot_bgcolor='rgb(245,245,245)')\n\nfig = go.Figure(data=data,layout=layout)\n\niplot(fig)","b3c22f91":"season=matches[['id','season','winner']]\ncomplete_data=deliveries.merge(season,how='inner',left_on='id',right_on='id')","0521c239":"powerplay_data=complete_data[complete_data['over']<=6]\n\ninn1 = powerplay_data[ powerplay_data['inning']==1].groupby('id')['total_runs'].agg(['sum']).reset_index()\ninn2 = powerplay_data[ powerplay_data['inning']==2].groupby('id')['total_runs'].agg(['sum']).reset_index()","d9cb66fc":"inn1.reset_index(inplace=True)\ninn1.drop([\"id\"],axis=1,inplace=True)\n\ninn2.reset_index(inplace=True)\ninn2.drop([\"id\"],axis=1,inplace=True)","555bdaf7":"fig = {\"data\" : [{\"x\" : inn1[\"index\"],\"y\" : inn1[\"sum\"],\"marker\" : {\"color\" : \"blue\",\"size\": 2},\n                  \"line\": {\"width\" : 1.5},\"type\" : \"scatter\",\"mode\" : \"lines\" },\n        \n                 {\"x\" : inn2[\"index\"],\"y\" : inn2[\"sum\"],\"marker\" : {\"color\" : \"brown\",\"size\": 2},\n                  \"type\" : \"scatter\",\"line\": {\"width\" : 1.5},\"mode\" : \"lines\",\n                  \"xaxis\" : \"x2\",\"yaxis\" : \"y2\",}],\n       \n        \"layout\" : {\"title\": \"Inning 1 vs Inning 2 in Powerplay Overs\",\n                    \"xaxis2\" : {\"domain\" : [0, 1],\"anchor\" : \"y2\",\n                    \"showticklabels\" : False},\n                    \"yaxis2\" : {\"domain\" : [.55, 1],\"anchor\" : \"x2\",\"title\": \"Inn2 Powerplay\"},\n                    \"margin\" : {\"b\" : 111},\n                    \"xaxis\" : {\"domain\" : [0, 1],\"title\": \"Matches\"},\n                    \"yaxis\" : {\"domain\" :[0, .45], \"title\": \"Inn1 Poweplay\"}}}\n\niplot(fig)","8ec36b87":"pi1=powerplay_data[ powerplay_data['inning']==1].groupby(['season','id'])['total_runs'].agg(['sum'])\npi1=pi1.reset_index().groupby('season')['sum'].mean()\npi1=pi1.to_frame().reset_index()\n\npi2=powerplay_data[ powerplay_data['inning']==2].groupby(['season','id'])['total_runs'].agg(['sum'])\npi2=pi2.reset_index().groupby('season')['sum'].mean()\npi2=pi2.to_frame().reset_index()","624d298d":"trace1 = go.Bar(x=pi1.season,y=pi1[\"sum\"],\n                marker=dict(line=dict(color='#000000', width=1.5)), name='Inning 1',opacity=0.4)\n\ntrace2 = go.Bar(x=pi2.season,y=pi2[\"sum\"],name='Inning 2',\n                marker=dict(color='red', line=dict(color='#000000', width=1.5)),opacity=0.4)\n\ndata = [trace1, trace2]\nlayout = go.Layout(title='Powerplay Average runs per Year',\n                   xaxis=dict(title='Year',tickmode='linear'),\n                   yaxis=dict(title='Run'),bargap=0.2,bargroupgap=0.1, plot_bgcolor='rgb(245,245,245)')\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","c06c5c70":"powerplay_dismissals=powerplay_data.dropna(subset=['dismissal_kind']).groupby(['season','id','inning'])['dismissal_kind'].agg(['count']).reset_index().groupby('season')['count'].max()\npowerplay_dismissals=powerplay_dismissals.reset_index()\n\npowerplay_dismissals_first=powerplay_data[ powerplay_data['inning']==1].dropna(subset=['dismissal_kind']).groupby(['season','id','inning'])['dismissal_kind'].agg(['count']).reset_index().groupby('season')['count'].mean()\npowerplay_dismissals_first=powerplay_dismissals_first.reset_index()\n\npowerplay_dismissals_second=powerplay_data[ powerplay_data['inning']==2].dropna(subset=['dismissal_kind']).groupby(['season','id','inning'])['dismissal_kind'].agg(['count']).reset_index().groupby('season')['count'].mean()\npowerplay_dismissals_second=powerplay_dismissals_second.reset_index()","3df9ca5d":"trace1 = go.Bar(x=powerplay_dismissals.season,y=powerplay_dismissals[\"count\"],\n                name='Max',opacity=0.4)\n\ntrace2 = go.Bar(x=powerplay_dismissals_first.season,y=powerplay_dismissals_first[\"count\"],name='Inning 1',\n                marker=dict(color='red'),opacity=0.4)\n\ntrace3 = go.Bar(x=powerplay_dismissals_second.season,y=powerplay_dismissals_second[\"count\"],name='Inning 2',\n                marker=dict(color='lime'),opacity=0.4)\n\ndata = [trace1, trace2, trace3]\nlayout = go.Layout(title='Powerplay Average Dismissals per Year',\n                   xaxis=dict(title='Year',tickmode='linear'),\n                   yaxis=dict(title='Run'),bargap=0.2,bargroupgap=0.1, plot_bgcolor='rgb(245,245,245)')\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","bc696ab0":"df_strike_rate = deliveries.groupby(['batsman']).agg({'ball':'count','batsman_runs':'mean'}).sort_values(by='batsman_runs',ascending=False)\ndf_strike_rate.rename(columns ={'batsman_runs' : 'strike rate'}, inplace=True)\ndf_runs_per_match = deliveries.groupby(['batsman','id']).agg({'batsman_runs':'sum'})\ndf_total_runs = df_runs_per_match.groupby(['batsman']).agg({'sum' ,'mean','count'})\ndf_total_runs.rename(columns ={'sum' : 'batsman run','count' : 'match count','mean' :'average score'}, inplace=True)\ndf_total_runs.columns = df_total_runs.columns.droplevel()\ndf_sixes = deliveries[['batsman','batsman_runs']][deliveries.batsman_runs==6].groupby(['batsman']).agg({'batsman_runs':'count'})\ndf_four = deliveries[['batsman','batsman_runs']][deliveries.batsman_runs==4].groupby(['batsman']).agg({'batsman_runs':'count'})\ndf_batsman_stat = pd.merge(pd.merge(pd.merge(df_strike_rate,df_total_runs, left_index=True, right_index=True),\n                                    df_sixes, left_index=True, right_index=True),df_four, left_index=True, right_index=True)","8d936b88":"df_batsman_stat.rename(columns = {'ball' : 'ball', 'strike rate':'strike_rate','batsman run' : 'batsman_run',\n                                  'match count' : 'match_count','average score' : 'average_score' ,'batsman_runs_x' :'six',\n                                  'batsman_runs_y':'four'},inplace=True)\ndf_batsman_stat['strike_rate'] = df_batsman_stat['strike_rate']*100\ndf_batsman_stat.sort_values(by='batsman_run',ascending=False,inplace=True)\n#df_batsman_stat.sort_values(by='batsman_run',ascending=False)\ndf_batsman_stat.reset_index(inplace=True)","e3db126a":"average_score=df_batsman_stat.sort_values(by='average_score',ascending=False)\naverage_score=average_score[average_score['match_count']>50].head(10)\n\nstrike_rate=df_batsman_stat.sort_values(by='strike_rate',ascending=False)\nstrike_rate=strike_rate[strike_rate['match_count']>50].head(10)","ba4ae5c5":"trace1 = go.Bar(x=average_score['batsman'],y=average_score['average_score'],\n                name='Average Score',marker=dict(color='gold', line=dict(color='#000000', width=1.5)),opacity=0.6,showlegend=False)\n\ntrace2 = go.Bar(x=strike_rate['batsman'],y=strike_rate['strike_rate'],\n                name='Strike Rate',marker=dict(color='brown', line=dict(color='#000000', width=1.5)),opacity=0.6,showlegend=False)\n\nfig = tools.make_subplots(rows=1, cols=2, subplot_titles=('Highest Average Score','Highest Strike Rate'))\n\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 1, 2)\n\nfig['layout']['xaxis1'].update(title='Player')\nfig['layout']['xaxis2'].update(title='Player')\n\niplot(fig)","1722d601":"top_df_batsman=df_batsman_stat.head(20)\ntop_df_batsman.head(5)","77baed8b":"data=[{\"y\": top_df_batsman.match_count,\n        \"x\": top_df_batsman.batsman,\n        \"mode\":\"markers\",\n        \"marker\":{\"color\":top_df_batsman.six,\"size\" :top_df_batsman.average_score,'showscale': True},\n        \"text\":top_df_batsman.batsman }]\n\niplot(data)","624e791c":"toppers=deliveries.groupby(['batsman','batsman_runs'])['total_runs'].count().reset_index()\ntoppers=toppers.pivot('batsman','batsman_runs','total_runs')\ntoppers.reset_index(inplace=True)","0a39213f":"top_6 = toppers.sort_values(6,ascending=False).head(10)\ntop_4 = toppers.sort_values(4,ascending=False).head(10)\ntop_2 = toppers.sort_values(2,ascending=False).head(10)\ntop_1 = toppers.sort_values(1,ascending=False).head(10)","07742bc3":"trace1 = go.Scatter(x=top_6.batsman,y =top_6[6],name='6\"s',marker =dict(color= \"blue\",size = 9),line=dict(width=2,dash='dash'))\ntrace2 = go.Scatter(x=top_4.batsman,y = top_4[4],name='4\"s',marker =dict(color= \"orange\",size = 9),line=dict(width=2,dash='longdash'))\ntrace3 = go.Scatter(x=top_2.batsman,y = top_2[2],name='2\"s',marker =dict(color= \"green\",size = 9),line=dict(width=2,dash='dashdot'))\ntrace4 = go.Scatter(x=top_1.batsman,y = top_1[1],name='1\"s',marker =dict(color= \"red\",size = 9),line=dict(width=2,dash='longdashdot'))\n\nfig = tools.make_subplots(rows=4, cols=1, subplot_titles=('Top 6\"s Scorer','Top 4\"s Scorer',\n                                                          'Top 2\"s Scorer','Top 1\"s Scorer'))\n\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 2, 1)\nfig.append_trace(trace3, 3, 1)\nfig.append_trace(trace4, 4, 1)\n\nfig['layout'].update(title='Top Scorer in each Category',showlegend=False, plot_bgcolor='rgb(245,245,245)')\niplot(fig)","5f7d253d":"orange=matches[['id','season']]\norange=orange.merge(deliveries,left_on='id',right_on='id',how='left')\norange=orange.groupby(['season','batsman'])['batsman_runs'].sum().reset_index()\norange=orange.sort_values('batsman_runs',ascending=0)\norange=orange.drop_duplicates(subset=[\"season\"],keep=\"first\")\n#orange.sort_values(by='season')","94f3715f":"data = [go.Bar(x=orange['season'].values,y=orange['batsman_runs'].values,\n                name='Total Matches',text=orange['batsman'].values,\n                marker=dict(color='rgb(255,140,0)',\n                            line=dict(color='rgb(8,48,107)',width=1.5,)),opacity=0.7)]\n\nlayout = go.Layout(title='Orange-Cap Holders',xaxis = dict(tickmode='linear',title=\"Year\"),\n                   yaxis=dict(title='Runs'), plot_bgcolor='rgb(245,245,245)')\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","ea32c05e":"bowlers=deliveries.groupby('bowler').sum().reset_index()\nbowl=deliveries['bowler'].value_counts().reset_index()\nbowlers=bowlers.merge(bowl,left_on='bowler',right_on='index',how='left')\nbowlers=bowlers[['bowler_x','total_runs','bowler_y']]\nbowlers.rename({'bowler_x':'bowler','total_runs':'runs_given','bowler_y':'balls'},axis=1,inplace=True)\nbowlers['overs']=(bowlers['balls']\/\/6)","acd0fbb1":"dismissal_kinds = [\"bowled\", \"caught\", \"lbw\", \"stumped\", \"caught and bowled\", \"hit wicket\"]  \nct=deliveries[deliveries[\"dismissal_kind\"].isin(dismissal_kinds)]\nct=ct['bowler'].value_counts().reset_index()\nbowlers=bowlers.merge(ct,left_on='bowler',right_on='index',how='left').dropna()\nbowlers=bowlers[['bowler_x','runs_given','overs','bowler_y']]\nbowlers.rename({'bowler_x':'bowler','bowler_y':'wickets'},axis=1,inplace=True)\nbowlers['economy']=(bowlers['runs_given']\/bowlers['overs'])","26856471":"bowlers_top=bowlers.sort_values(by='runs_given',ascending=False)\nbowlers_top=bowlers_top.head(20)","96d9e2b4":"trace = go.Scatter(y = bowlers_top['wickets'],x = bowlers_top['bowler'],mode='markers',\n                   marker=dict(size= bowlers_top['wickets'].values,\n                               color = bowlers_top['economy'].values,\n                               colorscale='Viridis',\n                               showscale=True,\n                               colorbar = dict(title = 'Economy')),\n                   text = bowlers['overs'].values)\n\ndata = [(trace)]\n\nlayout= go.Layout(autosize= True,\n                  title= 'Top 20 Wicket Taking Bowlers',\n                  hovermode= 'closest',\n                  xaxis=dict(showgrid=False,zeroline=False,\n                             showline=False),\n                  yaxis=dict(title= 'Wickets Taken',ticklen= 5,\n                             gridwidth= 2,showgrid=False,\n                             zeroline=False,showline=False),\n                  showlegend= False,plot_bgcolor='rgb(245,245,245)')\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","ed21be0d":"dismissal_kinds = [\"bowled\", \"caught\", \"lbw\", \"stumped\", \"caught and bowled\", \"hit wicket\"]  #since run-out is not creditted to the bowler\npurple=deliveries[deliveries[\"dismissal_kind\"].isin(dismissal_kinds)]\npurple=purple.merge(matches,left_on='id',right_on='id',how='outer')\npurple=purple.groupby(['season','bowler'])['dismissal_kind'].count().reset_index()\npurple=purple.sort_values('dismissal_kind',ascending=False)\npurple=purple.drop_duplicates('season',keep='first').sort_values(by='season')\npurple.rename({'dismissal_kind':'count_wickets'},axis=1,inplace=True)","1c03e8a3":"trace1 = go.Bar(x=purple['season'].values,y=purple['count_wickets'].values,\n                name='Total Matches',text=purple['bowler'].values,\n                marker=dict(color='rgb(75,0,130)',\n                            line=dict(color='#000000',width=1.5,)),\n                opacity=0.4)\n\nlayout = go.Layout(title='Purple-Cap Holders',xaxis = dict(tickmode='linear',title=\"Year\"),\n                   yaxis=dict(title='Wickets'), plot_bgcolor='rgb(245,245,245)')\n\ndata=[trace1]\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","f0518888":"bowling_wickets=deliveries[deliveries['dismissal_kind']!='run out']\nbowling_tot=bowling_wickets.groupby('bowler').apply(lambda x:x['dismissal_kind'].dropna()).reset_index(name='Wickets')\nbowling_wick_count=bowling_tot.groupby('bowler').count().reset_index()\nbowling_top=bowling_wick_count.sort_values(by='Wickets',ascending=False)\ntop_bowlers=bowling_top.loc[:,['bowler','Wickets']][0:10] ","49a17451":"trace1 = go.Scatter(\n    x = top_bowlers['bowler'].values,\n    y = top_bowlers['Wickets'].values,\n    mode = 'lines+markers',\n)\n\nlayout = go.Layout(title=\"Top 10 Bowlers in IPL- Seasons 2008-2019\",\n                   xaxis=dict(title=\"TOP 10 Bowlers\"),\n                   yaxis=dict(title=\"Wickets Taken\"),\n                  plot_bgcolor='rgb(245,245,245)')\n\n\ndata = [trace1]\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","443d865c":"match_bowling_tot=bowling_wickets.groupby(['id','bowler']).apply(lambda x:x['dismissal_kind'].dropna()).reset_index(name='Wickets')\nmatch_bowling_wick_count=match_bowling_tot.groupby(['id','bowler']).count().reset_index()\nmatch_bowling_top=match_bowling_wick_count.sort_values(by='Wickets',ascending=False)\nmatch_top_bowlers=match_bowling_top.loc[:,['id','bowler','Wickets']][0:10] \nmatch_bowling_runs=deliveries.groupby(['id','bowler']).apply(lambda x:np.sum(x['total_runs'])).reset_index(name='Runs Conceeded')\nmatch_bowler_performance=pd.merge(match_top_bowlers,match_bowling_runs,how='inner',left_on=['id','bowler'],right_on=['id','bowler'])\nmatch_bowler_performance['Runs per Wicket']=match_bowler_performance['Runs Conceeded']\/match_bowler_performance['Wickets']\nbowler_innings=pd.merge(match_bowler_performance, deliveries,how='inner',left_on=['id','bowler'],right_on=['id','bowler'])\nbowler_innings_req=bowler_innings.iloc[:,1:8]\nbowler_innings_req_2=bowler_innings_req.drop_duplicates()\nx=bowler_innings_req_2['bowler']\ny1=bowler_innings_req_2['Wickets']\ny2=bowler_innings_req_2['Runs per Wicket']","c20f3c71":"trace1 = go.Scatter(\n    x = x,\n    y = y1,\n    mode = 'markers',\n    name=\"Wickets\"\n)\n\ntrace2 = go.Scatter(\n    x = x,\n    y = y2,\n    mode = 'lines+markers',\n    name=\"Run Per Wicket\"\n)\n\nlayout = go.Layout(title=\"IPL Best bowling performances in a Match\",\n                   xaxis=dict(title=\"Top Bowlers\"),\n                   yaxis=dict(title=\"Runs per Wicket\/Wickets\"),\n                  plot_bgcolor='rgb(245,245,245)')\n\n\ndata = [trace1, trace2]\n\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","100e7c5a":"season_winner=matches.drop_duplicates(subset=['season'], keep='last')[['season','winner']].reset_index(drop=True)\nseason_winner = season_winner['winner'].value_counts()\n\nseason_winner = season_winner.to_frame()\nseason_winner.reset_index(inplace=True)\nseason_winner.rename(columns={'index':'team'},inplace=True)","dc3bd3b4":"trace = go.Table(\n    header=dict(values=[\"Team\",\"Winner\"],\n                fill = dict(color = 'grey'),\n                font = dict(color = 'white', size = 14),\n                align = ['center'],\n               height = 30),\n    cells=dict(values=[season_winner['team'],season_winner['winner']],\n               fill = dict(color = ['lightgrey', 'rgb(245, 245, 249)']),\n               align = ['center'], font_size=13, height=25))\n\nlayout = dict(\n    width=850,\n    height=350,\n    autosize=False,\n    title='Winner Teams',\n    showlegend=False    \n)\n\nfig1 = dict(data=[trace], layout=layout)\niplot(fig1)","4759d204":"trace0 = go.Pie(labels=season_winner['team'], values=season_winner['winner'],\n              hoverinfo='label+value+name',name=\"Winner\", marker=dict(line=dict(color='#000000', width=1.5)))\n\nlayout=go.Layout(title='Winner of IPL season')\nfig = go.Figure(data=[trace0], layout=layout)\niplot(fig)","7cf509ca":"finals=matches.drop_duplicates(subset=['season'],keep='last')\nfinals=finals[['id','season','city','team1','team2','toss_winner','toss_decision','winner']]\nmost_finals=pd.concat([finals['team1'],finals['team2']]).value_counts().reset_index()\nmost_finals.rename({'index':'team',0:'count'},axis=1,inplace=True)\nxyz=finals['winner'].value_counts().reset_index()","b687dc8b":"most_finals=most_finals.merge(xyz,left_on='team',right_on='index',how='outer')\nmost_finals=most_finals.replace(np.NaN,0)\nmost_finals.drop('index',axis=1,inplace=True)\nmost_finals.set_index('team',inplace=True)\nmost_finals.rename({'count':'finals_played','winner':'won_count'},inplace=True,axis=1)\nmost_finals.reset_index(inplace=True)","bc2cb379":"trace1 = go.Bar(x=most_finals.team,y=most_finals.finals_played,\n                name='Total Matches',marker=dict(line=dict(color='#000000', width=1.5)), opacity=0.4)\n\ntrace2 = go.Bar(x=most_finals.team,y=most_finals.won_count,\n                name='Matches Won',marker=dict(color='red', line=dict(color='#000000', width=1.5)),opacity=0.4)\n\ndata = [trace1, trace2]\n\nlayout = go.Layout(title='Match Played vs Wins In Finals',xaxis=dict(title='Team'),\n                   yaxis=dict(title='Count'),bargap=0.2,bargroupgap=0.1, plot_bgcolor='rgb(245,245,245)')\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","01eee2ce":"df=finals[finals['toss_winner']==finals['winner']]\nslices=[len(df),(len(finals)-len(df))]\nlabels=['yes','no']","ce5779d5":"trace0 = go.Pie(labels=labels, values=slices,\n              hoverinfo='label+value+name',name=\"Winner\",marker=dict(line=dict(color='#000000', width=2)))\n\nlayout=go.Layout(title='Winner of IPL season')\nfig = go.Figure(data=[trace0], layout=layout)\niplot(fig)","1603814b":"Voila !! Each 3 among 4 toss winners is match winner in Finals. That's Incredible","f8fc11d9":"<a id=\"ss14\"><\/a>\n### 9.3 Top 10 Batsman in each run category","7b1fec7f":"<a id=\"ss9\"><\/a>\n### 8.1 Runs in Powerplay of Each Match","dfa140e2":"<ul><li> DJ Brave owned Purple cap with highest 32 wickets in 2013","a4fad802":"\n  <div class=\"alert alert-block alert-info\" style=\"font-size:14px; font-family:verdana; line-height: 1.7em;\">\n    KXIP and CSK is at top in IInd innings while chasing target <br>\n    <br>\n            <ul>\n            <li>Every team able to create a better than in first innings than second<\/li>\n            <li>Exception - KXIP ( Showing anamolous behavior :p)<\/li>\n        <\/ul>\n<\/div>\n","2bdae04a":"\n  <div class=\"alert alert-block alert-info\" style=\"font-size:14px; font-family:verdana; line-height: 1.7em;\">\n            <ul>\n            <li>Powerplay is upto six overs so there is dip in 7th over<\/li>\n            <li>MI is best at Death over (Good Finishers\/Tailenders)<\/li>\n            <li>RR is worst among all in death, middle and powerplay overs<\/li>\n        <\/ul>\n<\/div>\n","92299a71":"<a id=\"ss4\"><\/a>\n### 3.4 Favorite Umpire","af5be5a4":"<p style=\"font-size:15px; font-family:verdana;\">Mumbai indians have most number of wins with most number of matches<p>","4f68551a":"Just slight increase in runs by boundaries over years","95dddaa2":"No doubt **Warner, Gayle and Pant** are best in terms of both strike rate and average run rate","2fd6b7e7":"<a id=\"ss10\"><\/a>\n### 8.2 Powerplay Average Runs ","ff594d40":"<a id=\"s7\"><\/a>\n## 7. Runs Per over of Each Team","e70233c9":"\n  <div class=\"alert alert-block alert-info\" style=\"font-size:14px; font-family:verdana; line-height: 1.7em;\">\n            <ul>\n            <li>We see crest at 2012,2013 years (this is beacuse increase in no. of matches)<\/li>\n            <li>Average runs per match increase over years<\/li>\n        <\/ul>\n<\/div>","ddd8b839":"<p style=\"font-size:15px; font-family:verdana;\">In December 2018, the team changed its name from the <span style=\"color:crimson;\">Delhi Daredevils<\/span> to the <span style=\"color:crimson;\">Delhi Capitals<\/span><br>\n    <span style=\"color:green;\">Sunrisers Hyderabad<\/span> replaced the <span style=\"color:green;\">Deccan Chargers<\/span> in 2012 and debuted in 2013 (But i consider them same in this kernel) .<p>\n","faec7e92":"<a id=\"s10\"><\/a>\n## 10. Bowlers Analysis","05a0ccf3":"**ooh! its hard to achieve this target only 16 out 100 target > 200 chased successfully**","f998662a":"\n  <div class=\"alert alert-block alert-info\" style=\"font-size:14px; font-family:verdana; line-height: 1.7em;\">\n            <ul>\n            <li>Maximum fall of wickets in powerplay overs set new recort in 2019<\/li>\n            <li>Dismissals in 2nd innings decrease significantly in 2019, 2020<\/li>\n        <\/ul>\n<\/div>","a30914e4":"<p style=\"font-size:15px; font-family:verdana;\">* Not surprisingly <span style=\"color:green;\">MI<\/span> is at top in winning matches<br>\n    * And sadly <span style=\"color:green;\">KXIP<\/span> is at last<p>","94e7613d":"<a id=\"ss11\"><\/a>\n### 8.3 Powerplay Average Dismissals","b6379ace":"<ul><li> Virat kohli owned Orange cap with highesr 973 runs in 2016","a6a50ee9":"### Lets analyze Win Ratio of teams","bb291681":"<a id=\"ss5\"><\/a>\n### 4.1 Average and Total Runs","3d33111b":"<a id=\"ss1\"><\/a>\n### 3.1 Matches in Every Season","f227346c":"<a id=\"ss7\"><\/a>\n### 5.1 How many times each Team scored > 200","7f360a17":"\n  <div class=\"alert alert-block alert-info\" style=\"font-size:14px; font-family:verdana; line-height: 1.7em;\">\n            <ul>\n            <li>Hightest wicket taker is Malinga<\/li>\n            <li>Piyush Chawla give highest runs among all<\/li>\n        <\/ul>\n<\/div>","6b0c3882":"![](https:\/\/etimg.etb2bimg.com\/photo\/74508790.cms)","d12cc024":"\n  <div class=\"alert alert-block alert-info\" style=\"font-size:14px; font-family:verdana; line-height: 1.7em;\">\n            <ul>\n            <li>Difference between 6\"s by Gayle(1st) and AB de Villiers(2nd) is of 113<\/li>\n            <li>Many caribbean players are in top list of 6\"s and 4\"s<\/li>\n        <\/ul>\n<\/div>","090f6899":"<a id=\"ss20\"><\/a>\n### 11.3 Is Toss Decision is Final Decision in Finals?","50bf791d":"<div class=\"alert alert-block alert-info\" style=\"font-size:14px; font-family:verdana; line-height: 1.7em;\">\n            <ul>\n            <li>The year 2013 has most number of matches.<\/li>\n            <li>May be due to <b>super over<\/b> (super over occurs when there is a tie in the score)<\/li>\n            <li>Moreover there are 10 teams in 2011, 9 in 2012 and 2013, that's another reason for increase in number of matches<\/li>\n        <\/ul>\n<\/div>","4b81ce9a":"<a id=\"ss6\"><\/a>\n### 4.2 Run Distribution Over Years","c6d7fb1d":"<a id=\"s1\"><\/a>\n## 1. Loading Libraries","7b527248":"<a id=\"s11\"><\/a>\n## 11. Winner Analysis","93490567":"## Contents:\n\n- [Necessary Libraries](#s1)\n- [Loading Dataset](#s2)\n- [Basic analysis](#s3)\n - [Matches in Every Season](#ss1)\n - [Matches Played vs Wins by Each Team](#ss2)\n - [Venue of Most Matches](#ss3)\n - [Favorite Umpire](#ss4)\n - [Toss Decision](#ss23)\n- [Runs per Season](#s4)\n - [Average and Total Runs](#ss5)\n - [Run Distribution Over Years](#ss6)\n- [Target of 200 Runs or More](#s5)\n - [How many times each Team scored > 200](#ss7)\n - [Is it possible to chase >200 Target](#ss8)\n- [Average Score of  Each Team Per Season ](#s6)\n- [Runs Per over of Each Team](#s7)\n- [Powerplay Analysis](#s8)\n - [Runs in Powerplay of Each Match](#ss9)\n - [Powerplay Average Runs](#ss10)\n - [Powerplay Average Dismissals](#ss11) \n- [Batsman Analysis](#s9)\n - [Highest Average and Strike rate for >50 Matches](#ss12)\n - [Top 10 Batsman Overall](#ss13)\n - [Top 10 Batsman in each run category](#ss14)\n - [Orange Cap Holders](#ss15)\n- [Bowler Analysis](#s10)\n - [Best Bowler in Each category](#ss16)\n - [Purple Cap Holders](#ss17)\n - [Top 10 Bowlers](#ss21)\n - [Top 10 Bowling Performance till 2020](#ss22)\n- [Winner Analysis](#s11)\n - [Which team win highest no. of seasons](#ss18)\n - [Match Played vs wins in Final Match](#ss19)\n - [Is Toss Decision is Final Decision in Finals?](#ss20)","e2a4d37d":"<blockquote><p style=\"font-size:16px; color:#159364; font-family:verdana;\">I will keep updating the notebook as and when I get a new question to be analysed.<br>\nThank You For Having A Look At This Notebook \ud83d\ude03<\/p><\/blockquote>\n\n### If this kernels impress you,give them an <font size=\"+2\" color=\"red\"><b>Upvote<\/b><\/font>.<br>","9314eb1b":"\n\n<ul><li> MI win 5 seasons of IPL\n    <li> DC, KXIP, RCB don't get any title yet","e07ac612":"<a id=\"ss13\"><\/a>\n### 9.2 Top 20 Batsman","808539f8":"<a id=\"ss16\"><\/a>\n### 10.1 Best Bowler in Each category","75c65782":"<a id=\"s9\"><\/a>\n## 9. Batsman Data","38862169":"<a id=\"ss8\"><\/a>\n### 5.2 Is it possible to chase >200 Target","e3720847":"<a id=\"ss12\"><\/a>\n### 9.1 Highest Average and Strike rate for >50 Matches","b4d8f54a":"<ul><li>CSK play 8 out of 12 finals of IPL\n    <li>MI win 4 out of 5 finals\n    <li>DC don't play any final yet","b4e5d6cd":"<a id=\"s2\"><\/a>\n## 2. Loading Dataset","1c8ed69a":"<a id=\"ss17\"><\/a>\n### 10.2 Purple Cap Holders","a4a03409":"<a id=\"ss3\"><\/a>\n### 3.3 Venue of Most Matches","e81fe1df":"<a id=\"s8\"><\/a>\n## 8. PowerPlay Analysis\nPowerplay is of starting 6 overs in t20 matches<br>\nDuring the first six overs, a maximum of two fielders can be outside the 30-yard circle.","4c52a2e4":"  <div class=\"alert alert-block alert-info\" style=\"font-size:14px; font-family:verdana; line-height: 1.7em;\">\n            <ul>\n            <li>S ravi and HDPK Dhrmasena are most popular umpires in IPL<\/li>\n        <\/ul>\n<\/div>\n\n","0555a712":"<a id=\"ss23\"><\/a>\n### 3.5 Toss Decision","a585594f":"<a href=\"#top\" class=\"btn btn-success btn-lg active\" role=\"button\" aria-pressed=\"true\" style=\"color:white\" data-toggle=\"popover\" title=\"go to Colors\">Go to TOP<\/a>","a5884bb0":"<a id=\"s4\"><\/a>\n## 4. Runs per Season","552ef043":"<a id=\"ss2\"><\/a>\n### 3.2 Matches Played vs Wins by Each Team","dcd5da43":"So there is increase in runs in powerplay in last few years","4840c073":"<a id=\"ss18\"><\/a>\n### 11.1 Which team win highest no. of seasons","22405a8c":"<a id=\"s3\"><\/a>\n## 3. Some Basic Analysis","3bd2c560":"<a id=\"ss15\"><\/a>\n### 9.4 Orange Cap Holders","aa69bdfd":"\n  <div class=\"alert alert-block alert-info\" style=\"font-size:14px; font-family:verdana; line-height: 1.7em;\">\n            <ul>\n            <li>RCB followed by CSK are at top in creating targets of score greater than 200<\/li>\n            <li>KXIP and CSK is at top in IInd innings while chasing target<\/li>\n        <\/ul>\n<\/div>\n","561b00d8":"<a id=\"s6\"><\/a>\n## 6. Average Score of  Each Team Per Season  ","9c8de6a6":"\n\n  <div class=\"alert alert-block alert-info\" style=\"font-size:14px; font-family:verdana; line-height: 1.7em;\">\n            <ul>\n            <li>Virat Kohli has highest total runs across all seasons. Raina is just few runs behind with the second spot<\/li>\n            <li>Average Score and 6\"s by Parthiv Patel is lowest among top 20 batsmen<\/li>\n        <\/ul>\n<\/div>","dcaa9d04":"<a id=\"s5\"><\/a>\n## 5. Target of 200 Runs or More","5dc8fd3c":"<a id=\"ss22\"><\/a>\n## 10.4 Top 10 Bowling Performance till 2020","2001db11":"<a id=\"ss21\"><\/a>\n## 10.3 Top 10 Bowlers","4c681eec":"<a id=\"ss19\"><\/a>\n### 11.2 Match Played vs wins in Final Match of Every Season","e1318073":"<a id=\"top\"><\/a>\n<h1 style=\"font-family:verdana;\"> <center>\ud83c\udfc6 All about IPL : Indian Premier league \ud83c\udfc6<\/center> <\/h1>\n<p><center style=\"color:#159364; font-family:cursive;\">Let's start with a little intro<\/center><\/p>\n\n***\n<div class=\"alert alert-block alert-info\" style=\"font-size:14px; font-family:verdana; line-height: 1.7em;\">\n    \ud83d\udccc &nbsp;The Indian Premier League (IPL) is a professional Twenty20 cricket league in India contested during March or April and May of every year by eight teams representing eight different cities in India.The league was founded by the Board of Control for Cricket in India (BCCI) in 2008. The IPL has an exclusive window in ICC Future Tours Programme. Currenly it's 14th season of IPL\n<\/div>\n","f94c13ee":"  <div class=\"alert alert-block alert-info\" style=\"font-size:14px; font-family:verdana; line-height: 1.7em;\">\n            <ul>\n            <li>So Eden Gardens, M Chinnaswamy, Wankhede and Feroz Shah Kotla are statiums with most matches<\/li>\n            <li>Since Moslty eliminators, qualifiers and final of each season was here<\/li>\n        <\/ul>\n<\/div>"}}