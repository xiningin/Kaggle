{"cell_type":{"88e3fe16":"code","6fb70d79":"code","11adc3f1":"code","4bb45981":"code","a366009f":"code","6997d262":"code","d84fc4dc":"code","ebdc30ef":"code","06f7ed5d":"code","3b88d95b":"code","4e330498":"code","1362f551":"code","b4b691ed":"code","4fc971f1":"code","c211cbb4":"code","31069f4b":"code","8caee48f":"code","a42c1561":"code","099dc821":"code","476e4cb0":"code","748a9981":"code","7616efc5":"code","aea58380":"code","30a00ace":"code","993c016b":"code","2b7318e5":"code","60b3332b":"code","9434f26f":"code","ecfbf40d":"code","1b19037d":"code","fca3753f":"code","45a45d55":"code","48edccee":"code","3093b089":"code","da875a96":"code","b64e7303":"code","729f3376":"code","3dae536c":"code","19c1e0c4":"code","ef803592":"code","8e2e27e9":"code","a2e298ba":"code","15c39477":"code","16996eac":"code","1ece7062":"code","0f8a3649":"code","30d0f122":"code","8a866fac":"code","2fd76ed3":"code","970c2f09":"code","d142f639":"code","8b25c3da":"code","6a858f6a":"code","666e6827":"code","69010049":"markdown","6dd546b8":"markdown","f86d7640":"markdown","7c46d25c":"markdown","ab4ef9dd":"markdown","3231b3f4":"markdown","431409c6":"markdown","f55f4630":"markdown","7febdbd8":"markdown","166d183f":"markdown","67886ada":"markdown","b2fe4fde":"markdown","a60650fa":"markdown","806e11c8":"markdown","9e66a91f":"markdown","007522ea":"markdown","2ecb4d27":"markdown","63766303":"markdown","2a9fe2b1":"markdown","e6dbddeb":"markdown","046257a3":"markdown","e5e53904":"markdown","68cf8afc":"markdown","3fb5b95b":"markdown","02080f8f":"markdown","7a2091af":"markdown","55cbd47b":"markdown","52e1cfc3":"markdown","7a0661f0":"markdown","f6411bf6":"markdown","580c7900":"markdown","b62eb9da":"markdown","298cf3c5":"markdown","123f6107":"markdown","42334fab":"markdown","de6cd711":"markdown","0cec81e3":"markdown","0e01deb5":"markdown","cd377dcd":"markdown","d4c234b0":"markdown","e5a35720":"markdown","239d719b":"markdown","4afbf493":"markdown","10056a8e":"markdown","b25c9931":"markdown","a85baa11":"markdown","1148e186":"markdown","9dcf9c3b":"markdown","4e76df98":"markdown","3ff7c5a2":"markdown","f2073b95":"markdown","8d9f0f82":"markdown","424ebd81":"markdown","da57f5c5":"markdown"},"source":{"88e3fe16":"import numpy as np\nimport pandas as pd","6fb70d79":"## function to create Series object\ndef create_series(data):\n    series = pd.Series(data)\n    print(f\"source data type {type(data)} output type {type(series)}\")\n    return series\n\n###### OPTION 1 ######\n\n## creating Series from Scalar\ndata = 5\nseries = create_series(data)\n\n###### OPTION 2 ######\n\n## creating Series from 1-Dimension array\ndata = np.arange(0,25, 2)\nseries = create_series(data)\n\n###### OPTION 3 ######\n\n## creating Series from List\ndata = [i for i in range(0,25) if i % 2 == 0]\nseries = create_series(data)\n\n###### OPTION 4 ######\n\n## creating Series from Dict\ndata = {i:i for i in range(0,25) if i % 2 == 0}\nseries = create_series(data)","11adc3f1":"print(\"Series:\\n\",series), \nprint(\"Index: \", series.index)\nprint(\"Type: \",type(series))","4bb45981":"## function to create DataFrame object\ndef create_dataframe(data):    \n    df = pd.DataFrame(data)\n    if isinstance(data, dict):\n        print(f\"source data type {type(data)} values of Dict {type(data[list(data.keys())[0]])} output type {type(df)}\")\n    elif isinstance(data, list):\n        print(f\"source data type {type(data)} values of List {type(data[0])} output type {type(df)}\")\n    elif isinstance(data, pd.Series):\n        print(f\"source data type {type(data)} output type {type(df)}\")\n    return df\n\n\n###### OPTION 1 ######\n\n## creating DataFrame from Dict of Series\ndata = {'odd': pd.Series([1., 2., 3.], index=['a', 'b', 'c']),\n      'even': pd.Series([1., 2., 3., 4.], index=['a', 'b', 'c', 'd'])}\ndf = create_dataframe(data)\n\n###### OPTION 2 ######\n\n## creating DataFrame from Dict of list\ndata = {'odd': [i for i in range(0,26) if i % 2 != 0],\n      'even': [i for i in range(0,25) if i % 2 == 0]}\n\n## Note: While you create DataFrame from Dict of list of values,then the length of list should have same no of elements in all the keys of dict\n## Hope, I am not confusing. Example: Key 'odd' has list of odd numbers and Key 'even' has even numbers,\n## The both keys should have same no of elements in the dictionary. Otherwise, It will thrown an error.\ndf = create_dataframe(data)\n\n###### OPTION 3 ######\n\n## creating DataFrame from Dict of tuple\ndata = {'odd': tuple(i for i in range(0,26) if i % 2 != 0),\n      'even': tuple(i for i in range(0,25) if i % 2 == 0)}\n## Tuple also having same property of list\ndf = create_dataframe(data)\n\n###### OPTION 4 ######\n\n## creating DataFrame from Dict of N-Dimensional array\ndata = {'odd': np.arange(1,26, 2),\n        'even': np.arange(0,25,2)}\ndf = create_dataframe(data)\n\n###### OPTION 5 ######\n\n## creating DataFrame from Dict of N-Dimensional array\ndata = {'odd': np.arange(1,26, 2),\n        'even': np.arange(0,25,2)}\ndf = create_dataframe(data)\n\n###### OPTION 6 ######\n\n## creating DataFrame from Series\ndata = pd.Series([1,2,3,4,5], index=[4,5,6,7,8])\ndf = create_dataframe(data)\n\n###### OPTION 7 ######\n## creating DataFrame from List of List\ndata = [[1,2,3,4,5],[3,4,5,6,3]]\ndf = create_dataframe(data)","a366009f":"print(df)\nprint(\"Index of the DataFrame: \",list(df.index))\nprint(\"Columns of the DataFrame: \",list(df.columns))","6997d262":"n = 2\n## series \nprint(f\"##### Series Viewing Options: #####\\nShape of the series:\\n {series.shape}\\nFirst {n} rows:\\n{series.head(n)},\\nLast {n} rows:\\n \\\n                {series.tail(n)},\\nDescribe of Series:\\n{series.describe()},\\nUnique values of Series:\\n{series.value_counts(dropna=True)}\")","d84fc4dc":"n = 2\n## series \nprint(f\"##### DataFrame Viewing Options: #####\\nShape of the dataframe:\\n {df.shape}\\nFirst {n} rows:\\n{df.head(n)},\\nLast {n} rows:\\n{df.tail(n)},\\\n            \\nDescribe of DataFrame:\\n{df.describe()}\\nUnique values of DataFrame:\\n{df.apply(pd.Series.value_counts)}\")","ebdc30ef":"## set existing column into index of the dataframe\n\n## set_index works only for Dataframe and not in series\ndf_temp = df.copy()\ndf_temp.set_index(0)","06f7ed5d":"## set existing column into index of the dataframe\n\n## set_index works only for Dataframe and not in series\n## parameter drop used for storing the existing index value as new column if drop=True else current index values gets omit it\ndf.reset_index(drop=True)","3b88d95b":"## created sample DataFrame\ndf = pd.DataFrame({'A': 1.,\n                       'B': pd.Timestamp('20130102'),\n                       'C': pd.Series(1, index=list(range(4)), dtype='float32'),\n                       'D': np.array([3] * 4, dtype='int32'),\n                       'E': pd.Categorical([\"test\", \"train\", \"test\", \"train\"]),\n                       'F': 'foo'})\ndf","4e330498":"## A is column name of dataframe.\n## it equivalant to df[\"A\"]\ndf.A","1362f551":"## Selecting multiple columns\ndf[[\"A\", \"B\", \"C\"]] ## same as df.get([\"A\", \"B\", \"C\"])","b4b691ed":"## select rows 0 to 2-1\ndf[0:2]","4fc971f1":"# select 0 index row\ndf.loc[0]","c211cbb4":"# select all the rows for the multiple columns\ndf.loc[:, [\"A\", \"B\"]]","31069f4b":"# select subset of the rows for the multiple columns\ndf.loc[2:3, [\"A\", \"B\"]]","8caee48f":"# select specific location value of the column\ndf.at[2, \"B\"]","a42c1561":"## select the nth row by position\ndf.iloc[2]","099dc821":"## select the rows between 1 to 3 and column 2 to 3 by position\ndf.iloc[1:3, 2:3]","476e4cb0":"## select specific scalar value position\ndf.iloc[1, 1], df.iat[1,1]","748a9981":"## select the rows which satisfy the condition\ndf[df['E'] == \"test\"]","7616efc5":"## select the rows which satisfy the condition using isin method\ndf[df['E'].isin([\"train\", \"val\"])]","aea58380":"## assign a series to new column in dataframe\ndf[\"F\"] = pd.Series([1])\ndf[\"F\"]","30a00ace":"## assign a value to column in specific row using index name\ndf.at[3, 'F'] = 3\ndf[\"F\"]","993c016b":"## assign a value to column in specific position in the row\ndf.at[2, 'F'] = 2\ndf[\"F\"]","2b7318e5":"## check the null value in DataFrame, the same can be applied to Series as well.\nprint(df.isnull(),\"\\n\", df.notnull())\n## for series\nprint(df[\"A\"].isnull(), \"\\n\", df[\"A\"].notnull())","60b3332b":"## remove the row \/ column as specified in axis value.\ndf.dropna(axis=0)","9434f26f":"## fill the missing value with mean\nprint(df[\"F\"].fillna(df[\"F\"].mean()))","ecfbf40d":"## rename all the columns\ndf.rename(columns= lambda x: x + \"_1\")\n\n## rename only specific  columns\ndf.rename(columns= {\"A\": \"A_new\"})\n\n## set index from column values\ndf.set_index(\"A\")\n\n## rename the index\ndf.rename(index= lambda x: x+10)","1b19037d":"print(\"Description:\\n\",df.describe())\nprint(\"Count:\\n\",df.count())\nprint(\"Mean:\\n\",df.mean())\nprint(\"Min:\\n\",df.min())\nprint(\"Max:\\n\",df.max())\nprint(\"Std:\\n\",df.std())\nprint(\"Median:\\n\",df.median())\nprint(\"Corr:\\n\",df.corr())","fca3753f":"## filter rows with specific single condition\ndf[df[\"F\"] > 1]","45a45d55":"## filter rows with multiple condition\ndf[(df[\"F\"] > 1) & (df[\"F\"] < 3)]","48edccee":"## sort the column F by descending order\ndf.sort_values([\"F\"], ascending=False)","3093b089":"## common aggrecation function\ndf.groupby([\"E\"]).agg([\"sum\", \"count\"])","da875a96":"## custom aggrecation function\n\ndef custom_sum(x):\n    return x.sum()\n\n## apply function can be applied without grouping the dataframe as well.\ndf.groupby([\"E\"]).apply(custom_sum)","b64e7303":"df.pivot_table(index=[\"F\"],values=[\"A\", \"C\", \"D\"],aggfunc=np.mean) ","729f3376":"## taking deep copy of dataframe\ndf1 = df.copy()\ndf1[\"G\"] = np.random.random((df.shape[0], 1))","3dae536c":"## append the df1 to df\ndf.append(df1)","19c1e0c4":"## concat the df1 to df, axis=0 works as append method (row level concat)\npd.concat([df, df1], axis=0)\n\n## concat the df1 to df, axis=1 works as appending into index level (columns)\npd.concat([df, df1], axis=1)","ef803592":"## concat the df1 to df, axis=0 works as append method (row level concat)\n## When joinning two different dataframe, if the column names are same then lsuffix and rsuffix can be used to add some string to indicate which dataframe the column belongs.\ndf.join(df1, how=\"right\", on=\"F\", lsuffix='_left', rsuffix='_right')","8e2e27e9":"## Merge the df1 to df, axis=0 works as append method (row level concat)\n\ndf.merge(df1, how=\"right\", on=\"F\")","a2e298ba":"## Map is only available to Series, Hence it is required to select specific column from dataframe.\n\nnew_map_values = {\"test\": \"unseen\", \"train\": \"val\"}\ndf[\"E\"].map(new_map_values)","15c39477":"## Apply can be applied to Series and DataFrame\n\n## Add _data string to existing value\ndf[\"E\"].apply(lambda val: val+\"_data\")","16996eac":"## Apply can be applied to Series and DataFrame\n\n## axis indicates row or column\ndef custom_function(row):    \n    return row[\"E\"] + \"_data\"\n\ndf.apply(lambda row: custom_function(row), axis=1)","1ece7062":"df.applymap(lambda x: len(str(x)))","0f8a3649":"## consider the column E as index, manipulate the new columns based on column A\ndf.pivot_table(index=\"E\", columns=\"A\", values=\"C\")","30d0f122":"## consider the column E as index, manipulate the new columns based on column A and apply the aggrecation function i.e mean\ndf.pivot_table(index=\"E\", columns=\"A\", aggfunc=\"mean\")","8a866fac":"## convert rows to columns and columns to rows.\n\n## it is equivalent to Matrix transpostion.\ndf.transpose() #  attribute T is (df.T) same as df.transpose()","2fd76ed3":"## Assigns values outside boundary to boundary values \ndf[\"F\"].clip(2,3)","970c2f09":"## Convert continous values to group bins for discrete intervals.\npd.cut(df[\"F\"], bins=2)","d142f639":"# argument index used for indicating whether we need to store index value or not. True means store index value and False means don't store index values.\ndf.to_csv(\"csv_format.csv\", index=False)\ndf.to_excel(\"csv_format.xlsx\", index=False)\ndf.to_json(\"csv_format.json\")","8b25c3da":"def get_sample_dataframe():\n    \n    number_or_rows = 10\n    num_cols = 5\n    cols = list(\"ABCDE\")\n    df = pd.DataFrame(np.random.randint(1, 20, size = (number_or_rows, num_cols)), columns=cols)\n    return df","6a858f6a":"df = get_sample_dataframe()\ndf.head()","666e6827":"## kind argument accepts many different plots\n\ndf.plot(kind = \"hist\")\ndf.plot(kind = \"bar\")","69010049":"#### GroupBy DataFrame\n\n- `groupby()` This can be used to group large amounts of data and compute operations on every groups\n- The aggrecation function or custom function can be applied once you do groupby dataframe.","6dd546b8":"We will look the following functions for DataFrame.\n\n- `.pivot()` Reshape the dataframe based on index\/column values but you can't perform aggrecation operation here.\n- `.pivot_table()` Reshape the dataframe based on index\/column values and apply aggregation. It is same as using Pivot tables in Excel.\n- `.transpose()` Change rows to columns and column to rows in dataframe.\n- `.clip()` Assigns values outside boundary to boundary values.\n- `.cut()` Convert continous variables into discreate variables. Ex: age values convert into groups.","f86d7640":"###  <font color=\"#007bff\"><b>4.4 Rename the column \/ index<\/b><\/font><br><a id=\"4.4\"><\/a>  \n- `.rename(columns=lambda x: x + 1)` It rename all the columns\n- `.rename(columns={'old_name': 'new_ name'})`  Used for selective renaming \n- `.set_index('column_one')`  Change the column value as index\n- `.rename(index=lambda x: x + 1)` It rename all the index","7c46d25c":"#### Filter the dataframe rows with specific condition\n- `df[df[col] > 0.5]` Filter rows where the column col is greater than 0.5, col means column name\n- `df[(df[col] > 0.5) & (df[col] < 0.7)]` Filter rows where 0.7 > col > 0.5, col means column name","ab4ef9dd":"There are several formats you can save `dataframe`. Majorly used following:\n\n- CSV (comma separated file)\n- Excel\n- JSON file\n- pickle file","3231b3f4":"#### Select specific row \n- `.loc[3]` used for selecting row which has index name as 3. \n- It result only specific row selection.\n\n#### Select all the rows for column A\n- `.loc[:, \"A\"]` used for selecting all rows based for column A\n- It returns all the rows.\n\n#### Select subset of rows for column A and B\n- `.loc[2:5, [\"A\",\"B]]` used for selecting specific rows for column A and B\n- It returns the specific subset of rows\n\n#### Select specific scalar value by fast\n- `.at[3, \"B\"]` used for selecting specific row scalar value for column B\n- It returns the specific location value in the column.\n\n<font color=\"red\"><b>Note: Index name should be same. This will not consider the position of value.<\/b><font>","431409c6":"### \ud83d\ude4f Thanks for reading the kernal.  Please upvote and leave your comments.\n\n<font color=\"blue\"><b>More will be updated soon.<\/b><\/font>","f55f4630":"Once the DataFrame \/ Series created, First thing we do is view the repective data in form of Series \/ DataFrame. Let's see, what are different ways to you can look.\n\n- `shape` -> It returns the (n_rows, n_cols) array. It indicates number of rows and number columns available.\n- `head(n)` -> head means, it will show first n rows and n indicates, number of first rows to view, If it not mentioned, takes default n value.\n- `tail(n)` -> tail means, it will show last n rows and n indicates, number of last rows to view, If it not mentioned, takes default n value.\n- `describe()` -> The describe feature show some basic statistical measure depends on the datatype. It shows different parameters for categorical or continous variables.\n- `value_counts` -> View unique values and counts\n- `set_index` -> Set new values as index values of DataFame.\n- `reset_index` -> Reset the index value from 0.\n\nThe above methods are available for both the data stuctures.","7febdbd8":"## <font color=\"#007bff\"><b>5. Statistics Measures<\/b><\/font><br><a id=\"5\"><\/a>\n<a href=\"#TOC\" class=\"btn btn-success\" role=\"button\" aria-pressed=\"true\" style=\"color:white\" data-toggle=\"popover\" title=\"go to TOC\">Go to TOC<\/a>","166d183f":"<font color=\"blue\"><b>Always remember that:<\/b><\/font>\n- `loc` is used for accessing the elements by label name and \n- `iloc` used for accessing the elements by position","67886ada":"## <font color=\"#007bff\"><b>1. Creating DataFrame \/ Series<\/b><\/font><br><a id=\"1\"><\/a>\n<a href=\"#TOC\" class=\"btn btn-success\" role=\"button\" aria-pressed=\"true\" style=\"color:white\" data-toggle=\"popover\" title=\"go to TOC\">Go to TOC<\/a>","b2fe4fde":"### <font color=\"#007bff\"><b>4.2 Dropping null<\/b><\/font><br><a id=\"4.2\"><\/a> \n- `.dropna(axis=0 or 1)`  It drop all rows that contain null values. Axis means 0 for rows 1 means columns. \n- `.dropna(axis=1,thresh=n)` Drop all rows have have less than n non null values","a60650fa":"#### Select specific row \n- `.iloc[3]` used for selecting 3rd row.\n\n#### Integer slicing in numpy\/python\n- `iloc[3:5, 0:2]` used for selecting between 3rd and 5th rows for column 0 to 2-1.\n\n#### Slicing rows explicitly\n- `iloc[1:4, :]` used for selecting rows between 1st to 4th for all the columns.\n\n#### Getting an value explicitly\n- `iloc[1,1]` used for selecting rows between 1st to 4th for all the columns.\n- `iat[1,1]` used for fast access to a scalar value","806e11c8":"`Apply` method can be called with custom function. `axis=0` means column level and `axis=1` means row level.","9e66a91f":"## <font color=\"#007bff\"><b>8. Apply, Map and Applymap<\/b><\/font><br><a id=\"8\"><\/a>\n<a href=\"#TOC\" class=\"btn btn-success\" role=\"button\" aria-pressed=\"true\" style=\"color:white\" data-toggle=\"popover\" title=\"go to TOC\">Go to TOC<\/a>","007522ea":"The DataFrame looks like below. It is 2-Dimensional table structure. It has rows and column associated with it.\n- Each row having index for unique identification\n- The same way it has multipl different columns names\n- It can be also created with MultiIndex DataFrame","2ecb4d27":"### <font color=\"#007bff\"><b>4.3 Fill the null values<\/b><\/font><br><a id=\"4.3\"><\/a> \n- `.fillna(x)` It replace all null values with x","63766303":"Data comes with different format and type. Pandas provides flexible ways of handling many data cleaning tasks. \n\n- Pandas consider the `np.nan` as null values. `None` will not be consider as missing value.\n- <font color=\"red\">`np.nan == np.nan` will not consider the same in python\/numpy. But, `None == None` would do.<\/font>\n","2a9fe2b1":"\n### <font color=\"#007bff\"><b>3.3 Selection by position<\/b><\/font><br><a id=\"3.3\"><\/a>","e6dbddeb":"There are multiple ways you can create `DataFrame` or `Series` object. The datatype of Series or DataFrame column would be automatically infered when you create. `import pandas as pd` Pandas naming widely accepted alias name as `pd`.\n\n### <font color=\"#007bff\"><b>1.1 Series <\/b><\/font><br><a id=\"1.1\"><\/a>\nSeries is a one-dimensional labeled array which can hold any datatype (integer, float, strings and python object, etc).The axis labels are called as **index**. We can imagine that, kind of dict concept where every index holds repective value. Basic structure for creating the `Series` object as follows:\n\n>> `s = pd.Series(data, index=index)`\n\nThe `data` can be any of the following type:\n- Scalar value\n- 1-dimension array\n- List\n- Dict\n\nWill generate even numbers between 0,25 in above formats.","046257a3":"### <font color=\"#007bff\"><b>3.1 Selection based on column \/ index name<\/b><\/font><br><a id=\"3.1\"><\/a>","e5e53904":"## <font color=\"#007bff\"><b>6. Filter, Sort, and Groupby<\/b><\/font><br><a id=\"6\"><\/a>\n<a href=\"#TOC\" class=\"btn btn-success\" role=\"button\" aria-pressed=\"true\" style=\"color:white\" data-toggle=\"popover\" title=\"go to TOC\">Go to TOC<\/a>","68cf8afc":"The main difference between Apply, Map and ApplyMap as follows:\n![image.png](attachment:image.png)","3fb5b95b":"- `.to_csv()` used for creating comma separated file (.csv)\n- `.to_excel()` Create Excel format .xlsx\n- `.to_json()` used for creating .json file.","02080f8f":"Reference:\n\n- https:\/\/pandas.pydata.org\/docs\/user_guide\/index.html\n- https:\/\/www.dataquest.io\/blog\/pandas-cheat-sheet\/","7a2091af":"## <font color=\"#007bff\"><b>4. Data Cleaning<\/b><\/font><br><a id=\"4\"><\/a>\n<a href=\"#TOC\" class=\"btn btn-success\" role=\"button\" aria-pressed=\"true\" style=\"color:white\" data-toggle=\"popover\" title=\"go to TOC\">Go to TOC<\/a>","55cbd47b":"`ApplyMap` Apply a function to a Dataframe elementwise.","52e1cfc3":"`map` the values to with new values","7a0661f0":"- `.plot(kind='line')` is used to plot different type of basic plots.\n\n`kind` argument support following  basic plot type:\n1. line -> line plot with x and y variable\n2. bar -> bar plot with count\n3. hist -> histogram with frequency\n4. box -> box and whisker plot, It is used in explanatory data analysis to visually show the distribution of numerical data and skewness through displaying the data quartiles (or percentiles) and averages.","f6411bf6":"## <font color=\"#007bff\"><b>3. Selection<\/b><\/font><br><a id=\"3\"><\/a>\n<a href=\"#TOC\" class=\"btn btn-success\" role=\"button\" aria-pressed=\"true\" style=\"color:white\" data-toggle=\"popover\" title=\"go to TOC\">Go to TOC<\/a>","580c7900":"<a id=\"TOC\"> <\/a>\n\n## Table of Content\n\n\n* [1. Creating DataFrame \/ Series](#1) \n    - [1.1 Series](#1.1)\n    - [1.2 DataFrame](#1.2)\n* [2. Viewing DataFrame \/ Series](#2)\n* [3. Selection](#3)\n    - [3.1 Selection based on column \/ index name](#3.1)\n    - [3.2 Selection based on Label](#3.2)\n    - [3.3 Selection by position](#3.3)\n    - [3.4 Boolean indexing](#3.4)\n    - [3.5 Setting new column \/ value](#3.5)\n* [4. Data Cleaning](#4)\n    - [4.1 Null values](#4.1)\n    - [4.2 Dropping null](#4.2)\n    - [4.3 Fill the null values](#4.3)\n    - [4.4 Rename the column \/ index](#4.4)\n* [5. Statistics Measures](#5)   \n* [6. Filter, Sort, and Groupby](#6)\n* [7. Merge, Join, Concat and Append](#7)\n* [8. Apply, Map and Applymap](#8)\n* [9. Advanced functions](#9)\n* [10.Creating output files](#10)\n* [11. Plots](#11)","b62eb9da":"#### Sort the values\n\n- `sort_values(by, axis=0, ascending=True\/False)` Sort values by column in ascending order or descending order\n- **By** indicates the name or list of names to sort by.\n    - if axis is 0 or \u2018index\u2019 then by may contain index levels and\/or column labels.\n    - if axis is 1 or \u2018columns\u2019 then by may contain column levels and\/or index labels.\n","298cf3c5":"#### Pivot Table\n\n- It is same as applying the Pivot table in Excel Spreadsheet. It is very important function too.\n- `pivot_table` Create a pivot table that groups by col1 and calculates the mean of col2 and col3","123f6107":"As you can see, the source data type generated in different formats and created series object. Not passed any explicit values for `index` argument while creating `Series`. Hence, It will generate default `index` values as `0 to data-1`. \n\nThe sample series output generated:","42334fab":"![Pandas logo](attachment:image.png)\n\n[Pandas](https:\/\/pandas.pydata.org\/docs\/user_guide\/index.html) is a python based library for providing fast, flexible, and expressive data structures designed to make working with \u201crelational\u201d or \u201clabeled\u201d data both easy and intuitive. It is the most powerful and flexible **open source data analysis \/ manipulation tool**.\n\nPandas is well suited for many different kind of data:\n- Tabular data i.e SQL tables, Excel spreadseet, CSV, JSON, and etc.\n- Time series data\n- Matrix data with row and column labels\n\n## Primary Data Structure:\nThere are two main data structure used in Pandas internally. \n1. Series\n2. DataFrame\n\n**DataFrame** - 2-dimensional size-mutable tabular structure. <br>\n\n![DataFrame](https:\/\/pandas.pydata.org\/docs\/_images\/01_table_dataframe1.svg)\n\n**Series** - 1D labeled homogeneously-typed array. Each column in DataFrame is Series.\n\n\nIt's all fine with the theoretical knowledge. Let's dive into some practical way of usage.","de6cd711":"### <font color=\"#007bff\"><b>4.1 Null values<\/b><\/font><br><a id=\"4.1\"><\/a>","0cec81e3":"- Select column `df.A or df[\"A\"]` **A** is a column name of dataframe.\n- Select rows `df[0:2]` it select the first n-1 rows. Also, you can select the rows by using index names.\n\n#### Selecting multiple columns\n- Selecting multiple columns `df[[\"A\", \"B\", \"C\"]]` **A, B, C** is a column name of dataframe. It is equivalent to `df.get([\"A\", \"B\", \"C\"])`.","0e01deb5":"## <font color=\"#007bff\"><b>9. Advanced functions <\/b><\/font><br><a id=\"9\"><\/a>\n<a href=\"#TOC\" class=\"btn btn-success\" role=\"button\" aria-pressed=\"true\" style=\"color:white\" data-toggle=\"popover\" title=\"go to TOC\">Go to TOC<\/a>","cd377dcd":"Pandas provides various statistical tests in-build. The same method can be applied to `Series` as well.\n\n- `.describe()` It provides statistics for numerical columns\n- `.mean()` It returns the mean of all columns\n- `.corr()` It returns the correlation between each columns in a DataFrame\n- `.count()` It returns the number of non-null values in each column\n- `.max()` It returns the highest value in each column\n- `.min()` It returns the lowest value in each column\n- `.median()` It returns the median of each column\n- `.std()` It returns the standard deviation of each column","d4c234b0":"This is used for selecting rows based on the condition that satisfy.\n\n- `df['A'] > 0` return True\/False for every index. Hence, you can select the rows which are statisfied by boolean expression (True).\n- `isin([])` can be used for selecting the specific rows. `isin` used when you have list of values to check in the specific column.","e5a35720":"Setting a new column automatically aligns the data by the indexes.\n\n#### Assigning a pd.Series to new column\n- `df[\"F\"] = pd.Series([])` You can create new values for column F and assign to DataFrame.\n\n#### Setting a value by label\n- `df.at[0, 'A'] = 0` Assign a value 0 for position of 0th index(index name) for column A (column name).\n\n#### Setting values by position\n- `df.iat[0, 1] = 0` Assign a value 0 for position of 0th index position for 1st column in position.\n","239d719b":"`apply` function to specific column (Series)","4afbf493":"## <font color=\"#007bff\"><b>11. Plots<\/b><\/font><br><a id=\"11\"><\/a>\n<a href=\"#TOC\" class=\"btn btn-success\" role=\"button\" aria-pressed=\"true\" style=\"color:white\" data-toggle=\"popover\" title=\"go to TOC\">Go to TOC<\/a>","10056a8e":"### <font color=\"#007bff\"><b>1.2 DataFrame <\/b><\/font><br><a id=\"1.2\"><\/a>\nDataFrame is a 2-dimensional labeled data structure with columns (different data types). You can think it is like Excel spreadsheet or CSV. Basic structure for creating the `DataFrame` object as follows:\n\n>> `df = pd.DataFrame(data, index=[], columns=[])`\n\nThe `data` can be any of the following type:\n- Dict of N-dimensional array or list or tuple or Series\n- List of dicts\n- lists, or Series","b25c9931":"## <font color=\"#007bff\"><b>2. Viewing DataFrame \/ Series<\/b><\/font><br><a id=\"2\"><\/a>\n<a href=\"#TOC\" class=\"btn btn-success\" role=\"button\" aria-pressed=\"true\" style=\"color:white\" data-toggle=\"popover\" title=\"go to TOC\">Go to TOC<\/a>","a85baa11":"## <font color=\"#007bff\"><b>10. Creating output files<\/b><\/font><br><a id=\"10\"><\/a>\n<a href=\"#TOC\" class=\"btn btn-success\" role=\"button\" aria-pressed=\"true\" style=\"color:white\" data-toggle=\"popover\" title=\"go to TOC\">Go to TOC<\/a>","1148e186":"## <font color=\"#007bff\"><b>7. Merge, Join, Concat and Append<\/b><\/font><br><a id=\"7\"><\/a>\n<a href=\"#TOC\" class=\"btn btn-success\" role=\"button\" aria-pressed=\"true\" style=\"color:white\" data-toggle=\"popover\" title=\"go to TOC\">Go to TOC<\/a>","9dcf9c3b":"### <font color=\"#007bff\"><b>3.4 Boolean indexing<\/b><\/font><br><a id=\"3.4\"><\/a>","4e76df98":"### <font color=\"#007bff\"><b>3.5 Setting new column \/ value<\/b><\/font><br><a id=\"3.5\"><\/a>","3ff7c5a2":"- `.isnull()` It checks for null values and return the boolean array\n- `.notnull()` It checks for not null values and return the boolean array","f2073b95":"#### Setting new index values","8d9f0f82":"### <font color=\"#007bff\"><b>3.2 Selection based on Label<\/b><\/font><br><a id=\"3.2\"><\/a>","424ebd81":" - Select a specific subset of your dataframe based on columns names, index or boolean indexing (condition).\n - A standard Python \/ Numpy expressions for selecting and setting can be used.\n \n Will use below sample dataframe for selection procecss.","da57f5c5":"Merging two dataframe is crucial task for data analysis since the data source can be multiple.\n\n- Helps combining multiple dataframe into single dataframe.\n\n- `.append()` Add the rows in df1 to the end of df2 (columns should be identical)\n- `.merge()` Merge is more or less does the same thing as join. It is more versatile.\n- `.concat()` Add the columns in df1 to the end of df2 (rows should be identical)\n- `.join([], how=\"\", on=\"\")` SQL-style join the columns in df1 with the columns on df2 where the rows for col have identical values.\n    - 'how' can be one of 'left', 'right', 'outer', 'inner'\n    - 'on' used for identifying the primary key for both the dataframe. It column names are different, then it can be mentioned as \"left_on\" and \"right_on\"."}}