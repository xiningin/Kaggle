{"cell_type":{"471c5029":"code","98d614b0":"code","abe9bff7":"code","8ddabad5":"code","0f033ca3":"code","f20df55c":"code","71d5774a":"code","2099266d":"code","5f878266":"code","b7430225":"code","03fbb2c9":"code","3890e179":"code","76c54f20":"code","952ef2f3":"markdown","f4926044":"markdown","8a3f034b":"markdown","d8e82a20":"markdown","d401360a":"markdown"},"source":{"471c5029":"import pandas as pd\nimport numpy as np\nimport torch\nfrom torch import nn\nimport torch.nn.functional as F\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nimport os\nimport cv2","98d614b0":"df = pd.read_csv('..\/input\/russian-handwritten-letters\/all_letters_info.csv')\ndf.head()","abe9bff7":"base_path = '..\/input\/russian-handwritten-letters\/all_letters_image\/all_letters_image\/'","8ddabad5":"features = []\nlabels = []\n\nfor i, file in enumerate(df['file'].values):\n    features.append(cv2.resize(cv2.imread(base_path + file), (28, 28)))\n    labels.append(df['label'][i])\n\nfeatures = np.asarray(features)\nlabels = np.asarray(labels)","0f033ca3":"# normalize\nfeatures = features \/ 255.0","f20df55c":"device = torch.device(\"cuda:0\")","71d5774a":"features = torch.from_numpy(features).to(device).type(torch.cuda.FloatTensor)\nlabels = torch.from_numpy(labels).to(device).type(torch.cuda.LongTensor)","2099266d":"X_train, X_test, y_train, y_test = train_test_split(features, labels, test_size=0.33, random_state=42)","5f878266":"model = nn.Sequential(nn.Conv2d(28,14,1),\n                      nn.ReLU(),\n                      nn.Dropout2d(0.1),\n                      nn.MaxPool2d(2),\n                      nn.Flatten(),\n                      nn.Linear(196, 124),\n                      nn.Sigmoid(),\n                      nn.Linear(124, 64),\n                      nn.Sigmoid(),\n                      nn.Linear(64, 34),\n                      nn.LogSoftmax(dim=1))\n\nmodel = model.to(device)","b7430225":"optimizer = torch.optim.SGD(model.parameters(), lr=0.42, momentum=0.9)\nloss_fn = nn.CrossEntropyLoss()","03fbb2c9":"losses = []","3890e179":"for e in range(2100):\n    out = model(X_train)\n    loss = loss_fn(out, y_train)\n    losses.append(loss)\n    if(e % 350 == 0):\n        preds_test = model(X_test)\n        loss_test = loss_fn(preds_test, y_test)\n        print('Epoch:{0}, Error-Loss:{1}'.format(e, loss.item()))\n        print('Epoch:{0}, Error-Test-Loss:{1}'.format(e, loss.item()))\n        print('------------------------------------------------------')\n\n    optimizer.zero_grad()\n    loss.backward()\n    optimizer.step()","76c54f20":"plt.plot(losses)","952ef2f3":"# Data Preparation","f4926044":"# Plot Loss","8a3f034b":"# Model","d8e82a20":"# CNN PyTorch Russian Letters","d401360a":"# Training"}}