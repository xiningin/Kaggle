{"cell_type":{"b8a0a3c3":"code","0bc357fa":"code","2d46db37":"code","9a069f41":"code","c5508a86":"code","82dad302":"code","9ecd0ad2":"code","7021fcbc":"code","07e0d018":"code","02603d54":"code","e3205fd9":"code","aad2ae2a":"code","092df88f":"code","09b366ec":"code","94775df8":"code","b70e4316":"code","e62650c6":"code","57adf2cf":"code","9be6a173":"code","8bdf72c5":"code","7752fd92":"code","927a9ff8":"code","a17320f0":"markdown","9bdf5ad9":"markdown","e91d78ee":"markdown","4a5bd18d":"markdown","7463e2b1":"markdown"},"source":{"b8a0a3c3":"import torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom torch.utils.data import DataLoader\nfrom torchvision import datasets, transforms, models \nfrom torchvision.utils import make_grid\nimport os\nimport random\nfrom sklearn.model_selection import train_test_split\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","0bc357fa":"train_transform=transforms.Compose([\n        transforms.RandomRotation(10),      # rotate +\/- 10 degrees\n        transforms.RandomHorizontalFlip(),  # reverse 50% of images\n        transforms.Resize(224),             # resize shortest side to 224 pixels\n        transforms.CenterCrop(224),         # crop longest side to 224 pixels at center\n        transforms.ToTensor(),\n        transforms.Normalize([0.485, 0.456, 0.406],\n                             [0.229, 0.224, 0.225])\n])","2d46db37":"dataset=datasets.ImageFolder(root=(\"..\/input\/natural-images\/natural_images\"),transform=train_transform)\ndataset","9a069f41":"class_names=dataset.classes\nprint(class_names)\nprint(len(class_names))","c5508a86":"train_indices, test_indices = train_test_split(list(range(len(dataset.targets))), test_size=0.2, stratify=dataset.targets)\ntrain_data = torch.utils.data.Subset(dataset, train_indices)\ntest_data = torch.utils.data.Subset(dataset, test_indices)","82dad302":"train_loader=DataLoader(train_data,batch_size=10,shuffle=True)\ntest_loader=DataLoader(test_data,batch_size=10)","9ecd0ad2":"print(len(train_data))\nprint(len(test_data))","7021fcbc":"for images, labels in train_loader:\n    break\n#print the labels\nprint('Label:', labels.numpy())\nprint('Class:', *np.array([class_names[i] for i in labels]))\n\nim=make_grid(images,nrow=5)","07e0d018":"plt.figure(figsize=(10,10))\nplt.imshow(np.transpose(im.numpy(),(1,2,0)))","02603d54":"inv_normalize=transforms.Normalize(\n        mean=[-0.485\/0.229,-0.456\/0.224,-0.406\/0.225],\n        std=[1\/0.229,1\/0.224,1\/0.225])\nim=inv_normalize(im)","e3205fd9":"plt.figure(figsize=(10,10))\nplt.imshow(np.transpose(im.numpy(),(1,2,0)))","aad2ae2a":"alexnetmodel= models.alexnet(pretrained=True)","092df88f":"alexnetmodel","09b366ec":"for param in alexnetmodel.parameters():\n    param.requires_grad=False","94775df8":"torch.manual_seed(42)\n\nalexnetmodel.classifier=nn.Sequential(nn.Linear(9216,1024),\n                                     nn.ReLU(),\n                                     nn.Dropout(p=0.5),\n                                     nn.Linear(1024,8),\n                                     nn.LogSoftmax(dim=1))\nalexnetmodel","b70e4316":"def count_parameters(model):\n    params = [p.numel() for p in model.parameters() if p.requires_grad]\n    for item in params:\n        print(f'{item:>8}')\n    print(f'________\\n{sum(params):>8}')","e62650c6":"count_parameters(alexnetmodel)","57adf2cf":"criterion=nn.CrossEntropyLoss()\noptimizer=torch.optim.Adam(alexnetmodel.classifier.parameters(),lr=0.001)","9be6a173":"import time\nstart_time=time.time()\ntrain_losses=[]\ntest_losses=[]\ntrain_correct=[]\ntest_correct=[]\nepochs=5\n\nfor i in range(epochs):\n    trn_corr=0\n    tst_corr=0\n    for b, (X_train,y_train) in enumerate(train_loader):\n        b+=1\n        \n        y_pred=alexnetmodel(X_train)\n        print(y_pred)\n        loss=criterion(y_pred,y_train)       #####\n\n        predicted=torch.max(y_pred.data,1)[1]\n        batch_corr=(predicted==y_train).sum()\n        trn_corr+= batch_corr\n        \n        optimizer.zero_grad()\n        loss.backward()\n        optimizer.step()\n        \n        if b%200==0:\n            print(f'epoch: {i:2}  batch: {b:4} [{10*b:6}\/8000]  loss: {loss.item():10.8f}  \\\naccuracy: {trn_corr.item()*100\/(10*b):7.3f}%')\n    \n    loss=loss.detach().numpy()\n    train_losses.append(loss)\n    train_correct.append(trn_corr)\n                  \n    with torch.no_grad():\n        for b, (X_test,y_test) in enumerate(test_loader):\n            b+=1\n                  \n            y_val=alexnetmodel(X_test)\n            predicted=torch.max(y_val.data,1)[1]\n            btach_corr=(predicted==y_test).sum()\n            tst_corr+=btach_corr\n\n    loss=criterion(y_val,y_test)\n    loss=loss.detach().numpy()\n    test_losses.append(loss)\n    test_correct.append(tst_corr)\n                  \nprint(f'\\nDuration: {time.time() - start_time:.0f} seconds')        ","8bdf72c5":"x=100\nim = inv_normalize(test_data[x][0])\nplt.imshow(np.transpose(im.numpy(),(1,2,0)))","7752fd92":"test_data[x][0].shape","927a9ff8":"alexnetmodel.eval()\nwith torch.no_grad():\n    new_pred=alexnetmodel(test_data[x][0].view(1,3,224,224)).argmax()\nprint(f'Predicted value: {new_pred.item()} {class_names[new_pred.item()]}')","a17320f0":"# Set Train and Test","9bdf5ad9":"# Natural Image Classify Torch AlexNet","e91d78ee":"# Prediction","4a5bd18d":"# AlexNetModel\nhttps:\/\/en.wikipedia.org\/wiki\/AlexNet","7463e2b1":"# Images and Labels"}}