{"cell_type":{"a297c80f":"code","9ba513b9":"code","2c170ba6":"code","4e7a0de8":"code","2b389a62":"code","e6b8a43d":"code","014d201a":"code","ce588a2c":"code","76237324":"code","19819182":"code","589b34cf":"code","f4076bce":"code","6e90f0b1":"code","c42ea020":"code","a324d794":"code","989a2f49":"code","96f82934":"code","63a8e337":"code","41f5e6d0":"code","a08f18f6":"code","7f979195":"code","b6e8d919":"code","7270e18d":"code","817bede5":"code","a80deb78":"code","9e957e34":"code","0ea034f1":"code","13a0817b":"code","11f0b6f6":"markdown","6ea83425":"markdown","f9400a99":"markdown","c3d63333":"markdown","c708943b":"markdown","acab3e8e":"markdown","5300863b":"markdown","207572ea":"markdown","c27266bf":"markdown"},"source":{"a297c80f":"import pandas as pd\nimport  numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_absolute_error,confusion_matrix,accuracy_score\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.ensemble import RandomForestClassifier","9ba513b9":"df=pd.read_csv('..\/input\/mushroom-classification\/mushrooms.csv')","2c170ba6":"df.head()","4e7a0de8":"df.columns","2b389a62":"df.info()","e6b8a43d":"df.describe()","014d201a":"df.isnull().sum()","ce588a2c":"df['class'].value_counts()","76237324":"df[df['class']=='e'].describe().T","19819182":"df[df['class']=='p'].describe().T","589b34cf":"X=df.drop('class',axis=1)\ny=df['class']","f4076bce":"X.head()","6e90f0b1":"y.head()","c42ea020":"Encoder_x=LabelEncoder()\nfor col in X.columns:\n    X[col]=Encoder_x.fit_transform(X[col])\nEncoder_y=LabelEncoder()\ny=Encoder_y.fit_transform(y)","a324d794":"X.head()","989a2f49":"y","96f82934":"train_x,test_x,train_y,test_y=train_test_split(X,y)","63a8e337":"acc = []\nfor neighbors in range(3,10,1):\n    classifier = KNeighborsClassifier(n_neighbors=neighbors, metric='minkowski')\n    classifier.fit(train_x,train_y)\n    y_pred = classifier.predict(test_x)\n    acc.append(accuracy_score(test_y,y_pred))\n    \nplt.figure(figsize=(15,7))\nplt.plot(list(range(3,10,1)), acc)\nplt.show()","41f5e6d0":"print(f\"Best accuracy is {np.max(acc)} and the k value is {1+acc.index(np.max(acc))}\")","a08f18f6":"k=1+acc.index(np.max(acc))\nknn=KNeighborsClassifier(n_neighbors=k)\nknn.fit(train_x,train_y)\npred=knn.predict(test_x)","7f979195":"print(\"Mean absolute error:\",mean_absolute_error(pred,test_y))","b6e8d919":"pred2=[]\nfor i in pred:\n    if i==1:\n        pred2.append('p')\n    else:\n        pred2.append('e')\n        \n# pred=map(lambda x:'p' if x==1 else 'e',pred)","7270e18d":"pred2=pd.DataFrame({'index':test_x.index,'class':pred2})\npred2.head()","817bede5":"model=RandomForestClassifier(random_state=1)\nmodel.fit(train_x,train_y)\npred=model.predict(test_x)","a80deb78":"print(\"Model score:\",model.score(test_x,test_y))\nprint(\"Mean absolute error:\",mean_absolute_error(pred,test_y))\nprint(\"Accuracy score:\",accuracy_score(pred,test_y))","9e957e34":"pred=map(lambda x:'p' if x==1 else 'e',pred)","0ea034f1":"pred2=pd.DataFrame({'index':test_x.index,'class':pred})\npred2.head()","13a0817b":"pred2.to_csv('submission.csv',index=False)","11f0b6f6":"**Finding most accurate K value**","6ea83425":"# Reading the data","f9400a99":"# Creating Output file","c3d63333":"Spliting the data for training and testing","c708943b":"# Random Forest Classifier","acab3e8e":"# Understanding the data","5300863b":"# Encoding categorical values","207572ea":"# Building the model - KNN","c27266bf":"# Importing the libraries"}}