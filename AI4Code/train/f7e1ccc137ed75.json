{"cell_type":{"909cdec4":"code","7ba3b8c0":"code","0decc080":"code","1540323b":"code","5124aa12":"code","1c9ae4e4":"code","b49631f1":"code","4aab53ba":"code","6ecc88d5":"code","b05dd78d":"code","a71a4788":"code","15d373ed":"code","c7d87c55":"code","ab02582b":"code","dbfd038f":"code","1094c4b5":"markdown","612139bf":"markdown","db70e00b":"markdown","1cdbf136":"markdown","433dab8c":"markdown","2b33b7a3":"markdown","060eaae8":"markdown","86a80fb0":"markdown","e840b236":"markdown","c134f7a1":"markdown","bf5ce000":"markdown","c434effd":"markdown","e3ccbcd6":"markdown","a6fb100f":"markdown"},"source":{"909cdec4":"from mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt # plotting\nimport numpy as np # linear algebra\nimport os # accessing directory structure\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n","7ba3b8c0":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","0decc080":"# Distribution graphs (histogram\/bar graph) of column data\ndef plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n    nunique = df.nunique()\n    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\n    nRow, nCol = df.shape\n    columnNames = list(df)\n    nGraphRow = (nCol + nGraphPerRow - 1) \/ nGraphPerRow\n    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n    for i in range(min(nCol, nGraphShown)):\n        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n        columnDf = df.iloc[:, i]\n        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n            valueCounts = columnDf.value_counts()\n            valueCounts.plot.bar()\n        else:\n            columnDf.hist()\n        plt.ylabel('counts')\n        plt.xticks(rotation = 90)\n        plt.title(f'{columnNames[i]} (column {i})')\n    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)\n    plt.show()\n","1540323b":"# Correlation matrix\ndef plotCorrelationMatrix(df, graphWidth):\n    filename = df.dataframeName\n    df = df.dropna('columns') # drop columns with NaN\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    if df.shape[1] < 2:\n        print(f'No correlation plots shown: The number of non-NaN or constant columns ({df.shape[1]}) is less than 2')\n        return\n    corr = df.corr()\n    plt.figure(num=None, figsize=(graphWidth, graphWidth), dpi=80, facecolor='w', edgecolor='k')\n    corrMat = plt.matshow(corr, fignum = 1)\n    plt.xticks(range(len(corr.columns)), corr.columns, rotation=90)\n    plt.yticks(range(len(corr.columns)), corr.columns)\n    plt.gca().xaxis.tick_bottom()\n    plt.colorbar(corrMat)\n    plt.title(f'Correlation Matrix for {filename}', fontsize=15)\n    plt.show()\n","5124aa12":"# Scatter and density plots\ndef plotScatterMatrix(df, plotSize, textSize):\n    df = df.select_dtypes(include =[np.number]) # keep only numerical columns\n    # Remove rows and columns that would lead to df being singular\n    df = df.dropna('columns')\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    columnNames = list(df)\n    if len(columnNames) > 10: # reduce the number of columns for matrix inversion of kernel density plots\n        columnNames = columnNames[:10]\n    df = df[columnNames]\n    ax = pd.plotting.scatter_matrix(df, alpha=0.75, figsize=[plotSize, plotSize], diagonal='kde')\n    corrs = df.corr().values\n    for i, j in zip(*plt.np.triu_indices_from(ax, k = 1)):\n        ax[i, j].annotate('Corr. coef = %.3f' % corrs[i, j], (0.8, 0.2), xycoords='axes fraction', ha='center', va='center', size=textSize)\n    plt.suptitle('Scatter and Density Plot')\n    plt.show()\n","1c9ae4e4":"nRowsRead = 1000 # specify 'None' if want to read whole file\n# test.csv may have more rows in reality, but we are only loading\/previewing the first 1000 rows\ndf1 = pd.read_csv('\/kaggle\/input\/test.csv', delimiter=',', nrows = nRowsRead)\ndf1.dataframeName = 'test.csv'\nnRow, nCol = df1.shape\nprint(f'There are {nRow} rows and {nCol} columns')","b49631f1":"df1.head(5)","4aab53ba":"plotPerColumnDistribution(df1, 10, 5)","6ecc88d5":"plotCorrelationMatrix(df1, 8)","b05dd78d":"plotScatterMatrix(df1, 20, 10)","a71a4788":"nRowsRead = 1000 # specify 'None' if want to read whole file\n# train.csv may have more rows in reality, but we are only loading\/previewing the first 1000 rows\ndf2 = pd.read_csv('\/kaggle\/input\/train.csv', delimiter=',', nrows = nRowsRead)\ndf2.dataframeName = 'train.csv'\nnRow, nCol = df2.shape\nprint(f'There are {nRow} rows and {nCol} columns')","15d373ed":"df2.head(5)","c7d87c55":"plotPerColumnDistribution(df2, 10, 5)","ab02582b":"plotCorrelationMatrix(df2, 8)","dbfd038f":"plotScatterMatrix(df2, 20, 10)","1094c4b5":"Thanks to [Vitalii Mokin](http:\/\/www.kaggle.com\/vbmokin) for and his kernels:\n\n* [Ammonium prediction in river water](http:\/\/www.kaggle.com\/vbmokin\/ammonium-prediction-in-river-water)\n* [Code starter: Ammonium prediction in river](http:\/\/www.kaggle.com\/vbmokin\/code-starter-ammonium-prediction-in-river)\n\n## Exploratory Analysis","612139bf":"Let's take a quick look at what the data looks like:","db70e00b":"Scatter and density plots:","1cdbf136":"Correlation matrix:","433dab8c":"Distribution graphs (histogram\/bar graph) of sampled columns:","2b33b7a3":"### Let's check 2nd file: train.csv","060eaae8":"Distribution graphs (histogram\/bar graph) of sampled columns:","86a80fb0":"Now you're ready to read in the data and use the plotting functions to visualize the data.","e840b236":"Correlation matrix:","c134f7a1":"There are 2 csv files in the current version of the dataset:\n","bf5ce000":"### Let's check 1st file: test.csv","c434effd":"The next hidden code cells define functions for plotting data. Click on the \"Code\" button in the published kernel to reveal the hidden code.","e3ccbcd6":"Let's take a quick look at what the data looks like:","a6fb100f":"Scatter and density plots:"}}