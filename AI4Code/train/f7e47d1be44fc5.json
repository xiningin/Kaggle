{"cell_type":{"9b88945c":"code","4fc5fc96":"code","a6b2abb4":"code","1936f75c":"code","58cc9643":"code","bba14b9a":"code","f872e3cb":"code","f76ed668":"code","94b134e0":"code","25895399":"code","3656b015":"code","babd690a":"code","905fd1d2":"code","6fa6f789":"code","14b1080b":"code","2c6d69e0":"code","89090cf4":"code","ea542ec4":"code","49914820":"code","7b9d80a7":"code","9879c91e":"code","e0ab083e":"code","61063ab3":"code","badae70e":"code","6cce63a3":"code","3411662b":"code","a62c5f22":"code","d040e5dd":"code","7cc19529":"code","2b9910cf":"code","33b0fc4e":"code","ae935836":"code","b50cf901":"code","dc94f088":"code","ab0ba2e2":"code","167b5af7":"code","069366ba":"code","ed7bebe5":"markdown","d8f05700":"markdown","470dd018":"markdown","1c26db1b":"markdown","1bd8ccd7":"markdown","1832980b":"markdown","3eff95cd":"markdown","5489066d":"markdown","613b28cc":"markdown","a3398307":"markdown"},"source":{"9b88945c":"# IMPORTING IMPORTANT LIBRARIES\nimport numpy as np\nimport pandas as pd\nimport urllib.request\nimport requests\nimport io as i\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split","4fc5fc96":"URL='https:\/\/raw.githubusercontent.com\/AdiPersonalWorks\/Random\/master\/student_scores%20-%20student_scores.csv'","a6b2abb4":"read_url_data=requests.get(URL)","1936f75c":"data_string=read_url_data.text","58cc9643":"data_conv=i.StringIO(data_string)","bba14b9a":"data_frame=pd.read_csv(data_conv,sep=',')","f872e3cb":"data_frame","f76ed668":"#Mean is 5.012 and standard Deviation is 2.52\ndata_frame.describe()","94b134e0":"X=data_frame.iloc[:,0]\ny=data_frame.iloc[:,1]","25895399":"#Normalized Data.\nm=X.mean()\nstd=X.std()\nX=(X-m)\/std","3656b015":"#Mean is close to 2 and standard Deviation is 1 which is the desired outcome.\nX.describe()","babd690a":"#Converting dataset X and y into pandas dataframe.\nX=pd.DataFrame(X)\ny=pd.DataFrame(y)","905fd1d2":"#Data Visualisation\nsns.set_style('darkgrid')\nplt.scatter(X,y,c='green')\nplt.xlabel('Number of Hours Studied')\nplt.ylabel('Marks Obtained')\nplt.show()","6fa6f789":"#Adding a cloumn of ones to X dataset.\nones=np.ones((X.shape[0],1))\nX_new=np.hstack((ones,X))","14b1080b":"X.shape","2c6d69e0":"X_new.shape","89090cf4":"X_new","ea542ec4":"# y= variance * point + bias\ndef hypothesis(X,theta):\n    return np.dot(X,theta)\n\n# Mean Squared Error.\ndef error(X,y,theta):\n    err= 0.0\n    h=hypothesis(X,theta)\n    m=X.shape[0]\n    err = np.sum((y - h)**2)\n    return err\/m\n\ndef grad(X,y,theta):\n    m=X.shape[0]\n    h=hypothesis(X,theta)\n    grad = np.dot(X.T,(h-y))\n    return grad\/m\n\ndef grad_desc(X,y,lr=0.1,max_epochs=100):\n    n=X.shape[1]\n    theta=np.zeros((n,1))\n    error_list=[]\n    for i in range(max_epochs):\n        e=error(X,y,theta)\n        error_list.append(e)\n        g=grad(X,y,theta)\n        theta= theta - lr*g\n    return theta, error_list\n\n\n    ","49914820":"#Function for predicting the values.\ndef prediction(X,theta):\n    y_=hypothesis(X,theta)\n    return y_","7b9d80a7":"# Function to calculate the R-2 Score.\ndef r2_score(X,y,theta):\n    y_=prediction(X,theta)\n    num=np.sum((y-y_)**2)\n    den=np.sum((y-y.mean())**2)\n    score= (1-num\/den)\n    return score * 100 \n    ","9879c91e":"X_train, X_test, y_train, y_test = train_test_split(\n...     X_new, y, test_size=0.33, random_state=42)","e0ab083e":"print (X_train, y_train)\n","61063ab3":"print (X_test,y_test)","badae70e":"theta,error_list=grad_desc(X_test,y_test,lr=0.3,max_epochs=300)","6cce63a3":"# 1-Variance 2-Bias\ntheta","3411662b":"#Plotting Error\nsns.set_style('darkgrid')\nplt.plot(error_list)\nplt.xlabel('Number of iterations (epochs)')\nplt.ylabel('Loss Rate')\nplt.show","a62c5f22":"y_=prediction(X_test,theta)","d040e5dd":"# Making one Dataframe of true values and Predicted Values.\nlist1=y_[:,0]\nlist2=y_test.iloc[:,0]","7cc19529":"S={'True Values':list2,'Predicted_Values':list1}\ndf2=pd.DataFrame(data=S)","2b9910cf":"df2","33b0fc4e":"# Accuracy is 94.69 percent.\nr2_score(X_test,y_test,theta)","ae935836":"# Normalizing the hour data i.e 9.25\nHours=9.25\npoints=data_frame.iloc[:,0]\nmean=points.mean()\nstd_=points.std()\nNormalized_data=(Hours-mean)\/std_","b50cf901":"#Preparing the normalized data to give as input to the algorithm.\ntest_data=np.array([1,Normalized_data])","dc94f088":"#Predicting the marks obtained by the student if he\/she studies for 9.25 hours\npred=prediction(test_data,theta)\nprint ('Hours Studied: 9.25')\nprint ('No of marks would be obtained: {}'.format(pred))","ab0ba2e2":"theta,error_list=grad_desc(X_new,y,lr=0.1)","167b5af7":"y_p=prediction(X_new,theta)","069366ba":"sns.set_style('darkgrid')\nplt.scatter(X,y,c='red')\nplt.plot(X_new[:,1],y_p)\nplt.xlabel('Number of Hours Studied')\nplt.ylabel('Marks Obtained')\nplt.show()","ed7bebe5":"Adding one cloumn of 1's in X dataframe so as to predict the values using linear regression equation which is Predicted_score = Variance * Hours + Bias.\nBy adding column of 1's to feature dataset, we can calculate 'Bias' which will remain fix.","d8f05700":"# SPLITTING THE EXISTING DATA INTO TRAIN AND TEST DATA FOR BOTH X AND y.","470dd018":"# LOADING DATA FROM A GIVEN URL","1c26db1b":"# MAKING THE PREDICTIONS AND CALCULATING THE R2-SCORE.","1bd8ccd7":"* # DATA VISUALIZATION","1832980b":"# DATA PREPARATION\n In this, we have done mormalization of feature data (X) in order to bring mean close to 0 and standard deviation close to 1. Moreover, we have made one dataset of features (Hours) which is 'X' and one dataset of Target (Scores) which is 'y'.","3eff95cd":"# SHIKHAR SHARMA","5489066d":"# VISUALISING THE BEST FITTED LINE","613b28cc":"# CUSTOM LINEAR REGRESSION ALGORITHM IMPLEMENTATION","a3398307":"# PREDICTING THE SCORE A STUDENT WOULD OBTAINED IF HE\/SHE STUDIES FOR 9.25 HOURS."}}