{"cell_type":{"79cbfed9":"code","6d4473b8":"code","1f89b9a1":"code","802b3be1":"code","47e107f9":"code","68de5fdf":"code","124457b7":"code","e58dcad5":"code","5153f7b2":"code","d2da8659":"code","5b68749d":"code","4704a857":"code","dfda08f1":"code","9a2510e7":"code","f65b0ed4":"code","7a30df62":"code","6fb5fa6d":"code","058f37f9":"code","4df23c4e":"code","bcaead73":"code","a60905a7":"code","6a7b3fc0":"code","df429533":"code","93d9dae0":"code","6c90b9a5":"code","9fc7375a":"code","47c31d4a":"code","a84da434":"code","477c9278":"markdown","fa23de4b":"markdown","c94a96f7":"markdown","9139cb63":"markdown","ba382e6d":"markdown","cd250e2e":"markdown","57ad2cf1":"markdown","2649e449":"markdown","7e63f24f":"markdown","13cf8a1c":"markdown","99f20c77":"markdown","034f5059":"markdown","fa431a80":"markdown","7b6919a0":"markdown","bfee4236":"markdown","9284ac89":"markdown","496df5a4":"markdown","69e036c1":"markdown","de5d557f":"markdown","24b2a10b":"markdown","1cd898d5":"markdown","acc59592":"markdown","4897b21c":"markdown","86809303":"markdown","f9ee8792":"markdown","fde82426":"markdown","e9ad35d8":"markdown","f987813c":"markdown","b84f4179":"markdown","5cc9f1d1":"markdown","24799c7f":"markdown"},"source":{"79cbfed9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.graph_objects as go\nfrom plotly.offline import iplot\nfrom wordcloud import WordCloud\n%matplotlib inline\nimport missingno as msno\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6d4473b8":"# import dataset\ndataset = pd.read_csv(\"\/kaggle\/input\/students-performance-in-exams\/StudentsPerformance.csv\") ","1f89b9a1":" # first look at the data\ndataset.head()","802b3be1":"dataset.info()","47e107f9":"dataset.describe()","68de5fdf":"students = dataset.rename(\n    columns =\n    {\n        \"race\/ethnicity\":\"race\",\n        \"parental level of education\":\"parental_education\",\n        \"test preparation course\":\"course\",\n        \"math score\":\"math_score\",\n        \"reading score\":\"reading_score\",\n        \"writing score\":\"writing_score\"}).copy()\n# Create one copy of this shape for use ","124457b7":"# Control column names\nstudents.head() ","e58dcad5":"students.dtypes","5153f7b2":"control=0\nfor i,v in zip(students.isnull().any().index,students.isnull().any().values):\n    try: assert not v\n    except AssertionError: \n        print(\"There is NaN value in {} column\".format(i))\n        control=1\n    else: continue\nif control==0: print(\"There aren't any NaN values in the columns\")","d2da8659":"print(\"Numbers of values for each column: {}\".format(students.shape[0]))","5b68749d":"nanfig,nanax = plt.subplots(figsize=(10,6),tight_layout=True)\nmsno.bar(students,ax=nanax,color=sns.color_palette(\"plasma\"))\nnanax.grid(True,alpha=0.3,linestyle=\"--\",linewidth=1)\nnanax.set_title(\"Numbers of Not NaN Values by Each Columns\",fontsize=20)\nnanax.set_ylabel(\"%\",fontsize=20)\nnanax.set_xticklabels(nanax.get_xticklabels(),rotation=90,ha=\"center\",fontsize=12)\nplt.show()","4704a857":"for i in list(students.columns[:5]):\n    print(\"{} COLUMN \\n\".format(i.upper()),students[i].value_counts(),end=\"\\n\\n\",sep=\"\")","dfda08f1":"for u in students.columns:\n    if students[u].dtype==object:\n        print(\"Unique Values:\\t\",end=\"\")\n        for j in students[u].unique():\n            if list(students[u].unique()).index(j) != len(students[u].unique())-1:\n                print(j,end=\" | \")\n            else: print(j,end=\"\")\n        print(\"\\nThere are {} unique values in the {} column\".format(students[u].nunique(),u),end=\"\\n\\n\")","9a2510e7":"valfig,axfig = plt.subplots(nrows=2,ncols=3,figsize=(12,8),tight_layout=True)\nsns.countplot(students.gender,ax=axfig[0][0])\nsns.countplot(students.race,ax=axfig[0][1])\naxfig[0,1].set_xticklabels(axfig[0,1].get_xticklabels(),rotation=90,ha=\"center\")\nsns.countplot(students.parental_education,ax=axfig[0][2])\naxfig[0,2].set_xticklabels(axfig[0,2].get_xticklabels(),rotation=90,ha=\"center\")\nsns.countplot(students.lunch,ax=axfig[1][0])\nsns.countplot(students.course,ax=axfig[1][1])\ncol_list= list(students.columns[:5])\nindex=0\nfor i in range(2):\n    for j in range(3):\n        axfig[i,j].grid(True,alpha=0.3,linestyle=\"--\",linewidth=1,color=\"gray\")\n        axfig[i,j].tick_params(width=3,color=\"black\",axis=\"x\",labelsize=12)\n        try: axfig[i,j].set_title(col_list[index].title(),fontsize=20)\n        except: continue\n        axfig[i,j].set_xlabel(\"\")\n        index+=1\naxfig[1,2].set_axis_off() #.set_visible(False), get_xaxis().set_visible(False) etc.\nplt.show()","f65b0ed4":"group_list = list(students.race.unique())\nnumbers = list()\n\nfor g in group_list:\n    size = students[students.race==g].shape[0]\n    numbers.append(size)","7a30df62":"groupPie = dict(\n    values=numbers,\n    labels=group_list,\n    type=\"pie\",\n    domain=dict(x= [0,0.5]),\n    text = group_list,\n    marker = dict(line=dict(width=2,color=\"#444\")),\n    hoverinfo = \"value\",\n    textinfo=\"percent+text\",\n    hole= .2\n    )\ngroupFig = go.Figure(data=groupPie)\ngroupFig.update_layout(\n    modebar=dict(activecolor=\"#111\"),\n    legend=dict(orientation=\"v\",borderwidth=1,bordercolor=\"#444\",x=0.75),\n    paper_bgcolor=\"#d8d8d8\",\n    title=dict(text=\"Numbers and Distrubitions Of Students In Groups\",x=0.05,font=dict(size=20)),\n    hoverlabel=dict(bordercolor=\"#444\",font=dict(color=\"#fff\",size=14))\n)\niplot(groupFig)","6fb5fa6d":"groups = students.groupby(\"race\")\nmeans = groups.mean()\nmeans.columns.names = [\"mean\"]\nsorting_groups=groups.race.head(1).sort_values().unique()\nmeans","058f37f9":"math = dict(\n    type=\"bar\",\n    x=means.math_score.index,\n    y=means.math_score.values,\n    name= \"Math Score\",\n    marker=dict(line=dict(width=2,color=\"#111\")),\n    hoverinfo=\"x+name+y\"\n)\nreading = dict(\n    type=\"bar\",\n    x=means.reading_score.index,\n    y=means.reading_score.values,\n    name= \"Reading Score\",\n    marker=dict(line=dict(width=2,color=\"#111\")),\n    hoverinfo=\"x+name+y\"\n)\nwriting = dict(\n    type=\"bar\",\n    x=means.writing_score.index,\n    y=means.writing_score.values,\n    name= \"Writing Score\",\n    marker=dict(line=dict(width=2,color=\"#111\")),\n    hoverinfo=\"x+name+y\"\n)\nscoresFig=go.Figure(data=(math,reading,writing),layout=dict(barmode=\"group\"))\nscoresFig.update_layout(\n    modebar=dict(activecolor=\"#505050\"),\n    plot_bgcolor=\"#505050\",\n    legend = dict(bordercolor=\"#505050\",borderwidth=1,orientation=\"h\"),\n    hoverlabel=dict(bordercolor=\"#505050\",font=dict(color=\"#fff\")),\n    title=dict(text=\"Mean Of Exams By Groups\",font=dict(size=20)),\n    clickmode=\"event\",\n    hovermode=\"x\"\n)\nscoresFig.update_xaxes(\n    ticks=\"outside\",\n    ticklen=3,\n    tickwidth=3,\n    tickcolor=\"black\",\n    showticklabels=True,\n    tickangle=0,\n    tickfont=dict(color=\"black\",size=13),\n    showgrid=False,\n    zeroline=False)\nscoresFig.update_yaxes(\n    zeroline=False,\n    showgrid=True,\n    linewidth=5,\n    linecolor=\"#505050\",\n    mirror=True,\n    title_text=\"Scores\",\n    gridwidth=1.25,\n    gridcolor=\"#fff\",\n    range=(50,75),\n    tickfont={\"color\":\"#505050\",\"size\":13}\n    )\nscoresFig.show() # or iplot(scoresFig)\n","4df23c4e":"print(\"AVERAGES OF PERCENTAGES\\n\")\nsuccessav = list()\nfor i in reversed(sorting_groups): \n    print(\"{}: %{:.2f}\".format(i.upper(),means.loc[i].mean()))\n    successav.append(means.loc[i].mean())","bcaead73":"successGroup = list(reversed(sorting_groups))\nfigline= plt.figure(figsize=(12,6),tight_layout=True)\naxline = figline.add_axes([1,1,1,1])\naxline.plot(successGroup,successav,color=\"#CB2906\",linewidth=3.5,marker=\"o\",markersize=8,markerfacecolor=\"#142D8A\",markeredgecolor=\"#CB2906\")\naxline.grid(True,linestyle=\"--\",alpha=0.4,color=\"gray\")\naxline.set_yticks(np.arange(min(successav),max(successav)+2,2))\naxline.set_ylabel(\"Averages of Percentages\",fontsize=14)\naxline.tick_params(width=5,labelsize=11,color=\"#142D8A\")\n\nunivariablemath = figline.add_axes([1.8,1.7,0.2,0.3])\nunivariableread = figline.add_axes([1.59,1.7,0.2,0.3])\nunivariablewrite = figline.add_axes([1.38,1.7,0.2,0.3])\nunivariablemath.get_yaxis().set_visible(False)\nunivariableread.get_yaxis().set_visible(False)\nunivariablewrite.get_yaxis().set_visible(False)\n\nunivariablemath.plot(means.index,means.math_score.sort_values(ascending=False).values,color=\"#0C948E\",linewidth=2.5,marker=\"o\",markersize=5,markerfacecolor=\"#CB2906\")\nunivariablemath.set_xticklabels(list(reversed(means.index)),rotation=90)\nunivariablemath.grid(True,color=\"gray\",linestyle=\"--\",alpha=0.4)\nunivariablemath.set_title(\"math\")\nunivariablemath.tick_params(width=3,color=\"#CB2906\")\nunivariableread.plot(means.index,means.reading_score.sort_values(ascending=False).values,color=\"#3421A8\",linewidth=2.5,marker=\"o\",markersize=5,markerfacecolor=\"#CB2906\")\nunivariableread.set_xticklabels(list(reversed(means.index)),rotation=90)\nunivariableread.grid(True,color=\"gray\",linestyle=\"--\",alpha=0.4)\nunivariableread.set_title(\"reading\")\nunivariableread.tick_params(width=3,color=\"#CB2906\")\nunivariablewrite.plot(means.index,means.writing_score.sort_values(ascending=False).values,color=\"#8BDF12\",linewidth=2.5,marker=\"o\",markersize=5,markerfacecolor=\"#CB2906\")\nunivariablewrite.grid(True,color=\"gray\",linestyle=\"--\",alpha=0.4)\nunivariablewrite.set_title(\"writing\")\nunivariablewrite.tick_params(width=3,color=\"#CB2906\")\nunivariablewrite.set_xticklabels(list(reversed(means.index)),rotation=90)\nplt.show()","a60905a7":"percents= list()\n\nframe = groups.lunch.value_counts().to_frame()\nfor i in sorting_groups:\n    size = frame.loc[i].sum().iloc[0]\n    percent = list(percents.append(j) for j in list(frame.loc[i].lunch.iloc[v]\/size*100 for v in range(2)))\n    \npercentlunch = groups.lunch.value_counts().to_frame()\npercentlunch[\"percents\"] = percents\nfunc = lambda x: float(\"{:.2f}\".format(x))\npercentlunch[\"percents\"] = percentlunch[\"percents\"].apply(func)\npercentlunch.unstack(level=0).percents","6a7b3fc0":"lunchbar1 = dict(x = percentlunch.unstack().index,\n                 y = percentlunch.unstack().percents.T.iloc[1].values,\n                 type=\"bar\",\n                 name= \"Standart\",\n                 marker = dict(color=\"#8B0B53\",line=dict(color=\"black\",width=2)))\nlunchbar2= dict(x = percentlunch.unstack().index,\n                 y = percentlunch.unstack().percents.T.iloc[0].values,\n                 type=\"bar\",\n                 name= \"Free\/Reduced\",\n               marker = dict(color=\"#F3BA13\",line=dict(color=\"black\",width=2)))\n\nlunchFig = go.Figure(data = (lunchbar2,lunchbar1),layout=dict(barmode=\"relative\"))\nlunchFig.update_layout(\n    plot_bgcolor = \"#143274\",\n    hovermode=\"x\",\n    legend=dict(orientation=\"h\",bgcolor=\"#143274\",font=dict(color=\"#d8d8d8\"),borderwidth=2,bordercolor=\"black\"),\n    hoverlabel=dict(bordercolor=\"black\"),\n    title=dict(text=\"Percentages of Lunch Values by Groups\",font=dict(size=20)),\n    modebar=dict(activecolor=\"#143274\")\n)\nlunchFig.update_yaxes(\n    range=(25,105),\n    tickfont=dict(color=\"black\",size=12),\n    title=dict(text=\"%\",font=dict(size=14,color=\"black\")),\n    gridcolor=\"#d8d8d8\",\n    linewidth=2,\n    linecolor=\"black\",\n    mirror=True)\nlunchFig.update_xaxes(\n    zeroline=False,\n    tickfont=dict(color=\"black\",size=12),\n    title=dict(text=\"Groups\",font=dict(size=14,color=\"black\")),\n    linewidth=2,\n    linecolor=\"black\",\n    mirror=True)\nlunchFig.show()","df429533":"genderPer = list()\nfor g in sorting_groups:\n    serie = students.set_index(\"race\").loc[g].gender.value_counts()\n    size = serie.sum()\n    for i in range(serie.size):\n        per = serie.iloc[i]\/size * 100\n        genderPer.append(float(\"{:.2f}\".format(per)))\ngender_percent = groups.gender.value_counts().to_frame()\ngender_percent[\"gender_percent\"] = genderPer\ngender_percent.drop(\"gender\",axis=1,inplace=True)\ngraphgen = gender_percent.unstack().gender_percent\ngraphgen","93d9dae0":"genderFig = go.Figure(data = (dict(x = graphgen.index,\n                                y =graphgen.male,\n                                type=\"bar\",name=\"male\",\n                                text = \"%\",\n                                hoverinfo=\"y+text+name\",\n                                marker=dict(color=\"#206C64\",line=dict(color=\"black\",width=2))\n                                ),\n                            \n                              dict(x = graphgen.index,\n                                y =graphgen.female,\n                                type=\"bar\",name=\"female\",\n                                text = \"%\",\n                                hoverinfo=\"y+text+name\",\n                                marker=dict(color=\"#AE6733\",line=dict(color=\"black\",width=2)))\n                            )\n                     )\ngenderFig.update_layout(\n    title=dict(text=\"Percentages of Genders by Groups\",font=dict(size=20)),\n    plot_bgcolor=\"#A9323B\",\n    hoverlabel=dict(font=dict(color=\"#fff\"),bordercolor=\"black\"),\n    hovermode=\"x\",\n    modebar=dict(activecolor=\"#A9323B\"),\n    barmode=\"group\",\n    legend=dict(orientation=\"h\",y=1.1,x=0.84)\n)\ngenderFig.update_yaxes(\n    zeroline=False,\n    gridcolor=\"gray\",\n    gridwidth=1,\n    linecolor=\"black\",\n    linewidth=3,\n    mirror=True,\n    title_text=\"%\",\n    tickfont=dict(size=12,color=\"gray\"),\n    titlefont=dict(size=14,color=\"black\")\n)\ngenderFig.update_xaxes(\n    linecolor=\"black\",\n    linewidth=3,\n    mirror=True,\n    title=dict(text=\"Groups\",font=dict(size=14,color=\"black\")),\n    tickfont=dict(size=12,color=\"gray\")\n)\ngenderFig.show()","6c90b9a5":"none,completed=list(),list()\nfor i in sorting_groups:\n    percnone = groups.course.value_counts().to_frame().loc[i].course.iloc[0] \/ groups.course.value_counts().to_frame().loc[i].course.sum() * 100\n    none.append(percnone)\n    perccomp = groups.course.value_counts().to_frame().loc[i].course.iloc[1] \/ groups.course.value_counts().to_frame().loc[i].course.sum() * 100\n    completed.append(perccomp)","9fc7375a":"nonebar = dict(\n    x = sorting_groups,\n    y = none,\n    type=\"bar\",\n    marker = dict(color=\"#B13E00\",line=dict(width=2,color=\"black\")),\n    name=\"None\",\n    text = \"%\",\n    hoverinfo = \"y+text+name\")\ncompletedbar = dict(\n    x = sorting_groups,\n    y = completed,\n    type=\"bar\",\n    marker = dict(color=\"#B18400\",line=dict(width=2,color=\"black\")),\n    name=\"Completed\",\n    text = \"%\",\n    hoverinfo = \"y+text+name\")\n\ncourseFig = go.Figure(data=(nonebar,completedbar))\ncourseFig.update_yaxes(\n    linewidth=3,\n    linecolor=\"black\",\n    mirror=True,\n    range=(25,80),\n    gridcolor=\"black\",\n    title=dict(text=\"%\",font=dict(color=\"black\",size=14)),\n    tickfont=dict(color=\"black\",size=12)\n)\ncourseFig.update_xaxes(\n    linewidth=3,\n    linecolor=\"black\",\n    mirror=True,\n    tickfont=dict(color=\"black\",size=12))\ncourseFig.update_layout(\n    plot_bgcolor=\"#890059\",\n    modebar=dict(activecolor=\"#890059\"),\n    hovermode=\"x\",\n    hoverlabel=dict(bordercolor=\"black\",font=dict(color=\"#fff\")),\n    title=dict(text=\"Percentages of Course Completion by Groups\"),font=dict(size=16),\n    legend=dict(bordercolor=\"black\",borderwidth=2,orientation=\"h\",bgcolor=\"#890059\",font=dict(color=\"#000\",size=12)))\ncourseFig.show()","47c31d4a":"parental,parentalval = list(),list()\n\nfor i in sorting_groups:\n    val = groups.parental_education.value_counts().loc[i]\n    size = val.sum()\n    for j in range(val.index.size): \n        parentalval.append(val.iloc[j]\/size*100)\n        parental.append(val.index[j])\n        \nframelist=list()\nfr = pd.DataFrame(parental,parentalval)\nfor v in fr[0].unique():\n    frame = fr.groupby(0).get_group(v)\n    frame[\"groups\"] = sorting_groups\n    framelist.append(frame)\nfor i in framelist:\n    i.reset_index(inplace=True)","a84da434":"tracelist=list()\ncolorlist = [\"#97042C\",\"#A78205\",\"#1A1374\",\"#409304\",\"#A32812\",\"#0B6758\"]\nfor number,name,color in zip(range(len(framelist)),fr[0].unique(),colorlist):\n    trace = dict(\n        x = framelist[number][\"groups\"],\n        y = framelist[number][\"index\"],\n        type=\"bar\",\n        hoverinfo=\"y+text\",\n        name = name,\n        text = framelist[number][0],\n        marker = dict(color=color,line=dict(width=2,color=\"black\")))\n    tracelist.append(trace)\n\nfigPar = go.Figure(data=tracelist,layout=dict(barmode=\"group\"))\nfigPar.update_layout(\n    plot_bgcolor = \"#2B1319\",\n    modebar=dict(activecolor=\"#2B1319\"),\n    legend=dict(orientation=\"h\",bgcolor=\"#2B1319\",font=dict(color=\"#fff\"),borderwidth=2,bordercolor=\"black\"),\n    title=dict(text=\"Percentages of Parental Educations by Groups\",font=dict(size=20)),\n    clickmode=\"event+select\"\n)\nfigPar.update_yaxes(\n    tickfont=dict(color=\"black\",size=12),\n    title=dict(text=\"%\",font=dict(size=14,color=\"black\")),\n    linewidth=3,\n    linecolor=\"black\",\n    mirror=True,\n    zeroline=False)\nfigPar.update_xaxes(\n    tickfont=dict(color=\"black\",size=12),\n    linewidth=3,\n    linecolor=\"black\",\n    mirror=True\n)\nfigPar.show()","477c9278":"<a id=\"1\"> <\/a>\n# DATA OVERVIEW","fa23de4b":"<a id=\"1c\"><\/a>\n## Fix Column Names\n\n<font style=\"font-size:16px\" >We should do this process because there are spaces between words in the column names and there is a special character in one column name.<\/font>","c94a96f7":"<a id=\"1d\"><\/a>\n## Look at Data Types","9139cb63":"<a id=\"2c\"><\/a>\n## Averages of Percentages","ba382e6d":"<font style=\"font-size:16px\">As you can be see, column names changed. This shape is usefull than before. <\/font>\n\n<font style=\"font-size:16px\"> dataset[\"parental level of education\"] or students.parental_education? You decide this. <\/font>","cd250e2e":"<a id=\"1a\"><\/a>","57ad2cf1":"## Import Data","2649e449":"<a id=\"1b\"><\/a>\n## First Look at Data","7e63f24f":"<br><br><font style=\"font-size:16px;font-weight:bold;letter-spacing:0.5px;\">To be continued, thank you for upvotes :)<\/font>","13cf8a1c":"<a id=\"2b\"><\/a>\n## Mean Of Exams By Groups","99f20c77":"<a id=\"1e\"><\/a>\n## Control of Missing or Incorrect Values","034f5059":"<a id=\"1h\"><\/a>\n## Categorical Values","fa431a80":"<a id=\"2d\"><\/a>\n## Percentages of Lunch Values by Groups","7b6919a0":"<font style=\"font-size:16px\">Apart from the most successful group, we can see that the course completion rate does not affect success much.<\/font>","bfee4236":"<a id=\"2\"><\/a>\n# ANALYSIS BY GROUPS","9284ac89":"<a id=\"2e\"><\/a>\n## Percentages of Genders by Groups","496df5a4":"# <font style=\"font-size:50px\"> INTRODUCTION <\/font>\n\n<font style=\"font-size:16px; letter-spacing:0.5px;\">Welcome! This notebook contains some exam scores of 1000 students. This data has some extra features. We will make this data meaningful with this features.<\/font>\n\n## Contents\n\n1. <a style=\"font-size:16px;font-weight:bold;\" href=\"#1\">DATA OVERVIEW<\/a>\n    * <a href=\"#1a\">Import Data<\/a>\n    * <a href=\"#1b\">First Look at Data<\/a>\n    * <a href=\"#1c\">Fix Column Names<\/a>\n    * <a href=\"#1d\">Look at Data Types<\/a>\n    * <a href=\"#1e\">Control of Missing or Incorrect Values<\/a>\n    * <a href=\"#1f\">Value Counts<\/a>\n    * <a href=\"#1g\">Unique Values<\/a>\n    * <a href=\"#1h\">Categorical Values<\/a>\n    \n1. <a style=\"font-size:16px;font-weight:bold;\" href=\"#2\">ANALYSIS BY GROUPS<\/a>\n    * <a href=\"#2a\">Numbers and Distrubitions Of Students In Groups\n    * <a href=\"#2b\">Mean Of Exams By Groups\n    * <a href=\"#2c\">Averages of Percentages\n    * <a href=\"#2d\">Percentages of Lunch Values by Groups\n    * <a href=\"#2e\">Percentages of Genders by Groups\n    * <a href=\"#2f\">Percentages of Course Completions by Groups\n    * <a href=\"#2g\">Percentages of Parental Educations by Groups\n","69e036c1":"<a id=\"2g\"><\/a>\n## Percentages of Parental Educations by Groups","de5d557f":"<font style=\"font-size:16px\">There are 2 data type in this dataset:\n\n1. **object**: \n    <ul style=\"list-style: square\">\n    <li>gender<\/li>\n    <li>race<\/li>\n    <li>parental_education <\/li>\n    <li>lunch<\/li>\n    <li>course<\/li>\n    <\/ul> \n1. **int64**: \n     <ul style=\"list-style: square\">\n    <li>math_score<\/li>\n    <li>reading_score<\/li>\n    <li>writing_score<\/li>\n    <\/ul> \n    \n","24b2a10b":"<font style=\"font-size:16px\">Although it is not exactly like that, we can say that the <a style=\"font-weight:600;\" href=\"#a\">success ranking<\/a> is higher in groups where gender percentages are close to each other.<\/font>","1cd898d5":"<font style=\"font-size:16px\"> There doesn't seem a significant relationship between <a href=\"#success\" style=\"font-weight:600\">success ranking<\/a> and parental educations. Apart of group D, just some high school percentages in groups are opposite proportional with <a href=\"#success\" style=\"font-weight:600\">success ranking<\/a>. <\/font>","acc59592":"<font style=\"font-size:16px\">As you can see, every exam scores of group E is higher than others. So we can say,<mark id=\"success\" style=\"background: darkorange;\"> the most successful  group is E. <\/mark>\n\n<b><u>Success Ranking: <\/u><\/b>\n1. Group E\n1. Group D\n1. Group C\n1. Group B\n1. Group A\n\n\nAlso, if we look to <a style=\"font-weight:600;\" href=\"#crowd\">the percentages of crowd<\/a>, we can say success ranking don't proportional with crowd <\/font>","4897b21c":"<a id=\"2f\"><\/a>\n## Percentages of Course Completions by Groups","86809303":"<font style=\"font-size:16px\" >Percent of standard lunch type is the least in group A but percent of standard lunch type is the highest in group E. If we look <a style=\"font-weight:600;\" href=\"#a\">these results<\/a>, we can say ratio of success is linearly proportional with standard lunch type percent.<\/font>","f9ee8792":"<a id=\"1f\"><\/a>\n## Value Counts","fde82426":"<font style=\"font-size:16px\">As can see above, numbers of the students in group C is the highest. So <mark style=\"background: darkorange;\">the most crowd group is C.<\/mark><\/font>","e9ad35d8":"<font style=\"font-size:16px\" > As can be see, there aren't any incorrect values in the columns <\/font>","f987813c":"<a id=\"crowd\"><\/a>","b84f4179":"<a id=\"2a\"><\/a>\n## Numbers and Distrubitions Of Students In Groups","5cc9f1d1":"<a id=\"1g\"><\/a>\n## Unique Values","24799c7f":"<a id=\"a\"><\/a>"}}