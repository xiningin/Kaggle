{"cell_type":{"0bebee95":"code","7831ebc5":"code","2d7ba38e":"code","3845dce4":"code","0de8e6ad":"code","40533a60":"code","28f469f0":"code","1f8a8985":"code","76370dba":"code","4d9aaafa":"code","fe0e9a38":"code","25d90014":"code","fc64d328":"code","82d6a32b":"code","0862d78a":"code","724ac713":"code","32445e4c":"code","f6de5792":"code","faf240f5":"code","58d76f8a":"code","84cfabdf":"code","dea0ddfc":"code","f2a888fe":"code","50d905eb":"markdown","1edd48de":"markdown","a6f506ac":"markdown","2810e537":"markdown","14901bcc":"markdown","949d9cfd":"markdown","18689188":"markdown","e6153c0f":"markdown"},"source":{"0bebee95":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","7831ebc5":"data=pd.read_csv(\"..\/input\/train.csv\")\ndata1=pd.read_csv(\"..\/input\/test.csv\")\nprint(data.shape)\nprint(data1.shape)","2d7ba38e":"#check missing vales\nmissing = data.isnull().sum()\nmissing = missing[missing > 0]\nmissing.sort_values(inplace=True)\nmissing.plot.bar()","3845dce4":"data.drop(['MiscFeature','PoolQC','Fence','FireplaceQu','Alley','LotFrontage'],axis=1,inplace=True)\nprint(data.shape)","0de8e6ad":"print(\"important variables\")\ncorr = data.corr()\ncorr.sort_values([\"SalePrice\"], ascending = False, inplace = True)\nprint(corr.SalePrice)","40533a60":"#select important variables\ntrain=data[['SalePrice','OverallQual','GrLivArea','GarageCars','GarageArea','TotalBsmtSF','1stFlrSF','FullBath','TotRmsAbvGrd','YearBuilt','YearRemodAdd','GarageYrBlt','MasVnrArea','Fireplaces','BsmtFinSF1','WoodDeckSF','2ndFlrSF','OpenPorchSF','HalfBath','LotArea','BsmtFullBath','BsmtUnfSF','BedroomAbvGr','ScreenPorch','PoolArea','MoSold','3SsnPorch','BsmtFinSF2','BsmtHalfBath','MiscVal','Id','LowQualFinSF','YrSold','OverallCond','MSSubClass','EnclosedPorch','KitchenAbvGr']]\nprint(train.shape)","28f469f0":"#check missing values for important variables\ntrain.isnull().sum()","1f8a8985":"#print varible type\nprint(train['GarageYrBlt'].dtype)\nprint(train['MasVnrArea'].dtype)","76370dba":"#replace missing values\ntrain['GarageYrBlt']=train['GarageYrBlt'].fillna(train['GarageYrBlt'].mode()[0])\ntrain['MasVnrArea']=train['MasVnrArea'].fillna(train['MasVnrArea'].mode()[0])\ntrain.isnull().sum()   ","4d9aaafa":"#check categorical variable (want to dummy code)\ncategorical_features =train.select_dtypes(include=['object']).columns\ncategorical_features","fe0e9a38":"#check distribution of sales price\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.figure(figsize=(12,8))\nsns.distplot(train['SalePrice'], color='b')\nplt.title('Distribution of Sales Price', fontsize=18)\nplt.show()","25d90014":"#log transformance\nfrom scipy.stats import norm\nfrom scipy import stats\ntrain['SalePrice'] = np.log(train['SalePrice'])\ntrain_y=sns.distplot(train['SalePrice'],fit=norm);\nfig = plt.figure()\nres = stats.probplot(train['SalePrice'], plot=plt)","fc64d328":"#check correlation\ncorrmat =train.corr()\nf, ax = plt.subplots(figsize=(55, 9))\nsns.heatmap(corrmat, vmax=.8, square=True,annot=True,cmap='YlOrRd',linewidths=0.2,annot_kws={'size':10})\nplt.title(\"Correlation\",fontsize=20)","82d6a32b":"#detect outliers\nfrom sklearn import preprocessing\nnormalized_data = preprocessing.StandardScaler().fit_transform(train)\noutliers_rows, outliers_columns = np.where(np.abs(normalized_data)>5)#get more than 5 standered deviation\nprint (outliers_rows)# outliers  rows","0862d78a":"#remove outliers\ndata1.drop(data1.index[[5,48,51,53,55,58,70,88,113,115,129,153,159,170,182,185,197,198,205,237,249,258,263,267,271,280,313,322,335,346,359,406,426,451,470,495,496,523,542,583,597,625,635,691,705,706,726,729,744,747,764,808,809,810,854,883,889,907,924,941,954,1009,1031,1068,1080,1161,1169,1170,1173,1181,1182,1197,1230,1253,1298,1299,1328,1346,1369,1386,1418,1423,1437,1440,1458]])","724ac713":"#select predictor variable\ntrain_x=train[['OverallQual','GrLivArea','GarageCars','GarageArea','TotalBsmtSF','1stFlrSF','FullBath','TotRmsAbvGrd','YearBuilt','YearRemodAdd','GarageYrBlt','MasVnrArea','Fireplaces','BsmtFinSF1','WoodDeckSF','2ndFlrSF','OpenPorchSF','HalfBath','LotArea','BsmtFullBath','BsmtUnfSF','BedroomAbvGr','ScreenPorch','PoolArea','MoSold','3SsnPorch','BsmtFinSF2','BsmtHalfBath','MiscVal','Id','LowQualFinSF','YrSold','OverallCond','MSSubClass','EnclosedPorch','KitchenAbvGr']]\nprint(train_x.shape)\n#select response variable\ntrain_y=(train['SalePrice'])","32445e4c":"#select variables from test dataset\ntest_x=data1[['OverallQual','GrLivArea','GarageCars','GarageArea','TotalBsmtSF','1stFlrSF','FullBath','TotRmsAbvGrd','YearBuilt','YearRemodAdd','GarageYrBlt','MasVnrArea','Fireplaces','BsmtFinSF1','WoodDeckSF','2ndFlrSF','OpenPorchSF','HalfBath','LotArea','BsmtFullBath','BsmtUnfSF','BedroomAbvGr','ScreenPorch','PoolArea','MoSold','3SsnPorch','BsmtFinSF2','BsmtHalfBath','MiscVal','Id','LowQualFinSF','YrSold','OverallCond','MSSubClass','EnclosedPorch','KitchenAbvGr']]\nprint(test_x.shape)\ntest_x.isnull().sum()","f6de5792":"#Replace outliers for testset\ntest_x['GarageCars']=test_x['GarageCars'].fillna(test_x['GarageCars'].mode()[0])\ntest_x['GarageArea']=test_x['GarageArea'].fillna(test_x['GarageArea'].mode()[0])\ntest_x['TotalBsmtSF']=test_x['TotalBsmtSF'].fillna(test_x['TotalBsmtSF'].mode()[0])\ntest_x['GarageYrBlt']=test_x['GarageYrBlt'].fillna(test_x['GarageYrBlt'].mode()[0])\ntest_x['MasVnrArea']=test_x['MasVnrArea'].fillna(test_x['MasVnrArea'].mode()[0])\ntest_x['BsmtFinSF1']=test_x['BsmtFinSF1'].fillna(test_x['BsmtFinSF1'].mode()[0])\ntest_x['BsmtUnfSF']=test_x['BsmtUnfSF'].fillna(test_x['BsmtUnfSF'].mode()[0])\ntest_x['BsmtFinSF2']=test_x['BsmtFinSF2'].fillna(test_x['BsmtFinSF2'].mode()[0])\ntest_x['BsmtHalfBath']=test_x['BsmtHalfBath'].fillna(test_x['BsmtHalfBath'].mode()[0])\ntest_x['BsmtFullBath']=test_x['BsmtFullBath'].fillna(test_x['BsmtFullBath'].mode()[0])\ntest_x.isnull().sum() ","faf240f5":"# Import the model\nfrom sklearn.ensemble import RandomForestRegressor\n# Instantiate model with 1000 decision trees\nrf = RandomForestRegressor(n_estimators = 1000, random_state = 42)\n# Train the model on training data\nrf.fit(train_x,train_y)","58d76f8a":"#prediction and get results\noutput = rf.predict(test_x)\nprint(output)","84cfabdf":"#print actual values \noutput = np.exp(output)\nprint(output)","dea0ddfc":"# define the data frame for the results\nsaleprice = pd.DataFrame(output, columns=['SalePrice'])\nresults = pd.concat([data1['Id'],saleprice['SalePrice']],axis=1)\nresults.head()","f2a888fe":"# and write to output\nresults.to_csv('housepricing_submission.csv', index = False)","50d905eb":"As there are 75 variables,select only varables that relate to the target(salesprice)","1edd48de":"\nSelect featuers and lable from trainset.","a6f506ac":"This is a simplest method. Instead of this, can use PCA or ONESVM(machine learning algorithm) to detect outliers.","2810e537":"remove variables that have high missing values(not affect for the analysis)","14901bcc":"Random forest for regression","949d9cfd":"No categorical variable.","18689188":"There is a multicolinearity between variables. So linear regression is not applicable. Therfore, Shrinkage methods(Ridge, Lasso or Elasticnet ) can be applied and machine learning concepts like random forest, boosting for linear regression (response variable is continuous) can be used for advance analysis.","e6153c0f":"According to graph,distribution of SalePrice is not normal. So transform sale as log of saleprice."}}