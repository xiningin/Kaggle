{"cell_type":{"4a16bd92":"code","242a48c4":"code","6523a125":"code","703d2ac8":"code","7d1b8081":"code","e687c54d":"code","ff725329":"code","eac114ce":"markdown","b1f58eb4":"markdown","2e047fc0":"markdown","1ee9f006":"markdown"},"source":{"4a16bd92":"import re, math, os, cv2, random\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import KFold","242a48c4":"#setting seeds for reproducability\nSEED = 3141\n\ndef seed_everything(seed):\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n    tf.random.set_seed(seed)\n\nseed_everything(SEED) ","6523a125":"def _bytes_feature(value):\n    #Returns a bytes_list from a string \/ byte.\n    if isinstance(value, type(tf.constant(0))):\n        value = value.numpy() # BytesList won't unpack a string from an EagerTensor.\n    return tf.train.Feature(bytes_list=tf.train.BytesList(value=[value]))\n\ndef _float_feature(value):\n    #Returns a float_list from a float \/ double.\n    return tf.train.Feature(float_list=tf.train.FloatList(value=[value]))\n\ndef _int64_feature(value):\n    #Returns an int64_list from a bool \/ enum \/ int \/ uint.\n    return tf.train.Feature(int64_list=tf.train.Int64List(value=[value]))","703d2ac8":"def serialize_example(image, image_name):\n    feature = {\n      'image': _bytes_feature(image),\n      'image_id': _bytes_feature(image_name),\n      }\n    example_proto = tf.train.Example(features=tf.train.Features(feature=feature))\n    return example_proto.SerializeToString()","7d1b8081":"IMG_SIZE = 512\nN_FILES = 30 #number of TFrecords created\nHEIGHT, WIDTH = (512, 512)\nIMG_QUALITY = 100\nIMGS = []\nPATH = '..\/input\/cartoon-faces-googles-cartoon-set\/cartoonset100k_jpg'\n\nfor fold in os.listdir(PATH):\n    IMGS+=[[fold, x] for x in os.listdir(PATH + \"\/\" + fold)]\n    \nprint(\"Number of Images: {}\".format(len(IMGS)))\n\n#creating data_frame with image names\ntrain_df = pd.DataFrame({'img_array': IMGS})\ntrain_df[['folder','image_id']] = pd.DataFrame(train_df.img_array.tolist(), index=train_df.index)\ntrain_df = train_df.drop(\"img_array\", 1)\ntrain_df.head(5)","e687c54d":"folds = KFold(n_splits=N_FILES, shuffle=True, random_state=SEED)\ntrain_df['file']=-1\n\nfor fold_n, (train_idx, val_idx) in enumerate(folds.split(train_df)):\n    print('File: %s has %s samples' % (fold_n+1, len(val_idx)))\n    train_df['file'].loc[val_idx] = fold_n","ff725329":"for tfrec_num in range(N_FILES):\n    print('\\nWriting TFRecord %i of %i...'%(tfrec_num, N_FILES))\n    samples = train_df[train_df['file'] == tfrec_num]\n    n_samples = len(samples)\n    print(f'{n_samples} samples')\n    with tf.io.TFRecordWriter('FlickrFaces%.2i-%i.tfrec'%(tfrec_num, n_samples)) as writer:\n        for row in samples.itertuples():\n            img_path = PATH + \"\/\" + row.folder + \"\/\" + row.image_id\n            try:\n                img = cv2.imread(img_path)\n                img = cv2.resize(img, (HEIGHT, WIDTH))\n                img = cv2.imencode('.jpg', img, (cv2.IMWRITE_JPEG_QUALITY, IMG_QUALITY))[1].tostring()\n            except:\n                print('Error: {} not added'.format(row.folder + \"\/\" + row.image_id))\n                continue\n            \n            example = serialize_example(img, str.encode(row.folder + \"\/\" + row.image_id))\n            writer.write(example)","eac114ce":"Note: Keep track of \"\/\"s here as the file input needs to be correct for the image to be serialized","b1f58eb4":"### Cartoon Faces TFrecords","2e047fc0":"### TFrecord Functions","1ee9f006":"### Notes\n\nThe following notebook is used to create TFrecords for the Cartoon Faces Dataset. I want to do this so that I can train a CycleGAN on TPU's with real faces and cartoon faces."}}