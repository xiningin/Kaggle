{"cell_type":{"eb47e80f":"code","a069b12c":"code","12eed53b":"code","6f85d728":"code","41ca976c":"code","b76afdae":"code","8b6a24b7":"code","c5ed4c94":"code","5deaa838":"code","dcab7a86":"code","374054ea":"code","859c71a9":"markdown","7583a3de":"markdown","08a2feb5":"markdown","be5b1b42":"markdown","3b472b17":"markdown","b006c11b":"markdown","e3fcd97e":"markdown","a95d1b83":"markdown","7fc91380":"markdown","08919f86":"markdown","3a23ef49":"markdown"},"source":{"eb47e80f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a069b12c":"# First let's load the data.\nimport pandas as pd\ndf = pd.read_csv('..\/input\/drug-classification\/drug200.csv')\ndf","12eed53b":"df.isna().sum()","6f85d728":"df.info()","41ca976c":"# Droping the target variable\nx = df.drop('Drug', axis=1) \n\n# save target variable as y \ny = df['Drug']","b76afdae":"x","8b6a24b7":"sex = pd.get_dummies(x.Sex, drop_first = True)\nx['Sex'] = sex\nx","c5ed4c94":"# Import label encoder \nfrom sklearn import preprocessing \n  \n# label_encoder object knows how to understand word labels. \nlabel_encoder = preprocessing.LabelEncoder() \n  \n# Encode labels in column 'species'. \nx['BP']= label_encoder.fit_transform(x['BP'])\n \nx['Cholesterol']= label_encoder.fit_transform(df['Cholesterol'])\n\nx","5deaa838":"#import modules\nfrom numpy import mean\nfrom numpy import std\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import RepeatedStratifiedKFold\nfrom sklearn.neighbors import KNeighborsClassifier\n\n# define and configure the model\nmodel = KNeighborsClassifier()\n\n# evaluate the model \ncv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=1)\nn_scores = cross_val_score(model, x, y, scoring='accuracy', cv=cv, n_jobs=-1, error_score='raise')\n\n# report model performance\nprint('Accuracy: %.3f (%.3f)' % (mean(n_scores), std(n_scores)))","dcab7a86":"#import modules\nfrom numpy import mean\nfrom numpy import std\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import RepeatedStratifiedKFold\nfrom sklearn.svm import SVC\n\n# define and configure the model\nmodel = SVC()\n\n# evaluate the model \ncv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=1)\nn_scores = cross_val_score(model, x, y, scoring='accuracy', cv=cv, n_jobs=-1, error_score='raise')\n\n# report model performance\nprint('Accuracy: %.3f (%.3f)' % (mean(n_scores), std(n_scores)))","374054ea":"#import modules\nfrom numpy import mean\nfrom numpy import std\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import RepeatedStratifiedKFold\nfrom sklearn.ensemble import RandomForestClassifier\n\n# define and configure the model\nmodel = RandomForestClassifier()\n\n# evaluate the model \ncv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=1)\nn_scores = cross_val_score(model, x, y, scoring='accuracy', cv=cv, n_jobs=-1, error_score='raise')\n\n# report model performance\nprint('Accuracy: %.3f (%.3f)' % (mean(n_scores), std(n_scores)))","859c71a9":"**OMG \ud83d\ude35**\n\n#### **We got 99% accuracy** by using random forest as a classifier. \n\n**PLEASE UPVOTE MY NOTEBOOK IF IT HELPED YOU \ud83d\ude0a\ud83d\ude0a**","7583a3de":"There are no null values so we don't have to worry about it. \ud83d\ude00\n\nNow let's check the information about the data features that we have.","08a2feb5":"Wooh!! It's a small dataset having 200 rows and 6 columns, where Drug column is our target variable.\n\nLet's check if there are any null values.","be5b1b42":"Yeeh!! Now our data is ready for modelling. \ud83d\ude04\n","3b472b17":"Let's split data into into the feature variable and target variable","b006c11b":"#### SVM","e3fcd97e":"**Now let's one-ot the sex feature and i'll use drop_first as it's parameter so that we just have one column where men are replaced by 1 and women by 0**","a95d1b83":"### Random Forest Classifier","7fc91380":"**In this notebook we're going  to predict the outcome of the drugs that might be accurate for the patient.**\n\nLet's begin\n","08919f86":"Let's use Label-Encoding to the BP and Cholesterol features. \n**Label encoding** convert the data in machine readable form,and it assigns a unique number(starting from 0) to each class of data.","3a23ef49":"### Modelling\n\nWe'll use following models and then evaluate them to find which model works well:\n\nKNN\nSVM\nRandom Fores\n\n#### KNN\n"}}