{"cell_type":{"28e4943c":"code","1544ca94":"code","7e98d080":"code","dd90c25c":"code","85d47aa7":"code","98da4553":"code","ae5ff7af":"code","beceead5":"code","0d39f428":"code","bdc2f686":"code","9668aa79":"code","a65e6db8":"code","7047ae92":"markdown","24078bed":"markdown","eb5bc5d2":"markdown"},"source":{"28e4943c":"#Global calls and variables\n\nimport requests\nimport json\nimport pandas as pd\n\nall_countries = [{\"country\":\"Afghanistan\"},{\"country\":\"Albania\"},{\"country\":\"Algeria\"},{\"country\":\"Angola\"},\n                 {\"country\":\"Argentina\"},{\"country\":\"Armenia\"},{\"country\":\"Australia\"},{\"country\":\"Austria\"},\n                 {\"country\":\"Azerbaijan\"},{\"country\":\"Bangladesh\"},{\"country\":\"Belarus\"},{\"country\":\"Belgium\"},\n                 {\"country\":\"Benin\"},{\"country\":\"Bolivia\"},{\"country\":\"Bosnia and Herzegovina\"},{\"country\":\"Brazil\"},\n                 {\"country\":\"Bulgaria\"},{\"country\":\"Burkina Faso\"},{\"country\":\"Cambodia\"},{\"country\":\"Cameroon\"},\n                 {\"country\":\"Canada\"},{\"country\":\"Chile\"},{\"country\":\"Colombia\"},{\"country\":\"Costa Rica\"},\n                 {\"country\":\"C\\u00f4te d'Ivoire\"},{\"country\":\"Croatia\"},{\"country\":\"Czech Republic\"},\n                 {\"country\":\"Denmark\"},{\"country\":\"Dominican Republic\"},{\"country\":\"Ecuador\"},{\"country\":\"Egypt\"},\n                 {\"country\":\"El Salvador\"},{\"country\":\"Ethiopia\"},{\"country\":\"Finland\"},{\"country\":\"France\"},\n                 {\"country\":\"Germany\"},{\"country\":\"Ghana\"},{\"country\":\"Greece\"},{\"country\":\"Guatemala\"},\n                 {\"country\":\"Haiti\"},{\"country\":\"Honduras\"},{\"country\":\"Hong Kong\"},{\"country\":\"Hungary\"},\n                 {\"country\":\"India\"},{\"country\":\"Indonesia\"},{\"country\":\"Iraq\"},{\"country\":\"Ireland\"},\n                 {\"country\":\"Israel\"},{\"country\":\"Italy\"},{\"country\":\"Japan\"},{\"country\":\"Jordan\"},\n                 {\"country\":\"Kazakhstan\"},{\"country\":\"Kenya\"},{\"country\":\"Kuwait\"},{\"country\":\"Kyrgyzstan\"},\n                 {\"country\":\"Lebanon\"},{\"country\":\"Libya\"},{\"country\":\"Malaysia\"},{\"country\":\"Mali\"},\n                 {\"country\":\"Mexico\"},{\"country\":\"Moldova\"},{\"country\":\"Morocco\"},{\"country\":\"Mozambique\"},\n                 {\"country\":\"Myanmar\"},{\"country\":\"Nepal\"},{\"country\":\"Netherlands\"},{\"country\":\"New Zealand\"},\n                 {\"country\":\"Nicaragua\"},{\"country\":\"Nigeria\"},{\"country\":\"Norway\"},{\"country\":\"Oman\"},\n                 {\"country\":\"Pakistan\"},{\"country\":\"Palestine\"},{\"country\":\"Panama\"},{\"country\":\"Paraguay\"},\n                 {\"country\":\"Peru\"},{\"country\":\"Philippines\"},{\"country\":\"Poland\"},{\"country\":\"Portugal\"},\n                 {\"country\":\"Puerto Rico, U.S.\"},{\"country\":\"Qatar\"},{\"country\":\"Romania\"},{\"country\":\"Russia\"},\n                 {\"country\":\"Saudi Arabia\"},{\"country\":\"Senegal\"},{\"country\":\"Serbia\"},{\"country\":\"Singapore\"},\n                 {\"country\":\"Slovakia\"},{\"country\":\"Slovenia\"},{\"country\":\"South Africa\"},{\"country\":\"South Korea\"},\n                 {\"country\":\"Spain\"},{\"country\":\"Sri Lanka\"},{\"country\":\"Sudan\"},{\"country\":\"Sweden\"},\n                 {\"country\":\"Switzerland\"},{\"country\":\"Taiwan\"},{\"country\":\"Tanzania\"},{\"country\":\"Thailand\"},\n                 {\"country\":\"Tunisia\"},{\"country\":\"Turkey\"},{\"country\":\"Ukraine\"},{\"country\":\"United Arab Emirates\"},\n                 {\"country\":\"United Kingdom\"},{\"country\":\"United States of America\"},{\"country\":\"Uruguay\"},\n                 {\"country\":\"Uzbekistan\"},{\"country\":\"Venezuela\"},{\"country\":\"Vietnam\"},{\"country\":\"Yemen\"}]\n","1544ca94":"#Helper function to collect data\n#There are no error checks included in this. Use it wisely\n\ndef get_data(indicator, d_type, wise, daterange='20200101-20201231'):\n    \"\"\"\n    Collects the data from UMD API.\n\n    Parameters (pass all as strings):\n    indicator : Can be either 'flu' or 'covid'\n    d_type    : Can be either 'daily' or 'smoothed'\n    wise      : Can be either 'country' or 'country_region'\n    daterange : 'yyyymmdd-yyyymmdd'\n    \n    Returns:\n    df        : A dataframe of collected data\n    (Also saves a CSV to current working directory)\n    \"\"\"\n\n    df_list = []\n    \n    url_part1 = \"https:\/\/covidmap.umd.edu\/api\/resources?indicator=\"+ indicator +\"&type=\"+ d_type +\"&country=\"\n    \n    if wise == 'country':\n        url_part2 = \"&daterange=\" + daterange\n    elif wise == 'country_region':\n        url_part2 = \"&region=all&daterange=\" + daterange\n        \n    for country in all_countries:\n        url =  url_part1 + country['country'] + url_part2\n        res = requests.get(url)\n        jsondata = json.loads(res.text)\n        df_list.append(pd.DataFrame.from_records(jsondata['data']))\n\n    df = pd.concat(df_list)\n    csv_name = indicator + '_' + d_type + '_' + wise + '_wise.csv'\n    df.to_csv(csv_name)\n    return df","7e98d080":"#Function calls to collect all data (One call for a file each)\n\nget_data('covid','daily','country')\nget_data('covid','daily','country_region')\nget_data('covid','smoothed','country')\nget_data('covid','smoothed','country_region')\nget_data('flu','daily','country')\nget_data('flu','daily','country_region')\nget_data('flu','smoothed','country')\nget_data('flu','smoothed','country_region')","dd90c25c":"#You can change this to gather data for a particular date range\n#format = 'yyyymmdd-yyyymmdd'\n\ndaterange = '20200101-20201231'","85d47aa7":"# covid daily country-wise\n\ndf_list1 = []\n\nfor country in all_countries:\n    res = requests.get(\"https:\/\/covidmap.umd.edu\/api\/\\\nresources?indicator=covid&type=daily&country=\" + country['country'] + \"&daterange=\" + daterange)\n    jsondata = json.loads(res.text)\n    df_list.append(pd.DataFrame.from_records(jsondata['data']))\n    \npd.concat(df_list1).to_csv('covid_daily_country_wise.csv')","98da4553":"# covid daily country-region-wise\n\ndf_list2 = []\n\nfor country in all_countries:\n    res = requests.get(\"https:\/\/covidmap.umd.edu\/api\/\\\nresources?indicator=covid&type=daily&country=\" + country['country'] + \"&region=all&daterange=\" + daterange)\n    jsondata = json.loads(res.text)\n    df_list.append(pd.DataFrame.from_records(jsondata['data']))\n    \npd.concat(df_list2).to_csv('covid_daily_country_region_wise.csv')","ae5ff7af":"# covid smoothed country-wise\n\ndf_list3 = []\n\nfor country in all_countries:\n    res = requests.get(\"https:\/\/covidmap.umd.edu\/api\/\\\nresources?indicator=covid&type=smoothed&country=\" + country['country'] + \"&daterange=\" + daterange)\n    jsondata = json.loads(res.text)\n    df_list2.append(pd.DataFrame.from_records(jsondata['data']))\n    \npd.concat(df_list3).to_csv('covid_smoothed_country_wise.csv')","beceead5":"# covid smoothed country-region-wise\n\ndf_list4 = []\n\nfor country in all_countries:\n    res = requests.get(\"https:\/\/covidmap.umd.edu\/api\/\\\nresources?indicator=covid&type=smoothed&country=\" + country['country'] + \"&region=all&daterange=\" + daterange)\n    jsondata = json.loads(res.text)\n    df_list2.append(pd.DataFrame.from_records(jsondata['data']))\n    \npd.concat(df_list4).to_csv('covid_smoothed_country_region_wise.csv')","0d39f428":"# flu daily country-wise\n\ndf_list5 = []\n\nfor country in all_countries:\n    res = requests.get(\"https:\/\/covidmap.umd.edu\/api\/\\\nresources?indicator=flu&type=daily&country=\" + country['country'] + \"&daterange=\" + daterange)\n    jsondata = json.loads(res.text)\n    df_list3.append(pd.DataFrame.from_records(jsondata['data']))\n    \npd.concat(df_list5).to_csv('flu_daily_country_wise.csv')","bdc2f686":"# flu daily country-region-wise\n\ndf_list6 = []\n\nfor country in all_countries:\n    res = requests.get(\"https:\/\/covidmap.umd.edu\/api\/\\\nresources?indicator=flu&type=daily&country=\" + country['country'] + \"&region=all&daterange=\" + daterange)\n    jsondata = json.loads(res.text)\n    df_list3.append(pd.DataFrame.from_records(jsondata['data']))\n    \npd.concat(df_list6).to_csv('flu_daily_country_region_wise.csv')","9668aa79":"#flu smoothed country-wise\n\ndf_list7 = []\n\nfor country in all_countries:\n    res = requests.get(\"https:\/\/covidmap.umd.edu\/api\/\\\nresources?indicator=flu&type=smoothed&country=\" + country['country'] + \"&daterange=\" + daterange)\n    jsondata = json.loads(res.text)\n    df_list4.append(pd.DataFrame.from_records(jsondata['data']))\n    \npd.concat(df_list7).to_csv('flu_smoothed_country_wise.csv')","a65e6db8":"#flu smoothed country-region-wise\n\ndf_list8 = []\n\nfor country in all_countries:\n    res = requests.get(\"https:\/\/covidmap.umd.edu\/api\/\\\nresources?indicator=flu&type=smoothed&country=\" + country['country'] + \"&region=all&daterange=\" + daterange)\n    jsondata = json.loads(res.text)\n    df_list4.append(pd.DataFrame.from_records(jsondata['data']))\n    \npd.concat(df_list8).to_csv('flu_smoothed_country_region_wise.csv')","7047ae92":"Or if you don't want to use a function,\n\n# *Manual one-by-one collection*","24078bed":"### For more details - \n\nhttps:\/\/covidmap.umd.edu\/api.html","eb5bc5d2":"---"}}