{"cell_type":{"ea2b5762":"code","80679dcc":"code","b2015e01":"code","b7900405":"code","c4479247":"code","789d47a4":"code","8c323c29":"code","f4e0a207":"code","1f36175a":"code","2905c6e6":"code","776d4a37":"code","b3c6a395":"code","2c61b1c4":"code","345dbd01":"code","14f8ddba":"code","366300f3":"code","779e7054":"code","675fad84":"markdown","17de5db0":"markdown","26db2c91":"markdown","1484b477":"markdown","b50539ae":"markdown","1a465efd":"markdown","7d154c41":"markdown","be1de7c8":"markdown","7b244bb2":"markdown","bc3d8b93":"markdown","9aa02ced":"markdown","a9be4377":"markdown","160b9996":"markdown","9ebb0ade":"markdown","25ac0759":"markdown","c639aef2":"markdown","93ad49d0":"markdown","48933c37":"markdown","94f1529a":"markdown","c5a73185":"markdown","35cecd66":"markdown"},"source":{"ea2b5762":"import pandas as pd\nimport seaborn as sns\nfrom learntools.advanced_pandas.indexing_selecting_assigning import *\n\nreviews = pd.read_csv(\"..\/input\/wine-reviews\/winemag-data-130k-v2.csv\", index_col=0)\npd.set_option(\"display.max_rows\", 5)","80679dcc":"reviews.head()","b2015e01":"check_q1(pd.DataFrame())","b7900405":"# Your code here\nr=reviews['description']","c4479247":"# Your code here\nr[0]","789d47a4":"# Your code here\nreviews.iloc[0]\n#check_q3(reviews.iloc[0])","8c323c29":"# Your code here\nimport pandas as pd\npd.Series(reviews.description[:10]) ","f4e0a207":"# Your code here\nreviews.iloc[[1,2,3,5,8]]","1f36175a":"# Your code here\nre=reviews[['country','province','region_1','region_2']]\ndt=pd.DataFrame(re)\ndt.iloc[[0,1,10,100]]","2905c6e6":"# Your code here\nreviews[['country','variety']].iloc[0:101]","776d4a37":"# Your code here\nreviews[reviews['country']=='Italy']","b3c6a395":"re=reviews[reviews['region_2'] !='Nan']\nreviews.query(re)['designation']","2c61b1c4":"# Your code here\nre=reviews['points']","345dbd01":"# Your code here\nre[:1000]","14f8ddba":"# Your code here\nre[:1000:-1]","366300f3":"# Your code here\nreviews[reviews['country']=='Italy'].points","779e7054":"reviews[reviews.country.isin([\"Italy\", \"France\"]) & (reviews.points >= 90)].country","675fad84":"# Checking Answers\n\nYou can check your answers in each of the exercises that follow using the  `check_qN` function provided in the code cell above (replacing `N` with the number of the exercise). For example here's how you would check an incorrect answer to exercise 1:","17de5db0":"## Keep going\n\nMove on to the [**Summary functions and maps workbook**](https:\/\/www.kaggle.com\/kernels\/fork\/595524).","26db2c91":"**Exercise 3**: Select the first row of data (the first record) from `reviews`. Hint: from this exercise onwards I strongly recommend using `loc` or `iloc`.","1484b477":"**Exercise 1**: Select the `description` column from `reviews`.","b50539ae":"**Exercise 9**: Select wines whose `region_2` is not `NaN`.","1a465efd":"For the first set of questions, if you use `check_qN` on your answer, and your answer is right, a simple `True` value will be returned.\n\nFor the second set of questions, using this function to check a correct answer will present you will an informative graph!\n\nIf you get stuck, use `answer_qN` function to print the answer outright.","7d154c41":"**Exercise 6**: Select the `country`, `province`, `region_1`, and `region_2` columns of the records with the `0`, `1`, `10`, and `100` index positions. In other words, generate the following `DataFrame`:\n\n![](https:\/\/i.imgur.com\/FUCGiKP.png)","be1de7c8":"**Exercise 12**: <!--What is the distribution of reviews scores for the last 1000 wines in the dataset?--> Select the `points` column for the last 1000 wines.","7b244bb2":"**Exercise 11**: <!--What is the distribution of reviews scores for the first 1000 wines in the dataset?--> Select the `points` column for the first 1000 wines.","bc3d8b93":"**Exercise 4**: Select the first 10 values from the `description` column in `reviews`. Hint: format your output as a `pandas` `Series`.","9aa02ced":"# Exercises","a9be4377":"# Introduction\n\nMost projects requiring selecting specific values from a `DataFrame` or `Series`. You will work on that skill here using the [Wine Reviews dataset](https:\/\/www.kaggle.com\/zynicide\/wine-reviews). \n\n# Relevant Resources\n* **[Quickstart to indexing and selecting data](https:\/\/www.kaggle.com\/residentmario\/indexing-and-selecting-data\/)** \n* [Indexing and Selecting Data](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/indexing.html) section of pandas documentation\n* [Pandas Cheat Sheet](https:\/\/assets.datacamp.com\/blog_assets\/PandasPythonForDataScience.pdf)\n\n\n","160b9996":"Look at an overview of your data by running the following line","9ebb0ade":"**Exercise 2**: Select the first value from the description column of `reviews`.","25ac0759":"The remaining exercises are visual.","c639aef2":"**Exercise 13**: <!--What is the distribution of reviews scores for wines made in Italy?--> Select the `points` column, but only for wines made in Italy.","93ad49d0":"**Exercise 10**: <!--What is the distribution of wine ratings assigned by Wine Magazine?--> Select the `points` column.","48933c37":"**Exercise 8**: Select wines made in `Italy`. Hint: `reviews.country` equals what?","94f1529a":"**Exercise 14**: Who produces more above-averagely good wines, France or Italy? Select the `country` column, but only  when said `country` is one of those two options, _and_ the `points` column is greater than or equal to 90.\n\nYour output should look roughly like this:\n```\n119       France\n120        Italy\n           ...  \n129969    France\n129970    France\nName: country, Length: 15840, dtype: object\n```","c5a73185":"# Set Up\nRun the following cell to load your data and some utility functions","35cecd66":"**Exercise 7**: Select the `country` and `variety` columns of the first 100 records. \n\nHint: you may use `loc` or `iloc`. When working on the answer this question and the several of the ones that follow, keep the following \"gotcha\" described in the [reference](https:\/\/www.kaggle.com\/residentmario\/indexing-selecting-assigning-reference) for this tutorial section:\n\n> `iloc` uses the Python stdlib indexing scheme, where the first element of the range is included and the last one excluded. So `0:10` will select entries `0,...,9`. `loc`, meanwhile, indexes inclusively. So `0:10` will select entries `0,...,10`.\n\n> [...]\n\n> ...[consider] when the DataFrame index is a simple numerical list, e.g. `0,...,1000`. In this case `df.iloc[0:1000]` will return 999 entries, while `df.loc[0:1000]` return 1000 of them! To get 1000 elements using `iloc`, you will need to go one higher and ask for `df.iloc[0:1001]`."}}