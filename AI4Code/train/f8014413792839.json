{"cell_type":{"f9788cec":"code","5d28be44":"code","c5ba625d":"code","e1f420d6":"code","cdd5529c":"code","5430f171":"code","ed2f1455":"code","73016909":"code","940fbdfc":"code","eedc4a9c":"code","ea3a36c5":"code","3332a5e2":"code","16c3979b":"code","2c0ef0f0":"code","0d6cd574":"code","93356a01":"code","17e6cea6":"code","44493b16":"code","03ac2334":"code","3b3bd8a4":"code","6d8d69b4":"code","f69cb818":"code","d1457db7":"code","7ac0af67":"code","a038e229":"code","83acf105":"code","cdf3a0f3":"code","c7cb6d8e":"code","76bb6a30":"code","ce6db3de":"code","7655dc03":"code","7c84a2be":"code","fad8bb0f":"code","7bea08be":"code","4c826588":"markdown","c07bc412":"markdown","a3c4becd":"markdown","8caca5b3":"markdown","6b753591":"markdown","86abf14c":"markdown","26947da1":"markdown","b6d23493":"markdown"},"source":{"f9788cec":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5d28be44":"import matplotlib.pyplot as plt\nimport seaborn as sns\nfrom pandas_profiling import ProfileReport  # Perform EDA\n","c5ba625d":"df = pd.read_csv('\/kaggle\/input\/weather-dataset-rattle-package\/weatherAUS.csv')","e1f420d6":"df.head(10)","cdd5529c":"df.shape","5430f171":"df.describe(include = 'all')","ed2f1455":"df.info()","73016909":"df.isnull().sum()","940fbdfc":"profile = ProfileReport(df, title = 'Dataset Report', explorative = True)","eedc4a9c":"profile.to_widgets()","ea3a36c5":"profile.to_file('eda_rainfall.html')","3332a5e2":"for col in df.columns:\n    df[col].value_counts()","16c3979b":"df['Date'] = pd.to_datetime(df['Date']) # parse as datatime\n\ndf['Year'] = df['Date'].dt.year\ndf['Month'] = df['Date'].dt.month\ndf['Day'] = df['Date'].dt.day\n\ndf[['Year', 'Month', 'Day']] # preview changes made\n\ndf.drop('Date', axis=1, inplace = True)\ndf.info()","2c0ef0f0":"#Separating Numerical and categorical data\ncat_col = []\nnum_col = []\nfor col in df.columns:\n    if df[col].dtype == 'O':\n        cat_col.append(col)\n    else:\n        num_col.append(col)","0d6cd574":"cat_col","93356a01":"num_col","17e6cea6":"df[cat_col].isnull().sum()","44493b16":"df[num_col].isnull().sum()","03ac2334":"#Importing Impute class from sklearn to handle missing values, as we want to replace all missing values with median of that attribute\nfrom sklearn.impute import SimpleImputer\nimputer = SimpleImputer(strategy = 'most_frequent') #creating the instance of the class and specify what has to be done\n\n#create a dataframe that contains only numerical values\nimputer.fit(df)\ndf_clean = imputer.transform(df)","3b3bd8a4":"df_prep = pd.DataFrame(df_clean, columns = df.columns)","6d8d69b4":"df_prep","f69cb818":"df_prep.isnull().sum()","d1457db7":"X_prep = df_prep.drop(['RainTomorrow'], axis = 1)\ny = df_prep['RainTomorrow']","7ac0af67":"X_final = pd.concat([X_prep[num_col], pd.get_dummies(X_prep.RainToday),\n                     pd.get_dummies(X_prep.Location), \n                     pd.get_dummies(X_prep.WindGustDir),\n                     pd.get_dummies(X_prep.WindDir9am),\n                     pd.get_dummies(X_prep.WindDir3pm)], axis=1)","a038e229":"#Feature Scaling\nfrom sklearn.preprocessing import StandardScaler\nscale = StandardScaler()\nX_Final = scale.fit_transform(X_final)\nX_Final = pd.DataFrame(X_Final, columns = X_final.columns )","83acf105":"X_Final.isnull().sum()","cdf3a0f3":"y.isnull().sum()","c7cb6d8e":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X_Final, y , test_size = 0.2, random_state = 0)","76bb6a30":"X_train.head()","ce6db3de":"y_train.head()","7655dc03":"from sklearn.linear_model import LogisticRegression\n\nlog_reg = LogisticRegression(solver = 'liblinear', random_state = 0)\nlog_reg.fit(X_train, y_train)","7c84a2be":"log_reg.score(X_train, y_train)","fad8bb0f":"y_test_pred = log_reg.predict(X_test)\nlog_reg.score(X_test, y_test)","7bea08be":"# Upvotes would be appretiated :)","4c826588":"# EDA","c07bc412":"Logestic Regression Model has fitted with score of 84.7% on both test and train dataset\nAlso we can say that, the model has fitted correctly no over or underfitting","a3c4becd":"# About Dataset\n\n### Content:\nThis dataset contains about 10 years of daily weather observations from many locations across Australia.\n\nRainTomorrow is the target variable to predict. It means did it rain the next day, Yes or No? This column is Yes if the rain for that day was 1mm or more.\n\n### Features of Dataset:\n1. Date : The date of observation\n2. Location : The common name of the location of the weather station\n3. MinTemp : The minimum temperature in degrees celsius\n4. MaxTemp : The maximum temperature in degrees celsius\n5. Rainfall : The amount of rainfall recorded for the day in mm\n6. Evaporation : The so-called Class A pan evaporation (mm) in the 24 hours to 9am\n7. Sunshine : The number of hours of bright sunshine in the day.\n8. WindGustDir : The direction of the strongest wind gust in the 24 hours to midnight\n9. WindGustSpeed : The speed (km\/h) of the strongest wind gust in the 24 hours to midnight\n10. WindDir9am : Direction of the wind at 9am\n11. WindDir3pm : Direction of the wind at 3pm\n12. WindSpeed9am : Wind speed (km\/hr) averaged over 10 minutes prior to 9am\n13. WindSpeed3pm : Wind speed (km\/hr) averaged over 10 minutes prior to 3pm\n14. Humidity9am : Humidity (percent) at 9am\n15. Humidity3pm : Humidity (percent) at 3pm\n16. Pressure9am : Atmospheric pressure (hpa) reduced to mean sea level at 9am\n17. Pressure3pm : Atmospheric pressure (hpa) reduced to mean sea level at 3pm\n18. Cloud9am : Fraction of sky obscured by cloud at 9am. This is measured in \"oktas\", which are a unit of eigths.\nIt records how many eigths of the sky are obscured by cloud. A '0' measure indicates completely clear sky whilst an '8' indicates that it is completely overcast.\n19. Cloud3pm : Fraction of sky obscured by cloud (in \"oktas\": eighths) at 3pm. \n20. Temp9am : Temperature (degrees C) at 9am\n21. Temp3pm : Temperature (degrees C) at 3pm\n22. RainToday : Boolean: 1 if precipitation (mm) in the 24 hours to 9am exceeds 1mm, otherwise 0\n23. RainTomorrow(Targer_Variable) : The amount of next day rain in mm. Used to create response variable RainTomorrow. A kind of measure of the \"risk\".\n\n\n\n","8caca5b3":"# One Hot Encoding","6b753591":"# Libraries:","86abf14c":"RainToday and RainTomorrow have only two values : 'yes' and 'no'","26947da1":"# Models","b6d23493":"# Splitting Train and Test dataset"}}