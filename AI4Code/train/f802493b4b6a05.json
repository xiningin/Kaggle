{"cell_type":{"52324107":"code","aa2cf1c2":"code","2df5dd94":"code","2770b83a":"code","4c34b716":"code","50632bd0":"code","51fc9e7c":"code","2e06e704":"code","274812af":"code","616df856":"code","35f8a674":"code","99986bdc":"code","19fe13e0":"code","6eee0850":"code","d3282921":"code","521f8dab":"code","12002121":"code","61b4718b":"markdown","92c30ea6":"markdown","f3479de8":"markdown","b4a0ad6a":"markdown","784f4144":"markdown","454a411f":"markdown","ccc3d1b8":"markdown"},"source":{"52324107":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n                \nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","aa2cf1c2":"%load_ext autoreload\n%autoreload 2\n\n%matplotlib inline","2df5dd94":"#from pandas_summary import DataFrameSummary\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestRegressor, RandomForestClassifier\nfrom IPython.display import display\nfrom sklearn.metrics import accuracy_score, f1_score, precision_score, recall_score\nfrom sklearn import metrics","2770b83a":"def display_all(df):\n    with pd.option_context(\"display.max_rows\", 1000, \"display.max_columns\", 1000): \n        display(df)\n","4c34b716":"titanic_df = pd.read_csv(\"..\/input\/train.csv\")\ntitanic_Testdf = pd.read_csv(\"..\/input\/test.csv\")\ndf_raw = pd.concat([titanic_df,titanic_Testdf])\ntitanic_df.shape,titanic_Testdf.shape,df_raw.shape\ndisplay_all(df_raw.describe(include='all').T)\ndf_raw.tail(10)\ndf_raw.head(10)","50632bd0":"# convert to category dtype\ndf_raw['Sex'] = df_raw['Sex'].astype('category')\n# convert to category codes\ndf_raw['Sex'] = df_raw['Sex'].cat.codes\ndf_raw","51fc9e7c":"    # subset all categorical variables which need to be encoded doing hot encoding on  Embarked column\ncat = ['Embarked']\nfor var in cat:\n     df_raw = pd.concat([df_raw,pd.get_dummies(df_raw[var],prefix=var)],axis=1)\n    del df_raw[var]\ndf_raw\n   \n                           ","2e06e704":"df_raw.drop(['Name','Ticket','PassengerId','Cabin'],axis=1,inplace=True)\ndf_raw.head(400)","274812af":"df_raw.isnull().any()\n#Replaced Nan values in Age column with it's Mean\ndf_raw.ix[:,0]=(df_raw.ix[:,0]).fillna(df_raw.mean(axis=0)[0])\ndf_raw.ix[:,1]=(df_raw.ix[:,1]).fillna(df_raw.mean(axis=0)[1])\ndf_raw.isnull().any()\n","616df856":"df_titanic = df_raw[pd.notnull(df_raw['Survived'])]\ndf_testtitanic = df_raw[pd.isnull(df_raw['Survived'])]\ndf_testtitanic.drop(['Survived'],axis=1,inplace=True)\ndf_titanic.isnull().any()\ndf_testtitanic.isnull().any()","35f8a674":"#Validation data\nX_train, X_val, y_train, y_val = train_test_split(\n    df_titanic.drop(['Survived'], axis=1),\n    df_titanic['Survived'],\n    test_size=0.2, random_state=42)","99986bdc":"for i in (X_train,X_val,y_train,y_val):\n    print(i.shape)\n    ","19fe13e0":"m = RandomForestClassifier(n_estimators=10,random_state=42)\nm.fit(X_train,y_train)\n","6eee0850":"#accuracy_score(y_train, m.predict(X_val))\n#m.score(X_train,y_train)\n#m.score(X_val,y_val)\n#accuracy_score(y_train,m.predict(X_train))\n#accuracy_score(y_val, m.predict(X_val))\nf1_score(y_val, m.predict(X_val))\n#quetions what if i have 3 categoricalvariables like 0,1,2 then how f1 score will works ??\n#m.predict(df_testtitanic)","d3282921":"\ntitanic_Testdf['Survived'] = m.predict(df_testtitanic)\ntitanic_Testdf","521f8dab":"solution = titanic_Testdf[['PassengerId','Survived']]\nsolution['Survived'] = solution['Survived'].apply(int)","12002121":"solution.to_csv(\"Random_Forest_Solution.csv\", index=False)","61b4718b":"**Reading Both train and test files**","92c30ea6":"Creating Random Forest  instance model with Training data","f3479de8":"So as per above model we are getting 75% accuracy on validation data set.","b4a0ad6a":"Since result is in categorical variable like survived or Not Survived and it is not uniform like 75%  of our data is not survived so our model accuracy will not come correct if we use R2 accuracy paramaeter.\n\nF1 score is right accuracy measure for such kind of dataset.","784f4144":"**Categorize the SEX column**","454a411f":"dropping few columns","ccc3d1b8":"**Funtion For display data**"}}