{"cell_type":{"e0908099":"code","39bfd154":"code","37e562fb":"code","aa31d0b2":"code","eed116c4":"markdown"},"source":{"e0908099":"!pip install pycocotools","39bfd154":"import numpy as np\nimport pandas as pd\nimport json\nfrom tqdm.auto import tqdm\n\ndef get_file_name(video_frame):\n    video_frame = video_frame.split('_')\n    video = \"_\".join(video_frame[:-1])\n    frame = int(video_frame[-1])\n    file_name = f'{video}_frame{frame:04}.jpg'\n    return file_name\n\ntrain_annotations = json.load(open('..\/input\/nfl2021traincocoannotations\/train.json'))\n\ntrain_preds = pd.read_csv('..\/input\/nfl-health-and-safety-helmet-assignment\/train_baseline_helmets.csv')\ntrain_preds['file_name'] = train_preds['video_frame'].map(get_file_name)\n\nimages = pd.DataFrame(train_annotations['images'])\ntrain_preds = train_preds.merge(images[['file_name', 'id']])","37e562fb":"# convert to coco prediction format and save it as json.\npredictions = []\nfor _, row in tqdm(train_preds.iterrows(), total=len(train_preds)):\n    pred = {\n        \"image_id\": row['id'],\n        \"category_id\": 1,\n        \"bbox\": [row['left'], row['top'], row['height'], row['width']],\n        \"score\": row['conf'],\n        }\n    predictions.append(pred)\n    \njson.dump(predictions, open('results.json', 'w'))","aa31d0b2":"# evaluate with pycocotools\nimport pycocotools.coco as coco\nfrom pycocotools.cocoeval import COCOeval\n\ncoco_ann = coco.COCO('..\/input\/nfl2021traincocoannotations\/train.json')\ncoco_dets = coco_ann.loadRes('results.json')\ncoco_eval = COCOeval(coco_ann, coco_dets, \"bbox\")\ncoco_eval.evaluate()\ncoco_eval.accumulate()\ncoco_eval.summarize()","eed116c4":"In this competition the baseline predictions are provided for object detection task for both train and test set. You may wonder how they are accurate, here I'll test it!\n\nI'll use coco mAP score since it's the most common way to evaluate object detection model.\n\nI've already converted ground truth annotation to coco format here.  \nhttps:\/\/www.kaggle.com\/bamps53\/create-coco-format-annotations\n\nThe converted json file is also provided.  \nhttps:\/\/www.kaggle.com\/bamps53\/nfl2021traincocoannotations\n\nIn this notebook, I'll convert `train_baseline_helmets.csv` to coco prediction format.\nAnd then evaluate it with pycocotools."}}