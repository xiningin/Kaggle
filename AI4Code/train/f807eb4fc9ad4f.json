{"cell_type":{"54343e14":"code","c9f43799":"code","00c7d13a":"code","596e2be7":"code","9fb9977c":"code","47371d8c":"code","adb5f830":"code","33487928":"code","a59b5d13":"code","c9205aba":"code","5c478a98":"code","c2b05202":"code","70203c00":"code","b98b603d":"markdown","da39779e":"markdown","7ad249dd":"markdown","7a95acb6":"markdown","50aa96be":"markdown","12b15ad5":"markdown"},"source":{"54343e14":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport tensorflow as tf\nimport tensorflow_addons as tfa\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c9f43799":"train = pd.read_csv('..\/input\/jane-street-market-prediction\/train.csv')","00c7d13a":"train.head()","596e2be7":"train = train.query('date > 85').reset_index(drop = True) \ntrain = train[train['weight'] != 0]\nfeatures_mean = []\nfeatures = [c for c in train.columns if 'feature' in c]\nfor i in features:\n    x = train[i].mean()  \n    features_mean.append(x)\n    train[i] = train[i].fillna(x)\ntrain['action'] = ((train['resp'].values) > 0).astype(int)\nresp_cols = ['resp_1', 'resp_2', 'resp_3', 'resp', 'resp_4']\nX_train = train.loc[:, train.columns.str.contains('feature')]\ny_train = np.stack([(train[c] > 0).astype('int') for c in resp_cols]).T","9fb9977c":"f = np.median\nf_mean = np.mean(train[features[1:]].values,axis=0)","47371d8c":"del train","adb5f830":"epochs = 200\nbatch_size = 4096\nhidden_units = [160, 160]\ndropout_rates = [0.20, 0.20, 0.20]\nlabel_smoothing = 1e-2\nlearning_rate = 1e-3","33487928":"def create_mlp(num_columns, num_labels, hidden_units, dropout_rates, label_smoothing, learning_rate):\n    inp = tf.keras.layers.Input(shape=(num_columns,))\n    x = tf.keras.layers.BatchNormalization()(inp)\n    x = tf.keras.layers.Dropout(dropout_rates[0])(x)\n    for i in range(len(hidden_units)):\n        x = tf.keras.layers.Dense(hidden_units[i])(x)\n        x = tf.keras.layers.BatchNormalization()(x)\n        x = tf.keras.layers.Activation(tf.keras.activations.swish)(x)\n        x = tf.keras.layers.Dropout(dropout_rates[i + 1])(x)\n    x = tf.keras.layers.Dense(num_labels)(x)\n    out = tf.keras.layers.Activation(\"sigmoid\")(x)\n    model = tf.keras.models.Model(inputs=inp, outputs=out)\n    model.compile(\n        optimizer = tfa.optimizers.RectifiedAdam(learning_rate=learning_rate),\n        loss = tf.keras.losses.BinaryCrossentropy(label_smoothing=label_smoothing),\n        metrics = tf.keras.metrics.AUC(name='AUC'))\n\n    return model","a59b5d13":"tf.keras.backend.clear_session()\nclf = create_mlp(len(features), 5, hidden_units, dropout_rates, label_smoothing, learning_rate)\nclf.summary()","c9205aba":"clf.fit(X_train, y_train, epochs=epochs, batch_size=batch_size, verbose=2)","5c478a98":"del X_train\ndel y_train","c2b05202":"from tqdm import tqdm\nimport janestreet\nmodels = []\nmodels.append(clf)\nth = 0.503","70203c00":"env = janestreet.make_env()\nfor (test_df, pred_df) in tqdm(env.iter_test()):\n    if test_df['weight'].item() > 0:\n        x_tt = test_df.loc[:, features].values\n        if np.isnan(x_tt[:, 1:].sum()):\n            x_tt[:, 1:] = np.nan_to_num(x_tt[:, 1:]) + np.isnan(x_tt[:, 1:]) * f_mean\n        pred = np.mean([model(x_tt, training = False).numpy() for model in models],axis=0)\n        pred = f(pred)\n        pred_df.action = np.where(pred >= th, 1, 0).astype(int)\n    else:\n        pred_df.action = 0\n    env.predict(pred_df)","b98b603d":"# Cleaning Data","da39779e":"# Importing Important Libraries","7ad249dd":"# Training Model","7a95acb6":"# Creating Model","50aa96be":"# Predictions","12b15ad5":"If you found this notebook useful, please considering upvoting :)"}}