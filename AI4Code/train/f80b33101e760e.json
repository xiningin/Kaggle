{"cell_type":{"8ef1a0f8":"code","f7971f75":"code","7a0ee13a":"code","dd4da4ba":"code","acb47925":"code","b465dfb7":"code","2d99f7c1":"code","07f7c845":"code","0dddc57a":"code","ba1d24d4":"code","d754f9dc":"code","141676b7":"code","5e2768f8":"code","f0f124cc":"code","93c0ea79":"code","f13645e3":"code","a5c0ba59":"code","af928e45":"code","b0b448a8":"code","44fbfe1b":"markdown","25c9a05c":"markdown","18ab98d2":"markdown","72b9d35c":"markdown","61b243db":"markdown","9b915da0":"markdown","05207169":"markdown","d76524ea":"markdown","ac2d4280":"markdown","2b15f956":"markdown","08832220":"markdown","1c32c375":"markdown","7cfa70fa":"markdown","08a01ae6":"markdown","355acd4b":"markdown","3a67ac2e":"markdown","4317508e":"markdown"},"source":{"8ef1a0f8":"# The unavoidable\nimport pandas as pd\nimport numpy as np\n\n# Fuzzy string matching\nfrom fuzzywuzzy import process\n# Regular expression operations (RegEx) \nimport re\n# Download\nimport urllib.request, urllib.error, urllib.parse","f7971f75":"atlas_df = pd.read_csv('\/kaggle\/input\/hackathon\/BCG_world_atlas_data-2020.csv')\n\n# Remove spaces at the beginning and at the end of the string\natlas_df.loc[:,'Contry Name (Mandatory field)'] = atlas_df.loc[:,'Contry Name (Mandatory field)'].str.strip()\natlas_df.loc[:,'Vaccination Timing (age)'] = atlas_df.loc[:,'Vaccination Timing (age)'].str.strip()","7a0ee13a":"atlas_df.head()","dd4da4ba":"field = 'Contry Name (Mandatory field)'\natlas_df.loc[atlas_df[field] == 'mexico', field] = 'Uzbekistan'","acb47925":"field = 'Vaccination Timing (age)'\n\n(atlas_df[field].value_counts()\n .rename_axis(field)\n .reset_index(name='Counts')\n .head())","b465dfb7":"bcg_url = 'https:\/\/apps.who.int\/immunization_monitoring\/globalsummary\/schedules?\\\nsc%5Br%5D%5B%5D=AFRO&sc%5Br%5D%5B%5D=AMRO&sc%5Br%5D%5B%5D=EMRO&\\\nsc%5Br%5D%5B%5D=EURO&sc%5Br%5D%5B%5D=SEARO&sc%5Br%5D%5B%5D=WPRO&\\\nsc%5Bd%5D=&sc%5Bv%5D%5B%5D=BCG&sc%5BOK%5D=OK'\n    \ndef get_who_table(url):\n\n\n    \"\"\"\n    Note:\n    pd.read_html function can read the tables directly from internet,\n    but we donload it manualy to fix the error (invalid literal for int() with base 10: '100%')\n    \"\"\"\n    response = urllib.request.urlopen(url)\n    content = response.read().decode('utf-8')\n\n    # Fix colspan=\"100%\" error, by removing it.\n    content = re.sub('colspan=\"100%\"', '', content)\n\n    # flavor & match are optional\n    tables = pd.read_html(content,\n                          flavor='bs4',\n                          match='Africa|Americas|Eastern Mediterranean|Europe|South-East Asia|Western Pacific')\n\n\n    \"\"\"\n    1. Filter table rows, keep only rows where Antigens column is BCG (It can be continent name or NaN);\n    2. Copy the table to avoid SettingWithCopyWarning in the future updates.\n    \"\"\"\n    who_df = tables[0].query('Antigens==\"BCG\"').copy()\n    \n    return who_df\n","2d99f7c1":"who_df = get_who_table(bcg_url)","07f7c845":"(who_df['Schedules'].value_counts()\n .rename_axis('Schedules')\n .reset_index(name='Counts')\n .head())","0dddc57a":"# Atlas countries names not in WHO\natlas_countries = [c for c in atlas_df.iloc[:,0].values if c not in who_df.iloc[:,0].values]\natlas_countries = list(set(atlas_countries))","ba1d24d4":"# WHO countries names not in Atlas\nwho_countries = [c for c in who_df.iloc[:,0].values if c not in atlas_df.iloc[:,0].values]\nwho_countries = list(set(who_countries))","d754f9dc":"# List of tuple (WHO, Atlas) country names\nmap_countries = []\nfor c in who_countries:\n    # Fuzzy match\n    r = process.extractOne(c, atlas_countries)\n    # Keep when confidence is higher than 90\n    if r[1]>=90:\n        map_countries.append((c, r[0]))","141676b7":"manual_map = [\n    ('North Macedonia', 'Macedonia, FYR'),\n    ('Eswatini', 'Swaziland'),\n    ('Democratic People\\'s Republic of Korea', 'Korea, Dem. Rep.'),\n    ('Cabo Verde', 'Cape Verde'),\n    ('Saint Lucia', 'St. Lucia'),\n    ('Republic of Korea', 'Korea, Rep.'),\n    ('Iran (Islamic Republic of)', 'Iran, Islamic Rep.'),\n    ('Micronesia (Federated States of)', 'Micronesia, Fed. Sts.'),\n    ('Lao People\\'s Democratic Republic', 'Lao PDR'),\n    ('Democratic Republic of the Congo', 'Congo, Dem. Rep.'),\n    ('Kyrgyzstan', 'Kyrgyz Republic')\n ]\n\nmap_countries.extend(manual_map)","5e2768f8":"pd.DataFrame(map_countries, columns=['WHO', 'Atlas'])","f0f124cc":"for who_c, atlas_c in map_countries:\n    index = (who_df['Country'] == who_c)\n    who_df.loc[index, 'Country'] = atlas_c","93c0ea79":"who_df","f13645e3":"extend = []\n\nfor i, who_row in who_df.iterrows():\n    in_atlas = False\n    \n    # WHO BCG schedule is NA\n    if who_row.Schedules != who_row.Schedules: continue\n    \n    # Split WHO vaccination timing\n    vacc_timing = who_row.Schedules.split(';')\n    vacc_timing = [t.strip() for t in vacc_timing if len(t)]\n    \n    y = atlas_df.query(f'`Contry Name (Mandatory field)`==\"{who_row.Country}\"')[['Vaccination Timing (age)',\n                                                                                 'Definition of High-risk groups (if applicable) which receive BCG?']]\n    \n    # Always true\n    if len(y):\n        choices = []\n        # not_atlas_risk is True, if all Atlas High-risk groups rows for a country are NA\n        not_atlas_risk = True\n        for j, atlas_row in y.iterrows():\n            atlas_vacc_timing = atlas_row[0]\n            \n            not_atlas_risk &= atlas_row[1] == atlas_row[1]\n            \n            # Atlas Vaccination Timing is NA\n            if atlas_vacc_timing == atlas_vacc_timing:\n                # Split Atlas vaccination timing\n                choices.extend(atlas_vacc_timing.split(','))\n        \n        is_new = False\n        for t in vacc_timing:\n            r = process.extractOne(t, choices)\n            # Do we have a new\/different BCG schedule?\n            is_new |= (r == None) or (r[1] < 50)\n        \n        if is_new or (not_atlas_risk and who_row.Comments==who_row.Comments):\n            extend.append( (who_row.Country,\n                            ','.join(choices),\n                            who_row.Schedules,\n                            who_row.Comments) )\n    else:\n        raise KeyError(f'Country {who_row.Country}, not found!')\n        ","a5c0ba59":"pd.DataFrame(extend, columns=['Country', 'Old timing', 'New timing', 'risk group'])","af928e45":"columns = atlas_df.columns.values\n\nextend_lst = []\nfor country, _, t, r in extend:\n    s = pd.Series([np.nan]*len(columns), columns)\n    \n    y = atlas_df.query(f'`Contry Name (Mandatory field)`==\"{country}\"')\n    assert len(y)\n    \n    s['Contry Name (Mandatory field)'] = y['Contry Name (Mandatory field)'].values[0]\n    s['Country Code (Mandatory field)'] = y['Country Code (Mandatory field)'].values[0]\n    s['BCG Policy Link (Mandatory field)'] = bcg_url\n    s['Is it from bcgatlas.org (Mandatory field)'] = 'no'\n    s['Vaccination Timing (age)'] = t\n    s['Definition of High-risk groups (if applicable) which receive BCG?'] = r\n    \n    extend_lst.append(s)\n    \nextend_df = pd.concat(extend_lst, axis=1).T\nextend_df","b0b448a8":"# Save output\nextend_df.to_csv('atlas_extension.csv', index=False)","44fbfe1b":"**<center style=\"font-size: 16pt;\">BCG per country schedule from WHO<\/center>**","25c9a05c":"Load BCG World Atlas data to be extended.","18ab98d2":"# Libraries","72b9d35c":"## WHO BCG table","61b243db":"Manual mapping.","9b915da0":"# Unify country names","05207169":"WHO immunization schedule table for BCG, for 171 countries. We download the table then convert it to dataframe.","d76524ea":"# Introduction","ac2d4280":"Automatic mapping, using fuzzy match.","2b15f956":"Fix a typo in Atlas where Uzbekistan named as 'mexico' (lowercase).","08832220":"# Atlas extension","1c32c375":"Update WHO country names.","7cfa70fa":"We add or update Atlas BCG country policy, in case the WHO BCG table contains different Vaccination Timing\/High-Risk groups.","08a01ae6":"In this kernel we will extend BCG World Atlas data, by the [WHO BCG policies table](https:\/\/apps.who.int\/immunization_monitoring\/globalsummary\/schedules?sc%5Br%5D%5B%5D=AFRO&sc%5Br%5D%5B%5D=AMRO&sc%5Br%5D%5B%5D=EMRO&sc%5Br%5D%5B%5D=EURO&sc%5Br%5D%5B%5D=SEARO&sc%5Br%5D%5B%5D=WPRO&sc%5Bd%5D=&sc%5Bv%5D%5B%5D=BCG&sc%5BOK%5D=OK) (Last updated 15-July-2020).","355acd4b":"Make WHO country names like the ones in Atlas data.","3a67ac2e":"# Data loading","4317508e":"## BCG World Atlas"}}