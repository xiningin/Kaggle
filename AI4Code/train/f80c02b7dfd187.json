{"cell_type":{"c8f13c5f":"code","4870c3cf":"code","bd8b6e9c":"code","34b18261":"code","88180183":"code","bf1b8339":"code","d6b4abd5":"code","bf270abe":"code","5ee0fd56":"code","0ca99b94":"code","ea0ec5c2":"code","c0307285":"code","cad63805":"code","93bbead3":"code","9bd8c4a1":"code","f7d31f23":"code","44c97774":"code","b7b7a257":"code","c5b71a17":"markdown","23ae3765":"markdown","e9ab466b":"markdown","4171fed5":"markdown","1b5c9149":"markdown","0d4fe10e":"markdown","db6033ff":"markdown","6d40fbee":"markdown","3dc0d2e4":"markdown","6230d7a5":"markdown","016001e3":"markdown","4a684cde":"markdown","fcf24ddf":"markdown"},"source":{"c8f13c5f":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","4870c3cf":"df = pd.read_csv('..\/input\/real-estate-price-prediction\/Real estate.csv')","bd8b6e9c":"df.head()","34b18261":"df = df.drop('No', axis=1)\ndf.head(2)","88180183":"df.describe()","bf1b8339":"df.info()","d6b4abd5":"sns.pairplot(data=df)","bf270abe":"X = df.drop('Y house price of unit area', axis=1)\ny = df[['Y house price of unit area']]\nprint(X[:3])\nprint(y[:3])","5ee0fd56":"sns.displot(data=y, bins=15)","0ca99b94":"from sklearn.preprocessing import PolynomialFeatures\npoly_cnv = PolynomialFeatures(degree=3, include_bias=False)\npoly_x = poly_cnv.fit_transform(X)","ea0ec5c2":"from sklearn.model_selection import train_test_split\ntrain_x, test_x, train_y, test_y = train_test_split(poly_x, y, test_size=0.25, random_state=50)","c0307285":"from sklearn.linear_model import LinearRegression\nregr = LinearRegression()\nregr.fit(train_x, train_y)","cad63805":"from sklearn import metrics\nyhat = regr.predict(test_x)\nprint('MAE is %f' % metrics.mean_absolute_error(test_y, yhat))\nprint('MSE is %f' % metrics.mean_squared_error(test_y, yhat))\nprint('RMSE is %f' % np.sqrt(metrics.mean_squared_error(test_y, yhat)))\nprint('R2score is %f' % metrics.r2_score(test_y, yhat))","93bbead3":"test_score_list = []\ntrain_score_list = []\nfor d in range(1, 9):\n    #creating polynomial converter then convert X to polynomial\n    poly_cnv = PolynomialFeatures(degree=d, include_bias=False)\n    poly_x = poly_cnv.fit_transform(X)\n    #splitting data\n    train_x, test_x, train_y, test_y = train_test_split(poly_x, y, test_size=0.25, random_state=50)\n    #train the model\n    regr = LinearRegression()\n    regr.fit(train_x, train_y)\n    #predict with train y and test y\n    #evaluating model with train and test data\n    yhat = regr.predict(test_x)\n    yhat_train = regr.predict(train_x)\n    r2_test = metrics.r2_score(test_y, yhat)\n    r2_train = metrics.r2_score(train_y, yhat_train)\n    #appending them to our score list\n    test_score_list.append(r2_test)\n    train_score_list.append(r2_train)\n    ","9bd8c4a1":"test_score_list","f7d31f23":"train_score_list","44c97774":"plt.plot(range(1, 5), test_score_list[:4], label='test score')\nplt.plot(range(1, 5), train_score_list[:4], label='train score')\nplt.legend()\n","b7b7a257":"#making converter with our best degree\nfinal_d = 2\nfinal_cnv = PolynomialFeatures(degree=final_d, include_bias=False)\npoly_x = final_cnv.fit_transform(X)\n#splitting data\ntrain_x, test_x, train_y, test_y = train_test_split(poly_x, y, test_size=0.25, random_state=50)\n#creating and training final model\nregr = LinearRegression()\nregr.fit(train_x, train_y)\n#evaluating final model\nyhat = regr.predict(test_x)\nyhat_train = regr.predict(train_x)\nr2_test = metrics.r2_score(test_y, yhat)\nr2_train = metrics.r2_score(train_y, yhat_train)\nprint('test r2 -> %f' % r2_test)\nprint('train r2 -> %f' % r2_train)","c5b71a17":"### splitting train and test data","23ae3765":"# Creating our final model and Evaluate it.","e9ab466b":"### plotting a pair plot","4171fed5":"## model training with linear regression","1b5c9149":"## preprocess data using Polynomial features","0d4fe10e":"## comaring our test scores and train scores","db6033ff":"## evaluating model...","6d40fbee":"### plotting scores","3dc0d2e4":"### analize data","6230d7a5":"### making our x and y","016001e3":"# RealEstate prediction\n## import libraries","4a684cde":"### reading .csv file(dataset)","fcf24ddf":"# Trying with other polynomial degrees"}}