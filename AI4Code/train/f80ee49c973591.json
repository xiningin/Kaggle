{"cell_type":{"b2faba73":"code","13dfff0e":"code","e1eea40a":"code","daf940fb":"code","53787964":"code","30171028":"code","1c0f1425":"code","c1155397":"code","5bf47f8c":"markdown","33624069":"markdown","92981849":"markdown","9cdd844a":"markdown","21de7717":"markdown","e90903f6":"markdown","0bcd23ea":"markdown"},"source":{"b2faba73":"import matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.image import imread\nfrom sklearn.manifold import MDS\nfrom mpl_toolkits import mplot3d\nimport seaborn as sns\nsns.set()\n%matplotlib inline","13dfff0e":"def make_hello(N = 1000, rseed = 42):\n    fig, ax = plt.subplots(figsize = (10, 1))\n    fig.subplots_adjust(left = 0, right = 1, bottom = 0, top =1)\n    ax.axis('off')\n    ax.text(0.5, 0.4, \"HELLO\", va = 'center', ha = 'center', weight = 'bold', size = 85)\n    fig.savefig('\/kaggle\/working\/Hello.png')\n    plt.close(fig)\n    \n    data = imread('\/kaggle\/working\/Hello.png')[::-1, :, 0].T\n    rng = np.random.RandomState(rseed)\n    X = rng.rand(4*N, 2)\n    i, j = (X* data.shape).astype(int).T\n    \n    mask = (data[i, j] < 1)\n    X = X[mask]\n    X[:, 0] *= (data.shape[0] \/ data.shape[1])\n    X = X[:N]\n\n    return X[np.argsort(X[:, 0])]\n\nX = make_hello(1000)\ncolorsize = dict(c = X[:, 0], cmap = plt.cm.get_cmap('rainbow', 5))\nplt.scatter(X[:, 0], X[:, 1], **colorsize)\nplt.axis('equal');\nplt.show()","e1eea40a":"def make_hello(N = 10000, rseed = 42):\n    fig, ax = plt.subplots(figsize = (10, 1))\n    fig.subplots_adjust(left = 0, right = 1, bottom = 0, top =1)\n    ax.axis('off')\n    ax.text(0.5, 0.4, \"MEJBAH\", va = 'center', ha = 'center', weight = 'bold', size = 85)\n    fig.savefig('\/kaggle\/working\/mejbah.png')\n    plt.close(fig)\n    \n    data = imread('\/kaggle\/working\/mejbah.png')[::-1, :, 0].T\n    rng = np.random.RandomState(rseed)\n    X = rng.rand(4*N, 2)\n    i, j = (X* data.shape).astype(int).T\n    \n    mask = (data[i, j] < 1)\n    X = X[mask]\n    X[:, 0] *= (data.shape[0] \/ data.shape[1])\n    X = X[:N]\n\n    return X[np.argsort(X[:, 0])]\n\nX = make_hello(10000)\ncolorsize = dict(c = X[:, 0], cmap = plt.cm.get_cmap('rainbow', 3))\nplt.scatter(X[:, 0], X[:, 1], **colorsize)\nplt.axis('equal');\nplt.show()","daf940fb":"def make_hello(N = 10000, rseed = 42):\n    fig, ax = plt.subplots(figsize = (10, 1))\n    fig.subplots_adjust(left = 0, right = 1, bottom = 0, top =1)\n    ax.axis('off')\n    ax.text(0.5, 0.4, \"KAGGLE\", va = 'center', ha = 'center', weight = 'bold', size = 85)\n    fig.savefig('\/kaggle\/working\/kaggle.png')\n    plt.close(fig)\n    \n    data = imread('\/kaggle\/working\/kaggle.png')[::-1, :, 0].T\n    rng = np.random.RandomState(rseed)\n    X = rng.rand(4*N, 2)\n    i, j = (X* data.shape).astype(int).T\n    \n    mask = (data[i, j] < 1)\n    X = X[mask]\n    X[:, 0] *= (data.shape[0] \/ data.shape[1])\n    X = X[:N]\n\n    return X[np.argsort(X[:, 0])]\n\nX = make_hello(10000)\ncolorsize = dict(c = X[:, 0], cmap = plt.cm.get_cmap('rainbow', 6))\nplt.scatter(X[:, 0], X[:, 1], **colorsize)\nplt.axis('equal');\nplt.show()","53787964":"def make_hello(N = 10000, rseed = 42):\n    fig, ax = plt.subplots(figsize = (10, 1))\n    fig.subplots_adjust(left = 0, right = 1, bottom = 0, top =1)\n    ax.axis('off')\n    ax.text(0.5, 0.4, \"GOOGLE\", va = 'center', ha = 'center', weight = 'bold', size = 85)\n    fig.savefig('\/kaggle\/working\/google.png')\n    plt.close(fig)\n    \n    data = imread('\/kaggle\/working\/google.png')[::-1, :, 0].T\n    rng = np.random.RandomState(rseed)\n    X = rng.rand(4*N, 2)\n    i, j = (X* data.shape).astype(int).T\n    \n    mask = (data[i, j] < 1)\n    X = X[mask]\n    X[:, 0] *= (data.shape[0] \/ data.shape[1])\n    X = X[:N]\n\n    return X[np.argsort(X[:, 0])]\n\nX = make_hello(10000)\ncolorsize = dict(c = X[:, 0], cmap = plt.cm.get_cmap('rainbow', 6))\nplt.scatter(X[:, 0], X[:, 1], **colorsize)\nplt.axis('equal');\nplt.show()","30171028":"def rotate(X, angle):\n    theta = np.deg2rad(angle)\n    R = [[np.cos(theta), np.sin(theta)],\n        [np.sin(theta), np.cos(theta)]]\n    return np.dot(X, R)\n\nX2 = rotate(X, 20) + 5\nplt.scatter(X2[:, 0], X2[:, 1], **colorsize)\nplt.axis('equal')","1c0f1425":"def random_projection(X, dimension = 3, rseed= 42):\n    assert dimension >= X.shape[1]\n    rng = np.random.RandomState(rseed)\n    C = rng.randn(dimension, dimension)\n    e, V = np.linalg.eigh(np.dot(C, C.T))\n    return np.dot(X, V[:X.shape[1]])\n\n\nX3 = random_projection(X, 3)\nX3.shape","c1155397":"plt.figure(figsize = (10, 8))\nax = plt.axes(projection = '3d')\nax.scatter3D(X3[:, 0], X[:, 1], **colorsize)\nax.view_init(azim = 70, elev=50)","5bf47f8c":"# <b style=\"color:blue\">Manifold learning<\/b> is an approach to non-linear dimensionality reduction. Algorithms for this task are based on the idea that the dimensionality of many data sets is only artificially high.","33624069":"# Rotate The Text","92981849":"# ManiFold Learning: \"Hello World\"","9cdd844a":"# Projection:","21de7717":"## Author Name","e90903f6":"# Google Name","0bcd23ea":"# Kaggle Name"}}