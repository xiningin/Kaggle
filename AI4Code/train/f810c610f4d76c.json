{"cell_type":{"f6b74a9f":"code","4159f261":"code","b378061e":"code","0bea1be6":"code","e26a5325":"code","e8a796af":"code","d79578eb":"code","708069d0":"code","89dcf6f6":"code","a5f696f9":"code","3241defe":"code","2a249a92":"code","beca368a":"code","8effa9ce":"code","14e3edb2":"code","9c013512":"code","9e79744e":"code","033de65e":"code","c51dfa21":"code","3fde3a26":"code","2587b916":"code","25747a70":"code","f859cc5e":"code","c81071c8":"code","f48554f8":"code","9922a70c":"code","1f2d8acd":"code","122f371b":"code","4ae9eba3":"code","f0332e80":"code","fe197f2f":"code","f7a43f05":"code","a4ca7e38":"code","3097774a":"code","4491903b":"code","641319a8":"code","9eb8e375":"code","fe6c02ea":"code","ea8b48af":"code","4172be36":"code","12643ab2":"code","7c29fc9e":"code","ad265522":"code","51c2e821":"code","b4b40cfe":"code","dde9b572":"code","51f4c09d":"code","edc42d05":"markdown","ab6583f0":"markdown","17d57cf6":"markdown","2235d23d":"markdown","83be0197":"markdown","a213de4f":"markdown","a72ff870":"markdown","0ec5b151":"markdown"},"source":{"f6b74a9f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom pandas import Series\nfrom sklearn.feature_selection import f_classif, mutual_info_classif\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4159f261":"rand=42","b378061e":"DATA_DIR = '\/kaggle\/input\/sf-scoring\/'\n#DATA_DIR = '.\/'\ndf_train = pd.read_csv(DATA_DIR +'\/train.csv')\ndf_test = pd.read_csv(DATA_DIR +'\/test.csv')\nsample_submission = pd.read_csv(DATA_DIR+'\/sample_submission.csv')","0bea1be6":"sample_submission.shape","e26a5325":"df_test.shape","e8a796af":"df_train.info()","d79578eb":"df_train.head(5)","708069d0":"df_test.info()","89dcf6f6":"sample_submission.head(5)","a5f696f9":"sample_submission.info()","3241defe":"# \u0412\u0410\u0416\u041d\u041e! \u0434\u0440\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u0442\u0440\u0435\u0439\u043d \u0438 \u0442\u0435\u0441\u0442 \u0432 \u043e\u0434\u0438\u043d \u0434\u0430\u0442\u0430\u0441\u0435\u0442\ndf_train['sample'] = 1 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0440\u0435\u0439\u043d\ndf_test['sample'] = 0  # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0435\u0441\u0442\ndf_test['default'] = 0 # \u0432 \u0442\u0435\u0441\u0442\u0435 \u0443 \u043d\u0430\u0441 \u043d\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f Rating, \u043c\u044b \u0435\u0433\u043e \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u0442\u044c, \u043f\u043e \u044d\u0442\u043e\u043c\u0443 \u043f\u043e\u043a\u0430 \u043f\u0440\u043e\u0441\u0442\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043d\u0443\u043b\u044f\u043c\u0438\n\ndata = df_test.append(df_train, sort=False).reset_index(drop=True) # \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c","2a249a92":"# \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438\ndata.describe()","beca368a":"# \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \ndata.nunique(dropna=False)","8effa9ce":"# \u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u0434\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u0443 \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 default\ndata['default'].value_counts(ascending=True).plot(kind='barh')","14e3edb2":"# \u0443\u0434\u0430\u043b\u0438\u043c \u043d\u0435\u0437\u043d\u0430\u0447\u0430\u0449\u0438\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u044b\ndata.drop(['client_id','app_date',], axis = 1, inplace=True)","9c013512":"# \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432\ndata.isnull().sum(axis=0)","9e79744e":"data.education.value_counts().plot.bar()","033de65e":"# \u0417\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0435 education \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0447\u0430\u0441\u0442\u044b\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c 'SCH'\ndata['education'].fillna('SCH',inplace=True)","c51dfa21":"#\u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u0433\u0440\u0430\u0444\u0438\u043a\u0438 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445.\n#\u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435\nnum_cols = ['age', 'score_bki', 'decline_app_cnt', 'bki_request_cnt', 'income']\n#\u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435\ncat_cols = ['education', 'first_time', 'sna', 'work_address', 'home_address', 'region_rating']\n#\u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435\nbin_cols = ['sex', 'car', 'car_type', 'good_work', 'foreign_passport']","3fde3a26":"for i in num_cols:\n    plt.figure()\n    sns.distplot(data[i][data[i] > 0].dropna(), kde = False, rug=False)\n    plt.title(i)\n    plt.show()","2587b916":"# \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u0443\u0435\u043c \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\n#for i in num_cols:\n#    data[i] = np.log10(data[i])\n#    plt.figure()\n#    sns.distplot(data[i][data[i] > 0].dropna(), kde = False, rug=False)\n#    plt.title(i)\n#    plt.show()","25747a70":"# \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u0443\u0435\u043c \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\ndata['age'] = np.log(data['age']+1)\ndata['decline_app_cnt'] = np.log(data['decline_app_cnt']+1)\ndata['income'] = np.log(data['income']+1)\ndata['bki_request_cnt'] = np.log(data['bki_request_cnt']+1)","f859cc5e":"#\u041d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\nfrom sklearn.preprocessing import StandardScaler\n\nfor column in num_cols:\n    data[column] = StandardScaler().fit_transform(np.array(data[column].values).reshape(-1, 1))","c81071c8":"sns.boxplot(x='default',y='age',data=data)","f48554f8":"sns.boxplot(x='default',y='bki_request_cnt',data=data)","9922a70c":"sns.boxplot(x='default',y='income',data=data)","1f2d8acd":"data.groupby('default').income.mean()","122f371b":"data.head()","4ae9eba3":"#7. \u0417\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u044c \u043d\u0435\u043f\u0440\u0435\u0440\u044b\u0432\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445\n#\u0412 \u043e\u0441\u043d\u043e\u0432\u0435 \u043c\u0435\u0442\u043e\u0434\u0430 \u043e\u0446\u0435\u043d\u043a\u0438 \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u0438 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u043b\u0435\u0436\u0438\u0442 \u043e\u0434\u043d\u043e\u0444\u0430\u043a\u0442\u043e\u0440\u043d\u044b\u0439 \u0434\u0438\u0441\u043f\u0435\u0440\u0441\u0438\u043e\u043d\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437 (ANOVA). \n#\u041e\u0441\u043d\u043e\u0432\u0443 \u043f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043e\u0431\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u0434\u0432\u0443\u0445 \u0432\u044b\u0431\u043e\u0440\u043e\u0447\u043d\u044b\u0445 t-\u0442\u0435\u0441\u0442\u043e\u0432 \u0434\u043b\u044f \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u044b\u0445 \u0432\u044b\u0431\u043e\u0440\u043e\u043a (2-sample t). \n#\u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043c\u0435\u0440\u044b \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u0438 \u043c\u044b \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 f-\u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438. \n#\u0427\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438 \u0432\u044b\u0448\u0435, \u0442\u0435\u043c \u043c\u0435\u043d\u044c\u0448\u0435 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044c \u0442\u043e\u0433\u043e, \u0447\u0442\u043e \u0441\u0440\u0435\u0434\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043d\u0435 \u043e\u0442\u043b\u0438\u0447\u0430\u044e\u0442\u0441\u044f, \n#\u0438 \u0442\u0435\u043c \u0432\u0430\u0436\u043d\u0435\u0435 \u0434\u0430\u043d\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0434\u043b\u044f \u043d\u0430\u0448\u0435\u0439 \u043b\u0438\u043d\u0435\u0439\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438.\n#\u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435\n\nimp_num = pd.Series(f_classif(data[num_cols], data['default'])[0], index = num_cols)\nimp_num.sort_values(inplace = True)\nimp_num.plot(kind = 'barh')","f0332e80":"# \u0417\u0430\u043c\u0435\u043d\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0435 education \u043d\u0430 dummie-\u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435\ndata = pd.get_dummies(data, columns=['education'], dummy_na=False)","fe197f2f":"# \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u043c  LabelEncoder() \u0434\u043b\u044f \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0445 \u0438 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0432 \u0446\u0438\u0444\u0440\u043e\u0432\u043e\u0439 \u0444\u043e\u0440\u043c\u0430\u0442\nfrom sklearn import preprocessing\nle = preprocessing.LabelEncoder()\n\nfor column in bin_cols:\n    data[column] = le.fit_transform(data[column])\n    \n#columns = ['first_time', 'sna', 'work_address', 'home_address', 'region_rating']\n\n#for column in columns:\n#    data[column] = le.fit_transform(data[column])","f7a43f05":"data.info()","a4ca7e38":"data","3097774a":"# \u0422\u0435\u043f\u0435\u0440\u044c \u0432\u044b\u0434\u0435\u043b\u0438\u043c \u0442\u0435\u0441\u0442\u043e\u0432\u0443\u044e \u0447\u0430\u0441\u0442\u044c\ntrain_data = data.query('sample == 1').drop(['sample'], axis=1)\ntest_data = data.query('sample == 0').drop(['sample', 'default'], axis=1)\n\ny = train_data['default'].values  # \u043d\u0430\u0448 \u0442\u0430\u0440\u0433\u0435\u0442\n\u0445 = train_data.drop(['default'], axis=1)","4491903b":"# \u0412\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0435\u0439 train_test_split \u0434\u043b\u044f \u0440\u0430\u0437\u0431\u0438\u0432\u043a\u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\nfrom sklearn.model_selection import train_test_split\n\n# \u0432\u044b\u0434\u0435\u043b\u0438\u043c 20% \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e (\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 test_size)\n\u0445_train, \u0445_test, y_train, y_test = train_test_split(\u0445, y, test_size=0.2, stratify=y, shuffle=True, random_state=rand)","641319a8":"# \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c\n\u0445_train.shape, \u0445_test.shape, y_train.shape, y_test.shape","9eb8e375":"# \u0418\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438:\nfrom sklearn.linear_model import LogisticRegression # \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438\nfrom sklearn import metrics # \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u043c\u043e\u0434\u0435\u043b\u0438\nfrom sklearn.model_selection import GridSearchCV","fe6c02ea":"# \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c GridSearch \u043d\u0430 \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u043e\u043c \u043a\u043e\u043b-\u0432\u0435 \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0439 max_iter=50 \u0438 \u0441 \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u0434\u0435\u043b\u044c\u0442\u043e\u0439 \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u0430 tol1e-3\n# \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043c\u043e\u0434\u0435\u043b\u0438 \u0432 \u043f\u0435\u0440\u0432\u043e\u043c \u043f\u0440\u0438\u0431\u043b\u0438\u0436\u0435\u043d\u0438\u0438\nmodel = LogisticRegression(random_state=rand)\n\niter_ = 50\nepsilon_stop = 1e-3\n\nparam_grid = [\n    {'penalty': ['l1'], \n     'solver': ['liblinear', 'lbfgs'], \n     'class_weight':['none', 'balanced'], \n     'multi_class': ['auto','ovr'], \n     'max_iter':[iter_],\n     'tol':[epsilon_stop]},\n    {'penalty': ['l2'], \n     'solver': ['newton-cg', 'lbfgs', 'liblinear', 'sag', 'saga'], \n     'class_weight':['none', 'balanced'], \n     'multi_class': ['auto','ovr'], \n     'max_iter':[iter_],\n     'tol':[epsilon_stop]},\n    {'penalty': ['none'], \n     'solver': ['newton-cg', 'lbfgs', 'sag', 'saga'], \n     'class_weight':['none', 'balanced'], \n     'multi_class': ['auto','ovr'], \n     'max_iter':[iter_],\n     'tol':[epsilon_stop]},\n]\n\n## model \u0432\u0430\u0448\u0430 \u043c\u043e\u0434\u0435\u043b\u044c \u043b\u043e\u0433\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438\ngridsearch = GridSearchCV(model, param_grid, scoring='f1', n_jobs=-1, cv=5)\ngridsearch.fit(\u0445_train, y_train)\nmodel = gridsearch.best_estimator_\n\n##\u043f\u0435\u0447\u0430\u0442\u0430\u0435\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b\nbest_parameters = model.get_params()\nfor param_name in sorted(best_parameters.keys()):\n        print('\\t%s: %r' % (param_name, best_parameters[param_name]))","ea8b48af":"model = LogisticRegression(tol=0.001,solver='newton-cg', max_iter=50, class_weight='balanced', random_state=rand)\nmodel.fit(\u0445_train, y_train)\ny_pred = model.predict(\u0445_test)","4172be36":"from sklearn.metrics import classification_report\ntarget_names = ['class 0', 'class 1']\nclassification_report = classification_report(y_test, y_pred, target_names=target_names)\nprint(classification_report)","12643ab2":"# \u041e\u0442\u0440\u0438\u0441\u043e\u0432\u0430\u0442\u044c ROC \u043a\u0440\u0438\u0432\u0443\u044e\nfrom sklearn.metrics import mean_squared_error, f1_score, accuracy_score, roc_curve, roc_auc_score,confusion_matrix\nfrom matplotlib import pyplot as plt\n\n# \u041f\u043e\u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f ROC \u043a\u0440\u0438\u0432\u043e\u0439 \u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u043f\u043e\u0434 \u043a\u0440\u0438\u0432\u043e\u0439 AUC\nfpr, tpr, thresholds = roc_curve(y_train,model.predict_proba(\u0445_train).T[1])\nroc_auc = roc_auc_score(y_train,model.predict_proba(\u0445_train).T[1])   \nplt.figure()\nplt.plot(fpr, tpr, label=f'AUC = {roc_auc:.4f}')\nplt.title('Logistic Regression ROC AUC = %0.4f' % roc_auc)\nplt.xlabel('False positive rate (FPR)')\nplt.ylabel('True positive rate (TPR)')\nplt.legend(loc = 'lower right')","7c29fc9e":"#\u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u043e\u0448\u0438\u0431\u043e\u043a\nprint('confusion_matrix:')\nprint(confusion_matrix(y_test,y_pred))","ad265522":"#\u043e\u0431\u0443\u0447\u0430\u0435\u043c \u0444\u0438\u043d\u0430\u043b\u044c\u043d\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0430 \u0432\u0441\u0435\u0445 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0438 \u0434\u0430\u043d\u043d\u044b\u0445\nmodel_final = LogisticRegression(tol=0.001,solver='newton-cg', max_iter=50, class_weight='balanced', random_state=rand)\nmodel_final.fit(\u0445, y)","51c2e821":"predict_submission = model_final.predict(test_data)","b4b40cfe":"sample_submission['default'] = predict_submission\nsample_submission.to_csv('submission.csv', index=False)\nsample_submission.head(10)","dde9b572":"sample_submission.describe()","51f4c09d":"!kaggle competitions submit -c sf-scoring -f ssubmission.csv -m \"Message\"\n# !kaggle competitions submit your-competition-name -f submission.csv -m 'My submission message'","edc42d05":"## \u0417\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u044c \u043d\u0435\u043f\u0440\u0435\u0440\u044b\u0432\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445","ab6583f0":"\u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u0431\u043e\u043a\u0441\u043f\u043b\u043e\u0442\u044b \u0434\u043b\u044f \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445","17d57cf6":"\u0414\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u044b \u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u043c \u0438\u043c\u0435\u044e\u0442 \u0431\u043e\u043b\u0435\u0435 \u043d\u0438\u0437\u043a\u0438\u0439 \u0434\u043e\u0445\u043e\u0434","2235d23d":"\u0414\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u044b \u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u043c \u043c\u043b\u0430\u0434\u0448\u0435","83be0197":"\u0414\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u044b \u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u043c \u0438\u043c\u0435\u044e\u0442 \u0431\u043e\u043b\u044c\u0448\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u0411\u041a\u0418","a213de4f":"## \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f","a72ff870":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u0435:\n\nclient_id\t\u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\napp_date - \u0434\u0430\u0442\u0430 \u043f\u043e\u0434\u0430\u0447\u0438 \u0437\u0430\u044f\u0432\u043a\u0438\neducation\t\u0443\u0440\u043e\u0432\u0435\u043d\u044c \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f\nsex\t\u043f\u043e\u043b \u0437\u0430\u0451\u043c\u0449\u0438\u043a\u0430\nage\t\u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u0437\u0430\u0451\u043c\u0449\u0438\u043a\u0430\ncar\t\u0444\u043b\u0430\u0433 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f\ncar_type\t\u0444\u043b\u0430\u0433 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f-\u0438\u043d\u043e\u043c\u0430\u0440\u043a\u0438\ndecline_app_cnt\t\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0448\u043b\u044b\u0445 \u0437\u0430\u044f\u0432\u043e\u043a\ngood_work\t\u0444\u043b\u0430\u0433 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u00ab\u0445\u043e\u0440\u043e\u0448\u0435\u0439\u00bb \u0440\u0430\u0431\u043e\u0442\u044b\nscore_bki - \u0441\u043a\u043e\u0440\u0438\u043d\u0433\u043e\u0432\u044b\u0439 \u0431\u0430\u043b\u043b \u043f\u043e \u0434\u0430\u043d\u043d\u044b\u043c \u0438\u0437 \u0411\u041a\u0418\nbki_request_cnt\t\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u0411\u041a\u0418\nregion_rating - \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0440\u0435\u0433\u0438\u043e\u043d\u0430\nhome_address\t\u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0437\u0430\u0442\u043e\u0440 \u0434\u043e\u043c\u0430\u0448\u043d\u0435\u0433\u043e \u0430\u0434\u0440\u0435\u0441\u0430\nwork_address\t\u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0437\u0430\u0442\u043e\u0440 \u0440\u0430\u0431\u043e\u0447\u0435\u0433\u043e \u0430\u0434\u0440\u0435\u0441\u0430\nincome\t\u0434\u043e\u0445\u043e\u0434 \u0437\u0430\u0451\u043c\u0449\u0438\u043a\u0430\nsna - \u0441\u0432\u044f\u0437\u044c \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430 \u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c\u0438 \u0431\u0430\u043d\u043a\u0430\nfirst_time - \u0434\u0430\u0432\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0435\nforeign_passport\t\u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0437\u0430\u0433\u0440\u0430\u043d\u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430\ndefault\t\u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0434\u0435\u0444\u043e\u043b\u0442\u0430","0ec5b151":"C: 1.0\n\tclass_weight: 'balanced'\n\tdual: False\n\tfit_intercept: True\n\tintercept_scaling: 1\n\tl1_ratio: None\n\tmax_iter: 50\n\tmulti_class: 'auto'\n\tn_jobs: None\n\tpenalty: 'none'\n\trandom_state: 42\n\tsolver: 'newton-cg'\n\ttol: 0.001\n\tverbose: 0\n\twarm_start: False"}}