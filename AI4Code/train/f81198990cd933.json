{"cell_type":{"f65ec94a":"code","388442ad":"code","97f626e3":"code","2d9e191f":"code","c6090956":"code","5181385f":"code","268dec64":"code","64cc2542":"code","88dbf542":"code","b57312fc":"code","634f2768":"code","e3313ad0":"code","d7c16fa7":"code","d74df804":"code","5a5716e7":"code","ee9d2f75":"code","35ff0f4d":"code","7e97091c":"code","8b6ff124":"code","be2daa88":"code","5640cf8a":"code","12df38b0":"code","650d5033":"code","2af66a1d":"code","7feaec7f":"code","18094077":"markdown","b05365db":"markdown","575a76c6":"markdown","1f8d3092":"markdown","078fee3a":"markdown","6a6d2120":"markdown","0497123a":"markdown","31d50451":"markdown","b11d1cbb":"markdown","20731a52":"markdown","a715616c":"markdown","fa3101a4":"markdown","787c136a":"markdown","5604db8c":"markdown","2839ef9a":"markdown","91a3003b":"markdown","af52e1ca":"markdown","ece8777d":"markdown","64e70a20":"markdown","8389c7b0":"markdown","0bdc9c68":"markdown","c4e4d8d6":"markdown","ed322465":"markdown"},"source":{"f65ec94a":"import numpy as np \nimport pandas as pd \nfrom tqdm.notebook import tqdm\n\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots\n\nfrom fbprophet import Prophet\n\nfrom joblib import Parallel, delayed","388442ad":"def reduce_mem_usage(new_data: pd.DataFrame, verbose: bool=True) -> pd.DataFrame:\n    \"\"\"\n    \u30e1\u30e2\u30ea\u306e\u4f7f\u7528\u91cf\u3092\u524a\u6e1b\u3059\u308b\n\n    Parameters\n    ----------\n    new_data : pd.DataFrame\n        memory\u3092\u524a\u6e1b\u3057\u305f\u3044\u30c6\u30fc\u30d6\u30eb\u30c7\u30fc\u30bf\n    verbose : bool\n        memory\u524a\u6e1b\u91cf\u306e\u6a19\u6e96\u51fa\u529b\u306e\u6709\u7121\n\n    Returns\n    -------\n    new_data : new_data.DataFrame\n        memory\u524a\u6e1b\u5f8c\u30c6\u30fc\u30d6\u30eb\u30c7\u30fc\u30bf\n    \"\"\"\n    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']    # \u60f3\u5b9a\u3055\u308c\u308b\u30c7\u30fc\u30bf\u306e\u578b\n    start_mem = new_data.memory_usage().sum() \/ 1024**2    # \u521d\u671f\u306e\u30e1\u30e2\u30ea\u306e\u4f7f\u7528\u91cf\n    \n    # \u5217\u3054\u3068\u306e\u578b\u6307\u5b9a\u3092\u884c\u3046\u305f\u3081\u306e\u30eb\u30fc\u30d7\n    for col in tqdm(new_data.columns):\n        col_type = new_data[col].dtypes\n        # \u578b\u304c\u6570\u5024\u578b\u306e\u5834\u5408\u306f\u30ad\u30e3\u30b9\u30c8\u3059\u308b\n        if col_type in numerics: \n            c_min = new_data[col].min()\n            c_max = new_data[col].max()\n            # \u578b\u304cint\u578b\u306e\u5834\u5408\n            if str(col_type)[:3] == 'int':\n                # \u6700\u5c0f\u5024\u3068\u6700\u5927\u5024\u306e\u5024\u306b\u5fdc\u3058\u3066\u9069\u5b9c\u30ad\u30e3\u30b9\u30c8\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    new_data[col] = new_data[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    new_data[col] = new_data[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    new_data[col] = new_data[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    new_data[col] = new_data[col].astype(np.int64)  \n            # \u578b\u304cfloat\u578b\u306e\u5834\u5408\n            else:\n                # \u6700\u5c0f\u5024\u3068\u6700\u5927\u5024\u306e\u5024\u306b\u5fdc\u3058\u3066\u9069\u5b9c\u30ad\u30e3\u30b9\u30c8\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    new_data[col] = new_data[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    new_data[col] = new_data[col].astype(np.float32)\n                else:\n                    new_data[col] = new_data[col].astype(np.float64)    \n    end_mem = new_data.memory_usage().sum() \/ 1024**2    # \u524a\u6e1b\u5f8c\u306e\u30e1\u30e2\u30ea\u306e\u4f7f\u7528\u91cf\n    if verbose:    # \u6a19\u6e96\u51fa\u529b\n        print(f'Mem. usage decreased to {end_mem:5.2f} Mb ({(100 * (start_mem - end_mem) \/ start_mem):.1f}% reduction)')\n    return new_data","97f626e3":"# load data with reducing memory usage\ncalender = reduce_mem_usage(pd.read_csv('..\/input\/m5-forecasting-accuracy\/calendar.csv'))\nvalidate = reduce_mem_usage(pd.read_csv('..\/input\/m5-forecasting-accuracy\/sales_train_validation.csv'))\nsample_submission = reduce_mem_usage(pd.read_csv('..\/input\/m5-forecasting-accuracy\/sample_submission.csv'))\nprices = reduce_mem_usage(pd.read_csv('..\/input\/m5-forecasting-accuracy\/sell_prices.csv'))\nevaluate = reduce_mem_usage(pd.read_csv('..\/input\/m5-forecasting-accuracy\/sales_train_evaluation.csv'))","2d9e191f":"# show head of dataframe\ncalender.head()","c6090956":"# null_check\ncalender.isnull().sum().sort_values(ascending = False)","5181385f":"# show head of dataframe\nvalidate.head()","268dec64":"# null check\nvalidate.isnull().sum().sort_values(ascending = False)","64cc2542":"# show head of dataframe\nsample_submission.head()","88dbf542":"# show head of dataframe\nprices.head()","b57312fc":"# null check\nprices.isnull().sum().sort_values(ascending = False)","634f2768":"# show head of dataframe\nevaluate.head()","e3313ad0":"# null check\nevaluate.isnull().sum().sort_values(ascending = False)","d7c16fa7":"# \u65e5\u4ed8\u30c7\u30fc\u30bf\u306f\u4eca\u5f8c\u306e\u53ef\u8996\u5316\u3067\u5fc5\u8981\u306a\u306e\u3067\u914d\u5217\u3068\u3057\u3066\u629c\u304d\u51fa\u3059\ndate_list = calender.date.to_list()\n\n# validate\u306edf\u306ecolumns\u304b\u3089d_\u306e\u3082\u306e\u3092\u629c\u304d\u51fa\u3059\nids = sorted(list(set(validate['id'])))\nd_cols = [c for c in validate.columns if 'd_' in c]\n\n# \u9069\u5f53\u306b\u30c7\u30fc\u30bf\u3092\u629c\u304d\u51fa\u3059\nx_1 = validate.loc[10, d_cols].to_list()\nx_2 = validate.loc[100, d_cols].to_list()\nx_3 = validate.loc[1000, d_cols].to_list()\n\n# plotly\u3092\u5229\u7528\u3057\u305f\u53ef\u8996\u5316\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=date_list[:len(x_1)], y=x_1,\n                    mode='lines', name=validate.iloc[10,0],opacity=0.5))\n\nfig.add_trace(go.Scatter(x=date_list[:len(x_2)], y=x_2,\n                    mode='lines', name=validate.iloc[100,0],opacity=0.5))\n\nfig.add_trace(go.Scatter(x=date_list[:len(x_3)], y=x_3,\n                    mode='lines', name=validate.iloc[1000,0],opacity=0.5))\n\n# \u30c7\u30fc\u30bf\u30b9\u30bf\u30f3\u30d7\u306e\u5b58\u5728\u3059\u308b\u30b0\u30e9\u30d5\u3092\u6271\u3044\u3084\u3059\u304f\u3059\u308b\nfig.update_layout(\n    xaxis=dict(\n        rangeselector=dict(\n            buttons=list([\n                dict(count=1, label=\"month\", step=\"month\", stepmode=\"backward\"),\n                dict(count=6, label=\"6month\", step=\"month\", stepmode=\"backward\"),\n                dict(count=1, label=\"year\", step=\"year\", stepmode=\"backward\"),\n                dict(step=\"all\")])),\n        rangeslider=dict(visible=True),\n        type=\"date\"))\nfig.show()","d74df804":"def line_graph(df: pd.DataFrame, opacity=1, use_rolling: bool=True, window: int=7, colors=px.colors.qualitative.Plotly) -> None:\n    \"\"\"\n    \u6298\u308c\u7dda\u30b0\u30e9\u30d5\u3092\u8868\u793a\u3059\u308b\n\n    Parameters\n    ----------\n    df : pd.DataFrame\n        \u30b0\u30e9\u30d5\u3092\u8868\u793a\u3055\u305b\u305f\u3044\u30c6\u30fc\u30d6\u30eb\u30c7\u30fc\u30bf\n    opacity : int\n        \u30b0\u30e9\u30d5\u306e\u6fc3\u3055\n    use_rolling : bool\n        \u79fb\u52d5\u5e73\u5747\u306e\u30b0\u30e9\u30d5\u3092\u8868\u793a\u3059\u308b\u304b\u3069\u3046\u304b\n    window : int\n        \u79fb\u52d5\u5e73\u5747\u3092\u5229\u7528\u3059\u308b\u969b\u306e\u7a93\u5e45\n    colors :\n        \u30b0\u30e9\u30d5\u306e\u8272\n    \"\"\"\n    org_opacity = opacity\n    fig = go.Figure()\n    data_length = len(df.columns)\n    for i, (idx, row) in enumerate(df.iterrows()):\n        # \u79fb\u52d5\u5e73\u5747\n        if use_rolling:\n            fig.add_trace(go.Scatter(x=date_list[:data_length], y=row.rolling(window).mean(), line=dict(color=colors[i]),\n                            mode='lines', name=f'{idx}_rolling',opacity=opacity))\n            opacity = 0.2\n        fig.add_trace(go.Scatter(x=date_list[:data_length], y=row, line=dict(color=colors[i]),\n                    mode='lines', name=idx,opacity=opacity))\n        opacity=org_opacity\n    # \u30c7\u30fc\u30bf\u30b9\u30bf\u30f3\u30d7\u306e\u5b58\u5728\u3059\u308b\u30b0\u30e9\u30d5\u3092\u6271\u3044\u3084\u3059\u304f\u3059\u308b\n    fig.update_layout(\n        xaxis=dict(\n            rangeselector=dict(\n                buttons=list([\n                    dict(count=1, label=\"month\", step=\"month\", stepmode=\"backward\"),\n                    dict(count=6, label=\"6month\", step=\"month\", stepmode=\"backward\"),\n                    dict(count=1, label=\"year\", step=\"year\", stepmode=\"backward\"),\n                    dict(step=\"all\")])),\n            rangeslider=dict(visible=True),\n            type=\"date\"))\n    fig.show()","5a5716e7":"# \u5e97\u8217\u6bce\u306e\u5408\u8a08\u3092\u6c42\u3081\u308b\nstore_sales = validate.groupby('store_id').sum()\n# \u30b0\u30e9\u30d5\u306e\u8868\u793a\nline_graph(store_sales, use_rolling=True)","ee9d2f75":"# \u30ab\u30c6\u30b4\u30ea\u6bce\u306e\u5408\u8a08\u3092\u6c42\u3081\u308b\ndept_sales = validate.groupby('dept_id').sum()\n# \u30b0\u30e9\u30d5\u306e\u8868\u793a\nline_graph(dept_sales, use_rolling=True)","35ff0f4d":"def box_plot(df: pd.DataFrame, colors=px.colors.qualitative.Plotly) -> None:\n    \"\"\"\n    \u6298\u308c\u7dda\u30b0\u30e9\u30d5\u3092\u8868\u793a\u3059\u308b\n\n    Parameters\n    ----------\n    df : pd.DataFrame\n        \u30b0\u30e9\u30d5\u3092\u8868\u793a\u3055\u305b\u305f\u3044\u30c6\u30fc\u30d6\u30eb\u30c7\u30fc\u30bf\n    colors :\n        \u30b0\u30e9\u30d5\u306e\u8272\n    \"\"\"\n    fig = go.Figure()\n    for i, (idx, row) in enumerate(df.iterrows()):\n        fig.add_trace(go.Box(\n            y=row,\n            name=idx,\n            marker_color=colors[i],\n            boxmean=True # represent mean\n        ))\n    fig.show()","7e97091c":"box_plot(store_sales)","8b6ff124":"box_plot(dept_sales)","be2daa88":"sum_group = evaluate.groupby(['dept_id','store_id'], as_index=False).sum()\n_denominator_ave = sum_group[['dept_id','store_id']]\n\ndenominator_ave = pd.DataFrame(sum_group.iloc[:,1550:].mean(axis=1),columns=['denominator_ave'])\ndenominator_ave = pd.concat([_denominator_ave, denominator_ave], axis=1)\ndenominator_ave.head()","5640cf8a":"index = evaluate[['id','dept_id','store_id']]\nnumerator_ave = pd.DataFrame(evaluate.iloc[:,1550:].mean(axis=1),columns=['numerator_ave'])\nnumerator_ave = pd.concat([index, numerator_ave], axis=1)\nnumerator_ave.head()","12df38b0":"fraction = pd.merge(numerator_ave, denominator_ave, on =['dept_id','store_id'])\nfraction['fraction_ave'] = fraction['numerator_ave']\/fraction['denominator_ave']\nfraction","650d5033":"holiday1 = calender.iloc[858:1969,].loc[calender['event_name_1'].notnull()][['event_name_1','date']].rename(columns={'event_name_1':'holiday','date':'ds'})\nholiday2 = calender.iloc[858:1969,].loc[calender['event_name_1'].notnull()][['event_type_1','date']].rename(columns={'event_type_1':'holiday','date':'ds'})\nholiday3 = calender.iloc[858:1969,].loc[calender['event_name_2'].notnull()][['event_name_2','date']].rename(columns={'event_name_2':'holiday','date':'ds'})\nholiday4 = calender.iloc[858:1969,].loc[calender['event_name_2'].notnull()][['event_type_2','date']].rename(columns={'event_type_2':'holiday','date':'ds'})\nholidays = pd.concat((holiday1, holiday2,holiday3,holiday4))\nholidays.head()","2af66a1d":"def prophet(i):\n    \"\"\"\n    \u9700\u8981\u306e\u4e88\u6e2c\u3092\u3059\u308b\u95a2\u6570\n\n    Parameters\n    ----------\n    i : int\n        \u4e88\u6e2c\u3057\u305f\u3044pandas\u306e\u884c\n\n    Returns\n    -------\n    pred: pd.DataFrame\n        \u4e88\u6e2c\u30c6\u30fc\u30d6\u30eb\u30c7\u30fc\u30bf\n    \"\"\"\n    # \u4e88\u6e2c\u30e2\u30c7\u30eb\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\n    # yealy_seasonality\u5927\u304d\u3044\u307b\u3069\u5468\u671f\u6027\u3092\u5f37\u304f\u8003\u616e\u3059\u308b\n    # \u4f11\u65e5\u306e\u30c7\u30fc\u30bf\u306f\u3053\u3053\u3067\u5f15\u6570\u3068\u3057\u3066\u5165\u529b\u3059\u308b\n    m = Prophet(yearly_seasonality=24, holidays=holidays)\n    \n    # \u5468\u671f\u6027\u306e\u6307\u5b9a(EDA\u3067\u5206\u304b\u3063\u305f3\u3064\u306e\u5468\u671f\u3092\u8003\u616e\u3059\u308b)\n    m.add_seasonality(name='yearly', period=365, fourier_order=10)\n    m.add_seasonality(name='monthly', period=365\/12, fourier_order=10)\n    m.add_seasonality(name='weekly', period=7, fourier_order=5)\n    \n    # \u4e88\u6e2c\u3057\u305f\u3044\u30e2\u30c7\u30eb\u306e\u5165\u529b\n    # ds:datestamp y:\u6b63\u89e3\u30e9\u30d9\u30eb\n    tsdf = pd.DataFrame({\n      'ds': pd.to_datetime(calender.iloc[858:1941,]['date'].reset_index(drop=True)),\n      'y': sum_group.iloc[i,860:1943].reset_index(drop=True),\n    })\n    # \u8aac\u660e\u5909\u6570\u306e\u8ffd\u52a0\uff08\u5e74\u6708\u65e5\u306e\u60c5\u5831\u3092\u8ffd\u52a0\u3059\u308b\uff09\n    tsdf['wday']=calender.iloc[858:1941,]['wday'].reset_index(drop=True)\n    tsdf['month']=calender.iloc[858:1941,]['month'].reset_index(drop=True)\n    tsdf['year']=calender.iloc[858:1941,]['year'].reset_index(drop=True)\n    #m.add_regressor('sell_price')\n    m.add_regressor('wday')\n    m.add_regressor('month')\n    m.add_regressor('year')\n    # \u5b66\u7fd2\n    m.fit(tsdf)\n    # \u4e88\u6e2c\u3059\u308b\u7bc4\u56f2\u3092\u6307\u5b9a\n    future = m.make_future_dataframe(periods=28)\n    future['wday']=calender.iloc[858:1969,]['wday'].reset_index(drop=True)\n    future['month']=calender.iloc[858:1969,]['month'].reset_index(drop=True)\n    future['year']=calender.iloc[858:1969,]['year'].reset_index(drop=True)\n    # \u4e88\u6e2c\n    forecast = m.predict(future)\n    pred = pd.DataFrame(forecast.iloc[1083:1112,]['yhat'])\n    pred['dept_id']=denominator_ave.iloc[i,]['dept_id']\n    pred['store_id']=denominator_ave.iloc[i,]['store_id']\n    return pred","7feaec7f":"# fbprophet\u306fGPU\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u306a\u3044\u306e\u3067CPU\u306e\u4e26\u5217\u8a08\u7b97\u3067\u51e6\u7406\u901f\u5ea6\u3092\u62c5\u4fdd\u3059\u308b\npred = Parallel(n_jobs=-1)(delayed(prophet)(i) for i in range(denominator_ave.shape[0]))\n\n# \u5404\u5546\u54c1\u3054\u3068\u306b\u63a8\u6e2c\u3055\u308c\u305f\u9700\u8981\u3092\u7d44\u307f\u5408\u308f\u305b\u308b\npreds = pd.concat(pred[0:70])\npreds['period']=preds.index\npreds['period']=preds['period']-1082\n\n# \u63d0\u51fa\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306b\u9069\u3057\u305f\u5f62\u306b\u5909\u5f62\u3059\u308b\npivot_preds=preds.pivot_table(index=['dept_id','store_id'], columns='period', values='yhat')\nprev_submission = pd.merge(fraction, pivot_preds, on =['dept_id','store_id'])\nfor i in range(28):\n    # \u6a19\u6e96\u5316\u3057\u305f\u5024\u3092\u3082\u3068\u306b\u623b\u3059\n    prev_submission.iloc[:,(6+i)] = prev_submission.iloc[:,(6+i)]*prev_submission['fraction_ave']\n\nsubmission=prev_submission[['id', 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]]\nsubmission.columns = sample_submission.columns\nsubmission_index=sample_submission[['id']]\nsubmission = pd.merge(submission_index, submission, on = 'id', how = 'left')\nsubmission = submission.fillna(0)    # \u6b20\u640d\u5024\u30920\u306b\u7f6e\u304d\u63db\u3048\u308b\nsubmission.to_csv('submission.csv',index=False)    # \u63d0\u51fa\u7528\u306ecsv\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3059\u308b","18094077":"## \u30c7\u30fc\u30bf\u306e\u53ef\u8996\u5316\n\u3069\u306e\u3088\u3046\u306a\u5f62\u5f0f\u3067\u30c7\u30fc\u30bf\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u304b\u306f\u78ba\u8a8d\u3067\u304d\u305f\uff0e<br>\n\u666e\u6bb5Notebook\u306f\u4f7f\u308f\u306a\u3044\u304c\uff0cmatplotlib\u3088\u308aplotly\u306e\u65b9\u304c\u30b0\u30e9\u30d5\u306e\u62e1\u5927\u3084\u5024\u306e\u53c2\u7167\u306a\u3069\u304c\u3067\u304d\u4fbf\u5229\u305d\u3046\uff0e<br>\n\u52c9\u5f37\u304c\u3066\u3089\uff0c\u4eca\u56de\u306fplotly\u3067\u30b0\u30e9\u30d5\u306e\u8868\u793a\u3092\u3057\u3066\u307f\u308b\n### **sales_train_validation.csv**\u306b\u3064\u3044\u3066\n#### \u9069\u5f53\u306a\u30c7\u30fc\u30bf\u3067\u306e\u9700\u8981","b05365db":"\u521d\u3081\u3066\u306eplotly\u3060\u304c\uff0c\u304b\u306a\u308a\u4fbf\u5229\u306a\u4e88\u611f\u304c\u3059\u308b\uff0e<br>\n\u3068\u308a\u3042\u3048\u305a\uff0c\u9069\u5f53\u306b\u53d6\u308a\u51fa\u3057\u305f\u30b5\u30f3\u30d7\u30eb\u304b\u3089\u5206\u304b\u308b\u3053\u3068\u306f\u4ee5\u4e0b\u306e\u3053\u3068\n- HOBBIE_1_011\u306e\u3088\u3046\u306b\u9700\u8981\u306b\u6ce2\u304c\u3042\u308b\u5546\u54c1\u304c\u3042\u308b\u3068\u3044\u3046\u3053\u3068\n- HOBBIE_1_105\u306e\u3088\u3046\u306b\u3042\u308b\u7a0b\u5ea6\u901a\u5e74\u9700\u8981\u304c\u3042\u308b\u5546\u54c1\u304c\u3042\u308b\u3053\u3068\n- \u3044\u305a\u308c\u306b\u3057\u3066\u3082\u304b\u306a\u308a\u30ce\u30a4\u30b8\u30fc\u306a\u30c7\u30fc\u30bf\u3067\u3042\u308b\u3053\u3068\n\n\u6b21\u306f\u5e97\u8217\u3054\u3068\u306e\u9700\u8981\u306e\u5408\u8a08\u3092\u898b\u3066\u307f\u308b<br>\n\u3053\u308c\u3092\u898b\u308c\u3070\u3082\u3046\u5c11\u3057\u50be\u5411\u304c\u898b\u3048\u3066\u304f\u308b\u3060\u308d\u3046<br>\n\u3053\u306e\u5f8c\u3067\u6570\u56de\u30b0\u30e9\u30d5\u3092\u8868\u793a\u3059\u308b\u306e\u3067\uff0c\u95a2\u6570\u3092\u4f5c\u3063\u3066\u304a\u304f","575a76c6":"\u5468\u671f\u306b\u95a2\u3057\u3066\u306f\u5e97\u8217\u3054\u3068\u306e\u30b0\u30e9\u30d5\u3068\u540c\u69d8\u306e\u50be\u5411\uff0e<br>\n\u30ab\u30c6\u30b4\u30ea\u5225\u3067\u7279\u6709\u306a\u306e\u306f\n- HOUSEHOLD_1\u304c\u5e74\u3005\u58f2\u308a\u4e0a\u3052\u3092\u4f38\u3070\u3057\u3066\u3044\u308b\u3053\u3068\n- FOOD_3\u306e\u58f2\u308a\u4e0a\u3052\u304c\u9855\u8457\u306b\u9ad8\u3044\n- HOBBIES_2\u306f\u307b\u307c\u58f2\u308c\u306a\u3044\n\n\u5468\u671f\u6027\u306f\u898b\u3048\u3066\u304d\u305f\u306e\u3067\u4eca\u5ea6\u306f\u68d2\u30b0\u30e9\u30d5\u3067\u58f2\u308a\u4e0a\u3052\u306a\u3069\u306e\u50be\u5411\u3092\u898b\u3066\u307f\u308b<br>\n\u3053\u3061\u3089\u306f\u30dc\u30c3\u30af\u30b9\u30d7\u30ed\u30c3\u30c8\u3067\u8868\u793a\u3057\u305f\u3044\u306e\u3067\uff0c\u3053\u3061\u3089\u3082\u95a2\u6570\u3092\u4f5c\u3063\u3066\u304a\u304f","1f8d3092":"\u5e97\u8217\u3054\u3068\u306b\u9700\u8981\u306e\u5408\u8a08\u30681\u9031\u9593\u306e\u79fb\u52d5\u5e73\u5747\u3092\u30d7\u30ed\u30c3\u30c8\u3057\u3066\u307f\u305f\u3068\u3053\u308d\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u7279\u5fb4\u304c\u898b\u3048\u3066\u304d\u305f<br>\n- 12\/25\u30af\u30ea\u30b9\u30de\u30b9\u306fwalmart\u304c\u30af\u30ea\u30b9\u30de\u30b9\u4f11\u65e5\u3067\u3042\u308b\u3053\u3068\u304b\u3089\u6bce\u5e74\u58f2\u308c\u884c\u304d\u304c0\u8fd1\u304f\u306b\u306a\u3063\u3066\u3044\u308b(\u306a\u305c\u304b\u58f2\u308c\u3066\u3044\u308b\u5546\u54c1\u3082\u3042\u308b\u304c\uff0e\uff0e\uff0e)\n- 1\u9031\u9593\u3054\u3068\u306e\u5468\u671f\u304c\u3042\u308a\uff0c\u9031\u672b\u306e\u9700\u8981\u304c\u9ad8\u3044\n- 1\u304b\u6708\u3054\u3068\u306e\u5468\u671f\u304c\u3042\u308a\uff0c\u6708\u521d\u3081\u306e\u9700\u8981\u304c\u9ad8\u3044\n- 1\u5e74\u3054\u3068\u306e\u5468\u671f\u304c\u3042\u308a\uff0c\u590f\u306e\u9700\u8981\u304c\u9ad8\u3044\n- \u5168\u4f53\u7684\u306b\u58f2\u308a\u4e0a\u3052\u304c\u4f38\u3073\u3066\u3044\u308b\uff0e\n- \u58f2\u308a\u4e0a\u3052\u304c\u5897\u52a0\u3059\u308b\u6642\u671f\u3082\u3042\u308c\u3070\u6e1b\u5c11\u3059\u308b\u6642\u671f\u3082\u3042\u308b(\u9700\u8981\u306e\u30c8\u30ec\u30f3\u30c9)\n\n\u5168\u3066\u306e\u5e97\u8217\u304c\u3053\u308c\u306b\u5f53\u3066\u306f\u307e\u308b\u308f\u3051\u3067\u306f\u306a\u3044\u304c\uff0c\u76f4\u611f\u3068\u3042\u3063\u305f\u50be\u5411\u3067\u3042\u308b\u306e\u3067\u4e88\u6e2c\u30e2\u30c7\u30eb\u306b\u7d44\u307f\u8fbc\u307f\u305f\u3044<br>\n\u540c\u69d8\u306b\u30ab\u30c6\u30b4\u30ea\u3054\u3068\u306e\u30b0\u30e9\u30d5\u3082\u30d7\u30ed\u30c3\u30c8\u3057\u3066\u307f\u308b\n#### \u30ab\u30c6\u30b4\u30ea\u3054\u3068\u306e\u9700\u8981","078fee3a":"\u30ab\u30c6\u30b4\u30ea\u306b\u3088\u308b\u9700\u8981\u306e\u5dee\u306f\u5927\u304d\u3044\uff0e<br>\n\u4f8b\u3048\u3070FOODS_3\u306f\u5e73\u5747\u3057\u306617000\u500b\u306e\u9700\u8981\u304c\u6bce\u65e5\u3042\u308b\u306e\u306b\u5bfe\u3057\uff0cHOBBIES_2\u306f0\u500b\u306e\u9700\u8981\u3067\u3042\u308b\uff0e<br>\n\u307e\u305f\uff0c\u30c7\u30fc\u30bf\u306e\u3070\u3089\u3064\u304d\u3082FOOD_3\u306f\u5927\u304d\u3044\u304c\u305d\u306e\u307b\u304b\u306f\u6bd4\u8f03\u7684\u5c0f\u3055\u3044<br>\n\n\u4ee5\u4e0a\u306e\u3088\u3046\u306b\u5e97\u8217\u3084\u30ab\u30c6\u30b4\u30ea\u7279\u6709\u306e\u9700\u8981\u304c\u3042\u308b\u3053\u3068\u304c\u5206\u304b\u308b\u305f\u3081\uff0c\u6a5f\u68b0\u5b66\u7fd2\u3067\u6271\u3046\u969b\u306f\u5e97\u8217\u30fb\u30ab\u30c6\u30b4\u30ea\u3054\u3068\u306b\u6a19\u6e96\u5316\u3057\u305f\u3044\uff0e\n# \u6a5f\u68b0\u5b66\u7fd2\n\u3042\u308b\u7a0b\u5ea6EDA\u304c\u7d42\u308f\u308a\uff0c3\u3064\u306e\u5468\u671f\u6027\u304c\u3042\u308b\u3053\u3068\u3084\u571f\u65e5\u306e\u58f2\u308a\u4e0a\u3052\u304c\u9ad8\u3044\u3053\u3068\u306a\u3069\u304c\u5206\u304b\u3063\u305f\uff0e<br>\n\u3053\u306e\u3088\u3046\u306a\u60c5\u5831\u3092\u3082\u3068\u306b\u4e88\u6e2c\u3092\u884c\u3044\u305f\u3044\uff0e<br>\n\u307e\u305a\u306f\u30c6\u30fc\u30d6\u30eb\u30c7\u30fc\u30bf\u3092\u6a5f\u68b0\u5b66\u7fd2\u3067\u6271\u3044\u3084\u3059\u3044\u5f62\u306b\u5909\u5f62\u3057\u3066\u3044\u304f\uff0e<br>\n## \u30c7\u30fc\u30bf\u306e\u524d\u51e6\u7406\n\u6a5f\u68b0\u5b66\u7fd2\u3067\u306f\u5165\u529b\u306e\u5024\u3092\u6a19\u6e96\u5316\u3059\u308b\u3053\u3068\u304c\u591a\u3044\uff0e<br>\n\u6b63\u898f\u5316\u3059\u308b\u3082\u306e\u3084[-1,1]\u306e\u7bc4\u56f2\u306b\u674e\u30b9\u30b1\u30fc\u30eb\u3059\u308b\u3082\u306e\u306a\u3069\u304c\u3042\u308b\uff0e<br>\n\u4eca\u56de\u306f\u30dc\u30c3\u30af\u30b9\u30d7\u30ed\u30c3\u30c8\u304b\u3089\u308f\u304b\u3063\u305f\u5e97\u8217\u30fb\u30ab\u30c6\u30b4\u30ea\u3054\u3068\u306e\u3070\u3089\u3064\u304d\u3092\u8003\u616e\u3057\u3066\uff0c\u5e97\u8217\u30fb\u30ab\u30c6\u30b4\u30ea\u3054\u3068\u306e\u9700\u8981\u5272\u5408\u3067\u6a19\u6e96\u5316\u3059\u308b([\u53c2\u8003](https:\/\/www.kaggle.com\/raghvenbhati\/prophet-forecasts))\uff0e<br>\n\u307e\u305a\u306f`evaluate`\u306e\u30c7\u30fc\u30bf\u304b\u3089\u5e97\u8217\u3068\u30ab\u30c6\u30b4\u30ea\u3067\u30b0\u30eb\u30fc\u30d4\u30f3\u30b0\u3057\u305f\u96c6\u5408\u30c6\u30fc\u30d6\u30eb\u3092\u4f5c\u308b\uff08\u5206\u6bcd\u3068\u306a\u308b\uff09","6a6d2120":"# UNISYS \u30cf\u30a4\u30b9\u30ad\u30eb\u30a8\u30f3\u30b8\u30cb\u30a2 \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8ab2\u984c\n\u65e5\u672c\u30e6\u30cb\u30b7\u30b9\u306e\u9078\u8003\u3067\u4f7f\u7528\u3059\u308bNotebook\uff0e<br>\n# \u4eca\u56de\u306e\u65b9\u91dd\n- titanic\u3067\u632b\u6298\u3057\u3066\u4ee5\u6765\u306eKaggle\u3067\u3042\u308b\u306e\u3067\uff0c\u3044\u308d\u3093\u306aNotebook\u3092\u53c2\u8003\u306b\u3057\u3066\u3067\u304d\u308b\u3060\u3051\u4e88\u6e2c\u7cbe\u5ea6\u3092\u4e0a\u3052\u308b\uff0e\n- \u30c6\u30fc\u30d6\u30eb\u30c7\u30fc\u30bf\u3084\u9700\u8981\u306e\u4e88\u6e2c\u306f\u4eca\u307e\u3067\u3084\u3063\u305f\u3053\u3068\u304c\u306a\u3044\u306e\u3067\u521d\u5fc3\u8005\u3067\u3082\u7c21\u5358\u306b\u4e88\u6e2c\u3067\u304d\u308bfbprophet\u3067\u5b9f\u88c5\u3059\u308b\n\n# \u6e96\u5099\n## \u4eca\u56de\u4f7f\u7528\u3059\u308bPython\u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u30a4\u30f3\u30dd\u30fc\u30c8","0497123a":"\u5272\u5408\u3092\u8ffd\u52a0\u3059\u308b","31d50451":"`event_name`\u3068`event_type`\u306b\u306f`NaN`\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u306e\u3067\u6271\u3044\u6ce8\u610f\n### sales_train_validation.csv\u306b\u3064\u3044\u3066","b11d1cbb":"### sample_submission.csv\u306b\u3064\u3044\u3066","20731a52":"#### header\u306e\u5185\u8a33\n- id             : \u30ab\u30c6\u30b4\u30ea\u30fc\u30fb\u5e97\u8217\u306a\u3069\u306e\u60c5\u5831\u3092\u6301\u3063\u305fid (xxxx-yy-zz)<br>\n- F1~28          : \u305d\u306e\u65e5\u306e\u58f2\u308a\u4e0a\u3052<br>\n\n### sell_prices.csv\u306b\u3064\u3044\u3066","a715616c":"#### header\u306e\u5185\u8a33\n- id             : \u30ab\u30c6\u30b4\u30ea\u30fc\u30fb\u5e97\u8217\u306a\u3069\u306e\u60c5\u5831\u3092\u6301\u3063\u305fid (xxxx-yy-zz)<br>\n- item_id        : \u30a2\u30a4\u30c6\u30e0\u306eid<br>\n- dept_id        : \u90e8\u9580\u306eid<br>\n- cat_id         : \u30ab\u30c6\u30b4\u30ea\u30fc\u306eid<br>\n- store_id       : \u5e97\u8217id<br>\n- state_id       : \u5dde\u306eid<br>\n- d_x            : x\u65e5\u76ee\u306b\u58f2\u308c\u305f\u6570","fa3101a4":"fbprophet\u3067\u306f\u4e0d\u5b9a\u671f\u306b\u8868\u308c\u308b\u4f11\u65e5\u3092\u8003\u616e\u3057\u305f\u4e88\u6e2c\u304c\u3067\u304d\u308b\u306e\u3067\uff0c\u30a4\u30d9\u30f3\u30c8\u304c\u8d77\u3053\u3063\u305f\u65e5\u4ed8\u3092\u53d6\u308a\u51fa\u3059","787c136a":"#### header\u306e\u5185\u8a33\n- store_id       : \u5e97\u8217id<br>\n- item_id        : \u30a2\u30a4\u30c6\u30e0\u306eid<br>\n- wm_yr_wk       : \u571f\u66dc\u65e5\u306b+1\u3055\u308c\uff0c1\u5e74\u6bce\u306b100\u306e\u4f4d\u304c+1\u3055\u308c10\u306e\u4f4d\u4ee5\u4e0b\u306f\u30ea\u30bb\u30c3\u30c8\u3055\u308c\u308b\n- sell_price     : \u5546\u54c1\u306e\u5024\u6bb5","5604db8c":"#### \u5e97\u8217\u3054\u3068\u306e\u9700\u8981","2839ef9a":"\u6b21\u306f\u5206\u5b50\u3092\u8a08\u7b97\u3059\u308b","91a3003b":"## \u5b66\u7fd2\u3068\u4e88\u6e2c\n\u30c7\u30fc\u30bf\u306e\u524d\u51e6\u7406\u304c\u7d42\u308f\u3063\u305f\u306e\u3067\uff0c\u5b9f\u969b\u306b\u5b66\u7fd2\u3068\u4e88\u6e2c\u306b\u79fb\u308b\uff0e<br>\n\u4eca\u56de\u306ffbprophet\u3092\u5229\u7528\u3057\u3066\u4e88\u6e2c\u3092\u884c\u3046\uff0e<br>\n\u4eca\u56de\u30c7\u30fc\u30bf\u5206\u6790\u304b\u3089\u898b\u3048\u305f\u60c5\u5831\u3092\u542b\u3080\u4ee5\u4e0b\u306e\u6761\u4ef6\u3092\u8ffd\u52a0\u3067\u30e2\u30c7\u30eb\u306b\u7d44\u307f\u8fbc\u3080\n- EDA\u3067\u767a\u898b\u3067\u304d\u305f\u30c7\u30fc\u30bf\u306e\u5468\u671f\n- \u4f11\u65e5\u3084\u30a4\u30d9\u30f3\u30c8\u304c\u3042\u308b\u65e5\n- \u5e74\u6708\u65e5\u306e\u60c5\u5831\uff08\u5e74\u3005\u58f2\u308a\u4e0a\u3052\u304c\u4f38\u3073\u3066\u3044\u305f\u308a\uff0c\u30c8\u30ec\u30f3\u30c9\u304c\u3042\u308b\u305f\u3081\uff09","af52e1ca":"\u5e97\u8217\u306b\u3088\u308b\u9700\u8981\u306e\u5dee\u306f\u5927\u304d\u3044\uff0e<br>\n\u4f8b\u3048\u3070CA_3\u306f\u5e73\u5747\u3057\u30666000\u500b\u306e\u9700\u8981\u304c\u6bce\u65e5\u3042\u308b\u306e\u306b\u5bfe\u3057\uff0cCA_4\u306f2000\u500b\u306e\u9700\u8981\u3067\u3042\u308b\n#### \u30ab\u30c6\u30b4\u30ea\u3054\u3068\u306e\u9700\u8981","ece8777d":"#### header\u306e\u5185\u8a33\n- date           : \u30cf\u30a4\u30d5\u30f3\u3067\u533a\u5207\u3063\u3066\u3042\u308b\u65e5\u4ed8 (xxxx-yy-zz)<br>\n- wm_yr_wl       : \u571f\u66dc\u65e5\u306b+1\u3055\u308c\uff0c1\u5e74\u6bce\u306b100\u306e\u4f4d\u304c+1\u3055\u308c10\u306e\u4f4d\u4ee5\u4e0b\u306f\u30ea\u30bb\u30c3\u30c8\u3055\u308c\u308b<br>\n- weekday        : \u66dc\u65e5 (Saturday, Sunday, ...)<br>\n- wday           : \u66dc\u65e5\u3092\u6570\u5b57\u3067\u8868\u3057\u305f\u3082\u306e (Sat=1, Sun=2, ...)<br>\n- month, year    : \u305d\u308c\u305e\u308c\u6708\uff0c\u5e74 (1, 2, ... | 2011, 2012, ...)<br>\n- d              : \u901a\u3057\u756a\u53f7 (d1, d2, ...)<br>\n- event_name_x   : \u30a4\u30d9\u30f3\u30c8\u306e\u540d\u524d\uff0c1\u65e5\u306b2\u3064\u3042\u308b\u5834\u5408\u306fevent_name_2\u306b\u5165\u529b\u3057\u3066\u3042\u308b (SuperBowl, ValentinesDay)<br>\n- event_type_x   : \u30a4\u30d9\u30f3\u30c8\u306e\u30bf\u30a4\u30d7 (Sporting, Cultural, National)<br>\n- snap_XX        : \u91d1\u5238\u306e\u3088\u3046\u306a\u3082\u306e\uff0eCA(California)\uff0cTX(Texas)\uff0cWI(Wisconsin)\u306e3\u7a2e\u985e","64e70a20":"#### \u5e97\u8217\u3054\u3068\u306e\u9700\u8981","8389c7b0":"## \u4f7f\u7528\u3059\u308b\u30c7\u30fc\u30bf\u306e\u30ed\u30fc\u30c9\n### memory\u306e\u7bc0\u7d04\n\u8a08\u7b97\u306e\u30b3\u30b9\u30c8\u3084memory\u306e\u4f7f\u7528\u91cf\u3092\u524a\u6e1b\u3059\u308b\u305f\u3081\u306b\u578b\u306e\u30ad\u30e3\u30b9\u30c8\u3092\u884c\u3046\uff0e<br>\nmemory\u306e\u524a\u6e1b\u306f[\u3053\u306eNotebook](https:\/\/www.kaggle.com\/omershect\/learning-pytorch-lstm-deep-learning-with-m5-data)\u3092\u53c2\u8003\u306b\u3057\u305f\uff0e<br>\n\u3053\u306e\u95a2\u6570\u306f\u6642\u9593\u304c\u304b\u304b\u308b\u305f\u3081\uff0ctqdm\u3092\u7528\u3044\u3066\u30d7\u30ed\u30b0\u30ec\u30b9\u30d0\u30fc\u306e\u8868\u793a\u6a5f\u80fd\u3092\u8ffd\u52a0\u3057\u305f\uff0e","0bdc9c68":"### sales_train_evaluation.csv\u306b\u3064\u3044\u3066","c4e4d8d6":"### \u30c7\u30fc\u30bf\u306e\u4e8b\u524d\u77e5\u8b58\n- **calendar.csv**<br>\nContains information about the dates on which the products are sold.<br>\n(\u88fd\u54c1\u304c\u8ca9\u58f2\u3055\u308c\u305f\u65e5\u4ed8\u306e\u60c5\u5831\u3092\u542b\u3080.)<br>\n- **sales_train_validation.csv**<br>\nContains the historical daily unit sales data per product and store [d_1 - d_1913]<br>\n(\u88fd\u54c1\u5225\u30fb\u5e97\u8217\u5225\u306e\u904e\u53bb\u306e\u65e5\u6b21\u8ca9\u58f2\u53f0\u6570\u30c7\u30fc\u30bf[d_1 - d_1913]\u3092\u53ce\u9332.)<br>\n- **sample_submission.csv**<br>\nThe correct format for submissions. Reference the Evaluation tab for more info.<br>\n(\u63d0\u51fa\u3059\u308b\u305f\u3081\u306e\u6b63\u3057\u3044\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3067\u3059\uff0e\u8a73\u7d30\u306f\u300c\u8a55\u4fa1\u300d\u30bf\u30d6\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\uff0e)<br>\n- **sell_prices.csv**<br>\nContains information about the price of the products sold per store and date.<br>\n(\u5e97\u8217\u3054\u3068\u30fb\u65e5\u4ed8\u3054\u3068\u306e\u8ca9\u58f2\u5546\u54c1\u306e\u4fa1\u683c\u60c5\u5831\u3092\u53ce\u9332\uff0e)<br>\n- **sales_train_evaluation.csv**<br>\nIncludes sales [d_1 - d_1941] (labels used for the Public leaderboard)<br>\n(\u30bb\u30fc\u30eb\u30b9\u3092\u542b\u3080 [d_1 - d_1941] \uff08\u30d1\u30d6\u30ea\u30c3\u30af\u30fb\u30ea\u30fc\u30c0\u30fc\u30dc\u30fc\u30c9\u306b\u4f7f\u7528\u3055\u308c\u308b\u30e9\u30d9\u30eb\uff09)<br>\n\n\u5148\u307b\u3069\u4f5c\u3063\u305f\u95a2\u6570\u3092\u5229\u7528\u3057\u3066\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080","ed322465":"# EDA\n## \u30c7\u30fc\u30bf\u306e\u78ba\u8a8d\n\u3069\u306e\u3088\u3046\u306a\u30c6\u30fc\u30d6\u30eb\u30c7\u30fc\u30bf\u304c\u5165\u3063\u3066\u3044\u308b\u304b\u3084\u6b20\u640d\u5024\u304c\u306a\u3044\u304b\u306a\u3069\u3092\u78ba\u8a8d\u3057\u306a\u3044\u3053\u3068\u306b\u306f\u53ef\u8996\u5316\u3082\u3067\u304d\u306a\u3044\u306e\u3067\u307e\u305a\u306f\u30c7\u30fc\u30bf\u3092\u8868\u793a\u3057\u3066\u307f\u308b\uff0e\n### calender.csv\u306b\u3064\u3044\u3066"}}