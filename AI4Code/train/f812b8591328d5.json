{"cell_type":{"3d06fd59":"code","d340122c":"code","81a1add2":"code","9f633ae3":"code","27c8ad42":"code","2f6584df":"code","630d91f9":"code","a60a16f6":"code","e004a3fc":"code","d5df4c1b":"code","0ca8d48e":"code","51bb5466":"code","e560c03f":"code","c9d41548":"code","bcefd477":"code","b611d558":"code","1b361004":"code","db62cc2e":"code","d741bcc6":"code","51a9435b":"code","36f633b1":"code","6d3086b9":"code","3058ee2e":"code","2ec6f1ea":"code","bae3c9b9":"code","9dce0e44":"code","c70a4f52":"code","aaa492ee":"code","37a9f2bf":"code","aac4d12a":"code","e2ab85a3":"code","a821c30c":"code","18b6ca23":"code","67306bb8":"code","d4f428e7":"code","03c48597":"code","1379ac05":"code","9b47948a":"code","e4cdd42e":"code","0c5ad411":"code","2ecd2cde":"code","05563890":"code","b3e68365":"code","eaa475e5":"code","f49373e4":"code","5819ad0e":"code","c71ed96d":"code","d02b3c79":"code","5ffcb730":"code","d34e1d49":"code","f836997d":"code","71209844":"code","d03cbb41":"code","1833f8c7":"code","4aff286a":"code","2cf9228a":"code","88248b2b":"code","eb9ff206":"code","7d1eefca":"code","d5f1f6da":"code","8503b352":"code","4264728f":"code","5e7a55a5":"code","a628bff5":"code","7d79de9b":"code","d819b793":"code","81a745ca":"code","e90fc4f6":"code","500550db":"code","35acbd2d":"code","df37867e":"code","835008a0":"code","6102b44e":"code","2d484927":"code","d5aa9e64":"code","f35ba3bb":"code","495b3c14":"code","0073059e":"code","6bb33caf":"code","0302c6d8":"code","ccc52c1f":"code","c1a1f208":"code","d59f9220":"code","f47d519e":"code","00ee173d":"code","9c094afc":"code","1321a304":"code","b19fbccc":"code","af2bbb8c":"code","88698543":"code","352e9d62":"markdown","64b9fbe5":"markdown","28273bf4":"markdown","c68426fe":"markdown","dd6d3b34":"markdown","ba723f43":"markdown","0078fe5e":"markdown","f80c9f07":"markdown","9cc6311c":"markdown","16db417a":"markdown","02cb0aa6":"markdown","cd343dd7":"markdown","b9b956d2":"markdown","8f704fe8":"markdown","e42784ba":"markdown","83b91a49":"markdown","a9b10e5d":"markdown","e7723571":"markdown","4625ef18":"markdown","f3e3abf7":"markdown","bb583c5b":"markdown","54c18530":"markdown","a8c20a38":"markdown","9695b088":"markdown","f93d016e":"markdown","6f857696":"markdown","d0ae7010":"markdown","5cf9669b":"markdown","f0f2e2ec":"markdown","715cc575":"markdown","8f86fa25":"markdown","f58cba91":"markdown","e81128a1":"markdown","6c14a676":"markdown","f7a8a18b":"markdown","888fe173":"markdown","090f8930":"markdown","3f0f0687":"markdown","3133c8c0":"markdown","4aabe322":"markdown","58a1239c":"markdown","6739e3d5":"markdown","dae6c5df":"markdown","666e879d":"markdown","86353bde":"markdown","409b019a":"markdown","f5e6c878":"markdown","d98abbfb":"markdown","f0ff2bac":"markdown","f70e16b3":"markdown","8fcebe1d":"markdown","93f76ada":"markdown","85df5a76":"markdown","18be8e09":"markdown","28da8366":"markdown","3d6f4a5a":"markdown","e7cd0238":"markdown","8ebf3bf0":"markdown","3b30c416":"markdown","c6d79c32":"markdown","8483c8fd":"markdown","61c862e8":"markdown","9bfb0551":"markdown","db9144aa":"markdown"},"source":{"3d06fd59":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport datetime\nfrom pandas.tseries.offsets import DateOffset\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \n# Any results you write to the current directory are saved as output.","d340122c":"# Memuat dataset\norder_detail = pd.read_json(\"\/kaggle\/input\/transaksi-yg\/yg_order_detail.json\")\norder = pd.read_json(\"\/kaggle\/input\/transaksi-yg\/yg_order.json\")\nstatus = pd.read_csv(\"\/kaggle\/input\/transaksi-yg\/yg_status.csv\")\ninvoice = pd.read_json(\"\/kaggle\/input\/transaksi-yg\/com_invoice.json\")\ninvoice_detail = pd.read_json(\"\/kaggle\/input\/transaksi-yg\/com_invoice_detail.json\")\ninvoice_list = pd.read_csv(\"\/kaggle\/input\/transaksi-yg\/com_invoice_list.csv\")\nrefund = pd.read_json(\"\/kaggle\/input\/transaksi-yg\/account_trx.json\")\nproduct = pd.read_json(\"\/kaggle\/input\/transaksi-yg\/yg_product_detail.json\")\ncategory = pd.read_json(\"\/kaggle\/input\/transaksi-yg\/category.json\")\n\n\nsubs = pd.read_csv('\/kaggle\/input\/importir\/subs.csv')\nuser = pd.read_csv('\/kaggle\/input\/importir\/user.csv')\nall_users = pd.read_json('\/kaggle\/input\/importir\/org_users.json')\n\nall_users.rename(columns={'id':'user_id'},inplace=True)\nsubs.rename(columns={'id':'subs_id'},inplace=True)\norder.rename(columns={'id':'order_id'},inplace=True)\n\n# Penentuan tipe data\norder.flag = order.flag.astype('category')\norder.currency = order.currency.astype('category')\norder.logistic = order.logistic.astype('category')\norder.warehouse_delivery_currency = order.warehouse_delivery_currency.astype('category')\nstatus['created_at'] = pd.to_datetime(status['created_at'], errors='coerce')\norder = order.set_index('order_id').join(order_detail.groupby('yg_order_id').delivery_type.min()).reset_index()\norder['mobile'] = order.token != ''\n\norder.loc[:,'created_at'] = pd.to_datetime(order['created_at'], errors='coerce')\norder_detail.loc[:,'created_at'] = pd.to_datetime(order_detail['created_at'], errors='coerce')\nstatus.loc[:,'created_at'] = pd.to_datetime(status['created_at'], errors='coerce')\ninvoice_detail.loc[:,'created_at'] = pd.to_datetime(invoice_detail['created_at'], errors='coerce')\n\n# Data slicing\norder = order[order.created_at < np.datetime64('2020-04-06')]\norder_detail = order_detail[order_detail.created_at < np.datetime64('2020-04-06')]\nstatus = status[status.created_at < np.datetime64('2020-04-06')]\ninvoice_detail = invoice_detail[invoice_detail.created_at < np.datetime64('2020-04-06')]\n\nsubs['email'] = subs.email.str.lower()\nall_users['email'] = all_users.email.str.lower()\n\n# Penyeragaman data\nstatus['title'] = status.title.str.lower()\norder.flag[order.flag == 'other'] = 'others'\n\n# Membersihkan data status\nstatus = status.replace({'title': {'partial in shipping': 'partial shipping'}})\nstatus = status.groupby(['yg_order_id','title'])['created_at'].min()\n\n# Menyingkirkan kolom yang tidak perlu\nstatus = status.drop(columns=['message','updated_at','deleted_at'])\norder = order.drop(columns=['delivery_fee','logistic_message','payment_method','is_official_1688'])\n\norder = order.set_index('order_id').join(status.unstack()['customer paid'].rename('order_paid_at')).reset_index()\ninvoice_detail['amount'] = invoice_detail.type.map({'+': 1, '-':-1}) * invoice_detail.amount\n\n# Tagihan pertama dibayar\ninvoice['bills_number'] = (invoice.order_id == 0).map({True: 1, False: 2})\npaid_id = invoice_list[invoice_list.com_invoice_id.isin(\n    invoice[(invoice['paid_at'].notnull()) & (invoice['order_id'] == 0)]['id'].to_list())]['yg_order_id'].to_list()\ninvoice_first_bill_paid = invoice[(invoice['paid_at'].notnull()) & (invoice['order_id'] == 0)]\ninvoice_first_bill_paid = invoice_first_bill_paid.append(invoice[invoice.order_id.isin(paid_id)])\n\ninvoice_paid_id = invoice[invoice.paid_at.notnull()]['id'].to_list()\ninvoice_detail_paid = invoice_detail[invoice_detail['com_invoice_id'].isin(invoice_paid_id)]\nrefund['yg_order_id'] = refund.yg_order_id.apply(lambda x: int(x) if np.isfinite(x) else x)\n\ninvoice['tagihan_produk'] = invoice.order_id == 0\n\n# Refund\nrefund = refund[refund['transferred_at'].notnull()]\nrefund = refund[refund.order_type == 'yg']\nrefund = refund[['account_user_id','created_by', 'yg_order_id', 'amount', \n                 'admin_note', 'transferred_by', 'created_at']]","81a1add2":"# Megubah total_price Free-Member jadi 0 rupiah\nsubs.loc[subs.package_name == 'Free-Member', 'total_price'] = 0\n\n# Mengubah tipe data kolom paid_at, created_at pada dataset subs menjadi datetime\nsubs['paid_at'] = pd.to_datetime(subs['paid_at'], errors='coerce')\nsubs['created_at'] = pd.to_datetime(subs['created_at'], errors='coerce')\n\n# Mengubah gold-3-tahun jadi Gold-3-tahun\nsubs.loc[subs.package_name == 'gold-3-tahun', 'package_name'] = \"Gold-3-tahun\"\n\n# Menentukan waktu expired dari masing masing paket\nsubs.loc[subs.package_name == 'AnR-Basic-Plus', 'expired_at'] = subs['paid_at'] + DateOffset(months=6)\nsubs.loc[subs.package_name == 'AnR-Gold', 'expired_at'] = subs['paid_at'] + DateOffset(months=12)\nsubs.loc[subs.package_name == 'Basic-Harbolnas', 'expired_at'] = subs['paid_at'] + DateOffset(months=1)\nsubs.loc[subs.package_name == 'Basic-Plus', 'expired_at'] = subs['paid_at'] + DateOffset(months=1)\nsubs.loc[subs.package_name == 'Basic-Plus-24-month', 'expired_at'] = subs['paid_at'] + DateOffset(months=24)\nsubs.loc[subs.package_name == 'Goes to China', 'expired_at'] = subs['paid_at'] + DateOffset(months=36)\nsubs.loc[subs.package_name == 'Gold', 'expired_at'] = subs['paid_at'] + DateOffset(months=12)\nsubs.loc[subs.package_name == 'Membership 3 Tahun', 'expired_at'] = subs['paid_at'] + DateOffset(months=36)\nsubs.loc[subs.package_name == 'Silver', 'expired_at'] = np.datetime64('NaT')\nsubs.loc[subs.package_name == 'Silver', 'expired_at'] = np.datetime64('NaT')\nsubs['expired_at'] = pd.to_datetime(subs['expired_at'], format='%d\/%m\/%Y', errors='coerce')","9f633ae3":"order = order.set_index('order_id').join(order_detail.groupby(\n    'yg_order_id')[['ship_from','ship_to']].min(), how='left').reset_index()\norder = order.set_index('user_id').join(\n    all_users[['user_id','email']].set_index('user_id'),how='left').reset_index()\n\ncross_prod = order[['order_id','email','order_paid_at']].set_index('email').join(\n    subs[['subs_id','email','package_name','paid_at','expired_at']].set_index('email'))\n\ndef find_package(df):\n    result = df[(df.order_paid_at > df.paid_at) & \\\n                (df.order_paid_at <= df.expired_at)]['subs_id'].values\n    if len(result) > 0:\n        return int(result[0])\n    else:\n        None\n\nresult = cross_prod.groupby('order_id').apply(find_package)\n\norder = order.set_index('order_id').join(result.rename('subs_id')).reset_index()\norder = order.set_index('subs_id').join(subs.set_index('subs_id')['package_name']).reset_index()","27c8ad42":"order.set_index('order_id',inplace=True)\n\norder.loc[order.package_name.isna(), 'package_name'] = order[\n    order.package_name.isna()].reset_index().set_index('user_id').join(\n    all_users.set_index('user_id')['membership_package'],\n    how='left').reset_index().set_index('order_id')['membership_package'].replace('Gold','Gold-ORG')\n\norder.reset_index(inplace=True)","2f6584df":"mobile = pd.concat([order['mobile'].value_counts(),\n           (order['mobile'].value_counts()\/order['mobile'].count()*100).round(2)], axis = 1)\nmobile.index = ['web','mobile']\nmobile.columns = ['Jumlah order', 'Persen']\nmobile","630d91f9":"order['flag'].value_counts().to_frame().T","a60a16f6":"order['platform'] = order['mobile'].map({True: 'Mobile', False: 'Web'})\npd.crosstab(order['platform'],order['flag'])","e004a3fc":"order.product_price.describe().apply(\"{0:,.2f}\".format)","d5df4c1b":"fig, ax = plt.subplots(figsize=(12, 5))\ng = sns.distplot(order.product_price, kde=False, norm_hist=False)\ng.set_yticklabels(['{:,.0f}'.format(x) for x in g.get_yticks()])\ng.set_xticklabels(['{:,.0f}'.format(x) + ' juta' for x in g.get_xticks()\/1000000])\nplt.show()","0ca8d48e":"prod_price_cut = order\nmax_price = (round(prod_price_cut.product_price.max() \/ 10000000) + 1) * 10000000\ninterval_range = pd.interval_range(start=0, freq=10000000, end=max_price)\nprod_price_cut['cut'] = pd.cut(prod_price_cut['product_price'], bins=interval_range)\nqct = pd.DataFrame(prod_price_cut.groupby('cut').product_price.sum()).reset_index()\nfig, ax = plt.subplots(figsize=(12, 5))\nax = sns.barplot(x='cut', y='product_price', data=qct, palette=sns.color_palette(\"muted\", n_colors=1))\nax.set_yticklabels(['{:,.0f}'.format(x) + ' juta' for x in ax.get_yticks()\/1000000])\nplt.xticks(rotation=90)\nplt.show()","51bb5466":"order['paid_month_year'] = order.order_paid_at.dt.strftime('%Y-%m')\nprod_price_group = order.groupby('paid_month_year')['product_price'].sum()\nfig, ax = plt.subplots(figsize=(12, 5))\ng = sns.lineplot(data=prod_price_group)\ng.set_yticklabels(['{:,.0f}'.format(x) + ' juta' for x in g.get_yticks()\/1000000])\nplt.xticks(rotation=90)\nplt.title = 'Pendapatan produk dari order'\nplt.show()","e560c03f":"inv = pd.DataFrame(invoice_detail_paid.groupby('tag')['amount'].sum())\ninv['percent'] = (inv['amount'] \/ sum(inv['amount']) * 100).round(2)\ninv.style.format(\"{:,.2f}\")","c9d41548":"tagihan_yang_tagihan_pertama_terbayar = invoice_detail[invoice_detail.com_invoice_id.isin(invoice_first_bill_paid.id)]\ntagihan_yang_tagihan_pertama_terbayar.groupby(['order_id','tag']).amount.sum().unstack(1).count()","bcefd477":"tagihan_inv = invoice_detail[invoice_detail.com_invoice_id.isin(\n    invoice_first_bill_paid[invoice_first_bill_paid.paid_at.notnull()].id.to_list())].amount.sum()\n\nprint(\"Tagihan terbayar (tagihan pertama dan kedua): \", invoice_detail_paid.amount.sum())\nprint(\"Tagihan terbayar jika tagihan pertama terbayar: \", tagihan_inv)","b611d558":"invoice[invoice.order_id != 0].title.value_counts().head(20)","1b361004":"n_order_1 = order.order_paid_at.notnull().sum()\nn_order_2 = len(invoice_list[invoice_list.com_invoice_id.isin(\n    invoice[(invoice.paid_at.notnull()) & (invoice.order_id == 0)]['id'])\n                ].yg_order_id.unique())\n\nprint(\"Jumlah order terbayar dari tabel order:\", n_order_1)\nprint(\"Jumlah order terbayar dari tagihan pertama terbayar:\", n_order_2)","db62cc2e":"invoice[invoice.paid_at.notnull()].tagihan_produk.value_counts()","d741bcc6":"pd.crosstab(invoice_first_bill_paid['bills_number'],invoice_first_bill_paid['paid_at'].notnull().rename('is_paid'))","51a9435b":"pd.crosstab(invoice_first_bill_paid.bills_number,\n            invoice_first_bill_paid.paid_at.notnull().rename('is_paid'),\n            values=invoice_first_bill_paid.amount,\n            aggfunc=np.sum).style.format(\"{:,.2f}\")","36f633b1":"# Perbandingan transaksi produk dari invoice dibanding order\nprint('Nilai transaksi produk dari invoice:', invoice_detail_paid[invoice_detail_paid.tag == 'product']['amount'].sum())\nprint('Nilai transaksi produk dari order:', order.product_price.sum())\nprint('Selisih:', order.product_price.sum() - invoice_detail_paid[invoice_detail_paid.tag == 'product']['amount'].sum())","6d3086b9":"refund.head()","3058ee2e":"print(\"Jumlah order refund:\",len(refund.yg_order_id.unique()))\nprint(\"Nilai refund:\",refund.amount.sum())","2ec6f1ea":"jenis_pengiriman = order.reset_index().groupby('delivery_type')[['order_id','product_price']].agg({\n    'order_id': 'count',\n    'product_price': 'sum',\n})\njenis_pengiriman.rename(columns={\n    'order_id': 'jumlah_order',\n    'product_price': 'nilai_produk',\n}).style.format(\"{:,.2f}\")","bae3c9b9":"pd.crosstab(order['ship_from'],order['ship_to'])","9dce0e44":"pd.crosstab(order['ship_from'],\n            order['ship_to'],\n            values=order['product_price'],\n            aggfunc=np.sum).style.format(\"{:,.2f}\")","c70a4f52":"tujan_pengiriman = order_detail[['address', 'province', 'city', 'district', 'post_code']]\ntujan_pengiriman['count_'] = 1\ngroup_pengiriman = tujan_pengiriman.groupby(['address', 'province', 'city', 'district', 'post_code'],\n                         as_index=False).sum().sort_values(by='count_',ascending=False)\ngroup_pengiriman.head(10)","aaa492ee":"group_provinsi = group_pengiriman.groupby('province').count_.sum()\n\nprov = group_provinsi.nlargest(8)\nprov = prov.append(pd.Series({'LAINNYA': sum(\n    group_provinsi[group_provinsi.index.isin(group_provinsi.nlargest(8).index) == False])}))\n\nfig1, ax1 = plt.subplots(figsize=(12, 5))\nax1.pie(prov.values, labels=prov.index, autopct='%1.1f%%',\n        shadow=True, startangle=90)\nax1.axis('equal')  \nplt.tight_layout()\nplt.show()","37a9f2bf":"status_ct = status.unstack().drop(columns=['changed to yg478','diganti yg826','link expired', \n                        'need confirmation','partial shipping','re-order','unpaid', \n                        'waitbuyerpay','waitbuyerreceive', 'waitsellersend'])\n\nstatus_ct.index.name = 'order_id'\n\nstatus_ct = pd.to_datetime(status_ct.stack(), errors='coerce').unstack()\nstatus_td = pd.DataFrame(columns=[\n    'supplier paid - customer paid',\n    'customer paid - in warehouse china',\n    'in warehouse china - in shipping',\n    'in shipping - in warehouse indo',\n    'in warehouse indo - done',    \n])\nstatus_td['supplier paid - customer paid'] = status_ct['supplier paid'] - status_ct['customer paid']\nstatus_td['customer paid - in warehouse china'] = status_ct['in warehouse'] - status_ct['customer paid']\nstatus_td['in warehouse china - in shipping'] = status_ct['in shipping'] - status_ct['in warehouse']\nstatus_td['in shipping - in warehouse indo'] = status_ct['in warehouse indo'] - status_ct['in shipping']\nstatus_td['in warehouse indo - done'] = status_ct['done'] - status_ct['in warehouse indo']\nstatus_td.index = status_ct.index\nstatus_td['delivery_type'] = status_td.join(order.set_index('order_id').delivery_type).delivery_type\nstatus_td.loc[status_td.delivery_type == '', 'delivery_type'] = np.nan","aac4d12a":"status.reset_index(1).title.value_counts()","e2ab85a3":"status_td.delivery_type.value_counts(dropna=False)","a821c30c":"data = status_td.drop(columns=['delivery_type']).apply(lambda x: x.dt.days)\ndata = pd.DataFrame(data.stack()).reset_index(1)\ndata.columns = ['status', 'period']\ndata = data.join(status_td['delivery_type'])\n\nfig, ax = plt.subplots(figsize=(12, 20))\ng = sns.boxplot(x=\"status\", y=\"period\", hue='delivery_type', data=data.dropna(subset=['delivery_type']))\nplt.xticks(rotation=90)\nyrange = np.arange(round(min(data.period.dropna())\/20-1)*20, round(max(data.period.dropna())\/20+1)*20, 10.0)\nplt.yticks(yrange)\nplt.show()","18b6ca23":"status_td.describe()\npd.DataFrame(status_td.groupby('delivery_type').describe().stack())","67306bb8":"invoice_detail_paid.groupby(['order_id','tag']).amount.sum().unstack(1).count()","d4f428e7":"dimensi = order[['cbm_total','weight','carton_total','dimension_height',\n                 'dimension_width','dimension_length', 'delivery_type',\n                 'order_paid_at']]\n\n# dimensi.loc[:,'cbm_total'] = dimensi.dimension_height * dimensi.dimension_width * dimensi.dimension_length \/ 10 ** 6\nmask = dimensi.select_dtypes(include=[np.number]).columns\ndimensi.describe()","03c48597":"dimensi = dimensi[(dimensi[mask] > 0).all(axis=1)]\ndimensi.loc[dimensi['delivery_type'] == '', 'delivery_type'] = np.nan\ndimensi[mask].astype(bool).sum(axis=0)","1379ac05":"dimensi['delivery_type'].value_counts(dropna=False)","9b47948a":"fig = dimensi.hist(bins=20, figsize=(12, 10))","e4cdd42e":"fig = plt.figure(figsize=(12, 5))\npplot = sns.pairplot(dimensi.drop(columns=['order_paid_at']), hue='delivery_type', diag_kind='hist')\nplt.show()","0c5ad411":"fig, ax = plt.subplots(figsize=(12, 5))\nbool_filter = [abs(x) < 1 for x in stats.zscore(dimensi['weight'])]\ndimensi[bool_filter].dropna()\ng = sns.boxplot(x='weight', y='delivery_type',data=dimensi)\nplt.show()","2ecd2cde":"fig, ax = plt.subplots(figsize=(12, 5))\ng = sns.boxplot(x='dimension_width',y='delivery_type',data=dimensi)\nplt.show()","05563890":"fig, ax = plt.subplots(figsize=(12, 5))\ng = sns.boxplot(x='dimension_length',y='delivery_type',data=dimensi)\nplt.show()","b3e68365":"fig, ax = plt.subplots(figsize=(12, 5))\ng = sns.boxplot(x='dimension_height',y='delivery_type',data=dimensi)\nplt.show()","eaa475e5":"fig, ax = plt.subplots(figsize=(12, 5))\ng = sns.boxplot(x='cbm_total',y='delivery_type',data=dimensi)\nplt.show()","f49373e4":"fig, ax = plt.subplots(figsize=(12, 5))\ng = sns.boxplot(x='carton_total',y='delivery_type',data=dimensi)\nplt.show()","5819ad0e":"dimensi.groupby(\n    ['delivery_type',\n     pd.Grouper(key='order_paid_at', freq='D')]).sum().reset_index().groupby(\n    'delivery_type').mean()","c71ed96d":"dimensi.groupby(\n    ['delivery_type',\n     pd.Grouper(key='order_paid_at', freq='M')]).sum().reset_index().groupby(\n    'delivery_type').mean()","d02b3c79":"satu_bulan_lalu = np.datetime64('today') - np.timedelta64(30, 'D')\n\nstatus_barang_sisa = status.unstack()\nstatus_barang_sisa = status_barang_sisa[(status_barang_sisa['in warehouse indo'] < satu_bulan_lalu) &\\\n                   (status_barang_sisa['in warehouse indo'].notnull()) &\\\n                   (status_barang_sisa['done'].isnull()) &\\\n                   (status_barang_sisa['cancel'].isnull()) &\\\n                   (status_barang_sisa['cancel and refund'].isnull())\n                  ]","5ffcb730":"len(status_barang_sisa['in warehouse indo'])","d34e1d49":"fig, ax = plt.subplots(figsize=(12, 5))\nlama_barang_sisa = np.datetime64('today') - status_barang_sisa['in warehouse indo']\ng = sns.distplot(lama_barang_sisa.dt.days, kde=False, norm_hist=False)\nplt.show()","f836997d":"tagihan_barang_sisa","71209844":"tagihan_barang_sisa = invoice_detail[invoice_detail.order_id.isin(status_barang_sisa.index)].set_index('com_invoice_id').join(\n    invoice.set_index('id').paid_at.notnull())\ntagihan_barang_sisa.rename(columns = {'paid_at':'is_paid'}, inplace = True)","d03cbb41":"tagihan_barang_sisa.groupby(['tag','is_paid']).amount.sum().unstack(0).style.format(\"{:,.2f}\")","1833f8c7":"category.category_id = category.category_id.apply(lambda x: int(x) if len(x) > 0 else np.nan)","4aff286a":"fig = product.hist(bins=20, figsize=(12, 10))","2cf9228a":"product.describe()","88248b2b":"product.isna().sum().to_frame()","eb9ff206":"order_detail.rename(columns={'yg_product_id': 'product_id'},inplace=True)\norder_detail = order_detail.set_index('product_id').join(product[['product_id', 'category_id', 'category_name_en', 'title_en', 'price_fix',\n         'view', 'flag', 'is_flash_sale','weight_per_product']].set_index('product_id')).reset_index().rename(columns={'index':'product_id'})","7d1eefca":"order_detail.groupby('product_id')[\n    ['id','quantity','price_total']].agg({\n    'id':'count',\n    'quantity':'sum',\n    'price_total':'sum'}).rename(columns={\n    'id':'order_count',\n    'quantity':'total_quantity',\n    'price_total':'total_product_price'}).sort_values(\n    'total_quantity',ascending=False).join(product[\n    ['product_id','title_en','category_name_en']].set_index(\n    'product_id')).head(20).style.format({\"total_product_price\":\"{:,.2f}\"})","d5f1f6da":"product","8503b352":"cat = category[['parent_id','category_id','name']].set_index('category_id')","4264728f":"# order_detail.groupby('category_id')[\n#     ['id','quantity','price_total']].agg({\n#     'id':'count',\n#     'quantity':'sum',\n#     'price_total':'sum'}).rename(columns={\n#     'id':'order_count',\n#     'quantity':'total_quantity',\n#     'price_total':'total_product_price'}).sort_values(\n#     'total_quantity',ascending=False).join(product[\n#     ['product_id','title_en','category_name_en']].set_index(\n#     'category_id')).head(20).style.format({\"total_product_price\":\"{:,.2f}\"})","5e7a55a5":"# order_detail.groupby('category_id')[\n#     ['id','quantity','price_total']].agg({\n#     'id':'count',\n#     'quantity':'sum',\n#     'price_total':'sum'}).rename(columns={\n#     'id':'order_count',\n#     'quantity':'total_quantity',\n#     'price_total':'total_product_price'}).sort_values(\n#     'total_quantity',ascending=False).join(product[\n#     ['product_id','category_name_en']].set_index(\n#     'product_id'))","a628bff5":"user_order_count = order.groupby('user_id')['product_price'].agg(\n    ['sum','count']).rename(columns={'sum':'nilai_belanja_produk',\n                                     'count':'jumlah_order'})","7d79de9b":"user_order_count.describe().style.format(\"{:,.2f}\")","d819b793":"fig, ax = plt.subplots(figsize=(12, 5))\ng = sns.distplot(user_order_count['nilai_belanja_produk'], kde=False, norm_hist=False)\ng.set_xticklabels(['{:,.0f}'.format(x) + ' juta' for x in g.get_xticks()\/1000000])\nplt.show()","81a745ca":"fig, ax = plt.subplots(figsize=(12, 5))\ng = sns.distplot(user_order_count['jumlah_order'], kde=False, norm_hist=False)\nplt.show()","e90fc4f6":"grouped = order.groupby(['user_id','package_name'])['product_price'].agg(['sum','count']).reset_index(1)\npplot = sns.pairplot(grouped, hue='package_name', diag_kind = 'kde')\npplot.fig.set_size_inches(15, 10)","500550db":"order.groupby('package_name')['product_price'].agg(['count','sum']).style.format(\"{:,.2f}\")","35acbd2d":"df = order[['order_id','user_id','product_price','order_paid_at']]\ndf.rename(columns={'order_paid_at':'paid_date'}, inplace=True)\ndf.dropna(subset=['paid_date'], inplace=True)","df37867e":"df['order_period'] = df.paid_date.apply(lambda x: x.strftime('%Y-%m'))","835008a0":"df.set_index('user_id', inplace=True)\ndf['cohort_group'] = df.groupby(level=0)['paid_date'].min().apply(lambda x: x.strftime('%Y-%m'))\ndf.reset_index(inplace=True)\n\ngrouped = df.groupby(['cohort_group', 'order_period'])\ncohorts = grouped.agg({'user_id': pd.Series.nunique,\n                       'order_id': pd.Series.nunique,\n                       'product_price': np.sum})\n\ncohorts.rename(columns={'user_id': 'total_users',\n                        'order_id': 'total_orders',\n                        'product_price': 'product_charges'}, inplace=True)","6102b44e":"def cohort_period(df):\n    df['cohort_period'] = np.arange(len(df)) + 1\n    return df\n\ncohorts = cohorts.groupby(level=0).apply(cohort_period)","2d484927":"# reindex the DataFrame\ncohorts.reset_index(inplace=True)\ncohorts.set_index(['cohort_group', 'cohort_period'], inplace=True)\n\n# create a Series holding the total size of each CohortGroup\ncohort_group_size = cohorts['total_users'].groupby(level=0).first()","d5aa9e64":"cohorts['total_users'].unstack(0).transpose()","f35ba3bb":"user_retention = cohorts['total_users'].unstack(0).divide(cohort_group_size, axis=1)","495b3c14":"user_retention.iloc[:,[0,1,2]].plot(figsize=(10,5))\n# plt.title('Cohorts: User Retention')\nplt.xticks(np.arange(1, 12.1, 1))\nplt.xlim(1, 12)\nplt.ylabel('% of Cohort Purchasing');","0073059e":"sns.set(style='white')\n\nplt.figure(figsize=(12, 8))\n# plt.title('Cohorts: User Retention')\nsns.heatmap(user_retention.T, mask=user_retention.T.isnull(), annot=True, fmt='.0%');","6bb33caf":"df = invoice_detail_paid.groupby(['order_id','tag'])['amount'].sum().unstack(1)\ndf['total_charges'] = df.sum(axis=1)\ndf = df[['delivery_fee', 'product','shipping_fee', 'warehouse_delivery_fee','total_charges']]\ndf.rename(columns={'product':'product_fee'},inplace=True)\ndf.dropna(inplace=True)\ndf = df[(df > 0).all(axis=1)]\ndf = df.join(order.set_index('order_id').delivery_type,how='left')\ndf = df[df.delivery_type == 'air']\ndf.drop(columns=['delivery_type'],inplace=True)","0302c6d8":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt  #for plotting purpose\nfrom sklearn.linear_model import LinearRegression   #for implementing multiple linear regression\nfrom sklearn.model_selection import train_test_split\n\n# X = df[['delivery_fee', 'product_fee', 'shipping_fee', 'warehouse_delivery_fee']]\nX = df[['product_fee', 'warehouse_delivery_fee']]\n# X = df[['delivery_fee', 'product_fee','shipping_fee', 'warehouse_delivery_fee']]\ny = df['total_charges']","ccc52c1f":"df","c1a1f208":"sns.pairplot(df)","d59f9220":"df.drop(columns='total_charges').corr()","f47d519e":"# sns.scatterplot(x='product_fee',y='total_charges',data=df)\nsns.regplot(x='product_fee',y='total_charges',data=df, order=1, ci=None)","00ee173d":"sns.regplot(x='warehouse_delivery_fee',y='total_charges',data=df, order=1, ci=None)","9c094afc":"# X = X['delivery_fee'].values.reshape(-1,1)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=5)\n\n# X_train = X[-4000:].values \n# X_test = X[4000:].values \n# y_train = y[-4000:].values \n# y_test = y[4000:].values \n\nregressor = LinearRegression()\nregressor.fit(X_train, y_train)\n\n# regressor.coef_\ncoeff_df = pd.DataFrame(regressor.coef_, X.columns, columns=['Coefficient'])\ncoeff_df","1321a304":"y_pred = regressor.predict(X_test)\ndf1 = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})\ndf1['diff'] = df1.Actual - df1.Predicted\ndf1.style.format(\"{:,.2f}\")","b19fbccc":"from sklearn import metrics\nprint('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))\nprint('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))\nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))","af2bbb8c":"abs(df1['diff']).describe().to_frame().style.format(\"{:,.2f}\")","88698543":"import matplotlib.ticker as ticker\n\nfig, ax = plt.subplots(figsize=(20, 5))   \nsns.scatterplot(x='product_fee',y='diff',data=df1.join(X_test.product_fee))\nax.xaxis.set_major_formatter(ticker.EngFormatter())\nax.yaxis.set_major_formatter(ticker.EngFormatter())","352e9d62":"Sebaran lebar pengiriman perorder.","64b9fbe5":"Sebaran panjang pengiriman perorder.","28273bf4":"## Cohort analysis\n","c68426fe":"## <a id='4-1'>4.1  Order<\/a>","dd6d3b34":"Banyaknya jumlah order barang sisa berdasarkan waktu tersimpan.","ba723f43":"## Prediksi total tagihan ","0078fe5e":"Tabel silang platform dan jenis produk","f80c9f07":"Jumlah order terbayar","9cc6311c":"Banyaknya jumlah order barang yang lebih dari satu bulan berada di gudang Indonesia.","16db417a":"Deskripsi lama pengiriman","02cb0aa6":"Judul tagihan non pertama.","cd343dd7":"### <a id='4-1-2'>4.1.2  Pendapatan berdasarkan invoice<\/a>","b9b956d2":"Lama pengiriman","8f704fe8":"\n### <a id='4-1-2'>4.1.2  Pendapatan berdasarkan order<\/a>","e42784ba":"Sebaran nilai belanja produk dan jumlah order per pengguna","83b91a49":"Dimensi dan volume pengiriman dengan nilai lebih dari nol","a9b10e5d":"Jenis pengiriman berdasarkan asal dan negara tujuan.","e7723571":"Sebaran jumlah karton pengiriman perorder.","4625ef18":"## <a id='4-2'>4.2  Pengiriman<\/a>","f3e3abf7":"Tagihan terbayar dan belum terbayar barang sisa gudang.","bb583c5b":"* ### <a id='4-2-2'>4.2.2  Tujuan pengiriman<\/a>","54c18530":"Deskripsi order per pengguna","a8c20a38":"Provinsi pengiriman terbanyak","9695b088":"Seluruh tagihan terbayar termasuk jenisnya","f93d016e":"Sebaran product_price.","6f857696":"Pairplot volume dan dimensi pengiriman.","d0ae7010":"Banyaknya tagihan produk dan tagihan non produk.","5cf9669b":"* ### <a id='4-3-1'>4.3.1 Produk terlaris<\/a>","f0f2e2ec":"Tagihan kedua yang tidak terbayar.","715cc575":"Jenis pengiriman","8f86fa25":"Jumlah order dari tipe produk","f58cba91":"* ### <a id='4-2-'>4.2.3  Lama pengiriman<\/a>\n","e81128a1":"Status pengiriman","6c14a676":"## <a id='4-3'>4.3 Produk<\/a>","f7a8a18b":"Produk price adalah total nilai produk dalam satu kali pembelian.","888fe173":"Jenis tagihan berdasarkan tagihan pertama terbayar\u2014termasuk tagihan kedua dan berikutnya jika tidak terbayar\u2014yang dikelompokkan dalam satu order.","090f8930":"Pairplot nilai order dan jumlah order perpengguna","3f0f0687":"Total pendapatan dari nilai produk berdasarkan rentang nilai produk per satu kali order.","3133c8c0":"Rata-rata pengiriman perbulan","4aabe322":"Rata-rata pengiriman perhari","58a1239c":"### <a id='4-1-4'>4.1.4  Refund<\/a>","6739e3d5":"## <a id='4-4'>4.4 Pengguna<\/a>","dae6c5df":"Sebaran berat pengiriman perorder.","666e879d":"- <a href='#1'>1. Pendahuluan<\/a>\n- <a href='#2'>2. Pra pemrosesan data<\/a>\n- <a href='#3'>3. Sekilas mengenai data<\/a>\n    - <a href='#2-1'>3.1 Dataset order<\/a>\n    - <a href='#2-1'>3.1 Dataset invoice<\/a>\n- <a href='#4'> 4. Eksplorasi data<\/a>\n    - <a href='#4-1'>4.1 Order<\/a>\n        - <a href='#4-1-1'>4.1.1 Jenis order<\/a>\n        - <a href='#4-1-2'>4.1.2 Pendapatan berdasarkan order<\/a>\n        - <a href='#4-1-3'>4.1.3 Pendapatan berdasarkan invoice<\/a>\n        - <a href='#4-1-4'>4.1.4 Refund<\/a>\n    - <a href='#4-2'>4.2 Pengiriman<\/a>\n        - <a href='#4-2-1'>4.2.1 Jenis pengiriman<\/a>\n        - <a href='#4-2-2'>4.2.2 Tujuan pengiriman<\/a>\n        - <a href='#4-2-3'>4.2.3 Lama pengiriman<\/a>\n        - <a href='#4-2-4'>4.2.4 Volume pengiriman<\/a>\n        - <a href='#4-2-5'>4.2.5 Barang sisa di gudang Indonesia<\/a>\n    - <a href='#4-3'>4.3 Produk<\/a>\n        - <a href='#4-3-1'>4.4.1 Kategori populer<\/a>\n    - <a href='#4-4'>4.3 Pengguna<\/a>\n        - <a href='#4-4-1'>4.4.1 Jenis langganan<\/a>\n        - <a href='#4-4-2'>4.4.2 Kota<\/a>\n        - <a href='#4-4-3'>4.4.3 Frekuensi beli<\/a>\n        - <a href='#4-4-4'>4.4.4 Cohort analysis<\/a>\n- <a href='#5'> 5. Lampiran<\/a>\n    ","86353bde":"Total tagihan terbayar","409b019a":"Jenis pengiriman berdasarkan jalur pengiriman.","f5e6c878":"Jumlah order dari web dan mobile","d98abbfb":"* ### <a id='4-4-1'>4.4.1 Jenis pengguna<\/a>","f0ff2bac":"### <a id='4-1-1'>4.1.1  Jenis order<\/a>","f70e16b3":"Nilai belanja belanja produk berdasarkan asal dan negara tujuan.","8fcebe1d":"> ### <a id='4-2-4'>4.2.4  Volume dan dimensi pengiriman<\/a>","93f76ada":"Sebaran tinggi pengiriman perorder.","85df5a76":"Sebaran total volume pengiriman perorder.","18be8e09":"* ### <a id='4-3-2'>4.3.2 Kategori terlaris<\/a>","28da8366":"Deskripsi data volume dan dimensi pengiriman","3d6f4a5a":"Produk terlaris berdasarkan kuantitas barang terjual.","e7cd0238":"# <a id='4'>4. Eksplorasi Data<\/a>","8ebf3bf0":"Nilai produk yang terjual perbulan\\.","3b30c416":"Nilai belanja dan jumlah order berdasarkan paket langganan.","c6d79c32":"### <a id='4-2-1'>4.2.1  Jenis pengiriman<\/a>","8483c8fd":"Produk terlaris berdasarkan nilai harga barang terjual.","61c862e8":"* ### <a id='4-2-5'>4.2.5 Barang sisa di gudang Indonesia<\/a>","9bfb0551":"Jenis pengiriman dengan volume dan dimensi lebih dari 0.","db9144aa":"10 Alamat pengiriman terbanyak"}}