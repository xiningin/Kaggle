{"cell_type":{"17767ade":"code","889832a1":"code","30079394":"code","4418ce67":"code","518f1296":"code","b619106b":"code","e5023869":"code","d75901ab":"code","826b4e25":"code","4e71c7ec":"code","3a3e623b":"code","a88553aa":"code","dfa9a872":"code","01960169":"code","e3b8f6dd":"code","d06355ef":"code","5afd4e50":"code","6f30cbd7":"code","767fdda7":"code","a496972d":"code","2d539647":"code","85366711":"code","da4fa123":"code","8eaaa6ab":"code","ca69d804":"code","2b0f6aae":"code","75e93281":"code","e755b904":"code","4c75820c":"code","56fef353":"code","4a5d25d4":"code","2534237f":"markdown","a4205e73":"markdown","45047d84":"markdown","e792199d":"markdown","5fb54057":"markdown","d2e87d72":"markdown","ae2b8cb5":"markdown","5ced3867":"markdown","b94e4dc9":"markdown","8d251522":"markdown","981ade5f":"markdown","7af8ae5c":"markdown","f4b5bc83":"markdown","8d815bf9":"markdown","c3b7ad03":"markdown","754f1983":"markdown","3065c164":"markdown"},"source":{"17767ade":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Metricas\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import r2_score \n\n# Pr\u00e9 Processamento e Modelagem\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn import svm\nfrom sklearn import tree\nfrom sklearn.ensemble import RandomForestRegressor \nfrom sklearn.model_selection import train_test_split\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","889832a1":"params = {'legend.fontsize': 'x-large',\n         'axes.labelsize': 'x-large',\n         'axes.titlesize':'x-large' }\nplt.rcParams.update(params)\nplt.style.use(['seaborn'])","30079394":"# Importando a base\npath = '\/kaggle\/input\/beer-consumption-sao-paulo\/Consumo_cerveja.csv'\ndf   = pd.read_csv(path, delimiter=',', decimal = ',', thousands = '.')\n\ndf.head()","4418ce67":"# Tratamento dos Dados\n\n# Valor Datetime na coluna Data\ndf['Data'] = pd.to_datetime(df['Data'], format='%Y-%m-%d')\n\n# Tirando todas as observa\u00e7\u00f5es com valores nulos\ndf = df.dropna(how='all')\n\n#df.info()\n#df.head()\ndf.describe()","518f1296":"modelos = []","b619106b":"# Fun\u00e7\u00e3o de avalia\u00e7\u00e3o de Modelos de Regress\u00e3o Linear Simples\n\n# Queremos focar nas m\u00e9tricas \n# R\u00b2: pela sua interpretabilidade ( por estar entre 0 e 1) \n# RSME: ( pois mensura em valores o erro m\u00e9dio)\n\ndef resultados_regressao(y_pred, y_real, nome_modelo , tipo):\n        \n    R_2  =  r2_score(y_real,y_pred)\n    mse  =  mean_squared_error(y_real, y_pred, squared = False) \n    rmse =  mse **0.5\n    MAE  =  mean_absolute_error(y_real,y_pred)\n\n    \n    print('R\u00b2   : ', R_2  )\n    print('MSE  : ', mse  )\n    print('RMSE : ', rmse )\n    print('MAE  : ', MAE  )\n    \n    dicionario = {\n        'Modelo': nome_modelo,\n        'R\u00b2': R_2,\n        'MSE': mse,\n        'RMSE':rmse ,\n        'MAE': MAE \n    }\n    modelos.append(dicionario)\n    \n \n    if tipo == 'Simples':\n    \n        fig, ax = plt.subplots(figsize=(14, 6))\n\n        sns.scatterplot(x = X_test.iloc[:,0],y =  y_test['Consumo de cerveja (litros)'],  edgecolor='k', facecolor='grey', alpha=0.7)\n        plt.plot(X_test,y_pred  , color='red', linewidth=2, label = 'Reta da Regress\u00e3o')\n        plt.title(\"Base Teste - Predi\u00e7\u00e3o da \"+nome_modelo )\n        plt.legend()\n        plt.show()","e5023869":"df.describe()","d75901ab":"sns.pairplot(df, hue = 'Final de Semana');","826b4e25":"temp = df.copy()\ntemp['media_movel'] = temp.iloc[:,-1].rolling(window=15).mean()\ntemp['media_movel_temperatura'] = temp.iloc[:,1].rolling(window=15).mean()\n\nfig, ax = plt.subplots(1, 2, figsize=(14, 6))\n\nsns.lineplot(data = temp, y= \"Consumo de cerveja (litros)\", x = 'Data',ax = ax[0], legend= True)\nsns.lineplot(data = temp, y= \"media_movel\", x = 'Data',ax = ax[0], legend= True)\nax[0].legend(['Consumo de cerveja (litros)', 'M\u00e9dia Movel dos ultimos 15 dias do Consumo'])\n\nax[0].set(xlabel=\"Data\",\n       ylabel=\"Quantidade em Litros\",\n       title=\"Consumo de Cerveja por Dia em S\u00e3o Paulo (Litros)\");\n\nsns.histplot(data = df, x= \"Consumo de cerveja (litros)\",ax = ax[1], legend= True)\nax[1].set(xlabel=\"Consumo de Cerveja em Litros\",\n       ylabel=\"Quantidade de Dias\",\n       title=\"Histograma de Consumo de cerveja em S\u00e3o Paulo (Litros)\");","4e71c7ec":"# Grafico da correla\u00e7\u00e3o entre teperatura e consumo\n\n\nfig, ax = plt.subplots(figsize=(14, 6))\n\nsns.lineplot(data = temp, y= \"Temperatura Media (C)\", x = 'Data', color = 'green')\nsns.lineplot(data = temp, y= \"Temperatura Minima (C)\", x = 'Data', color = 'cornflowerblue')\nsns.lineplot(data = temp, y= \"Temperatura Maxima (C)\", x = 'Data', color = 'cornflowerblue');\nax.legend(['Temperatura Media (C)', 'Temperatura Minima (C)', 'Temperatura Maxima (C)'])\n\n\nax.set(xlabel=\"Data\",\n       ylabel=\"Temperatura (C)\",\n       title=\"Temperatura em 2015 em S\u00e3o Paulo\");","3a3e623b":"# Grafico da correla\u00e7\u00e3o entre teperatura e consumo\n\ntemp = df.copy()\ntemp['Consumo de cerveja (litros)'] = temp['Consumo de cerveja (litros)']\/1000\n\nfig, ax = plt.subplots(figsize=(14, 6))\n\nsns.lineplot(data = temp, y= \"Temperatura Maxima (C)\", x = 'Data', color = 'cornflowerblue');\nsns.lineplot(data = temp, y= \"Consumo de cerveja (litros)\", x = 'Data', color = 'red');\nax.legend(['Temperatura Media (C)', 'Consumo de cerveja (Mil litros)'])\n\n\nax.set(xlabel=\"Data\",\n       ylabel=\"Temperatura (C)\",\n       title=\"Temperatura em 2015 e Consumo de Cerveja em S\u00e3o Paulo\");","a88553aa":"# Grafico da correla\u00e7\u00e3o entre teperatura e consumo\njanela_media_movel = 15\n\ntemp = df.copy()\ntemp['Consumo de cerveja (litros)'] = temp['Consumo de cerveja (litros)']\/1000\ntemp['media_movel'] = temp.iloc[:,-1].rolling(window=janela_media_movel).mean()\ntemp['media_movel_temperatura'] = temp.iloc[:,1].rolling(window=janela_media_movel).mean()\n\nfig, ax = plt.subplots(figsize=(14, 6))\n\nsns.lineplot(data = temp, y= \"media_movel\", x = 'Data', legend= True, color = 'cornflowerblue');\nsns.lineplot(data = temp, y= \"media_movel_temperatura\", x = 'Data', legend= True, color = 'red');\n\nax.legend(['Temperatura Media (C) (M\u00e9dia Movel' + str(janela_media_movel)+' dias )' \n           , 'Consumo de cerveja (Mil litros) (M\u00e9dia Movel'+ str(janela_media_movel)+' dias )'])\n\n\nax.set(xlabel=\"Data\",\n       ylabel=\"Temperatura (C)\",\n       title=\"Temperatura em 2015 e Consumo de Cerveja em S\u00e3o Paulo\");","dfa9a872":"# Busca o dia da semana equivalente ao dia\ndf['Dia da Semana'] = df['Data'].dt.dayofweek\n\n# Boxplot do consumo por dia da semana\nfig, ax = plt.subplots( figsize=(14, 6))\nsns.boxplot( y=\"Consumo de cerveja (litros)\",x= 'Dia da Semana', data=df)\nax.set_xticklabels( ('Seg', 'Ter','Qua', 'Qui', 'Sex', 'S\u00e1b', 'Dom') );","01960169":"fig, ax = plt.subplots(figsize=(8, 6))\n\nsns.heatmap(df.corr(), annot = True, center=0,  cmap=\"rocket\", vmin=-0.9, vmax=1)\nax.set(title=\"Tabela de Correla\u00e7\u00e3o Linear entre as variaveis em geral\");","e3b8f6dd":"fig, ax = plt.subplots(figsize=(6, 4))\n\nsns.heatmap(df.corr().iloc[0:-1,5:-1], annot = True, center=0,  cmap=\"rocket\", vmin=-0.9, vmax=1)\nax.set(title=\"Tabela de Correla\u00e7\u00e3o Linear entre as variaveis e o Consumo de Cerveja em Litros\");","d06355ef":"sns.regplot(x=\"Temperatura Maxima (C)\", y=\"Consumo de cerveja (litros)\", data=df);","5afd4e50":"sns.regplot(x=\"Temperatura Media (C)\", y=\"Consumo de cerveja (litros)\", data=df);","6f30cbd7":"sns.regplot(x=\"Temperatura Minima (C)\", y=\"Consumo de cerveja (litros)\", data=df);","767fdda7":"# Importando a base\npath = '\/kaggle\/input\/beer-consumption-sao-paulo\/Consumo_cerveja.csv'\ndf   = pd.read_csv(path, delimiter=',', decimal = ',', thousands = '.')\n\ndf.head()","a496972d":"# Tratamento dos Dados\n\n# Tirando todas as observa\u00e7\u00f5es com valores nulos\ndf = df.dropna(how='all')\n\n# Valor Datetime na coluna Data\ndf['Data'] = pd.to_datetime(df['Data'], format='%Y-%m-%d')\n\n# Busca o dia da semana equivalente ao dia\ndf['Dia da Semana'] = df['Data'].dt.dayofweek\n\n# Transforma a coluna do dia da semana em dummies\ndf['Dia da Semana'] = df['Dia da Semana'].astype(str).replace({'0': 'Seg','1': 'Ter','2': 'Qua','3': 'Qui','4': 'Sex','5': 'S\u00e1b','6': 'Dom'})\ndf = pd.get_dummies(df, columns = ['Dia da Semana'])\n\n# Para o problema de regress\u00e3o n\u00e3o nos interessa a coluna Data\ndf.drop('Data', axis = 1, inplace = True)\n\ndf.head()","2d539647":"# Definindo as variaveis\n\nX = df[['Temperatura Media (C)']]\ny = df[['Consumo de cerveja (litros)']]\n\n# Separando em base de treino e teste\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=0)\n\n# Cria o objeto sklearn do regressor linear\nregressor = LinearRegression()\n\n# Treina o modelo com os parametros da base de dados de teste\nregressor.fit(X_train,y_train)\n\n# Realiza a previs\u00e3o para a base de dados de Treino\ny_pred = regressor.predict(X_test)\n\nprint(\"A reta treinada para a Regress\u00e3o Linear \u00e9: y = \", regressor.intercept_[0], \"+ X*\",regressor.coef_[0][0], '\\n' )\n\nresultados_regressao(y_pred, y_test, 'Regress\u00e3o Linear com Temp. M\u00e9dia', 'Simples')\n","85366711":"# Definindo as variaveis\n\nX = df[['Temperatura Maxima (C)']]\ny = df[['Consumo de cerveja (litros)']]\n\n# Separando em base de treino e teste\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=0)\n\n# Cria o objeto sklearn do regressor linear\nregressor = LinearRegression()\n\n# Treina o modelo com os parametros da base de dados de teste\nregressor.fit(X_train,y_train)\n\n# Realiza a previs\u00e3o para a base de dados de Treino\ny_pred = regressor.predict(X_test)\n\nprint(\"A reta treinada para a Regress\u00e3o Linear \u00e9: y = \", regressor.intercept_[0], \"+ X*\",regressor.coef_[0][0], '\\n' )\n\nresultados_regressao(y_pred, y_test, 'Regress\u00e3o Linear com Temp. Maxima', 'Simples')","da4fa123":"# Definindo as variaveis\n\nX = df[['Temperatura Minima (C)']]\ny = df[['Consumo de cerveja (litros)']]\n\n# Separando em base de treino e teste\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=0)\n\n# Cria o objeto sklearn do regressor linear\nregressor = LinearRegression()\n\n# Treina o modelo com os parametros da base de dados de teste\nregressor.fit(X_train,y_train)\n\n# Realiza a previs\u00e3o para a base de dados de Treino\ny_pred = regressor.predict(X_test)\n\nprint(\"A reta treinada para a Regress\u00e3o Linear \u00e9: y = \", regressor.intercept_[0], \"+ X*\",regressor.coef_[0][0], '\\n' )\n\nresultados_regressao(y_pred, y_test, 'Regress\u00e3o Linear com Temp. Minima', 'Simples')","8eaaa6ab":"######## Treinando o Modelo\n\n# Definindo as variaveis\n\nX = df.drop(['Consumo de cerveja (litros)'], axis = 1)\ny = df[['Consumo de cerveja (litros)']]\n\n# Separando em base de treino e teste\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=0)\n\n# Cria o objeto sklearn do regressor linear\nregressor = LinearRegression()\n\n# Treina o modelo com os parametros da base de dados de teste\nregressor.fit(X_train,y_train)\n\n# Realiza a previs\u00e3o para a base de dados de Treino\ny_pred = regressor.predict(X_test)","ca69d804":"print(\"A reta treinada para a Regress\u00e3o Multipla \u00e9:\\n y = \",round(regressor.intercept_[0], 2) , \n      \"+ (Temperatura Media (C))*\",round(regressor.coef_[0][0], 2), \n      \"+ (Temperatura Minima (C))*\",round(regressor.coef_[0][1], 2),\n      \"+ (Temperatura Maxima (C))*\",round(regressor.coef_[0][2], 2),\n      \"+ (Final de Semana)*\",round(regressor.coef_[0][3], 2),\n      \"+ (Dia da Semana_Dom)*\",round(regressor.coef_[0][4], 2),\n      \"+ (Dia da Semana_Qua)*\",round(regressor.coef_[0][5], 2),\n      \"+ (Dia da Semana_Qui)*\",round(regressor.coef_[0][6], 2),\n      \"+ (Dia da Semana_Seg)*\",round(regressor.coef_[0][7], 2),\n      \"+ (Dia da Semana_Sex)*\",round(regressor.coef_[0][8], 2),\n      \"+ (Dia da Semana_S\u00e1b)*\",round(regressor.coef_[0][9], 2),\n      \"+ (Dia da Semana_Sex)*\",round(regressor.coef_[0][10], 2),\n      '\\n' )\n\n# Plotando as m\u00e9tricas\n\nresultados_regressao(y_pred, y_test, 'Regress\u00e3o Linear M\u00faltipla sem padroniza\u00e7\u00e3o', 'M\u00faltipla')","2b0f6aae":"######## Treinando o Modelo\n\n# Definindo as variaveis\n\nX = df.drop(['Consumo de cerveja (litros)', 'Precipitacao (mm)'], axis = 1)\ny = df[['Consumo de cerveja (litros)']]\n\n# Separando em base de treino e teste\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=0)\n\n# Cria o objeto sklearn do regressor linear\nregressor = LinearRegression()\n\n# Treina o modelo com os parametros da base de dados de teste\nregressor.fit(X_train,y_train)\n\n# Realiza a previs\u00e3o para a base de dados de Treino\ny_pred = regressor.predict(X_test)","75e93281":"print(\"A reta treinada para a Regress\u00e3o Multipla \u00e9:\\n y = \",round(regressor.intercept_[0], 2) , \n      \"+ (Temperatura Media (C))*\",round(regressor.coef_[0][0], 2), \n      \"+ (Temperatura Minima (C))*\",round(regressor.coef_[0][1], 2),\n      \"+ (Temperatura Maxima (C))*\",round(regressor.coef_[0][2], 2),\n      \"+ (Final de Semana)*\",round(regressor.coef_[0][3], 2),\n      \"+ (Dia da Semana_Dom)*\",round(regressor.coef_[0][4], 2),\n      \"+ (Dia da Semana_Qua)*\",round(regressor.coef_[0][5], 2),\n      \"+ (Dia da Semana_Qui)*\",round(regressor.coef_[0][6], 2),\n      \"+ (Dia da Semana_Seg)*\",round(regressor.coef_[0][7], 2),\n      \"+ (Dia da Semana_Sex)*\",round(regressor.coef_[0][8], 2),\n      \"+ (Dia da Semana_S\u00e1b)*\",round(regressor.coef_[0][9], 2),\n      \"+ (Dia da Semana_Sex)*\",round(regressor.coef_[0][10], 2),\n      '\\n' )\n\n# Plotando as m\u00e9tricas\n\nresultados_regressao(y_pred, y_test, 'Regress\u00e3o Linear M\u00faltipla com StandardScaler', 'M\u00faltipla')","e755b904":"######## Treinando o Modelo\n\n# Definindo as variaveis\n\nX = df.drop(['Consumo de cerveja (litros)', 'Precipitacao (mm)'], axis = 1)\ny = df[['Consumo de cerveja (litros)']]\n\n# Separando em base de treino e teste\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=0)\n\n# Cria o objeto sklearn do regressor linear\nregressor = svm.SVR()\n\n# Treina o modelo com os parametros da base de dados de teste\nregressor.fit(X_train,y_train)\n\n# Realiza a previs\u00e3o para a base de dados de Treino\ny_pred = regressor.predict(X_test)\n\n\n# Plotando as m\u00e9tricas\nresultados_regressao(y_pred, y_test, 'Regress\u00e3o com SVM', 'M\u00faltipla')","4c75820c":"######## Treinando o Modelo\n\n# Definindo as variaveis\n\nX = df.drop(['Consumo de cerveja (litros)', 'Precipitacao (mm)'], axis = 1)\ny = df[['Consumo de cerveja (litros)']]\n\n# Separando em base de treino e teste\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=0)\n\n# Cria o objeto sklearn do regressor linear\nregressor = tree.DecisionTreeRegressor()\n\n# Treina o modelo com os parametros da base de dados de teste\nregressor.fit(X_train,y_train)\n\n# Realiza a previs\u00e3o para a base de dados de Treino\ny_pred = regressor.predict(X_test)\n\n\n# Plotando as m\u00e9tricas\nresultados_regressao(y_pred, y_test, 'Regress\u00e3o Decision Tree', 'M\u00faltipla')","56fef353":"######## Treinando o Modelo\n\n# Definindo as variaveis\n\nX = df.drop(['Consumo de cerveja (litros)', 'Precipitacao (mm)'], axis = 1)\ny = df[['Consumo de cerveja (litros)']]\n\n# Separando em base de treino e teste\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=0)\n\n# Cria o objeto sklearn do regressor linear\nregressor = RandomForestRegressor()\n\n# Treina o modelo com os parametros da base de dados de teste\nregressor.fit(X_train,y_train)\n\n# Realiza a previs\u00e3o para a base de dados de Treino\ny_pred = regressor.predict(X_test)\n\n\n# Plotando as m\u00e9tricas\nresultados_regressao(y_pred, y_test, 'Random Forest Regressor', 'M\u00faltipla')","4a5d25d4":"pd.DataFrame(modelos).style.background_gradient(cmap = 'Blues')","2534237f":"### Consumo de Cerveja em S\u00e3o Paulo\n\nSaaalve galera, este \u00e9 um notebook de alguns teste e aplica\u00e7\u00f5es de modelos de Regress\u00e3o para prever o consumo de cerveja na cidade de S\u00e3o Paulo. Aqui a id\u00e9ia \u00e9 aplicar alguns modelos simples somente \u00e0 titulo de testes.  \n\n\n#### \u00cdndice:\n\n* 1. [Importando Pacotes](#1.-Importando-as-Bibliotecas)\n* 2. [Data Processing](#2.-Tratamento-dos-Dados-e-Fun\u00e7\u00f5es)\n* 3. [Analise Explorat\u00f3ria dos Dados](#3.-Analise-Explorat\u00f3ria-dos-Dados)\n* 4. [Pr\u00e9 Processamento](#4.-Pr\u00e9-Processamento)\n* 5. [Modelos](#5.-Modelos)\n    * 5.1 [Regress\u00e3o Linear M\u00faltipla sem padroniza\u00e7\u00e3o](#5.1-Regress\u00e3o-Linear-M\u00faltipla-sem-padroniza\u00e7\u00e3o)\n    * 5.2 [Regress\u00e3o Linear M\u00faltipla com StandardScaler](#5.2-Regress\u00e3o-Linear-M\u00faltipla-com-StandardScaler)\n    * 5.3 [Regress\u00e3o Linear M\u00faltipla com MinMaxScaler](#5.3-Regress\u00e3o-Linear-M\u00faltipla-com-MinMaxScaler)\n    * 5.4 [Regress\u00e3o Linear M\u00faltipla](#5.4-Regress\u00e3o-Linear-M\u00faltipla)\n    * 5.5 [Regress\u00e3o Linear M\u00faltipla sem precipita\u00e7\u00e3o](#5.5-Regress\u00e3o-Linear-M\u00faltipla-sem-precipita\u00e7\u00e3o)\n    * 5.6 [Suport Vector Machine ](#5.6-Suport-Vector-Machine )\n    * 5.7 [Decision Tree Regressor](#5.7-Decision-Tree-Regressor)\n    * 5.8 [Random Forest Regressor](#5.8-Random-Forest-Regressor)\n\n\n* 6. [Resultados](#6.-Resultados)","a4205e73":"### 5. Modelos\n","45047d84":"### 1. Importando as Bibliotecas","e792199d":"### 4. Pr\u00e9 Processamento\n","5fb54057":"### 2. Tratamento dos Dados e Fun\u00e7\u00f5es","d2e87d72":"#### 5.8 Random Forest Regressor","ae2b8cb5":"#### 5.6 Suport Vector Machine ","5ced3867":"Agora estamos prontos para aplicar os modelos nos dados.","b94e4dc9":"### 6. Resultados","8d251522":"Interessante notar que a m\u00e9dia m\u00f3vel da temperatura m\u00e9dia e do consumo de cerveja seguem um mesmo padr\u00e3o na s\u00e9rie temporal, n\u00e3o \u00e9 parte do escopo da nossa id\u00e9ia aqui mas pode ser interessante para um segundo projeto tentar prever o consumo com base em s\u00e9ries temporais.","981ade5f":"#### 5.7 Decision Tree Regressor","7af8ae5c":"#### 5.2 Regress\u00e3o Linear Simples com Temp. Maxima","f4b5bc83":"#### 5.1 Regress\u00e3o Linear Simples com Temp. M\u00e9dia","8d815bf9":"#### 5.5 Regress\u00e3o Linear M\u00faltipla sem precipita\u00e7\u00e3o","c3b7ad03":"#### 5.3 Regress\u00e3o Linear Simples com Temp. Minima\n","754f1983":"#### 5.4 Regress\u00e3o Linear M\u00faltipla","3065c164":"### 3. EDA\n"}}