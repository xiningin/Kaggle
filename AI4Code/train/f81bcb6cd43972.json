{"cell_type":{"0189cb36":"code","a59731ae":"code","a15df979":"code","face6873":"code","688d801c":"code","94dae7ed":"code","01cfb124":"code","cbeafd48":"code","5278cbd1":"code","e952216f":"code","39ec9467":"code","a6794931":"code","495717f9":"code","7ca805e9":"code","7caf0d41":"code","f5cddef5":"code","4d8c986f":"code","1409bf8c":"code","ea025d99":"markdown","339c3ffa":"markdown","aa35e55d":"markdown","50361234":"markdown","f5e9eb15":"markdown","c2ea9c0f":"markdown","ca592e58":"markdown","84687453":"markdown","746f32e0":"markdown"},"source":{"0189cb36":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom tqdm import tqdm_notebook\nimport os\nfrom keras.preprocessing.image import load_img\nfrom sklearn.preprocessing import StandardScaler\nimport gc\nimport matplotlib.pyplot as plt\nfrom sklearn.neighbors import KDTree \n%matplotlib inline","a59731ae":"train_img_path = '..\/input\/train\/images\/'\ntrain_mask_path = '..\/input\/train\/masks\/'\ntest_path = '..\/input\/test\/images\/'\ntrain_files = np.array(os.listdir(train_img_path))\ntest_files = np.array(os.listdir(test_path))\nall_files = np.append(train_files,test_files,axis=0)","a15df979":"img_train = np.zeros((4000,101,101))\nmask_train = np.zeros((4000,101,101))\nfor i,file in tqdm_notebook(enumerate(train_files)):\n    img_train[i] = np.expand_dims(np.array(load_img(train_img_path+file))[:,:,0],axis=0)\n    mask_train[i] = np.expand_dims(np.array(load_img(train_mask_path+file))[:,:,0],axis=0)\n    \nimg_test = np.zeros((18000,101,101))\nfor i,file in tqdm_notebook(enumerate(test_files)):\n    img_test[i] = np.expand_dims(np.array(load_img(test_path+file))[:,:,0],axis=0)","face6873":"all_arr = np.append(img_train,img_test,axis=0)\nall_arr_orig = np.append(img_train,img_test,axis=0)\nall_arr = (all_arr - all_arr.mean()) \/ all_arr.std()\ndel img_train,img_test\ngc.collect()","688d801c":"all_u_ex = 2*all_arr[:,0,:] - all_arr[:,1,:]\nall_u_ex = (all_u_ex - all_u_ex.mean()) \/ all_u_ex.std()\n\nall_d_ex = 2*all_arr[:,100,:]-all_arr[:,99,:]\nall_d_ex = (all_d_ex - all_d_ex.mean()) \/ all_d_ex.std()\n\nall_l_ex=  2*all_arr[:,:,0]-all_arr[:,:,1]\nall_l_ex = (all_l_ex - all_l_ex.mean()) \/ all_l_ex.std()\n\nall_r_ex=  2*all_arr[:,:,100]-all_arr[:,:,99]\nall_r_ex = (all_r_ex - all_r_ex.mean()) \/ all_r_ex.std()","94dae7ed":"def gen_comb_img(all_arr_orig,good_idx_ar,ind,pos='du'):\n    combined_img_ar = None\n    img_idx = []; match_img_idx = []\n    for val in range(len(good_idx_ar)):\n        good_idx = good_idx_ar[val]\n        if np.std(all_arr_orig[ind[good_idx,0]])==0: continue            \n        if pos=='du':  #down-up\n            combined_img = np.append(all_arr_orig[ind[good_idx,0]],all_arr_orig[good_idx],axis=0)\n        elif pos=='ud':  #up-down\n            combined_img = np.append(all_arr_orig[good_idx],all_arr_orig[ind[good_idx,0]],axis=0)\n        elif pos=='lr':\n            combined_img = np.append(all_arr_orig[good_idx],all_arr_orig[ind[good_idx,0]],axis=1)\n        elif pos=='rl':\n            combined_img = np.append(all_arr_orig[ind[good_idx,0]],all_arr_orig[good_idx],axis=1)\n        else:\n            print('Wrong Argument Value for Position')\n            return\n        img_idx.append(good_idx);match_img_idx.append(ind[good_idx,0])\n        combined_img = np.expand_dims(combined_img,axis=0)\n        if combined_img_ar is None: \n            combined_img_ar = combined_img\n        else:\n            combined_img_ar = np.append(combined_img_ar,combined_img,axis=0)          \n    return combined_img_ar,all_files[img_idx],all_files[match_img_idx]","01cfb124":"tree = KDTree(all_u_ex)\ndist_ud, ind_ud = tree.query(all_d_ex, k=2) ","cbeafd48":"thresh = 0.4 #increase threshold to find more images\nprint(np.sum(dist_ud[:,0] < thresh))\ngood_idx_ud = np.ravel(np.where(dist_ud[:,0]<thresh))\ncombined_img_ud,img_id,match_id = gen_comb_img(all_arr_orig,good_idx_ud,ind_ud,pos='ud')","5278cbd1":"for j in range(3):\n    plt.figure(figsize=(15,15))\n    for i in range(8):\n        plt.subplot(1,8,i+1)\n        plt.imshow(combined_img_ud[j*3+i],cmap='binary')\n#         plt.text(0, 0,img_id[j*3+i][:-4]+' '+match_id[j*3+i][:-4],fontsize=8)\n        plt.axis('off')\n    plt.tight_layout()","e952216f":"tree = KDTree(all_d_ex)\ndist_du, ind_du = tree.query(all_u_ex, k=2) ","39ec9467":"thresh = 0.4 #increase threshold to find more images\nprint(np.sum(dist_du[:,0] < thresh))\ngood_idx_du = np.ravel(np.where(dist_du[:,0]<thresh))\ncombined_img_du,img_id,match_id = gen_comb_img(all_arr_orig,good_idx_du,ind_du,pos='du')","a6794931":"for j in range(3):\n    plt.figure(figsize=(15,15))\n    for i in range(8):\n        plt.subplot(1,8,i+1)\n        plt.imshow(combined_img_du[j*3+i],cmap='binary')\n#         plt.text(0, 0,img_id[j*3+i][:-4]+' '+match_id[j*3+i][:-4],fontsize=8)\n        plt.axis('off')\n    plt.tight_layout()","495717f9":"tree = KDTree(all_l_ex)\ndist_lr, ind_lr = tree.query(all_r_ex, k=2) ","7ca805e9":"thresh = 0.65\nprint('No.of pairs',np.sum(dist_lr[:,0] < thresh))\ngood_idx_lr = np.ravel(np.where(dist_lr[:,0]<thresh))\ncombined_img_lr,img_id,match_id = gen_comb_img(all_arr_orig,good_idx_lr,ind_lr,pos='lr')","7caf0d41":"for j in range(5):\n    plt.figure(figsize=(15,30))\n    for i in range(5):\n        plt.subplot(1,5,i+1)\n        plt.imshow(combined_img_lr[j*5+i],cmap='binary')\n#         plt.text(0, 0,img_id[j*3+i][:-4]+' '+match_id[j*3+i][:-4],fontsize=14)\n        plt.axis('off')\n    plt.tight_layout()","f5cddef5":"tree = KDTree(all_r_ex)\ndist_rl, ind_rl = tree.query(all_l_ex, k=2) ","4d8c986f":"thresh = 0.4\nprint('No.of pairs',np.sum(dist_rl[:,0] < thresh))\ngood_idx_rl = np.ravel(np.where(dist_rl[:,0]<thresh))\ncombined_img_rl,img_id,match_id = gen_comb_img(all_arr_orig,good_idx_rl,ind_rl,pos='rl')","1409bf8c":"for j in range(5):\n    plt.figure(figsize=(15,30))\n    for i in range(5):\n        plt.subplot(1,5,i+1)\n        plt.imshow(combined_img_rl[j*5+i],cmap='binary')\n#         plt.text(0, 0,img_id[j*3+i][:-4]+' '+match_id[j*3+i][:-4],fontsize=14)\n        plt.axis('off')\n    plt.tight_layout()","ea025d99":"# loading train and test data","339c3ffa":"# down-up","aa35e55d":"# right - Left","50361234":"# left-right","f5e9eb15":"# Loading Libraries","c2ea9c0f":"# scaling and getting edges","ca592e58":"# up-down","84687453":"This kernel is inspired by [Vicen's excellent idea](https:\/\/www.kaggle.com\/vicensgaitan\/salt-jigsaw-puzzle) of organizing train & test images in connected puzzles. You can find his original R Kernel [here](https:\/\/www.kaggle.com\/vicensgaitan\/salt-jigsaw-puzzle). In this kernel i use KD Trees to find the nearest images and combine them. You can try experimenting with different threshold values and different distance metric to get different combination of images.","746f32e0":"# function for combining the images"}}