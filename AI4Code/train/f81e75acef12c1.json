{"cell_type":{"4c9ca12d":"code","476a3964":"code","9332db32":"code","3cb2738c":"code","e2ae2072":"code","087b84fc":"code","3a152a06":"code","eb2c8d5c":"code","ddcc8afb":"code","56085d7c":"code","7e9b9184":"code","871a0b5f":"code","aef376b4":"code","b1826bdf":"code","eb81003b":"code","71633796":"code","1ea46368":"code","6be2ca93":"code","55e25e5b":"code","539be16a":"markdown","16c6c287":"markdown","3a629611":"markdown","e6266478":"markdown","731af3f6":"markdown","4094ebe2":"markdown","a32366fd":"markdown","470c5d15":"markdown"},"source":{"4c9ca12d":"# Import libraries necessary for this project\nimport numpy as np\nimport pandas as pd\n\n#Visualization Libraries\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n#To plot the graph embedded in the notebook\n%matplotlib inline","476a3964":"#imports from sklearn library\nfrom sklearn import datasets\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.metrics import mean_squared_error","9332db32":"#loading the dataset direclty from sklearn\nboston = datasets.load_boston()","3cb2738c":"print(type(boston))\nprint('\\n')\nprint(boston.keys())\nprint('\\n')\nprint(boston.data.shape)\nprint('\\n')\nprint(boston.feature_names)","e2ae2072":"print(boston.DESCR)","087b84fc":"bos = pd.DataFrame(boston.data, columns = boston.feature_names)\nbos['PRICE'] = boston.target\n\nbos.head()","3a152a06":"bos.isnull().sum()","eb2c8d5c":"bos.describe()","ddcc8afb":"sns.set(rc={'figure.figsize':(11.7,8.27)})\nplt.hist(bos['PRICE'], bins=30)\nplt.xlabel(\"House prices in $1000\")\nplt.show()","56085d7c":"#Created a dataframe without the price col, since we need to see the correlation between the variables\nbos_1 = pd.DataFrame(boston.data, columns = boston.feature_names)\ncorrelation_matrix = bos_1.corr().round(2)\nsns.heatmap(data=correlation_matrix, annot=True)","7e9b9184":"plt.figure(figsize=(20, 5))\n\nfeatures = ['LSTAT', 'RM']\ntarget = bos['PRICE']\n\nfor i, col in enumerate(features):\n    plt.subplot(1, len(features) , i+1)\n    x = bos[col]\n    y = target\n    plt.scatter(x, y, marker='o')\n    plt.title(\"Variation in House prices\")\n    plt.xlabel(col)\n    plt.ylabel('\"House prices in $1000\"')","871a0b5f":"X_rooms = bos.RM\ny_price = bos.PRICE\n\n\nX_rooms = np.array(X_rooms).reshape(-1,1)\ny_price = np.array(y_price).reshape(-1,1)\n\nprint(X_rooms.shape)\nprint(y_price.shape)","aef376b4":"X_train_1, X_test_1, Y_train_1, Y_test_1 = train_test_split(X_rooms, y_price, test_size = 0.2, random_state=5)\n\nprint(X_train_1.shape)\nprint(X_test_1.shape)\nprint(Y_train_1.shape)\nprint(Y_test_1.shape)","b1826bdf":"reg_1 = LinearRegression()\nreg_1.fit(X_train_1, Y_train_1)\n\ny_train_predict_1 = reg_1.predict(X_train_1)\nrmse = (np.sqrt(mean_squared_error(Y_train_1, y_train_predict_1)))\nr2 = round(reg_1.score(X_train_1, Y_train_1),2)\n\nprint(\"The model performance for training set\")\nprint(\"--------------------------------------\")\nprint('RMSE is {}'.format(rmse))\nprint('R2 score is {}'.format(r2))\nprint(\"\\n\")","eb81003b":"# model evaluation for test set\ny_pred_1 = reg_1.predict(X_test_1)\nrmse = (np.sqrt(mean_squared_error(Y_test_1, y_pred_1)))\nr2 = round(reg_1.score(X_test_1, Y_test_1),2)\n\nprint(\"The model performance for training set\")\nprint(\"--------------------------------------\")\nprint(\"Root Mean Squared Error: {}\".format(rmse))\nprint(\"R^2: {}\".format(r2))\nprint(\"\\n\")","71633796":"prediction_space = np.linspace(min(X_rooms), max(X_rooms)).reshape(-1,1) \nplt.scatter(X_rooms,y_price)\nplt.plot(prediction_space, reg_1.predict(prediction_space), color = 'black', linewidth = 3)\nplt.ylabel('value of house\/1000($)')\nplt.xlabel('number of rooms')\nplt.show()","1ea46368":"X = bos.drop('PRICE', axis = 1)\ny = bos['PRICE']\n\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2, random_state=42)\n\nreg_all = LinearRegression()\nreg_all.fit(X_train, y_train)\n\n# model evaluation for training set\n\ny_train_predict = reg_all.predict(X_train)\nrmse = (np.sqrt(mean_squared_error(y_train, y_train_predict)))\nr2 = round(reg_all.score(X_train, y_train),2)\n\nprint(\"The model performance for training set\")\nprint(\"--------------------------------------\")\nprint('RMSE is {}'.format(rmse))\nprint('R2 score is {}'.format(r2))\nprint(\"\\n\")","6be2ca93":"# model evaluation for test set\n\ny_pred = reg_all.predict(X_test)\nrmse = (np.sqrt(mean_squared_error(y_test, y_pred)))\nr2 = round(reg_all.score(X_test, y_test),2)\n\nprint(\"The model performance for training set\")\nprint(\"--------------------------------------\")\nprint(\"Root Mean Squared Error: {}\".format(rmse))\nprint(\"R^2: {}\".format(r2))\nprint(\"\\n\")","55e25e5b":"plt.scatter(y_test, y_pred)\nplt.xlabel(\"Actual House Prices ($1000)\")\nplt.ylabel(\"Predicted House Prices: ($1000)\")\nplt.xticks(range(0, int(max(y_test)),2))\nplt.yticks(range(0, int(max(y_test)),2))\nplt.title(\"Actual Prices vs Predicted prices\")","539be16a":"### Plotting the model fitted line on the output variable","16c6c287":"### Training and testing the model","3a629611":"### Data Processing","e6266478":"### Splitting the data into training and testing sets","731af3f6":"### Exploratory data analysis","4094ebe2":"## Boston House Prices: Linear Regression\n### Import libraries","a32366fd":"### Regression model for all the variables","470c5d15":"### That's all."}}