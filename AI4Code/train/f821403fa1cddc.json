{"cell_type":{"d725e781":"code","b13fe76e":"code","b45e6ccf":"code","b617ece5":"code","55bafe68":"code","37f78ab5":"code","db545db6":"code","c7a8dbf1":"code","fc79b2a7":"markdown","77797801":"markdown","293b959d":"markdown","df163f10":"markdown","7373d136":"markdown","e04b6b7d":"markdown","fc442505":"markdown","8f4241d3":"markdown","1bd15850":"markdown"},"source":{"d725e781":"# Install:\n# GFootball environment (https:\/\/github.com\/google-research\/football\/)\n\n!apt-get update\n!apt-get install -y libsdl2-gfx-dev libsdl2-ttf-dev\n\n# Update kaggle-environments to the newest version.\n!pip3 install kaggle-environments -U\n\n# Make sure that the Branch in git clone and in wget call matches !!\n!git clone -b v2.3 https:\/\/github.com\/google-research\/football.git\n!mkdir -p football\/third_party\/gfootball_engine\/lib\n\n!wget https:\/\/storage.googleapis.com\/gfootball\/prebuilt_gameplayfootball_v2.3.so -O football\/third_party\/gfootball_engine\/lib\/prebuilt_gameplayfootball.so\n!cd football && GFOOTBALL_USE_PREBUILT_SO=1 pip3 install .","b13fe76e":"from gfootball.env.wrappers import Simple115StateWrapper\nfrom kaggle_environments import make\nenv = make(\"football\", \n           configuration={\"save_video\": False, \n                          \"scenario_name\": \"11_vs_11_kaggle\", \n                          \"running_in_notebook\": True,\n                         })\nobs = env.reset()","b45e6ccf":"# all game information\nobs","b617ece5":"# get raw obs for the first player we control.\nobs[0]['observation']['players_raw']","55bafe68":"from gfootball.env import observation_preprocessing\nraw_obs = obs[0]['observation']['players_raw']\nobs_smm = observation_preprocessing.generate_smm(raw_obs)[0]\nprint(obs_smm)\nprint(obs_smm.shape)","37f78ab5":"from gfootball.env.wrappers import Simple115StateWrapper\nraw_obs = obs[0]['observation']['players_raw']\n# Note: simple115v2 enables fixed_positions option.\n# Source code in https:\/\/github.com\/google-research\/football\/blob\/3603de77d2bf25e53a1fbd52bc439f1377397b3b\/gfootball\/env\/wrappers.py#L119\nobs_115 = Simple115StateWrapper.convert_observation(raw_obs, fixed_positions=True)[0]\nprint(obs_115)\nprint(obs_115.shape)","db545db6":"%%writefile .\/test.py\n\nfrom gfootball.env import observation_preprocessing\nfrom gfootball.env.wrappers import Simple115StateWrapper\nimport random\n\ndef agent(obs):\n    \n    # error:\n    # raw_obs = obs[0]['observation']['players_raw']\n    # obs115 = Simple115StateWrapper.convert_observation(raw_obs, True)[0]\n    # obs_smm = observation_preprocessing.generate_smm([raw_obs])[0]\n    \n    # correct:\n    raw_obs = obs['players_raw'][0]\n    obs_115 = Simple115StateWrapper.convert_observation([raw_obs], True)[0]\n    obs_smm = observation_preprocessing.generate_smm([raw_obs])[0]\n    \n    agent_output = random.randint(1, 18)\n    \n    # you need return a list contains your single action(a int type number from [1, 18])\n    # be ware of your model output might be a float number, so make sure return a int type number.\n    return [int(agent_output)]","c7a8dbf1":"from kaggle_environments import make\n\nlog = []\n\n# you can set debug=True or\/and logs to get more information for debug.\nenv = make(\"football\", \n           configuration={\"save_video\": True, \n                          \"scenario_name\": \"11_vs_11_kaggle\", \n                          \"running_in_notebook\": True,\n                         }, debug=True, logs=log)\noutput = env.run([\".\/test.py\", \".\/test.py\"])[-1]\nprint('Left player: reward = %s, status = %s, info = %s' % (output[0]['reward'], output[0]['status'], output[0]['info']))\nprint('Right player: reward = %s, status = %s, info = %s' % (output[1]['reward'], output[1]['status'], output[1]['info']))\n\n# you can print detailed log\n# print(log)\n\nenv.render(mode=\"human\", width=800, height=600)","fc79b2a7":"You can convert raw observation to Super Mini Map (SMM) with those codes:","77797801":"You can convert raw observation to simple115v2 with those codes:","293b959d":"When you explore gfootball env in notebook. you can create a gym format env like this:","df163f10":"Notice! the agent() method recieve obs with different format.\n\nas you can see in notebook https:\/\/www.kaggle.com\/piotrstanczyk\/gfootball-train-seed-rl-agent . It converts observation use those codes:\n```\nraw_obs = obs['players_raw'][0]\nobs_smm = observation_preprocessing.generate_smm([raw_obs])[0])\n```","7373d136":"env return a raw observation which contains all information described game state.\n\nyou need to get observations from it for the first (and only one) player we control.","e04b6b7d":"Example code when you need covert obs in method agent():","fc442505":"# Submit to Competition\n1. \"Save & Run All\" (commit) this Notebook\n1. Go to the notebook viewer\n1. Go to \"Data\" section and find submit.tar.gz file.\n1. Click \"Submit to Competition\"\n1. Go to [My Submissions] to view your score and episodes being played.","8f4241d3":"run an episode of game sees if your script ready to submit.\n\nunfortunately, running with no bug in notebook still can't guarantee you submission got no error.","1bd15850":"This notebook shows how do you convert raw observation to the format you need.\n\nand shows the difference between the obs returned by the env you created in notebook and the obs recieved by method agent() in submission.\n\nand some tips for your success submit.\n\nFirst of all, install the gfootball environment."}}