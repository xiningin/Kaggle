{"cell_type":{"25288202":"code","af88453f":"code","0170d0b9":"code","6bccdd6a":"code","efc03064":"code","ec812d12":"code","23e1c659":"code","306056c3":"code","d99f538c":"code","334271f1":"code","c2f7f1d8":"code","1ac6c586":"code","31ddfd86":"code","68724ffc":"code","bf8e9f39":"code","95389ca0":"code","006d57eb":"code","8a5e3b91":"code","330be18d":"code","87997281":"code","f0603de7":"code","e62eac92":"code","cbb9b90b":"code","6ddeb572":"code","9ca3206c":"code","49217da2":"code","4db7762e":"code","d58c36cc":"code","8147dc86":"code","cf15a018":"code","461fff0d":"code","26c24627":"code","11aa4517":"code","dec37134":"code","e5c75022":"code","bf22e062":"code","a486383c":"code","d45109a5":"code","6531f6f4":"code","70fcec75":"code","92bc717a":"code","d42b4842":"code","14ff7d8e":"code","015d62d9":"code","048b41be":"code","efd9f6ab":"code","97f26bb7":"code","ffac064f":"code","3bdf2af8":"code","5846efac":"code","6c828950":"code","5932de5b":"code","5e16334c":"code","9b22213a":"code","0994e81c":"code","d712eed9":"code","b9a10766":"markdown","ca2543c6":"markdown","282b09d6":"markdown","7322754f":"markdown","4ef77e4b":"markdown","75aee1e4":"markdown","429e3f34":"markdown","b3dcfe2f":"markdown","d91aacf3":"markdown","31c1db63":"markdown","f936dfe5":"markdown","78e8cf26":"markdown","c413b6fc":"markdown","a075758d":"markdown","7166d5a0":"markdown","a2b729b3":"markdown","3f825318":"markdown","5aecf8bd":"markdown","b215fe72":"markdown","35760bba":"markdown","7ba66353":"markdown","0b9ff360":"markdown","d30cfb90":"markdown"},"source":{"25288202":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport statsmodels.api as sm\nfrom statsmodels.tsa.arima.model import ARIMA\nfrom sklearn.metrics import mean_squared_error\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nsns.set(style=\"darkgrid\")\n\n%matplotlib inline","af88453f":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","0170d0b9":"df = pd.read_csv('..\/input\/avocado-prices\/avocado.csv')\ndf","6bccdd6a":"df.drop(columns=['Unnamed: 0','Total Bags','Small Bags','Large Bags','XLarge Bags'],inplace=True)","efc03064":"df.rename(columns={'4046':'PLU_4046','4225':'PLU_4225','4770':'PLU_4770'},inplace=True)","ec812d12":"df.head()","23e1c659":"df.info()","306056c3":"df['Date'] = pd.to_datetime(df['Date'])","d99f538c":"df.Date.nunique()","334271f1":"df.describe()","c2f7f1d8":"# Total avocada of each type\npd.value_counts(df['type'])","1ac6c586":"avocado_type = df.groupby(['type'])['Total Volume'].sum()\nprint(avocado_type)\navocado_type.plot.bar();","31ddfd86":"price = df.groupby(['type','year'])['AveragePrice'].mean().reset_index()","68724ffc":"plt.figure(figsize=(10,7));\nax = sns.barplot(x=\"year\", y=\"AveragePrice\", hue=\"type\", data=price)","bf8e9f39":"region = df.groupby(['region'])['Total Volume'].sum().reset_index()\ntop_region = region.nlargest(10,'Total Volume')\nplt.figure(figsize=(12,5));\nax = sns.barplot(x=\"region\", y=\"Total Volume\", data=top_region,color=\"b\")","95389ca0":"total_us = df[df.region=='TotalUS'].index","006d57eb":"df.drop(total_us,inplace=True)","8a5e3b91":"region = df.groupby(['region'])['Total Volume'].sum().reset_index()\ntop_region = region.nlargest(10,'Total Volume')\nplt.figure(figsize=(12,5));\nax = sns.barplot(x=\"region\", y=\"Total Volume\", data=top_region,color=\"b\")","330be18d":"# Avocado records per each year\nplt.figure(figsize=(8,5));\nlt = df.year.value_counts().sort_index(ascending=True).plot.bar()\nlt.set(title = 'Avocado records Per Year')\nlt.set_xlabel('Year', fontsize = '13')\nlt.set_ylabel('Count', fontsize = '13')\nplt.show()","87997281":"sold_per_year = df.groupby(['year'])['Total Volume'].sum().reset_index()\n\nfig, axes = plt.subplots(1, 2, figsize=(15, 5), sharey=True);\nfig.suptitle('Avocado sold per year');\n\nsns.barplot(x=\"year\", y=\"Total Volume\", ax= axes[0] ,data=sold_per_year,color=\"b\");\nsns.lineplot(x=sold_per_year['year'],y=sold_per_year['Total Volume'], ax= axes[1]);","f0603de7":"plt.figure(figsize=(12,5))\nsns.lineplot(x=df['year'],y=df['AveragePrice'])\nplt.xlabel('Avg price')\nplt.ylabel('years')\nplt.show()\n#price_per_year = df.groupby(['year'])['AveragePrice'].mean().reset_index()","e62eac92":"df_date = df.groupby(['Date'])['AveragePrice'].mean()\ndf_date = df_date.to_frame(name='AveragePrice')\n# Price\nplt.figure(figsize=(12,5))\ndf_date['AveragePrice'].plot();","cbb9b90b":"fig, axes = plt.subplots(4, 1, figsize=(15, 10), sharex=False);\nfig.suptitle('Avocado sold per year');\n\ndf_2015 = df_date.loc['2015']\nsns.lineplot(x=df_2015.index.month,y=df_2015['AveragePrice'], ax= axes[0]);\n\ndf_2016 = df_date.loc['2016']\nsns.lineplot(x=df_2016.index.month,y=df_2016['AveragePrice'], ax= axes[1]);\n\ndf_2017 = df_date.loc['2017']\nsns.lineplot(x=df_2017.index.month,y=df_2017['AveragePrice'], ax= axes[2]);\n\ndf_2018 = df_date.loc['2018']\nsns.lineplot(x=df_2018.index,y=df_2018['AveragePrice'], ax= axes[3]);","6ddeb572":"df_date_sold = df.groupby(['Date'])['Total Volume'].mean()\ndf_date_sold = df_date_sold.to_frame(name='Total Volume')\nplt.figure(figsize=(12,5))\ndf_date_sold['Total Volume'].plot();","9ca3206c":"df_date_organic = df[(df.type==\"organic\")].groupby(['Date'])['AveragePrice'].mean()\ndf_date_organic = df_date_organic.to_frame(name='AveragePrice')\n# Price\nplt.figure(figsize=(12,5))\ndf_date_organic['AveragePrice'].plot();","49217da2":"from statsmodels.tsa.stattools import adfuller\n\nX = df_date_organic['AveragePrice'].values\nresult = adfuller(X, autolag='AIC')\nprint('ADF Statistic: %f' % result[0])\nprint('p-value: %f' % result[1])\nprint('Critical Values:')\nfor key, value in result[4].items():\n    print('\\t%s: %.3f' % (key, value))\nif(result[1] > 0.05):\n    print(\"series is non-stationary\")\nelse:\n    print(\"series is stationary\")","4db7762e":"# KPSS test\nfrom statsmodels.tsa.stattools import kpss\n\nX = df_date_organic['AveragePrice'].values\nstatistic, p_value, n_lags, critical_values = kpss(X, nlags='auto')\nprint('ADF Statistic: %f' % statistic)\nprint('p-value: %f' % p_value)\nprint('num lags: %f' % n_lags)\nprint('Critical Values:')\nfor key, value in critical_values.items():\n    print('\\t%s: %.3f' % (key, value))\n\nif(p_value > 0.05):\n    print(\"series is stationary\")\nelse:\n    print(\"series is not stationary\")","d58c36cc":"train_size = int(len(df_date_organic) * 0.75)\ntrain_organic, test_organic = df_date_organic[0:train_size], df_date_organic[train_size:]","8147dc86":"train_organic","cf15a018":"sm.graphics.tsa.plot_acf(train_organic.AveragePrice, lags=50)\nplt.show()","461fff0d":"sm.graphics.tsa.plot_pacf(train_organic.AveragePrice, lags=50)\nplt.show()","26c24627":"train_organic.index = pd.DatetimeIndex(train_organic.index.values,\n                               freq=train_organic.index.inferred_freq)","11aa4517":"model = ARIMA(train_organic, order=(5,0,7))\nresults = model.fit()\nplt.figure(figsize=(12,5))\nplt.plot(train_organic);\nplt.plot(results.fittedvalues, color='red');","dec37134":"print(\"\\tMean Squared Error:\", mean_squared_error(train_organic['AveragePrice'], results.fittedvalues))\nprint(\"\\tRoot Mean Squared Error:\", np.sqrt(mean_squared_error(train_organic['AveragePrice'],results.fittedvalues)))","e5c75022":"residuals = pd.DataFrame(results.resid)\nresiduals.plot()\nplt.show()\nresiduals.plot(kind='kde')\nplt.show()","bf22e062":"history = [x for x in train_organic.AveragePrice]\npredictions = list()\ntest_data = [x for x in test_organic.AveragePrice]\n\nfor i in range(len(test_data)):\n    model = ARIMA(history, order=(6,0,12))\n    model_fit = model.fit()\n    output = model_fit.forecast()\n    yhat = output[0]\n    predictions.append(yhat)\n    obs = test_data[i]\n    history.append(obs)\n    print('predicted=%f, expected=%f' % (yhat, obs))","a486383c":"error = mean_squared_error(test_organic, predictions)\nprint(\"\\tMean Squared Error:\", mean_squared_error(test_organic, predictions))\nprint(\"\\tRoot Mean Squared Error:\", np.sqrt(mean_squared_error(test_organic,predictions)))","d45109a5":"plt.figure(figsize=(12,5))\nplt.plot(test_organic.values);\nplt.plot(predictions, color='red');","6531f6f4":"df_date_conventional = df[(df.type==\"conventional\")].groupby(['Date'])['AveragePrice'].mean()\ndf_date_conventional = df_date_conventional.to_frame(name='AveragePrice')\n# Price\nplt.figure(figsize=(12,5))\ndf_date_conventional['AveragePrice'].plot();","70fcec75":"from statsmodels.tsa.stattools import adfuller\n\nX = df_date_conventional['AveragePrice'].values\nresult = adfuller(X, autolag='AIC')\nprint('ADF Statistic: %f' % result[0])\nprint('p-value: %f' % result[1])\nprint('Critical Values:')\nfor key, value in result[4].items():\n    print('\\t%s: %.3f' % (key, value))\nif(result[1] > 0.05):\n    print(\"series is non-stationary\")\nelse:\n    print(\"series is stationary\")","92bc717a":"# KPSS test\nfrom statsmodels.tsa.stattools import kpss\n\nX = df_date_conventional['AveragePrice'].values\nstatistic, p_value, n_lags, critical_values = kpss(X, nlags='auto')\nprint('ADF Statistic: %f' % statistic)\nprint('p-value: %f' % p_value)\nprint('num lags: %f' % n_lags)\nprint('Critical Values:')\nfor key, value in critical_values.items():\n    print('\\t%s: %.3f' % (key, value))\n\nif(p_value > 0.05):\n    print(\"series is stationary\")\nelse:\n    print(\"series is not stationary\")","d42b4842":"df_date_conventional['AveragePriceDiff'] = df_date_conventional['AveragePrice'] - df_date_conventional['AveragePrice'].shift(1)\ndf_date_conventional['AveragePriceDiff'].dropna().plot(figsize=(10,5));","14ff7d8e":"from statsmodels.tsa.stattools import adfuller\n\nX = df_date_conventional['AveragePriceDiff'].dropna().values\nresult = adfuller(X, autolag='AIC')\nprint('ADF Statistic: %f' % result[0])\nprint('p-value: %f' % result[1])\nprint('Critical Values:')\nfor key, value in result[4].items():\n    print('\\t%s: %.3f' % (key, value))\nif(result[1] > 0.05):\n    print(\"series is non-stationary\")\nelse:\n    print(\"series is stationary\")","015d62d9":"# KPSS test\nfrom statsmodels.tsa.stattools import kpss\n\nX = df_date_conventional['AveragePriceDiff'].dropna().values\nstatistic, p_value, n_lags, critical_values = kpss(X, nlags='auto')\nprint('ADF Statistic: %f' % statistic)\nprint('p-value: %f' % p_value)\nprint('num lags: %f' % n_lags)\nprint('Critical Values:')\nfor key, value in critical_values.items():\n    print('\\t%s: %.3f' % (key, value))\n\nif(p_value > 0.05):\n    print(\"series is stationary\")\nelse:\n    print(\"series is not stationary\")","048b41be":"train_size = int(len(df_date_conventional) * 0.75)\ntrain_conventional, test_conventional = df_date_conventional[0:train_size], df_date_conventional[train_size:]","efd9f6ab":"sm.graphics.tsa.plot_acf(train_conventional.AveragePrice, lags=50)\nplt.show()","97f26bb7":"sm.graphics.tsa.plot_pacf(train_conventional.AveragePrice, lags=50)\nplt.show()","ffac064f":"train_conventional.index = pd.DatetimeIndex(train_conventional.index.values,\n                               freq=train_conventional.index.inferred_freq)","3bdf2af8":"model = ARIMA(train_conventional.AveragePrice, order=(10,1,6))\nresults_conventional = model.fit()\nplt.figure(figsize=(12,5))\nplt.plot(train_conventional.AveragePrice);\nplt.plot(results_conventional.fittedvalues[1:], color='red');","5846efac":"print(\"\\tMean Squared Error:\", mean_squared_error(train_conventional['AveragePrice'], results_conventional.fittedvalues))\nprint(\"\\tRoot Mean Squared Error:\", np.sqrt(mean_squared_error(train_conventional['AveragePrice'],results_conventional.fittedvalues)))","6c828950":"residuals = pd.DataFrame(results_conventional.resid)\nresiduals.plot()\nplt.show()\nresiduals.plot(kind='kde')\nplt.show()","5932de5b":"history = [x for x in train_conventional.AveragePrice]\npredictions = list()\ntest_data = [x for x in test_conventional.AveragePrice]\n\nfor i in range(len(test_data)):\n    model = ARIMA(history, order=(10,1,6))\n    model_fit = model.fit()\n    output = model_fit.forecast()\n    yhat = output[0]\n    predictions.append(yhat)\n    obs = test_data[i]\n    history.append(obs)\n    print('predicted=%f, expected=%f' % (yhat, obs))","5e16334c":"print(\"\\tMean Squared Error:\", mean_squared_error(test_conventional.AveragePrice, predictions))\nprint(\"\\tRoot Mean Squared Error:\", np.sqrt(mean_squared_error(test_conventional.AveragePrice,predictions)))","9b22213a":"plt.figure(figsize=(12,5))\nplt.plot(test_conventional.AveragePrice.values);\nplt.plot(predictions, color='red');","0994e81c":"from statsmodels.tsa.stattools import adfuller\n\nX = df_date['AveragePrice'].dropna().values\nresult = adfuller(X)\nprint('ADF Statistic: %f' % result[0])\nprint('p-value: %f' % result[1])\nprint('Critical Values:')\nfor key, value in result[4].items():\n    print('\\t%s: %.3f' % (key, value))\nif(result[1] > 0.05):\n    print(\"series is non-stationary\")\nelse:\n    print(\"series is stationary\")","d712eed9":"# KPSS test\nfrom statsmodels.tsa.stattools import kpss\n\nX = df_date['AveragePrice'].dropna().values\nstatistic, p_value, n_lags, critical_values = kpss(X)\nprint('ADF Statistic: %f' % statistic)\nprint('p-value: %f' % p_value)\nprint('num lags: %f' % n_lags)\nprint('Critical Values:')\nfor key, value in critical_values.items():\n    print('\\t%s: %.3f' % (key, value))\n\nif(p_value > 0.05):\n    print(\"series is stationary\")\nelse:\n    print(\"series is not stationary\")","b9a10766":"# Arima\n\n- AR: Autoregression\n- I: Integrated\n- MA: Moving Average","ca2543c6":"# Time Series\nA time series is a sequence of numerical data points in successive order.","282b09d6":"### Kwiatkowski-Phillips-Schmidt-Shin (KPSS)\nThe null and alternate hypothesis for the KPSS test are opposite that of the ADF test.\n\n- Null Hypothesis (H0): series is stationary.\n- Alternate Hypothesis (H1): series is non-stationary.\n- p-value > 0.05: Fail to reject the null hypothesis (H0), and series is stationary.\n- p-value <= 0.05: Reject the null hypothesis (H0), series is non-stationary. ","7322754f":"## Columns of interest\n\n- Date - The date of the observation\n- AveragePrice - the average price of a single avocado\n- type - conventional or organic\n- year - the year\n- Region - the city or region of the observation\n- Total Volume - Total number of avocados sold\n- 4046 - Total number of avocados with PLU 4046 sold\n- 4225 - Total number of avocados with PLU 4225 sold\n- 4770 - Total number of avocados with PLU 4770 sold","4ef77e4b":"## conventional","75aee1e4":"### Kwiatkowski-Phillips-Schmidt-Shin (KPSS)\nThe null and alternate hypothesis for the KPSS test are opposite that of the ADF test.\n\n- Null Hypothesis (H0): series is stationary.\n- Alternate Hypothesis (H1): series is non-stationary.\n- p-value > 0.05: Fail to reject the null hypothesis (H0), and series is stationary.\n- p-value <= 0.05: Reject the null hypothesis (H0), series is non-stationary. ","429e3f34":"#### Avocado sold per type","b3dcfe2f":"#### Avocado sold in each region","d91aacf3":"### Augmented Dickey Fuller \nWe are testing as our null hypothesis that our time-series is actually non-stationary\n\n- Null Hypothesis (H0): It is non-stationary. It has some time dependent structure.\n- Alternate Hypothesis (H1): It is stationary. It does not have time-dependent structure.\n- p-value > 0.05: Fail to reject the null hypothesis (H0), the data has a unit root and is non-stationary.\n- p-value <= 0.05: Reject the null hypothesis (H0), the data does not have a unit root and is stationary. ","31c1db63":"### Organic Avocados","f936dfe5":"### Augmented Dickey Fuller \nWe are testing as our null hypothesis that our time-series is actually non-stationary\n\n- Null Hypothesis (H0): It is non-stationary. It has some time dependent structure.\n- Alternate Hypothesis (H1): It is stationary. It does not have time-dependent structure.\n- p-value > 0.05: Fail to reject the null hypothesis (H0), the data has a unit root and is non-stationary.\n- p-value <= 0.05: Reject the null hypothesis (H0), the data does not have a unit root and is stationary. ","78e8cf26":"# Stationary time series\nstationarity means that the statistical properties of a process generating a time series do not change over time.\n- Constant mean\n- Constant Standard deviation\n- No seasonality (a regularly repeating pattern of highs and lows related to calendar time)","c413b6fc":"# Arima\n\n- AR: Autoregression\n- I: Integrated\n- MA: Moving Average","a075758d":"let's check yearly now","7166d5a0":"- Case 1: Both tests conclude that the series is not stationary - The series is not stationary\n- Case 2: Both tests conclude that the series is stationary - The series is stationary\n- Case 3: KPSS indicates stationarity and ADF indicates non-stationarity - The series is trend stationary. Trend needs to be removed to make series strict stationary. The detrended series is checked for stationarity.\n- Case 4: KPSS indicates non-stationarity and ADF indicates stationarity - The series is difference stationary. Differencing is to be used to make series stationary. The differenced series is checked for stationarity.","a2b729b3":"### Unit root tests\nTests for presence of unit root (Non stationary)","3f825318":"#### Avocado sold per year","5aecf8bd":"## Extra","b215fe72":"#### Avocado records per year","35760bba":"#### Avocado prices per type in each year","7ba66353":"# Analysis","0b9ff360":"#### Average price of Avocado per year","d30cfb90":"### Average price weekly"}}