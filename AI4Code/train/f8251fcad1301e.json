{"cell_type":{"f56552ea":"code","329229cf":"code","8d47aeea":"code","47415aa5":"code","83d9d65a":"code","e06618f4":"code","06b579b9":"code","fb1401e8":"code","5ce33c72":"code","47b2ed59":"code","7b7ba252":"code","08984eb3":"code","f4bfccbc":"code","b6978b52":"code","5c9f8cfd":"code","f8539f97":"markdown","56160fc4":"markdown","27c9d97a":"markdown","8095fefb":"markdown","b5d72f4c":"markdown","eac06127":"markdown","62d151e3":"markdown","06200765":"markdown","627aaffa":"markdown","becfe9dc":"markdown"},"source":{"f56552ea":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.\n\n\n%matplotlib inline\nimport cv2\nfrom scipy.stats import itemfreq\nimport matplotlib\nimport matplotlib.pyplot as plt\n\nimport seaborn as sns # visualizations\n","329229cf":"df = pd.read_csv(\"..\/input\/train_info.csv\")\ndf[df['title'].notnull()]","8d47aeea":"# https:\/\/www.kaggle.com\/getting-started\/39426\n!pip install --upgrade pip\n!pip install webcolors","47415aa5":"# https:\/\/stackoverflow.com\/a\/9694246\/5411712\nimport webcolors","83d9d65a":"# This code helps identify color names\n\n# https:\/\/stackoverflow.com\/a\/9694246\/5411712\ndef closest_colour(requested_colour):\n    min_colours = {}\n    for key, name in webcolors.css3_hex_to_names.items():\n        r_c, g_c, b_c = webcolors.hex_to_rgb(key)\n        rd = (r_c - requested_colour[0]) ** 2\n        gd = (g_c - requested_colour[1]) ** 2\n        bd = (b_c - requested_colour[2]) ** 2\n        min_colours[(rd + gd + bd)] = name\n    return min_colours[min(min_colours.keys())]\n\ndef get_colour_name(requested_colour):\n    try:\n        closest_name = actual_name = webcolors.rgb_to_name(requested_colour)\n    except ValueError:\n        closest_name = closest_colour(requested_colour)\n        actual_name = None\n    return actual_name, closest_name","e06618f4":"img = cv2.imread('..\/input\/train_2\/2.jpg')\nimg = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\nplt.imshow(img)","06b579b9":"# average_color = [img[:, :, i].mean() for i in range(img.shape[-1])]\n#===============\narr = np.float32(img)\npixels = arr.reshape((-1, 3))\n\nn_colors = 5\ncriteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 200, .1)\nflags = cv2.KMEANS_RANDOM_CENTERS\n_, labels, centroids = cv2.kmeans(pixels, n_colors, None, criteria, 10, flags)\n\npalette = np.uint8(centroids)\nquantized = palette[labels.flatten()]\nquantized = quantized.reshape(img.shape)\n#===============\ndominant_color = palette[np.argmax(itemfreq(labels)[:, -1])]\n# `itemfreq` is deprecated and will be removed in a future version. Use instead `np.unique(..., return_counts=True)`\n","fb1401e8":"actual_name, closest_name = get_colour_name(dominant_color)\n\nprint(\"palette = \")\npalette_names = []\nfor color in palette:\n    meh, name = get_colour_name(color)\n    palette_names.append(name)\n    print(str(color) + \" \" + str(name))\nprint('\\n\\n')\n\ndc = dominant_color\n\nprint(\"dominant_color (rgb)\\t=\\t\" + str(dominant_color))\nprint(\"dominant_color (name)\\t=\\t\" + str(closest_name))\nprint(\"dominant_color (hex)\\t=\\t\" + str('#%02x%02x%02x' % (dc[0], dc[1], dc[2])))\n","5ce33c72":"plt.imshow(img)\nplt.show()","47b2ed59":"df = pd.read_csv(\"..\/input\/train_info.csv\")\ndf.head(10)","7b7ba252":"df[(df['filename'] == '2.jpg')]","08984eb3":"#sns.boxplot(x='style', y='idk', data=df)\n\ndf['style']\n\nstyles = []\n\nfor s in df['style']:\n    if (s not in styles):\n        styles += [s]\n\nprint(\"\\nSTYLES\\n\")\nprint(styles)\n\ngenres = []\n\nfor g in df['genre']:\n    if (g not in genres):\n        genres += [g]\n\nprint(\"\\nGENRES\\n\")\nprint(genres)","f4bfccbc":"artists = {} # holds artist hash & the count\nfor a in df['artist']:\n    if (a not in artists):\n        artists[a] = 1\n    else:\n        artists[a] += 1\n\nprint(\"\\nHow many artists? \\n\")\nprint(len(artists))\n\n# convert unique hashes to unique numbers \n# conversion helps matplotlib actually plot\nnew_dict = {} \ni = 1\nfor each in artists:\n    new_dict[i] = artists[each]\n    i += 1\n\nlists = sorted(new_dict.items(), key=lambda kv: kv[1], reverse=True) # sorted by value, return a list of tuples\nx, y = zip(*lists) # unpack a list of pairs into two tuples\n\nfig_size = plt.rcParams[\"figure.figsize\"]\nfig_size[0] = 12\nfig_size[1] = 9\nplt.rcParams[\"figure.figsize\"] = fig_size\n\nplt.plot(y, x, 'r.')\nplt.title(s='Plot of Number of Images vs Artist ID')\nplt.ylabel(s='Artist ID (not hash but is unique number related to the hash)')\nplt.xlabel(s='Number of Images')\nplt.show()","b6978b52":"over_200 = 0\nover_300 = 0\nover_400 = 0\nunder_100 = 0\nunder_50 = 0\nunder_25 = 0\nunder_5 = 0\nunder_1 = 0\n\nfor a in artists:\n    over_200 = over_200 + 1 if artists[a] >= 200 else over_200\n    over_300 = over_300 + 1 if artists[a] >= 300 else over_300\n    over_400 = over_400 + 1 if artists[a] >= 400 else over_400\n    under_100 = under_100 + 1 if artists[a] <= 100 else under_100\n    under_50 = under_50 + 1 if artists[a] <= 50 else under_50\n    under_25 = under_25 + 1 if artists[a] <= 25 else under_25\n    under_5 = under_5 + 1 if artists[a] <= 5 else under_5\n    under_1 = under_1 + 1 if artists[a] <= 1 else under_1\n\nprint(\"OVER?\")\nprint(\"over_200 = \" + str(over_200))\nprint(\"over_300 = \" + str(over_300))\nprint(\"over_400 = \" + str(over_400))\n\nprint(\"UNDER?\")\nprint(\"under_100 = \" + str(under_100))\nprint(\"under_50 = \" + str(under_50))\nprint(\"under_25 = \" + str(under_25))\nprint(\"under_5 = \" + str(under_5))\nprint(\"under_1 = \" + str(under_1))","5c9f8cfd":"# https:\/\/stackoverflow.com\/a\/20026448\/5411712\nimport scipy.stats as stats\nfit = stats.norm.pdf(y, np.mean(y), np.std(y))  #this is a fitting indeed\nplt.plot(y,fit,'-o')\nplt.hist(y, normed=True)\nplt.show()\n\n# https:\/\/stackoverflow.com\/a\/15419072\/5411712\nvalues, base = np.histogram(y, bins=40)\ncumulative = np.cumsum(values)\nplt.plot(base[:-1], cumulative, '-o', c='blue')\nplt.plot(base[:-1], len(y)-cumulative, '-o', c='green')\nplt.hist(y, color='orange')\nplt.show()","f8539f97":"# Let's find the ***Color Palette*** of the image, and the ***Dominiant Color***\nResource: https:\/\/stackoverflow.com\/q\/43111029\/5411712","56160fc4":"# This Notebook is an exploration of the [\"Painter By Numbers\" dataset](https:\/\/www.kaggle.com\/c\/painter-by-numbers)\n\n# Observations\n1. This dataset has a lot of images\n\n# Questions \/ Hypotheses\n1. Is it possible to identify the artist of a painting by features related to the painting? \n  * Would the following features be helpful?\n    * color palette\n    * dominant color\n    * etc ...","27c9d97a":"# just two lists of all the ***unique*** ```styles``` and ```genres```","8095fefb":"# How many artists have over 300 images? ","b5d72f4c":"# Here is 1 image from the training set","eac06127":"# Let's look at the features related to ```..\/input\/train_2\/2.jpg```","62d151e3":"# The artist names are hashed... werid, but how many artists are there? Also how many images are there per artist? ","06200765":"# some stats plots to show the same info","627aaffa":"# SO [***goldenrod***](https:\/\/www.google.com\/search?q=goldenrod+color) is the dominant color of the image ```..\/input\/train_2\/2.jpg```\n\n#### a limitation of this technique\/code is that ```#d2d43b``` is not necessarily the same as ```goldenrod```, but it's close enough\n#### maybe just the hex code is enough\/better, but using color names would help reduce the feature size. ","becfe9dc":"# Here are all the image files and their features\n### * displaying just the first 10 with ```df.head(10)```"}}