{"cell_type":{"f05ab208":"code","3562772e":"code","fa0c4165":"code","8ff23227":"code","06e5761b":"code","21771181":"code","75e11d74":"code","dd3fc364":"code","a0cc44d6":"code","7a438cd0":"code","163e1917":"code","f02f3ad4":"code","87d1ead6":"code","94e3d0dd":"code","bcbf89aa":"code","456f000a":"code","ad79707a":"code","9d1ea5a9":"code","14b412a3":"code","6de6d46a":"code","9870d39d":"code","c08605d2":"code","bda61494":"code","0f0b88a4":"code","a829c128":"code","178fea4e":"code","05482ea7":"code","979364c1":"code","8c2eda8f":"code","a3de8fea":"code","d53a7bdf":"code","63377225":"code","62f1c37e":"code","12d9ac0b":"code","6bbb4d5b":"code","7e699248":"code","8f99e0e7":"code","56153d71":"code","41146124":"code","abbaeca8":"code","d7fcd3d5":"code","5248037c":"code","264d1319":"code","34616fec":"code","77db1a71":"code","24ae1517":"code","a9ebe469":"code","e1a7fdc4":"code","9180ae15":"code","ad36be12":"code","5203f6b3":"code","671912ca":"code","e8832d90":"code","e2bb4f45":"markdown","0369dd74":"markdown"},"source":{"f05ab208":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","3562772e":"ft = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/COVID19_open_line_list.csv')\nft.info()","fa0c4165":"pip install calmap","8ff23227":"import json\nimport random\nfrom urllib.request import urlopen\n\n# storing and analysis\nimport numpy as np\nimport pandas as pd\n\n# visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\nimport calmap\nimport folium\n\n#color pallette\ncnf = '#393e46' # confirmed - grey\ndth = '#ff2e63' # death - red\nrec = '#21bf73' # recovered - cyan\nact = '#fe9801' # actice case - yellow\n\n# converter\nfrom pandas.plotting import register_matplotlib_converters\nregister_matplotlib_converters()\n\n# hide warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# html embedding\nfrom IPython.display import Javascript\nfrom IPython.core.display import display\nfrom IPython.core.display import HTML","06e5761b":"# list files\n# ls ..\/input\/corona-virus-report","21771181":"#importing datasets\nfull_table = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv',parse_dates=['Last Update','ObservationDate'])\nfull_table.info()\nfull_table.isna().sum()","75e11d74":"# cases\ncases = ['Confirmed', 'Deaths', 'Recovered', 'Active']\n\n# Active Case = confirmed - deaths - recovered\nfull_table['Active'] = full_table['Confirmed'] - full_table['Deaths'] - full_table['Recovered']\n\n#replacing Mainland china with just China\nfull_table['Country\/region'] = full_table['Country\/Region'].replace('Mainland China','China')\n\n#filling missing values\nfull_table[['Province\/State']] = full_table[['Province\/State']].fillna('')\nfull_table[cases] = full_table[cases].fillna(0)","dd3fc364":"# cases in the ships\nship = full_table[full_table['Province\/State'].str.contains('Grand Princess')|full_table['Country\/Region'].str.contains('Cruise Ship')]\n\n# china and the row\nchina = full_table[full_table['Country\/Region']=='China']\nrow = full_table[full_table['Country\/Region']!='China']\n\n# latest\nfull_latest = full_table[full_table['ObservationDate'] == max(full_table['ObservationDate'])].reset_index()\nchina_latest = full_latest[full_latest['Country\/Region']=='China']\nrow_latest = full_latest[full_latest['Country\/Region']!='China']\n\nfull_latest_grouped = full_latest.groupby('Country\/Region')['Confirmed','Deaths','Recovered'].sum().reset_index()\nchina_latest_grouped = china_latest.groupby('Province\/State')['Confirmed','Deaths','Recovered'].sum().reset_index()\nrow_latest_grouped = row_latest.groupby('Country\/Region')['Confirmed','Deaths','Recovered'].sum().reset_index()","a0cc44d6":"# temp = full_table.groupby(['Country\/Region', 'Province\/State'])['Confirmed', 'Deaths', 'Recovered', 'Active'].max()\ntemp = full_table.groupby(['Country\/Region', 'Province\/State'])['Confirmed', 'Deaths', 'Recovered', 'Active'].max()","7a438cd0":"temp = full_table.groupby('ObservationDate')['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()\ntemp = temp[temp['ObservationDate']==max(temp['ObservationDate'])].reset_index(drop=True)\ntemp.style.background_gradient(cmap='Pastel1')","163e1917":"# tm = temp.melt(id_vars=\"Date\", value_vars=['Active', 'Deaths', 'Recovered'])\n# fig = px.treemap(tm, path=[\"variable\"], values=\"value\", height=400, width=600, color_discrete_sequence=[rec, act, dth])\n# fig.show()\ntm = temp.melt(id_vars=\"ObservationDate\", value_vars=['Active','Deaths','Recovered'])\nfig = px.treemap(tm, path=[\"variable\"], values=\"value\",height=400,width=600,color_discrete_sequence=[rec,act,dth])\nfig.show()","f02f3ad4":"temp_f = full_latest_grouped.sort_values(by='Confirmed', ascending=False)\ntemp_f = temp_f.reset_index(drop=True)\ntemp_f.style.background_gradient(cmap='Blues')","87d1ead6":"temp_flg = temp_f[temp_f['Deaths']>0][['Country\/Region', 'Deaths']]\ntemp_flg.sort_values('Deaths', ascending=False).reset_index(drop=True).style.background_gradient(cmap='Reds')","94e3d0dd":"temp = temp_f[temp_f['Recovered']==0][['Country\/Region', 'Confirmed', 'Deaths', 'Recovered']]\ntemp.reset_index(drop=True).style.background_gradient(cmap='Reds')","bcbf89aa":"temp = row_latest_grouped[row_latest_grouped['Confirmed']==row_latest_grouped['Deaths']]\ntemp = temp[['Country\/Region','Confirmed','Deaths']]\ntemp = temp.sort_values('Confirmed',ascending=False)\ntemp = temp.reset_index(drop=True)\ntemp.style.background_gradient(cmap='Reds')","456f000a":"temp = row_latest_grouped[row_latest_grouped['Confirmed']== row_latest_grouped['Recovered']]\ntemp = temp[['Country\/Region', 'Confirmed', 'Recovered']]\ntemp = temp.sort_values('Confirmed', ascending=False)\ntemp = temp.reset_index(drop=True)\ntemp.style.background_gradient(cmap='Greens')","ad79707a":"temp = row_latest_grouped[row_latest_grouped['Confirmed']== row_latest_grouped['Deaths'] + row_latest_grouped['Recovered']]\ntemp = temp[['Country\/Region', 'Confirmed', 'Deaths', 'Recovered']]\ntemp = temp.sort_values('Confirmed', ascending=False)\ntemp = temp.reset_index(drop=True)\ntemp.style.background_gradient(cmap='Greens')","9d1ea5a9":"temp_f = china_latest_grouped[['Province\/State', 'Confirmed', 'Deaths', 'Recovered']]\ntemp_f = temp_f.sort_values(by='Confirmed', ascending=False)\ntemp_f = temp_f.reset_index(drop=True)\ntemp_f.style.background_gradient(cmap='Pastel1_r')","14b412a3":"temp = china_latest_grouped[china_latest_grouped['Recovered']==0]\ntemp = temp[['Province\/State', 'Confirmed', 'Deaths', 'Recovered']]\ntemp = temp.sort_values('Confirmed', ascending=False)\ntemp = temp.reset_index(drop=True)\ntemp.style.background_gradient(cmap='Pastel1_r')","6de6d46a":"# World wide\nm = folium.Map(location=[0,0], tiles='cartodbpositron',min_zoom=1, max_zoom=4, zoom_start=1)\n\nfor i in range(0, len(full_latest)):\n    folium.Circle(\n        location=[ft.iloc[i]['latitude'], ft.iloc[i]['longitude']], color='crimson',\n        tooltip = '<li><bold>Country : '+str(ft.iloc[i]['country'])+\n                  '<li><bold>Province : '+str(ft.iloc[i]['province'])+\n                  '<li><bold>Confirmed : '+str(full_latest.iloc[i]['Confirmed'])+\n                  '<li><bold>Deaths : '+str(full_latest.iloc[i]['Deaths'])+\n                  '<li><bold>Recovered : '+str(full_latest.iloc[i]['Recovered']),\n        radius = int(full_latest.iloc[i]['Confirmed'])**1.1).add_to(m)\nm","9870d39d":"fig = px.choropleth(full_latest_grouped, locations=\"Country\/Region\", locationmode='country names', color=\"Confirmed\", hover_name=\"Country\/Region\", range_color=[1,7000], color_continuous_scale=\"aggrnyl\",title=\"Countries with Confirmed Cases\")\nfig.update(layout_coloraxis_showscale=False)\nfig.show()","c08605d2":"fig = px.choropleth(full_latest_grouped[full_latest_grouped['Deaths']>0], \n                    locations=\"Country\/Region\", locationmode='country names',\n                    color=\"Deaths\", hover_name=\"Country\/Region\", \n                    range_color=[1,50], color_continuous_scale=\"Bluered_r\",\n                    title='Countries with Deaths Reported')\nfig.update(layout_coloraxis_showscale=False)\nfig.show()","bda61494":"formated_gdf = full_table.groupby(['ObservationDate', 'Country\/Region'])['Confirmed','Deaths','Recovered'].max()\nformated_gdf = formated_gdf.reset_index()\nformated_gdf['ObservationDate'] = pd.to_datetime(formated_gdf['ObservationDate'])\nformated_gdf['ObservationDate'] = formated_gdf['ObservationDate'].dt.strftime('%m%d%Y')\nformated_gdf['size'] = formated_gdf['Confirmed'].pow(0.3)\n\nfig = px.scatter_geo(formated_gdf, locations=\"Country\/Region\", locationmode='country names',\n                     color = \"Deaths\", size = 'size', hover_name = \"Country\/Region\",\n                     range_color = [0, max(formated_gdf['Deaths'])+2],\n                     projection = \"natural earth\", animation_frame=\"ObservationDate\",\n                     title='Spread over time')\nfig.update(layout_coloraxis_showscale=True)\nfig.show()","0f0b88a4":"# temp = ship[ship['Date']==max(ship['Date'])]\n# temp = temp[['Province\/State', 'Confirmed', 'Deaths', 'Recovered']].reset_index(drop=True)\n# temp.style.background_gradient(cmap='Pastel1_r')\n\ntemp = ship[ship['ObservationDate']==max(ship['ObservationDate'])]\ntemp = temp[['Province\/State', 'Confirmed', 'Deaths', 'Recovered']].reset_index(drop=True)\ntemp.style.background_gradient(cmap='Pastel1_r')","a829c128":"temp = ship[ship['ObservationDate']==max(ship['ObservationDate'])]\n\nm = folium.Map(location=[0, 0], tiles='cartodbpositron',\n               min_zoom=1, max_zoom=4, zoom_start=1)\n\nfor i in range(0, len(temp)):\n    folium.Circle(\n        location=[ft.iloc[i]['latitude'], ft.iloc[i]['longitude']],\n        color='crimson', \n        tooltip =   '<li><bold>Country : '+str(ft.iloc[i]['country'])+\n                    '<li><bold>Province : '+str(ft.iloc[i]['province'])+\n                    '<li><bold>Confirmed : '+str(temp.iloc[i]['Confirmed'])+\n                    '<li><bold>Deaths : '+str(temp.iloc[i]['Deaths'])+\n                    '<li><bold>Recovered : '+str(temp.iloc[i]['Recovered']),\n        radius=100000).add_to(m)\nm","178fea4e":"temp = full_table.groupby('ObservationDate')['Recovered', 'Deaths', 'Active'].sum().reset_index()\ntemp = temp.melt(id_vars=\"ObservationDate\", value_vars=['Recovered','Deaths','Active'],var_name=\"Case\", value_name='Count')\ntemp.head()\n\nfig = px.area(temp, x=\"ObservationDate\", y=\"Count\", color=\"Case\", title=\"Cases over time\", color_discrete_sequence=[rec,dth,act])\nfig.show()","05482ea7":"temp = full_table.groupby('ObservationDate').sum().reset_index()\n\n#adding two more columns\ntemp['No of Deaths to 100 Confiermed Cases'] =  round(temp['Deaths']\/temp['Confirmed'], 3)*100\ntemp['No. of Recovered to 100 Confirmed Cases'] = round(temp['Recovered']\/temp['Confirmed'], 3)*100\ntemp = temp.melt(id_vars='ObservationDate', value_vars=['No of Deaths to 100 Confiermed Cases','No. of Recovered to 100 Confirmed Cases'], var_name='Ratio',value_name='Value')\n\nfig = px.line(temp, x=\"ObservationDate\", y=\"Value\", color=\"Ratio\", log_y=True, title='Recovery and Mortality Rate Over The Time', color_discrete_sequence=[dth, rec])\nfig.show()","979364c1":"c_spread = china[china['Confirmed']!=0].groupby('ObservationDate')['Province\/State'].unique().apply(len)\nc_spread = pd.DataFrame(c_spread).reset_index()\n\nfig = px.line(c_spread, x='ObservationDate', y='Province\/State', text='Province\/State',\n              title='Number of Provinces\/States\/Regions of China to which COVID-19 spread over the time',\n             color_discrete_sequence=[cnf,dth, rec])\nfig.update_traces(textposition='top center')\nfig.show()\n\n# ------------------------------------------------------------------------------------------\n\nspread = full_table[full_table['Confirmed']!=0].groupby('ObservationDate')['Country\/Region'].unique().apply(len)\nspread = pd.DataFrame(spread).reset_index()\n\nfig = px.line(spread, x='ObservationDate', y='Country\/Region', text='Country\/Region',\n              title='Number of Countries\/Regions to which COVID-19 spread over the time',\n             color_discrete_sequence=[cnf,dth, rec])\nfig.update_traces(textposition='top center')\nfig.show()","8c2eda8f":"flg = full_latest_grouped\nflg.head()","a3de8fea":"fig = px.bar(flg.sort_values('Confirmed',ascending=False).head(20).sort_values('Confirmed',ascending=True), x = \"Confirmed\", y=\"Country\/Region\", title=\"Confirmed Cases\", text=\"Confirmed\", orientation='h',\n             width=700, height=700, range_x=[0, max(flg['Confirmed'])+10000])\nfig.update_traces(marker_color='#46cdcf',opacity=0.8,textposition='outside')\nfig.show()","d53a7bdf":"fig = px.bar(flg.sort_values('Deaths', ascending=False).head(20).sort_values('Deaths', ascending=True), \n             x=\"Deaths\", y=\"Country\/Region\", title='Deaths', text='Deaths', orientation='h', \n             width=700, height=700, range_x = [0, max(flg['Deaths'])+500])\nfig.update_traces(marker_color=dth, opacity=0.6, textposition='outside')\nfig.show()","63377225":"fig = px.bar(flg.sort_values('Recovered', ascending=False).head(20).sort_values('Recovered', ascending=True), \n             x=\"Recovered\", y=\"Country\/Region\", title='Recovered', text='Recovered', orientation='h', \n             width=700, height=700, range_x = [0, max(flg['Recovered'])+10000])\nfig.update_traces(marker_color=rec, opacity=0.6, textposition='outside')\nfig.show()","62f1c37e":"full_table['Active'] = full_table['Confirmed'] - full_table['Deaths'] - full_table['Recovered']\nflg1 = full_table\nflg1.head()\nfig1 = px.bar(flg1.sort_values('Active', ascending=False).head(20).sort_values('Active', ascending=True), \n             x=\"Active\", y=\"Country\/Region\", title='Active', text='Active', orientation='h', \n             width=700, height=700, range_x = [0, max(flg1['Active'])+3000])\nfig1.update_traces(marker_color='#f0134d', opacity=0.6, textposition='outside')\nfig1.show()","12d9ac0b":"flg['Mortality Rate'] = round((flg['Deaths']\/flg['Confirmed'])*100, 2)\ntemp = flg[flg['Confirmed']>100]\ntemp = temp.sort_values('Mortality Rate', ascending=False)\n\nfig = px.bar(temp.sort_values('Mortality Rate', ascending=False).head(15).sort_values('Mortality Rate', ascending=True), \n             x=\"Mortality Rate\", y=\"Country\/Region\", text='Mortality Rate', orientation='h', \n             width=700, height=600, range_x = [0, 10], title='No. of Deaths Per 100 Confirmed Case')\nfig.update_traces(marker_color='#00a8cc', opacity=0.6, textposition='outside')\nfig.show()","6bbb4d5b":"temp = full_table.groupby(['Country\/Region', 'ObservationDate'])['Confirmed', 'Deaths', 'Recovered'].sum()\ntemp = temp.reset_index()\n\nfig = px.bar(temp, x=\"ObservationDate\", y=\"Confirmed\", color='Country\/Region', orientation='v', height=600,\n             title='Confirmed', color_discrete_sequence = px.colors.cyclical.mygbm)\nfig.show()","7e699248":"fig = px.bar(temp, x=\"ObservationDate\", y=\"Deaths\", color='Country\/Region', orientation='v', height=600,\n             title='Deaths', color_discrete_sequence = px.colors.cyclical.mygbm)\nfig.show()","8f99e0e7":"temp = full_table.groupby(['Country\/Region', 'ObservationDate'])['Confirmed', 'Deaths', 'Recovered']\ntemp = temp.sum().diff().reset_index()\n\nmask = temp['Country\/Region'] != temp['Country\/Region'].shift(1)\n\ntemp.loc[mask, 'Confirmed'] = np.nan\ntemp.loc[mask, 'Deaths'] = np.nan\ntemp.loc[mask, 'Recovered'] = np.nan\n\nfig = px.bar(temp, x=\"ObservationDate\", y=\"Confirmed\", color='Country\/Region', title='New cases')\nfig.show()","56153d71":"HTML('''<div class=\"flourish-embed flourish-bar-chart-race\" data-src=\"visualisation\/1571387\"><script src=\"https:\/\/public.flourish.studio\/resources\/embed.js\"><\/script><\/div>''')","41146124":"temp = full_table.groupby(['ObservationDate', 'Country\/Region'])['Confirmed'].sum().reset_index().sort_values('Confirmed', ascending=False)\npx.line(temp, x=\"ObservationDate\", y=\"Confirmed\", color='Country\/Region', title='Cases Spread', height=600)","abbaeca8":"fig = px.scatter(full_latest_grouped.sort_values('Deaths', ascending=False).iloc[:20, :], \n                 x='Confirmed', y='Deaths', color='Country\/Region',\n                 text='Country\/Region', log_x=True, log_y=True, title='Deaths vs Confirmed')\nfig.update_traces(textposition='top center')\nfig.show()","d7fcd3d5":"fig = px.treemap(full_latest.sort_values(by='Confirmed', ascending=False).reset_index(drop=True), \n                 path=[\"Country\/Region\", \"Province\/State\"], values=\"Confirmed\", height=700,\n                 title='Number of Confirmed Cases',\n                 color_discrete_sequence = px.colors.qualitative.Prism)\nfig.data[0].textinfo = 'label+text+value'\nfig.show()\n\nfig = px.treemap(full_latest.sort_values(by='Deaths', ascending=False).reset_index(drop=True), \n                 path=[\"Country\/Region\", \"Province\/State\"], values=\"Deaths\", height=700,\n                 title='Number of Deaths reported',\n                 color_discrete_sequence = px.colors.qualitative.Prism)\nfig.data[0].textinfo = 'label+text+value'\nfig.show()","5248037c":"# first date\n# ----------\nfirst_date = full_table[full_table['Confirmed']>0]\nfirst_date = first_date.groupby('Country\/Region')['ObservationDate'].agg(['min']).reset_index()\n# first_date.head()\nfrom datetime import timedelta  \n# last date\n# ---------\nlast_date = full_table.groupby(['Country\/Region', 'ObservationDate', ])['Confirmed', 'Deaths', 'Recovered']\nlast_date = last_date.sum().diff().reset_index()\n\nmask = last_date['Country\/Region'] != last_date['Country\/Region'].shift(1)\nlast_date.loc[mask, 'Confirmed'] = np.nan\nlast_date.loc[mask, 'Deaths'] = np.nan\nlast_date.loc[mask, 'Recovered'] = np.nan\n\nlast_date = last_date[last_date['Confirmed']>0]\nlast_date = last_date.groupby('Country\/Region')['ObservationDate'].agg(['max']).reset_index()\n# last_date.head()\n\n# first_last\n# ----------\nfirst_last = pd.concat([first_date, last_date[['max']]], axis=1)\n\n# added 1 more day, which will show the next day as the day on which last case appeared\nfirst_last['max'] = first_last['max'] + timedelta(days=1)\n\n# no. of days\nfirst_last['Days'] = first_last['max'] - first_last['min']\n\n# task column as country\nfirst_last['Task'] = first_last['Country\/Region']\n\n# rename columns\nfirst_last.columns = ['Country\/Region', 'Start', 'Finish', 'Days', 'Task']\n\n# sort by no. of days\nfirst_last = first_last.sort_values('Days')\n# first_last.head()\n\n# visualization\n# --------------\n\n# produce random colors\nclr = [\"#\"+''.join([random.choice('0123456789ABC') for j in range(6)]) for i in range(len(first_last))]\n#plot\nfig = ff.create_gantt(first_last, index_col='Country\/Region', colors=clr, show_colorbar=False, \n                      bar_width=0.2, showgrid_x=True, showgrid_y=True, height=1600, \n                      title=('Gantt Chart'))\nfig.show()","264d1319":"epidemics = pd.DataFrame({\n    'epidemic' : ['COVID-19', 'SARS', 'EBOLA', 'MERS', 'H1N1'],\n    'start_year' : [2019, 2003, 2014, 2012, 2009],\n    'end_year' : [2020, 2004, 2016, 2017, 2010],\n    'confirmed' : [full_latest['Confirmed'].sum(), 8096, 28646, 2494, 6724149],\n    'deaths' : [full_latest['Deaths'].sum(), 774, 11323, 858, 19654]\n})\n\nepidemics['mortality'] = round((epidemics['deaths']\/epidemics['confirmed'])*100, 2)\n\nepidemics.head()","34616fec":"temp = epidemics.melt(id_vars='epidemic', value_vars=['confirmed', 'deaths', 'mortality'],\n                      var_name='Case', value_name='Value')\n\nfig = px.bar(temp, x=\"epidemic\", y=\"Value\", color='epidemic', text='Value', facet_col=\"Case\",\n             color_discrete_sequence = px.colors.qualitative.Bold)\nfig.update_traces(textposition='outside')\nfig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')\nfig.update_yaxes(showticklabels=False)\nfig.layout.yaxis2.update(matches=None)\nfig.layout.yaxis3.update(matches=None)\nfig.show()","77db1a71":"confirmed_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_19-covid-Confirmed.csv')\ndeaths_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_19-covid-Deaths.csv')\nrecoveries_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_19-covid-Recovered.csv')","24ae1517":"confirmed_df.head(10)","a9ebe469":"cols = confirmed_df.keys()\ncols","e1a7fdc4":"cols = confirmed_df.keys()\ncols","9180ae15":"confirmed = confirmed_df.loc[:, cols[4]:cols[-1]]\ndeaths = deaths_df.loc[:, cols[4]:cols[-1]]\nrecoveries = recoveries_df.loc[:, cols[4]:cols[-1]]","ad36be12":"dates = confirmed.keys()\nworld_cases = []\ntotal_deaths = []\nmortality_rate = []\ntotal_recovered = []\n\nfor i in dates:\n    confirmed_sum = confirmed[i].sum()\n    death_sum = deaths[i].sum()\n    recovered_sum = recoveries[i].sum()\n    world_cases.append(confirmed_sum)\n    total_deaths.append(death_sum)\n    mortality_rate.append(death_sum\/confirmed_sum)\n    total_recovered.append(recovered_sum)","5203f6b3":"days_since_1_22 = np.array([i for i in range(len(dates))]).reshape(-1,1)\nworld_cases = np.array(world_cases).reshape(-1,1)\ntotal_deaths = np.array(total_deaths).reshape(-1,1)\ntotal_recovered = np.array(total_recovered).reshape(-1,1)\nworld_cases","671912ca":"days_in_future = 5\nfuture_forecast = np.array([i for i in range(len(dates)+days_in_future)]).reshape(-1,1)\nadjausted_dates = future_forecast[:-5]","e8832d90":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.colors as mcolors\nimport pandas as pd\nimport random\nimport math\nimport time\nfrom sklearn.linear_model import LinearRegression, BayesianRidge\nfrom sklearn.model_selection import RandomizedSearchCV, train_test_split\nfrom sklearn.svm import SVR\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\nimport datetime\nimport operator\nplt.style.use('seaborn')\n%matplotlib inline\n\nstart = '1\/22\/2020'\nstart_date = datetime.datetime.strptime(start, '%m\/%d\/%Y')\nfuture_forcast_dates = []\nfor i in range(len(future_forcast)):\n    future_forcast_dates.append((start_date + datetime.timedelta(days=i)).strftime('%m\/%d\/%Y'))","e2bb4f45":"> **Corona Virus**\n* Coronaviruses are zoonotic viruses (means transmitted between animals and people).\n* Symptoms include from fever, cough, respiratory symptoms, and breathing difficulties.\n* In severe cases, it can cause pneumonia, severe acute respiratory syndrome (SARS), kidney failure and even death.\n* Coronaviruses are also asymptomatic, means a person can be a carrier for the infection but experiences no symptoms\n\n> **Novel coronavirus (nCoV)**\n* A novel coronavirus (nCoV) is a new strain that has not been previously identified in humans.\n\n> **COVID-19 (Corona Virus Disease 2019)**\n* Caused by a SARS-COV-2 corona virus.\n* First identified in Wuhan, Hubei, China. Earliest reported symptoms reported in November 2019.\n* First cases were linked to contact with the Huanan Seafood Wholesale Market, which sold live animals.\n* On 30 January the WHO declared the outbreak to be a Public Health Emergency of International Concern","0369dd74":"This is my first kernel submission from learning from the data analysis. \n\nDisclaimer:\nI made it from various other sources and this is my first step towards being a kaggler. \ud83d\ude00\ud83d\ude00\ud83d\ude00"}}