{"cell_type":{"f9be0f43":"code","aa5934dc":"code","8ff0b031":"code","d44786ef":"code","b2ae838f":"code","dc1ccde3":"code","81b2274b":"code","f848ebcc":"code","b0ce5d6b":"code","097d8b01":"code","ef11bd44":"code","5729f90b":"code","6fd12156":"code","f07a544b":"code","daca4a19":"code","f2f518b6":"code","ffb2cb44":"code","2ad4b224":"code","86e58950":"code","da3794b5":"code","70605fa2":"code","0fd3e0f6":"code","3c628d18":"code","8cb38bf7":"code","8913c3ca":"code","bf4fd76e":"code","e0671ec7":"code","c0a98dee":"code","8597b6a1":"code","dbdafe21":"code","2020aa05":"code","24ff65e7":"code","321f5680":"code","f7b4929d":"code","f63b0f9d":"code","34a138c0":"code","d3b96475":"code","e33f1c36":"code","c42bd1ed":"code","46bfed8e":"code","3b2f39df":"code","77af85fa":"code","93cadedd":"code","c0e9bfd8":"markdown","1ff08a49":"markdown","e2ab1a26":"markdown","ffb5f524":"markdown","183a23b1":"markdown","fac2d569":"markdown","c45fd102":"markdown","c26d5782":"markdown","fc50b37d":"markdown","10c1d4d2":"markdown","e5d4b990":"markdown","4baa6c5a":"markdown","a0ecce33":"markdown","bb1d15b6":"markdown","1d19f218":"markdown","e96fb176":"markdown","7deb5c22":"markdown","a7ca9b62":"markdown","05164af5":"markdown","669dd97a":"markdown","7e08251d":"markdown","dd4af870":"markdown","83a3ba5a":"markdown","c104fac8":"markdown","3423b341":"markdown","8eef1b18":"markdown","d81bff7b":"markdown","511aa81a":"markdown","418b7b35":"markdown","0eeec8d6":"markdown","6504a442":"markdown","2f19a6c7":"markdown","f91f0169":"markdown"},"source":{"f9be0f43":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","aa5934dc":"import numpy as np\nimport pandas as pd\n\n#visualization libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n#ignore warnings\nimport warnings\nwarnings.filterwarnings('ignore')","8ff0b031":"train =pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest =pd.read_csv(\"..\/input\/titanic\/test.csv\")\n\ntrain.describe(include='all')","d44786ef":"train.head(5)","b2ae838f":"train.info()","dc1ccde3":"train.isnull().sum()","81b2274b":"test.isnull().sum()","f848ebcc":"sns.barplot(x=\"Sex\", y=\"Survived\", data=train)","b0ce5d6b":"sns.barplot(x=\"Pclass\", y=\"Survived\", data=train)","097d8b01":"sns.barplot(x=\"SibSp\", y=\"Survived\", data=train)","ef11bd44":"sns.barplot(x=\"Parch\", y=\"Survived\", data=train)\nplt.show()","5729f90b":"train['CabinBool']=train[\"Cabin\"].notnull()\ntest['CabinBool']=test[\"Cabin\"].notnull()\nsns.barplot(x=\"CabinBool\", y=\"Survived\", data=train)\nplt.show()","6fd12156":"train.info()","f07a544b":"train.Embarked.value_counts()\n","daca4a19":"from sklearn.preprocessing import LabelEncoder\nencoder =LabelEncoder()\n","f2f518b6":"train = train.fillna({\"Embarked\": \"S\"})\n\ntrain['Embarked']=encoder.fit_transform(train['Embarked'])\ntest['Embarked']=encoder.fit_transform(test['Embarked'])\n\ntrain.head()","ffb2cb44":"train['Sex']=encoder.fit_transform(train['Sex'])\ntest['Sex']=encoder.fit_transform(test['Sex'])\ntrain.head()","2ad4b224":"train = train.drop(['Cabin'], axis = 1)\ntest = test.drop(['Cabin'], axis = 1)","86e58950":"train = train.drop(['Ticket'], axis = 1)\ntest = test.drop(['Ticket'], axis = 1)","da3794b5":"train = train.drop(['Name'], axis = 1)\ntest = test.drop(['Name'], axis = 1)","70605fa2":"train.Age.fillna(value=train.Age.mean(), inplace=True)\n\ntest.Age.fillna(value=test.Age.mean(), inplace=True)\ntest.Fare.fillna(value=test.Fare.mean(), inplace=True)","0fd3e0f6":"train['CabinBool'] = encoder.fit_transform(train['CabinBool'])\ntest['CabinBool'] = encoder.fit_transform(test['CabinBool'])","3c628d18":"train.head()","8cb38bf7":"\nbins = [ 0, 5, 12, 18, 24, 35, 60, np.inf]\nlabels = [ 'Baby', 'Child', 'Teenager', 'Student', 'Young', 'Adult', 'Senior']\ntrain['AgeGroup'] = pd.cut(train[\"Age\"], bins, labels = labels)\ntest['AgeGroup'] = pd.cut(test[\"Age\"], bins, labels = labels)\n","8913c3ca":"age_mapping = {'Baby': 1, 'Child': 2, 'Teenager': 3, 'Student': 4, 'Young': 5, 'Adult': 6, 'Senior': 7}\ntrain['AgeGroup'] = train['AgeGroup'].map(age_mapping)\ntest['AgeGroup'] = test['AgeGroup'].map(age_mapping)","bf4fd76e":"train=train.drop(['Age'],axis =1)\ntest =test.drop(['Age'],axis=1)\ntrain['Fare'] =round(train['Fare'])\ntrain.head()","e0671ec7":"sns.barplot(x=\"AgeGroup\", y=\"Survived\", data=train)\nplt.show()\n","c0a98dee":"train.isnull().sum()","8597b6a1":"train.head()","dbdafe21":"y = train[\"Survived\"]\nX=train.drop(['Survived', 'PassengerId'], axis=1)\n","2020aa05":"from sklearn.model_selection import train_test_split\n\n\nx_train, x_val, y_train, y_val = train_test_split(X, y)\n","24ff65e7":"from sklearn.metrics import accuracy_score\nfrom sklearn.linear_model import LogisticRegression\n\nlog_model = LogisticRegression()\nlog_model.fit(x_train, y_train)\ny_pred = log_model.predict(x_val)\nacc_log=accuracy_score(y_pred, y_val) * 100\nprint(acc_log)","321f5680":"from sklearn.svm import SVC\nsvm_model =SVC()\nsvm_model.fit(x_train,y_train)\ny_pred =svm_model.predict(x_val)\nacc_svc =accuracy_score(y_pred,y_val)*100\nprint(acc_svc)\n\n","f7b4929d":"from sklearn.tree import DecisionTreeClassifier\n\ndecisiontree_model =DecisionTreeClassifier()\ndecisiontree_model.fit(x_train,y_train)\ny_pred =decisiontree_model.predict(x_val)\n\nacc_decisiontree_model=accuracy_score(y_pred, y_val)*100\nprint(acc_decisiontree_model)","f63b0f9d":"from sklearn.ensemble import RandomForestClassifier\n\nrandomforest_model = RandomForestClassifier()\nrandomforest_model.fit(x_train, y_train)\ny_pred = randomforest_model.predict(x_val)\nacc_randomforest =accuracy_score(y_pred, y_val) * 100\nprint(acc_randomforest)","34a138c0":"from sklearn.neighbors import KNeighborsClassifier\n\nknn_model = KNeighborsClassifier()\nknn_model.fit(x_train, y_train)\ny_pred = knn_model.predict(x_val)\nacc_knn_model = round(accuracy_score(y_pred, y_val) * 100, 2)\nprint(acc_knn_model)","d3b96475":"from sklearn.linear_model import SGDClassifier\n\nsgd_model = SGDClassifier()\nsgd_model.fit(x_train, y_train)\ny_pred = sgd_model.predict(x_val)\nacc_sgd_model = accuracy_score(y_pred, y_val) * 100\nprint(acc_sgd_model)","e33f1c36":"from sklearn.ensemble import GradientBoostingClassifier\n\ngbk_model = GradientBoostingClassifier()\ngbk_model.fit(x_train, y_train)\ny_pred = gbk_model.predict(x_val)\nacc_gbk_model= accuracy_score(y_pred, y_val) * 100\nprint(acc_gbk_model)","c42bd1ed":"compare =pd.DataFrame({\n    'model':['Support Vector Machines', 'KNN', 'Logistic Regression', \n              'Random Forest', \n              'Decision Tree', 'Stochastic Gradient Descent', 'Gradient Boosting Classifier'],\n    'Score': [acc_svc, acc_knn_model, acc_log, \n              acc_randomforest, acc_decisiontree_model,\n              acc_sgd_model, acc_gbk_model]\n})","46bfed8e":"compare","3b2f39df":"ids = test['PassengerId']\npredictions = gbk_model.predict(test.drop('PassengerId', axis=1))\n\noutput_file = pd.DataFrame({ 'PassengerId' : ids, 'Survived': predictions })\noutput_file.to_csv('submission4.csv', index=False)","77af85fa":"y = train[\"Survived\"]\n\nfeatures = [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\"]\nX = pd.get_dummies(train[features])\nX_test = pd.get_dummies(features)\n\nmodel =  GradientBoostingClassifier(n_estimators=100, max_depth=3, random_state=2)\nmodel.fit(X, y)\npredictions = model.predict(X_test)","93cadedd":"ids = test['PassengerId']\n\noutput_file = pd.DataFrame({ 'PassengerId' : ids, 'Survived': predictions })\noutput_file.to_csv('submission5.csv', index=False)","c0e9bfd8":"# Data loading","1ff08a49":"# Compare survived people according to their sex and we can see that female servived more.","e2ab1a26":"# Decision Tree Classifier","ffb5f524":"# Model compare","183a23b1":"# Comparing survived in different age group","fac2d569":"# Droping Age column because we have already converted into stages","c45fd102":"# Support vector machine","c26d5782":"# People with a recorded Cabin number are, in fact, more likely to survive","fc50b37d":"# Submission data","10c1d4d2":"# People with less than four parents or children aboard are more likely to survive than those with four or more. Again, people traveling alone are less likely to survive than those with 1-3 parents or children.","e5d4b990":"# Filling unknown value of age and Fare by mean of present values","4baa6c5a":"# Visulaization","a0ecce33":"train['FareBand'] = pd.qcut(train['Fare'], 4, labels = [1, 2, 3, 4])\ntest['FareBand'] = pd.qcut(test['Fare'], 4, labels = [1, 2, 3, 4])\n\n#drop Fare values\ntrain = train.drop(['Fare'], axis = 1)\ntest = test.drop(['Fare'], axis = 1)","bb1d15b6":"# Splitting Data","1d19f218":"# Scaling Fare column","e96fb176":"# Data Cleaning","7deb5c22":"# SGDC Classifier","a7ca9b62":"# Logistic Regression","05164af5":"# Gradient Boosting Classifier","669dd97a":"## Fill NAN with majority value  which is \"S\"","7e08251d":"# Cabin Feature","dd4af870":"# Ticket Feature","83a3ba5a":"# As predicted, people with higher socioeconomic class had a higher rate of survival.","c104fac8":"# sex feature","3423b341":"# Models ","8eef1b18":"#  general, it's clear that people with more siblings or spouses aboard were less likely to survive. However, contrary to expectations, people with no siblings or spouses were less to likely to survive than those with one or two","d81bff7b":"# Changing Cabin value into boolean","511aa81a":"# Embarked Feature","418b7b35":"# Random Forest Clsiifier","0eeec8d6":"# KNN Model","6504a442":"# converting different age group into different age stages","2f19a6c7":"# Name Feature","f91f0169":"# Libraries"}}