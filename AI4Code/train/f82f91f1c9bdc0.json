{"cell_type":{"54ac7d8a":"code","26d38d78":"code","75ca4a09":"code","71623e9e":"code","552e173a":"code","99254164":"code","4a790c63":"code","54120f8a":"code","02d9eace":"code","e19c8333":"code","254575c9":"code","3f82935e":"code","96352006":"code","120a4f86":"code","8b3c081f":"code","c6914e5f":"code","bc46bb2d":"code","12217690":"markdown","70eb220a":"markdown","d69128d1":"markdown","e6ecd103":"markdown","38e9e573":"markdown","a133f840":"markdown"},"source":{"54ac7d8a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\ndf = pd.read_csv(\"..\/input\/nyc-crime-stats\/NYC_crime.csv\")\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","26d38d78":"df.describe()","75ca4a09":"df.head()\n","71623e9e":"# create a column for year \ndf['year'] = df['arrest_date'].map(lambda x: x[:4])","552e173a":"# check\ndf.head()","99254164":"# split off year 2019\ndf_2019 = df[df['year'] == '2019']","4a790c63":"# convert arrest_date column to date time \n\ndf_2019['arrest_date'] =  pd.to_datetime(df_2019['arrest_date'], infer_datetime_format=True)","54120f8a":"# check \ndf_2019.head()","02d9eace":"# group by arrest month and then get the size or each month for total number of crimes\nNYC_crime_by_month_total_2019 = df_2019.groupby(df_2019['arrest_date'].dt.strftime('%m')).size()\n\n# then get the total number of crimes for the year \nNYC_total_crime_2019 = NYC_crime_by_month_total_2019.values.sum()\n\n# Use this figure to get the % of crime per month for NYC rounded to 2dp\nNYC_crime_by_month_propotional_2019 = np.round(((NYC_crime_by_month_total_2019.values\/NYC_total_crime_2019)*100),2)\n\n# plot this in a graph \nfig = plt.figure(figsize=(8,4))\nplt.plot(NYC_crime_by_month_total_2019.index, NYC_crime_by_month_propotional_2019)\nplt.yticks(list(range(7,11)))\nplt.legend(['2019'])","e19c8333":"df_2019_man = df_2019[df_2019['arrest_boro'] == 'M']\ndf_2019_bro = df_2019[df_2019['arrest_boro'] == 'K']\ndf_2019_que = df_2019[df_2019['arrest_boro'] == 'Q']\ndf_2019_bro = df_2019[df_2019['arrest_boro'] == 'B']\ndf_2019_sta = df_2019[df_2019['arrest_boro'] == 'S']\n\nlist_of_boros_df = [df_2019_man, df_2019_bro, df_2019_que, df_2019_bro, df_2019_sta]\nlist_of_boro_names = ['Manhatten', 'Brooklyn', 'Queens', 'Bronx', 'Statten Island']\nprop_crim_boro_dict = {}\n\nfor boro, boro_name in zip(list_of_boros_df, list_of_boro_names):\n\n    # group by arrest month and then get the size or each month for total number of crimes per boro\n    boro_crime_by_month_total_2019 = boro.groupby(boro['arrest_date'].dt.strftime('%m')).size()\n\n    # then get the total number of crimes for the year for the boro\n    boro_total_crime_2019 = boro_crime_by_month_total_2019.values.sum()\n\n    # Use this figure to get the % of crime per month for boro rounded to 2dp\n    boro_crime_by_month_proportional_2019 = np.round(((boro_crime_by_month_total_2019.values\/boro_total_crime_2019)*100),2)\n    prop_crim_boro_dict[boro_name] = boro_crime_by_month_proportional_2019\n    \n\nfor boro, crime in prop_crim_boro_dict.items():\n    plt.plot(list(range(1, 13)), crime, label=boro)\nplt.legend()\n\n                         ","254575c9":"df['ofns_desc'].unique()","3f82935e":"# looks like 'controlled substances' and 'drugs' should cover all drig offences\ndf_2019_drug_offences = df_2019[df_2019['ofns_desc'].str.contains('DRUG|CONTROLLED SUBSTANCES OFFENSES')]\ndf_2019_no_drug_offences = df_2019[df_2019['ofns_desc'].str.contains('DRUG|CONTROLLED SUBSTANCES OFFENSES')==False]","96352006":"# check \nprint('non drug offences =', df_2019_no_drug_offences['ofns_desc'].nunique(), '\\n','drug offences = ',  df_2019_drug_offences['ofns_desc'].nunique())","120a4f86":"# Create a function for the graphs \n\ndef plot_graphs(df, title):\n   # group by arrest month and then get the size or each month for total number of crimes\n    NYC_crime_by_month_total_2019 = df.groupby(df['arrest_date'].dt.strftime('%m')).size()\n\n    # then get the total number of crimes for the year \n    NYC_total_crime_2019 = NYC_crime_by_month_total_2019.values.sum()\n\n    # Use this figure to get the % of crime per month for NYC rounded to 2dp\n    NYC_crime_by_month_propotional_2019 = np.round(((NYC_crime_by_month_total_2019.values\/NYC_total_crime_2019)),2)\n    \n    \n    # plot this in a graph \n    fig = plt.figure(figsize=(8,4))\n    plt.plot(NYC_crime_by_month_total_2019.index, NYC_crime_by_month_propotional_2019)\n    plt.legend([title])\n    \n    return NYC_crime_by_month_total_2019, NYC_crime_by_month_propotional_2019","8b3c081f":"# get total and proportion of drug offfences in NYC\n\ntotal_drug_offences_per_month, prop_drug_offences_per_month = plot_graphs(df_2019_drug_offences, 'drug_offences')\n\nprint('total drug offences = ', total_drug_offences_per_month.values, '\\n', 'proportion of drug offences = ', prop_drug_offences_per_month)\n\n# get total and proportion of non drug offfences in NYC\n\ntotal_non_drug_offences_per_month, prop_non_drug_offences_per_month = plot_graphs(df_2019_no_drug_offences, 'non_drug_offences')\n\nprint('total non drug offences = ', total_non_drug_offences_per_month.values, '\\n', 'proportion of non drug offences = ', prop_non_drug_offences_per_month)","c6914e5f":"#  what would be the expected number of drug crimes per month \n\n# total drug crimes in 2019\n\ntotal_drug_crimes = total_drug_offences_per_month.values.sum()\n\n# therefore what was the expected number of drug crimes per month \n\nexpected_drug_crimes_per_month = prop_non_drug_offences_per_month * total_drug_crimes\n\nexpected_drug_crimes_per_month","bc46bb2d":"# CHI Square staistic then = (observed - expected)^2\/expected \n\ndifference_observed_expected = total_drug_offences_per_month.values - expected_drug_crimes_per_month\n\ndifference_squared = np.square(difference_observed_expected)\n\nsqu_difference_dived = difference_squared\/expected_drug_crimes_per_month\n\nCHI_stat = squ_difference_dived.sum()\n\nprint('CHI SQUARED Stat =', CHI_stat)","12217690":"If we take the degrees of freedom to be 11 (12 months - 1) and alpha to be 0.1\n\ngives a crtiical value of 18.\n\nmeans we definately reject the null hypothesis and drug crimes vary differently to other crimes in the year. ","70eb220a":"# Quick look at the data\n\nCan see that this is very large and any cell takes a long time to complete. Therefore will split out one year to make it more manageable. I will concentrate on 2019","d69128d1":"# Hypothosis Testing \n\nThe null hypothesis is that the number of drug crimes in NYC by month:\n[1723 1538 1652 1478 1374 1081 1307 1322 1161 1333 1161  820] \n\nis the same proportion of crime in NYC by month:\n[9.87 8.29 9.07 8.76 8.91 7.97 8.86 8.26 7.82 8.16 7.38 6.66]\n\n\nH1 is that there is a difference. \nWe will use a signifcance of alpha 0.1%, ie the chance of getting the drug offence distribution is less than 0.1%\n\n","e6ecd103":"* Note this is very much a beginers look. Any help with  the CHI Square testing at the end would be apprciated. ","38e9e573":"# Look at how crime varies though the year\n* first for NYC as a whole \n* second for the different boroughs","a133f840":"# CHI Square Test Expected Monthly Crime Proportion\n\nLooking at the graph above, all the boroughs look to have the same proportion of crime in each month with slight varience. High in January, low in December... \n\nI was wondering if we look a bit deeper into this, is this the same for all crimes. So if we split the df_2019 data frame into two. \n1. for crimes relating to drugs\n2. for the rest of the crimes \n\nThen we like before plot these on a graph do they look different. But to be more precise, could we run a CHI Squared test to prove they are statistically signifcantly different. "}}