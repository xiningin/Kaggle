{"cell_type":{"6af490bc":"code","3b97f32b":"code","9749271f":"code","7b38eb8d":"code","edf59caf":"code","a87e5eab":"code","dd707761":"code","7738c2b8":"code","f7e3008f":"code","8e9a0155":"markdown"},"source":{"6af490bc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\n\nimport math, datetime, pandas as pd, warnings\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\nimport plotly.express as px\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error, r2_score, f1_score\nfrom sklearn.preprocessing import PolynomialFeatures","3b97f32b":"warnings.filterwarnings('ignore')","9749271f":"print('Last update on', pd.to_datetime('now'))","7b38eb8d":"df = pd.read_csv('..\/input\/corona-virus-brazil\/brazil_covid19.csv').groupby('date').sum()[27:].reset_index()\nbrazil = pd.DataFrame({\n    'date': pd.to_datetime(df['date'], format='%Y\/%m\/%d'),\n    'cases': df['cases'], \n    'new_cases': df['cases'].diff().fillna(0).astype(int),\n    'growth_cases': df['cases'].diff().fillna(0).astype(int)\/df['cases'],\n    'deaths': df['deaths'],\n    'new_deaths': df['deaths'].diff().fillna(0).astype(int),\n    'growth_deaths': df['deaths'].diff().fillna(0).astype(int)\/df['deaths'],\n    'mortality_rate': df['deaths']\/df['cases']\n})\nbrazil.fillna(0).tail()","edf59caf":"def poly_reg(x, y, x_test, d):\n    poly = PolynomialFeatures(degree = d) \n    poly.fit(poly.fit_transform(x), y)\n    model = LinearRegression()\n    model.fit(poly.fit_transform(x), y)\n    return model.predict(poly.fit_transform(x_test))\n\ndef score(y, yhat):\n    r2 = r2_score(y,yhat)\n    rmse = np.sqrt(mean_squared_error(y,yhat))\n    return (r2,rmse)","a87e5eab":"# Defines the range\nstart = 1\nend = len(brazil)\n\n# Sets the samples\nx = np.asarray(range(start,end)).reshape(-1,1)\ny = brazil.iloc[start:,1]\n\n# Creates polynomial model and predict\nyhat = poly_reg(x, y, x, 4)\n\n# Plot the line chart\nfig, ax = plt.subplots(figsize=(14, 10))\nplt.scatter(x, y, s=40)\nplt.plot(x, yhat, color='magenta', linestyle='solid', linewidth=4, alpha=0.5)\nplt.title('Evaluating the model', fontsize=18, fontweight='bold', color='#333333')\nplt.legend(labels=['prediction','cases'], fontsize=12)\nplt.text(0.01,1.0,s='R2: %.3f RMSE: %.3f' % score(y, yhat), transform=ax.transAxes, fontsize=9)\nplt.grid(which='major', axis='y')\nax.set_axisbelow(True)\nax.set_ylim(0)\n[ax.spines[side].set_visible(False) for side in ['left','right','top']]\nplt.show();","dd707761":"# At\u00e9 qual data realizar a predi\u00e7\u00e3o\ndata_inicial = ''\ndata_final = '2020-08-25'","7738c2b8":"dates = pd.date_range(start=brazil.iloc[0,0], end=data_final) #.strftime('%d\/%m').to_list()","f7e3008f":"# Creates polynomial model and predict\nx_test = np.asarray(range(start, len(dates))).reshape(-1,1)\nyhat = poly_reg(x, y, x_test, 4)\nyhat_deaths = [i * 0.06 for i in yhat]\n\n# Plot the line chart\nfig, ax = plt.subplots(figsize=(14, 10))\nplt.plot(dates[start:end], y, color='limegreen', linewidth=8, alpha=0.5)\nplt.plot(brazil['date'][17:], brazil['deaths'][17:], color='magenta', linewidth=8, alpha=0.5)\n\nplt.plot(dates[start:len(dates)], yhat, color='green', linestyle='None', marker='o')\nplt.plot(dates[start:len(dates)], yhat_deaths, color='darkorchid', linestyle='None', marker='o')\n\n#plt.bar(brazil['date'][17:], brazil['new_cases'][17:])\nplt.title('COVID-19: cases prediction in Brazil', fontsize=18, fontweight='bold', color='#333333')\nplt.legend(labels=['cases','deaths', 'cases prediction', 'deaths prediction', 'new cases'], fontsize=14)\n\nplt.text(0.01,1.01,s='R2: %.3f RMSE: %.2f' % score(y, yhat[:len(y)]), transform=ax.transAxes, fontsize=10)\nplt.xticks(rotation=90)\nplt.tick_params(axis='y', length = 0)\nax.set_axisbelow(True)\n#[ax.annotate('%s' % y, xy=(x,y+300), fontsize=10) for x,y in zip(dates[start:len(dates)], yhat.astype(int))]\n#[ax.annotate('%s' % y, xy=(x,y+500), fontsize=10) for x,y in zip(dates[len(brazil['date']):len(dates)], yhat[len(brazil['date'][17:]):].astype(int))]\nax.xaxis.set_minor_locator(mdates.DayLocator(interval=1))\nax.xaxis.set_major_locator(mdates.DayLocator(interval=7))\nax.xaxis.set_major_formatter(mdates.DateFormatter(\"%d\/%m\"))\nax.yaxis.set_major_locator(plt.MultipleLocator(50000))\nax.yaxis.set_minor_locator(plt.MultipleLocator(10000))\nax.set_ylim(0)\n[ax.spines[side].set_visible(False) for side in ['right','top']]\nplt.grid(which='major', color='#EEEEEE')\nplt.grid(which='minor', color='#EEEEEE', linestyle=':')\nplt.show();","8e9a0155":"Polynomial Regression"}}