{"cell_type":{"e313bd4b":"code","f73f48d1":"code","e316236e":"code","e084dc81":"code","339f87b2":"code","3183c672":"code","dabf3fba":"code","1bd28114":"code","3bb8497f":"code","9cd490fe":"code","0a5c4aae":"code","b1745f9e":"code","b2204e1a":"code","5cb73ba3":"code","f134edf2":"code","f06efded":"code","99a1a3a4":"code","ca62b8fb":"code","8185b71f":"code","6c7282a6":"code","9776b3eb":"code","231ec0b0":"code","eedc2d2c":"code","04009caa":"code","c8e35109":"code","53f8b58b":"code","05a8459e":"code","e28d7128":"code","57ea5668":"code","97bcba18":"code","edf86703":"code","6ac1314b":"code","360d1aea":"code","994af623":"code","d8f2cb0e":"code","92f538ce":"code","4cc8d35b":"code","fdd4d6c7":"code","4effd14f":"code","c4f5b165":"code","819dbe40":"code","ae5231c5":"code","844b20b2":"code","4da6dbb9":"code","96314cb4":"code","8710fcc2":"code","5ef3dbb3":"code","1e8bef60":"code","ccb06e92":"code","1df9f352":"code","55ae2a52":"code","e91af53c":"code","ef374f86":"code","76d2d0c5":"code","43d4d27d":"code","45aa3005":"code","03a5d30e":"markdown","8c132ceb":"markdown","7803e0be":"markdown","ec728626":"markdown","0d9f3836":"markdown","7fd9e67d":"markdown","60ab5665":"markdown","94131715":"markdown"},"source":{"e313bd4b":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport plotly_express as px\nimport matplotlib.image as mpimg\nfrom tabulate import tabulate\nimport missingno as msno \nfrom IPython.display import display_html\nfrom PIL import Image\nimport gc\nimport cv2\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport matplotlib.pyplot as plt\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","f73f48d1":"data = pd.read_csv('\/kaggle\/input\/hotel-booking-demand\/hotel_bookings.csv')","e316236e":"data.head(5)","e084dc81":"data.describe(include='all')","339f87b2":"data.info()","3183c672":"def missing_values(df):\n    mv = df.isnull().sum().sort_values(ascending=False)\n    percentage = round(df.isnull().sum().sort_values(ascending=False) \/ len(df) * 100, 2)\n    return pd.concat([mv, percentage], axis=1, keys=['Total', 'Percentage'])","dabf3fba":"missing_values(data)","1bd28114":"data = data.drop(['company'], axis=1)","3bb8497f":"data = data.drop(['agent'], axis=1)","9cd490fe":"def percentage_count(df, feature):\n    percentage = pd.DataFrame(round(df.loc[:, feature].value_counts(dropna=False, normalize=True)* 100, 2))\n    total = pd.DataFrame(df.loc[:, feature].value_counts(dropna=False))\n    total.columns = ['Total']\n    total.columns = ['Percentage']\n    return pd.concat([total, percentage], axis=1)","0a5c4aae":"percentage_count(data, 'country')","b1745f9e":"data[data['country'].isnull()]","b2204e1a":"nan_replacements = {\"children:\": 0.0,\"country\": \"Unknown\"}\ndata = data.fillna(nan_replacements)","5cb73ba3":"data[data['children'].isnull()]","f134edf2":"zero_guests = list(data.loc[data[\"adults\"]\n                   + data[\"children\"]\n                   + data[\"babies\"]==0].index)\ndata.drop(data.index[zero_guests], inplace=True)","f06efded":"f, ax = plt.subplots(figsize=(12, 5))\nsns.countplot('is_canceled', data=data)","99a1a3a4":"dataset = data.copy()\ncancelled = data[data.is_canceled==1]\nnot_cancelled = data[data.is_canceled==0]","ca62b8fb":"f, ax = plt.subplots(figsize=(12, 5))\nsns.countplot('customer_type', data=data)","8185b71f":"from plotly.offline import init_notebook_mode,iplot\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\ntrace1 = go.Histogram(\n    x=cancelled.customer_type,\n    opacity=0.75,\n    name='cancelled')\n\ntrace2 = go.Histogram(\n    x=not_cancelled.customer_type,\n    opacity=0.75,\n    name='did not cancelled')\n\ndata = [trace1, trace2]\nlayout = go.Layout(barmode='stack',\n                   title='Cancelled and did not according to customer type ',\n                   xaxis=dict(title='Gender'),\n                   yaxis=dict( title='Count'),\n                   paper_bgcolor='beige',\n                   plot_bgcolor='beige'\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","6c7282a6":"f, ax = plt.subplots(figsize=(12, 5))\nsns.countplot('hotel', data=dataset)","9776b3eb":"from plotly.offline import init_notebook_mode,iplot\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\ntrace1 = go.Histogram(\n    x=cancelled.hotel,\n    opacity=0.75,\n    name='cancelled')\n\ntrace2 = go.Histogram(\n    x=not_cancelled.hotel,\n    opacity=0.75,\n    name='did not cancelled')\n\ndata = [trace1, trace2]\nlayout = go.Layout(barmode='stack',\n                   title='Cancelled and did not according to hotel',\n                   xaxis=dict(title='Hotel'),\n                   yaxis=dict( title='Count'),\n                   paper_bgcolor='beige',\n                   plot_bgcolor='beige'\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","231ec0b0":"datas = dataset.copy()\nfig = plt.figure(figsize=(15, 8))\nax=sns.kdeplot(datas.loc[(datas['is_canceled'] == 0),'adr'] , color='red',shade=True,label='did not cancel')\nax=sns.kdeplot(datas.loc[(datas['is_canceled'] == 1),'adr'] , color='green',shade=True, label='cancelled')\nplt.title('price Distribution cancelled vs Non cancelled', fontsize = 25, pad = 40)\nplt.ylabel(\"Frequency of customers cancelled\", fontsize = 15, labelpad = 20)\nplt.xlabel(\"Adr\", fontsize = 15, labelpad = 20)","eedc2d2c":"# order by month:\nordered_months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \n          \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\ndatas[\"arrival_date_month\"] = pd.Categorical(datas[\"arrival_date_month\"], categories=ordered_months, ordered=True)\n\nplt.figure(figsize=(12, 8))\nsns.lineplot(x = \"arrival_date_month\", y=\"adr\", hue=\"hotel\", data=datas, \n            hue_order = [\"City Hotel\", \"Resort Hotel\"], ci=\"sd\", size=\"hotel\", sizes=(2.5, 2.5))\nplt.title(\"Room price per night and person over the year\", fontsize=16)\nplt.xlabel(\"Month\", fontsize=16)\nplt.xticks(rotation=45)\nplt.ylabel(\"Price [EUR]\", fontsize=16)\nplt.show()","04009caa":"datas[datas.adr > 500]","c8e35109":"f, ax = plt.subplots(figsize=(12, 5))\nsns.countplot('assigned_room_type', data=dataset)","53f8b58b":"plt.subplots(figsize = (15,8))\nax = sns.barplot(x = \"assigned_room_type\", \n                 y = \"adr\", \n                 data=datas, \n                 linewidth=5\n\n                )\n\nplt.ylabel(\"prices\", fontsize = 15, )\nplt.xlabel(\"assigned_room_type\",fontsize = 15);","05a8459e":"# order by month:\nordered_months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \n          \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\ndatas[\"arrival_date_month\"] = pd.Categorical(datas[\"arrival_date_month\"], categories=ordered_months, ordered=True)\n\nplt.figure(figsize=(12, 8))\nsns.lineplot(x = \"arrival_date_month\", y=\"adr\", hue=\"assigned_room_type\", data=datas, \n            hue_order = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\"], ci=\"sd\", size=\"assigned_room_type\", sizes=(2.5, 2.5))\nplt.title(\"Assigned room type price per night and person over the year\", fontsize=16)\nplt.xlabel(\"Month\", fontsize=16)\nplt.xticks(rotation=45)\nplt.ylabel(\"Price [EUR]\", fontsize=16)\nplt.show()","e28d7128":"#Below is a heatmap of the correlation of the normal data:\ncorrelation_matrix = dataset.corr()\nfig = plt.figure(figsize=(20,8))\nsns.heatmap(correlation_matrix, vmax=0.8, square=True)","57ea5668":"correlation_matrix['is_canceled'].sort_values(ascending=False)","97bcba18":"trace1 = go.Histogram(\n    x=cancelled.deposit_type,\n    opacity=0.75,\n    name='cancelled')\n\ntrace2 = go.Histogram(\n    x=not_cancelled.deposit_type,\n    opacity=0.75,\n    name='did not cancelled')\n\n\ndata = [trace1, trace2]\nlayout = go.Layout(barmode='stack',\n                   title='Cancelled and did not according to deposit type',\n                   xaxis=dict(title='Deposite type'),\n                   yaxis=dict( title='Count'),\n                   paper_bgcolor='beige',\n                   plot_bgcolor='beige'\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","edf86703":"datas['hotel'] = datas['hotel'].map({'Resort Hotel':0, 'City Hotel':1})\ndatas['hotel'].unique()","6ac1314b":"datas =datas.drop(['children'], axis=1)","360d1aea":"datas['arrival_date_month'].unique()","994af623":"datas['arrival_date_month'] = datas['arrival_date_month'].map({'January':1, 'February': 2, 'March':3, 'April':4, 'May':5, 'June':6, 'July':7,\n                                                            'August':8, 'September':9, 'October':10, 'November':11, 'December':12})","d8f2cb0e":"datas['arrival_date_month'].unique()","92f538ce":"from sklearn import preprocessing\nlabel_encoder = preprocessing.LabelEncoder()","4cc8d35b":"datas['customer_type']= label_encoder.fit_transform(datas['customer_type']) \ndatas['assigned_room_type'] = label_encoder.fit_transform(datas['assigned_room_type'])\ndatas['deposit_type'] = label_encoder.fit_transform(datas['deposit_type'])\ndatas['reservation_status'] = label_encoder.fit_transform(datas['reservation_status'])\ndatas['meal'] = label_encoder.fit_transform(datas['meal'])\ndatas['country'] = label_encoder.fit_transform(datas['country'])\ndatas['distribution_channel'] = label_encoder.fit_transform(datas['distribution_channel'])\ndatas['market_segment'] = label_encoder.fit_transform(datas['market_segment'])\ndatas['reserved_room_type'] = label_encoder.fit_transform(datas['reserved_room_type'])\ndatas['reservation_status_date'] = label_encoder.fit_transform(datas['reservation_status_date'])","fdd4d6c7":"print('customer_type:', datas['customer_type'].unique())\nprint('reservation_status', datas['reservation_status'].unique())\nprint('deposit_type', datas['deposit_type'].unique())\nprint('assigned_room_type', datas['assigned_room_type'].unique())\nprint('meal', datas['meal'].unique())\nprint('Country:',datas['country'].unique())\nprint('Dist_Channel:',datas['distribution_channel'].unique())\nprint('Market_seg:', datas['market_segment'].unique())\nprint('reserved_room_type:', datas['reserved_room_type'].unique())","4effd14f":"y = datas['is_canceled']\nX = datas.drop(['is_canceled'], axis=1)","c4f5b165":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","819dbe40":"X_train = X_train.values\nX_test = X_test.values\ny_train = y_train.values\ny_test = y_test.values","ae5231c5":"from sklearn.linear_model import LogisticRegression","844b20b2":"classifier = LogisticRegression()\nclassifier.fit(X_train, y_train)","4da6dbb9":"from sklearn.model_selection import cross_val_score","96314cb4":"training_score = cross_val_score(classifier, X_train, y_train, cv=10)","8710fcc2":"training_score","5ef3dbb3":"training_score.mean()","1e8bef60":"# Use GridSearchCV to find the best parameters.\nfrom sklearn.model_selection import GridSearchCV\n\n\n# Logistic Regression \nlog_reg_params = {\"penalty\": ['l1', 'l2'], 'C': [0.001, 0.01, 0.1, 1, 10, 100, 1000]}\n\n\n\ngrid_log_reg = GridSearchCV(LogisticRegression(), log_reg_params)\ngrid_log_reg.fit(X_train, y_train)\n# We automatically get the logistic regression with the best parameters.\nlog_reg = grid_log_reg.best_estimator_","ccb06e92":"log_reg","1df9f352":"log_reg_score = cross_val_score(log_reg, X_train, y_train, cv=10)","55ae2a52":"log_reg_score","e91af53c":"y_pred = log_reg.predict(X_test)","ef374f86":"from sklearn.metrics import confusion_matrix","76d2d0c5":"cm = confusion_matrix(y_pred, y_test)\ncm","43d4d27d":"from sklearn.metrics import classification_report","45aa3005":"print('Logistic Regression:')\nprint(classification_report(y_test, y_pred))","03a5d30e":"We have more transient customers","8c132ceb":"Almost every one who deposited upfront cancelled\n30% of the people who made no deposit cancelled","7803e0be":"I think we will drop company since more than 90% of its data is missing","ec728626":"Please upvote after reading","0d9f3836":"A lot of customers that bought tickets under 1000 euros canceled ","7fd9e67d":"There is an outlier with a hotel fee of 5400 euros. He only stayed at the hotel for 1 week night and he was assigned room A.","60ab5665":"Most of our guest are from portugal","94131715":"The hotel fee for room A is less than 100 euros a year. That means our guy that paid more than 5000 euros \nfor room A is an outliner. Even the other two that paid more than 500 pounds too"}}