{"cell_type":{"de9c762d":"code","cbc1b891":"code","10abb70e":"code","ebb0559b":"code","8d5fb30a":"code","d92371f9":"code","048dc8d3":"code","fc7a3164":"code","4880d357":"code","e1f76b0b":"code","3388bd85":"code","a5995602":"markdown","febce14c":"markdown","28997d42":"markdown","f523f000":"markdown","c19ae9ef":"markdown"},"source":{"de9c762d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cbc1b891":"import warnings\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nimport category_encoders as ce\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import KFold\nfrom sklearn import tree\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import classification_report\n\nwarnings.filterwarnings('ignore')","10abb70e":"data = '\/kaggle\/input\/car-evaluation-data-set\/car_evaluation.csv'\n\ndf = pd.read_csv(data, header=None)","ebb0559b":"col_names = ['buying', 'maint', 'doors', 'persons', 'lug_boot', 'safety', 'class']\n\ndf.columns = col_names\n\ncol_names","8d5fb30a":"X = df.drop(['class'], axis=1)\n\nY = df['class']","d92371f9":"X.head()","048dc8d3":"Y.head()","fc7a3164":"kfold = KFold(3, True, 1)","4880d357":"encoder = ce.OrdinalEncoder(cols=['buying', 'maint', 'doors', 'persons', 'lug_boot', 'safety'])\nX = encoder.fit_transform(X)\n#X_test = encoder.transform(X_test)","e1f76b0b":"X = X.to_numpy()\nY = Y.to_numpy()","3388bd85":"i=1\nfor train, test in kfold.split(X):\n    \n    X_train = X[train]\n    X_test = X[test]\n    Y_train = Y[train]\n    Y_test = Y[test]\n    \n    clf_gini = DecisionTreeClassifier(criterion='gini', max_depth=3, random_state=0)\n\n    clf_gini.fit(X_train, Y_train)\n    y_pred_gini = clf_gini.predict(X_test)\n    \n    print('Split number: '+str(i))\n    i=i+1\n    print('Model accuracy score with criterion gini index: {0:0.4f}'. format(accuracy_score(Y_test, y_pred_gini)))\n    \n    y_pred_train_gini = clf_gini.predict(X_train)\n    y_pred_train_gini\n    \n    print('Training-set accuracy score: {0:0.4f}'. format(accuracy_score(Y_train, y_pred_train_gini)))\n    \n    print('Training set score: {:.4f}'.format(clf_gini.score(X_train, Y_train)))\n    print('Test set score: {:.4f}'.format(clf_gini.score(X_test, Y_test)))\n    \n    plt.figure(figsize=(12,12))\n    #col_names = ['unacc', 'acc']\n    tree.plot_tree(clf_gini.fit(X_train, Y_train), class_names = list(df['class'].unique()))\n    \n    print(classification_report(Y_train, y_pred_train_gini, target_names = list(df['class'].unique())))","a5995602":"# Removing unnecessary cols","febce14c":"# Setting up Kfold and encoding categorical variables","28997d42":"# Imports ","f523f000":"# Training and testing over the multiple splits created using Kfold","c19ae9ef":"# Renaming cols"}}