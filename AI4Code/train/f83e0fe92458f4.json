{"cell_type":{"886fbb94":"code","54257290":"code","37dc4e77":"code","fe5ff6c0":"code","2a8375be":"code","af87052e":"code","0dacf89b":"code","973611d5":"code","cc2ac1ab":"code","1dc91848":"code","952e6b41":"code","76f869e2":"code","74a38fe8":"code","c817af9e":"code","d232e2d0":"code","be206015":"code","e97ecda0":"code","be6a5126":"code","b31e0c07":"code","f00b5b38":"code","8ca50169":"code","e26d1fe7":"code","97457a69":"code","4717e78d":"code","0a25ba03":"code","bdfef5a4":"code","e21e344a":"code","1d65007f":"code","a1c2b9ae":"code","1dde3678":"code","38d6ea5c":"code","f43ea63a":"code","e1c12e86":"code","430c08a0":"code","b4f4e477":"code","406e3655":"code","db2527e7":"code","2367b933":"code","cba3133c":"code","3b2a5bde":"code","1fc78902":"markdown","a83d5b44":"markdown","2b3bb257":"markdown","5060160e":"markdown","285e3b78":"markdown"},"source":{"886fbb94":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\/titanic\"))\n\n# Any results you write to the current directory are saved as output.","54257290":"train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntrain.head()","37dc4e77":"test = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ntest.head()","fe5ff6c0":"train.info()","2a8375be":"test.info()","af87052e":"all = pd.concat([train, test], sort = False)\nall.info()","0dacf89b":"#Fill Missing numbers with median\nall['Age'] = all['Age'].fillna(value=all['Age'].median())\nall['Fare'] = all['Fare'].fillna(value=all['Fare'].median())","973611d5":"all.info()","cc2ac1ab":"sns.catplot(x = 'Embarked', kind = 'count', data = all) #or all['Embarked'].value_counts()","1dc91848":"all['Embarked'] = all['Embarked'].fillna('S')\nall.info()","952e6b41":"#Age\nall.loc[ all['Age'] <= 16, 'Age'] = 0\nall.loc[(all['Age'] > 16) & (all['Age'] <= 32), 'Age'] = 1\nall.loc[(all['Age'] > 32) & (all['Age'] <= 48), 'Age'] = 2\nall.loc[(all['Age'] > 48) & (all['Age'] <= 64), 'Age'] = 3\nall.loc[ all['Age'] > 64, 'Age'] = 4 ","76f869e2":"#Title\nimport re\ndef get_title(name):\n    title_search = re.search(' ([A-Za-z]+\\.)', name)\n    \n    if title_search:\n        return title_search.group(1)\n    return \"\"","74a38fe8":"all['Title'] = all['Name'].apply(get_title)\nall['Title'].value_counts()","c817af9e":"all['Title'] = all['Title'].replace(['Capt.', 'Dr.', 'Major.', 'Rev.'], 'Officer.')\nall['Title'] = all['Title'].replace(['Lady.', 'Countess.', 'Don.', 'Sir.', 'Jonkheer.', 'Dona.'], 'Royal.')\nall['Title'] = all['Title'].replace(['Mlle.', 'Ms.'], 'Miss.')\nall['Title'] = all['Title'].replace(['Mme.'], 'Mrs.')\nall['Title'].value_counts()","d232e2d0":"#Cabin\nall['Cabin'] = all['Cabin'].fillna('Missing')\nall['Cabin'] = all['Cabin'].str[0]\nall['Cabin'].value_counts()","be206015":"all.info()","e97ecda0":"#Family Size & Alone \nall['Family_Size'] = all['SibSp'] + all['Parch'] + 1\nall['IsAlone'] = 0\nall.loc[all['Family_Size']==1, 'IsAlone'] = 1\nall.head()","be6a5126":"all.info()","b31e0c07":"#Drop unwanted variables\nall_1 = all.drop(['Name', 'Ticket'], axis = 1)\nall_1.head()","f00b5b38":"all_dummies = pd.get_dummies(all_1)\nall_dummies.info()","8ca50169":"all_train = all_dummies[all_dummies['Survived'].notna()]\nall_train.info()","e26d1fe7":"all_test = all_dummies[all_dummies['Survived'].isna()]\nall_test.info()","97457a69":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(all_train.drop(['PassengerId','Survived'],axis=1), \n                                                    all_train['Survived'], test_size=0.30, \n                                                    random_state=101)","4717e78d":"from sklearn.ensemble import RandomForestClassifier","0a25ba03":"RF_Model = RandomForestClassifier()","bdfef5a4":"#from sklearn.model_selection import GridSearchCV","e21e344a":"#Using max_depth, criterion will suffice for DT Models, rest all will remain constant \n#parameters = {'n_estimators' : (10,30,50,70,90,100)\n#              , 'criterion' : ('gini', 'entropy')\n#              , 'max_depth' : (3,5,7,9,10)\n#              , 'max_features' : ('auto', 'sqrt')\n#              , 'min_samples_split' : (2,4,6)\n#              #, 'min_weight_fraction_leaf' : (0.0,0.1,0.2,0.3)\n#             }","1d65007f":"#RF_grid  = GridSearchCV(RandomForestClassifier(n_jobs = -1, oob_score= False), param_grid = parameters, cv = 3, verbose = True)","a1c2b9ae":"#RF_grid_model = RF_grid.fit(X_train, y_train)","1dde3678":"#RF_grid_model.best_estimator_","38d6ea5c":"RF_Model = RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n                       criterion='gini', max_depth=7, max_features='sqrt',\n                       max_leaf_nodes=None, max_samples=None,\n                       min_impurity_decrease=0.0, min_impurity_split=None,\n                       min_samples_leaf=1, min_samples_split=6,\n                       min_weight_fraction_leaf=0.0, n_estimators=10, n_jobs=-1,\n                       oob_score=False, random_state=None, verbose=0,\n                       warm_start=False)","f43ea63a":"RF_Model.fit(X_train, y_train)","e1c12e86":"predictions = RF_Model.predict(X_test)\npredictions","430c08a0":"print(f'Test : {RF_Model.score(X_test, y_test):.3f}')\nprint(f'Train : {RF_Model.score(X_train, y_train):.3f}')","b4f4e477":"all_test.head()","406e3655":"TestForPred = all_test.drop(['PassengerId', 'Survived'], axis = 1)","db2527e7":"t_pred = RF_Model.predict(TestForPred).astype(int)","2367b933":"PassengerId = all_test['PassengerId']","cba3133c":"RF_Sub = pd.DataFrame({'PassengerId': PassengerId, 'Survived':t_pred })\nRF_Sub.head()","3b2a5bde":"RF_Sub.to_csv(\"RF_Class_Submission.csv\", index = False)","1fc78902":"****Check Accuracy","a83d5b44":"****Extra Features:","2b3bb257":"****Final Predictions","5060160e":"### Build Random Forest","285e3b78":"****Train\/Test Split"}}