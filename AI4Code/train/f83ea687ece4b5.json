{"cell_type":{"60adcb84":"code","fdb82d97":"code","ad8a5894":"code","54ef1ac4":"code","9f57d13c":"code","ce21ecf1":"code","1cb19f9c":"code","85fe6351":"code","0eb90e54":"code","f658bf8a":"code","8ea863e9":"code","f598705a":"code","f4855bf3":"code","fad08825":"code","dca48de9":"code","bde6baae":"code","b0f93ce5":"code","374cf3f1":"code","4ca9315a":"code","e7e9fdfd":"code","92b3513c":"code","919c7987":"code","2e099f99":"code","353b6d96":"code","ca196333":"code","08abb09c":"code","f4c0853f":"markdown","6828f5bf":"markdown","6bb71cfd":"markdown","6f04a399":"markdown","26c2fbe8":"markdown","3f1f8dff":"markdown","9fe24e08":"markdown","1e2cd72e":"markdown"},"source":{"60adcb84":"import numpy as np\nimport pandas as pd\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\n\nimport tensorflow as tf\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F","fdb82d97":"data = pd.read_csv('..\/input\/housesalesprediction\/kc_house_data.csv')","ad8a5894":"data","54ef1ac4":"data.info()","9f57d13c":"data = data.drop('id', axis=1)","ce21ecf1":"data['year'] = data['date'].apply(lambda x: x[0:4])\ndata['month'] = data['date'].apply(lambda x: x[4:6])\n\ndata = data.drop('date', axis=1)","1cb19f9c":"len(data['zipcode'].unique())","85fe6351":"def onehot_encode(df, column, prefix):\n    df = df.copy()\n    dummies = pd.get_dummies(df[column], prefix=prefix)\n    df = pd.concat([df, dummies], axis=1)\n    df = df.drop(column, axis=1)\n    return df","0eb90e54":"data = onehot_encode(data, 'zipcode', 'zip')","f658bf8a":"data.query(\"yr_renovated != 0\")","8ea863e9":"data = data.drop('yr_renovated', axis=1)","f598705a":"data","f4855bf3":"y = data['price'].copy()\nX = data.drop('price', axis=1).copy()","fad08825":"scaler = StandardScaler()\n\nX = scaler.fit_transform(X)","dca48de9":"tf_X_train, tf_X_test, tf_y_train, tf_y_test = train_test_split(X, y, train_size=0.7, random_state=1)","bde6baae":"tf_X_train.shape","b0f93ce5":"inputs = tf.keras.Input(shape=(88,))\nhidden = tf.keras.layers.Dense(64, activation='relu')(inputs)\nhidden = tf.keras.layers.Dense(64, activation='relu')(hidden)\noutputs = tf.keras.layers.Dense(1, activation='linear')(hidden)\n\ntf_model = tf.keras.Model(inputs, outputs)\n\n\ntf_model.compile(\n    optimizer='adam',\n    loss='mse'\n)\n\n\nhistory = tf_model.fit(\n    tf_X_train,\n    tf_y_train,\n    validation_split=0.12,\n    batch_size=32,\n    epochs=10\n)","374cf3f1":"tf_rmse = np.sqrt(tf_model.evaluate(tf_X_test, tf_y_test))","4ca9315a":"class Net(nn.Module):\n    \n    def __init__(self):\n        super(Net, self).__init__()\n        self.layer1 = nn.Linear(88, 64)\n        self.layer2 = nn.Linear(64, 64)\n        self.out = nn.Linear(64, 1)\n    \n    def forward(self, x):\n        x = F.relu(self.layer1(x))\n        x = F.relu(self.layer2(x))\n        x = self.out(x)\n        return x\n\nnet = Net()","e7e9fdfd":"for i in range(len(list(net.parameters()))):\n    print(list(net.parameters())[i].shape)","92b3513c":"torch_X_train = torch.tensor(tf_X_train).type(torch.float32)\ntorch_y_train = torch.tensor(np.array(tf_y_train)).type(torch.float32)\n\ntorch_X_test = torch.tensor(tf_X_test).type(torch.float32)\ntorch_y_test = torch.tensor(np.array(tf_y_test)).type(torch.float32)","919c7987":"optimizer = torch.optim.Adam(net.parameters(), lr=0.01)\ncriterion = nn.MSELoss()","2e099f99":"for x, target in zip(torch_X_train, torch_y_train):\n    optimizer.zero_grad()\n    output = net(x)\n    loss = criterion(output, target)\n    loss.backward()\n    optimizer.step()","353b6d96":"total_loss = 0\n\nfor x, target in zip(torch_X_test, torch_y_test):\n    output = net(x)\n    loss = criterion(output, target)\n    total_loss += loss\n    \navg_loss = total_loss \/ len(torch_X_test)","ca196333":"torch_rmse = torch.sqrt(avg_loss).detach().numpy()","08abb09c":"print(\"TensorFlow RMSE:\", tf_rmse)\nprint(\"   PyTorch RMSE:\", torch_rmse)","f4c0853f":"# Task for Today  \n\n***\n\n## House Sale Price Prediction  \n\nGiven *data about house sales*, let's try to predict the **price** of a given house.  \n  \nWe will use both TensorFlow and PyTorch neural networks to make our predictions.","6828f5bf":"# Preprocessing","6bb71cfd":"# Training With TensorFlow","6f04a399":"# Data Every Day  \n\nThis notebook is featured on Data Every Day, a YouTube series where I train models on a new dataset each day.  \n\n***\n\nCheck it out!  \nhttps:\/\/youtu.be\/9K3guNrgy-4","26c2fbe8":"# Results","3f1f8dff":"# Splitting and Scaling","9fe24e08":"# Getting Started","1e2cd72e":"# Training With PyTorch"}}