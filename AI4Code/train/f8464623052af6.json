{"cell_type":{"82f211fd":"code","15363bed":"code","c423e82b":"code","19df81c9":"code","d84ee36f":"code","28086844":"code","bbc6f9f7":"code","78b308ae":"code","fa1c7e58":"code","0bd76b93":"code","f4fd646c":"code","b2bcc886":"code","0a40920b":"code","46db0484":"code","935fd670":"code","ec0ee41d":"code","3ec00a16":"code","f526a668":"code","31a2d9d9":"code","0215b85a":"code","08fbee09":"code","d4b85fa8":"code","354bda66":"code","10133c39":"code","4b874a3b":"code","32730270":"code","671b48bc":"code","56cffe08":"code","640d00bf":"code","917dcfb4":"code","362aba72":"code","0f609f2e":"code","5e2872a1":"code","e2db42b0":"code","5963e27f":"code","66f82404":"code","815135a9":"code","36f6f10e":"code","bc4fbac7":"code","fd0157a9":"code","1a10a380":"code","0653985c":"code","794f905c":"code","fc1caeb3":"code","9ed32c82":"code","970980d3":"code","9364a531":"code","c4615550":"code","d9400721":"code","88bf01fa":"code","1e48e49c":"code","e62408aa":"code","54733764":"code","22344886":"code","4ca7eb42":"markdown","cd8d2e2f":"markdown","239b98ea":"markdown","b605d37b":"markdown","f87b735c":"markdown","022424cf":"markdown","0192a899":"markdown","00e49b1b":"markdown","3e0e8ebc":"markdown","cde92eec":"markdown","4e496fcf":"markdown"},"source":{"82f211fd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport plotly.offline as py\nimport math\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","15363bed":"multi = pd.read_csv('..\/input\/multipleChoiceResponses.csv')\nmulti.shape","c423e82b":"multi_dict = multi.iloc[0,:].to_dict()\nmulti.drop(multi.index[0],inplace=True)","19df81c9":"eda = multi.loc[(multi.Q36_Part_12.isna()==True)&(~multi.Q6.isin(['Student','Not employed']))&(multi.Q7!='I am a student'),:]\neda['Q25_part'] = eda.Q25.fillna('0').str.split('-').str[0]\neda = eda.loc[eda.Q25_part.isin(['2','3','4','5','10','20+ years']),:]\nprint('The resulting dataset has N of rows: '+str(eda.shape[0])+ ' and N of columns: '+str(eda.shape[1]))","d84ee36f":"#labels, that are better at the end of array\npop_lab = ['Other','None','I have never performed this task','I have never found any difficulty in this task','I have not used any cloud providers']\n\ndef other(old_list):\n    new_list = sorted([l for l in old_list if ~np.isin(l,pop_lab)])\n    if np.isin(old_list,'Other').any():\n        new_list.insert(len(new_list),'Other')\n    if np.isin(old_list,'None').any():\n        new_list.insert(len(new_list),'None')\n    if np.isin(old_list,'I have never performed this task').any():\n        new_list.insert(len(new_list),'I have never performed this task')\n    if np.isin(old_list,'I have never found any difficulty in this task').any():\n        new_list.insert(len(new_list),'I have never found any difficulty in this task')\n    if np.isin(old_list,'I have not used any cloud providers').any():\n        new_list.insert(len(new_list),'I have not used any cloud providers')\n    return new_list    \n\ndef multi_count(data, column):\n    temp = data[column].apply(pd.value_counts)\n    arr_flat = [e for sublist in temp.values for e in sublist]\n    temp_new = pd.DataFrame({'names': temp.index,\n                            'values' : [arr for arr in arr_flat if arr > 0 ]})\n    temp_new.names = pd.Categorical(temp_new.names,\n                                categories = other(temp.index),\n                                ordered=False)\n    temp_new = temp_new.sort_values('names')\n    temp_new_fin = temp_new.loc[temp_new.names.isin(pop_lab)==False,:].sort_values('values',ascending=False)\n    temp_new_fin = temp_new_fin.append(temp_new.loc[temp_new.names.isin(pop_lab)==True,:],ignore_index=True)\n    return temp_new_fin\n\ndef get_title(variable_string):\n    full_text = [ v for k,v in multi_dict.items() if variable_string in k].pop(0)\n    question = full_text.split('?')[0]\n    question = question.replace('(Select all that apply)','')\n    question = question.replace('- Selected Choice','')\n    question_full = ''.join([str(question),'?'])\n    if len(question_full)>70:\n        parag_place = math.floor(len(question_full.split(' '))\/2)\n        question_full = ' '.join([' '.join(question_full.split(' ')[:parag_place]),'<br>',' '.join(question_full.split(' ')[parag_place:])]) \n    else:\n        question_full\n    return question_full","28086844":"#plotly library\nfrom plotly import tools\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, iplot\nfrom plotly.offline.offline import _plot_html\nimport plotly.graph_objs as go\nimport cufflinks as cf\ninit_notebook_mode(connected=True)\n\ncolors = ['rgb(43,140,190)','rgb(166,189,219)','rgb(236,231,242)']","bbc6f9f7":"temp = pd.DataFrame(eda.Q1.value_counts())\ndata = [go.Pie(\n    labels=temp.index,\n    values=temp.iloc[:,0],\n    marker =  dict(colors= colors),\n    hoverinfo = 'label+value'\n    )]\nlayout = go.Layout(\n        title = \"Gender\")\n    \nfig = go.Figure(data=data, layout = layout)\n\npy.offline.iplot(fig)","78b308ae":"s = pd.Categorical(eda.Q2,categories=['18-21','22-24','25-29','30-34','35-39','40-44','45-49',\n                                          '50-54','55-59','60-69','70-79','80+'],ordered=False)\ntemp = pd.DataFrame(s.value_counts())\ndata = [go.Bar(\n    x = temp.index,\n    y= temp.iloc[:,0],\n    hoverinfo = 'y'\n)]\nlayout = go.Layout(\n    title = get_title('Q2'),\n    xaxis = dict(\n        title = 'Years'\n    ),\n    yaxis = dict(\n        title = 'Count'\n    )\n)\nfig = go.Figure(data=data, layout = layout)\n\npy.offline.iplot(fig)","fa1c7e58":"temp = pd.DataFrame(eda.Q3.value_counts())\ndata = [ dict(\n    type = 'choropleth',\n    locations = temp.index,\n    locationmode = 'country names',\n    z = temp.iloc[:,0],\n    text = temp.index,\n    colorscale = [[0,\"rgb(4,90,141)\"],[0.4,\"rgb(43,140,190)\"],\\\n                  [0.5,\"rgb(116,169,207)\"],[0.9,\"rgb(189,201,225)\"],[1,\"rgb(241,238,246)\"]],\n    autocolorscale = False,\n    reversescale = True,\n    marker = dict(\n            line = dict (\n                color = 'rgb(180,180,180)',\n                width = 0.5\n            ) ),\n        colorbar = dict(\n            autotick = False,\n            #tickprefix = 'k',\n            title = 'Number of participants'),\n      ) ]\n\nlayout = dict(\n    title = 'Countries',\n    geo = dict(\n        showframe = False,\n        showcoastlines = False,\n        showcountries = True,\n        countriescolor = \"rgb(236,236,236)\",\n        projection = dict(\n            type = 'Mercator'\n        )\n    )\n)\n\nfig = dict( data=data, layout=layout )\npy.offline.iplot(fig, validate=False, filename='d3-world-map' )","0bd76b93":"temp = pd.DataFrame(eda.Q4.value_counts())\ndata = [go.Bar(\n    x = ['Master\u2019s<br> degree',\n         'Bachelor\u2019s<br> degree',\n         'Doctoral<br> degree',\n         'Some<br> college\/university<br> study without earning<br> a bachelor\u2019s degree',\n         'Professional<br> degree',\n         'I prefer<br> not to<br> answer',\n         'No formal<br> education<br> past high school'],\n    y= temp.iloc[:,0].values,\n    hoverinfo = 'y'\n)]\nlayout = go.Layout(\n    title = get_title('Q4'),\n    xaxis = dict(\n        tickangle=0\n    ),\n    yaxis = dict(\n        exponentformat = 'none'\n    )\n    \n)\nfig = go.Figure(data=data, layout = layout)\n\npy.offline.iplot(fig)","f4fd646c":"temp = pd.DataFrame(eda.Q5.value_counts()).sort_values('Q5')\ntemp_fin = temp.loc[temp.index.isin(['Other','I never declared a major']),:]\ntemp_fin = temp_fin.append(temp.loc[~temp.index.isin(['Other','I never declared a major']),:])\n\ndata = [go.Bar(\n    y = ['I never declared a major', 'Other', 'Fine arts or performing arts',\n       'Environmental science or geology',\n       'Humanities',\n       'Social sciences',\n       'Medical or life sciences',\n       'Information technology,<br> networking, or system administration',\n       'Physics or astronomy',\n       'A business discipline',\n       'Mathematics or statistics', 'Engineering',\n       'Computer science'],\n    x= temp_fin.iloc[:,0].values,\n    orientation = 'h',\n    hoverinfo = 'x'\n)]\nlayout = go.Layout(\n    title = get_title('Q5'),\n    margin = dict(l=300),\n    xaxis = dict(\n        exponentformat = 'B',\n        #showticklabels = False,\n    )\n)\nfig = go.Figure(data=data, layout = layout)\n\npy.offline.iplot(fig)","b2bcc886":"print('Crosstab of major and degree')\nround(pd.crosstab(eda.Q4, eda.Q5, normalize = 'columns'),2)","0a40920b":"temp = pd.DataFrame(eda.Q37.value_counts()).head(10)\n\ndata = [go.Bar(\n    x = temp.index,\n    y= temp.iloc[:,0],\n    hoverinfo = 'y'\n)]\nlayout = go.Layout(\n        title = get_title('Q37'))\nfig = go.Figure(data=data, layout = layout)\n\npy.offline.iplot(fig)","46db0484":"#TOP10\nplot_df =  multi_count(eda, [col for col in eda if col.startswith('Q38_Part_')])\nplot_df_fin = plot_df.loc[~plot_df.names.isin(['Other','None\/I do not know']),:].head(10)\nplot_df_fin = plot_df_fin.append(plot_df.loc[plot_df.names.isin(['Other','None\/I do not know']),:])\n\ndata = [go.Bar(\n    x = plot_df_fin.names.tolist(),\n    y= plot_df_fin['values'].tolist(),\n    hoverinfo = 'y'\n)]\nlayout = go.Layout(\n        title = str(get_title('Q38_Part_')+' - TOP 10'))\nfig = go.Figure(data=data, layout = layout)\n\npy.offline.iplot(fig)","935fd670":"#online learning\ns = pd.Categorical(eda.Q39_Part_1,categories = ['Much better',\n                                        'Slightly better',\n                                         'Neither better nor worse',\n                                        'Slightly worse',\n                                         'Much worse',\n                                        'No opinion; I do not know'],ordered=False)\ntemp = pd.DataFrame(s.value_counts())\ntemp_fin = temp.loc[temp.index!='No opinion; I do not know',:]\ntemp_fin = temp_fin.append(temp.loc[temp.index=='No opinion; I do not know',:])\n\ndata = [go.Bar(\n    x = ['Much better', 'Slightly better', 'Neither better<br> nor worse',\n         'Slightly worse', 'Much worse', 'No opinion;<br> I do not know'],\n    y= temp.iloc[:,0],\n    hoverinfo = 'y'\n)]\nlayout = go.Layout(\n        title = 'How do you perceive the quality of <b>online learning platforms<\/b><br>as compared to the quality of the education provided by<br> traditional brick and mortar institutions?')\nfig = go.Figure(data=data, layout = layout)\n\npy.offline.iplot(fig)","ec0ee41d":"#bootcaml\ns = pd.Categorical(eda.Q39_Part_2,categories = ['Much better',\n                                        'Slightly better',\n                                         'Neither better nor worse',\n                                        'Slightly worse',\n                                         'Much worse',\n                                        'No opinion; I do not know'],ordered=False)\ntemp = pd.DataFrame(s.value_counts())\ntemp_fin = temp.loc[temp.index!='No opinion; I do not know',:]\ntemp_fin = temp_fin.append(temp.loc[temp.index=='No opinion; I do not know',:])\n\ndata = [go.Bar(\n    x = ['Much better', 'Slightly better', 'Neither better<br> nor worse',\n         'Slightly worse', 'Much worse', 'No opinion;<br> I do not know'],\n    y= temp_fin.iloc[:,0],\n    hoverinfo = 'y'\n)]\nlayout = go.Layout(\n        title = 'How do you perceive the quality of <b>in-person bootcamps<\/b><br> as compared to the quality of the education provided by<br> traditional brick and mortar institutions?')\nfig = go.Figure(data=data, layout = layout)\n\npy.offline.iplot(fig)","3ec00a16":"temp = pd.DataFrame(eda.Q40.value_counts())\ntemp_fin = temp.loc[temp.index!='No opinion; I do not know',:]\ntemp_fin = temp_fin.append(temp.loc[temp.index=='No opinion; I do not know',:])\n\ndata = [go.Bar(\n    x = ['Independent<br>projects are<br>equally<br>important',\n       'Independent<br>projects are<br>much more<br> important',\n       'Independent<br> projects are<br> slightly more<br> important',\n       'Independent<br> projects are<br> slightly less<br> important',\n       'Independent<br> projects are<br> much less<br> important<br>',\n        'No opinion;<br> I do not know'],\n    y= temp_fin.iloc[:,0],\n    hoverinfo = 'y'\n)]\nlayout = go.Layout(\n        title = get_title('Q40'))\nfig = go.Figure(data=data, layout = layout)\n\npy.offline.iplot(fig)","f526a668":"temp = pd.DataFrame(eda.Q6.value_counts()).sort_values('Q6')\ntemp_fin = temp.loc[temp.index.isin(['Other','Not employed']),:]\ntemp_fin = temp_fin.append(temp.loc[~temp.index.isin(['Other','Not employed']),:])\n\ndata = [go.Bar(\n    y = temp_fin.index,\n    x= temp_fin.iloc[:,0].values,\n    orientation = 'h',\n    hoverinfo = 'x'\n)]\nlayout = go.Layout(\n    title = get_title('Q6'),\n    margin = dict(l=200))\nfig = go.Figure(data=data, layout = layout)\n\npy.offline.iplot(fig)","31a2d9d9":"s = pd.Categorical(eda.Q26,categories = ['Definitely not',\n                                        'Probably not',\n                                         'Maybe',\n                                        'Probably yes',\n                                         'Definitely yes'],ordered=False)\ntemp = pd.DataFrame(s.value_counts())\n\ndata = [go.Bar(\n    x = temp.index,\n    y= temp.iloc[:,0],\n    hoverinfo = 'y'\n)]\nlayout = go.Layout(\n        title = 'Do you consider yourself to be a data scientist?')\nfig = go.Figure(data=data, layout = layout)\n\npy.offline.iplot(fig)","0215b85a":"s = pd.Categorical(eda.Q10,categories = ['We have well established ML methods (i.e., models in production for more than 2 years)',\n                                        'We recently started using ML methods (i.e., models in production for less than 2 years)',\n                                        'We use ML methods for generating insights (but do not put working models into production)',\n                                        'We are exploring ML methods (and may one day put a model into production)',\n                                        'No (we do not use ML methods)','I do not know'],ordered=False)\ntemp = pd.DataFrame(s.value_counts())\ntemp.columns = ['size']\ntemp.sort_values('size', inplace=True)\ntemp_fin = temp.loc[temp.index.isin(['I do not know','No (we do not use ML methods)']),:]\ntemp_fin = temp_fin.append(temp.loc[~temp.index.isin(['I do not know','No (we do not use ML methods)']),:])\n\ndata = [go.Bar(\n    y = ['I do not know', 'No',\n         'We use ML methods<br> for generating insights',\n         'We have well established ML methods',\n         'We recently started using ML methods',\n         'We are exploring ML methods'],\n    x= temp_fin.iloc[:,0],\n    orientation = 'h',\n    hoverinfo = 'x'\n)]\nlayout = go.Layout(\n    title = get_title('Q10'),\n    margin = dict(l=300))\nfig = go.Figure(data=data, layout = layout)\n\npy.offline.iplot(fig)","08fbee09":"print('Crosstab of industry and use of ML methods')\nround(pd.crosstab(eda.Q7, eda.Q10, normalize = 'index'),2)","d4b85fa8":"plot_df = multi_count(eda, [col for col in eda if col.startswith('Q11_Part_')])\nplot_df_fin = plot_df.loc[plot_df.names.isin(['Other','None of these activities are an important part of my role at work']),:]\nplot_df_fin = plot_df_fin.append(plot_df.loc[~plot_df.names.isin(['Other','None of these activities are an important part of my role at work']),:])\n\ndata = [go.Bar(\n    y = ['None of these activities<br> are an important part of my role at work',\n         'Other','Analyze and understand data<br> to influence product or business decisions',\n         'Build prototypes to explore<br> applying machine learning to new areas',\n         'Build and\/or run a machine learning service<br> that operationally improves<br> my product or workflows',\n         'Build and\/or run the data infrastructure<br> that my business uses for<br> storing, analyzing, and operationalizing data',\n         'Do research<br> that advances the state of the art<br> of machine learning'],\n    x= plot_df_fin['values'].tolist(),\n    orientation = 'h',\n    hoverinfo = 'x'\n)]\nlayout = go.Layout(\n    title = get_title('Q11_Part_'),\n    margin = dict(l=300),\n    yaxis = dict(\n        showline = True\n    )\n)\nfig = go.Figure(data=data, layout = layout)\n\npy.offline.iplot(fig)","354bda66":"s = pd.Categorical(eda.Q12_MULTIPLE_CHOICE,categories = ['Business intelligence software (Salesforce, Tableau, Spotfire, etc.)',\n                                        'Basic statistical software (Microsoft Excel, Google Sheets, etc.)',\n                                        'Advanced statistical software (SPSS, SAS, etc.)',\n                                        'Local or hosted development environments (RStudio, JupyterLab, etc.)',\n                                         'Cloud-based data software & APIs (AWS, GCP, Azure, etc.)',\n                                        'Other'],ordered=False)\ntemp = pd.DataFrame(s.value_counts())\ntemp.columns = ['size']\ntemp.sort_values('size', inplace=True)\ntemp_fin = temp.loc[temp.index=='Other',:]\ntemp_fin = temp_fin.append(temp.loc[temp.index!='Other',:])\n\n\ndata = [go.Bar(\n    y = ['Other',\n         'Business intelligence software<br> (Salesforce, Tableau, Spotfire, etc.)',\n         'Cloud-based data software & APIs<br> (AWS, GCP, Azure, etc.)',\n         'Advanced statistical software<br> (SPSS, SAS, etc.)',\n         'Basic statistical software<br> (Microsoft Excel, Google Sheets, etc.)',\n         'Local or hosted development environments<br> (RStudio, JupyterLab, etc.)'],\n    x= temp_fin.iloc[:,0],\n    orientation = 'h',\n    hoverinfo = 'x'\n)]\nlayout = go.Layout(\n    title = get_title('Q12_MULTIPLE_CHOICE'),\n    margin = dict(l=300),\n    xaxis = dict(type=\"category\",\n            categoryorder= 'array',\n             categoryarray= ['Business intelligence software<br> (Salesforce, Tableau, Spotfire, etc.)',\n         'Basic statistical software<br> (Microsoft Excel, Google Sheets, etc.)',\n         'Advanced statistical software<br> (SPSS, SAS, etc.)',\n         'Local or hosted development environments<br> (RStudio, JupyterLab, etc.)',\n         'Cloud-based data software & APIs<br> (AWS, GCP, Azure, etc.)','Other'],\n            tickangle=20))\nfig = go.Figure(data=data, layout = layout)\n\npy.offline.iplot(fig)","10133c39":"plot_df =  multi_count(eda, [col for col in eda if col.startswith('Q13_Part_')])\n\ndata = [go.Bar(\n    x = plot_df.names.tolist(),\n    y= plot_df['values'].tolist(),\n    hoverinfo = 'y'\n)]\nlayout = go.Layout(\n    title = get_title('Q13_Part_'),\n    yaxis = dict(\n        exponentformat = 'none'\n    )\n)\nfig = go.Figure(data=data, layout = layout)\n\npy.offline.iplot(fig)","4b874a3b":"plot_df =  multi_count(eda, [col for col in eda if col.startswith('Q14_Part_')])\n\ndata = [go.Bar(\n    x = plot_df.names.tolist(),\n    y= plot_df['values'].tolist(),\n    hoverinfo = 'y'\n)]\nlayout = go.Layout(\n        title = get_title('Q14_Part_'))\nfig = go.Figure(data=data, layout = layout)\n\npy.offline.iplot(fig)","32730270":"plot_df =  multi_count(eda, [col for col in eda if col.startswith('Q15_Part_')])\n\ndata = [go.Bar(\n    x = ['AWS',\n         'GCP',\n         'Microsoft Azure',\n         'IBM Cloud',\n         'Alibaba Cloud',\n         'Other','I have not used<br> any cloud providers',],\n    y= plot_df['values'].tolist(),\n    hoverinfo = 'y'\n)]\nlayout = go.Layout(\n        title = get_title('Q15_Part_'))\nfig = go.Figure(data=data, layout = layout)\n\npy.offline.iplot(fig)","671b48bc":"plot_df =  multi_count(eda, [col for col in eda if col.startswith('Q16_Part_')])\n\ndata = [go.Bar(\n    x = plot_df.names.tolist(),\n    y= plot_df['values'].tolist(),\n    hoverinfo = 'y'\n)]\nlayout = go.Layout(\n        title = get_title('Q16_Part_'))\nfig = go.Figure(data=data, layout = layout)\n\npy.offline.iplot(fig)","56cffe08":"temp = pd.DataFrame(eda.Q17.value_counts())\ntemp.columns = ['counts']\ntemp_fin = temp.loc[temp.index!='Other',:]\ntemp_fin = temp_fin.append(temp.loc[temp.index=='Other',:])\n\ndata = [go.Bar(\n    x = temp_fin.index,\n    y= temp_fin.counts.values,\n    hoverinfo = 'y'\n)]\nlayout = go.Layout(\n        title = get_title('Q17'))\nfig = go.Figure(data=data, layout = layout)\n\npy.offline.iplot(fig)","640d00bf":"#TOP5\nplot_df =  multi_count(eda, [col for col in eda if col.startswith('Q28_Part_')])\nplot_df_fin = plot_df.loc[~plot_df.names.isin(['Other','None']),:].head(5)\nplot_df_fin = plot_df_fin.append(plot_df.loc[plot_df.names.isin(['Other','None']),:])\n\ndata = [go.Bar(\n    x = ['SAS',\n 'Cloudera',\n 'RapidMiner',\n 'Azure ML Studio',\n 'Google Cloud<br>ML Engine',\n 'Other',\n 'None'],\n    y= plot_df_fin['values'].tolist(),\n    hoverinfo = 'y'\n)]\nlayout = go.Layout(\n        title = str(get_title('Q28_Part_')+' - TOP 5'))\nfig = go.Figure(data=data, layout = layout)\n\npy.offline.iplot(fig)","917dcfb4":"#TOP5\nplot_df =  multi_count(eda, [col for col in eda if col.startswith('Q29_Part_')])\nplot_df_fin = plot_df.loc[~plot_df.names.isin(['Other','None']),:].head(5)\nplot_df_fin = plot_df_fin.append(plot_df.loc[plot_df.names.isin(['Other','None']),:])\n\ndata = [go.Bar(\n    x = plot_df_fin.names.tolist(),\n    y= plot_df_fin['values'].tolist(),\n    hoverinfo = 'y'\n)]\nlayout = go.Layout(\n        title = str(get_title('Q29_Part_')+' - TOP 5'))\nfig = go.Figure(data=data, layout = layout)\n\npy.offline.iplot(fig)","362aba72":"languages = ['Python','R','SQL','Java']\nplot_df = pd.DataFrame(eda.loc[eda.Q17.isin(languages),['Q17','Q18']].groupby(['Q17','Q18']).size())\nplot_df.columns = ['size']\ng = plot_df['size'].groupby(level=0, group_keys=False)\nplot_df_fin = g.apply(lambda x: x.sort_values(ascending=False).head(3))","0f609f2e":"fig = {\n    'data': [\n        {\n            'labels': plot_df_fin.loc[plot_df_fin.index.get_level_values('Q17')=='Python',:].index.get_level_values('Q18'),\n            'values': plot_df_fin.loc[plot_df_fin.index.get_level_values('Q17')=='Python',:].values,\n            'type': 'pie',\n            'name': 'Python',\n            'domain': {'x': [0, .48],\n                       'y': [.51, 0.92]},\n            'hoverinfo':'percent',\n            'textinfo':'label',\n            'marker': {'colors': colors}\n        },\n        {\n            'labels': plot_df_fin.loc[plot_df_fin.index.get_level_values('Q17')=='R',:].index.get_level_values('Q18'),\n            'values': plot_df_fin.loc[plot_df_fin.index.get_level_values('Q17')=='R',:].values,\n            'type': 'pie',\n            'name': 'R',\n            'domain': {'x': [.48, 1],\n                       'y': [.51, 0.92]},\n            'hoverinfo':'percent',\n            'textinfo':'label',\n            'marker': {'colors': colors}\n\n        },\n        {\n            'labels': plot_df_fin.loc[plot_df_fin.index.get_level_values('Q17')=='SQL',:].index.get_level_values('Q18'),\n            'values': plot_df_fin.loc[plot_df_fin.index.get_level_values('Q17')=='SQL',:].values,\n            'type': 'pie',\n            'name': 'SQL',\n            'domain': {'x': [0, .47],\n                       'y': [0, 0.42]},\n            'hoverinfo':'percent',\n            'textinfo':'label',\n            'marker': {'colors': colors}\n        },\n        {\n            'labels': plot_df_fin.loc[plot_df_fin.index.get_level_values('Q17')=='Java',:].index.get_level_values('Q18'),\n            'values': plot_df_fin.loc[plot_df_fin.index.get_level_values('Q17')=='Java',:].values,\n            'type': 'pie',\n            'name':'Java',\n            'domain': {'x': [.47, 1],\n                       'y': [0, .42]},\n            'hoverinfo':'percent',\n            'textinfo':'label',\n            'marker': {'colors': colors}\n        }\n    ],\n    'layout': {'title': 'What programming language would you recommend an aspiring data scientist to learn first? <br> If you programme mainly...',\n               'showlegend': False,\n               \"annotations\": [\n                   {\n                       \"font\": {\n                           \"size\": 16\n                       },\n                       'align':'center',\n                       \"showarrow\": False,\n                       \"text\": \"in Python\",\n                       \"x\": 0.2,\n                       \"y\": 1\n                   },\n                   {\n                       \"font\": {\n                           \"size\": 16\n                       },\n                       'align':'center',\n                       \"showarrow\": False,\n                       \"text\": \"in R\",\n                       \"x\": 0.77,\n                       \"y\": 1\n                   },\n                   {\n                       \"font\": {\n                           \"size\": 16\n                       },\n                       'align':'center',\n                       \"showarrow\": False,\n                       \"text\": \"in SQL\",\n                       \"x\": 0.2,\n                       \"y\": 0.46\n                   },\n                   {\n                       \"font\": {\n                           \"size\": 16\n                       },\n                       'align':'center',\n                       \"showarrow\": False,\n                       \"text\": \"in Java\",\n                       \"x\": 0.77,\n                       \"y\": 0.46\n                   }\n               ]\n              }\n}\n\npy.offline.iplot(fig)","5e2872a1":"#TOP5\ntemp = pd.DataFrame(eda.Q20.value_counts())\ntemp.columns = ['counts']\ntemp_fin = temp.loc[temp.index!='Other',:].head(5)\ntemp_fin = temp_fin.append(temp.loc[temp.index=='Other',:])\n\ndata = [go.Bar(\n    x = temp_fin.index,\n    y= temp_fin.iloc[:,0],\n    hoverinfo = 'y'\n)]\nlayout = go.Layout(\n        title = str(get_title('Q20')+' - TOP 5'))\nfig = go.Figure(data=data, layout = layout)\n\npy.offline.iplot(fig)","e2db42b0":"languages = ['Python','R','SQL','Java']\nplot_df = pd.DataFrame(eda.loc[eda.Q17.isin(languages),['Q17','Q20']].groupby(['Q17','Q20']).size())\nplot_df.columns = ['size']\ng = plot_df['size'].groupby(level=0, group_keys=False)\nplot_df_fin = g.apply(lambda x: x.sort_values(ascending=False).head(3))","5963e27f":"colors = ['rgb(43,140,190)','rgb(166,189,219)','rgb(236,231,242)']\n\nfig = {\n    'data': [\n        {\n            'labels': plot_df_fin.loc[plot_df_fin.index.get_level_values('Q17')=='Python',:].index.get_level_values('Q20'),\n            'values': plot_df_fin.loc[plot_df_fin.index.get_level_values('Q17')=='Python',:].values,\n            'type': 'pie',\n            'name': 'Python',\n            'domain': {'x': [0, .48],\n                       'y': [.51, 0.92]},\n            'hoverinfo':'percent',\n            'textinfo':'label',\n            'marker': {'colors': colors}\n        },\n        {\n            'labels': plot_df_fin.loc[plot_df_fin.index.get_level_values('Q17')=='R',:].index.get_level_values('Q20'),\n            'values': plot_df_fin.loc[plot_df_fin.index.get_level_values('Q17')=='R',:].values,\n            'type': 'pie',\n            'name': 'R',\n            'domain': {'x': [.48, 1],\n                       'y': [.51, 0.92]},\n            'hoverinfo':'percent',\n            'textinfo':'label',\n            'marker': {'colors': colors}\n\n        },\n        {\n            'labels': plot_df_fin.loc[plot_df_fin.index.get_level_values('Q17')=='SQL',:].index.get_level_values('Q20'),\n            'values': plot_df_fin.loc[plot_df_fin.index.get_level_values('Q17')=='SQL',:].values,\n            'type': 'pie',\n            'name': 'SQL',\n            'domain': {'x': [0, .47],\n                       'y': [0, 0.42]},\n            'hoverinfo':'percent',\n            'textinfo':'label',\n            'marker': {'colors': colors}\n        },\n        {\n            'labels': plot_df_fin.loc[plot_df_fin.index.get_level_values('Q17')=='Java',:].index.get_level_values('Q20'),\n            'values': plot_df_fin.loc[plot_df_fin.index.get_level_values('Q17')=='Java',:].values,\n            'type': 'pie',\n            'name':'Java',\n            'domain': {'x': [.47, 1],\n                       'y': [0, .42]},\n            'hoverinfo':'percent',\n            'textinfo':'label',\n            'marker': {'colors': colors}\n        }\n    ],\n    'layout': {'title': 'Which ML library have you used the most? <br> If you programme mainly...',\n               'showlegend': False,\n               \"annotations\": [\n                   {\n                       \"font\": {\n                           \"size\": 16\n                       },\n                       'align':'center',\n                       \"showarrow\": False,\n                       \"text\": \"in Python\",\n                       \"x\": 0.2,\n                       \"y\": 1\n                   },\n                   {\n                       \"font\": {\n                           \"size\": 16\n                       },\n                       'align':'center',\n                       \"showarrow\": False,\n                       \"text\": \"in R\",\n                       \"x\": 0.77,\n                       \"y\": 1\n                   },\n                   {\n                       \"font\": {\n                           \"size\": 16\n                       },\n                       'align':'center',\n                       \"showarrow\": False,\n                       \"text\": \"in SQL\",\n                       \"x\": 0.2,\n                       \"y\": 0.46\n                   },\n                   {\n                       \"font\": {\n                           \"size\": 16\n                       },\n                       'align':'center',\n                       \"showarrow\": False,\n                       \"text\": \"in Java\",\n                       \"x\": 0.77,\n                       \"y\": 0.46\n                   }\n               ]\n              }\n}\n\npy.offline.iplot(fig)","66f82404":"temp = pd.DataFrame(eda.Q22.value_counts())\ntemp.columns = ['counts']\ntemp_fin = temp.loc[temp.index!='Other',:].head(5)\ntemp_fin = temp_fin.append(temp.loc[temp.index=='Other',:])\n\ndata = [go.Bar(\n    x = temp_fin.index,\n    y= temp_fin.iloc[:,0],\n    hoverinfo = 'y'\n)]\nlayout = go.Layout(\n        title = str(get_title('Q22')+' - TOP 5'))\nfig = go.Figure(data=data, layout = layout)\n\npy.offline.iplot(fig)","815135a9":"cross_temp  = pd.crosstab(eda.Q22, eda.Q32, normalize = 'columns')\nprint('Crosstab of type of data and visualization library the mostly used')\nround(cross_temp.loc[cross_temp.index.isin(['Matplotlib','ggplot2','Seaborn','Plotly','Shiny']),:],2)","36f6f10e":"s = pd.Categorical(eda.Q23,categories = ['0% of my time',\n                                        '1% to 25% of my time',\n                                        '25% to 49% of my time',\n                                        '50% to 74% of my time',\n                                         '75% to 99% of my time',\n                                        '100% of my time'],ordered=False)\ntemp = pd.DataFrame(s.value_counts())\n\ndata = [go.Bar(\n    x = ['0%<br> of my time',\n         '1% to 25%<br> of my time',\n         '25% to 49%<br> of my time',\n         '50% to 74%<br> of my time',\n         '75% to 99%<br> of my time',\n         '100%<br> of my time'],\n    y= temp.iloc[:,0],\n    hoverinfo = 'y'\n)]\nlayout = go.Layout(\n        title = get_title('Q23'))\nfig = go.Figure(data=data, layout = layout)\n\npy.offline.iplot(fig)","bc4fbac7":"#TOP5\nplot_df =  multi_count(eda, [col for col in eda if col.startswith('Q27_Part_')])\nplot_df_fin = plot_df.loc[~plot_df.names.isin(['Other','None']),:].head(5)\nplot_df_fin = plot_df_fin.append(plot_df.loc[plot_df.names.isin(['Other','None']),:])\n\ndata = [go.Bar(\n    x = ['AWS<br> EC2',\n 'Google<br> Compute Engine',\n 'AWS Lambda',\n 'Azure Virtual Machines',\n 'Google App Engine',\n 'Other',\n 'None'],\n    y= plot_df_fin['values'].tolist(),\n    hoverinfo = 'y'\n)]\nlayout = go.Layout(\n        title = str(get_title('Q27_Part_')+' - TOP 5'))\nfig = go.Figure(data=data, layout = layout)\n\npy.offline.iplot(fig)","fd0157a9":"#TOP5\nplot_df =  multi_count(eda, [col for col in eda if col.startswith('Q30_Part_')])\nplot_df_fin = plot_df.loc[~plot_df.names.isin(['Other','None']),:].head(5)\nplot_df_fin = plot_df_fin.append(plot_df.loc[plot_df.names.isin(['Other','None']),:])\n\ndata = [go.Bar(\n    x = plot_df_fin.names.tolist(),\n    y= plot_df_fin['values'].tolist(),\n    hoverinfo = 'y'\n)]\nlayout = go.Layout(\n        title = str(get_title('Q30_Part_')+' - TOP 5'))\nfig = go.Figure(data=data, layout = layout)\n\npy.offline.iplot(fig)","1a10a380":"plot_df =  multi_count(eda, [col for col in eda if col.startswith('Q31_Part_')])\n\ndata = [go.Bar(\n    x = plot_df.names.tolist(),\n    y= plot_df['values'].tolist()\n)]\nlayout = go.Layout(\n        title = get_title('Q31_Part_'))\nfig = go.Figure(data=data, layout = layout)\n\npy.offline.iplot(fig)","0653985c":"temp = pd.DataFrame(eda.Q32.value_counts())\n\ndata = [go.Bar(\n    x = temp.index,\n    y= temp.iloc[:,0],\n    hoverinfo = 'y'\n)]\nlayout = go.Layout(\n        title = get_title('Q32'))\nfig = go.Figure(data=data, layout = layout)\n\npy.offline.iplot(fig)","794f905c":"eda.loc[:,[col for col in eda if col.startswith('Q34_Part_')]] = eda.loc[:,[col for col in eda if col.startswith('Q34_Part_')]].astype(float)\ntemp = eda.loc[:,[col for col in eda if col.startswith('Q34_Part_')]].dropna(axis=0)\n\ntrace0 = go.Box(\n    x = np.array(temp.Q34_Part_1),\n    name='Gathering data',\n    hoverinfo = 'x',\n    boxmean = True,\n    marker = dict(color = 'rgb(241,238,246)')\n)\ntrace1 = go.Box(\n    x = np.array(temp.Q34_Part_2),\n    name = 'Cleaning data',\n    hoverinfo = 'x',\n    boxmean = True,\n    marker = dict(color = 'rgb(208,209,230)')\n)\ntrace2 = go.Box(\n    x = np.array(temp.Q34_Part_3),\n    name = 'Visualizing data',\n    hoverinfo = 'x',\n    boxmean = True,\n    marker = dict(color = 'rgb(166,189,219)')\n)\ntrace3 = go.Box(\n    x = np.array(temp.Q34_Part_4),\n    name = 'Model building\/model selection',\n    hoverinfo = 'x',\n    boxmean = True,\n    marker = dict(color = 'rgb(116,169,207)')\n)\ntrace4 = go.Box(\n    x = np.array(temp.Q34_Part_5),\n    name = 'Putting the model into production',\n    hoverinfo = 'x',\n    boxmean = True,\n    marker = dict(color = 'rgb(43,140,190)')\n)\ntrace5 = go.Box(\n    x = np.array(temp.Q34_Part_6),\n    name = 'Finding insights in the data<br> and communicating with stakeholders',\n    hoverinfo = 'x',\n    boxmean = True,\n    marker = dict(color = 'rgb(4,90,141)')\n)\ndata = [trace0, trace1,trace2,trace3,trace4,trace5]\n\nlayout = go.Layout(\n    title = get_title('Q34_Part_'),\n    yaxis = dict(\n        showticklabels = False\n    ),\n    legend = dict(traceorder = 'reversed')\n\n)\n\nfig = go.Figure(data=data, layout = layout)\n\npy.offline.iplot(fig)","fc1caeb3":"eda.loc[:,[col for col in eda if col.startswith('Q35_Part_')]] = eda.loc[:,[col for col in eda if col.startswith('Q35_Part_')]].astype(float)\ntemp = eda.loc[:,[col for col in eda if col.startswith('Q35_Part_')]].dropna(axis=0)\n\ntrace0 = go.Box(\n    x = np.array(temp.Q35_Part_1),\n    name='Gathering data',\n    hoverinfo = 'x',\n    boxmean = True,\n    marker = dict(color = 'rgb(241,238,246)')\n)\ntrace1 = go.Box(\n    x = np.array(temp.Q35_Part_2),\n    name = 'Cleaning data',\n    hoverinfo = 'x',\n    boxmean = True,\n    marker = dict(color = 'rgb(208,209,230)')\n)\ntrace2 = go.Box(\n    x = np.array(temp.Q35_Part_3),\n    name = 'Visualizing data',\n    hoverinfo = 'x',\n    boxmean = True,\n    marker = dict(color = 'rgb(166,189,219)')\n)\ntrace3 = go.Box(\n    x = np.array(temp.Q35_Part_4),\n    name = 'Model building\/model selection',\n    hoverinfo = 'x',\n    boxmean = True,\n    marker = dict(color = 'rgb(116,169,207)')\n)\ntrace4 = go.Box(\n    x = np.array(temp.Q35_Part_5),\n    name = 'Putting the model into production',\n    hoverinfo = 'x',\n    boxmean = True,\n    marker = dict(color = 'rgb(43,140,190)')\n)\ntrace5 = go.Box(\n    x = np.array(temp.Q35_Part_6),\n    name = 'Finding insights in the data<br> and communicating with stakeholders',\n    hoverinfo = 'x',\n    boxmean = True,\n    marker = dict(color = 'rgb(4,90,141)')\n)\ndata = [trace0, trace1,trace2,trace3,trace4,trace5]\n\nlayout = go.Layout(\n    title = get_title('Q35_Part_'),\n    yaxis = dict(\n        showticklabels = False\n    ),\n    legend = dict(traceorder = 'reversed')\n\n)\n\nfig = go.Figure(data=data, layout = layout)\n\npy.offline.iplot(fig)","9ed32c82":"top_labels = ['Very important','Slightly important',\n             'Not at all important','No opinion; I do not know']\n\neda['Q41_Part_1_new'] = pd.Categorical(eda.Q41_Part_1,categories = top_labels,ordered=False)\neda['Q41_Part_2_new'] = pd.Categorical(eda.Q41_Part_2,categories = top_labels,ordered=False)\neda['Q41_Part_3_new'] = pd.Categorical(eda.Q41_Part_3,categories = top_labels,ordered=False)\n\ncolors = ['rgb(5,112,176)','rgb(116,169,207)',\n         'rgb(189,201,225)','rgb(241,238,246)']\n\nx0 = eda.Q41_Part_1_new.value_counts().values\/sum(eda.Q41_Part_1_new.value_counts().values)*100\nx1 = eda.Q41_Part_2_new.value_counts().values\/sum(eda.Q41_Part_2_new.value_counts().values)*100\nx2 = eda.Q41_Part_3_new.value_counts().values\/sum(eda.Q41_Part_3_new.value_counts().values)*100\n\nx_data = [np.round(x0,0),\n          np.round(x1,0),\n          np.round(x2,0)]\n\ny_data = ['Fairness and bias<br> in ML algorithms',\n          'Being able to explain ML model<br> outputs and\/or predictions',\n          'Reproducibility<br> in data science']\n\n\ntraces = []\n\nfor i in range(0, len(x_data[0])):\n    for xd, yd in zip(x_data, y_data):\n        traces.append(go.Bar(\n            x=[xd[i]],\n            y=[yd],\n            orientation='h',\n            marker=dict(\n                color=colors[i],\n                line=dict(\n                        color='rgb(248, 248, 249)',\n                        width=1)\n            ),\n            name = top_labels[i],\n        hoverinfo = 'name'\n        ))\n\nlayout = go.Layout(\n    title = get_title('Q41_Part_1'),\n    xaxis=dict(\n        showgrid=False,\n        showline=False,\n        showticklabels=False,\n        zeroline=False,\n        domain=[0.15, 1]\n    ),\n    yaxis=dict(\n        showgrid=False,\n        zeroline=False,\n        showline=False,\n        ticks='',\n        showticklabels=False\n    ),\n    barmode='stack',\n    #paper_bgcolor='rgb(248, 248, 255)',\n    #plot_bgcolor='rgb(248, 248, 255)',\n    #margin=dict(\n    #    l=120,r=0\n    #),\n    showlegend=False\n)\n\nannotations = []\n\nfor yd, xd in zip(y_data, x_data):\n    # labeling the y-axis\n    annotations.append(dict(xref='paper', yref='y',\n                            x=0.14, y=yd,\n                            xanchor='right',\n                            text=str(yd),\n                            font=dict(family='Arial', size=12,\n                                      color='rgb(67, 67, 67)'),\n                            showarrow=False, align='right'))\n    # labeling the first percentage of each bar (x_axis)\n    annotations.append(dict(xref='x', yref='y',\n                            x=xd[0] \/ 2, y=yd,\n                            text=str(xd[0]) + '%',\n                            font=dict(family='Arial', size=14,\n                                      color='rgb(248, 248, 255)'),\n                            showarrow=False))\n    # labeling the first Likert scale (on the top)\n    #if yd == y_data[-1]:\n        #annotations.append(dict(xref='x', yref='paper',\n                                #x=xd[0] \/ 3, y=1.1,\n                                #text=top_labels[0],\n                                #font=dict(family='Arial', size=12,\n                                #          color='rgb(67, 67, 67)'),\n                                #showarrow=False))\n    space = xd[0]\n    for i in range(1, len(xd)):\n            # labeling the rest of percentages for each bar (x_axis)\n            annotations.append(dict(xref='x', yref='y',\n                                    x=space + (xd[i]\/2), y=yd, \n                                    text=str(xd[i]) + '%',\n                                    font=dict(family='Arial', size=14,\n                                              color='rgb(248, 248, 255)'),\n                                    showarrow=False))\n            # labeling the Likert scale\n            #if yd == y_data[-1]:\n                #annotations.append(dict(xref='x', yref='paper',\n                                        #x=space + (xd[i]\/3), y=1.1,\n                                        #text=top_labels[i],\n                                        #font=dict(family='Arial', size=12,\n                                        #          color='rgb(67, 67, 67)'),\n                                        #showarrow=False))\n            space += xd[i]\n\nlayout['annotations'] = annotations\n\nfig = go.Figure(data=traces, layout=layout)\npy.offline.iplot(fig)","970980d3":"plot_df =  multi_count(eda, [col for col in eda if col.startswith('Q42_Part_')])\nplot_df_fin =  plot_df.loc[~plot_df.names.isin(['Other','Not applicable (I am not involved with an organization that builds ML models)']),:]\nplot_df_fin =  plot_df_fin.append(plot_df.loc[plot_df.names.isin(['Other','Not applicable (I am not involved with an organization that builds ML models)']),:])\n\ndata = [go.Bar(\n    x = ['Metrics<br> that consider accuracy',\n         'Revenue and\/or<br> business goals',\n         'Metrics<br> that consider unfair bias',\n         'Not applicable',\n         'Other'],\n    y= plot_df['values'].tolist(),\n    hoverinfo = 'y'\n)]\nlayout = go.Layout(\n        title = get_title('Q42_Part_'))\nfig = go.Figure(data=data, layout = layout)\n\npy.offline.iplot(fig)","9364a531":"s = pd.Categorical(eda.Q43,categories = ['0','0-10','10-20',\n                                        '20-30','30-40','40-50',\n                                         '50-60','60-70','70-80',\n                                        '80-90','90-100'],ordered=False)\ntemp = pd.DataFrame(s.value_counts())\n\ndata = [go.Bar(\n    x = temp.index,\n    y= temp.iloc[:,0],\n    hoverinfo = 'y'\n)]\nlayout = go.Layout(\n    title = get_title('Q43'),\n    yaxis = dict(\n        range = (0,2000)\n    )\n)\nfig = go.Figure(data=data, layout = layout)\n\npy.offline.iplot(fig)","c4615550":"plot_df =  multi_count(eda, [col for col in eda if col.startswith('Q44_Part_')]).sort_values('values')\nplot_df_fin = plot_df.loc[plot_df.names.isin(['I have never performed this task','I have never found any difficulty in this task']),:]\nplot_df_fin = plot_df_fin.append(plot_df.loc[~plot_df.names.isin(['I have never performed this task','I have never found any difficulty in this task']),:])\n\ndata = [go.Bar(\n    y = ['Difficulty in collecting<br> enough data about groups<br> that may be unfairly targeted',\n         'Difficulty in<br> identifying and selecting<br> the appropriate evaluation metrics',\n         'Difficulty in<br> identifying groups<br> that are unfairly targeted'\n         'Lack of communication<br> between individuals who collect the data<br> and individuals who analyze the data'\n         'I have never performed this task',\n         'I have never found any difficulty in this task'\n    ],\n    x= plot_df_fin['values'].tolist(),\n    orientation = 'h',\n    hoverinfo = 'x'\n)]\nlayout = go.Layout(\n    title = get_title('Q44_Part_'),\n    xaxis = dict(\n        showticklabels = False\n    ),\n    margin = dict(l=300)\n)\nfig = go.Figure(data=data, layout = layout)\n\npy.offline.iplot(fig)","d9400721":"plot_df =  multi_count(eda, [col for col in eda if col.startswith('Q45_Part_')]).sort_values('values')\nplot_df_fin = plot_df.loc[plot_df.names.isin(['I have never performed this task','I have never found any difficulty in this task']),:]\nplot_df_fin = plot_df_fin.append(plot_df.loc[~plot_df.names.isin(['I have never performed this task','I have never found any difficulty in this task']),:])\n\ndata = [go.Bar(\n    y = ['When building<br> a model that was specifically designed<br> to produce such insights',\n         'When determining<br> whether it is worth<br> it to put the model into production',\n         'When first exploring<br> a new ML model or dataset',\n         'For all models<br> right before putting the model<br> in production',\n         'Only for<br> very important models<br> that are already in production',\n         'I do not<br> explore and interpret<br> model insights and predictions'],\n    x= plot_df_fin['values'].tolist(),\n    orientation = 'h',\n    hoverinfo = 'x'\n)]\nlayout = go.Layout(\n    title = get_title('Q45_Part_'),\n    xaxis = dict(\n        showticklabels = False\n    ),\n    margin = dict(l=300)\n)\nfig = go.Figure(data=data, layout = layout)\n\npy.offline.iplot(fig)","88bf01fa":"s = pd.Categorical(eda.Q46,categories = ['0','0-10','10-20',\n                                        '20-30','30-40','40-50',\n                                         '50-60','60-70','70-80',\n                                        '80-90','90-100'],ordered=False)\ntemp = pd.DataFrame(s.value_counts())\n\ndata = [go.Bar(\n    x = temp.index,\n    y= temp.iloc[:,0],\n    hoverinfo = 'y'\n)]\n\nlayout = go.Layout(\n    title = get_title('Q46')\n)\nfig = go.Figure(data=data, layout = layout)\n\npy.offline.iplot(fig)","1e48e49c":"col_names = [col for col in eda if col.startswith('Q47_Part_')]\ncol_names = [col for col in col_names if col!='Q47_Part_16']\nplot_df =  multi_count(eda, col_names).sort_values('values')\nplot_df_fin = plot_df.loc[plot_df.names.isin(['Other','None\/I do not use these model explanation techniques']),:]\nplot_df_fin = plot_df_fin.append(plot_df.loc[~plot_df.names.isin(['Other','None\/I do not use these model explanation techniques']),:])\n\n\n\ndata = [go.Bar(\n    y = plot_df_fin.names.tolist(),\n    x= plot_df_fin['values'].tolist(),\n    orientation = 'h',\n    hoverinfo = 'x'\n)]\nlayout = go.Layout(\n    title = get_title('Q47_Part_'),\n    xaxis = dict(\n        showticklabels = False\n    ),\n    margin = dict(l=300)\n)\nfig = go.Figure(data=data, layout = layout)\n\npy.offline.iplot(fig)","e62408aa":"temp = pd.DataFrame(eda.Q48.value_counts())\ntemp.columns = ['count']\ntemp.sort_values('count', inplace=True)\ntemp_fin = temp.loc[temp.index=='I do not know; I have no opinion on the matter',:]\ntemp_fin = temp_fin.append(temp.loc[temp.index!='I do not know; I have no opinion on the matter',:])\n\ndata = [go.Bar(\n    y = ['I do not know;<br> I have no opinion on the matter',\n       'Yes,<br> most ML models are \"black boxes\"',\n       'I am confident<br> that I can explain the outputs<br> of most if not all ML models',\n       'I view ML models as \"black boxes\"<br> but I am confident that<br> experts are able to explain model outputs',\n       'I am confident<br> that I can understand and explain<br> the outputs of many<br> but not all ML models'],\n    x= temp_fin['count'].tolist(),\n    hoverinfo = 'x',\n    orientation = 'h'\n)]\n\nlayout = go.Layout(\n    title = get_title('Q48'),\n    margin = dict(l=300)\n)\nfig = go.Figure(data=data, layout = layout)\n\npy.offline.iplot(fig)","54733764":"plot_df =  multi_count(eda, [col for col in eda if col.startswith('Q49_Part_')]).sort_values('values')\nplot_df_fin = plot_df.loc[plot_df.names.isin(['Other','None\/I do not make my work easy for others to reproduce']),:]\nplot_df_fin = plot_df_fin.append(plot_df.loc[~plot_df.names.isin(['Other','None\/I do not make my work easy for others to reproduce']),:])\n\n\ndata = [go.Bar(\n    y = ['Other',\n         'None',\n         'Share code, data, and environment<br> using virtual machines',\n         'Share data, code, and environment<br> using a hosted service',\n         'Share data, code, and environment<br> using containers',\n         'Define relative rather<br> than absolute file paths',\n         'Share both data and code on Github<br> or a similar code-sharing repository',\n         'Include a text file describing all dependencies',\n         'Define all random seeds',\n         'Share code on Github<br> or a similar code-sharing repository',\n         'Make sure the code is human-readable',\n         'Make sure the code is well documented'],\n    x= plot_df_fin['values'].tolist(),\n    hoverinfo = 'x',\n    orientation = 'h'\n)]\nlayout = go.Layout(\n    title = get_title('Q49_Part_'),\n    margin = dict(l=300)\n)\nfig = go.Figure(data=data, layout = layout)\n\npy.offline.iplot(fig)","22344886":"plot_df =  multi_count(eda, [col for col in eda if col.startswith('Q50_Part_')]).sort_values('values')\nplot_df_fin = plot_df.loc[plot_df.names=='Other',:]\nplot_df_fin = plot_df_fin.append(plot_df.loc[plot_df.names!='Other',:])\n\n\ndata = [go.Bar(\n    y = ['Other',\n          'I had never considered<br> making my work easier for others to reproduce',\n          'Too expensive',\n          'Afraid that others will use my work<br> without giving proper credit',\n          'Requires too much technical knowledge',\n          'None of these reasons apply to me',\n          'Not enough incentives to share my work',\n          'Too time-consuming'],\n    x= plot_df_fin['values'].tolist(),\n    hoverinfo = 'x',\n    orientation = 'h'\n)]\nlayout = go.Layout(\n    title = get_title('Q50_Part_'),\n    margin = dict(l=300)\n)\nfig = go.Figure(data=data, layout = layout)\n\npy.offline.iplot(fig)","4ca7eb42":"For starters,  we will need to write the functions to:\n* hold multiple questions\n* extract questions' titles  from the created dictionary\n* put labels like 'Others',  'None',  'I don't know' etc. at the end of the graphs","cd8d2e2f":"# What do they have to share?\nThey are programming mainly in Python, Java or SQL recommended the newcomers to learn Python, even within the group of R coders 41% suggests to learn Python first. <br>\nPython and Java coders use mainly the same libraries (scikit-learn, keras and tensorflow), R coders not only caret, but also xgboost and scikit-learn.<br>\nMatplotlib is beating other libraries as a most popular one, but within genetic data, ggplot2 is their choice. On the other hand, Shiny and Plotly are not used at all in working with audio and genetic data.<br>\nWhile interacting mostly with numerical, categorical and text data,  the tabular and numerical data are the most common.<br>\n<br>\nDuring the normal working day cleaning data and modeling are most time-consuming tasks. Gathering and visualizing data, on the other hand, is the least one. If we compare it to training preparation distribution for all those categories, mostly they are concentrated on visualization and not on gathering insights.","239b98ea":"## Courses\nThey learn mostly from the Coursera and read from Medium blog posts and Kaggle forums.<br>\nDo they find online education better? Not necessarily, the two most popular answers are: 'Neither better nor worse' and 'Slightly better'. <br>\nIf we ask them about bootcamps, they don't have enough experience., but for them, independent projects are equally important as academic achievements.","b605d37b":"...and create a dataset to explore.","f87b735c":"# What concerns do they have?\nAlthough the majority considers such topics as reproducibility, ableness to explain ML method and accountability of bias in ML very important, only between 0 and 10% of the work time is devoted to exploring unfair bias. Mot of the time they don't deal with that type of problems.<br>\nMainly they don't explore model insights,  but if they do, they do it for all the models or only very important ones.<br>\nTo reproduce the work, good documentation and readiness are used, in spite of the fact that this process is time-consuming.\n","022424cf":"Let's create a dictionary to hold all the questions.","0192a899":"# Online learners: who are they?\nThey are mainly males, aged between 25 and 39 y.o., residing currently mostly in the US.<br>\nMajority of them holds a degree,  although in most majors Master degree is dominated, in medical, life sciences  and physics or astronomy it is a Doctoral degree.<br>\n","00e49b1b":"# Main conclusions:\n* Majority of them holds a degree, although in most majors Master degree is dominated, in medical, life sciences and physics or astronomy it is a Doctoral degree.\n* They learn mostly from the Coursera and read from Medium blog posts and Kaggle forums. Do they find online education better? Not necessarily.\n* For them, independent project are equally important as academic achievements.\n* They work as Data Scientists and do consider themselves as ones.\n* Most of them at work exploring or recently started using ML methods, but not in all industries though. Government\/Public Service and Non-profit\/Service declare that they don't use ML methods. For insights generation, ML methods are used mostly in Academics\/Education.\n* Most of their work consists of analyzing and understanding data to influence product or business decisions and building prototypes to explore applying machine learning to new areas.\n* They mostly don't use ML product, spending a lot of time actively coding.\n* They are programming mainly in Python, Java or SQL recommend the newcomers to learn Python, even within a group of R coders 41% suggests to learn Python first.\n* Matplotlib is beating other libraries as a most popular one, but within genetic data, ggplot2 is dominated.\n* During the normal working day cleaning data and modeling are most time-consuming tasks. Gathering and visualizing data, on the other hand, is the least one.\n* Mainly they don't explore model insights,  but if they do, they do it for all the models or only very important ones.\n* To reproduce the work, good documentation and readiness are used, in spite of the fact that this process is time-consuming.","3e0e8ebc":"Considering myself an online learner, I wanted to understand my peers, that had begun or completed online courses and have more than 1-year experience with ML algorithms, their problems, and concerns.\n<br>\n","cde92eec":"# What about work?\nTThey work as Data Scientists and do consider themselves as one.<br>\nAt work, most of them explore or recently started using ML methods, but not in all industries though.  Government\/Public Service and Non-profit\/Service declare that they don't use ML methods. For insights generation, ML methods are used mostly in Academics\/Education.<br>\nMost of their work consists of analyzing and understanding data to influence product or business decisions and building prototypes to explore applying machine learning to new areas.<br>\nPython and Jupiter are the most popular tools in use. Within the hosted notebook the leading role is playing Kaggle Kernels.<br>\nThey mostly don't use ML product, and MySQL is the most common rational database.","4e496fcf":"Ok, let's get started :)"}}