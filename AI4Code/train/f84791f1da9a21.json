{"cell_type":{"f8e8d78b":"code","79a522c4":"code","ab328706":"code","74862388":"code","e675ffc5":"code","58605071":"code","77bf03ba":"code","9321f94f":"code","2605f21d":"code","aa58461c":"code","4ace98a2":"code","8c12a0d6":"code","62e335f8":"code","0ad9cf04":"code","94d03bb8":"code","1959f941":"code","c9a764f2":"code","44e2e433":"code","03d0d5d2":"code","979cc028":"code","68ff00c2":"code","4b2f0de7":"code","5e6a152f":"code","ea78bd61":"code","634f88f6":"code","c583123a":"code","d42e4130":"code","d98f80f4":"code","23ac9622":"code","3dac16d5":"code","741a7614":"code","d984fa34":"code","0ef0a65a":"code","c8c378d8":"code","2c4420a7":"markdown","fe86f89f":"markdown","c047bb39":"markdown","874349c7":"markdown","a33498ee":"markdown","8a165fab":"markdown","dd6f46fa":"markdown","1711ef4a":"markdown","71d5a49c":"markdown","1df22243":"markdown","a7fe5923":"markdown","174b7e1d":"markdown","1672cf73":"markdown","c6cf1186":"markdown"},"source":{"f8e8d78b":"import random\nfrom datetime import timedelta\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots\nimport folium\n\nfrom pandas.plotting import register_matplotlib_converters\nregister_matplotlib_converters()   \n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","79a522c4":"data=pd.read_csv('..\/input\/coronavirusdataset\/Case.csv')\n","ab328706":"data.head()","74862388":"data2=pd.read_csv('..\/input\/coronavirusdataset\/Time.csv')\n","e675ffc5":"data2.head()","58605071":"print(\"Sat\u0131r say\u0131s\u0131\",data.shape[0])\n\nprint(\"S\u00fctun Adlar\u0131\",data.columns.tolist())\n\nprint(\"Veri Tipler\u0131\",data.dtypes)\n","77bf03ba":"print(\"Sat\u0131r say\u0131s\u0131\",data2.shape[0])\n\nprint(\"S\u00fctun Adlar\u0131\",data2.columns.tolist())\n\nprint(\"Veri Tipler\u0131\",data2.dtypes)\n","9321f94f":"data.groupby('province').mean()","2605f21d":"data2.mean()","aa58461c":"data.info()","4ace98a2":"data2.info()","8c12a0d6":"data.tail()","62e335f8":"print(data.groupby('province').size())","0ad9cf04":"data.sort_values(by=['confirmed'], ascending=False, inplace = True)","94d03bb8":"fig = px.bar(data, x=\"province\", y=\"confirmed\", title='\u015eehirlerdeki Vaka Say\u0131lar\u0131')\nfig.update_layout(barmode='group')\nfig.show()","1959f941":"fig = px.pie(data, values='confirmed', names='province', title='\u015eehirlerindeki vaka say\u0131lar\u0131', hover_data=['confirmed'])\nfig.update_traces(textposition='inside', textinfo='percent+label')\nfig.show()","c9a764f2":"data2.head(-10).T","44e2e433":"from datetime import date\n","03d0d5d2":"\ndata2['date'] = pd.to_datetime(data2['date'])\ndata2['date'] = data2['date'].dt.date\n","979cc028":"confirmed=data2[\"confirmed\"].values\ngun_sayisi=len(data2[data2['date']>date(2020,1,20)])\nx=np.arange(0 , gun_sayisi)\ngunluk_vaka=[]\nfor n in x:\n    gunluk_vaka.append(confirmed[x-n]-confirmed[x-n-1])\n    if n == 0:\n        gunluk_vaka[0][0]=1\n        break\nprint(gunluk_vaka)\nx=x.tolist()\ngunluk_vaka=gunluk_vaka[0].tolist()\nx=pd.Series(x)\ngunluk_vaka=pd.Series(gunluk_vaka)\nprint(x.shape)\nprint(gunluk_vaka.shape)","68ff00c2":"gun_sayisi=len(data2[data2['date']>date(2020,1,20)])\n\nx=x.values.reshape(-1,1)\ny=gunluk_vaka.values.reshape(-1,1)\nprint(x.shape)\nprint(y.shape)","4b2f0de7":"plt.figure(figsize=(16, 9))\nplt.scatter(x,y)\nplt.xlabel(\"G\u00fcn Say\u0131s\u0131\")\nplt.ylabel(\"Vaka Say\u0131s\u0131\")\nplt.title(\"G\u00fcnl\u00fck Vaka Say\u0131s\u0131\")\nplt.show()","5e6a152f":"from sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.linear_model import LinearRegression\nPoly_reg=PolynomialFeatures(degree=8)  \nx_poly=Poly_reg.fit_transform(x)\nLin_reg = LinearRegression()\nLin_reg.fit(x_poly,y)","ea78bd61":"print(x_poly[:8])","634f88f6":"plt.figure(figsize=(16, 9))\nplt.scatter(x,y)\nplt.xlabel(\"G\u00fcn Say\u0131s\u0131\")\nplt.ylabel(\"Vaka Say\u0131s\u0131\")\nplt.title(\"Regresyon Modeli\")\ny_pred=Lin_reg.predict(x_poly)\nplt.plot(x,y_pred,color=\"green\",label=\"Polinom Linner Regresyon Model\")\nplt.legend()\nplt.show()","c583123a":"print(Lin_reg.intercept_)\nprint(Lin_reg.coef_)","d42e4130":"from sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC","d98f80f4":"data3=data2\n","23ac9622":"del data3['date']","3dac16d5":"array = data3.values\nX = array[:,0:5]\ny = array[:,5]\nX_train, X_validation, Y_train, Y_validation = train_test_split(X, y, test_size=0.60, random_state=1)","741a7614":"models = []\nmodels.append(('LR', LogisticRegression(solver='liblinear', multi_class='ovr')))\nmodels.append(('LDA', LinearDiscriminantAnalysis()))\nmodels.append(('KNN', KNeighborsClassifier()))\nmodels.append(('CART', DecisionTreeClassifier()))\nmodels.append(('NB', GaussianNB()))\nmodels.append(('SVM', SVC(gamma='auto')))\n\nresults = []\nnames = []\nfor name, model in models:\n\tkfold = StratifiedKFold(n_splits=10, random_state=1, shuffle=True)\n\tcv_results = cross_val_score(model, X_train, Y_train, cv=kfold, scoring='accuracy')\n\tresults.append(cv_results)\n\tnames.append(name)\n\tprint('%s: %f (%f)' % (name, cv_results.mean(), cv_results.std()))","d984fa34":"plt.boxplot(results, labels=names)\nplt.title('Algoritma Kar\u015f\u0131la\u015ft\u0131rmas\u0131')\nplt.show()","0ef0a65a":"model = DecisionTreeClassifier()\nmodel.fit(X_train, Y_train)\npredictions = model.predict(X_validation)","c8c378d8":"print(accuracy_score(Y_validation, predictions))\nprint(confusion_matrix(Y_validation, predictions))\nprint(classification_report(Y_validation, predictions))","2c4420a7":"Ayn\u0131 veriyi pasta grafi\u011fi ile g\u00f6rselle\u015ftirdim.","fe86f89f":"Tarih s\u00fctunu ile bir i\u015fimiz olmad\u0131\u011f\u0131 i\u00e7in \u00e7\u0131kard\u0131m.","c047bb39":"Bu k\u0131s\u0131mdan sonra modelleri olu\u015fturmaya ba\u015flad\u0131m. 6 farkl\u0131 test algoritmas\u0131 kulland\u0131m.\n* Logistic Regression (LR)\n* Linear Discriminant Analysis (LDA)\n* K-Nearest Neighbors (KNN)\n* Classification and Regression Trees (CART)\n* Gaussian Naive Bayes (NB)\n* Support Vector Machines (SVM)","874349c7":"Bu \u00e7al\u0131\u015fmada Makine \u00d6\u011frenmesine giri\u015f adl\u0131 dersim i\u00e7in bir analiz, g\u00f6rselle\u015ftirme, test ve modelleme i\u015flemleri yapt\u0131m.","a33498ee":"Modelleri haz\u0131rlamak i\u00e7in X_train ve Y_train'de e\u011fitim verilerimizi ve daha sonra kullanabilece\u011fimiz  X_validation ve Y_validation k\u00fcmelerini haz\u0131rlad\u0131m.","8a165fab":"Veriyi g\u00f6rselle\u015ftirmeden \u00f6nce **confirmed** s\u00fctununa g\u00f6re k\u00fc\u00e7\u00fckten b\u00fcy\u00fc\u011fe s\u0131ralad\u0131m.","dd6f46fa":"Do\u011frulama veri k\u00fcmesinde tahminleme yapt\u0131m.","1711ef4a":"Veri setindeki **confirmed** s\u00fctunundaki verileri confirmed ad\u0131nda bir de\u011fi\u015fkene att\u0131m. Ard\u0131ndan ilk vakan\u0131n g\u00f6r\u00fcld\u00fc\u011f\u00fc g\u00fcnden sonraki g\u00fcnleri *gun_sayisi*'na ekledim.","71d5a49c":"Son olarak elde etti\u011fim tahminler.","1df22243":"S\u0131ralad\u0131\u011f\u0131m veriyi bar grafi\u011fiyle g\u00f6rselle\u015ftirdim. Burada x ekseni \u015fehirleri, y ekseni ise hasta say\u0131s\u0131n\u0131 belirtiyor.","a7fe5923":"En iyi de\u011feri **CART** algoritmas\u0131nda elde etti\u011fimizi g\u00f6r\u00fcyoruz.","174b7e1d":"Haz\u0131rlad\u0131\u011f\u0131m\u0131z veriye test algoritmalar\u0131n\u0131n hepsini s\u0131rayla uygulad\u0131m.","1672cf73":"Algoritmalar i\u00e7in gerekli olan k\u00fct\u00fcphaneleri y\u00fckledim.","c6cf1186":"Veri setindeki **date** s\u00fctununun veri tipini *date* olarak d\u00fczenledim."}}