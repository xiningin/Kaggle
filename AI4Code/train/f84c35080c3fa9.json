{"cell_type":{"d3394db2":"code","4a20e48f":"code","d29ef886":"code","3ff79be7":"code","4939d817":"code","94a6067c":"code","73eae9ce":"code","46de3309":"code","4cd726c8":"code","b7f43abe":"code","80d3fa8c":"code","226a9992":"code","9947b112":"code","5a237f12":"code","485dd7dc":"code","0dff31da":"code","afe9e80d":"code","ad3ac1c8":"code","8d3e5d88":"code","c67cef2f":"code","68855557":"code","5f1aa2a1":"code","795e022b":"code","f5519ad6":"code","6a98e438":"code","6f03b523":"code","780f1c5c":"code","d2ff71c9":"code","712b8ff0":"code","16541a37":"code","dde82f3c":"code","778a00a8":"markdown","46ba14fc":"markdown","5e14d349":"markdown","8d338c96":"markdown","cca9d0b2":"markdown","b9419209":"markdown","f7bf0a14":"markdown","f5d8ba5a":"markdown","5c81a955":"markdown"},"source":{"d3394db2":"# data processing\nimport pandas as pd","4a20e48f":"# Load NYPD Motor Vehicle Collisions file\ndf = pd.read_csv(\"\/kaggle\/input\/nypd-motor-vehicle-collisions\/nypd-motor-vehicle-collisions.csv\")","d29ef886":"df.info()","3ff79be7":"# Let's quickly analyze what we've got here ^\n# 1.5 Million records\n# 1 Million with Borough and Zip Code info >> in other words, we're missing 500k location records\n# In case we have Location, we can do reverse Geocoding with GeoPY library and find out address (Borough + Zipcode)","4939d817":"# Column header titles cleaning\/renaming\n\n# Number of persons injured is the total of injured (pedestrians + cyclists + motorists)\n# If the number is 0, it means 0 injures and 0 deaths in an incident, but it's still a record\n\ndf.rename(columns = {'ZIP CODE'          : 'ZIP_CODE',\n                       'ON STREET NAME'    : 'STREET_ON',\n                       'CROSS STREET NAME' : 'STREET_CROSS',\n                       'OFF STREET NAME'   : 'STREET_OFF',\n                       'NUMBER OF PERSONS INJURED'     : 'TOTAL_INJURED',\n                       'NUMBER OF PERSONS KILLED'      : 'TOTAL_KILLED',\n                       'NUMBER OF PEDESTRIANS INJURED' : 'PED_INJURED',\n                       'NUMBER OF PEDESTRIANS KILLED'  : 'PED_KILLED',\n                       'NUMBER OF CYCLIST INJURED'     : 'CYC_INJURED',\n                       'NUMBER OF CYCLIST KILLED'      : 'CYC_KILLED',\n                       'NUMBER OF MOTORIST INJURED'    : 'MOTO_INJURED',\n                       'NUMBER OF MOTORIST KILLED'     : 'MOTO_KILLED',\n                       'CONTRIBUTING FACTOR VEHICLE 1' : 'VEH_FACTOR_1',\n                       'CONTRIBUTING FACTOR VEHICLE 2' : 'VEH_FACTOR_2',\n                       'CONTRIBUTING FACTOR VEHICLE 3' : 'VEH_FACTOR_3',\n                       'CONTRIBUTING FACTOR VEHICLE 4' : 'VEH_FACTOR_4',\n                       'CONTRIBUTING FACTOR VEHICLE 5' : 'VEH_FACTOR_5',\n                       'UNIQUE KEY' : 'UNIQUE_KEY',\n                       'VEHICLE TYPE CODE 1' : 'VEH_TYPE_1',\n                       'VEHICLE TYPE CODE 2' : 'VEH_TYPE_2',\n                       'VEHICLE TYPE CODE 3' : 'VEH_TYPE_3',\n                       'VEHICLE TYPE CODE 4' : 'VEH_TYPE_4',\n                       'VEHICLE TYPE CODE 5' : 'VEH_TYPE_5'},\n           inplace = True) ","94a6067c":"# Missing values in columns\ndf.isna().sum()","73eae9ce":"# Borough and Zipcode are missing ~500k records >> ~30% which is significant and we can't disregard it\n# I'll assign missing Borough records to NYC. It will be 5 boroughs and NYC to collect what's unassigned.\n\n# Remove Total Injured and Total Killed NaN values\n# TOTAL INJURED and TOTAL KILLED are > 0, otherwise it's justa a record, so let's keep only > 0 records","46de3309":"# Borough and Zipcode are missing ~500k records >> ~30% which is significant and we can't disregard it\n# I'll assign missing Borough records to NYC. It will be 5 borougs and NYC to collect what's unassigned\n\n# Remove Total Injured and Total Killed NaN values\n# TOTAL INJURED and TOTAL KILLED are > 0, otherwise it's just a a record, so let's keep only > 0 records","4cd726c8":"# Fill all blank values in column Borough\n# If a value is NaN it will be NYC\ndf.loc[df['BOROUGH'].isnull(), 'BOROUGH'] = 'NYC'","b7f43abe":"# Let's check it... BOROUGH should have 0 NaN values\ndf.isna().sum()","80d3fa8c":"# Remove NaN from TOTAL INJURED\ndf = df.dropna(axis=0, subset=['TOTAL_INJURED'])","226a9992":"# Remove NaN from TOTAL KILLED\ndf = df.dropna(axis=0, subset=['TOTAL_KILLED'])","9947b112":"# Keep only > 0 values as df1\ndf1 = df[(df['TOTAL_INJURED'] > 0)]","5a237f12":"# Keep only non-zero values as df2\ndf2 = df[(df['TOTAL_KILLED'] > 0)]","485dd7dc":"# Concatenate df1 and df2 and put it back as df; 0 values are now out\ndf = pd.concat([df1, df2])","0dff31da":"# Combine DATE and TIME column to transform Series to DateTime needed for further analysis\ndf['DATE'] = df['DATE'] + ' ' + df['TIME']","afe9e80d":"# Convert string to DateTime\ndf['DATE'] = pd.to_datetime(df.DATE)","ad3ac1c8":"# Year filter\ndf['DATE_YEAR'] = pd.to_datetime(df['DATE']).dt.year","8d3e5d88":"# Quarter filter\ndf['DATE_QUARTER'] = pd.to_datetime(df['DATE']).dt.quarter","c67cef2f":"# Month filter\ndf['DATE_MONTH'] = pd.to_datetime(df['DATE']).dt.month","68855557":"# Day of the week filter\ndf['WEEKDAY'] = pd.to_datetime(df['DATE']).dt.weekday","5f1aa2a1":"df.info()","795e022b":"# We have 285,116 relevant records instead of 1.5 million and our file is 68 MB from 340 MB at the beginning\n# This file is now even readable with Excel","f5519ad6":"import matplotlib.pyplot as plt\n%matplotlib inline","6a98e438":"# Year 2012 starts in July and for that reason it's incomplete and we can't use it in our analysis. \n# Let's filter out 2012 and leave 2019 just as a reference for a trend (today is mid-August 2019)\ndf = df[(df['DATE'] > '2013-01-01')]","6f03b523":"plt.figure(figsize=(20, 25)).subplots_adjust(hspace = 0.4)\n\n# Total number of PERSONS injured\nplt.subplot(4, 2 ,1)\ndf.groupby('DATE_YEAR').TOTAL_INJURED.sum().plot.bar()\nplt.title('Total number of PERSONS INJURED', fontsize=16)\nplt.xlabel('Year', fontsize=13)\n\n# Total number of MOTORISTS injured\nplt.subplot(4, 2, 2)\ndf.groupby('DATE_YEAR').MOTO_INJURED.sum().plot.bar()\nplt.title('Total number of MOTORISTS INJURED', fontsize=16)\nplt.xlabel('Year', fontsize=13)\n\n# Total number of CYCLISTS injury\nplt.subplot(4, 2 ,3)\ndf.groupby('DATE_YEAR').CYC_INJURED.sum().plot.bar()\nplt.title('Total number of CYCLISTS INJURED', fontsize=16)\nplt.xlabel('Year', fontsize=13)\n\n# Total number of PEDESTRIANS injured\nplt.subplot(4, 2, 4)\ndf.groupby('DATE_YEAR').PED_INJURED.sum().plot.bar()\nplt.title('Total number of PEDESTRIANS INJURED', fontsize=16)\nplt.xlabel('Year', fontsize=13)\n\nplt.show()","780f1c5c":"plt.figure(figsize=(20, 25)).subplots_adjust(hspace = 0.4)\n\n# Total number of PERSONS killed\nplt.subplot(4, 2 ,1)\ndf.groupby('DATE_YEAR').TOTAL_KILLED.sum().plot.bar()\nplt.title('Total number of PERSONS KILLED', fontsize=16)\nplt.xlabel('Year', fontsize=13)\n\n# TTotal number of MOTORISTS killed\nplt.subplot(4, 2, 2)\ndf.groupby('DATE_YEAR').MOTO_KILLED.sum().plot.bar()\nplt.title('Total number of MOTORISTS KILLED', fontsize=16)\nplt.xlabel('Year', fontsize=13)\n\n# Total number of CYCLISTS killed\nplt.subplot(4, 2 ,3)\ndf.groupby('DATE_YEAR').CYC_KILLED.sum().plot.bar()\nplt.title('Total number of CYCLISTS KILLED', fontsize=16)\nplt.xlabel('Year', fontsize=13)\n\n# Total number of PEDESTRIANS killed\nplt.subplot(4, 2, 4)\ndf.groupby('DATE_YEAR').PED_KILLED.sum().plot.bar()\nplt.title('Total number of PEDESTRIANS KILLED', fontsize=16)\nplt.xlabel('Year', fontsize=13)\n\nplt.show()","d2ff71c9":"fig, ax = plt.subplots(1, figsize=(25, 15))\n\nplt.subplot(2, 2 ,1)\ndf.groupby('BOROUGH').TOTAL_INJURED.sum().sort_values(ascending=False).plot.bar()\nplt.title('Number of people injured per borough', fontsize=18)\nplt.xlabel('Borough,   *NYC = unknown location incidents', fontsize=14)\n\nplt.subplot(2, 2 ,2)\ndf.groupby('BOROUGH').TOTAL_KILLED.sum().sort_values(ascending=False).plot.bar()\nplt.title('Number of people killed per borough', fontsize=18)\nplt.xlabel('Borough,   *NYC = unknown location incidents', fontsize=14)\n\nplt.show()","712b8ff0":"# Total number of injured and killed per quarter\nfig, ax = plt.subplots(1, figsize=(25, 15))\n\nplt.subplot(2, 2 ,1)\ndf.groupby('DATE_QUARTER').TOTAL_INJURED.sum().plot.bar()\nplt.title('Total number of PERSONS INJURED', fontsize=18)\nplt.xlabel('Quarter', fontsize=14)\n\nplt.subplot(2, 2 ,2)\ndf.groupby('DATE_QUARTER').TOTAL_KILLED.sum().plot.bar()\nplt.title('Total number of PERSONS KILLED', fontsize=18)\nplt.xlabel('Quarter', fontsize=14)\n\nplt.show()","16541a37":"# Total number of injured and killed per quarter\nfig, ax = plt.subplots(1, figsize=(25, 15))\nplt.subplot(2, 2 ,1)\ndf.groupby('WEEKDAY').TOTAL_INJURED.sum().plot.bar()\nplt.title('Total number of PERSONS INJURED per day of the week', fontsize=18)\nplt.xlabel('Weekday,    0 = Sunday', fontsize=14)\n\nplt.subplot(2, 2 ,2)\ndf.groupby('WEEKDAY').TOTAL_KILLED.sum().plot.bar()\nplt.title('Total number of PERSONS KILLED per day of the week', fontsize=18)\nplt.xlabel('Weekday,    0 = Sunday', fontsize=14)\n\nplt.show()","dde82f3c":"#--------------------------------------------------------------------------------\n# Example code that works:\n# from geopy.geocoders import Nominatim\n# geolocator = Nominatim(user_agent=\"geoapiExercises\")\n# from tqdm import tqdm\n# tqdm.pandas()\n# geolocator = Nominatim(user_agent=\"specify_your_app_name_here\")\n# from geopy.extra.rate_limiter import RateLimiter\n# geocode = RateLimiter(geolocator.geocode, min_delay_seconds=0.0, max_retries=2, error_wait_seconds=5.0, swallow_exceptions=True, return_value_on_exception=None)\n# df['ADDRESS'] = df['LOCATION'].progress_apply(geocode)\n\n# The down side: it will return only ~1,000 addresses per day\n# With GeoPY is possible to fill all NaN values in ZIP CODE and BOROUGH\n# Example: \n# Input: 40.88939, -73.89839 \n# Output: Broadway, Fieldston, The Bronx, Bronx County, NYC, New York, 10463, USA\n#--------------------------------------------------------------------------------","778a00a8":"# Injured per year","46ba14fc":"# Day of the week analysis","5e14d349":"# CLEANING","8d338c96":"# NYC Vehicle Collisions Analysis","cca9d0b2":"# Killed per year","b9419209":"# Number of people injured and killed per borough\n- NYC is the sum of all incdents without known location","f7bf0a14":"# Data Analysis & Visualisation","f5d8ba5a":"# Per quarter analysis","5c81a955":"# Filling Zip code & Borough data - Reverse Geocoding\n- We can conduct the reverse Geocoding to obtain the address. All we need are the coordinates from column LOCATION (40.869335, -73.8255)"}}