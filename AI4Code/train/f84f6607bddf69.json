{"cell_type":{"059455f4":"code","13171883":"code","c09cb38c":"code","daa5047e":"code","06e94b12":"code","75e04a84":"code","ac63af74":"code","f7af3c20":"code","69cb96e1":"code","ebd5e5da":"code","bde05ba6":"markdown"},"source":{"059455f4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib as ml\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nml.style.use('ggplot')\n\nfrom sklearn.model_selection import train_test_split,GridSearchCV\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import accuracy_score,recall_score,confusion_matrix\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","13171883":"data = pd.read_csv('\/kaggle\/input\/breast-cancer-wisconsin-data\/data.csv')\ndata.tail(20)","c09cb38c":"data.info()","daa5047e":"data.describe()","06e94b12":"data.columns","75e04a84":"data['diagnosis'] = data['diagnosis'].replace('M',1)\ndata['diagnosis'] = data['diagnosis'].replace('B',0)\ndata.drop(columns=['id','Unnamed: 32'],inplace=True)\ndata.head()","ac63af74":"data.columns","f7af3c20":"sns.pairplot(data.iloc[:,:21],'diagnosis')\nplt.show()","69cb96e1":"X,Y = np.array(data.iloc[:,1:].values),np.array(data.iloc[:,0].values)\ntrainx,testx,trainy,testy = train_test_split(X,Y,test_size=0.2,random_state=0)\nss = StandardScaler()\ntrainx2,testx2 = ss.fit_transform(trainx),ss.fit_transform(testx)\nparam_grid = [\n    {'C':[0.1,1,10,100,1000],'kernel':['rbf','sigmoid'],'gamma':['scale','auto']},\n    {'C':[0.1,1,10,100,1000],'kernel':['poly'],'degree':[2,3]}\n]\n# Initial run(without tuning)\nsvm1,svm2 = SVC(),SVC()\nsvm1.fit(trainx,trainy)\nprint(\"BEFORE SCALING THE FEATURES -->\\n\")\nprint(\"Initial accuracy score = {:.3f}\".format(accuracy_score(testy,svm1.predict(testx))))\nprint(\"\\nInitial recall score = {:.3f}\".format(recall_score(testy,svm1.predict(testx))))\nprint(\"Initial confusion matrix :\\n\",confusion_matrix(testy,svm1.predict(testx)))\nsvm2.fit(trainx2,trainy)\nprint(\"\\n\\nAFTER SCALING THE FEATURES -->\\n\")\nprint(\"Initial accuracy score = {:.3f}\".format(accuracy_score(testy,svm2.predict(testx2))))\nprint(\"\\nInitial recall score = {:.3f}\".format(recall_score(testy,svm2.predict(testx2))))\nprint(\"Initial confusion matrix :\\n\",confusion_matrix(testy,svm2.predict(testx2)))","ebd5e5da":"# Tuning the hyperparameters\nsvm_cv1,svm_cv2 = GridSearchCV(svm1,param_grid=param_grid,cv=10,n_jobs=-1),GridSearchCV(svm2,param_grid=param_grid,cv=10,n_jobs=-1)\nsvm_cv1.fit(trainx,trainy)\nprint(\"AFTER TUNING THE HYPERPARAMETERS : \\n\")\nprint(\"-\"*100)\nprint(\"BEFORE SCALING THE FEATURES -->\\n\")\nprint(\"Accuracy score = {:.3f}\".format(accuracy_score(testy,svm_cv1.predict(testx))))\nprint(\"\\nRecall score = {:.3f}\".format(recall_score(testy,svm_cv1.predict(testx))))\nprint(\"Confusion matrix :\\n\",confusion_matrix(testy,svm_cv1.predict(testx)))\nprint(\"\\nThe best hyperparameters and accuracy score are : {} and {:.3f} respectively\".format(svm_cv1.best_params_,svm_cv1.best_score_))\nsvm_cv2.fit(trainx2,trainy)\nprint(\"AFTER SCALING THE FEATURES -->\\n\")\nprint(\"Accuracy score = {:.3f}\".format(accuracy_score(testy,svm_cv2.predict(testx2))))\nprint(\"\\nRecall score = {:.3f}\".format(recall_score(testy,svm_cv2.predict(testx2))))\nprint(\"Confusion matrix :\\n\",confusion_matrix(testy,svm_cv2.predict(testx2)))\nprint(\"\\nThe best hyperparameters and accuracy score are : {} and {:.3f} respectively\".format(svm_cv2.best_params_,svm_cv2.best_score_))","bde05ba6":"## Building the model"}}