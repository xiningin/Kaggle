{"cell_type":{"9309a9d0":"code","e1ad5086":"code","e96ec234":"code","207d5833":"code","4618adb2":"code","66a1f1ee":"code","90af9cbb":"code","7f70fe60":"code","888676f9":"code","56ca2659":"code","6a458ace":"code","d12ee756":"code","175fd5ff":"code","bfcef196":"code","cc54fdb4":"code","6f956d60":"code","f5d394d1":"code","8aba24b5":"code","15d08721":"code","9aee2aa4":"code","89461ccd":"code","0a553bf2":"code","26d642eb":"code","f395071a":"code","42c2065b":"code","6825a16b":"code","967c6ef0":"code","de27317d":"code","822d6f2d":"code","d7dd77c2":"code","3d19585f":"code","6e5715a4":"code","155f234d":"markdown","82cbe711":"markdown","fbd0c1ee":"markdown","50a76dd8":"markdown","b8e99722":"markdown"},"source":{"9309a9d0":"import numpy as np\nimport pandas as pd\nimport numpy.matlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport random","e1ad5086":"def calc_distance(X1, X2):\n    return (sum((X1 - X2)**2))**0.5","e96ec234":"def calc_centroids(clusters, X):\n    new_centroids = []\n    new_df = pd.concat([pd.DataFrame(X), pd.DataFrame(clusters, columns=['cluster'])],\n                      axis=1)\n    for c in set(new_df['cluster']):\n        current_cluster = new_df[new_df['cluster'] == c][new_df.columns[:-1]]\n        cluster_mean = current_cluster.mean(axis=0)\n        new_centroids.append(cluster_mean)\n    return new_centroids","207d5833":"def findClosestCentroids(ic, X):\n    assigned_centroid = []\n    for i in X:\n        distance=[]\n        for j in ic:\n            distance.append(calc_distance(i, j))\n        assigned_centroid.append(np.argmin(distance))\n    return assigned_centroid","4618adb2":"df1 = pd.read_excel('https:\/\/github.com\/rashida048\/Machine-Learning-With-Python\/raw\/master\/kmean.xlsx', header=None)","66a1f1ee":"df1.head()","90af9cbb":"df1.shape","7f70fe60":"plt.figure()\nplt.scatter(df1[0], df1[1])\nplt.show()","888676f9":"init_centroids = random.sample(range(0, len(df1)),3)","56ca2659":"init_centroids","6a458ace":"init_centroids = [95, 30, 17] # we are initializing centrids to reduce the iteration","d12ee756":"centroids = []\nfor i in init_centroids:\n    centroids.append(df1.loc[i])\ncentroids = np.array(centroids)\ncentroids","175fd5ff":"X = np.array(df1)","bfcef196":"get_centroids = findClosestCentroids(centroids, X)","cc54fdb4":"np.array(get_centroids)","6f956d60":"for i in range(10):\n    get_centroids = findClosestCentroids(centroids, X)\n    centroids = calc_centroids(get_centroids, X)\n    #print(centroids)\n    plt.figure()\n    plt.scatter(np.array(centroids)[:, 0], np.array(centroids)[:, 1], color='black')\n    plt.scatter(X[:, 0], X[:, 1], alpha=0.1)\n    plt.show()","f5d394d1":"df_mini = df1.sample(30) # choosing only 30 random samples\ndf_mini.reset_index(inplace=True)","8aba24b5":"df_mini.drop('index', axis=1, inplace=True)\ndf_mini","15d08721":"plt.figure()\nplt.scatter(df_mini[0], df_mini[1])\nplt.show()","9aee2aa4":"init_centroids = random.sample(range(0, len(df_mini)),3)\ninit_centroids","89461ccd":"centroids = []\nfor i in init_centroids:\n    centroids.append(df_mini.loc[i])\ncentroids = np.array(centroids)\ncentroids","0a553bf2":"print(\"{:<20} {:<20} {:<20} {:<20} {:<20} {:<20}\".format(\"x1\", \"x2\", \"C1 Dist\", \"C2 Dist\", \"C3 Dist\", \"C Head\"))\n\ncluster = []\n\nfor index, row in df_mini.iterrows():\n    distance = []\n    for i, c in enumerate(centroids):\n      distance.append(calc_distance(c, row.to_numpy()))\n    print(\"{:<20} {:<20} {:<20} {:<20} {:<20} {:<20}\".format(row[0], row[1], distance[0], distance[1], distance[2], np.argmin(distance)))\n    cluster.append(np.argmin(distance))\n","26d642eb":"plt.figure()\nplt.scatter(df_mini[0], df_mini[1], c=cluster)\nplt.show()","f395071a":"cluster0_groups = df_mini[np.array(cluster) == 0]","42c2065b":"cluster0_groups","6825a16b":"cluster1_groups = df_mini[np.array(cluster) == 1]","967c6ef0":"cluster2_groups = df_mini[np.array(cluster) == 2]","de27317d":"new_centroids = [np.array(cluster0_groups.mean()), np.array(cluster1_groups.mean()), np.array(cluster2_groups.mean())]","822d6f2d":"new_centroids","d7dd77c2":"centroids # initial centroid","3d19585f":"print(\"{:<20} {:<20} {:<20} {:<20} {:<20} {:<20}\".format(\"x1\", \"x2\", \"C1 Dist\", \"C2 Dist\", \"C3 Dist\", \"C Head\"))\n\ncluster = []\n\nfor index, row in df_mini.iterrows():\n    distance = []\n    for i, c in enumerate(new_centroids):\n      distance.append(calc_distance(c, row.to_numpy()))\n    print(\"{:<20} {:<20} {:<20} {:<20} {:<20} {:<20}\".format(row[0], row[1], distance[0], distance[1], distance[2], np.argmin(distance)))\n    cluster.append(np.argmin(distance))\n","6e5715a4":"plt.figure()\nplt.scatter(df_mini[0], df_mini[1], c=cluster)\nplt.show()","155f234d":"## Step 4 (repeat step 2)\n\n- This time group Points based on the Cluster Mean","82cbe711":"## Step 1\n\n- Choose value of K, here K=3\n- Choose K (3) random points as cluster heads","fbd0c1ee":"## Step 2\n\n- Calculate the Euclidean distance and group datapoints to the nearest centroid. ","50a76dd8":"## Mini Code","b8e99722":"## Step 3\n\n- Calculate the mean of the Cluster"}}