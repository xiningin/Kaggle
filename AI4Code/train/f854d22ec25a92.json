{"cell_type":{"9e9187ba":"code","86b71b3c":"code","d2651b2a":"code","8fe1834d":"code","9b64f267":"code","8eb9db9d":"code","788ea969":"code","a6c11510":"code","e9911f77":"code","dd96746d":"code","ae46b887":"code","68d44711":"code","ccb3599a":"code","29a8c0e4":"code","6144abb8":"code","bf7eb2d2":"code","00a02353":"code","d41afe91":"code","0ef0d4d1":"code","48da0ba2":"code","97b077ba":"code","7169334b":"code","da30e7d7":"code","776532c4":"code","dd29c8ea":"code","2b9c6d51":"code","5bc07177":"code","f20e7f14":"code","1b997ee6":"code","0e8176e5":"code","b1440c2f":"code","2a4cbbb9":"code","cbdeaea2":"code","1dfd681d":"code","19cf6a62":"code","d8194ea6":"code","e0fda6cf":"code","1d685162":"code","4af252b2":"code","142ac96f":"code","7b7dd66d":"code","2359eda5":"code","23daba55":"code","f6f2c797":"code","c50fb76b":"code","69d4bc8c":"code","2d6e9c7e":"code","7f3bf81a":"code","930b7e77":"markdown","8583395d":"markdown","11d0e1d9":"markdown","7aef608a":"markdown","d3228ac7":"markdown","4bd5fd90":"markdown","4a7562d5":"markdown","3a74c6c0":"markdown","b2a66450":"markdown","35f275b6":"markdown","542ae86b":"markdown","ca841941":"markdown","5721cf76":"markdown","ae8ec61d":"markdown","62cc2183":"markdown","2ed5cc90":"markdown","06b1e40d":"markdown","c7d184ee":"markdown","98c3b7e3":"markdown","2cd3f737":"markdown","7eed8796":"markdown","8950ac71":"markdown","41575d98":"markdown","e5b28310":"markdown","c12bcfe2":"markdown","31d8c1d0":"markdown"},"source":{"9e9187ba":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\nimport os","86b71b3c":"train_df = pd.read_csv('..\/input\/car-crashes-severity-prediction\/train.csv')\ntest_df = pd.read_csv('..\/input\/car-crashes-severity-prediction\/test.csv')\nweather_df = pd.read_csv('..\/input\/car-crashes-severity-prediction\/weather-sfcsv.csv')","d2651b2a":"pd.set_option('display.max_column', 100)\n# train data\nprint(\"The shape of the train dataset is {}.\\n\\n\".format(train_df.shape))\ntrain_df.head()","8fe1834d":"#test data\nprint(\"The shape of the test dataset is {}.\\n\\n\".format(test_df.shape))\ntest_df.head()","9b64f267":"# weather data\nprint(\"The shape of the weather dataset is {}.\\n\\n\".format(weather_df.shape))\nweather_df.head()","8eb9db9d":"train_df.info()","788ea969":"test_df.info()","a6c11510":"weather_df.info()","e9911f77":"print('the shape of weather data before dropping duplicates : ', weather_df.shape)\nweather_df = weather_df.drop_duplicates(['Year','Month','Day', 'Hour'], keep='last')\nprint('the shape of weather data after dropping duplicates : ', weather_df.shape)","dd96746d":"for df in [train_df, test_df] :\n    df['timestamp'] = pd.to_datetime(df['timestamp'])\n","ae46b887":"for df in [train_df, test_df] :\n    df['Year'] = df['timestamp'].dt.strftime('%Y').astype(int)\n    df['Month'] = df['timestamp'].dt.strftime('%m').astype(int)\n    df['Day'] = df['timestamp'].dt.strftime('%d').astype(int)\n    df['Hour'] = df['timestamp'].dt.strftime('%H').astype(int)\n    df['time'] = df['timestamp'].dt.strftime('%Y-%m-%d')\n","68d44711":"import xml.etree.ElementTree as Xet\n  \ncols = [\"date\"]\nrows = []\n  \n# Parsing the XML file\nxmlparse = Xet.parse('\/kaggle\/input\/car-crashes-severity-prediction\/holidays.xml')\nroot = xmlparse.getroot()\nfor i in root:\n    date = i.find(\"date\").text\n    rows.append({\"date\": date })\n    \n    \nholidays_df = pd.DataFrame(rows, columns=cols)\nholidays_df.head()","ccb3599a":"holiday_set = set(holidays_df['date'])\nfor df in [train_df, test_df] :    \n    df['is_holiday'] = df['time'].isin(holiday_set).astype(int)\n    ","29a8c0e4":"train_df = pd.merge(train_df, weather_df, left_on = ['Year', 'Month', 'Day', 'Hour'], right_on = ['Year', 'Month', 'Day', 'Hour'])\ntest_df = pd.merge(test_df, weather_df, left_on = ['Year', 'Month', 'Day', 'Hour'], right_on = ['Year', 'Month', 'Day', 'Hour'])","6144abb8":"train_df.head()","bf7eb2d2":"test_df.head()","00a02353":"train_df.describe().T","d41afe91":"boolean_columns = ['Bump', 'Crossing', 'Give_Way', 'Junction', 'No_Exit', 'Railway', 'Roundabout', 'Stop', 'Amenity', 'Side', 'Selected']\ndef col_values(data, col) :    \n    return data[col].value_counts()\nfor col in boolean_columns :\n    print('Column Name : ', col)\n    print(col_values(train_df, col))\n    print(\"====================\")       ","0ef0d4d1":"train_df.isnull().sum()","48da0ba2":"test_df.isnull().sum()","97b077ba":"columns_2_drop = ['Bump', 'Give_Way', 'No_Exit', 'Roundabout', 'time', 'timestamp', 'Selected']\nfor df in [train_df, test_df] :\n    df.drop(columns = columns_2_drop, axis = 1, inplace = True)","7169334b":"train_df['ID'].duplicated().sum()","da30e7d7":"# correlation matrix and heatmap to stand on important features\ncorr_matrix = train_df.corr()\nmask = np.triu(np.ones_like(corr_matrix,dtype = bool))\nplt.figure(figsize = (20,10))\nsns.heatmap(corr_matrix, fmt = '0.1f', cmap = 'Blues', mask = mask, annot = True)\nplt.title(\"Correlation Analysis\");","776532c4":"corr_matrix['Severity']","dd29c8ea":"plt.scatter(data = train_df, x = 'Temperature(F)', y = 'Humidity(%)')\nplt.xlabel('Temperature(F)')\nplt.ylabel('Humidity(%)')\nplt.title('Temp VS Humidity');","2b9c6d51":"\nfor df in [train_df,test_df]:\n    df['Wind_Speed(mph)'].fillna(df['Wind_Speed(mph)'].dropna().mean(), inplace = True)\n    df['Precipitation(in)'].fillna(df['Precipitation(in)'].dropna().mean(), inplace = True)\n    df['Wind_Chill(F)'].fillna(df['Wind_Chill(F)'].dropna().mean(), inplace = True)\n    ","5bc07177":"train_df.isnull().sum()","f20e7f14":"# dropping some records with nulls\ntrain_df.dropna(inplace = True)\ntrain_df.isnull().sum()","1b997ee6":"train_df['Severity'].value_counts()","0e8176e5":"sns.countplot(data = train_df, x = 'Severity');","b1440c2f":"plt.scatter(data = train_df, x = 'Lat', y = 'Lng')\nplt.xlabel('Latitude')\nplt.ylabel('Longitude')\nplt.title('Locations of car crashes');","2a4cbbb9":"plt.hist(train_df['Distance(mi)'])\nplt.xlabel('Distance');","cbdeaea2":"#sns.boxplot(train_df['Distance(mi)'])\nnp.sum(train_df['Distance(mi)'] > 2)","1dfd681d":"#train_df = train_df[train_df['Distance(mi)'] < 2]","19cf6a62":"plt.hist(train_df['Lat'])\nplt.title('Latitude');","d8194ea6":"#train_df = train_df[train_df['Lat'] > 37.7]","e0fda6cf":"plt.hist(train_df['Lng']);","1d685162":"plt.hist(train_df['Temperature(F)'])","4af252b2":"plt.hist(train_df['Humidity(%)'])","142ac96f":"plt.hist(train_df['Wind_Speed(mph)']);","7b7dd66d":"for df in [train_df, test_df] :\n    df['x']=np.cos(df['Lat']) * np.cos(df['Lng'])\n    df['y']=np.cos(df['Lat']) * np.sin(df['Lng'])\n    df['z']=np.sin(df['Lat'])\n    df['loc']=df['x']*df['y']*df['z']\n","2359eda5":"from sklearn.preprocessing import LabelEncoder\nlabel_encoder = LabelEncoder()\nfor df in [train_df, test_df] :\n    df['Weather_Condition'] = label_encoder.fit_transform(df['Weather_Condition'])\n","23daba55":"train_df = pd.get_dummies(train_df)\ntest_df = pd.get_dummies(test_df)\n","f6f2c797":"from sklearn.model_selection import train_test_split\n\ntrain_data, val_data = train_test_split(train_df, test_size=0.2, random_state=42) # Try adding `stratify` here\n\nX_train = train_data.drop(columns=['ID','Severity'])\ny_train = train_data['Severity']\n\nX_val = val_data.drop(columns=['ID','Severity'])\ny_val = val_data['Severity']","c50fb76b":"from sklearn.ensemble import RandomForestClassifier\n\n# Create an instance of the classifier\nclassifier = RandomForestClassifier(max_depth=2,random_state=0)\n\n# Train the classifier\nclassifier = classifier.fit(X_train, y_train)","69d4bc8c":"print(\"The accuracy of the classifier on the training set is \", (classifier.score(X_train, y_train)))\nprint(\"The accuracy of the classifier on the validation set is \", (classifier.score(X_val, y_val)))\n","2d6e9c7e":"X_test = test_df.drop(columns=['ID'])\n\ny_test_predicted = classifier.predict(X_test)\n\ntest_df['Severity'] = y_test_predicted\n\ntest_df.head()","7f3bf81a":"test_df[['ID', 'Severity']].to_csv('\/kaggle\/working\/submission.csv', index=False)","930b7e77":"> so car crashes of severity 2 and 3 are the most common","8583395d":"## Handling Missing Values","11d0e1d9":"# Merging wheather data with test and train data","7aef608a":"# Adding holiday feature to train and test data","d3228ac7":"## Dropping some features","4bd5fd90":"> columns [Bump, Give_Way, No_Exit, Roundabout, Selected] should be dropped as it has one unique value","4a7562d5":"## Fixing data type of timestamp","3a74c6c0":"## Submission File Generation","b2a66450":"there is huge number of nulls in [Wind_Chill(F), Precipitation(in)] features so they will be dropped also","35f275b6":"> no nulls in train and test data but there is many nulls in weather data","542ae86b":"# Get holidays date as dataframe from hoidays xml","ca841941":"## Random Forest Classifier","5721cf76":"## Further Investigating New Data","ae8ec61d":"## Correlation Matrix","62cc2183":"# Get The Data","2ed5cc90":"## Dropping duplicates in weather dataset","06b1e40d":"## Data Is Ready For The Model","c7d184ee":"## Splitting Data","98c3b7e3":"## Encoding Categorical Variables","2cd3f737":"## Handling Outliers","7eed8796":"# import libraries","8950ac71":"## expand timestamp ","41575d98":"## Severity investigating","e5b28310":"## Adding some features of loctation","c12bcfe2":"## Location of car crashes","31d8c1d0":"# Exploring data"}}