{"cell_type":{"108213ab":"code","4946deee":"code","d0b37aa4":"code","b55ca80f":"code","d8a28e27":"code","0799b81c":"code","e0dc6179":"code","069d472f":"code","93bdfad0":"code","488481f4":"code","3f3ce098":"code","5ad73427":"code","90b63106":"code","47d86128":"code","ccad5aac":"code","c2d9becf":"code","3cf37f1a":"code","89813dbb":"code","143447cc":"code","0e8734dc":"code","6e4b86f2":"code","353da404":"code","5df46bbd":"markdown","10f3e77a":"markdown","f5e7f265":"markdown","0681a2f1":"markdown","d496a430":"markdown","36eef3aa":"markdown","2fb15ecd":"markdown","c3d3a130":"markdown","c2cd03c8":"markdown","3878016f":"markdown","bc2991e3":"markdown","2493d9a8":"markdown"},"source":{"108213ab":"## This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nfrom plotly.offline import init_notebook_mode\nimport plotly.graph_objects as go\ninit_notebook_mode(connected=True)\n\nimport folium\n# from geopy.geocoders import Nominatim\nfrom folium import Choropleth, Circle, Marker\nfrom folium.plugins import HeatMap, MarkerCluster\nimport math\n\nimport matplotlib.patches as mpatches\nimport matplotlib.gridspec as gridspec \n\nfrom matplotlib.offsetbox import AnchoredText\nfrom mpl_toolkits.axes_grid1 import make_axes_locatable\nfrom PIL import Image\nfrom wordcloud import WordCloud\n\nimport json\nimport warnings\nwarnings.filterwarnings(action='ignore')\n\npd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', None)\nplt.rcParams['figure.dpi'] = 200 #high resolution","4946deee":"\n# params = {'figure.dpi':200, #high resolution,\n#           'font.family':'serif',\n#           'font.sans-serif':'Lucida Grande',\n#           'legend.fontsize': '12',\n#           'figure.figsize': (18, 8),\n#          'axes.labelsize': '13',\n#          'axes.titlesize':'16',\n#          'xtick.labelsize':'12',\n#          'ytick.labelsize':'12'}\n# plt.rcParams.update(params)","d0b37aa4":"data_21 = pd.read_csv('..\/input\/kaggle-survey-2021\/kaggle_survey_2021_responses.csv', low_memory=False)\ndata_21.shape","b55ca80f":"# countries lat and long\nmap_df = pd.read_csv('..\/input\/countries-long-lat\/long_lat.csv')\nmap_df.head()","d8a28e27":"data_21.head()","0799b81c":"df = data_21.iloc[1:]['Q3'].value_counts()[:10]\nax = px.pie(df, values=df.values, names=list(df.index), \n             color_discrete_sequence=[\"#95101f\",\"#a82820\", \"#ba3d1f\",\"#cb511d\", \"#d45d00\",\"#dc6818\", \"#e87a13\",\"#f4900a\",\"#ffa600\", \"#f6a800\"], \n             hole=.35,\n             title='Percentage of total respondents of top 10 countries in 2021',             \n            )\n\nax.update_traces(hovertemplate = \"%{label}: <b>%{value}<\/b>\", textfont_size=14)\nax.update_layout(\n    hoverlabel=dict(\n        bgcolor=\"white\",\n#         font_size=16,\n#         font_family=\"Serif\",\n    ),\n    margin=dict(l=20, r=20, t=50, b=20),\n#     title_font_family=\"Serif\",\n)\nax.show()","e0dc6179":"q18_dictionary_of_counts_2021 = {\n    data_21['Q18_Part_1'][0].split('- ')[-1] : (data_21['Q18_Part_1'].count()),\n    data_21['Q18_Part_2'][0].split('- ')[-1] : (data_21['Q18_Part_2'].count()),\n    data_21['Q18_Part_3'][0].split('- ')[-1] : (data_21['Q18_Part_3'].count()),\n    data_21['Q18_Part_4'][0].split('- ')[-1] : (data_21['Q18_Part_4'].count()),\n    data_21['Q18_Part_5'][0].split('- ')[-1] : (data_21['Q18_Part_5'].count()),\n    data_21['Q18_Part_6'][0].split('- ')[-1] : (data_21['Q18_Part_6'].count()),\n    data_21['Q18_OTHER'][0].split('- ')[-1] : (data_21['Q18_OTHER'].count())\n}\n# q18_dictionary_of_counts_2021","069d472f":"q17_dictionary_of_counts_2021 = {\n    data_21['Q17_Part_1'][0].split('- ')[-1] : (data_21['Q17_Part_1'].count()),\n    data_21['Q17_Part_2'][0].split('- ')[-1] : (data_21['Q17_Part_2'].count()),\n    data_21['Q17_Part_3'][0].split('- ')[-1] : (data_21['Q17_Part_3'].count()),\n    data_21['Q17_Part_4'][0].split('- ')[-1] : (data_21['Q17_Part_4'].count()),\n    data_21['Q17_Part_5'][0].split('- ')[-1] : (data_21['Q17_Part_5'].count()),\n    data_21['Q17_Part_6'][0].split('- ')[-1] : (data_21['Q17_Part_6'].count()),\n    data_21['Q17_Part_7'][0].split('- ')[-1] : (data_21['Q17_Part_7'].count()),\n    data_21['Q17_Part_8'][0].split('- ')[-1] : (data_21['Q17_Part_8'].count()),\n    data_21['Q17_Part_9'][0].split('- ')[-1] : (data_21['Q17_Part_9'].count()),\n    data_21['Q17_Part_10'][0].split('- ')[-1] : (data_21['Q17_Part_10'].count()),\n    data_21['Q17_Part_11'][0].split('- ')[-1] : (data_21['Q17_Part_11'].count()),\n    data_21['Q17_OTHER'][0].split('- ')[-1] : (data_21['Q17_OTHER'].count())\n}\n# q17_dictionary_of_counts_2021","93bdfad0":"fig = px.scatter(\n    x=q17_dictionary_of_counts_2021.keys(), \n    y=q17_dictionary_of_counts_2021.values(), \n    title='ML algorithms that are used on a regular basis',\n    size=q17_dictionary_of_counts_2021.values(), \n    color_discrete_sequence=['#FF5F01'],\n)\nfig.update_layout(\n    title={\n        'y':0.9,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top',\n        'font_size':20,\n    },\n    hoverlabel=dict(\n    font_color=\"white\",\n)\n    ,\n    xaxis_title=\"ML Algorithms\",\n    yaxis_title=\"Number of respondants using the algorithms\",\n#     title_font_family=\"Serif\",\n    plot_bgcolor='rgba(0,0,0,0)'\n    )\nfig.show()","488481f4":"labels=['18-21', '22-24', '25-29', '30-34', '35-39', '40-44', '45-49']\ntmp_df = data_21[data_21['Q3'].isin(data_21.iloc[1:]['Q3'].value_counts()[:10].index)][['Q1','Q2','Q3']]\ntmp_df = tmp_df[tmp_df['Q1'].isin(labels)]\ntmp_df.groupby(by=['Q3','Q1']).agg(['count'])['Q2'].unstack().fillna(value=0).plot(\n    kind='barh', stacked=True,\n    color=[\"#3B27BA\",\"#E847AE\", \"#13CA91\", \"#FF9472\", \"#FE6B35\",\"#D9EB4B\", \"#04005E\"],\n    )\n# get rid of the frame\nfor spine in plt.gca().spines.values():\n    spine.set_visible(False)\n    \nplt.title('Number of people aged less than 50 in top 10 countries', fontsize=9, color='#1b293f')\nplt.legend(labels=labels, prop={'size':8})\nplt.ylabel('')\nplt.xticks(fontsize= 6)\nplt.yticks(fontsize= 6)\n\nplt.show()","3f3ce098":"plt.figure(figsize=(20,8))\n\nlabels=['18-21', '22-24', '25-29', '30-34', '35-39', '40-44', '45-49']\n\ntmp_df = data_21.drop(index=0)[data_21['Q1'].isin(labels)]\nsns.countplot(x = 'Q6', hue = 'Q1', data = tmp_df, \n              palette=[\"#3B27BA\",\"#E847AE\", \"#13CA91\", \"#FF9472\", \"#FE6B35\",\"#D9EB4B\", \"#04005E\"])\n# get rid of the frame\nfor spine in plt.gca().spines.values():\n    spine.set_visible(False)\n# plt.tick_params(top='off', bottom='off', left='off', right='off', labelleft='on', labelbottom='on')\nplt.title('Coding Experience', loc='center', y=1.1, fontsize=18)\nplt.legend(prop={'size':14})\nplt.xlabel('years of coding experience', fontsize=14)\nplt.ylabel('number of respondant', fontsize=14)\nplt.xticks(fontsize=13)\nplt.yticks(fontsize=13)\nplt.show()","5ad73427":"def create_map_df(df,col1,col2):\n    \n    df = df.iloc[1:]\n    df.replace({col2:{'I do not use machine learning methods':'not use ML methods',\n                     '20 or more years':'+20 years', 'Under 1 year':'>1 year'}}, inplace=True)\n    df = pd.DataFrame(df[[col1, col2, 'Latitude', 'Longitude']]).groupby([col1, col2,'Latitude', 'Longitude']).size().reset_index(name='count')\n    df[col2] = df[col2] + \": \" + df['count'].astype(str)\n    map_data = pd.DataFrame(df[col2].groupby([df[col1]]).apply(list).reset_index()) \n    map_data = pd.merge(map_data,df[[col1,'Latitude', 'Longitude']],on=col1, how='left')\n    map_data = map_data.drop_duplicates(subset = [col1]).reset_index()\n    \n    world_map= folium.Map(tiles=\"Stamen Toner\")\n    mc = MarkerCluster()\n    for idx, row in map_data.iterrows():\n        if not math.isnan(row['Longitude']) and not math.isnan(row['Latitude']):\n            tooltip = 'Click on it'\n            popup_text = \"\"\"\n            Country : <b>%s<\/b><br>\n            ML Experience : <b>%s<\/b><br>\n            \"\"\" % (row['Q3'], row['Q15'])\n\n#             iframe = folium.IFrame(html)\n            popup = folium.Popup(popup_text,\n                                 min_width=200,\n                                 max_width=200)\n        mc.add_child(Marker([row['Latitude'], row['Longitude']],tooltip=tooltip, popup=popup,\n                            icon=folium.Icon(color='red',icon='info-sign')))\n    \n        world_map.add_child(mc)\n    \n    return world_map\n\ndf = pd.merge(data_21, map_df, on = 'Q3', how = 'left')\nwmap = create_map_df(df, 'Q3', 'Q15')\nwmap","90b63106":"def drawPieMarker(xs, ys, ratios, sizes, colors, ax):\n    markers = []\n    previous = 0\n    # calculate the points of the pie pieces\n    for color, ratio in zip(colors, ratios):\n        this = 2 * np.pi * ratio + previous\n        x  = [0] + np.cos(np.linspace(previous, this, 30)).tolist() + [0]\n        y  = [0] + np.sin(np.linspace(previous, this, 30)).tolist() + [0]\n        xy = np.column_stack([x, y])\n        previous = this\n        markers.append({'marker':xy, 's':np.abs(xy).max()**2*np.array(sizes), 'facecolor':color})\n\n    # scatter each of the pie pieces to create pies\n    for marker in markers:\n        ax.scatter(xs, ys, **marker, alpha=0.7)\n\n\nq5_order = ['Business Analyst',\n            'Data Analyst',\n            'Data Engineer',\n            'Data Scientist',\n            'DBA\/Database Engineer',\n            'Developer Relations\/Advocacy',\n            'Machine Learning Engineer',\n            'Product Manager',\n            'Program\/Project Manager',\n            'Research Scientist',\n            'Software Engineer', \n            'Student',\n            'Statistician',\n            'Currently not employed',\n            'Other']\n\nq15_order = ['I do not use machine learning methods',\n             'Under 1 year',\n             '1-2 years',\n             '2-3 years',\n             '3-4 years',\n             '4-5 years',\n             '5-10 years',\n             '10-20 years',\n             '20 or more years']\n\n\n\n# data_q5q15 = pd.pivot_table(data_21, values=['count'], index=['Q5'], columns=['Q15'], \n#                             aggfunc={'count':np.sum}).fillna(0).astype(int).loc[q5_order, q15_order].stack()\n\n# aggregate basis cat data for age and gender\ndata_q5q15 = data_21.groupby(['Q5', 'Q15']).size().reset_index(name='count').rename(\n    columns={\n        'Q5': 'Role', \n        'Q15': 'ML_experience', \n    }).set_index('Role')\n\n# data_q5q15_man = pd.pivot_table(data_21[data_21['Q2']=='Man'], values='count', index=['Q5'], \n#                                 columns=['Q15'], aggfunc=np.sum).fillna(0).astype(int).loc[q5_order, q15_order].stack()\n\ndata_q5q15_man = data_21[data_21['Q2']=='Man'].groupby(['Q5', 'Q15']).size().reset_index(name='count').rename(\n    columns={\n        'Q5': 'Role', \n        'Q15': 'ML_experience', \n    }).set_index('Role')\n\n# data_q5q15_woman = pd.pivot_table(data_21[data_21['Q2']=='Woman'], values='count', index=['Q5'], \n#                                   columns=['Q15'], aggfunc=np.sum).fillna(0).astype(int).loc[q5_order, q15_order].stack()\n\n\ndata_q5q15_woman = data_21[data_21['Q2']=='Woman'].groupby(['Q5', 'Q15']).size().reset_index(name='count').rename(\n    columns={\n        'Q5': 'Role', \n        'Q15': 'ML_experience', \n    }).set_index('Role')\n\nfig = plt.figure(figsize=(20, 37), dpi=200)\n\ngs = fig.add_gridspec(5, 5)\n\n\n\nax_plot = fig.add_subplot(gs[1:4, 0:4]) \nfor q5_idx in q5_order[::-1]:\n    for q15_idx in q15_order:\n#         man = data_q5q15_man[q5_idx][q15_idx]\n\n        try:\n            man = data_q5q15_man[data_q5q15_man['ML_experience'] == q15_idx].loc[q5_idx,'count']\n        except KeyError:\n            man = 1\n#         woman = data_q5q15_woman[q5_idx][q15_idx]\n        try:\n            woman = data_q5q15_woman[data_q5q15_woman['ML_experience'] == q15_idx].loc[q5_idx,'count']\n        except KeyError:\n            woman = 1\n#         tot = data_q5q15[q5_idx][q15_idx]\n        try:\n            tot = data_q5q15[data_q5q15['ML_experience'] == q15_idx].loc[q5_idx,'count']\n        except KeyError:\n            tot = 1\n            \n#         print('man', man, 'woman', woman,'total', tot)\n        drawPieMarker([q15_idx],[q5_idx], [man\/(man+woman), woman\/(man+woman)] ,\n                      [tot*2.5], ['#0096af', '#ee417f'], ax=ax_plot)\n\n\n\n# Pos\nax_pos = fig.add_subplot(gs[0, :4], sharex=ax_plot) \ndata_q15_woman = data_21[data_21['Q2']=='Woman']['Q15'].value_counts()[q15_order]\nax_pos.bar(data_q15_woman.index, data_q15_woman, width=0.45, alpha=0.7, color='#ee417f')\n\ndata_q15_man = data_21[data_21['Q2']=='Man']['Q15'].value_counts()[q15_order]\nax_pos.bar(data_q15_man.index, data_q15_man, bottom=data_q15_woman , width=0.45, alpha=0.7, color='#0096af')\n\nplt.setp(ax_pos.get_xticklabels(), visible=False)\n\n\n# Exp\nax_exp = fig.add_subplot(gs[1:4, 4], sharey=ax_plot) \n\ndata_q5_woman = data_21[data_21['Q2']=='Woman']['Q5'].value_counts()[q5_order]\nax_exp.barh(data_q5_woman.index[::-1], data_q5_woman[::-1], height=0.55, alpha=0.7, color='#ee417f')\n\ndata_q5_man = data_21[data_21['Q2']=='Man']['Q5'].value_counts()[q5_order]\nax_exp.barh(data_q5_man.index[::-1], data_q5_man[::-1], left= data_q5_woman[::-1],height=0.55, alpha=0.7, color='#0096af')\n\nplt.setp(ax_exp.get_yticklabels(), visible=False)\n\n# Spines\nfor s in ['top', 'left', 'right', 'bottom']:\n    ax_plot.spines[s].set_visible(False)\n    ax_pos.spines[s].set_visible(False)\n    ax_exp.spines[s].set_visible(False)\n    \nax_plot.grid(linewidth=0.2, zorder=0)   \n# ax_plot.set_aspect('equal')\nq5_order.reverse()\nax_plot.set_yticklabels(q5_order,  fontsize=15)\nax_plot.set_xticklabels(q15_order, fontsize=15, rotation=90)\n\nplt.title('Gender - Job Role - ML Experience', fontweight='bold', fontsize=25, color='#1b293f', y=1.3,x=0) \n# fig.text(0.8, 0.88, 'Stacked Bar Chart + Categorical Bubble Pie Chart', fontweight='light', fontfamily='serif', \n#          fontsize=20, ha='right')\n# plt.tight_layout()\nplt.show()\n","47d86128":"# aggregate basis cat data for age and gender\nagg_data = data_21[1:].groupby(['Q2', 'Q4']).size().reset_index(name='respondent_count')\n\nagg_data = agg_data.rename(\n    columns={\n        'Q4': 'education', \n        'Q2': 'gender', \n    })\n# agg_data.groupby('gender').head()","ccad5aac":"#Country Age and Average Salary chart\n# sal_country=survey[survey['Q24'] !='No Data']\nsal_country=agg_data.copy()\nsal_country=sal_country.groupby(['gender', 'education']).agg('sum').reset_index()\n# sal_country=sal_country.round({'Salary': 1, 'Average Age': 1})\nfig = px.scatter(sal_country, x=\"education\", y=\"gender\", size=\"respondent_count\", color=\"gender\",\n                 color_continuous_scale='inferno',title='Kaggle 2021: Average Age and Salary by Country (hover for details)',\n           hover_name=\"gender\",  size_max=40)\nfor annotation in fig.layout.annotations:\n    annotation.text = annotation.text.split(\"=\")[1]\n    fig.update_xaxes(showticklabels=True)\n    fig.layout.showlegend = False\nfig.show()","c2d9becf":"# Q2 Analysis\ndata = data_21.copy()\ndata['Q2'] = data['Q2'].apply(lambda x : 'ETC' if x not in ['Man', 'Woman'] else x)\ndata_q1q2 = data[data['Q2'] != 'ETC'].groupby(['Q2'])['Q1'].value_counts().unstack().sort_index()\nman = data_q1q2.loc['Man']\nwoman = -data_q1q2.loc['Woman']\n\nfig, ax = plt.subplots(1,1, figsize=(15, 10))\nax.bar(man.index, man, width=0.55, color='#0096af', alpha=0.8, label='Male')\nax.bar(woman.index, woman, width=0.55, color='#ee417f', alpha=0.8, label='Female')\nax.set_ylim(-1500, 4100)\n\nfor i in man.index:\n    ax.annotate(f\"{man[i]}\", \n                   xy=(i, man[i] + 100),\n                   va = 'center', ha='center',fontweight='light',color='#4a4a4a')# fontfamily='serif',\n                   \n    \nfor i in woman.index:\n    ax.annotate(f\"{-woman[i]}\", \n                   xy=(i, woman[i] - 100),\n                   va = 'center', ha='center',fontweight='light', color='#4a4a4a') #, fontfamily='serif',\n                     \n\nfor s in ['top', 'left', 'right', 'bottom']:\n    ax.spines[s].set_visible(False)\n\nax.set_xticklabels(data_q1q2.columns,)# fontfamily='serif')\nax.set_yticks([])    \nax.legend()\nfig.text(0.16, 0.95, 'Age \/ Gender Distribution', fontsize=15)#, fontweight='bold', fontfamily='serif')    \nplt.show()","3cf37f1a":"# Q2 Analysis\ndata = data_21.copy()\ndata['Q2'] = data['Q2'].apply(lambda x : 'ETC' if x not in ['Man', 'Woman'] else x)\nq6_order = ['< 1 years', '1-3 years', '3-5 years', '5-10 years', '10-20 years',\n           '20+ years', 'I have never written code']\ndata_q6q2 = data[data['Q2'] != 'ETC'].groupby(['Q2'])['Q6'].value_counts().unstack().sort_index()[q6_order]\nman = data_q6q2.loc['Man']\nwoman = -data_q6q2.loc['Woman']\n\nfig, ax = plt.subplots(1,1, figsize=(15, 10))\nax.bar(man.index, man, width=0.55, color='#0096af', alpha=0.8, label='Male')\nax.bar(woman.index, woman, width=0.55, color='#ee417f', alpha=0.8, label='Female')\nax.set_ylim(-2000, 6500)\n\nfor i in man.index:\n    ax.annotate(f\"{man[i]}\", \n                   xy=(i, man[i] + 100),\n                   va = 'center', ha='center',fontweight='light',color='#4a4a4a')# fontfamily='serif',\n                   \n    \nfor i in woman.index:\n    ax.annotate(f\"{-woman[i]}\", \n                   xy=(i, woman[i] - 100),\n                   va = 'center', ha='center',fontweight='light',color='#4a4a4a')# fontfamily='serif',\n                  \n\nfor s in ['top', 'left', 'right', 'bottom']:\n    ax.spines[s].set_visible(False)\n\nax.set_xticklabels(data_q6q2.columns)#, fontfamily='serif')\nax.set_yticks([])    \nax.legend()\nfig.text(0.16, 0.95, 'Years of coding experience \/ Gender Distribution', fontsize=15,) \n#         fontweight='bold', fontfamily='serif')    \nplt.show()","89813dbb":"# col_24 = [col for col in data_21.columns if 'Q24' in col]\n# for c in col_24:\n#     print(data_21.loc[1:,c].value_counts())","143447cc":"q24_dictionary_of_counts_2021 = {\n    data_21['Q24_Part_1'][0].split('- ')[-1] : (data_21['Q24_Part_1'].count()-1),\n    data_21['Q24_Part_2'][0].split('- ')[-1] : (data_21['Q24_Part_2'].count()-1),\n    data_21['Q24_Part_3'][0].split('- ')[-1] : (data_21['Q24_Part_3'].count()-1),\n    data_21['Q24_Part_4'][0].split('- ')[-1] : (data_21['Q24_Part_4'].count()-1),\n    data_21['Q24_Part_5'][0].split('- ')[-1] : (data_21['Q24_Part_5'].count()-1),\n    data_21['Q24_Part_6'][0].split('- ')[-1] : (data_21['Q24_Part_6'].count()-1),\n    data_21['Q24_Part_7'][0].split('- ')[-1] : (data_21['Q24_Part_7'].count()-1),\n    data_21['Q24_OTHER'][0].split('- ')[-1] : (data_21['Q24_OTHER'].count()-1)\n}\n# q24_dictionary_of_counts_2021","0e8734dc":"colors = ['#004c6d', '#296080', '#437594', '#5d8ba9', '#75a1be', '#8eb8d3', '#a7cfe9', '#c1e7ff']\n# colors = ['#003f5c', '#2f4b7c', '#665191', '#a05195', '#d45087', '#f95d6a', '#ff7c43', '#ffa600']\n\nfig, ax = plt.subplots(1,1, figsize=(12, 6))\nq24_dictionary_of_counts_2021 = dict(sorted(q24_dictionary_of_counts_2021.items(), key=lambda item: item[1], reverse=True))\nax.bar(q24_dictionary_of_counts_2021.keys(), q24_dictionary_of_counts_2021.values(), width=0.55, \n       edgecolor='darkgray', color=colors,\n       linewidth=0.7)\n\nfor i in q24_dictionary_of_counts_2021.keys():\n    ax.annotate(f\"{q24_dictionary_of_counts_2021[i]}\", \n                   xy=(i, q24_dictionary_of_counts_2021[i] + 300),\n                   va = 'center', ha='center',fontweight='light', #fontfamily='serif',\n                   color='#4a4a4a')\n\n\nfor s in ['top', 'left', 'right']:\n    ax.spines[s].set_visible(False)\nlabels = ['Analyze data to influence product\/decisions', 'Build prototypes to apply ML to new areas',\n'Build the data infrastructure for data',\n'Experimentation to improve existing ML models', 'Build ML service that to improve product or workflows',\n'Do research that advances the SOA of ML', 'None of these activities', 'Other']\n\nax.set_xticklabels(labels, rotation=80) #fontfamily='serif',)\nplt.title('Activities that make up an important part of your role at work', fontsize=15,)# fontweight='bold', fontfamily='serif')    \nax.grid(axis='y', linestyle='-', alpha=0.4)    \nplt.show()","6e4b86f2":"q27_A_dictionary_of_counts_2021 = {\n    data_21['Q27_A_Part_1'][0].split('- ')[-1].split('(')[-1].replace(')','') : (data_21['Q27_A_Part_1'].count()),\n    data_21['Q27_A_Part_2'][0].split('- ')[-1] : (data_21['Q27_A_Part_2'].count()),\n    data_21['Q27_A_Part_3'][0].split('- ')[-1].split('(')[-1].replace(')','') : (data_21['Q27_A_Part_3'].count()),\n    data_21['Q27_A_Part_4'][0].split('- ')[-1] : (data_21['Q27_A_Part_4'].count()),\n    data_21['Q27_A_Part_5'][0].split('- ')[-1] : (data_21['Q27_A_Part_5'].count()),\n    data_21['Q27_A_Part_6'][0].split('- ')[-1] : (data_21['Q27_A_Part_6'].count()),\n    data_21['Q27_A_Part_7'][0].split('- ')[-1] : (data_21['Q27_A_Part_7'].count()),\n    data_21['Q27_A_Part_8'][0].split('- ')[-1] : (data_21['Q27_A_Part_8'].count()),\n    data_21['Q27_A_Part_9'][0].split('- ')[-1] : (data_21['Q27_A_Part_9'].count()),\n    data_21['Q27_A_Part_10'][0].split('- ')[-1] : (data_21['Q27_A_Part_10'].count()),\n    data_21['Q27_A_Part_11'][0].split('- ')[-1] : (data_21['Q27_A_Part_11'].count()),\n    data_21['Q27_A_OTHER'][0].split('- ')[-1] : (data_21['Q27_A_OTHER'].count())\n}\n# q27_A_dictionary_of_counts_2021","353da404":"im = Image.open('..\/input\/cloud-icon\/mask-removebg-preview.jpg')\nimg = np.array(im)\n\nwc = WordCloud(width=img.shape[1],\n               height=img.shape[0], random_state=42, background_color='white', # font_path=font_path\n               collocations=False, colormap=\"Dark2\", mask=img,\n               contour_width=3, contour_color='steelblue')\n\nwc.generate_from_frequencies(q27_A_dictionary_of_counts_2021)\nplt.figure(dpi=500)\nplt.imshow(wc, interpolation='bilinear') \nplt.axis(\"off\")\nplt.tight_layout()  \nplt.show()","5df46bbd":"## Which activities are an important part of job?","10f3e77a":"## How many people aged below 50 are attented among the top 10 countries?","f5e7f265":"## Which cloud computing platforms is used on a regular basis?","0681a2f1":"## Their machine learning experience","d496a430":"## What are the 10 countries with the most respondents?","36eef3aa":"## Read countries longitude and latitude","2fb15ecd":"## Their coding experience","c3d3a130":"## Which machine learning algorithms are used frequently? ","c2cd03c8":"## What is the highest level of education that the respondents have attained or plan to attain within the next 2 years based on their gender?","3878016f":"## Check the data","bc2991e3":"I learned a lot from these notebooks:\n\n* https:\/\/www.kaggle.com\/paultimothymooney\/2021-survey-job-title-data-scientist\/notebook\n* https:\/\/www.kaggle.com\/ruchi798\/kaggle-ml-ds-survey-analysis\/notebook\n* https:\/\/www.kaggle.com\/paultimothymooney\/2021-kaggle-data-science-machine-learning-survey\/notebook\n* https:\/\/www.kaggle.com\/subinium\/kaggle-2020-visualization-analysis\/notebook","2493d9a8":"## How many years have the respondents used machine learning methods based on their job role?"}}