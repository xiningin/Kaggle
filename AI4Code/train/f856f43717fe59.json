{"cell_type":{"b74cfc02":"code","2a6e5593":"code","128ddf5b":"code","dd6a58e6":"code","d46d8892":"code","b1824fce":"code","977e8878":"code","baed06fc":"code","1c639a1a":"code","68d57b9e":"code","d36b71f9":"code","204cfcd2":"code","f5fe1fb1":"code","5d1c46d0":"code","7b6edbeb":"code","aa423789":"code","66022754":"code","7f96d9b3":"code","c347ab70":"code","f1c8dd6c":"code","d4a8219a":"code","bd38a8a5":"code","5020b600":"code","e5b3981f":"code","3126f10d":"code","0c6a49f4":"code","c36b61cb":"code","037a1bd6":"code","5bb7ca54":"code","6d054caf":"code","7dfc6039":"code","4375770e":"code","f5a474bb":"code","e439ad57":"code","416f5217":"code","374e84cc":"markdown","636906eb":"markdown","201ff261":"markdown","d9376446":"markdown","f0cb5550":"markdown","03cc852a":"markdown","727deab1":"markdown","b8d702b5":"markdown","ba8abb8f":"markdown","491e5485":"markdown","1f18cfc1":"markdown","a39b7533":"markdown","2106127b":"markdown","95e48892":"markdown","07406e11":"markdown","87d74bf3":"markdown","e26cb34a":"markdown","d96e609c":"markdown","879fe96e":"markdown","82f657a6":"markdown"},"source":{"b74cfc02":"#verisetimiz json dosyas\u0131 oldu\u011fu i\u00e7in json mod\u00fcl\u00fcn\u00fc dahil edelim\nimport json\n#verisetimizi d\u00fczg\u00fcnce g\u00f6r\u00fcnt\u00fclemek ve \u00fczerinde i\u015flem yapabilmek ad\u0131na pandas mod\u00fcl\u00fcn\u00fc dahil ediyoruz\nimport pandas as pd\n#matematiksel i\u015flemler i\u00e7in numpy mod\u00fcl\u00fcn\u00fc dahil ediyoruz\nimport numpy as np\n\n#verisetimizi a\u00e7al\u0131m\nwith open(\"..\/input\/thecodingtrainmovies\/movies.json\") as f:\n    data = json.load(f)\n#verisetimizin users s\u00f6zl\u00fc\u011f\u00fcn\u00fc movieRating de\u011fi\u015fkenine dataframe olarak atayal\u0131m\nmovieRating = pd.DataFrame(data[\"users\"])\nmovieRating","2a6e5593":"movieRating.info()","128ddf5b":"movieRating.describe().T","dd6a58e6":"movieRating.isnull().sum()","d46d8892":"# bo\u015f de\u011ferlere o de\u011fi\u015fkenin ortalamas\u0131n\u0131 veriyoruz\nmovieRating[\"Holiday\"].fillna(int(movieRating.Holiday.mean()), inplace = True)\nmovieRating","b1824fce":"movieRating.isnull().sum()","977e8878":"movieRating[\"IV\"].value_counts()","baed06fc":"movieRating.plot.hist()","1c639a1a":"movieRating.plot.box()","68d57b9e":"#k\u0131yaslanacak birinci ki\u015fi\nuser1 = 3\n#k\u0131yaslanacak ikinci ki\u015fi\nuser2 = 100\n#karelerin birle\u015fimi s\u0131f\u0131r atand\u0131\nsumSquares = 0\n#movieRating i\u00e7erisinde ki her de\u011fi\u015fken i\u00e7in d\u00f6n\nfor item in movieRating:\n    #e\u011fer de\u011fi\u015fken timestamp ve name de\u011filse \u00e7al\u0131\u015f\n    if item != \"timestamp\" and item !=\"name\":\n        #user1 ratingini user1Degeri i\u00e7ine ata\n        user1Degeri = movieRating.iloc[user1][item]\n        #user2 ratingini user2Degeri i\u00e7ine ata\n        user2Degeri = movieRating.iloc[user2][item]\n        #k\u0131yaslanacak de\u011ferlerin fark\u0131n\u0131 hesapl\u0131yoruz\n        diff = user1Degeri-user2Degeri\n        sumSquares +=diff*diff\ndistance = np.sqrt(sumSquares)\nsimilarity = 1 \/ (1+distance)#Buraya aktivasyon fonksiyonu diyebiliriz\nprint(similarity) ","d36b71f9":"from scipy.spatial import distance","204cfcd2":"1\/(1+distance.euclidean(movieRating.iloc[3][[item for item in movieRating if item != \"timestamp\" and item !=\"name\"]],\n                        movieRating.iloc[100][[item for item in movieRating if item != \"timestamp\" and item !=\"name\"]]))","f5fe1fb1":"#k de\u011feri 5 olarak atan\u0131yor\nk=5\n#skorlar isimli bo\u015f bir liste olu\u015fturuluyor\nskorlar = []\n#movieRating sat\u0131rlar\u0131 boyunca d\u00f6n\u00fcyoruz ve her kullan\u0131c\u0131y\u0131 3 indexli kullan\u0131c\u0131yla kar\u015f\u0131la\u015ft\u0131r\u0131yoruz\nfor index in range(102):\n    #kar\u015f\u0131la\u015ft\u0131rd\u0131\u011f\u0131m\u0131z her kullan\u0131c\u0131n\u0131n skor de\u011ferini s\u0131rayla skorlara ekliyoruz\n    skorlar.append(1\/(1+distance.euclidean(movieRating.iloc[3][[item for item in movieRating if item != \"timestamp\" and item !=\"name\"]],\n                                           movieRating.iloc[index][[item for item in movieRating if item != \"timestamp\" and item !=\"name\"]])))\n#skorlar\u0131 pandas serisine d\u00f6n\u00fc\u015ft\u00fcr\u00fcyoruz\nskorlar = pd.Series(skorlar)\nskorlar","5d1c46d0":"#skorlar\u0131n indexlerini skor de\u011ferine g\u00f6re s\u0131ral\u0131yoruz\nskorlar = skorlar.sort_values(ascending=False)\nskorlar","7b6edbeb":"#movieRatingi skorlar\u0131n d\u00fczenlenmi\u015f indexine g\u00f6re s\u0131ral\u0131yoruz\nmovieRating = movieRating.reindex(index=skorlar.index)\nmovieRating","aa423789":"movieRating.head(k)","66022754":"tester = pd.DataFrame([{\n    \"IV\":4,\n    \"V\":5,\n    \"VI\":3,\n    \"I\":1,\n    \"II\":1,\n    \"III\":2,\n    \"VII\":4,\n    \"Rogue1\":0,\n    \"Holiday\":0\n}])\ntester","7f96d9b3":"movieRating = pd.DataFrame(data[\"users\"])\nmovieRating[\"Holiday\"].fillna(0, inplace = True)\nmovieRating","c347ab70":"movieRating.iloc[0][\"Holiday\"] == 0","f1c8dd6c":"K = 5\nskorlar = []\n#k\u0131yaslanacak birinci ki\u015fi\nuser1 = 3\n#k\u0131yaslanacak ikinci ki\u015fi\n#karelerin birle\u015fimi s\u0131f\u0131r atand\u0131\nsumSquares = 0\n#movieRating i\u00e7erisinde ki her de\u011fi\u015fken i\u00e7in d\u00f6n\nfor other in range(103):\n    for item in tester:\n        #e\u011fer de\u011fi\u015fken timestamp ve name de\u011filse \u00e7al\u0131\u015f\n        if tester.iloc[0][item] != 0 or movieRating.iloc[other][item] != 0:\n            #user1 ratingini user1Degeri i\u00e7ine ata\n            user1Degeri = tester.iloc[0][item]\n            #user2 ratingini user2Degeri i\u00e7ine ata\n            user2Degeri = movieRating.iloc[other][item]\n            #k\u0131yaslanacak de\u011ferlerin fark\u0131n\u0131 hesapl\u0131yoruz\n            diff = user1Degeri-user2Degeri\n            sumSquares +=diff*diff    \n    distance = np.sqrt(sumSquares)\n    similarity = 1 \/ (1+distance)#Buraya aktivasyon fonksiyonu diyebiliriz\n    skorlar.append(similarity) \n    sumSquares = 0\nskorlar","d4a8219a":"skorlar = pd.Series(skorlar)\nskorlar = skorlar.sort_values(ascending=False)\nmovieRating = movieRating.reindex(index=skorlar.index)\nmovieRating","bd38a8a5":"movieRating.head(k).mean()","5020b600":"#tester i\u00e7erisinde ki her de\u011fi\u015fken i\u00e7in\nfor item in tester:\n    #e\u011fer de\u011fi\u015fken s\u0131f\u0131ra e\u015fitse\n    if tester.iloc[0][item] ==0:\n        #0 olan de\u011fi\u015fkeni en benzer 5 de\u011fi\u015fkenin ortalamas\u0131n\u0131n yuvarlanm\u0131\u015f\u0131yla doldur\n        tester.iloc[0][item] = round(movieRating.head(k)[item].mean())\ntester","e5b3981f":"movieRating = pd.DataFrame(data[\"users\"])\nmovieRating[\"Holiday\"].fillna(0, inplace = True)\nK = 5\nskorlar = []\n#k\u0131yaslanacak birinci ki\u015fi\nuser1 = 3\n#k\u0131yaslanacak ikinci ki\u015fi\n#karelerin birle\u015fimi s\u0131f\u0131r atand\u0131\nsumSquares = 0\n#movieRating i\u00e7erisinde ki her de\u011fi\u015fken i\u00e7in d\u00f6n\nfor other in range(103):\n    for item in tester:\n        #e\u011fer de\u011fi\u015fken timestamp ve name de\u011filse \u00e7al\u0131\u015f\n        #user1 ratingini user1Degeri i\u00e7ine ata\n        user1Degeri = tester.iloc[0][item]\n        #user2 ratingini user2Degeri i\u00e7ine ata\n        user2Degeri = movieRating.iloc[other][item]\n        #k\u0131yaslanacak de\u011ferlerin fark\u0131n\u0131 hesapl\u0131yoruz\n        diff = user1Degeri-user2Degeri\n        sumSquares +=diff*diff    \n    distance = np.sqrt(sumSquares)\n    similarity = 1 \/ (1+distance)#Buraya aktivasyon fonksiyonu diyebiliriz\n    skorlar.append(similarity) \n    sumSquares = 0\nskorlar = pd.Series(skorlar)\nskorlar = skorlar.sort_values(ascending=False)\nmovieRating = movieRating.reindex(index=skorlar.index)\nmovieRating.head()","3126f10d":"movieRating.head(k).mean()","0c6a49f4":"#tester i\u00e7erisinde ki her de\u011fi\u015fken i\u00e7in\nfor item in tester:\n    #e\u011fer de\u011fi\u015fken s\u0131f\u0131ra e\u015fitse\n    if tester.iloc[0][item] ==0:\n        #0 olan de\u011fi\u015fkeni en benzer 5 de\u011fi\u015fkenin ortalamas\u0131n\u0131n yuvarlanm\u0131\u015f\u0131yla doldur\n        tester.iloc[0][item] = round(movieRating.head(k)[item].mean())\ntester","c36b61cb":"testerMax = pd.DataFrame([{\n    \"IV\":5,\n    \"V\":5,\n    \"VI\":5,\n    \"I\":5,\n    \"II\":5,\n    \"III\":5,\n    \"VII\":5,\n    \"Rogue1\":5,\n    \"Holiday\":5\n}])\ntester1 = pd.DataFrame([{\n    \"IV\":5,\n    \"V\":5,\n    \"VI\":5,\n    \"I\":5,\n    \"II\":5,\n    \"III\":5,\n    \"VII\":5,\n    \"Rogue1\":4,\n    \"Holiday\":5\n}])\ntester2 = pd.DataFrame([{\n    \"IV\":5,\n    \"V\":5,\n    \"VI\":5,\n    \"I\":5,\n    \"II\":5,\n    \"III\":5,\n    \"VII\":5,\n    \"Rogue1\":5,\n    \"Holiday\":4\n}])\ntester3 = pd.DataFrame([{\n    \"IV\":4,\n    \"V\":4,\n    \"VI\":4,\n    \"I\":4,\n    \"II\":4,\n    \"III\":4,\n    \"VII\":4,\n    \"Rogue1\":4,\n    \"Holiday\":3\n}])","037a1bd6":"from scipy.spatial import distance","5bb7ca54":"#tester1 vs testerMax\nprint(\"Euclidean Distance: \",1\/(1+distance.euclidean(tester1.iloc[0][[item for item in tester1]],testerMax.iloc[0][[item for item in testerMax]])))\nprint(\"Cosine Distance: \",1\/(1+distance.cosine(tester1.iloc[0][[item for item in tester1]],testerMax.iloc[0][[item for item in testerMax]])))\nprint(\"Minkowski Distance: \",1\/(1+distance.minkowski(tester1.iloc[0][[item for item in tester1]],testerMax.iloc[0][[item for item in testerMax]])))\nprint(\"Braycurtis Distance: \",1\/(1+distance.braycurtis(tester1.iloc[0][[item for item in tester1]],testerMax.iloc[0][[item for item in testerMax]])))\nprint(\"Canberra Distance: \",1\/(1+distance.canberra(tester1.iloc[0][[item for item in tester1]],testerMax.iloc[0][[item for item in testerMax]])))\nprint(\"Chebyshev Distance: \",1\/(1+distance.chebyshev(tester1.iloc[0][[item for item in tester1]],testerMax.iloc[0][[item for item in testerMax]])))\nprint(\"Hamming Distance: \",1\/(1+distance.hamming(tester1.iloc[0][[item for item in tester1]],testerMax.iloc[0][[item for item in testerMax]])))\nprint(\"Dice Distance: \",1\/(1+distance.dice(tester1.iloc[0][[item for item in tester1]],testerMax.iloc[0][[item for item in testerMax]])))\nprint(\"Jaccard Distance: \",1\/(1+distance.jaccard(tester1.iloc[0][[item for item in tester1]],testerMax.iloc[0][[item for item in testerMax]])))\nprint(\"Jensenshannon Distance: \",1\/(1+distance.jensenshannon(tester1.iloc[0][[item for item in tester1]],testerMax.iloc[0][[item for item in testerMax]])))\nprint(\"Kulsinski Distance: \",1\/(1+distance.kulsinski(tester1.iloc[0][[item for item in tester1]],testerMax.iloc[0][[item for item in testerMax]])))\nprint(\"Russellrao Distance: \",1\/(1+distance.russellrao(tester1.iloc[0][[item for item in tester1]],testerMax.iloc[0][[item for item in testerMax]])))","6d054caf":"#tester2 vs testerMax\nprint(\"Euclidean Distance: \",1\/(1+distance.euclidean(tester2.iloc[0][[item for item in tester2]],testerMax.iloc[0][[item for item in testerMax]])))\nprint(\"Cosine Distance: \",1\/(1+distance.cosine(tester2.iloc[0][[item for item in tester2]],testerMax.iloc[0][[item for item in testerMax]])))\nprint(\"Minkowski Distance: \",1\/(1+distance.minkowski(tester2.iloc[0][[item for item in tester2]],testerMax.iloc[0][[item for item in testerMax]])))\nprint(\"Braycurtis Distance: \",1\/(1+distance.braycurtis(tester2.iloc[0][[item for item in tester2]],testerMax.iloc[0][[item for item in testerMax]])))\nprint(\"Canberra Distance: \",1\/(1+distance.canberra(tester2.iloc[0][[item for item in tester2]],testerMax.iloc[0][[item for item in testerMax]])))\nprint(\"Chebyshev Distance: \",1\/(1+distance.chebyshev(tester2.iloc[0][[item for item in tester2]],testerMax.iloc[0][[item for item in testerMax]])))\nprint(\"Hamming Distance: \",1\/(1+distance.hamming(tester2.iloc[0][[item for item in tester2]],testerMax.iloc[0][[item for item in testerMax]])))\nprint(\"Dice Distance: \",1\/(1+distance.dice(tester2.iloc[0][[item for item in tester2]],testerMax.iloc[0][[item for item in testerMax]])))\nprint(\"Jaccard Distance: \",1\/(1+distance.jaccard(tester2.iloc[0][[item for item in tester2]],testerMax.iloc[0][[item for item in testerMax]])))\nprint(\"Jensenshannon Distance: \",1\/(1+distance.jensenshannon(tester2.iloc[0][[item for item in tester2]],testerMax.iloc[0][[item for item in testerMax]])))\nprint(\"Kulsinski Distance: \",1\/(1+distance.kulsinski(tester2.iloc[0][[item for item in tester2]],testerMax.iloc[0][[item for item in testerMax]])))\nprint(\"Russellrao Distance: \",1\/(1+distance.russellrao(tester2.iloc[0][[item for item in tester2]],testerMax.iloc[0][[item for item in testerMax]])))","7dfc6039":"#tester3 vs testerMax\nprint(\"Euclidean Distance: \",1\/(1+distance.euclidean(tester3.iloc[0][[item for item in tester3]],testerMax.iloc[0][[item for item in testerMax]])))\nprint(\"Cosine Distance: \",1\/(1+distance.cosine(tester3.iloc[0][[item for item in tester3]],testerMax.iloc[0][[item for item in testerMax]])))\nprint(\"Minkowski Distance: \",1\/(1+distance.minkowski(tester3.iloc[0][[item for item in tester3]],testerMax.iloc[0][[item for item in testerMax]])))\nprint(\"Braycurtis Distance: \",1\/(1+distance.braycurtis(tester3.iloc[0][[item for item in tester3]],testerMax.iloc[0][[item for item in testerMax]])))\nprint(\"Canberra Distance: \",1\/(1+distance.canberra(tester3.iloc[0][[item for item in tester3]],testerMax.iloc[0][[item for item in testerMax]])))\nprint(\"Chebyshev Distance: \",1\/(1+distance.chebyshev(tester3.iloc[0][[item for item in tester3]],testerMax.iloc[0][[item for item in testerMax]])))\nprint(\"Hamming Distance: \",1\/(1+distance.hamming(tester3.iloc[0][[item for item in tester3]],testerMax.iloc[0][[item for item in testerMax]])))\nprint(\"Dice Distance: \",1\/(1+distance.dice(tester3.iloc[0][[item for item in tester3]],testerMax.iloc[0][[item for item in testerMax]])))\nprint(\"Jaccard Distance: \",1\/(1+distance.jaccard(tester3.iloc[0][[item for item in tester3]],testerMax.iloc[0][[item for item in testerMax]])))\nprint(\"Jensenshannon Distance: \",1\/(1+distance.jensenshannon(tester3.iloc[0][[item for item in tester3]],testerMax.iloc[0][[item for item in testerMax]])))\nprint(\"Kulsinski Distance: \",1\/(1+distance.kulsinski(tester3.iloc[0][[item for item in tester3]],testerMax.iloc[0][[item for item in testerMax]])))\nprint(\"Russellrao Distance: \",1\/(1+distance.russellrao(tester3.iloc[0][[item for item in tester3]],testerMax.iloc[0][[item for item in testerMax]])))","4375770e":"movieRating = pd.DataFrame(data[\"users\"])\nmovieRating = movieRating.drop([\"timestamp\",\"name\"], axis=1)\nmovieRating[\"Holiday\"].fillna(0, inplace = True)\nmovieRating.head()\nfrom sklearn.neighbors import NearestNeighbors\n\nmodel_knn = NearestNeighbors(metric = 'euclidean', algorithm = 'brute')\nmodel_knn.fit(movieRating)\nskor, index = model_knn.kneighbors([movieRating.iloc[3,:]])\nprint(\"skor: \", skor, \"\\nindex: \", index)\nknn = {}\nfor indis in index:\n    knn = movieRating.iloc[indis,:]\nknn","f5a474bb":"movieRating = pd.DataFrame(data[\"users\"])\nmovieRating = movieRating.drop([\"timestamp\",\"name\"], axis=1)\nmovieRating[\"Holiday\"].fillna(0, inplace = True)","e439ad57":"#Euclidean\nfrom sklearn.neighbors import NearestNeighbors\n\nmodel_knn = NearestNeighbors(metric = 'euclidean', algorithm = 'brute')\nmodel_knn.fit(movieRating)\n\nskor, index = model_knn.kneighbors([movieRating.iloc[1,:]])\n\nknn = {}\nfor indis in index:\n    knn = movieRating.iloc[indis,:]\nknn","416f5217":"#Cosine\nfrom sklearn.neighbors import NearestNeighbors\n\nmodel_knn = NearestNeighbors(metric = 'cosine', algorithm = 'brute')\nmodel_knn.fit(movieRating)\n\nskor, index = model_knn.kneighbors([movieRating.iloc[1,:]])\n\nknn = {}\nfor indis in index:\n    knn = movieRating.iloc[indis,:]\nknn","374e84cc":"# \u00d6neri sistemi","636906eb":"\u015eimdi 3. index ve 100. index aras\u0131nda ki benzerli\u011fi i\u015fin matemati\u011fine inerek hesaplayal\u0131m, kullanaca\u011f\u0131m\u0131z metrik \"euclidean distance\" yani \"\u00f6klid uzakl\u0131\u011f\u0131\" metriki olacakt\u0131r.","201ff261":"# Ufak bir detay","d9376446":"\u015eimdi grafiklerle ve info, describe fonksiyonlar\u0131yla veri setimizi inceleyelim.","f0cb5550":"# Sklearn ile KNN","03cc852a":"Verisetimizde ki bo\u015f de\u011ferleri g\u00f6zlemleyelim","727deab1":"Bu projede \"Eucledian distance\" yani \"\u00f6klid uzakl\u0131\u011f\u0131\" kullan\u0131lm\u0131\u015ft\u0131r. ","b8d702b5":"# Benzerlik bulma","ba8abb8f":"# Verisetini y\u00fckleme ve g\u00f6zlemleme","491e5485":"# Euclidean vs Cosine","1f18cfc1":"# \u00d6neri sistemi 2\nBu denememizde ise de\u011feri 0 olan g\u00f6zlem de\u011fi\u015fken \u00e7aprazlar\u0131n\u0131 da i\u015fleme alal\u0131m, bu y\u00f6ntem biraz yan\u0131lt\u0131c\u0131 oluyor ama kullan\u0131m alanlar\u0131 olabilir.","a39b7533":"\u015eimdi de ayn\u0131 i\u015flemi scipy mod\u00fcl\u00fcn\u00fcn distance fonksiyonunu kullanarak yapal\u0131m.","2106127b":"# K - En Yak\u0131n Kom\u015fu\n\u015eimdi de k de\u011ferini atay\u0131p ilk 5 de\u011feri g\u00f6relim","95e48892":"KNN","07406e11":"[The Coding Train](https:\/\/www.youtube.com\/c\/TheCodingTrain) kanal\u0131n\u0131n haz\u0131rlad\u0131\u011f\u0131 [Session 3 - Intro to Machine Learning - Intelligence and Learning](https:\/\/www.youtube.com\/playlist?list=PLRqwX-V7Uu6bCN8LKrcMa6zF4FPtXyXYj) oynatma listesinde javascript kullan\u0131larak yap\u0131lm\u0131\u015f \u00f6rnekleri python kullanarak ger\u00e7ekle\u015ftirmek ve sizlerle payla\u015fmak istedim. Bu video serisinde Star Wars filmlerinin 103 ki\u015fi taraf\u0131ndan 5 \u00fczerinden oyland\u0131\u011f\u0131 bir veri seti kullan\u0131l\u0131yor ve bir film \u00f6neri sistemi geli\u015ftirilmeye \u00e7al\u0131\u015f\u0131l\u0131yor. Bende anlad\u0131klar\u0131m\u0131 elimden geldi\u011fince yazmaya \u00e7al\u0131\u015ft\u0131m. ","87d74bf3":"Bu sefer do\u011frudan distance.euclidean fonksiyonunu kullanmayaca\u011f\u0131z \u00e7\u00fcnk\u00fc bo\u015f de\u011ferleri atlamak istiyoruz ve bunu test ve egitim verisi aras\u0131nda paralel yani kar\u015f\u0131l\u0131kl\u0131 yapmak istiyoruz.","e26cb34a":"Yukar\u0131da yapt\u0131\u011f\u0131m\u0131z i\u015flemleri tekrarl\u0131yoruz.","d96e609c":"\u00d6ncelikler test verisi olu\u015ftural\u0131m.","879fe96e":"Veri setimizi ba\u015flang\u0131\u00e7 haline gettirip bu sefer bo\u015f de\u011ferleri s\u0131f\u0131rlarla doldural\u0131m, s\u0131f\u0131rlarla dolduraca\u011f\u0131z \u00e7\u00fcnk\u00fc hesap yaparken bo\u015f de\u011ferleri es ge\u00e7mek istiyoruz ve bunu bo\u015f de\u011ferlere 0 atayarak yapaca\u011f\u0131z.","82f657a6":"En benzer 5 de\u011ferin ortalamalar\u0131na bak\u0131yoruz."}}