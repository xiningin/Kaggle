{"cell_type":{"42d135a2":"code","0f274870":"code","83e74488":"code","39dc1d2e":"code","7eae8162":"code","a0f9be93":"code","393aa952":"markdown","488c43c7":"markdown"},"source":{"42d135a2":"import numpy as np\nimport pandas as pd\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# =================================\npd.set_option('display.max_columns', 500)\n\nimport pandas_profiling\nfrom sklearn.preprocessing import LabelEncoder\nimport xgboost as xgb\n\n## thanks to Thien for this code which was taken from https:\/\/www.kaggle.com\/suoires1\/fraud-detection-eda-and-modeling\n\ndef reduce_mem_usage(df, verbose=True):\n    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n    start_mem = df.memory_usage().sum() \/ 1024**2    \n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)    \n    end_mem = df.memory_usage().sum() \/ 1024**2\n    if verbose: print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'.format(end_mem, 100 * (start_mem - end_mem) \/ start_mem))\n    return df","0f274870":"%%time\ndata_dir = \"\/kaggle\/input\/ieee-fraud-detection\/\"\nfiles = [\"train_identity.csv\", \"train_transaction.csv\", \"test_identity.csv\", \"test_transaction.csv\"]\ndf_train_ident, df_train_trans, df_test_ident, df_test_trans = [\n    pd.read_csv(os.path.join(data_dir, f), index_col='TransactionID') for f in files]","83e74488":"%%time\n# join transactions with identities and validate no transaction is lost\ndf_train = df_train_trans.join(df_train_ident, how=\"left\")\nassert df_train_trans.shape[0] == df_train.shape[0]\n\ndf_test = df_test_trans.join(df_test_ident, how=\"left\")\nassert df_test_trans.shape[0] == df_test.shape[0]","39dc1d2e":"%%time\n# optimising memory\ndf_train=reduce_mem_usage(df_train)\ndf_test=reduce_mem_usage(df_test)\n","7eae8162":"# export it\ndf_train.to_pickle(\"train.pkl\")\ndf_test.to_pickle(\"test.pkl\")","a0f9be93":"for col in df_train.select_dtypes('object').columns:\n    no_new_cats = len(set(df_test[col].unique())-set(df_train[col].unique()))\n    if no_new_cats > 0:\n        print(f\"Column {col} has {no_new_cats} new categories in test set\")\n","393aa952":"## Data prep","488c43c7":"# Data Validations\n- do all categories in train exist in test?"}}