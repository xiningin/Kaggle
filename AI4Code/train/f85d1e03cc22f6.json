{"cell_type":{"6047c09e":"code","f74ab437":"code","a46bebca":"code","0e72c775":"code","6296e2d2":"code","0741107a":"code","eaf02c46":"code","69b0675d":"code","dcf5dca2":"code","7e121418":"code","737b13bd":"code","a78a01b0":"code","26ddf47b":"code","efa0c9b3":"code","0327d7ab":"code","2ec4d5b2":"code","955fc7f0":"code","49455c3f":"code","474bd18d":"code","3a0b7679":"code","c6a7c443":"code","b29f7b7f":"code","872ab1ba":"code","adb4ee3b":"code","a2cbc375":"code","8e82b893":"code","649e3697":"code","a69a9150":"code","6565f818":"code","41cc0365":"code","430e5d1a":"code","f37df2b5":"code","8bce6d4e":"code","ff7f8bbd":"code","1623a6e3":"code","e3b4e666":"code","0e9589e7":"code","d935563b":"code","95c7d4d5":"code","96707dbf":"code","c8b2315e":"code","15fc07ab":"code","84e9de87":"code","23212b8e":"code","b1296585":"code","cd7beb37":"code","c3cc1543":"code","eba6bd24":"code","fd26cc13":"code","3383050f":"code","a7c39827":"code","2719723a":"code","612e868b":"code","7760961a":"code","12dc9ce6":"code","0d655b95":"code","a4654224":"code","3af4aa22":"code","9db40a3d":"code","b55f48a5":"code","fe92f869":"code","aea36210":"code","eebee2a6":"code","1cdd8c65":"code","635b7e11":"code","20be6981":"code","0599d22d":"code","0763fe9c":"code","16cfeb24":"code","a2541c7d":"code","d72bf275":"code","9058c00c":"code","d178b535":"code","dfe65c9c":"code","5cd25011":"code","be5cb5da":"code","774b25a6":"code","e12708a0":"code","a28788a7":"code","1cb33a12":"code","6592e57e":"code","b530bd17":"code","7a9c147c":"code","73a68e79":"code","57cae45c":"code","b542cfe4":"markdown","8bd44369":"markdown","f8d07bf1":"markdown","033860dc":"markdown","a4a7f5d8":"markdown","fb217fa1":"markdown","e8f9c8ce":"markdown","722bc6dd":"markdown"},"source":{"6047c09e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","f74ab437":"import folium","a46bebca":"data=pd.read_csv(\"..\/input\/novel-corona-virus-2019-dataset\/2019_nCoV_data.csv\")","0e72c775":"data.head()","6296e2d2":"data['Province\/State'].isnull().sum()","0741107a":"data.Date.unique()","eaf02c46":"data=data.replace(to_replace =\"2020-01-02 23:00:00\", \n                 value =\"2020-02-01 23:00:00\")","69b0675d":"data.Date.unique()","dcf5dca2":"data.dtypes","7e121418":"data['Last Update']= pd.to_datetime(data['Last Update']) ","737b13bd":"#19-nCoV, 31 January 2020**\")\nfrom datetime import date\n","a78a01b0":"data_final=data[(data['Last Update'] >= '2020-2-2 00:00:00') & (data['Last Update'] < '2020-3-2 00:00:00')]","26ddf47b":"data_final=data_final.drop([\"Sno\"],axis=1)","efa0c9b3":"data_final=data_final.reset_index(drop=True)","0327d7ab":"data_final.head()","2ec4d5b2":"data.Country.unique()","955fc7f0":"data=data.replace(to_replace =\"China\", \n                 value =\"Mainland China\")","49455c3f":"data.Country.unique()","474bd18d":"print('Total Confirmed Cases:',data_final['Confirmed'].sum())\nprint('Total Deaths: ',data_final['Deaths'].sum())\nprint('Total Recovered Cases: ',data_final['Recovered'].sum())","3a0b7679":"data.dtypes","c6a7c443":"from datetime import date","b29f7b7f":"data_final.shape","872ab1ba":"#data_final=data_final.drop([\"Date\"],axis=1)","adb4ee3b":"countries=data_final.groupby([\"Country\"]).sum().reset_index()","a2cbc375":"countries","8e82b893":"countries.head()","649e3697":"top10_countries=countries.nlargest(10,['Confirmed']).reset_index(drop=True)","a69a9150":"top10_countries.head()","6565f818":"top10_countries.plot('Country',['Confirmed'],kind = 'bar',figsize=(20,30))","41cc0365":"data_china=data_final[data_final['Country']==\"Mainland China\"]","430e5d1a":"data_china.head()","f37df2b5":"data_china['Province\/State'].isnull().sum()","8bce6d4e":"data_china=data_china.groupby([\"Province\/State\"]).sum()","ff7f8bbd":"data_china.reset_index()","1623a6e3":"data_china10=data_china.nlargest(10,['Confirmed']).reset_index()","e3b4e666":"data_china10.head()","0e9589e7":"from matplotlib import pyplot as plt","d935563b":"#fig = plt.figure(figsize=(10,))\ndata_china10.plot('Province\/State',['Confirmed'],kind = 'bar',figsize=(20,10))\n","95c7d4d5":"\ndata_china10.plot('Province\/State',['Deaths'],kind = 'bar',figsize=(10,10))","96707dbf":"data.head()","c8b2315e":"data_trend=data[[\"Date\",\"Confirmed\",\"Deaths\",\"Recovered\"]]","15fc07ab":"data_trend.head()","84e9de87":"data_trend=data_trend.groupby([\"Date\"]).sum().reset_index()","23212b8e":"data_trend","b1296585":"trend=data[[\"Date\",\"Confirmed\",\"Deaths\",\"Recovered\"]]","cd7beb37":"trend.head()","c3cc1543":"trend=trend.groupby([\"Date\"]).sum().reset_index()","eba6bd24":"trend.plot('Date',['Confirmed'],figsize=(10,10))","fd26cc13":"trend.plot('Date',['Deaths'],figsize=(10,10))","3383050f":"trend.plot('Date',['Recovered'],figsize=(10,10))","a7c39827":"import pandas as pd\nimport datetime\nimport folium\nfrom folium.map import *\nfrom folium import plugins\nfrom folium.plugins import MeasureControl\nfrom folium.plugins import FloatImage","2719723a":"data.head()","612e868b":"Nonconfirmed_cases=data.loc[data['Confirmed']==0.0] ","7760961a":"len(Nonconfirmed_cases)","12dc9ce6":"Nonconfirmed_cases","0d655b95":"data.head()","a4654224":"data1=data[['Date','Country','Confirmed','Deaths','Recovered']]","3af4aa22":"data1.head()","9db40a3d":"data1.dtypes","b55f48a5":"data1['Date']= pd.to_datetime(data1['Date']) ","fe92f869":"data1.head(10)","aea36210":"data1=data1.groupby([\"Date\"]).sum().reset_index()","eebee2a6":"data1","1cdd8c65":"data1.plot('Date',['Confirmed'],figsize=(10,10))","635b7e11":"data1=data1.drop(['Deaths','Recovered'],axis=1)","20be6981":"data1","0599d22d":"data1.set_index('Date',inplace=True)\n","0763fe9c":"data1=data1.diff()","16cfeb24":"data1=data1.fillna(555)\ndata1.reset_index(inplace=True)","a2541c7d":"data1","d72bf275":"data1.columns = ['ds', 'y']\ndata1","9058c00c":"from fbprophet import Prophet\n","d178b535":"m = Prophet()\nm.fit(data1)\nfuture = m.make_future_dataframe(periods=15)\nforecast = m.predict(future)\nforecast","dfe65c9c":"print('RMSE: %f' % np.sqrt(np.mean((forecast.loc[:1682, 'yhat']-data1['y'])**2)) )","5cd25011":"future.tail()","be5cb5da":"forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()\nforecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].head()","774b25a6":"forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()","e12708a0":"m.plot(forecast,\n              uncertainty=True)","a28788a7":"m.plot_components(forecast)","1cb33a12":"d1=forecast[['ds','yhat']]","6592e57e":"d1.head()","b530bd17":"d1['total predicted cases']=d1['yhat'].cumsum()","7a9c147c":"d1=d1.drop(['yhat'],axis=1)","73a68e79":"d1.head()","57cae45c":"d1.plot('ds',['total predicted cases'],figsize=(10,10))","b542cfe4":"There are around 19 cases with no confirmation\n","8bd44369":"144 records dont have state\/province information\n","f8d07bf1":"Mainland China has maximum confirmed cases of 17220 as of 2nd Feb ,India has 2.0","033860dc":"Please give any suggestion if you think I could have done differently\n","a4a7f5d8":"#Hubei has maximum number of cases\n","fb217fa1":"My model is predicting for next 15 days if the condition remains similar and virus is not contained by any means****","e8f9c8ce":"**It shows that the number of confirmed cases will go above 90000 if no measure are taken for containing virus infection **","722bc6dd":"I am going to use FB Prophet for this predition"}}