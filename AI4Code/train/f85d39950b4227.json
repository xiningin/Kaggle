{"cell_type":{"d1c38632":"code","b4bb6d21":"code","b2e18a75":"code","b9e32626":"code","dc61b384":"code","99ed8716":"code","9119261c":"code","1067b675":"code","b363a074":"code","ff8bc234":"code","84bee155":"code","27dcf531":"code","1d1ec1c8":"code","44b7d424":"code","856f413d":"code","561d30c4":"code","0c4e55cb":"code","0a6a0d61":"code","9f3d5006":"code","5ca78077":"code","eae00eb7":"code","7c586f9b":"code","5b285971":"code","9c87cc75":"code","118f66ac":"code","1d61311f":"code","a5f0e2d4":"code","182fc910":"code","d75e4611":"markdown","35414405":"markdown","0e670396":"markdown","d61ea2c2":"markdown","7dd08906":"markdown","8098cfa7":"markdown","95f301f9":"markdown","cb02f985":"markdown"},"source":{"d1c38632":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n%matplotlib inline","b4bb6d21":"# Read in Train Data\ntrain = pd.read_csv(\"..\/input\/santander-customer-transaction-prediction\/train.csv\")","b2e18a75":"# Read in Test Data\ntest = pd.read_csv(\"..\/input\/santander-customer-transaction-prediction\/test.csv\")","b9e32626":"# Number of rows and columns of training and test data\ntrain.shape, test.shape","dc61b384":"# from sklearn.model_selection import train_test_split\n# from sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import roc_curve, auc\nfrom sklearn.model_selection import cross_val_score","99ed8716":"# Standardize the training dataset\nfrom sklearn.preprocessing import StandardScaler\nstandardized_train = StandardScaler().fit_transform(train.set_index(['ID_code','target']))","9119261c":"standardized_train = pd.DataFrame(standardized_train, columns=train.set_index(['ID_code','target']).columns)\nstandardized_train = standardized_train.join(train[['ID_code','target']])","1067b675":"# Standardize the test data as well\nstandardized_test = StandardScaler().fit_transform(test.set_index(['ID_code']))\nstandardized_test = pd.DataFrame(standardized_test, columns=test.set_index(['ID_code']).columns)\nstandardized_test = standardized_test.join(test[['ID_code']])","b363a074":"# Split Train Dataset into Predictor variables Matrix and Target variable Matrix\nX_train = standardized_train.set_index(['ID_code','target']).values.astype('float64')\ny_train = standardized_train['target'].values","ff8bc234":"from sklearn.naive_bayes import GaussianNB\nnb_clf = GaussianNB()\nnb_clf.fit(X_train, y_train)","84bee155":"plt.figure(figsize=(6, 6))\nfpr, tpr, thr = roc_curve(y_train, nb_clf.predict_proba(X_train)[:,1])\nplt.plot(fpr, tpr)\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver Operator Characteristic Plot', fontsize=20, y=1.05)\nauc(fpr, tpr)","27dcf531":"cross_val_score(nb_clf, X_train, y_train, scoring='roc_auc', cv=10).mean()","1d1ec1c8":"from sklearn.ensemble import RandomForestClassifier\nrf_clf = RandomForestClassifier(random_state=42).fit(X_train,y_train)","44b7d424":"plt.figure(figsize=(6, 6))\nfpr, tpr, thr = roc_curve(y_train, rf_clf.predict_proba(X_train)[:,1])\nplt.plot(fpr, tpr)\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver Operator Characteristic Plot', fontsize=20, y=1.05)\nauc(fpr, tpr)","856f413d":"cross_val_score(rf_clf, X_train, y_train, scoring='roc_auc', cv=10).mean()","561d30c4":"X_test = standardized_test.set_index('ID_code').values.astype('float64')\nsubmission = pd.read_csv('..\/input\/santander-customer-transaction-prediction\/sample_submission.csv')\n\nnb_pred = nb_clf.predict_proba(X_test)[:,1]\nrf_pred = rf_clf.predict_proba(X_test)[:,1]","0c4e55cb":"submission = \\\nsubmission.join(pd.DataFrame(nb_pred, columns=['target1'])).join(pd.DataFrame(rf_pred, columns=['target2']))","0a6a0d61":"submission['target'] = (submission.target1 + submission.target2) \/ 2","9f3d5006":"del submission['target1']\ndel submission['target2']","5ca78077":"submission.head()","eae00eb7":"submission.to_csv('nb_rf_mean_ensemble.csv', index=False)","7c586f9b":"submission = submission.rename(columns={'target':'nb_rf_mean_target'})\n\nlogit_lda_qda_mean_ensemble = \\\npd.read_csv('..\/input\/logit-lda-qda-mean-ensemblecsv\/logit_lda_qda_mean_ensemble.csv').drop('ID_code', axis=1)\n\nsubmission = submission.join(logit_lda_qda_mean_ensemble)","5b285971":"submission.head()","9c87cc75":"submission['final_target'] = (submission.nb_rf_mean_target * 2 + submission.target * 3) \/ 2","118f66ac":"submission = submission.rename(columns={'final_target':'target'})","1d61311f":"submission.head()","a5f0e2d4":"submission = submission.iloc[:,[0,3]]","182fc910":"submission.to_csv('logit_lda_qda_nb_rf_mean_ensemble.csv', index=False)","d75e4611":"Naive Bayes algorithm is part of the family of simple \"probabilistic classifiers\" based on applying Bayes' theorem with strong (naive) independence assumptions between the features. Since we found during EDA (refer to my other kernel!!! https:\/\/www.kaggle.com\/juminator\/pca-lr-lda-qda-simple-ensemble\/notebook ) that the features are very little correlated with one another, naive bayes might be a good choice!","35414405":"### Simple Average Ensemble Model with LG, LDA, QDA, NB, RF","0e670396":"# **Simple Average Ensemble Models**","d61ea2c2":"# **Random Forest Classifier**","7dd08906":"Random Forest works well with various kinds of data and is less prone to overfitting compared to normal Decision Tree or ExtraTree Classifiers!","8098cfa7":"### Simple Average Ensemble Model with NB and RF","95f301f9":"# **Naive Bayes**","cb02f985":"# **Standardize and Split dataset**"}}