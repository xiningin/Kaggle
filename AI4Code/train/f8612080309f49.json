{"cell_type":{"85ea42f9":"code","b0e62aa3":"code","a1932437":"code","dcd1bb1a":"code","b4427bf2":"code","27db3d39":"code","6060f966":"code","3d2af62b":"code","954f9f96":"code","540f5d37":"code","4876f04e":"code","1c58563e":"code","8b16981d":"markdown","43ac4f76":"markdown","888ae6d2":"markdown","f1c2e96f":"markdown","fa2056d5":"markdown","852bb369":"markdown","d061430f":"markdown","2b9743a5":"markdown","21af748b":"markdown","3aac22f4":"markdown","6ec402d5":"markdown"},"source":{"85ea42f9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nsns.set()\n%matplotlib inline\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n        \ndata_train = pd.read_csv(\"..\/input\/commonlitreadabilityprize\/train.csv\")\ndata_test = pd.read_csv(\"..\/input\/commonlitreadabilityprize\/test.csv\")","b0e62aa3":"data_train.describe()","a1932437":"for i, excerpt in enumerate(data_train['excerpt'][:5]):\n    print(f'Excerpt #{i}')\n    print(excerpt + '\\n')","dcd1bb1a":"fig = px.histogram(data_train,x = data_train['excerpt'].apply(len),\n                  title = 'Except length(symbols) frequency',\n                  color_discrete_sequence = ['royalblue'])\nfig.update_layout(\nxaxis_title_text = 'Except length(symbols)',\nyaxis_title_text = 'Frequency',\nbargap = 0.25, showlegend = False,\n             autosize=False,\n             width=750,\n             height=450)","b4427bf2":"all_chars = set()\ndata_train['excerpt'].apply(lambda x: [all_chars.add(c) for c in x])\nfor c in sorted(all_chars):\n    print(c + ' ', end='')\n    \nprint('\\n\\n')\n    \nfor c in sorted(all_chars):\n    print(f'({c}, {str(ord(c))}) ', end='')","27db3d39":"hard_chars = set()\nfor c in all_chars:\n    if ord(c) >= 176 and ord(c) <= 339:\n        hard_chars.add(c)\n        \nprint(hard_chars)\n\ndata_train['unusual_symb'] = data_train['excerpt'].apply(lambda x: any([c in hard_chars for c in x]))\nprint(\"Number of examples with unusual symbols:\",sum(data_train['unusual_symb']))","6060f966":"fig = px.histogram(data_train,x = data_train['excerpt'].apply(lambda x: len(x.split())),\n                  title = 'Except length(words) frequency',\n                  color_discrete_sequence = ['royalblue'])\nfig.update_layout(\nxaxis_title_text = 'Except length(words)',\nyaxis_title_text = 'Frequency',\nbargap = 0.25, showlegend = False,\n             autosize=False,\n             width=750,\n             height=450)","3d2af62b":"fig = px.histogram(data_train,x = 'standard_error',\n                  title = 'Except length(words) frequency',\n                  color_discrete_sequence = ['royalblue'])\nfig.update_layout(\nxaxis_title_text = 'Except length(words)',\nyaxis_title_text = 'Frequency',\nbargap = 0.25, showlegend = False,\n             autosize=False,\n             width=750,\n             height=450)","954f9f96":"fig = px.histogram(data_train,x = 'target',\n                  title = 'Target frequency',\n                  color_discrete_sequence = ['royalblue'])\nfig.update_layout(\nxaxis_title_text = 'target',\nyaxis_title_text = 'Frequency',\nbargap = 0.25, showlegend = False,\n             autosize=False,\n             width=750,\n             height=450)","540f5d37":"fig = px.box(data_train, x=\"target\", y=\"unusual_symb\", width=750,\n             height=390)\nfig.show()","4876f04e":" sns.scatterplot(data_train['standard_error'], data_train['target'], alpha=0.4)","1c58563e":"sns.scatterplot(data_train['excerpt'].apply(lambda x: len(x.split())), data_train['target'], alpha=0.4)","8b16981d":"# **Correlation beetween target and standard error**","43ac4f76":"# **Excerpts length (symbols)** ","888ae6d2":"# **Unique symbols**","f1c2e96f":"# **Except length(words)**","fa2056d5":"# **Looking at excerpts** ","852bb369":"# **Standart error**","d061430f":"# **Correlation beetween except length(symbols) and target**","2b9743a5":"# **Descriptive characteristics of numerical variables**","21af748b":"# **Creating column with boolean value of existing unusual symbols**","3aac22f4":"# **Correlation beetween target and unusual symbols**","6ec402d5":"# **Target**"}}