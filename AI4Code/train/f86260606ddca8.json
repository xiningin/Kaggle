{"cell_type":{"c7bf1539":"code","417525af":"code","49fead73":"code","f8468390":"code","64987856":"code","dbbd542f":"code","4e93bf35":"code","b69637cd":"code","5c5b6ca3":"code","b9938e63":"code","fa7d74fd":"code","5f26c2d3":"code","188cc61f":"code","edd582b7":"code","c5776ed3":"code","385f72fc":"code","54c47c8c":"code","8b48dbfc":"code","a78a9d4c":"code","fe424500":"code","d8ab29db":"code","dc9b6a20":"code","c83ad34f":"code","78b098ee":"code","8135e802":"code","7005b5a7":"code","cda92281":"code","cd1a1a74":"code","a04310aa":"code","34f3ad03":"code","574d2837":"code","533988c1":"code","e24798d0":"code","d67c3eab":"code","234d2d35":"code","a3a09ac8":"code","51c9fc85":"code","a91dd9a6":"code","0d1a3752":"code","e688fced":"markdown","cea3f7ce":"markdown","9bda0dc8":"markdown"},"source":{"c7bf1539":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nkills=pd.read_csv('..\/input\/leagueoflegends\/kills.csv')\nstructures=pd.read_csv('..\/input\/leagueoflegends\/structures.csv')\nmonsters=pd.read_csv('..\/input\/leagueoflegends\/monsters.csv')\nmatches=pd.read_csv('..\/input\/leagueoflegends\/matchinfo.csv')\ngold=pd.read_csv('..\/input\/leagueoflegends\/gold.csv')\nbans=pd.read_csv('..\/input\/leagueoflegends\/bans.csv')\ndescrpition=pd.read_csv('..\/input\/leagueoflegends\/_columns.csv')\nwins=pd.read_csv('..\/input\/leagueoflegends\/LeagueofLegends.csv')","417525af":"kills.dtypes","49fead73":"kills.isna().sum()\n","f8468390":"# totally expect many of the assists values to be NA because of the nature of the stat. so only drop the 113 rows where missing  \nkills=kills.dropna(subset = ['Time'])\nkills.isna().sum()\n","64987856":"kills[kills[['x_pos']].apply(lambda x: x[0].isdigit(), axis=1)]\n","dbbd542f":"# kills by game time \nkills['Time'].astype(int)\nsns.distplot(kills.Time,bins=30)","4e93bf35":"kills = kills[kills.x_pos != 'TooEarly']\nkills = kills[kills.y_pos != 'TooEarly']","b69637cd":"assists=pd.melt(kills,id_vars=['Assist_1'],value_vars=['Assist_2', 'Assist_3','Assist_4'])","5c5b6ca3":"plt.figure(figsize=(9,5))\nplt.title('Most Kills 2015-2017', fontsize=20)\nplt.xticks(rotation=30)\nsns.countplot(kills.Killer,order=kills.Killer.value_counts().iloc[:10].index)\nplt.show()\n\nplt.figure(figsize=(9,5))\nplt.title('Most Deaths 2015-2017', fontsize=20)\nplt.xticks(rotation=30)\nsns.countplot(kills.Victim,order=kills.Victim.value_counts().iloc[:10].index)\nplt.show()\n\nplt.figure(figsize=(9,5))\nplt.title('Most Assists 2015-2017', fontsize=20)\nplt.xticks(rotation=30)\nsns.countplot(assists.Assist_1,order=assists.Assist_1.value_counts().iloc[:10].index)\nplt.show()\n\n\n","b9938e63":"kda=(kills.Killer.value_counts() + assists.Assist_1.value_counts()) \/ kills.Victim.value_counts()\nkda.sort_values(ascending=False).iloc[:10].plot(kind='bar')","fa7d74fd":"cmap = sns.cubehelix_palette(as_cmap=True, dark=0, light=1, reverse=True)\nsns.kdeplot(kills.x_pos, kills.y_pos, cmap=cmap, n_levels=60, shade=True)","5f26c2d3":"monsters['Team'].astype(str)\nmonsters.Team.unique()\n","188cc61f":"#dragon split\ndragon=monsters[(monsters.Team == 'bDragons') | (monsters.Team == 'rDragons')]\n\n# baron split\nhearld=monsters[(monsters.Team == 'bHeralds') | (monsters.Team == 'rHeralds')]\n\n# hearld split\nbaron=monsters[(monsters.Team == 'bBarons') | (monsters.Team == 'rBarons')]\n","edd582b7":"dragon.Team.value_counts()\n","c5776ed3":"baron.Team.value_counts()","385f72fc":"hearld.Team.value_counts()","54c47c8c":"values=[14127,14658]\nmy_labels = ['Blue Side','Red Side ']\ncolors=['b','r']\nplt.pie(values,labels=my_labels,colors=colors,autopct='%1.1f%%')\nplt.title('Dragons by Side')\nplt.axis('equal')\nplt.show()\n\nvalues2=[5524,5571]\nplt.pie(values2,labels=my_labels,colors=colors,autopct='%1.1f%%')\nplt.title('Barons by Side')\nplt.axis('equal')\nplt.show()\n\nvalues3=[2481,1887]\nplt.pie(values3,labels=my_labels,colors=colors,autopct='%1.1f%%')\nplt.title('Rift Heralds by Side')\nplt.axis('equal')\nplt.show()","8b48dbfc":"matches.groupby(['bResult','rResult']).size().reset_index().groupby('rResult')[[0]].max()","a78a9d4c":"values3=[4146,3474]\nmy_labels = ['Blue Side','Red Side ']\ncolors=['b','r']\nplt.pie(values3,labels=my_labels,colors=colors,autopct='%1.1f%%')\nplt.title('Wins by Side')\nplt.axis('equal')\nplt.show()\ntowers=structures[(structures.Team == 'bTowers') | (structures.Team == 'rTowers')]\nsns.countplot(towers.Team,order=towers.Team.value_counts().iloc[:10].index)\nplt.show()","fe424500":"gold.isna().sum()\ngold=gold.dropna()\n","d8ab29db":"gold.head()","dc9b6a20":"ax=matches.groupby(['blueTopChamp', 'redTopChamp']).size().sort_values(ascending=False).iloc[:10].plot(kind='bar')\nax.set_title('Top Lane Matchups: League of Tanks', fontsize=20)  ","c83ad34f":"ax=matches.groupby(['blueJungleChamp', 'redJungleChamp']).size().sort_values(ascending=False).iloc[:10].plot(kind='bar')\nax.set_title('Jungle Matchups: Variety', fontsize=20)","78b098ee":"ax=matches.groupby(['blueMiddleChamp', 'redMiddleChamp']).size().sort_values(ascending=False).iloc[:10].plot(kind='bar')\nax.set_title('Midlane Matchups: Mages', fontsize=20)","8135e802":"ax=matches.groupby(['blueADCChamp', 'redADCChamp']).size().sort_values(ascending=False).iloc[:10].plot(kind='bar')\nax.set_title('ADC Matchups: Utility', fontsize=20)","7005b5a7":"ax=matches.groupby(['blueSupportChamp', 'redSupportChamp']).size().sort_values(ascending=False).iloc[:10].plot(kind='bar')\nax.set_title('Support Matchups: Definetely Tank Meta', fontsize=20)  ","cda92281":"plt.figure(figsize=(8,4)) # this creates a figure 8 inch wide, 4 inch high\nx=sns.countplot(x='redTopChamp',data=matches,order=matches.redTopChamp.value_counts().iloc[:10].index)\nx.set_title('Most Banned Top Champs 2015-2017')\nplt.show()\n\nplt.figure(figsize=(8,4)) # this creates a figure 8 inch wide, 4 inch high\nx=sns.countplot(x='redJungleChamp',data=matches,order=matches.redJungleChamp.value_counts().iloc[:10].index)\nx.set_title('Most Banned Jungle Champs 2015-2017')\nplt.show()\n\nplt.figure(figsize=(8,4)) # this creates a figure 8 inch wide, 4 inch high\nx=sns.countplot(x='redMiddleChamp',data=matches,order=matches.redMiddleChamp.value_counts().iloc[:10].index)\nx.set_title('Most Banned Mid Champs 2015-2017')\nplt.show()\n\nplt.figure(figsize=(8,4)) # this creates a figure 8 inch wide, 4 inch high\nx=sns.countplot(x='redADCChamp',data=matches,order=matches.redADCChamp.value_counts().iloc[:10].index)\nx.set_title('Most Banned ADC Champs 2015-2017')\nplt.show()\n\nplt.figure(figsize=(8,4)) # this creates a figure 8 inch wide, 4 inch high\nx=sns.countplot(x='redSupportChamp',data=matches,order=matches.redSupportChamp.value_counts().iloc[:10].index)\nx.set_title('Most Banned Support Champs 2015-2017')\nplt.show()","cd1a1a74":"# of matches by league\nwins.League.value_counts().plot(kind='bar')\nplt.title('# of Matches by League')","a04310aa":"major_region=['LCK','NALCS','EULCS']\nmajor= wins[wins.League.isin(major_region)]\n\ntournaments=['WC','IEM','MSI']\ntourney= wins[wins.League.isin(tournaments)]\n","34f3ad03":"plt.figure(figsize=(9,10))\nsns.catplot(x=\"League\", y=\"gamelength\",kind='boxen', data=major)\nplt.title('Major Region Game Length')","574d2837":"plt.figure(figsize=(9,10))\nsns.catplot(x=\"League\", y=\"gamelength\",kind='boxen', data=tourney)\nplt.title('International Tournaments Game Length')","533988c1":"plays = wins[wins['blueTopChamp'].map(wins['blueTopChamp'].value_counts()) >49]\nplays.head()","e24798d0":"# blue top champ by average of bResult, order by champion wr%\ntopwr=plays.groupby(['blueTopChamp'])['bResult'].mean().sort_values(ascending=False).to_frame()\njungwr=plays.groupby(['blueJungleChamp'])['bResult'].mean().sort_values(ascending=False).to_frame()\nmidwr=plays.groupby(['blueMiddleChamp'])['bResult'].mean().sort_values(ascending=False).to_frame()\nadcwr=plays.groupby(['blueADCChamp'])['bResult'].mean().sort_values(ascending=False).to_frame()\nsuppwr=plays.groupby(['blueSupportChamp'])['bResult'].mean().sort_values(ascending=False).to_frame()\ntopwr","d67c3eab":"jungwr","234d2d35":"midwr","a3a09ac8":"adcwr","51c9fc85":"suppwr","a91dd9a6":"unique_comps=plays.groupby(['blueTopChamp','blueJungleChamp','blueMiddleChamp','blueADCChamp','blueSupportChamp'])['bResult'].mean().sort_values(ascending=False).to_frame()\nunique_comps","0d1a3752":"# of games with unique blue side comps \nlen(unique_comps)\/len(wins)","e688fced":"# Side ","cea3f7ce":"# Structure and Monsters Analysis","9bda0dc8":"# Kill Analysis\n\n\n"}}