{"cell_type":{"eba25bce":"code","a8b788ed":"code","1de90ee9":"code","f13f7bed":"code","0b4fbeca":"code","26e6df20":"code","fd5ee26e":"code","ed45670e":"code","771d0321":"code","35eb232c":"code","35c83594":"code","313ea060":"code","dc30998c":"code","a4bce7e1":"code","fff6cd42":"code","0022f388":"code","8499e115":"code","d6e066a4":"code","2cfebd7f":"code","daa39b91":"code","e8e73e98":"code","f37658a5":"code","d0577fa5":"code","5707695d":"code","6ce2df27":"code","3f57c124":"code","d75bba41":"code","ca6aecfa":"code","6cc9cb14":"code","6035bc31":"markdown","042feb06":"markdown","b6da0f16":"markdown","90150f84":"markdown","e138b0ab":"markdown","d9b43eaf":"markdown","175c1bec":"markdown","8dc18b20":"markdown","5a9e9b41":"markdown","0d7b28aa":"markdown","b0d638ba":"markdown","9376ca6e":"markdown","286547de":"markdown","ee89a8bd":"markdown","03c92284":"markdown","05d8d2bd":"markdown","09c92352":"markdown","5506b193":"markdown"},"source":{"eba25bce":"# import \nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom IPython.display import display\nfrom matplotlib.pyplot import figure\nimport folium\nimport geopandas as gpd\nfrom folium.plugins import TimestampedGeoJson\nimport math\nimport seaborn as sns\nsns.set()\n\nfrom pathlib import Path\ndata_dir = Path('..\/input')\n\nimport os\nos.listdir(data_dir)\n","a8b788ed":"#import csv file for all country. We can do comparative analysis later \ncleaned_data = pd.read_csv(data_dir\/'corona-virus-report\/covid_19_clean_complete.csv', parse_dates=['Date'])\ncleaned_data.head()","1de90ee9":"cleaned_data.rename(columns={'ObservationDate': 'date', \n                     'Province\/State':'state',\n                     'Country\/Region':'country',\n                     'Last Update':'last_updated',\n                     'Confirmed': 'confirmed',\n                     'Deaths':'deaths',\n                     'Recovered':'recovered'\n                    }, inplace=True)\n\n# cases \ncases = ['confirmed', 'deaths', 'recovered', 'active']\n\n# Active Case = confirmed - deaths - recovered\ncleaned_data['active'] = cleaned_data['confirmed'] - cleaned_data['deaths'] - cleaned_data['recovered']\n\n# replacing Mainland china with just China\ncleaned_data['country'] = cleaned_data['country'].replace('Mainland China', 'China')\n\n# filling missing values \ncleaned_data[['state']] = cleaned_data[['state']].fillna('')\ncleaned_data[cases] = cleaned_data[cases].fillna(0)\ncleaned_data.rename(columns={'Date':'date'}, inplace=True)\n\ndata = cleaned_data","f13f7bed":"#date stuff\nprint(\"External Data\")\nprint(f\"Earliest Entry: {data['date'].min()}\")\nprint(f\"Last Entry:     {data['date'].max()}\")\nprint(f\"Total Days:     {data['date'].max() - data['date'].min()}\")\n\ndata.head()","0b4fbeca":"import plotly.graph_objects as go\nimport plotly.express as px\nimport plotly.io as pio\npio.templates.default = \"plotly_dark\"\nfrom plotly.subplots import make_subplots","26e6df20":"formated_gdf = data.groupby(['date', 'country'])['confirmed', 'deaths'].max()\nformated_gdf = formated_gdf.reset_index()\nformated_gdf['date'] = pd.to_datetime(formated_gdf['date'])\nformated_gdf['date'] = formated_gdf['date'].dt.strftime('%m\/%d\/%Y')\nformated_gdf['size'] = formated_gdf['confirmed'].pow(0.3)\n\nfig = px.scatter_geo(formated_gdf, locations=\"country\", locationmode='country names', \n                     color=\"confirmed\", size='size', hover_name=\"country\", \n                     range_color= [0, 1500], \n                     projection=\"natural earth\", animation_frame=\"date\", scope='world', \n                     title='COVID-19: Spread Over Time', color_continuous_scale=\"portland\",width=900, height=500)\n# fig.update(layout_coloraxis_showscale=False)\nfig.show()","fd5ee26e":"#extract rows pertinent to Malaysia only\nmyr = data[data['country']=='Malaysia']\nmyr.reset_index(drop=True, inplace=True)\nmyr","ed45670e":"figure(num=None, figsize=(14, 10), dpi=80, facecolor='w', edgecolor='k')\nplt.title('Confirmed & Active Cases in Malaysia')\nplt.xlabel('Date')\nplt.ylabel('# of Cases')\n\nplt.plot(myr.date,myr.confirmed,'-', label='Confirmed')\nplt.plot(myr.date,myr.active,'-', label= 'Active Cases')\n\n\n\nplt.grid(alpha=0.2)\nplt.legend(loc=\"upper left\")","771d0321":"drmo=myr.date[56:]\ncrmo=myr.confirmed[56:]\n\nfig, ax = plt.subplots(figsize=(14,10))\nplt.title('Number of Cases Since RMO')\nsns.lineplot(x = drmo, y=crmo)\nxticks=ax.xaxis.get_major_ticks()\nfor i in range(len(xticks)):\n    if i%2==1:\n        xticks[i].set_visible(False)","35eb232c":"#number of new cases calculation\nn=1\nnewcase=[0]\nwhile n < len(myr.confirmed):\n    newcase.append(myr.confirmed[n] - myr.confirmed[n-1])\n    n+=1\n    \nday = np.array(range(1,len(newcase)+1))","35c83594":"figure(num=None, figsize=(14, 10), dpi=80, facecolor='w', edgecolor='k')\n\nplt.xlabel('Day')\nplt.ylabel('# of New Cases')\nplt.title('New Cases in Malaysia Starting from 22-1-2020')\n\n#Add vertical Line Representing Mean\nplt.axvline(60,color='gray',linestyle='--')\nplt.text(x=60, y=220, s=' MCO 1', alpha=0.7, color='#334f8d')\n\n\nplt.bar(day,newcase, label= 'New Cases', color='#4b8bbe')\n\nplt.legend(loc=\"upper left\")\nplt.grid(alpha=0.8)\n","313ea060":"figure(num=None, figsize=(14, 10), dpi=80, facecolor='w', edgecolor='k')\nplt.xlabel('Date')\nplt.ylabel('# of Cases')\nplt.title('Closed Cases in Malaysia')\n\n\nplt.plot(myr.date,myr.recovered,'-', label='Recovered', color='blue')\nplt.plot(myr.date,myr.deaths,'-', label= 'Deaths',color='green')\n#plt.plot(myr.date,newcase,'.', label= 'New Cases', color='r')\n\nplt.grid(alpha=0.2)\nplt.legend(loc=\"upper left\")","dc30998c":"#load data\nstatepath=Path(data_dir\/'covid19-world-malaysiaby-state-dataset\/covid-malaysia-bystate.csv')\ndfstate=pd.read_csv(statepath,encoding='latin1')\ndfstate.head()","a4bce7e1":"dfstate.info()","fff6cd42":"dfstate.total.tail()","0022f388":"#dataframe for each state\n\nked = dfstate[dfstate['state']=='Kedah']\nmel = dfstate[dfstate['state']=='Melaka']\nkel = dfstate[dfstate['state']=='Kelantan']\nkl = dfstate[dfstate['state']=='KL&Putrajaya']\nper = dfstate[dfstate['state']=='Perlis']\npen = dfstate[dfstate['state']=='P.Pinang']\nn9 = dfstate[dfstate['state']=='N. Sembilan']\njoh = dfstate[dfstate['state']=='Johor']\npah = dfstate[dfstate['state']=='Pahang']\nsab = dfstate[dfstate['state']=='Sabah']\nsar = dfstate[dfstate['state']=='Sarawak']\nlab = dfstate[dfstate['state']=='Labuan']\nsel = dfstate[dfstate['state']=='Selangor']\nter = dfstate[dfstate['state']=='Terengganu']\nrak = dfstate[dfstate['state']=='Perak']","8499e115":"import matplotlib.ticker as ticker\nimport matplotlib.animation as animation\ncurrent_date= '12-04-20'\ndt29 = dfstate[dfstate['date'].eq(current_date)].sort_values(by='total').head(15)\ndt29","d6e066a4":"colors = dict(zip(\n    ['Labuan','Perlis','Melaka','Terengganu', 'Kedah', 'Pahang', 'P.Pinang', 'Kelantan', 'Sarawak', 'N.Sembilan', 'Perak', 'Sabah', 'Johor', 'KL&Putrajaya', 'Selangor'],\n    ['#adb0ff', '#ffb3ff', '#90d595', '#e48381',\n     '#aafbff', '#f7bb5f', '#eafb50','red','brown','blue','yellow','blue','green','purple','gray']\n))\ngroup_lk = dfstate['state'].to_dict()","2cfebd7f":"def draw_barchart(date):\n    dt29 = dfstate[dfstate['date'].eq(date)].sort_values(by='total').head(15)\n    ax.clear()\n    ax.barh(dt29['state'],dt29['total'], color=[colors[x] for x in dt29['state']])\n    #dx = dff['value'].max() \/ 200\n    \n    # iterate over the values to plot labels and values (Tokyo, Asia, 38194.2)\n    for i, (total, state) in enumerate(zip(dt29['total'], dt29['state'])):\n        ax.text(total, i,     state,            ha='right')  # Tokyo: name\n        #ax.text(total, i-.25, group_lk[name],  ha='right')  # Asia: group name\n        ax.text(total, i,     total,           ha='left')   # 38194.2: value\n        \n    # ... polished styles\n    ax.text(1, 0.4, date, transform=ax.transAxes, color='#777777', size=46, ha='right', weight=800)\n    ax.text(0, 1.06, 'Cases', transform=ax.transAxes, size=12, color='#777777')\n    ax.xaxis.set_major_formatter(ticker.StrMethodFormatter('{x:,.0f}'))\n    ax.xaxis.set_ticks_position('top')\n    ax.tick_params(axis='x', colors='#777777', labelsize=12)\n    ax.set_yticks([])\n    ax.margins(0, 0.01)\n    ax.grid(which='major', axis='x', linestyle='-')\n    ax.set_axisbelow(True)\n    ax.text(0, 1.12, 'Number of Cases By State',\n            transform=ax.transAxes, size=24, weight=600, ha='left')\n    ax.text(1, 0, 'by Khairul Hafiz; credit Khairul Hafiz', transform=ax.transAxes, ha='right',\n            color='#777777', bbox=dict(facecolor='white', alpha=0.8, edgecolor='white'))\n    plt.box(False)","daa39b91":"#flourish produced better visualization: refer to https:\/\/public.flourish.studio\/story\/407202\/\n\n\nfrom IPython.display import HTML\nfig, ax = plt.subplots(figsize=(20, 12))\nanimator = animation.FuncAnimation(fig, draw_barchart, frames= ked.date)\nHTML(animator.to_jshtml()) ","e8e73e98":"fig, ax = plt.subplots(figsize=(14,10))\nplt.title('States with The Highest Cases in Malaysia')\n\n\n\nplt.plot(kl.date,kl.total, label='KL & Putrajaya')\nplt.plot(joh.date,joh.total, label='Johor')\nplt.plot(sar.date,sar.total, label='Sarawak')\nplt.plot(sel.date,sel.total, label='Selangor')\n\nxticks=ax.xaxis.get_major_ticks()\nfor i in range(len(xticks)):\n    if i%2==1:\n        xticks[i].set_visible(False)\n\nplt.xticks(rotation=65)\nplt.grid(alpha=0.8)\nplt.legend(loc=\"upper left\")\nplt.xlabel('Date')\nplt.ylabel('# of Cases')","f37658a5":"figure(num=None, figsize=(14, 10), dpi=80, facecolor='w', edgecolor='k')\nplt.title('Other States and Their Respective Cases in Malaysia')\n\nplt.plot(ked.date,ked.total, label='Kedah')\nplt.plot(mel.date,mel.total, label='Melaka')\nplt.plot(kel.date,kel.total, label='Kelantan')\nplt.plot(per.date,per.total, label='Perlis')\nplt.plot(pen.date,pen.total, label='Pulau Pinang')\nplt.plot(n9.date,n9.total, label='Negeri Sembilan')\nplt.plot(pah.date,pah.total, label='Pahang')\nplt.plot(lab.date,lab.total, label='Labuan')\nplt.plot(ter.date,ter.total, label='Terengganu')\nplt.plot(rak.date,rak.total, label='Perak')\nplt.plot(sab.date,sab.total, label='Sabah')\n\nxticks=ax.xaxis.get_major_ticks()\nfor i in range(len(xticks)):\n    if i%2==1:\n        xticks[i].set_visible(False)\n\nplt.xticks(rotation=65)\nplt.grid(alpha=0.8)\nplt.legend(loc=\"upper left\")\nplt.xlabel('Date')\nplt.ylabel('# of Cases')","d0577fa5":"latest=dfstate[dfstate['date']=='04-05-20']\nlatest.reset_index(level=0,drop=True, inplace=True)\nlatest.set_index('state', inplace=True)\nlatest.sort_values(by='death', axis=0, ascending=True, inplace=False, kind='quicksort', na_position='last')\nlatest","5707695d":"latest.index","6ce2df27":"# duplicating coordinates according to column -- not needed for now\n# no differences in heatmap output\nheat_cord = []\n\ndef heatcord(state):\n    i=0\n    while i <= latest.at[state,'total']:\n        heat_cord.append([latest.at[state,'Latitude'],latest.at[state,'Longitude']])\n        i+=1\n    return \n        \nfor row in latest.index: \n     heatcord(row)\n\nheat_map = pd.DataFrame(heat_cord,columns = ['Latitude', 'Longitude'])","3f57c124":"#normalization of total cases\n\ntot_latest= latest.total.sum()\nnorm_today=(latest.total)\/float(tot_latest)\nnorm_today","d75bba41":"my = folium.Map(width=1200,height=800,location=[4.824330, 108.304785],\n        zoom_start=6) #tiles= Stamen Terrain, Stamen Toner,  \n\ncir=150\n\ndef state_circle(MYState,warna):\n    folium.CircleMarker(\n        location=[latest.at[MYState,'Latitude'],latest.at[MYState,'Longitude']],\n        radius=norm_today[MYState]*cir,\n        popup=str(MYState),\n        color=warna,\n        fill=True,\n        fill_color=warna,\n        alpha=0.1\n    ).add_to(my)\n\nfor row in latest.index: \n     state_circle(row,'#3186cc')\n        \nstate_circle('KL&Putrajaya','red')  \nmy","ca6aecfa":"#def make_map(features):\nm = folium.Map(width=1200,height=800,location=[4.000, 102.295999],\n        zoom_start=6.5) #tiles= Stamen Terrain, Stamen Toner, \n\ncir=200\n\ndef state_circle(MYState,warna):\n    folium.CircleMarker(\n        location=[latest.at[MYState,'Latitude'],latest.at[MYState,'Longitude']],\n        radius=norm_today[MYState]*cir,\n        popup=str(MYState),\n        color=warna,\n        fill=True,\n        fill_color=warna,\n        alpha=0.1\n    ).add_to(m)\n    #return\n\nfor row in latest.index: \n    if row !='Sarawak' and row != \"Sabah\" and row !=\"Labuan\":\n        state_circle(row,'#3186cc')\n        \nstate_circle('KL&Putrajaya','red')\nm","6cc9cb14":"ss = folium.Map(width=1000,height=800,location=[3.412054, 114.493331],\n        zoom_start=6.5) #tiles= Stamen Terrain, Stamen Toner, \n\ndef state_circle(MYState,warna):\n    folium.CircleMarker(\n        location=[latest.at[MYState,'Latitude'],latest.at[MYState,'Longitude']],\n        radius=norm_today[MYState]*cir,\n        popup=str(MYState),\n        color=warna,\n        fill=True,\n        fill_color=warna,\n        alpha=0.1\n    ).add_to(ss)\n\nfor row in latest.index: \n    if row =='Sarawak' or row == \"Sabah\" or row==\"Labuan\":\n        state_circle(row,'#3186cc')\n        \nss","6035bc31":"# **Analysis of COVID-19 Cases in Malaysia**\nHello all, in this notebook, we will see how COVID-19 has progressed in Malaysia since the first case was announced.\n\n**Current Updates**\n\n1. Please take note that some of the dates have insufficient data, especially on the earlier part of the 1st wave (22nd Jan 2020-26th February 2020).\n\n2. Malaysia is currently under the 2nd wave of COVID-19, surging from <100 cases to ~4700 cases as of 12th April 2020 (since 27th February 2020). [Source](https:\/\/www.thestar.com.my\/news\/nation\/2020\/03\/23\/covid-19-current-situation-in-malaysia-updated-daily) \n\n3. Malaysia has taken the initative to perform Movement Control Order(MCO) for 14 days starting from 18th March 2020 until 31st of March 2020. There were series of additional MCO phase, and as of 27th July 2020, Malaysia is under the Recovery Movement Control Order (RMCO). \n\n4. We have successfully flatten the curve, however, there were an increased number of cases in the latter half of July.\n\n5. Data that was used for the by-state analysis is up until early of May, whereas general Malaysia data is [updated](https:\/\/www.kaggle.com\/imdevskp\/corona-virus-report) daily.\n\n\n<center><img src=\"data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBxISEhUSEhMVFRUVFhUbFxcXFxkdHRgdGBoYGB4bIB0gHigjGx8lGxgZIjEhKCkrLi4vGB8zODMsNygtLi0BCgoKDg0OGhAQGy0mICYtLS0wKy0tLy0tLS0tNS0tLS8uLS8tLS0rLTAvLSstLS0tLS0tLS0vLS0tLS0tLS0tLf\/AABEIAKgBLAMBIgACEQEDEQH\/xAAbAAABBQEBAAAAAAAAAAAAAAABAAIDBAUGB\/\/EAD4QAAIBAwMCBAUBBwMCBQUAAAECEQADIQQSMQVBEyJRYQYycYGRIxRCUqGxwfBi0eEVcgczkqLxFiRDU4L\/xAAaAQACAwEBAAAAAAAAAAAAAAABAgADBAUG\/8QALxEAAgIBBAADBwQCAwAAAAAAAAECAxEEEiExE0FRBSIyYXGB8BSRodFC4bHB8f\/aAAwDAQACEQMRAD8A8QpUqVaACpUqVEAhRpUqKIGhSpUSCo0qVQARThTRThTECKNICiBTAYgKUVo9B6YdTft2AdviNG6JjnMSPxXR9V\/8OtVZDlCt4q0QsAlY3bjLYP8Apz3ycSyWRJWRi9rZxkUoq\/1DpF+wqNetPbW5OwsOY\/ofY\/3qjRHTT5QIpU6KWwxwaHBPoNpV2w+BxfTx9PeVbRG4C5jAHmMk5g+1Hpvwp4JZr13TuTKbFcGNw5k8HiKR2VxltckWRqskspM4ikRW9\/8ATL+ab1gbT\/8Asn1nIESD\/U0NR8K6hCR+mxETtcd6T9RVnCkW\/pL8Z2mFFKKs6nRXLZKujKRyCD\/naoNtXJp9Gdxa7Q0LUl\/TOh2upUiMERzxXT\/CHSbF1S9yWZXXyhmXk4kj7mZEQPWus+M9QnhsrWUKEAKbjQVMHzAkjdAHHr9Yq5aeTjuM078TUUsnlEUorV6j0nw0S4jG4pVS52FdjNJCn1wOR3kVmVU1gvjJSWUMikRTiKBoYCNoU6gaUgDTaJoUGEFKlSqEGUqVKqRhUqVKiAIpUhSpkQVGkBRioAFECjFT6bR3HbaiMx9ADiKPSyxkm3hEMVPo7QZ1Vm2hiAT6e9dl8O\/ByMCNUCpYSrBoCAdyODJxz+K7LQ\/COntb\/CsJCglmvSbg4+UiVYRPy7efekduIb4rKG2KNirse1\/M4bSfAeoJ3v8A+QSRvUiWHIIBit9vg7SuouOHQ+GCVUcEDbJnuTUnSPiCL3hpdAkkorWSQ0HykFhj1iB\/etbSavU6ybRTSqiA\/tDBnLjd\/CSPK0kkCcRzisEtdZuaSwvTzOqtBXGOW8rrKMnpN3TaCbYS6viMoa46mVjvMYUAyfvQ6r1i1Z1Crac3LQSQpUsWbvMjccQR6zVjr\/TlLOru11UwLh8oiOCxMOY7qO0Hms2z0e9aDPp0R7a7WDup3LPKhvMAIHLEGrqfacoVuL7KLfY9dk1ZF4i+\/qV00NrW2ymxdMULEOBh\/qDlfoMSO1c9r\/hx0ZVRhd3MVAUGcd4NdfqLV6Y2izZEyCrXdwbLEARuAzxU\/WbbaVh472TbYkI9qS0FRDG2CY\/9RNCPtCxvEl\/f+y6fs3TwSjCePr5\/0O0vwNpkW2L6lrmyXKnBMcR6jn0qpb6TrFZoS1bQHMFdrqT83+rHtVfpGsbebtly+xCnmkMAcB23SCuN0d8cdpOufEv6LXLKbluuYVyCbZgQykQeRxH39d0oUXrMW+P3\/Y4\/ia3ScJcPp\/7LLdLG1vHvFlGMJtAmUIUehRlAI7ie1OudF0rKFYOQATO4AtAgZAyIFefdS1ernw77XFJ\/daRhoP4wD9q2PizoSabT6a7auX38UEM7EeGSP4CAMfUnikSqi8KJRJ6mfxWPPyN9uj6UQArgMcw4YbiPlnHBUH8etVtT0IuxVbpT1LKREZyFMAZrMsfC+\/pba9bri4r5RiApWdvlnLNiZ47RNY\/T9bq\/MbRuOE8zY3ADiW9vrQ20y7iPG3VQT22P05Ok0um1VhJZlvWyQcndjnM8GYP2qG3p7Goui29vYwQliMZAkyP96paD4tYbRdSYjzqYYZkY4Ppx\/cV0f7bZ1G57R3Oq8iFaCfdTLE4M9hzSS0yzuqlh+hqq9pzilXqYZj6g6dYTR7kgSCH3E\/MABIPYeUtH0NYnWviMXLgQgvbD5M4ZNwMAdjHcVJ1R7lpPB+Y3H3XHUyEVuF\/7iJ+gjuTVFuiC557J225\/fGVHqY9fSr4auyOKrHhsD0cLnO2jmP8AJF1brrXkCQVAMTuMlFA2oexCxj7VjVp9V6cLbILe5gQBuONzEkRHaugs6axpwqWyHvuhRt6kq++AFAOBDAeuP5bPAnnDMeY1rCOLiga1us9IeyWYLc8LdtV3ETI3Ae5wc944HFZJqhrHDLYyUllDTQomhSsI2lSpUoQGhRpVCEdKlSqkIqVKlRIGiBQoimIPRCSAASSYAAkkn271vn4XuDTm6f8AzQ+3wjAIXiTJySYhR7074a6PZvAO14h93yKI2xwxc4Enjk11SXnW5+tcLoMIMllVZ8vCgzLA7ufaBVjUYVuyT4FhCy6xQq+5x\/SPh+890K6tbC+ZiRwBnP1\/wV3Y1J33NMttQWRGe4CFdxAkehwM\/Wsf4g6xegbDbILEKNiTtjuMyY7k1B03ql\/TKlsHyOxdhAIhgoMtzgARjEn7cmd7si012d6GkhVLMc58\/udr13XMbbJplAtoqguCDIEHanoR7yK5\/QfFlqUv3ma5f2stxQNpXJKgdtoAM95IoW9O9q2blnU27Fm4LkFkI3sOwZu54kZqlp\/hyybFzUvetnUbLd0AMAAWG4qyxEzgKMCO1dF66uNcdnZw17NnKb3v7l\/Waw623udLaMQIcsAE2cQRyYn8UtJ8K2Ge5ZGuZQbc4O2TEfqZEn\/SPrVe1pr5Fm8wtBbZFwMrKXuHuFUiN0SRzBEgzV3V9cXVXR5VsoL8qjKi3mcq25iwGwiWPbsDMzPHnOTbZ6BVVtRhFcY7LSdX0wsroxaZ7M+X9KUuhRkKR8vmEyTGKsDqenC29Mmrti0bW25auID4aAcbhEkHuZ7VH0zp4dC7G2boW4LEXwu8idwcwI4xHp9Kxdc+lTSWX1elI1A3MqW0a3vWfnLq0N69oJMRwdFV0WkpwyYtTp4x+Cbz9ODq+k9XFy8US5+kEChriPEyAdj8ZxJB7in9P6vprf8A9mlhfFtgljtG1irNJkySAZE+xrkLXxBpPAupF9QzBlUud6ljETJ3gjJEd+Qc1B1m+9+6t\/T3VR2tp4qrAJjl54Mkme\/rXUsnXbS7MdHFr0t0bvCj5\/yb3Ueg7dUl5Lim3qHVGCoCsOOBkSN0CcRNHq+juKGS5Z2sHPhuiqdqJK7mjuQOD2rmNQbf6dpmPi\/IuzyqrOYDmRkwRn\/Bu9K0Gu0V5Z1Fu4l1nkNdjey4HmEnviuRXY1JyXfz4PRX1tRjCTyvzj5GB\/4jWGY6bUi0y27tlYckkMyzIBPB7+\/NWPimxcbpejuLv8BWYDew9MQJ4mYrW11qy6nS30dbiFWTxLjMGFzcPKoGFA24AH05NZ3X+hsuhG0AeDejzMNzTjyrzEkVtpvjN4fD\/PM492mlXFT8slDTae2Ok32OpBdmshbJDSux3cgHgTu\/9prX+Bku2+ma+7aKSy7W34OMYJ5kEmoeq9Bb9j09u2iLde6gNnfuuMdreYg8ZYkj0pnxHpibAJawCbi2giABwExJUcy38q0bU0knky5KP\/h\/8MDV3fEubGtWjL22eC4iSfoJH5rHvHdqz+xIybrkWkBk5xtzyJ9cV1HVW0em0LJYe8126zWwSFA2oym4T3JJgT\/pA7VS+GtDZULevK8qd7Gdqi2OwYZDngEZziOaO154yTd6mg1q9YKrq7SWnvQUAKkt2ZjtJ2mCDB9ao9YmwBcty1sEeVT6RG7E7aodUvvrtUWs22AMBLe4nYqgAZJ+8knk810hsPab9n1Hhb9oBACwQ0Rkd8RtAz3oShG1KMu\/ISF09M99b4faOfs6Yp4V+8UfcpdkglkBMj6TyKv9PtDU6km6TdRW2gTtwYYn2GR\/P0qG\/cFpmBVmt3CSuCC8zEniFzzz6ViXrt2zgbl3HcDlSfxEgim0mokpuuzyN2q08JwVtT7X7HZ\/EWu0zjZqbhMqQ20E7XiUIHcQM\/WvOGqzrNU1wgnsAB9hn8mT96rGtFslKTaMlNWxYGGhTjTapZaCgaNKlCChRoRUIR0qVKqgipUaVEgqcgoAV0PweltbvjO+1rRDIpQsrQGJk8A4Ee\/0p4xy8Cze2OQfCs7nBuKlqB4m4wDzERkme1b2i19i3cTxLrFSD4iwWyIiI\/p+ffeHRtO4e4NNuN1RvVVX9M92WfsSIzmufvfDt23auM4a3LkCACSPfuBHFU6yuyMcP4ezZ7N1Fcm8LEx2u8NydSotB1WECSsnIB2kZMVTs2LlxrP7Q21SSpBIRRGctPsJqzY0dsahW1NwbUCgeJJJBBg49Dmm6TS7ne3uLIWDhoBCIzRuJOfxXKS8lydt4ju3ZSXz4z8zavfDFu+VW3eceHcYulwsybOzWyQAw9wcc1kdY0XT1ubFe6NjZvbd1tweYIGIaR9VIrptDau2XREueI+QreWbajvkHniKi6l8MXtVeS5cvq1hZBJuAFgTujHYHsfSYE125aNQpTist\/ueaWul4+JNbTP6bprmpt2iCXtW2KK5cbLRMed4+URHlnMxGay+p6nTPfNt18Uh1AdG2px7\/L2nvINaet1F6xftHTOVazuVUxBMQDAI3GO59qr\/AA1dAus+s8IC4zsGvW1ZZzuMD5WJPNcTbhvPkehdstqwlh\/L0HdK6Jo719rBB8TY0EXUVF7zMeaOIjvWj8T9avFQmitzZRWsuCm4l1weJ2j34n1iajHROn3Ldx7CFmS2GKK87WkmSWABxPlFZd59SbauLbK7tvRrfypM\/MkcyTkjPrUw2ytbJNyfH0Kmp6chBa5sVvDBB3mVjMhYGRBx7VvfBHSQtq5cuXLbacsoWdoJYQZO4gBQfQmTWK+mdoTUhG2uJMBSxb1aNwBOMCJIqT4i6ypQaPTWgqSqkJjzzyCctJzJP4rZo6oWNqcuPQze07Zw2+FHDf8Al\/fkddc+FDf8VybQcyAApiCDHrEY9frVO90QIbFhNb5VB8MbN5NwSTtIgHmYqG5e8HTkC7dGqW029WZnYISrGFnbIkeYcDdzzUF7ro1FvxA7s9oodjuFtrGCNixvUc7e33rRqtJXVHMV3+fYwabWai+xKb4SfPX\/AKVrHW71i9cs6i2zvcmbipNyNjRtBGBIDfY1j3dSBfm\/aukSCBJ3GOJIyAOZH0rZ6z1YOQLN66QwY+VotsxBwqnChcgrPefSq2t6UVW3cusq7oJUOxaD7+4yfvWDdGE1KB11V4tTjN9vyHpfsux1TX9rr4rC3tYsswiBj\/Dx+Ypmj0tkMLgLXmcIlliSkXnwZnDQSPYVQ67obaXd9plZZxBmBg\/iZ\/FVbequAzvMEsYPyguCCY4BzXVqnKcMnnr4KuxxOnt6XUai7ZK6O2f2fdatooH6rJ8xYEyAI3FiPpM1F1DU39Qr6S0UFqyWa5MKC4JmJEwDgD2rM6Xq7du0CXu+KX2bbe5f0gqyQR+8WwfXPJNa+ktLqA37SpLqv6FtYVBHe5\/SeeaKeF1\/yUtjOn2EsWLestsqAFlI3fqX2B5C\/u25kH6VmazqF\/UXzqGBe5yYXgCcGOBE5qbcjsQyeNeZlCsMIgBjaAOw9sQK3ep9Ruaa2+kRrVx3C77lkEbAIhFg88z9aMltfH4hHyYr22uWQ6Q5mVVlwNp+UCcgDAHeqnUWd7XjXFLtbOS4G2BjYqk5A7x70\/p9wqSqrLMRDGQBGTPE+3eaq9Vizf8AE8EPuHlHYMee2T3qvUxfFse0bfZ1qTlTLqXn6FbrRS74ZshPKp3lRtBPI5gTWGa66xrdNa04t3rcuSdybTIj1OCZ9a53WrveUtbFaAijcZkwOeTXQuUZJTi+xMOLcWuiiaBqbU2GRijgqymCDyKhNZhgUqUUqBAGlRpUAkFGlSqvARUgKQFGiQIrvPhDU223+Fp18qDcpbc+AQ1yIkjcVGJiT9a4QVodEustzysygg7trRIxg54mKKn4fvC+F4uIpnc2evoTvuP+y+HJdBvLXZMCJx6\/T0rH6x1F9TebwGK2Q21QdwLzMHaBJMVRuOzXDHmJMAgTI2xkfSr1rTmytlzdu2l3RcGwmCAQIPqV7eh9qM9ZGTUF0+yyrQODlOWcrov3emCwgus903WG0lre4AmDsA3ZJxkcVd6Xqr+nsi7dsbzDAABASpAEE5gDJgxJI9M1T1dLbs3iXgk\/pv5gFJHmieTB44rmusX7zXiGuu4YA4MYPG4CFBj+tY4VV1zfiPlcrBvstnbDbHp8PJfTXsl0XkutDR4jFkUkR5wsxtMY9Zip7nWra2LqabT3FLvJZn3bVxPljyjnzHJOe1ZFtkI2BoInDAHaR3n1q5obyWG8Rjcl0MGPKzCIMdxParLddKXw8GaHs2Le6T4X59zWu9GU2GvB\/BuFVZH3s6tOGVSo5A55iRR0NlUQ27lsqqqWOpXcTtJBBa23qsGDBz6zWTZ+JtWHne1sMu3HCoxEkDj\/AAVbGtF62LG1rgJC70PnIX6xiMEmqtNVGzdGb5a4+prtsnBKUOl2dBoOl6LStbuM6st4+XcykMo+QgKTkHJM+og4rY6Lrzbe8DetuW8yho3hXI2C4cZ7YGBXnfxBfdiLAdSibAF2gKDxMjiO9dQ2js3FTRKF8ZbYMEYmZKqQRIyYB4rp01UxlhcteZw9RK18TfDzx8s5F8VXlS4ruGtOyXFdioa03psftJn+VcgNetvaFtsLTbSQT5iV9G9OPStXVWUtIbd8StsLt2kkfNkkZgzjIANVbpsNblVXbvMbj5j+OBXFu9218Y5PQ6WqU9PGO5Pjvzf+gH4iKvYupaXxkd5uHJuhpG1uJABj7Ve0+mso7XdSB+q7eGbnyeYSSyTI82cx7Vg3dJtG\/dtCkiZkbuQB6es1d6Zo\/wBrdi93aiEbmnLE4BA9YxVk75zgovozU6aFc3hcm\/q9WjC3bvoj7jKeHi2q4Xey4afL7YOO1VtHpNRbTcyLcsXCYG6BHAMMNwB7A0xZ07WyWUWre4Frlsb\/ADT+6fmyO\/BNNQWL7ssEWiRBVSXZpwAf3VbmOBms8JbMm2S3Y45RCdVZJNrwbKgiFZDBJkTkjniJxzWfdtkMRBEHhon\/ANuKtWNIq3HVtuwK20kEkZHMcMOecfeodq8jaP8AtM109NqHPiXZydfp0o74dEui1BsnxFEuolPQNiCR7Rx\/zWg1s3Fd9VqEtNhhb2gtdLHsu4RjufxWYikk9\/afv3+1XdBasbi98uRA+Ubicj19BNaJJx945aeODTvdTRFTTgJstsSxtmXuA5hrkAe0KDwB2p93RNp2t3nRdOjy1tVKvdj2Hm80evrUY63aTxbOnsqiOwhnhriqOCvYTzTV0niFriWr1y2CNzsf759f51Fz+d\/0Doq9Q6iGQ27YJtLc3K1wfqkyMmAIHaI\/FM17kBXFs3ApLj5gcDJznuO9atrSoQ950t27asB4ZuywBwCFHP5qhqGsEOtve1sY8+Cf9PtJMT70NqeYtdgUnCUZryKfV7N7UlNRqEFpW8ixA+mD35p2k0Vy6yraACqCCTubdtIMLAPmBURHB9KqXOosVe0RcdweSSVQrzA9JkTV3oHxGqbbRhFW2fM37zAcSOJb+po+zrFtcJ8Y4Ol7Rhzug85RH8ZdDVS9+3cuXCGXxQVDC3uAjc4iOwiPv68jFdN1bVGzaNrAe8AWVSYVZJhhMMTJHtFc1Tzxl4M1O7bhjaVE0KQtBSo0KBCA0RQoiqhg0hSo0yAGtPptoABh8xMdsd5H0isytHQXgqs2ZUH+eAPzk+wqm\/Ozg1aSSVmWWen2CWb9TZtntuJ9Tj+taej04uHwr967t27\/ACIYBHzAgjkBV\/wZXTntgG443MR\/Ft7ZEf0+lQPcYLbcXX2jG0ttI3EnHqJPJ5rnvJu4XzLrWLW5jb1Tbbbypa3KmRI4HPv7VAHuXBva9b2pbJAWJkSx7ZMk+9M1bWkYIowMMjGVc9jPAqh4TOhQBTt8w2kQAfU\/5xQayX1rHK+2GWOmaDx7hN1yrODs2oWkgTJA7QP79qsXemo10i3qNyKgYNcldpzKgAEbvxz6g0emaQi0bnjG2dpKm2dxkSfOBlRVvRXLu23+zshIuMXIIlyeX2ERiT+DRy2+CviPP3M2zqfEUJbLlmlWDJPPERx\/x3rPvRbbaJg4lCfN2P1\/lXUae5b0t93Z3LkgW\/EtQrB8MSO8eorL114B7gRt8uzIRb8ksZcjvgmB9KeK2trkSc3Yk3yyjZ0oY3AFX5eGaCI9u5J4q1Y68y2lso7BFfcHIG4SOMGee0+lQabTKxblzDeYMBkcHJBxTNNcIdbpC2gIABTHuQO9PCbWWmU30qTSaTLPT7RbjUoGub53kriJMnMTmrfR7QcMq3LXigFT4oARkGPJjcxMTTXNq6xRVMoGbxbYncCMlh2FLQ6S7YuO9gpqAqQWiRkSdoOTHrFI8zZbH3UkukRanSstxbT2cttciGWVjgKf644o2OnDxgS1xLKiS0ruEeg45pmk07399x9SFZAoUuxlyZAUZnsZPaor9s6dzbhGMgK8ys+x4Ocfakw+kXqcJL3kT9UseJcQTdgpJYw7EcgxOMxice9S6DSG6GRrkMsBNyvgepI8qY7ZrJ1rlWI3AkmTtMCT6V2PROmxZ337otW8AopKtcxIJPP8s1p01Lsms9GPVaiNMJNdmfb0uothhcVnVEyElUALYLEjzAweJ7Vm2LO2VBx7sDz7gZ+wrr+tam2tvwH1BhlHiEieZgEREAgLPqwHeuZtWwu2COJjEZzW39PCm5KL7OZZqZX0NtdNBQMJxxiMe2Z\/Hr9K0ui3Alzc1htQoBhN20bj9B6Tgx2rPsWzMkGcT7c+9dJ05talpG09wQGYBVUMzE4J25OOxq2zODncZKA6vqhbe0i2EV2khVJbHHmMmOMRSGs3gW2e8oMeISxKEz2XGB9Kks9Q1Vh3AZN8FW32xKGcyI5\/3paDrDWocW0a4JiUBXbHPqTJqNYz+cjZINH0cXS3gXUcgkLIKsx9lOIj3qo+kZGZGALAwZyVjJIUYJAE81pXddqrDNtZFZwQ5RR+96H+wqhaG0NAk7fqT9Pf\/epHO4WTwM0nVkstcRQLUqZY2Q7OGzGNu3mPlrkrgyfvyIrrtFprd3UsTuaU4Tbk5xM9o\/l9K5XU29rMsRBODzWajCsmkdqe56etv0IWJPJpppxoVqwZhtCnGm0CApUaVAhWoigaIqkIaIoUqZEHVs9E1IEqyo0AkbwIHMk+p4z2rGFWtAfPHMggD1PYfc0lqbg0W0PE1kv2ngBlKiGIBCzII7eg7TRBBb0QgYMttGJz9zUms6VdtgA27igkBpQ4OMYBjmMmcUm0XhqEdipeYQqRGYmfzNYNjXLTN6t\/xizs7XR9G1sWQ4vAhtlxYAtknkg4P9TXL6rpem07srNdZkjcq5DRHmBxAzP55rUYDTs2lt3EKXSgYZLNAGFAUzJmD3xWjqtJbsWbl62FbcBJ3CVEkHcCSQu5Qs+prsS0ddlafw47OLDWThZlvOesmBrte90q9jUAOUCsFXYQvYM0DeaZb0bMCjCTbCh7owLY+bbtX5wViKyNW1xnN7aAHMCCIGOPanP1W69tbbPtVMQuCeOfXHc1zKo1Rs99+6v5OxZKbrwliT9eki5r7wYi1auM1s5VHJCiO+cr+aFm8yHwldgx+WQAoHcf8j696x3tkHzA5\/iB4PBq91C4txR5llMTuMt9B\/gxT6u6N09y4JpISpT9S1cQIFW3bLksS\/lkn1hhHl9vbNS9PtrcttLvbggEnNu2p7HdJk\/aqnSeo+G65uKIIOwyTMY9uKm1Wqu6l1tIMDy4hZHHmJ5Puay4w\/8AsvnZuXHS8hl7S3V81piwJ2hgIkT\/AAjkeszUvT0Z7UuwRE8qwD5m7iAfT+9LVp4GLYujOHYGQYIKgQARzkU271dTplsANv3kuSBGewgT\/wDNatHsUm7OsGfVPCiq+336FttVcFxVsrb8YiS6qMCANucD6+9Q2eseB\/8Aj8oBUZgjPJ+9VekXnAuW18P1O8gHBGAT9AfarvSdfZtncVUM7w0gFFUdoPBmm0cZuzEP5K9Taow6y2N6npbr7dRI8IbdpJA2yeAcgZJ7U+119heVwls+HtAdk3kBeIzE8+YCfSr\/AFfounNtmtXbgIuKTaA3SrAy0DgwZzAAHuK54LbBiGMcT5QR6HiD7VfZvrtkocZ7RnXh3Vrcs44ybV7R2R+ndukm+4uBlM2wBuxHzbtxIkmKrdNtkLmIkZH+HNYd0iZXAEcEenHPrW\/0XTwA7ggSJY52jvHvFSuTslvl0U3xjXS4dvJetJMMY\/e5GYBx78+nrWtoukMbI1Vl132+QhKvbkdiOTB4A+9T2tunZbzWlvWbtubYciSImYGQfqKiu2UCC8lxUBbFncQ6gZnE4Hqe1WSlueEcxJpken19+yT4y2r25YHj25ZQcbgYljHr601dTZdHUaZrjsfI25htUcnZE5j0b7VY\/wCrXbl5LlwC8TBi6AN+JAECRHpVNrrKzl7bq5DbPDJ8pJwuQIEHmabHGZea\/lcD8DNX1K4yLZFu1YRZJVAZY87pbIPE+smq6ryTx5cQMe8zU1y5afZ4IfC\/qM4g7piInFDUW\/KFJImTMH8COcTx9e1SCwJY+cHP6u\/d8ZmUssACAwwAOPQgf71QvaZwguNgOTHqfU\/zrQsWLn6l8giyzCSsDBOMHMFYrY6nr+nXbWwblKxtIXI\/tQ0lUbHObZ17pOFdcMPo44imkVLcAk7TI7TUbU7KxtCiaBpSAoUaFQhWpCkKVUDBo0KNMgDhV\/pGptW2bxrXiBlgeYqUMqd4I7gBse9Z4pwogaysHpNvVWbyn9ZjbtL5Q\/dRyMDBJ71zXxRYdfBJafFTcBMkAwQD3HPBp3TerM6Ms2bapa8wgBmUclTtPm4qv1fXOzv4hP7kSI+UeXj0HpzV9968JplGmqmreOh2o6uUcXNMPBbagn9+VGSD+6D3HepW6vqBaa3bYbXUK5URuABwTyZ3GayLUGSVkTz3P9xUulhdx3f\/AML39iew\/wA71ynbPG1s6n6ariSSJtL0\/wAVDtfzD90iBj3p17WIUKhQgU+VQJJK9weeftTXtsRu3EScKox6TM49IjtTf+ot5QAgCgADbBIB7nv\/AM1Kq628TeC2c5493kltag3kZSQDiCwliewBjH5plq4LP6Rb5h58BgQc49DUOo1RdgAoUN6HEk81PobwthhcVHBIM8lvQAjgTQtpUX7jyi2vUuXMl73X2Kl24ACFmJwI9fU+vtWne0SC0EDKLgAYv4uDu7beximp1hhKqFUT5QoELPJ47zWd+zT8ittkb3iAs98cL70ii30I7FHh\/wBFu4lsBFOfDYbiH+YH5go7GKtalFeRatbH3TAeVA+pyeap6rQW1B2XdxkBZWBHBJ+5Gf6U9rATCcr83mBBmMqPpSrgdtt4wi509obwrr77Ked0EeYgztk+pMSPWuy1nV\/CAN+y62wu60hbzAQE3nbwsfWZ4rzlraGXO4qIEdx9Y+lW9L1J1cMPPCldt0yAPQEntXT09iqq3cd8nK1endtmPTpGnreqE27gcEi4LfmVgWAEPEwD\/DIjGfU1z8epx6\/z\/NaXUevOz3CUtlb20ER8u3AhsQYGexms3UXQePKOdvMUtko25m5d+RdTCVfuuPK5LnT0N51tSxAlokdv6Hj8+9bnw\/q7bl7BdsKCiiCCwk\/0\/pWJ00qtxbrbm8wwBBYwJXj3FbulW0f1UslPDbcFEneZ+Vj2+k1dTVsjyZNXbveWaWktW0uMtxotebc4EhSJ8yg8TwRxUOp0yKyuq7jkK53AweDg\/wAuKsW7puo15bYVCYbaIW2zR5TJyZP86k09\/wAK2wuILrMQVKuP01\/7BnjtVmcPn9jn5a+q\/kbr9W9vYhthSinddBlnMyGIAgCCeBwakuaM+Gxa4TdQKxIghg0GWPOPT+VPeyBYtk7JfIJdSXVi0EKJ9hmqf\/T0ndtyOYJE\/WORS5fl+4JSjHhoaulAJJOD7k\/7xWN8QakAEruG7yggRgf\/ADFaPUNZtG0H5RLFSOO2TgY+59KyDa8WdQ5OxRA2n3wCDGeDiqtRcq448zZ7N0c9RZnyXf0K+s6pc8BLBus68kSexmM8R6VkGnXGJMnNMNGivw4JefZu1FniTyulwhU1qJNNNWlIDQNGmmlZAGlSNCoQrilQFGs6GCKNAUaZACKcKbRFMiDwa0ek2rjhraIWWQWIHHMZ7T\/as2rfTdc1ppBYK0BwrQWUEGJgxx6VHFSWGDdKPMezd6bonusLZKhQCwDEKGAgc\/Xirmv0mna01xYVra+aSAWeWAgekCTHesq3dW6126LawJgNO1ZMKTEx9eOa29U7Xrltbanww102iUVQSSCZYN2O\/gYx64sqUYtxZVdZZNp5+xzQsMqKZAkEnJBA9KjV2YCFmBJx\/M+3tW\/1rp9pbAY3re\/920F8+TEM3f14x71gWCVGAO3J98Tn0rFqoQU8Vs6Gmsc48romtXAwyds4kTMH0FSW9Q2EgYAUYE8AA57EVEpa4xLHB7wBIFQWrRaPMsLEyfTA49aujOVEYyi00+yOKsbTXPkdb0n4VtG2fE1CQQzFRGCOzGj0bSXQTaG6CHAOwHeNxUAk8DH05qtp+vM+oteDZ09vZtC75IfbnlpIk8ehpza57dx1vlwUV22owBVhIRflAJgZImZ4xFbqLKMOUVycqxXZxP7GL1zpFzTXglwqQw3CGBwe0jFUkZckAf8Aacjj1q31K62ougj5jHlzCj0Ht3n3oK+1gkKuBmN3Hf6zJ+9cSzmTwdnTuUa1uXPmys9hpUREjGR39aayNB8uQYPtUj3BLEGZ+YkD1weaYbxIwYP159z71Z7nhqK7GzPc5PocoUKAQZPqcLnmPpNSnQswmMcSx9f6VDatMTgckZIOB6j61qrbBEGWn1MQB9qs09eX7y4Muq1CikosgvdPM7re4hGIggTuieBnbHf3rasXH\/TS46sm07pgQQJBmM4ETUCagC5OwSVPnyxYkDBE4H09Dg1ONObiFWiI5jj6Dn+dbU89eRy5y9S2yMRsTfbC+ZQWO1jJzHoYqwuod8eEtojHlzMkGSTn7VU0mpCea7d3TEEnsJAj0HP+GnN1Rdw2LI\/iPE\/aoortmecpPMV0Xm0aTvIE\/wAXpPoTxVDXdWQqBJ2idx7mO3tWLr+sF3Aks2B5eBPbI7H2z96ia1sdRfyCICiAI7Z4+\/aknqIw4jy\/RGvT6CdjTseF6staWy15i7StgGZYkbiORz885z61ndX1iXH\/AEwVQcA8mO596bruou\/kDHwxwPbtMHJ96omqaqpSfiWdnTsnCuLqpfHr6gpUqaa1GXACaRpUKjCChRoUpAGhSpUCFajQpVnQwaIoUqZEHURTaNMAdTqaKNFAJrWoZQQGIDCGAOD9R3pLeMASYEwJwJ5gdpgfioqVN5EXBZTUkelT6dBc+Ymce+c9vsPzVAV1XRNMBpTdVIYypfcDA3CZXlcEDHNV\/p4TZY9XKpepiaq0UO1gQB2Iz\/xStjdkALAxJ5n\/AHrfudDJ8ZW3G4oVre+PMCJkNP8AL6VzmpIDQqlT3BM5+v1mpdo0vgY1Wt3ZUkS6i0ohSS3rGR9BVuz1a5sNrcCbmGZstgzljnNZnizzn6k4\/BFSjVnbtgbcYge1UQ080+S6dtcl0SvdYNIbcSsE8ekifQQKiuXVxEyCe9S9PRHbaxVRzLHGJgTGPSagdpMxA9JJrT+njKK3FC1Di8REcmDgVLZ05+aRH9JqGjVb02PgZYtSnlTWS3aB3FQDI5g+nJPtHentecCYMEY95qvY1TpJUxuEH3B5E1Nf6ncYAGBAAEAdv+aZ+MnhYZSq6JLLymSftxmZYgTP2yQPpP4qX9rZgQQx9e0z7d\/SqS65x2X97O3J3czQs664oIDYbnANK3qMcYLY0aTK3Nmrf02pVN+0Ku5VM\/QEHPInEUb+mRWD3HBGNy8n\/Vjtj+lUNBqC91PEuwuBLZEAYme3aa1upWraDalsMC3zK8q3BCg4g+w\/NFaay3454+QY6vT0SxCvL9WUDc04WQpYZ2CYOZAk9oj8VnanUFzJABgDAjj+tbHXjatqLaKha557h2EFCCBtWcrkNuHv24GDNXwphXxEzu+V\/vy\/YNA0qVMABptImlUZBTTaNA0CCNClQoEBQomhQIV6VKlWcYIpUqVFECKNKlTACKNKlTECKNKlRAKno5HBIn0NGlRIaNrrl0eGDtZbXyqwkH6+tULjySYiSTjtPb6UKVMKopdCmlSpURg04GlSokCDRpUqgA0KNKoQFAmlSqBBNS2dS6kFWI2sGAkwCDIMcTQpVCBv32di7nczEkk8knJP5plKlUBgVA0qVQI00KVKoyAoUqVKQE0KVKgQBoUqVAh\/\/9k=\" width=\"400px\"\/><\/center>\n\n\n### <center> Coronavirus<\/center>\n\n\n\n### Please leave a comment for further improvements. Thanks!\n#### Download updated world stats at https:\/\/www.kaggle.com\/imdevskp\/corona-virus-report\n   \n\n\n\n","042feb06":"Our recovery rate is doing pretty good compared to the death rate, and it is rising in an exponential manner","b6da0f16":"# Malaysia Analysis","90150f84":"## Borneo","e138b0ab":"### Data Exploration","d9b43eaf":"## Other States","175c1bec":"# New Cases Since RMO\n","8dc18b20":"## States with The Highest Cases","5a9e9b41":"# By-State Analysis","0d7b28aa":"# Geographical Representation (by states)","b0d638ba":"# General Outlook","9376ca6e":"Khairul Hafiz \n\nkhairulhafiz38@gmail.com","286547de":"# Confirmed and Active Cases\n","ee89a8bd":"# New Cases Daily","03c92284":"## Bar Race Chart","05d8d2bd":"## Malaysia","09c92352":"# Closed Cases in Malaysia","5506b193":"## Peninsular Malaysia"}}