{"cell_type":{"f318e7b1":"code","d7b9c33a":"code","ea16bd86":"code","e1e25542":"code","8f97977d":"code","59da605b":"code","8fafa730":"code","49f71c34":"code","dd09955a":"code","dfd5253c":"code","b8872c51":"code","d5b48acd":"code","60199d2d":"code","5f7a339c":"code","c245b73b":"code","1b2862ec":"code","1eb3cb10":"code","aa097740":"code","01a10ba7":"code","def762ec":"code","7efdde4b":"code","178d2d76":"code","ed578f46":"code","b56689eb":"code","b967b63d":"code","058498b9":"code","59a911c8":"code","c4419c2f":"code","2f92f0b9":"code","a622cdea":"code","811afd87":"code","c4f1bfec":"code","f7e21e45":"code","c5ef6cb2":"code","154f9197":"code","f0188b16":"code","6b5fd546":"code","a3b39690":"code","252148fc":"code","0c92c2c8":"code","4d546d37":"code","b3a7c68e":"code","a13f4735":"code","26c267d6":"code","d0b8e8a9":"code","59410594":"code","0a055498":"code","4bd27602":"code","95f86751":"code","a04c1152":"code","e13eb8c9":"code","141cf74e":"code","d1dfcd9c":"code","5fda51e5":"code","a91038b6":"code","d636343e":"code","3c7e311c":"markdown","79f3e74c":"markdown","522a979d":"markdown","7f95bde8":"markdown","a1c696be":"markdown","10633efb":"markdown","0655db0e":"markdown"},"source":{"f318e7b1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport plotly.express as px\nimport plotly.graph_objects as go\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d7b9c33a":"df = pd.read_csv(\"\/kaggle\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_confirmed.csv\")\ndf.head()","ea16bd86":"df = df.drop(columns = [\"Province\/State\",\"Lat\",\"Long\"])\ndf.head()","e1e25542":"df = df.groupby(\"Country\/Region\").aggregate(np.sum).T\ndf.head(100)","8f97977d":"df.index.name = \"Date\"\ndf","59da605b":"df = df.reset_index()\ndf","8fafa730":"melt_c_df = df.melt(id_vars=[\"Date\"],var_name=\"Country\",value_name=\"Confirmed\")\nmelt_c_df","49f71c34":"melt_c_df[\"Date\"] = pd.to_datetime(melt_c_df[\"Date\"])\nmelt_c_df","dd09955a":"max_date = melt_c_df[\"Date\"].max()\nmax_date","dfd5253c":"melt_c_df[\"Date\"] = melt_c_df[\"Date\"].dt.strftime(\"%Y\/%m\/%d\")\nmelt_c_df\n","b8872c51":"max_date = melt_c_df[\"Date\"].max()\nmax_date","d5b48acd":"total_c_df = melt_c_df[melt_c_df[\"Date\"]==max_date]\ntotal_c_df","60199d2d":"total_c = total_c_df[\"Confirmed\"].sum()\ntotal_c","5f7a339c":"figure = px.bar(total_c_df,x=\"Country\",y=\"Confirmed\")\nfigure","c245b73b":"figure = px.bar(total_c_df.sort_values(\"Confirmed\",ascending=False).head(30),x=\"Country\",y=\"Confirmed\",text=\"Confirmed\")\nfigure\n","1b2862ec":"figure = px.line(melt_c_df[melt_c_df[\"Country\"]==\"US\"],x=\"Date\",y=\"Confirmed\")\nfigure\n#US Confirmed","1eb3cb10":"figure = px.scatter(melt_c_df,x=\"Date\",y=\"Confirmed\",color=\"Country\")\nfigure","aa097740":"df_recovered = pd.read_csv(\"\/kaggle\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_recovered.csv\")\ndf_recovered.head(100)","01a10ba7":"df_recovered = df_recovered.drop(columns = [\"Province\/State\",\"Lat\",\"Long\"])\ndf_recovered","def762ec":"df_recovered = df_recovered.groupby(\"Country\/Region\").aggregate(np.sum).T\ndf_recovered","7efdde4b":"df_recovered.index.name = \"Date\"\ndf_recovered\n","178d2d76":"df_recovered = df_recovered.reset_index()\ndf_recovered","ed578f46":"melt_r_df = df_recovered.melt(id_vars=[\"Date\"],var_name=\"Country\",value_name=\"Recovered\")\nmelt_r_df","b56689eb":"melt_r_df[\"Date\"] = pd.to_datetime(melt_r_df[\"Date\"])\nmelt_r_df","b967b63d":"max_date = melt_r_df[\"Date\"].max()\nmax_date","058498b9":"melt_r_df[\"Date\"] = melt_r_df[\"Date\"].dt.strftime(\"%Y\/%m\/%d\")\nmelt_r_df","59a911c8":"max_date = melt_r_df[\"Date\"].max()\nmax_date","c4419c2f":"total_r_df = melt_r_df[melt_r_df[\"Date\"]==max_date]\ntotal_r_df","2f92f0b9":"total_r = total_r_df[\"Recovered\"].sum()\ntotal_r","a622cdea":"figure_r = px.bar(total_r_df,x=\"Country\",y=\"Recovered\")\nfigure_r","811afd87":"figure_r = px.bar(total_r_df.sort_values(\"Recovered\",ascending=False).head(30),x=\"Country\",y=\"Recovered\",text=\"Recovered\")\nfigure_r","c4f1bfec":"figure_r = px.line(melt_r_df[melt_r_df[\"Country\"]==\"US\"],x=\"Date\",y=\"Recovered\")\nfigure_r\n#US Recovered","f7e21e45":"figure_r = px.scatter(melt_r_df,x=\"Date\",y=\"Recovered\",color=\"Country\")\nfigure_r","c5ef6cb2":"df_death = pd.read_csv(\"\/kaggle\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_deaths.csv\")\ndf_death","154f9197":"df_death = df_death.drop(columns=[\"Province\/State\",\"Lat\",\"Long\"])\ndf_death","f0188b16":"df_death = df_death.groupby(\"Country\/Region\").aggregate(np.sum).T\ndf_death","6b5fd546":"df_death.index.name = \"Date\"\ndf_death\n","a3b39690":"df_death = df_death.reset_index()\ndf_death","252148fc":"melt_d_df = df_death.melt(id_vars=[\"Date\"],var_name=\"Country\",value_name=\"Deaths\")\nmelt_d_df","0c92c2c8":"melt_d_df[\"Date\"] = pd.to_datetime(melt_c_df[\"Date\"])\nmelt_d_df","4d546d37":"max_date = melt_d_df[\"Date\"].max()\nmax_date","b3a7c68e":"melt_d_df[\"Date\"] = melt_d_df[\"Date\"].dt.strftime(\"%Y\/%m\/%d\")\nmelt_d_df","a13f4735":"max_date = melt_d_df[\"Date\"].max()\nmax_date","26c267d6":"total_d_df = melt_d_df[melt_d_df[\"Date\"]==max_date]\ntotal_d_df","d0b8e8a9":"total_d = total_d_df[\"Deaths\"].sum()\ntotal_d","59410594":"figure_d = px.bar(total_d_df,x=\"Country\",y=\"Deaths\")\nfigure_d","0a055498":"figure_d = px.bar(total_d_df.sort_values(\"Deaths\",ascending=False).head(30),x=\"Country\",y=\"Deaths\",text=\"Deaths\")\nfigure_d","4bd27602":"figure_d = px.line(melt_d_df[melt_d_df[\"Country\"]==\"US\"],x=\"Date\",y = \"Deaths\")\nfigure_d\n#US Deaths","95f86751":"figure_d = px.scatter(melt_d_df,x = \"Date\",y = \"Deaths\",color=\"Country\")\nfigure_d","a04c1152":"active = total_c-total_d-total_r\nactive","e13eb8c9":"fig = go.Figure()\nfig.add_trace(go.Indicator(mode=\"number\",value=int(total_c),number={\"valueformat\":\"0.f\"},\n             title={\"text\":\"Total_Confirmed\"},domain={\"row\":0,\"column\":0}))\n\nfig.add_trace(go.Indicator(mode=\"number\",value=int(total_d),number={\"valueformat\":\"0.f\"},\n             title={\"text\":\"Total_Deaths\"},domain={\"row\":0,\"column\":1}))\n\nfig.add_trace(go.Indicator(mode=\"number\",value=int(total_r),number={\"valueformat\":\"0.f\"},\n             title={\"text\":\"Total_Recovered\"},domain={\"row\":1,\"column\":0}))\n\nfig.add_trace(go.Indicator(mode=\"number\",value=int(active),number={\"valueformat\":\"0.f\"},\n             title={\"text\":\"Total_Active_Case\"},domain={\"row\":1,\"column\":1}))\n\nfig.update_layout(grid={\"rows\":2,\"columns\":2,\"pattern\":\"independent\"})\nfig.show()","141cf74e":"#pd.set_option(\"mode.chained_assignment\",None)\nfig = px.choropleth(total_c_df,locations=\"Country\",locationmode=\"country names\",\n                    color_continuous_scale=\"dense\",\n                    color=np.log10(total_c_df[\"Confirmed\"]),range_color=(0,9))\nfig.show()","d1dfcd9c":"melt_c_df","5fda51e5":"A = melt_c_df.groupby(\"Date\").aggregate(np.sum)\nA","a91038b6":"A=A.reset_index()\nA","d636343e":"A[\"Daily\"] = A[\"Confirmed\"].diff()\nA","3c7e311c":"<a id = \"4\"><\/a><br>\n# Total","79f3e74c":"<u><h1>Confirmed World Map<\/h1><\/u><br>","522a979d":"<a id = \"1\"><\/a><br>\n# Confirmed","7f95bde8":"<a id = \"2\"><\/a><br>\n# Recovered","a1c696be":"1. Covid-19\n    * [Confirmed](#1)<br>\n    * [Recovered](#2)<br>\n    * [Deaths](#3)<br>\n    * [Total](#4)","10633efb":"<u><h1>Daily Confirmed<\/h1><\/u><br>","0655db0e":"<a id = \"3\"><\/a><br>\n# Deaths"}}