{"cell_type":{"736eded1":"code","1aa95deb":"code","eea1d4a1":"code","25d8198c":"code","3e51c776":"code","c7d7d515":"code","b119b25a":"code","ef38b448":"code","c32e6656":"code","57ec23c0":"code","fc89d904":"code","98c88814":"code","7e3d6df3":"code","d2340430":"code","07bbdc32":"code","22d9a128":"code","cdee3188":"code","8442367a":"code","9bc484d6":"code","0528ca07":"code","29731c06":"code","e26400f6":"code","715d73a7":"markdown","6bd6ba80":"markdown","95c88274":"markdown","a01fd4f3":"markdown","1fd5af44":"markdown","8e083af9":"markdown","c6038309":"markdown","4a5b464b":"markdown","589d180c":"markdown","7fbc76c5":"markdown","7dcd3e91":"markdown","b62d25b0":"markdown","7a1d3726":"markdown","80582377":"markdown","e0a12c55":"markdown","2d498387":"markdown","1da0ad46":"markdown","38e6512f":"markdown","a0e96152":"markdown","da19f164":"markdown","5c5bd34d":"markdown","3ac80094":"markdown","0b054333":"markdown"},"source":{"736eded1":"pip install highlight_text","1aa95deb":"import requests\nfrom bs4 import BeautifulSoup\nimport json\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom highlight_text import fig_text\nfrom matplotlib.patches import Arc\nimport numpy as np","eea1d4a1":"# Entering Aleksander Isak ID link\nlink = \"https:\/\/understat.com\/player\/5232\"\nres = requests.get(link)\nsoup = BeautifulSoup(res.content,'lxml')\nscripts = soup.find_all('script')\n# Get the grouped stats data, it's the second script executed in order\nstrings = scripts[3].string\n# Getting rid of unnecessary characters from json data\nind_start = strings.index(\"('\")+2 \nind_end = strings.index(\"')\") \njson_data = strings[ind_start:ind_end] \njson_data = json_data.encode('utf8').decode('unicode_escape')\ndata = json.loads(json_data)","25d8198c":"shots = pd.DataFrame(data) # Aleksander Isak shot data\n# Changing data type\nshots['xG'] = shots['xG'].astype('float64')\nshots['X'] = shots['X'].astype('float64')\nshots['Y'] = shots['Y'].astype('float64')","3e51c776":"# Setting dimensions, colour, orientation of football pitch\ndef football_pitch(x_min=0, x_max=105,\n               y_min=0, y_max=68,\n               pitch_color=\"#f0f0f0\",\n               line_color='black',\n               line_thickness=1.5,\n               point_size=20,\n               orientation=\"horizontal\",\n               aspect=\"full\",\n               axis='off',\n               ax=None\n               ):\n\n    if not ax:\n        raise TypeError(\"This function is intended to be used with an existing fig and ax in order to allow flexibility in plotting of various sizes and in subplots.\")\n\n\n    if orientation.lower().startswith(\"h\"):\n        first = 0\n        second = 1\n        arc_angle = 0\n\n        if aspect == \"half\":\n            ax.set_xlim(x_max \/ 2, x_max + 5)\n\n    elif orientation.lower().startswith(\"v\"):\n        first = 1\n        second = 0\n        arc_angle = 90\n\n        if aspect == \"half\":\n            ax.set_ylim(x_max \/ 2, x_max + 5)\n\n    \n    else:\n        raise NameError(\"You must choose one of horizontal or vertical\")\n    \n    ax.axis(axis)\n\n    rect = plt.Rectangle((x_min, y_min),\n                         x_max, y_max,\n                         facecolor=pitch_color,\n                         edgecolor=\"none\",\n                         zorder=-2)\n\n    ax.add_artist(rect)\n\n    x_conversion = x_max \/ 100\n    y_conversion = y_max \/ 100\n\n    pitch_x = [0,5.8,11.5,17,50,83,88.5,94.2,100] # x dimension markings\n    pitch_x = [x * x_conversion for x in pitch_x]\n\n    pitch_y = [0, 21.1, 36.6, 50, 63.2, 78.9, 100] # y dimension markings\n    pitch_y = [x * y_conversion for x in pitch_y]\n\n    goal_y = [45.2, 54.8] # goal posts\n    goal_y = [x * y_conversion for x in goal_y]\n\n    # side and goal lines\n    lx1 = [x_min, x_max, x_max, x_min, x_min]\n    ly1 = [y_min, y_min, y_max, y_max, y_min]\n\n    # outer box\n    lx2 = [x_max, pitch_x[5], pitch_x[5], x_max]\n    ly2 = [pitch_y[1], pitch_y[1], pitch_y[5], pitch_y[5]]\n\n    lx3 = [0, pitch_x[3], pitch_x[3], 0]\n    ly3 = [pitch_y[1], pitch_y[1], pitch_y[5], pitch_y[5]]\n\n    # goals\n    lx4 = [x_max, x_max+2, x_max+2, x_max]\n    ly4 = [goal_y[0], goal_y[0], goal_y[1], goal_y[1]]\n\n    lx5 = [0, -2, -2, 0]\n    ly5 = [goal_y[0], goal_y[0], goal_y[1], goal_y[1]]\n\n    # 6 yard box\n    lx6 = [x_max, pitch_x[7], pitch_x[7], x_max]\n    ly6 = [pitch_y[2],pitch_y[2], pitch_y[4], pitch_y[4]]\n\n    lx7 = [0, pitch_x[1], pitch_x[1], 0]\n    ly7 = [pitch_y[2],pitch_y[2], pitch_y[4], pitch_y[4]]\n\n\n    # Halfline, penalty spots, and kickoff spot\n    lx8 = [pitch_x[4], pitch_x[4]]\n    ly8 = [0, y_max]\n\n    lines = [\n        [lx1, ly1],\n        [lx2, ly2],\n        [lx3, ly3],\n        [lx4, ly4],\n        [lx5, ly5],\n        [lx6, ly6],\n        [lx7, ly7],\n        [lx8, ly8],\n        ]\n\n    points = [\n        [pitch_x[6], pitch_y[3]],\n        [pitch_x[2], pitch_y[3]],\n        [pitch_x[4], pitch_y[3]]\n        ]\n\n    circle_points = [pitch_x[4], pitch_y[3]]\n    arc_points1 = [pitch_x[6], pitch_y[3]]\n    arc_points2 = [pitch_x[2], pitch_y[3]]\n\n\n    for line in lines:\n        ax.plot(line[first], line[second],\n                color=line_color,\n                lw=line_thickness,\n                zorder=-1)\n\n    for point in points:\n        ax.scatter(point[first], point[second],\n                   color=line_color,\n                   s=point_size,\n                   zorder=-1)\n\n    circle = plt.Circle((circle_points[first], circle_points[second]),\n                        x_max * 0.088,\n                        lw=line_thickness,\n                        color=line_color,\n                        fill=False,\n                        zorder=-1)\n\n    ax.add_artist(circle)\n\n    arc1 = Arc((arc_points1[first], arc_points1[second]),\n               height=x_max * 0.088 * 2,\n               width=x_max * 0.088 * 2,\n               angle=arc_angle,\n               theta1=128.75,\n               theta2=231.25,\n               color=line_color,\n               lw=line_thickness,\n               zorder=-1)\n\n    ax.add_artist(arc1)\n\n    arc2 = Arc((arc_points2[first], arc_points2[second]),\n               height=x_max * 0.088 * 2,\n               width=x_max * 0.088 * 2,\n               angle=arc_angle,\n               theta1=308.75,\n               theta2=51.25,\n               color=line_color,\n               lw=line_thickness,\n               zorder=-1)\n\n    ax.add_artist(arc2)\n\n    ax.set_aspect(\"equal\")\n\n    return ax","c7d7d515":"fig, ax = plt.subplots(figsize=(11, 7))\n#Drawing a full pitch horizontally\nfootball_pitch(orientation=\"horizontal\",aspect=\"full\",line_color=\"black\",ax=ax, axis='on')\nplt.tight_layout()","b119b25a":"shots['X1'] = (shots['X']\/100)*105*100\nshots['Y1'] = (shots['Y']\/100)*68*100\n# Original X and Y\nshots['X'] = (shots['X']\/100)*105*100\nshots['Y'] = (shots['Y']\/100)*68*100","ef38b448":"# New dictionaries \ntotal_shots = shots[shots.columns[0]].count().tolist()\nxGcum = np.round(max(np.cumsum(shots['xG'])),3).tolist()\nxG_per_shot = np.round(max(np.cumsum(shots['xG']))\/(shots[shots.columns[0]].count()),3).tolist()\ngoal = shots[shots['result']=='Goal']\nshot_on_post = shots[shots['result']=='ShotOnPost']\nblocked_shot = shots[shots['result']=='BlockedShot']\nsaved_shot = shots[shots['result']=='SavedShot']\nmissed_shot = shots[shots['result']=='MissedShot']\ngoals = goal[goal.columns[0]].count().tolist()","c32e6656":"fig, ax = plt.subplots(figsize=(20, 10))\nfootball_pitch(orientation=\"vertical\",aspect=\"half\",line_color=\"black\",ax=ax,axis=\"off\")\n\n#Drawing a full pitch horizontally\nz = goal['xG'].tolist()\nz1 = [500 * i for i in z] # This is to scale the \"xG\" values for plotting\ncolor = {'Goal':'cyan', 'MissedShots':'red', 'BlockedShot':'tomato', 'SavedShot':'black', 'ShotOnPost':'Yellow'}\n## markers = {'Goal':'Star', 'MissedShots':'X', 'BlockedShot':'O', 'SavedShot':'V', 'ShotOnPost':'S'}\n\n# Plotting the goals, the missed chances shot on post etc \nplt.scatter(y=goal[\"X1\"],x=goal[\"Y1\"],s=goal['xG']*720, marker='o',color='cyan',edgecolors=\"black\",label='Goals')\nplt.scatter(y=shot_on_post[\"X1\"],x=shot_on_post[\"Y1\"],s=shot_on_post['xG']*720, marker='o',color='yellow',edgecolors=\"black\",label='Shot on Post',alpha=0.5)\nplt.scatter(y=missed_shot[\"X1\"],x=missed_shot[\"Y1\"],s=missed_shot['xG']*720, marker='o',color='red',edgecolors=\"black\",label='Missed Shot',alpha=0.5)\nplt.scatter(y=blocked_shot[\"X1\"],x=blocked_shot[\"Y1\"],s=blocked_shot['xG']*720, marker='o',color='green',edgecolors=\"black\",label='Blocked Shot',alpha=0.5)\nplt.scatter(y=saved_shot[\"X1\"],x=saved_shot[\"Y1\"],s=saved_shot['xG']*720, marker='o',color='purple',edgecolors=\"black\",label='Saved Shot',alpha=0.5)\n#legend \n# another way to do it \n#ax.legend(loc='upper center', bbox_to_anchor= (0.13, 0.87),\n            #borderaxespad=0, frameon=False)\nlegend = ax.legend(loc=\"upper center\",bbox_to_anchor= (0.14, 0.88),labelspacing=1.3,prop={'weight':'bold','size':11})\nlegend.legendHandles[0]._sizes = [500]\nlegend.legendHandles[1]._sizes = [500]\nlegend.legendHandles[2]._sizes = [500]\nlegend.legendHandles[3]._sizes = [500]\nlegend.legendHandles[4]._sizes = [500]\n\n# xG Size \nmSize = [0.05,0.10,0.2,0.4,0.6,0.8]\nmSizeS = [720 * i for i in mSize]\nmx = [60,60,60,60,60,60]\nmy = [92,94,96,98,100,102]\nplt.scatter(mx,my,s=mSizeS,facecolors=\"cyan\", edgecolor=\"black\")\nfor i in range(len(mx)):\n    plt.text(mx[i]+ 2.8, my[i], mSize[i], fontsize=12, color=\"black\",ha=\"center\", va=\"center\",fontweight='bold')\n# Annotation text\nfig_text(0.38,0.91, s=\"Aleksander Isak Career Shots\\n\", fontsize = 25, fontweight = \"bold\",c='cyan')\nfig_text(0.47,0.37, s=\"Shots:\\n\\nxGcum:\\n\\nxG per shot:\\n\\nGoals: \", fontsize = 12, fontweight = \"bold\",c='black')\nfig_text(0.54,0.37, s=\"<{}\\n\\n{}\\n\\n{}\\n\\n{}>\".format(total_shots,xGcum,xG_per_shot,goals), fontsize = 12, fontweight = \"bold\",c='cyan')","57ec23c0":"head = goal[goal['shotType']=='Head']\nleft_foot = goal[goal['shotType']=='LeftFoot']\nright_foot = goal[goal['shotType']=='RightFoot']\nhead = head[head.columns[0]].count().tolist()\nright_foot = right_foot[right_foot.columns[0]].count().tolist()\nleft_foot = left_foot[left_foot.columns[0]].count().tolist()","fc89d904":"fig, ax = plt.subplots(figsize=(20, 10))\nfootball_pitch(orientation=\"vertical\",aspect=\"half\",line_color=\"black\",ax=ax,axis=\"off\")\n\n#Drawing a full pitch horizontally\nz = goal['xG'].tolist()\nz1 = [500 * i for i in z] # This is to scale the \"xG\" values for plotting\ncolors = {'Goal':'cyan', 'MissedShots':'red', 'BlockedShot':'tomato', 'SavedShot':'black', 'ShotOnPost':'Yellow'}\n## markers = {'Goal':'Star', 'MissedShots':'X', 'BlockedShot':'O', 'SavedShot':'V', 'ShotOnPost':'S'}\n\n# Plotting the goals, the missed chances shot on post etc \nplt.scatter(y=goal[goal['shotType']=='Head']['X1'],x=goal[goal['shotType']=='Head']['Y1'],s=goal[goal['shotType']=='Head']['xG']*720, marker='o',color='cyan',edgecolors=\"black\",label='Head')\nplt.scatter(y=goal[goal['shotType']=='LeftFoot']['X1'],x=goal[goal['shotType']=='LeftFoot']['Y1'],s=goal[goal['shotType']=='LeftFoot']['xG']*720, marker='o',color='tomato',edgecolors=\"black\",label='Left Foot')\nplt.scatter(y=goal[goal['shotType']=='RightFoot']['X1'],x=goal[goal['shotType']=='RightFoot']['Y1'],s=goal[goal['shotType']=='RightFoot']['xG']*720, marker='o',color='yellow',edgecolors=\"black\",label='Right Foot')\n\n# xG Size\nmSize = [0.05,0.10,0.2,0.4,0.6,0.8]\nmSizeS = [720 * i for i in mSize]\nmx = [60,60,60,60,60,60]\nmy = [92,94,96,98,100,102]\nplt.scatter(mx,my,s=mSizeS,facecolors=\"cyan\", edgecolor=\"black\")\nfor i in range(len(mx)):\n    plt.text(mx[i]+ 2.5, my[i], mSize[i], fontsize=12, color=\"black\",ha=\"center\", va=\"center\",fontweight='bold')\n\n# Pitch map text\nfig_text(0.38,0.91, s=\"Aleksander Isak Career Goals\\n\", fontsize = 25, fontweight = \"bold\",c='cyan')\nfig_text(0.47,0.37, s=\"Goals:\\n\\nRight Foot:\\n\\nLeft Foot:\\n\\nHead: \", fontsize = 15, fontweight = \"bold\",c='black')\nfig_text(0.54,0.37, s=\" <{}>\\n\\n <{}>\\n\\n < {}>\\n\\n  <{}>\".format(goals,right_foot,left_foot,head), fontsize = 15, fontweight = \"light\",highlight_textprops=[{\"color\":'cyan'}, {'color':\"yellow\"}, {'color':\"tomato\"}, {'color':\"cyan\"}])\n\n# Legend\nlegend = ax.legend(loc=\"upper center\",bbox_to_anchor= (0.13, 0.87))\nlegend.legendHandles[0]._sizes = [1000]\nlegend.legendHandles[1]._sizes = [1000]\nlegend.legendHandles[2]._sizes = [1000]\n","98c88814":"# Entering Real Sociedad vs Barcelona match link\nlink = \"https:\/\/understat.com\/match\/15054\"\nres = requests.get(link)\nsoup = BeautifulSoup(res.content,'lxml')\nscripts = soup.find_all('script')\n# Get the shotsData, it's the second script executed in order\nstrings = scripts[1].string \n# Getting rid of unnecessary characters from json data\nind_start = strings.index(\"('\")+2 \nind_end = strings.index(\"')\") \njson_data = strings[ind_start:ind_end] \njson_data = json_data.encode('utf8').decode('unicode_escape')\ndata = json.loads(json_data)","7e3d6df3":"df_h = pd.DataFrame(data['h'])\ndf_a = pd.DataFrame(data['a'])\ndf = df_h.append(df_a)\n\n# Changing the data types \ndf['xG'] = df['xG'].astype('float64')\ndf['X'] = df['X'].astype('float64')\ndf['Y'] = df['Y'].astype('float64')\n\n# Adjusting the measurements \ndf['X'] = (df['X']\/100)*105*100\ndf['Y'] = (df['Y']\/100)*68*100\n\n# Dividing the df between away and home again\ndf_h = pd.DataFrame(df[df['h_a']=='h'])\ndf_a = pd.DataFrame(df[df['h_a']=='a'])\n\n# xG for each team\n# Sociedad\ntotal_shots_h = df_h[df_h.columns[0]].count()\nxGcum_h = np.round(max(np.cumsum(df_h['xG'])),3)\nxG_per_shot_h = np.round(max(np.cumsum(df_h['xG']))\/(df_h[df_h.columns[0]].count()),3)\ngoal_h = df_h[df_h['result']=='Goal']\ngoal_h = goal_h[goal_h.columns[0]].count()\nh_team = df['h_team'].iloc[0]\n\n# Barcelona \n# xG for each team\ntotal_shots_a = df_a[df_a.columns[0]].count().tolist()\nxGcum_a = np.round(max(np.cumsum(df_a['xG'])),3).tolist()\nxG_per_shot_a = np.round(max(np.cumsum(df_a['xG']))\/(df_a[df_a.columns[0]].count()),3).tolist()\ngoal_a = df_a[df_a['result']=='Goal']\ngoal_a = goal_a[goal_a.columns[0]].count().tolist()\na_team = df['a_team'].iloc[0]","d2340430":"fig, ax = plt.subplots(figsize=(11, 7))\n#Drawing a full pitch horizontally\nfootball_pitch(orientation=\"horizontal\",aspect=\"full\",line_color=\"black\",ax=ax)\n\n# Barcelona away team \nz_a = df_a['xG'].tolist()\nz1 = [1000 * i for i in z_a] # This is to scale the \"xG\" values for plotting\ncolors = {'Goal':'lightsteelblue', 'MissedShots':'tomato', 'BlockedShot':'gold', 'SavedShot':'gray', 'ShotOnPost':'peru'}\n## markers = {'Goal':'Star', 'MissedShots':'X', 'BlockedShot':'O', 'SavedShot':'V', 'ShotOnPost':'S'}\nplt.scatter(y=df_a[\"Y\"],x=df_a[\"X\"],s=z1, marker='o',color=df_a['result'].map(colors),edgecolors=\"black\")\nplt.tight_layout()\n\n# Real Sociedad  \nz_h = df_h['xG'].tolist()\nz2 = [1000 * i for i in z_h] # This is to scale the \"xG\" values for plotting\ncolors = {'Goal':'lightsteelblue', 'MissedShots':'tomato', 'BlockedShot':'gold', 'SavedShot':'gray', 'ShotOnPost':'peru'}\n## markers = {'Goal':'Star', 'MissedShots':'X', 'BlockedShot':'O', 'SavedShot':'V', 'ShotOnPost':'S'}\nplt.scatter(y=65-(df_h[\"Y\"]),x=105-(df_h[\"X\"]),s=z2, marker='o',color=df_h['result'].map(colors),edgecolors=\"black\")\nplt.tight_layout()\n\n# text\n# Sociedad\nfig_text(0.199,1.04, s=\"<{}> | Goals : <{}> | Shots : <{}> | xG per Shot : <{}> \".format(h_team,goal_h,total_shots_h,xG_per_shot_h), fontsize = 15, fontweight = \"bold\",highlight_textprops=[{\"color\": 'cyan'}, {\"color\": 'cyan'}, {\"color\": 'cyan'},{\"color\": 'cyan'}])\n\n# Barcelona\nfig_text(0.199,.99, s=\"<{}>        | Goals : <{}> | Shots : <{}> | xG per Shot : <{}> \".format(a_team,goal_a,total_shots_a,xG_per_shot_a), fontsize = 15, fontweight = \"bold\",highlight_textprops=[{\"color\": 'red'}, {\"color\": 'red'}, {\"color\": 'red'},{\"color\": 'red'}])\n\n# xG per team\nfig_text(0.1,.17, s=\"{} : <{}> \".format(h_team,xGcum_h), fontsize = 25.5, fontweight = \"bold\",highlight_textprops=[{\"color\": 'cyan'}])\nfig_text(0.55,.17, s=\"{} : <{}> \".format(a_team,xGcum_a), fontsize = 25.5, fontweight = \"bold\",highlight_textprops=[{\"color\": 'red'}])\n\n# Scatter plot for goals, blocked shots, missed shots\nplt.scatter(15,65,s=180, edgecolor=\"black\",color='lightsteelblue')\nplt.scatter(35,65,s=180, edgecolor=\"black\",color='tomato')\nplt.scatter(55,65,s=180, edgecolor=\"black\",color='gold')\nplt.scatter(75,65,s=180, edgecolor=\"black\",color='gray')\nplt.scatter(95,65,s=180, edgecolor=\"black\",color='peru')\nxx = [10,25,45,65,85]\nyy = [65,65,65,65,65]\nxx_yy = ['Goal', 'MissedShots', 'BlockedShot', 'SavedShot', 'ShotOnPost']\nfor i in range(len(xx)):\n    plt.text(xx[i], yy[i], xx_yy[i], fontsize=12, color=\"black\",ha=\"center\", va=\"center\",fontweight='bold')","07bbdc32":"pip install mplsoccer","22d9a128":"from mplsoccer import VerticalPitch, Pitch\nfrom mplsoccer.cm import create_transparent_cmap\nfrom mplsoccer.scatterutils import arrowhead_marker\nfrom mplsoccer.statsbomb import read_event, EVENT_SLUG\nfrom mplsoccer.utils import FontManager","cdee3188":"# Entering Aleksander Isak ID link\nlink = \"https:\/\/understat.com\/player\/5232\"\nres = requests.get(link)\nsoup = BeautifulSoup(res.content,'lxml')\nscripts = soup.find_all('script')\n# Get the grouped stats data, it's the second script executed in order\nstrings = scripts[3].string\n# Getting rid of unnecessary characters from json data\nind_start = strings.index(\"('\")+2 \nind_end = strings.index(\"')\") \njson_data = strings[ind_start:ind_end] \njson_data = json_data.encode('utf8').decode('unicode_escape')\ndata = json.loads(json_data)\n\nshots = pd.DataFrame(data) # Aleksander Isak shot data\n# Changing data type\nshots['xG'] = shots['xG'].astype('float64')\nshots['X'] = shots['X'].astype('float64')\nshots['Y'] = shots['Y'].astype('float64')\n\nshots['X1'] = (shots['X'])*100\nshots['Y1'] = (shots['Y'])*100\n# Original X and Y\nshots['X'] = (shots['X'])*100\nshots['Y'] = (shots['Y'])*100\n\n# New dictionaries \ntotal_shots = shots[shots.columns[0]].count().tolist()\nxGcum = np.round(max(np.cumsum(shots['xG'])),3).tolist()\nxG_per_shot = np.round(max(np.cumsum(shots['xG']))\/(shots[shots.columns[0]].count()),3).tolist()\ngoal = shots[shots['result']=='Goal']\nshot_on_post = shots[shots['result']=='ShotOnPost']\nblocked_shot = shots[shots['result']=='BlockedShot']\nsaved_shot = shots[shots['result']=='SavedShot']\nmissed_shot = shots[shots['result']=='MissedShot']\ngoals = goal[goal.columns[0]].count().tolist()","8442367a":"pitch = VerticalPitch(pad_bottom=0.5,  # pitch extends slightly below halfway line\n                      half=True,  # half of a pitch\n                      goal_type='box',\n                      goal_alpha=0.8,\n                      pitch_type='opta') # The measurements for Stats Perform are 105x68\n# Main code\nfig, ax = pitch.draw(figsize=(12, 10))\n\nsc1 = pitch.scatter(goal['X'],\n                    goal['Y'],\n                    edgecolors='#606060',  # give the markers a charcoal border\n                    c='None',  # no facecolor for the markers\n                    hatch='\/\/\/',  # the all important hatch (triple diagonal lines)\n                    s=(goal[\"xG\"]* 720) + 100,\n                    # for other markers types see: https:\/\/matplotlib.org\/api\/markers_api.html\n                    marker='football',\n                    ax=ax)\n","9bc484d6":"pitch = Pitch(pad_bottom=0.5,  # pitch extends slightly below halfway line\n                      half=False,  # \n                      goal_type='box',\n                      goal_alpha=0.8,\n                      pitch_type='opta') # The measurements for Stats Perform are 105x68\n# Main code\nfig, ax = pitch.draw(figsize=(12, 10))\n\nsc1 = pitch.scatter(goal['X'],\n                    goal['Y'],\n                    edgecolors='#606060',  # give the markers a charcoal border\n                    c='None',  # no facecolor for the markers\n                    hatch='\/\/\/',  # the all important hatch (triple diagonal lines)\n                    s=(goal[\"xG\"]* 720) + 100,\n                    # for other markers types see: https:\/\/matplotlib.org\/api\/markers_api.html\n                    marker='football',\n                    ax=ax)\nsc2 = pitch.scatter(shots[shots[\"result\"]!='Goal']['X'] ,\n                    shots[shots[\"result\"]!='Goal']['Y'],\n                    edgecolors='#606060',\n                    c='#b94b75',\n                    marker='football',\n                    ax=ax\n                    )\n\n# Downloading the font from Github \nfm_rubik = FontManager(('https:\/\/github.com\/google\/fonts\/blob\/main\/ofl\/rubikmonoone\/'\n                        'RubikMonoOne-Regular.ttf?raw=true'))\n\ntxt = ax.text(x=40, y=107, s='Aleksander Isak\\nCareer Shoots',\n              size=30,\n              # here i am using a downloaded font from google fonts instead of passing a fontdict\n              fontproperties=fm_rubik.prop, color=pitch.line_color,\n              va='center', ha='center')","0528ca07":"# Entering Real Sociedad vs Barcelona match link\nlink = \"https:\/\/understat.com\/match\/15054\"\nres = requests.get(link)\nsoup = BeautifulSoup(res.content,'lxml')\nscripts = soup.find_all('script')\n# Get the shotsData, it's the second script executed in order\nstrings = scripts[1].string \n# Getting rid of unnecessary characters from json data\nind_start = strings.index(\"('\")+2 \nind_end = strings.index(\"')\") \njson_data = strings[ind_start:ind_end] \njson_data = json_data.encode('utf8').decode('unicode_escape')\ndata = json.loads(json_data)","29731c06":"df_h = pd.DataFrame(data['h'])\ndf_a = pd.DataFrame(data['a'])\ndf = df_h.append(df_a)\n\n# Changing the data types \ndf['xG'] = df['xG'].astype('float64')\ndf['X'] = df['X'].astype('float64')\ndf['Y'] = df['Y'].astype('float64')\n\n# Adjusting the measurements \ndf['X'] = (df['X'])*100\ndf['Y'] = (df['Y'])*100\n\n# Dividing the df between away and home again\ndf_h = pd.DataFrame(df[df['h_a']=='h'])\ndf_a = pd.DataFrame(df[df['h_a']=='a'])\n\n# xG for each team\n# Sociedad\ntotal_shots_h = df_h[df_h.columns[0]].count()\nxGcum_h = np.round(max(np.cumsum(df_h['xG'])),3)\nxG_per_shot_h = np.round(max(np.cumsum(df_h['xG']))\/(df_h[df_h.columns[0]].count()),3)\ngoal_h = df_h[df_h['result']=='Goal']\ngoal_h = goal_h[goal_h.columns[0]].count()\nh_team = df['h_team'].iloc[0]\n# Barcelona \n# xG for each team\ntotal_shots_a = df_a[df_a.columns[0]].count().tolist()\nxGcum_a = np.round(max(np.cumsum(df_a['xG'])),3).tolist()\nxG_per_shot_a = np.round(max(np.cumsum(df_a['xG']))\/(df_a[df_a.columns[0]].count()),3).tolist()\ngoal_a = df_a[df_a['result']=='Goal']\ngoal_a = goal_a[goal_a.columns[0]].count().tolist()\na_team = df['a_team'].iloc[0]","e26400f6":"pitch = Pitch(pitch_color='grass', line_color='white',\n              stripe=True,pitch_type='opta')  # optional stripes\n\nfig, ax = pitch.draw(figsize=(12, 10))\n\n# FC Barcelona \n# No goals\nsc1_a = pitch.scatter(df_a[df_a[\"result\"]!='Goal']['X'] ,\n                    df_a[df_a[\"result\"]!='Goal']['Y'],\n                    edgecolors='#606060',\n                    c='#b94b75',\n                    marker='o',\n                    ax=ax,\n                    s=220\n                    )\n# Goals\nsc2_a = pitch.scatter(df_a[df_a[\"result\"]=='Goal']['X'] ,\n                    df_a[df_a[\"result\"]=='Goal']['Y'],\n                    edgecolors='#606060',\n                    c='gray',\n                    marker='football',\n                    ax=ax\n                    )\n\n# Real Sociedad \n# No goals\nsc1_a = pitch.scatter(100-(df_h[df_h[\"result\"]!='Goal']['X']) ,\n                    100-(df_h[df_h[\"result\"]!='Goal']['Y']),\n                    edgecolors='#606060',\n                    c='#b94b75',\n                    marker='o',\n                    ax=ax,\n                    s=220\n                    )\n# Goals\nsc1_a = pitch.scatter(100-(df_h[df_h[\"result\"]=='Goal']['X']) ,\n                    100-(df_h[df_h[\"result\"]=='Goal']['Y']),\n                    edgecolors='#606060',\n                    c='gray',\n                    marker='football',\n                    ax=ax\n                    )\nfig_text(0.6,.27, s=\"Barcelona\", fontsize = 25.5, fontweight = \"bold\",c='white')\nfig_text(0.215,.27, s=\"Real Sociedad\", fontsize = 25.5, fontweight = \"bold\",c='white')","715d73a7":"Let's take draw our first pitch with the axis on the see the full dimensions : ","6bd6ba80":"Once we've scraped the data let's proceed to change the data types and create several dictionaries in order to use as text for the shotmap : ","95c88274":"<a id=\"9.2\"><\/a>\n## Goals and misses for Aleksander Isak ","a01fd4f3":"<a id=\"2.\"><\/a>\n# Importing Libraries","1fd5af44":"<a id=\"1.1\"><\/a>\n## Notebook content\n* [1. Introduction](#1.)\n    - [1.1. Notebook Content.](#1.1)\n* [2.Importing libraries.](#2.)\n* [3.Scraping Isak's career shots.](#3.)\n* [4. Draw Pitch](#4.)\n* [5. Adjusting to pitch dimensions and creating dictionaries](#5.)\n* [6. Shotmap Isak's career shots](#6.)\n* [7. Shotmap Isak's career goals](#7.)\n* [8. Shotmap Home and Away teams](#8.)\n    - [8.1. Scraping Match Data.](#8.1)\n    - [8.2. Plotting the Shotmap for both teams.](#8.2)\n* [9. mpl soccer](#9.)\n    - [1.1. Installing mpl soccer.](#9.1)\n    - [1.1. Aleksander Isak's career shots.](#9.1)\n    - [1.1. Plotting the Shotmap for both teams.](#9.1)\n* [10. References](#10.) \n* [11. Other Notebooks](#11.)","8e083af9":"Now let's create some dictionaries to use them later as text for the shotmaps, it's definitely easier tham calling them as series or series values such as \" shots[shots['result']=='ShotOnPost'][\"xG\"].values \" for instance.","c6038309":"Check out more examples here : https:\/\/mplsoccer.readthedocs.io\/en\/latest\/gallery\/index.html#","4a5b464b":"<a id=\"6.\"><\/a>\n# Shootmap : Alexander Isak career shots\nNow that we are all set, let's plot the career shots by Aleksander Isak , in order to represent the xG quality shots, if the shot was high quality , it'll be represent it bigger in the pitch : ","589d180c":"<a id=\"9.3\"><\/a>\n## Match shots\nNow let's scrape match shots data for a new shotmap using mpl soccer","7fbc76c5":"<a id=\"7.\"><\/a>\n# Aleksander Isak Goals and missed shots\nLet's go ahead now and represent Isak's career goals using the same premises as the shotmap above:","7dcd3e91":"<a id=\"10.\"><\/a>\n# References \nThe main references for this notebook were : \n\n   1. https:\/\/github.com\/mckayjohns\/Viz-Templates\/blob\/master\/shotmaps.ipynb\n   \n   \n   2. https:\/\/github.com\/eddwebster\/football_analytics\/blob\/master\/scripts\/FCPython.py \n   \n   \n   3. https:\/\/mplsoccer.readthedocs.io\/en\/latest\/gallery\/index.html#\n   \n   \n   4. https:\/\/github.com\/tuangauss\/DataScienceProjects\/blob\/master\/Python\/football_visual.ipynb\n   ","b62d25b0":"<a id=\"4.\"><\/a>\n# Draw Pitch\n\nLet's create a function to draw a football pitch, this function is based on this tutorial by FC Python and all the credit goes to him and his amazing website :\n\nLet's include some options such as whether the pitch is only half or full, the dimensions, the line thickness and the orientation: ","7a1d3726":"<a id=\"11.0\"><\/a>\n# Other Notebooks \nOther notebooks regarding this topic : \n\n   1. https:\/\/github.com\/mousch\/UnderStat-notebooks\/blob\/master\/ShotMap.ipynb\n   \n   \n   2. https:\/\/stackoverflow.com\/questions\/65637464\/is-there-a-way-i-can-make-my-football-shot-map-interactive-using-plotly-widgets \n   \n   \n   3. Also this response on Stack Overflow https:\/\/stackoverflow.com\/questions\/65637464\/is-there-a-way-i-can-make-my-football-shot-map-interactive-using-plotly-widgets \n   \n   \n   4. https:\/\/github.com\/tuangauss\/DataScienceProjects\/blob\/master\/Python\/football_visual.ipynb","80582377":"Let's once again scrape the data for Aleksander Isak : ","e0a12c55":"<a id=\"8.2\"><\/a>\n## Plotting the shotmap\nNow let's plot it using the entire field and using the same premises as before, the higher quality the chance is , the bigger is represent it: ","2d498387":"Notice how the measurements the field are 105x68 so we are forced to adapt the Understat data to the field measurements","1da0ad46":"<a id=\"3.\"><\/a>\n# Scraping Isak's career shots\nLet's start first by scraping using BS4 the career shots made by Aleksander Isak and then proceed to change their data types to be able to manipulate them later: ","38e6512f":"<a id=\"8.1\"><\/a>\n## Scraping match data\nScraping match data instead of player data as done before with Aleksander Isak : ","a0e96152":"<a id=\"1.\"><\/a>\n# Introduction\n\n\n**Let's explore now shotmaps using shots data from Understat. First we will plot the data in a pitch created by ourselves, based on the great [tutorial by FC Python](https:\/\/fcpython.com\/visualisation\/drawing-pass-map-python) and then using [mpl soccer library](https:\/\/mplsoccer.readthedocs.io\/en\/latest\/gallery\/index.html) created by Andrew Rowlinson**\n\nHere are some of the other notebooks created for the Understat Series :\n\n1. [Understat Series : Webscraping of Understat using the Beautiful Soup](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-webscraping-using-beautiful-soup)\n2. [Understat Series : Understat package](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-understat-package)\n\n3. [Understat Series : Webscraping using Selenium](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-webscraping-using-selenium)\n\n4. [Understat Series : Webscraping using for loops](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-webscraping-using-for-loops)\n\n5. [Understat Series : Probabilities and Random](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-probabilities-and-random)\n\n6. [Understat Series : Diverging plots](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-diverging-plots)\n\n7. [Understat Series : xG Rolling averages](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-xg-rolling-averages)\n\n8. [Understat Series : xG Flow Chart](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-xg-flow-chart)\n\n9. [Understat Series : Shotmaps](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-shotmaps)\n\n10. [Understat Series : Heatmaps](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-heatmaps)\n\n11. [Understat Series : Top 2 Goalscorers](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-top-2-goalscorers)\n\n12. [Understat Series : Dashboards](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-dashboards)\n","da19f164":"<a id=\"9.\"><\/a>\n# Using  MPL Soccer\nIf you'd rather use a library instead creating the function, mpl soccer is the best , has included multiple options such as what pitch to choose based on the data provider such as statsbombo, Stats perform, another options include full or half pitch, background color and vertical or horizontal. It's all thanks to this great man [Andrew Rowlinson](https:\/\/twitter.com\/numberstorm?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor) and his fantastic library [mpl soccer](https:\/\/mplsoccer.readthedocs.io\/en\/latest\/gallery\/index.html)","5c5bd34d":"<a id=\"8.\"><\/a>\n# Shotmap : Match both teams\nNow let's focus on shotmap for both teams representing a match : ","3ac80094":"# Understat Series : Shotmaps\n\n\n\n**By Jose Gonzalez**\n\n\n![image-2.png](attachment:image-2.png)","0b054333":"<a id=\"5.\"><\/a>\n# Adjusting to pitch dimensions and creating dictionaries\nUnderstat data is measured at 100x100 , therefore it is imperative to adapt Understat's dimensions to our pitch and also keep in mind that the X and Y column values are between 0 and 1 so let's multiply by 100 : "}}