{"cell_type":{"6d64f193":"code","c3f093ea":"code","df3e7a64":"code","c1cc645b":"code","d6358c7e":"code","210bba27":"code","c2f98bb9":"code","7e711419":"code","06d3f311":"code","b3e016f6":"code","bd97f0f9":"code","16212739":"code","e8e5d0a5":"code","d05e6f47":"code","c903311c":"code","89894da1":"code","bb2730c7":"code","aca6db83":"code","dd7f8ea1":"code","415bdff7":"code","37967261":"code","138abe8d":"markdown","61ea9c67":"markdown","536fa272":"markdown","21645082":"markdown","ad83a94d":"markdown","0770e6ec":"markdown","16660a55":"markdown","c1274f9f":"markdown","01be65f3":"markdown","0ea26d20":"markdown","274278d8":"markdown","debf3b72":"markdown","b25380b4":"markdown","ecf93380":"markdown","03d21b77":"markdown","4865b004":"markdown"},"source":{"6d64f193":"import numpy as np","c3f093ea":"a = np.array([1,2,3])\na","df3e7a64":"b = np.array([[1,2,3],[4,5,6]])\nprint(b)\n\nprint('-------------------------------------------')\n\n# Print out the shape of array\nprint('Shape:' + str(b.shape))\n\nprint('-------------------------------------------')\n\n# Shape is a tuple , first is no of rows and secords element is no of columns\n\n# Print out the data type of array\nprint(b.dtype)","c1cc645b":"my_list = [1,2,3]\n\n#In order to multiply each element of a list with a scalar, we need to write a loop\nemp_list = []\nfor element in my_list:\n    emp_list.append(element*2)\nprint(emp_list)  \n\n#We cannot do straight way elementwise multiplication in list \nmy_list*2 #This is doing concatenation","d6358c7e":"a = np.array([1,2,3])\nprint(a*2)            #Much faster way to do","210bba27":"a = np.array([1,2,3])\nb = np.array([4,5,6])\nprint(a+b)             #same as np.add(a,b)\nprint(a-b)             #same as np.substract(a,b)\nprint (np.multiply(a,b))  \nprint (np.divide(a,b)) \nprint(np.sqrt(a))       #Elementwise square root","c2f98bb9":"x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\nprint(np.dot(x,y))  ","7e711419":"x = np.array([[1,2],[3,4]])\nprint(np.transpose(x))","06d3f311":"a = np.zeros((2,2))   #Create a 2*2 array of zeros\nprint(a)","b3e016f6":"b = np.ones((1,2))    #array of all ones\nprint(b)","bd97f0f9":"c = np.eye(2)         #Creates an 2*2 Identity matrix\nprint(c)","16212739":"d = np.random.random((2,2))  #Creates an array of random numbers\nprint(d)","e8e5d0a5":"np.arange(1,10)\nnp.arange(1, 10, 2)","d05e6f47":"# Create an 2-D array of 3 rows and 4 columns\na = np.array([[1,2,3,4], [5,6,7,8], [9,10,11,12]]) \nprint(a)","c903311c":"print (a[ : , : ]) #Prints all rows and Columns","89894da1":"print(a[1 :  ,  : ]) # From 2nd row to all rows & all the columns","bb2730c7":"print(a[0,3]) # Print the 4th element of 1st row\nprint(a[2,0]) # Print the first element of 3rd row","aca6db83":"print(a[ :  , 1 : 3]) # All rows along with 2nd & 3rd columns","dd7f8ea1":"# Suppose we want all the records of the array which are greater than 3\nprint(a>2)\nprint(a[a>2])","415bdff7":"# Create an 2-D array of 3 rows and 4 columns\na = np.array([[1,2,3,4], [5,6,7,8], [9,10,11,12]]) \nprint(a)\n\nprint('-------------------------------------------')\n\n# Suppose we want to reshape the array with 2 rows and 6 columns\na = a.reshape(2,6)\nprint('reshaped array:')\na","37967261":"a = np.array([[1,2,3],[4,5,6],[10,15,100]])\nprint(np.median(a)) # Median \nprint(np.mean(a)) # Mean\nprint(np.var(a)) # Variance - average of squared deviations from mean \nprint(np.std(a)) # Standard Deviation - square root of variance","138abe8d":"Import the Numpy Library","61ea9c67":"Array Indexing and Slicing","536fa272":"Dot Product","21645082":"Numpy Statistical Functions","ad83a94d":"Boolean Indexing ","0770e6ec":"Different functions to create types of Numpy Arrays","16660a55":"# Numpy - \n\nNumpy is the short form of \u2018Numerical Python\u2018. This is one library you should learn if you are interested in Data Science with Python. The core of Numpy is it\u2019s N-Dimension Array which is similar to List but has many advance features over List like \u2013\n\n - More compact.\n - Faster access in Reading and writing items.\n - Ease of doing element wise operation in Numpy.\n - Numpy has inbuilt functions to do mathematical operations on arrays.\n\nAs we are using Jupyter notebook from Anaconda, Numpy library is already installed in Anaconda. But we need to import the Numpy library. Now let's look into the Numpy array, it\u2019s advantages over list and different available functionalities of Numpy.\n","c1274f9f":"Matrix Transpose","01be65f3":"Creating an 1-D Numpy Array","0ea26d20":"Comparison with List","274278d8":"Creating an 2-D Array ","debf3b72":"Mathematical Operations","b25380b4":"To Slice and Dice an N-D Array below is rule of positions array[row_start : row_end , column_start : column_end] # Excludes the end positions\n\nIndexing here also starts from 0","ecf93380":"Reshaping an array","03d21b77":"However in Numpy Array we can easily do elementwise operation\nAvoiding the slow for loop","4865b004":"Creating a sequence"}}