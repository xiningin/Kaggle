{"cell_type":{"7b8f5f1b":"code","e508e2c3":"code","04271dca":"code","9ca20662":"code","628f4ffe":"code","3eca4220":"code","5b7349d7":"code","da3978f7":"code","8573ce34":"code","d579a447":"code","fe56add2":"code","55b581bf":"code","bdfc7742":"code","d4baf399":"markdown","48ecf94f":"markdown","06e0e991":"markdown","63b6f9d1":"markdown","febf6aaa":"markdown","e2486343":"markdown","f8699f62":"markdown","adf2c8ed":"markdown"},"source":{"7b8f5f1b":"import numpy as np \nimport pandas as pd\nimport os\nfrom pathlib import Path\nfrom sklearn.model_selection import train_test_split \nfrom keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow import keras\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPooling2D\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.losses import SparseCategoricalCrossentropy\nimport tensorflow as tf","e508e2c3":"direc = Path('..\/input\/a-large-scale-fish-dataset\/Fish_Dataset\/Fish_Dataset')\nfilepaths = list(direc.glob(r'**\/*.png'))\nLabels = list(map(lambda x: os.path.split(os.path.split(x)[0])[1],filepaths))\n\n\n\nfilepaths = pd.Series(filepaths, name='FilePaths').astype(str)\nLabels = pd.Series(Labels, name='Labels').astype(str)\n\n\nimg_df = pd.merge(filepaths, Labels, right_index = True, left_index = True)\n\nimg_df = img_df[ img_df['Labels'].apply(lambda x: x[-2:]!='GT') ]\n\n#Resampling it\nimg_df=img_df.sample(frac = 1).reset_index(drop=True)\nimg_df.head()","04271dca":"# Showing 9Images \nimport matplotlib.pyplot as plt\nf,a = plt.subplots(nrows=3, ncols=3,figsize=(13, 7),\n                        subplot_kw={'xticks': [], 'yticks': []})\n\nfor i, ax in enumerate(a.flat):\n    ax.imshow(plt.imread(img_df.FilePaths[i]))\n    ax.set_title(img_df.Labels[i])\n    \nplt.tight_layout()\nplt.show()","9ca20662":"print(f\" Count of Rows : {img_df.shape[0]} \\n Count of Columns : {img_df.shape[1]} \")","628f4ffe":"img_df['Labels'].value_counts(ascending=True)","3eca4220":"train_ratio = 0.75\nvalidation_ratio = 0.10\ntest_ratio = 0.15\n\n\nx_train, x_test = train_test_split(img_df, test_size=1 - train_ratio)\nx_val, x_test = train_test_split(x_test, test_size=test_ratio\/(test_ratio + validation_ratio)) \n\nprint(f'Shape of Training Data : ',x_train.shape)\nprint(f'Shape of Testing Data : ',x_test.shape)\nprint(f'Shape of Validation Data : ',x_val.shape)\nx_testt = x_test.copy()","5b7349d7":"img_datagen = ImageDataGenerator(preprocessing_function=tf.keras.applications.mobilenet_v2.preprocess_input)\n\nimg_size=(224, 224)    \n\nx_train = img_datagen.flow_from_dataframe(dataframe = x_train, x_col='FilePaths', y_col='Labels', target_size=img_size, color_mode='rgb',class_mode='categorical',batch_size=32,seed=42)\nx_test = img_datagen.flow_from_dataframe(dataframe = x_test, x_col='FilePaths', y_col='Labels', target_size=img_size,color_mode='rgb',class_mode='categorical',batch_size=32,seed=42)\nx_val = img_datagen.flow_from_dataframe(dataframe = x_val, x_col='FilePaths', y_col='Labels', target_size=img_size, color_mode='rgb',class_mode='categorical',batch_size=32,seed=42)","da3978f7":"fc_model = tf.keras.models.Sequential([\n  tf.keras.layers.experimental.preprocessing.Rescaling(1.\/255),\n  tf.keras.layers.Flatten(input_shape=(113,)),\n  tf.keras.layers.Dense(128, activation='relu'),\n  tf.keras.layers.Dropout(0.2),\n    tf.keras.layers.Dense(128, activation='relu'),\n  tf.keras.layers.Dropout(0.2),\n  tf.keras.layers.Dense(9,activation=\"softmax\")\n])\n\nfc_model.compile(optimizer=\"adam\",\n             loss=\"categorical_crossentropy\",\n             metrics=[\"accuracy\"])","8573ce34":"# Training Model","d579a447":"Callback = tf.keras.callbacks.EarlyStopping(monitor='accuracy', patience=3)\nmo_fit = fc_model.fit(x_train,\n                validation_data = x_val,\n                epochs = 10, callbacks=Callback)","fe56add2":"print('Model summary :')\nprint()\nfc_model.summary()","55b581bf":"test_accuracy = fc_model.evaluate(x_test)[1] * 100\nprint('Test accuracy is : ',test_accuracy, '%' )","bdfc7742":"accuracy = mo_fit.history['accuracy']\nloss = mo_fit.history['loss']\nvalidation_loss = mo_fit.history['val_loss']\nvalidation_accuracy = mo_fit.history['val_accuracy']\n\n\n\nplt.figure(figsize=(17, 7))\nplt.subplot(2, 2, 1)\nplt.plot(range(10), accuracy, label='Training Accuracy')\nplt.plot(range(10), validation_accuracy, label='Validation Accuracy')\nplt.legend(loc='upper left')\nplt.title('Accuracy : Training Vs Validation ')\n\n\n\nplt.subplot(2, 2, 2)\nplt.plot(range(10), loss, label='Training Loss')\nplt.plot(range(10), validation_loss, label='Validation Loss')\nplt.title('Loss : Training Vs Validation ')\nplt.legend(loc='upper right')\nplt.show()","d4baf399":"# Types of Fishes","48ecf94f":"# Creating Model","06e0e991":"# 3.Agumenting Data","63b6f9d1":"# Shape","febf6aaa":"# Splitting Data","e2486343":"# 2.Loading Data","f8699f62":"# Displaying Images","adf2c8ed":"# Importing Modeules"}}