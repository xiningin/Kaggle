{"cell_type":{"e73b7f5c":"code","8bf3d155":"code","641984da":"code","4fc29c28":"code","7cc96dd1":"code","01cea6f4":"code","446892cc":"code","82b3576f":"code","2b0c6107":"code","11d0d480":"code","63533fc3":"code","fea64bc0":"code","4d76b676":"code","f69c81ad":"code","69c707d1":"code","71f06b1f":"code","58e8d2ff":"code","fdc9afd8":"code","8a34aa1c":"code","90248825":"code","fba16f96":"markdown","9620bb90":"markdown","faf3612f":"markdown","2ad88701":"markdown","2252aa43":"markdown","08acbe0a":"markdown","eaa03dfe":"markdown","952a9735":"markdown","a72acd18":"markdown","49175f0b":"markdown","90f77989":"markdown","67b8bab1":"markdown","2987d461":"markdown","67ea2eb9":"markdown","32c789a1":"markdown","aec512b7":"markdown","2c956f51":"markdown","a1126092":"markdown","6fc59092":"markdown","355febee":"markdown","47387150":"markdown"},"source":{"e73b7f5c":"from mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt # plotting\nimport numpy as np # linear algebra\nimport os # accessing directory structure\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n","8bf3d155":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","641984da":"# Distribution graphs (histogram\/bar graph) of column data\ndef plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n    nunique = df.nunique()\n    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\n    nRow, nCol = df.shape\n    columnNames = list(df)\n    nGraphRow = (nCol + nGraphPerRow - 1) \/ nGraphPerRow\n    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n    for i in range(min(nCol, nGraphShown)):\n        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n        columnDf = df.iloc[:, i]\n        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n            valueCounts = columnDf.value_counts()\n            valueCounts.plot.bar()\n        else:\n            columnDf.hist()\n        plt.ylabel('counts')\n        plt.xticks(rotation = 90)\n        plt.title(f'{columnNames[i]} (column {i})')\n    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)\n    plt.show()\n","4fc29c28":"# Correlation matrix\ndef plotCorrelationMatrix(df, graphWidth):\n    filename = df.dataframeName\n    df = df.dropna('columns') # drop columns with NaN\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    if df.shape[1] < 2:\n        print(f'No correlation plots shown: The number of non-NaN or constant columns ({df.shape[1]}) is less than 2')\n        return\n    corr = df.corr()\n    plt.figure(num=None, figsize=(graphWidth, graphWidth), dpi=80, facecolor='w', edgecolor='k')\n    corrMat = plt.matshow(corr, fignum = 1)\n    plt.xticks(range(len(corr.columns)), corr.columns, rotation=90)\n    plt.yticks(range(len(corr.columns)), corr.columns)\n    plt.gca().xaxis.tick_bottom()\n    plt.colorbar(corrMat)\n    plt.title(f'Correlation Matrix for {filename}', fontsize=15)\n    plt.show()\n","7cc96dd1":"# Scatter and density plots\ndef plotScatterMatrix(df, plotSize, textSize):\n    df = df.select_dtypes(include =[np.number]) # keep only numerical columns\n    # Remove rows and columns that would lead to df being singular\n    df = df.dropna('columns')\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    columnNames = list(df)\n    if len(columnNames) > 10: # reduce the number of columns for matrix inversion of kernel density plots\n        columnNames = columnNames[:10]\n    df = df[columnNames]\n    ax = pd.plotting.scatter_matrix(df, alpha=0.75, figsize=[plotSize, plotSize], diagonal='kde')\n    corrs = df.corr().values\n    for i, j in zip(*plt.np.triu_indices_from(ax, k = 1)):\n        ax[i, j].annotate('Corr. coef = %.3f' % corrs[i, j], (0.8, 0.2), xycoords='axes fraction', ha='center', va='center', size=textSize)\n    plt.suptitle('Scatter and Density Plot')\n    plt.show()\n","01cea6f4":"nRowsRead = 1000 # specify 'None' if want to read whole file\n# 01-23-2020_1200.csv may have more rows in reality, but we are only loading\/previewing the first 1000 rows\ndf1 = pd.read_csv('\/kaggle\/input\/archived_data\/archived_daily_case_updates\/01-23-2020_1200.csv', delimiter=',', nrows = nRowsRead)\ndf1.dataframeName = '01-23-2020_1200.csv'\nnRow, nCol = df1.shape\nprint(f'There are {nRow} rows and {nCol} columns')","446892cc":"df1.head(5)","82b3576f":"plotPerColumnDistribution(df1, 10, 5)","2b0c6107":"plotCorrelationMatrix(df1, 8)","11d0d480":"plotScatterMatrix(df1, 15, 10)","63533fc3":"nRowsRead = 1000 # specify 'None' if want to read whole file\n# 01-26-2020_1100.csv may have more rows in reality, but we are only loading\/previewing the first 1000 rows\ndf2 = pd.read_csv('\/kaggle\/input\/archived_data\/archived_daily_case_updates\/01-26-2020_1100.csv', delimiter=',', nrows = nRowsRead)\ndf2.dataframeName = '01-26-2020_1100.csv'\nnRow, nCol = df2.shape\nprint(f'There are {nRow} rows and {nCol} columns')","fea64bc0":"df2.head(5)","4d76b676":"plotPerColumnDistribution(df2, 10, 5)","f69c81ad":"plotCorrelationMatrix(df2, 8)","69c707d1":"plotScatterMatrix(df2, 15, 10)","71f06b1f":"nRowsRead = 1000 # specify 'None' if want to read whole file\n# 01-25-2020_0000.csv may have more rows in reality, but we are only loading\/previewing the first 1000 rows\ndf3 = pd.read_csv('\/kaggle\/input\/archived_data\/archived_daily_case_updates\/01-25-2020_0000.csv', delimiter=',', nrows = nRowsRead)\ndf3.dataframeName = '01-25-2020_0000.csv'\nnRow, nCol = df3.shape\nprint(f'There are {nRow} rows and {nCol} columns')","58e8d2ff":"df3.head(5)","fdc9afd8":"plotPerColumnDistribution(df3, 10, 5)","8a34aa1c":"plotCorrelationMatrix(df3, 8)","90248825":"plotScatterMatrix(df3, 15, 10)","fba16f96":"### Let's check 2nd file: \/kaggle\/input\/archived_data\/archived_daily_case_updates\/01-26-2020_1100.csv","9620bb90":"Now you're ready to read in the data and use the plotting functions to visualize the data.","faf3612f":"Distribution graphs (histogram\/bar graph) of sampled columns:","2ad88701":"Scatter and density plots:","2252aa43":"Correlation matrix:","08acbe0a":"Correlation matrix:","eaa03dfe":"Distribution graphs (histogram\/bar graph) of sampled columns:","952a9735":"### Let's check 3rd file: \/kaggle\/input\/archived_data\/archived_daily_case_updates\/01-25-2020_0000.csv","a72acd18":"The next hidden code cells define functions for plotting data. Click on the \"Code\" button in the published kernel to reveal the hidden code.","49175f0b":"Let's take a quick look at what the data looks like:","90f77989":"Scatter and density plots:","67b8bab1":"## Conclusion\nVisual Dashboard (desktop):\nhttps:\/\/www.arcgis.com\/apps\/opsdashboard\/index.html#\/bda7594740fd40299423467b48e9ecf6\n\nVisual Dashboard (mobile):\nhttp:\/\/www.arcgis.com\/apps\/opsdashboard\/index.html#\/85320e2ea5424dfaaa75ae62e5c06e61\n\nLancet Article:\nAn interactive web-based dashboard to track COVID-19 in real time\n\nProvided by Johns Hopkins University Center for Systems Science and Engineering (JHU CSSE):\nhttps:\/\/systems.jhu.edu\/\n\nData Sources:\n\nWorld Health Organization (WHO): https:\/\/www.who.int\/\nDXY.cn. Pneumonia. 2020. http:\/\/3g.dxy.cn\/newh5\/view\/pneumonia.\nBNO News: https:\/\/bnonews.com\/index.php\/2020\/02\/the-latest-coronavirus-cases\/\nNational Health Commission of the People\u2019s Republic of China (NHC):\nhttp:\/\/www.nhc.gov.cn\/xcs\/yqtb\/list_gzbd.shtml\nChina CDC (CCDC): http:\/\/weekly.chinacdc.cn\/news\/TrackingtheEpidemic.htm\nHong Kong Department of Health: https:\/\/www.chp.gov.hk\/en\/features\/102465.html\nMacau Government: https:\/\/www.ssm.gov.mo\/portal\/\nTaiwan CDC: https:\/\/sites.google.com\/cdc.gov.tw\/2019ncov\/taiwan?authuser=0\nUS CDC: https:\/\/www.cdc.gov\/coronavirus\/2019-ncov\/index.html\nGovernment of Canada: https:\/\/www.canada.ca\/en\/public-health\/services\/diseases\/coronavirus.html\nAustralia Government Department of Health: https:\/\/www.health.gov.au\/news\/coronavirus-update-at-a-glance\nEuropean Centre for Disease Prevention and Control (ECDC): https:\/\/www.ecdc.europa.eu\/en\/geographical-distribution-2019-ncov-cases\nMinistry of Health Singapore (MOH): https:\/\/www.moh.gov.sg\/covid-19\nItaly Ministry of Health: http:\/\/www.salute.gov.it\/nuovocoronavirus\n\n\nAdditional Information about the Visual Dashboard:\nhttps:\/\/systems.jhu.edu\/research\/public-health\/ncov\/\n\n\nContact Us:\n\nEmail: jhusystems@gmail.com","2987d461":"Correlation matrix:","67ea2eb9":"## Introduction\nThis is the data repository for the 2019 Novel Coronavirus Visual Dashboard operated by the Johns Hopkins University Center for Systems Science and Engineering (JHU CSSE). Also, Supported by ESRI Living Atlas Team and the Johns Hopkins University Applied Physics Lab (JHU APL).","32c789a1":"Let's take a quick look at what the data looks like:","aec512b7":"### Let's check 1st file: \/kaggle\/input\/archived_data\/archived_daily_case_updates\/01-23-2020_1200.csv","2c956f51":"Distribution graphs (histogram\/bar graph) of sampled columns:","a1126092":"Let's take a quick look at what the data looks like:","6fc59092":"There are 45 csv files in the current version of the dataset:\n","355febee":"## Exploratory Analysis\nTo begin this exploratory analysis, first use `matplotlib` to import libraries and define functions for plotting the data. Depending on the data, not all plots will be made. (Hey, I'm just a kerneling bot, not a Kaggle Competitions Grandmaster!)","47387150":"Scatter and density plots:"}}