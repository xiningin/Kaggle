{"cell_type":{"ff80a0f7":"code","aa647c42":"code","adebeb37":"code","6c667d43":"code","bd112c8b":"code","ee71183d":"code","f2a7abce":"code","b23d3b22":"code","74266581":"code","a2ceed9f":"code","1f749052":"code","3dc858e2":"code","c68e2074":"code","ee716501":"code","a117115b":"code","ea897a3c":"code","16304db2":"code","9e134083":"code","c6b40a8f":"code","c1150ed8":"code","22fc29e1":"code","7ed9d0f8":"code","8c15ec4b":"code","29a2e64f":"code","811d50db":"code","9b4e859e":"code","3bd2c1a4":"code","59ca1b51":"markdown","a971269a":"markdown","ee15ba99":"markdown","cf5dc73b":"markdown","2869d2f0":"markdown","3c9a1eb4":"markdown","3256e0e8":"markdown","05e89d2c":"markdown","a08544c4":"markdown","b49c1b5a":"markdown","a5515964":"markdown","0b539b21":"markdown","6545c529":"markdown","1e6ba262":"markdown","eefc8904":"markdown","d8637173":"markdown","c7db96fb":"markdown","fffdb766":"markdown","092e04f7":"markdown"},"source":{"ff80a0f7":"! pip install kaggle","aa647c42":"! mkdir ~\/.kaggle\n! cp kaggle.json ~\/.kaggle\/\n! chmod 600 ~\/.kaggle\/kaggle.json","adebeb37":"! kaggle datasets download imcr00z\/flickr-faces-70k-thumbnails-128x128","6c667d43":"! unzip ..\/input\/flickr-faces-70k-thumbnails-128x128 -d faces","bd112c8b":"import os\nfrom torch.utils.data import DataLoader\nfrom torchvision.datasets import ImageFolder\nimport torchvision.transforms as tt\nimport torch\nimport torch.nn as nn\nimport cv2\nfrom tqdm.notebook import tqdm\nfrom torchvision.utils import save_image\nfrom torchvision.utils import make_grid\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom torch.optim import lr_scheduler\n%matplotlib inline\nimport random\n\nsns.set(style='darkgrid', font_scale=1.2)","ee71183d":"def seed_everything(seed=22):\n    np.random.seed(seed)\n    random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed(seed)\n    torch.backends.cudnn.benchmark = True\n    # torch.backends.cudnn.deterministic = True\n\nseed_everything()","f2a7abce":"Path = '..\/input\/flickr-faces-70k-thumbnails-128x128'","b23d3b22":"image_size = 64\n\nmean = (0.5, 0.5, 0.5)\nstd = (0.5, 0.5, 0.5)\ntransforms = tt.Compose( [\n                          tt.Resize(image_size),\n                          tt.ToTensor(),\n                          tt.Normalize(mean=mean, std=std)\n ] )\nimages = ImageFolder(Path, transform=transforms )","74266581":"batch_size = 128\nDataset = DataLoader(images, batch_size=batch_size, num_workers=2, shuffle=True, pin_memory=True, drop_last=True)","a2ceed9f":"def show_batch(batch, grid_size, figsize=8):\n  fig, ax = plt.subplots(figsize=(figsize,figsize))\n  ax.set_xticks([])\n  ax.set_yticks([])\n  ax.imshow( torch.moveaxis(make_grid(batch[:np.prod(grid_size)], nrow=grid_size[1], normalize=True ), 0, -1) )\n  plt.show()\n\nfor Image, _ in Dataset:\n  show_batch(Image, [3, 5] )\n  break","1f749052":"#code from   https:\/\/github.com\/ShivamShrirao\/facegan_pytorch\/blob\/main\/facegan_pytorch.ipynb\nclass GaussianNoise(nn.Module):                 \n    def __init__(self, std=0.1, decay_rate=0):\n        super().__init__()\n        self.std = std\n        self.decay_rate = decay_rate\n\n    def decay_step(self):\n        self.std = max(self.std - self.decay_rate, 0)\n\n    def forward(self, x):\n        if self.training:\n            return x + torch.empty_like(x).normal_(std=self.std)\n        else:\n            return x","3dc858e2":"class discriminator(nn.Module):\n    def __init__(self):\n        super(discriminator, self).__init__()        \n        self.d_forward = nn.Sequential(\n            GaussianNoise(),\n            nn.Conv2d(3, 64, kernel_size=4, stride=2, padding=1,bias=False),\n            nn.BatchNorm2d(64),\n            nn.LeakyReLU(0.2, inplace=True),\n            \n            GaussianNoise(),\n            nn.Conv2d(64, 128, kernel_size=4, stride=2, padding=1,bias=False),\n            nn.BatchNorm2d(128),\n            nn.LeakyReLU(0.2, inplace=True),\n            \n            GaussianNoise(),\n            nn.Conv2d(128, 256, kernel_size=4, stride=2, padding=1,bias=False),\n            nn.BatchNorm2d(256),\n            nn.LeakyReLU(0.2, inplace=True),\n            \n            GaussianNoise(),\n            nn.Conv2d(256, 512, kernel_size=4, stride=2, padding=1,bias=False),\n            nn.BatchNorm2d(512),\n            nn.LeakyReLU(0.2, inplace=True),\n            \n            #GaussianNoise(),\n            #nn.Conv2d(512, 1024, kernel_size=4, stride=2, padding=1,bias=False),\n            #nn.BatchNorm2d(1024),\n            #nn.LeakyReLU(0.2, inplace=True),\n            \n            GaussianNoise(),\n            nn.Conv2d(512, 1, kernel_size=4, stride=1, bias=False),\n            nn.Flatten(),\n            nn.Sigmoid()\n        )\n    def forward(self, x):\n        return self.d_forward(x)","c68e2074":"latent_size = 100\nclass generator(nn.Module):\n    def __init__(self):\n        super(generator, self).__init__()\n        self.g_forward = nn.Sequential(\n            nn.ConvTranspose2d(latent_size, 512, kernel_size=4, stride=1, padding=0,  bias=False),\n            nn.BatchNorm2d(512),\n            nn.ReLU(inplace=True),\n            \n            #nn.ConvTranspose2d(1024, 512, kernel_size=4, stride=2,padding=1, bias=False),\n            #nn.BatchNorm2d(512),\n            #nn.ReLU(inplace=True),\n\n            nn.ConvTranspose2d(512, 256, kernel_size=4, stride=2, padding=1, bias=False),\n            nn.BatchNorm2d(256),\n            nn.ReLU(inplace=True),\n\n\n            nn.ConvTranspose2d(256, 128, kernel_size=4, stride=2,padding=1, bias=False),\n            nn.BatchNorm2d(128),\n            nn.ReLU(inplace=True),\n\n\n            nn.ConvTranspose2d(128, 64, kernel_size=4, stride=2,padding=1, bias=False),\n            nn.BatchNorm2d(64),\n            nn.ReLU(inplace=True),\n\n            nn.ConvTranspose2d(64, 3, kernel_size=4, stride=2,padding=1, bias=False),\n            nn.Tanh()\n        )\n    def forward(self, x):\n        return self.g_forward(x)","ee716501":"device = torch.device('cuda')\ndiscriminator = discriminator().to(device)\ngenerator = generator().to(device)\n\n\nmodel = {\n    \"discriminator\": discriminator,\n    \"generator\": generator\n}\n\ncriterion = {\n    \"discriminator\": nn.BCELoss(),\n    \"generator\": nn.BCELoss()\n}\n\nhistory = {'discr':[], 'gen':[]} ","a117115b":"lr = 0.0002\noptim = {\n    \"discriminator\": torch.optim.Adam(model['discriminator'].parameters(), lr=lr, betas=(0.5, 0.999)),\n    \"generator\": torch.optim.Adam(model['generator'].parameters(), lr=lr, betas=(0.5, 0.999)) \n}\n\nscheduler = {\n    \"discriminator\": lr_scheduler.StepLR(optim[\"discriminator\"], step_size=5, gamma=0.8),\n    \"generator\": lr_scheduler.StepLR(optim['generator'], step_size=5, gamma=0.8) \n} ","ea897a3c":"#function and idea from https:\/\/pytorch.org\/tutorials\/beginner\/dcgan_faces_tutorial.html\ndef weights_init(m):\n    classname = m.__class__.__name__\n    if classname.find('Conv') != -1:\n        nn.init.normal_(m.weight.data, 0.0, 0.02)\n    elif classname.find('BatchNorm') != -1:\n        nn.init.normal_(m.weight.data, 1.0, 0.02)\n        nn.init.constant_(m.bias.data, 0)\n        \n#normalize weights:\ngenerator.apply(weights_init)   \ndiscriminator.apply(weights_init)\n     ","16304db2":"Pathd = '..\/input\/ganweights\/GAN_90_d'\nPathg = '..\/input\/ganweights\/GAN_90_g'\nLOAD = True\n\nif LOAD == True:\n    model['discriminator'].load_state_dict(torch.load(Pathd))\n    model['generator'].load_state_dict(torch.load(Pathg))","9e134083":"Noise = torch.randn((10, latent_size, 1, 1))\nwith torch.set_grad_enabled(False):\n  fake = generator.cuda()(Noise.cuda()).cpu()\n#fig, ax = plt.subplots()\n#ax.set_xticks([])\n#ax.set_yticks([])\nshow_batch(fake, [1, 10], 25)\nprint(fake.size())","c6b40a8f":"from IPython import display\nfrom ipywidgets import Output\nfrom numpy.random import uniform as rand_noise\nout = Output()\ndisplay.display(out)\n\ndef fit(model, criterion, epochs, lr, history):\n  model[\"discriminator\"].train()\n  model[\"generator\"].train()\n  for epoch in tqdm(range(epochs)):\n    g_loss_epoch  = []\n    d_loss_epoch  = []\n    scheduler['discriminator'].step()\n    scheduler['generator'].step()\n    \n    for X_batch, zeros in Dataset:\n      #discriminator:\n      #real image training:\n      optim['discriminator'].zero_grad()\n      real_label = model['discriminator'](X_batch.to(device))\n      real_loss = criterion['discriminator'](real_label, (torch.ones([*zeros.size(), 1])+ rand_noise(-0.2, 0.2)).cuda() )\n\n      #fake image training:\n      fake_batch = model['generator'](torch.randn(batch_size, latent_size, 1, 1).cuda() )\n      fake_label = model['discriminator'](fake_batch)\n      fake_loss = criterion['discriminator'](fake_label, (torch.zeros([*zeros.size(), 1])+ rand_noise(0, 0.3)).cuda() )\n      discriminator_loss = real_loss + fake_loss\n      discriminator_loss.backward()\n      optim['discriminator'].step()\n      \n      #generator:\n      #classify generated image as real\n      optim['generator'].zero_grad()\n      gen_batch = model['generator'](torch.randn((batch_size, latent_size, 1, 1)).cuda() )\n      fake_label = model['discriminator'](gen_batch)\n      gen_loss = criterion['generator'](fake_label, (torch.ones([*zeros.size(), 1])+ rand_noise(-0.1, 0)).cuda() )\n      gen_loss.backward()\n      optim['generator'].step()\n\n      d_loss_epoch.append(np.round(discriminator_loss.cpu().item(), 4))\n      g_loss_epoch.append(np.round(gen_loss.cpu().item(), 4))\n      #with torch.set_grad_enabled(False):\n      #  with out:\n      #      display.clear_output(wait=True)\n      #      print(f\"Discr Loss: {np.round(discriminator_loss.cpu().item(), 4)}  Gen Loss: {np.round(gen_loss.cpu().item(), 4)}\")\n      #      show_batch(gen_batch.cpu(), [2, 5])\n\n\n    history['discr'].append(np.mean(d_loss_epoch))\n    history['gen'].append(np.mean(g_loss_epoch))\n    with torch.set_grad_enabled(False):\n      with out:\n        display.clear_output(wait=True)\n        print(f\"Epoch: {epoch+1}\/{epochs}  Discr Loss: {history['discr'][-1]}  Gen Loss: {history['gen'][-1]}\")\n        show_batch(gen_batch.cpu(), [2, 5])\n","c1150ed8":"fit(model, criterion, 40, lr=lr, history=history)","22fc29e1":"figure = plt.figure(figsize=(12, 7))\nplt.plot(history['discr'], label='Discriminator')\nplt.plot(history['gen'], label='Generator')\nplt.legend()\nplt.show()","7ed9d0f8":"Pathd = 'GAN+_90_d'\nPathg = 'GAN+_90_g'\ntorch.save(model['discriminator'].state_dict(), Pathd)\ntorch.save(model['generator'].state_dict(), Pathg)","8c15ec4b":"n_images = 1000\n\nfixed_latent = torch.randn(n_images, latent_size, 1, 1, device=device)\nfake_images = model[\"generator\"](fixed_latent)\nwith torch.set_grad_enabled(False):\n    show_batch(fake_images[:96].cpu(), [6, 16], 25)","29a2e64f":"from sklearn.manifold import TSNE\n\nn_max = np.round(n_images \/ batch_size)\nn = 0\nreal_images = torch.Tensor()\nfor batch, _ in Dataset:\n    real_images = torch.cat((real_images, batch))\n    n += 1\n    if n > n_max:\n        break\n    \nwith torch.set_grad_enabled(False):\n    fake_points = TSNE().fit_transform(fake_images.flatten(start_dim=1).cpu())\n    real_points = TSNE().fit_transform(real_images.flatten(start_dim=1).cpu())\n    \n    fig = plt.figure(figsize=(15, 15))\n    plt.title('\u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0439 Fake \u0438 Real \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439')\n    plt.scatter(fake_points[:,0], fake_points[:,1], label='Fake')\n    plt.scatter(real_points[:,0], real_points[:,1], label='Real')\n    plt.legend()\n    plt.show()","811d50db":"#points with n_images fake and : real\ndata_points = np.vstack((fake_points, real_points))\nlabels = np.hstack((np.zeros(n_images), np.ones(np.shape(data_points)[0]-n_images)))\n\nprint(np.shape(data_points), np.shape(labels[:, np.newaxis]))","9b4e859e":"from sklearn.model_selection import LeaveOneOut, cross_val_score\nfrom sklearn.neighbors import KNeighborsClassifier\n\nnn_1 = KNeighborsClassifier(n_neighbors=1)\ncross_val = LeaveOneOut()\n\naccr = cross_val_score(nn_1, data_points, labels, scoring='accuracy', cv=cross_val, n_jobs=-1)\nprint('GAN NN1 Score: ', accr.mean())","3bd2c1a4":"\u041f\u043e\u043b\u0443\u0447\u0438\u043b\u043e\u0441\u044c \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e, \u043f\u043e\u0439\u0434\u0443 \u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u0441\u0443\u0432\u0430\u0442\u044c \u0435\u043c\u0443 \u0432\u0441\u0451 \u043f\u043e\u0434\u0440\u044f\u0434 \u0438 \u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043d\u0430 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442","59ca1b51":"\u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0442\u043e, \u043d\u0430\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0445\u043e\u0436\u0438 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043d\u0430\u0441\u0442\u043e\u044f\u0449\u0438\u0445 \u0438 \u0444\u0435\u0439\u043a\u043e\u0432\u044b\u0445 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439. \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435\u0441\u044c \u043c\u0435\u0442\u043e\u0434\u043e\u043c, \u0441\u043d\u0438\u0436\u0430\u044e\u0449\u0438\u043c \u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u044c (\u043a \u043f\u0440\u0438\u043c\u0435\u0440\u0443, TSNE) \u0438 \u0438\u0437\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u0435 \u043d\u0430 \u0433\u0440\u0430\u0444\u0438\u043a\u0435 \u0440\u0430\u0437\u043d\u044b\u043c \u0446\u0432\u0435\u0442\u043e\u043c \u0442\u043e\u0447\u043a\u0438, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u043c \u0438 \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f\u0438","a971269a":"<p style=\"align: center;\"><img align=center src=\"https:\/\/drive.google.com\/uc?export=view&id=1I8kDikouqpH4hf7JBiSYAeNT2IO52T-T\" width=600 height=480\/><\/p>\n<h3 style=\"text-align: center;\"><b>\u0428\u043a\u043e\u043b\u0430 \u0433\u043b\u0443\u0431\u043e\u043a\u043e\u0433\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0424\u041f\u041c\u0418 \u041c\u0424\u0422\u0418<\/b><\/h3>\n\n<h3 style=\"text-align: center;\"><b>\u0414\u043e\u043c\u0430\u0448\u043d\u0435\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435. Generative adversarial networks<\/b><\/h3>\n\n","ee15ba99":"## \u0427\u0430\u0441\u0442\u044c 1. \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 (1 \u0431\u0430\u043b\u043b)","cf5dc73b":"\u041f\u0440\u043e\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u0432\u0448\u0438\u0439\u0441\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:","2869d2f0":"\u041f\u043e\u0441\u0442\u0440\u043e\u0439\u0442\u0435 \u0433\u0440\u0430\u0444\u0438\u043a\u0438 \u043b\u043e\u0441\u0441\u0430 \u0434\u043b\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440\u0430 \u0438 \u0434\u0438\u0441\u043a\u0440\u0438\u043c\u0438\u043d\u0430\u0442\u043e\u0440\u0430. \u0427\u0442\u043e \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u043a\u0430\u0437\u0430\u0442\u044c \u043f\u0440\u043e \u044d\u0442\u0438 \u0433\u0440\u0430\u0444\u0438\u043a\u0438?","3c9a1eb4":"\u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438 \u0432\u043e\u0437\u044c\u043c\u0435\u043c \u0447\u0430\u0441\u0442\u044c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 [Flickr Faces](https:\/\/github.com\/NVlabs\/ffhq-dataset), \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u043b\u0438\u0446 \u043b\u044e\u0434\u0435\u0439 \u0432 \u0432\u044b\u0441\u043e\u043a\u043e\u043c \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u0438 (1024\u04451024). \u041e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u043e\u0447\u0435\u043d\u044c \u0431\u043e\u043b\u044c\u0448\u043e\u0439, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043c\u044b \u0432\u043e\u0437\u044c\u043c\u0435\u043c \u0435\u0433\u043e \u0447\u0430\u0441\u0442\u044c. \u0421\u043a\u0430\u0447\u0430\u0442\u044c \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u043c\u043e\u0436\u043d\u043e [\u0437\u0434\u0435\u0441\u044c](https:\/\/drive.google.com\/file\/d\/1KWPc4Pa7u2TWekUvNu9rTSO0U2eOlZA9\/view?usp=sharing)","3256e0e8":"\u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u043c \u043d\u0430\u0448\u0438 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f. \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u0442\u0440\u043e\u0438\u0442 DataLoader \u0434\u043b\u044f \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439, \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u043c\u0435\u043d\u044f\u044f \u0438\u0445 \u0440\u0430\u0437\u043c\u0435\u0440 \u0434\u043e \u043d\u0443\u0436\u043d\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f (\u0440\u0430\u0437\u043c\u0435\u0440 1024 \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u0431\u043e\u043b\u044c\u0448\u043e\u0439, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043c\u044b \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u043c \u0432\u0437\u044f\u0442\u044c \u0440\u0430\u0437\u043c\u0435\u0440 128 \u043b\u0438\u0431\u043e \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u0431\u043e\u043b\u044c\u0448\u0435)","05e89d2c":"### 4.1. \u041f\u043e\u0434\u0441\u0447\u0435\u0442 accuracy (4 \u0431\u0430\u043b\u043b\u0430)","a08544c4":"## \u0427\u0430\u0441\u0442\u044c 3. \u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 (1 \u0431\u0430\u043b\u043b)","b49c1b5a":"\u041f\u0435\u0440\u0435\u0439\u0434\u0435\u043c \u0442\u0435\u043f\u0435\u0440\u044c \u043a \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044e \u043d\u0430\u0448\u0435\u0433\u043e GAN\u0430. \u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439:\n1. \u0423\u0447\u0438\u043c \u0434\u0438\u0441\u043a\u0440\u0438\u043c\u0438\u043d\u0430\u0442\u043e\u0440:\n  * \u0431\u0435\u0440\u0435\u043c \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0435 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0438 \u043f\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u0435\u043c \u0438\u043c \u043c\u0435\u0442\u043a\u0443 1\n  * \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u043c \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440\u043e\u043c \u0438 \u043f\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u0435\u043c \u0438\u043c \u043c\u0435\u0442\u043a\u0443 0\n  * \u043e\u0431\u0443\u0447\u0430\u0435\u043c \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043d\u0430 \u0434\u0432\u0430 \u043a\u043b\u0430\u0441\u0441\u0430\n\n2. \u0423\u0447\u0438\u043c \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440:\n  * \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u043c \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440\u043e\u043c \u0438 \u043f\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u0435\u043c \u0438\u043c \u043c\u0435\u0442\u043a\u0443 0 **(1, \u0430 \u043d\u0435 0!)**\n  * \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c \u0434\u0438\u0441\u043a\u0440\u0438\u043c\u0438\u043d\u0430\u0442\u043e\u0440\u043e\u0440\u043e\u043c, \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u0435 \u044d\u0442\u043e \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0438\u043b\u0438 \u043d\u0435\u0442\n\n\n\u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043f\u043e\u0442\u0435\u0440\u044c \u0431\u0435\u0440\u0435\u043c \u0431\u0438\u043d\u0430\u0440\u043d\u0443\u044e \u043a\u0440\u043e\u0441\u0441-\u044d\u043d\u0442\u0440\u043e\u043f\u0438\u044e","a5515964":"\u0421\u043a\u043e\u043d\u0441\u0442\u0440\u0443\u0438\u0440\u0443\u0439\u0442\u0435 \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 \u0438 \u0434\u0438\u0441\u043a\u0440\u0438\u043c\u0438\u043d\u0430\u0442\u043e\u0440. \u041f\u043e\u043c\u043d\u0438\u0442\u0435, \u0447\u0442\u043e:\n* \u0434\u0438\u0441\u043a\u0440\u0438\u043c\u0438\u043d\u0430\u0442\u043e\u0440 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 (\u0442\u0435\u043d\u0437\u043e\u0440 \u0440\u0430\u0437\u043c\u0435\u0440\u0430 `3 x image_size x image_size`) \u0438 \u0432\u044b\u0434\u0430\u0435\u0442 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044c \u0442\u043e\u0433\u043e, \u0447\u0442\u043e \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u043d\u0430\u0441\u0442\u043e\u044f\u0449\u0435\u0435 (\u0442\u0435\u043d\u0437\u043e\u0440 \u0440\u0430\u0437\u043c\u0435\u0440\u0430 1)\n\n* \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0442\u0435\u043d\u0437\u043e\u0440 \u0448\u0443\u043c\u043e\u0432 \u0440\u0430\u0437\u043c\u0435\u0440\u0430 `latent_size x 1 x 1` \u0438 \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0440\u0430\u0437\u043c\u0435\u0440\u0430 `3 x image_size x image_size`","0b539b21":"\u041d\u0435 \u0432\u0441\u0435\u0433\u0434\u0430 \u0431\u044b\u0432\u0430\u0435\u0442 \u0443\u0434\u043e\u0431\u043d\u043e \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0442\u044c \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043a\u0430\u0440\u0442\u0438\u043d\u043e\u043a \u0433\u043b\u0430\u0437\u0430\u043c\u0438. \u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0430\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u044b \u0432\u0430\u043c \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u0435\u0442\u0441\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u043f\u043e\u0434\u0445\u043e\u0434:\n  * \u0421\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441\u0442\u043e\u043b\u044c\u043a\u043e \u0436\u0435 \u0444\u0435\u0439\u043a\u043e\u0432\u044b\u0445 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0435\u0441\u0442\u044c \u043d\u0430\u0441\u0442\u043e\u044f\u0449\u0438\u0445 \u0432 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435. \u041f\u0440\u0438\u0441\u0432\u043e\u0438\u0442\u044c \u0444\u0435\u0439\u043a\u043e\u0432\u044b\u043c \u043c\u0435\u0442\u043a\u0443 \u043a\u043b\u0430\u0441\u0441\u0430 0, \u043d\u0430\u0441\u0442\u043e\u044f\u0449\u0438\u043c \u2013 1.\n  * \u041f\u043e\u0441\u0442\u0440\u043e\u0438\u0442\u044c leave-one-out \u043e\u0446\u0435\u043d\u043a\u0443: \u043e\u0431\u0443\u0447\u0438\u0442\u044c 1NN Classifier (`sklearn.neighbors.KNeighborsClassifier(n_neighbors=1)`) \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u043a\u043b\u0430\u0441\u0441 \u043d\u0430 \u0432\u0441\u0435\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u0430\u0445, \u043a\u0440\u043e\u043c\u0435 \u043e\u0434\u043d\u043e\u0433\u043e, \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e (accuracy) \u043d\u0430 \u043e\u0441\u0442\u0430\u0432\u0448\u0435\u043c\u0441\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u0435. \u0412 \u044d\u0442\u043e\u043c \u0432\u0430\u043c \u043f\u043e\u043c\u043e\u0436\u0435\u0442 `sklearn.model_selection.LeaveOneOut`","6545c529":"\u0422\u0435\u043f\u0435\u0440\u044c \u0434\u0430\u0432\u0430\u0439\u0442\u0435 \u043e\u0446\u0435\u043d\u0438\u043c \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0432\u0448\u0438\u0445\u0441\u044f \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439. \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f, \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043d\u0430\u0448\u0438\u043c \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440\u043e\u043c","1e6ba262":"\u0427\u0442\u043e \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u043a\u0430\u0437\u0430\u0442\u044c \u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0432\u0448\u0435\u043c\u0441\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435? \u041a\u0430\u043a\u043e\u0439 accuracy \u043c\u044b \u0445\u043e\u0442\u0435\u043b\u0438 \u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438 \u043f\u043e\u0447\u0435\u043c\u0443?","eefc8904":"## \u0427\u0430\u0441\u0442\u044c 2. \u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 (2 \u0431\u0430\u043b\u043b\u0430)","d8637173":"\u0412 \u044d\u0442\u043e\u043c \u0434\u043e\u043c\u0430\u0448\u043d\u0435\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u0438 \u0432\u044b \u043e\u0431\u0443\u0447\u0438\u0442\u0435 GAN \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043b\u0438\u0446\u0430 \u043b\u044e\u0434\u0435\u0439 \u0438 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u0442\u0435 \u043d\u0430 \u0442\u043e, \u043a\u0430\u043a \u043c\u043e\u0436\u043d\u043e \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0442\u044c \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438","c7db96fb":"\u041a\u0430\u043a \u0432\u0430\u043c \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0432\u0448\u0438\u0445\u0441\u044f \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439?","fffdb766":"## \u0427\u0430\u0441\u0442\u044c 4. Leave-one-out-1-NN classifier accuracy (6 \u0431\u0430\u043b\u043b\u043e\u0432)","092e04f7":"### 4.2. \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0439 (2 \u0431\u0430\u043b\u043b\u0430)"}}