{"cell_type":{"cda13099":"code","2f9493be":"code","3be15c09":"code","dd186f8e":"code","7f8a21ba":"code","bceb4e0a":"code","6d27ac66":"code","a14d0e95":"code","bfa5f7c8":"code","cf7a92ea":"code","8cb6f70c":"code","cc74dd6c":"code","691819bd":"markdown"},"source":{"cda13099":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom numpy.fft import fft\nfrom statsmodels.tsa.arima_model import ARIMA\nimport os\nprint(os.listdir(\"..\/input\"))\nimport io\nimport base64\nfrom IPython.display import HTML\nimport matplotlib.animation as animation","2f9493be":"train_df = pd.read_csv('..\/input\/training_set.csv')","3be15c09":"def calc_frames(train_df, object_id):\n    object_vals = train_df[train_df.object_id == object_id].copy()\n    \n    object_vals.mjd = object_vals.mjd.round()\n    \n    start_time = object_vals.mjd.min()\n    end_time = object_vals.mjd.max()\n    \n    cur_time = start_time - 3\n    \n    max_frames = int((end_time - start_time)\/\/3)\n    frames = np.zeros((max_frames, 6))*np.nan\n    \n    frame_time = np.zeros(max_frames)\n\n    for i in range(max_frames):\n        cur_time = cur_time + 3\n        frames[i, :] = np.array([object_vals[(object_vals.passband == b) & ((object_vals.mjd - cur_time).abs() < 3)].pipe(lambda x: np.nan if x.shape[0] == 0 else x.flux.iloc[0])  for b in range(6)])        \n        frame_time[i] = cur_time\n    \n    frame_time = frame_time[~np.isnan(frames).all(axis = 1)]\n    frames = frames[~np.isnan(frames).all(axis = 1)]\n    \n    def _nan_helper(y):\n        return np.isnan(y), lambda z: z.nonzero()[0]\n\n    nans, x = _nan_helper(frames)\n    frames[nans]= np.interp(x(nans), x(~nans), frames[~nans])\n\n    return frames, frame_time","dd186f8e":"fr, tm = calc_frames(train_df, 53925325)","7f8a21ba":"def animate(frames, frame_time, name):\n    fig, ax = plt.subplots()\n\n    x = [350, 500, 600, 700, 875, 1000] \n    y = [-1000, 1000, 0,0,0,0]\n\n    line, = ax.plot(x, y, lw=2)\n    text = ax.text(0.85, 0.95,  '', transform=ax.transAxes)\n\n    def init():\n        line.set_data(x, [np.nan] * 6)\n        return line,\n\n    def animate(i):\n        line.set_ydata(frames[i, :])\n        text.set_text(frame_time[i])\n        return line,\n\n    ani = animation.FuncAnimation(fig, animate, init_func=init, interval=2,save_count=50, frames=frames.shape[0], blit=True)\n\n    plt.close()\n\n    filename = name\n    ani.save(filename, writer='imagemagick', fps=8)","bceb4e0a":"animate(*calc_frames(train_df, 615), \"615.gif\")","6d27ac66":"filename = '615.gif'\nvideo = io.open(filename, 'r+b').read()\nencoded = base64.b64encode(video)\nHTML(data='''<img src=\"data:image\/gif;base64,{0}\" type=\"gif\" \/>'''.format(encoded.decode('ascii')))","a14d0e95":"animate(*calc_frames(train_df, 53925325), \"53925325.gif\")\nfilename = '53925325.gif'\nvideo = io.open(filename, 'r+b').read()\nencoded = base64.b64encode(video)\nHTML(data='''<img src=\"data:image\/gif;base64,{0}\" type=\"gif\" \/>'''.format(encoded.decode('ascii')))","bfa5f7c8":"animate(*calc_frames(train_df, 713), \"713.gif\")\nfilename = '713.gif'\nvideo = io.open(filename, 'r+b').read()\nencoded = base64.b64encode(video)\nHTML(data='''<img src=\"data:image\/gif;base64,{0}\" type=\"gif\" \/>'''.format(encoded.decode('ascii')))","cf7a92ea":"train_df.object_id.unique()","8cb6f70c":"animate(*calc_frames(train_df, 730), \"730.gif\")\nfilename = '730.gif'\nvideo = io.open(filename, 'r+b').read()\nencoded = base64.b64encode(video)\nHTML(data='''<img src=\"data:image\/gif;base64,{0}\" type=\"gif\" \/>'''.format(encoded.decode('ascii')))","cc74dd6c":"animate(*calc_frames(train_df, 130762946), \"130762946.gif\")\nfilename = '130762946.gif'\nvideo = io.open(filename, 'r+b').read()\nencoded = base64.b64encode(video)\nHTML(data='''<img src=\"data:image\/gif;base64,{0}\" type=\"gif\" \/>'''.format(encoded.decode('ascii')))","691819bd":"At this notebook I tried to visualize evolution of object flux in very naive way. "}}