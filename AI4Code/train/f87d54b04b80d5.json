{"cell_type":{"410787b8":"code","dc655884":"code","e53b43b4":"code","9b2c200c":"code","c959c0b7":"code","e5d4bf76":"code","f2b1e081":"code","d53ae164":"code","518c2062":"code","338d8d96":"code","b2437498":"code","a4610784":"code","6bc9a07d":"code","9bca0680":"code","10bc1f14":"code","73b2941d":"code","6b0d86c8":"code","da868638":"code","48fe80a8":"code","c440dcc7":"code","e827d087":"code","5a1fbc1f":"code","a5118587":"code","ba12df86":"markdown","2649f947":"markdown","3459d391":"markdown","40ed02d8":"markdown","25ef4f77":"markdown","75edc20c":"markdown","2de30b92":"markdown","fee51e3a":"markdown","813f1897":"markdown","57e41078":"markdown","ee92671c":"markdown","8e5988ab":"markdown","355eb01e":"markdown","05db7ef5":"markdown","c7ad58b3":"markdown","f2bf90cf":"markdown","57ddc630":"markdown"},"source":{"410787b8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\nfrom itertools import chain\nfrom collections import Counter\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","dc655884":"# Loading the dataset\n\ndata = pd.read_csv('\/kaggle\/input\/netflix-shows\/netflix_titles.csv')\n\nprint(data.shape)\nprint(data.columns)","e53b43b4":"data.info()","9b2c200c":"## Preprocessing\n\n## Identifying the cast members in both Movie and TV shows - unnest cast \ncast_col = data['cast']\ncast_members = cast_col.str.split(\",\",expand=True)\n\n# Identifying the cast members in either Movie or TV Shows\nmovie_cast = (data[data['type'] == \"Movie\"]['cast']).str.split(\",\", expand=True)\ntv_cast = (data[data['type'] == \"TV Show\"]['cast']).str.split(\",\", expand=True)","c959c0b7":"# Identifying the number of cast members per TV Show and Movie on Netflix\nnum_cast_members = []\n\nfor i in range(len(data.index)):\n    # counting the numbers of cast members, not including nulls    \n    num_cast_members.append(cast_members.iloc[i].notnull().sum())\n\n#adding new column 'num_cast' to dataset    \ndata['num_cast'] = num_cast_members\n","e5d4bf76":"## want to create a list of lists, removing any None and nan values \ncast_members_list = cast_members.apply(lambda x: x.dropna().tolist()).tolist()\nmovie_cast_list = movie_cast.apply(lambda x: x.dropna().tolist()).tolist()\ntv_cast_list = tv_cast.apply(lambda x: x.dropna().tolist()).tolist()\n# cast_members.values.tolist() <-- adds all values to the list \n\n\n### --- retrieved functions start --- # \n# Python3 program to extract first and last  \n# element of each sublist in a list of lists \n  \ndef Extract(lst): \n    return [item[0] for item in lst] \n\ndef converttostr(input_seq, seperator):\n    # Join all the strings in list\n    final_str = seperator.join(input_seq)\n    return final_str\n\n### ------- retrieved functions end --- #\n\n# count the number of cast members \ncounting_occurences = chain.from_iterable(cast_members_list)\noccurences = Counter(counting_occurences)\nanswer = converttostr(Extract(occurences.most_common(10)), \",\")\nprint(f'The top 10 cast members who appear in the most Netflix Movies and TV Shows are: \\n {answer} \\n')\n\nmovie_counting_occurences = chain.from_iterable(movie_cast_list)\nmovie_occurences = Counter(movie_counting_occurences)\nanswer = converttostr(Extract(movie_occurences.most_common(10)), \",\")\nprint(f'The top 10 cast members who appear in the most Netflix Movies are: \\n {answer} \\n')\n\ntv_counting_occurences = chain.from_iterable(tv_cast_list)\ntv_occurences = Counter(tv_counting_occurences)\nanswer = converttostr(Extract(tv_occurences.most_common(10)), \",\")\nprint(f'The top 10 cast members who appear in the most Netflix TV Shows are: \\n {answer} \\n')\n","f2b1e081":"## Visualizing the answers \n\n## ---- FOR THE STACKED BAR CHART ----## \n\n## identify # of occurences of cast in either movie or TV shows to create a stacked bar chart\nall_movie_occur_dict = dict(movie_occurences)\nall_tv_occur_dict = dict(tv_occurences)\ntop10 = dict(occurences.most_common(10)).keys()\n\n# finding the top 10 cast member occurences by type \ntop10_cast_by_movie = []\ntop10_cast_by_tv = []\n\nfor key in top10:\n    if key in all_movie_occur_dict.keys():\n        top10_cast_by_movie.append(all_movie_occur_dict[key])\n    else: \n        top10_cast_by_movie.append(0)   \n    if key in all_tv_occur_dict.keys():\n        top10_cast_by_tv.append(all_tv_occur_dict[key])\n    else: \n        top10_cast_by_tv.append(0)  \n\n# to display the top 10 occurences for Netflix Movies and TV Shows, Just Movies and Just TV Shows\noccur_dict = dict(occurences.most_common(10))\nmovie_occur_dict = dict(movie_occurences.most_common(10))\ntv_occur_dict = dict(tv_occurences.most_common(10))\n\n# Using keys, and num_occur for the first bar chart \nkeys = list(occur_dict.keys())\nnum_occur = list((occur_dict.values()))\n\nplt.figure(figsize = (10,3))\nplt.title(\"Top 10 Most Common Cast Members Who Appear the Most in Netflix Movies and TV Shows\",fontsize=16)\nplt.xticks(rotation=45 , ha='right')\nplt.xlabel('Cast Members')\nplt.ylabel('# of Occurences')\nplt.bar(keys, num_occur,color= 'black', edgecolor='black')\n#plt.bar(*zip(*sorted(occur_dict.items()))) <-- another option, display not sorted\nplt.show()\n\n## STACKED BAR CHART \nplt.figure(figsize = (10,3))\nplt.title(\"Top 10 Most Common Cast Members Who Appear the Most in Netflix Movies and TV Shows\",fontsize=16)\nplt.bar(list(top10), top10_cast_by_movie, color='b',edgecolor='black')\nplt.bar(list(top10), top10_cast_by_tv, bottom=top10_cast_by_movie, color='r',edgecolor='black')\nplt.legend(['Movies', 'TV Shows'],loc=\"upper right\")\nplt.xlabel('Cast Members')\nplt.ylabel('# of Occurences')\nplt.xticks(rotation=45 , ha='right')\nplt.show()\n\nplt.figure(figsize = (10,3))\nplt.title(\"Top 10 Most Common Cast Members Who Appear the Most in Netflix Movies\",fontsize=16)\nplt.xticks(rotation=45 , ha='right')\nplt.bar(*zip(*sorted(movie_occur_dict.items())),edgecolor='black')\nplt.xlabel('Cast Members')\nplt.ylabel('# of Occurences')\nplt.show()\n\nplt.figure(figsize = (10,3))\nplt.title(\"Top 10 Most Common Cast Members Who Appear the Most in Netflix TV Shows\",fontsize=16)\nplt.xticks(rotation=45 , ha='right')\nplt.bar(*zip(*sorted(tv_occur_dict.items())), color='r',edgecolor='black')\nplt.xlabel('Cast Members')\nplt.ylabel('# of Occurences')\nplt.show()","d53ae164":"plt.figure()\nsns.distplot(data['release_year'], color='black')\nplt.title(\"Distribution of the Overall Release Year of Netflix' Movies and TV Shows\")\nplt.xlabel('Release Year')\nplt.show()\n\nsns.distplot(data[data['type']==\"Movie\"]['release_year'])\nplt.title(\"Distribution of the Overall Release Year of Netflix' Movies\")\nplt.xlabel('Release Year')\nplt.show()\n\nsns.distplot(data[data['type']==\"TV Show\"]['release_year'], color='r')\nplt.title(\"Distribution of the Overall Release Year of Netflix' TV Shows\")\nplt.xlabel('Release Year')\nplt.show()\n","518c2062":"## Getting subsets of data for visualization\nsubset = pd.DataFrame(data, columns = ['show_id','title','type','rating', 'duration'])\nmovie_subset = subset[subset['type'] == \"Movie\"]\ntv_subset = subset[subset['type'] == \"TV Show\"]\n\n# for the movie_subset, remove 'min' from the column duration \n## identify the frequency \n## create a histogram and buckets for heatmap\nmovie_subset['Duration_mins'] =movie_subset['duration'].str.rstrip('min').astype('int')\n\nsns.distplot(movie_subset['Duration_mins'])\nplt.title(\"Distribution of Netflix Movie Duration in minutes\")\nplt.xlabel('Duration')\nplt.show()\n\nmovie_subset.hist(column='Duration_mins', bins=30, grid=False, alpha=0.5,edgecolor=\"black\")\nplt.title(\"Histogram of Netflix Movie Duration in minutes\")\nplt.xlabel('Duration')\nplt.show()","338d8d96":"## Creating bins for Duration_mins\nbins = [0, 25, 50, 75, 100,125, 150, 175, 200, 225, 250, 275, 300]\nmovie_subset['binned'] = pd.cut(movie_subset['Duration_mins'], bins)\n\n#only keeping the necessary data for pivot \ntv_subset_sub = tv_subset[['show_id','duration','rating']]\nmovie_subset_sub = movie_subset[['show_id','binned','rating']]\n\n#creating a pivot table for the heatmaps \ntv_pivot = pd.pivot_table(tv_subset_sub, index=['duration'], columns= ['rating'], aggfunc='count',fill_value =0)\nmovie_pivot = pd.pivot_table(movie_subset_sub, index=['binned'], columns= ['rating'], aggfunc='count',fill_value =0)\n\n# Identifying all the cols and indexes needed for the new df for heatmap \ntv_cols = list(tv_pivot.columns.get_level_values(level=1))\ntv_index = list(tv_pivot.index.get_level_values(level=0))\n\nmovie_cols = list(movie_pivot.columns.get_level_values(level=1))\nmovie_index = list(movie_pivot.index.get_level_values(level=0))\n\n#creates the df in preparation for the heatmaps \ntv_output = pd.DataFrame(tv_pivot.values, index=tv_index, columns=tv_cols)\nmovie_output = pd.DataFrame(movie_pivot.values, index=movie_index, columns=movie_cols)\n\n## Heatmaps\n\n# --- Movies -- \nplt.figure(figsize = (16,16))\nsns.heatmap(movie_output,cmap='Blues', linewidths=0.5, annot=True, annot_kws={\"fontsize\":10}, fmt='g',linecolor='gray')\nplt.yticks(rotation=0)\nplt.ylabel('Duration of Movies, in mins')\nplt.xlabel('Rating of Movies')\nplt.title('Heatmap for the Count of Netflix Movies by Durating and Ratings',fontsize=16)\nplt.show()\n\n# --- TV Shows --- \nplt.figure(figsize = (16,16))\nsns.heatmap(tv_output,cmap='Reds', linewidths=0.5, annot=True, annot_kws={\"fontsize\":10}, fmt='g',linecolor='gray')\nplt.yticks(rotation=0)\nplt.ylabel('Duration of TV Show')\nplt.xlabel('Rating of TV Show')\nplt.title('Heatmap for the count of Netflix TV Shows by Durating and Ratings',fontsize=16)\nplt.show()\n\n","b2437498":"## Finding out if movies or TV shows have more cast members \n#data.hist(column=\"num_cast\", by=\"type\", figsize=(10,6), color='r') <-- unable to find how to change colors by groups\n\ndata.hist(column=\"num_cast\", figsize=(10,3), color='black', grid=False, edgecolor='black')\nplt.title(\"Histogram for Netflix Movies and TV Shows by # of Cast Members\")\nplt.show()\n\ndata[data['type'] == \"Movie\"].hist(column=\"num_cast\", figsize=(10,3), color='b', grid=False,edgecolor='black')\nplt.title(\"Histogram for Netflix Movies by # of Cast Members\")\nplt.show()\n\ndata[data['type'] == \"TV Show\"].hist(column=\"num_cast\", figsize=(10,3), color='r', grid=False,edgecolor='black')\nplt.title(\"Histogram for Netflix TV Shows by # of Cast Members\")\nplt.show()\n\nsns.distplot(data['num_cast'], color='black')\nplt.title(\"Distribution of Netflix Movies and TV Shows by # of Cast Members\")\nplt.xlabel('# of Cast Members')\nplt.show()\n\n#plt.figure(figsize = (15,6))\nsns.distplot(data[data['type']==\"Movie\"]['num_cast'])\nsns.distplot(data[data['type']==\"TV Show\"]['num_cast'], color='r')\nplt.title(\"Distribution of Netflix Movies and TV Shows by # of Cast Members\")\nplt.xlabel('# of Cast Members')\nplt.legend(['Movies', 'TV Shows'],loc=\"upper right\")\nplt.show()","a4610784":"## Identifying the number of countries in both Movie and TV Shows\ncountries = data['country'].str.split(\",\",expand=True)\ncountries_movies = (data[data['type'] == \"Movie\"]['country']).str.split(\",\", expand=True)\ncountries_tv = (data[data['type'] == \"TV Show\"]['country']).str.split(\",\", expand=True)\n\n#removing additional whitespace \nfor col in countries.columns:\n    countries[col] = countries[col].str.strip()\n    \nfor col in countries_movies.columns:\n    countries_movies[col] = countries_movies[col].str.strip()\n    \nfor col in countries_tv.columns:\n    countries_tv[col] = countries_tv[col].str.strip()","6bc9a07d":"# Identifying the number of countries per TV Shows and Movie on Netflix\nnum_countries = []\nfor i in range(len(data.index)):\n    #counting the numbers of countries, not including nulls \n    \n    #found some additional whitespace in front of countries, stripping the whitespace \n    if countries.iloc[i].notnull().any():\n        num_countries.append(countries.iloc[i].notnull().sum())\n    else:\n        num_countries.append(countries.iloc[i].notnull().sum())\ndata['num_countries'] = num_countries","9bca0680":"## Which movies and TV shows were filmed in the most amount of countries?\nmovie_country = data[data['type'] == \"Movie\"].sort_values(by='num_countries',ascending=False)[['title', 'num_countries']].head(10)\ntv_country = data[data['type'] == \"TV Show\"].sort_values(by='num_countries',ascending=False)[['title', 'num_countries']].head(10)\noverall_countries = data.sort_values(by='num_countries',ascending=False)[['title', 'num_countries']].head(10)\n\nplt.figure(figsize = (15,6))\nsns.barplot(x='num_countries', y='title',data=overall_countries, palette=\"gray\",  linewidth=1, edgecolor='k')\nplt.title(\"Top 10 Netflix Movies and TV Shows filmed in the Amount of Countries\",fontsize=16)\nplt.xlabel(\"# of Countries\")\nplt.show()   \n\nanswer = converttostr(overall_countries['title'].to_list(), \",\")\nprint(f'The top 10 Netflix Movies and TV Shows that appeared in the most amount of countries are: \\n {answer} \\n')\n                                                                         \nplt.figure(figsize = (15,6))\nsns.barplot(x='num_countries', y='title',data=movie_country, palette=\"Blues_d\",  linewidth=1, edgecolor='k')\nplt.title(\"Top 10 Netflix Movies filmed in the Amount of Countries\",fontsize=16)\nplt.xlabel(\"# of Countries\")\nplt.show()\n\nanswer = converttostr(movie_country['title'].to_list(), \",\")\nprint(f'The top 10 Netflix Movies that appeared in the most amount of countries are: \\n {answer} \\n')\n\n\nplt.figure(figsize = (15,6))\nsns.barplot(x='num_countries', y='title',data=tv_country, palette=\"Reds_d\",  linewidth=1, edgecolor='k')\nplt.title(\"Top 10 Netflix TV Shows filmed in the Amount of Countries\",fontsize=16)\nplt.xlabel(\"# of Countries\")\nplt.show()\n\nanswer = converttostr(tv_country['title'].to_list(), \",\")\nprint(f'The top 10 Netflix TV Shows that appeared in the most amount of countries are: \\n {answer} \\n')\n","10bc1f14":"## Finding the most popular movies\/tv shows location\n\n## want to create a list of lists, removing any None and nan values \ncountries_list = countries.apply(lambda x: x.dropna().tolist())  \ncountries_movie_list = countries_movies.apply(lambda x: x.dropna().tolist()) \ncountries_tv_list = countries_tv.apply(lambda x: x.dropna().tolist())\n\n\n# count the number of countries\ncounting_countries = chain.from_iterable(countries_list)\ncountry_occurences = Counter(counting_countries)\n#print(country_occurences.most_common(10))\n\n# count the number of countries\ncounting_countries_movies = chain.from_iterable(countries_movie_list)\ncountry_occurences_movies = Counter(counting_countries_movies)\n#print(country_occurences_movies.most_common(10))\n\n# count the number of countries\ncounting_countries_tv = chain.from_iterable(countries_tv_list)\ncountry_occurences_tv = Counter(counting_countries_tv)\n#print(country_occurences_tv.most_common(10))\n\n## finding THE TOP 10 Values \noccur_country_dict = dict(country_occurences.most_common(10))\nmovie_country_occur_dict = dict(country_occurences_movies.most_common(10))\ntv_country_occur_dict = dict(country_occurences_tv.most_common(10))\n\nkeys = list(occur_country_dict.keys())\nnum_occur = list((occur_country_dict.values()))\n\n\nplt.figure(figsize = (10,3))\nplt.title(\"Top 10 Most Common Locations Filmed found in Netflix Movies and TV Shows\")\nplt.xticks(rotation=45 , ha='right')\nplt.xlabel('Countries')\nplt.ylabel('# of Occurences')\nplt.bar(keys, num_occur,color= 'black', edgecolor='black')\n#plt.bar(*zip(*sorted(occur_dict.items()))) <-- another option, display not sorted\nplt.show()\n\n\n## --- NEEDED FOR STACKED CHART ONLY --- \n\n## identify # of occurences of countries in either movie or TV shows to create a stacked bar chart\nall_movie_country_occur_dict = dict(country_occurences_movies)\nall_tv_country_occur_dict = dict(country_occurences_tv)\ntop10_countries = dict(country_occurences.most_common(10)).keys()\n\n# finding the top 10 cast member occurences by type \n\ntop10_country_by_movie = []\ntop10_country_by_tv = []\n\nfor key in top10_countries:\n    if key in all_movie_country_occur_dict.keys():\n        top10_country_by_movie.append(all_movie_country_occur_dict[key])\n    else: \n        top10_country_by_movie.append(0)   \n    if key in all_tv_occur_dict.keys():\n        top10_country_by_tv.append(all_tv_country_occur_dict[key])\n    else: \n        top10_country_by_tv.append(0)  \n        \n\n## STACKED BAR CHART \nplt.figure(figsize = (10,3))\nplt.title(\"Top 10 Most Common Locations Filmed found in Netflix Movies and TV Shows\")\nplt.bar(list(top10_countries), top10_country_by_movie, color='b',edgecolor='black')\nplt.bar(list(top10_countries), top10_country_by_tv, bottom=top10_country_by_movie, color='r',edgecolor='black')\nplt.legend(['Movies', 'TV Shows'],loc=\"upper right\")\nplt.xlabel('Countries')\nplt.ylabel('# of Occurences')\nplt.xticks(rotation=45 , ha='right')\nplt.show()\n\n\nplt.figure(figsize = (10,3))\nplt.title(\"Top 10 Most Common Locations Filmed found in Netflix Movies\")\nplt.xticks(rotation=45 , ha='right')\nplt.bar(*zip(*sorted(movie_country_occur_dict.items())),edgecolor='black')\nplt.xlabel('Countries')\nplt.ylabel('# of Occurences')\nplt.show()\n\n\nplt.figure(figsize = (10,3))\nplt.title(\"Top 10 Most Common Locations Filmed found in Netflix TV Shows\")\nplt.xticks(rotation=45 , ha='right')\nplt.bar(*zip(*sorted(tv_country_occur_dict.items())), color='r',edgecolor='black')\nplt.xlabel('Countries')\nplt.ylabel('# of Occurences')\nplt.show()\n\nprint(\"---- Results: ---- \")\nanswer = converttostr(keys, \",\")\nprint(f'The Top 10 Most Common Locations Filmed found in Netflix Movies and TV Shows are: \\n {answer} \\n')\nanswer_movie = converttostr(Extract(country_occurences_movies.most_common(10)), \",\")\nprint(f'The top 10 Most Common Locations Filmed found in Netflix Movies are: \\n {answer} \\n')\nanswer_tv = converttostr(Extract(country_occurences_tv.most_common(10)), \",\")\nprint(f'The top 10 Most Common Locations Filmed found in Netflix TV Shows are: \\n {answer} \\n')\n","73b2941d":"## Which movie or TV shows were filmed in the most amount of countries -- heatmap by movies and TV shows \n\ncountry_subset = data[['show_id','type','num_countries']]\ncountry_pivot = pd.pivot_table(country_subset, index=['type'], columns= ['num_countries'], aggfunc='count',fill_value =0)\n\ncountry_cols = list(country_pivot.columns.get_level_values(level=1))\ncountry_index = list(country_pivot.index.get_level_values(level=0))\n\ncountry_output = pd.DataFrame(country_pivot.values, index=country_index, columns=country_cols)\n\n# --- Movies & TV Shows -- \n#plt.figure(figsize = (15,6))\nplt.figure(num=None, figsize=(10,3), dpi=80, facecolor='w', edgecolor='black')\nsns.heatmap(country_output,cmap=\"Greys_r\", linewidths=0.5, annot=True, annot_kws={\"fontsize\":10}, fmt='g',linecolor='gray')\nplt.yticks(rotation=0)\nplt.ylabel('Type')\n\nplt.title('Heatmap for the Count of Netflix Movies and TV Shows by Number of Countries and Type',fontsize=16)\n\nplt.xlabel('Number of Countries Filmed')\nplt.show()","6b0d86c8":"## most popular Movie\/TV Show by Category\n\n## Identifying the number of countries in both Movie and TV Shows\ncategory = data['listed_in'].str.split(\",\",expand=True)\ncategory_movies = (data[data['type'] == \"Movie\"]['listed_in']).str.split(\",\", expand=True)\ncategory_tv = (data[data['type'] == \"TV Show\"]['listed_in']).str.split(\",\", expand=True)\n\n#removing additional whitespace \nfor col in category.columns:\n    category[col] = category[col].str.strip()\n\ncategory_df = pd.DataFrame(category)\n\ncategory_list = []\nfor l in category_df.values.tolist():\n    l_list = []\n    for elm in l:\n        if elm != None:\n            l_list.append(elm)\n    category_list.append(l_list)\n    \n#removing additional whitespace \nfor col in category_movies.columns:\n    category_movies[col] = category_movies[col].str.strip()\n\ncategory_movies_df = pd.DataFrame(category_movies)\n\ncategory_movies_list = []\nfor l in category_movies_df.values.tolist():\n    l_list = []\n    for elm in l:\n        if elm != None:\n            l_list.append(elm)\n    category_movies_list.append(l_list)\n    \n#removing additional whitespace \nfor col in category_tv.columns:\n    category_tv[col] = category_tv[col].str.strip()\n\ncategory_tv_df = pd.DataFrame(category_tv)\n\ncategory_tv_list = []\nfor l in category_tv_df.values.tolist():\n    l_list = []\n    for elm in l:\n        if elm != None:\n            l_list.append(elm)\n    category_tv_list.append(l_list)\n\n\n# count the number of cast members \noccur_category = chain.from_iterable(category_list)\noccurences_category = Counter(occur_category)\n#print(occurences_category.most_common(10))\n\nmovie_counting_occur_category = chain.from_iterable(category_movies_list)\nmovie_occurences_category = Counter(movie_counting_occur_category)\n#print(movie_occurences_category.most_common(10))\n\ntv_counting_occur_category = chain.from_iterable(category_tv_list)\ntv_occurences_category = Counter(tv_counting_occur_category)\n#print(tv_occurences_category.most_common(10))\n\n\n## finding THE TOP 10 Values \noccur_category_dict = dict(occurences_category.most_common(10))\nmovie_category_occur_dict = dict(movie_occurences_category.most_common(10))\ntv_category_occur_dict = dict(tv_occurences_category.most_common(10))\n\nkeys = list(occur_category_dict.keys())\nnum_occur = list((occur_category_dict.values()))\n\nplt.figure(figsize = (10,3))\nplt.title(\"Top 10 Most Common Categories Who Appear the Most in Netflix Movies and TV Shows\")\nplt.xticks(rotation=45 , ha='right')\nplt.xlabel('Categories')\nplt.ylabel('# of Occurences')\nplt.bar(keys, num_occur,color= 'black', edgecolor='black')\nplt.show()\n\n## --- NEEDED FOR STACKED CHART ONLY --- \n\n## identify # of occurences of countries in either movie or TV shows to create a stacked bar chart\nall_movie_categories_occur_dict = dict(movie_occurences_category)\nall_tv_categories_occur_dict = dict(tv_occurences_category)\ntop10_categories = dict(occurences_category.most_common(10)).keys()\n\n# finding the top 10 cast member occurences by type \n\ntop10_categories_by_movie = []\ntop10_categories_by_tv = []\n\nfor key in top10_categories:\n    if key in all_movie_categories_occur_dict.keys():\n        top10_categories_by_movie.append(all_movie_categories_occur_dict[key])\n    else: \n        top10_categories_by_movie.append(0)   \n    if key in all_tv_categories_occur_dict.keys():\n        top10_categories_by_tv.append(all_tv_categories_occur_dict[key])\n    else: \n        top10_categories_by_tv.append(0)  \n        \n\n## STACKED BAR CHART \nplt.figure(figsize = (10,3))\nplt.title(\"Top 10 Most Common Category found in Netflix Movies and TV Shows\")\nplt.bar(list(top10_categories), top10_categories_by_movie, color='b',edgecolor='black')\nplt.bar(list(top10_categories), top10_categories_by_tv, bottom=top10_categories_by_movie, color='r',edgecolor='black')\nplt.legend(['Movies', 'TV Shows'],loc=\"upper right\")\nplt.xlabel('Categories')\nplt.ylabel('# of Occurences')\nplt.xticks(rotation=45 , ha='right')\nplt.show()\n\n\nplt.figure(figsize = (10,3))\nplt.title(\"Top 10 Most Common Category found in Netflix Movies\")\nplt.xticks(rotation=45 , ha='right')\nplt.bar(*zip(*sorted(movie_category_occur_dict.items())),edgecolor='black')\nplt.xlabel('Categories')\nplt.ylabel('# of Occurences')\nplt.show()\n\nplt.figure(figsize = (10,3))\nplt.title(\"Top 10 Most Common Category found in Netflix TV Shows\")\nplt.xticks(rotation=45 , ha='right')\nplt.bar(*zip(*sorted(tv_category_occur_dict.items())), color='r',edgecolor='black')\nplt.xlabel('Categories')\nplt.ylabel('# of Occurences')\nplt.show()\n\nprint(\"---- Results: ---- \")\nanswer = converttostr(keys, \",\")\nprint(f'The Top 10 Most Common Category found in Netflix Movies and TV Shows are: \\n {answer} \\n')\nanswer_movie = converttostr(Extract(movie_occurences_category.most_common(10)), \",\")\nprint(f'The Top 10 Most Common Category found in Netflix Movies are: \\n {answer} \\n')\nanswer_tv = converttostr(Extract(tv_occurences_category.most_common(10)), \",\")\nprint(f'The Top 10 Most Common Category found in Netflix TV Shows are: \\n {answer} \\n')\n","da868638":"import re\nfrom gensim import models, corpora\nimport nltk\nfrom nltk import word_tokenize\nfrom nltk.corpus import stopwords\n\nfrom wordcloud import WordCloud, STOPWORDS, ImageColorGenerator \n\n","48fe80a8":"#identify the columns needed for analysis \n## looking to generate a wordcloud \n\nsubset = data[['type', 'description']]\n\nNUM_TOPICS = 10 \nSTOPWORDS = stopwords.words('english')\n\n","c440dcc7":"## WORDCLOUD BY NETFLIX TYPE\n\nmovie_text = \" \".join(desc for desc in subset[subset['type'] == \"Movie\"].description)\ntv_text = \" \".join(desc for desc in subset[subset['type'] == \"TV Show\"].description) \n# text = \" \".join(desc for desc in subset.description)\n\n# #creating the wordcloud \nwordcloud_movie = WordCloud(max_words=1000, background_color=\"white\").generate(movie_text)\nwordcloud_tv = WordCloud(max_words = 1000, background_color=\"white\").generate(tv_text)\n\n#print()\nplt.subplots(figsize=(20,20))\n# plt.subplots_adjust(top=0.8) \n# #display image\nplt.subplot(1,2,1)\nplt.title('Movie Description WordCloud', fontsize = 20)\nplt.imshow(wordcloud_movie)\nplt.axis(\"off\")\n# plt.show()\n# plt.suptitle(\"WordClouds\", fontsize = 20)\n\nplt.subplot(1,2,2)\nplt.title(\"TV Description WordCloud\", fontsize = 20)\nplt.imshow(wordcloud_tv)\nplt.axis(\"off\")\n\n# # plt.subplots_adjust(top=0.8) \n# plt.suptitle(\"WordClouds\", size=16)\n# plt.subplots_adjust(top=0.8) \n\n# plt.tight_layout(10)\nplt.show()","e827d087":"#creating a stopword list \n# stopwords = set(STOPWORDS)\nstopwords = nltk.corpus.stopwords.words('english')\nstopwords += ['s']\n# stopwords.update(['become', 'series', 'find','one', 'two', 'three', 'tries', 'make', 'finds'])\n\n# #creating the wordcloud \n# wordcloud = WordCloud(stopwords= stopwords, max_words=100, background_color=\"white\").generate(text)\n\n# #creating the wordcloud \nwordcloud_movie = WordCloud(stopwords= stopwords, max_words=1000, background_color=\"black\", normalize_plurals = True).generate(movie_text)\nwordcloud_tv = WordCloud(stopwords= stopwords, max_words = 1000, background_color=\"black\", normalize_plurals = True).generate(tv_text)\n\n#print()\nplt.subplots(figsize=(20,20))\n# plt.subplots_adjust(top=0.8) \n# #display image\nplt.subplot(1,2,1)\nplt.title('Movie Description WordCloud \\n Some Stopwords Removed', fontsize = 20)\nplt.imshow(wordcloud_movie)\nplt.axis(\"off\")\n# plt.show()\n# plt.suptitle(\"WordClouds\", fontsize = 20)\n\nplt.subplot(1,2,2)\nplt.title(\"TV Description WordCloud \\n Some Stopwords Removed\", fontsize = 20)\nplt.imshow(wordcloud_tv)\nplt.axis(\"off\")\n\n# # plt.subplots_adjust(top=0.8) \n# plt.suptitle(\"WordClouds\", size=16)\n# plt.subplots_adjust(top=0.8) \n\n# plt.tight_layout(10)\nplt.show()\n# #display image\n# plt.imshow(wordcloud)\n# plt.axis(\"off\")\n# plt.show()","5a1fbc1f":"# counting the Most Popular Words in each description \nimport warnings\nwarnings.filterwarnings('ignore')\nnum_top = 10 \n\n#Removing stopwords and punctuation\nsubset['description_without_stopwords'] = subset['description'].str.replace('[^\\w\\s]', ' ')\nsubset['description_without_stopwords'] = subset['description_without_stopwords'].apply(lambda x: ' '.join([word.lower() for word in x.split() if word.lower() not in (stopwords)]))\n\n\n#finding all the words in the descriptions\nwords = (subset.description_without_stopwords\n        .str.cat(sep=\" \")\n        .split()\n        )\n\n# finding all the words in the movie descriptions \nmovie_words = (subset[subset['type'] == \"Movie\"].description_without_stopwords\n        .str.cat(sep=\" \")\n        .split()\n        )\n\n\n# finding all the words in the tv show descriptions \ntv_words = (subset[subset['type'] == \"TV Show\"].description_without_stopwords\n        .str.cat(sep=\" \")\n        .split()\n        )\n\n\n#output - \nmost_common_words = pd.DataFrame(Counter(words).most_common(num_top), columns=['Word', 'Frequency']).set_index('Word').reset_index()\nmost_common_movie_words = pd.DataFrame(Counter(movie_words).most_common(num_top), columns=['Word', 'Frequency']).set_index('Word').reset_index() \nmost_common_tv_words = pd.DataFrame(Counter(tv_words).most_common(num_top), columns=['Word', 'Frequency']).set_index('Word').reset_index()\n\n\nplt.subplots(figsize=(20,3))\n\nplt.subplot(1,3,1)\nplt.bar(most_common_words['Word'].tolist(),most_common_words['Frequency'].tolist(),color=\"purple\",edgecolor=\"white\")  #, set_edgecolor=\"white\")\nplt.title(\"Most Common Words Found in Netflix Descriptions\")\nplt.xticks(rotation=45 , ha='right')\n# # plt.show()\n\nplt.subplot(1,3,2)\nplt.bar(most_common_movie_words['Word'].tolist(),most_common_movie_words['Frequency'].tolist(), color=\"blue\",  edgecolor=\"white\")  #, set_edgecolor=\"white\")\nplt.title(\"Most Common Words Found in Netflix Movie Descriptions\")\nplt.xticks(rotation=45 , ha='right')\n\n\nplt.subplot(1,3, 3)\nplt.bar(most_common_tv_words['Word'].tolist(),most_common_tv_words['Frequency'].tolist(), color=\"red\",  edgecolor=\"white\")  #, set_edgecolor=\"white\")\nplt.title(\"Most Common Words Found in Netflix TV Show Descriptions\")\nplt.xticks(rotation=45 , ha='right')\nplt.show()\n\n","a5118587":"#Another Idea for some Plots\n\n# fig=plt.figure(figsize=(20,3))\n# # plt.subplots(figsize=(20,3))\n# ax1 = plt.subplot(131)\n# ax2 = plt.subplot(132, sharey=ax1)\n# ax3 = plt.subplot(133)","ba12df86":"### 5. <a id = \"q5\"><\/a> Do Movies or TV Shows have more cast members? ","2649f947":"### 7. <a id = \"q7\"><\/a> Which is the most popular location to film for both Movies and TV shows? Just Movies? Just TV Shows? ","3459d391":"### 6. <a id = \"q6\"> <\/a> Which Movie and TV Shows were filmed in the most amount of countries? ","40ed02d8":"## WORDCLOUDS\n","25ef4f77":"There is an increase of Netflix Movies and TV Shows released in the past few years than in any other year. ","75edc20c":"In general, based on the dataset, it looks like there are more cast members in movies than in TV Shows. ","2de30b92":"### 2. <a id=\"q2\"><\/a> What is the distribution of the release year for both Movies and TV Shows? Just movies? Just TV Shows?\n","fee51e3a":"### 1. <a id='q1'><\/a>  Who are the top 10 cast members who appear in the most Netflix Movies and TV Shows? Just Movies? Just TV Shows?\n","813f1897":"### 4. <a id = \"q4\"><\/a> What is the relationship between Duration and Ratings for Movies? For TV Shows?","57e41078":"## WordClouds with the removal of stopwords","ee92671c":"### 3. <a id=\"q3\"><\/a> What is the frequency and distribution of Netflix Movies' duration?","8e5988ab":"## Objective\n\nI wanted to be able to analyse the dataset with a focus on certain questions to answer. In my analysis, I walk through each of the questions, answers in both visualizations and text form. \n","355eb01e":"\nThank you for reading! Feedback is welcome :) \n\n\n","05db7ef5":"### 8. <a id =\"q8\"> <\/a> What are the top 10 most popular movie\/TV show category? Just Movies? Just TV Shows?","c7ad58b3":"As a note, Movies and TV Shows do not have the same values for their respective duration. The analysis is done on movies and TV shows seperately. ","f2bf90cf":"# Analysis\n\nLooking to answer the following questions:\n\n1. [Who are the top 10 cast members who appear in the most Netflix Movies and TV Shows? Just Movies? Just TV Shows?](#q1)\n2. [What is the distribution of the release year for both Movies and TV Shows? Just movies? Just TV Shows?](#q2)\n3. [What is the frequency and distribution of Netflix Movies' duration?](#q3)\n4. [What is the relationship between Duration and Ratings for Movies? For TV Shows?](#q4)\n5. [Do Movies or TV Shows have more cast members?](#q5)\n6. [Which Movie and TV Shows were filmed in the most amount of countries?](#q6)\n7. [Which is the most popular location to film for both Movies and TV shows? Just Movies? Just TV Shows?](#q7)\n8. [What are the top 10 most popular movie\/TV show category? Just Movies? Just TV Shows?](#q8)","57ddc630":"# Loading the dataset"}}