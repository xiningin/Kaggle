{"cell_type":{"3dc61636":"code","964389b1":"code","22fd874a":"code","6ee828af":"code","554a96b1":"code","f73d2b7b":"code","0a071e6f":"code","72dffba5":"code","9cdcca61":"code","bcbafd1e":"markdown","0e4288db":"markdown","b8d02175":"markdown","2b699bef":"markdown","a9ff0fca":"markdown","642b454c":"markdown","6ddd968a":"markdown","9b2f1dc8":"markdown","7f7e983d":"markdown","f0a7e549":"markdown"},"source":{"3dc61636":"# Import Python Packages\n# PyTesseract and Tika-Python for OCR\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport shutil\nimport PIL\nimport os\nfrom os import walk\nfrom shutil import copytree, ignore_patterns\nfrom collections import Counter\nfrom nltk.corpus import stopwords\nfrom wordcloud import WordCloud, STOPWORDS\nfrom PIL import Image\nfrom wand.image import Image as Img\npd.set_option('display.max_columns', 500)\npd.set_option('display.max_colwidth', 500)\nmueller_report = pd.read_csv('..\/input\/mueller_report.csv') # one row per line\n\n# Define helper function for plotting word clouds\ndef wordCloudFunction(df,column,numWords):\n    # adapted from https:\/\/www.kaggle.com\/benhamner\/most-common-forum-topic-words\n    topic_words = [ z.lower() for y in\n                       [ x.split() for x in df[column] if isinstance(x, str)]\n                       for z in y]\n    word_count_dict = dict(Counter(topic_words))\n    popular_words = sorted(word_count_dict, key = word_count_dict.get, reverse = True)\n    popular_words_nonstop = [w for w in popular_words if w not in stopwords.words(\"english\")]\n    word_string=str(popular_words_nonstop)\n    wordcloud = WordCloud(stopwords=STOPWORDS,\n                          background_color='white',\n                          max_words=numWords,\n                          width=1000,height=1000,\n                         ).generate(word_string)\n    plt.clf()\n    plt.imshow(wordcloud)\n    plt.axis('off')\n    plt.show()\n\n# Define helper function for plotting word bar graphs\ndef wordBarGraphFunction(df,column,title):\n    # adapted from https:\/\/www.kaggle.com\/benhamner\/most-common-forum-topic-words\n    topic_words = [ z.lower() for y in\n                       [ x.split() for x in df[column] if isinstance(x, str)]\n                       for z in y]\n    word_count_dict = dict(Counter(topic_words))\n    popular_words = sorted(word_count_dict, key = word_count_dict.get, reverse = True)\n    popular_words_nonstop = [w for w in popular_words if w not in stopwords.words(\"english\")]\n    plt.barh(range(50), [word_count_dict[w] for w in reversed(popular_words_nonstop[0:50])])\n    plt.yticks([x + 0.5 for x in range(50)], reversed(popular_words_nonstop[0:50]))\n    plt.title(title)\n    plt.show()\n\n# Preview the data folder\ninputFolder = '..\/input\/'\nfor root, directories, filenames in os.walk(inputFolder):\n    for filename in filenames: \n        print(os.path.join(root,filename))\n        \n# Move data to folder with read\/write access\noutputFolder = '\/kaggle\/working\/pdfs\/'\nshutil.copytree(inputFolder,outputFolder,ignore=ignore_patterns('*.db'))\nfor root, directories, filenames in os.walk(outputFolder, topdown=False):\n    for file in filenames:\n        try:\n            shutil.move(os.path.join(root, file), outputFolder)\n        except OSError:\n            pass\nprint(os.listdir(outputFolder))\n\n# Look at intro page\npdf = os.path.join(outputFolder,'muellerreport.pdf[8]')\nwith Img(filename=pdf, resolution=300) as img:\n    img.compression_quality = 99\n    img.convert(\"RGBA\").save(filename='\/kaggle\/working\/mueller8.jpg') # intro page to preview later","964389b1":"# Parse a PDF file and convert it to CSV using PyTesseract\nimport pytesseract\npdfimage = Image.open('\/kaggle\/working\/mueller8.jpg')\ntext = pytesseract.image_to_string(pdfimage)  \ndf = pd.DataFrame([text.split('\\n')])","22fd874a":"# Parse a PDF file and convert it to CSV using Tika-Python\n!pip install tika\nimport tika\nfrom tika import parser\ntika.initVM()\nparsed = parser.from_file('\/kaggle\/working\/mueller8.jpg') \ntext = parsed[\"content\"]\ndf = pd.DataFrame([text.split('\\n')])\ndf.drop(df.iloc[:, 1:46], inplace=True, axis=1)","6ee828af":"# Plot WordCloud of page 8\nplt.figure(figsize=(15,15))\nwordCloudFunction(df.T,0,10000000)\nplt.figure(figsize=(10,10))\nwordBarGraphFunction(df.T,0,\"Most Common Words on Page 8 of the Mueller Report\")","554a96b1":"# Convert PDF to JPG and then convert JPG to CSV\n# I will do this for Pages 289 to 291 but\n# Eventually I should loop through the entire document\n\n# PDF to JPG for p289\npdf = os.path.join(outputFolder,'muellerreport.pdf[289]')\nwith Img(filename=pdf, resolution=300) as img:\n    img.compression_quality = 99\n    img.convert(\"RGBA\").save(filename='\/kaggle\/working\/mueller289.jpg')\npdfimage289 = Image.open('\/kaggle\/working\/mueller289.jpg')\n\n# PDF to JPG for p290\npdf = os.path.join(outputFolder,'muellerreport.pdf[290]')\nwith Img(filename=pdf, resolution=300) as img:\n    img.compression_quality = 99\n    img.convert(\"RGBA\").save(filename='\/kaggle\/working\/mueller290.jpg')\npdfimage290 = Image.open('\/kaggle\/working\/mueller290.jpg')\n\n# PDF to JPG for p291\npdf = os.path.join(outputFolder,'muellerreport.pdf[291]')\nwith Img(filename=pdf, resolution=300) as img:\n    img.compression_quality = 99\n    img.convert(\"RGBA\").save(filename='\/kaggle\/working\/mueller291.jpg')\npdfimage291 = Image.open('\/kaggle\/working\/mueller291.jpg')\n\n# Parse a PDF file and convert it to CSV using PyTesseract (p289)\ntext = pytesseract.image_to_string(pdfimage289)\ndf = pd.DataFrame([text.split('\\n')])\ndf.drop(df.iloc[:, 27:], inplace=True, axis=1)\ndf.drop(df.iloc[:, :3], inplace=True, axis=1)\ndf.columns = range(df.shape[1])\n\n# Parse a PDF file and convert it to CSV using Tika-Python (p290-291)\ntika.initVM()\nparsed = parser.from_file('\/kaggle\/working\/mueller290.jpg')\nparsed2 = parser.from_file('\/kaggle\/working\/mueller291.jpg')\n\ntext = parsed[\"content\"]\ndf2 = pd.DataFrame([text.split('\\n')])\ndf2.drop(df2.iloc[:, 1:50], inplace=True, axis=1)\ndf2.drop(df2.iloc[:, 26:], inplace=True, axis=1)\ndf2.columns = range(df2.shape[1])\n\ntext = parsed2[\"content\"]\ndf3 = pd.DataFrame([text.split('\\n')])\ndf3.drop(df3.iloc[:, :50], inplace=True, axis=1)\ndf3.drop(df3.iloc[:, 22:], inplace=True, axis=1)\ndf3.columns = range(df3.shape[1])\n\ndfcombined = pd.concat([df, df2, df3]) # combine pages 289-291","f73d2b7b":"w, h = pdfimage289.size # crop image\npdfimage289.crop((0, 1240, w, h-1300)) # display exerpt of PDF","0a071e6f":"# Pages 289-291\ndfcombined.head() # preview csv of 289-291","72dffba5":"# Word BarGraph for Entire Document\nmueller_report.drop(mueller_report.iloc[:, :2], inplace=True, axis=1) # only columns with text\nplt.figure(figsize=(10,10)) # 10x10 figure\nwordBarGraphFunction(mueller_report,'text',\"Most Common Words in the Entire Mueller Report\") # plot word bar graph","9cdcca61":"# Clean up the notebook\n!apt-get install zip # install zip\n!zip -r pdfs.zip \/kaggle\/working\/pdfs\/ # zip up a few files\n!rm -rf pdfs\/* # remove everything else","bcbafd1e":"**Convert Page 8 of PDF to CSV (Method 2 of 2: [Tika-Python](https:\/\/github.com\/chrismattmann\/tika-python))**","0e4288db":"**Define Helper Functions**","b8d02175":"**Convert Page 8 of PDF to CSV (Method 1 of 2: [PyTesseract](https:\/\/pypi.org\/project\/pytesseract\/))**","2b699bef":"Attorney General William Barr recently released a redacted version of Robert Mueller's report on Russian interference during the 2016 US Presidential Elections. \n\nThis kernel demonstrates how to work with both PDF and CSV versions of the report.\n","a9ff0fca":"# **The Mueller Report**","642b454c":"# **Convert PDF to CSV**","6ddd968a":"**Make Another WordGraph**","9b2f1dc8":"**Make WordCloud and WordGraph**","7f7e983d":"# **Explore Pages 289-291**","f0a7e549":"**Clean up Notebook**"}}