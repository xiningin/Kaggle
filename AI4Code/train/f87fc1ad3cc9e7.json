{"cell_type":{"8df37f2e":"code","8c4470d6":"code","c4dfdf28":"code","fed32d7d":"code","32c092d6":"code","a7bb4196":"code","fc86e26a":"code","f70f9670":"code","bb9c3b1b":"code","38590f8d":"code","1ad0caff":"code","b1d78fcf":"code","ed6f5049":"code","0daadf34":"code","1e262de6":"code","cd6af986":"code","c7e53092":"code","54aef26d":"code","74b93638":"code","1fed591c":"code","96360d0e":"code","7d84308e":"code","dfa35828":"markdown","c61a43df":"markdown","08d93061":"markdown","583e7c04":"markdown","60c99156":"markdown","f67d25d7":"markdown"},"source":{"8df37f2e":"import numpy as np\nimport tensorflow as tf\nimport tensorflow_datasets as tfds\nfrom tensorflow import keras\nfrom tensorflow.keras.layers import Dense, Dropout, Bidirectional, LSTM\nimport matplotlib.pyplot as plt","8c4470d6":"data, meta = tfds.load('imdb_reviews\/subwords8k',\n                      with_info = True,\n                      as_supervised = True)","c4dfdf28":"data.keys()","fed32d7d":"train = data['train']\ntest = data['test']\ntrain, test","32c092d6":"# explore the features in metadata\nmeta.features","a7bb4196":"# extract the encoder\nencoder = meta.features['text'].encoder","fc86e26a":"encoder.vocab_size","f70f9670":"print(encoder.subwords[:100])","bb9c3b1b":"example = 'Analytics India Magazine !'\nenc = encoder.encode(example)\nenc","38590f8d":"for integer in enc:\n    text = encoder.decode([integer])\n    print('%4d : %s'%(integer, text))","1ad0caff":"it = iter(train)","b1d78fcf":"next(it)[0].numpy().shape, next(it)[1].numpy().shape","ed6f5049":"BUFFER_SIZE = 10000\nBATCH_SIZE = 64\nAUTOTUNE = tf.data.AUTOTUNE\n\ntrain_data = train.shuffle(BUFFER_SIZE)\ntrain_data = train_data.padded_batch(BATCH_SIZE, padded_shapes=([None],[]))\ntrain_data = train_data.prefetch(AUTOTUNE)\n\ntest_data = test.padded_batch(BATCH_SIZE, padded_shapes=([None],[]))","0daadf34":"embed_layer = keras.layers.Embedding(encoder.vocab_size, 64)","1e262de6":"model = keras.Sequential([\n    # embedding layer\n    embed_layer,\n    # bidirectional LSTM layers\n    Bidirectional(LSTM(64, \n                       dropout=0.5, \n                       recurrent_dropout=0.5, \n                       return_sequences=True)),\n    Bidirectional(LSTM(32, \n                       dropout=0.5, \n                       recurrent_dropout=0.5, \n                       return_sequences=True)),\n    Bidirectional(LSTM(16, \n                       dropout=0.5, \n                       recurrent_dropout=0.5)),\n    # Classification head\n    Dense(64, activation='relu', kernel_regularizer='l2'),\n    Dropout(0.5),\n    Dense(1, activation='sigmoid')    \n])","cd6af986":"model.summary()","c7e53092":"keras.utils.plot_model(model, show_shapes=True, dpi=48)","54aef26d":"model.compile(loss='binary_crossentropy',\n             optimizer='adam',\n             metrics=['accuracy'])","74b93638":"history = model.fit(train_data, \n                    validation_data=test_data, \n                    epochs=2)","1fed591c":"hist = history.history\n\nplt.plot(hist['loss'])\nplt.plot(hist['val_loss'])\nplt.legend(labels=['Training', 'Validation'])\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.show()","96360d0e":"# Sample prediction\n\nsamples = ['The plot is fantastic', \n           'The movie was cool and thrilling', \n           'one of the worst films I have ever seen']\n\n# encode into integers\nsample_encoded = [encoder.encode(sample) for sample in samples]\n\n# pad with zeros to have same length \nsample_padded = []\nfor s in sample_encoded:\n    pad_length = 128 - len(s)\n    zeros = [0]*pad_length\n    s.extend(zeros)\n    s = tf.convert_to_tensor(s)\n    sample_padded.append(s)\n    \n# convert into tensor before feeding the model\nsample_padded = tf.convert_to_tensor(sample_padded)\n#make predictions\npredictions = model.predict(sample_padded)\npredictions","7d84308e":"print('Predictions on sample test reviews... \\n')\nfor i in range(len(samples)):\n    pred = predictions[i][0]\n    sentiment = 'positive' if pred>0.5 else 'negative'\n    print('%40s : %s'%(samples[i], sentiment))","dfa35828":"https:\/\/github.com\/RajkumarGalaxy\/NLP\/blob\/master\/get-started-with-sentiment-analysis-tf-keras.ipynb\n","c61a43df":"# Build Model","08d93061":"### Thank You For Your Time!","583e7c04":"# Train the Model","60c99156":"# IMDB Dataset","f67d25d7":"# Get Started With Sentiment Analysis Using TensorFlow Keras\n\nReferences:\n\nhttps:\/\/www.tensorflow.org\/datasets\/catalog\/imdb_reviews\n\nhttps:\/\/www.tensorflow.org\/text\/tutorials\/text_classification_rnn\n"}}