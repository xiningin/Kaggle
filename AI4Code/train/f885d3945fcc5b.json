{"cell_type":{"fe4ff01f":"code","0be245b4":"code","de6848ae":"code","6a80d692":"code","c6beb2a1":"code","7f351a2f":"code","5a1fe748":"code","58a849a7":"code","f9cda990":"code","9487b935":"code","d023ed58":"code","c8f98831":"code","9b1c302c":"code","635b18d5":"code","abbd3840":"markdown","735de86e":"markdown","4ec3ceef":"markdown","683aee90":"markdown","df22849c":"markdown","e70e3624":"markdown","ec5c9ac9":"markdown","2bb3da9a":"markdown","238e27ab":"markdown","8a016d11":"markdown"},"source":{"fe4ff01f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0be245b4":"train_data = pd.read_csv('..\/input\/breast-cancer\/train.csv')\ntest_data = pd.read_csv('..\/input\/breast-cancer\/test.csv')","de6848ae":"train_data.info()","6a80d692":"X = train_data.drop(['class'],axis = 1)\nX.drop(['Id'],axis = 1, inplace = True)\ny = train_data['class']","c6beb2a1":"X_sub = test_data.drop(['Id'],axis = 1)","7f351a2f":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state= 1)","5a1fe748":"def LogisticRegression(X_train, y_train,X_test_model):\n    from sklearn.linear_model import LogisticRegressionCV\n    clf = LogisticRegressionCV(cv = 5,max_iter = 1000, random_state=0).fit(X_train, y_train)\n    y_pred_LR = clf.predict(X_test_model)\n    print(clf.score(X_train,y_train))\n    return y_pred_LR\ny_pred_LR = LogisticRegression(X_train, y_train,X_test)","58a849a7":"def RandomForest(X_train, y_train, X_test_pass):\n    from sklearn.ensemble import RandomForestClassifier\n    #X, y = make_classification(n_samples=1000, n_features=4,n_informative=2, n_redundant=0,random_state=0, shuffle=False)\n    model = RandomForestClassifier(max_depth=2, random_state=0)\n    #model = RandomForestClassifier(n_estimators=1000,min_samples_split=25, max_depth=7, max_features=2)\n    model.fit(X_train,y_train)\n    y_pred_RP = model.predict(X_test_pass)\n    feature_importances = pd.DataFrame(model.feature_importances_,index = X_train.columns,columns=['importance']).sort_values('importance',ascending=False)\n    print(feature_importances)\n    print(model.score(X_train,y_train))\n    return y_pred_RP\ny_pred_RP = RandomForest(X_train, y_train,X_test)\n","f9cda990":"feature_importances = ['uniformity_of_cell_shape','uniformity_of_cell_size','bare_nuclei']\nX_train2 = pd.DataFrame() \nX_test2 = pd.DataFrame() \nfor feature in feature_importances:\n    X_train2[feature] = X_train[feature]\n    X_test2[feature] = X_test[feature]\ny_pred_important_RP = RandomForest(X_train2,y_train,X_test2)\n#y_pred_important_LR = LogisticRegression(X_train2, y_train, X_test2)","9487b935":"def score_model(y_pred_model,y_test):\n    from sklearn.metrics import accuracy_score\n    score = accuracy_score(y_pred_model,y_test)\n    return score\nscore_model(y_pred_RP,y_test)","d023ed58":"score_list = [score_model(y_pred_LR,y_test), score_model(y_pred_RP,y_test), score_model(y_pred_important_RP,y_test)]\nfor score in score_list:\n    print(score)","c8f98831":"y_pred_sub = RandomForest(X_train,y_train,X_sub)\ny_pred_sub = pd.DataFrame({'Class': y_pred_sub[:]})","9b1c302c":"output = pd.DataFrame({'Id': test_data['Id'], 'Class': y_pred_sub['Class']})","635b18d5":"output.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","abbd3840":"LogisticRegression fit and predicts on train and test data\n\nReturning Numpy array of y_pred_LR","735de86e":"Suggestion and comments are most welcome  \nAnd due credits will be given\n\nPlease upvote if found NoteBook helpful","4ec3ceef":"Info about train data dtypes and null values and feature_names","683aee90":"RandomForest fit and predicts on train and test data\n\nPrints list of important features\n\nReturning Numpy array of y_pred_RP","df22849c":"Basic Implementation on Breast Data Set for inCompetition\n* Considering two major Classifiers:\n\n Logistic RegCV and Random Forest","e70e3624":"Score_model to calculate accuracy score on test set","ec5c9ac9":"Considering training model with features considering only important features","2bb3da9a":"Spliting given train DataSet into Train and Test.","238e27ab":"Storing DataFrame reference of test and train data using pd.read_csv","8a016d11":"Dropping 'Id' col and storing target value 'class' in y"}}