{"cell_type":{"4c88ba99":"code","d1c0071c":"code","3898075b":"code","346b15a0":"code","165e0f78":"code","6ed586d8":"code","45de5dc6":"code","7510dd8d":"code","9f1ec090":"code","9e7bfa74":"code","4db615a7":"code","b7cecca3":"code","a4401da0":"code","67bb04cf":"code","05e039fb":"code","713506f0":"code","7441823d":"code","e252c0b8":"code","671872c5":"code","098e320a":"code","13bf6a93":"markdown","f5310ac9":"markdown","822961a1":"markdown","e2dc21bc":"markdown","742685fa":"markdown"},"source":{"4c88ba99":"import warnings\nwarnings.filterwarnings('ignore')\nimport pandas as pd\ndf = pd.read_csv('\/kaggle\/input\/data-breastcancer\/data.csv')\nprint(df.shape)\ndf.head()","d1c0071c":"df.drop(['id'], axis = 1,inplace = True)","3898075b":"df['diagnosis'].value_counts()","346b15a0":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ndf['diagnosis'] = le.fit_transform(df['diagnosis'])","165e0f78":"df['diagnosis'].value_counts()","6ed586d8":"df","45de5dc6":"import seaborn as sb\nimport matplotlib.pyplot as plt\nax = plt.figure(figsize = (16,25))\ncorr = df.corr()\nsb.heatmap(corr,vmax = 1, vmin = -1,annot = True)","7510dd8d":"#df.drop(df[['fractal_dimension_se','smoothness_se','fractal_dimension_se','symmetry_se', 'concavity_se','compactness_se','texture_se','fractal_dimension_mean']], axis = 1,inplace = True)","9f1ec090":"df['diagnosis'].value_counts()","9e7bfa74":"import numpy as np\ndf[df.isnull()]","4db615a7":"df.isnull().sum()","b7cecca3":"df.dropna(axis = 1,inplace = True)","a4401da0":"df.astype('float')","67bb04cf":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nx = df.drop(['diagnosis'],axis = 1)\ny = df['diagnosis']\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size = 0.2,random_state = 205)\nlr = LogisticRegression(max_iter = 20000).fit(x_train,y_train)\npredCLR = lr.predict(x_test)\nprint((lr.score(x_train,y_train)+lr.score(x_test,y_test))\/2)\n","05e039fb":"from sklearn.model_selection import StratifiedKFold, cross_val_score\nskf = StratifiedKFold(10)\nlr = LogisticRegression(max_iter = 20000)\ncross_val_score(lr,x,y,cv =skf).mean()","713506f0":"for train_index, test_index in skf.split(x,y):\n    print(\"TRAIN:\", train_index,\"\\n\", \"TEST:\", test_index)\n    x_train, x_test = x.iloc[train_index], x.iloc[test_index]\n    y_train, y_test = y.iloc[train_index], y.iloc[test_index]","7441823d":"from sklearn.model_selection import LeaveOneOut\nloo = LeaveOneOut()\nlr = LogisticRegression(max_iter = 20000)\ncross_val_score(lr,x,y,cv =loo,n_jobs = -1).mean()","e252c0b8":"for train_index, test_index in loo.split(x):\n    print(\"TRAIN:\", train_index,\"\\n\", \"TEST:\", test_index)\n    x_train, x_test = x.iloc[train_index], x.iloc[test_index]\n    y_train, y_test = y.iloc[train_index], y.iloc[test_index]","671872c5":"from sklearn.model_selection import KFold, cross_val_score\nx = df.drop('diagnosis', axis = 1)\ny = df['diagnosis']\nkf = KFold(10)\nlr = LogisticRegression(max_iter = 20000)\ncross_val_score(lr,x,y,cv = kf).mean()","098e320a":"for train_index, test_index in kf.split(x):\n    print(\"TRAIN:\", train_index,\"\\n\", \"TEST:\", test_index)\n    x_train, x_test = x.iloc[train_index], x.iloc[test_index]\n    y_train, y_test = y.iloc[train_index], y.iloc[test_index]","13bf6a93":"## 2. Stratified K-fold validation","f5310ac9":"## 1. train_test_split","822961a1":"# Cross Validation","e2dc21bc":"## 3. LOOCV","742685fa":"## 4. K-fold cross validation"}}