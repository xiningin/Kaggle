{"cell_type":{"f29d340c":"code","84b7f3ef":"code","c3f0a689":"code","adaa367b":"code","96f98752":"code","1195673b":"code","7ac8967d":"code","2ab5a3d6":"code","a57b555d":"code","6f5ff263":"code","a5752153":"code","50806f3e":"code","afc1b384":"code","50b738b0":"code","bc34d5c0":"code","18ac7317":"code","66ac91f7":"code","8f15961d":"code","8442eda6":"code","b264720a":"code","5e089882":"markdown","c6192a02":"markdown","ffc2ef27":"markdown","84c1b32f":"markdown","7c253960":"markdown","f414b326":"markdown","eb2281bc":"markdown","dfbc3d3a":"markdown"},"source":{"f29d340c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","84b7f3ef":"!pip install split_folders","c3f0a689":"!pip install tensorflow==2.1.0","adaa367b":"import split_folders\n\nsplit_folders.ratio('..\/input\/brain-mri-images-for-brain-tumor-detection\/brain_tumor_dataset',\n                    output='brain-tumor',\n                    seed=1337,\n                    ratio=(.8, .1,.1))","96f98752":"import tensorflow as tf\n\ntrain_folder = '..\/working\/brain-tumor\/train'\n\nvalidate_folder = '..\/working\/brain-tumor\/val'","1195673b":"from tensorflow.keras.preprocessing.image import ImageDataGenerator\n\ntrain_gen = ImageDataGenerator(rotation_range=30,\n                               zoom_range=20,\n                               horizontal_flip=True,\n                               rescale=1. \/ 255)","7ac8967d":"batch_size = 128\nepochs = 15\nIMG_HEIGHT = 150\nIMG_WIDTH = 150","2ab5a3d6":"train_data_gen = train_gen.flow_from_directory(batch_size=batch_size,\n                                               directory=train_folder,\n                                               shuffle=True,\n                                               target_size=(IMG_HEIGHT,\n                                                            IMG_WIDTH),\n                                               class_mode='binary',\n                                               color_mode='grayscale')","a57b555d":"val_gen = ImageDataGenerator(rotation_range=30,\n                             zoom_range=20,\n                             horizontal_flip=True,\n                             rescale=1. \/ 255)","6f5ff263":"val_data_gen = val_gen.flow_from_directory(batch_size=batch_size,\n                                           directory=validate_folder,\n                                           shuffle=True,\n                                           target_size=(IMG_HEIGHT, IMG_WIDTH),\n                                           class_mode='binary',\n                                           color_mode='grayscale')","a5752153":"from tensorflow.keras.layers import Dense, Dropout, Convolution2D, MaxPool2D, Flatten, InputLayer, Conv2D\nfrom tensorflow.keras.models import Sequential\n\nmodel = Sequential([\n    Conv2D(32, (3, 3),\n           padding='same',\n           strides=2,\n           activation='relu',\n           input_shape=(IMG_HEIGHT, IMG_WIDTH, 1)),\n    MaxPool2D((2, 2), strides=2),\n    Conv2D(64, (3, 3), padding='same', activation='relu'),\n    MaxPool2D((2, 2), strides=2),\n    Conv2D(64, (3, 3), padding='same', activation='relu'),\n    MaxPool2D((2, 2), strides=2),\n    Conv2D(128, (3, 3), padding='same', activation='relu'),\n    MaxPool2D((3, 3), strides=2),\n    Flatten(),\n    Dense(128, activation='relu'),\n    Dense(2, activation='softmax')\n])","50806f3e":"model.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])","afc1b384":"model.summary()","50b738b0":"%load_ext tensorboard","bc34d5c0":"import os\nimport datetime\n\nlogdir = os.path.join(\"logs\",\n                      datetime.datetime.now().strftime(\"%Y%m%d-%H%M%S\"))\ntensorboard_callback = tf.keras.callbacks.TensorBoard(logdir, histogram_freq=1)","18ac7317":"r = model.fit_generator(train_data_gen,\n                        epochs=12,\n                        validation_data=val_data_gen,\n                        callbacks = [tensorboard_callback])","66ac91f7":"%tensorboard --logdir logs","8f15961d":"print(r.history.keys())\n\nr.history","8442eda6":"!pip install plotly","b264720a":"import plotly.express as px\nimport plotly.graph_objs as go\n\ndata = [go.Scatter(x = r.epoch, y = r.history['loss'], mode='lines',name='loss')]\n\nlayout = go.Layout(title = 'Learning Curve',\n                        xaxis = dict(title = 'epochs'),\n                        yaxis = dict(title = ''))\n\nfig = go.Figure(data = data)\n\nfig.add_trace(go.Scatter(x=r.epoch,y=r.history['accuracy'],mode='lines',name='accuracy'))\n\nfig.add_trace(go.Scatter(x=r.epoch,y=r.history['val_loss'],mode='lines',name='val_loss'))\n\nfig.add_trace(go.Scatter(x=r.epoch,y=r.history['val_accuracy'],mode='lines',name='val_accuracy'))\n\nfig.update_layout(title='Learning Curve',\n                   xaxis_title='Epochs',\n                   yaxis_title='Metrics and Loss',\n                 template = 'plotly_dark')\n\nfig.show()\n","5e089882":"<a id=\"section-two\"><\/a>\n# 2. Split data into train,test and val set","c6192a02":"<a id=\"section-seven\"><\/a>\n# 7. Plotting learning curve using *plotly*","ffc2ef27":"<a id=\"section-five\"><\/a>\n# 5. Define a *Convolutional Neural Network*","84c1b32f":"# Index\n1. [Install split_folder](#section-one)\n2. [Split data into train,test and val set](#section-two)\n3. [Load train and val directory](#section-three)\n4. [keras *ImageDataGenerator*](#section-four)\n5. [*Convolutional Nueral Network* model](#section-five)\n6. [*tensorboard* visualization](#section-six)\n7. [Learning curve using *plotly*](#section-seven)","7c253960":"<a id=\"section-six\"><\/a>\n# 6. Visualize using *tensorboard*","f414b326":"<a id=\"section-three\"><\/a>\n# 3. loading train and validation directory","eb2281bc":"<a id=\"section-four\"><\/a>\n# 4. Using keras *ImageDataGenerator* to input images to model","dfbc3d3a":"<a id=\"section-one\"><\/a> \n# 1. Install split_folder"}}