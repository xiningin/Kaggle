{"cell_type":{"b9d5e056":"code","baebccde":"code","d426b265":"code","ed23c3a8":"code","b4f02532":"code","72ecf8a8":"code","3984bfaf":"code","82889586":"code","115e45dd":"code","6f199deb":"code","eb762ac8":"code","cfd3b3bc":"code","e1a6bcf0":"code","51a998be":"code","03f5b17c":"code","16e37786":"code","127a0c56":"code","23609a41":"code","b649f1cf":"code","087f15cd":"code","29ae76cf":"code","0029127d":"code","057ec468":"code","58f60ec8":"code","8027ca2e":"code","ab2b00d6":"code","75d3d485":"code","4069fcb2":"code","0fe5d0ee":"code","ae677429":"code","be38a0da":"code","9f22cd91":"code","df184611":"code","48957dbf":"code","a3f99a1b":"code","b48b7ee6":"code","39ecce2d":"code","854ac9f8":"code","cfb78eab":"code","67e171cd":"code","0f193c5b":"code","6fd6b3cf":"code","38fef46c":"code","73d41c38":"code","dd389e0f":"code","36c5c549":"code","0872efd5":"code","df09328f":"code","14f2acad":"code","39ebbf0e":"code","1b397223":"code","45c27e3d":"code","92a9f261":"code","a034a59d":"code","ec41f839":"code","fabf9a93":"code","5aadea4a":"code","375e66bd":"code","d140dd7a":"code","7035f6d9":"code","9c97fcca":"code","e1b90508":"code","0abdf8bb":"code","d7904236":"code","fb741873":"code","4b50171f":"code","7b6190ce":"code","6e257e2a":"code","9255a33f":"code","36419823":"code","d997d7a9":"code","c5e3c0db":"code","9220bd7f":"code","c028e413":"code","d8fe3203":"code","ec06be7e":"code","b2fb8def":"code","70dca122":"code","6800ff69":"code","13057de0":"code","94905345":"code","d86fbcfd":"code","81cd42fc":"code","e9cd1175":"code","2821107f":"code","3fd39fcb":"code","6feaecd9":"code","e40d0c61":"code","f15ea7d8":"code","975bbf6d":"code","0fe11e7c":"code","f9e719fe":"code","a94f2fbe":"code","ff3ec63e":"code","f2376388":"code","8e2a6296":"code","778944f5":"code","7c7b3aa1":"code","49507ea3":"code","b540b7dd":"code","05d2c047":"code","be5761bc":"code","62d2b3bf":"code","5cd0d82c":"code","8b5e8e4d":"code","5769ec2f":"code","e894ed1f":"code","65e9eac9":"code","f29c9f27":"code","1e4340c3":"code","991e3fd9":"code","0c293980":"code","ede0311e":"code","067ee3ee":"code","f2de9b2d":"code","a330ef67":"code","f5b63f3b":"code","fe6ff20f":"code","5984fa73":"code","ba614c6f":"code","224fec11":"code","c9d42b1a":"code","1b784156":"code","2b6fe117":"code","7944817c":"code","1d45d8cd":"code","695ed80c":"code","35726e11":"code","1e63f015":"code","848abd13":"code","26b36098":"code","96c763cf":"markdown","77c14d30":"markdown","48d325a9":"markdown","f84fdda4":"markdown","4e257985":"markdown","9623f66a":"markdown","d334dcb4":"markdown","db5c39a4":"markdown","66f47477":"markdown","b2b479d3":"markdown","c2f49549":"markdown","fd56bc41":"markdown","e08b9028":"markdown","77f37a9a":"markdown","19b1d306":"markdown","a9e2a8ae":"markdown","1c07b4be":"markdown","3db59957":"markdown","a66bfe5a":"markdown","7273dd4c":"markdown","d3d4e31e":"markdown","0b5d5e49":"markdown","57e23980":"markdown","6940548f":"markdown","6811f23b":"markdown","85f4e8c9":"markdown","0ebaa12f":"markdown","e567b294":"markdown","9c502633":"markdown","35287351":"markdown","d2ecee90":"markdown"},"source":{"b9d5e056":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","baebccde":"dataset = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')","d426b265":"pd.set_option('max_rows', 200)","ed23c3a8":"pd.set_option('max_columns', 200)","b4f02532":"dataset.head()","72ecf8a8":"dataset.shape","3984bfaf":"dataset.columns","82889586":"dataset.info()","115e45dd":"# statistical summary\ndataset.describe()","6f199deb":"# Numerical columns\ndataset.select_dtypes(include=['int64', 'float64']).columns","eb762ac8":"len(dataset.select_dtypes(include=['int64', 'float64']).columns)","cfd3b3bc":"# categorical columns\ndataset.select_dtypes(include='object').columns","e1a6bcf0":"len(dataset.select_dtypes(include='object').columns)","51a998be":"dataset.isnull().values.any()","03f5b17c":"dataset.isnull().values.sum()","16e37786":"dataset.isnull().sum()","127a0c56":"# columns with null values\ndataset.columns[dataset.isnull().any()]","23609a41":"len(dataset.columns[dataset.isnull().any()])","b649f1cf":"# null values with heatmap\nplt.figure(figsize=(16,9))\nsns.heatmap(dataset.isnull())\nplt.show()","087f15cd":"dataset.shape","29ae76cf":"null_percent = dataset.isnull().sum() \/ dataset.shape[0] * 100\n\n# (missing values \/ total values) * 100","0029127d":"null_percent","057ec468":"# columns to drop (more than 50% null values)\ncols_to_drop = null_percent[null_percent > 50].keys()","58f60ec8":"cols_to_drop","8027ca2e":"dataset = dataset.drop(columns=['Alley', 'PoolQC', 'Fence', 'MiscFeature'])","ab2b00d6":"dataset.shape","75d3d485":"# columns with null values\ndataset.columns[dataset.isnull().any()]","4069fcb2":"len(dataset.columns[dataset.isnull().any()])","0fe5d0ee":"# Numerical Columns\n# 'LotFrontage', 'MasVnrArea', 'GarageYrBlt'","ae677429":"dataset['LotFrontage'] = dataset['LotFrontage'].fillna(dataset['LotFrontage'].mean())\ndataset['MasVnrArea'] = dataset['MasVnrArea'].fillna(dataset['MasVnrArea'].mean())\ndataset['GarageYrBlt'] = dataset['GarageYrBlt'].fillna(dataset['GarageYrBlt'].mean())","be38a0da":"len(dataset.columns[dataset.isnull().any()])","9f22cd91":"dataset.select_dtypes(include='object').columns","df184611":"dataset.columns[dataset.isnull().any()]","48957dbf":"len(dataset.columns[dataset.isnull().any()])","a3f99a1b":"dataset['MasVnrType'] = dataset['MasVnrType'].fillna(dataset['MasVnrType'].mode()[0])\ndataset['BsmtQual'] = dataset['BsmtQual'].fillna(dataset['BsmtQual'].mode()[0])\ndataset['BsmtCond'] = dataset['BsmtCond'].fillna(dataset['BsmtCond'].mode()[0])\ndataset['BsmtExposure'] = dataset['BsmtExposure'].fillna(dataset['BsmtExposure'].mode()[0])\ndataset['BsmtFinType1'] = dataset['BsmtFinType1'].fillna(dataset['BsmtFinType1'].mode()[0])\ndataset['BsmtFinType2'] = dataset['BsmtFinType2'].fillna(dataset['BsmtFinType2'].mode()[0])\ndataset['Electrical'] = dataset['Electrical'].fillna(dataset['Electrical'].mode()[0])\ndataset['FireplaceQu'] = dataset['FireplaceQu'].fillna(dataset['FireplaceQu'].mode()[0])\ndataset['GarageType'] = dataset['GarageType'].fillna(dataset['GarageType'].mode()[0])\ndataset['GarageFinish'] = dataset['GarageFinish'].fillna(dataset['GarageFinish'].mode()[0])\ndataset['GarageQual'] = dataset['GarageQual'].fillna(dataset['GarageQual'].mode()[0])\ndataset['GarageCond'] = dataset['GarageCond'].fillna(dataset['GarageCond'].mode()[0])","b48b7ee6":"len(dataset.columns[dataset.isnull().any()])","39ecce2d":"dataset.isnull().values.any()","854ac9f8":"# distplot of the target variable\n\nplt.figure(figsize=(16,9))\nbar = sns.distplot(dataset['SalePrice'])\nbar.legend([\"Skewness: {:.2f}\".format(dataset['SalePrice'].skew())])\nplt.show()","cfb78eab":"dataset_2 = dataset.drop(columns='SalePrice')","67e171cd":"dataset_2.shape","0f193c5b":"dataset_2.corrwith(dataset['SalePrice']).plot.bar(\n    figsize=(16,9), title='Correlated with SalePrice', grid=True\n)","6fd6b3cf":"# heatmap\nplt.figure(figsize=(25, 25))\nax = sns.heatmap(data=dataset.corr(), cmap='coolwarm', annot=True, linewidths=2)","38fef46c":"high_corr = dataset.corr()","73d41c38":"high_corr_features = high_corr.index[abs(high_corr['SalePrice']) > 0.5]","dd389e0f":"high_corr_features","36c5c549":"len(high_corr_features)","0872efd5":"# heatmap\nplt.figure(figsize=(16,9))\nax = sns.heatmap(data=dataset[high_corr_features].corr(), cmap='coolwarm', annot=True, linewidths=2)","df09328f":"dataset.shape","14f2acad":"dataset.columns","39ebbf0e":"# categorical columns\ndataset.select_dtypes(include='object').columns","1b397223":"len(dataset.select_dtypes(include='object').columns)","45c27e3d":"dataset = pd.get_dummies(data=dataset, drop_first=True)","92a9f261":"dataset.shape","a034a59d":"dataset.columns","ec41f839":"# categorical columns\ndataset.select_dtypes(include='object').columns","fabf9a93":"len(dataset.select_dtypes(include='object').columns)","5aadea4a":"# independ variables \/ matrix of features\nx = dataset.drop(columns='SalePrice')","375e66bd":"# target variable \/ dependent variable\ny = dataset['SalePrice']","d140dd7a":"from sklearn.model_selection import train_test_split","7035f6d9":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=0)","9c97fcca":"x_train.shape","e1b90508":"y_train.shape","0abdf8bb":"x_test.shape","d7904236":"y_test.shape","fb741873":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nx_train = sc.fit_transform(x_train)\nx_test = sc.transform(x_test)","4b50171f":"x_train","7b6190ce":"x_test","6e257e2a":"from sklearn.linear_model import LinearRegression\nregressor_mlr = LinearRegression()\nregressor_mlr.fit(x_train, y_train)","9255a33f":"y_pred = regressor_mlr.predict(x_test)","36419823":"from sklearn.metrics import r2_score","d997d7a9":"r2_score(y_test, y_pred)","c5e3c0db":"from sklearn.ensemble import RandomForestRegressor\nregressor_rf = RandomForestRegressor()\nregressor_rf.fit(x_train, y_train)","9220bd7f":"y_pred = regressor_rf.predict(x_test)","c028e413":"from sklearn.metrics import r2_score\nr2_score(y_test, y_pred)","d8fe3203":"from xgboost import XGBRFRegressor\nregressor_xgb = XGBRFRegressor()\nregressor_xgb.fit(x_train, y_train)","ec06be7e":"y_pred = regressor_xgb.predict(x_test)","b2fb8def":"from sklearn.metrics import r2_score\nr2_score(y_test, y_pred)","70dca122":"from sklearn.model_selection import RandomizedSearchCV","6800ff69":"parameters = {\n    'n_estimators':[200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000],\n    'max_depth':[10, 20, 30, 40, 50, 60, 70, 80, 90, 100, None],\n    'min_samples_split':[2, 5, 10],\n    'min_samples_leaf':[1, 2, 4],\n    'max_features':['auto', 'sqrt'],\n    'bootstrap':[True, False]    \n}","13057de0":"parameters","94905345":"random_cv = RandomizedSearchCV(estimator=regressor_rf, param_distributions=parameters, n_iter=50, cv=5,\n                               verbose=2, n_jobs=-1, random_state=0)","d86fbcfd":"random_cv.fit(x_train, y_train)","81cd42fc":"random_cv.best_estimator_","e9cd1175":"random_cv.best_params_","2821107f":"from sklearn.ensemble import RandomForestRegressor\nregressor = RandomForestRegressor(bootstrap=False, ccp_alpha=0.0, criterion='mse',\n                      max_depth=50, max_features='sqrt', max_leaf_nodes=None,\n                      max_samples=None, min_impurity_decrease=0.0,\n                      min_impurity_split=None, min_samples_leaf=1,\n                      min_samples_split=2, min_weight_fraction_leaf=0.0,\n                      n_estimators=1200, n_jobs=None, oob_score=False,\n                      random_state=None, verbose=0, warm_start=False)\nregressor.fit(x_train, y_train)","3fd39fcb":"y_pred = regressor.predict(x_test)","6feaecd9":"from sklearn.metrics import r2_score\nr2_score(y_test, y_pred)","e40d0c61":"# Read the test data\ntest = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","f15ea7d8":"test.shape","975bbf6d":"columns_list = ['Id', 'MSSubClass', 'MSZoning', 'LotFrontage', 'LotArea', 'Street',\n       'LotShape', 'LandContour', 'Utilities', 'LotConfig', 'LandSlope',\n       'Neighborhood', 'Condition1', 'Condition2', 'BldgType', 'HouseStyle',\n       'OverallQual', 'OverallCond', 'YearBuilt', 'YearRemodAdd', 'RoofStyle',\n       'RoofMatl', 'Exterior1st', 'Exterior2nd', 'MasVnrType', 'MasVnrArea',\n       'ExterQual', 'ExterCond', 'Foundation', 'BsmtQual', 'BsmtCond',\n       'BsmtExposure', 'BsmtFinType1', 'BsmtFinSF1', 'BsmtFinType2',\n       'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', 'Heating', 'HeatingQC',\n       'CentralAir', 'Electrical', '1stFlrSF', '2ndFlrSF', 'LowQualFinSF',\n       'GrLivArea', 'BsmtFullBath', 'BsmtHalfBath', 'FullBath', 'HalfBath',\n       'BedroomAbvGr', 'KitchenAbvGr', 'KitchenQual', 'TotRmsAbvGrd',\n       'Functional', 'Fireplaces', 'FireplaceQu', 'GarageType', 'GarageYrBlt',\n       'GarageFinish', 'GarageCars', 'GarageArea', 'GarageQual', 'GarageCond',\n       'PavedDrive', 'WoodDeckSF', 'OpenPorchSF', 'EnclosedPorch', '3SsnPorch',\n       'ScreenPorch', 'PoolArea', 'MiscVal', 'MoSold', 'YrSold', 'SaleType',\n       'SaleCondition']","0fe11e7c":"print(len(columns_list))","f9e719fe":"test = test[columns_list]","a94f2fbe":"# columns with null values\nnull_columns = test.columns[test.isnull().any()]","ff3ec63e":"len(null_columns)","f2376388":"test.isnull().sum() \/ test.shape[0] * 100","8e2a6296":"null_p = test.isnull().sum() \/ test.shape[0] * 100","778944f5":"null_p.sort_values(ascending=False)","7c7b3aa1":"test[null_columns].head(10)","49507ea3":"cat_null_columns = test[null_columns].select_dtypes(include='object').columns","b540b7dd":"num_null_columns = test[null_columns].select_dtypes(exclude='object').columns","05d2c047":"print(len(cat_null_columns), len(num_null_columns))","be5761bc":"num_null_columns","62d2b3bf":"for col in num_null_columns:\n    test[col] = test[col].fillna(test[col].mean())","5cd0d82c":"len(test.columns[test.isnull().any()])","8b5e8e4d":"for col in cat_null_columns:\n    test[col] = test[col].fillna(test[col].mode()[0])","5769ec2f":"len(test.columns[test.isnull().any()])","e894ed1f":"test_df = pd.get_dummies(data=test, drop_first=True)","65e9eac9":"test_df.shape","f29c9f27":"test_df.head()","1e4340c3":"# independ variables \/ matrix of features\nx = dataset.drop(columns='SalePrice')","991e3fd9":"# target variable \/ dependent variable\ny = dataset['SalePrice']","0c293980":"final_columns = test_df.columns","ede0311e":"x = x[final_columns]","067ee3ee":"from sklearn.model_selection import train_test_split","f2de9b2d":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=0)","a330ef67":"x_train.shape","f5b63f3b":"y_train.shape","fe6ff20f":"x_test.shape","5984fa73":"y_test.shape","ba614c6f":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nx_train = sc.fit_transform(x_train)\nx_test = sc.transform(x_test)","224fec11":"x_train","c9d42b1a":"x_test","1b784156":"from sklearn.ensemble import RandomForestRegressor\nregressor = RandomForestRegressor(bootstrap=False, ccp_alpha=0.0, criterion='mse',\n                      max_depth=50, max_features='sqrt', max_leaf_nodes=None,\n                      max_samples=None, min_impurity_decrease=0.0,\n                      min_impurity_split=None, min_samples_leaf=1,\n                      min_samples_split=2, min_weight_fraction_leaf=0.0,\n                      n_estimators=1200, n_jobs=None, oob_score=False,\n                      random_state=None, verbose=0, warm_start=False)\nregressor.fit(x_train, y_train)","2b6fe117":"y_pred = regressor.predict(x_test)","7944817c":"from sklearn.metrics import r2_score\nr2_score(y_test, y_pred)","1d45d8cd":"test_df.shape","695ed80c":"test_x = sc.transform(test_df)","35726e11":"# Use the model to make predictions\npredicted_prices = regressor.predict(test_x)\n\n# We will look at the predicted prices to ensure we have something sensible.\nprint(predicted_prices)","1e63f015":"len(predicted_prices)","848abd13":"my_submission = pd.DataFrame({'Id': test_df.Id, 'SalePrice': predicted_prices})\n# you could use any filename. We choose submission here\nmy_submission.to_csv('submission.csv', index=False)","26b36098":"my_submission.shape","96c763cf":"### Mean for numerical columns","77c14d30":"## 3) XGBoost regression","48d325a9":"## Dealing with categorical values","f84fdda4":"## 2) Random forest regression","4e257985":"# Part 4: Final model (Random forest regressor)","9623f66a":"## Data exploration","d334dcb4":"### Scaling","db5c39a4":"### Pred","66f47477":"# Part 3: Hyper parameter tuning","b2b479d3":"## Dealing with the categorical values","c2f49549":"Dataset: https:\/\/www.kaggle.com\/c\/house-prices-advanced-regression-techniques\/data?select=train.csv","fd56bc41":"**Add columns mean to numerical columns**","e08b9028":"**Add columns mode to categorical columns**","77f37a9a":"## Importing the libraries and dataset","19b1d306":"### Split","a9e2a8ae":"### Mode for categorical columns","1c07b4be":"### Scaling","3db59957":"## Feature scaling","a66bfe5a":"## Splitting the dataset","7273dd4c":"## Getting columns list","d3d4e31e":"## Distplot","0b5d5e49":"# Part 1: Data Preprocessing","57e23980":"# Part 5: Prediction on test data","6940548f":"## Dealing with null values","6811f23b":"## 1) Multiple linear regression","85f4e8c9":"### Submission","0ebaa12f":"## Prediction on test data","e567b294":"### Final Model","9c502633":"## Dealing with NULL values","35287351":"# Part 2: Building the model","d2ecee90":"## Correlation matrix"}}