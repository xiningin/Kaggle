{"cell_type":{"ad15797c":"code","7c69cd59":"code","5ea8e553":"code","4ab0359b":"code","4972aacf":"code","9efacd56":"code","553ee9cd":"code","7d442626":"code","a80fc7c2":"code","ecae2c49":"code","6863470b":"code","c7e6cdb9":"code","7d9f0376":"code","1cdaaf1f":"code","2390f10b":"code","f1965761":"code","8aa79acd":"code","bd2ecf3c":"code","38fb287a":"code","3116877b":"code","2719b807":"code","38c28c50":"code","bbec8f52":"code","5bce0fac":"code","c5783224":"code","8e541323":"code","13f11fde":"code","89d9e11b":"code","0e6bfc8e":"code","f14cbc76":"code","c2ea470d":"code","95fa24a2":"code","f3735ea6":"code","a6896577":"code","0b045481":"code","3780be33":"code","a06682d2":"code","58188e09":"code","df452583":"code","ac4c640e":"markdown","8685f947":"markdown","92c7b14f":"markdown","ca3d748d":"markdown","374be89e":"markdown","ca4ce711":"markdown","850ea7ff":"markdown","47771040":"markdown"},"source":{"ad15797c":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","7c69cd59":"train=pd.read_csv('..\/input\/tabular-playground-series-may-2021\/train.csv')\ntest=pd.read_csv('..\/input\/tabular-playground-series-may-2021\/test.csv')\nsubmission=pd.read_csv('..\/input\/tabular-playground-series-may-2021\/sample_submission.csv')","5ea8e553":"train.head()","4ab0359b":"test.head()","4972aacf":"print('Shape of train Data: ',train.shape )\nprint('Shape of test Data: ',test.shape )\nprint('Shape of sample_sub Data: ',submission.shape )","9efacd56":"train.columns","553ee9cd":"test.columns","7d442626":"train.info()","a80fc7c2":"test.info()","ecae2c49":"train.isnull().sum()","6863470b":"# Dropping ID Column\n\ntrain=train.drop(['id'],axis=1)\ntest=test.drop(['id'],axis=1)","c7e6cdb9":"train['target'].value_counts().sort_index(ascending=True)","7d9f0376":"plt.figure(figsize=(10,7))\nsns.countplot(x=train['target'])","1cdaaf1f":"train['Target']=train['target'].map({'Class_1':0,'Class_2':1,'Class_3':2,'Class_4':3})\ntrain['Target'].unique()","2390f10b":"!pip install dataprep","f1965761":"from dataprep.eda import plot, plot_correlation, create_report, plot_missing\nplot(train)","8aa79acd":"# Checking outlier's in Train Data\nplt.figure(figsize=(18,25))\nsns.boxplot(data=train, orient=\"h\");","bd2ecf3c":"# Checking outlier's in Test Data\nplt.figure(figsize=(18,25))\nsns.boxplot(data=test, orient=\"h\");","38fb287a":"# Pearson Correlation\nplt.figure(figsize=(18,10))\nsns.heatmap(train.corr(method='pearson'), cbar=False, annot=True, fmt='.1f', linewidth=0.2, cmap='coolwarm');","3116877b":"# Spearman Correlation\nplt.figure(figsize=(18,12))\nsns.heatmap(train.corr(method='spearman'), cbar=False, annot=True, fmt='.1f', linewidth=0.2, cmap='coolwarm');","2719b807":"fig, ax = plt.subplots(figsize=(18, 12))\ncorr = train.corr()\nmask = np.triu(np.ones_like(corr, dtype=np.bool))\nax.text(-1.1, -0.7, 'Correlation between the Features', fontsize=20, fontweight='bold', fontfamily='serif')\nsns.heatmap(corr, mask=mask, annot=False, fmt='.2f', linewidth=0.2, cbar=True, cmap='coolwarm');","38c28c50":"# kendall\nfig, ax = plt.subplots(1, 3, figsize=(17 , 5))\n\nfeature_lst = ['feature_0', 'feature_1', 'feature_2','feature_3','feature_4', 'feature_5', 'feature_6', 'feature_7', 'feature_8', 'feature_9']\n\ncorr = train[feature_lst].corr()\n\nmask = np.zeros_like(corr, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\n\n\nfor idx, method in enumerate(['pearson', 'kendall', 'spearman']):\n    sns.heatmap(train[feature_lst].corr(method=method), ax=ax[idx],\n            square=True, annot=True, fmt='.1f', center=0, linewidth=2,\n            cbar=False, cmap=sns.diverging_palette(240, 10, as_cmap=True),\n            mask=mask\n           ) \n    ax[idx].set_title(f'{method.capitalize()} Correlation', loc='left', fontweight='bold')     \n\nplt.show()","bbec8f52":"# Correlation between Independent and Dependent Values\ntrain.corr()['Target'].sort_values(ascending=False)","5bce0fac":"a = train.drop(['target','Target'], axis=1)\na.corrwith(train['Target']).plot(kind='bar', figsize=(18,11), color=['salmon'])\nplt.title('Correlation Between target and Independant features')\nplt.xticks(size=15)\nplt.yticks(size=15)\nplt.show()","c5783224":"X = train.iloc[:,:-2]\nX.head()","8e541323":"y = train['target']\ny.head()","13f11fde":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=42)","89d9e11b":"from xgboost import XGBClassifier, plot_importance","0e6bfc8e":"model = XGBClassifier(random_state=42, use_label_encoder=True)\nmodel.fit(X, y)","f14cbc76":"y_pred_xgb = model.predict_proba(test)","c2ea470d":"submission_xgb = pd.DataFrame(y_pred_xgb, columns=['Class_1','Class_2','Class_3','Class_4'])\nsubmission_xgb['id'] = submission['id']\nsubmission_xgb\n","95fa24a2":"pip install -U lightautoml","f3735ea6":"from lightautoml.automl.presets.tabular_presets import TabularAutoML, TabularUtilizedAutoML\nfrom lightautoml.tasks import Task\nfrom sklearn.metrics import log_loss","a6896577":"N_THREADS = 4 \nN_FOLDS = 5 \nRANDOM_STATE = 2021 \nTEST_SIZE = 0.2 \nTIMEOUT = 60 * 60 ","0b045481":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ntrain['target'] = le.fit_transform(train['target'])","3780be33":"%%time\n\nautoml = TabularUtilizedAutoML(task = Task('multiclass',), \n                               timeout = TIMEOUT,\n                               cpu_limit = N_THREADS,\n                               verbose=0,\n                               reader_params = {'n_jobs': N_THREADS},\n)\n","a06682d2":"\"\"\"target_column = 'target'\n\nroles = {\n    'target': target_column,\n    'drop': ['id'],\n}\n\nlightml_pred = automl.fit_predict(train.iloc[:,:-1], roles = roles)\nprint('lightml_pred:\\n{}\\nShape = {}'.format(lightml_pred[:10], lightml_pred.shape))\"\"\"","58188e09":"\"\"\"%%time\n\ntest_pred = automl.predict(test)\nprint('Prediction for test set:\\n{}\\nShape = {}'.format(test_pred[:5], test_pred.shape))\"\"\"","df452583":"\"\"\"submision.iloc[:, 1:] = test_pred.data\nsubission.to_csv('output.csv', index = False)\"\"\"","ac4c640e":"<h2 style=\"color:blue;\"> Importing  Required Libraries<\/h2>\n","8685f947":"### **Some of the features have negative values**","92c7b14f":"<h1 style=\"color:red;\"><center>TPS_May21 XGBOOST+LightAutoML<\/center><\/h1>\n","ca3d748d":"### Lets check for Outlier's","374be89e":"### Lets Check Correlations between features","ca4ce711":"<h2 style=\"color:blue;\"> XGBOOST<\/h2>\n","850ea7ff":"<h1 style=\"color:blue;\"> <center> Model Building <\/center><\/h1>\n","47771040":" \n<h2 style=\"color:blue;\"> LightAutoML<\/h2>\n"}}