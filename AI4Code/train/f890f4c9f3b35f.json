{"cell_type":{"478fbc55":"code","8bd4465d":"code","a478bbbe":"code","2244fd53":"code","337f0f89":"code","8b997e59":"code","74345473":"code","be26f3a9":"code","99cf73b9":"code","d2ab1ef2":"code","c4649fff":"code","75b37223":"code","70351375":"code","165e6dfd":"code","5baecbb2":"code","425a575b":"code","ea0a8f4b":"code","af31ae1d":"code","2288e2e1":"code","32832d4e":"code","1ebed451":"code","3fbe1ebe":"code","767f6dc4":"code","6c4ffee1":"code","e6ca638d":"code","6d5a94f8":"code","d67bd171":"code","1bdabd62":"code","d25374dd":"code","0130dacf":"code","a5eba114":"code","aae9ebbc":"code","5c12b902":"code","c8e1289e":"markdown","f8a6ad7d":"markdown","249744a1":"markdown","0beba6e8":"markdown","e0b070d8":"markdown","b83bdedf":"markdown","d03c5341":"markdown"},"source":{"478fbc55":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","8bd4465d":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport time\nimport datetime as dt\nimport seaborn as sns","a478bbbe":"sample_submission = pd.read_csv(\"..\/input\/liverpool-ion-switching\/sample_submission.csv\")\ntest_df = pd.read_csv(\"..\/input\/liverpool-ion-switching\/test.csv\")\ntrain_df = pd.read_csv(\"..\/input\/liverpool-ion-switching\/train.csv\")","2244fd53":"train_df.head()","337f0f89":"test_df.head()","8b997e59":"train_df.describe()","74345473":"train_df[\"open_channels\"].nunique()","be26f3a9":"test_df.describe()","99cf73b9":"train_nan = train_df.replace('?', np.nan)\ntest_nan = test_df.replace('?', np.nan)","d2ab1ef2":"train_nan.isnull().sum()","c4649fff":"test_nan.isnull().sum()","75b37223":"train_df = train_nan\ntest_df = test_nan","70351375":"def plot_fig(data, title=\"Time Series Plot\", color = 'b'):\n    plt.figure(figsize=(14,7))\n    plt.plot(data[\"time\"], data[\"signal\"], color=color)\n    plt.title(title, fontsize=28)\n    plt.xlabel(\"Time (s)\", fontsize=20)\n    plt.ylabel(\"Signal\", fontsize=20)\n    plt.show()","165e6dfd":"plot_fig(data=train_df, title=\"Train Data\", color='b')","5baecbb2":"plot_fig(data=train_df[0:1000], title=\"Train Data\", color='r')","425a575b":"plot_fig(test_df, \"Test Data\", 'g')","ea0a8f4b":"def plot_fig_combined(data, title=\"Time Series Plot\"):\n    plt.figure(figsize=(14,7))\n    plt.plot(data[\"time\"], data[\"signal\"], color='r', label='Signal')\n    plt.plot(data[\"time\"], data[\"open_channels\"], color='b', label='Open Channels')\n    plt.title(title, fontsize=28)\n    plt.legend(loc='upper right')\n    plt.xlabel(\"Time (s)\", fontsize=20)\n    plt.ylabel(\"Signal & Open Channel\", fontsize=20)\n    plt.show()","af31ae1d":"plot_fig_combined(train_df[0:500], \"Signal and Open Channel Variation\")","2288e2e1":"plot_fig_combined(train_df[15000:15500], \"Signal & Open Channel Variation (1.5s - 1.55s)\")","32832d4e":"plot_fig_combined(train_df[1500000:1500500], \"Signal & Open Channel Variation (150s - 150.05s)\")","1ebed451":"plot_fig_combined(train_df[2500000:2500500], \"Signal & Open Channel Variation (250s - 250.05s)\")","3fbe1ebe":"plot_fig_combined(train_df[3500000:3500500], \"Signal & Open Channel Variation (350s - 350.05s)\")","767f6dc4":"plot_fig_combined(train_df[4500000:4500500], \"Signal & Open Channel Variation (450s - 450.05s)\")","6c4ffee1":"def plot_open_channel(data, title):\n    plt.figure(figsize=(8,6))\n    sns.countplot(data[\"open_channels\"])\n    plt.title(title)\n    plt.show()","e6ca638d":"plot_open_channel(train_df[:1000000], \"Open Channels Variation (0-100s)\")","6d5a94f8":"plot_open_channel(train_df[1000000:2000000], \"Open Channels Variation (100-200s)\")","d67bd171":"plot_open_channel(train_df[2000000:3000000], \"Open Channels Variation (200-300s)\")","1bdabd62":"plot_open_channel(train_df[3000000:4000000], \"Open Channels Variation (300-400s)\")","d25374dd":"plot_open_channel(train_df[4000000:5000000], \"Open Channels Variation (400-500s)\")","0130dacf":"window_size = [10, 50, 100, 1000]\n\ndef comp_plot_signal(data, title):\n    for window in window_size:\n        smooth_df_mean = train_df.rolling(window).mean()\n        smooth_df_sd = train_df.rolling(window).std()\n        plt.figure(figsize=(14,7))\n        plt.plot(data[\"time\"], data[\"signal\"], color='b', label='Signal')\n        plt.plot(data[\"time\"], smooth_df_mean[\"signal\"], color='r', label='Mean of Smoothed Signal with ' + str(window) + ' window size.')\n        plt.plot(data[\"time\"], smooth_df_sd[\"signal\"], color='g', label='SD of Smoothed Signal with ' + str(window) + ' window size.')\n        plt.title(title)\n        plt.xlabel(\"Time (s)\", fontsize=20)\n        plt.ylabel(\"Signal\", fontsize=20)\n        plt.legend(loc='upper right')\n        plt.show()   ","a5eba114":"comp_plot_signal(train_df, \"Default Signal vs. Smoothed Signal\")","aae9ebbc":"window_size = [10, 50, 100, 1000]\n\ndef comp_plot_open_channel(data, title):\n    for window in window_size:\n        smooth_df_mean = train_df.rolling(window).mean()\n        smooth_df_sd = train_df.rolling(window).std()\n        plt.figure(figsize=(14,7))\n        plt.plot(data[\"time\"], data[\"open_channels\"], color='b', label='Open Channel')\n        plt.plot(data[\"time\"], smooth_df_mean[\"open_channels\"], color='r', label='Mean of Smoothed Open Channel with ' + str(window) + ' window size.')\n        plt.plot(data[\"time\"], smooth_df_sd[\"open_channels\"], color='g', label='SD of Smoothed Open Channel with ' + str(window) + ' window size.')\n        plt.title(title)\n        plt.xlabel(\"Time (s)\", fontsize=20)\n        plt.ylabel(\"Open Channels\", fontsize=20)\n        plt.legend(loc='upper right')\n        plt.show()","5c12b902":"comp_plot_open_channel(train_df, \"Default Open Channel vs. Smoothed Open Channel\")","c8e1289e":"## Time vs. Signal Plot","f8a6ad7d":"## Smoothing of the Open Channels using different window sizes.","249744a1":"Number of unique values in the column \"open_channels\"","0beba6e8":"## Plotting Time vs. Signal and Time vs. Open Channels on a single graph.","e0b070d8":"Treating unknown values by replacing them with NaN.","b83bdedf":"## Smoothing of the signal using different window sizes.","d03c5341":"## Plotting the Open Channels."}}