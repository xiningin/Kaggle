{"cell_type":{"e99fd347":"code","3fa62da7":"code","2e17f67f":"code","3f06fc63":"code","03634826":"code","7cc4e1ff":"code","60f86d48":"code","7fcbf403":"code","87bfb8fe":"code","e19feecc":"code","b502df67":"code","277ab296":"code","240b8c04":"code","555546f5":"code","879b34d9":"markdown","3ffccf95":"markdown","7edf0662":"markdown","5e8d05fc":"markdown","d9d65bba":"markdown"},"source":{"e99fd347":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3fa62da7":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom keras.utils import to_categorical\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Conv2D, MaxPool2D, Flatten, BatchNormalization, Dropout\nfrom keras.callbacks import EarlyStopping, ReduceLROnPlateau\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nimport itertools","2e17f67f":"train = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')","3f06fc63":"X_train = train.iloc[:,1:]\ny_train = train.iloc[:,0]","03634826":"# Normalize and reshape image\nX_train = X_train.values.reshape(-1, 28, 28, 1)\/255.\ntest = test.values.reshape(-1, 28, 28, 1)\/255.\n# One Hot encoding the label\ny_train = to_categorical(y_train, 10)","7cc4e1ff":"random_seed = 0\nX_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.1, random_state=random_seed)","60f86d48":"datagen = ImageDataGenerator(\n            rotation_range=10,\n            width_shift_range=0.1,\n            height_shift_range=0.1,\n            zoom_range=0.1\n            )","7fcbf403":"model = Sequential()\n\nmodel.add(Conv2D(32, (5,5), padding='same', input_shape=X_train.shape[1:], activation='relu'))\nmodel.add(Conv2D(32, (5,5), padding='same', activation='relu'))\nmodel.add(MaxPool2D(2,2))\n\nmodel.add(Conv2D(64, (3,3), padding='same', activation='relu'))\nmodel.add(Conv2D(64, (3,3), padding='same', activation='relu'))\nmodel.add(MaxPool2D(2,2))\n\nmodel.add(Conv2D(64, (3,3), padding='same', activation='relu'))\nmodel.add(Conv2D(64, (3,3), padding='same', activation='relu'))\nmodel.add(MaxPool2D(2,2))\n\nmodel.add(Flatten())\nmodel.add(Dense(256, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation='softmax'))\n\nmodel.summary()","87bfb8fe":"model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])","e19feecc":"EPOCHS = 20\nBATCH_SIZE = 20\ncallback_list = [\n    ReduceLROnPlateau(monitor='val_loss', factor=0.25, patience=1, verbose=1, mode='auto',\n    min_delta=0.0001)\n]\n\nhistory = model.fit(datagen.flow(X_train, y_train, batch_size=BATCH_SIZE),\n                   epochs=EPOCHS,\n                   callbacks=callback_list,\n                   validation_data=(X_val, y_val),\n                   steps_per_epoch=X_train.shape[0] \/\/ BATCH_SIZE)","b502df67":"loss = history.history['loss']\nval_loss = history.history['val_loss']\n\nfig, ax = plt.subplots(figsize=(12,4))\nax.plot(loss, 'b', label='Training loss')\nax.plot(val_loss, 'r', label='Validation loss')\nax.legend()","277ab296":"def plot_confustion_matrix(cm, classes, normalize=False, title='Confusion matrix', cmap=plt.cm.Oranges):\n    plt.figure(figsize=(10,7))\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45)\n    plt.yticks(tick_marks, classes)\n    \n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n        \n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i , cm[i,j],\n                horizontalalignment='center',\n                color='white' if cm[i, j] > thresh else 'black')\n    plt.tight_layout()\n    plt.xlabel('True label')\n    plt.ylabel('Predicted label')","240b8c04":"y_pred = model.predict(X_val)\ny_pred_classes = np.argmax(y_pred, axis=1)\ny_real_classes = np.argmax(y_val, axis=1)\ncm = confusion_matrix(y_pred_classes, y_real_classes)\nplot_confustion_matrix(cm, classes=range(10))","555546f5":"results = model.predict(test)\nresults = np.argmax(results, axis=1)\nresults = pd.Series(results, name='Label')\nsubmission = pd.concat([pd.Series(range(1,28001), name='ImageID'), results], axis=1)\nsubmission.to_csv('submission.csv', index=False)","879b34d9":"model ","3ffccf95":"****Data Loading****","7edf0662":"****Confusion Matrix****\n","5e8d05fc":"create imagedata generator\n","d9d65bba":"****Submission Creation****\n"}}