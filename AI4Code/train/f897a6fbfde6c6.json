{"cell_type":{"7d96eb6c":"code","fce925ac":"code","c0e77464":"code","21851fd9":"code","21451f4c":"code","777c2a18":"code","d517ea97":"code","6662a3fd":"code","efa3b5a4":"code","92389ccf":"code","41681a15":"code","9068ba83":"code","29e08cff":"code","6b7d08e9":"code","eaad7365":"code","769ccd3a":"code","3f94ac4f":"code","d9d2c120":"code","c08c6982":"code","bd7b0400":"code","802c36c8":"code","26701718":"code","72d60b0b":"markdown","c6fc1a3b":"markdown","641e0b6b":"markdown","2694d6e1":"markdown","67385fce":"markdown","36aa25be":"markdown","dab0adb7":"markdown","faabba16":"markdown","403d43cc":"markdown"},"source":{"7d96eb6c":"import matplotlib.pyplot as plt\nimport cv2\nimport os\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport tensorflow as tf","fce925ac":"# Main Directory\nmain_dir = \"..\/input\/bangla-sign-language-with-translated-labels\/Bangla Sign Language\/\"\nnum_classes = 46\n","c0e77464":"def get_image(path):\n    img = cv2.imread(path)\n    plt.imshow(img)","21851fd9":"get_image(\"..\/input\/bangla-sign-language-with-translated-labels\/Bangla Sign Language\/0\/1.JPG\")","21451f4c":"def datapreprocessing(main_dir,bsize):\n    from tensorflow.keras.preprocessing.image import ImageDataGenerator\n    \n    train_gen = ImageDataGenerator(rescale=1.0\/255,\n                                  validation_split=0.30,\n                                  #rotation_range=40,\n                                  #horizontal_flip=True,\n                                  #fill_mode='nearest'\n                                  )\n\n    train_generator = train_gen.flow_from_directory(\n        directory=main_dir,\n        target_size=(125,125),\n        batch_size=bsize,\n        color_mode=\"rgb\",\n        shuffle=True,\n        subset=\"training\",\n        class_mode='categorical')\n    \n    valid_generator = train_gen.flow_from_directory(\n        directory=main_dir,\n        target_size=(125,125),\n        batch_size=bsize,\n        color_mode=\"rgb\",\n        shuffle=True,\n        subset=\"validation\",\n        class_mode='categorical')\n    \n    return train_generator, valid_generator","777c2a18":"#Fit Generator\ntraingen, validgen = datapreprocessing(main_dir,bsize=30)","d517ea97":"def imageclf2(input_shape):\n    from tensorflow import keras as ks\n    #from tensorflow.keras import regularizers\n    model = ks.models.Sequential()\n    #building architecture\n    #Adding layers\n    model.add(ks.layers.Conv2D(16,(6,6),\n                               strides=2,\n                               activation=\"relu\",\n                               padding='same',\n                               name=\"layer1\",\n                               input_shape=input_shape))\n    model.add(ks.layers.MaxPooling2D(pool_size=2))\n    model.add(ks.layers.Dropout(0.5))\n    model.add(ks.layers.Conv2D(32,(3,3),strides=1,padding=\"same\",activation=\"relu\",name=\"layer2\"))\n    model.add(ks.layers.MaxPooling2D(pool_size=2,strides=2))\n    model.add(ks.layers.Dropout(0.5))\n    model.add(ks.layers.Conv2D(64,(3,3),strides=1,padding=\"same\",activation=\"relu\",name=\"layer3\"))\n    model.add(ks.layers.MaxPooling2D(pool_size=2,strides=2))\n    model.add(ks.layers.Dropout(0.5))\n    model.add(ks.layers.Conv2D(64,(3,3),strides=1,padding=\"same\",activation=\"relu\",name=\"layer4\"))\n    model.add(ks.layers.MaxPooling2D(pool_size=2,strides=2))\n    model.add(ks.layers.Dropout(0.5))\n    \n    \n    model.add(ks.layers.Flatten())\n    model.add(ks.layers.Dense(128,activation=\"relu\",\n                              name=\"layer5\"))\n    model.add(ks.layers.Dropout(0.5))\n    \n    model.add(ks.layers.Dense(46,activation=\"softmax\",\n                              name=\"output\"))#46 classes \n    model.summary()\n    \n    return model","6662a3fd":"input_shape = traingen.image_shape\ninput_shape","efa3b5a4":"def compiler2(model,train_generator,valid_generator,epchs,bsize,lr=0.0001):\n\n    from tensorflow import keras as ks\n    callbck = ks.callbacks.EarlyStopping(monitor='val_loss',patience=10,\n                                         verbose=2,\n                                         restore_best_weights=True,) \n    \n    opt = ks.optimizers.Adam(learning_rate=lr)\n    \n    model.compile(loss=\"categorical_crossentropy\",\n                      optimizer=opt,\n                      metrics=[\"accuracy\"])\n    history = model.fit(train_generator,\n                        epochs=epchs,\n                        callbacks=[callbck],\n                        validation_data=valid_generator,\n                        verbose = 1,\n                        steps_per_epoch = train_generator.n \/\/ bsize)\n    #Visualise curves\n    plt.plot(history.history['accuracy'], label='train_acc')\n    plt.plot(history.history['val_accuracy'], label='valid_acc')\n\n    plt.title('lrate='+str(lr), pad=-50)\n    plt.legend()\n    plt.grid(True)\n    return model,history","92389ccf":"model01 = imageclf2(input_shape)","41681a15":"model_com01 = compiler2(model01,traingen,validgen,500,32,0.001)","9068ba83":"#Visualise loss curves\nhistory = model_com01[1]\nplt.plot(history.history['loss'], label='loss')\nplt.plot(history.history['val_loss'], label='val_loss')\nplt.legend()\nplt.grid()\nplt.show()","29e08cff":"def get_predictions(n):\n    import keras as ks\n    image1= validgen[0][0][n]\n    #print(image1.shape)\n    plt.imshow(image1)\n    input_arr = ks.preprocessing.image.img_to_array(validgen[0][0][n])\n    input_arr = np.array([input_arr])  # Convert single image to a batch.\n    predictions = model_com01[0].predict_classes(input_arr)\n    #our dictionary starts from 1 whereas model has classes from 0.\n    return predictions\n","6b7d08e9":"get_predictions(10)","eaad7365":"# Hand Sign Dictionary\nsigns = validgen.class_indices","769ccd3a":"signs","3f94ac4f":"#Function that can build a dataframe on passing folderpath.\ndef getdata(folder_path):\n    sig = pd.DataFrame(columns=['image_abs_path','image_labels'])\n    for key,value in signs.items():\n        #print(\"processing for label: {}\".format(label))\n        label_i = folder_path+\"\/\"+str(key)\n        #read directory\n        dirs_label_i =  os.listdir(label_i)\n        idx = 0\n        for image in dirs_label_i:\n            #create a absolute image path\n            sig_i = os.path.join(label_i,image)\n            #print('Absolute path for image no. {} and label {}: {}'\\\n                  #.format(idx,label,flower_i))\n\n            #fill the dataframe with path and label\n            sig = sig.append({'image_abs_path':sig_i,\n                            'image_labels':key},\n                           ignore_index=True)\n            idx += 1\n    return sig","d9d2c120":"#Create Train Dataframe as repository of paths and labels.\ntrain = getdata(main_dir)","c08c6982":"train","bd7b0400":"# Fetch n number of images from train data frame\ndef get_n_images(n,df,label):\n    import warnings\n    warnings.filterwarnings('ignore')\n    train = df[df[\"image_labels\"]==label]\n    print(len(train))\n    i = 0\n    m = n\/2\n    plt.figure(figsize=(12, 6))\n    for path in train['image_abs_path'][0:n]:\n        plt.subplot(2,m,i+1)\n        get_image(path)\n        #plt.title(train['image_labels'][i])\n        i += 1\n    plt.tight_layout()\n    plt.show()","802c36c8":"#Visualise Predictions\nget_n_images(10,train,\"CA\")","26701718":"# save the model to disk\nmodel = model_com01[0]\nmodel.save('saved_models\/BSLmodel.tf')","72d60b0b":"## Create Image Data Generator","c6fc1a3b":"## Fetch image from main directory and Visualsie","641e0b6b":"## Get Prediction and visualise the output.","2694d6e1":"    Model predicted 13th hand sign as 'CA' in \"'CA'IO\". Let's confirm by visualising few more images of same class. ","67385fce":"### Save the model!","36aa25be":"## Build the Architecture","dab0adb7":"### Model predicted hand sign correctly!","faabba16":"### Fit Model and Evaluate","403d43cc":"## Build the Compiler"}}