{"cell_type":{"27250612":"code","cb84b6a0":"code","8caae0e5":"code","3a7ea262":"code","f79aaf59":"code","35f9e9ca":"code","67685784":"code","4c7c1662":"code","26d6d674":"code","5a22d513":"code","93514d79":"code","a3d7ec73":"code","10f04118":"code","0a47591c":"code","b0d24e0f":"code","92f43b39":"code","ca7ea83e":"code","08cf7c5e":"code","15874aeb":"code","08878457":"code","178c222d":"code","4921011d":"code","3c1c6e02":"code","efd7cc74":"code","4cfbe31f":"code","5464b27f":"code","71cade5d":"code","175d75d7":"code","e6b781b4":"code","7366529d":"code","d7dd996c":"code","c229a6d4":"code","4c07a056":"code","31af9ba5":"code","1b112583":"code","4ddade1e":"code","27804990":"code","eda97427":"code","8894b9f5":"code","cd1fd447":"code","4bd9437a":"code","969aa900":"code","f5de4c22":"code","9608646e":"code","0ee81916":"code","1d9ad5cc":"code","2709ff10":"code","17138633":"code","03d5a542":"code","eb0b20ae":"code","ff6c167f":"code","c9d97e3a":"code","b5b7e768":"code","00dd51d6":"code","fc92813f":"code","bb8d1846":"code","e4702c59":"code","8c6ad982":"code","1db34c0b":"code","40499e63":"code","95f8966e":"code","8af95a41":"code","6f34295a":"code","25ed7e15":"code","96471d76":"code","8a750882":"code","e55caf5f":"code","a489b391":"code","04969dd2":"code","d5f12359":"code","02a121a3":"code","1dc1cd7f":"code","a5a74271":"code","691ccab7":"code","5c9c6126":"code","b5b7389f":"code","1c7aa050":"code","483d849b":"code","f4f54696":"code","5a8904c1":"code","0512eb92":"code","60c3877b":"code","3e284216":"code","05d54f04":"code","b87d1f69":"code","2936abd1":"code","071ad2c3":"code","48dbfe8f":"code","1541d007":"code","67e59bcd":"code","01d1edfe":"code","674a9e04":"code","4ad89ab4":"code","cc7e25f7":"code","086fbe3a":"code","e316dd41":"code","f9b6ee5b":"code","363f1559":"code","fd573da6":"code","9ae289b3":"code","b50eb606":"code","67e90c7b":"code","155ce800":"code","a28ae4cd":"code","0cafc7cb":"code","750350ef":"code","29763c0d":"code","0284b17f":"code","d715b34d":"code","a793d52c":"code","243989dd":"code","74504a86":"code","d0637ce3":"code","9302779a":"code","f09ebf52":"code","e74433e1":"code","b737e728":"code","a320a3a5":"code","20e84b93":"code","c9430f96":"code","f2c5c505":"code","1aec087b":"code","95f9c653":"code","2db1858c":"code","7aa20e76":"code","56eb5389":"markdown","099364a5":"markdown","6c6590f2":"markdown","fde0a486":"markdown","f95625b1":"markdown","22d9e0bb":"markdown","5163965e":"markdown","7a2a7362":"markdown","7ebcf8af":"markdown","593ec22b":"markdown","9b9d4946":"markdown","b7342302":"markdown","5bf99ac6":"markdown","9b21af59":"markdown","12d28a0f":"markdown","f04edfe1":"markdown","ca8e4c34":"markdown","ff5c5cb0":"markdown","82edb61c":"markdown","ccaed2cf":"markdown","d0e26c5e":"markdown","4d2028b7":"markdown","957e97e2":"markdown","fc58fd81":"markdown","539d441f":"markdown","d76b9cdc":"markdown"},"source":{"27250612":"#Replacing flags\ndef Y_or_N(x):\n  return [1,0][x.upper() == 'Y']","cb84b6a0":"#Converting days to years\ndef my_years_my_wealth(days):\n  cur_date = datetime.datetime.now()\n  #print(pd.to_datetime(days, origin=cur_date, unit='D').year)\n  if days > -365:\n    return 0\n  return cur_date.year - pd.to_datetime(days, origin=cur_date, unit='D').year\n","8caae0e5":"# Chart drawing function\ndef graffs(arr):\n  fig, ax =plt.subplots(1,len(arr), figsize=(18,6))\n  fig.autofmt_xdate()\n  for index, category in enumerate(arr):\n    \n    #plt.subplot(1, index+1)   \n    sns.countplot(data = df, x =category, hue='status',ax=ax[index])\n    ax[index].set_title(category)\n    bars = ax[index].patches\n    half = int(len(bars)\/2)\n    left_bars = bars[:half]\n    right_bars = bars[half:]\n\n    for left, right in zip(left_bars, right_bars):\n        height_l = 0 if np.isnan(right.get_height()) else left.get_height() #\u0412\u044b\u0441\u043e\u0442\u0430 \u043b\u0435\u0432\u043e\u0433\u043e \u0431\u0430\u0440\u0430\n        height_r = 0 if np.isnan(right.get_height()) else right.get_height() #\u0412\u044b\u0441\u043e\u0442\u0430 \u043f\u0440\u0430\u0432\u043e\u0433\u043e \u0431\u0430\u0440\u0430\n        total = height_l + height_r #\u043e\u0431\u0449\u0430\u044f \u0441\u0443\u043c\u043c\u0430 \u0441\u0442\u0440\u043e\u043a\n        if total > 0:\n          \n          #sign left \n          ax[index].text(left.get_x() + left.get_width()\/2., height_l + 50, '{0:.0%}'.format(height_l\/total), ha=\"center\")\n          #ax[index].text(left.get_x() + left.get_width()\/2., height_l + 350, str(height_l), ha=\"center\")\n          \n          #sign right\n          #ax[index].text(right.get_x() + right.get_width()\/2., height_r + 350, str(height_r), ha=\"center\")\n          ax[index].text(right.get_x() + right.get_width()\/2., height_r + 50, '{0:.0%}'.format(height_r\/total), ha=\"center\")\n  plt.tight_layout()        \n  plt.show()","3a7ea262":"import pandas as pd\n!pip install catboost\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_curve\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import  GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nimport numpy as np\nimport datetime\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nplt.rcParams[\"figure.figsize\"] = (7,5)\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.utils import shuffle\nsns.set_theme()\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import precision_score, recall_score\nfrom sklearn.metrics import precision_recall_curve, roc_auc_score\nfrom catboost import  CatBoostClassifier\nfrom sklearn.metrics import fbeta_score\nfrom sklearn.metrics import make_scorer\nfrom sklearn.metrics import f1_score","f79aaf59":"appl = pd.read_csv(\"..\/input\/credit-card-approval-prediction\/application_record.csv\")","35f9e9ca":"balance = pd.read_csv(\"..\/input\/credit-card-approval-prediction\/credit_record.csv\")","67685784":"appl.columns  = [i.lower() for i in appl.columns]","4c7c1662":"balance.columns = [i.lower() for i in balance.columns]","26d6d674":"appl.info()","5a22d513":"balance.info()","93514d79":"appl.head(5)","a3d7ec73":"appl.describe()","10f04118":"# Let's immediately remove the mobile sign, everyone has a mobile.\nappl.drop('flag_mobil',axis=1,inplace=True)","0a47591c":"balance","b0d24e0f":"balance.describe()","92f43b39":"#Let's take the data of active clients who have a history from the current date (from the zero month) - an open loan\nbalance = balance[balance.id.isin(balance[balance.months_balance==0]['id'])]","ca7ea83e":"balance.groupby('status')['id'].count()","08cf7c5e":"# determination of the month of opening a loan (the expected date of issuing a loan) and the current month\ncredits_history = balance.groupby(['id']).agg(\n   start_month=  ('months_balance', min), end_month=('months_balance', max), \n   current_status =('status', 'first'),\n   last_status = ('status', 'last')\n    ).reset_index()","15874aeb":"# the length of the credit history, we will calculate with rounding\ncredits_history['duration'] = round(abs(credits_history.start_month) \/ 12)","08878457":"# Clients who have a loan that has been issued closed no more than 6 months ago\n#credits_history = credits_history[credits_history.start_month < -]","178c222d":"# connect with statuses\ncredits_history = pd.merge(credits_history, balance, how='left', on='id')","4921011d":"#credits_history.start_month = abs(credits_history.start_month) + credits_history.months_balance","3c1c6e02":"#Let's filter out closed loans. Status X - no credit for the current month\ncredits_history = credits_history[~credits_history.current_status.isin([\"X\"])]","efd7cc74":"credits_history","4cfbe31f":"balance[balance.id==5001711]","5464b27f":"# grouping and counting statuses by month\nbad_month = credits_history.groupby(['months_balance', 'status']).size().reset_index(name='counts')","71cade5d":"bad_month","175d75d7":"# remove lines with good indicators\nbad_month.drop(bad_month[bad_month.status.isin([\"X\",\"C\"])].index,inplace=True)","e6b781b4":"bad_month['months_balance'] =  abs(bad_month['months_balance'])","7366529d":"bad_month","d7dd996c":"# General status chart\n\nsns.lineplot(data=bad_month, x='months_balance', y='counts', hue='status')","c229a6d4":"# status chart without 0\nsns.lineplot(data=bad_month[bad_month.status != '0'], x='months_balance', y='counts', hue='status')","4c07a056":"bad = [\"1\", \"2\", \"3\", \"4\", \"5\"]","31af9ba5":"#The function of determining the debt at the client within 18 months\ndef chek(arr):\n  s = 1\n  for i,j in enumerate(arr):\n    if i <= 17 and j in bad:\n      s = 0\n      break   \n  return s  ","1b112583":"target = credits_history.groupby('id')['status'].apply(chek).reset_index()","4ddade1e":"target[target.status == 1]","27804990":"# Share of good clients\ntarget['status'].mean()","eda97427":"#Now let's connect to the target attribute with general data from the appl dataset and the received credit history\ndf = appl.merge(target, on='id', how='inner')","8894b9f5":"df = df.merge(credits_history.groupby('id')[['duration','start_month']].first(), on='id', how='left')","cd1fd447":"df.name_income_type.unique()","4bd9437a":"# delete lines without a target attribute\ndf = df.drop(df[df.status.isna()].index)","969aa900":"df.info()","f5de4c22":"df.groupby(['name_income_type','occupation_type']).count().sort_values('id').groupby(level=0).tail(1)['id']","9608646e":"df.loc[df['name_income_type'] == 'Working','occupation_type']","0ee81916":"df.loc[df['name_income_type'] == 'Working','occupation_type'] = \\\ndf.loc[df['name_income_type'] == 'Working','occupation_type'].fillna(value='Laborers')","1d9ad5cc":"df.loc[df['name_income_type'] == 'Commercial associate','occupation_type'] = \\\ndf.loc[df['name_income_type'] == 'Commercial associate','occupation_type'].fillna(value='Laborers')","2709ff10":"df.loc[df['name_income_type'] == 'State servant','occupation_type'] = \\\ndf.loc[df['name_income_type'] == 'State servant','occupation_type'].fillna(value='Core staff')","17138633":"df.loc[df['name_income_type'] == 'Student','occupation_type'] = \\\ndf.loc[df['name_income_type'] == 'Student','occupation_type'].fillna(value='Laborers')","03d5a542":"df.loc[df['name_income_type'] == 'Pensioner','occupation_type'] = \\\ndf.loc[df['name_income_type'] == 'Pensioner','occupation_type'].fillna(value='Core staff')","eb0b20ae":"#df['occupation_type'] = df['occupation_type'].fillna(value='uncnown')","ff6c167f":"df.info()","c9d97e3a":"len(df[df.status == 1])","b5b7e768":"len(df[df.status == 0])","00dd51d6":"\ndf[df.drop(['id'],axis=1).duplicated(keep=False)==True].groupby('status')['id'].count()","fc92813f":"df.drop(df[df.drop(['id'],axis=1).duplicated()==True].index, inplace=True)","bb8d1846":"\ndf[df.drop(['id','code_gender'],axis=1).duplicated(keep=False)==True].sort_values(by='days_birth')","e4702c59":"df.drop(df[df.drop(['id','code_gender'],axis=1).duplicated(keep=False)==True].index,inplace=True)","8c6ad982":"df['credit_counts'] = 1","1db34c0b":"columns = df.drop(['id','credit_counts','status','duration','start_month'],axis=1).columns.tolist()","40499e63":"df['credit_counts'] = df.groupby(columns)['credit_counts'].apply(np.cumsum)","95f8966e":"df.credit_counts.describe()","8af95a41":"df.credit_counts.hist()","6f34295a":"#df.drop(df[df.credit_counts > 5].index,inplace=True)","25ed7e15":"df.groupby('status')['status'].count()\n","96471d76":"#\u0414\u043b\u044f \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430 \u043f\u0435\u0440\u0435\u0432\u0434\u0435\u043c \u0433\u043e\u0434\u043e\u0432\u043e\u0439 \u0434\u043e\u0445\u043e\u0434 \u0432 \u043c\u0435\u0441\u044f\u0447\u043d\u044b\u0439\n#df.amt_income_total = df.amt_income_total\/12","8a750882":"\ndf['income_category'] = pd.qcut(df.amt_income_total,5,labels=[1, 2, 3, 4, 5])","e55caf5f":"\ndf['income_per_person'] = df.amt_income_total \/ df.cnt_fam_members","a489b391":" \ndf['days_employed'] = df.days_employed.apply(my_years_my_wealth)","04969dd2":"\ndf['days_birth'] = df.days_birth.apply(my_years_my_wealth)","d5f12359":"\ndf['age_when_start'] = df.days_birth - df.duration\ndf['emploed_when_start'] = df.days_employed - df.duration","02a121a3":"df.drop(columns=['days_birth','days_employed'], inplace=True)","1dc1cd7f":"df","a5a74271":"fig, ax =plt.subplots(1,3, figsize=(19,5))\nsns.boxenplot(data=df, x='amt_income_total', hue='status',ax=ax[0])\nsns.boxenplot(data=df, x='cnt_children', hue='status',ax=ax[1])\nsns.boxenplot(data=df, x='cnt_fam_members', hue='status',ax=ax[2])\nplt.tight_layout()  \nplt.show()","691ccab7":"\n#df.drop(df[df.amt_income_total < 50000].index, inplace=True)\n#df.drop(df[df.amt_income_total > 500000].index, inplace=True)\ndf.drop(df[df.cnt_children > 3].index, inplace=True)\ndf.drop(df[df.cnt_fam_members > 5].index, inplace=True)","5c9c6126":"df.groupby('status')['status'].count()","b5b7389f":"\ngraffs(['code_gender','flag_own_realty','flag_own_car'])","1c7aa050":"\ngraffs(['name_family_status','name_income_type','name_education_type'])","483d849b":"\ngraffs(['name_housing_type','occupation_type'])","f4f54696":"\nfig, ax =plt.subplots(1,2, figsize=(19,5))\nsns.histplot(data=df, x='age_when_start', hue='status',ax=ax[0])\nsns.histplot(data=df, x='emploed_when_start', hue='status',ax=ax[1])\nplt.tight_layout()  \nplt.show()","5a8904c1":"\ngraffs(['cnt_children','cnt_fam_members'])","0512eb92":"fig, ax =plt.subplots(1,2, figsize=(27,7))\nsns.histplot(data=df, x='income_category', hue='status',ax=ax[0])\nsns.boxenplot(data=df, x='amt_income_total', hue='status',ax=ax[1])\nplt.tight_layout()  \nplt.show()","60c3877b":"df.credit_counts.describe()","3e284216":"#\ndf.flag_own_car = df.flag_own_car.apply(Y_or_N)","05d54f04":"#If the experience at the time of application is less, we indicate -1\ndf.loc[df['emploed_when_start'] < 0, 'emploed_when_start'] = -1","b87d1f69":"df.flag_own_realty = df.flag_own_realty.apply(Y_or_N)","2936abd1":"cm = sns.light_palette(\"green\", as_cmap=True)\ndf.corr().style.background_gradient(cmap=cm)","071ad2c3":"df.head(2)","48dbfe8f":"#Remove unnecessary data from the dataset\ndf_features = df.drop(['id','status','start_month','duration',\n                       'amt_income_total'], axis=1)\ndf_target = df['status']","1541d007":"num_features = ['income_category','age_when_start','emploed_when_start','cnt_fam_members','credit_counts','income_per_person']","67e59bcd":"cat_features=['code_gender','name_income_type','name_education_type','name_family_status',\n              'name_housing_type','occupation_type']","01d1edfe":"df_features[num_features] = df_features[num_features].astype('int64')","674a9e04":"df.groupby('status')['status'].count()","4ad89ab4":"df_features.info()","cc7e25f7":"\nX_train, X_test, y_train, y_test = train_test_split(df_features, df_target, test_size=0.2, random_state=42)","086fbe3a":"# upsample\ndef upsample(features, target, repeat):\n    \n    features_zeros = features[target == 0]\n    features_ones = features[target == 1]\n    target_zeros = target[target == 0]\n    target_ones = target[target == 1]\n \n    features_upsampled = pd.concat([features_ones] + [features_zeros] * repeat)\n    target_upsampled = pd.concat([target_ones] + [target_zeros] * repeat)\n    \n    features_upsampled = shuffle(features_upsampled, random_state=42)\n    target_upsampled = shuffle(target_upsampled, random_state=42)\n    \n    return features_upsampled, target_upsampled\n","e316dd41":"features_upsampled, target_upsampled = upsample(X_train, y_train, 8)\nprint(features_upsampled.shape)\nprint(target_upsampled.mean())","f9b6ee5b":"# downsample\ndef downsample(features, target, fraction):\n    features_zeros = features[target == 0]\n    features_ones = features[target == 1]\n    target_zeros = target[target == 0]\n    target_ones = target[target == 1]\n\n    features_sample = features_ones.sample(frac=fraction, random_state=42)\n    target_sample = target_ones.sample(frac=fraction, random_state=42)\n    \n    features_downsampled = pd.concat([features_sample] + [features_zeros])\n    target_downsampled = pd.concat([target_sample] + [target_zeros])\n    \n    features_downsampled = shuffle(features_downsampled, random_state=42)\n    target_downsampled = shuffle(target_downsampled, random_state=42)\n    \n    return features_downsampled, target_downsampled","363f1559":"features_downsample, target_downsample = downsample(X_train, y_train, 0.17)\nprint(features_downsample.shape)\nprint(target_downsample.mean())","fd573da6":"def results(model, scor_type, X, y, sample):\n  predict = model.predict(X)\n  tn, fp, fn, tp = confusion_matrix(y, predict).ravel()\n  f1 = f1_score(y, predict)\n  roc = roc_auc_score(y, model.predict_proba(X)[:,1])\n  f_beta = fbeta_score(y, predict,beta=0.5)\n  return ({'dataset': sample,\n                      'tune_metric': scor_type,\n                      'roc_auc_score': roc,\n                      'f1_beta_score': f1,\n                      'f1_score': f1,\n                      'tn': tn,\n                      'fp': fp,\n                      'fn': fn,\n                      'tp': tp})","9ae289b3":"#\u0414\u0430\u0442\u0430\u0441\u0435\u0442 \u0434\u043b\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432\ncolumns = ['dataset','tune_metric','roc_auc_score','f1_beta_score','f1_score', 'tn','fp','fn','tp']","b50eb606":"res_metrics = pd.DataFrame(columns=columns)","67e90c7b":"\ncategories = []\nfor cat in cat_features:\n  categories.append(df[cat].unique().tolist())","155ce800":"preprocessor = ColumnTransformer(\n    [\n        (\"onehot_categorical\", OneHotEncoder(categories=categories, drop='first'), cat_features),\n        ('scaler', StandardScaler(), num_features)\n    ], remainder='passthrough'\n)","a28ae4cd":"pipeline = Pipeline(\n    [\n        ('preprocessor', preprocessor),\n        ('model', LogisticRegression())\n    ]\n)\n","0cafc7cb":"preprocessor.fit_transform(features_downsample)[:1]","750350ef":"params = [\n  {\n        'model': [RandomForestClassifier()],\n        'model__n_estimators': [i for i in range(1, 70,5)],\n        'model__max_depth': [i for i in range(1, 20,2)],\n        'model__random_state': [42],\n        'model__criterion':['gini', 'entropy'],\n        'preprocessor__scaler': ['passthrough']\n      \n        \n  },\n  {   \n        'model': [LogisticRegression()],   \n        'model__solver': ['liblinear'],\n        #'model__penalty': ['l1', 'l2'],\n        #'model__C': [0.01, 0.1, 1, 10],\n        'model__random_state': [42],\n        'preprocessor__scaler': [StandardScaler()]\n   \n  }\n\n]","29763c0d":"grid = GridSearchCV(pipeline, param_grid=params, verbose=False,  \n                                                 cv=3, \n                                                 scoring='roc_auc')","0284b17f":"grid.fit(features_upsampled, target_upsampled)","d715b34d":"pd.DataFrame(grid.cv_results_).sort_values(by=\"mean_test_score\", ascending=False)[[\n                                                                                  'param_model__max_depth',\n                                                                                  'param_model__n_estimators',\n                                                                                  'mean_test_score',\n                                                                                  'param_model']].head(3)","a793d52c":"grid.scorer_","243989dd":"res_metrics = res_metrics.append(results(grid.best_estimator_, grid.scorer_,\n                                         X_test,y_test,\n                                         'test\/upsampled'),ignore_index=True)\n","74504a86":"res_metrics","d0637ce3":"probabilities_valid = grid.best_estimator_.predict_proba(X_test)","9302779a":"probabilities_one_test = probabilities_valid[:, 1]","f09ebf52":"fpr, tpr, thresholds = roc_curve(y_test, probabilities_one_test) \n\nplt.figure(figsize=(6, 6))\nplt.plot(fpr, tpr, linestyle='-')\nplt.plot([0, 1], [0, 1], linestyle='--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.0])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('ROC-\u043a\u0440\u0438\u0432\u0430\u044f')","e74433e1":"\nfor threshold in np.arange(0, 0.95, 0.05):\n    predicted_valid =  (probabilities_one_test > threshold)*1\n    precision = precision_score(y_test,predicted_valid)\n    recall = recall_score(y_test,predicted_valid)\n    tn, fp, fn, tp = confusion_matrix(y_test, predicted_valid).ravel()\n    print(\"\u041f\u043e\u0440\u043e\u0433 = {:.2f} | \u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c = {:.3f}, \u041f\u043e\u043b\u043d\u043e\u0442\u0430 = {:.3f}\".format(\n        threshold, precision, recall))\n    print('TN = {}| FP {}| FN {} | TP {} |'.format(tn, fp, fn, tp))","b737e728":"cbr = CatBoostClassifier(eval_metric='AUC', iterations=10000, random_state=42,\n                         learning_rate=0.05, depth=6, verbose=1000)\n","a320a3a5":"cbr.fit(features_upsampled ,target_upsampled, cat_features=cat_features , eval_set=(X_test, y_test), plot=True)\n","20e84b93":"catboost_feachures_important=pd.DataFrame({'feature_importance': cbr.feature_importances_, \n              'feature_names': X_train.columns}).sort_values(by=['feature_importance'], \n                                                           ascending=False)","c9430f96":"catboost_feachures_important","f2c5c505":"res_metrics = res_metrics.append(results(cbr, 'roc_auc',\n                                         X_test,y_test,\n                                         'test\/upsampled'),ignore_index=True)","1aec087b":"res_metrics","95f9c653":"probabilities_valid = cbr.predict_proba(X_test)","2db1858c":"probabilities_one_test = probabilities_valid[:, 1]","7aa20e76":"fpr, tpr, thresholds = roc_curve(y_test, probabilities_one_test) \n\nplt.figure(figsize=(6, 6))\nplt.plot(fpr, tpr, linestyle='-')\nplt.plot([0, 1], [0, 1], linestyle='--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.0])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('ROC-\u043a\u0440\u0438\u0432\u0430\u044f')","56eb5389":"\u0415\u0449\u0435 \u0435\u0441\u0442\u044c \u0438\u0434\u0435\u043d\u0442\u0438\u0447\u043d\u044b\u0435 \u043f\u043e \u0432\u0441\u0435\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c \u0437\u0430\u043f\u0438\u0441\u0438, \u043a\u0440\u043e\u043c\u0435 \u043f\u043e\u043b\u0430","099364a5":"#Determination of the target characteristic","6c6590f2":"1. Develop a model for finding a \u201cgood\u201d customer by credit cards\n\n\n---\none.\nTraining and selection of hyperparameters for models was carried out using GridSearchCV\n\n3 models trained\n\nLogisticRegression\n\nRandomForestClassifier\n\nCatboost\n","fde0a486":"\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u043e\u0432. \n\n","f95625b1":"# Result\n\n","22d9e0bb":"\ndataset|\ttune_metric|roc_auc_score|f1_beta_score|f1_score| tn | fp | fn |tp \n-------|------------|-------------|-------------|--------|----|----|----|---\n test\/upsampled RFC   | roc_auc_score |\t0.603001 |0.937789 |0.937789|\t47 | 300 | 130| 3241 \ntest\/upsampled   Catboost  |\troc_auc|\t0.610053|\t0.915103|\t0.915103|\t76|\t271|\t299|\t3072|\ntest\/downsample RFC|roc_auc_score|\t0.600216|\t0.907155|\t0.907155|\t75|\t272|\t347|\t3024\ntest\/downsample Catboost|roc_auc\t|0.590445|\t0.888004|\t0.888004|\t89|\t258|\t473|\t2898|\ntest\/X_train RFC|\troc_auc_score|\t0.597396|\t0.950820|\t0.950820|\t6|341|7|\t3364|\ntest\/X_train Catboost|\troc_auc|\t0.590898|\t0.951102|\t0.951102|\t7\t|340|\t6\t|3365|","5163965e":"\u0424\u0443\u043d\u043a\u0446\u0438\u0438","7a2a7362":"## Duplicates","7ebcf8af":"1.\tAppl, contains general customer data. Most likely, these are primary data and are stored in the storage based on received applications for the issuance of loan products.\n\n2.  Balance, here you can find historical data on issued loan products, basic information, payment schedule for each loan and payment status.","593ec22b":"#Data processing","9b9d4946":"\u0423 \u043d\u0430\u0441 \u0441\u0438\u043b\u044c\u043d\u044b\u0439 \u0434\u0438\u0441\u0431\u0430\u043b\u0430\u043d\u0441 \u043a\u043b\u0430\u0441\u0441\u043e\u0432, 90\/10","b7342302":"\u041f\u043e\u043b\u0443\u0447\u0438\u043b\u043e\u0441\u044c \u0447\u0442\u043e \u0434\u043e\u043b\u044f \"\u043f\u043b\u043e\u0445\u0438\u0445\" \u0432\u0441\u0435\u0433\u043e ~8%","5bf99ac6":"Let's remove duplicates. Judging by the fact that we have identical records in all respects except for the duration of the loan, we can assume that these are two different loan products from the same client.\nSince we have an expected date of issue of the loan, we can assign numbers to all products. Let's get a new sign with the number of credits.\nBut, there is an assumption that this feature differs from the primary data and in order to get it, you need to make an additional request, or add it to the application.\n","9b21af59":"#Data visualization","12d28a0f":"2. Interpretation of model results, description of a \"good\" client and its probabilistic meaning\n\n\n---\nChoosing a metric. The main metric for fitting the model was chosen roc_auc, it will reflect well the \"skill\" of the model in ranking objects. The second point why this metric was chosen is that the model must have a probabilistic meaning. In this case, the indicator of the roc_auc metric can be interpreted as the probability with which a good customer will be classified as good.\n\nPrecision with such an imbalance of classes and a predominance of a positive class as a whole will be high if we mark all clients as good, the indicator will also be high, recall in this situation will be 1 (if we can still change the training dataset, but the test dataset will be with the same imbalance). F1 measure is based on precision \/ recall. But for comparison, the indicator of this metric was also calculated.\n\n---\n\n\n\n\nIt was not possible to properly define a good client, in my opinion the model does not classify clients well. Its indicator roc_auc ** 0.61% ** indicates that with a probability of * 61% * the model is able to classify a good client as a \u201cgood customer\u201d. The random model has an indicator of 50%, it turns out that ours is not so far \"gone.\" Then make a decision\n\n\n\nIt turned out to be a \"conditional\" description of the client based on the data of their graphic interpretation, but these are only hypotheses.\n\nA woman, 28, 32 or 38 years old, who owns real estate (apartment or house) and a car. Of course, she is married, no children or a maximum of two (family of 4). He works, about 6 years of experience, holds the position of a manager, sales manager or accountant, with an income of more than 5000 per month, secondary specialized education.\n\n\nIt is more rational to use the binning procedure to determine the user's portrait. This is from credit scoring tasks to categorize variables by binning and obtain a WOE for each category.\n","f04edfe1":"\u0414\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u043f\u0440\u043e\u0441\u0440\u043e\u0447\u0435\u043d\u043d\u044b\u0445 \u043f\u043b\u0430\u0442\u0435\u0436\u0435\u0439 \u043f\u043e\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0438 \u043a\u0430\u043a\u0438\u0445 \u0441\u0442\u0430\u0442\u0443\u0441\u043e\u0432 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u043c\u0435\u0441\u044f\u0446\u0435.","ca8e4c34":"# Model training","ff5c5cb0":"## pipeline","82edb61c":"Thus, a level 0 delay occurs in most clients, during the entire loan period, the peak falls on the first 5 months. Delay of the first level is also not uncommon to have a similar distribution pattern with zero, but with a lower frequency.\n\nOverdue payments of levels 2, 3, 4, 5 Significantly fewer, but they are of a more prolonged nature. In long-term loans, users with a history of more than 5 years after about 50 months have no such delays at all.\n\nBased on this data, we will mark up the dataset with general data as follows.\n\nA debt of 1-5 level formed within 18 months is a \"bad client\"","ccaed2cf":"## Skips","d0e26c5e":"#Dataset preparation","4d2028b7":"# Primary processing of features\n\n---\n\n","957e97e2":"# \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430","fc58fd81":"Fill in the gaps in occupation_type with the most popular amusement status\n","539d441f":"\u0422\u0435\u043f\u0435\u0440\u044c \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u043d\u0435 \u043f\u043e\u043f\u0430\u043b \u043b\u0438 \u043a\u043b\u0438\u0435\u043d\u0442 \u0432 \u043e\u0431\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u0438 \u043f\u043b\u043e\u0445\u043e\u0439 \u0438 \u0445\u043e\u0440\u043e\u0448\u0438\u0439, \u0435\u0441\u043b\u0438 \u0434\u0430 \u0442\u043e \u0443\u0434\u0430\u043b\u0438\u043c \u0445\u043e\u0440\u043e\u0448\u0435\u0433\u043e. \u041f\u043b\u043e\u0445\u0438\u0445 \u0438 \u0442\u0430\u043a \u043c\u0430\u043b\u043e ","d76b9cdc":"## Preliminary entry according to the schedules:\nIf we talk about clients, then, guided by the graphs, the portrait of an ideal client is approximately the following:\n\nA woman aged 28, 32 or 38 years old, owning real estate (apartment or house) and a car. Of course, she is married, no children or a maximum of two (family of 4).\nHe works, about 6 years of experience, holds the position of a manager or a sales manager or an accountant with an income of more than 5,000 per month, at least has a secondary specialized education.\n\nBut all this is far from reality and cannot always correspond to reality.\n\nRational definitions of the user's portrait use binning. This is from credit scoring tasks to categorize variable binning procedures and obtain a WOE for each category."}}