{"cell_type":{"574a7d03":"code","9d313a99":"code","1f1c1b65":"code","7d5c5275":"code","df0068c5":"code","c7de52ff":"code","f45e2760":"code","fd78db38":"code","505b410a":"code","dea6a042":"code","6efcdd24":"code","06daa163":"code","e5a72a32":"code","1f324769":"code","068ac60b":"code","8ab3c5cb":"code","a8de4bad":"code","109ca3a1":"code","6a4150db":"code","18f87c3e":"code","45d9b144":"code","a615f249":"code","bdccf2cf":"code","aba0f9b2":"code","59b2ec3e":"code","477d36a0":"code","3ac34ca4":"code","23b6ad1b":"code","ac311642":"code","136075c1":"code","631ec150":"code","f88bf3f4":"code","c85d9d2c":"code","09044593":"code","a86dd373":"markdown","e06a7f7a":"markdown","98e8d52a":"markdown","6340ab57":"markdown","52c7748f":"markdown","bd08d3f4":"markdown","739e5325":"markdown","bac636ff":"markdown","765a5c33":"markdown","61d7a6f1":"markdown","b84666c5":"markdown","2802fa36":"markdown","c85e80a3":"markdown","81fb828e":"markdown","26028a10":"markdown","3ece2c07":"markdown","d343f8fa":"markdown","eb6d332e":"markdown","5a8ed926":"markdown","91c7016e":"markdown","3344e14b":"markdown"},"source":{"574a7d03":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","9d313a99":"#Importing important libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style = 'whitegrid'\n%matplotlib inline","1f1c1b65":"iris = pd.read_csv(\"..\/input\/Iris.csv\",index_col=0)","7d5c5275":"iris.head()","df0068c5":"sns.pairplot(iris,hue='Species',palette='dark', markers='o')\nplt.show()","c7de52ff":"setosa = iris[iris['Species']=='Iris-setosa']\nplt.figure(figsize=(8,5))\nsns.kdeplot( setosa['SepalWidthCm'], setosa['SepalLengthCm'],cmap=\"inferno\", shade=True, shade_lowest=False)\nplt.show()","f45e2760":"sns.violinplot(y='Species', x='SepalLengthCm', data=iris, inner='quartile')\nplt.show()\nsns.violinplot(y='Species', x='SepalWidthCm', data=iris, inner='quartile')\nplt.show()\nsns.violinplot(y='Species', x='PetalLengthCm', data=iris, inner='quartile')\nplt.show()\nsns.violinplot(y='Species', x='PetalWidthCm', data=iris, inner='quartile')\nplt.show()","fd78db38":"from sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\n\nscaler.fit(iris.drop('Species',axis=1))","505b410a":"scaled_features = scaler.transform(iris.drop('Species',axis=1))","dea6a042":"df = pd.DataFrame(scaled_features,columns=iris.columns[:-1])\ndf.head()","6efcdd24":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(scaled_features,iris['Species'],test_size=0.3, random_state=55)","06daa163":"from sklearn.neighbors import KNeighborsClassifier\n\n# Starting with k=1\nknn = KNeighborsClassifier(n_neighbors=1)","e5a72a32":"knn.fit(X_train,y_train)\n","1f324769":"pred = knn.predict(X_test)","068ac60b":"from sklearn.metrics import classification_report,confusion_matrix\n\nprint(confusion_matrix(y_test,pred))\nprint(\"\\n\")\nprint(classification_report(y_test,pred))","8ab3c5cb":"from sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import train_test_split\naccuracy = accuracy_score(y_test,pred)\nprint(\"KNN Accuracy: %.2f%%\" % (accuracy * 100.0))","a8de4bad":"error_rate = []\n\nfor i in range(1,50):\n    \n    knn = KNeighborsClassifier(n_neighbors=i)\n    knn.fit(X_train,y_train)\n    pred_i = knn.predict(X_test)\n    error_rate.append(np.mean(pred_i != y_test))","109ca3a1":"plt.figure(figsize=(15,8))\nplt.plot(range(1,50),error_rate,color='blue', linestyle='dashed', marker='o',\n         markerfacecolor='violet', markersize=10)\nplt.title('Error Rate vs. K Value')\nplt.xlabel('K')\nplt.ylabel('Error Rate')\nplt.show()","6a4150db":"knn = KNeighborsClassifier(n_neighbors=5)\n\nknn.fit(X_train,y_train)\npred = knn.predict(X_test)\n\nprint('WITH K=5')\nprint('\\n')\nprint(confusion_matrix(y_test,pred))\nprint('\\n')\nprint(classification_report(y_test,pred))","18f87c3e":"from sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import train_test_split\naccuracy = accuracy_score(y_test,pred)\nprint(\"KNN Accuracy: %.2f%%\" % (accuracy * 100.0))","45d9b144":"iris.head()","a615f249":"# Train-test split for SVM, as we don't want the scaled features to put in our SVM model\n\nX_svm = iris.drop('Species',axis=1)\ny_svm = iris['Species']\nX_train, X_test, y_train, y_test = train_test_split(X_svm, y_svm, test_size=0.3,random_state=60)\n\n","bdccf2cf":"from sklearn.svm import SVC\n\nsvc_model = SVC()\nsvc_model.fit(X_train,y_train)","aba0f9b2":"predictions = svc_model.predict(X_test)","59b2ec3e":"print(confusion_matrix(y_test,predictions))\nprint('\\n')\nprint(classification_report(y_test,predictions))","477d36a0":"from sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import train_test_split\naccuracy = accuracy_score(y_test,predictions)\nprint(\"SVM Accuracy: %.2f%%\" % (accuracy * 100.0))","3ac34ca4":"from sklearn.model_selection import GridSearchCV","23b6ad1b":"param_grid = {'C': [0.01, 0.1, 1, 10, 100], 'gamma': [1,0.1,0.01,0.001,0.0001]} ","ac311642":"grid = GridSearchCV(SVC(),param_grid,refit=True,verbose=2)\ngrid.fit(X_train,y_train)","136075c1":"grid.best_params_","631ec150":"grid.best_estimator_","f88bf3f4":"grid_predictions = grid.predict(X_test)","c85d9d2c":"print(confusion_matrix(y_test,grid_predictions))\nprint(\"\\n\")\nprint(classification_report(y_test,grid_predictions))","09044593":"from sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import train_test_split\naccuracy = accuracy_score(y_test,grid_predictions)\nprint(\"Accuracy: %.2f%%\" % (accuracy * 100.0))","a86dd373":"### Predictions and Evaluations","e06a7f7a":"#### As we can see here in this case, higher the K value after 25, the error rate is getting higher.\n#### k = 1  was a good choice, still we will try to apply k = 5 to see the results.  We are not applying k=20 or k=22 as that will overfit the model ","98e8d52a":"### Standardizing the variables for applying KNN","6340ab57":"#### Some exploratory data analysis","52c7748f":"### Here from the confusion matrix we can see that, we managed to classify one of those points using GridSearch that we couldn't  classify in the previous stages.","bd08d3f4":"The Iris dataset contains measurements for 150 iris flowers from three different species.\n\nThe three classes in the Iris dataset:\n\n    Iris-setosa (n=50)\n    Iris-versicolor (n=50)\n    Iris-virginica (n=50)\n\nThe four features of the Iris dataset:\n\n    sepal length in cm\n    sepal width in cm\n    petal length in cm\n    petal width in cm","739e5325":"#### We can inspect the best parameters by some of Gridsearch functions","bac636ff":"### Applying SVM","765a5c33":"#### I will try to apply KNN and SVM on the dataset and try to improve their performances","61d7a6f1":"### Prediction and Evaluation of SVM","b84666c5":"### Model Evaluation","2802fa36":"### Applying KNN","c85e80a3":"### Choosing a k value","81fb828e":"#### As we can see from the confusion matrix, though we have got one point, still two points are hard to get. Trying to get those 2 points the model can be overfitted.","26028a10":"#### From the pairplot we can identify that Setosa is the most seperable from other species\n\n### Creating a kde plot of sepal_length versus sepal width for Setosa species","3ece2c07":"#### Creating a dictionary of parameters to feed Gridsearch. Gridsearch will choose the best parameters for SVM","d343f8fa":"#### Train test split","eb6d332e":"#### The accuracy is not bad. Trying to explore whether a better K value can be chosen or not","5a8ed926":"#### Trainng the SVM model","91c7016e":"#### The model is pretty good, but still we couldn't classify those two points that couldn't be classified with the KNN model.\n#### But we can try to tune the parameters to get a even better result (just for practice)\n#### To tune the hyperparameters, we will use the GridSearch method.","3344e14b":"#### Let's check the head of the Dataset"}}