{"cell_type":{"7a6b1bd4":"code","1173f3f0":"code","f81e2000":"code","d6d3e009":"code","5f864497":"code","d80ceb31":"code","c5058e61":"code","2e8e1c0c":"code","8ae09a35":"code","8b45e9eb":"code","34408985":"code","69084cb9":"code","6ba875c3":"code","e09d4eee":"code","50406cad":"code","403e2be9":"code","1a11dc82":"code","e045d08d":"code","fcd0c40e":"code","bee949d8":"code","bf2d414f":"code","55aeb28b":"code","52bbd86c":"code","70eab372":"code","a677ee2f":"code","eb5c630e":"code","fafe6b47":"code","d312fa4d":"code","5b90fce6":"code","8bdeb562":"code","52cb584b":"code","ba10a230":"code","5cd5a220":"code","0aef32b8":"code","9e440b7a":"code","c3885809":"code","d100cf14":"code","fff2146c":"code","518a931d":"code","f4a671df":"code","ec0affa7":"code","af3e3112":"markdown","3d9e158e":"markdown","9ec660d6":"markdown"},"source":{"7a6b1bd4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1173f3f0":"pip install pmdarima","f81e2000":"import warnings\nwarnings.filterwarnings('ignore')\n\n# Data Visualization \n\nimport seaborn as sns\nimport plotly.express as px\n%matplotlib inline \n\n# model building packages \n\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nfrom pmdarima import auto_arima\nfrom statsmodels.tsa.stattools import acf, pacf, adfuller\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom statsmodels.tsa.statespace import sarimax\nfrom statsmodels.tools.eval_measures import mse, rmse\nfrom sklearn.metrics import mean_absolute_error","d6d3e009":"df_train = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/sales_train.csv')","5f864497":"df_train.head()","d80ceb31":"df_train.shape","c5058e61":"category = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/item_categories.csv')","2e8e1c0c":"category.head()","8ae09a35":"items = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/items.csv')","8b45e9eb":"items.head()","34408985":"shops = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/shops.csv')","69084cb9":"shops.head()","6ba875c3":"test = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/test.csv')","e09d4eee":"test.head()","50406cad":"df_train.info()","403e2be9":"df_train.columns","1a11dc82":"df_train.isnull().sum()","e045d08d":"df_train.isna().sum()","fcd0c40e":"df_train.describe().round(2)","bee949d8":"print('Date Range in Train Dataset -', df_train['date'].min(), '-' ,df_train['date'].max())","bf2d414f":"corr = df_train.corr()","55aeb28b":"corr","52bbd86c":"fig = px.imshow(corr, zmin=-1, zmax=1)\nfig.show()","70eab372":"Q1 = df_train.quantile(0.25)\nQ3 = df_train.quantile(0.75)\nIQR = Q3-Q1\n\n((df_train<(Q1-1.5*IQR)) | (df_train>(Q3+1.5*IQR))).sum()","a677ee2f":"from pylab import rcParams\nrcParams['figure.figsize']=20,8\n\nsns.boxplot(df_train['item_price'], orient='h')","eb5c630e":"sns.boxplot(df_train['item_cnt_day'], orient='h');","fafe6b47":"df_train = df_train.drop(df_train[df_train['item_price']>=45000].index)\ndf_train = df_train.drop(df_train[df_train['item_price']<0].index)","d312fa4d":"df_train = df_train.drop(df_train[df_train['item_cnt_day']<0].index)\ndf_train=df_train.drop(df_train[df_train['item_cnt_day']>=600].index)","5b90fce6":"df_train.shape","8bdeb562":"def match_key(key):\n    return item_id[key]","52cb584b":"item_id = {key:value for key, value in zip(items['item_id'], items['item_category_id'])}\nprint(\"item_id size : {}\".format(len(item_id)))","ba10a230":"df_train['item_category_id'] = df_train.apply(lambda x : match_key(x['item_id']), axis=1)\ndf_train.head()","5cd5a220":"df_train['sales']= df_train['item_price']*df_train['item_cnt_day']\ndf_train.head()","0aef32b8":"df_train.groupby(['date_block_num'])['sales'].sum()","9e440b7a":"from pandas_profiling import ProfileReport","c3885809":"ProfileReport(df_train)","d100cf14":"df_train = df_train.drop_duplicates(['date_block_num','shop_id','item_id'])\nprint(\"train data Shape : {}\".format(df_train.shape))\ndf_train.head()","fff2146c":"sns.pairplot(df_train)","518a931d":"SD = seasonal_decompose(df_train['sales'].values, period=12)\n\nSD.plot();","f4a671df":"SD1 = seasonal_decompose(df_train['item_cnt_day'].values, period=12)\n\nSD1.plot();","ec0affa7":"def ADF_test(series):\n    print('ADFuller Test Results')\n    res = adfuller(series, autolag='AIC')\n    \n    labels = ['ADF Test Statistic', 'P-Value', '# Lags Used', '# Observations']\n    \n    out = pd.Series(res[0:4], index= labels)\n    \n    for key, val in res[4].items():\n        out[f'Critical value ({key})']= val\n        \n    print(out)\n    \n    if res[1]<0.05:\n        print('Fail to Reject Null - Data is Stationary')\n        \n    else:\n        print('Reject Null - Data is non-stationary')","af3e3112":"# Model Building","3d9e158e":"# Map Item Category ID based on Item_ID","9ec660d6":"# Pandas Profiling"}}