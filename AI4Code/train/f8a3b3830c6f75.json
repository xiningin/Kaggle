{"cell_type":{"38e01acc":"code","4a99a104":"code","ee498c68":"code","fc10dabe":"code","02f403e0":"code","a71f2044":"code","3a6a1393":"code","d9a0a6f9":"code","e36aa4e8":"code","e83c4964":"code","53a8b57e":"code","6649eb17":"code","1b614771":"code","aa078330":"code","6e814111":"code","bd245290":"code","b37e6b1a":"code","5b67c198":"code","a6afa29a":"code","e1861f37":"code","bfcac32c":"code","f0cfbab6":"code","c82ce4c9":"code","d37e29c5":"code","f27fe08a":"code","4dec8597":"markdown","9e6e3f2e":"markdown","037a4920":"markdown","d2982e4c":"markdown","0f1bfe11":"markdown","9a4375b0":"markdown","d1de6b1c":"markdown","7dbcc91b":"markdown","1f6f6398":"markdown","1ab5ff93":"markdown","0091e611":"markdown","83f12c8f":"markdown","e5798316":"markdown","0187b9ab":"markdown","af951302":"markdown","aa9ef9cb":"markdown","db9af81c":"markdown","962062a7":"markdown","d4931edc":"markdown","3d9b5711":"markdown"},"source":{"38e01acc":"!ls \/kaggle\/input\/brazilian-ecommerce\/*.csv","4a99a104":"import warnings\nwarnings.filterwarnings('ignore')\n\nimport pandas as pd\nimport numpy as np\n\nimport plotly.graph_objects as go\nimport plotly.express as px\n\npd.set_option('display.max_rows', 100, 'display.max_columns', 50)","ee498c68":"order_customer_df = pd.read_csv('\/kaggle\/input\/brazilian-ecommerce\/olist_customers_dataset.csv')\n\norders_df = pd.read_csv('\/kaggle\/input\/brazilian-ecommerce\/olist_orders_dataset.csv',\n                        parse_dates=[\n                            'order_purchase_timestamp', 'order_approved_at', \n                            'order_delivered_carrier_date', 'order_delivered_customer_date',\n                            'order_estimated_delivery_date'\n                        ]\n                       )","fc10dabe":"display(order_customer_df.head())","02f403e0":"display(orders_df.head())","a71f2044":"order_customer_df.shape","3a6a1393":"orders_df.shape","d9a0a6f9":"def unique_value_count(df):\n    for col in df.columns:\n        if df[col].dtype == 'object':\n            print(f\"{col}: {df[col].nunique()}\")\n            print('-'*40)","e36aa4e8":"unique_value_count(df=order_customer_df)","e83c4964":"unique_value_count(df=orders_df)","53a8b57e":"def missing_value_stats(df):\n    num_rows = df.shape[0]\n    # Missing value count by columns\n    df_missing = df.isna().sum().reset_index()\n    # Renaming columns\n    df_missing.columns = ['column', 'missing_values']\n    # Getting only those columns having missing values > 0\n    df_missing = df_missing[df_missing['missing_values'] > 0]\n    df_missing.reset_index(drop=True, inplace=True)\n    # Calculating percentage of missing\n    df_missing['missing_percentage'] = df_missing['missing_values'].apply(\n        lambda missing_value: round((missing_value \/ num_rows) * 100, 2)\n    )\n    \n    if df_missing.shape[0] > 0:\n        return df_missing\n    else:\n        return \"No nulls in the data\"","6649eb17":"display(missing_value_stats(order_customer_df))","1b614771":"display(missing_value_stats(orders_df))","aa078330":"null_orders_approved = orders_df[orders_df['order_approved_at'].isna()]\n\ndisplay(null_orders_approved.head())","6e814111":"null_orders_approved['order_status'].value_counts()","bd245290":"orders_df.loc[~orders_df['order_approved_at'].isna(), 'order_status'].value_counts()","b37e6b1a":"# Firstly sorting the dataframe\norders_df = orders_df.sort_values(by=['order_purchase_timestamp']).reset_index(drop=True)\n\n# Calculating delay in hours\norders_df['order_accept_delay_hours'] = np.round(\n    np.subtract(orders_df['order_approved_at'],\n                orders_df['order_purchase_timestamp']\n               ) \/ pd.Timedelta('1 hour'), 4)\n\ndisplay(orders_df.head())","5b67c198":"fig = px.line(orders_df, x='order_purchase_timestamp', y='order_accept_delay_hours')\n\nfig.update_layout(xaxis_range=['2016-09-01','2018-09-30'],\n                  title_text=\"Delay in accepting the order\")\nfig.show()","a6afa29a":"def add_features(df):\n    df['order_purchase_month'] = df['order_purchase_timestamp'].apply(\n        lambda timestamp: str(timestamp)[:7]\n    )\n    return df","e1861f37":"select_cols = [\n    \"order_status\", \"order_purchase_timestamp\", \n    \"order_approved_at\", \"order_accept_delay_hours\"\n]\n\norder_2017 = add_features(orders_df[select_cols].query(\"2017 <= order_purchase_timestamp < 2018\"))\norder_2018 = add_features(orders_df[select_cols].query(\"order_purchase_timestamp >= 2018\"))","bfcac32c":"display(order_2017.groupby(['order_purchase_month']).agg({'mean', 'median'}))","f0cfbab6":"display(order_2018.groupby(['order_purchase_month']).agg({'mean', 'median'}))","c82ce4c9":"temp_df = order_2017.query(\"order_purchase_month in ('2017-01')\")\n\nfig = px.line(temp_df, x='order_purchase_timestamp', y='order_accept_delay_hours')\n\nfig.update_layout(title_text=\"Delay in accepting the order in Jan 2017 \")\nfig.show()","d37e29c5":"# Excluding observations having order_status either created or approved\nnull_approved_df = orders_df[\n    ['order_status','order_purchase_timestamp', \n     'order_approved_at', 'order_accept_delay_hours'\n    ]\n].query(\"order_status not in ('created', 'approved')\")\n\n# Interpolating the missing values\nnull_approved_df['order_accept_delay_hours'] = null_approved_df[\n    'order_accept_delay_hours'].interpolate(method='linear')\n\n# Extracting null order_approved_at observations\nfilled_approved_df = null_approved_df[null_approved_df['order_approved_at'].isna()]\n\n# # Filling the timestamp using the interpolated values\nfilled_approved_df['order_approved_at'] = filled_approved_df['order_purchase_timestamp'] + \\\nfilled_approved_df['order_accept_delay_hours'].apply(lambda delay: pd.Timedelta(f\"{delay} hours\"))","f27fe08a":"# Copying the filled values to the original dataframe \norders_df.loc[filled_approved_df.index, 'order_approved_at'] = filled_approved_df['order_approved_at']\n\norders_df.info()","4dec8597":"### Null value counts","9e6e3f2e":"# Reading datasets","037a4920":"## Listing CSVs in the directory","d2982e4c":"## Importing modules","0f1bfe11":"#### Orders dataset","9a4375b0":"**Observation:**\n\n* Looks like the order acceptance takes more time in 2016 as compared to the other years.\n\n\n* By time the delay in accepting the order is decreased","d1de6b1c":"# Missing value analysis","7dbcc91b":"### Creating `order_accept_delay` column","1f6f6398":"### Unique value stats","1ab5ff93":"**Obervation:** The five null entries in `order_approved_at` column are there because five observations has `order_status == 'created'`","0091e611":"**Conclusion:** If the `order_status` is **_canceled_** then the nulls in `order_approved_at`, `order_delivered_carrier_date`, and `order_delivered_customer_date` are really making sense.\n\n#### Now the above conclusion gave rise to the following questions:\n\n* Is it really for the `order_status` _canceled_ or the `order_status` can have different values?\n\n\n* The columns `order_delivered_carrier_date` and `order_delivered_customer_date` have more nulls then the `order_status`, will inspect it later.","83f12c8f":"#### Order Customer dataset","e5798316":"### Visualizing delay in accepting the order","0187b9ab":"### First five observations of customer's order data","af951302":"### Shape of dataset","aa9ef9cb":"### Is it really when the `order_status == 'canceled'` or the `order_status` can have different values?","db9af81c":"### First five observations of order's data","962062a7":"### Filling the value by linear interpolation","d4931edc":"**Observation:** Not just for canceled, but when `order_status` is \"delivered\" or \"created\" there are null values too in `order_approved_at`.\n\n\n**Conclusion:**\n\n* For filling the missing value of timestamp for `order_approved_at` the following values of `order_status` will be considered:\n    * `canceled`\n    \n    * `delivered`\n    \n    \n* When the `order_status` is created there is no need to fill the missing values","3d9b5711":"## Inspecting dataset"}}