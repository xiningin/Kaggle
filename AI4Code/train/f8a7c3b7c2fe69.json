{"cell_type":{"aa88078f":"code","22dd30dd":"code","53443128":"code","734464b2":"code","29bbc654":"code","4c5bddf2":"code","4883e401":"code","0ae42897":"code","5285db22":"code","a8bc1a9a":"code","0b0aecc6":"code","766dec61":"code","76af80e7":"code","2fd160f0":"code","f40432cd":"code","f33da6ae":"code","f2f951ef":"code","2772d779":"code","c8c79131":"code","d7a440a1":"code","7dab1b50":"code","64df4e66":"code","27eabd10":"code","11131017":"code","1ad862c6":"code","1d753a23":"code","1f573c30":"code","6e55d7d3":"code","8f62cf8c":"code","bedb5e47":"code","090c17fb":"markdown"},"source":{"aa88078f":"import os\nimport numpy as np\nimport pandas as pd\nimport random\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom contextlib import contextmanager\nfrom time import time\nfrom tqdm import tqdm\nimport lightgbm as lgbm\n\nfrom sklearn.metrics import classification_report, log_loss, accuracy_score\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import KFold","22dd30dd":"data0 = pd.read_csv(\"..\/input\/breast-cancer-wisconsin-data\/data.csv\")\ndata0[0:2].T","53443128":"data0['diagnosis'].unique()","734464b2":"Name=['M','B']\nNum=[0,1]\n\nnormal_mapping=dict(zip(Name,Num)) \nreverse_mapping=dict(zip(Num,Name)) \n\ndef mapper(value):\n    return reverse_mapping[value]","29bbc654":"data0['diagnosis']=data0['diagnosis'].map(normal_mapping)","4c5bddf2":"data1=data0.set_index('id',drop=True)\ndata1[0:2].T","4883e401":"n=len(data0)\nprint(n)","0ae42897":"N=[]\nfor i in range(n):\n    N+=[i]\nrandom.shuffle(N)","5285db22":"datay=data1['diagnosis']\ndata2=data1.drop(['diagnosis','Unnamed: 32'],axis=1)\ndata2[0:2].T","a8bc1a9a":"data3=np.array(data2)\ndatay3=np.array(datay)","0b0aecc6":"train=data3[N[0:(n\/\/10)*8]]\ntest=data3[N[(n\/\/10)*8:]]\ntrainy=datay3[N[0:(n\/\/10)*8]]\ntesty=datay3[N[(n\/\/10)*8:]]","766dec61":"df_columns=['radius_mean', 'texture_mean', 'perimeter_mean', 'area_mean',\n       'smoothness_mean', 'compactness_mean', 'concavity_mean',\n       'concave points_mean', 'symmetry_mean', 'fractal_dimension_mean',\n       'radius_se', 'texture_se', 'perimeter_se', 'area_se', 'smoothness_se',\n       'compactness_se', 'concavity_se', 'concave points_se', 'symmetry_se',\n       'fractal_dimension_se', 'radius_worst', 'texture_worst',\n       'perimeter_worst', 'area_worst', 'smoothness_worst',\n       'compactness_worst', 'concavity_worst', 'concave points_worst',\n       'symmetry_worst', 'fractal_dimension_worst'\n    ]","76af80e7":"train_df=pd.DataFrame(train)\ntest_df=pd.DataFrame(test)","2fd160f0":"train_df.columns=df_columns\ntest_df.columns=df_columns","f40432cd":"def create_numeric_feature(input_df):\n    use_columns = ['radius_mean', 'texture_mean', 'perimeter_mean', 'area_mean',\n       'smoothness_mean', 'compactness_mean', 'concavity_mean',\n       'concave points_mean', 'symmetry_mean', 'fractal_dimension_mean',\n       'radius_se', 'texture_se', 'perimeter_se', 'area_se', 'smoothness_se',\n       'compactness_se', 'concavity_se', 'concave points_se', 'symmetry_se',\n       'fractal_dimension_se', 'radius_worst', 'texture_worst',\n       'perimeter_worst', 'area_worst', 'smoothness_worst',\n       'compactness_worst', 'concavity_worst', 'concave points_worst',\n       'symmetry_worst', 'fractal_dimension_worst'\n    ]\n    \n    return input_df[use_columns].copy()","f33da6ae":"create_numeric_feature(train_df)","f2f951ef":"from contextlib import contextmanager\nfrom time import time\n\nclass Timer:\n    def __init__(self, logger=None, format_str='{:.3f}[s]', prefix=None, suffix=None, sep=' '):\n\n        if prefix: format_str = str(prefix) + sep + format_str\n        if suffix: format_str = format_str + sep + str(suffix)\n        self.format_str = format_str\n        self.logger = logger\n        self.start = None\n        self.end = None\n\n    @property\n    def duration(self):\n        if self.end is None:\n            return 0\n        return self.end - self.start\n\n    def __enter__(self):\n        self.start = time()\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.end = time()\n        out_str = self.format_str.format(self.duration)\n        if self.logger:\n            self.logger.info(out_str)\n        else:\n            print(out_str)","2772d779":"from tqdm import tqdm\n\ndef to_feature(input_df):\n\n    processors = [\n        create_numeric_feature,\n    ]\n    \n    out_df = pd.DataFrame()\n    \n    for func in tqdm(processors, total=len(processors)):\n        with Timer(prefix='create' + func.__name__ + ' '):\n            _df = func(input_df)\n\n        assert len(_df) == len(input_df), func.__name__\n        out_df = pd.concat([out_df, _df], axis=1)\n        \n    return out_df","c8c79131":"train_feat_df = to_feature(train_df)\ntest_feat_df = to_feature(test_df)","d7a440a1":"train_feat_df.head().T","7dab1b50":"import lightgbm as lgbm\nfrom sklearn.metrics import mean_squared_error\n\ndef fit_lgbm(X, \n             y, \n             cv, \n             params: dict=None, \n             verbose: int=50):\n\n    if params is None:\n        params = {}\n\n    models = []\n    oof_pred = np.zeros_like(y, dtype=np.float)\n\n    for i, (idx_train, idx_valid) in enumerate(cv): \n        x_train, y_train = X[idx_train], y[idx_train]\n        x_valid, y_valid = X[idx_valid], y[idx_valid]\n\n        clf = lgbm.LGBMRegressor(**params)\n        \n        with Timer(prefix='fit fold={} '.format(i)):\n            clf.fit(x_train, y_train, \n                    eval_set=[(x_valid, y_valid)],  \n                    early_stopping_rounds=100,\n                    verbose=verbose)\n\n        pred_i = clf.predict(x_valid)\n        oof_pred[idx_valid] = pred_i\n        models.append(clf)\n        print(f'Fold {i} RMSLE: {mean_squared_error(y_valid, pred_i) ** .5:.4f}')\n\n    score = mean_squared_error(y, oof_pred) ** .5\n    print('-' * 50)\n    print('FINISHED | Whole RMSLE: {:.4f}'.format(score))\n    return oof_pred, models","64df4e66":"params = {\n    'objective': 'rmse', \n    'learning_rate': .1,\n    'reg_lambda': 1.,\n    'reg_alpha': .1,\n    'max_depth': 5, \n    'n_estimators': 10000, \n    'colsample_bytree': .5, \n    'min_child_samples': 10,\n    'subsample_freq': 3,\n    'subsample': .9,\n    'importance_type': 'gain', \n    'random_state': 71,\n}","27eabd10":"y = trainy","11131017":"from sklearn.model_selection import KFold\n\nfold = KFold(n_splits=5, shuffle=True, random_state=71)\ncv = list(fold.split(train_feat_df, y))\noof, models = fit_lgbm(train_feat_df.values, y, cv, params=params, verbose=500)","1ad862c6":"fig,ax = plt.subplots(figsize=(8,8))\nax.set_xlabel('oof',fontsize=20)\nax.set_ylabel('train_y',fontsize=20)\nax.scatter(oof,y)","1d753a23":"def visualize_importance(models, feat_train_df):\n\n    feature_importance_df = pd.DataFrame()\n    for i, model in enumerate(models):\n        _df = pd.DataFrame()\n        _df['feature_importance'] = model.feature_importances_\n        _df['column'] = feat_train_df.columns\n        _df['fold'] = i + 1\n        feature_importance_df = pd.concat([feature_importance_df, _df], \n                                          axis=0, ignore_index=True)\n\n    order = feature_importance_df.groupby('column')\\\n        .sum()[['feature_importance']]\\\n        .sort_values('feature_importance', ascending=False).index[:50]\n\n    fig, ax = plt.subplots(figsize=(8, max(6, len(order) * .25)))\n    sns.boxenplot(data=feature_importance_df, \n                  x='feature_importance', \n                  y='column', \n                  order=order, \n                  ax=ax, \n                  palette='viridis', \n                  orient='h')\n    ax.tick_params(axis='x', rotation=0)\n    ax.set_title('Importance')\n    ax.grid()\n    fig.tight_layout()\n    return fig, ax\n\nfig, ax = visualize_importance(models, train_feat_df)","1f573c30":"def revert_to_real(preda):\n    predb = np.where(preda<0.5,0,1)\n    return predb","6e55d7d3":"pred0 = np.array([model.predict(test_feat_df.values) for model in models])\npred1 = np.mean(pred0, axis=0)\npred2 = revert_to_real(pred1)\npred2","8f62cf8c":"accuracy=accuracy_score(testy,pred2)\nprint(accuracy)","bedb5e47":"fig, ax = plt.subplots(figsize=(8,8))\nsns.histplot(pred1, label='Test Predict', ax=ax, color='black')\nsns.histplot(oof, label='Train Predict', ax=ax, color='C1')\nax.legend()\nax.grid()","090c17fb":"### 'concave points_worst' is the most important factor for 'diagnosis' of berast cancer."}}