{"cell_type":{"a3f126a2":"code","abf39688":"code","d19a353a":"code","3ae3fabc":"code","840fa37d":"code","4f73e8cf":"code","c8025fb7":"code","a00ccb9f":"code","56fa03c6":"code","0c4fef34":"code","605ba945":"code","8a763492":"code","8421cab5":"code","b797e638":"code","d28c993d":"code","b1b43698":"code","9e759553":"code","6a91f410":"code","d8015585":"code","a3747d43":"code","0d58eb0c":"code","194791d9":"code","8c424234":"code","7dd4a471":"code","1610e9ee":"code","24e34a15":"code","095d792d":"code","e609f32d":"code","014430d3":"code","cfaa7c9a":"code","4caa3a53":"code","3b74b17a":"code","ad440dfa":"code","533b28ab":"code","21d2650a":"code","bc855647":"markdown","07a6666c":"markdown","193fbb63":"markdown","a621b7c3":"markdown","1cd2083e":"markdown","381ca6af":"markdown","80012f0a":"markdown","fc78f43d":"markdown","45da336b":"markdown","d21d143f":"markdown","6b8c9bc7":"markdown","7517f27b":"markdown","f88fd963":"markdown","210f5aa9":"markdown","ce946e5c":"markdown","f2d0b6aa":"markdown","ab7de71c":"markdown"},"source":{"a3f126a2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","abf39688":"data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\nprint(data.shape)\ndata.head()","d19a353a":"from matplotlib import pyplot as plt\nimport seaborn as sns","3ae3fabc":"# Set the figure size\nplt.figure(figsize=(15,5))\n\n# Configure seaborn\nsns.set_style(\"darkgrid\")\n\nfig, axes = plt.subplots(1, 2, figsize=(15, 5))\nax0 = data['Survived'].value_counts().plot.pie(explode=[0,0.1],autopct='%1.1f%%',ax=axes[0],shadow=True)\n\n# Using seaborn to plot the target\nax = sns.countplot(data=data, x=\"Survived\")\n\n# Print the counted value for each label\nfor label, value in zip(data[\"Survived\"].unique(), data[\"Survived\"].value_counts()):\n    ax.text(label, value-50, value, fontsize=22)\n\n# Set plot's title & labels\nax.set_title(\"Titanic survival\", fontsize=22)\nax.tick_params(labelsize=18)\nax.set_xlabel(\"Survived\", fontsize=16)\nax.set_ylabel(\"Count\", fontsize=16)","840fa37d":"pd.DataFrame({\n    \"dtype\" : data.dtypes,\n    \"Unique values\": data.nunique(),\n    \"Null count\": data.isna().sum()\n})","4f73e8cf":"plt.figure(figsize=(8, 8))\nax = sns.heatmap(data.drop(columns=[\"PassengerId\"]).corr(), annot=True, cmap='GnBu')\nax.tick_params(labelsize=12)","c8025fb7":"from sklearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OneHotEncoder, OrdinalEncoder, StandardScaler","a00ccb9f":"# PassengerID & Name are unique values for each passenger\n# therefore, we will not use these values to predict.\n# Cabin column has a lot of Null value, it seems to be a meaningless feature.\ncolumns_todrop = [\"PassengerId\", \"Name\"]","56fa03c6":"data['Initial'] = 0\nfor i in data:\n    data['Initial'] = data.Name.str.extract('([A-Za-z]+)\\.')\npd.crosstab(data.Initial, data.Sex)","0c4fef34":"Pres = ['Mlle','Mme','Ms','Dr','Major','Lady','Countess','Jonkheer','Col','Rev','Capt','Sir','Don']\nNext = ['Miss','Miss','Miss','Mr','Mr','Mrs','Mrs','Other','Other','Other','Mr','Mr','Mr']\ndata['Initial'].replace(Pres, Next,inplace=True)\ndata.groupby('Initial')['Age'].mean()","605ba945":"from sklearn.base import BaseEstimator, TransformerMixin\nclass FillNaAge(BaseEstimator, TransformerMixin):\n    def __init__(self, columns=None):\n        self.columns = columns\n#         print(\"init called...\", columns)\n    def fit(self, X, y=None):\n        print(\"fit called...\")\n        return self\n    def transform(self, X):\n        print(\"transform called...\")\n        X['Initial'] = 0\n        for i in X:\n            X['Initial']=X['Name'].str.extract('([A-Za-z]+)\\.')\n        X['Initial'].replace(['Mlle','Mme','Ms','Dr','Major','Lady','Countess','Jonkheer','Col','Rev','Capt','Sir','Don'],['Miss','Miss','Miss','Mr','Mr','Mrs','Mrs','Other','Other','Other','Mr','Mr','Mr'], inplace=True)\n        X.loc[(X.Age.isnull())&(X.Initial=='Mr'),'Age']=33\n        X.loc[(X.Age.isnull())&(X.Initial=='Mrs'),'Age']=36\n        X.loc[(X.Age.isnull())&(X.Initial=='Master'),'Age']=5\n        X.loc[(X.Age.isnull())&(X.Initial=='Miss'),'Age']=22\n        X.loc[(X.Age.isnull())&(X.Initial=='Other'),'Age']=46\n#         print(X[self.columns])\n        return X[self.columns]","8a763492":"age_features = [\"Age\"]\nage_transformer = Pipeline(steps=[\n    ('fillage', FillNaAge(age_features)),\n    ('scaler', StandardScaler())\n])","8421cab5":"cabin_features = [\"Cabin\"]\ncabin_transformer = Pipeline(steps=[\n    ('onehot', OneHotEncoder(handle_unknown=\"ignore\", sparse=False)),\n    ('scaler', StandardScaler())\n])","b797e638":"numeric_features = [\"SibSp\", \"Parch\", \"Fare\"]\nnumeric_transformer = Pipeline(steps=[\n    ('fillna', SimpleImputer(missing_values=np.nan, strategy='mean')),\n    ('scaler', StandardScaler())\n])","d28c993d":"categorical_features = [\"Sex\", \"Ticket\", \"Embarked\"]\ncategorical_transformer = Pipeline(steps=[\n    ('onehot', OneHotEncoder(handle_unknown=\"ignore\", sparse=False)),\n    ('scaler', StandardScaler())\n])","b1b43698":"ordinal_features = [\"Pclass\"]\nordinal_transformer = Pipeline(steps=[\n    (\"pclass_enc\", OrdinalEncoder(categories=[[1,2,3]])),\n    (\"scaler\", StandardScaler())\n])","9e759553":"preprocessor = ColumnTransformer(n_jobs=-1, transformers=[\n    (\"drop\", \"drop\", columns_todrop),\n    (\"age_process\", age_transformer, age_features + [\"Name\"]),\n    (\"cabin_process\", cabin_transformer, cabin_features),\n    (\"numeric_process\", numeric_transformer, numeric_features),\n    (\"nominal_process\", categorical_transformer, categorical_features),\n    (\"ordinal_process\", ordinal_transformer, ordinal_features),\n])","6a91f410":"from sklearn.preprocessing import PolynomialFeatures","d8015585":"class ColumnExtractor(BaseEstimator, TransformerMixin):\n    def __init__(self, columns=None):\n        self.columns = columns\n    def fit(self, X, y=None):\n        return self\n    def transform(self, X):\n        X_cols = X[self.columns]\n        return X_cols","a3747d43":"polynomial_features = [\"Age\", \"SibSp\", \"Parch\", \"Fare\", \"Sex\"]\nextra_features = [\"Name\"]\nall_features = polynomial_features + extra_features\nfeature_engineer = Pipeline(steps=[\n    (\"extract_features\", ColumnExtractor(all_features)),\n    ('fillage', FillNaAge(age_features)),\n    (\"fillna\", numeric_transformer),\n    (\"polynomial_features\", PolynomialFeatures(degree=2, interaction_only=True))\n])","0d58eb0c":"from sklearn.pipeline import FeatureUnion","194791d9":"features = FeatureUnion([\n    (\"preprocessing\", preprocessor),\n    (\"feature_engineering\", feature_engineer)\n])","8c424234":"from sklearn.model_selection import train_test_split","7dd4a471":"RANDOM_SEED = 2021\ndata = data.drop(columns=[\"Initial\"])\nx_train, x_valid, y_train, y_valid = train_test_split(\n    data.drop(columns=[\"Survived\"]),\n    data[\"Survived\"], \n    test_size=0.2,\n    stratify=data[\"Survived\"],\n    random_state=RANDOM_SEED\n)\nprint(f\"Train set's size: {x_train.shape} - {y_train.shape}\")\nprint(f\"Valid set's size: {x_valid.shape} - {y_valid.shape}\")","1610e9ee":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import GridSearchCV","24e34a15":"classifier_pipeline = Pipeline(steps=[\n    (\"features\", features),\n    (\"lr\", LogisticRegression(\n        max_iter=10000,\n        n_jobs=-1, \n        verbose=True, \n        random_state=RANDOM_SEED\n    )) # Fixed parameters go here\n])\n\n# Declare dynamic parameters here\npipeline_params = {\n    \"lr__C\": [3, 1, 0.3, 0.1, 0.03, 0.01]\n}","095d792d":"search = GridSearchCV(\n    classifier_pipeline,\n    pipeline_params, \n    scoring=\"accuracy\", \n    cv=10, \n    verbose=True, \n    n_jobs=-1\n)\nsearch.fit(x_train, y_train)","e609f32d":"print(\"Best parameter (CV score=%0.3f):\" % search.best_score_)\nprint(search.best_params_)","014430d3":"from sklearn.metrics import accuracy_score","cfaa7c9a":"# search.predict_proba(x_valid)\ny_train_pred = search.predict(x_train)\ntrain_score = accuracy_score(y_train, y_train_pred)\ny_valid_pred = search.predict(x_valid)\nvalid_score = accuracy_score(y_valid, y_valid_pred)\nprint(f\"Train's accuracy: {train_score}\")\nprint(f\"Valid's accuracy: {valid_score}\")","4caa3a53":"search = GridSearchCV(\n    classifier_pipeline,\n    pipeline_params, \n    scoring=\"accuracy\", \n    cv=10, \n    verbose=True, \n    n_jobs=-1\n)\nsearch.fit(data.drop(columns=[\"Survived\"]), data[\"Survived\"])","3b74b17a":"print(\"Best parameter (CV score=%0.3f):\" % search.best_score_)\nprint(search.best_params_)","ad440dfa":"test = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\nprint(test.shape)\ntest.head()","533b28ab":"submission = pd.DataFrame({\n    \"PassengerId\": test[\"PassengerId\"],\n    \"Survived\": search.predict(test)\n})\nprint(submission.shape)\nsubmission.head()","21d2650a":"submission.to_csv(\"submission.csv\", index=False)","bc855647":"# Modeling","07a6666c":"### Age: Numerical Feature - Ratio","193fbb63":"# Exploratory Data Analysis (EDA)\n\n> Exploratory Data Analysis refers to the critical process of performing initial investigations on data so as to discover patterns,to spot anomalies,to test hypothesis and to check assumptions with the help of summary statistics and graphical representations.\n\n**Read more:** [Exploratory Data Analysis](https:\/\/towardsdatascience.com\/exploratory-data-analysis-8fc1cb20fd15)\n\nThis is just a short and simple EDA. For a full & detailed EDA, please refer to this [Notebook](https:\/\/www.kaggle.com\/ash316\/eda-to-prediction-dietanic)","a621b7c3":"## Categorical Features - Nominal","1cd2083e":"# Data Preprocessing\n\n> In any Machine Learning process, Data Preprocessing is that step in which the data gets transformed, or Encoded, to bring it to such a state that now the machine can easily parse it. In other words, the features of the data can now be easily interpreted by the algorithm.\n\n**What is a Feature?**\n\n> A feature is an individual measurable property or characteristic of a phenomenon being observed. <br>\n> There are 2 major types of feature: Categorical and Numerical.\n\n![](https:\/\/miro.medium.com\/max\/2400\/1*a9VAOU5R83M4KOOOE-SZiw.jpeg)\n\n**Read more:** [Data Preprocessing : Concepts](https:\/\/towardsdatascience.com\/data-preprocessing-concepts-fa946d11c825)\n\n**Data Preprocessing Pipeline**\nTODO: Visualize pipeline","381ca6af":"## Logistic Regression model","80012f0a":"### Cabin: Categorical Features - Nominal","fc78f43d":"# Import dataset","45da336b":"## Categorical Features - Ordinal","d21d143f":"# Combine features pipeline","6b8c9bc7":"# Feature Engineering\n\n> Feature engineering is the process of transforming raw data into features that better represent the underlying problem to the predictive models, resulting in improved model accuracy on unseen data.\n\n**Read more:** [Discover Feature Engineering, How to Engineer Features and How to Get Good at It](https:\/\/machinelearningmastery.com\/discover-feature-engineering-how-to-engineer-features-and-how-to-get-good-at-it\/)","7517f27b":"# Building Titanic pipeline","f88fd963":"## Numerical Feature","210f5aa9":"## Combine preprocessing pipeline","ce946e5c":"## Train Validate Split","f2d0b6aa":"# Evaluate","ab7de71c":"# Submission"}}