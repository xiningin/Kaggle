{"cell_type":{"c3910f69":"code","e82e0e14":"code","1693bf5b":"code","7610ee7a":"code","df982a54":"code","8a3993a9":"code","34801cae":"code","c69bb209":"code","46020337":"code","1723e4b8":"code","b3a98202":"code","8a38300b":"code","a26f6a85":"code","419006b0":"code","92661720":"code","e7918cb7":"code","ecb160e2":"code","9604d7e7":"code","356cf98f":"markdown","303c49c2":"markdown","30cb20dd":"markdown","2c7b2256":"markdown","bb5a4148":"markdown","22ab73eb":"markdown","1a587a28":"markdown","db90f52a":"markdown","b4974573":"markdown"},"source":{"c3910f69":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        filename = os.path.join(dirname, filename)\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e82e0e14":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt","1693bf5b":"water = pd.read_csv(filename)","7610ee7a":"water = water.dropna()  \n\nwater['Solids'] = water['Solids']\/100\nplt.figure(figsize=(8, 8), dpi=1000)\nsns.heatmap(water.corr(), annot=True,linewidth=.8, cmap=\"YlGnBu\")","df982a54":"print(\"\\n\u6570\u636e\u7684\u5747\u8861\u60c5\u51b5\uff1a\")\nprint(water.groupby('Potability').count())\nprint(water.columns)","8a3993a9":"#\u6570\u636e\u5747\u8861\u5904\u7406\nzero = water[water['Potability']== 0]\none = water[water['Potability']== 1]\nfrom sklearn.utils import resample\ndf_minority_upsampled = resample(one, replace=True, n_samples = 1200, random_state=123)\n#concatenate\nwater = pd.concat([zero, df_minority_upsampled])\nfrom sklearn.utils import shuffle\nwater = shuffle(water)\n\n#\u5c06\u6570\u636e\u5212\u5206\u4e3a\u8bad\u7ec3\u96c6\u3001\u6d4b\u8bd5\u96c6 \nwater_data = water.iloc[:,:9]\nwater_target = water.iloc[:,9]\nwater_data_train, water_data_test, water_target_train, water_target_test = \\\ntrain_test_split(water_data, water_target, test_size=0.2)\n#print(water_data_train.shape, water_data_test.shape, water_target_train.shape, water_target_test.shape)\n\n#\u6570\u636e\u6807\u51c6\u5316\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\nstdScaler = StandardScaler().fit(water_data_train)\nwater_trainStd = stdScaler.transform(water_data_train)\nwater_testStd = stdScaler.transform(water_data_test)\nwater_Std = stdScaler.transform(water_data)","34801cae":"def ModelBaggingEvaluation(model,n):\n    global dfBagging\n    p_model = model.predict(water_testStd)\n    from sklearn.metrics import accuracy_score\n    print(str(model)[:-2] + '\u8bad\u7ec3\u96c6\u51c6\u786e\u7387\uff1a', accuracy_score(water_target_train, model.predict(water_trainStd)))\n    print(str(model)[:-2] + '\u6d4b\u8bd5\u96c6\u51c6\u786e\u7387\uff1a', accuracy_score(water_target_test, p_model))\n    dfBagging.iloc[0,n] = accuracy_score(water_target_test, p_model)\n\n    from sklearn.metrics import precision_score\n    print(str(model)[:-2] + '\u8bad\u7ec3\u96c6\u7cbe\u786e\u7387\uff1a', precision_score(water_target_train, model.predict(water_trainStd)))\n    print(str(model)[:-2] + '\u6d4b\u8bd5\u96c6\u7cbe\u786e\u7387\uff1a', precision_score(water_target_test, p_model))\n    dfBagging.iloc[1,n] = precision_score(water_target_test, p_model)\n\n    from sklearn.metrics import recall_score, f1_score, cohen_kappa_score\n    print(\"\u53ec\u56de\u7387\uff1a\", recall_score(water_target_test, p_model))\n    print(\"F1\u503c\uff1a\", f1_score(water_target_test, p_model))\n    print(\"cohen_kappa_score\uff1a\", cohen_kappa_score(water_target_test, p_model))\n\n    dfBagging.iloc[2,n] = recall_score(water_target_test,p_model)\n    dfBagging.iloc[3,n] = f1_score(water_target_test,p_model)\n    dfBagging.iloc[4,n] = cohen_kappa_score(water_target_test,p_model)\n\n    #\u8bc4\u4f30\u6a21\u578b\u9884\u6d4b\u7ed3\u679c\n    from sklearn.metrics import classification_report\n    print(\"\u5206\u7c7b\u62a5\u544a\uff1a\\n\", classification_report(water_target_test,p_model))\n\n    scores = cross_val_score(model, water_Std, water_target, cv=10)\n    print(\"%0.4f accuracy with a standard deviation of %0.4f\" % (scores.mean(), scores.std()))\n    dfBagging.iloc[5,n]  = scores.mean()\n    dfBagging.iloc[6,n]  = scores.std()\n    dfBagging = np.round(dfBagging,4)","c69bb209":"df =  pd.DataFrame(np.zeros(56).reshape(7,8),index=['accuracy', 'precision', 'recall', 'f1_score', 'cohen_kappa_score',\n       'cross_val_score mean', 'cross_val_score std'],columns=['SVM', 'LR', 'KNN', 'GNB', 'DT', 'RFC', 'ETC', 'GBC'])\ndf.index.name = \"Model\"\ndf","46020337":"dfBagging =  pd.DataFrame(np.zeros(56).reshape(7,8),index=['accuracy', 'precision', 'recall', 'f1_score', 'cohen_kappa_score',\n       'cross_val_score mean', 'cross_val_score std'],columns=['SVM', 'LR', 'KNN', 'GNB', 'DT', 'RFC', 'ETC', 'GBC'])\ndfBagging.index.name = \"BaggingModel\"\ndfBagging","1723e4b8":"from sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.preprocessing import MinMaxScaler","b3a98202":"#\u5efa\u7acbSVM\u6a21\u578b\nfrom sklearn.svm import SVC\n\nsvm = SVC().fit(water_trainStd, water_target_train)   #\u5728\u8bad\u7ec3\u96c6\u4e0a\u5efa\u7acbSVC\u5206\u7c7b\u6a21\u578b\n#SVC(kernel=\"linear\", C=0.025)\n#SVC(gamma=2, C=1)\nprint(\"\u5efa\u7acbSVM\u6a21\u578b\u4e3a:\\n\", svm)\nModelEvaluation(model=svm,n=0)\nprint(df)","8a38300b":"#\u5efa\u7acb\u9884\u6d4b\u6a21\u578b\nfrom sklearn.linear_model import LogisticRegression\nlog = LogisticRegression().fit(water_trainStd, water_target_train)\nprint(\"\u5efa\u7acbLogisticRegression\u6a21\u578b\u4e3a:\\n\", log)\n\nModelEvaluation(model=log,n=1)\nprint(df)","a26f6a85":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import RandomizedSearchCV, GridSearchCV \n# \u7f51\u683c\u641c\u7d22\u548c\u4ea4\u53c9\u9a8c\u8bc1\\\u968f\u673a\u641c\u7d22\u548c\u4ea4\u53c9\u9a8c\u8bc1\n\nknn = KNeighborsClassifier()\nknn.fit(water_trainStd, water_target_train) #\u8bad\u7ec3\u6a21\u578b\n\nModelEvaluation(model=knn,n=2)\nprint(df)","419006b0":"from sklearn.metrics import classification_report\nfrom sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB().fit(water_trainStd, water_target_train)\nprint(\"\u5efa\u7acbGaussianNB\u6a21\u578b\u4e3a:\\n\", gnb)\nModelEvaluation(model=gnb,n=3)\nprint(df)","92661720":"from sklearn.tree import DecisionTreeClassifier\ndtc = DecisionTreeClassifier()\ndtc.fit(water_trainStd, water_target_train)\n\nprint(\"\u4f7f\u7528\u5efa\u7acbDecisionTreeClassifier\u6a21\u578b\u4e3a:\\n\", dtc)\nModelEvaluation(dtc,4)\nprint(df)","e7918cb7":"from sklearn.ensemble import RandomForestClassifier\nrfc = RandomForestClassifier()\nrfc.fit(water_trainStd, water_target_train)\nprint(\"\u5efa\u7acbRandomForestClassifier\u6a21\u578b\u4e3a:\\n\", rfc)\nModelEvaluation(rfc,5)\nprint(df)","ecb160e2":"#\u6781\u9650\u968f\u673a\u68ee\u6797 Extra Trees Classifier\nfrom sklearn.model_selection import GridSearchCV #\u7f51\u683c\u641c\u7d22\nfrom sklearn.ensemble import ExtraTreesClassifier\netc = ExtraTreesClassifier()\netc.fit(water_trainStd, water_target_train)\nModelEvaluation(etc,6)\nprint(df)","9604d7e7":"from sklearn.ensemble import GradientBoostingClassifier\ngbc = GradientBoostingClassifier().fit(water_trainStd, water_target_train)\nprint(\"\u5efa\u7acbGradientBoostingClassifier\u6a21\u578b\u4e3a:\\n\", gbc)\nModelEvaluation(gbc,7)\n\nprint(df)","356cf98f":"# \u5206\u7c7b\u51b3\u7b56\u6811","303c49c2":"# \u68af\u961f\u63d0\u5347\u5206\u7c7b\u6811","30cb20dd":"# \u903b\u8f91\u65af\u8482\u5206\u7c7b","2c7b2256":"# \u6781\u9650\u968f\u673a\u68ee\u6797 Extra Trees Classifier","bb5a4148":" ETC is great!","22ab73eb":"# \u652f\u6301\u5411\u91cf\u673a\u5206\u7c7b","1a587a28":"# K\u6700\u8fd1\u90bb\u5206\u7c7b","db90f52a":"# \u9ad8\u65af\u6734\u7d20\u8d1d\u53f6\u65af\u5206\u7c7b","b4974573":"# \u968f\u673a\u68ee\u6797\u5206\u7c7b"}}