{"cell_type":{"b78d169e":"code","5628bdcd":"code","c6f0f504":"code","43cc8620":"code","3a6c8eeb":"code","93930a44":"code","2b4a4027":"code","2c63a9f0":"code","b9ad629f":"code","fdd4e9e3":"code","ca1a1f8d":"code","6f1d93f2":"code","f177e824":"code","2dc72fbc":"code","f5a8e3c3":"code","52401d7d":"code","fced4c68":"code","b326adce":"code","cb3bd4dc":"code","377dc970":"code","6a533eca":"code","c846dc3e":"code","817d2eb1":"code","72fffab4":"code","24ca8813":"code","38866abf":"code","b4633a37":"code","d9d3016f":"code","48033182":"code","a4e25164":"code","8eeee817":"code","77f02288":"code","277ec89d":"code","8a60cf3c":"code","73da0f40":"code","bc1cca2d":"code","c722e71d":"code","34167e93":"code","2752d0e6":"code","52cd5c8b":"code","0b473466":"code","fcd866aa":"code","d199427a":"code","057e04f9":"code","bda58cfb":"code","92e9bc3a":"code","216ad81c":"markdown","f045e9e9":"markdown","fcf5be34":"markdown","41b60630":"markdown","de5091bd":"markdown","ce4783a5":"markdown","d7c41e53":"markdown","e4cc0ea9":"markdown","5e74c3a0":"markdown","f071f39f":"markdown","0f739d1f":"markdown","7005d178":"markdown","795a6150":"markdown","e0749d0c":"markdown","82e46eca":"markdown","3e8f3588":"markdown","718ec8bc":"markdown","1aa723eb":"markdown","9b52b472":"markdown","db5c90b1":"markdown","846a28bc":"markdown","032d9d10":"markdown","5fd37fd3":"markdown","974029a8":"markdown","a1e8e3ea":"markdown","44991f3d":"markdown","0cf96580":"markdown","a533c7d9":"markdown","3ca7a82b":"markdown","84bf9351":"markdown","c302c39a":"markdown","b8fa9ae9":"markdown","0776bc6c":"markdown","00c7917d":"markdown","bc752d18":"markdown","0150a581":"markdown","b285c66e":"markdown","7bc9b568":"markdown","eeabf47c":"markdown","1c938009":"markdown","d427a66d":"markdown","27c4f283":"markdown","88fffd2d":"markdown","c8b8445b":"markdown","5b2549c6":"markdown","3c287f48":"markdown","cd2d4ab4":"markdown","c6da3792":"markdown","017e7b48":"markdown","d14ccd4d":"markdown"},"source":{"b78d169e":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","5628bdcd":"dataset = pd.read_csv('..\/input\/mobile-price-classification\/train.csv')\ndataset.head()","c6f0f504":"dataset.isnull().sum()","43cc8620":"dataset.dtypes","3a6c8eeb":"dataset.shape","93930a44":"dataset.describe()","2b4a4027":"value_counts = pd.value_counts(dataset['price_range'])\nvalue_counts.values # converting into numpy array cause other wise we can't plot pie\nlabel  = ['very high', 'high', 'medium', 'low']\ncolors = ['yellow','turquoise','lightblue', 'pink']\nfig1, axarr = plt.subplots()\n\nplt.pie(value_counts.values, autopct = '%0.01f', explode = [0.1,0.1,0.1,0.1], shadow = True, labels = label, colors = colors)\n\naxarr.set_title('balanced or imbalaced?')\nplt.show()\n","2c63a9f0":"sns.jointplot(x = 'ram', y = 'price_range', data = dataset, kind = 'kde', color = 'green')","b9ad629f":"sns.pointplot(y = 'int_memory', x = 'price_range', data = dataset)","fdd4e9e3":"sns.boxplot(x = 'price_range', y = 'battery_power',data = dataset)","ca1a1f8d":"values = dataset['four_g'].value_counts()\nlabel = ['4G-supported', 'Not supported']\ncolor = ['lightgreen', 'lightpink']\nfig, ax1 = plt.subplots()\nplt.pie(values, autopct = '%0.01f', labels = label, startangle = 90, colors  =color, shadow = True)\nax1.set_title('4G supported or not supported?')\nplt.show()","6f1d93f2":"values = dataset['three_g'].value_counts()\nlabel = ['3G supported', 'Not supported']\nfig, ax1 = plt.subplots()\nplt.pie(values, startangle = 70, labels = label, autopct = '%0.01f%%', explode = [0,0.1], shadow  = True)\nax1.set_title('3G supported or not supported?') \nplt.show()","f177e824":"plt.figure(figsize=(10,6))\ndataset['fc'].hist(alpha=0.5,color='blue',label='Front camera')\ndataset['pc'].hist(alpha=0.5,color='red',label='Primary camera')\nplt.legend()\nplt.xlabel('MegaPixels')\n","2dc72fbc":"sns.jointplot(x = 'mobile_wt',y = 'price_range', data = dataset,kind = 'kde', color = 'green')\nplt.show()","f5a8e3c3":"sns.pointplot(y = 'talk_time',x = 'price_range', data = dataset,kind = 'kde', color = 'gold')\nplt.show()","52401d7d":"#sns.pairplot(data = dataset, hue = 'price_range')","fced4c68":"dataset.corr()","b326adce":"plt.figure(figsize = (20,20))\nsns.heatmap(dataset.corr(), annot = True, cmap = 'RdYlGn')","cb3bd4dc":"X  = dataset.iloc[:,:-1]\ny = dataset.iloc[:,-1]","377dc970":"X","6a533eca":"y","c846dc3e":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.20, random_state = 0)","817d2eb1":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","72fffab4":"X_train","24ca8813":"X_test","38866abf":"from sklearn.linear_model import LogisticRegression\nlr = LogisticRegression(multi_class='multinomial',solver = 'sag') # (sag = Stochastic Average Gradient)\nlr.fit(X_train, y_train)\n\n# Predict the test set\ny_pred = lr.predict(X_test)\n\n# evauate the preformance\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\nprint(accuracy_score(y_test, y_pred))","b4633a37":"from sklearn.model_selection import cross_val_score\ncvs = cross_val_score(estimator = lr,X = X_train, y = y_train)\nprint('accuracy of validation set :', cvs.mean())\nprint('accuracy of the training set :', lr.score(X_train,y_train))\nprint('accuracy of the testset :', lr.score(X_test, y_test))","d9d3016f":"from sklearn.tree import DecisionTreeClassifier\ndt = DecisionTreeClassifier(criterion = 'entropy')\ndt.fit(X_train,y_train)\n\n# Predict the test set\ny_pred = dt.predict(X_test)\n\n# evauate the preformance\nfrom sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\nprint(accuracy_score(y_test, y_pred))","48033182":"from sklearn.model_selection import cross_val_score\ncvs = cross_val_score(estimator = dt,X = X_train, y = y_train)\nprint('accuracy of validation set :', cvs.mean())\nprint('accuracy of the training set :', dt.score(X_train,y_train))\nprint('accuracy of the testset :', dt.score(X_test, y_test))","a4e25164":"from sklearn.ensemble import RandomForestClassifier\nrf = RandomForestClassifier(n_estimators = 100, criterion = 'entropy', random_state = 0)\nrf.fit(X_train, y_train)\n\n# Predict the test set\ny_pred = rf.predict(X_test)\n\n# evauate the preformance\nfrom sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\nprint(accuracy_score(y_test, y_pred))","8eeee817":"from sklearn.model_selection import cross_val_score\ncvs = cross_val_score(estimator = rf,X = X_train, y = y_train)\nprint('accuracy of validation set :', cvs.mean())\nprint('accuracy of the training set :', rf.score(X_train,y_train))\nprint('accuracy of the testset :', rf.score(X_test, y_test))","77f02288":"from sklearn.naive_bayes import GaussianNB\nnb = GaussianNB()\nnb.fit(X_train, y_train)\n\n# Predict the test set\ny_pred = nb.predict(X_test)\n\n# evauate the preformance\nfrom sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\nprint(accuracy_score(y_test, y_pred))","277ec89d":"from sklearn.model_selection import cross_val_score\ncvs = cross_val_score(estimator = nb,X = X_train, y = y_train)\nprint('accuracy of validation set :', cvs.mean())\nprint('accuracy of the training set :', nb.score(X_train,y_train))\nprint('accuracy of the testset :', nb.score(X_test, y_test))","8a60cf3c":"parameters ={\n'C' : [1,0.1,0.25,0.5,2,0.75],\n'kernel' : [\"linear\",\"rbf\"],\n'gamma' : [\"auto\",0.01,0.001,0.0001,1],\n'decision_function_shape' : [\"ovo\" ,\"ovr\"]}","73da0f40":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\n\ngrid_search = GridSearchCV(estimator = SVC(),\n                           param_grid = parameters,\n                           scoring = 'accuracy',\n                           cv = 10,\n                           )\ngrid_search = grid_search.fit(X_train, y_train)\nbest_accuracy = grid_search.best_score_\nbest_parameters = grid_search.best_params_\nprint(\"Best Accuracy: {:.2f} %\".format(best_accuracy*100))\nprint(\"Best Parameters:\", best_parameters)","bc1cca2d":"from sklearn.svm import SVC\n\nsvc=SVC(C=2,gamma=\"auto\",decision_function_shape=\"ovo\",kernel=\"linear\",random_state=0)\nsvc.fit(X_train, y_train)\n\n\n# Predict the test set\ny_pred = svc.predict(X_test)\n\n# evaluate the preformance\nfrom sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\nprint(accuracy_score(y_test, y_pred))","c722e71d":"from sklearn.model_selection import cross_val_score\ncvs = cross_val_score(estimator = svc,X = X_train, y = y_train)\nprint('accuracy of validation set :', cvs.mean())\nprint('accuracy of the training set :', svc.score(X_train,y_train))\nprint('accuracy of the testset :', svc.score(X_test, y_test))","34167e93":"plt.figure(figsize = (12,6))\nlabel = ['Logistic Regression', 'Decision Tree', 'Random Forest', 'GaussainNB', 'Support Vector Machine',]\nacc_score = [0.95, 0.85, 0.87, 0.83, 0.95]\n\nplt.bar(label,acc_score, color=['lightblue', 'pink', 'lightgrey','gold', 'cyan'])\nplt.title('Which model is the most accurate?')\nplt.xlabel('')\nplt.ylabel('Accuracy Scores')\nplt.show()","2752d0e6":"test_data = pd.read_csv('..\/input\/mobile-price-classification\/test.csv')\ntest_data.head()","52cd5c8b":"test_df  = test_data.drop('id', axis = 1)","0b473466":"test_df","fcd866aa":"\nsc = StandardScaler()\ntest_df1 = sc.fit_transform(test_df)\n","d199427a":"predicted_price_range = svc.predict(test_df1) ","057e04f9":"predicted_price_range","bda58cfb":"test_df['price_range'] = predicted_price_range","92e9bc3a":"test_df","216ad81c":"#### 2.2 Descriptive Analysis","f045e9e9":"- We have 2000 samples and 21 Features.\n- The last Feature is Target Feature which means we have label dataset.","fcf5be34":"#### 3.3 Feature Scaling","41b60630":"#### 2.3.6 4g supported or not","de5091bd":"- __We have achieved our goal and predicted price ranges for mobile phones in our new dataset__.","ce4783a5":"####  2.3.1 checking balanced or imbalanced dataset","d7c41e53":"## 6. Applying the SVM to Test dataset","e4cc0ea9":"#### Applying SVM with best Parameters","5e74c3a0":"#### 2.1 Checking the datatype","f071f39f":"## 4. Modeling","0f739d1f":"#### 2.3.7 3G support or not","7005d178":"####  2.3.9 Mobile Weight vs price","795a6150":"###  4.3 RandomForest Classifier","e0749d0c":"### 4.4  Gaussian  Naive Bayes Classifier","82e46eca":"#### 6.2 dropping the 'id' Column","3e8f3588":"##### 6.3 Applying Feature scaling to test set","718ec8bc":"- After training our dataset with five different model, we conclude that __SVM__ & __Logistic Regression__ is best model for our dataset. (via the highest accuracy score = 0.95)\n- But here i'm selecting __SVM__ to predict the test dataset. but we can also use Logsitic Regression.","1aa723eb":"- Successfully removed id column from test_data.","9b52b472":"#### Checking the missing values.","db5c90b1":"- Note : We don't have id column in 'train.csv' data so can  drop this columns from our test_dataset.To make the dimension of input dataset same.","846a28bc":"#####  using gridsearch find  the best parameter","032d9d10":"##### In this data:\n- id:ID\n- battery_power:Total energy a battery can store in one time measured in mAh\n- blue:Has bluetooth or not\n- clock_speed:speed at which microprocessor executes instructions\n- dual_sim:Has dual sim support or not\n- fc:Front Camera mega pixels\n- four_g:Has 4G or not\n- int_memory:Internal Memory in Gigabytes\n- m_dep:Mobile Depth in cm\n- mobile_wt:Weight of mobile phone\n- n_cores:Number of cores of processor\n- pc:Primary Camera mega pixels\n- px_height:Pixel Resolution Height\n- px_width:Pixel Resolution Width\n- ram:Random Access Memory in Megabytes\n- sc_h:Screen Height of mobile in cm\n- sc_w:Screen Width of mobile in cm\n- talk_time:longest time that a single battery charge will last when you are\n- three_g:Has 3G or not\n- touch_screen:Has touch screen or not\n- wifi:Has wifi or not\n- __price_range__: This is the target variable with value of __0 (low cost)__, __1 (medium cost)__, __2 (high cost)__ and __3 (very high cost)__","5fd37fd3":"### 4.1 Logistic Regression","974029a8":"#### 2.3.8 No. of Phones vs Camera megapixels of front and primary camera","a1e8e3ea":"#### 2.3.5 Battery Power vs Price range","44991f3d":"#### 2.3.2  Ram affect on price","0cf96580":"#### 6.4 Applying SVM to test_df","a533c7d9":"#### 2.3.11 Finding the realation b\/w the features","3ca7a82b":"#####  3.1 Dependent and indepedent dataset","84bf9351":"### 2. EDA","c302c39a":"####  2.3.4 internal_memoery vs price","b8fa9ae9":"#### 6.1 Loading test data","0776bc6c":"#### 2.3.12 Finding the correlation b\/w the features","00c7917d":"- Seems Like there are no Categorical Feature. All value are numeric dataset. So We can do further process.","bc752d18":"#### 2.3.10 time talk vs price_range","0150a581":"### 2.3 Data Visulization & Analysis","b285c66e":"- In this Project,On the basis of the mobile Specification like Battery power, 3G enabled , wifi ,Bluetooth, Ram etc we are predicting Price range of the mobile. To know more about data https:\/\/www.kaggle.com\/iabhishekofficial\/mobile-price-classification","7bc9b568":"#### 6.5 Adding the predicted price to test_df","eeabf47c":"- In above the pie chart all class have same number of dataset.\n- 0 - 500 (low price)\n- 1 - 500 (medium price)\n- 2 - 500 (high price)\n- 3 - 500 (very high price)","1c938009":"### 4.2 DecisonTreeClassifier","d427a66d":"### 4.5 SVM","27c4f283":"#### About Dataset :","88fffd2d":"### 1. importing libraries & loading dataset","c8b8445b":"# Mobile Phone Price Prediction","5b2549c6":"## 3. Data preparing","3c287f48":"## 5. Conclusion:","cd2d4ab4":"- There are no null values. So now We can check the datatype\n","c6da3792":"- in this dataset there are 4 o\/p varible.\n- its multiclass classification problem.\n\n- 0 - Low\n- 1 - Medium\n- 2 - High\n- 3 - Very High","017e7b48":"#### 3.2 Splitting data into train and test set","d14ccd4d":"- here above,we have predicted price by SVM Model for this __test_df__ dataset. Now we are going to add __predicted_price_range__ to the __test_df__ dataset."}}