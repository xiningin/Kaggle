{"cell_type":{"26389e57":"code","33821bbb":"code","66682831":"code","7c4cf4d7":"code","9a33d86b":"code","cda1d77d":"code","0e4c708f":"code","c74fbf46":"markdown"},"source":{"26389e57":"import numpy as np\nimport pandas as pd","33821bbb":"df_train = pd.read_csv(\"..\/input\/ventilator-pressure-prediction\/train.csv\")\ndf_sub = pd.read_csv(\"..\/input\/ensemble-of-public-submissions\/submission.csv\")","66682831":"unique_pressures = df_train[\"pressure\"].unique()\nsorted_pressures = np.sort(unique_pressures)","7c4cf4d7":"total_pressures_len = len(sorted_pressures)\n\ndef find_nearest(prediction):\n    insert_idx = np.searchsorted(sorted_pressures, prediction)\n    if insert_idx == total_pressures_len:\n        # If the predicted value is bigger than the highest pressure in the train dataset,\n        # return the max value.\n        return sorted_pressures[-1]\n    elif insert_idx == 0:\n        # Same control but for the lower bound.\n        return sorted_pressures[0]\n    lower_val = sorted_pressures[insert_idx - 1]\n    upper_val = sorted_pressures[insert_idx]\n    return lower_val if abs(lower_val - prediction) < abs(upper_val - prediction) else upper_val","9a33d86b":"%%time\ndf_sub[\"pressure\"] = df_sub[\"pressure\"].apply(find_nearest)","cda1d77d":"df_sub","0e4c708f":"df_sub.to_csv(\"submission.csv\", index=False)","c74fbf46":"Since there are discrete number of pressure values (950), we are rounding the predictions to the nearest neighbors of that target values (pressures). "}}