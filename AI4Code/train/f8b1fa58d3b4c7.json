{"cell_type":{"6a6e72dd":"code","05ece8d3":"code","ffe7d86e":"code","b8de30ff":"code","3beb54ab":"code","3ef294f1":"code","82a1b6fa":"code","eafeae53":"code","415402a9":"code","8490556d":"code","0834dcca":"code","920fe749":"code","6672ed46":"code","9107d368":"code","4f21786d":"code","a48ae7a7":"code","c7a2dfcc":"code","4da4c484":"code","3b3eba32":"code","b42e325b":"code","8aaa2f94":"code","175b783c":"code","0305c055":"code","dc176031":"code","87e768cf":"code","ec27efad":"code","3b8f3787":"code","1e741cae":"code","50bce7ae":"code","013c9504":"code","5af38fff":"code","ff9e0de3":"code","feb483bf":"code","3ea44369":"code","a54c4233":"code","2e9263aa":"code","b8fd76e1":"markdown","87aad776":"markdown","0d1af0dd":"markdown","54ff0b39":"markdown","44fe0134":"markdown","09dcba21":"markdown","3142dd73":"markdown"},"source":{"6a6e72dd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","05ece8d3":"import matplotlib.pyplot as plt\nimport seaborn as sns\nfrom statsmodels.tsa.stattools import adfuller\nfrom statsmodels.tsa.arima_model import ARIMA","ffe7d86e":"df = pd.read_csv('..\/input\/magnme-mar-03-2010-jun-01-2021\/MAGN.ME.csv')\ndf.head()","b8de30ff":"len(df)","3beb54ab":"# Convert index to pandas datetime\ndf.index = pd.to_datetime(df.index, format=\"%Y\/%m\/%d\")","3ef294f1":"df_final = df.drop(['Open','Low','Close','Volume'], axis=1)","82a1b6fa":"# Conver to Series to run Dickey-Fuller test\ndf_final = pd.Series(df_final['High'])","eafeae53":"type(df_final)","415402a9":"def check_stationarity(ts_data):\n    \n    # Rolling statistics\n    roll_mean = ts_data.rolling(30).mean()\n    roll_std = ts_data.rolling(5).std()\n    \n    # Plot rolling statistics\n    fig = plt.figure(figsize=(20,10))\n    plt.subplot(211)\n    plt.plot(ts_data, color='black', label='Original Data')\n    plt.plot(roll_mean, color='red', label='Rolling Mean(30 days)')\n    plt.legend()\n    plt.subplot(212)\n    plt.plot(roll_std, color='green', label='Rolling Std Dev(5 days)')\n    plt.legend()\n    \n    # Dickey-Fuller test\n    print('Dickey-Fuller test results\\n')\n    df_test = adfuller(ts_data, regresults=False)\n    test_result = pd.Series(df_test[0:4], index=['Test Statistic','p-value','# of lags','# of obs'])\n    print(test_result)\n    for k,v in df_test[4].items():\n        print('Critical value at %s: %1.5f' %(k,v))\n    ","8490556d":"check_stationarity(df_final)","0834dcca":"# Log transform time series\ndf_final_log = np.log(df_final)\ndf_final_log.head()","920fe749":"# Check stationarity\ndf_final_log.dropna(inplace=True)\ncheck_stationarity(df_final_log)","6672ed46":"# Log Differencing\ndf_final_log_diff = df_final_log - df_final_log.shift()","9107d368":"df_final_log_diff.dropna(inplace=True)\ncheck_stationarity(df_final_log_diff)","4f21786d":"# Differencing\ndf_final_diff = df_final - df_final.shift()","a48ae7a7":"df_final_diff.dropna(inplace=True)\ncheck_stationarity(df_final_diff)","c7a2dfcc":"from statsmodels.tsa.stattools import acf, pacf","4da4c484":"df_acf = acf(df_final_diff)","3b3eba32":"df_pacf = pacf(df_final_diff)","b42e325b":"import statsmodels.api as sm","8aaa2f94":"fig1 = plt.figure(figsize=(20,10))\nax1 = fig1.add_subplot(211)\nfig1 = sm.graphics.tsa.plot_acf(df_acf, ax=ax1)\nax2 = fig1.add_subplot(212)\nfig1 = sm.graphics.tsa.plot_pacf(df_pacf, ax=ax2)","175b783c":"model = ARIMA(df_final_diff, (1,1,0))","0305c055":"fit_model = model.fit(full_output=True)","dc176031":"predictions = model.predict(fit_model.params, start=1760, end=1769)","87e768cf":"fit_model.summary()","ec27efad":"predictions","3b8f3787":"fit_model.predict(start=1760, end=1769)","1e741cae":"pred_model_diff = pd.Series(fit_model.fittedvalues, copy=True)\npred_model_diff.head()","50bce7ae":"# Calculate cummulative sum of the fitted values (cummulative sum of differences)\npred_model_diff_cumsum = pred_model_diff.cumsum()\npred_model_diff_cumsum.head()","013c9504":"# Element-wise addition back to original time series\ndf_final_trans = df_final.add(pred_model_diff_cumsum, fill_value=0)\n# Last 5 rows of fitted values\ndf_final_trans.tail()","5af38fff":"# Last 5 rows of original time series\ndf_final.tail()","ff9e0de3":"# Plot of orignal data and fitted values\nplt.figure(figsize=(20,10))\nplt.plot(df_final, color='black', label='Original data')\nplt.plot(df_final_trans, color='red', label='Fitted Values')\nplt.legend()","feb483bf":"x = df_final.values\ny = df_final_trans.values","3ea44369":"# Trend of error\nplt.figure(figsize=(20,8))\nplt.plot((x - y), color='red', label='Delta')\nplt.axhline((x-y).mean(), color='black', label='Delta avg line')\nplt.legend()","a54c4233":"final_pred = []\nfor i in predictions:\n    t = df_final[-1] + i\n    final_pred.append(t)","2e9263aa":"final_pred = pd.Series(final_pred)\nfinal_pred","b8fd76e1":"### Simple Differencing Transformation","87aad776":"### Log Differencing Transformation","0d1af0dd":"## Stationarity Check","54ff0b39":"### Back-transform data to original scale","44fe0134":"### Average error appears to be around $0.35 per share","09dcba21":"### Log Transformation","3142dd73":"### Input from user to select company for ARIMA model"}}