{"cell_type":{"05ad6d0a":"code","144c6226":"code","c25caf67":"code","4710e3c6":"code","0327ad86":"code","49dd490d":"code","0cf989eb":"code","f328e799":"code","510627a8":"code","b0f7f54d":"code","bdacd81a":"code","c310bb39":"markdown","a1a8cc69":"markdown","104152d8":"markdown","d16c5116":"markdown"},"source":{"05ad6d0a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\n\nINPUT_PATH = '..\/input\/flowers-recognition\/flowers'\nRANDOM_STATE = 42\n\n\ndata = []\nfor type_name in os.listdir(INPUT_PATH):\n    for image in os.listdir(os.path.join(INPUT_PATH,type_name)):\n        data.append([image,type_name])","144c6226":"import random\nrandom.seed(RANDOM_STATE)\nimport tensorflow as tf\ntf.random.set_seed(RANDOM_STATE)","c25caf67":"dataset = pd.DataFrame()\ndataset['image'] = [i[0] for i in data]\ndataset['label'] = [i[1] for i in data]","4710e3c6":"dataset.head(10)","0327ad86":"!pip install imshowtools","49dd490d":"from PIL import Image\nimport matplotlib.pyplot as plt\nfrom imshowtools import imshow\n\ndef imgname_to_path(imgname:str,imglabel:str):\n    '''Converts image path to it's absolute path'''\n    \n    return os.path.join(INPUT_PATH,imglabel,imgname)\n\n\nimport matplotlib.pyplot as plt\nplt.rcParams['axes.labelsize'] = 32\nplt.rcParams['axes.titlesize'] = 32\nimages = []\ntitles = []\nfor imglabel in dataset['label'].unique():\n    labelset = dataset[dataset['label'] == imglabel]\n    imgname = labelset.iloc[random.randrange(len(labelset))]['image']\n    img = np.array(Image.open(imgname_to_path(imgname,imglabel)))\n    images.append(img)\n    titles.append(imglabel)\nimshow(*images,title=titles,size=(16,8),padding=False)","0cf989eb":"from sklearn.preprocessing import LabelEncoder\n\nencoder = LabelEncoder()\nencoder.fit(dataset['label'])\ndataset['label'] = encoder.transform(dataset['label'])","f328e799":"import tensorflow as tf\nfrom tensorflow.keras.utils import Sequence\n\nclass Dataset(Sequence):\n    def __init__(self,ds,batch_size=8):\n        self.ds = np.array(ds)\n        self.batch_size=batch_size\n    def __len__(self):\n        return len(self.ds)\/\/self.batch_size\n    \n    def get_ds(self,idx):\n        '''Returns data and label at idx'''\n        imgname = self.ds[idx,0]\n        imglabel = self.ds[idx,1]\n        imglabel_name = encoder.inverse_transform([imglabel])[0]\n        img = np.array(Image.open(imgname_to_path(imgname,imglabel_name)).resize((128,128))).astype('float64')\n        return np.array([img]),np.array([1 if(i==imglabel) else 0 for i in range(5)])\n    \n    def __getitem__(self,idx):\n        '''Returns batched index'''\n        indicies = list(range(idx*self.batch_size,(idx+1)*self.batch_size))\n        ds = [self.get_ds(i) for i in indicies]\n        return np.vstack([i[0] for i in ds]),np.vstack([i[1] for i in ds])\n    \n    def on_epoch_end(self):\n        np.random.shuffle(self.ds)","510627a8":"from sklearn.model_selection import train_test_split\ntrain_set,test_set = train_test_split(dataset,test_size=0.1,random_state=RANDOM_STATE)","b0f7f54d":"train_ds,test_ds = Dataset(train_set),Dataset(test_set)","bdacd81a":"from tensorflow import keras\nimport tensorflow_addons as tfa\nfrom tensorflow.keras import layers\nfrom tensorflow.keras.callbacks import ReduceLROnPlateau,EarlyStopping,ModelCheckpoint\n\ndef get_model():\n    eff_net = tf.keras.applications.efficientnet.EfficientNetB7(\n        include_top=False, weights='imagenet', input_tensor=None,\n        input_shape=(128,128,3), pooling='max'\n    )\n    model = keras.Sequential([\n        layers.Input(shape=(128,128,3)),\n        eff_net,\n        layers.Dense(64,activation='relu'),\n        layers.Dense(5,activation='softmax')\n    ])\n    model.compile(optimizer=tfa.optimizers.RectifiedAdam(learning_rate=1e-4),loss='categorical_crossentropy',metrics=['accuracy',tfa.metrics.F1Score(num_classes=5)])\n    return model\nmodel = get_model()\nhist = model.fit(train_ds,validation_data = test_ds,epochs=10,callbacks=[\n    EarlyStopping(monitor='val_loss', patience=10,restore_best_weights=True),\n    ReduceLROnPlateau(monitor='val_loss', factor=0.2,patience=3, min_lr=0.0005)])","c310bb39":"# Showing random image of each type","a1a8cc69":"# Setting seeds","104152d8":"# Creating and training a model","d16c5116":"# Creating dataset"}}