{"cell_type":{"049ba7ee":"code","554517d5":"code","884ec319":"code","b81318bf":"code","f2556dcd":"code","9a3b7937":"code","fb9d4202":"code","7bf9d65b":"code","25b122a4":"code","18b616f2":"code","347df3d9":"code","1c622ccb":"code","b57d036a":"code","63143f88":"code","5ee8f705":"code","b181ae55":"code","0e5081fb":"code","a9285c54":"code","2a321a88":"code","e85331d4":"code","a3696c1e":"code","c49b1aec":"code","d1ffc1c6":"code","7f3144ba":"code","26149d01":"code","7473a56b":"code","4fe7a30c":"code","da1e2a8b":"code","2f967f30":"code","e121ef86":"code","7108ccca":"code","1768dd19":"markdown","fc0d9aa5":"markdown","39e38bfb":"markdown","79c4a74d":"markdown","69bcb352":"markdown","2c2b1153":"markdown","f41982fe":"markdown","981aefe6":"markdown","375cbf2b":"markdown","24f2bd35":"markdown","89ddf9db":"markdown","a5fa7caa":"markdown","e535cca3":"markdown"},"source":{"049ba7ee":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","554517d5":"\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.metrics import classification_report, accuracy_score, confusion_matrix, precision_score, recall_score\nfrom sklearn.ensemble import ExtraTreesClassifier\nimport warnings\nwarnings.filterwarnings('ignore')","884ec319":"pip install openpyxl","b81318bf":"data = pd.read_excel(\"..\/input\/covid19\/dataset.xlsx\", engine=\"openpyxl\")\ndata","f2556dcd":"data.columns = [x.lower().strip().replace(' ','_') for x in data.columns]","9a3b7937":"def miss_data(x):\n    total = x.isnull().sum()\n    percent = (x.isnull().sum()\/x.isnull().count()*100)\n    tt = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\n    types = []\n    for col in data.columns:\n        dtype = str(x[col].dtype)\n        types.append(dtype)\n    tt['Types'] = types\n    return(np.transpose(tt))","fb9d4202":"for x in data.columns:\n    if data[x].dtype=='float16' or  data[x].dtype=='float32' or  data[x].dtype=='float64':\n        data[x].fillna(data[x].mean())\n\ndata = data.fillna(data.median())\n\nfor y in data.columns:\n    if data[y].dtype=='object': \n        lbl = LabelEncoder()\n        lbl.fit(list(data[y].values))\n        data[y] = lbl.transform(list(data[y].values))","7bf9d65b":"threshold = 0.92\n\ncorr_matrix = data.corr().abs()\n\n\nupper = corr_matrix.where(np.triu(np.ones(corr_matrix.shape), k=1).astype(np.bool))\nupper.head()","25b122a4":"to_drop = [column for column in upper.columns if any(upper[column] > threshold)]\n\nprint('There are %d columns to remove.' % (len(to_drop)))\ndataset = data.drop(columns = to_drop)\n\n\ndata_missing = (data.isnull().sum() \/ len(data)).sort_values(ascending = False)\ndata_missing.head()","18b616f2":"data_missing_ = data_missing.index[data_missing > 0.85]\nall_missing = list(set(data_missing_))\n\n\ndataset = dataset.drop(columns = all_missing)","347df3d9":"dataset.info()","1c622ccb":"cols = [x for x in dataset.columns if x not in ['patient_id','sars-cov-2_exam_result', 'patient_addmited_to_regular_ward_(1=yes,_0=no)', 'patient_addmited_to_semi-intensive_unit_(1=yes,_0=no)', 'patient_addmited_to_intensive_care_unit_(1=yes,_0=no)']]\nnew_df = dataset[cols]\nnew_df","b57d036a":"X = new_df\ny = dataset['sars-cov-2_exam_result']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.33, random_state=101)","63143f88":"model = ExtraTreesClassifier()\nmodel.fit(X,y)\nprint(model.feature_importances_) #use inbuilt class feature_importances of tree based classifiers\n#plot graph of feature importances for better visualization\nfeat_importances = pd.Series(model.feature_importances_, index=X.columns)\nfeat_importances.nlargest(10).plot(kind='barh')\nplt.show()","5ee8f705":"feat_head = feat_importances.head(10)\nfeat_head.index","b181ae55":"newdf = new_df[feat_head.index]\n\nX = newdf\ny = dataset['sars-cov-2_exam_result']\nX","0e5081fb":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.33, random_state = 101)","a9285c54":"accuracy_lst =[]\n\ndef model_assess(model, name='Default'):\n    model.fit(X_train, y_train)\n    prds = model.predict(X_test)\n    model_acc = accuracy_score(y_test, prds)\n    accuracy_lst.append(100*model_acc)\n    print('---', name, '---', '\\n',\n          confusion_matrix(y_test, prds), '\\n',\n          'Accuracy:', (accuracy_score(y_test, prds)), '\\n',\n          'Classification Report:', (classification_report(y_test, prds)))","2a321a88":"# Logistic Regression\nlg = LogisticRegression()\nmodel_assess(lg, 'Logistic Regression')\nlg.fit(X_train,y_train)","e85331d4":"# SVM\nsvm = SVC()\nmodel_assess(svm, 'SVM')\nsvm.fit(X_train,y_train)","a3696c1e":"cross_acc = []\n\nca_lg = cross_val_score(lg, X_train, y_train, scoring='accuracy')\nca_lg = ca_lg.mean()\ncross_acc.append(100*ca_lg)\n\n\n\nca_svm = cross_val_score(svm, X_train, y_train, scoring='accuracy')\nca_svm = ca_svm.mean()\ncross_acc.append(100*ca_svm)\n\n","c49b1aec":"lg.predict(X_test)","d1ffc1c6":"svm.predict(X_test)","7f3144ba":"covid_positive = dataset[dataset['sars-cov-2_exam_result'] == 1]\n\nadmission = []  \n\ndef multiclass_target(row):\n    check = 0\n    check += 1 if (row['patient_addmited_to_regular_ward_(1=yes,_0=no)'] == 1) else 0\n    check += 2 if (row['patient_addmited_to_semi-intensive_unit_(1=yes,_0=no)'] == 1) else 0\n    check += 2 if (row['patient_addmited_to_intensive_care_unit_(1=yes,_0=no)'] == 1) else 0\n    row['target'] = check\n    return row\n\ndata_adm = covid_positive.apply(multiclass_target, axis=1)\ndata_adm.rename(columns = {'mean_corpuscular_hemoglobin_concentration': 'mchc','mean_corpuscular_hemoglobin_(mch)' : 'mch'},inplace= True)\ndata_adm","26149d01":"admit = data_adm[['patient_age_quantile','hematocrit','platelets',  'proteina_c_reativa_mg\/dl', 'red_blood_cells', 'eosinophils','leukocytes', 'monocytes','influenza_b,_rapid_test'] ]\nX=admit\ny = data_adm['target']\n\nadmit\n","7473a56b":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.1)","4fe7a30c":"acc_lst = []\n\ndef model_assess(model, name='Default'):\n    model.fit(X_train, y_train)\n    prds = model.predict(X_test)\n    model_acc = accuracy_score(y_test, prds)\n    acc_lst.append(100*model_acc)\n    print('---', name, '---', '\\n',\n          confusion_matrix(y_test, prds), '\\n',\n          'Accuracy:', (accuracy_score(y_test, prds)), '\\n',\n          'Classification Report:', (classification_report(y_test, prds)))","da1e2a8b":"lg = LogisticRegression()\nmodel_assess(lg, 'Logistic Regression')\nlg.fit(X_train, y_train)","2f967f30":"lg.predict([[16, 0.05, -0.12, -0.4, 0.0132, -0.32, -0.21,-0.1,0] ])","e121ef86":"lg.predict(X_test)","7108ccca":"final_csv_data = data_adm.to_csv('result.csv', index = False)\n#print('\\nCSV String:\\n', final_csv_data)","1768dd19":"# Covid prediction from blood data sample","fc0d9aa5":"### Feature Engineering","39e38bfb":"### Drop missing columns","79c4a74d":"### Data Split","69bcb352":"#### The above trained Logistic Regression Model is 94.64% accurate","2c2b1153":"### Feature Importance using Extra Trees Classifier","f41982fe":"### Logistic Regression and SVM","981aefe6":"### Dataset with the most important factors having impact on result","375cbf2b":"## ML Model to give confirmed covid result without swab collection based on blood sample","24f2bd35":"#### Above trained SVM and LR models are 90.5% accurate","89ddf9db":"## Admission to ward model","a5fa7caa":"#### Based on the traning data, we predict whether patient needs to be admitted to general ward(1), semi-ICU(2) or ICU(3) or no admission is needed(0)","e535cca3":"### Import Libraries and Data"}}