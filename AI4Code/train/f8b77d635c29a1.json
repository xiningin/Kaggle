{"cell_type":{"ee244bad":"code","b26a8c11":"code","a5f7dabe":"code","27ea6445":"code","6d873820":"code","595651eb":"code","3b81d828":"markdown","188e7712":"markdown","466b5ef5":"markdown","1c3ff6af":"markdown","af2cdd0f":"markdown","4c8951f5":"markdown"},"source":{"ee244bad":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfrom time import time\nimport matplotlib.pyplot as plt\n\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Conv2D, MaxPooling2D, Flatten\nfrom keras.optimizers import SGD\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\n# print(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","b26a8c11":"# Read the csv files into DataFrames. Remove nrows argument to read full set\ndf0 = pd.read_csv('..\/input\/train.csv', sep=',')\ndg0 = pd.read_csv('..\/input\/test.csv', sep=',')\n\n# Size of the training and testing examples\nm0 = df0.shape[0]\nm1 = dg0.shape[0]\n\n# Extract columns from df0 to form training set, X_trn and y_trn\nX_trn = df0.drop('label', axis=1)\nydigi = df0['label']\n\n# The whole of dg0 is testing set, X_tst\nX_tst = np.asarray(dg0.copy())","a5f7dabe":"# number of features\nn = X_trn.shape[1]\n\n# number of units in the (single) hidden layer\nl2 = 600\n\n# number of digits to identify\nv = 10\n\n# Turn each value ydigi into a one-dimensional vector of length v\ny_trn = np.zeros((m0,v))\nfor i,yt in enumerate(ydigi):\n    y_trn[i,yt] = 1\n\n# Convert X_trn from a DataFrame to a numpy array\nX_trn = np.asarray(X_trn)\n\n# Convert training set from 1D array into 2D images to be fed to Conv2D\nX_urn = np.zeros((m0, 28, 28, 1))\nfor i in range(m0):\n    X_urn[i,:,:,0] = X_trn[i,:].reshape(28,28)\n\n# Convert testing set from  1D array into 2D images to be used for prediction\nX_ust = np.zeros((m1, 28, 28, 1))\nfor i in range(m1):\n    X_ust[i,:,:,0] = X_tst[i,:].reshape(28,28)","27ea6445":"ledom = Sequential([\n            Conv2D(32, (3,3), input_shape=(28,28,1), activation='relu'), \n            MaxPooling2D(pool_size=(2,2)), \n            Flatten(), \n            Dense(100, activation='sigmoid'),\n            Dense(10, activation='softmax')\n            ])\nledom.compile(SGD(lr=0.03), loss='categorical_crossentropy', metrics=['accuracy'])\n\nhst = ledom.fit(X_urn, y_trn, batch_size=32, epochs=100, verbose=1, validation_split=0.20)","6d873820":"plt.figure(figsize=(12,5))\nplt.subplot(1, 2, 1)\nplt.plot(hst.history['acc']);  plt.plot(hst.history['val_acc']);  plt.legend(['train','validation']);\nplt.xlabel('epochs');  plt.ylabel('accuracy');  plt.title('model accuracy')\n\nplt.subplot(1,2,2)\nplt.plot(hst.history['loss']);  plt.plot(hst.history['val_loss']);  plt.legend(['train','validation']);\nplt.xlabel('epochs');  plt.ylabel('loss');  plt.title('model loss')\n\nplt.show()","595651eb":"# Predict the classes for test set\ny_prd = ledom.predict(X_ust)\n\noutdig = [np.argmax(c0) for c0 in y_prd]\n\noutcsv = pd.DataFrame({'ImageId':np.arange(m1)+1, 'Label':outdig})\noutcsv.to_csv('output.csv', index=False)","3b81d828":"### Create plots to show progression of accuracy and loss with epochs","188e7712":"### Keras Sequential\nWe use 1 convolutional layer and 2 Dense layers","466b5ef5":"## **Neural Network to recognize hand-written digits**\n## Implementing a neural network using Keras.","1c3ff6af":"### Read and prepare the dataset.","af2cdd0f":"### Predict and write the output","4c8951f5":"### Get data into proper format and initialize the neural network parameters"}}