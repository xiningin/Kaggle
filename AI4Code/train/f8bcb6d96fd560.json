{"cell_type":{"4fe3a17a":"code","cfc6f9eb":"code","635920b0":"code","ec62af13":"code","60584027":"code","4143f136":"code","f5b7cc4e":"code","8efb921d":"code","51acb1ec":"code","a95a8f4c":"code","53a8b029":"code","79b9a4d4":"code","075a6f7d":"code","fc0cdccd":"code","c4990721":"code","a77dacd7":"code","2b3a0204":"code","855930d0":"markdown","5903533c":"markdown","89f37123":"markdown"},"source":{"4fe3a17a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","cfc6f9eb":"#read data set\ndf = pd.read_csv(\"..\/input\/train_and_test2.csv\")\n","635920b0":"df.info()\ndf.head()","ec62af13":"df.drop([\"zero\",\"zero.1\",\"zero.2\",\"zero.3\",\"zero.4\",\"zero.5\",\"zero.6\",\"zero.7\",\"zero.8\",\"zero.9\",\"zero.10\",\"zero.11\",\"zero.12\",\"zero.13\",\"zero.14\",\"zero.15\",\"zero.16\",\"zero.17\",\"zero.18\"],axis=1,inplace = True)","60584027":"df.drop([\"Passengerid\"],axis=1,inplace = True)","4143f136":"\ndf = df.rename(columns={\"2urvived\":\"Survived\"})\ndf.tail()","f5b7cc4e":"df = df.astype(float)\ndf.Embarked.value_counts( dropna=False)\ndf.dropna(axis=0,inplace=True)","8efb921d":"x_data = df.drop([\"Survived\"],axis=1)\ny = df.Survived.values","51acb1ec":"x = (x_data-np.min(x_data))\/(np.max(x_data)-np.min(x_data)).values","a95a8f4c":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.20, random_state=42)\nx_train =x_train.T\nx_test = x_test.T\ny_train = y_train.T\ny_test = y_test.T\n\nprint(\"x_train\",x_train.shape,\"x_test:\",x_test.shape,\"y_train:\",y_train.shape,\"y_test:\",y_test.shape)","53a8b029":"x_train.shape[0]","79b9a4d4":"def initialize_weight_and_bias(dimension):\n    w = np.full((dimension,1),0.01)\n    b = 0.0\n    return w,b","075a6f7d":"#sigmoid function\n# z = np.dot (w.T,x)+b\ndef sigmoid(z):\n    y_head = 1\/(1+np.exp(-z))\n    return y_head","fc0cdccd":"# definition of foward and backward procedures\ndef foward_and_backward_propagation(w,b,x_train,y_train):\n    z = np.dot(w.T,x_train)+b\n    y_head = sigmoid(z)\n    loss = -y_train*np.log(y_head)-(1-y_train)*np.log(1-y_head)\n    cost = np.sum(loss)\/x_train.shape[1]\n    #backward\n    derivative_weight = (np.dot(x_train,((y_head-y_train).T)))\/x_train.shape[1]\n    derivative_bias = np.sum(y_head-y_train)\/x_train.shape[1]\n    gradients = {\"derivative_weight\":derivative_weight,\"derivative_bias\":derivative_bias}\n    return cost,gradients","c4990721":"def update(w,b,x_train,y_train,learning_rate,number_iterations):\n    cost_list = []\n    cost_list2 = []\n    index = []\n    \n    for i in range(number_iterations):\n        cost,gradients = foward_and_backward_propagation(w,b,x_train,y_train)\n        cost_list.append(cost)\n        w = w-learning_rate*gradients[\"derivative_weight\"]\n        b = b-learning_rate*gradients[\"derivative_bias\"]\n        \n        if i%10 ==0:\n            cost_list2.append(cost)\n            index.append(i)\n            print(\"cost after iteration %i:%f\"%(i,cost))\n            \n    parameters = {\"weights\": w, \"bias\": b}\n    plt.plot(index,cost_list2)\n    plt.xticks(index,rotation = \"vertical\")\n    plt.xlabel(\"iteration\")\n    plt.ylabel(\"cost\")        \n    plt.show()\n    return parameters,cost_list,gradients\n    \n    ","a77dacd7":"def predict(w,b,x_test):\n    z = sigmoid(np.dot(w.T,x_test))\n    Y_prediction = np.zeros((1,x_test.shape[1]))\n    \n    for i in range(z.shape[1]):\n        if z[0,i] <= 0.5:\n            Y_prediction[0,i] =0\n        else:\n            Y_prediction[0,i] = 1\n    return Y_prediction","2b3a0204":"def logistic_regression(x_train,y_train,x_test,y_test,learning_rate, number_iterations):\n    \n    dimension = x_train.shape[0]\n    w,b = initialize_weight_and_bias(dimension)\n    \n    parameters,gradients, cost_list = update(w,b,x_train,y_train,learning_rate,number_iterations)\n    \n    y_prediction_test = predict(parameters[\"weights\"],parameters[\"bias\"],x_test)\n    \n    print(\"test accuracy:{} %\".format(100-np.mean(np.abs(y_prediction_test-y_test))*100))\n\nlogistic_regression(x_train, y_train, x_test, y_test, learning_rate=1, number_iterations = 1000)","855930d0":"Lets make a normalization for our x data","5903533c":"Lets make a quick look to our dataset","89f37123":"Lets initialize parameters"}}