{"cell_type":{"1dd20d67":"code","7232af4f":"code","dce916c0":"code","26b2f7cb":"code","f5f5fbf9":"code","34fdd6b6":"code","bd939855":"code","7ff6f51c":"code","44a9e023":"code","f940b708":"code","05c8b7a8":"code","5ed86c25":"code","186485a0":"markdown","c81655b8":"markdown"},"source":{"1dd20d67":"### Add the load_kaggle utility script using the \"File menu\" above\nfrom load_kaggle import load_kaggle","7232af4f":"train, test, subm = load_kaggle()\nprint(train.shape,test.shape, '\\n', subm.head(2))","dce916c0":"train.head()","26b2f7cb":"!pip install deep_autoviml --upgrade","f5f5fbf9":"from deep_autoviml import deep_autoviml as deepauto","34fdd6b6":"### we are going to choose a target since deep_autoviml will use that\ntarget = 'Survived'","bd939855":"######   D E F A U L T S    S E T T I N G S   F O R   D E E P    A U T O  V I M L ###\nkeras_model_type =  \"auto\" ## always try \"fast\" first, then \"fast2\", \"auto\", etc.\n### always set early_stopping to True first and then change it to False\n#### You always need 15 max_trials to get something decent #####\n#### always set tuner to \"storm\" and then \"optuna\". \n### NLP char limit kicks off NLP processing. Feature Cross later.\nmodel_options = {'nlp_char_limit':50, 'cat_feat_cross_flag':False,\n                 'max_trials': 30, \"tuner\": \"storm\"}\nkeras_options = {\"patience\":10, 'class_weight': True, 'early_stopping': True, \n                 'lr_scheduler': 'onecycle'}\nproject_name = 'Titanic'\nsave_model_flag = False","7ff6f51c":"### Always Set GPU on in Colab\/Kaggle Notebooks - that way it will run much faster!\n### You can feed either a dataframe or a filename to deep_autoviml. \n### In this case, since we modified the target, we are going to feed the train dataframe\nmodel, dicti = deepauto.fit(train, target, keras_model_type=keras_model_type, project_name=project_name,\n                save_model_flag=save_model_flag, model_options=model_options, \n                            keras_options=keras_options, use_my_model='', verbose=1)","44a9e023":"predictions = deepauto.predict(model, project_name=project_name, test_dataset=test,\n                                 keras_model_type=keras_model_type, \n                                 cat_vocab_dict=dicti)","f940b708":"y_probas = predictions[0]\ny_preds = predictions[1]","05c8b7a8":"subm[target] = y_preds\nsubm.head()","5ed86c25":"subm.to_csv('submission.csv',index=False)","186485a0":"### If multi-label, collect multiple binary predictions for each class and save it\ny_preds = np.array([])\nfor each_t in range(4):\n    if each_t == 0:\n        y_preds = predictions[each_t][:,1]\n    else:\n        y_preds = np.c_[y_preds, predictions[each_t][:,1]]\ny_preds","c81655b8":"# With just 2 lines of code get 86.8 ROC_AUC in Titanic\nUsing a deep learning library called deep_autoviml, your hackathons can be faster"}}