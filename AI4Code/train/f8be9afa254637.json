{"cell_type":{"9fe7b1e0":"code","8ba360de":"code","68ac7fed":"code","9609fecb":"code","a334a523":"code","dae1b2d4":"code","f7982918":"code","a3283199":"code","cbae4dbd":"code","618a7ed7":"code","2c806afe":"code","d88462fe":"code","e7b5b2f7":"code","75827972":"code","1175e5df":"markdown"},"source":{"9fe7b1e0":"import sys\nsys.path.append(\"..\/input\/tez-lib\/\")\nsys.path.append(\"..\/input\/timmmaster\/\")","8ba360de":"import os\nimport random\nimport tez\nimport albumentations\nimport pandas as pd\nimport cv2\nimport numpy as np\nimport timm\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport torchvision.transforms as T\nfrom torchvision.io import read_image\nfrom sklearn import metrics\nimport torch\nfrom tez.callbacks import EarlyStopping\nfrom tqdm import tqdm\nfrom PIL import Image\nfrom sklearn.preprocessing import StandardScaler\nimport math","68ac7fed":"def seed_everything(seed=2021):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed(seed)\n    torch.backends.cudnn.deterministic = True\n    \nseed_everything()","9609fecb":"class args:\n    batch_size = 8\n    image_size = 384\n    coeff = 0.2\n    epochs = 20\n    learning_rate = 1e-4\n    fold = 0","a334a523":"class PawpularDataset:\n    def __init__(self, image_paths, dense_features, targets, augmentations):\n        self.image_paths = image_paths\n        self.dense_features = dense_features\n        self.targets = targets\n        self.augmentations = augmentations\n        \n    def __len__(self):\n        return len(self.image_paths)\n    \n    def __getitem__(self, item):\n        image = cv2.imread(self.image_paths[item])\n        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n        \n        if self.augmentations is not None:\n            augmented = self.augmentations(image=image)\n            image = augmented[\"image\"]\n            \n        image = np.transpose(image, (2, 0, 1)).astype(np.float32)\n        \n        features = self.dense_features[item, :]\n        targets = self.targets[item] \/ 100.\n        \n        return {\n            \"image\": torch.tensor(image, dtype=torch.float),\n            \"features\": torch.tensor(features, dtype=torch.float),\n            \"targets\": torch.tensor(targets, dtype=torch.float),\n        }","dae1b2d4":"class ArcFaceLoss(nn.modules.Module):\n    def __init__(self, s=30.0, m=0.5):\n        super().__init__()\n        self.crit = nn.BCEWithLogitsLoss()\n        self.s = s\n        self.cos_m = math.cos(m)\n        self.sin_m = math.sin(m)\n        self.th = math.cos(math.pi - m)\n        self.mm = math.sin(math.pi - m) * m\n\n    def forward(self, logits, labels):\n        logits = logits.float()\n        cosine = logits\n        sine = torch.sqrt(1.0 - torch.pow(cosine, 2))\n        phi = cosine * self.cos_m - sine * self.sin_m\n        phi = torch.where(cosine > self.th, phi, cosine - self.mm)\n\n        output = (labels * phi) + ((1.0 - labels) * cosine)\n        output *= self.s\n        loss = self.crit(output, labels)\n        return loss \/ 2\n    \nclass ArcMarginProduct(nn.Module):\n    def __init__(self, in_features, out_features):\n        super().__init__()\n        self.weight = nn.Parameter(torch.FloatTensor(out_features, in_features))\n        self.reset_parameters()\n\n    def reset_parameters(self):\n        stdv = 1. \/ math.sqrt(self.weight.size(1))\n        self.weight.data.uniform_(-stdv, stdv)\n\n    def forward(self, features):\n        cosine = F.linear(F.normalize(features), F.normalize(self.weight))\n        return cosine","f7982918":"class PawpularModel(tez.Model):\n    def __init__(self):\n        super().__init__()\n\n        self.model = timm.create_model(\"swin_large_patch4_window12_384_in22k\", pretrained=True, in_chans=3)\n        in_features = self.model.head.in_features\n        self.model.head = nn.Identity()\n        self.neck = nn.Sequential(\n            nn.BatchNorm1d(in_features),\n            nn.Linear(in_features, 512, bias=False),\n            nn.ReLU(inplace=True),\n            nn.BatchNorm1d(512),\n            nn.Linear(512, 512, bias=False),\n            nn.BatchNorm1d(512)\n        )\n        self.dropout = nn.Dropout(0.1)\n        self.out = nn.Sequential(\n            nn.Linear(in_features, 512, bias=False),\n            nn.BatchNorm1d(512),\n            nn.ReLU(inplace=True),\n            nn.Linear(512, 1)\n        )\n        self.arc_margin_product = ArcMarginProduct(512, 1)\n        \n        self.step_scheduler_after = \"epoch\"\n\n    def monitor_metrics(self, outputs, targets):\n        outputs = outputs.cpu().detach().numpy()\n        targets = targets.cpu().detach().numpy()\n        rmse = metrics.mean_squared_error(targets, outputs, squared=False)\n        return {\"rmse\": rmse}\n\n    def fetch_scheduler(self):\n        sch = torch.optim.lr_scheduler.CosineAnnealingWarmRestarts(\n            self.optimizer, T_0=10, T_mult=1, eta_min=1e-6, last_epoch=-1\n        )\n        return sch\n\n    def fetch_optimizer(self):\n        opt = torch.optim.Adam(self.parameters(), lr=args.learning_rate)\n        return opt\n\n    def forward(self, image, features, targets=None):\n\n        x = self.model(image)\n        x = self.dropout(x)\n        x_ = self.neck(x)\n        x_ = self.arc_margin_product(x_)\n        x = self.out(x)\n        \n        if targets is not None:\n            loss_classification = nn.BCEWithLogitsLoss()(x, targets.view(-1, 1))\n            loss_metric = ArcFaceLoss()(x_, targets.view(-1, 1))\n            coeff = args.coeff\n            loss =  loss_classification * (1 - coeff) + loss_metric * coeff\n            \n            metrics = self.monitor_metrics(torch.sigmoid(x) * 100, targets * 100)\n            return x, loss, metrics\n        return x, 0, {}","a3283199":"train_aug = albumentations.Compose(\n    [\n        albumentations.Resize(args.image_size, args.image_size, p=1),\n        albumentations.RandomResizedCrop(args.image_size, args.image_size, p=0.5),\n        albumentations.HorizontalFlip(p=0.5),\n        albumentations.VerticalFlip(p=0.5),\n        albumentations.Normalize(\n            mean=[0.485, 0.456, 0.406],\n            std=[0.229, 0.224, 0.225],\n            max_pixel_value=255.0,\n            p=1.0,\n        ),\n    ],\n    p=1.0,\n)\n\nvalid_aug = albumentations.Compose(\n    [\n        albumentations.Resize(args.image_size, args.image_size, p=1),\n        albumentations.Normalize(\n            mean=[0.485, 0.456, 0.406],\n            std=[0.229, 0.224, 0.225],\n            max_pixel_value=255.0,\n            p=1.0,\n        ),\n    ],\n    p=1.0,\n)","cbae4dbd":"df = pd.read_csv(\"..\/input\/same-old-creating-folds\/train_10folds.csv\")","618a7ed7":"dense_features = [\n    'Subject Focus', 'Eyes', 'Face', 'Near', 'Action', 'Accessory',\n    'Group', 'Collage', 'Human', 'Occlusion', 'Info', 'Blur'\n]","2c806afe":"df_train = df[df.kfold != args.fold].reset_index(drop=True)\ndf_valid = df[df.kfold == args.fold].reset_index(drop=True)","d88462fe":"train_img_paths = [f\"..\/input\/petfinder-pawpularity-score\/train\/{x}.jpg\" for x in df_train[\"Id\"].values]\nvalid_img_paths = [f\"..\/input\/petfinder-pawpularity-score\/train\/{x}.jpg\" for x in df_valid[\"Id\"].values]","e7b5b2f7":"train_dataset = PawpularDataset(\n    image_paths=train_img_paths,\n    dense_features=df_train[dense_features].values,\n    targets=df_train.Pawpularity.values,\n    augmentations=train_aug,\n)\n\nvalid_dataset = PawpularDataset(\n    image_paths=valid_img_paths,\n    dense_features=df_valid[dense_features].values,\n    targets=df_valid.Pawpularity.values,\n    augmentations=valid_aug,\n)\n","75827972":"model = PawpularModel()\n\nes = EarlyStopping(\n    monitor=\"valid_rmse\",\n    model_path=f\"model_f{args.fold}.bin\",\n    patience=3,\n    mode=\"min\",\n    save_weights_only=True,\n)\n\nmodel.fit(\n    train_dataset,\n    valid_dataset=valid_dataset,\n    train_bs=args.batch_size,\n    valid_bs=2*args.batch_size,\n    device=\"cuda\",\n    epochs=args.epochs,\n    callbacks=[es],\n    fp16=True\n)","1175e5df":"## Changes\n- Classification\n- Custom loss (ArcFace + BCEWithLogits)\n- Custom Architecture\n- Backbone: swin_large_patch4_window12_384_in22k\n\n**I hope you find it helpful :) !**"}}