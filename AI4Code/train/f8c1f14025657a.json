{"cell_type":{"1a1dd173":"code","4067b501":"code","27feb421":"code","91d274f2":"code","7ea85eef":"code","49337232":"code","88148869":"code","d8b3fb4d":"code","0e678962":"code","d8ae5c57":"code","1cc0f256":"code","b4992d61":"code","503c3ca3":"code","0628e4fc":"code","49d3b1ae":"code","c627601d":"code","36445207":"code","43490cee":"code","92b40ace":"code","ce23d115":"code","793ecbce":"code","d3ed568a":"code","e08c5ce4":"code","2decaa15":"code","b095c5f1":"code","7b6a8744":"code","3d7be71f":"code","784b9d5c":"code","d71d3ec8":"code","21b7f694":"code","4707dab8":"markdown","6de62d86":"markdown","6a8566a6":"markdown","2f07670b":"markdown","e7d5996d":"markdown","17d59d90":"markdown","9c8a2fbd":"markdown","62a3a6cc":"markdown","21da2675":"markdown","f8805758":"markdown","dc578e2a":"markdown","082905d0":"markdown","c7f1f324":"markdown","f1233cee":"markdown","c35f42ec":"markdown","2359b436":"markdown","a56ebe5d":"markdown","6d80633d":"markdown","f878a3a4":"markdown","7c365c1f":"markdown","34427c7f":"markdown","04cf19fa":"markdown","0067f87c":"markdown","222a6d5b":"markdown","7ab1edce":"markdown","789844cd":"markdown"},"source":{"1a1dd173":"# data analysis and wrangling\nimport pandas as pd\nimport numpy as np\nimport random as rnd\n#Import ploting libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\n# visualization\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom mpl_toolkits.mplot3d import Axes3D\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots \ncolors = ['#06344d','#00b2ff']\nsns.set(palette=colors, font='Serif', style='white', rc={'axes.facecolor':'#f1f1f1', 'figure.facecolor':'#f1f1f1'})\nsns.palplot(colors)\n\n# scaling and train test split\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\n\n# creating a model\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Activation\nfrom tensorflow.keras.optimizers import Adam\nfrom sklearn import linear_model\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn import metrics\nfrom sklearn.model_selection import cross_val_score\n\n# evaluation on test data\nfrom sklearn.metrics import mean_squared_error,mean_absolute_error,explained_variance_score\nfrom sklearn.metrics import classification_report,confusion_matrix\n\nimport warnings \nwarnings.filterwarnings('ignore')","4067b501":"def adjustedR2(r2,n,k):\n    return r2-(k-1)\/(n-k)*(1-r2)","27feb421":"df = pd.read_csv('..\/input\/housesalesprediction\/kc_house_data.csv')\ndf_dm=df.copy()","91d274f2":"df.head(5)","7ea85eef":"print(df.columns.values)","49337232":"df.loc[0]","88148869":"df.shape","d8b3fb4d":"df.isnull().sum()","0e678962":"df.info()","d8ae5c57":"feature = ['price','bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors','waterfront', 'view','condition','grade',\n          'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat','long', 'sqft_living15', 'sqft_lot15' ]\n\nmask = np.zeros_like(df[feature].corr(), dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\n\nf, ax = plt.subplots(figsize=(16, 12))\nplt.title('Pearson Correlation Matrix', fontsize=25)\n\nsns.heatmap(df[feature].corr(), linewidth=0.25, vmax=0.7, square=True, cmap='BuPu', \n           linecolor='w', annot=True, annot_kws={'size': 8}, mask=mask, cbar_kws={'shrink': .9});","1cc0f256":"df['bedrooms'].value_counts()","b4992d61":"plt.figure(figsize=(6,4))\n\nsns.countplot(data=df, x='bedrooms').set(title='Number of different houses depending on bedrooms')","503c3ca3":"# just take the year from the date column\ndf_dm['sales_yr']=df_dm['date'].astype(str).str[:4]\n\n#add the age of the building when the house were sold as new column\ndf_dm['age']=df_dm['sales_yr'].astype(int)-df_dm['yr_built']\n#add the age of the renovation when the houses were sold as new column\ndf_dm['age_rnv']=0\ndf_dm['age_rnv']=df_dm['sales_yr'][df_dm['yr_renovated']!=0].astype(int)-df_dm['yr_renovated'][df_dm['yr_renovated']!=0]\ndf_dm['age_rnv'][df_dm['age_rnv'].isnull()]=0\n\n#pertition teh age innto bins\nbins = [-2,0,5,10,25,50,75,100,100000]\nlabels = ['<1', '1-5', '6-10', '11-25', '26-50', '51-75', '76-100', '>100']\ndf_dm['age_binned']=pd.cut(df_dm['age'], bins=bins, labels=labels)\n\n#paprtition the age rnv into rnv into bins\nbins = [-2,0,5,10,25,50,75,100000]\nlabels = ['<1', '1-5', '6-10', '11-25', '26-50', '51-75', '>75']\ndf_dm['age_rnv_binned']= pd.cut(df_dm['age_rnv'], bins=bins, labels=labels)\n\n# histogram for the binned columns\nf, axes = plt.subplots(1,2,figsize=(15,5))\np1=sns.countplot(df_dm['age_binned'],ax=axes[0])\nfor p in p1.patches:\n    height = p.get_height()\n    p1.text(p.get_x()+p.get_width()\/2,height + 50, height,ha='center')\np2=sns.countplot(df_dm['age_rnv_binned'],ax=axes[1])\nsns.despine(left=True, bottom=True)\nfor p in p2.patches:\n    height = p.get_height()\n    p2.text(p.get_x()+p.get_width()\/2,height + 200, height,ha='center')\n\naxes[0].set(xlabel='Age')\naxes[0].yaxis.tick_left()\naxes[1].yaxis.set_label_position('right')\naxes[1].yaxis.tick_right()\naxes[1].set(xlabel='Renovation Age');\n    \n#transform the factor values to be able to use in model\ndf_dm = pd.get_dummies(df_dm, columns=['age_binned','age_rnv_binned'])","0628e4fc":"price_corr = df.corr()['price'].sort_values(ascending=False)\nprint(price_corr)","49d3b1ae":"f, axes = plt.subplots(1, 2,figsize=(15,5))\nsns.distplot(df['price'], ax=axes[0])\nsns.scatterplot(x='price',y='sqft_living', data=df, ax=axes[1])\nsns.despine(bottom=True, left=True)\naxes[0].set(xlabel='Price in millions [USD]', ylabel='', title='Price Distribuition')\naxes[1].set(xlabel='Price', ylabel='Sqft Living', title='Price vs Sqft Living')\naxes[1].yaxis.set_label_position(\"right\")\naxes[1].yaxis.tick_right()","c627601d":"sns.set(style=\"whitegrid\", font_scale=1)\nf, axes = plt.subplots(1, 2,figsize=(15,5))\nsns.boxplot(x=df['bedrooms'],y=df['price'], ax=axes[0])\nsns.boxplot(x=df['floors'],y=df['price'], ax=axes[1])\nsns.despine(bottom=True, left=True)\naxes[0].set(xlabel='Bedrooms', ylabel='Price', title='Bedrooms vs Price Box Plot')\naxes[1].set(xlabel='Floors', ylabel='Price', title='Floors vs Price Box Plot')","36445207":"f, axes = plt.subplots(1, 2,figsize=(15,5))\nsns.boxplot(x=df['waterfront'],y=df['price'], ax=axes[0])\nsns.boxplot(x=df['view'],y=df['price'], ax=axes[1])\nsns.despine(left=True, bottom=True)\naxes[0].set(xlabel='Waterfront', ylabel='Price', title='Waterfront vs Price Box Plot')\naxes[1].set(xlabel='View', ylabel='Price', title='View vs Price Box Plot')\n\nf, axe = plt.subplots(1, 1,figsize=(15,5))\nsns.boxplot(x=df['grade'],y=df['price'], ax=axe)\nsns.despine(left=True, bottom=True)\naxe.set(xlabel='Grade', ylabel='Price', title='Grade vs Price Box Plot')","43490cee":"df = df.drop('id', axis=1)\ndf = df.drop('zipcode',axis=1)","92b40ace":"df['date'] = pd.to_datetime(df['date'])\n\ndf['month'] = df['date'].apply(lambda date:date.month)\ndf['year'] = df['date'].apply(lambda date:date.year)\n\ndf = df.drop('date',axis=1)\n\n# Check the new columns\nprint(df.columns.values)","ce23d115":"f, axes = plt.subplots(1, 2,figsize=(15,5))\nsns.boxplot(x='year',y='price',data=df, ax=axes[0])\nsns.boxplot(x='month',y='price',data=df, ax=axes[1])\nsns.despine(left=True, bottom=True)\naxes[0].set(xlabel='Year', ylabel='Price', title='Price by Year Box Plot')\naxes[1].set(xlabel='Month', ylabel='Price', title='Price by Month Box Plot')\n\nf, axe = plt.subplots(1, 1,figsize=(15,5))\ndf.groupby('month').mean()['price'].plot()\nsns.despine(left=True, bottom=True)\naxe.set(xlabel='Month', ylabel='Price', title='Price Trends')","793ecbce":"plt.figure(figsize=(15,5))\nsns.lineplot(x='yr_built', y='price', data=df)","d3ed568a":"# Features\nX = df.drop('price',axis=1)\n\n# Label\ny = df['price']\n\n# Split\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.3,random_state=101)","e08c5ce4":"print(X_train.shape)\nprint(X_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)","2decaa15":"scaler = MinMaxScaler()\n\n# fit and transfrom\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)\n\n# everything has been scaled between 1 and 0\nprint('Max: ',X_train.max())\nprint('Min: ', X_train.min())","b095c5f1":"model = Sequential()\n\n# input layer\nmodel.add(Dense(19,activation='relu'))\n\n# hidden layers\nmodel.add(Dense(19,activation='relu'))\nmodel.add(Dense(19,activation='relu'))\nmodel.add(Dense(19,activation='relu'))\n\n# output layer\nmodel.add(Dense(1))\n\nmodel.compile(optimizer='adam',loss='mse')","7b6a8744":"model.fit(x=X_train,y=y_train.values,\n          validation_data=(X_test,y_test.values),\n          batch_size=128,epochs=400)","3d7be71f":"losses = pd.DataFrame(model.history.history)\n\nplt.figure(figsize=(15,5))\nsns.lineplot(data=losses,lw=3)\nplt.xlabel('Epochs')\nplt.ylabel('')\nplt.title('Training Loss per Epoch')\nsns.despine()","784b9d5c":"# predictions on the test set\npredictions = model.predict(X_test)\n\nprint('MAE: ',mean_absolute_error(y_test,predictions))\nprint('MSE: ',mean_squared_error(y_test,predictions))\nprint('RMSE: ',np.sqrt(mean_squared_error(y_test,predictions)))\nprint('Variance Regression Score: ',explained_variance_score(y_test,predictions))\n\nprint('\\n\\nDescriptive Statistics:\\n',df['price'].describe())","d71d3ec8":"f, axes = plt.subplots(1, 2,figsize=(15,5))\n\n# Our model predictions\nplt.scatter(y_test,predictions)\n\n# Perfect predictions\nplt.plot(y_test,y_test,'r')\n\nerrors = y_test.values.reshape(6484, 1) - predictions\nsns.distplot(errors, ax=axes[0])\n\nsns.despine(left=True, bottom=True)\naxes[0].set(xlabel='Error', ylabel='', title='Error Histogram')\naxes[1].set(xlabel='Test True Y', ylabel='Model Predictions', title='Model Predictions vs Perfect Fit')","21b7f694":"# fueatures of new house\nsingle_house = df.drop('price',axis=1).iloc[0]\nprint(f'Features of new house:\\n{single_house}')\n\n# reshape the numpy array and scale the features\nsingle_house = scaler.transform(single_house.values.reshape(-1, 19))\n\n# run the model and get the price prediction\nprint('\\nPrediction Price:',model.predict(single_house)[0,0])\n\n# original price\nprint('\\nOriginal Price:',df.iloc[0]['price'])","4707dab8":"***Fitur mana yang kategorik?***\n\nNilai-nilai ini mengklasifikasikan sampel ke dalam kumpulan sampel yang serupa. Dalam fitur kategoris apakah nilai-nilai nominal, ordinal, rasio, atau interval berbasis? Antara lain ini membantu kita memilih plot yang sesuai untuk visualisasi.\n\n* Categorical: id, waterfront, zipcode.\n\n***Fitur mana yang numerik?***\n\nFitur mana yang numerik? Nilai-nilai ini berubah dari sampel ke sampel. Di dalam fitur numerik, apakah nilainya diskrit, kontinu, atau deret waktu? Antara lain ini membantu kita memilih plot yang sesuai untuk visualisasi.\n\n* Continous: price, bathrooms, floors, lat, long.\n* Discrete: date, bedrooms, sqft_living, sqft_lot, view, condition, grade, sqft_above, sqft_basement, yr_built, yr_renovated, sqft_living15, sqft_lot15.","6de62d86":"### House price trends\n* Melihat boxplot, kami melihat bahwa tidak ada perbedaan besar antara tahun 2014 dan 2015.\n* Jumlah rumah yang terjual per bulan cenderung sama setiap bulannya.\n* Lineplot  menunjukkan bahwa sekitar bulan April terjadi kenaikan harga rumah.","6a8566a6":"<a id=\"ch4\"><\/a>\n## Working with Feature Data\n<hr\/>\n\n### Correcting by dropping features\nDengan menghapus beberapa faetur, mempermudah kita berurusan dengan lebih sedikit titik data. Mempercepat notebook dan memudahkan analisis. Berdasarkan asumsi kita putuskan untuk menghapus fitur Id, kode pos, dan Tanggal.","2f07670b":"**Terima kasih** telah meluangkan waktu untuk membaca eksplorasi pertama saya tentang kumpulan data Kaggle. Saya berharap untuk melakukan lebih banyak!\n\nJika Anda memiliki pertanyaan atau feedback, jangan ragu untuk berkomentar dan jika Anda menyukai kernel ini,<b><font color='green'> mohon upvote! <\/font><\/b>","e7d5996d":"### Model predictions vs perfect fit\n* Kita dapat membandingkan Model predictions vs perfect fit untuk melihat seberapa akurat model tersebut.\n* Garis merah mewakili perfect fit.\n* Kita dipengaruhi oleh outlier, yang merupakan rumah mahal. Model kita tidak mampu memprediksi rumah mewah.\n* Di sisi lain, model kami pandai memprediksi harga rumah antara o dan \\\\$2 juta. Jelas ada yang cocok.\n* Mungkin layak untuk melatih kembali model kami hanya dengan harga rumah di bawah \\\\$3 juta.","17d59d90":"### Price correlation\n* Ini memungkinkan kami untuk menjelajahi label yang sangat berkorelasi dengan harga.\n* sqft_living tampak seperti label yang sangat berkorelasi dengan harga, serta kelas, sqft_above, sqft_living15, dan kamar mandi.\n\n***Fitur mana yang lebih berkorelasi dengan harga?***","9c8a2fbd":"***Fitur mana yang berisi nilai nol, atau kosong?***","62a3a6cc":"### Pearson correlation matrix\nKami menggunakan correlation coefficient Pearson untuk menguji kekuatan dan arah hubungan linier antara dua variabel kontinu.\n\nKoefisien korelasi dapat berkisar dalam nilai dari -1 hingga +1. Semakin besar nilai absolut koefisien, semakin kuat hubungan antar variabel. Untuk korelasi Pearson, nilai absolut 1 menunjukkan hubungan linier yang sempurna. Korelasi yang mendekati 0 menunjukkan tidak adanya hubungan linier antar variabel.\n\nTanda koefisien menunjukkan arah hubungan. Jika kedua variabel cenderung naik atau turun bersama-sama, koefisiennya positif, dan garis yang mewakili korelasi miring ke atas. Jika satu variabel cenderung meningkat ketika yang lain menurun, koefisiennya negatif, dan garis yang mewakili korelasi miring ke bawah.","21da2675":"<a id=\"ch6\"><\/a>\n## Scaling and train test split\n<hr\/>\nSekarang kita siap untuk melatih model dan memprediksi solusi yang diperlukan. Ada 60+ algoritma pemodelan prediktif untuk dipilih. Kita harus memahami jenis masalah dan kebutuhan solusi untuk mempersempit ke beberapa model terpilih yang dapat kita evaluasi. problem pada kasus ini pada mean squared error regression problem. kita perform a category of machine learning yang disebut supervised learning sebagaimana kita traing model kita terhadap dataset yg kita miliki.","f8805758":"<a id=\"ch2\"><\/a>\n## Dataset\n<hr\/>\n\n* Dataset ini berisi harga jual rumah untuk King County, yang mencakup Seattle.\n* Ini termasuk rumah yang dijual antara Mei 2014 dan Mei 2015.\n* 21 kolom. (fitur)\n* 21597 baris.\n***Feature Columns***\n    \n* **id:** ID unik untuk setiap rumah yang terjual\n* **date:** Tanggal penjualan rumah\n* **price:** Harga setiap rumah terjual\n* **bedrooms:** Jumlah kamar tidur\n* **bathrooms:** Jumlah kamar mandi, di mana .5 merupakan kamar dengan toilet tetapi tanpa pancuran\n* **sqft_living:** Ukuran persegi ruang tamu interior apartemen\n* **sqft_lot:** Ukuran persegi luas tanah\n* **floors:** Jumlah lantai\n* **waterfront:** - Variabel dummy apakah apartemen menghadap ke tepi laut atau tidak\n* **view:** Indeks dari 0 hingga 4 tentang seberapa bagus tampilan properti itu\n* **condition:** - Indeks dari 1 hingga 5 pada kondisi apartemen,\n* **grade:** Indeks dari 1 hingga 13, di mana 1-3 tidak sesuai dengan konstruksi dan desain bangunan, 7 memiliki tingkat konstruksi dan desain rata-rata, dan 11-13 memiliki tingkat kualitas konstruksi dan desain yang tinggi.\n* **sqft_above:** Rekaman persegi ruang interior perumahan yang berada di atas permukaan tanah\n* **sqft_basement:** Rekaman persegi ruang interior perumahan yang berada di bawah permukaan tanah\n* **yr_built:** Tahun rumah pertama kali dibangun\n* **yr_renovated:** Tahun renovasi terakhir rumah\n* **zipcode:** Kode pos di area mana rumah itu berada\n* **lat:** Lintang (latitudinal)\n* **long:** Bujur (longitudinal)\n* **sqft_living15:** Rekaman persegi ruang hidup perumahan interior untuk 15 tetangga terdekat\n* **sqft_lot15:** Luas tanah kavling 15 tetangga terdekat","dc578e2a":"### Bedrooms and floors box plots\nbox plots adalah metode untuk menggambarkan kelompok data numerik secara grafis melalui kuartilnya. box plots mungkin juga memiliki garis memanjang dari boxes (whiskers) yang menunjukkan variabilitas di luar kuartil atas dan bawah, oleh karena itu disebut plot boxes-dan-whiskers. outlier yang terdapat diplot sebagai titik individu. Jarak antara bagian-bagian kotak yang berbeda menunjukkan tingkat dispersi (penyebaran).\n\n* Kita bisa melihat outlier diplot sebagai poin individu; ini mungkin adalah rumah yang lebih mahal.\n* Kita dapat melihat bahwa harga cenderung naik ketika rumah memiliki lebih banyak kamar tidur. ","082905d0":"### Analyze by describing data\n\n\n***Fitur apa saja yang tersedia dalam kumpulan data?***","c7f1f324":"### Waterfront, view and grade box plots\n* Rumah yg berada tepi laut (watefront) cenderung memiliki nilai harga yang lebih baik.\n* Harga rumah waterfront cenderung lebih menyebar dan harga rumah tanpa waterfront cenderung lebih terkonsentrasi.\n* Grade dan watefront mempengaruhi harga. View tampaknya tidak terlalu berpengaruh tetapi juga berpengaruh pada harga.","f1233cee":"R-Square meningkat ketika jumlah fitur bertambah. karena ini terkadang evaluator yang lebih kuat lebih disukai untuk membandingkan kinerja antara model yang berbeda. evaluasi ini disebut Adjusted R-Square dan biasanya meningkat, jika penambahan variabel mengurangi MSE.","c35f42ec":"***Apa saja tipe data untuk berbagai fitur?***\n\nFive features are floats, fifteen are integers and one is an object.","2359b436":"### Predicting on brand new data\nPada bagian ini, kami memberikan model pada tes set untuk mendapatkan daftar prediksi. Kemudian kami membandingkan nilai yang benar dengan daftar prediksi. Kami menggunakan metrik yang berbeda untuk membandingkan prediksi, dalam hal ini, kami menggunakan MAE, MSE, RMSE, dan Skor Regresi Varians.\n\nMari kita mulai dengan menganalisis MAE, yaitu \\\\$103.500. Ini berarti bahwa model kita tidak bekerja di rata-rata sekitar \\\\$100.000.\n\n***Apakah MAE itu baik atau buruk?***\n\nUntuk itu, kita harus memperhitungkan kumpulan data asli kita dan melihat nilai seperti apa yang kita miliki. Misalnya, rata-rata adalah 540.000, oleh karena itu MEA adalah sekitar 19% dari harga rata-rata. Ini bukan hasil yang sangat baik.\n\nUntuk lebih memahami kesalahan ini, kita dapat menggunakan skor regresi varians, di mana kemungkinan skor terbaik adalah 1,0 dan nilai yang lebih rendah lebih buruk. Ini memberi tahu Anda berapa banyak varians yang dijelaskan oleh model Anda. Dalam kasus kami, kami memiliki 0,80 yang merupakan hasil normal.","a56ebe5d":"## Import Library","6d80633d":"<a id=\"ch5\"><\/a>\n## Feature engineering\n<hr\/>\n\nKami ingin merekayasa fitur tanggal untuk membuat kolom tahun dan bulan. Tanggal fitur adalah sebagai string. Dengan pd.to_datetime kita dapat mengonversi argumen menjadi datetime.","f878a3a4":"<a id=\"ch7\"><\/a>\n## Creating a model\n***\nKita memperkirakan jumlah neuron (units) dari features yg ada. Contoh: X_train.shape (15117, 19). Pengoptimal menanyakan bagaimana kita ingin melakukan penurunan sebuah gradien. dalam hal ini kita menggunakan Adam optimizer dan  mean square error loss function.","7c365c1f":"<a id=\"ch1\"><\/a>\n## Overview \n<hr\/>\n\nSalah satu tujuan notebook ini adalah untuk **menunjukkan langkah demi langkah cara menganalisis dan memvisualisasikan kumpulan data untuk memprediksi harga rumah di masa mendatang.** Selain itu, saya akan menjelaskan sebagian besar konsep yang digunakan agar kita memahami mengapa suatu model atau metrik tersebut digunakan.\nBerdasarkan fitur-fitur seperti sqft_living, kamar mandi, kamar tidur, pemandangan, dan lainnya, kami akan membangun model pembelajaran mendalam yang dapat memprediksi harga rumah di masa mendatang. \n\nJika Anda memiliki pertanyaan atau umpan balik, jangan ragu untuk menulis dan jika Anda menyukai kernel ini,<b><font color='green'> mohon upvote! <\/font><\/b>\n\n<img src=\"https:\/\/images.wsj.net\/im-233504?width=860&size=1.5&pixel_ratio=1.5\" title=\"source: www.pexels.com\" \/>\n<br>\n\nPertanyaan-pertanyaan berikut akan dijawab di seluruh Kernel:\n* ***Fitur apa saja yang tersedia dalam kumpulan data?***\n* ***Fitur mana yang kategorik?***\n* ***Fitur mana yang numerik?***\n* ***Fitur mana yang berisi nilai nol, atau kosong?***\n* ***Apa saja tipe data untuk berbagai fitur?***\n* ***Bagaimana distribusi nilai fitur numerik di seluruh sampel?***\n* ***Fitur mana yang lebih berkorelasi dengan harga?***","34427c7f":"<a id=\"ch10\"><\/a>\n### Predicting on brand new data\n---\nKita akan menggunakan model untuk memprediksi harga rumah baru. Kita akan memilih rumah pertama dari kumpulan data dan mendrop harganya. single_house akan memiliki semua fitur yang kita butuhkan untuk memprediksi harga. Setelah itu, kita perlu membentuk kembali variabel dan menskalakan fitur.\n\nHarga aslinya adalah \\\\$221.900 dan prediksi modelnya adalah  dikisaran \\\\$280.000","04cf19fa":"<a id=\"ch8\"><\/a>\n## Training the model\n***\nNow that the model is ready, we can fit the model into the data.\n\nSince the dataset is large, we are going to use batch_size. It is typical to use batches of the power of 2 (32, 64, 128, 256...). In this case we are using 128. The smaller the batch size, the longer is going to take.","0067f87c":"<hr\/>\n\n# Predicting House Prices (Keras - Artificial Neural Network)\n<hr\/>\n\n### Table of Contents\n1. [Overview](#ch1)\n1. [Dataset](#ch2)\n1. [Exploratory Data Analysis](#ch3)\n1. [Working with Feature Data](#ch4)\n1. [Feature Engineering](#ch5)\n1. [Scaling and Train Test Split](#ch6)\n1. [Creating a Model](#ch7)\n1. [Training the Model](#ch8)\n1. [Evaluation on Test Data](#ch9)\n1. [Predicting on a Brand New House](#ch10)","222a6d5b":"### Normalizing \/ scaling the data\nKita perlu scaling data fitur. Untuk mencegah terjadinya data leakage dari test set, kita hanya memasang scaler ke training set.","7ab1edce":"<a id=\"ch9\"><\/a>\n## Evaluation on test data\n---\n### Regression Evaluation Metrics\n\n**Mean Absolute Error** (MAE) is the mean of the absolute value of the errors:\n\n$$\\frac 1n\\sum_{i=1}^n|y_i-\\hat{y}_i|$$\n\n**Mean Squared Error** (MSE) is the mean of the squared errors:\n\n$$\\frac 1n\\sum_{i=1}^n(y_i-\\hat{y}_i)^2$$\n\n**Root Mean Squared Error** (RMSE) is the square root of the mean of the squared errors:\n\n$$\\sqrt{\\frac 1n\\sum_{i=1}^n(y_i-\\hat{y}_i)^2}$$\n\nComparing these metrics:\n\n- **MAE** is the easiest to understand, because it's the average error.\n- **MSE** is more popular than MAE, because MSE \"punishes\" larger errors, which tends to be useful in the real world.\n- **RMSE** is even more popular than MSE, because RMSE is interpretable in the \"y\" units.","789844cd":"### Fitur harga\n* Sebagian besar harga rumah antara \\\\$0 dan \\\\$1.500.000.\n* Harga rumah rata-rata adalah \\\\$540.000.\n* Ingatlah bahwa mungkin ide yang baik untuk menghilangkan nilai-nilai ekstrim. Misalnya, kita bisa fokus pada rumah dari \\\\$0 sampai \\\\$3.000.000 dan membuang yang lainnya.\n* Tampaknya ada hubungan linier positif antara harga dan sqft_living.\n* Peningkatan ruang hidup umumnya sesuai dengan kenaikan harga rumah."}}