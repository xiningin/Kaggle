{"cell_type":{"8e96de5d":"code","e963fb54":"code","ab374821":"code","bdc00939":"code","d3cdac6e":"code","91862738":"code","e8b60427":"code","444a160e":"code","e7b7a76b":"code","97998672":"code","82850d18":"code","c540feb1":"code","939e2e78":"code","bb337e9e":"code","b1322e8c":"code","1c614fd9":"code","fbe6b8a5":"code","c0dc51dd":"code","d8ac0fd6":"code","438f4f14":"code","29f20a94":"code","26f6f6c9":"code","960d23fd":"code","a4bd34bb":"code","a72d6aae":"code","e5943752":"code","904f291a":"code","ea506878":"code","c338937d":"code","297ac2da":"code","aa80730e":"code","2ae0899b":"code","cb605265":"code","ea6768de":"code","5c52f745":"code","4bc1fb5b":"code","d762f188":"code","70b42704":"code","1b124565":"code","a1058588":"code","ddc01c9d":"code","eb39c6ff":"code","40ae8e0f":"code","4f91e91c":"code","059d34dd":"code","007fc6a7":"code","0822b400":"code","187726b2":"code","7f4553a8":"code","53150a97":"code","b33cf338":"code","2915e29b":"code","8006158a":"code","24842070":"code","62e6fba7":"code","7cb5f737":"code","0caec8e0":"code","73bbd8de":"code","43566a78":"code","4d14ebd8":"code","9ec8fd7c":"code","a96918e7":"code","a80b5b82":"code","e48ea977":"code","c972fea5":"code","8e964eed":"code","1f69c18f":"code","efc9dfe9":"code","c33ef369":"code","b2a1b0db":"code","03bd1988":"markdown","9d913df5":"markdown","1bd9308f":"markdown","4e9e66b7":"markdown","cf627c09":"markdown","a6c1362b":"markdown","50cb6924":"markdown","a780c5b0":"markdown","0e05a8e5":"markdown","33080551":"markdown","d3c2f338":"markdown","c126c7e8":"markdown","92be88a7":"markdown","0770680d":"markdown","3c25e979":"markdown","6e604735":"markdown","35d0a1be":"markdown","86ca77f7":"markdown","e0d76a49":"markdown","d53db55c":"markdown","e8a1055d":"markdown","f4e5cfbe":"markdown","b88f0897":"markdown","fb1836b3":"markdown","519d53cf":"markdown","da5e27a8":"markdown","edae8724":"markdown","890a882d":"markdown","f950850d":"markdown","9db6bcc7":"markdown","84bb2765":"markdown","d4ed1add":"markdown","bc723c6e":"markdown","98699878":"markdown","95e7c96b":"markdown","01c0ba69":"markdown","f90821d6":"markdown","15eeca02":"markdown","97a21d96":"markdown","b78c0d38":"markdown"},"source":{"8e96de5d":"# Import Modules\n\nimport numpy as np\nimport pandas as pd\nimport os\nimport random\nimport copy\nimport matplotlib.pyplot as plt\nimport pandas","e963fb54":"from subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))","ab374821":"os.chdir('..\/input\/Data\/Stocks\/')\nlist = os.listdir()\nnumber_files = len(list)\nprint(number_files)","bdc00939":"### Choose 8 stock for analysis\n\n#filenames = [x for x in os.listdir(\".\/Stocks\/\") if x.endswith('.txt') and os.path.getsize(x) > 0]\nfilenames = random.sample([x for x in os.listdir() if x.endswith('.txt') \n                           and os.path.getsize(os.path.join('',x)) > 0], 8)\nprint(filenames)","d3cdac6e":"data = []\nfor filename in filenames:\n    df = pd.read_csv(os.path.join('',filename), sep=',')\n    label, _, _ = filename.split(sep='.')\n    df['Label'] = label\n    df['Date'] = pd.to_datetime(df['Date'])\n\n    data.append(df)","91862738":"data[0].head()","e8b60427":"print(len(data))","444a160e":"TechIndicator = copy.deepcopy(data)","e7b7a76b":"# Relative Strength Index\n# Avg(PriceUp)\/(Avg(PriceUP)+Avg(PriceDown)*100\n# Where: PriceUp(t)=1*(Price(t)-Price(t-1)){Price(t)- Price(t-1)>0};\n#        PriceDown(t)=-1*(Price(t)-Price(t-1)){Price(t)- Price(t-1)<0};\n\ndef rsi(values):\n    up = values[values>0].mean()\n    down = -1*values[values<0].mean()\n    return 100 * up \/ (up + down)\n","97998672":"# Add Momentum_1D column for all 15 stocks.\n# Momentum_1D = P(t) - P(t-1)\nfor stock in range(len(TechIndicator)):\n    TechIndicator[stock]['Momentum_1D'] = (TechIndicator[stock]['Close']-TechIndicator[stock]['Close'].shift(1)).fillna(0)\n    TechIndicator[stock]['RSI_14D'] = TechIndicator[stock]['Momentum_1D'].rolling(center=False, window=14).apply(rsi).fillna(0)\nTechIndicator[0].tail(5)","82850d18":"### Calculation of Volume (Plain)m","c540feb1":"for stock in range(len(TechIndicator)):\n    TechIndicator[stock]['Volume_plain'] = TechIndicator[stock]['Volume'].fillna(0)\nTechIndicator[0].tail()","939e2e78":"def bbands(price, length=30, numsd=2):\n    \"\"\" returns average, upper band, and lower band\"\"\"\n    #ave = pd.stats.moments.rolling_mean(price,length)\n    ave = price.rolling(window = length, center = False).mean()\n    #sd = pd.stats.moments.rolling_std(price,length)\n    sd = price.rolling(window = length, center = False).std()\n    upband = ave + (sd*numsd)\n    dnband = ave - (sd*numsd)\n    return np.round(ave,3), np.round(upband,3), np.round(dnband,3)","bb337e9e":"for stock in range(len(TechIndicator)):\n    TechIndicator[stock]['BB_Middle_Band'], TechIndicator[stock]['BB_Upper_Band'], TechIndicator[stock]['BB_Lower_Band'] = bbands(TechIndicator[stock]['Close'], length=20, numsd=1)\n    TechIndicator[stock]['BB_Middle_Band'] = TechIndicator[stock]['BB_Middle_Band'].fillna(0)\n    TechIndicator[stock]['BB_Upper_Band'] = TechIndicator[stock]['BB_Upper_Band'].fillna(0)\n    TechIndicator[stock]['BB_Lower_Band'] = TechIndicator[stock]['BB_Lower_Band'].fillna(0)\nTechIndicator[0].tail()","b1322e8c":"def aroon(df, tf=25):\n    aroonup = []\n    aroondown = []\n    x = tf\n    while x< len(df['Date']):\n        aroon_up = ((df['High'][x-tf:x].tolist().index(max(df['High'][x-tf:x])))\/float(tf))*100\n        aroon_down = ((df['Low'][x-tf:x].tolist().index(min(df['Low'][x-tf:x])))\/float(tf))*100\n        aroonup.append(aroon_up)\n        aroondown.append(aroon_down)\n        x+=1\n    return aroonup, aroondown","1c614fd9":"for stock in range(len(TechIndicator)):\n    listofzeros = [0] * 25\n    up, down = aroon(TechIndicator[stock])\n    aroon_list = [x - y for x, y in zip(up,down)]\n    if len(aroon_list)==0:\n        aroon_list = [0] * TechIndicator[stock].shape[0]\n        TechIndicator[stock]['Aroon_Oscillator'] = aroon_list\n    else:\n        TechIndicator[stock]['Aroon_Oscillator'] = listofzeros+aroon_list\n","fbe6b8a5":"for stock in range(len(TechIndicator)):\n    TechIndicator[stock][\"PVT\"] = (TechIndicator[stock]['Momentum_1D']\/ TechIndicator[stock]['Close'].shift(1))*TechIndicator[stock]['Volume']\n    TechIndicator[stock][\"PVT\"] = TechIndicator[stock][\"PVT\"]-TechIndicator[stock][\"PVT\"].shift(1)\n    TechIndicator[stock][\"PVT\"] = TechIndicator[stock][\"PVT\"].fillna(0)\nTechIndicator[0].tail()","c0dc51dd":"def abands(df):\n    #df['AB_Middle_Band'] = pd.rolling_mean(df['Close'], 20)\n    df['AB_Middle_Band'] = df['Close'].rolling(window = 20, center=False).mean()\n    # High * ( 1 + 4 * (High - Low) \/ (High + Low))\n    df['aupband'] = df['High'] * (1 + 4 * (df['High']-df['Low'])\/(df['High']+df['Low']))\n    df['AB_Upper_Band'] = df['aupband'].rolling(window=20, center=False).mean()\n    # Low *(1 - 4 * (High - Low)\/ (High + Low))\n    df['adownband'] = df['Low'] * (1 - 4 * (df['High']-df['Low'])\/(df['High']+df['Low']))\n    df['AB_Lower_Band'] = df['adownband'].rolling(window=20, center=False).mean()","d8ac0fd6":"for stock in range(len(TechIndicator)):\n    abands(TechIndicator[stock])\n    TechIndicator[stock] = TechIndicator[stock].fillna(0)\nTechIndicator[0].tail()","438f4f14":"columns2Drop = ['Momentum_1D', 'aupband', 'adownband']\nfor stock in range(len(TechIndicator)):\n    TechIndicator[stock] = TechIndicator[stock].drop(labels = columns2Drop, axis=1)\nTechIndicator[0].head()","29f20a94":"def STOK(df, n):\n    df['STOK'] = ((df['Close'] - df['Low'].rolling(window=n, center=False).mean()) \/ (df['High'].rolling(window=n, center=False).max() - df['Low'].rolling(window=n, center=False).min())) * 100\n    df['STOD'] = df['STOK'].rolling(window = 3, center=False).mean()","26f6f6c9":"for stock in range(len(TechIndicator)):\n    STOK(TechIndicator[stock], 4)\n    TechIndicator[stock] = TechIndicator[stock].fillna(0)\nTechIndicator[0].tail()","960d23fd":"def CMFlow(df, tf):\n    CHMF = []\n    MFMs = []\n    MFVs = []\n    x = tf\n    \n    while x < len(df['Date']):\n        PeriodVolume = 0\n        volRange = df['Volume'][x-tf:x]\n        for eachVol in volRange:\n            PeriodVolume += eachVol\n        \n        MFM = ((df['Close'][x] - df['Low'][x]) - (df['High'][x] - df['Close'][x])) \/ (df['High'][x] - df['Low'][x])\n        MFV = MFM*PeriodVolume\n        \n        MFMs.append(MFM)\n        MFVs.append(MFV)\n        x+=1\n    \n    y = tf\n    while y < len(MFVs):\n        PeriodVolume = 0\n        volRange = df['Volume'][x-tf:x]\n        for eachVol in volRange:\n            PeriodVolume += eachVol\n        consider = MFVs[y-tf:y]\n        tfsMFV = 0\n        \n        for eachMFV in consider:\n            tfsMFV += eachMFV\n        \n        tfsCMF = tfsMFV\/PeriodVolume\n        CHMF.append(tfsCMF)\n        y+=1\n    return CHMF","a4bd34bb":"for stock in range(len(TechIndicator)):\n    listofzeros = [0] * 40\n    CHMF = CMFlow(TechIndicator[stock], 20)\n    if len(CHMF)==0:\n        CHMF = [0] * TechIndicator[stock].shape[0]\n        TechIndicator[stock]['Chaikin_MF'] = CHMF\n    else:\n        TechIndicator[stock]['Chaikin_MF'] = listofzeros+CHMF\nTechIndicator[0].tail()","a72d6aae":"def psar(df, iaf = 0.02, maxaf = 0.2):\n    length = len(df)\n    dates = (df['Date'])\n    high = (df['High'])\n    low = (df['Low'])\n    close = (df['Close'])\n    psar = df['Close'][0:len(df['Close'])]\n    psarbull = [None] * length\n    psarbear = [None] * length\n    bull = True\n    af = iaf\n    ep = df['Low'][0]\n    hp = df['High'][0]\n    lp = df['Low'][0]\n    for i in range(2,length):\n        if bull:\n            psar[i] = psar[i - 1] + af * (hp - psar[i - 1])\n        else:\n            psar[i] = psar[i - 1] + af * (lp - psar[i - 1])\n        reverse = False\n        if bull:\n            if df['Low'][i] < psar[i]:\n                bull = False\n                reverse = True\n                psar[i] = hp\n                lp = df['Low'][i]\n                af = iaf\n        else:\n            if df['High'][i] > psar[i]:\n                bull = True\n                reverse = True\n                psar[i] = lp\n                hp = df['High'][i]\n                af = iaf\n        if not reverse:\n            if bull:\n                if df['High'][i] > hp:\n                    hp = df['High'][i]\n                    af = min(af + iaf, maxaf)\n                if df['Low'][i - 1] < psar[i]:\n                    psar[i] = df['Low'][i - 1]\n                if df['Low'][i - 2] < psar[i]:\n                    psar[i] = df['Low'][i - 2]\n            else:\n                if df['Low'][i] < lp:\n                    lp = df['Low'][i]\n                    af = min(af + iaf, maxaf)\n                if df['High'][i - 1] > psar[i]:\n                    psar[i] = df['High'][i - 1]\n                if df['High'][i - 2] > psar[i]:\n                    psar[i] = df['High'][i - 2]\n        if bull:\n            psarbull[i] = psar[i]\n        else:\n            psarbear[i] = psar[i]\n    #return {\"dates\":dates, \"high\":high, \"low\":low, \"close\":close, \"psar\":psar, \"psarbear\":psarbear, \"psarbull\":psarbull}\n    #return psar, psarbear, psarbull\n    df['psar'] = psar\n    #df['psarbear'] = psarbear\n    #df['psarbull'] = psarbull","e5943752":"for stock in range(len(TechIndicator)):\n    psar(TechIndicator[stock])\n\nTechIndicator[0].tail()","904f291a":"# ROC = [(Close - Close n periods ago) \/ (Close n periods ago)] * 100\nfor stock in range(len(TechIndicator)):\n    TechIndicator[stock]['ROC'] = ((TechIndicator[stock]['Close'] - TechIndicator[stock]['Close'].shift(12))\/(TechIndicator[stock]['Close'].shift(12)))*100\n    TechIndicator[stock] = TechIndicator[stock].fillna(0)\nTechIndicator[0].tail()","ea506878":"for stock in range(len(TechIndicator)):\n    TechIndicator[stock]['VWAP'] = np.cumsum(TechIndicator[stock]['Volume'] * (TechIndicator[stock]['High'] + TechIndicator[stock]['Low'])\/2) \/ np.cumsum(TechIndicator[stock]['Volume'])\n    TechIndicator[stock] = TechIndicator[stock].fillna(0)\nTechIndicator[0].tail()","c338937d":"for stock in range(len(TechIndicator)):\n    TechIndicator[stock]['Momentum'] = TechIndicator[stock]['Close'] - TechIndicator[stock]['Close'].shift(4)\n    TechIndicator[stock] = TechIndicator[stock].fillna(0)\nTechIndicator[0].tail()","297ac2da":"def CCI(df, n, constant):\n    TP = (df['High'] + df['Low'] + df['Close']) \/ 3\n    CCI = pd.Series((TP - TP.rolling(window=n, center=False).mean()) \/ (constant * TP.rolling(window=n, center=False).std())) #, name = 'CCI_' + str(n))\n    return CCI","aa80730e":"for stock in range(len(TechIndicator)):\n    TechIndicator[stock]['CCI'] = CCI(TechIndicator[stock], 20, 0.015)\n    TechIndicator[stock] = TechIndicator[stock].fillna(0)\nTechIndicator[0].tail()","2ae0899b":"for stock in range(len(TechIndicator)):\n    new = (TechIndicator[stock]['Volume'] * (~TechIndicator[stock]['Close'].diff().le(0) * 2 -1)).cumsum()\n    TechIndicator[stock]['OBV'] = new\nTechIndicator[5].tail()","cb605265":"#Keltner Channel  \ndef KELCH(df, n):  \n    KelChM = pd.Series(((df['High'] + df['Low'] + df['Close']) \/ 3).rolling(window =n, center=False).mean(), name = 'KelChM_' + str(n))  \n    KelChU = pd.Series(((4 * df['High'] - 2 * df['Low'] + df['Close']) \/ 3).rolling(window =n, center=False).mean(), name = 'KelChU_' + str(n))  \n    KelChD = pd.Series(((-2 * df['High'] + 4 * df['Low'] + df['Close']) \/ 3).rolling(window =n, center=False).mean(), name = 'KelChD_' + str(n))    \n    return KelChM, KelChD, KelChU","ea6768de":"for stock in range(len(TechIndicator)):\n    KelchM, KelchD, KelchU = KELCH(TechIndicator[stock], 14)\n    TechIndicator[stock]['Kelch_Upper'] = KelchU\n    TechIndicator[stock]['Kelch_Middle'] = KelchM\n    TechIndicator[stock]['Kelch_Down'] = KelchD\n    TechIndicator[stock] = TechIndicator[stock].fillna(0)\nTechIndicator[5].tail()","5c52f745":"for stock in range(len(TechIndicator)):\n    TechIndicator[stock]['EMA'] = TechIndicator[stock]['Close'].ewm(span=3,min_periods=0,adjust=True,ignore_na=False).mean()\n    \n    TechIndicator[stock] = TechIndicator[stock].fillna(0)\n\nfor stock in range(len(TechIndicator)):\n    TechIndicator[stock]['TEMA'] = (3 * TechIndicator[stock]['EMA'] - 3 * TechIndicator[stock]['EMA'] * TechIndicator[stock]['EMA']) + (TechIndicator[stock]['EMA']*TechIndicator[stock]['EMA']*TechIndicator[stock]['EMA'])\nTechIndicator[5].tail()","4bc1fb5b":"for stock in range(len(TechIndicator)):\n    TechIndicator[stock]['HL'] = TechIndicator[stock]['High'] - TechIndicator[stock]['Low']\n    TechIndicator[stock]['absHC'] = abs(TechIndicator[stock]['High'] - TechIndicator[stock]['Close'].shift(1))\n    TechIndicator[stock]['absLC'] = abs(TechIndicator[stock]['Low'] - TechIndicator[stock]['Close'].shift(1))\n    TechIndicator[stock]['TR'] = TechIndicator[stock][['HL','absHC','absLC']].max(axis=1)\n    TechIndicator[stock]['ATR'] = TechIndicator[stock]['TR'].rolling(window=14).mean()\n    TechIndicator[stock]['NATR'] = (TechIndicator[stock]['ATR'] \/ TechIndicator[stock]['Close']) *100\n    TechIndicator[stock] = TechIndicator[stock].fillna(0)\nTechIndicator[5].tail()","d762f188":"def DMI(df, period):\n    df['UpMove'] = df['High'] - df['High'].shift(1)\n    df['DownMove'] = df['Low'].shift(1) - df['Low']\n    df['Zero'] = 0\n\n    df['PlusDM'] = np.where((df['UpMove'] > df['DownMove']) & (df['UpMove'] > df['Zero']), df['UpMove'], 0)\n    df['MinusDM'] = np.where((df['UpMove'] < df['DownMove']) & (df['DownMove'] > df['Zero']), df['DownMove'], 0)\n\n    df['plusDI'] = 100 * (df['PlusDM']\/df['ATR']).ewm(span=period,min_periods=0,adjust=True,ignore_na=False).mean()\n    df['minusDI'] = 100 * (df['MinusDM']\/df['ATR']).ewm(span=period,min_periods=0,adjust=True,ignore_na=False).mean()\n\n    df['ADX'] = 100 * (abs((df['plusDI'] - df['minusDI'])\/(df['plusDI'] + df['minusDI']))).ewm(span=period,min_periods=0,adjust=True,ignore_na=False).mean()\n","70b42704":"for stock in range(len(TechIndicator)):\n    DMI(TechIndicator[stock], 14)\n    TechIndicator[stock] = TechIndicator[stock].fillna(0)\nTechIndicator[5].tail()","1b124565":"columns2Drop = ['UpMove', 'DownMove', 'ATR', 'PlusDM', 'MinusDM', 'Zero', 'EMA', 'HL', 'absHC', 'absLC', 'TR']\nfor stock in range(len(TechIndicator)):\n    TechIndicator[stock] = TechIndicator[stock].drop(labels = columns2Drop, axis=1)\nTechIndicator[2].head()","a1058588":"for stock in range(len(TechIndicator)):\n    TechIndicator[stock]['26_ema'] = TechIndicator[stock]['Close'].ewm(span=26,min_periods=0,adjust=True,ignore_na=False).mean()\n    TechIndicator[stock]['12_ema'] = TechIndicator[stock]['Close'].ewm(span=12,min_periods=0,adjust=True,ignore_na=False).mean()\n    TechIndicator[stock]['MACD'] = TechIndicator[stock]['12_ema'] - TechIndicator[stock]['26_ema']\n    TechIndicator[stock] = TechIndicator[stock].fillna(0)\nTechIndicator[2].tail()","ddc01c9d":"def MFI(df):\n    # typical price\n    df['tp'] = (df['High']+df['Low']+df['Close'])\/3\n    #raw money flow\n    df['rmf'] = df['tp'] * df['Volume']\n    \n    # positive and negative money flow\n    df['pmf'] = np.where(df['tp'] > df['tp'].shift(1), df['tp'], 0)\n    df['nmf'] = np.where(df['tp'] < df['tp'].shift(1), df['tp'], 0)\n\n    # money flow ratio\n    df['mfr'] = df['pmf'].rolling(window=14,center=False).sum()\/df['nmf'].rolling(window=14,center=False).sum()\n    df['Money_Flow_Index'] = 100 - 100 \/ (1 + df['mfr'])","eb39c6ff":"for stock in range(len(TechIndicator)):\n    MFI(TechIndicator[stock])\n    TechIndicator[stock] = TechIndicator[stock].fillna(0)\nTechIndicator[2].tail()","40ae8e0f":"def ichimoku(df):\n    # Turning Line\n    period9_high = df['High'].rolling(window=9,center=False).max()\n    period9_low = df['Low'].rolling(window=9,center=False).min()\n    df['turning_line'] = (period9_high + period9_low) \/ 2\n    \n    # Standard Line\n    period26_high = df['High'].rolling(window=26,center=False).max()\n    period26_low = df['Low'].rolling(window=26,center=False).min()\n    df['standard_line'] = (period26_high + period26_low) \/ 2\n    \n    # Leading Span 1\n    df['ichimoku_span1'] = ((df['turning_line'] + df['standard_line']) \/ 2).shift(26)\n    \n    # Leading Span 2\n    period52_high = df['High'].rolling(window=52,center=False).max()\n    period52_low = df['Low'].rolling(window=52,center=False).min()\n    df['ichimoku_span2'] = ((period52_high + period52_low) \/ 2).shift(26)\n    \n    # The most current closing price plotted 22 time periods behind (optional)\n    df['chikou_span'] = df['Close'].shift(-22) # 22 according to investopedia","4f91e91c":"for stock in range(len(TechIndicator)):\n    ichimoku(TechIndicator[stock])\n    TechIndicator[stock] = TechIndicator[stock].fillna(0)\nTechIndicator[2].tail()","059d34dd":"def WillR(df):\n    highest_high = df['High'].rolling(window=14,center=False).max()\n    lowest_low = df['Low'].rolling(window=14,center=False).min()\n    df['WillR'] = (-100) * ((highest_high - df['Close']) \/ (highest_high - lowest_low))\n","007fc6a7":"for stock in range(len(TechIndicator)):\n    WillR(TechIndicator[stock])\n    TechIndicator[stock] = TechIndicator[stock].fillna(0)\nTechIndicator[2].tail()","0822b400":"def MINMAX(df):\n    df['MIN_Volume'] = df['Volume'].rolling(window=14,center=False).min()\n    df['MAX_Volume'] = df['Volume'].rolling(window=14,center=False).max()","187726b2":"for stock in range(len(TechIndicator)):\n    MINMAX(TechIndicator[stock])\n    TechIndicator[stock] = TechIndicator[stock].fillna(0)\nTechIndicator[2].tail()","7f4553a8":"def KAMA(price, n=10, pow1=2, pow2=30):\n    ''' kama indicator '''    \n    ''' accepts pandas dataframe of prices '''\n\n    absDiffx = abs(price - price.shift(1) )  \n\n    ER_num = abs( price - price.shift(n) )\n    ER_den = absDiffx.rolling(window=n,center=False).sum()\n    ER = ER_num \/ ER_den\n\n    sc = ( ER*(2.0\/(pow1+1)-2.0\/(pow2+1.0))+2\/(pow2+1.0) ) ** 2.0\n\n\n    answer = np.zeros(sc.size)\n    N = len(answer)\n    first_value = True\n\n    for i in range(N):\n        if sc[i] != sc[i]:\n            answer[i] = np.nan\n        else:\n            if first_value:\n                answer[i] = price[i]\n                first_value = False\n            else:\n                answer[i] = answer[i-1] + sc[i] * (price[i] - answer[i-1])\n    return answer","53150a97":"for stock in range(len(TechIndicator)):\n    TechIndicator[stock]['KAMA'] = KAMA(TechIndicator[stock]['Close'])\n    TechIndicator[stock] = TechIndicator[stock].fillna(0)\nTechIndicator[4].tail()","b33cf338":"columns2Drop = ['26_ema', '12_ema','tp','rmf','pmf','nmf','mfr']\nfor stock in range(len(TechIndicator)):\n    TechIndicator[stock] = TechIndicator[stock].drop(labels = columns2Drop, axis=1)\nTechIndicator[2].head()","2915e29b":"TechIndicator[0].head()","8006158a":"for stock in range(len(TechIndicator)):\n    TechIndicator[stock].index = TechIndicator[stock]['Date']\n    TechIndicator[stock] = TechIndicator[stock].drop(labels = ['Date'], axis = 1)\n","24842070":"TechIndicator[0].head()","62e6fba7":"%matplotlib inline\n\n# RSI Plot\n\nfig = plt.figure(figsize=(20,25))\nfor i in range(8):\n    ax = plt.subplot(4,2,i+1)\n    ax.plot(TechIndicator[i].index, TechIndicator[i]['RSI_14D'])\n    ax.set_title(str(TechIndicator[i]['Label'][0]))\n    ax.set_xlabel(\"Date\")\n    ax.set_ylabel(\"Relative Strength Index\")\n    plt.xticks(rotation=30)\nfig.tight_layout()\n","7cb5f737":"# Volume Plain plot\nfig = plt.figure(figsize=(20,25))\nfor i in range(8):\n    ax = plt.subplot(8,1,i+1)\n    ax.plot(TechIndicator[i].index, TechIndicator[i]['Volume_plain'], 'b')\n    ax.set_title(str(TechIndicator[i]['Label'][0]))\n    ax.set_xlabel(\"Date\")\n    ax.set_ylabel(\"Volume\")\n    plt.xticks(rotation=30)\nfig.tight_layout()","0caec8e0":"plt.style.use('fivethirtyeight')\n\nfig = plt.figure(figsize=(20,25))\nfor i in range(8):\n    ax = plt.subplot(4,2,i+1)\n    ax.fill_between(TechIndicator[i].index, TechIndicator[i]['BB_Upper_Band'], TechIndicator[i]['BB_Lower_Band'], color='grey', label=\"Band Range\")\n    # Plot Adjust Closing Price and Moving Averages\n    ax.plot(TechIndicator[i].index, TechIndicator[i]['Close'], color='red', lw=2, label=\"Close\")\n    ax.plot(TechIndicator[i].index, TechIndicator[i]['BB_Middle_Band'], color='black', lw=2, label=\"Middle Band\")\n    ax.set_title(\"Bollinger Bands for \" + str(TechIndicator[i]['Label'][0]))\n    ax.legend()\n    ax.set_xlabel(\"Date\")\n    ax.set_ylabel(\"Close Prices\")\n    plt.xticks(rotation=30)\nfig.tight_layout()\n#.dt.to_pydatetime()","73bbd8de":"# Aroon Oscillator Plot\nplt.style.use('seaborn-whitegrid')\nfig = plt.figure(figsize=(20,25))\nfor i in range(8):\n    ax = plt.subplot(4,2,i+1)\n    ax.fill(TechIndicator[i].index, TechIndicator[i]['Aroon_Oscillator'],'g', alpha = 0.5, label = \"Aroon Oscillator\")\n    ax.plot(TechIndicator[i].index, TechIndicator[i]['Close'], 'r', label=\"Close\")\n    ax.set_title(\"Aroon Oscillator for \" +str(TechIndicator[i]['Label'][0]))\n    ax.legend()\n    ax.set_xlabel(\"Date\")\n    ax.set_ylabel(\"Close Prices\")\n    plt.xticks(rotation=30)\nfig.tight_layout()","43566a78":"# PRice Volume Trend Plot\nfig = plt.figure(figsize=(20,25))\nfor i in range(8):\n    ax = plt.subplot(8,1,i+1)\n    ax.plot(TechIndicator[i].index, TechIndicator[i]['PVT'], 'black')\n    ax.set_title(\"Price Volume Trend of \" +str(TechIndicator[i]['Label'][0]))\n    ax.set_xlabel(\"Date\")\n    ax.set_ylabel(\"Price Volume trend\")\n    plt.xticks(rotation=30)\nfig.tight_layout()","4d14ebd8":"# Acceleration band Plot\n\nfig = plt.figure(figsize=(20,25))\nfor i in range(8):\n    ax = plt.subplot(4,2,i+1)\n    ax.fill_between(TechIndicator[i].index, TechIndicator[i]['AB_Upper_Band'], TechIndicator[i]['AB_Lower_Band'], color='grey', label = \"Band-Range\")\n    # Plot Adjust Closing Price and Moving Averages\n    ax.plot(TechIndicator[i].index, TechIndicator[i]['Close'], color='red', lw=2, label = \"Close\")\n    ax.plot(TechIndicator[i].index, TechIndicator[i]['AB_Middle_Band'], color='black', lw=2, label=\"Middle_Band\")\n    ax.set_title(\"Acceleration Bands for \" + str(TechIndicator[i]['Label'][0]))\n    ax.legend()\n    ax.set_xlabel(\"Date\")\n    ax.set_ylabel(\"Close Prices\")\n    plt.xticks(rotation=30)\nfig.tight_layout()","9ec8fd7c":"# Stochastic Oscillator plots\nplt.style.use('seaborn-whitegrid')\nfig = plt.figure(figsize=(20,25))\nfor i in range(8):\n    ax = plt.subplot(4,2,i+1)\n    ax.plot(TechIndicator[i].index, TechIndicator[i]['STOK'], 'blue', label=\"%K\")\n    ax.plot(TechIndicator[i].index, TechIndicator[i]['STOD'], 'red', label=\"%D\")\n    ax.plot(TechIndicator[i].index, TechIndicator[i]['Close'], color='black', lw=2, label = \"Close\")\n    ax.set_title(\"Stochastic Oscillators of \" +str(TechIndicator[i]['Label'][0]))\n    ax.legend()\n    ax.set_xlabel(\"Date\")\n    ax.set_ylabel(\"Close Price\")\n    plt.xticks(rotation=30)\nfig.tight_layout()","a96918e7":"# Chaikin Money Flow Plots\nimport matplotlib.gridspec as gridspec\n\nfig = plt.figure(figsize=(25,40))\nouter = gridspec.GridSpec(4, 2, wspace=0.2, hspace=0.2)\n\nfor i in range(8):\n    inner = gridspec.GridSpecFromSubplotSpec(2, 1,\n                    subplot_spec=outer[i], wspace=0.1, hspace=0.1)\n\n    for j in range(2):\n        ax = plt.Subplot(fig, inner[j])\n        if j==0:\n            t = ax.fill(TechIndicator[i].index, TechIndicator[i]['Chaikin_MF'],'b', alpha = 0.5, label = \"Chaikin MF\")\n            ax.set_title(\"Chaikin Money Flow for \" +str(TechIndicator[i]['Label'][0]))\n            t = ax.set_ylabel(\"Money Flow\")\n        else:\n            t = ax.plot(TechIndicator[i].index, TechIndicator[i]['Close'], 'r', label=\"Close\")\n            t = ax.set_ylabel(\"Close\")\n        ax.legend()\n        ax.set_xlabel(\"Date\")\n        \n        fig.add_subplot(ax)\nfig.tight_layout()","a80b5b82":"# Parabolic SAR, Rate of Change, Momentum and VWAP Plots\nfig = plt.figure(figsize=(20,25))\nfor i in range(8):\n    ax = plt.subplot(4,2,i+1)\n    ax.plot(TechIndicator[i].index, TechIndicator[i]['psar'], 'blue', label=\"PSAR\", alpha = 0.5)\n    ax.plot(TechIndicator[i].index, TechIndicator[i]['ROC'], 'red', label=\"ROC\", alpha = 0.5)\n    ax.plot(TechIndicator[i].index, TechIndicator[i]['Momentum'], 'green', label=\"Momentum\", alpha = 0.5)\n    ax.plot(TechIndicator[i].index, TechIndicator[i]['VWAP'], 'cyan', label=\"VWAP\", alpha = 0.5)\n    ax.set_title(\"PSAR, ROC, Momentum and VWAP of \" +str(TechIndicator[i]['Label'][0]))\n    ax.legend()\n    ax.set_xlabel(\"Date\")\n    ax.set_ylabel(\"Close Price\")\n    plt.xticks(rotation=30)\nfig.tight_layout()","e48ea977":"# Commodity Channel Index, Triple Exponential Moving Average On Banalance Volume Plots\n\nfig = plt.figure(figsize=(25,80))\nouter = gridspec.GridSpec(4, 2, wspace=0.2, hspace=0.2)\n\nfor i in range(8):\n    inner = gridspec.GridSpecFromSubplotSpec(3, 1,\n                    subplot_spec=outer[i], wspace=0.3, hspace=0.3)\n\n    for j in range(3):\n        ax = plt.Subplot(fig, inner[j])\n        if j==0:\n            t = ax.plot(TechIndicator[i].index, TechIndicator[i]['CCI'], 'green', label=\"CCI\")\n            t = ax.set_title(\"CCI for \" +str(TechIndicator[i]['Label'][0]))\n            t = ax.set_ylabel(\"Commodity Channel Index\")\n        elif j == 1:\n            t = ax.plot(TechIndicator[i].index, TechIndicator[i]['TEMA'], 'blue', label=\"TEMA\")\n            t = ax.set_title(\"TEMA for \" +str(TechIndicator[i]['Label'][0]))\n            t = ax.set_ylabel(\"TripleExponentiaL MA\")\n        else:\n            t = ax.plot(TechIndicator[i].index, TechIndicator[i]['OBV'], 'red', label=\"OBV\")\n            t = ax.set_title(\"OBV for \" +str(TechIndicator[i]['Label'][0]))\n            t = ax.set_ylabel(\"On Balance Volume\")\n        ax.legend()\n        #ax.set_title(\"CCI, TEMA, OBV for \" +str(techindi2[i]['Label'][0]))\n        ax.set_xlabel(\"Date\")\n        \n        fig.add_subplot(ax)\nfig.tight_layout()","c972fea5":"# Normalized Average True range Plots\nplt.style.use('ggplot')\nfig = plt.figure(figsize=(20,25))\nfor i in range(8):\n    ax = plt.subplot(4,2,i+1)\n    ax.plot(TechIndicator[i].index, TechIndicator[i]['NATR'], 'red', label=\"NATR\", alpha = 0.5)\n    ax.plot(TechIndicator[i].index, TechIndicator[i]['Close'], 'cyan', label=\"Close\", alpha = 0.5)\n    ax.set_title(\"NATR of \" +str(TechIndicator[i]['Label'][0]))\n    ax.legend()\n    ax.set_xlabel(\"Date\")\n    ax.set_ylabel(\"Close Price\")\n    plt.xticks(rotation=30)\nfig.tight_layout()","8e964eed":"# Keltner Channels Plots\n\nfig = plt.figure(figsize=(20,25))\nfor i in range(8):\n    ax = plt.subplot(4,2,i+1)\n    ax.fill_between(TechIndicator[i].index, TechIndicator[i]['Kelch_Upper'], TechIndicator[i]['Kelch_Down'], \n                    color='blue', label = \"Band-Range\", alpha = 0.5)\n    # Plot Adjust Closing Price and Moving Averages\n    ax.plot(TechIndicator[i].index, TechIndicator[i]['Close'], color='red', label = \"Close\", alpha = 0.5)\n    ax.plot(TechIndicator[i].index, TechIndicator[i]['Kelch_Middle'], color='black', label=\"Middle_Band\", alpha = 0.5)\n    ax.set_title(\"Keltner Channels for \" + str(TechIndicator[i]['Label'][0]))\n    ax.legend()\n    ax.set_xlabel(\"Date\")\n    ax.set_ylabel(\"Close Prices\")\n    plt.xticks(rotation=30)\nfig.tight_layout()","1f69c18f":"# Average Directional Index\n\nplt.style.use('seaborn-whitegrid')\nfig = plt.figure(figsize=(30,25))\nfor i in range(8):\n    ax = plt.subplot(4,2,i+1)\n    ax.plot(TechIndicator[i].index, TechIndicator[i]['plusDI'], 'green', label=\"+DI\", alpha = 0.5)\n    ax.plot(TechIndicator[i].index, TechIndicator[i]['minusDI'], 'cyan', label=\"-DI\", alpha = 0.5)\n    ax.plot(TechIndicator[i].index, TechIndicator[i]['ADX'], 'red', label=\"ADX\", alpha = 0.5)\n    ax.set_title(\"Average Directional Index of \" +str(TechIndicator[i]['Label'][0]))\n    ax.legend()\n    ax.set_xlabel(\"Date\")\n    ax.set_ylabel(\"Price\")\n    plt.xticks(rotation=30)\nfig.tight_layout()","efc9dfe9":"# Moving Average Convergence Divergence, Adaptive Moving Avergae Plots\nplt.style.use('seaborn-whitegrid')\nfig = plt.figure(figsize=(20,25))\nfor i in range(8):\n    ax = plt.subplot(4,2,i+1)\n    ax.plot(TechIndicator[i].index, TechIndicator[i]['MACD'], 'green', label=\"MACD\", alpha = 0.5)\n    ax.plot(TechIndicator[i].index, TechIndicator[i]['KAMA'], 'blue', label=\"AMA\", alpha = 0.5)\n    ax.plot(TechIndicator[i].index, TechIndicator[i]['Close'], 'red', label=\"Close\", alpha = 0.5)\n    ax.set_title(\"MACD and KAMA of \" +str(TechIndicator[i]['Label'][0]))\n    ax.legend()\n    ax.set_xlabel(\"Date\")\n    ax.set_ylabel(\"Price\")\n    plt.xticks(rotation=30)\nfig.tight_layout()","c33ef369":"# William %R, Money Flow\nfig = plt.figure(figsize=(25,50))\nouter = gridspec.GridSpec(4, 2, wspace=0.2, hspace=0.2)\n\nfor i in range(8):\n    inner = gridspec.GridSpecFromSubplotSpec(3, 1,\n                    subplot_spec=outer[i], wspace=0.2, hspace=0.2)\n\n    for j in range(3):\n        ax = plt.Subplot(fig, inner[j])\n        if j==0:\n            t = ax.plot(TechIndicator[i].index, TechIndicator[i]['WillR'], 'green', label=\"William %R\")\n            t = ax.set_title(\"William %R for \" +str(TechIndicator[i]['Label'][0]))\n            t = ax.set_ylabel(\"Will%R\")\n        elif j ==1:\n            t = ax.plot(TechIndicator[i].index, TechIndicator[i]['Money_Flow_Index'], 'red', label=\"Money Flow Index\")\n            \n            t = ax.set_title(\"Money Flow Index for \" +str(TechIndicator[i]['Label'][0]))\n            t = ax.set_ylabel(\"MFI\")\n        else:\n            t = ax.plot(TechIndicator[i].index, TechIndicator[i]['Volume'], 'blue', label=\"Volume\", alpha = 0.5)\n            t = ax.plot(TechIndicator[i].index, TechIndicator[i]['MIN_Volume'], 'pink', label=\"MIN_Volume\", alpha = 0.5)\n            t = ax.plot(TechIndicator[i].index, TechIndicator[i]['MAX_Volume'], 'lightgreen', label=\"MAXVolume\",  alpha = 0.5)\n            t = ax.set_title(\"MINMAX Volume for \" +str(TechIndicator[i]['Label'][0]))\n            t = ax.set_ylabel(\"Volume\")\n        ax.legend()\n        #ax.set_title(\"CCI, TEMA, OBV for \" +str(techindi2[i]['Label'][0]))\n        ax.set_xlabel(\"Date\")\n        \n        fig.add_subplot(ax)\nfig.tight_layout()","b2a1b0db":"# ichimoku Plots turning_line\tstandard_line\tichimoku_span1\tichimoku_span2\tchikou_span\n\nfig = plt.figure(figsize=(20,25))\nfor i in range(8):\n    ax = plt.subplot(4,2,i+1)\n    ax.fill_between(TechIndicator[i].index, TechIndicator[i]['ichimoku_span1'], TechIndicator[i]['ichimoku_span2'], \n                    color='blue', label = \"ichimoku cloud\", alpha = 0.5)\n    # Plot Adjust Closing Price and Moving Averages\n    ax.plot(TechIndicator[i].index, TechIndicator[i]['turning_line'], color='red', label = \"Tenkan-sen\", alpha = 0.4)\n    ax.plot(TechIndicator[i].index, TechIndicator[i]['standard_line'], color='cyan', label=\"Kijun-sen\", alpha = 0.3)\n    ax.plot(TechIndicator[i].index, TechIndicator[i]['chikou_span'], color='green', label=\"Chikou-span\", alpha = 0.2)\n    ax.set_title(\"Ichimoku for \" + str(TechIndicator[i]['Label'][0]))\n    ax.legend()\n    ax.set_xlabel(\"Date\")\n    ax.set_ylabel(\"Prices\")\n    plt.xticks(rotation=30)\nfig.tight_layout()","03bd1988":"### Calculation of Triple Exponential Moving Average","9d913df5":"### Calculation of MINMAX","1bd9308f":"### Calculation of Aroon Oscillator","4e9e66b7":"Typical Price = (High + Low + Close)\/3\n\nRaw Money Flow = Typical Price x Volume\n\nThe money flow is divided into positive and negative money flow.\n\n- Positive money flow is calculated by adding the money flow of all the days where the typical price is higher than the previous day's typical price.\n- Negative money flow is calculated by adding the money flow of all the days where the typical price is lower than the previous day's typical price.\n- If typical price is unchanged then that day is discarded.\n\nMoney Flow Ratio = (14-period Positive Money Flow)\/(14-period Negative Money Flow)\n\nMoney Flow Index = 100 - 100\/(1 + Money Flow Ratio)","cf627c09":"If the closing price is above the prior close price then: \nCurrent OBV = Previous OBV + Current Volume\n\nIf the closing price is below the prior close price then: \nCurrent OBV = Previous OBV  -  Current Volume\n\nIf the closing prices equals the prior close price then:\nCurrent OBV = Previous OBV (no change)","a6c1362b":"### Calculation of Commodity Channel Index","50cb6924":"### Calculation of On Balance Volume","a780c5b0":"## Add various Technical Indicators in the dataframe","0e05a8e5":"Turning Line = ( Highest High + Lowest Low\n ) \/ 2, for the past 9 days\n\nStandard Line = ( Highest High + Lowest Low\n ) \/ 2, for the past 26 days\n\nLeading Span 1 = ( Standard Line + Turning\n Line ) \/ 2, plotted 26 days ahead of today\n\nLeading Span 2 = ( Highest High + Lowest\n Low ) \/ 2, for the past 52 days, plotted 26 days ahead of today\n\nCloud = Shaded Area between Span 1 and Span\n 2","33080551":"### Calculation of Money Flow Index","d3c2f338":"I have also tried prediction of movement of stock market based on this data. You can refer to that kernel here: https:\/\/www.kaggle.com\/kratisaxena\/lstm-gru-models-for-stock-movement-analysis","c126c7e8":"## Drop unwanted columns","92be88a7":"## Drop Unwanted Columns","0770680d":"### Calculation of Parabolic SAR","3c25e979":"%R = -100 * ( ( Highest High - Close) \/ (\n Highest High - Lowest Low ) )","6e604735":"### Calculation of Adaptive Moving Average","35d0a1be":"### Calculation of Price Rate of Change","86ca77f7":"### Calculation of Volume Weighted Average Price","e0d76a49":"### Calculation of Relative Strength Index (RSI)","d53db55c":"MACD: (12-day EMA - 26-day EMA)","e8a1055d":"### Calculation of MACD","f4e5cfbe":"### Calculation of Chaikin Money Flow","b88f0897":"PVT = [((CurrentClose - PreviousClose) \/ PreviousClose) x Volume] + PreviousPVT","fb1836b3":"Triple Exponential MA Formula:\n\nT-EMA = (3*EMA \u2013 3*EMA(EMA)) + EMA(EMA(EMA))\n\nWhere:\n\nEMA = EMA(1) + \u03b1 * (Close \u2013 EMA(1))\n\n\u03b1 = 2 \/ (N + 1)\n\nN = The smoothing period.","519d53cf":"### Calculation of Bollinger Bands","da5e27a8":"### Calculations of Ichimoku Cloud","edae8724":"### Read data into dataframes","890a882d":"# Visualization of technical indicators","f950850d":"### Calculation of Momentum ","9db6bcc7":"### Calcualtion of Keltner Channels","84bb2765":"### Calculation of William %R","d4ed1add":"True Range = Highest of (HIgh - low, abs(High - previous close), abs(low - previous close))\n\nAverage True Range = 14 day MA of True Range\n\nNormalized Average True Range = ATR \/ Close * 100","bc723c6e":"Calculating the DMI can actually be broken down into two parts. \nFirst, calculating the +DI and -DI, and second, calculating the ADX.\n\nTo calculate the +DI and -DI you need to find the +DM and -DM (Directional Movement). \n+DM and -DM are calculated using the High, Low and Close for each period. \nYou can then calculate the following:\n\nCurrent High - Previous High = UpMove\nPrevious Low - Current Low = DownMove\n\nIf UpMove > DownMove and UpMove > 0, then +DM = UpMove, else +DM = 0\nIf DownMove > Upmove and Downmove > 0, then -DM = DownMove, else -DM = 0\n\nOnce you have the current +DM and -DM calculated, the +DM and -DM lines can be \ncalculated and plotted based on the number of user defined periods.\n\n+DI = 100 times Exponential Moving Average of (+DM \/ Average True Range)\n-DI = 100 times Exponential Moving Average of (-DM \/ Average True Range)\n\nNow that -+DX and -DX have been calculated, the last step is calculating the ADX.\n\nADX = 100 times the Exponential Moving Average of the Absolute Value of (+DI - -DI) \/ (+DI + -DI)","98699878":"### Calculation of Price Volume Trend","95e7c96b":"### Calculation of Normalized Average True Range","01c0ba69":"There are many types of Technical Indicators. \nThe Technical Indicators we are considering are:\n- RSI, Volume (plain), Bollinger Bands, Aroon, Price Volume Trend, acceleration bands\n- Stochastic, Chaikin Money Flow, Parabolic SAR, Rate of Change, Volume weighted average Price, momentum\n- Commodity Channel Index, On Balance Volume, Keltner Channels, Triple Exponential Moving Average, Normalized Averager True Range ,directional movement indicators\n- MACD, Money flowindex , Ichimoku, William %R, Volume MINMAX, adaptive moving average","f90821d6":"### Calculation of Average Directional Movement Index (ADX)","15eeca02":"### Calculation of Stochastic Oscillator (%K and %D)","97a21d96":"### Calculation of Acceleration Bands","b78c0d38":"## Drop Unwanted Columns"}}