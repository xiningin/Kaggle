{"cell_type":{"9bcd3678":"code","b669bc44":"code","cbd4ccaf":"code","f2982e5d":"code","57125902":"code","136228f4":"code","8cbc9cda":"code","5fdfe7ca":"code","eaf62d42":"code","09e54c4f":"code","f026a5a7":"code","2712d571":"code","dc834374":"code","d36f7bcc":"code","cc951269":"code","47c55a6f":"code","f10677e8":"code","00606a25":"code","2a0d8a39":"code","fbfe6602":"code","e274c710":"code","69e4aa4a":"code","51007bea":"code","50f54444":"code","808b4413":"code","e662f78c":"code","d53a5d47":"code","13f36e03":"code","4a2050da":"code","86133e54":"code","e77c831a":"code","5fd8145f":"code","b58f35d6":"code","5bade529":"code","4be35f68":"code","4c610e47":"code","a9241d77":"code","e724fefc":"code","1a3648aa":"code","19f9bd72":"code","d2988e4d":"code","15e1f15a":"code","661e0c10":"code","720bb15b":"code","58b7cdd7":"markdown","58bca1fc":"markdown","72722ddf":"markdown","a44658c7":"markdown","b643982f":"markdown","4d9e916b":"markdown","d4587cae":"markdown","b27f7a27":"markdown","87cf7f0c":"markdown","2a325291":"markdown","be355a9e":"markdown","32bd56e2":"markdown","4fc354d2":"markdown","bff2a1d3":"markdown","900a72e7":"markdown","8b588140":"markdown","c8758916":"markdown","1d453448":"markdown","a9b60626":"markdown","e4f9e85c":"markdown","55235a74":"markdown","b52fe2cb":"markdown","f5cb69a0":"markdown","d60244a9":"markdown","5afba340":"markdown","05621a00":"markdown","9e93f88f":"markdown","1f1bb81c":"markdown","a51d477f":"markdown","891cc2d6":"markdown","2b124ca0":"markdown","e0817a66":"markdown","ea80bd38":"markdown","b409c5c8":"markdown","9b143b63":"markdown","1b9e4f3c":"markdown"},"source":{"9bcd3678":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport missingno as msno","b669bc44":"df = pd.read_csv(\"..\/input\/pima-indians-diabetes-database\/diabetes.csv\")\ndf.head()","cbd4ccaf":"# see the column names and its datatypes\ndf.info()","f2982e5d":"#shape:\ndf.shape","57125902":"df.describe()","136228f4":"features = df.columns\ncols = (df[features] == 0).sum()\nprint(cols)","8cbc9cda":"df[['Glucose','BloodPressure','SkinThickness','Insulin','BMI']] = df[['Glucose','BloodPressure','SkinThickness','Insulin','BMI']].replace(0,np.NaN)","5fdfe7ca":"df.isnull().sum()","eaf62d42":"msno.matrix(df[['Glucose','BloodPressure','SkinThickness','Insulin','BMI']])","09e54c4f":"#Replace the null values with the median of that column:\n\ndf['Glucose'].fillna(df['Glucose'].median(), inplace =True)\n\ndf['BloodPressure'].fillna(df['BloodPressure'].median(), inplace =True)\n\ndf['BMI'].fillna(df['BMI'].median(), inplace =True)","f026a5a7":"by_Glucose_Age_Insulin_Grp = df.groupby(['Glucose'])\n\ndef fill_Insulin(series):\n    return series.fillna(series.median())\ndf['Insulin'] = by_Glucose_Age_Insulin_Grp['Insulin'].transform(fill_Insulin)","2712d571":"df['Insulin'] = df['Insulin'].fillna(df['Insulin'].mean())","dc834374":"by_BMI_Insulin = df.groupby(['BMI'])\n\ndef fill_Skinthickness(series):\n    return series.fillna(series.mean())\ndf['SkinThickness'] = by_BMI_Insulin['SkinThickness'].transform(fill_Skinthickness)","d36f7bcc":"df['SkinThickness'].fillna(df['SkinThickness'].mean(),inplace= True)","cc951269":"df.isnull().sum()","47c55a6f":"import matplotlib.style as style\nstyle.available\n\nstyle.use('seaborn-pastel')\nlabels = [\"Healthy\", \"Diabetic\"]\ndf['Outcome'].value_counts().plot(kind='pie',labels=labels, subplots=True,autopct='%1.0f%%', labeldistance=1.2, figsize=(9,9))","f10677e8":"from matplotlib.pyplot import figure, show\n\nfigure(figsize=(8,6))\nax = sns.countplot(x=df['Outcome'], data=df,palette=\"husl\")\nax.set_xticklabels([\"Healthy\",\"Diabetic\"])\nhealthy, diabetics = df['Outcome'].value_counts().values\nprint(\"Samples of diabetic people: \", diabetics)\nprint(\"Samples of healthy people: \", healthy)","00606a25":"plt.figure()\nax = sns.distplot(df['Pregnancies'][df.Outcome == 1], color =\"darkturquoise\", rug = True)\nsns.distplot(df['Pregnancies'][df.Outcome == 0], color =\"lightcoral\",rug = True)\nplt.legend(['Diabetes', 'No Diabetes'])","2a0d8a39":"plt.figure()\nax = sns.distplot(df['Glucose'][df.Outcome == 1], color =\"darkturquoise\", rug = True)\nsns.distplot(df['Glucose'][df.Outcome == 0], color =\"lightcoral\", rug = True)\nplt.legend(['Diabetes', 'No Diabetes'])","fbfe6602":"plt.figure()\nax = sns.distplot(df['BloodPressure'][df.Outcome == 1], color =\"darkturquoise\", rug=True)\nsns.distplot(df['BloodPressure'][df.Outcome == 0], color =\"lightcoral\", rug=True)\nplt.legend(['Diabetes', 'No Diabetes'])","e274c710":"plt.figure()\nax = sns.distplot(df['SkinThickness'][df.Outcome == 1], color =\"darkturquoise\", rug=True)\nsns.distplot(df['SkinThickness'][df.Outcome == 0], color =\"lightcoral\", rug=True)\nplt.legend(['Diabetes', 'No Diabetes'])","69e4aa4a":"plt.figure()\nax = sns.distplot(df['Insulin'][df.Outcome == 1], color =\"darkturquoise\", rug=True)\nsns.distplot(df['Insulin'][df.Outcome == 0], color =\"lightcoral\", rug=True)\nplt.legend(['Diabetes', 'No Diabetes'])","51007bea":"plt.figure()\nax = sns.distplot(df['BMI'][df.Outcome == 1], color =\"darkturquoise\", rug=True)\nsns.distplot(df['BMI'][df.Outcome == 0], color =\"lightcoral\", rug=True)\nplt.legend(['Diabetes', 'No Diabetes'])","50f54444":"plt.figure()\nax = sns.distplot(df['DiabetesPedigreeFunction'][df.Outcome == 1], color =\"darkturquoise\", rug=True)\nsns.distplot(df['DiabetesPedigreeFunction'][df.Outcome == 0], color =\"lightcoral\", rug=True)\nplt.legend(['Diabetes', 'No Diabetes'])","808b4413":"plt.figure()\nax = sns.distplot(df['Age'][df.Outcome == 1], color =\"darkturquoise\", rug=True)\nsns.distplot(df['Age'][df.Outcome == 0], color =\"lightcoral\", rug=True)\nsns.distplot(df['Age'], color =\"green\", rug=True)\nplt.legend(['Diabetes', 'No Diabetes', 'all'])","e662f78c":"fig = plt.figure(figsize=(18,15))\ngs = fig.add_gridspec(3,3)\ngs.update(wspace=0.5, hspace=0.25)\nax0 = fig.add_subplot(gs[0,0])\nax1 = fig.add_subplot(gs[0,1])\nax2 = fig.add_subplot(gs[0,2])\nax3 = fig.add_subplot(gs[1,0])\nax4 = fig.add_subplot(gs[1,1])\nax5 = fig.add_subplot(gs[1,2])\nax6 = fig.add_subplot(gs[2,0])\nax7 = fig.add_subplot(gs[2,1])\nax8 = fig.add_subplot(gs[2,2])\n\nbackground_color = \"#c9c9ee\"\n# c9c9ee\ncolor_palette = [\"#f56476\",\"#ff8811\",\"#ff0040\",\"#ff7f6c\",\"#f0f66e\",\"#990000\"]\nfig.patch.set_facecolor(background_color) \nax0.set_facecolor(background_color) \nax1.set_facecolor(background_color)\nax2.set_facecolor(background_color)\nax3.set_facecolor(background_color)\nax4.set_facecolor(background_color)\nax5.set_facecolor(background_color)\nax6.set_facecolor(background_color)\nax7.set_facecolor(background_color)\nax8.set_facecolor(background_color)\n\n# Title of the plot\nax0.spines[\"bottom\"].set_visible(False)\nax0.spines[\"left\"].set_visible(False)\nax0.spines[\"top\"].set_visible(False)\nax0.spines[\"right\"].set_visible(False)\nax0.tick_params(left=False, bottom=False)\nax0.set_xticklabels([])\nax0.set_yticklabels([])\nax0.text(0.5,0.5,\n         'Boxenplot plot for various\\n features\\n_________________\\n\\n CREDIT: Naman Manchanda',\n         horizontalalignment='center',\n         verticalalignment='center',\n         fontsize=18, fontweight='bold',\n         fontfamily='serif',\n         color=\"#000000\")\n\n# Pregnancies \nax1.text(-0.18, 19, 'Pregnancies', fontsize=14, fontweight='bold', fontfamily='serif', color=\"#000000\")\nax1.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.boxenplot(ax=ax1,y=df['Pregnancies'],palette=[\"#f56476\"],width=0.6)\nax1.set_xlabel(\"\")\nax1.set_ylabel(\"\")\n\n# Glucose \nax2.text(-0.1, 217, 'Glucose', fontsize=14, fontweight='bold', fontfamily='serif', color=\"#000000\")\nax2.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.boxenplot(ax=ax2,y=df['Glucose'],palette=[\"#ff8811\"],width=0.6)\nax2.set_xlabel(\"\")\nax2.set_ylabel(\"\")\n\n# BloodPressure \nax3.text(-0.20, 132, 'BloodPressure', fontsize=14, fontweight='bold', fontfamily='serif', color=\"#000000\")\nax3.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.boxenplot(ax=ax3,y=df['BloodPressure'],palette=[\"#ff0040\"],width=0.6)\nax3.set_xlabel(\"\")\nax3.set_ylabel(\"\")\n\n# SkinThickness \nax4.text(-.2, 110, 'SkinThickness', fontsize=14, fontweight='bold', fontfamily='serif', color=\"#000000\")\nax4.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.boxenplot(ax=ax4,y=df['SkinThickness'],palette=[\"#ff7f6c\"],width=0.6)\nax4.set_xlabel(\"\")\nax4.set_ylabel(\"\")\n\n# Insulin \nax5.text(-0.10, 900, 'Insulin', fontsize=14, fontweight='bold', fontfamily='serif', color=\"#000000\")\nax5.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.boxenplot(ax=ax5,y=df['Insulin'],palette=[\"#f0f66e\"],width=0.6)\nax5.set_xlabel(\"\")\nax5.set_ylabel(\"\")\n\n# BMI \nax6.text(-0.08, 77, 'BMI', fontsize=14, fontweight='bold', fontfamily='serif', color=\"#000000\")\nax6.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.boxenplot(ax=ax6,y=df['BMI'],palette=[\"#990000\"],width=0.6)\nax6.set_xlabel(\"\")\nax6.set_ylabel(\"\")\n\n# DPF \nax7.text(-0.065, 2.8, 'DPF', fontsize=14, fontweight='bold', fontfamily='serif', color=\"#000000\")\nax7.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.boxenplot(ax=ax7,y=df['DiabetesPedigreeFunction'],palette=[\"#3339FF\"],width=0.6)\nax7.set_xlabel(\"\")\nax7.set_ylabel(\"\")\n\n# Age \nax8.text(-0.08, 86, 'Age', fontsize=14, fontweight='bold', fontfamily='serif', color=\"#000000\")\nax8.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.boxenplot(ax=ax8,y=df['Age'],palette=[\"#34495E\"],width=0.6)\nax8.set_xlabel(\"\")\nax8.set_ylabel(\"\")\n\n\n\nfor s in [\"top\",\"right\",\"left\"]:\n    ax1.spines[s].set_visible(False)\n    ax2.spines[s].set_visible(False)\n    ax3.spines[s].set_visible(False)\n    ax4.spines[s].set_visible(False)\n    ax5.spines[s].set_visible(False)\n    ax6.spines[s].set_visible(False)\n    ax7.spines[s].set_visible(False)\n    ax8.spines[s].set_visible(False)","d53a5d47":"plt.figure(dpi = 120,figsize= (5,4))\nmask = np.triu(np.ones_like(df.corr(),dtype = bool))\nsns.heatmap(df.corr(),mask = mask, fmt = \".2f\",annot=True,lw=1,cmap = 'plasma')\nplt.yticks(rotation = 0)\nplt.xticks(rotation = 90)\nplt.title('Correlation Heatmap')\nplt.show()","13f36e03":"sns.pairplot(df, hue=\"Outcome\",palette=\"husl\")","4a2050da":"x = df.iloc[:, :-1].values\ny = df.iloc[:, -1].values","86133e54":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size= 0.2, random_state= 0)","e77c831a":"print(\"Number transactions x_train dataset: \", x_train.shape)\nprint(\"Number transactions y_train dataset: \", y_train.shape)\nprint(\"Number transactions x_test dataset: \", x_test.shape)\nprint(\"Number transactions y_test dataset: \", y_test.shape)","5fd8145f":"from sklearn.preprocessing import StandardScaler \nsc = StandardScaler()\nx_train = sc.fit_transform(x_train)\nx_test = sc.transform(x_test)","b58f35d6":"from sklearn.metrics import confusion_matrix,classification_report,roc_curve,accuracy_score,auc","5bade529":"from sklearn.svm import SVC\n\nmodel=SVC(kernel='rbf')\nmodel.fit(x_train,y_train)","4be35f68":"y_pred=model.predict(x_test)\naccuracy_score(y_test,y_pred)","4c610e47":"print(classification_report(y_test,y_pred))","a9241d77":"fpr,tpr,_=roc_curve(y_test,y_pred)\n#calculate AUC\nroc_auc=auc(fpr,tpr)\n#plot of ROC curve for a specified class\nplt.figure()\nplt.plot(fpr,tpr,label='ROC curve(area= %2.f)' %roc_auc)\nplt.plot([0,1],[0,1],'k--')\nplt.xlim([0.0,1.0])\nplt.ylim([0.0,1.05])\nplt.xlabel('False positive rate')\nplt.ylabel('True positive rate')\nplt.title('ROC curve')\nplt.legend(loc='lower right')\nplt.grid()\nplt.show()","e724fefc":"from sklearn.ensemble import RandomForestClassifier\n\nclassifier=RandomForestClassifier()\nclassifier.fit(x_train,y_train)","1a3648aa":"Y_pred=classifier.predict(x_test)\naccuracy_score(y_test,Y_pred)","19f9bd72":"print(classification_report(y_test,Y_pred))","d2988e4d":"fpr,tpr,_=roc_curve(y_test,Y_pred)\n#calculate AUC\nroc_auc=auc(fpr,tpr)\n#print('ROC AUC: %0.2f' % roc_auc)\n#plot of ROC curve for a specified class\nplt.figure()\nplt.plot(fpr,tpr,label='ROC curve(area= %2.f)' %roc_auc)\nplt.plot([0,1],[0,1],'k--')\nplt.xlim([0.0,1.0])\nplt.ylim([0.0,1.05])\nplt.xlabel('False positive rate')\nplt.ylabel('True positive rate')\nplt.title('ROC curve')\nplt.legend(loc='lower right')\nplt.grid()\nplt.show()","15e1f15a":"from sklearn.neighbors import KNeighborsClassifier\n\nclf = KNeighborsClassifier(n_neighbors=3) \nclf.fit(x_train,y_train)  \nprint(clf.score(x_test,y_test))","661e0c10":"y_pred=clf.predict(x_test)\nprint(classification_report(y_test,y_pred))","720bb15b":"fpr,tpr,_=roc_curve(y_test,y_pred)\n#calculate AUC\nroc_auc=auc(fpr,tpr)\n#print('ROC AUC: %0.2f' % roc_auc)\n#plot of ROC curve for a specified class\nplt.figure()\nplt.plot(fpr,tpr,label='ROC curve(area= %2.f)' %roc_auc)\nplt.plot([0,1],[0,1],'k--')\nplt.xlim([0.0,1.0])\nplt.ylim([0.0,1.05])\nplt.xlabel('False positive rate')\nplt.ylabel('True positive rate')\nplt.title('ROC curve')\nplt.legend(loc='lower right')\nplt.grid()\nplt.show()","58b7cdd7":"<h1 style=\"font-size:200%; font-family:cursive; color:green; text-align:center;\">Please give an upvote, if you like & find this kernel helpful. Thank You!!!!!<\/h1> ","58bca1fc":"<h4 style=\"font-size:150%; font-family:cursive; color:#ff6666;\"><b>5.3 Distribution of BloodPressure<\/b><h4>","72722ddf":"<h4 style=\"font-size:150%; font-family:cursive; color:#ff6666;\"><b>5.7 Distribution of DiabetesPedigreeFunction<\/b><h4>","a44658c7":"<h4 style=\"font-size:150%; font-family:cursive; color:#ff6666;\"><b>5.2 Distribution of Glucose<\/b><h4>","b643982f":"<ul>\n    <li style=\"font-size:180%; font-family:Geneva;\">There is a huge variation in mean, and we can see there's no missing values, but for some of the columns like Glucose , BP, Skin Thickness,BMI has 0 as min value, which is not possible, hence we can treat this as missingvalues and impute accordingly.<\/li>\n<\/ul>","4d9e916b":"<h4 style=\"font-size:150%; font-family:cursive; color:#ff6666;\"><b>5.6 Distribution of BMI<\/b><h4>","d4587cae":"<h4 style=\"font-size:150%; font-family:cursive; color:#ff6666;\"><b>9.1 Split the data into test & train<\/b><\/h4>\n<ul>\n    <li style=\"font-size:150%; font-family:Geneva;\">The train-test split procedure is used to estimate the performance of machine learning algorithms when they are used to make predictions on data not used to train the model.<\/li>\n<\/ul>\n","b27f7a27":"<h4 style=\"font-size:150%; font-family:cursive; color:#ff6666;\"><b>5.4 Distribution of SkinThickness<\/b><h4>","87cf7f0c":"<h4 style=\"font-size:150%; font-family:cursive; color:#ff6666;\"><b>3.2 Handle: Insulin based on Glucose<\/b><h4>","2a325291":"<h1 style=\"font-size:300%; font-family:cursive; background:#ff6666; color:white; text-align:center; border:10px solid ; padding:25px;\">PIMA DIABETES - EDA | MODEL BUILDING <\/h1>","be355a9e":"<p style=\"font-size:180%; font-family:cursive;\">In this kernel, I have performed Exploratory Data Analysis, Data Preprocessing, Visualization of Features, Correlation Matrix, Model Building (SVM, RF, KNN).<\/p>","32bd56e2":"<center><h3 style=\"font-size:200%; font-family:cursive; color:#ff6666;\"><b>4. Visualization of Target Variable<\/b><\/h3><\/center>","4fc354d2":"<h4 style=\"font-size:150%; font-family:cursive; color:#ff6666;\"><b>9.3 SVM Model<\/b><\/h4>\n\n<ul>\n    <li style=\"font-size:150%; font-family:Geneva;\">Support Vector Machine or SVM is one of the most popular Supervised Learning algorithms, which is used for Classification as well as Regression problems. However, primarily, it is used for Classification problems in Machine Learning.<\/li>\n    <li style=\"font-size:150%; font-family:Geneva;\">The goal of the SVM algorithm is to create the best line or decision boundary that can segregate n-dimensional space into classes so that we can easily put the new data point in the correct category in the future. This best decision boundary is called a hyperplane.<\/li>\n<\/ul>","bff2a1d3":"<center><h3 style=\"font-size:200%; font-family:cursive; color:#ff6666;\"><b>9. MODEL BUILDING<\/b><\/h3><\/center>","900a72e7":"<h4 style=\"font-size:150%; font-family:cursive; color:#ff6666;\"><b>9.4 Random Forest Model<\/b><\/h4>\n<ul>\n    <li style=\"font-size:150%; font-family:Geneva;\">Random forest classifier creates a set of decision trees from randomly selected subset of training set. It then aggregates the votes from different decision trees to decide the final class of the test object.<\/li>\n    <li style=\"font-size:150%; font-family:Geneva;\">This works well because a single decision tree may be prone to a noise, but aggregate of many decision trees reduce the effect of noise giving more accurate results.<\/li>\n<\/ul>","8b588140":"<h4 style=\"font-size:150%; font-family:cursive; color:#ff6666;\"><b>9.2 Feature Scaling<\/b><\/h4>\n<ul>\n    <li style=\"font-size:150%; font-family:Geneva;\">Feature Scaling is a technique to standardize the independent features present in the data in a fixed range. It is performed during the data pre-processing to handle highly varying magnitudes or values or units. If feature scaling is not done, then a machine learning algorithm tends to weigh greater values, higher and consider smaller values as the lower values, regardless of the unit of the values.<\/li>\n    <li style=\"font-size:150%; font-family:Geneva;\"><b>Standard Scaler<\/b>: It is a very effective technique which re-scales a feature value so that it has distribution with 0 mean value and variance equals to 1.<\/li>\n<\/ul>\n","c8758916":"<h1 style=\"font-size:300%; font-family:cursive; background:#ff6666; color:white; text-align:center; border:10px solid; padding:25px;\">IMPLEMENTATION USING PYTHON<\/h1>","1d453448":"<center><h3 style=\"font-size:200%; font-family:cursive; color:#ff6666;\"><b>7. Correlation Matrix <\/b><\/h3><\/center>","a9b60626":"<h4 style=\"font-size:150%; font-family:cursive; color:#ff6666;\"><b>3.3 Skinthickness with respect to BMI<\/b><h4>","e4f9e85c":"<h4 style=\"font-size:150%; font-family:cursive; color:#ff6666;\"><b>5.8 Distribution of Age<\/b><h4>","55235a74":"<center><img src=\"https:\/\/www.purdue.edu\/hr\/CHL\/no-cost_Wellness\/images\/diabetes-banner.jpg\"><\/center>","b52fe2cb":"<h4 style=\"font-size:150%; font-family:cursive; color:#ff6666;\"><b>9.5 KNN Model<\/b><\/h4>\n<ul>\n    <li style=\"font-size:150%; font-family:Geneva;\">K-Nearest Neighbour is one of the simplest Machine Learning algorithms based on Supervised Learning technique. It can be used for Regression as well as for Classification but mostly it is used for the Classification problems.<\/li>\n    <li style=\"font-size:150%; font-family:Geneva;\">K-NN algorithm assumes the similarity between the new case\/data and available cases and put the new case into the category that is most similar to the available categories.<\/li>\n<\/ul>","f5cb69a0":"<h4 style=\"font-size:150%; font-family:cursive; color:#ff6666;\"><b>5.5 Distribution of Insulin<\/b><h4>","d60244a9":"<center><h3 style=\"font-size:200%; font-family:cursive; color:#ff6666;\"><b>1. Import Libraries & Load Dataset<\/b><\/h3><\/center>","5afba340":"<center><h3 style=\"font-size:200%; font-family:cursive; color:#ff6666;\"><b>10. Conclusion<\/b><\/h3><\/center>","05621a00":"<h4 style=\"font-size:150%; font-family:cursive; color:#ff6666;\"><b>5.1 Distribution of Pregnancies<\/b><h4>","9e93f88f":"<center><h3 style=\"font-size:200%; font-family:cursive; color:#ff6666;\"><b>5. Distribution of other features w.r.t Outcome<\/b><\/h3><\/center>","1f1bb81c":"<center><h3 style=\"font-size:200%; font-family:cursive; color:#ff6666;\"><b>8. Pair Plot<\/b><\/h3><\/center>","a51d477f":"<h2 style=\"font-size:250%; font-family:cursive; color:#ff6666;\"><b>Problem Statement:<\/b><h2>\n    \n<p style=\"font-size:100%; font-family:Geneva\">Diabetes is one of the deadliest diseases in the world. It is not only a disease but also creator of different kinds of diseases like heart attack, blindness etc. The normal identifying process is that patients need to visit a diagnostic center, consult their doctor, and sit tight for a day or more to get their reports.<\/p>\n<p style=\"font-size:100%; font-family:Geneva\">So, the objective of this project is to identify whether the patient has diabetes or not based on diagnostic measurements.<\/p>\n    \n<h2 style=\"font-size:250%; font-family:cursive; color:#ff6666;\"><b>What is Diabetes ?<\/b><h2>\n<ul>\n    <li style=\"font-size:100%; font-family:Geneva\">Diabetes is a group of diseases in which the body doesn\u2019t produce enough or any insulin, doesn\u2019t properly use the insulin that is produced, or exhibits a combination of both. When any of these things happens, the body is unable to get sugar from the blood into the cells. That leads to high blood sugar levels.<\/li>\n    <br>\n    <li style=\"font-size:100%; font-family:Geneva\">Glucose, the form of sugar found in your blood, is one of your main energy sources. A lack of insulin or resistance to insulin causes sugar to build up in your blood. This can lead to many health problems.<\/li>\n    <br>\n    <li style=\"font-size:100%; font-family:Geneva\">The three main types of diabetes are: <b>type 1 diabetes, type 2 diabetes, gestational diabetes<\/b>.<\/li>\n<\/ul>\n    \n<h2 style=\"font-size:250%; font-family:cursive; color:#ff6666;\"><b>About Dataset:<\/b><h2>    \n<ul>\n    <li style=\"font-size:100%; font-family:Geneva\"><b>Pregnancies:<\/b> No. of times pregnant<\/li>\n    <li style=\"font-size:100%; font-family:Geneva\"><b>Glucose:<\/b> Plasma Glucose Concentration (mg\/dl)<\/li>\n    <li style=\"font-size:100%; font-family:Geneva\"><b>Blood Pressure:<\/b> Diastolic Blood Pressure(mmHg)<\/li>\n    <li style=\"font-size:100%; font-family:Geneva\"><b>Skin Thickness:<\/b>A value used to estimate body fat. Normal Triceps SkinFold Thickness in women is 23mm. Higher thickness leads to obesity and chances of diabetes increases.<\/li>\n    <li style=\"font-size:100%; font-family:Geneva\"><b>Insulin:<\/b> 2-Hour Serum Insulin (mu U\/ml)<\/li>\n    <li style=\"font-size:100%; font-family:Geneva\"><b>BMI:<\/b> Body Mass Index (weight in kg\/ height in m2)<\/li>\n    <li style=\"font-size:100%; font-family:Geneva\"><b>Diabetes Pedigree Function:<\/b>  It provides information about diabetes history in relatives and genetic relationship of those relatives with patients. Higher Pedigree Function means patient is more likely to have diabetes.<\/li>\n    <li style=\"font-size:100%; font-family:Geneva\"><b>Age:<\/b>Age (years)<\/li>\n    <li style=\"font-size:100%; font-family:Geneva\"><b>Outcome:<\/b> Class Variable (0 or 1) where \u20180\u2019 denotes patient is not having diabetes and \u20181\u2019 denotes patient having diabetes.<\/li>\n<\/ul>\n","891cc2d6":"<center><h3 style=\"font-size:200%; font-family:cursive; color:#ff6666;\"><b>2. Descriptive Statistics of Data<\/b><\/h3><\/center>","2b124ca0":"<center><h3 style=\"font-size:200%; font-family:cursive; color:#ff6666;\"><b>6. BoxPlot to check for Outliers<\/b><\/h3><\/center>","e0817a66":"<ul>\n    <li style=\"font-size:180%; font-family:Geneva;\">There are some values in Insulin, that cannot be zero. So, need to handle them by imputing.<\/li>\n<\/ul>","ea80bd38":"<center><h3 style=\"font-size:200%; font-family:cursive; color:#ff6666;\"><b>3. Handle the Columns with value '0'<\/b><\/h3><\/center>","b409c5c8":"<p style=\"font-size:180%; font-family:Geneva; text-align:center;\"><b>\"MISSING VALUES ARE HANDLED\"<\/b><\/p>","9b143b63":"<ul>\n    <li style=\"font-size:180%; font-family:Geneva;\">We cannot drop these values, as our data is very small. So let's handle them.<\/li>\n<\/ul>","1b9e4f3c":"<h4 style=\"font-size:150%; font-family:cursive; color:#ff6666;\"><b>3.1 Handle: Glucose, BloodPressure, BMI<\/b><h4>"}}