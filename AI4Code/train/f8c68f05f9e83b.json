{"cell_type":{"e8428a95":"code","c6fe8f46":"code","aad82aed":"code","d3cdb169":"code","67eece40":"code","3f5a8454":"code","74fa681c":"code","11027b1b":"code","ab31ab87":"code","f7ad9093":"code","2e46c93a":"code","fbe84f14":"code","789fe40d":"code","47cd59b9":"code","5c31ddcc":"code","1181787b":"code","3c4f392a":"code","0f450a3f":"code","15159597":"code","ba5a68ec":"code","24607d8f":"code","28fdfc30":"code","e9c5beb7":"code","10b88d7c":"markdown","c1ab0c33":"markdown","1443c51f":"markdown","2cb34db4":"markdown","ecef19e3":"markdown","f5b92901":"markdown","1f3c2db9":"markdown","7aa2e768":"markdown","740a88fd":"markdown","1891492a":"markdown","490c64d5":"markdown","f8bb5812":"markdown","3c11e0ec":"markdown","db08f6c6":"markdown","ebb9145a":"markdown","39df2846":"markdown","c3cbec51":"markdown","36c60c15":"markdown"},"source":{"e8428a95":"#importing necessery libraries for future analysis of the dataset\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\n%matplotlib inline\nimport seaborn as sns\n\ncsv_file = '..\/input\/new-york-city-airbnb-open-data\/AB_NYC_2019.csv'\ndf = pd.read_csv(csv_file)\ndf.info()","c6fe8f46":"df.isna().sum()","aad82aed":"df[df.last_review.isna()].number_of_reviews.value_counts()","d3cdb169":"# Drop features `name`, `host_name`, `last_review`\ndf.drop(columns=['id', 'host_name', 'last_review'], inplace=True)\ndf.head()","67eece40":"# Fill NaN value with 0 for feature reviews_per_month\ndf.fillna({'reviews_per_month':0}, inplace=True)\ndf.head()","3f5a8454":"df.host_id.value_counts().head(10)","74fa681c":"# Prove the count value of 'host_id' equals the value in column 'calculated_host_listings_count'\ndfcopy = df.copy()\nvcmap = df.host_id.value_counts()\ndfcopy['vc'] = dfcopy.apply(lambda row: vcmap[row['host_id']], axis=1)\n(dfcopy.vc == dfcopy.calculated_host_listings_count).value_counts()","11027b1b":"print(\"Quantile (95%) of price is:\", df.price.quantile(0.95))\ndf['neighbourhood_group'].unique()","ab31ab87":"price_400 = df[df.price < 400]\nsns.set(rc={'figure.figsize':(11.7,8.27)})\nfig = sns.violinplot(data=price_400, x='neighbourhood_group', y='price')\nfig.set_title('Density and distribution of prices for each neighberhood_group')","f7ad9093":"# Find out the price distribution for each neighbourhood group\ndef qq(x, ratio):\n    return x.quantile(ratio)\n\nf = {'price': ['min', 'mean', 'median', 'std', ('25%', lambda v: qq(v, 0.25)), ('50%', lambda v: qq(v, 0.5)), \\\n               ('75%', lambda v: qq(v, 0.75)), 'max']}\nng = df.groupby('neighbourhood_group')\nng.agg(f)","2e46c93a":"# Pie usage https:\/\/kontext.tech\/column\/code-snippets\/402\/pandas-dataframe-plot-pie-chart\n\nf, ax = plt.subplots(1, 2, figsize=(18,8))\n\n# Color representing different neighbourhood.\ncs = ['r', 'dodgerblue', 'orange', 'green', 'pink']\ndf['neighbourhood_group'].value_counts().plot(kind='pie', autopct='%2.2f%%', ax=ax[0], colors=cs, shadow=True)\ndf['neighbourhood_group'].value_counts().plot(kind='barh', ax=ax[1], color=cs)\nax[0].set_title('Share of Neighbourhood (pie)')\nax[0].set_ylabel('Neighbourhood Share')\nax[1].set_title('Share of Neighbourhood (bar)')\nplt.show()","fbe84f14":"plt.figure(figsize=(10,6))\n# To enforce consistence of map color with previous two figures.\ncolor_dict = dict(zip(list(df.neighbourhood_group.value_counts().keys()), cs))\nsns.scatterplot(x='longitude', y='latitude', hue='neighbourhood_group', data=df, palette=color_dict)\nplt.ioff()","789fe40d":"import folium\nfrom folium.plugins import HeatMap\nplt.figure(figsize=(12, 6))\nm = folium.Map([40.7128, -74.0060], zoom_start=11)\nHeatMap(df[['latitude','longitude']].dropna(), radius=8, gradient={.4: 'blue', .65: 'lime', 1: 'red'}).add_to(m)\ndisplay(m)\n\n# Or, we can plot a scatter map with \n# fig = price_400.plot(kind='scatter', x='longitude', y='latitude', c='price', \n#                  cmap=plt.get_cmap('jet'), colorbar=True, alpha=0.4, figsize=(10,8))","47cd59b9":"plt.figure(figsize=(10,6))\nfor i, ng in enumerate(df.neighbourhood_group.unique()):\n    sns.distplot(df[df.neighbourhood_group==ng].price, color=cs[i], hist=False, label=ng)\n\nplt.title('Borough wise price destribution for price < 1000')\nplt.xlim(0, 1000)\nplt.show()","5c31ddcc":"df.room_type.unique()","1181787b":"fig = sns.violinplot(x='room_type', y='price', data=df[df.price < 500])\nfig.set_title('Violin plot of room type with respect to price < 500')","3c4f392a":"from wordcloud import WordCloud, ImageColorGenerator, STOPWORDS\nfrom PIL import Image\nimport os, urllib\n\ntext = ' '.join(str(n) for n in df.name)\n# A New York City map\nif not os.path.exists('nyc.jpeg'):\n    urllib.request.urlretrieve('http:\/\/git.io\/JTJqH', 'nyc.jpeg')\n    \nmask = np.array(Image.open('nyc.jpeg'))\nwc = WordCloud(stopwords=STOPWORDS, max_words=200, \n               background_color=\"white\", mask=mask, width=mask.shape[1],\n               height=mask.shape[0], max_font_size=64).generate(text)\nplt.figure(figsize=(24,12))\nplt.imshow(wc, interpolation='bilinear')\nplt.axis('off')\nplt.show()","0f450a3f":"dfcopy = df.copy()\nfor mn in (3, 10, 30):\n    dfcopy['r'] = dfcopy.apply(lambda row: row['minimum_nights'] <= mn, axis=1)\n    print(f\"minimum_night <= {mn}\", dfcopy.r.value_counts(normalize=True), sep=\"\\n\")","15159597":"df.minimum_nights.value_counts().head(30)\nsns.distplot(df[df.minimum_nights <= 90]['minimum_nights'], bins=10)","ba5a68ec":"df_review = df[['number_of_reviews', 'reviews_per_month', 'price']]\ncorr = df_review.corr()\nsns.heatmap(corr, xticklabels=corr.columns, yticklabels=corr.columns, annot=True)","24607d8f":"# Distribution of listings with number_of_reviews <= 20 \n# sns.distplot(df.number_of_reviews)\nreviews_20 = df[(df.number_of_reviews <= 20) & (df.number_of_reviews > 0)]\nfig = reviews_20.plot(kind='scatter', x='longitude', y='latitude', c='number_of_reviews', \n              cmap=plt.get_cmap('jet'), colorbar=True, alpha=0.4, figsize=(10,8))\n# df.number_of_reviews.value_counts().head(20)","28fdfc30":"for qv in (0.25, 0.5, 0.75):\n    print(f'{qv} of listings have no more than', df.number_of_reviews.quantile(qv), 'reviews')","e9c5beb7":"def kde_plot(df):\n    plt.figure(figsize=(16,8))\n    for i, bor in enumerate(df.neighbourhood_group.unique()):\n        sns.kdeplot(df.loc[df['neighbourhood_group'] == bor, 'availability_365'], \n                    color=cs[i], label=bor, shade=True, alpha=0.5)\n#         sns.distplot(df.loc[df['neighbourhood_group'] == bor, 'availability_365'])\n\n    plt.xlabel('Availability 365', fontsize=16)\n    plt.legend()\n    plt.show()\nkde_plot(df)","10b88d7c":"Now we explore the the density and distribtuion of prices with violinplot and aggregation.","c1ab0c33":"### `names`\nWe want to extract some information from the listing names. With word cloud (as shown in the following figure) we can see the top words are: 'Private Room', 'Brooklyn', 'Spacious', 'Modern', 'Beautiful' etc. ","1443c51f":"### `number_of_reviews`","2cb34db4":"## Overview\n\nThis is a kernel in process and I will be updating the kernel in coming days. Please upvote if you like this work. Bonne lecture. \n\n<img src=\"http:\/\/git.io\/JTI3m\" width=\"500px\" alt=\"Airbnb NYC\">\n\nSince 2008, guests and hosts have used Airbnb to expand on traveling possibilities and present a more unique, personalized way of experiencing the world. Airbnb is one of most popular lodging service providers accoss the world. \n\nMillions of [listings](https:\/\/ipropertymanagement.com\/research\/airbnb-statistics) are generated worldwidely each year, and nearly half a million of guests checked in per day. Analyzing these data faciliates security improvement, business decisions making, understanding of guests' and hosts' behavior and performance on the platform, guiding marketing initiatives, implementation of innovative additional services and more.\n\nWhat we have in hand is a dataset with 48,895 observations x 16 columns of mixed (numeric and categorical) values. In this kernel, we will explore this dataset to understand Airbnb NYC business (no ML algorithm involved) . ","ecef19e3":"The above pie chart shows that Manhatten and Brooklyn have the highest share of listings, while the rest three neighbourhoods together shared less than 15% of all the listings. This result, again, is not surprising since Manhatten and Brooklyn are one of the most traveled destinations.\n\nTo better illustrate, we use Python library [folium](https:\/\/pypi.org\/project\/folium\/0.1.5\/) and our dataset's latitude\/longitude information to display a very immersive heatmap of listings distributions. The highest Density areas are marked in red while the lowest marked in blue.","f5b92901":"It seems that 'Entire home\/apt' tends to has higher prices, which are (nearly) evenly distributed from 50 to 400, while 'Private room' and 'Shared room' have lower prices, which concentrate on a value around \\\\$60. ","1f3c2db9":"\n## Visualizing and Exploring Dataset\nBy now, we've handled missing and NaN values, dropped insignificant columns, the next step is to dive deeper into the dataset to search for more interesting facts.\n\n### `host_id` and `calculated_host_listings`\n`host_id` is an unique numeric value for each host. By using `value_counts()`, we find that the frequencies of `host_id` is exactly the value `calculated_host_listings_count`.","7aa2e768":"### `neighbourhood` \nWe now investigate the relation between area and price, more specifically, the price range in each neighborhood and the distribution of listings.\n\nFirst, it's easy to find out that there are five unique neighbourhood group: 'Brooklyn', 'Manhattan', 'Queens', 'Staten Island', 'Bronx' and the price range is [0, 10000], while 95% is under the price of $355 per night. ","740a88fd":"From the above figure and table, we can observe a couple of things about the distribution of pricee. \n\nManhattan has the highest range of prices for the listings with an average price \\\\$197, followed by Brooklyn and Staten Island with, respectively, \\\\$124, \\\\$115 per night. This result is not surprising since Manhattan is one of the most expensive places in the world to live in.\n\nOn the other hand, Queens and Bronx have the cheapest range of prices, the average price per night is \\\\$99.5 and \\\\$87 respectively.","1891492a":"### `room_type` \nThere are three types of room: 'Private room', 'Entire home\/apt' or 'Shared room'.","490c64d5":"## Loading Data & Import Libraries","f8bb5812":"## Conclusions\n- 'Manhattan', 'Brooklyn' share similar patterns in almost every aspect of features on the listing. They are most attractive (among the five boroughs) to guests with relatively higher host price. \n- On the other hand, 'Staten Island' and 'Bronx' have cheaper price but very fews listing. \n- 95\\% of the listings have a `price` less than \\\\$355 per night.\n- 86\\% of the listings permit guests to stay less than 10 nights.","3c11e0ec":"### `minimum_nights`\n\nMost values (around 98.5%) of `minimum_nights` are under 30, while 86% are under 10. This makes sense since many Airbnb guests are looking for short-term lodging.","db08f6c6":"The price distribution for each borough share a similar pattern: Most orders are concentrated within a certain price range, with relatively few has a low or high price.","ebb9145a":"With `pandas sum()` function, we find that four columns (`name`, `host_name`, `last_review`, `reviews_per_month`) contain missing values.\n\nThe `host_name` feature is trivial to our purpose of data analysis. Generally, the name of a host has very limited, if not none, impact on other factors such as the `price` or `reviews` on the listing. Therefore we remove this column to keep our dataset slim.\n\nThe `last_review` feature is date. A close observation tells us that each NaN-valued `last_review` corressponds to a NaN-valued review `reviews_per_month` and a zero-valued `number_of_reviews`. Thus it is safe to conclude that the NaN-valued `last_review` is the result of zero review for current listing, then we can simply replace NaN with 0 for feature `reviews_per_months`, and remove `last_review` from the dataset. ","39df2846":"### `AVAILABILITY_365`\n\nWe do a kernel density estimate (KDE) plot to visualize the distribution of `availability_365` of listings. The following plot shows that:\n\n1. For 'Manhattan', 'Brooklyn' and 'Queens', the number of days available are concentrated on two terminus, i.e., it is either less than 10 days or more than 350 days.\n2. For 'Staten Island' and 'Bronx', available days are evenly distributed among 0 and 365.","c3cbec51":"Observations, we can see that:\n- There are 48,895 entries\n- Some features have missing values, e.g., 'name', 'last_review', (we will clean and and handle them later).\n- 10 of 16 features are numeric: [`id`, `host_id`, `latitude`, `longitute`, `price`, `minimum_nights`, `number_of_reviews`, `reviews_per_month`, `calculated_host_listings_count`, `availability_365`]\n- 6 of 16 features are categorical: [`name`, `host_name`, `neighbourhood_group`, `neighbourhood`, `room_type`, `last_review`]\n\n\n## Preprocess Data\nWhat we do in this step is: \n- handling missing (NaN) values by either removing related rows or replacing them with other values (e.g., median),\n- discarding insignificant features,\n","36c60c15":"Conclusions: \n- Half listings have less than 5 reviews,\n- - `reviews_per_month` is correlated with `number_of_reviews`, but none of them has strong correlation with `price`."}}