{"cell_type":{"120685f4":"code","a9e33623":"code","491037da":"code","9acb7870":"code","2bfc45bf":"code","8a1c1e5b":"markdown","fd62bbde":"markdown","3ddceb1e":"markdown","59911a6e":"markdown"},"source":{"120685f4":"# We'll use NumPy for random number generation\nfrom numpy import random\n\n# Use Seaborn and Matplotlib for drawing charts\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Use scikit-learn for machine learning\nfrom sklearn.linear_model import LinearRegression","a9e33623":"# Create a simple linear data generator class\nclass LinearData:\n    def __init__(self):\n        self.Gadient = 0\n        self.Intercept = 0\n        self.X = []\n        self.Y = []\n    \n    # Generate some linear data, using straight line equation y = mx + c\n    def Generate(self):\n\n        # Randomly generate the line parameters\n        m = random.randint(-3, 3)\n        c = random.randint(-5, 5)\n\n        print(f\"Line equation is: y = {m}x + {c}\")\n\n        # Randomly generate some x data\n        samples = 50\n        x = random.uniform(low=-500, high=500, size=(samples,))\n\n        # Generate some noise\n        noise = random.normal(loc=0, scale=10, size=(samples,))\n\n        # Calculate the y values\n        y = m * x + c + noise\n\n        # Make the data visible using our class properties\n        self.Gradient = m\n        self.Intercept = c\n        self.X = x\n        self.Y = y","491037da":"# Create an object that contains some linear data\nlinearData = LinearData()\nlinearData.Generate()","9acb7870":"# Draw a scatter chart\nscatter = sns.scatterplot(x = linearData.X, y = linearData.Y)\nscatter.set_xlabel('X')\nscatter.set_ylabel('Y')\nplt.show()","2bfc45bf":"# Prepare the data\nX = linearData.X.reshape(-1, 1)\nY = linearData.Y\n\n# Create the linear regression model\nlrModel = LinearRegression()  \nlrModel.fit(X, Y) \n\n# Now compare the actual parameters with the model parameters\nprint(f'Actual gradient = {linearData.Gradient}, estimated gradient = {lrModel.coef_[0]}.')\nprint(f'Actual intercept = {linearData.Intercept}, estimated intercept = {lrModel.intercept_}.')","8a1c1e5b":"We can now use Seaborn to plot the data on a scatter chart.","fd62bbde":"First, I've created a class that will be used to generate a random straight line. It will also add some noise to the data so it isn't an exact relationship.","3ddceb1e":"Next, I'll create an object of the LinearData class and generate some data.","59911a6e":"This Notebook demonstrates how to use linear regression to estimate the equation of a line."}}