{"cell_type":{"63b15481":"code","a2a65af3":"code","8e8fdb54":"code","33f25dea":"code","f1776e27":"code","1969017c":"code","c050cc0e":"code","7090343a":"code","8a42b2b0":"code","9dbb968d":"code","2c039840":"code","ab173bec":"code","e81a8002":"code","c9598f62":"code","0dbd6f93":"code","7e2693e8":"code","31ef0836":"code","d2187e33":"code","b64dad11":"code","64ff3256":"code","548fc947":"code","9985abc8":"code","81016c36":"code","75f94e7c":"code","5caf130e":"code","eea086c9":"code","fa6f37cf":"code","57834d37":"code","c8f26ae0":"code","52e9b298":"code","1fc7869c":"code","566ab82e":"code","4e65d777":"code","beff8ffa":"code","40345ac7":"code","720abc32":"code","5a21a441":"code","3710e456":"markdown","5f7779e6":"markdown","11e362f9":"markdown","23c82141":"markdown","94a9984b":"markdown","11d98934":"markdown"},"source":{"63b15481":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nends = []\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        if filename.endswith(\".csv\") or filename.endswith(\".xlsx\"):\n            print(os.path.join(dirname, filename))\n        else:\n            continue\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a2a65af3":"%pylab inline\npd.options.display.max_rows=100\npd.options.display.max_columns=100","8e8fdb54":"!pip install cufflinks plotly","33f25dea":"from plotly.offline import iplot, init_notebook_mode\nimport cufflinks\ncufflinks.go_offline(connected=True)\ninit_notebook_mode(connected=True)","f1776e27":"# Which data sources does Climate Watch use? What are the differences between these data sources?\n# https:\/\/www.climatewatchdata.org\/about\/faq\/ghg\n\ndf_cw_unfccc_ghg = pd.read_excel('\/kaggle\/input\/climatewatch\/all\/All\/CW UNFCCC_GHG_Emissions_31102017.xlsx', skiprows=2)\ndf_cw_unfccc_ghg = df_cw_unfccc_ghg[1:]\n\ndf_cw_unfccc_ghg = df_cw_unfccc_ghg.replace('NO', np.nan)\\\n.replace('NE,NO', np.nan)\\\n.replace('NO,NA', np.nan)\\\n.replace('NO,NE,NA', np.nan)\\\n.replace('NA,NO', np.nan)\\\n.replace('NO,IE', np.nan)\n\n\ndf_cw_unfccc_ghg.head()","1969017c":"df_cw_unfccc_ghg['Gas'].unique().tolist()","c050cc0e":"df_cw_unfccc_ghg['Sector'].unique().tolist()","7090343a":"df_cw_unfccc_ghg.columns","8a42b2b0":"year = 2015\ndf_cw_unfccc_ghg[['Sector', 'Gas', year]].groupby(['Sector', 'Gas']).sum().unstack()[year].unstack()[['Aggregate F-gases', 'Aggregate GHGs']].plot(kind='bar', figsize=(18,8));\nplt.title('Aggregated GHG and F-Gases per sectors (with totals)');","9dbb968d":"year = 2015\ndf_cw_unfccc_ghg[['Sector', 'Gas', year]].groupby(['Sector', 'Gas']).sum().unstack()[year].unstack().plot(kind='bar', figsize=(18,8));","2c039840":"year = 2015\ndf_cw_unfccc_ghg[['Sector', 'Gas', year]].groupby(['Gas', 'Sector']).sum().unstack()[year].unstack()[['Agriculture', 'Energy', 'Industrial Processes',\n       'Industrial Processes and Product Use', 'LULUCF',\n       'Land Use, Land-Use Change and Forestry',\n       'Land-Use Change and Forestry', 'Other',\n       'Solvent and Other Product Use']].plot(kind='bar', figsize=(18,8));","ab173bec":"df_cw_unfccc_ghg","e81a8002":"df_ghg_2015 = df_cw_unfccc_ghg.set_index(['Country','Gas','GWP','Sector']).dropna().unstack()[2015]\ndf_ghg_2015.head()","c9598f62":"df_gdp = pd.read_excel('..\/input\/climatewatch\/All\/CW_socioeconomic_indicators_31102017\/socioeconomic_indicators_GDP.xlsx', skiprows=2)\ndf_gdp = df_gdp[1:]\nprint(df_gdp.shape)\ndf_gdp.head()","0dbd6f93":"df_pop = pd.read_excel('..\/input\/climatewatch\/All\/CW_socioeconomic_indicators_31102017\/socioeconomic_indicators_pop_growth.xlsx', skiprows=2)\ndf_pop = df_pop[1:]\nprint(df_pop.shape)\ndf_pop.head()","7e2693e8":"df_socec = df_pop.merge(df_gdp, left_on='Country', right_on='country', how='left')\ndf_socec.head()","31ef0836":"df_socec.columns.tolist()","d2187e33":"df_ghg_2015 = df_ghg_2015.reset_index()#['Country'].unique()","b64dad11":"df_full = df_ghg_2015.merge(df_socec, left_on='Country', right_on='ISO three letter country code', suffixes=('_x', ''))\ndf_full.head()","64ff3256":"#df_ghg_full = df_full.loc[df_full['Gas']=='Aggregate GHGs']","548fc947":"df_full.shape","9985abc8":"df_full.head()#columns.tolist()","81016c36":"df_full.columns.tolist()","75f94e7c":"df_full = df_full[['Country',\n 'ISO code',\n 'Gas',\n 'GWP',\n 'Total GHG emissions without LULUCF',\n 'Industrial Processes and Product Use',\n 'Total GHG emissions with LULUCF',\n 'Energy',\n 'Agriculture',\n 'Waste',\n 'Land Use, Land-Use Change and Forestry',\n 'Total GHG emissions, including indirect CO2,  without LULUCF',\n 'Total GHG emissions, including indirect CO2,  with LULUCF',\n 'Other',\n 'Population of the country in 2016',\n 'Population growth rate in 2016',\n 'GDP  in 2015',\n 'GDP in 2016',\n 'GDP per capita\\xa0in 2015',\n 'GDP per capita\\xa0 in 2016',\n 'Country GDP per capita rank in 2015',\n 'Country GDP per capita rank in 2016']]","5caf130e":"target = 'Total GHG emissions without LULUCF'","eea086c9":"columns = ['Population of the country in 2016',\n'Population growth rate in 2016',\n#'GDP  in 2015',\n'GDP in 2016',\n#'GDP per capita\\xa0in 2015',\n'GDP per capita\\xa0 in 2016',\n#'Country GDP per capita rank in 2015',\n'Country GDP per capita rank in 2016']","fa6f37cf":"import seaborn as sns\n\n# data_ = df_full.loc[df_full['Gas'] == 'Aggregate GHGs']\n\n# Plot sepal width as a function of sepal_length across days\ng = sns.lmplot(\n    data=df_full.reset_index(drop=True),\n    x='Population of the country in 2016', y='Total GHG emissions without LULUCF', hue='Gas',\n    height=5\n)\n\n# Use more informative axis labels than are provided by default\n#g.set_axis_labels(\"Snoot length (mm)\", \"Snoot depth (mm)\")","57834d37":"import plotly.graph_objs as go\n\ndf_data_temp = df_full.loc[df_full['Gas']=='Aggregate GHGs'].reset_index(drop=True)\n\n# creating trace1\ntrace1 =go.Scatter(\n                    x = df_data_temp['Population of the country in 2016'],\n                    y = df_data_temp['Total GHG emissions without LULUCF'],\n                    mode = \"markers\",\n                    name = \"2014\",\n                    marker = dict(color = 'rgba(255, 128, 255, 0.8)'),\n                    text= df_data_temp.Country)\ndata = [trace1]\nlayout = dict(title = 'Population vs Total GHG emissions without LULUCF',\n              xaxis= dict(title= 'Population of the country in 2016',ticklen= 5,zeroline= False),\n              yaxis= dict(title= 'Total GHG emissions with LULUCF',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","c8f26ae0":"import plotly.graph_objs as go\n\ndf_data_temp = df_full.loc[df_full['Gas']=='Aggregate GHGs'].reset_index(drop=True)\n\n# creating trace1\ntrace1 =go.Scatter(\n                    x = df_data_temp['GDP  in 2015'],\n                    y = df_data_temp['Total GHG emissions without LULUCF'],\n                    mode = \"markers\",\n                    name = \"2015\",\n                    marker = dict(color = 'rgba(255, 128, 255, 0.8)'),\n                    text= df_data_temp.Country)\ndata = [trace1]\nlayout = dict(title = 'GDP vs Total GHG emissions without LULUCF',\n              xaxis= dict(title= 'GDP  in 2015',ticklen= 5,zeroline= False),\n              yaxis= dict(title= 'Total GHG emissions with LULUCF',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","52e9b298":"# create trace 1 that is 3d scatter\ntrace1 = go.Scatter3d(\n                    x = df_data_temp['Population of the country in 2016'],\n                    y = df_data_temp['Total GHG emissions without LULUCF'],\n                    z = df_data_temp['GDP in 2016'],\n    mode='markers',\n    marker=dict(\n        size=10,\n        color='rgb(255,0,0)',                # set color to an array\/list of desired values      \n    ),\n    text= df_data_temp.Country\n    \n)\n\ndata = [trace1]\nlayout = go.Layout(\n    margin=dict(\n        l=0,\n        r=0,\n        b=0,\n        t=0  \n    )\n    \n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","1fc7869c":"# create an output directory\n!mkdir \/kaggle\/working\/country\/","566ab82e":"df_full","4e65d777":"df_full.to_pickle('\/kaggle\/working\/country\/CDP_climatewatch_ghg_soceco.pkl')","beff8ffa":"from sklearn.svm import SVR\n# Fit regression model\nsvr_rbf = SVR(kernel='rbf', C=100, gamma=0.1, epsilon=.1)\nsvr_lin = SVR(kernel='linear', C=100, gamma='auto')\nsvr_poly = SVR(kernel='poly', C=100, gamma='auto', degree=3, epsilon=.1,\n               coef0=1)","40345ac7":"df_data_temp = df_full.loc[df_full['Gas']=='Aggregate GHGs'].dropna(subset=columns+[target]).reset_index(drop=True)","720abc32":"df_data_temp","5a21a441":"svr_rbf.fit(df_data_temp[columns].values, df_data_temp['Total GHG emissions without LULUCF'])","3710e456":"# Predict","5f7779e6":"# Save results to the output","11e362f9":"Let\u2019s try to connect that country level data with the main driving forces for emissions which according to the IPCC guide (PDF) are: \n* demographic\n* social\n* economic development\n* technological advancements","23c82141":"# Socieconomic indicators","94a9984b":"Chosen data source for GHG emissions UNFCCC (can be others, more accurate and with smaller time lag but in more messy format)\n[UNFCCC](https:\/\/unfccc.int\/) - Under the UN Framework Convention on Climate Change\n\nhttps:\/\/www.climatewatchdata.org\/about\/faq\/ghg\n\nUNFCCC includes only officially reported data by countries. It has large data gaps for non-Annex I countries. Due to different reporting requirements for Annex I and non-Annex I countries, the data is not internally comparable. It covers all sectors and has 2-3 year lag.\n\nLULUCF - Land Use, Land Use Change and Forestry\n\nF-Gases - Fluorinated gases (F-gases) are man-made gases that can stay in the atmosphere for centuries and contribute to a global greenhouse effect. There are four types: hydrofluorocarbons (HFCs), perfluorocarbons (PFCs), sulfur hexafluoride (SF6) and nitrogen trifluoride (NF3).","11d98934":"How significant are uncertainties in the emissions data, particularly in the land-use change and forestry sector?\nhttps:\/\/www.climatewatchdata.org\/about\/faq\/ghg\n"}}