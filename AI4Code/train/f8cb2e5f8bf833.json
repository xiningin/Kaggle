{"cell_type":{"9d5df58d":"code","fa29c24a":"code","704c3185":"code","9bfed6bc":"code","83a2a2da":"code","5cfa72b5":"code","dc8165e2":"code","0abae32f":"code","5a9caa46":"code","9b34d573":"code","902cb385":"code","1661ac7d":"code","2541de12":"code","52328da5":"code","05b3aea0":"code","8be03ae2":"code","9710d767":"code","b3026f88":"code","07bfa454":"code","1800e04c":"markdown","97f769f0":"markdown","d870eeca":"markdown","1cf3148f":"markdown","b9380b6a":"markdown"},"source":{"9d5df58d":"ver = 'logreg'","fa29c24a":"import numpy as np\nimport pandas as pd","704c3185":"import gc\nimport time\nfrom datetime import datetime\nimport warnings\nwarnings.simplefilter(action = 'ignore')","9bfed6bc":"from sklearn.metrics import roc_auc_score, log_loss, accuracy_score, confusion_matrix\nfrom sklearn.model_selection import RepeatedStratifiedKFold\nfrom sklearn.linear_model import LogisticRegression","83a2a2da":"from scipy.stats import mannwhitneyu","5cfa72b5":"train = pd.read_csv('..\/input\/train.csv', index_col = 'id')\ntrain.head()","dc8165e2":"target = train['target']\ntrain.drop('target', axis = 1, inplace = True)\ntarget.value_counts()","0abae32f":"test = pd.read_csv('..\/input\/test.csv', index_col = 'id')\ntest.head()","5a9caa46":"def save_submit(test_, clfs_, filename):\n    subm = pd.DataFrame(np.zeros(test_.shape[0]), index = test_.index, columns = ['target'])\n    for clf in clfs_:\n        subm['target'] += clf.predict_proba(test_)[:, 1]\n    subm['target'] \/= len(clfs_)\n    subm = subm.reset_index()\n    subm.columns = ['id', 'target']\n    subm.to_csv(filename, index = False)","9b34d573":"scores = pd.DataFrame(columns = ['auc', 'acc', 'loss', 'tn', 'fn', 'fp', 'tp'])","902cb385":"mw = pd.DataFrame(index = ['stat', 'p'])\nfor c in train.columns:\n    mw[c] = mannwhitneyu(train[c], test[c])\nmw = mw.T\nmw[mw['p'] < .01].shape","1661ac7d":"bad_features = list(mw[mw['p'] < .01].index)\nlen(bad_features)","2541de12":"def logreg_cross_validation(train_, target_, params,\n                            num_folds = 5, repeats = 20, rs = 0):\n    \n    print(params)\n    \n    clfs = []\n    folds = RepeatedStratifiedKFold(n_splits = num_folds, n_repeats = repeats, random_state = rs)\n    \n    valid_pred = pd.DataFrame(index = train_.index)\n    \n    # Cross-validation cycle\n    for n_fold, (train_idx, valid_idx) in enumerate(folds.split(target_, target_)):\n        print('--- Fold {} started at {}'.format(n_fold, time.ctime()))\n        \n        train_x, train_y = train_.iloc[train_idx], target_.iloc[train_idx]\n        valid_x, valid_y = train_.iloc[valid_idx], target_.iloc[valid_idx]\n        \n        clf = LogisticRegression(**params)\n        clf.fit(train_x, train_y)\n    \n        clfs.append(clf)\n\n        predict = clf.predict_proba(valid_x)[:, 1]\n    \n        tn, fp, fn, tp = confusion_matrix(valid_y, (predict >= .5) * 1).ravel()\n        auc = roc_auc_score(valid_y, predict)\n        acc = accuracy_score(valid_y, (predict >= .5) * 1)\n        loss = log_loss(valid_y, predict)\n        print('TN =', tn, 'FN =', fn, 'FP =', fp, 'TP =', tp)\n        print('AUC = ', auc, 'Loss =', loss, 'Acc =', acc)\n        \n        valid_pred[n_fold] = pd.Series(predict, index = valid_x.index)\n\n        del train_x, train_y, valid_x, valid_y, predict\n        gc.collect()\n\n    return clfs, valid_pred","52328da5":"params = {}\nparams['random_state'] = 0\nparams['n_jobs'] = -1\nparams['C'] = .2\nparams['penalty'] = 'l1'\nparams['class_weight'] = 'balanced'\nparams['solver'] = 'saga'","05b3aea0":"clfs, pred = logreg_cross_validation(train.drop(bad_features, axis = 1), target, params)","8be03ae2":"pred_mean = pred.mean(axis = 1)","9710d767":"scores = scores.T\ntn, fp, fn, tp = confusion_matrix(target, (pred_mean >= .5) * 1).ravel()\nscores['logreg'] = [\n                 roc_auc_score(target, pred_mean), \n                 accuracy_score(target, (pred_mean >= .5) * 1), \n                 log_loss(target, pred_mean),\n                 tn, fn, fp, tp]\n\nscores = scores.T\nscores","b3026f88":"score_auc = scores.loc['logreg', 'auc']\nscore_acc = scores.loc['logreg', 'acc']\nscore_loss = scores.loc['logreg', 'loss']\nprint(score_auc, score_acc, score_loss)","07bfa454":"loc_ver = 'v1'\nfilename = 'subm_{}_{}_{:.4f}_{:.4f}_{:.4f}_{}.csv'.format(ver, loc_ver, score_auc, score_acc, score_loss,\n                                                        datetime.now().strftime('%Y-%m-%d'))\nprint(filename)\nsave_submit(test.drop(bad_features, axis = 1), clfs, filename)","1800e04c":"# Don't Overfit! II","97f769f0":"## Load sets","d870eeca":"### Some useful things","1cf3148f":"## Mann-Whitney test","b9380b6a":"## Logistic regression"}}