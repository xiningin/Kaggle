{"cell_type":{"d8ec37dd":"code","bb9ed9cc":"code","2427f657":"code","a4e33c10":"code","97e34daa":"code","f4faecbf":"code","82da05a3":"code","b2eae909":"code","a102d890":"code","8d6fb995":"code","9ad84da2":"code","4902e67d":"code","ee9ed47a":"code","59938b9a":"code","1e864458":"code","018c399e":"code","496a3eb3":"code","1675ae71":"code","4f841618":"code","71e05107":"code","86ea2aba":"code","812e67cd":"code","0512979d":"code","3961a386":"code","04ef985e":"code","75977774":"code","9c7d7fd6":"code","6efe916c":"markdown","cb56b3c7":"markdown","e6aba0d0":"markdown","9b99969f":"markdown","7f928de9":"markdown","99da6967":"markdown","56077501":"markdown","90751eb0":"markdown","90cb9fde":"markdown","a7e8c436":"markdown","c43bd19b":"markdown","d91b9d6f":"markdown","71618294":"markdown","60e53074":"markdown","2a5c959b":"markdown","4b9b6d57":"markdown","5395b614":"markdown","3a97f0bd":"markdown","2117023b":"markdown","9e860599":"markdown","15657710":"markdown","8c267dca":"markdown"},"source":{"d8ec37dd":"!pip install seaborn --upgrade","bb9ed9cc":"import numpy as np\nimport pandas as pd\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\n\nimport scipy.stats as stats\nfrom statsmodels.stats.diagnostic import lilliefors","2427f657":"df = pd.read_csv('\/kaggle\/input\/mobile-games-ab-testing\/cookie_cats.csv')\ndf","a4e33c10":"df['userid'].duplicated().value_counts()","97e34daa":"df.groupby(\"version\")['sum_gamerounds'].agg([\"min\", \"max\", pd.Series.mode, \"median\", \"mean\", \"std\", \"count\"])","f4faecbf":"def plot_distribution(dataframe):\n    fig, axes = plt.subplots(1, 2, figsize=(14, 5))\n    sns.histplot(dataframe, x=\"sum_gamerounds\", label='histogram', multiple=\"dodge\", hue=\"version\", \n                # bins=5000, kde=True,\n                 shrink=.8, binwidth=10, ax=axes[0])\n    sns.boxplot(x=dataframe['version'], y=dataframe['sum_gamerounds'], ax=axes[1])\n\n    axes[0].set_xlim(0, 200)\n    axes[1].set_yscale('log')\n    axes[0].set_title('Distribution histogram', fontsize=14)\n    axes[1].set_title('Distribution version', fontsize=14)\n    plt.show()","82da05a3":"plot_distribution(df)","b2eae909":"def delete_outliers(dataframe, name_column, quantile=[0.25, 0.75], threshold=1.5):\n    Q1, Q3 = dataframe[name_column].quantile(quantile)\n    IQR = Q3 - Q1\n    return dataframe.loc[(dataframe[name_column] >= Q1 - threshold * IQR) & (dataframe[name_column] <= Q3 + threshold * IQR)]","a102d890":"df_gate30 = delete_outliers(df[df['version'] == 'gate_30'], 'sum_gamerounds', quantile=[0.1, 0.9])\ndf_gate30.head()","8d6fb995":"df_gate40 = delete_outliers(df[df['version'] == 'gate_40'], 'sum_gamerounds', quantile=[0.1, 0.9])\ndf_gate40.head()","9ad84da2":"hist = pd.DataFrame({\n    'After removing outliers': [df_gate30.shape[0], df_gate40.shape[0]],\n    'It was before': df.groupby(\"version\").agg(\"count\")['sum_gamerounds']\n}, index=['gate_30', 'gate_40'])\nhist['part, %'] = 100 * hist['After removing outliers'] \/ hist['It was before']\nhist","4902e67d":"df_new = pd.concat([df_gate30, df_gate40])\ndf_new","ee9ed47a":"plot_distribution(df_new)","59938b9a":"plt.subplots(figsize=(12, 8))\nplt.plot(df_new.groupby('sum_gamerounds')['userid'].agg('count'), 'bo-', markersize=5)\nplt.yscale('log')\nplt.title('Distribution of the number of levels in logscale', fontsize=14)\nplt.show()","1e864458":"df_new.groupby(\"version\")['sum_gamerounds'].agg([\"min\", \"max\", pd.Series.mode, \"median\", \"mean\", \"std\", \"count\"])","018c399e":"A = df_new[df_new['version'] == \"gate_30\"]['sum_gamerounds']\nB = df_new[df_new['version'] == \"gate_40\"]['sum_gamerounds']","496a3eb3":"stats.probplot(A, plot=sns.mpl.pyplot)\nplt.show()","1675ae71":"stats.probplot(B, plot=sns.mpl.pyplot)\nplt.show()","4f841618":"_, pvalue1 = stats.shapiro(A)\n_, pvalue2 = stats.shapiro(B)\npvalue1, pvalue2","71e05107":"_, pvalue1 = stats.normaltest(A)\n_, pvalue2 = stats.normaltest(B)\npvalue1, pvalue2","86ea2aba":"_, pvalue1 = stats.chisquare(A)\n_, pvalue2 = stats.chisquare(B)\npvalue1, pvalue2","812e67cd":"_, pvalue1 = lilliefors(A)\n_, pvalue2 = lilliefors(B)\npvalue1, pvalue2","0512979d":"_, pvalue1 = stats.jarque_bera(A)\n_, pvalue2 = stats.jarque_bera(B)\npvalue1, pvalue2","3961a386":"_, pvalue1 = stats.kstest(A, cdf='norm')\n_, pvalue2 = stats.kstest(B, cdf='norm')\npvalue1, pvalue2","04ef985e":"res = stats.anderson(A)\nfor critical_value, significance_level in zip(res.critical_values, res.significance_level):\n    print(f\"Distribution {'is' if res.statistic < critical_value else 'not is'} Gaussian at significance level = {significance_level}\")","75977774":"_, pvalue = stats.mannwhitneyu(A, B)\npvalue","9c7d7fd6":"pvalue < 0.05","6efe916c":"## Shapiro-Wilk","cb56b3c7":"## Lilliefors Normality Test","e6aba0d0":"They seem to be very similar","9b99969f":"## Quantile-Quantile Plot","7f928de9":"## Chi-Square Normality Test","99da6967":"# Check equality of distribution","56077501":"## Anderson-Darling Normality Test","90751eb0":"# Packages","90cb9fde":"# Checking for normality","a7e8c436":"# Post-outlier distribution","c43bd19b":"## Statistical significance exists","d91b9d6f":"## Jarque\u2013Bera Normality Test","71618294":"# Statistical heuristics in data","60e53074":"# Distribution gamerounds","2a5c959b":"# Data","4b9b6d57":"# For tests:\n\n1. Shapiro-Wilk, \n2. D'Agostino's K-squared test, \n3. Chi-Square Normality Test, \n4. Lilliefors Normality Test, \n5. Jarque \u2013 Bera Normality Test, \n6. Kolmogorov-Smirnov Normality Test,\n\nthe statements are true:\n\n$H_0$: Distribution ~ Normal()\n\n$H_1$: Distribution ~ Not Normal() $\\leftarrow p < 0.05$\n\n$\\Leftrightarrow$\n\nIf pvalue < 0.05: reject the null hypothesis $(H_0)$. Data is not gaussian (normal).","5395b614":"# Split and statistical heuristics","3a97f0bd":"$\\rightarrow$ Distributions are not normal $\\rightarrow$ Non-Parametric Test $\\rightarrow$ Mann-Whitney $\\Longleftrightarrow H_0$: Distributions equals, $H_1$: Not equals  ","2117023b":"# Removing outliers and creating a new dataframe","9e860599":"# Distribution before removing outliers","15657710":"## D\u2019Agostino\u2019s K-squared test","8c267dca":"## Kolmogorov-Smirnov Normality Test"}}