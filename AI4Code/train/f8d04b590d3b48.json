{"cell_type":{"2dbd0344":"code","0819d086":"code","f3c88000":"code","bf87c6d9":"code","8f8ecc88":"code","e1183bad":"code","21a68ce6":"code","0c15a2dd":"code","3d62bf32":"code","def64bc4":"code","e4102ad8":"code","22af8645":"code","40dee933":"code","bc125fc9":"code","926dd047":"code","4ca02279":"code","5c939a73":"code","1c40fcff":"code","231c9266":"code","38d7df35":"code","7e2d3381":"code","ef0b29ac":"code","5daa19dc":"code","56161e15":"code","428d98ef":"code","29665589":"code","bf9ea9ac":"code","2b1cb7dd":"code","23bce14c":"code","b8f9c3e6":"code","c58058bc":"code","18fb01e3":"code","3866458d":"code","aca1651b":"code","0ba2cb38":"code","d89c371a":"code","0b309034":"code","9d57aae6":"code","0eda05ee":"code","2c0f82fd":"code","80349a91":"code","939fe794":"code","b133d98d":"code","053b6cec":"code","421674eb":"code","a108b453":"code","8322b12d":"code","b627ebdf":"code","1991b473":"code","74a7ca9b":"code","1ebd252a":"code","9931b141":"code","636dea4f":"code","6d1dd910":"code","827ec62e":"code","7fd7685d":"code","8e84ab08":"code","a320c860":"code","814bb2e3":"code","c5c10d77":"code","162e8bfa":"code","8be8886d":"markdown","d4902608":"markdown","d1ba736f":"markdown","e0d71d82":"markdown","87faac42":"markdown","660337b4":"markdown","76bbe356":"markdown","4a7505eb":"markdown","5ab4afd4":"markdown","7d62a9a3":"markdown","3bc047b5":"markdown","8c113d37":"markdown","d01d893a":"markdown","65e0bb00":"markdown","224be7f7":"markdown","67b68eac":"markdown","90cd7602":"markdown","eb3d50a5":"markdown","244dfa54":"markdown","1e7caa25":"markdown","cb099473":"markdown","4ea8659c":"markdown","dd2f2da9":"markdown","731e4966":"markdown","4bd85746":"markdown","484ec509":"markdown","3b438130":"markdown","b518945f":"markdown","7a037989":"markdown","f4b7adad":"markdown","fc55e285":"markdown","c51616e5":"markdown","9f52303f":"markdown","116553b0":"markdown","aa5d0fa7":"markdown","bc9535dc":"markdown"},"source":{"2dbd0344":"import os\nimport re\n\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\n\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\nfrom IPython.display import Markdown as md","0819d086":"pd.options.display.max_rows = 999","f3c88000":"os.listdir('..\/input\/fifa-18-demo-player-dataset')","bf87c6d9":"complete_data = pd.read_csv('..\/input\/fifa-18-demo-player-dataset\/CompleteDataset.csv', index_col=0)\ncomplete_data.head()","8f8ecc88":"c_data = complete_data.copy()","e1183bad":"c_data.shape","21a68ce6":"c_data.info()","0c15a2dd":"c_data.describe()","3d62bf32":"c_data.duplicated().sum()","def64bc4":"c_data = c_data.drop_duplicates()","e4102ad8":"def get_number_missing_values_orig(df):\n    \"\"\"Return Series object with number of missing values in columns of DataFrame.\n    \n    Series object contains data only about columns, where missing values occurs.\n    \"\"\"\n    return df.isnull().sum()[df.isnull().any()]","22af8645":"def get_missing_values(df):\n    \"\"\"Return number and percent of missing values in columns of DataFrame.\n    \n    Contains data only about columns, where missing values occurs.\n    \"\"\"\n    total = df.isnull().sum()[df.isnull().any()]\n    percent = df.isnull().sum()[df.isnull().any()]\/df.shape[0]\n    missing = pd.concat([total, percent], axis=1)\n    missing.columns = ['Total', 'Percent']\n    return missing","40dee933":"nomv = get_missing_values(c_data)\nnomv","bc125fc9":"club_missing_values = c_data[c_data['Club'].isnull()]\nclub_missing_values.shape[0]","926dd047":"club_missing_values['Wage'].value_counts()","4ca02279":"print(f'{club_missing_values.shape[0]} players do not play for any club and those players do not have wage (\\u20ac0)')","5c939a73":"playing_position_columns = nomv.index.tolist()[1:]","1c40fcff":"gks = c_data[(c_data['Preferred Positions'] == 'GK ') & (c_data[playing_position_columns].isnull().all(1))]\ngks.shape[0]","231c9266":"md(f'Goalkeepers has no values for parameters connected with position on the field (there are {gks.shape[0]} players in this position).')","38d7df35":"c_data['Acceleration'].unique()","7e2d3381":"def str_int(s):\n    \"\"\"Return integer value from string object.\n    \n    Solves a simple equation contained in a string and returns a solution as integer value.\n    \"\"\"\n    pattern = re.compile(r'(\\d+)([+-]*)(\\d*)')\n    if isinstance(s, int):\n        return s\n    else:\n        m = pattern.match(s)\n        sign = m.group(2)\n        if sign == '-':\n            return int(m.group(1)) - int(m.group(3))\n        elif sign == '+':\n            return int(m.group(1)) + int(m.group(3))\n        else:\n            return int(m.group(1))","ef0b29ac":"for column in c_data.loc[:,'Acceleration':'Volleys']:\n    c_data[column] = c_data[column].apply(str_int)","5daa19dc":"assert c_data.loc[:, 'Acceleration':'Volleys'].dtypes.all() == np.dtype('int64')","56161e15":"c_data[['Value', 'Wage']].head()","428d98ef":"def get_amount_value(s):\n    \"\"\"Return amount value from string object.\n    \n    Converts the value of an amount with additional symbols to a floating point value.\n    \"\"\"\n    pattern = re.compile(r'(\\D*)(\\d+\\.\\d*|\\d+)(\\D*)')\n    m = pattern.match(s)\n    if m.group(3) == 'M':\n        return float(m.group(2)) * 1000000\n    elif m.group(3) == 'K':\n        return float(m.group(2)) * 1000\n    else:\n        return float(m.group(2))","29665589":"c_data['Value'] = c_data['Value'].apply(get_amount_value)\nc_data['Wage'] = c_data['Wage'].apply(get_amount_value)","bf9ea9ac":"assert c_data['Value'].dtype == np.dtype('float64')\nassert c_data['Wage'].dtype == np.dtype('float64')","2b1cb7dd":"c_data.head()","23bce14c":"c_data.info()","b8f9c3e6":"def format_value_y(t_val, t_pos):\n    \"\"\"Formats numbers to be graphically friendly.\"\"\"\n    if t_val > 1000000:\n        return f'{int(t_val\/1000000)}M'\n    if t_val >1000:\n        return f'{int(t_val\/1000)}K'\n    else:\n        return int(t_val)","c58058bc":"fig, axes = plt.subplots(2, 2, figsize=(12, 10), sharey='row')\nfig.suptitle('Distribution of values and wages of players', fontsize=20)\naxes[0, 0].hist(c_data['Wage'], bins=80)\naxes[0, 0].set_ylabel('count', fontsize=12)\naxes[0, 0].xaxis.set_major_formatter(ticker.FuncFormatter(format_value_y))\naxes[0, 1].hist(c_data['Value'], bins=80)\naxes[0, 1].xaxis.set_major_locator(ticker.MaxNLocator(6))\naxes[0, 1].ticklabel_format(style='plain', axis='x')\naxes[0, 1].xaxis.set_major_formatter(ticker.FuncFormatter(format_value_y))\naxes[1, 0].hist(c_data[c_data['Wage'] < 60000]['Wage'], bins=60)\naxes[1, 0].set_xlabel('wage [\\u20ac]', fontsize=12)\naxes[1, 0].set_ylabel('count', fontsize=12)\naxes[1, 0].xaxis.set_major_formatter(ticker.FuncFormatter(format_value_y))\naxes[1, 1].hist(c_data[c_data['Value'] < 15000000]['Value'], bins=60)\naxes[1, 1].set_xlabel('value [\\u20ac]', fontsize=12)\naxes[1, 1].xaxis.set_major_formatter(ticker.FuncFormatter(format_value_y))\n\nplt.tight_layout()","18fb01e3":"(c_data['Potential'] - c_data['Overall']).value_counts().sort_index(ascending=True)","3866458d":"plt.rc('axes', labelsize=14)\n\nfig, axes = plt.subplots(1, 2, figsize=(9, 5))\nfig.suptitle('Players age distribution and comparison of overall and potential ratings', fontsize=20)\n\naxes[0].hist(c_data['Age'], bins=30, density=True, alpha=.4)\naxes[0].set_xlabel('age [years]')\n\naxes[1].hist(c_data['Overall'], bins=40, density=True, alpha=.4, label='overall')\naxes[1].hist(c_data['Potential'], bins=40, density=True, alpha=.4, label='potential')\naxes[1].set_xlabel('overall\/potential rating')\naxes[1].legend(loc='best')\n\nplt.tight_layout()","aca1651b":"pair_attributes = ['Age', 'Wage', 'Value', 'Overall', 'Potential']","0ba2cb38":"sns.pairplot(c_data[pair_attributes], diag_kind='kde');","d89c371a":"columns = ['Name', 'Overall'] + c_data.columns[-28:].values.tolist()\nfield_players = c_data[c_data['Preferred Positions'] != 'GK '][columns]\nfield_players.head()","0b309034":"avg_points = field_players[field_players.columns.drop(['Overall', 'ID'])].mean(axis=1, numeric_only=True)\navg_points.index = field_players.Name\navg_points.sort_values(ascending=False).head()","9d57aae6":"md(f'The highest average of position attributes has: {avg_points.idxmax()}')","0eda05ee":"npn = 11 # minimum number of players from nationality","2c0f82fd":"grouped_nat = c_data.groupby('Nationality').agg(['count', 'mean'])['Overall']\nnat_ge_npn_players = grouped_nat[grouped_nat['count'] >= npn]\n\nplayers_nat_ge_npn = c_data.loc[c_data['Nationality'].isin(nat_ge_npn_players.index)]\nplayers_nat_npn = players_nat_ge_npn.groupby('Nationality').apply(lambda dfg: dfg.nlargest(npn, columns='Overall'))\nplayers_nat_npn['Overall'].mean(level=0).sort_values(ascending=False)[:10]","80349a91":"assert (players_nat_npn.groupby(level=0).size() == npn).all()","939fe794":"positions = []\nfor pp in c_data['Preferred Positions'].unique():\n    poss = [p for p in pp.split(' ') if p not in positions and p != '']\n    positions = positions + poss\nprint(positions)","b133d98d":"pref_posits = pd.Series(c_data['Preferred Positions'].values, index=c_data['ID'].values)\npref_posits = pref_posits.str.split(' ')\nfor e in pref_posits:\n    e.pop(e.index(''))\npref_posits.head()","053b6cec":"def get_preferred_positions_table(positions=positions, pref_posits=pref_posits):\n    \"\"\"Return the players' preferred positions encoded in dummy variables.\"\"\"\n    ppt = pd.DataFrame(0, index=pref_posits.index, columns=positions)\n    for i in ppt.iterrows():\n        pp = pref_posits.loc[i[0]]\n        i[1].loc[pp] = 1\n    return ppt","421674eb":"preferred_positions_table = get_preferred_positions_table()\npreferred_positions_table.head()","a108b453":"formations = {'3-4-1-2': ['GK', 'CB', 'CB', 'CB', 'CM', 'CM', 'LM', 'RM', 'CF', 'ST', 'ST'],\n              '3-4-2-1': ['GK', 'CB', 'CB', 'CB', 'CM', 'CM', 'LM', 'RM', 'LW', 'RW', 'ST'],\n              '3-4-3': ['GK', 'CB', 'CB', 'CB', 'CM', 'CM', 'LM', 'RM', 'LW', 'ST', 'RW'],\n              '3-5-2': ['GK', 'CB', 'CB', 'CB', 'CM', 'CM', 'LM', 'RM', 'CAM', 'ST', 'ST'],\n              '4-1-2-1-2': ['GK', 'CB', 'CB', 'LB', 'RB', 'CDM', 'LM', 'RM', 'CAM', 'ST', 'ST'],\n              '4-2-3-1': ['GK', 'CB', 'CB', 'LB', 'RB', 'CDM', 'CDM', 'CF', 'CAM', 'CAM', 'ST'],\n              '4-2-2-2': ['GK', 'CB', 'CB', 'LB', 'RB', 'CDM', 'CDM', 'CAM', 'CAM', 'ST', 'ST'],\n              '4-3-1-2': ['GK', 'CB', 'CB', 'LB', 'RB', 'CM', 'CM', 'CM', 'CF', 'ST', 'ST'],\n              '4-3-2-1': ['GK', 'CB', 'CB', 'LB', 'RB', 'CM', 'CM', 'CM', 'LW', 'RW', 'ST'],\n              '4-3-3': ['GK', 'CB', 'CB', 'LB', 'RB', 'CM', 'CM', 'CM', 'LW', 'ST', 'RW'],\n              '4-4-1-1': ['GK', 'CB', 'CB', 'LB', 'RB', 'LM', 'CM', 'CM', 'RM', 'CF', 'ST'],\n              '4-4-2': ['GK', 'CB', 'CB', 'LB', 'RB', 'CM', 'CM', 'LM', 'RM', 'ST', 'ST'],\n              '4-5-1': ['GK', 'CB', 'CB', 'LB', 'RB', 'LM', 'CM', 'RM', 'CAM', 'CAM', 'ST'],\n              '5-2-1-2': ['GK', 'LWB', 'CB', 'CB', 'CB', 'RWB', 'CM', 'CM', 'CF', 'ST', 'ST'],\n              '5-2-2-1': ['GK', 'LWB', 'CB', 'CB', 'CB', 'RWB', 'CM', 'CM', 'LW', 'RW', 'ST'],\n              '5-3-2': ['GK', 'LWB', 'CB', 'CB', 'CB', 'RWB', 'CM', 'CM', 'CM', 'ST', 'ST']\n             }","8322b12d":"def get_dream_team(formation, data=c_data, formations=formations, player_p=preferred_positions_table):\n    \"\"\"Return the best players from the given dataset for a specific formation.\"\"\"\n    dt = pd.DataFrame(columns=['ID', 'Name', 'Club', 'Overall', 'Preferred Positions', 'Position'])\n    dt['ID'] = dt['ID'].astype('int64')\n    dt['Overall'] = dt['Overall'].astype('int64')\n    for pos in formations[formation]:\n        ps = data[data['ID'].isin(player_p[player_p[pos] == 1].index)][['ID', 'Name', 'Club', 'Overall', 'Preferred Positions']].sort_values(by='Overall', ascending=False)\n        if ps.empty:\n            raise IndexError(f'No player for position {pos}')\n        i = 0\n        while (ps.iloc[i]['ID'] not in dt['ID'].values) == False:\n            i += 1\n        player = ps.iloc[i:i+1,:]\n        player = player.assign(Position=pos)\n        dt = dt.append(player, ignore_index=True)\n    return dt","b627ebdf":"bc_data = c_data[['ID', 'Name', 'Club', 'Overall']]\nbc_data.head()","1991b473":"bp_club = bc_data[['Club', 'Overall']].sort_values('Overall', ascending=False).groupby('Club', sort=False).mean().head()\nbp_club.style.format('{:.1f}')","74a7ca9b":"def get_formation_scores(data, formations=formations, player_p=preferred_positions_table):\n    \"\"\"Return the sum of players' overall score for the best team in specific formation from given dataset.\"\"\"\n    # TODO napisa\u0107, \u017ce warto\u015b\u0107 0 oznacza brak zawodnika dla jakiej\u015b pozycji\n    formation_scores = {}\n    for f in formations:\n        try:\n            formation_best_players = get_dream_team(f, data)\n            formation_score = formation_best_players['Overall'].sum()\n            formation_scores[f] = formation_score\n        except IndexError as ie:\n            formation_scores[f] = 0\n    return formation_scores","1ebd252a":"def get_best_club_formation(data, formations=formations, player_p=preferred_positions_table):\n    \"\"\"Return the best formation data for a given club and the sum of the overall player ratings for that formation.\"\"\"\n    club_name = data['Club'].unique()\n    assert len(club_name) == 1, 'Data contains info about players without a club or from more than one club'\n    \n    formation_scores = get_formation_scores(data)\n    forms = []\n    max_v = max(formation_scores.values())\n    for k, v in formation_scores.items():\n        if v == max_v:\n            forms.append(k)\n    return {'points': max_v, 'club': club_name[0], 'formations': forms}","9931b141":"def get_best_clubs_formation(data):\n    \"\"\"Return data about best club with they best formation(s) and sum of players' overall score in this formation(s).\"\"\"\n    best_clubs = []\n    data = data.dropna(subset=['Club'])\n    clubs = data['Club'].unique()\n    for club in clubs:\n        club_data = data[data['Club'] == club]\n        bcf = get_best_club_formation(club_data)\n        if len(best_clubs) == 0 or bcf['points'] == best_clubs[0]['points']:\n            best_clubs.append(bcf)\n        elif bcf['points'] > best_clubs[0]['points']:\n            best_clubs = [bcf]\n    return best_clubs","636dea4f":"get_best_clubs_formation(c_data)","6d1dd910":"formation = '4-4-2'\nget_dream_team(formation)","827ec62e":"pl_players = c_data[c_data['Nationality'] == 'Poland']\npl_players.head()","7fd7685d":"formation_pl = '4-4-2'\nget_dream_team(formation_pl, data=pl_players)","8e84ab08":"mpl.rc('image', cmap='Pastel1')\ncmap = mpl.cm.get_cmap(name='Pastel1')\n\nfig, axes = plt.subplots(4, 2, figsize=(12, 16), sharey='row')\nfig.suptitle('Polish players vs. world players', fontsize=20, y=1.01)\n\naxes[0, 0].hist(pl_players['Age'], bins=20, density=True, alpha=.4, label='polish')\naxes[0, 0].hist(c_data['Age'], bins=20, density=True, alpha=.4, label='world')\naxes[0, 0].set_xlabel('age (years)')\naxes[0, 0].set_ylabel('count')\naxes[0, 0].legend(loc='best')\n\naxes[0, 1].hist(pl_players['Overall'], bins=40, density=True, alpha=.4, label='polish')\naxes[0, 1].hist(c_data['Overall'], bins=40, density=True, alpha=.4, label='world')\naxes[0, 1].set_xlabel('overall score')\naxes[0, 1].legend(loc='best')\n\naxes[1, 0].scatter(pl_players['Age'], pl_players['Overall'], alpha=.4, s=6, label='polish')\naxes[1, 0].set_xlabel('age (years)')\naxes[1, 0].set_ylabel('overall score')\naxes[1, 0].legend(loc='best')\n\naxes[1, 1].scatter(c_data['Age'], c_data['Overall'], alpha=.4, color=cmap(.5), s=6, label='world')\naxes[1, 1].set_xlabel('age (years)')\naxes[1, 1].legend(loc='best')\n\naxes[2, 0].scatter(pl_players['Overall'], pl_players['Value'], alpha=.2, s=6, label='polish')\naxes[2, 0].set_xlabel('overal score')\naxes[2, 0].set_ylabel('value [\\u20ac]')\naxes[2, 0].yaxis.set_major_formatter(ticker.FuncFormatter(format_value_y))\naxes[2, 0].legend(loc='best')\n\naxes[2, 1].scatter(c_data['Overall'], c_data['Value'], alpha=.2, color=cmap(.5), s=6, label='world')\naxes[2, 1].set_xlabel('overal score')\naxes[2, 1].legend(loc='best')\n\naxes[3, 0].scatter(pl_players['Overall'], pl_players['Wage'], s=6, label='polish')\naxes[3, 0].set_xlabel('overal score')\naxes[3, 0].set_ylabel('wage [\\u20ac]')\naxes[3, 0].yaxis.set_major_formatter(ticker.FuncFormatter(format_value_y))\naxes[3, 0].legend(loc='best')\n\naxes[3, 1].scatter(c_data['Overall'], c_data['Wage'], s=6, label='world')\naxes[3, 1].set_xlabel('overal score')\naxes[3, 1].legend(loc='best')\n\nplt.tight_layout()","a320c860":"club_player_values = c_data[['Club', 'Value']].groupby('Club').agg(['mean', 'min', 'max', 'sum']).sort_values(by=('Value', 'mean'), ascending=False)\nclub_player_values.head().style.format(' \\u20ac{:.0f}')","814bb2e3":"player_weges = c_data[['Wage', 'Club']].groupby('Club').agg(['mean', 'min', 'max', 'sum']).sort_values(by=('Wage', 'mean'), ascending=False)\nplayer_weges.head().style.format('\\u20ac{:.0f}')","c5c10d77":"players_age = c_data[['Age', 'Club']].groupby('Club').mean().sort_values(by='Age')","162e8bfa":"print(f'The club with the lowest average age of players:\\t{players_age[\"Age\"].idxmin()} ({players_age[\"Age\"].iloc[0]:.1f})')\nprint(f'The club with the highest average age of players:\\t{players_age[\"Age\"].idxmax()} ({players_age[\"Age\"].iloc[-1]:.1f})')","8be8886d":"Players' preferred positions","d4902608":"Checking for missing data in the Club column.","d1ba736f":"### Which club has the best players (by overall score of the players)?","e0d71d82":"### Who has the highest average of position attributes?","87faac42":"#### Differences between potential and overall rating","660337b4":"#### The first look at the data","76bbe356":"Columns with attribute parameters can contain values with + and - sign (we got DtypeWarning: Columns (23,35) have mixed types. while loading data).","4a7505eb":"#### Importing the necessary packages","5ab4afd4":"Performing subtraction or addition and converting values to integers.","7d62a9a3":"### Which club has the best XI in which formation (by overall score of the players)?","3bc047b5":"#### Choosing the best players (by overall score)","8c113d37":"### Which nationality the players are the best? (by overall score)","d01d893a":"### Which club pays the most players?","65e0bb00":"# Data Loading","224be7f7":"List of available player positions","67b68eac":"The dataset contains duplicate rows so we need to remove them.","90cd7602":"### Which players are part of Polish Dream Team?","eb3d50a5":"These values will be more useful as floating point numbers.","244dfa54":"Due to the small number of players from some nationalities, we only consider nationalities with minimum than 11 players. From these nationalities, we select the top 11 players and calculate their average overall rating. We compare this value between nationalities.","1e7caa25":"#### Checking correctnes of transformed data","cb099473":"### Which players are part of World Dream Team?","4ea8659c":"# Analysis","dd2f2da9":"# Basic data analysis and insights from FIFA 18 Complete Player Dataset","731e4966":"# Data Cleaning","4bd85746":"Formations available for teams","484ec509":"# Exploring Data","3b438130":"#### Pairwise relationships between Age, Wage, Value, Overall and Potential","b518945f":"Dataset downloaded from https:\/\/www.kaggle.com\/thec03u5\/fifa-18-demo-player-dataset","7a037989":"#### Detecting missing values","f4b7adad":"#### Removing duplicates","fc55e285":"### Which club has the most valuable players?","c51616e5":"The columns with Wage and Value of players contains values in string type with EUR symbol and the sign M (million) or K (thousand).","9f52303f":"Let's see how many missing values are in the specified columns.","116553b0":"### Which club has the youngest and which has the oldest players?","aa5d0fa7":"#### Distribution of values and wages of players","bc9535dc":"### Transforming data"}}