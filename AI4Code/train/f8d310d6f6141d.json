{"cell_type":{"fd6faaef":"code","6238a575":"code","a822ff60":"code","bbf9769e":"code","d820597a":"code","6712de5d":"code","af4a1bd7":"code","6e3e36d7":"code","01e7157a":"code","22b9f24d":"code","c9caaeee":"code","f255069f":"code","cab3e4ab":"code","d17e92cc":"code","08559ea0":"code","d404e33a":"code","374bba74":"code","f10bbb8f":"markdown","9703b02e":"markdown","da5ed525":"markdown"},"source":{"fd6faaef":"import pandas as pd, numpy as np, matplotlib.pyplot as plt, seaborn as sns","6238a575":"path = '..\/input\/mushroom-classification\/mushrooms.csv'","a822ff60":"data= pd.read_csv(path)","bbf9769e":"data.head()","d820597a":"data.info()","6712de5d":"data.shape","af4a1bd7":"unique_data= [] \nfor x in data.columns.tolist():\n    num= data[x].nunique()\n    value= data[x].unique()\n    unique_data.append(pd.Series({'col_name' : x,\n               'num_unique' : num,\n               'value_unique': value}))\nuniques = pd.concat(unique_data,axis=1).T.set_index('col_name')\nuniques","6e3e36d7":"def missing_values(data):\n    null_count = data.isnull().sum()\n    empty_count = ((data == '') | (data== ' ')).sum()\n    nan_count = ((data == 'nan') | (data== 'NaN')).sum()\n    null_percent = null_count\/ data.shape[0]\n    nan_percent = nan_count\/ data.shape[0]\n    empty_percent = empty_count\/ data.shape[0]\n    value= pd.DataFrame({'null_count': null_count ,\n                         'null_percent' : null_percent,\n                         'nan_count': nan_count,\n                         'nan_percent' : nan_percent,\n                         'empty_count': empty_count,\n                         'empty_percent' : empty_percent\n                        })\n    return value\nmissing_values(data)","01e7157a":"from sklearn.preprocessing import LabelEncoder\nle= LabelEncoder()\nfor x in data.columns.tolist():\n    data[x]=le.fit_transform(data[x])\n    print(x,le.classes_)","22b9f24d":"data.head()","c9caaeee":"#finding the correlation(absolute value)\ncor= data.corr().abs()\ncor","f255069f":"plt.figure(figsize=(19,15))\nax= sns.heatmap(cor, annot= True)","cab3e4ab":"fig= plt.figure(figsize=(13,8))\nax= fig.gca()\ndata.hist(ax=ax)\nplt.show()","d17e92cc":"x_dropped_columns = data.drop(['cap-shape','cap-color','veil-type','habitat','class'],axis=1)  #removing some features\n\nx_all_columns = data.drop('class', axis=1)   #taking all the features\n\ny= data['class']","08559ea0":"from sklearn.model_selection import train_test_split\n\nx_train_drop,x_test_drop,y_train_drop,y_test_drop = train_test_split(x_dropped_columns,y, test_size= 0.3, random_state=0)\n\nx_train_all,x_test_all,y_train_all,y_test_all = train_test_split(x_all_columns, y, test_size= 0.3, random_state=0)","d404e33a":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\nresult= []\nRF_1 = RandomForestClassifier(oob_score=False, \n                            random_state=42, \n                            warm_start=True,\n                            n_jobs=-1)\nRF_2 = RandomForestClassifier(oob_score=False, \n                            random_state=42, \n                            warm_start=True,\n                            n_jobs=-1)\n# Iterate through all of the possibilities for number of trees\nfor n_trees in [15, 20, 30, 40, 50, 100, 150, 200, 300, 400]:\n    \n    x1= RF_1.set_params(n_estimators=n_trees)     # Use this to set the number of trees\n    x2= RF_2.set_params(n_estimators=n_trees)\n    \n    RF_1.fit(x_train_drop, y_train_drop)            # Fit the model\n    RF_2.fit(x_train_all, y_train_all) \n    \n    rf1_ypred = RF_1.predict(x_test_drop)\n    rf2_ypred = RF_2.predict(x_test_all)\n    \n    result.append(pd.Series({'num_trees' : n_trees,\n                            'pred_score_1' : accuracy_score(y_test_drop,rf1_ypred),\n                            'pred_score_2' : accuracy_score(y_test_all,rf2_ypred)\n                            }))\n\nrf_result = pd.concat(result, axis=1).T.set_index('num_trees')  \nrf_result","374bba74":"from sklearn.metrics import confusion_matrix\nconfusion_matrix_1 = confusion_matrix(y_test_drop, rf1_ypred)\nconfusion_matrix_2 = confusion_matrix(y_test_all, rf2_ypred)\n\nprint('confusion_matrix_1 \\n', confusion_matrix_1)\nprint('\\n')\nprint('confusion_matrix_2 \\n', confusion_matrix_2)","f10bbb8f":"There are 23 columns and 8124 rows, out of which none are empty\/ nan\/ null.","9703b02e":"Getting all the unique values in the data.","da5ed525":"Surprisingly, it works with every number of trees we choose!\n\n(If something is wrong, please let me know!)\n"}}