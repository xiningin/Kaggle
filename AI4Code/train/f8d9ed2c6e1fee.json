{"cell_type":{"72b2f49d":"code","3796a57e":"code","26d77e06":"code","f6e0d7c9":"code","db84904c":"code","4dc89efa":"code","42edbf45":"code","3f3afc13":"code","ec488e68":"code","c17edcd1":"code","68cccf6f":"code","7ae9b0b8":"code","d5f07abf":"code","538d5d93":"code","71f441aa":"code","c133289f":"code","aaa641ca":"code","6264b601":"code","174f7a59":"code","11fed9ad":"code","2961c91b":"code","7dea4931":"markdown","4d1d56d5":"markdown","07ddf7d3":"markdown","0b816330":"markdown","27bd1339":"markdown","58a8eaf1":"markdown","eaa43b94":"markdown","7ac5d875":"markdown","f4e1b3d8":"markdown","82153d3d":"markdown","185d3084":"markdown","3157e363":"markdown","92f3daa3":"markdown","f879cac3":"markdown","e873a587":"markdown","8146eb66":"markdown","a9a1880a":"markdown","cf1f6d8d":"markdown"},"source":{"72b2f49d":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sea","3796a57e":"from keras.datasets.mnist import load_data\nfrom keras.layers import Dense,Embedding,Conv2D,MaxPooling2D,Flatten,Dropout\nfrom keras.models import Sequential\nfrom keras.losses import binary_crossentropy\nfrom keras.optimizers import SGD,rmsprop,RMSprop\nfrom keras.metrics import binary_accuracy\nfrom keras.utils import to_categorical\nfrom keras.preprocessing.image import ImageDataGenerator","26d77e06":"trainDataGen=ImageDataGenerator(rescale=1.\/255)\ntestDataGen=ImageDataGenerator(rescale=1.\/255)","f6e0d7c9":"trainData=trainDataGen.flow_from_directory(\"\/kaggle\/input\/cat-and-dog\/training_set\/training_set\",batch_size=20,class_mode='binary')\ntestData=testDataGen.flow_from_directory(\"\/kaggle\/input\/cat-and-dog\/test_set\/test_set\",batch_size=20,class_mode='binary')","db84904c":"trainData.image_shape","4dc89efa":"Y_train=to_categorical(trainData.classes)\nY_test=to_categorical(testData.classes)","42edbf45":"Y_train.shape","3f3afc13":"sea.countplot(trainData.classes)","ec488e68":"sea.countplot(testData.classes)","c17edcd1":"network=Sequential()\nnetwork.add(Conv2D(128,(3,3),activation='relu',input_shape=(256,256,3)))\nnetwork.add(MaxPooling2D((2,2)))\nnetwork.add(Conv2D(128,(3,3),activation='relu'))\nnetwork.add(MaxPooling2D((2,2)))\nnetwork.add(Conv2D(128,(3,3),activation='relu'))\nnetwork.add(MaxPooling2D((2,2)))\nnetwork.add(Conv2D(128,(3,3),activation='relu'))\nnetwork.add(MaxPooling2D((2,2)))\nnetwork.add(Conv2D(128,(3,3),activation='relu'))\nnetwork.add(Flatten())\nnetwork.add(Dropout(0.9))\nnetwork.add(Dense(256,activation='relu'))\nnetwork.add(Dropout(0.5))\nnetwork.add(Dense(256,activation='relu'))\nnetwork.add(Dropout(0.5))\nnetwork.add(Dense(256,activation='relu'))\nnetwork.add(Dense(1,activation='sigmoid'))","68cccf6f":"network.summary()","7ae9b0b8":"network.compile(loss='binary_crossentropy',optimizer=RMSprop(lr=0.0001),metrics=['acc'])","d5f07abf":"network.fit_generator(trainData,steps_per_epoch=250,epochs=40)","538d5d93":"network.evaluate_generator(testData,steps=250)","71f441aa":"filename=\"\/kaggle\/input\/cat-and-dog\/training_set\/training_set\/cats\/cat.1.jpg\"\nplt.imshow(plt.imread(filename))","c133289f":"from keras.preprocessing import image\n\nimg=image.load_img(filename,target_size=(256,256))\nimgArray=image.img_to_array(img)\nimgTensor=np.expand_dims(imgArray,axis=0)\/255","aaa641ca":"imgTensor.shape","6264b601":"from keras import models\nlayer_output=[layer.output for layer in network.layers[:4]]\nactivationModel=models.Model(inputs=network.input,output=layer_output)","174f7a59":"activation=activationModel.predict(imgTensor)[2]\nactivation.shape","11fed9ad":"plt.matshow(activation[0,:,:,4])","2961c91b":"plt.matshow(activation[0,:,:,50])","7dea4931":"Lets see the summary of our network.","4d1d56d5":"We will use ImageDataGenerator for generating data from the image set.\n\nWe already know that small the size the size of computational data, faster is the processing of neural network. So we will scale the image by factor of 1\/255 to bring all the RGB values in range [0,1].","07ddf7d3":"This can be done by adding more parameter to the ImageGenerator function to generated image with transformation\n\nfor example:-\n\nImageDataGenerator(rescale=1.\/255,zca_whitening=True,rotation_range=30,vertical_flip=True)","0b816330":"Lets generate the image data for training set and test set.","27bd1339":"Lets see how to visualize the output of layers of CovNet","58a8eaf1":"Plotting the output of 4th channel","eaa43b94":"For 3rd layer or 2nd CovNet layer","7ac5d875":"Here we will use fit_generator instead of fit as input to network is going too be generator.\n\nsteps_per_epoch is 250 and epochs is 40. This is going to be highly computationally expensive.","f4e1b3d8":"****\n****","82153d3d":"So both training set and test set have equal number of samples for both category.","185d3084":"Here we will use RMSprop as optimizers. Its default learning rate is 0.001. I had set it to 0.0001.\n\nYou can also use SGD and set the learning rate and momentum.","3157e363":"Lets create the 4D tensor for image","92f3daa3":"Lets generate the output of model for our input\n\nTaking output of first 4 layer","f879cac3":"Now lets begin with network creation.\n\nWe will use CovNet with 3x3 window,128 channel and activation function as 'Relu'","e873a587":"Plotting output for 50th channel","8146eb66":"I have added few dropout layers in model to handle overfitting. This has decreased the training accuracy but increased the testing accuracy. \n\nFeel free to change the dropout values to see the affect on the accuracy of model.\n\nOverfitting can also be handlled by bringing in more data which can be done by Data Augmentation. This involves generating more data from existing data.\n\nFor example, a sample image can be rotated,flipped,zoomed or transformed to generate more data.","a9a1880a":"So from above block of code we found out that image size is 256x256 and in 3 channel. We can resize the images to smaller size lets say 150x150 so as to decrease the size of feature map generated by CovNets. We can pass **target_size** parameter to flow_from_directory to get the desired size.\n\n\nHere lets continue with the original size i.e 256x256","cf1f6d8d":"activation output have 128 channel and with size of 254x254"}}