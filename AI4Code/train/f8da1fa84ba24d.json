{"cell_type":{"46385c28":"code","f7fec8ea":"code","71643516":"code","a6e90f2f":"code","2897458f":"code","06c66025":"code","8218ddd9":"code","47ab1ba4":"code","f5e1cbd9":"code","c2db04b2":"code","7b3a0277":"code","a9208436":"markdown","9ea8ce8e":"markdown","82ac1273":"markdown","3cc5c05a":"markdown","a4b0eaea":"markdown","828dfe09":"markdown"},"source":{"46385c28":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.graph_objs as go\nimport plotly.express as px\nfrom plotly.offline import init_notebook_mode\nfrom pprint import pprint\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn import metrics\n\ninit_notebook_mode(connected = True)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f7fec8ea":"# IMPORT DATA AS DATAFRAME\ndf_pg1 = pd.read_csv('..\/input\/solar-power-generation-data\/Plant_1_Generation_Data.csv')\ndf_pg2 = pd.read_csv('..\/input\/solar-power-generation-data\/Plant_2_Generation_Data.csv')\ndf_wsd1 = pd.read_csv('..\/input\/solar-power-generation-data\/Plant_1_Weather_Sensor_Data.csv')\ndf_wsd2 = pd.read_csv('..\/input\/solar-power-generation-data\/Plant_2_Weather_Sensor_Data.csv')","71643516":"# Extract DATE_TIME object from string\ndf_pg1['DATE_TIME'] = pd.to_datetime(df_pg1['DATE_TIME'], format = '%d-%m-%Y %H:%M')\ndf_pg2['DATE_TIME'] = pd.to_datetime(df_pg2['DATE_TIME'], format = '%Y-%m-%d %H:%M')\ndf_wsd1['DATE_TIME'] = pd.to_datetime(df_wsd1['DATE_TIME'], format = '%Y-%m-%d %H:%M')\ndf_wsd2['DATE_TIME'] = pd.to_datetime(df_wsd2['DATE_TIME'], format = '%Y-%m-%d %H:%M')\ndf_pg1['DATE'] = df_pg1['DATE_TIME'].dt.date\ndf_pg2['DATE'] = df_pg2['DATE_TIME'].dt.date\ndf_wsd1['DATE'] = df_wsd1['DATE_TIME'].dt.date\ndf_wsd2['DATE'] = df_wsd2['DATE_TIME'].dt.date\ndf_pg1['TIME'] = df_pg1['DATE_TIME'].dt.time\ndf_pg2['TIME'] = df_pg2['DATE_TIME'].dt.time\ndf_wsd1['TIME'] = df_wsd1['DATE_TIME'].dt.time\ndf_wsd2['TIME'] = df_wsd2['DATE_TIME'].dt.time","a6e90f2f":"# AC vs DC\ntmp = df_pg1.groupby(['TIME'], as_index = False).agg({'DC_POWER': 'mean', 'AC_POWER': 'mean'})\nfig_gph = go.Figure()\nfig_gph.add_trace(go.Scatter(x = tmp.DC_POWER, y = tmp.AC_POWER, mode = 'lines'))\nfig_gph.update_layout(title = 'Mean AC\/DC Power by Module at Station 1', xaxis_title = 'DC Power', yaxis_title = 'AC Power')\nfig_gph.show()\n\ntmp = df_pg2.groupby(['TIME'], as_index = False).agg({'DC_POWER': 'mean', 'AC_POWER': 'mean'})\nfig_gph = go.Figure()\nfig_gph.add_trace(go.Scatter(x = tmp.DC_POWER, y = tmp.AC_POWER, mode = 'lines'))\nfig_gph.update_layout(title = 'Mean AC\/DC Power by Module at Station 2', xaxis_title = 'DC Power', yaxis_title = 'AC Power')\nfig_gph.show()","2897458f":"# Irradiation vs Temp diff\nfig_gph = go.Figure()\nfig_gph.add_trace(go.Scatter(x = df_wsd1['IRRADIATION'], y = df_wsd1['MODULE_TEMPERATURE'] - df_wsd1['AMBIENT_TEMPERATURE'], mode = 'markers', name = 'Module Temp'))\nfig_gph.update_layout(title = 'Irradiation vs Difference of Module Temperature and Ambient Temperature at Plant 1', xaxis_title = 'Irradiation', yaxis_title = 'Temperature Difference')\nfig_gph.show()\n\nfig_gph = go.Figure()\nfig_gph.add_trace(go.Scatter(x = df_wsd2['IRRADIATION'], y = df_wsd2['MODULE_TEMPERATURE'] - df_wsd1['AMBIENT_TEMPERATURE'], mode = 'markers', name = 'Module Temp'))\nfig_gph.update_layout(title = 'Irradiation vs Difference of Module Temperature and Ambient Temperature at Plant 2', xaxis_title = 'Irradiation', yaxis_title = 'Temperature Difference')\nfig_gph.show()","06c66025":"#Time vs Temp\ntmp = df_wsd1.groupby('TIME', as_index = False).agg({'MODULE_TEMPERATURE': 'mean', 'AMBIENT_TEMPERATURE': 'mean'})\nfig_gph = go.Figure()\nfig_gph.add_trace(go.Scatter(x = tmp.TIME, y = tmp.MODULE_TEMPERATURE, mode = 'lines', name = 'Module Temp'))\nfig_gph.add_trace(go.Scatter(x = tmp.TIME, y = tmp.AMBIENT_TEMPERATURE, mode = 'lines', name = 'Ambient Temp'))\nfig_gph.add_trace(go.Scatter(x = tmp.TIME, y = np.abs(tmp.MODULE_TEMPERATURE - tmp.AMBIENT_TEMPERATURE), mode = 'lines', name = 'Difference'))\nfig_gph.update_layout(title = 'Mean Tempature over time at Station 1', xaxis_title = 'Temp', yaxis_title = 'Dates')\nfig_gph.show()\n\ntmp = df_wsd2.groupby('TIME', as_index = False).agg({'MODULE_TEMPERATURE': 'mean', 'AMBIENT_TEMPERATURE': 'mean'})\nfig_gph = go.Figure()\nfig_gph.add_trace(go.Scatter(x = tmp.TIME, y = tmp.MODULE_TEMPERATURE, mode = 'lines', name = 'Module Temp'))\nfig_gph.add_trace(go.Scatter(x = tmp.TIME, y = tmp.AMBIENT_TEMPERATURE, mode = 'lines', name = 'Ambient Temp'))\nfig_gph.add_trace(go.Scatter(x = tmp.TIME, y = np.abs(tmp.MODULE_TEMPERATURE - tmp.AMBIENT_TEMPERATURE), mode = 'lines', name = 'Difference'))\nfig_gph.update_layout(title = 'Mean Tempature over time at Station 2', xaxis_title = 'Temp', yaxis_title = 'Dates')\nfig_gph.show()","8218ddd9":"#Time vs AC\/DC\ntmp = df_pg1.groupby('TIME', as_index = False).agg({'DC_POWER': 'mean', 'AC_POWER': 'mean'})\nfig_gph = go.Figure()\nfig_gph.add_trace(go.Scatter(x = tmp.TIME, y = tmp.DC_POWER\/10, mode = 'lines', name = 'Mean DC Power'))\nfig_gph.add_trace(go.Scatter(x = tmp.TIME, y = tmp.AC_POWER, mode = 'lines', name = 'Mean AC Power'))\nfig_gph.update_layout(title = 'Mean AC\/DC Power over Time Intervals at Station 1', xaxis_title = 'Time', yaxis_title = 'Power', xaxis_tickangle = 45)\nfig_gph.show()\n\ntmp = df_pg2.groupby('TIME', as_index = False).agg({'DC_POWER': 'mean', 'AC_POWER': 'mean'})\nfig_gph = go.Figure()\nfig_gph.add_trace(go.Scatter(x = tmp.TIME, y = tmp.DC_POWER, mode = 'lines', name = 'Mean DC Power'))\nfig_gph.add_trace(go.Scatter(x = tmp.TIME, y = tmp.AC_POWER, mode = 'lines', name = 'Mean AC Power'))\nfig_gph.update_layout(title = 'Mean AC\/DC Power over Time Intervals at Station 2', xaxis_title = 'Time', yaxis_title = 'Power', xaxis_tickangle = 45)\nfig_gph.show()","47ab1ba4":"#Date vs AC\/DC\ntmp = df_pg1.groupby('DATE', as_index = False).agg({'DC_POWER': 'mean', 'AC_POWER': 'mean'})\nfig_gph = go.Figure()\nfig_gph.add_trace(go.Scatter(x = tmp.DATE, y = tmp.DC_POWER\/10, mode = 'lines', name = 'Mean DC Power'))\nfig_gph.add_trace(go.Scatter(x = tmp.DATE, y = tmp.AC_POWER, mode = 'lines', name = 'Mean AC POWER'))\nfig_gph.update_layout(title = 'Mean AC\/DC Power over 34 days at Station 1', xaxis_title = 'Dates', yaxis_title = 'Mean Power', xaxis_tickangle = 45)\nfig_gph.show()\n\ntmp = df_pg2.groupby('DATE', as_index = False).agg({'DC_POWER': 'mean', 'AC_POWER': 'mean'})\nfig_gph = go.Figure()\nfig_gph.add_trace(go.Scatter(x = tmp.DATE, y = tmp.DC_POWER, mode = 'lines', name = 'Mean DC Power'))\nfig_gph.add_trace(go.Scatter(x = tmp.DATE, y = tmp.AC_POWER, mode = 'lines', name = 'Mean AC POWER'))\nfig_gph.update_layout(title = 'Mean AC\/DC Power over 34 days at Station 2', xaxis_title = 'Dates', yaxis_title = 'Mean Power', xaxis_tickangle = 45)\nfig_gph.show()","f5e1cbd9":"#Source key wise DC\/AC\ntmp = df_pg1.groupby(['SOURCE_KEY', 'DATE'], as_index = False).agg({'DC_POWER': 'mean', 'AC_POWER': 'mean'})\nfig_gph = go.Figure()\nkeys = df_pg1['SOURCE_KEY'].unique()\nfor key in keys:\n    fig_gph.add_trace(go.Scatter(x = tmp[tmp['SOURCE_KEY'] == key].DATE, y = tmp[tmp['SOURCE_KEY'] == key].AC_POWER, mode = 'lines', name = key))\nfig_gph.update_layout(title = 'Mean AC Power by each Module per day at Station 1', xaxis_title = 'Dates', yaxis_title = 'Power')\nfig_gph.show()\nfig_gph = go.Figure()\nfor key in keys:\n    fig_gph.add_trace(go.Scatter(x = tmp[tmp['SOURCE_KEY'] == key].DATE, y = tmp[tmp['SOURCE_KEY'] == key].DC_POWER, mode = 'lines', name = key))\nfig_gph.update_layout(title = 'Mean DC Power by each Module per day at Station 1', xaxis_title = 'Dates', yaxis_title = 'Power')\nfig_gph.show()\n\ntmp = df_pg2.groupby(['SOURCE_KEY', 'DATE'], as_index = False).agg({'DC_POWER': 'mean', 'AC_POWER': 'mean'})\nfig_gph = go.Figure()\nkeys = df_pg2['SOURCE_KEY'].unique()\nfor key in keys:\n    fig_gph.add_trace(go.Scatter(x = tmp[tmp['SOURCE_KEY'] == key].DATE, y = tmp[tmp['SOURCE_KEY'] == key].AC_POWER, mode = 'lines', name = key))\nfig_gph.update_layout(title = 'Mean AC Power by each Module per day at Station 2', xaxis_title = 'Dates', yaxis_title = 'Power')\nfig_gph.show()\nfig_gph = go.Figure()\nfor key in keys:\n    fig_gph.add_trace(go.Scatter(x = tmp[tmp['SOURCE_KEY'] == key].DATE, y = tmp[tmp['SOURCE_KEY'] == key].DC_POWER, mode = 'lines', name = key))\nfig_gph.update_layout(title = 'Mean DC Power by each Module per day at Station 2', xaxis_title = 'Dates', yaxis_title = 'Power')\nfig_gph.show()","c2db04b2":"#SeaBorn PairPlot\ntmp = pd.merge(df_pg1.drop(columns = ['PLANT_ID']), df_wsd1.drop(columns = ['DATE', 'TIME', 'PLANT_ID', 'SOURCE_KEY']), on = 'DATE_TIME', how = 'left')\nprint('Station 1 Power Data Pair Plot')\nsns.pairplot(tmp)\nplt.show()\ntmp = pd.merge(df_pg2.drop(columns = ['PLANT_ID']), df_wsd1.drop(columns = ['DATE', 'TIME', 'PLANT_ID', 'SOURCE_KEY']), on = 'DATE_TIME', how = 'left')\nprint('Station 2 Power Data Pair Plot')\nsns.pairplot(tmp)\nplt.show()","7b3a0277":"#Scatter Summary\ntmp = df_pg1[['DATE', 'SOURCE_KEY', 'DC_POWER', 'AC_POWER', 'DAILY_YIELD', 'TOTAL_YIELD']]\nfig_gph = go.Figure(data = go.Splom(dimensions=\n                                        [dict(label='DC', values=tmp['DC_POWER']), \n                                         dict(label='AC', values=tmp['AC_POWER']), \n                                         dict(label='Daily Yield', values=tmp['DAILY_YIELD']), \n                                         dict(label='Total Yield', values=tmp['TOTAL_YIELD']), \n                                         dict(label='Date', values=tmp['DATE'])], \n                                    diagonal_visible = False, marker = dict(color = tmp['SOURCE_KEY'].astype('category').cat.codes, showscale = False)))\nfig_gph.update_layout(title = 'Plant 1 Summary')\nfig_gph.show()\n\ntmp = df_pg2[['DATE', 'SOURCE_KEY', 'DC_POWER', 'AC_POWER', 'DAILY_YIELD', 'TOTAL_YIELD']]\nfig_gph = go.Figure(data = go.Splom(dimensions=\n                                        [dict(label='DC', values=tmp['DC_POWER']), \n                                         dict(label='AC', values=tmp['AC_POWER']), \n                                         dict(label='Daily Yield', values=tmp['DAILY_YIELD']), \n                                         dict(label='Total Yield', values=tmp['TOTAL_YIELD']), \n                                         dict(label='Date', values=tmp['DATE'])], \n                                    diagonal_visible = False, marker = dict(color = tmp['SOURCE_KEY'].astype('category').cat.codes, showscale = False)))\nfig_gph.update_layout(title = 'Plant 1 Summary')\nfig_gph.show()","a9208436":"#### Performing data pre-processing on DATE_TIME columns. Also, creating two columns for Date and Time separately","9ea8ce8e":"### Examples of Correlative Data ","82ac1273":"### Power Generation Summary","3cc5c05a":"### Data with respect to Time and Date","a4b0eaea":"### Complete Summary","828dfe09":"#### Source wise AC\/DC distribution"}}