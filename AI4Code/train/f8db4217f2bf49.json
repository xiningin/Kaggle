{"cell_type":{"f2a8dd6e":"code","ea056db2":"code","a1012cea":"code","aceb2504":"code","b33f56f8":"code","462245f3":"code","5bfa66b5":"code","c897eb4e":"code","29f253e9":"markdown","34d72348":"markdown","e1e625e8":"markdown","4e0fa671":"markdown","c5f21123":"markdown"},"source":{"f2a8dd6e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write \"temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ea056db2":"data = pd.read_csv(\"\/kaggle\/input\/instela-entries\/temiz_girdiler.csv\")","a1012cea":"data.head(3)","aceb2504":"from sklearn import pipeline, feature_extraction, linear_model","b33f56f8":"p = pipeline.Pipeline([\n    ('vectorizer', feature_extraction.text.HashingVectorizer()),\n    ('regressor', linear_model.SGDRegressor())\n])","462245f3":"p.fit(data['entries.entry'].iloc[:9000], data['entries.vote_positive'].iloc[:9000])","5bfa66b5":"p.predict(['s\u00f6yle sevgilim hadi s\u00f6yle hi\u00e7 mi mutlu olmad\u0131k mart\u0131lar\u0131 sayarken hi\u00e7 mi hayal kurmad\u0131k denizlere bakarken'])","c897eb4e":"p.predict(['bu y\u00fczden her gece ben her gece \u00fcz\u00fclm\u00fc\u015f\u00fcm bu y\u00fczden her gece bu a\u015fk\u0131n diline d\u00fc\u015fm\u00fc\u015f\u00fcm'])","29f253e9":"Getting better, eh?","34d72348":"# Reading the dataset\nReading the dataset does not require any special actions. Read just like your good ol' csv file.","e1e625e8":"## Columns\nDataset contains following 3 colummns:\n- `entries.entry` : user created, preprocessed clean content free of punctuations and html tags.\n- `entries.vote_positive` : positive votes for entry\n- `entries.vote_negative` : negative votes for entry","4e0fa671":"A good start.","c5f21123":"## Example pipeline to predict positive votes for an entry\n\nGiven below is an example pipeline using hash vectorizer and linear regression to predict number of positive votes for an entry."}}