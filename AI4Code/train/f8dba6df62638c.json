{"cell_type":{"2342f1bf":"code","a0fcf91a":"code","c4272715":"code","8190481a":"code","44c036d1":"code","f6c9613a":"code","9c8c36df":"code","e47bcbe6":"code","01b8d5b6":"code","670fe2eb":"code","558d5254":"code","507f27ab":"code","aea4be64":"code","bda96c54":"code","e02a8603":"code","c7d1cfd4":"code","d78c4b52":"code","cc4c6bf6":"code","ceedf1c4":"code","04e87ab6":"code","77f84635":"code","e2da39be":"code","0f4e3c93":"code","4b062b11":"code","7ac413b7":"code","9edb8773":"code","c526676d":"code","105a86ff":"code","6e2711c1":"code","e3f1986c":"code","2ba8f42e":"code","6c4df91f":"code","3bf1347e":"code","6a0a86ad":"code","0bae8b78":"code","6e478f8e":"code","a2d6f444":"code","94cf739a":"code","1fbb461d":"code","944324fb":"code","8bad1244":"markdown","8ba066f0":"markdown","38ff89d7":"markdown","f810d115":"markdown","b94af004":"markdown","d70e1773":"markdown","83ae8666":"markdown","9f13050c":"markdown","44b309ca":"markdown","5224429c":"markdown","e8c222e7":"markdown","6ddf4d55":"markdown","139fb703":"markdown","cc1c0905":"markdown","fecb6c31":"markdown","e62f4dcf":"markdown","2feebc12":"markdown"},"source":{"2342f1bf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a0fcf91a":"!pip install backtesting","c4272715":"import pandas as pd\nimport numpy as np\nfrom datetime import datetime\nimport matplotlib.pyplot as plt\nimport matplotlib.dates as mpdates\nimport plotly.graph_objects as go\nimport seaborn as sns\nfrom backtesting import Backtest, Strategy\nfrom backtesting.lib import crossover\nfrom backtesting.test import SMA, GOOG","8190481a":"data_xlsx = pd.read_csv('..\/input\/bank-nifty-stock-trades\/BankNiftyFutures.csv')\ndata_xlsx.head()","44c036d1":"data_xlsx.shape","f6c9613a":"data_xlsx.info()","9c8c36df":"data_xlsx","e47bcbe6":"data_xlsx.isnull().any()","01b8d5b6":"print(data_xlsx['Final Date format'].unique())\nprint(\"Total no. of days : \" + str(len(data_xlsx['Final Date format'].unique())))","670fe2eb":"data_xlsx.head()","558d5254":"data_xlsx['Final Date format'] = data_xlsx['Final Date format'].astype(str)\ndata_xlsx['Time'] = data_xlsx['Time'].astype(str)","507f27ab":"new_format = []\ndate = data_xlsx['Final Date format'].values.tolist()\nfor i in date:\n    datetimeobject = datetime.strptime(i, '%Y%m%d')\n    newformat = datetimeobject.strftime('%Y-%m-%d')\n    new_format.append(newformat)\n    \ndata_xlsx['Final Date format'] = new_format","aea4be64":"data_xlsx['new_Time'] = data_xlsx['Final Date format'] + \" \" + data_xlsx['Time']","bda96c54":"def converttodate(l):\n  dateT = []\n  for strdate in l:\n    date_time_obj = datetime.strptime(strdate, '%Y-%m-%d %H:%M:%S')\n    dateT.append(date_time_obj)\n\n  return dateT","e02a8603":"l = data_xlsx['new_Time'].values.tolist()\nl = converttodate(l)\ndata_xlsx['time'] = l\ndata_xlsx.head()","c7d1cfd4":"data_xlsx = data_xlsx.drop('new_Time', axis = 1)\ndata_xlsx.head()","d78c4b52":"backtest = data_xlsx\nbacktest.head()","cc4c6bf6":"backtest = backtest.rename(columns={'Open 5':'Open',\n                                    'Close 5':'Close',\n                                    'High 5':'High',\n                                    'Low 5':'Low',\n                                    'Volume 5':'Volume'})\nbacktest = backtest.set_index('time')\nbacktest.head()","ceedf1c4":"class SmaCross(Strategy):\n    n1 = 10\n    n2 = 20\n\n    def init(self):\n        close = self.data.Close\n        self.sma1 = self.I(SMA, close, self.n1)\n        self.sma2 = self.I(SMA, close, self.n2)\n\n    def next(self):\n        if crossover(self.sma1, self.sma2):\n            self.buy()\n        elif crossover(self.sma2, self.sma1):\n            self.sell()","04e87ab6":"bt = Backtest(data = backtest, strategy = SmaCross,\n              cash=10000, commission=.002,\n              exclusive_orders=True)\n\noutput = bt.run()\nbt.plot()","77f84635":"df = data_xlsx.set_index('time').resample('15T', closed = 'right').sum()\ndf_xlsx = pd.DataFrame(df['Volume 5'])\ndf = data_xlsx.set_index('time').resample('15T', closed = 'right').max()\ndf_xlsx['high 5'] = pd.DataFrame(df['High 5'])\ndf = data_xlsx.set_index('time').resample('15T', closed = 'right').min()\ndf_xlsx['Low 5'] = pd.DataFrame(df['Low 5'])\ndf = data_xlsx.set_index('time').resample('15T', closed = 'right').first()\ndf_xlsx['Open 5'] = pd.DataFrame(df['Open 5'])\ndf = data_xlsx.set_index('time').resample('15T', closed = 'right').last()\ndf_xlsx['Close 5'] = pd.DataFrame(df['Close 5'])\n\ndf_xlsx.head()","e2da39be":"df_xlsx.isnull().any()","0f4e3c93":"df_xlsx.shape","4b062b11":"df_xlsx.dropna(inplace = True)","7ac413b7":"df_xlsx.reset_index(inplace = True)\ndf_xlsx.head()","9edb8773":"df_xlsx","c526676d":"fig = go.Figure(data = [go.Candlestick(x = df_xlsx['time'],\n                open = df_xlsx['Open 5'], high = df_xlsx['high 5'],\n                low = df_xlsx['Low 5'], close = df_xlsx['Close 5'])\n                     ])\n\nfig.update_layout(xaxis_rangeslider_visible = True)\nfig.show()","105a86ff":"def calculateVwap(data):\n    data['TP'] = (data['high 5']+data['Low 5']+data['Close 5'])\/3.0\n    data['TradedValue']  = data['TP']*data['Volume 5']\n    data['CumVolume'] = data['Volume 5'].cumsum()\n    data['CumTradedValue'] = data['TradedValue'].cumsum()\n    data['VWAP'] = data['CumTradedValue'] \/data['CumVolume']\n    return data\n\ndf_xlsx = df_xlsx.groupby('time').apply(calculateVwap)","6e2711c1":"df_xlsx.head()","e3f1986c":"df_xlsx","2ba8f42e":"print(\"Overall profit \/ loss : \" + str(df_xlsx['Close 5'][30722] - df_xlsx['Open 5'][0]))\nprint(\"Overall profit \/ loss percentage : \" + str(((df_xlsx['Close 5'][30722] - df_xlsx['Open 5'][0])\/df_xlsx['Open 5'][0])*100) + \" %\")","6c4df91f":"df = data_xlsx.set_index('time').resample('1440T', closed = 'right').sum()\ndf_day = pd.DataFrame(df['Volume 5'])\ndf = data_xlsx.set_index('time').resample('1440T', closed = 'right').max()\ndf_day['high 5'] = pd.DataFrame(df['High 5'])\ndf = data_xlsx.set_index('time').resample('1440T', closed = 'right').min()\ndf_day['Low 5'] = pd.DataFrame(df['Low 5'])\ndf = data_xlsx.set_index('time').resample('1440T', closed = 'right').first()\ndf_day['Open 5'] = pd.DataFrame(df['Open 5'])\ndf = data_xlsx.set_index('time').resample('1440T', closed = 'right').last()\ndf_day['Close 5'] = pd.DataFrame(df['Close 5'])\n\ndf_day.head(10)","3bf1347e":"df_day.reset_index(inplace = True)\ndf_day.head(10)","6a0a86ad":"df_day.dropna(inplace = True)\ndf_day.head()","0bae8b78":"df_day['Profit\/Loss'] = df_day['Close 5'] - df_day['Open 5']\ndf_day['Profit\/Loss percentage (%)'] = ((df_day['Close 5'] - df_day['Open 5'])\/df_day['Open 5']) * 100\ndf_day.head(10)","6e478f8e":"plt.figure(figsize = (40, 8))\nsns.lineplot(df_day['time'], df_day['Profit\/Loss'])\nplt.show()","a2d6f444":"df = data_xlsx.set_index('time').resample('Y', closed = 'right').sum()\ndf_year = pd.DataFrame(df['Volume 5'])\ndf = data_xlsx.set_index('time').resample('Y', closed = 'right').max()\ndf_year['high 5'] = pd.DataFrame(df['High 5'])\ndf = data_xlsx.set_index('time').resample('Y', closed = 'right').min()\ndf_year['Low 5'] = pd.DataFrame(df['Low 5'])\ndf = data_xlsx.set_index('time').resample('Y', closed = 'right').first()\ndf_year['Open 5'] = pd.DataFrame(df['Open 5'])\ndf = data_xlsx.set_index('time').resample('Y', closed = 'right').last()\ndf_year['Close 5'] = pd.DataFrame(df['Close 5'])\n\ndf_year","94cf739a":"df_year.reset_index(inplace = True)\ndf_year","1fbb461d":"df_year['Profit\/Loss'] = df_year['Close 5'] - df_year['Open 5']\ndf_year['Profit\/Loss percentage (%)'] = ((df_year['Close 5'] - df_year['Open 5'])\/df_year['Open 5']) * 100\ndf_year","944324fb":"plt.figure(figsize = (20, 8))\nsns.lineplot(df_year['time'], df_year['Profit\/Loss'])\nplt.show()","8bad1244":"> No null values are present, thus data is clean","8ba066f0":"## Graph representing profit\/loss from 1 Jan 2015 - 31 Dec 2019 per year","38ff89d7":"NOTE:\n\n> Values in Profit\/Loss and Profit\/Loss percentage (%) are considered to be profit sense.\n\n> Positive value depicts a profit, similarly negative value depicts a loss.","f810d115":"## Graph representing trades from 1 Jan 2015 - 31 Dec 2019","b94af004":"# Best performing year is 2017","d70e1773":"NOTE:\n\n> Values in Profit\/Loss and Profit\/Loss percentage (%) are considered to be profit sense.\n\n> Positive value depicts a profit, similarly negative value depicts a loss.","83ae8666":"# Data converted into 15 min time frame","9f13050c":"### Converting data into 24 hr \/ per day data frame","44b309ca":"## Time column addition so that grouping of data can be performed","5224429c":"## Graph representing profit\/loss from 1 Jan 2015 - 31 Dec 2019 per day","e8c222e7":"# Importing Libraries","6ddf4d55":"# Overall Profit and Loss from 1 Jan 2015 - 31 Dec 2019","139fb703":"# Profit \/ Loss per year from 1 Jan 2015 - 31 Dec 2019","cc1c0905":"# Backtesting using Python","fecb6c31":"# Loading the data set","e62f4dcf":"### VWAP, TP, Traded Value, Cummulative Volume, Cummulative Traded Value calculation","2feebc12":"# Profit \/ Loss per day from 1 Jan 2015 - 31 Dec 2019"}}