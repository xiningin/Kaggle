{"cell_type":{"6f96a0a0":"code","a2a285e6":"code","ca4a3a9b":"code","47bc0239":"code","4ff2f004":"code","93d23549":"code","9b250124":"code","75108fad":"code","90e41619":"code","cb3be98b":"code","ca683523":"code","2ea0421a":"code","f8bbdfe8":"code","7a7d1b49":"code","d15b0e38":"code","08c2ca2a":"code","7fde6f71":"code","432bcd5a":"code","e572856a":"code","8c1c6905":"code","23f85b8a":"code","e6322d03":"code","256596b3":"code","879258a9":"code","130d6716":"code","33eed64b":"code","771e5eca":"code","22b6bdf3":"code","c19649f1":"markdown","c9048a1e":"markdown","b55b3b42":"markdown"},"source":{"6f96a0a0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","a2a285e6":"!ls","ca4a3a9b":"import sklearn.datasets\nimport sklearn.model_selection\nimport keras.preprocessing.image\nimport keras.utils\nimport matplotlib.pyplot as plt\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom skimage import color\nfrom sklearn.metrics import accuracy_score\n\nimport os\nimport numpy as np\nimport cv2\n\n\n\ntrain_dir = '..\/input\/fruits-360_dataset\/fruits-360\/Training'\ntrainData=sklearn.datasets.load_files(train_dir,load_content=False)\n\ntest_dir = '..\/input\/fruits-360_dataset\/fruits-360\/Test'\ntestData=sklearn.datasets.load_files(test_dir,load_content=False)\n\n\ny_train = np.array(trainData['target'])\ny_train_names = np.array(trainData['target_names'])\n\ny_test = np.array(testData['target'])\ny_test_names = np.array(testData['target_names'])\n\nnclasses = len(np.unique(y_train))\ntarget_size=50\n\nx_train=[]\nfor filename in trainData['filenames']:\n    x_train.append(\n            keras.preprocessing.image.img_to_array(\n                    keras.preprocessing.image.load_img(filename,target_size=(target_size, target_size))\n                    )\n            )\n    \n    \nx_test=[]\nfor filename in testData['filenames']:\n    x_test.append(\n            keras.preprocessing.image.img_to_array(\n                    keras.preprocessing.image.load_img(filename,target_size=(target_size, target_size))\n                    )\n            )","47bc0239":"x_train=np.array(x_train)\nx_train=x_train\/255\ny_train=keras.utils.np_utils.to_categorical(y_train,nclasses)\n\n\nx_test=np.array(x_test)\nx_test=x_test\/255\ny_test=keras.utils.np_utils.to_categorical(y_test,nclasses)","4ff2f004":"x_train, x_val, y_train, y_val = sklearn.model_selection.train_test_split(\n        x_train, y_train, test_size=0.2\n)\nprint(y_train.shape)\nprint(y_val.shape)","93d23549":"model = keras.models.Sequential()\n#model.add(keras.layers.Conv2D(filters = 3, kernel_size = 1, input_shape=x_train.shape[1:],activation='tanh'))\n#model.add(keras.layers.Conv2D(filters = 1, kernel_size = 1, padding='same' ,activation='sigmoid'))\n\nmodel.add(keras.layers.Conv2D(filters = 4, kernel_size = (3,3), activation='relu',input_shape=x_train.shape[1:],name=\"conv_1\"))\nmodel.add(keras.layers.MaxPooling2D((2,2)))\nmodel.add(keras.layers.Conv2D(filters = 8, kernel_size = (3,3), activation='relu',name=\"conv_2\"))\nmodel.add(keras.layers.MaxPooling2D((2,2)))\nmodel.add(keras.layers.Conv2D(filters = 16, kernel_size = (3,3), activation='relu',name=\"conv_3\"))\nmodel.add(keras.layers.MaxPooling2D((2,2)))\n\nmodel.add(keras.layers.Flatten())\nmodel.add(keras.layers.Dense(8,activation=\"relu\",name='dense'))\nmodel.add(keras.layers.Dense(nclasses,activation = 'softmax',name='output'))\nmodel.summary()","9b250124":"from IPython.display import SVG\nimport IPython\nfrom keras.utils import model_to_dot\n\nprint(model.summary())\n\nkeras.utils.plot_model(model, to_file='test_keras_plot_model.png', show_shapes=True)\nIPython.display.Image('test_keras_plot_model.png')","75108fad":"model.compile(loss='categorical_crossentropy',\n              optimizer='adadelta',\n              metrics=['accuracy'])\ncheckpointer = keras.callbacks.ModelCheckpoint(filepath = 'cnn_from_scratch_fruits.hdf5', verbose = 1, save_best_only = True)\nearlystopper = keras.callbacks.EarlyStopping(monitor='val_loss', min_delta=0, patience=5, verbose=0, mode='auto', baseline=None, restore_best_weights=False)","90e41619":"history=model.fit(x_train, y_train, batch_size=64, epochs=100,validation_data=(x_val, y_val), callbacks = [checkpointer,earlystopper], shuffle=True)","cb3be98b":"model.load_weights('cnn_from_scratch_fruits.hdf5')","ca683523":"plt.plot(history.history['acc'])\nplt.plot(history.history['val_acc'])\nplt.title('Model accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Validation'], loc='upper left')\nplt.show()","2ea0421a":"# Plot training & validation loss values\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('Model loss')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Validation'], loc='upper left')\nplt.show()","f8bbdfe8":"import keras.backend as K","7a7d1b49":"def deprocess_image(x):\n    x -= x.mean()\n    x \/= (x.std() + 1e-5)\n    x *= 0.1\n    # clip to [0, 1]\n    x += 0.5\n    x = np.clip(x, 0, 1)\n    # convert to RGB array\n    x *= 255\n    x = np.clip(x, 0, 255).astype('uint8')\n    return x\n    \n    \ndef generate_pattern(layer_name, filter_index, size=target_size):\n    \n    layer_output = model.get_layer(layer_name).output\n    loss = K.mean(layer_output[:, :, :, filter_index])\n    grads = K.gradients(loss, model.input)[0]\n    grads \/= (K.sqrt(K.mean(K.square(grads))) + 1e-5)\n    iterate = K.function([model.input], [loss, grads])\n    \n    input_img_data = np.random.random((1, target_size, target_size, 3)) * 20 + 128.\n    \n    #input_img_data = np.zeros((1, target_size, target_size, 3)) * 20 + 128.\n    \n    \n    step = 1.\n    for i in range(80):\n        loss_value, grads_value = iterate([input_img_data])\n        input_img_data += grads_value * step\n        \n    img = input_img_data[0]\n    return deprocess_image(img)","d15b0e38":"def show_patterns(layer_name):\n    fig = plt.figure(figsize=(50, 50))\n    for img in range(model.get_layer(layer_name).filters):\n        to_show=generate_pattern(layer_name, img)\n        ax = fig.add_subplot(5, 6, img+1)\n        ax = plt.imshow(to_show)\n        plt.xticks([])\n        plt.yticks([])\n        fig.subplots_adjust(wspace=0.05, hspace=0.05) ","08c2ca2a":"show_patterns('conv_1')","7fde6f71":"show_patterns('conv_2')","432bcd5a":"show_patterns('conv_3')","e572856a":"test_image = keras.preprocessing.image.img_to_array(keras.preprocessing.image.load_img(train_dir+\"\/Apple Braeburn\/0_100.jpg\",target_size=(target_size, target_size)))\ntest_image = test_image\/255\n\nplt.imshow(test_image)","8c1c6905":"\nfig = plt.figure(figsize=(8, 8))\nfor img in range(3):\n    ax = fig.add_subplot(1, 3, img+1)\n    ax = plt.imshow(test_image[:, :, img],cmap='gray')\n    plt.xticks([])\n    plt.yticks([])\n    fig.subplots_adjust(wspace=0.05, hspace=0.05)\n\n\ntest_image = np.expand_dims(test_image, axis=0)","23f85b8a":"hidden_rappresenter = keras.models.Model(inputs=model.input, outputs=model.get_layer('conv_1').output)\nresult=hidden_rappresenter.predict(test_image)\nresult.shape\n\nfig = plt.figure(figsize=(8, 8))\nfor img in range(4):\n    ax = fig.add_subplot(1, 4, img+1)\n    ax = plt.imshow(result[0, :, :, img], cmap='gray')\n    plt.xticks([])\n    plt.yticks([])\n    fig.subplots_adjust(wspace=0.05, hspace=0.05)","e6322d03":"hidden_rappresenter = keras.models.Model(inputs=model.input, outputs=model.get_layer('conv_2').output)\nresult=hidden_rappresenter.predict(test_image)\nresult.shape\n\nfig = plt.figure(figsize=(8, 8))\nfor img in range(8):\n    ax = fig.add_subplot(2, 4, img+1)\n    ax = plt.imshow(result[0, :, :, img], cmap='gray')\n    plt.xticks([])\n    plt.yticks([])\n    fig.subplots_adjust(wspace=0.05, hspace=0.05)","256596b3":"hidden_rappresenter = keras.models.Model(inputs=model.input, outputs=model.get_layer('conv_3').output)\nresult=hidden_rappresenter.predict(test_image)\nresult.shape\n\nfig = plt.figure(figsize=(8, 8))\nfor img in range(16):\n    ax = fig.add_subplot(4, 4, img+1)\n    ax = plt.imshow(result[0, :, :, img], cmap='gray')\n    plt.xticks([])\n    plt.yticks([])\n    fig.subplots_adjust(wspace=0.05, hspace=0.05)","879258a9":"feature_extractor = keras.models.Model(inputs=model.input, outputs=model.get_layer('dense').output)\nfeature_extractor.summary()","130d6716":"x_encoded_train=feature_extractor.predict(x_train)\nx_encoded_val=feature_extractor.predict(x_val)\nx_encoded_val.shape","33eed64b":"from sklearn.manifold import TSNE\ntsne = TSNE(n_components=2, verbose=1, n_iter=500)\ntsne_results = tsne.fit_transform(x_encoded_val)","771e5eca":"plt.figure(figsize=(30, 30))\nplt.scatter(x=tsne_results[:,0],y=tsne_results[:,1],c=np.argmax(y_val, axis=1),cmap='rainbow')\n#plt.colorbar()\nplt.show()","22b6bdf3":"y_test_pred = model.predict(x_test)\naccuracy_score(np.argmax(y_test_pred,axis=1), np.argmax(y_test,axis=1))","c19649f1":"**Visualization** Internal rappresentation","c9048a1e":"**Visualization** Learned patterns","b55b3b42":"**Visualization** T-SNE"}}