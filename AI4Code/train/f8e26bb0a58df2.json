{"cell_type":{"11118ece":"code","71e7b3f7":"code","31656510":"code","8066789e":"code","118832ef":"code","2ed8e1f7":"code","1ed48a85":"code","2de7b408":"code","70b4bddb":"code","2e75bd4f":"code","ef0d62bd":"code","84a39deb":"code","60e87f8e":"code","c124fd7d":"code","b130fa11":"code","7c6a1a43":"code","1d515e78":"code","c583f953":"code","7c2455a6":"code","807e08fa":"code","32ecf5cb":"code","d81f20a0":"code","998ff823":"code","201e07ed":"code","8e1173f0":"code","81b375f8":"code","6cf038ed":"code","c28e855c":"code","2e8379dc":"code","269da565":"code","7a17c7dd":"code","eecd39ee":"code","c3ec275e":"code","5a3fa716":"code","031457f3":"code","6150abc2":"code","535cc73a":"code","2b0bfdb0":"code","5ea37def":"code","ea90b520":"code","e2d8935e":"code","829bc796":"code","36da4a31":"code","a4080aa3":"code","e1b7d3a8":"code","a4dacb87":"code","ebbfe38c":"code","92e2fcdf":"code","dcfd18a6":"code","a04f8775":"code","b8136583":"code","885a5e0e":"code","e206b4a4":"code","554ca2b4":"code","b2a8bc40":"code","bfa142f5":"code","3f04a442":"code","6f41a19e":"code","246647df":"code","7a113de3":"code","75dd5d73":"code","e77d0438":"code","562278de":"code","43c52c6b":"code","e770ecf6":"code","f415ca55":"markdown","213f9bbc":"markdown","a698a1a7":"markdown","1645c9ec":"markdown","a38db806":"markdown","76881603":"markdown","4310a7cd":"markdown","276b8597":"markdown","f498a670":"markdown","5b75764d":"markdown"},"source":{"11118ece":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","71e7b3f7":"import seaborn as sns\ncolor=sns.color_palette()\nsns.set_style('darkgrid')\n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport warnings\ndef ignore_warn(*args, **kwargs):\n    pass\nwarnings.warn =ignore_warn #warnings from sklearn and seaborn","31656510":"test=pd.read_csv('..\/input\/test_technidus.csv')\ndf_train=pd.read_csv('..\/input\/train_technidus.csv')","8066789e":"df_train.head(5)","118832ef":"df_train.shape","2ed8e1f7":"df_train.info()","1ed48a85":"test.info()","2de7b408":"#Print out all the columns that have not more than 30% null values\nnn_cols=[col for col in df_train.columns if df_train[col].count()>=0.7*len(df_train)]\nprint(nn_cols)","70b4bddb":"train=df_train[nn_cols]\ntest=test[nn_cols]","2e75bd4f":"train.isnull().sum()","ef0d62bd":"test.isnull().sum()","84a39deb":"train.nunique()","60e87f8e":"test.nunique()","c124fd7d":"train.describe()","b130fa11":"test.describe()","7c6a1a43":"cat_col=['CountryRegionName', 'Education', 'Occupation', 'Gender', 'MaritalStatus', 'HomeOwnerFlag', 'NumberCarsOwned', 'NumberChildrenAtHome', 'TotalChildren', 'BikeBuyer']\nnum_col=['BirthYear', 'BirthMonth', 'YearlyIncome', 'AveMonthSpend']","1d515e78":"#Convert BirthDate to Year,Month\ntrain['BirthYear']=pd.to_datetime(train['BirthDate']).dt.year;\ntrain['BirthMonth']=pd.to_datetime(train['BirthDate']).dt.month;\ntrain.drop(['BirthDate'],axis=1,inplace=True)","c583f953":"test['BirthYear']=pd.to_datetime(test['BirthDate']).dt.year;\ntest['BirthMonth']=pd.to_datetime(test['BirthDate']).dt.month;","7c2455a6":"Xtest=test.copy()","807e08fa":"#Distribution of customers for each categorical variable\nfor col in cat_col:\n    print(train[col].value_counts())\n    print('')","32ecf5cb":"for col in cat_col:\n        fig = plt.figure(figsize=(6,6))\n        ax = fig.gca()   \n        counts = train[col].value_counts()\n        counts.plot.bar(ax = ax, color = 'blue') \n        ax.set_title('Number of customers by ' + col)\n        ax.set_xlabel(col) \n        ax.set_ylabel('Number of customers')\n        plt.show()","d81f20a0":"sns.pairplot(train[num_col],diag_kind='kde')","998ff823":"plt.figure(figsize=(10,7))\nsns.heatmap(train[num_col].corr(),annot=True)","201e07ed":"#Checking the effect of each categorical varaible on the target\ndef plot_box(data, cols, col_y = None):\n    for col in cols:\n        plt.figure(figsize=(15,5))\n        sns.boxplot(y=col_y, x=col, data=data)\n        plt.ylabel(col_y) # Set text for the x axis\n        plt.xlabel(col)# Set text for y axis\n        plt.show()\n        \nplot_box(data=train,cols=cat_col,col_y='AveMonthSpend')","8e1173f0":"#Checking if BirthMonth can be a categorical variable\nplot_box(data=train,cols=['BirthMonth'],col_y='AveMonthSpend')","81b375f8":"#Heat map\ncorrmat= df_train.corr()\nf, ax =plt.subplots(figsize=(5,4))\nsns.heatmap(corrmat, square=True, annot=True)","6cf038ed":"del df_train['Suffix']","c28e855c":"df_train.columns","2e8379dc":"test.columns","269da565":"cols= ['CustomerID', 'CountryRegionName', 'BirthDate','Education', 'Occupation', 'Gender', 'MaritalStatus', 'HomeOwnerFlag',\n       'NumberCarsOwned', 'NumberChildrenAtHome', 'TotalChildren','YearlyIncome', 'AveMonthSpend', 'BikeBuyer']\ndataset=[df_train, test]\nfor data in dataset:\n    train1= df_train[cols]\n    test=test[cols]\ntrain1.head(5)\n","7a17c7dd":"train1.shape","eecd39ee":"test.shape","c3ec275e":"dataset=[train1, test]\nfor data in dataset:\n    data[\"BirthDate\"]=pd.to_datetime(data['BirthDate'], infer_datetime_format=True)\n    data['year']=data['BirthDate'].dt.year\n    data['Age']=1998-data['year']\ntrain1.head(5).T","5a3fa716":"del train1['BirthDate']\ndel test['BirthDate']","031457f3":"sns.boxplot(data=train1, x='Occupation', y='AveMonthSpend')","6150abc2":"sns.scatterplot(data=train1, x='Age', y='AveMonthSpend', hue='Gender')","535cc73a":"sns.barplot(data=train1, x='MaritalStatus', y='AveMonthSpend')","2b0bfdb0":"column=['YearlyIncome','AveMonthSpend', 'Age']\ndef distplot(df, column, bins = 10, hist = False):\n    for col in column:\n        sns.distplot(df[col], bins=bins, rug=True, hist=hist)\n        plt.title('Distribution for' + col)\n        plt.xlabel(col)\n        plt.ylabel('Frequency')\n        plt.show()\n\ndistplot(train1, column, hist= True)","5ea37def":"for data in dataset:\n    data['Age']=np.log(data['Age'])\n    data['YearlyIncome']=(data['YearlyIncome'])**0.5\n    \ncolumn=['YearlyIncome','AveMonthSpend', 'Age']\n\ndistplot(train1, column, hist=True)","ea90b520":"col=['CountryRegionName', 'Education', 'Occupation', 'Gender', 'MaritalStatus']\ntrain=pd.get_dummies(train1, prefix=col, columns=col)\ntest=pd.get_dummies(test, prefix=col, columns=col)","e2d8935e":"del test['year']\ndel train['year']","829bc796":"train.shape","36da4a31":"test.shape","a4080aa3":"test.columns","e1b7d3a8":"train.columns","a4dacb87":"cols=['HomeOwnerFlag', 'NumberCarsOwned',\n       'NumberChildrenAtHome', 'TotalChildren', 'YearlyIncome', 'BikeBuyer',\n       'Age', 'CountryRegionName_Australia',\n       'CountryRegionName_Canada', 'CountryRegionName_France',\n       'CountryRegionName_Germany', 'CountryRegionName_United Kingdom',\n       'CountryRegionName_United States', 'Education_Bachelors ',\n       'Education_Graduate Degree', 'Education_High School',\n       'Education_Partial College', 'Education_Partial High School',\n       'Occupation_Clerical', 'Occupation_Management', 'Occupation_Manual',\n       'Occupation_Professional', 'Occupation_Skilled Manual', 'Gender_F',\n       'Gender_M', 'MaritalStatus_M', 'MaritalStatus_S']\ntest1=test[cols]","ebbfe38c":"test1.shape","92e2fcdf":"f,ax=plt.subplots(figsize=(18,15))\nsns.heatmap(train.corr(),linewidth=2.0, ax=ax, annot=True)\nax.set_title('Correlation Matrix')","dcfd18a6":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.linear_model import LinearRegression, Ridge, Lasso\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\nfrom sklearn.svm import SVR\nfrom math import sqrt","a04f8775":"feature_col=['HomeOwnerFlag', 'NumberCarsOwned', 'NumberChildrenAtHome',\n       'TotalChildren', 'YearlyIncome','BikeBuyer', 'Age',\n       'CountryRegionName_Australia', 'CountryRegionName_Canada',\n       'CountryRegionName_France', 'CountryRegionName_Germany',\n       'CountryRegionName_United Kingdom', 'CountryRegionName_United States',\n       'Education_Bachelors ', 'Education_Graduate Degree',\n       'Education_High School', 'Education_Partial College',\n       'Education_Partial High School', 'Occupation_Clerical',\n       'Occupation_Management', 'Occupation_Manual', 'Occupation_Professional',\n       'Occupation_Skilled Manual', 'Gender_F', 'Gender_M', 'MaritalStatus_M',\n       'MaritalStatus_S']\npredicted_class_names=['AveMonthSpend']\nX=train[feature_col].values\ny=train[predicted_class_names].values \nsplit_test_size=0.30\nX_train, X_test, y_train, y_test= train_test_split(X,y, test_size=split_test_size, random_state=42)","b8136583":"train.shape","885a5e0e":"print(\"{0:0.2f}% in training set\".format((len(X_train)\/len(train.index)) * 100))\nprint(\"{0:0.2f}% in test set\".format((len(X_test)\/len(train.index)) * 100))","e206b4a4":"from sklearn.preprocessing import StandardScaler\nss=StandardScaler()\nX_train=ss.fit_transform(X_train)\nX_test=ss.transform(X_test)\ntest1=ss.transform(test1)","554ca2b4":"reg=LinearRegression()\nreg.fit(X_train, y_train)","b2a8bc40":"regpred=reg.predict(X_train)\nregpred_test=reg.predict(X_test)\nprint(\"Accuracy on training set:{:.7f}\".format(reg.score(X_train, y_train)))\nprint(\"Accuracy on test set: {:.7f}\".format(reg.score(X_test, y_test)))\n\nMSE= mean_squared_error(y_train, regpred)\nMSE_test= mean_squared_error(y_test, regpred_test)\nprint(\"MSE:\", MSE)\nprint(\"MSE Test:\", MSE_test)\nRMSE=sqrt(MSE)\nRMSE_test=sqrt(MSE_test)\nprint(\"RMSE:\", RMSE)\nprint(\"RMSE Test:\", RMSE_test)","bfa142f5":"gbr=GradientBoostingRegressor (max_depth=5, loss='huber', n_estimators=1000, learning_rate=0.01)\ngbr.fit(X_train, y_train.ravel())","3f04a442":"print(\"Accuracy on training set: {:.7f}\".format(gbr.score(X_train, y_train.ravel())))\nprint(\"Accuracy on test set: {:.7f}\".format(gbr.score(X_test, y_test)))\ngbrpred=gbr.predict(X_train)\ngbrpred_test=gbr.predict(X_test)\n\nMSE= mean_squared_error(y_train, gbrpred)\nMSE_test= mean_squared_error(y_test, gbrpred_test)\nprint(\"MSE:\", MSE)\nprint(\"MSE Test:\", MSE_test)\nRMSE=sqrt(MSE)\nRMSE_test=sqrt(MSE_test)\nprint(\"RMSE:\", RMSE)\nprint(\"RMSE Test:\", RMSE_test)","6f41a19e":"solution=gbr.predict(test1)\nmy_submission=pd.DataFrame({'CustomerID':test.CustomerID,'AveMonthSpend': solution})\nmy_submission.to_csv('GradientBoostingMicrosoft.csv', index=False)","246647df":"import xgboost as xgb\nxgb=xgb.XGBRegressor(max_depth=5, n_estimators=100)\nxgb.fit(X_train, y_train)","7a113de3":"print(\"Accuracy on training set: {:.7f}\".format(xgb.score(X_train, y_train.ravel())))\nprint(\"Accuracy on test set: {:.7f}\".format(xgb.score(X_test, y_test)))\nxgbpred=xgb.predict(X_train)\nxgbpred_test=xgb.predict(X_test)\n\nMSE= mean_squared_error(y_train, xgbpred)\nMSE_test= mean_squared_error(y_test, xgbpred_test)\nprint(\"MSE:\", MSE)\nprint(\"MSE Test:\", MSE_test)\nRMSE=sqrt(MSE)\nRMSE_test=sqrt(MSE_test)\nprint(\"RMSE:\", RMSE)\nprint(\"RMSE Test:\", RMSE_test)","75dd5d73":"solution=xgb.predict(test1)\nmy_submission=pd.DataFrame({'CustomerID':test.CustomerID,'AveMonthSpend': solution})\nmy_submission.to_csv('XgboostMicrosoft.csv', index=False)","e77d0438":"import xgboost as xgb\nxgb=xgb.XGBRegressor(max_depth=5, n_estimators=1000, learning_rate=0.01, reg_alpha=0.5, reg_lambda=0.9)\nxgb.fit(X_train, y_train)","562278de":"print(\"Accuracy on training set: {:.7f}\".format(xgb.score(X_train, y_train.ravel())))\nprint(\"Accuracy on test set: {:.7f}\".format(xgb.score(X_test, y_test)))\nxgbpred=xgb.predict(X_train)\nxgbpred_test=xgb.predict(X_test)\n\nMSE= mean_squared_error(y_train, xgbpred)\nMSE_test= mean_squared_error(y_test, xgbpred_test)\nprint(\"MSE:\", MSE)\nprint(\"MSE Test:\", MSE_test)\nRMSE=sqrt(MSE)\nRMSE_test=sqrt(MSE_test)\nprint(\"RMSE:\", RMSE)\nprint(\"RMSE Test:\", RMSE_test)","43c52c6b":"solution=xgb.predict(test1)\nmy_submission=pd.DataFrame({'CustomerID':test.CustomerID,'AveMonthSpend': solution})\nmy_submission.to_csv('XgboostMicrosoft02.csv', index=False)","e770ecf6":"test=Xtest","f415ca55":"## Data Preprocessing","213f9bbc":"### Gradient Boosting","a698a1a7":"### Linear Regression","1645c9ec":"### EDA Key Summary","a38db806":"## Applying Algorithm","76881603":"## Feature Engineering and More data Preprocessing -Approach 2","4310a7cd":"* Looking at the numerical variables, only yearly income correlates with the target\n* Looking at the categorical variables, all of them seem to be useful in predicting the target.\n* Only Country Region, Education, Occupation, Marital Status and Gender should be encoded. The other categorical variables seem to show some level of ordinality thus they should be used as such.\n* Birth month does not seem to be a useful feature for predicting the target variable.","276b8597":"## Exploratory Data Analysis","f498a670":"## Feature Engineering and Further Preprocessing Approach 1","5b75764d":"### XGBoost"}}