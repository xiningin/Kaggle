{"cell_type":{"c02145db":"code","7ac8fee7":"code","55d4ba19":"code","f5e63614":"code","79a2cce3":"code","44740e88":"code","73992272":"code","24b88ea1":"code","f1d2fe0b":"code","a48074c3":"code","99b24640":"code","5191091a":"code","1731c141":"code","85eee5df":"code","3ce96fee":"code","924e2864":"code","6b1a0be4":"code","ecf08292":"code","97ddd721":"code","4f0bb537":"code","de7acebf":"code","e16b89aa":"code","6974de31":"code","4c09c721":"code","cde0d65a":"code","f61c22b8":"code","6848355e":"code","95d8a253":"code","e3bb403f":"code","8b3a730f":"code","4a25a1b5":"code","4b98ffc4":"code","f0788230":"code","7b8fea9a":"code","55dd7896":"code","c29f72a7":"code","e7d9a64c":"code","f8a0c9b8":"code","89b31600":"code","6e26f2ae":"code","e2ed5d4b":"code","f3a97260":"code","36abb171":"code","0ff454e0":"code","07a25550":"code","792d7ae0":"code","12552c95":"code","a044462e":"code","68d2cfc8":"code","90d485b1":"code","1724ef43":"code","4cec7ff6":"code","c218b9b7":"code","1f255946":"code","6454e4e4":"code","939be448":"code","efd82333":"code","307eccb5":"code","4ab17652":"code","337ed043":"code","f93dd3df":"code","21d7ef49":"code","cdab19f4":"code","20988742":"code","1528f37e":"markdown","27fe7733":"markdown","50c2c36a":"markdown","d2124d93":"markdown","40bb5544":"markdown","ad65a644":"markdown","fecf1fd4":"markdown","9ad0989c":"markdown","c41e8019":"markdown","b74d37c8":"markdown","220b0170":"markdown","6ef2be0f":"markdown","cc0e5db7":"markdown","fcf61ece":"markdown","db483652":"markdown","ebd9e007":"markdown","f490f2ce":"markdown"},"source":{"c02145db":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7ac8fee7":"import numpy as np\nimport pandas as pd \nfrom sklearn.model_selection import train_test_split\nfrom sklearn import linear_model\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nfrom sklearn.datasets import make_classification\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import roc_curve\nfrom sklearn.metrics import roc_auc_score\nfrom pylab import rcParams","55d4ba19":"df = pd.read_csv('..\/input\/telco-customer-churn\/WA_Fn-UseC_-Telco-Customer-Churn.csv')","f5e63614":"df.head()","79a2cce3":"uniq = pd.DataFrame({'Diferent_value_count': df.nunique(), 'DTypes': df.dtypes})\nprint (\"Rows     : \" ,df.shape[0])\nprint (\"Columns  : \" ,df.shape[1])\nprint (\"\\nFeatures : \\n\" ,df.columns.tolist())\nprint (\"\\nMissing values :  \", df.isnull().sum().values.sum())\nprint (\"\\nUnique values :  \\n\", uniq)","44740e88":"df[df['TotalCharges'] ==' ']","73992272":"df.loc[df['TotalCharges'] ==' ','TotalCharges'] = df['MonthlyCharges'] ","24b88ea1":"df[df['TotalCharges'] ==' ']","f1d2fe0b":"df[\"TotalCharges\"] = df[\"TotalCharges\"].astype(float)","a48074c3":"df['Contract_term'] = df[\"Contract\"].replace({'Month-to-month':0, 'One year':1, 'Two year':1})\ndf.drop(['customerID', 'Contract'], axis = 1, inplace = True)\ndf['MultipleLines'] = df['MultipleLines'].replace({'No phone service':0, 'No' : 0, 'Yes' : 1})","99b24640":"replace_col_val = [ 'OnlineSecurity', 'OnlineBackup', 'DeviceProtection', 'TechSupport', 'StreamingTV', 'StreamingMovies']\nfor i in replace_col_val : \n    df[i]  = df[i].replace({'No internet service' : 'No'})","5191091a":"replace_col_val2 = ['Partner', 'Dependents', 'PhoneService', 'OnlineSecurity',\n                   'OnlineBackup', 'DeviceProtection', 'TechSupport', 'StreamingTV',\n                   'StreamingMovies', 'PaperlessBilling', 'Churn']\nfor i in replace_col_val2 : \n    df[i]  = df[i].replace({'Yes' : 1, 'No': 0})","1731c141":"df.head()","85eee5df":"colors = ['gold', 'yellowgreen']\nexplode = (0.1, 0)\nlabels = 'Yes', 'No'\nNo, Yes= df['Churn'].value_counts(sort = True)\nsizes = [Yes, No]\nrcParams['figure.figsize'] = 5,5\nplt.pie(sizes, explode=explode, labels=labels, colors=colors,\n        autopct='%1.1f%%', shadow=True, startangle=140,)\nplt.title('Percent of churn in customer')\nplt.show()\nprint('Churn Yes -', Yes)\nprint('Churn No -', No)","3ce96fee":"fig, axis = plt.subplots(1,2, figsize = (10,10))\ncolors = ['gold', 'yellowgreen']\nexplode = (0.1, 0)\nlabels = 'Yes', 'No'\naxis[0].set_title('Percent of churn in Male')\naxis[1].set_title('Percent of churn in Female')\n\nNo, Yes= df[df['gender']== 'Male'].Churn.value_counts()\nsizes = [Yes, No]\naxis[0].pie(sizes, explode=explode, labels=labels, colors=colors,\n        autopct='%1.1f%%', shadow=True, startangle=140,)\n\nNo, Yes= df[df['gender']!= 'Male'].Churn.value_counts()\nsizes = [Yes, No]\naxis[1].pie(sizes, explode=explode, labels=labels, colors=colors,\n        autopct='%1.1f%%', shadow=True, startangle=140,)\n\nplt.show()","924e2864":"colum = ['SeniorCitizen', 'Partner', 'Dependents', 'MultipleLines',\n       'OnlineSecurity', 'OnlineBackup', 'DeviceProtection', 'TechSupport',\n       'StreamingTV', 'StreamingMovies', 'PaperlessBilling',\n       'Contract_term']","6b1a0be4":"i = 0\nj= 0\nfig, axis = plt.subplots(6, 4,figsize = (20,30))\ncolors = ['gold', 'yellowgreen']\nexplode = (0.1, 0)\nlabels = 'Yes', 'No'\nfor r in colum:\n    if i == 6:\n        pass\n    else:\n        No, Yes= df[df[r]== 1].Churn.value_counts()\n        sizes = [Yes, No]\n        axis[i,j].pie(sizes, explode=explode, labels=labels, colors=colors,\n        autopct='%1.1f%%', shadow=True, startangle=140)\n        axis[i,j].set_title(r + ' is Yes')\n        No, Yes= df[df[r]== 0].Churn.value_counts()\n        sizes = [Yes, No]\n        j+=1\n        axis[i,j].pie(sizes, explode=explode, labels=labels, colors=colors,\n        autopct='%1.1f%%', shadow=True, startangle=140)\n        axis[i,j].set_title(r + ' is No')\n        if j < 3:\n            j+=1\n        else:\n            i += 1\n            j = 0","ecf08292":"df.groupby('Churn').Contract_term.value_counts()","97ddd721":"df_Contract_term = df[df['Contract_term'] == 0]","4f0bb537":"df_Contract_term.drop(['Contract_term'], axis = 1, inplace = True)","de7acebf":"df_Contract_term.head()","e16b89aa":"colum2 = ['SeniorCitizen', 'Partner', 'Dependents', 'PhoneService', 'MultipleLines',\n       'OnlineSecurity', 'OnlineBackup', 'DeviceProtection', 'TechSupport',\n       'StreamingTV', 'StreamingMovies', 'PaperlessBilling']","6974de31":"i = 0\nj= 0\nfig, axis = plt.subplots(6, 4,figsize = (20,30))\ncolors = ['gold', 'yellowgreen']\nexplode = (0.1, 0)\nlabels = 'Yes', 'No'\nfor r in colum2:\n    if i == 6:\n        pass\n    else:\n        No, Yes= df_Contract_term[df_Contract_term[r]== 1].Churn.value_counts()\n        sizes = [Yes, No]\n        axis[i,j].pie(sizes, explode=explode, labels=labels, colors=colors,\n        autopct='%1.1f%%', shadow=True, startangle=140)\n        axis[i,j].set_title(r + ' is Yes')\n        No, Yes= df_Contract_term[df_Contract_term[r]== 0].Churn.value_counts()\n        sizes = [Yes, No]\n        j+=1\n        axis[i,j].pie(sizes, explode=explode, labels=labels, colors=colors,\n        autopct='%1.1f%%', shadow=True, startangle=140)\n        axis[i,j].set_title(r + ' is No')\n        if j < 3:\n            j+=1\n        else:\n            i += 1\n            j = 0","4c09c721":"df_Contract_term.drop(['gender'], axis = 1, inplace = True)","cde0d65a":"df3 = df_Contract_term","f61c22b8":"df3.describe()","6848355e":"df3[['tenure','MonthlyCharges','TotalCharges','Churn']].corr()","95d8a253":"sns.pairplot(df_Contract_term[['tenure','Churn']], hue='Churn', height=5)","e3bb403f":"sns.pairplot(df_Contract_term[['MonthlyCharges','Churn']], hue='Churn', height=5)","8b3a730f":"sns.pairplot(df_Contract_term[['TotalCharges','Churn']], hue='Churn', height=5)","4a25a1b5":"plt.figure(figsize = (15,7))\nsns.countplot(df_Contract_term['tenure'])","4b98ffc4":"sns.pairplot(df_Contract_term[['MonthlyCharges','Churn']], hue='Churn', height=5)","f0788230":"sns.pairplot(df_Contract_term[['tenure','MonthlyCharges','TotalCharges','Churn']], hue='Churn')","7b8fea9a":"bins = [0, 4, 36, 500]\nlabels = ['<=4','5 - 36','>36']\ndf3['tenure_group'] = pd.cut(df3['tenure'], bins=bins, labels=labels)","55dd7896":"matrix = np.triu(df3.corr())\nplt.figure(figsize=(30,10))\ncmap = sns.diverging_palette(500, 1)\nsns.heatmap(df3.corr().round(2), mask=matrix, vmin=-0.7, vmax=0.7, annot=True, \n            cmap=cmap,\n            square=True)","c29f72a7":"df3_dummies = pd.get_dummies(df3, drop_first=True)\ndf3 = df3_dummies","e7d9a64c":"matrix = np.triu(df3.corr())\nplt.figure(figsize=(30,10))\ncmap = sns.diverging_palette(500, 1)\nsns.heatmap(df3.corr().round(2), mask=matrix, vmin=-0.7, vmax=0.7, annot=True, \n            cmap=cmap,\n            square=True)","f8a0c9b8":"df3.drop(['TotalCharges'], axis = 1, inplace = True)","89b31600":"from sklearn.linear_model import LogisticRegression\nfrom sklearn import metrics\nimport statsmodels.formula.api as smf","6e26f2ae":"X = df3.drop('Churn', axis = 1)\ny = df3['Churn']\nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.2, random_state = 42)\nlogistic = LogisticRegression()\nlogistic.fit(X_train, y_train)","e2ed5d4b":"predictions = logistic.predict(X_test)\npredictions","f3a97260":"conf_matrix = metrics.confusion_matrix(y_test, predictions)\nconf_matrix","36abb171":"fig, ax = plt.subplots()\nax= plt.subplot()\nsns.heatmap(conf_matrix,annot=True, ax = ax, cmap='YlGnBu', fmt='d')\nax.set_xlabel('Predicted')\nax.set_ylabel('Actual') \nax.set_title('Confusion Matrix');\nax.xaxis.set_ticklabels(['0 - Not churn', '1 - Churn'])\nax.yaxis.set_ticklabels(['0 - Not churn', '1 - Churn'])","0ff454e0":"Accuracy = metrics.accuracy_score(y_test, predictions)\nPrecision = metrics.precision_score(y_test, predictions)\nrecall = metrics.recall_score(y_test, predictions)\nF1 = 2 * (Precision * recall) \/ (Precision + recall)","07a25550":"def plot_roc_curve(fpr, tpr):\n    plt.plot(fpr, tpr, color='orange', label='ROC')\n    plt.plot([0, 1], [0, 1], color='darkblue', linestyle='--')\n    plt.xlabel('False Positive Rate')\n    plt.ylabel('True Positive Rate')\n    plt.title('Receiver Operating Characteristic (ROC) Curve')\n    plt.legend()\n    plt.show()","792d7ae0":"probs = logistic.predict_proba(X_test)\nprobs = probs[:, 1]\nauc = roc_auc_score(y_test, probs)\nprint('AUC: %.2f' % auc)","12552c95":"fpr, tpr, thresholds = roc_curve(y_test, probs)\nplot_roc_curve(fpr, tpr)","a044462e":"print('Accuracy :', Accuracy.round(3))\nprint('Precision :', Precision.round(3))\nprint('recall :', recall.round(3))\nprint('F-1 :', F1.round(3))\nprint('Area under the curve :', auc.round(3))","68d2cfc8":"df3.columns = ['SeniorCitizen', 'Partner', 'Dependents', 'tenure', 'PhoneService', 'MultipleLines',\n       'OnlineSecurity', 'OnlineBackup', 'DeviceProtection', 'TechSupport', 'StreamingTV',\n       'StreamingMovies', 'PaperlessBilling', 'MonthlyCharges',\n       'Churn', 'InternetService_Fiber_optic', 'InternetService_No',\n       'PaymentMethod_Credit_card_automatic',\n       'PaymentMethod_Electronic_check', 'PaymentMethod_Mailed_check','tenure_group_5_36', 'tenure_group_36']","90d485b1":"est2 = smf.logit('Churn ~ SeniorCitizen + Partner+Dependents +tenure+PhoneService+MultipleLines + OnlineSecurity + OnlineBackup +DeviceProtection+ TechSupport + StreamingTV + StreamingMovies + PaperlessBilling + MonthlyCharges+InternetService_Fiber_optic + InternetService_No + PaymentMethod_Credit_card_automatic+PaymentMethod_Electronic_check+PaymentMethod_Mailed_check+tenure_group_5_36+tenure_group_36',df3).fit()","1724ef43":"est2.summary()","4cec7ff6":"df3.drop(['Partner', 'Dependents', 'PhoneService', 'OnlineSecurity', 'OnlineBackup', 'DeviceProtection',\n          'TechSupport', 'StreamingTV',\n          'StreamingMovies', 'MonthlyCharges',\n          'InternetService_No', 'PaymentMethod_Credit_card_automatic','PaymentMethod_Mailed_check', 'tenure_group_36'], axis = 1, inplace = True)","c218b9b7":"X = df3.drop('Churn', axis = 1)\ny = df3['Churn']\nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.2, random_state = 42)\nlogistic = LogisticRegression()\nlogistic.fit(X_train, y_train)","1f255946":"predictions = logistic.predict(X_test)\npredictions","6454e4e4":"conf_matrix = metrics.confusion_matrix(y_test, predictions)\nconf_matrix","939be448":"fig, ax = plt.subplots()\nax= plt.subplot()\nsns.heatmap(conf_matrix,annot=True, ax = ax, cmap='YlGnBu', fmt='d')\nax.set_xlabel('Predicted')\nax.set_ylabel('Actual') \nax.set_title('Confusion Matrix');\nax.xaxis.set_ticklabels(['0 - Not churn', '1 - Churn'])\nax.yaxis.set_ticklabels(['0 - Not churn', '1 - Churn'])","efd82333":"Accuracy = metrics.accuracy_score(y_test, predictions)\nPrecision = metrics.precision_score(y_test, predictions)\nrecall = metrics.recall_score(y_test, predictions)\nF1 = 2 * (Precision * recall) \/ (Precision + recall)","307eccb5":"def plot_roc_curve(fpr, tpr):\n    plt.plot(fpr, tpr, color='orange', label='ROC')\n    plt.plot([0, 1], [0, 1], color='darkblue', linestyle='--')\n    plt.xlabel('False Positive Rate')\n    plt.ylabel('True Positive Rate')\n    plt.title('Receiver Operating Characteristic (ROC) Curve')\n    plt.legend()\n    plt.show()","4ab17652":"probs = logistic.predict_proba(X_test)\nprobs = probs[:, 1]\nauc = roc_auc_score(y_test, probs)\nprint('AUC: %.2f' % auc)","337ed043":"fpr, tpr, thresholds = roc_curve(y_test, probs)\nplot_roc_curve(fpr, tpr)","f93dd3df":"print('Accuracy :', Accuracy.round(3))\nprint('Precision :', Precision.round(3))\nprint('recall :', recall.round(3))\nprint('F-1 :', F1.round(3))\nprint('Area under the curve :', auc.round(3))","21d7ef49":"df3.columns","cdab19f4":"est2 = smf.logit('Churn ~ SeniorCitizen+tenure+MultipleLines+PaperlessBilling+InternetService_Fiber_optic+PaymentMethod_Electronic_check+tenure_group_5_36',df3).fit()","20988742":"est2.summary()","1528f37e":"In this model is too much interrelated meaning. So I dropped it.","27fe7733":"**1.2 Missing values**\n\nThere are 11 missing values in TotalCharges column. So I decided in those missing values inpute from MonthlyCharges\tcolumn. It is possible that they are missing because it is the first months for this client in this company.","50c2c36a":"I changed all parametres to 0 and 1 values.","d2124d93":"Loyal clients decided to get out to another company just 214 of 2954. But unloyal clients proportion is bigger. So I will do analysis just in unloyal clients group.","40bb5544":"* **5.Conclusions**\n\nAfter discarding some of the interrelated parameters, the model improved. \nIn order to get an even better model, more methods should be applied that would reduce the customer ratio of CHURN to 50 percent and then look this segment in detail. \nI was able to reduce this ratio by visual analysis alone. Other regression models should be tried.","ad65a644":"I dropped \"gender\" column.","fecf1fd4":"**3. Visual data analysis**\n\nFirstly I want to see how much clients is \"CHURN\"","9ad0989c":"I decided to creat a new column \"Tenure_group\". In this column I splited terms by this groups: less 4 month, 5-36 months and more 36 months.","c41e8019":"I dropped TotalCharges","b74d37c8":"Let see model now. And now model is a litle bit better.","220b0170":"I decided to see how related those parametre by \"CHURN\":\n'tenure','MonthlyCharges','TotalCharges'","6ef2be0f":"**4. Logistic Regression model******","cc0e5db7":"**1. Introduction**\nThis Data sets has information about TELCO clients, if they lefts company in last months (CHURN). And I do a model who can to guess which clients are thinking about new TELCO company and they are planing get out from this Company. \n\n**Basic Information**","fcf61ece":"**2. Data correction**\n\nI created a new column. In this column I input information from Contract term. I splited the client into two groups:\nfirst group - 1, is loyal clients (who is company clients for more than 1 year)\nsecond group - new clients (who is company clients less than 1 year)\nI changed columns where is information about \"yes\" or \"no\" to \"1\" and \"0\". Columns su information about - \"No service\", I changed to \"0\".","db483652":"Then I see how clients distributed by gender","ebd9e007":"Let's see how clients are distributed by all parameters at now. ","f490f2ce":"And then how clients distributed by another parameters.\nAnd here I see, That in unloyal clients group is more clients who wants to go out."}}