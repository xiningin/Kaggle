{"cell_type":{"c59c0323":"code","dbb66494":"code","02a61fd2":"code","8cac964c":"code","77a59e69":"code","0f334309":"code","cf236fe8":"code","25bb8e39":"code","00d9450e":"code","44756e5a":"code","54b2e99a":"code","ea33c3be":"code","0d9061ec":"code","d61aabae":"code","74cc3124":"code","f8dcb441":"code","071a5084":"code","f79f30b3":"markdown","3ae3b74a":"markdown","159a4a2d":"markdown","5fd6abcd":"markdown","a1a21a43":"markdown","1da6378f":"markdown","c060208e":"markdown","717673ef":"markdown","04e0dab6":"markdown","db1dca33":"markdown"},"source":{"c59c0323":"import numpy as np\nimport pandas as pd \nfrom matplotlib import pyplot as plt\nimport os\n","dbb66494":"df = pd.read_csv('..\/input\/spotify-recommendation\/data.csv')\ndf.shape","02a61fd2":"df.head()","8cac964c":"df.info()","77a59e69":"df.isna().sum()","0f334309":"df['liked'].value_counts()","cf236fe8":"df.corr().style.background_gradient(cmap='Blues')","25bb8e39":"liked = df['liked'] == 1\ndisliked = df['liked'] == 0\nliked_songs = df[liked]\ndisliked_songs = df[disliked]\n\nplt.figure(figsize=(8,6))\nplt.hist(liked_songs['speechiness'], alpha=0.5, label=\"liked songs\")\nplt.hist(disliked_songs['speechiness'], alpha=0.5, label=\"disliked songs\")\n\nplt.xlabel(\"Speechiness\", size=14)\nplt.ylabel(\"Count\", size=14)\nplt.title(\"Comparison of speechiness between liked and disliked songs\")\nplt.legend(loc='upper right')","00d9450e":"plt.figure(figsize=(8,6))\nplt.hist(liked_songs['danceability'], alpha=0.5, label=\"liked songs\")\nplt.hist(disliked_songs['danceability'], alpha=0.5, label=\"disliked songs\")\n\nplt.xlabel(\"Speechiness\", size=14)\nplt.ylabel(\"Count\", size=14)\nplt.title(\"Comparison of danceability between liked and disliked songs\")\nplt.legend(loc='upper right')","44756e5a":"high_speechiness = df['speechiness'] > 0.3 \nhigh_danceability = df['danceability'] > 0.6\n\nsongs_with_high_dance_and_speech = df[high_speechiness & high_danceability]\nplt.title(\"Distribution of likes among songs with high speechiness and danceability\")\nsongs_with_high_dance_and_speech['liked'].value_counts().sort_values().plot(kind = 'barh')","54b2e99a":"songs_with_low_dance_and_speech = df[~high_speechiness & ~high_danceability]\nplt.title(\"Distribution of likes among songs with low speechiness and danceability\")\nsongs_with_low_dance_and_speech['liked'].value_counts().plot(kind = 'barh')","ea33c3be":"\nplt.plot(df['danceability'], df['instrumentalness'], 'o', markersize = 4, alpha=0.6)\nplt.title(\"Scatter plot of songs based on instrumentalness and danceability\")\nplt.xlabel(\"Danceability\", size=14)\nplt.ylabel(\"Instrumentalness\", size=14)","0d9061ec":"from scipy.stats import linregress\n\nxs = df['danceability']\nys = df['instrumentalness']\n\n# Compute the linear regression\nres = linregress(xs, ys)\n\n# Plot the line of best fit\nfx = np.array([xs.min(), xs.max()])\nfy = res.slope * fx + res.intercept\nplt.plot(fx, fy, '-', alpha=0.7)\n\nplt.title(\"Best fit line of relationship between instrumentalness and danceability\")\nplt.xlabel(\"Danceability\", size=14)\nplt.ylabel(\"Instrumentalness\", size=14)","d61aabae":"c = df.corr()\nc['liked'].sort_values(kind=\"quicksort\")","74cc3124":"from sklearn.model_selection import train_test_split\n\nx, y = df.drop('liked',axis=1),df['liked']\nx.shape, y.shape","f8dcb441":"x_train,x_test,y_train,y_test = train_test_split(x, y, test_size=0.3, random_state=1)\nx_train.shape ,x_test.shape ,y_train.shape ,y_test.shape\nx_train","071a5084":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn import metrics\n\nmodel = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=1)\nmodel.fit(x_train, y_train)\npredictions = model.predict(x_test)\naccuracy_score = metrics.accuracy_score(y_test, predictions)\naccuracy_score","f79f30b3":"Here, we can see that almost all of the user's disliked songs score very low on Speechiness.","3ae3b74a":"It looks like if a song scores highly on both speechiness and danceability, it's very likely to get the user's like. And the opposite is true: if a song scores low on both speechiness and danceability, it would also be more likely to be disliked.","159a4a2d":"# Why is this an interesting question?\nI\u2019d like to explore how good the features that spotify has created to classify songs are. I\u2019ve been interested in the discover weekly playlist\/ and song radio feature in the app. It\u2019s still quite a hit or miss. So it\u2019ll be cool to explore this spotify dataset.\n\n","5fd6abcd":"## Prediction\nAnd out of curiosity, I would like to see how good these spotify song features are at predicting this user's likes and dislikes. I will attempt to use the Random Forest Classifier to test it out.\n\nA Random Forest Classifier builds multiple decision trees and merges them together to get a more accurate and stable prediction","a1a21a43":"### As we can tell from the extremely high accuracy score, spotify song features are impressively useful!","1da6378f":"Again, just to reiterate, it seems like author likes speechiness, danceability, non-instrumental, short songs. And that makes sense since he mentioned he likes mostly French rap.","c060208e":"## How was the dataset collected\n\nThis was collected by a Spotify user, and gathered directly from Spotify. \n\n## Data description\nThe data for every feature of every song is very complete, and description of each feature is clearly documented in (https:\/\/developer.spotify.com\/documentation\/web-api\/reference\/#\/operations\/get-audio-features). \n\nThe data type for every feature is numerical. Most features' method of measure seems quite straightforward other than 'danceability' which I suspect could be rather subjective. However, since the dataset is specific to one user, the subjectiveness of the metric can be ignored.\n\nThere are a total of 195 songs, of which 100 are liked, and the rest (95) disliked","717673ef":"Another interesting thing I noted in the correlation matrix was how danceability have a very strong inverse relationship to instrumentalness (which makes sense). And I'm curious how this relationship would look","04e0dab6":"## Correlation between all features and target column - 'Liked'\nJust based off this correlation matrix, we can tell that this spotify user has a preference for songs:\n1. scoring high on - danceability, loudness, speechiness\n2. scoring low on - instrumentalness, duration\n","db1dca33":"And here, we can see that many of the user's liked songs score very high on Danceability.\n\nFrom the two charts above, we can see that even if a song scores high on Danceability, it still wouldn't guarantee the user's like. We can also see that even if a song scores low on speechiness, it doesn't guarantee the user's dislike.\n\n#### I wonder if we combine these two features, we might get a starker difference"}}