{"cell_type":{"c34c5e5d":"code","b7647f31":"code","ed241cdb":"code","39f1abca":"code","a989e7ac":"code","fb8b4e7a":"code","53868fff":"code","84b62896":"code","4c421277":"code","cd1e0481":"markdown","9554fb9e":"markdown","77637a7a":"markdown","4e3ac007":"markdown","5052159c":"markdown","262e0c72":"markdown","6238fff5":"markdown","f6168d0a":"markdown","df56fbc1":"markdown"},"source":{"c34c5e5d":"#for modeling\nfrom keras.models import Sequential\nfrom keras.layers import Convolution2D\nfrom keras.layers import MaxPooling2D\nfrom keras.layers import Flatten\nfrom keras.layers import Dense\n#for preprocessing\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.preprocessing import image\nimport numpy as np\n#for visualizing\nimport matplotlib.pyplot as plt\n","b7647f31":"def create_model():\n    \"\"\"\n    Creates CNN model's artitechture.\n    \"\"\"\n    #creating the artitechure\n    model=Sequential([\n                     Convolution2D(32, (3, 3), input_shape=( 128, 128, 3), activation=\"relu\"),#first Conv layer\n                     MaxPooling2D(pool_size=(2,2)),#pooling layer\n                     Convolution2D(64, (3, 3), activation=\"relu\"),#second conv layer\n                     MaxPooling2D(pool_size=(2,2)),#pooling for second layer\n                     Flatten(),#flattening\n                     Dense(units=128,activation=\"relu\"),#hidden layer\n                     Dense(units=1,activation=\"sigmoid\")#output layer\n    ])\n    #compiling the model\n    model.compile(\n                    loss=\"binary_crossentropy\", \n                     optimizer=\"adam\",\n                     metrics=[\"accuracy\"]\n                 )\n    return model\ndef train_model(train_data,test_data):\n    \"\"\"\n    Create model and fit it on train data and return the model back.\n    \"\"\"\n    model=create_model()\n    earlyStop=tf.keras.callbacks.EarlyStopping(monitor=\"val_loss\",\n                                              patience=5) #callback to stop early\n    model.fit_generator(train_data,\n                       validation_data=test_data,\n                       epochs=10,\n                       callbacks=[earlyStop]\n                       )\n    return model","ed241cdb":"def preprocessing(test_data=False,pred_data=False,path=None):\n    \"\"\"\n    Taking the type of data into consideration, returns its preprocessed form.\n    \"\"\"\n    if test_data:\n        test_gen=ImageDataGenerator(rescale=1.\/255,\n                                  zoom_range=0.2,\n                                  horizontal_flip=True)\n        test_set=test_gen.flow_from_directory(\"\/kaggle\/input\/dogs-cats-images\/dataset\/test_set\/\",\n                                       target_size=(128, 128),\n                                       batch_size=32,\n                                       class_mode='binary')\n        return test_set\n    elif pred_data:\n        from keras.preprocessing import image\n        test_img=image.load_img(path,target_size=(128, 128))\n        test_img=image.img_to_array(test_img)\n        test_img=np.expand_dims(test_img,axis=0)\n        return test_img\n        \n    else:\n        \n        train_gen=ImageDataGenerator(rescale=1.\/255,\n                                      zoom_range=0.2,\n                                      horizontal_flip=True\n                                    )\n        train_set=train_gen.flow_from_directory(\"\/kaggle\/input\/dogs-cats-images\/dataset\/training_set\/\",\n                                                target_size=(128, 128),\n                                                batch_size=32,\n                                                class_mode='binary')\n        return train_set\n       ","39f1abca":"train_data=preprocessing()\ntest_data=preprocessing(test_data=True)","a989e7ac":"model=train_model(train_data,test_data)","fb8b4e7a":"def show_preds(path,model=model):\n    image=preprocessing(path=path,pred_data=True)\n    pred_view=tf.keras.preprocessing.image.load_img(path,target_size=(224,224))\n    predictions=model.predict(image)\n    if predictions[0][0]==1:\n        predictions=\"This Image Contains a dog.\"\n    else:\n        predictions=\"This Image Contains a cat.\"\n    plt.imshow(pred_view)\n    plt.title(predictions,color=\"Green\")\n    plt.xticks([]);\n    plt.yticks([]);","53868fff":"show_preds(\"\/kaggle\/input\/for-testing\/d1.jpg\") #only give paths and make predictions","84b62896":"show_preds(\"\/kaggle\/input\/for-testing\/c2.jpeg\")","4c421277":"show_preds(\"\/kaggle\/input\/for-testing\/d2.jpg\")","cd1e0481":"### Fitting the model:","9554fb9e":"### Creating the Image Preprocessing Pipeline:","77637a7a":" \ud83e\udd14 Model got confused here..........\n Infact I was also confused when I saw that dog first time haha , so it's cool that our model is still at 76 % but we can improve it by:\n 1. Using a larger dataset from here https:\/\/www.kaggle.com\/biaiscience\/dogs-vs-cats.  \n 2. Changing our CNN's artitechture.\n 3. Applying better image augmentation.\n ","4e3ac007":"### Setting up the tool box:","5052159c":"## Creating the Modeling Pipeline:","262e0c72":"Thank You!","6238fff5":"### Preprocessing data for predictions & making predictions on it.","f6168d0a":"### Preprocessing Train & Test data:","df56fbc1":"# End to End Cats Vs Dogs Classification Using CNN In Few Steps\nThis Notebook implements Convolutional Neural Network to classify between the dogs and cats using their labeled images."}}