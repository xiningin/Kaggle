{"cell_type":{"58ae0aef":"code","ec741d1d":"code","2ed2670c":"code","c05bc845":"code","5f852e77":"code","9cdc1916":"code","62518339":"code","3d390ea3":"code","064a2e68":"code","e304611e":"code","340548cc":"code","11781b68":"code","f791d121":"code","6eb2cfcc":"code","e3cd3577":"code","3822dd26":"code","3bd9d860":"code","91f2d8ec":"code","51459488":"code","cc945587":"code","4e53b7ac":"code","025aef31":"code","643a16e4":"code","81a62839":"code","74e2eb93":"code","32a1f225":"code","3c369d2d":"code","d511ae1b":"code","1782da43":"code","9f24d8bb":"code","0ac64f2e":"code","23fbb46d":"code","10676c0b":"code","e91cf640":"code","7a3fdf42":"code","9c9ab52a":"code","8d31747a":"code","9735eb6e":"code","43337c86":"code","8c554368":"code","abdddd0f":"code","68866583":"code","a0d9af86":"code","e3253cb3":"code","5bf6ac05":"code","432674bb":"code","7529f48e":"code","b184465e":"code","b703d957":"markdown","ea7a52ef":"markdown","ffbefcec":"markdown","55d248b9":"markdown","c4e45ff0":"markdown","c6f29b2c":"markdown","76b09cfe":"markdown","fca451eb":"markdown","b836dae9":"markdown","8c46ab9d":"markdown","6c5009ee":"markdown","c9f2ac50":"markdown","7ae837ea":"markdown","d9cc6461":"markdown","997f40fb":"markdown","aa42c83e":"markdown","c85c5dd0":"markdown","ef487328":"markdown","3dba9b30":"markdown","adabfc60":"markdown","776db630":"markdown","480bcc76":"markdown","d95f3edf":"markdown","cee9056b":"markdown","b7554bad":"markdown","63784273":"markdown","f5ca5822":"markdown","5eb232e3":"markdown","232934f5":"markdown","c192fc69":"markdown","b7df2f66":"markdown","3f6cab8c":"markdown","f3ad9d2c":"markdown","1ecfb813":"markdown","1114d22e":"markdown","d17a5d5b":"markdown","f03cdde6":"markdown","dfa43c79":"markdown","1bf19183":"markdown","cbc6959b":"markdown"},"source":{"58ae0aef":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ec741d1d":"!pip3 install kneed","2ed2670c":"import matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nfrom sklearn.preprocessing import StandardScaler\nimport plotly.express as px\nfrom sklearn.cluster import DBSCAN\nfrom sklearn.cluster import KMeans\nfrom sklearn.cluster import AgglomerativeClustering\nfrom sklearn.metrics import silhouette_score\nfrom kneed import KneeLocator\nfrom yellowbrick.cluster import SilhouetteVisualizer","c05bc845":"customers_df = pd.read_csv(\"\/kaggle\/input\/customer-segmentation-tutorial-in-python\/Mall_Customers.csv\")\noriginal_df = pd.read_csv(\"\/kaggle\/input\/customer-segmentation-tutorial-in-python\/Mall_Customers.csv\")\ncustomers_df.head()","5f852e77":"customers_df.drop([\"CustomerID\"], axis=1, inplace=True)\noriginal_df.drop([\"CustomerID\"], axis=1, inplace=True)\ncustomers_df.head()","9cdc1916":"customers_df.info()","62518339":"customers_df.describe()","3d390ea3":"customers_df.head()\ncustomers_numeric_df = customers_df.drop(\"Gender\", axis=1)","064a2e68":"plt.figure(figsize=(9,9))\nplt.title(\"Box plots for 3 numeric varaibles\")\nplt.boxplot(customers_numeric_df.values,labels=[\"Age\", \"Annual Income (k$)\",\"Spending Score (1-100)\"])","e304611e":"age_list = customers_df[\"Age\"].to_list()\nage_bins = {}\nage_bins[\"1-9\"]=0\nage_bins[\"10-19\"]=0\nage_bins[\"20-29\"]=0\nage_bins[\"30-39\"]=0\nage_bins[\"40-49\"]=0\nage_bins[\"50-59\"]=0\nage_bins[\"60-69\"]=0\nage_bins[\"70-79\"]=0\nfor age in age_list:\n    if age<=79 and age>=70:\n        age_bins[\"70-79\"] += 1\n    elif age<=69 and age>=60:\n        age_bins[\"60-69\"] += 1\n    elif age<=59 and age>=50:\n        age_bins[\"50-59\"] += 1\n    elif age<=49 and age>=40:\n        age_bins[\"40-49\"] += 1\n    elif age<=39 and age>=30:\n        age_bins[\"30-39\"] += 1\n    elif age<=29 and age>=20:\n        age_bins[\"20-29\"] += 1\n    elif age<=19 and age>=10:\n        age_bins[\"10-19\"] += 1\n    elif age<=9 and age>=1:\n        age_bins[\"1-9\"] += 1","340548cc":"fig, ax = plt.subplots()\nfig = plt.figure(figsize=(18,18))\nx=list(age_bins.keys())\ny=list(age_bins.values())\nax.vlines(x,ymin=0,ymax=y,color=\"g\")\nax.plot(x,y,\"o\", color=\"maroon\")\nax.set_xticklabels(x,rotation=90)\nax.set_ylabel(\"Count of age groups\")\nax.set_title(\"Age groups\")","11781b68":"pc_labels = [\"Male\", \"Female\"]\nmale_count = customers_df[customers_df[\"Gender\"] == \"Male\"].shape[0]\nfemale_count = customers_df[customers_df[\"Gender\"] == \"Female\"].shape[0]\nax = plt.figure(figsize=(8,8))\nax.set(facecolor=\"white\")\nplt.pie([male_count,female_count],labels=pc_labels,autopct='%1.1f%%', explode = [0, 0.1], startangle=15, shadow=True)\nplt.title('Gender distribution')\nplt.axis('equal')\nplt.show()","f791d121":"plt.figure(figsize=(12,5))\nplt.title(\"Box plot for age per gender\")\nsns.boxplot(y=\"Gender\", x=\"Age\", data = customers_df , orient=\"h\", palette = 'rainbow')","6eb2cfcc":"plt.figure(figsize=(12,5))\nplt.title(\"Distribution of age of males\")\nax = sns.distplot(customers_df[customers_df[\"Gender\"]==\"Male\"][\"Age\"], color = 'b')","e3cd3577":"plt.figure(figsize=(12,5))\nplt.title(\"Distribution of age of males\")\nax = sns.distplot(customers_df[customers_df[\"Gender\"]==\"Female\"][\"Age\"], color = 'r')","3822dd26":"f = plt.figure(figsize=(12,5))\nax = f.add_subplot(121)\nsns.histplot(customers_df[customers_df[\"Gender\"]==\"Male\"][\"Annual Income (k$)\"], color='b', ax=ax, kde=True)\nax.set_title(\"Distribution of annual income for males\")\n\nax = f.add_subplot(122)\nsns.histplot(customers_df[customers_df[\"Gender\"]==\"Female\"][\"Annual Income (k$)\"], color='r', ax=ax, kde=True)\nax.set_title(\"Distribution of annual income for females\")","3bd9d860":"plt.figure(figsize=(12,8))\nsns.distplot(customers_df[customers_df[\"Gender\"]==\"Male\"][\"Annual Income (k$)\"], color = 'blue')\nsns.distplot(customers_df[customers_df[\"Gender\"]==\"Female\"][\"Annual Income (k$)\"], color = 'red')","91f2d8ec":"plt.figure(figsize=(12,8))\nsns.violinplot(x=\"Gender\", y=\"Annual Income (k$)\", data= customers_df)","51459488":"plt.figure(figsize=(12,5))\nplt.title(\"Box plot for Annual Income per gender\")\nsns.boxplot(y=\"Gender\", x=\"Annual Income (k$)\", data = customers_df , orient=\"h\", palette = \"flare\")","cc945587":"f = plt.figure(figsize=(12,5))\nax = f.add_subplot(121)\nsns.histplot(customers_df[customers_df[\"Gender\"]==\"Male\"][\"Spending Score (1-100)\"], color='b', ax=ax, kde=True)\nax.set_title(\"Distribution of spending score for males\")\n\nax = f.add_subplot(122)\nsns.histplot(customers_df[customers_df[\"Gender\"]==\"Female\"][\"Spending Score (1-100)\"], color='r', ax=ax, kde=True)\nax.set_title(\"Distribution of spending score for females\")","4e53b7ac":"plt.figure(figsize=(12,8))\nsns.distplot(customers_df[customers_df[\"Gender\"]==\"Male\"][\"Spending Score (1-100)\"], color = 'blue', label=\"Male\")\nsns.distplot(customers_df[customers_df[\"Gender\"]==\"Female\"][\"Spending Score (1-100)\"], color = 'red', label=\"Female\")\nplt.legend()","025aef31":"plt.figure(figsize=(12,8))\nplt.title(\"Violin plot: Spending score vs Gender\")\nax = sns.violinplot(x=\"Gender\", y=\"Spending Score (1-100)\", data= customers_df)","643a16e4":"plt.figure(figsize=(12,5))\nplt.title(\"Box plot for spending score per gender\")\nsns.boxplot(y=\"Gender\", x=\"Spending Score (1-100)\", data = customers_df , orient=\"h\", palette = \"viridis\")","81a62839":"x = customers_df[\"Spending Score (1-100)\"].to_list()\ny = customers_df[\"Annual Income (k$)\"].to_list()\nfig = plt.figure(figsize=(8,8))\nplt.scatter(x, y)\nfig.suptitle(\"Spending score vs annual income\", fontsize=20)\nplt.xlabel(\"Spending score (1-100)\", fontsize=16)\nplt.ylabel(\"Annual Income (k$)\", fontsize=16)","74e2eb93":"p = sns.jointplot(x = 'Age', y = 'Annual Income (k$)', data = customers_df, color=\"g\")\np.fig.suptitle(\"Annual Income by Age (all genders)\")\np.fig.tight_layout()","32a1f225":"p = sns.jointplot(x = 'Age', y = 'Annual Income (k$)', data = customers_df[customers_df[\"Gender\"]==\"Male\"], color=\"b\")\np.fig.suptitle(\"Annual Income by Age (males only)\")\np.fig.tight_layout()","3c369d2d":"p = sns.jointplot(x = 'Age', y = 'Annual Income (k$)', data = customers_df[customers_df[\"Gender\"]==\"Female\"], color=\"r\")\np.fig.suptitle(\"Annual Income by Age (Female only)\")\np.fig.tight_layout()","d511ae1b":"sns.lmplot(x=\"Age\", y=\"Annual Income (k$)\", hue=\"Gender\", data=customers_df, palette = \"cubehelix\", size = 7)","1782da43":"p = sns.jointplot(x = 'Age', y = 'Spending Score (1-100)', data = customers_df, color=\"g\")\np.fig.suptitle(\"Spending Score by Age (all genders)\")\np.fig.tight_layout()","9f24d8bb":"p = sns.jointplot(x = 'Age', y = 'Spending Score (1-100)', data = customers_df[customers_df[\"Gender\"]==\"Male\"], color=\"b\")\np.fig.suptitle(\"Spending Score by Age (males only)\")\np.fig.tight_layout()","0ac64f2e":"p = sns.jointplot(x = 'Age', y = 'Spending Score (1-100)', data = customers_df[customers_df[\"Gender\"]==\"Female\"], color=\"r\")\np.fig.suptitle(\"Spending Score by Age (Female only)\")\np.fig.tight_layout()","23fbb46d":"sns.lmplot(x=\"Age\", y=\"Spending Score (1-100)\", hue=\"Gender\", data=customers_df, palette = 'inferno_r', size = 7, robust=True)","10676c0b":"sns.lmplot(x=\"Age\", y=\"Spending Score (1-100)\", hue=\"Gender\", data=customers_df, palette = 'inferno_r', size = 7)","e91cf640":"temp_df = pd.DataFrame(customers_df)\ngender_encode = {\"Gender\":{\"Male\":0, \"Female\":1}}\ntemp_df.replace(gender_encode, inplace=True)\nfig = plt.figure(figsize=(10,10))\nax = fig.add_subplot(111, projection='3d')\n\nimg = ax.scatter(temp_df[\"Age\"].to_list(), temp_df[\"Annual Income (k$)\"].to_list(), temp_df[\"Spending Score (1-100)\"].to_list(), c=temp_df[\"Gender\"].to_list(), cmap=\"RdYlGn\")\nplt.xlabel(\"Age\")\nplt.ylabel(\"Annual Income (k$)\")\nax.set_zlabel(\"Spending Score (1-100)\")\nfig.colorbar(img)\nplt.show()","7a3fdf42":"gender_encode = {\"Gender\":{\"Male\":0, \"Female\":1}}\ncustomers_df.replace(gender_encode, inplace=True)","9c9ab52a":"customers_df.head()","8d31747a":"from sklearn.neighbors import NearestNeighbors\nneigh = NearestNeighbors(n_neighbors=2)\nnbrs = neigh.fit(customers_df)\ndistances, indices = nbrs.kneighbors(customers_df)\ndistances = np.sort(distances, axis=0)\ndistances[:,1]\neps_kneedle  = KneeLocator(\n    range(len(distances[:,1])),\n    distances[:,1],\n    curve='convex',\n    direction='increasing'\n)\nprint(f\"Optimal eps is {round(distances[:,1][int(eps_kneedle.elbow)],3)}\")\neps_kneedle.plot_knee()","9735eb6e":"db_clustering = DBSCAN(eps=9.327,min_samples=5, metric=\"euclidean\").fit(customers_df)\nlabels = db_clustering.labels_\nprint(f\"Silhouette Score: {silhouette_score(customers_df, labels, metric='euclidean')}\")","43337c86":"silhouette_score_list = []\nsse_list = []\nnum_of_clusters=[]\n# fig, ax = plt.subplots(2, 2, figsize=(15,8))\n\nfor i in range(2,9):\n    fig = plt.figure(figsize=(8,8))\n    fig.suptitle(f\"Silhouette plot for {i} clusters\")\n    ax = fig.add_subplot()\n    print(\"For Number of Clusters = \", i)\n    num_of_clusters.append(i)\n    kmeans = KMeans(n_clusters=i, random_state=0)\n    kmeans.fit(customers_df)\n    labels = kmeans.labels_\n    sse_list.append(kmeans.inertia_)\n    silhouette_score_list.append(silhouette_score(customers_df, labels, metric='euclidean'))\n    print(f\"Silhouette Score: {silhouette_score(customers_df, labels, metric='euclidean')}\")\n    print(f\"Sum of Squared Errors: {kmeans.inertia_}\")\n    print(\"\\n\")\n    visualizer = SilhouetteVisualizer(kmeans, colors='yellowbrick', ax=ax)\n    visualizer.fit(customers_df)\n","8c554368":"kmeans_kneedle  = KneeLocator(\n    num_of_clusters,\n    sse_list,\n    curve='convex',\n    direction='decreasing'\n)\nprint(f\"Optimal number of clusters by SSE: {int(kmeans_kneedle.knee)}\")\nkmeans_kneedle.plot_knee()","abdddd0f":"silhouette_score_list = []\nnum_of_clusters=[]\nfor i in range(2,9):\n    num_of_clusters.append(i)\n    print(\"For Number of Clusters = \", i)\n    model = AgglomerativeClustering(n_clusters=i, affinity='euclidean', linkage='ward')\n    model.fit(customers_df)\n    labels = model.labels_\n    silhouette_score_list.append(silhouette_score(customers_df, labels, metric='euclidean'))\n    print(f\"Silhouette Score: {silhouette_score(customers_df, labels, metric='euclidean')}\")\n    print(\"\\n\")\nkneedle = KneeLocator(\n    num_of_clusters,\n    silhouette_score_list,\n    curve='concave',\n    direction='increasing'\n    )\n\n\nprint(\"\\n\")\nprint(f\"Optimal number of clusters by silhouette score: {int(kneedle.elbow)}\")\nkneedle.plot_knee()","68866583":"kmeans = KMeans(n_clusters=5, random_state=0)\nkmeans.fit(customers_df)\nlabels = kmeans.labels_\noriginal_df[\"segment\"]=labels\noriginal_df.head()","a0d9af86":"original_df['segment'] = original_df['segment'].map(lambda segment: segment+1)","e3253cb3":"original_df.head()","5bf6ac05":"original_df.groupby('segment').describe()","432674bb":"fig = px.pie(original_df, names='segment')\nfig.show()","7529f48e":"def numberdistributiongraph(num_feature):\n\n  fig = px.box(original_df, x=\"segment\", y=num_feature)\n  fig.update_layout(\n      title_text= (num_feature + \" Distribution Chart\"),\n  )\n  fig.show()\n    \nnum_features = [\"Age\",\"Annual Income (k$)\",\t\"Spending Score (1-100)\"]\n\nfor n in num_features:\n  numberdistributiongraph(n)","b184465e":"import plotly.graph_objects as go\nfor i in range(1,6):\n    male_count = original_df[original_df[\"segment\"]==i].Gender.value_counts()[1]\n    female_count = original_df[original_df[\"segment\"]==i].Gender.value_counts()[0]\n    fig = go.Figure([go.Bar(x=[\"Male\", \"Female\"], y=[male_count, female_count])])\n    fig.update_layout(\n      title_text= (f\"Distribution of gender in segment {i}\"),\n      )\n    fig.show()","b703d957":"Interesting outlier in male category...","ea7a52ef":"## 3.1 Univariate Analysis on Numerical variables","ffbefcec":"Given the following data, we can make the following recommendations for the business to take based on their segments:\n<br><br>\n<b>Segment 1)<\/b> Put less resources into marketing and retaining these customers. Given limited resources, they have low potential to spend due to their low annual income, and low likelihood of spending.<br>\n<b>Segment 2)<\/b>  Since they are already spending, put effort into retaining customers that fall within this segment they provide high revenue. This can possibly be done through loyalty schemes\/programs.<br>\n<b>Segment 3)<\/b>  They sit right in the middle in therms of spending score and annual income. Perhaps more effort can be put into marketing products or retaining them if the business has the resources.<br>\n<b>Segment 4)<\/b>  These customers have high annual income and low spending. More effort can be put into marketing and attracting them into the business ecosystem.<br>\n<b>Segment 5)<\/b>  Interestingly, these customers are high in spending but low in come, and are quite young as well. They may be students who do not have a job but spend the money of their parents. Since retaining them may be uncertain due to the strictness of their parents, we could focus on product marketing and recommendation.","55d248b9":"### 5.2.1 Distribution of customers across segments","c4e45ff0":"## 4.2 DBSCAN","c6f29b2c":"### 5.2.1 Distribution of numerical attributes","76b09cfe":"# 4. Clustering","fca451eb":"## 4.1 Preprocessing","b836dae9":"# 6. Summarizing segment attributes","8c46ab9d":"## 4.3 KMeans Clustering","6c5009ee":"### 3.3.2 Annual Income and Gender","c9f2ac50":"### 4.3.1 Silhouette score","7ae837ea":"### 4.2.2 Silhouette score","d9cc6461":"# 7. Business Recommendations","997f40fb":"## 3.3 Bivariate Analysis","aa42c83e":"## 5.1 Preprocessing","c85c5dd0":"# 1. Importing relevant libraries","ef487328":"# 3. Exploratory Data Analysis","3dba9b30":"### 3.3.1 Gender and Age","adabfc60":"### 4.3.2 Sum of Squared Errors (SSE)","776db630":"### 3.4.1 Annual Income by Age & Gender","480bcc76":"### 3.2.1 Binning numerical values","d95f3edf":"## 4.5 Evaluation of clustering models","cee9056b":"Thank you and hope you've enjoyed my notebook, please leave feedback if any! I had a lot of fun doing this :)","b7554bad":"### 3.4.3 All attributes","63784273":"### 3.4.2 Spending Score by Age & Gender","f5ca5822":"Since the silhouette score given by DBSCAN is so low, we will not be considering it.<br>\nKMeans and Hierarchical clustering both gave an optimal cluster size of 5. In terms of silhouette score, both are pretty similiar, with KMeans outperforming Hierarchical clustering by just a bit.<br>\nIn addition, hierarchical clustering is more computationally expensive so let's go forward with Kmeans","5eb232e3":"### 3.3.3 Spending Score and Gender","232934f5":"## 3.4 Multivariate Analysis","c192fc69":"Putting all the information above into context, let's pen down some thoughts:\n- Genders are pretty distributed across the different segments\n- Segments 2 and 5 are generally younger than those is segments 1, 3 and 4\n- Annual income of customers in segment 3 sits in the middle of the other segments. Segments 1 and 5 are on the low side, while segments 2 and 4 are high\n- Customers in segment 2 and 5 are high in terms of spending score, 3 is average, and 1 and 4 are lower than the other segments\n\nLet's organize this in the form of a table","b7df2f66":"# 2. Understanding the dataset","3f6cab8c":"### 4.4.1 Silhouette score","f3ad9d2c":"## 4.4 Hierarchical Clustering ","1ecfb813":"### 3.3.4 Spending Score and Annual Income","1114d22e":"### 4.2.1 Using K-Nearest Neighbors to determine optimal epsilon","d17a5d5b":"## 3.2 Univariate Analysis on Categorical variables","f03cdde6":"|Segment|Spending|Annual Income|Age (Median)|\n|-|-|-|-|\n|1|Low|Low|40s|\n|2|High|High|Mid 30s|\n|3|Middle|Middle|Mid 40s|\n|4|Low|High|Low 40s|\n|5|High|Low|Low 20s|","dfa43c79":"### 5.2.2 Distribution of categorical attributes","1bf19183":"## 5.2 Visualizations","cbc6959b":"# 5. Understanding customer segments"}}