{"cell_type":{"78d789cd":"code","d198e4d9":"code","a9120e25":"code","b49db1f6":"code","7161535f":"code","36e8fe19":"code","fcd80396":"code","a082b6c0":"code","d960bdaf":"code","1572fb71":"code","76a4034c":"code","629652a9":"code","79f8d977":"code","10ef4890":"code","36d77def":"code","ba203fb2":"code","0381e963":"code","dd87e70c":"code","9d2c45ca":"code","07c3143f":"code","3516dfdc":"code","8a7927f4":"code","20f07415":"code","bf45fb58":"code","a41864aa":"code","449c7741":"code","6d1431a7":"code","dcef6f98":"code","13252fca":"code","5f5d5630":"code","f3b5ee30":"markdown","a61149c8":"markdown","fee430ae":"markdown","55da1d19":"markdown","d31322b8":"markdown","64f99231":"markdown","4550b030":"markdown","60782a96":"markdown","b5462b15":"markdown","6add9f07":"markdown","6424c7f2":"markdown","6d0310ee":"markdown","e38f8a19":"markdown","396c4884":"markdown","9dd54de2":"markdown","4fb82ff8":"markdown","f3405d73":"markdown"},"source":{"78d789cd":"import os\nimport sys\nimport time\nimport random\nimport logging\nimport typing as tp\nfrom pathlib import Path\nfrom contextlib import contextmanager\n\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n\nimport numpy as np\nimport pandas as pd\n\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import mean_squared_log_error, mean_squared_error\n\nimport xgboost as xgb\nimport lightgbm as lgb\nfrom catboost import CatBoost, Pool\n\n%matplotlib inline","d198e4d9":"ROOT = Path.cwd().parent\nINPUT = ROOT \/ \"input\"\nDATA = INPUT \/ \"tabular-playground-series-jan-2021\"\nWORK = ROOT \/ \"working\"\n\nfor path in DATA.iterdir():\n    print(path.name)","a9120e25":"train = pd.read_csv(DATA \/ \"train.csv\")\ntest = pd.read_csv(DATA \/ \"test.csv\")\nsmpl_sub = pd.read_csv(DATA \/ \"sample_submission.csv\")\nprint(\"train: {}, test: {}, sample sub: {}\".format(\n    train.shape, test.shape, smpl_sub.shape\n))","b49db1f6":"train.head().T","7161535f":"@contextmanager\ndef timer(logger=None, format_str='{:.3f}[s]', prefix=None, suffix=None):\n    if prefix: format_str = str(prefix) + format_str\n    if suffix: format_str = format_str + str(suffix)\n    start = time.time()\n    yield\n    d = time.time() - start\n    out_str = format_str.format(d)\n    if logger:\n        logger.info(out_str)\n    else:\n        print(out_str)","36e8fe19":"class TreeModel:\n    \"\"\"Wrapper for LightGBM\/XGBoost\/CATBoost\"\"\"\n    def __init__(self, model_type: str):\n        self.model_type = model_type\n        self.trn_data = None\n        self.val_data = None\n        self.model = None\n\n    def train(self,\n              params: dict,\n              X_train: pd.DataFrame, y_train: np.ndarray,\n              X_val: pd.DataFrame, y_val: np.ndarray,\n              train_weight: tp.Optional[np.ndarray] = None,\n              val_weight: tp.Optional[np.ndarray] = None,\n              train_params: dict = {}):\n        if self.model_type == \"lgb\":\n            self.trn_data = lgb.Dataset(X_train, label=y_train, weight=train_weight)\n            self.val_data = lgb.Dataset(X_val, label=y_val, weight=val_weight)\n            self.model = lgb.train(params=params,\n                                   train_set=self.trn_data,\n                                   valid_sets=[self.trn_data, self.val_data],\n                                   **train_params)\n        elif self.model_type == \"xgb\":\n            self.trn_data = xgb.DMatrix(X_train, y_train, weight=train_weight)\n            self.val_data = xgb.DMatrix(X_val, y_val, weight=val_weight)\n            self.model = xgb.train(params=params,\n                                   dtrain=self.trn_data,\n                                   evals=[(self.trn_data, \"train\"), (self.val_data, \"val\")],\n                                   **train_params)\n        elif self.model_type == \"cat\":\n            self.trn_data = Pool(X_train, label=y_train, group_id=[0] * len(X_train))\n            self.val_data =  Pool(X_val, label=y_val, group_id=[0] * len(X_val))\n            self.model = CatBoost(params)\n            self.model.fit(\n                self.trn_data, eval_set=[self.val_data], use_best_model=True, **train_params)\n        else:\n            raise NotImplementedError\n\n    def predict(self, X: pd.DataFrame):\n        if self.model_type == \"lgb\":\n            return self.model.predict(\n                X, num_iteration=self.model.best_iteration)  # type: ignore\n        elif self.model_type == \"xgb\":\n            X_DM = xgb.DMatrix(X)\n            return self.model.predict(\n                X_DM, ntree_limit=self.model.best_ntree_limit)  # type: ignore\n        elif self.model_type == \"cat\":\n            return self.model.predict(X)\n        else:\n            raise NotImplementedError\n\n    @property\n    def feature_names_(self):\n        if self.model_type == \"lgb\":\n            return self.model.feature_name()\n        elif self.model_type == \"xgb\":\n            return list(self.model.get_score(importance_type=\"gain\").keys())\n        elif self.model_type == \"cat\":\n             return self.model.feature_names_\n        else:\n            raise NotImplementedError\n\n    @property\n    def feature_importances_(self):\n        if self.model_type == \"lgb\":\n            return self.model.feature_importance(importance_type=\"gain\")\n        elif self.model_type == \"xgb\":\n            return list(self.model.get_score(importance_type=\"gain\").values())\n        elif self.model_type == \"cat\":\n            return self.model.feature_importances_\n        else:\n            raise NotImplementedError","fcd80396":"ID_COL = \"id\"\nFEAT_COLS = [f\"cont{i}\" for i in range(1, 15)]\nTGT_COL = \"target\"\n\nN_SPLITS = 5\nRANDOM_SEED_LIST = [\n    42,\n    2021, 0, 1086, 39\n]\n\nMODEL_PARAMS = {\n    \"lgb\": {\n        \"objective\": \"root_mean_squared_error\",\n        \"boosting\": \"gbdt\",\n        \"learning_rate\": 0.05,\n        \"seed\": RANDOM_SEED_LIST[0],\n        'max_depth': 7,\n        'colsample_bytree': .85,\n        \"subsample\": .85,\n        \"n_jobs\": 2,\n        # \"device\": \"gpu\",\n        # \"gpu_device_id\": 0\n    },\n    \"xgb\": {\n        \"objective\": \"reg:squarederror\",\n        \"learning_rate\": 0.01,\n        \"seed\": RANDOM_SEED_LIST[0],\n        \"max_depth\": 7,\n        \"subsample\": .85,\n        \"colsample_bytree\": .85,\n        \"n_jobs\": 2,\n        'tree_method': \"gpu_hist\",\n        \"gpu_id\": 0,\n    },\n    \"cat\": {\n        'loss_function': 'RMSE',\n        'learning_rate': 0.05,\n        'max_depth': 7,\n        'random_state': RANDOM_SEED_LIST[0],\n        \"thread_count\": 2,\n#         \"task_type\": \"GPU\",\n#         \"devices\" : \"0\",\n        'num_boost_round': 20000\n    }\n}\nTRAIN_PARAMS = {\n    \"lgb\": {\n        \"num_boost_round\": 20000,\n        \"early_stopping_rounds\": 200,\n        \"verbose_eval\": 100,\n    },\n    \"xgb\": {\n        \"num_boost_round\": 20000,\n        \"early_stopping_rounds\": 200,\n        \"verbose_eval\":  100,\n    },\n    \"cat\": {'early_stopping_rounds': 200, 'verbose_eval': 100}\n}","a082b6c0":"use_feat_cols = []\ntrain_feat = train[[ID_COL]].copy()\ntest_feat = test[[ID_COL]].copy()","d960bdaf":"train_feat = pd.concat([\n    train_feat, train[FEAT_COLS]], axis=1)\ntest_feat = pd.concat([\n    test_feat, test[FEAT_COLS]], axis=1)\nuse_feat_cols.extend(FEAT_COLS)","1572fb71":"def run_train_and_inference(X, X_test, y, use_model, model_params, train_params, seed_list, n_splits):\n    \n    oof_pred_arr = np.zeros(len(X))\n    test_pred_arr = np.zeros(len(X_test))\n    feature_importances = pd.DataFrame()\n    score_list = []\n    \n    for seed in seed_list:\n        if use_model == \"cat\":\n            model_params['random_state'] = seed\n        else:\n            model_params[\"seed\"] = seed\n        kf = KFold(n_splits=n_splits, shuffle=True, random_state=seed)\n        tmp_oof_pred = np.zeros(len(X))\n        tmp_test_pred = np.zeros(len(X_test))\n\n        for fold, (trn_idx, val_idx) in enumerate(kf.split(X, y)):\n            print(\"*\" * 100)\n            print(f\"Seed: {seed} - Fold: {fold}\")\n            X_trn = X.loc[trn_idx].reset_index(drop=True)\n            X_val = X.loc[val_idx].reset_index(drop=True)\n            y_trn = y[trn_idx]\n            y_val = y[val_idx]\n\n            model = TreeModel(model_type=use_model)\n            with timer(prefix=\"Model training\"):\n                model.train(\n                    params=model_params, X_train=X_trn, y_train=y_trn,\n                    X_val=X_val, y_val=y_val, train_params=train_params)\n            fi_tmp = pd.DataFrame()\n            fi_tmp[\"feature\"] = model.feature_names_\n            fi_tmp[\"importance\"] = model.feature_importances_\n            fi_tmp[\"fold\"] = fold\n            fi_tmp[\"seed\"] = seed\n            feature_importances = feature_importances.append(fi_tmp)\n\n            val_pred = model.predict(X_val)\n            score = mean_squared_error(y_val, val_pred, squared=False)\n            print(f\"score: {score:.5f}\")\n            score_list.append([seed, fold, score])\n            tmp_oof_pred[val_idx] = val_pred\n            tmp_test_pred += model.predict(X_test)\n            \n        oof_score = mean_squared_error(y, tmp_oof_pred, squared=False)\n        print(f\"oof score: {oof_score: 5f}\")\n        score_list.append([seed, \"oof\", oof_score])\n\n        oof_pred_arr += tmp_oof_pred\n        test_pred_arr += tmp_test_pred \/ n_splits\n\n    oof_pred_arr \/= len(seed_list)\n    test_pred_arr \/= len(seed_list)\n    \n    oof_score = mean_squared_error(y, oof_pred_arr, squared=False)\n    score_list.append([\"avg\", \"oof\", oof_score])\n    score_df = pd.DataFrame(\n        score_list, columns=[\"seed\", \"fold\", \"rmse score\"])\n    \n    return oof_pred_arr, test_pred_arr, score_df, feature_importances","76a4034c":"X = train_feat[use_feat_cols]\nX_test = test_feat[use_feat_cols]\n\ny = train[TGT_COL].values\n\nprint(f\"train_feat: {X.shape}, test_feat: {X_test.shape}\")","629652a9":"oof_pred_lgb, test_pred_lgb, score_lgb, feat_imps_lgb = run_train_and_inference(\n    X, X_test, y, \"lgb\", MODEL_PARAMS[\"lgb\"], TRAIN_PARAMS[\"lgb\"], RANDOM_SEED_LIST, N_SPLITS)","79f8d977":"score_lgb","10ef4890":"score_lgb.loc[score_lgb.fold == \"oof\"]","36d77def":"order = list(feat_imps_lgb.groupby(\"feature\").mean().sort_values(\"importance\", ascending=False).index)\nplt.figure(figsize=(10, 10))\nsns.barplot(x=\"importance\", y=\"feature\", data=feat_imps_lgb, order=order)\nplt.title(\"{} importance\".format(\"lgb\"))\nplt.tight_layout()","ba203fb2":"oof_pred_xgb, test_pred_xgb, score_xgb, feat_imps_xgb = run_train_and_inference(\n    X, X_test, y, \"xgb\", MODEL_PARAMS[\"xgb\"], TRAIN_PARAMS[\"xgb\"], RANDOM_SEED_LIST, N_SPLITS)","0381e963":"score_xgb","dd87e70c":"score_xgb.loc[score_xgb.fold == \"oof\"]","9d2c45ca":"order = list(feat_imps_xgb.groupby(\"feature\").mean().sort_values(\"importance\", ascending=False).index)\nplt.figure(figsize=(10, 10))\nsns.barplot(x=\"importance\", y=\"feature\", data=feat_imps_xgb, order=order)\nplt.title(\"{} importance\".format(\"xgb\"))\nplt.tight_layout()","07c3143f":"oof_pred_cat, test_pred_cat, score_cat, feat_imps_cat = run_train_and_inference(\n    X, X_test, y, \"cat\", MODEL_PARAMS[\"cat\"], TRAIN_PARAMS[\"cat\"], RANDOM_SEED_LIST, N_SPLITS)","3516dfdc":"score_cat","8a7927f4":"score_cat","20f07415":"score_cat.loc[score_cat.fold == \"oof\"]","bf45fb58":"order = list(feat_imps_cat.groupby(\"feature\").mean().sort_values(\"importance\", ascending=False).index)\nplt.figure(figsize=(10, 10))\nsns.barplot(x=\"importance\", y=\"feature\", data=feat_imps_cat, order=order)\nplt.title(\"{} importance\".format(\"cat\"))\nplt.tight_layout()","a41864aa":"model_names = [\"lgb\", \"xgb\", \"cat\"]","449c7741":"# # prediction for oof\npd.DataFrame(\n    np.corrcoef([\n        oof_pred_lgb,\n        oof_pred_xgb,\n        oof_pred_cat\n    ]),\n    columns=model_names, index=model_names)","6d1431a7":"# # prediction for test\npd.DataFrame(\n    np.corrcoef([\n        test_pred_lgb,\n        test_pred_xgb,\n        test_pred_cat\n    ]),\n    columns=model_names, index=model_names)","dcef6f98":"oof_pred_avg = (oof_pred_lgb + oof_pred_xgb + oof_pred_cat) \/ 3\noof_score_avg = mean_squared_error(y, oof_pred_avg, squared=False)\n\nprint(f\"oof score avg: {oof_score_avg:.5f}\")","13252fca":"test_pred_avg = (test_pred_lgb + test_pred_xgb + test_pred_cat) \/ 3","5f5d5630":"sub = smpl_sub.copy()\nsub[TGT_COL] = test_pred_avg\n\nsub.to_csv(\"submission.csv\", index=False)\n\nsub.head()","f3b5ee30":"## import libraries","a61149c8":"## Feature Engineering","fee430ae":"### check correlation","55da1d19":"# About\n* GBDT Models baseline\n    * LightGBM, XGBoost, CatBoost\n    * each model is trained by 5 seeds and 5 folds cross validation \n* no feature engineering\n* inference test by averaging 3 GBDT Models","d31322b8":"## read data","64f99231":"## Training","4550b030":"### averaging","60782a96":"# Prepare","b5462b15":"## Make submission","6add9f07":"## Config ","6424c7f2":"### XGBoost","6d0310ee":"### Ensemble LGB, XGB, Cat","e38f8a19":"### raw features","396c4884":"# Training & Inference","9dd54de2":"### LightGBM","4fb82ff8":"## Definition","f3405d73":"### CatBoost"}}