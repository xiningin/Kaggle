{"cell_type":{"7cf7c2c1":"code","54024e9e":"code","2da64696":"code","688f4ffa":"code","31c5c13c":"code","19b642aa":"code","59377eb9":"code","3e1f203a":"code","81fc9765":"code","bad0409e":"code","ee223193":"code","05860d8f":"code","23e50981":"code","00fc661e":"code","51412cca":"code","82ee37ca":"code","7f119d3c":"code","eeb88d8b":"code","9b120eb6":"code","7a86f72c":"code","37b91cdd":"code","3f1fecfa":"code","0bc97dc9":"code","07e356b6":"code","a4702d46":"code","e509e4b0":"code","14f1ad86":"code","012fd1db":"code","2f983b97":"code","b5165ced":"code","b0191f0d":"code","f8934be6":"code","b3f50dcc":"code","feb2f3b1":"code","4e08a5ed":"code","1fe23294":"code","5cc6bbf8":"code","65f8b53b":"code","9367dbde":"code","9ebeacca":"code","8bd4fd39":"code","62097251":"code","25fb57b7":"code","5e5dd82c":"code","f7fc4373":"code","8c3baa61":"code","f9bd4b42":"code","1322febf":"code","82005ab5":"code","e85726c2":"markdown","2daf62ec":"markdown","daa59712":"markdown","b4881459":"markdown","780d9334":"markdown","b3d657d6":"markdown","a833cdc8":"markdown","edaebdd9":"markdown","03f822ee":"markdown","e56cf7da":"markdown","14c1974a":"markdown","a90f54f7":"markdown","fb82d4a5":"markdown","680cbe32":"markdown","35cd5998":"markdown","19a1a677":"markdown","84e22f1b":"markdown","cbeb1a6b":"markdown","1570b67f":"markdown","0fefabef":"markdown","75d09d15":"markdown","2c713a0f":"markdown","e8032c47":"markdown","ad110589":"markdown","4cef8a61":"markdown","d71f3c70":"markdown","a9817826":"markdown","e07f36d2":"markdown","6969b553":"markdown","417e860b":"markdown","5eddfeb9":"markdown","4da63ee2":"markdown","30593f83":"markdown","9bfb5088":"markdown","e1a11f2f":"markdown","55b16955":"markdown","5e53462b":"markdown"},"source":{"7cf7c2c1":"pip install chart_studio","54024e9e":"import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport squarify\nfrom wordcloud import WordCloud\nimport plotly.graph_objs as go","2da64696":"from sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.naive_bayes import BernoulliNB\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nimport xgboost as xgb\nfrom sklearn import metrics","688f4ffa":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","31c5c13c":"data = pd.read_csv('\/kaggle\/input\/passenger-list-for-the-estonia-ferry-disaster\/estonia-passenger-list.csv')","19b642aa":"data.head()","59377eb9":"data.shape","3e1f203a":"data.info()","81fc9765":"data.drop('PassengerId',axis=1,inplace=True)","bad0409e":"data.boxplot(column=['Age'])","ee223193":"data['Fullname'] = data['Firstname'] + \" \" + data['Lastname']\ndata.drop(['Firstname','Lastname'], axis=1, inplace=True)","05860d8f":"data.head()","23e50981":"data['Category'] = data['Category'].replace('P',0)\ndata['Category'] = data['Category'].replace('C',1)","00fc661e":"data['Sex'] = data['Sex'].replace('M',0)\ndata['Sex'] = data['Sex'].replace('F',1)","51412cca":"print(max(data['Age']))\nprint(min(data['Age']))","82ee37ca":"data['Age_Category'] = 0\n\nfor i in data.Age.index:\n    if data['Age'][i] >=0 and data['Age'][i]<8:        #[0-7]\n        data['Age_Category'][i]='0-7'\n    elif data['Age'][i] >=8 and data['Age'][i]<16:     #[8-15]\n        data['Age_Category'][i]='8-15'\n    elif data['Age'][i] >=16 and data['Age'][i]<24:    #[16-23]\n        data['Age_Category'][i]='16-23'\n    elif data['Age'][i] >=24 and data['Age'][i]<32:    # [24-31]\n        data['Age_Category'][i]='24-31'\n    elif data['Age'][i] >=32 and data['Age'][i]<40:    #[32-39]\n        data['Age_Category'][i]='32-39'\n    elif data['Age'][i] >=40 and data['Age'][i]<48:    #[40-47]\n        data['Age_Category'][i]='40-47'\n    elif data['Age'][i] >=48 and data['Age'][i]<56:    #[48-55]\n        data['Age_Category'][i]='48-55'\n    elif data['Age'][i] >=56 and data['Age'][i]<64:    #[56-63]\n        data['Age_Category'][i]='56-63'\n    elif data['Age'][i] >=64 and data['Age'][i]<72:    #[64-71]\n        data['Age_Category'][i]='64-71'\n    elif data['Age'][i] >=72 and data['Age'][i]<80:    #[72-79]\n        data['Age_Category'][i]='72-79'\n    else:                                              #[80-87]\n        data['Age_Category'][i]='60+'","7f119d3c":"df = px.data.tips()\nfig = px.sunburst(data, path=['Age_Category', 'Survived', 'Country'], values='Age',title='Dont Forget to Click Chart to Examine Deeply' )\nfig.show()","eeb88d8b":"def bar_plot(column_name,data):\n    plt.figure(figsize=(8,8))\n    ax = sns.countplot(column_name, data=data)\n    ax.set_xlabel(column_name)\n    ax.set_ylabel('Frequency')\n    print(data[column_name].value_counts())","9b120eb6":"bar_plot('Country',data)","7a86f72c":"print('Sex (0) = Male')\nprint('Sex (1) = Female')\nbar_plot('Sex',data)","37b91cdd":"bar_plot('Survived',data)","3f1fecfa":"bar_plot('Age_Category',data=data)","0bc97dc9":"def relationship_plot(column_name,hue_name,data):\n    plt.figure(figsize=(8,8))\n    ax = sns.countplot(column_name,hue=hue_name,data=data)\n    ax.set_xlabel(column_name)\n    ax.set_ylabel('Frequency')","07e356b6":"print('Sex (0) = Male')\nprint('Sex (1) = Female')\nrelationship_plot(column_name='Survived',hue_name='Sex',data=data)","a4702d46":"relationship_plot(column_name='Category',hue_name='Survived', data=data)","e509e4b0":"plt.figure(figsize = (20, 12))\nsquarify.plot(sizes = data.Country.value_counts().values, alpha = 0.8,\n              label = data.Country.unique())\nplt.title('Most Common Regions', fontsize = 20)\nplt.axis('off')\nplt.show()","14f1ad86":"x2011 = data.Country\nplt.subplots(figsize=(8,8))\nwordcloud = WordCloud(\n                          background_color='white',\n                          width=512,\n                          height=384\n                         ).generate(\" \".join(x2011))\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.show()","012fd1db":"country_names = dict(data['Country'].value_counts()).keys()\ncountry_cases = data['Country'].value_counts().tolist()\n\ncountry_df = pd.DataFrame()\ncountry_df['Country'] = country_names\ncountry_df['journey'] = country_cases\ncountry_df.head()","2f983b97":"country_df.Country.unique()","b5165ced":"country_df['Country'] = country_df.replace('Sweden','SWE')\ncountry_df['Country'] = country_df.replace('Estonia','EST')\ncountry_df['Country'] = country_df.replace('Latvia','LVA')\ncountry_df['Country'] = country_df.replace('Finland','FIN')\ncountry_df['Country'] = country_df.replace('Russia','RUS')\ncountry_df['Country'] = country_df.replace('Norway','NOR')\ncountry_df['Country'] = country_df.replace('Germany','DEU')\ncountry_df['Country'] = country_df.replace('Denmark','DNK')\ncountry_df['Country'] = country_df.replace('Lithuania','LTU')\ncountry_df['Country'] = country_df.replace('Great Britain','GBR')\ncountry_df['Country'] = country_df.replace('Morocco','MAR')\ncountry_df['Country'] = country_df.replace('Netherlands','NLD')\ncountry_df['Country'] = country_df.replace('Canada','CAN')\ncountry_df['Country'] = country_df.replace('Belarus','BLR')\ncountry_df['Country'] = country_df.replace('France','FRA')\ncountry_df['Country'] = country_df.replace('Nigeria','NGA')","b0191f0d":"country_df","f8934be6":"fig = px.choropleth(country_df, locations=\"Country\",\n                    color=\"journey\", # lifeExp is a column of gapminder\n                    hover_name=\"Country\", # column to add to hover information\n                    color_continuous_scale=px.colors.sequential.Plasma)\nfig.show()","b3f50dcc":"sns.swarmplot(x='Category',y='Age',hue='Survived',data=data)\nplt.show()","feb2f3b1":"data_encoded = pd.get_dummies(data['Country'],prefix_sep = '_')\ndata = data.drop(['Country'],axis=1)\ndata = pd.concat([data, data_encoded], axis=1)","4e08a5ed":"y=data['Survived']\nX=data.drop(['Survived','Fullname','Age_Category'], axis=1)","1fe23294":"X.Age = (X.Age - min(X.Age)) \/ (max(X.Age)- min(X.Age))","5cc6bbf8":"X","65f8b53b":"x_train, x_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)","9367dbde":"mnb = MultinomialNB()\nmnb.fit(x_train,y_train)\ny_pred = mnb.predict(x_test)\nprint(metrics.classification_report(y_test,y_pred))","9ebeacca":"bnb = BernoulliNB()\nbnb.fit(x_train,y_train)\ny_pred = bnb.predict(x_test)\nprint(metrics.classification_report(y_test,y_pred))","8bd4fd39":"score_list = []\neach_list = np.array([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\nfor each in range (1,15):\n    knn = KNeighborsClassifier(n_neighbors=each)\n    knn.fit(x_train,y_train)\n    score_list=(knn.score(x_test,y_test))\n    print(\"KNN de {} komsu alinirsa accuracy : {} \".format(each,score_list))","62097251":"lr= LogisticRegression()\nlr.fit(x_train,y_train)\ny_pred = lr.predict(x_test)\nprint(metrics.classification_report(y_test,y_pred))","25fb57b7":"sgdc = SGDClassifier(max_iter=1000)\nsgdc.fit(x_train,y_train)\ny_pred = sgdc.predict(x_test)\nprint(metrics.classification_report(y_test,y_pred))","5e5dd82c":"svm = SVC()\nsvm.fit(x_train,y_train)\ny_pred = svm.predict(x_test)\nprint(metrics.classification_report(y_test,y_pred))","f7fc4373":"dt = DecisionTreeClassifier()\ndt.fit(x_train,y_train)\ny_pred = dt.predict(x_test)\nprint(metrics.classification_report(y_test,y_pred))","8c3baa61":"rf = RandomForestClassifier(max_depth=50)\nrf.fit(x_train,y_train)\ny_pred = rf.predict(x_test)\nprint(metrics.classification_report(y_test,y_pred))","f9bd4b42":"gbcs = GradientBoostingClassifier()\ngbcs.fit(x_train,y_train)\ny_pred = gbcs.predict(x_test)\nprint(metrics.classification_report(y_test,y_pred))","1322febf":"adabc = AdaBoostClassifier()\nadabc.fit(x_train,y_train)\ny_pred = adabc.predict(x_test)\nprint(metrics.classification_report(y_test,y_pred))","82005ab5":"clf_xgb = xgb.XGBClassifier()\nclf_xgb.fit(x_train, y_train)\ny_pred = clf_xgb.predict(x_test)\nprint(metrics.classification_report(y_test,y_pred))","e85726c2":"# Import Libraries","2daf62ec":"## Ramdom Forest Classifier ","daa59712":"## Decision Tree Classifier","b4881459":"category P = 0\ncategory C = 1","780d9334":"## Prepare 'Sex' column","b3d657d6":"## Multinomial Naive Bayes Classifier","a833cdc8":"# Read & Check Data","edaebdd9":"## Most Common Regions","03f822ee":"Class size formule in statistic : \n-                                  k = 1 + 3.3 * log (n) \n-                                  k = 1 + 3.3 * log (989)\n-                                  k = 1 + 3.3 * 2.9951\n-                                  k = 1 + 9.8838\n-                                  k = 10.8838 \n-                                  we can choose 10 or 11. I will choose 11.\n\n- (87 - 0)\/11 = 7.9090\n- round(7.9090) = 8\nSo it's looking like above :\n- k=1  [0-7]\n- k=2  [8-15]\n- k=3  [16-23]\n- k=4  [24-31]\n- k=5  [32-39]\n- k=6  [40-47]\n- k=7  [48-55]\n- k=8  [56-63]\n- k=9  [64-71]\n- k=10 [72-79]\n- k=11 [80-87]","e56cf7da":"## Category - Survived Relationship","14c1974a":"## Gradient Boosting Classifier","a90f54f7":"# EDA","fb82d4a5":"## Ada Boost Classifier","680cbe32":"- Dataset Information\n- Import Libraries\n- Read & Check Data\n- EDA\n- Classification Models","35cd5998":"## Survived count ","19a1a677":"# Dataset Information\n\n- Dataset Name      : MS Estonia Disaster Passenger List\n- Dataset Contain   : The full list of all passengers and crew members aboard the MS Estonia.\n- Dataset Publisher : Christian Lillelund\n\n- Dataset Columns:\n- - PassengerId\n- - Country\n- - Firstname\n- - Lastname\n- - Sex\n- - Age\n- - Category\n- - Survived","84e22f1b":"## Survived - Sex Relationship","cbeb1a6b":"## Logistic Regression ","1570b67f":"## Support Vector Classifier","0fefabef":"## Prepare 'Category' column","75d09d15":"## K- Nearest Neighboors Classifier","2c713a0f":"![estonia-ferry-wikimedia.jpg](attachment:estonia-ferry-wikimedia.jpg)","e8032c47":"## Category - Age - Survived","ad110589":"## Add Age Category","4cef8a61":"## Train-Test Split","d71f3c70":"## Choropleth Map","a9817826":"## Check age outliers","e07f36d2":"## Age Category count","6969b553":"# Classification Models","417e860b":"## Bernoulli Naive Bayes Classifier","5eddfeb9":"## Drop 'PassengerId'","4da63ee2":"# Contents","30593f83":"## One-Hot Encoded Countries","9bfb5088":"## Sex Count ","e1a11f2f":"## XGBoost Classifier","55b16955":"## Stochastic Gradient Descent Classifier","5e53462b":"## Most Countries"}}