{"cell_type":{"171141b3":"code","a79f1e43":"code","5296bdba":"code","6332a599":"code","20d423be":"code","2300a657":"code","90cb7443":"code","f669607d":"code","5be3de03":"code","ae720a32":"code","9a1f214a":"code","79f05479":"code","aa21e625":"code","85b2c87b":"code","63b5e912":"code","c7f9b8cc":"code","bfe756f4":"code","ca5a9e4a":"code","c3d2ae51":"markdown","a4b8f8c3":"markdown","2e17f2ee":"markdown"},"source":{"171141b3":"# \uae30\uc874 \ucf54\ub4dc\uc640 \ucc28\ubcc4\uc810 : \n# \ud30c\ub77c\ubbf8\ud130 \ubcc0\uacbd  \n# NN \uc7ac\uc124\uacc4  \n# \ub370\uc774\ud130 \uc804\ucc98\ub9ac \ubd80\ubd84 \ubcc0\uacbd  \n# \ub808\uc774\uc5b4 \ucd94\uac00","a79f1e43":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5296bdba":"import pandas as pd\nimport numpy as np\n\nimport torch\nimport torchvision.datasets as data\nimport torchvision.transforms as transforms\nimport random\n\nfrom sklearn import preprocessing","6332a599":"device = 'cuda' if torch.cuda.is_available() else 'cpu'\n\nrandom.seed(777)\ntorch.manual_seed(777)\nif device == 'cuda':\n  torch.cuda.manual_seed_all(777)","20d423be":"# \ud559\uc2b5 \ud30c\ub77c\ubbf8\ud130 \uc124\uc815\nlearning_rate = 0.001\ntraining_epochs = 150\nbatch_size = 100","2300a657":"train=pd.read_csv('\/kaggle\/input\/2020-ai-term-project-18011759\/train.CSV',encoding='euc-kr',header=None, skiprows=1, usecols=range(0,8))\n\ntrain[0] = train[0]%10000\/100\n\ndata_x = train.loc[:, 2:6]\ndata_y = train.loc[:,[7]]\n\ndata_x = np.array(data_x)\ndata_y = np.array(data_y)\n\n\nx_train = torch.FloatTensor(data_x)\ny_train = torch.FloatTensor(data_y)","90cb7443":"train_dataset = torch.utils.data.TensorDataset(x_train, y_train)","f669607d":"data_loader = torch.utils.data.DataLoader(dataset=train_dataset,\n                                          batch_size=batch_size,\n                                          shuffle=True,\n                                          drop_last=True)","5be3de03":"# \ub808\uc774\uc5b4 \uc0dd\uc131\nlinear1 = torch.nn.Linear(5,512, bias = True)\nlinear2 = torch.nn.Linear(512,512, bias = True)\nlinear3 = torch.nn.Linear(512,512, bias = True)\nlinear4 = torch.nn.Linear(512,512, bias = True)\nlinear5 = torch.nn.Linear(512,1, bias = True)\nrelu = torch.nn.ReLU()\ndropout = torch.nn.Dropout(p=0.3)","ae720a32":"torch.nn.init.xavier_uniform_(linear1.weight)\ntorch.nn.init.xavier_uniform_(linear2.weight)\ntorch.nn.init.xavier_uniform_(linear3.weight)\ntorch.nn.init.xavier_normal_(linear4.weight)\ntorch.nn.init.xavier_normal_(linear5.weight)","9a1f214a":"model = torch.nn.Sequential(linear1, relu, dropout,\n                            linear2, relu, dropout,\n                            linear3, relu, dropout,\n                            linear4, relu, dropout,\n                            linear5).to(device)","79f05479":"# \uc190\uc2e4\ud568\uc218\uc640 \ucd5c\uc801\ud654 \ud568\uc218\nloss = torch.nn.MSELoss().to(device)\noptimizer = torch.optim.Adam(model.parameters(), lr=learning_rate) ","aa21e625":"total_batch = len(data_loader)\nfor epoch in range(training_epochs):\n    avg_cost = 0\n\n    for X, Y in data_loader:\n\n        X = X.to(device)\n        Y = Y.to(device)\n\n        # \uadf8\ub798\ub514\uc5b8\ud2b8 \ucd08\uae30\ud654\n        optimizer.zero_grad()\n        # Forward \uacc4\uc0b0\n        hypothesis = model(X)\n        # Error \uacc4\uc0b0\n        cost = loss(hypothesis, Y)\n        # Backparopagation\n        cost.backward()\n        # \uac00\uc911\uce58 \uac31\uc2e0\n        optimizer.step()\n\n        # \ud3c9\uade0 Error \uacc4\uc0b0\n        avg_cost += cost \/ total_batch\n\n    print('Epoch:', '%03d' % (epoch + 1), 'rate =', '{:.1f}'.format(avg_cost))\n\nprint('Learning finished')","85b2c87b":"test_xy = pd.read_csv(\"\/kaggle\/input\/2020-ai-term-project-18011759\/test.CSV\", encoding='euc-kr',header=None, skiprows=1, usecols=range(0,7))\ntest_xy[0] = test_xy[0]%10000\/100\n\nwith torch.no_grad():\n\n  x_test_data=test_xy.loc[:,2:6]\n  x_test_data=np.array(x_test_data)\n  x_test_data=torch.from_numpy(x_test_data).float().to(device)\n\n  prediction = model(x_test_data)","63b5e912":"correct_prediction = prediction.cpu().numpy().reshape(-1,1)","c7f9b8cc":"submit=pd.read_csv('\/kaggle\/input\/2020-ai-term-project-18011759\/submit_sample.CSV')","bfe756f4":"for i in range(len(correct_prediction)):\n  submit['total'][i]=correct_prediction[i].item()","ca5a9e4a":"submit.to_csv('submit.csv',index=False,header=True)","c3d2ae51":"## \ubaa8\ub378 \ud559\uc2b5","a4b8f8c3":"## \ubaa8\ub378 \ud14c\uc2a4\ud2b8\n","2e17f2ee":"## \ub370\uc774\ud130 \ub85c\ub354"}}