{"cell_type":{"f5c55fc2":"code","03b149bb":"code","83967497":"code","3bab17c8":"code","022862ab":"code","c59fceaa":"code","33fc7897":"code","e7f77ff2":"code","0fc447db":"code","d9fdd53b":"code","8ec6e563":"markdown","72bcaf39":"markdown","d27de13e":"markdown"},"source":{"f5c55fc2":"import os\nimport numpy as np\nimport pandas as pd\nfrom shutil import copyfile\n\nfrom sklearn.model_selection import train_test_split\n\nfrom keras.utils import to_categorical\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPooling2D\nfrom keras.layers import Activation, Dropout, Flatten, Dense\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ModelCheckpoint  \nfrom keras import applications\nfrom keras.layers import Conv2D, MaxPooling2D, GlobalAveragePooling2D\nfrom keras.layers import Dropout, Flatten, Dense\nfrom keras.models import Sequential","03b149bb":"!mkdir model\n!mkdir dataset\n!mkdir .\/dataset\/train\n!mkdir .\/dataset\/train\/NORMAL\n!mkdir .\/dataset\/train\/COVID-19\n!mkdir .\/dataset\/train\/Viral\\ Pneumonia\n!mkdir .\/dataset\/validation\n!mkdir .\/dataset\/validation\/NORMAL\n!mkdir .\/dataset\/validation\/COVID-19\n!mkdir .\/dataset\/validation\/Viral\\ Pneumonia\n!mkdir .\/dataset\/test\n!mkdir .\/dataset\/test\/NORMAL\n!mkdir .\/dataset\/test\/COVID-19\n!mkdir .\/dataset\/test\/Viral\\ Pneumonia","83967497":"def copy_samples(X, y, files_path, dataset_path, samples_path ):\n    train_df = pd.DataFrame(X, columns=['path'])\n    train_df['label'] = y\n    for index, row in train_df.iterrows():\n        row_split = row['path'].split('\/')\n        file_name = row_split[-1]\n        label = row_split[-2]\n        copyfile(f'{files_path}\/{label}\/{file_name}', f'{dataset_path}\/{samples_path}\/{label}\/{file_name}')","3bab17c8":"imagePaths = []\nfiles_path = '\/kaggle\/input\/covid19-radiography-database\/COVID-19 Radiography Database\/'\ndataset_path = '.\/dataset\/'\n\nfor dirname, _, filenames in os.walk(files_path):\n    for filename in filenames:\n        if (filename[-3:] == 'png'):\n            label = dirname.split('\/')[-1]\n            path = os.path.join(dirname, filename)\n            imagePaths.append((path, label))\n\nimagePaths[0]\n\ndf_paths = pd.DataFrame(imagePaths, columns=['path', 'label'])\n\n(X_train, X_validation, y_train, y_validation) = train_test_split(df_paths['path'], df_paths['label'],test_size=0.2, stratify=df_paths['label'], random_state=42)\n(X_validation, X_test, y_validation, y_test) = train_test_split(X_validation, y_validation,test_size=0.1, stratify=y_validation, random_state=42)\n\ncopy_samples(X_train, y_train, files_path, dataset_path, 'train')\ncopy_samples(X_validation, y_validation, files_path, dataset_path, 'validation')\ncopy_samples(X_test, y_test, files_path, dataset_path, 'test')","022862ab":"width = 224\nheight = 224\nbatch_size = 16\n\nVGG16_model = applications.VGG16(include_top=False, weights='imagenet')","c59fceaa":"def pre_process(path):\n\n    datagen = ImageDataGenerator(rescale=1. \/ 255)\n    generator = datagen.flow_from_directory(\n            path,\n            target_size=(width, height),\n            batch_size=batch_size,\n            class_mode=None, \n            shuffle=False)\n\n    data = VGG16_model.predict_generator(generator)\n    count_covid19 = len([file_path for file_path in generator.filepaths if 'COVID-19' in file_path])\n    count_normal = len([file_path for file_path in generator.filepaths if 'NORMAL' in file_path])\n    count_pneumonia = len([file_path for file_path in generator.filepaths if 'Viral Pneumonia' in file_path])\n    \n    labels = np.array([0] * count_covid19 + [1] * count_normal + [2] * count_pneumonia)\n    return data, to_categorical(labels)","33fc7897":"train_data, train_labels = pre_process('.\/dataset\/train')\nvalidation_data, validation_labels = pre_process('.\/dataset\/validation')\ntest_data, test_labels = pre_process('.\/dataset\/test')","e7f77ff2":"checkpoint_path = '\/kaggle\/working\/model\/weights.best.VGG16.h5'\ncheckpoint_dir = os.path.dirname(checkpoint_path)\n\nmodel = Sequential()\nmodel.add(Flatten(input_shape=train_data.shape[1:]))\nmodel.add(Dense(256, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(3, activation='softmax'))\n\nmodel.compile(optimizer='rmsprop',\n              loss='categorical_crossentropy',\n              metrics=['accuracy'])\n\ncheckpointer = ModelCheckpoint(filepath=checkpoint_path, verbose=1, save_best_only=True)\n\nhistory = model.fit(train_data, train_labels,\n          epochs=50,\n          batch_size=batch_size,\n          validation_data=(validation_data, validation_labels),\n          callbacks=[checkpointer],\n          verbose = 1)","0fc447db":"import matplotlib.pyplot as plt\nimport numpy\n\nplt.figure(figsize=(10,5)) \nplt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('Model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()\n\nplt.figure(figsize=(10,5)) \nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","d9fdd53b":"from sklearn.metrics import classification_report\n\nmodel.load_weights(checkpoint_path)\npredictions = model.predict(test_data, batch_size=16)\npredictions = np.argmax(predictions, axis=1)\nprint(classification_report(test_labels.argmax(axis=1), predictions, target_names=['Covid-19', 'Normal', 'Viral Pneumonia'], digits = 3))","8ec6e563":"## ETL\n\nThis section organizes the dataset in training, validation and test with the following structure for doing transformations directly from directory instead of memory.\n\n\n    dataset\/\n        train\/\n            NORMAL\/\n                NORMAL1.png\n                NORMAL2.png\n                ...\n            COVID-19\/\n                COVID-19-1.png\n                COVID-19-2.png\n                ...\n        validation\/\n            NORMAL\/\n                NORMAL1.png\n                NORMAL2.png\n                ...\n            COVID-19\/\n                COVID-19-1.png\n                COVID-19-2.png\n                ...","72bcaf39":"# CNN model for Covid-19 diagnosis with Chest X-ray Database\n\nThis model follows the example from the article [Building powerful image classification models using very little data](https:\/\/blog.keras.io\/building-powerful-image-classification-models-using-very-little-data.html) at [https:\/\/blog.keras.io\/](https:\/\/blog.keras.io\/)","d27de13e":"## Model creation\n\nThe CNN model is created on top of VGG16 architecture."}}