{"cell_type":{"ab97ff44":"code","42228512":"code","c4989110":"code","0c6831ee":"code","126adc1e":"code","887f0ade":"code","6475a5e4":"code","b98f50a9":"code","b3b2ef71":"code","3bc7b8b9":"code","6f1780fe":"code","4a2f6dcf":"code","df52e403":"code","73b72abd":"code","3f114e2c":"code","93f14368":"code","1378b779":"markdown","f80d290f":"markdown","d9b6540c":"markdown","249aeaeb":"markdown","21262cfb":"markdown","45340ba8":"markdown","5e7faebb":"markdown","fd0d6bd2":"markdown","820e2c73":"markdown","258510ad":"markdown","b0eaf7c0":"markdown","20d38858":"markdown","245c5ca0":"markdown","73540cf8":"markdown","0b81e2a8":"markdown","92312c47":"markdown","189bf7ff":"markdown","4aa0b903":"markdown","684c1afa":"markdown","1dc118ed":"markdown"},"source":{"ab97ff44":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nplt.rcParams['figure.figsize']=[12,9]\nmfin = pd.read_csv('..\/input\/moviefinance\/MovieFinances.csv', header=0)\nmfin.info()","42228512":"var = ['Budget($M)', 'Domestic Gross($M)', 'Worldwide Gross($M)']\nmfin.boxplot(column=var, figsize=[12,9])","c4989110":"mfin.boxplot(column='Budget($M)', figsize=[12,9])","0c6831ee":"mfin.boxplot(column='Domestic Gross($M)', figsize=[12,9])","126adc1e":"mfin.boxplot(column='Worldwide Gross($M)', figsize=[12,9])","887f0ade":"select = (mfin['Release Year']==2012)|(mfin['Release Year']==2013)|(mfin['Release Year']==2014) #construct the boolean variable. \nmfinsub = mfin.loc[select, :]\nmfinsub.boxplot(column=\"Budget($M)\", figsize=[12,9], by='Release Year') ","6475a5e4":"mfin.hist(figsize=[18,9], layout=(1,3), column=var, bins=50)","b98f50a9":"import seaborn as sb","b3b2ef71":"sb.violinplot(x='Release Year', y='Budget($M)', data=mfinsub)","3bc7b8b9":"grossYear = mfin.groupby('Release Year').mean()\ngrossYear[var].plot(figsize=(12,9), lw=5, color=['red', 'orange', 'purple'])","6f1780fe":"grossYear[var].plot(figsize=(12,27), subplots=True, layout=(3,1), lw=2, color=[(1,0,0), (0,1,0), (0,0,1)])","4a2f6dcf":"mfin.plot.scatter(x='Domestic Gross($M)', y='Worldwide Gross($M)')","df52e403":"sb.relplot(x='Domestic Gross($M)', y='Worldwide Gross($M)', hue='Month', size='Budget($M)', data=mfin, height=9, aspect=4\/3, palette='muted')","73b72abd":"grossYear","3f114e2c":"sb.heatmap(grossYear[var])","93f14368":"sb.heatmap(grossYear[var])\nplt.savefig(\"\/kaggle\/working\/heatmap.pdf\")","1378b779":"**Exercise** Construct a boxplot for Release Year. What does it tell you? ","f80d290f":"It is also possible to plot a set of histogram based on the values of a different (categorical) variables using the by keywords. Let say we want to construct a historgram of budget for Release Year 2015, 2016, and 2017.\n\nThis involves two tasks. The first tasks is to extract the data with release year in 2015, 2016 and 2017. We use the standard approach of constructing a *boolean* (true or false) variable to identify the rows that satisfy the criterion. Then we use that variable to extract the data using the *loc* method. \n\nThe boolean variable in this case utilises the _**OR**_ operator \"|\". Becasue we want movies that were released in 2012 OR 2013 OR 2014. We call this variable select. ","d9b6540c":"**Exercise:** Construct a set of histograms of \"Worldwide Gross\" by Release year 2001, 2002, 2003. ","249aeaeb":"## Violin Plot \n\nWhile boxplot is great to identify \"outlier\" and cluster of observations and histogram provides information on the shape of the distribution, *violin plot* combines both together. \n\nAn easy way to obtain a violin plot is to use the module [Seaborn](https:\/\/seaborn.pydata.org).\n\nWe first import the module. ","21262cfb":"Then we use the function [*violinplot*](https:\/\/seaborn.pydata.org\/generated\/seaborn.violinplot.html) in Seaborn. In this case, we construct a violinplot version of the histograms and boxplots we did for *Budget* by year 2012, 2013 and 2014. ","45340ba8":"## Saving the Plots\n\nGreat that we can create these plots and it is good that we have them in the notebook but how do we export them? Since both Seanborn and Pandas use matplotlib as the backend, we can utilise the [*savefig*](https:\/\/matplotlib.org\/stable\/api\/_as_gen\/matplotlib.pyplot.savefig.html) function. \n\nLet say we wish to save the heatmap above.","5e7faebb":"Becasue there are going to be three historgrams, the *layout* argument specifies how you want to layout the histograms. In this case, the three histograms is presented as $1\\times 3$ array i.e. 1 rows and 3 columns. \n\nThe *bins* argument specifies the \"resolution\" of the histogram i,e, the number of intervals (bins) given the range of values. The higher is the number of bins, the narrower is each intervals and thus higher \"resolution\". Too many bins, however, may result in intervals that have no observations. \n\n**Exercise:** \n1. Change the bins size to 400 and see what it does. \n2. Change the layout to (3,1). What do you think you need to do to make it looks better? **Hint:** Consider a new figsize. ","fd0d6bd2":"The values of all three variables increase over time. The interestingly there seems to be a dip in worldwide gross during late 70's and late 90's\n\nFor more information about different heatmap options see [here](https:\/\/seaborn.pydata.org\/generated\/seaborn.heatmap.html). \n\n**Exercise:** Construct a heatmap for the correlation matrix between the three variables. **Hint:** Look up how to construct a correlation matrix from a pandas dataframe. ","820e2c73":"## Scatter Plot\n\nScatter plot is a great way to explore potential relation between two variables. To construct a scatter plot between Domestic Gross and Worldwide Gross","258510ad":"**Exercise:** Construct line plots for the three variables by Year and Month. ","b0eaf7c0":"**Exercise:** Construct a scatter plot between Budget and Domestic Gross as well as Budget and Worldwide Gross. Do you think bigger is the budget the higher is the gross? \n\n### Relplot\n\nA popular extension to Scatterplot is *Relplot*, which allows grouping of variables in the plots as well as reflecting the values of a third variable by the size of the dot.  An example using [*relplot* function in Seaborn](https:\/\/seaborn.pydata.org\/generated\/seaborn.relplot.html) can be found below. \n\nIn this case, we are still plotting the gross variables against each other but we are separating the observations based on their released Months using different colors and the size of each dot represents the size of the movie's budget. ","20d38858":"The $x$ argument specified the variable that contains 'Release Year' (similar to the *by* argument in Pandas) while the $y$ argument is the variable in which we wish to construct the plot for. Again, there are many options for customisation. Please consult the documentation [here](https:\/\/seaborn.pydata.org\/generated\/seaborn.violinplot.html) for more details. \n\n**Exercise:** Create a violine plot for \"Worldwide Gross\" by Release year 2001, 2002, 2003.\n\n## Line Plot\n\nLine plot is useful to examine how the variable evolves over time. It is relatively simple to do with Pandas. Consider we wish to explore the mean o fBudget, Domestic Gross and World Gross over the years. ","245c5ca0":"# Data Visualisation \n\nThis notebook focus on constructing basic statistical data visualisation using Pandas. We will also explore Pandas's graphic backend [matplotlib](https:\/\/matplotlib.org) as well as introducing [Seaborn](https:\/\/seaborn.pydata.org) to expand our visualisation capability. \n\nBefore we do that, it is also important to acknowledge that there are many different modules available in Python for Data Visualisaiton. This includes [plotly](https:\/\/plotly.com) and [Bokeh](https:\/\/docs.bokeh.org\/en\/latest\/). The latter also makes it very easy to put together an interactive webapplication for users to explore different scenarios. For some quick examples see [here]( https:\/\/chansta-statistics.herokuapp.com) for some demonstrations on using Bokeh to explore normal and t distributions as well as the concept of correlation. \n\nIt is also important to note that this notebook barely scratches the surface of the world on data visusalistion, statistical data or otherwise. The modules mentioned above will each contain further inforamtion on how to learn more about data visualisation. Please feel free to explore. \n\nThe list of topics inlcude in this notebook are\n\n1. [Boxplot](https:\/\/pandas.pydata.org\/docs\/reference\/api\/pandas.DataFrame.boxplot.html)\n2. [Histogram](https:\/\/pandas.pydata.org\/docs\/reference\/api\/pandas.DataFrame.hist.html)\n3. [Violinplot](https:\/\/seaborn.pydata.org\/generated\/seaborn.violinplot.html) \n4. [Lineplot](https:\/\/pandas.pydata.org\/docs\/reference\/api\/pandas.DataFrame.plot.html)\n5. [Scatter plot](https:\/\/pandas.pydata.org\/docs\/reference\/api\/pandas.DataFrame.plot.scatter.html)\n6. [Heatmap](https:\/\/seaborn.pydata.org\/generated\/seaborn.heatmap.html)\n\n## Boxplot\n\nBoxplot can be constructed directly from a Pandas dataframe. To demonstrate we first import the necesary module and data. We will, again, utlise the MovieFinance.csv data. ","73540cf8":"This does not tell us much. Perhaps we can construct a heatmap. ","0b81e2a8":"Let's construct a boxplot for *Budget*, *Domestic Gross* and *Worldwide Gross*. ","92312c47":"We used a few addtional keywords here. *lw* controls the thickness of the lines, where *color* specifies the color of each line in terms of the [*RGB color model*](https:\/\/en.wikipedia.org\/wiki\/RGB_color_model). \n\nThe *plot* function also supports subplots argument which makes it easier to separate the plots. ","189bf7ff":"## Heatmap\n\nWhen the summary statistics is itself a large 2-dimensional data, such as a *correlation matrix*, it is often difficulties to detect any patterns. A *heatmap* may be one way to visual such data. \n\nAnother example is to consider the mean of the three variables, budget, Domestic Gross and Worldwide Gross for each year. The data we have in tabular form is stored in *grossYear*. ","4aa0b903":"## Histogram\n\nConstructing histogram is just as easy. Assuming we wish to examine the histograms of the three varibales. Further details on the various options with histograms can be found [here](https:\/\/pandas.pydata.org\/docs\/reference\/api\/pandas.DataFrame.hist.html).\n","684c1afa":"The *column* input is used to identify which variables (columns) you wish to construct a boxplot. The *figsize* argument controls the size of the plot. I tend to use the $4:3$ aspect ratio but that depends on your requirements.\n\nThere are many other options. For details see [here]((https:\/\/pandas.pydata.org\/docs\/reference\/api\/pandas.DataFrame.boxplot.html)).\n\nIn this case, all the boxplots are put together into one set of axis, so it makes the plots more difficult to read. We can divide them into three separate plots","1dc118ed":"The first line is to redraw the graph which output will be put to the *plt* object from matplotlib. Then we ask *plt* to save the output by specifying the filename (with path). The extension *pdf* indicates we wish the file to be a PDF file. We can also use PNG for graphical output. \n\nFor more inforamtion on savefig see [here](https:\/\/matplotlib.org\/stable\/api\/_as_gen\/matplotlib.pyplot.savefig.html). "}}