{"cell_type":{"fe842eda":"code","a4f358fa":"code","70ffb35a":"code","b7e88678":"code","25508e5a":"code","d4b2a179":"code","b590822f":"markdown","402bd7c1":"markdown","df59c2cd":"markdown","6f32e827":"markdown"},"source":{"fe842eda":"import numpy as np\nfrom copy import copy, deepcopy\n\nimport os\nimport json\nfrom pathlib import Path\n\nimport matplotlib.pyplot as plt\nfrom matplotlib import colors\n","a4f358fa":"\ndata_path = Path('\/kaggle\/input\/abstraction-and-reasoning-challenge\/')\ntraining_path   = data_path \/ 'training'\ntraining_tasks_list = sorted(os.listdir(training_path))\n\ndef get_matrix(task,i,train_or_test,input_or_output):\n    #get matrix from json structur\n    return task[train_or_test][i][input_or_output]\n\ndef readTasks(files_list,path,exampletype):\n    training_tasks   = {}\n    for i,taskname in enumerate(files_list):\n        training_tasks[i] = {}\n        training_tasks[i][\"filename\"] = taskname\n        training_tasks[i][\"file\"]     = str(path\/taskname)\n\n        with open(training_tasks[i][\"file\"], 'r') as f:\n            jtask = json.load(f)\n            for kind in ['train']: #,'test']:\n                matrix1_list = []\n                matrix2_list = []\n                num_exam = len(jtask[kind])\n                for j in range(num_exam):  \n                    matrix1_list.append(np.array(get_matrix(jtask,j,'train','input')))\n                    matrix2_list.append(np.array(get_matrix(jtask,j,'train','output')))\n                training_tasks[i][\"matrix1_list\"] = matrix1_list \n                training_tasks[i][\"matrix2_list\"] = matrix2_list \n    return training_tasks\n\ntraining_tasks   = readTasks(training_tasks_list,training_path,'training')\n                                    ","70ffb35a":"cmap = colors.ListedColormap(\n    ['#FFFFFF', '#0074D9','#FF4136','#2ECC40','#FFDC00',\n     '#AAAAAA', '#F012BE', '#FF851B', '#7FDBFF', '#870C25', '#000000'])\nnorm = colors.Normalize(vmin=0, vmax=10)\n# 0:white, 1:blue, 2:red, 3:greed, 4:yellow,\n# 5:gray, 6:magenta, 7:orange, 8:sky, 9:brown, 10,black\n\ndef plot_matrix(ax,matrix):\n    ax.imshow(matrix, cmap=cmap, norm=norm)\n    ax.grid(True,which='both',color='grey', linewidth=0.5)    \n    ax.set_yticks([x-0.5 for x in range(1+len(matrix))])\n    ax.set_xticks([x-0.5 for x in range(1+len(matrix[0]))])     \n    ax.set_xticklabels([])\n    ax.set_yticklabels([])\n    ","b7e88678":"def grow_ones(matrix_in):\n    # sums calculated one row at a time from y=0 and downwards\n    matrix  = matrix_in.copy()\n    for i in range(len(matrix)-2,-1,-1):\n        matrix[i] = (matrix[i] + matrix[i+1])*matrix[i] \n    return matrix\n\ndef rowIdentifyFrames(irow,matrix,frames,mindim):\n    if not 1 in matrix[irow]:\n        return False\n    if mindim < 3:\n        mindim = 3\n    dim1 = len(matrix[0])\n    j = 0                    # Error corrected ver 6 Tip from Higepon thank you\n    while j < dim1-1:\n        j += 1\n\n        if not matrix[irow][j] == 1:\n            continue\n        # go left and right. \n        height = 3    #lowest permissible height\n        while height >= 3:\n            jleft = j-1\n            found = False\n            while jleft >= 0:\n                if matrix[irow][jleft] == 0:\n                    break\n                elif matrix[irow][jleft] >= height:\n                    found = True\n                    break\n                else:\n                    jleft -=1\n            if not found:\n                break\n            jright = j+1\n            found = False\n            while jright < dim1:\n                if matrix[irow][jright] == 0:\n                    break\n                elif matrix[irow][jright] >= height:\n                    found = True\n                    break\n                else:\n                    jright +=1\n            if not found:\n                break\n            # check can close\n            found = True\n            for k in range(jleft+1,jright):\n                if matrix[irow+height-1][k]== 0:\n                    found = False\n                    break\n            # Are dimensions allowed ?\n            if found: \n                if height >= mindim and jright-jleft+1 >= mindim\\\n                    and not (irow == 0 and jleft == 0 and irow+height-1 == len(matrix)-1 and jright ==len(matrix[0])-1):\n                    frames.append((irow,irow+height-1,jleft,jright))\n                for k in range(j+1,dim1-2):   # new code  in ver 6\n                    if matrix[irow][k] > 1:\n                        jright = k \n                        break\n                j = jright\n                break\n            else:\n                if irow+height-1 < len(matrix)-1:\n                    height  += 1\n                else:\n                    height = 0\n    return False\n                    \ndef matrixIdentifyFrames(matrix,mindim):\n    frames = []\n    for i in range(len(matrix)):\n        rowIdentifyFrames(i,matrix,frames,mindim)\n    return frames\n\ndef unpad(matrix, pad):\n    nx, ny = matrix.shape                                                                                                                                                                                                                                                         \n    return  matrix[pad:nx-pad,pad:ny-pad]  \n\ndef matrixFrameObjectsFromBackground(matrix_in,backgroundcolor,mindim=3,maxcount=999):\n    pad_size = 1                #automatisk padding, fjernes igen\n    matrix_padded = np.pad(matrix_in, ((pad_size,pad_size),(pad_size,pad_size))\\\n                               , \"constant\", constant_values=backgroundcolor)\n        \n    matrix01 = (matrix_padded == backgroundcolor).astype(int)\n    matrix = grow_ones(matrix01)\n    frames = matrixIdentifyFrames(matrix,mindim)\n    for i in range(len(frames)):\n        frames[i] = (frames[i][0]-1,frames[i][1]-1,frames[i][2]-1,frames[i][3]-1)\n    return frames\n\ndef matrixIdentifyFramesOfColor(matrix_in,color,mindim=3,maxcount=999):\n    matrix01 = (matrix_in == color).astype(int)\n    matrix = grow_ones(matrix01)\n    frames = matrixIdentifyFrames(matrix,mindim)\n    return frames","25508e5a":"def plotFrameToMatrix(frame,matrix,color):\n#        print(\"plotting frame\",frame,\"color\",color)\n        # 4 sides\n        if frame[0] >= 0:\n            matrix[frame[0]:frame[0]+1,frame[2]+1:frame[3]] = color\n        if frame[1] < len(matrix):\n            matrix[frame[1]:frame[1]+1,frame[2]+1:frame[3]] = color\n        if frame[2] >= 0:\n            matrix[frame[0]+1:frame[1],frame[2]:frame[2]+1] = color\n        if frame[3] < len(matrix[0]):\n            matrix[frame[0]+1:frame[1],frame[3]:frame[3]+1] = color\n        # 4 corners\n        if frame[0] >= 0 and  frame[2] >= 0:\n            matrix[frame[0]:frame[0]+1,frame[2]:frame[2]+1] = color            \n        if frame[1] < len(matrix) and  frame[2] >= 0:\n            matrix[frame[1]:frame[1]+1,frame[2]:frame[2]+1] = color\n        if frame[0] >= 0 and  frame[3] < len(matrix[0]):\n            matrix[frame[0]:frame[0]+1,frame[3]:frame[3]+1] = color          \n        if frame[1] < len(matrix) and  frame[3] <len(matrix[0]):\n            matrix[frame[1]:frame[1]+1,frame[3]:frame[3]+1] = color\n    ","d4b2a179":"mindim   = 3\nmaxcount = 100\nplotrows = 4\nexample_text = \"\"\nexamples = [28,30,32,37,43,97,99,207]\nex_texts = [\"Frames, No Objects\",\"Objects, No Frames\",\"Objects, No Frames\",\"Objects, No Frames\",\"Both Frame and Objects\"\\\n              ,\"Objects, No Frames\",\"Both Frame and Objects\",\"Frames, Two very small Objects\"]\nexample_text = \"Frames and Objects\"\n\nfor itask,task in training_tasks.items():\n    if not itask in examples: \n        continue\n    else:\n        example_text = ex_texts[examples.index(itask)]\n        \n    plotsetup = False\n    matrix1_list = task[\"matrix1_list\"]\n    matrix2_list = task[\"matrix2_list\"]\n    for i in range(len(matrix1_list)):\n        if i > 2:\n            break\n        matrix1 = matrix1_list[i]\n        matrix2 = np.zeros_like(matrix1)\n        matrix2 = matrix1.copy()\n        matrix3 = np.zeros_like(matrix1)\n        matrix3 = matrix3 # + 10\n        matrix4 = matrix2_list[i]\n\n        backgroundcolor = 0\n        foundframes = False\n        if True:\n            color = backgroundcolor\n            objframes = matrixFrameObjectsFromBackground(matrix1,color,mindim=mindim,maxcount=999)\n            if color == backgroundcolor:\n                newcolor = 10\n            else:\n                newcolor = color\n            for frame in objframes:\n                foundframes = True\n                plotFrameToMatrix(frame,matrix2,newcolor)\n        \n        if True:\n            colors   = np.unique(matrix1, return_counts=False)\n            for color in colors:\n                if color == backgroundcolor:\n                    continue\n                frames    = matrixIdentifyFramesOfColor(matrix1,color,mindim=mindim,maxcount=999)\n                for frame in frames:\n                    foundframes = True\n                    plotFrameToMatrix(frame,matrix3,color)\n        if not foundframes and i == 0:\n            break\n        if not plotsetup:\n            plotsetup = True\n            print(\"Task no\",itask,\"-- \",example_text,\" --\")\n            fig, axs = plt.subplots(plotrows, 3, figsize=(3*3,3*2))\n        for k in range(plotrows):\n            r = k    #\/\/3\n            s = i%3\n            if k == 0:\n                plot_matrix(axs[r,s],matrix1)\n            elif k == 1:\n                plot_matrix(axs[r,s],matrix2)\n            elif k == 2:\n                plot_matrix(axs[r,s],matrix3)\n            elif k == 3:\n                plot_matrix(axs[r,s],matrix4)\n    if plotsetup:\n        plt.tight_layout()\n        plt.show() \n","b590822f":"### Plotting frame that can be partly outside the picture","402bd7c1":"## A few Test examples\nThe plots below has four rows for each task:\n\n1. Original matrix\n2. Objects identified and framed\n3. Identified frames in the given matrix\n4. The given solution to evaluate whether the identified stuff could be useful","df59c2cd":"## Identifying and Framing","6f32e827":"## Framing Objects and Finding Frames\nMany given examples seem to include some concept of 'Object'. This code tries to draw a frame around possible objects and thereby identifying them. The code finds the object by making frames from the backgroundcolor.\n\nFor objects of the same color to be identified seperately they must be one pixel apart. The object frame is also identified outside the picture area, but not drawn. This can give some visual interpretation challenges. \n\nSome given examples use a frame to point out features in the picture. Almost the same routine can also be used to find these frames (and some more).\n\nAgain I have to thank @Bo for his extremely nice plotting routines: https:\/\/www.kaggle.com\/boliu0\/visualizing-all-task-pairs-with-gridlines. I have changed the background color to white and introduced black (10) for my own markings. In the examples these frames are marked with back (10).\n\nWith these routines the aim seems to move a litlle closer. To be really useful parameters and perhaps the code will need some tweaking for specific usecases.\n\nTwo errors corrected in ver 6 - see comments in code below\n"}}