{"cell_type":{"bded12d1":"code","03f6d40e":"code","f743c6d7":"code","00163d94":"code","c87e8ceb":"code","31adbe2a":"code","28075d7f":"code","a3e9edc6":"code","fc837231":"code","c9d62675":"code","02e5278f":"code","6c0d8592":"code","3dd5b5b2":"code","d25edd9f":"markdown","6e2dac25":"markdown","b2c8bbf8":"markdown","80a014cf":"markdown","bed15f62":"markdown","c5958f6b":"markdown"},"source":{"bded12d1":"import numpy as np\nimport pandas as pd\n\nfrom sklearn.preprocessing import OneHotEncoder, StandardScaler\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import KFold\n\nfrom sklearn.linear_model import Ridge\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.neural_network import MLPRegressor\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\n\nimport warnings\nwarnings.filterwarnings(action='ignore')","03f6d40e":"data = pd.read_csv('..\/input\/university-salaries\/university-salaries\/salaries_final.csv')","f743c6d7":"data","00163d94":"data.info()","c87e8ceb":"def preprocess_inputs(df):\n    df = df.copy()\n    \n    # Drop Name column\n    df = df.drop('Name', axis=1)\n    \n    # Shuffle the data\n    df = df.sample(frac=1.0).reset_index(drop=True)\n    \n    # Split df into X and y\n    y = df['Base Pay']\n    X = df.drop('Base Pay', axis=1)\n    \n    return X, y","31adbe2a":"X, y = preprocess_inputs(data)","28075d7f":"X","a3e9edc6":"y","fc837231":"def build_pipeline(regressor):\n    \n    nominal_transformer = Pipeline(steps=[\n        ('onehot', OneHotEncoder(sparse=False, handle_unknown='ignore'))\n    ])\n    \n    preprocessor = ColumnTransformer(transformers=[\n        ('nominal', nominal_transformer, ['Primary Job Title', 'Department', 'College'])\n    ], remainder='passthrough')\n    \n    model = Pipeline(steps=[\n        ('preprocessor', preprocessor),\n        ('scaler', StandardScaler()),\n        ('regressor', regressor)\n    ])\n    \n    return model","c9d62675":"models = {\n    \"Linear Regression (Ridge)\": build_pipeline(Ridge()),\n    \"            Decision Tree\": build_pipeline(DecisionTreeRegressor()),\n    \"           Neural Network\": build_pipeline(MLPRegressor()),\n    \"            Random Forest\": build_pipeline(RandomForestRegressor()),\n    \"        Gradient Boosting\": build_pipeline(GradientBoostingRegressor())\n}","02e5278f":"def evaluate_model(model, X, y):\n    \n    kf = KFold(n_splits=5)\n    rmses = []\n    r2s = []\n    \n    for train_idx, test_idx in kf.split(X):\n        # Fit model\n        model.fit(X.iloc[train_idx, :], y.iloc[train_idx])\n        \n        # Make predictions\n        pred = model.predict(X.iloc[test_idx, :])\n        \n        # Calculate RMSE\n        rmse = np.sqrt(np.mean((y.iloc[test_idx] - pred)**2))\n        rmses.append(rmse)\n        \n        # Calculate R^2\n        r2 = 1 - (np.sum((y.iloc[test_idx] - pred)**2) \/ np.sum((y.iloc[test_idx] - y.iloc[test_idx].mean())**2))\n        r2s.append(r2)\n        \n    # Return average RMSE and R^2\n    return np.mean(rmses), np.mean(r2s)","6c0d8592":"for name, model in models.items():\n    print(name + \" RMSE: {:.2f}\".format(evaluate_model(model, X, y)[0]))","3dd5b5b2":"for name, model in models.items():\n    print(name + \" R^2: {:.5f}\".format(evaluate_model(model, X, y)[1]))","d25edd9f":"# Task for Today  \n\n***\n\n## University Salary Prediction  \n  \nGiven *data about university employees*, let's try to predict the **salary** for a given employee.  \n  \nWe will use a variety of regression models to make our predictions.","6e2dac25":"# Building Pipeline","b2c8bbf8":"# Getting Started","80a014cf":"# Data Every Day  \n\nThis notebook is featured on Data Every Day, a YouTube series where I train models on a new dataset each day.  \n\n***\n\nCheck it out!  \nhttps:\/\/youtu.be\/qmPJeMvQOkE","bed15f62":"# Preprocessing","c5958f6b":"# Model Selection (K-Fold CV)"}}