{"cell_type":{"af0694e0":"code","a0679281":"code","1bd3b245":"code","815a4473":"code","0fa9df5f":"code","2420f97a":"code","a29373d8":"code","6b23c06f":"code","6b583dae":"code","e7951e4d":"code","9ef00eb8":"code","cb6ec7ae":"code","98688e49":"code","8b0ed095":"code","af2b970f":"code","4d44e66c":"code","7142d9fb":"code","81468d52":"code","39cf0d1e":"code","af57a111":"code","f6486751":"code","066735d8":"code","55359dd9":"code","cb40507f":"code","0bfd5f2e":"code","d2dc6703":"code","4120673a":"code","9d7d67ca":"code","6c2848f4":"code","34fb9464":"code","d8919e00":"code","dba869cd":"code","79e44284":"markdown","7e5de018":"markdown","b388ee1f":"markdown","d9425ef2":"markdown"},"source":{"af0694e0":"import os\nimport numpy as np\nimport pandas as pd\nimport random\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom contextlib import contextmanager\nfrom time import time\nfrom tqdm import tqdm\nimport lightgbm as lgbm\nimport category_encoders as ce\n\nfrom tensorflow.keras.utils import to_categorical\nfrom sklearn.metrics import classification_report, log_loss, accuracy_score\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import KFold","a0679281":"data0 = pd.read_csv(\"..\/input\/car-selling-price-prediction\/CarSalePrice.csv\")\ndata0[0:2].T","1bd3b245":"data0.columns","815a4473":"data0.info()","0fa9df5f":"df=data0\nfrom sklearn.preprocessing import LabelEncoder\nfor c in df.columns:\n    if df[c].dtype=='object': \n        df[c] = df[c].fillna('N')\n        lbl = LabelEncoder()\n        lbl.fit(list(df[c].values))\n        df[c] = lbl.transform(df[c].values)","2420f97a":"data1=df\ndata1[0:2].T","a29373d8":"data1.columns","6b23c06f":"target=['SellingPrice']\ndataY0=data1[target]\ndataX=data1.drop([target[0]],axis=1)","6b583dae":"df_columns = list(dataX.columns)\nprint(df_columns)","e7951e4d":"dataX=np.array(dataX)\ndataY0=np.array(dataY0)","9ef00eb8":"m=len(data1)\nM=list(range(m))\nrandom.seed(2021)\nrandom.shuffle(M)\n\ntrainX=dataX[M[0:(m\/\/4)*3]]\ntrainY0=dataY0[M[0:(m\/\/4)*3]]\ntestX=dataX[M[(m\/\/4)*3:]]\ntestY0=dataY0[M[(m\/\/4)*3:]]","cb6ec7ae":"print(len(trainX))\nprint(len(testX))","98688e49":"train_df=pd.DataFrame(trainX)\ntest_df=pd.DataFrame(testX)","8b0ed095":"train_df.columns=df_columns\ntest_df.columns=df_columns","af2b970f":"def create_numeric_feature(input_df):\n    use_columns = df_columns \n    return input_df[use_columns].copy()","4d44e66c":"from contextlib import contextmanager\nfrom time import time\n\nclass Timer:\n    def __init__(self, logger=None, format_str='{:.3f}[s]', prefix=None, suffix=None, sep=' '):\n\n        if prefix: format_str = str(prefix) + sep + format_str\n        if suffix: format_str = format_str + sep + str(suffix)\n        self.format_str = format_str\n        self.logger = logger\n        self.start = None\n        self.end = None\n\n    @property\n    def duration(self):\n        if self.end is None:\n            return 0\n        return self.end - self.start\n\n    def __enter__(self):\n        self.start = time()\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.end = time()\n        out_str = self.format_str.format(self.duration)\n        if self.logger:\n            self.logger.info(out_str)\n        else:\n            print(out_str)","7142d9fb":"def to_feature(input_df):\n\n    processors = [\n        create_numeric_feature,\n    ]\n    \n    out_df = pd.DataFrame()\n    \n    for func in tqdm(processors, total=len(processors)):\n        with Timer(prefix='create' + func.__name__ + ' '):\n            _df = func(input_df)\n\n        assert len(_df) == len(input_df), func.__name__\n        out_df = pd.concat([out_df, _df], axis=1)\n        \n    return out_df","81468d52":"train_feat_df = to_feature(train_df)\ntest_feat_df = to_feature(test_df)","39cf0d1e":"train_feat_df","af57a111":"test_feat_df","f6486751":"import lightgbm as lgbm\nfrom sklearn.metrics import mean_squared_error\n\ndef fit_lgbm(X, y, cv, \n             params: dict=None, \n             verbose: int=50):\n\n    if params is None:\n        params = {}\n\n    models = []\n    oof_pred = np.zeros_like(y, dtype=np.float)\n\n    for i, (idx_train, idx_valid) in enumerate(cv): \n        x_train, y_train = X[idx_train], y[idx_train]\n        x_valid, y_valid = X[idx_valid], y[idx_valid]\n\n        clf = lgbm.LGBMRegressor(**params)\n        \n        with Timer(prefix='fit fold={} '.format(i)):\n            clf.fit(x_train, y_train, \n                    eval_set=[(x_valid, y_valid)],  \n                    early_stopping_rounds=100,\n                    verbose=verbose)\n\n        pred_i = clf.predict(x_valid)\n        oof_pred[idx_valid] = pred_i\n        models.append(clf)\n        print(f'Fold {i} RMSLE: {mean_squared_error(y_valid, pred_i) ** .5:.4f}')\n        print()\n\n    score = mean_squared_error(y, oof_pred) ** .5\n    print('-' * 50)\n    print('FINISHED | Whole RMSLE: {:.4f}'.format(score))\n    return oof_pred, models","066735d8":"params = {\n    'objective': 'rmse', \n    'learning_rate': .1,\n    'reg_lambda': 1.,\n    'reg_alpha': .1,\n    'max_depth': 5, \n    'n_estimators': 10000, \n    'colsample_bytree': .5, \n    'min_child_samples': 10,\n    'subsample_freq': 3,\n    'subsample': .9,\n    'importance_type': 'gain', \n    'random_state': 71,\n    'num_leaves': 62\n}","55359dd9":"y = trainY0\nprint(y.shape)","cb40507f":"ydf=pd.DataFrame(y)\nydf","0bfd5f2e":"\nfor i in range(1):\n    fold = KFold(n_splits=5, shuffle=True, random_state=71)\n    ydfi=ydf.iloc[:,i]\n    y=np.array(ydfi)\n    cv = list(fold.split(train_feat_df, y))\n    oof, models = fit_lgbm(train_feat_df.values, y, cv, params=params, verbose=500)\n    \n    fig,ax = plt.subplots(figsize=(6,6))\n    ax.set_title(target[i],fontsize=20)\n    ax.set_xlabel('Train Predicted '+target[i],fontsize=12)\n    ax.set_ylabel('Train Actual '+target[i],fontsize=12)\n    ax.scatter(oof,y)","d2dc6703":"print(target)","4120673a":"def visualize_importance(models, feat_train_df):\n\n    feature_importance_df = pd.DataFrame()\n    for i, model in enumerate(models):\n        _df = pd.DataFrame()\n        _df['feature_importance'] = model.feature_importances_\n        _df['column'] = feat_train_df.columns\n        _df['fold'] = i + 1\n        feature_importance_df = pd.concat([feature_importance_df, _df], \n                                          axis=0, ignore_index=True)\n\n    order = feature_importance_df.groupby('column')\\\n        .sum()[['feature_importance']]\\\n        .sort_values('feature_importance', ascending=False).index[:50]\n    \n    print(order[0:5].tolist())\n\n    fig, ax = plt.subplots(figsize=(8, max(6, len(order) * .25)))\n    sns.boxenplot(data=feature_importance_df, \n                  x='feature_importance', \n                  y='column', \n                  order=order, \n                  ax=ax, \n                  palette='viridis', \n                  orient='h')\n    \n    ax.tick_params(axis='x', rotation=0)\n    #ax.set_title('Importance')\n    ax.grid()\n    fig.tight_layout()\n    \n    return fig,ax\n\n#fig, ax = visualize_importance(models, train_feat_df)","9d7d67ca":"for i in range(1):\n    fold = KFold(n_splits=5, shuffle=True, random_state=71)\n    ydfi=ydf.iloc[:,i]\n    y=np.array(ydfi)\n    cv = list(fold.split(train_feat_df, y))\n    oof, models = fit_lgbm(train_feat_df.values, y, cv, params=params, verbose=500)\n    fig, ax = visualize_importance(models, train_feat_df)\n    ax.set_title(target[i]+' Imortance',fontsize=20)","6c2848f4":"orders=['InitialBuyingPrice', 'Dist_travelled', 'Safetyscore', 'ImportedOrNot','Transmission']","34fb9464":"fig,ax = plt.subplots(figsize=(6,6))\nax.set_title(target[0]+' vs '+orders[0],fontsize=20)\nax.set_xlabel(target[0],fontsize=12)\nax.set_ylabel(orders[0],fontsize=12)\nax.scatter(data1[target[0]],data1[orders[0]])","d8919e00":"fig,ax = plt.subplots(figsize=(6,6))\nax.set_title(target[0]+' vs '+orders[1],fontsize=20)\nax.set_xlabel(target[0],fontsize=12)\nax.set_ylabel(orders[1],fontsize=12)\nax.scatter(data1[target[0]],data1[orders[1]])","dba869cd":"fig,ax = plt.subplots(figsize=(6,6))\nax.set_title(target[0]+' vs '+orders[2],fontsize=20)\nax.set_xlabel(target[0],fontsize=12)\nax.set_ylabel(orders[2],fontsize=12)\nax.scatter(data1[target[0]],data1[orders[2]])","79e44284":"# Visualize Importance","7e5de018":"# Data preparation","b388ee1f":"# Model","d9425ef2":"# Target setting"}}