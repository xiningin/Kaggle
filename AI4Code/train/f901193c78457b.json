{"cell_type":{"3f5de883":"code","4f99e131":"code","54cf3c67":"code","a9ee56fa":"code","08161b72":"code","81d7e2aa":"code","12ec67c4":"code","79fd337c":"code","23bda40e":"code","939ca7c2":"markdown","f3ad8f7f":"markdown","e74c2645":"markdown","284693d9":"markdown","1ed412e4":"markdown","77bdbee7":"markdown"},"source":{"3f5de883":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns","4f99e131":"# The main dataset: price, transmission, and other characteristics\ncars_df = pd.read_csv('..\/input\/this-notebook-is-dedicated-to-tidy-the-data\/used_cars_tidy.csv')\ncars_df.head()","54cf3c67":"# Another dataframe that contains car features and accessories\ncar_features_df = pd.read_csv('..\/input\/this-notebook-is-dedicated-to-tidy-the-data\/car_features.csv')\ncar_features_df.head()","a9ee56fa":"# Another dataset about each car's colors\n# I extracted the \"primary\"\/most possible color from the free-form color description\n# into a more well-structured color category.\ncar_colors_df = pd.read_csv('..\/input\/this-notebook-is-dedicated-to-tidy-the-data\/car_colors.csv')\ncar_colors_df.head()","08161b72":"# Import necessary auxiliary stuffs\nfrom matplotlib import gridspec, ticker\n\n# Define size and grid spec\nfig = plt.figure(figsize=(15, 8), constrained_layout=True)\ngs = gridspec.GridSpec(3, 3, figure=fig)\n\n# Make plot to put in first row, rightmost column\nax = fig.add_subplot(gs[1, 2])\nsns.boxenplot(data = cars_df, x = 'fuelType', y = 'price', ax = ax) \\\n    .set_yscale('log')\nax.set(title = 'Fuel type', xlabel = None)\n\n# Make plot to put in second row, rightmost column\nax = fig.add_subplot(gs[0, 2])\nsns.boxenplot(data = cars_df, x = 'vehicleTransmission', y = 'price', ax = ax) \\\n    .set_yscale('log')\nax.set(title = 'Transmission', xlabel = None)\n\n# Make plot to put in third row, rightmost column\nax = fig.add_subplot(gs[2, 2])\nsns.boxenplot(data = cars_df, x = 'assembly', y = 'price', ax = ax) \\\n    .set_yscale('log')\nax.set(title = 'Assembly location', xlabel = None)\n\n# Make plot to put in third row, center column\nax = fig.add_subplot(gs[2, 0])\nsns.regplot(data = cars_df, x = 'odometerMileage', y = 'price',\n            ax = ax, lowess = True,\n            scatter_kws = {'alpha': 0.005, 'color': 'gray'},\n            line_kws = {'color': 'blue'}) \\\n    .set_yscale('log')\nax.set(title = 'Odometer reading', xlabel = None)\n\n# Make plot to put in third row, leftmost column\nax = fig.add_subplot(gs[2, 1])\nsns.regplot(data = cars_df, x = 'engineCapacity', y = 'price',\n            ax = ax, lowess = True,\n            scatter_kws = {'alpha': 0.005, 'color': 'gray'},\n            line_kws = {'color': 'blue'}) \\\n    .set_yscale('log')\nax.set(title = 'Engine (cc)', xlabel = None)\n\n# Make plot that spans the remaining grid\nax = fig.add_subplot(gs[0:2, 0:2])\nsns.boxenplot(data = cars_df, x = 'modelDate', y = 'price',\n              order = np.arange(1940, 2025), ax = ax) \\\n    .set_yscale('log')\nax.set(title = 'Year of model production', xlabel = None)\nax.xaxis.set_major_locator(ticker.MultipleLocator(5)) # Make axis tick only display per 5 years\n\nplt.show()","81d7e2aa":"_brand_df = cars_df[['manufacturer', 'price']].copy()\n\nN_TOP = 20\nbrands_to_display = _brand_df['manufacturer'].value_counts()[0:N_TOP].index.tolist()\n_brand_df['manufacturer'] = _brand_df['manufacturer'].apply(lambda x: x if x in brands_to_display else \"Other\")\n\nbrands_to_display.append(\"Other\")\n\nmedian_order = _brand_df.groupby('manufacturer').agg({'price': 'mean'}) \\\n    .sort_values('price', ascending = False)\n\nfig = plt.figure(figsize=(15, 6))\ngs = gridspec.GridSpec(1, 3, figure=fig)\n\nax = fig.add_subplot(gs[0])\nsns.countplot(data = _brand_df, y = 'manufacturer',\n            order = brands_to_display, ax = ax)\nax.set(xlim = (0, 25000))\nax.set(title = 'Number of brands in listing', ylabel = None)\nfor p in ax.patches:\n    ax.annotate(f\"{p.get_width()}\", xy = (p.get_width(), p.get_y() + 0.5),\n                horizontalalignment = 'left')\n\nax = fig.add_subplot(gs[1:3])\nsns.boxenplot(data = _brand_df, x = 'price', y = 'manufacturer',\n              order = brands_to_display, ax = ax) \\\n    .set_xscale('log')\nax.yaxis.set_label_position('right')\nax.yaxis.tick_right()\nax.set(title = 'Price ranges', ylabel = None)\n\nplt.suptitle('Popularity and price ranges', fontsize = 15)\nplt.tight_layout()\nplt.show()","12ec67c4":"plot_df = pd.concat([car_colors_df['w3c_color'], cars_df['price']], axis = 1)\nplot_df.columns = ['color', 'price']\n\ncolor_counts = plot_df['color'].value_counts().reset_index()\ncolor_counts.columns = ['color', 'count']\n\norder = color_counts['color']\npalette = color_counts['color'].replace('other', None) # \"other\" is not a color name\n\nfig = plt.figure(figsize=(15, 6))\ngs = gridspec.GridSpec(1, 3, figure=fig)\n\n# Left plot\nax = fig.add_subplot(gs[0])\nsns.barplot(data = color_counts, x = 'count', y = 'color',\n            palette = palette, ax = ax)\nax.set(title = 'Popularity')\nax.set_xlim((0, 27500))\nfor p in ax.patches:\n    ax.annotate(f\"{int(p.get_width())}\", xy = (p.get_width(), p.get_y()),\n                horizontalalignment = 'left', verticalalignment = 'top')\n    clr = p.get_facecolor()\n    if clr == (1, 1, 1, 1):\n        # If facecolor is white\n        p.set_edgecolor('grey')\nax.set_ylabel('')\n\n\n# Right plot\nax = fig.add_subplot(gs[1:3])\nsns.boxenplot(data = plot_df, x = 'price', y = 'color',\n              order = order, palette = palette, ax = ax)\nax.set(title = 'Car price', xscale = 'log')\nax.yaxis.tick_right()\nax.set_ylabel('')\n\nplt.suptitle(\"Prices and popularity of colors for a car\", fontsize = 15)\nplt.tight_layout()\nplt.show()","79fd337c":"feature_per_car = car_features_df.sum(axis = 1)\n\nfig = plt.figure(figsize=(15, 10))\ngs = gridspec.GridSpec(3, 1, figure=fig)\n\nax = fig.add_subplot(gs[0])\nsns.countplot(x = feature_per_car, ax = ax)\nax.set(\n    xlabel = \"n of features available\",\n    ylabel = \"n of cars\",\n    title = \"Feature Completeness for each Car\",\n    ylim = (0, 7000),\n    xlim = (-3, 30)\n)\n\nax.axvline(20.5)\nax.annotate(\"Very thorough, fully featured car\", xy = (21, 3500),\n            horizontalalignment = \"left\")\n\nax.axvline(10.5)\nax.annotate(\"Good, well featured car\", xy = (11, 6500),\n            horizontalalignment = 'left')\n\nax.axvline(2.5)\nax.annotate(\"Moderately equipped car\", xy = (3, 4500),\n            horizontalalignment = 'left')\n\nax.annotate(\"Poorly equipped,\\nmaybe only basic\\nfeatures\", xy = (-2.5, 6500),\n            horizontalalignment = 'left', verticalalignment = 'top')\n\nax = fig.add_subplot(gs[1:3])\nsns.regplot(x = feature_per_car, y = cars_df['price'], ax = ax,\n            x_jitter = 0.2,\n            scatter_kws = {'color': 'black', 'alpha': 0.05})\nax.set(\n    yscale = 'log',\n    xlabel = 'n features available',\n    xlim = (-3, 30)\n)\nplt.show()","23bda40e":"# Permutation importance of the features and accessories\n# The following code cells are adapted from\n# https:\/\/scikit-learn.org\/stable\/auto_examples\/inspection\/plot_permutation_importance.html\n\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.inspection import permutation_importance\nfrom sklearn.model_selection import train_test_split\n\nX, y = car_features_df, cars_df['price']\nmodel = RandomForestRegressor(n_estimators = 25)\n\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size = 0.3, random_state = 28111984)\n\nmodel.fit(X_train, y_train)\n\nperm_imp_val = permutation_importance(\n    model, X_val, y_val, n_repeats=50, random_state=19\n)\n\n_df = pd.DataFrame(perm_imp_val.importances.T, columns = X_train.columns).melt(value_name = 'importance')\n_order = X_train.columns[perm_imp_val.importances_mean.argsort()[::-1]]\n\nfig, ax = plt.subplots(figsize = (8, 8))\n\nsns.boxplot(\n    data = _df, x = 'importance', y = 'variable',\n    order = _order\n).set(title = 'Permutation importances (on validation set)')\nsns.set_style('darkgrid')\n\nfig.tight_layout()\nplt.show()","939ca7c2":"# Completeness of features and accessories","f3ad8f7f":"# Load up the data\n\nI put the process of tidying the data in a separate notebook to make the EDA process more straightforward and engaging.\n\n- https:\/\/www.kaggle.com\/rayhanlahdji\/this-notebook-is-dedicated-to-tidy-the-data\n\nLet's load and use that cleaned data, shall we?","e74c2645":"# Color popularity\n\nand for fun: does price differ based on color? *Not much, actually. It's negligibly superficial for most colors.*","284693d9":"# Introduction\n\nThis notebook will explore the dataset to make (hopefully) beautiful, meaningful, and interesting visualization that is simple and easy to understand for beginners. Lightweight and for fun. Enjoy!","1ed412e4":"# Price ranges of various (popular) brands","77bdbee7":"# Difference of price based on various aspects of the car"}}