{"cell_type":{"37d13ed2":"code","4ef48158":"code","73e7f110":"code","1198fa72":"code","67f716a0":"code","22e02d68":"code","08a91b73":"code","9eebbd7c":"code","b30c989a":"code","8ecd41fe":"code","4e44bff4":"code","49efa678":"code","aac62031":"markdown","a1a9d14b":"markdown","984cb490":"markdown","ce6d9f3e":"markdown","d7207681":"markdown"},"source":{"37d13ed2":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfrom PIL import Image\nfrom tqdm import tqdm\n\n# import useful tools\nimport glob\nimport os\nimport cv2\n\nimport xml.etree.ElementTree as ET\n\n# import data visualization\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as patches\nimport seaborn as sns\nfrom sklearn.model_selection import GroupKFold\n\nfrom bokeh.plotting import figure\nfrom bokeh.io import output_notebook, show, output_file\nfrom bokeh.models import ColumnDataSource, HoverTool, Panel\nfrom bokeh.models.widgets import Tabs\n\n# import data augmentation\nimport albumentations as albu\n\nLABELS_PATH = '..\/input\/swimming-pool-512x512\/CANNES_TILES_512x512_labels\/CANNES_TILES_512x512_labels\/'\nTRAIN_DIR = '..\/input\/swimming-pool-512x512\/CANNES_TILES_512x512_PNG\/CANNES_TILES_512x512_PNG\/'","4ef48158":"def xml_to_csv(path):\n    xml_list = []\n    for xml_file in tqdm(glob.glob(path + '\/*.xml')):\n        tree = ET.parse(xml_file)\n        root = tree.getroot()\n        for member in root.findall('object'):\n            bbx = member.find('bndbox')\n            xmin = int(float(bbx.find('xmin').text))\n            ymin = int(float(bbx.find('ymin').text))\n            xmax = int(float(bbx.find('xmax').text))\n            ymax = int(float(bbx.find('ymax').text))\n            label = member.find('name').text\n            \n            value = (os.path.splitext(root.find('filename').text)[0] + '.png', \n                     int(root.find('size')[0].text),\n                     int(root.find('size')[1].text),\n                     label,\n                     xmin,\n                     ymin,\n                     xmax,\n                     ymax\n                     )\n            xml_list.append(value)\n    column_name = ['image_id', 'width', 'height',\n                   'class', 'xmin', 'ymin', 'xmax', 'ymax']\n    xml_df = pd.DataFrame(xml_list, columns=column_name)\n    return xml_df\n\n\ndf = xml_to_csv(LABELS_PATH)\ndf.head(10)","73e7f110":"df['image_id'].nunique()","1198fa72":"len(df)","67f716a0":"df['fold'] = -1\ngroup_kfold  = GroupKFold(n_splits = 5)\nfor fold, (train_index, val_index) in enumerate(group_kfold.split(df,\n                                                              groups=df.image_id.tolist())):\n    df.loc[val_index, 'fold'] = fold\n\ndf.head(10)","22e02d68":"def get_all_bboxes(df, image_id):\n    image_bboxes = df[df.image_id == image_id]\n\n    bboxes = []\n    for _,row in image_bboxes.iterrows():\n        bboxes.append((row.xmin, row.ymin, row.xmax, row.ymax))\n        \n    return bboxes\n\ndef plot_image_examples(df, rows=3, cols=4, title='Image examples'):\n    fig, axs = plt.subplots(rows, cols, figsize=(20,15), constrained_layout=True)\n    for row in range(rows):\n        for col in range(cols):\n            idx = np.random.randint(len(df), size=1)[0]\n            img_id = df.iloc[idx].image_id\n            \n            img = Image.open(TRAIN_DIR + img_id)\n            axs[row, col].imshow(img)\n            \n            bboxes = get_all_bboxes(df, img_id)\n            \n            for bbox in bboxes:\n                rect = patches.Rectangle((bbox[0],bbox[1]),bbox[2] - bbox[0],bbox[3] - bbox[1],linewidth=1,edgecolor='r',facecolor='none')\n                axs[row, col].add_patch(rect)\n            \n            axs[row, col].axis('off')\n            \n    plt.suptitle(title)","08a91b73":"plot_image_examples(df, title='Example images with various number of pools')","9eebbd7c":"# compute the number of bounding boxes per train image\ndf['nboxes'] = df.apply(lambda row: 1 if np.isfinite(row.xmin) else 0, axis=1)\ntrain_images_count = df.groupby('image_id').sum().reset_index()\nsns.histplot(data=train_images_count['nboxes'], bins=20)","b30c989a":"high_pool_ids = train_images_count[train_images_count['nboxes'] > 7].image_id\nplot_image_examples(df[df.image_id.isin(high_pool_ids)], title='Example images with high number of pools')","8ecd41fe":"df['bbox_area'] = (df['xmax'] - df['xmin']) * (df['ymax'] - df['ymin'])\nsns.histplot(data=df['bbox_area'])","4e44bff4":"df.head()","49efa678":"df.to_csv('swimming_pools_labels_512x512.csv', index=None)\nprint('Successfully converted xml to csv.')","aac62031":"# Some plots","a1a9d14b":"# Create dataframe","984cb490":"# Import libraries","ce6d9f3e":"# Create folds","d7207681":"# Compute areas"}}