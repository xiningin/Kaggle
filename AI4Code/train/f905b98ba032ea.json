{"cell_type":{"99108100":"code","60ef6be9":"code","eb487bd6":"code","8009785a":"code","e26507e6":"code","23026448":"code","933f5e46":"code","664038a4":"code","d32ff7f3":"code","f15849e5":"code","38bbc586":"code","20b6204d":"code","c8efc4a5":"code","71371d73":"code","3a847c57":"code","c75cf460":"code","4537717b":"code","0430610c":"code","3d79cb77":"code","86f87590":"code","21b7bfbd":"code","d765237f":"code","57fcf590":"code","bdfa0e15":"code","c5a2b65b":"code","f8301884":"code","581d6792":"code","8e5d3066":"code","fcbd1360":"code","5fb56306":"code","5efaeb29":"code","9eb7c779":"code","88b641cb":"code","bac98c57":"markdown"},"source":{"99108100":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","60ef6be9":"movies = pd.read_csv('\/kaggle\/input\/tmdb-movie-metadata\/tmdb_5000_movies.csv')\ncredits = pd.read_csv('\/kaggle\/input\/tmdb-movie-metadata\/tmdb_5000_credits.csv') ","eb487bd6":"movies.head(2)","8009785a":"movies.shape","e26507e6":"credits.head()","23026448":"movies = movies.merge(credits,on='title')","933f5e46":"movies.head()\n# budget\n# homepage\n# id\n# original_language\n# original_title\n# popularity\n# production_comapny\n# production_countries\n# release-date(not sure)","664038a4":"movies = movies[['title','overview','genres','keywords','cast','crew']]","d32ff7f3":"movies.head()","f15849e5":"def convert(text):\n    L = []\n    for i in ast.literal_eval(text):\n        L.append(i['name']) \n    return L ","38bbc586":"movies.dropna(inplace=True)","20b6204d":"movies['genres'] = movies['genres'].apply(convert)\nmovies.head()","c8efc4a5":"movies['keywords'] = movies['keywords'].apply(convert)\nmovies.head()","71371d73":"import ast\nast.literal_eval('[{\"id\": 28, \"name\": \"Action\"}, {\"id\": 12, \"name\": \"Adventure\"}, {\"id\": 14, \"name\": \"Fantasy\"}, {\"id\": 878, \"name\": \"Science Fiction\"}]')","3a847c57":"def convert3(text):\n    L = []\n    counter = 0\n    for i in ast.literal_eval(text):\n        if counter < 3:\n            L.append(i['name'])\n        counter+=1\n    return L ","c75cf460":"movies['cast'] = movies['cast'].apply(convert)\nmovies.head()","4537717b":"movies['cast'] = movies['cast'].apply(lambda x:x[0:3])","0430610c":"def fetch_director(text):\n    L = []\n    for i in ast.literal_eval(text):\n        if i['job'] == 'Director':\n            L.append(i['name'])\n    return L ","3d79cb77":"movies['crew'] = movies['crew'].apply(fetch_director)","86f87590":"#movies['overview'] = movies['overview'].apply(lambda x:x.split())\nmovies.sample(5)","21b7bfbd":"def collapse(L):\n    L1 = []\n    for i in L:\n        L1.append(i.replace(\" \",\"\"))\n    return L1","d765237f":"movies['cast'] = movies['cast'].apply(collapse)\nmovies['crew'] = movies['crew'].apply(collapse)\nmovies['genres'] = movies['genres'].apply(collapse)\nmovies['keywords'] = movies['keywords'].apply(collapse)","57fcf590":"movies['tags'] = movies['overview'] + movies['genres'] + movies['keywords'] + movies['cast'] + movies['crew']","bdfa0e15":"new = movies.drop(columns=['overview','genres','keywords','cast','crew'])\n#new.head()","c5a2b65b":"from sklearn.feature_extraction.text import CountVectorizer\ncv = CountVectorizer(max_features=5000,stop_words='english')\n    ","f8301884":"vector = cv.fit_transform(new['tags']).toarray()","581d6792":"vector.shape","8e5d3066":"from sklearn.metrics.pairwise import cosine_similarity","fcbd1360":"similarity = cosine_similarity(vector)","5fb56306":"similarity","5efaeb29":"new[new['title'] == 'The Lego Movie'].index[0]","9eb7c779":"def recommend(movie):\n    index = new[new['title'] == movie].index[0]\n    distances = sorted(list(enumerate(similarity[index])),reverse=True,key = lambda x: x[1])\n    for i in distances[1:6]:\n        print(new.iloc[i[0]].title)\n        \n    ","88b641cb":"recommend('Gandhi')","bac98c57":"new['tags'] = new['tags'].apply(lambda x: \" \".join(x))\nnew.head()"}}