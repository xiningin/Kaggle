{"cell_type":{"738f95cd":"code","d3b9cf00":"code","759767ee":"code","fe61999f":"code","30717ad3":"code","c46fc5e3":"code","b8803f0d":"code","3746ca86":"code","a826f226":"code","f2e69bed":"code","796c30f0":"code","627f5de6":"code","1762cfd4":"code","c8f9c9f1":"code","a1ced3ee":"code","c6a09e7f":"code","3d606062":"code","d2e533dc":"code","d872018f":"code","29a0db09":"code","402f806b":"code","6cdd96b3":"code","dcee82a9":"code","fe2bcc67":"code","4745ccc5":"code","49cd4681":"code","acac339b":"code","d7f0d002":"code","db64b85e":"code","c7263ac8":"code","0d30d7ef":"code","7f7a60c3":"code","e9b306d5":"code","6e950eed":"code","42e125c9":"code","b3bd256d":"code","048378bd":"code","923be9d8":"code","d04e18c1":"code","f99271c7":"code","3d429841":"code","34a4905d":"code","3105f219":"markdown","21b655e3":"markdown","94481d2f":"markdown","37d822d1":"markdown","b187a986":"markdown","bfe16013":"markdown","a89db76e":"markdown","65208c28":"markdown","d199be44":"markdown","ef7ce96b":"markdown","0174f1b3":"markdown","7ff93931":"markdown","9d858077":"markdown","0c9d359b":"markdown","beec39a3":"markdown","a30be6e4":"markdown","83c0dd91":"markdown","dce87168":"markdown","37932c24":"markdown","cbb1850b":"markdown","385d4850":"markdown","e27c2d48":"markdown","e178acd8":"markdown","758fe528":"markdown","04090ea9":"markdown","84f86938":"markdown","65e59620":"markdown","2e717d23":"markdown","49141db7":"markdown","f20a5d3c":"markdown","6bafccf6":"markdown","12c1776a":"markdown","7554e518":"markdown","768f2265":"markdown","c9569a0e":"markdown"},"source":{"738f95cd":"x = 'Pluto is a planet'\ny = \"Pluto is a planet\"\nx == y","d3b9cf00":"print(\"Pluto's a planet!\")\nprint('My dog is named \"Pluto\"')","759767ee":"'Pluto's a planet!'","fe61999f":"'Pluto\\'s a planet!'","30717ad3":"hello = \"hello\\nworld\"\nprint(hello)","c46fc5e3":"triplequoted_hello = \"\"\"hello\nworld\"\"\"\nprint(triplequoted_hello)\ntriplequoted_hello == hello","b8803f0d":"print(\"hello\")\nprint(\"world\")\nprint(\"hello\", end='')\nprint(\"pluto\", end='')","3746ca86":"# Indexing\nplanet = 'Pluto'\nplanet[0]","a826f226":"# Slicing\nplanet[-3:]","f2e69bed":"# How long is this string?\nlen(planet)","796c30f0":"# Yes, we can even loop over them\n[char+'! ' for char in planet]","627f5de6":"planet[0] = 'B'\n# planet.append doesn't work either","1762cfd4":"# ALL CAPS\nclaim = \"Pluto is a planet!\"\nclaim.upper()","c8f9c9f1":"# all lowercase\nclaim.lower()","a1ced3ee":"# Searching for the first index of a substring\nclaim.index('plan')","c6a09e7f":"claim.startswith(planet)","3d606062":"claim.endswith('dwarf planet')","d2e533dc":"words = claim.split()\nwords","d872018f":"datestr = '1956-01-31'\nyear, month, day = datestr.split('-')","29a0db09":"'\/'.join([month, day, year])","402f806b":"# Yes, we can put unicode characters right in our string literals :)\n' \ud83d\udc4f '.join([word.upper() for word in words])","6cdd96b3":"planet + ', we miss you.'","dcee82a9":"position = 9\nplanet + \", you'll always be the \" + position + \"th planet to me.\"","fe2bcc67":"planet + \", you'll always be the \" + str(position) + \"th planet to me.\"","4745ccc5":"\"{}, you'll always be the {}th planet to me.\".format(planet, position)","49cd4681":"pluto_mass = 1.303 * 10**22\nearth_mass = 5.9722 * 10**24\npopulation = 52910390\n#         2 decimal points   3 decimal points, format as percent     separate with commas\n\"{} weighs about {:.2} kilograms ({:.3%} of Earth's mass). It is home to {:,} Plutonians.\".format(\n    planet, pluto_mass, pluto_mass \/ earth_mass, population,\n)","acac339b":"# Referring to format() arguments by index, starting from 0\ns = \"\"\"Pluto's a {0}.\nNo, it's a {1}.\n{0}!\n{1}!\"\"\".format('planet', 'dwarf planet')\nprint(s)","d7f0d002":"numbers = {'one':1, 'two':2, 'three':3}","db64b85e":"numbers['one']","c7263ac8":"numbers['eleven'] = 11\nnumbers","0d30d7ef":"numbers['one'] = 'Pluto'\nnumbers","7f7a60c3":"planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\nplanet_to_initial = {planet: planet[0] for planet in planets}\nplanet_to_initial","e9b306d5":"'Saturn' in planet_to_initial","6e950eed":"'S' in planet_to_initial","42e125c9":"'S' in planet_to_initial.values()","b3bd256d":"'Betelgeuse' in planet_to_initial","048378bd":"numbers","923be9d8":"for k in numbers:\n    print(\"{} = {}\".format(k, numbers[k]))","d04e18c1":"for k, v in numbers.items():\n    print(f\"{k} = {v}\")","f99271c7":"# Get all the initials, sort them alphabetically, and put them in a space-separated string.\n' '.join(sorted(planet_to_initial.values()))","3d429841":"for planet, initial in planet_to_initial.items():\n    print(\"{} begins with \\\"{}\\\"\".format(planet.rjust(10), initial))","34a4905d":"help(dict)","3105f219":"The `print()` function automatically adds a newline character unless we specify a value for the keyword argument `end` other than the default value of `'\\n'`:","21b655e3":"# Dictionaries\n\nDictionaries are a built-in Python data structure for mapping keys to values.","94481d2f":"The last sequence, `\\n`, represents the *newline character*. It causes Python to start a new line.","37d822d1":"## String methods\n\nLike `list`, the type `str` has lots of very useful methods. I'll show just a few examples here.","b187a986":"Or to change the value associated with an existing key","bfe16013":"In this case `'one'`, `'two'`, and `'three'` are the **keys**, and 1, 2 and 3 are their corresponding values.\n\nValues are accessed via square bracket syntax similar to indexing into lists and strings.","a89db76e":"Python has *dictionary comprehensions* with a syntax similar to the list comprehensions we saw in the previous tutorial.","65208c28":"Occasionally you'll want to split on something other than whitespace:","d199be44":"### Building strings with `.format()`\n\nPython lets us concatenate strings with the `+` operator.","ef7ce96b":"This is getting hard to read and annoying to type. `str.format()` to the rescue.","0174f1b3":"But a major way in which they differ from lists is that they are *immutable*. We can't modify them.","7ff93931":"So much cleaner! We call `.format()` on a \"format string\", where the Python values we want to insert are represented with `{}` placeholders.\n\nNotice how we didn't even have to call `str()` to convert `position` from an int. `format()` takes care of that for us.\n\nIf that was all that `format()` did, it would still be incredibly useful. But as it turns out, it can do a *lot* more. Here's just a taste:","9d858077":"## Strings are sequences\n\nStrings can be thought of as sequences of characters. Almost everything we've seen that we can do to a list, we can also do to a string.","0c9d359b":"We can access a collection of all the keys or all the values with `dict.keys()` and `dict.values()`, respectively.","beec39a3":"The table below summarizes some important uses of the backslash character.\n\n| What you type... | What you get | example               | `print(example)`             |\n|--------------|----------------|--------------------------------------------------------|\n| `\\'`         | `'`            | `'What\\'s up?'`         | `What's up?`                 |  \n| `\\\"`         | `\"`            | `\"That's \\\"cool\\\"\"`     | `That's \"cool\"`              |  \n| `\\\\`         | `\\`            |  `\"Look, a mountain: \/\\\\\"` |  `Look, a mountain: \/\\`  |\n| `\\n`        |   <br\/>      |   `\"1\\n2 3\"`                       |   `1`<br\/>`2 3`              |","a30be6e4":"We can fix this by \"escaping\" the single quote with a backslash. ","83c0dd91":"If we try to put a single quote character inside a single-quoted string, Python gets confused:","dce87168":"If we want to throw in any non-string objects, we have to be careful to call `str()` on them first","37932c24":"# Extra Notes\n```python\nDICTIONARIES\n=====\n# Creating a dictionary\nA = dict()\nA = {}\n\n# IT HAS LABEL TO IT\n# KEY-VALUE PAIR LIKE HASHMAP\n# Not in order\npurse = {'RM50': 1, 'RM20': 5, 'RM5': 3}\npurse['RM5'] # 3\npurse.get('RM5') # 3\npurse['RM1'] # ERROR: KeyError: 'RM1'\npurse.get('RM1', 0) # 0 because default value is set to 0 when the key 'RM1' is not found\npurse.get('RM1', 'Not found!') # Not found!\n\n# NOTE: Without the 0 parameter added, it will return None if the key is not found\npurse.get('RM1') # None\n\nwallet = dict()\nwallet['RM50'] = 3\nwallet['RM20'] = 10\nwallet['RM5'] = 7\n\nprint(wallet)\n>> {'RM50': 3, 'RM20': 10, 'RM5': 7}\n\nwallet['RM50'] += 2\nprint(wallet['RM50'])\n>> 5\n\nAPPENDING NEW KEY\n=====\nwallet['RM1'] = 12\nprint(wallet)\n>> {'RM50': 3, 'RM20': 10, 'RM5': 7, 'RM1': 12}\n\nEDITING THE VALUE OF A KEY\n=====\nwallet['RM50'] = 0\nprint(wallet)\n>> {'RM50': 0, 'RM20': 10, 'RM5': 7, 'RM1': 12}\n\nADDING KEY AND UPDATING FEW KEYS AND THEIR RESPECIVE VALUE AT THE SAMETIME\n=====\nstudent1 = {'name':'John', 'age':19, 'courses':['CS', 'ALGO']}\nstudent1.update({'name':'Jane', 'age':29, 'phone':'213-1234'})\nprint(student1)\n# {'name': 'Jane', 'age': 29, 'courses': ['CS', 'ALGO'], 'phone': '213-1234'}\n\nDELETING KEY WITH ITS VALUE\n=====\ndel wallet['RM50']\nprint(wallet)\n>> {'RM20': 10, 'RM5': 7, 'RM1': 12}\n\n# NOTE: Another way to delete\nstudent1 = {'name':'John', 'age':19, 'courses':['CS', 'ALGO']}\ns1courseList = student1.pop('courses') # ['CS', 'ALGO']\nprint('student1') # {'name': 'John', 'age': 19}\n\nFINDING KEYS THAT DONT EXIST\n=====\nhashmap = dict()\nprint(hashmap['Ali'])\n>> TRACEBACK, KeyError: 'Ali'\n'Ali' in hashmap\n>> True\n\nADDING LIST OF KEYS INTO DICTIONARIES\n=====\nhashmap = dict()\nnames = ['Ali', 'Abu', 'Sarah', 'Ali', 'Ali','Ah Kau']\nfor name in names:\n\tif name not in hashmap:\n\t\thashmap[name] = 1\n\telse:\n\t\thashmap[name] += 1\n\nprint(hashmap)\n>> {'Ali': 3, 'Abu': 1, 'Sarah': 1, 'Ah Kau': 1}\n# Simplified version below\n\nLENGTH OF THE KEYS IN A DICT\n=====\nstudent1 = {'name':'John', 'age':19, 'courses':['CS', 'ALGO']}\nprint(len(student1)) # 3\n\nGETTING THE KEYS\n=====\nprint(student1.keys()) # dict_keys(['name', 'age', 'courses'])\n\nGETTING THE VALUES\n=====\nprint(student1.values()) # dict_values(['John', 19, ['CS', 'ALGO']])\n\nGETTING THE KEYS AND VALUE USING .items()\n=====\nprint(student1.items()) # dict_items([('name', 'John'), ('age', 19), ('courses', ['CS', 'ALGO'])])\nprint(student1) # {'name': 'John', 'age': 19, 'courses': ['CS', 'ALGO']}\n\nPRINTING THE KEYS AND VALUES USING FOR LOOP\n=====\n>>> for k, v in student1: # NOTE: Make sure to have .items() to get the keys and values\n...     print(k, v)\n...\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nValueError: too many values to unpack (expected 2)\n\n# Correct method\n>>> for k, v in student1.items():\n...     print(k, v)\n...\nname John\nage 19\ncourses ['CS', 'ALGO']\n\n\nITERATING THE CONTENTS OF DICTIONARY\n=====\n# DISPLAYING KEYS\nfor n in hashmap:\n\tprint(n)\n\n# Another way of printing the keys\nfor n in hashmap.keys():\n\tprint(n)\n'''\nAli\nAbu\nSarah\nAh Kau\n'''\n\n# Displaying the keys in a list\nprint([n for n in hashmap.keys()])\n>> ['Ali', 'Abu', 'Sarah', 'Ah Kau']\n\n# DISPLAYING VALUES\nfor v in hashmap.values():\n\tprint(v)\n'''\n3\n1\n1\n1\n'''\n\n# Displaying the values in a list\nprint([c for c in hashmap.values()])\n>> [3, 1, 1, 1]\n\nTYPE FOR KEYS IN DICTIONARIES\n=====\n# Keys can only be immutable type: Numbers, Booleans, Strings, Tuples\nwardrobe = {\"shirt\":[\"red\",\"blue\",\"white\"], \"jeans\":[\"blue\",\"black\"]}\nfor shirt in wardrobe:\n\tfor col in wardrobe[shirt]:\n\t\tprint(\"{} {}\".format(col, shirt))\n\nwardrobe[\"shirt\"][1] = \"pink\"\n>> {'shirt': ['red', 'pink', 'white'], 'jeans': ['blue', 'black']}\n\nGET METHOD\n=====\nname = 'Ali'\nx = names.get(name, 0)\n# put the value into x, but if there is no key, default value for x is 0\nx = names.get(name, 5)\n# put the value into x, but if there is no key, default value for x is 5\nx = names.get(name)\n>> None\n# put the value into x, but if there is no key, default value for x is None\n\n# With this, there is no traceback KeyError\nhashmap = dict()\nnames = ['Ali', 'Abu', 'Sarah', 'Ali', 'Ali','Ah Kau']\n\nfor name in names:\n\thashmap[name] = hashmap.get(name, 0) + 1\n\nprint(hashmap)\n\nFUNCTION RETURNING DICTIONARY\n=====\n# Count letters\ndef count_letters(txt):\n\tresult = dict()\n\n\tfor char in txt:\n\t\tresult[char] = result.get(char, 0) + 1\n\n\treturn result\n\nprint(count_letters(input('> ')))\n\n'''\n> This is a String\n{'T': 1, 'h': 1, 'i': 3, 's': 2, ' ': 3, 'a': 1, 'S': 1, 't': 1, 'r': 1, 'n': 1, 'g': 1}\n'''\n\nUSING DICT TO ACT LIKE A SWITCH CASE\n=====\n# Ref: https:\/\/stackoverflow.com\/questions\/60208\/replacements-for-switch-statement-in-python\n# 1: Problem occurs when the `x` is not found\ndef f(x):\n    return {\n        'a': 1,\n        'b': 2\n    }[x]\n\n# 2\ndef f(x):\n    return {\n        'a': 1,\n        'b': 2\n    }.get(x, 9)    # 9 is default if x not found\n\nCOUNTING PATTERN\n=====\ncounts = dict()\nline = input(\"Enter line of text: \")\nwords = line.split()\n\nprint('List of words:', words)\n\nfor w in words:\n\tcounts[w] = counts.get(w, 0) + 1\n\nprint(counts)\n\nTO GET THE WORD WITH MOST FREQUENCY\n=====\nmax = 0\nhighestFreqWord = ''\nfor key in counts:\n\tif counts[key] > max:\n\t\tmax = counts[key]\n\t\thighestFreqWord = key\n\nprint('Key with highest frequency:', highestFreqWord, '\\nCount:', counts.get(highestFreqWord))\nprint('Key with highest frequency:', highestFreqWord, '\\nCount:', counts[highestFreqWord])\nprint('Key with highest frequency:', highestFreqWord, '\\nCount:', max)\n\nRETRIEVING KEYS & VALUES\n=====\nhashmap = {'Ali': 3, 'Abu': 1, 'Sarah': 1, 'Ah Kau': 1}\nprint(list(hashmap))\n>> ['Ali', 'Abu', 'Sarah', 'Ah Kau']\nprint(hashmap.keys())\n>> dict_keys(['Ali', 'Abu', 'Sarah', 'Ah Kau'])\nprint(list(hashmap.keys()))\n>> ['Ali', 'Abu', 'Sarah', 'Ah Kau']\nprint(hashmap.values())\n>> dict_values([3, 1, 1, 1])\nprint(list(hashmap.values()))\n>> [3, 1, 1, 1]\n\nTUPLE\n=====\nprint(hashmap.items())\n>> dict_items([('Ali', 3), ('Abu', 1), ('Sarah', 1), ('Ah Kau', 1)])\n\nTUPLE CONCATENATION\n=====\na = (1,2,3)\nb = a*2\nprint(b)\n\nUSING TUPLE TO DISPLAY THE KEY AND VALUES\n=====\nhashmap = {'Ali': 3, 'Abu': 1, 'Sarah': 1, 'Ah Kau': 1}\n\nfor k, v in hashmap.items():\n\tprint(k, v)\n\n>> Ali 3\n>> Abu 1\n>> Sarah 1\n>> Ah Kau 1\n\nfile_counts = {'txt': 5, 'jpeg': 12, 'pdf': 9}\n\nfor extension, counts in file_counts.items(): # REMEMBER TO PUT .items()\n\tprint(\"There are {} number of .{} file(s)\".format(counts, extension))\n\n'''\nThere are 5 number of .txt file(s)\nThere are 12 number of .jpeg file(s)\nThere are 9 number of .pdf file(s)\n'''\n\n# OPERATIONS\nlen(dictionary) # Returns the number of items in the dictionary\nfor key in dictionary # Iterates over each key in the dictionary\nfor key, value in dictionary.items() # Iterates over each key,value pair in the dictionary\nif key in dictionary # Checks whether the key is in the dictionary\ndictionary[key] # Accesses the item with key key of the dictionary\ndictionary[key] = value # Sets the value associated with key\ndel dictionary[key] # Removes the item with key key from the dictionary\n\n# METHODS\ndict.get(key, default) # Returns the element corresponding to key, or default if it's not present\ndict.keys() # Returns a sequence containing the keys in the dictionary\ndict.values() # Returns a sequence containing the values in the dictionary\ndict.update(other_dictionary) # Updates the dictionary with the items coming from the other dictionary. Existing entries will be replaced; new entries will be added.\ndict.clear() # Removes all the items of the dictionary\n```","cbb1850b":"# Your Turn\n\nYou've learned a lot of Python... go **[test your skills](https:\/\/www.kaggle.com\/kernels\/fork\/1275185)** with some realistic programming applications.\n","385d4850":"### Going between strings and lists: `.split()` and `.join()`\n\n`str.split()` turns a string into a list of smaller strings, breaking on whitespace by default. This is super useful for taking you from one big string to a list of words.","e27c2d48":"# Strings","e178acd8":"You could probably write a short book just on `str.format`, so I'll stop here, and point you to [pyformat.info](https:\/\/pyformat.info\/) and [the official docs](https:\/\/docs.python.org\/3\/library\/string.html#formatstrings) for further reading.","758fe528":"This lesson will be a double-shot of essential Python types: **strings** and **dictionaries**.","04090ea9":"The very useful `dict.items()` method lets us iterate over the keys and values of a dictionary simultaneously. (In Python jargon, an **item** refers to a key, value pair)","84f86938":"# Extra Notes\n```python\nSTRINGS\n=====\nfruit = 'pineapple'\nletter = fruit[1]\nprint(letter)\n>> i\n\nLENGTH OF A STRING\n=====\nname = 'John'\nlen(name)\n>> 4\n\nfor letter in name:\n\tprint(letter)\n\n# ABOVE CODE DOES THE SAME THINGS AS THE BELOW CODES\n\nindex = 0\nwhile index < len(name):\n\tletter = name[index]\n\tprint(letter)\n\tindex += 1\n\nMULTIPLE LINE STRING\n=====\nlongString = '''This is the first line\nThis is the second one\nLast one\n'''\n\nlongString = \"\"\"This is the first line\nThis is the second one\nLast one\n\"\"\"\n\nSLICING STRINGS\n=====\ntmp = 'Monty Python'\n       0123456789[10][11]\ns[0:4]\n>> Mont\ns[6:7]\n>> P\ns[6:20]\n>> Python\n\ns[:2]\n>> Mo\ns[8:]\n>> thon\ns[:]\n>> Monty Python\n\nMANIPULATING STRINGS\n=====\n# Concatenation == concat\na = 'Hello'\nb = a + \"There\"\nprint(b)\n>> HelloThere\nb = a + \" \" + \"There\"\nprint(b)\n>> Hello There\n\nREVERSING A STRING\n=====\n# Reference: https:\/\/www.geeksforgeeks.org\/reverse-string-python-5-different-ways\/\n\n# 1\ndef reverse(string): \n    string = string[::-1] \n    return string \n'''Explanation : Extended slice offers to put a \u201cstep\u201d field as [start,stop,step], and giving no field as start and stop indicates default to 0 and string length respectively and \u201c-1\u201d denotes starting from end and stop at the start, hence reversing string.'''\n\n# 2\ndef reverse(string): \n    string = \"\".join(reversed(string)) \n    return string\n\n# 3 Fastest way if the string is not a palindrome\ndef isPalindrome(x):\n\tfor i in range(len(x)):\n\t\tif x[i] != x[-1-i]:\n\t\t\treturn False\n\nprint(isPalindrome('kayik')) # False\n\nUSING in AS A LOGICAL OPERATOR\n=====\nfruit = 'banana'\n'n' in fruit\n>> True\n'nan' in fruit\n>> True\n\nSTRING COMPARISON\n=====\nif word == 'banana':\n\tprint(\"Yes\")\n\nif word < banana:\n\tprint(word, \"comes before banana\")\nelif word > 'banana':\n\tprint(word, \"comes after banana\")\nelse:\n\tprint(\"Yes banana\")\n\nSTRING LIBRARY\n=====\ntmp = 'Hello World'\nprint(tmp.lower())\n>> hello world\n\nfoo = tmp.lower()\nprint(foo)\n>> hello world\n\ntype(tmp)\n#>> <class 'str'>\n\n# .count() - Count and return the amount of occurance of the word\/letter asked to count\nprint(tmp.count('l'))\n>> 3\n```","65e59620":"A for loop over a dictionary will loop over its keys","2e717d23":"The `in` operator tells us whether something is a key in the dictionary","49141db7":"One place where the Python language really shines is in the manipulation of strings.\nThis section will cover some of Python's built-in string methods and formatting operations.\n\nSuch string manipulation patterns come up often in the context of data science work, and is one big perk of Python in this context.\n\n## String syntax\n\nYou've already seen plenty of strings in examples during the previous lessons, but just to recap, strings in Python can be defined using either single or double quotations. They are functionally equivalent.","f20a5d3c":"`str.join()` takes us in the other direction, sewing a list of strings up into one long string, using the string it was called on as a separator.","6bafccf6":"To read a full inventory of dictionaries' methods, click the \"output\" button below to read the full help page, or check out the [official online documentation](https:\/\/docs.python.org\/3\/library\/stdtypes.html#dict).","12c1776a":"In addition, Python's triple quote syntax for strings lets us include newlines literally (i.e. by just hitting 'Enter' on our keyboard, rather than using the special '\\n' sequence). We've already seen this in the docstrings we use to document our functions, but we can use them anywhere we want to define a string.","7554e518":"---\n\n\n\n\n*Have questions or comments? Visit the [Learn Discussion forum](https:\/\/www.kaggle.com\/learn-forum\/161283) to chat with other Learners.*","768f2265":"We can use the same syntax to add another key, value pair","c9569a0e":"Double quotes are convenient if your string contains a single quote character (e.g. representing an apostrophe).\n\nSimilarly, it's easy to create a string that contains double-quotes if you wrap it in single quotes:"}}