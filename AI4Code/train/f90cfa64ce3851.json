{"cell_type":{"bb21cfc3":"code","713d03d9":"code","66899f45":"code","c179a23d":"code","a73ecc74":"code","5e1b14eb":"code","f0510206":"code","9ca53861":"code","82c514a1":"code","5ffeadd5":"code","22408aa1":"code","3580e55a":"code","3d907842":"code","833e7962":"code","44f54056":"code","c39a5444":"code","11c22730":"code","cd70d5f8":"code","5f7f6ed3":"code","b2f666c4":"code","b7acdb99":"code","6e5b0d3a":"code","80043802":"code","04a76ffb":"code","0c72ecd7":"code","20fcc6ca":"code","bb1ee60d":"code","ca82030a":"code","ddbbd90e":"code","13c87319":"code","a4bdb437":"code","99baff74":"code","713a7bb2":"code","2011b6b1":"code","9040eab2":"code","84dbc71f":"code","f1159a0e":"code","2edec7ec":"code","34500a92":"code","1d8a6dd5":"code","bfe70b01":"markdown","9e503cf5":"markdown","9c071b1b":"markdown","490fe515":"markdown","e3a51e20":"markdown","09245f16":"markdown","9e98049f":"markdown","70421bbe":"markdown","a231b83f":"markdown","5f9c46b9":"markdown","0e64d8de":"markdown","32ca3741":"markdown","714a7481":"markdown","027663df":"markdown","3f72f6cd":"markdown","bedae0ce":"markdown","cb0f37dd":"markdown","f33a848b":"markdown","4741ed46":"markdown","d365a642":"markdown","0d030437":"markdown"},"source":{"bb21cfc3":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\nimport warnings\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\n\nwarnings.filterwarnings(\"ignore\")\n\nimport inspect\n\nfrom scipy.stats import norm, skew\nfrom scipy.special import boxcox1p\n## pre process \nfrom sklearn.preprocessing import LabelEncoder, StandardScaler\n\n#Selection And Cross Validation \nfrom sklearn.model_selection import KFold, cross_val_score, train_test_split,GridSearchCV\n\n#Modles\nfrom sklearn.linear_model import Ridge\nfrom sklearn.base import BaseEstimator, TransformerMixin, RegressorMixin, clone\n\n# scoring \nfrom sklearn.metrics import mean_squared_error,r2_score","713d03d9":"train_df = pd.read_csv(r'..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest_df = pd.read_csv(r'..\/input\/house-prices-advanced-regression-techniques\/test.csv')\ndf = train_df.copy()\ntarget = np.log1p(train_df.SalePrice.copy())\ntarget","66899f45":"train_df.info()","c179a23d":"numerical = df.select_dtypes(include = ['int64','float64'])","a73ecc74":"numerical","5e1b14eb":"null_num = numerical.isna().sum()\nnulled = null_num[null_num>0].to_frame()\nnulled","f0510206":"sns.distplot(numerical.LotFrontage);","9ca53861":"sns.distplot(numerical.MasVnrArea);","82c514a1":"sns.distplot(numerical.GarageYrBlt);","5ffeadd5":"fig, ax = plt.subplots(figsize=(10, 6))\nsns.heatmap(numerical.corr());","22408aa1":"df[['GarageYrBlt','GarageArea','GarageType', 'GarageFinish', 'GarageQual', 'GarageCond','GarageYrBlt']]\\\n[df.GarageYrBlt.isnull()].isna().sum()","3580e55a":"categorical = df.select_dtypes(object)\ncategorical.columns","3d907842":"cat = categorical.isnull().sum().sort_values()\nnull_cat = cat[cat > 0].to_frame()\nnull_cat","833e7962":"sns.countplot(df.Electrical);","44f54056":"df = pd.concat((train_df, test_df)).reset_index(drop=True)\ndf.drop(['SalePrice'], axis=1, inplace=True)\nprint(\"all_data size is : {}\".format(df.shape))","c39a5444":"df[\"LotFrontage\"] = df.groupby(\"Neighborhood\")[\"LotFrontage\"].transform(lambda x: x.fillna(train_df.LotFrontage.median()))","11c22730":"df[\"LotFrontage\"].isna().sum()","cd70d5f8":"df.MasVnrArea.fillna(0, inplace = True)","5f7f6ed3":"df[\"MasVnrArea\"].isna().sum()","b2f666c4":"df.GarageYrBlt.fillna(0,inplace = True)","b7acdb99":"cols = ['GarageType', 'GarageFinish', 'GarageQual', 'GarageCond','GarageYrBlt']\nfor col in cols:\n    df[col].fillna('Not_existing',inplace = True)","6e5b0d3a":"df[['GarageYrBlt','GarageArea','GarageType', 'GarageFinish', 'GarageQual', 'GarageCond','GarageYrBlt']]\\\n[df.GarageYrBlt.isnull()].isna().sum()","80043802":"co = ['MSZoning' , 'Utilities' , 'Exterior1st' , 'Exterior2nd' , 'KitchenQual' , 'Functional' , 'GarageCars' , 'GarageArea' ,'SaleType' ,'Electrical']\nfor c in co: \n    df[c].fillna(train_df[c].mode()[0],inplace = True)","04a76ffb":"does_not_exist = ['MasVnrType','BsmtCond','BsmtQual','BsmtFinType1','BsmtExposure','BsmtFinType2',\n                  'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF','TotalBsmtSF', 'BsmtFullBath', 'BsmtHalfBath'\n                  ,'FireplaceQu','Fence','Alley','MiscFeature','PoolQC']\nfor column in does_not_exist:\n    df[column].fillna('Not_existing',inplace = True)","0c72ecd7":"df.isnull().sum().sort_values()","20fcc6ca":"nul = df.isna().sum()\nd = nul[nul>0]\nd","bb1ee60d":"ord = ('FireplaceQu', 'BsmtQual', 'BsmtCond', 'GarageQual', 'GarageCond', \n        'ExterQual', 'ExterCond','HeatingQC', 'PoolQC', 'KitchenQual', 'BsmtFinType1', \n        'BsmtFinType2', 'Functional', 'Fence', 'BsmtExposure', 'GarageFinish', 'LandSlope',\n        'LotShape', 'PavedDrive', 'Street', 'Alley', 'CentralAir')\nfor o in ord:\n    lab = LabelEncoder()\n    lab.fit(list(df[o].values))\n    df[o] = lab.transform(list(df[o].values))","ca82030a":"pd.set_option('display.max_columns', None)\ndf[df.duplicated()]\n","ddbbd90e":"df.drop([\"Id\"], axis=1, inplace=True)","13c87319":"df = pd.get_dummies(df)\n\ntrain = df[:train_df.shape[0]]\ntest = df[train_df.shape[0]:]\ntrain.shape\n","a4bdb437":"X_train, X_test, y_train, y_test = train_test_split(train, target, test_size=0.2, random_state=42)","99baff74":"params = {'alpha': [0.0001, 0.001, 0.01, 0.05, 0.1, \n                 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 2.0, 3.0, \n                 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 20, 50, 100]\n         }\n\n\nridge = Ridge()\n\nfolds = 5\nmodel_cv = GridSearchCV(estimator = ridge, \n                        param_grid = params, \n                        scoring= 'neg_mean_squared_error', \n                        cv = folds, \n                        return_train_score=True,\n                        verbose = 1)    \n\nmodel_cv.fit(X_train, y_train) ","713a7bb2":"ridge = model_cv.best_estimator_\n","2011b6b1":"y_train_pred_ridge = ridge.predict(X_train)\nprint(r2_score(y_true=y_train, y_pred=y_train_pred_ridge))","9040eab2":"y_test_pred_ridge = ridge.predict(X_test)\nprint(r2_score(y_true=y_test, y_pred=y_test_pred_ridge))","84dbc71f":"print ('RMSE Validation is: \\n', mean_squared_error(y_test, y_test_pred_ridge))\n","f1159a0e":"preds = np.exp(ridge.predict(test))","2edec7ec":"predictions = pd.DataFrame({'Id': test_df['Id'] ,'SalePrice': preds })","34500a92":"predictions.to_csv(\"preds.csv\",index=False)","1d8a6dd5":"predictions.SalePrice","bfe70b01":"### sence it's distrbuted arround 0 I'll fill the missing with 0","9e503cf5":"### as Garage data are all related it will be filled with Not_existing","9c071b1b":"### most of data is at SBrkr so we can fill the data with mode","490fe515":"### ordinal encoding for some features","e3a51e20":"### obviously this is not duplication in data due to year built is diffrent and other parms like Lot Area 1stFlrSF and 2ndFlrSF\t","09245f16":"### GarageYrBlt distribution","9e98049f":"### almost normal so I'll fill the missing data with the median of the data","70421bbe":"### LotFrontage distribution","a231b83f":"### checking for duplication","5f9c46b9":"### the rest of categorical data with nulls","0e64d8de":"### now we have finished missing data imputing some feature engineering","32ca3741":"### Filling GarageYrBlt with zeros","714a7481":"### all garage data are the same lost data in all its fields so we can impute them as a whole as no garage or 0 in numeric data","027663df":"### now by looking at data description I created a list of categorical data that includes columns with null data means the feature doesn't exist in the reality so it will be filled with not exiting ","3f72f6cd":"### computing missing data","bedae0ce":"### as we have finished imputing numerical data it's time to go for categorical data","cb0f37dd":"### sence it doesn't indicate anything I'll look on the rest of the Garage data","f33a848b":"### sence most of the data is at SBrkr I'll fill the missing with the mode","4741ed46":"### filling MasVnrArea with zeros","d365a642":"### filling LotFrontage with median","0d030437":"### MasVnrArea distribution "}}