{"cell_type":{"f901c53c":"code","b8cb723c":"code","a3ccfd9f":"code","9a84eeb1":"code","16f554ae":"code","e263687d":"markdown","00184e5f":"markdown"},"source":{"f901c53c":"import numpy as np\nimport pandas as pd\nimport plotly.express as px\nimport random\n\nnum_samples = 100_000\npositive_rate = 0.05\n\npopulation = [random.random()<positive_rate for _ in range(num_samples)]\n\nsamples_per_test = []\n\nfor group_size in range(1,101):\n    tests = 0\n    for i in range(0, num_samples, group_size):\n        tests += 1\n        if group_size>1 and any(population[i:i+group_size]):\n            tests += group_size\n    samples_per_test.append(num_samples\/tests)\n\nres = pd.DataFrame({\"GroupSize\": range(1,101), \"SamplesPerTest\": samples_per_test})\nfig = px.line(res, x=\"GroupSize\", y=\"SamplesPerTest\")\nfig.show()\n","b8cb723c":"positive_rates = [0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.10]\ntest_throughputs = pd.DataFrame({\"PositiveRate\": positive_rates, \"OptimalGroupSize\": np.nan, \"EstimatedPatientsPerTest\": np.nan })\n\nfor positive_rate in positive_rates:\n    population = [random.random()<positive_rate for _ in range(num_samples)]\n    samples_per_test = []\n\n    for group_size in range(1,101):\n        tests = 0\n        for i in range(0, num_samples, group_size):\n            tests += 1\n            if group_size>1 and any(population[i:i+group_size]):\n                tests += group_size\n        samples_per_test.append(num_samples\/tests)\n\n    res = pd.DataFrame({\"GroupSize\": range(1,101), \"SamplesPerTest\": samples_per_test})\n    res = res.sort_values(by=\"SamplesPerTest\", ascending=False).reset_index()\n    test_throughputs.loc[test_throughputs[\"PositiveRate\"]==positive_rate, \"OptimalGroupSize\"] = res[\"GroupSize\"][0]\n    test_throughputs.loc[test_throughputs[\"PositiveRate\"]==positive_rate, \"EstimatedPatientsPerTest\"] = res[\"SamplesPerTest\"][0]\n\ntest_throughputs","a3ccfd9f":"fig = px.line(test_throughputs, x=\"PositiveRate\", y=\"OptimalGroupSize\")\nfig.show()","9a84eeb1":"def tests_required(ground_truth):\n    if len(ground_truth)<=1:\n        return 1\n    elif not any(ground_truth):\n        return 1\n    else:\n        cutoff = int(len(ground_truth)\/2)\n        return tests_required(ground_truth[:cutoff]) + tests_required(ground_truth[cutoff:])\n\nassert tests_required([True])==1\nassert tests_required([False])==1\nassert tests_required([False,False])==1\nassert tests_required([False,True])==2\nassert tests_required([False,False,False,True])==3","16f554ae":"population = [random.random()<positive_rate for _ in range(num_samples)]\n\nsamples_per_test = []\n\ndef test_required(ground_truth):\n    if len(ground_truth)==1:\n        return 1\n    elif not any(ground_truth):\n        return 1\n    else:\n        cutoff = int(len(ground_truth)\/2)\n        return tests_required(ground_truth[:cutoff]) + tests_required(ground_truth[cutoff:])\n\nfor group_size in range(1,101):\n    tests = 0\n    for i in range(0, num_samples, group_size):\n        tests += tests_required(population[i:i+group_size])\n    samples_per_test.append(num_samples\/tests)\n\nres = pd.DataFrame({\"GroupSize\": range(1,101), \"SamplesPerTest\": samples_per_test})\nfig = px.line(res, x=\"GroupSize\", y=\"SamplesPerTest\")\nfig.show()\n","e263687d":"# Running >2 tests per patient","00184e5f":"# Running up to 2 tests\/patient\n\nThis simulates running N patient samples in a single combined test initially. If the result comes back negative, then we assume each patient in the group is negative. If the results come back positive, then we test each patient sample individually to identify which patient(s) caused the test to be positive."}}