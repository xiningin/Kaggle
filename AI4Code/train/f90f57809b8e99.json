{"cell_type":{"cdd8fc7a":"code","612437be":"code","fd34899a":"code","7b2bf8fe":"code","7db66b19":"code","eee92a20":"code","e92e0886":"code","cf030f29":"code","95840b94":"code","d5c9e1c3":"code","66848fe6":"code","7d7b919e":"code","966f0fda":"code","028d523c":"code","5cdee15c":"code","494cbded":"code","4568ccf8":"code","32d21a08":"code","f4dee943":"code","7663b7ac":"code","3cccd3e8":"code","c5b60f5e":"code","c0c0543c":"code","838cda1d":"code","4d766510":"code","0d7fab86":"code","ed43bd24":"code","29ef320b":"code","b824488e":"code","5624e2d4":"code","790885ab":"code","607daa7a":"code","1406dae5":"code","5ab32e2f":"code","fa907277":"code","9c158e0b":"code","458756f8":"code","fc57b69a":"code","8ec44ec6":"code","8575d81d":"code","3a0bad70":"code","35413c66":"code","31b21a87":"code","ec35a33c":"code","0f7a59ba":"code","c4d5b0ca":"code","30b48d8f":"code","9bc883d0":"code","1831e9c2":"code","5c4b145d":"code","61ff960e":"code","e5cd27f6":"code","660ea545":"code","5656f308":"code","36020ef6":"code","293a4eeb":"code","41e7a40b":"code","60749cb9":"code","90618974":"code","505a1394":"code","9d0415e5":"code","c0e6415e":"code","6d5ebd08":"code","ce5569a7":"code","f5e231d6":"code","d76cbd42":"code","01d4b0a1":"code","9b860e14":"code","5bb2114c":"code","e0744356":"code","7ecaaf05":"code","9e042fca":"code","e51d5b88":"code","61c88db8":"code","2c1d3e54":"code","5100a31f":"code","87d6c317":"code","5c522b8d":"code","f3d22b9b":"code","5c988576":"code","8f56f7f8":"code","c2d7cc05":"code","87098d62":"code","bab9b8e8":"code","805c5cca":"code","1b17cb8a":"code","190d68fa":"code","fa0a1ef1":"code","e6d760b1":"code","666ac01d":"code","374b78e8":"code","51a41935":"code","8d169e51":"code","9fcb5352":"code","14092b50":"code","abc999cb":"code","9902b124":"code","5052071e":"code","f5f32290":"code","9dc9f2db":"code","98358fa1":"code","627264d8":"code","178d6436":"code","21bc2dfb":"code","0553fd91":"code","7cc66a75":"markdown","f976ea1a":"markdown","9b6eac2c":"markdown","52ca09e2":"markdown","8148f8d1":"markdown","5dd7bf9f":"markdown","e60e7964":"markdown","db1a93c1":"markdown","1f16320b":"markdown","fc91c1cc":"markdown","a60e29f7":"markdown","ad5b3bf9":"markdown","f128b090":"markdown","ca322c22":"markdown","edb0c3a1":"markdown","94cbb72a":"markdown","7c6930ee":"markdown","3c46aaec":"markdown","bf1a5fe3":"markdown","3f2a53e9":"markdown"},"source":{"cdd8fc7a":"import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport statsmodels.api as sm\nfrom math import radians\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.linear_model import Ridge\nfrom sklearn.metrics import mean_absolute_error,accuracy_score,mean_squared_error\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.preprocessing import MinMaxScaler\n","612437be":"def CorrMtx(df, dropDuplicates = True):\n\n    # Your dataset is already a correlation matrix.\n    # If you have a dateset where you need to include the calculation\n    # of a correlation matrix, just uncomment the line below:\n    # df = df.corr()\n\n    # Exclude duplicate correlations by masking uper right values\n    if dropDuplicates:    \n        mask = np.zeros_like(df, dtype=np.bool)\n        mask[np.triu_indices_from(mask)] = True\n\n    # Set background color \/ chart style\n    sns.set_style(style = 'white')\n\n    # Set up  matplotlib figure\n    f, ax = plt.subplots(figsize=(22, 19))\n\n    # Add diverging colormap from red to blue\n    cmap = sns.diverging_palette(250, 10, as_cmap=True)\n\n    # Draw correlation plot with or without duplicates\n    if dropDuplicates:\n        sns.heatmap(df, mask=mask, cmap=cmap, \n                square=True,\n                linewidth=.5, cbar_kws={\"shrink\": .5}, ax=ax, annot=True)\n    else:\n        sns.heatmap(df, cmap=cmap, \n                square=True,\n                linewidth=.5, cbar_kws={\"shrink\": .5}, ax=ax, annot=True)\n","fd34899a":"house = pd.read_csv('..\/input\/housesalesprediction\/kc_house_data.csv')\ncheckhouse = pd.read_csv('..\/input\/housesalesprediction\/kc_house_data.csv')","7b2bf8fe":"house.head()","7db66b19":"house.describe()","eee92a20":"#formatting check\n(house['date'][0][:8])","e92e0886":"house['newdate'] = [house.date[i][:8] for i in range(len(house.date))]","cf030f29":"total = house.isnull().sum().sort_values(ascending=False)\npercent = (house.isnull().sum()\/house.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data.head(20)","95840b94":"categorical_feats = ['bedrooms', 'bathrooms', 'floors', 'waterfront', 'view', 'condition', 'grade', 'zipcode', 'yr_built', 'yr_renovated']","d5c9e1c3":"plt.figure(figsize = (10,6))\nsns.boxplot(x=house.condition, y=house.price)\nplt.ylabel('Price in Millions')\nplt.ylim(0,1250000)\nplt.xlabel('Condition')\nplt.show()","66848fe6":"plt.figure(figsize = (12,6))\nsns.boxplot(x=house.grade, y=house.price)\nplt.ylabel('Price in Millions')\nplt.ylim(0,6e6)\nplt.xlabel('Grade')\nplt.show()","7d7b919e":"plt.figure(figsize = (15,6))\nsns.boxplot(x=house.zipcode, y=house.price)\nplt.ylabel('Price in Millions')\nplt.ylim(0,3.5e6)\nplt.xlabel('Zipcode')\nplt.xticks(rotation=90)\nplt.show()","966f0fda":"plt.figure(figsize = (15,6))\nsns.scatterplot(x=house.sqft_living, y=house.price, hue=house.bathrooms)\nplt.ylabel('Price in Millions')\nplt.ylim(0,6e6)\nplt.xlim(0,8000)\nplt.xlabel('Square Feet of House')\nplt.show()","028d523c":"#plt.figure(figsize = (15,6))\n#sns.scatterplot(x=house.age, y=house.grade)\n","5cdee15c":"questionable = house[house.bedrooms > 10]\nquestionable","494cbded":"house = house.drop([15870])\nhouse = house.drop([8757])","4568ccf8":"questionable2 = house[house.bedrooms == 0]\nquestionable2","32d21a08":"for row in questionable2.index:\n    house = house.drop([row])","f4dee943":"questionable3 = house[house.bathrooms == 0]\nquestionable3","7663b7ac":"for row in questionable3.index:\n    house = house.drop([row])","3cccd3e8":"reno_year = house[house.yr_renovated > 0]\nlen(reno_year)","c5b60f5e":"house['renovated'] = np.where(house.yr_renovated > 0, 1, 0)\nhouse['since_reno'] = [(2015 - yr) for yr in house.yr_renovated]\nhouse['since_reno'] = np.where(house.since_reno == 2015, (2015 - house['yr_built']), house['since_reno'])","c0c0543c":"house['has_basement'] = np.where(house.sqft_basement > 0, 1, 0)\nhouse['basement_lot_pct'] = house.sqft_basement \/ house.sqft_living * 100\nhouse['aboveground_lot_pct'] = house.sqft_above \/ house.sqft_living * 100\nhouse['PctofLot'] = round((house.sqft_living \/ house.sqft_lot)*100,2)","838cda1d":"questionable4 = house[house.PctofLot > 100]\nquestionable4","4d766510":"#A check to make sure we don't totally destroy the dataset -- no outstanding issues\n\"\"\"house['likelyApartment'] = np.where(house.PctofLot > 100, 1, 0)\nfor feat in house.columns:\n    plt.figure(figsize = (15,6))\n    sns.scatterplot(x=house[feat], y=house.price, hue=house.likelyApartment) \n    plt.ylabel('Price in Millions')\n    plt.xlabel(feat.title())\n    plt.show()\"\"\"","0d7fab86":"for row in questionable4.index:\n    house = house.drop([row])","ed43bd24":"house['age'] = 2015 - house.yr_built","29ef320b":"house['latRads'] = house['lat'].apply(radians)\nhouse['longRads'] = house['long'].apply(radians)\nknnX = house[['latRads', 'longRads']].values\nknny = house.price.values","b824488e":"X_train, X_test, y_train, y_test = train_test_split(knnX, knny, test_size=0.25)","5624e2d4":"nbrs = KNeighborsRegressor(weights='distance', metric='haversine')\n\nnbrs.fit(X_train, y_train)\n\ny_pred = nbrs.predict(X_test)","790885ab":"house['latLongUseable'] = nbrs.predict(knnX)","607daa7a":"#A check to see about waterfront's affect on pricing\n\"\"\"for feat in house.columns:\n    plt.figure(figsize = (15,6))\n    sns.scatterplot(x=house[feat], y=house.price, hue=house.waterfront) \n    plt.ylabel('Price in Millions')\n    plt.xlabel(feat.title())\n    plt.show()\"\"\"","1406dae5":"categorical_feats += ['renovated', 'since_reno', 'has_basement', 'age']","5ab32e2f":"houseMatrix = house.corr()\nCorrMtx(houseMatrix, True)","fa907277":"house.columns","9c158e0b":"nonproblematic = ['price', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'yr_built', 'yr_renovated', 'zipcode',\n                 'lat', 'long', 'newdate']","458756f8":"nonProbHouse = house[nonproblematic]\nhouseMatrix = nonProbHouse.corr()\nCorrMtx(houseMatrix, True)","fc57b69a":"isproblem = nonproblematic + ['renovated', 'since_reno', 'has_basement', 'basement_lot_pct', 'aboveground_lot_pct', \n                              'PctofLot', 'age', 'latRads', 'longRads', 'latLongUseable']","8ec44ec6":"isProbHouse = house[isproblem]\nhouseMatrix = isProbHouse.corr()\nCorrMtx(houseMatrix, True)","8575d81d":"#Another check, removing more variables\nisproblem2 = ['price', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'renovated', 'since_reno', \n             'has_basement', 'PctofLot', 'latLongUseable']","3a0bad70":"isProbHouse = house[isproblem2]\nhouseMatrix = isProbHouse.corr()\nCorrMtx(houseMatrix, True)","35413c66":"barchart = isProbHouse.corr()\nbarchart = barchart.iloc[0]\nbarchart = barchart.drop('price')\nbarchart = barchart.sort_values(ascending=False)\nbarchart = barchart.reset_index()\nbarchart = barchart.rename({'index':'labels'}, axis='columns')\nbarchart.labels","31b21a87":"xticks = barchart.index\nxlabels = barchart.labels","ec35a33c":"plt.clf()\nplt.figure(figsize=(15,10))\nxs = barchart.index\nys = barchart.price\nsns.barplot(xs, ys)\n\n\nfor x,y in zip(xs,ys):\n\n    label = \"{:.2f}\".format(y)\n\n    plt.annotate(label, # this is the text\n                 (x,y), # this is the point to label\n                 textcoords=\"offset points\", # how to position the text\n                 xytext=(0,10), # distance from text to points (x,y)\n                 ha='center') # horizontal alignment can be left, right or center\n\nplt.xticks(xticks, xlabels, rotation=90)\nplt.title('Correlation Coefficient Weights, Sorted')\nplt.ylabel('Price')\nplt.xlabel('Feature')\nplt.show()","0f7a59ba":"features = isproblem2[1:]","c4d5b0ca":"X = house[features]\nlinX = sm.add_constant(X)\ny = house.price","30b48d8f":"model = sm.OLS(y,linX).fit()\nlinPred = model.predict(linX)\nlinR2 = round(model.rsquared, 2)\nprint(model.summary())\nprint('MAE: ', mean_absolute_error(linPred, y))","9bc883d0":"train_x,val_x,train_y,val_y=train_test_split(X,y,train_size=0.8,test_size=0.2)","1831e9c2":"RFRmodel=RandomForestRegressor(random_state=1)\nRFRmodel.fit(train_x,train_y)\nRFRpred=RFRmodel.predict(val_x)\nrfrScore = RFRmodel.score(val_x,val_y)\nprint(\"Mean absolute error:\",mean_absolute_error(RFRpred,val_y))\nprint(\"Model score\",RFRmodel.score(val_x,val_y))","5c4b145d":"feature_importances = pd.DataFrame(RFRmodel.feature_importances_,\n                                   index = train_x.columns,\n                                    columns=['importance']).sort_values('importance', ascending=False)\nfeature_importances","61ff960e":"resid = pd.DataFrame()\nresid['true'] = house.price","e5cd27f6":"resid['lin_resid'] = house.price - model.predict(linX)\nresid['lin_pred'] = model.predict(linX)","660ea545":"resid['rfr_resid'] = house.price - RFRmodel.predict(X)\nresid['rfr_pred'] = RFRmodel.predict(X)","5656f308":"plt.figure(figsize = (15,10))\nplt.text(4,4000000,'R-squared = '+str(linR2), size=20) #HOW TO GET A R2 at a Point\nax1 = plt.subplot()\nax1.axhline(0, ls='solid', color='red')\nsns.scatterplot(x=resid.index, y=resid.lin_resid, ax=ax1)\nplt.show()","36020ef6":"df = resid.lin_resid\nplt.figure(figsize = (15,10))\nplt.text(2e6,3e-6,'R-squared = '+str(linR2), size=20) #HOW TO GET A R2 at a Point\nsns.kdeplot(data=df)\nplt.show()","293a4eeb":"plt.figure(figsize = (15,10))\nplt.text(4,2e6,'R-squared = '+str(round(rfrScore,2)), size=20) #HOW TO GET A R2 at a Point\nax2 = plt.subplot()\nax2.axhline(0, ls='solid', color='red')\nsns.scatterplot(x=resid.index, y=resid.rfr_resid, ax=ax2)\nplt.title('RandomForest Residuals')\nplt.show()","41e7a40b":"df = resid.rfr_resid\nplt.figure(figsize = (15,10))\nplt.text(1e6,1e-5,'R-squared = '+str(round(rfrScore,2)), size=20) #HOW TO GET A R2 at a Point\nsns.kdeplot(data=df)\nplt.title('RandomForest Residual Distribution')\nplt.show()","60749cb9":"resid['pctFromLinTrue'] = abs(round(resid.lin_resid \/ resid.true *100, 2))\nresid['pctFromRFRTrue'] = abs(round(resid.rfr_resid \/ resid.true *100, 2))","90618974":"print(max(resid.pctFromLinTrue))\nprint(max(resid.pctFromRFRTrue))","505a1394":"linDist = []\nrfrDist = []\nfor test in range(0,270):\n    lin = sum(resid.pctFromLinTrue <= test) \/ len(resid)\n    rfr = sum(resid.pctFromRFRTrue <= test) \/ len(resid)\n    linDist.append(lin)\n    rfrDist.append(rfr)","9d0415e5":"linDist = pd.DataFrame(linDist)\nrfrDist = pd.DataFrame(rfrDist)","c0e6415e":"plt.figure(figsize=(15,10))\nsns.scatterplot(x=linDist.index, y=linDist[0])\nplt.title('Linear Regression Model')\nplt.ylabel('Pct of Homes Estimated within each Pct Point')\nplt.xlabel('Pct Points Away From True Price')\nplt.show()","6d5ebd08":"plt.figure(figsize=(15,10))\nsns.scatterplot(x=rfrDist.index, y=rfrDist[0])\nplt.title('RandomForest Model')\nplt.ylabel('Pct of Homes Estimated within each Pct Point')\nplt.xlabel('Pct Points Away From True Price')\nplt.show()","ce5569a7":"standardized = features + ['price']","f5e231d6":"min_max_scaler = MinMaxScaler()\nhouseCopy = house.copy(deep=True)\nhouseCopy[standardized] = min_max_scaler.fit_transform(houseCopy[standardized])\nhouseCopy.head()","d76cbd42":"lNX = houseCopy[features]\nlNy = houseCopy.price","01d4b0a1":"train_x,val_x,train_y,val_y=train_test_split(lNX,lNy,train_size=0.8,test_size=0.2)\nridgeModel = Ridge(alpha=1.0)\nridgeModel.fit(train_x, train_y)\nridgePred = ridgeModel.predict(val_x)\nridgeRsquared = ridgeModel.score(val_x,val_y)\nprint(\"Mean absolute error:\",mean_absolute_error(ridgePred,val_y))\nprint(\"Model score\",ridgeRsquared)","9b860e14":"resid['std_true'] = houseCopy.price\nresid['ridge_pred'] = ridgeModel.predict(lNX)\nresid['ridge_resid'] = resid.std_true - resid.ridge_pred","5bb2114c":"train_x,val_x,train_y,val_y=train_test_split(X,y,train_size=0.8,test_size=0.2)\nlassoModel = Lasso(alpha=1.0, tol=.01)\nlassoModel.fit(train_x, train_y)\nlassoPred = lassoModel.predict(val_x)\nlassoRsquared = lassoModel.score(val_x,val_y)\nprint(\"Mean absolute error:\",mean_absolute_error(lassoPred,val_y))\nprint(\"Model score\",lassoRsquared)","e0744356":"resid['lasso_pred'] = lassoModel.predict(X)\nresid['lasso_resid'] = resid.true - resid.lasso_pred","7ecaaf05":"plt.figure(figsize = (15,10))\n#plt.text(4,4000000,'R-squared = '+str(ridgeRsquared), size=20) #HOW TO GET A R2 at a Point\nax1 = plt.subplot()\nax1.axhline(0, ls='solid', color='red')\nsns.scatterplot(x=resid.index, y=resid.ridge_resid, ax=ax1)\nplt.show()","9e042fca":"df = resid.ridge_resid\nplt.figure(figsize = (15,10))\n#plt.text(2e6,3e-6,'R-squared = '+str(ridgeRsquared), size=20) #HOW TO GET A R2 at a Point\nsns.kdeplot(data=df)\nplt.show()","e51d5b88":"plt.figure(figsize = (15,10))\n#plt.text(4,4000000,'R-squared = '+str(ridgeRsquared), size=20) #HOW TO GET A R2 at a Point\nax1 = plt.subplot()\nax1.axhline(0, ls='solid', color='red')\nsns.scatterplot(x=resid.index, y=resid.lasso_resid, ax=ax1)\nplt.show()","61c88db8":"df = resid.lasso_resid\nplt.figure(figsize = (15,10))\n#plt.text(2e6,3e-6,'R-squared = '+str(ridgeRsquared), size=20) #HOW TO GET A R2 at a Point\nsns.kdeplot(data=df)\nplt.show()","2c1d3e54":"resid['pctFromLassoTrue'] = abs(round((resid.lasso_resid \/ resid.true) *100, 2))","5100a31f":"resid['pctFromRidgeTrue'] = np.where(resid.std_true > 0, \n                                     abs(resid.ridge_resid \/ resid.std_true)*100,\n                                     0)","87d6c317":"lassoDist = [(sum(resid.pctFromLassoTrue <= test) \/ len(resid)) for test in range(0,378)]\nridgeDist = [(sum(resid.pctFromRidgeTrue <= test) \/ len(resid)) for test in range(0, 5921)]","5c522b8d":"lassoDist = pd.DataFrame(lassoDist)\nridgeDist = pd.DataFrame(ridgeDist)","f3d22b9b":"plt.figure(figsize=(15,10))\nsns.scatterplot(x=lassoDist.index, y=lassoDist[0])\nplt.title('Lasso Regression Model')\nplt.ylabel('Pct of Homes Estimated within each Pct Point')\nplt.xlabel('Pct Points Away From True Price')\nplt.show()","5c988576":"plt.figure(figsize=(15,10))\nsns.scatterplot(x=ridgeDist.index, y=ridgeDist[0])\nplt.title('Ridge Regression Model')\nplt.ylabel('Pct of Homes Estimated within each Pct Point')\nplt.xlabel('Pct Points Away From True Price')\nplt.show()","8f56f7f8":"compare = pd.concat([linDist, rfrDist, ridgeDist, lassoDist], axis=1, keys=['Linear', 'RandomForest', 'Ridge', 'Lasso'])","c2d7cc05":"compare","87098d62":"plt.figure(figsize=(15,10))\nsns.lineplot(data=compare)\nplt.title('Comparison of Regression Model')\nplt.ylabel('Pct of Homes Estimated within each Pct Point')\nplt.xlabel('Pct Points Away From True Price')\nplt.xlim(-1,75)\nplt.show()","bab9b8e8":"rfrPctCaptured = compare.RandomForest.head(21)\nrfrPctCaptured","805c5cca":"len(house)","1b17cb8a":"len(checkhouse)","190d68fa":"plt.figure(figsize = (12,6))\nsns.boxplot(x=house.has_basement, y=house.price)\nplt.ylim(0,1.25e6)\nplt.ylabel('Price')\nplt.xlabel('Basement')\nplt.show()","fa0a1ef1":"plt.figure(figsize = (12,6))\n\nsns.boxplot(x=house.view, y=house.price)\nplt.ylabel('Price')\nplt.ylim(0,3e6)\nplt.xlabel('View')\nplt.show()","e6d760b1":"plt.figure(figsize = (12,6))\nsns.boxplot(x=house.floors, y=house.price)\nplt.ylim(0,1.25e6)\nplt.ylabel('Price')\nplt.xlabel('Basement')\nplt.show()","666ac01d":"plt.figure(figsize = (12,6))\nsns.boxplot(x=house.renovated, y=house.price)\nplt.ylim(0,1.75e6)\nplt.ylabel('Price')\nplt.xlabel('Renovated')\nplt.show()","374b78e8":"plt.figure(figsize = (12,6))\nsns.scatterplot(x=house.sqft_lot, y=house.price, hue=house.PctofLot)\nplt.xlim(0, .5e6)\n#plt.ylim(0,2e6)\nplt.xlabel('Square Feet of Lot')\nplt.ylabel('Price')","51a41935":"plt.figure(figsize = (12,6))\nsns.scatterplot(x=house.sqft_lot, y=house.price, hue=house.grade)\nplt.xlim(0, 1e5)\nplt.ylim(0,4e6)\nplt.xlabel('Square Feet of Lot')\nplt.ylabel('Price')","8d169e51":"plt.figure(figsize = (12,6))\nsns.scatterplot(x=house.sqft_living, y=house.price, hue=house.grade)\n#plt.xlim(0, 1e5)\n#plt.ylim(0,4e6)\nplt.xlabel('Square Feet of Lot')\nplt.ylabel('Price')","9fcb5352":"plt.figure(figsize = (12,6))\nsns.scatterplot(x=house.yr_built, y=house.price, hue=house.renovated)\n#plt.xlim(0, .5e6)\n#plt.ylim(0,2e6)\nplt.xlabel('Year Built')\nplt.ylabel('Price')","14092b50":"reno = house[house.renovated == 1]\nnoReno = house[house.renovated == 0]\nprint(reno.price.mean())\nprint(noReno.price.mean())","abc999cb":"reno.price.mean() - noReno.price.mean()","9902b124":"(reno.price.mean() - noReno.price.mean()) \/ noReno.price.mean()","5052071e":"basemnt = house[house.has_basement == 1]\nnoBasemnt = house[house.has_basement == 0]\nprint(basemnt.price.mean())\nprint(noBasemnt.price.mean())","f5f32290":"(basemnt.price.mean() - noBasemnt.price.mean()) \/ noBasemnt.price.mean()","9dc9f2db":"view4 = house[house.view < 4]\nview5 = house[house.view == 4]\nprint(view4.price.mean())\nprint(view5.price.mean())","98358fa1":"(view5.price.mean() - view4.price.mean()) \/ view4.price.mean()","627264d8":"wtft = house[house.waterfront == 1]\nnowtft = house[house.waterfront == 0]\nprint(wtft.price.mean())\nprint(nowtft.price.mean())","178d6436":"(wtft.price.mean() - nowtft.price.mean()) \/ nowtft.price.mean()","21bc2dfb":"meh = house[house.condition < 3]\ngood = house[house.condition >= 3]\nprint(meh.price.mean())\nprint(good.price.mean())","0553fd91":"(good.price.mean() - meh.price.mean()) \/ meh.price.mean()","7cc66a75":"Hmm...so to help our analysis, let's only address conventional homes...It will be unfortunate to lose 800 rows but...gotta do what you gotta do.\nHere, we will remove anything that looks like an apartment and leave more likely to be conventional homes -- house on lot with lawn, so on","f976ea1a":"Okay, looking much better...\nThere are still some issues with collinearity but we have made some (hopefully) intelligent decisions about what stays in the model. All remaining features ideally should tell us something about houses and, in theory, should be *relatively* independent of each other. Grade \/ sqft living is troubling, but we want to believe a higher sqft living shouldn't mean a higher grade...\n\nSince reno is years since renovation defaulting to total age of the house. This is an assumption that a renovated house ought to be \"like new\" -- and age was an imperfect measure that, when included, leads to more collinearity concerns. Hopefully since reno gives us ultimately more information. ","9b6eac2c":"It's a bit sad to drop 3 more rows, but 18\/20k+ entries is probably insignificant. Let's now work on some feature engineering\n-- how about looking back at renovation year. There are 913 entries with renovations, which is not alot...","52ca09e2":"Let's make our final features and then create some models and plot their residuals","8148f8d1":"To use a ridge regression, we have to scale the data","5dd7bf9f":"Let's load and examine the data","e60e7964":"Let's visually explore the data with graphs","db1a93c1":"Maybe having a basement affects price. You can imagine in a floodplain, a basement may not be so great! But other people may appreciate the space","1f16320b":"Checking to see if features \"isproblem\"? -- we add some features to check collinearity","fc91c1cc":"How much data is within each percentage point using the RFR model? In the next table, the index is the percentage from true -- .8pct of the dataset is exactly precise. 43.78% of the predictions are within 1% of the true price. 59.91% of the predictions are within 2% of the true price...and so on.","a60e29f7":"* bedrooms: bathrooms, sqft_living\n* bathrooms: sqft_living, sqft_above, grade\n* sqft_living: sqft_living15, sqft_above, grade, bathrooms, bedrooms\n* sqft_lot: sqft_lot15\n* floors: OK\n* waterfront: OK (slight view)\n* view: OK\n* condition: OK (yr_built)\n* grade: sqft_living15, sqft_above, bathrooms, sqft_living\n* sqft_above: sqft_living15, grade\n* sqft_basement:OK\n* yr_built: OK\n* yr_renovated: OK\n* zip: OK\n* lat: OK\n* long: OK\n* sqft_living15: OK\n* sqft_lot15: sqft_lot\n\nSo problematic vars are bathrooms, sqft_above, bathrooms, bedrooms, sqft_living15, sqft_lot15, and to a lesser extent grade","ad5b3bf9":"Okay, so now we've done some good features. Let's also convert lat\/long into radians so they make sense to the model and send them into\na KNNeighbors coordinate","f128b090":"This concludes this exercise. We have seen that many factors influence house price, but location (here in latLongUseable KNN points) is the most important determining factor of price, followed by sqft_living. This seems to make sense as sqft_living also encapsulates bathrooms and bedrooms, with which it had high correlation. ","ca322c22":"Some final chart renders for exporting to slides...","edb0c3a1":"Time to get to work! Let's look at some of the outlier data...","94cbb72a":"So we have now reduced the dataset by 15 rows to help us to get a better prediction model. We eliminated the 33 and 11 bedroom houses\nas these seemed to be erroneous...semi. We also removed houses with no bedrooms (not a house!) It would be hard to believe\na house didn't have a bathroom so let's get after that next.","7c6930ee":"Great, no missing data!","3c46aaec":"remove: year_built, yr_renovated, zipcode, lat, long, latRads, longRads","bf1a5fe3":"Calculations, also for slides...","3f2a53e9":"A check on how many rows have been eliminated, just to be sure we have a significant result in terms of removed rows"}}