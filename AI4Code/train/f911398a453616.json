{"cell_type":{"4879c52e":"code","7d0794f2":"code","d9b6a003":"code","de476efa":"code","83481abe":"code","4c93eb19":"markdown","078ae9ea":"markdown","751170b9":"markdown","504a1e26":"markdown","05c17353":"markdown","54f409b0":"markdown"},"source":{"4879c52e":"import sys\nsys.path.append('..\/input')\nfrom flight_revenue_simulator import simulate_revenue, score_me\n","7d0794f2":"import random\ndef pricing_function(days_left, tickets_left, demand_level):\n    \"\"\"Sample pricing function\"\"\"\n    return random.randint(1,500)","d9b6a003":"def hasNumbers(inputString):\n    return any(char.isdigit() for char in inputString)\n\ndef strip_string(output):\n    data_from_string = list()\n    lines = output.split('\\n')\n    for line in lines:\n        if hasNumbers(line):\n            days_left = line.split(' ')[0]\n            started_with_seats = line.split('with ')[1].split(' seats.')[0]\n            demand_level = line.split('level: ')[1].split('. Price set')[0]\n            price_ticket = line.split('to $')[1].split('. Sold')[0]\n            tickets_sold = line.split('Sold ')[1].split(' tickets.')[0]\n            daily_revenue = line.split('Daily revenue is ')[1].split('. Total revenue')[0]\n            total_rev = line.split('date is ')[1].split('. ')[0]\n            seats_remaining = line.split('date is ')[1].split('. ')[1].split(' seats')[0]\n            data_from_string.append([days_left,started_with_seats,demand_level,price_ticket,tickets_sold,daily_revenue,total_rev,seats_remaining])\n        else:\n            break\n        \n    return data_from_string\n        ","de476efa":"from contextlib import redirect_stdout\nfrom io import StringIO\nimport pandas as pd\nall_data_list = list()\ndays_numbers = [100,14,2,1]\ntickets = [100,50,20,3]\nfor day_number in days_numbers:\n    for ticket in tickets: \n        for i in range(500000):\n            out_buffer = StringIO()\n        #     sys.stdout.write(\"\\rDoing thing %i\" % i)\n        #     sys.stdout.flush()\n            with redirect_stdout(out_buffer):\n                simulate_revenue(days_left=day_number, tickets_left=ticket, pricing_function=pricing_function, verbose=True)\n            out_str = out_buffer.getvalue()\n            # print(out_str)\n\n            data = strip_string(out_str)\n            all_data_list.append(data)\n\n        all_data = list()\n        for data in all_data_list:\n            for day in data:\n                all_data.append(day)\n\n# print(all_data)\nairline_price_data = pd.DataFrame(all_data, \n                                columns=['days_left', 'started_with_seats','demand_level','price_ticket','tickets_sold','daily_revenue','total_rev','seats_remaining'])\n\n# airline_price_data = 0\n# count = 0 \n# for data in all_data:\n#     for day in data:\n#         if count != 0:\n#             airline_price_data = airline_price_data.append(pd.DataFrame(data, \n#                                 columns=['days_left', 'started_with_seats','demand_level','price_ticket','tickets_sold','daily_revenue','total_rev','seats_remaining']))\n# #             count = count + 1\n#         else:\n#             airline_price_data = pd.DataFrame(data, \n#                                 columns=['days_left', 'started_with_seats','demand_level','price_ticket','tickets_sold','daily_revenue','total_rev','seats_remaining'])\n#             count = count + 1\nairline_price_data.to_csv('airline_price_week.csv',index=False)\nprint(airline_price_data.shape)","83481abe":"score_me(pricing_function)","4c93eb19":"In case you want to check your understanding of the simulator logic, here is a simplified version of some of the key logic (leaving out the code that prints your progress). If you feel you understand the description above, you can skip reading this code.\n\n```\ndef _tickets_sold(p, demand_level, max_qty):\n        quantity_demanded = floor(max(0, p - demand_level))\n        return min(quantity_demanded, max_qty)\n\ndef simulate_revenue(days_left, tickets_left, pricing_function, rev_to_date=0, demand_level_min=100, demand_level_max=200):\n    if (days_left == 0) or (tickets_left == 0):\n        return rev_to_date\n    else:\n        demand_level = uniform(demand_level_min, demand_level_max)\n        p = pricing_function(days_left, tickets_left, demand_level)\n        q = _tickets_sold(demand_level, p, tickets_left)\n        return _total_revenue(days_left = days_left-1, \n                              tickets_left = tickets_left-q, \n                              pricing_function = pricing_function, \n                              rev_to_date = rev_to_date + p * q,\n                              demand_level_min = demand_level_min,\n                              demand_level_max = demand_level_max\n                             )\n```\n\n# Your Code\n\nHere is starter code for the pricing function.  If you use this function, you will sell 10 tickets each day (until you run out of tickets).","078ae9ea":"You can try simulations for a variety of values.\n\nOnce you feel good about your pricing function, run it with the following cell to to see how it performs on a wider range of flights.","751170b9":"# Discuss\nWant to discuss your solution or hear what others have done?  There is a [discussion thread](https:\/\/www.kaggle.com\/general\/62469) just for you.","504a1e26":"# Intro\n\nData scientists tend to focus on **prediction** because that's where conventional machine learning excels. But real world decision-making involves both prediction and **optimization**.  After predicting what will happen, you decide what to do about it.\n\nOptimization gets less attention than it deserves. So this micro-challenge will test your optimization skills as you write a function to improve how airlines set prices.\n\n![Imgur](https:\/\/i.imgur.com\/AKrbLMR.jpg)\n\n\n# The Problem\n\nYou recently started Aviato.com, a startup that helps airlines set ticket prices. \n\nAviato's success will depend on a function called `pricing_function`.  This notebook already includes a very simple version of `pricing_function`.  You will modify `pricing_function` to maximize the total revenue collected for all flights in our simulated environment.\n\nFor each flight, `pricing_function` will be run once per (simulated) day to set that day's ticket price. The seats you don't sell today will be available to sell tomorrow, unless the flight leaves that day.\n\nYour `pricing_function` is run for one flight at a time, and it takes following inputs:\n- **Number of days until the flight**\n- **Number of seats they have left to sell**\n- **A variable called `demand_level` that determines how many tickets you can sell at any given price. **\n\nThe quantity you sell at any price is:\n> quantity_sold = demand_level - price\n\nTicket quantities are capped at the number of seats available.\n\nYour function will output the ticket price.\n\nYou learn the `demand_level` for each day at the time you need to make predictions for that day. For all days in the future, you only know `demand_level` will be drawn from the uniform distribution between 100 and 200.  So, for any day in the future, it is equally likely to be each value between 100 and 200.\n\nIn case this is still unclear, some relevant implementation code is shown below.\n\n# The Simulator\nWe will run your pricing function in a simulator to test how well it performs on a range of flight situations.  **Run the following code cell to set up your simulation environment:**","05c17353":"---\n*This micro-challenge is from an exercise in an upcoming Optimization course on **[Kaggle Learn](https:\/\/www.kaggle.com\/Learn?utm_medium=website&utm_source=kaggle.com&utm_campaign=micro+challenge+2018)**.  If you enjoyed this challenge and want to beef up your data science skills, you might enjoy our other courses.*","54f409b0":"To see a small example of how your code works, test it with the following function:"}}