{"cell_type":{"01a849d7":"code","2c2a0498":"code","a7f3d736":"code","be67d483":"code","35a1824f":"code","22bd0490":"code","5811bd86":"code","3fdd4f40":"code","ee28b9d5":"code","c43cf3a7":"code","dc3926e1":"code","f492585a":"code","607c3217":"code","0c69296e":"code","db9f9fc3":"code","de984e07":"code","2c712836":"code","3e18553a":"code","9afe86d9":"code","765b25f9":"code","da751cc4":"code","e1ea9566":"code","e2414cc9":"code","fd1b1cd4":"code","d9d5db31":"code","1565cd12":"code","41148f0a":"code","a1967fb1":"markdown","3e243f1e":"markdown","cfa55f19":"markdown","f5cef7cb":"markdown","1d568ae4":"markdown","ffe7f6ce":"markdown","2e3c3f79":"markdown","afc32c65":"markdown","75e89008":"markdown","0dd4aef3":"markdown","6d2fdeb7":"markdown","ce55b42f":"markdown","ea7bb30f":"markdown","7ed0dcb8":"markdown","70e83ce2":"markdown","09059c02":"markdown","167621b6":"markdown"},"source":{"01a849d7":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom matplotlib import gridspec\n\n\nfrom imblearn.pipeline import make_pipeline as make_pipeline_imb # To do our transformation in a unique time\nfrom imblearn.over_sampling import SMOTE\nfrom sklearn.pipeline import make_pipeline\nfrom imblearn.metrics import classification_report_imbalanced\n\nfrom sklearn.model_selection import train_test_split\nfrom collections import Counter\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\n\nfrom sklearn.metrics import precision_score, recall_score, fbeta_score, confusion_matrix, precision_recall_curve, accuracy_score\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","2c2a0498":"#loading the data\ndata = pd.read_csv(\"..\/input\/creditcard.csv\")","a7f3d736":"data.sample(10)","be67d483":"data.info()","35a1824f":"data.describe()","22bd0490":"data[[\"Time\",\"Amount\",\"Class\"]].describe()","5811bd86":"# Lets start looking the difference by Normal and Fraud transactions\ndata[\"Class\"].value_counts()","3fdd4f40":"plt.figure(figsize=(7,5))\nsns.countplot(data['Class'])\nplt.title(\"Class Histogram\", fontsize=18)\nplt.xlabel(\"Class\", fontsize=15)\nplt.ylabel(\"Count\", fontsize=15)\nplt.show()","ee28b9d5":"#To clearly the data of frauds and no frauds\ndf_fraud = data[data['Class'] == 1]\ndf_normal = data[data['Class'] == 0]\n\nprint(\"Fraud transaction statistics\")\nprint(df_fraud[\"Amount\"].describe())\nprint(\"\\nNormal transaction statistics\")\nprint(df_normal[\"Amount\"].describe())","c43cf3a7":"#Feature engineering to a better visualization of the values\ndata['Amount_log'] = np.log(data.Amount + 0.01)","dc3926e1":"plt.figure(figsize=(14,6))\nplt.subplot(121)\nax = sns.boxplot(x =\"Class\",y=\"Amount\", data=data)\nax.set_title(\"Class x Amount\", fontsize=20)\nax.set_xlabel(\"Is Fraud?\", fontsize=16)\nax.set_ylabel(\"Amount(US)\", fontsize = 16)\n\nplt.subplot(122)\nax1 = sns.boxplot(x =\"Class\",y=\"Amount_log\", data=data)\nax1.set_title(\"Class x Amount\", fontsize=20)\nax1.set_xlabel(\"Is Fraud?\", fontsize=16)\nax1.set_ylabel(\"Amount(Log)\", fontsize = 16)\n\nplt.subplots_adjust(hspace = 0.6, top = 0.8)\n\nplt.show()","f492585a":"timedelta = pd.to_timedelta(data['Time'], unit='s')\ndata['Time_hour'] = (timedelta.dt.components.hours).astype(int)","607c3217":"plt.figure(figsize=(20,8))\nsns.distplot(data[data['Class'] == 0][\"Time_hour\"], color='g')\nsns.distplot(data[data['Class'] == 1][\"Time_hour\"],  color='r')\nplt.title('Fraud x Normal Transactions by Hours', fontsize=17)\nplt.xlim([-1,25])\nplt.show()","0c69296e":"ax = sns.lmplot(y=\"Amount\", x=\"Time_hour\", fit_reg=False,aspect=1.8, data=data, hue='Class')\nplt.title(\"Amount x Hour of Fraud, Normal Transactions\", fontsize=16)\n\nplt.show()","db9f9fc3":"#Looking the V's features\ncolumns = data.iloc[:,1:29].columns\n\nfrauds = data.Class == 1\nnormals = data.Class == 0\n\ngrid = gridspec.GridSpec(10, 3)\nplt.figure(figsize=(15,20*4))\n\nfor n, col in enumerate(data[columns]):\n    ax = plt.subplot(grid[n])\n    sns.distplot(data[col][frauds], bins = 50, color='g') #Will receive the \"semi-salmon\" violin\n    sns.distplot(data[col][normals], bins = 50, color='r') #Will receive the \"ocean\" color\n    ax.set_ylabel('Density')\n    ax.set_title(str(col))\n    ax.set_xlabel('')\nplt.show()","de984e07":"data.head()","2c712836":"X = data.iloc[:, 0:30]\nX.head()","3e18553a":"y = data['Class']\ny.head()","9afe86d9":"corr = X.corr().abs()\nlower_right_ones = np.tril(np.ones(corr.shape, dtype='bool'), k=-1)\ncorrelations = corr.where(lower_right_ones)\ncorrelations","765b25f9":"plt.figure(figsize=(30,30))\nsns.heatmap(correlations, annot=True, cmap='RdBu_r', fmt= '.2f', vmax=1, vmin=-1)\nplt.xticks(rotation=60)","da751cc4":"X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=2, test_size=0.20)","e1ea9566":"print(\"Data transformation -\")\nprint(\"Normal data distribution: {}\".format(Counter(y)))\nX_smote, y_smote = SMOTE().fit_sample(X, y)\nprint(\"SMOTE data distribution: {}\".format(Counter(y_smote)))","e2414cc9":"smote_pipeline = make_pipeline_imb(SMOTE(random_state=4), RandomForestClassifier(random_state=42))","fd1b1cd4":"SMOTE_model = smote_pipeline.fit(X_train, y_train)\nSMOTE_prediction = SMOTE_model.predict(X_test)","d9d5db31":"def print_results(headline, true_value, pred):\n    print(headline)\n    print(\"accuracy: {}\".format(accuracy_score(true_value, pred)))\n    print(\"precision: {}\".format(precision_score(true_value, pred)))\n    print(\"recall: {}\".format(recall_score(true_value, pred)))\n    print(\"f2: {}\".format(fbeta_score(true_value, pred, beta=2)))\n","1565cd12":"print(\"Confusion Matrix: \")\nprint(confusion_matrix(y_test, SMOTE_prediction))\n\nprint('\\nSMOTE Pipeline Score {}'.format(smote_pipeline.score(X_test, y_test)))\n\nprint_results(\"\\nSMOTE + RandomForest classification\", y_test, SMOTE_prediction)","41148f0a":"# Compute predicted probabilities: y_pred_prob\ny_pred_prob = smote_pipeline.predict_proba(X_test)[:,1]\n\n# Generate precision recall curve values: precision, recall, thresholds\nprecision, recall, thresholds = precision_recall_curve(y_test, y_pred_prob)\n\n# Plot ROC curve\nplt.plot(precision, recall)\nplt.xlabel('Recall')\nplt.ylabel('Precision')\nplt.title('Precision Recall Curve')\nplt.show()","a1967fb1":"## Main Objectives\n\nTo read this dataset, balance it and use either one or more of modeling algorithms to predict accuracy of test dataset.","3e243f1e":"## Evaluating the model SMOTE + Random Forest","cfa55f19":"## Preprocessing","f5cef7cb":"### Build model with SMOTE imblearn","1d568ae4":"# EDA using boxplots\n- Since we don't know what each feature is, we will create boxplots of all the V featues.\n- We are searching for features that diverges from normal distribuition","ffe7f6ce":"We have a clearly imbalanced data which it should be when treating of frauds.","2e3c3f79":"# Importing the libraries and looking at the data","afc32c65":"# Credit Card Fraud Prediction\n\nIn this kernel I will do some explorations trying to understand the fraud transaction patterns and them I will implement some models of machine learning.<br>\n\nI will implement technique an technique called SMOTE, supervised models, semi supervised learning algorithms and a deep learning model.","75e89008":"## Data Exploration - Time\nAs our Time feature are in seconds, we will transform it to minutes and hours to get a better understanding of any underlying patterns","0dd4aef3":"#### Splitting the data","6d2fdeb7":"No clear pattern, so nothing we can do about the Time column in the dataset.","ce55b42f":"# Feature Engineering","ea7bb30f":"## Using SMOTE","7ed0dcb8":"No significant correlation found, as seen in above plot.","70e83ce2":"# About The Dataset\n\n> The datasets contains transactions made by credit cards in September 2013 by european cardholders. This dataset presents transactions that occurred in two days, where we have 492 frauds out of 284,807 transactions. The dataset is highly unbalanced, the positive class (frauds) account for 0.172% of all transactions.\n> \n> It contains only numerical input variables which are the result of a PCA transformation. Unfortunately, due to confidentiality issues, we cannot provide the original features and more background information about the data. Features V1, V2, ... V28 are the principal components obtained with PCA, the only features which have not been transformed with PCA are 'Time' and 'Amount'. Feature 'Time' contains the seconds elapsed between each transaction and the first transaction in the dataset. The feature 'Amount' is the transaction Amount, this feature can be used for example-dependant cost-senstive learning. Feature 'Class' is the response variable and it takes value 1 in case of fraud and 0 otherwise.\n\n\n\n> Given the class imbalance ratio, we recommend measuring the accuracy using the Area Under the Precision-Recall Curve (AUPRC). Confusion matrix accuracy is not meaningful for unbalanced classification.\n\n\n> The dataset has been collected and analysed during a research collaboration of Worldline and the Machine Learning Group (http:\/\/mlg.ulb.ac.be) of ULB (Universit\u00e9 Libre de Bruxelles) on big data mining and fraud detection. More details on current and past projects on related topics are available on http:\/\/mlg.ulb.ac.be\/BruFence and http:\/\/mlg.ulb.ac.be\/ARTML\n>\n> Please cite: Andrea Dal Pozzolo, Olivier Caelen, Reid A. Johnson and Gianluca Bontempi. Calibrating Probability with Undersampling for Unbalanced Classification. In Symposium on Computational Intelligence and Data Mining (CIDM), IEEE, 2015","09059c02":"We can see a slightly difference in log amount of our two Classes. <br>\nThe IQR of fraudulent transactions are higher than normal transactions, but normal transactions have highest values","167621b6":"## Looking the statistics of our Amount class frauds and normal transactions"}}