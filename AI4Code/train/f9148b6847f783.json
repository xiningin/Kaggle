{"cell_type":{"f4b59d79":"code","ab6f15ce":"code","49ae92b5":"code","7c521245":"code","9e3080e7":"code","e1b39ad7":"code","3454c00b":"code","5700538c":"code","41463ecc":"code","6fd16f4e":"code","28cfa7e2":"code","88eedad8":"code","1e431ca1":"code","f9dc3d03":"code","4a9ad6f6":"code","92509676":"code","cedbb32e":"code","5ad37235":"code","48eb2aa6":"code","002c712c":"code","ed8d8213":"code","b5d0bc17":"code","12813e3d":"code","4be532c5":"code","2e2a280c":"code","3b542786":"code","3bcd27ff":"code","28a46430":"code","c43e3615":"code","74574acd":"code","0c38231e":"code","abea92b2":"code","94ce9834":"code","7dc21141":"code","b3d82062":"code","0fd884e4":"code","69c9d94b":"code","0d5eb385":"code","adbc9fb0":"code","d8a33245":"code","11d54460":"code","52e985e3":"code","0b7c4e69":"code","1536fe71":"code","d6ea4e5e":"code","755da431":"code","21e0d158":"code","f4ccd144":"code","1cf9da27":"code","6735c106":"code","da2fc25f":"code","d21e3dc5":"code","86f0b0af":"code","ae45d38f":"code","2677b110":"code","deaecaa0":"code","56ab922b":"code","fe73254e":"code","113ec4e1":"code","95fdc6b5":"code","440b7fc5":"code","67056c16":"code","d5d3eca4":"code","2a389b85":"code","17f66385":"code","90686982":"code","2cc299e2":"code","46831534":"code","1ac7ab7c":"code","5f749ede":"code","3736a4f5":"markdown","f803a8f7":"markdown","cb958d81":"markdown"},"source":{"f4b59d79":"import os","ab6f15ce":"print(os.listdir('..\/input\/titanic'))\nPATH = '..\/input\/titanic\/'","49ae92b5":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nplt.style.use('seaborn-darkgrid')","7c521245":"train = pd.read_csv(PATH + 'train.csv')","9e3080e7":"train.head()","e1b39ad7":"train.info()","3454c00b":"train['PassengerId'].value_counts().shape, train['Ticket'].value_counts().shape","5700538c":"train.drop(columns=['PassengerId', 'Ticket'], axis=0, inplace=True)","41463ecc":"from sklearn.model_selection import train_test_split","6fd16f4e":"X_train, X_test, y_train, y_test = train_test_split(train.drop(columns='Survived', axis=1), train['Survived'],\n                                                    test_size=0.2, stratify=train['Survived'], random_state=42)","28cfa7e2":"X_train.isna().sum()","88eedad8":"y_train.value_counts()","1e431ca1":"def fill_cabin(dataframe):\n    dataframe['Cabin'] = dataframe['Cabin'].fillna('Z').apply(lambda x: x[0])","f9dc3d03":"fill_cabin(X_train)\nfill_cabin(X_test)","4a9ad6f6":"X_train['Cabin'].value_counts()","92509676":"def replace_cabin(dataframe):\n    l = list(dataframe['Cabin'].value_counts()[dataframe['Cabin'].value_counts() < 10].index)\n    dataframe['Cabin'].replace(l, 'X', inplace=True)","cedbb32e":"replace_cabin(X_train)\nreplace_cabin(X_test)","5ad37235":"X_train['Cabin'].value_counts()","48eb2aa6":"embarked_mode = train['Embarked'].mode()[0]\ndef fill_embarked(dataframe):\n    dataframe['Embarked'].fillna(embarked_mode, inplace=True)","002c712c":"fill_embarked(X_train)\nfill_embarked(X_test)","ed8d8213":"X_train['Embarked'].value_counts()","b5d0bc17":"sex_dict = {'male': 0, 'female': 1}\ndef map_sex(dataframe):\n    dataframe['Sex'] = dataframe['Sex'].map(sex_dict)","12813e3d":"map_sex(X_train)\nmap_sex(X_test)","4be532c5":"def get_title(dataframe):\n    dataframe['Name'] = dataframe['Name'].apply(lambda name: name.split(',')[1].split('.')[0].strip())","2e2a280c":"get_title(X_train)\nget_title(X_test)","3b542786":"X_train['Name'].value_counts()","3bcd27ff":"titles = {\n    'Mr': 'Mr',\n    'Miss': 'Miss',\n    'Mrs': 'Mrs',\n    'Master': 'Master',\n    'Dr': 'Dr',\n    'Rev': 'Rev',\n    'Col': 'Officer',\n    'Mlle': 'Miss',\n    'Major': 'Officer',\n    'Ms': 'Mrs',\n    'Capt': 'Officer',\n    'Lady': 'Royal',\n    'the Countess': 'Royal',\n    'Jonkheer': 'Royal',\n    'Mme': 'Mrs',\n    'Don': 'Royal',\n    'Dona': 'Royal',\n    'Sir': 'Royal'\n}","28a46430":"def map_name(dataframe):\n    dataframe['Name'] = dataframe['Name'].map(titles)","c43e3615":"map_name(X_train)\nmap_name(X_test)","74574acd":"name_age = X_train[['Name', 'Age']].groupby(['Name'])\n\ndef set_missing_age(dataframe):\n        dataframe['Missing'] = dataframe['Age'].isna()\n\ndef age_by_name(dataframe):\n    if dataframe['Missing']:\n        return name_age.get_group(dataframe['Name']).mean()[0]\n    else:\n        return dataframe['Age']\n\nmean_age = train['Age'].mean()\ndef fill_age(dataframe):\n#     dataframe['Age'].fillna(mean_age, inplace=True)\n    set_missing_age(dataframe)\n    dataframe['Age'] = dataframe.apply(age_by_name, axis=1)\n    dataframe.drop(columns='Missing', axis=1, inplace=True)","0c38231e":"name_age.mean()","abea92b2":"fill_age(X_train)\nfill_age(X_test)","94ce9834":"X_train.isna().sum()","7dc21141":"X_train.info()","b3d82062":"from sklearn.preprocessing import LabelEncoder\ncabin_encoder = LabelEncoder()\nembarked_encoder = LabelEncoder()\nname_encoder = LabelEncoder()","0fd884e4":"cabin_encoder.fit(X_train['Cabin'])\nembarked_encoder.fit(X_train['Embarked'])\nname_encoder.fit(X_train['Name'])\n\ndef encode_nominal(dataframe):\n    dataframe['Cabin'] = cabin_encoder.transform(dataframe['Cabin'])\n    dataframe['Embarked'] = embarked_encoder.transform(dataframe['Embarked'])\n    dataframe['Name'] = name_encoder.transform(dataframe['Name'])","69c9d94b":"cabin_encoder.classes_","0d5eb385":"encode_nominal(X_train)\nencode_nominal(X_test)","adbc9fb0":"X_train['Cabin'].head()","d8a33245":"cabin_encoder.inverse_transform(X_train['Cabin'].head())","11d54460":"X_train.info()","52e985e3":"X_train.shape, y_train.shape, X_test.shape, y_test.shape","0b7c4e69":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.tree import plot_tree","1536fe71":"from sklearn.model_selection import StratifiedKFold","d6ea4e5e":"k = 5\nkfold = StratifiedKFold(n_splits=k, shuffle=True, random_state=42)\n\nscores = np.zeros(k)\n\nfor idx, (idx_train, idx_val) in enumerate(kfold.split(X_train, y_train)):\n    clf = DecisionTreeClassifier(max_depth=5, random_state=42)\n    clf.fit(X_train.iloc[idx_train], y_train.iloc[idx_train])\n    scores[idx] = clf.score(X_train.iloc[idx_val], y_train.iloc[idx_val])\n\nprint(\"Acur\u00e1cia por split: {}\".format(scores))\nprint(\"Acur\u00e1cia m\u00e9dia: {}\".format(scores.mean()))","755da431":"clf = DecisionTreeClassifier(random_state=42, max_depth=5)\nclf.fit(X_train, y_train)","21e0d158":"plt.figure(dpi=400)\nplot_tree(clf, filled=True, feature_names=X_train.columns);","f4ccd144":"feature_importance = pd.DataFrame({'Feature': X_train.columns, 'Importance': clf.feature_importances_})\nfeature_importance.sort_values('Importance', inplace=True)","1cf9da27":"feature_importance.plot.barh(x='Feature', y='Importance', figsize=(10,8));","6735c106":"clf.score(X_test, y_test)","da2fc25f":"from sklearn.model_selection import GridSearchCV","d21e3dc5":"n_features = X_train.shape[1]\n\nparams = {\n    'max_depth': range(1, n_features + 1),\n    'criterion': ['gini', 'entropy'],\n    'min_samples_split': range(2, 10),\n    'min_samples_leaf': range(1, 10),\n    'max_features': range(1, n_features + 1),\n    'class_weight': ['balanced', None]\n}\n\ngrid = GridSearchCV(DecisionTreeClassifier(random_state=42), \n                    param_grid=params, n_jobs=-1, cv=3, verbose=2, iid=False)","86f0b0af":"grid.fit(X_train, y_train)\ngrid.best_score_","ae45d38f":"grid.best_params_","2677b110":"fill_cabin(train)\nreplace_cabin(train)\nfill_embarked(train)\nmap_sex(train)\nget_title(train)\nmap_name(train)\nfill_age(train)\nencode_nominal(train)","deaecaa0":"X, y = train.drop(columns=['Survived'], axis=1), train['Survived']","56ab922b":"final_clf = DecisionTreeClassifier(class_weight='balanced', criterion='entropy',\n                                   max_depth=9, max_features=4, min_samples_leaf=1,\n                                   min_samples_split=7)","fe73254e":"final_clf.fit(X, y)","113ec4e1":"test = pd.read_csv(PATH + 'test.csv')","95fdc6b5":"test.info()","440b7fc5":"test.head()","67056c16":"ids = test['PassengerId']\ntest.drop(columns=['PassengerId', 'Ticket'], axis=1, inplace=True)","d5d3eca4":"fill_cabin(test)\nreplace_cabin(test)\nfill_embarked(test)\nmap_sex(test)\nget_title(test)\nmap_name(test)\nfill_age(test)\nencode_nominal(test)","2a389b85":"test.head()","17f66385":"test.isna().sum()","90686982":"test['Fare'].fillna(0, inplace=True)","2cc299e2":"survived = final_clf.predict(test.values)","46831534":"answer = pd.DataFrame({'PassengerId': ids, 'Survived': survived})","1ac7ab7c":"answer.to_csv('submission.csv', index=False)","5f749ede":"pd.read_csv('submission.csv').head()","3736a4f5":"### Dicion\u00e1rio de Dados\n\n**Variable -\tDefinition\t- Key**\n\nSurvival - Survival\t- 0 = No, 1 = Yes\n\nPclass -\tTicket class -\t1 = 1st, 2 = 2nd, 3 = 3rd\n\nSex -\tSex\t\n\nAge\t- Age in years\t\n\nSibsp -\t# of siblings \/ spouses aboard the Titanic\t\n\nParch- # of parents \/ children aboard the Titanic\t\n\nTicket - Ticket number\t\n\nFare - Passenger fare\t\n\nCabin- Cabin number\t\n\nEmbarked- Port of Embarkation\tC = Cherbourg, Q = Queenstown, S = Southampton","f803a8f7":"#### Descri\u00e7\u00e3o\nO naufr\u00e1gio do RMS Titanic \u00e9 um dos naufr\u00e1gios mais famosos da hist\u00f3ria. Em 15 de abril de 1912, durante sua viagem inaugural, o Titanic afundou ap\u00f3s colidir com um iceberg, matando 1502 de 2224 passageiros e tripulantes. Essa trag\u00e9dia chocou a comunidade internacional e levou a melhores regulamenta\u00e7\u00f5es de seguran\u00e7a para os navios.\n\nUma das raz\u00f5es pelas quais o naufr\u00e1gio levou a tal perda de vidas foi que n\u00e3o havia botes salva-vidas suficientes para os passageiros e a tripula\u00e7\u00e3o. Embora houvesse algum elemento de sorte envolvido na sobreviv\u00eancia do naufr\u00e1gio, alguns grupos de pessoas eram mais propensos a sobreviver do que outros, como mulheres, crian\u00e7as e a classe alta.\n\nNesse desafio, a atividade \u00e9 que voc\u00ea conclua a an\u00e1lise de que tipo de pessoa provavelmente sobreviver\u00e1. Em particular, solicitamos voc\u00ea deve aplicar classificadores de \u00e1rvores de decis\u00e3o para esta atividade.\n","cb958d81":"### Descri\u00e7\u00e3o do dataset\nOs dados foram divididos em dois grupos:\n\nconjunto de treinamento (train.csv)\nconjunto de teste (test.csv)\nO conjunto de treinamento deve ser usado para criar seus modelos de aprendizado de m\u00e1quina. Para o conjunto de treinamento, fornecemos o resultado (tamb\u00e9m conhecido como \"verdade do solo\") para cada passageiro. Seu modelo ser\u00e1 baseado em \"recursos\", como sexo e classe dos passageiros. Voc\u00ea tamb\u00e9m pode usar a engenharia de recursos para criar novos recursos.\n\nO conjunto de teste deve ser usado para ver o desempenho do seu modelo em dados n\u00e3o vistos. Para o conjunto de testes, n\u00e3o fornecemos a verdade b\u00e1sica para cada passageiro. \u00c9 seu trabalho prever esses resultados. Para cada passageiro no conjunto de testes, use o modelo que voc\u00ea treinou para prever se eles sobreviveram ou n\u00e3o ao naufr\u00e1gio do Titanic.\n\nTamb\u00e9m inclu\u00edmos gender_submission.csv, um conjunto de previs\u00f5es que sup\u00f5em que todas e apenas passageiras sobrevivem, como um exemplo da apar\u00eancia de um arquivo de envio."}}