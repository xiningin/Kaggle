{"cell_type":{"eb8ef647":"code","857b0b2a":"code","bb7b01e7":"code","e3d131b8":"code","dc616507":"code","aaf8655b":"code","9beaf929":"code","fa6e3444":"code","b027a25e":"code","388c1bd7":"code","1d531925":"code","ba38612e":"code","358eb5c2":"code","58f0ceca":"code","eb960b63":"code","9c6452c6":"code","8259ca79":"code","18711e89":"code","1f1c9d98":"code","937fefdb":"code","28b6e801":"code","3a2426a7":"code","12cec8e3":"code","6dcaa8ab":"code","604d75be":"code","56f69a5b":"code","d99a52f6":"code","e822b4fc":"code","fced1b1e":"code","537727a1":"code","c51a173f":"code","9f7daed5":"code","8f78e4d6":"code","f6851df4":"code","de22f6bb":"code","ced6b8f5":"code","87985ec3":"code","541d5362":"code","e492d7a6":"code","ecffee53":"code","4ebf0300":"code","c14bfba6":"code","b6f115ee":"code","e7eb52e2":"code","3d48cdb9":"code","c98a2010":"code","0ed6d6e8":"code","9e9152b1":"code","7a6aa3e3":"code","a3617002":"code","40ad982f":"code","a2331091":"code","b1fe2481":"code","4ca5e60f":"code","cea52a4c":"code","97336464":"code","6d410e68":"code","f5778610":"code","0da7cc9e":"markdown"},"source":{"eb8ef647":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n","857b0b2a":"train_data = pd.read_csv('..\/input\/titanic\/train.csv')\ntest_data = pd.read_csv('..\/input\/titanic\/test.csv')","bb7b01e7":"train_data.head()","e3d131b8":"train_data.info()","dc616507":"train_data.shape","aaf8655b":"test_data.shape","9beaf929":"train_data.describe()","fa6e3444":"train_data.isnull().sum()","b027a25e":"train_data.drop('Cabin',axis=1,inplace=True)","388c1bd7":"test_data.drop('Cabin',axis=1,inplace=True)","1d531925":"median_age=train_data['Age'].median()\ntrain_data['Age'].replace(np.nan,median_age,inplace=True)","ba38612e":"median_age=test_data['Age'].median()\ntest_data['Age'].replace(np.nan,median_age,inplace=True)","358eb5c2":"freq_port = train_data.Embarked.dropna().mode()[0]\ntrain_data['Embarked'] = train_data['Embarked'].fillna(freq_port)","58f0ceca":"train_data.isnull().sum()","eb960b63":"test_data.isnull().sum()","9c6452c6":"# test_data.dropna(axis=0,inplace=True)","8259ca79":"# test_data.isnull().sum()","18711e89":"sns.countplot(x='Survived',data=train_data)","1f1c9d98":"sns.countplot(x='Survived',hue='Sex',data=train_data)","937fefdb":"women=train_data.loc[train_data.Sex=='female']['Survived']\nrate_women=sum(women)\/len(women) * 100\nprint(' % of women survivers : ', rate_women)\n","28b6e801":"men=train_data.loc[train_data.Sex=='male']['Survived']\nrate_men=sum(men)\/len(men) * 100\nprint(' % of men survivers : ', rate_men)\n","3a2426a7":"sns.countplot(x='Survived',hue='Pclass',data=train_data)","12cec8e3":"class1=train_data.loc[train_data.Pclass==1]['Survived']\nrate_class1=sum(class1)\/len(class1) * 100\nprint(' % of class1 survivers : ', rate_class1)\n","6dcaa8ab":"class2=train_data.loc[train_data.Pclass==2]['Survived']\nrate_class2=sum(class2)\/len(class2) * 100\nprint(' % of class2 survivers : ', rate_class2)\n","604d75be":"class3=train_data.loc[train_data.Pclass==3]['Survived']\nrate_class3=sum(class3)\/len(class3) * 100\nprint(' % of class3 survivers : ', rate_class3)\n","56f69a5b":"sns.countplot(x='Survived',hue='SibSp',data=train_data)","d99a52f6":"sns.countplot(x='Survived',hue='Parch',data=train_data)","e822b4fc":"sns.violinplot(x='Survived',y='Age',data=train_data)","fced1b1e":"sns.countplot(x='Survived',hue='Embarked',data=train_data)","537727a1":"train_data['Sex']=train_data['Sex'].map({'female' : 1,'male' : 0}).astype(int)\ntest_data['Sex']=test_data['Sex'].map({'female' : 1,'male' : 0}).astype(int)","c51a173f":"train_data.head()\n","9f7daed5":"emb_dummy = pd.get_dummies(train_data['Embarked'])\ntrain_data=pd.concat([train_data,emb_dummy],axis=1)","8f78e4d6":"emb_dummy2 = pd.get_dummies(test_data['Embarked'])\ntest_data=pd.concat([test_data,emb_dummy2],axis=1)","f6851df4":"train_data.head()","de22f6bb":"drop_cols=['Name','Ticket','Fare','Embarked']\ntrain_data=train_data.drop(drop_cols,axis=1)\ntrain_data=train_data.drop(['PassengerId'],axis=1)","ced6b8f5":"\ntest_data=test_data.drop(drop_cols,axis=1)\n","87985ec3":"train_data.head()","541d5362":"test_data.head()","e492d7a6":"train_data.loc[ train_data['Age'] <= 16, 'Age'] = 0\ntrain_data.loc[(train_data['Age'] > 16) & (train_data['Age'] <= 36), 'Age'] = 1\ntrain_data.loc[(train_data['Age'] > 36) & (train_data['Age'] <= 50), 'Age'] = 2\ntrain_data.loc[(train_data['Age'] > 50) & (train_data['Age'] <= 64), 'Age'] = 3\ntrain_data.loc[ train_data['Age'] > 64, 'Age'] = 4","ecffee53":"test_data.loc[ test_data['Age'] <= 16, 'Age'] = 0\ntest_data.loc[(test_data['Age'] > 16) & (test_data['Age'] <= 36), 'Age'] = 1\ntest_data.loc[(test_data['Age'] > 36) & (test_data['Age'] <= 50), 'Age'] = 2\ntest_data.loc[(test_data['Age'] > 50) & (test_data['Age'] <= 64), 'Age'] = 3\ntest_data.loc[ test_data['Age'] > 64, 'Age'] = 4","4ebf0300":"train_data.head()","c14bfba6":"test_data.head()","b6f115ee":"X_train=train_data.drop(['Survived'],axis=1).values\nY_train=train_data['Survived'].values","e7eb52e2":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(X_train,Y_train,test_size=0.25)","3d48cdb9":"from sklearn.linear_model import LogisticRegression\nregressor=LogisticRegression()\nregressor.fit(x_train,y_train)","c98a2010":"y_pred=regressor.predict(x_test)","0ed6d6e8":"from sklearn.metrics import accuracy_score,confusion_matrix\nacc=accuracy_score(y_test,y_pred)\nacc","9e9152b1":"cm=confusion_matrix(y_test,y_pred)\ncm\n","7a6aa3e3":"from sklearn.tree import DecisionTreeClassifier\ndt=DecisionTreeClassifier()\ndt.fit(x_train,y_train)","a3617002":"y_pred1=dt.predict(x_test)","40ad982f":"from sklearn.metrics import accuracy_score,confusion_matrix\nacc2=accuracy_score(y_test,y_pred1)\nacc2","a2331091":"from sklearn.ensemble import RandomForestClassifier\nrc=RandomForestClassifier(max_depth=9, random_state=0)\nrc.fit(x_train,y_train)","b1fe2481":"y_pred2=rc.predict(x_test)","4ca5e60f":"acc3=accuracy_score(y_test,y_pred2)\nacc3","cea52a4c":"regressor.fit(X_train,Y_train)","97336464":"test=test_data.drop(['PassengerId'],axis=1)\nfinal_pred=regressor.predict(test)","6d410e68":"test_data['Survived'] = final_pred\ntest_data.drop(['Pclass','Age','Sex','SibSp','Parch','C','Q','S'],inplace=True,axis=1)","f5778610":"test_data.to_csv('Submission.csv', index = False)\n","0da7cc9e":"# Feature Enginering"}}