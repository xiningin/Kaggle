{"cell_type":{"1a8df3ea":"code","036e0fa8":"code","353d384b":"code","b61b8bc3":"code","5d355277":"code","e875d6e0":"code","f91a40b2":"code","d6395a05":"code","5edbbaab":"code","56462a59":"markdown","def7d7b7":"markdown","4d6f78ee":"markdown","78967732":"markdown","0a351a8d":"markdown","6cf8257e":"markdown","be2641b6":"markdown","a77ad604":"markdown","27cfea6a":"markdown"},"source":{"1a8df3ea":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","036e0fa8":"train_data = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest_data = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ndata = train_data.append(test_data, ignore_index = True)","353d384b":"train_data.groupby('Sex').Survived.value_counts()","b61b8bc3":"#That model achieves 76.5% \ntest_data['Survived'] = np.where((test_data.Sex == 'female'), 1, 0)\noutput = pd.DataFrame(({'PassengerId': test_data.PassengerId, 'Survived': test_data.Survived}))\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")\n","5d355277":"train_data.groupby(['Sex', 'Pclass']).Survived.value_counts()","e875d6e0":"data['Title'] = data.Name.str.extract('([A-Za-z]+)\\.', expand = False)\n\n\ndata.Title = data.Title.replace('Ms', 'Miss')\ndata.Title = data.Title.replace('Mlle', 'Miss')\ndata.Title = data.Title.replace('Mme', 'Mrs')\ndata.Title = np.where((data.Title == 'Dr') & (data.Sex == 'female'), 'Mrs', data.Title)\ndata.Title = np.where((data.Title == 'Dona')| \n                      (data.Title == 'Lady')|\n                      (data.Title == 'Countess'), 'Mrs', data.Title)\ndata.Title = np.where((data.Title == 'Rev')|\n                      (data.Title == 'Dr') & (data.Sex == 'male')|\n                      (data.Title == 'Col')| \n                      (data.Title == 'Major')|\n                      (data.Title == 'Sir')|\n                      (data.Title == 'Don')|\n                      (data.Title == 'Capt')|\n                      (data.Title == 'Jonkheer'), 'Mr', data.Title)\n\ndata.Title = data.Title.replace('Mrs', 'Miss')","f91a40b2":"data['Surname'] = data.Name.str.extract('([A-Za-z]+)\\,', expand = False)\n\ndata['Surname'] = np.where((data.Title == 'Mr'), 'NoGroup', data.Surname)\n\ntrain_data = data[:(len(train_data))]\ntest_data = data[(len(train_data)):]\n\ntrain_data['SurnameFreq'] = train_data.groupby('Surname')['Surname'].transform('count')\n\na = train_data.groupby('Surname')['Survived'].sum().reset_index()\na = a.rename(columns ={'Surname': 'Surname_1', 'Survived': 'SSurv'})\n\ntrain_data = pd.merge(train_data, a, how ='left', left_on=('Surname'), right_on=('Surname_1'))\ntrain_data['SurnameSurv'] = train_data.SSurv\/train_data.SurnameFreq\n\nb = pd.DataFrame({'Surname': train_data.Surname, 'SurnameSurv': train_data.SurnameSurv})\n\ntest_data = pd.merge(test_data, b, on = ('Surname'), how = 'left')\ntest_data = test_data.drop_duplicates(subset=['Name'], keep='first')\n\n# NaN values in SurnameSurv I replace with 2 for they are not mixed with other results\ntest_data.SurnameSurv = test_data.SurnameSurv.fillna(2)\n","d6395a05":"test_data","5edbbaab":"\ntest_data['Survived'] = 0\n\ntest_data['Survived'] = np.where((test_data.Title == 'Miss'), 1, 0)\n\ntest_data['Survived'] = np.where((test_data.Title == 'Master') & (test_data.SurnameSurv == 1),\n                                  1, test_data.Survived)\n\ntest_data['Survived'] = np.where((test_data.Title == 'Miss') & (test_data.SurnameSurv == 0), \n                                  0, test_data.Survived)\n\noutput = pd.DataFrame(({'PassengerId': test_data.PassengerId, 'Survived': test_data.Survived}))\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")\n\n","56462a59":"Let's save our results. All females survive except those who are in groups where all boys and females perish. All Masters survive if they are in groups where all females and boys live.","def7d7b7":"At the end we have the next table.","4d6f78ee":"Next exctract 'Surname' from the column 'Name'. And group 'Surname' by the frequency. If someone knows a better way for grouping 'Surname' and 'Survived' without making additional tables please tell me. I will be very grateful for help.","78967732":"# **Base Titanic model scores 80%**\n\nFor me it is the very first public Kaggle notebook and I'm glad to share it with you. I've made a plenty of Titanic models before, but this one is the first that jumped over 80 percent accuracy in public leaderboard. That is why I'm so excited and that is why this model is my favorite. And it is so wonderfully simple and has a lot of options for tuning. \n\nI took the main idea of the model from Chris Deotte's notebook [here](https:\/\/www.kaggle.com\/cdeotte\/titanic-using-name-only-0-81818\/notebook). Remember - 'Women and children first.' ?  It is hard to believe that mother will survive without her child. \n\nSo what if we find groups where all females and boys survive and predict that all women survive except those who are in a group where all women and boys perish.\n\n**So lets begin...**\n","0a351a8d":"To get higher results we need to make it clear which females die and which males survive. By deeping the data we notice that many male survivors are boys (males with Master Title) and the majority of females that perish are the third class passengers. Their survival rate is about 50% while for those in the first and second class it is about 90%. Look...","6cf8257e":"Let's engineer a new feature 'Title to find boys (Master Title)' and group people by 'Mr and Mrs' for future (for the next notebook exactly).","be2641b6":"So, it makes sense. Let's predict that all females survive and males die. The leaderboard shows the score 76.5%. ","a77ad604":"Thank you everyone for reading my notebook and for helping with the code. I'm waiting for your comments. In the next notebook I will pay attention to grouping people more accurately (by ticket number, for example), see what I can do with males in the first class and see wether there is a small group of fathers with children?","27cfea6a":"To begin with lets see wether the majority of females survive and males die."}}