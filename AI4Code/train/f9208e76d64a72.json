{"cell_type":{"079dab7a":"code","04e650b2":"code","6a4ca12a":"code","0f349ff0":"code","eba1e2ee":"markdown","255693b3":"markdown","1f4f885a":"markdown"},"source":{"079dab7a":"import pandas as pd\nimport numpy as np\nfrom tqdm import tqdm\nfrom sklearn.decomposition import PCA\nfrom sklearn import preprocessing\nfrom sklearn.mixture import GaussianMixture\nimport matplotlib.pyplot as plt","04e650b2":"def reduce_mem_usage(df, verbose=True):\n    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n    start_mem = df.memory_usage().sum() \/ 1024 ** 2\n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)\n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n    end_mem = df.memory_usage().sum() \/ 1024 ** 2\n    if verbose: print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'.format(end_mem, 100 * (\n                start_mem - end_mem) \/ start_mem))\n    return df\n\n# this function copied from the below post -- Thanks to Warren Weckesser\n# https:\/\/stackoverflow.com\/questions\/24885092\/finding-the-consecutive-zeros-in-a-numpy-array\ndef zero_runs(a):\n    # Create an array that is 1 where a is 0, and pad each end with an extra 0.\n    iszero = np.concatenate(([0], np.equal(a, 0).view(np.int8), [0]))\n    absdiff = np.abs(np.diff(iszero))\n    # Runs start and end where absdiff is 1.\n    ranges = np.where(absdiff == 1)[0].reshape(-1, 2)\n    return ranges\n\ndef non_zero_runs(a):\n    # Create an array that is 1 where a is 0, and pad each end with an extra 0.\n    is_non_zero = np.concatenate(([0], np.greater(a, 0).view(np.int8), [0]))\n    absdiff = np.abs(np.diff(is_non_zero))\n    # Runs start and end where absdiff is 1.\n    ranges = np.where(absdiff == 1)[0].reshape(-1, 2)\n    return ranges\n","6a4ca12a":"TRAIN_LOC = \"..\/input\/m5-forecasting-accuracy\/sales_train_validation.csv\"\n\ntrain = pd.read_csv(TRAIN_LOC)\ntrain = reduce_mem_usage(train)\narr = np.array(train.iloc[:,6:])\n\nX = {}\nX[\"number_of_leading_zeros\"] = np.argmax(np.array(train.iloc[:,6:] > 0), axis=1)\n\nX[\"Number_of_zero_demands\/1916\"] = []\n\nX[\"Decay_mean_zero_demand_length\"] = []\nX[\"Mean_zero_demand_length\"] = []\nX[\"Std_zero_demand_length\"] = []\nX[\"Max_zero_demand_length\"] = []\n\nX[\"Decay_mean_non_zero_demand_length\"] = []\nX[\"Mean_non_zero_demand_length\"] = []\nX[\"Std_non_zero_demand_length\"] = []\nX[\"Max_non_zero_demand_length\"] = []\n\nX[\"Decay_mean_sales_1day_before_zero\"] = []\nX[\"Mean_sales_1day_before_zero\"] = []\nX[\"Std_sales_1day_before_zero\"] = []\nX[\"Max_sales_1day_before_zero\"] = []\n\n\nfor i,excld in enumerate(tqdm(X[\"number_of_leading_zeros\"])):\n    remaining = 1913 - excld\n    series = arr[i,excld:]\n\n    zero_demand_length = np.diff(zero_runs(series)).ravel()\n    non_zero_demand_length = np.diff(non_zero_runs(series)).ravel()\n    sales_1day_before_zero = series[(zero_runs(series)[:, 0] - 1)]\n\n    X[\"Number_of_zero_demands\/1916\"].append(((series== 0).sum())\/remaining)\n\n    for i, serie in enumerate([zero_demand_length,non_zero_demand_length,sales_1day_before_zero]):\n        if i == 0: name=\"zero_demand_length\"\n        if i == 1: name = \"non_zero_demand_length\"\n        if i == 2: name = \"sales_1day_before_zero\"\n\n        X[\"Decay_mean_%s\"%name].append(np.ma.average(serie, weights=np.power(0.95, np.arange(len(serie), 0, -1))))\n        X[\"Std_%s\"%name].append(serie.std())\n        X[\"Max_%s\"%name].append(serie.max())\n\n        if i == 2:\n            X[\"Mean_%s\" % name].append(serie.mean()\/series.mean())\n        else:\n            X[\"Mean_%s\" % name].append(serie.mean())\n\n\nX = pd.DataFrame(X)\nX = reduce_mem_usage(X)","0f349ff0":"# Transform features to normal distribution\nx = np.array(X)\nquantile_transformer = preprocessing.QuantileTransformer(output_distribution='normal', random_state=0)\nx = quantile_transformer.fit_transform(x)\n\n# Apply PCA to gaussian like data\npca=PCA(n_components=2)\nx2 = pca.fit_transform(x)\n# Transforma again the second component of PCA to turn bimodel distribution into gaussian\nx2[:,1] = quantile_transformer.fit_transform(x2[:,1].reshape((-1,1))).ravel()\n\n# Expectation maximisation for clustering\ngm=GaussianMixture(3)\ngm_preds = gm.fit_predict(x2)\n\n# Plot clusters on 2-d\nplt.scatter(x2[:,0],x2[:,1], c=gm_preds)\nplt.show()","eba1e2ee":"# Apply Transformation & PCA & Clustering","255693b3":"# Create Features of Intermittent Demand","1f4f885a":"# Clustering time series using intermittent demand related features\n\nGiven that handling the intermitten demand is one of the main challanges of the competition I encountered some research publications that apply clustering to group time series according to intermitten demand characteristcis.\nThey use clustering to aggregate series and make the predictions on aggregated levels though I thought clustering may also help for this competition. I just clustered them quickly as below and will try to see whether there is any improvement by training different GBMs for different clusters. If someone has already tried, I would be really happy to hear about observed results.\n\nAlso, I think this intermittent demand related features can also help without clustering.\n"}}