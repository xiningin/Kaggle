{"cell_type":{"9339716f":"code","46d90f03":"code","c9a988d5":"code","5f14ffab":"code","3dc444fd":"code","ea2d7202":"code","234d90b1":"code","e88e7180":"code","086d129e":"code","8efb3543":"code","36d25e2d":"code","3261bd6e":"code","4ee8dbe4":"code","3acb0ef2":"code","c5dcfab1":"code","b6b247de":"code","77392cbd":"code","cca15240":"code","9f4d7e02":"code","7acaff1c":"code","e2b7db03":"code","85cf74c7":"code","0e4c76a4":"code","60945a80":"code","d7c91da3":"code","a839a153":"code","25e2400b":"code","d6aca26e":"code","cafed4b6":"code","3d4d3b06":"markdown","a295047e":"markdown","7dd1e860":"markdown","62f55dd4":"markdown","4b6e4319":"markdown","cf6dd23f":"markdown","e41957ef":"markdown","25378047":"markdown"},"source":{"9339716f":"import numpy as np\nimport pandas as pd","46d90f03":"def load_data(path):\n    return pd.read_csv(path, parse_dates=['date'])","c9a988d5":"train = load_data('\/kaggle\/input\/tabular-playground-series-jan-2022\/train.csv')\ntest = load_data('\/kaggle\/input\/tabular-playground-series-jan-2022\/test.csv')","5f14ffab":"train.head()","3dc444fd":"train.info()","ea2d7202":"test.info()","234d90b1":"cat_features = [\"country\", \"store\", \"product\", \"holiday_name\"]","e88e7180":"train[\"country\"].value_counts()","086d129e":"train[\"store\"].value_counts()","8efb3543":"train[\"product\"].value_counts()","36d25e2d":"import seaborn as sns\nimport matplotlib.pyplot as plt","3261bd6e":"sns.boxplot(y=\"num_sold\", data=train)\nplt.tight_layout()\nplt.show()","4ee8dbe4":"train[train['num_sold'] > 1800].sort_values(by=\"num_sold\", ascending=False)","3acb0ef2":"import holidays\n\nyears = [2015, 2016, 2017, 2018, 2019]\ncountry_list = [\n    (\"Finland\", \"FI\"),\n    (\"Norway\", \"NO\"),\n    (\"Sweden\", \"SE\")\n]\nholiday_dict = {country[0]: holidays.CountryHoliday(country[1], years=years) for country in country_list}","c5dcfab1":"def get_holiday_name(row):\n    try:\n        return holiday_dict[row[\"country\"]][row[\"date\"]]\n    except:\n        return \"NA\"","b6b247de":"def engineer(df):\n    df = df.copy()\n    \n    t0 = np.datetime64('2015-01-01')\n    df['time_step'] = (df[\"date\"] - t0).astype('timedelta64[D]').astype(np.int)\n    \n    df['year'] = df['date'].dt.year\n    \n    df['quarter'] = df['date'].dt.quarter\n    df['quarter_sin'] = np.sin(df['quarter'] * (2 * np.pi \/ 4))\n    df['quarter_cos'] = np.cos(df['quarter'] * (2 * np.pi \/ 4))\n    \n    df['month'] = df['date'].dt.month\n    df['month_sin'] = np.sin(df['month'] * (2 * np.pi \/ 12))\n    df['month_cos'] = np.cos(df['month'] * (2 * np.pi \/ 12))\n    \n    df['week'] = df['date'].dt.week\n    df['week_sin'] = np.sin(df['week'] * (2 * np.pi \/ 52))\n    df['week_cos'] = np.cos(df['week'] * (2 * np.pi \/ 52))\n    \n    df['day'] = df['date'].dt.day\n    df['day_sin'] = np.sin(df['day'] * (2 * np.pi \/ 31))\n    df['day_cos'] = np.cos(df['day'] * (2 * np.pi \/ 31))\n    \n    df['day_of_year'] = df['date'].dt.day_of_year\n    df['day_of_year_sin'] = np.sin(df['day_of_year'] * (2 * np.pi \/ 366))\n    df['day_of_year_cos'] = np.cos(df['day_of_year'] * (2 * np.pi \/ 366))\n    \n    df['day_of_week'] = df['date'].dt.weekday\n    df['day_of_week_sin'] = np.sin(df['day_of_week'] * (2 * np.pi \/ 7))\n    df['day_of_week_cos'] = np.cos(df['day_of_week'] * (2 * np.pi \/ 7))\n    \n    df[\"is_weekend\"] = df['day_of_week'] >= 5\n    \n    df['holiday_name'] = df.apply(get_holiday_name, axis=1)\n    df['is_holiday'] = np.where(df['holiday_name'] != \"NA\", 1, 0)\n    \n    df = df.drop(columns=[\"row_id\", \"date\"])\n    \n    return df","77392cbd":"train_proc = engineer(train)","cca15240":"y = train_proc[\"num_sold\"]\nX = train_proc.drop(columns=[\"num_sold\"])","9f4d7e02":"from catboost import CatBoostRegressor","7acaff1c":"params = {\n    \"loss_function\": \"MAPE\",\n    \"eval_metric\": \"SMAPE\",\n    \"cat_features\": cat_features,\n    \"iterations\": 1800,\n    \"random_seed\": 63\n}","e2b7db03":"def cv(new_params):\n    scores = []\n\n    for year in [2015, 2016, 2017, 2018]:\n#         print(f\"Fold: {year}\")\n#         print(\"-\" * 80)\n\n        val_index = X['year'] == year\n        val_X = X[val_index]\n        val_y = y[val_index]\n\n        train_index = X['year'] != year\n        train_X = X[train_index]\n        train_y = y[train_index]\n\n        model = CatBoostRegressor(**params)\n        model.set_params(**new_params)\n        model.fit(train_X, train_y, eval_set=(val_X, val_y), use_best_model=True, verbose=False)\n\n        score = model.get_best_score()[\"validation\"][\"SMAPE\"]\n        best_iteration = model.get_best_iteration()\n\n        scores.append(score)\n\n#         print(f\"Best iteration: {best_iteration}\")\n#         print(f\"Best score: {score}\")\n#         print()\n\n    avg_score = sum(scores) \/ len(scores)\n    \n#     print(\"-\" * 80)\n#     print(f\"Avg score: {avg_score}\")\n#     print(\"-\" * 80)\n#     print()\n    \n    return avg_score","85cf74c7":"from itertools import product\n\ndef get_grid_permutations(grid_dict):\n    keys, vals = list(grid_dict.keys()), list(grid_dict.values())\n    permutations = list(product(*vals))\n    result = [{keys[index]: entry[index] for index in range(len(entry))} for entry in permutations]\n    return result","0e4c76a4":"%%time\n\ngrid = {'depth': [10, 11, 12],\n        'l2_leaf_reg': [3, 4, 5],\n        'border_count': [512, 768, 1024]}\n\ngrid_permutations = get_grid_permutations(grid)\n\nbest_score = float(\"inf\")\nbest_params = grid_permutations[0]\n\nfor permutation in grid_permutations:\n    print(permutation)\n    print(\"-\" * 80)\n    \n    score = cv(permutation)\n\n    print(f\"CV score: {score}\")\n    print()\n    \n    if score < best_score:\n        best_score = score\n        best_params = permutation\n\nprint(\"-\" * 80)\nprint(f\"Best score: {best_score}\")\nprint(f\"Best params: {best_params}\")\nprint(\"-\" * 80)\nprint()","60945a80":"model = CatBoostRegressor(**params)\nmodel.set_params(**best_params)\nmodel.fit(X, y, verbose=200)","d7c91da3":"model.get_feature_importance(prettified=True)","a839a153":"test_X = engineer(test)","25e2400b":"test_preds = model.predict(test_X)","d6aca26e":"output = pd.DataFrame({\"row_id\": test[\"row_id\"], \"num_sold\": test_preds})\noutput.to_csv('submission.csv', index=False)","cafed4b6":"output","3d4d3b06":"## Fit Model with best params","a295047e":"# Submission","7dd1e860":"# Outliers","62f55dd4":"# Feature Engineering","4b6e4319":"# Feature Importance","cf6dd23f":"# CatBoost Model","e41957ef":"# Cross-Validation","25378047":"# Grid Search"}}