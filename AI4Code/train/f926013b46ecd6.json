{"cell_type":{"e8ab6b8f":"code","85cf19b4":"code","52c9a4a3":"code","80465512":"code","ad062a72":"code","d34227fc":"code","b3a1d4ee":"code","9762f07c":"code","280b1b28":"code","0504c858":"code","91756d22":"code","e6464be6":"code","670abaac":"code","15ba5bec":"code","05c6e20e":"code","8a667f75":"code","2c16f8fc":"code","25e9b092":"code","d2c0c757":"code","e1e22399":"code","9bd6feef":"code","fdb46015":"code","a241b5fc":"code","5c3ed013":"code","57f41176":"code","4a38e16f":"code","6322af6f":"code","66e6eb1f":"code","a96629bb":"code","c203db5a":"code","11e9ecb3":"code","ea7e20f9":"code","8ba409a0":"code","566432a0":"code","31c9fda4":"code","0b46ff7b":"code","f1f61688":"code","3d866936":"code","9e48d807":"code","1341f745":"code","99c3e471":"code","0ebce113":"code","f1ddfab5":"code","ea7d7787":"code","3a5aaa5d":"code","6d61e60c":"code","2105fd4c":"code","9b102283":"code","ee1ec313":"code","b9e92fdc":"code","9bafec4a":"code","a5e9a2b1":"code","71918faa":"code","4814493f":"code","8c698c8c":"code","70f6434f":"code","9375da83":"code","f0431996":"code","040cfbdc":"code","c31d33f4":"code","9dbfcd3c":"code","5a386e1b":"code","f7ecaa9c":"markdown","deb0dbdf":"markdown","629e8390":"markdown","24b8b2de":"markdown","f0305f31":"markdown","bd2aaf64":"markdown","9a6016eb":"markdown"},"source":{"e8ab6b8f":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt","85cf19b4":"df = pd.read_csv(\"..\/input\/housesalesprediction\/kc_house_data.csv\")\n","52c9a4a3":"df.info()","80465512":"df.describe().transpose()","ad062a72":"plt.figure(figsize=(12,8))\nsns.distplot(df[\"price\"])","d34227fc":"sns.countplot(df[\"bedrooms\"])","b3a1d4ee":"sns.barplot(x=\"bedrooms\", y=\"price\", data=df)","9762f07c":"plt.figure(figsize=(12,8))\nsns.scatterplot(x=\"sqft_living\",y=\"price\",data=df)","280b1b28":"plt.figure(figsize=(12,8))\nsns.scatterplot(x=\"sqft_basement\", y=\"price\", data=df)","0504c858":"plt.figure(figsize=(12,8))\nsns.scatterplot(x=\"long\", y=\"price\", data=df)","91756d22":"plt.figure(figsize=(12,8))\nsns.scatterplot(x=\"lat\", y=\"price\", data=df)","e6464be6":"plt.figure(figsize=(12,8))\nsns.scatterplot(x=\"long\", y=\"lat\",\n                data=df, hue=\"price\",\n                palette=\"RdYlBu\", edgecolor=None)","670abaac":"sns.boxplot(x=\"waterfront\", y=\"price\", data=df)","15ba5bec":"sns.boxplot(x=\"floors\", y=\"price\", data=df)","05c6e20e":"sns.boxplot(x=\"condition\", y=\"price\", data=df)","8a667f75":"sns.boxplot(x=\"grade\", y=\"price\", data=df)","2c16f8fc":"sns.boxplot(x=\"view\", y=\"price\", data=df)","25e9b092":"df.sort_values(\"price\", ascending=False).head(50)","d2c0c757":"df = df.sort_values(\"price\", ascending=False).iloc[45:]","e1e22399":"plt.figure(figsize=(12,8))\nsns.scatterplot(x=\"long\", y=\"lat\",\n                data=df, hue=\"price\",\n                palette=\"RdYlBu\", edgecolor=None)","9bd6feef":"df.head()","fdb46015":"df = df.drop(\"id\", axis=1)","a241b5fc":"df[\"date\"] = pd.to_datetime(df[\"date\"])","5c3ed013":"df[\"year\"] = df[\"date\"].apply(lambda date:date.year)","57f41176":"df[\"month\"] = df[\"date\"].apply(lambda date:date.month)","4a38e16f":"df.groupby(\"year\").mean()[\"price\"]","6322af6f":"sns.barplot(x=\"month\", y=\"price\", data=df)","66e6eb1f":"df = df.drop(\"date\", axis=1)","a96629bb":"df.head()","c203db5a":"df[\"zipcode\"].value_counts()","11e9ecb3":"df = df.drop(\"zipcode\", axis=1)","ea7e20f9":"df[\"yr_renovated\"].value_counts()","8ba409a0":"df.head()","566432a0":"features = [\"price\", \"bedrooms\", \"sqft_living\", \"sqft_lot\", \"floors\", \"waterfront\",\n            \"view\", \"condition\", \"grade\", \"sqft_above\", \"sqft_basement\", \"yr_built\",\n            \"yr_renovated\", \"lat\", \"long\", \"sqft_living15\", \"sqft_lot15\", \"year\", \"month\"]\nmask = np.zeros_like(df[features].corr(), dtype=np.bool) \nmask[np.triu_indices_from(mask)] = True \n\nf, ax = plt.subplots(figsize=(16, 12))\nplt.title('Pearson Correlation Matrix',fontsize=25)\n\nsns.heatmap(df[features].corr(),linewidths=0.25,vmax=0.7,square=True,cmap=\"BuGn\",\n            linecolor='w',annot=True,annot_kws={\"size\":8},mask=mask,cbar_kws={\"shrink\": .9});\n","31c9fda4":"X = df.drop(\"price\", axis=1)\ny = df[\"price\"]","0b46ff7b":"from sklearn.model_selection import train_test_split","f1f61688":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=101)","3d866936":"X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.25, random_state=0)","9e48d807":"X_train.shape","1341f745":"X_val.shape","99c3e471":"X_test.shape","0ebce113":"from sklearn.preprocessing import MinMaxScaler","f1ddfab5":"scaler = MinMaxScaler()","ea7d7787":"X_train = scaler.fit_transform(X_train)","3a5aaa5d":"X_val = scaler.transform(X_val)","6d61e60c":"X_test = scaler.transform(X_test)","2105fd4c":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Activation\nfrom tensorflow.keras.optimizers import Adam","9b102283":"model = Sequential()\n\nmodel.add(Dense(19, activation=\"relu\"))\nmodel.add(Dense(16, activation=\"relu\"))\nmodel.add(Dense(16, activation=\"relu\"))\nmodel.add(Dense(8, activation=\"relu\"))\n\nmodel.add(Dense(1))\n\nmodel.compile(optimizer=\"adam\", loss=\"mse\")","ee1ec313":"from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint","b9e92fdc":"#early_stop = EarlyStopping(monitor=\"val_loss\", patience=1000)","9bafec4a":"check_point = ModelCheckpoint(\"best_model.h5\", monitor=\"val_loss\", verbose=0, save_best_only=True)","a5e9a2b1":"model.fit(x=X_train, y=y_train.values,\n          validation_data=(X_val, y_val.values),\n          batch_size=32, epochs=10000, \n          callbacks=[check_point], verbose=0)","71918faa":"losses = pd.DataFrame(model.history.history)","4814493f":"losses.plot()","8c698c8c":"from keras.models import load_model","70f6434f":"saved_model = load_model('best_model.h5')","9375da83":"predictions = saved_model.predict(X_test)","f0431996":"from sklearn.metrics import mean_squared_error, r2_score","040cfbdc":"rmse = np.sqrt(mean_squared_error(y_test,predictions))","c31d33f4":"r2 = r2_score(y_test, predictions)","9dbfcd3c":"avg = np.mean(y_test)","5a386e1b":"print(\"Average house price in test set: {}\".format(avg))\nprint(\"RMSE: {}\".format(rmse))\nprint(\"R-squared score: {}\".format(r2))","f7ecaa9c":"60% train, 20% validation and 20% test","deb0dbdf":"# Features","629e8390":"# Train Test Split","24b8b2de":"# Remove houses worth more than 3 million and create a model for houses up to 3 million. Discard 45 most expensive houses out of 21613.","f0305f31":"# Scaling","bd2aaf64":"Requires domain expertise for feature engineering.","9a6016eb":"# Model"}}