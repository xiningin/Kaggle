{"cell_type":{"d18661dc":"code","1ab125bf":"code","3600fe5e":"code","7eee12d5":"code","d03369e0":"code","989aa2d1":"code","01f38651":"code","4879d735":"code","693a203b":"code","b3174d97":"code","fad5f3b6":"code","b0069907":"code","b059f444":"code","2b77b15a":"code","4b36cf4d":"code","311b3631":"code","77ffb12e":"code","537fdf37":"code","42f2829b":"code","18340e5c":"code","a379dfa2":"code","1da6fa4c":"code","2087b37e":"code","fd56d855":"code","701ba1a4":"code","fde37270":"code","5a99d1cd":"code","1543ce0b":"code","c58e5af4":"code","5cd381f0":"code","741c2e14":"code","2454d042":"code","8d5de4a0":"code","1bc36013":"code","b97500a2":"code","715e6bfd":"code","2e289c6b":"markdown","a1937a89":"markdown","c884fb0b":"markdown","d0b2c11f":"markdown","90b1deaf":"markdown","43286389":"markdown","c78e845c":"markdown","732a7cf7":"markdown","8a1e76e7":"markdown"},"source":{"d18661dc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1ab125bf":"test=\"test\"\nsample=0.05\ntest=\"final\"","3600fe5e":"import csv\nimport requests\nimport gc","7eee12d5":"import seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl","d03369e0":"CSV_URL = 'https:\/\/raw.githubusercontent.com\/t-davidson\/hate-speech-and-offensive-language\/master\/data\/labeled_data.csv'\n\nwith requests.Session() as s:\n    download = s.get(CSV_URL)\n\n    decoded_content = download.content.decode('utf-8')\n\n    cr = csv.reader(decoded_content.splitlines(), delimiter=',')\n    my_list = list(cr)","989aa2d1":"hateoffensive_df=pd.DataFrame(my_list)\n","01f38651":"hateoffensive_df.columns","4879d735":"col_list=[ 'count', 'hate_speech', 'offensive_language', 'neither']","693a203b":"hateoffensive_df.columns = hateoffensive_df.iloc[0]\nhateoffensive_df=hateoffensive_df.drop(0)\nhateoffensive_df.head()","b3174d97":"if test==\"test\":\n    hateoffensive_df=hateoffensive_df.sample(frac=sample)","fad5f3b6":"for col in col_list:\n    hateoffensive_df.astype({col: 'int32'})","b0069907":"#hateoffensive_df=hateoffensive_df.sample(300)","b059f444":"def scores (row):\n    if row=='0':\n        \n        return 2\n    if row=='2':\n        return 0\n    else:\n        return 1\ndef classes (row):\n    if row=='0': \n        return 'hate_speech'\n    if row=='2':\n        return 'neutral'\n    else:\n        return 'offensive'   \n","2b77b15a":"hateoffensive_df['numeric_class']=hateoffensive_df['class'].apply(lambda x: scores(x))\nhateoffensive_df['classes']=hateoffensive_df['class'].apply(lambda x: classes(x))\nhateoffensive_df=hateoffensive_df.rename(columns={\"tweet\": \"text\"})","4b36cf4d":"hateoffensive_df.head(3)","311b3631":"ax=sns.countplot(x=\"classes\", data=hateoffensive_df)\n","77ffb12e":"fig, axes = plt.subplots(2, 2, figsize=(18, 10))\n\nfig.suptitle('Automated Hate Speech Detection and the Problem of Offensive Language \\n Inter-Annotator Agreement')\nsns.countplot(ax=axes[0, 0],x=\"hate_speech\", data=hateoffensive_df)\nsns.countplot(ax=axes[0, 1],x=\"offensive_language\", data=hateoffensive_df)\nsns.countplot(ax=axes[1, 0],x=\"neither\", data=hateoffensive_df)\nsns.countplot(ax=axes[1, 1],x=\"class\", data=hateoffensive_df)\n             \n  ","537fdf37":"def severity  (row):\n    if row=='jigsaw_df': \n        return 3\n    if row=='neutral':\n        return 1\n    else:\n        return 2  ","42f2829b":"# scoring also neutral text see above\ndef severity_filter  (row):\n    if row=='jigsaw_df': \n        return 1\n    if row=='neutral':\n        return 0\n    else:\n        return 1  \n","18340e5c":"#hateoffensive_df.head(100)","a379dfa2":"hateoffensive_df['hate_speech'] = pd.to_numeric(hateoffensive_df['hate_speech'], errors='coerce').fillna(0).astype(int)\nhateoffensive_df['count']=pd.to_numeric(hateoffensive_df['count'], errors='coerce').fillna(0).astype(int)\nhateoffensive_df['offensive_language']=pd.to_numeric(hateoffensive_df['offensive_language'], errors='coerce').fillna(0).astype(int)\nhateoffensive_df['neutral_language']=pd.to_numeric(hateoffensive_df['neither'], errors='coerce').fillna(0).astype(int)\n#df['StopTime'] =  pd.to_numeric(df['StopTime'","1da6fa4c":"hateoffensive_df['hate_speech_agreement']=hateoffensive_df['hate_speech']\/hateoffensive_df['count']\nhateoffensive_df['offensive_language_agreement']=hateoffensive_df['offensive_language']\/hateoffensive_df['count']\nhateoffensive_df['neutral_language_agreement']=hateoffensive_df['neutral_language']\/hateoffensive_df['count']","2087b37e":"hateoffensive_df.hate_speech_agreement.value_counts()","fd56d855":"ax = sns.countplot(x=\"hate_speech_agreement\", data=hateoffensive_df)\nax.set_xticklabels(ax.get_xticklabels(), rotation=40, ha=\"right\")\nplt.tight_layout()\nplt.show()","701ba1a4":"hateoffensive_df.offensive_language_agreement.value_counts()","fde37270":"ax = sns.countplot(x=\"offensive_language_agreement\", data=hateoffensive_df)\nax.set_xticklabels(ax.get_xticklabels(), rotation=40, ha=\"right\")\nplt.tight_layout()\nplt.show()","5a99d1cd":"ax = sns.countplot(x=\"neutral_language_agreement\", data=hateoffensive_df)\nax.set_xticklabels(ax.get_xticklabels(), rotation=40, ha=\"right\")\nplt.tight_layout()\nplt.show()","1543ce0b":"hateoffensive_df.head(3)","c58e5af4":"sns.displot(x=hateoffensive_df[\"hate_speech_agreement\"])","5cd381f0":"sns.displot(x=hateoffensive_df[\"offensive_language_agreement\"])","741c2e14":"sns.displot(x=hateoffensive_df[\"neutral_language_agreement\"])","2454d042":"hateoffensive_df['scoring1']=2*(hateoffensive_df['hate_speech'].astype(int)+hateoffensive_df['offensive_language'].astype(int)-hateoffensive_df['neither'].astype(int))\/hateoffensive_df['count']+2","8d5de4a0":"sns.displot(x=hateoffensive_df[\"scoring1\"])","1bc36013":"hateoffensive_df['scoring2']=hateoffensive_df['hate_speech_agreement']+hateoffensive_df['offensive_language_agreement']-hateoffensive_df['neutral_language_agreement']+1","b97500a2":"sns.displot(x=hateoffensive_df[\"scoring2\"])","715e6bfd":"hateoffensive_df.to_csv(\"hateoffensive.csv\")","2e289c6b":"Not sure if it is relevant here :)","a1937a89":"# Hate speech augumentation\n\n@inproceedings{hateoffensive,\n  title = {Automated Hate Speech Detection and the Problem of Offensive Language},\n  author = {Davidson, Thomas and Warmsley, Dana and Macy, Michael and Weber, Ingmar}, \n  booktitle = {Proceedings of the 11th International AAAI Conference on Web and Social Media},\n  series = {ICWSM '17},\n  year = {2017},\n  location = {Montreal, Canada},\n  pages = {512-515}\n  }\n  \n  The data are stored as a CSV and as a pickled pandas dataframe (Python 2.7). Each data file contains 5 columns:\n\ncount = number of CrowdFlower users who coded each tweet (min is 3, sometimes more users coded a tweet when judgments were determined to be unreliable by CF).\n\nhate_speech = number of CF users who judged the tweet to be hate speech.\n\noffensive_language = number of CF users who judged the tweet to be offensive.\n\nneither = number of CF users who judged the tweet to be neither offensive nor non-offensive.\n\nclass = class label for majority of CF users. 0 - hate speech 1 - offensive language 2 - neither\n\nMIT License\n\nCopyright (c) 2017 Tom Davidson\n","c884fb0b":"# Inter-Annotator Agreement","d0b2c11f":"count = number of CrowdFlower users who coded each tweet (min is 3, sometimes more users coded a tweet when judgments were determined to be unreliable by CF).\n\nhate_speech = number of CF users who judged the tweet to be hate speech.\n\noffensive_language = number of CF users who judged the tweet to be offensive.\n\nneither = number of CF users who judged the tweet to be neither offensive nor non-offensive.\n\nclass = class label for majority of CF users. 0 - hate speech 1 - offensive language 2 - neither\n\n#### Feed back is highly appreciated for dataset creators:\n\nhttps:\/\/github.com\/t-davidson\/hate-speech-and-offensive-language","90b1deaf":"# Read Jigsaw competition dataset\nDescription\nThe data was published for testinx in Toxic jigsaw competition","43286389":"Since the Tom Davidson dataset has different addnotation we change the classes","c78e845c":"better then nothing for neutral text","732a7cf7":"The dataset perform well but the challange are neutral tags.\nI propose a scoring algoritm for tagging the neutral text.","8a1e76e7":"Search for Neutrality rating.\nfor exemple wiki commnents about valdalism are considered neutral. still... i believe there is not full agreement on this :)"}}