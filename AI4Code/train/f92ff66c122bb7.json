{"cell_type":{"9a0742db":"code","fda64409":"markdown"},"source":{"9a0742db":"import pandas as pd\nimport plotly as py\nimport plotly.graph_objs as go\nfrom plotly.tools import FigureFactory as FF\nfrom pandas.io import gbq\n    \n    # Perform a query.\n#QUERY = ('SELECT * FROM `ethchain-216308.EthData.ERC721Data` LIMIT 1000')\n\nQUERY = (\n    'SELECT contracts.address,COUNT(1) AS tx_count FROM `bigquery-public-data.ethereum_blockchain.contracts` AS contracts JOIN `bigquery-public-data.ethereum_blockchain.transactions` AS transactions ON (transactions.to_address = contracts.address)'\n    'GROUP BY contracts.address ORDER BY tx_count DESC LIMIT 100'\n)\n\n#Visualizing Etherwise date & volume\nQUERYEthTransVol = (\n'SELECT date(block_timestamp) as date,sum(value)\/power(10,18) as volume FROM `bigquery-public-data.ethereum_blockchain.transactions` group by date order by date'\n)\n\n#Visualizing average Ether costs over time\nqueryCost = \"\"\"\nSELECT \n  SUM(value\/POWER(10,18)) AS sum_tx_ether,\n  AVG(gas_price*(receipt_gas_used\/POWER(10,18))) AS avg_tx_gas_cost,\n  DATE(timestamp) AS tx_date\nFROM\n  `bigquery-public-data.crypto_ethereum.transactions` AS transactions,\n  `bigquery-public-data.crypto_ethereum.blocks` AS blocks\nWHERE TRUE\n  AND transactions.block_number = blocks.number\n  AND receipt_status = 1\n  AND value > 0\nGROUP BY tx_date\nHAVING tx_date >= '2019-01-01' AND tx_date <= '2019-02-25'\nORDER BY tx_date\n\"\"\"\n\ntop10_story_df = gbq.read_gbq(QUERY, project_id='ethchain-216308',dialect='standard')\n\ntran_df = gbq.read_gbq(QUERYEthTransVol, project_id='ethchain-216308',dialect='standard')\n\ntran_dfForCost = gbq.read_gbq(queryCost, project_id='ethchain-216308',dialect='standard')\n\n# Create a table figure from the DataFrame\n#top10_story_figure = plotly.figure_factory.create_table(top10_story_df)\n\npy.offline.init_notebook_mode(connected=True)\n\npy.offline.iplot({\n    \"data\": [go.Bar(x=top10_story_df['address'], y=top10_story_df['tx_count'])],\n    \"layout\": go.Layout(title=\"Addresswise ETH Token Count - Vertical Bars\",hovermode= \"closest\",xaxis={\"type\": \"category\",\"title\":\"Eth Address\"},yaxis={\"title\":\"tx_count\"})\n}, filename='Addresswise-ETH-Token-Count-verticals.html')\n\n#top10_story_df\n\ntrace = go.Scatter(\n    x=top10_story_df['address'],\n    y=top10_story_df['tx_count'],\n    mode='lines',\n    text=top10_story_df['address'],\n    \n)\n\nlayout = go.Layout(\n    title='Addresswise ETH Token Count - Scatter',\n    xaxis=dict(\n        title=\"Eth Address\"\n    ),\n    yaxis=dict(\n        title=\"tx_Count\"\n    )\n)\n\ndata = [trace]\n\nfig = go.Figure(data=data, layout=layout)\npy.offline.iplot(fig, filename='Addresswise-ETH-Token-Count-scatter.html')\n\n#tran_df\n\npy.offline.iplot({\n    \"data\": [go.Bar(x=tran_df['date'], y=tran_df['volume'])],\n    \"layout\": go.Layout(title=\"Datewise Ethereum transaction volume - Vertical Bars\",hovermode= \"closest\",xaxis={\"title\":\"Date\"},yaxis={\"title\":\"Volume\"})\n},filename='Datewise-ETH-Volume.html')\n\n#tran_dfForCost\ntrace1 = go.Scatter(\n    x=tran_dfForCost['tx_date'],\n    y=tran_dfForCost['sum_tx_ether'],\n    mode='lines+markers'\n    \n)\ntrace2 = go.Scatter(\n    x=tran_dfForCost['tx_date'],\n    y=tran_dfForCost['avg_tx_gas_cost'],\n    mode='lines+markers'\n    \n)\n\nlayout1 = go.Layout(\n    title='Visualizing Sum Ether costs over time-2019-Scatter',\n    xaxis=dict(\n        title=\"Date\"\n    ),\n    yaxis=dict(\n        title=\"Sum Ether Cost\"\n    )\n)\n\ndata1 = [trace1,trace2]\n\nfig1 = go.Figure(data=data1, layout=layout1)\npy.offline.iplot(fig1,filename='Datewise-ETH-GasCost.html')\n\n\n\npy.offline.iplot({\n    \"data\": [go.Bar(x=tran_dfForCost['tx_date'], y=tran_dfForCost['avg_tx_gas_cost'])],\n    \"layout\": go.Layout(title=\"Visualizing average Ether costs over time-2019-Bar\",xaxis={\"title\":\"Date\"},yaxis={\"title\":\"Avg Gas Cost\"})\n},filename='Datewise-ETH-GasCost.html')\n","fda64409":"# ETH Token Count from Google Big Query"}}