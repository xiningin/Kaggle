{"cell_type":{"3723481c":"code","528d4172":"code","1f533f09":"code","bfbe6d3f":"code","896cdb3a":"code","68df1898":"code","b5121978":"code","bf1f5a2d":"code","324739b9":"code","8c840312":"code","595d488f":"code","ca4f8950":"code","fd90b55b":"code","ff0527c3":"code","e67cc756":"code","fbea6a89":"code","91008fb6":"code","149084bf":"code","6a7e5dd3":"code","51426a04":"code","8a8d1218":"code","199c0ea1":"code","6646deb8":"code","76de02ab":"code","7c7f8308":"code","fdc321e4":"code","fab32160":"code","1772f2c5":"code","250fd948":"code","261b72a9":"code","be634191":"code","798796e5":"code","1fd671fd":"code","fe5dc01a":"code","9b4712e3":"code","f73fbaaa":"code","b73b15ba":"code","db56b59e":"code","263cd79d":"code","78c23637":"code","ea00b403":"code","fc4956a3":"code","8cc31e83":"code","66a36f59":"code","690bad71":"code","336463d8":"code","ba9e47b3":"code","227c2bb1":"code","54a5b420":"markdown","a79a6629":"markdown","6e62831f":"markdown","a2d43ab4":"markdown","30224042":"markdown","729cd448":"markdown","e58c85c2":"markdown","09fb069d":"markdown","ca232ce5":"markdown","d6b3e856":"markdown","8941c63f":"markdown","179d60d3":"markdown","7166b43d":"markdown","bd10b3ac":"markdown","2c8ba538":"markdown","3e0f1de8":"markdown","c459d459":"markdown","871ecaf9":"markdown","c8a889ac":"markdown","4a4dfa9a":"markdown","e86d18b9":"markdown","9f65476b":"markdown","25e5f305":"markdown","a9d3bceb":"markdown","6e2be79c":"markdown","ff4ebc1d":"markdown","e618c6d5":"markdown","d298eeca":"markdown","ca6af47e":"markdown","327f1fb1":"markdown","11614cc8":"markdown","58a5b8d6":"markdown","3e376e3c":"markdown","6eecc335":"markdown","6d16dd7e":"markdown","6f3b9654":"markdown","103af750":"markdown"},"source":{"3723481c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","528d4172":"import pandas as pd\nfrom pandas import DataFrame, Series\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom pylab import rcParams\nimport seaborn as sns\nfrom datetime import date","1f533f09":"%matplotlib inline\nrcParams['figure.figsize'] = 10,10\nrcParams['font.size'] = 15\nsns.set_style('whitegrid')\nsns.set_palette(\"pastel\")","bfbe6d3f":"corona = pd.read_excel('..\/input\/corona\/corona.xlsx') \n\ncorona.head()\n\ncorona.sample(5)","896cdb3a":"corona.drop(['Unnamed: 8','Unnamed: 7'],axis=1,inplace=True)\ncorona.head()","68df1898":"corona.drop(['dateRep'],axis=1,inplace=True)\ncorona.head()","b5121978":"corona.isna().any()","bf1f5a2d":"corona['popData2019'].fillna(0,inplace=True)\ncorona.isna().any()","324739b9":"corona['popData2019'] = (corona['popData2019']\/float(1000000)).round(2)\ncorona.sample(5)","8c840312":"corona.rename({'popData2019':'Population', \n               'countriesAndTerritories':'Countries'},\n              axis=1, inplace=True)\ncorona.head()","595d488f":"def drop_zero_days(data,country):\n    df = data[data['Countries'] == country].reset_index(drop=True)\n    first_infected_day = df[df['cases'] != 0 ].tail(1).index[0]\n    result = df.drop(df.index[first_infected_day+1:])\n    return result\n\ndef concatenate_countries_dfs(dfs):\n    df = DataFrame()\n    for d in dfs :\n        df = pd.concat([df,d],ignore_index=True)\n    return df\n\ncoutries = corona['Countries'].unique()\n\ncorona_dfs_list = []\n\nfor country in coutries:\n    df = drop_zero_days(corona, country)\n    if len(df) != 0:\n        corona_dfs_list.append(df)\n        \n        corona_updated = concatenate_countries_dfs(corona_dfs_list)\ncorona_updated","ca4f8950":"corona_updated.info()","fd90b55b":"corona_updated.describe()","ff0527c3":"corona_updated['Countries'].value_counts()","e67cc756":"corona_updated[corona_updated['deaths'] == 4928]","fbea6a89":"corona_updated[corona_updated['cases'] == 207913]","91008fb6":"corona_updated[corona_updated['cases'].eq(float(-8261))]","149084bf":"corona_updated[corona_updated['deaths'].eq(float(-1918))]","6a7e5dd3":"corona_updated['Countries'].value_counts()","51426a04":"corona_updated.corr()","8a8d1218":"d1 = date(2020,12,3)\nd2 = date(2020,3,21)\ncorona_days = (d1-d2).days\n\ncorona_gloabl_deaths_avg = corona_updated['deaths'].sum() \/ corona_days\ncorona_gloabl_cases_avg = corona_updated['cases'].sum() \/ corona_days\nprint(corona_gloabl_deaths_avg,corona_gloabl_cases_avg)","199c0ea1":"x = ['Deaths Global Average','Cases Global Average']\ny = [corona_gloabl_deaths_avg,corona_gloabl_cases_avg]\n\nfig = plt.figure(figsize=(5,5))\nax = fig.add_axes([.1,.1,1,1])\n\nax.set_ylabel('Averages')\nax.set_title('Daily deaths and cases average gloabally')\n\nax.bar(x,y)","6646deb8":"avg_by_country = corona_updated.groupby('Countries')[['deaths','cases']].agg([sum]).sort_values(by=('deaths','sum'))\navg_by_country = avg_by_country \/ corona_days\navg_by_country","76de02ab":"avg_by_country['deaths']['sum'].tail(5).plot(kind='bar')","7c7f8308":"avg_by_country['cases']['sum'].tail(5).plot(kind='bar')","fdc321e4":"sum_by_month = corona_updated.groupby('month')[['deaths','cases']].agg([sum]).sort_values(by=('deaths','sum'))\nsum_by_month ","fab32160":"x = sum_by_month.index.tolist()\ny = sum_by_month['deaths']['sum']\n\nfig = plt.figure(figsize=(5,5))\nax = fig.add_axes([.1,.1,1,1])\n\nax.set_title('Sum of deaths by month')\nax.set_yticklabels(x)\n\nax.pie(y,labels=x,autopct='%1.1f%%')","1772f2c5":"x = sum_by_month.index.tolist()\ny = sum_by_month['cases']['sum']\n\nfig = plt.figure(figsize=(5,5))\nax = fig.add_axes([.1,.1,1,1])\n\nax.set_title('Sum of cases by month')\nax.set_yticklabels(x)\n\nax.pie(y,labels=x,autopct='%1.1f%%')","250fd948":"sum_by_month_country = corona_updated.groupby(['Countries','month'])[['deaths','cases']].agg([sum]).sort_index()","261b72a9":"sum_by_month_country.loc[['China','Italy']]","be634191":"corona_by_country = corona_updated.groupby('Countries')\ndeaths_by_country_sum = corona_by_country['deaths'].sum()","798796e5":"deaths_by_country_sum = deaths_by_country_sum.sort_values(ascending=False).head(5)","1fd671fd":"x = deaths_by_country_sum.index.tolist()\ny = deaths_by_country_sum\n\nfig = plt.figure(figsize=(5,6))\nax = fig.add_axes([.1,.1,1,1])\n\nax.set_xlabel('Country')\nax.set_ylabel('Total of deaths')\nax.set_title('The number of deaths by first 5 coutries')\nax.set_xticklabels(x,rotation=60,horizontalalignment='center')\n\nax.bar(x,y)","fe5dc01a":"def time_series_by_country(country):\n    corona_by_day_ser = corona[corona['Countries']==country].sort_values(by=['year','month','day']).reset_index(drop=True)\n    x = corona_by_day_ser.index\n    y = corona_by_day_ser[['deaths','cases']]\n\n    max_deaths_v = y['deaths'].max()\n    max_deaths_i = corona_by_day_ser['deaths'].idxmax()\n\n    max_cases_v =  y['cases'].max()\n    max_cases_i = corona_by_day_ser['cases'].idxmax()\n\n    fig = plt.figure()\n    ax = fig.add_axes([.1,.1,1,1])\n\n    ax.set_xlabel('Over time')\n    ax.set_ylabel('Total ofdeaths & cases')\n    ax.set_title('Sum of global deaths & cases over the time')\n    ax.set_xticklabels(' ')\n\n    ax.annotate('max deaths \\n {} deaths'.format(max_deaths_v),xy=(max_deaths_i,max_deaths_v),xytext=( int(max_deaths_i)+5  ,int(max_deaths_v) + 50),\n               arrowprops=dict(facecolor='red',shrink=0.05))\n\n    ax.annotate('Max cases \\n {} cases'.format(max_cases_v) ,xy=(max_cases_i,max_cases_v),xytext=( int(max_cases_i)+5  ,int(max_cases_v) + 50),\n               arrowprops=dict(facecolor='red',shrink=0.05))\n\n    ax.plot(x,y)","9b4712e3":"corona_by_day_ser = corona[corona['Countries']==country].sort_values(by=['year','month','day']).reset_index(drop=True) #.sort_values(by=['deaths']).reset_index(drop=True)\nx = corona_by_day_ser.index\ny = corona_by_day_ser[['deaths','cases']]","f73fbaaa":"max_deaths_v = y['deaths'].max()\nmax_deaths_i = corona_by_day_ser['deaths'].idxmax()\n\nmax_cases_v =  y['cases'].max()\nmax_cases_i = corona_by_day_ser['cases'].idxmax()","b73b15ba":"fig = plt.figure()\nax = fig.add_axes([.1,.1,1,1])\n\nax.set_xlabel('Over time')\nax.set_ylabel('Total of Deaths & Cases')\nax.set_title('Sum of global deaths & cases over the time')\nax.set_xticklabels(' ')\n\nax.annotate('max deaths \\n {} deaths'.format(max_deaths_v),xy=(max_deaths_i,max_deaths_v),xytext=( int(max_deaths_i)+5  ,int(max_deaths_v) + 50),\n           arrowprops=dict(facecolor='red',shrink=0.05))\n\nax.annotate('max cases \\n {} cases'.format(max_cases_v) ,xy=(max_cases_i,max_cases_v),xytext=( int(max_cases_i)+5  ,int(max_cases_v) + 50),\n           arrowprops=dict(facecolor='red',shrink=0.05))\n\nax.plot(x,y)","db56b59e":"time_series_by_country('China')","263cd79d":"time_series_by_country('United_States_of_America')","78c23637":"time_series_by_country('Saudi_Arabia')","ea00b403":"from sklearn import preprocessing, svm\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression","fc4956a3":"x = corona.cases.values.reshape(-1, 1)\ny =corona.deaths.values.reshape(-1, 1)\nmodel.fit(x, y)\n\nr_sq = model.score(x, y)\nprint('coefficient of determination:', r_sq)\nprint('intercept:', model.intercept_[0])\nprint('slope:', model.coef_[0][0])","8cc31e83":"y_pred=model.predict(x)\ncompare=pd.DataFrame()\ncompare\ncompare['actual']=y.T[0]\ncompare['predicted']=y_pred.T[0]\ncompare.head(10)","66a36f59":"import matplotlib.pyplot as plt","690bad71":"\n_, ax=plt.subplots(figsize=(15,5))\n\nn_samples=50 #Y.shape[0]\nn_samples=y.shape[0]\nax.scatter(x=range(0, n_samples),y=y[0:n_samples],c= 'blue',label='Actual')\nax.scatter(x=range(0, n_samples),y=y_pred.T[0:n_samples],c= 'red',label='predicted')\n\nplt.title('Actual and predicted values')\nplt.xlabel('Samples')\nplt.ylabel('value')\nplt.legend()\nplt.show()","336463d8":"x = corona.cases.values.reshape(-1, 1)\ny =corona.Population.values.reshape(-1, 1)\nmodel.fit(x, y)\n\nr_sq = model.score(x, y)\nprint('coefficient of determination:', r_sq)\nprint('intercept:', model.intercept_[0])\nprint('slope:', model.coef_[0][0])","ba9e47b3":"y_pred=model.predict(x)\ncompare=pd.DataFrame()\ncompare\ncompare['actual']=y.T[0]\ncompare['predicted']=y_pred.T[0]\ncompare.head(10)","227c2bb1":"_, ax=plt.subplots(figsize=(15,5))\n\nn_samples=50 #Y.shape[0]\nn_samples=y.shape[0]\nax.scatter(x=range(0, n_samples),y=y[0:n_samples],c= 'green',label='Actual')\nax.scatter(x=range(0, n_samples),y=y_pred.T[0:n_samples],c= 'red',label='predicted')\n\nplt.title('Actual and predicted values')\nplt.xlabel('Samples')\nplt.ylabel('value')\nplt.legend()\nplt.show()","54a5b420":"# Presence of irrational values, as the function describe returning negative values","a79a6629":"# A function describe a lot of statistical information about the data","6e62831f":"# Knowing the degree of correlation between data properties","a2d43ab4":"# What is the total number of injuries and deaths per month according to each country?","30224042":"# Who are the 5 countries with the highest number of deaths and injuries since the beginning of the virus outbreak?","729cd448":"# Presence of irrational values, as the function describe returning negative values","e58c85c2":"# Get the number of records for each country separately","09fb069d":"# Remove dateRep column as a duplicate column","ca232ce5":"# The same goes for the daily injury rate for the top 5 countries","d6b3e856":" # Converting the column \"PopData2019\" into small numerical values","8941c63f":"# What is the average number of daily infections and deaths worldwide since the start of the virus outbreak?","179d60d3":"# Change the blank value to zero","7166b43d":"# To show the previous information on a bar graph","bd10b3ac":"# When calling the function for a country like USA\n","2c8ba538":"# Ensure that there are no null values \u200b\u200bin the data","3e0f1de8":"# The x axis will be the data frame index for the country, and the y axis will be the number of daily deaths and injuries\u00b6","c459d459":"# Change the names of some of the columns\n","871ecaf9":"# The number of injuries, the largest number reached 207913 injuries in one day","c8a889ac":"# # When calling the function for a country like Saudi Arabia","4a4dfa9a":"# We will work to build a function that receives a single text parameter that expresses a country, and when the function is called, it draws the time series for the number of deaths and injuries for the country that we have defined. The complete code for this function is as follows:","e86d18b9":"# Remove Unnamed: 8 and Unnamed: 7 columns as being blank","9f65476b":"# Get the number of records for each country separately","25e5f305":"# What is the average daily number of injuries and deaths by country?","a9d3bceb":"# To display the previous information graphically, we can use a new format, which is the pie chart","6e2be79c":"# We can now start preparing the graph, which will be the time series\n","ff4ebc1d":"# We can inquire from the result about the countries of China and Italy","e618c6d5":"# Remove all zero records","d298eeca":"# Get the 5 highest rates of labels in injuries and deaths and show it in a bar chart","ca6af47e":"# As well as for the total number of cases","327f1fb1":"# To show the information graphically","11614cc8":"# To get the first 5 countries with the highest death toll","58a5b8d6":"# We want to show in the figure the major value of the number of injuries and deaths","3e376e3c":"# When calling the function for a country like China\n","6eecc335":"# The largest number of deaths since the start of the Corona virus outbreak was 4928 in one day for one of the countries","6d16dd7e":"# What is the total monthly injuries and deaths in the world?","6f3b9654":"# # use Regression searches for relationships among variables\n Typically, you need regression to answer whether and how some phenomenon influences the other or how several variables are related.\n Regression is used in many different fields: economy, computer science, social sciences, and so on. Its importance rises every day with the availability of large amounts of data and increased awareness of the practical value of data.\n","103af750":"# Get information about properties in the data frame"}}