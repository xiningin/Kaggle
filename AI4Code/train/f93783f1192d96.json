{"cell_type":{"e96eeb56":"code","c18fe665":"code","dec02cc5":"code","b4e30eeb":"code","2f66d3c0":"code","832f1525":"code","ed93045e":"code","ced6fcb6":"code","1c04f0b8":"code","432ed288":"code","4fcf8fe1":"code","83129692":"code","c4ad8ee6":"code","c9f4e796":"code","2c185c1c":"code","6d139d66":"code","9352bcc8":"code","adebb4b8":"code","1cbf6e26":"code","44ea4b25":"code","0f2161da":"code","46212b61":"code","b7a42e57":"code","e9c7d90e":"code","5537ac32":"code","3d5d23c3":"code","064b5c60":"code","421d8a7c":"code","9ffb2359":"code","28b84eec":"code","a55014a6":"code","3bcad219":"markdown","ab75516c":"markdown","eb34fb54":"markdown","7bcb9200":"markdown","668c37eb":"markdown","b667821e":"markdown","9e7cfed6":"markdown","ab4f4758":"markdown","6e350c97":"markdown","f0e9db91":"markdown","0d634769":"markdown","609058ca":"markdown","5c7b8d11":"markdown","a36ca4ba":"markdown","8e230cc0":"markdown","b1874bee":"markdown","c87d1b98":"markdown","6254b1da":"markdown","a277c5f7":"markdown","0f789b0d":"markdown","99f68f47":"markdown"},"source":{"e96eeb56":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","c18fe665":"#Displaying the first five lines of  the dataset\ndf.head()","dec02cc5":"df=pd.read_csv('..\/input\/us-accidents\/US_Accidents_Dec19.csv')","b4e30eeb":"print('Rows',df.shape[0])\nprint('Number of columns',df.shape[1])\nprint('Features or Column names',df.columns.tolist())\nprint('\\n Missing values :',df.isnull().values.sum())\nprint('\\n Unique values : \\n',df.nunique())","2f66d3c0":"df.select_dtypes(exclude=['int','float']).columns","832f1525":"df['Description'].head()","ed93045e":"print(df['Source'].unique())\nprint(df['Description'].unique())\nprint(df['Timezone'].unique())\nprint(df['Amenity'].unique())\nprint(df['No_Exit'].unique())","ced6fcb6":"#first lets print some columns\ndf.columns","1c04f0b8":"import seaborn as sns\nimport matplotlib.pyplot as plt","432ed288":"fig=sns.heatmap(df[['TMC','Severity','Start_Lat','End_Lat','Distance(mi)'\n                   ,'Temperature(F)','Wind_Chill(F)','Humidity(%)','Pressure(in)','Visibility(mi)'\n                   ,'Wind_Speed(mph)']].corr(),annot=True,cmap='RdYlGn',linewidths=0.2 ,annot_kws={'size':15})\nfig=plt.gcf()\nfig.set_size_inches(18,15)\nplt.xticks(fontsize=14)\nplt.yticks(fontsize=14)\nplt.show()","4fcf8fe1":"fig ,ax = plt.subplots(1,2,figsize=(18,8))\ndf['Source'].value_counts().plot.pie(explode=[0,0.1,0.1],autopct='%1.1f%%',ax=ax[0],shadow=True)\nax[0].set_title('Share of Sources')\nax[0].set_ylabel('Count')\nsns.countplot('Source',data=df,ax=ax[1],order=df['Source'].value_counts().index)\nax[1].set_title('Count of Source')\nplt.show()","83129692":"fig ,ax = plt.subplots(1,2,figsize=(18,8))\ndf['Side'].value_counts().plot.pie(explode=[0,0.1,0],autopct='%1.1f%%',ax=ax[0],shadow=True)\nax[0].set_title('Side types')\nax[0].set_ylabel('Count')\nsns.countplot('Side',data=df,ax=ax[1],order=df['Side'].value_counts().index)\nax[1].set_title('Count of Side')\nplt.show()","c4ad8ee6":"df['Side'].unique()","c9f4e796":"df['Timezone'].unique()","2c185c1c":"fig ,ax = plt.subplots(1,2,figsize=(18,8))\ndf['Timezone'].value_counts().plot.pie(explode=[0,0,0,0.1],autopct='%1.1f%%',ax=ax[0],shadow=True)\nax[0].set_title('Accidents in different timezones')\nax[0].set_ylabel('Count')\nsns.countplot('Timezone',data=df,ax=ax[1],order=df['Timezone'].value_counts().index)\nax[1].set_title('Accidents Count Based on Timezone')\nplt.show()","6d139d66":"st = pd.to_datetime(df.Start_Time, format = '%Y-%m-%d %H:%M:%S')\nend= pd.to_datetime(df.End_Time, format='%Y-%m-%d %H:%M:%S')","9352bcc8":"diff = (end-st)\ntop20 = diff.astype('timedelta64[m]').value_counts().nlargest(20)\nprint('top 20 accident durations correspond to {:.1f}% of the data'.format(top20.sum()*100\/len(diff)))\n(top20\/top20.sum()).plot.bar(figsize=(8,8))\nplt.title('Accident Duration [Minutes]')\nplt.xlabel('Duration [minutes]')\nplt.ylabel('Fraction')","adebb4b8":"fig, ax = plt.subplots(1,2,figsize=(15,8))\nclr = ('blue','forestgreen','gold','red','purple','cadetblue','hotpink','orange','darksalmon','brown')\ndf['State'].value_counts()[0:10].sort_values().plot(kind='barh',color=clr,ax=ax[0])\nax[0].set_title('Top 10 Accident Prone States',size=20)\nax[0].set_xlabel('States', size=18)\n\ncount = df['State'].value_counts()\ngroups=list(df['State'].value_counts().index)[:10]\ncounts=list(count[:10])\ncounts.append(count.agg(sum)-count[:10].agg('sum'))\n\ngroups.append('Other')\ntype_dict=pd.DataFrame({'group':groups , 'counts':counts})\nclr1=('brown','darksalmon','orange','hotpink','cadetblue','purple','red','gold','forestgreen','blue','plum')\nqx=type_dict.plot(kind='pie',y='counts',labels=groups,colors=clr1,autopct='%1.1f%%'\n                 , pctdistance=0.9,radius=1.2,ax=ax[1])\nplt.legend(loc=0 , bbox_to_anchor=(1.15,0.4))\nplt.subplots_adjust(wspace = 0.6 ,hspace=0)\nplt.ioff()\nplt.ylabel( '')\n","1cbf6e26":"df_top_Severity_State = df.groupby('State').agg({'Severity':'mean'}).sort_values('Severity').reset_index()","44ea4b25":"plt.figure(figsize=(12,6))\nsns.barplot(y='Severity', x='State',data=df_top_Severity_State.head(10))\nplt.ioff()","0f2161da":"plt.figure(figsize=(14,8))\ndf.groupby('Weather_Condition')  \\\n    .size()\\\n    .sort_values(ascending =False) \\\n    .iloc[:5] \\\n    .plot.pie(explode=[0,0,0.1,0,0],autopct='%1.1f%%',shadow=True)\nplt.ioff()","46212b61":"fig ,ax =plt.subplots(figsize=(16,7))\ndf['Weather_Condition'].value_counts().sort_values(ascending=False).head(5).plot.bar(width=0.5,edgecolor='k',align='center',linewidth=2)\nplt.xlabel('Weather_Condition',fontsize=20)\nplt.ylabel('Number of Accidents',fontsize=20)\nax.tick_params(labelsize=20)\nplt.title('5 Top weather conditions for accidents ',fontsize=25)\nplt.grid()\nplt.ioff()","b7a42e57":"bool_cols=[col for col in df.columns if df[col].dtype == np.dtype('bool')]\nbooldf=df[bool_cols]\nnot_one_hot=booldf[booldf.sum(axis=1) > 1]\nprint('There are {} non one hot metadata rows , which are {:.1f}% of the data'.format(len(not_one_hot),100*len(not_one_hot)\/len(df)))\n","e9c7d90e":"bools = booldf.sum(axis=0)\nbools","5537ac32":"bools.plot.pie(autopct='%1.1f%%',shadow=True,figsize=(10,10))\nplt.ylabel(\" \")\nplt.title('Proximity to the Traffic Object')","3d5d23c3":"df['time'] = pd.to_datetime(df.Start_Time , format = '%Y-%m-%d %H:%M:%S')\ndf= df.set_index('time')\ndf.head()","064b5c60":"freq_text = {'D':'Daily','W':'Weekly','Y':'Yearly'}\nplt.subplots(1,3,figsize=(21,7))\nfor i, (fr,text) in enumerate(freq_text.items(),1):\n    plt.subplot(1,3,i)\n    sample = df.ID['2016':].resample(fr).count()\n    sample.plot(style='.')\n    plt.title('Accidents, {} count'.format(text))\n    plt.xlabel('Date')\n    plt.ylabel('Accident Count');","421d8a7c":"df['Start_Time'] = pd.to_datetime(df['Start_Time'], format=\"%Y\/%m\/%d %H:%M:%S\")\ndf['DayOfWeekNum'] = df['Start_Time'].dt.dayofweek\ndf['DayOfWeek'] = df['Start_Time'].dt.weekday_name\ndf['MonthDayNum'] = df['Start_Time'].dt.day\ndf['HourOfDay'] = df['Start_Time'].dt.hour\nfig, ax=plt.subplots(figsize=(16,7))\ndf['DayOfWeek'].value_counts(ascending=False).plot.bar(width=0.5,edgecolor='k',align='center',linewidth=2)\nplt.xlabel('Day of the Week',fontsize=20)\nplt.ylabel('Number of accidents',fontsize=20)\nax.tick_params(labelsize=20)\nplt.title('Accident on Different Days of Week',fontsize=25)\nplt.grid()\nplt.ioff()","9ffb2359":"from wordcloud import WordCloud\nplt.style.use('seaborn')\nwrds1 = df['Description'].str.split(\"(\").str[0].value_counts().keys()\nwc1=WordCloud(scale=5 , max_words=1000,colormap='rainbow',background_color='black').generate(\" \".join(wrds1))\nplt.figure(figsize=(20,14))\nplt.imshow(wc1 , interpolation='bilinear')\nplt.axis('off')\nplt.title('Key words in Accident Description', color='b')\nplt.show()","28b84eec":"sns.factorplot('State', 'Severity',data=df)\nfig=plt.gcf()\nfig.set_size_inches(20,7)\nplt.show()","a55014a6":"plt.figure(figsize=(14,8))\nsub_6=df[df.Severity<5]\nviz_4=sub_6.plot(kind='scatter', x='Start_Lng',y='Start_Lat',label='Severity',c='Severity',cmap=plt.get_cmap('jet'),colorbar=True,alpha=0.4,figsize=(10,10))\nviz_4.legend()\nplt.ioff()","3bcad219":"**Accidents in different timezones**","ab75516c":"**Finding the sources of the data**","eb34fb54":"**Drawing the heat maps** using .gcf() method ","7bcb9200":"**Displaying the catogerical values**","668c37eb":"**Finding the summary of the data like number of rows and columns etc**","b667821e":"**Finding out the columns with categorical values  using df.select_dtypes() method **","9e7cfed6":"**Keywords Used in the description**","ab4f4758":"**Time taken to clear the traffice**","6e350c97":"**Top Weather Conditions for accidents**","f0e9db91":"**PLACES WHERE ACCIDENTS OCCUR MOST**","0d634769":"*As one can see that most accidents occur near traffic signal, junction and crossings*","609058ca":"**STATE SPECIFIC ANALYSIS **","5c7b8d11":"**Factor plot**","a36ca4ba":"** Severity of the accidents**","8e230cc0":"**Time Zone**","b1874bee":"**Accident in different states**","c87d1b98":"**LOOKING AT THE WEATHER CONDITIONS **","6254b1da":"* It says that people drive more carefully when the weather is bad and most accidents occur in the clear weather due to carelessness*","a277c5f7":"** Side **\nThere are three things mentioned regarding the side R, L and third one is Blank No idea for that.","0f789b0d":"**Finding the correlations in the data**","99f68f47":"*As you can see most accidents occur on the right side i.e. drivers side*"}}