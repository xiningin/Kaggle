{"cell_type":{"eaf76b12":"code","07147152":"code","92d886d2":"code","22add159":"code","cf2b97bb":"code","4b4e8ba0":"code","5f932d89":"code","7a72b231":"code","8c80d9bf":"code","744cc575":"code","c244c6fd":"code","471ba284":"code","4a32ef53":"code","df3a4ff8":"code","a634d0be":"code","558c6d37":"code","2b9211d6":"code","d00386be":"code","80b41fee":"code","605569fd":"code","1eccdf9a":"code","4f9b40ce":"code","7d006571":"code","53de091a":"code","7f0bf847":"code","e90a0dcc":"code","54d1772a":"code","31585ab9":"code","57422228":"code","9e43437f":"code","0c489ced":"code","74820330":"code","a36cc081":"code","04e8eea3":"code","22085b6c":"code","8ae648a8":"code","2d85f1c4":"code","4fa6f0c8":"code","d7c9a19f":"code","e020cd6a":"code","4bf3cd33":"code","ff4faae2":"code","8da17c85":"code","93e44813":"code","a2813605":"code","f5a85749":"code","e0ef23bb":"code","cb620981":"code","5e7263b5":"code","a26b24ec":"code","71b387c5":"code","67b7ffcb":"code","8b2b9b6c":"code","02998012":"code","4e134437":"code","6ddda0a9":"code","3f98c403":"code","3a8dc316":"code","a989806a":"code","1f1f368e":"code","691a8801":"code","2c998ad7":"markdown","a9cdf696":"markdown","3230b46e":"markdown","17144ede":"markdown","5303589f":"markdown","3500cccd":"markdown","d2dbf4a1":"markdown","71d6570e":"markdown","99f19b7c":"markdown","a21a6a27":"markdown","4e004b0b":"markdown","128df569":"markdown","c5da2380":"markdown","73351e54":"markdown","df320d6a":"markdown","b89cc0b4":"markdown","772f7a78":"markdown","05be9dc9":"markdown","56aaad19":"markdown","55d122cf":"markdown","b775ee37":"markdown","f00d5594":"markdown","819aba85":"markdown","48ea3555":"markdown","5f306311":"markdown","4061f078":"markdown","b4e96443":"markdown","462ad38b":"markdown","ec708926":"markdown","c4b8fb2d":"markdown","31b3e209":"markdown","c7c9fbef":"markdown","e42403d3":"markdown","4d56d475":"markdown","13302a77":"markdown","8be1510e":"markdown","af345d7e":"markdown","ecf893f4":"markdown","459b41ba":"markdown","bbaa7470":"markdown","0d02fc7b":"markdown","924201a0":"markdown","5b070f5f":"markdown","ed6543da":"markdown","ab0a8482":"markdown","27a8ff40":"markdown","f82d4ede":"markdown","9de23f51":"markdown","9246914a":"markdown","d6a1f6b3":"markdown","69fa6814":"markdown","69973aa5":"markdown","55d54891":"markdown","510053aa":"markdown","b360e6f3":"markdown","a3901bd3":"markdown","72d77bee":"markdown","68f77b63":"markdown"},"source":{"eaf76b12":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","07147152":"# C\u00e1c th\u01b0 vi\u1ec7n c\u1ea7n thi\u1ebft\nimport seaborn as sns\nimport numpy as np\nimport pandas as pd\nimport os\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n%matplotlib inline","92d886d2":"train_data = pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-5\/train.csv\")\ntest_data = pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-5\/test.csv\")","22add159":"# Hi\u1ec3n th\u1ecb 10 d\u00f2ng \u0111\u1ea7u trong train_data\ntrain_data.head(10)","cf2b97bb":"# Hi\u1ec3n th\u1ecb 10 d\u00f2ng \u0111\u1ea7u trong test_data\ntest_data.head(10)","4b4e8ba0":"train_data.isnull().sum()","5f932d89":"test_data.isnull().sum()","7a72b231":"train_data=train_data.drop(columns=[\"County\",\"Province_State\",\"Id\"])\ntest_data=test_data.drop(columns=[\"County\",\"Province_State\",\"ForecastId\"])","8c80d9bf":"train_data.head(10)","744cc575":"test_data.head(10)","c244c6fd":"train_data.Country_Region.nunique()","471ba284":"train_data.Date.nunique()","4a32ef53":"# l\u1ea5y c\u1ed9t Country_Region v\u00e0 Population\ndf_countries_popu = train_data[[\"Country_Region\", \"Population\"]]\ndf_countries_popu.drop_duplicates(subset=[\"Country_Region\", \"Population\"], inplace=True)\ndf_countries_popu = df_countries_popu.groupby([\"Country_Region\"], as_index=False).sum()\n\n# top 10 n\u01b0\u1edbc c\u00f3 Population cao nh\u1ea5t\ndf_top10_countries_popu = df_countries_popu.nlargest(10, \"Population\")\ndf_top10_countries_popu","df3a4ff8":"# Gom nh\u00f3m theo Country_Region\ndf_country_grouped=train_data.groupby([\"Country_Region\"], as_index=False).sum()\ndf_country_grouped","a634d0be":"df_top10_countries = df_country_grouped.nlargest(10, \"TargetValue\")\ndf_top10_countries[[\"Country_Region\", \"TargetValue\"]]","558c6d37":"# l\u1ea5y ra list t\u00ean 10 n\u01b0\u1edbc c\u00f3 t\u1ed5ng TargetValue l\u1edbn nh\u1ea5t\ntop10_countries = list(df_top10_countries[\"Country_Region\"])\n\n# Gom nh\u00f3m train_data theo top 10 n\u01b0\u1edbc v\u00e0 theo th\u1eddi gian\ndf_top10_countries_grouped = train_data[train_data.Country_Region.isin(top10_countries)]\ndf_top10_countries_grouped = df_top10_countries_grouped.groupby([\"Country_Region\", \"Date\"], as_index=False).sum()\n#df_top10_countries_grouped","2b9211d6":"df_target_value_daily = pd.pivot_table(\n    df_top10_countries_grouped,\n    values=\"TargetValue\",\n    index=[\"Country_Region\"],\n    columns=\"Date\"\n)\ndf_target_value_daily","d00386be":"# Gom nh\u00f3m train_data (ch\u1ec9 x\u00e9t nh\u1eefng d\u00f2ng m\u00e0 Target c\u00f3 gi\u00e1 tr\u1ecb Fatalities) theo top 10 n\u01b0\u1edbc v\u00e0 theo th\u1eddi gian\ndf_fatalities = train_data[train_data.Country_Region.isin(top10_countries)]\ndf_fatalities = df_fatalities[df_fatalities[\"Target\"]==\"Fatalities\"]\ndf_fatalities = df_fatalities.groupby([\"Country_Region\", \"Date\"], as_index=False).sum()\n#df_fatalities","80b41fee":"df_fatalities_daily = pd.pivot_table(\n    df_fatalities,\n    values=\"TargetValue\",\n    index=[\"Country_Region\"],\n    columns=\"Date\"\n)\ndf_fatalities_daily","605569fd":"# Xem m\u1ed1i t\u01b0\u01a1ng quan gi\u1eefa c\u00e1c thu\u1ed9c t\u00ednh (column) Population, Weight, TargetValue\nsns.pairplot(train_data)","1eccdf9a":"fig = px.pie(\n    df_country_grouped,\n    values=\"TargetValue\", names=\"Country_Region\",\n    title=\"TargetValue (g\u1ed3m ConfirmedCases v\u00e0 Fatalities) c\u1ee7a c\u00e1c n\u01b0\u1edbc\",\n    color_discrete_sequence=px.colors.sequential.Aggrnyl\n)\nfig.update_traces(textposition=\"inside\", textinfo=\"percent+label\")\nfig.show()","4f9b40ce":"fig = px.bar(\n    df_top10_countries, \n    y='TargetValue', x='Country_Region',\n    text='TargetValue', color=\"TargetValue\",\n    title=\"Top 10 n\u01b0\u1edbc c\u00f3 TargetValue l\u1edbn nh\u1ea5t\"\n)\nfig.update_traces(texttemplate='%{text:.2s}', textposition='outside')\nfig.show()","7d006571":"train_data_fatalities = train_data[train_data[\"Target\"]==\"Fatalities\"]\n\nfig = px.pie(\n    train_data_fatalities,\n    values=\"TargetValue\", names=\"Country_Region\",\n    title=\"TargetValue (ch\u1ec9 x\u00e9t Fatalities) c\u1ee7a c\u00e1c n\u01b0\u1edbc\",\n    color_discrete_sequence=px.colors.sequential.Aggrnyl\n)\nfig.update_traces(textposition=\"inside\", textinfo=\"percent+label\")\nfig.show()","53de091a":"fig = px.pie(\n    train_data,\n    values=\"TargetValue\", names=\"Target\",\n    title=\"TargetValue c\u1ee7a ConfirmedCases v\u00e0 Fatalities\",\n    color_discrete_sequence=px.colors.sequential.Emrld\n)\nfig.update_traces(textposition=\"inside\", textinfo=\"percent+label\")\nfig.show()","7f0bf847":"fig = px.pie(\n    df_countries_popu, \n    values=\"Population\", names=\"Country_Region\",\n    title=\"Population c\u1ee7a c\u00e1c n\u01b0\u1edbc\",\n    color_discrete_sequence=px.colors.sequential.Aggrnyl\n)\nfig.update_traces(textposition=\"inside\", textinfo=\"percent+label\")\nfig.show()","e90a0dcc":"fig = px.bar(\n    df_top10_countries_popu,\n    y='Population', x='Country_Region',\n    text='Population', color=\"Population\",\n    title=\"Top 10 n\u01b0\u1edbc c\u00f3 Population l\u1edbn nh\u1ea5t\")\nfig.update_traces(texttemplate='%{text:.2s}', textposition='outside')\nfig.show()","54d1772a":"px.line(\n    df_top10_countries_grouped,\n    x=\"Date\", y=\"TargetValue\", color=\"Country_Region\", \n    title=\"TargetValue theo ng\u00e0y c\u1ee7a top 10 n\u01b0\u1edbc c\u00f3 TargetValue l\u1edbn nh\u1ea5t\"\n)","31585ab9":"fig = go.Figure(data=go.Heatmap(\n        z=df_target_value_daily.values,# TargetValue\n        x=df_target_value_daily.columns,# Date\n        y=df_target_value_daily.index,#Country_Region\n        colorscale=\"tempo\"))\n\nfig.update_layout(title=\"TargetValue theo ng\u00e0y c\u1ee7a top 10 n\u01b0\u1edbc c\u00f3 TargetValue l\u1edbn nh\u1ea5t\")\n\nfig.show()","57422228":"px.line(\n    df_fatalities,\n    x=\"Date\", y=\"TargetValue\", color=\"Country_Region\",\n    title=\"TargetValue (ch\u1ec9 x\u00e9t Fatalities) theo ng\u00e0y c\u1ee7a top 10 n\u01b0\u1edbc c\u00f3 TargetValue l\u1edbn nh\u1ea5t\"\n)","9e43437f":"fig = go.Figure(data=go.Heatmap(\n        z=df_fatalities_daily.values,# TargetValue\n        x=df_fatalities_daily.columns,# Date\n        y=df_fatalities_daily.index,#Country_Region\n        colorscale=\"tempo\"))\n\nfig.update_layout(title=\"TargetValue (ch\u1ec9 x\u00e9t Fatalities) theo ng\u00e0y c\u1ee7a top 10 n\u01b0\u1edbc c\u00f3 TargetValue l\u1edbn nh\u1ea5t\")\n\nfig.show()","0c489ced":"train_data = pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-5\/train.csv\")\ntest_data = pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-5\/test.csv\")","74820330":"train_data=train_data.drop(columns=[\"County\",\"Province_State\",\"Id\"])\ntest_data=test_data.drop(columns=[\"County\",\"Province_State\",\"ForecastId\"])","a36cc081":"train_data","04e8eea3":"test_data","22085b6c":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()","8ae648a8":"# Chu\u1ea9n h\u00f3a Country_Region th\u00e0nh s\u1ed1 nguy\u00ean\ntrain_data.iloc[:,0] = le.fit_transform(train_data.iloc[:,0].values)\n\n# Chu\u1ea9n h\u00f3a Target th\u00e0nh s\u1ed1 nguy\u00ean\ntrain_data.iloc[:,4] = le.fit_transform(train_data.iloc[:,4].values)","2d85f1c4":"# Chu\u1ea9n h\u00f3a Country_Region th\u00e0nh s\u1ed1 nguy\u00ean\ntest_data.iloc[:,0] = le.fit_transform(test_data.iloc[:,0].values)\n\n# Chu\u1ea9n h\u00f3a Target th\u00e0nh s\u1ed1 nguy\u00ean\ntest_data.iloc[:,4] = le.fit_transform(test_data.iloc[:,4].values)","4fa6f0c8":"dates = pd.to_datetime(train_data[\"Date\"], format=\"%Y-%m-%d\")\ntrain_data[\"Date\"] = dates.dt.strftime(\"%Y%m%d\").astype(int)","d7c9a19f":"dates = pd.to_datetime(test_data[\"Date\"], format=\"%Y-%m-%d\")\ntest_data[\"Date\"] = dates.dt.strftime(\"%Y%m%d\").astype(int)","e020cd6a":"train_data","4bf3cd33":"test_data","ff4faae2":"# t\u1eadp features: b\u1ecf \u0111i c\u1ed9t \"TargetValue\" t\u1eeb train_data\nx_train = train_data.drop(\"TargetValue\", axis = 1)  # axis: 1 cho column, 0 cho row\n\n# t\u1eadp labels: ch\u1ec9 l\u1ea5y c\u1ed9t \"TargetValue\" t\u1eeb train_data\ny_train = train_data[\"TargetValue\"]","8da17c85":"x_train","93e44813":"y_train","a2813605":"from sklearn.model_selection import train_test_split \n# t\u1eadp test chi\u1ebfm 20%\nx_train, x_test, y_train, y_test = train_test_split(x_train, y_train, test_size=0.2, random_state=1)","f5a85749":"# th\u01b0 vi\u1ec7n c\u1ea7n thi\u1ebft\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import Pipeline","e0ef23bb":"pipe_dtr = Pipeline([\n    (\"scl\", StandardScaler()),\n    (\"DecisionTreeRegressor\", DecisionTreeRegressor())\n])","cb620981":"pipe_dtr.fit(x_train, y_train)","5e7263b5":"pipe_dtr.score(x_test, y_test)","a26b24ec":"y_pred_dtr = pipe_dtr.predict(x_test)","71b387c5":"fig = make_subplots(rows=2, cols=1)\n\nfig.add_trace(go.Scatter(x=np.arange(len(y_test)), y=y_test,\n                         mode='lines', name='y_test'),\n             row=1, col=1)\n\nfig.add_trace(go.Scatter(x=np.arange(len(y_test)), y=y_pred_dtr,\n                         mode='lines',name='y_pred'),\n             row=2, col=1)\nfig.update_layout(title=\"So s\u00e1nh y_test v\u00e0 y_pred\")\nfig.show()","67b7ffcb":"pipe_rfr = Pipeline([\n    (\"scl\", StandardScaler()),\n    (\"RandomForestRegressor\", RandomForestRegressor())\n])","8b2b9b6c":"pipe_rfr.fit(x_train, y_train)","02998012":"pipe_rfr.score(x_test, y_test)  # r2_score","4e134437":"y_pred_rfr = pipe_rfr.predict(x_test)","6ddda0a9":"fig = make_subplots(rows=2, cols=1)\n\nfig.add_trace(go.Scatter(x=np.arange(len(y_test)), y=y_test,\n                         mode='lines', name='y_test'),\n             row=1, col=1)\n\nfig.add_trace(go.Scatter(x=np.arange(len(y_test)), y=y_pred_rfr,\n                         mode='lines',name='y_pred'),\n             row=2, col=1)\nfig.update_layout(title=\"So s\u00e1nh y_test v\u00e0 y_pred\")\nfig.show()","3f98c403":"pred = pipe_rfr.predict(test_data)","3a8dc316":"result = pd.DataFrame({\n    \"Id\": np.arange(pred.shape[0]),\n    \"TargetValue\": pred\n})\nresult","a989806a":"df_sub = result.groupby([\"Id\"])[\"TargetValue\"].quantile([0.05, 0.5, 0.95]).reset_index()\ndf_sub.head(15)","1f1f368e":"df_sub[\"Id\"] = df_sub[\"Id\"] + 1\ndf_sub[\"Id\"] = df_sub[\"Id\"].astype(\"str\")\ndf_sub[\"level_1\"] = df_sub[\"level_1\"].astype(\"str\")\ndf_sub[\"Id\"] = df_sub[\"Id\"] + \"_\" + df_sub[\"level_1\"]\n\ndf_sub = df_sub.drop(\"level_1\", axis=1)\n\ndf_sub.columns = [\"ForecastId_Quantile\", \"TargetValue\"]\n\n#df_sub.head(15)\ndf_sub","691a8801":"df_sub.to_csv(\"submission.csv\", index=False)","2c998ad7":"S\u1ed1 ng\u00e0y kh\u1ea3o s\u00e1t","a9cdf696":"Ti\u1ebfn h\u00e0nh hu\u1ea5n luy\u1ec7n","3230b46e":"Ki\u1ec3m tra missing value, nh\u1eadn th\u1ea5y County v\u00e0 Province_State c\u00f3 nhi\u1ec1u d\u00f2ng b\u1ecb thi\u1ebfu d\u1eef li\u1ec7u n\u00ean kh\u00f4ng mang l\u1ea1i nhi\u1ec1u th\u00f4ng tin","17144ede":"S\u1ed1 l\u01b0\u1ee3ng qu\u1ed1c gia trong b\u1ea3ng","5303589f":"Bi\u1ec3u \u0111\u1ed3 s\u1ed1 l\u01b0\u1ee3ng d\u00e2n s\u1ed1 c\u1ee7a top 10 n\u01b0\u1edbc c\u00f3 Population l\u1edbn nh\u1ea5t","3500cccd":"Ti\u1ebfn h\u00e0nh hu\u1ea5n luy\u1ec7n","d2dbf4a1":"D\u1ef1 \u0111o\u00e1n tr\u00ean t\u1eadp test_data","71d6570e":"Bi\u1ec3u \u0111\u1ed3 t\u1ec9 l\u1ec7 Population c\u1ee7a c\u00e1c n\u01b0\u1edbc","99f19b7c":"Hi\u1ec3n th\u1ecb l\u1ea1i data","a21a6a27":"Bi\u1ec3u \u0111\u1ed3 t\u1ec9 l\u1ec7 gi\u1eefa t\u1ed5ng TargetValue (ch\u1ec9 x\u00e9t Fatalities) c\u1ee7a c\u00e1c qu\u1ed1c gia","4e004b0b":"### **M\u00f4 h\u00ecnh 2:** Regression s\u1eed d\u1ee5ng **Random Forest**","128df569":"T\u01b0\u01a1ng t\u1ef1 v\u1edbi t\u1eadp test_data","c5da2380":"T\u00ednh k\u1ebft qu\u1ea3 cho t\u1eebng quantile","73351e54":"Load data t\u1eeb file","df320d6a":"Chuy\u1ec3n gi\u00e1 tr\u1ecb trong c\u1ed9t Date th\u00e0nh s\u1ed1 nguy\u00ean theo format \"Ymd\", v\u00ed d\u1ee5 \"2020-07-10\" --> 20200710","b89cc0b4":"TargetValue c\u1ee7a top 10 n\u01b0\u1edbc theo ng\u00e0y","772f7a78":"Top 10 n\u01b0\u1edbc c\u00f3 TargetValue l\u1edbn nh\u1ea5t","05be9dc9":"**Nh\u1eadn x\u00e9t:** Random Forest c\u00f3 \u01b0u \u0111i\u1ec3m l\u00e0 n\u00f3 x\u00e2y d\u1ef1ng m\u1ed9t t\u1eadp r\u1ea5t nhi\u1ec1u decision tree. M\u1ed7i decision tree s\u1ebd \u0111\u01b0\u1ee3c train tr\u00ean m\u1ed9t t\u1eadp con \u0111\u01b0\u1ee3c ch\u1ecdn ng\u1eabu nhi\u00ean t\u1eeb t\u1eadp training ban \u0111\u1ea7u. Random Forest s\u1ebd d\u1ef1a tr\u00ean k\u1ebft qu\u1ea3 c\u1ee7a c\u00e1c decision tree \u0111\u1ec3 \u0111\u01b0a ra k\u1ebft qu\u1ea3 t\u1ed1t nh\u1ea5t cu\u1ed1i c\u00f9ng. Do v\u1eady n\u00ean thu\u1eadt to\u00e1n Random Forest hi\u1ec7u qu\u1ea3 h\u01a1n thu\u1eadt to\u00e1n Decision Tree ch\u1ec9 c\u00f3 1 c\u00e2y.","56aaad19":"Ki\u1ec3m tra k\u1ebft qu\u1ea3 c\u1ee7a m\u00f4 h\u00ecnh, ta thu \u0111\u01b0\u1ee3c \u0111\u1ed9 ch\u00ednh x\u00e1c kho\u1ea3ng **92%**","55d122cf":"Gom nh\u00f3m theo Country_Region (top10), Date (ch\u1ec9 x\u00e9t Fatalities) (d\u00f9ng cho visualize data)","b775ee37":"Test data sau khi chu\u1ea9n h\u00f3a","f00d5594":"Load l\u1ea1i t\u1eadp train_data v\u00e0 test_data","819aba85":"## **\u0110\u00e1nh gi\u00e1 data**","48ea3555":"So s\u00e1nh 2 m\u00f4 h\u00ecnh th\u00ec ta ch\u1ecdn **Random Forest** v\u00ec cho \u0111\u1ed9 ch\u00ednh x\u00e1c cao h\u01a1n Decision Tree","5f306311":"### **M\u00f4 h\u00ecnh 1:** Regression s\u1eed d\u1ee5ng **Decision Tree**","4061f078":"Bi\u1ec3u \u0111\u1ed3 thay \u0111\u1ed5i TargetValue (g\u1ed3m ComfirmedCases v\u00e0 Fatalities) theo ng\u00e0y c\u1ee7a top10 n\u01b0\u1edbc c\u00f3 t\u1ed5ng TargetValue cao nh\u1ea5t","b4e96443":"T\u01b0\u01a1ng t\u1ef1 v\u1edbi t\u1eadp test_data","462ad38b":"Gi\u00e1 tr\u1ecb d\u1ef1 \u0111o\u00e1n y_pred_rfr cho x_test","ec708926":"Gi\u00e1 tr\u1ecb d\u1ef1 \u0111o\u00e1n y_pred_dtr cho x_test","c4b8fb2d":"Test data tr\u01b0\u1edbc khi chu\u1ea9n h\u00f3a","31b3e209":"Bi\u1ec3u \u0111\u1ed3 thay \u0111\u1ed5i TargetValue (ch\u1ec9 x\u00e9t Fatalities) theo ng\u00e0y c\u1ee7a top10 n\u01b0\u1edbc c\u00f3 t\u1ed5ng TargetValue cao nh\u1ea5t","c7c9fbef":"Lo\u1ea1i b\u1ecf c\u00e1c c\u1ed9t mang \u00edt th\u00f4ng tin","e42403d3":"## **Preprocessing data**","4d56d475":"Bi\u1ec3u \u0111\u1ed3 t\u1ec9 l\u1ec7 gi\u1eefa t\u1ed5ng TargetValue (g\u1ed3m ConfirmedCases v\u00e0 Fatalities) c\u1ee7a c\u00e1c qu\u1ed1c gia","13302a77":"Lo\u1ea1i b\u1ecf c\u00e1c column kh\u00f4ng mang nhi\u1ec1u th\u00f4ng tin","8be1510e":"X\u1eed l\u00ed df_sub theo format c\u1ee7a file submission.csv","af345d7e":"So s\u00e1nh gi\u1eefa y_pred_dtr v\u00e0 y_test","ecf893f4":"Ki\u1ec3m tra k\u1ebft qu\u1ea3 c\u1ee7a m\u00f4 h\u00ecnh, ta thu \u0111\u01b0\u1ee3c \u0111\u1ed9 ch\u00ednh x\u00e1c kh\u00e1 cao, kho\u1ea3ng **95%**. K\u1ebft qu\u1ea3 n\u00e0y **cao h\u01a1n** M\u00f4 h\u00ecnh 1","459b41ba":"S\u1eed d\u1ee5ng pipeline \u0111\u1ec3 k\u1ebft h\u1ee3p hai b\u01b0\u1edbc:\n* Chu\u1ea9n h\u00f3a d\u1eef li\u1ec7u \u0111\u1ea7u v\u00e0o g\u1ea7n v\u1edbi ph\u00e2n ph\u1ed1i c\u00f3 trung b\u00ecnh l\u00e0 0 v\u00e0 \u0111\u1ed9 l\u1ec7ch chu\u1ea9n l\u00e0 1\n* Hu\u1ea5n luy\u1ec7n d\u00f9ng RandomForestRegressor","bbaa7470":"Train data sau khi chu\u1ea9n h\u00f3a","0d02fc7b":"Bi\u1ec3u \u0111\u1ed3 t\u1ec9 l\u1ec7 gi\u1eefa TargetValue c\u1ee7a ConfirmedCases v\u00e0 Fatalities c\u1ee7a t\u1ea5t c\u1ea3 qu\u1ed1c gia","924201a0":"Top 10 n\u01b0\u1edbc \u0111\u00f4ng d\u00e2n nh\u1ea5t","5b070f5f":"## **X\u00e2y d\u1ef1ng m\u00f4 h\u00ecnh**","ed6543da":"## **Th\u1ed1ng k\u00ea, m\u00f4 t\u1ea3 data**","ab0a8482":"Chia nh\u1ecf x_train, y_train th\u00e0nh 2 t\u1eadp con d\u00f9ng \u0111\u1ec3 train v\u00e0 test","27a8ff40":"Train data tr\u01b0\u1edbc khi chu\u1ea9n h\u00f3a","f82d4ede":"T\u1eeb train_data t\u1ea1o ra t\u1eadp features v\u00e0 t\u1eadp labels","9de23f51":"Gom nh\u00f3m train_data theo Country_Region","9246914a":"## **Visualize Data**","d6a1f6b3":"S\u1eed d\u1ee5ng pipeline \u0111\u1ec3 k\u1ebft h\u1ee3p hai b\u01b0\u1edbc:\n* Chu\u1ea9n h\u00f3a d\u1eef li\u1ec7u \u0111\u1ea7u v\u00e0o g\u1ea7n v\u1edbi ph\u00e2n ph\u1ed1i c\u00f3 trung b\u00ecnh l\u00e0 0 v\u00e0 \u0111\u1ed9 l\u1ec7ch chu\u1ea9n l\u00e0 1\n* Hu\u1ea5n luy\u1ec7n d\u00f9ng DecisionTreeRegressor","69fa6814":"TargetValue (ch\u1ec9 x\u00e9t Fatalities) c\u1ee7a top 10 n\u01b0\u1edbc theo ng\u00e0y","69973aa5":"So s\u00e1nh gi\u1eefa y_pred_rfr v\u00e0 y_test, ta th\u1ea5y 2 \u0111\u1ed3 th\u1ecb kh\u00e1 t\u01b0\u01a1ng \u0111\u1ed3ng nhau","55d54891":"T\u01b0\u01a1ng quan gi\u1eefa c\u00e1c thu\u1ed9c t\u00ednh (column) Population, Weight, TargetValue","510053aa":"Gom nh\u00f3m theo Country_Region (top10), Date (d\u00f9ng cho visualize data)","b360e6f3":"L\u01b0u k\u1ebft qu\u1ea3 v\u00e0o file submission.csv (kh\u00f4ng l\u1ea5y c\u1ed9t index)","a3901bd3":"Bi\u1ec3u \u0111\u1ed3 TargetValue c\u1ee7a top 10 n\u01b0\u1edbc c\u00f3 TargetValue l\u1edbn nh\u1ea5t","72d77bee":"L\u01b0u k\u1ebft qu\u1ea3 d\u1ef1 \u0111o\u00e1n v\u00e0o dataframe result","68f77b63":"Chu\u1ea9n h\u00f3a Country_Region, Target th\u00e0nh s\u1ed1 nguy\u00ean"}}