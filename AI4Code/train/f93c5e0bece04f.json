{"cell_type":{"db14ee9b":"code","e212c417":"code","2e44551d":"code","69b8b2a8":"code","1f3e144d":"code","ea83bd45":"code","6ff1f876":"code","70324740":"code","17491c0f":"code","9d144c3a":"code","c4fe75ed":"markdown","c6cba04b":"markdown","ac2a0247":"markdown","71c7648d":"markdown","8f5a3c19":"markdown","9d2fd6f9":"markdown","98f82675":"markdown","31f10771":"markdown","cfa9bcf6":"markdown","91e94321":"markdown","e21b69f9":"markdown"},"source":{"db14ee9b":"import numpy as np\nimport pandas as pd\nfrom math import radians, sin, cos, acos\nfrom datetime import datetime\nimport os\n\nprint(os.listdir(\"..\/input\"))\n","e212c417":"df_train = pd.read_csv('..\/input\/train.csv')","2e44551d":"df_sample = df_train.sample(n=3000)","69b8b2a8":"def make_date_time(df):\n    year = []\n    month = []\n    day = []\n    hour = []\n    minute = []\n    second = []\n    for dt in df['pickup_datetime']:\n        dt = dt[:-4]\n        df_ = datetime.strptime(dt, '%Y-%m-%d %H:%M:%S')\n        year.append(df_.year)\n        month.append(df_.month)\n        day.append(df_.day)\n        hour.append(df_.hour)\n        minute.append(df_.minute)\n        second.append(df_.second)\n    df['year'] = year\n    df['month'] = month\n    df['day'] = day\n    df['hour'] = hour\n    df['minute'] = minute\n    df['second'] = second\n    return df\n","1f3e144d":"def remove_same_place(df):\n    drop_rows = []\n    for i in range(df.shape[0]):\n       if df.iloc[i]['pickup_latitude'] == df.iloc[i]['dropoff_latitude'] and df.iloc[i]['pickup_longitude'] == df.iloc[i]['dropoff_longitude']:\n        drop_rows.append(i)\n    df.drop(df.index[drop_rows],inplace=True)\n    return df","ea83bd45":"def calculate_displacement(df):\n    ls = []\n    for i in range(df.shape[0]):\n        x1 = df.iloc[i]['pickup_latitude']\n        x2 = df.iloc[i]['dropoff_latitude']\n        y1 = df.iloc[i]['pickup_longitude']\n        y2 = df.iloc[i]['dropoff_longitude']\n        slat = radians(y1)\n        slon = radians(y2)\n        elat = radians(x1)\n        elon = radians(x2)\n        dist = 6371.01 * acos(sin(slat)*sin(elat) + cos(slat)*cos(elat)*cos(slon - elon))\n        ls.append(dist)\n    df['displacement'] = ls\n    return df","6ff1f876":"def calculate_rate(df):\n    df['rate'] = df['fare_amount']*df['displacement']\/df['passenger_count']\n    return df","70324740":"def hours_into_min(df):\n    df['hour'] = df['hour'].apply(lambda x: x*60)\n    whole_min = df['hour'] + df['minute']\n    df['time'] = whole_min\n    return df","17491c0f":"df_sample = make_date_time(df_sample)\ndf_sample = remove_same_place(df_sample)\ndf_sample = calculate_displacement(df_sample)\ndf_sample = calculate_rate(df_sample)\ndf_sample = hours_into_min(df_sample)\ndf_sample.head()","9d144c3a":"def divide_by_month(df):\n    month_dict = {}\n    for i in range(1,13):\n        month_dict[i] = df[df['month']==i]\n    return month_dict","c4fe75ed":"Function to convert hour into minute and add with the minute column to get the whole time in minute of the day","c6cba04b":"Function to Change the 'Pickup_datetime' into seperated columns by year,month,days,hour,minute,second","ac2a0247":"Since the dataset is huge I am taking some samples for testing the featured engineered model","71c7648d":"We have given a dataset by NYC Taxi Service to predict the Fare","8f5a3c19":"Function to get the rate based on the amount , displacement and passenger count","9d2fd6f9":"Function to get dictionary based on month for fitting into model seperately","98f82675":"Besides above transformations we need to drop latitudes and longitudes and assign then into points and also drop hour,minute,second column before fitting. Which will be done in the second version of kernel with some learning models.Please comment for any suggestions and errors.","31f10771":"Function to get displacement from pickup and dropoff latitudes and longitudes","cfa9bcf6":"Above functions implemented  on sample dataset","91e94321":"I always like make function of each transformation for better reading and easier debugging of operations.Following are those","e21b69f9":"Function to remove same pickup and destination points"}}