{"cell_type":{"498b9a5f":"code","736f85c5":"code","508be7ce":"code","ae02a248":"code","670a0467":"code","eca41e10":"code","650b208b":"code","aab7deb3":"code","7f2e63dd":"code","4a653e78":"code","bd511d93":"code","c8592304":"code","8f5e84f1":"code","94dcb0fc":"markdown","c93f7992":"markdown","007d31a2":"markdown","6fe7e67d":"markdown","d3402c7f":"markdown"},"source":{"498b9a5f":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","736f85c5":"Basket_Data=pd.read_csv(\"..\/input\/the-bread-basket\/bread basket.csv\")","508be7ce":"Basket_Data.columns\nBasket_Data.info()","ae02a248":"\"\"\"\n1. create binary variables for each items\n2. aggregate the data to transaction level\n3. variable Model is for trying different condition\n   can prepare different datasets & assign different values to variable Model\n   the function can run the analysis in one go\n\"\"\"\n\nBasket_Data_Cln=Basket_Data.copy()\n\nItem_List=list(Basket_Data_Cln[\"Item\"].unique())\nBasket_Data_Cln=pd.get_dummies(Basket_Data_Cln, columns=[\"Item\"], prefix=[\"\"], prefix_sep=\"\")\nBasket_Data_Cln=Basket_Data_Cln.groupby([\"Transaction\",\"date_time\",\"period_day\",\"weekday_weekend\"])[Item_List].max().reset_index()\nBasket_Data_Cln[\"Model\"]=\"All\"\n\nBasket_Data_Cln","670a0467":"\"\"\"\n* remove # & run the code for checking\n\"\"\"\n\n#len(Basket_Data[\"Transaction\"].unique())\n#Basket_Data_Cln\n#Basket_Data_Cln.columns\n#Basket_Data_Cln.info()\n\n#test=pd.crosstab(index=Basket_Data_Cln[\"Transaction\"],columns=\"count\")\n#test[test[\"count\"]>1]\n\n#test=pd.crosstab(index=Basket_Data[\"Transaction\"],columns=\"count\")\n#test[test[\"count\"]>10]","eca41e10":"\"\"\"\n1. calculate support, confidence, lift, etc. for the rules\n\"\"\"\n\nfrom mlxtend.frequent_patterns import association_rules, apriori, fpgrowth\n\n#def Basket_Analysis(InData,OutData):\n\n#InData_DF=pd.read_table(InData, index_col=False)\nModel_List=list(set(Basket_Data_Cln[\"Model\"]))\nRule_DF_Dict={}\n\nfor i in Model_List:\n    Model_Data_DF=Basket_Data_Cln.drop(columns=[\"Transaction\",\"Model\",\"date_time\",\"period_day\",\"weekday_weekend\"])[Basket_Data_Cln[\"Model\"]==i]\n\n    #Frequent_Itemset=apriori(Model_Data_DF, min_support=0.001, use_colnames=True, max_len=None)\n    Frequent_Itemset=fpgrowth(Model_Data_DF, min_support=0.001, use_colnames=True, max_len=None)\n    Rule_DF=association_rules(Frequent_Itemset, min_threshold=0.01, support_only=False) # confidence>=0.01\n    #Rule_DF=association_rules(Frequent_Itemset, metric=\"lift\", min_threshold=1, support_only=False)\n\n    Rule_DF[\"Model\"]=i\n    Rule_DF_Dict[i]=Rule_DF\n\nOutData_DF=pd.DataFrame(data=None, columns=Rule_DF.columns)\nfor i in Rule_DF_Dict:\n    OutData_DF=OutData_DF.append(Rule_DF_Dict[i])\n\nOutData_DF.to_csv(\"output.csv\", sep=\"|\", header=True, index=None)\n#OutData_DF.to_csv(OutData, sep=\"|\", header=True, index=None)\n\n#Basket_Analysis(\"input.csv\", \"output.csv\")","650b208b":"OutData_DF","aab7deb3":"\"\"\"\n1. filter rules: lift>1 & support>0.01\n2. convert antecedents & consequents to string\n3. filter records with single item\n\"\"\"\n\nBasket_Network_Data=OutData_DF[(OutData_DF[\"Model\"]==\"All\") & (OutData_DF[\"lift\"]>1) & (OutData_DF[\"support\"]>0.01)]\nBasket_Network_Data[\"antecedents\"]=Basket_Network_Data[\"antecedents\"].astype(str)\nBasket_Network_Data[\"consequents\"]=Basket_Network_Data[\"consequents\"].astype(str)\nBasket_Network_Data=Basket_Network_Data[~(Basket_Network_Data[\"antecedents\"].str.contains(\",\")) & ~(Basket_Network_Data[\"consequents\"].str.contains(\",\"))]\n\nBasket_Network_Data","7f2e63dd":"pip install pyvis # Settings > Internet > enable","4a653e78":"\"\"\"\nnetwork visualization 1\n\"\"\"\n\nfrom pyvis.network import Network\n\nBasket_Network1=Network(height=\"1000px\", width=\"1000px\", directed=True, notebook=True)\nBasket_Network1.force_atlas_2based()\n#Basket_Network1.barnes_hut()\n#Basket_Network1.hrepulsion()\n#Basket_Network1.repulsion()\n\nBasket_Network_Data_zip=zip(Basket_Network_Data[\"antecedents\"],\n                            Basket_Network_Data[\"consequents\"],\n                            Basket_Network_Data[\"antecedent support\"],\n                            Basket_Network_Data[\"consequent support\"],\n                            Basket_Network_Data[\"confidence\"])\n\nfor i in Basket_Network_Data_zip:\n    FromItem=i[0].replace(\"frozenset({'\",\"\").replace(\"'})\",\"\").replace(\"',\u3000'\",\",\")\n    ToItem=i[1].replace(\"frozenset({'\",\"\").replace(\"'})\",\"\").replace(\"',\u3000'\",\",\")\n    FromWeight=i[2]\n    ToWeight=i[3]\n    EdgeWeight=i[4]\n\n    Basket_Network1.add_node(n_id=FromItem, shape=\"dot\", value=FromWeight,\n                            title=FromItem + \"<br>Support: \" + str(FromWeight))\n    Basket_Network1.add_node(n_id=ToItem, shape=\"dot\", value=ToWeight,\n                           title=ToItem + \"<br>Support: \" + str(ToWeight))\n    Basket_Network1.add_edge(source=FromItem, to=ToItem, value=EdgeWeight, arrowStrikethrough=False,\n                            title=FromItem + \" --> \" + ToItem + \"<br>Confidence:\" + str(EdgeWeight))","bd511d93":"\"\"\"\n* remove # & run the code for checking\n\"\"\"\n\n#Basket_Network1.get_adj_list()\n#Basket_Network1.get_edges()\n#Basket_Network1.get_network_data()\nBasket_Network1.set_edge_smooth(smooth_type=\"continuous\")\nBasket_Network1.toggle_hide_edges_on_drag(True)\n#Basket_Network1.show_buttons(filter_=False)\n\nBasket_Network1.save_graph(\"Basket_Network1.html\")\nBasket_Network1.show(\"Basket_Network1.html\")","c8592304":"\"\"\"\nnetwork visualization 2\n\"\"\"\n\nimport networkx\n\nBasket_Network2=networkx.DiGraph()\n\nBasket_Network_Data_zip=zip(Basket_Network_Data[\"antecedents\"],\n                            Basket_Network_Data[\"consequents\"],\n                            Basket_Network_Data[\"antecedent support\"],\n                            Basket_Network_Data[\"consequent support\"],\n                            Basket_Network_Data[\"confidence\"])\n\nfor i in Basket_Network_Data_zip:\n    FromItem=i[0].replace(\"frozenset({'\",\"\").replace(\"'})\",\"\").replace(\"',\u3000'\",\",\")\n    ToItem=i[1].replace(\"frozenset({'\",\"\").replace(\"'})\",\"\").replace(\"',\u3000'\",\",\")\n    FromWeight=i[2]\n    ToWeight=i[3]\n    EdgeWeight=i[4]\n\n    Basket_Network2.add_node(FromItem)\n    Basket_Network2.add_node(ToItem)\n    Basket_Network2.add_edge(FromItem, ToItem, weight=EdgeWeight, length=EdgeWeight)\n    Basket_Network2.add_edge(ToItem, FromItem, weight=EdgeWeight, length=EdgeWeight)","8f5e84f1":"Basket_Network2_Pos=networkx.circular_layout(Basket_Network2)\n\nBasket_Network2_Label={}\nfor k in Basket_Network2_Pos.keys():\n    Basket_Network2_Label[k]=k\n\nnetworkx.draw_networkx_labels(Basket_Network2, pos=Basket_Network2_Pos, labels=Basket_Network2_Label)\nnetworkx.draw_circular(Basket_Network2)\nnetworkx.write_gpickle(Basket_Network2, \"Basket_Network2\")","94dcb0fc":"# Data Preparation","c93f7992":"# Data Exploration","007d31a2":"# Basket Analysis\/ Association Rule","6fe7e67d":"# Visualization","d3402c7f":"    Reference\n    1. http:\/\/rasbt.github.io\/mlxtend\/#welcome-to-mlxtends-documentation\n    2. https:\/\/pyvis.readthedocs.io\/en\/latest\/index.html\n    3. https:\/\/networkx.org\/"}}