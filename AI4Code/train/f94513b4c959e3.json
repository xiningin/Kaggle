{"cell_type":{"dd96ec3e":"code","85b7ef9b":"code","12f45e70":"code","a48bad6e":"code","f047b1d2":"code","aa2bfe89":"code","7f8e112a":"code","56ed0def":"code","27a088ec":"code","a2b99296":"code","abaea1a3":"code","61d3633d":"code","dcd3b8b8":"code","29bb11e0":"code","6f5536a3":"code","6b1a4ecc":"code","c7cb69c6":"code","c836ef26":"code","e81bca21":"code","c6b20732":"code","59222f7f":"code","76448b16":"code","83bad3cb":"code","e7a02597":"code","2ff8d894":"code","aa58b633":"markdown","6fe38fa8":"markdown","c51065e5":"markdown"},"source":{"dd96ec3e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly as py\nimport plotly.graph_objs as go\nfrom sklearn.cluster import KMeans\nimport warnings\nimport os\nfrom sklearn.preprocessing import LabelEncoder\nwarnings.filterwarnings(\"ignore\")\npy.offline.init_notebook_mode(connected=True)\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","85b7ef9b":"df = pd.read_csv(\"\/kaggle\/input\/customer-segmentation-tutorial-in-python\/Mall_Customers.csv\")","12f45e70":"df.head()","a48bad6e":"df.shape","f047b1d2":"df.describe()","aa2bfe89":"label_encoder = LabelEncoder()","7f8e112a":"int_enc = label_encoder.fit_transform(df.iloc[:,1].values)\ndf['Gender'] = int_enc\ndf.head()","56ed0def":"df.head()","27a088ec":"df.dtypes","a2b99296":"df.isnull().any()","abaea1a3":"sns.pairplot(df.iloc[:,1:5])","61d3633d":"#HEATMAP\nhm = sns.heatmap(df.corr(),annot=True,linewidths=5,cmap='Blues')","dcd3b8b8":"plt.figure(1,figsize=(15,8))\nn = 0\nfor i in ['Age', 'Annual Income (k$)', 'Spending Score (1-100)']:\n    n += 1\n    plt.subplot(1,3,n)\n    plt.subplots_adjust(hspace=0.5,wspace=0.5)\n    sns.distplot(df[i],bins=20)\n    plt.title('Displot of {}'.format(i))\nplt.show()","29bb11e0":"labels = [\"Female\", \"Male\"]\nsize = df['Gender'].value_counts()\ncolors = ['pink','orange']\nexplode=[0, 0.1]\n\nplt.figure(1,figsize=(9,9))\nplt.pie(size,colors=colors,explode=explode, labels = labels,shadow=True, autopct= '%.2f%%')\n\nplt.title('Gender', fontsize=20)\nplt.axis('off')\nplt.legend()\nplt.show()","6f5536a3":"x1 = df[['Age', 'Spending Score (1-100)']].iloc[: , :].values\ninertia=[]\n\nfor n in range(1,11):\n    algorithm =(KMeans(n_clusters=n, init='k-means++',n_init=10, max_iter=300,tol=0.0001,random_state=111,algorithm='elkan'))\n    algorithm.fit(x1)\n    inertia.append(algorithm.inertia_)","6b1a4ecc":"plt.figure(1,figsize=(15,6))\nplt.plot(np.arange(1,11), inertia, 'o')\nplt.plot(np.arange(1,11), inertia, '-', alpha=0.5)\nplt.xlabel('Number of clusters'), plt.ylabel('Inertia')\nplt.show()","c7cb69c6":"algorithm = (KMeans(n_clusters = 5 ,init='k-means++', n_init = 10 ,max_iter=300, \n                        tol=0.0001,  random_state= 111  , algorithm='elkan') )\nalgorithm.fit(x1)\nlabels1 = algorithm.labels_\ncentroids1 = algorithm.cluster_centers_","c836ef26":"h = 0.02\nx_min,x_max = x1[:,0].min() - 1, x1[:,0].max() + 1\ny_min,y_max = x1[:,1].min() - 1, x1[:,1].max() + 1\nxx, yy = np.meshgrid(np.arange(x_min,x_max,h),np.arange(y_min,y_max,h))\nz1 = algorithm.predict(np.c_[xx.ravel(),yy.ravel()])","e81bca21":"plt.figure(1 , figsize = (15 , 7) )\nplt.clf()\nz1 = z1.reshape(xx.shape)\nplt.imshow(z1 , interpolation='nearest', \n           extent=(xx.min(), xx.max(), yy.min(), yy.max()),\n           cmap = plt.cm.Pastel1, aspect = 'auto', origin='lower')\n\nplt.scatter( x = 'Age' ,y = 'Spending Score (1-100)' , data = df , c = labels1, \n            s = 200 )\nplt.scatter(x = centroids1[: , 0] , y =  centroids1[: , 1] , s = 300 , c = 'red' , alpha = 0.5)\nplt.ylabel('Spending Score (1-100)') , plt.xlabel('Age')\nplt.show()","c6b20732":"x2 = df[['Annual Income (k$)', 'Spending Score (1-100)']].iloc[: , :].values\ninertia=[]\n\nfor n in range(1,11):\n    algorithm =(KMeans(n_clusters=n, init='k-means++',n_init=10, max_iter=300,tol=0.0001,random_state=111,algorithm='elkan'))\n    algorithm.fit(x1)\n    inertia.append(algorithm.inertia_)","59222f7f":"plt.figure(1,figsize=(15,6))\nplt.plot(np.arange(1,11), inertia, 'o')\nplt.plot(np.arange(1,11), inertia, '-', alpha=0.5)\nplt.xlabel('Number of clusters'), plt.ylabel('Inertia')\nplt.show()","76448b16":"algorithm = (KMeans(n_clusters = 5 ,init='k-means++', n_init = 10 ,max_iter=300, \n                        tol=0.0001,  random_state= 111  , algorithm='elkan') )\nalgorithm.fit(x2)\nlabels2 = algorithm.labels_\ncentroids2 = algorithm.cluster_centers_","83bad3cb":"h = 0.02\nx_min,x_max = x2[:,0].min() - 1, x2[:,0].max() + 1\ny_min,y_max = x2[:,1].min() - 1, x2[:,1].max() + 1\nxx, yy = np.meshgrid(np.arange(x_min,x_max,h),np.arange(y_min,y_max,h))\nz2 = algorithm.predict(np.c_[xx.ravel(),yy.ravel()])","e7a02597":"plt.figure(1 , figsize = (15 , 7) )\nplt.clf()\nz2 = z2.reshape(xx.shape)\nplt.imshow(z2 , interpolation='nearest', \n           extent=(xx.min(), xx.max(), yy.min(), yy.max()),\n           cmap = plt.cm.Pastel2, aspect = 'auto', origin='lower')\n\nplt.scatter( x = 'Annual Income (k$)' ,y = 'Spending Score (1-100)' , data = df , c = labels2, \n            s = 200 )\nplt.scatter(x = centroids2[: , 0] , y =  centroids2[: , 1] , s = 300 , c = 'red' , alpha = 0.5)\nplt.ylabel('Spending Score (1-100)') , plt.xlabel('Annual Income (k$)')\nplt.show()","2ff8d894":"x = df['Annual Income (k$)']\ny = df['Age']\nz = df['Spending Score (1-100)']\n\nsns.lineplot(x,y,color='blue')\nsns.lineplot(x,z,color='pink')\nplt.title('Annual Income vs Age and Spending Score', fontsize=25)\nplt.show()","aa58b633":"***VISUALIZATION***","6fe38fa8":" **Segmentation using Annual Income and Spending Score**","c51065e5":" **Segmentation using Age and Spending Score**"}}