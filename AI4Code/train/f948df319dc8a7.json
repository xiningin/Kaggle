{"cell_type":{"be4d4a7e":"code","95564763":"code","75341c01":"code","25dcfe09":"code","63a94177":"code","b0d80c7d":"markdown","0b0e5764":"markdown","6bab0a4d":"markdown","858fd011":"markdown","35b792ea":"markdown","c5421b37":"markdown"},"source":{"be4d4a7e":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport keras","95564763":"df_train = pd.read_csv('..\/input\/X_train.csv', encoding='cp949')\ndf_test = pd.read_csv('..\/input\/X_test.csv', encoding='cp949')\ny_train = pd.read_csv('..\/input\/y_train.csv').gender\nIDtest = df_test.custid.unique()\n\ndf_train.head()","75341c01":"level = 'brd_nm'\n\ndf_all = pd.concat([df_train, df_test])\nX_train = pd.pivot_table(df_all, index='custid', columns=level, values='tot_amt',\n                         aggfunc=lambda x: np.where(len(x) >=1, 1, 0), fill_value=0). \\\n                         reset_index(). \\\n                         query('custid not in @IDtest'). \\\n                         drop(columns=['custid']).values\nX_test = pd.pivot_table(df_all, index='custid', columns=level, values='tot_amt',\n                         aggfunc=lambda x: np.where(len(x) >=1, 1, 0), fill_value=0). \\\n                         reset_index(). \\\n                         query('custid in @IDtest'). \\\n                         drop(columns=['custid']).values\n\nmax_features = X_train.shape[1]","25dcfe09":"from keras import models\nfrom keras import layers\nfrom keras.optimizers import RMSprop\nfrom keras import regularizers\nfrom keras.callbacks import EarlyStopping\n\nmodel = models.Sequential()\nmodel.add(layers.Dense(1, input_shape=(max_features,), kernel_regularizer=regularizers.l2(0.01)))\nmodel.add(layers.Activation('sigmoid'))\n\nmodel.summary()\n\nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics=['acc'])\nhistory = model.fit(X_train, y_train, epochs=100, batch_size=64, \n                    validation_split=0.2, callbacks=[EarlyStopping(patience=5)])\n\nplt.plot(history.history[\"loss\"], label=\"train loss\")\nplt.plot(history.history[\"val_loss\"], label=\"validation loss\")\nplt.legend()\nplt.title(\"Loss\")\nplt.show()","63a94177":"pred = model.predict(X_test)[:,0]\nfname = 'submissions.csv'\nsubmissions = pd.concat([pd.Series(IDtest, name=\"custid\"), pd.Series(pred, name=\"gender\")] ,axis=1)\nsubmissions.to_csv(fname, index=False)\nprint(\"'{}' is ready to submit.\" .format(fname))","b0d80c7d":"### Read Data","0b0e5764":"### Transform Data with One-hot Encoding","6bab0a4d":"## End","858fd011":"### Build Models","35b792ea":"## This model has the following characteristics:\n* No feature engineering\n* Extracting features from raw transactions through applying one-hot-encoding\n* Modeling a simple neural network without hidden layers","c5421b37":"### Make Submissions"}}