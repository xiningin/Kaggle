{"cell_type":{"a11011bd":"code","4c81c5dc":"code","2894deb1":"code","16d7889d":"code","82c0d422":"code","1543bc5d":"code","71d41192":"code","f2a2d329":"code","09d93d43":"code","d2c4a1de":"code","bb13b813":"code","7077ed49":"code","5e9d4f85":"code","38ec8a36":"code","77cebc40":"code","cec43151":"code","3a7a8a47":"code","4245e116":"code","78665880":"code","c4242b3a":"code","9bfd39e3":"code","79540250":"code","559fc3f0":"code","af5f3b07":"code","5686d3c4":"code","b6a9fa98":"code","fda974ed":"code","da6ffab0":"code","ee523428":"code","7900401d":"code","9be79122":"code","3e0a8f7d":"code","3bd4df0f":"code","2b350e1c":"code","00b25c99":"code","3bac9fb8":"code","ae8d4949":"code","44d23c03":"code","e9a7a9e9":"code","db97dde9":"code","11ce4bd6":"code","1ae0cc10":"code","6ca141a9":"code","dc9ade48":"code","d59a23c3":"code","be03827a":"code","cb074384":"code","ae8cec52":"code","f3f38540":"code","bde7eeeb":"markdown","d830b601":"markdown","8e462c54":"markdown","17f15e4d":"markdown","5eff9ac6":"markdown","6d3e64af":"markdown","8f373832":"markdown","8586904c":"markdown","13ad5919":"markdown","97b9a80b":"markdown","149ab94d":"markdown","e81f7261":"markdown","10e8d3e6":"markdown","1b8cdeb5":"markdown","cb7122d4":"markdown","e331f1bc":"markdown","977e8350":"markdown"},"source":{"a11011bd":"#import the required libraries\nimport pandas as pd    #Pandas is a library written for the Python programming language for data manipulation and analysis.\nimport numpy as np     #NumPy package is used to perform different operations.\nimport matplotlib.pyplot as plt  #matplotlib. pyplot is a plotting library used for 2D graphics.\nimport seaborn as sns     # It provides a high-level interface for drawing attractive and informative statistical graphics.\n\n","4c81c5dc":"#import the data-set\ndf =  pd.read_csv(\"..\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv\")","2894deb1":"# Preview the first 5 lines of the loaded data\ndf.head()\n","16d7889d":"# Preview the last 5 lines of the loaded data\ndf.tail()","82c0d422":"# provide information about the data\ndf.info()","1543bc5d":"# corr method is used to see if any columns correlate\ndf.corr()","71d41192":"#  Returns tuple of shape (Rows, columns) of dataframe\/series\ndf.shape\n  ","f2a2d329":"# checkfor duplicates value\ndf.duplicated().sum()","09d93d43":"# check for missing value\ndf.isnull().sum()","d2c4a1de":"#As there is no null value the data is clean now and can be used for analysis\n","bb13b813":"#use plotly graph\n#age distribution graph\nimport plotly.graph_objects as go\n\nfig = go.Figure()\nfig.add_trace(go.Histogram(\n    x = df['age'],\n    xbins=dict( # bins used for histogram\n        start=40,\n        end=95,\n        size=2\n    ),\n    marker_color='#e8ab60',\n    opacity=1\n))\n\nfig.update_layout(\n    title_text='AGE DISTRIBUTION',\n    xaxis_title_text='AGE',\n    yaxis_title_text='COUNT', \n    bargap=0.05, # gap between bars of adjacent location coordinates\n    xaxis =  {'showgrid': False },\n    yaxis = {'showgrid': False }\n)\n\nfig.show()","7077ed49":"#graph for DEATH_EVENT vs Age analysis\n\nimport plotly.express as px\nfig = px.histogram(df, x=\"age\", color=\"DEATH_EVENT\", marginal=\"violin\", hover_data=df.columns, \n                   title =\"Distribution of AGE Vs DEATH_EVENT\", \n                   labels={\"age\": \"AGE\"},\n                 \n                   color_discrete_map={\"0\": \"RebeccaPurple\", \"1\": \"MediumPurple\"}\n                  )\nfig.show()","5e9d4f85":"#graph for DEATH_EVENT vs smoking analysis\n\nimport plotly.express as px\nfig = px.histogram(df, x='smoking', y='DEATH_EVENT')\nfig.update_layout(\n    title_text='ANALYSIS OF DEATH EVENT V\/S SMOKING',\n    xaxis_title_text='SMOKING',\n    yaxis_title_text='DEATH-EVENT', \n    bargap=0.02, # gap between bars of adjacent location coordinates\n    xaxis =  {'showgrid': False },\n    yaxis = {'showgrid': False }\n \n)\n\nfig.show()","38ec8a36":"#graph for DEATH_EVENT vs time analysis\n\nimport plotly.express as px\nfig = px.histogram(df, x='time', y='DEATH_EVENT')\nfig.update_layout(\n    title_text='ANALYSIS OF DEATH EVENT V\/S TIME',\n    xaxis_title_text='TIME',\n    yaxis_title_text='DEATH-EVENT', \n    bargap=0.02, # gap between bars of adjacent location coordinates\n    xaxis =  {'showgrid': False },\n    yaxis = {'showgrid': False }\n\n)\n\nfig.show()","77cebc40":"# Distribution of creatinine_phosphokinase\n\nimport plotly.graph_objects as go\n\nfig = go.Figure()\nfig.add_trace(go.Histogram(\n    x = df['creatinine_phosphokinase'],\n    xbins=dict( # bins used for histogram\n        start=23,\n        end=582,\n        size=15\n    ),\n    marker_color='#FE6F5E',\n    opacity=1\n))\n\nfig.update_layout(\n    title_text='CREATININE PHOSPHOKINASE DISTRIBUTION',\n    xaxis_title_text='CREATININE PHOSPHOKINASE',\n    yaxis_title_text='COUNT', \n    bargap=0.05, # gap between bars of adjacent location coordinates\n    xaxis =  {'showgrid': False },\n    yaxis = {'showgrid': False }\n  \n)\n\nfig.show()","cec43151":"#DEATH-EVENT V\/S CREATININE PHOSPHOKINASE\nimport plotly.express as px\nfig = px.histogram(df, x=\"creatinine_phosphokinase\", color=\"DEATH_EVENT\", marginal=\"violin\", hover_data=df.columns,\n                   title =\"Distribution of CREATININE PHOSPHOKINASE Vs DEATH_EVENT\", \n                   labels={\"creatinine_phosphokinase\": \"CREATININE PHOSPHOKINASE\"},\n                   \n                   color_discrete_map={\"0\": \"RebeccaPurple\", \"1\": \"MediumPurple\"})\nfig.show()","3a7a8a47":"# Distribution of ejection_fraction\n\nimport plotly.graph_objects as go\n\nfig = go.Figure()\nfig.add_trace(go.Histogram(\n    x = df['ejection_fraction'],\n    xbins=dict( # bins used for histogram\n        start=14,\n        end=80,\n        size=2\n    ),\n    marker_color='#A7F432',\n    opacity=1\n))\n\nfig.update_layout(\n    title_text='EJECTION FRACTION DISTRIBUTION',\n    xaxis_title_text='EJECTION FRACTION',\n    yaxis_title_text='COUNT', \n    bargap=0.05, # gap between bars of adjacent location coordinates\n    xaxis =  {'showgrid': False },\n    yaxis = {'showgrid': False }\n  \n)\n\nfig.show()","4245e116":"# Distribution of platelets\n\nimport plotly.graph_objects as go\n\nfig = go.Figure()\nfig.add_trace(go.Histogram(\n    x = df['platelets'],\n    xbins=dict( # bins used for histogram\n        start=25000,\n        end=300000,\n        size=5000\n    ),\n    marker_color='#50BFE6',\n    opacity=1\n))\n\nfig.update_layout(\n    title_text='PLATELETS DISTRIBUTION',\n    xaxis_title_text='PLATELETS',\n    yaxis_title_text='COUNT', \n    bargap=0.05, # gap between bars of adjacent location coordinates\n    xaxis =  {'showgrid': False },\n    yaxis = {'showgrid': False }\n   \n)\n\nfig.show()","78665880":"# Now lets categorize the above histogram by DEATH_EVENT\n\nimport plotly.express as px\nfig = px.histogram(df, x=\"platelets\", color=\"DEATH_EVENT\", marginal=\"violin\", hover_data=df.columns,\n                   title =\"Distribution of PLATELETS Vs DEATH_EVENT\", \n                   labels={\"platelets\": \"PLATELETS\"},\n                  \n                   color_discrete_map={\"0\": \"RebeccaPurple\", \"1\": \"MediumPurple\"})\nfig.show()","c4242b3a":"# Distribution of serum_creatinine\n\nimport plotly.graph_objects as go\n\nfig = go.Figure()\nfig.add_trace(go.Histogram(\n    x = df['serum_creatinine'],\n    xbins=dict( # bins used for histogram\n        start=0.5,\n        end=9.4,\n        size=0.2\n    ),\n    marker_color='#E77200',\n    opacity=1\n))\n\nfig.update_layout(\n    title_text='SERUM CREATININE DISTRIBUTION',\n    xaxis_title_text='SERUM CREATININE',\n    yaxis_title_text='COUNT', \n    bargap=0.05, # gap between bars of adjacent location coordinates\n    xaxis =  {'showgrid': False },\n    yaxis = {'showgrid': False }\n)\n\nfig.show()","9bfd39e3":"# Now lets categorize the above histogram by DEATH_EVENT\n\nimport plotly.express as px\nfig = px.histogram(df, x=\"serum_creatinine\", color=\"DEATH_EVENT\", marginal=\"violin\", hover_data=df.columns,\n                   title =\"Distribution of SERUM CREATININE Vs DEATH_EVENT\", \n                   labels={\"serum_creatinine\": \"SERUM CREATININE\"},\n                   color_discrete_map={\"0\": \"RebeccaPurple\", \"1\": \"MediumPurple\"})\nfig.show()","79540250":"# Distribution of serum_sodium\n\nimport plotly.graph_objects as go\n\nfig = go.Figure()\nfig.add_trace(go.Histogram(\n    x = df['serum_sodium'],\n    xbins=dict( # bins used for histogram\n        start=113,\n        end=148,\n        size=1\n    ),\n    marker_color='#AAF0D1',\n    opacity=1\n))\n\nfig.update_layout(\n    title_text='SERUM SODIUM DISTRIBUTION',\n    xaxis_title_text='SERUM SODIUM',\n    yaxis_title_text='COUNT', \n    bargap=0.05, # gap between bars of adjacent location coordinates\n    xaxis =  {'showgrid': False },\n    yaxis = {'showgrid': False }\n)\n\nfig.show()\n","559fc3f0":"# Now lets categorize the above histogram by DEATH_EVENT\n\nimport plotly.express as px\nfig = px.histogram(df, x=\"serum_sodium\", color=\"DEATH_EVENT\", marginal=\"violin\",hover_data=df.columns,\n                   title =\"Distribution of SERUM SODIUM Vs DEATH_EVENT\", \n                   labels={\"serum_sodium\": \"SERUM SODIUM\"},\n                   color_discrete_map={\"0\": \"RebeccaPurple\", \"1\": \"MediumPurple\"})\nfig.show()","af5f3b07":"#graph for AGE vs anaemia analysis\n\nimport plotly.express as px\nfig = px.histogram(df, x='age', y='anaemia')\nfig.update_layout(\n    title_text='AGE V\/S ANAEMIA',\n    xaxis_title_text='AGE',\n    yaxis_title_text='ANAEMIA', \n    bargap=0.02, # gap between bars of adjacent location coordinates\n    xaxis =  {'showgrid': False },\n    yaxis = {'showgrid': False }\n   \n)\n\nfig.show()","5686d3c4":"#graph for AGE vs anaemia analysis\n\nimport plotly.express as px\nfig = px.histogram(df, x='age', y='diabetes')\nfig.update_layout(\n    title_text='AGE V\/S DIABETES',\n    xaxis_title_text='AGE',\n    yaxis_title_text='DIABETES', \n    bargap=0.02, # gap between bars of adjacent location coordinates\n    xaxis =  {'showgrid': False },\n    yaxis = {'showgrid': False }\n   \n)\n\nfig.show()","b6a9fa98":"#graph for AGE vs anaemia analysis\n\nimport plotly.express as px\nfig = px.histogram(df, x='age', y='high_blood_pressure')\nfig.update_layout(\n    title_text='AGE V\/S BLOOD-PRESSURE',\n    xaxis_title_text='AGE',\n    yaxis_title_text='BLOOD-PRESSURE', \n    bargap=0.02, # gap between bars of adjacent location coordinates\n    xaxis =  {'showgrid': False },\n    yaxis = {'showgrid': False }\n   \n)\n\nfig.show()","fda974ed":"#graph for AGE vs smoking analysis\n\nimport plotly.express as px\nfig = px.histogram(df, x='age', y='smoking')\nfig.update_layout(\n    title_text='AGE V\/S SMOKING',\n    xaxis_title_text='AGE',\n    yaxis_title_text='SMOKING', \n    bargap=0.02, # gap between bars of adjacent location coordinates\n    xaxis =  {'showgrid': False },\n    yaxis = {'showgrid': False }\n   \n)\n\nfig.show()","da6ffab0":"import plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\nd1 = df[(df[\"DEATH_EVENT\"]==0) & (df[\"sex\"]==1)]\nd2 =df[(df[\"DEATH_EVENT\"]==1) & (df[\"sex\"]==1)]\nd3 =df[(df[\"DEATH_EVENT\"]==0) & (df[\"sex\"]==0)]\nd4 = df[(df[\"DEATH_EVENT\"]==1) & (df[\"sex\"]==0)]\n\nlabel1 = [\"Male\",\"Female\"]\nlabel2 = ['Male - Survived','Male - Died', \"Female -  Survived\", \"Female - Died\"]\nvalues1 = [(len(d1)+len(d2)), (len(d3)+len(d4))]\nvalues2 = [len(d1),len(d2),len(d3),len(d4)]\n\n# Create subplots: use 'domain' type for Pie subplot\nfig = make_subplots(rows=1, cols=2, specs=[[{'type':'domain'}, {'type':'domain'}]])\nfig.add_trace(go.Pie(labels=label1, values=values1, name=\"GENDER\"),\n              1, 1)\nfig.add_trace(go.Pie(labels=label2, values=values2, name=\"GENDER VS DEATH_EVENT\"),\n              1, 2)\n\n# Use `hole` to create a donut-like pie chart\nfig.update_traces(hole=.4, hoverinfo=\"label+percent\")\n\nfig.update_layout(\n    title_text=\"GENDER DISTRIBUTION IN THE DATASET  \\\n                   GENDER VS DEATH_EVENT\",\n    # Add annotations in the center of the donut pies.\n    annotations=[dict(text='GENDER', x=0.19, y=0.5, font_size=10, showarrow=False),\n                 dict(text='GENDER VS DEATH_EVENT', x=0.84, y=0.5, font_size=9, showarrow=False)],\n    autosize=False,width=1200, height=500, paper_bgcolor=\"white\")\n\nfig.show()","ee523428":"import plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nd1 = df[(df[\"DEATH_EVENT\"]==0) & (df[\"diabetes\"]==1)]\nd2 =df[(df[\"DEATH_EVENT\"]==1) & (df[\"diabetes\"]==1)]\nd3 =df[(df[\"DEATH_EVENT\"]==0) & (df[\"diabetes\"]==0)]\nd4 = df[(df[\"DEATH_EVENT\"]==1) & (df[\"diabetes\"]==0)]\n\n\nlabel1 = [\"No Diabetes\",\"Diabetes\"]\nlabel2 = ['No Diabetes - Survived','Diabetes - Survived', \"No Diabetes -  Died\", \"Diabetes  - Died\"]\nvalues1 = [(len(d1)+len(d3)), (len(d2)+len(d4))]\nvalues2 = [len(d1),len(d2),len(d3),len(d4)]\n\n# Create subplots: use 'domain' type for Pie subplot\nfig = make_subplots(rows=1, cols=2, specs=[[{'type':'domain'}, {'type':'domain'}]])\nfig.add_trace(go.Pie(labels=label1, values=values1, name=\"DIABETES\"),\n              1, 1)\nfig.add_trace(go.Pie(labels=label2, values=values2, name=\"DIABETES VS DEATH_EVENT\"),\n              1, 2)\n\n# Use `hole` to create a donut-like pie chart\nfig.update_traces(hole=.4, hoverinfo=\"label+percent\")\n\nfig.update_layout(\n    title_text=\"DIABETES DISTRIBUTION IN THE DATASET \\\n                  DIABETES VS DEATH_EVENT\",\n    # Add annotations in the center of the donut pies.\n    annotations=[dict(text='DIABETES', x=0.20, y=0.5, font_size=10, showarrow=False),\n                 dict(text='DIABETES VS DEATH_EVENT', x=0.84, y=0.5, font_size=8, showarrow=False)],\n    autosize=False,width=1200, height=500, paper_bgcolor=\"white\")\nfig.show()","7900401d":"import plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nd1 = df[(df[\"DEATH_EVENT\"]==0) & (df[\"smoking\"]==1)]\nd2 =df[(df[\"DEATH_EVENT\"]==1) & (df[\"smoking\"]==1)]\nd3 =df[(df[\"DEATH_EVENT\"]==0) & (df[\"smoking\"]==0)]\nd4 = df[(df[\"DEATH_EVENT\"]==1) & (df[\"smoking\"]==0)]\n\n\nlabel1 = [\"No Smoking\",\"Smoking\"]\nlabel2 = ['No Smoking - Survived','Smoking - Survived', \"No Smoking -  Died\", \"Smoking  - Died\"]\nvalues1 = [(len(d1)+len(d3)), (len(d2)+len(d4))]\nvalues2 = [len(d1),len(d2),len(d3),len(d4)]\n\n# Create subplots: use 'domain' type for Pie subplot\nfig = make_subplots(rows=1, cols=2, specs=[[{'type':'domain'}, {'type':'domain'}]])\nfig.add_trace(go.Pie(labels=label1, values=values1, name=\"SMOKING\"),\n              1, 1)\nfig.add_trace(go.Pie(labels=label2, values=values2, name=\"SMOKING VS DEATH_EVENT\"),\n              1, 2)\n\n# Use `hole` to create a donut-like pie chart\nfig.update_traces(hole=.4, hoverinfo=\"label+percent\")\n\nfig.update_layout(\n    title_text=\"SMOKING DISTRIBUTION IN THE DATASET \\\n                  SMOKING VS DEATH_EVENT\",\n    # Add annotations in the center of the donut pies.\n    annotations=[dict(text='SMOKING', x=0.20, y=0.5, font_size=10, showarrow=False),\n                 dict(text='SMOKING VS DEATH_EVENT', x=0.84, y=0.5, font_size=8, showarrow=False)],\n    autosize=False,width=1200, height=500, paper_bgcolor=\"white\")\nfig.show()","9be79122":"import plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\nd1 = df[(df[\"DEATH_EVENT\"]==0) & (df[\"anaemia\"]==1)]\nd2 =df[(df[\"DEATH_EVENT\"]==1) & (df[\"anaemia\"]==1)]\nd3 =df[(df[\"DEATH_EVENT\"]==0) & (df[\"anaemia\"]==0)]\nd4 = df[(df[\"DEATH_EVENT\"]==1) & (df[\"anaemia\"]==0)]\n\nlabel1 = [\"No Anaemia\",\"Anaemia\"]\nlabel2 = ['No Anaemia - Survived','No Anaemia - Died', \"Anaemia -  Survived\", \"Anaemia  - Died\"]\nvalues1 = [(len(d1)+len(d2)), (len(d3)+len(d4))]\nvalues2 = [len(d1),len(d2),len(d3),len(d4)]\n\n# Create subplots: use 'domain' type for Pie subplot\nfig = make_subplots(rows=1, cols=2, specs=[[{'type':'domain'}, {'type':'domain'}]])\nfig.add_trace(go.Pie(labels=label1, values=values1, name=\"ANAEMIA\"),\n              1, 1)\nfig.add_trace(go.Pie(labels=label2, values=values2, name=\"ANAEMIA VS DEATH_EVENT\"),\n              1, 2)\n\n# Use `hole` to create a donut-like pie chart\nfig.update_traces(hole=.4, hoverinfo=\"label+percent\")\n\nfig.update_layout(\n    title_text=\"ANAEMIA DISTRIBUTION IN THE DATASET \\\n                  ANAEMIA VS DEATH_EVENT\",\n    # Add annotations in the center of the donut pies.\n    annotations=[dict(text='ANAEMIA', x=0.20, y=0.5, font_size=10, showarrow=False),\n                 dict(text='ANAEMIA VS DEATH_EVENT', x=0.84, y=0.5, font_size=8, showarrow=False)],\n    autosize=False,width=1200, height=500, paper_bgcolor=\"white\")\nfig.show()","3e0a8f7d":"import plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\n\nd1 = df[(df[\"DEATH_EVENT\"]==0) & (df[\"high_blood_pressure\"]==0)]\nd2 =df[(df[\"DEATH_EVENT\"]==1) & (df[\"high_blood_pressure\"]==0)]\nd3 =df[(df[\"DEATH_EVENT\"]==0) & (df[\"high_blood_pressure\"]==1)]\nd4 = df[(df[\"DEATH_EVENT\"]==1) & (df[\"high_blood_pressure\"]==1)]\n\nlabel1 = [\"No High BP\",\"High BP\"]\nlabel2 = ['No High BP - Survived','No High BP - Died', \"High BP -  Survived\", \"High BP  - Died\"]\nvalues1 = [(len(d1)+len(d2)), (len(d3)+len(d4))]\nvalues2 = [len(d1),len(d2),len(d3),len(d4)]\n\n# Create subplots: use 'domain' type for Pie subplot\nfig = make_subplots(rows=1, cols=2, specs=[[{'type':'domain'}, {'type':'domain'}]])\nfig.add_trace(go.Pie(labels=label1, values=values1, name=\"HIGH BP\"),\n              1, 1)\nfig.add_trace(go.Pie(labels=label2, values=values2, name=\"HIGH BP VS DEATH_EVENT\"),\n              1, 2)\n\n# Use `hole` to create a donut-like pie chart\nfig.update_traces(hole=.4, hoverinfo=\"label+percent\")\n\nfig.update_layout(\n    title_text=\"HIGH BP DISTRIBUTION IN THE DATASET \\\n                  HIGH BP VS DEATH_EVENT\",\n    # Add annotations in the center of the donut pies.\n    annotations=[dict(text='HIGH BP', x=0.20, y=0.5, font_size=10, showarrow=False),\n                 dict(text='HIGH BP VS DEATH_EVENT', x=0.84, y=0.5, font_size=8, showarrow=False)],\n    autosize=False,width=1200, height=500, paper_bgcolor=\"white\")\nfig.show()","3bd4df0f":"# Feature Selection is the process where you automatically or manually select those features which contribute most to your prediction variable or output in which you are interested in.\n\nplt.figure(figsize=(18,9))\n\n#iloc returns a Pandas Series when one row is selected, and a  column in full is selected.\nx = df.iloc[:, :-1] #until the last column\ny = df.iloc[:,-1] #select all rows for a specific column\n\nfrom sklearn.ensemble import ExtraTreesClassifier  #ExtraTreesClassifier is an ensemble learning method fundamentally based on decision trees. \nimport matplotlib.pyplot as plt\nmodel = ExtraTreesClassifier()\nmodel.fit(x,y)\nprint(model.feature_importances_) \nfeat_importances = pd.Series(model.feature_importances_, index=x.columns)\nfeat_importances.nlargest(12).plot(kind='barh')\nplt.show()","2b350e1c":"#we will select time , ejection_fraction and serum_creatline because these are more important or relevant  feature towards the output variable","00b25c99":"#Gives clear information about linear pattern present b\/n two attributes\n#Always calculated btn two attributes\n# Correlation analysis\ncor = df.corr()\n# Heatmap for visualizing correlation analysis\nplt.figure(figsize=(12,8))\nsns.heatmap(cor,annot=True,cmap='coolwarm')  # if we will not write annot then value will not be visible\nplt.show()","3bac9fb8":"#from above correlation heatmap we found that :\n#death-event have good correlation with - serium_creatinine(0.29) ,and age(0.25)\n#age have good correlation with - death-event(0.25) , serium_creatinine(0.16)\ncor[abs(cor['DEATH_EVENT']) > 0.1]['DEATH_EVENT']\n","ae8d4949":"#The features 'age', 'ejection_fraction', 'serum_creatinine', 'serum_sodium', and 'time' have a considerable correlation with 'DEATH_EVENT'\n\nfrom sklearn.model_selection import train_test_split\n\n\n# Trial and Error revealed that not considering Age column improves accuracy\n\nx = df[['age' , 'ejection_fraction', 'serum_creatinine', 'serum_sodium', 'time']]\ny = df['DEATH_EVENT']\n\n#Spliting data into training and testing data\n\nx_train,x_test,y_train,y_test=train_test_split(x,y,random_state=1,test_size=0.2)","44d23c03":"mylist =[]","e9a7a9e9":"\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\n\nlo=LogisticRegression()\nlo.fit(x_train,y_train)\np2=lo.predict(x_test)\nsuccess1=accuracy_score(y_test,p2)\nprint(\"Logistic Regression Success Rate is :\", success1)  #sucess rate of train model\n\nmylist.append(success1)","db97dde9":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import confusion_matrix, accuracy_score\nlist=[]\nfor i in range(1,21):\n    knn=KNeighborsClassifier(n_neighbors=i)\n    knn.fit(x_train,y_train)\n    pred=knn.predict(x_test)\n    res=accuracy_score(y_test,pred)\n    list.append(round(100*res, 2))\nprint(\"K Nearest Neighbors Top 5 Success Rates is:\" , \"{:.2f}%\".format(100*res))\n\nmylist.append(res)","11ce4bd6":"from sklearn.ensemble import RandomForestClassifier\nrf=RandomForestClassifier()\n\nrf.fit(x_train,y_train)\npred1=rf.predict(x_test)\nres1=accuracy_score(y_test,pred1)\nprint(\"Random Forest Classifier Success Rate is :\", \"{:.2f}%\".format(100*res1))\nmylist.append(res1)","1ae0cc10":"from sklearn.ensemble import GradientBoostingClassifier\ngbc=GradientBoostingClassifier()\ngbc.fit(x_train,y_train)\npred2=gbc.predict(x_test)\nres2=accuracy_score(y_test,pred2)\nprint(\"Gradient Booster Classifier Success Rate  is:\", \"{:.2f}%\".format(100*res2))\nmylist.append(res2)","6ca141a9":"from sklearn.svm import SVC\nsvm=SVC()\nsvm.fit(x_train,y_train)\npred3=svm.predict(x_test)\nres3=accuracy_score(y_test,pred3)\nprint(\"Support Vector Machine Success Rate :\", \"{:.2f}%\".format(100*res3))\nmylist.append(res3)","dc9ade48":"\nfrom sklearn.tree import DecisionTreeClassifier\nlist1 = []\nfor leaves in range(2,10):\n    classifier = DecisionTreeClassifier(max_leaf_nodes = leaves, random_state=0, criterion='entropy')\n    classifier.fit(x_train, y_train)\n    pred4 = classifier.predict(x_test)\n    res4=accuracy_score(y_test,pred4)\n    list1.append(accuracy_score(y_test,pred4)*100)\nprint(\"Decision Tree Classifier Success Rates is:\", \"{:.2f}%\".format(100*res4))\nmylist.append(res4)","d59a23c3":"from catboost import CatBoostClassifier\nclassifier = CatBoostClassifier()\nclassifier.fit(x_train, y_train)\ny_pred = classifier.predict(x_test)\nacc = accuracy_score(y_test, y_pred)\nmylist.append(acc)\n","be03827a":"print(\"Cat Boost Classifier Success Rates is:\", \"{:.2f}%\".format(100*acc))","cb074384":"print(mylist)","ae8cec52":"mylist2 = [\"Linear Regression\", \"KNearestNeighbours\" , \"RandomForest\" , \"Gradient Booster Classifier\" , \"SupportVector\" , \"DecisionTree\" , \"CATBOOST\"]","f3f38540":"plt.rcParams['figure.figsize']=20,8\nsns.set_style('darkgrid')\nax = sns.barplot(x=mylist2, y=mylist, palette = \"husl\", saturation =2.0)\nplt.xlabel('Classifier Models', fontsize = 20 )\nplt.ylabel('% of Accuracy', fontsize = 20)\nplt.title('Accuracy of different Classifier Models', fontsize = 20)\nplt.xticks(fontsize = 12, horizontalalignment = 'center', rotation = 8)\nplt.yticks(fontsize = 12)\nfor i in ax.patches:\n    width, height = i.get_width(), i.get_height()\n    x, y = i.get_xy() \n    ax.annotate(f'{round(height,2)}%', (x + width\/2, y + height*1.02), ha='center', fontsize = 'x-large')\nplt.show()","bde7eeeb":"# Data Cleaning","d830b601":"# DATA ANALYSIS ","8e462c54":"# Data Modeling and Prediction","17f15e4d":"LOGISTIC  REGRESSION","5eff9ac6":"Import the dataset : ","6d3e64af":"# Heart Failure Prediction","8f373832":"K NEAREST NEIGHBOR","8586904c":"CAT BOOST CLASSIFIER","13ad5919":"GRADIENT BOOSTER CLASSIFIER","97b9a80b":"Let's have a look at the dataset : This dataset contains person's information like age , sex , blood pressure, smoke, diabetes ,ejection fraction , creatinine phosphokinase , serum creatinine , serum sodium and time. By analysing the dataset we have to predict the DEATH EVENT.","149ab94d":"# Feature Selection\n","e81f7261":"RANDOM FOREST CLASSIFIER","10e8d3e6":"# Data Exploration","1b8cdeb5":"DECISION TREE CLASSIFIER","cb7122d4":"# Correlation Matrix with Heatmap","e331f1bc":"Import the required libraries :","977e8350":"SUPPORT VECTOR MACHINE"}}