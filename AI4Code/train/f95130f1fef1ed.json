{"cell_type":{"4dd835d6":"code","6479093d":"code","b70fdd7b":"code","edf9c428":"code","e4dae97d":"code","fb53f5c2":"code","94236a5c":"code","a39f2545":"code","ef9fc55e":"code","bff361f7":"code","9270092f":"code","c5339be8":"code","e9eac336":"code","e6c0e050":"code","c2bc959d":"code","df46fe61":"code","f581d5ec":"code","56393aa2":"code","28693100":"code","a0c30d80":"code","41bf8cc9":"markdown","81e77035":"markdown","ea7453ec":"markdown","04db6840":"markdown","5121d6d6":"markdown","10178516":"markdown","2c1dca29":"markdown","34c40550":"markdown","07a6e31a":"markdown"},"source":{"4dd835d6":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm\n\nfrom sklearn.cluster import MiniBatchKMeans\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.decomposition import PCA\nfrom sklearn.manifold import TSNE\nfrom sklearn.cluster import KMeans\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\n","6479093d":"data = pd.read_json('..\/input\/combined.json', lines=True)\ndata.head()","b70fdd7b":"data.info()","edf9c428":"data.contents","e4dae97d":"def cal_accuracy(y_test, y_pred): \n      \n    print(\"Confusion Matrix: \", \n        confusion_matrix(y_test, y_pred)) \n      \n    print (\"Accuracy : \", \n    accuracy_score(y_test,y_pred)*100) \n      \n    print(\"Report : \", \n    classification_report(y_test, y_pred))","fb53f5c2":"tfidf = TfidfVectorizer(\n    #min_df = 5,\n    #max_df = 0.95,\n    #max_features = 8000,\n    stop_words = 'english'\n)\n\ntfidf.fit(data.contents)\ntext = tfidf.transform(data.contents)\n#print(text)","94236a5c":"def find_optimal_clusters(data, max_k):\n    iters = range(2, max_k+1, 2)\n    \n    sse = []\n    for k in iters:\n        sse.append(MiniBatchKMeans(n_clusters=k, init_size=1024, batch_size=2048, random_state=20).fit(data).inertia_)\n        print('Fit {} clusters'.format(k))\n        \n    f, ax = plt.subplots(1, 1)\n    ax.plot(iters, sse, marker='o')\n    ax.set_xlabel('Cluster Centers')\n    ax.set_xticks(iters)\n    ax.set_xticklabels(iters)\n    ax.set_ylabel('SSE')\n    ax.set_title('SSE by Cluster Center Plot')\n    \nfind_optimal_clusters(text, 20)","a39f2545":"clusters = MiniBatchKMeans(n_clusters=14, init_size=1024, batch_size=2048, random_state=20).fit_predict(text)\nprint(clusters)\n#clusters2 = MiniBatchKMeans(n_clusters=14, init_size=1024, batch_size=2048, random_state=20).fit_predict(text1)\n#print(clusters2)\n#cl=KMeans(n_clusters=14, random_state=20).fit_predict(text)\n#print(cl)","ef9fc55e":"clusters.flatten","bff361f7":"def plot_tsne_pca(data, labels):\n    max_label = max(labels)\n    max_items = np.random.choice(range(data.shape[0]), size=3000, replace=False)\n    \n    pca = PCA(n_components=2).fit_transform(data[max_items,:].todense())\n    tsne = TSNE().fit_transform(PCA(n_components=50).fit_transform(data[max_items,:].todense()))\n    \n    \n    idx = np.random.choice(range(pca.shape[0]), size=300, replace=False)\n    label_subset = labels[max_items]\n    label_subset = [cm.hsv(i\/max_label) for i in label_subset[idx]]\n    \n    f, ax = plt.subplots(1, 2, figsize=(14, 6))\n    \n    ax[0].scatter(pca[idx, 0], pca[idx, 1], c=label_subset)\n    ax[0].set_title('PCA Cluster Plot')\n    \n    ax[1].scatter(tsne[idx, 0], tsne[idx, 1], c=label_subset)\n    ax[1].set_title('TSNE Cluster Plot')\n    \nplot_tsne_pca(text, clusters)\n","9270092f":"def get_top_keywords(data, clusters, labels, n_terms):\n    df = pd.DataFrame(data.todense()).groupby(clusters).mean()\n    \n    for i,r in df.iterrows():\n        print('\\nCluster {}'.format(i))\n        print(','.join([labels[t] for t in np.argsort(r)[-n_terms:]]))\n            \nget_top_keywords(text, clusters, tfidf.get_feature_names(), 10)","c5339be8":"cl=MiniBatchKMeans(n_clusters=14, init_size=1024, batch_size=2048, random_state=20)\ncl=cl.fit(text)","e9eac336":"X=tfidf.transform([\" The  labeled as . Some releases are tagged with topics or related agencies.\"])\nprint(cl.predict(X))\nX=tfidf.transform([\"ark,campaigns,murdered,golden,exported,implemented,securitization,core,diligently,aside\"])\nprint(cl.predict(X))\nX=tfidf.transform([\"rights,people,accessible,800,civic,514,agreement,access,disabilities,ada\"])\nprint(cl.predict(X))","e6c0e050":"array=cl.predict(text)","c2bc959d":"X_train, X_test, y_train, y_test = train_test_split(data.contents, data ,test_size=0.33, random_state=42)","df46fe61":"tfidf.fit(X_train)\ntext = tfidf.transform(X_train)\n#tfidf.fit(X_test)\ntext1 = tfidf.transform(X_test)","f581d5ec":"cl=MiniBatchKMeans(n_clusters=14, init_size=1024, batch_size=2048, random_state=20)\ncl=cl.fit(text)\ncl1=MiniBatchKMeans(n_clusters=14, init_size=1024, batch_size=2048, random_state=20).fit_predict(text1)\ncl1","56393aa2":"cl.score(text,text1)","28693100":"array=cl.predict(text1)\narray","a0c30d80":"cal_accuracy(array,cl1)","41bf8cc9":"# Importing Common Libraries","81e77035":"## Plotting Clusters","ea7453ec":"## Finding Best value of K for clusters","04db6840":"## Main key Words in each clusters","5121d6d6":"## Term Frequency-Inverse Document Frequence","10178516":"# Prediction","2c1dca29":"# Results","34c40550":"## Checking For missing Values","07a6e31a":"## Effort for calculating Efficiency"}}