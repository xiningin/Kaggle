{"cell_type":{"e2b68c88":"code","268ed7ba":"code","80f8855a":"code","c9622d0f":"code","7110d811":"code","e86a875b":"code","d793f406":"code","74a19d3f":"code","6e1973cc":"code","9e58307e":"code","2bde2fe3":"code","979a9927":"code","fbc775eb":"code","6d4c3573":"code","35b3a182":"code","a2155625":"code","9c2aa750":"code","50755785":"code","40086f3e":"code","3d351579":"code","25710783":"code","14e2f402":"code","10508d6d":"code","3745380d":"code","c5fdfbb2":"code","abaced06":"code","ed663e7a":"code","9ff13ae9":"code","da61f297":"code","d4cd93af":"code","5e5ec6ba":"code","a5a32b3f":"code","9192d7fb":"code","79f16aab":"code","70b6b267":"code","71ca341d":"code","4d112aa7":"code","2e9a38fd":"code","19ef411e":"code","68950d3e":"code","cbf829d1":"code","2091c85b":"code","febe0b18":"code","7dc5877a":"code","0fd0d291":"code","b6415e59":"code","88f3dada":"code","9e2736d0":"code","612678b6":"code","b4c1d03b":"code","e031427f":"code","7215032f":"code","8dd61cd5":"code","3a84bc2e":"code","254a4d9e":"code","02fb7b26":"code","ab0c27c4":"code","5142b612":"markdown","cf0075e0":"markdown","696a4012":"markdown","204967a9":"markdown","19703f24":"markdown","7a24a503":"markdown","66820602":"markdown","12636083":"markdown","b2f2f69f":"markdown","d786532a":"markdown","18c0b06e":"markdown","05f486ea":"markdown","65813a82":"markdown","5bed7b15":"markdown","1cfa7ce8":"markdown","e2ebb187":"markdown","65fd1122":"markdown","c99459b9":"markdown","6d623611":"markdown","24742da1":"markdown","7106fda1":"markdown","7897a1b9":"markdown","192362fa":"markdown","e32be806":"markdown","de3b3236":"markdown","f186b89d":"markdown","04323950":"markdown","44bdaa17":"markdown","1529b256":"markdown","0c4cead6":"markdown","799b9a72":"markdown","56b69290":"markdown","d50f4e38":"markdown","ad69c839":"markdown","27a38e90":"markdown","fbffc69c":"markdown","05589b17":"markdown","7af5fbe2":"markdown","5b8773c3":"markdown","bd84afd5":"markdown","e79e033d":"markdown","62d0b17b":"markdown","b31e1b77":"markdown","11bf6b22":"markdown","ec141007":"markdown","d755c8e5":"markdown","c418865f":"markdown","13b32a07":"markdown","7f242ac7":"markdown","ed6c3df7":"markdown","9cb726d3":"markdown","6ecb725d":"markdown","4ece84cb":"markdown","3cf4f144":"markdown","7533cbc4":"markdown","58516c21":"markdown"},"source":{"e2b68c88":"import numpy as np # importar numpy\nimport pandas as pd # importar pandas para realizar a leitura do arquivo csv\nimport matplotlib.pyplot as plt  #importar matrplotlib para gerar gr\u00e1ficos\nimport seaborn as sns #importar seaborn para gerar outros tipos de gr\u00e1ficos\n","268ed7ba":"df = pd.read_csv('..\/input\/diamonds\/diamonds.csv')","80f8855a":"df.head()","c9622d0f":"df.info()","7110d811":"df.describe()","e86a875b":"df.describe(include=['O'])","d793f406":"df.isnull().sum()","74a19d3f":"df['cut'].unique() #Lapida\u00e7\u00e3o - Ideal \u00e9 excelente e Fair ruim","6e1973cc":"df['color'].unique() #Cor - D \u00e9 mais incolor e J \u00e9 mais amarelada","9e58307e":"df['clarity'].unique() #Pureza IF mais puro e I1 menos puro","2bde2fe3":"df['cut'].value_counts()","979a9927":"df['color'].value_counts()","fbc775eb":"df['clarity'].value_counts()","6d4c3573":"len(df[(df['x']==0) | (df['y']==0) | (df['z']==0)])","35b3a182":"df[\"volume\"] = df[\"x\"]*df[\"y\"]*df[\"z\"]","a2155625":"df.head()","9c2aa750":"columns_remove = ['Unnamed: 0','x','y','z']\ndf = df.drop(columns_remove, axis=1)","50755785":"df.head()","40086f3e":"lines, columns = df.shape\nprint('Linhas:', lines)\nprint('Colunas:', columns)","3d351579":"labels = df.color.unique().tolist()\nsizes = df.color.value_counts().tolist()\nexplode = (0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1)\nplt.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%', shadow=True, startangle=0)\nplt.axis('equal')\nplt.title(\"Tonalidade das cores do diamante\")\nplt.plot()\nfig=plt.gcf()\nfig.set_size_inches(6,6)\nplt.show()","25710783":"labels = df.cut.unique().tolist()\nsizes = df.cut.value_counts().tolist()\nexplode = (0.1, 0.1, 0.1, 0.1, 0.1) #tamanho do espa\u00e7amentos entre os dados\nplt.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%', shadow=True, startangle=0)\nplt.axis('equal')\nplt.title(\"Tipos de Lapida\u00e7\u00e3o (cut)\")\nplt.plot()\nfig=plt.gcf()\nfig.set_size_inches(6,6)\nplt.show()","14e2f402":"labels = df.clarity.unique().tolist()\nsizes = df.clarity.value_counts().tolist()\nexplode = (0.1, 0.1, 0.1, 0.1, 0.1,0.1,0.1,0.1)#tamanho do espa\u00e7amentos entre os dados\nplt.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%', shadow=True, startangle=0)\nplt.axis('equal')\nplt.title(\"Tipos de pureza (clarity)\")\nplt.plot()\nfig=plt.gcf()\nfig.set_size_inches(6,6)\nplt.show()","10508d6d":"plt.figure(figsize=(10,5))\nax = df['cut'].value_counts().plot.bar(title='Categoria Lapida\u00e7\u00e3o (cut) - Quantidade')\nplt.xlabel('Tipos de lapida\u00e7\u00e3o')\nplt.ylabel('Quantidade')\n\n","3745380d":"plt.figure(figsize=(10,5))\nax = df['clarity'].value_counts().plot.bar(title='Categoria Pureza (clarity) - Quantidade')\nplt.xlabel('Tipos de pureza')\nplt.ylabel('Quantidade')","c5fdfbb2":"plt.figure(figsize=(10,5))\ndf['color'].value_counts().plot.bar(title='Categoria tonalidade de cor (color) - Quantidade')\nplt.xlabel('Tipos de cor')\nplt.ylabel('Quantidade')","abaced06":"corr = df.corr(method='pearson') # extraindo a correla\u00e7\u00e3o dos dados\n\n# heatmap - gr\u00e1fico de calor\nplt.figure(figsize=(11,8))\nsns.heatmap(corr, annot=True, fmt='.2f', cmap='coolwarm')\nplt.show()\n# print(corr)","ed663e7a":"df.hist(figsize=(10,8))\nplt.tight_layout()\nplt.show()","9ff13ae9":"colunas_numericas = df.select_dtypes(include=np.number).columns.to_list()\ncolunas_categoricas = df.select_dtypes(exclude=np.number).columns.to_list()","da61f297":"print('Colunas Numericas:',colunas_numericas)\nprint('Colunas Categ\u00f3ricas:',colunas_categoricas)","d4cd93af":"from sklearn import preprocessing \nlabel_encoder = preprocessing.LabelEncoder() \n\ndf['cut'] = label_encoder.fit_transform(df['cut'])\ndf['color'] = label_encoder.fit_transform(df['color'])\ndf['clarity'] = label_encoder.fit_transform(df['clarity'])\ndf.head()","5e5ec6ba":"df.hist(figsize=(10,8))\nplt.tight_layout()\nplt.show()","a5a32b3f":"X = df.drop(['price'],1)\nY = df['price']","9192d7fb":"from sklearn.preprocessing import StandardScaler","79f16aab":"# normaliza\u00e7\u00e3o dos dados\nmin_max_scaler = StandardScaler()\nX = min_max_scaler.fit_transform(X)","70b6b267":"# treinamento, test_split\nfrom sklearn.model_selection import train_test_split","71ca341d":"X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=26)\nprint('Treinamento:', len(y_train))\nprint('Teste      :', len(y_test))","4d112aa7":"# m\u00e9tricas\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import r2_score","2e9a38fd":"from sklearn.neighbors import KNeighborsRegressor\n\nexperiment = {}","19ef411e":"model1 = KNeighborsRegressor(n_neighbors=3,metric='euclidean')\nmodel1.fit(X_train,y_train)","68950d3e":"y_pred = model1.predict(X_test)","cbf829d1":"r2 = r2_score(y_test,y_pred)\n\n# Mean Absolute Error (MAE)\nmae = mean_absolute_error(y_test,y_pred)\n\n# Mean Square Error (MSE)\nmse = mean_squared_error(y_test,y_pred, squared=True)\n\n# Root Mean Square Error (RMSE)\nrmse = mean_squared_error(y_test,y_pred, squared=False)","2091c85b":"experiment['KNN'] = {'R2':r2, 'MAE':mae, 'MSE':mse, 'RMSE':rmse}\n\nprint('R2  :',r2)\nprint('MAE :',mae)\nprint('MSE :',mse)\nprint('RMSE:',rmse)","febe0b18":"# regressor\nfrom sklearn.linear_model import LinearRegression\nmodel2 = LinearRegression()\nmodel2.fit(X_train, y_train)","7dc5877a":"y_pred = model2.predict(X_test)","0fd0d291":"r2 = r2_score(y_test,y_pred)\nmae = mean_absolute_error(y_test,y_pred)\nmse = mean_squared_error(y_test,y_pred, squared=True)\nrmse = mean_squared_error(y_test,y_pred, squared=False)\n\nexperiment['Linear Regression'] = {'R2':r2, 'MAE':mae, 'MSE':mse, 'RMSE':rmse}\n\nprint('R2  :',r2)\nprint('MAE :',mae)\nprint('MSE :',mse)\nprint('RMSE:',rmse)","b6415e59":"from sklearn.svm import SVR\nmodel3 = SVR()\nmodel3.fit(X_train, y_train)","88f3dada":"y_pred = model3.predict(X_test)","9e2736d0":"r2 = r2_score(y_test,y_pred)\nmae = mean_absolute_error(y_test,y_pred)\nmse = mean_squared_error(y_test,y_pred, squared=True)\nrmse = mean_squared_error(y_test,y_pred, squared=False)\n\nexperiment['SVM'] = {'R2':r2, 'MAE':mae, 'MSE':mse, 'RMSE':rmse}\n\nprint('R2  :',r2)\nprint('MAE :',mae)\nprint('MSE :',mse)\nprint('RMSE:',rmse)","612678b6":"from sklearn.tree import DecisionTreeRegressor","b4c1d03b":"model4 = DecisionTreeRegressor(random_state=26)\nmodel4.fit(X_train, y_train)","e031427f":"y_pred = model4.predict(X_test)","7215032f":"r2 = r2_score(y_test,y_pred)\nmae = mean_absolute_error(y_test,y_pred)\nmse = mean_squared_error(y_test,y_pred, squared=True)\nrmse = mean_squared_error(y_test,y_pred, squared=False)\n\nexperiment['Decision Tree'] = {'R2':r2, 'MAE':mae, 'MSE':mse, 'RMSE':rmse}\n\nprint('R2  :',r2)\nprint('MAE :',mae)\nprint('MSE :',mse)\nprint('RMSE:',rmse)","8dd61cd5":"# regressor\nfrom sklearn.ensemble import RandomForestRegressor","3a84bc2e":"model5 = RandomForestRegressor(n_estimators=100, random_state=26)\nmodel5.fit(X_train, y_train)","254a4d9e":"y_pred = model5.predict(X_test)","02fb7b26":"r2 = r2_score(y_test,y_pred)\nmae = mean_absolute_error(y_test,y_pred)\nmse = mean_squared_error(y_test,y_pred, squared=True)\nrmse = mean_squared_error(y_test,y_pred, squared=False)\n\nexperiment['Random Forest'] = {'R2':r2, 'MAE':mae, 'MSE':mse, 'RMSE':rmse}\n\nprint('R2  :',r2)\nprint('MAE :',mae)\nprint('MSE :',mse)\nprint('RMSE:',rmse)","ab0c27c4":"pd.DataFrame(experiment).T","5142b612":"**Histograma - Valor por atributo - inclusos os atributos color, clarity, cut**","cf0075e0":"Separando 80% para treinamento e 20% para teste","696a4012":"Removendo as colunas Unnamed:0, x, y, z","204967a9":"Quantidade de por cada tipo de tonalidade de cores (color)","19703f24":"Tipos de pureza (clarity)","7a24a503":"Nova leitura ap\u00f3s a remo\u00e7\u00e3o das colunas.","66820602":"# **Carregando Dados**","12636083":"Avalia\u00e7\u00e3o","b2f2f69f":"Quantidade de por cada tipo de pureza (clarity)","d786532a":"## Conjunto de Treinamento e Teste\n\nIremos separar os valores de `X` e `Y`, em seguida normalizar os valores de `X`, por fim, separar entre conjunto de dados de treinamento e teste.\n\n> A normaliza\u00e7\u00e3o se faz necess\u00e1ria, pois alguns algoritmos se beneficiam de valores normalizados.","18c0b06e":"<a id=\"dados\"><\/a>\n\n-----\n\n# Dados\n\nEsta se\u00e7\u00e3o re\u00fane um conjunto de c\u00f3digo para carregamento e pr\u00e9-processamento sobre os dados.\n\n[Voltar para o Topo](#top)\n","05f486ea":"Tipos de tonalidade de cores (color)","65813a82":"Realizando o c\u00e1lculo do volume, realizando a multiplica\u00e7\u00e3o entre comprimento (x), largura(y)  e profundidade (z)","5bed7b15":"Verificando se tem algum dado nulo.","1cfa7ce8":"Avalia\u00e7\u00e3o","e2ebb187":"k-NN obteve um R\u00b2 pr\u00f3ximo de 95%, ou seja, representou bem a fun\u00e7\u00e3o de pre\u00e7os.","65fd1122":"Avalia\u00e7\u00e3o","c99459b9":"Avalia\u00e7\u00e3o","6d623611":"Gr\u00e1fico de barras onde mostra a quantidade de tipos de pureza","24742da1":"<a id=\"arv_decisao\"><\/a>\n\n# **\u00c1rvore de Decis\u00e3o**\n\n[Voltar para o Topo](#top)","7106fda1":"# **Histograma - valor por atributo**","7897a1b9":"<a id=\"forest\"><\/a>\n\n# **Random Forest**\n\n\n[Voltar para o Topo](#top)","192362fa":"Transformando as colunas categ\u00f3ricas (cut, color e clarity) por num\u00e9ricas","e32be806":"Quantidade de por cada tipo de lapida\u00e7\u00e3o (cut)","de3b3236":"<a id=\"visual\"><\/a>\n\n-----\n\n# Visualiza\u00e7\u00e3o dos Dados\n\nConjunto de visualiza\u00e7\u00f5es dos dados.\n\n[Voltar para o Topo](#top)","f186b89d":"SVM foi inferior ao KNN e Regress\u00e3o linear o R\u00b2 foi de 47%","04323950":"Gr\u00e1fico de pizza - Porcentagem por tipo de Lapida\u00e7\u00e3o","44bdaa17":"Gr\u00e1fico de barras onde mostra a quantidade de tipos de lapida\u00e7\u00e3o","1529b256":"Regress\u00e3o Linear obteve um resultado inferior ao k-NN, com R\u00b2 de 87%.","0c4cead6":"# **Conte\u00fado**","799b9a72":"Tipos de lapida\u00e7\u00e3o (cut)","56b69290":"<a id=\"knn\"><\/a>\n\n# **k-NN** _(k-Nearest Neighbors)_\n\n[Voltar para o Topo](#top)","d50f4e38":"Exibindo os 5 primeiros registros","ad69c839":"# **Normaliza\u00e7\u00e3o dos dados**\n\nNormaliza\u00e7\u00e3o StandardScaler","27a38e90":"\u00c1rvore de Decis\u00e3o obteve um resultado similar \u00e0 KNN, com R\u00b2 de 96%.","fbffc69c":"**Descri\u00e7\u00e3o dos dados**\n\n* **Unnamed:0** - Id \u00fanico padr\u00e3o diamante *(remover)*\n* **carat** - Quilat - Peso do diamante em gramas\n* **cut** - Lapida\u00e7\u00e3o - a forma das facetas do diamante que interagem com a luz\n* **color** - Tonalidade da cor do diamante\n* **clarity** - Pureza do diamante\n* **depth** - Porcentagem de profundidade total\n* **table** - Largura do topo do diamante em rela\u00e7\u00e3o ao ponto mais largo\n* **price** - pre\u00e7o\n* **x** - Comprimento em mm\n* **y** - Largura em mm\n* **z** - Profundidade em mm","05589b17":"Resumo das estat\u00edsitcas","7af5fbe2":"Conjunto dos dados","5b8773c3":"<a id=\"top\"><\/a>\n\nO notebook est\u00e1 organizado como segue:\n\n- [Dados](#dados) - Carregamento dos dados, pr\u00e9-processamento.\n- [Visualiza\u00e7\u00e3o](#visual) - An\u00e1lise explorat\u00f3ria dos dados.\n\n- [Regress\u00e3o](#regressao) - Aplica\u00e7\u00e3o de algoritmos de Aprendizado de M\u00e1quina.\n    - [KNN Regressor](#knn) - Regress\u00e3o com k-NN.\n    - [Regress\u00e3o Linear](#reg_linear) - Regress\u00e3o com Regress\u00e3o Linear.\n    - [Support Vector Machines](#svm) - Regress\u00e3o com Support Vector Machines.\n    - [\u00c1rvore de Decis\u00e3o](#arv_decisao) - Regress\u00e3o com Decision Tree.\n    - [Random Forest](#forest) - Regress\u00e3o com Random Forest.\n    \n    \n* [Tabela Final](#tabela) - Tabela comparativa dos algoritmos.","bd84afd5":"<a id=\"svm\"><\/a>\n\n# **Support Vector Machines (SVM)**\n\n[Voltar para o Topo](#top)","e79e033d":"Avalia\u00e7\u00e3o","62d0b17b":"<a id=\"reg_linear\"><\/a>\n\n# **Regress\u00e3o Linear**\n\n[Voltar para o Topo](#top)","b31e1b77":"Categorias por coluna","11bf6b22":"Gr\u00e1fico de barras onde mostra a quantidade de tonalidade de cor","ec141007":"Random Forest obteve o melhor resultado at\u00e9 o momento, R\u00b2 de 98%.","d755c8e5":"## Sele\u00e7\u00e3o dos Dados\n\nNesta se\u00e7\u00e3o observamos os dados e iremos retirar alguns atributos que n\u00e3o servir\u00e3o para a a an\u00e1lise.","c418865f":"Informa\u00e7\u00f5es sobre os nomes das colunas, tipo de dados e n\u00famero de linhas por coluna","13b32a07":"A an\u00e1lise a seguir \u00e9 de um estudo de um conjunto de experimentos, de algoritmos de regress\u00e3o sobre o dataset [Diamonds](https:\/\/www.kaggle.com\/shivam2503\/diamonds). Um conjunto de dados que re\u00fane aproximandamente 54 mil diamantes com seus 11 atributos, tais como pre\u00e7o, os famosos 4 Cs: Carat (quilat), Clarity (pureza), Color (cores) e Cut (lapida\u00e7\u00e3o). Nosso objetivo \u00e9 predizer o valor de diamante baseado nas caracter\u00edsticas do diamante.\n\nIntegrantes:\nAnderson Jos\u00e9 Raimundo,\nAnselmo da Silva Macedo e\nJo\u00e3o Fabio Scur\u00e7oni\n","7f242ac7":"Correla\u00e7\u00e3o dos dados\nDataFrame.corr() calcula a correla\u00e7\u00e3o de pares de colunas. Por padr\u00e3o \u00e9 computado a Correla\u00e7\u00e3o de Pearson, seu coeficiente de correla\u00e7\u00e3o mede a rela\u00e7\u00e3o estat\u00edstica, ou associa\u00e7\u00e3o, entre duas vari\u00e1veis cont\u00ednuas.","ed6c3df7":"Gr\u00e1fico de pizza - Porcentagem por tipo de Pureza","9cb726d3":"Verificando a quantidade total do comprimento (x), largura(y)  e profundidade (z) com valor igual a 0.","6ecb725d":"Total de linhas e colunas.","4ece84cb":"Exibindo as primeiros 5 registros j\u00e1 com a nova coluna chamado volume.","3cf4f144":"<a id=\"tabela\"><\/a>\n\n-----\n\n\n# **Conclus\u00e3o**\n\nO melhor algoritmo apresentando foi a Random Forest com R\u00b2 de 98%.\nCom exce\u00e7\u00e3o do SVM cujo o R\u00b2 foi de 47% os outros algoritmos teve bons resultados.\n\n[Voltar para o Topo](#top)","7533cbc4":"Gr\u00e1fico de pizza - Porcentagem por tonalidade de cor","58516c21":"<a id=\"regressao\"><\/a>\n\n-----\n\n# Regress\u00e3o\n\nEsta se\u00e7\u00e3o re\u00fane um conjunto de experimentos. Cada subse\u00e7\u00e3o \u00e9 um algoritmo de Aprendizado de M\u00e1quina.\n\n\n[Voltar para o Topo](#top)"}}