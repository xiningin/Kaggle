{"cell_type":{"861be9fc":"code","79f59b8d":"code","e09bbc54":"code","7e1d1b4e":"code","a13cbc17":"code","78274af2":"code","a089a511":"code","867eeaf2":"code","3801a716":"code","bb4e385d":"code","3dbf90ba":"code","8ca70b43":"code","cc5aae2a":"code","b722b30d":"code","471f14b3":"code","0b571183":"code","e8b106d9":"code","06307c8c":"code","6dfd6f31":"code","4c323615":"code","b98df7c7":"code","d0246a05":"code","af57ace9":"code","914ca391":"code","1dde9d5f":"code","214c01be":"code","8b68fbff":"code","6ef1abfc":"code","16c47ef9":"code","94d131d5":"code","b08cfbc1":"code","ada2ab0e":"code","f17c1842":"code","9b532457":"code","a399ce27":"code","5eea7b05":"code","1f63156c":"code","806754f0":"code","1eb74309":"code","2f8e26ef":"code","69c8d7f8":"code","8c6a88b4":"code","189b3893":"code","395ea909":"code","1b5bd539":"code","75e08a19":"code","3de4042e":"code","af137d52":"code","141bdd0f":"code","20b874c6":"code","a17081ab":"code","548ee0fc":"code","baa81d64":"code","4119a349":"code","57dd8d5e":"code","e21ca109":"code","fe40ad6a":"markdown","1aad6b5a":"markdown","b2a6fa27":"markdown"},"source":{"861be9fc":"import numpy as np \nimport matplotlib.pyplot as plt \nimport matplotlib.colors as mcolors\nimport pandas as pd \nimport random\nimport math\nimport time\nfrom sklearn.linear_model import LinearRegression, BayesianRidge\nfrom sklearn.model_selection import RandomizedSearchCV, train_test_split\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.svm import SVR\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\nimport datetime\nimport operator \nplt.style.use('fivethirtyeight')\n%matplotlib inline\n\nfrom IPython.core.display import display, HTML\ndisplay(HTML(\"<style>.container { width:100% !important; }<\/style>\"))","79f59b8d":"confirmed_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_confirmed_global.csv')\ndeaths_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_deaths_global.csv')\nrecoveries_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_recovered_global.csv')\nlatest_data = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_daily_reports\/07-18-2020.csv')\nus_medical_data = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_daily_reports_us\/07-18-2020.csv')","e09bbc54":"cols = confirmed_df.keys()","7e1d1b4e":"confirmed = confirmed_df.loc[:, cols[4]:cols[-1]]\ndeaths = deaths_df.loc[:, cols[4]:cols[-1]]\nrecoveries = recoveries_df.loc[:, cols[4]:cols[-1]]","a13cbc17":"dates = confirmed.keys()\nworld_cases = []\ntotal_deaths = [] \nmortality_rate = []\nrecovery_rate = [] \ntotal_recovered = [] \ntotal_active = [] \n\nchina_cases = [] \nitaly_cases = []\nus_cases = [] \nspain_cases = [] \nfrance_cases = [] \ngermany_cases = [] \nuk_cases = [] \nrussia_cases = [] \nbrazil_cases = []\nindia_cases = []\nperu_cases = [] \n\nchina_deaths = [] \nitaly_deaths = []\nus_deaths = [] \nspain_deaths = [] \nfrance_deaths = [] \ngermany_deaths = [] \nuk_deaths = [] \nrussia_deaths = []\nbrazil_deaths = [] \nindia_deaths = []\nperu_deaths = []\n\nchina_recoveries = [] \nitaly_recoveries = []\nus_recoveries = [] \nspain_recoveries = [] \nfrance_recoveries = [] \ngermany_recoveries = [] \nuk_recoveries = [] \nrussia_recoveries = [] \nbrazil_recoveries = [] \nindia_recoveries = [] \nperu_recoveries = [] \n\nfor i in dates:\n    confirmed_sum = confirmed[i].sum()\n    death_sum = deaths[i].sum()\n    recovered_sum = recoveries[i].sum()\n    \n    # confirmed, deaths, recovered, and active\n    world_cases.append(confirmed_sum)\n    total_deaths.append(death_sum)\n    total_recovered.append(recovered_sum)\n    total_active.append(confirmed_sum-death_sum-recovered_sum)\n    \n    # calculate rates\n    mortality_rate.append(death_sum\/confirmed_sum)\n    recovery_rate.append(recovered_sum\/confirmed_sum)\n\n    # case studies \n    china_cases.append(confirmed_df[confirmed_df['Country\/Region']=='China'][i].sum())\n    italy_cases.append(confirmed_df[confirmed_df['Country\/Region']=='Italy'][i].sum())\n    us_cases.append(confirmed_df[confirmed_df['Country\/Region']=='US'][i].sum())\n    spain_cases.append(confirmed_df[confirmed_df['Country\/Region']=='Spain'][i].sum())\n    france_cases.append(confirmed_df[confirmed_df['Country\/Region']=='France'][i].sum())\n    germany_cases.append(confirmed_df[confirmed_df['Country\/Region']=='Germany'][i].sum())\n    uk_cases.append(confirmed_df[confirmed_df['Country\/Region']=='United Kingdom'][i].sum())\n    russia_cases.append(confirmed_df[confirmed_df['Country\/Region']=='Russia'][i].sum())\n    brazil_cases.append(confirmed_df[confirmed_df['Country\/Region']=='Brazil'][i].sum())\n    india_cases.append(confirmed_df[confirmed_df['Country\/Region']=='India'][i].sum())\n    peru_cases.append(confirmed_df[confirmed_df['Country\/Region']=='Peru'][i].sum())\n    \n    \n    china_deaths.append(deaths_df[deaths_df['Country\/Region']=='China'][i].sum())\n    italy_deaths.append(deaths_df[deaths_df['Country\/Region']=='Italy'][i].sum())\n    us_deaths.append(deaths_df[deaths_df['Country\/Region']=='US'][i].sum())\n    spain_deaths.append(deaths_df[deaths_df['Country\/Region']=='Spain'][i].sum())\n    france_deaths.append(deaths_df[deaths_df['Country\/Region']=='France'][i].sum())\n    germany_deaths.append(deaths_df[deaths_df['Country\/Region']=='Germany'][i].sum())\n    uk_deaths.append(deaths_df[deaths_df['Country\/Region']=='United Kingdom'][i].sum())\n    russia_deaths.append(deaths_df[deaths_df['Country\/Region']=='Russia'][i].sum())\n    brazil_deaths.append(deaths_df[deaths_df['Country\/Region']=='Brazil'][i].sum())\n    india_deaths.append(deaths_df[deaths_df['Country\/Region']=='India'][i].sum())\n    peru_deaths.append(deaths_df[deaths_df['Country\/Region']=='Peru'][i].sum())\n    \n    china_recoveries.append(recoveries_df[recoveries_df['Country\/Region']=='China'][i].sum())\n    italy_recoveries.append(recoveries_df[recoveries_df['Country\/Region']=='Italy'][i].sum())\n    us_recoveries.append(recoveries_df[recoveries_df['Country\/Region']=='US'][i].sum())\n    spain_recoveries.append(recoveries_df[recoveries_df['Country\/Region']=='Spain'][i].sum())\n    france_recoveries.append(recoveries_df[recoveries_df['Country\/Region']=='France'][i].sum())\n    germany_recoveries.append(recoveries_df[recoveries_df['Country\/Region']=='Germany'][i].sum())\n    uk_recoveries.append(recoveries_df[recoveries_df['Country\/Region']=='United Kingdom'][i].sum())\n    russia_recoveries.append(recoveries_df[recoveries_df['Country\/Region']=='Russia'][i].sum())\n    brazil_recoveries.append(recoveries_df[recoveries_df['Country\/Region']=='Brazil'][i].sum())\n    india_recoveries.append(recoveries_df[recoveries_df['Country\/Region']=='India'][i].sum())\n    peru_recoveries.append(recoveries_df[recoveries_df['Country\/Region']=='Peru'][i].sum())","78274af2":"dates = confirmed.keys()\nworld_cases = []\ntotal_deaths = [] \nmortality_rate = []\nrecovery_rate = [] \ntotal_recovered = [] \ntotal_active = [] \n\nchina_cases = [] \nitaly_cases = []\nus_cases = [] \nspain_cases = [] \nfrance_cases = [] \ngermany_cases = [] \nuk_cases = [] \nrussia_cases = [] \nbrazil_cases = []\nindia_cases = []\nperu_cases = [] \n\nchina_deaths = [] \nitaly_deaths = []\nus_deaths = [] \nspain_deaths = [] \nfrance_deaths = [] \ngermany_deaths = [] \nuk_deaths = [] \nrussia_deaths = []\nbrazil_deaths = [] \nindia_deaths = []\nperu_deaths = []\n\nchina_recoveries = [] \nitaly_recoveries = []\nus_recoveries = [] \nspain_recoveries = [] \nfrance_recoveries = [] \ngermany_recoveries = [] \nuk_recoveries = [] \nrussia_recoveries = [] \nbrazil_recoveries = [] \nindia_recoveries = [] \nperu_recoveries = [] \n\nfor i in dates:\n    confirmed_sum = confirmed[i].sum()\n    death_sum = deaths[i].sum()\n    recovered_sum = recoveries[i].sum()\n    \n    # confirmed, deaths, recovered, and active\n    world_cases.append(confirmed_sum)\n    total_deaths.append(death_sum)\n    total_recovered.append(recovered_sum)\n    total_active.append(confirmed_sum-death_sum-recovered_sum)\n    \n    # calculate rates\n    mortality_rate.append(death_sum\/confirmed_sum)\n    recovery_rate.append(recovered_sum\/confirmed_sum)\n\n    # case studies \n    china_cases.append(confirmed_df[confirmed_df['Country\/Region']=='China'][i].sum())\n    italy_cases.append(confirmed_df[confirmed_df['Country\/Region']=='Italy'][i].sum())\n    us_cases.append(confirmed_df[confirmed_df['Country\/Region']=='US'][i].sum())\n    spain_cases.append(confirmed_df[confirmed_df['Country\/Region']=='Spain'][i].sum())\n    france_cases.append(confirmed_df[confirmed_df['Country\/Region']=='France'][i].sum())\n    germany_cases.append(confirmed_df[confirmed_df['Country\/Region']=='Germany'][i].sum())\n    uk_cases.append(confirmed_df[confirmed_df['Country\/Region']=='United Kingdom'][i].sum())\n    russia_cases.append(confirmed_df[confirmed_df['Country\/Region']=='Russia'][i].sum())\n    brazil_cases.append(confirmed_df[confirmed_df['Country\/Region']=='Brazil'][i].sum())\n    india_cases.append(confirmed_df[confirmed_df['Country\/Region']=='India'][i].sum())\n    peru_cases.append(confirmed_df[confirmed_df['Country\/Region']=='Peru'][i].sum())\n    \n    \n    china_deaths.append(deaths_df[deaths_df['Country\/Region']=='China'][i].sum())\n    italy_deaths.append(deaths_df[deaths_df['Country\/Region']=='Italy'][i].sum())\n    us_deaths.append(deaths_df[deaths_df['Country\/Region']=='US'][i].sum())\n    spain_deaths.append(deaths_df[deaths_df['Country\/Region']=='Spain'][i].sum())\n    france_deaths.append(deaths_df[deaths_df['Country\/Region']=='France'][i].sum())\n    germany_deaths.append(deaths_df[deaths_df['Country\/Region']=='Germany'][i].sum())\n    uk_deaths.append(deaths_df[deaths_df['Country\/Region']=='United Kingdom'][i].sum())\n    russia_deaths.append(deaths_df[deaths_df['Country\/Region']=='Russia'][i].sum())\n    brazil_deaths.append(deaths_df[deaths_df['Country\/Region']=='Brazil'][i].sum())\n    india_deaths.append(deaths_df[deaths_df['Country\/Region']=='India'][i].sum())\n    peru_deaths.append(deaths_df[deaths_df['Country\/Region']=='Peru'][i].sum())\n    \n    china_recoveries.append(recoveries_df[recoveries_df['Country\/Region']=='China'][i].sum())\n    italy_recoveries.append(recoveries_df[recoveries_df['Country\/Region']=='Italy'][i].sum())\n    us_recoveries.append(recoveries_df[recoveries_df['Country\/Region']=='US'][i].sum())\n    spain_recoveries.append(recoveries_df[recoveries_df['Country\/Region']=='Spain'][i].sum())\n    france_recoveries.append(recoveries_df[recoveries_df['Country\/Region']=='France'][i].sum())\n    germany_recoveries.append(recoveries_df[recoveries_df['Country\/Region']=='Germany'][i].sum())\n    uk_recoveries.append(recoveries_df[recoveries_df['Country\/Region']=='United Kingdom'][i].sum())\n    russia_recoveries.append(recoveries_df[recoveries_df['Country\/Region']=='Russia'][i].sum())\n    brazil_recoveries.append(recoveries_df[recoveries_df['Country\/Region']=='Brazil'][i].sum())\n    india_recoveries.append(recoveries_df[recoveries_df['Country\/Region']=='India'][i].sum())\n    peru_recoveries.append(recoveries_df[recoveries_df['Country\/Region']=='Peru'][i].sum())","a089a511":"days_since_1_22 = np.array([i for i in range(len(dates))]).reshape(-1, 1)\nworld_cases = np.array(world_cases).reshape(-1, 1)\ntotal_deaths = np.array(total_deaths).reshape(-1, 1)\ntotal_recovered = np.array(total_recovered).reshape(-1, 1)","867eeaf2":"days_in_future = 10\nfuture_forcast = np.array([i for i in range(len(dates)+days_in_future)]).reshape(-1, 1)\nadjusted_dates = future_forcast[:-10]","3801a716":"start = '1\/22\/2020'\nstart_date = datetime.datetime.strptime(start, '%m\/%d\/%Y')\nfuture_forcast_dates = []\nfor i in range(len(future_forcast)):\n    future_forcast_dates.append((start_date + datetime.timedelta(days=i)).strftime('%m\/%d\/%Y'))","bb4e385d":"X_train_confirmed00X, X_test_confirmed00X, y_train_confirmed00X, y_test_confirmed00X = train_test_split(days_since_1_22[10:], world_cases[10:], test_size=0.12, shuffle=False)\n# svm_confirmed = svm_search.best_estimator_\nsvm_confirmed00X = SVR(shrinking=True, kernel='poly',gamma=0.01, epsilon=1,degree=3, C=0.1)\nsvm_confirmed00X.fit(X_train_confirmed00X, y_train_confirmed00X)\nsvm_pred00X = svm_confirmed00X.predict(future_forcast)\n\n# check against testing data\nsvm_test_pred00X = svm_confirmed00X.predict(X_test_confirmed00X)\nprint('MAE:', mean_absolute_error(svm_test_pred00X, y_test_confirmed00X))\nprint('MSE:',mean_squared_error(svm_test_pred00X, y_test_confirmed00X))\n\n# transform our data for polynomial regression\npoly = PolynomialFeatures(degree=5)\npoly_X_train_confirmed00X = poly.fit_transform(X_train_confirmed00X)\npoly_X_test_confirmed00X = poly.fit_transform(X_test_confirmed00X)\npoly_future_forcast = poly.fit_transform(future_forcast)\n\nbayesian_poly00X = PolynomialFeatures(degree=4)\nbayesian_poly_X_train_confirmed00X = bayesian_poly00X.fit_transform(X_train_confirmed00X)\nbayesian_poly_X_test_confirmed00X = bayesian_poly00X.fit_transform(X_test_confirmed00X)\nbayesian_poly_future_forcast00X = bayesian_poly00X.fit_transform(future_forcast)\n\n# polynomial regression\nlinear_model00X = LinearRegression(normalize=True, fit_intercept=False)\nlinear_model00X.fit(poly_X_train_confirmed00X, y_train_confirmed00X)\ntest_linear_pred00X = linear_model00X.predict(poly_X_test_confirmed00X)\nlinear_pred00X = linear_model00X.predict(poly_future_forcast)\nprint('MAE:', mean_absolute_error(test_linear_pred00X, y_test_confirmed00X))\nprint('MSE:',mean_squared_error(test_linear_pred00X, y_test_confirmed00X))\n\nprint(linear_model00X.coef_)\n\n\n# bayesian ridge polynomial regression\ntol = [1e-6, 1e-5, 1e-4, 1e-3, 1e-2]\nalpha_1 = [1e-7, 1e-6, 1e-5, 1e-4, 1e-3]\nalpha_2 = [1e-7, 1e-6, 1e-5, 1e-4, 1e-3]\nlambda_1 = [1e-7, 1e-6, 1e-5, 1e-4, 1e-3]\nlambda_2 = [1e-7, 1e-6, 1e-5, 1e-4, 1e-3]\nnormalize = [True, False]\n\nbayesian_grid00X = {'tol': tol, 'alpha_1': alpha_1, 'alpha_2' : alpha_2, 'lambda_1': lambda_1, 'lambda_2' : lambda_2, \n                 'normalize' : normalize}\n\nbayesian00X = BayesianRidge(fit_intercept=False)\nbayesian_search00X = RandomizedSearchCV(bayesian00X, bayesian_grid00X, scoring='neg_mean_squared_error', cv=3, return_train_score=True, n_jobs=-1, n_iter=40, verbose=1)\nbayesian_search00X.fit(bayesian_poly_X_train_confirmed00X, y_train_confirmed00X)\n\nbayesian_search00X.best_params_\n\nbayesian_confirmed = bayesian_search00X.best_estimator_\ntest_bayesian_pred00X = bayesian_confirmed.predict(bayesian_poly_X_test_confirmed00X)\nbayesian_pred00X = bayesian_confirmed.predict(bayesian_poly_future_forcast00X)\nprint('MAE:', mean_absolute_error(test_bayesian_pred00X, y_test_confirmed00X))\nprint('MSE:',mean_squared_error(test_bayesian_pred00X, y_test_confirmed00X))","3dbf90ba":"#10 Confirmed\n%matplotlib inline\nplt.style.use('seaborn-darkgrid')\nplt.figure(figsize=(20, 12))\nplt.plot(adjusted_dates, world_cases, linestyle='solid', color='black')\nplt.plot(future_forcast, svm_pred00X, linestyle='dotted', color='purple')\nplt.plot(future_forcast, linear_pred00X, linestyle='dotted', color='orange')\nplt.plot(future_forcast, bayesian_pred00X, linestyle='dotted', color='green')\nplt.title('# of Coronavirus Cases Over Time', size=30)\nplt.xlabel('Days Since 1\/22\/2020', size=30)\nplt.ylabel('# of Cases', size=30)\nplt.legend(['Confirmed Cases', 'SVM predictions', 'Polynomial Regression Predictions', 'Bayesian Ridge Regression Predictions'])\nplt.xticks(size=20)\nplt.show()","8ca70b43":"X_train_confirmed00XX, X_test_confirmed00XX, y_train_confirmed00XX, y_test_confirmed00XX = train_test_split(days_since_1_22[20:], world_cases[20:], test_size=0.12, shuffle=False)\n# svm_confirmed = svm_search.best_estimator_\nsvm_confirmed00XX = SVR(shrinking=True, kernel='poly',gamma=0.01, epsilon=1,degree=3, C=0.1)\nsvm_confirmed00XX.fit(X_train_confirmed00XX, y_train_confirmed00XX)\nsvm_pred00XX = svm_confirmed00XX.predict(future_forcast)\n\n# check against testing data\nsvm_test_pred00XX = svm_confirmed00XX.predict(X_test_confirmed00XX)\nprint('MAE:', mean_absolute_error(svm_test_pred00XX, y_test_confirmed00XX))\nprint('MSE:',mean_squared_error(svm_test_pred00XX, y_test_confirmed00XX))\n\n# transform our data for polynomial regression\npoly = PolynomialFeatures(degree=5)\npoly_X_train_confirmed00XX = poly.fit_transform(X_train_confirmed00XX)\npoly_X_test_confirmed00XX = poly.fit_transform(X_test_confirmed00XX)\npoly_future_forcast = poly.fit_transform(future_forcast)\n\nbayesian_poly00XX = PolynomialFeatures(degree=4)\nbayesian_poly_X_train_confirmed00XX = bayesian_poly00XX.fit_transform(X_train_confirmed00XX)\nbayesian_poly_X_test_confirmed00XX = bayesian_poly00XX.fit_transform(X_test_confirmed00XX)\nbayesian_poly_future_forcast00XX = bayesian_poly00XX.fit_transform(future_forcast)\n\n# polynomial regression\nlinear_model00XX = LinearRegression(normalize=True, fit_intercept=False)\nlinear_model00XX.fit(poly_X_train_confirmed00XX, y_train_confirmed00XX)\ntest_linear_pred00XX = linear_model00X.predict(poly_X_test_confirmed00XX)\nlinear_pred00XX = linear_model00X.predict(poly_future_forcast)\nprint('MAE:', mean_absolute_error(test_linear_pred00XX, y_test_confirmed00XX))\nprint('MSE:',mean_squared_error(test_linear_pred00XX, y_test_confirmed00XX))\n\nprint(linear_model00XX.coef_)\n\n\n# bayesian ridge polynomial regression\ntol = [1e-6, 1e-5, 1e-4, 1e-3, 1e-2]\nalpha_1 = [1e-7, 1e-6, 1e-5, 1e-4, 1e-3]\nalpha_2 = [1e-7, 1e-6, 1e-5, 1e-4, 1e-3]\nlambda_1 = [1e-7, 1e-6, 1e-5, 1e-4, 1e-3]\nlambda_2 = [1e-7, 1e-6, 1e-5, 1e-4, 1e-3]\nnormalize = [True, False]\n\nbayesian_grid00XX = {'tol': tol, 'alpha_1': alpha_1, 'alpha_2' : alpha_2, 'lambda_1': lambda_1, 'lambda_2' : lambda_2, \n                 'normalize' : normalize}\n\nbayesian00XX = BayesianRidge(fit_intercept=False)\nbayesian_search00XX = RandomizedSearchCV(bayesian00XX, bayesian_grid00XX, scoring='neg_mean_squared_error', cv=3, return_train_score=True, n_jobs=-1, n_iter=40, verbose=1)\nbayesian_search00XX.fit(bayesian_poly_X_train_confirmed00XX, y_train_confirmed00XX)\n\nbayesian_search00XX.best_params_\n\nbayesian_confirmed = bayesian_search00XX.best_estimator_\ntest_bayesian_pred00XX = bayesian_confirmed.predict(bayesian_poly_X_test_confirmed00XX)\nbayesian_pred00XX = bayesian_confirmed.predict(bayesian_poly_future_forcast00XX)\nprint('MAE:', mean_absolute_error(test_bayesian_pred00XX, y_test_confirmed00XX))\nprint('MSE:',mean_squared_error(test_bayesian_pred00XX, y_test_confirmed00XX))","cc5aae2a":"#20 confirmed\n%matplotlib inline\nplt.style.use('seaborn-darkgrid')\nplt.figure(figsize=(20, 12))\nplt.plot(adjusted_dates, world_cases, linestyle='solid', color='black')\nplt.plot(future_forcast, svm_pred00XX, linestyle='dotted', color='purple')\nplt.plot(future_forcast, linear_pred00XX, linestyle='dotted', color='orange')\nplt.plot(future_forcast, bayesian_pred00XX, linestyle='dotted', color='green')\nplt.title('# of Coronavirus Cases Over Time', size=30)\nplt.xlabel('Days Since 1\/22\/2020', size=30)\nplt.ylabel('# of Cases', size=30)\nplt.legend(['Confirmed Cases', 'SVM predictions', 'Polynomial Regression Predictions', 'Bayesian Ridge Regression Predictions'])\nplt.xticks(size=20)\nplt.show()","b722b30d":"X_train_confirmed00XXX, X_test_confirmed00XXX, y_train_confirmed00XXX, y_test_confirmed00XXX = train_test_split(days_since_1_22[30:], world_cases[30:], test_size=0.12, shuffle=False)\n# svm_confirmed = svm_search.best_estimator_\nsvm_confirmed00XXX = SVR(shrinking=True, kernel='poly',gamma=0.01, epsilon=1,degree=3, C=0.1)\nsvm_confirmed00XXX.fit(X_train_confirmed00XXX, y_train_confirmed00XXX)\nsvm_pred00XXX = svm_confirmed00XXX.predict(future_forcast)\n\n# check against testing data\nsvm_test_pred00XXX = svm_confirmed00XXX.predict(X_test_confirmed00XXX)\nprint('MAE:', mean_absolute_error(svm_test_pred00XXX, y_test_confirmed00XXX))\nprint('MSE:',mean_squared_error(svm_test_pred00XXX, y_test_confirmed00XXX))\n\n# transform our data for polynomial regression\npoly = PolynomialFeatures(degree=5)\npoly_X_train_confirmed00XXX = poly.fit_transform(X_train_confirmed00XXX)\npoly_X_test_confirmed00XXX = poly.fit_transform(X_test_confirmed00XXX)\npoly_future_forcast = poly.fit_transform(future_forcast)\n\nbayesian_poly00XXX = PolynomialFeatures(degree=4)\nbayesian_poly_X_train_confirmed00XXX = bayesian_poly00XXX.fit_transform(X_train_confirmed00XXX)\nbayesian_poly_X_test_confirmed00XXX = bayesian_poly00XXX.fit_transform(X_test_confirmed00XXX)\nbayesian_poly_future_forcast00XXX = bayesian_poly00XXX.fit_transform(future_forcast)\n\n# polynomial regression\nlinear_model00XXX = LinearRegression(normalize=True, fit_intercept=False)\nlinear_model00XXX.fit(poly_X_train_confirmed00XXX, y_train_confirmed00XXX)\ntest_linear_pred00XXX = linear_model00X.predict(poly_X_test_confirmed00XXX)\nlinear_pred00XXX = linear_model00XXX.predict(poly_future_forcast)\nprint('MAE:', mean_absolute_error(test_linear_pred00XXX, y_test_confirmed00XXX))\nprint('MSE:',mean_squared_error(test_linear_pred00XXX, y_test_confirmed00XXX))\n\nprint(linear_model00XXX.coef_)\n\n\n# bayesian ridge polynomial regression\ntol = [1e-6, 1e-5, 1e-4, 1e-3, 1e-2]\nalpha_1 = [1e-7, 1e-6, 1e-5, 1e-4, 1e-3]\nalpha_2 = [1e-7, 1e-6, 1e-5, 1e-4, 1e-3]\nlambda_1 = [1e-7, 1e-6, 1e-5, 1e-4, 1e-3]\nlambda_2 = [1e-7, 1e-6, 1e-5, 1e-4, 1e-3]\nnormalize = [True, False]\n\nbayesian_grid00XXX = {'tol': tol, 'alpha_1': alpha_1, 'alpha_2' : alpha_2, 'lambda_1': lambda_1, 'lambda_2' : lambda_2, \n                 'normalize' : normalize}\n\nbayesian00XXX = BayesianRidge(fit_intercept=False)\nbayesian_search00XXX = RandomizedSearchCV(bayesian00XXX, bayesian_grid00XXX, scoring='neg_mean_squared_error', cv=3, return_train_score=True, n_jobs=-1, n_iter=40, verbose=1)\nbayesian_search00XXX.fit(bayesian_poly_X_train_confirmed00XXX, y_train_confirmed00XXX)\n\nbayesian_search00XXX.best_params_\n\nbayesian_confirmed = bayesian_search00XXX.best_estimator_\ntest_bayesian_pred00XXX = bayesian_confirmed.predict(bayesian_poly_X_test_confirmed00XXX)\nbayesian_pred00XXX = bayesian_confirmed.predict(bayesian_poly_future_forcast00XXX)\nprint('MAE:', mean_absolute_error(test_bayesian_pred00XXX, y_test_confirmed00XXX))\nprint('MSE:',mean_squared_error(test_bayesian_pred00XXX, y_test_confirmed00XXX))","471f14b3":"#30 confirmed\n%matplotlib inline\nplt.style.use('seaborn-darkgrid')\nplt.figure(figsize=(20, 12))\nplt.plot(adjusted_dates, world_cases, linestyle='solid', color='black')\nplt.plot(future_forcast, svm_pred00XXX, linestyle='dotted', color='purple')\nplt.plot(future_forcast, linear_pred00XXX, linestyle='dotted', color='orange')\nplt.plot(future_forcast, bayesian_pred00XXX, linestyle='dotted', color='green')\nplt.title('# of Coronavirus Cases Over Time', size=30)\nplt.xlabel('Days Since 1\/22\/2020', size=30)\nplt.ylabel('# of Cases', size=30)\nplt.legend(['Confirmed Cases', 'SVM predictions', 'Polynomial Regression Predictions', 'Bayesian Ridge Regression Predictions'])\nplt.xticks(size=20)\nplt.show()","0b571183":"X_train_confirmed00LX, X_test_confirmed00LX, y_train_confirmed00LX, y_test_confirmed00LX = train_test_split(days_since_1_22[40:], world_cases[40:], test_size=0.12, shuffle=False)\n# svm_confirmed = svm_search.best_estimator_\nsvm_confirmed00LX = SVR(shrinking=True, kernel='poly',gamma=0.01, epsilon=1,degree=3, C=0.1)\nsvm_confirmed00LX.fit(X_train_confirmed00LX, y_train_confirmed00LX)\nsvm_pred00LX = svm_confirmed00LX.predict(future_forcast)\n\n# check against testing data\nsvm_test_pred00LX = svm_confirmed00LX.predict(X_test_confirmed00LX)\nprint('MAE:', mean_absolute_error(svm_test_pred00LX, y_test_confirmed00LX))\nprint('MSE:',mean_squared_error(svm_test_pred00LX, y_test_confirmed00LX))\n\n# transform our data for polynomial regression\npoly = PolynomialFeatures(degree=5)\npoly_X_train_confirmed00LX = poly.fit_transform(X_train_confirmed00LX)\npoly_X_test_confirmed00LX = poly.fit_transform(X_test_confirmed00LX)\npoly_future_forcast = poly.fit_transform(future_forcast)\n\nbayesian_poly00LX = PolynomialFeatures(degree=4)\nbayesian_poly_X_train_confirmed00LX = bayesian_poly00LX.fit_transform(X_train_confirmed00LX)\nbayesian_poly_X_test_confirmed00LX = bayesian_poly00LX.fit_transform(X_test_confirmed00LX)\nbayesian_poly_future_forcast00LX = bayesian_poly00LX.fit_transform(future_forcast)\n\n# polynomial regression\nlinear_model00LX = LinearRegression(normalize=True, fit_intercept=False)\nlinear_model00LX.fit(poly_X_train_confirmed00LX, y_train_confirmed00LX)\ntest_linear_pred00LX = linear_model00LX.predict(poly_X_test_confirmed00LX)\nlinear_pred00LX = linear_model00LX.predict(poly_future_forcast)\nprint('MAE:', mean_absolute_error(test_linear_pred00LX, y_test_confirmed00LX))\nprint('MSE:',mean_squared_error(test_linear_pred00LX, y_test_confirmed00LX))\n\nprint(linear_model00LX.coef_)\n\n\n# bayesian ridge polynomial regression\ntol = [1e-6, 1e-5, 1e-4, 1e-3, 1e-2]\nalpha_1 = [1e-7, 1e-6, 1e-5, 1e-4, 1e-3]\nalpha_2 = [1e-7, 1e-6, 1e-5, 1e-4, 1e-3]\nlambda_1 = [1e-7, 1e-6, 1e-5, 1e-4, 1e-3]\nlambda_2 = [1e-7, 1e-6, 1e-5, 1e-4, 1e-3]\nnormalize = [True, False]\n\nbayesian_grid00LX = {'tol': tol, 'alpha_1': alpha_1, 'alpha_2' : alpha_2, 'lambda_1': lambda_1, 'lambda_2' : lambda_2, \n                 'normalize' : normalize}\n\nbayesian00LX = BayesianRidge(fit_intercept=False)\nbayesian_search00LX = RandomizedSearchCV(bayesian00LX, bayesian_grid00LX, scoring='neg_mean_squared_error', cv=3, return_train_score=True, n_jobs=-1, n_iter=40, verbose=1)\nbayesian_search00LX.fit(bayesian_poly_X_train_confirmed00LX, y_train_confirmed00LX)\n\nbayesian_search00LX.best_params_\n\nbayesian_confirmed = bayesian_search00LX.best_estimator_\ntest_bayesian_pred00LX = bayesian_confirmed.predict(bayesian_poly_X_test_confirmed00LX)\nbayesian_pred00LX = bayesian_confirmed.predict(bayesian_poly_future_forcast00LX)\nprint('MAE:', mean_absolute_error(test_bayesian_pred00LX, y_test_confirmed00LX))\nprint('MSE:',mean_squared_error(test_bayesian_pred00LX, y_test_confirmed00LX))","e8b106d9":"#40 confirmed\n%matplotlib inline\nplt.style.use('seaborn-darkgrid')\nplt.figure(figsize=(20, 12))\nplt.plot(adjusted_dates, world_cases, linestyle='solid', color='black')\nplt.plot(future_forcast, svm_pred00LX, linestyle='dotted', color='purple')\nplt.plot(future_forcast, linear_pred00LX, linestyle='dotted', color='orange')\nplt.plot(future_forcast, bayesian_pred00LX, linestyle='dotted', color='green')\nplt.title('# of Coronavirus Cases Over Time', size=30)\nplt.xlabel('Days Since 1\/22\/2020', size=30)\nplt.ylabel('# of Cases', size=30)\nplt.legend(['Confirmed Cases', 'SVM predictions', 'Polynomial Regression Predictions', 'Bayesian Ridge Regression Predictions'])\nplt.xticks(size=20)\nplt.show()","06307c8c":"X_train_confirmed00L, X_test_confirmed00L, y_train_confirmed00L, y_test_confirmed00L = train_test_split(days_since_1_22[50:], world_cases[50:], test_size=0.12, shuffle=False)\n# svm_confirmed = svm_search.best_estimator_\nsvm_confirmed00L = SVR(shrinking=True, kernel='poly',gamma=0.01, epsilon=1,degree=3, C=0.1)\nsvm_confirmed00L.fit(X_train_confirmed00L, y_train_confirmed00L)\nsvm_pred00L = svm_confirmed00L.predict(future_forcast)\n\n# check against testing data\nsvm_test_pred00L = svm_confirmed00L.predict(X_test_confirmed00L)\nprint('MAE:', mean_absolute_error(svm_test_pred00L, y_test_confirmed00L))\nprint('MSE:',mean_squared_error(svm_test_pred00L, y_test_confirmed00L))\n\n# transform our data for polynomial regression\npoly = PolynomialFeatures(degree=5)\npoly_X_train_confirmed00L = poly.fit_transform(X_train_confirmed00L)\npoly_X_test_confirmed00L = poly.fit_transform(X_test_confirmed00L)\npoly_future_forcast = poly.fit_transform(future_forcast)\n\nbayesian_poly00L = PolynomialFeatures(degree=4)\nbayesian_poly_X_train_confirmed00L = bayesian_poly00L.fit_transform(X_train_confirmed00L)\nbayesian_poly_X_test_confirmed00L = bayesian_poly00L.fit_transform(X_test_confirmed00L)\nbayesian_poly_future_forcast00L = bayesian_poly00L.fit_transform(future_forcast)\n\n# polynomial regression\nlinear_model00L = LinearRegression(normalize=True, fit_intercept=False)\nlinear_model00L.fit(poly_X_train_confirmed00L, y_train_confirmed00L)\ntest_linear_pred00L = linear_model00L.predict(poly_X_test_confirmed00L)\nlinear_pred00L = linear_model00L.predict(poly_future_forcast)\nprint('MAE:', mean_absolute_error(test_linear_pred00L, y_test_confirmed00L))\nprint('MSE:',mean_squared_error(test_linear_pred00L, y_test_confirmed00L))\n\nprint(linear_model00L.coef_)\n\n\n# bayesian ridge polynomial regression\ntol = [1e-6, 1e-5, 1e-4, 1e-3, 1e-2]\nalpha_1 = [1e-7, 1e-6, 1e-5, 1e-4, 1e-3]\nalpha_2 = [1e-7, 1e-6, 1e-5, 1e-4, 1e-3]\nlambda_1 = [1e-7, 1e-6, 1e-5, 1e-4, 1e-3]\nlambda_2 = [1e-7, 1e-6, 1e-5, 1e-4, 1e-3]\nnormalize = [True, False]\n\nbayesian_grid00L = {'tol': tol, 'alpha_1': alpha_1, 'alpha_2' : alpha_2, 'lambda_1': lambda_1, 'lambda_2' : lambda_2, \n                 'normalize' : normalize}\n\nbayesian00L = BayesianRidge(fit_intercept=False)\nbayesian_search00L = RandomizedSearchCV(bayesian00L, bayesian_grid00L, scoring='neg_mean_squared_error', cv=3, return_train_score=True, n_jobs=-1, n_iter=40, verbose=1)\nbayesian_search00L.fit(bayesian_poly_X_train_confirmed00L, y_train_confirmed00L)\n\nbayesian_search00L.best_params_\n\nbayesian_confirmed = bayesian_search00L.best_estimator_\ntest_bayesian_pred00L = bayesian_confirmed.predict(bayesian_poly_X_test_confirmed00L)\nbayesian_pred00L = bayesian_confirmed.predict(bayesian_poly_future_forcast00L)\nprint('MAE:', mean_absolute_error(test_bayesian_pred00L, y_test_confirmed00L))\nprint('MSE:',mean_squared_error(test_bayesian_pred00L, y_test_confirmed00L))","6dfd6f31":"#50 confirmed\n%matplotlib inline\nplt.style.use('seaborn-darkgrid')\nplt.figure(figsize=(20, 12))\nplt.plot(adjusted_dates, world_cases, linestyle='solid', color='black')\nplt.plot(future_forcast, svm_pred00L, linestyle='dotted', color='purple')\nplt.plot(future_forcast, linear_pred00L, linestyle='dotted', color='orange')\nplt.plot(future_forcast, bayesian_pred00L, linestyle='dotted', color='green')\nplt.title('# of Coronavirus Cases Over Time', size=30)\nplt.xlabel('Days Since 1\/22\/2020', size=30)\nplt.ylabel('# of Cases', size=30)\nplt.legend(['Confirmed Cases', 'SVM predictions', 'Polynomial Regression Predictions', 'Bayesian Ridge Regression Predictions'])\nplt.xticks(size=20)\nplt.show()","4c323615":"# Future predictions using SVM \nsvm_pred00X_Confirmed_sub = pd.DataFrame({'Date': future_forcast_dates[:-1], 'SVM Predicted # of Confirmed Cases Worldwide (Input 10)': np.round(svm_pred00X[:-1])})\nsvm_pred00X_Confirmed_sub.to_csv('svm_pred00X_Confirmed_sub.csv', index = False)\nsvm_pred00X_Confirmed_sub","b98df7c7":"linear_pred00X = linear_pred00X.reshape(1,-1)[0]\nlinear_pred00X_Confirmed_sub = pd.DataFrame({'Date': future_forcast_dates[:-1], 'Polynomial Regression Predictions Predicted # of Confirmed Cases Worldwide (Input 10)': np.round(linear_pred00X[:-1])})\nlinear_pred00X_Confirmed_sub.to_csv('linear_pred00X_Confirmed_sub.csv', index = False)\nlinear_pred00X_Confirmed_sub","d0246a05":"bayesian_pred00X_Confirmed_sub = pd.DataFrame({'Date': future_forcast_dates[:-1], 'Bayesian Ridge Regression Predictions Predicted # of Confirmed Cases Worldwide (Input 10)': np.round(bayesian_pred00X[:-1])})\nbayesian_pred00X_Confirmed_sub.to_csv('bayesian_pred00X_Confirmed_sub.csv', index = False)\nbayesian_pred00X_Confirmed_sub","af57ace9":"linear_pred00XX = linear_pred00X.reshape(1,-1)[0]\nlinear_pred00XX_Confirmed_sub = pd.DataFrame({'Date': future_forcast_dates[:-1], 'Polynomial Regression Predictions Predicted # of Confirmed Cases Worldwide (Input 20)': np.round(linear_pred00XX[:-1])})\nlinear_pred00XX_Confirmed_sub.to_csv('linear_pred00X_Confirmed_sub.csv', index = False)\nlinear_pred00XX_Confirmed_sub","914ca391":"# Future predictions using SVM \nsvm_pred00X_Confirmed_sub = pd.DataFrame({'Date': future_forcast_dates[:-1], 'SVM Predicted # of Confirmed Cases Worldwide (Input 10)': np.round(svm_pred00X[:-1])})\nsvm_pred00X_Confirmed_sub.to_csv('svm_pred00X_Confirmed_sub.csv', index = False)\nsvm_pred00X_Confirmed_sub","1dde9d5f":"linear_pred00XX = linear_pred00XX.reshape(1,-1)[0]\nlinear_pred00XX_Confirmed_sub = pd.DataFrame({'Date': future_forcast_dates[:-1], 'Polynomial Regression Predictions Predicted # of Confirmed Cases Worldwide (Input 20)': np.round(linear_pred00XX[:-1])})\nlinear_pred00XX_Confirmed_sub.to_csv('linear_pred00X_Confirmed_sub.csv', index = False)\nlinear_pred00XX_Confirmed_sub","214c01be":"bayesian_pred00XX_Confirmed_sub = pd.DataFrame({'Date': future_forcast_dates[:-1], 'Bayesian Ridge Regression Predictions Predicted # of Confirmed Cases Worldwide (Input 20)': np.round(bayesian_pred00XX[:-1])})\nbayesian_pred00XX_Confirmed_sub.to_csv('bayesian_pred00X_Confirmed_sub.csv', index = False)\nbayesian_pred00XX_Confirmed_sub","8b68fbff":"# Future predictions using SVM \nsvm_pred00XXX_Confirmed_sub = pd.DataFrame({'Date': future_forcast_dates[:-1], 'SVM Predicted # of Confirmed Cases Worldwide (Input 30)': np.round(svm_pred00XXX[:-1])})\nsvm_pred00XXX_Confirmed_sub.to_csv('svm_pred00X_Confirmed_sub.csv', index = False)\nsvm_pred00XXX_Confirmed_sub","6ef1abfc":"linear_pred00XXX = linear_pred00XXX.reshape(1,-1)[0]\nlinear_pred00XXX_Confirmed_sub = pd.DataFrame({'Date': future_forcast_dates[:-1], 'Polynomial Regression Predictions Predicted # of Confirmed Cases Worldwide (Input 30)': np.round(linear_pred00XXX[:-1])})\nlinear_pred00XXX_Confirmed_sub.to_csv('linear_pred00X_Confirmed_sub.csv', index = False)\nlinear_pred00XXX_Confirmed_sub","16c47ef9":"bayesian_pred00XXX_Confirmed_sub = pd.DataFrame({'Date': future_forcast_dates[:-1], 'Bayesian Ridge Regression Predictions Predicted # of Confirmed Cases Worldwide (Input 30)': np.round(bayesian_pred00XXX[:-1])})\nbayesian_pred00XXX_Confirmed_sub.to_csv('bayesian_pred00X_Confirmed_sub.csv', index = False)\nbayesian_pred00XXX_Confirmed_sub","94d131d5":"# Future predictions using SVM \nsvm_pred00LX_Confirmed_sub = pd.DataFrame({'Date': future_forcast_dates[:-1], 'SVM Predicted # of Confirmed Cases Worldwide (Input 40)': np.round(svm_pred00LX[:-1])})\nsvm_pred00LX_Confirmed_sub.to_csv('svm_pred00X_Confirmed_sub.csv', index = False)\nsvm_pred00LX_Confirmed_sub","b08cfbc1":"linear_pred00LX = linear_pred00LX.reshape(1,-1)[0]\nlinear_pred00LX_Confirmed_sub = pd.DataFrame({'Date': future_forcast_dates[:-1], 'Polynomial Regression Predictions Predicted # of Confirmed Cases Worldwide (Input 40)': np.round(linear_pred00LX[:-1])})\nlinear_pred00LX_Confirmed_sub.to_csv('linear_pred00X_Confirmed_sub.csv', index = False)\nlinear_pred00LX_Confirmed_sub","ada2ab0e":"bayesian_pred00LX_Confirmed_sub = pd.DataFrame({'Date': future_forcast_dates[:-1], 'Bayesian Ridge Regression Predictions Predicted # of Confirmed Cases Worldwide (Input 40)': np.round(bayesian_pred00LX[:-1])})\nbayesian_pred00LX_Confirmed_sub.to_csv('bayesian_pred00X_Confirmed_sub.csv', index = False)\nbayesian_pred00LX_Confirmed_sub","f17c1842":"# Future predictions using SVM \nsvm_pred00L_Confirmed_sub = pd.DataFrame({'Date': future_forcast_dates[:-1], 'SVM Predicted # of Confirmed Cases Worldwide (Input 50)': np.round(svm_pred00L[:-1])})\nsvm_pred00L_Confirmed_sub.to_csv('svm_pred00X_Confirmed_sub.csv', index = False)\nsvm_pred00L_Confirmed_sub","9b532457":"linear_pred00L = linear_pred00L.reshape(1,-1)[0]\nlinear_pred00L_Confirmed_sub = pd.DataFrame({'Date': future_forcast_dates[:-1], 'Polynomial Regression Predictions Predicted # of Confirmed Cases Worldwide (Input 50)': np.round(linear_pred00L[:-1])})\nlinear_pred00L_Confirmed_sub.to_csv('linear_pred00X_Confirmed_sub.csv', index = False)\nlinear_pred00L_Confirmed_sub","a399ce27":"bayesian_pred00L_Confirmed_sub = pd.DataFrame({'Date': future_forcast_dates[:-1], 'Bayesian Ridge Regression Predictions Predicted # of Confirmed Cases Worldwide (Input 50)': np.round(bayesian_pred00L[:-1])})\nbayesian_pred00L_Confirmed_sub.to_csv('bayesian_pred00L_Confirmed_sub.csv', index = False)\nbayesian_pred00L_Confirmed_sub","5eea7b05":"X_train_deaths00X, X_test_deaths00X, y_train_deaths00X, y_test_deaths00X = train_test_split(days_since_1_22[10:], total_deaths[10:], test_size=0.12, shuffle=False)\n# svm_deaths= svm_search.best_estimator_\nsvm_deaths00X = SVR(shrinking=True, kernel='poly',gamma=0.01, epsilon=1,degree=3, C=0.1)\nsvm_deaths00X.fit(X_train_deaths00X, y_train_deaths00X)\nsvm_pred00X = svm_deaths00X.predict(future_forcast)\n\n# check against testing data\nsvm_test_pred00X = svm_deaths00X.predict(X_test_deaths00X)\nprint('MAE:', mean_absolute_error(svm_test_pred00X, y_test_deaths00X))\nprint('MSE:',mean_squared_error(svm_test_pred00X, y_test_deaths00X))\n\n# transform our data for polynomial regression\npoly = PolynomialFeatures(degree=5)\npoly_X_train_deaths00X = poly.fit_transform(X_train_deaths00X)\npoly_X_test_deaths00X = poly.fit_transform(X_test_deaths00X)\npoly_future_forcast = poly.fit_transform(future_forcast)\n\nbayesian_poly00X = PolynomialFeatures(degree=4)\nbayesian_poly_X_train_deaths00X = bayesian_poly00X.fit_transform(X_train_deaths00X)\nbayesian_poly_X_test_deaths00X = bayesian_poly00X.fit_transform(X_test_deaths00X)\nbayesian_poly_future_forcast00X = bayesian_poly00X.fit_transform(future_forcast)\n\n# polynomial regression\nlinear_model00X = LinearRegression(normalize=True, fit_intercept=False)\nlinear_model00X.fit(poly_X_train_deaths00X, y_train_deaths00X)\ntest_linear_pred00X = linear_model00X.predict(poly_X_test_deaths00X)\nlinear_pred00X = linear_model00X.predict(poly_future_forcast)\nprint('MAE:', mean_absolute_error(test_linear_pred00X, y_test_deaths00X))\nprint('MSE:',mean_squared_error(test_linear_pred00X, y_test_deaths00X))\n\nprint(linear_model00X.coef_)\n\n\n# bayesian ridge polynomial regression\ntol = [1e-6, 1e-5, 1e-4, 1e-3, 1e-2]\nalpha_1 = [1e-7, 1e-6, 1e-5, 1e-4, 1e-3]\nalpha_2 = [1e-7, 1e-6, 1e-5, 1e-4, 1e-3]\nlambda_1 = [1e-7, 1e-6, 1e-5, 1e-4, 1e-3]\nlambda_2 = [1e-7, 1e-6, 1e-5, 1e-4, 1e-3]\nnormalize = [True, False]\n\nbayesian_grid00X = {'tol': tol, 'alpha_1': alpha_1, 'alpha_2' : alpha_2, 'lambda_1': lambda_1, 'lambda_2' : lambda_2, \n                 'normalize' : normalize}\n\nbayesian00X = BayesianRidge(fit_intercept=False)\nbayesian_search00X = RandomizedSearchCV(bayesian00X, bayesian_grid00X, scoring='neg_mean_squared_error', cv=3, return_train_score=True, n_jobs=-1, n_iter=40, verbose=1)\nbayesian_search00X.fit(bayesian_poly_X_train_deaths00X, y_train_deaths00X)\n\nbayesian_search00X.best_params_\n\nbayesian_deaths = bayesian_search00X.best_estimator_\ntest_bayesian_pred00X = bayesian_deaths.predict(bayesian_poly_X_test_deaths00X)\nbayesian_pred00X = bayesian_deaths.predict(bayesian_poly_future_forcast00X)\nprint('MAE:', mean_absolute_error(test_bayesian_pred00X, y_test_deaths00X))\nprint('MSE:',mean_squared_error(test_bayesian_pred00X, y_test_deaths00X))","1f63156c":"#10 deaths\n%matplotlib inline\nplt.style.use('seaborn-darkgrid')\nplt.figure(figsize=(20, 12))\nplt.plot(adjusted_dates, total_deaths, linestyle='solid', color='black')\nplt.plot(future_forcast, svm_pred00X, linestyle='dotted', color='purple')\nplt.plot(future_forcast, linear_pred00X, linestyle='dotted', color='orange')\nplt.plot(future_forcast, bayesian_pred00X, linestyle='dotted', color='green')\nplt.title('# of Coronavirus Cases Over Time', size=30)\nplt.xlabel('Days Since 1\/22\/2020', size=30)\nplt.ylabel('# of Cases', size=30)\nplt.legend(['Death Cases', 'SVM predictions', 'Polynomial Regression Predictions', 'Bayesian Ridge Regression Predictions'])\nplt.xticks(size=20)\nplt.show()","806754f0":"X_train_deaths00XX, X_test_deaths00XX, y_train_deaths00XX, y_test_deaths00XX = train_test_split(days_since_1_22[20:], total_deaths[20:], test_size=0.12, shuffle=False)\n# svm_deaths = svm_search.best_estimator_\nsvm_deaths00XX = SVR(shrinking=True, kernel='poly',gamma=0.01, epsilon=1,degree=3, C=0.1)\nsvm_deaths00XX.fit(X_train_deaths00XX, y_train_deaths00XX)\nsvm_pred00XX = svm_deaths00XX.predict(future_forcast)\n\n# check against testing data\nsvm_test_pred00XX = svm_deaths00XX.predict(X_test_deaths00XX)\nprint('MAE:', mean_absolute_error(svm_test_pred00XX, y_test_deaths00XX))\nprint('MSE:',mean_squared_error(svm_test_pred00XX, y_test_deaths00XX))\n\n# transform our data for polynomial regression\npoly = PolynomialFeatures(degree=5)\npoly_X_train_deaths00XX = poly.fit_transform(X_train_deaths00XX)\npoly_X_test_deaths00XX = poly.fit_transform(X_test_deaths00XX)\npoly_future_forcast = poly.fit_transform(future_forcast)\n\nbayesian_poly00XX = PolynomialFeatures(degree=4)\nbayesian_poly_X_train_deaths00XX = bayesian_poly00XX.fit_transform(X_train_deaths00XX)\nbayesian_poly_X_test_deaths00XX = bayesian_poly00XX.fit_transform(X_test_deaths00XX)\nbayesian_poly_future_forcast00XX = bayesian_poly00XX.fit_transform(future_forcast)\n\n# polynomial regression\nlinear_model00XX = LinearRegression(normalize=True, fit_intercept=False)\nlinear_model00XX.fit(poly_X_train_deaths00XX, y_train_deaths00XX)\ntest_linear_pred00XX = linear_model00X.predict(poly_X_test_deaths00XX)\nlinear_pred00XX = linear_model00X.predict(poly_future_forcast)\nprint('MAE:', mean_absolute_error(test_linear_pred00XX, y_test_deaths00XX))\nprint('MSE:',mean_squared_error(test_linear_pred00XX, y_test_deaths00XX))\n\nprint(linear_model00XX.coef_)\n\n\n# bayesian ridge polynomial regression\ntol = [1e-6, 1e-5, 1e-4, 1e-3, 1e-2]\nalpha_1 = [1e-7, 1e-6, 1e-5, 1e-4, 1e-3]\nalpha_2 = [1e-7, 1e-6, 1e-5, 1e-4, 1e-3]\nlambda_1 = [1e-7, 1e-6, 1e-5, 1e-4, 1e-3]\nlambda_2 = [1e-7, 1e-6, 1e-5, 1e-4, 1e-3]\nnormalize = [True, False]\n\nbayesian_grid00XX = {'tol': tol, 'alpha_1': alpha_1, 'alpha_2' : alpha_2, 'lambda_1': lambda_1, 'lambda_2' : lambda_2, \n                 'normalize' : normalize}\n\nbayesian00XX = BayesianRidge(fit_intercept=False)\nbayesian_search00XX = RandomizedSearchCV(bayesian00XX, bayesian_grid00XX, scoring='neg_mean_squared_error', cv=3, return_train_score=True, n_jobs=-1, n_iter=40, verbose=1)\nbayesian_search00XX.fit(bayesian_poly_X_train_deaths00XX, y_train_deaths00XX)\n\nbayesian_search00XX.best_params_\n\nbayesian_deaths = bayesian_search00XX.best_estimator_\ntest_bayesian_pred00XX = bayesian_deaths.predict(bayesian_poly_X_test_deaths00XX)\nbayesian_pred00XX = bayesian_deaths.predict(bayesian_poly_future_forcast00XX)\nprint('MAE:', mean_absolute_error(test_bayesian_pred00XX, y_test_deaths00XX))\nprint('MSE:',mean_squared_error(test_bayesian_pred00XX, y_test_deaths00XX))","1eb74309":"#20 deaths\n%matplotlib inline\nplt.style.use('seaborn-darkgrid')\nplt.figure(figsize=(20, 12))\nplt.plot(adjusted_dates, total_deaths, linestyle='solid', color='black')\nplt.plot(future_forcast, svm_pred00XX, linestyle='dotted', color='purple')\nplt.plot(future_forcast, linear_pred00XX, linestyle='dotted', color='orange')\nplt.plot(future_forcast, bayesian_pred00XX, linestyle='dotted', color='green')\nplt.title('# of Coronavirus Cases Over Time', size=30)\nplt.xlabel('Days Since 1\/22\/2020', size=30)\nplt.ylabel('# of Cases', size=30)\nplt.legend(['Death Cases', 'SVM predictions', 'Polynomial Regression Predictions', 'Bayesian Ridge Regression Predictions'])\nplt.xticks(size=20)\nplt.show()","2f8e26ef":"X_train_deaths00XXX, X_test_deaths00XXX, y_train_deaths00XXX, y_test_deaths00XXX = train_test_split(days_since_1_22[30:], total_deaths[30:], test_size=0.12, shuffle=False)\n# svm_deaths = svm_search.best_estimator_\nsvm_deaths00XXX = SVR(shrinking=True, kernel='poly',gamma=0.01, epsilon=1,degree=3, C=0.1)\nsvm_deaths00XXX.fit(X_train_deaths00XXX, y_train_deaths00XXX)\nsvm_pred00XXX = svm_deaths00XXX.predict(future_forcast)\n\n# check against testing data\nsvm_test_pred00XXX = svm_deaths00XXX.predict(X_test_deaths00XXX)\nprint('MAE:', mean_absolute_error(svm_test_pred00XXX, y_test_deaths00XXX))\nprint('MSE:',mean_squared_error(svm_test_pred00XXX, y_test_deaths00XXX))\n\n# transform our data for polynomial regression\npoly = PolynomialFeatures(degree=5)\npoly_X_train_deaths00XXX = poly.fit_transform(X_train_deaths00XXX)\npoly_X_test_deaths00XXX = poly.fit_transform(X_test_deaths00XXX)\npoly_future_forcast = poly.fit_transform(future_forcast)\n\nbayesian_poly00XXX = PolynomialFeatures(degree=4)\nbayesian_poly_X_train_deaths00XXX = bayesian_poly00XXX.fit_transform(X_train_deaths00XXX)\nbayesian_poly_X_test_deaths00XXX = bayesian_poly00XXX.fit_transform(X_test_deaths00XXX)\nbayesian_poly_future_forcast00XXX = bayesian_poly00XXX.fit_transform(future_forcast)\n\n# polynomial regression\nlinear_model00XXX = LinearRegression(normalize=True, fit_intercept=False)\nlinear_model00XXX.fit(poly_X_train_deaths00XXX, y_train_deaths00XXX)\ntest_linear_pred00XXX = linear_model00X.predict(poly_X_test_deaths00XXX)\nlinear_pred00XXX = linear_model00XXX.predict(poly_future_forcast)\nprint('MAE:', mean_absolute_error(test_linear_pred00XXX, y_test_deaths00XXX))\nprint('MSE:',mean_squared_error(test_linear_pred00XXX, y_test_deaths00XXX))\n\nprint(linear_model00XXX.coef_)\n\n\n# bayesian ridge polynomial regression\ntol = [1e-6, 1e-5, 1e-4, 1e-3, 1e-2]\nalpha_1 = [1e-7, 1e-6, 1e-5, 1e-4, 1e-3]\nalpha_2 = [1e-7, 1e-6, 1e-5, 1e-4, 1e-3]\nlambda_1 = [1e-7, 1e-6, 1e-5, 1e-4, 1e-3]\nlambda_2 = [1e-7, 1e-6, 1e-5, 1e-4, 1e-3]\nnormalize = [True, False]\n\nbayesian_grid00XXX = {'tol': tol, 'alpha_1': alpha_1, 'alpha_2' : alpha_2, 'lambda_1': lambda_1, 'lambda_2' : lambda_2, \n                 'normalize' : normalize}\n\nbayesian00XXX = BayesianRidge(fit_intercept=False)\nbayesian_search00XXX = RandomizedSearchCV(bayesian00XXX, bayesian_grid00XXX, scoring='neg_mean_squared_error', cv=3, return_train_score=True, n_jobs=-1, n_iter=40, verbose=1)\nbayesian_search00XXX.fit(bayesian_poly_X_train_deaths00XXX, y_train_deaths00XXX)\n\nbayesian_search00XXX.best_params_\n\nbayesian_deaths = bayesian_search00XXX.best_estimator_\ntest_bayesian_pred00XXX = bayesian_deaths.predict(bayesian_poly_X_test_deaths00XXX)\nbayesian_pred00XXX = bayesian_deaths.predict(bayesian_poly_future_forcast00XXX)\nprint('MAE:', mean_absolute_error(test_bayesian_pred00XXX, y_test_deaths00XXX))\nprint('MSE:',mean_squared_error(test_bayesian_pred00XXX, y_test_deaths00XXX))","69c8d7f8":"#30 deaths\n%matplotlib inline\nplt.style.use('seaborn-darkgrid')\nplt.figure(figsize=(20, 12))\nplt.plot(adjusted_dates, total_deaths, linestyle='solid', color='black')\nplt.plot(future_forcast, svm_pred00XXX, linestyle='dotted', color='purple')\nplt.plot(future_forcast, linear_pred00XXX, linestyle='dotted', color='orange')\nplt.plot(future_forcast, bayesian_pred00XXX, linestyle='dotted', color='green')\nplt.title('# of Coronavirus Cases Over Time', size=30)\nplt.xlabel('Days Since 1\/22\/2020', size=30)\nplt.ylabel('# of Cases', size=30)\nplt.legend(['Death Cases', 'SVM predictions', 'Polynomial Regression Predictions', 'Bayesian Ridge Regression Predictions'])\nplt.xticks(size=20)\nplt.show()","8c6a88b4":"X_train_deaths00LX, X_test_deaths00LX, y_train_deaths00LX, y_test_deaths00LX = train_test_split(days_since_1_22[40:], total_deaths[40:], test_size=0.12, shuffle=False)\n# svm_deaths = svm_search.best_estimator_\nsvm_deaths00LX = SVR(shrinking=True, kernel='poly',gamma=0.01, epsilon=1,degree=3, C=0.1)\nsvm_deaths00LX.fit(X_train_deaths00LX, y_train_deaths00LX)\nsvm_pred00LX = svm_deaths00LX.predict(future_forcast)\n\n# check against testing data\nsvm_test_pred00LX = svm_deaths00LX.predict(X_test_deaths00LX)\nprint('MAE:', mean_absolute_error(svm_test_pred00LX, y_test_deaths00LX))\nprint('MSE:',mean_squared_error(svm_test_pred00LX, y_test_deaths00LX))\n\n# transform our data for polynomial regression\npoly = PolynomialFeatures(degree=5)\npoly_X_train_deaths00LX = poly.fit_transform(X_train_deaths00LX)\npoly_X_test_deaths00LX = poly.fit_transform(X_test_deaths00LX)\npoly_future_forcast = poly.fit_transform(future_forcast)\n\nbayesian_poly00LX = PolynomialFeatures(degree=4)\nbayesian_poly_X_train_deaths00LX = bayesian_poly00LX.fit_transform(X_train_deaths00LX)\nbayesian_poly_X_test_deaths00LX = bayesian_poly00LX.fit_transform(X_test_deaths00LX)\nbayesian_poly_future_forcast00LX = bayesian_poly00LX.fit_transform(future_forcast)\n\n# polynomial regression\nlinear_model00LX = LinearRegression(normalize=True, fit_intercept=False)\nlinear_model00LX.fit(poly_X_train_deaths00LX, y_train_deaths00LX)\ntest_linear_pred00LX = linear_model00LX.predict(poly_X_test_deaths00LX)\nlinear_pred00LX = linear_model00LX.predict(poly_future_forcast)\nprint('MAE:', mean_absolute_error(test_linear_pred00LX, y_test_deaths00LX))\nprint('MSE:',mean_squared_error(test_linear_pred00LX, y_test_deaths00LX))\n\nprint(linear_model00LX.coef_)\n\n\n# bayesian ridge polynomial regression\ntol = [1e-6, 1e-5, 1e-4, 1e-3, 1e-2]\nalpha_1 = [1e-7, 1e-6, 1e-5, 1e-4, 1e-3]\nalpha_2 = [1e-7, 1e-6, 1e-5, 1e-4, 1e-3]\nlambda_1 = [1e-7, 1e-6, 1e-5, 1e-4, 1e-3]\nlambda_2 = [1e-7, 1e-6, 1e-5, 1e-4, 1e-3]\nnormalize = [True, False]\n\nbayesian_grid00LX = {'tol': tol, 'alpha_1': alpha_1, 'alpha_2' : alpha_2, 'lambda_1': lambda_1, 'lambda_2' : lambda_2, \n                 'normalize' : normalize}\n\nbayesian00LX = BayesianRidge(fit_intercept=False)\nbayesian_search00LX = RandomizedSearchCV(bayesian00LX, bayesian_grid00LX, scoring='neg_mean_squared_error', cv=3, return_train_score=True, n_jobs=-1, n_iter=40, verbose=1)\nbayesian_search00LX.fit(bayesian_poly_X_train_deaths00LX, y_train_deaths00LX)\n\nbayesian_search00LX.best_params_\n\nbayesian_deaths = bayesian_search00LX.best_estimator_\ntest_bayesian_pred00LX = bayesian_deaths.predict(bayesian_poly_X_test_deaths00LX)\nbayesian_pred00LX = bayesian_deaths.predict(bayesian_poly_future_forcast00LX)\nprint('MAE:', mean_absolute_error(test_bayesian_pred00LX, y_test_deaths00LX))\nprint('MSE:',mean_squared_error(test_bayesian_pred00LX, y_test_deaths00LX))","189b3893":"#40 deaths\n%matplotlib inline\nplt.style.use('seaborn-darkgrid')\nplt.figure(figsize=(20, 12))\nplt.plot(adjusted_dates, total_deaths, linestyle='solid', color='black')\nplt.plot(future_forcast, svm_pred00LX, linestyle='dotted', color='purple')\nplt.plot(future_forcast, linear_pred00LX, linestyle='dotted', color='orange')\nplt.plot(future_forcast, bayesian_pred00LX, linestyle='dotted', color='green')\nplt.title('# of Coronavirus Cases Over Time', size=30)\nplt.xlabel('Days Since 1\/22\/2020', size=30)\nplt.ylabel('# of Cases', size=30)\nplt.legend(['Death Cases', 'SVM predictions', 'Polynomial Regression Predictions', 'Bayesian Ridge Regression Predictions'])\nplt.xticks(size=20)\nplt.show()","395ea909":"X_train_deaths00L, X_test_deaths00L, y_train_deaths00L, y_test_deaths00L = train_test_split(days_since_1_22[50:], total_deaths[50:], test_size=0.12, shuffle=False)\n# svm_deaths = svm_search.best_estimator_\nsvm_deaths00L = SVR(shrinking=True, kernel='poly',gamma=0.01, epsilon=1,degree=3, C=0.1)\nsvm_deaths00L.fit(X_train_deaths00L, y_train_deaths00L)\nsvm_pred00L = svm_deaths00L.predict(future_forcast)\n\n# check against testing data\nsvm_test_pred00L = svm_deaths00L.predict(X_test_deaths00L)\nprint('MAE:', mean_absolute_error(svm_test_pred00L, y_test_deaths00L))\nprint('MSE:',mean_squared_error(svm_test_pred00L, y_test_deaths00L))\n\n# transform our data for polynomial regression\npoly = PolynomialFeatures(degree=5)\npoly_X_train_deaths00L = poly.fit_transform(X_train_deaths00L)\npoly_X_test_deaths00L = poly.fit_transform(X_test_deaths00L)\npoly_future_forcast = poly.fit_transform(future_forcast)\n\nbayesian_poly00L = PolynomialFeatures(degree=4)\nbayesian_poly_X_train_deaths00L = bayesian_poly00L.fit_transform(X_train_deaths00L)\nbayesian_poly_X_test_deaths00L = bayesian_poly00L.fit_transform(X_test_deaths00L)\nbayesian_poly_future_forcast00L = bayesian_poly00L.fit_transform(future_forcast)\n\n# polynomial regression\nlinear_model00L = LinearRegression(normalize=True, fit_intercept=False)\nlinear_model00L.fit(poly_X_train_deaths00L, y_train_deaths00L)\ntest_linear_pred00L = linear_model00L.predict(poly_X_test_deaths00L)\nlinear_pred00L = linear_model00L.predict(poly_future_forcast)\nprint('MAE:', mean_absolute_error(test_linear_pred00L, y_test_deaths00L))\nprint('MSE:',mean_squared_error(test_linear_pred00L, y_test_deaths00L))\n\nprint(linear_model00L.coef_)\n\n\n# bayesian ridge polynomial regression\ntol = [1e-6, 1e-5, 1e-4, 1e-3, 1e-2]\nalpha_1 = [1e-7, 1e-6, 1e-5, 1e-4, 1e-3]\nalpha_2 = [1e-7, 1e-6, 1e-5, 1e-4, 1e-3]\nlambda_1 = [1e-7, 1e-6, 1e-5, 1e-4, 1e-3]\nlambda_2 = [1e-7, 1e-6, 1e-5, 1e-4, 1e-3]\nnormalize = [True, False]\n\nbayesian_grid00L = {'tol': tol, 'alpha_1': alpha_1, 'alpha_2' : alpha_2, 'lambda_1': lambda_1, 'lambda_2' : lambda_2, \n                 'normalize' : normalize}\n\nbayesian00L = BayesianRidge(fit_intercept=False)\nbayesian_search00L = RandomizedSearchCV(bayesian00L, bayesian_grid00L, scoring='neg_mean_squared_error', cv=3, return_train_score=True, n_jobs=-1, n_iter=40, verbose=1)\nbayesian_search00L.fit(bayesian_poly_X_train_deaths00L, y_train_deaths00L)\n\nbayesian_search00L.best_params_\n\nbayesian_deaths = bayesian_search00L.best_estimator_\ntest_bayesian_pred00L = bayesian_deaths.predict(bayesian_poly_X_test_deaths00L)\nbayesian_pred00L = bayesian_deaths.predict(bayesian_poly_future_forcast00L)\nprint('MAE:', mean_absolute_error(test_bayesian_pred00L, y_test_deaths00L))\nprint('MSE:',mean_squared_error(test_bayesian_pred00L, y_test_deaths00L))","1b5bd539":"#50 deaths\n%matplotlib inline\nplt.style.use('seaborn-darkgrid')\nplt.figure(figsize=(20, 12))\nplt.plot(adjusted_dates, total_deaths, linestyle='solid', color='black')\nplt.plot(future_forcast, svm_pred00L, linestyle='dotted', color='purple')\nplt.plot(future_forcast, linear_pred00L, linestyle='dotted', color='orange')\nplt.plot(future_forcast, bayesian_pred00L, linestyle='dotted', color='green')\nplt.title('# of Coronavirus Cases Over Time', size=30)\nplt.xlabel('Days Since 1\/22\/2020', size=30)\nplt.ylabel('# of Cases', size=30)\nplt.legend(['Death Cases', 'SVM predictions', 'Polynomial Regression Predictions', 'Bayesian Ridge Regression Predictions'])\nplt.xticks(size=20)\nplt.show()","75e08a19":"# Future predictions using SVM \nsvm_pred00X_Confirmed_sub = pd.DataFrame({'Date': future_forcast_dates[:-1], 'SVM Predicted # of Confirmed Cases Worldwide (Input 10)': np.round(svm_pred00X[:-1])})\nsvm_pred00X_Confirmed_sub.to_csv('svm_pred00X_Confirmed_sub.csv', index = False)\nsvm_pred00X_Confirmed_sub","3de4042e":"X_train_deaths00X, X_test_deaths00X, y_train_deaths00X, y_test_deaths00X = train_test_split(days_since_1_22[10:], total_recovered[10:], test_size=0.12, shuffle=False)\n# svm_deaths= svm_search.best_estimator_\nsvm_deaths00X = SVR(shrinking=True, kernel='poly',gamma=0.01, epsilon=1,degree=3, C=0.1)\nsvm_deaths00X.fit(X_train_deaths00X, y_train_deaths00X)\nsvm_pred00X = svm_deaths00X.predict(future_forcast)\n\n# check against testing data\nsvm_test_pred00X = svm_deaths00X.predict(X_test_deaths00X)\nprint('MAE:', mean_absolute_error(svm_test_pred00X, y_test_deaths00X))\nprint('MSE:',mean_squared_error(svm_test_pred00X, y_test_deaths00X))\n\n# transform our data for polynomial regression\npoly = PolynomialFeatures(degree=5)\npoly_X_train_deaths00X = poly.fit_transform(X_train_deaths00X)\npoly_X_test_deaths00X = poly.fit_transform(X_test_deaths00X)\npoly_future_forcast = poly.fit_transform(future_forcast)\n\nbayesian_poly00X = PolynomialFeatures(degree=4)\nbayesian_poly_X_train_deaths00X = bayesian_poly00X.fit_transform(X_train_deaths00X)\nbayesian_poly_X_test_deaths00X = bayesian_poly00X.fit_transform(X_test_deaths00X)\nbayesian_poly_future_forcast00X = bayesian_poly00X.fit_transform(future_forcast)\n\n# polynomial regression\nlinear_model00X = LinearRegression(normalize=True, fit_intercept=False)\nlinear_model00X.fit(poly_X_train_deaths00X, y_train_deaths00X)\ntest_linear_pred00X = linear_model00X.predict(poly_X_test_deaths00X)\nlinear_pred00X = linear_model00X.predict(poly_future_forcast)\nprint('MAE:', mean_absolute_error(test_linear_pred00X, y_test_deaths00X))\nprint('MSE:',mean_squared_error(test_linear_pred00X, y_test_deaths00X))\n\nprint(linear_model00X.coef_)\n\n\n# bayesian ridge polynomial regression\ntol = [1e-6, 1e-5, 1e-4, 1e-3, 1e-2]\nalpha_1 = [1e-7, 1e-6, 1e-5, 1e-4, 1e-3]\nalpha_2 = [1e-7, 1e-6, 1e-5, 1e-4, 1e-3]\nlambda_1 = [1e-7, 1e-6, 1e-5, 1e-4, 1e-3]\nlambda_2 = [1e-7, 1e-6, 1e-5, 1e-4, 1e-3]\nnormalize = [True, False]\n\nbayesian_grid00X = {'tol': tol, 'alpha_1': alpha_1, 'alpha_2' : alpha_2, 'lambda_1': lambda_1, 'lambda_2' : lambda_2, \n                 'normalize' : normalize}\n\nbayesian00X = BayesianRidge(fit_intercept=False)\nbayesian_search00X = RandomizedSearchCV(bayesian00X, bayesian_grid00X, scoring='neg_mean_squared_error', cv=3, return_train_score=True, n_jobs=-1, n_iter=40, verbose=1)\nbayesian_search00X.fit(bayesian_poly_X_train_deaths00X, y_train_deaths00X)\n\nbayesian_search00X.best_params_\n\nbayesian_deaths = bayesian_search00X.best_estimator_\ntest_bayesian_pred00X = bayesian_deaths.predict(bayesian_poly_X_test_deaths00X)\nbayesian_pred00X = bayesian_deaths.predict(bayesian_poly_future_forcast00X)\nprint('MAE:', mean_absolute_error(test_bayesian_pred00X, y_test_deaths00X))\nprint('MSE:',mean_squared_error(test_bayesian_pred00X, y_test_deaths00X))","af137d52":"#10 Recovered\n%matplotlib inline\nplt.style.use('seaborn-darkgrid')\nplt.figure(figsize=(20, 12))\nplt.plot(adjusted_dates, total_recovered, linestyle='solid', color='black')\nplt.plot(future_forcast, svm_pred00X, linestyle='dotted', color='purple')\nplt.plot(future_forcast, linear_pred00X, linestyle='dotted', color='orange')\nplt.plot(future_forcast, bayesian_pred00X, linestyle='dotted', color='green')\nplt.title('# of Coronavirus Cases Over Time', size=30)\nplt.xlabel('Days Since 1\/22\/2020', size=30)\nplt.ylabel('# of Cases', size=30)\nplt.legend(['Recovered Cases', 'SVM predictions', 'Polynomial Regression Predictions', 'Bayesian Ridge Regression Predictions'])\nplt.xticks(size=20)\nplt.show()","141bdd0f":"X_train_deaths00XX, X_test_deaths00XX, y_train_deaths00XX, y_test_deaths00XX = train_test_split(days_since_1_22[20:], total_recovered[20:], test_size=0.12, shuffle=False)\n# svm_deaths = svm_search.best_estimator\nsvm_deaths00XX = SVR(shrinking=True, kernel='poly',gamma=0.01, epsilon=1,degree=3, C=0.1)\nsvm_deaths00XX.fit(X_train_deaths00XX, y_train_deaths00XX)\nsvm_pred00XX = svm_deaths00XX.predict(future_forcast)\n\n# check against testing data\nsvm_test_pred00XX = svm_deaths00XX.predict(X_test_deaths00XX)\nprint('MAE:', mean_absolute_error(svm_test_pred00XX, y_test_deaths00XX))\nprint('MSE:',mean_squared_error(svm_test_pred00XX, y_test_deaths00XX))\n\n# transform our data for polynomial regression\npoly = PolynomialFeatures(degree=5)\npoly_X_train_deaths00XX = poly.fit_transform(X_train_deaths00XX)\npoly_X_test_deaths00XX = poly.fit_transform(X_test_deaths00XX)\npoly_future_forcast = poly.fit_transform(future_forcast)\n\nbayesian_poly00XX = PolynomialFeatures(degree=4)\nbayesian_poly_X_train_deaths00XX = bayesian_poly00XX.fit_transform(X_train_deaths00XX)\nbayesian_poly_X_test_deaths00XX = bayesian_poly00XX.fit_transform(X_test_deaths00XX)\nbayesian_poly_future_forcast00XX = bayesian_poly00XX.fit_transform(future_forcast)\n\n# polynomial regression\nlinear_model00XX = LinearRegression(normalize=True, fit_intercept=False)\nlinear_model00XX.fit(poly_X_train_deaths00XX, y_train_deaths00XX)\ntest_linear_pred00XX = linear_model00X.predict(poly_X_test_deaths00XX)\nlinear_pred00XX = linear_model00X.predict(poly_future_forcast)\nprint('MAE:', mean_absolute_error(test_linear_pred00XX, y_test_deaths00XX))\nprint('MSE:',mean_squared_error(test_linear_pred00XX, y_test_deaths00XX))\n\nprint(linear_model00XX.coef_)\n\n\n# bayesian ridge polynomial regression\ntol = [1e-6, 1e-5, 1e-4, 1e-3, 1e-2]\nalpha_1 = [1e-7, 1e-6, 1e-5, 1e-4, 1e-3]\nalpha_2 = [1e-7, 1e-6, 1e-5, 1e-4, 1e-3]\nlambda_1 = [1e-7, 1e-6, 1e-5, 1e-4, 1e-3]\nlambda_2 = [1e-7, 1e-6, 1e-5, 1e-4, 1e-3]\nnormalize = [True, False]\n\nbayesian_grid00XX = {'tol': tol, 'alpha_1': alpha_1, 'alpha_2' : alpha_2, 'lambda_1': lambda_1, 'lambda_2' : lambda_2, \n                 'normalize' : normalize}\n\nbayesian00XX = BayesianRidge(fit_intercept=False)\nbayesian_search00XX = RandomizedSearchCV(bayesian00XX, bayesian_grid00XX, scoring='neg_mean_squared_error', cv=3, return_train_score=True, n_jobs=-1, n_iter=40, verbose=1)\nbayesian_search00XX.fit(bayesian_poly_X_train_deaths00XX, y_train_deaths00XX)\n\nbayesian_search00XX.best_params_\n\nbayesian_deaths = bayesian_search00XX.best_estimator_\ntest_bayesian_pred00XX = bayesian_deaths.predict(bayesian_poly_X_test_deaths00XX)\nbayesian_pred00XX = bayesian_deaths.predict(bayesian_poly_future_forcast00XX)\nprint('MAE:', mean_absolute_error(test_bayesian_pred00XX, y_test_deaths00XX))\nprint('MSE:',mean_squared_error(test_bayesian_pred00XX, y_test_deaths00XX))","20b874c6":"#20 Recovered\n%matplotlib inline\nplt.style.use('seaborn-darkgrid')\nplt.figure(figsize=(20, 12))\nplt.plot(adjusted_dates, total_recovered, linestyle='solid', color='black')\nplt.plot(future_forcast, svm_pred00XX, linestyle='dotted', color='purple')\nplt.plot(future_forcast, linear_pred00XX, linestyle='dotted', color='orange')\nplt.plot(future_forcast, bayesian_pred00XX, linestyle='dotted', color='green')\nplt.title('# of Coronavirus Cases Over Time', size=30)\nplt.xlabel('Days Since 1\/22\/2020', size=30)\nplt.ylabel('# of Cases', size=30)\nplt.legend(['Recovered Cases', 'SVM predictions', 'Polynomial Regression Predictions', 'Bayesian Ridge Regression Predictions'])\nplt.xticks(size=20)\nplt.show()","a17081ab":"X_train_deaths00XXX, X_test_deaths00XXX, y_train_deaths00XXX, y_test_deaths00XXX = train_test_split(days_since_1_22[30:], total_recovered[30:], test_size=0.12, shuffle=False)\n# svm_recovered = svm_search.best_estimator_\nsvm_deaths00XXX = SVR(shrinking=True, kernel='poly',gamma=0.01, epsilon=1,degree=3, C=0.1)\nsvm_deaths00XXX.fit(X_train_deaths00XXX, y_train_deaths00XXX)\nsvm_pred00XXX = svm_deaths00XXX.predict(future_forcast)\n\n# check against testing data\nsvm_test_pred00XXX = svm_deaths00XXX.predict(X_test_deaths00XXX)\nprint('MAE:', mean_absolute_error(svm_test_pred00XXX, y_test_deaths00XXX))\nprint('MSE:',mean_squared_error(svm_test_pred00XXX, y_test_deaths00XXX))\n\n# transform our data for polynomial regression\npoly = PolynomialFeatures(degree=5)\npoly_X_train_deaths00XXX = poly.fit_transform(X_train_deaths00XXX)\npoly_X_test_deaths00XXX = poly.fit_transform(X_test_deaths00XXX)\npoly_future_forcast = poly.fit_transform(future_forcast)\n\nbayesian_poly00XXX = PolynomialFeatures(degree=4)\nbayesian_poly_X_train_deaths00XXX = bayesian_poly00XXX.fit_transform(X_train_deaths00XXX)\nbayesian_poly_X_test_deaths00XXX = bayesian_poly00XXX.fit_transform(X_test_deaths00XXX)\nbayesian_poly_future_forcast00XXX = bayesian_poly00XXX.fit_transform(future_forcast)\n\n# polynomial regression\nlinear_model00XXX = LinearRegression(normalize=True, fit_intercept=False)\nlinear_model00XXX.fit(poly_X_train_deaths00XXX, y_train_deaths00XXX)\ntest_linear_pred00XXX = linear_model00X.predict(poly_X_test_deaths00XXX)\nlinear_pred00XXX = linear_model00XXX.predict(poly_future_forcast)\nprint('MAE:', mean_absolute_error(test_linear_pred00XXX, y_test_deaths00XXX))\nprint('MSE:',mean_squared_error(test_linear_pred00XXX, y_test_deaths00XXX))\n\nprint(linear_model00XXX.coef_)\n\n\n# bayesian ridge polynomial regression\ntol = [1e-6, 1e-5, 1e-4, 1e-3, 1e-2]\nalpha_1 = [1e-7, 1e-6, 1e-5, 1e-4, 1e-3]\nalpha_2 = [1e-7, 1e-6, 1e-5, 1e-4, 1e-3]\nlambda_1 = [1e-7, 1e-6, 1e-5, 1e-4, 1e-3]\nlambda_2 = [1e-7, 1e-6, 1e-5, 1e-4, 1e-3]\nnormalize = [True, False]\n\nbayesian_grid00XXX = {'tol': tol, 'alpha_1': alpha_1, 'alpha_2' : alpha_2, 'lambda_1': lambda_1, 'lambda_2' : lambda_2, \n                 'normalize' : normalize}\n\nbayesian00XXX = BayesianRidge(fit_intercept=False)\nbayesian_search00XXX = RandomizedSearchCV(bayesian00XXX, bayesian_grid00XXX, scoring='neg_mean_squared_error', cv=3, return_train_score=True, n_jobs=-1, n_iter=40, verbose=1)\nbayesian_search00XXX.fit(bayesian_poly_X_train_deaths00XXX, y_train_deaths00XXX)\n\nbayesian_search00XXX.best_params_\n\nbayesian_deaths = bayesian_search00XXX.best_estimator_\ntest_bayesian_pred00XXX = bayesian_deaths.predict(bayesian_poly_X_test_deaths00XXX)\nbayesian_pred00XXX = bayesian_deaths.predict(bayesian_poly_future_forcast00XXX)\nprint('MAE:', mean_absolute_error(test_bayesian_pred00XXX, y_test_deaths00XXX))\nprint('MSE:',mean_squared_error(test_bayesian_pred00XXX, y_test_deaths00XXX))","548ee0fc":"#30 Recovered\n%matplotlib inline\nplt.style.use('seaborn-darkgrid')\nplt.figure(figsize=(20, 12))\nplt.plot(adjusted_dates, total_recovered, linestyle='solid', color='black')\nplt.plot(future_forcast, svm_pred00XXX, linestyle='dotted', color='purple')\nplt.plot(future_forcast, linear_pred00XXX, linestyle='dotted', color='orange')\nplt.plot(future_forcast, bayesian_pred00XXX, linestyle='dotted', color='green')\nplt.title('# of Coronavirus Cases Over Time', size=30)\nplt.xlabel('Days Since 1\/22\/2020', size=30)\nplt.ylabel('# of Cases', size=30)\nplt.legend(['Recovered Cases', 'SVM predictions', 'Polynomial Regression Predictions', 'Bayesian Ridge Regression Predictions'])\nplt.xticks(size=20)\nplt.show()","baa81d64":"X_train_deaths00LX, X_test_deaths00LX, y_train_deaths00LX, y_test_deaths00LX = train_test_split(days_since_1_22[40:], total_recovered[40:], test_size=0.12, shuffle=False)\n# svm_recovered = svm_search.best_estimator_\nsvm_deaths00LX = SVR(shrinking=True, kernel='poly',gamma=0.01, epsilon=1,degree=3, C=0.1)\nsvm_deaths00LX.fit(X_train_deaths00LX, y_train_deaths00LX)\nsvm_pred00LX = svm_deaths00LX.predict(future_forcast)\n\n# check against testing data\nsvm_test_pred00LX = svm_deaths00LX.predict(X_test_deaths00LX)\nprint('MAE:', mean_absolute_error(svm_test_pred00LX, y_test_deaths00LX))\nprint('MSE:',mean_squared_error(svm_test_pred00LX, y_test_deaths00LX))\n\n# transform our data for polynomial regression\npoly = PolynomialFeatures(degree=5)\npoly_X_train_deaths00LX = poly.fit_transform(X_train_deaths00LX)\npoly_X_test_deaths00LX = poly.fit_transform(X_test_deaths00LX)\npoly_future_forcast = poly.fit_transform(future_forcast)\n\nbayesian_poly00LX = PolynomialFeatures(degree=4)\nbayesian_poly_X_train_deaths00LX = bayesian_poly00LX.fit_transform(X_train_deaths00LX)\nbayesian_poly_X_test_deaths00LX = bayesian_poly00LX.fit_transform(X_test_deaths00LX)\nbayesian_poly_future_forcast00LX = bayesian_poly00LX.fit_transform(future_forcast)\n\n# polynomial regression\nlinear_model00LX = LinearRegression(normalize=True, fit_intercept=False)\nlinear_model00LX.fit(poly_X_train_deaths00LX, y_train_deaths00LX)\ntest_linear_pred00LX = linear_model00LX.predict(poly_X_test_deaths00LX)\nlinear_pred00LX = linear_model00LX.predict(poly_future_forcast)\nprint('MAE:', mean_absolute_error(test_linear_pred00LX, y_test_deaths00LX))\nprint('MSE:',mean_squared_error(test_linear_pred00LX, y_test_deaths00LX))\n\nprint(linear_model00LX.coef_)\n\n\n# bayesian ridge polynomial regression\ntol = [1e-6, 1e-5, 1e-4, 1e-3, 1e-2]\nalpha_1 = [1e-7, 1e-6, 1e-5, 1e-4, 1e-3]\nalpha_2 = [1e-7, 1e-6, 1e-5, 1e-4, 1e-3]\nlambda_1 = [1e-7, 1e-6, 1e-5, 1e-4, 1e-3]\nlambda_2 = [1e-7, 1e-6, 1e-5, 1e-4, 1e-3]\nnormalize = [True, False]\n\nbayesian_grid00LX = {'tol': tol, 'alpha_1': alpha_1, 'alpha_2' : alpha_2, 'lambda_1': lambda_1, 'lambda_2' : lambda_2, \n                 'normalize' : normalize}\n\nbayesian00LX = BayesianRidge(fit_intercept=False)\nbayesian_search00LX = RandomizedSearchCV(bayesian00LX, bayesian_grid00LX, scoring='neg_mean_squared_error', cv=3, return_train_score=True, n_jobs=-1, n_iter=40, verbose=1)\nbayesian_search00LX.fit(bayesian_poly_X_train_deaths00LX, y_train_deaths00LX)\n\nbayesian_search00LX.best_params_\n\nbayesian_deaths = bayesian_search00LX.best_estimator_\ntest_bayesian_pred00LX = bayesian_deaths.predict(bayesian_poly_X_test_deaths00LX)\nbayesian_pred00LX = bayesian_deaths.predict(bayesian_poly_future_forcast00LX)\nprint('MAE:', mean_absolute_error(test_bayesian_pred00LX, y_test_deaths00LX))\nprint('MSE:',mean_squared_error(test_bayesian_pred00LX, y_test_deaths00LX))","4119a349":"#40 Recovered\n%matplotlib inline\nplt.style.use('seaborn-darkgrid')\nplt.figure(figsize=(20, 12))\nplt.plot(adjusted_dates, total_recovered, linestyle='solid', color='black')\nplt.plot(future_forcast, svm_pred00LX, linestyle='dotted', color='purple')\nplt.plot(future_forcast, linear_pred00LX, linestyle='dotted', color='orange')\nplt.plot(future_forcast, bayesian_pred00LX, linestyle='dotted', color='green')\nplt.title('# of Coronavirus Cases Over Time', size=30)\nplt.xlabel('Days Since 1\/22\/2020', size=30)\nplt.ylabel('# of Cases', size=30)\nplt.legend(['Recovered Cases', 'SVM predictions', 'Polynomial Regression Predictions', 'Bayesian Ridge Regression Predictions'])\nplt.xticks(size=20)\nplt.show()","57dd8d5e":"X_train_deaths00L, X_test_deaths00L, y_train_deaths00L, y_test_deaths00L = train_test_split(days_since_1_22[50:], total_recovered[50:], test_size=0.12, shuffle=False)\n# svm_recovered = svm_search.best_estimator_\nsvm_deaths00L = SVR(shrinking=True, kernel='poly',gamma=0.01, epsilon=1,degree=3, C=0.1)\nsvm_deaths00L.fit(X_train_deaths00L, y_train_deaths00L)\nsvm_pred00L = svm_deaths00L.predict(future_forcast)\n\n# check against testing data\nsvm_test_pred00L = svm_deaths00L.predict(X_test_deaths00L)\nprint('MAE:', mean_absolute_error(svm_test_pred00L, y_test_deaths00L))\nprint('MSE:',mean_squared_error(svm_test_pred00L, y_test_deaths00L))\n\n# transform our data for polynomial regression\npoly = PolynomialFeatures(degree=5)\npoly_X_train_deaths00L = poly.fit_transform(X_train_deaths00L)\npoly_X_test_deaths00L = poly.fit_transform(X_test_deaths00L)\npoly_future_forcast = poly.fit_transform(future_forcast)\n\nbayesian_poly00L = PolynomialFeatures(degree=4)\nbayesian_poly_X_train_deaths00L = bayesian_poly00L.fit_transform(X_train_deaths00L)\nbayesian_poly_X_test_deaths00L = bayesian_poly00L.fit_transform(X_test_deaths00L)\nbayesian_poly_future_forcast00L = bayesian_poly00L.fit_transform(future_forcast)\n\n# polynomial regression\nlinear_model00L = LinearRegression(normalize=True, fit_intercept=False)\nlinear_model00L.fit(poly_X_train_deaths00L, y_train_deaths00L)\ntest_linear_pred00L = linear_model00L.predict(poly_X_test_deaths00L)\nlinear_pred00L = linear_model00L.predict(poly_future_forcast)\nprint('MAE:', mean_absolute_error(test_linear_pred00L, y_test_deaths00L))\nprint('MSE:',mean_squared_error(test_linear_pred00L, y_test_deaths00L))\n\nprint(linear_model00L.coef_)\n\n\n# bayesian ridge polynomial regression\ntol = [1e-6, 1e-5, 1e-4, 1e-3, 1e-2]\nalpha_1 = [1e-7, 1e-6, 1e-5, 1e-4, 1e-3]\nalpha_2 = [1e-7, 1e-6, 1e-5, 1e-4, 1e-3]\nlambda_1 = [1e-7, 1e-6, 1e-5, 1e-4, 1e-3]\nlambda_2 = [1e-7, 1e-6, 1e-5, 1e-4, 1e-3]\nnormalize = [True, False]\n\nbayesian_grid00L = {'tol': tol, 'alpha_1': alpha_1, 'alpha_2' : alpha_2, 'lambda_1': lambda_1, 'lambda_2' : lambda_2, \n                 'normalize' : normalize}\n\nbayesian00L = BayesianRidge(fit_intercept=False)\nbayesian_search00L = RandomizedSearchCV(bayesian00L, bayesian_grid00L, scoring='neg_mean_squared_error', cv=3, return_train_score=True, n_jobs=-1, n_iter=40, verbose=1)\nbayesian_search00L.fit(bayesian_poly_X_train_deaths00L, y_train_deaths00L)\n\nbayesian_search00L.best_params_\n\nbayesian_deaths = bayesian_search00L.best_estimator_\ntest_bayesian_pred00L = bayesian_deaths.predict(bayesian_poly_X_test_deaths00L)\nbayesian_pred00L = bayesian_deaths.predict(bayesian_poly_future_forcast00L)\nprint('MAE:', mean_absolute_error(test_bayesian_pred00L, y_test_deaths00L))\nprint('MSE:',mean_squared_error(test_bayesian_pred00L, y_test_deaths00L))","e21ca109":"#50 Recovered\n%matplotlib inline\nplt.style.use('seaborn-darkgrid')\nplt.figure(figsize=(20, 12))\nplt.plot(adjusted_dates, total_recovered, linestyle='solid', color='black')\nplt.plot(future_forcast, svm_pred00L, linestyle='dotted', color='purple')\nplt.plot(future_forcast, linear_pred00L, linestyle='dotted', color='orange')\nplt.plot(future_forcast, bayesian_pred00L, linestyle='dotted', color='green')\nplt.title('# of Coronavirus Cases Over Time', size=30)\nplt.xlabel('Days Since 1\/22\/2020', size=30)\nplt.ylabel('# of Cases', size=30)\nplt.legend(['Recovered Cases', 'SVM predictions', 'Polynomial Regression Predictions', 'Bayesian Ridge Regression Predictions'])\nplt.xticks(size=20)\nplt.show()","fe40ad6a":"# Confirmed Cases","1aad6b5a":"# Recovered Cases","b2a6fa27":"# Death Cases"}}