{"cell_type":{"090fd8ef":"code","77934392":"code","637c35ab":"code","17857653":"code","8a8d9c96":"code","42f21028":"code","77d00429":"code","276b7074":"code","517815ea":"code","b4b96a57":"code","556aa188":"code","f78cd46b":"code","2da9ad7c":"code","9f51eb95":"code","8f3666c4":"code","85254435":"code","4823001e":"code","33aa96ac":"code","002a0df5":"code","f3568e5c":"code","83d57149":"code","aa1383d4":"code","cb254c4c":"code","0ea37fde":"code","aa0163fb":"code","031fd0b1":"code","838fe481":"code","d47a51ff":"code","cba50a94":"code","fcb1814c":"code","e5a84c92":"code","708c39e7":"code","c2bdf887":"code","af3bc7cb":"code","bcdb533e":"code","8fe00503":"code","0e75d05a":"code","360c3a73":"code","1f9532a6":"code","0e06fb8f":"code","5af05bb3":"code","de08ef45":"code","ef9cad4d":"code","95ba46b1":"code","ca7fa247":"markdown","11521033":"markdown","851f425c":"markdown","ea1b9fdf":"markdown","b67589bc":"markdown","264bda68":"markdown","32636505":"markdown","a631f78d":"markdown","f9d75378":"markdown","1eae384b":"markdown","d0746d7a":"markdown","e3af612d":"markdown","9241851a":"markdown","b7f59a8a":"markdown","f9965c8c":"markdown","f8d65dd8":"markdown","d7c25b0e":"markdown","080e12ee":"markdown","e6895805":"markdown","e0a242e3":"markdown","acfd4fd9":"markdown","998f8d0a":"markdown","9b708632":"markdown","c2ad5265":"markdown","28ca1474":"markdown","ae15fed6":"markdown","9a33d894":"markdown","f905a26f":"markdown","570f0425":"markdown","96c618d8":"markdown","b25a7156":"markdown","091a787c":"markdown","ad445b1b":"markdown","2a61fba0":"markdown"},"source":{"090fd8ef":"import pandas as pd\n\nall_data_4 = pd.read_csv(\"..\/input\/covid-19-race-gender-poverty-risk-us-county\/covid_data_log_200922.csv\")","77934392":"y = all_data_4[\"Cases\"]\n\nX = all_data_4.drop([\"Deaths\", \"Cases\", \"FIPS\", \"stateFIPS\"\n                     , \"countyFIPS_2d\", \"County\", \"State\", \"Risk_Cat\"],  axis=1)\n\nX","637c35ab":"# train-test split\nfrom sklearn.model_selection import train_test_split\n\n# allocate 70% at random to training data\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=42)","17857653":"from sklearn.ensemble import RandomForestRegressor\n\nreg = RandomForestRegressor(max_depth=2, random_state=10, oob_score=True, bootstrap=True)","8a8d9c96":"reg.fit(X_train, y_train)","42f21028":"# Get numerical feature importances\nimportances = list(reg.feature_importances_)\n\n# List of tuples with variable and importance\nfeature_importances = [(feature, round(importance, 2)) for feature, importance in zip(X_train, importances)]\n\n# Sort the feature importances by most important first\nfeature_importances = sorted(feature_importances, key = lambda x: x[1], reverse = True)\n\n# Print out the feature and importances \n[print('Variable: {:20} Importance: {}'.format(*pair)) for pair in feature_importances];","77d00429":"preds = reg.predict(X_test)","276b7074":"evaluate = pd.DataFrame({\n    \"actual\" : y_test\n    , \"predicted\" : preds\n})\n\nevaluate[\"error\"] = evaluate[\"actual\"] - evaluate[\"predicted\"]\n\nevaluate.head()","517815ea":"import numpy as np\n\n# Calculate the absolute errors\nerrors = abs(preds - y_test)\n\n# Print out the mean absolute error (mae)\nprint('Mean Absolute Error:', round(np.mean(errors), 2), 'degrees.')","b4b96a57":"all_data_5 = all_data_4.copy()\n\ny = all_data_5[\"Cases\"]\n\nX = all_data_5.drop([\"Deaths\", \"Cases\", \"FIPS\", \"stateFIPS\", \"countyFIPS_2d\", \"County\"\n                     , \"State\", \"Risk_Cat\", \"Risk_Index\", \"H_Male\", \"H_Female\", \"I_Male\", \"I_Female\"\n                    , \"A_Male\", \"A_Female\", \"NH_Male\", \"NH_Female\"],  axis=1)\n\nX","556aa188":"# train-test split\nfrom sklearn.model_selection import train_test_split\n\n# allocate 70% at random to training data\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=42)","f78cd46b":"from sklearn.ensemble import RandomForestRegressor\n\nreg = RandomForestRegressor(max_depth=2, random_state=10, oob_score=True, bootstrap=True)","2da9ad7c":"reg.fit(X_train, y_train)","9f51eb95":"# Get numerical feature importances\nimportances = list(reg.feature_importances_)\n\n# List of tuples with variable and importance\nfeature_importances = [(feature, round(importance, 2)) for feature, importance in zip(X_train, importances)]\n\n# Sort the feature importances by most important first\nfeature_importances = sorted(feature_importances, key = lambda x: x[1], reverse = True)\n\n# Print out the feature and importances \n[print('Variable: {:20} Importance: {}'.format(*pair)) for pair in feature_importances];","8f3666c4":"preds = reg.predict(X_test)","85254435":"evaluate = pd.DataFrame({\n    \"actual\" : y_test\n    , \"predicted\" : preds\n})\n\nevaluate[\"error\"] = evaluate[\"actual\"] - evaluate[\"predicted\"]\n\nevaluate.head()","4823001e":"# Calculate the absolute errors\nerrors = abs(preds - y_test)\n\n# Print out the mean absolute error (mae)\nprint('Mean Absolute Error:', round(np.mean(errors), 2), 'degrees.')","33aa96ac":"all_data_6 = all_data_4.copy()","002a0df5":"y = all_data_6[\"Deaths\"]\n\nX = all_data_6.drop([\"Deaths\", \"FIPS\", \"stateFIPS\"\n                     , \"countyFIPS_2d\", \"County\", \"State\", \"Risk_Cat\"],  axis=1)\n\nX","f3568e5c":"# train-test split\nfrom sklearn.model_selection import train_test_split\n\n# allocate 70% at random to training data\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=42)","83d57149":"from sklearn.ensemble import RandomForestRegressor\n\nreg = RandomForestRegressor(max_depth=2, random_state=10, oob_score=True, bootstrap=True)","aa1383d4":"reg.fit(X_train, y_train)","cb254c4c":"# Get numerical feature importances\nimportances = list(reg.feature_importances_)\n\n# List of tuples with variable and importance\nfeature_importances = [(feature, round(importance, 2)) for feature, importance in zip(X_train, importances)]\n\n# Sort the feature importances by most important first\nfeature_importances = sorted(feature_importances, key = lambda x: x[1], reverse = True)\n\n# Print out the feature and importances \n[print('Variable: {:20} Importance: {}'.format(*pair)) for pair in feature_importances];","0ea37fde":"preds = reg.predict(X_test)","aa0163fb":"evaluate = pd.DataFrame({\n    \"actual\" : y_test\n    , \"predicted\" : preds\n})\n\nevaluate[\"error\"] = evaluate[\"actual\"] - evaluate[\"predicted\"]\n\nevaluate.head()","031fd0b1":"# Calculate the absolute errors\nerrors = abs(preds - y_test)\n\n# Print out the mean absolute error (mae)\nprint('Mean Absolute Error:', round(np.mean(errors), 2), 'degrees.')","838fe481":"all_data_7 = all_data_4.copy()","d47a51ff":"y = all_data_7[\"Deaths\"]\n\nX = all_data_7.drop([\"Deaths\", \"FIPS\", \"stateFIPS\", \"countyFIPS_2d\", \"County\"\n                     , \"State\", \"Risk_Cat\", \"I_Male\", \"I_Female\"\n                    , \"A_Male\", \"A_Female\", \"NH_Male\", \"NH_Female\"],  axis=1)\n\nX","cba50a94":"# train-test split\nfrom sklearn.model_selection import train_test_split\n\n# allocate 70% at random to training data\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=42)","fcb1814c":"from sklearn.ensemble import RandomForestRegressor\n\nreg = RandomForestRegressor(max_depth=2, random_state=10, oob_score=True, bootstrap=True)","e5a84c92":"reg.fit(X_train, y_train)","708c39e7":"# Get numerical feature importances\nimportances = list(reg.feature_importances_)\n\n# List of tuples with variable and importance\nfeature_importances = [(feature, round(importance, 2)) for feature, importance in zip(X_train, importances)]\n\n# Sort the feature importances by most important first\nfeature_importances = sorted(feature_importances, key = lambda x: x[1], reverse = True)\n\n# Print out the feature and importances \n[print('Variable: {:20} Importance: {}'.format(*pair)) for pair in feature_importances];","c2bdf887":"preds = reg.predict(X_test)","af3bc7cb":"evaluate = pd.DataFrame({\n    \"actual\" : y_test\n    , \"predicted\" : preds\n})\n\nevaluate[\"error\"] = evaluate[\"actual\"] - evaluate[\"predicted\"]\n\nevaluate.head()","bcdb533e":"# Calculate the absolute errors\nerrors = abs(preds - y_test)\n\n# Print out the mean absolute error (mae)\nprint('Mean Absolute Error:', round(np.mean(errors), 2), 'degrees.')","8fe00503":"all_data_8 = all_data_4.copy()","0e75d05a":"y = all_data_8[\"Deaths\"]\n\nX = all_data_8.drop([\"Cases\", \"Deaths\", \"FIPS\", \"stateFIPS\", \"countyFIPS_2d\", \"County\"\n                     , \"State\", \"Risk_Cat\", \"W_Male\", \"B_Male\", \"H_Male\"\n                     , \"I_Male\", \"A_Male\", \"NH_Male\"],  axis=1)\n\nX","360c3a73":"# train-test split\nfrom sklearn.model_selection import train_test_split\n\n# allocate 70% at random to training data\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=42)","1f9532a6":"from sklearn.ensemble import RandomForestRegressor\n\nreg = RandomForestRegressor(max_depth=2, random_state=10, oob_score=True, bootstrap=True)","0e06fb8f":"reg.fit(X_train, y_train)","5af05bb3":"# Get numerical feature importances\nimportances = list(reg.feature_importances_)\n\n# List of tuples with variable and importance\nfeature_importances = [(feature, round(importance, 2)) for feature, importance in zip(X_train, importances)]\n\n# Sort the feature importances by most important first\nfeature_importances = sorted(feature_importances, key = lambda x: x[1], reverse = True)\n\n# Print out the feature and importances \n[print('Variable: {:20} Importance: {}'.format(*pair)) for pair in feature_importances];","de08ef45":"preds = reg.predict(X_test)","ef9cad4d":"evaluate = pd.DataFrame({\n    \"actual\" : y_test\n    , \"predicted\" : preds\n})\n\nevaluate[\"error\"] = evaluate[\"actual\"] - evaluate[\"predicted\"]\n\nevaluate.head()","95ba46b1":"# Calculate the absolute errors\nerrors = abs(preds - y_test)\n\n# Print out the mean absolute error (mae)\nprint('Mean Absolute Error:', round(np.mean(errors), 2), 'degrees.')","ca7fa247":"### Prediction","11521033":"### Fitting Training Data","851f425c":"### Prediction","ea1b9fdf":"### Fitting Training Data","b67589bc":"### Prediction","264bda68":"# Next Steps (Machine Learning)\n1. Produce Mean Squared Error (MSE) metrics for all models and create a comparsion table\n2. Compare model using alternative algorithms and illustrate finding using MSE metrics.\n3. Test model with fresh morbitity and mortality data from the period (1 August to 30 September)\n4. Present prototype and seek out peer reviewers and collaborators \n5. Replicate for other geographies.","32636505":"Use the features importance methods in Random Forest (out-of-bag=TRUE), look for variable importance results, test and evaluate.","a631f78d":"### Algorithm Selected\n\nRandom Forest Regressor selected due to likelihood that it handles non-normalised population data that has an extremely large range with greater efficiency, plus feature importance evaluation.\n\nUse the features importance methods in Random Forest (out-of-bag=TRUE), look for variable importance results, test and evaluate.","f9d75378":"### Evaluation","1eae384b":"### Train \/ Test Split","d0746d7a":"Input and output variable defined. Non-numerical features dropped. ","e3af612d":"### Iteration 1B: Most Important Features Only\n\n### Feature & Target Selection\n\nSecond model iteration guided by feature importance data from 1st Iteration. Input and output variable defined. Non-numeric features dropped.","9241851a":"### Feature Importances","b7f59a8a":"Use the features importance methods in Random Forest (out-of-bag=TRUE), look for variable importance results, test and evaluate.","f9965c8c":"### Conclusion (Morbidity)\n\nThere is no difference in MAE between Model Iteration 1A and 1B. The high importance ranking of Black Females and Poverty supports advocacy that promotes universal access health care for Black women and people living in poverty as essential intervention that may contribute to the reduction of Covid 19 morbidity. ","f8d65dd8":"### Evaluation","d7c25b0e":"### Conclusion (Mortality)\nThe presence of Covid Case data diminished the importance of race, gender and poverty in this model. However, when Cases are not a constant, the importance of Black Females in determining mortality outcomes was significantly more significant than other features. Risk Index did not play an important role in the model, possibly due to the potential Poisson Distribution that was observed in Phase 2 of this project.","080e12ee":"###\u00a0Train \/ Test Split","e6895805":"### Prototype: Machine Learning Phase\n\n# Correlations between demographic and socio-economic factors and incidence of Covid 19 infection and mortality in U.S. Counties\n\n#### Objective\nGain a greater understanding of the relationship between race\/ethnicity, gender, poverty and severe health conditions and Covid 19 morbidity and mortality.\nApply skills recently acquired via part-time Data Science course at General Assembly Australia.\n\n#### Method\nPrevious project phases completed:\n1. Source data on race\/ethnicity, gender, poverty and severe health conditions and Covid 19 morbidity and mortality at the U.S county level\n2. Clean and pre-process data according to unique identifiers\n3. Conduct exploratory data analysis\n4. Test hypothesis that no relationship exists between features using statistical regression (Ordinary Least Squares).\n\nIn this phase:\n5. Test hypothesis that features with highest importance are <b>unable<\/b> to predict Covid 19 morbidity and mortality using machine learning (Random Forest).\n6. Compare accuracy of Random Forest algorhythm against an alternative algorhythm.\n7. Articulate conclusions and next steps.\n\n### Data Sources\nData for this prototype was sourced and cleaned from the following sources:\n1. Covid 19 Morbidity by U.S Count (USA Facts\/U.S CDC, 2020): timeseries from 22\/01\/2020 to 31\/07\/2020 \n2. Covide 19 Mortality by U.S. County (USA Facts\/U.S. CDC, 2020): timeseries from 22\/01\/2020 to 31\/07\/2020\n3. Poverty Universe, All ages, by U.S County (SAIPE, U.S Census, 2019)\n4. Annual County Resident Population Estimates by Age, Sex, Race, and Hispanic Origin (U.S Census, 2019)\n5. Severe COVID-19 Health Risk Index by U.S County (Policy Map\/NY Times\/2017 SMART-BRFSS, U.S CDC, 2017) \n\n### Acknowledgments\n- Thanks to my instructors Andrew Worsely, Lydia Peabody, the team at General Assembly and my peers in GA Data Science June-August 2020.\n- Julian Hatwell","e0a242e3":"### Fit Training Data","acfd4fd9":"### Feature Importances","998f8d0a":"### Model Fitting","9b708632":"## Model 2: Predicting Mortality\n\nApply statistical insights to create and test a machine learning model where y = mortality (deaths) using Random Forest algorithm as a baseline.\n\n### Iteration 2A: All Features\n\n### Feature & Target Selection\n\nPre-processed data from Prototype Phase 1 imported where all population values and values for Risk Index are log-transformed.  ","c2ad5265":"### Evaluation","28ca1474":"### Feature Importances","ae15fed6":"### Model Evaluation","9a33d894":"### Evaluation","f905a26f":"### Iteration 2B: Female Population Features (without cases)\n\n### Feature & Target Selection","570f0425":"### Feature Importance","96c618d8":"### Iteration 2B: Important Features (with Cases)\n\n### Feature & Target Selection","b25a7156":"###\u00a0Prediction","091a787c":"Use the features importance methods in Random Forest (out-of-bag=TRUE), look for variable importance results, test and evaluate.","ad445b1b":"## Model 1: Predicting Morbidity\n\nApply statistical insights to create and test a machine learning model where y = morbitity (cases) using Random Forest algorithm as a baseline.\n\n### Iteration 1A: All Features Used\n\n### Feature & Target Selection\n\nPre-processed data from Prototype Phase 1 imported where all population values and values for Risk Index are log-transformed.  ","2a61fba0":"### Feature Importance"}}