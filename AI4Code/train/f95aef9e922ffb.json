{"cell_type":{"4e002954":"code","a01fcc93":"code","d78c7856":"code","6ddaaa75":"markdown"},"source":{"4e002954":"import numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import ListedColormap","a01fcc93":"def recursion(board):\n    \n    for row in range(queens_number):\n        for column in range(queens_number):\n            if board[row][column] == 0:\n                \n                suitable_for_place_a_queen = True\n                \n                for square in range(queens_number):        #checks if there is any queen on the same row\n                    if board[row][square] == 1:\n                        suitable_for_place_a_queen = False\n                        \n                for square in range(queens_number):        #checks if there is any queen on the same column\n                    if board[square][column] == 1:\n                        suitable_for_place_a_queen = False\n                        \n                for horizontal in range(queens_number):    #checks if there is any queen on diagonal\n                    for vertical in range(queens_number):\n                        if board[horizontal][vertical] == 1:\n                            if abs(horizontal - row) == abs(vertical - column):\n                                suitable_for_place_a_queen = False\n                                \n                if suitable_for_place_a_queen:\n                    board[row][column] = 1\n                    recursion(board)\n                    \n                    if sum(sum(queen) for queen in board) == queens_number:\n                        return board\n                    \n                    board[row][column] = 0\n                    \n    return board","d78c7856":"for queens_number in range(10, 3, -1):\n        \n    board = np.zeros([queens_number, queens_number], dtype = int).tolist()\n    area_of_board = queens_number * queens_number\n    \n    recursion(board)\n    \n    print(\"Number of queens: \", queens_number)\n    plt.imshow(board, cmap = ListedColormap([\"black\", \"white\"]))\n    plt.show()\n    \n    for row in range(queens_number):\n        board[row] = [\"Q\" if queen == 1 else \"-\" for queen in board[row]]\n        \n    print(np.array(board))","6ddaaa75":"Here is an algorithm that can solve n-queens problem with recursive functions of Python.\n\nThe function searches every square of the board and checks the square if it is suitable for place a queen. With this feature, recursive functions act as \"depth first search\" for this algorithm.\n\nThe solution is developed by inspired from Egemen \u00d6kte's study about solution of 8 queens problem with recursive functions. Link for the article about 8 queens problem: https:\/\/medium.com\/@egemenokte\/solving-the-8-queens-puzzle-recursively-with-python-6440078b68ad"}}