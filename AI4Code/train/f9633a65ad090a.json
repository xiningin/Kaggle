{"cell_type":{"e7b6fa02":"code","f95cb35f":"code","5f750760":"code","eb4e573d":"code","243cd7e8":"code","1ba07fc5":"code","41702adb":"code","3b317140":"code","b391603f":"code","fcc7d7e8":"code","0288b6e4":"code","aa1e835d":"code","60499a7b":"code","6a93babe":"code","ce0816f7":"code","df02936e":"code","a1e6ffc2":"code","c05007b5":"code","76d4829a":"markdown","d5ae696b":"markdown","7bd54eb2":"markdown","3f73a613":"markdown","2bad0be3":"markdown"},"source":{"e7b6fa02":"# LOAD LIBRARIES\nimport numpy as np, pandas as pd, os\nimport matplotlib.pyplot as plt, cv2\nimport tensorflow as tf, re, math","f95cb35f":"# PATHS TO IMAGES\nPATH= '..\/input\/panda-resized-train-data-512x512\/train_images\/train_images\/'\nIMGS = os.listdir(PATH)\nprint('There are %i train images '%(len(IMGS)))","5f750760":"# LOAD TRAIN META DATA\ndf = pd.read_csv('..\/input\/prostate-cancer-grade-assessment\/train.csv')\n#df.rename({'image_id':'image_id'},axis=1,inplace=True)\ndf.head()","eb4e573d":"test = pd.read_csv('..\/input\/prostate-cancer-grade-assessment\/test.csv')\ntest.head()","243cd7e8":"# COMBINE TRAIN AND TEST TO ENCODE TOGETHER\ncols = test.columns\ncomb = pd.concat([df[cols],test[cols]],ignore_index=True,axis=0).reset_index(drop=True)","1ba07fc5":"print(comb)","41702adb":"# LABEL ENCODE ALL STRINGS\n\ncats = ['data_provider'] \nfor c in cats:\n    comb[c],mp = comb[c].factorize()\n    print(mp)\n\n","3b317140":"# REWRITE DATA TO DATAFRAMES\ndf[cols] = comb.loc[:df.shape[0]-1,cols].values\ntest[cols] = comb.loc[df.shape[0]:,cols].values","b391603f":"print(df)","fcc7d7e8":"# LABEL ENCODE TRAIN SOURCE\ndf.data_provider,mp = df.data_provider.factorize()\nprint(mp)","0288b6e4":"def _bytes_feature(value):\n  \"\"\"Returns a bytes_list from a string \/ byte.\"\"\"\n  if isinstance(value, type(tf.constant(0))):\n    value = value.numpy() # BytesList won't unpack a string from an EagerTensor.\n  return tf.train.Feature(bytes_list=tf.train.BytesList(value=[value]))\n\ndef _float_feature(value):\n  \"\"\"Returns a float_list from a float \/ double.\"\"\"\n  return tf.train.Feature(float_list=tf.train.FloatList(value=[value]))\n\ndef _int64_feature(value):\n  \"\"\"Returns an int64_list from a bool \/ enum \/ int \/ uint.\"\"\"\n  return tf.train.Feature(int64_list=tf.train.Int64List(value=[value]))","aa1e835d":"def serialize_example(feature0, feature1, feature2,feature3):\n  feature = {\n      'image': _bytes_feature(feature0),\n      'image_id': _bytes_feature(feature1),\n      'isup_grade': _int64_feature(feature2),\n      #'gleason_score': _bytes_feature(feature3),\n      'data_provider': _int64_feature(feature3),\n\n  }\n  example_proto = tf.train.Example(features=tf.train.Features(feature=feature))\n  return example_proto.SerializeToString()","60499a7b":"SIZE = 2200\nCT = len(IMGS)\/\/SIZE + int(len(IMGS)%SIZE!=0)\nfor j in range(CT):\n    print(); print('Writing TFRecord %i of %i...'%(j,CT))\n    CT2 = min(SIZE,len(IMGS)-j*SIZE)\n    with tf.io.TFRecordWriter('train%.2i-%i.tfrec'%(j,CT2)) as writer:\n        for k in range(CT2):\n            img = cv2.imread(PATH+IMGS[SIZE*j+k])\n            img = cv2.cvtColor(img, cv2.COLOR_RGB2BGR) # Fix incorrect colors\n            img = cv2.imencode('.jpg', img, (cv2.IMWRITE_JPEG_QUALITY, 94))[1].tostring()\n            name = IMGS[SIZE*j+k].split('.')[0]\n            row = df.loc[df.image_id==name]\n            example = serialize_example(\n                img, str.encode(name),\n                row.isup_grade.values[0],                       \n                #row.gleason_score.values[0],\n                row.data_provider.values[0]\n            )\n            writer.write(example)\n            if k%100==0: print(k,', ',end='')","6a93babe":"! ls -l","ce0816f7":"# numpy and matplotlib defaults\nnp.set_printoptions(threshold=15, linewidth=80)\nCLASSES = [0,1]\n\ndef batch_to_numpy_images_and_labels(data):\n    images, labels = data                                                      \n    numpy_images = images.numpy()\n    numpy_labels = labels.numpy()\n    #if numpy_labels.dtype == object: # binary string in this case, these are image ID strings\n    #    numpy_labels = [None for _ in enumerate(numpy_images)]\n    # If no labels, only image IDs, return None for labels (this is the case for test data)\n    return numpy_images, numpy_labels\n\ndef title_from_label_and_target(label, correct_label):\n    if correct_label is None:\n        return CLASSES[label], True\n    correct = (label == correct_label)\n    return \"{} [{}{}{}]\".format(CLASSES[label], 'OK' if correct else 'NO', u\"\\u2192\" if not correct else '',\n                                CLASSES[correct_label] if not correct else ''), correct\n\ndef display_one_flower(image, title, subplot, red=False, titlesize=16):\n    plt.subplot(*subplot)\n    plt.axis('off')\n    plt.imshow(image)\n    if len(title) > 0:\n        plt.title(title, fontsize=int(titlesize) if not red else int(titlesize\/1.2), color='red' if red else 'black', fontdict={'verticalalignment':'center'}, pad=int(titlesize\/1.5))\n    return (subplot[0], subplot[1], subplot[2]+1)\n    \ndef display_batch_of_images(databatch, predictions=None):\n    \"\"\"This will work with:\n    display_batch_of_images(images)\n    display_batch_of_images(images, predictions)\n    display_batch_of_images((images, labels))\n    display_batch_of_images((images, labels), predictions)\n    \"\"\"\n    # data\n    images, labels = batch_to_numpy_images_and_labels(databatch)\n    if labels is None:\n        labels = [None for _ in enumerate(images)]\n        \n    # auto-squaring: this will drop data that does not fit into square or square-ish rectangle\n    rows = int(math.sqrt(len(images)))\n    cols = len(images)\/\/rows\n        \n    # size and spacing\n    FIGSIZE = 13.0\n    SPACING = 0.1\n    subplot=(rows,cols,1)\n    if rows < cols:\n        plt.figure(figsize=(FIGSIZE,FIGSIZE\/cols*rows))\n    else:\n        plt.figure(figsize=(FIGSIZE\/rows*cols,FIGSIZE))\n    \n    # display\n    for i, (image, label) in enumerate(zip(images[:rows*cols], labels[:rows*cols])):\n        title = label\n        correct = True\n        if predictions is not None:\n            title, correct = title_from_label_and_target(predictions[i], label)\n        dynamic_titlesize = FIGSIZE*SPACING\/max(rows,cols)*40+3 # magic formula tested to work from 1x1 to 10x10 images\n        subplot = display_one_flower(image, title, subplot, not correct, titlesize=dynamic_titlesize)\n    \n    #layout\n    plt.tight_layout()\n    if label is None and predictions is None:\n        plt.subplots_adjust(wspace=0, hspace=0)\n    else:\n        plt.subplots_adjust(wspace=SPACING, hspace=SPACING)\n    plt.show()","df02936e":"def decode_image(image_data):\n    image = tf.image.decode_jpeg(image_data, channels=3)\n    image = tf.cast(image, tf.float32) \/ 255.0  # convert image to floats in [0, 1] range\n    image = tf.reshape(image, [*IMAGE_SIZE, 3]) # explicit size needed for TPU\n    return image\n\ndef read_labeled_tfrecord(example):\n    LABELED_TFREC_FORMAT = {\n        \"image\": tf.io.FixedLenFeature([], tf.string), # tf.string means bytestring\n        \"image_id\": tf.io.FixedLenFeature([], tf.string),  # shape [] means single element\n    }\n    example = tf.io.parse_single_example(example, LABELED_TFREC_FORMAT)\n    image = decode_image(example['image'])\n    label = example['image_id']\n    return image, label # returns a dataset of (image, label) pairs\n\ndef load_dataset(filenames, labeled=True, ordered=False):\n    # Read from TFRecords. For optimal performance, reading from multiple files at once and\n    # disregarding data order. Order does not matter since we will be shuffling the data anyway.\n\n    ignore_order = tf.data.Options()\n    if not ordered:\n        ignore_order.experimental_deterministic = False # disable order, increase speed\n\n    dataset = tf.data.TFRecordDataset(filenames, num_parallel_reads=AUTO) # automatically interleaves reads from multiple files\n    dataset = dataset.with_options(ignore_order) # uses data as soon as it streams in, rather than in its original order\n    dataset = dataset.map(read_labeled_tfrecord)\n    # returns a dataset of (image, label) pairs if labeled=True or (image, id) pairs if labeled=False\n    return dataset\n\ndef get_training_dataset():\n    dataset = load_dataset(TRAINING_FILENAMES, labeled=True)\n    dataset = dataset.repeat() # the training dataset must repeat for several epochs\n    dataset = dataset.shuffle(2048)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.prefetch(AUTO) # prefetch next batch while training (autotune prefetch buffer size)\n    return dataset\n\ndef count_data_items(filenames):\n    # the number of data items is written in the name of the .tfrec files, i.e. flowers00-230.tfrec = 230 data items\n    n = [int(re.compile(r\"-([0-9]*)\\.\").search(filename).group(1)) for filename in filenames]\n    return np.sum(n)","a1e6ffc2":"# INITIALIZE VARIABLES\nIMAGE_SIZE= [512,512]; BATCH_SIZE = 32\nAUTO = tf.data.experimental.AUTOTUNE\nTRAINING_FILENAMES = tf.io.gfile.glob('train*.tfrec')\nprint('There are %i train images'%count_data_items(TRAINING_FILENAMES))","c05007b5":"# DISPLAY TRAIN IMAGES\ntraining_dataset = get_training_dataset()\ntraining_dataset = training_dataset.unbatch().batch(20)\ntrain_batch = iter(training_dataset)\n\ndisplay_batch_of_images(next(train_batch))","76d4829a":"# Load Meta Data","d5ae696b":"> # Write TFRecords - Train\n","7bd54eb2":"# How To Create TFRecords\n* create TFRecords of 512x512x3 to train our model for further information check the link below\n[https:\/\/www.tensorflow.org\/tutorials\/load_data\/tfrecord](http:\/\/)\n* for the data set check the link bellow (created by guergueb takfarines student at moncton university canada)\n[https:\/\/www.kaggle.com\/fifantor50\/tfrec-prostate-tko](http:\/\/)\n* see also\n[https:\/\/www.kaggle.com\/cdeotte\/how-to-create-tfrecords](http:\/\/)\n","3f73a613":"# Verify TFRecords\n","2bad0be3":"# Label Encode Meta Data\nso label will be ecoded like this 0, 1, 2, 3,4,5 as in the isup_grade"}}