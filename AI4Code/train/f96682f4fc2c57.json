{"cell_type":{"d86403ee":"code","fb5f1f79":"code","9ec292bd":"code","bd7f6ebb":"code","ac7967b6":"code","223595f2":"code","3b8a32ff":"code","8d2da7b0":"code","bf087c41":"code","8e089cf6":"code","466d8882":"code","64eaa560":"code","fafb51ae":"code","90897d6a":"code","50392490":"code","d830e8c6":"code","4940e46d":"code","23662153":"code","717fd239":"code","9b0e88b6":"code","10946c59":"code","b033ed82":"code","a88759c6":"code","9c47ecdd":"markdown","35a4b00c":"markdown","f0682cf5":"markdown","704e65d3":"markdown","7f9e70df":"markdown"},"source":{"d86403ee":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport cv2\nimport os","fb5f1f79":"def backread(im):\n    return cv2.imread(im)[:,:,::-1]\n\nedf = pd.read_pickle(\"..\/input\/applied-ai-connect-4\/assignment_1\/edf.pkl\")\npic = backread(\"..\/input\/applied-ai-connect-4\/assignment_1\/connect4.png\")\nred = backread(\"..\/input\/applied-ai-connect-4\/assignment_1\/red.png\")\nyellow = backread(\"..\/input\/applied-ai-connect-4\/assignment_1\/yellow.png\")\nwhite = backread(\"..\/input\/applied-ai-connect-4\/assignment_1\/white.png\")\nData = pd.read_csv(\"..\/input\/applied-ai-connect-4\/assignment_1\/Examples.csv\")\n\ndef synthetic(mat):\n    mpic = pic.copy()\n    for i in edf.index:\n        w = edf.loc[i]\n        x1,y1 = w['left']\n        f = w['f']\n        if mat[w['x'],w['y']] == 0:    \n            mpic[y1:y1+f,x1:x1+f] = white\n        elif mat[w['x'],w['y']] == 1:\n            mpic[y1:y1+f,x1:x1+f] = red\n        elif mat[w['x'],w['y']]== 2:\n            mpic[y1:y1+f,x1:x1+f] = yellow\n        else:\n            mpic[y1:y1+f,x1:x1+f] = 0\n    return mpic\n\ndef print_board(board):\n    f,ax = plt.subplots(figsize = (6,6))\n    plt.imshow(synthetic(board))\n    plt.show()\n    \ndef loadfromarray(ar):\n    ar = ar.values\n    ar = ar[0][1:43]\n    try:\n        ar = ar.reshape(6,7).astype('float')\n        return ar\n    except:\n        ar = ar.reshape(6,7)\n        return ar","9ec292bd":"redwins = loadfromarray(Data[Data.file_names == 'redwins'])\nyellowwins = loadfromarray(Data[Data.file_names == 'yellowwins'])\nrednext = loadfromarray(Data[Data.file_names == 'redisnext'])\nyellownext = loadfromarray(Data[Data.file_names == 'yellownext'])\nfloating_piece = loadfromarray(Data[Data.file_names == 'floating_piece'])\nproportion = loadfromarray(Data[Data.file_names == 'invalid_proportion'])\noutof = loadfromarray(Data[Data.file_names == 'corrupt_'])\nnonnum = loadfromarray(Data[Data.file_names == 'corrupt'])","bd7f6ebb":"\"\"\"\nCreate a function isCorrupt that classifies any board that has non \nnumeric values or values that are not in range as Corrupt\n[valid board: numeric(0,1,2), function output:String & value:Corrupt]\n\"\"\"\ndef isCorrupt(board):\n    pass","ac7967b6":"isCorrupt(nonnum)","223595f2":"isCorrupt(outof)","3b8a32ff":"isCorrupt(yellowwins)","8d2da7b0":"def Isfloating(board):\n    board = np.flip(board)\n    for i in range(len(board)):\n        if i < len(board)-1:\n            for j in np.where(board[i] == 0)[0]:\n                #-------------------------------------------------------------------------------------\n                \"\"\"\n                Complete the code below\n                The Function should return True if such a condition exists refer to part 1 \n                [Floating pieces cannot exist]\n                \"\"\"\n                #-------------------------------------------------------------------------------------\n    return False","bf087c41":"Isfloating(floating_piece)","8e089cf6":"Isfloating(proportion)","466d8882":"def IsProportional(board):\n    red_pieces = len(board[np.where(board == 1)])\n    #-------------------------------------------------------------------------------------\n    \"\"\"\n    Insert code that counts the number of Yellow pieces\n    \"\"\"\n    # Your Code Goes Here\n    #yellow_pieces = \n    \n    \n    #-------------------------------------------------------------------------------------\n    \n    #Condition: if the difference between the counts is more than 1, return false\n    \"\"\"\n    Write code to check 1st condition\n    \"\"\"\n    # Your Code Goes Here\n    #if \n        #return False\n        \n    #-------------------------------------------------------------------------------------\n    \n    \n    \n    \"\"\"\n    Remove the comments from the code below once you complete the part above\n    \"\"\"\n    #Condition: As red always starts, yellow count can never exceeed red count\n    #elif yellow_pieces > red_pieces:\n    #    return False","64eaa560":"IsProportional(proportion)","fafb51ae":"def WhosTurn(board):\n    \"\"\"\n    Write code to output whos turn it is based on the board\n    \n    Logic: If there are equal pieces, than its reds turn, if red has more pieces its yellows turn\n    \n    Also if the board is empty its Reds turn\n    \n    \"\"\"\n    red_pieces = len(board[np.where(board == 1)])\n    \"\"\"\n    Insert code that counts the number of Yellow pieces\n    \"\"\"\n    # Your Code Goes Here\n    #yellow_pieces = \n    \n    \n    #-------------------------------------------------------------------------------------\n    \n    \"\"\"\n    Write code that executes the logic described above\n    \n    \"\"\"\n    \n    # Your Code Goes Here\n    ","90897d6a":"WhosTurn(rednext)","50392490":"WhosTurn(yellownext)","d830e8c6":"def check_win(board, piece):\n    \n    board = np.flip(board)\n    ROW_COUNT = 6\n    COLUMN_COUNT = 7\n    \n    #-------------------------------------------------------------------------------------\n    # Check horizontal locations for win\n    for c in range(COLUMN_COUNT-3):\n        for r in range(ROW_COUNT):\n            if board[r][c] == piece and board[r][c+1] == piece and board[r][c+2] == piece and board[r][c+3] == piece:\n                return True\n     \n    \n    \n    \n    #-------------------------------------------------------------------------------------\n    \"\"\"\n    Write the code to see if any game was won, with respect to each column\n    \"\"\"\n    # Check vertical locations for win\n            \n     \n    #Your Code Goes Here\n    \n    \n            \n    #-------------------------------------------------------------------------------------\n    \"\"\"\n    Remove the comments once you have finished the code above. The code below returns true if the game is won\n    by a player ['piece' = (1 or 2)]; with 4 in a row connected diaganolly. Use the same method to complete the \n    functions that are above.\n    \n    # Check positively sloped diaganols\n    for c in range(COLUMN_COUNT-3):\n        for r in range(ROW_COUNT-3):\n            if board[r][c] == piece and board[r+1][c+1] == piece and board[r+2][c+2] == piece and board[r+3][c+3] == piece:\n                return True\n                \n                \n    # Check negatively sloped diaganols\n    for c in range(COLUMN_COUNT-3):\n        for r in range(3, ROW_COUNT):\n            if board[r][c] == piece and board[r-1][c+1] == piece and board[r-2][c+2] == piece and board[r-3][c+3] == piece:\n                return True\n    \"\"\"\n            ","4940e46d":"check_win(redwins,1)","23662153":"check_win(yellowwins,2)","717fd239":"valid = pd.read_csv(\"..\/input\/validationcsv\/Validation (1).csv\")","9b0e88b6":"#This classifier function needs to return the class in order for the testinbg code below to work.\n\ndef classifier(B):\n    \"\"\"\n    Build a classifier\n    \n    If B is invalid return(1)\n    \n    \"\"\"\n    return(1)","10946c59":"#Test you code with the validation set, this function will test all of your code to see how well it does against the \n#validation set, if you get \"100% correct\".  all of your functions worked correctly.  If not it will show the \n#ones you got wrong.  \nwcount = 0\nfor i in valid.file_names:\n    board = loadfromarray(valid[valid.file_names == i])\n    if valid[valid.file_names == i].state.values[0] != classifier(board):\n        print('You scored '+valid[valid.file_names == i].file_names.values[0]+' as '+str(classifier(board))+' the ground truth is '+ str(valid[valid.file_names == i].state.values[0]))     \n        wcount += 1\nif wcount == 0:\n    print('100% correct')","b033ed82":"#insert a board you got wrong below to print the board\n# example board = loadfromarray(valid[valid.file_names == 'board_7'])\nboard = loadfromarray(valid[valid.file_names == 'board_7'])\nprint_board(board)","a88759c6":"Name = None # Replace None with your name","9c47ecdd":"<span style=\"font-family:Georgia; font-size:1.2em;\">\nYour End Goals is too classify  all files that are in the \"Data\" folder. To help you build a Classifier, we have created some helper functions. You can make your own, but if you want to use our you will have to complete the functions and create an aggregate classifier at the end.\n<\/span>","35a4b00c":"<span style=\"font-family:Georgia; font-size:1.2em;\">\nExpected results, when you run isfloating on floating piece, it should return True, but it shouldn't when you enter proportion.\n<\/span>","f0682cf5":"<span style=\"font-family:Georgia; font-size:1.2em;\">\nExpected results, when you run isCorrupt on nonum and outof, it should return Corrupt, but it shouldn't when you enter yellow wins.\n<\/span>","704e65d3":"<span style=\"font-family:Georgia; font-size:1.2em;\">\nQ) Complete the function Classifier.\n<br\/>\nYour Goals is to read all board matrices in the validation set. A file called Validation.csv is also present, make sure when you read each file from your directory, it is read in the order of the csv file. Then use the classifier to classify each loaded file into the following states.  There is a fuinction below that will automatically test this function for you.  \n<br\/>\n\n\n|   |   |\n|---|---|\n|Description  |   State|\n|Invalid  |   1|\n|Reds Turn  |   2|\n|Yellows Turn  |   3|\n|Red Wins  |   4|\n|Yellow Wins  |   5|\n|Corrupt Data |   6|\n\n<br\/>\n<br\/>\nPlease refer to the examples provided in part 1 of the notebook to understand the classification process. <b>Warning! The Numeric state values may not match, please use the numeric values provided in the table above<\/b>\n<br\/>\n<br\/>\n<\/span>","7f9e70df":"<span style=\"font-family:Georgia; font-size:1.2em;\">\nHint: use the functions above and if then conditions to sequentialy check what 'state' it falls in and output the corresponding numeric value from the table above. <b> The Order of the if then conditions matter, so be careful<\/b>\n<\/span>"}}