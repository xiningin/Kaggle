{"cell_type":{"b25bc048":"code","4b26ea09":"code","5307a6b6":"code","2c0e2ca1":"code","57514c83":"code","671fd925":"code","a622b1fc":"code","b36c1290":"code","bb612b3a":"code","739ffcd2":"code","b26387c1":"code","2be16043":"code","e01aad16":"code","22f48533":"code","69c0c746":"code","3b8ca1f7":"code","360fbcb7":"code","bbe3c5a8":"code","b7462cf7":"code","2e7dfc45":"code","c71200f2":"code","13705924":"code","b5aa6a3f":"code","9c4a61a6":"code","30e4c149":"code","dab05a7b":"code","8c58a442":"code","05be5285":"code","d6775864":"code","6b26c193":"code","f9648923":"code","be6b79a6":"code","091c16d4":"code","3cfd985e":"code","dd0dc9c8":"code","5df591c8":"code","0a60f0d4":"code","a06558a2":"code","f1622b51":"code","d6d6acaa":"code","c2fe7d50":"code","5cd2d70d":"code","6fb8ecec":"code","9957a89e":"code","891a7c17":"code","b25cf839":"code","d79acb13":"code","ca611571":"code","ee3997c2":"markdown","6af9b2f4":"markdown","4b2f9403":"markdown","f1bc27f0":"markdown","c22dfac0":"markdown","769c23d2":"markdown","3af8a84a":"markdown","e7d26e03":"markdown"},"source":{"b25bc048":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4b26ea09":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\n%matplotlib inline\nwarnings.filterwarnings('ignore')","5307a6b6":"# display all the columns\npd.options.display.max_columns = 999","2c0e2ca1":"df = pd.read_csv('..\/input\/bike-sharing-dataset\/hour.csv')","57514c83":"df.head()","671fd925":"df.describe()","a622b1fc":"df.info()","b36c1290":"# Unique values:\ndf.apply(lambda x: len(x.unique()))","bb612b3a":"# null values:\ndf.isnull().sum()","739ffcd2":"df = df.rename(columns={'weathersit':'weather',\n                       'yr':'year',\n                       'mnth':'month',\n                       'hr':'hour',\n                       'hum':'humidity',\n                       'cnt':'count'})","b26387c1":"df.head()","2be16043":"df = df.drop(columns = ['instant' , 'dteday' , 'year'])","e01aad16":"df.head()","22f48533":"# int cols -> category:\ncols = ['season' , 'month' , 'hour' , 'holiday' , 'weekday' , 'workingday' , 'weather']","69c0c746":"for col in cols:\n    df[col] = df[col].astype('category')","3b8ca1f7":"df.info()","360fbcb7":"fig, ax = plt.subplots(figsize=(20,5))\nsns.pointplot(data=df, x='hour', y='count', hue='weekday', ax=ax)\nax.set(title='Count of bikes during weekdays and weekends')","bbe3c5a8":"fig, ax = plt.subplots(figsize=(20,5))\nsns.pointplot(data=df, x='hour', y='casual', hue='weekday', ax=ax)\nax.set(title='Count of bikes during weekdays and weekends: Unregistered users')","b7462cf7":"fig, ax = plt.subplots(figsize=(20,5))\nsns.pointplot(data=df, x='hour', y='registered', hue='weekday', ax=ax)\nax.set(title='Count of bikes during weekdays and weekends: Registered users')","2e7dfc45":"fig, ax = plt.subplots(figsize=(20,5))\nsns.pointplot(data=df, x='hour', y='count', hue='weather', ax=ax)\nax.set(title='Count of bikes during different weathers')","c71200f2":"fig, ax = plt.subplots(figsize=(20,5))\nsns.pointplot(data=df, x='hour', y='count', hue='season', ax=ax)\nax.set(title='Count of bikes during different seasons')","13705924":"fig, ax = plt.subplots(figsize=(20,5))\nsns.barplot(data=df, x='month', y='count', ax=ax)\nax.set(title='Count of bikes during different months')","b5aa6a3f":"fig, ax = plt.subplots(figsize=(20,5))\nsns.barplot(data=df, x='weekday', y='count', ax=ax)\nax.set(title='Count of bikes during different days')","9c4a61a6":"fig, (ax1,ax2) = plt.subplots(ncols=2, figsize=(20,5))\nsns.regplot(x=df['temp'], y=df['count'], ax=ax1 ,color='red')\nax1.set(title=\"Relation between temperature and users\")\nsns.regplot(x=df['humidity'], y=df['count'], ax=ax2)\nax2.set(title=\"Relation between humidity and users\")","30e4c149":"from statsmodels.graphics.gofplots import qqplot","dab05a7b":"fig, (ax1,ax2) = plt.subplots(ncols=2, figsize=(20,5))\nsns.distplot(df['count'], ax=ax1 , color ='red')\nax1.set(title='Distribution of the users')\nqqplot(df['count'], ax=ax2, line='s')\nax2.set(title='Theoritical quantiles')","8c58a442":"# log transformation\ndf['count'] = np.log(df['count'])","05be5285":"fig, (ax1,ax2) = plt.subplots(ncols=2, figsize=(20,5))\nsns.distplot(df['count'], ax=ax1 , color ='red')\nax1.set(title='Distribution of the users')\nqqplot(df['count'], ax=ax2, line='s')\nax2.set(title='Theoritical quantiles')","d6775864":"corr = df.corr()\nplt.figure(figsize=(15,7))\nsns.heatmap(corr, annot=True, annot_kws={'size':10})","6b26c193":"pd.get_dummies(df['season'], prefix='season', drop_first=True)","f9648923":"df_oh = df\n\ndef one_hot_encoding(data, column):\n    data = pd.concat([data, pd.get_dummies(data[column], prefix=column, drop_first=True)], axis=1)\n    data = data.drop([column], axis=1)\n    return data\n\ncols = ['season','month','hour','holiday','weekday','workingday','weather']\n\nfor col in cols:\n    df_oh = one_hot_encoding(df_oh, col)","be6b79a6":"df_oh.head()","091c16d4":"X = df_oh.drop(columns=['atemp', 'windspeed', 'casual', 'registered', 'count'], axis=1)","3cfd985e":"y = df_oh['count']","dd0dc9c8":"from sklearn.linear_model import LinearRegression, Ridge, HuberRegressor, ElasticNetCV\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor, ExtraTreesRegressor","5df591c8":"models = [LinearRegression(),Ridge(),HuberRegressor(),ElasticNetCV(),DecisionTreeRegressor(),RandomForestRegressor(),ExtraTreesRegressor(),\n         GradientBoostingRegressor()]","0a60f0d4":"from sklearn import model_selection","a06558a2":"def train(model):\n    kfold = model_selection.KFold(n_splits=5)\n    pred = model_selection.cross_val_score(model, X, y, cv=kfold, scoring='neg_mean_squared_error')\n    cv_score = pred.mean()\n    print('Model:',model)\n    print('CV score:', abs(cv_score))","f1622b51":"for model in models:\n    train(model)","d6d6acaa":"from sklearn.model_selection import train_test_split","c2fe7d50":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)","5cd2d70d":"model = RandomForestRegressor()","6fb8ecec":"model.fit(X_train, y_train)","9957a89e":"y_pred = model.predict(X_test)","891a7c17":"error = y_test - y_pred","b25cf839":"fig, ax = plt.subplots()\nax.scatter(y_test, error ,color = 'green')\nax.axhline(lw=3, color='black')\nax.set_xlabel('Observed')\nax.set_ylabel('Error')\nplt.show()","d79acb13":"from sklearn.metrics import mean_squared_error","ca611571":"np.sqrt(mean_squared_error(y_test, y_pred))","ee3997c2":"# IMPORT MODULES","6af9b2f4":"# INPUT SPLIT","4b2f9403":"# COORELATION MATRIX","f1bc27f0":"# MODEL TRAINING","c22dfac0":"# LOADING THE DATASET","769c23d2":"# EXPLORATORY DATA ANALYSIS","3af8a84a":"# ONE HOT ENCODING","e7d26e03":"# PREPROCESSING THE DATASET"}}