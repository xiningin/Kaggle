{"cell_type":{"66f265a1":"code","f8300702":"code","f04de0db":"code","1e73ead5":"code","440de470":"code","4511441c":"code","aa76427f":"code","cc52889f":"code","7b4f3243":"code","cf2fd6c4":"code","e9b6f1e3":"code","dc415494":"code","e69a1a6b":"code","9294474c":"code","97e6a2fa":"code","1061187e":"code","0617f423":"code","03f00b21":"code","14ca3ed1":"code","63beb8ae":"code","ab7ab1e6":"code","e5638dcb":"code","0a941a3f":"code","b03183de":"code","0510fa94":"code","67fc7da0":"code","48d09109":"code","c6e9dcc3":"code","8bb4d1f6":"code","cee3a5db":"code","00114df0":"code","4dd64254":"code","89c4ee17":"code","b465b32e":"code","b3ba72b7":"code","6261fc0b":"code","83478dc1":"code","97001b05":"code","afd205fd":"code","990b37f3":"code","a47bac8c":"code","6c875847":"code","0505a852":"code","03d388e3":"code","7509eb52":"code","34494dca":"code","e05eee83":"code","9edb169a":"code","bceb3454":"code","c3668124":"code","93d2c140":"code","ef591dc8":"code","9989c0ed":"code","091f5fea":"code","a541be94":"code","3dac713e":"code","85717e0e":"code","14a0ffab":"code","1c1eca0f":"code","f2cd1de8":"code","669e064d":"code","7c6473f4":"code","e24fe673":"code","bd2d8d9f":"code","96454685":"code","001f9afa":"code","290e6fb5":"code","573af9f6":"code","8bfd431e":"code","0b306881":"code","9b431ea0":"code","0ec5450e":"code","1968f04c":"code","2a7e3817":"code","82748736":"code","11ca88ac":"code","85ece036":"code","bae8ad33":"code","f8ed266f":"code","49e2726f":"code","83ae3de8":"code","65541a14":"code","5edbdf9e":"code","610ab593":"code","cfea9a67":"code","6b588592":"code","2d828ff5":"code","e1e702fc":"code","fa93e345":"code","7101f6f4":"markdown","39ca65cc":"markdown","2f6c7ed7":"markdown","d7ca81ae":"markdown","c7f14dee":"markdown","c7ab6d4a":"markdown","56959577":"markdown","3538980e":"markdown","2649ea47":"markdown","45cc7404":"markdown","9ff17163":"markdown"},"source":{"66f265a1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f8300702":"import statsmodels.api as sm\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import scale, StandardScaler\nfrom sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score\nfrom sklearn.metrics import confusion_matrix, accuracy_score, mean_squared_error, r2_score, roc_auc_score, roc_curve, classification_report\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom lightgbm import LGBMClassifier\nfrom sklearn.model_selection import KFold\nfrom xgboost import XGBClassifier\n\nfrom warnings import filterwarnings\nfilterwarnings('ignore')","f04de0db":"df = pd.read_csv(\"..\/input\/pima-indians-diabetes-database\/diabetes.csv\")","1e73ead5":"df.head()","440de470":"models = []\n\nmodels.append((\"LR\", LogisticRegression()))\nmodels.append(('KNN', KNeighborsClassifier()))\nmodels.append(('SVR', SVC()))\nmodels.append(('CART', DecisionTreeClassifier()))\nmodels.append(('RandomForests', RandomForestClassifier()))\nmodels.append(('GradientBoosting', GradientBoostingClassifier()))\nmodels.append(('XGBoost', XGBClassifier()))\nmodels.append(('Light GBM', LGBMClassifier()))","4511441c":"X = df.drop(\"Outcome\",axis=1)\ny = df[\"Outcome\"]\n\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2,random_state=46)\n\nfor name,model in models:\n    mod = model.fit(X_train,y_train) #trainleri modele fit etmek\n    y_pred = mod.predict(X_test) # tahmin\n    acc = accuracy_score(y_test, y_pred) #rmse hesab\u0131\n    cvscore = cross_val_score(model, X,y, cv = 10).mean()\n    print(\"Holdout Method:\",end=\" \")\n    print(name,acc) #yazd\u0131r\u0131lacak k\u0131s\u0131m\n    print(\"Cross Val Score\",end=\" \")\n    print(name,cvscore)\n    print(\"------------------------------------\")","aa76427f":"df = pd.read_csv(\"..\/input\/pima-indians-diabetes-database\/diabetes.csv\")","cc52889f":"df.describe().T","7b4f3243":"df[[\"Glucose\",\"BloodPressure\",\"SkinThickness\",\"Insulin\",\"BMI\"]] = df[[\"Glucose\",\"BloodPressure\",\"SkinThickness\",\"Insulin\",\"BMI\"]].replace(0,np.NaN)","cf2fd6c4":"df.isnull().sum()","e9b6f1e3":"naValues = [\"Glucose\",\"BloodPressure\",\"SkinThickness\",\"Insulin\",\"BMI\"]\n\nfor i in naValues:\n    df[i][(df[i].isnull()) & (df[\"Outcome\"] == 0)] = df[i][(df[i].isnull()) & (df[\"Outcome\"] == 0)].fillna(df[i][df[\"Outcome\"] == 0].mean())\n    df[i][(df[i].isnull()) & (df[\"Outcome\"] == 1)] = df[i][(df[i].isnull()) & (df[\"Outcome\"] == 1)].fillna(df[i][df[\"Outcome\"] == 1].mean())","dc415494":"df.isnull().sum()","e69a1a6b":"df.head()","9294474c":"df.info()","97e6a2fa":"df.shape","1061187e":"df[\"Outcome\"].value_counts()","0617f423":"import matplotlib.pyplot as plt\nimport seaborn as sns","03f00b21":"df.Outcome.value_counts().plot.barh()","14ca3ed1":"df.describe([0.01,0.05,0.10,0.25,0.50,0.75,0.80,0.90,0.95,0.99]).T","63beb8ae":"plt.scatter(df.Glucose,df.Insulin)","ab7ab1e6":"sns.catplot(x = \"Outcome\", y = \"Glucose\", data = df);","e5638dcb":"sns.catplot(x = \"Outcome\", y = \"Insulin\", data = df);","0a941a3f":"sns.catplot(x = \"Outcome\", y = \"BloodPressure\", data = df);","b03183de":"sns.catplot(x = \"Outcome\", y = \"BMI\", data = df);#the 0 value for outcome feature is more dense around 20 BMI. Healthy people are more generally 0.","0510fa94":"sns.boxplot(df)","67fc7da0":"df.corr()","48d09109":"f, ax = plt.subplots(figsize= [20,15])\nsns.heatmap(df.corr(),annot=True,ax=ax)","c6e9dcc3":"df.describe().T","8bb4d1f6":"for feature in df:\n\n    Q1 = df[feature].quantile(0.05)\n    Q3 = df[feature].quantile(0.95)\n    IQR = Q3-Q1\n    upper = Q3 + 1.5*IQR\n    lower = Q1 - 1.5*IQR\n\n    if df[(df[feature] > upper) | (df[feature] < lower)].any(axis=None):\n        print(feature,\"yes\")\n        print(df[(df[feature] > upper) | (df[feature] < lower)].shape[0])\n        print(\"lower\",lower,\"\\nupper\",upper)\n        df.loc[df[feature] > upper,feature] = upper\n    else:\n        print(feature, \"no\")\n        ","cee3a5db":"df.describe().T","00114df0":"df.head()","4dd64254":"df['BMIRanges'] = pd.cut(x=df['BMI'], bins=[0,18.5,25,30,100],labels = [\"Underweight\",\"Healthy\",\"Overweight\",\"Obese\"])","89c4ee17":"df.head()","b465b32e":"df.groupby([\"Outcome\",\"BMIRanges\"]).describe()","b3ba72b7":"df.head()","6261fc0b":"df[\"Insulin\"].describe().T","83478dc1":"def set_insulin(row):\n    if row[\"Insulin\"] >= 16 and row[\"Insulin\"] <= 166:\n        return \"Normal\"\n    else:\n        return \"Abnormal\"","97001b05":"df = df.assign(INSULIN_DESC=df.apply(set_insulin, axis=1))\n","afd205fd":"df.head()","990b37f3":"df['NewGlucose'] = pd.cut(x=df['Glucose'], bins=[0,70,99,126,200],labels = [\"Low\",\"Normal\",\"Secret\",\"High\"])","a47bac8c":"df.head()","6c875847":"df = pd.get_dummies(df,drop_first=True)","0505a852":"df.head()","03d388e3":"from sklearn.preprocessing import RobustScaler\n","7509eb52":"r_scaler = RobustScaler()\ndf_r = r_scaler.fit_transform(df.drop([\"Outcome\",\"BMIRanges_Healthy\",\"BMIRanges_Overweight\",\"BMIRanges_Obese\",\"INSULIN_DESC_Normal\",\"NewGlucose_Normal\",\"NewGlucose_Secret\",\"NewGlucose_High\"],axis=1))\n\ndf_r = pd.DataFrame(df_r, columns=[\"Pregnancies\",\"Glucose\",\"BloodPressure\",\"SkinThickness\",\"Insulin\",\"BMI\",\"DiabetesPedigreeFunction\",\"Age\"])","34494dca":"df_r","e05eee83":"df = pd.concat([df_r,df[[\"Outcome\",\"BMIRanges_Healthy\",\"BMIRanges_Overweight\",\"BMIRanges_Obese\",\"INSULIN_DESC_Normal\",\"NewGlucose_Normal\",\"NewGlucose_Secret\",\"NewGlucose_High\"]]],axis=1)","9edb169a":"df","bceb3454":"df.info()","c3668124":"X = df.drop(\"Outcome\",axis=1)\ny = df[\"Outcome\"]\n\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2,random_state=46)\n\nfor name,model in models:\n    mod = model.fit(X_train,y_train) #trainleri modele fit etmek\n    y_pred = mod.predict(X_test) # tahmin\n    acc = accuracy_score(y_test, y_pred) #rmse hesab\u0131\n    cvscore = cross_val_score(model, X,y, cv = 10).mean()\n    print(\"Holdout Method:\",end=\" \")\n    print(name,acc) #yazd\u0131r\u0131lacak k\u0131s\u0131m\n    print(\"Cross Val Score\",end=\" \")\n    print(name,cvscore)\n    print(\"------------------------------------\")","93d2c140":"knn_params = {\"n_neighbors\": np.arange(2,30,1)}\n\nknn_model = KNeighborsClassifier()\n\nknn_cv_model = GridSearchCV(knn_model, knn_params, cv = 10).fit(X,y)","ef591dc8":"knn_cv_model.best_params_","9989c0ed":"knn_tuned = KNeighborsClassifier(**knn_cv_model.best_params_).fit(X,y)\n","091f5fea":"cross_val_score(knn_tuned, X,y, cv = 10).mean()","a541be94":"cart_model = DecisionTreeClassifier()","3dac713e":"cart_params = {\"max_depth\": [2,3,4,5,10,20,100, 1000],\n              \"min_samples_split\": [2,10,5,30,50,10]}","85717e0e":"cart_cv_model = GridSearchCV(cart_model, cart_params, cv = 10, n_jobs = -1, verbose =  2).fit(X,y)","14a0ffab":"cart_cv_model.best_params_","1c1eca0f":"cart_tuned = DecisionTreeClassifier(**cart_cv_model.best_params_).fit(X,y)","f2cd1de8":"cross_val_score(cart_tuned, X,y, cv = 10).mean()","669e064d":"rf_params = {\"max_depth\": [5,10,None],\n            \"max_features\": [2,5,10],\n            \"n_estimators\": [100, 500, 900],\n            \"min_samples_split\": [2,10,30]}","7c6473f4":"rf_model = RandomForestClassifier()","e24fe673":"rf_cv_model = GridSearchCV(rf_model, rf_params, cv = 10, n_jobs = -1, verbose = 2).fit(X,y)","bd2d8d9f":"rf_cv_model.best_params_","96454685":"rf_tuned = RandomForestClassifier(**rf_cv_model.best_params_).fit(X,y)","001f9afa":"cross_val_score(rf_tuned, X,y, cv = 10).mean()","290e6fb5":"svc_model = SVC()","573af9f6":"svc_params = {\"C\": [0.01,0.001, 0.2, 0.1,0.5,0.8,0.9,1, 10, 100, 500,1000]}\n\nsvc_cv_model = GridSearchCV(svc_model, svc_params, cv = 10, n_jobs = -1, verbose =  2).fit(X,y)","8bfd431e":"svc_cv_model.best_params_","0b306881":"svc_tuned = SVC(**svc_cv_model.best_params_).fit(X,y)","9b431ea0":"cross_val_score(svc_tuned, X,y, cv = 10).mean()","0ec5450e":"gb_model = GradientBoostingClassifier()","1968f04c":"gbm_params = {\"learning_rate\": [0.001,0.1,0.01],\n             \"max_depth\": [3,5,8,10],\n             \"n_estimators\": [200,500,1000],\n             \"subsample\": [1,0.5,0.8]}","2a7e3817":"gbm_cv_model = GridSearchCV(gb_model, \n                            gbm_params, \n                            cv = 10, \n                            n_jobs=-1, \n                            verbose = 2).fit(X,y)","82748736":"gbm_cv_model.best_params_\n","11ca88ac":"gbm_tuned = GradientBoostingClassifier(**gbm_cv_model.best_params_).fit(X,y)","85ece036":"cross_val_score(gbm_tuned, X,y, cv = 10).mean()","bae8ad33":"lgbm_params = {\"learning_rate\": [0.01, 0.05, 0.1],\n              \"n_estimators\": [200, 500, 1000],\n              \"max_depth\":[5,8,10],\n              \"colsample_bytree\": [1,0.5,0.3]}\n","f8ed266f":"lgbm_model = LGBMClassifier()","49e2726f":"lgbm_cv_model = GridSearchCV(lgbm_model, \n                     lgbm_params, \n                     cv = 10, \n                     n_jobs = -1, \n                     verbose = 2).fit(X,y)","83ae3de8":"lgbm_cv_model.best_params_\n","65541a14":"lgbm_tuned = LGBMClassifier(**lgbm_cv_model.best_params_).fit(X,y)\n","5edbdf9e":"cross_val_score(lgbm_tuned, X,y, cv = 10).mean()","610ab593":"xgb_model = XGBClassifier()","cfea9a67":"xgb_params = {\"learning_rate\": [0.1,0.01,1],\n             \"max_depth\": [2,5,8],\n             \"n_estimators\": [100,500,1000],\n             \"colsample_bytree\": [0.3,0.6,1]}","6b588592":"xgb_cv_model  = GridSearchCV(xgb_model,xgb_params, cv = 10, n_jobs = -1, verbose = 2).fit(X,y)","2d828ff5":"xgb_cv_model.best_params_\n","e1e702fc":"xgb_tuned = XGBClassifier(**xgb_cv_model.best_params_).fit(X,y)\n","fa93e345":"cross_val_score(xgb_tuned, X,y, cv = 10).mean()","7101f6f4":"# KNN Model Tuning","39ca65cc":"# ALGORITHMS","2f6c7ed7":"# Light GBM Model Tuning","d7ca81ae":"# RF Model Tuning","c7f14dee":"# robust","c7ab6d4a":"df[(df[\"Glucose\"].isnull()) & (df[\"Outcome\"] == 0)]\n\ndf[\"Glucose\"][(df[\"Glucose\"].isnull()) & (df[\"Outcome\"] == 0)] = df[\"Glucose\"][(df[\"Glucose\"].isnull()) & (df[\"Outcome\"] == 0)].fillna(110.643863)\n\ndf[\"Glucose\"][(df[\"Glucose\"].isnull()) & (df[\"Outcome\"] == 1)] = df[\"Glucose\"][(df[\"Glucose\"].isnull()) & (df[\"Outcome\"] == 1)].fillna(142.319549)\n\n#----------------------------------------------------------------\n\ndf[\"BloodPressure\"][(df[\"BloodPressure\"].isnull()) & (df[\"Outcome\"] == 0)] = df[\"BloodPressure\"][(df[\"BloodPressure\"].isnull()) & (df[\"Outcome\"] == 0)].fillna(70.877339)\n\ndf[\"BloodPressure\"][(df[\"BloodPressure\"].isnull()) & (df[\"Outcome\"] == 1)] = df[\"BloodPressure\"][(df[\"BloodPressure\"].isnull()) & (df[\"Outcome\"] == 1)].fillna(75.321429)\n\n#-----------------------------------------------------------------\n\ndf[\"SkinThickness\"][(df[\"SkinThickness\"].isnull()) & (df[\"Outcome\"] == 0)] = df[\"SkinThickness\"][(df[\"SkinThickness\"].isnull()) & (df[\"Outcome\"] == 0)].fillna(27.235457)\n\ndf[\"SkinThickness\"][(df[\"SkinThickness\"].isnull()) & (df[\"Outcome\"] == 1)] = df[\"SkinThickness\"][(df[\"SkinThickness\"].isnull()) & (df[\"Outcome\"] == 1)].fillna(33.000000)\n\n#-----------------------------------------------------------------\n\ndf[\"Insulin\"][(df[\"Insulin\"].isnull()) & (df[\"Outcome\"] == 0)] = df[\"Insulin\"][(df[\"Insulin\"].isnull()) & (df[\"Outcome\"] == 0)].fillna(130.287879)\n\ndf[\"Insulin\"][(df[\"Insulin\"].isnull()) & (df[\"Outcome\"] == 1)] = df[\"Insulin\"][(df[\"Insulin\"].isnull()) & (df[\"Outcome\"] == 1)].fillna(206.846154)\n\n#-----------------------------------------------------------------\n\ndf[\"BMI\"][(df[\"BMI\"].isnull()) & (df[\"Outcome\"] == 0)] = df[\"BMI\"][(df[\"BMI\"].isnull()) & (df[\"Outcome\"] == 0)].fillna(30.859674)\n\ndf[\"BMI\"][(df[\"BMI\"].isnull()) & (df[\"Outcome\"] == 1)] = df[\"BMI\"][(df[\"BMI\"].isnull()) & (df[\"Outcome\"] == 1)].fillna(35.406767)","56959577":"# Feature Engineering","3538980e":"# XGB Model Tuning","2649ea47":"# GB Model Tuning","45cc7404":"# SVC Model Tuning","9ff17163":"# CART Model Tuning"}}