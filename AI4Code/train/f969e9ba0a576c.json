{"cell_type":{"53727051":"code","fdbc71e1":"code","4ec7c52d":"code","c8833085":"code","7daae844":"code","c3680095":"code","2c21162d":"code","c5211741":"code","9b816dc8":"code","22888471":"code","c71ff675":"code","3eb6d498":"code","027965f5":"code","465fb176":"code","ccf59362":"code","b363f3a1":"code","a8cd57c3":"code","54ddeb9f":"code","21290f46":"code","b623e2bf":"code","d0c0b851":"code","01255220":"code","a9a51517":"code","c0d959a6":"code","7bdb9867":"code","acd0fe0d":"code","b5255d21":"code","92e1c7e3":"code","7fddef67":"code","22e00c28":"code","b14031a4":"code","61bab70c":"code","e2b2860a":"code","a3c981e9":"code","88b95275":"code","15ff4b43":"code","a67da98d":"code","ea3eea8a":"code","9817562d":"code","c899c7cd":"code","fdb1c059":"code","d58ca2e1":"code","538708f5":"code","8a25a03f":"code","3ea3e871":"code","6055a9b1":"code","6e6d459c":"code","d663b9c2":"code","51b4f505":"code","b5157d8d":"code","bce78bd1":"code","e7942436":"markdown","26541770":"markdown","26e5f65d":"markdown","f36b3fcf":"markdown","1bbc2739":"markdown"},"source":{"53727051":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fdbc71e1":"# Installs\n!pip install pycountry_convert \n!pip install folium\n!pip install calmap\n# !pip install pandas==0.25.1\n!wget https:\/\/raw.githubusercontent.com\/tarunk04\/COVID-19-CaseStudy-and-Predictions\/master\/models\/model_deaths_v4.h5\n!wget https:\/\/raw.githubusercontent.com\/tarunk04\/COVID-19-CaseStudy-and-Predictions\/master\/models\/model_confirmed_v4.h5\n!wget https:\/\/raw.githubusercontent.com\/tarunk04\/COVID-19-CaseStudy-and-Predictions\/master\/models\/model_usa_c_v2.h5","4ec7c52d":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib import ticker \nimport pycountry_convert as pc\nimport folium\nimport branca\nfrom datetime import datetime, timedelta,date\nfrom scipy.interpolate import make_interp_spline, BSpline\nimport plotly.express as px\nimport json, requests\nimport calmap\nimport warnings\nwarnings.filterwarnings('ignore')\n\n%matplotlib inline","c8833085":"# Retriving Dataset\ndf_confirmed = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_confirmed_global.csv')\ndf_deaths = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_deaths_global.csv')\n\n# Depricated\n# df_recovered = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_19-covid-Recovered.csv')\ndf_covid19 = pd.read_csv(\"https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/web-data\/data\/cases_country.csv\")\ndf_table = pd.read_csv(\"https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/web-data\/data\/cases_time.csv\",parse_dates=['Last_Update'])","7daae844":"df_confirmed.head()","c3680095":"df_deaths.head()","2c21162d":"df_covid19.head()","c5211741":"df_confirmed = df_confirmed.rename(columns={\"Province\/State\":\"state\",\"Country\/Region\": \"country\"})\ndf_deaths = df_deaths.rename(columns={\"Province\/State\":\"state\",\"Country\/Region\": \"country\"})\ndf_covid19 = df_covid19.rename(columns={\"Country_Region\": \"country\"})\ndf_covid19[\"Active\"] = df_covid19[\"Confirmed\"]-df_covid19[\"Recovered\"]-df_covid19[\"Deaths\"]\n# df_recovered = df_recovered.rename(columns={\"Province\/State\":\"state\",\"Country\/Region\": \"country\"})","9b816dc8":"# Changing the conuntry names as required by pycountry_convert Lib\ndf_confirmed.loc[df_confirmed['country'] == \"US\", \"country\"] = \"USA\"\ndf_deaths.loc[df_deaths['country'] == \"US\", \"country\"] = \"USA\"\ndf_covid19.loc[df_covid19['country'] == \"US\", \"country\"] = \"USA\"\ndf_table.loc[df_table['Country_Region'] == \"US\", \"Country_Region\"] = \"USA\"\n# df_recovered.loc[df_recovered['country'] == \"US\", \"country\"] = \"USA\"\n\n\ndf_confirmed.loc[df_confirmed['country'] == 'Korea, South', \"country\"] = 'South Korea'\ndf_deaths.loc[df_deaths['country'] == 'Korea, South', \"country\"] = 'South Korea'\ndf_covid19.loc[df_covid19['country'] == \"Korea, South\", \"country\"] = \"South Korea\"\ndf_table.loc[df_table['Country_Region'] == \"Korea, South\", \"Country_Region\"] = \"South Korea\"\n# df_recovered.loc[df_recovered['country'] == 'Korea, South', \"country\"] = 'South Korea'\n\ndf_confirmed.loc[df_confirmed['country'] == 'Taiwan*', \"country\"] = 'Taiwan'\ndf_deaths.loc[df_deaths['country'] == 'Taiwan*', \"country\"] = 'Taiwan'\ndf_covid19.loc[df_covid19['country'] == \"Taiwan*\", \"country\"] = \"Taiwan\"\ndf_table.loc[df_table['Country_Region'] == \"Taiwan*\", \"Country_Region\"] = \"Taiwan\"\n# df_recovered.loc[df_recovered['country'] == 'Taiwan*', \"country\"] = 'Taiwan'\n\ndf_confirmed.loc[df_confirmed['country'] == 'Congo (Kinshasa)', \"country\"] = 'Democratic Republic of the Congo'\ndf_deaths.loc[df_deaths['country'] == 'Congo (Kinshasa)', \"country\"] = 'Democratic Republic of the Congo'\ndf_covid19.loc[df_covid19['country'] == \"Congo (Kinshasa)\", \"country\"] = \"Democratic Republic of the Congo\"\ndf_table.loc[df_table['Country_Region'] == \"Congo (Kinshasa)\", \"Country_Region\"] = \"Democratic Republic of the Congo\"\n# df_recovered.loc[df_recovered['country'] == 'Congo (Kinshasa)', \"country\"] = 'Democratic Republic of the Congo'\n\ndf_confirmed.loc[df_confirmed['country'] == \"Cote d'Ivoire\", \"country\"] = \"C\u00f4te d'Ivoire\"\ndf_deaths.loc[df_deaths['country'] == \"Cote d'Ivoire\", \"country\"] = \"C\u00f4te d'Ivoire\"\ndf_covid19.loc[df_covid19['country'] == \"Cote d'Ivoire\", \"country\"] = \"C\u00f4te d'Ivoire\"\ndf_table.loc[df_table['Country_Region'] == \"Cote d'Ivoire\", \"Country_Region\"] = \"C\u00f4te d'Ivoire\"\n# df_recovered.loc[df_recovered['country'] == \"Cote d'Ivoire\", \"country\"] = \"C\u00f4te d'Ivoire\"\ndf_confirmed.loc[df_confirmed['country'] == \"Reunion\", \"country\"] = \"R\u00e9union\"\ndf_deaths.loc[df_deaths['country'] == \"Reunion\", \"country\"] = \"R\u00e9union\"\ndf_covid19.loc[df_covid19['country'] == \"Reunion\", \"country\"] = \"R\u00e9union\"\ndf_table.loc[df_table['Country_Region'] == \"Reunion\", \"Country_Region\"] = \"R\u00e9union\"\n# df_recovered.loc[df_recovered['country'] == \"Reunion\", \"country\"] = \"R\u00e9union\"\n\ndf_confirmed.loc[df_confirmed['country'] == 'Congo (Brazzaville)', \"country\"] = 'Republic of the Congo'\ndf_deaths.loc[df_deaths['country'] == 'Congo (Brazzaville)', \"country\"] = 'Republic of the Congo'\ndf_covid19.loc[df_covid19['country'] == \"Congo (Brazzaville)\", \"country\"] = \"Republic of the Congo\"\ndf_table.loc[df_table['Country_Region'] == \"Congo (Brazzaville)\", \"Country_Region\"] = \"Republic of the Congo\"\n# df_recovered.loc[df_recovered['country'] == 'Congo (Brazzaville)', \"country\"] = 'Republic of the Congo'\n\ndf_confirmed.loc[df_confirmed['country'] == 'Bahamas, The', \"country\"] = 'Bahamas'\ndf_deaths.loc[df_deaths['country'] == 'Bahamas, The', \"country\"] = 'Bahamas'\ndf_covid19.loc[df_covid19['country'] == \"Bahamas, The\", \"country\"] = \"Bahamas\"\ndf_table.loc[df_table['Country_Region'] == \"Bahamas, The\", \"Country_Region\"] = \"Bahamas\"\n# df_recovered.loc[df_recovered['country'] == 'Bahamas, The', \"country\"] = 'Bahamas'\n\ndf_confirmed.loc[df_confirmed['country'] == 'Gambia, The', \"country\"] = 'Gambia'\ndf_deaths.loc[df_deaths['country'] == 'Gambia, The', \"country\"] = 'Gambia'\ndf_covid19.loc[df_covid19['country'] == \"Gambia, The\", \"country\"] = \"Gambia\"\ndf_table.loc[df_table['Country_Region'] == \"Gambia\", \"Country_Region\"] = \"Gambia\"\n# df_recovered.loc[df_recovered['country'] == 'Gambia, The', \"country\"] = 'Gambia'\n\n# getting all countries\ncountries = np.asarray(df_confirmed[\"country\"])\ncountries1 = np.asarray(df_covid19[\"country\"])\n# Continent_code to Continent_names\ncontinents = {\n    'NA': 'North America',\n    'SA': 'South America', \n    'AS': 'Asia',\n    'OC': 'Australia',\n    'AF': 'Africa',\n    'EU' : 'Europe',\n    'na' : 'Others'\n}\n\n# Defininng Function for getting continent code for country.\ndef country_to_continent_code(country):\n    try:\n        return pc.country_alpha2_to_continent_code(pc.country_name_to_country_alpha2(country))\n    except :\n        return 'na'\n\n#Collecting Continent Information\ndf_confirmed.insert(2,\"continent\", [continents[country_to_continent_code(country)] for country in countries[:]])\ndf_deaths.insert(2,\"continent\",  [continents[country_to_continent_code(country)] for country in countries[:]])\ndf_covid19.insert(1,\"continent\",  [continents[country_to_continent_code(country)] for country in countries1[:]])\ndf_table.insert(1,\"continent\",  [continents[country_to_continent_code(country)] for country in df_table[\"Country_Region\"].values])\n# df_recovered.insert(2,\"continent\",  [continents[country_to_continent_code(country)] for country in countries[:]] )   ","22888471":"df_table = df_table[df_table[\"continent\"] != \"Others\"]","c71ff675":"df_deaths[df_deaths[\"continent\" ]== 'Others']","3eb6d498":"def plot_params(ax,axis_label= None, plt_title = None,label_size=15, axis_fsize = 15, title_fsize = 20, scale = 'linear' ):\n    # Tick-Parameters\n    ax.xaxis.set_minor_locator(ticker.AutoMinorLocator())\n    ax.yaxis.set_minor_locator(ticker.AutoMinorLocator())\n    ax.tick_params(which='both', width=1,labelsize=label_size)\n    ax.tick_params(which='major', length=6)\n    ax.tick_params(which='minor', length=3, color='0.8')\n    \n    # Grid\n    plt.grid(lw = 1, ls = '-', c = \"0.7\", which = 'major')\n    plt.grid(lw = 1, ls = '-', c = \"0.9\", which = 'minor')\n\n    # Plot Title\n    plt.title( plt_title,{'fontsize':title_fsize})\n    \n    # Yaxis sacle\n    plt.yscale(scale)\n    plt.minorticks_on()\n    # Plot Axes Labels\n    xl = plt.xlabel(axis_label[0],fontsize = axis_fsize)\n    yl = plt.ylabel(axis_label[1],fontsize = axis_fsize)\n    \ndef visualize_covid_cases(confirmed, deaths, continent=None , country = None , state = None, period = None, figure = None, scale = \"linear\"):\n    x = 0\n    if figure == None:\n        f = plt.figure(figsize=(10,10))\n        # Sub plot\n        ax = f.add_subplot(111)\n    else :\n        f = figure[0]\n        # Sub plot\n        ax = f.add_subplot(figure[1],figure[2],figure[3])\n    ax.set_axisbelow(True)\n    plt.tight_layout(pad=10, w_pad=5, h_pad=5)\n\n    stats = [confirmed, deaths]\n    label = [\"Confirmed\", \"Deaths\"]\n    \n    if continent != None:\n        params = [\"continent\",continent]\n    elif country != None:\n        params = [\"country\",country]\n    else: \n        params = [\"All\", \"All\"]\n    color = [\"darkcyan\",\"crimson\"]\n    marker_style = dict(linewidth=3, linestyle='-', marker='o',markersize=4, markerfacecolor='#ffffff')\n    for i,stat in enumerate(stats):\n        if params[1] == \"All\" :\n            cases = np.sum(np.asarray(stat.iloc[:,5:]),axis = 0)[x:]\n        else :\n            cases = np.sum(np.asarray(stat[stat[params[0]] == params[1]].iloc[:,5:]),axis = 0)[x:]\n        date = np.arange(1,cases.shape[0]+1)[x:]\n        plt.plot(date,cases,label = label[i]+\" (Total : \"+str(cases[-1])+\")\",color=color[i],**marker_style)\n        plt.fill_between(date,cases,color=color[i],alpha=0.3)\n\n    if params[1] == \"All\" :\n        Total_confirmed = np.sum(np.asarray(stats[0].iloc[:,5:]),axis = 0)[x:]\n        Total_deaths = np.sum(np.asarray(stats[1].iloc[:,5:]),axis = 0)[x:]\n    else :\n        Total_confirmed =  np.sum(np.asarray(stats[0][stat[params[0]] == params[1]].iloc[:,5:]),axis = 0)[x:]\n        Total_deaths = np.sum(np.asarray(stats[1][stat[params[0]] == params[1]].iloc[:,5:]),axis = 0)[x:]\n        \n    text = \"From \"+stats[0].columns[5]+\" to \"+stats[0].columns[-1]+\"\\n\"\n    text += \"Mortality rate : \"+ str(int(Total_deaths[-1]\/(Total_confirmed[-1])*10000)\/100)+\"\\n\"\n    text += \"Last 5 Days:\\n\"\n    text += \"Confirmed : \" + str(Total_confirmed[-1] - Total_confirmed[-6])+\"\\n\"\n    text += \"Deaths : \" + str(Total_deaths[-1] - Total_deaths[-6])+\"\\n\"\n    text += \"Last 24 Hours:\\n\"\n    text += \"Confirmed : \" + str(Total_confirmed[-1] - Total_confirmed[-2])+\"\\n\"\n    text += \"Deaths : \" + str(Total_deaths[-1] - Total_deaths[-2])+\"\\n\"\n    \n    plt.text(0.02, 0.78, text, fontsize=15, horizontalalignment='left', verticalalignment='top', transform=ax.transAxes,bbox=dict(facecolor='white', alpha=0.4))\n    \n    # Plot Axes Labels\n    axis_label = [\"Days (\"+df_confirmed.columns[5]+\" - \"+df_confirmed.columns[-1]+\")\",\"No of Cases\"]\n    \n    # Plot Parameters\n    plot_params(ax,axis_label,scale = scale)\n    \n    # Plot Title\n    if params[1] == \"All\" :\n        plt.title(\"COVID-19 Cases World\",{'fontsize':25})\n    else:   \n        plt.title(\"COVID-19: \"+params[1] ,{'fontsize':25})\n        \n    # Legend Location\n    l = plt.legend(loc= \"best\",fontsize = 15)\n    \n    if figure == None:\n        plt.show()\n        \ndef get_total_cases(cases, country = \"All\"):\n    if(country == \"All\") :\n        return np.sum(np.asarray(cases.iloc[:,5:]),axis = 0)[-1]\n    else :\n        return np.sum(np.asarray(cases[cases[\"country\"] == country].iloc[:,5:]),axis = 0)[-1]\n    \ndef get_mortality_rate(confirmed,deaths, continent = None, country = None):\n    if continent != None:\n        params = [\"continent\",continent]\n    elif country != None:\n        params = [\"country\",country]\n    else :\n        params = [\"All\", \"All\"]\n    \n    if params[1] == \"All\" :\n        Total_confirmed = np.sum(np.asarray(confirmed.iloc[:,5:]),axis = 0)\n        Total_deaths = np.sum(np.asarray(deaths.iloc[:,5:]),axis = 0)\n        mortality_rate = np.round((Total_deaths\/(Total_confirmed+1.01))*100,2)\n    else :\n        Total_confirmed =  np.sum(np.asarray(confirmed[confirmed[params[0]] == params[1]].iloc[:,5:]),axis = 0)\n        Total_deaths = np.sum(np.asarray(deaths[deaths[params[0]] == params[1]].iloc[:,5:]),axis = 0)\n        mortality_rate = np.round((Total_deaths\/(Total_confirmed+1.01))*100,2)\n    \n    return np.nan_to_num(mortality_rate)\ndef dd(date1,date2):\n    return (datetime.strptime(date1,'%m\/%d\/%y') - datetime.strptime(date2,'%m\/%d\/%y')).days\n\n\nout = \"\"#+\"output\/\"","027965f5":"df_countries_cases = df_covid19.copy().drop(['Lat','Long_','continent','Last_Update'],axis =1)\ndf_countries_cases.index = df_countries_cases[\"country\"]\ndf_countries_cases = df_countries_cases.drop(['country'],axis=1)\n\ndf_continents_cases = df_covid19.copy().drop(['Lat','Long_','country','Last_Update'],axis =1)\ndf_continents_cases = df_continents_cases.groupby([\"continent\"]).sum()\n\ndf_countries_cases.fillna(0,inplace=True)\ndf_continents_cases.fillna(0,inplace=True)","465fb176":"f = plt.figure(figsize=(10,5))\nf.add_subplot(111)\n\nplt.axes(axisbelow=True)\nplt.barh(df_countries_cases.sort_values('Confirmed')[\"Confirmed\"].index[-10:],df_countries_cases.sort_values('Confirmed')[\"Confirmed\"].values[-10:],color=\"darkcyan\")\nplt.tick_params(size=5,labelsize = 13)\nplt.xlabel(\"Confirmed Cases\",fontsize=18)\nplt.title(\"Top 10 Countries (Confirmed Cases)\",fontsize=20)\nplt.grid(alpha=0.3)\nplt.savefig(out+'Top 10 Countries (Confirmed Cases).png')","ccf59362":"f = plt.figure(figsize=(10,5))\nf.add_subplot(111)\n\nplt.axes(axisbelow=True)\nplt.barh(df_countries_cases.sort_values('Deaths')[\"Deaths\"].index[-10:],df_countries_cases.sort_values('Deaths')[\"Deaths\"].values[-10:],color=\"crimson\")\nplt.tick_params(size=5,labelsize = 13)\nplt.xlabel(\"Deaths Cases\",fontsize=18)\nplt.title(\"Top 10 Countries (Deaths Cases)\",fontsize=20)\nplt.grid(alpha=0.3,which='both')\nplt.savefig(out+'Top 10 Countries (Deaths Cases).png')","b363f3a1":"f = plt.figure(figsize=(10,5))\nf.add_subplot(111)\n\nplt.axes(axisbelow=True)\nplt.barh(df_countries_cases.sort_values('Active')[\"Active\"].index[-10:],df_countries_cases.sort_values('Active')[\"Active\"].values[-10:],color=\"darkorange\")\nplt.tick_params(size=5,labelsize = 13)\nplt.xlabel(\"Active Cases\",fontsize=18)\nplt.title(\"Top 10 Countries (Active Cases)\",fontsize=20)\nplt.grid(alpha=0.3,which='both')\nplt.savefig(out+'Top 10 Countries (Active Cases).png')","a8cd57c3":"f = plt.figure(figsize=(10,5))\nf.add_subplot(111)\n\nplt.axes(axisbelow=True)\nplt.barh(df_countries_cases.sort_values('Recovered')[\"Recovered\"].index[-10:],df_countries_cases.sort_values('Recovered')[\"Recovered\"].values[-10:],color=\"limegreen\")\nplt.tick_params(size=5,labelsize = 13)\nplt.xlabel(\"Recovered Cases\",fontsize=18)\nplt.title(\"Top 10 Countries (Recovered Cases)\",fontsize=20)\nplt.grid(alpha=0.3,which='both')\nplt.savefig(out+'Top 10 Countries (Recovered Cases).png')","54ddeb9f":"df_data = df_table.groupby(['Last_Update', 'Country_Region'])['Confirmed', 'Deaths'].max().reset_index().fillna(0)\ndf_data[\"Last_Update\"] = pd.to_datetime( df_data[\"Last_Update\"]).dt.strftime('%m\/%d\/%Y')\n\nfig = px.scatter_geo(df_data, locations=\"Country_Region\", locationmode='country names', \n                     color=np.power(df_data[\"Confirmed\"],0.3)-2 , size= np.power(df_data[\"Confirmed\"]+1,0.3)-1, hover_name=\"Country_Region\",\n                     hover_data=[\"Confirmed\"],\n                     range_color= [0, max(np.power(df_data[\"Confirmed\"],0.3))], \n                     projection=\"natural earth\", animation_frame=\"Last_Update\", \n                     color_continuous_scale=px.colors.sequential.Plasma,\n                     title='COVID-19: Progression of spread'\n                    )\nfig.update_coloraxes(colorscale=\"hot\")\nfig.update(layout_coloraxis_showscale=False)\nfig.show()","21290f46":"cols = 1\nrows = 1\nf = plt.figure(figsize=(10,10*rows))\n\nvisualize_covid_cases(df_confirmed, df_deaths,continent = \"All\",figure = [f,rows,cols, 1])\n\nplt.savefig(out+'COIVD-19-World.png')\nplt.show()","b623e2bf":"df_confirmed[df_confirmed['country']=='India']","d0c0b851":"df_deaths[df_deaths['country']=='India']","01255220":"cols = df_confirmed.keys()","a9a51517":"confirmed = df_confirmed.loc[:, cols[5]:cols[-1]]\ndeaths = df_deaths.loc[:, cols[5]:cols[-1]]\nconfirmed","c0d959a6":"dates = confirmed.keys()\nworld_cases = []\ntotal_deaths = [] \nmortality_rate = []\nindia_cases = [] \nindia_death = []\n\nfor i in dates:\n    confirmed_sum = confirmed[i].sum()\n    death_sum = deaths[i].sum()\n    \n    \n    world_cases.append(confirmed_sum)\n    total_deaths.append(death_sum)\n\n    # calculate rates\n    mortality_rate.append(death_sum\/confirmed_sum)\n\n    india_cases.append(df_confirmed[df_confirmed['country']=='India'][i].sum())\n    india_death.append(df_deaths[df_deaths['country']=='India'][i].sum())","7bdb9867":"def daily_increase(data):\n    d = [] \n    for i in range(len(data)):\n        if i == 0:\n            d.append(data[0])\n        else:\n            d.append(data[i]-data[i-1])\n    return d \n\nworld_daily_increase = daily_increase(world_cases)\nindia_daily_increase = daily_increase(india_cases)\nindia_daily_death_increase = daily_increase(india_death)","acd0fe0d":"days_since_1_22 = np.array([i for i in range(len(dates))]).reshape(-1, 1)\nindia_cases = np.array(india_cases).reshape(-1, 1)\ntotal_deaths = np.array(total_deaths).reshape(-1, 1)\nindia_death = np.array(india_death).reshape(-1,1)","b5255d21":"days_in_future = 10\nfuture_forcast = np.array([i for i in range(len(dates)+days_in_future)]).reshape(-1, 1)\nadjusted_dates = future_forcast[:-10]","92e1c7e3":"import datetime\nimport random\nimport math\nimport time\nfrom sklearn.linear_model import LinearRegression, BayesianRidge\nfrom sklearn.model_selection import RandomizedSearchCV, train_test_split\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.svm import SVR\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error","7fddef67":"start = '1\/22\/2020'\nstart_date = datetime.datetime.strptime(start, '%m\/%d\/%Y')\nfuture_forcast_dates = []\nfor i in range(len(future_forcast)):\n    future_forcast_dates.append((start_date + datetime.timedelta(days=i)).strftime('%m\/%d\/%Y'))","22e00c28":"X_train_confirmed, X_test_confirmed, y_train_confirmed, y_test_confirmed = train_test_split(days_since_1_22, india_cases, test_size=0.28, shuffle=False) ","b14031a4":"X_train_death, X_test_death, y_train_death, y_test_death = train_test_split(days_since_1_22, india_death, test_size=0.28, shuffle=False) ","61bab70c":"# transform our data for polynomial regression\npoly = PolynomialFeatures(degree=4)\npoly_X_train_confirmed = poly.fit_transform(X_train_confirmed)\npoly_X_test_confirmed = poly.fit_transform(X_test_confirmed)\npoly_future_forcast = poly.fit_transform(future_forcast)","e2b2860a":"# polynomial regression\nlinear_model = LinearRegression(normalize=True, fit_intercept=False)\nlinear_model.fit(poly_X_train_confirmed, y_train_confirmed)\ntest_linear_pred = linear_model.predict(poly_X_test_confirmed)\nlinear_pred = linear_model.predict(poly_future_forcast)\nprint('MAE:', mean_absolute_error(test_linear_pred, y_test_confirmed))\nprint('MSE:',mean_squared_error(test_linear_pred, y_test_confirmed))","a3c981e9":"print(linear_model.coef_)","88b95275":"plt.plot(test_linear_pred)\nplt.plot(y_test_confirmed)","15ff4b43":"# bayesian ridge polynomial regression\ntol = [1e-4, 1e-3, 1e-2]\nalpha_1 = [1e-7, 1e-6, 1e-5, 1e-4]\nalpha_2 = [1e-7, 1e-6, 1e-5, 1e-4]\nlambda_1 = [1e-7, 1e-6, 1e-5, 1e-4]\nlambda_2 = [1e-7, 1e-6, 1e-5, 1e-4]\n\nbayesian_grid = {'tol': tol, 'alpha_1': alpha_1, 'alpha_2' : alpha_2, 'lambda_1': lambda_1, 'lambda_2' : lambda_2}\n\nbayesian = BayesianRidge(fit_intercept=False, normalize=True)\nbayesian_search = RandomizedSearchCV(bayesian, bayesian_grid, scoring='neg_mean_squared_error', cv=3, return_train_score=True, n_jobs=-1, n_iter=40, verbose=1)\nbayesian_search.fit(poly_X_train_confirmed, y_train_confirmed)","a67da98d":"bayesian_search.best_params_","ea3eea8a":"bayesian_confirmed = bayesian_search.best_estimator_\ntest_bayesian_pred = bayesian_confirmed.predict(poly_X_test_confirmed)\nbayesian_pred = bayesian_confirmed.predict(poly_future_forcast)\nprint('MAE:', mean_absolute_error(test_bayesian_pred, y_test_confirmed))\nprint('MSE:',mean_squared_error(test_bayesian_pred, y_test_confirmed))","9817562d":"plt.plot(y_test_confirmed)\nplt.plot(test_bayesian_pred)","c899c7cd":"# Future predictions using Polynomial Regression \nlinear_pred = linear_pred.reshape(1,-1)[0]\nprint('Polynomial regression future predictions:')\nset(zip(future_forcast_dates[-10:], np.round(linear_pred[-10:])))","fdb1c059":"# Future predictions using Linear Regression \nprint('Ridge regression future predictions:')\nset(zip(future_forcast_dates[-10:], np.round(bayesian_pred[-10:])))","d58ca2e1":"# transform our data for polynomial regression\npoly = PolynomialFeatures(degree=4)\npoly_X_train_death = poly.fit_transform(X_train_death)\npoly_X_test_death = poly.fit_transform(X_test_death)\npoly_future_forcast = poly.fit_transform(future_forcast)","538708f5":"# polynomial regression\nlinear_model = LinearRegression(normalize=True, fit_intercept=False)\nlinear_model.fit(poly_X_train_death, y_train_death)\ntest_linear_pred = linear_model.predict(poly_X_test_death)\nlinear_pred = linear_model.predict(poly_future_forcast)\nprint('MAE:', mean_absolute_error(test_linear_pred, y_test_death))\nprint('MSE:',mean_squared_error(test_linear_pred, y_test_death))","8a25a03f":"print(linear_model.coef_)","3ea3e871":"plt.plot(test_linear_pred)\nplt.plot(y_test_confirmed)","6055a9b1":"# bayesian ridge polynomial regression\ntol = [1e-5, 1e-4, 1e-3]\nalpha_1 = [1e-7, 1e-6, 1e-5, 1e-4]\nalpha_2 = [1e-8, 1e-7, 1e-6, 1e-5]\nlambda_1 = [1e-7, 1e-6, 1e-5, 1e-4]\nlambda_2 = [1e-8, 1e-7, 1e-6, 1e-5]\n\nbayesian_grid = {'tol': tol, 'alpha_1': alpha_1, 'alpha_2' : alpha_2, 'lambda_1': lambda_1, 'lambda_2' : lambda_2}\n\nbayesian = BayesianRidge(fit_intercept=False, normalize=True)\nbayesian_search = RandomizedSearchCV(bayesian, bayesian_grid, scoring='neg_mean_squared_error', cv=3, return_train_score=True, n_jobs=-1, n_iter=40, verbose=1)\nbayesian_search.fit(poly_X_train_death, y_train_death)","6e6d459c":"bayesian_search.best_params_","d663b9c2":"bayesian_confirmed = bayesian_search.best_estimator_\ntest_bayesian_pred = bayesian_confirmed.predict(poly_X_test_death)\nbayesian_pred = bayesian_confirmed.predict(poly_future_forcast)\nprint('MAE:', mean_absolute_error(test_bayesian_pred, y_test_death))\nprint('MSE:',mean_squared_error(test_bayesian_pred, y_test_death))","51b4f505":"plt.plot(y_test_death)\nplt.plot(test_bayesian_pred)","b5157d8d":"# Future predictions using Polynomial Regression \nlinear_pred = linear_pred.reshape(1,-1)[0]\nprint('Polynomial regression future predictions:')\nset(zip(future_forcast_dates[-10:], np.round(linear_pred[-10:])))","bce78bd1":"# Future predictions using Linear Regression \nprint('Ridge regression future predictions:')\nset(zip(future_forcast_dates[-10:], np.round(bayesian_pred[-10:])))","e7942436":"**Expected future 10 days prediction on total confirmed cases**","26541770":"# **Here I have seen that Bayesian Ridge Polynomial Regression worked very well on future prediction . The expected number for total confirmed cases and deaths may vary little but expected to be same as the prediction.\n# Thanks for reading, please upvote . If any question please feel free to ask on the comments .\n# This is my first notebook on Kaggle.**","26e5f65d":"**Expected future 10 days prediction on total death**","f36b3fcf":"# **This notebook is on the analysis of INDIA on the covid 19 situation . Here I have predicted the 10 days future total confirmed cases and total deaths to be happen. **","1bbc2739":"I have used the data from John Hopkins Github account"}}