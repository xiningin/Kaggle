{"cell_type":{"56e9a10c":"code","72855bac":"code","481354ba":"code","67abe8d1":"code","06718a46":"code","17b9bbf5":"code","ee18ee7c":"code","bedffe3a":"code","eb868cb9":"code","1793c0f9":"code","6eb906b2":"code","d77826ce":"code","9e2c0c03":"code","97033853":"code","a7a550e0":"code","710f82e0":"code","527f4ad3":"code","b3376b66":"code","23de3e6d":"code","c2f9b8c8":"code","c7249def":"code","467b4f3d":"code","27694aa0":"code","88255ca3":"code","f0104aad":"code","faa94077":"code","88a92d5e":"code","7a805f6d":"code","463de7a2":"code","fd65ecec":"code","c665079c":"code","b02906c1":"code","4c385fb8":"code","b6be4e54":"markdown","fa1012e6":"markdown","6aa7d83e":"markdown","cd5efcab":"markdown","0735839e":"markdown","83e046bd":"markdown","e909b266":"markdown","c2b1ddae":"markdown","d8c57f26":"markdown","f67c06bb":"markdown","936bd5ba":"markdown","99fafea2":"markdown"},"source":{"56e9a10c":"import pandas as pd\nimport numpy as np\nimport csv\nimport os","72855bac":"df=pd.read_csv(\"..\/input\/diabetes-health-indicators-dataset\/diabetes_012_health_indicators_BRFSS2015.csv\")","481354ba":"df=df.drop(\"Income\",axis=1)\ndf","67abe8d1":"df[\"Diabetes_012\"].replace({1.0: 2.0}, inplace=True)\n#df[\"Diabetes_012\"].replace({0.0:\"No_Diabetes\"}, inplace=True)\ndf[\"Diabetes_012\"].replace({2.0:1.0}, inplace=True)","06718a46":"X=df.drop([\"Diabetes_012\"],axis=1)\ny=df[\"Diabetes_012\"]","17b9bbf5":"y.value_counts().plot.pie(autopct='%.2f')","ee18ee7c":"from imblearn.under_sampling import RandomUnderSampler","bedffe3a":"rus=RandomUnderSampler(sampling_strategy=0.8)#Sampling Startegy means the ratio\nx_res,y_res = rus.fit_resample(X,y)\ny_res.value_counts().plot.pie(autopct='%.2f')","eb868cb9":"X = x_res\ny = y_res","1793c0f9":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train,y_test = train_test_split(X,y,test_size = 0.2,random_state = 51)","6eb906b2":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nscaler.fit(X_train)\nX_train = scaler.transform(X_train)\nX_test = scaler.transform(X_test)","d77826ce":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors=3)\n# Train the model using the training sets\nknn.fit(X_train,y_train)\ny_train_pred = knn.predict(X_train)\ny_test_pred = knn.predict(X_test)","9e2c0c03":"from sklearn.metrics import matthews_corrcoef,f1_score,accuracy_score\nknn_train_mcc = matthews_corrcoef(y_train, y_train_pred)\nknn_train_accuracy = accuracy_score(y_train, y_train_pred)\nknn_train_f1_score=f1_score(y_train, y_train_pred,average='weighted')\nprint(\"F1-Score: \",knn_train_f1_score*100)\nprint(\"Accuracy Score: \",knn_train_accuracy*100)\nprint(\"MCC: \",knn_train_mcc*100)","97033853":"#Testing Data Set\nknn_test_mcc = matthews_corrcoef(y_test, y_test_pred)\nknn_test_accuracy = accuracy_score(y_test, y_test_pred)\nknn_test_f1_score=f1_score(y_test, y_test_pred,average='weighted')\nprint(\"F1-Score: \",knn_test_f1_score*100)\nprint(\"Accuracy Score: \",knn_test_accuracy*100)\nprint(\"MCC: \",knn_test_mcc*100)","a7a550e0":"from sklearn import tree\nclf = tree.DecisionTreeClassifier()\nclf = clf.fit(X_train,y_train)\ny_train_pred = clf.predict(X_train)\ny_test_pred = clf.predict(X_test)","710f82e0":"#Training Data Set\nprint(\"--------------------TRAINING DATA-----------\")\nfrom sklearn.metrics import matthews_corrcoef,f1_score,accuracy_score\nclf_train_mcc = matthews_corrcoef(y_train, y_train_pred)\nclf_train_accuracy = accuracy_score(y_train, y_train_pred)\nclf_train_f1_score=f1_score(y_train, y_train_pred,average='weighted')\nprint(\"F1-Score: \",clf_train_f1_score*100)\nprint(\"Accuracy Score: \",clf_train_accuracy*100)\nprint(\"MCC: \",clf_train_mcc*100)\nprint(\"--------------------TESTING DATA-----------\")\n#Testing Data Set\nclf_test_mcc = matthews_corrcoef(y_test, y_test_pred)\nclf_test_accuracy = accuracy_score(y_test, y_test_pred)\nclf_test_f1_score=f1_score(y_test, y_test_pred,average='weighted')\nprint(\"F1-Score: \",clf_test_f1_score*100)\nprint(\"Accuracy Score: \",clf_test_accuracy*100)\nprint(\"MCC: \",clf_test_mcc*100)","527f4ad3":"#RANDOM FOREST CLASSIFIER\nfrom sklearn.ensemble import RandomForestClassifier\nrfc = RandomForestClassifier()\nrfc.fit(X_train,y_train)\ny_train_pred = rfc.predict(X_train)\ny_test_pred = rfc.predict(X_test)","b3376b66":"#Training Data Set\nprint(\"--------------------TRAINING DATA-----------\")\nfrom sklearn.metrics import matthews_corrcoef,f1_score,accuracy_score\nrfc_train_mcc = matthews_corrcoef(y_train, y_train_pred)\nrfc_train_accuracy = accuracy_score(y_train, y_train_pred)\nrfc_train_f1_score=f1_score(y_train, y_train_pred,average='weighted')\nprint(\"F1-Score: \",rfc_train_f1_score*100)\nprint(\"Accuracy Score: \",rfc_train_accuracy*100)\nprint(\"MCC: \",rfc_train_mcc*100)\nprint(\"--------------------TESTING DATA-----------\")\n#Testing Data Set\nrfc_test_mcc = matthews_corrcoef(y_test, y_test_pred)\nrfc_test_accuracy = accuracy_score(y_test, y_test_pred)\nrfc_test_f1_score=f1_score(y_test, y_test_pred,average='weighted')\nprint(\"F1-Score: \",rfc_test_f1_score*100)\nprint(\"Accuracy Score: \",rfc_test_accuracy*100)\nprint(\"MCC: \",rfc_test_mcc*100)","23de3e6d":"from sklearn.naive_bayes import GaussianNB\nGNB = GaussianNB()\nGNB.fit(X_train,y_train)\ny_train_pred = GNB.predict(X_train)\ny_test_pred = GNB.predict(X_test)","c2f9b8c8":"#Training Data Set\nprint(\"--------------------TRAINING DATA-----------\")\nfrom sklearn.metrics import matthews_corrcoef,f1_score,accuracy_score\nGNB_train_mcc = matthews_corrcoef(y_train, y_train_pred)\nGNB_train_accuracy = accuracy_score(y_train, y_train_pred)\nGNB_train_f1_score=f1_score(y_train, y_train_pred,average='weighted')\nprint(\"F1-Score: \",GNB_train_f1_score*100)\nprint(\"Accuracy Score: \",GNB_train_accuracy*100)\nprint(\"MCC: \",GNB_train_mcc*100)\nprint(\"--------------------TESTING DATA-----------\")\n#Testing Data Set\nGNB_test_mcc = matthews_corrcoef(y_test, y_test_pred)\nGNB_test_accuracy = accuracy_score(y_test, y_test_pred)\nGNB_test_f1_score=f1_score(y_test, y_test_pred,average='weighted')\nprint(\"F1-Score: \",GNB_test_f1_score*100)\nprint(\"Accuracy Score: \",GNB_test_accuracy*100)\nprint(\"MCC: \",GNB_test_mcc*100)","c7249def":"#Neural Network\nfrom sklearn.neural_network import MLPClassifier\n\nmlp=MLPClassifier(alpha=1, max_iter=1000)\nmlp.fit(X_train, y_train)\n\ny_train_pred=mlp.predict(X_train)\ny_test_pred=mlp.predict(X_test)\n\n#Training Data Set\nprint(\"--------------------TRAINING DATA-----------\")\nfrom sklearn.metrics import matthews_corrcoef,f1_score,accuracy_score\nmlp_train_mcc = matthews_corrcoef(y_train, y_train_pred)\nmlp_train_accuracy = accuracy_score(y_train, y_train_pred)\nmlp_train_f1_score=f1_score(y_train, y_train_pred,average='weighted')\nprint(\"F1-Score: \",mlp_train_f1_score*100)\nprint(\"Accuracy Score: \",mlp_train_accuracy*100)\nprint(\"MCC: \",mlp_train_mcc*100)\nprint(\"--------------------TESTING DATA-----------\")\n#Testing Data Set\nmlp_test_mcc = matthews_corrcoef(y_test, y_test_pred)\nmlp_test_accuracy = accuracy_score(y_test, y_test_pred)\nmlp_test_f1_score=f1_score(y_test, y_test_pred,average='weighted')\nprint(\"F1-Score: \",mlp_test_f1_score*100)\nprint(\"Accuracy Score: \",mlp_test_accuracy*100)\nprint(\"MCC: \",mlp_test_mcc*100)\n","467b4f3d":"from sklearn.metrics import roc_curve, roc_auc_score\nauc = roc_auc_score(y_test,y_test_pred)\nauc","27694aa0":"from sklearn.ensemble import StackingClassifier\nfrom sklearn.linear_model import LogisticRegression\n\nestimators = [\n    ('knn',knn),\n    ('clf',clf),\n    ('rfc',rfc),\n    ('GNB',GNB),\n    ('mlp',mlp) ]","88255ca3":"stack_model = StackingClassifier(estimators=estimators, final_estimator=LogisticRegression())","f0104aad":"stack_model.fit(X_train,y_train)","faa94077":"y_train_pred = stack_model.predict(X_train)\ny_test_pred = stack_model.predict(X_test)","88a92d5e":"#Training Data Set\nprint(\"--------------------TRAINING DATA-----------\")\nfrom sklearn.metrics import matthews_corrcoef,f1_score,accuracy_score\nstack_model_train_mcc = matthews_corrcoef(y_train, y_train_pred)\nstack_model_train_accuracy = accuracy_score(y_train, y_train_pred)\nstack_model_train_f1_score=f1_score(y_train, y_train_pred,average='weighted')\nprint(\"F1-Score: \",stack_model_train_f1_score*100)\nprint(\"Accuracy Score: \",stack_model_train_accuracy*100)\nprint(\"MCC: \",stack_model_train_mcc*100)\nprint(\"--------------------TESTING DATA-----------\")\n#Testing Data Set\nstack_model_test_mcc = matthews_corrcoef(y_test, y_test_pred)\nstack_model_test_accuracy = accuracy_score(y_test, y_test_pred)\nstack_model_test_f1_score=f1_score(y_test, y_test_pred,average='weighted')\nprint(\"F1-Score: \",stack_model_test_f1_score*100)\nprint(\"Accuracy Score: \",stack_model_test_accuracy*100)\nprint(\"MCC: \",stack_model_test_mcc*100)\n","7a805f6d":"from sklearn.metrics import confusion_matrix","463de7a2":"cm=confusion_matrix(y_test,y_test_pred)","fd65ecec":"import  seaborn as sn\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(10,7))\nsn.heatmap(cm,annot=True, fmt='g')\nplt.xlabel('Predicted')\nplt.ylabel('Truth')","c665079c":"auc = roc_auc_score(y_test,y_test_pred)\nauc","b02906c1":"fpr,tpr,_=roc_curve(y_test,y_test_pred)","4c385fb8":"import matplotlib.pyplot as plt\nplt.plot(fpr,tpr,marker='.',label='AUC Score: %0.3f' %auc)\nplt.legend()\nplt.show()","b6be4e54":"# Checking if the Data is Imbalanced","fa1012e6":"# Naive Bayes Classifier","6aa7d83e":"# Ensembling and Stacking all the Classifiers","cd5efcab":"# Reading Data From the File","0735839e":"# Handling the Imbalanced Data","83e046bd":"# Labeling the Data and Characteristics ","e909b266":"# KNN Classifier","c2b1ddae":"# Detecting the Diabetes using Diabetes Health Indicators Dataset","d8c57f26":"# Decision Tree Classifier","f67c06bb":"# Confusion Matrix","936bd5ba":"# Neural Network","99fafea2":"# Random Forest Classifier"}}