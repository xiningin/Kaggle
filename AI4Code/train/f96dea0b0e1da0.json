{"cell_type":{"269b6592":"code","d9b9eacc":"code","4af0685f":"code","ebc4a50e":"code","02304460":"code","3c032028":"code","ea8c1427":"code","1a220046":"code","71f3d67e":"code","a9d3bd35":"markdown","b881fa1f":"markdown","11ed4e98":"markdown","26782f3d":"markdown","1ae03921":"markdown","8ddecc23":"markdown","8b04d0e0":"markdown","e631458e":"markdown"},"source":{"269b6592":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n!pip install openpyxl\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d9b9eacc":"athletes = pd.read_excel(\"..\/input\/2021-olympics-in-tokyo\/Athletes.xlsx\")\ncoaches = pd.read_excel(\"..\/input\/2021-olympics-in-tokyo\/Coaches.xlsx\")\ngender = pd.read_excel(\"..\/input\/2021-olympics-in-tokyo\/EntriesGender.xlsx\")\nmedals = pd.read_excel(\"..\/input\/2021-olympics-in-tokyo\/Medals.xlsx\")\nteams = pd.read_excel(\"..\/input\/2021-olympics-in-tokyo\/Teams.xlsx\")","4af0685f":"dff = {\n    \"Athletes\" : athletes,\n    \"Coaches\" : coaches,\n    \"Gender\" : gender,\n    \"Medals\" : medals,\n    \"Teams\" : teams\n}\n\nfor key, value in dff.items():\n  print(f\"___________________________________{key}________________________________________\",end=\"\")\n  for i in range(8 - len(key)):\n    print(\"_\",end=\"\")\n  print()\n  print()\n  print(\"Little Overview Of Data:\")\n  print(value.head(5))\n  rows , columns = value.shape\n  print()\n  print(f\"Total Rows Are {rows}, and Columns Are {columns}\")\n  print()\n","ebc4a50e":"medal = medals.sort_values(by=\"Total\", ascending=False)\nplt.figure(figsize=[7,5])\nplt.bar(medal.iloc[:10,1], medal.iloc[:10,2],color=\"#FFD700\", edgecolor=\"black\")\nplt.bar(medal.iloc[:10,1], medal.iloc[:10,3], bottom=medal.iloc[:10,2], color = \"#d6d6d6\", edgecolor=\"black\")\nplt.bar(medal.iloc[:10,1], medal.iloc[:10,4], bottom=medal.iloc[:10,2]+medal.iloc[:10,3], color=\"#83580b\", edgecolor=\"black\")\nplt.xticks(medal.iloc[:10,1], rotation=\"vertical\")\nplt.legend([\"Gold\", \"Silver\", \"Bronze\"])","02304460":"male = teams.Event == \"Men\"\nmale = male.sum()\nfemale = teams.Event == \"Women\"\nfemale = female.sum()\nothers = teams.Event == \"Mixed Team\"\nothers = others.sum()\n\nexplode = [0.04, 0.04, 0.0]\nplt.figure(figsize=[10,8])\nplt.pie([male, female, others],colors= [\"darkorange\", \"purple\", \"cyan\"], explode=explode,autopct='%1.0f%%',\n        wedgeprops = \n        {\"edgecolor\" : \"black\",\n                      'linewidth': 1,\n                      'antialiased': True})\nplt.legend([\"Male\", \"Female\", \"Mixed\"])\nplt.show()","3c032028":"athle = athletes.groupby(\"NOC\").groups\n\ncountry_counts = {}\n\nfor key, value in sorted(athle.items()):\n  country_counts[key] = len(value)\n  sorted_list = sorted(country_counts.items(), key =\n             lambda kv:(kv[1], kv[0]))\nreq_list = sorted_list[-10:]\nx= []\ny= []\n\nfor rows in req_list:\n  x.append(rows[0])\n  y.append(rows[1])\nplt.figure(figsize=(7,5))\nplt.bar(x, y, color=\"darkorange\", edgecolor=\"black\")\nplt.xticks(rotation=45)\nplt.show()","ea8c1427":"team_distribution = teams.groupby(by=\"Discipline\").groups\n\ntd = {}\nfor keys, values in team_distribution.items():\n  td[keys] = len(values)\n\nsorted_team = sorted(td.items(), key = lambda kv:(kv[1],kv[0]))\n\nxt = []\nyt = []\n\nfor i in sorted_team:\n  xt.append(i[0])\n  yt.append(i[1])\n\nplt.figure(figsize = [10, 7])\nplt.bar(xt, yt, color = \"darkorange\", edgecolor=\"black\")\nplt.xticks(rotation = 90)\nplt.legend([\"Number Of Teams\"])\nplt.show()","1a220046":"sortgen = gender.sort_values(by=\"Total\", ascending=\"True\")\n\nplt.figure(figsize=[7, 5])\nplt.bar(x = sortgen.iloc[-10:, 0], height=sortgen.iloc[-10:, 1], color = \"darkorange\", edgecolor=\"black\")\nplt.bar(x = sortgen.iloc[-10:, 0], height=sortgen.iloc[-10:, 2], bottom= sortgen.iloc[-10:,1], color = \"purple\", edgecolor=\"black\")\nplt.legend([\"Male\", \"Female\"])\nplt.xticks(rotation = 90)\nplt.show()","71f3d67e":"no_male = gender.Male.sum()\nno_female = gender.Female.sum()\nexplode = (0, 0.06)\nplt.figure(figsize=[10, 7])\nplt.pie([no_male, no_female], startangle=90,explode= explode , autopct='%1.0f%%',colors=[\"darkorange\", \"Purple\"], wedgeprops = \n        {\"edgecolor\" : \"black\",\n                      'linewidth': 1,\n                      'antialiased': True})\nplt.legend([\"Male\", \"Female\"])\nplt.show()","a9d3bd35":"# **Number Of Teams In Each Discipline**","b881fa1f":"# **Distribbution Of Male & Female Across Discipline**","11ed4e98":"# **Athletes Distribution By Countries**","26782f3d":"# **Importing Datasets**","1ae03921":"# **Little Overview of each Dataset**","8ddecc23":"# **Top Countries Medal Count**","8b04d0e0":"# **Total Division Of Male And Female**","e631458e":"# **Male & Female Distribution in Teams**"}}