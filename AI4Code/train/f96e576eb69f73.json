{"cell_type":{"d0b38c38":"code","f91f9c08":"code","5f467115":"code","69e53be0":"code","ba02a136":"code","32406bc4":"code","019032eb":"code","5851175c":"code","b5e9c3a6":"code","85a64079":"code","b437fcad":"code","49ec04e5":"code","c4fad06b":"code","67997139":"code","c93b459c":"markdown","444cbdd4":"markdown","34033864":"markdown","0dc44037":"markdown","a6788713":"markdown","0a62659a":"markdown","629604b7":"markdown","8b338c8a":"markdown","0fcb16f6":"markdown","eb117b15":"markdown","6338aa59":"markdown","7ebc01c1":"markdown","487fd428":"markdown","d586bc61":"markdown"},"source":{"d0b38c38":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom sklearn import datasets, linear_model","f91f9c08":"df = pd.read_csv('..\/input\/tips-dataset-linear-regression\/tips.csv')\ndf.head(10)","5f467115":"plt.figure(figsize=(15,5))\nplt.grid(True)\nplt.plot(df.Bill, df.Tips, 'o', color='blue');","69e53be0":"bills = df.Bill\ntips = df.Tips\n\n#Train & Test split..\ntotalItems = len(bills)\ntrainRows = int(totalItems*.8) # 80% of total rows for training..\n\nprint(\"Total rows: \" + str(totalItems))\nprint(\"Train items: \" + str(trainRows))","ba02a136":"#Train\nbills_train = bills[0:trainRows]\ntips_train = tips[0:trainRows]\n# bills_train.head()\n# print(bills_train)\nprint(\"Total training rows: \" + str(len(bills_train)))","32406bc4":"#Test\nbills_test = bills[trainRows:totalItems]\ntips_test = tips[trainRows:totalItems]\n# print(bills_test)\nprint(\"Total testing rows: \" + str(len(bills_test)))","019032eb":"lin_reg = linear_model.LinearRegression()","5851175c":"lin_reg.fit(bills_train.to_numpy().reshape(-1, 1), tips_train.to_numpy())\n# print(type(bills_train))","b5e9c3a6":"print('R sq: ',lin_reg.score(bills_train.to_numpy().reshape(-1, 1), tips_train.to_numpy()))","85a64079":"tips_pred = lin_reg.predict(bills_test.to_numpy().reshape(-1, 1))\nprint(tips_pred)","b437fcad":"#Actual:\nprint(tips_test)","49ec04e5":"print(lin_reg.predict([[50]]))","c4fad06b":"#y = m X + b\nprint('Coeff: ',lin_reg.coef_)  #=m","67997139":"#y = m X + b\nprint('Intercept: ',lin_reg.intercept_)  #=b","c93b459c":"# Visualize the data:","444cbdd4":"# Model Accuracy","34033864":"# Instantiate LR model","0dc44037":"# Coeff:","a6788713":"# Import libraries","0a62659a":"# Load train data","629604b7":"# Predict for test bills:","8b338c8a":"# Train-test split:","0fcb16f6":"# Train:","eb117b15":"# Load test data","6338aa59":"# Intercept","7ebc01c1":"1. # Loading data set:","487fd428":"# Cross check with actual test data:","d586bc61":"# Infer on random\/real time data"}}