{"cell_type":{"a6a535c0":"code","ec730301":"code","982053bf":"code","0d58196a":"code","73ba4692":"code","81457511":"code","f732b30e":"code","0a78e78b":"code","1bba7c78":"code","52a6530b":"code","e5b9cbc5":"code","27f1fbbe":"code","1f8f1ef0":"code","0d060d2e":"code","572dc3f5":"code","33760130":"code","d54c1954":"code","bfa6af01":"code","2030e9f5":"code","8f645132":"code","9d8cc4ab":"code","a5a95958":"code","aa5bf68b":"code","9acdbd86":"code","ea11ca26":"code","efbb5d6d":"code","75132ea1":"code","78d3b036":"code","b70dfe2f":"code","263217de":"code","4317dfb3":"code","847a14ac":"code","c84bbdfe":"code","cfc13456":"code","9d48376f":"code","21582539":"code","d85711fa":"code","30a8242f":"code","7e9dcdd1":"code","4f696c9a":"code","a2d0e272":"code","d1ba93f8":"code","0bb8fa8c":"markdown","35792fd7":"markdown","9b98a000":"markdown","eef0cb62":"markdown","2bb976c9":"markdown","f893e5a3":"markdown","e683a80c":"markdown","42e733ec":"markdown","30aa93e9":"markdown","5ebf80c2":"markdown","61a7de80":"markdown"},"source":{"a6a535c0":"import os\nos.listdir('..\/input\/riiid-test-answer-prediction')","ec730301":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.io as pio\npio.templates.default = \"plotly_white\"\n","982053bf":"# the Total number of rows in train.csv are 101M . So lets load a part of it \ntrain = pd.read_csv(\"..\/input\/riiid-test-answer-prediction\/train.csv\", low_memory=False, \n    nrows=5000000,dtype={\n        'row_id': 'int64', \n        'timestamp': 'int64', \n        'user_id': 'int32', \n        'content_id': 'int16', \n        'content_type_id': 'int8',\n        'task_container_id': 'int16', \n        'user_answer': 'int8', \n        'answered_correctly': 'int8', \n        'prior_question_elapsed_time': 'float32', \n        'prior_question_had_explanation': 'boolean'\n    })","0d58196a":"train.head(10)","73ba4692":"train.info()","81457511":"print(f'There are {train.shape[0]} rows in train data.')\nprint(f\"Total number of Unique users in our train_df is {train['user_id'].nunique()}\")","f732b30e":"sns.cubehelix_palette(as_cmap=True)\n\n","0a78e78b":"# Lets check how many user saw an explanation and  correct response(s) after answering  previous question bundle.\nax = sns.countplot(x=\"prior_question_had_explanation\", data=train, palette=\"Set3\",hue=\"prior_question_had_explanation\")\n","1bba7c78":"ax = sns.countplot(x=\"answered_correctly\", data=train,hue=\"answered_correctly\")\n","52a6530b":"ax = sns.countplot(x=\"prior_question_had_explanation\", data=train, palette=\"Set3\",hue=\"answered_correctly\")\n","e5b9cbc5":"ax = sns.countplot(x=\"content_type_id\", data=train, palette=\"Set3\")\n","27f1fbbe":"ds = train['user_answer'].value_counts().reset_index()\nds.columns = ['answers', 'percent_of_answers']\nds['percent_of_answers'] \/= len(train)\nds = ds.sort_values(['percent_of_answers'])\nfig = px.bar(\n    ds, \n    x='answers', \n    y='percent_of_answers', \n    orientation='v', \n    title='Percent of user answers', \n    height=500, \n    width=500\n)\nfig.show()","1f8f1ef0":"sns.set()\nfig = plt.figure(figsize=(15,6))\nfig = sns.kdeplot(train.groupby(by='user_id').count()['row_id'], shade=True, gridsize=50, color='g', legend=False)\nfig.figure.suptitle(\"User_id distribution\", fontsize = 20)\nplt.xlabel('User_id counts', fontsize=16)\nplt.ylabel('Probability', fontsize=16);\n","0d060d2e":"fig = px.histogram(\n    train, \n    x=\"prior_question_elapsed_time\",\n    nbins=100,\n    width=700,\n    height=600,\n    title='Time taken to solve all questions in the previous bundle'\n)\nfig.show()","572dc3f5":"ds = train[train['user_id'] == 115]\nx = ds['timestamp']\ny = ds['prior_question_elapsed_time']\nfig,axes = plt.subplots(1,2,figsize=(10,5))\nsns.distplot(y,ax=axes[0])\nsns.distplot(x,ax=axes[1])","33760130":"ds.info()","d54c1954":"df = train['user_id'].value_counts().reset_index()\ndf.columns = ['user_id', 'count']\ndf = df.sort_values(['count'])","bfa6af01":"df['count'].value_counts()","2030e9f5":"df = df.sort_values(['count'])\nfig = px.bar(\n    df.tail(50), \n    x='user_id', \n    y='count', \n    orientation='h', \n    title='Top 40 users', \n    height=800, \n    width=800\n)\n\nfig.show()","8f645132":"print(f\"Percentage of Lecture actvities = {(train['answered_correctly']==-1).mean()}%\")\n","9d8cc4ab":"train_questions_only_df = train[train['answered_correctly']!=-1]\ntrain_questions_only_df['answered_correctly'].mean()\n","a5a95958":"questions = pd.read_csv('..\/input\/riiid-test-answer-prediction\/questions.csv')","aa5bf68b":"questions.head()","9acdbd86":"print(f\"Total rows in questions metadata dataframe = {questions.shape[0]}\")\nprint(f'Features in Questions dataframe = {questions.shape[1]}')","ea11ca26":"sns.countplot(x='correct_answer',data=questions)","efbb5d6d":"sns.countplot(x='part',data=questions)","75132ea1":"quest_id = questions['question_id'].tolist()\n# Need to check the intersection of questions-id and content_id to check whether the user answered correctly\/not","78d3b036":"lectures = pd.read_csv(\"..\/input\/riiid-test-answer-prediction\/lectures.csv\")","b70dfe2f":"lectures.head()","263217de":"sns.countplot(x='type_of',data=lectures)","4317dfb3":"ds = lectures['tag'].value_counts().reset_index()\nds.columns = ['tag', 'count']\nds['tag'] = ds['tag'].astype(str) + '-'\nds = ds.sort_values(['count'])\nfig = px.bar(\n    ds.tail(40), \n    x='count', \n    y='tag', \n    orientation='h', \n    title='Top 40 lectures by number of tags', \n    height=800, \n    width=700\n)\nfig.show()","847a14ac":"sns.countplot(x='part',data=lectures,palette='Set3')","c84bbdfe":"ex_sub = pd.read_csv(\"..\/input\/riiid-test-answer-prediction\/example_test.csv\")","cfc13456":"ex_sub","9d48376f":"# sample submission \nsample = pd.read_csv(\"..\/input\/riiid-test-answer-prediction\/example_sample_submission.csv\")","21582539":"sample","d85711fa":"grouped_by_user_df = train_questions_only_df.groupby('user_id')\ncontent_answers_df = grouped_by_user_df.agg({'answered_correctly': ['mean', 'count'] })\n\nuser_answers_df = grouped_by_user_df.agg({'answered_correctly': ['mean', 'count'] })","30a8242f":"active_users_dict = user_answers_df[user_answers_df[('answered_correctly','count')] >= 20][('answered_correctly','mean')].to_dict()\npopular_questions_dict = content_answers_df[content_answers_df[('answered_correctly','count')] >= 20][('answered_correctly','mean')].to_dict()","7e9dcdd1":"def predict_sample(user_id, content_id):\n    if content_id in popular_questions_dict:\n        return popular_questions_dict[content_id]\n    if user_id in active_users_dict:\n        return active_users_dict[user_id]\n    return 0.658\n","4f696c9a":"import riiideducation\n\nenv = riiideducation.make_env()","a2d0e272":"iter_test = env.iter_test()\n","d1ba93f8":"for (test_df, sample_prediction_df) in iter_test:\n    test_df['answered_correctly'] = test_df.apply(lambda x: predict_sample(x['user_id'], x['content_id']), 1)\n    env.predict(test_df.loc[test_df['content_type_id'] == 0, ['row_id', 'answered_correctly']])","0bb8fa8c":"The Probablity of answering correctly needs to be predicted .","35792fd7":"# Data Description\nChallenge in this competition is to predict whether students are able to answer their next questions correctly.\nThis is a time-series code competition, you will receive test set data and make predictions with Kaggle's time-series API.\n\n1. ***Train.csv***=> We have been provided the Features for the prediction of probability of answering next questions.\n\n**row_id**: ID code for the row.\n\n**timestamp**: time between this user interaction and the first event \n\n**user_id**: ID code for the user.\n\n**content_id**: ID code for the user interaction\n\n**content_type_id**: 0 if question else 1 for Lecture\n\n**task_container_id**:  Id code for the batch of questions or lectures.\n\n**user_answer**: the user's answer to the question,  Read -1 as null, for lectures.\n\n**answered_correctly**: IF  the user responded correctly. Read -1 as null, for lectures.\n\n**prior_question_elapsed_time**: (float32) How long it took a user to answer their previous question bundle, ignoring any lectures in between. It is the total time a user took to solve all  questions in the previous bundle.\n\n**prior_question_had_explanation**: (bool) Whether or not the user saw an explanation and the correct response(s) after answering the previous question bundle, ignoring any lectures in between.\n\n","9b98a000":"Baseline:\n\ncredits = https:\/\/www.kaggle.com\/ilialar\/simple-eda-and-baseline","eef0cb62":"# General Information\n**Riiid! Answer Correctness Prediction**\n![riiid-logo-background-scaled.jpg](attachment:riiid-logo-background-scaled.jpg)\nIn this competition, your challenge is to **create algorithms for \"Knowledge Tracing**,\" the modeling of student knowledge over time. The goal is to accurately predict how students will perform on future interactions.\nChallenge in this competition is to  predict whether students are able to answer their next questions correctly.\n\nIn this kernal we will **Explore the Data** and **understand the Data** , **Metric** used and hopefully find some Patterns in the data !!\n\nThe Evaluation Metric used is : **roc_auc_score** . \nroc_auc score will be computed between **predicted probability** and the **observed target**.\n\n","2bb976c9":"# Data Loading and Overview","f893e5a3":"# Questions MetaData \n\n1. ***questions.csv*** => Metadata about the questions posted to the users\n\n**question_id**: foreign key for the **content_id column**, when the content type is question (0).\n\n**correct_answer**: Correct answer to the question assoiciated with question_id , can be used to check user's answer.\n\n**tags**: one or more detailed tag codes for the question. They are sufficient for clustering the questions together.","e683a80c":"Average 66% of answers given are correct ","42e733ec":"# Lectures Data\n\n1. ***lectures.csv*** => metadata for the lecutures watched as students progressed through their education\n\n**lecture_id**: foreign key for the train\/test content_id column, when the content type is lecture (1)\n\n**tag**: Used for clustering together lectures\n\n**type_of**: brief description of the core purpose of the lecture","30aa93e9":"**Let us Analyze and visualize individual user-id and its time-stamp and answers**","5ebf80c2":"The maximum occurance of Top User-Ids :","61a7de80":"# Example_Test data\n\nprior_group_responses (string) provides all of the user_answer entries for previous group in a string representation of a list in the first row of the group. All other rows in each group are null. If you are using Python, you will likely want to call eval on the non-null rows. Some rows may be null, or empty lists.\n\nprior_group_answers_correct (string) provides all the answered_correctly field for previous group, with the same format and caveats as prior_group_responses. Some rows may be null, or empty lists."}}