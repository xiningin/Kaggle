{"cell_type":{"dca51577":"code","401fab58":"code","5f17ab42":"code","fd5eada9":"code","2e75f6e0":"code","0cdfe219":"code","144a3b81":"code","df45f0cd":"code","187b7d1a":"code","ab8e9ec8":"code","0cc8e99d":"code","17049e2b":"code","230ecbeb":"code","af3e69a1":"code","0457fc41":"code","97c43386":"code","82367203":"code","14d5ea82":"code","d1df59e1":"markdown","c57d1e4b":"markdown","98468968":"markdown","8e798d55":"markdown","1e2a0436":"markdown","5c5da6bd":"markdown"},"source":{"dca51577":"import torch\nimport pandas as pd \nimport random \nimport time\nimport datetime\nfrom sklearn.model_selection import train_test_split, StratifiedKFold, KFold\nfrom sklearn.metrics import f1_score\nimport numpy as np \nfrom torch.utils.data import TensorDataset,Subset\nfrom transformers import BertTokenizer\nfrom torch.utils.data import DataLoader, RandomSampler, SequentialSampler\nfrom torch.nn import functional as F","401fab58":"# If there's a GPU available...\nif torch.cuda.is_available():    \n\n    # Tell PyTorch to use the GPU.    \n    device = torch.device(\"cuda\")\n\n    print('There are %d GPU(s) available.' % torch.cuda.device_count())\n\n    print('We will use the GPU:', torch.cuda.get_device_name(0))\n\n# If not...\nelse:\n    print('No GPU available, using the CPU instead.')\n    device = torch.device(\"cpu\")","5f17ab42":"# Load the BERT tokenizer.\ntokenizer = BertTokenizer.from_pretrained('bert-base-uncased', do_lower_case=True)","fd5eada9":"train = pd.read_csv('..\/input\/nlp-getting-started\/train.csv')\nsentences = train.text.values\nlabels = train.target.values","2e75f6e0":"# Tokenize all of the sentences and map the tokens to thier word IDs.\ninput_ids = []\nattention_masks = []\n\n# For every sentence...\nfor sent in sentences:\n  \n    encoded_dict = tokenizer.encode_plus(\n                        sent,                      # Sentence to encode.\n                        add_special_tokens = True, # Add '[CLS]' and '[SEP]'\n                        max_length = 64,           # Pad & truncate all sentences.\n                        pad_to_max_length = True,\n                        return_attention_mask = True,   # Construct attn. masks.\n                        return_tensors = 'pt',     # Return pytorch tensors.\n                   )\n    \n    # Add the encoded sentence to the list.    \n    input_ids.append(encoded_dict['input_ids'])\n    \n    # And its attention mask (simply differentiates padding from non-padding).\n    attention_masks.append(encoded_dict['attention_mask'])\n\n# Convert the lists into tensors.\ninput_ids = torch.cat(input_ids, dim=0)\nattention_masks = torch.cat(attention_masks, dim=0)\nlabels = torch.tensor(labels)\n\n# Print sentence 0, now as a list of IDs.\nprint('Original: ', sentences[0])\nprint('Token IDs:', input_ids[0])","0cdfe219":"batch_size = 16 \nfrom torch.utils.data import DataLoader, RandomSampler, SequentialSampler\n#helper function to get train and val data loaders for each fold \ndef get_data_loaders(dataset,train_indexes,val_indexes):\n    train_tensor = Subset(dataset,train_indexes)\n    val_tensor = Subset(dataset,val_indexes)\n    train_dataloader = DataLoader(\n            train_tensor, \n            sampler = RandomSampler(train_tensor), \n            batch_size = batch_size\n        )\n\n    val_dataloader = DataLoader(\n            val_tensor, \n            sampler = SequentialSampler(val_tensor), \n            batch_size = batch_size \n        )\n    return train_dataloader,val_dataloader\n","144a3b81":"# Combine the training inputs into a TensorDataset.\ndataset = TensorDataset(input_ids, attention_masks, labels)","df45f0cd":"df = pd.read_csv(\"..\/input\/nlp-getting-started\/test.csv\")\nsentences = df.text.values\ninput_ids = []\nattention_masks = []\nfor sent in sentences:\n\n    encoded_dict = tokenizer.encode_plus(\n                        sent,                      # Sentence to encode.\n                        add_special_tokens = True, # Add '[CLS]' and '[SEP]'\n                        max_length = 64,           # Pad & truncate all sentences.\n                        pad_to_max_length = True,\n                        return_attention_mask = True,   # Construct attn. masks.\n                        return_tensors = 'pt',     # Return pytorch tensors.\n                   )\n    \n    # Add the encoded sentence to the list.    \n    input_ids.append(encoded_dict['input_ids'])\n    # And its attention mask (simply differentiates padding from non-padding).\n    attention_masks.append(encoded_dict['attention_mask'])\n\n# Convert the lists into tensors.\ninput_ids = torch.cat(input_ids, dim=0)\nattention_masks = torch.cat(attention_masks, dim=0)\n# Set the batch size.  \nbatch_size = 16  \n# Create the DataLoader.\nprediction_data = TensorDataset(input_ids, attention_masks)\nprediction_sampler = SequentialSampler(prediction_data)\nprediction_dataloader = DataLoader(prediction_data, sampler=prediction_sampler, batch_size=batch_size)","187b7d1a":"from transformers import BertForSequenceClassification, AdamW, BertConfig\ndef get_bert_model():\n    model = BertForSequenceClassification.from_pretrained(\n      \"bert-base-uncased\", \n      num_labels = 2,           \n      output_attentions = False, \n      output_hidden_states = False, \n    )\n    # Tell pytorch to run this model on the GPU.\n    model.cuda()\n    return model","ab8e9ec8":"import numpy as np\n# Function to calculate the accuracy of our predictions vs labels\ndef flat_accuracy(preds, labels):\n    pred_flat = np.argmax(preds, axis=1).flatten()\n    labels_flat = labels.flatten()\n    return np.sum(pred_flat == labels_flat) \/ len(labels_flat)","0cc8e99d":"def format_time(elapsed):\n    '''\n    Takes a time in seconds and returns a string hh:mm:ss\n    '''\n    elapsed_rounded = int(round((elapsed)))\n    return str(datetime.timedelta(seconds=elapsed_rounded))\n","17049e2b":"# Set the seed value all over the place to make this reproducible.\nseed_val = 1000\nrandom.seed(seed_val)\nnp.random.seed(seed_val)\ntorch.manual_seed(seed_val)\ntorch.cuda.manual_seed_all(seed_val)","230ecbeb":"total_folds = 12\ncurrent_fold = 0\nall_folds_preds = []\nepochs = 1\nfold=StratifiedKFold(n_splits=total_folds, shuffle=True, random_state=1000)\n\ntraining_stats = []","af3e69a1":"# Measure the total training time for the whole run.\ntotal_t0 = time.time()\n#for each fold..\nfor train_index, test_index in fold.split(train,train['target']):\n    model = get_bert_model()\n    optimizer = AdamW(model.parameters(),lr = 5e-5,eps = 1e-8)\n    current_fold = current_fold+1\n    train_dataloader,validation_dataloader = get_data_loaders(dataset,train_index,test_index)\n    print(\"\")\n    print('================= Fold {:} \/ {:} ================='.format(current_fold,total_folds))\n    # For each epoch...\n    for epoch_i in range(0, epochs):\n        # ========================================\n        #               Training\n        # ========================================\n\n        # Perform one full pass over the training set.\n\n        print(\"\")\n        print('======== Epoch {:} \/ {:} ========'.format(epoch_i + 1, epochs))\n        print('Training...')\n\n        # Measure how long the training epoch takes.\n        t0 = time.time()\n\n        # Reset the total loss for this epoch.\n        total_train_loss = 0\n        model.train()\n        # For each batch of training data...\n        for step, batch in enumerate(train_dataloader):\n\n            b_input_ids = batch[0].to(device)\n            b_input_mask = batch[1].to(device)\n            b_labels = batch[2].to(device)\n            model.zero_grad()        \n\n            loss, logits = model(b_input_ids, \n                              token_type_ids=None, \n                              attention_mask=b_input_mask, \n                              labels=b_labels)\n\n\n            total_train_loss += loss.item()\n\n            # Perform a backward pass to calculate the gradients.\n            loss.backward()\n\n            torch.nn.utils.clip_grad_norm_(model.parameters(), 1.0)\n            #update weights\n            optimizer.step()\n\n\n        # Calculate the average loss over all of the batches.\n        avg_train_loss = total_train_loss \/ len(train_dataloader)            \n\n        # Measure how long this epoch took.\n        training_time = format_time(time.time() - t0)\n\n        print(\"\")\n        print(\"  Average training loss: {0:.2f}\".format(avg_train_loss))\n        print(\"  Training epcoh took: {:}\".format(training_time))\n\n        # ========================================\n        #               Validation\n        # ========================================\n        # After the completion of each training epoch, measure our performance on\n        # our validation set.\n\n        print(\"\")\n        print(\"Running Validation...\")\n\n        t0 = time.time()\n\n        # Put the model in evaluation mode--the dropout layers behave differently\n        # during evaluation.\n        model.eval()\n\n        # Tracking variables \n        total_f1_score = 0\n        total_eval_accuracy = 0\n        total_eval_loss = 0\n        nb_eval_steps = 0\n\n        # Evaluate data for one epoch\n        for batch in validation_dataloader:\n\n\n            b_input_ids = batch[0].to(device)\n            b_input_mask = batch[1].to(device)\n            b_labels = batch[2].to(device)\n\n            with torch.no_grad():        \n                (loss, logits) = model(b_input_ids, \n                                        token_type_ids=None, \n                                        attention_mask=b_input_mask,\n                                        labels=b_labels)\n\n            # Accumulate the validation loss.\n            total_eval_loss += loss.item()\n\n            # Move logits and labels to CPU\n            logits = logits.detach().cpu().numpy()\n            label_ids = b_labels.to('cpu').numpy()\n\n            # Calculate the accuracy for this batch of test sentences, and\n            # accumulate it over all batches.\n            total_eval_accuracy += flat_accuracy(logits, label_ids)\n            total_f1_score += f1_score(np.argmax(logits,axis=1),label_ids)\n\n        # Report the final accuracy and f1_score for this validation run.\n        avg_val_accuracy = total_eval_accuracy \/ len(validation_dataloader)\n        print(\"  Accuracy: {0:.2f}\".format(avg_val_accuracy))\n        \n        avg_f1_score = total_f1_score \/ len(validation_dataloader)\n        print(\"  F1_score: {0:.2f}\".format(avg_f1_score))\n\n        # Calculate the average loss over all of the batches.\n        avg_val_loss = total_eval_loss \/ len(validation_dataloader)\n\n        # Measure how long the validation run took.\n        validation_time = format_time(time.time() - t0)\n\n        print(\"  Validation Loss: {0:.2f}\".format(avg_val_loss))\n        print(\"  Validation took: {:}\".format(validation_time))\n\n        # Record all statistics from this epoch.\n        training_stats.append(\n          {\n              'epoch': epoch_i + 1,\n              'Training Loss': avg_train_loss,\n              'Valid. Loss': avg_val_loss,\n              'Valid. Accur.': avg_val_accuracy,\n              'f1_score' : avg_f1_score,\n              'Training Time': training_time,\n              'Validation Time': validation_time,\n              'fold' : current_fold\n              \n          }\n        )\n\n    print(\"\")\n    print(\"Training complete!\")\n\n    print(\"Total training took {:} (h:mm:ss)\".format(format_time(time.time()-total_t0)))\n\n    # ========================================\n    # Predicting and saving predictions for all folds\n    # ========================================\n\n    print(\"\")\n    print(\"now predicting for this fold\")\n\n    # Put model in evaluation mode\n    model.eval()\n    # Tracking variables \n    predictions  = []\n    # Predict \n    for batch in prediction_dataloader:\n        # Add batch to GPU\n        batch = tuple(t.to(device) for t in batch)\n        # Unpack the inputs from our dataloader\n        b_input_ids, b_input_mask = batch\n        # speeding up prediction\n        with torch.no_grad():\n            # Forward pass, calculate logit predictions\n            outputs = model(b_input_ids, token_type_ids=None, \n                            attention_mask=b_input_mask)\n\n        logits = outputs[0]\n\n        # Move logits and labels to CPU\n        logits = logits.detach().cpu().numpy()\n\n\n        predictions.append(logits)\n\n    stack = np.vstack(predictions)\n    final_preds = F.softmax(torch.from_numpy(stack))[:,1].numpy()\n    all_folds_preds.append(final_preds)\nprint(\"Completed\")\n","0457fc41":"pd.set_option('precision', 2)\ndf_stats = pd.DataFrame(data=training_stats)\ndf_stats = df_stats.set_index('fold')\ndf_stats","97c43386":"to_submit =np.mean(all_folds_preds,0)","82367203":"sub=pd.DataFrame()\nsub['id'] = df['id']\nsub['target'] = to_submit\nsub['target'] = sub['target'].apply(lambda x: 1 if x>0.5 else 0)\nsub.head()","14d5ea82":"sub.to_csv('bert_base_12_2e-5_64.csv',index=False)","d1df59e1":"# 4. Organising test data for predictions","c57d1e4b":"# 6. Setting File Submission\n","98468968":"# 2.Enabling Gpu \n","8e798d55":"# 1.Importing libraries","1e2a0436":"# 3.Organising Train Data","5c5da6bd":"# 5. Training Loop"}}