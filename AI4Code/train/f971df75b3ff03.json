{"cell_type":{"3097f664":"code","13503636":"code","1cd7296f":"code","585fc334":"code","89dc9d5b":"code","ac9de3c7":"code","ea10b33d":"code","0e754a24":"code","fd92b9fc":"code","fbb6a006":"markdown","7ccf85e7":"markdown","13d2411d":"markdown","f6ff55af":"markdown","8ea13217":"markdown","50ad9ff7":"markdown"},"source":{"3097f664":"# %tensorflow_version 2.x\nimport tensorflow as tf\ntf.__version__","13503636":"node1 = tf.constant(3.0, tf.float32)\nnode2 = tf.constant(4.0)\nprint(node1, node2)","1cd7296f":"# sess = tf.Session() # deprecated\n\n# sess = tf.compat.v1.Session()\n\n# tf.compat.v1.Session(\n#     target='', graph=None, config=None\n# )\n\n# Launch the graph in a session.\n# sess = tf.compat.v1.Session()\n\n# with tf.compat.v1.Session() as sess:\n\n    # Evaluate the tensor `c`.\n#     c = node1 * node2\n#     print(sess.run(c)) \n#     print(sess.run([node1, node2]))\n\n#     sess.close()\n    \n# print(sess.run([node1, node2]))\n# sess.close()","585fc334":"g = tf.Graph()\nwith g.as_default():\n    node1 = tf.constant(3.0, tf.float32)\n    node2 = tf.constant(4.0)\n    print(node1, node2)","89dc9d5b":"# with tf.Session(graph=g) as sess:\nwith tf.compat.v1.Session(graph = g) as sess:    \n    c = node1 * node2\n    print(sess.run(c)) \n    print(sess.run([node1, node2]))\n    \n    sess.close()","ac9de3c7":"g1 = tf.Graph()\nwith g1.as_default():\n    a = tf.constant(5)\n    b = tf.constant(2)\n    c = tf.constant(3)\n    \n    d = tf.multiply(a,b)\n    e = tf.add(c,b)\n    f = tf.subtract(d,e)","ea10b33d":"sess = tf.compat.v1.Session(graph = g1)\nouts = sess.run(f)\nprint(outs)\n\nsess.close()","0e754a24":"with tf.compat.v1.Session(graph = g1) as sess:    \n    outs = sess.run(f)\n    print(outs)\n    \n    sess.close()","fd92b9fc":"# a = tf.compat.v1.placeholder(shape=[None, 2], dtype=tf.float32)\n# b = tf.compat.v1.placeholder(shape=[None, 2], dtype=tf.float32)\n\n# adder_node = a + b","fbb6a006":"A `graph` defines the computation. It doesn\u2019t compute anything, it doesn\u2019t hold any values, it just defines the operations that you specified in your code.\n\nA `session` allows to execute graphs or part of graphs. It allocates resources (on one or more machines) for that and holds the actual values of intermediate results and variables.","7ccf85e7":"* tf.Session(): Open a session. All the operations will flow within the sessions\n* run(<some operation>): execute the operation created in step 2.\n* print(result_1): Finally, you can print the result\n* close(): Close the session","13d2411d":"# Dymanic Variables using Placeholder.\nA graph can be parameterized to acept external inputs, knows as placeholders.\n\nA placeholder is a promise to provide a value later.","f6ff55af":"# Example 2","8ea13217":"We can use either of the two.","50ad9ff7":"Note.. above execution did not printed any value.. instead it printed nodes. To get the values, we need to run the computatuional graph. \n1. To actually evaluate the nodes, we must run the computational graph within a session.\n2. A session encapsulates the control and state of the tensorflow runtime."}}