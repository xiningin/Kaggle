{"cell_type":{"a66501dd":"code","40e6584d":"code","c58b8177":"code","86a624e8":"code","2a5948ce":"code","9bd36026":"code","4654f361":"code","5ec873ff":"code","246a390a":"code","3cf26dd5":"code","29097793":"code","a40c0c87":"code","56e56fe9":"code","f2c22de1":"code","ff5d7bb4":"code","df072e05":"code","c0ab6038":"code","21fa4569":"code","3f03573f":"code","65e77317":"code","70a5db7c":"code","0dad7d1a":"markdown"},"source":{"a66501dd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","40e6584d":"import seaborn as sns\nimport matplotlib.pyplot as plt","c58b8177":"data = pd.read_csv('..\/input\/list-of-700-unicorn-companies-across-the-globe\/List of 700 Unicorn Companies.csv')","86a624e8":"data","2a5948ce":"data['Country of origin'].value_counts()","9bd36026":"\ndata['Country of origin'].value_counts()[:10].sort_values().plot(kind = 'barh')","4654f361":"data['City'].value_counts()","5ec873ff":"data['City'].value_counts()[:10].sort_values().plot(kind = 'barh')","246a390a":"data['Industry'].value_counts()","3cf26dd5":"data['Industry'].value_counts()[:10].sort_values().plot(kind = 'barh')","29097793":"data['Valuation (in $B)'] = data['Valuation (in $B)'].apply(lambda x : x.replace('$', ''))","a40c0c87":"data['Valuation (in $B)'] = pd.to_numeric(data['Valuation (in $B)'], downcast=\"float\")","56e56fe9":"data['Valuation (in $B)'].describe()","f2c22de1":"type(data)","ff5d7bb4":"data.groupby(['Country of origin'])['Valuation (in $B)'].sum()","df072e05":"data.groupby(['Country of origin'])['Valuation (in $B)'].sum().plot(kind = 'barh')","c0ab6038":"grouped = data.groupby('Country of origin')['Valuation (in $B)'].sum().reset_index()\ntop_10 = grouped.sort_values('Valuation (in $B)', ascending=False).head(10)\ntop_10.head(10)","21fa4569":"sns.set_theme(style=\"whitegrid\")\nax = sns.barplot(x=\"Valuation (in $B)\", y=\"Country of origin\", data=top_10)","3f03573f":"data.groupby(['Industry'])['Valuation (in $B)'].sum().plot(kind = 'barh')","65e77317":"grouped = data.groupby('Industry')['Valuation (in $B)'].sum().reset_index()\ntop_10 = grouped.sort_values('Valuation (in $B)', ascending=False).head(10)\ntop_10.head(10)","70a5db7c":"sns.set_theme(style=\"whitegrid\")\nax = sns.barplot(x=\"Valuation (in $B)\", y=\"Industry\", data=top_10)","0dad7d1a":"## More work can be done where the Date column can be processed and Day, Month and Year can be extracted. Then, much more analysis can be done using them. This will be continued... :) "}}