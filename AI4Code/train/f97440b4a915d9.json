{"cell_type":{"24594bb3":"code","d46b617f":"code","d5c28e1f":"code","337d6469":"code","fd01b6fc":"code","19db9339":"code","3e8821c7":"code","105dc7ab":"code","19f4f364":"code","6680d25e":"code","fd76af5c":"code","74615b62":"code","d8d512f1":"code","6732cb84":"code","8db3ee14":"code","b1d34de9":"code","e27b0225":"code","0e06878c":"code","14b70ff6":"code","a0ba0f19":"code","41c5a593":"code","eb537269":"code","1d712f97":"code","d11feecb":"code","2e8215d4":"code","19f35b19":"code","e76d7fc5":"code","f5120eb1":"code","61486146":"code","7cafaea0":"code","6d48b1dc":"code","d5ef1722":"code","6f7e0cce":"code","3288f48b":"code","50a5cc6c":"code","c52fd32c":"code","f6ba088b":"code","6fbeb6b2":"code","eafc40a2":"code","34c7ca0d":"code","d9af937d":"markdown"},"source":{"24594bb3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d46b617f":"import matplotlib.pyplot as plt\nimport seaborn as sns\nfrom ast import literal_eval","d5c28e1f":"data_movies = pd.read_csv('..\/input\/tmdb-movie-metadata\/tmdb_5000_movies.csv')\ndata_credits = pd.read_csv('..\/input\/tmdb-movie-metadata\/tmdb_5000_credits.csv')","337d6469":"data_movies.head(2)","fd01b6fc":"data_movies.shape","19db9339":"data_credits = data_credits.rename(columns={'movie_id':'id', \"tittle\" : 'title'})","3e8821c7":"data_credits.head(2)","105dc7ab":"data_movies = data_movies.merge(data_credits,on='id')","19f4f364":"data_movies.head(2)","6680d25e":"data_movies.shape","fd76af5c":"data_movies = data_movies[['genres','id', \"original_title\", 'overview', \"cast\"]]","74615b62":"data_movies.head(2)","d8d512f1":"features = ['cast', 'genres']\nfor feature in features:\n#     This can be used for safely evaluating strings containing Python values from untrusted sources without the need to parse the values oneself. \n    data_movies[feature] = data_movies[feature].apply(literal_eval)","6732cb84":"data_movies.head(2)","8db3ee14":"def get_list(meta_data):\n    if isinstance(meta_data, list):\n        names = [col['name'] for col in meta_data]\n        #Check if more than 3 elements exist. If yes, return only first three. If no, return entire list.\n        if len(names) > 3:\n            names = names[:3]\n        return names\n\n    #Return empty list in case of missing\/malformed data\n    return []\n\nfeatures = ['cast','genres']\nfor feature in features:\n    data_movies[feature] = data_movies[feature].apply(get_list)","b1d34de9":"data_movies.head()","e27b0225":"data_movies.isnull().sum()","0e06878c":"data_movies = data_movies.dropna()","14b70ff6":"data_movies.isnull().sum()","a0ba0f19":"data_movies.head()","41c5a593":"data_movies_hindi = pd.read_csv('..\/input\/the-indian-movie-database\/1950-2019\/bollywood_full_1950-2019.csv')","eb537269":"data_movies_hindi.head()","1d712f97":"data_movies_hindi.rename(columns = {'actors':'cast', 'imdb_id':'id', 'summary': 'overview'}, inplace = True)\n# data_movies_hindi = data_moveis_hindi[['id', \"original_title\", 'genres', 'cast', 'overview']]","d11feecb":"data_movies_hindi.head()","2e8215d4":"data_movies_hindi['genres'] = data_movies_hindi['genres'].str.split('|')\n\ndata_movies_hindi['cast'] = data_movies_hindi['cast'].str.split('|')","19f35b19":"data_movies_hindi.head()","e76d7fc5":"data_movies_hindi = data_movies_hindi[['genres','id', \"original_title\", 'overview', \"cast\"]]","f5120eb1":"data_movies_hindi.head()","61486146":"def clean_data(actors):\n    if isinstance(actors, list):\n        return actors[:3]\n\nfeatures = ['cast']\nfor feature in features:\n    data_movies_hindi[feature] = data_movies_hindi[feature].apply(clean_data)\n\ndata_movies_hindi.head()","7cafaea0":"data_movies_hindi.isnull().sum()","6d48b1dc":"data_movies_hindi = data_movies_hindi.dropna()","d5ef1722":"data_movies_hindi.isnull().sum()","6f7e0cce":"data_movies.size","3288f48b":"combine = data_movies.append(data_movies_hindi, ignore_index=True, sort=True)","50a5cc6c":"combine.size","c52fd32c":"combine.head()","f6ba088b":"combine = combine.rename(columns={'original_title': 'title'})","6fbeb6b2":"movieDataset = combine[['id', 'title', 'genres', 'cast', 'overview']]","eafc40a2":"movieDataset.head()","34c7ca0d":"movieDataset.to_csv('movieDataset.csv', index=None)","d9af937d":"## Adding Indian Movies"}}