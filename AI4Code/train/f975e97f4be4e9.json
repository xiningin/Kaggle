{"cell_type":{"b5142772":"code","559d0b61":"code","9c18dee0":"code","959477a5":"code","67915c67":"code","0dbf7d93":"code","b8e29eb4":"code","c06ec443":"code","d2d2140a":"code","fada20be":"code","6829e7e3":"code","d5270f4b":"code","b77c7115":"code","9e601e5e":"code","f116bad0":"code","3b2d52d8":"code","cc4d6635":"code","5de6fdcd":"code","e427ed91":"code","3376611c":"code","41c0bdb5":"code","ed7100a2":"code","8b6e2247":"code","7ea419d7":"code","bebda018":"code","0356f68c":"code","e8271b5e":"markdown","f31cd2b1":"markdown","2ac1e9f9":"markdown","0b3ad63a":"markdown","376f9319":"markdown","d7ec74ca":"markdown","f7594aa1":"markdown","17ed5408":"markdown","1a421c3c":"markdown","8455a7a3":"markdown","4140732a":"markdown","c48f48f2":"markdown","01fd9a70":"markdown","768ab575":"markdown","2066f884":"markdown","d3005c9b":"markdown","d2111d6c":"markdown","f2c68bc4":"markdown"},"source":{"b5142772":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","559d0b61":"%reload_ext autoreload\n%autoreload 2\n%matplotlib inline","9c18dee0":"from pathlib import Path\nfrom fastai.vision import *\nfrom fastai.metrics import error_rate","959477a5":"def dataPath(path, pathToDataset):\n     path = Path(path)\n     datasetPath = path\/pathToDataset\n     return path, datasetPath, datasetPath.ls()","67915c67":"path = '..\/input'\npath, datasetPath, subdirectories = dataPath(path, 'waffles-or-icecream')\n(path, datasetPath, subdirectories)","0dbf7d93":"def listifyFileNames(subdirectoryPath):\n    \n    fileNames = [fileName for i in range(len(subdirectoryPath)) for fileName in subdirectoryPath[i].ls()]\n    validExtensions = ['.jpg', '.jpeg', '.png', '.JPG', '.jpeg', '.PNG']\n    validFileNames = list(filter(lambda fileName: fileName.suffix in validExtensions, fileNames))\n    \n    return validFileNames","b8e29eb4":"def listifyLabels(fileNamesList):\n    return ['ice-cream' if '\/ice_cream\/' in str(fileName) else 'waffles' for fileName in fileNamesList]","c06ec443":"def createDataBunch(path, filePathList, labelFunc, percentOfDataToSplit, imageSize):\n     return ImageDataBunch.from_lists(path,\n                                        filePathList,\n                                        labels = labelFunc,\n                                        ds_tfms=get_transforms(),\n                                        valid_pct=percentOfDataToSplit,\n                                        size=imageSize).normalize(imagenet_stats)","d2d2140a":"fileNamesList = listifyFileNames(subdirectories)\ndata = createDataBunch(datasetPath, fileNamesList, listifyLabels(fileNamesList),0.2, 224)\ndata.classes","fada20be":"#TODO: need to modify the above fucntion as it is returning only icecreams\ndata.show_batch(rows=3, figsize=(7,6))","6829e7e3":"learn = cnn_learner(data, models.resnet34, metrics=error_rate)","d5270f4b":"preTrainedModelPath = 'pretrained-model-for-classifying-types-of-trash'\npreTrainedModelPath","b77c7115":"learn.path = path\nlearn.model_dir = preTrainedModelPath\nlearn.model_dir","9e601e5e":"learn.load('final')","f116bad0":"learn.fit_one_cycle(4)","3b2d52d8":"image = learn.data.valid_ds[3][0]\nimage","cc4d6635":"learn.predict(image)","5de6fdcd":"def saveModel(learnerObject, model_dir, modelName= None, export: bool= True,return_path: bool= True):\n    learnerObject.model_dir = Path(model_dir)\n    \n    if export is True:\n        learnerObject.path = Path(model_dir)\n        learnerObject.export()\n    else:\n        learnerObject.save(modelName, return_path=return_path)","e427ed91":"saveModel(learn, \"\/kaggle\/working\", 'stage-1', False, False)","3376611c":"def plotTopLossesAndConfusionMatrix(learnerObject, data, numOfRows, figureSize: tuple, confMatrixSize: tuple, dpi, plotConfusionMatrix: bool = True):\n    interp = ClassificationInterpretation.from_learner(learnerObject)\n    losses,idxs = interp.top_losses()\n    len(data.valid_ds)==len(losses)==len(idxs)\n    interp.plot_top_losses(numOfRows, figsize=figureSize)\n    \n    if plotConfusionMatrix:\n        interp.plot_confusion_matrix(figsize=confMatrixSize, dpi=dpi)\n        \n    interp.most_confused(min_val=2)","41c0bdb5":"plotTopLossesAndConfusionMatrix(learn, data, 9, (15,11), (11,11), 60)","ed7100a2":"learn.unfreeze()\nlearn.fit_one_cycle(1)","8b6e2247":"learn.load('stage-1')\nlearn.lr_find()\nlearn.recorder.plot()","7ea419d7":"learn.unfreeze()\nlearn.fit_one_cycle(2, max_lr=slice(1e-5,1e-3))","bebda018":"plotTopLossesAndConfusionMatrix(learn, data, 9, (15,11), (11,11), 60)","0356f68c":"saveModel(learn, \"\/kaggle\/working\", False)","e8271b5e":"* #Transfer learning\n\nUsing the pre-trained model created for waste classification to train the network to classify the ice-cream vs waffles.\nMy thought behind this is that -->\n * The pre-trained model was traine dto do binary classification. So, it contains the knowledge about differentiating between two different classes which could help me in this scenario.","f31cd2b1":"this function plots the images where the classification went wrong and the corresponding confusion matrix.","2ac1e9f9":"The performance looks good now.","0b3ad63a":"It's time to look inisde those directories and find out what we got.","376f9319":"export the model for inference.","d7ec74ca":"training the model for one epoch and then plotting the current learning rate.","f7594aa1":"First the usual boiler plate code.","17ed5408":"train for 4 epochs","1a421c3c":"this function saves the trained model to a directory.","8455a7a3":"let's import necessary modules","4140732a":"predict on a atest image","c48f48f2":"Let's look into the dataset.","01fd9a70":"set the path to the pre-trained model","768ab575":"The below function returns a list of lables for each image file in the list from the previous step.","2066f884":"unfreezing the model to train the backbone of the pre-trained model with a range of learning rate deduced from the above plot.","d3005c9b":"1. create a CNN learner object with a base architecture.","d2111d6c":"load the pre-trained model","f2c68bc4":"The below function returns a list of filenames which are of valid image file extensions"}}