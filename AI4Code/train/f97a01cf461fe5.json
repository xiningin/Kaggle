{"cell_type":{"82c5cc57":"code","2dc0f1a8":"code","58b0a255":"code","1278b5c6":"code","f01e5c3a":"code","ba76dd8c":"code","9f7e4852":"code","55b59033":"code","a85125fd":"code","97ebad7a":"code","302e95ab":"code","0f906a75":"code","5b6d1cb1":"code","7364dc7f":"code","7443770b":"code","a38f8669":"code","530b1564":"code","d810d9f6":"code","062cecb5":"code","a2f44705":"code","e615c9a8":"code","50fd19a0":"code","3b797bb2":"code","0c3a8e15":"markdown","a8a93fb3":"markdown","fd319f5c":"markdown","ed901ac4":"markdown","423c7a5d":"markdown","0533280a":"markdown","6fec7c22":"markdown","b4555d35":"markdown","80be1130":"markdown","b6e497dc":"markdown","5cb9365d":"markdown","de7c0639":"markdown","4711b63f":"markdown","76efe6a4":"markdown","54a0de98":"markdown"},"source":{"82c5cc57":"! pip install lifetimes\n! pip install seaborn\n! pip install dexplot","2dc0f1a8":"!jupyter nbextension enable --py widgetsnbextension\n# !jupyter labextension install @jupyter-widgets\/jupyterlab-manager","58b0a255":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport ipywidgets as widgets\nfrom ipywidgets import interact, interact_manual\nimport dexplot as dxp\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\n","1278b5c6":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')\n\ndf = pd.read_csv('..\/input\/customer-personality-analysis\/marketing_campaign.csv',sep='\\t')\ndf['Dt_Customer'] = pd.to_datetime(df['Dt_Customer'])\n# df.set_index('ID',inplace=True,drop=True)\n# df.index.name = None\ndf.head(10)","f01e5c3a":"df_RFM = df[['ID','Recency']]\ndf_RFM['Monetary'] =  df['MntWines']+ df['MntFruits']+ df['MntMeatProducts']+ df['MntFishProducts']+ df['MntSweetProducts']+ df['MntGoldProds']  \ndf_RFM['Frequency'] = df['NumWebPurchases'] + df['NumCatalogPurchases'] + df['NumStorePurchases']","ba76dd8c":"quintiles = df_RFM[['Recency', 'Frequency', 'Monetary']].quantile([.2, .4, .6, .8]).to_dict()","9f7e4852":"def r_score(x):\n    if x <= quintiles['Recency'][.2]:\n        return 5\n    elif x <= quintiles['Recency'][.4]:\n        return 4\n    elif x <= quintiles['Recency'][.6]:\n        return 3\n    elif x <= quintiles['Recency'][.8]:\n        return 2\n    else:\n        return 1\n\ndef fm_score(x, c):\n    if x <= quintiles[c][.2]:\n        return 1\n    elif x <= quintiles[c][.4]:\n        return 2\n    elif x <= quintiles[c][.6]:\n        return 3\n    elif x <= quintiles[c][.8]:\n        return 4\n    else:\n        return 5  ","55b59033":"df_RFM['R'] = df_RFM['Recency'].apply(lambda x: r_score(x))\ndf_RFM['F'] = df_RFM['Frequency'].apply(lambda x: fm_score(x, 'Frequency'))\ndf_RFM['M'] = df_RFM['Monetary'].apply(lambda x: fm_score(x, 'Monetary'))","a85125fd":"df_RFM['RFM Score'] = df_RFM['R'].map(str) + df_RFM['F'].map(str) + df_RFM['M'].map(str)","97ebad7a":"segt_map = {\n    r'[1-2][1-2]': 'hibernating',\n    r'[1-2][3-4]': 'at risk',\n    r'[1-2]5': 'can\\'t loose',\n    r'3[1-2]': 'about to sleep',\n    r'33': 'need attention',\n    r'[3-4][4-5]': 'loyal customers',\n    r'41': 'promising',\n    r'51': 'new customers',\n    r'[4-5][2-3]': 'potential loyalists',\n    r'5[4-5]': 'champions'\n}\n\ndf_RFM['Segment'] = df_RFM['R'].map(str) + df_RFM['F'].map(str)\ndf_RFM['Segment'] = df_RFM['Segment'].replace(segt_map, regex=True)\ndf_RFM.head()","302e95ab":"# Plot RFM distributions\nplt.figure(figsize=(12,10))\n# Plot distribution of R\nplt.subplot(3, 1, 1); sns.distplot(df_RFM['Recency'])\n# Plot distribution of F\nplt.subplot(3, 1, 2); sns.distplot(df_RFM['Frequency'])\n# Plot distribution of M\nplt.subplot(3, 1, 3); sns.distplot(df_RFM['Monetary'])\n# Show the plot\nplt.show()","0f906a75":"# count the number of customers in each segment\ndef customerSegmentPlot(df_RFM, title):\n    segments_counts = df_RFM.value_counts().sort_values(ascending=True)\n\n    fig, ax = plt.subplots()\n\n    bars = ax.barh(range(len(segments_counts)),\n                  segments_counts,\n                  color='silver')\n    ax.set_frame_on(False)\n    ax.tick_params(left=False,\n                   bottom=False,\n                   labelbottom=False)\n    ax.set_yticks(range(len(segments_counts)))\n    ax.set_yticklabels(segments_counts.index)\n    ax.set_title(title,fontsize=15)\n    for i, bar in enumerate(bars):\n            value = bar.get_width()\n            if segments_counts.index[i] in ['champions', 'loyal customers']:\n                bar.set_color('C1')\n            ax.text(value,\n                    bar.get_y() + bar.get_height()\/2,\n                    '{:,} ({:}%)'.format(int(value),\n                                       round(value*100\/2240,2)),\n                    va='center',\n                    ha='left'\n                   )\n\n    plt.show()\n    \ncustomerSegmentPlot(df_RFM['Segment'], title =\"Customer category\")","5b6d1cb1":"df_RFM_score = df.merge(df_RFM.drop(['Recency'],axis=1),how='left',on='ID')\ndf_RFM_score['NumDealsPurchases_'] =  df_RFM_score['NumDealsPurchases'].mask(df_RFM_score['NumDealsPurchases']>5,5)","7364dc7f":"sns.histplot(df_RFM_score['NumDealsPurchases_'],stat=\"probability\")","7443770b":"sns.histplot(df_RFM[df_RFM_score['NumDealsPurchases_']>3],stat=\"probability\", y=\"Segment\")","a38f8669":"print(\"Select Customer number of Discount purchases:\")\n\ndropdown = widgets.Dropdown(options = sorted(list(set(df_RFM_score['NumDealsPurchases_']))))\n\n@interact\ndef line_plot(NumDealsPurchases = sorted(df_RFM_score['NumDealsPurchases_'].unique())):\n    \n    df_RFM_discount = df_RFM_score[df_RFM_score['NumDealsPurchases_'] == NumDealsPurchases]['Segment']\n    \n    customerSegmentPlot(df_RFM_discount, title =\"Customer categories for \"+str(NumDealsPurchases) +\" times discount used users\"+\n                        \"  (Customer percentage =\"+str(round(len(df_RFM_discount)*100\/len(df_RFM_score),2))+\" %)\")\n    \nprint(\"Note: All the percentages are calculated w.r.t total, they are not relative to specific category\")","530b1564":"print(\"Select Column Name:\")\n\ndropdown = widgets.Dropdown(options = sorted(list(set(df_RFM_score.columns))))\ncol_= df_RFM_score.dtypes==('int64' or 'float64')\n\n@interact\ndef line_plot(col_name = sorted(col_[col_==True].index)):\n    df__= df_RFM_score.groupby(['Segment']).mean().reset_index()\n    sns.barplot(x=col_name, y=\"Segment\", data=df__[['Segment',col_name]])\n    plt.title(\"Customer segment w.r.t \"+col_name)\n    print(col_name)\n    plt.show()","d810d9f6":"# Calculate the entire transation period of customers\ndf_RFM_score['T'] = ( df_RFM_score['Dt_Customer'].max()- df_RFM_score['Dt_Customer']).dt.days +90","062cecb5":"def CustomerLifeTimeValue(df,penalizer_coef=0.01,months_to_predict=3, discount_rate=0.01):\n    '''\n    args = df must have Frequency(count), Recency(days), Monetary($) and T (Transation period in days)\n    output = [['ID','predicted_clv','manual_predicted_clv']]\n    '''\n\n# Discount rate converts future cash flows (that is revenue\/profits) into today\u2019s money for the firm\n# discount_rate=0.01 ----> monthly discount rate ~ 12.7% annually  \n    import lifetimes\n    import pandas as pd\n    import numpy as np\n    #       Filter out customer those who have never visited again \n    df = df[df['Frequency']>=1]\n    bgf = lifetimes.BetaGeoFitter(penalizer_coef=penalizer_coef)\n    bgf.fit(df['Frequency'], df['Recency'], df['T'])\n\n    # Compute the customer alive probability\n    df['probability_alive'] = bgf.conditional_probability_alive(df['Frequency'], df['Recency'], df['T'])\n\n    # Predict future transaction for the next 90 (months_to_predict*30) days based on historical data\n    transaction_date = months_to_predict*30\n    df['pred_num_txn'] = round(bgf.conditional_expected_number_of_purchases_up_to_time(transaction_date, \n                                                                                       df['Frequency'],\n                                                                                       df['Recency'],\n                                                                                       df['T']),2)\n\n\n    df_repeated_customers = df.copy()\n    # Modeling the monetary value using Gamma-Gamma Model from Lifetimes python library \n    ggf = lifetimes.GammaGammaFitter(penalizer_coef=penalizer_coef)\n    ggf.fit(df_repeated_customers['Frequency'],\n     df_repeated_customers['Monetary'])\n\n    df_repeated_customers['exp_avg_sales'] = ggf.conditional_expected_average_profit(df_repeated_customers['Frequency'],\n                                     df_repeated_customers['Monetary'])\n\n    # predicted_clv --> predicted_annual_lifetime_value\n    # Predicting Customer Lifetime Value for the next 3 months\n    df_repeated_customers['predicted_clv'] = ggf.customer_lifetime_value(bgf,\n                                     df_repeated_customers['Frequency'],\n                                     df_repeated_customers['Recency'],\n                                     df_repeated_customers['T'],\n                                     df_repeated_customers['Monetary'],\n                                     time=months_to_predict,     # lifetime in months\n                                     freq='D',   # frequency in which the data is present(transaction_date)      \n                                     discount_rate=discount_rate) # discount rate\n\n    # Manual predict clv = Predicted no. of transactions * Expected avg sales \n    df_repeated_customers['manual_predicted_clv'] = (df_repeated_customers['pred_num_txn'] *\n                                                     df_repeated_customers['exp_avg_sales'])\n\n#     if the clv is nan impute with mean\n#     df_repeated_customers['predicted_clv'].fillna(df_repeated_customers['predicted_clv'].mean(), inplace=True)\n#     df_repeated_customers['manual_predicted_clv'].fillna(df_repeated_customers['manual_predicted_clv'].mean(), inplace=True)\n    df_repeated_customers = df_repeated_customers.round(2)\n\n    return df_repeated_customers[['ID','predicted_clv','manual_predicted_clv']]","a2f44705":"clv = CustomerLifeTimeValue(df_RFM_score,months_to_predict=3)","e615c9a8":"clv['clv_label'] = clv['predicted_clv']>0\nclv['clv_label'] = clv['clv_label'].map({True: 'profitable', False: 'Non-profitable'})\n\n# LeftMerge CLV on main df\ndf_RFM_score = df_RFM_score.merge(clv,how='left', on = 'ID')","50fd19a0":"sns.histplot(clv['clv_label'],stat=\"probability\")\nplt.title(\"Percentage of profitable and non profitable customers\")","3b797bb2":"\nprint(\"Select Column Name:\")\n\ndropdown = widgets.Dropdown(options = sorted(list(set(df_RFM_score.columns))))\ncol_= df_RFM_score.dtypes==('int64' or 'float64')\n\n@interact\ndef line_plot(col_name = sorted(col_[col_==True].index)):\n    df__= df_RFM_score.groupby(['clv_label']).mean().reset_index()\n    sns.barplot(x=col_name, y=\"clv_label\", data=df__[['clv_label',col_name]])\n    plt.title(\"Profitable and Non profitable customers in \"+col_name)\n    plt.show()\n\n","0c3a8e15":"**Since Majority of the CLV scores are 0, we are quantile customers into two category**\n* Profitable and \n* Non-Profitable","a8a93fb3":"# What percentage of Customers drives the profit? \n\n~ 15% of customers drives profit.","fd319f5c":"# Interactive plot to group customer category based on a specific column\n\nNote: You have to take a copy and run this section for interactive use. ","ed901ac4":"# Estimating Customer lifetime Value using Gamma-Gamma Model ","423c7a5d":"# Does discount help business? \n\n**Yes, it definitely helps. Almost all customers use Discounts, only 2% doesn't use discounts. About 43% are one time discount users.** \n\n~2% customers use Discount only once\n\n~40% customers use Discount only once\n\n~20% customers use Discount twice\n\n~35% customers use Discount more than twice\n","0533280a":"# Interactive plot to groupby Profitable and Non-Profitable Customers based on a specific attribute \nNote: You have to take a copy and run this section for interactive use. ","6fec7c22":"# Interactive plot to select customer category based on number of purchases\n\nNote: You have to take a copy and run this section for interactive use. ","b4555d35":"* Segment----------------------------->Description\n* Champions-------------------------->Bought recently, buy often and spend the most\n* Loyal Customers-------------------->Buy on a regular basis. Responsive to promotions.\n* Potential Loyalist------------------->Recent customers with average frequency.\n* Recent Customers------------------->Bought most recently, but not often.\n* Promising---------------------------->Recent shoppers, but haven\u2019t spent much.\n* Customers Needing Attention------>Above average recency, frequency and monetary values. May not have bought very recently though.\n* About To Sleep---------------------->Below average recency and frequency. Will lose them if not reactivated.\n* At Risk------------------------------->Purchased often but a long time ago. Need to bring them back!\n* Can\u2019t Lose Them-------------------->Used to purchase frequently but haven\u2019t returned for a long time.\n* Hibernating------------------------->Last purchase was long back and low number of orders. May be lost.","80be1130":"**Predict Customer lifetime value for the next Quaterly (3 months)**","b6e497dc":"**Recency**: Number of days since customer's last purchase\n\n**Monetory Value**: Total monetary value the customer spent on   \nMonetory Value = MntWines+ MntFruits+ MntMeatProducts+ MntFishProducts+ MntSweetProducts+ MntGoldProds    \n\n**Frequency** = NumWebPurchases + NumCatalogPurchases + NumStorePurchases\n\n","5cb9365d":"#### **Customer Lifetime value** = (predicted number of transactions in the next quaterly\/yearly) * (Expected average sales from that customer)\n\n![customer-lifetime-value.png](attachment:c4b12520-f42c-4eb9-a1b1-c8c11e4b1a92.png)\n","de7c0639":"# Business actions from the following analysis: \n* **Look into customer complaints as there are significant complaints from the profitable customers, fix service based complaints and improve quality of service**\n\n![image.png](attachment:f265d860-5268-45c5-8d61-de37614487f4.png)\n\n![download.png](attachment:c67d02b0-e0f9-437d-a063-243db31ca769.png)\n* **Customer aqusition cost should be optimised between online addvertisements and discounts. As profitable customers visit website often. The already existing customer in online are more loyal and consistent.**\n\n![image.png](attachment:cbf00667-3218-4947-a09b-fc4fb0df3ecf.png)\n\n![download.png](attachment:3b2bda89-0869-48b4-b4cc-9a32fa815449.png)\n* **Most profitable customers have kids at home, increase targeted add for parents** \n\n![download.png](attachment:296524a2-1c51-4c94-9d69-8b4db29f474a.png)\n\n* **Marketing campaign definitely works and it drives business continue marketing**\n\n![image.png](attachment:ef73aa9b-0320-42d7-b684-bed86a265219.png)","4711b63f":"# Are customers who use discount more often (>3) are loyal? \n\n**Most customers who use discounts often are loyal (50%).**","76efe6a4":"# RFM Customer Segmentation ","54a0de98":"# This notebook gives busineess action plans based on customer segments using RFM and Customer Life Time value\n\n**In this notebook we have not only provided business insights for this particular data**\n\n**but also built a generic function to calculate customer life time value**"}}