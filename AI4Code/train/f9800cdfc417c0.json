{"cell_type":{"6171aa11":"code","4869666a":"code","65444896":"code","7b54961b":"code","22f7c082":"code","eb82a646":"code","290a5206":"code","bb1758af":"code","42e5080d":"code","475bee20":"code","24712945":"code","3c041d66":"code","04741a09":"code","38e1d839":"code","7158ff1e":"code","6fbeafed":"code","904dd32d":"code","2157b111":"code","84282a47":"code","25c4614a":"code","d665ae4e":"code","36088b22":"code","472b4822":"code","baba5fb7":"code","866cf457":"code","c7f971e5":"code","5040cb4d":"code","6ee5c12c":"code","758680e9":"code","6977e875":"code","efce7725":"code","53c66e4d":"code","09eb6432":"code","de1cdfd2":"code","0fb84cfd":"code","66d148ef":"code","5c31bcb1":"code","38dbc77c":"code","5493c078":"code","37b60406":"markdown","20c8f025":"markdown","ba5a5969":"markdown","be8e9331":"markdown","bb8a92de":"markdown","673fb27a":"markdown","c8c78b37":"markdown","6c972831":"markdown","a67dce3c":"markdown","56c53d36":"markdown","bcc71ecd":"markdown","78990a6d":"markdown","0adba817":"markdown","97c029ab":"markdown","8dceb6f7":"markdown","119c128c":"markdown","505ed4a6":"markdown","43c8721f":"markdown","c9be55fe":"markdown","20773cff":"markdown","e817c46d":"markdown","19213837":"markdown","e59f74b2":"markdown"},"source":{"6171aa11":"import numpy as np\nimport sympy as sy\nimport mpmath\n\nfrom numpy.linalg import eig\nfrom numpy import matrix\nfrom sympy import hessian , Function , pprint , ordered \nfrom sympy import *\n#from mpmath import *\n","4869666a":"x=sy.Symbol('x')\ny=sy.Symbol('y')\nz=sy.Symbol('z')","65444896":"a= sy.Matrix(2,2,[1,2,9,4])\na","7b54961b":"b  = sy.Matrix( [ [1,2] , [1,1] ] )\nb","22f7c082":"m = sy.Matrix(3,3,[3,1,-1,2,2,-1,2,2,0])\nm","eb82a646":"a + b","290a5206":"a*b  # this ai * bj","bb1758af":"a**-1","42e5080d":"a.T","475bee20":"sy.eye(3)","24712945":"sy.diag(1,2,3)\n#sy.diag(x+1,x+2,x+3)  # diagonal matrix","3c041d66":"sy.det(a)","04741a09":"a = sy.Matrix([3,4,-1])\nb = sy.Matrix([2,-1,1])\n\na.dot(b)","38e1d839":"def magnitude(vector) :\n    return sy.sqrt(vector.dot(vector))\nmagnitude(b).evalf()","7158ff1e":"angle = sy.acos(a.dot(b) \/(magnitude(a)*magnitude(b)) ).evalf()\nangle*180\/pi","6fbeafed":"if a.dot(b) == 0 :\n    if a.dot(a) == b.dot(b) == 1 :\n        print('a & b are orthonormal sets in R')\n    else :\n        print('a & b are not orthonormal sets in R')\n        print('But a & b are orthogonal sets in R')\nelse : \n    print('a & b are not orthogonal sets in R')","904dd32d":"a = sy.Matrix([1,3,0])\nb = sy.Matrix([2,0,1])\nc = sy.Matrix([3,3,1])\n\nsolve1 = x*a + y*b + z*c\n\n#L = sy.Matrix(sy.solve_poly_system ( [solve1[0] , solve1[1],solve1[2]], x, y,z))\n#r,c = L.shape\n\n#if L == sy.zeros(r,c) :\n#    print('a,b,c are linearly independent')\n#else :\n#    print('a,b,c are linearly dependent')\n    ","2157b111":"solve1","84282a47":"M = sy.Matrix(4,3,[1,-1,2,2,3,4,-3,2,3,3,4,5])\nm = M*M.T","25c4614a":"#q = m.eigenvects()\n#for i in range(len(q)):\n#    print('Eigenvalue  ', q[i][0].evalf() , ' has multiciplity ',q[i][1],' & eigenvector ',q[i][-1])","d665ae4e":"p = m.eigenvals()\nfor key,value in p.items():\n    print('Eigenvalue  ',key.evalf()  ,' has multiciplity ' , value)\n","36088b22":"A = np.array([[1,-1,2],[2,3,4],[-3,2,3],[3,4,5]])\na = np.matmul(A,A.T)\nnp.linalg.eig(a)","472b4822":"c = m.charpoly(x)\nprint('the character ploynomial is ',c)\n\nprint('the factors are ')\nsy.factor(c)","baba5fb7":"b  = sy.Matrix( [ [1,2] , [1,1] ] )\n(P,D) = b.diagonalize()","866cf457":"D","c7f971e5":"P","5040cb4d":"P**-1 * b * P == D","6ee5c12c":"m.is_diagonalizable()","758680e9":"#A = np.array([[1,2],[3,4],[5,6],[7,8]])\na = np.array([[0.24,0.04,-0.16,-0.26,0.14],[0.22,-0.28,-0.08,-0.18,0.32]])\nA = np.matmul(a,a.T)\nU, S, V = np.linalg.svd(a)\na\n","6977e875":"r,c = a.shape\nr,c","efce7725":"U","53c66e4d":"S \ns = np.zeros((r, c))\nnp.fill_diagonal(s, S)   #s = np.array([[14.2690955,0],[0,0.62682823],[0,0],[0,0]])\ns","09eb6432":"V","de1cdfd2":"np.matmul(np.matmul(U,s),V)","0fb84cfd":"x*y*z","66d148ef":"eq = sin(x*y*z)\nv = list(ordered(eq.free_symbols))\n","5c31bcb1":"gradient = lambda f, v: Matrix([f]).jacobian(v)\ngradient(eq, v)\n","38dbc77c":"hessian(eq, v)","5493c078":"x = np.array([-3,-2,-1,-0.2,1,3])\ny = np.array([0.9,0.8,0.4,0.2,0.1,0])\na0,a1,a2 = np.polyfit(x,y,2) \nprint(a2,'x^2 + ',a1,'x + ' , a0 , '  ')","37b60406":"**inverse**","20c8f025":"**Fit a polynomial line**","ba5a5969":"**find eigenvalue\/vector**","be8e9331":"**Lets do some basic Matrix operations**\n","bb8a92de":"**Find dot\/inner product of a vector**","673fb27a":"**Check if a matrix is diagonalizable**","c8c78b37":"**Linear Dependence \/ Independence**","6c972831":"**Diagonalize a matrix**","a67dce3c":"**determinant of matrix**","56c53d36":"**Find hessian\/gradient of matrix**","bcc71ecd":"**hence proved U*S*V is A**","78990a6d":"will keep updating as i learn more and apply theory to application","0adba817":"**find unit length of vectoer**","97c029ab":"**find singular value decomposition**","8dceb6f7":"**BASIC FUCTIONS REQ FOR MY MOST BACHELORS IN MATHS** \n","119c128c":"**transpose**","505ed4a6":"**Find angle bet 2 vectors**","43c8721f":"**find characterploynomial**","c9be55fe":"**OR**","20773cff":"**Orthogonality**","e817c46d":"**Lets define a Matrix** ","19213837":"**diagonal matrix**","e59f74b2":"**identity matrix**"}}