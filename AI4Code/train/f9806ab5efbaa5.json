{"cell_type":{"1369efb5":"code","1acec826":"code","54723700":"code","ce849fcb":"code","a36cd05f":"code","54f55a0f":"code","1e6cf88b":"code","b516fc28":"code","81122572":"code","b8293a31":"code","983a6c8c":"code","1ef07b92":"code","3fd9b7f2":"code","a5d6c74b":"code","d927b775":"code","999253fb":"code","961283b2":"code","1c3c9f0d":"code","7a745c48":"code","7d8897fc":"code","6cb7463e":"code","4578a697":"code","e5975eb2":"code","73e4023e":"code","8d55d36b":"code","2052103e":"code","a4777c70":"code","a905cbff":"code","45d72ce5":"code","06588684":"code","2463f75c":"code","c0c96d33":"code","f75c08a4":"code","fed2fe74":"code","a072a803":"code","b72f8873":"code","85b861dc":"code","3a5009de":"code","b1db9567":"code","bc122dc0":"code","14efcdf4":"code","5dced5c6":"code","0c9014fc":"code","a9ccd1eb":"code","61587e5f":"code","3d5015c4":"code","28787006":"code","0c32786f":"code","443b9ea4":"code","d7397d5b":"code","d6079dec":"code","df2bfae7":"code","740677f2":"code","a31ce397":"code","b1f86b88":"code","1cf5568c":"code","343b7833":"code","0cb5823b":"code","e841a024":"code","9520765f":"markdown","f1f37bcc":"markdown","c7dc5d09":"markdown","389553cd":"markdown","488fda0e":"markdown","270771ff":"markdown","c7747588":"markdown","c51d31e4":"markdown","ac1fd791":"markdown","8ef1319d":"markdown","3d1e1ac1":"markdown","c7b25c1a":"markdown","42b23558":"markdown","449190c2":"markdown","24076d6d":"markdown","33984d17":"markdown","c246a23e":"markdown","bcb7a724":"markdown"},"source":{"1369efb5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1acec826":"data=pd.read_csv('\/kaggle\/input\/nlp-getting-started\/train.csv')","54723700":"data.head(100)","ce849fcb":"data.describe()","a36cd05f":"data.isnull().sum()","54f55a0f":"data.drop(['keyword','location'],axis=1)","1e6cf88b":"x_train=data.text\ny_train=data.target\n","b516fc28":"test_data=pd.read_csv('\/kaggle\/input\/nlp-getting-started\/test.csv')\npd.set_option('display.max_colwidth',None)    #setting the length of o\/p to be printed\nprint(test_data['text'][0:20])","81122572":"x_test=test_data.text","b8293a31":"len(x_test)","983a6c8c":"pd.set_option('display.max_colwidth',None)    #setting the length of o\/p to be printed\nx_test[50:80]","1ef07b92":"print(x_train.head())\nprint(y_train.head())\n","3fd9b7f2":"# LOwer case characters\nx_train= x_train.str.lower()\nx_test= x_test.str.lower()","a5d6c74b":"import re  #regex","d927b775":"# train data\nx_train = x_train.apply(lambda x: re.sub(r'https?:\\\/\\\/\\S+', '', x))\nx_train.apply(lambda x: re.sub(r\"www\\.[a-z]?\\.?(com)+|[a-z]+\\.(com)\",'', x))  #Apply a function along an axis=0(by default) of the DataFrame\n\n#test data\nx_test = x_test.apply(lambda x: re.sub(r'https?:\\\/\\\/\\S+', '', x))\nx_test.apply(lambda x: re.sub(r\"www\\.[a-z]?\\.?(com)+|[a-z]+\\.(com)\",'', x))\n\n","999253fb":"x_train = x_train.apply(lambda x: re.sub(r'&[a-z]+;', '', x))\nx_test = x_test.apply(lambda x: re.sub(r'&[a-z]+;', '', x))","961283b2":"# x_train = x_train.apply(lambda x: re.sub(r\"[^a-z\\s\\(\\-:\\)\\\\\\\/\\];='#]\", '', x))\n# x_test = x_test.apply(lambda x: re.sub(r\"[^a-z\\s\\(\\-:\\)\\\\\\\/\\];='#]\", '', x))","1c3c9f0d":"x_train = x_train.apply(lambda x: re.sub(r\"[^a-z\\s]\", '', x))\nx_test = x_test.apply(lambda x: re.sub(r\"[^a-z\\s]\", '', x))","7a745c48":"\nprint(len(x_test))","7d8897fc":"type(x_train)","6cb7463e":"def countSpace(string):\n    lst=string.split()\n    return len(lst)+10","4578a697":"maxLen=x_train.map(countSpace).max()   # calculating max words possible in a string","e5975eb2":"maxLen     # max length of a sentence in all strings","73e4023e":"ind=190\nprint(x_train[ind],y_train[ind])","8d55d36b":"y_train.value_counts()     ","2052103e":"def read_glove_vecs(glove_file):\n    with open(glove_file, 'r',encoding='utf-8') as f:\n        words = set()\n        word_to_vec_map = {}\n        for line in f:\n            line = line.strip().split()    # strip remove trailing oe ending empty spaces in a string\n            curr_word = line[0]\n            words.add(curr_word)\n            word_to_vec_map[curr_word] = np.array(line[1:], dtype=np.float64)\n        \n        i = 1\n        words_to_index = {}\n        index_to_words = {}\n        for w in sorted(words):\n            words_to_index[w] = i\n            index_to_words[i] = w\n            i = i + 1\n    return words_to_index, index_to_words, word_to_vec_map","a4777c70":"word_to_index, index_to_word, word_to_vec_map = read_glove_vecs('..\/input\/glove6b\/glove.6B.100d.txt')","a905cbff":"word = \"cucumber\"\nindex = 289846\nprint(\"the index of\", word, \"in the vocabulary is\", word_to_index[word])\nprint(\"the\", str(index) + \"th word in the vocabulary is\", index_to_word[index])","45d72ce5":"np.random.seed(0)\nfrom keras.models import Model,load_model\nfrom keras.layers import Dense, Input, Dropout, LSTM, Activation\nfrom keras.optimizers import Adam\nfrom keras.layers.embeddings import Embedding\nfrom keras.preprocessing import sequence\nfrom keras.initializers import glorot_uniform\nnp.random.seed(1)","06588684":"import re # library to remove ","2463f75c":"def sentences_to_indices(X, word_to_index, max_len):\n    \n    m=X.shape[0] # number of training examples\n\n    X_indices=np.zeros([m,max_len])\n\n    for i in range(m):\n        \n        \n#         sentence = re.sub('[\\W_]+', '', X[i]) \n        sentence_words=[word.replace('\\t','') for word in X[i].split(' ') if word.replace('\\t','')!=''] # list of words in a sentence\n#         sentence_words=[]\n#         for word in X[i].split(' '):\n#             if word.replace('\\t','')!='':\n#                 sentence_words.append(re.sub('[\\W_]+', '',word.lower().replace('\\t','')))  # to remove all the characters  except numbers and alphabets \n            \n        j=0\n        for word in sentence_words:\n            if(word in word_to_index.keys()):\n                X_indices[i,j]=word_to_index[word]\n            else:\n                X_indices[i,j]=400000  # last key\n            \n            j=j+1\n            \n    \n    return X_indices   # matrix containing index of each word \n        \n        \n        \n    ","c0c96d33":"len(x_test)","f75c08a4":"index_to_word[400000]","fed2fe74":"\navg=np.zeros([1,len(word_to_vec_map[\"cucumber\"])])\nfor k,v in word_to_vec_map.items():\n    avg=np.add(avg,v)\navg=avg\/len(word_to_vec_map)","a072a803":"def pretrained_embedding_layer(word_to_vec_map, word_to_index):\n    \n    vocab_len = len(word_to_index) + 1                  # adding 1 to fit Keras embedding (requirement)\n    emb_dim = word_to_vec_map[\"cucumber\"].shape[0]      # define dimensionality of your GloVe word vectors (= 100)\n    \n    emb_matrix=np.zeros([vocab_len,emb_dim])\n    \n    for word,index in word_to_index.items():\n        if word=='\uffe5':\n            emb_matrix[index,:]=avg    # average of word embeddings is taken for unknown word\n        else:\n            emb_matrix[index,:]=word_to_vec_map[word]\n        \n    embedding_layer=Embedding(vocab_len,emb_dim,trainable=False)\n     # Build the embedding layer, it is required before setting the weights of the embedding layer. Do not modify the \"None\".\n    embedding_layer.build((None,))\n    \n    # Set the weights of the embedding layer to the embedding matrix. Your layer is now pretrained.\n    embedding_layer.set_weights([emb_matrix])\n    \n    return embedding_layer","b72f8873":"embedding_layer = pretrained_embedding_layer(word_to_vec_map, word_to_index)\nprint(\"weights[0][1][3] =\", embedding_layer.get_weights()[0][1][3])","85b861dc":"from keras import backend as K\n\ndef recall_m(y_true, y_pred):\n    true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1)))\n    possible_positives = K.sum(K.round(K.clip(y_true, 0, 1)))\n    recall = true_positives \/ (possible_positives + K.epsilon())\n    return recall\n\ndef precision_m(y_true, y_pred):\n    true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1)))\n    predicted_positives = K.sum(K.round(K.clip(y_pred, 0, 1)))\n    precision = true_positives \/ (predicted_positives + K.epsilon())\n    return precision\n\ndef f1_m(y_true, y_pred):\n    precision = precision_m(y_true, y_pred)\n    recall = recall_m(y_true, y_pred)\n    return 2*((precision*recall)\/(precision+recall+K.epsilon()))","3a5009de":"def model1(input_shape,word_to_vec_map,word_to_index):\n    \n    \"\"\"\" Arguments:\n    input_shape -- shape of the input, usually (max_len,)\n    word_to_vec_map -- dictionary mapping every word in a vocabulary into its 50-dimensional vector representation\n    word_to_index -- dictionary mapping from words to their indices in the vocabulary (400,001 words)\n\n    Returns:\n    model -- a model instance in Keras\n    \"\"\"\n    \n        ### START CODE HERE ###\n    # Define sentence_indices as the input of the graph, it should be of shape input_shape and dtype 'int32' (as it contains indices).\n    sentence_indices = Input(shape=input_shape,dtype='int32')\n    \n    # Create the embedding layer pretrained with GloVe Vectors (\u22481 line)\n    embedding_layer = pretrained_embedding_layer(word_to_vec_map,word_to_index)\n    \n    # Propagate sentence_indices through your embedding layer, you get back the embeddings\n    embeddings = embedding_layer(sentence_indices)   \n    \n    # Propagate the embeddings through an LSTM layer with 128-dimensional hidden state\n    # Be careful, the returned output should be a batch of sequences.\n    X = LSTM(128,return_sequences=True)(embeddings)\n    # Add dropout with a probability of 0.5\n    X = Dropout(0.2)(X)\n    # Propagate X trough another LSTM layer with 128-dimensional hidden state\n    # Be careful, the returned output should be a single hidden state, not a batch of sequences.\n    X = LSTM(128,return_sequences=False)(X)\n    # Add dropout with a probability of 0.5\n    X = Dropout(0.2)(X)\n    # Propagate X through a Dense layer with softmax activation to get back a batch of 5-dimensional vectors.\n    X = Dense(2,activation=None)(X)\n    # Add a softmax activation\n    X = Activation('softmax')(X)\n    \n    # Create Model instance which converts sentence_indices into X.\n    model = Model(inputs=[sentence_indices],outputs=X)\n    \n    ### END CODE HERE ###\n    \n    return model\n    ","b1db9567":"model=model1((maxLen,),word_to_vec_map,word_to_index)\nmodel.summary()","bc122dc0":"# initial_learning_rate = 0.01\n# lr_schedule = tf.keras.optimizers.schedules.ExponentialDecay(\n#     initial_learning_rate,\n#     decay_steps=100000,\n#     decay_rate=0.96,\n#     staircase=True)\n","14efcdf4":"model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy',f1_m,precision_m, recall_m])","5dced5c6":"x_train_indices = sentences_to_indices(x_train, word_to_index, maxLen)","0c9014fc":"x_test_indices=sentences_to_indices(x_test, word_to_index, maxLen)","a9ccd1eb":"x_test_indices.shape","61587e5f":"x_train_indices.shape","3d5015c4":"x_train_indices","28787006":"y_train_oh=pd.get_dummies(y_train).values   #one_hot_encoding_of_y_train","0c32786f":"y_train_oh[:10]","443b9ea4":"print(x_train_indices)\nprint(y_train_oh)","d7397d5b":"model.fit(x_train_indices, y_train_oh, epochs = 80, batch_size = 32, shuffle=True)","d6079dec":"# Saving Model\nmodel.save(\"model.h5\")","df2bfae7":"#Load the model\nload_model(\".\/model.h5\")","740677f2":"sample_submission = pd.read_csv(\"\/kaggle\/input\/nlp-getting-started\/sample_submission.csv\")","a31ce397":"print(len(x_train_indices))\nprint(len(x_test_indices))","b1f86b88":"pred=model.predict(x_test_indices)\nprint(pred)\nlst=[]\nfor i in range(len(pred)):\n    if(pred[i][0]>pred[i][1]):\n        lst.append(0)\n    else:\n        lst.append(1)\n\nsample_submission[\"target\"]=lst","1cf5568c":"cnt=0 \nfor i in range(len(lst)):\n    if(y_train[i]!=sample_submission[\"target\"][i]):\n        cnt+=1\n        print(x_train[i],sample_submission[\"target\"][i])\n        \n    ","343b7833":"print(cnt)    ","0cb5823b":"sample_submission.head(10)","e841a024":"sample_submission.to_csv(\"submission.csv\", index=False)","9520765f":"### Remove Non-Letter characters ###\n* Remove all the characters that weren\u2019t letters, punctuation that is commonly used in emojis, or hash marks. There were a few non-english characters in the tweets.  They would add to the analysis so I wanted to remove them.\n* Numbers typically don\u2019t add much if any information so I wanted to remove them. Punctuation that isn\u2019t usually associated with an emoji needed to be removed too because it didn\u2019t add anything. I did all this with one regex.","f1f37bcc":"max. possible length in all sentences","c7dc5d09":"all the strings have different length to pass in LSTM .The common solution to this is to use padding. Specifically, set a maximum sequence length, and pad all sequences to the same length.","389553cd":"The model takes as input an array of sentences of shape (m, max_len ) defined by input_shape","488fda0e":"100 Dimensional embedding vectors are used","270771ff":"INCORRECT PREDICTIONS","c7747588":"## Exploratory Data Analysis","c51d31e4":"importing some libraries and layers","ac1fd791":"### Remove HTML reference characters ###\nreference characters are not of any value to the analysis so they also should be removed.","8ef1319d":"### Removing URL links ###\nI didn\u2019t think URLs would help with sentiment analysis so I wanted to remove them. . I used two expressions, one for URLs with http or https, and a second for URLs without them, but with or without www.","3d1e1ac1":"##### Implement pretrained_embedding_layer(). You will need to carry out the following steps:\n\n1. Initialize the embedding matrix as a numpy array of zeroes with the correct shape.\n2. Fill in the embedding matrix with all the word embeddings extracted from word_to_vec_map.\n3. Define Keras embedding layer. Use Embedding(). Be sure to make this layer non-trainable, by setting trainable = False when calling Embedding(). If you were to set trainable = True, then it will allow the optimization algorithm to modify the values of the word embeddings.\n4. Set the embedding weights to be equal to the embedding matrix","c7b25c1a":"### 2.3 - The Embedding layer\n\nIn Keras, the embedding matrix is represented as a \"layer\", and maps positive integers (indices corresponding to words) into dense vectors of fixed size (the embedding vectors). It can be trained or initialized with a pretrained embedding. In this part, you will learn how to create an [Embedding()](https:\/\/keras.io\/layers\/embeddings\/) layer in Keras, initialize it with the GloVe 100-dimensional vectors loaded earlier in the notebook.\n\nThe `Embedding()` layer takes an integer matrix of size (batch size, max input length) as input. This corresponds to sentences converted into lists of indices (integers), as shown in the figure below.\n\n<img src=\"images\/embedding1.png\" style=\"width:700px;height:250px;\">\n<caption><center> **Figure 4**: Embedding layer. This example shows the propagation of two examples through the embedding layer. Both have been zero-padded to a length of `max_len=5`. The final dimension of the representation is  `(2,max_len,100)` because the word embeddings we are using are 100 dimensional. <\/center><\/caption>\n\nThe largest integer (i.e. word index) in the input should be no larger than the vocabulary size. The layer outputs an array of shape (batch size, max input length, dimension of word vectors).\n\nThe first step is to convert all your training sentences into lists of indices, and then zero-pad all these lists so that their length is the length of the longest sentence. ","42b23558":"checking empty values","449190c2":"# implementing 2 layer lstm sequence classifier","24076d6d":"Let's build the Embedding() layer in Keras, using pre-trained word vectors. After this layer is built, you will pass the output of sentences_to_indices() to it as an input, and the Embedding() layer will return the word embeddings for a sentence.","33984d17":"### Pre-Processing done on tweets","c246a23e":"##### TWEET ANALYSIS\n* We can see different tweet contain @handle_name or mentioning to the people\n* Many tweets contain some unrecognized character(typo)\n* many of the tweets contain URL which are not of anys use for sentiment analysis.\n* They all have the hashtag #SXSW or #sxsw.\n* There is an html character reference for ampersand &amp.\n* There were many non-english characters.\n* There were many emoticons.\n* There are some url links, some with http or https, and some without","bcb7a724":"Using  Pre-trained glove Word Embeddings vectors"}}