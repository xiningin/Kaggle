{"cell_type":{"351b8c56":"code","4fd4721b":"code","94057696":"code","ccc1468b":"code","de91f31a":"code","dd43260e":"code","63c0cc74":"code","26cb78a4":"code","4868cd52":"code","e169da74":"code","7372cfcf":"code","64a82998":"code","c0be57d7":"code","aad92929":"code","b22fb66f":"code","005ae409":"code","de05be64":"markdown","088357dd":"markdown"},"source":{"351b8c56":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4fd4721b":"df_train=pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-5\/train.csv',parse_dates=['Date'])\ndf_test=pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-5\/test.csv',parse_dates=['Date'])","94057696":"print(df_train.shape)\nprint(df_test.shape)","ccc1468b":"df_test.rename(columns={'ForecastId':'Id'},inplace=True)\n\ndf_test['Id']=df_test['Id'].astype('str')+'a'\n\ndf=pd.concat([df_train,df_test],axis=0).copy()","de91f31a":"df","dd43260e":"df.Date = pd.to_datetime(df.Date)\ndf['Day']=df['Date'].dt.day\ndf['Month']=df['Date'].dt.month\ndf['Day of the week']=df['Date'].dt.dayofweek\ndf['isweekend']=np.where(df['Day of the week'].isin([5,6]),1,0)","63c0cc74":"from sklearn.preprocessing import LabelEncoder\nTarget_label_encoder=LabelEncoder()\ndf['Target_label']=Target_label_encoder.fit_transform(df.Target)","26cb78a4":"X=df[df['Id'].str.contains('a').isnull()][['Population', 'Weight', 'Day', 'Month', 'Day of the week', 'isweekend', 'Target_label']]\ny=df[df['Id'].str.contains('a').isnull()]['TargetValue']\n\nX=X.loc[y[y>=0].index]\ny=y[y>=0]","4868cd52":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)","e169da74":"from sklearn import linear_model\nm=linear_model.LinearRegression()\nm.fit(X_train,y_train)\nprint(m.score(X_train,y_train))\nprint(m.score(X_test,y_test))","7372cfcf":"from sklearn import ensemble\nm=ensemble.RandomForestRegressor()\nm.fit(X_train,y_train)\nprint(m.score(X_train,y_train))\nprint(m.score(X_test,y_test))","64a82998":"import xgboost as xgb\nfrom xgboost import XGBRegressor\nfrom sklearn.metrics import mean_absolute_error\nmodel = xgb.XGBRegressor(n_estimators=20000,max_depth=5,reg_lambda=0.9, random_state=42)\n\nmodel.fit(X_train, y_train, early_stopping_rounds=300, eval_set=[(X_test, y_test)], verbose=False)\ny_prediction = model.predict(X_test)\n\nresults=mean_absolute_error(y_test,y_prediction)\nprint(results)","c0be57d7":"df_test_fin=df[df['Id'].str.contains('a').notnull()][['Population', 'Weight', 'Day', 'Month', 'Day of the week', 'isweekend', 'Target_label']]\n\nop=m.predict(df_test_fin)\n\ndf_sub=pd.DataFrame(df_test.index+1,columns=['Id'])\ndf_sub['TargetValue']=op","aad92929":"a=df_sub.groupby(['Id'])['TargetValue'].quantile(q=0.05).reset_index()\nb=df_sub.groupby(['Id'])['TargetValue'].quantile(q=0.5).reset_index()\nc=df_sub.groupby(['Id'])['TargetValue'].quantile(q=0.95).reset_index()\n\n\na.columns=['Id','q0.05']\nb.columns=['Id','q0.5']\nc.columns=['Id','q0.95']\na=pd.concat([a,b['q0.5'],c['q0.95']],1)","b22fb66f":"sub=pd.melt(a, id_vars=['Id'], value_vars=['q0.05','q0.5','q0.95'])\nsub['variable']=sub['variable'].str.replace(\"q\",\"\", regex=False)\nsub['ForecastId_Quantile']=sub['Id'].astype(str)+'_'+sub['variable']\nsub['TargetValue']=sub['value']\nsub=sub[['ForecastId_Quantile','TargetValue']]\nsub.reset_index(drop=True,inplace=True)\nsub.head()","005ae409":"sub.to_csv(\"submission.csv\",index=False)","de05be64":"### Feature Generation***","088357dd":"### Modeling"}}