{"cell_type":{"e9929cbd":"code","4cc946da":"code","4b28eab7":"code","b114feac":"code","dfaa0532":"code","a02bb86c":"code","26992867":"code","3f983d3c":"code","77e06cf7":"code","594c3529":"code","60471783":"code","ca5cf9c3":"code","c2f4cfce":"code","b973cc7b":"code","a1de39a1":"code","c4f1b4f4":"code","70d7a166":"code","4e02b8e7":"code","45826e7e":"code","9447282f":"code","0730bd0d":"code","81afc334":"code","66efd462":"code","23f4359f":"code","b1113341":"code","a6617c3d":"markdown","57250cf8":"markdown","c31b2968":"markdown","42aa64d2":"markdown","843a21c1":"markdown","e3f564f5":"markdown","488bb1d5":"markdown","584fd075":"markdown","e24b7695":"markdown","3b55e740":"markdown"},"source":{"e9929cbd":"import pandas as pd        #etiketli serileri ve say\u0131sal tablolar\u0131 i\u015flemek i\u00e7in kulland\u0131\u011f\u0131m\u0131z k\u00fcr\u00fcphane\nimport tensorflow as tf    #Derin sinir a\u011flar\u0131 i\u00e7in \u00e7ok kullan\u0131lan makine \u00f6\u011frenmesi k\u00fct\u00fcphanesi\nimport keras               #bir derin sinir a\u011f\u0131 k\u00fct\u00fcphanesidir\nfrom tensorflow.keras.preprocessing.image import load_img, img_to_array, ImageDataGenerator          \nfrom tensorflow.keras.models import Sequential        #Sequential modeli(s\u0131ral\u0131 modeli) kullanmak i\u00e7in y\u00fckledi\u011fimiz k\u00fct\u00fcphane\nfrom tensorflow.keras.applications import InceptionV3  #inception v3, g\u00f6r\u00fcnt\u00fc analizine ve nesne alg\u0131lamaya yard\u0131mc\u0131 olmak i\u00e7in evri\u015fimli bir sinir a\u011f\u0131d\u0131r\nfrom tensorflow.keras.utils import to_categorical       #Bir vekt\u00f6r\u00fc, binarye \u00e7evirmek i\u00e7in kulland\u0131\u011f\u0131m\u0131z fonksiyon\nfrom tensorflow.keras.layers import Dense, Flatten,BatchNormalization, Dropout, Lambda, Conv2D, MaxPool2D  #S\u0131ral\u0131 modelde katmanlarda kulland\u0131\u011f\u0131m\u0131z k\u00fct\u00fcphaneler\nimport seaborn as sns      #Veri seti g\u00f6rselle\u015ftirmesi i\u00e7in kulland\u0131\u011f\u0131m\u0131z k\u00fct\u00fcphane\nimport numpy as np         #B\u00fcy\u00fck veriler i\u00e7in matematiksel i\u015flevler kitapl\u0131\u011f\u0131\nimport matplotlib.pyplot as plt   #Numpy i\u00e7in bir \u00e7izim k\u00fct\u00fcphanesidir\nimport cv2      #numpy ve matplatlib gibi k\u00fct\u00fcphanelerle entegrasyonu kolayla\u015ft\u0131r\u0131r.\nimport warnings #Uyar\u0131lar\u0131 ignore ederiz.\nwarnings.filterwarnings(\"ignore\")","4cc946da":"data = pd.read_pickle(\"..\/input\/traffic-signs-preprocessed\/data8.pickle\")\n","4b28eab7":"# data s\u00f6zl\u00fck format\u0131nda ","b114feac":"data.keys()\n","dfaa0532":"plt.imshow(data[\"x_train\"][2].reshape(32, 32), cmap='gray');","a02bb86c":"# t\u00fcm g\u00f6rseller normalize edilmi\u015f grayscale g\u00f6rsellerdir\ndata[\"x_train\"][2]","26992867":"data[\"x_train\"][2].shape","3f983d3c":"label_encode = data[\"y_train\"][2]\ndata[\"labels\"][label_encode]","77e06cf7":"# 43 farkl\u0131 trafik i\u015fareti\nnp.unique(data[\"y_train\"])","594c3529":"print(\"x train shape:\", data[\"x_train\"].shape)\nprint(\"y train shape:\", data[\"y_train\"].shape)\nprint(\"x test shape:\", data[\"x_test\"].shape)\nprint(\"y test shape:\", data[\"y_test\"].shape)\nprint(\"x validation shape:\", data[\"x_validation\"].shape)\nprint(\"y validation shape:\", data[\"y_validation\"].shape)","60471783":"x_train = data[\"x_train\"]\nx_test = data[\"x_test\"]\nx_val = data[\"x_validation\"]\ny_train = data[\"y_train\"]\ny_val = data[\"y_validation\"]","ca5cf9c3":"x_train = x_train.swapaxes(1,2)\nx_train.shape","c2f4cfce":"x_train = x_train.swapaxes(2,3)\nx_train.shape","b973cc7b":"x_val = x_val.swapaxes(1,2)\nx_val = x_val.swapaxes(2,3)\nprint(\"x val shape:\", x_val.shape)","a1de39a1":"plt.figure(figsize=(10,10)) \n\nfor i in range(16):\n    plt.subplot(4,4,i+1)   \n    plt.imshow(x_train[i], cmap = \"gray\")\n    plt.axis(\"off\")\n\nplt.show()","c4f1b4f4":"img_list = [1,2,17]\nfor i in img_list:\n    plt.imshow(x_train[i],cmap = \"gray\")\n    plt.axis(\"off\")\n    plt.show()","70d7a166":"def resize(img):\n    numberofImage = img.shape[0]\n    new_array = np.zeros((numberofImage,32,32,1))\n    for i in range(numberofImage):\n        new_array[i] = tf.image.resize(img[i],(32,32))\n    return new_array","4e02b8e7":"x_train_resized = resize(x_train)\nx_val_resized = resize(x_val)\nprint(\"x train resized shape:\", x_train_resized.shape)\nprint(\"x validation resized shape:\", x_val_resized.shape)","45826e7e":"NumberofClass = 43\ny_train = to_categorical(y_train, num_classes = NumberofClass)\ny_val = to_categorical(y_val, num_classes = NumberofClass)","9447282f":"plt.imshow(x_train[2], cmap = \"gray\")\nplt.title(\"32x32 Image\")\nplt.axis(\"off\")\nplt.show()\n\n# plt.figure()\n\n# plt.imshow(x_train_resized[2], cmap = \"gray\")\n# plt.title(\"64x64 Image\")\n# plt.axis(\"off\")\n# plt.show()","0730bd0d":"model = Sequential()\n\n\nmodel.add(Conv2D(filters = 128, kernel_size = (4,4), padding = \"Same\", activation = \"relu\", input_shape = (32,32,1)))\n\nmodel.add(MaxPool2D(pool_size = (2,2)))\n\nmodel.add(Conv2D(filters = 64, kernel_size = (4,4), padding = \"Same\", activation = \"relu\" ))\n\nmodel.add(MaxPool2D(pool_size = (2,2)))\n\nmodel.add(Conv2D(filters = 32, kernel_size = (4,4), padding = \"Same\", activation = \"relu\" ))\n\nmodel.add(MaxPool2D(pool_size = (2,2)))\n\n# model.add(Conv2D(filters = 16, kernel_size = (4,4), padding = \"Same\", activation = \"relu\" ))\n\n# model.add(MaxPool2D(pool_size = (2,2)))\n\nmodel.add(Flatten())\n\nmodel.add(Dense(units = 512, activation = \"relu\"))\n\nmodel.add(Dropout(0.5))\n\nmodel.add(Dense(units = NumberofClass, activation = \"softmax\"))","81afc334":"model.summary()","66efd462":"model.compile(optimizer = \"adam\", loss = \"categorical_crossentropy\", metrics = [\"accuracy\"])\n","23f4359f":"hist = model.fit(x_train_resized, y_train, batch_size = 128,\n                    epochs = 10, validation_data = (x_val_resized, y_val))\n","b1113341":"plt.style.use('seaborn')\nplt.figure(figsize=(6,6))\nplt.plot(hist.history['loss'], color='b', label=\"Training loss\")\nplt.plot(hist.history['val_loss'], color='r', label=\"Validation loss\")\nplt.legend()\nplt.show()\n\nplt.figure()\n\nplt.figure(figsize=(6,6))\nplt.plot(hist.history['accuracy'], color='b', label=\"Training accuracy\")\nplt.plot(hist.history['val_accuracy'], color='r',label=\"Validation accuracy\")\nplt.legend()\nplt.show()","a6617c3d":"Yeniden \u015eekillendirme (Reshaping) \u0130le G\u00f6rselleri Ayn\u0131 Boyuta Getiririz\n","57250cf8":"Gerekli K\u00fct\u00fcphanelerin Eklenmesi","c31b2968":"De\u011ferlendirmeye geldi\u011fimizde ise Seaborn K\u00fct\u00fcphanesi Kullanarak Grafik ile accuracy'i g\u00f6steririz.\n","42aa64d2":"Visualization G\u00f6rselle\u015ftirme","843a21c1":"Veri \u0130\u015fleme Test ve Train Olarak Ayr\u0131l\u0131r","e3f564f5":"Modelin Derlenmesin RMSprop (root mean square error propability) Algoritmas\u0131yla Optimize Edilir","488bb1d5":"![0.png](attachment:6c3e15c7-ccb8-4df0-96cd-883d1297cc18.png)![1.png](attachment:ee6cf9e7-993b-486b-9432-a34041a9a391.png)![2.png](attachment:c512ebb2-25c8-46a5-957b-0cee29174f63.png)![3.png](attachment:5141dbf9-e5d4-4bbc-b782-e85f770b79c1.png)![4.png](attachment:9995b4d4-d536-4a33-8549-021202392ff2.png)![5.png](attachment:f7f76189-4e5c-4cf0-a4c4-4fd626083c18.png)![11.png](attachment:a5d4a17a-26ff-4243-ab2e-2f99dc462663.png)![12.png](attachment:104cd137-a6a8-4c7e-909b-bd6aba1d9179.png)![8.png](attachment:485b5ec4-8606-4b6b-9874-d26f0d2542d7.png)\n\n\u00c7e\u015fitli trafik i\u015faretlerinin etkili tespiti ve s\u0131n\u0131fland\u0131r\u0131lmas\u0131 konusu incelenmi\u015ftir. U\u00e7tan uca \u00e7\u00f6z\u00fcmle b\u00fct\u00fcnsel modelin olu\u015fturulmas\u0131 i\u00e7in iki a\u015famal\u0131 y\u00f6ntem \u00f6nerilmi\u015ftir. \u0130lk a\u015fama, trafik i\u015faretlerinin YOLO s\u00fcr\u00fcm 3 algoritmas\u0131 (Yaln\u0131zca Bir Kez Bakar\u0131z) ile etkin bir \u015fekilde yerelle\u015ftirilmesinin uygulanmas\u0131n\u0131 i\u00e7erir. \u0130lk a\u015famada trafik i\u015faretleri \u015fekillerine g\u00f6re d\u00f6rt kategoriye ayr\u0131l\u0131r. \u0130kinci a\u015famada, \u00f6nceden tan\u0131mlanm\u0131\u015f k\u0131rk \u00fc\u00e7 kategoriden birine yerle\u015ftirilmi\u015f trafik i\u015faretlerinin do\u011fru bir \u015fekilde s\u0131n\u0131fland\u0131r\u0131lmas\u0131 ger\u00e7ekle\u015ftirilir. \u0130kinci a\u015fama, bir evri\u015fimsel sinir katman\u0131na(CNN) sahip ba\u015fka bir modele dayanmaktad\u0131r. Trafik i\u015faretlerini alg\u0131lama modeli, e\u011fitim ve do\u011frulama i\u00e7in s\u0131ras\u0131yla 630 ve 111 RGB g\u00f6r\u00fcnt\u00fcl\u00fc Alman Trafik \u0130\u015fareti Alg\u0131lama Benchmark'\u0131nda (GTSDB)[https:\/\/benchmark.ini.rub.de\/](http:\/\/) e\u011fitildi. S\u0131n\u0131fland\u0131rma modeli, 19 \u00d7 19 boyutlu evri\u015fimli katman filtreleri ile saf \u201cnumpy\u201d k\u00fct\u00fcphanesinde 66000 RGB g\u00f6r\u00fcnt\u00fc ile Alman Trafik \u0130\u015fareti Tan\u0131ma Benchmark (GTSRB) \u00fczerinde e\u011fitildi ve test veri setinde 0.868 do\u011frulu\u011fa ula\u015ft\u0131. Deneysel sonu\u00e7lar, trafik i\u015faretlerinin konumu i\u00e7in yaln\u0131zca d\u00f6rt kategoriye sahip ilk model derin a\u011f\u0131n e\u011fitiminin %97.22'ye ula\u015fan y\u00fcksek mAP (ortalama Ortalama Hassasiyet) do\u011frulu\u011fu \u00fcretti\u011fini g\u00f6stermi\u015ftir. Nihai s\u0131n\u0131fland\u0131rma i\u00e7in uygulanan ikinci modelin ek evri\u015fim katman\u0131, verimli t\u00fcm sistem olu\u015fturur. Video dosyalar\u0131n\u0131n i\u015flenmesiyle ilgili deneyler, otuz alt\u0131 ile altm\u0131\u015f bir aras\u0131nda saniyedeki kare say\u0131s\u0131n\u0131 (FMS) g\u00f6sterdi ve bu, sistemi ger\u00e7ek zamanl\u0131 uygulamalar i\u00e7in uygun hale getirdi. Saniyedeki kare say\u0131s\u0131, alt\u0131 ile bir aral\u0131\u011f\u0131ndaki her bir karede alg\u0131lanacak ve s\u0131n\u0131fland\u0131r\u0131lacak trafik i\u015faretlerinin say\u0131s\u0131na ba\u011fl\u0131yd\u0131.\n","584fd075":"Evri\u015fimli Sinir A\u011f\u0131 Modeli (CNN) model olarak Sequential() Model Kullan\u0131r\u0131z\n#Relu,do\u011frultucu aktivasyon fonksiyonu, arg\u00fcman\u0131n\u0131n pozitif k\u0131sm\u0131 olarak tan\u0131mlar\n#Softmax, sigmoid gibi s\u0131n\u0131flay\u0131c\u0131 olarak kullan\u0131labilen CNNin son katman\u0131nda kullan\u0131lan aktivasyon fonksiyonudur.\n","e24b7695":"Fitting Ideal Batch ve Epoch say\u0131s\u0131 belirlenerek model.fit Fonksiyonu Kullan\u0131r\u0131z \n#Epochs \u00f6zelli\u011fi ile verdi\u011fimiz verilerin ka\u00e7 defa sinir a\u011f\u0131m\u0131zdan ge\u00e7mesi gerekti\u011fini belirtiyoruz.\n#Batch, sinir a\u011f\u0131n\u0131za her girdi\u011finizde ne kadar b\u00fcy\u00fckl\u00fckte \u00f6rnek verdi\u011finizi belirtirtebilirsiniz.\n","3b55e740":"Veri Seti Y\u00fcklenmesi Read Fonksiyonu \u0130le Data Seti Y\u00fckleriz"}}