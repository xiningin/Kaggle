{"cell_type":{"b151d32a":"code","0ba5664a":"code","dfe51c24":"code","df08ee43":"code","94ec72a0":"code","0f3c0d49":"code","159e2ccf":"code","e50e9eb0":"code","5b2722ec":"code","b8a9bf12":"markdown","125177ae":"markdown","f5ed2136":"markdown","f6fe5d83":"markdown","87ce07dc":"markdown","5f818c5c":"markdown","f61880ef":"markdown","735199e0":"markdown"},"source":{"b151d32a":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nfrom scipy.stats import norm\nfrom scipy.stats import multivariate_normal\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom matplotlib.colors import ListedColormap\nimport itertools","0ba5664a":"X1=[]\nX2=[]\nY1=[]\nfor i,j in itertools.product(range(50),range(50)):\n    if abs(i-25)>5 and abs(i-j)<20 and np.random.randint(5,size=1) >0:\n        X1=X1+[i\/2]\n        X2=X2+[j\/2]\n        if (i>25):\n            Y1=Y1+[1]\n        else:\n            Y1=Y1+[0]\nX=np.array([X1,X2]).T\nY=np.array([Y1]).T","dfe51c24":"cmap = ListedColormap(['blue', 'red'])                    \nplt.scatter(X1,X2, c=Y1,marker='.', cmap=cmap)\nplt.show()","df08ee43":"def NaiveBayesClassifier(X,Y,Xtest):\n\n    M0=np.mean(X[np.where(Y==0)[0]],axis=0)\n    M1=np.mean(X[np.where(Y==1)[0]],axis=0)\n    S0=np.std(X[np.where(Y==0)[0]],axis=0,ddof=1)\n    S1=np.std(X[np.where(Y==1)[0]],axis=0,ddof=1)\n    Ytest=np.zeros((Xtest.shape[0],1))\n  \n    for i in range(len(Xtest[:,0:1])): \n        Prob_X0_Y0= norm.pdf(Xtest[i,0],loc=M0[0], scale=S0[0])\n        Prob_X0_Y1= norm.pdf(Xtest[i,0],loc=M1[0], scale=S1[0])\n        Prob_X1_Y0= norm.pdf(Xtest[i,1],loc=M0[1], scale=S0[1])\n        Prob_X1_Y1= norm.pdf(Xtest[i,1],loc=M1[1], scale=S1[1])\n        Prob_Y0_X1X2 =(Prob_X0_Y0 *Prob_X1_Y0)\/((Prob_X0_Y0 *Prob_X1_Y0)+(Prob_X0_Y1 *Prob_X1_Y1))\n        Prob_Y1_X1X2 =(Prob_X0_Y1 *Prob_X1_Y1)\/((Prob_X0_Y0 *Prob_X1_Y0)+(Prob_X0_Y1 *Prob_X1_Y1))\n        if (Prob_Y1_X1X2>Prob_Y0_X1X2):\n            Ytest[i]=1\n        \n    return Ytest","94ec72a0":"def accurracy(Y1,Y2):\n    m=np.mean(np.where(Y1==Y2,1,0))    \n    return m*100","0f3c0d49":"K=25\npY=NaiveBayesClassifier(X,Y,X) \nprint(accurracy(Y, pY))","159e2ccf":"\n\n#Predict for each X1 and X2 in Grid \nx_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1\ny_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1\nu = np.linspace(x_min, x_max, 50) \nv = np.linspace(y_min, y_max, 50) \n\nU,V=np.meshgrid(u,v)\nUV=np.column_stack((U.flatten(),V.flatten())) \nW=NaiveBayesClassifier(X,Y,UV) \nW.shape=U.shape\nplt.contourf(U, V, W, cmap=cmap, alpha=0.2)\n\n###########################################################################\nplt.scatter(X[:,0],X[:,1], c=Y[:,0],marker=\".\" ,cmap=cmap) \n###########################################################################\nplt.show()","e50e9eb0":"def plotNormalSurface(X,y):   \n    fig = plt.figure()\n    ax = fig.add_subplot(111, projection='3d')  \n  \n    M0=np.mean(X[np.where(y==0)[0]],axis=0)\n    M1=np.mean(X[np.where(y==1)[0]],axis=0)\n    S0=np.std(X[np.where(y==0)[0]],axis=0,ddof=1)\n    S1=np.std(X[np.where(y==1)[0]],axis=0,ddof=1)\n    V0=np.var(X[np.where(y==0)[0]],axis=0,ddof=1)\n    V1=np.var(X[np.where(y==1)[0]],axis=0,ddof=1)\n    \n    x_min= M0[0]-4*S0[0]\n    x_max =M0[0]+4*S0[0]\n    y_min = M0[1]-4*S0[1]\n    y_max = M0[1]+4*S0[1]\n    u = np.linspace(x_min, x_max,50) \n    v = np.linspace(y_min, y_max,50) \n    \n\n    U, V = np.meshgrid(u,v)\n    pos = np.empty(U.shape + (2,))\n    pos[:, :, 0] = U; pos[:, :, 1] = V\n\n    rv = multivariate_normal([M0[0], M0[1]], [[V0[0], 0], [0, V0[1]]])\n    W=rv.pdf(pos)\n\n    ax.plot_surface(U,V,W,alpha=0.5, cmap='viridis',linewidth=0)\n\n\n\n    rv = multivariate_normal([M1[0], M1[1]], [[V1[0], 0], [0, V1[1]]])\n    W=rv.pdf(pos)\n\n    ax.plot_surface(U,V,W,alpha=0.5,cmap='viridis',linewidth=0)\n\n    ax.set_xlabel('X axis')\n    ax.set_ylabel('Y axis')\n    ax.set_zlabel('Z axis')\n    \n    \n    \n    plt.show()\n\n\n\n    return\n\n","5b2722ec":"plotNormalSurface(X,Y)","b8a9bf12":"<h1> Prediction\/Accuracy Evaluation","125177ae":"<h5> Visualize Data","f5ed2136":"# Generate Data","f6fe5d83":"<h3>Predict using NaiveBayes","87ce07dc":"# Plot Normal Surface","5f818c5c":"<h1>Plotting Hypothesis","f61880ef":"# Naive Bayes Classification \n2 Classes","735199e0":"<h5>Accurracy on Training Data"}}