{"cell_type":{"e8d8474c":"code","192b2895":"code","96046227":"code","81d70ddb":"code","8b80d7e6":"code","cbcd953f":"code","8b33f1bf":"code","4a30906f":"code","bc6900a5":"code","542b47e4":"code","63c08526":"code","40d72a83":"code","2b303333":"code","d9c1c37a":"code","3629dda8":"code","3872e000":"code","cf03331a":"code","79b0f5bd":"code","60aea613":"code","536e087e":"code","009c13ae":"code","ea10ea14":"code","706b22c4":"code","758543ab":"code","26cdc660":"code","aa092787":"code","3c0af653":"code","0c3fb683":"code","20a5aa0a":"code","d93f8f14":"code","5a2c3dfb":"markdown"},"source":{"e8d8474c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","192b2895":"# faktoriyel\ndef factoriyel(k):\n    result=1\n    for i in range(1,k+1):\n        result=result*i\n    return result\n\nk=5\nprint(k,\"!= \",factoriyel(k))\n    ","96046227":"#kelimenin tersi\nword='adanal\u0131lar'\n\n\ndef reverse(word):\n    print(word[::-1])\n\nreverse(word)","81d70ddb":"#dakikay\u0131 saat dakika yapma\n\ndef convert(minutes):\n    hour=(int) (minutes \/ 60)\n    minute=minutes%60\n    print(hour,\" saat \", minute, \" dakika\")\n\nconvert(61)","8b80d7e6":"#ba\u015f harf b\u00fcy\u00fctme\n\ndef upper(text):\n    words=text.split(\" \")\n    \n    for i in range(0,len(words)):\n        words[i]=words[i][0].upper()+words[i][1::]\n        \n    print(\" \".join(words))\n\nupper(\"hello hello world hello fg gfhg \u015flk hlkf\u015ff hjru\u0131 u\u0131ohdfvhdljk lhglk\")\n    ","cbcd953f":"def ayniKelimeMi(str1,str2):\n    for i in str2:\n        if i not in str1:\n            return False\n    return True\nprint(ayniKelimeMi(\"istanbul\",\"istukdflg\"))\nprint(ayniKelimeMi(\"adana\",\"adana\"))\n    ","8b33f1bf":"#stringteki kay\u0131p basama\u011f\u0131 bulma\n\ndef basamagiBul(equ):\n    for i in range(0,10):\n        replaced=equ.replace(\"x\",str(i))\n        index=equ.index(\"=\")\n        if eval(replaced[:index])==eval(replaced[index+1:]):\n            print(eval(replaced[:index]) , eval(replaced[index+1:]))\n            print(equ, \"   x= \", i)\n            break\n        else:\n            print(eval(replaced[:index]) , eval(replaced[index+1:]))\n            print(i, \" olmad\u0131\")\n            print()\n            \n\nequ=\"5x+10=69\"\nbasamagiBul(equ)\n            ","4a30906f":"#ilk eleman\u0131 indeks kabul edip listeyi yazd\u0131rmaya o elemandan ba\u015flayan program\n\ndef yazdir(liste):\n    startIndex=liste[0]\n    result=[str(liste[startIndex])]\n    counter=startIndex+1\n    while counter%len(liste)!=startIndex:\n        result.append(str(liste[counter%len(liste)]))\n        counter+=1\n    print(result)\n    \nyazdir([5,-1,0,1,2,3,4,5,6,7,8,9])","bc6900a5":"#listedeki elemanlar\u0131 iki\u015fer iki\u015fer se\u00e7. \n#tersi olmayan \u00e7iftleri tespit et\n\ndef ciftArray(array):\n    new=\"\"\n    for k in range(len(array)):\n        new+=str(array[k])+\" \"\n    \n        if k%2 == 1:\n            new += \",\"    \n    new = new.split(\" ,\")\n\n    depo = []\n    for i in new:\n        if i[::-1] not in new:\n            for l in i.split():\n                depo.append(l)\n        elif i[::-1]==i and new.count(i)<2:\n            for l in i.split():\n                depo.append(l)\n    if depo==[]:\n        print('ok')\n    if depo!=[]: \n        print(\",\".join(depo))\n\nciftArray([1,2,2,1,4,5])\nciftArray([1,2,2,1,3,3])\nciftArray([1,2,2,1,5,6,6,5])\n\n","542b47e4":"input=[\"deepLearning\",\"sdfsd,erdsef,gfdf,deep,gsggs,Learning\"]\n\ndef checkForMatch(input):\n    word=list(input[0])\n    toCheck=input[1].split(\",\")\n    \n    \n    \n    for i in range (1,len(word)):\n        copyWord=word[::]\n        copyWord.insert(i,\" \")\n        \n        x, y= \"\".join(copyWord).split()\n              \n        if x in toCheck and y in toCheck:\n            sonuc=x+\",\"+y\n            return sonuc\n        \n    return 0\n        \n\ncheckForMatch(input)\n    \n\n","63c08526":"# linked list \n\nclass Node(object):\n    \n    def __init__ (self,data):\n        \n        self.data=data\n        self.next= None\n\nclass LinkedList(object):\n    \n    def __init__ (self):\n        self.head=None\n        \n    def push(self,new_data):\n        new_node=Node(new_data)\n        new_node.next=self.head\n        self.head=new_node\n#     araya ekle   \n    def insertAfter (self,prev_node,new_data):\n        if prev_node is None:\n            print(\"boyle bir node yok\")\n            return\n        new_node=Node(new_data)\n        new_node.next=prev_node.next\n        prev_node.next=new_node\n    \n#     sona ekle\n\n    def append(self,new_data):\n        \n        new_node=Node(new_data)\n        \n        if self.head is None:\n            self.head=new_node\n        \n        last=self.head\n        while last.next:\n            last=last.next\n            \n        last.next=new_node\n    \n    def printLinkedList(self):\n        \n        toPrint=self.head\n        while toPrint:\n            print(toPrint.data)\n            toPrint=toPrint.next\n            \n    \n\n\nmyList=LinkedList()\nmyList.push(\"this is tail\")\nmyList.push(15)\nmyList.push(20)\nmyList.push(\"this is head\")\n\nmyList.printLinkedList()\n\nprint(\"-----------\")\n\n\n# araya ekle\nmyList.insertAfter(myList.head.next.next,\"araya eklenen\")\nmyList.printLinkedList()\nprint(\"-- --- --- ----\")\n\n# sona ekle\nmyList.append(\"sona eklenen\")\nmyList.printLinkedList()\n        ","40d72a83":"# recursion\n\ndef factorial (n):\n    print (n)\n    if n==0:\n        return 1\n    return n*factorial(n-1)\n\nfactorial(5)","2b303333":"def summation(n):\n    print (n)\n    if n==0:\n        return 0\n    return n+summation(n-1)\nsummation(5)","d9c1c37a":"# reverse string by recursion\ndef ReverseString(myString):\n    if len(myString)<=1:\n        return myString\n    return ReverseString(myString[1:])+myString[0]\nReverseString(\"12345abcde\")","3629dda8":"# recursion multiplier\ndef multiply(x,y):\n   \n    if y==0:     \n        return 0\n    print(\"x:\",x,\"  y: \", y)\n    return (x+multiply(x,y-1)) # x*y= x + ( x * (y-1) )\n\nmultiply(10,6)","3872e000":"# recursion power using recursion multiplier\n# a^b=a * (a^b-1) = a*a * (a^b-2) = ...\n\n\n\ndef multiply(x,y):   \n    global multiplyCalls\n    print(\"multiply called\",multiplyCalls,\"times\")\n    multiplyCalls+=1\n        \n    if y==0:     \n        return 0\n    return (x+multiply(x,y-1))\n\ndef power(a,b):\n    global powerCalls\n    print(\"power called\", powerCalls,\"times\")\n    powerCalls+=1\n    \n    if b==0:\n        return 1\n    return (multiply(a,power(a,b-1)) )\n\nmultiplyCalls=1\npowerCalls=1\npower(2,3)","cf03331a":"def sequentialSearchUnorderedList(liste,value):\n    index=0\n    found=False\n    \n    while index<len(liste) and not found:\n        if liste[index]==value:\n            found=True\n        else:\n            index +=1\n    return (found, index)\n\nmyListe=[4,6,100,3,5,7]\nsequentialSearchUnorderedList(myListe,100)\n            ","79b0f5bd":"def sequentialSearchOrderedList(liste,value):\n    index=0\n    found=False\n    greatersFound=False\n    \n    while index<len(liste) and not found and not greatersFound:\n        \n        if liste[index]==value:\n            found=True\n        \n        else:\n            if value<liste[index]:\n                greatersFound=True\n            else:\n                index +=1\n\n    return (found, index)\n\nmyListe=[2,4,7,100,105,115]\nfound, index=sequentialSearchOrderedList(myListe,101)\n\nprint(\"found: \"+str(found)+\"\\n\"\"last index checked: \"+str(index) )","60aea613":"# binary search\ndef binarySearch(liste, value):\n    first_index=0\n    last_index=len(liste)-1\n\n    \n    while(True):\n        \n        middle_index=int ( (last_index+first_index)\/2 )\n        \n        if last_index==first_index and not liste[middle_index]==value:\n                return \"not found\"\n        \n        if liste[middle_index]==value:\n            return middle_index\n        \n        if liste[middle_index]<value:\n            print(value,\">\", liste[middle_index])\n            first_index=middle_index+1\n            continue\n            \n        if liste[middle_index]>value:\n            print(value,\"<\", liste[middle_index])\n            last_index=middle_index\n            continue\n            \n        \n        \n            \nprint(binarySearch([0,1,2,3,4,5,6,7,8,9],10))\n# print(binarySearch([0,1,2,3,4,5],0))\n\n\n            \n            \n            ","536e087e":"#jump search\n\nimport math\n\ndef jumpSearch (liste, value):\n    n=len(liste)\n    step=math.sqrt(n)\n#     step=0\n    prev=0\n    \n    while liste[int(min(step,n)-1)] < value:\n        prev=step\n        step+=math.sqrt(n)\n        print(\"prev:\",prev,\"  step:\",step)\n    \n        if prev>n:\n            return -1\n    \n    while liste[int(prev)]<value:\n        prev+=1\n        print(\"prev linear:\",prev,\"  step:\",step)\n        \n        if prev == min(step,n)-1:\n            return -1\n        \n    if liste [int(prev)]==value:\n        return int(prev)\n        \n    return -1\n\nliste = [0,1,2,3,4,5,6,7,8,9,10]\njumpSearch(liste,9)\n    ","009c13ae":"#recursion binary search\ndef recursionBinarySearch(arr,ele):\n    \n    if len(arr) == 0:\n        return \"not found\"\n    \n    \n    mid=int(len(arr)\/2)\n        \n    if arr[mid]==ele:\n        return True\n    else:\n        if ele<arr[mid]:\n            return recursionBinarySearch(arr[:mid],ele)\n    return recursionBinarySearch(arr[mid+1:],ele)\n        \n            \n    \n#     mid=int(len(arr\/2)\n#     return arr[mid]\n#     else:\n                \n#         if ele<arr[mid]:\n#         return recursionBinarySearch(arr[:mid],value)\n        \n#         else:\n#             return recursionBinarySearch(arr[mid+1:],value)\n\nliste=[0,1,2,3,4,5,6,7,8,9,10]\nprint(recursionBinarySearch(liste,6))","ea10ea14":"#bubble sort\ndef bubbleSort(arr):\n    for iterNo in range(len(arr)-1,0,-1):\n        for i in range(iterNo):\n            if arr[i]>arr[i+1]:\n                temp=arr[i]\n                arr[i]=arr[i+1]\n                arr[i+1]=temp\n    print(arr)\n\nbubbleSort([10,1,21,3,42,6])\n\n","706b22c4":"def mergeSort(array):\n    if len(array) > 1:\n\n        r = len(array)\/\/2\n        L = array[:r]\n        M = array[r:]\n\n        mergeSort(L)\n        mergeSort(M)\n        i = j = k = 0\n\n        while i < len(L) and j < len(M):\n            if L[i] < M[j]:\n                array[k] = L[i]\n                i += 1\n            else:\n                array[k] = M[j]\n                j += 1\n            k += 1\n\n        while i < len(L):\n            array[k] = L[i]\n            i += 1\n            k += 1\n\n        while j < len(M):\n            array[k] = M[j]\n            j += 1\n            k += 1\n\n\n# Print the array\ndef printList(array):\n    for i in range(len(array)):\n        print(array[i], end=\" \")\n    print()\n\n\n# Driver program\nif __name__ == '__main__':\n    array = [6, 5, 12, 10, 5, 1]\n\n    mergeSort(array)\n\n    print(\"Sorted array is: \")\n    printList(array)","758543ab":"#Merge Sort\ndef mergeSort(array):\n    if len(array) > 1:\n        \n        r=len(array)\/\/2\n        L=array[:r]\n        M=array[r:]\n        mergeSort(L)\n        mergeSort(M)\n        i = j = k = 0\n    \n        while i < len(L) and j < len(M):\n            if L[i] < M[j]:\n                array[k] = L[i]\n                i += 1\n            else:\n                array[k] = M[j]\n                j += 1\n            k += 1\n        \n        while i < len(L):\n            array[k] = L[i]\n            i += 1\n            k += 1\n        \n        while j < len(M):\n            array[k] = M[j]\n            j += 1\n            k += 1\n    return array\nprint( mergeSort([2,15,4,58,7,8,9,13,65,36,86,34,43,76,98,76]) )\n","26cdc660":"#Insertion Sort\ndef insertionSort(array):\n    for i in range (0 , len(array)):\n        key=array[i]\n        j=i-1\n        while j>=0 and array[j]>key:\n            array[j+1]=array[j]\n            array[j]=key\n            j-=1\n            print(array)\n    return array\nprint(insertionSort([10,9,8,7,6,5,4,3,2,1,0]))","aa092787":"#selection sort\ndef selectionSort(array):\n    for i in range(len(array)):\n        smallest=array[i]\n        smallestIndex=i\n        for j in range(i+1,len(array)):\n            if array[j]<smallest:\n#                 print(\"BeforeSmallest:\", smallest )\n                smallest=array[j]\n#                 print(\"Aftersmallest:\", smallest )\n                smallestIndex=j\n        array[smallestIndex]=array[i]\n        array[i]=smallest\n        print(array)\n    return array\nprint(selectionSort([10,1,9,2,8,3,7,4,6,5]) )","3c0af653":"#counting sort\ndef countingSort(array):\n    counts=[0]*10\n   \n    for i in range (len(array)):\n        counts[array[i]]+=1\n    sortedIndex=0\n    for i in range (len(counts)):\n#         print(\"ghkjhgjki\",i)\n        while counts[i]>0:\n            array[sortedIndex]=i\n            sortedIndex+=1\n            counts[i]-=1\n       \n            \n    return array\n\ncountingSort([3,3,2,2,1,1,6,6,7,7,1,2,3,4,5])\n        \n","0c3fb683":"#quick sort (tekrar bak\u0131lacak)............................\n# ........................................................\n# ........................................................\n# ........................................................\n# ........................................................\n\n# array=[12,4,5,6,7,3,1,15]\ndef sort(array=[5,4,3,6,3,8,2,4,6]):\n    \"\"\"Sort the array by using quicksort.\"\"\"\n\n    less = []\n    equal = []\n    greater = []\n\n    if len(array) > 1:\n        pivot = array[0]\n        for x in array:\n            if x < pivot:\n                less.append(x)\n            elif x == pivot:\n                equal.append(x)\n            elif x > pivot:\n                greater.append(x)\n            print(\"less: \",less)\n            print(\"equal: \",equal)\n            print(\"greater : \",greater)\n        # Don't forget to return something!\n        return sort(less)+equal+sort(greater)  # Just use the + operator to join lists\n    # Note that you want equal ^^^^^ not pivot\n    else:  # You need to handle the part at the end of the recursion - when you only have one element in your array, just return the array.\n        print(\"array: \", array)\n        return array\nsort()","20a5aa0a":"#quick sort (tekrar bak\u0131lacak)............................\n# ........................................................\n# ........................................................\n# ........................................................\n# ........................................................\n# ........................................................\n\n# Quick sort in Python\n\n\n# Function to partition the array on the basis of pivot element\ndef partition(array, low, high):\n\n    # Select the pivot element\n    pivot = array[high]\n    i = low - 1\n\n    # Put the elements smaller than pivot on the left and greater \n    #than pivot on the right of pivot\n    for j in range(low, high):\n        if array[j] <= pivot:\n            i = i + 1\n            (array[i], array[j]) = (array[j], array[i])\n\n    (array[i + 1], array[high]) = (array[high], array[i + 1])\n\n    return i + 1\n\n\ndef quickSort(array, low, high):\n    if low < high:\n\n        # Select pivot position and put all the elements smaller \n        # than pivot on left and greater than pivot on right\n        pi = partition(array, low, high)\n\n        # Sort the elements on the left of pivot\n        quickSort(array, low, pi - 1)\n\n        # Sort the elements on the right of pivot\n        quickSort(array, pi + 1, high)\n\n\ndata = [8, 7, 2, 1, 0, 9, 6]\nsize = len(data)\nquickSort(data, 0, size - 1)\nprint('Sorted Array in Ascending Order:')\nprint(data)","d93f8f14":"#binary search tree\n\nclass node():\n    def __init__(self,key):\n        self.value=key\n        self.left=None\n        self.right=None\ndef insert(root,node):\n    if root==None:\n        root=node\n    else:\n        if node.value>root.value:\n            if root.right==None:\n                root.right=node\n            else:\n                insert(root.right,node)\n                    \n        if node.value<root.value:\n            if root.left==None:\n                root.left=node\n            else:\n                insert(root.left,node)\na=node(6)\ninsert(a,node(8))\nprint(a.left)\nprint(a.right)\ninsert(a,node(7))\n\nprint(a.right.right)\nprint(a.right.left)\n","5a2c3dfb":"SEARCHING ALGORITHMS"}}