{"cell_type":{"bf7bc25a":"code","d8c22220":"code","e1cdf1d2":"code","616df2e2":"code","f3b3e347":"code","460e3208":"code","b98583a3":"code","e192a5e0":"code","568c8663":"code","14b9c9b0":"code","3789c28b":"code","dc2afeb8":"code","f4095e38":"code","c3a18dc7":"code","8d8bf9c9":"code","8cccd90d":"code","15ee73cd":"code","fe03ab0a":"code","02fb096d":"code","b212f21d":"markdown","435114d2":"markdown","565a832f":"markdown","b1a3d35b":"markdown","0d9af134":"markdown","61196792":"markdown","8411176a":"markdown","d403eff8":"markdown","0f7fe9a8":"markdown","d028f7f0":"markdown"},"source":{"bf7bc25a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d8c22220":"import datetime\nimport math\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\ndf = pd.read_excel(io='\/kaggle\/input\/online-retail-data-set-from-uci-ml-repo\/Online Retail.xlsx')\ndf.head(3)","e1cdf1d2":"df.info()","616df2e2":"df = df[df['Quantity'] > 0]\ndf = df[df['UnitPrice'] > 0]\ndf = df[df['CustomerID'].notnull()]\nprint(df.shape)\ndf.isnull().sum()","f3b3e347":"# `Country` \uce7c\ub7fc\uc740 \uc8fc\ubb38 \uace0\uac1d \uad6d\uac00. \uc8fc\uc694 \uc8fc\ubb38 \uace0\uac1d\uc740 \uc601\uad6d\uc778\ub370 \uadf8 \uc774\uc678\uc5d0 \ub2e4\ub978 \uac12\ub4e4\ub3c4 \ub9ce\uc74c.\n# \uc774\ubc88 \ub370\uc774\ud130 \ubd84\uc11d\uc5d0\uc11c\ub294 \uc601\uad6d\ub9cc \ub2e4\ub8f8\ndf['Country'].value_counts()","460e3208":"df = df[df['Country'] == 'United Kingdom']\nprint(df.shape)","b98583a3":"# `UnitPrice` \uc640 `Quantity`\ub97c \uacf1\ud558\uc5ec \uc8fc\ubb38 \uae08\uc561 \ub370\uc774\ud130 \ub9cc\ub4e4\uae30\n# `CustomerID`\ub3c4 \ud3b8\ud558\uac8c \uc2dd\ubcc4\ud558\uae30 \uc704\ud574 int \ud615\uc73c\ub85c \ubcc0\uacbd\ndf['sale_amount'] = df['Quantity'] * df['UnitPrice']\ndf['CustomerID'] = df['CustomerID'].astype(int)","e192a5e0":"# \ud574\ub2f9 \ub370\uc774\ud130 \uc138\ud2b8\ub294 \uc8fc\ubb38 \ud69f\uc218\uc640 \uae08\uc561\uc774 \uc555\ub3c4\uc801\uc73c\ub85c \ud2b9\uc815 \uace0\uac1d\uc5d0\uac8c \ub9ce\uc740 \ud2b9\uc131\uc744 \uac00\uc9c0\uace0 \uc788\uc74c\n# \uac1c\uc778 \uace0\uac1d\uc758 \uc8fc\ubb38\uacfc \uc18c\ub9e4\uc810\uc758 \uc8fc\ubb38\uc774 \ud568\uaed8 \ud3ec\ud568\ub418\uc5b4 \uc788\uae30 \ub54c\ubb38\uc5d0 \n# top5 \uc8fc\ubb38\uac74\uc218\uc640 \uc8fc\ubb38\uae08\uc561 \uac00\uc9c4 \uace0\uac1d \ucd94\ucd9c\nprint(df['CustomerID'].value_counts().head(5))\nprint(df.groupby('CustomerID')['sale_amount'].sum().sort_values(ascending=False)[:5])","568c8663":"df.groupby(['InvoiceNo', 'StockCode'])['InvoiceNo'].count().mean()","14b9c9b0":"# dataframe\uc758 groupby()\uc758 \ub2e4\uc911 \uc5f0\uc0b0\uc744 \uc704\ud574 agg() \uc0ac\uc6a9\n# Recency\ub294 InvoiceDate \uce7c\ub7fc\uc758 max()\uc5d0\uc11c \ub370\uc774\ud130 \uac00\uacf5\n# Frequency\ub294 InvoiceNo \uce7c\ub7fc\uc758 count(), Monentary value\ub294 sale_amount\uce7c\ub7fc\uc758 sum()\n\naggregations = {\n    'InvoiceDate' : 'max',\n    'InvoiceNo' : 'count',\n    'sale_amount' : 'sum'\n}\n\ncust_df = df.groupby('CustomerID').agg(aggregations)\n\n# groupby\ub41c \uacb0\uacfc \uac12\uc744 \ubcc0\uacbd\ncust_df = cust_df.rename(columns = {'InvoiceDate' : 'Recency',\n                                   'InvoiceNo' : 'Frequency',\n                                   'sale_amount' : 'Monetary'\n                                   }\n                        )\ncust_df = cust_df.reset_index()\ncust_df.head(3)","3789c28b":"# Recency \uce7c\ub7fc\uc740 \uac1c\ubcc4 \uace0\uac1d \ub2f9 \uac00\uc7a5 \ucd5c\uadfc\uc758 \uc8fc\ubb38. \uc624\ub298 \ub0a0\uc9dc\ub97c \uae30\uc900\uc73c\ub85c \uac00\uc7a5 \ucd5c\uadfc \uc8fc\ubb38 \uc77c\uc790\ub97c \ube80 \ub0a0\uc9dc.\n# \uc624\ub298 \ub0a0\uc9dc\ub294 '\ud604\uc7ac \ub0a0\uc9dc'\uac00 \uc544\ub2d8. \uc624\ub298 \ub0a0\uc9dc\ub294 2011\ub144 12\uc6d4 10\uc77c\ub85c \uac04\uc8fc.\nimport datetime as dt\n\ncust_df['Recency'] = dt.datetime(2011, 12, 10) - cust_df['Recency']\ncust_df['Recency'] = cust_df['Recency'].apply(lambda x: x.days + 1)\nprint('cust_df row\uc640 columns \uac74\uc218\ub294 ', cust_df.shape)\ncust_df.head(3)","dc2afeb8":"# \uce7c\ub7fc \uac12 \ubcc4 \ud788\uc2a4\ud1a0\uadf8\ub7a8\nfig, (ax1, ax2, ax3) = plt.subplots(figsize=(12, 4), nrows=1, ncols=3)\nax1.set_title('Recency Histogram')\nax1.hist(cust_df['Recency'])\n\nax2.set_title('Frequency Histogram')\nax2.hist(cust_df['Frequency'])\n\nax3.set_title('Monetary Histogram')\nax3.hist(cust_df['Monetary'])","f4095e38":"# \uc138 \ubcc0\uc218 \ubaa8\ub450 \uc65c\uace1\ub41c \ub370\uc774\ud130 \uac12 \ubd84\ud3ec\ub3c4\ub97c \uac00\uc9c0\uace0 \uc788\uc74c\ncust_df[['Recency', 'Frequency', 'Monetary']].describe()","c3a18dc7":"# \uc65c\uace1 \uc815\ub3c4\uac00 \ub9e4\uc6b0 \ub192\uc740 \ub370\uc774\ud130 \uc138\ud2b8\uc5d0\uc11c k-\ud3c9\uade0 \uad70\uc9d1\uc744 \uc801\uc6a9\ud558\uba74 \ubcc0\ubcc4\ub825\uc774 \ub5a8\uc5b4\uc9c0\ub294 \uad70\uc9d1\ud654 \uc218\ud589\n# scaling \uacfc\uc815 \ud544\uc694\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.cluster import KMeans\nfrom sklearn.metrics import silhouette_score, silhouette_samples\n\nx_features = cust_df[['Recency', 'Frequency', 'Monetary']]\nx_features_scaled = StandardScaler().fit_transform(x_features)\n\nkmeans = KMeans(n_clusters=3, random_state=0)\nlabels = kmeans.fit_predict(x_features_scaled)\ncust_df['cluster_label'] = labels\n\nprint('\uc2e4\ub8e8\uc5e3 \uc2a4\ucf54\uc5b4\ub294 : {0:.3f}'.format(silhouette_score(x_features_scaled, labels)))","8d8bf9c9":"# \uc548\uc815\uc801\uc778 \uc2e4\ub8e8\uc5e3 \uc2a4\ucf54\uc5b4 \ubcf4\uc5ec\uc90c\n# \uac01 \uad70\uc9d1\ubcc4 \uc2e4\ub8e8\uc5e3 \uacc4\uc218 \uc54c\uc544\ubcf4\uae30\n# \uc5ec\ub7ec \uac1c\uc758 \ud074\ub7ec\uc2a4\ud130\ub9c1 \uac2f\uc218\ub97c list\ub85c \ubc1b\uc544 \uac01\uac01 \uc2e4\ub8e8\uc5e3 \uacc4\uc218\ub294 \uba74\uc801\uc73c\ub85c \ub098\ud0c0\ub0b4\ub294 \uadf8\ub798\ud504\n\ndef visualize_silhouette(cluster_lists, x_features):\n    from sklearn.datasets import make_blobs\n    from sklearn.cluster import KMeans\n    from sklearn.metrics import silhouette_samples, silhouette_score\n    \n    import matplotlib.pyplot as plt\n    import matplotlib.cm as cm\n    import math\n    \n    # \uc785\ub825\uac12\uc73c\ub85c \ud074\ub7ec\uc2a4\ud130\ub9c1 \uac2f\uc218\ub97c \ub9ac\uc2a4\ud2b8\ub85c \ubc1b\uc544\uc11c, \uac01 \uac2f\uc218\ubcc4\ub85c \ud074\ub7ec\uc2a4\ud130\ub9c1\uc744 \uc801\uc6a9\ud558\uace0 \uc2e4\ub8e8\uc5e3 \uacc4\uc218 \uad6c\ud568\n    n_cols = len(cluster_lists)\n    \n    # \ub9ac\uc2a4\ud2b8\uc5d0 \uae30\uc7ac\ub41c \ud074\ub7ec\uc2a4\ud130\ub9c1 \uc218\ub9cc\ud07c sub figures\ub97c \uac00\uc9c0\ub294 axs \uc0dd\uc131\n    fig, axs = plt.subplots(figsize=(4*n_cols, 4), nrows=1, ncols=n_cols)\n    \n    # \ub9ac\uc2a4\ud2b8\uc5d0 \uae30\uc7ac\ub41c \ud074\ub7ec\uc2a4\ud130\ub9c1 \uac2f\uc218\ub4e4\uc744 \ucc28\ub840\ub85c iteration \uc218\ud589\ud558\uba74\uc11c \uc2e4\ub8e8\uc5e3 \uacc4\uc218 \uc2dc\uac01\ud654\n    for ind, n_cluster in enumerate(cluster_lists):\n        cluster = KMeans(n_clusters = n_cluster, max_iter=500, random_state=0)\n        cluster_labels = cluster.fit_predict(x_features)\n        \n        sil_avg = silhouette_score(x_features, cluster_labels)\n        sil_values = silhouette_samples(x_features, cluster_labels)\n        \n        y_lower = 10\n        axs[ind].set_title('Number of Cluster : ' + str(n_cluster) + '\\n' \\\n                          'Silhouette Score : ' + str(round(sil_avg, 3)))\n        axs[ind].set_xlabel('The silhouette coefficient values')\n        axs[ind].set_ylabel('Cluster label')\n        axs[ind].set_xlim([-0.1, 1])\n        axs[ind].set_ylim([0, len(x_features) + (n_cluster + 1) * 10])\n        axs[ind].set_yticks([])\n        axs[ind].set_xticks([0, .2, .4, .6, .8, 1])\n        \n        # \ud074\ub7ec\uc2a4\ud130\ub9c1 \uac2f\uc218\ubcc4\ub85c \ub9c9\ub300 \uadf8\ub798\ud504 \ud45c\ud604\n        for i in range(n_cluster):\n            ith_cluster_sil_values = sil_values[cluster_labels == i]\n            ith_cluster_sil_values.sort()\n            \n            size_cluster_i = ith_cluster_sil_values.shape[0]\n            y_upper = y_lower + size_cluster_i\n            \n            color = cm.nipy_spectral(float(i) \/ n_cluster)\n            axs[ind].fill_betweenx(np.arange(y_lower, y_upper), 0, ith_cluster_sil_values, \\\n                                  facecolor = color, edgecolor = color, alpha = 0.7)\n            axs[ind].text(-0.05, y_lower + 0.5 * size_cluster_i, str(i))\n            y_lower = y_upper + 10\n            \n        axs[ind].axvline(x=sil_avg, color = 'red', linestyle = '--')","8cccd90d":"def visualize_kmeans_plot_multi(cluster_lists, X_features):\n    \n    from sklearn.cluster import KMeans\n    from sklearn.decomposition import PCA\n    import pandas as pd\n    import numpy as np\n    \n    # plt.subplots()\uc73c\ub85c \ub9ac\uc2a4\ud2b8\uc5d0 \uae30\uc7ac\ub41c \ud074\ub7ec\uc2a4\ud130\ub9c1 \ub9cc\ud07c\uc758 sub figures\ub97c \uac00\uc9c0\ub294 axs \uc0dd\uc131 \n    n_cols = len(cluster_lists)\n    fig, axs = plt.subplots(figsize=(4*n_cols, 4), nrows=1, ncols=n_cols)\n    \n    # \uc785\ub825 \ub370\uc774\ud130\uc758 FEATURE\uac00 \uc5ec\ub7ec\uac1c\uc77c \uacbd\uc6b0 2\ucc28\uc6d0 \ub370\uc774\ud130 \uc2dc\uac01\ud654\uac00 \uc5b4\ub824\uc6b0\ubbc0\ub85c PCA \ubcc0\ud658\ud558\uc5ec 2\ucc28\uc6d0 \uc2dc\uac01\ud654\n    pca = PCA(n_components=2)\n    pca_transformed = pca.fit_transform(X_features)\n    dataframe = pd.DataFrame(pca_transformed, columns=['PCA1','PCA2'])\n    \n     # \ub9ac\uc2a4\ud2b8\uc5d0 \uae30\uc7ac\ub41c \ud074\ub7ec\uc2a4\ud130\ub9c1 \uac2f\uc218\ub4e4\uc744 \ucc28\ub840\ub85c iteration \uc218\ud589\ud558\uba74\uc11c KMeans \ud074\ub7ec\uc2a4\ud130\ub9c1 \uc218\ud589\ud558\uace0 \uc2dc\uac01\ud654\n    for ind, n_cluster in enumerate(cluster_lists):\n        \n        # KMeans \ud074\ub7ec\uc2a4\ud130\ub9c1\uc73c\ub85c \ud074\ub7ec\uc2a4\ud130\ub9c1 \uacb0\uacfc\ub97c dataframe\uc5d0 \uc800\uc7a5. \n        clusterer = KMeans(n_clusters = n_cluster, max_iter=500, random_state=0)\n        cluster_labels = clusterer.fit_predict(pca_transformed)\n        dataframe['cluster']=cluster_labels\n        \n        unique_labels = np.unique(clusterer.labels_)\n        markers=['o', 's', '^', 'x', '*']\n       \n        # \ud074\ub7ec\uc2a4\ud130\ub9c1 \uacb0\uacfc\uac12 \ubcc4\ub85c scatter plot \uc73c\ub85c \uc2dc\uac01\ud654\n        for label in unique_labels:\n            label_df = dataframe[dataframe['cluster']==label]\n            if label == -1:\n                cluster_legend = 'Noise'\n            else :\n                cluster_legend = 'Cluster '+str(label)           \n            axs[ind].scatter(x=label_df['PCA1'], y=label_df['PCA2'], s=70,\\\n                        edgecolor='k', marker=markers[label], label=cluster_legend)\n\n        axs[ind].set_title('Number of Cluster : '+ str(n_cluster))    \n        axs[ind].legend(loc='upper right')\n    \n    plt.show()","15ee73cd":"visualize_silhouette([2, 3, 4, 5], x_features_scaled)\nvisualize_kmeans_plot_multi([2, 3, 4, 5], x_features_scaled)","fe03ab0a":"# Recency, Frequency, Monetary\uc5d0 log \ubcc0\ud658\ncust_df['Recency_log'] = np.log1p(cust_df['Recency'])\ncust_df['Frequency_log'] = np.log1p(cust_df['Frequency'])\ncust_df['Monetary_log'] = np.log1p(cust_df['Monetary'])\n\n# log \ubcc0\ud658 \ub370\uc774\ud130\uc5d0 scaling \uc9c4\ud589\nx_features = cust_df[['Recency_log', 'Frequency_log', 'Monetary_log']].values\nx_features_scaled = StandardScaler().fit_transform(x_features)\n\nkmeans = KMeans(n_clusters=3, random_state=0)\nlabels = kmeans.fit_predict(x_features_scaled)\ncust_df['cluster_label'] = labels\n\nprint('\uc2e4\ub8e8\uc5e3 \uc2a4\ucf54\uc5b4\ub294 : {0:.3f}'.format(silhouette_score(x_features_scaled, labels)))","02fb096d":"visualize_silhouette([2, 3, 4, 5], x_features_scaled)\nvisualize_kmeans_plot_multi([2, 3, 4, 5], x_features_scaled)","b212f21d":"* \uc9c0\uae08 \uc218\ud589\ud558\ub824\uace0 \ud558\ub294 RFM \uae30\ubc18\uc758 \uace0\uac1d \uc138\uadf8\uba58\ud14c\uc774\uc158\uc740 \uace0\uac1d \ub808\ubca8\ub85c \uc8fc\ubb38 \uae30\uac04, \ud69f\uc218, \uae08\uc561 \ub370\uc774\ud130\ub97c \uae30\ubc18\uc73c\ub85c \uc218\ud589\n* \uace0\uac1d \uae30\uc900\uc758 recency, frequency, monetary value \ub370\uc774\ud130\ub85c \ubcc0\uacbd","435114d2":"---\n#### RFM \uae30\ubc18 \uace0\uac1d \uc138\uadf8\uba58\ud14c\uc774\uc158","565a832f":"* \uad70\uc9d1 \uc218\ub97c \uc99d\uac00\uc2dc\ud0a4\uba74 \uac1c\uc120\uc774 \uac00\ub2a5\ud560 \uac83\uc774\ub77c \uc0dd\uac01\ud588\uc9c0\ub9cc, \uc2e4\uc81c \uacb0\uacfc\ub294 \uad70\uc9d1\uc774 3\uac1c \uc774\uc0c1\ubd80\ud130 \ub370\uc774\ud130 \uc138\ud2b8 \uac2f\uc218\uac00 \ub108\ubb34 \uc791\uc740 \uad70\uc9d1\uc774 \ub9cc\ub4e4\uc5b4\uc9d0\n* \uc774\ub7ec\ud55c \uacbd\uc6b0\uc5d0 \uad70\uc9d1 \uc218\ub97c \uc99d\uac00\uc2dc\ucf1c\ubd24\uc790 \uc758\ubbf8 \uc5c6\ub294 \uacb0\uacfc\ub4e4\ub9cc \ub3c4\ucd9c\ub428\n* \uc804\uccb4 \ub370\uc774\ud130\uc5d0 \ub85c\uadf8 \ubcc0\ud658\uc744 \ud55c \ub4a4\uc5d0 \ub2e4\uc2dc k-\ud3c9\uade0 \uad70\uc9d1\ud654 \ud655\uc778","b1a3d35b":"* `InvoiceNO` : \uc8fc\ubb38\ubc88\ud638\n* `StockCode` : \uc81c\ud488\ucf54\ub4dc","0d9af134":"* \uc804\uccb4 \uc2e4\ub8e8\uc5e3 \uc2a4\ucf54\uc5b4\ub294 \uc804\ubcf4\ub2e4 \uac10\uc18c\ud558\uc600\ub2e4.\n* \ud558\uc9c0\ub9cc \uac1c\ubcc4 \uad70\uc9d1\uc774 \ub354\uc6b1 \ub354 \uade0\uc77c\ud558\uac8c \ubd84\ub958\ub41c \uac83\uc744 \ud655\uc778\ud560 \uc218 \uc788\ub2e4.","61196792":"## [Tutorial] Online Retail Consumer Segmentation \uace0\uac1d \uc138\uadf8\uba58\ud14c\uc774\uc158\n### \ucc45 <\ud30c\uc774\uc36c \uba38\uc2e0\ub7ec\ub2dd \uc644\ubcbd \uac00\uc774\ub4dc> \ud544\uc0ac \ucf54\ub4dc\uc785\ub2c8\ub2e4.","8411176a":"* `CustomerID` null \uac12\uc774 \ub108\ubb34 \ub9ce\uc74c. \uace0\uac1d \uc138\uadf8\uba58\ud14c\uc774\uc158\uc774\uae30 \ub54c\ubb38\uc5d0 \uace0\uac1d \ubc88\ud638\uac00 \uc5c6\ub294 \ub370\uc774\ud130\ub294 \uc0ad\uc81c\n* \ub300\ud45c\uc801\uc778 \uc624\ub958\ub370\uc774\ud130 \uc815\uc81c \ud544\uc694. `Quantity`\ub098 `UnitPrice`\uac00 0\ubcf4\ub2e4 \uc791\uc740 \uac83\uc740 \uc624\ub958 \uac12. (\uc5ec\uae30\uc11c\ub294 \ubc18\ud488\uac74\uc744 \uc758\ubbf8) \uc0ad\uc81c \ud544\uc694.","d403eff8":"---","0f7fe9a8":"---\n#### RFM \uae30\ubc18 \ub370\uc774\ud130 \uac00\uacf5","d028f7f0":"* \uc704\uc758 \uacb0\uacfc\ub97c \ubcf4\uba74 \uc54c \uc218 \uc788\ub4ef\uc774, \ud2b9\uc815 \uba87\uba87 \uace0\uac1d\uc774 \ub9ce\uc740 \uc8fc\ubb38 \uac74\uc218\uc640 \uc8fc\ubb38 \uae08\uc561\uc744 \uac00\uc9c0\uace0 \uc788\uc74c\n* \uc8fc\uc5b4\uc9c4 \ub370\uc774\ud130 \uc138\ud2b8\ub294 \uc8fc\ubb38\ubc88\ud638 + \uc0c1\ud488\ucf54\ub4dc \ub808\ubca8\uc758 \uc2dd\ubcc4\uc790\ub85c \ub418\uc5b4 \uc788\uc74c.\n* `InvoiceNo` + `StockCode`\ub85c group by\ub97c \uc218\ud589\ud558\uba74 \uac70\uc758 1\uc5d0 \uac00\uae4c\uc6b4 \uc720\uc77c\ud55c \uc2dd\ubcc4\uc790 \ub808\ubca8\uc774 \ub428\uc744 \uc54c \uc218 \uc788\uc74c"}}