{"cell_type":{"5efdb445":"code","3f3fdc9d":"code","9ffe04f8":"code","bab21f58":"code","01d379f2":"code","4779feea":"code","9e37d36a":"code","afca57b9":"code","682f0ef6":"code","bdd3f225":"code","f80c6b31":"code","9245087b":"code","d520d7af":"code","920cec14":"code","3e7ce975":"code","36001fab":"code","def593b5":"code","d39eb37d":"code","93b20e59":"code","cce92c73":"code","086ca224":"code","1129b74c":"code","7218a7fb":"code","8ddf17d5":"code","ce10dec9":"code","308e400e":"code","9d800d20":"code","4367546c":"code","a26cfd77":"code","9df91c48":"code","1e1a5b53":"code","0c67260b":"code","48be7298":"code","caacbd12":"code","0f527e83":"code","ea89e0c0":"code","d4165e19":"code","a9316927":"markdown","6d9561bf":"markdown","347c0d0b":"markdown","c1d6f3de":"markdown","79a580b0":"markdown"},"source":{"5efdb445":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","3f3fdc9d":"import matplotlib.pyplot as plt\n%matplotlib inline","9ffe04f8":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/train.csv')","bab21f58":"train.head()\n","01d379f2":"test.head()\n","4779feea":"test['casual'] = np.nan\ntest['registered'] = np.nan\ntest['count'] = np.nan\n","9e37d36a":"test.head()\n","afca57b9":"print(train.info())\nprint(test.info())\n","682f0ef6":"train['datetime'] = pd.to_datetime(train['datetime'])\ntest['datetime'] = pd.to_datetime(test['datetime'])\n","bdd3f225":"print(train.info())\n","f80c6b31":"train['year'] = train['datetime'].dt.year\ntrain['month'] = train['datetime'].dt.month\ntrain['DOW'] = train['datetime'].dt.dayofweek\ntrain['hour'] = train['datetime'].dt.hour\n","9245087b":"train.head()\n","d520d7af":"test['year'] = test['datetime'].dt.year\ntest['month'] = test['datetime'].dt.month\ntest['DOW'] = test['datetime'].dt.dayofweek\ntest['hour'] = test['datetime'].dt.hour\n","920cec14":"col = ['workingday','temp','year','month','DOW', 'hour']\nx = train[col]\ny = train['count']\n","3e7ce975":"X_test = test[col]\nY_test = test['count']\n","36001fab":"from sklearn.model_selection import train_test_split\nX_train , X_valid ,Y_train , Y_valid = train_test_split(x,y,test_size = 0.25, random_state = 201)\n","def593b5":"def RSMLE(predictions , realizations):\n    predictions_use = predictions.clip(0)\n    rmsle = np.sqrt(np.mean(np.array(np.log(predictions_use+1)-np.log(realizations+1))**2))\n    return rmsle\n","d39eb37d":"from sklearn.tree import DecisionTreeRegressor\ndtr = DecisionTreeRegressor(min_samples_split=25 , random_state=201)\ndtr_model = dtr.fit(X_train,Y_train)\n","93b20e59":"dtr_pred = dtr_model.predict(X_valid)\n","cce92c73":"pd.DataFrame(dtr_model.feature_importances_,index=col)\n","086ca224":"plt.figure(figsize=(7,7))\nplt.scatter(dtr_pred,Y_valid, s=0.2)\nplt.xlim(-100,1200)\nplt.ylim(-100,1200)\nplt.plot([-100,1200],[-100,1200],color = 'pink', linestyle = '-', linewidth =7)\nplt.suptitle(\"Predicted \/ Actual\", fontsize = 20 )\nplt.xlabel('pred')\nplt.ylabel(\"y_valid\")\n","1129b74c":"RSMLE(dtr_pred,Y_valid)\n","7218a7fb":"from sklearn.ensemble import RandomForestRegressor\nregress = RandomForestRegressor(n_estimators=500, max_features=4,min_samples_leaf=5, random_state=201)\nregress.fit(X_train,Y_train)\n","8ddf17d5":"predict = regress.predict(X_valid)\n","ce10dec9":"plt.figure(figsize=(7,7))\nplt.scatter(predict,Y_valid, s=1.9)\nplt.xlim(-100,1200)\nplt.ylim(-100,1200)\nplt.plot([-100,1200],[-100,1200],color = 'purple', linestyle = '-', linewidth =5)\nplt.suptitle(\"Predicted \/ Actual\", fontsize = 20 )\nplt.xlabel('pred')\nplt.ylabel(\"y_valid\")\n","308e400e":"RSMLE(predict,Y_valid)\n","9d800d20":"import xgboost as xgb\nxgb_train = xgb.DMatrix(X_train,label=Y_train)\nxgb_valid = xgb.DMatrix(X_valid)\n","4367546c":"num_round_for_cv = 500\nparam = { 'max_depth': 6 , 'eta':0.1 , 'seed' : 201 , 'objective' : 'reg:linear'}\n","a26cfd77":"xgb.cv(param,xgb_train,num_round_for_cv,nfold=5,show_stdv=False,verbose_eval=True,as_pandas=False)\n","9df91c48":"num_round = 400\nxg_model = xgb.train(param,xgb_train,num_round)\nxg_pred = xg_model.predict(xgb_valid)\n","1e1a5b53":"xg_model.get_fscore()\n","0c67260b":"xgb.plot_importance(xg_model)\n","48be7298":"plt.figure(figsize=(7,7))\nplt.scatter(xg_pred,Y_valid, s=0.6)\nplt.xlim(-100,1200)\nplt.ylim(-100,1200)\nplt.plot([-100,1200],[-100,1200],color = 'orange', linestyle = '-', linewidth =5)\nplt.suptitle(\"Predicted \/ Actual\", fontsize = 20 )\nplt.xlabel('xg_pred')\nplt.ylabel(\"y_valid\")\n","caacbd12":"RSMLE(xg_pred,Y_valid)\n","0f527e83":"test_dt =  dtr.fit(x,y)\npredict_dt = test_dt.predict(X_test)\ndt_clipped = pd.Series(predict_dt.clip(0))\n","ea89e0c0":"test_rf =  regress.fit(x,y)\npredict_rt = test_rf.predict(X_test)\nrf_clipped = pd.Series(predict_rt.clip(0))\n","d4165e19":"xgbtrain = xgb.DMatrix(x,label=y)\nxgbtest = xgb.DMatrix(X_test)\nxgmodel = xgb.train(param,xgbtrain,num_round)\nxgpred = xgmodel.predict(xgbtest)\nxg_clipped = pd.Series(xgpred.clip(0))\n","a9316927":"**Making Predictions for testing set\n**","6d9561bf":"***XGBoosted Tree Model\n*******","347c0d0b":"**DecisionTreeRegressor\n**","c1d6f3de":" **RandomForestRegressor\n**","79a580b0":"random Forest has less RSMLE  compared to xg Boost and Decison tree"}}