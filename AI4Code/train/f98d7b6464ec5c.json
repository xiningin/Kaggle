{"cell_type":{"5dc41b5d":"code","1d53087c":"code","2ac5a21a":"code","842e548e":"code","dd0d6929":"code","0373d21b":"code","bba4c1be":"code","68b185b5":"code","bcd6d1f2":"code","2c2cf566":"code","eedc18c9":"code","2b9e685a":"code","e445c8ed":"markdown","1b82e2ba":"markdown","97b3933c":"markdown","a8e7426f":"markdown","9212bf6a":"markdown","ed0a6a8e":"markdown","1a3db8fe":"markdown","0daa2397":"markdown","86ac5c21":"markdown","c8c5c7e5":"markdown","a159a741":"markdown"},"source":{"5dc41b5d":"\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib\n# create fake data:\ndf = pd.DataFrame(np.random.randn(50,3),columns='Col1 Col2 Col3'.split())\ndf.plot()\nplt.show()\n","1d53087c":"import plotly.graph_objs as go\nimport numpy as np\n\n\nnp.random.seed(42)\nrandom_x = np.random.randint(1,101,100)\nrandom_y = np.random.randint(1,101,100)\n\nfig = go.Figure(data=go.Scatter(x=random_x, y=random_y, mode='markers'))\n\nfig.show()","2ac5a21a":"matplotlib.pyplot.savefig('scatter_plot.png')","842e548e":"import plotly.graph_objects as go\n\n# Create random data with numpy\nimport numpy as np\nnp.random.seed(1)\n\nN = 100\nrandom_x = np.linspace(0, 1, N)\nrandom_y0 = np.random.randn(N) + 5\nrandom_y1 = np.random.randn(N)\nrandom_y2 = np.random.randn(N) - 5\n\nfig = go.Figure()\n\n# Add traces\nfig.add_trace(go.Scatter(x=random_x, y=random_y0,\n                    mode='markers',\n                    name='markers'))\nfig.add_trace(go.Scatter(x=random_x, y=random_y1,\n                    mode='lines+markers',\n                    name='lines+markers'))\nfig.add_trace(go.Scatter(x=random_x, y=random_y2,\n                    mode='lines',\n                    name='lines'))\n\nfig.show()","dd0d6929":"import plotly.offline as pyo\nimport plotly.graph_objs as go\nimport numpy as np\n\nnp.random.seed(42)\nrandom_x = np.random.randint(1,101,100)\nrandom_y = np.random.randint(1,101,100)\n\ndata = [go.Scatter(\n    x = random_x,\n    y = random_y,\n    mode = 'markers',\n)]\nlayout = go.Layout(\n    title = 'Random Data Scatterplot', # Graph title\n    xaxis = dict(title = 'Some random x-values'), # x-axis label\n    yaxis = dict(title = 'Some random y-values'), # y-axis label\n    hovermode ='closest' # handles multiple points landing on the same vertical\n)\nfig = go.Figure(data=data, layout=layout)\npyo.plot(fig, filename='scatter2.html')\nfig.show() ","0373d21b":"import plotly.offline as pyo\nimport plotly.graph_objs as go\nimport numpy as np\n\nnp.random.seed(42)\nrandom_x = np.random.randint(1,101,100)\nrandom_y = np.random.randint(1,101,100)\n\ndata = [go.Scatter(\n    x = random_x,\n    y = random_y,\n    mode = 'markers',\n    marker = dict(      # change the marker style\n        size = 12,\n        color = 'rgb(51,204,153)',\n        symbol = 'pentagon',\n        line = dict(\n            width = 2,\n        )\n    )\n)]\nlayout = go.Layout(\n    title = 'Random Data Scatterplot', # Graph title\n    xaxis = dict(title = 'Some random x-values'), # x-axis label\n    yaxis = dict(title = 'Some random y-values'), # y-axis label\n    hovermode ='closest' # handles multiple points landing on the same vertical\n)\nfig = go.Figure(data=data, layout=layout)\npyo.plot(fig, filename='scatter3.html')\nfig.show() ","bba4c1be":"import plotly.offline as pyo\nimport plotly.graph_objs as go\nimport numpy as np\n\nnp.random.seed(56)\nx_values = np.linspace(0, 1, 100) # 100 evenly spaced values\ny_values = np.random.randn(100)   # 100 random values\n\n# Create traces\ntrace0 = go.Scatter(\n    x = x_values,\n    y = y_values+5,\n    mode = 'markers',\n    name = 'markers'\n)\ntrace1 = go.Scatter(\n    x = x_values,\n    y = y_values,\n    mode = 'lines+markers',\n    name = 'lines+markers'\n)\ntrace2 = go.Scatter(\n    x = x_values,\n    y = y_values-5,\n    mode = 'lines',\n    name = 'lines'\n)\ndata = [trace0, trace1, trace2]  # assign traces to data\nlayout = go.Layout(\n    title = 'Line chart showing three different modes'\n)\nfig = go.Figure(data=data,layout=layout)\npyo.plot(fig, filename='line1.html')\nfig.show() ","68b185b5":"import plotly.offline as pyo\nimport plotly.graph_objs as go\nimport numpy as np\n\nnp.random.seed(56)\nx_values = np.linspace(0, 1, 100) # 100 evenly spaced values\ny_values = np.random.randn(100)   # 100 random values\n\n# Create traces\ntrace0 = go.Scatter(\n    x = x_values,\n    y = y_values+5,\n    mode = 'markers',\n    name = 'markers'\n)\ntrace1 = go.Scatter(\n    x = x_values,\n    y = y_values,\n    mode = 'lines+markers',\n    name = 'lines+markers'\n)\ntrace2 = go.Scatter(\n    x = x_values,\n    y = y_values-5,\n    mode = 'lines',\n    name = 'lines'\n)\ndata = [trace0, trace1, trace2]  # assign traces to data\nlayout = go.Layout(\n    title = 'Line chart showing three different modes'\n)\nfig = go.Figure(data=data,layout=layout)\nfig.show() \npyo.plot(fig, filename='line1.html')\n","bcd6d1f2":"df = pd.read_csv(\"..\/input\/population-by-country-2020\/population_by_country_2020.csv\")","2c2cf566":"df.columns\n","eedc18c9":"df.rename(columns={'Country (or dependency)': 'country'}, inplace=True)","2b9e685a":"df.head() ","e445c8ed":"# **This section compares Plotly to matplotlib using the same data to show the interactivity of plotly ****","1b82e2ba":"# Line Charts\nLine charts are little more than scatter plots that have only one data point per x-value, and (optionally) a line connecting the markers. To illustrate this, we\u2019ll take another random sample of data that is evenly distributed along the x-axis.\n","97b3933c":"iT'is the same points as the first scatter , but  the second one includes a title, axis labels, and fixes the hover issue. \nNotice both the data and the layout inside a Figure, and had plotly graph the figure as HTML.v","a8e7426f":"Note that each trace is assigned a name (markers, lines+markers, lines). Names appear in the legend to the upper right (similar to the A B C D names we saw in our first plotly example) and as hover text. ","9212bf6a":"Note that each trace is assigned a name (markers, lines+markers, lines). Names appear in the legend to the upper right (similar to the A B C D names we saw in our first plotly example) and as hover text.","ed0a6a8e":"1. \u25cf\tThere is no interactivity offered here, it is just a static image.\n2. \u25cf\tYou can save this image as a .png file if you want.","1a3db8fe":"So let's start our jouney with interactive plots ! Forget about STATIC PLOTS \ud83d\ude09\u270c\ud83e\udd37\u200d\u2640\ufe0f \n\nFIRST of all we will start by scatter plots. \n\n1. **Scatter plots**  : A basic scatter plot maps a distribution of data points along an x- and y-axis. To illustrate, we\u2019ll take a random sample of 100 coordinate pairs, but we\u2019ll seed NumPy\u2019s random number generator so that everyone receives the same \u201crandom\u201d sample.","0daa2397":"There\u2019s a lot you can do in Plotly to customize the appearance of the graph \ud83d\ude0d\u2764\ud83d\udc96 \nthe next scatter is the same as the second one except I have added some style to the marker : changed the color, size, shape, and added a line around it","86ac5c21":"Line charts are little more than scatter plots that have only one data point per x-value, and (optionally) a line connecting the markers. To illustrate this, we\u2019ll take another random sample of data that is evenly distributed along the x-axis.","c8c5c7e5":"1. \tscatter1.py plots 100 random coordinate pairs. By seeding the random number generator, we can reproduce the same plot each time the script is run. \n2. \tNow is a good time to mention that random number generators are algorithmic and not really random - and should never be used for cybersecurity! This explains why we can set seed values to obtain the same results.\n3. \tYou\u2019ll notice that the plot has no title and no axis labels. To add them we\u2019ll use the graph_objs Layout module to add features to our graph.\n4. You may also notice that when you move the cursor across the graph, information is displayed about points on the graph. However, if more than one point occurs on the same vertical, you\u2019ll see that only one of the points has data displayed! Fortunately, this can be fixed by adding another parameter inside the layout.","a159a741":"Python is great for data exploration and data analysis and it\u2019s all thanks to the support of amazing libraries like numpy, pandas, matplotlib, and many others. During our data exploration and data analysis phase it\u2019s very important to understand the data we\u2019re dealing with, and visual representations of our data can be extremely important..\n"}}