{"cell_type":{"333c7c0a":"code","1ce4b03e":"code","bf8872f3":"code","dd3a5011":"code","5f508938":"code","03d1ed4d":"code","5c2231be":"code","da33f427":"code","9f1bd1e8":"code","4acfd221":"code","d51fc86f":"code","28d37109":"code","faf2b617":"code","0fd50ccd":"code","2024c352":"code","4f6d9336":"code","bbffcf31":"code","e4a8c909":"code","4d8fa1ac":"code","054fc86c":"code","61051276":"code","b6c2e1ae":"code","77c5f55e":"code","f719a7ce":"code","66982023":"code","1fcb5795":"markdown","40b706ec":"markdown","b936920b":"markdown"},"source":{"333c7c0a":"import os\nimport cv2\n\nimport pydicom\nimport pandas as pd\nimport numpy as np \nimport tensorflow as tf \nimport matplotlib.pyplot as plt \n\nfrom tqdm.notebook import tqdm ","1ce4b03e":"train = pd.read_csv('..\/input\/osic-pulmonary-fibrosis-progression\/train.csv') ","bf8872f3":"train.head()","dd3a5011":"train.SmokingStatus.unique()","5f508938":"def get_tab(df):\n    vector = [(df.Age.values[0] - 30) \/ 30] \n    \n    if df.Sex.values[0] == 'Male':\n       vector.append(0)\n    else:\n       vector.append(1)\n    \n    if df.SmokingStatus.values[0] == 'Never smoked':\n        vector.extend([0,0])\n    elif df.SmokingStatus.values[0] == 'Ex-smoker':\n        vector.extend([1,1])\n    elif df.SmokingStatus.values[0] == 'Currently smokes':\n        vector.extend([0,1])\n    else:\n        vector.extend([1,0])\n    return np.array(vector) ","03d1ed4d":"A = {} \nTAB = {} \nP = [] \nfor i, p in tqdm(enumerate(train.Patient.unique())):\n    sub = train.loc[train.Patient == p, :] \n    fvc = sub.FVC.values\n    weeks = sub.Weeks.values\n    if len(weeks) < 7:\n        BAD_ID.append(p)\n        continue\n    c = np.vstack([weeks, np.ones(len(weeks))]).T\n    a, b = np.linalg.lstsq(c, fvc)[0]\n    \n    A[p] = a\n    TAB[p] = get_tab(sub)\n    P.append(p)\nlen(P)","5c2231be":"BAD_ID = ['ID00011637202177653955184', 'ID00052637202186188008618']","da33f427":"def get_img(path):\n    d = pydicom.dcmread(path)\n    return cv2.resize((d.pixel_array - d.RescaleIntercept) \/ (d.RescaleSlope * 1024), (512, 512))","9f1bd1e8":"from tensorflow.keras.utils import Sequence\n\nclass IGenerator(Sequence):\n    BAD_ID = BAD_ID\n    def __init__(self, keys, batch_size=32):\n        self.keys = [k for k in keys if k not in self.BAD_ID]\n        self.batch_size = batch_size\n        \n        self.train_data = {}\n        for p in train.Patient.unique():\n            ldir = os.listdir(f'..\/input\/osic-pulmonary-fibrosis-progression\/train\/{p}\/')\n            numb = [float(i[:-4]) for i in ldir]\n            self.train_data[p] = [i for i in os.listdir(f'..\/input\/osic-pulmonary-fibrosis-progression\/train\/{p}\/') \n                                  if int(i[:-4]) \/ len(ldir) < 0.8 and int(i[:-4]) \/ len(ldir) > 0.15]\n    \n    def __len__(self):\n        return 1000\n    \n    def __getitem__(self, idx):\n        x = []\n        a_vector, tab_vector = [], [] \n        keys = np.random.choice(self.keys, size = self.batch_size)\n        for k in keys:\n            sub = train.loc[train.Patient == p, :]\n            idx = np.random.choice(sub.index, size=int(len(sub) * 0.8))\n            fvc = sub.loc[idx, 'FVC'].values\n            weeks = sub.loc[idx, 'Weeks'].values\n\n            c = np.vstack([weeks, np.ones(len(weeks))]).T\n            a, b = np.linalg.lstsq(c, fvc)[0]\n                \n            i = np.random.choice(self.train_data[k], size=1)[0]\n            img = get_img(f'..\/input\/osic-pulmonary-fibrosis-progression\/train\/{k}\/{i}')\n            mask = cv2.resize(cv2.imread(f'..\/input\/osic-pulmonary-fibrosis-progression-lungs-mask\/mask_clear\/mask_clear\/{k}\/{i[:-4]}.jpg', 0), (512, 512))> 0\n\n            x.append(np.dstack([img, mask]))\n            a_vector.append(a)\n            tab_vector.append(get_tab(sub))\n       \n        x, a_vector, tab_vector = np.array(x), np.array(a_vector), np.array(tab_vector)\n        return [x, tab_vector] , a_vector","4acfd221":"from tensorflow.keras.layers import (\n    Dense, Dropout, Activation, Flatten, Input, BatchNormalization, GlobalAveragePooling2D, Add, Conv2D, AveragePooling2D, \n    LeakyReLU, Concatenate \n)\n\nfrom tensorflow.keras import Model\nfrom tensorflow.keras.optimizers import Nadam\n\ndef get_model(shape=(512, 512, 2)):\n    def res_block(x, n_features):\n        _x = x\n        x = BatchNormalization()(x)\n        x = LeakyReLU(0.)(x)\n    \n        x = Conv2D(n_features, kernel_size=(3, 3), strides=(1, 1), padding='same')(x)\n        x = Add()([_x, x])\n        return x\n    \n    inp = Input(shape=shape)\n    \n    # 512\n    x = Conv2D(16, kernel_size=(3, 3), strides=(1, 1), padding='same')(inp)\n    x = BatchNormalization()(x)\n    x = LeakyReLU(0.)(x)\n    \n    x = Conv2D(16, kernel_size=(3, 3), strides=(1, 1), padding='same')(x)\n    x = BatchNormalization()(x)\n    x = LeakyReLU(0.)(x)\n    \n    x = AveragePooling2D(pool_size=(2, 2), strides=(2, 2))(x)\n    \n    # 256\n    x = Conv2D(32, kernel_size=(3, 3), strides=(1, 1), padding='same')(x)\n    for _ in range(2):\n        x = res_block(x, 32)\n    x = AveragePooling2D(pool_size=(2, 2), strides=(2, 2))(x)\n    \n    # 128\n    x = Conv2D(64, kernel_size=(3, 3), strides=(1, 1), padding='same')(x)\n    for _ in range(2):\n        x = res_block(x, 64)\n    x = AveragePooling2D(pool_size=(2, 2), strides=(2, 2))(x)\n    \n    # 64\n    x = Conv2D(128, kernel_size=(3, 3), strides=(1, 1), padding='same')(x)\n    for _ in range(3):\n        x = res_block(x, 128)\n    x = AveragePooling2D(pool_size=(2, 2), strides=(2, 2))(x)\n    \n    # 32\n    x = Conv2D(128, kernel_size=(3, 3), strides=(1, 1), padding='same')(x)\n    for _ in range(3):\n        x = res_block(x, 128)\n    x = AveragePooling2D(pool_size=(2, 2), strides=(2, 2))(x)    \n    \n    # 16\n    x = Conv2D(64, kernel_size=(3, 3), strides=(1, 1), padding='same')(x)\n    for _ in range(3):\n        x = res_block(x, 64)\n    x = AveragePooling2D(pool_size=(2, 2), strides=(2, 2))(x)\n    \n    # 8\n    x = Conv2D(32, kernel_size=(3, 3), strides=(1, 1), padding='same')(x)\n    for _ in range(3):\n        x = res_block(x, 32)\n        \n    # 16\n    x = GlobalAveragePooling2D()(x)\n    \n    inp2 = Input(shape=(4,))\n    x2 = tf.keras.layers.GaussianNoise(0.2)(inp2)\n    x = Dropout(0.5)(x)\n    x = Concatenate()([x, x2])  \n    x = Dense(1)(x)\n    #x2 = Dense(1)(x)\n    return Model([inp, inp2] , x)","d51fc86f":"model = get_model() \nmodel.summary() ","28d37109":"model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=0.003), loss='mae') ","faf2b617":"from sklearn.model_selection import train_test_split \n\ntr_p, vl_p = train_test_split(P, \n                              shuffle=True, \n                              train_size= 0.8) ","0fd50ccd":"import seaborn as sns\n\nsns.distplot(list(A.values()));","2024c352":"er = tf.keras.callbacks.EarlyStopping(\n    monitor=\"val_loss\",\n    min_delta=1e-3,\n    patience=10,\n    verbose=0,\n    mode=\"auto\",\n    baseline=None,\n    restore_best_weights=True,\n)","4f6d9336":"model.fit_generator(IGenerator(keys=tr_p), \n                    steps_per_epoch = 100,\n                    validation_data=IGenerator(keys=vl_p),\n                    validation_steps = 20, \n                    callbacks = [er], \n                    epochs=30)","bbffcf31":"def score(fvc_true, fvc_pred, sigma):\n    sigma_clip = np.maximum(sigma, 70)\n    delta = np.abs(fvc_true - fvc_pred)\n    delta = np.minimum(delta, 1000)\n    sq2 = np.sqrt(2)\n    metric = (delta \/ sigma_clip)*sq2 + np.log(sigma_clip* sq2)\n    return np.mean(metric)","e4a8c909":"from tqdm.notebook import tqdm\n\nmetric = []\nfor q in tqdm(range(1, 10)):\n    m = []\n    for p in vl_p:\n        x = [] \n        tab = [] \n        \n        if p in ['ID00011637202177653955184', 'ID00052637202186188008618']:\n            continue\n            \n        ldir = os.listdir(f'..\/input\/osic-pulmonary-fibrosis-progression\/train\/{p}\/')\n        for i in ldir:\n            if int(i[:-4]) \/ len(ldir) < 0.8 and int(i[:-4]) \/ len(ldir) > 0.15:\n                img = get_img(f'..\/input\/osic-pulmonary-fibrosis-progression\/train\/{p}\/{i}')\n                mask = cv2.resize(cv2.imread(f'..\/input\/osic-pulmonary-fibrosis-progression-lungs-mask\/mask_clear\/mask_clear\/{p}\/{i[:-4]}.jpg', 0), (512, 512))> 0\n\n                x.append(np.dstack([img, mask]))\n                tab.append(get_tab(train.loc[train.Patient == p, :])) \n        if len(x) < 1:\n            continue\n        tab = np.array(tab) \n    \n        x = np.expand_dims(x, axis=-1) \n        _a = model.predict([x, tab]) \n        a = np.quantile(_a, q \/ 10)\n        \n        percent_true = train.Percent.values[train.Patient == p]\n        fvc_true = train.FVC.values[train.Patient == p]\n        weeks_true = train.Weeks.values[train.Patient == p]\n        \n        fvc = a * (weeks_true - weeks_true[0]) + fvc_true[0]\n        percent = percent_true[0] - a * abs(weeks_true - weeks_true[0])\n        m.append(score(fvc_true, fvc, percent))\n    print(np.mean(m))\n    metric.append(np.mean(m))","4d8fa1ac":"q = (np.argmin(metric) + 1)\/ 10\nq","054fc86c":"sub = pd.read_csv('..\/input\/osic-pulmonary-fibrosis-progression\/sample_submission.csv') \nsub.head() ","61051276":"test = pd.read_csv('..\/input\/osic-pulmonary-fibrosis-progression\/test.csv') \ntest.head()","b6c2e1ae":"A_test, B_test, P_test,W, FVC= {}, {}, {},{},{} \nSTD, WEEK = {}, {} \nfor p in test.Patient.unique():\n    x = [] \n    tab = [] \n    ldir = os.listdir(f'..\/input\/osic-pulmonary-fibrosis-progression\/test\/{p}\/')\n    for i in ldir:\n        if int(i[:-4]) \/ len(ldir) < 0.8 and int(i[:-4]) \/ len(ldir) > 0.15:\n            x.append(get_img(f'..\/input\/osic-pulmonary-fibrosis-progression\/test\/{p}\/{i}')) \n            tab.append(get_tab(test.loc[test.Patient == p, :])) \n    if len(x) <= 1:\n        continue\n    tab = np.array(tab) \n            \n    x = np.expand_dims(x, axis=-1) \n    _a = model.predict([x, tab]) \n    a = np.quantile(_a, q)\n    A_test[p] = a\n    B_test[p] = test.FVC.values[test.Patient == p] - a*test.Weeks.values[test.Patient == p]\n    P_test[p] = test.Percent.values[test.Patient == p] \n    WEEK[p] = test.Weeks.values[test.Patient == p]","77c5f55e":"for k in sub.Patient_Week.values:\n    p, w = k.split('_')\n    w = int(w) \n    \n    fvc = A_test[p] * w + B_test[p]\n    sub.loc[sub.Patient_Week == k, 'FVC'] = fvc\n    sub.loc[sub.Patient_Week == k, 'Confidence'] = (\n        P_test[p] + A_test[p] * (w - WEEK[p]) \n) \n    ","f719a7ce":"sub.head()","66982023":"sub[[\"Patient_Week\",\"FVC\",\"Confidence\"]].to_csv(\"submission.csv\", index=False)","1fcb5795":"## Decay theory\nInput for test:\n   * FVC in n week\n   * Percent in n week \n   * Age\n   * Sex\n   * Smoking status\n   * CT in n week\n   \nResult:\n   * FVC in any week\n   * percent in any week\n   \n$FVC = a.quantile(0.75) * (week - week_{test}) + FVC_{test}$\n\n$Confidence = Percent + a.quantile(0.75) * abs(week - week_{test}) $\n\nSo let's try predict coefficient a. ","40b706ec":"## CNN for coeff prediction","b936920b":"## Predict"}}