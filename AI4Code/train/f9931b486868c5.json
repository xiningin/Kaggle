{"cell_type":{"7dc61206":"code","ae1946bc":"code","11008c44":"code","5e2d597e":"code","dc5459c4":"code","87dee23a":"code","cb3bf5a5":"code","861d2e4a":"code","13f40847":"code","94fd3359":"code","ed21a5a8":"code","85bfbf4d":"code","5c9cc647":"code","93c77131":"code","cba2d666":"code","95ad9305":"markdown","a6452165":"markdown","dd688aa9":"markdown","e997935e":"markdown","4bdb247b":"markdown","0ca4967f":"markdown","1c7de515":"markdown","d27563d2":"markdown","2764dd97":"markdown","66f23c11":"markdown","66e89dba":"markdown"},"source":{"7dc61206":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ae1946bc":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom mpl_toolkits.mplot3d import Axes3D\nsns.set_style('whitegrid')","11008c44":"df=pd.read_csv('\/kaggle\/input\/pokemon\/Pokemon.csv')","5e2d597e":"df.head()","dc5459c4":"df.describe().transpose()","87dee23a":"df.info()","cb3bf5a5":"sns.countplot(df['Legendary'])","861d2e4a":"col=['Type 1', 'Type 2', 'Total', 'HP', 'Attack', 'Defense',\n       'Sp. Atk', 'Sp. Def', 'Speed']\nplt.figure(figsize=(12,6))\nsns.heatmap(df.corr(),annot=True,cmap='coolwarm')","13f40847":"sns.distplot(df['Total'])","94fd3359":"sns.distplot(df['HP'])","ed21a5a8":"sns.lmplot('Attack','Total',data=df,markers='.')","85bfbf4d":"sns.jointplot(df['Attack'],df['Defense'],kind='hex')","5c9cc647":"sns.lmplot('Speed','Total',data=df,markers='.')","93c77131":"plt.figure(figsize=(12,6))\nsns.countplot(df['Type 1'])","cba2d666":"plt.figure(figsize=(12,6))\nsns.countplot(df['Type 2'])","95ad9305":"# Columns\n\n\n* #: ID for each pokemon\n* Name: Name of each pokemon\n* Type 1: Each pokemon has a type, this determines weakness\/resistance to attacks\n* Type 2: Some pokemon are dual type and have 2\n* Total: sum of all stats that come after this, a general guide to how strong a pokemon is\n* HP: hit points, or health, defines how much damage a pokemon can withstand before fainting\n* Attack: the base modifier for normal attacks (eg. Scratch, Punch)\n* Defense: the base damage resistance against normal attacks\n* SP Atk: special attack, the base modifier for special attacks (e.g. fire blast, bubble beam)\n* SP Def: the base damage resistance against special attacks\n* Speed: determines which pokemon attacks first each round\n","a6452165":"## Heatmap","dd688aa9":"## Do we see any linearity between Speed and Total?","e997935e":"## Analyzing distributions","4bdb247b":"## Let's count the number of legendary Pokemons","0ca4967f":"## Do we see any linearity between Attack and Total?","1c7de515":"### Let's import the data","d27563d2":"# About\nThis data set includes 721 Pokemon, including their number, name, first and second type, and basic stats: HP, Attack, Defense, Special Attack, Special Defense, and Speed. It has been of great use when teaching statistics to kids. With certain types you can also give a geeky introduction to machine learning.\n\n","2764dd97":"# Like my work?\n\n#### Do upvote and leave a comment. Also checkout my other notebooks","66f23c11":"## Let's check the types","66e89dba":"There are null values present in Type 2 column"}}