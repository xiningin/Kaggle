{"cell_type":{"145ab6af":"code","5fdf9c09":"code","d72a1e58":"code","000fbfc0":"code","989aabf5":"code","95b28b0a":"code","262910a5":"code","d7175549":"code","89e62713":"code","e8498016":"code","1918e2b4":"code","56f2deb4":"code","70428c0c":"code","4c01b501":"code","167650cf":"code","d5bdd62e":"markdown","b163dbd8":"markdown","782fd1f3":"markdown","f8dcb106":"markdown","6ad632d7":"markdown","403bb565":"markdown","bf01f5c4":"markdown","00905f78":"markdown","e186cceb":"markdown"},"source":{"145ab6af":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5fdf9c09":"train = pd.read_csv('\/kaggle\/input\/GiveMeSomeCredit\/cs-training.csv',index_col=0)\ntest = pd.read_csv('\/kaggle\/input\/GiveMeSomeCredit\/cs-test.csv',index_col=0)\nsample = pd.read_csv('\/kaggle\/input\/GiveMeSomeCredit\/sampleEntry.csv')\n\ntrain.shape, test.shape, sample.shape","d72a1e58":"train_default_dict = {} \nfor attr in ['MonthlyIncome', 'NumberOfDependents']:\n    print(attr, end='\\t')\n    median, mean, mode = train[attr].median(), train[attr].mean(), train[attr].mode()\n    mode = mode.values\n    if len(mode) == 1:\n        mode = mode[0]\n    train_default_dict[attr] = [median, mean, mode]\n    print(median, mean, mode)\ntrain_default_dict\n","000fbfc0":"test_default_dict = {} \nfor attr in ['MonthlyIncome', 'NumberOfDependents']:\n    print(attr, end='\\t')\n    median, mean, mode = test[attr].median(), test[attr].mean(), test[attr].mode()\n    mode = mode.values\n    if len(mode) == 1:\n        mode = mode[0]\n    test_default_dict[attr] = [median, mean, mode]\n    print(median, mean, mode)\ntest_default_dict\n","989aabf5":"train.MonthlyIncome.fillna(train_default_dict['MonthlyIncome'][0], inplace=True)\ntest.MonthlyIncome.fillna(train_default_dict['MonthlyIncome'][0], inplace=True)\ntrain.NumberOfDependents.fillna(test_default_dict['NumberOfDependents'][1], inplace=True)\ntest.NumberOfDependents.fillna(test_default_dict['NumberOfDependents'][1], inplace=True)\n\ntrain.isnull().sum(), '*'*50, test.isnull().sum()\n","95b28b0a":"X_train = train.iloc[:,1:].values\ny_train = train.iloc[:,0].values\nX_test = test.iloc[:,1:].values\nX_train.shape, y_train.shape, X_test.shape","262910a5":"from sklearn import preprocessing\n\ntrain_scaler = preprocessing.StandardScaler().fit(X_train)\nprint( train_scaler.mean_ , '\\n'+'-'*50+'\\n', train_scaler.scale_)\nprint('='*50)\ntest_scaler = preprocessing.StandardScaler().fit(X_test)\nprint( test_scaler.mean_ , '\\n'+'-'*50+'\\n', test_scaler.scale_)\n","d7175549":"X_train_scaled = train_scaler.transform(X_train)\nX_test_scaled = test_scaler.transform(X_test)\n\nX_train_scaled.mean(axis=0), X_train_scaled.std(axis=0),   X_test_scaled.mean(axis=0), X_test_scaled.std(axis=0)\n","89e62713":"from sklearn.model_selection import train_test_split\n\nX_learn, X_valid, y_learn, y_valid = train_test_split(X_train_scaled, y_train, random_state=0)\nX_learn.shape, X_valid.shape, y_learn.shape, y_valid.shape","e8498016":"#\u4f7f\u7528roc_auc \u4f5c\u4e3a metric\nfrom sklearn.metrics import roc_auc_score","1918e2b4":"from sklearn.ensemble import StackingClassifier\nimport lightgbm as lgb\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\n\nestimators = [\n    ('lgb', lgb.LGBMClassifier(n_estimators=54)),\n    ('rfc', RandomForestClassifier(n_estimators=200)),\n    ('mlp', MLPClassifier(hidden_layer_sizes=2)),\n    ('knn', KNeighborsClassifier(n_neighbors=320, weights='distance', algorithm='auto'))\n]","56f2deb4":"from sklearn.model_selection import GridSearchCV\n\nbest_l, best_pt, maxauc = 0, 'none', 0\nfor hid_lay_siz in [1,2,3,4,5]:\n    for pass_throu in [True, False]:\n        reg = StackingClassifier(\n            estimators=estimators,\n            final_estimator=MLPClassifier(\n                hidden_layer_sizes=hid_lay_siz,\n                random_state=0\n            ),\n            passthrough=pass_throu,\n            verbose=3\n        )\n\n        reg.fit(X_learn, y_learn)\n        y_pred = reg.predict_proba(X_valid)[:,1]\n        score = roc_auc_score(y_valid, y_pred)\n        print(score)\n        \n        if score > maxauc:\n            best_l, best_pt, maxauc = hid_lay_siz, pass_throu, score\nprint()\nprint(best_l, best_pt, maxauc)\n\n","70428c0c":"reg = StackingClassifier(\n    estimators=estimators,\n    final_estimator=MLPClassifier(\n        hidden_layer_sizes=best_l,\n        random_state=0\n    ),\n    passthrough=best_pt,\n    verbose=3\n)\n\n\nreg.fit(X_train, y_train)\ny_pred = reg.predict_proba(X_test)[:,1]\n","4c01b501":"sample = pd.read_csv('..\/input\/GiveMeSomeCredit\/sampleEntry.csv')\nsample","167650cf":"sample['Probability'] = y_pred\nsample.to_csv('.\/submit.csv',index=False)\nreload = pd.read_csv('.\/submit.csv')\nreload\n","d5bdd62e":"# 3\uff0c \u5206\u79bbX_train, y_train, X_test","b163dbd8":"# 1\uff0c\u8bfb\u5165\u6570\u636e","782fd1f3":"# 4, \u5206\u522b\u5f52\u4e00\u5316X_train, X_test ","f8dcb106":"## 5.2 \u5bf9stackClf\u8c03\u53c2","6ad632d7":"# 5\uff0c\u6570\u636e\u5185\u5bb9\u4e0d\u518d\u6539\u52a8\uff0c\u6a21\u578b\u5806\u53e0\n\n* \u9996\u5148\u4eceX_train, y_train\u5212\u5206\u51fa\u8bad\u7ec3\u96c6X_learn, y_learn; \u9a8c\u8bc1\u96c6 X_valid, y_valid\n","403bb565":"## 5.1 \u8bd5\u6c34","bf01f5c4":"# 2\uff0c \u586b\u5145\u7f3a\u5931\u503c","00905f78":"* \u53c2\u8003\u6a21\u578b\u5806\u53e0\n* \u53c2\u6570\u6765\u81ea\u4e8e\u53e6\u4e00\u4e2anotebook","e186cceb":"# 6 \u751f\u6210\u63d0\u4ea4\u6587\u4ef6"}}