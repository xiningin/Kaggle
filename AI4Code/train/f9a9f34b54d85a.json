{"cell_type":{"b6382f78":"code","44a56438":"code","c0d2b299":"code","c61d1caf":"code","1d4f4bb5":"code","fce74583":"code","a6203fa7":"code","6872f5e4":"code","ec504dbb":"code","a1f45813":"code","fb194c3b":"code","09b77681":"code","b94f4df8":"code","3ca450ae":"code","399f65d2":"markdown","40222a48":"markdown","5046f887":"markdown","6bb8b7d1":"markdown","14974f7d":"markdown","ae4ea77e":"markdown","337ce904":"markdown","0beeb780":"markdown"},"source":{"b6382f78":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","44a56438":"train = pd.read_csv('..\/input\/train.csv')","c0d2b299":"#\u3000\u30c7\u30fc\u30bf\u306e\u4e2d\u8eab\u3092\u78ba\u8a8d\ntrain.head(5)","c61d1caf":"train.describe()","1d4f4bb5":"##\u3000\u7537\u5973\u306e\u60c5\u5831\u3092\uff10\uff0c\uff11\u306b\u7f6e\u304d\u63db\u3048\u308b\ntrain['fin_Sex'] = train['Sex'].map(lambda x: 1 if x=='female'else 0)","fce74583":"train.head(5)","a6203fa7":"# \u8aac\u660e\u5909\u6570\u3068\u76ee\u7684\u5909\u6570\u3092\u9078\u3076\n## \u3053\u3053\u3067\u306f\u6570\u5024\u306b\u306a\u3063\u3066\u3044\u308b\u5217\u3060\u3051\u3092\u4f7f\u3046\nX = train[['Pclass','Age','SibSp','Parch','Fare','fin_Sex']]\ny = train['Survived']\n\n#\u8a13\u7df4\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5206\u3051\u308b\n##\u3000\u3053\u3053\u3067\u306f\u534a\u5206\u305a\u3064\u306b\u5206\u3051\u308b\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test =train_test_split(X, y, test_size=0.5, random_state=0)","6872f5e4":"# LightGBM\u3092\u4f7f\u3063\u3066\u5b66\u7fd2\n# https:\/\/lightgbm.readthedocs.io\/en\/latest\/Python-Intro.html\nimport lightgbm\ntrain_data = lightgbm.Dataset(X_train, y_train)\neval_data = lightgbm.Dataset(X_test, y_test, reference=train_data)\nparams = {'ovjective': 'binary', 'metric': 'auc'}\nmodel = lightgbm.train(params, train_data, valid_sets=eval_data)\nmodel.save_model('model.txt')","ec504dbb":"#\u3000\u4e88\u6e2c\u3059\u308b\ny_pred = model.predict(X_test, numiteration=model.best_iteration)\nbinary_y_pred = np.where(y_pred > 0.5, 1, 0)","a1f45813":"# \u5236\u5ea6\u3092\u8a08\u7b97\u3059\u308b\naccuracy = sum(y_test == binary_y_pred) \/ len(y_test)\nprint(accuracy)","fb194c3b":"# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u30c8\u30ec\u30a4\u30f3\u30c7\u30fc\u30bf\u3068\u540c\u3058\u5f62\u306b\ntest = pd.read_csv('..\/input\/test.csv')\ntest['fin_Sex'] = test['Sex'].map(lambda x: 1 if x=='female'else 0)\ntest['fin_Embarked'] = test['Embarked'].map(lambda x: 1 if x=='Q'else 2 if x=='S' else 0)\ntest_id = test[['PassengerId']]\ntest = test[['Pclass','Age','SibSp','Parch','Fare','fin_Sex']]\nsubmission_pred = model.predict(test, numiteration=model.best_iteration)\nsubmission_pred = np.where(submission_pred > 0.5, 1, 0)","09b77681":"# \u63d0\u51fa\u30c7\u30fc\u30bf\u306e\u5f62\u5f0f\u3092\u78ba\u8a8d\nsubmission = pd.read_csv('..\/input\/gender_submission.csv')\nprint(submission.head(5), '\\n', submission.shape)","b94f4df8":"# \u63d0\u51fa\u5f62\u5f0f\u306b\u6574\u3048\u308b\nsubmission = test_id\nsubmission['Survived'] = submission_pred\nprint(submission.head(5), '\\n', submission.shape)","3ca450ae":"# \u63d0\u51fa\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u308b\nfrom datetime import datetime\nfrom pytz import timezone\ndate_now = datetime.now(timezone('Asia\/Tokyo')).strftime(\"%Y%m%d%H%M\")\nsubmission.to_csv(date_now + 'submission_file.csv', index =False)","399f65d2":"## 5. \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3067\u4e88\u6e2c\u3092\u884c\u3046","40222a48":"## 1. \u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080","5046f887":"## 0. \u5fc5\u8981\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u8aad\u307f\u8fbc\u3080","6bb8b7d1":"## 6. \u63d0\u51fa\u3059\u308b","14974f7d":"## 2. \u7279\u5fb4\u91cf\u30a8\u30f3\u30b8\u30cb\u30a2\u30ea\u30f3\u30b0","ae4ea77e":"## 4. \u691c\u8a3c\u3059\u308b","337ce904":"## 3. \u5b66\u7fd2\u3055\u305b\u308b\uff08\u30e2\u30c7\u30eb\u3092\u4f5c\u308b\uff09","0beeb780":"[\u30c7\u30fc\u30bf\u306e\u8aac\u660e](https:\/\/www.kaggle.com\/c\/titanic\/data)\u3092\u8aad\u3080  \n ### Data Dictionary  \n \n |Variable |\tDefinition |Key|\n |------------|------------------|-----|\n|survival  |Survival\t |0 = No, 1 = Yes|\n|pclass\t   |Ticket class |\t1 = 1st, 2 = 2nd, 3 = 3rd|\n|sex\t|Sex|\t\n|Age\t|Age in years|\t\n|sibsp\t|# of siblings \/ spouses aboard the Titanic\t\n|parch\t|# of parents \/ children aboard the Titanic\t\n|ticket\t|Ticket number\t\n|fare\t|Passenger fare\t\n|cabin\t|Cabin number\t\n|embarked\t|Port of Embarkation\t|C = Cherbourg, Q = Queenstown, S = Southampton  |\n \n### Variable Notes   \n**pclass**: A proxy for socio-economic status (SES)  \n1st = Upper  \n2nd = Middle  \n3rd = Lower  \n\n**age**: Age is fractional if less than 1. If the age is estimated, is it in the form of xx.5  \n\n**sibsp**: The dataset defines family relations in this way...  \nSibling = brother, sister, stepbrother, stepsister  \nSpouse = husband, wife (mistresses and fianc\u00e9s were ignored)  \n\n**parch**: The dataset defines family relations in this way...  \nParent = mother, father  \nChild = daughter, son, stepdaughter, stepson  \nSome children travelled only with a nanny, therefore parch=0 for them. "}}