{"cell_type":{"4574d089":"code","20e3dcfb":"code","06db3fcc":"code","a8f5dc34":"code","9322fa27":"code","0f92c4e8":"code","da9dfcfb":"code","e923667a":"code","d7dce9bf":"code","b5e5697e":"code","9e1fda53":"code","3feb4589":"code","b4af2996":"code","ef55b929":"code","edd9e0d2":"code","eccaecb5":"code","26d6b6f3":"code","83c32b34":"code","de6cb7bd":"code","70f8ece2":"code","3a774695":"code","c699f3b2":"code","b2eed189":"code","00f94941":"code","56219c70":"code","09e6eb7c":"code","9643a015":"code","18750085":"code","78fdb0fa":"code","d1cbb21d":"code","4f03d484":"code","42d7c0c5":"code","9c8ae317":"code","e532d5fe":"code","f0f036e3":"code","05d0914e":"code","92ac5363":"code","f674b2cb":"code","3a308c6d":"code","65bac01e":"code","36b17977":"code","5e158676":"code","e5b1f38e":"code","dc2ac3c2":"code","4935ced2":"code","65eb1e2e":"code","669bf665":"code","4b1a6b47":"code","5aa89ef6":"code","1340b06f":"code","5dcc1f62":"code","a4b78d28":"code","0867214f":"code","89fe1794":"code","3a4577d7":"code","058bfaf4":"code","b1406efe":"code","f38678e7":"code","c5b06909":"code","14316520":"code","6de20e1b":"code","3a5d0b3d":"code","15bcb277":"code","7023824c":"code","3e82563e":"code","26e50517":"code","09d9ac6e":"code","268a002c":"code","34c93d07":"code","91981934":"code","85918a05":"code","f0eadbf6":"code","cdab815c":"code","a8ee8bca":"code","ed1af5b8":"code","dfb31e78":"code","b06bc6df":"code","ebdc194f":"code","3f68b3fb":"code","3fcac4a1":"code","14a6a658":"code","4dc953cf":"code","db13e070":"code","d1481000":"code","0fbc5784":"code","f538a1a8":"code","4b0d469c":"code","d8d959f0":"code","2458c9c1":"code","e6343e3e":"code","5051c03c":"code","f8040412":"code","09299889":"code","6d548786":"code","bc15f9a0":"code","07ce4ee6":"code","32bf05ea":"code","8ab23ea7":"code","ec39aadb":"code","5aa0a4eb":"code","02961812":"code","57c9e41c":"code","1b06e3f2":"code","701c69c7":"code","a7c50703":"code","c4de252b":"markdown","ed41a75e":"markdown","e5a698b2":"markdown","d2006f12":"markdown","bca6aea3":"markdown","3e73e85e":"markdown","acb586fc":"markdown","ecadb10c":"markdown","ff91e8dd":"markdown","5b384d43":"markdown","38e97e25":"markdown","87b7626c":"markdown","6ddb91b2":"markdown","93f4d9d2":"markdown","1ca6d930":"markdown","cd14342a":"markdown","c9d0bcfc":"markdown","fb104ccd":"markdown","517da3ad":"markdown","a76a9776":"markdown","2019e154":"markdown","30fe1004":"markdown","71f9e9c8":"markdown","14a0065c":"markdown","df4b100a":"markdown","2de11e9d":"markdown","b292fecc":"markdown","a73c20a9":"markdown","738cb1f0":"markdown","376ddafa":"markdown","f59e507b":"markdown","52c57523":"markdown","c0f2ee26":"markdown","26303fd5":"markdown","824ed84e":"markdown","e8cb7dbc":"markdown","5af041fb":"markdown","8b87b4f6":"markdown","23a7a2dd":"markdown","74af8f32":"markdown","e5aaac67":"markdown","d0fb857f":"markdown","ee0aee7b":"markdown","e4127d76":"markdown","269ba378":"markdown","6d528f81":"markdown","b3733efa":"markdown","d4095fc6":"markdown","5eae558d":"markdown","2ee176b9":"markdown","60fbe652":"markdown","b2f57519":"markdown","bfc9f278":"markdown","1fb4a6e9":"markdown","c62b486f":"markdown","05082c19":"markdown","88c68e6d":"markdown","3c89b068":"markdown","fcd218ea":"markdown","237bde90":"markdown","355d2346":"markdown","27859ff4":"markdown","ce6b6b12":"markdown","279b4929":"markdown","8c157d7e":"markdown","2532eb21":"markdown","711ab997":"markdown","4ba30c2b":"markdown","4b2f556b":"markdown","11c178e1":"markdown","682735bc":"markdown"},"source":{"4574d089":"# Import Dependencies\n%matplotlib inline\n\n# Start Python Imports\nimport math, time, random, datetime\n\n# Data Manipulation\nimport numpy as np\nimport pandas as pd\n\n# Visualization \nimport matplotlib.pyplot as plt\nimport missingno\nimport seaborn as sns\nplt.style.use('seaborn-whitegrid')\n\n# Preprocessing\nfrom sklearn.preprocessing import OneHotEncoder, LabelEncoder, label_binarize\n\n# Machine learning\nimport catboost\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import model_selection, tree, preprocessing, metrics, linear_model\nfrom sklearn.svm import LinearSVC\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import LinearRegression, LogisticRegression, SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom catboost import CatBoostClassifier, Pool, cv\n\n# Let's be rebels and ignore warnings for now\nimport warnings\nwarnings.filterwarnings('ignore')","20e3dcfb":"# Import train & test data \ntrain = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')\ngender_submission = pd.read_csv('..\/input\/titanic\/gender_submission.csv') # example of what a submission should look like","06db3fcc":"# View the training data\ntrain.head(15)","a8f5dc34":"train.Age.plot.hist()","9322fa27":"# View the test data (same columns as the training data)\ntest.head() # head = view first 5 lines","0f92c4e8":"# View the example submisison dataframe\ngender_submission.head()","da9dfcfb":"train.describe()","e923667a":"# Plot graphic of missing values\nmissingno.matrix(train, figsize = (30,10))","d7dce9bf":"# Alternatively, you can see the number of missing values like this\ntrain.isnull().sum()","b5e5697e":"df_bin = pd.DataFrame() # for discretised continuous variables\ndf_con = pd.DataFrame() # for continuous variables","9e1fda53":"# Different data types in the dataset\ntrain.dtypes","3feb4589":"train.head()","b4af2996":"# How many people survived?\nfig = plt.figure(figsize=(20,1))\nsns.countplot(y='Survived', data=train);\nprint(train.Survived.value_counts())","ef55b929":"# Let's add this to our subset dataframes\ndf_bin['Survived'] = train['Survived']\ndf_con['Survived'] = train['Survived']","edd9e0d2":"df_bin.head()","eccaecb5":"df_con.head()","26d6b6f3":"sns.distplot(train.Pclass)","83c32b34":"# How many missing variables does Pclass have?\ntrain.Pclass.isnull().sum()","de6cb7bd":"df_bin['Pclass'] = train['Pclass']\ndf_con['Pclass'] = train['Pclass']","70f8ece2":"# How many different names are there?\ntrain.Name.value_counts()","3a774695":"# Let's view the distribution of Sex\nplt.figure(figsize=(20, 5))\nsns.countplot(y=\"Sex\", data=train);","c699f3b2":"# Are there any missing values in the Sex column?\ntrain.Sex.isnull().sum()","b2eed189":"train.Sex.head()","00f94941":"# add Sex to the subset dataframes\ndf_bin['Sex'] = train['Sex']\ndf_bin['Sex'] = np.where(df_bin['Sex'] == 'female', 1, 0) # change sex to 0 for male and 1 for female\n\ndf_con['Sex'] = train['Sex']","56219c70":"# How does the Sex variable look compared to Survival?\n# We can see this because they're both binarys.\nfig = plt.figure(figsize=(10, 10))\nsns.distplot(df_bin.loc[df_bin['Survived'] == 1]['Sex'], kde_kws={'bw':1.5, 'label': 'Survived'});\nsns.distplot(df_bin.loc[df_bin['Survived'] == 0]['Sex'], kde_kws={'bw':1.5, 'label': 'Did not survive'});","09e6eb7c":"# How many missing values does age have?\ntrain.Age.isnull().sum()","9643a015":"# Once the Age values have been fixed up, we can add them to our sub dataframes.\n# df_bin['Age'] = pd.cut(train['Age'], 10) # bucketed\/binned into different categories\n# df_con['Age'] = train['Age'] # non-bucketed","18750085":"def plot_count_dist(data, bin_df, label_column, target_column, figsize=(20, 5), use_bin_df=False):\n    \"\"\"\n    Function to plot counts and distributions of a label variable and \n    target variable side by side.\n    ::param_data:: = target dataframe\n    ::param_bin_df:: = binned dataframe for countplot\n    ::param_label_column:: = binary labelled column\n    ::param_target_column:: = column you want to view counts and distributions\n    ::param_figsize:: = size of figure (width, height)\n    ::param_use_bin_df:: = whether or not to use the bin_df, default False\n    \"\"\"\n    if use_bin_df: \n        fig = plt.figure(figsize=figsize)\n        plt.subplot(1, 2, 1)\n        sns.countplot(y=target_column, data=bin_df);\n        plt.subplot(1, 2, 2)\n        sns.distplot(data.loc[data[label_column] == 1][target_column], \n                     kde_kws={\"label\": \"Survived\"});\n        sns.distplot(data.loc[data[label_column] == 0][target_column], \n                     kde_kws={\"label\": \"Did not survive\"});\n    else:\n        fig = plt.figure(figsize=figsize)\n        plt.subplot(1, 2, 1)\n        sns.countplot(y=target_column, data=data);\n        plt.subplot(1, 2, 2)\n        sns.distplot(data.loc[data[label_column] == 1][target_column], \n                     kde_kws={\"label\": \"Survived\"});\n        sns.distplot(data.loc[data[label_column] == 0][target_column], \n                     kde_kws={\"label\": \"Did not survive\"});","78fdb0fa":"# How many missing values does SibSp have?\ntrain.SibSp.isnull().sum()","d1cbb21d":"# What values are there?\ntrain.SibSp.value_counts()","4f03d484":"# Add SibSp to subset dataframes\ndf_bin['SibSp'] = train['SibSp']\ndf_con['SibSp'] = train['SibSp']","42d7c0c5":"# Visualise the counts of SibSp and the distribution of the values\n# against Survived\nplot_count_dist(train, \n                bin_df=df_bin, \n                label_column='Survived', \n                target_column='SibSp', \n                figsize=(20, 10))","9c8ae317":"# How many missing values does Parch have?\ntrain.Parch.isnull().sum()","e532d5fe":"# What values are there?\ntrain.Parch.value_counts()","f0f036e3":"# Add Parch to subset dataframes\ndf_bin['Parch'] = train['Parch']\ndf_con['Parch'] = train['Parch']","05d0914e":"# Visualise the counts of Parch and the distribution of the values\n# against Survived\nplot_count_dist(train, \n                bin_df=df_bin,\n                label_column='Survived', \n                target_column='Parch', \n                figsize=(20, 12))","92ac5363":"train.head()","f674b2cb":"df_con.head()","3a308c6d":"# How many missing values does Ticket have?\ntrain.Ticket.isnull().sum()","65bac01e":"# How many kinds of ticket are there?\nsns.countplot(y=\"Ticket\", data=train);","36b17977":"# How many kinds of ticket are there?\ntrain.Ticket.value_counts()","5e158676":"# How many unique kinds of Ticket are there?\nprint(\"There are {} unique Ticket values.\".format(len(train.Ticket.unique())))","e5b1f38e":"# How many missing values does Fare have?\ntrain.Fare.isnull().sum()","dc2ac3c2":"# How many different values of Fare are there?\nsns.countplot(y=\"Fare\", data=train);","4935ced2":"# What kind of variable is Fare?\ntrain.Fare.dtype","65eb1e2e":"# How many unique kinds of Fare are there?\nprint(\"There are {} unique Fare values.\".format(len(train.Fare.unique())))","669bf665":"# Add Fare to sub dataframes\ndf_con['Fare'] = train['Fare'] \ndf_bin['Fare'] = pd.cut(train['Fare'], bins=5) # discretised ","4b1a6b47":"# What do our Fare bins look like?\ndf_bin.Fare.value_counts()","5aa89ef6":"# Visualise the Fare bin counts as well as the Fare distribution versus Survived.\nplot_count_dist(data=train,\n                bin_df=df_bin,\n                label_column='Survived', \n                target_column='Fare', \n                figsize=(20,10), \n                use_bin_df=True)","1340b06f":"# How many missing values does Cabin have?\ntrain.Cabin.isnull().sum()","5dcc1f62":"train.head()","a4b78d28":"# What do the Cabin values look like?\ntrain.Cabin.value_counts()","0867214f":"# How many missing values does Embarked have?\ntrain.Embarked.isnull().sum()","89fe1794":"# What kind of values are in Embarked?\ntrain.Embarked.value_counts()","3a4577d7":"# What do the counts look like?\nsns.countplot(y='Embarked', data=train);","058bfaf4":"# Add Embarked to sub dataframes\ndf_bin['Embarked'] = train['Embarked']\ndf_con['Embarked'] = train['Embarked']","b1406efe":"# Remove Embarked rows which are missing values\nprint(len(df_con))\ndf_con = df_con.dropna(subset=['Embarked'])\ndf_bin = df_bin.dropna(subset=['Embarked'])\nprint(len(df_con))","f38678e7":"df_bin.head()","c5b06909":"# One-hot encode binned variables\none_hot_cols = df_bin.columns.tolist()\none_hot_cols.remove('Survived')\ndf_bin_enc = pd.get_dummies(df_bin, columns=one_hot_cols)\n\ndf_bin_enc.head()","14316520":"df_con.head(10)","6de20e1b":"# One hot encode the categorical columns\ndf_embarked_one_hot = pd.get_dummies(df_con['Embarked'], \n                                     prefix='embarked')\n\ndf_sex_one_hot = pd.get_dummies(df_con['Sex'], \n                                prefix='sex')\n\ndf_plcass_one_hot = pd.get_dummies(df_con['Pclass'], \n                                   prefix='pclass')","3a5d0b3d":"# Combine the one hot encoded columns with df_con_enc\ndf_con_enc = pd.concat([df_con, \n                        df_embarked_one_hot, \n                        df_sex_one_hot, \n                        df_plcass_one_hot], axis=1)\n\n# Drop the original categorical columns (because now they've been one hot encoded)\ndf_con_enc = df_con_enc.drop(['Pclass', 'Sex', 'Embarked'], axis=1)","15bcb277":"# Let's look at df_con_enc\ndf_con_enc.head(20)","7023824c":"# Seclect the dataframe we want to use first for predictions\nselected_df = df_con_enc","3e82563e":"selected_df.head()","26e50517":"# Split the dataframe into data and labels\nX_train = selected_df.drop('Survived', axis=1) # data\ny_train = selected_df.Survived # labels","09d9ac6e":"# Shape of the data (without labels)\nX_train.shape","268a002c":"X_train.head()","34c93d07":"# Shape of the labels\ny_train.shape","91981934":"# Function that runs the requested algorithm and returns the accuracy metrics\ndef fit_ml_algo(algo, X_train, y_train, cv):\n    \n    # One Pass\n    model = algo.fit(X_train, y_train)\n    acc = round(model.score(X_train, y_train) * 100, 2)\n    \n    # Cross Validation \n    train_pred = model_selection.cross_val_predict(algo, \n                                                  X_train, \n                                                  y_train, \n                                                  cv=cv, \n                                                  n_jobs = -1)\n    # Cross-validation accuracy metric\n    acc_cv = round(metrics.accuracy_score(y_train, train_pred) * 100, 2)\n    \n    return train_pred, acc, acc_cv","85918a05":"# Logistic Regression\nstart_time = time.time()\ntrain_pred_log, acc_log, acc_cv_log = fit_ml_algo(LogisticRegression(), \n                                                               X_train, \n                                                               y_train, \n                                                                    10)\nlog_time = (time.time() - start_time)\nprint(\"Accuracy: %s\" % acc_log)\nprint(\"Accuracy CV 10-Fold: %s\" % acc_cv_log)\nprint(\"Running Time: %s\" % datetime.timedelta(seconds=log_time))","f0eadbf6":"# k-Nearest Neighbours\nstart_time = time.time()\ntrain_pred_knn, acc_knn, acc_cv_knn = fit_ml_algo(KNeighborsClassifier(), \n                                                  X_train, \n                                                  y_train, \n                                                  10)\nknn_time = (time.time() - start_time)\nprint(\"Accuracy: %s\" % acc_knn)\nprint(\"Accuracy CV 10-Fold: %s\" % acc_cv_knn)\nprint(\"Running Time: %s\" % datetime.timedelta(seconds=knn_time))","cdab815c":"# Gaussian Naive Bayes\nstart_time = time.time()\ntrain_pred_gaussian, acc_gaussian, acc_cv_gaussian = fit_ml_algo(GaussianNB(), \n                                                                      X_train, \n                                                                      y_train, \n                                                                           10)\ngaussian_time = (time.time() - start_time)\nprint(\"Accuracy: %s\" % acc_gaussian)\nprint(\"Accuracy CV 10-Fold: %s\" % acc_cv_gaussian)\nprint(\"Running Time: %s\" % datetime.timedelta(seconds=gaussian_time))","a8ee8bca":"# Linear SVC\nstart_time = time.time()\ntrain_pred_svc, acc_linear_svc, acc_cv_linear_svc = fit_ml_algo(LinearSVC(),\n                                                                X_train, \n                                                                y_train, \n                                                                10)\nlinear_svc_time = (time.time() - start_time)\nprint(\"Accuracy: %s\" % acc_linear_svc)\nprint(\"Accuracy CV 10-Fold: %s\" % acc_cv_linear_svc)\nprint(\"Running Time: %s\" % datetime.timedelta(seconds=linear_svc_time))","ed1af5b8":"# Stochastic Gradient Descent\nstart_time = time.time()\ntrain_pred_sgd, acc_sgd, acc_cv_sgd = fit_ml_algo(SGDClassifier(), \n                                                  X_train, \n                                                  y_train,\n                                                  10)\nsgd_time = (time.time() - start_time)\nprint(\"Accuracy: %s\" % acc_sgd)\nprint(\"Accuracy CV 10-Fold: %s\" % acc_cv_sgd)\nprint(\"Running Time: %s\" % datetime.timedelta(seconds=sgd_time))","dfb31e78":"# Decision Tree Classifier\nstart_time = time.time()\ntrain_pred_dt, acc_dt, acc_cv_dt = fit_ml_algo(DecisionTreeClassifier(), \n                                                                X_train, \n                                                                y_train,\n                                                                10)\ndt_time = (time.time() - start_time)\nprint(\"Accuracy: %s\" % acc_dt)\nprint(\"Accuracy CV 10-Fold: %s\" % acc_cv_dt)\nprint(\"Running Time: %s\" % datetime.timedelta(seconds=dt_time))","b06bc6df":"# Gradient Boosting Trees\nstart_time = time.time()\ntrain_pred_gbt, acc_gbt, acc_cv_gbt = fit_ml_algo(GradientBoostingClassifier(), \n                                                                       X_train, \n                                                                       y_train,\n                                                                       10)\ngbt_time = (time.time() - start_time)\nprint(\"Accuracy: %s\" % acc_gbt)\nprint(\"Accuracy CV 10-Fold: %s\" % acc_cv_gbt)\nprint(\"Running Time: %s\" % datetime.timedelta(seconds=gbt_time))","ebdc194f":"# View the data for the CatBoost model\nX_train.head()","3f68b3fb":"# View the labels for the CatBoost model\ny_train.head()","3fcac4a1":"# Define the categorical features for the CatBoost model\ncat_features = np.where(X_train.dtypes != np.float)[0]\ncat_features","14a6a658":"# Use the CatBoost Pool() function to pool together the training data and categorical feature labels\ntrain_pool = Pool(X_train, \n                  y_train,\n                  cat_features)","4dc953cf":"y_train.head()","db13e070":"# CatBoost model definition\ncatboost_model = CatBoostClassifier(iterations=1000,\n                                    custom_loss=['Accuracy'],\n                                    loss_function='Logloss')\n\n# Fit CatBoost model\ncatboost_model.fit(train_pool,\n                   plot=True)\n\n# CatBoost accuracy\nacc_catboost = round(catboost_model.score(X_train, y_train) * 100, 2)","d1481000":"# How long will this take?\nstart_time = time.time()\n\n# Set params for cross-validation as same as initial model\ncv_params = catboost_model.get_params()\n\n# Run the cross-validation for 10-folds (same as the other models)\ncv_data = cv(train_pool,\n             cv_params,\n             fold_count=10,\n             plot=True)\n\n# How long did it take?\ncatboost_time = (time.time() - start_time)\n\n# CatBoost CV results save into a dataframe (cv_data), let's withdraw the maximum accuracy score\nacc_cv_catboost = round(np.max(cv_data['test-Accuracy-mean']) * 100, 2)","0fbc5784":"# Print out the CatBoost model metrics\nprint(\"---CatBoost Metrics---\")\nprint(\"Accuracy: {}\".format(acc_catboost))\nprint(\"Accuracy cross-validation 10-Fold: {}\".format(acc_cv_catboost))\nprint(\"Running Time: {}\".format(datetime.timedelta(seconds=catboost_time)))","f538a1a8":"models = pd.DataFrame({\n    'Model': ['KNN', 'Logistic Regression', 'Naive Bayes', \n              'Stochastic Gradient Decent', 'Linear SVC', \n              'Decision Tree', 'Gradient Boosting Trees',\n              'CatBoost'],\n    'Score': [\n        acc_knn, \n        acc_log,  \n        acc_gaussian, \n        acc_sgd, \n        acc_linear_svc, \n        acc_dt,\n        acc_gbt,\n        acc_catboost\n    ]})\nprint(\"---Reuglar Accuracy Scores---\")\nmodels.sort_values(by='Score', ascending=False)","4b0d469c":"cv_models = pd.DataFrame({\n    'Model': ['KNN', 'Logistic Regression', 'Naive Bayes', \n              'Stochastic Gradient Decent', 'Linear SVC', \n              'Decision Tree', 'Gradient Boosting Trees',\n              'CatBoost'],\n    'Score': [\n        acc_cv_knn, \n        acc_cv_log,      \n        acc_cv_gaussian, \n        acc_cv_sgd, \n        acc_cv_linear_svc, \n        acc_cv_dt,\n        acc_cv_gbt,\n        acc_cv_catboost\n    ]})\nprint('---Cross-validation Accuracy Scores---')\ncv_models.sort_values(by='Score', ascending=False)","d8d959f0":"# Feature Importance\ndef feature_importance(model, data):\n    \"\"\"\n    Function to show which features are most important in the model.\n    ::param_model:: Which model to use?\n    ::param_data:: What data to use?\n    \"\"\"\n    fea_imp = pd.DataFrame({'imp': model.feature_importances_, 'col': data.columns})\n    fea_imp = fea_imp.sort_values(['imp', 'col'], ascending=[True, False]).iloc[-30:]\n    _ = fea_imp.plot(kind='barh', x='col', y='imp', figsize=(20, 10))\n    return fea_imp\n    #plt.savefig('catboost_feature_importance.png') ","2458c9c1":"# Plot the feature importance scores\nfeature_importance(catboost_model, X_train)","e6343e3e":"metrics = ['Precision', 'Recall', 'F1', 'AUC']\n\neval_metrics = catboost_model.eval_metrics(train_pool,\n                                           metrics=metrics,\n                                           plot=True)\n\nfor metric in metrics:\n    print(str(metric)+\": {}\".format(np.mean(eval_metrics[metric])))","5051c03c":"# We need our test dataframe to look like this one\nX_train.head()","f8040412":"# Our test dataframe has some columns our model hasn't been trained on\ntest.head()","09299889":"# One hot encode the columns in the test data frame (like X_train)\ntest_embarked_one_hot = pd.get_dummies(test['Embarked'], \n                                       prefix='embarked')\n\ntest_sex_one_hot = pd.get_dummies(test['Sex'], \n                                prefix='sex')\n\ntest_plcass_one_hot = pd.get_dummies(test['Pclass'], \n                                   prefix='pclass')","6d548786":"# Combine the test one hot encoded columns with test\ntest = pd.concat([test, \n                  test_embarked_one_hot, \n                  test_sex_one_hot, \n                  test_plcass_one_hot], axis=1)","bc15f9a0":"# Let's look at test, it should have one hot encoded columns now\ntest.head()","07ce4ee6":"# Create a list of columns to be used for the predictions\nwanted_test_columns = X_train.columns\nwanted_test_columns","32bf05ea":"# Make a prediction using the CatBoost model on the wanted columns\npredictions = catboost_model.predict(test[wanted_test_columns])","8ab23ea7":"# Our predictions array is comprised of 0's and 1's (Survived or Did Not Survive)\npredictions[:20]","ec39aadb":"# Create a submisison dataframe and append the relevant columns\nsubmission = pd.DataFrame()\nsubmission['PassengerId'] = test['PassengerId']\nsubmission['Survived'] = predictions # our model predictions on the test dataset\nsubmission.head()","5aa0a4eb":"# What does our submission have to look like?\ngender_submission.head()","02961812":"# Let's convert our submission dataframe 'Survived' column to ints\nsubmission['Survived'] = submission['Survived'].astype(int)\nprint('Converted Survived column to integers.')","57c9e41c":"# How does our submission dataframe look?\nsubmission.head()","1b06e3f2":"# Are our test and submission dataframes the same length?\nif len(submission) == len(test):\n    print(\"Submission dataframe is the same length as test ({} rows).\".format(len(submission)))\nelse:\n    print(\"Dataframes mismatched, won't be able to submit to Kaggle.\")","701c69c7":"# Convert submisison dataframe to csv for submission to csv \n# for Kaggle submisison\nsubmission.to_csv('catboost_submission.csv', index=False)\nprint('Submission CSV is ready!')","a7c50703":"# Check the submission csv to make sure it's in the right format\n#submissions_check = pd.read_csv(\"..\/catboost_submission.csv\")\n#submissions_check.head()","c4de252b":"We've removed the two rows with missing values for Embarked, now we can add Embarked to our sub dataframes.","ed41a75e":"### Feature: Cabin\n\nDescription: The cabin number where the passenger was staying.    ","e5a698b2":"Since there are no missing values in Pclass, let's add it to our sub dataframes.","d2006f12":"#### Let's plot the distribution\nWe will look at the distribution of each feature first if we can to understand what kind of spread there is across the dataset.\n\nFor example, if there are values which are completely outside of the distribution, we may not want to include them in our model.","bca6aea3":"Recall is low, this means there's a higher amount of false negatives (predicting Did not survive when it was actually Survived).\n\nPrecision is higher therefore there's less false positives (predicting Survived, when it was actually Did not survive).\n\n**Challenge:** What are some ways to visualise precision and recall? \n*Hint:* You may want to look into what a confusion matrix is, you can find much more information in this blog post: [Beyond Accuracy: Precision and Recall](https:\/\/towardsdatascience.com\/beyond-accuracy-precision-and-recall-3da06bea9f6c)","3e73e85e":"### Logistic Regression","acb586fc":"## What missing values are there?\n\nWhere are the holes in our data?\n\nThese are rows which are missing a value or have NaN instead of something like the rest of the column.","ecadb10c":"Let's add SibSp to our subset dataframes and view the distributions.","ff91e8dd":"Every row has a unique name. This is equivalent to the passenger ID. But name could be used differently.\n\nCan you think of ways you could reduce the number of different names? Or create new features out of the names?\n\n**Note:** Because of so many different names and to keep this EDA fast, we won't move forward using the name variable.","5b384d43":"What does the graph on the right tell us about `Parch`?","38e97e25":"Out of a total 891 rows, that's almost one quarter of the dataset.\n\nWhat would you do with these missing values?\n\nCould replace them with the average age? What's the pro's and con's of doing this?\n\nOr would you get rid of them completely?\n\nWe won't answer these questions in our initial EDA but this is something we would definitely revisit at a later date.\n","87b7626c":"One option is to drop the two rows which don't have an Embarked value.\n\nAnother option would be to randomly assign a value of C, Q or S to each row.\n\nWhat are the pros and cons of each?\n\nFor now, we will remove those rows.","6ddb91b2":"681 unique values is too many for now. So we won't use `Ticket` in our subset dataframes.\n\nThere may be some way to reduce this down. \n\n**Challenge:** How could you reduce the Ticket feature? Is it even possible?\n\n*Hint:* It may be similar to what you could do with Name.","93f4d9d2":"### Loading in the data\n\nAfter we've downloaded the data, we need to get it into the notebook.\n\nI've stored my downloaded data in a file called `data`.","1ca6d930":"**Challenge:** How would you change the Fare bins?","cd14342a":"## Let's explore each of these features individually\nWe'll go through each column iteratively and see which ones to use in our first models.\nSome may need more preprocessing than others to get ready.","c9d0bcfc":"### Feature: Embarked\n\nDescription: The port where the passenger boarded the Titanic.\n    \nKey: C = Cherbourg, Q = Queenstown, S = Southampton","fb104ccd":"Since this is already binary variable (male or female), let's add it straight to our subset dataframes.","517da3ad":"## Feature Importance\nWhich features of the best model were most important for making predictions?","a76a9776":"The columns in `test` have been converted to the same format at `df_con_enc`. Now we can make predictions on the `test` dataframe columns we built a model on.\n\nWe can find the columns we made predictions on with `X_train.columns`.","2019e154":"**Challenge:** How would you fill the missing variables in the `Age` column?","30fe1004":"Since this feature is similar to SibSp, we'll do a similar analysis.","71f9e9c8":"We can see from the tables, the CatBoost model had the best results. Getting just under 82% is pretty good considering guessing would result in about 50% accuracy (0 or 1).\n\nWe'll pay more attention to the cross-validation figure.\n\nCross-validation is more robust than just the `.fit()` models as it does multiple passes over the data instead of one.\n\nBecause the CatBoost model got the best results, we'll use it for the next steps.\n\n**Challenge:** How could you improve the CatBoost model?","14a0065c":"## Data Descriptions\n\n**Survival:** 0 = No, 1 = Yes\n\n**pclass (Ticket class):** 1 = 1st, 2 = 2nd, 3 = 3rd\n\n**sex:** Sex\n\n**Age:** Age in years\n\n**sibsp:** number of siblings\/spouses aboard the Titanic\n\n**parch:** number of parents\/children aboard the Titanic\n\n**ticket:** Ticket number\n\n**fare:** Passenger fare\n\n**cabin:** Cabin number\n\n**embarked:** Port of Embarkation, C = Cherbourg, Q = Queenstown, S = Southampton","df4b100a":"This means Catboost has picked up that all variables except `Fare` can be treated as categorical.","2de11e9d":"### Feature: Age\n\nDescription: The age of the passenger.","b292fecc":"### Stochastic Gradient Descent","a73c20a9":"What does the graph on the right tell us?","738cb1f0":"### Gaussian Naive Bayes","376ddafa":"## What datatypes are in the dataframe?\n\nAs a general rule of thumb, features with a datatype of object could be considered categorical features. And those which are floats or ints (numbers) could be considered numerical features.\n\nHowever, as we dig deeper, we might find features which are numerical may actually be categorical.\n\nThe goal for the next few steps is to figure out how best to process the data so our machine learning model can learn from it.\n\nIdeally, all the features will be encoded into a numerical value of some kind. ","f59e507b":"### CatBoost Algorithm\nCatBoost is a state-of-the-art open-source gradient boosting on decision trees library.\n\nIt's simple and easy to use. \nFor more on CatBoost and the methods it uses to deal with categorical variables, check out the [CatBoost docs](https:\/\/catboost.ai\/).","52c57523":"### Target Feature: Survived\n\nDescription: Whether the passenger survived or not.\n    \nKey: 0 = did not survive, 1 = survived\n    \nThis is the variable we want our machine learning model to predict based off all the others.","c0f2ee26":"### Now submit your .csv to Kaggle! \n\nhttps:\/\/www.kaggle.com\/c\/titanic\/submit","26303fd5":"### Let's seperate the data","824ed84e":"## Work on the notebook\n    \nFirst we will import all the relevant dependencies we need.\n\nIf you don't have any of these, the notebook will throw an error. The error will likely tell you what you don't have. Then you'll have to install it.\n\nYou can usually figure out how to install it by Googling: \"how to install [the thing you don't have]\".\n","e8cb7dbc":"### Feature: Name\n    \nDescription: The name of the passenger.","5af041fb":"### Feature: SibSp\n\nDescription: The number of siblings\/spouses the passenger has aboard the Titanic.","8b87b4f6":"Not many people survived. But of those who did, more were female.","23a7a2dd":"## Feature Encoding\nNow we have our two sub dataframes ready. We can encode the features so they're ready to be used with our machine learning models.\n\nWe will encode our binned dataframe (`df_bin`) with one-hot encoding and our continuous dataframe (`df_con`) with the label encoding function from `sklearn`.","74af8f32":"#### Why would you want feature importance?\n\nFeatrue importance shows how much each feature contributed to the model.\n\nYou could take this information and remove features which don't contribute much to reduce dimenstionality (and save compute).\n\nYou could improve features which don't offer much to the overall model.\n\nOr you could improve features which offer more to the model. In this case, there aren't many ways you could improve sex as it's already a binary.\n\nFeature importance figures also show people who may not be familiar with the problem what features of their data are most important when it comes to making predictions with machine learning models.","e5aaac67":"### Linear Support Vector Machines (SVC)","d0fb857f":"Since there are too many missing values, we won't use Cabin for our initial models and won't add it to our sub dataframes.\n\nBut how could you modify cabin to be more usable?\n\nWhat could you do about the missing values?","ee0aee7b":"### Decision Tree Classifier","e4127d76":"#### How can we deal with the 2 missing values of Embarked?","269ba378":"We want to make predictions on the same kind of columnns our model is trained on.\n\nSo we have to select the subset of right columns of the `test` dateframe, encode them and make a prediciton with our model.","6d528f81":"#### Function to create count and distribution visualisations","b3733efa":"## Model Results\nWhich model had the best cross-validation accuracy?\n\n**Note:** We care most about cross-validation metrics because the metrics we get from `.fit()` can randomly score higher than usual.","d4095fc6":"We need our `submission` dataframe to look like the `gender_submisison` dataframe, so we'll turn the `Survived` column into integers.","5eae558d":"**Update:** The original version of this notebook used the `LabelEncoder()` function for encoding `df_con_enc`. However, as Tom\u00e1\u0161 pointed out, OneHotEncoder is better to use.\n    \nCheck this article for more details: https:\/\/medium.com\/@contactsunny\/label-encoder-vs-one-hot-encoder-in-machine-learning-3fc273365621","2ee176b9":"### K-Nearest Neighbours","60fbe652":"### Feature: Parch\n\nDescription: The number of parents\/children the passenger has aboard the Titanic.","b2f57519":"### Feature: Ticket\n\nDescription: The ticket number of the boarding passenger.","bfc9f278":"### Feature: Fare\n\nDescription: How much the ticket cost.","1fb4a6e9":"### Perform CatBoost cross-validation","c62b486f":"### Gradient Boost Trees","05082c19":"### Feature: Pclass\n\nDescription: The ticket class of the passenger.\n    \nKey: 1 = 1st, 2 = 2nd, 3 = 3rd","88c68e6d":"Ok we can clearly see some missing values here. Especially in the cabin column.\n\nIt's important to visualise missing values early so you know where the major holes are in your dataset.\n\nKnowing this informaiton will help with your EDA and figuring out what kind of data cleaning and preprocessing is needed.","3c89b068":"## Start Building Machine Learning Models\nNow our data has been manipulating and converted to numbers, we can run a series of different machine learning algorithms over it to find which yield the best results.","fcd218ea":"We can see with this feature, the values are numerical (1, 2 and 3) but they are categories.\n\nHow do we know this? Because a passenger in Class 3 doesn't necessarily equal a passenger in Class 2 + a passenger in Class 1.","237bde90":"Because Fare is a float (number) let's add it as it is to our continuous sub dataframe but to add it to our categorical sub dataframe, we'll cut it into bins.","355d2346":"## Download the data\n\nWe can download the data for this link: https:\/\/www.kaggle.com\/c\/titanic\/data","27859ff4":"## Precision and Recall\n\nPrecision and recall are two metrics which are used for cases where you have have an imbalanced classification problem.\n\nFor example, you may have 100,000 people and only 1 of them gets a certain disease. If your model predicts that all people don't have the disease, it only misses 1 in 100,000 so its accuracy is 99.999%. But this isn't really helpful.\n\nThis is where precision an recall come in.\n\n**Recall** = a metric which measures a models ability to find all the relevant cases in a dataset.\n\nRecall would be the models ability to find the 1 person in 100,000 who has the disease.\n\n**Precision** = a metric which measures a models ability to correctly identify only relevant instances.\n\nIn our example, Precision would be if the model found the 1 person who had the disease, did they actually have the disease.\n\nCombining the precision and recall, gives an **F1 score.**\n\nThese metrics will all fall between 0 and 1, with a higher value being better.\n\nAlthough, they don't necessarily need to come into play for our Titantic problem, they're worth remembering for your future work.","ce6b6b12":"That doesn't look too good, what about another way of looking at it?","279b4929":"Embarked is a categorical variable because there are 3 categories which a passenger could have boarded on.","8c157d7e":"### Regular accuracy scores","2532eb21":"# Let's predict who would've survived the Titanic !!\n\n","711ab997":"## Submission\nLet's use the model with the highest cross-validation accuracy score to make a prediction on the test dataset and then submit our predictions to Kaggle.","4ba30c2b":"## Why we do EDA?\n\n\nNot all data comes in a neat little package ready to be modelled by the latest and greatest machine learning models.\n\nMost of the time, we'll get a dataset we don't know much about. So before we can make any solid predictions, we need to find out more.\n\nThis is where EDA comes in.\n\nThe main thing to remember is the first word. Exploratory. We're trying to figure out more about the data so that we can build a model the best way we can.\n\nWe'll usually do this when we first look at a dataset but it'll continually happen as we learn more. EDA is an iterative process. There's no one way to do it either. It'll vary with each new dataset but there are some things we'll find ourself doing more often, we'll talk more about those EDA techniques in this notebook.\n","4b2f556b":"## To perform our data analysis, let's create two new dataframes\n\nWe'll create one for exploring discretised continuous variables (continuous variables which have been sorted into some kind of category) and another for exploring continuous variables.","11c178e1":"### Feature: Sex\n\nDescription: The sex of the passenger (male or female).","682735bc":"### Define a function to fit machine learning algorithms\nSince many of the algorithms we will use are from the sklearn library, they all take similar (practically the same) inputs and produce similar outputs.\n\nTo prevent writing code multiple times, we will functionise fitting the model and returning the accuracy scores."}}