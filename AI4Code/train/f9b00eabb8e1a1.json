{"cell_type":{"caa8b440":"code","cea4368d":"code","80d04c22":"code","6463532b":"code","59a812ee":"code","9a66e575":"code","c0408c36":"code","f13bcb9f":"code","9a5ca0f1":"code","2f33f459":"code","3dab7702":"markdown","5059dec8":"markdown","a0d42a7e":"markdown","1be39986":"markdown","f2e8a5f3":"markdown"},"source":{"caa8b440":"import numpy as np \nimport pandas as pd \n\nfrom sklearn.preprocessing import Normalizer, MaxAbsScaler\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.decomposition import NMF\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cea4368d":"df = pd.read_csv('..\/input\/recomend-music\/scrobbler-small-sample.csv')\ndf.head()","80d04c22":"artists_df=pd.read_csv('..\/input\/recomend-music\/artists.csv', header=None, names=['artist_name'])\nartists_df.head()","6463532b":"artist_names=artists_df['artist_name']","59a812ee":"artists_df['artist_offset'] = artists_df.index\nartists_df.head()","9a66e575":"temp_df=pd.merge(artists_df,df,on=\"artist_offset\")\ntemp_df.head()","c0408c36":"artists=temp_df.pivot_table(columns = 'user_offset',index = 'artist_name',values='playcount',fill_value=0)","f13bcb9f":"artists.head()","9a5ca0f1":"# Create a MaxAbsScaler: scaler\nscaler = MaxAbsScaler()\n\n# Create an NMF model: nmf\nnmf = NMF(n_components=20)\n\n# Create a Normalizer: normalizer\nnormalizer = Normalizer()\n\n# Create a pipeline: pipeline\npipeline = make_pipeline(scaler ,nmf ,normalizer)\n\n# Apply fit_transform to artists: norm_features\nnorm_features = pipeline.fit_transform(artists)\n\n# Create a DataFrame: df\ndf = pd.DataFrame(norm_features,index=artist_names)\ndf.head()","2f33f459":"# Select row of 'Bruce Springsteen': artist\nartist = df.loc['Bruce Springsteen']\n\n# Compute cosine similarities: similarities\nsimilarities = df.dot(artist)\n\n# Display those with highest cosine similarity\nprint(similarities.nlargest())","3dab7702":"**In this exercise, use NMF to recommender popular music artists! \nwe have 2 scv files**\n\n**1. 100 artist name**\n\n**2. 24800 samples include 500 user**\n\n**that merge those toghter and **create sparse array artists \nrows whose rows correspond to artists and\ncolumns whose correspond to users. \nThe entries give the number of times each artist was listened to by each user.**\n\n\n**In this exercise, build a pipeline and transform the array into normalized NMF features. \nThe first step in the pipeline, MaxAbsScaler, transforms the data so that all users have the same influence on the model, \nregardless of how many different artists they've listened to.  \nthen we use the resulting normalized NMF features for recommendation with NMF and cosine similarities!**","5059dec8":"first read csv files as dataframe","a0d42a7e":"then add artist_offset column to artists_df to have same column that merge with df","1be39986":"then, we merge the 2 data frames obtained from csv files  together. To have a single data frame","f2e8a5f3":"data frame is ready\nhave artists as a sparse array\n\nrows ---> whose rows correspond to artists and\n\ncolumns--->  whose correspond to users\n"}}