{"cell_type":{"679dad85":"code","f3697bfd":"code","3a355306":"code","31e53e96":"code","a177f364":"code","59c193a0":"code","bb7a46dd":"code","645a5699":"code","f4b18580":"code","d13a7e08":"code","f6d49fe1":"code","a529b503":"code","7c5a107c":"code","c6a0d62f":"code","4fe0ae3f":"code","5ccc5c5a":"code","2974d392":"code","534d3c88":"code","8fde9cfa":"markdown","bad40235":"markdown","ff0a3bbb":"markdown","bdb21caf":"markdown","2ce82cce":"markdown","522d0820":"markdown","54eeceb7":"markdown","7d022a00":"markdown"},"source":{"679dad85":"import tensorflow as tf\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom tensorflow import keras","f3697bfd":"mnist = tf.keras.datasets.mnist","3a355306":"(X_train, Y_train),(X_test, Y_test) = mnist.load_data()","31e53e96":"print(X_train.shape)\nprint(X_test.shape)\nprint(Y_train.shape)\nprint(Y_test.shape)","a177f364":"plt.figure(figsize=(8,8))\nfor i in range(64):\n    plt.subplot(8, 8, 1+i)\n    plt.axis('off')\n    plt.imshow(X_train[i], cmap = 'gray')","59c193a0":"X_train = X_train \/ 255","bb7a46dd":"batch_size = 32\ndataset = tf.data.Dataset.from_tensor_slices(X_train).shuffle(1000)\ndataset = dataset.batch(batch_size, drop_remainder = True).prefetch(1)","645a5699":"codings_size = 30\n\ngenerator = keras.models.Sequential([\n                keras.layers.Dense(128,activation = 'selu', input_shape = [codings_size]),\n                keras.layers.Dense(256, activation = 'selu'),\n                keras.layers.Dense(28*28, activation = 'sigmoid'),\n                keras.layers.Reshape([28,28])\n])","f4b18580":"generator.summary()","d13a7e08":"discriminator = keras.models.Sequential([\n                keras.layers.Flatten(input_shape = [28,28]),\n                keras.layers.Dense(256, activation = 'selu'),\n                keras.layers.Dense(128, activation = 'selu'),\n                keras.layers.Dense(1, activation = 'sigmoid')\n])","f6d49fe1":"discriminator.summary()","a529b503":"gan = keras.models.Sequential([generator, discriminator])","7c5a107c":"gan.summary()","c6a0d62f":"# The discriminator is trainable separately but not inside GAN\ndiscriminator.compile(loss = 'binary_crossentropy', optimizer = 'rmsprop')\ndiscriminator.trainable = False\ngan.compile(loss = 'binary_crossentropy', optimizer = 'rmsprop')","4fe0ae3f":"def train_gan(gan, dataset, batch_size, codings_size, n_epochs = 10):\n  generator, discriminator = gan.layers\n  for epoch in range(n_epochs):\n    for X_batch in dataset:\n      #training the discriminator\n      noise = tf.random.normal(shape = [batch_size, codings_size])\n      generated_images = generator(noise)\n      X_batch = tf.cast(X_batch, tf.float32)\n      X_fake_and_real = tf.concat([generated_images, X_batch], axis = 0)\n      y1 = tf.constant([[0.]] * batch_size + [[1.]] * batch_size)\n      discriminator.trainable = True\n      discriminator.train_on_batch(X_fake_and_real, y1)\n      \n      #training the gan (Generator)\n      noise = tf.random.normal(shape = [batch_size, codings_size])\n      y2 = tf.constant(([[1.]] * batch_size))\n      discriminator.trainable = False\n      gan.train_on_batch(noise, y2)\n  \n  # To produce final images\n  plt.figure(figsize=(6,6))\n  for i in range(32):\n    plt.subplot(8, 4, 1+i)\n    plt.axis('off')\n    plt.imshow(generated_images[i], cmap = 'gray')","5ccc5c5a":"train_gan(gan, dataset, batch_size, codings_size)","2974d392":"noise = tf.random.normal(shape = [1,codings_size])\ngenerated_image = generator(noise)\ngenerated_image.shape","534d3c88":"plt.figure()\nplt.imshow(generated_image[0], cmap = 'gray_r')","8fde9cfa":"## Function for Training","bad40235":"## Generating an image","ff0a3bbb":"### A few images from the dataset","bdb21caf":"## Creating the Discriminator","2ce82cce":"## Preparing the Data","522d0820":"## Creating the Generator","54eeceb7":"## Combining Generator & Discriminator to form the GAN","7d022a00":"# Generative Adversarial Network (GAN)"}}