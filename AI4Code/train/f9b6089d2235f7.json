{"cell_type":{"ada2de7d":"code","de3a156b":"code","c2bf4bdc":"code","a58fe624":"code","77039068":"code","668237fd":"code","4f40de51":"code","3b0e276f":"code","344f3f71":"code","2cfbc271":"code","e50f31d6":"code","cd2b90f6":"code","527f6d4a":"code","005f37ed":"markdown","505d17fe":"markdown","61332263":"markdown","1ef5abe8":"markdown"},"source":{"ada2de7d":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.metrics import r2_score\nimport glob\nfrom collections import Counter\nfrom sklearn.decomposition import PCA\nfrom mpl_toolkits.mplot3d import Axes3D","de3a156b":"order_book_training = glob.glob('\/kaggle\/input\/optiver-realized-volatility-prediction\/book_train.parquet\/*')\n\n# custom aggregate function\ndef wap2vol(df):\n    # wap2vol stands for WAP to Realized Volatility\n    temp = np.log(df).diff() # calculating tik to tik returns\n    # returning realized volatility\n    return np.sqrt(np.sum(temp**2)) \n\n\n# function for calculating realized volatility per time id for a given stock\ndef rel_vol_time_id(path):\n    # book: book is an order book\n    book = pd.read_parquet(path) # order book for a stock id loaded\n    # calculating WAP\n    p1 = book[\"bid_price1\"]\n    p2 = book[\"ask_price1\"]\n    s1 = book[\"bid_size1\"]\n    s2 = book[\"ask_size1\"]\n    \n    book[\"WAP\"] = (p1*s2 + p2*s1) \/ (s1 + s2)\n    # calculating realized volatility for each time_id\n    transbook = book.groupby(\"time_id\")[\"WAP\"].agg(wap2vol)\n    return transbook","c2bf4bdc":"%%time \nstock_id = []\ntime_id = []\nrelvol = []\nfor i in order_book_training:\n    # finding the stock_id\n    temp_stock = int(i.split(\"=\")[1])\n    # find the realized volatility for all time_id of temp_stock\n    temp_relvol = rel_vol_time_id(i)\n    stock_id += [temp_stock]*temp_relvol.shape[0]\n    time_id += list(temp_relvol.index)\n    relvol += list(temp_relvol)\n\npast_volatility = pd.DataFrame({\"stock_id\": stock_id, \"time_id\": time_id, \"volatility\": relvol})","a58fe624":"past_volatility.head()","77039068":"vecx = past_volatility.pivot(index='time_id', columns=['stock_id']).fillna(0)\nvecx.head()","668237fd":"vecx.corr().head(13)","4f40de51":"sns.set_theme(style=\"white\")\ncmap = sns.diverging_palette(230, 20, as_cmap=True)\nsns.heatmap(vecx.corr(), cmap=cmap)\nplt.show()","3b0e276f":"X = vecx.to_numpy()","344f3f71":"from sklearn.preprocessing import StandardScaler\nX = StandardScaler().fit_transform(X)  # Normalize each 'stock_id' column\npca = PCA(n_components=3)\nPC = pca.fit_transform(X.T)  # PCA reduction of the normalized volatilities of each 'stock_id' vector\nPC.shape","2cfbc271":"sns.set_style(\"whitegrid\", {'axes.grid' : False})\nfig = plt.figure(figsize=(6,6))\nax = Axes3D(fig, auto_add_to_figure=False) \nfig.add_axes(ax)\n\nx = PC[:,0]\ny = PC[:,1]\nz = PC[:,2]\n\nax.scatter(x, y, z, c=x, marker='o')\nax.set_xlabel('PC_0')\nax.set_ylabel('PC_1')\nax.set_zlabel('PC_2')\n\nplt.show()","e50f31d6":"print(pca.explained_variance_ratio_)","cd2b90f6":"corrcoef = np.corrcoef(X.T)\ncorrcoef.shape","527f6d4a":"sns.set_theme(style=\"white\")\ncmap = sns.diverging_palette(230, 20, as_cmap=True)\nsns.heatmap(corrcoef, cmap=cmap)\nplt.show()","005f37ed":"All the necessary functions are there, now let's calculate the realized volatility for each *(stock_id, time_id)* tuples.","505d17fe":"### Importing all the necessary librarires","61332263":"As expected the volatility of almost all stocks is highly correlated\n\nThis analysis is based on [EDA: correlation among stocks based on volatility](https:\/\/www.kaggle.com\/shahmahdihasan\/eda-correlation-among-stocks-based-on-volatility) correcting the normalization step and including all stocks\n\nAll data wrangling + volatility calculation codes were pulled from notebook [Overly simplified OLS prediction](https:\/\/www.kaggle.com\/shahmahdihasan\/overly-simplified-ols-prediction).","1ef5abe8":"Principal Component Analysis (PCA) is scale sensitive, hence I am preprocessing the data using *StandardScalar* from sklearn.\nI am also using a 3-component PCA for the ease of visualization to see if there actually exists any stock classes."}}