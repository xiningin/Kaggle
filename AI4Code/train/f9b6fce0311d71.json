{"cell_type":{"0515a6b9":"code","414a0de9":"code","cac6c74b":"code","dff95a70":"code","ccf4d5b1":"code","05a83a79":"code","83f1b106":"code","26889df6":"code","31f7960a":"code","84146ff8":"code","a10c73ba":"code","f8ae4c3a":"code","a721b6d8":"code","f3542751":"code","8e1b672c":"code","7c7d642a":"code","32df64b7":"code","771b5b9a":"code","a799ea2b":"code","70662af6":"code","2beddb00":"code","c78580a8":"code","ba161b3e":"markdown"},"source":{"0515a6b9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/output'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","414a0de9":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nfrom sklearn.model_selection import train_test_split","cac6c74b":"def unpickle(file):\n    import pickle\n    with open(file, 'rb') as fo:\n        dict = pickle.load(fo, encoding='bytes')\n    return dict","dff95a70":"qmnist = unpickle(\"\/kaggle\/input\/qmnist-the-extended-mnist-dataset-120k-images\/MNIST-120k\")\n","ccf4d5b1":"len(qmnist)","05a83a79":"qmnist['data']","83f1b106":"X_qmnist = np.array(qmnist['data'], dtype=\"float32\") \/ 255\nX_qmnist = X_qmnist.reshape(-1, 28, 28, 1)","26889df6":"y_qmnist = tf.keras.utils.to_categorical(qmnist['labels'])","31f7960a":"y_qmnist","84146ff8":"# From Digit Recognizer dataset\ntest = pd.read_csv(\"\/kaggle\/input\/digitrecognizer\/test.csv\")\nX_test = np.array(test, dtype=\"float32\") \/ 255\nX_test = X_test.reshape(-1, 28, 28, 1)","a10c73ba":"plt.figure(figsize=(18,8))\nfor index,row in enumerate(X_qmnist[:10]):\n    label=qmnist['labels'][index]\n    plt.subplot(3,6,index+1)\n    plt.imshow(X_qmnist[index])\n    plt.title(label)\nplt.tight_layout()","f8ae4c3a":"from tensorflow.keras.datasets import mnist\n\n(X_train_mnist, y_train_mnist), (X_test_mnist, y_test_mnist) = mnist.load_data()\n\nX_mnist = np.concatenate((X_train_mnist, X_test_mnist))\ny_mnist = np.concatenate((y_train_mnist, y_test_mnist))\n\nX_mnist = X_mnist.reshape(-1,28,28,1)\nX_mnist = X_mnist.astype(np.float32) \/ 255\ny_mnist = tf.keras.utils.to_categorical(y_mnist,num_classes=10)\n","a721b6d8":"# Combining Both QMNIST and MNIST\nX_train = np.concatenate((X_qmnist, X_mnist))\ny_train = np.concatenate((y_qmnist, y_mnist))","f3542751":"from sklearn.model_selection import train_test_split\n\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense , Dropout , Activation , Flatten , Conv2D , MaxPooling2D\n","8e1b672c":"from sklearn.model_selection import train_test_split","7c7d642a":"x_train, x_test, y_train, y_test = train_test_split(X_train, y_train, test_size=0.2, random_state=1)\nx_train, x_val, y_train, y_val  = train_test_split(x_train, y_train, test_size=0.2, random_state=1)","32df64b7":"model = Sequential()\nmodel.add( Conv2D(64, (3, 3), input_shape=(28, 28, 1)) )\nmodel.add(Activation(\"relu\"))\nmodel.add( Conv2D(64, (3, 3), input_shape=(28, 28, 1)) )\nmodel.add(Activation(\"relu\"))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add( Conv2D(32 , (3,3)) )\nmodel.add(Activation(\"relu\"))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\n\n\nmodel.add( Conv2D(32 , (3,3)) )\nmodel.add(Activation(\"relu\"))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\n\n\nmodel.add(Flatten())\nmodel.add(Dense(64))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10))\nmodel.add(Activation(\"softmax\"))\n\nmodel.compile(loss=\"categorical_crossentropy\",\n            optimizer=\"adam\",\n             metrics = ['accuracy'])\n\nmodel.fit(x_train,y_train,batch_size=20 ,epochs=100, validation_data=(x_val, y_val))\n\n\nmodel.save(\"digit_model.hy5\")","771b5b9a":"model.save(\"digit_model.hy5\")","a799ea2b":"testdf = pd.read_csv(\"\/kaggle\/input\/digitrecognizer\/test.csv\").astype(\"float32\") \/ 255.0","70662af6":"testdf","2beddb00":"predictions = model.predict(X_test)\nresults = np.argmax(predictions, axis = 1) ","c78580a8":"submissions = pd.read_csv(\"\/kaggle\/input\/digitrecognizer\/sample_submission.csv\")\nsubmissions['Label'] = results\nsubmissions.to_csv('submission.csv', index = False)","ba161b3e":"# QMNIST Reading\n"}}