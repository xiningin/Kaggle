{"cell_type":{"cd90bd94":"code","5e39fa39":"code","35da0cd9":"code","7698e6e5":"code","6ca38b4a":"code","a54416bf":"code","73b49994":"code","b484d3b2":"code","c79452db":"code","d75fdb81":"code","dcfad819":"code","38c1bd94":"code","b4a0419b":"code","2899c396":"code","115cf305":"code","1b97f826":"code","e14b804a":"code","5b6a228c":"code","95a9d3db":"code","26d54841":"code","f639ce8f":"code","ed2cbf14":"code","23b411dc":"markdown","27eacde0":"markdown","f8efc063":"markdown","1a38fb7a":"markdown","8b3876bc":"markdown"},"source":{"cd90bd94":"import numpy as np\nimport pandas as pd\nimport random\nimport os\n\n# Scaling\nfrom sklearn.preprocessing import StandardScaler\n\n# Model\nfrom sklearn.ensemble import RandomForestClassifier\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom tensorflow.keras import callbacks\nfrom tensorflow.keras import optimizers\nimport tensorflow as tf\n\nfrom sklearn.metrics import roc_auc_score, log_loss\nfrom sklearn.model_selection import KFold, StratifiedKFold\nfrom sklearn.preprocessing import StandardScaler, RobustScaler, PowerTransformer\n\n\n# History\nimport matplotlib.pyplot as plt\nimport seaborn as sns","5e39fa39":"my_seed = 42\ndef seedAll(seed):\n    np.random.seed(seed)\n    tf.random.set_seed(seed)\n    random.seed(seed)\n    os.environ[\"PYTHONHASHSEED\"] = str(seed)\n    \nseedAll(my_seed)","35da0cd9":"train = pd.read_csv(\"..\/input\/tabular-playground-series-nov-2021\/train.csv\")","7698e6e5":"train.head()","6ca38b4a":"train = train.drop('id', axis = 1)","a54416bf":"valid_ratio = 0.1\nvalid_len = int(valid_ratio * len(train))","73b49994":"# shuffle\ntrain = train.sample(frac=1)\nvalid = train[:valid_len]\ntrain = train[valid_len:]\nvalid_X, valid_Y = valid.iloc[:, :-1], valid.iloc[:, -1]\ntrain_X, train_Y = train.iloc[:, :-1], train.iloc[:, -1]\nprint('valid_len : {} \/ train_len : {}'.format(len(valid_X), len(train_X)))","b484d3b2":"valid_X.head()","c79452db":"def f1_score(y, pred):\n    if len(y) != len(pred):\n        raise \"Difference size\"\n    \n    TN, TP, FN, FP = 0, 0, 0, 0\n    \n    for i in range(len(y)):\n        a = y[i]\n        b = pred[i]\n        \n        if a == b and b == 0:\n            TN += 1\n        elif a == b and b == 1:\n            TP += 1\n        elif a != b and b == 0:\n            FN += 1\n        else:\n            FP += 1\n    \n    recall = TP \/ (TP + FN)\n    precision = TP \/ (TP + FP)\n    print('TN : {} \/ TP : {} \/ FN : {} \/ FP : {}'.format(TN, TP, FN, FP))\n    print('recall : {} \/ precision : {}'.format(recall, precision))\n    \n    return (2 * precision * recall) \/ (precision + recall)","d75fdb81":"forest = RandomForestClassifier(n_estimators=150, max_depth=10, min_samples_split=3)\nforest.fit(train_X, train_Y)","dcfad819":"importances = forest.feature_importances_\nindices = np.argsort(importances)\nfeatures = train_X.columns\n\nindices = indices[-10:]","38c1bd94":"plt.figure(figsize=(8,8))\nplt.title('Feature Importances TOP 10')\nsns.barplot(importances[indices], [features[i] for i in indices], palette=\"YlOrRd\")\nplt.xlabel('Relative Importance')\nplt.show()","b4a0419b":"from sklearn.metrics import accuracy_score\npred_Y = forest.predict(valid_X)\nround(accuracy_score(valid_Y.values,pred_Y)*100, 2)","2899c396":"pred_Y = forest.predict(valid_X)\nf1_forest = f1_score(valid_Y.values, pred_Y)\nprint('f1 forest : ', f1_forest)","115cf305":"# def build_model():\n#     early_stopping = callbacks.EarlyStopping(\n#         patience=20,\n#         min_delta=0,\n#         monitor='val_loss',\n#         restore_best_weights=True,\n#         verbose=0,\n#         mode='min', \n#         baseline=None,\n#     )\n\n#     plateau = callbacks.ReduceLROnPlateau(\n#             monitor='val_loss', \n#             factor=0.5, \n#             patience=5, \n#             verbose=0,\n#             mode='min')\n    \n#     model = keras.Sequential([\n#         layers.Conv1D(filters=64, kernel_size=2, activation='relu', input_shape=(100, 1)),\n#         layers.MaxPooling1D(pool_size=2),\n#         layers.Flatten(),\n#         layers.Dropout(0.3),\n#         layers.Dense(100, activation='relu'),\n#         layers.Dense(32, activation='relu'),\n#         layers.Dense(1, activation='sigmoid')\n#     ])\n    \n#     optimizer = optimizers.Adam(learning_rate=1e-3)\n    \n#     model.compile(optimizer=optimizer, loss='binary_crossentropy', metrics=['AUC'])\n#     return model, early_stopping, plateau","1b97f826":"# ## from sklearn.model_selection import StratifiedKFold\n# kfold = StratifiedKFold(n_splits=3, random_state=0, shuffle=True)\n# models = []\n# histories = []\n\n# for i, (train_idx, valid_idx) in enumerate(kfold.split(train_X.values, train_Y.values)):\n#     X_train, X_valid = train_X.iloc[train_idx], train_X.iloc[valid_idx]\n#     Y_train, Y_valid = train_Y.iloc[train_idx], train_Y.iloc[valid_idx]\n# #     print(X_train.shape)\n#     X_train = np.expand_dims(X_train, axis=2)\n#     X_valid = np.expand_dims(X_valid, axis=2)\n#     print(X_train.shape)\n    \n#     # fit\n#     model, early_stopping, plateau = build_model()\n#     history = model.fit(X_train, Y_train,\n#             validation_data = (X_valid, Y_valid),\n#             batch_size = 64, \n#             epochs = 30,\n#             callbacks = [early_stopping, plateau],\n#             shuffle = True,\n#             verbose = 2\n#             )\n#     print('='*15 + 'Fold {} end '.format(i+1) + '='*10)\n    \n#     # history\n#     models.append(model)\n#     histories.append(history)\n    ","e14b804a":"# fig, ax = plt.subplots(3, 2, tight_layout=True, figsize=(15, 10))\n# for idx, history in enumerate(histories):\n#     ax[idx][0].plot(history.history['auc'], 'b', label='train acc')\n#     ax[idx][0].plot(history.history['val_auc'], 'g', label='valid auc')\n#     ax[idx][0].legend(loc='upper left')\n#     ax[idx][0].set_title('epoch {} acc'.format(idx+1))\n    \n#     ax[idx][1].plot(history.history['loss'], 'r', label='train loss')\n#     ax[idx][1].plot(history.history['val_loss'], 'y', label='valid loss')\n#     ax[idx][1].legend(loc='upper right')\n#     ax[idx][1].set_title('epoch {} loss'.format(idx+1))","5b6a228c":"test = pd.read_csv(\"..\/input\/tabular-playground-series-nov-2021\/test.csv\")\nsub = pd.read_csv(\"..\/input\/tabular-playground-series-nov-2021\/sample_submission.csv\")","95a9d3db":"sub_X = test.iloc[:, :-1]\nprint('test_len : {}'.format(len(test)))","26d54841":"# forest_Y = forest.predict(sub_X)\n# models_Y = [forest_Y]\n\n# for model in models:\n#     pred = model.predict(np.expand_dims(sub_X, axis=2))\n#     pred = pred.reshape(1, len(pred))\n#     models_Y.append(pred)\n\n# models_Y = np.array(models_Y)","f639ce8f":"# sub['target'] = np.mean(models_Y, axis = 0)[0]\n# sub.to_csv('submission.csv', index=False)\n# sub.head()","ed2cbf14":"forest_Y = forest.predict(sub_X)\nsub['target'] = forest_Y\nsub.to_csv('submission.csv', index=False)\nsub.head()","23b411dc":"## Model(Random forest)","27eacde0":"## Model(NN)","f8efc063":"## Split train & valid","1a38fb7a":"## Predict","8b3876bc":"## History"}}