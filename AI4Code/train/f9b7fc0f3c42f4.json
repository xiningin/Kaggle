{"cell_type":{"ebac784c":"code","1e4d5b64":"code","9ad65cbf":"code","0b9b8b3c":"code","5d32d05c":"code","1a977dfb":"code","c8456c1f":"code","fdb2a54d":"code","e7a9ff92":"code","03f9048f":"code","744a40f2":"code","490cb821":"code","8f1eb967":"code","90610268":"code","e9c33865":"markdown","95b21cd8":"markdown","c09007e6":"markdown","dc6ba4d7":"markdown","c1a55c9b":"markdown","75642538":"markdown","c38694a4":"markdown","7f603014":"markdown","d7d73fb3":"markdown"},"source":{"ebac784c":"import os\nimport gc\nimport pandas as pd\nimport numpy as np\n\nfrom sklearn.model_selection import StratifiedKFold,KFold\nfrom sklearn import metrics, preprocessing\nfrom sklearn.preprocessing import OneHotEncoder\n\nimport tensorflow as tf\nfrom keras.layers import Dense, Input\nfrom collections import Counter\nfrom keras.layers import BatchNormalization\nfrom keras.optimizers import Adam\nfrom keras.models import Model, load_model\nfrom keras import callbacks\nfrom keras import backend as K\nfrom keras.layers import Dropout\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","1e4d5b64":"def submit(predictions):\n    submit = pd.read_csv('..\/input\/sample_submission.csv')\n    submit[\"target\"] = predictions\n    submit.to_csv(\"submission.csv\", index=False)\n\ndef fallback_auc(y_true, y_pred):\n    try:\n        return metrics.roc_auc_score(y_true, y_pred)\n    except:\n        return 0.5\n\ndef auc(y_true, y_pred):\n    return tf.py_function(fallback_auc, (y_true, y_pred), tf.double)","9ad65cbf":"df_tr = pd.read_csv(\"..\/input\/train.csv\")\ndf_test = pd.read_csv(\"..\/input\/test.csv\")","0b9b8b3c":"NFOLDS = 5\nRANDOM_STATE = 42\nnumeric = [c for c in df_tr.columns if c not in ['id', 'target', 'wheezy-copper-turtle-magic']]","5d32d05c":"df_tr.drop(['target'], inplace = True, axis =1)","1a977dfb":"len_train = df_tr.shape[0]\ndata = pd.concat([df_tr, df_test])\ndata = pd.concat([data, pd.get_dummies(data['wheezy-copper-turtle-magic'], prefix = 'magic')], axis=1, sort=False)\ndf_tr = data[:len_train]\ndf_test = data[len_train:]","c8456c1f":"target_column = [i for i in df_tr.columns if i.startswith('magic_')]","fdb2a54d":"folds = KFold(n_splits=NFOLDS)##, shuffle=True, random_state=RANDOM_STATE)","e7a9ff92":"gc.collect()","03f9048f":"#y = df_tr[target_column].values\nids = df_tr.id.values\ntrain = df_tr[numeric]#.drop(['id', 'target'], axis=1)\ntest_ids = df_test.id.values\ntest = df_test[numeric]\noof_preds = np.zeros((len(train)))\ntest_preds = np.zeros((len(test)))\nscl = preprocessing.StandardScaler()\nscl.fit(pd.concat([train, test]))\ntrain = scl.transform(train)\ntest = scl.transform(test)","744a40f2":"for fold_, (trn_, val_) in enumerate(folds.split(ids, ids)):\n    print(\"Current Fold: {}\".format(fold_))\n    trn_x, trn_y = train[trn_, :], df_tr[target_column].iloc[trn_]\n    val_x, val_y = train[val_, :], df_tr[target_column].iloc[val_]\n    inp = Input(shape=(trn_x.shape[1],))\n    x = Dense(2000, activation=\"relu\")(inp)\n    x = BatchNormalization()(x)\n    x = Dropout(0.3)(x)\n    x = Dense(1000, activation=\"relu\")(x)\n    x = BatchNormalization()(x)\n    x = Dropout(0.3)(x)\n    x = Dense(500, activation=\"relu\")(x)\n    x = BatchNormalization()(x)\n    x = Dropout(0.2)(x)\n    x = Dense(100, activation=\"relu\")(x)\n    x = BatchNormalization()(x)\n    x = Dropout(0.2)(x)\n    out = Dense(512, activation=\"softmax\")(x)\n    clf = Model(inputs=inp, outputs=out)\n    clf.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['acc'])\n\n    es = callbacks.EarlyStopping(monitor='val_loss', min_delta=0.001, patience=10,\n                                 verbose=1, mode='min', baseline=None, restore_best_weights=True)\n\n    rlr = callbacks.ReduceLROnPlateau(monitor='val_loss', factor=0.5,\n                                      patience=3, min_lr=1e-6, mode='min', verbose=1)\n\n    clf.fit(trn_x, trn_y, validation_data=(val_x, val_y), callbacks=[es, rlr], epochs=100, batch_size=1024)\n    \n    test_fold_preds = clf.predict(test)\n    trans_y = [test_fold_preds[i,df_test['wheezy-copper-turtle-magic'][i]] for i in range(len(test_fold_preds))]\n    test_preds += np.array(trans_y)\/NFOLDS \n    \n    K.clear_session()\n    gc.collect()","490cb821":"submit(test_preds)","8f1eb967":"sub = pd.read_csv('submission.csv')","90610268":"sub.head(10)","e9c33865":"#### Clear garbage","95b21cd8":"### Yes, as you can see. They come from different distribution.","c09007e6":"### One-hot encodings and basic statistic based on categorical column 'wheezy-copper-turtle-magic'","dc6ba4d7":"### Load data","c1a55c9b":"### Decalare variables","75642538":"### Make submition","c38694a4":"### what if treat magic categorical feature as target","7f603014":"### Let's make KFold validation with 5 folds","d7d73fb3":"### Preparing data for Neural Network"}}