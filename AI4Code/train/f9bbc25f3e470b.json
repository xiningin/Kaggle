{"cell_type":{"b45525fb":"code","b610468d":"code","9561abf6":"code","00f7b986":"code","924fadc0":"code","502d9456":"code","a1e8112e":"code","38ccf825":"code","b1d81bbc":"code","0d9dad21":"code","5e23fdc6":"code","313e6e4f":"code","3c19672c":"code","06b1e439":"code","266a7514":"code","5d720d52":"markdown","adf89990":"markdown","7c456478":"markdown","6107006b":"markdown","6bd1b3a6":"markdown","f27aabf0":"markdown","d127a287":"markdown"},"source":{"b45525fb":"%matplotlib inline\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom mpl_toolkits.mplot3d import Axes3D\nimport matplotlib.tri as mtri\nfrom IPython.display import Image, display, SVG, clear_output, HTML\nplt.rcParams[\"figure.figsize\"] = (6, 6)\nplt.rcParams[\"figure.dpi\"] = 125\nplt.rcParams[\"font.size\"] = 14\nplt.rcParams['font.family'] = ['sans-serif']\nplt.rcParams['font.sans-serif'] = ['DejaVu Sans']\nplt.style.use('ggplot')\nsns.set_style(\"whitegrid\", {'axes.grid': False})\nplt.rcParams['image.cmap'] = 'gray' # grayscale looks better","b610468d":"import numpy as np # linear algebra\nfrom pydicom import read_file\n# opencv and skimage don't support it yet\ndef read_dicom(in_path): \n    dcm = read_file(str(in_path))\n    dcm.SamplesPerPixel =1 \n    return dcm.pixel_array\n\nfrom skimage.util import montage as montage2d\nimport pandas as pd\nfrom pathlib import Path\nfrom tqdm import tqdm\ntqdm.pandas()","9561abf6":"tiff_root = Path('..') \/ 'input' \/ 'horse-teeth-3d-ct-scans'\nall_tiff_df = pd.DataFrame({'path': list(tiff_root.glob('**\/*.dcm'))})\nall_tiff_df['full_id'] = all_tiff_df['path'].map(lambda x: x.relative_to(tiff_root).parent)\nall_tiff_df['sample'] = all_tiff_df['full_id'].map(lambda x: x.parts[1])\nall_tiff_df['specimen'] = all_tiff_df['path'].map(lambda x: x.stem[:-5])\nall_tiff_df['slice'] = all_tiff_df['path'].map(lambda x: int(x.stem[-4:]))\nall_tiff_df.sample(5)","00f7b986":"all_tiff_df.groupby(['full_id']).apply(lambda x: x.shape[0]).reset_index()","924fadc0":"sample_row = all_tiff_df.sample(1).iloc[0]\nprint(sample_row)\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(8, 4))\nsample_img = read_dicom(sample_row['path'])\nax1.imshow(sample_img)\nax1.set_title(sample_row['full_id'])\nax2.hist(np.ravel(sample_img))\nax2.set_yscale('log')","502d9456":"cur_slice_df = all_tiff_df[all_tiff_df['full_id'].isin({sample_row['full_id']})].sort_values('slice')\ncur_slice_df.head(3)","a1e8112e":"fossil_data = np.stack(cur_slice_df.iloc[::4]['path'].progress_map(lambda path: read_dicom(path)[::4, ::4]), 0)\nprint('Loading Fossil Data sized {}'.format(fossil_data.shape))","38ccf825":"%matplotlib inline\nslice_idx = int(fossil_data.shape[0]\/2)\nfig, (ax1, ax2) = plt.subplots(1,2, figsize = (10, 5))\n\nax1.imshow(fossil_data[slice_idx], cmap = 'bone')\nax1.set_title('Axial Slices')\n_ = ax2.hist(fossil_data[slice_idx].ravel(), 20)\nax2.set_title('Slice Histogram')\nax2.set_yscale('log')","b1d81bbc":"%matplotlib inline\nfrom scipy.ndimage.filters import median_filter\n# filter the data\nfilter_fossil_data = median_filter(fossil_data, (3, 3, 3))\n\n# setup the plot\nslice_idx = int(fossil_data.shape[0]\/2)\ntest_slice = fossil_data[slice_idx]\ntest_filt_slice = filter_fossil_data[slice_idx]\n# setup the default image arguments\nim_args = dict(cmap = 'bone', vmin = 0, vmax = 250)\n\nfig, (ax1, ax2) = plt.subplots(1,2, figsize = (10, 5))\nax1.imshow(test_slice, **im_args)\nax1.set_title('Unfiltered Slice')\n_ = ax2.imshow(test_filt_slice, **im_args)\nax2.set_title('Filtered Slice')","0d9dad21":"%matplotlib inline\nskip_border = 50\nskip_middle = 4\nfig, (ax1, ax2, ax3) = plt.subplots(1,3, figsize = (14, 5))\nax1.imshow(montage2d(filter_fossil_data[skip_border:-skip_border:skip_middle]),**im_args)\nax1.set_title('Axial Slices')\nax1.axis('off')\n\nax2.imshow(montage2d(filter_fossil_data.transpose(1,2,0)[skip_border:-skip_border:skip_middle]), **im_args)\nax2.set_title('Saggital Slices')\nax2.axis('off')\n\nax3.imshow(montage2d(filter_fossil_data.transpose(2,0,1)[skip_border:-skip_border:skip_middle]), **im_args)\nax3.set_title('Coronal Slices')\nax3.axis('off')","5e23fdc6":"from skimage.filters import try_all_threshold\ntry_all_threshold(filter_fossil_data[slice_idx])","313e6e4f":"%matplotlib inline\nfrom skimage.filters import threshold_otsu\nfig, (ax1, ax2) = plt.subplots(1,2, figsize = (10, 5))\nthresh_fossil_data = filter_fossil_data > threshold_otsu(filter_fossil_data)\nthresh_slice = thresh_fossil_data[slice_idx]\nax1.imshow(test_filt_slice, cmap = 'bone')\nax1.set_title('Filtered Slices')\n_ = ax2.imshow(thresh_slice)\nax2.set_title('Slice with Threshold')","3c19672c":"%matplotlib inline\nfrom skimage.morphology import binary_closing, ball\nclosed_fossil_data = binary_closing(thresh_fossil_data, ball(5))\nclose_slice = closed_fossil_data[slice_idx]\nfig, (ax1, ax2) = plt.subplots(1,2, figsize = (10, 5))\n\nax1.imshow(test_filt_slice, cmap = 'bone')\nax1.set_title('Filtered Slices')\n_ = ax2.imshow(close_slice)\nax2.set_title('Slice After Closing')","06b1e439":"from mpl_toolkits.mplot3d.art3d import Poly3DCollection\nfrom skimage import measure\ndef show_3d_mesh(p, threshold):\n    verts, faces, _, _ = measure.marching_cubes_lewiner(p, threshold)\n\n    fig = plt.figure(figsize=(10, 10))\n    ax = fig.add_subplot(111, projection='3d')\n    mesh = Poly3DCollection(verts[faces], alpha=0.9, edgecolor='none', linewidth = 0.1)\n    mesh.set_facecolor([.1, 1, .1])\n    mesh.set_edgecolor([1, 0, 0])\n    \n    ax.add_collection3d(mesh)\n\n    ax.set_xlim(0, p.shape[0])\n    ax.set_ylim(0, p.shape[1])\n    ax.set_zlim(0, p.shape[2])\n    \n    ax.view_init(45, 45)\n    return fig","266a7514":"from scipy.ndimage import zoom\n# we downsample the image to make 3d rendering quicker\nfossil_downscale = zoom(closed_fossil_data.astype(np.float32), 0.25)\n# now we display it with a nice mesh\n_ = show_3d_mesh(fossil_downscale, 0.5)","5d720d52":"# Organize and Load\nHere we can organize and load the data into all the different datasets","adf89990":"# Showing Various Slices\nHere we show the axial, saggital and coronal slices through the 3D Volume","7c456478":"Here we look at Fossil Data from the documentary shown [here](https:\/\/vimeo.com\/208535479) password is qbi2017 \n\nAn interactive video example [Video Instructions](http:\/\/people.ee.ethz.ch\/~maderk\/videos\/DoesMyFossilHaveTeeth.swf)\n\nThe steps are to\n\n- Load the data\n- Display each slice in every direction\n- Show a 3D isosurface plot","6107006b":"# Filtering\nHere we use a simple filter to clean up the data, a better one would preserve features","6bd1b3a6":"# Morphology\nHere we apply a closing operation to connect the nearby components","f27aabf0":"## Downsample and Read\nThe images are really big so we downsample and read","d127a287":"# Apply Threshold\nHere we apply a threshold to the data"}}