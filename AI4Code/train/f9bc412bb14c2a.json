{"cell_type":{"cf6b183c":"code","1db8e422":"code","c5d57957":"code","270ef821":"code","e24093be":"code","b8594fc9":"code","63db8d17":"code","fc21de48":"code","aff1a7e8":"code","51af0807":"code","2e144334":"code","c0da05d1":"code","01d77f80":"code","36542534":"code","68f06a47":"code","f324a0ed":"code","e66193e9":"code","70084fae":"code","88ede72f":"code","028b68ea":"code","18d5868d":"code","0edc6c06":"code","f9742b76":"code","8ac25111":"code","3beb9465":"code","d5ff105b":"code","7deadcf4":"code","76f22ef3":"markdown","7a319e6b":"markdown","d384c705":"markdown","87f02787":"markdown","781ef08b":"markdown","9ee6e8d8":"markdown","8de55930":"markdown","dd171c30":"markdown","1d3e2d12":"markdown","9b90d706":"markdown","c216f9dc":"markdown","809974ea":"markdown","c61f4095":"markdown","1b231f54":"markdown","2b416980":"markdown","7a237406":"markdown","917eecd7":"markdown","029e9850":"markdown","b9bd7f5d":"markdown"},"source":{"cf6b183c":"# Set up code checking\nimport os\nif not os.path.exists(\"..\/input\/train.csv\"):\n    os.symlink(\"..\/input\/home-data-for-ml-course\/train.csv\", \"..\/input\/train.csv\")  \n    os.symlink(\"..\/input\/home-data-for-ml-course\/test.csv\", \"..\/input\/test.csv\") \nfrom learntools.core import binder\nbinder.bind(globals())\nfrom learntools.ml_intermediate.ex2 import *\nprint(\"Setup Complete\")","1db8e422":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\n\n# Read the data\nX_full = pd.read_csv('..\/input\/train.csv', index_col='Id')\nX_test_full = pd.read_csv('..\/input\/test.csv', index_col='Id')\n\n# Remove rows with missing target, separate target from predictors\nX_full.dropna(axis=0, subset=['SalePrice'], inplace=True)\ny = X_full.SalePrice\nX_full.drop(['SalePrice'], axis=1, inplace=True)\n\n# To keep things simple, we'll use only numerical predictors\nX = X_full.select_dtypes(exclude=['object'])\nX_test = X_test_full.select_dtypes(exclude=['object'])\n\n# Break off validation set from training data\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, train_size=0.8, test_size=0.2,\n                                                      random_state=0)","c5d57957":"X_train.head()","270ef821":"# Shape of training data (num_rows, num_columns)\nprint(X_train.shape)\n\n# Number of missing values in each column of training data\nmissing_val_count_by_column = (X_train.isnull().sum())\nprint(missing_val_count_by_column[missing_val_count_by_column > 0])","e24093be":"sum(list(missing_val_count_by_column[missing_val_count_by_column > 0].values))\n","b8594fc9":"# Fill in the line below: How many rows are in the training data?\nnum_rows = X_train.shape[0]\n\n# Fill in the line below: How many columns in the training data\n# have missing values?\nnum_cols_with_missing = len(list(missing_val_count_by_column[missing_val_count_by_column > 0].keys()))\n\n# Fill in the line below: How many missing entries are contained in \n# all of the training data?\ntot_missing = sum(list(missing_val_count_by_column[missing_val_count_by_column > 0].values))\n\n# Check your answers\nstep_1.a.check()","63db8d17":"# Lines below will give you a hint or solution code\n#step_1.a.hint()\nstep_1.a.solution()","fc21de48":"# Check your answer (Run this code cell to receive credit!)\nstep_1.b.check()","aff1a7e8":"#step_1.b.hint()","51af0807":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_absolute_error\n\n# Function for comparing different approaches\ndef score_dataset(X_train, X_valid, y_train, y_valid):\n    model = RandomForestRegressor(n_estimators=100, random_state=0)\n    model.fit(X_train, y_train)\n    preds = model.predict(X_valid)\n    return mean_absolute_error(y_valid, preds)","2e144334":"cols_with_missing = [col for col in X_train.columns\n                     if X_train[col].isnull().any()]\ncols_with_missing","c0da05d1":"# Fill in the line below: get names of columns with missing values\ncols_missingvalues=list(missing_val_count_by_column[missing_val_count_by_column > 0].keys()) # Your code here\n\n# Fill in the lines below: drop columns in training and validation data\nreduced_X_train = X_train.drop(columns=cols_missingvalues, axis=1)\nreduced_X_valid = X_valid.drop(columns=cols_missingvalues, axis=1)\n\n# Check your answers\nstep_2.check()","01d77f80":"# Lines below will give you a hint or solution code\n#step_2.hint()\nstep_2.solution()","36542534":"print(\"MAE (Drop columns with missing values):\")\nprint(score_dataset(reduced_X_train, reduced_X_valid, y_train, y_valid))","68f06a47":"from sklearn.impute import SimpleImputer\n\n# Fill in the lines below: imputation\nhouse_imputer =  SimpleImputer()# Your code here\nimputed_X_train = pd.DataFrame(house_imputer.fit_transform(X_train)) # fit the transform to the training data\nimputed_X_valid = pd.DataFrame(house_imputer.transform(X_valid)) # use the fitted transform to impute the values in the validation data\n\n# Fill in the lines below: imputation removed column names; put them back\nimputed_X_train.columns = X_train.columns\nimputed_X_valid.columns = X_valid.columns\n\n# Check your answers\nstep_3.a.check()","f324a0ed":"# # test the behaviour of SimpleImputer\nimputed_X_train.loc[:,cols_missingvalues]","e66193e9":"# Lines below will give you a hint or solution code\n#step_3.a.hint()\nstep_3.a.solution()","70084fae":"print(\"MAE (Imputation):\")\nMAE_drop=score_dataset(reduced_X_train, reduced_X_valid, y_train, y_valid)\nMAE_impute=score_dataset(imputed_X_train, imputed_X_valid, y_train, y_valid)\nprint(\"Drop MAE is {}, Impute MAE is {}\".format(MAE_drop, MAE_impute))","88ede72f":"# Check your answer (Run this code cell to receive credit!)\nprint(score_dataset(imputed_X_train, imputed_X_valid, y_train, y_valid))\n\nstep_3.b.check()","028b68ea":"#step_3.b.hint()","18d5868d":"# Preprocessed training and validation features\nfinal_X_train = reduced_X_train\nfinal_X_valid = reduced_X_valid\n\n# Check your answers\nstep_4.a.check()","0edc6c06":"# Imputation\nfinal_imputer = SimpleImputer(strategy='median')\nfinal_X_train = pd.DataFrame(final_imputer.fit_transform(X_train))\nfinal_X_valid = pd.DataFrame(final_imputer.transform(X_valid))\n\n# Imputation removed column names; put them back\nfinal_X_train.columns = X_train.columns\nfinal_X_valid.columns = X_valid.columns","f9742b76":"# Lines below will give you a hint or solution code\n#step_4.a.hint()\nstep_4.a.solution()","8ac25111":"# Define and fit model\n#model = RandomForestRegressor(n_estimators=100, random_state=0)\nmodel = RandomForestRegressor(n_estimators=100, criterion='mae', random_state=0)\nmodel.fit(final_X_train, y_train)\n\n# Get validation predictions and MAE\npreds_valid = model.predict(final_X_valid)\nprint(\"MAE (Your approach):\")\nprint(mean_absolute_error(y_valid, preds_valid))","3beb9465":"# Fill in the line below: preprocess test data\n# drop columns in test data\n#final_X_test = X_test.drop(columns=cols_missingvalues, axis=1) #Input contains NaN, infinity or a value too large for dtype('float32').\n# impute\nfinal_X_test = pd.DataFrame(final_imputer.transform(X_test))\n# Fill in the line below: get test predictions\npreds_test = model.predict(final_X_test)\n\n# Check your answers\nstep_4.b.check()","d5ff105b":"# Lines below will give you a hint or solution code\n#step_4.b.hint()\nstep_4.b.solution()","7deadcf4":"# Save test predictions to file\noutput = pd.DataFrame({'Id': X_test.index,\n                       'SalePrice': preds_test})\noutput.to_csv('submission.csv', index=False)","76f22ef3":"### Part B\n\nCompare the MAE from each approach.  Does anything surprise you about the results?  Why do you think one approach performed better than the other?","7a319e6b":"---\n\n\n\n\n*Have questions or comments? Visit the [Learn Discussion forum](https:\/\/www.kaggle.com\/learn-forum\/161289) to chat with other Learners.*","d384c705":"# Step 3: Imputation\n\n### Part A\n\nUse the next code cell to impute missing values with the mean value along each column.  Set the preprocessed DataFrames to `imputed_X_train` and `imputed_X_valid`.  Make sure that the column names match those in `X_train` and `X_valid`.","87f02787":"### Part B\n\nUse the next code cell to preprocess your test data.  Make sure that you use a method that agrees with how you preprocessed the training and validation data, and set the preprocessed test features to `final_X_test`.\n\nThen, use the preprocessed test features and the trained model to generate test predictions in `preds_test`.\n\nIn order for this step to be marked correct, you need only ensure:\n- the preprocessed test DataFrame has no missing values, and\n- `final_X_test` has the same number of rows as `X_test`.","781ef08b":"# Step 2: Drop columns with missing values\n\nIn this step, you'll preprocess the data in `X_train` and `X_valid` to remove columns with missing values.  Set the preprocessed DataFrames to `reduced_X_train` and `reduced_X_valid`, respectively.  ","9ee6e8d8":"Run the next code cell without changes to save your results to a CSV file that can be submitted directly to the competition.","8de55930":"You can already see a few missing values in the first several rows.  In the next step, you'll obtain a more comprehensive understanding of the missing values in the dataset.\n\n# Step 1: Preliminary investigation\n\nRun the code cell below without changes.","dd171c30":"To compare different approaches to dealing with missing values, you'll use the same `score_dataset()` function from the tutorial.  This function reports the [mean absolute error](https:\/\/en.wikipedia.org\/wiki\/Mean_absolute_error) (MAE) from a random forest model.","1d3e2d12":"Use the next code cell to print the first five rows of the data.","9b90d706":"Run the next code cell to train and evaluate a random forest model.  (*Note that we don't use the `score_dataset()` function above, because we will soon use the trained model to generate test predictions!*)","c216f9dc":"### Part B\nConsidering your answers above, what do you think is likely the best approach to dealing with the missing values?","809974ea":"In this exercise, you will work with data from the [Housing Prices Competition for Kaggle Learn Users](https:\/\/www.kaggle.com\/c\/home-data-for-ml-course). \n\n![Ames Housing dataset image](https:\/\/i.imgur.com\/lTJVG4e.png)\n\nRun the next code cell without changes to load the training and validation sets in `X_train`, `X_valid`, `y_train`, and `y_valid`.  The test set is loaded in `X_test`.","c61f4095":"**This notebook is an exercise in the [Intermediate Machine Learning](https:\/\/www.kaggle.com\/learn\/intermediate-machine-learning) course.  You can reference the tutorial at [this link](https:\/\/www.kaggle.com\/alexisbcook\/missing-values).**\n\n---\n","1b231f54":"# Submit your results\n\nOnce you have successfully completed Step 4, you're ready to submit your results to the leaderboard!  (_You also learned how to do this in the previous exercise.  If you need a reminder of how to do this, please use the instructions below._)  \n\nFirst, you'll need to join the competition if you haven't already.  So open a new window by clicking on [this link](https:\/\/www.kaggle.com\/c\/home-data-for-ml-course).  Then click on the **Join Competition** button.\n\n![join competition image](https:\/\/i.imgur.com\/wLmFtH3.png)\n\nNext, follow the instructions below:\n1. Begin by clicking on the blue **Save Version** button in the top right corner of the window.  This will generate a pop-up window.  \n2. Ensure that the **Save and Run All** option is selected, and then click on the blue **Save** button.\n3. This generates a window in the bottom left corner of the notebook.  After it has finished running, click on the number to the right of the **Save Version** button.  This pulls up a list of versions on the right of the screen.  Click on the ellipsis **(...)** to the right of the most recent version, and select **Open in Viewer**.  This brings you into view mode of the same page. You will need to scroll down to get back to these instructions.\n4. Click on the **Output** tab on the right of the screen.  Then, click on the file you would like to submit, and click on the blue **Submit** button to submit your results to the leaderboard.\n\nYou have now successfully submitted to the competition!\n\nIf you want to keep working to improve your performance, select the blue **Edit** button in the top right of the screen. Then you can change your code and repeat the process. There's a lot of room to improve, and you will climb up the leaderboard as you work.\n\n\n# Keep going\n\nMove on to learn what **[categorical variables](https:\/\/www.kaggle.com\/alexisbcook\/categorical-variables)** are, along with how to incorporate them into your machine learning models.  Categorical variables are very common in real-world data, but you'll get an error if you try to plug them into your models without processing them first!","2b416980":"# Step 4: Generate test predictions\n\nIn this final step, you'll use any approach of your choosing to deal with missing values.  Once you've preprocessed the training and validation features, you'll train and evaluate a random forest model.  Then, you'll preprocess the test data before generating predictions that can be submitted to the competition!\n\n### Part A\n\nUse the next code cell to preprocess the training and validation data.  Set the preprocessed DataFrames to `final_X_train` and `final_X_valid`.  **You can use any approach of your choosing here!**  in order for this step to be marked as correct, you need only ensure:\n- the preprocessed DataFrames have the same number of columns,\n- the preprocessed DataFrames have no missing values, \n- `final_X_train` and `y_train` have the same number of rows, and\n- `final_X_valid` and `y_valid` have the same number of rows.","7a237406":"Run the next code cell without changes to obtain the MAE for this approach.","917eecd7":"### Part A\n\nUse the above output to answer the questions below.","029e9850":"Run the next code cell without changes to obtain the MAE for this approach.","b9bd7f5d":"Now it's your turn to test your new knowledge of **missing values** handling. You'll probably find it makes a big difference.\n\n# Setup\n\nThe questions will give you feedback on your work. Run the following cell to set up the feedback system."}}