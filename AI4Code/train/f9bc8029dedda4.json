{"cell_type":{"d2e3b549":"code","3acf4fa0":"code","ea9a664e":"code","5686ea3e":"code","6632020e":"code","25a61977":"code","4e5105ab":"code","e6acdc59":"code","34881dd0":"code","20c4137b":"code","6bf12145":"code","a866342e":"code","6f0144fa":"code","ceca74e7":"code","1e7f8fd0":"code","c06f5189":"code","96b88b7a":"code","4cd15abf":"code","2e836dac":"code","1ec6a3d7":"code","f8a16111":"code","48fde305":"code","df867815":"code","18ac2803":"code","07b3d719":"code","9e808d56":"code","b90fd39d":"code","0553c8d1":"code","8d395651":"code","0fc1b546":"code","75d83b9e":"code","93e0120f":"code","667f29d3":"code","9179c34b":"code","5fd2dfeb":"code","319b3ee4":"code","a4b91140":"code","88e7ca6c":"code","8165fc35":"code","8140bb4b":"code","2b361194":"code","22128713":"code","d30b3370":"code","31a9402d":"code","472b9860":"code","61049612":"code","0f15122a":"code","9c6a08e5":"code","9c79a6f9":"code","923ed0bb":"code","c9a91f79":"code","15c1cfe9":"code","f2cff530":"code","3e5d724e":"code","db7f0189":"code","be4b32a0":"code","736b80e3":"code","60ea7fb9":"code","ddca1d29":"code","e33e7cfa":"code","026a74a1":"code","2d68dc8d":"code","2bdffc5e":"code","f83ca7ee":"code","3e7bcbdb":"code","db35858a":"code","4ece6510":"code","d0234753":"code","f363ac58":"code","1d41830b":"code","024f5dbc":"code","3412212f":"markdown","3d1370c3":"markdown","f72dfbab":"markdown","fd3c18b3":"markdown","b32466ab":"markdown","037c5654":"markdown","73d9e967":"markdown","04207e3a":"markdown","1c7d57e5":"markdown","64c6b590":"markdown","e1f96676":"markdown","a0ff7df7":"markdown","9eb61eda":"markdown","73245b94":"markdown","52401df3":"markdown","51401f2b":"markdown","53f326f3":"markdown","8ac8ff42":"markdown","5228999c":"markdown","2f1bedef":"markdown","7717b7b9":"markdown","50624a29":"markdown","853ecb27":"markdown","2bf43c28":"markdown","2d939648":"markdown","4cf0ffdf":"markdown","7ee010bf":"markdown"},"source":{"d2e3b549":"# Importing the libraries\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings('ignore')\nimport plotly.graph_objects as go","3acf4fa0":"# Importing the dataset\ndataset = pd.read_csv('..\/input\/fifa19\/data.csv')","ea9a664e":"dataset.info()","5686ea3e":"# Viewing the top 10 rows of the dataset\ndataset.head(10)","6632020e":"# Viewing statistics of all numerical columns in the dataset\ndataset.describe()","25a61977":"# Fetching the maximum overall rating for all the given countries\ndf = dataset.groupby(['Nationality'], as_index=False)['Overall'].max()","4e5105ab":"df","e6acdc59":"data = dict(type = 'choropleth',\n            locations = df['Nationality'],\n            locationmode = 'country names',\n            colorscale = 'Viridis',\n            autocolorscale=False,\n            z=df['Overall'],\n            text = df[\"Nationality\"],\n            colorbar = {'title':'Overall rating'})","34881dd0":"layout = dict(geo = {'scope':'north america'},title=\"Maximum overall rating for countries in North America\")","20c4137b":"import plotly.graph_objs as gobj\ncol_map = gobj.Figure(data = [data],layout = layout)","6bf12145":"from plotly.offline import download_plotlyjs,init_notebook_mode,plot,iplot\ninit_notebook_mode(connected=True)\niplot(col_map)","a866342e":"layout = dict(geo = {'scope':'south america'},title=\"Maximum overall rating for countries in South America\")\ncol_map = gobj.Figure(data = [data],layout = layout)\ninit_notebook_mode(connected=True)\niplot(col_map)","6f0144fa":"layout = dict(geo = {'scope':'europe'},title=\"Maximum overall rating for countries in Europe\")\ncol_map = gobj.Figure(data = [data],layout = layout)\ninit_notebook_mode(connected=True)\niplot(col_map)","ceca74e7":"layout = dict(geo = {'scope':'asia'},title=\"Maximum overall rating for countries in Asia\")\ncol_map = gobj.Figure(data = [data],layout = layout)\ninit_notebook_mode(connected=True)\niplot(col_map)","1e7f8fd0":"layout = dict(geo = {'scope':'africa'},title=\"Maximum overall rating for countries in Africa\")\ncol_map = gobj.Figure(data = [data],layout = layout)\ninit_notebook_mode(connected=True)\niplot(col_map)","c06f5189":"layout = dict(geo = {'scope':'world'},title=\"Maximum overall rating country-wise across the world\")\ncol_map = gobj.Figure(data = [data],layout = layout)\ninit_notebook_mode(connected=True)\niplot(col_map)","96b88b7a":"#Visualisation - Age vs Overall\nimport plotly.express as px\nfig = px.scatter(dataset, x='Age', y='Overall',title = \"Age vs Overall Rating correlation\")\nfig.update_traces(marker=dict(size=8,line=dict(width=1.5,color='blue')),selector=dict(mode='markers'))\nfig.update_xaxes(title_text='Age of FIFA players')\nfig.update_yaxes(title_text='Overall rating of players')\nfig.show()","4cd15abf":"#Visualisation - Age vs Potential\nfig = px.scatter(dataset, x='Age', y='Potential',title = \"Age vs Potential correlation\")\nfig.update_traces( marker=dict(color='lawngreen',line=dict(width=1.5,color='black'),size=8))              \nfig.update_xaxes(title_text='Age of FIFA players')\nfig.update_yaxes(title_text='Potential of players')\nfig.show()","2e836dac":"df1 = dataset.filter(['Preferred Foot'], axis=1)","1ec6a3d7":"df1 = df1.dropna()","f8a16111":"df1 = df1.groupby(['Preferred Foot']).size().reset_index(name='count')","48fde305":"df1","df867815":"#Visualisation - Preferred Foot of FIFA Players\nfig = px.pie(df1, values='count',names = 'Preferred Foot',title='Preferred Foot of FIFA Players')\nfig.show()","18ac2803":"df2 = dataset.filter(['Position'], axis=1)","07b3d719":"df2 = df2.dropna()","9e808d56":"df2 = df2.groupby(['Position']).size().reset_index(name='count')","b90fd39d":"df2","0553c8d1":"# Visualising the positions played by different FIFA players\ndf2.loc[df2['count'] < 300, 'Position'] = 'Other positions'\nfig = px.pie(df2, values='count',names = 'Position',title='Positions of FIFA Players')\nfig.show()","8d395651":"# Visualising - Age vs shot power correlation\nfig = px.box(dataset, x=\"ShotPower\", y=\"Age\",title = 'Age vs Shot correlation')\nfig.update_traces( marker=dict(color='crimson'))\nfig.show()","0fc1b546":"df3 = dataset.filter(['Age','Wage','Potential'], axis=1)","75d83b9e":"df3","93e0120f":"df3['Wage'] = df3['Wage'].str.replace('\u20ac', '').str.replace('K','').astype(int)","667f29d3":"df3.isnull().values.any()","9179c34b":"df3","5fd2dfeb":"# Visualisation- Age vs wage correlation\nfig = px.scatter(df3, x='Age', y='Wage',title = \"Age vs Wage correlation\")\nfig.update_traces(marker=dict(size=8,color = '#EB89B5',line=dict(width=1.5,color='fuchsia')),selector=dict(mode='markers'))\nfig.update_xaxes(title_text='Age of FIFA players')\nfig.update_yaxes(title_text='Wage of players in Thousand Euros')\nfig.show()","319b3ee4":"# Visualsing - Potential vs wage correlation\nfig = px.scatter(df3, x='Potential', y='Wage',title = \"Potential vs Wage correlation\")\nfig.update_traces(marker=dict(size=8,color = 'orange',line=dict(width=1.5,color='red')),selector=dict(mode='markers'))\nfig.update_xaxes(title_text='Potential of FIFA players')\nfig.update_yaxes(title_text='Wage of players in Thousand Euros')\nfig.show()","a4b91140":"# Total number of distinct clubs in the dataset\nlen(dataset['Club'].unique())","88e7ca6c":"df = dataset.groupby(['Club'], as_index=False)['Overall'].mean()\ndf['Overall'] = round(df['Overall'],2)\ntop25Clubs = df.sort_values('Overall',ascending=False).head(25)","8165fc35":"# Visualising top 25 clubs based on the average overall rating of the players\nfig = px.bar(top25Clubs, x='Club', y='Overall', title=\"Top 25 Clubs based on the average Overall rating of the players\",\\\n            color_discrete_sequence=['teal']) \nfig.update_yaxes(title_text='Average Overall rating')\nfig.update_xaxes(title_text='Clubs')\nfig.show()","8140bb4b":"temp = dataset[dataset['Value'].str.contains('M')]\ntemp = temp.filter(['Value','Club','Nationality'], axis=1)\ntemp","2b361194":"temp['Value'] = temp['Value'].str.replace('\u20ac', '').str.replace('M','').astype(float)\ntemp","22128713":"# Visualising the richest clubs in the dataset\ntemp.loc[temp['Value'] < 50.0, 'Club'] = 'Other clubs'\nresult = temp.groupby('Club').sum().sort_values('Value',ascending=False)\nvls = result['Value'].values.tolist()\ntotalCount = []\nlbl = []\nfor i in range(0,len(vls)):\n    totalCount.append(vls[i])\n    total = sum(totalCount)\nfor j in range(0,len(vls)):\n    percentage=float((vls[j]\/total)*100)\n    lbl.append(str(result.index.values[j] +\" \"+str(round(percentage,2))+\"%\"))\nlabels = lbl\nlayout = dict(title=\"Value (in million \u20ac) of various Clubs\")\nfig = go.Figure(data=[go.Pie(labels=labels,values=result.Value)],layout=layout)\nfig.update_traces(hoverinfo='value+label',textinfo='none')\nfig.show()","d30b3370":"# Visualising- Aggregate national value in million Euros\ntemp.loc[temp['Value'] < 50.0, 'Nationality'] = 'Other nations'\nresult = temp.groupby('Nationality').sum().sort_values('Value',ascending=False)\nvls = result['Value'].values.tolist()\ntotalCount = []\nlbl = []\nfor i in range(0,len(vls)):\n    totalCount.append(vls[i])\n    total = sum(totalCount)\nfor j in range(0,len(vls)):\n    percentage=float((vls[j]\/total)*100)\n    lbl.append(str(result.index.values[j] +\" \"+str(round(percentage,2))+\"%\"))\nlabels = lbl\nlayout = dict(title=\"Aggregate national value (in million \u20ac)\")\nfig = go.Figure(data=[go.Pie(labels=labels,values=result.Value)],layout=layout)\nfig.update_traces(hoverinfo='value+label',textinfo='none')\nfig.show()","31a9402d":"#Dropping unnecessary columns for creating a heatmap\nhm = dataset.drop(['Unnamed: 0','ID','Jersey Number','Contract Valid Until','GKDiving',\n                  'GKHandling','GKKicking','GKPositioning','GKReflexes'],axis=1)\n## Determining the relevancy of features using heatmap in calculating the outcome variable\ncorrmat = hm.corr()\ntop_corr_features = corrmat.index\nplt.figure(figsize=(28,28))\n#Plotting heat map\ng=sns.heatmap(hm[top_corr_features].corr(),annot=True,linewidths=.5)\nb, t = plt.ylim() \nb += 0.5\nt -= 0.5 \nplt.ylim(b, t)\nplt.title('Correlation Matrix',fontdict = {'fontsize' : 20})\nplt.show() ","472b9860":"# Dropping all null values from the feature columns\ndataset = dataset.dropna(axis=0, subset=['Reactions','Composure','International Reputation','ShortPassing'\n            ,'Vision','LongPassing','BallControl'])","61049612":"# Splitting the dataset into features and outcome variable(Overall)\ny = dataset.iloc[:,7].values\n# Picking up the top ten most useful features based on the above heatmap \nx = dataset[['Age','Special','Reactions','Composure','Potential','International Reputation','ShortPassing'\n            ,'Vision','LongPassing','BallControl']].values\nprint(x)","0f15122a":"# Splitting the dataset into training and test set\nfrom sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=0)","9c6a08e5":"## Training the multiple linear regression on the training set\nfrom sklearn.linear_model import LinearRegression\nregressor_MultiLinear = LinearRegression()\nregressor_MultiLinear.fit(x_train,y_train)","9c79a6f9":"## Predicting test results\ny_pred = regressor_MultiLinear.predict(x_test)","923ed0bb":"# Calculating r2 score\nfrom sklearn.metrics import r2_score\nr2_MultiLinear = r2_score(y_test,y_pred)\nprint(r2_MultiLinear)","c9a91f79":"## Finding out the optimal degree of polynomial regression\nfrom sklearn.preprocessing import PolynomialFeatures\nsns.set_style('darkgrid')\nscores_list = []\npRange = range(2,6)\nfor i in pRange :\n    poly_reg = PolynomialFeatures(degree=i)\n    x_poly = poly_reg.fit_transform(x_train)\n    poly_regressor = LinearRegression()\n    poly_regressor.fit(x_poly,y_train)\n    y_pred = poly_regressor.predict(poly_reg.fit_transform(x_test))\n    scores_list.append(r2_score(y_test,y_pred))\nplt.plot(pRange,scores_list,linewidth=2)\nplt.xlabel('Degree of polynomial')\nplt.ylabel('r2 score with varying degrees')\nplt.show()","15c1cfe9":"## Training the polynomial regression on the training model\npoly_reg = PolynomialFeatures(degree=3)\nx_poly = poly_reg.fit_transform(x_train)\npoly_regressor = LinearRegression()\npoly_regressor.fit(x_poly,y_train)\ny_pred = poly_regressor.predict(poly_reg.fit_transform(x_test))\nr2_poly = r2_score(y_test,y_pred)\nprint(r2_poly)","f2cff530":"## Finding the optimal number of neighbors for KNN regression\nfrom sklearn.neighbors import KNeighborsRegressor\nknnRange = range(1,21,1)\nscores_list = []\nfor i in knnRange:\n    regressor_knn = KNeighborsRegressor(n_neighbors=i)\n    regressor_knn.fit(x_train,y_train)\n    y_pred = regressor_knn.predict(x_test)\n    scores_list.append(r2_score(y_test,y_pred))\nplt.plot(knnRange,scores_list,linewidth=2,color='green')\nplt.xticks(knnRange)\nplt.xlabel('No. of neighbors')\nplt.ylabel('r2 score of KNN')\nplt.show()  ","3e5d724e":"# Training the KNN model on the training set\nregressor_knn = KNeighborsRegressor(n_neighbors=6)\nregressor_knn.fit(x_train,y_train)\ny_pred = regressor_knn.predict(x_test)\nr2_knn = r2_score(y_test,y_pred)\nprint(r2_knn)","db7f0189":"# Training the Decision Tree regression on the training model\nfrom sklearn.tree import DecisionTreeRegressor\nregressor_Tree = DecisionTreeRegressor(random_state=0)\nregressor_Tree.fit(x_train,y_train)","be4b32a0":"# Predicting test results\ny_pred = regressor_Tree.predict(x_test)","736b80e3":"# Calculating r2 score\nr2_tree = r2_score(y_test,y_pred)\nprint(r2_tree)","60ea7fb9":"# Finding out the optimal number of trees for Random Forest Regression\nfrom sklearn.ensemble import RandomForestRegressor\nforestRange=range(50,500,50)\nscores_list=[]\nfor i in forestRange: \n    regressor_Forest = RandomForestRegressor(n_estimators=i,random_state=0)\n    regressor_Forest.fit(x_train,y_train)\n    y_pred = regressor_Forest.predict(x_test)\n    scores_list.append(r2_score(y_test,y_pred))\nplt.plot(forestRange,scores_list,linewidth=2,color='maroon')\nplt.xticks(forestRange)\nplt.xlabel('No. of trees')\nplt.ylabel('r2 score of Random Forest Reg.')\nplt.show()  ","ddca1d29":"# Training the Random Forest regression on the training model\nregressor_Forest = RandomForestRegressor(n_estimators=150,random_state=0)\nregressor_Forest.fit(x_train,y_train)\ny_pred = regressor_Forest.predict(x_test)\nr2_forest = r2_score(y_test,y_pred)\nprint(r2_forest)","e33e7cfa":"## Feature Scaling for SVR\nfrom sklearn.preprocessing import StandardScaler\nsc_x = StandardScaler()\nx_train = sc_x.fit_transform(x_train)\nx_test = sc_x.transform(x_test)\nsc_y = StandardScaler()\ny_train = sc_y.fit_transform(np.reshape(y_train,(len(y_train),1)))\ny_test = sc_y.transform(np.reshape(y_test,(len(y_test),1)))","026a74a1":"## Training the Linear SVR model on the training set\nfrom sklearn.svm import SVR\nregressor_SVR = SVR(kernel='linear')\nregressor_SVR.fit(x_train,y_train)","2d68dc8d":"## Predicting test results\ny_pred = regressor_SVR.predict(x_test)","2bdffc5e":"## Calculating r2 score\nr2_linearSVR = r2_score(y_test,y_pred)\nprint(r2_linearSVR)","f83ca7ee":"## Training the Non-linear SVR model on the training set\nfrom sklearn.svm import SVR\nregressor_NonLinearSVR = SVR(kernel='rbf')\nregressor_NonLinearSVR.fit(x_train,y_train)","3e7bcbdb":"## Predicting test results\ny_pred = regressor_NonLinearSVR.predict(x_test)","db35858a":"## Calculating r2 score\nr2_NonlinearSVR = r2_score(y_test,y_pred)\nprint(r2_NonlinearSVR)","4ece6510":"## Applying the XGBoost Regression model on the training set\nfrom xgboost import XGBRegressor\nregressor_xgb = XGBRegressor()\nregressor_xgb.fit(x_train,y_train)","d0234753":"## Predicting test results\ny_pred = regressor_xgb.predict(x_test)","f363ac58":"## Calculating r2 score\nr2_xgb = r2_score(y_test,y_pred)\nprint(r2_xgb)","1d41830b":"## Comparing the r2 scores of different models\nlabelList = ['Multiple Linear Reg.','Polynomial Reg.','K-NearestNeighbors','Decision Tree','Random Forest',\n             'Linear SVR','Non-Linear SVR','XGBoost Reg.']\nmylist = [r2_MultiLinear,r2_poly,r2_knn,r2_tree,r2_forest,r2_linearSVR,r2_NonlinearSVR,r2_xgb]\nfor i in range(0,len(mylist)):\n    mylist[i]=np.round(mylist[i]*100,decimals=2)\nprint(mylist)","024f5dbc":"plt.figure(figsize=(14,8))\nax = sns.barplot(x=labelList,y=mylist)\nplt.yticks(np.arange(0, 101, step=10))\nplt.title('r2 score comparison among different regression models',fontweight='bold')\nfor p in ax.patches:\n    width, height = p.get_width(), p.get_height()\n    x, y = p.get_xy() \n    ax.annotate('{:.2f}%'.format(height), (x +0.25, y + height + 0.25))\nplt.show()","3412212f":"### Linear Support Vector Regression","3d1370c3":"----","f72dfbab":"---","fd3c18b3":"<div class=\"alert alert-block alert-info\">\n<b>Insight:<\/b> Highest rated players across the world are from countries including Brazil, Argentina, \n    Uruguay, Portugal, Spain, France, Germany and Poland.\n<\/div>","b32466ab":"<div class=\"alert alert-block alert-info\">\n<b>Insight:<\/b> We see a rise in wage till the age bracket of 25-30 years after which we observe a decline in wage. \n    Also, we see a few players within the age bracket of 30-35 with exceptionally high wages and these are top five \n    earning players in the dataset. \n<\/div>","037c5654":"### K-Nearest Neighbors Regression","73d9e967":"---","04207e3a":"---","1c7d57e5":"### Decision Tree Regression","64c6b590":"### Multiple Linear Regression","e1f96676":"---","a0ff7df7":"<div class=\"alert alert-block alert-info\">\n<b>Insight:<\/b> As we can decipher from the above plot, most of the highest rated players fall in the age bracket of 25-33.\n<\/div>","9eb61eda":"### Data Preprocessing","73245b94":"---","52401df3":"<div class=\"alert alert-block alert-info\">\n<b>Insight:<\/b> Unlike majority of overall high rated players , high potential players are spread across a wider \n    age bracket ranging from 17 years to 33 years. \n<\/div>","51401f2b":"---","53f326f3":"<div class=\"alert alert-block alert-info\">\n<b>Insight:<\/b> The most common positions played by the footballers include ST,GK,CB,CM,LB and RB. \n<\/div> ","8ac8ff42":"---","5228999c":"---","2f1bedef":"### Polynomial Regression","7717b7b9":"<div class=\"alert alert-block alert-info\">\n<b>Insight:<\/b> The median age of players with high shot power (greater than 80) ranges from 26 to 33. Interestingly, the \n    median age of players with low shot power (less than 20) ranges from 23 to 31.\n<\/div>","50624a29":"<div class=\"alert alert-block alert-info\">\n<b>Insight:<\/b> With increase in potential of players, there is an increase in the wage. However, there are a few exceptions\n    for eg. players with potential greater than 90 and wage less than 200. \n<\/div>","853ecb27":"---","2bf43c28":"### Random Forest Regression","2d939648":"---","4cf0ffdf":"### Non-linear Support Vector Regression","7ee010bf":"---"}}