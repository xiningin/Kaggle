{"cell_type":{"d36993cc":"code","5caa3e0d":"markdown"},"source":{"d36993cc":"import random\nimport requests\n  \n# getNumList \u4e3b\u8981\u5728\u6bcf\u7d44\u6700\u4f4e\u4eba\u6578\u4e0b, \u5c07\u4e0d\u8db3 10 \u4eba\u7684\u5206\u7d44\n# \u5e73\u5747\u5206\u914d\u81f3\u5404\u7d44\ndef getNumList(total, eachGrp=10):\n    # total is the number of students\n    # each group at least 10 students\n    #eachGrp = 10;\n    # may divide into \"grpNum\" number of group\n    grpNum = total \/\/ eachGrp;\n    # check grpNum\n    #print(grpNum)\n    # vacan list\n    splits = []\n    # find remainder when total number divid into \"grpNum\" number of group\n    remainder = total % grpNum\n    # number of people in one group by calculation\n    calGrp = total \/\/ grpNum\n      \n    for i in range(grpNum):\n        splits.append(calGrp)\n          \n    # check first splits\n    #print(splits)\n    \n    for i in range(remainder):\n        splits[i] += 1\n      \n    # check final splits\n    #print(splits);\n    return splits;\n  \n# \u5132\u5b58\u5b78\u751f\u540d\u55ae\u8cc7\u6599\u7684 url\ntarget_url = \"http:\/\/mde.tw\/cp2020\/downloads\/get_student_list\/2020spring_cd_2a_list.txt\"\n# \u5229\u7528 requests \u8b80\u53d6 url \u4e2d\u7684\u8cc7\u6599\nf = requests.get(target_url)\n# get student list from target_url\n# \u5229\u7528 splitlines() \u5c07\u8cc7\u6599\u653e\u5165\u6578\u5217 studList\nstudList = f.text.splitlines()\n# \u6bcf\u7d44\u9810\u8a08\u5206\u7d44\u7684\u6700\u4f4e\u4eba\u6578\nnum_in_one_group = 10\n# \u6bcf\u7d44\u5b78\u54e1\u66ab\u5b58\u6578\u5217\ngpList = []\n# \u5168\u73ed\u5206\u7d44\u6578\u5217\ngroup = []\n# \u5404\u7d44\u4eba\u6578\u6578\u5217\nnumList = []\n# get numList\nnumList = getNumList(len(studList), num_in_one_group)\n# check numList\n# \u5217\u51fa\u5df2\u7d93\u88dc\u9f4a\u7684\u5404\u7d44\u4eba\u6578\u6578\u5217\nprint(\"\u9810\u8a08\u5404\u7d44\u4eba\u6578\u6578\u5217:\" + str(numList))\n  \noutput = \"\"\ngth = 1\ninc = 0\n  \n# \u5f04\u4e82 studList\nrandom.shuffle(studList)\noutput += \"\u4ee5\u4e0b\u70ba\u5c1a\u672a\u6392\u5e8f\u524d\u7684\u5404\u7d44\u5b78\u54e1\u5b78\u865f: \\n\"\nfor i in numList:\n    # \u5217\u5370\u5340\u9694\u7b26\u865f\n    output += '=' * 20 + \"\\n\";\n    output += \"group \" + str(gth) + \" \u6709 \" + str(i) + \" \u4eba: \\n\"\n    # \u6bcf\u7d44\u5b78\u54e1\u66ab\u5b58\u6578\u5217, \u5728\u6b64 reset\n    gpList = []\n    for j in range(i):\n        output += studList[j+inc] + \"\\n\"\n        # \u5728\u5404\u5206\u7d44\u6578\u5217\u4e2d\u52a0\u5165\u5c07\u5c0d\u61c9\u7684\u5b78\u54e1\u5b78\u865f\n        gpList.append(studList[j+inc])\n        \n    gth = gth + 1\n    inc = inc + j\n    # \u5c07\u5404\u7d44\u5b78\u54e1\u6578\u5217\u4f9d\u7167\u5b78\u865f\u6392\u5e8f\n    gpList.sort()\n    group.append(gpList)\n  \n# \u5217\u51fa\u5c1a\u672a\u6392\u5e8f\u524d\u7684\u5206\u7d44\u7d50\u679c\nprint(output)\n# \u5217\u51fa\u5df2\u7d93\u5b8c\u6210\u6392\u5e8f\u7684\u5206\u7d44\u6578\u5217\nprint(\"\u5df2\u7d93\u6392\u5e8f\u5f8c\u7684\u5206\u7d44\u6578\u5217:\" + str(group))\n  \noutput = \"\"\n# \u5217\u51fa\u5df2\u7d93\u6392\u5e8f\u5f8c\u7684\u5206\u7d44\u540d\u55ae\noutput += '=' * 25 + \"\\n\"\noutput += '\u4ee5\u4e0b\u70ba\u6392\u5e8f\u5f8c\u7684\u5404\u7d44\u6210\u54e1\u540d\u55ae:\\n'\ngth = 1\n  \n# \u5148\u5217\u51fa\u7d14\u6587\u5b57\u4ee5 \\n \u8df3\u884c\u7d44\u54e1\u8cc7\u6599\nfor i in range(len(group)):\n    # \u5217\u5370\u5340\u9694\u7b26\u865f\n    output += '=' * 20 + \"\\n\"\n    output += \"group\" + str(gth) + \"\\n\"\n    gpList = []\n      \n    for j in range(len(group[i])):\n        output += str(group[i][j]) + \"\\n\"\n        \n    gth = gth + 1\n      \nprint(output)","5caa3e0d":"\u5229\u7528 Kaggle \u5b78\u7fd2 Python\n----\n\u9019\u88e1\u662f CP2020 \u8ab2\u7a0b\u7684 Kaggle \u7dda\u4e0a\u7a0b\u5f0f\u74b0\u5883\n\u5f9e https:\/\/www.kaggle.com\/colinmorris\/hello-python \u5b78\u5230\u7684\u7b2c\u4e00\u4ef6\u8207 Python \u6709\u95dc\u7684\u7528\u6cd5\u662f\n1) \u8b8a\u6578\u6307\u5b9a Variable assignment \u6216\u8005\u7a31\u70ba\u8b8a\u6578\u8ce6\u503c\n2) \u63a5\u4e0b\u4f86\u5247\u662f\u5b78\u7fd2\u5982\u4f55\u547c\u53eb\u51fd\u5f0f Function calls\n3) \u5982\u4f55\u5728\u7a0b\u5f0f\u78bc\u4e2d\u52a0\u5165\u8aaa\u660e\u8a3b\u89e3, \u5176\u4e2d\u5305\u62ec\u55ae\u884c\u8a3b\u89e3\u8207\u96d9\u884c\u8a3b\u89e3, \u5728\u500b\u4eba\u6240\u5beb\u7684\u7a0b\u5f0f\u4e2d\u52a0\u4e0a\u8a3b\u89e3\u53ef\u4ee5\u8b93\u4e4b\u5f8c\u95b1\u8b80\u80fd\u5920\u5145\u5206\u4e86\u89e3\u7576\u6642\u7684\u60f3\u6cd5\u8207\u8a2d\u8a08\u6d41\u7a0b\n\u8acb\u6ce8\u610f\u5168\u5f62 \uff03 \u4ee5\u53ca \u534a\u5f62 # \u7684\u5dee\u7570\n\u57fa\u672c\u7684 Python \u7a0b\u5f0f\u4e5f\u53ef\u4ee5\u5728 http:\/\/mde.tw\/lab\/content\/Python.html \u4e2d\u57f7\u884c\n\n\u96fb\u8166\u8f14\u52a9\u8a2d\u8a08\u5ba4\u7684\u7db2\u8def\u8a2d\u5b9a\n----\n\u70ba\u4e86\u8b93\u6bcf\u4e00\u53f0\u96fb\u8166\u80fd\u5920\u53d6\u5f97\u8f03\u5927\u7684\u806f\u5916\u983b\u5bec, \u56e0\u6b64\u4e0a\u8ab2\u6642\u63a1\u7d14 IPv6 \u5354\u5b9a, \u4ee5 DHCP6 \u4e0a\u7db2, \u4f46\u5fc5\u9808\u81ea\u884c\u5c07 DNS \u4f3a\u670d\u5668\u8a2d\u70ba 2001:b000:168::1, \u5982\u6b64\u5c31\u53ef\u4ee5\u6b63\u5e38\u9023\u7dda\u5230\u652f\u63f4 IPv6 \u5354\u5b9a\u7684\u5176\u4ed6\u4f3a\u670d\u5668, \u4f46\u662f\u82e5\u8981\u9023\u7dda\u5230\u76ee\u524d\u53ea\u652f\u63f4 IPv4 \u7684\u4f3a\u670d\u5668, \u5247\u5fc5\u9808\u900f\u904e\u80fd\u540c\u6642\u652f\u63f4 IPv4 \u8207 IPv6 \u5354\u5b9a\u7684\u4ee3\u7406\u4e3b\u6a5f (Proxy Server)\n\n\u4f7f\u7528 Github Pages \u5efa\u7acb\u500b\u4eba\u7db2\u7ad9\n----\n\u8ab2\u7a0b\u4f7f\u7528\u8acb\u5728 Github \u5e33\u865f\u4e2d\u8a2d\u5b9a cp2020 \u5009\u5132\u4f5c\u70ba\u8ab2\u7a0b\u7db2\u9801, \u800c\u500b\u4eba\u7684\u7db2\u9801\u5247\u53ef\u5c07\u5009\u5132\u76f4\u63a5\u547d\u540d\u70ba \u5e33\u865f.github.io \u5373\u53ef\u76f4\u63a5\u5c07\u5009\u5132\u5167\u5bb9\u8207 Github Pages \u5c0d\u61c9.\n\n\u540c\u4e00\u4efd\u8cc7\u6599\u7684\u591a\u5143\u767c\u4f48\n----\n\u4e00\u822c\u7db2\u7ad9\n\n\u7db2\u8a8c\n\n\u7c21\u5831"}}