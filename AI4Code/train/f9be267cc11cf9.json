{"cell_type":{"bc898765":"code","18e66042":"code","34499460":"code","e85a5af4":"code","9718040a":"code","760a540a":"code","42827755":"code","99408b6c":"code","0815e31d":"code","e95addcf":"markdown","97324cc0":"markdown","360a9eb4":"markdown","bdbb07c5":"markdown","bd2dce84":"markdown","3f995995":"markdown","46cce68b":"markdown","3cdc7343":"markdown","530cb08e":"markdown","e1d21a43":"markdown","66732f1c":"markdown","623ca9b0":"markdown"},"source":{"bc898765":"## For data\nimport pandas as pd\nimport numpy as np\n## For plotting\nimport matplotlib.pyplot as plt\n## For parametric fitting\nfrom scipy import optimize","18e66042":"data = pd.read_csv(\"..\/input\/ntt-data-global-ai-challenge-06-2020\/COVID-19_and_Price_dataset.csv\", sep=\",\")\ndata['Date'] = pd.to_datetime(data['Date'])\ndtf = pd.DataFrame(data['Date'])\ndtf['total'] = data['UnitedStates_total_cases']\ndtf['new'] = data['UnitedStates_new_cases']\ndtf.set_index('Date', inplace=True)\ndtf.sort_index(inplace=True)\ndtf.head(10)","34499460":"fig, ax = plt.subplots(nrows = 2, ncols = 1, sharex = True, figsize = (13, 7))\nax[0].scatter(dtf.index, dtf['total'].values, color = 'black')\nax[0].set(title = 'total cases')\nax[1].bar(dtf.index, dtf['new'].values)\nax[1].set(title = 'new cases')\nplt.show()","e85a5af4":"'''\nLinear function: f(x) = a + b*x\n'''\ndef f(x):\n    \n    return 10 + 25000*x\n\ny_linear = f(x=np.arange(len(dtf)))\n'''\nExponential function: f(x) = a + b^x\n'''\ndef f(x):\n    return 10 + 1.18**x\n\ny_exponential = f(x=np.arange(len(dtf)))\n\n'''\nLogistic function: f(x) = a \/ (1 + e^(-b*(x-c)))\n'''\ndef f(x): \n    return 2500000 \/ (1 + np.exp(-0.5*(x-20)))\n\ny_logistic = f(x=np.arange(len(dtf)))","9718040a":"fig, ax =plt.subplots(figsize=(13,5))# plt.subplots(nrows = 3, ncols = 1, sharex = True, figsize = (13, 7)) \nax.scatter(dtf[\"total\"].index, dtf[\"total\"].values, color=\"black\")\nax.plot(dtf[\"total\"].index, y_logistic, label=\"logistic\", color=\"blue\")\nax.plot(dtf[\"total\"].index, y_linear, label=\"linear\", color=\"red\")\nplt.legend()\nplt.show()\n\nfig, ax = plt.subplots(nrows = 2, ncols = 1, sharex = True, figsize = (13, 7)) \nax[0].scatter(dtf[\"total\"].index, dtf[\"total\"].values, color=\"black\")\nax[1].plot(dtf[\"total\"].index, y_exponential, label=\"exponential\", color=\"green\")\nplt.show()","760a540a":"'''\nLogistic function: f(x) = capacity \/ (1 + e^-k*(x - midpoint) )\n'''\ndef logistic_f(X, c, k, m):\n    y = c \/ (1 + np.exp(-k*(X-m)))\n    return y\n## optimize from scipy\nX_l = np.arange(len(dtf[\"total\"]))\ny_l = dtf[\"total\"].values\np0_l = [np.max(dtf[\"total\"]), 1, 1]\nlogistic_model, cov_l = optimize.curve_fit(logistic_f, X_l, y_l, p0_l)","42827755":"\n\n'''\nPlot parametric fitting.\n'''\ndef utils_plot_parametric(dtf, zoom=30, figsize=(15,5)):\n    ## interval\n    dtf[\"residuals\"] = dtf[\"ts\"] - dtf[\"model\"]\n    dtf[\"conf_int_low\"] = dtf[\"forecast\"] - 1.96*dtf[\"residuals\"].std()\n    dtf[\"conf_int_up\"] = dtf[\"forecast\"] + 1.96*dtf[\"residuals\"].std()\n    fig, ax = plt.subplots(nrows=1, ncols=2, figsize=figsize)\n    \n    ## entire series\n    dtf[\"ts\"].plot(marker=\".\", linestyle='None', ax=ax[0], title=\"Parametric Fitting\", color=\"black\")\n    dtf[\"model\"].plot(ax=ax[0], color=\"green\")\n    dtf[\"forecast\"].plot(ax=ax[0], grid=True, color=\"red\")\n    ax[0].fill_between(x=dtf.index, y1=dtf['conf_int_low'], y2=dtf['conf_int_up'], color='b', alpha=0.3)\n   \n    ## focus on last\n    first_idx = dtf[pd.notnull(dtf[\"forecast\"])].index[0]\n    first_loc = dtf.index.tolist().index(first_idx)\n    zoom_idx = dtf.index[first_loc-zoom]\n    dtf.loc[zoom_idx:][\"ts\"].plot(marker=\".\", linestyle='None', ax=ax[1], color=\"black\", \n                                  title=\"Zoom on the last \"+str(zoom)+\" observations\")\n    dtf.loc[zoom_idx:][\"model\"].plot(ax=ax[1], color=\"green\")\n    dtf.loc[zoom_idx:][\"forecast\"].plot(ax=ax[1], grid=True, color=\"red\")\n    ax[1].fill_between(x=dtf.loc[zoom_idx:].index, y1=dtf.loc[zoom_idx:]['conf_int_low'], \n                       y2=dtf.loc[zoom_idx:]['conf_int_up'], color='b', alpha=0.3)\n    plt.show()\n    return dtf[[\"ts\",\"model\",\"residuals\",\"conf_int_low\",\"forecast\",\"conf_int_up\"]]\n","99408b6c":"'''\nForecast unknown future.\n:parameter\n    :param ts: pandas series\n    :param f: function\n    :param model: list of optim params\n    :param pred_ahead: number of observations to forecast (ex. pred_ahead=30)\n    :param freq: None or str - 'B' business day, 'D' daily, 'W' weekly, 'M' monthly, 'A' annual, 'Q' quarterly\n    :param zoom: for plotting\n'''\ndef forecast_curve(ts, f, model, start, pred_ahead=60, freq=\"D\", zoom=30, figsize=(15,5)):\n    ## fit\n    X = np.arange(len(ts))\n    fitted = f(X, model[0], model[1], model[2])\n    dtf = ts.to_frame(name=\"ts\")\n    dtf[\"model\"] = fitted\n    \n    ## index\n    index = pd.date_range(start=start,periods=pred_ahead,freq=freq)\n    index = index[1:]\n    ## forecast\n    Xnew = np.arange(len(ts)+1, len(ts)+1+len(index))\n    preds = f(Xnew, model[0], model[1], model[2])\n    dtf = dtf.append(pd.DataFrame(data=preds, index=index, columns=[\"forecast\"]))\n    dtf.reset_index(level = 0, inplace = True)\n    ## plot\n    utils_plot_parametric(dtf, zoom=zoom)\n    return dtf","0815e31d":"preds = forecast_curve(dtf[\"total\"], logistic_f, logistic_model, start = '2020-06-30',\n                       pred_ahead=81, freq=\"D\", zoom=7)","e95addcf":"Forecast:\nSo far, we understood what functions to apply and we obtained the optimal parameters to put in, to put it another way we have model for the total cases data and we want to predict the future. To that end, we will apply the model to a new independent variable: the time steps from today till N. To give an illustration, we will forecast 44 days ahead from 7th of July, since our dataset has already 125 time steps (rows), my new independent variable shall be a vector that ranges from t=125 until t=169  (July 7th 2020 to August 21 2020).\n","97324cc0":"![gif.gif](attachment:gif.gif)","360a9eb4":"\nFit curve\nIt\u2019s time to do the fitting, in other words we are going to find the optimal parameters (values of coefficients that minimize the fitting error) for our models. We will use the module optimize from scipy which provides functions for minimizing or maximizing objective functions.\nLet\u2019s fit the logistic model first:","bdbb07c5":"For new cases time series: we can use gaussian function or normal distrubution function for optimal prediction\n\nSo we\u2019ve decided to proceed with:\nlogistic function to model the total cases time series\ngaussian function to model the new cases time series.","bd2dce84":" **Time Series Forecasting with Parametric Curve Fitting**","3f995995":"According to these model, in UnitesState, the coronavirus is already slowing down as it\u2019s reaching its maximun capacity of contagion, so the curve raising ratio is almost flattened.","46cce68b":"Model design\nThe objective of curve fitting is to find the optimal combination of parameters that minimize the error. Here we are dealing with time series, therefore the independent variable is time. In mathematical terms:\ny = f(time) + error\nLet\u2019s start from the total cases time series, we need to find the best function to model the data and then fit to get the optimal parameters.\nI will try different possible models using random coefficients just to visualize the curves: linear function, exponential function and logistic function.","3cdc7343":" The main purpose of this notebook is to understand how to get the COVID-19 data for country wise forecast its distribution using parametric curve fitting. Through this I will explain step by step how to forecast the virus spreading in any country using parametric curve fitting.","530cb08e":"Finally, we can run it. Let\u2019s start  the total cases time series as usual and then move on the daily increase time series:","e1d21a43":"Now we have UnitedStates total cases and new cases for each day from 2019-12\u201331 until 2020\u201307\u201306 and they look like this:","66732f1c":"Now, I will plot the total case time series (black points) and the 3 models defined above (coloured lines):\n* Logistic : blue\n* Linear : red\n* Exponential : green","623ca9b0":"It would appear that the exponential model fits the data properly \u2026 for now. We know for fact that this phenomenon has an upper limit, because the virus can\u2019t infect more than the total population of the country, so sooner or later the growth is going to stop and the curve will flat. Therefore the logistic function is more appropriate for this."}}