{"cell_type":{"ebb4ebda":"code","2f66efa7":"code","2ff83c87":"code","0caf6016":"code","52aa9778":"code","c2ee7c9b":"markdown","249f62bc":"markdown"},"source":{"ebb4ebda":"import optuna\nfrom sklearn.feature_selection import RFECV\nfrom lightgbm import LGBMClassifier\nimport pandas as pd\nimport joblib\nimport numpy as np\nimport riiideducation\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import train_test_split\nimport optuna.integration.lightgbm as lgb\nfrom optuna.samplers import TPESampler\nimport matplotlib.pyplot as plt","2f66efa7":"questions_df = pd.read_csv(\n    '..\/input\/riiid-test-answer-prediction\/questions.csv',\n    usecols=[0, 3],\n    dtype={'question_id': 'int16', 'part': 'int8'}\n)\n\nmodel = joblib.load('..\/input\/lgb-model-2\/Final_lgb_2.joblib')\nselector = joblib.load('..\/input\/selector-2\/Selector_2.joblib')\n\nuser_answers_df = pd.read_csv('..\/input\/preprocessingcontentuser\/user.csv')\ncontent_answers_df = pd.read_csv('..\/input\/preprocessingcontentuser\/content.csv')","2ff83c87":"features = [\n    'timestamp',\n    'user_id',\n    'content_id',\n    'prior_question_elapsed_time',\n    'prior_question_had_explanation',\n\n    'part',\n\n    'mean_user_accuracy',\n    'questions_skew',\n    'questions_std',\n    'questions_var',\n    'questions_sem',\n\n    'content_mean',\n    'content_skew',\n    'content_std',\n    'content_var',\n    'content_sem'\n]\n\nfeatures = [features[i] for i in range(len(selector.support_)) if selector.support_[i] == True]","0caf6016":"env = riiideducation.make_env()\niter_test = env.iter_test()","52aa9778":"for (test_df, sample_prediction_df) in iter_test:\n    \n    test_df = pd.merge(test_df, questions_df, left_on='content_id', right_on='question_id', how='left')\n    test_df.drop(columns=['question_id'], inplace=True)\n    test_df['prior_question_had_explanation'].fillna(bool(True), inplace=True)\n    test_df = test_df.replace([-np.inf, np.inf], np.nan)\n    test_df = test_df.fillna(test_df.mean())\n    \n    test_df = test_df[test_df['content_type_id'] != 1]\n    \n    test_df = test_df.merge(user_answers_df, how='left', on='user_id')\n    test_df = test_df.merge(content_answers_df, how='left', on='content_id')\n    test_df['prior_question_had_explanation'] = test_df['prior_question_had_explanation'].astype(bool)\n    test_df = test_df.replace([-np.inf, np.inf], np.nan)\n    test_df = test_df.fillna(test_df.mean())\n\n    \n    test_df['answered_correctly'] = model.predict_proba(test_df[features])[:,1]\n    env.predict(test_df.loc[test_df['content_type_id'] == 0, ['row_id', 'answered_correctly']])\n","c2ee7c9b":"# Link on my guide notebook. \n\n# https:\/\/www.kaggle.com\/beable\/lgbm-with-parameters-features-selection","249f62bc":"# Riiid! Answer Correctness Prediction with help lightgbm classifier with futures and parameters tuning. Submission version."}}