{"cell_type":{"73834977":"code","28d1a5d0":"code","b116b142":"code","42568ce8":"code","80364aa1":"code","7a7821d5":"markdown","a75f77b8":"markdown","52b19d6f":"markdown","19f18ea8":"markdown","f5b509e6":"markdown","f8708b8f":"markdown"},"source":{"73834977":"# -*- coding: utf-8 -*-\n#import libraries\nimport numpy as np\nimport datetime as dt\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nfrom math import sqrt\nimport os\nos.system('pip install getFamaFrenchFactors')\nimport getFamaFrenchFactors as gff\nimport pandas_datareader\nimport matplotlib.colors as mcolors\nimport math\nimport statsmodels.api as sm\nplt.style.use('seaborn')\nplt.rcParams['figure.figsize'] = [14, 10]","28d1a5d0":"#choose asset\nticker = ['GOOGL']\n\n#choose the start  and enddate:\nstart = dt.datetime(2012,6,1)\nend = dt.datetime.now()\n\n#import daily closiing prices\nprices = []\n\n#create a dataframe\ndataset = pd.DataFrame()\n\ndataset[ticker] = pandas_datareader.DataReader(ticker,data_source='yahoo',\n                                    start=start,\n                                    end = end)['Adj Close']\n\n#check for missing variables:\ndataset.isnull().sum()\n\n#plot log prices\nplt.figure()\nnp.log(dataset).plot()\nplt.legend(loc='best')\nplt.title('Logarithmic price')\n\n#get daily returns:\ndef rets(x):\n    return (x - x.shift(1))\/x.shift(1)\n    \nreturns = dataset.apply(rets)\n\n#lets get plots of the daily returns:\ntotal = len(dataset.columns)\ncol_len = math.ceil(len(dataset.columns) \/ 2)\nrow_len = math.ceil(len(dataset.columns) \/ col_len)\n\nposition = range(1,total+1)\n\nplt.figure()\nfig = plt.figure(1)\nfor i in range(total):\n\n  ax = fig.add_subplot(col_len,row_len,position[i])\n  fig.suptitle('Chart of returns')\n  ax.plot(returns.iloc[:,[i]],color = list(mcolors.TABLEAU_COLORS.keys())[i])\n  ax.set_title(returns.columns[i])\n  plt.xticks(rotation = 40)","b116b142":"#-------Monthly data\n#resample data to monthly:\nmon = dataset.resample('1M').last()\nmon_rets = mon.pct_change().dropna()\n\n#alternative way of calculating monthly returns\nrrr = returns.resample('M').agg(lambda x: (x + 1).prod() - 1)\n\n#historgram of monthly rests:\nplt.figure()\nfig2 = plt.gcf()\nfor i in range(total):\n\n  ax = fig2.add_subplot(col_len,row_len,position[i])\n  fig2.suptitle('Hist of monthly returns')\n  ax.hist(mon_rets.iloc[:,[i]],\n          bins = 12,\n          color = list(mcolors.TABLEAU_COLORS.keys())[i])\n  ax.set_title(mon_rets.columns[i])\n  plt.xticks(rotation = 40)\n\n#get Fama French factors\nff3 = pd.DataFrame(gff.famaFrench3Factor(frequency='m'))\n\n#create a seq of dates\ndate_seq = pd.date_range(start=start, end=end,freq='M')\n\n#set date columns\nff3 = ff3.rename(columns = {'date_ff_factors':'Date'})\n\n#merge data together\ndata = pd.merge(mon_rets,ff3,on='Date',how='left')\ndata = data.set_index('Date')\n\n#do an NA check:\ndata.isna().sum()\n\n#drop NAs\ndata = data.dropna()\n\n#set names for the target variable and factors:\nstock = ticker\nfactors = ['Mkt-RF', 'SMB', 'HML']\n\n#plot how asset compares to the market\nplt.figure()\ndata[stock].plot()\ndata['Mkt-RF'].plot()\nplt.title(f'{stock} returns compared to market returns')\nplt.legend()\n\n#plot how asset compares to the SMB portfolio\nplt.figure()\ndata[stock].plot()\ndata['SMB'].plot()\nplt.title(f'{stock} returns compared to small comp returns')\nplt.legend()\n\n#calculate correclations\ncor = data.corr()\n\nprint(f'{stock} correlation with market index:',cor['Mkt-RF'][0])\nprint(f'{stock} correlation with small-company portfolio index:',cor['SMB'][0])\n","42568ce8":"#set variables\nY = data[stock]\n\nX = sm.add_constant(data[factors])\n\n#Build model\nfrom statsmodels.api import OLS\n\n#build model\nX = sm.add_constant(X) #add constant for more precise calculations\nmodel = sm.OLS(Y, X)\nresult = model.fit()\n\n#examine results\nprint(result.summary())\n\n#obtain average values:\navr = ff3.drop('Date',axis=1).apply(np.mean)\n\n#evaluate expected returns for Google \nInt,Mkt,SMB,HML = result.params\n\nexp_returns = Int + Mkt*avr['Mkt-RF'] + SMB*avr['SMB'] + HML*avr['HML'] \n\nprint(f'The expected monthly return for {stock} is:',exp_returns)\nprint(f'The expected anual return for {stock} is:',exp_returns*12)\n\n\n#stacked barchart - coef and st error\nwidth = 0.35\nlab = X.columns\nindex_axis = np.arange(len(lab))\n\nplt.figure()\nplt.bar(index_axis-width\/2, result.params,width, label = 'Betas')\nplt.bar(index_axis+width\/2, result.bse,width, label = 'Std. Errors')\nplt.xticks(index_axis, lab)\nplt.axhline(0,color='red')\nplt.legend()\n\n#We have high standart errors, lets see the errors distribution\nplt.figure()\nresult.resid.hist()\nplt.axvline(result.resid.mean(),color='red')\nplt.title('Histrogram of resuduals')\n#residuals are not normaly distributed","80364aa1":"boot_betas = []\nboot_beta = 0\nboot_return = 0\nboot_returns = []\n\nfor i in range(5000):\n\n    sample = data.sample(n=len(data), replace=True)\n    sample_means = sample.mean()\n    \n    boot_model = sm.OLS(sample[stock], sm.add_constant(sample[factors]))\n    boot_result = boot_model.fit()\n    \n    boot_beta = boot_result.params\n    boot_betas.append(boot_beta)\n    \n    boot_return = boot_beta[0] + boot_beta[1]*sample_means['Mkt-RF'] + boot_beta[2]*sample_means['SMB'] \n    + boot_beta[3]*sample_means['HML']\n    \n    boot_returns.append(boot_return)\n\n#calculate statistics and obtain confidence intervals:\nboot_returns = np.array(boot_returns)\nboot_betas = pd.DataFrame(boot_betas)\n\n#betas with estimated standard errors: \navr_beta = boot_betas.apply(np.mean)\nstd_beta = boot_betas.apply(np.std)\nse_beta = std_beta\/sqrt(len(boot_betas)) # by the CLT s = \u03c3\/sqrt(n)\n\n#refit model with the estimatedaverage  betas\nboot_result = model.fit(params=avr_beta)\n\nboot_result.summary()\n#visualize bootstraped regression lines\nplt.figure()\nfig1 = plt.figure()\nfig1 = sm.graphics.plot_partregress_grid(boot_result, fig=fig1)\n\n#look at param distributions:\nplt.figure()\nfig3, axs = plt.subplots(2, 2)\naxs[0,0].hist(boot_betas['const'],bins=30)\naxs[0,0].set_title('Alpha')\naxs[0,1].hist(boot_betas['Mkt-RF'],bins=30)\naxs[0,1].set_title('b1 - Market Premium')\naxs[1,0].hist(boot_betas['SMB'],bins=30)\naxs[1,0].set_title('b2 - SMB')\naxs[1,1].hist(boot_betas['HML'],bins=30)\naxs[1,1].set_title('b3 - HML')\nfig3.suptitle('Subplots of estimated parameters')\nplt.legend()\n\n#plot the bootstraped betas and st errors\nindx = np.arange(len(avr_beta))\nb_indx = np.arange(len(se_beta))\n\nplt.figure()\nplt.bar(indx-width\/2, avr_beta,width, label = 'Betas')\nplt.bar(b_indx+width\/2, se_beta,width, label = 'Std. Errors')\nplt.xticks(indx, lab)\nplt.axhline(0,color='red')\nplt.title('Bootstrapped parameters and St. Errors')\nfor i in range(len(avr_beta.values)):\n    plt.annotate(str(round(avr_beta.values[i],3)), xy=(indx[i],avr_beta.values[i]), ha='center', va='top')\nfor j in range(len(se_beta.values)):\n    plt.annotate(str(round(se_beta.values[j],3)), xy=(b_indx[j],se_beta.values[j]), ha='left', va='bottom')\nplt.legend()\n\navr_returns = boot_returns.mean()\navr_std = boot_returns.std()\n\nupper = avr_returns+(avr_std*2) #t-distr values with 0.05 alpha\nlower = avr_returns-(avr_std*2)\n\n#show confidence intevals:\nplt.figure()\nplt.hist(boot_returns, alpha = 1,bins=45)\nplt.axvline(np.percentile(lower,2.5),color = 'red',linewidth=2)\nplt.axvline(np.percentile(upper,97.5),color = 'red',linewidth=2)\nplt.title('Histogram of simulated returns')\nplt.legend(['lower','upper'])\n\nprint(f'The expected monthly bootstrap return for {stock} is:',avr_returns)\nprint(f'The estimated 95% upper and lower range of returns of {stock} is:',lower,'and',upper)","7a7821d5":"#  **Asset returns analysis using a bootstraped Fama-French regression model**\n**Problem definition** : To analyze asset returns using the Fama-French 3 factor model and provide an interval estimate of returns with a bootstrapped regression. \n    The Fama-French 3 factor model consists of 3 independent variables - the market premium or the returns of the market portfolio (represented by an index like the S&P 500), the size premium or the returns of a portfolio of small companies (theoretically **on average** small companies have higher returns that big companies) and the value premium or the returns of companies with high book-to-market ratio (called **value stocks**) over companies with low book to market ratio and the asset returns as the dependet variable in model.\n    Thus, the Fama-French model provides a way to measure risk-adjusted asset returns by accounting for three major market factors that influence asset returns.","a75f77b8":"The initial state of the model shows high standardard error for the HML variable parameter. This means that we have a high degree of uncertainty for actual relationship between HML and the returns. We are going to solve this issue via bootstrapping.\n\n### Bootstrapped linear regreesion\nThe method leverages the properties of the Central Limit Theorem. It consists of creating multiple random samples with the same characteristics (mean and standard deviation) and fitting a model on each sample to obtain a more unbiased estimate by taking the average prediction of N models (5000 in this case). It also helps us obtain a distribution and confidence intervals for the returns and standard erros of the model coeffictients. The values of these coeffictients are very inportant here, because they give us a way to infer the relationship between the assets returns and the market factors and to estimate the asset perfomance over the market - the aplha, which is the value of the intercept.","52b19d6f":"### Obtain and visualize the historical assest data:\nHere we pick the asset of interest and the period we want to analyze and create charts of the daily price and returns.","19f18ea8":"### Create the models\nIn this section we build the initial regression model and estimate returns, based on the market 3 factors.","f5b509e6":"### Get monthly returns and Fama-French factors\nIn this section we aggregate the daily returns into monthly returns and download the Fama-French model variables using the library famaFrench3Factor.","f8708b8f":"### Conclusion:\nUsing the bootstrap method we have obtained a less-biased estimate for the returns as well as an upper and lower bound for our prediction. "}}