{"cell_type":{"7cd7a94a":"code","a8aa9ec3":"code","9f5d01a8":"code","fcc6dac5":"code","97b329f0":"code","35081819":"code","2aff0119":"code","b9332b6c":"code","1c3c65d8":"code","0a5abcb1":"code","a19590db":"code","8fd0448f":"code","d53bf158":"code","bac127a7":"code","f508c8f2":"code","aedcfda9":"code","da26a79c":"code","0599911c":"code","b3a6c4bd":"code","7ea97d03":"code","128ae482":"code","e44c34d8":"code","f637f611":"code","42dde175":"code","5fabe71f":"code","2bf392f9":"code","984fe149":"code","3f745277":"code","618ee00a":"code","2b8fff74":"code","aee253a3":"code","141732b9":"code","0575433d":"code","499707d5":"code","0da1cbe4":"code","ce81ab1b":"code","78672f95":"code","75d1a9d2":"code","ebc844fb":"code","0fb9281e":"code","4c8f4816":"code","98af2b48":"code","ce56c1bc":"code","34a11628":"code","8c543dc6":"code","c2191503":"code","4291260a":"code","d141029b":"code","8694fa42":"code","4ae041c3":"code","6b5cdf99":"code","64e38560":"code","233fefda":"code","28fa8cb1":"code","5d8dc960":"code","73de222c":"code","68fb5949":"code","dd4a2180":"code","75e4a234":"code","8bcc3076":"code","a8da9d0b":"code","b7c42b5a":"code","302336a6":"code","0ccea1d4":"code","4ae13b43":"code","7b497b55":"code","e46a71f2":"code","35ecb4e1":"markdown","9677d5aa":"markdown","fd5bdff1":"markdown","e4ee0876":"markdown","07816af4":"markdown","a54857c7":"markdown","87a39752":"markdown","8e5cfd69":"markdown","95a192f6":"markdown","6b14d6ec":"markdown","d570f335":"markdown","ac050511":"markdown","ca9d9126":"markdown","5a051e9e":"markdown","91219b6f":"markdown","544118c2":"markdown","df9a3637":"markdown","4414576d":"markdown","7011d0e8":"markdown","9b4cca6b":"markdown","2de56382":"markdown","df7138a1":"markdown","910a6ad5":"markdown","9c581741":"markdown","991b8699":"markdown","21580895":"markdown","ba214ded":"markdown","aab441f7":"markdown","132a6375":"markdown","177ece18":"markdown","ffce80c7":"markdown"},"source":{"7cd7a94a":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport missingno as msno\nimport matplotlib.pyplot as plt\nplt.style.use('ggplot')\n%matplotlib inline\nplt.rcParams['figure.figsize'] = 12,6\nimport warnings\nwarnings.filterwarnings('ignore')\nseq_col_brew = sns.color_palette(\"YlGnBu_r\", 4)\nsns.set_palette(seq_col_brew)","a8aa9ec3":"from sklearn.linear_model import Ridge, LogisticRegression\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer","9f5d01a8":"!apt-get install p7zip\n!p7zip -d -f -k \/kaggle\/input\/mercari-price-suggestion-challenge\/train.tsv.7z\n!p7zip -d -f -k \/kaggle\/input\/mercari-price-suggestion-challenge\/test.tsv.7z\n!p7zip -d -f -k \/kaggle\/input\/mercari-price-suggestion-challenge\/sample_submission.csv.7z","fcc6dac5":"!unzip \/kaggle\/input\/mercari-price-suggestion-challenge\/sample_submission_stg2.csv.zip\n!unzip \/kaggle\/input\/mercari-price-suggestion-challenge\/test_stg2.tsv.zip","97b329f0":"train = pd.read_csv('train.tsv', sep='\\t')\ntest = pd.read_csv('test_stg2.tsv', sep='\\t')","35081819":"train.head()","2aff0119":"test.head()","b9332b6c":"# Xem th\u00f4ng tin chi ti\u1ebft v\u1ec1 ki\u1ec3u d\u1eef li\u1ec7u trong t\u1eadp train\ntrain.info()","1c3c65d8":"# Xem th\u00f4ng tin chi ti\u1ebft v\u1ec1 ki\u1ec3u d\u1eef li\u1ec7u trong t\u1eadp test\ntest.info()","0a5abcb1":"# \u0110\u1ebfm c\u00e1c gi\u00e1 tr\u1ecb NaN trong t\u1eadp train\npd.isnull(train).sum()","a19590db":"# \u0110\u1ebfm c\u00e1c gi\u00e1 tr\u1ecb NaN trong t\u1eadp test\npd.isnull(test).sum()","8fd0448f":"# Thay th\u1ebf c\u00e1c gi\u00e1 tr\u1ecb NaN trong c\u1ed9t brand_name th\u00e0nh Other\ntrain['brand_name'].fillna('Other', inplace=True)\ntest['brand_name'].fillna('Other', inplace=True)","d53bf158":"# Thay th\u1ebf c\u00e1c gi\u00e1 tr\u1ecb NaN trong c\u1ed9t category_name th\u00e0nh No\/No\/No\ntrain['category_name'].fillna('No\/No\/No', inplace=True)\ntest['category_name'].fillna('No\/No\/No', inplace=True)","bac127a7":"# Thay th\u1ebf c\u00e1c gi\u00e1 tr\u1ecb NaN trong c\u1ed9t item_description th\u00e0nh No description yet\ntrain['item_description'].fillna('No description yet', inplace=True)\ntest['item_description'].fillna('No description yet', inplace=True)","f508c8f2":"pd.isnull(train).sum()","aedcfda9":"pd.isnull(test).sum()","da26a79c":"#Quan s\u00e1t d\u1eef li\u1ec7u \u1edf t\u1eadp train sau khi thay th\u1ebf c\u00e1c gi\u00e1 tr\u1ecb NaN\ntrain.head()","0599911c":"#Quan s\u00e1t d\u1eef li\u1ec7u \u1edf t\u1eadp test sau khi thay th\u1ebf c\u00e1c gi\u00e1 tr\u1ecb NaN\ntest.head()","b3a6c4bd":"#ki\u1ec3m tra category_name\nlevels =[]\n\nfor values in train['category_name']:\n    levels.append(values.count(\"\/\"))\n\n\nprint(\"MIN  of levels:          {0:.0f} \".format(np.min(levels)+1))\nprint(\"MEDIAN of levels:        {0:.0f} \".format(np.percentile(levels, 50)+1))\nprint(\"MAX  of levels:          {0:.0f}\".format(np.max(levels)+1))\nprint(\"90 percentile  of levels:{0:.0f} \".format(np.percentile(levels, 90)+1))","7ea97d03":"#H\u00e0m split_cat d\u00f9ng \u0111\u1ec3 c\u1eaft c\u00e1c nh\u00e3n trong c\u1ed9t 'category_name' th\u00e0nh c\u00e1c c\u1ed9t ri\u00eang bi\u1ec7t\ndef split_cat(category_name):\n    try:\n        return category_name.split('\/')\n        return (\"done\")\n    except:\n        return ['Null', 'Null', 'Null']","128ae482":"train['category_1'], train['category_2'], train['category_3'] = zip(*train['category_name'].apply(lambda x:split_cat(x)))\ntest['category_1'], test['category_2'], test['category_3'] = zip(*test['category_name'].apply(lambda x: split_cat(x)))","e44c34d8":"train.head()","f637f611":"test.head()","42dde175":"pd.set_option('display.float_format', lambda x: '%.5f' % x)\ntrain.describe()","5fabe71f":"# Bi\u1ec3u \u0111\u1ed3 ph\u00e2n b\u1ed1 gi\u00e1 c\u1ee7a c\u00e1c s\u1ea3n ph\u1ea9m trong t\u1eadp train\nplt.figure(figsize=(10,5))\nplt.hist(train['price'], bins = 100, edgecolor='white', range=[0,250])\nplt.ylabel('Frequency')\nplt.xlabel('Price')\nplt.show()","2bf392f9":"#Bi\u1ec3u \u0111\u1ed3 ph\u00e2n ph\u1ed1i logarit price\nplt.figure(figsize=(10,5))\nplt.hist(np.log(train['price']+1),bins=50, edgecolor='white') \nplt.ylabel('Frequency')\nplt.xlabel('Log_price')\nplt.show()","984fe149":"#Bi\u1ec3u \u0111\u1ed3 ph\u00e2n t\u00edch c\u1ed9t item_condition_id\nax = sns.countplot(x = 'item_condition_id',data=train, palette ='Blues_r')\nax.set_title(\"T\u1ed5ng s\u1ed1 l\u01b0\u1ee3ng s\u1ea3n ph\u1ea9m theo item_condition_id\", fontsize = 13)","3f745277":"# Ph\u00ed v\u1eadn chuy\u1ec3n\n(train['shipping'].value_counts())*100\/train.shape[0]","618ee00a":"plt.figure(figsize=(10,8))\n\nplt.hist(np.log(train['price'][train['shipping']==0]+1),bins=50, edgecolor='white',color=\"blue\", label='shipping = 0') \nplt.hist(np.log(train['price'][train['shipping']==1]+1),bins=50, edgecolor='white',color=\"cornflowerblue\",label=\"shipping = 1\") \nplt.xlabel('Log_price')\nplt.legend(loc='upper right')\nplt.title('Shipping')\nplt.show()","2b8fff74":"#danh s\u00e1ch 10 brand ph\u1ed5 bi\u1ebfn nh\u1ea5t s\u1eafp x\u1ebfp gi\u1ea3m d\u1ea7n\nbrands = train['brand_name'].value_counts()\nprint(brands[:10])","aee253a3":"#Quan s\u00e1t ph\u00e2n ph\u1ed1i gi\u00e1 c\u1ee7a c\u00e1c th\u01b0\u01a1ng hi\u1ec7u ph\u1ed5 bi\u1ebfn nh\u1ea5t\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(20, 15))\nplt.subplot(3, 3, 1)#h\u00ecnh c\u00f3 3 h\u00e0ng 3 c\u1ed9t v\u00e0 \u0111\u00e2y l\u00e0 bi\u1ec3u \u0111\u00f2 \u0111\u1ea7u ti\u00ean trong h\u00ecnh\nplt.hist(np.log(train['price'][train['brand_name']=='Other']+1),bins=50, edgecolor='white')\nplt.xlabel('Log_price')\nplt.ylabel('Frequency')\nplt.title('Nobrand')\n\nplt.subplot(3, 3, 2)\nplt.hist(np.log(train['price'][train['brand_name']=='Nike']+1),bins=50, edgecolor='white')\nplt.xlabel('Log_price')\nplt.ylabel('Frequency')\nplt.title('Nike')\n\nplt.subplot(3, 3, 3)\nplt.hist(np.log(train['price'][train['brand_name']==\"Victoria's Secret\"]+1),bins=50, edgecolor='white')\nplt.xlabel('Log_price')\nplt.ylabel('Frequency')\nplt.title(\"Victoria's Secret\")\n\nplt.subplot(3, 3, 4)\nplt.hist(np.log(train['price'][train['brand_name']=='LuLaRoe']+1),bins=50, edgecolor='white')\nplt.xlabel('Log_price')\nplt.ylabel('Frequency')\nplt.title('LuLaRoe')\n\nplt.subplot(3, 3, 5)\nplt.hist(np.log(train['price'][train['brand_name']=='Apple']+1),bins=50, edgecolor='white')\nplt.xlabel('Log_price')\nplt.ylabel('Frequency')\nplt.title('Apple')\n\nplt.subplot(3, 3, 6)\nplt.hist(np.log(train['price'][train['brand_name']=='FOREVER 21']+1),bins=50, edgecolor='white')\nplt.xlabel('Log_price')\nplt.ylabel('Frequency')\nplt.title('FOREVER 21')\n\nplt.subplot(3, 3, 7)\nplt.hist(np.log(train['price'][train['brand_name']=='Nintendo']+1),bins=50, edgecolor='white')\nplt.xlabel('Log_price')\nplt.ylabel('Frequency')\nplt.title('Nintendo')\n\nplt.subplot(3, 3, 8)\nplt.hist(np.log(train['price'][train['brand_name']=='Lululemon']+1),bins=50, edgecolor='white')\nplt.xlabel('Log_price')\nplt.ylabel('Frequency')\nplt.title('Lululemon')\n\nplt.subplot(3, 3, 9)\nplt.hist(np.log(train['price'][train['brand_name']=='Michael Kors']+1),bins=50, edgecolor='white')\nplt.xlabel('Log_price')\nplt.ylabel('Frequency')\nplt.title('Michael Kors')\n\nplt.show()","141732b9":"#10 brand \u00edt ph\u1ed5 bi\u1ebfn h\u01a1n\nprint(brands[250:260])","0575433d":"plt.figure(figsize=(20, 15))\n\nplt.subplot(3, 3, 1)\nplt.hist(np.log(train['price'][train['brand_name']=='Sperrys']+1),bins=50, edgecolor='white')\nplt.xlabel('Log_price')\nplt.ylabel('Frequency')\nplt.title('Sperrys')\n\nplt.subplot(3, 3, 2)\nplt.hist(np.log(train['price'][train['brand_name']=='Disney Collection']+1),bins=50, edgecolor='white')\nplt.xlabel('Log_price')\nplt.ylabel('Frequency')\nplt.title('Disney Collection')\n\nplt.subplot(3, 3, 3)\nplt.hist(np.log(train['price'][train['brand_name']=='Madewell']+1),bins=50, edgecolor='white')\nplt.xlabel('Log_price')\nplt.ylabel('Frequency')\nplt.title('Madewell')\n\nplt.subplot(3, 3, 4)\nplt.hist(np.log(train['price'][train['brand_name']=='Mudd']+1),bins=50, edgecolor='white')\nplt.xlabel('Log_price')\nplt.ylabel('Frequency')\nplt.title('Mudd')\n\nplt.subplot(3, 3, 5)\nplt.hist(np.log(train['price'][train['brand_name']=='7 For All Mankind\u00ae']+1),bins=50, edgecolor='white')\nplt.xlabel('Log_price')\nplt.ylabel('Frequency')\nplt.title('7 For All Mankind\u00ae')\n\nplt.subplot(3, 3, 6)\nplt.hist(np.log(train['price'][train['brand_name']=='Gerber']+1),bins=50, edgecolor='white')\nplt.xlabel('Log_price')\nplt.ylabel('Frequency')\nplt.title('Gerber')\n\nplt.subplot(3, 3, 7)\nplt.hist(np.log(train['price'][train['brand_name']=='Diamond Supply Co.']+1),bins=50, edgecolor='white')\nplt.xlabel('Log_price')\nplt.ylabel('Frequency')\nplt.title('Diamond Supply Co.')\n\nplt.subplot(3, 3, 8)\nplt.hist(np.log(train['price'][train['brand_name']=='Leap Frog']+1),bins=50, edgecolor='white')\nplt.xlabel('Log_price')\nplt.ylabel('Frequency')\nplt.title('Leap Frog')\n\nplt.subplot(3, 3, 9)\nplt.hist(np.log(train['price'][train['brand_name']=='BCBGMAXAZRIA']+1),bins=50, edgecolor='white')\nplt.xlabel('Log_price')\nplt.ylabel('Frequency')\nplt.title('BCBGMAXAZRIA')\n\nplt.show()","499707d5":"print(\"C\u00f3 %d nh\u00e3n \u1edf c\u1ed9t category_1.\" % train['category_1'].nunique())","0da1cbe4":"plt.figure(figsize=(10,8))\nax = sns.countplot(x = 'category_1', data = train, palette ='Blues_r', edgecolor='k')\nax.set_xticklabels(ax.get_xticklabels(), rotation=40, ha=\"right\")\nax.set_title('Bi\u1ec3u \u0111\u1ed3 s\u1ed1 l\u01b0\u1ee3ng c\u00e1c s\u1ea3n ph\u1ea9m ch\u1ee9a c\u00e1c nh\u00e3n \u1edf c\u1ed9t category_1')","ce81ab1b":"train.groupby('category_1')['price'].describe()","78672f95":"print(\"C\u00f3 %d nh\u00e3n \u1edf c\u1ed9t category_2.\" % train['category_2'].nunique())","75d1a9d2":"plt.figure(figsize=(10,8))\nax = sns.countplot(x='category_2',data=train,order=train.category_2.value_counts().iloc[:20].index, palette ='Reds_r', edgecolor='k')\nax.set_xticklabels(ax.get_xticklabels(), rotation=40, ha=\"right\")\nax.set_title('Bi\u1ec3u \u0111\u1ed3 s\u1ed1 l\u01b0\u1ee3ng s\u1ea3n ph\u1ea9m ch\u1ee9a c\u00e1c nh\u00e3n \u1edf category_2 ')","ebc844fb":"train.groupby('category_2')['price'].describe()[:10]","0fb9281e":"print(\"C\u00f3 %d nh\u00e3n \u1edf c\u1ed9t category_3.\" % train['category_3'].nunique())","4c8f4816":"plt.figure(figsize=(10,8))\nax = sns.countplot(x='category_3',data=train,order=train.category_3.value_counts().iloc[:20].index, palette ='Greens_r', edgecolor='k')\nax.set_xticklabels(ax.get_xticklabels(), rotation=40, ha=\"right\")\nax.set_title('Bi\u1ec3u \u0111\u1ed3 s\u1ed1 l\u01b0\u1ee3ng s\u1ea3n ph\u1ea9m ch\u1ee9a c\u00e1c nh\u00e3n \u1edf category_3 ')","98af2b48":"train.groupby('category_3')['price'].describe()[:10]","ce56c1bc":"# \u0110\u1ebfm s\u1ed1 l\u01b0\u1ee3ng 1 s\u1ed1 t\u1eeb trong 'name'\ntrain['name'].value_counts()[:10]","34a11628":"x = train['name'].apply(lambda x: len(x))\nplt.hist(x,bins = 30,range=[0,50],edgecolor='white')\nplt.show()","8c543dc6":"from wordcloud import WordCloud\nimport os\nwordcloud = WordCloud(width = 2400, height = 1200).generate(\" \".join(train.item_description.astype(str)))\nplt.figure(figsize = (13, 10))\nplt.imshow(wordcloud)\nplt.show()","c2191503":"from sklearn.preprocessing import LabelBinarizer\nlb_item_condition_id = LabelBinarizer(sparse_output=True)\ntrain_condition = lb_item_condition_id.fit_transform(train['item_condition_id'])\ntest_condition = lb_item_condition_id.transform(test['item_condition_id'])","4291260a":"train_condition.shape","d141029b":"lb_shipping = LabelBinarizer(sparse_output=True)\ntrain_shipping = lb_shipping.fit_transform(train['shipping'])\ntest_shipping = lb_shipping.transform(test['shipping'])","8694fa42":"train_shipping.shape","4ae041c3":"lb_brand_name = LabelBinarizer(sparse_output=True)\ntrain_brand_name= lb_brand_name.fit_transform(train['brand_name'])\ntest_brand_name = lb_brand_name.transform(test['brand_name'])","6b5cdf99":"train_brand_name.shape","64e38560":"count_vec = CountVectorizer()\n\ntrain_name = count_vec.fit_transform(train['name'])\ntest_name = count_vec.transform(test['name'])","233fefda":"print(train_name.shape)","28fa8cb1":"tfidf_des = TfidfVectorizer(max_features=50000, ngram_range=(1, 3), stop_words='english')\n\ntrain_des = tfidf_des.fit_transform(train['item_description'])\ntest_des = tfidf_des.transform(test['item_description'])","5d8dc960":"train_des.shape","73de222c":"lb_cat_1 = LabelBinarizer(sparse_output=True)\ntrain_cat_1 = lb_cat_1.fit_transform(train['category_1'])\ntest_cat_1 = lb_cat_1.transform(test['category_1'])\n\nlb_cat_2 = LabelBinarizer(sparse_output=True)\ntrain_cat_2 = lb_cat_2.fit_transform(train['category_2'])\ntest_cat_2 = lb_cat_2.transform(test['category_2'])\n\nlb_cat_3 = LabelBinarizer(sparse_output=True)\ntrain_cat_3 = lb_cat_3.fit_transform(train['category_3'])\ntest_cat_3 = lb_cat_3.transform(test['category_3'])","68fb5949":"from scipy.sparse import hstack\nimport gc","dd4a2180":"sparse_matrix_list = (train_name, train_des, train_brand_name, train_condition,\n                      train_shipping, train_cat_1, train_cat_2, train_cat_3)\nX_train = hstack(sparse_matrix_list).tocsr()\nprint( X_train.shape)\n\ndel X_train\ngc.collect()","75e4a234":"sparse_matrix_list = (train_name, train_des, train_brand_name, train_condition,\n                      train_shipping, train_cat_1, train_cat_2, train_cat_3)\nX_train = hstack(sparse_matrix_list).tocsr()\nX_train","8bcc3076":"y_train = np.log1p(train['price'])\ny_train","a8da9d0b":"Ridge_model =  Ridge()\nRidge_model.fit(X_train, y_train)","b7c42b5a":"sparse_matrix_list = (test_name, test_des, test_brand_name, test_condition,\n                      test_shipping, test_cat_1, test_cat_2, test_cat_3)\nX_test = hstack(sparse_matrix_list).tocsr()","302336a6":"preds = Ridge_model.predict(X_test)\npreds","0ccea1d4":"preds = np.expm1(preds)\npreds","4ae13b43":"submission = pd.read_csv('sample_submission_stg2.csv')\nsubmission","7b497b55":"submission.loc[:, 'price'] = preds\nsubmission","e46a71f2":"# chuy\u1ec3n submission_df sang d\u1ea1ng .csv \u0111\u1ec3 submit\nsubmission.to_csv('submission.csv', index=False)","35ecb4e1":"Bi\u1ec3u \u0111\u1ed3 ph\u00e2n b\u1ed1 gi\u00e1 c\u1ee7a c\u00e1c s\u1ea3n ph\u1ea9m trong t\u1eadp train","9677d5aa":"Gi\u00e1 tr\u1ecb trung b\u00ecnh c\u1ee7a nh\u1eefng s\u1ea3n ph\u1ea9m c\u00f3 shipping = 0 (ng\u01b0\u1eddi mua kh\u00f4ng m\u1ea5t ph\u00ed ship) nh\u1ecf h\u01a1n gi\u00e1 tr\u1ecb trung b\u00ecnh c\u1ee7a nh\u1eefng s\u1ea3n ph\u1ea9m c\u00f3 shipping = 1 (ng\u01b0\u1eddi mua ph\u1ea3i tr\u1ea3 th\u00eam ti\u1ec1n ship)","fd5bdff1":"Ph\u00ed v\u1eadn chuy\u1ec3n \u0111\u01b0\u1ee3c tr\u1ea3 b\u1edfi ng\u01b0\u1eddi b\u00e1n l\u00e0 0, ng\u01b0\u1eddi mua l\u00e0 1","e4ee0876":"C\u00e1c m\u00f4 t\u1ea3 \"free shipping\", \"great condition\", \"Brand new\", \"description yet\" l\u00e0 nh\u1eefng m\u00f4 t\u1ea3 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng nhi\u1ec1u nh\u1ea5t","07816af4":"Ta s\u1eed d\u1ee5ng h\u00e0m TfidfVectorizer() \u0111\u1ec3 chuy\u1ec3n \u0111\u1ed5i d\u1eef li\u1ec7u \u1edf c\u1ed9t item_descreption th\u00e0nh ma tr\u1eadn","a54857c7":"T\u1ea1o sparse matrix \u0111\u1ec3 k\u1ebft h\u1ee3p c\u00e1c d\u1eef li\u1ec7u v\u1edbi nhau","87a39752":"Ch\u00fang ta c\u00f3 th\u1ec3 th\u1ea5y ph\u00e2n ph\u1ed1i gi\u00e1 s\u1ea3n ph\u1ea9m b\u1ecb l\u1ec7ch v\u1ec1 b\u00ean tr\u00e1i n\u00ean ta s\u1ebd \u0111\u01b0a v\u1ec1 ph\u00e2n ph\u1ed1i chu\u1ea9n v\u1edbi logarit price","8e5cfd69":"\u0110\u1ecdc d\u1eef li\u1ec7u","95a192f6":"C\u00f3 5 lo\u1ea1i item_condition_id\nTrong \u0111\u00f3 lo\u1ea1i 1,2,3 ph\u1ed5 bi\u1ebfn; lo\u1ea1i 4,5 kh\u00f4ng ph\u1ed5 bi\u1ebfn","6b14d6ec":"Ph\u00e2n b\u1ed1 c\u1ee7a logarit price ph\u00e2n b\u1ed1 xung quanh gi\u00e1 tr\u1ecb trung b\u00ecnh n\u00ean ta s\u1ebd s\u1eed d\u1ee5ng logarit price \u0111\u1ec3 hu\u1ea5n luy\u1ec7n","d570f335":"# B\u00e0i to\u00e1n\n**X\u00e2y d\u1ef1ng thu\u1eadt to\u00e1n d\u1ef1 \u0111o\u00e1n gi\u00e1 b\u00e1n c\u1ee7a m\u1ed9t s\u1ea3n ph\u1ea9m d\u1ef1a tr\u00ean b\u1ed9 d\u1eef li\u1ec7u cho tr\u01b0\u1edbc c\u1ee7a Mercari bao g\u1ed3m c\u00e1c th\u00f4ng tin nh\u01b0 danh m\u1ee5c s\u1ea3n ph\u1ea9m, th\u01b0\u01a1ng hi\u1ec7u, m\u00f4 t\u1ea3 m\u1eb7t h\u00e0ng.**","ac050511":"Sau khi chu\u1ea9n h\u00f3a d\u1eef li\u1ec7u \u1edf c\u00e1c c\u1ed9t category_name, s\u1eed d\u1ee5ng LabelBinarizer \u0111\u1ec3 chuy\u1ec3n \u0111\u1ed5i c\u00e1c nh\u00e3n nhi\u1ec1u l\u1edbp sang nh\u00e3n nh\u1ecb ph\u00e2n \u1edf c\u00e1c c\u1ed9t category_1, category_2, category_3","ca9d9126":"C\u1ed9t category_name c\u00f3 c\u00e1c m\u1ee5c \u0111\u01b0\u1ee3c ph\u00e2n t\u00e1ch b\u1edfi d\u1ea5u \"\/\", t\u1ed1i \u0111a l\u00e0 5 v\u00e0 t\u1ed1i thi\u1ec3u l\u00e0 3\nPh\u1ea7n l\u1edbn s\u1ea3n ph\u1ea9m ch\u1ec9 c\u00f3 3 m\u1ee5c n\u00ean ta s\u1ebd chia c\u1ed9t category th\u00e0nh 3 c\u1ed9t kh\u00e1c nhau gi\u00fap \u0111\u00e1nh gi\u00e1 s\u1ea3n ph\u1ea9m d\u1ec5 h\u01a1n\n","5a051e9e":"**Ti\u1ebfp theo \u0111\u1ec3 hu\u1ea5n luy\u1ec7n m\u00f4 h\u00ecnh ta c\u1ea7n \u0111\u01b0a d\u1eef li\u1ec7u v\u1ec1 d\u1ea1ng vector \u0111\u1ec3 hu\u1ea5n luy\u1ec7n theo m\u00f4 h\u00ecnh h\u1ed3i quy tuy\u1ebfn t\u00ednh**\n\nS\u1eed d\u1ee5ng LabelBinarizer \u0111\u1ec3 chuy\u1ec3n \u0111\u1ed5i c\u00e1c nh\u00e3n nhi\u1ec1u l\u1edbp sang nh\u00e3n nh\u1ecb ph\u00e2n","91219b6f":"Ti\u1ebfp theo ta quan t\u00e2m t\u1edbi c\u00e1c c\u1ed9t ch\u1ee9a d\u1eef li\u1ec7u d\u1ea1ng s\u1ed1","544118c2":"Ta s\u1ebd thay th\u1ec3 c\u00e1c gi\u00e1 tr\u1ecb NaN (gi\u00e1 tr\u1ecb r\u1ed7ng) \u0111\u1ec3 \u0111\u00e1nh gi\u00e1 gi\u1ea3n ph\u1ea9m ch\u00ednh x\u00e1c h\u01a1n","df9a3637":"C\u00f3 1482535 s\u1ea3n ph\u1ea9m v\u1edbi ki\u1ec3u item_condition v\u1edbi 2 ki\u1ec3u shipping","4414576d":"Ta s\u1eed d\u1ee5ng h\u00e0m CountVectorizer() \u0111\u1ec3 chuy\u1ec3n c\u1ed9t name t\u1eeb d\u1ea1ng text v\u1ec1 d\u1ea1ng m\u1ed9t vecto tr\u00ean c\u01a1 s\u1edf s\u1ed1 l\u1ea7n xu\u1ea5t hi\u1ec7n c\u1ee7a m\u1ed7i t\u1eeb\n\nCountVectorizer t\u1ea1o m\u1ed9t ma tr\u1eadn trong \u0111\u00f3 m\u1ed7i t\u1eeb duy nh\u1ea5t \u0111\u01b0\u1ee3c bi\u1ec3u th\u1ecb b\u1eb1ng m\u1ed9t c\u1ed9t c\u1ee7a ma tr\u1eadn v\u00e0 v\u1edbi t\u00ean c\u1ee7a m\u1ed7i s\u1ea3n ph\u1ea9m l\u00e0 m\u1ed9t h\u00e0ng trong ma tr\u1eadn. Giao c\u1ee7a m\u1ed9t h\u00e0ng v\u00e0 m\u1ed9t c\u1ed9t ch\u00ednh l\u00e0 s\u1ed1 l\u1ea7n xu\u1ea5t hi\u1ec7n c\u1ee7a t\u1eeb(t\u01b0\u01a1ng \u00fang v\u1edbi c\u1ed9t) trong t\u00ean c\u1ee7a s\u1ea3n ph\u1ea9m (t\u01b0\u01a1ng \u00fang v\u1edbi h\u00e0ng)","7011d0e8":"B\u1ea3ng ph\u00e2n b\u1ed1 gi\u00e1 c\u1ee7a s\u1ea3n ph\u1ea9m \u1ee9ng v\u1edbi t\u1eebng lo\u1ea1i trong category_3","9b4cca6b":"Quan s\u00e1t d\u1eef li\u1ec7u \u1edf 2 t\u1eadp train v\u00e0 test","2de56382":"B\u1ea3ng ph\u00e2n b\u1ed1 gi\u00e1 c\u1ee7a s\u1ea3n ph\u1ea9m \u1ee9ng v\u1edbi t\u1eebng lo\u1ea1i trong category_2","df7138a1":"H\u1ea7u h\u1ebft c\u00e1c ph\u00e2n ph\u1ed1i Logarit price c\u1ee7a c\u00e1c h\u00e3ng \u0111\u1ec1u tu\u00e2n theo ph\u00e2n ph\u1ed1i chu\u1ea9n","910a6ad5":"Gi\u1ea3i n\u00e9n d\u1eef li\u1ec7u train","9c581741":"C\u00f3 1482535 s\u1ea3n ph\u1ea9m v\u1edbi 4810 brand","991b8699":"Quan s\u00e1t d\u1eef li\u1ec7u \u1edf c\u1ed9t item_description","21580895":"* M\u1ed7i h\u00e0ng \u1edf b\u1ea3ng bi\u1ec3u di\u1ec5n m\u1ed9t s\u1ea3n ph\u1ea9m v\u1edbi c\u00e1c thu\u1ed9c t\u00ednh name, item_condition_id, category_name, shipping, item_description. \n* \u1ede t\u1eadp train c\u00f3 t\u1eadp price m\u00e0 t\u1eadp test kh\u00f4ng c\u00f3 v\u1eady n\u00ean ta s\u1ebd ph\u1ea3i d\u1ef1 \u0111o\u00e1n gi\u00e1 c\u1ee7a s\u1ea3n ph\u1ea9m \u1edf t\u1eadp test n\u00e0y.\n* C\u1ed9t brand_name c\u00f3 nhi\u1ec1u gi\u00e1 tr\u1ecb NaN (gi\u00e1 tr\u1ecb null)\n* M\u1ed9t s\u1ea3n ph\u1ea9m c\u00f3 th\u1ec3 thu\u1ed9c nhi\u1ec1u th\u1ec3 lo\u1ea1i (c\u00f3 nhi\u1ec1u gi\u00e1 tr\u1ecb \u1edf c\u1ed9t category_name)","ba214ded":"B\u1ea3ng ph\u00e2n b\u1ed1 gi\u00e1 c\u1ee7a s\u1ea3n ph\u1ea9m \u1ee9ng v\u1edbi t\u1eebng lo\u1ea1i trong category_1","aab441f7":"Import th\u01b0 vi\u1ec7n cho b\u00e0i to\u00e1n","132a6375":"C\u00f3 1482535 s\u1ea3n ph\u1ea9m v\u1edbi ki\u1ec3u item_condition","177ece18":"C\u00f3 1482535 s\u1ea3n ph\u1ea9m v\u1edbi 105757 t\u1eeb xu\u1ea5t hi\u1ec7n trong c\u1ed9t name","ffce80c7":"# D\u1ef1 \u0111o\u00e1n gi\u00e1 tr\u00ean t\u1eadp test"}}