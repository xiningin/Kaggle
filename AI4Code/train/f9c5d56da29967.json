{"cell_type":{"b440f238":"code","b4edf33f":"code","06c13c75":"code","7e4add72":"code","acae8878":"code","19a8a777":"code","5c552437":"code","8edfd111":"code","11a88df0":"code","8cefd9ce":"code","d12d89bd":"code","82ffdad2":"code","0e989493":"code","93cb0ee6":"code","1d20c511":"code","651fa17e":"code","9a2b67ce":"code","97e35fe3":"code","22d800b3":"code","2b69669c":"code","bb72b3f3":"markdown","8e9e79e8":"markdown","a0cc8160":"markdown","c486bbc5":"markdown","3352415b":"markdown","fed707b6":"markdown","60b537e5":"markdown","e43a30f4":"markdown","c29f30c0":"markdown","2eab67e2":"markdown"},"source":{"b440f238":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom datetime import datetime\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom sklearn.model_selection import RandomizedSearchCV, GridSearchCV\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import StratifiedKFold\n\nimport seaborn as sns\nfrom itertools import chain\nfrom IPython.display import display, Markdown\nimport matplotlib.pyplot as plt\nimport re\nimport wandb","b4edf33f":"from kaggle_secrets import UserSecretsClient\nuser_secrets = UserSecretsClient()\nwandb_key = user_secrets.get_secret(\"wandb_key\")\n\nwandb.login(key=wandb_key)\nwandb.init(project=\"DNN-dwdm\")","06c13c75":"train_df = pd.read_csv(\"..\/input\/if5172-2021-cinema-nights\/training.txt\", names=[\"UserID\", \"MovieID\", \"Rating\", \"Timestamp\"], header=None)\ntest_df = pd.read_csv(\"..\/input\/if5172-2021-cinema-nights\/testing.txt\", names=[\"UserID\", \"MovieID\", \"Timestamp\"], header=None)\ntrain_df[\"Rating_year\"] = train_df[\"Timestamp\"].apply(lambda x: datetime.fromtimestamp(x).year)\ntest_df[\"Rating_year\"] = test_df[\"Timestamp\"].apply(lambda x: datetime.fromtimestamp(x).year)\ndisplay(train_df.head())\ndisplay(test_df.head())","7e4add72":"users_df = pd.read_csv(\"..\/input\/if5172-2021-cinema-nights\/users.txt\", names=[\"UserID\", \"Gender\", \"Age\", \"Occupation\", \"Zip-code\"], header=None, sep=\"::\", engine='python')\nmovies_df = pd.read_csv(\"..\/input\/if5172-2021-cinema-nights\/movies.txt\", names=[\"MovieID\",\"Titles\", \"Genres\"], header=None, sep=\"::\", engine='python', encoding = \"ISO-8859-1\")\n\ndisplay(users_df.head())\ndisplay(movies_df.head())","acae8878":"movies_df[\"Year\"] = movies_df[\"Titles\"].apply(lambda x: int(x[-5:-1]))\nmovies_df[\"Title_only\"] = movies_df[\"Titles\"].apply(lambda x: x[:-7])\nmovies_df[\"Genre_list\"] = movies_df[\"Genres\"].apply(lambda x: x.split(\"|\"))\nmovies_df.head()","19a8a777":"genre_list = sorted(list(set(chain.from_iterable(movies_df[\"Genre_list\"].tolist()))))\ndisplay(Markdown(f\"Dari list genre yang ada, bisa dilihat bahwa terdapat {len(genre_list)} genre. Yaitu:\\n`{genre_list}`\"))","5c552437":"for genre in genre_list:\n    pattern = re.compile('[\\W_]+')\n    col = pattern.sub('', genre)\n    movies_df[f\"Genre_{col}\"] = movies_df[\"Genre_list\"].apply(lambda x: (1 if genre in x else 0))\nmovies_df.head()","8edfd111":"users_df[\"Zip_nat\"] = users_df[\"Zip-code\"].apply(lambda x: x[0])\nusers_df[\"Zip_prefix\"] = users_df[\"Zip-code\"].apply(lambda x: x[:3])\nusers_df.head()","11a88df0":"age_gender_enc = OrdinalEncoder()\nusers_df[[\"Gender_enc\"]] = age_gender_enc.fit_transform(users_df[[\"Gender\"]])\nusers_df.head()","8cefd9ce":"users_temp = pd.get_dummies(users_df, columns=[\"Occupation\",\"Zip_nat\",\"Age\"]).drop(columns=[\"Gender\",\"Zip-code\",\"Zip_prefix\"])\nusers_temp.head()","d12d89bd":"movies_temp = pd.get_dummies(movies_df, columns=[\"Year\"]).drop(columns=[\"Titles\", \"Genres\", \"Genre_list\", \"Title_only\"])\nmovies_temp.head()","82ffdad2":"train_data = train_df.merge(users_temp, how=\"left\", on=\"UserID\").merge(movies_temp, how=\"left\", on=\"MovieID\").drop(columns=[\"MovieID\",\"UserID\",\"Timestamp\"])\ntest_data = test_df.merge(users_temp, how=\"left\", on=\"UserID\").merge(movies_temp, how=\"left\", on=\"MovieID\").drop(columns=[\"MovieID\",\"UserID\",\"Timestamp\"])\ndisplay(train_data.head())\ndisplay(test_data.head())","0e989493":"X_train = train_data.drop(columns=\"Rating\")[test_data.columns]\ny_train = train_data[\"Rating\"]\n\nX_test = test_data","93cb0ee6":"import tensorflow as tf\nfrom wandb.keras import WandbCallback\n\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom tensorflow.keras.callbacks import EarlyStopping\nprint(tf.__version__)","1d20c511":"config = wandb.config\nconfig.learning_rate = 0.001\nconfig.batch_size = 128\nconfig.model_summary = {\n    \"Dense\":256,\n    \"Dropout\":0.1,\n    \"Dense\":256,\n    \"Dropout\":0.1,\n    \"Dense\":256,\n    \"Dropout\":0.1,\n    \"Dense\":256,\n    \"Dropout\":0.1,\n    \"Dense\":1,}\nconfig.activation = 'relu'\nconfig.optimizer = 'adam'","651fa17e":"def build_and_compile_model(norm):\n    model = keras.Sequential([\n      norm,\n      layers.Dense(256, activation='relu'),\n      layers.Dropout(0.1),\n      layers.Dense(256, activation='relu'),\n      layers.Dropout(0.1),\n      layers.Dense(256, activation='relu'),\n      layers.Dropout(0.1),\n      layers.Dense(256, activation='relu'),\n      layers.Dropout(0.1),\n      layers.Dense(1)\n    ])\n\n    model.compile(loss='mean_squared_error',\n                optimizer=tf.keras.optimizers.Adam(0.001))\n    return model\n\ndef plot_loss(history):\n    plt.plot(history.history['loss'], label='loss')\n    plt.plot(history.history['val_loss'], label='val_loss')\n    plt.ylim([0, 2])\n    plt.xlabel('Epoch')\n    plt.ylabel('Error [MPG]')\n    plt.legend()\n    plt.grid(True)\n    \ndef save_prediction(y_pred):\n    res = pd.DataFrame(y_pred, columns=[\"Predicted\"])\n    res.index += 1\n    res.to_csv(\"test.csv\", index_label=\"ID\")\n    wandb.Table(dataframe=res)","9a2b67ce":"normalizer = tf.keras.layers.Normalization(axis=-1)\nnormalizer.adapt(np.array(X_train))\ndnn_model = build_and_compile_model(normalizer)\ndnn_model.summary()","97e35fe3":"%%time\nhistory = dnn_model.fit(\n    X_train,\n    y_train,\n    validation_split=0.1,\n    verbose=3, epochs=100, \n    batch_size=config.batch_size,\n    callbacks=[\n        WandbCallback(), \n        EarlyStopping(monitor='loss', patience=5)])","22d800b3":"plot_loss(history)","2b69669c":"y_test = dnn_model.predict(X_test)\nsave_prediction(y_test)","bb72b3f3":"Untuk mempermudah saat training, genre list ini perlu diubah menjadi flag pada table. (Karena tidak ordinal dan tidak one-hot juga)","8e9e79e8":"### Encoding the data into suitable format\n\nMengingat task utama dari model ini adalah memprediksi nilai, mari kita coba dari model paling sederhana, yaitu linear regression. Untuk melakukan hal ini sebelumnya kita perlu membagi dataset training menjadi train dan val untuk membantu dalam model selection.","a0cc8160":"## Dataset\n\nFormat dataset training adalah sebagai berikut:\n`UserID, MovieID, Rating, Timestamp`\nDengan asumsi bahwa timestamp adalah waktu diambilnya informasi tersebut, dalam format UNIX Timestamp. Dengan data format data testing yang sama, sans `Rating`.","c486bbc5":"## Setting WANDB","3352415b":"### Movie Datasets\n\n#### Extract Year and Genres","fed707b6":"## Neural Network Exploration\n\nOne of the straight forward method is to use the features generated in train_df and input it to a deep and dense network. in this case ","60b537e5":"```\nAge is chosen from the following ranges:\n\n1: \"Under 18\"\n18: \"18-24\"\n25: \"25-34\"\n35: \"35-44\"\n45: \"45-49\"\n50: \"50-55\"\n56: \"56+\"\nOccupation is chosen from the following choices:\n\n0: \"other\" or not specified\n1: \"academic\/educator\"\n2: \"artist\"\n3: \"clerical\/admin\"\n4: \"college\/grad student\"\n5: \"customer service\"\n6: \"doctor\/health care\"\n7: \"executive\/managerial\"\n8: \"farmer\"\n9: \"homemaker\"\n10: \"K-12 student\"\n11: \"lawyer\"\n12: \"programmer\"\n13: \"retired\"\n14: \"sales\/marketing\"\n15: \"scientist\"\n16: \"self-employed\"\n17: \"technician\/engineer\"\n18: \"tradesman\/craftsman\"\n19: \"unemployed\"\n20: \"writer\"\n```","e43a30f4":"## Creating Embedding for User and Movie","c29f30c0":"### Users Datasets\n\nMengingat dataset ini berasal dari US (saya asumsikan ini adalah dataset movielens 1M), maka zip code bisa menghasilkan informasi dalam beberapa level, yaitu dengan national code (angka pertama), dengan sectional center (angka ke 2 dan 3), dan area code (2 angka terakhir). Untuk mengakomodasi hal tersebut, maka zip code tersebut di decompose menjadi national code saja dan 3 angka pertama, selain zip code penuh\n\n#### destructure Zip","2eab67e2":"Dari informasi itu bisa dilihat bahwa pada tabel users, \n1. informasi umur bukanlah umur asli melainkan `age-bracket` \n2. occupation perlu kita cari kembali tabel referensi mengenai pekerjaan yang relevan. \n3. Selain itu untuk mendapatkan semantik dari zip code perlu mengetahui negara apa yang sedang dibicarakan.\n\nSedangkan dari tabel movies bisa diamati bahwa \n1. kita bisa mengambil tahun dari film dari judul, dan \n2. genre bisa coba kita format sehingga mendapatkan bentuk yang lebih terstruktur."}}