{"cell_type":{"f2adb56d":"code","5ba14ab5":"code","baa8947e":"code","edc5a21a":"code","37228270":"code","7110ef0f":"code","643051f5":"code","b3893868":"code","0333846e":"code","3d527516":"code","b0faca32":"code","fc3cf572":"code","578ce112":"code","24006c54":"code","f1be95a0":"code","1f76868b":"code","eac05b81":"code","059a51de":"code","f2d563bb":"code","6916d621":"code","bb803e1a":"code","c0a63edb":"code","ea0afe0a":"code","a695b615":"code","0bb0a3e0":"code","4f99eaff":"code","5dab87ff":"code","64be3f1d":"code","03586002":"code","145a30d6":"code","bc19c8a5":"code","6fd4c880":"code","3fb1978c":"code","c67dd88f":"code","90e24343":"code","e294947d":"code","34e6dd7a":"code","09054286":"code","9910d55b":"code","6e7be593":"code","83a456df":"code","43909e1d":"markdown","0b09ad41":"markdown","e9c1c843":"markdown"},"source":{"f2adb56d":"import os\n\nDATA_DIR = '..\/input\/abstract-art-gallery'\nprint(os.listdir(DATA_DIR))","5ba14ab5":"print(os.listdir(DATA_DIR+'\/Abstract_gallery')[:10])","baa8947e":"from torch.utils.data import DataLoader\nfrom torchvision.datasets import ImageFolder\nimport torchvision.transforms as T","edc5a21a":"image_size = 64\nbatch_size = 128\nstats = (0.5, 0.5, 0.5), (0.5, 0.5, 0.5)","37228270":"train_ds = ImageFolder(DATA_DIR, transform=T.Compose([\n                                                      T.Resize(image_size),\n                                                      T.CenterCrop(image_size),\n                                                      T.ToTensor(),\n                                                      T.Normalize(*stats)]))\ntrain_dl = DataLoader(train_ds, batch_size, shuffle=True, num_workers=3, pin_memory=True)","7110ef0f":"import torch\nfrom torchvision.utils import make_grid\nimport matplotlib.pyplot as plt\n%matplotlib inline","643051f5":"def denorm(img_tensors):\n    return img_tensors * stats[1][0] + stats[0][0]","b3893868":"def show_images(images,nmax=64):\n  fig, ax = plt.subplots(figsize=(8,8))\n  ax.set_xticks([]); ax.set_xticks([])\n  ax.imshow(make_grid(denorm(images.detach()[:nmax]), nrow=8).permute(1,2,0))\n\ndef show_batch(dl, nmax=64):\n  for images, _ in dl:\n    show_images(images, nmax)\n    break","0333846e":"show_batch(train_dl)","3d527516":"def get_default_device():\n    \"\"\"Pick GPU if available, else CPU\"\"\"\n    if torch.cuda.is_available():\n        return torch.device('cuda')\n    else:\n        return torch.device('cpu')\n    \ndef to_device(data, device):\n    \"\"\"Move tensor(s) to chosen device\"\"\"\n    if isinstance(data, (list,tuple)):\n        return [to_device(x, device) for x in data]\n    return data.to(device, non_blocking=True)\n\nclass DeviceDataLoader():\n    \"\"\"Wrap a dataloader to move data to a device\"\"\"\n    def __init__(self, dl, device):\n        self.dl = dl\n        self.device = device\n        \n    def __iter__(self):\n        \"\"\"Yield a batch of data after moving it to device\"\"\"\n        for b in self.dl: \n            yield to_device(b, self.device)\n\n    def __len__(self):\n        \"\"\"Number of batches\"\"\"\n        return len(self.dl)","b0faca32":"device = get_default_device()\ndevice","fc3cf572":"train_dl = DeviceDataLoader(train_dl, device)","578ce112":"import torch.nn as nn","24006c54":"discriminator = nn.Sequential(\n    # in: 3 x 64 x 64\n\n    nn.Conv2d(3, 64, kernel_size=4, stride=2, padding=1, bias=False),\n    nn.BatchNorm2d(64),\n    nn.LeakyReLU(0.2, inplace=True),\n    # out: 64 x 32 x 32\n\n    nn.Conv2d(64, 128, kernel_size=4, stride=2, padding=1, bias=False),\n    nn.BatchNorm2d(128),\n    nn.LeakyReLU(0.2, inplace=True),\n    # out: 128 x 16 x 16\n\n    nn.Conv2d(128, 256, kernel_size=4, stride=2, padding=1, bias=False),\n    nn.BatchNorm2d(256),\n    nn.LeakyReLU(0.2, inplace=True),\n    # out: 256 x 8 x 8\n\n    nn.Conv2d(256, 512, kernel_size=4, stride=2, padding=1, bias=False),\n    nn.BatchNorm2d(512),\n    nn.LeakyReLU(0.2, inplace=True),\n    # out: 512 x 4 x 4\n\n    nn.Conv2d(512, 1, kernel_size=4, stride=1, padding=0, bias=False),\n    # out: 1 x 1 x 1\n\n    nn.Flatten(),\n    nn.Sigmoid())","f1be95a0":"discriminator = to_device(discriminator, device)","1f76868b":"latent_size = 128","eac05b81":"generator = nn.Sequential(\n    # in: latent_size x 1 x 1\n\n    nn.ConvTranspose2d(latent_size, 512, kernel_size=4, stride=1, padding=0, bias=False),\n    nn.BatchNorm2d(512),\n    nn.ReLU(True),\n    # out: 512 x 4 x 4\n\n    nn.ConvTranspose2d(512, 256, kernel_size=4, stride=2, padding=1, bias=False),\n    nn.BatchNorm2d(256),\n    nn.ReLU(True),\n    # out: 256 x 8 x 8\n\n    nn.ConvTranspose2d(256, 128, kernel_size=4, stride=2, padding=1, bias=False),\n    nn.BatchNorm2d(128),\n    nn.ReLU(True),\n    # out: 128 x 16 x 16\n\n    nn.ConvTranspose2d(128, 64, kernel_size=4, stride=2, padding=1, bias=False),\n    nn.BatchNorm2d(64),\n    nn.ReLU(True),\n    # out: 64 x 32 x 32\n\n    nn.ConvTranspose2d(64, 3, kernel_size=4, stride=2, padding=1, bias=False),\n    nn.Tanh()\n    # out: 3 x 64 x 64\n)","059a51de":"xb = torch.randn(batch_size, latent_size, 1, 1) # random latent tensors\nfake_images = generator(xb)\nprint(fake_images.shape)\nshow_images(fake_images)","f2d563bb":"generator = to_device(generator, device)","6916d621":"def train_discriminator(real_images, opt_d):\n    # Clear discriminator gradients\n    opt_d.zero_grad()\n\n    # Pass real images through discriminator\n    real_preds = discriminator(real_images)\n    real_targets = torch.ones(real_images.size(0), 1, device=device)\n    real_loss = F.binary_cross_entropy(real_preds, real_targets)\n    real_score = torch.mean(real_preds).item()\n    \n    # Generate fake images\n    latent = torch.randn(batch_size, latent_size, 1, 1, device=device)\n    fake_images = generator(latent)\n\n    # Pass fake images through discriminator\n    fake_targets = torch.zeros(fake_images.size(0), 1, device=device)\n    fake_preds = discriminator(fake_images)\n    fake_loss = F.binary_cross_entropy(fake_preds, fake_targets)\n    fake_score = torch.mean(fake_preds).item()\n\n    # Update discriminator weights\n    loss = real_loss + fake_loss\n    loss.backward()\n    opt_d.step()\n    return loss.item(), real_score, fake_score","bb803e1a":"def train_generator(opt_g):\n    # Clear generator gradients\n    opt_g.zero_grad()\n    \n    # Generate fake images\n    latent = torch.randn(batch_size, latent_size, 1, 1, device=device)\n    fake_images = generator(latent)\n    \n    # Try to fool the discriminator\n    preds = discriminator(fake_images)\n    targets = torch.ones(batch_size, 1, device=device)\n    loss = F.binary_cross_entropy(preds, targets)\n    \n    # Update generator weights\n    loss.backward()\n    opt_g.step()\n    \n    return loss.item()","c0a63edb":"from torchvision.utils import save_image","ea0afe0a":"sample_dir = 'generated'\nos.makedirs(sample_dir, exist_ok=True)","a695b615":"def save_samples(index, latent_tensors, show=True):\n    fake_images = generator(latent_tensors)\n    fake_fname = 'generated-images-{0:0=4d}.png'.format(index)\n    save_image(denorm(fake_images), os.path.join(sample_dir, fake_fname), nrow=8)\n    print('Saving', fake_fname)\n    if show:\n        fig, ax = plt.subplots(figsize=(8, 8))\n        ax.set_xticks([]); ax.set_yticks([])\n        ax.imshow(make_grid(fake_images.cpu().detach(), nrow=8).permute(1, 2, 0))","0bb0a3e0":"fixed_latent = torch.randn(64, latent_size, 1, 1, device=device)","4f99eaff":"from tqdm.notebook import tqdm\nimport torch.nn.functional as F","5dab87ff":"def fit(epochs, lr, start_idx=1):\n    torch.cuda.empty_cache()\n    \n    # Losses & scores\n    losses_g = []\n    losses_d = []\n    real_scores = []\n    fake_scores = []\n    \n    # Create optimizers\n    opt_d = torch.optim.Adam(discriminator.parameters(), lr=lr, betas=(0.5, 0.999))\n    opt_g = torch.optim.Adam(generator.parameters(), lr=lr, betas=(0.5, 0.999))\n    \n    for epoch in range(epochs):\n        for real_images, _ in tqdm(train_dl):\n            # Train discriminator\n            loss_d, real_score, fake_score = train_discriminator(real_images, opt_d)\n            # Train generator\n            loss_g = train_generator(opt_g)\n            \n        # Record losses & scores\n        losses_g.append(loss_g)\n        losses_d.append(loss_d)\n        real_scores.append(real_score)\n        fake_scores.append(fake_score)\n        \n        # Log losses & scores (last batch)\n        print(\"Epoch [{}\/{}], loss_g: {:.4f}, loss_d: {:.4f}, real_score: {:.4f}, fake_score: {:.4f}\".format(\n            epoch+1, epochs, loss_g, loss_d, real_score, fake_score))\n    \n        # Save generated images\n        save_samples(epoch+start_idx, fixed_latent, show=False)\n    \n    return losses_g, losses_d, real_scores, fake_scores","64be3f1d":"lr = 0.0002\nepochs = 200","03586002":"history = fit(epochs, lr)","145a30d6":"losses_g, losses_d, real_scores, fake_scores = history","bc19c8a5":"# Save the model checkpoints \ntorch.save(generator.state_dict(), 'G.pth')\ntorch.save(discriminator.state_dict(), 'D.pth')","6fd4c880":"from IPython.display import Image","3fb1978c":"Image('.\/generated\/generated-images-0001.png')","c67dd88f":"Image('.\/generated\/generated-images-0020.png')","90e24343":"Image('.\/generated\/generated-images-0050.png')","e294947d":"Image('.\/generated\/generated-images-0150.png')","34e6dd7a":"Image('.\/generated\/generated-images-0100.png')","09054286":"Image('.\/generated\/generated-images-0200.png')","9910d55b":"# import cv2\n# import os\n\n# vid_fname = 'gans_training.avi'\n\n# files = [os.path.join(sample_dir, f) for f in os.listdir(sample_dir) if 'generated' in f]\n# files.sort()\n\n# out = cv2.VideoWriter(vid_fname,cv2.VideoWriter_fourcc(*'MP4V'), 1, (530,530))\n# [out.write(cv2.imread(fname)) for fname in files]\n# out.release()","6e7be593":"plt.plot(losses_d, '-')\nplt.plot(losses_g, '-')\nplt.xlabel('epoch')\nplt.ylabel('loss')\nplt.legend(['Discriminator', 'Generator'])\nplt.title('Losses');","83a456df":"plt.plot(real_scores, '-')\nplt.plot(fake_scores, '-')\nplt.xlabel('epoch')\nplt.ylabel('score')\nplt.legend(['Real', 'Fake'])\nplt.title('Scores');","43909e1d":"## Download Dataset","0b09ad41":"## Dataset Selection\n\nI use `Abstract Art Gallery` from Kaggle for this project.\n\nDatasets Link: [Abstract Art Gallery](https:\/\/www.kaggle.com\/bryanb\/abstract-art-gallery)\n\n","e9c1c843":"## Understand and describe the modeling objective\n\n\n\n*   This is a image dataset. This dataset contains 2782 files of abstract images.\n*   I want to use Generative modeling in this dataset.\n\n"}}