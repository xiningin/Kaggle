{"cell_type":{"064c5a66":"code","48ca0e50":"code","9019572e":"code","3fb79bfd":"code","7b754bf6":"code","1009a24d":"code","b9a89ed8":"code","8778ffcd":"code","bc9676ce":"code","73a7fd9b":"code","4ec992f2":"code","98737ff2":"code","c5cdcaee":"code","724e8d2d":"code","401ab4d9":"code","5b4e7808":"code","90ca0360":"code","9edf897d":"code","fa068b55":"code","1cf5b7f8":"code","74d2af50":"code","d19c76c1":"code","76e5ad30":"code","3df2cebb":"code","afe75d1c":"code","0be18c87":"markdown","80a00ed9":"markdown","2b200e00":"markdown"},"source":{"064c5a66":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import confusion_matrix, classification_report\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","48ca0e50":"sns.set(font_scale=1.5)\n\ndef plot_conf_mat(y_test, y_preds):\n    \"\"\"\n    Plots a nice looking confusion matrix using Seaborn's heatmap()\n    \"\"\"\n    \n    fig, ax = plt.subplots(figsize=(3, 3))\n    ax = sns.heatmap(confusion_matrix(y_test, y_preds),\n                     annot=True,\n                     cbar=False,\n                        fmt = 'd'\n                    )\n    plt.xlabel(\"True label\")\n    plt.ylabel(\"Predicted label\")","9019572e":"# Loading the data\npath = '\/kaggle\/input\/titanic\/'\ntrain_csv = pd.read_csv(path + 'train.csv', index_col = 'PassengerId')\ntest_csv = pd.read_csv(path + 'test.csv', index_col = 'PassengerId')","3fb79bfd":"train_csv","7b754bf6":"# the name should not be important \ntrain_csv.drop('Name', axis = 1, inplace = True)\ntest_csv.drop('Name', axis = 1, inplace = True)","1009a24d":"train_csv.info()","b9a89ed8":"train_csv.drop('Ticket', axis = 1, inplace = True)\ntest_csv.drop('Ticket', axis = 1, inplace = True)","8778ffcd":"def preprocess_cabin(df):\n    cabins = []\n    for i in df.Cabin:\n        cabin = str(i)\n        if 'A' in cabin:\n            cabins.append('A')\n        elif 'B' in cabin:\n            cabins.append('B')\n        elif 'C' in cabin:\n            cabins.append('C')\n        elif 'D' in cabin:\n            cabins.append('D')\n        elif 'E' in cabin:\n            cabins.append('B')\n        elif 'F' in cabin:\n            cabins.append('F')\n        elif 'G' in cabin:\n            cabins.append('G')\n        else:\n            cabins.append('nan')\n\n    return cabins\n    \n# train_csv.drop('Cabin', axis = 1, inplace = True)\ntrain_csv['Cabin'] = preprocess_cabin(train_csv)","bc9676ce":"train = pd.get_dummies(train_csv)","73a7fd9b":"train.Age.fillna(train.Age.median(), inplace = True)","4ec992f2":"X = train.drop('Survived', axis = 1)\ny = train.Survived","98737ff2":"np.random.seed(0)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2)\n\nclf  = RandomForestClassifier()\nclf.fit(X_train, y_train)","c5cdcaee":"clf.score(X_train, y_train)","724e8d2d":"y_preds = clf.predict(X_test)\nplot_conf_mat(y_test, y_preds)","401ab4d9":"print(classification_report(y_test, y_preds))","5b4e7808":"y_preds = clf.predict(X_train)\nplot_conf_mat(y_train, y_preds)","90ca0360":"print(classification_report(y_train, y_preds))","9edf897d":"test_csv","fa068b55":"test_csv.Cabin = preprocess_cabin(test_csv)\ntest_csv","1cf5b7f8":"test_csv.isna().sum()","74d2af50":"test_csv.Age.fillna(test_csv.Age.median(), inplace = True)\ntest_csv.Fare.fillna(test_csv.Fare.median(), inplace = True)","d19c76c1":"test_csv.isna().sum()","76e5ad30":"test = pd.get_dummies(test_csv)","3df2cebb":"test_preds = clf.predict(test)\ntest_preds","afe75d1c":"sub_df = pd.DataFrame({\n    'PassengerId': test.index,\n    'Survived': test_preds\n})\nsub_df.to_csv('sub1.csv', index = False)","0be18c87":"## Preprocess the test data and make the submission file","80a00ed9":"## Evaluate the model on train data","2b200e00":"## Evaluate the model on test data"}}