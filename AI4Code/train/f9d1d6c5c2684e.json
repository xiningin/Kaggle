{"cell_type":{"58d4e9a2":"code","c81acec0":"code","ac2c0a06":"code","0a376412":"code","184148e4":"code","43293087":"code","339194a3":"code","6abb8a55":"code","6a6c7a4d":"code","4561efbe":"code","cf03e199":"code","61a5d04a":"markdown","e70b97a2":"markdown","377a0f69":"markdown","f429669a":"markdown","ca777bdd":"markdown","e9975e13":"markdown"},"source":{"58d4e9a2":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.preprocessing import StandardScaler\n\nfrom sklearn.linear_model import LogisticRegression","c81acec0":"data = pd.read_csv('..\/input\/admission-predict\/Admission_Predict.csv')","ac2c0a06":"data","0a376412":"data.info()","184148e4":"data.describe()","43293087":"fig = make_subplots(\n    rows=1,\n    cols=2,\n    specs=[[{'type': 'polar'}, {'type': 'polar'}]],\n    subplot_titles=[\"Not Admitted\", \"Admitted\"]\n)\n\ndata0 = data.query(\"admitted == 0\")\ndata1 = data.query(\"admitted == 1\")\n\nfig.add_trace(\n    go.Scatterpolar(\n        r=[\n            data0['gre'].mean() \/ data['gre'].max(),\n            data0['sop'].mean() \/ data['sop'].max(),\n            data0['cgpa'].mean() \/ data['cgpa'].max()\n        ],\n        theta=[\"GRE\", \"SOP\", \"CGPA\"],\n        fill='toself',\n        name=\"Not Admitted\"\n    ), row=1, col=1\n)\n\nfig.add_trace(\n    go.Scatterpolar(\n        r=[\n            data1['gre'].mean() \/ data['gre'].max(),\n            data1['sop'].mean() \/ data['sop'].max(),\n            data1['cgpa'].mean() \/ data['cgpa'].max()\n        ],\n        theta=[\"GRE\", \"SOP\", \"CGPA\"],\n        fill='toself',\n        name=\"Admitted\"\n    ), row=1, col=2\n)\n\nfig.update_layout(title_text=\"Student Performance\")\n\nfig.show()","339194a3":"corr = data.corr()\n\nplt.figure(figsize=(12, 10))\nsns.heatmap(corr, annot=True, vmin=-1.0, cmap='mako')\nplt.title(\"Correlation Matrix\")\nplt.show()","6abb8a55":"data","6a6c7a4d":"y = data['admitted'].copy()\nX = data.drop('admitted', axis=1).copy()","4561efbe":"results = []\n\nskf = StratifiedKFold(n_splits=10)\n\nfor train_idx, test_idx in skf.split(X, y):\n    \n    X_train = X.iloc[train_idx, :].copy()\n    y_train = y.iloc[train_idx].copy()\n    X_test = X.iloc[test_idx, :].copy()\n    y_test = y.iloc[test_idx].copy()\n    \n    scaler = StandardScaler()\n    scaler.fit(X_train)\n    \n    X_train = pd.DataFrame(scaler.transform(X_train), index=X_train.index, columns=X_train.columns)\n    X_test = pd.DataFrame(scaler.transform(X_test), index=X_test.index, columns=X_test.columns)\n    \n    model = LogisticRegression()\n    model.fit(X_train, y_train)\n    \n    results.append(model.score(X_test, y_test))","cf03e199":"for i in range(len(results)):\n    print(\"Fold {}: {:.2f}%\".format(i + 1, results[i] * 100))\n\nprint(\"\\nAverage Test Accuracy: {:.2f}%\".format(np.mean(results) * 100))","61a5d04a":"# Getting Started","e70b97a2":"# Data Every Day  \n\nThis notebook is featured on Data Every Day, a YouTube series where I train models on a new dataset each day.  \n\n***\n\nCheck it out!  \nhttps:\/\/youtu.be\/no2sbnV-y2s","377a0f69":"# Task for Today  \n\n***\n\n## Student Admission Prediction  \n\nGiven *data about students' grades and test scores*, let's try to predict whether a given student will be **admitted** to graduate school.\n\nWe will use a logistic regression model to make our predictions. ","f429669a":"# Training","ca777bdd":"# Exploratory Data Analysis","e9975e13":"# Results"}}