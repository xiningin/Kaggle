{"cell_type":{"835ee099":"code","468cb5e7":"code","f3e349e2":"code","320d4d2f":"code","88c23655":"code","078794b9":"code","4a485c68":"code","a7b2d1cf":"code","2d77913b":"code","17928d68":"code","80ec1bb6":"code","7fe2ec91":"code","9ff334d4":"code","5069e5ed":"code","a8a995d9":"code","19af9dc6":"code","f66279c7":"code","6650eb4d":"code","863b5043":"code","f9519019":"code","0f8a0aa1":"code","4f49b1c0":"code","42f9ed46":"code","f38af33e":"code","75055726":"code","2cf97be7":"code","9c6ea10d":"code","0232f7d1":"code","3931be56":"code","4d4bb19b":"code","7d6878b5":"code","eb994882":"code","e235504e":"code","cb3fe761":"code","052f3a62":"code","a7bd3bb4":"code","a3acacfa":"code","31eb243c":"code","1b08b1e5":"code","ec019436":"markdown","01b5ad97":"markdown","81c08be0":"markdown","196f9a51":"markdown","126a5691":"markdown","51f138da":"markdown","67772649":"markdown","884a868e":"markdown","e9dd4535":"markdown","25b49133":"markdown","b55a681b":"markdown","c4145c1c":"markdown","d5cdb96d":"markdown","0b44863b":"markdown","9c6912b7":"markdown","02a7fec6":"markdown","3c808360":"markdown","5b369a6b":"markdown"},"source":{"835ee099":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nsns.set()\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import train_test_split","468cb5e7":"data= pd.read_csv(\"..\/input\/pima-indians-diabetes-database\/diabetes.csv\")","f3e349e2":"data.head()","320d4d2f":"data.shape","88c23655":"data.info()","078794b9":"data.describe()","4a485c68":"data_modified= data.copy()\ndata_modified.head()","a7b2d1cf":"data_modified[[\"Glucose\",\"BloodPressure\",\"SkinThickness\",\"Insulin\",\"BMI\"]] = data_modified[[\"Glucose\",\"BloodPressure\",\"SkinThickness\",\"Insulin\",\"BMI\"]].replace(0,np.NaN)\ndata_modified.head(10)","2d77913b":"corr=data_modified.corr()\ncorr","17928d68":"plt.figure(figsize=(8,7))\nsns.heatmap(corr, annot=True)","80ec1bb6":"import missingno as msno","7fe2ec91":"msno.matrix(data_modified,figsize=(13,5),fontsize=10)","9ff334d4":"msno.bar(data_modified,figsize=(12,4),fontsize=10)","5069e5ed":"data_modified.hist(figsize=(11,11))","a8a995d9":"data_modified[\"Glucose\"].fillna(data_modified[\"Glucose\"].mean(), inplace=True)\ndata_modified[\"BloodPressure\"].fillna(data_modified[\"BloodPressure\"].mean(), inplace= True)\ndata_modified[\"SkinThickness\"].fillna(data_modified[\"SkinThickness\"].median(),inplace=True)\ndata_modified[\"Insulin\"].fillna(data_modified[\"Insulin\"].median(), inplace=True)\ndata_modified[\"BMI\"].fillna(data_modified[\"BMI\"].median(), inplace=True)","19af9dc6":"data_modified.hist(figsize=(11,11))","f66279c7":"msno.matrix(data_modified,figsize=(12,4),fontsize=10)","6650eb4d":"msno.bar(data_modified,figsize=(12,4),fontsize=10)","863b5043":"sns.countplot(data_modified[\"Outcome\"])\ndata_modified.Outcome.value_counts()\n#p= data_modified.Outcome.value_counts().plot(kind=\"bar\")\n#p","f9519019":"plt.figure(figsize=(30,30))\np_plot= sns.pairplot(data_modified, hue=\"Outcome\")","0f8a0aa1":"new_corr= data_modified.corr()\nnew_corr","4f49b1c0":"plt.figure(figsize=(8,7))\nsns.heatmap(new_corr, annot=True)","42f9ed46":"from sklearn.preprocessing import StandardScaler\nscaler= StandardScaler()","f38af33e":"data_modified_X = data_modified.drop(\"Outcome\",axis=1)\ndata_modified_X","75055726":"X = pd.DataFrame(scaler.fit_transform(data_modified_X), columns = [\"Pregnancies\", \"Glucose\",\"BloodPressure\",\"SkinThickness\",\"Insulin\", \"BMI\",\"DiabetesPedigreeFunction\",\"Age\"])","2cf97be7":"X.head()","9c6ea10d":"y= data_modified[\"Outcome\"]","0232f7d1":"y.head()","3931be56":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42, stratify=y)","4d4bb19b":"test_scores= []\ntrain_scores= []\n\n\nfor i in range(1,20):\n    model= KNeighborsClassifier(i)\n    model.fit(X_train,y_train)\n\n    test_scores.append(model.score(X_test,y_test))\n    train_scores.append(model.score(X_train,y_train))\n    \n    \ntest_scores, train_scores","7d6878b5":"max(test_scores),max(train_scores)","eb994882":"max_index_test= test_scores.index(max(test_scores))+1\nprint(max_index_test)\n\nmax_index_train= train_scores.index(max(train_scores))+1\nprint(max_index_train)","e235504e":"print(\"max train score is {}% at k=[{}]\".format(max(train_scores)*100,max_index_train))","cb3fe761":"print(\"max test score is {}% at k=[{}]\".format(max(test_scores).round(3)*100,max_index_test))","052f3a62":"plt.figure(figsize=(11,4))\nsns.lineplot(range(1,20),train_scores,marker='o',label='Train Score')\nsns.lineplot(range(1,20),test_scores,markers=\"*\",label=\"Test Score\")","a7bd3bb4":"from sklearn.metrics import confusion_matrix","a3acacfa":"y_predicted = model.predict(X_test)\n\nconfusion_matrix = confusion_matrix(y_test,y_predicted)\ndf_confusion_matrix = pd.DataFrame(confusion_matrix)\nsns.heatmap(df_confusion_matrix, annot=True,fmt=\"g\")\n\nplt.title(\"Confusion Matrix\")\nplt.ylabel(\"Actual Label\")\nplt.xlabel(\"Predicted Label\")","31eb243c":"from sklearn.metrics import classification_report\nprint(classification_report(y_test, y_pred))","1b08b1e5":"from sklearn.model_selection import GridSearchCV\n\nparam_grid = {'n_neighbors':np.arange(1,50)}\nknn = KNeighborsClassifier()\nknn_cv= GridSearchCV(knn,param_grid,cv=5)\nknn_cv.fit(X,y)\n\nprint(\"Best Score:\" + str(knn_cv.best_score_))\nprint(\"Best Parameters: \" + str(knn_cv.best_params_))","ec019436":"#### Pairplot for modified data.","01b5ad97":"#### Getting maximum values of test score, train score.","81c08be0":"#### Loading the data","196f9a51":"#### Making \"data_modified\"  to compute \"0\" in the dataset.","126a5691":"#### Importing confusion matrix","51f138da":"#### Describing the data","67772649":"#### Finding correlation.","884a868e":"#### Histogram of the modified data.","e9dd4535":"#### Dropping \"Outcome\" from the features and making new dataframe name as \"data_modified_X\".","25b49133":"#### Applying StandardScaler on the data_modified_X","b55a681b":"#### Plotting Histograms after removing \"NaN\" values.","c4145c1c":"#### After splitting X and y we can apply train, test split on them.","d5cdb96d":"#### Filling \"NaN\" values with mean and median.","0b44863b":"#### Getting list of scores of test data and train data.","9c6912b7":"#### Heatmap of correlation","02a7fec6":"#### Getting indexes","3c808360":"#### New correlation, after removing NaN values.","5b369a6b":"#### Replacing zeros with \"NaN\" values"}}