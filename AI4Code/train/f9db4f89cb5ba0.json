{"cell_type":{"b79e7227":"code","8764f849":"code","5f82381f":"code","22643f4d":"code","2ad54fe6":"code","e3abb0ca":"code","214b0eff":"code","eed2022d":"code","f9846761":"code","3f858eda":"code","ce2213a0":"code","ca7173be":"code","20f4fe38":"code","b9216c0a":"code","fef4aad9":"code","74cbbbda":"code","f7706a30":"code","8fe5da21":"code","b5cc87ca":"code","09e2063d":"code","cc62fa47":"code","f404300b":"code","7b31f5b3":"code","16b9e059":"code","637f071a":"code","1a35f627":"code","4226b681":"code","f8eacb17":"code","6fde3db4":"code","25a5180b":"code","1f507c0e":"code","eb0e7bc7":"code","70991d48":"code","fba155c2":"code","92665ec6":"code","219e97b0":"code","abe07be2":"code","72f570b3":"code","a98dbf7c":"code","b00224c3":"code","cee6c7e8":"markdown","8eab8946":"markdown","5f1248c8":"markdown","e3e42fcd":"markdown","7b9c0800":"markdown","52ee70f3":"markdown","3b5ee5b6":"markdown","1da18307":"markdown","3f504eee":"markdown","1b141b65":"markdown","9d00016c":"markdown","d65cf438":"markdown","a260ff41":"markdown","3cf8ec6c":"markdown","2c69508c":"markdown","0882a7d5":"markdown","e74107e4":"markdown","4f132752":"markdown","b1b6bf59":"markdown","30da91e3":"markdown","bb1a7b01":"markdown","7af9632f":"markdown","5d429714":"markdown","b69de3e8":"markdown","d41285ab":"markdown","2bdca158":"markdown","edfeb2d3":"markdown","b5bf06d9":"markdown","ba52c5ac":"markdown","8705f81d":"markdown","4e4e2f1e":"markdown","d63133d4":"markdown","8d7f57fc":"markdown","6696c9b2":"markdown","863ce684":"markdown","be1e8b05":"markdown","938fb8bc":"markdown","3de4d7b6":"markdown","4438ed9d":"markdown","7dccddf6":"markdown","f1d7c769":"markdown","25afc27d":"markdown","3a51de00":"markdown","91b50f00":"markdown","037af637":"markdown","ee381ea2":"markdown","d45bdc64":"markdown","801e9d90":"markdown","7bf6d707":"markdown","e7563e58":"markdown","2836517a":"markdown","963ddc3e":"markdown"},"source":{"b79e7227":"from IPython import display\ndisplay.Image(\"https:\/\/raw.githubusercontent.com\/Masterx-AI\/Project_Pima_Indian_Diabetes_Detection_\/main\/pd.png\")","8764f849":"#Importing the basic librarires\n\nimport os\nimport math\nimport scipy\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom sklearn import tree\nfrom scipy.stats import randint\nfrom scipy.stats import loguniform\nfrom IPython.display import display\n\nfrom sklearn.decomposition import PCA\nfrom imblearn.over_sampling import SMOTE\nfrom sklearn.feature_selection import RFE\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\n\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.model_selection import RepeatedStratifiedKFold\n\nfrom sklearn.svm import SVC\nfrom xgboost import XGBClassifier\nfrom sklearn.naive_bayes import BernoulliNB\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\n\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import PolynomialFeatures\n\nfrom scikitplot.metrics import plot_roc_curve as auc_roc\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report, \\\nf1_score, roc_auc_score, roc_curve, precision_score, recall_score\n\nimport matplotlib.pyplot as plt\nplt.rcParams['figure.figsize'] = [10,6]\n\nimport warnings \nwarnings.filterwarnings('ignore')\n\npd.set_option('display.max_columns', 50)","5f82381f":"#Importing the dataset\n\ndf = pd.read_csv('..\/input\/pima-diabetes-dataset\/Diabetes.csv')\n#df.drop([''],axis=1, inplace=True)\n\ntarget = 'Outcome'\nlabels = ['Non-Diabetic','Datiabetic']\nfeatures = [i for i in df.columns.values if i not in [target]]\n\noriginal_df = df.copy(deep=True)\ndisplay(df.head())\n\nprint('\\n\\033[1mInference:\\033[0m The Datset consists of {} features & {} samples.'.format(df.shape[1], df.shape[0]))","22643f4d":"#Checking the dtypes of all the columns\n\ndf.info()","2ad54fe6":"#Checking number of unique rows in each feature\n\ndf.nunique().sort_values()","e3abb0ca":"#Checking number of unique rows in each feature\n\nnu = df[features].nunique().sort_values()\nnf = []; cf = []; nnf = 0; ncf = 0; #numerical & categorical features\n\nfor i in range(df[features].shape[1]):\n    if nu.values[i]<=7:cf.append(nu.index[i])\n    else: nf.append(nu.index[i])\n\nprint('\\n\\033[1mInference:\\033[0m The Datset has {} numerical & {} categorical features.'.format(len(nf),len(cf)))","214b0eff":"#Checking the stats of all the columns\n\ndisplay(df.describe())","eed2022d":"#Let us first analyze the distribution of the target variable\n\nMAP={}\nfor e, i in enumerate(df[target].unique()):\n    MAP[i]=labels[e]\n#MAP={0:'Not-Survived',1:'Survived'}\ndf1 = df.copy()\ndf1[target]=df1[target].map(MAP)\nexplode=np.zeros(len(labels))\nexplode[-1]=0.1\nprint('\\033[1mTarget Variable Distribution'.center(55))\nplt.pie(df1[target].value_counts(), labels=df1[target].value_counts().index, counterclock=False, shadow=True, \n        explode=explode, autopct='%1.1f%%', radius=1, startangle=0)\nplt.show()","f9846761":"# #Visualising the categorical features \n\n# print('\\033[1mVisualising Categorical Features:'.center(100))\n\n# n=3\n# plt.figure(figsize=[15,3*math.ceil(len(cf)\/n)])\n\n# for i in range(len(cf)):\n#     if df[cf[i]].nunique()<=6:\n#         plt.subplot(math.ceil(len(cf)\/n),n,i+1)\n#         sns.countplot(df[cf[i]])\n#     else:\n#         plt.subplot(3,1,i-1)\n#         sns.countplot(df[cf[i]])\n# plt.tight_layout()\n# plt.show()","3f858eda":"#Understanding the feature set\n\nprint('\\033[1mFeatures Distribution'.center(100))\n\nnf = [i for i in features if i not in cf]\n\nplt.figure(figsize=[15,3*math.ceil(len(features)\/3)])\nfor c in range(len(nf)):\n    plt.subplot(math.ceil(len(features)\/3),3,c+1)\n    sns.distplot(df[nf[c]])\nplt.tight_layout()\nplt.show()\n\nplt.figure(figsize=[15,3*math.ceil(len(features)\/3)])\nfor c in range(len(nf)):\n    plt.subplot(math.ceil(len(features)\/3),3,c+1)\n    df.boxplot(nf[c])\nplt.tight_layout()\nplt.show()","ce2213a0":"#Understanding the relationship between all the features\n\ng=sns.pairplot(df1, hue=target, size=4)\ng.map_upper(sns.kdeplot, levels=1, color=\".2\")\nplt.show()","ca7173be":"#Removal of any Duplicate rows (if any)\n\ncounter = 0\nr,c = original_df.shape\n\ndf1 = df.copy()\ndf1.drop_duplicates(inplace=True)\ndf1.reset_index(drop=True,inplace=True)\n\nif df1.shape==(r,c):\n    print('\\n\\033[1mInference:\\033[0m The dataset doesn\\'t have any duplicates')\nelse:\n    print(f'\\n\\033[1mInference:\\033[0m Number of duplicates dropped ---> {r-df1.shape[0]}')","20f4fe38":"#Check for empty elements\n\nnvc = pd.DataFrame(df1.isnull().sum().sort_values(), columns=['Total Null Values'])\nnvc['Percentage'] = round(nvc['Total Null Values']\/df1.shape[0],3)*100\nprint(nvc)","b9216c0a":"#Converting categorical Columns to Numeric\n\n#df1 = df.copy()\necc = nvc[nvc['Percentage']!=0].index.values\ndcc = [i for i in df.columns if i not in ecc]\n\n# #Target Variable\n# MAP={}\n# for i,e in enumerate(df1[target].unique()):\n#     MAP[e]=i\n# df1[target]=df1[target].map(MAP)\n# print('Mapping Target variable --->',MAP)\n\ndf3 = df1[dcc]\nfcc = [i for i in cf if i not in ecc]\n\n# #One-Hot Binay Encoding\n# oh=True\n# dm=True\n# for i in fcc:\n#     #print(i)\n#     if df3[i].nunique()==2:\n#         if oh==True: print(\"\\033[1m\\nOne-Hot Encoding on features:\\033[0m\")\n#         print(i);oh=False\n#         df3[i]=pd.get_dummies(df3[i], drop_first=True, prefix=str(i))\n#     if (df3[i].nunique()>2 and df3[i].nunique()<17):\n#         if dm==True: print(\"\\n\\033[1mDummy Encoding on features:\\033[0m\")\n#         print(i);dm=False\n#         df3 = pd.concat([df3.drop([i], axis=1), pd.DataFrame(pd.get_dummies(df3[i], drop_first=True, prefix=str(i)))],axis=1)\n        \n# df3.shape","fef4aad9":"# # Fixing Empty Categorical Columns\n\n# for x in [i for i in ecc if i in cf]:\n#     a = df1[x]\n#     b=[]; c=[]\n\n#     for i,e in enumerate(a):\n#         if e!=e:\n#             b.append(i)\n#         else:\n#             c.append(i)\n\n#     RF = RandomForestClassifier()\n#     RF.fit(df3.loc[c],a[c])\n#     d = RF.predict(df3.loc[b])\n\n#     df3[x] = a\n#     f=0\n#     for i,e in enumerate(df3[x]):\n#         if e!=e:\n#             df3.loc[i,x] = d[f]\n#             f+=1\n#     df3 = pd.concat([df3.drop([x], axis=1), pd.DataFrame(pd.get_dummies(df3[x], drop_first=True, prefix=str(x)))],axis=1)   \n# df3","74cbbbda":"# # Fixing Empty Numerical Columns\n\n# for x in [i for i in ecc if i not in cf]:\n#     a = df1[x]\n#     b=[]; c=[]\n\n#     for i,e in enumerate(a):\n#         if e!=e:\n#             b.append(i)\n#         else:\n#             c.append(i)\n\n#     LR = LinearRegression()\n#     LR.fit(df3.loc[c],a[c])\n#     d = LR.predict(df3.loc[b])\n\n#     df3[x] = a\n#     f=0\n#     for i,e in enumerate(df3[x]):\n#         if e!=e:\n#             df3.loc[i,x] = d[f]\n#             f+=1\n#     #df3 = pd.concat([df3.drop([x], axis=1), pd.DataFrame(pd.get_dummies(df3[x], drop_first=True, prefix=str(x)))],axis=1)   \n# df3","f7706a30":"#Removal of outlier:\n\ndf4 = df3.copy()\n\nfor i in [i for i in df4.columns]:\n    if df4[i].nunique()>=12:\n        Q1 = df4[i].quantile(0.25)\n        Q3 = df4[i].quantile(0.75)\n        IQR = Q3 - Q1\n        df4 = df4[df4[i] <= (Q3+(1.5*IQR))]\n        df4 = df4[df4[i] >= (Q1-(1.5*IQR))]\ndf4 = df4.reset_index(drop=True)\ndisplay(df4.head())\nprint('\\n\\033[1mInference:\\033[0m Before removal of outliers, The dataset had {} samples.'.format(df1.shape[0]))\nprint('\\033[1mInference:\\033[0m After removal of outliers, The dataset now has {} samples.'.format(df4.shape[0]))","8fe5da21":"#Fixing the imbalance using SMOTE Technique\n\ndf5 = df4.copy()\n\nprint('Original class distribution:')\nprint(df5[target].value_counts())\n\nxf = df5.columns\nX = df5.drop([target],axis=1)\nY = df5[target]\n\nsmote = SMOTE()\nX, Y = smote.fit_resample(X, Y)\n\ndf5 = pd.DataFrame(X, columns=xf)\ndf5[target] = Y\n\nprint('\\nClass distribution after applying SMOTE Technique:',)\nprint(Y.value_counts())","b5cc87ca":"#Final Dataset size after performing Preprocessing\n\ndf = df5.copy()\nplt.title('Final Dataset Samples')\nplt.pie([df.shape[0], original_df.shape[0]-df4.shape[0], df5.shape[0]-df4.shape[0]], radius = 1, shadow=True,\n        labels=['Retained','Dropped','Augmented'], counterclock=False, autopct='%1.1f%%', pctdistance=0.9, explode=[0,0,0])\nplt.pie([df.shape[0]], labels=['100%'], labeldistance=-0, radius=0.78, shadow=True, colors=['powderblue'])\nplt.show()\n\nprint('\\n\\033[1mInference:\\033[0mThe final dataset after cleanup has {} samples & {} columns.'.format(df.shape[0], df.shape[1]))","09e2063d":"#Splitting the data intro training & testing sets\n\ndf = df5.copy()\n\nX = df.drop([target],axis=1)\nY = df[target]\nTrain_X, Test_X, Train_Y, Test_Y = train_test_split(X, Y, train_size=0.8, test_size=0.2, random_state=0)\n\nprint('Original set  ---> ',X.shape,Y.shape,'\\nTraining set  ---> ',Train_X.shape,Train_Y.shape,'\\nTesting set   ---> ', Test_X.shape,'', Test_Y.shape)","cc62fa47":"#Feature Scaling (Standardization)\n\nstd = StandardScaler()\n\nprint('\\033[1mStandardardization on Training set'.center(100))\nTrain_X_std = std.fit_transform(Train_X)\nTrain_X_std = pd.DataFrame(Train_X_std, columns=X.columns)\ndisplay(Train_X_std.describe())\n\nprint('\\n','\\033[1mStandardardization on Testing set'.center(100))\nTest_X_std = std.transform(Test_X)\nTest_X_std = pd.DataFrame(Test_X_std, columns=X.columns)\ndisplay(Test_X_std.describe())","f404300b":"#Checking the correlation\n\nfeatures = df.columns\nplt.figure(figsize=[12,10])\nplt.title('Features Correlation-Plot')\nsns.heatmap(df[features].corr(), vmin=-1, vmax=1, center=0, annot=True) #, \nplt.show()","7b31f5b3":"# Calculate the VIFs to remove multicollinearity\n\nDROP=[]; scores1=[]; scores2=[]; scores3=[]\n#scores.append(f1_score(Test_Y,LogisticRegression().fit(Train_X_std, Train_Y).predict(Test_X_std)))\nscores1.append(f1_score(Test_Y,LogisticRegression().fit(Train_X_std.drop(DROP,axis=1), Train_Y).predict(Test_X_std.drop(DROP,axis=1)),average='weighted')*100)\nscores2.append(f1_score(Test_Y,RandomForestClassifier().fit(Train_X_std.drop(DROP,axis=1), Train_Y).predict(Test_X_std.drop(DROP,axis=1)),average='weighted')*100)\nscores3.append(f1_score(Test_Y,XGBClassifier().fit(Train_X_std.drop(DROP,axis=1), Train_Y, eval_metric='logloss').predict(Test_X_std.drop(DROP,axis=1)),average='weighted')*100)\n        \nfor i in range(len(X.columns.values)-1):\n    vif = pd.DataFrame()\n    Xs = X.drop(DROP,axis=1)\n    #print(DROP)\n    vif['Features'] = Xs.columns\n    vif['VIF'] = [variance_inflation_factor(Xs.values, i) for i in range(Xs.shape[1])]\n    vif['VIF'] = round(vif['VIF'], 2)\n    vif = vif.sort_values(by = \"VIF\", ascending = False)\n    vif.reset_index(drop=True, inplace=True)\n    DROP.append(vif.Features[0])\n    if vif.VIF[0]>1:\n        scores1.append(f1_score(Test_Y,LogisticRegression().fit(Train_X_std.drop(DROP,axis=1), Train_Y).predict(Test_X_std.drop(DROP,axis=1)),average='weighted')*100)\n        scores2.append(f1_score(Test_Y,RandomForestClassifier().fit(Train_X_std.drop(DROP,axis=1), Train_Y).predict(Test_X_std.drop(DROP,axis=1)),average='weighted')*100)\n        scores3.append(f1_score(Test_Y,XGBClassifier().fit(Train_X_std.drop(DROP,axis=1), Train_Y, eval_metric='logloss').predict(Test_X_std.drop(DROP,axis=1)),average='weighted')*100)\n    #print(scores)\n    \nplt.plot(scores1, label='LR')\nplt.plot(scores2, label='RF')\nplt.plot(scores3, label='XG')\n#plt.ylim([0.7,0.85])\nplt.legend()\nplt.grid()\nplt.show()","16b9e059":"# Applying Recurrsive Feature Elimination\n\n# Running RFE with the output number of the variable equal to 10\nLR = LogisticRegression()#.fit(Train_X_std, Train_Y)\nscores1=[]; scores2=[]; scores3=[]\nscores1.append(f1_score(Test_Y,LogisticRegression().fit(Train_X_std, Train_Y).predict(Test_X_std),average='weighted')*100)\nscores2.append(f1_score(Test_Y,RandomForestClassifier().fit(Train_X_std, Train_Y).predict(Test_X_std),average='weighted')*100)\nscores3.append(f1_score(Test_Y,XGBClassifier().fit(Train_X_std, Train_Y, eval_metric='logloss').predict(Test_X_std),average='weighted')*100)\n\nfor i in range(len(X.columns.values)):\n    rfe = RFE(LR,n_features_to_select=len(Train_X_std.columns)-i)   \n    rfe = rfe.fit(Train_X_std, Train_Y)\n    scores1.append(f1_score(Test_Y,LogisticRegression().fit(Train_X_std[Train_X_std.columns[rfe.support_]], Train_Y).predict(Test_X_std[Train_X_std.columns[rfe.support_]]),average='weighted')*100)\n    scores2.append(f1_score(Test_Y,RandomForestClassifier().fit(Train_X_std[Train_X_std.columns[rfe.support_]], Train_Y).predict(Test_X_std[Train_X_std.columns[rfe.support_]]),average='weighted')*100)\n    scores3.append(f1_score(Test_Y,XGBClassifier().fit(Train_X_std[Train_X_std.columns[rfe.support_]], Train_Y, eval_metric='logloss').predict(Test_X_std[Train_X_std.columns[rfe.support_]]),average='weighted')*100)\n    \nplt.plot(scores1, label='LR')\nplt.plot(scores2, label='RF')\nplt.plot(scores3, label='XG')\n#plt.ylim([0.80,0.84])\nplt.legend()\nplt.grid()\nplt.show()","637f071a":"from sklearn.decomposition import PCA\n\npca = PCA().fit(Train_X_std)\n\nfig, ax = plt.subplots(figsize=(14,6))\nx_values = range(1, pca.n_components_+1)\nax.bar(x_values, pca.explained_variance_ratio_, lw=2, label='Explained Variance')\nax.plot(x_values, np.cumsum(pca.explained_variance_ratio_), lw=2, label='Cumulative Explained Variance', color='red')\nplt.plot([0,pca.n_components_+1],[0.90,0.90],'g--')\nplt.plot([6,6],[0,1], 'g--')\nax.set_title('Explained variance of components')\nax.set_xlabel('Principal Component')\nax.set_ylabel('Explained Variance')\nplt.grid()\nplt.legend()\nplt.show()","1a35f627":"#Applying PCA Transformations\n\n# scores1.append(f1_score(Test_Y,LogisticRegression().fit(Train_X_std, Train_Y).predict(Test_X_std),average='weighted')*100)\n# scores2.append(f1_score(Test_Y,RandomForestClassifier().fit(Train_X_std, Train_Y).predict(Test_X_std),average='weighted')*100)\n# scores3.append(f1_score(Test_Y,XGBClassifier().fit(Train_X_std, Train_Y, eval_metric='logloss').predict(Test_X_std),average='weighted')*100)\n\nscores1=[]; scores2=[]; scores3=[]\nfor i in range(len(X.columns.values)):\n    pca = PCA(n_components=Train_X_std.shape[1]-i)\n    Train_X_std_pca = pca.fit_transform(Train_X_std)\n    #print('The shape of final transformed training feature set:')\n    #print(Train_X_std_pca.shape)\n    Train_X_std_pca = pd.DataFrame(Train_X_std_pca)\n\n    Test_X_std_pca = pca.transform(Test_X_std)\n    #print('\\nThe shape of final transformed testing feature set:')\n    #print(Test_X_std_pca.shape)\n    Test_X_std_pca = pd.DataFrame(Test_X_std_pca)\n    \n    scores1.append(f1_score(Test_Y,LogisticRegression().fit(Train_X_std_pca, Train_Y).predict(Test_X_std_pca),average='weighted')*100)\n    scores2.append(f1_score(Test_Y,RandomForestClassifier().fit(Train_X_std_pca, Train_Y).predict(Test_X_std_pca),average='weighted')*100)\n    scores3.append(f1_score(Test_Y,XGBClassifier().fit(Train_X_std_pca, Train_Y, eval_metric='logloss').predict(Test_X_std_pca),average='weighted')*100)\n\n    \nplt.plot(scores1, label='LR')\nplt.plot(scores2, label='RF')\nplt.plot(scores3, label='XG')\n#plt.ylim([0.80,0.84])\nplt.legend()\nplt.grid()\nplt.show()","4226b681":"#### Finalising the shortlisted features\n\nrfe = RFE(LR,n_features_to_select=len(Train_X_std.columns))   \nrfe = rfe.fit(Train_X_std, Train_Y)\n\nprint(f1_score(Test_Y,LogisticRegression().fit(Train_X_std[Train_X_std.columns[rfe.support_]], Train_Y).predict(Test_X_std[Train_X_std.columns[rfe.support_]]),average='weighted')*100)\nprint(f1_score(Test_Y,RandomForestClassifier().fit(Train_X_std[Train_X_std.columns[rfe.support_]], Train_Y).predict(Test_X_std[Train_X_std.columns[rfe.support_]]),average='weighted')*100)\nprint(f1_score(Test_Y,XGBClassifier().fit(Train_X_std[Train_X_std.columns[rfe.support_]], Train_Y, eval_metric='logloss').predict(Test_X_std[Train_X_std.columns[rfe.support_]]),average='weighted')*100)\n    \nTrain_X_std = Train_X_std[Train_X_std.columns[rfe.support_]]\nTest_X_std = Test_X_std[Test_X_std.columns[rfe.support_]]\n\nprint(Train_X_std.shape)\nprint(Test_X_std.shape)","f8eacb17":"#Let us create first create a table to store the results of various models \n\nEvaluation_Results = pd.DataFrame(np.zeros((8,5)), columns=['Accuracy', 'Precision','Recall','F1-score','AUC-ROC score'])\nEvaluation_Results.index=['Logistic Regression (LR)','Decision Tree Classifier (DT)','Random Forest Classifier (RF)','Na\u00efve Bayes Classifier (NB)',\n                         'Support Vector Machine (SVM)','K Nearest Neighbours (KNN)', 'Gradient Boosting (GB)','Extreme Gradient Boosting (XGB)']\nEvaluation_Results","6fde3db4":"#Let us define functions to summarise the Prediction's scores .\n\n#Classification Summary Function\ndef Classification_Summary(pred,pred_prob,i):\n    Evaluation_Results.iloc[i]['Accuracy']=round(accuracy_score(Test_Y, pred),3)*100   \n    Evaluation_Results.iloc[i]['Precision']=round(precision_score(Test_Y, pred, average='weighted'),3)*100 #\n    Evaluation_Results.iloc[i]['Recall']=round(recall_score(Test_Y, pred, average='weighted'),3)*100 #\n    Evaluation_Results.iloc[i]['F1-score']=round(f1_score(Test_Y, pred, average='weighted'),3)*100 #\n    Evaluation_Results.iloc[i]['AUC-ROC score']=round(roc_auc_score(Test_Y, pred_prob[:,1], multi_class='ovr'),3)*100 #[:, 1]\n    print('{}{}\\033[1m Evaluating {} \\033[0m{}{}\\n'.format('<'*3,'-'*35,Evaluation_Results.index[i], '-'*35,'>'*3))\n    print('Accuracy = {}%'.format(round(accuracy_score(Test_Y, pred),3)*100))\n    print('F1 Score = {}%'.format(round(f1_score(Test_Y, pred, average='weighted'),3)*100)) #\n    print('\\n\\033[1mConfusiton Matrix:\\033[0m\\n',confusion_matrix(Test_Y, pred))\n    print('\\n\\033[1mClassification Report:\\033[0m\\n',classification_report(Test_Y, pred))\n    \n    auc_roc(Test_Y, pred_prob, curves=['each_class'])\n    plt.show()\n\n#Visualising Function\ndef AUC_ROC_plot(Test_Y, pred):    \n    ref = [0 for _ in range(len(Test_Y))]\n    ref_auc = roc_auc_score(Test_Y, ref)\n    lr_auc = roc_auc_score(Test_Y, pred)\n\n    ns_fpr, ns_tpr, _ = roc_curve(Test_Y, ref)\n    lr_fpr, lr_tpr, _ = roc_curve(Test_Y, pred)\n\n    plt.plot(ns_fpr, ns_tpr, linestyle='--')\n    plt.plot(lr_fpr, lr_tpr, marker='.', label='AUC = {}'.format(round(roc_auc_score(Test_Y, pred)*100,2))) \n    plt.xlabel('False Positive Rate')\n    plt.ylabel('True Positive Rate')\n    plt.legend()\n    plt.show()","25a5180b":"# Building Logistic Regression Classifier\n\nLR_model = LogisticRegression()\n\nspace = dict()\nspace['solver'] = ['newton-cg', 'lbfgs', 'liblinear']\nspace['penalty'] = ['l2'] #'none', 'l1', 'l2', 'elasticnet'\nspace['C'] = loguniform(1e-5, 100)\n\ncv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=1)\n\nRCV = RandomizedSearchCV(LR_model, space, n_iter=50, scoring='roc_auc', n_jobs=-1, cv=5, random_state=1)\n\nLR = RCV.fit(Train_X_std, Train_Y).best_estimator_\npred = LR.predict(Test_X_std)\npred_prob = LR.predict_proba(Test_X_std)\nClassification_Summary(pred,pred_prob,0)\n\nprint('\\n\\033[1mInterpreting the Output of Logistic Regression:\\n\\033[0m')\n\nprint('intercept ', LR.intercept_[0])\nprint('classes', LR.classes_)\ndisplay(pd.DataFrame({'coeff': LR.coef_[0]}, index=Train_X_std.columns))","1f507c0e":"#Building Decision Tree Classifier\n\nDT_model = DecisionTreeClassifier()\n\nparam_dist = {\"max_depth\": [3, None],\n              \"max_features\": randint(1, 9),\n              \"min_samples_leaf\": randint(1, 9),\n              \"criterion\": [\"gini\", \"entropy\"]}\n\ncv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=1)\n\nRCV = RandomizedSearchCV(DT_model, param_dist, n_iter=50, scoring='roc_auc', n_jobs=-1, cv=5, random_state=1)\n\nDT = RCV.fit(Train_X_std, Train_Y).best_estimator_\npred = DT.predict(Test_X_std)\npred_prob = DT.predict_proba(Test_X_std)\nClassification_Summary(pred,pred_prob,1)\n\nprint('\\n\\033[1mInterpreting the output of Decision Tree:\\n\\033[0m')\ntree.plot_tree(DT)\nplt.show()","eb0e7bc7":"# Building Random-Forest Classifier\n\nRF_model = RandomForestClassifier()\n\nparam_dist={'bootstrap': [True, False],\n            'max_depth': [10, 20, 50, 100, None],\n            'max_features': ['auto', 'sqrt'],\n            'min_samples_leaf': [1, 2, 4],\n            'min_samples_split': [2, 5, 10],\n            'n_estimators': [50, 100]}\n\ncv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=1)\n\nRCV = RandomizedSearchCV(RF_model, param_dist, n_iter=50, scoring='roc_auc', n_jobs=-1, cv=5, random_state=1)\n\nRF = RCV.fit(Train_X_std, Train_Y).best_estimator_\npred = RF.predict(Test_X_std)\npred_prob = RF.predict_proba(Test_X_std)\nClassification_Summary(pred,pred_prob,2)\n\nprint('\\n\\033[1mInterpreting the output of Random Forest:\\n\\033[0m')\nrfi=pd.Series(RF.feature_importances_, index=Train_X_std.columns).sort_values(ascending=False)\nplt.barh(rfi.index,rfi.values)\nplt.show()","70991d48":"# Building Naive Bayes Classifier\n\nNB_model = BernoulliNB()\n\nparams = {'alpha': [0.01, 0.1, 0.5, 1.0, 10.0]}\ncv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=1)\n\nRCV = RandomizedSearchCV(NB_model, params, n_iter=50, scoring='roc_auc', n_jobs=-1, cv=5, random_state=1)\n\nNB = RCV.fit(Train_X_std, Train_Y).best_estimator_\npred = NB.predict(Test_X_std)\npred_prob = NB.predict_proba(Test_X_std)\nClassification_Summary(pred,pred_prob,3)","fba155c2":"# Building Support Vector Machine Classifier\n\nSVM_model = SVC(probability=True).fit(Train_X_std, Train_Y)\n\nsvm_param = {\"C\": [.01, .1, 1, 5, 10, 100],             \n             \"gamma\": [.01, .1, 1, 5, 10, 100],\n             \"kernel\": [\"rbf\"],\n             \"random_state\": [1]}\n\ncv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=1)\n\nRCV = RandomizedSearchCV(SVM_model, svm_param, n_iter=50, scoring='roc_auc', n_jobs=-1, cv=5, random_state=1)\n\nSVM = RCV.fit(Train_X_std, Train_Y).best_estimator_\npred = SVM.predict(Test_X_std)\npred_prob = SVM.predict_proba(Test_X_std)\nClassification_Summary(pred,pred_prob,4)","92665ec6":"# Building K-Neareset Neighbours Classifier\n\nKNN_model = KNeighborsClassifier()\n\nknn_param = {\"n_neighbors\": [i for i in range(1,30,5)],\n             \"weights\": [\"uniform\", \"distance\"],\n             \"algorithm\": [\"ball_tree\", \"kd_tree\", \"brute\"],\n             \"leaf_size\": [1, 10, 30],\n             \"p\": [1,2]}\n\ncv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=1)\n\nRCV = RandomizedSearchCV(KNN_model, knn_param, n_iter=50, scoring='roc_auc', n_jobs=-1, cv=5, random_state=1)\n\nKNN = RCV.fit(Train_X_std, Train_Y).best_estimator_\npred = KNN.predict(Test_X_std)\npred_prob = KNN.predict_proba(Test_X_std)\nClassification_Summary(pred,pred_prob,5)","219e97b0":"# Building Gradient Boosting Classifier\n\nGB_model = GradientBoostingClassifier().fit(Train_X_std, Train_Y)\nparam_dist = {\n    \"n_estimators\":[5,20,100,500],\n    \"max_depth\":[1,3,5,7,9],\n    \"learning_rate\":[0.01,0.1,1,10,100]\n}\n\ncv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=1)\n\nRCV = RandomizedSearchCV(GB_model, param_dist, n_iter=50, scoring='roc_auc', n_jobs=-1, cv=5, random_state=1)\n\nGB = RCV.fit(Train_X_std, Train_Y).best_estimator_\npred = GB.predict(Test_X_std)\npred_prob = GB.predict_proba(Test_X_std)\nClassification_Summary(pred,pred_prob,6)","abe07be2":"# Building Extreme Gradient Boosting Classifier\n\nXGB_model = XGBClassifier()#.fit(Train_X_std, Train_Y, eval_metric='logloss')\n\nparam_dist = {\n \"learning_rate\" : [0.05,0.10,0.15,0.20,0.25,0.30],\n \"max_depth\" : [ 3, 4, 5, 6, 8, 10, 12, 15],\n \"min_child_weight\" : [ 1, 3, 5, 7 ],\n \"gamma\": [ 0.0, 0.1, 0.2 , 0.3, 0.4 ],\n \"colsample_bytree\" : [ 0.3, 0.4, 0.5 , 0.7 ]\n}\n\ncv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=1)\n\n#RCV = RandomizedSearchCV(XGB_model, param_dist, n_iter=50, scoring='roc_auc', n_jobs=-1, cv=5, random_state=1)\n\nXGB = XGB_model.fit(Train_X_std, Train_Y, eval_metric='logloss')#.best_estimator_\npred = XGB.predict(Test_X_std)\npred_prob = XGB.predict_proba(Test_X_std)\nClassification_Summary(pred,pred_prob,7)\n\nxgbf=pd.DataFrame(XGB.feature_importances_, index=Train_X_std.columns).sort_values(by=0)\nplt.barh(xgbf.index,xgbf.values[:,0])\nplt.show()","72f570b3":"#Plotting Confusion-Matrix of all the predictive Models\n\ndef plot_cm(y_true, y_pred):\n    cm = confusion_matrix(y_true, y_pred, labels=np.unique(y_true))\n    cm_sum = np.sum(cm, axis=1, keepdims=True)\n    cm_perc = cm \/ cm_sum.astype(float) * 100\n    annot = np.empty_like(cm).astype(str)\n    nrows, ncols = cm.shape\n    for i in range(nrows):\n        for j in range(ncols):\n            c = cm[i, j]\n            p = cm_perc[i, j]\n            if i == j:\n                s = cm_sum[i]\n                annot[i, j] = '%.1f%%\\n%d\/%d' % (p, c, s)\n            elif c == 0:\n                annot[i, j] = ''\n            else:\n                annot[i, j] = '%.1f%%\\n%d' % (p, c)\n    cm = pd.DataFrame(cm, index=np.unique(y_true), columns=np.unique(y_true))\n    cm.columns=labels\n    cm.index=labels\n    cm.index.name = 'Actual'\n    cm.columns.name = 'Predicted'\n    #fig, ax = plt.subplots()\n    sns.heatmap(cm, annot=annot, fmt='')# cmap= \"GnBu\"\n    \ndef conf_mat_plot(all_models):\n    plt.figure(figsize=[20,3.5*math.ceil(len(all_models)*len(labels)\/14)])\n    \n    for i in range(len(all_models)):\n        if len(labels)<=4:\n            plt.subplot(2,4,i+1)\n        else:\n            plt.subplot(math.ceil(len(all_models)\/3),3,i+1)\n        pred = all_models[i].predict(Test_X_std)\n        #plot_cm(Test_Y, pred)\n        sns.heatmap(confusion_matrix(Test_Y, pred), annot=True, cmap='Blues', fmt='.0f') #vmin=0,vmax=5\n        plt.title(Evaluation_Results.index[i])\n    plt.tight_layout()\n    plt.show()\n\nconf_mat_plot([LR,DT,RF,NB,SVM,KNN,GB,XGB])","a98dbf7c":"#Comparing all the models Scores\n\nprint('\\033[1mML Algorithms Comparison'.center(100))\nplt.figure(figsize=[12,8])\nsns.heatmap(Evaluation_Results, annot=True, vmin=60, vmax=90, cmap='Blues', fmt='.1f')\nplt.show()","b00224c3":"#<<<---------------------------------------------THE END----------------------------------------------------------------->>>","cee6c7e8":"---","8eab8946":"## 6. K-Nearest Neighbours Classfier:","5f1248c8":"---","e3e42fcd":"**Insights:** For the current problem statement, it is more important to focus on the Recall score. We can note from the above heatmap that the SVM, Random Forest & Extreme Gradient Boosting Model Performed well on the current dataset...","7b9c0800":"# <center>1. Data Exploration","52ee70f3":"---","3b5ee5b6":"**Inference:** There are many outliers in the dataset. Let us try to impute the missing values","1da18307":"---","3f504eee":"# <center> 4. Data Manipulation","1b141b65":"---","9d00016c":"**Inference:** Visualizing the categorical features reveal lot of information about the dataset.","d65cf438":"## 7. Gradient Boosting Classfier:","a260ff41":"## 8. Extreme Gradient Boosting Classfier:","3cf8ec6c":"---","2c69508c":"**Inference:** The Target Variable seems to be slightly imbalanced! Hence we shall try to perform data augmentation.","0882a7d5":"# <center> 3. Data Preprocessing","e74107e4":"## 1. Logistic Regression:","4f132752":"# <center> 6. Predictive Modeling","b1b6bf59":"## 3. Random Forest Classfier:","30da91e3":"---","bb1a7b01":"**Inference:** We shall avoid performing dimensionality reduction for the current problem.","7af9632f":"**We aim to solve the problem statement by creating a plan of action, Here are some of the necessary steps:**\n1. Data Exploration\n2. Exploratory Data Analysis (EDA)\n3. Data Pre-processing\n4. Data Manipulation\n5. Feature Selection\/Extraction\n6. Predictive Modelling\n7. Project Outcomes & Conclusion","5d429714":"---","b69de3e8":"# <center> 5. Feature Selection\/Extraction","d41285ab":"## 5a. Manual Method - VIF","2bdca158":"---","edfeb2d3":"---","b5bf06d9":"### Description:\nThis dataset is originally from the National Institute of Diabetes and Digestive and Kidney Diseases. The objective of the dataset is to diagnostically predict whether or not a patient has diabetes, based on certain diagnostic measurements included in the dataset. Several constraints were placed on the selection of these instances from a larger database. In particular, all patients here are females at least 21 years old of Pima Indian heritage. <br><br>The datasets consists of several medical predictor variables and one target variable, Outcome. Predictor variables includes the number of pregnancies the patient has had, their BMI, insulin level, age, and so on. Can you build a machine learning model to accurately predict whether or not the patients in the dataset have diabetes or not?\n\n### Acknowledgements:\nThis dataset has been referred from Kaggle.\n\n### Objective:\n- Understand the Dataset & cleanup (if required).\n- Build classification models to predict whether or not the patients have diabetes.\n- Also fine-tune the hyperparameters & compare the evaluation metrics of various classification algorithms.","ba52c5ac":"## 2. Decisoin Tree Classfier:","8705f81d":"---","4e4e2f1e":"---","d63133d4":"# <center> 7. Project Outcomes & Conclusions","8d7f57fc":"## 5b. Automatic Method - RFE","6696c9b2":"---","863ce684":"# <center> 2. Exploratory Data Analysis (EDA)","be1e8b05":"**Inference:** The stats seem to be fine, let us gain more undestanding by visualising the dataset.","938fb8bc":"---","3de4d7b6":"## 4. Naive Bayes Classfier:","4438ed9d":"**Inference:** The data samples of most of the features do show some patterns. Also they seem\nto have lot of overlap for the outcome classes, making it difficult to be distingusihable. \nLet is proceed to perform cleanup on the data to remove the irregularities...","7dccddf6":"**Strategy:** \\\nWe can fix these multicollinearity with two techniques:\n1. Manual Method - Variance Inflation Factor (VIF)\n2. Automatic Method - Recursive Feature Elimination (RFE)\n3. Decomposition Method - Principle Component Analysis (PCA)","f1d7c769":"---","25afc27d":"---","3a51de00":"**Inference:** In VIF, RFE & PCA Techniques, we did notice any better scores upon dropping some multicollinear features. But in order to avoid the curse of dimensionality, we can capture top 90% of the data Variance explained by top n PCA components.","91b50f00":"## 5. Support Vector Machine Classfier:","037af637":"---","ee381ea2":"**Inference:** The data is somewhat normally distributed. And there are many outliers present in the dataset. We shall fix these outliers..","d45bdc64":"---","801e9d90":"### Here are some of the key outcomes of the project:\n- The Dataset was quiet small totalling around 768 samples & after preprocessing 10.5% of the datasamples were dropped. \n- The samples were slightly imbalanced after processing, hence SMOTE Technique was applied on the data to  balance the classes, adding 19.3% more samples to the dataset.\n- Visualising the distribution of data & their relationships, helped us to get some insights on the relationship between the feature-set.\n- Feature Selection\/Eliminination was carried out and appropriate features were shortlisted.\n- Testing multiple algorithms with fine-tuning hyperparamters gave us some understanding on the model performance for various algorithms on this specific dataset.\n- The SVM, Random Forest Classifier & XG-Boosting performed exceptionally well on the current dataset, considering Recall Score as the key-metric.\n- Yet it wise to also consider simpler model like Logistic Regression as it is more generalisable & is computationally less expensive, but comes at the cost of slight misclassifications.","7bf6d707":"---","e7563e58":"# <center> Stractegic Plan of Action:","2836517a":"# <center>\u2605 AI \/ ML Project - Pima Indian Diabetes Detection \u2605\n#### <center> ***Domain: Healthcare***","963ddc3e":"**Inference:** \\\nCorrelation plt between the variables convey lot of information about the realationship betweem them. There seems to be strong multicollinearity in the dataset.\n\nLet us check with different techniques if we can improve the model's performance by performing Feature Selection\/Extraction steps to take care of these multi-collinearity..."}}