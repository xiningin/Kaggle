{"cell_type":{"c86ed223":"code","c9f33d59":"code","df1b7761":"code","038578e7":"code","65f73736":"code","4f124a34":"code","dec8805e":"code","3ce7cbe5":"code","dc1a0957":"code","7e3186b9":"code","a7d9d56c":"code","5488bfb6":"code","8b9a2b19":"code","944b1aa2":"code","1188862f":"code","b586ae9e":"code","c7e09132":"code","b6959b46":"code","0d41a915":"code","acf906ec":"code","30548bc8":"code","ca44325e":"code","9d81033c":"code","b4e24584":"code","e106f573":"code","aa86b44d":"code","3f24ae56":"code","0adc1251":"code","50aa7ef2":"code","d97ad53a":"code","1cc31c25":"markdown","e3452885":"markdown","1fed48b1":"markdown","c93448de":"markdown","ece4e9c1":"markdown","f01119c5":"markdown","e0ea9d81":"markdown","af9fa3fe":"markdown","797a5515":"markdown","63647f54":"markdown","c85be249":"markdown","ebf7eaaa":"markdown","01333529":"markdown","40094632":"markdown","95205426":"markdown","de920905":"markdown","7ecf458e":"markdown","ae7ebc4d":"markdown","85c58409":"markdown","4f8c7a29":"markdown","e787a631":"markdown","5411d972":"markdown","0fd80701":"markdown","2e6adf0e":"markdown","41d1098c":"markdown","4d39068a":"markdown","f253d407":"markdown","51ca576c":"markdown","93a1a813":"markdown","48fa8cf9":"markdown"},"source":{"c86ed223":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns","c9f33d59":"df = pd.read_csv('..\/input\/911data\/911.csv')","df1b7761":"df.info()","038578e7":"df.head()","65f73736":"df['zip'].value_counts().head(5)","4f124a34":"df['twp'].value_counts().head(5)","dec8805e":"df['title'].nunique()","3ce7cbe5":"def rsn(x):\n    x = x.split(':')\n    return x[0]\ndf['Reason'] = df['title'].apply(rsn)\n\n#using a lambda function:\n# df['Reason'] = df['title'].apply(lambda title: title.split(':')[0])","dc1a0957":"df['Reason'].value_counts()","7e3186b9":"plt.figure(figsize=(10, 6))\nsns.set_theme()\nxx = sns.countplot(x = 'Reason', data = df, palette='viridis')","a7d9d56c":"type(df['timeStamp'].iloc[0])","5488bfb6":"df['timeStamp'] = pd.to_datetime(df['timeStamp'])\ntype(df['timeStamp'].iloc[0])","8b9a2b19":"time = df['timeStamp']\ndf['Hour'] = df['timeStamp'].apply(lambda x: x.hour)\ndf['Month'] = df['timeStamp'].apply(lambda x: x.month)\ndf['Day'] = df['timeStamp'].apply(lambda x: x.dayofweek)\ndf.head()","944b1aa2":"dmap = {0:'Mon',1:'Tue',2:'Wed',3:'Thu',4:'Fri',5:'Sat',6:'Sun'}\ndf['Day'] = df['Day'].map(dmap)","1188862f":"plt.figure(figsize=(10, 6))\nsns.countplot(x='Day',hue='Reason', data=df)\n#To relocate legend\nplt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)","b586ae9e":"plt.figure(figsize=(10, 6))\nsns.countplot(x='Month',hue='Reason', data=df)","c7e09132":"byMonth = df.groupby('Month').count()\nbyMonth.head()","b6959b46":"byMonth['Day'].plot()","0d41a915":"sns.lmplot(x = 'Month',y = 'e', data = byMonth.reset_index())","acf906ec":"df['Date'] = df['timeStamp'].apply(lambda x: x.date())\ndf.head()","30548bc8":"plt.figure(figsize=(8, 5))\nbyDate = df.groupby('Date').count()\nbyDate['e'].plot()\nplt.tight_layout()\n","ca44325e":"plt.figure(figsize=(8, 5))\ndf[df['Reason']=='Traffic'].groupby('Date').count()['e'].plot()\nplt.title('Traffic')\nplt.tight_layout()","9d81033c":"plt.figure(figsize=(8, 5))\ndf[df['Reason']=='Fire'].groupby('Date').count()['e'].plot()\nplt.title('Fire')\nplt.tight_layout()","b4e24584":"plt.figure(figsize=(8, 5))\ndf[df['Reason']=='EMS'].groupby('Date').count()['e'].plot()\nplt.title('EMS')\nplt.tight_layout()","e106f573":"dHour = df.groupby(by=['Day','Hour']).count()['e'].unstack()\ndHour.head()","aa86b44d":"plt.figure(figsize=(12,6))\nsns.heatmap(dHour,cmap='viridis')","3f24ae56":"sns.clustermap(dHour,cmap='viridis')","0adc1251":"dMonth = df.groupby(by=['Day','Month']).count()['e'].unstack()\ndMonth.head()","50aa7ef2":"plt.figure(figsize=(12,6))\nsns.heatmap(dMonth,cmap='viridis')","d97ad53a":"sns.clustermap(dMonth,cmap='viridis')","1cc31c25":"\n**Now let us begin to focus on time information. What is the data type of the objects in the timeStamp column?**","e3452885":"## Basic Questions","1fed48b1":"# Python Data Analytics Project\n\nAuthor: Rawaha Nakhuda\n\nDate: 05\/03\/2021\n\n---\n\n# 911 Calls Capstone Project\n\nThis capstone project was part of the [Python for Data Science and Machine Learning Bootcamp](https:\/\/www.udemy.com\/course\/python-for-data-science-and-machine-learning-bootcamp\/) by Jose Portilla on Udemy. \n\nThe project will aim to make use and showcase Data Analysis Skills using Python.\n\nFor this capstone project we will be analyzing some 911 call data from [Kaggle](https:\/\/www.kaggle.com\/mchirico\/montcoalert). The data contains the following fields:\n\n* lat : String variable, Latitude\n* lng: String variable, Longitude\n* desc: String variable, Description of the Emergency Call\n* zip: String variable, Zipcode\n* title: String variable, Title\n* timeStamp: String variable, YYYY-MM-DD HH:MM:SS\n* twp: String variable, Township\n* addr: String variable, Address\n* e: String variable, Dummy variable (always 1)","c93448de":"**Now create a HeatMap using this new DataFrame.**","ece4e9c1":"**Now do the same for Month:**","f01119c5":"**What is the most common Reason for a 911 call based off of this new column?**","e0ea9d81":"**Now see if you can use seaborn's lmplot() to create a linear fit on the number of calls per month. Keep in mind you may need to reset the index to a column.**","af9fa3fe":"**Now create a simple plot off of the dataframe indicating the count of calls per month.**","797a5515":"**Map the actual string names to the day of the week:**\n\n    dmap = {0:'Mon',1:'Tue',2:'Wed',3:'Thu',4:'Fri',5:'Sat',6:'Sun'}","63647f54":"--- ","c85be249":"## Creating new features","ebf7eaaa":"**Did you notice something strange about the Plot?**\n\nIt is missing months of 9, 10 and 11\n\n","01333529":"**Now create a clustermap using this DataFrame.**","40094632":"**What are the top 5 townships (twp) for 911 calls?**","95205426":"**Now use seaborn to create a countplot of the Day of Week column with the hue based off of the Reason column.**","de920905":"## Data and Setup","7ecf458e":"**You should have seen that these timestamps are still strings. Use [pd.to_datetime](http:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.to_datetime.html) to convert the column from strings to DateTime objects.**","ae7ebc4d":"**Now groupby this Date column with the count() aggregate and create a plot of counts of 911 calls.**","85c58409":"**Now repeat these same plots and operations, for a DataFrame that shows the Month as the column.**","4f8c7a29":"**Now create a gropuby object called byMonth, where you group the DataFrame by the month column and use the count() method for aggregation. Use the head() method on this returned DataFrame.**","e787a631":"**In the titles column there are \"Reasons\/Departments\" specified before the title code. These are EMS, Fire, and Traffic. Create a new column called \"Reason\" that contains this string value.** \n","5411d972":"**Now create a countplot of 911 calls by Reason.**","0fd80701":"**You can now grab specific attributes from a Datetime object by calling them. For example:**\n\n    time = df['timeStamp'].iloc[0]\n    time.hour\n\n**You can use Jupyter's tab method to explore the various attributes you can call. Now that the timestamp column are actually DateTime objects, create 3 new columns called Hour, Month, and Day of Week.**","2e6adf0e":"**How many unique title codes are there?**","41d1098c":"**You should have noticed it was missing some Months, let's see if we can maybe fill in this information by plotting the information in another way, possibly a simple line plot that fills in the missing months, in order to do this, we'll need to do some work with pandas...**","4d39068a":"**Explore and View Dataset**","f253d407":"**What are the top 5 zipcodes for 911 calls?**","51ca576c":"** Now recreate this plot but create 3 separate plots with each plot representing a Reason for the 911 call**","93a1a813":"____\n**Now let's move on to creating  heatmaps with seaborn and our data. We'll first need to restructure the dataframe so that the columns become the Hours and the Index becomes the Day of the Week. There are lots of ways to do this, but I would recommend trying to combine groupby with an [unstack](http:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.DataFrame.unstack.html) method.**","48fa8cf9":"**Create a new column called 'Date' that contains the date from the timeStamp column.** "}}