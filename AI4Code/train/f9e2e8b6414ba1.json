{"cell_type":{"aecd9f74":"code","008252f5":"code","dff003da":"code","8af29c0c":"code","d320f659":"code","32704a60":"code","6e9015de":"code","02223283":"code","c546d38e":"code","96b04302":"code","76efc240":"code","d5c621a5":"code","c445b3fd":"code","ed5806c4":"code","59c601c5":"code","9d250eb3":"code","a61e173f":"code","7b8b43a5":"code","abe1261a":"code","681c55d8":"code","37add206":"code","3b2aa4a3":"code","79ee4fee":"code","d620a94d":"code","58ccacd7":"code","c9f247ed":"code","d772666b":"code","5fdbde32":"code","a9cc2747":"code","4d3b8a54":"code","7b9f035c":"code","1505e970":"code","8a27ad87":"code","e63220ea":"code","edc790bd":"code","f27893d5":"code","7cea78a8":"code","3ed5d46a":"code","974c9484":"code","25f4b9d3":"code","ea367607":"code","4729608a":"code","849e308c":"code","c5a940ac":"code","6f060a99":"code","93be165c":"code","9d9d0128":"code","e5e003ed":"markdown","9cfa51cf":"markdown","4187f18d":"markdown","c8f5f920":"markdown","d1f4b414":"markdown","b9f44f4d":"markdown","0791d6c9":"markdown","1e57f4de":"markdown","5c7d93af":"markdown","acafedfa":"markdown","2ee262f6":"markdown","64fccfd4":"markdown","76c801be":"markdown","2afa05dd":"markdown","1cf0ebf9":"markdown"},"source":{"aecd9f74":"import pandas as pd\npd.set_option(\"display.max_rows\", 100)\npd.set_option(\"display.max_columns\", 100)\n\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\n# %matplotlib inline\n\nimport seaborn as sns\nsns.set_style('darkgrid')\n\nimport warnings\nwarnings.filterwarnings('ignore')","008252f5":"# opening dataset\nairbnb = pd.read_csv('..\/input\/new-york-city-airbnb-open-data\/AB_NYC_2019.csv', sep=',', decimal='.')","dff003da":"airbnb.head(3)","8af29c0c":"airbnb.info()","d320f659":"# amount of null values per column\nairbnb.isnull().sum()","32704a60":"# finding duplicated values\nairbnb.duplicated().sum()","6e9015de":"# listing name column\nairbnb['name_length'] = airbnb['name'].map(str).apply(len)\nairbnb.head()","02223283":"# removing sensitive (eg. name, document) or non relevant data\nairbnb.drop(['id','name','host_name','last_review'], axis=1, inplace=True)\nprint(airbnb.columns)","c546d38e":"# replacing null valeus of \"reviews_per_month\" by zero\nairbnb['reviews_per_month'].fillna(0, inplace=True)\n\n# checking\nairbnb.isnull().sum()","96b04302":"# max listing by the same host\nairbnb['calculated_host_listings_count'].max()","76efc240":"print('number of unique host: ', len(airbnb['host_id'].unique()))\nairbnb['host_id'].value_counts()","d5c621a5":"# number of neighbourhood groups in ascending order of quantity\nairbnb['neighbourhood_group'].value_counts()","c445b3fd":"# number of different neighbourhood\nlen(airbnb['neighbourhood'].unique())","ed5806c4":"# number of room types in ascending order of quantity\nairbnb['room_type'].value_counts()","59c601c5":"airbnb[['price', 'minimum_nights', 'number_of_reviews', 'reviews_per_month', \n        'calculated_host_listings_count', 'availability_365', 'name_length']].describe()","9d250eb3":"# Price by room type\nfig, [ax1, ax2] = plt.subplots(1,2, figsize=(12,6))\n\nsns.boxplot(data=airbnb, x='room_type', y='price', palette='viridis', ax=ax1).set_title('ALL DATA')\nsns.boxplot(data=airbnb.loc[airbnb['price'] < 600], x='room_type', y='price', palette='viridis', ax=ax2).set_title(\n    'PRICES < $600');\n\n#TODO: clean outliers - remove or replace?","a61e173f":"# Price distribution\nfig, [ax1, ax2] = plt.subplots(1,2, figsize=(12,4))\n\nsns.histplot(airbnb, x='price', hue='room_type', ax=ax1).set_title('ALL DATA')\nsns.histplot(airbnb.loc[airbnb['price'] < 600], x='price', hue='room_type', ax=ax2).set_title('PRICES < $600');","7b8b43a5":"# Price x Neighbourhood Group\ng = sns.FacetGrid(airbnb.loc[airbnb['price'] < 600], col='neighbourhood_group', col_wrap=3, height=3, aspect=1.5)\ng.map_dataframe(sns.histplot, x='price', hue='room_type');","abe1261a":"# Minimum nights by room type\nfig, [ax1, ax2, ax3] = plt.subplots(1,3, figsize=(15,5))\nax3.set_yscale(\"log\")\n\nsns.boxplot(data=airbnb, x='room_type', y='minimum_nights',\n            palette='viridis', ax=ax1).set_title('ALL DATA')\nsns.boxplot(data=airbnb.loc[airbnb['minimum_nights'] < 60], x='room_type', y='minimum_nights',\n            palette='viridis', ax=ax2).set_title('MINIMUM NIGHTS < 60')\nsns.boxplot(data=airbnb.loc[airbnb['minimum_nights'] < 60], x='room_type', y='minimum_nights',\n            palette='viridis', ax=ax3).set_title('MINIMUM NIGHTS < 60 - log');\n\n#TODO: clean outliers - remove or replace?","681c55d8":"from sklearn.ensemble import IsolationForest","37add206":"# isolate price column\nairbnb[['price']].head()","3b2aa4a3":"# Model settings:\n# n_estimators: number of base estimators in the ensemble - number of trees built in the forest \n# max_samples: all values will be used for all trees (no sampling)\n# contamination: the proportion of outliers in the data set, defines the threshold on the anomaly_scores\n# in our dataset: ~2% values too hight or too low\nmodel = IsolationForest(n_estimators=100, max_samples=50000, contamination=0.02)\nmodel.fit(airbnb[['price']])","79ee4fee":"# output of anomaly detection:\n# price_scores - anomaly score each value.\nairbnb['price_scores'] = model.decision_function(airbnb[['price']])\n\n# price_anomaly - pediction of each value, if it is an outlier or not. +1: not outlier; -1: outlier\nairbnb['price_anomaly'] = model.predict(airbnb[['price']])","d620a94d":"# checking high values\nairbnb.loc[airbnb['price'] > 9000]","58ccacd7":"# checking low values\nairbnb.loc[airbnb['price'] < 10]","c9f247ed":"# amount of price outliers\ncomplete = len(airbnb)\nanomaly_p = len(airbnb.loc[airbnb['price_anomaly'] == -1])\nprint('anomaly detection of price values: ', round((anomaly_p\/complete)*100,4), '%')","d772666b":"# In this case, it was chosen to remove the outlier values, with the possibility of also removing false positives\n# identified by the Isolation Forest. There could be other ways of working with this data.\nairbnb_clean = airbnb.loc[airbnb['price_anomaly'] == 1]\n\n# removing new columns (anomaly detection)\nairbnb_clean.drop(['price_scores','price_anomaly'], axis=1, inplace=True)\nairbnb_clean.info()","5fdbde32":"# amount of minimum_nights outliers - values > 60 days\ncomplete = len(airbnb_clean)\nanomaly_n = len(airbnb_clean.loc[(airbnb_clean['minimum_nights'] > 60)])\nprint('anomaly detection of minimum nights values: ', round((anomaly_n\/complete)*100,4), '%')","a9cc2747":"# In this case, it was chosen to remove the outlier values. There could be other ways of working with this data.\nairbnb_clean = airbnb_clean.loc[airbnb_clean['minimum_nights'] <= 60]\nairbnb_clean.info()","4d3b8a54":"# amount of availability_365 outliers - values = 0 days\ncomplete = len(airbnb_clean)\nanomaly_a = len(airbnb_clean.loc[(airbnb['availability_365'] == 0)])\nprint(anomaly_a)\nprint('anomaly detection of minimum nights values: ', round((anomaly_a\/complete)*100,4), '%')","7b9f035c":"# New distribution after Data Cleaning\nfig, [ax1, ax2] = plt.subplots(1,2, figsize=(15,4))\n\nsns.histplot(airbnb_clean, x='price', hue='room_type', hue_order=['Shared room', 'Entire home\/apt', 'Private room'],\n             ax=ax1).set_title('PRICE')\nsns.histplot(airbnb_clean, x='minimum_nights', hue='room_type', hue_order=['Shared room', 'Entire home\/apt', 'Private room'],\n             ax=ax2).set_title('MINIMUM NIGHTS');","1505e970":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn import metrics","8a27ad87":"airbnb_clean.columns","e63220ea":"# Plotting correlation matrix - numeric values\ndata = airbnb_clean[['price', 'minimum_nights', 'number_of_reviews', 'reviews_per_month', 'calculated_host_listings_count',\n                     'availability_365', 'name_length']]\n\ncorr = data.corr(method='pearson')\nplt.figure(figsize=(12,8))\nsns.heatmap(corr, annot=True, cmap=\"YlGnBu\")","edc790bd":"airbnb_new = airbnb_clean[[ 'neighbourhood_group', 'room_type', 'price', 'minimum_nights',\n       'number_of_reviews', 'reviews_per_month', 'calculated_host_listings_count', 'availability_365', 'name_length']]\nairbnb_new.head()","f27893d5":"data = airbnb_new.loc[airbnb_new['neighbourhood_group'] == 'Manhattan']\nsns.pairplot(data, hue='room_type')","7cea78a8":"# Dataset for prediction\n\nairbnb_pred = airbnb_clean[['neighbourhood_group', 'room_type', 'price', 'minimum_nights', 'reviews_per_month',\n                      'availability_365', 'calculated_host_listings_count', 'name_length']]\n\nairbnb_pred.dtypes","3ed5d46a":"# Creating dummies for cathegorical data: neighbouthood_group and room_type\nairbnb_pred2 = pd.get_dummies(airbnb_pred, columns=['neighbourhood_group','room_type'], prefix = ['ngh','rty'], drop_first=False)\nairbnb_pred2.head()","974c9484":"airbnb_pred2.shape","25f4b9d3":"# Independent variables - neighbourhood_group', 'room_type', 'minimum_nights', 'reviews_per_month',\n## 'calculated_host_listings_count', 'availability_365'\n\nX = airbnb_pred2.drop(['price'], axis=1)\n\n# Dependent variable - 'price'\n\nY = airbnb_pred2['price']","ea367607":"X.head()","4729608a":"Y.head()","849e308c":"#Split dataset into Train (80% - 38.100) and Test (20% - 9.525)\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.20, random_state=42)","c5a940ac":"print('X_train: ', X_train.shape)\nprint('Y_train: ', Y_train.shape)\nprint('------------------------------')\nprint('X_test: ', X_test.shape)\nprint('Y_test: ', Y_test.shape)","6f060a99":"## Linear Regression\nreg = LinearRegression().fit(X_train, Y_train)\n\n# Predicting \nY_pred = reg.predict(X_test)\n\n# R squared value\nprint('R squared value: ', reg.score(X_train, Y_train))\n\n# Calculate RMSE\nrmse = np.sqrt(metrics.mean_squared_error(Y_test, Y_pred))\nprint('RMSE: ', rmse)","93be165c":"## Decision Tree Regression\ndt = DecisionTreeRegressor(min_samples_leaf=.0002)\n\ndt.fit(X_train, Y_train)\n\nY_pred = dt.predict(X_test)\n\n# R squared value\nprint('R squared value: ', dt.score(X_train, Y_train))\n\n# Calculate RMSE\nrmse = np.sqrt(metrics.mean_squared_error(Y_test, Y_pred))\nprint('RMSE: ', rmse)","9d9d0128":"# prediction examples:\n\nfor i in range(20,24):\n    print('real: ', Y_test.iloc[i])\n    print('prediction: ', Y_pred[i].round(2))","e5e003ed":"___\n## availability_365","9cfa51cf":"___\n# Data Cleaning\nThere are many ways to remove outliers and here we will choose these approach to enhance the dataset quality\n\n### price\n- Isolation Forest - from scikit-learn - to identify outliers\n\n### minimum nights\n- remove values > 60 days\n\n### availability_365\n- remove values == 0 days\n\n#### * First: identify the amount of data to be removed, whether or not they are representative of the data set\n___","4187f18d":"#### Why so many data with 0 days available?\n- hypothesis: Those places were already rented on the date the dataset was generated? Users have suspended the ad on the platform?\n- Because the amount of data is representative in this case, and may not represent an outlier, we will not remove them","c8f5f920":"# Numerical data","d1f4b414":"## - Neighbourhood info","b9f44f4d":"### Isolation Forest\nhttps:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.ensemble.IsolationForest.html\n\nUnsupervised learning algorithm, based on the Decision Tree algorithm, that identifies anomaly by isolating outliers in the data.\n\nReturn the anomaly score of each sample using the IsolationForest algorithm\n\nThe IsolationForest \u2018isolates\u2019 observations by randomly selecting a feature and then randomly selecting a split value between the maximum and minimum values of the selected feature.","0791d6c9":"### Analysis\n\nColumns reviews_of_views and reviews_per_months have the highest correlation, since in this case they correspond to the same information. \n\nIn order to avoid collinearity, in this model we will use only the review_per_month values.","1e57f4de":"___\n## minimum_nights","5c7d93af":"# Prediction","acafedfa":"# Categorical data\n## - Host info","2ee262f6":"# Data\n\nThis dataset describes the listing activity and metrics in NYC, NY for 2019.\n\nhttps:\/\/www.kaggle.com\/dgomonov\/new-york-city-airbnb-open-data\n\n## Problem\n\nWhat can we learn from PRICES predictions?\n\n\n## Using CRISP-DM methodology\n- Business Understanding\n- Data Understanding\n- Data Preparation\n- Modeling\n- Evaluation\n- Deployment\n___","64fccfd4":"## Price","76c801be":"### Searching for wrong data:\n- max price of 10000 dolars one night?\n- min price of 0 dolars?\n- max nights of 1.250 days?\n- min zero days available in the year?\n\n**Later we will need to work in these problems**","2afa05dd":"# Examining of data structure and features","1cf0ebf9":"## - Room type info"}}