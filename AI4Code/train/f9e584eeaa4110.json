{"cell_type":{"22bd6c47":"code","ff2fbb58":"code","4c51822b":"code","397ecff3":"code","cd439b15":"code","5ba476bf":"code","a88d0b60":"code","315f39ec":"code","1cf763fc":"code","5ece57b2":"code","08a95d89":"code","df5e76df":"code","d1c1a3c8":"code","3cc3d0f6":"code","8494eccb":"code","107fd90c":"markdown","1511a8b6":"markdown","2d48398a":"markdown","7cc37250":"markdown","2bcc21e3":"markdown","b9111609":"markdown","e055e348":"markdown","f6825e82":"markdown","79159cd6":"markdown","9ba1eae1":"markdown","716a7838":"markdown","f5852fc2":"markdown","6d376d2b":"markdown","da30180b":"markdown"},"source":{"22bd6c47":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ff2fbb58":"import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import mean_absolute_error \nfrom sklearn.metrics import mean_squared_error \nfrom sklearn.metrics import median_absolute_error","4c51822b":"traindata=pd.read_csv('..\/input\/titanic\/train.csv')\ntestdata=pd.read_csv('..\/input\/titanic\/test.csv')\n                      ","397ecff3":"traindata.head()\n","cd439b15":"traindata.info()","5ba476bf":"traindata=traindata.drop(['PassengerId','Name','Ticket','Fare','Cabin'],axis=1)","a88d0b60":"traindata.isnull().sum()","315f39ec":"traindata['Age']=traindata['Age'].fillna(0)","1cf763fc":"lblenc=LabelEncoder()\nlblenc.fit(traindata['Sex'])\ntraindata['Sex']=lblenc.transform(traindata['Sex'])\n\ntraindata['Embarked']=traindata['Embarked'].fillna('0')\nlblenc=LabelEncoder()\nlblenc.fit(traindata['Embarked'])\ntraindata['Embarked']=lblenc.transform(traindata['Embarked'])","5ece57b2":"traindata.head()\ntraindata.info()\ntraindata.isnull().sum()","08a95d89":"sns.heatmap(traindata.corr(),annot=True) ","df5e76df":"X=traindata.iloc[:,1:6]\ny=traindata.iloc[:,0]\nx_train,x_test,y_train,y_test=train_test_split(X,y,test_size=0.30,random_state=44, shuffle =True)","d1c1a3c8":"#LogisticRegression\nlrModule=LogisticRegression()\nlrModule.fit(x_train,y_train)\nscoretrain=lrModule.score(x_train,y_train)\nlrModule.fit(x_test,y_test)\nscoretest=lrModule.score(x_test,y_test)\nprint('train Score from LogisticRegression\\n',scoretrain)\nprint('test Score from LogisticRegression\\n',scoretest)\n\n#SVC\nsvcModule=SVC(kernel= 'rbf', max_iter=100,C=0.05,gamma='auto')\nsvcModule.fit(x_train,y_train)\nscoretrain=svcModule.score(x_train,y_train)\nsvcModule.fit(x_test,y_test)\nscoretest=svcModule.score(x_test,y_test)\nprint('train Score from SVC\\n',scoretrain)\nprint('test Score from SVC\\n',scoretest)\n\n#MLPClassifier\nmlpClassModule=MLPClassifier()\nmlpClassModule.fit(x_train,y_train)\nscoretrain=mlpClassModule.score(x_train,y_train)\nmlpClassModule.fit(x_test,y_test)\nscoretest=mlpClassModule.score(x_test,y_test)\nprint('train Score from MLPClassifier\\n',scoretrain)\nprint('test Score from MLPClassifier\\n',scoretest)\n\n#SGDClassifier\nsdgModule=SGDClassifier(penalty='l1',loss='squared_loss',learning_rate='optimal',random_state=50)\nsdgModule.fit(x_train,y_train)\nscoretrain=sdgModule.score(x_train,y_train)\nsdgModule.fit(x_test,y_test)\nscoretest=sdgModule.score(x_test,y_test)\nprint('train Score from SGDClassifier\\n',scoretrain)\nprint('test Score from SGDClassifier\\n',scoretest)\n\n#GradientBoostingClassifier\ngbcModule=GradientBoostingClassifier()\ngbcModule.fit(x_train,y_train)\nscoretrain=gbcModule.score(x_train,y_train)\ngbcModule.fit(x_test,y_test)\nscoretest=gbcModule.score(x_test,y_test)\nprint('train Score from GradientBoostingClassifier\\n',scoretrain)\nprint('test Score from GradientBoostingClassifier\\n',scoretest)\n\n#RandomForestClassifier\nrfcModule=RandomForestClassifier()\nrfcModule.fit(x_train,y_train)\nscoretrain=rfcModule.score(x_train,y_train)\nrfcModule.fit(x_test,y_test)\nscoretest=rfcModule.score(x_test,y_test)\ny_pred=rfcModule.predict(x_test)\nprint('train Score from RandomForestClassifier\\n',scoretrain)\nprint('test Score from RandomForestClassifier\\n',scoretest)","3cc3d0f6":"###Evaluations\nCM = confusion_matrix(y_test, y_pred)\nprint('Confusion Matrix is : \\n', CM)\n# drawing confusion matrix\nsns.heatmap(CM, center = True)\nplt.show()\n\n#Calculating Mean Absolute Error\nMAEValue = mean_absolute_error(y_test, y_pred, multioutput='uniform_average') # it can be raw_values\nprint('Mean Absolute Error Value is : ', MAEValue)\n#----------------------------------------------------\n#Calculating Mean Squared Error\nMSEValue = mean_squared_error(y_test, y_pred, multioutput='uniform_average') # it can be raw_values\nprint('Mean Squared Error Value is : ', MSEValue)\n#----------------------------------------------------\n#Calculating Median Squared Error\nMdSEValue = median_absolute_error(y_test, y_pred)\nprint('Median Squared Error Value is : ', MdSEValue )\n","8494eccb":"passid=testdata['PassengerId']\ntestdata=testdata.drop(['PassengerId','Name','Ticket','Fare','Cabin'],axis=1)\n\nlblenc=LabelEncoder()\nlblenc.fit(testdata['Sex'])\ntestdata['Sex']=lblenc.transform(testdata['Sex'])\n\ntestdata['Embarked']=testdata['Embarked'].fillna('0')\nlblenc=LabelEncoder()\nlblenc.fit(testdata['Embarked'])\ntestdata['Embarked']=lblenc.transform(testdata['Embarked'])\n\ntestdata.head()\ntestdata.info()\ntestdata.isnull().sum()\ntestdata['Age']=testdata['Age'].fillna(0)\nX=testdata.iloc[:,1:6]\n# Use RandomForestClassifier to get predictions\ny_pred=rfcModule.predict(X)\nmy_submission = pd.DataFrame({'PassengerId': passid, 'Survived': y_pred})\nmy_submission.to_csv('submission.csv', index=False)","107fd90c":"**Evaluate the algorith**","1511a8b6":"**Get data info after change categorical**","2d48398a":"**Specify null Data**","7cc37250":"**Drop Unused Columns**","2bcc21e3":"**Use many algorithm to get best score**","b9111609":"**Get data informations**","e055e348":"**user LabelEncoder to change categorical features for columns Sex and Embarked**","f6825e82":"**Draw Heat map \"Each cell is color-coded according to its corresponding value\"**","79159cd6":"1. **the best score when use RandomForestClassifierr**","9ba1eae1":"**Import train & Test Data**","716a7838":"**Working on test data to get sample **","f5852fc2":"replace empty value for column age\n","6d376d2b":"**Split train data to train & test**","da30180b":"Import my used Library"}}