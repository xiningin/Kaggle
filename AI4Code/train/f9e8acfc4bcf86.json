{"cell_type":{"cdc04f24":"code","83376a1b":"code","4d971ba4":"code","fc74cb90":"code","c1c520e6":"code","4f5ecb6c":"code","9c383ae1":"code","4e6ef23b":"code","9a6c2d5a":"code","50d82616":"code","e06524f9":"code","0104bb06":"code","77c6b969":"code","c2fc9192":"code","6280404f":"code","f1638b29":"code","9d27f1ba":"code","f4b74351":"code","8b73484f":"code","60a78f27":"code","eee5f948":"code","ff771601":"code","1ba612b0":"code","195f7f3f":"code","6bd9b897":"code","8caa2e8d":"code","9bf5e096":"code","262ed339":"code","951b7365":"code","a21d8707":"code","ef07e62d":"code","a9b5e4c8":"code","5c5bc01a":"code","8d806675":"code","b1209295":"code","d9c9c662":"code","e1761a1f":"code","df4e8186":"code","dc4babdd":"code","595e3c49":"code","30dbf6c4":"code","9fe4103f":"code","c18022b7":"code","640fbb3a":"code","2137b69c":"code","4b5e653c":"code","42bc8792":"code","b3569145":"code","122de473":"code","8f6eebc0":"code","f01b910b":"code","59745e11":"code","e2e85ee6":"code","d80be5c8":"code","cbc8154b":"code","1ad9fd7f":"code","e90755e1":"code","afd14035":"code","410c18e3":"code","d31a219f":"code","48d4c736":"code","f9a2397a":"markdown","86a61e68":"markdown","a7befa23":"markdown","808909c8":"markdown","85ee4ba4":"markdown","8eaa89d5":"markdown","e19a0f89":"markdown","caff2c63":"markdown","46b3894e":"markdown","d9d2c76e":"markdown","66c30122":"markdown","fb21dcaa":"markdown","4972a0d5":"markdown","6819e488":"markdown","98471bd3":"markdown","7352ce0d":"markdown"},"source":{"cdc04f24":"from pandas import Series\nimport pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.feature_selection import f_classif, mutual_info_classif\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder, StandardScaler\nfrom sklearn.preprocessing import OrdinalEncoder, PolynomialFeatures\nfrom sklearn.preprocessing import MinMaxScaler\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import StratifiedShuffleSplit, StratifiedKFold\nfrom sklearn.model_selection import GridSearchCV, KFold\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.linear_model import LogisticRegressionCV\n\nfrom sklearn.metrics import auc, roc_auc_score, roc_curve, confusion_matrix\nfrom sklearn.metrics import f1_score, recall_score, accuracy_score, precision_score\nfrom sklearn.metrics import plot_confusion_matrix, cohen_kappa_score\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","83376a1b":"# \u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0435\u043c RANDOM_SEED, \u0447\u0442\u043e\u0431\u044b \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b!\nRANDOM_SEED = 42\n# \u0437\u0430\u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0435\u043c \u0432\u0435\u0440\u0441\u0438\u044e \u043f\u0430\u043a\u0435\u0442\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b:\n!pip freeze > requirements.txt\npd.set_option('display.max_columns', None)","4d971ba4":"DATA_DIR = '\/kaggle\/input\/sf-scoring\/'\ntrain = pd.read_csv(DATA_DIR +'\/train.csv')\ntest = pd.read_csv(DATA_DIR +'\/test.csv')\nsample_submission = pd.read_csv(DATA_DIR+'\/sample_submission.csv')","fc74cb90":"sample_submission.shape","c1c520e6":"test.shape","4f5ecb6c":"train.info()","9c383ae1":"train.head(5)","4e6ef23b":"test.info()","9a6c2d5a":"sample_submission.head(5)","50d82616":"sample_submission.info()","e06524f9":"client_id - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\napp_date - \u0434\u0430\u0442\u0430 \u043f\u043e\u0434\u0430\u0447\u0438 \u0437\u0430\u044f\u0432\u043a\u0438\neducation - \u0443\u0440\u043e\u0432\u0435\u043d\u044c \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f cat_cols\nsex - \u043f\u043e\u043b \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430 bin\nage - \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430 num_cols\ncar - \u0444\u043b\u0430\u0433 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f bin\ncar_type - \u0444\u043b\u0430\u0433 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f \u0438\u043d\u043e\u043c\u0430\u0440\u043a\u0438 bin\ndecline_app_cnt - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0448\u043b\u044b\u0445 \u0437\u0430\u044f\u0432\u043e\u043a cat_cols\ngood_work - \u0444\u043b\u0430\u0433 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u201c\u0445\u043e\u0440\u043e\u0448\u0435\u0439\u201d \u0440\u0430\u0431\u043e\u0442\u044b bin\nscore_bki - \u0441\u043a\u043e\u0440\u0438\u043d\u0433\u043e\u0432\u044b\u0439 \u0431\u0430\u043b\u043b \u043f\u043e \u0434\u0430\u043d\u043d\u044b\u043c \u0438\u0437 \u0411\u041a\u0418 num_cols\nbki_request_cnt - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u0411\u041a\u0418 num_cols\nregion_rating - \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0440\u0435\u0433\u0438\u043e\u043d\u0430 cat_cols\nhome_address - \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0437\u0430\u0442\u043e\u0440 \u0434\u043e\u043c\u0430\u0448\u043d\u0435\u0433\u043e \u0430\u0434\u0440\u0435\u0441\u0430 cat_cols\nwork_address - \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0437\u0430\u0442\u043e\u0440 \u0440\u0430\u0431\u043e\u0447\u0435\u0433\u043e \u0430\u0434\u0440\u0435\u0441\u0430 cat_cols\nincome - \u0434\u043e\u0445\u043e\u0434 \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430 num_cols\nsna - \u0441\u0432\u044f\u0437\u044c \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430 \u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c\u0438 \u0431\u0430\u043d\u043a\u0430 cat_cols\nfirst_time - \u0434\u0430\u0432\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0435 cat_cols\nforeign_passport - \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0437\u0430\u0433\u0440\u0430\u043d\u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430 bin\ndefault - \u0444\u043b\u0430\u0433 \u0434\u0435\u0444\u043e\u043b\u0442\u0430 \u043f\u043e \u043a\u0440\u0435\u0434\u0438\u0442\u0443","0104bb06":"test['default'] = 0 # \u0442.\u043a. \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 \u043d\u0435\u0442 \u0446\u0435\u043b\u0435\u0432\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430, \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u0435\u0433\u043e \u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043d\u0443\u043b\u044f\u043c\u0438\ntrain['Train'] = True # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0440\u0435\u0439\u043d\ntest['Train'] = False # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0435\u0441\u0442\n\ndata = pd.concat([train, test], ignore_index=True) # \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c","77c6b969":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438\ndata.isnull().sum()","c2fc9192":"#\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0441\u0442\u044c \u0446\u0435\u043b\u0435\u0432\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\ndata['default'].value_counts(ascending=True).plot(kind='barh')","6280404f":"#\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 education\ndata.education.hist()","f1638b29":"data.education.value_counts()","9d27f1ba":"# \u0417\u0430\u043f\u043e\u043b\u043d\u0438\u043c education \u0441\u0430\u043c\u044b\u043c \u0440\u0430\u0441\u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0435\u043d\u043d\u044b\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c.\ndata.fillna(data.education.value_counts().index[0], inplace=True)","f4b74351":"data.nunique(dropna=False)","8b73484f":"#\u0440\u0430\u0437\u0434\u0435\u043b\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0435, \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0438 \u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0435\nnum_cols = ['age', 'score_bki', 'decline_app_cnt', 'bki_request_cnt', 'income']\ncat_cols = ['education', 'first_time', 'sna', 'work_address', 'home_address', 'region_rating']\nbin_cols = ['sex', 'car', 'car_type', 'good_work', 'foreign_passport']","60a78f27":"# \u0414\u043b\u044f \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043c\u044b \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c LabelEncoder\nlabel_encoder = LabelEncoder()\nfor column in bin_cols:\n    data[column] = label_encoder.fit_transform(data[column])\n    \n# \u0443\u0431\u0435\u0434\u0438\u043c\u0441\u044f \u0432 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0438    \ndata[bin_cols].head()","eee5f948":"# \u0441\u043f\u0438\u0441\u043e\u043a \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043f\u043e \u0432\u043e\u0437\u0440\u043e\u0441\u0442\u0430\u043d\u0438\u044e\ngrade = ['SCH', 'UGR', 'GRD', 'PGR', 'ACD'] \n# \u0442\u0440\u0430\u043d\u0441\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f\ndata['education'] = OrdinalEncoder(categories=[grade]).fit_transform(data[['education']]).astype(int)\n\n# \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043f\u043e \u0432\u043e\u0437\u0440\u043e\u0441\u0442\u0430\u043d\u0438\u044e   \nrating = sorted(data.region_rating.unique().tolist()) \n# \u0442\u0440\u0430\u043d\u0441\u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c\ndata[\"region_rating\"] = OrdinalEncoder(categories=[rating]).fit_transform(data[[\"region_rating\"]]).astype(int)","ff771601":"# \u0443\u0431\u0435\u0434\u0438\u043c\u0441\u044f \u0432 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0438    \ndisplay(data['education'].value_counts())\ndata[\"region_rating\"].value_counts()","1ba612b0":"data.head()","195f7f3f":"# \u0442\u0435\u043f\u0435\u0440\u044c \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u0438 \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0446\u0435\u043b\u0435\u0432\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\n# \u0433\u0440\u0430\u0444\u0438\u043a\u0438 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0442 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u0439 \u0433\u0440\u0443\u043f\u043f\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432: \"\u0445\u043e\u0440\u043e\u0448\u0438\u0445\" \u0438 \"\u043f\u043b\u043e\u0445\u0438\u0445\"\ndf = data[data['Train']]\nfor col in bin_cols + cat_cols:\n    plt.figure(figsize=(8, 4))\n    prop_df = df[col].groupby(df[\"default\"]).value_counts(\n        normalize=True).rename(\"percent\").reset_index()\n    prop_df[\"percent\"] *= 100\n    sns.barplot(x=col, y=\"percent\", hue=\"default\", data=prop_df)\n    plt.title(f\"\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 {col}\")","6bd9b897":"#\u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f \u0433\u0440\u0430\u0444\u0438\u043a\u043e\u0432\n\ndef get_boxplot(column):\n    fig, ax = plt.subplots(figsize=(14, 4))\n    sns.boxplot(x=column,\n                data=df,\n                ax=ax)\n    plt.xticks(rotation=0)\n    ax.set_title('Boxplot for ' + column)\n    plt.show()","8caa2e8d":"#\u043f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u0433\u0440\u0430\u0444\u0438\u043a\u0438 \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0432 \u043a\u0430\u043a\u0438\u0445 \u0441\u0442\u043e\u043b\u0431\u0446\u0430\u0445 \u0443 \u043d\u0430\u0441 \u0435\u0441\u0442\u044c \u0432\u044b\u0431\u0440\u043e\u0441\u044b.\nfor col in num_cols:\n    get_boxplot(col)","9bf5e096":"for i in num_cols:\n    plt.figure()\n    sns.distplot(df[i], kde = False, rug=False)\n    plt.title(i)\n    plt.show()","262ed339":"log_list = ['age', 'decline_app_cnt', 'bki_request_cnt', 'income']\nfor col in log_list:\n  data[col] = np.log(data[col] + 1)","951b7365":"for i in num_cols:\n    plt.figure()\n    sns.distplot(data[i], kde = False, rug=False)\n    plt.title(i)\n    plt.show()","a21d8707":"# \u0434\u0430\u0442\u0430 - \u0441\u0440\u0430\u0437\u0443 \u0441\u043a\u043e\u043d\u0432\u0435\u0442\u0438\u0440\u0443\u0435\u043c \u0444\u043e\u0440\u043c\u0430\u0442 \u0434\u0430\u0442\u044b \u043a \u0443\u0434\u043e\u0431\u043d\u043e\u043c\u0443 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b\ndata.app_date = pd.to_datetime(data.app_date)\n# \u0412\u044b\u0432\u0435\u0434\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u043d\u0435\u0439 \u0438 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043c \u043a \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u043c\u0443 \u043f\u0440\u0438\u0437\u0430\u043d\u043a\u0443\ndata['app_date'] = (data.app_date - data.app_date.min()).dt.days.astype(int)\nnum_cols.append('app_date')","ef07e62d":"num_cols","a9b5e4c8":"# \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043c\u0435\u0436\u0434\u0443 \u0441\u043e\u0431\u043e\u0439\nplt.figure(figsize=(12, 10))\nsns.heatmap(data[cat_cols+bin_cols+num_cols].corr().abs(), vmin=0,\n            vmax=1, annot=True, fmt=\".2f\", cmap=\"YlGnBu\")","5c5bc01a":"# \u043e\u0431\u044a\u0435\u0434\u0435\u043d\u0438\u043c \u0430\u0434\u0440\u0435\u0441\u0430, \u0442.\u043a. \u043e\u043d\u0438 \u0441\u0438\u043b\u044c\u043d\u043e \u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u0443\u044e\u0442\ndata['address'] = (data.work_address*data.home_address)**2\ncat_cols.append('address')\ncat_cols.remove('home_address')\ncat_cols.remove('work_address')\ndata.drop(['home_address', 'work_address'], axis=1, inplace=True)\n\n# \u043e\u0431\u044a\u0435\u0434\u0435\u043d\u0438\u043c car \u0438 car_type \u0438 \u043f\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043c \u0432 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\ndata['car_all'] = data['car'] + data['car_type']\ndata.drop(['car', 'car_type'], axis=1, inplace=True)\ncat_cols.append('car_all')\nbin_cols.remove('car')\nbin_cols.remove('car_type')","8d806675":"data.head()","b1209295":"data['new_f1'] = (data.score_bki * data.region_rating) \/ data.age\ndata['new_f2'] = (data.age \/ data.first_time) * data.score_bki\ndata['new_f3'] = (data.score_bki * data.sna)\ndata['new_f4'] = ((data.income**2) * data.first_time) \/ data.age\ndata['income\u02c62'] = data['income']**2\ndata['income\u02c6log'] = np.log(data['income'] + 1)\ndata['income\u02c6sqrt'] = np.sqrt(data['income'])\ndata['decline_app_cnt\u02c62'] = data['decline_app_cnt']**2\ndata['decline_app_cnt\u02c64'] = data['decline_app_cnt']**4\ndata['decline_app_cnt\u02c6log'] = np.log(data['decline_app_cnt'] + 1)\ndata['decline_app_cnt\u02c6log'] = np.sqrt(data['decline_app_cnt'])\ndata['bki_request_cnt\u02c62'] = data['bki_request_cnt']**2\ndata['bki_request_cnt\u02c6log'] = np.log(data['bki_request_cnt'] + 1)\n\ndata['region_rating\u02c62'] = data['region_rating']**2\ndata['region_rating\u02c6log'] = np.log(data['region_rating'] + 1)\ndata['region_rating\u02c6log'] = np.sqrt(data['region_rating'])\n\ndata['score_bki\u02c62'] = data['score_bki']**2\ndata['score_bki\u02c64'] = data['score_bki']**4\ndata['score_bki\u02c6sqrt'] = np.sqrt(abs(data['score_bki']))\ndata['score_bki\u02c6log'] = np.log(abs(data['score_bki']))\ndata['score_bki\u02c6exp'] = np.exp(abs(data['score_bki']))\ndata['days\u02c62'] = data['app_date']**2","d9c9c662":"# \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432\ndata.shape","e1761a1f":"# \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044e \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043c\u0435\u0436\u0434\u0443 \u0441\u043e\u0431\u043e\u0439\nplt.figure(figsize=(8, 5))\nsns.heatmap(data[num_cols].corr().abs(), vmin=0,\n            vmax=1, annot=True, fmt=\".2f\", cmap=\"YlGnBu\")","df4e8186":"# \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044e \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043c\u0435\u0436\u0434\u0443 \u0441\u043e\u0431\u043e\u0439\nplt.figure(figsize=(8, 5))\nsns.heatmap(data[bin_cols].corr().abs(), vmin=0,\n            vmax=1, annot=True, fmt=\".2f\", cmap=\"YlGnBu\")","dc4babdd":"#num_cols.remove('app_date')\nimp_num = pd.Series(f_classif(data[num_cols], data['default'])[0], index = num_cols)\nimp_num.sort_values(inplace = True)\nimp_num.plot(kind = 'barh')","595e3c49":"data.drop(['client_id'], axis = 1, inplace=True)","30dbf6c4":"data.info()","9fe4103f":"data = pd.get_dummies(data, columns=['education'], dummy_na=True)","c18022b7":"data.head()","640fbb3a":"any_cols = ['client_id', 'Train', 'default']\nrest_cols = list(set(data.columns) - set(cat_cols) - set(num_cols) - \\\n                  set(bin_cols) - set(any_cols))\nlen(rest_cols)\n","2137b69c":"imp_rest = pd.Series(f_classif(data[rest_cols], data['default'])[0], index = rest_cols)\nimp_rest.sort_values(inplace = True)\nimp_rest","4b5e653c":"# \u0443\u0434\u0430\u043b\u0438\u043c \u043f\u0435\u0440\u0432\u044b\u0435 \u043d\u0435\u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0438 \u043e\u0431\u043d\u043e\u0432\u0438\u043c \u0441\u043f\u0438\u0441\u043e\u043a rest_cols\nrest_cols = imp_rest[imp_rest.values > 100].index","42bc8792":"any_cols = ['client_id', 'Train', 'default']\nrest_cols = list(set(data.columns) - set(cat_cols) - set(num_cols) - \\\n                  set(bin_cols) - set(any_cols))\nlen(rest_cols)","b3569145":"# 5 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u0430 rest_cols \u0443\u0434\u0430\u043b\u0438\u043b\u043e\u0441\u044c\nlen(rest_cols)","122de473":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u044c \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 rest_cols\n\nimp_rest = pd.Series(f_classif(data[rest_cols], data['default'])[0], index = rest_cols)\nimp_rest.sort_values(inplace = True)\nimp_rest.plot(kind = 'barh', figsize=(10, 10))","8f6eebc0":"imp_cat = Series(mutual_info_classif(data[bin_cols], data['default'],\n                                     discrete_features =True), index = bin_cols)\nimp_cat.sort_values(inplace = True)\nimp_cat.plot(kind = 'barh')","f01b910b":"data.info()","59745e11":"# \u0422\u0435\u043f\u0435\u0440\u044c \u0432\u044b\u0434\u0435\u043b\u0438\u043c \u0442\u0435\u0441\u0442\u043e\u0432\u0443\u044e \u0447\u0430\u0441\u0442\u044c\ntrain_data = data.query('Train == 1').drop(['Train'], axis=1)\ntest_data = data.query('Train == 0').drop(['Train', 'default'], axis=1)\n\ny = train_data['default'].values  # \u043d\u0430\u0448 \u0442\u0430\u0440\u0433\u0435\u0442\nX = train_data.drop(['default'], axis=1)","e2e85ee6":"# \u0432\u044b\u0434\u0435\u043b\u0438\u043c 20% \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e (\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 test_size)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","d80be5c8":"# \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c\nX_train.shape, X_test.shape, y_train.shape, y_test.shape","cbc8154b":"logreg = LogisticRegression(solver='liblinear', max_iter=1000)\nlogreg.fit(X_train, y_train)\ny_pred = logreg.predict(X_test)","1ad9fd7f":"from sklearn.metrics import classification_report\nclassification_report = classification_report(y_test, y_pred)\nprint(classification_report)","e90755e1":"# \u0435\u0441\u043b\u0438 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0430\u0441 \u0443\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u0442, \u043e\u0431\u0443\u0447\u0430\u0435\u043c \u0444\u0438\u043d\u0430\u043b\u044c\u043d\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0430 \u0432\u0441\u0435\u0445 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0438 \u0434\u0430\u043d\u043d\u044b\u0445\nlogreg_final = LogisticRegression(solver='liblinear', max_iter=1000)\nlogreg_final.fit(X, y)","afd14035":"predict_submission = logreg_final.predict(test_data)","410c18e3":"sample_submission['default'] = predict_submission\nsample_submission.to_csv('submission.csv', index=False)\nsample_submission.head(10)","d31a219f":"sample_submission.describe()","48d4c736":"!kaggle competitions submit -c sf-scoring -f ssubmission.csv -m \"Message\"\n# !kaggle competitions submit your-competition-name -f submission.csv -m 'My submission message'","f9a2397a":"## \u0423\u0434\u0430\u043b\u0438\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0441 \u043d\u0438\u0437\u043a\u0438\u043c \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0435\u043c \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u0438","86a61e68":"# 4. \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u043a \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044e","a7befa23":"# \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435","808909c8":"\u0414\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u0438 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e f_classif \u0438\u0437 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 sklearn. ","85ee4ba4":"# \u041a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f","8eaa89d5":"\u0414\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u0438 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e mutual_info_classif \u0438\u0437 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 sklearn.","e19a0f89":"# 1. \u0418\u043c\u043f\u043e\u0440\u0442 \u0434\u0430\u043d\u043d\u044b\u0445","caff2c63":"# \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0434\u0430\u0442","46b3894e":"\u0412\u044b\u0432\u043e\u0434\u044b \u043f\u043e \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c:\n\nsex: \u0436\u0435\u043d\u0449\u0438\u043d \u0432 \u0432\u044b\u0431\u043e\u0440\u043a\u0435 \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u0431\u043e\u043b\u044c\u0448\u0435, \u0447\u0435\u043c \u043c\u0443\u0436\u0447\u0438\u043d; \u0436\u0435\u043d\u0449\u0438\u043d\u044b \u0431\u043e\u043b\u0435\u0435 \u0447\u0430\u0441\u0442\u043e \u043e\u0442\u0434\u0430\u044e\u0442 \u043a\u0440\u0435\u0434\u0438\u0442, \u0447\u0435\u043c \u043c\u0443\u0436\u0447\u0438\u043d\u044b, \u043d\u043e \u0440\u0430\u0437\u043d\u0438\u0446\u0430 \u043d\u0435\u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u0430\n\ncar: \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0441 \u043c\u0430\u0448\u0438\u043d\u043e\u0439 \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e \u0432 2 \u0440\u0430\u0437\u0430 \u043c\u0435\u043d\u044c\u0448\u0435, \u0447\u0435\u043c \u0431\u0435\u0437 \u043c\u0430\u0448\u0438\u043d\u044b. \u0422\u0435, \u0443 \u043a\u043e\u0433\u043e \u0435\u0441\u0442\u044c \u043c\u0430\u0448\u0438\u043d\u0430, \u0431\u043e\u043b\u0435\u0435 \u043a\u0440\u0435\u0434\u0438\u0442\u043e\u0441\u043f\u043e\u0441\u043e\u0431\u043d\u044b\n\ncar_type: \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432, \u0443 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043c\u0430\u0448\u0438\u043d\u0430 \u0438\u043d\u043e\u043c\u0430\u0440\u043a\u0430, \u0435\u0449\u0435 \u043c\u0435\u043d\u044c\u0448\u0435, \u0438 \u043e\u043d\u0438 \u0442\u0430\u043a\u0436\u0435 \u0431\u043e\u043b\u0435\u0435 \u043a\u0440\u0435\u0434\u0438\u0442\u043e\u0441\u043f\u043e\u0441\u043e\u0431\u043d\u044b.\n\ngood_work: \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0441 \u0445\u043e\u0440\u043e\u0448\u0435\u0439 \u0440\u0430\u0431\u043e\u0442\u043e\u0439 \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043c\u0435\u043d\u044c\u0448\u0435, \u0447\u0435\u043c \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u0438 \u043e\u043d\u0438 \u0431\u043e\u043b\u0435\u0435 \u043a\u0440\u0435\u0434\u0438\u0442\u043e\u0441\u043f\u043e\u0441\u043e\u0431\u043d\u044b\n\nforeign_passport: \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0441 \u0437\u0430\u0433\u0440\u0430\u043d\u043f\u0430\u0441\u043f\u043e\u0440\u0442\u043e\u043c \u0442\u0430\u043a\u0436\u0435 \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043c\u0435\u043d\u044c\u0448\u0435 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u0438 \u043e\u043d\u0438 \u0442\u043e\u0436\u0435 \u0431\u043e\u043b\u0435\u0435 \u043a\u0440\u0435\u0434\u0438\u0442\u043e\u0441\u043f\u043e\u0441\u043e\u0431\u043d\u044b education: \u0447\u0435\u043c \u0432\u044b\u0448\u0435 \u0443\u0440\u043e\u0432\u0435\u043d\u044c \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u0442\u0435\u043c \u0432\u044b\u0448\u0435 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044c \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u043a\u0440\u0435\u0434\u0438\u0442\n\nregion_rating: \u043e\u0440\u0434\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a, \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u044e\u0449\u0438\u0439 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043e\u0442 0 \u0434\u043e 4\n\nhome_address: \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0435 \u0430\u0434\u0440\u0435\u0441\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u044b \u043f\u043e 3 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f\u043c. \u041a\u043b\u0438\u0435\u043d\u0442\u044b, \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u044e\u0449\u0438\u0435 \u0432 1 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u0430\u0434\u0440\u0435\u0441\u0430 \u0431\u043e\u043b\u0435\u0435 \u043a\u0440\u0435\u0434\u0438\u0442\u043e\u0441\u043f\u043e\u0441\u043e\u0431\u043d\u044b, \u0447\u0435\u043c \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u0439 \u0438 \u0432 \u0442\u0440\u0435\u0442\u044c\u0435\u0439\n\nwork_address: \u0440\u0430\u0431\u043e\u0447\u0438\u0435 \u0430\u0434\u0440\u0435\u0441\u0430 \u0442\u0430\u043a\u0436\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u044b \u043f\u043e 3 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f\u043c. \u041a\u043b\u0438\u0435\u043d\u0442\u044b, \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0449\u0438\u0435 \u0432 1 \u0438 2 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f\u0445 \u0430\u0434\u0440\u0435\u0441\u0430 \u0431\u043e\u043b\u0435\u0435 \u043a\u0440\u0435\u0434\u0438\u0442\u043e\u0441\u043f\u043e\u0441\u043e\u0431\u043d\u044b, \u0447\u0435\u043c \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0449\u0438\u0435 \u0432 3 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438\n\nsna (\u0441\u0432\u044f\u0437\u044c \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430 \u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c\u0438 \u0431\u0430\u043d\u043a\u0430): \u0447\u0435\u043c \u0432\u044b\u0448\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c, \u0442\u0435\u043c \u0432\u044b\u0448\u0435 \u0440\u0438\u0441\u043a \u043d\u0435\u0432\u043e\u0437\u0432\u0440\u0430\u0442\u0430 \u043a\u0440\u0435\u0434\u0438\u0442\u0430\n\nfirst_time (\u0434\u0430\u0432\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438\u0438 \u043e \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0435): \u0447\u0435\u043c \u0432\u044b\u0448\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c, \u0442\u0435\u043c \u0431\u043e\u043b\u0435\u0435 \u0431\u043b\u0430\u0433\u043e\u043d\u0430\u0434\u0435\u0436\u0435\u043d \u043a\u043b\u0438\u0435\u043d\u0442","d9d2c76e":"# \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435\n\neducation \u043e\u043d \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u043d\u0435 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439, \u043e\u043d \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 5 \u0443\u0440\u043e\u0432\u043d\u0435\u0439 \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f. region_rating - \u0438\u043c\u0435\u0435\u0442 7 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439. \u0414\u043b\u044f \u043d\u0438\u0445 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u043c \u0440\u0430\u043d\u0436\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435.\n\n*\"SCH\" - \u0448\u043a\u043e\u043b\u044c\u043d\u043e\u0435 \"UGR\" - \u0431\u0430\u043a\u0430\u043b\u0430\u0432\u0440, \"GRD - \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0435\", \"PGR\" - \u0430\u0441\u043f\u0438\u0440\u0430\u043d\u0442\u0443\u0440\u0430, \"ACD\" - \u0430\u043a\u0430\u0434\u0435\u043c\u0438\u0447\u0435\u0441\u043a\u043e\u0435*","66c30122":"\u0427\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 (\u043a\u0440\u043e\u043c\u0435 score_bki, crime) \u0438\u043c\u0435\u044e\u0442 \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u0438\/\u043b\u0438\u0431\u043e \u0434\u043b\u0438\u043d\u043d\u044b\u0439 \u043f\u0440\u0430\u0432\u044b\u0439 \u0445\u0432\u043e\u0441\u0442. \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u043c \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u043b\u044f \u0442\u043e\u0433\u043e \u0447\u0442\u043e\u0431\u044b \u0440\u0430\u0441\u043f\u0435\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u043b\u043e \u0431\u043e\u043b\u0435\u0435 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u044b\u043c","fb21dcaa":"\u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u0432 get_dummies \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438","4972a0d5":"# \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438","6819e488":"# 3. Feature Engineering","98471bd3":"# 2. \u041f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445","7352ce0d":"\u0418\u0442\u043e\u0433\u043e\u0432\u043e\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435 \u041f\u0430\u0432\u043b\u043e\u0432\u0430 \u0421\u0435\u043c\u0435\u043d\u0430\n\u043f\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0443 \u041a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440 \u0433\u043e\u0432\u043e\u0440\u0438\u0442 \"\u041d\u0435\u0442\"\n\u0417\u0430\u0434\u0430\u0447\u0430: \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u0442\u044c \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044c \u0434\u0435\u0444\u043e\u043b\u0442\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0431\u0430\u043d\u043a\u0430\n\n\u0426\u0435\u043b\u044c: \u041f\u043e\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0430 \u0438\u043c\u0435\u044e\u0449\u0438\u0445\u0441\u044f \u0434\u0430\u043d\u043d\u044b\u0445, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u0443\u043c\u0435\u043b\u0430 \u0431\u044b \u0440\u0435\u0448\u0438\u0442\u044c \u043d\u0430\u0448\u0443 \u0437\u0430\u0434\u0430\u0447\u0443\n\n\u0414\u0430\u043d\u043d\u044b\u0435: \u0418\u043c\u0435\u0435\u0442\u0441\u044f \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u0445 \u0431\u0430\u043d\u043a\u0430 \u0441 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u043e \u041a\u0418 \u0438 \u0430\u043d\u043a\u0435\u0442\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0431\u0430\u043d\u043a\u0430"}}