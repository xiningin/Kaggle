{"cell_type":{"ddff36ce":"code","b625f163":"code","34ff4b88":"code","91ef35de":"code","f2de833e":"code","b1917dd8":"code","c096d909":"code","b7c12609":"code","95961cc7":"code","381734ed":"code","0878258f":"markdown","e2d7bf52":"markdown","d18b5387":"markdown","ac45ebd6":"markdown","4d8edb02":"markdown","a65dfd41":"markdown","36b8ce68":"markdown","c8045e06":"markdown"},"source":{"ddff36ce":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b625f163":"import tensorflow as tf\nfrom tensorflow import keras","34ff4b88":"df = pd.read_csv('..\/input\/digit-recognizer\/train.csv')","91ef35de":"df.head()","f2de833e":"X_train = df.iloc[:,1:]\ny_train = df.iloc[:,0]","b1917dd8":"test_df = pd.read_csv('..\/input\/digit-recognizer\/test.csv')\ntest_df.head()","c096d909":"X_train = X_train \/ 255\ntest_df = test_df \/ 255","b7c12609":"model = keras.Sequential([keras.layers.Flatten(input_shape=(28,28)),\n                          keras.layers.Dense(128, activation=tf.nn.relu),\n                          keras.layers.Dense(10,activation=tf.nn.softmax)\n                          ])","95961cc7":"model.compile(optimizer = tf.optimizers.Adam(),\n              loss = 'sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\nmodel.fit(X_train, y_train, epochs=5)","381734ed":"pred = model.predict(test_df)\npred = np.argmax(pred, axis = 1)\nprint(pred[0]) #change the index value of pred to view different results","0878258f":"## Importing the data\n\nIn the code cell below I have imported all the trainging data into ```df``` using the Pandas Library. In the next cell I have viewd the first five rows of our data. This helped me locate the labels column ","e2d7bf52":"Here using keras a simple 3 layered neural network was made. The first layer flattens the data.\nThe hidden layer is a dense layer comprising of 128 neurons and is activated using relu.\nThe output layer is also a Dense layer of 10 neurons but uses a softmax actication function to predict the label correctly.","d18b5387":"Here we create the optimizing function and the loss function for our model and run it for 5 epochs using the ```model.fit``` command","ac45ebd6":"## Importing Tensorflow and Keras","4d8edb02":"## Predictions\n\nTo predict the output we call the predict function from TensorFlow and use Numpy to round of the values","a65dfd41":"Here I imported the test data into the variable ```test_df```","36b8ce68":"In the cell below I used Pandas to seperate the labels (y) from the features (X)","c8045e06":"## The Neural Network\n\nIn the first cell I divided all the features by 255 as a neural network works better in the range of 0 to 1"}}