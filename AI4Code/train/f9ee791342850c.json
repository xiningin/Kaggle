{"cell_type":{"ed842e71":"code","78bc28de":"code","bec31747":"code","039a5692":"code","7f5439cd":"code","d0bfaa01":"code","99a9cdad":"code","fa101720":"code","097c5014":"code","df365958":"code","c76228d0":"code","18d9de7a":"code","fdcb8185":"code","ffff643e":"code","132fa7ef":"code","75b0b5a8":"code","3a490064":"code","cf2c44da":"code","66dea93d":"markdown","66604215":"markdown","fade8ff8":"markdown","76aadffc":"markdown","c9bcfccc":"markdown","5a45d1c3":"markdown","131a70b7":"markdown","9bbd3657":"markdown","36e4438b":"markdown","5494dc1f":"markdown","47b0355e":"markdown","4bb75495":"markdown"},"source":{"ed842e71":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","78bc28de":"import matplotlib.pyplot as plt # matplotlib k\u00fct\u00fcphanemizi \u00e7a\u011f\u0131r\u0131yoruz.","bec31747":"df = pd.read_csv(\"\/kaggle\/input\/youtube-new\/GBvideos.csv\") # Bir dataframe tan\u0131mlad\u0131k ve pd.read_csv komudu (_csv yerine ba\u015fka _... gelebilir) ile okutuyoruz.\ndf.head(21) # Okutdu\u011fumuz dataframemi df.head() komudu ile belirledi\u011fimiz bir k\u0131sm\u0131n\u0131 ekrana \u00e7a\u011f\u0131r\u0131yoruz.","039a5692":"df.info() # Bu komut ile de dataframemiz hakk\u0131nda ad\u0131 \u00fcst\u00fcnde info al\u0131yoruz.","7f5439cd":"df.columns # Dataframemizin ba\u015fl\u0131klar\u0131n\u0131 columns komudu ile g\u00f6rebiliyoruz","d0bfaa01":"df.likes.plot(kind = \"line\", color = \"blue\",label = \"likes\",linewidth=0.5,alpha = 1,grid = False,linestyle = \"--\")\ndf.dislikes.plot(color = \"red\",label = \"dislikes\",linewidth=0.5, alpha = 1,grid = False,linestyle = \":\")\nplt.legend(loc='upper left')\nplt.ylabel(\"Vidio Say\u0131s\u0131 Derecesi\")\nplt.xlabel(\"Likes\/Dislikes Say\u0131s\u0131\")\nplt.title(\"Likes\/Dislikes Tablosu\")\nplt.show()","99a9cdad":"df.plot(kind=\"scatter\", x=\"likes\", y=\"dislikes\",alpha = 0.4,color = \"red\")\nplt.xlabel(\"Likes\")\nplt.ylabel(\"Dislikes\")\nplt.title(\"Likes\/Dislikes Scatter Plot\")\nplt.show()","fa101720":"dictionary = {\"T\u00fcrkiye\":\"Ankara\",\"Rusya\":\"Berlin\"} # Burada \u00fclkelerin ba\u015fkentleri ile ilgili k\u00fc\u00e7\u00fck bir dictionary haz\u0131rlad\u0131k.\nprint(dictionary.keys()) # \u00dclkeler\nprint(dictionary.values()) # Ba\u015fkentleri","097c5014":"dictionary[\"Rusya\"] = \"Moskova\"    # Diyelim ki bir \u00fclkenin ba\u015fkentini yanl\u0131\u015f yazd\u0131n\u0131z, bu \u015fekilde de\u011fi\u015ftirebilirsiniz.\nprint(dictionary)\ndictionary[\"Almanya\"] = \"Berlin\"   # Yeni bir ket ve value ekler.\nprint(dictionary)\ndel dictionary[\"Rusya\"]            # Bu komutla herhangi bir Key'i silebilirsiniz.\nprint(dictionary)\nprint(\"Fransa\" in dictionary)      # Bu komutla ise yazd\u0131\u011f\u0131n\u0131z key'in dictionary'nizde olup olmad\u0131\u011f\u0131n\u0131 kontrol edebilirsiniz. E\u011fer varsa True yoksa False de\u011fer d\u00f6nd\u00fcrecektir.\n#dictionary.clear()                # Dictionary'nizi temizler\nprint(dictionary)","df365958":"data = pd.read_csv(\"\/kaggle\/input\/youtube-new\/GBvideos.csv\")","c76228d0":"series = data[\"likes\"] # data['Defense'] = series\nprint(type(series))\ndata_frame = data[['likes']]  # data[['Defense']] = data frame\nprint(type(data_frame))","18d9de7a":"# Comparison operator\nprint(10 > 5) # 10, 5'den  b\u00fcy\u00fck (True)\nprint(6!=1) # 6, 1'e e\u015fit de\u011fil (True)\n# Boolean operators\nprint(True and False) # Her ikiside ... yada ... (False)\nprint(True or False) # Herhangi biri ... yada ... (True)","fdcb8185":"Say\u0131 = int(input(\"Say\u0131 = \")) # burada inputumuza integer bir de\u011fer giriyoruz\nprint(Say\u0131%2 and \"Tek\" or \"\u00c7ift\") # De\u011ferimiz 2'ye b\u00f6l\u00fcnebiliyorsa \"Tek\" b\u00f6l\u00fcnemiyorsa \"\u00c7ift\" yaz","ffff643e":"x = data['category_id']<20     # category_id'si 20'den k\u00fc\u00e7\u00fck olanlar\u0131 yaz.\ndata[x]","132fa7ef":"data[np.logical_and(data['likes']<200, data['category_id']>27)] # Likes'i 200'den k\u00fc\u00e7\u00fck ve category_id'si 27'den b\u00fcy\u00fck olanlar\u0131 yaz.","75b0b5a8":"data[(data['likes']<200) & (data['category_id']>27)] # Bu \u015fekilde de yap\u0131labilir.","3a490064":"i = 0 # i de\u011feri 0\nwhile i != 10 : # i de\u011feri 5 e\u015fit de\u011filse\n    print('i is: ',i) # yaz \"i is ,\"(de\u011fer)\n    i +=2 # i de\u011ferini 1 artt\u0131r\nprint(i,' is equal to 5') # yaz (de\u011fer) is to (de\u011fer)","cf2c44da":"i = 1 # i de\u011feri 1\nS = int(input(\"Tavan Say\u0131s\u0131: \")) # S = inputumuza integer bir giriyoruz\nwhile i <= S: # D\u00f6ng\u00fcy\u00fc ba\u015flat, i S den k\u00fc\u00e7\u00fck yada e\u015fitse\n    kare = S * S # kare = S ile S'yi \u00e7arp\n    print(S,\"'in karesi =\",kare) # yaz S\"'in karesi = \",kare\n    break # D\u00f6ng\u00fcy\u00fc bitir","66dea93d":"Dictionary T\u00fcrk\u00e7e kar\u015f\u0131l\u0131\u011f\u0131 \"s\u00f6zl\u00fckt\u00fcr\"\nPython \"dictionary\"i Key ve Valuelardan olu\u015fan bir s\u00f6zl\u00fck olarak kullan\u0131r","66604215":"1. K\u0131saca d\u00f6ng\u00fcler olarak tan\u0131mlayabilece\u011fimiz bir konudur.\n2. while: d\u00f6ng\u00fcy\u00fc ba\u015flat\u0131r.\n3. break: d\u00f6ng\u00fcy\u00fc k\u0131rar (sonland\u0131r\u0131r).\n4. contiune: sonraki sat\u0131r\u0131 atlar.","fade8ff8":"Yukar\u0131da datasetimizde ki b\u00f6l\u00fcmleri g\u00f6r\u00fcyoruz.","76aadffc":"1. Dataframemizin i\u00e7inde bulunan Likes columnsunu se\u00e7tik. t\u00fcr\u00fcne line\n2. rengine mavi\n3. etiketine Likes\n4. hat geni\u015fli\u011fine 0.5\n5. saydaml\u0131\u011f\u0131na 1\n6. tablodaki \u00e7izgilere False ve \u00e7izgi \u015fekline -- olarak kodlad\u0131k.\n7. Harita lejant\u0131n\u0131 sol \u00fcst olarak belirledik.\n8. Dislikes tablosunun sadece rengini ve etiketini de\u011fi\u015ftirdik.\n9. Tablonun ismini \"Likes\/Dislikes Tablosu\" olarak isimlendirdik.\n10. Tablonun sol yan\u0131nada \"Vidio Say\u0131s\u0131 Derecesi\" olarak isimlendirdik.\n11. tablonun alt\u0131na da Likes\/Dislikes Say\u0131s\u0131 olarak isimlendirdik.\n12. tablomuzun ismini \"Line Plot\" olarak kodlad\u0131k.\n13. Ve son olarak plt.show() komudu ile tablo ile ilgili komut sat\u0131r\u0131n\u0131 kapatt\u0131k.","c9bcfccc":"1. Tabloyu yorumlamak gerekir ise 0-5000 aral\u0131\u011f\u0131nda likes say\u0131s\u0131 fazla dislikes say\u0131s\u0131 \u00e7ok az.\n2. 5000-10000 arala\u011f\u0131nda ise likes ile dislikes oran\u0131 y\u00fckselmeye ba\u015fl\u0131yor 7000 band\u0131nda her ikiside belirgin bir \u015fekilde d\u00fc\u015f\u00fcyor.\n3. 10000-15000 aral\u0131\u011f\u0131nda likes ve dislikes say\u0131s\u0131 d\u00fc\u015f\u00fcyor fakat dislikes 10000-13000 band\u0131nda likes say\u0131s\u0131n\u0131 ge\u00e7ebiliyor 14000 band\u0131nda dislikes oran\u0131 d\u00fc\u015f\u00fcyor.\n4. 15000-20000 band\u0131nda dislikes oran\u0131 az az d\u00fc\u015f\u00fcyor likes say\u0131s\u0131 ise ini\u015fli \u00e7\u0131k\u0131\u015fl\u0131.\n5. 20000-25000 de likes say\u0131s\u0131 belirgin bir \u015fekilde artarken dislikes say\u0131s\u0131 sabit.\n6. 25000-30000 likes say\u0131s\u0131n\u0131n \u00e7o\u011funlu\u011fu hafif y\u00fckseli\u015fte dislikes say\u0131s\u0131 hafif ini\u015fli \u00e7\u0131k\u0131\u015fl\u0131.\n7. 30000-35000 Likes say\u0131s\u0131n\u0131n \u00e7o\u011funlu d\u00fc\u015ft\u00fckten sonra tekrardan y\u00fckseli\u015fte dislikes ise hafif y\u00fckseli\u015fte.\n8. 35000-40000 de Likes say\u0131s\u0131 y\u00fckseldikten sonra d\u00fc\u015f\u00fcyor ve geri \u00e7\u0131k\u0131yor ve tekrardan d\u00fc\u015f\u00fcyor Dislikes ise hafif bir y\u00fckseli\u015f sonucunda d\u00fc\u015f\u00fcyor.","5a45d1c3":"WH\u0130LE AND FOR LOOPS","131a70b7":"Bu tablo bir \u00f6nceki tablo ile ayn\u0131 fakat t\u00fcr\u00fc Scatter \u00e7izelgesi oldu\u011fundan dolay\u0131 farkl\u0131 g\u00f6z\u00fck\u00fcyor. Scatter chart T\u00fcrk\u00e7e'si da\u011f\u0131l\u0131m \u00e7izelgesidir","9bbd3657":"MATPLOTL\u0130B","36e4438b":"DICTIONARY","5494dc1f":"pandas da Comparison operator(==, <, >, <=)\nve Boolean operators(and, or ,not) vard\u0131r.","47b0355e":"PANDAS","4bb75495":"Pandas pythonda bulunan bir k\u00fct\u00fcphanedir."}}