{"cell_type":{"a6316cc1":"code","c779b108":"code","ea937f4e":"code","6ed0ffee":"code","0f014970":"code","6c2e6d4f":"code","e37e737a":"code","0873294d":"code","2ff8de6e":"code","5789bb3e":"code","5064b01b":"code","dc2a89c0":"code","916900a4":"code","7aa31fae":"code","e6186577":"code","c267607d":"code","bf707ace":"code","63c49f79":"code","f426d871":"code","ec01a12b":"code","b6c56f8f":"code","619a8b31":"code","58ce8527":"code","0e96e1e6":"code","67c4005f":"code","03b92e62":"code","4896b157":"code","9f9a15c7":"code","18742603":"code","39b5c473":"code","435c90ea":"code","4d2c201d":"code","402ac99d":"code","31f6a947":"code","0ea2c120":"code","23cac575":"code","391c1b08":"code","0ab30f2a":"code","a7bbfd19":"code","c8c4a431":"code","32a646a8":"code","6cd9acfe":"code","cdb303c4":"code","c44a2f57":"code","a782d859":"code","3ef8fcaa":"code","219cc641":"code","7ea0d697":"code","05caa87a":"code","cb984340":"code","19f404f5":"code","de75a190":"code","2b09b907":"markdown","8b8f4841":"markdown","30feddb6":"markdown","baef1bd1":"markdown","ed32e5b9":"markdown","680a750b":"markdown","2e6b1aa1":"markdown"},"source":{"a6316cc1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","c779b108":"import pandas as pd","ea937f4e":"train = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-1\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-1\/test.csv')","6ed0ffee":"train.info()","0f014970":"test.info()","6c2e6d4f":"train.sample(3)","e37e737a":"\ngroup = train.groupby(['Country\/Region'])['ConfirmedCases','Fatalities'].sum().reset_index()\ngroup\n","0873294d":"train = train.merge(group, on = ['Country\/Region'],how='left' )\ntest = test.merge(group, on = ['Country\/Region'],how='left' )\n\n","2ff8de6e":"test = test.merge(group, on = ['Country\/Region'],how='left' )\n","5789bb3e":"train['Date'] = pd.to_datetime(train['Date'])\ntest['Date'] = pd.to_datetime(test['Date'])","5064b01b":"\ntrain['month'] = pd.to_datetime(train['Date']).dt.month\ntrain['date'] = pd.to_datetime(train['Date']).dt.day\n\ntrain['dayofyear'] = pd.to_datetime(train['Date']).dt.dayofyear\ntrain['dayofweek'] = pd.to_datetime(train['Date']).dt.dayofweek\n\ntrain['weekofyear'] = pd.to_datetime(train['Date']).dt.weekofyear\n","dc2a89c0":"\ntest['month'] = pd.to_datetime(test['Date']).dt.month\ntest['date'] = pd.to_datetime(test['Date']).dt.day\n\n\ntest['dayofyear'] = pd.to_datetime(test['Date']).dt.dayofyear\ntest['dayofweek'] = pd.to_datetime(test['Date']).dt.dayofweek\ntest['weekofyear'] = pd.to_datetime(test['Date']).dt.weekofyear\n","916900a4":"train.head(5)","7aa31fae":"train.tail(5)","e6186577":"train['Date'] = train['Date'].astype('int64')\ntest['Date'] = test['Date'].astype('int64')","c267607d":"train.iloc[235:300,:]","bf707ace":"train.tail(5)","63c49f79":"train.info()","f426d871":"from collections import defaultdict\ncountryCount = 0\ncountryList = []\nprovinceDict = defaultdict(list)\nfor country in train['Country\/Region'].unique():\n    countryList.append(country)\n    countryCount = countryCount+1\n    countryWithProvince = train[train['Country\/Region'] == country]\n    if countryWithProvince['Province\/State'].isna().unique() == True:\n        #print('No province in ', country)\n        continue\n    else:\n        provinceDict[country].append(countryWithProvince['Province\/State'].unique())\nprint(\"countryCount : \",len(countryList))\n# print(countryList)\nprint(\"\\nCountries with provinces :\" ,len(provinceDict.keys()))\n# for k,v in provinceDict.items():\n#     print('\\n',k,v)\n","ec01a12b":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ndef FunLabelEncoder(df):\n    for c in df.columns:\n        if df.dtypes[c] == object:\n            le.fit(df[c].astype(str))\n            #print(c)\n            #df[c].fillna('khali', inplace=True)\n            df[c] = le.transform(df[c].astype(str))\n    return df\n#trainX = FunLabelEncoder(trainX)","b6c56f8f":"train = FunLabelEncoder(train)\ntrain.info()\ntrain.iloc[235:300,:]","619a8b31":"test = FunLabelEncoder(test)\ntest.info()","58ce8527":"test","0e96e1e6":"train.iloc[:,:-2].sample(3)","67c4005f":"X = train.iloc[:,:]\nprint(X.shape)\ndel X['Lat']\ndel X['Long']\ndel X['Date']\n\nprint(X.shape)\nX.sample(3)","03b92e62":"train","4896b157":"Y = train.iloc[:,[3,4]]\n\nprint(Y.shape)\n","9f9a15c7":"del X['ConfirmedCases_x']\ndel X['Fatalities_x']\n","18742603":"X","39b5c473":"from sklearn.model_selection import train_test_split \ntrainX , valX, trainY, valY = train_test_split(X, Y, random_state=1)","435c90ea":"y1Train = trainY.iloc[:,0]\nprint(y1Train.shape)\ny1Train.sample(3)","4d2c201d":"y2Train = trainY.iloc[:,1]\ny2Train.sample(3)","402ac99d":"y1Val = valY.iloc[:,0]\ny1Val.sample(3)","31f6a947":"y2Val = valY.iloc[:,1]\ny2Val.sample(3)","0ea2c120":"print(trainX.shape)\ntrainX.sample(3)","23cac575":"print(trainX.info())","391c1b08":"trainX.iloc[:,1:].sample(3)","0ab30f2a":"from sklearn.tree import DecisionTreeRegressor\nlrModel1 = DecisionTreeRegressor(random_state = 27)\n%time lrModel1.fit(trainX.iloc[:,1:], y1Train)","a7bbfd19":"%time y1Pred = lrModel1.predict(valX.iloc[:,1:])\nprint(y1Pred[:,])","c8c4a431":"from sklearn.metrics import mean_absolute_error\n\nprint(\"Accuracy in train set : \", lrModel1.score(trainX.iloc[:,1:], y1Train))\nprint(\"RMSE : \", mean_absolute_error(y1Val, y1Pred)**(0.5))","32a646a8":"lrModel2 = DecisionTreeRegressor(random_state = 27)\n%time lrModel2.fit(trainX.iloc[:,1:], y2Train)\n\n%time y2Pred = lrModel2.predict(valX.iloc[:,1:])\n\nprint(\"Accuracy in train set : \", lrModel2.score(trainX.iloc[:,1:], y2Train))\nprint(\"RMSE : \", mean_absolute_error(y2Val, y2Pred)**(0.5))","6cd9acfe":"print(test.shape)\ntest.sample(3)","cdb303c4":"del test['Lat']\ndel test['Long']\n\n\ntest.sample(3)","c44a2f57":"del test['Date']","a782d859":"del test['ConfirmedCases_x']\ndel test['Fatalities_x']\n","3ef8fcaa":"test.iloc[:,1:].sample(3)","219cc641":"%time finalPred1 = lrModel1.predict(test.iloc[:,1:])\nprint(finalPred1[:,])","7ea0d697":"%time finalPred2 = lrModel2.predict(test.iloc[:,1:])\nprint(finalPred2[:,])","05caa87a":"outputFile = pd.DataFrame({\"ForecastId\": test.ForecastId,\n                           \"ConfirmedCases\": (finalPred1+0.5).astype('int'),\n                           \"Fatalities\": (finalPred2+0.5).astype('int')})","cb984340":"outputFile.sample(3)","19f404f5":"outputFile","de75a190":"outputFile.to_csv(\"submission.csv\", index=False)","2b09b907":"## date output seggregation","8b8f4841":"## label encoding","30feddb6":"## taking on test data","baef1bd1":"## train-test split","ed32e5b9":"## model2 training : Fatalities","680a750b":"## model1 training : ConfirmedCases","2e6b1aa1":"### country wise province segregation"}}