{"cell_type":{"c20e96e2":"code","b50fc2c0":"code","8bff46fc":"code","8d228ccd":"code","cb7a1f85":"code","d6467998":"code","38615bc1":"code","73841fb5":"code","f1e2e94b":"code","f1ffefde":"code","df7a7f7d":"code","7fec9b45":"code","fd57d6f6":"code","ebe34d0a":"code","06d7352f":"code","7911fb80":"code","34f2eff7":"code","168635c2":"code","f25dc49c":"code","71ab820d":"code","24bc27b9":"code","d93f3cc1":"code","db8f9b6f":"code","c28865c4":"code","b6e63bdc":"code","9c6c5e76":"code","872b97c9":"code","637472fd":"code","41483371":"code","2f279c91":"markdown","16e06644":"markdown","b9acf170":"markdown","23733f2c":"markdown","c4de8b47":"markdown","d7f16ddc":"markdown","c50ca09b":"markdown","25c97612":"markdown","ca06c6bb":"markdown","34f6f489":"markdown","44b63cec":"markdown","e7bbfcfa":"markdown","3295990e":"markdown","90faf206":"markdown","5b56f6b2":"markdown","cc1501c2":"markdown"},"source":{"c20e96e2":"## \u53c2\u8003\uff1aDAY\uff12\u306e\u5bbf\u984c\n\n### \u76ee\u6b21\n#### 8. DAY2\u3067\u5b66\u3093\u3060\u3053\u3068\u306e\u53d6\u308a\u7d44\u307f\n##### 8-1. \u4ea4\u5dee\u691c\u8a3c\u3001\u30db\u30fc\u30eb\u30c9\u30a2\u30a6\u30c8\u6cd5\u306a\u3069\u3067\u6c4e\u5316\u6027\u80fd\u3092\u78ba\u8a8d\u3059\u308b\n##### 8-2. \u6b20\u6e2c\u5024\u3068\u7570\u5e38\u5024\u3092\u78ba\u8a8d\u3057\u3001\u9069\u5207\u306b\u51e6\u7406\u3059\u308b\n##### 8-3. DAY2\u30013\u3067\u5b66\u3093\u3060\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u5229\u7528\u3057\u3066\u30e2\u30c7\u30eb\u3092\u3064\u304f\u308a\u3001DAY1\u5bbf\u984c\u63d0\u51fa\u6642\u306e\u7cbe\u5ea6\u3068\u6bd4\u8f03\u3059\u308b\n##### 8-4. \u4ea4\u5dee\u691c\u8a3c\u306b\u3088\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3092\u884c\u3046\n##### 8-5. \u30d1\u30e9\u30e1\u30fc\u30bf\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u5f8c\u306e\u30e2\u30c7\u30eb\u306b\u3088\u3063\u3066\u3001\u7cbe\u5ea6\u304a\u3088\u3073\u7d50\u679c\u306e\u8a55\u4fa1\u3092\u884c\u3046\n##### 8-6. \u305d\u306e\u4ed6\u3001\u7cbe\u5ea6\u306e\u5411\u4e0a\u304c\u3067\u304d\u308b\u3088\u3046\u306a\u51e6\u7406\u306b\u53d6\u308a\u7d44\u307f\u3001\u7cbe\u5ea6\u3092\u4e0a\u3052\u308b\n##### 8-7. \u3067\u304d\u305f\u3068\u3053\u308d\u307e\u3067\u3092Notebook\u3067\u307e\u3068\u3081\u3001\u5bbf\u984c\u3068\u3057\u3066\u63d0\u51fa\u3059\u308b\n##### 8-8. \u524d\u56de\u304b\u3089\u53d6\u308a\u7d44\u3093\u3060\u5185\u5bb9\u30fb\u5de5\u592b\u3001\u7cbe\u5ea6\u304c\u3069\u306e\u3088\u3046\u306b\u5909\u5316\u3057\u305f\u304b\u306e\u30b3\u30e1\u30f3\u30c8\u3092Notebook\u306b\u542b\u3081\u308b\u3053\u3068\n","b50fc2c0":"## \u53c2\u8003\uff1aDAY1\u306e\u5bbf\u984c\n### \u76ee\u6b21\n#### 1. \u81ea\u5206\u304c\u53d6\u308a\u7d44\u3080\u901a\u3057\u8ab2\u984c\u30921\u3064\u9078\u629e\u3059\u308b\n##### \u2022 Kaggle\u30a2\u30ab\u30a6\u30f3\u30c8\u3092\u4f5c\u6210\u3057\u3001\u8a72\u5f53\u8ab2\u984c\u306e\u30c7\u30fc\u30bf\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\n#### 2. \u76ee\u7684\u5909\u6570\u3068\u8aac\u660e\u5909\u6570\u306e\u95a2\u4fc2\u3092\u78ba\u8a8d\u3059\u308b\u305f\u3081\u306e\u30b0\u30e9\u30d5\u3092\u4f5c\u6210\u3059\u308b\n#### 3. \u76ee\u7684\u5909\u6570\u3092\u8aac\u660e\u3059\u308b\u306e\u306b\u6709\u52b9\u305d\u3046\u306a\u8aac\u660e\u5909\u6570\u3092\u898b\u3064\u3051\u308b\n#### 4. DAY1\u3067\u5b66\u3093\u3060\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u5229\u7528\u3059\u308b\n##### \u2022 \u56de\u5e30\u306e\u5834\u5408\u306f\u7dda\u5f62\u56de\u5e30\u3001\u5206\u985e\u306e\u5834\u5408\u306f\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\n##### \u2022 \u8cea\u7684\u5909\u6570\u304c\u6271\u3048\u306a\u3044\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u4f7f\u3046\u5834\u5408\u306f\u3001\u30c0\u30df\u30fc\u5909\u6570\u306b\u7f6e\u304d\u63db\u3048\u308b\n#### 5. \u4e88\u6e2c\u7cbe\u5ea6\u307e\u305f\u306f\u8b58\u5225\u7cbe\u5ea6\u3092\u78ba\u8a8d\u3059\u308b\n##### \u2022 \u56de\u5e30\u554f\u984c\u306e\u5834\u5408\u306f\u3001MSE\u3001RMSE\u3001MAE\u3092\u6c42\u3081\u308b\n##### \u2022 \u5206\u985e\u554f\u984c\u306e\u5834\u5408\u306f\u3001\u6df7\u540c\u884c\u5217\u3092\u4f5c\u6210\u3057\u3001Accuracy\u3001Recall\u3001Precision\u3092\u6c42\u3081\u308b\n#### 6. \u3067\u304d\u305f\u3068\u3053\u308d\u307e\u3067\u3092Notebook\u3067\u307e\u3068\u3081\u3001Kernels\u307e\u305f\u306fGithub\u3067\u516c\u958b\u3059\u308b\n##### \u2022 \u516c\u958b\u65b9\u6cd5\u304c\u308f\u304b\u3089\u306a\u3044\u65b9\u306f\u3001ipynb\u30d5\u30a1\u30a4\u30eb\u3092#general\u306b\u8cbc\u308b\u4e8b\u524d\u6e96\u5099\u306e\u304a\u9858\u3044","8bff46fc":"print('\u53d6\u308a\u7d44\u3080\u8ab2\u984c\u3092\uff11\u3064\u9078\u629e\u3059\u308b')\nprint(\"I choose 'Kickstarter Projects'\")\n\nprint('\u5fc5\u8981\u306aLibrary\u3092Import\u3059\u308b')\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\n%matplotlib inline\nfrom sklearn.linear_model import SGDClassifier, LassoCV\nfrom sklearn.linear_model import Ridge,RidgeClassifier, Lasso,ElasticNet #\u6b63\u5247\u5316\u9805\u4ed8\u304d\u6700\u5c0f\u4e8c\u4e57\u6cd5\u3092\u884c\u3046\u305f\u3081\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\nfrom sklearn.metrics import log_loss, accuracy_score, confusion_matrix, precision_recall_fscore_support\nfrom sklearn.preprocessing import MinMaxScaler, StandardScaler\nfrom sklearn.decomposition import PCA\nfrom sklearn.model_selection import train_test_split # \u30db\u30fc\u30eb\u30c9\u30a2\u30a6\u30c8\u6cd5\u306b\u95a2\u3059\u308b\u95a2\u6570\nfrom sklearn.model_selection import KFold # \u4ea4\u5dee\u691c\u8a3c\u6cd5\u306b\u95a2\u3059\u308b\u95a2\u6570\nfrom sklearn.tree import DecisionTreeClassifier, export_graphviz\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier\nfrom sklearn.externals.six import StringIO\nfrom sklearn.svm import SVC\nfrom sklearn.feature_selection import RFECV, SelectFromModel\nfrom IPython.core.display import display \nfrom IPython.display import Image\nfrom datetime import datetime\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Activation, BatchNormalization\nfrom keras.optimizers import SGD,RMSprop, Adagrad, Adadelta, Adam\nimport warnings\nwarnings.filterwarnings('ignore')\n\nprint('\u30c7\u30fc\u30bf\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3001\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u305f\u7d50\u679c\u3092\u78ba\u8a8d\u3059\u308b')\n#df_data = pd.read_csv(\"..\/input\/ks-projects-201801.csv\")\ndf_data = pd.read_csv(\"..\/input\/kickstarter-projects\/ks-projects-201801.csv\")\nprint(\"Row lengths of imported data: \", len(df_data))","8d228ccd":"print('\u307e\u305a\u306fHeader\u3092\u78ba\u8a8d')\ndisplay(df_data.head())\ndf_data.describe()","cb7a1f85":"print(\"\u9805\u76ee\u3054\u3068\u306e\u8aac\u660e(Kaggle\u304a\u3088\u3073Slack\u3088\u308a\u53d6\u5f97\u3057\u305f\u60c5\u5831)\u3092\u8868\u793a\u3059\u308b\")\ndf_data_exp = pd.read_csv(\"..\/input\/data-explanation\/data_explanation.csv\",encoding='cp932')\ndisplay(df_data_exp)","d6467998":"print('currency\u3068country\u306e\u95a2\u4fc2')\ndf_currency_country = df_data.groupby('country')\ndf_currency_country = df_currency_country['currency'].value_counts(normalize=True).unstack(fill_value=0)\ndisplay(df_currency_country)\n\nprint('country\u306e\u7a2e\u985e\u3068\u6570\u3092\u8abf\u3079\u308b')\nprint(df_data['country'].value_counts(dropna=False))\n\nprint('\\n\u8003\u5bdf')\nprint('country\u304b\u3089\u7570\u5e38\u5024\u3068\u601d\u308f\u308c\u308b\u300eN,0\"\u300f\u3092\u9664\u3051\u3070\u3001country\u306b\u3088\u308acurrency\u304c\u4e00\u610f\u306b\u6c7a\u307e\u308b')\nprint('\u5f93\u3063\u3066\u3001\u8aac\u660e\u5909\u6570\u304b\u3089currency\u3092\u9664\u5916\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u308b')","38615bc1":"print('category\u3068main category\u306e\u95a2\u4fc2')\ndf_categories = df_data.groupby('category')\ndf_categories = df_categories['main_category'].value_counts(normalize=True).unstack(fill_value=0)\ndisplay(df_categories)\n\n#category\u306e\u7a2e\u985e\u3068\u6570\u3092\u8abf\u3079\u308b\nprint('category\u306e\u7a2e\u985e\u3068\u6570\u3092\u8abf\u3079\u308b')\nprint(df_data['category'].value_counts(dropna=False))\n\n#main_category\u306e\u7a2e\u985e\u3068\u6570\u3092\u8abf\u3079\u308b\nprint('main_category\u306e\u7a2e\u985e\u3068\u6570\u3092\u8abf\u3079\u308b')\nprint(df_data['main_category'].value_counts(dropna=False))\n\nprint('\\n\u8003\u5bdf')\nprint('Anthologies\u3084Spaces\u306e\u3088\u3046\u306a\u4e00\u90e8\u306e\u4f8b\u5916\u3092\u9664\u3051\u3070\u3001category\u306b\u3088\u308amain_category\u304c\u4e00\u610f\u306b\u6c7a\u307e\u308b')\nprint('\u5f93\u3063\u3066\u3001\u8aac\u660e\u5909\u6570\u304b\u3089main_category\u3092\u9664\u5916\u3057\u3066\u3082\u3001\u5206\u6790\u3078\u306e\u5f71\u97ff\u306f\u5e0c\u5c11\u3068\u601d\u6599\u3059\u308b')","73841fb5":"print('goal\u3068usd_goal_real\u306e\u95a2\u4fc2')\nprint('\u307e\u305a\u306f\u6563\u5e03\u56f3\u884c\u5217\u3092\u66f8\u3044\u3066\u307f\u308b')\npd.plotting.scatter_matrix(df_data[['goal','usd_goal_real']], figsize=(15,15))\nplt.show()\nprint(' ')\nprint('\u6b21\u306b\u76f8\u95a2\u4fc2\u6570\u3092\u78ba\u8a8d')\ncorr_ = df_data[['goal','usd_goal_real']].corr()\nprint(corr_)\nprint('\\n\u8003\u5bdf')\nprint('goal\u3068usd_goal_real\u306f\u8996\u899a\u7684\u306b\u76f8\u95a2\u304c\u78ba\u8a8d\u51fa\u6765\u3066\u3001\u76f8\u95a2\u4fc2\u6570\u30820.94\u3068\u6975\u3081\u3066\u9ad8\u3044')\nprint('\u5f93\u3063\u3066\u3001\u8aac\u660e\u5909\u6570\u3068\u3057\u3066usd_goal_real\u3092\u4f7f\u308f\u305a\u3001goal\u3067\u4ee3\u7528\u3059\u308b')","f1e2e94b":"print('State\u306e\u7a2e\u985e\u3068\u6570\u3092\u8abf\u3079\u308b')\nprint(df_data['state'].value_counts(dropna=False))","f1ffefde":"print('Category\u6bce\u306bState\u3068\u306e\u76f8\u95a2\u3092\u30b0\u30e9\u30d5\u5316\u3059\u308b\\n')\ncategory_ = df_data.groupby('category')\ncategory_ = category_['state'].value_counts(normalize=True).unstack()\ncategory_ = category_.sort_values(by=['successful'],ascending=True)\ncategory_[['successful','failed','live','canceled','suspended','undefined']].plot(kind='barh', stacked=True,figsize=(13,30))\nprint(\"\u6210\u529f\u3057\u3084\u3059\u3044Category\u3068\u6210\u529f\u3057\u306b\u304f\u3044Cateogry\u304c\u5b58\u5728\u3059\u308b\")\nprint(\"Max\u306f80%\u8fd1\u304f\u3001Min\u306f10%\u4ee5\u4e0b\")","df7a7f7d":"print('deadline\u6bce\u306bState\u3068\u306e\u76f8\u95a2\u3092\u30b0\u30e9\u30d5\u5316\u3059\u308b')\nprint('deadline\u306e\u6570\u304c\u591a\u3044\u306e\u3067\u3001\u5e74\u6708\u5225\u306b\u3059\u308b')\ndf_data_deadline = df_data.copy()\ndf_data_deadline['deadline_YM'] = df_data_deadline['deadline'].apply(lambda x: x[0:7])\ndeadline_ = df_data_deadline.groupby('deadline_YM')\ndeadline_ = deadline_['state'].value_counts(normalize=True).unstack()\nax = deadline_[['successful','failed','live','canceled','suspended','undefined']].plot(kind='barh', stacked=True,figsize=(13,30))\nplt.legend(loc='upper left')\nprint(\"\\n2018\u5e74\u306bLive\u304c\u591a\u3044\u3002\u304c\u3001\u4ed6\u306e\u660e\u78ba\u306a\u50be\u5411\u306f\u3064\u304b\u307f\u306b\u304f\u3044\")","7fec9b45":"print('goal\u6bce\u306bState\u3068\u306e\u76f8\u95a2\u3092\u30b0\u30e9\u30d5\u5316\u3059\u308b')\nprint('goal\u306e\u6570\u304c\u591a\u3059\u304e\u308b\u306e\u3067\u300110\u4e07\u5358\u4f4d\u3067\u4e38\u3081\u3066\u76f8\u95a2\u3092\u898b\u308b')\ndf_data_goal = df_data.copy()\ndf_data_goal['goal_r'] = df_data_goal['goal'].apply(lambda x: round(x\/100000))\ngoal_ = df_data_goal.groupby('goal_r')\ngoal_ = goal_['state'].value_counts(normalize=True).unstack()\n#goal_ = goal_.sort_values('goal_r',ascending=False)\nax = goal_[['successful','failed','live','canceled','suspended','undefined']].plot(kind='barh', stacked=True,figsize=(13,30))\nplt.legend(loc='upper left')\nprint(\"\\nGoal\u304c\u5927\u304d\u904e\u304e\u308b\u3068\u3001\u6210\u529f\u3057\u306b\u304f\u3044\u3088\u3046\u3060\")","fd57d6f6":"print('launched\u6bce\u306bState\u3068\u306e\u76f8\u95a2\u3092\u30b0\u30e9\u30d5\u5316\u3059\u308b')\nprint('launched\u306e\u6570\u304c\u591a\u3044\u306e\u3067\u3001\u5e74\u6708\u5225\u306b\u3059\u308b')\ndf_data_launched = df_data.copy()\ndf_data_launched['launched_YM'] = df_data_launched['launched'].apply(lambda x: x[0:7])\nlaunched_ = df_data_launched.groupby('launched_YM')\nlaunched_ = launched_['state'].value_counts(normalize=True).unstack()\n#launched_ = launched_.sort_values('launched_YM',ascending=False)\nax = launched_[['successful','failed','live','canceled','suspended','undefined']].plot(kind='barh', stacked=True,figsize=(13,30))\nplt.legend(loc='upper left')\nprint(\"\\n1970\u5e74\u306b\u958b\u59cb\u3057\u305f\u3082\u306e\u306f\u5931\u6557\u3001\u305d\u3082\u305d\u3082\u3001\u3053\u308c\u306f\u4ed6\u304b\u3089\u96e2\u308c\u305f\u7570\u5e38\u5024\u3068\u6271\u3046\u3079\u304d\u304b\")\nprint(\"2017\u5e7412\u6708\u4ee5\u964d\u958b\u59cb\u306fLive\u3001\u305d\u308c\u4ee5\u5916\u306e\u50be\u5411\u306f\u898b\u306b\u304f\u3044\")","ebe34d0a":"print('backers\u6bce\u306bState\u3068\u306e\u76f8\u95a2\u3092\u30b0\u30e9\u30d5\u5316\u3059\u308b')\nprint('backers\u306e\u6570\u304c\u591a\u3044\u306e\u3067\u30011000\u5358\u4f4d\u3067\u4e38\u3081\u3066\u76f8\u95a2\u3092\u898b\u308b')\ndf_data_backers = df_data.copy()\ndf_data_backers['backers_r'] = df_data_backers['backers'].apply(lambda x: round(x\/1000))\nbackers_ = df_data_backers.groupby('backers_r')\nbackers_ = backers_['state'].value_counts(normalize=True).unstack()\n#backers_ = backers_.sort_values('backers_r',ascending=False)\nax = backers_[['successful','failed','live','canceled','suspended','undefined']].plot(kind='barh', stacked=True,figsize=(13,20))\nplt.legend(loc='upper left')\nprint(\"\\nbackers\u304c\u4e00\u5b9a\u4ee5\u4e0a\u306b\u306a\u308b\u3068\u3001\u307b\u307c\u6210\u529f\u3057\u3066\u3044\u308b\")\nprint(\"100000\u4ee5\u4e0a\u306f\u9023\u7d9a\u6027\u306b\u4e4f\u3057\u3044\u306e\u3067\u5916\u308c\u5024\u3068\u3057\u3066\u6271\u3046\")","06d7352f":"print('country\u6bce\u306bState\u3068\u306e\u76f8\u95a2\u3092\u30b0\u30e9\u30d5\u5316\u3059\u308b')\ncountry_ = df_data.groupby('country')\ncountry_ = country_['state'].value_counts(normalize=True).unstack()\ncountry_ = country_.sort_values(by=['successful'],ascending=True)\ncountry_[['successful','failed','live','canceled','suspended','undefined']].plot(kind='barh', stacked=True,figsize=(13,7))\nprint(\"\\n\u6210\u529f\u3057\u3084\u3059\u3044\u56fd\u3068\u6210\u529f\u3057\u306b\u304f\u3044\u56fd\u304c\u5b58\u5728\u3059\u308b\u304c\u3001\")\nprint(\"Max\u306f40%\u8fd1\u304f\u3001Min\u306f20%\u4ee5\u4e0b\u3067\u5e45\u306f\u305d\u308c\u307b\u3069\u5927\u304d\u304f\u306a\u3044\")","7911fb80":"print('\u6b20\u6e2c\u5024\u3092\u78ba\u8a8d\u3059\u308b')\nprint(df_data.isnull().any(axis=0))\nprint('\\n\u8003\u5bdf')\nprint(\"\u6b20\u6e2c\u5024\u306fname\u3068usd pledged\u306b\u3042\u308b\")\nprint(\"\u7570\u5e38\u5024\/\u5916\u308c\u5024\u306f\u3001\u4e0a\u8a18\u307e\u3067\u306e\u5206\u6790\u3067country\u3068launched\u3068backers\u306b\u89b3\u5bdf\u3055\u308c\u3066\u3044\u308b\")\nprint(\"\u3053\u308c\u3089\u306e\u6b20\u6e2c\u5024\/\u7570\u5e38\u5024\/\u5916\u308c\u5024\u306f\u3001\u8aac\u660e\u5909\u6570\u304b\u3089\u306f\u9664\u5916\u3059\u308b\")","34f2eff7":"def make_test_data(show_comment=False, \\\n                   show_data=False, \\\n                   stdsc=False, \\\n                   mms=False, \\\n                   decorre=False, \\\n                   show_decorre_detail = False, \\\n                   whitening=False, \\\n                   launched_del=True, \\\n                   deadline_del=True, \\\n                   usd_goal_real_del=True, \\\n                   category_keep=True, \\\n                   country_keep=True \\\n                  ):\n    if(show_comment):\n        print('\u6210\u529f\u304b\u3069\u3046\u304b\u3092\u5224\u65ad\u3059\u308b\u305f\u3081\u3001state\u304c\"Successful\"\u306a\u308bTrue\u3001\u305d\u308c\u4ee5\u5916\u306fFalse\u3068\u3059\u308b')\n    df_data_test = df_data.copy()\n    df_data_test['Success'] = df_data_test['state'] == \"successful\"\n\n    # \u30ab\u30c6\u30b4\u30ea\u30fc\u5909\u6570\u3092\u30c0\u30df\u30fc\u5909\u6570\u306b\u5909\u63db\n    if(category_keep):\n        df_data_dummy1 = pd.get_dummies(df_data_test['category'])\n        df_data_test = pd.merge(df_data_test, df_data_dummy1, left_index=True, right_index=True)\n    if(country_keep):\n        df_data_dummy2 = pd.get_dummies(df_data_test['country'])\n        df_data_test = pd.merge(df_data_test, df_data_dummy2, left_index=True, right_index=True)\n\n    # \u6b20\u6e2c\u5024\/\u7570\u5e38\u5024\/\u5916\u308c\u5024\u3092\u524a\u9664\u3059\u308b\n    df_data_test = df_data_test[df_data_test['country'] != 'N,0\"']\n    df_data_test = df_data_test[df_data_test['launched'] > '2000-01-01']\n    df_data_test = df_data_test[df_data_test['backers'] < 100000]\n\n    #\u65e5\u4ed8\u95a2\u9023\u306e\u5909\u63db\u51e6\u7406\n    df_data_test['launched'] = pd.to_datetime(df_data_test['launched'].apply(lambda x: x[0:10])).map(pd.Timestamp.timestamp)\n    df_data_test['deadline'] = pd.to_datetime(df_data_test['deadline']).map(pd.Timestamp.timestamp)\n\n    # \u6a19\u6e96\u5316\u3068\u306f\u3001\u5e73\u5747\u3092\u5f15\u3044\u3066\u3001\u6a19\u6e96\u504f\u5dee\u3067\u5272\u308b\u64cd\u4f5c\n    if(stdsc):\n        stdsc_ = StandardScaler()\n        df_data_test[['goal']] = stdsc_.fit_transform(df_data_test[['goal']].values)\n        df_data_test[['usd_goal_real']] = stdsc_.fit_transform(df_data_test[['usd_goal_real']].values)\n        df_data_test[['backers']] = stdsc_.fit_transform(df_data_test[['backers']].values)\n        df_data_test[['launched']] = stdsc_.fit_transform(df_data_test[['launched']].values)\n        df_data_test[['deadline']] = stdsc_.fit_transform(df_data_test[['deadline']].values)\n\n    # \u6b63\u898f\u5316\u3068\u306f\u3001\u5168\u30c7\u30fc\u30bf\u30920-1\u306e\u7bc4\u56f2\u306b\u304a\u3055\u3081\u308b\u64cd\u4f5c\n    if(mms):\n        mms_ = MinMaxScaler()\n        df_data_test[['goal']] = mms_.fit_transform(df_data_test[['goal']].values)\n        df_data_test[['usd_goal_real']] = mms_.fit_transform(df_data_test[['usd_goal_real']].values)\n        df_data_test[['backers']] = mms_.fit_transform(df_data_test[['backers']].values)\n        df_data_test[['launched']] = mms_.fit_transform(df_data_test[['launched']].values)\n        df_data_test[['deadline']] = mms_.fit_transform(df_data_test[['deadline']].values)\n\n    if(decorre):\n        if(show_decorre_detail):\n            # goal\u3068usd_goal_real\u3092\u767d\u8272\u5316\n            print('goal\u3068usd_goal_real\u306e\u76f8\u95a2\u4fc2\u6570: {:.3f}'.format(np.corrcoef(df_data_test['goal'], df_data_test['usd_goal_real'])[0,1]))\n        #  \u7121\u76f8\u95a2\u5316\u3092\u884c\u3046\u305f\u3081\u306e\u4e00\u9023\u306e\u51e6\u7406\n        cov = np.cov(df_data_test[['goal','usd_goal_real']], rowvar=0) # \u5206\u6563\u30fb\u5171\u5206\u6563\u3092\u6c42\u3081\u308b\n        _, S = np.linalg.eig(cov)           # \u5206\u6563\u5171\u5206\u6563\u884c\u5217\u306e\u56fa\u6709\u30d9\u30af\u30c8\u30eb\u3092\u7528\u3044\u3066\n        df_data_test[['goal','usd_goal_real']] = np.dot(S.T, df_data_test[['goal','usd_goal_real']].T).T #\u30c7\u30fc\u30bf\u3092\u7121\u76f8\u95a2\u5316\n        if(show_decorre_detail):\n            print('\u767d\u8272\u5316\u5f8c\u306egoal\u3068usd_goal_real\u306e\u76f8\u95a2\u4fc2\u6570: {:.3f}'.format(np.corrcoef(df_data_test['goal'], df_data_test['usd_goal_real'])[0,1]))\n    if(whitening):\n        stdsc_ = StandardScaler()\n        df_data_test[['usd_goal_real']] = stdsc_.fit_transform(df_data_test[['usd_goal_real']].values)\n        df_data_test[['goal']] = stdsc_.fit_transform(df_data_test[['goal']].values)\n\n    # \u4e0d\u8981\u306a\u5217\u3092\u524a\u9664\u3059\u308b\n    df_data_test = df_data_test.drop(['ID','name','category','main_category','currency'], axis=1)\n    df_data_test = df_data_test.drop(['state','country','pledged','usd pledged','usd_pledged_real'], axis=1)\n    if(launched_del):\n        df_data_test = df_data_test.drop(['launched'], axis=1)\n    if(deadline_del):\n        df_data_test = df_data_test.drop(['deadline'], axis=1)\n    if(usd_goal_real_del):\n        df_data_test = df_data_test.drop(['usd_goal_real'], axis=1)\n\n    if(show_data):\n         display(df_data_test.head())\n         df_data_test.describe()\n\n    return df_data_test\n\ndef logistic_(df_data_test):\n    y = df_data_test['Success'].values\n    X = df_data_test.drop('Success', axis=1).values\n    clf = SGDClassifier(loss='log', penalty='none', fit_intercept=True, random_state=1234)\n    clf.fit(X, y)\n    y_est = clf.predict(X) # \u30e9\u30d9\u30eb\u3092\u4e88\u6e2c\n    return y, y_est\n\ndef cross_valid(df_data_test, \\\n                show_lap=False, \\\n                SGDClass_use = True, \\\n                lasso_use=False, \\\n                lasso_alpha=0, \\\n                ridge_use=False, \\\n                ridge_alpha=0 \\\n               ):\n    # \u7d5e\u3063\u305f\u8aac\u660e\u5909\u6570\u3092\u4f7f\u3063\u3066\uff0c\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\n    y = df_data_test['Success'].values\n    X = df_data_test.drop('Success', axis=1).values\n\n    n_split = 5 # \u30b0\u30eb\u30fc\u30d7\u6570\u3092\u8a2d\u5b9a\uff08\u4eca\u56de\u306f5\u5206\u5272\uff09\n    cross_valid_loss = 0\n    split_num = 1\n\n    # \u30c6\u30b9\u30c8\u5f79\u3092\u4ea4\u4ee3\u3055\u305b\u306a\u304c\u3089\u5b66\u7fd2\u3068\u8a55\u4fa1\u3092\u7e70\u308a\u8fd4\u3059\n    for train_idx, test_idx in KFold(n_splits=n_split, random_state=1234).split(X, y):\n        X_train, y_train = X[train_idx], y[train_idx] #\u5b66\u7fd2\u7528\u30c7\u30fc\u30bf\n        X_test, y_test = X[test_idx], y[test_idx]     #\u30c6\u30b9\u30c8\u7528\u30c7\u30fc\u30bf\n\n        if(SGDClass_use):\n            clf = SGDClassifier(loss='log', penalty='none', fit_intercept=True, random_state=1234)\n        if(lasso_use):\n            clf = Lasso(alpha=lasso_alpha)\n        if(ridge_use):\n            #clf = Ridge(alpha=ridge_alpha)\n            clf = RidgeClassifier(alpha=ridge_alpha)\n        clf.fit(X_train, y_train)\n\n        # \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3067\u30e9\u30d9\u30eb\u3092\u4e88\u6e2c\n        y_est_test = clf.predict(X_test)\n\n        if(show_lap):\n            # \u5bfe\u6570\u5c24\u5ea6\u3092\u8868\u793a\n            loss_ = -log_loss(y_test, y_est_test)\n            print(\"Fold %s\"%split_num)\n            print('\u5404\u56de\u306e\u5bfe\u6570\u5c24\u5ea6 = {:.3f}'.format(loss_))\n            cross_valid_loss += loss_ #\u5f8c\u3067\u5e73\u5747\u3092\u53d6\u308b\u305f\u3081\u306bloss_\u3092\u52a0\u7b97\n\n        if(split_num==1):\n            y_ = y_test\n            y_est = y_est_test\n        else:\n            y_ = np.append(y_, y_test)\n            y_est = np.append(y_est, y_est_test)\n            #y_ = y_.append(y_test)\n            #y_est = y_est.append(y_est_test)\n            \n        split_num += 1\n\n    return y_, y_est\n        \n\ndef show_results(y, y_est):\n    # \u5bfe\u6570\u5c24\u5ea6\u3092\u8868\u793a\n    print('\u5bfe\u6570\u5c24\u5ea6 = {:.3f}'.format(-log_loss(y, y_est)))\n\n    # \u6b63\u7b54\u7387\u3092\u8a08\u7b97\n    accuracy =  accuracy_score(y, y_est)\n    # Precision, Recall, F1-score\u3092\u8a08\u7b97, \u8868\u793a\n    precision, recall, f1_score, _ = precision_recall_fscore_support(y, y_est)\n    print('\u6b63\u7b54\u7387\uff08Accuracy\uff09 = {:.3f}%, '.format(100 * accuracy), \\\n          '\u9069\u5408\u7387\uff08Precision\uff09 = {:.3f}%, '.format(100 * precision[0]) \\\n         )\n    print('\u518d\u73fe\u7387\uff08Recall\uff09 = {:.3f}%, '.format(100 * recall[0]), \\\n          'F1\u5024\uff08F1-score\uff09 = {:.3f}%'.format(100 * f1_score[0])\\\n         )\n\n    # \u4e88\u6e2c\u5024\u3068\u6b63\u89e3\u306e\u30af\u30ed\u30b9\u96c6\u8a08\n    print('\u4e88\u6e2c\u5024\u3068\u6b63\u89e3\u306e\u30af\u30ed\u30b9\u96c6\u8a08')\n    conf_mat = pd.DataFrame(confusion_matrix(y, y_est), index=['\u6b63\u89e3 = 0', '\u6b63\u89e3 = 1'], columns=['\u4e88\u6e2c\u5024 = 0', '\u4e88\u6e2c\u5024 = 1'])\n    print(conf_mat)\n    ","168635c2":"# \u30c7\u30fc\u30bf\u4f5c\u6210\u95a2\u6570\u3092\u547c\u3076\ndf_data_test_4 = make_test_data(show_comment=True, show_data=True)\n\n# \u7d5e\u3063\u305f\u8aac\u660e\u5909\u6570\u3092\u4f7f\u3063\u3066\uff0c\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\n# \u57fa\u672c\u7684\u306b\u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u3067\u8a55\u4fa1\u3059\u308b\ny, y_est = cross_valid(df_data_test_4)\n\n# \u7d50\u679c\u3092\u8868\u793a\nshow_results(y, y_est)","f25dc49c":"print('a. goal\u3068backers\u306b\u5bfe\u3057\u3066\u6a19\u6e96\u5316\u3068\u6b63\u898f\u5316\u3092\u884c\u3046\u3002')\nprint('\u307e\u305a\u306f\u6a19\u6e96\u5316\u304b\u3089')\n# \u30c7\u30fc\u30bf\u4f5c\u6210\u95a2\u6570\u3092\u547c\u3076\ndf_data_test_8_3a1 = make_test_data(show_data=True, stdsc=True, mms=False)\n# \u7d5e\u3063\u305f\u8aac\u660e\u5909\u6570\u3092\u4f7f\u3063\u3066\uff0c\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\ny, y_est = cross_valid(df_data_test_8_3a1)\n# \u7d50\u679c\u3092\u8868\u793a\nshow_results(y, y_est)\n\nprint('\\n\u6b21\u306b\u6b63\u898f\u5316')\n# \u30c7\u30fc\u30bf\u4f5c\u6210\u95a2\u6570\u3092\u547c\u3076\ndf_data_test_8_3a2 = make_test_data(show_data=True, stdsc=False, mms=True)\n# \u7d5e\u3063\u305f\u8aac\u660e\u5909\u6570\u3092\u4f7f\u3063\u3066\uff0c\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\ny, y_est = logistic_(df_data_test_8_3a2)\n# \u7d50\u679c\u3092\u8868\u793a\nshow_results(y, y_est)\n\nprint('\\n\u7d50\u679c\u3001\u6b63\u898f\u5316\u3068\u6a19\u6e96\u5316\u306e\u3069\u3061\u3089\u3082\u7cbe\u5ea6\u304c\u60aa\u5316\u3057\u305f\u3002')\nprint('\u4ee5\u964d\u3001\u6b63\u898f\u5316\u30fb\u6a19\u6e96\u5316\u7121\u3057\u3092\u30c7\u30d5\u30a9\u30eb\u30c8\u3068\u3059\u308b\u3002')","71ab820d":"print('b. goal\u3068usd_goal_real\u3092\u7121\u76f8\u95a2\u5316\u3042\u308b\u3044\u306f\u767d\u8272\u5316\u3057\u3001usd_goal_real\u3092\u8aac\u660e\u5909\u6570\u3068\u3057\u3066\u52a0\u3048\u308b')\nprint('\u307e\u305a\u306f\u7121\u76f8\u95a2\u5316\u304b\u3089')\n\n# \u30c7\u30fc\u30bf\u4f5c\u6210\u95a2\u6570\u3092\u547c\u3076\ndf_data_test_8_3b1 = make_test_data(show_data=True, decorre=True, show_decorre_detail = True, whitening=False, usd_goal_real_del=False)\n# \u7d5e\u3063\u305f\u8aac\u660e\u5909\u6570\u3092\u4f7f\u3063\u3066\uff0c\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\ny, y_est = cross_valid(df_data_test_8_3b1)\n# \u7d50\u679c\u3092\u8868\u793a\nshow_results(y, y_est)\n\nprint('\\n\u6b21\u306b\u767d\u8272\u5316')\n# \u30c7\u30fc\u30bf\u4f5c\u6210\u95a2\u6570\u3092\u547c\u3076\ndf_data_test_8_3b2 = make_test_data(show_data=True, decorre=True, show_decorre_detail = True, whitening=True, usd_goal_real_del=False)\n# \u7d5e\u3063\u305f\u8aac\u660e\u5909\u6570\u3092\u4f7f\u3063\u3066\uff0c\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\ny, y_est = cross_valid(df_data_test_8_3b2)\n# \u7d50\u679c\u3092\u8868\u793a\nshow_results(y, y_est)\n\n#\u7d50\u679c\nprint(\"\\n\u7121\u76f8\u95a2\u5316\u306e\u7d50\u679c\u3001\u82e5\u5e72\u7cbe\u5ea6\u304c\u5411\u4e0a\u3057\u305f\u304c\u3001\u767d\u8272\u5316\u306e\u7d50\u679c\u3001\u7cbe\u5ea6\u306f\u60aa\u5316\u3057\u305f\u3002\")\nprint(\"\u4ee5\u964d\u3001\u7121\u76f8\u95a2\u5316\u3092\u30c7\u30d5\u30a9\u30eb\u30c8\u3068\u3059\u308b\")","24bc27b9":"print('c. Ridge\uff08L2\u6b63\u5247\u5316\uff09\u3092\u4f8b\u306b\u6b63\u5247\u5316\u3092\u884c\u3063\u3066\u307f\u308b')\n\n# \u30c7\u30fc\u30bf\u4f5c\u6210\u95a2\u6570\u3092\u547c\u3076\ndf_data_test_8_3c1 = make_test_data(decorre=True, whitening=False, usd_goal_real_del=False)\n\n# Test\u7528\u30c7\u30fc\u30bf\u3092\u5206\u96e2\u3059\u308b\ntest_size = 0.2        # \u5168\u30c7\u30fc\u30bf\u306e\u3046\u3061\u3001\u4f55%\u3092\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u3059\u308b\u304b\uff08\u4eca\u56de\u306f20%\u306b\u8a2d\u5b9a\uff09\ndataset_train, dataset_test, dummy_train, dummy_test = \\\ntrain_test_split(df_data_test_8_3c1, df_data_test_8_3c1, test_size=test_size, random_state=1234) # \u30db\u30fc\u30eb\u30c9\u30a2\u30a6\u30c8\u6cd5\u3092\u5b9f\u884c\uff08\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306f\u30e9\u30f3\u30c0\u30e0\u9078\u629e\uff09\n\n# \u30d1\u30e9\u30e1\u30fc\u30bf\u691c\u8a3c\u7528\u306e\u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u65bd\nalphas = [0, 10, 103, 1000, 10000] #alpha(\u6570\u5f0f\u3067\u306f\u03bb)\u306e\u5024\u30924\u3064\u6307\u5b9a\u3059\u308b\nn_split = 5 # \u30b0\u30eb\u30fc\u30d7\u6570\u3092\u8a2d\u5b9a\uff08\u4eca\u56de\u306f5\u5206\u5272\uff09\ncross_valid_losses = []\nprint(\"Alphas = \", alphas)\n\nfor alpha in alphas:\n    cross_valid_loss = 0\n    split_num = 1\n\n    # \u30c6\u30b9\u30c8\u5f79\u3092\u4ea4\u4ee3\u3055\u305b\u306a\u304c\u3089\u5b66\u7fd2\u3068\u8a55\u4fa1\u3092\u7e70\u308a\u8fd4\u3059\n    y, y_est = cross_valid(dataset_train, SGDClass_use=False, ridge_use=True, ridge_alpha=alpha)\n    # \u7d50\u679c\u3092\u8868\u793a\n    print(\"\\nAlpha = %s\"%alpha)\n    show_results(y, y_est)\n\n# Best Score\u3092\u8868\u793a\nalpha=103\nprint(\"\\nBest Alpha = %s\"%alpha)\ny, y_est = cross_valid(dataset_test, SGDClass_use=False, ridge_use=True, ridge_alpha=alpha)\nshow_results(y, y_est)\n    \n#\u7d50\u679c\nprint('\u5e45\u5e83\u304f\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8a66\u3057\u305f\u7d50\u679c\u3001alpha=103\u306e\u6642\u306b\u5bfe\u6570\u5c24\u5ea6\u304c\u6700\u3082\u5c0f\u3055\u304f\u306a\u3063\u305f\u3002') \nprint('\u7d50\u679c\u3068\u3057\u3066\u3001\u4eca\u307e\u3067\u306e\u7d50\u679c\u3088\u308a\u3082\u7cbe\u5ea6\u306f\u4e0b\u304c\u3063\u3066\u3044\u308b') ","d93f3cc1":"# \u30c7\u30fc\u30bf\u4f5c\u6210\u95a2\u6570\u3092\u547c\u3076\ndf_data_test_9_4 = make_test_data(decorre=True, show_data=True, usd_goal_real_del=False, category_keep=False, country_keep=False)\n#make_test_data(decorre=True, usd_goal_real_del=False)\n\n# \u7d5e\u3063\u305f\u8aac\u660e\u5909\u6570\u3092\u4f7f\u3063\u3066\uff0cSVM\u3092\u5b9f\u65bd\ny = df_data_test_9_4['Success'].values\nX = df_data_test_9_4.drop('Success', axis=1).values\n\n# Test\u7528\u30c7\u30fc\u30bf\u3092\u5206\u96e2\u3059\u308b\ntest_size = 0.98        # \u5168\u30c7\u30fc\u30bf\u306e\u3046\u3061\u3001\u4f55%\u3092\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u3059\u308b\u304b\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=1234) # \u30db\u30fc\u30eb\u30c9\u30a2\u30a6\u30c8\u6cd5\u3092\u5b9f\u884c\uff08\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306f\u30e9\u30f3\u30c0\u30e0\u9078\u629e\uff09\n\n# SVM\u306e\u5b9f\u884c\nC = 5\nclf = SVC(C=C, kernel=\"rbf\")\nclf.fit(X_train, y_train)  \n\ny_test_est = clf.predict(X_test)\nshow_results(y_test, y_test_est)\n\n#\u7d50\u679c\nprint('\\n\u30c7\u30fc\u30bf\u9805\u76ee\u30fb\u30c7\u30fc\u30bf\u6570\u3092\u7d5e\u3063\u305f\u3068\u3053\u308d\u3001\u3088\u3046\u3084\u304f\u30b5\u30dd\u30fc\u30c8\u30d9\u30af\u30c8\u30eb\u30de\u30b7\u30f3\u304c\u52d5\u3044\u305f') \nprint('\\n\u30c7\u30fc\u30bf\u304c\u5c11\u306a\u3044\u305f\u3081\u304b\u3001\u305d\u3082\u305d\u3082\u306e\u6027\u8cea\u304b\u3001\u7cbe\u5ea6\u306f\u4f4e\u3044') ","db8f9b6f":"print('10-1-1. \u30e9\u30c3\u30d1\u30fc\u6cd5\u3092\u7528\u3044\u308b')\n# \u30c7\u30fc\u30bf\u4f5c\u6210\u95a2\u6570\u3092\u547c\u3076\ndf_data_test_10_1_1 = make_test_data(decorre=True, \\\n                                     show_data=True, \\\n                                     mms=True, \\\n                                     launched_del=False, \\\n                                     deadline_del=False, \\\n                                     usd_goal_real_del=False, \\\n                                     category_keep=False, \\\n                                     country_keep=False)\n\nprint('\u30e9\u30c3\u30d1\u30fc\u6cd5\u4f7f\u7528\u524d')\ny = df_data_test_10_1_1['Success'].values\nX = df_data_test_10_1_1.drop('Success', axis=1).values\ny, y_est = cross_valid(df_data_test_10_1_1)\nshow_results(y, y_est)\n\n# estimator\u306b\u30e2\u30c7\u30eb\u3092\u30bb\u30c3\u30c8\nestimator = SGDClassifier()\n# RFECV\u306f\u4ea4\u5dee\u691c\u8a3c\u306b\u3088\u3063\u3066\u30b9\u30c6\u30c3\u30d7\u30ef\u30a4\u30ba\u6cd5\u306b\u3088\u308b\u7279\u5fb4\u9078\u629e\u3092\u884c\u3046\n# cv\u306b\u306fFold\uff08=\u30b0\u30eb\u30fc\u30d7\uff09\u306e\u6570\uff0cscoring\u306b\u306f\u8a55\u4fa1\u6307\u6a19\u3092\u6307\u5b9a\u3059\u308b\n# \u4eca\u56de\u306f\u56de\u5e30\u306a\u306e\u3067neg_mean_absolute_error\u3092\u8a55\u4fa1\u6307\u6a19\u306b\u6307\u5b9a\uff08\u5206\u985e\u306a\u3089accuracy\uff09\nrfecv = RFECV(estimator, cv=5, scoring='accuracy')\n\n# fit\u3067\u7279\u5fb4\u9078\u629e\u3092\u5b9f\u884c\nrfecv.fit(X, y)\n# \u7279\u5fb4\u306e\u30e9\u30f3\u30ad\u30f3\u30b0\u3092\u8868\u793a\uff081\u304c\u6700\u3082\u91cd\u8981\u306a\u7279\u5fb4\uff09\nprint('\\nFeature ranking: \\n{}'.format(rfecv.ranking_))\n\n# bool\u578b\u306e\u914d\u5217\u306b ~ \u3092\u3064\u3051\u308b\u3068True\u3068False\u3092\u53cd\u8ee2\u3055\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u308b\n# \u3053\u3053\u3067True\u306b\u306a\u3063\u3066\u3044\u308b\u7279\u5fb4\u304c\u524a\u9664\u3057\u3066\u3082\u3088\u3044\u7279\u5fb4\nremove_idx = ~rfecv.support_\nprint(remove_idx)\n\n# \u524a\u9664\u3057\u3066\u3082\u3088\u3044\u7279\u5fb4\u306e\u540d\u524d\u3092\u53d6\u5f97\u3059\u308b\nremove_feature = df_data_test_10_1_1.drop('Success', axis=1).columns[remove_idx]\nprint('\u524a\u9664\u3057\u3066\u3082\u3088\u3044\u7279\u5fb4\u91cf\u306f\u3001', remove_feature)\n\n# drop\u95a2\u6570\u3067\u7279\u5fb4\u3092\u524a\u9664\ndf_data_test_10_1_1b = df_data_test_10_1_1.drop(remove_feature, axis=1)\ndisplay(df_data_test_10_1_1b.head())\n\nprint('\u30e9\u30c3\u30d1\u30fc\u6cd5\u4f7f\u7528\u5f8c')\ny, y_est = cross_valid(df_data_test_10_1_1b)\nshow_results(y, y_est)\n\nprint('\\n\u30e9\u30c3\u30d1\u30fc\u6cd5\u306b\u3088\u308a\u3001\u9805\u76ee\u3092\u524a\u9664\u3057\u3066\u3082\u3001\u7cbe\u5ea6\u306b\u3042\u307e\u308a\u9055\u3044\u306e\u51fa\u306a\u3044\u3053\u3068\u304c\u78ba\u8a8d\u3067\u304d\u305f\u3002')","c28865c4":"print('10-1-2. \u57cb\u3081\u8fbc\u307f\u6cd5\u3092\u7528\u3044\u308b')\n# \u30c7\u30fc\u30bf\u4f5c\u6210\u95a2\u6570\u3092\u547c\u3076\ndf_data_test_10_1_2 = make_test_data(decorre=True, \\\n                                     show_data=True, \\\n                                     mms=True, \\\n                                     launched_del=False, \\\n                                     deadline_del=False, \\\n                                     usd_goal_real_del=False, \\\n                                     category_keep=False, \\\n                                     country_keep=False)\n\nprint('\u57cb\u3081\u8fbc\u307f\u6cd5\u4f7f\u7528\u524d')\ny = df_data_test_10_1_2['Success'].values\nX = df_data_test_10_1_2.drop('Success', axis=1).values\ny, y_est = cross_valid(df_data_test_10_1_2)\nshow_results(y, y_est)\n\n# estimator\u306b\u30e2\u30c7\u30eb\u3092\u30bb\u30c3\u30c8\n# LassoCV\u3092\u4f7f\u3063\u3066\u3001\u6b63\u5247\u5316\u306e\u5f37\u3055\u306f\u81ea\u52d5\u6c7a\u5b9a\nestimator = LassoCV(normalize=True, cv=10)\n\n# \u30e2\u30c7\u30eb\u306e\u60c5\u5831\u3092\u4f7f\u3063\u3066\u7279\u5fb4\u9078\u629e\u3092\u884c\u3046\u5834\u5408\u306f\u3001SelectFromModel\u3092\u4f7f\u3046\n# \u4eca\u56de\u306f\u4fc2\u6570\u304c0.1\u4ee5\u4e0b\u3067\u3042\u308b\u7279\u5fb4\u3092\u524a\u9664\u3059\u308b\n# \u4fc2\u6570\u306e\u3057\u304d\u3044\u5024\u306fthreshold\u3067\u6307\u5b9a\u3059\u308b\nsfm = SelectFromModel(estimator, threshold=0.1)\n\n# fit\u3067\u7279\u5fb4\u9078\u629e\u3092\u5b9f\u884c\nsfm.fit(X, y)\n\n# get_support\u95a2\u6570\u3067\u4f7f\u7528\u3059\u308b\u7279\u5fb4\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u4f7f\u7528\n# True\u306b\u306a\u3063\u3066\u3044\u308b\u7279\u5fb4\u304c\u4f7f\u7528\u3059\u308b\u7279\u5fb4\nsfm.get_support()\n\n# bool\u578b\u306e\u914d\u5217\u306b ~ \u3092\u3064\u3051\u308b\u3068True\u3068False\u3092\u53cd\u8ee2\u3055\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u308b\n# \u3053\u3053\u3067True\u306b\u306a\u3063\u3066\u3044\u308b\u7279\u5fb4\u304c\u524a\u9664\u3057\u3066\u3082\u3088\u3044\u7279\u5fb4\nremove_idx = ~sfm.get_support()\nprint(remove_idx)\n\n# \u524a\u9664\u3057\u3066\u3082\u3088\u3044\u7279\u5fb4\u306e\u540d\u524d\u3092\u53d6\u5f97\u3059\u308b\nremove_feature = df_data_test_10_1_1.drop('Success', axis=1).columns[remove_idx]\nprint('\u524a\u9664\u3057\u3066\u3082\u3088\u3044\u7279\u5fb4\u91cf\u306f\u3001', remove_feature)\n\n# LASSO\u3067\u5f97\u305f\u5404\u7279\u5fb4\u306e\u4fc2\u6570\u306e\u5024\u3092\u78ba\u8a8d\u3057\u3066\u307f\u3088\u3046\n# \u4fc2\u6570\u306e\u7d76\u5bfe\u5024\u3092\u53d6\u5f97\nabs_coef = np.abs(sfm.estimator_.coef_)\nprint(abs_coef)\n\n# \u4fc2\u6570\u3092\u68d2\u30b0\u30e9\u30d5\u3067\u8868\u793a\nplt.barh(np.arange(0, len(abs_coef)), abs_coef, tick_label=df_data_test_10_1_1.drop('Success', axis=1).columns.values)\nplt.show()\n\n# drop\u95a2\u6570\u3067\u7279\u5fb4\u3092\u524a\u9664\ndf_data_test_10_1_2b = df_data_test_10_1_2.drop(remove_feature, axis=1)\ndisplay(df_data_test_10_1_2b.head())\n\nprint('\u57cb\u3081\u8fbc\u307f\u6cd5\u4f7f\u7528\u5f8c')\ny, y_est = cross_valid(df_data_test_10_1_2b)\nshow_results(y, y_est)\n\nprint('\\n\u57cb\u3081\u8fbc\u307f\u6cd5\u306b\u3088\u308a\u3001\u9805\u76ee\u3092\u524a\u9664\u3057\u3066\u3082\u3001\u7cbe\u5ea6\u306b\u9055\u3044\u306e\u51fa\u306a\u3044\u3053\u3068\u304c\u78ba\u8a8d\u3067\u304d\u305f\u3002')","b6e63bdc":"print('10-2-1. \u6c7a\u5b9a\u6728\u3092\u7528\u3044\u308b')\n# \u30c7\u30fc\u30bf\u4f5c\u6210\u95a2\u6570\u3092\u547c\u3076\ndf_data_test_10_2_1 = make_test_data(decorre=True, \\\n                                     show_data=True, \\\n                                     usd_goal_real_del=False, \\\n                                     category_keep=False, \\\n                                     country_keep=False)\n\n# Test\u7528\u30c7\u30fc\u30bf\u3092\u5206\u96e2\u3059\u308b\ny = df_data_test_10_2_1['Success'].values\nX = df_data_test_10_2_1.drop('Success', axis=1).values\ntest_size = 0.9995        # \u5168\u30c7\u30fc\u30bf\u306e\u3046\u3061\u3001\u4f55%\u3092\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u3059\u308b\u304b\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=1234) # \u30db\u30fc\u30eb\u30c9\u30a2\u30a6\u30c8\u6cd5\u3092\u5b9f\u884c\uff08\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306f\u30e9\u30f3\u30c0\u30e0\u9078\u629e\uff09\n\nclf = DecisionTreeClassifier(criterion=\"gini\", max_depth=None, min_samples_split=3, min_samples_leaf=3, random_state=1234)\nclf = clf.fit(X_train, y_train)\nprint(\"score=\", clf.score(X_train, y_train))\nprint(clf.predict(X_test)) #\u4e88\u6e2c\u3057\u305f\u3044\u5834\u5408\n\n# \u8aac\u660e\u5909\u6570\u306e\u91cd\u8981\u5ea6\u3092\u51fa\u529b\u3059\u308b\n# scikit-learn\u3067\u7b97\u51fa\u3055\u308c\u308b\u91cd\u8981\u5ea6\u306f\u3001\u3042\u308b\u8aac\u660e\u5909\u6570\u306b\u3088\u308b\u4e0d\u7d14\u5ea6\u306e\u6e1b\u5c11\u91cf\u5408\u8a08\u3067\u3042\u308b\u3002\nprint(clf.feature_importances_)\npd.DataFrame(clf.feature_importances_, index=[\"goal\",\"backers\",\"usd_goal_real\"]).plot.bar(figsize=(7,2))\nplt.ylabel(\"Importance\")\nplt.xlabel(\"Features\")\nplt.show()\n\n# \u6c7a\u5b9a\u6728\u306e\u63cf\u753b\ndot_data = StringIO() #dot\u30d5\u30a1\u30a4\u30eb\u60c5\u5831\u306e\u683c\u7d0d\u5148\nexport_graphviz(clf, out_file='tree_limited.dot',  \n                     feature_names=[\"goal\",\"backers\",\"usd_goal_real\"],  \n                     class_names=[\"0\",\"1\"],  \n                     filled=True, rounded=True,  \n                     special_characters=True) \n#graph = pydotplus.graph_from_dot_data(dot_data.getvalue()) \n#Image(graph.create_png())\n!dot -Tpng tree_limited.dot -o tree_limited.png -Gdpi=600\nImage(filename = 'tree_limited.png')\n","9c6c5e76":"# \u6c7a\u5b9a\u6728\u304c\u4e0a\u624b\u304f\u63cf\u3051\u305f\u306e\u3067\u3001\n#\u6539\u3081\u3066\u300180%\u306e\u30c7\u30fc\u30bf\u3092\u7528\u3044\u3066\u5b66\u7fd2\n# \u30c7\u30fc\u30bf\u4f5c\u6210\u95a2\u6570\u3092\u547c\u3076\ndf_data_test_10_2_1 = make_test_data(decorre=True, \\\n                                     show_data=False, \\\n                                     usd_goal_real_del=False, \\\n                                     category_keep=False, \\\n                                     country_keep=False)\n\n# Test\u7528\u30c7\u30fc\u30bf\u3092\u5206\u96e2\u3059\u308b\ny = df_data_test_10_2_1['Success'].values\nX = df_data_test_10_2_1.drop('Success', axis=1).values\n\ntest_size = 0.2        # \u5168\u30c7\u30fc\u30bf\u306e\u3046\u3061\u3001\u4f55%\u3092\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u3059\u308b\u304b\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=1234) # \u30db\u30fc\u30eb\u30c9\u30a2\u30a6\u30c8\u6cd5\u3092\u5b9f\u884c\uff08\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306f\u30e9\u30f3\u30c0\u30e0\u9078\u629e\uff09\nclf = DecisionTreeClassifier(criterion=\"gini\", max_depth=None, min_samples_split=3, min_samples_leaf=3, random_state=1234)\nclf = clf.fit(X_train, y_train)\n\ny_est = clf.predict(X_test) # \u30e9\u30d9\u30eb\u3092\u4e88\u6e2c\nshow_results(y_test, y_est)\n\nprint('\\n\u6c7a\u5b9a\u6728\u306b\u3088\u308a\u3001Accuracy91%\u8d85\u306e\u7cbe\u5ea6\u3092\u5f97\u308b\u3053\u3068\u304c\u3067\u304d\u305f')","872b97c9":"print('10-2-2. \u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u3092\u7528\u3044\u308b')\n# \u30c7\u30fc\u30bf\u4f5c\u6210\u95a2\u6570\u3092\u547c\u3076\ndf_data_test_10_2_1 = make_test_data(decorre=True, \\\n                                     show_data=True, \\\n                                     usd_goal_real_del=False, \\\n                                     category_keep=False, \\\n                                     country_keep=False)\n\n# Test\u7528\u30c7\u30fc\u30bf\u3092\u5206\u96e2\u3059\u308b\ny = df_data_test_10_2_1['Success'].values\nX = df_data_test_10_2_1.drop('Success', axis=1).values\ntest_size = 0.2        # \u5168\u30c7\u30fc\u30bf\u306e\u3046\u3061\u3001\u4f55%\u3092\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u3059\u308b\u304b\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=1234) # \u30db\u30fc\u30eb\u30c9\u30a2\u30a6\u30c8\u6cd5\u3092\u5b9f\u884c\uff08\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306f\u30e9\u30f3\u30c0\u30e0\u9078\u629e\uff09\n\n# clf = RandomForestClassifier(n_estimators=10, max_depth=2, criterion=\"gini\",\n                             # min_samples_leaf=2, min_samples_split=2, random_state=1234)\nclf = RandomForestClassifier(n_estimators=100, max_depth=5, criterion=\"gini\",\n                             min_samples_leaf=4, min_samples_split=4, random_state=1234)\nclf.fit(X_train, y_train)\nprint(\"score=\", clf.score(X_train, y_train))\n\n# \u8aac\u660e\u5909\u6570\u306e\u91cd\u8981\u5ea6\u3092\u51fa\u529b\u3059\u308b\n# scikit-learn\u3067\u7b97\u51fa\u3055\u308c\u308b\u91cd\u8981\u5ea6\u306f\u3001\u3042\u308b\u8aac\u660e\u5909\u6570\u306b\u3088\u308b\u4e0d\u7d14\u5ea6\u306e\u6e1b\u5c11\u91cf\u5408\u8a08\u3067\u3042\u308b\u3002\nprint(clf.feature_importances_)\npd.DataFrame(clf.feature_importances_, index=[\"goal\",\"backers\",\"usd_goal_real\"]).plot.bar(figsize=(7,2))\nplt.ylabel(\"Importance\")\nplt.xlabel(\"Features\")\nplt.show()\n\ny_est = clf.predict(X_test) # \u30e9\u30d9\u30eb\u3092\u4e88\u6e2c\nshow_results(y_test, y_est)\n\nprint('\\n\u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u306b\u3088\u308a\u3001\u6c7a\u5b9a\u6728\u3092\u8d85\u3048\u308b\u7cbe\u5ea6\u3092\u5f97\u308b\u3053\u3068\u304c\u3067\u304d\u305f')","637472fd":"print('10-2-3. \u30a2\u30c0\u30d6\u30fc\u30b9\u30c8\u3092\u7528\u3044\u308b')\n# \u30c7\u30fc\u30bf\u4f5c\u6210\u95a2\u6570\u3092\u547c\u3076\ndf_data_test_10_2_1 = make_test_data(decorre=True, \\\n                                     show_data=True, \\\n                                     usd_goal_real_del=False, \\\n                                     category_keep=False, \\\n                                     country_keep=False)\n\n# Test\u7528\u30c7\u30fc\u30bf\u3092\u5206\u96e2\u3059\u308b\ny = df_data_test_10_2_1['Success'].values\nX = df_data_test_10_2_1.drop('Success', axis=1).values\ntest_size = 0.2        # \u5168\u30c7\u30fc\u30bf\u306e\u3046\u3061\u3001\u4f55%\u3092\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u3059\u308b\u304b\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=1234) # \u30db\u30fc\u30eb\u30c9\u30a2\u30a6\u30c8\u6cd5\u3092\u5b9f\u884c\uff08\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306f\u30e9\u30f3\u30c0\u30e0\u9078\u629e\uff09\n\nclf = AdaBoostClassifier(DecisionTreeClassifier(max_depth=5,\n                                                                                 min_samples_leaf=2,\n                                                                                 min_samples_split=2, \n                                                                                 random_state=1234,\n                                                                                 criterion=\"gini\"),\n                                           n_estimators=100, random_state=1234)\nclf.fit(X_train, y_train)\nprint(\"score=\", clf.score(X_train, y_train))\n\n# \u8aac\u660e\u5909\u6570\u306e\u91cd\u8981\u5ea6\u3092\u51fa\u529b\u3059\u308b\n# scikit-learn\u3067\u7b97\u51fa\u3055\u308c\u308b\u91cd\u8981\u5ea6\u306f\u3001\u3042\u308b\u8aac\u660e\u5909\u6570\u306b\u3088\u308b\u4e0d\u7d14\u5ea6\u306e\u6e1b\u5c11\u91cf\u5408\u8a08\u3067\u3042\u308b\u3002\nprint(clf.feature_importances_)\npd.DataFrame(clf.feature_importances_, index=[\"goal\",\"backers\",\"usd_goal_real\"]).plot.bar(figsize=(7,2))\nplt.ylabel(\"Importance\")\nplt.xlabel(\"Features\")\nplt.show()\n\ny_est = clf.predict(X_test) # \u30e9\u30d9\u30eb\u3092\u4e88\u6e2c\nshow_results(y_test, y_est)\n\nprint('\\n\u30a2\u30c0\u30d6\u30fc\u30b9\u30c8\u306b\u3088\u308a\u3001\u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u3092\u8d85\u3048\u308b\u7cbe\u5ea6\u3092\u5f97\u308b\u3053\u3068\u304c\u3067\u304d\u305f')","41483371":"print('10-3. \u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u7528\u3044\u308b')\n# \u30c7\u30fc\u30bf\u4f5c\u6210\u95a2\u6570\u3092\u547c\u3076\ndf_data_test_10_3 = make_test_data(decorre=True, usd_goal_real_del=False)\n\n# Test\u7528\u30c7\u30fc\u30bf\u3092\u5206\u96e2\u3059\u308b\ny = df_data_test_10_3['Success'].values\nX = df_data_test_10_3.drop('Success', axis=1).values\ntest_size = 0.2        # \u5168\u30c7\u30fc\u30bf\u306e\u3046\u3061\u3001\u4f55%\u3092\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u3059\u308b\u304b\uff08\u4eca\u56de\u306f20%\u306b\u8a2d\u5b9a\uff09\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=1234) # \u30db\u30fc\u30eb\u30c9\u30a2\u30a6\u30c8\u6cd5\u3092\u5b9f\u884c\uff08\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306f\u30e9\u30f3\u30c0\u30e0\u9078\u629e\uff09\n\n# one-hot\u30d9\u30af\u30c8\u30eb\u306b\u5909\u63db\nfrom keras.utils import np_utils\ny_train = np_utils.to_categorical(y_train)\ny_test = np_utils.to_categorical(y_test)\n\n# \u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3059\u308b\nmodel = Sequential()\nmodel.add(Dense(6, activation='relu', input_dim=185))\nmodel.add(Dense(12, activation='relu'))\nmodel.add(Dense(24, activation='relu'))\nmodel.add(Dense(2, activation='softmax'))#\u6700\u7d42\u5c64\u306eactivation\u306f\u5909\u66f4\u3057\u306a\u3044\u3053\u3068\n# ------ \u6700\u9069\u5316\u624b\u6cd5 ------\nadam = Adam(lr=0.001)\nmodel.compile(loss='categorical_crossentropy',\n              optimizer=adam,\n              metrics=['accuracy'])\n\n# \u8a08\u7b97\u306e\u5b9f\u884c\nfit = model.fit(X_train, y_train,\n          epochs=300,\n          batch_size=3000,validation_data=(X_test, y_test))\n\n# \u5404epoch\u306b\u304a\u3051\u308b\u640d\u5931\u3068\u7cbe\u5ea6\u3092df\u306b\u5165\u308c\u308b\ndf = pd.DataFrame(fit.history)\n\n# \u30b0\u30e9\u30d5\u5316\ndf[[\"loss\", \"val_loss\"]].plot()\nplt.ylabel(\"loss\")\nplt.xlabel(\"epoch\")\nplt.show()\n\ndf[[\"acc\", \"val_acc\"]].plot()\nplt.ylabel(\"acc\")\nplt.xlabel(\"epoch\")\nplt.ylim([0,1.0])\nplt.show()\n\ny_test_est = np.array(np.argmax(model.predict(X_test),axis=1), dtype='bool')\ny_test = np.array(np.argmax(y_test,axis=1), dtype='bool')\nshow_results(y_test, y_test_est)\n\nprint('\\n\u7d50\u679c\u3001Accuracy\u304c92%\u8d85\u3068\u306a\u308a\u3001\u6700\u9ad8\u306e\u7cbe\u5ea6\u3092\u51fa\u3057\u305f')\nprint('Neural Network\u306f\u30b9\u30b4\u3044\uff01')","2f279c91":"#### 9-1. \u95a2\u6570\u5316\u3057\u3066\u7e70\u308a\u8fd4\u3057\u3092\u907f\u3051\u308b\n","16e06644":"#### 10-1. \u7279\u5fb4\u9078\u629e\u3092\u7528\u3044\u308b\n##### 10-1-1. \u30e9\u30c3\u30d1\u30fc\u6cd5\u3092\u7528\u3044\u308b\n##### 10-1-2. \u57cb\u3081\u8fbc\u307f\u6cd5\u3092\u7528\u3044\u308b\n","b9acf170":"## \u76ee\u7684\u5909\u6570\u3092\u8aac\u660e\u3059\u308b\u306e\u306b\u6709\u52b9\u305d\u3046\u306a\u8aac\u660e\u5909\u6570\u3092\u898b\u3064\u3051\u308b\n\n#### \u4e0a\u8a18\u306e\u7d50\u679c\u3092\u5143\u306b\u3001\u6210\u529f\uff08Successful\uff09\u306e\u5224\u65ad\u306b\u4f7f\u3048\u308b\u304b\u3092\u8003\u5bdf\n#### ID\uff1a\u25b3 \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u500b\u5225ID\u306a\u306e\u3067\u3001\u8aac\u660e\u5909\u6570\u3068\u3057\u3066\u5229\u7528\u3057\u306a\u3044\n#### name\uff1a\u25b3 \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u500b\u5225\u540d\u306a\u306e\u3067\u3001\u8aac\u660e\u5909\u6570\u3068\u3057\u3066\u5229\u7528\u3057\u306a\u3044\n#### category\uff1a\u25ce category\u306b\u3088\u308a\u6210\u529f\u7387\u306b\u5dee\u304c\u3042\u308a\u8aac\u660e\u5909\u6570\u3068\u3057\u3066\u6709\u52b9\n#### main_category\uff1a\u3007 main_category\u306fcategory\u3068\u76f8\u95a2\u304c\u3042\u308b\u306e\u3067\u3001category\u3067\u4ee3\u7528\u3059\u308b\n#### currency\uff1a\u3007 currency\u306fcountry\u3068\u76f8\u95a2\u304c\u3042\u308b\u306e\u3067\u3001country\u3067\u4ee3\u7528\u3059\u308b\n#### deadline\uff1a\u25b3 deadline\u3068\u6210\u529f\u7387\u306e\u95a2\u4fc2\u306f\u5224\u65ad\u3057\u306b\u304f\u3044\u3068\u898b\u3048\u308b\u306e\u3067\u3001\u8aac\u660e\u5909\u6570\u3068\u3057\u3066\u5229\u7528\u3057\u306a\u3044\n#### goal\uff1a\u25ce goal\u306b\u3088\u308a\u6210\u529f\u7387\u306b\u5dee\u304c\u3042\u308a\u8aac\u660e\u5909\u6570\u3068\u3057\u3066\u6709\u52b9\n#### launched\uff1a\u25b3 launch\u3068\u6210\u529f\u7387\u306e\u95a2\u4fc2\u306f\u5224\u65ad\u3057\u306b\u304f\u3044\u3068\u898b\u3048\u308b\u306e\u3067\u3001\u8aac\u660e\u5909\u6570\u3068\u3057\u3066\u5229\u7528\u3057\u306a\u3044\n#### pledged\uff1aX\n#### backers\uff1a\u25ce backers\u306b\u3088\u308a\u6210\u529f\u7387\u306b\u5dee\u304c\u3042\u308a\u8aac\u660e\u5909\u6570\u3068\u3057\u3066\u6709\u52b9\n#### country\uff1a\u25ce country\u306b\u3088\u308a\u6210\u529f\u7387\u306b\u5dee\u304c\u3042\u308a\u8aac\u660e\u5909\u66f4\u3068\u3057\u3066\u6709\u52b9\u3001\u305f\u3060\u3057\u3001\u5e45\u306f\u5c0f\u3055\u3044\u3002\n#### usd pledged\uff1aX\n#### usd_pledged_real\uff1aX\n#### usd_goal_real\uff1a\u3007 usd_goal_real\u306fgoal\u3068\u76f8\u95a2\u304c\u3042\u308b\u306e\u3067\u3001goal\u3067\u4ee3\u7528\u3059\u308b\n#### (\u25ce\uff1a\u8aac\u660e\u5909\u6570\u3068\u3057\u3066\u6709\u52b9\u306a\u306e\u3067\u63a1\u7528\u3001\u3007\uff1a\u8aac\u660e\u5909\u6570\u3068\u3057\u3066\u6709\u52b9\u305d\u3046\u3060\u304c\u76f8\u95a2\u3059\u308b\u5909\u6570\u304c\u3042\u308b\u306e\u3067\u63a1\u7528\u3057\u306a\u3044)\n#### (\u25b3\uff1a\u8aac\u660e\u5909\u6570\u3068\u3057\u3066\u6709\u52b9\u304b\u4e0d\u660e\u306a\u306e\u3067\u63a1\u7528\u3057\u306a\u3044\u3001X\uff1a\u9805\u76ee\u8aac\u660e\u306b\u8a18\u8f09\u306e\u901a\u308a\u3001\u8aac\u660e\u5909\u6570\u3068\u3057\u3066\u5229\u7528\u3057\u306a\u3044)\n\n### \u7d50\u679c\u3068\u3057\u3066\u3001category, goal, backers, country\u306e4\u3064\u3092\u8aac\u660e\u5909\u6570\u3068\u3057\u3066\u5229\u7528\u3059\u308b","23733f2c":"#### DAY2\u3067\u5b66\u3093\u3060\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u5229\u7528\u3057\u3066\u30e2\u30c7\u30eb\u3092\u3064\u304f\u308a\u3001DAY1\u5bbf\u984c\u63d0\u51fa\u6642\u306e\u7cbe\u5ea6\u3068\u6bd4\u8f03\u3059\u308b\n### a. goal\u3068backers\u306b\u5bfe\u3057\u3066\u6a19\u6e96\u5316\u3068\u6b63\u898f\u5316\u3092\u884c\u3046 (9-2. \u6a19\u6e96\u5316\u30fb\u6b63\u898f\u5316\u306e\u52b9\u679c\u3092\u898b\u308b)\n##### b. goal\u3068usd_goal_real\u3092\u767d\u8272\u5316\u3057\u3001usd_goal_real\u3092\u8aac\u660e\u5909\u6570\u3068\u3057\u3066\u52a0\u3048\u308b\n#### c. Ridge\uff08L2\u6b63\u5247\u5316\uff09\u3092\u4f8b\u306b\u6b63\u5247\u5316\u3092\u884c\u3063\u3066\u307f\u308b (9-3. \u6b63\u5247\u5316\u306e\u52b9\u679c\u3092\u898b\u308b)","c4de8b47":"#### DAY1\u3067\u5b66\u3093\u3060\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u5229\u7528\u3059\u308b\n##### \u2022 \u5206\u985e\u306e\u5834\u5408\u306f\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\n##### \u2022 \u8cea\u7684\u5909\u6570\u304c\u6271\u3048\u306a\u3044\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u4f7f\u3046\u5834\u5408\u306f\u3001\u30c0\u30df\u30fc\u5909\u6570\u306b\u7f6e\u304d\u63db\u3048\u308b\n\n#### \u4ea4\u5dee\u691c\u8a3c\u3001\u30db\u30fc\u30eb\u30c9\u30a2\u30a6\u30c8\u6cd5\u306a\u3069\u3067\u6c4e\u5316\u6027\u80fd\u3092\u78ba\u8a8d\u3059\u308b\n\n#### \u4e88\u6e2c\u7cbe\u5ea6\u307e\u305f\u306f\u8b58\u5225\u7cbe\u5ea6\u3092\u78ba\u8a8d\u3059\u308b\n##### \u2022 \u5206\u985e\u554f\u984c\u306e\u5834\u5408\u306f\u3001\u6df7\u540c\u884c\u5217\u3092\u4f5c\u6210\u3057\u3001Accuracy\u3001Recall\u3001Precision\u3092\u6c42\u3081\u308b","d7f16ddc":"### \u6b20\u6e2c\u5024\u3068\u7570\u5e38\u5024\u3092\u78ba\u8a8d\u3057\u3001\u9069\u5207\u306b\u51e6\u7406\u3059\u308b","c50ca09b":"#### 10-4. \u524d\u56de\u304b\u3089\u53d6\u308a\u7d44\u3093\u3060\u5185\u5bb9\u30fb\u5de5\u592b\u3001\u7cbe\u5ea6\u304c\u3069\u306e\u3088\u3046\u306b\u5909\u5316\u3057\u305f\u304b\u306e\u30b3\u30e1\u30f3\u30c8\u3092Notebook\u306b\u542b\u3081\u308b\u3053\u3068\n\n#### \u4eca\u56de\u53d6\u308a\u7d44\u3093\u3060\u5185\u5bb9\n##### 1. \u95a2\u6570\u3092\u7528\u3044\u3066\u3001\u540c\u3058\u30b3\u30fc\u30c9\u306e\u7e70\u308a\u8fd4\u3057\u3092\u907f\u3051\u308b\n#####     \u21d2 \u30ce\u30fc\u30c8\u30d6\u30c3\u30af\u304c\u6bd4\u8f03\u7684\u898b\u3084\u3059\u304f\u306a\u3063\u305f\n##### 2. \u6a19\u6e96\u5316\u30fb\u6b63\u898f\u5316\u306e\u52b9\u679c\u3092\u898b\u308b\uff08Day2\u306e\u3084\u308a\u76f4\u3057\uff09\n#####     \u21d2 \u52b9\u679c\u306f\u898b\u308c\u305f\u304c\u3001\u7cbe\u5ea6\u306f\u4e0b\u304c\u3063\u305f\u3002\u307e\u3060\u4f55\u304b\u9593\u9055\u3063\u3066\u3044\u308b\u306e\u304b\uff1f\n##### 3. \u6b63\u5247\u5316\u306e\u52b9\u679c\u3092\u898b\u308b\uff08Day2\u306e\u3084\u308a\u76f4\u3057\uff09\n#####     \u21d2 \u3053\u308c\u3082\u52b9\u679c\u306f\u898b\u308c\u305f\u304c\u3001\u3084\u306f\u308a\u7cbe\u5ea6\u306f\u4e0b\u304c\u3063\u305f\u3002\u4f55\u304b\u9593\u9055\u3063\u3066\u3044\u308b\u306e\u304b\uff1f\n##### 4. \u30b5\u30dd\u30fc\u30c8\u30d9\u30af\u30c8\u30eb\u30de\u30b7\u30f3\u3092\u5b9f\u884c\u3059\u308b\uff08Day2\u306e\u3084\u308a\u76f4\u3057\uff09\n#####     \u21d2 \u30c7\u30fc\u30bf\u3092\u6e1b\u3089\u3057\u305f\u3068\u3053\u308d\u3001\u5b9f\u884c\u306f\u51fa\u6765\u305f\u304c\u3001\u7cbe\u5ea6\u306f\u4f4e\u3044\n\n### \u4ee5\u964d\u3001DAY3\u3067\u5b66\u3093\u3060\u3053\u3068\u306e\u53d6\u308a\u7d44\u307f\n##### 5. \u7279\u5fb4\u9078\u629e\u30fb\u30e9\u30c3\u30d1\u30fc\u6cd5\u3092\u4f7f\u3063\u3066\u307f\u305f\n#####     \u21d2 \u30e9\u30c3\u30d1\u30fc\u6cd5\u306b\u3088\u308a\u3001\u7cbe\u5ea6\u3092\u843d\u3068\u3055\u305a\u306b\u9805\u76ee\u3092\u524a\u9664\u3067\u304d\u308b\u3053\u3068\u304c\u78ba\u8a8d\u3067\u304d\u305f\n##### 6. \u7279\u5fb4\u9078\u629e\u30fb\u57cb\u3081\u8fbc\u307f\u6cd5\u3092\u4f7f\u3063\u3066\u307f\u305f\n#####     \u21d2 \u57cb\u3081\u8fbc\u307f\u6cd5\u306b\u3088\u308a\u3001\u7cbe\u5ea6\u3092\u843d\u3068\u3055\u305a\u306b\u9805\u76ee\u3092\u524a\u9664\u3067\u304d\u308b\u3053\u3068\u304c\u78ba\u8a8d\u3067\u304d\u305f\n##### 7. \u6c7a\u5b9a\u6728\u3092\u4f7f\u3063\u3066\u307f\u305f\n#####     \u21d2 \u6c7a\u5b9a\u6728\u3092\u63cf\u304f\u3053\u3068\u3082\u3067\u304d\u3001\u307e\u305f\u9ad8\u3044\u7cbe\u5ea6\u306e\u4e88\u6e2c\u304c\u51fa\u6765\u308b\u3053\u3068\u3082\u78ba\u8a8d\u3067\u304d\u305f\n##### 8. \u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u3092\u4f7f\u3063\u3066\u307f\u305f\n#####     \u21d2 \u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u3092\u4f7f\u3063\u3066\u3001\u6c7a\u5b9a\u6728\u3092\u8d85\u3048\u308b\u7cbe\u5ea6\u306e\u4e88\u6e2c\u304c\u51fa\u6765\u305f\n##### 9. \u30a2\u30c0\u30d6\u30fc\u30b9\u30c8\u3092\u4f7f\u3063\u3066\u307f\u305f\n#####     \u21d2 \u30a2\u30c0\u30d6\u30fc\u30b9\u30c8\u3092\u4f7f\u3063\u3066\u3001\u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u3092\u8d85\u3048\u308b\u7cbe\u5ea6\u306e\u4e88\u6e2c\u304c\u51fa\u6765\u305f\n##### 10. \u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u4f7f\u3063\u3066\u307f\u305f\n#####     \u21d2 \u3046\u307e\u304f\u51fa\u6765\u305f\u3001\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u529b\u3092\u5b9f\u611f\u3057\u305f\n","25c97612":"### \u9805\u76ee\u3054\u3068\u306e\u5b9a\u7fa9\u304a\u3088\u3073\u95a2\u4fc2\n\n","ca06c6bb":"## \u76ee\u7684\u5909\u6570\u3068\u8aac\u660e\u5909\u6570\u306e\u95a2\u4fc2\u3092\u78ba\u8a8d\u3059\u308b\u305f\u3081\u306e\u30b0\u30e9\u30d5\u3092\u4f5c\u6210\u3059\u308b","34f6f489":"# DAY3\u306e\u5bbf\u984c\n\n## \u76ee\u6b21\n### 9. DAY2\u5bbf\u984c\u306e\u3084\u308a\u76f4\u3057\n#### 9-1. \u95a2\u6570\u3092\u7528\u3044\u3066\u3001\u540c\u3058\u30b3\u30fc\u30c9\u306e\u7e70\u308a\u8fd4\u3057\u3092\u907f\u3051\u308b\n#### 9-2. \u6a19\u6e96\u5316\u30fb\u6b63\u898f\u5316\u306e\u52b9\u679c\u3092\u898b\u308b\n#### 9-3. \u6b63\u5247\u5316\u306e\u52b9\u679c\u3092\u898b\u308b\n#### 9-4. \u30b5\u30dd\u30fc\u30c8\u30d9\u30af\u30c8\u30eb\u30de\u30b7\u30f3\u3092\u5b9f\u884c\u3059\u308b\n### 10. DAY3\u3067\u5b66\u3093\u3060\u3053\u3068\u306e\u53d6\u308a\u7d44\u307f\n#### 10-1. \u7279\u5fb4\u9078\u629e\u3092\u7528\u3044\u308b\n##### 10-1-1. \u30e9\u30c3\u30d1\u30fc\u6cd5\u3092\u7528\u3044\u308b\n##### 10-1-2. \u57cb\u3081\u8fbc\u307f\u6cd5\u3092\u7528\u3044\u308b\n#### 10-2. \u6728\u30e2\u30c7\u30eb\u3092\u7528\u3044\u308b\n##### 10-2-1. \u6c7a\u5b9a\u6728\u3092\u7528\u3044\u308b\n##### 10-2-2. \u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u3092\u7528\u3044\u308b\n##### 10-2-3. \u30a2\u30c0\u30d6\u30fc\u30b9\u30c8\u3092\u7528\u3044\u308b\n#### 10-3. \u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u7528\u3044\u308b\n#### 10-4. \u524d\u56de\u304b\u3089\u53d6\u308a\u7d44\u3093\u3060\u5185\u5bb9\u30fb\u5de5\u592b\u3001\u7cbe\u5ea6\u304c\u3069\u306e\u3088\u3046\u306b\u5909\u5316\u3057\u305f\u304b\u306e\u30b3\u30e1\u30f3\u30c8\u3092Notebook\u306b\u542b\u3081\u308b\u3053\u3068","44b63cec":"### SVM\u3092\u8a66\u3057\u3066\u307f\u308b\uff089-4. \u30b5\u30dd\u30fc\u30c8\u30d9\u30af\u30c8\u30eb\u30de\u30b7\u30f3\u3092\u5b9f\u884c\u3059\u308b\uff09","e7bbfcfa":"### \u300ec. Ridge\uff08L2\u6b63\u5247\u5316\uff09\u3092\u4f8b\u306b\u6b63\u5247\u5316\u3092\u884c\u3063\u3066\u307f\u308b\u300f\u306b\u3042\u305f\u308a\u3001\u540c\u6642\u306b (9-3. \u6b63\u5247\u5316\u306e\u52b9\u679c\u3092\u898b\u308b)\n####  \u4ea4\u5dee\u691c\u8a3c\u306b\u3088\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3092\u884c\u3046\n####  \u305d\u306e\u5f8c\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u5f8c\u306e\u30e2\u30c7\u30eb\u306b\u3088\u3063\u3066\u3001\u7cbe\u5ea6\u304a\u3088\u3073\u7d50\u679c\u306e\u8a55\u4fa1\u3092\u884c\u3046\n","3295990e":"#### 10-2. \u6728\u30e2\u30c7\u30eb\u3092\u7528\u3044\u308b\n##### 10-2-1. \u6c7a\u5b9a\u6728\u3092\u7528\u3044\u308b\n##### 10-2-2. \u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u3092\u7528\u3044\u308b\n##### 10-2-3. \u30a2\u30c0\u30d6\u30fc\u30b9\u30c8\u3092\u7528\u3044\u308b\n","90faf206":"# \u65b9\u91dd\n\u2022 \u524d\u56de\u304a\u3088\u3073\u524d\u3005\u56de\u306e\u5bbf\u984c\u3092\u30d9\u30fc\u30b9\u306b\u3001\u4eca\u56de\u306e\u5bbf\u984c\u4e8b\u9805\u3092\u53d6\u308a\u8fbc\u3080","5b56f6b2":"#### 10-3. \u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u7528\u3044\u308b","cc1501c2":"### 1. \u81ea\u5206\u304c\u53d6\u308a\u7d44\u3080\u901a\u3057\u8ab2\u984c\u30921\u3064\u9078\u629e\u3059\u308b\n\u2022 Kaggle\u30a2\u30ab\u30a6\u30f3\u30c8\u3092\u4f5c\u6210\u3057\u3001\u8a72\u5f53\u8ab2\u984c\u306e\u30c7\u30fc\u30bf\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b"}}