{"cell_type":{"d783b31f":"code","632b79a9":"code","c88ff7fb":"code","7dd5a648":"code","dc4e0448":"code","a264cfa4":"code","996ccd29":"code","0651b36f":"code","42c2c16b":"code","925c2557":"code","8bbfb9f4":"markdown"},"source":{"d783b31f":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\npd.set_option('display.float_format', lambda x: '%.2f' % x)\npd.set_option('display.max_rows', None)\n# pd.options.display.float_format= '{:.nf}'.format\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","632b79a9":"!pip install ccxt","c88ff7fb":"import pandas as pd\nimport ccxt,time\nfrom concurrent.futures import ThreadPoolExecutor\nfrom collections import OrderedDict\n\nbn = ccxt.binance({\n    'enableRateLimit': True,\n    'options': {'defaultType': 'future'}\n})\n\nsymbols = sorted([market['symbol'] for market in bn.fetchMarkets()])","7dd5a648":"len(symbols)","dc4e0448":"start_date = '2021-03-16'\n\ndef cal_daily_volume(symbol):\n    df = bn.fetch_ohlcv(symbol=symbol, timeframe='1d', limit=None)\n    df = pd.DataFrame(df, dtype=float)\n    df.rename(columns={0: 'MTS', 1: 'open', 2: 'high',\n                           3: 'low', 4: 'close', 5: 'volume'}, inplace=True) \n    df['candle_begin_time'] = pd.to_datetime(df['MTS'], unit='ms')  \n    df = df[['candle_begin_time', 'open', 'high', 'low', 'close', 'volume']]  \n    df = df[df['candle_begin_time'].dt.date > pd.to_datetime(start_date).date()]\n    # df.describe()\n    mean_daily_volume= df.describe().at['mean','volume']\n    mean_close_price= df.describe().at['mean','close']\n    return mean_daily_volume, mean_close_price","a264cfa4":"type((3,3,3))","996ccd29":"trading_pair_with_volume = []\nfor i in symbols:\n#     print (i,cal_daily_volume(i))\n    mean_daily_volume, mean_close_price = cal_daily_volume(i)\n    trading_pair_with_volume.append((i,mean_daily_volume,mean_close_price ))","0651b36f":"trading_pair_with_volume_pd = pd.DataFrame(trading_pair_with_volume, columns=['symbol','mean_daily_volume','mean_close_price'])\ntrading_pair_with_volume_pd['mean_daily_usd_volume'] = trading_pair_with_volume_pd['mean_daily_volume'] * trading_pair_with_volume_pd['mean_close_price']\ntrading_pair_with_volume_pd = trading_pair_with_volume_pd.sort_values(by=['mean_daily_usd_volume','mean_daily_volume'], ascending=False)\ntrading_pair_with_volume_pd = trading_pair_with_volume_pd.set_index('symbol').reset_index()","42c2c16b":"trading_pair_with_volume_pd","925c2557":"trading_pair_with_volume_pd","8bbfb9f4":"## Volume analysis for all trading pair in Binance USDT based contracts (\u5e01\u5b89U\u672c\u4f4d\u5408\u7ea6\uff09\n---\n* purpose: find the trading pair with the largest trading volume on daily base\n\n[x] todo : calculate USD value with price * volume"}}