{"cell_type":{"7ff4e2b6":"code","565191d1":"code","22025388":"code","beb5f829":"code","f9801e5b":"code","df078755":"code","657f53ff":"code","6b014cb3":"code","1dc45f39":"code","30263a49":"code","e771e400":"code","d42eb61b":"code","79bd33d6":"code","90153217":"code","52ecd6a6":"code","209f663f":"code","1217f95a":"code","3eae915a":"code","d9979c68":"code","2a448614":"code","cc4a6763":"code","128353ec":"code","07a2ae76":"code","e08c7263":"code","8b5377b0":"code","fe0b7a6b":"code","00a79a0d":"code","e1cf01bf":"code","8665b234":"code","47c07bda":"code","7403f95f":"code","fc1881af":"code","1b71c327":"code","2990b56a":"code","7b90bbaa":"code","17f35ff2":"code","04d86d4f":"code","8d2e7d2e":"code","225915f6":"code","829aabc8":"code","1735afe5":"code","4bf7e9fe":"code","5a306f4f":"code","6e5ad8fb":"code","6c165837":"code","179cd675":"code","cc4bd995":"code","eca61b1e":"code","fb552d1c":"code","78f7aae1":"code","824dabc6":"code","7898b0ba":"code","0b551f93":"code","440dd1d9":"code","fb47a875":"code","08c72d39":"code","9cb0efc4":"code","149329f2":"code","1b6fd337":"code","a5ac8c73":"code","1a5e8b5e":"code","f79db133":"code","421f4f05":"code","bc10a1fb":"code","026f78d8":"code","8977f84e":"code","b1cd2cf0":"code","04ecba29":"code","7e016f0a":"code","2d151414":"code","61f99a17":"code","494cf226":"code","65fb9971":"code","ce84c319":"code","a64000b3":"code","73b7747b":"code","c9908d27":"code","d2b3fbee":"code","afeddf24":"code","52c22c83":"code","d83aa0cb":"code","c6a5a252":"code","9e203612":"code","3e15d023":"code","52b2784d":"code","2e834da5":"code","f43ae6e1":"code","05a70b89":"code","198c3723":"code","b641fef3":"code","ad2de4ae":"code","47d20113":"code","9424e232":"code","00715a42":"code","ea661aeb":"code","b9bd1c05":"code","ae130e5a":"code","f8eedb32":"code","11d6c84f":"code","c8c5ce5d":"code","c479cca1":"code","d3f7f488":"code","821f4388":"code","0cbf5387":"code","9a98569f":"code","e8635c93":"code","9646889b":"code","9944b8a1":"code","3685fabf":"code","4429cab9":"code","0f5cb2c7":"code","884da8f9":"code","4ef3f17b":"code","e3bb6577":"code","4ec3a164":"code","a2537fbb":"code","267a4772":"code","e8703067":"code","d13de300":"code","f7c3c529":"code","d5ef6235":"code","49550487":"code","91da71fb":"code","8c233268":"code","bef0e78d":"code","e4f0addf":"code","b92bcccb":"code","765c8189":"code","b57002f4":"code","cf32327a":"code","21738144":"code","a2b7afd2":"code","b7d9756a":"code","02ecaf07":"code","5bc308b0":"code","bf018d37":"code","c6ee2c2b":"code","7d2c0f26":"code","6ad66efb":"code","a1852cb7":"code","16fe317d":"code","e5f5ba39":"code","6b00518c":"code","4ed29406":"code","1a9a0dea":"code","43d34735":"code","fb879af9":"code","52442ab3":"code","5141ce92":"code","c5590437":"code","deb1514e":"code","01924919":"code","aaf4ac5c":"code","e836beca":"code","df568e4b":"code","c5c07f32":"code","8615e07c":"code","80aec416":"code","367a0285":"markdown","990424fc":"markdown","9167a458":"markdown","f885ef3f":"markdown","8ecda78d":"markdown","b1ab05ca":"markdown","5d238eaa":"markdown","d692a406":"markdown","222b3fac":"markdown","a5231954":"markdown","056176a5":"markdown","68d69c58":"markdown","85549810":"markdown","eed14397":"markdown","3ad425c7":"markdown","ddd1f37e":"markdown","e162c254":"markdown","2160333d":"markdown","5fc93201":"markdown","23ab0432":"markdown","474b2fcb":"markdown","1cb25d7c":"markdown","02f49d51":"markdown","287dabbf":"markdown","7c6b041d":"markdown","388f347a":"markdown","c13b0ff6":"markdown","12b3770c":"markdown","5e92eb8b":"markdown","ed4e9afc":"markdown","b4a0e2b9":"markdown","12d665ae":"markdown","61ae55d5":"markdown","7a111659":"markdown","8db76f3f":"markdown","b64a550f":"markdown","dfd3993c":"markdown","c83fe65c":"markdown","174b3e91":"markdown","a18b66a4":"markdown","0b629dbe":"markdown","23878336":"markdown","2e185954":"markdown","adc64e34":"markdown"},"source":{"7ff4e2b6":"import pandas as pd\nimport numpy as np\nfrom scipy import stats","565191d1":"import matplotlib.pyplot as plt\nimport seaborn as sns","22025388":"sns.set_palette(palette='icefire', n_colors=10)\n","beb5f829":"density = sns.color_palette(palette= 'RdYlGn', n_colors= 10)","f9801e5b":"in_train = pd.read_csv('..\/input\/train.csv')\nin_test = pd.read_csv('..\/input\/test.csv')","df078755":"print (in_train.shape)\nprint (in_test.shape)","657f53ff":"print ('Unique households in training set:', in_train['idhogar'].nunique())\nprint ('Unique households in training set:', in_test['idhogar'].nunique())","6b014cb3":"### Check if there are any households both in the train, test set\nset(in_train['idhogar'].unique()).intersection(in_test['idhogar'].unique())","1dc45f39":"in_train['Id'].duplicated().sum()\nin_test['Id'].duplicated().sum()","30263a49":"### Combine the train and test dataframes\ndf = pd.concat([in_train, in_test], axis = 0, sort=False, ignore_index= True)\ndf.shape","e771e400":"df.head()","d42eb61b":"df.isnull().sum()[df.isnull().sum() > 0]","79bd33d6":"df[['tipovivi1', 'tipovivi2', 'tipovivi3', 'tipovivi4', 'tipovivi5']][df['v2a1'].isnull()].sum()","90153217":"df[(df['tipovivi4'] == 1)&(df['v2a1'] > 0)]","52ecd6a6":"df[(df['tipovivi5'] == 1)&(df['v2a1'] > 0)]","209f663f":"df['v2a1'].fillna(0, inplace = True)","1217f95a":"df['v18q'][df['v18q1'].isnull()].value_counts(dropna=False)","3eae915a":"df['v18q1'].fillna(0, inplace = True)","d9979c68":"sns.distplot(df['age'][df['rez_esc'].isnull()])","2a448614":"df['rez_esc'].fillna(0, inplace = True)\ndf['Schooling_age'] =((df['age'] >= 7)&(df['age'] <= 19))*1","cc4a6763":"##df[df['rez_esc']==99].index\ndf.loc[13069,'rez_esc'] = 0","128353ec":"df[['age', 'escolari', 'meaneduc', 'idhogar', 'parentesco1']][df['meaneduc'].isnull()].sort_values(by = 'idhogar')","07a2ae76":"### Identify the household id corresponding to the missing report\nno_meanedu = df['idhogar'][df['meaneduc'].isnull()].unique()","e08c7263":"### Check if 'meaneduc' is available for any other records for the same household\nfor household in no_meanedu:\n    print (household, df['meaneduc'][df['idhogar'] == household].values)","8b5377b0":"mean_educ = {}\nfor household in no_meanedu:\n    mean_educ[household] = df['escolari'][(df['idhogar'] == household)&(df['age'] >= 18)].mean()","fe0b7a6b":"mean_educ","00a79a0d":"## we still get two NaN values..\ndf[['escolari', 'age']][df['idhogar'] == 'c49af2e64']","e1cf01bf":"for household in no_meanedu:\n    df.loc[df['idhogar'] == household, 'meaneduc'] = mean_educ[household]","8665b234":"df['meaneduc'].fillna(0, inplace = True)","47c07bda":"## We'll recalculate the squared mean education based on the mean education column\ndf['SQBmeaned'] = df['meaneduc'] **2","7403f95f":"ind_indicators = ['Id', 'escolari', 'rez_esc', 'Schooling_age', 'dis', 'male', 'female',\n                         'estadocivil1', 'estadocivil2', 'estadocivil3', 'estadocivil4', \n                         'estadocivil5', 'estadocivil6', 'estadocivil7', 'parentesco1',\n                         'parentesco2', 'parentesco3', 'parentesco4', 'parentesco5', 'parentesco6',\n                         'parentesco7', 'parentesco8', 'parentesco9', 'parentesco10', 'parentesco11',\n                         'parentesco12', 'instlevel1', 'instlevel2', 'instlevel3', 'instlevel4', 'instlevel5',\n                         'instlevel6', 'instlevel7', 'instlevel8', 'instlevel9', 'age', 'SQBescolari', 'SQBage', 'agesq'] ","fc1881af":"hh_indicators = [col for col in df.columns if col not in ind_indicators]","1b71c327":"inconsistant_col = {}\n\n### for col in hh_indicators:\nfor col in ['Target']:\n    ## Check if the value is unique across all records for a given household\n    consistant_value = df[df[col].notnull()].groupby('idhogar')[col].apply(lambda x: x.nunique() == 1)\n    \n    # Record variables where inconsistancies exist\n    if (consistant_value == False).sum() > 0:\n        print ('{} Inconsistant value for {} within household'.format((consistant_value == False).sum(), col))\n        inconsistant_col[col] = consistant_value[consistant_value == False]","2990b56a":"for household in inconsistant_col['Target'].index:\n    target_val_for_parentesco1 = df['Target'][(df['idhogar'] == household)&(df['parentesco1'] == 1)]\n    if target_val_for_parentesco1.notnull().any():\n        df.loc[df['idhogar'] == household, 'Target'] = target_val_for_parentesco1.values","7b90bbaa":"no_head = set(df['idhogar'].unique()).difference(df['idhogar'][df['parentesco1'] == 1].unique())","17f35ff2":"len(no_head)","04d86d4f":"sns.countplot('Target', data = df[df['parentesco1'] == 1])\nplt.xticks((0,1,2,3), ('Extreme Poverty', 'Moderate Poverty', 'Vulnerable', 'Non-Vulnerable'), rotation = 90)","8d2e7d2e":"sns.distplot(df['v2a1'][(df['Target'] == 1)&(df['v2a1'] > 0 )], hist=False, label= 'Extreme Poverty')\nsns.distplot(df['v2a1'][(df['Target'] == 2)&(df['v2a1'] > 0 )], hist=False, label= 'Moderate Poverty')\nsns.distplot(df['v2a1'][(df['Target'] == 3)&(df['v2a1'] > 0 )], hist=False, label= 'Vulnerable Households')\nsns.distplot(df['v2a1'][(df['Target'] == 4)&(df['v2a1'] > 0 )], hist=False, label= 'Non-vulnerable households')\n\n### plt.gcf()\nplt.legend()","225915f6":"df['hacdor'][df['Target'].notnull()].value_counts()","829aabc8":"sns.countplot('Target', data = df[df['hacdor'] == 1])\nplt.xticks((0,1,2,3), ('Extreme Poverty', 'Moderate Poverty', 'Vulnerable', 'Non-Vulnerable'), rotation = 90)","1735afe5":"df['Target'][df['hacdor'] == 1].value_counts(normalize = True)","4bf7e9fe":"sns.countplot('rooms', data = df[df['Target'].notnull()], hue= 'Target')","5a306f4f":"df['hacapo'][df['Target'].notnull()].value_counts()","6e5ad8fb":"###sns.countplot('Target', data = df[df['hacapo'] == 1])\nnorm_val = df['Target'][df['hacapo'] == 1].value_counts(normalize = True)\nsns.barplot(norm_val.index, norm_val)\nplt.xticks((0,1,2,3), ('Extreme Poverty', 'Moderate Poverty', 'Vulnerable', 'Non-Vulnerable'), rotation = 90)\n","6c165837":"norm_val = df['Target'][df['v14a'] == 1].value_counts(normalize = True)\n\nsns.barplot( norm_val.index, norm_val)\nplt.xticks((0, 1, 2, 3), ('Extreme Poverty', 'Moderate Poverty', 'Vulnerable', 'Non-Vulnerable'), rotation = 90)\n","179cd675":"norm_val = df['Target'][df['refrig'] == 1].value_counts(normalize = True)\n\nsns.barplot( norm_val.index, norm_val)\nplt.xticks((0, 1, 2, 3), ('Extreme Poverty', 'Moderate Poverty', 'Vulnerable', 'Non-Vulnerable'), rotation = 90)\n","cc4bd995":"norm_val = df['Target'][df['v18q'] == 1].value_counts(normalize = True)\n\nsns.barplot( norm_val.index, norm_val)\nplt.xticks((0, 1, 2, 3), ('Extreme Poverty', 'Moderate Poverty', 'Vulnerable', 'Non-Vulnerable'), rotation = 90)\n","eca61b1e":"## How many individuals in each poverty level own a tablet.\ndf['Target'][(df['Target'].notnull())&(df['v18q'] == 1)].value_counts()\/df['Target'].value_counts()","fb552d1c":"## Number of tablets in household\nsns.countplot('v18q1', data = df[df['parentesco1'] == 1], hue= 'Target' )\nplt.legend(loc = 1)","78f7aae1":"df[df['parentesco1'] == 1].pivot_table(values = 'idhogar', columns = 'v18q1', index = 'Target', aggfunc = 'count')","824dabc6":"### Average number of children, adults in household\npivot = df[df['parentesco1'] == 1].pivot_table(values= ['r4t2', 'r4t1'], index = 'Target', aggfunc='mean')\nsns.heatmap(pivot, annot= True, cmap = density, vmin = 0, vmax = 3)\n","7898b0ba":"norm_val = df['tamhog'][df['parentesco1'] == 1].value_counts(normalize = True)\n\nsns.countplot('tamhog', data = df[df['parentesco1'] == 1], hue= 'Target',)\nplt.legend(loc = 1)","0b551f93":"df[df['parentesco1'] == 1].pivot_table(index = 'Target', values = 'tamhog' )","440dd1d9":"norm_val = df['tamviv'][df['parentesco1'] == 1].value_counts(normalize = True)\n\nsns.countplot('tamviv', data = df[df['parentesco1'] == 1], hue= 'Target',)\nplt.legend(loc = 1)","fb47a875":"sns.distplot(df['escolari'][(df['Target'] == 1)&(df['parentesco1'] == 1 )], hist=False, rug=False, label= 'Extreme Poverty')\nsns.distplot(df['escolari'][(df['Target'] == 2)&(df['parentesco1'] == 1 )], hist=False, rug=False, label= 'Moderate Poverty')\nsns.distplot(df['escolari'][(df['Target'] == 3)&(df['parentesco1'] == 1 )], hist=False, rug=False, label= 'Vulnerable Households')\nsns.distplot(df['escolari'][(df['Target'] == 4)&(df['parentesco1'] == 1 )], hist=False, rug=False, label= 'Non-vulnerable households')\n\n### plt.gcf()\nplt.legend()","08c72d39":"wall_material = {}\nmaterial_types = ['paredblolad', 'paredzocalo', 'paredpreb', 'pareddes', 'paredmad', 'paredzinc', 'paredfibras', 'paredother' ]\nfor material in material_types:\n    pov_level = df['Target'][(df['Target'].notnull())&(df[material]>0)].value_counts()\n    in_level = ((df['Target'].notnull())&(df[material]> 0)).sum()\n    \n    wall_material[material] = (pov_level\/in_level).to_dict()\n    \ntemp = pd.DataFrame(wall_material)\n\nsns.heatmap(temp, cmap = density, vmin = 0 ,vmax = 1, annot=True, linewidths=.1, linecolor='white')\n\nfor ax in plt.gcf().get_axes():\n    ax.set_xticklabels(['Brick', 'Socket', 'Cement', 'WasteMat', 'Wood', 'Zink', 'NaturalFiber', 'Other'])","9cb0efc4":"floor_material = {}\nfor material in ['pisomoscer', 'pisocemento', 'pisoother', 'pisonatur', 'pisonotiene', 'pisomadera']:\n    pov_level = df['Target'][(df['Target'].notnull())&(df[material]>0)].value_counts()\n    in_level = ((df['Target'].notnull())&(df[material]> 0)).sum()\n    \n    floor_material[material] = (pov_level\/in_level).to_dict()\n    \ntemp = pd.DataFrame(floor_material)\n\nsns.heatmap(temp, cmap = density, vmin = 0 ,vmax = 1, annot=True, linewidths=.1, linecolor='white')","149329f2":"roof_material = {}\nfor material in ['techozinc', 'techoentrepiso', 'techocane', 'techootro']:\n    pov_level = df['Target'][(df['Target'].notnull())&(df[material]>0)].value_counts()\n    in_level = ((df['Target'].notnull())&(df[material]> 0)).sum()\n    \n    roof_material[material] = (pov_level\/in_level).to_dict()\n    \ntemp = pd.DataFrame(roof_material)\n\nsns.heatmap(temp, cmap = density, vmin = 0 ,vmax = 1, annot=True, linewidths=.1, linecolor='white')","1b6fd337":"water_provision = {}\nfor level in ['abastaguadentro', 'abastaguafuera', 'abastaguano']:\n    pov_level = df['Target'][(df['Target'].notnull())&(df[level]>0)].value_counts()\n    in_level = ((df['Target'].notnull())&(df[level]> 0)).sum()\n    \n    water_provision[level] = (pov_level\/in_level).to_dict()\n    \ntemp = pd.DataFrame(water_provision)\n\nsns.heatmap(temp, cmap = density, vmin = 0 ,vmax = 1, annot=True, linewidths=.1, linecolor='white')","a5ac8c73":"electricity = {}\nfor level in ['public', 'planpri', 'noelec', 'coopele']:\n    pov_level = df['Target'][(df['Target'].notnull())&(df[level]>0)].value_counts()\n    in_level = ((df['Target'].notnull())&(df[level]> 0)).sum()\n    \n    electricity[level] = (pov_level\/in_level).to_dict()\n    \ntemp = pd.DataFrame(electricity)\n\nsns.heatmap(temp, cmap = density, vmin = 0 ,vmax = 1, annot=True, linewidths=.1, linecolor='white')","1a5e8b5e":"toilet = {}\nfor level in ['sanitario1', 'sanitario2', 'sanitario3', 'sanitario5', 'sanitario6']:\n    pov_level = df['Target'][(df['Target'].notnull())&(df[level]>0)].value_counts()\n    in_level = ((df['Target'].notnull())&(df[level]> 0)).sum()\n    \n    toilet[level] = (pov_level\/in_level).to_dict()\n    \ntemp = pd.DataFrame(toilet)\n\nsns.heatmap(temp, cmap = density, vmin = 0 ,vmax = 1, annot=True, linewidths=.1, linecolor='white')","f79db133":"cooking = {}\nfor level in ['energcocinar1', 'energcocinar2', 'energcocinar3', 'energcocinar4']:\n    pov_level = df['Target'][(df['Target'].notnull())&(df[level]>0)].value_counts()\n    in_level = ((df['Target'].notnull())&(df[level]> 0)).sum()\n    \n    cooking[level] = (pov_level\/in_level).to_dict()\n    \ntemp = pd.DataFrame(cooking)\n\nsns.heatmap(temp, cmap = density, vmin = 0 ,vmax = 1, annot=True, linewidths=.1, linecolor='white')","421f4f05":"cooking = {}\nfor level in ['energcocinar1', 'energcocinar2', 'energcocinar3', 'energcocinar4']:\n    pov_level = df['Target'][(df['Target'].notnull())&(df[level]>0)].value_counts()\n    in_level = df['Target'].value_counts()\n    \n    cooking[level] = (pov_level\/in_level)\n    \ntemp = pd.DataFrame(cooking)\n\nsns.heatmap(temp, cmap = density, vmin = 0 ,vmax = 1, annot=True, linewidths=.1, linecolor='white')","bc10a1fb":"(pov_level\/in_level).sum()","026f78d8":"wasteDisposal = {}\nfor level in ['elimbasu1', 'elimbasu2', 'elimbasu3', 'elimbasu4', 'elimbasu5', 'elimbasu6']:\n    pov_level = df['Target'][(df['Target'].notnull())&(df[level]>0)].value_counts()\n    in_level = ((df['Target'].notnull())&(df[level]> 0)).sum()\n    \n    wasteDisposal[level] = (pov_level\/in_level).to_dict()\n    \ntemp = pd.DataFrame(wasteDisposal)\n\nsns.heatmap(temp, cmap = density, vmin = 0 ,vmax = 1, annot=True, linewidths=.1, linecolor='white')","8977f84e":"wasteDisposal = {}\nfor level in ['elimbasu1', 'elimbasu2', 'elimbasu3', 'elimbasu4', 'elimbasu5', 'elimbasu6']:\n    pov_level = df['Target'][(df['Target'].notnull())&(df[level]>0)].value_counts()\n    in_level = df['Target'].value_counts()\n    \n    wasteDisposal[level] = (pov_level\/in_level)\n    \ntemp = pd.DataFrame(wasteDisposal)\n\nsns.heatmap(temp, cmap = density, vmin = 0 ,vmax = 1, annot=True, linewidths=.1, linecolor='white')","b1cd2cf0":"WallQual = {}\nfor level in ['epared1', 'epared2', 'epared3']:\n    pov_level = df['Target'][(df['Target'].notnull())&(df[level]>0)].value_counts()\n    in_level = ((df['Target'].notnull())&(df[level]> 0)).sum()\n    \n    WallQual[level] = (pov_level\/in_level).to_dict()\n    \ntemp = pd.DataFrame(WallQual)\n\nsns.heatmap(temp, cmap = density, vmin = 0 ,vmax = 1, annot=True, linewidths=.1, linecolor='white')","04ecba29":"WallQual = {}\nfor level in ['epared1', 'epared2', 'epared3']:\n    pov_level = df['Target'][(df['Target'].notnull())&(df[level]>0)].value_counts()\n    in_level = df['Target'].value_counts()\n    \n    WallQual[level] = (pov_level\/in_level)\n    \ntemp = pd.DataFrame(WallQual)\n\nsns.heatmap(temp, cmap = density, vmin = 0 ,vmax = 1, annot=True, linewidths=.1, linecolor='white')","7e016f0a":"RoofQual = {}\nfor level in ['etecho1', 'etecho2', 'etecho3']:\n    pov_level = df['Target'][(df['Target'].notnull())&(df[level]>0)].value_counts()\n    in_level = ((df['Target'].notnull())&(df[level]> 0)).sum()\n    \n    RoofQual[level] = (pov_level\/in_level).to_dict()\n    \ntemp = pd.DataFrame(RoofQual)\n\nsns.heatmap(temp, cmap = density, vmin = 0 ,vmax = 1, annot=True, linewidths=.1, linecolor='white')","2d151414":"RoofQual = {}\nfor level in ['etecho1', 'etecho2', 'etecho3']:\n    pov_level = df['Target'][(df['Target'].notnull())&(df[level]>0)].value_counts()\n    in_level = df['Target'].value_counts()\n    \n    RoofQual[level] = (pov_level\/in_level)\n    \ntemp = pd.DataFrame(RoofQual)\n\nsns.heatmap(temp, cmap = density, vmin = 0 ,vmax = 1, annot=True, linewidths=.1, linecolor='white')","61f99a17":"FloorQual = {}\nfor level in ['eviv1', 'eviv2', 'eviv3']:\n    pov_level = df['Target'][(df['Target'].notnull())&(df[level]>0)].value_counts()\n    in_level = ((df['Target'].notnull())&(df[level]> 0)).sum()\n    \n    FloorQual[level] = (pov_level\/in_level).to_dict()\n    \ntemp = pd.DataFrame(FloorQual)\n\nsns.heatmap(temp, cmap = density, vmin = 0 ,vmax = 1, annot=True, linewidths=.1, linecolor='white')","494cf226":"indGroup = {}\nfor level in ['estadocivil1', 'estadocivil2', 'estadocivil3', 'estadocivil4', 'estadocivil5', 'estadocivil6', 'estadocivil7']:\n    pov_level = df['Target'][(df['Target'].notnull())&(df[level]>0)].value_counts()\n    in_level = ((df['Target'].notnull())&(df[level]> 0)).sum()\n    \n    indGroup[level] = (pov_level\/in_level).to_dict()\n    \n    \ntemp = pd.DataFrame(indGroup)\n\nsns.heatmap(temp, cmap = density, vmin = 0 ,vmax = 1, annot=True, linewidths=.1, linecolor='white')","65fb9971":"indGroup = {}\nfor level in ['estadocivil1', 'estadocivil2', 'estadocivil3', 'estadocivil4', 'estadocivil5', 'estadocivil6', 'estadocivil7']:\n    pov_level = df['Target'][(df['Target'].notnull())&(df[level]>0)].value_counts()\n    in_level = df['Target'].value_counts()\n    \n    indGroup[level] = (pov_level\/in_level)\n    \ntemp = pd.DataFrame(indGroup)\n\nsns.heatmap(temp, cmap = density, vmin = 0 ,vmax = 1, annot=True, linewidths=.1, linecolor='white')","ce84c319":"relationship = {}\nfor level in ['parentesco1', 'parentesco2', 'parentesco3', 'parentesco4', 'parentesco5', 'parentesco6', 'parentesco7', 'parentesco8', 'parentesco9', 'parentesco10', 'parentesco11', 'parentesco12']:\n    pov_level = df['Target'][(df['Target'].notnull())&(df[level]>0)].value_counts()\n    in_level = ((df['Target'].notnull())&(df[level]> 0)).sum()\n    \n    relationship[level] = (pov_level\/in_level).to_dict()\n    \ntemp = pd.DataFrame(relationship)\n\nplt.figure(figsize= (10,4))\nsns.heatmap(temp, cmap = density, vmin = 0 ,vmax = 1, annot=True, linewidths=.1, linecolor='white')","a64000b3":"relationship = {}\nfor level in ['parentesco1', 'parentesco2', 'parentesco3', 'parentesco4', 'parentesco5', 'parentesco6', 'parentesco7', 'parentesco8', 'parentesco9', 'parentesco10', 'parentesco11', 'parentesco12']:\n    pov_level = df['Target'][(df['Target'].notnull())&(df[level]>0)].value_counts()\n    in_level = df['Target'].value_counts()\n    \n    relationship[level] = (pov_level\/in_level)\n    \ntemp = pd.DataFrame(relationship)\n\nsns.heatmap(temp, cmap = density, vmin = 0 ,vmax = 1, annot=True, linewidths=.1, linecolor='white')","73b7747b":"df[['hogar_nin', 'hogar_adul', 'hogar_mayor', 'hogar_total']].sum()","c9908d27":"df['hogar_mid'] = df['hogar_adul'] -df['hogar_mayor']","d2b3fbee":"education = {} \nfor level in ['instlevel1', 'instlevel2', 'instlevel3', 'instlevel4', 'instlevel5', 'instlevel6', 'instlevel7', 'instlevel8', 'instlevel9']:\n    pov_level = df['Target'][(df['Target'].notnull())&(df[level]>0)].value_counts()\n    in_level = ((df['Target'].notnull())&(df[level]> 0)).sum()\n    \n    education[level] = (pov_level\/in_level).to_dict()\n    \ntemp = pd.DataFrame(education)\n\nplt.figure(figsize=(10,4))\nsns.heatmap(temp, cmap = density, vmin = 0 ,vmax = 1, annot=True, linewidths=.1, linecolor='white')\n\n","afeddf24":"education = {} \nfor level in ['instlevel1', 'instlevel2', 'instlevel3', 'instlevel4', 'instlevel5', 'instlevel6', 'instlevel7', 'instlevel8', 'instlevel9']:\n    pov_level = df['Target'][(df['Target'].notnull())&(df[level]>0)].value_counts()\n    in_level = df['Target'].value_counts()\n    \n    education[level] = (pov_level\/in_level)\n    \ntemp = pd.DataFrame(education)\n\nplt.figure(figsize=(10,4))\nsns.heatmap(temp, cmap = density, vmin = 0 ,vmax = 1, annot=True, linewidths=.1, linecolor='white')","52c22c83":"homeOwnership = {}\nfor level in ['tipovivi1', 'tipovivi2', 'tipovivi3', 'instlevel4', 'tipovivi4', 'tipovivi5']:\n    pov_level = df['Target'][(df['Target'].notnull())&(df[level]>0)].value_counts()\n    in_level = ((df['Target'].notnull())&(df[level]> 0)).sum()\n    \n    homeOwnership[level] = (pov_level\/in_level).to_dict()\n    \ntemp = pd.DataFrame(homeOwnership)\n\nsns.heatmap(temp, cmap = density, vmin = 0 ,vmax = 1, annot=True, linewidths=.1, linecolor='white')","d83aa0cb":"df['Target'][df['computer'] == 1].value_counts()\/df['Target'].value_counts()","c6a5a252":"df['Target'][df['television'] == 1].value_counts()\/df['Target'].value_counts()","9e203612":"df['Target'][df['mobilephone'] == 1].value_counts()\/df['Target'].value_counts()","3e15d023":"sns.countplot(x = 'qmobilephone', data = df, hue = 'Target')","52b2784d":"Region = {}\nfor level in ['lugar1', 'lugar2', 'lugar3', 'lugar4', 'lugar5', 'lugar6']:\n    pov_level = df['Target'][(df['Target'].notnull())&(df[level]>0)].value_counts()\n    in_level = ((df['Target'].notnull())&(df[level]> 0)).sum()\n    \n    Region[level] = (pov_level\/in_level).to_dict()\n    \ntemp = pd.DataFrame(Region)\n\nsns.heatmap(temp, cmap = density, vmin = 0 ,vmax = 1, annot=True, linewidths=.1, linecolor='white')","2e834da5":"Region = {}\nfor level in ['area1', 'area2']:\n    pov_level = df['Target'][(df['Target'].notnull())&(df[level]>0)].value_counts()\n    in_level = ((df['Target'].notnull())&(df[level]> 0)).sum()\n    \n    Region[level] = (pov_level\/in_level).to_dict()\n    \ntemp = pd.DataFrame(Region)\n\nsns.heatmap(temp, cmap = density, vmin = 0 ,vmax = 1, annot=True, linewidths=.1, linecolor='white')","f43ae6e1":"sns.distplot(df['age'][(df['Target'] == 1)&(df['parentesco1'] == 1 )], hist=False, rug=False, label= 'Extreme Poverty')\nsns.distplot(df['age'][(df['Target'] == 2)&(df['parentesco1'] == 1 )], hist=False, rug=False, label= 'Moderate Poverty')\nsns.distplot(df['age'][(df['Target'] == 3)&(df['parentesco1'] == 1 )], hist=False, rug=False, label= 'Vulnerable Households')\nsns.distplot(df['age'][(df['Target'] == 4)&(df['parentesco1'] == 1 )], hist=False, rug=False, label= 'Non-vulnerable households')\n\n### plt.gcf()\nplt.legend()","05a70b89":"sns.distplot(df['age'][df['Target'] == 1], hist=False, rug=False, label= 'Extreme Poverty')\nsns.distplot(df['age'][df['Target'] == 2], hist=False, rug=False, label= 'Moderate Poverty')\nsns.distplot(df['age'][df['Target'] == 3], hist=False, rug=False, label= 'Vulnerable Households')\nsns.distplot(df['age'][df['Target'] == 4], hist=False, rug=False, label= 'Non-vulnerable households')\n\n### plt.gcf()\nplt.legend()","198c3723":"sns.distplot(df['meaneduc'][(df['Target'] == 1)&(df['parentesco1'] == 1 )], hist=False, rug=False, label= 'Extreme Poverty')\nsns.distplot(df['meaneduc'][(df['Target'] == 2)&(df['parentesco1'] == 1 )], hist=False, rug=False, label= 'Moderate Poverty')\nsns.distplot(df['meaneduc'][(df['Target'] == 3)&(df['parentesco1'] == 1 )], hist=False, rug=False, label= 'Vulnerable Households')\nsns.distplot(df['meaneduc'][(df['Target'] == 4)&(df['parentesco1'] == 1 )], hist=False, rug=False, label= 'Non-vulnerable households')\n\n### plt.gcf()\nplt.legend()","b641fef3":"df['dependencyR'] = (df['hogar_nin'] + df['hogar_mayor']) \/ df['hogar_mid']","ad2de4ae":"df['dependencyR'].value_counts()","47d20113":"df['dependencyR'].fillna(0, inplace = True)\ndf['dependencyR'].replace(np.inf, 9, inplace = True)","9424e232":"#### df[['edjefa','edjefe', 'escolari']]\ndf['edjefa'].replace(to_replace= 'no' , value= np.nan, inplace= True)\ndf['edjefe'].replace(to_replace= 'no' , value= np.nan, inplace= True)","00715a42":"sns.distplot(df['meaneduc'][(df['male'] == 1)&(df['parentesco1'] == 1 )], hist=False, rug=False, label= 'Male')\nsns.distplot(df['meaneduc'][(df['female'] == 1)&(df['parentesco1'] == 1 )], hist=False, rug=False, label= 'Female')","ea661aeb":"df['phonespp'] = df['qmobilephone'] \/ df['tamviv']\ndf['tabletspp'] = df['v18q1'] \/ df['tamviv']\ndf['roomspp'] = df['rooms'] \/ df['tamviv']\ndf['rentpp'] = df['v2a1'] \/ df['tamviv']","b9bd1c05":"df['median_schooling'] = df['escolari'].groupby(df['idhogar']).transform('median')\ndf['max_schooling'] = df['escolari'].groupby(df['idhogar']).transform('max')","ae130e5a":"## Education of the Household Head\ndf['eduForHeadofHH'] = 0\ndf.loc[(df['parentesco1']== 1), 'eduForHeadofHH'] = df['escolari']","f8eedb32":"df['eduForHeadofHH'] = df['eduForHeadofHH'].groupby(df['idhogar']).transform('max')","11d6c84f":"df['SecondaryEduLess'] = ((df[['instlevel1','instlevel2', 'instlevel3', 'instlevel4']] == 1).any(axis = 1)&(df['age'] > 19))*1\ndf['SecondaryEduMore'] = ((df[['instlevel5','instlevel6', 'instlevel7', 'instlevel8', 'instlevel9']] == 1).any(axis = 1)&(df['age'] > 19))*1","c8c5ce5d":"df['SecondaryEduMore'].value_counts()","c479cca1":"df['MembersWithSecEdu']  = df['SecondaryEduMore'].groupby(df['idhogar']).transform('sum')\ndf['MembersWithPrimEdu']  = df['SecondaryEduLess'].groupby(df['idhogar']).transform('sum')","d3f7f488":"df['Educated_Ratio'] = (df['MembersWithSecEdu']\/df['MembersWithPrimEdu'])\ndf['Educated_Ratio'].replace(np.inf, -1, inplace = True)\ndf['Educated_Ratio'].fillna(value = 0, inplace = True)","821f4388":"sns.distplot(df['Educated_Ratio'][df['Target'] ==1])\nsns.distplot(df['Educated_Ratio'][df['Target'] ==2])\nsns.distplot(df['Educated_Ratio'][df['Target'] ==3])\nsns.distplot(df['Educated_Ratio'][df['Target'] ==4])","0cbf5387":"df['access_to_tech'] = ((df['v18q1'] >= 1)&(df['qmobilephone'] >= 1)&(df['computer'] >= 0)&(df['television'] >= 0))*1","9a98569f":"df['marital_status'] = (((df['estadocivil3'] ==1)|(df['estadocivil4'] == 1))&(df['parentesco1'] == 1))*1\n\ndf['marital_status'] = df['marital_status'].groupby(df['idhogar']).transform('max')","e8635c93":"df['FemaleHousehold'] = ((df['male'] == 0)&(df['parentesco1'] == 1))*1\ndf['FemaleHousehold'] = df['FemaleHousehold'].groupby(df['idhogar']).transform('max')","9646889b":"df['bedrooms_to_rooms'] = df['bedrooms']\/df['rooms']\ndf['rent_to_rooms'] = df['v2a1']\/df['rooms']\ndf['rooms_to_tamviv'] = df['rooms']\/df['tamviv'] \ndf['v2a1_to_r4t3'] = df['v2a1']\/df['r4t3']","9944b8a1":"df['female_to_males'] = df['r4m2']\/df['r4h2']\ndf['less12_to_adult'] = df['r4t1']\/df['hogar_mid']\n\ndf['less12_to_older'] = df['r4t1']\/df['r4t2']","3685fabf":"(df== np.inf).sum()[(df== np.inf).sum() >0]","4429cab9":"df['less12_to_adult'].fillna(0, inplace = True)\ndf['less12_to_adult'].replace(np.inf, -1, inplace = True)\n\ndf['female_to_males'].fillna(0, inplace = True)\ndf['female_to_males'].replace(np.inf, -1, inplace = True)","0f5cb2c7":"df['NoMalesInHH'] = (df['r4h2'] == 0)*1\ndf['NoFemalesInHH'] = (df['r4m2'] == 0)*1","884da8f9":"from sklearn.tree import DecisionTreeClassifier, ExtraTreeClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import GradientBoostingClassifier\n\nfrom sklearn.model_selection import cross_val_score, cross_val_predict\nfrom sklearn.model_selection import train_test_split, KFold\nfrom sklearn.model_selection import GridSearchCV\n\nfrom sklearn.preprocessing import StandardScaler","4ef3f17b":"from sklearn.metrics import f1_score, confusion_matrix","e3bb6577":"(df == np.inf).sum()[(df == np.inf).sum() > 0]","4ec3a164":"def get_train_test(df):\n        \n    train = df[df['Target'].notnull()].copy()\n    test = df[df['Target'].isnull()].copy()\n    \n    test.drop(columns = 'Target', inplace = True)\n    \n    return train, test","a2537fbb":"train, test = get_train_test(df)","267a4772":"columnstoDrop = ['idhogar','Id', 'edjefe', 'edjefa','dependency']\n                 # 'SQBescolari', 'SQBage', 'SQBhogar_total', 'SQBedjefe', 'SQBhogar_nin',\n                 # 'SQBovercrowding', 'SQBdependency', 'SQBmeaned']\n\ntrain.drop(columns= columnstoDrop, inplace = True)\ntest.drop(columns= columnstoDrop, inplace = True)\n\nX = train.drop(columns= 'Target')\ny = train['Target']\n\nX_col = X.columns\n\nstd_scl = StandardScaler()\nX= std_scl.fit_transform(X)\n\ntest= std_scl.transform(test)","e8703067":"kfold = KFold(n_splits= 5, shuffle= True)","d13de300":"X_train, X_test, y_train, y_test= train_test_split(X,y)","f7c3c529":"from sklearn.ensemble import RandomForestClassifier","d5ef6235":"rf_clf = RandomForestClassifier(n_estimators= 10, class_weight= 'balanced')\nrf_clf.fit(X,y)","49550487":"featureImp = pd.Series(data= rf_clf.feature_importances_, index = X_col)\nfeatureImp","91da71fb":"select =rf_clf.feature_importances_ > 0.001\nsum(select)","8c233268":"clf = LogisticRegression(class_weight = 'balanced', solver= 'liblinear', multi_class= 'ovr')","bef0e78d":"cross_val_score(clf,  , y, scoring = 'f1_macro', cv= kfold)","e4f0addf":"### cross_val_score(clf, X, y, scoring = 'f1_macro', cv= kfold)\n\n### array([ 0.4278837 ,  0.45065472,  0.48420681,  0.42884422,  0.44957925])","b92bcccb":"for reg in [0.001, 0.01, 0.1, 1, 10, 20, 30]:\n    clf = LogisticRegression(class_weight = 'balanced', C= reg, solver= 'liblinear', multi_class= 'ovr')\n    f1score = cross_val_score(clf, X[:,select], y, scoring = 'f1_macro', cv=kfold).mean()\n    print (f1score)\n\n### 0.47250164494877483\n### 0.4900965155141634\n### 0.49374600294003257\n### 0.49692298999701945\n### 0.49017075339444416\n### 0.4972529682883858\n### 0.49290073775881293","765c8189":"clf = LogisticRegression(class_weight = 'balanced', solver= 'liblinear', multi_class= 'ovr')\n\npred = cross_val_predict(clf, X[:,select], y, cv=kfold).astype(int)","b57002f4":"## confusion_matrix(y, pred)\n\n## array([[ 392,  188,   85,  109],\n##        [ 275,  656,  242,  385],\n##        [ 160,  253,  344,  464],\n##        [ 274,  443,  395, 4892]])","cf32327a":"clf = LogisticRegression(class_weight = 'balanced', solver= 'liblinear', multi_class= 'ovr', C= 20)\nclf.fit( X[:,select], y)\nprediction = clf.predict(test[:,select]).astype(int)","21738144":"submission = pd.DataFrame({'Id': in_test['Id'], 'idhogar': in_test['idhogar'], 'isHead': in_test['parentesco1'] , 'Target':prediction})\nsubmission['Target'].value_counts(normalize = True)","a2b7afd2":"submission.to_csv('.\/Submission_log_clf.csv', columns=['Id', 'Target'], index= False)","b7d9756a":"gb_clf = GradientBoostingClassifier()","02ecaf07":"##cross_val_score(gb_clf, X[:, select], y, scoring = 'f1_macro', cv= kfold).mean()\n## 0.6303527489770167","5bc308b0":"## prediction = cross_val_predict(gb_clf, X[:, select], y, cv=kfold)","bf018d37":"##  f1_score(y, prediction, average='macro')\n##  0.6287221065578112","c6ee2c2b":"## confusion_matrix(y, prediction)\n\n## array([[ 400,  108,   22,  244],\n##       [  33,  855,   23,  647],\n##       [  27,  176,  350,  668],\n##       [  36,  176,   31, 5761]])","7d2c0f26":"gb_clf.fit(X[:,select],y)\nprediction = gb_clf.predict(test[:, select]).astype(int)","6ad66efb":"submission = pd.DataFrame({'Id': in_test['Id'], 'idhogar': in_test['idhogar'], 'isHead': in_test['parentesco1'] , 'Target':prediction})\nsubmission['Target'].value_counts(normalize = True)","a1852cb7":"submission.to_csv('.\/Submission_GradientBoosting_clf.csv', columns=['Id', 'Target'], index= False)","16fe317d":"tree_clf = DecisionTreeClassifier()","e5f5ba39":"## cross_val_score(tree_clf, X[:,select], y, scoring = 'f1_macro', cv= kfold).mean()\n## 0.9298023676497221","6b00518c":"## tree_clf.fit(X[:,select],y)\n## prediction = tree_clf.predict(test[:, select]).astype(int)","4ed29406":"## submission = pd.DataFrame({'Id': in_test['Id'], 'idhogar': in_test['idhogar'], 'isHead': in_test['parentesco1'] , 'Target':prediction})\n## submission['Target'].value_counts(normalize = True)","1a9a0dea":"## submission.to_csv('.\/Submission_tree_clf.csv', columns=['Id', 'Target'], index= False)","43d34735":"from sklearn.ensemble import VotingClassifier","fb879af9":"voting_clf = VotingClassifier(estimators= [('tree', tree_clf), ('gradiantBoost', gb_clf), ('logR', clf)], voting= 'hard')","52442ab3":"cross_val_score(voting_clf, X[:, select], y, scoring = 'f1_macro', cv= kfold)","5141ce92":"prediction = cross_val_predict(voting_clf,  X[:, select], y, cv=kfold)\nconfusion_matrix(y, prediction)","c5590437":"voting_clf.fit(X[:, select],y)\nprediction = voting_clf.predict(test[:, select]).astype(int)","deb1514e":"submission = pd.DataFrame({'Id': in_test['Id'], 'idhogar': in_test['idhogar'], 'isHead': in_test['parentesco1'] , 'Target':prediction})\nsubmission['Target'].value_counts(normalize = True)","01924919":"submission.to_csv('.\/Submission_voting_clfHardVote.csv', columns=['Id', 'Target'], index= False)","aaf4ac5c":"voting_clf = VotingClassifier(estimators= [('tree', tree_clf), ('gradiantBoost', gb_clf), ('logR', clf)], voting= 'soft')","e836beca":"## cross_val_score(voting_clf, X, y, scoring = 'f1_macro', cv= kfold)","df568e4b":"## prediction = cross_val_predict(voting_clf, X, y, cv=kfold)\n## confusion_matrix(y, prediction)","c5c07f32":"voting_clf.fit(X[:, select],y)\nprediction = voting_clf.predict(test[:, select]).astype(int)","8615e07c":"submission = pd.DataFrame({'Id': in_test['Id'], 'idhogar': in_test['idhogar'], 'isHead': in_test['parentesco1'] , 'Target':prediction})\nsubmission['Target'].value_counts(normalize = True)","80aec416":"submission.to_csv('.\/Submission_voting_clfSoftVote.csv', columns=['Id', 'Target'], index= False)","367a0285":"#### Has Refrigerator","990424fc":"###  Tablet Ownership\nThe `v18q1` field indicates number of tablets the household owns. We also have a seperate field to show whether the individual respondant owns a tablet. We'll check whether the variable `v18q`indicate that the individual has a tablet.","9167a458":"### Voting Classifier","f885ef3f":"#### Household Composition by Age Group","8ecda78d":"#### Mean Education of Head of Household","b1ab05ca":"#### Overcrowding by rooms","5d238eaa":"#### Overcrowding by bedroom","d692a406":"#### Feature Engineering\n**Per Capita Features**","222b3fac":"#### House Ownership","a5231954":"When the `meaneduc` is missing it is missing from all records for the 'household'. We can also try to calculate the `meaneduc` for each household by using the `escolari` value.","056176a5":"So we have 85 instances whether the `Target` is not consistant within the household. For these we will replace the `Target` with the value for `parentesco1`","68d69c58":"### Exploratory ","85549810":"### Tree","eed14397":"#### Monthly Rent Payment\nWe can see that there are 6860 instances where the monthly rent amount is `Nan`. We'll first check what the home ownership type is for these records.","3ad425c7":"A closer look shows that these are due to households where the members are less than 18 yrs. We'll set the mean value to zero for these two households, for the rest we can use the calculated values.","ddd1f37e":"#### Number of persons living in household","e162c254":"#### Building Material for Walls","2160333d":"#### Owns a Tablet","5fc93201":"So we can confirm that the `NaN` values in `V18q` corresponds to instances the individual does not have tablet","23ab0432":"#### Ratio of Children vs Adults in Household","474b2fcb":"#### Relationships Within Household","1cb25d7c":"#### Size of Household","02f49d51":"#### Monthly Rent Payment\nWe identified that the rent payment is only applicable for households where he ","287dabbf":"#### Squared Mean Education for household adults","7c6b041d":"#### Average education for adults","388f347a":"We can see that `NaN` values occure only when the ownership status is _'owned', 'precarious', 'assigned\/borrowed'_.  \nThere are 20,844 instances the home is owned by the family, and the rent field is `NaN`, which is understandable as no rent is paid is these istances. So we'll fill the `NaN` values with zero. \nWe need to identify whether rent can expect any values in the rent feild when the ownership is _'precarious' or 'assigned\/borrowed'_","c13b0ff6":"#### Distribution of The Target variable","12b3770c":"#### Households without head of household","5e92eb8b":"### Gradient Boost","ed4e9afc":"#### Years of Schooling","b4a0e2b9":"#### Inconsistant values within household","12d665ae":"`hogar_adul` variable also includes individuals over 65 years. So we'll create a seperate column to capture period within 19 and 65","61ae55d5":"**Maximum Education for Family**","7a111659":"#### Modeling","8db76f3f":"### Availability of Bathroom in the Household","b64a550f":"### Missing Values","dfd3993c":"**Marital Status of Head of Household**","c83fe65c":"#### Years behind in School","174b3e91":"#### Age by Income Level","a18b66a4":"**v2a1** Monthly rent  \n**v18q1** Owns a tablet  \n**rez_esc** Years behind in school  \n**meaneduc** average years of education for adults (18+)  \n**SQBmeaned** square of the mean years of education of adults (>=18) in the household  ","0b629dbe":"**Access to technology**","23878336":"### Logistic Regression","2e185954":"#### Education Level","adc64e34":"#### Number of rooms in the house"}}