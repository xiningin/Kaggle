{"cell_type":{"80a2bc55":"code","d4ecd0b8":"code","350be565":"code","891209f5":"code","e82a6d2e":"code","8bea72b5":"code","0f01428f":"code","4f0b18bc":"code","4721a793":"code","4cf379ff":"code","278b0626":"code","b6a29753":"code","8ccdf544":"code","10bac583":"code","137e9df7":"code","0df4c5bc":"code","0613244b":"code","35c30ba9":"code","242be23e":"code","29c84a37":"code","3d983bf7":"code","022ab882":"code","2aed4ace":"code","f8b220b9":"markdown","ccbd248f":"markdown","31d1d08d":"markdown","cb5b4bf1":"markdown","9a02b22c":"markdown","341eb0e4":"markdown","765fb10b":"markdown","35748d4a":"markdown"},"source":{"80a2bc55":"import os\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split","d4ecd0b8":"!ls ..\/input\/alaska2-image-steganalysis","350be565":"!ls ..\/input\/alaska2trainvalsplit","891209f5":"split_dir = '..\/input\/alaska2trainvalsplit'","e82a6d2e":"train_split = pd.read_csv(f'{split_dir}\/alaska2_train_df.csv')\ntrain_split.head()","8bea72b5":"def transform(x):\n    split = x.split('\/')\n    path = split[-2] + '\/' + split[-1]\n    return path","0f01428f":"train_split['ImageFileName'] = train_split['ImageFileName'].transform(transform)\ntrain_split.head()","4f0b18bc":"train_split['Label'].value_counts()","4721a793":"valid_split = pd.read_csv(f'{split_dir}\/alaska2_val_df.csv')\nvalid_split.head()","4cf379ff":"valid_split['ImageFileName'] = valid_split['ImageFileName'].transform(transform)\nvalid_split.head()","278b0626":"# combine train and valid split\ndf_all = pd.concat([train_split, valid_split])\ndf_all.head()","b6a29753":"# sanity check that train_split + valid_split = combined \ntrain_split.shape[0] + valid_split.shape[0] == df_all.shape[0]","8ccdf544":"def transform(x):\n    split = x.split('\/')[-2]\n    path = split[-2] + '\/' + split[-1]\n    return path","10bac583":"# make a column representing the stego-scheme\ndf_all['Stego'] = df_all['ImageFileName'].transform(lambda x: x.split('\/')[-2])","137e9df7":"df_all.head()","0df4c5bc":"df_all['Stego'].value_counts()","0613244b":"def qf_transform(x):\n    if x in [1,4,7]:\n        return 75\n    elif x in [2,5,8]:\n        return 90\n    elif x in [3,6,9]:\n        return 95\n    else:\n        return x","35c30ba9":"# make a column representing the quality factors; for Cover images, I've set quality factor = 0\ndf_all['quality_factor'] = df_all['Label'].transform(qf_transform)","242be23e":"df_all.head()","29c84a37":"df_all['quality_factor'].value_counts()","3d983bf7":"# save the combined df \ndf_all.to_csv('df_all.csv', index=False)","022ab882":"# split the data based on quality factor of 75, 90 and 95\nfor qf in [75, 90, 95]:\n    df_qf = df_all[df_all['quality_factor']==qf]\n    df_qf_tr, df_qf_val_test = train_test_split(df_qf, test_size=0.3, random_state=1234, stratify=df_qf['Label'].values)\n    df_qf_val, df_qf_test  = train_test_split(df_qf_val_test, test_size=0.2, random_state=1234, stratify=df_qf_val_test['Label'].values)\n    print(f'Split for quality factor of {qf}...')\n    #print(df_qf_tr['Label'].value_counts())\n    #print(df_qf_val['Label'].value_counts())\n    #print(df_qf_test['Label'].value_counts())\n    print('Shape of train split: ', df_qf_tr.shape)\n    print('Shape of valid split: ', df_qf_val.shape)\n    print('Shape of val_test split: ', df_qf_test.shape)\n    print('*'*35)\n    \n    #save the splits\n    df_qf_tr.to_csv(f'train_split_qf_{qf}.csv', index=False)\n    df_qf_val.to_csv(f'valid_split_qf_{qf}.csv', index=False)\n    df_qf_test.to_csv(f'test_val_split_qf_{qf}.csv', index=False)\n    ","2aed4ace":"# split the data based on stego scheme of JMiPOD, UERD, JUNIWARD\nfor stego in ['JMiPOD', 'UERD', 'JUNIWARD']:\n    df_stego = df_all[df_all['Stego']==stego]\n    df_stego_tr, df_stego_val_test = train_test_split(df_stego, test_size=0.3, random_state=1234, stratify=df_stego['Label'].values)\n    df_stego_val, df_stego_test  = train_test_split(df_stego_val_test, test_size=0.2, random_state=1234, stratify=df_stego_val_test['Label'].values)\n    print(f'Split for Stego type {stego}...')\n    #print(df_stego_tr['Label'].value_counts())\n    #print(df_stego_val['Label'].value_counts())\n    #print(df_stego_test['Label'].value_counts())\n    print('Shape of train split: ', df_stego_tr.shape)\n    print('Shape of valid split: ', df_stego_val.shape)\n    print('Shape of val_test split: ', df_stego_test.shape)\n    print('*'*35)\n    \n    #save the splits\n    df_stego_tr.to_csv(f'train_split_stego_{stego}.csv', index=False)\n    df_stego_val.to_csv(f'valid_split_stego_{stego}.csv', index=False)\n    df_stego_test.to_csv(f'test_val_split_stego_{stego}.csv', index=False)\n    ","f8b220b9":"These splits can be used to train different classifiers based on quality factor and stego-scheme using `train-valid` sets and finally combine them using `test_val` set. \n>This kernel just shows one of the many ways in which the dataset can be split. If you other ways, please let me know me in the comments","ccbd248f":"They split the dataset into TRN, VAL and TST for **each quality factor and each stego scheme**. In our case this would mean splitting the dataset separately based on each quality factor of `75, 90, 95` and also based on each stego scheme of `JMiPOD, UERD, JUNIWARD`. The pseudo-code for this split would look something like this:","31d1d08d":">The training set (TRN), validation set (VAL), and test set (TST)\ncontained respectively 42,500, 3,500, and 3,500 cover images (around\n500 cover images were not used because they were corrupted or\nfailed the processing pipeline). The TRN, VAL, and TST sets were\ncreated for each quality factor and each stego scheme in TILEdouble,\nTILEbase, and ARBITRARYbase","cb5b4bf1":"This kernel is my attempt to split the dataset based on each quality factor and stego scheme. I will call TST, VAL and TST as `train`, `valid` and `test_val` respectively and will use `sklean`'s `train_test_split` to split the dataset with a split percentage of `70`, `20` and `10` respectively. The `train-valid` split will be used for training different classifiers while the `test_val` split can be used for ensembling of those classifiers. ","9a02b22c":"I will modify the `ImageFileName` column as it contains the path of image files which is kaggle-style.","341eb0e4":"```python\n# split based on quality factors\nfor quality_factor in [75, 90, 95]:\n    split_data_into(TRN, VAL, TST)\n    \n# split based on stego scheme\nfor stego in ['JMiPOD', 'UERD', 'JUNIWARD']:\n    split_data_into(TRN, VAL, TST)\n\n```\n \n    ","765fb10b":"I will use the dataset from [this amazing kernel](https:\/\/www.kaggle.com\/meaninglesslives\/alaska2-cnn-multiclass-classifier) by @meaninglesslives as it contains information about quality factors.","35748d4a":"In an attempt to understand this competition better, I was reading the paper describing Alaska-I competition winner solution from [this](https:\/\/www.kaggle.com\/c\/alaska2-image-steganalysis\/discussion\/147039) discussion post. I noticed that out of many things that winner tried, one of them was splitting the dataset into three sets, namely training set (TRN), validation set (VAL), and test set (TST)."}}