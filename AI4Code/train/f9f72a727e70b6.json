{"cell_type":{"2ff21d2f":"code","d875c5a8":"code","932b6073":"code","495428a3":"code","ccdfe7a1":"code","ca50e35d":"code","8c34c44f":"code","28eaf987":"code","c34a4de7":"code","ea447620":"code","4a41fe25":"code","ad0722fa":"code","fc6e5c22":"code","e8a6459d":"code","cc86745c":"code","35c6a584":"code","e5da995a":"code","5b47fc44":"code","c0f4de01":"code","035275cd":"code","6b9caeb1":"code","d69cb933":"code","183f6ef2":"code","d24740eb":"code","124c4c75":"code","ca7e5ca2":"code","d6c02d61":"code","f629334a":"code","b14580d3":"markdown","1447dedc":"markdown","fc869c9b":"markdown","1797f9b7":"markdown","908fbdaa":"markdown","ec30fed6":"markdown","e311e9fe":"markdown","710e6726":"markdown","9d92fc67":"markdown","1392aaa9":"markdown","39143809":"markdown"},"source":{"2ff21d2f":"import sklearn\nprint(format(sklearn.__version__))","d875c5a8":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport datetime as dt\nfrom sklearn import linear_model, svm\nfrom sklearn.metrics import mean_squared_error, r2_score\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.model_selection import GridSearchCV\nfrom plotly.offline import iplot, init_notebook_mode\nfrom plotly.graph_objs import Scatter, Figure, Layout\ninit_notebook_mode()\nimport plotly.graph_objs as go\nimport numpy as np\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","932b6073":"abril = pd.read_csv(\n    \"..\/input\/2290_01042018_30042018.csv\",\n    delimiter=\",\",\n    dtype = {\n        \"numero_de_serie\":int,\n        \"milissegundo\":int,\n        \"faixa\":int,\n        \"velocidade_entrada\":int,\n        \"velocidade_saida\":int,\n        \"classificacao\":int,\n        \"tamanho\": float,\n        \"placa\":str,\n        \"tempo_ocupacao_laco\":int\n    },\n    parse_dates=[\"data_hora\"]\n)","495428a3":"marco = pd.read_csv(\n    \"..\/input\/2290_01032018_31032018.csv\",\n    delimiter=\",\",\n    dtype = {\n        \"numero_de_serie\":int,\n        \"milissegundo\":int,\n        \"faixa\":int,\n        \"velocidade_entrada\":int,\n        \"velocidade_saida\":int,\n        \"classificacao\":int,\n        \"tamanho\": float,\n        \"placa\":str,\n        \"tempo_ocupacao_laco\":int\n    },\n    parse_dates=[\"data_hora\"]\n)","ccdfe7a1":"maio = pd.read_csv(\n    \"..\/input\/2290_01052016_31052016.csv\",\n    delimiter=\",\",\n    dtype = {\n        \"numero_de_serie\":int,\n        \"milissegundo\":int,\n        \"faixa\":int,\n        \"velocidade_entrada\":int,\n        \"velocidade_saida\":int,\n        \"classificacao\":int,\n        \"tamanho\": float,\n        \"placa\":str,\n        \"tempo_ocupacao_laco\":int\n    },\n    parse_dates=[\"data_hora\"]\n)","ca50e35d":"def SeparaFaixas(tabela, dia, faixa):\n    tabela['datahora_mili'] = tabela['data_hora'] + pd.to_timedelta(tabela['milissegundo'], unit='ms')\n    tabela['dia_semana'] = tabela[\"data_hora\"].dt.dayofweek\n    tabela_sep = tabela[tabela['dia_semana'] == dia].copy()\n    tabela_fx = tabela_sep[tabela_sep['faixa']==faixa][['datahora_mili', 'velocidade_entrada', 'velocidade_saida']]\n    \n    tabela_fx['time_diff'] = tabela_fx['datahora_mili'].diff()\n    tabela_fx['velocidade_m\/s'] = np.round(tabela_fx['velocidade_entrada']\/3.6, 2)\n    tabela_fx['timediff_seconds'] = tabela_fx['time_diff'].dt.total_seconds()\n    tabela_fx['espacamento_metros'] = tabela_fx['velocidade_m\/s'] * tabela_fx['timediff_seconds']\n    tabela_fx = tabela_fx[np.isfinite(tabela_fx['velocidade_m\/s'])]\n    tabela_fx.set_index('datahora_mili', inplace = True, drop = True)\n    tabela_fx_grouped = tabela_fx.resample(\"10T\", label=\"left\", closed=\"right\")\n    return AgrupaDados(tabela_fx_grouped, dia)","8c34c44f":"def AgrupaDados(tab, dia):\n    tab_10min = pd.DataFrame()\n    tab_10min['espacamento_medio'] = tab.mean()['espacamento_metros']\n    tab_10min['densidade_veic\/km'] = (1\/tab_10min[\"espacamento_medio\"]) * 1000\n    tab_10min = tab_10min[tab_10min.index.get_level_values('datahora_mili').dayofweek == dia]\n    return tab_10min","28eaf987":"def XYArraySplit(tab_treino, tab_teste):\n    x = pd.DataFrame()\n    X = pd.DataFrame()\n    y = pd.DataFrame()\n    Y = pd.DataFrame()\n    \n    y['Den. Atual'] = [row[0] for row in tab_treino]\n    y['Den. 10mins'] = [row[1] for row in tab_treino]\n    y['Den. 20mins'] = [row[2] for row in tab_treino]\n    y['Den. 30mins'] = [row[3] for row in tab_treino]\n    Y['Den. Atual'] = [row[0] for row in tab_teste]\n    Y['Den. 10mins'] = [row[1] for row in tab_teste]\n    Y['Den. 20mins'] = [row[2] for row in tab_teste]\n    Y['Den. 30mins'] = [row[3] for row in tab_teste]\n    x['den-3'] = [row[4] for row in tab_treino]\n    x['den-4'] = [row[5] for row in tab_treino]\n    x['den-5'] = [row[6] for row in tab_treino]\n    x['semana_anterior'] = [row[7] for row in tab_treino]\n    x['semana_anterior-1'] = [row[8] for row in tab_treino]\n    X['den-3'] = [row[4] for row in tab_teste]\n    X['den-4'] = [row[5] for row in tab_teste]\n    X['den-5'] = [row[6] for row in tab_teste]\n    X['semana_anterior'] = [row[7] for row in tab_teste]\n    X['semana_anterior-1'] = [row[8] for row in tab_teste]\n    \n    return x, y, X, Y","c34a4de7":"def TabelaDePrevisao(tab, dia_semana):\n    #tab = Filtrar(dados, dia_semana)\n    tabela = pd.DataFrame()\n    tabela['den'] = tab['densidade_veic\/km']\n    tabela['den 10mins'] = tab['densidade_veic\/km'].shift(-1)\n    tabela['den 20mins'] = tab['densidade_veic\/km'].shift(-2)\n    tabela['den 30mins'] = tab['densidade_veic\/km'].shift(-3)\n    #tabela = tabela[tabela['den_atual'] > 0] #retirar essa linha caso queira contar as m\u00e9dias 0\n    tabela['den-3'] = tab['densidade_veic\/km'].shift(3)\n    tabela['den-4'] = tab['densidade_veic\/km'].shift(4)\n    tabela['den-5'] = tab['densidade_veic\/km'].shift(5)\n    tabela['semana_anterior'] = tab['densidade_veic\/km'].shift(int((60 \/ 10) * 24))\n    tabela['semana_anterior-1'] = tab['densidade_veic\/km'].shift(int((60 \/ 10) * 24) + 1)\n    tabela_filtrada = np.round(Filtrar(tabela, dia_semana), 2)\n    #tabela_filtrada = tabela_filtrada[tabela_filtrada >= 0]\n    return tabela_filtrada","ea447620":"def Filtrar(dados, dia_semana):\n    dados_filtrado = dados[np.isfinite(dados)]\n    dados_filtrado['dia_semana'] = dados_filtrado.index.get_level_values('datahora_mili').dayofweek\n    dados_filtrado = dados_filtrado[dados_filtrado.index.dayofweek == dia_semana]\n    dados_filtrado = dados_filtrado.drop('dia_semana', axis=1)\n    return dados_filtrado","4a41fe25":"def Impute(tab_treino, tab_teste):\n    imputer = SimpleImputer(missing_values=np.nan, strategy='most_frequent')\n    iTreino = imputer.fit_transform(tab_treino)\n    iTeste = imputer.transform(tab_teste)\n    return iTreino, iTeste","ad0722fa":"def MontarGrafico(tabela) :\n    i = 0\n    grafico = []\n    dias = np.unique(tabela.index.get_level_values('datahora_mili').day)\n    for len in dias :\n        tabela_grafico = tabela[tabela.index.get_level_values('datahora_mili').day == dias[i]]\n        trace = go.Scatter(\n            x = tabela_grafico.index.get_level_values('datahora_mili').time,\n            y = tabela_grafico['densidade_veic\/km'],\n            mode = \"lines\",\n            name = \"Densidade - dia %s\" % dias[i]\n        )\n        grafico.append(trace)\n        i += 1\n    return grafico","fc6e5c22":"def GraficoPredissao(tabela, predicao,indice) :\n    grafico = []\n    dias = np.unique(tabela.index.get_level_values('datahora_mili').day)\n    tabela_grafico = tabela[tabela.index.get_level_values('datahora_mili').day == dias[indice]]\n    trace = go.Scatter(\n        x = tabela_grafico.index.get_level_values('datahora_mili').time,\n        y = tabela_grafico['den'],\n        mode = \"lines\",\n        name = \"Densidade - dia %s\" % dias[indice]\n    )\n    grafico.append(trace)\n    predicao_grafico = predicao[predicao.index.get_level_values('datahora_mili').day == dias[indice]]\n    trace = go.Scatter(\n        x = predicao_grafico.index.get_level_values('datahora_mili').time,\n        y =predicao_grafico['Den. 10mins'],\n        mode = \"lines\",\n        name = \"Previs\u00e3o 10mins - dia %s\" % dias[indice]\n    )\n    grafico.append(trace)\n    trace = go.Scatter(\n        x = predicao_grafico.index.get_level_values('datahora_mili').time,\n        y =predicao_grafico['Den. 20mins'],\n        mode = \"lines\",\n        name = \"Previs\u00e3o 20mins - dia %s\" % dias[indice]\n    )\n    grafico.append(trace)\n    trace = go.Scatter(\n        x = predicao_grafico.index.get_level_values('datahora_mili').time,\n        y =predicao_grafico['Den. 30mins'],\n        mode = \"lines\",\n        name = \"Previs\u00e3o 30mins - dia %s\" % dias[indice]\n    )\n    grafico.append(trace)\n    layout = Layout(\n        title = \"Previs\u00e3o de Densidade\",\n        xaxis=dict(title=\"Tempo\"),\n        yaxis=dict(title=\"Densidade [Carros\/km]\")\n    )\n    graph = Figure(data = grafico, layout = layout)\n    return graph","e8a6459d":"def PRegressao(x_treino, x_teste, y_treino, y_teste, periodo, grau):\n    reg = make_pipeline(PolynomialFeatures(grau), linear_model.LinearRegression())\n    #reg = linear_model.LinearRegression()\n    reg.fit(x_treino, y_treino)\n    y_predissao = pd.DataFrame()\n    y_predissao['valor'] = reg.predict(x_teste)\n    #y_predissao['erro %d0mins' % periodo] = mean_squared_error(y_teste, y_predissao['valor'])\n    #y_predissao['varia\u00e7\u00e3o %d0mins' % periodo] = r2_score(y_teste, y_predissao['valor'])\n    print(r2_score(y_teste, y_predissao['valor']))\n    return y_predissao","cc86745c":"def Ridge(x_treino, x_teste, y_treino, y_teste, grau) :  \n    #ridge = svm.SVR(gamma = 'auto', kernel='linear')\n    ridge = make_pipeline(PolynomialFeatures(grau), linear_model.Ridge(alpha = 0.01, fit_intercept = False))\n    ridge.fit(x_treino, y_treino)\n    y_predissao = pd.DataFrame()\n    y_predissao['valor'] = ridge.predict(x_teste)\n    #y_predissao['erro'] = mean_squared_error(y_teste, y_predissao['valor'])\n    #y_predissao['varia\u00e7\u00e3o'] = r2_score(y_teste, y_predissao['valor'])\n    print(r2_score(y_teste, y_predissao['valor']))\n    \n    return y_predissao","35c6a584":"def SVR(x_treino, x_teste, y_treino, y_teste, grau) :  \n    svr = svm.SVR(gamma = 'auto', kernel='linear')\n    #svr = make_pipeline(PolynomialFeatures(grau), svm.SVR(gamma='auto', kernel='linear'))\n    svr.fit(x_treino, y_treino)\n    y_predissao = pd.DataFrame()\n    y_predissao['valor'] = svr.predict(x_teste)\n    #y_predissao['erro'] = mean_squared_error(y_teste, y_predissao['valor'])\n    #y_predissao['varia\u00e7\u00e3o'] = r2_score(y_teste, y_predissao['valor'])\n    print(r2_score(y_teste, y_predissao['valor']))\n    \n    return y_predissao","e5da995a":"def LSVR(x_treino, x_teste, y_treino, y_teste) :    \n    lsvr = svm.LinearSVR(epsilon = 0, max_iter=90000)\n    lsvr.fit(x_treino, y_treino)\n    y_predissao = pd.DataFrame()\n    y_predissao['valor'] = lsvr.predict(x_teste)\n    #y_predissao['erro'] = mean_squared_error(y_teste, y_predissao['valor'])\n    #y_predissao['varia\u00e7\u00e3o'] = r2_score(y_teste, y_predissao['valor'])\n    print(r2_score(y_teste, y_predissao['valor']))\n    \n    return y_predissao","5b47fc44":"def PreverPRegressao(tabela_treino, tabela_teste, grau) :\n    tab_treino, tab_teste = Impute(tabela_treino, tabela_teste)\n    #tab_treino = tabela_treino.fillna(np.mean(tabela_treino['den']))\n    #tab_teste = tabela_teste.fillna(np.mean(tabela_teste['den']))\n    predissao = pd.DataFrame()\n    x_treino, y_treino, x_teste, y_teste = XYArraySplit(tab_treino, tab_teste)\n    predissao[\"Den. Atual\"] = y_teste['Den. Atual']\n    predissao[\"Den. 10mins\"] = np.round(PRegressao(x_treino, x_teste, y_treino[\"Den. 10mins\"], y_teste[\"Den. 10mins\"], 1, grau), 2)\n    predissao[\"Den. 20mins\"] = np.round(PRegressao(x_treino, x_teste, y_treino[\"Den. 20mins\"], y_teste[\"Den. 20mins\"], 2, grau), 2)\n    predissao[\"Den. 30mins\"] = np.round(PRegressao(x_treino, x_teste, y_treino[\"Den. 30mins\"], y_teste[\"Den. 30mins\"], 3, grau), 2)\n    predissao.set_index(tabela_teste.index, inplace = True, drop = False)\n    return predissao","c0f4de01":"def PreverSVR(tabela_treino, tabela_teste, grau) :\n    tab_treino, tab_teste = Impute(tabela_treino, tabela_teste)\n    predissao = pd.DataFrame()\n    x_treino, y_treino, x_teste, y_teste = XYArraySplit(tab_treino, tab_teste)\n    predissao['Den. Atual'] = y_teste['Den. Atual']\n    predissao['Den. 10mins'] = np.round(SVR(x_treino, x_teste, y_treino['Den. 10mins'], y_teste['Den. 10mins'], grau), 2)\n    predissao['Den. 20mins'] = np.round(SVR(x_treino, x_teste, y_treino['Den. 20mins'], y_teste['Den. 20mins'], grau), 2)\n    predissao['Den. 30mins'] = np.round(SVR(x_treino, x_teste, y_treino['Den. 30mins'], y_teste['Den. 30mins'], grau), 2)\n    predissao.set_index(tabela_teste.index, inplace = True, drop = False)\n    return predissao","035275cd":"def PreverLSVR(tabela_treino, tabela_teste, grau) :\n    tab_treino, tab_teste = Impute(tabela_treino, tabela_teste)\n    predissao = pd.DataFrame()\n    x_treino, y_treino, x_teste, y_teste = XYArraySplit(tab_treino, tab_teste)\n    predissao['Den. Atual'] = y_teste['Den. Atual']\n    predissao['Den. 10mins'] = np.round(LSVR(x_treino, x_teste, y_treino['Den. 10mins'], y_teste['Den. 10mins']), 2)\n    predissao['Den. 20mins'] = np.round(LSVR(x_treino, x_teste, y_treino['Den. 20mins'], y_teste['Den. 20mins']), 2)\n    predissao['Den. 30mins'] = np.round(LSVR(x_treino, x_teste, y_treino['Den. 30mins'], y_teste['Den. 30mins']), 2)\n    predissao.set_index(tabela_teste.index, inplace = True, drop = False)\n    return predissao","6b9caeb1":"def PreverRidge(tabela_treino, tabela_teste, grau) :\n    tab_treino, tab_teste = Impute(tabela_treino, tabela_teste)\n    predissao = pd.DataFrame()\n    x_treino, y_treino, x_teste, y_teste = XYArraySplit(tab_treino, tab_teste)\n    predissao['Den. Atual'] = y_teste['Den. Atual']\n    predissao['Den. 10mins'] = np.round(Ridge(x_treino, x_teste, y_treino['Den. 10mins'], y_teste['Den. 10mins'], grau), 2)\n    predissao['Den. 20mins'] = np.round(Ridge(x_treino, x_teste, y_treino['Den. 20mins'], y_teste['Den. 20mins'], grau), 2)\n    predissao['Den. 30mins'] = np.round(Ridge(x_treino, x_teste, y_treino['Den. 30mins'], y_teste['Den. 30mins'], grau), 2)\n    predissao.set_index(tabela_teste.index, inplace = True, drop = False)\n    return predissao","d69cb933":"dia = 1\nfaixa = 2\ngrau = 2\n\nteste = TabelaDePrevisao(SeparaFaixas(maio, dia, faixa), dia)\ntreino = TabelaDePrevisao(SeparaFaixas(marco, dia, faixa), dia)\nregr = PreverPRegressao(treino, teste, grau)\n\niplot(GraficoPredissao(teste, regr, 2))\n","183f6ef2":"dia = 0\nfaixa = 1\ngrau = 1\n\nteste = TabelaDePrevisao(SeparaFaixas(maio, dia, faixa), dia)\ntreino = TabelaDePrevisao(SeparaFaixas(marco, dia, faixa), dia)\nregr = PreverSVR(treino, teste, grau)\n\niplot(GraficoPredissao(teste, regr, 1))","d24740eb":"dia = 0\nfaixa = 1\ngrau = 1\n\nteste = TabelaDePrevisao(SeparaFaixas(maio, dia, faixa), dia)\ntreino = TabelaDePrevisao(SeparaFaixas(marco, dia, faixa), dia)\nregr = PreverLSVR(treino, teste, grau)\n\niplot(GraficoPredissao(teste, regr, 1))","124c4c75":"dia = 0\nfaixa = 1\ngrau = 2\n\nteste = TabelaDePrevisao(SeparaFaixas(maio, dia, faixa), dia)\ntreino = TabelaDePrevisao(SeparaFaixas(marco, dia, faixa), dia)\nregr = PreverRidge(treino, teste, grau)\n\niplot(GraficoPredissao(teste, regr, 3))","ca7e5ca2":"dia = 0\nfaixa = 2\n\niplot(MontarGrafico(SeparaFaixas(abril, dia, faixa)))","d6c02d61":"dia = 1\nfaixa = 2\n\niplot(MontarGrafico(SeparaFaixas(abril, dia, faixa)))","f629334a":"dia = 3\nfaixa = 2\n\niplot(MontarGrafico(SeparaFaixas(abril, dia, faixa)))","b14580d3":"**Gr\u00e1ficos da densidade dos dias do m\u00eas**","1447dedc":"**Previs\u00e3o por Ridge**","fc869c9b":"**Separar a faixa a ser avaliada e calcular a densidade**","1797f9b7":"**Separar as bases de dados em X e Y para treino e teste do algor\u00edtmo**","908fbdaa":"**Previs\u00e3o por Regress\u00e3o Polinomial**","ec30fed6":"**Organiza\u00e7\u00e3o e filtro dos dados para a previs\u00e3o**","e311e9fe":"**Algor\u00edtmos de previs\u00e3o**","710e6726":"**Entrada de Tabelas**","9d92fc67":"**Previs\u00e3o por SVR Linear**","1392aaa9":"**Previs\u00e3o por Support Vector Regression (SVR)**","39143809":"**Fun\u00e7\u00f5es para montagem de gr\u00e1ficos**"}}