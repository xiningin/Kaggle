{"cell_type":{"b354af7b":"code","c2f423b3":"code","c453eb77":"code","0c2f2946":"code","90c165fe":"code","f3598162":"code","a7dacac4":"code","c047e496":"code","af28dd83":"code","cb82191c":"code","f8f1c580":"code","8fb39e84":"code","328e8d18":"code","6b168262":"code","14f58e95":"code","10b46c3c":"code","9b3bd9fb":"markdown","a3855d33":"markdown","d4dd5d59":"markdown","83a2855a":"markdown","a4dcee1d":"markdown"},"source":{"b354af7b":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom tensorflow.keras import Sequential\nfrom tensorflow.keras.layers import LSTM, Dense\nfrom sklearn.preprocessing import MinMaxScaler","c2f423b3":"data = pd.read_csv(\"\/kaggle\/input\/zoom-stock-price-all-time\/Zoom.csv\")\ndata.head()","c453eb77":"# removing duplicate entries\ndata.drop_duplicates(inplace=True)\n\n# check for null entries\nprint(data.isna().sum())","0c2f2946":"# setting date as index for the dataset\ndata.set_index(keys=\"Date\", inplace=True)","90c165fe":"number_of_entries = data.shape[0]\n\n# Dividing the training and test set in the ratio of 3:1\ntraining_size = int(number_of_entries*(0.75))\ntraining_set, test_set = data[:training_size], data[training_size:]\n\n# Using the MinMax scaler to scale the dataset in the range [0, 1]\nscaler = MinMaxScaler()\n\ntraining_set[training_set.columns] = scaler.fit_transform(training_set)\ntest_set[test_set.columns] = scaler.transform(test_set)","f3598162":"def create_dataset(dataset, freq=30):\n    \"\"\"\n    Function to return two numpy arrays, a 2d array containing the features\n    and a 1d array containing all the targets\n    Here, features are the Opening price of the stock for a set of days. \n    The number of days is defined by 'freq', by default, I've set it\n    to 30 so we collect the opening price for 30 consecutive day and the price\n    of the 31st day is treated as our target.\n    \n    For example:\n    ----------------------------------------------------------------------------------------------\n    Day1 | Day2 | .................................................. Day30 | Day31 | Day32 | Day33\n    ----------------------------------------------------------------------------------------------\n     a   |  b   | ...................................................   w  |   x   |   y   |   z\n    ----------------------------------------------------------------------------------------------\n    \n    feature[0] = [a, b, ....................................., w]        target[0] = [x]\n    feature[1] = [b, ........................................, w, x]     target[1] = [y]\n    \n    \"\"\"\n    train_data_features = []\n    train_data_target = []\n    index = 0\n    while True:\n        if index+freq >= len(dataset):\n            return np.array(train_data_features), np.array(train_data_target)\n        else:\n            temp = []\n            temp = dataset[index:index+freq]\n            train_data_features.append(temp)\n            train_data_target.append(dataset[index+freq])\n            index += 1","a7dacac4":"X_train, y_train = create_dataset(training_set['Open'])\n\n# We reshape the training set into a 3d array as the tensorflow model expects data in 3d format\nX_train = X_train.reshape(X_train.shape[0], X_train.shape[1], -1)","c047e496":"X_test, y_test = create_dataset(test_set['Open'])\nX_test = X_test.reshape(X_test.shape[0], X_test.shape[1], -1)","af28dd83":"model = Sequential()\nmodel.add(LSTM(30, input_shape=(X_train.shape[1], X_train.shape[2]), return_sequences=True))\nmodel.add(LSTM(30, return_sequences=True))\nmodel.add(LSTM(30))\nmodel.add(Dense(1))\nmodel.compile(optimizer='adam', loss='mean_squared_error')","cb82191c":"model.summary()","f8f1c580":"model.fit(X_train, y_train, epochs=300, batch_size=64)","8fb39e84":"y_pred = model.predict(X_test)","328e8d18":"from sklearn.metrics import r2_score\nr2_score(y_test, y_pred)","6b168262":"plt.figure(figsize=(20, 10))\nplt.plot(training_set['Open'], label=\"Training Set\")\nplt.plot(range(len(training_set['Open']), len(training_set['Open'])+len(test_set['Open'])), test_set['Open'], label=\"Actual Test Set\")\nplt.plot(range(data.shape[0]-len(y_pred), data.shape[0]), y_pred, label=\"Predicted Test Set\")\nplt.legend()","14f58e95":"input_data = y_test[-30:]\nfuture_price = []\nfor i in range(2):\n    output_data = model.predict(np.array(input_data).reshape(1, -1, 1))\n    input_data = input_data[1:] + output_data[0]\n    future_price.append(output_data[0][0])\nprint(future_price)","10b46c3c":"plt.figure(figsize=(20, 10))\n# plt.plot(training_set['Open'], label=\"Training Set\")\n# plt.plot(range(len(training_set['Open']), len(training_set['Open'])+len(test_set['Open'])), test_set['Open'], label=\"Actual Test Set\")\nplt.plot(range(data.shape[0]-len(y_pred), data.shape[0]), y_pred, label=\"Predicted Test Set\")\nplt.plot(range(data.shape[0], data.shape[0]+2), future_price, label=\"Predicted future price\")\nplt.legend()","9b3bd9fb":"# We are going to use the available stock price record of \"Zoom\" and will use Tensorflow's LSTM to design a model that will try to predict the future stock price. We'll just consider the stocks Opening price from the dataset","a3855d33":"# Predicting future Opening price. I wish it was this easy ;)\n\n**The current implementation doesn't seem to work as the future prices sky-rocketed ;) Will try again later**","d4dd5d59":"# Printing the r2 score","83a2855a":"# Data Cleanup","a4dcee1d":"As there are no null records we don't need to perform any cleanup"}}