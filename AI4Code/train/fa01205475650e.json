{"cell_type":{"f54e81d3":"code","c9b2d17f":"code","e074f413":"code","1b3e7837":"code","e0395f4f":"code","a49d0197":"code","b60e19ec":"code","da1b4078":"code","252c1748":"code","feb93ee3":"code","3bd38904":"code","e4f06969":"code","ad17f75b":"code","39ca367e":"code","eba5e901":"code","cff28cd0":"code","157d2e43":"code","0e522bd7":"code","e10bfc03":"markdown","dcdcd3a1":"markdown","5197bb06":"markdown","432b64bc":"markdown","c6787636":"markdown","b197743b":"markdown","f3570a69":"markdown","e2dd5951":"markdown"},"source":{"f54e81d3":"# Import packages and modules\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport re\nimport plotly.express as px\n\n# Review the dataset's stored in the input library\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Switch on setting to allow all outputs to be displayed\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"all\"\n\n# Adjust options for displaying the float columns\npd.options.display.float_format = '{:,.2f}'.format","c9b2d17f":"# Import the dataset\ndf = pd.read_csv('\/kaggle\/input\/residential-property-prices-2020\/PPR-2020.csv')","e074f413":"# Preview the data\ndf.head()\ndf.shape\ndf.dtypes\ndf.describe(include='all')","1b3e7837":"# Review columns and rename to remove the spaces\ndf.columns # columns before adjustment\ndf.columns = df.columns.str.replace(' ', '_') # changing the spaces into underscores\ndf.columns # columns after adjustment","e0395f4f":"# Rename specific columns\ndf = df.rename(columns={'Date_of_Sale_(dd\/mm\/yyyy)':'Date_of_Sale',\n                        'Price_(\ufffd)':'Price'\n                       })\ndf.head()","a49d0197":"# Reviewing memory usage aims to show the size and type of each column. Understanding if a better column format can be used will help with future analysis\n# if the dataset increases in size. Also it allows us to make more efficient use of the memory\ndf.info(memory_usage='deep')","b60e19ec":"# Convert the variables to more efficient versions of data type\ndf['Price'] = df['Price'].str[1:]\ndf['Price'] = df['Price'].str.replace(',','').astype(float)\ndf.head()","da1b4078":"# Check to see if the price data type has been changed correctly\ndf.dtypes\ndf.describe()","252c1748":"# Check to see if the columns can be converted to categories. If there is a low cardinality (proportion of unique values) then it \n# makes sense to convert the column data type\ncardinality = df.apply(pd.Series.nunique) # Display the cardinality for each column\ncardinality","feb93ee3":"# Extract the column name which matches the column index value being reviewed\ncat_val = [i for i in (df.apply(pd.Series.nunique)) if i <= 3]\ncat_cols = [df.columns[i] for i, n in enumerate(df.apply(pd.Series.nunique)) if n <=3] # adding the enumerate method provides an index value\ncat_val\ncat_cols\n\n# Convert the cat_cols list to category data type\ndf[cat_cols] = df[cat_cols].astype('category')\ndf.dtypes","3bd38904":"# Review the new size of the dataset\ndf.info(memory_usage='deep')","e4f06969":"# Convert the Date_of_Sale to date\ndf['Date_of_Sale'] = df['Date_of_Sale'].apply(pd.to_datetime)","ad17f75b":"df.head()\ndf.dtypes\ndf.info(memory_usage='deep')","39ca367e":"# Understand the missing values by column\ndf.isnull().sum()\n\n# Create method to review the proportion of missing values by each column\ndef missing_columns(df):\n    for col in df.columns:\n        miss = df.isnull().sum()\n        miss_per = miss \/ len(df)\n    return miss_per\n\nmissing_columns(df)","eba5e901":"# Drop the columns not required\ndf = df.drop(columns=['Property_Size_Description'])\ndf.head()","cff28cd0":"# Price by the date of sale\nfig = px.bar(df, x='Date_of_Sale', y='Price', title='Price by Time')\nfig.show()","157d2e43":"# Price grouped by month and county\nprice_county = df.groupby([df['Date_of_Sale'].dt.month, 'County'])['Price'].mean()\nprice_county = price_county.reset_index()\nprice_county","0e522bd7":"# Display the price by date of sale with county applied as a color\nfig = px.bar(price_county, x='Date_of_Sale', y='Price', color='County', title='Average Price by Time')\nfig.show()","e10bfc03":"# Property Price Register EDA\n***\nAIM : perform exploratory data analysis to better understand the story that the data is providing\n***\nTasks\n* Review each of the input variables\n* Understand the key trends emerging\n* Begin to perform some data cleaning to help with future analysis\n***\nTODO\n* Complete address cleaning process\n* Develop automated visualizations\n* Include external data sources (location details, House Price Indices)","dcdcd3a1":"## 3. Initial EDA visualizations","5197bb06":"Can drop the Property_Size_Description column as this has a large number of missing values. Will have to review the counties which are showing the largest number of available values for the Postal_Code column.","432b64bc":"### 2b. Missing value review","c6787636":"From this output it makes sense to convert the final four columns to category data types","b197743b":"## 2 Import data","f3570a69":"### 2a. Initial dataset review\n***\nAiming to understand what parameters are required to ensure that the initial import performs as much initial data cleaning as possible.","e2dd5951":"## 1 Setup Notebook"}}