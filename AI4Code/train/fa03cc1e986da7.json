{"cell_type":{"9cb40756":"code","f0e51d22":"code","c09da493":"code","dab1b46b":"code","b7b4dbe2":"code","b9514f14":"code","024c29f5":"code","27d3dd1b":"code","3c2f2e33":"code","36134405":"code","b10de571":"code","30e18949":"code","e4847b55":"code","bca734bb":"code","3c9aca05":"code","757fd728":"code","fd3f773f":"code","25bdb0fa":"code","b658209d":"code","6fcfae65":"code","220e8755":"code","3e0b8f7c":"code","c2780bda":"code","999395d7":"code","f423ab37":"code","4e4cbe8f":"code","6297b4f9":"code","1c80aa14":"code","91333d9e":"code","4c657c1f":"code","2402cac0":"code","d808958a":"code","18d90231":"code","33276e80":"code","73de8ff0":"code","ba81ed27":"code","e800a057":"code","29e5d4fb":"code","96ff981d":"markdown","5c3a0184":"markdown","35cb1000":"markdown","5d661694":"markdown","8fadbda1":"markdown","879f1f7e":"markdown","f5a12dd6":"markdown","5d202782":"markdown","1bbe81b9":"markdown","bac1aa65":"markdown","97babd94":"markdown","55f59072":"markdown"},"source":{"9cb40756":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport missingno as msno","f0e51d22":"# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c09da493":"train_df = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\n\ntrain_df.head(10)","dab1b46b":"train_df.info()","b7b4dbe2":"train_df[\"Ticket\"].value_counts()","b9514f14":"train_df[\"Cabin\"].value_counts()","024c29f5":"train_df[\"Fare\"].value_counts()","27d3dd1b":"sns.histplot(data=train_df, x=\"Age\", hue=\"Survived\", multiple=\"stack\")","3c2f2e33":"sns.histplot(data=train_df, x=\"Sex\", hue=\"Survived\", multiple=\"dodge\", shrink=.8)","36134405":"#Boxplotting Age\nax = sns.boxplot(x=\"Sex\", y=\"Age\", data = train_df)","b10de571":"#Copies of train_df and test_df\ntrain_tr = train_df.copy()\ntest_tr = test_df.copy()","30e18949":"train_tr['Age'].fillna(train_tr['Age'].median(), inplace=True)\ntest_tr['Age'].fillna(test_tr['Age'].median(), inplace=True)\n\ntrain_tr.isnull().sum()\n","e4847b55":"test_tr.isnull().sum()","bca734bb":"test_tr['Fare'].fillna(test_tr['Fare'].median(), inplace=True)","3c9aca05":"#Lets have a look at the missing values matrix\nmsno.matrix(train_tr)","757fd728":"sns.histplot(data=train_tr, x=\"Embarked\", hue=\"Survived\", multiple=\"dodge\", shrink=.8)","fd3f773f":"#Relationship between age and passenger class\nplt.figure(figsize=(8,5))\nsns.boxplot(x='Pclass',y='Age',data=train_tr, palette='rainbow')\nplt.title(\"Age by Passenger Class, Titanic\")","25bdb0fa":"plt.figure(figsize=(8,12))\nsns.set_theme(style=\"ticks\")\nsns.catplot(data=train_tr, x=\"Pclass\", y=\"Fare\", hue=\"Survived\")","b658209d":"train_tr[\"Parch\"].value_counts()","6fcfae65":"train_tr[\"SibSp\"].value_counts()","220e8755":"sns.countplot(data=train_tr, x=\"Parch\", hue=\"Survived\")","3e0b8f7c":"sns.histplot(data=train_tr, x=\"SibSp\", hue=\"Survived\", binwidth=.8)","c2780bda":"train_tr.drop(['Cabin', 'PassengerId', 'Name', 'Ticket'], axis=1, inplace=True)\ntest_tr.drop(['Cabin', 'PassengerId', 'Name', 'Ticket'], axis=1, inplace=True)\n","999395d7":"train_tr.head()","f423ab37":"train_tr['Sex']=train_tr['Sex'].replace('male', 0)\ntrain_tr['Sex']=train_tr['Sex'].replace('female', 1)\ntrain_tr.head()","4e4cbe8f":"test_tr['Sex']=test_tr['Sex'].replace('male', 0)\ntest_tr['Sex']=test_tr['Sex'].replace('female', 1)\ntest_tr.head()","6297b4f9":"#Split between input features and output labels for training\ny_train = train_tr.iloc[:, 0]\nX_train = train_tr.iloc[:, 1:]","1c80aa14":"#Encoding of categorical features\nX_train = pd.get_dummies(X_train, columns=['Embarked'])","91333d9e":"X_train.head()","4c657c1f":"#Normalization of numerical features\nfrom sklearn.preprocessing import MinMaxScaler\nminmax = MinMaxScaler()\n\ntrain_minmax = minmax.fit_transform(X_train)\n\nX_train = pd.DataFrame(train_minmax, columns=X_train.columns)\nX_train.head()","2402cac0":"#We do the same transformations on the test set\nX_test = test_tr.copy()\n\n#Encoding of categorical features\nX_test = pd.get_dummies(X_test, columns=['Embarked'])\n\n\n#Normalization of numerical features\nfrom sklearn.preprocessing import MinMaxScaler\nminmax = MinMaxScaler()\n\ntrain_minmax = minmax.fit_transform(X_test)\n\nX_test = pd.DataFrame(train_minmax, columns=X_test.columns)\nX_test.head()","d808958a":"#1. Decision Tree Model\nfrom sklearn.tree import DecisionTreeClassifier\n\ntree_model = DecisionTreeClassifier(random_state=1)\n\ntree_model.fit(X_train, y_train)","18d90231":"#2. Random Forest model\nfrom sklearn.ensemble import RandomForestClassifier\n\nrandom_model = RandomForestClassifier(random_state=1)\n\nrandom_model.fit(X_train, y_train)","33276e80":"from sklearn.neighbors import KNeighborsClassifier\n\nknn_model = KNeighborsClassifier()\n\nknn_model.fit(X_train, y_train)","73de8ff0":"#1. We evaluate the Decision Tree Classifier using Mean Absolute Error (MAE)\nfrom sklearn.metrics import accuracy_score\n\ntree_model_score = accuracy_score(y_train, tree_model.predict(X_train))\ntree_model_score","ba81ed27":"#predicting on the Random Forest Model\ny_pred = random_model.predict(X_test)","e800a057":"output = pd.DataFrame({'PassengerId': test_df.PassengerId, 'Survived': y_pred})","29e5d4fb":"output.to_csv(\"Submissions.csv\", index=False)","96ff981d":"It seems like more male passengers died than females. Also the number of males on board the ship was higher than that of females","5c3a0184":"# Exploratory Data Analysis\n\nInvestigating the height distribution versus those who survived\/did not survive","35cb1000":"# Dropping Features\nWe are going to drop some features because of various reasons:\n\n* PassengerId - this is an id column with different values for each entry\n* Name - also has unique values per entry\n* Ticket - it has too many different values to be a feature, and might lead to our model overfitting\n* Cabin - too many missing values\n","5d661694":"# Model training\nWe will train various models\n","8fadbda1":"**Observation**\nIt seems there was an almost 50% survival rate per age bin","879f1f7e":"# Model Evaluation ","f5a12dd6":"# Feature Transformations\n\nWe are going to transform the columns in two ways:\n\n1. Categorical Features (Sex, Embarked) - will need to be transformed into numerical values\n2. Numerical Features - need to be normalized","5d202782":"It seems there are some outliers in the Male Ages, so we will use median to fill in missing values","1bbe81b9":"Further EDA to see relationships between the features, and also to the targetted label.","bac1aa65":"Embarked column has 2 missing values, but Cabin has a lot of missing values.","97babd94":"Generally, Passenger Classes differ by age group","55f59072":"Those who paid higher fares were placed in Pclass 1, Pclass 2 and Pclass 3 seems to house those who paid lower fees. A higher proportion of those in Pclass 3 died as compared to the other classes."}}