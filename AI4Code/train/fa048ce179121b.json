{"cell_type":{"9b5eedc1":"code","e6f70f8b":"code","a9da2b6e":"code","5f84f669":"code","8c7d7643":"code","85bcb739":"code","221b60c3":"code","66a8a276":"code","709019fc":"code","98e31899":"code","0a447106":"code","6f0aa684":"code","bedf75d3":"code","a0ca2b38":"code","69ad8201":"code","ab74351d":"code","168b659b":"code","78f96850":"code","c822aae2":"code","3c9fd16d":"code","ed7cfbd5":"code","61979009":"code","adc55917":"code","32d40931":"code","4a61c31d":"code","b4391daa":"code","5c30a1e6":"code","931b47c6":"code","5592a492":"code","c7f09440":"code","99b6c629":"code","631f6892":"code","8b81ae1d":"code","9ca5a2e6":"code","f9053612":"code","99e8c8c3":"code","a70c61ca":"markdown","565c53b0":"markdown","456bb73d":"markdown","210a2885":"markdown","b52559da":"markdown"},"source":{"9b5eedc1":"pip install swifter","e6f70f8b":"import numpy as np\nimport pandas as pd \nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\nimport gc\n\nfrom tqdm import tqdm\n\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nimport tensorflow as tf\nimport keras\nimport swifter\n\nfrom keras import Model\nfrom keras.applications.resnet50 import ResNet50\nfrom keras.preprocessing import image\nfrom keras.applications.resnet50 import preprocess_input, decode_predictions\nfrom keras.layers import GlobalMaxPooling2D\nfrom keras.utils.np_utils import to_categorical\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom keras.optimizers import RMSprop\nfrom keras.callbacks import ReduceLROnPlateau\n\nfrom sklearn.metrics.pairwise import pairwise_distances\n\nwarnings.filterwarnings('ignore')","a9da2b6e":"def plot_confusion_matrix(model, X_test, y_test):\n    y_pred = model.predict(X_test)\n    y_pred_classes = np.argmax(y_pred,axis = 1) \n    y_test_classes = np.argmax(y_test, axis = 1)\n    cm = confusion_matrix(y_test_classes, y_pred_classes) \n    sns.heatmap(cm, annot = True,fmt='.0f')\n    plt.show()\n","5f84f669":"def load_images(names, articletype):\n    image_array = []\n    for image_name in tqdm(names, desc = 'reading images for ' + articletype):\n        img_path = IMAGE_PATH + image_name\n        try:\n            img = image.load_img(img_path, target_size=(IMAGE_SIZE, IMAGE_SIZE))\n        except:\n            continue\n        img = image.img_to_array(img)\n        image_array.append(img)\n    return np.array(image_array)","8c7d7643":"def get_recommender(idx, df, top_n = 5):\n    sim_idx    = indices[idx]\n    sim_scores = list(enumerate(cosine_similarity[sim_idx]))\n    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n    sim_scores = sim_scores[1:top_n+1]\n    idx_rec    = [i[0] for i in sim_scores]\n    idx_sim    = [i[1] for i in sim_scores]\n    \n    return indices.iloc[idx_rec].index, idx_sim","85bcb739":"DATA_PATH = '..\/input\/fashion-product-images-dataset\/fashion-dataset\/'\nIMAGE_PATH = DATA_PATH + 'images\/'\nIMAGE_SIZE = 224\nLIMIT_IMAGES = 1000","221b60c3":"dfstyles = pd.read_csv(DATA_PATH + 'styles.csv', error_bad_lines=False, warn_bad_lines=False)\ndfstyles['image'] = dfstyles['id'].map(lambda x: str(x) + '.jpg')\ndfstyles.columns = dfstyles.columns.str.lower()\nprint(dfstyles.shape)\ndfstyles.head()","66a8a276":"dfstyles['articletype'].nunique()","709019fc":"dfstyles['articletype'].value_counts().head()","98e31899":"dfstyles['articletype'].value_counts().tail()","0a447106":"dfstyles['cntarticle'] = dfstyles.groupby('articletype')['id'].transform('count')\ndfdata = dfstyles[dfstyles['cntarticle'] > 500]\nprint(dfdata.shape, dfdata['articletype'].nunique())","6f0aa684":"dfarticles =dfdata.groupby('articletype',as_index=False)['id'].count()\ndfarticles","bedf75d3":"imglist = [IMAGE_PATH + x for x in dfdata['image'].sample(10).values]\n\nfig,ax = plt.subplots(2,5,figsize=(18,10))\nfor index, img_file in enumerate(imglist):\n    img = plt.imread(img_file)\n    x = int(index \/ 5)\n    y = index % 5\n    ax[x,y].imshow(img)\nplt.show()  ","a0ca2b38":"image_list = []\narticle_list = []\nfor index, grouprow in dfarticles.iterrows():\n    if index > 4:\n        continue\n    image_names = dfdata[dfdata['articletype'] == grouprow['articletype']]['image'].values\n    if len(image_names) > LIMIT_IMAGES:\n        image_names = image_names[:LIMIT_IMAGES]\n    image_list.extend(load_images(image_names, grouprow['articletype']))\n    article_list.extend(len(image_names) * [grouprow['articletype']])\n    ","69ad8201":"X = np.array(image_list) \/ 255.0\nX = X.reshape(-1,IMAGE_SIZE,IMAGE_SIZE,3)\ny_encoded = LabelEncoder().fit_transform(article_list)\nprint(\"Number of classes : \",np.unique(y_encoded, return_counts=True))\ny = to_categorical(y_encoded, num_classes = len(np.unique(article_list)))\nprint(y[:5])","ab74351d":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.1)\nprint(X_train.shape, X_test.shape)","168b659b":"model = Sequential()\n\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', activation ='relu', input_shape = (224,224,3)))\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', activation ='relu'))\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Flatten())\nmodel.add(Dense(512, activation = \"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(len(np.unique(article_list)), activation = \"softmax\"))\nprint(model.summary())","78f96850":"del X,y,article_list,image_list\ngc.collect()","c822aae2":"optimizer = RMSprop(lr=0.001, rho=0.9, epsilon=1e-08, decay=0.0)","3c9fd16d":"model.compile(optimizer = optimizer , loss = \"categorical_crossentropy\", metrics=[\"accuracy\"])","ed7cfbd5":"learning_rate_reduction = ReduceLROnPlateau(monitor='val_acc', \n                                            patience=3, \n                                            verbose=1, \n                                            factor=0.5, \n                                            min_lr=0.00001)","61979009":"EPOCHS = 3\nBATCH_SIZE = 64","adc55917":"history = model.fit(X_train, y_train, batch_size = BATCH_SIZE, epochs = EPOCHS, validation_data = (X_test, y_test), verbose = 2\n                   , callbacks=[learning_rate_reduction])","32d40931":"datagen = image.ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # apply ZCA whitening\n        rotation_range=10,  # randomly rotate images in the range (degrees, 0 to 180)\n        zoom_range = 0.1, # Randomly zoom image \n        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)\n        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)\n        horizontal_flip=False,  # randomly flip images\n        vertical_flip=False)  # randomly flip images\n\n\ndatagen.fit(X_train)","4a61c31d":"history = model.fit_generator(datagen.flow(X_train,y_train, batch_size=BATCH_SIZE), epochs = EPOCHS, \n                              validation_data = (X_test,y_test), verbose = 2, steps_per_epoch=X_train.shape[0] \/\/ BATCH_SIZE\n                              , callbacks=[learning_rate_reduction])","b4391daa":"plot_confusion_matrix(model, X_test, y_test)","5c30a1e6":"dfdata = dfstyles[dfstyles['articletype'] == 'Shorts']\ndfdata.shape","931b47c6":"resnet50_model = ResNet50(weights='imagenet', include_top=False, input_shape=(IMAGE_SIZE, IMAGE_SIZE, 3))\nresnet50_model.trainable = False\nmodel2 = keras.Sequential([\n    resnet50_model,\n    GlobalMaxPooling2D()\n])\n\nmodel2.summary()","5592a492":"def get_embedding(model, imagepath):\n    x = image.load_img(imagepath, target_size=(IMAGE_SIZE, IMAGE_SIZE))\n    x = image.img_to_array(x)\n    x = np.expand_dims(x, axis=0)\n    x = preprocess_input(x)\n    return model.predict(x).reshape(-1)\n\nimage_file = IMAGE_PATH + dfdata.iloc[0]['image']\nemb = get_embedding(model2, image_file)\nemb.shape\n","c7f09440":"map_embedding = dfdata['image'].swifter.apply(lambda x : get_embedding(model2, IMAGE_PATH + x))","99b6c629":"dfembedding = map_embedding.apply(pd.Series)\ndfembedding.shape","631f6892":"cosine_similarity = 1 - pairwise_distances(dfembedding,metric='cosine')","8b81ae1d":"indices = pd.Series(range(len(dfdata)), index=dfdata.index)\nindices","9ca5a2e6":"sim_index = 194\nsim_indices,sim = get_recommender(sim_index, dfdata, top_n = 5)\nsim_indices","f9053612":"selected_image = IMAGE_PATH + dfdata.loc[sim_index,'image']\nimg = plt.imread(selected_image)\nplt.imshow(img)\nplt.show()","99e8c8c3":"similar_list = [IMAGE_PATH + x for x in dfdata.loc[sim_indices,'image']]\nfor similar in similar_list:\n    img = plt.imread(similar)\n    plt.imshow(img)\n    plt.show()","a70c61ca":"# Get Data","565c53b0":"# Functions","456bb73d":"# Similarity","210a2885":"# Classification","b52559da":"- Get max 2000 images from each article.\n- Create target variable article_list."}}