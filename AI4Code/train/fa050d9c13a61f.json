{"cell_type":{"f84b244f":"code","245ab253":"code","4c3766f4":"code","1884524a":"code","116add3f":"code","7dafad4f":"code","717f92cf":"code","9bbccf68":"code","c93bbfe1":"code","8ef0e2f5":"code","447b5d79":"code","4d0482d3":"code","2423b448":"code","4d78c7e1":"code","04129c95":"code","635e8c02":"code","ba709be8":"code","d8c3b721":"code","fc6e1485":"code","5535e87d":"code","11870e8e":"code","2369928e":"code","fd9d7b6f":"code","952f1a87":"code","a52e9772":"code","8703ed59":"code","38fd705a":"code","fe94df2b":"code","0a53138c":"code","2e3b9d07":"code","a0242903":"code","bb16a840":"code","c64a7b2a":"code","88aa329e":"code","64827008":"code","b520bde4":"code","46ebb8c1":"code","ef8de3cc":"code","cd2f0269":"code","a5f2ebef":"code","d10d0f74":"code","0aa1f8bb":"code","15c581a3":"code","befa9799":"code","ea232578":"code","d7b5c186":"code","f234c668":"code","8c1ecc59":"code","4027a5ac":"code","a980f3fe":"code","ac61d225":"code","a30f87d5":"code","f8ad813a":"code","1629597b":"code","12a5c73e":"code","6e3b9163":"code","ab49ebf8":"code","28262653":"code","b199b5cc":"code","eebaf6e2":"code","bcaf8bf5":"code","2f5157d4":"code","20638d65":"code","015ae0c2":"code","dd83d9bb":"code","9d04c506":"code","dbd8e95c":"code","707fe625":"code","a4047a15":"code","08686767":"code","64bfea1b":"code","c4511d6e":"code","ff480b74":"code","63595144":"code","87d07c56":"code","5bc0f0c3":"code","ed9dfccd":"code","25cbd823":"code","0043ea36":"code","a708e631":"code","5b322c1f":"markdown","255686f6":"markdown","493b8e02":"markdown","1efb37c8":"markdown","d64d2795":"markdown","f10b83f7":"markdown","08881664":"markdown","9b1e2561":"markdown","85167861":"markdown","e08a80f8":"markdown","83f35ccf":"markdown","f48c5898":"markdown","fb7aa7e1":"markdown","b42efd41":"markdown","8e76f42a":"markdown","9d49eb59":"markdown","8c61cc35":"markdown","ee2f73cc":"markdown","89520948":"markdown","b45e2320":"markdown","e8cb36f5":"markdown","70c2a396":"markdown","b1d68285":"markdown","b9397c01":"markdown","6753f49b":"markdown","8e040f55":"markdown","dcd8c9f6":"markdown"},"source":{"f84b244f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","245ab253":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","4c3766f4":"train=pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest= pd.read_csv('..\/input\/titanic\/test.csv')","1884524a":"train.head(5)","116add3f":"test.tail(2)","7dafad4f":"train.isnull().sum()\n","717f92cf":"test.isnull().sum()","9bbccf68":"train[\"Age\"]=train[\"Age\"].fillna(train[\"Age\"].mean())\ntest[\"Age\"]=test[\"Age\"].fillna(test[\"Age\"].mean())\ntest[\"Fare\"]=test[\"Fare\"].fillna(test[\"Fare\"].mean())","c93bbfe1":"train.head()","8ef0e2f5":"train.SibSp.value_counts()","447b5d79":"train[\"SibSp\"]= train[\"SibSp\"].replace(8, \"6\") ","4d0482d3":"train.SibSp.value_counts()","2423b448":"train.Parch.value_counts()","4d78c7e1":"test.Parch.value_counts()","04129c95":"test[\"Parch\"]= test[\"Parch\"].replace(9, \"7\") ","635e8c02":"test.Parch.value_counts()","ba709be8":"train.Cabin = train.Cabin.fillna('Unknown_Cabin')\ntrain['Cabin'] = train['Cabin'].str[0]","d8c3b721":"train.isnull().sum()","fc6e1485":"test.Cabin = test.Cabin.fillna('Unknown_Cabin')\ntest['Cabin'] = test['Cabin'].str[0]","5535e87d":"test.isnull().sum()","11870e8e":"train['Embarked'].fillna(train['Embarked'].mode()[0], inplace=True)\ntrain.head()","2369928e":"train.isnull().sum()","fd9d7b6f":"First_NAMES=train.Name.str.split(\",\").map(lambda x: x[0])\nFirst_NAMES.value_counts()[:50]\n","952f1a87":"# Top 10  Publisher names\nplot = First_NAMES.value_counts().nlargest(50).plot(kind='bar', title=\"Top 10 First names\", figsize=(12,6))","a52e9772":"train.head()","8703ed59":"sns.barplot(x=train['Sex'].value_counts().index,y=train['Sex'].value_counts().values)\nplt.title('Genders other rate')\nplt.ylabel('Rates')\nplt.legend(loc=0)\nplt.show()","38fd705a":"plt.figure(figsize=(10,7))\nsns.barplot(x = \"Pclass\", y = \"Fare\", hue = \"Sex\", data = train)\nplt.xticks(rotation=45)\nplt.show()","fe94df2b":"plt.figure(figsize=(10,7))\nsns.barplot(x = \"Pclass\", y = \"Age\", hue = \"Sex\", data = train)\nplt.xticks(rotation=45)\nplt.show()","0a53138c":"# Data to plot\nlabels = 'Pclass_1', 'Pclass_2', 'Pclass_3'\nsizes = train.groupby('Pclass')['Fare'].mean().values\ncolors = ['gold', 'yellowgreen', 'lightcoral']\nexplode = (0.1, 0, 0)  # explode 1st slice\n \n# Plot\nplt.pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=140)\nplt.title('Fare for every Pclass')\nplt.axis('equal')\nplt.show()","2e3b9d07":"# Data to plot\nlabels = 'Male', 'Female'\nsizes = train.groupby('Sex')['Fare'].mean().values\ncolors = ['gold', 'yellowgreen']\nexplode = (0.1, 0)  # explode 1st slice\n \n# Plot\nplt.pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=140)\nplt.title('Fare for Every Sex')\nplt.axis('equal')\nplt.show()","a0242903":"sns.barplot(x=train['Survived'].value_counts().index,y=train['Survived'].value_counts().values)\nplt.title('Death and Survived')\nplt.ylabel('Rates')\nplt.legend(loc=0)\nplt.show()","bb16a840":"sns.countplot(train['Survived'],hue=train['Sex'])\nplt.show()","c64a7b2a":"sns.countplot(y=train['Pclass'],palette=\"Set3\",hue=train['Sex'])\nplt.legend(loc=4)\nplt.show()","88aa329e":"train.drop(['Name','Ticket'],axis='columns',inplace=True)\ntest.drop(['Name','Ticket'],axis='columns',inplace=True)","64827008":"from sklearn.preprocessing import LabelEncoder\nenc = LabelEncoder()\ntrain.Sex = enc.fit_transform(train.Sex)\ntrain.Embarked = enc.fit_transform(train.Embarked)\ntrain.Cabin=enc.fit_transform(train.Cabin)\ntrain.head()\n","b520bde4":"from sklearn.preprocessing import LabelEncoder\nenc = LabelEncoder()\ntest.Sex = enc.fit_transform(test.Sex)\ntest.Embarked = enc.fit_transform(test.Embarked)\ntest.Cabin=enc.fit_transform(test.Cabin)\ntest.head()","46ebb8c1":"train.head(1)","ef8de3cc":"print(train['Fare'].quantile(0.)) \nprint(train['Fare'].quantile(0.25)) \n","cd2f0269":"train['Fare'] = np.where(train['Fare']<1, 4.0125, train['Fare'])\n","a5f2ebef":"train['Fare'].min()","d10d0f74":"train['Ages'] = pd.cut(train['Age'], bins=[0,25,50,80], labels=[\"0\", \"1\", \"2\"])\ntest['Ages'] = pd.cut(test['Age'], bins=[0,25,50,80], labels=[\"0\", \"1\", \"2\"])","0aa1f8bb":"train.isnull().sum()","15c581a3":"test.isnull().sum()","befa9799":"train.Fare.value_counts()","ea232578":"train.isnull().sum()","d7b5c186":"train.head()","f234c668":"train.drop(['Age'],axis='columns',inplace=True)\n","8c1ecc59":"test.drop(['Age'],axis='columns',inplace=True)","4027a5ac":"train.head(2)","a980f3fe":"test.head()","ac61d225":"col_name=\"Survived\"\nfirst_col = train.pop(col_name)","a30f87d5":"train.insert(9, col_name, first_col)","f8ad813a":"train.head(2)","1629597b":"train= train.dropna(how='any',axis=0) \n","12a5c73e":"test[\"Fare\"]=train[\"Fare\"].fillna(train[\"Fare\"].max())","6e3b9163":"train.isnull().sum()","ab49ebf8":"test.isnull().sum()","28262653":"#correlation map\nf,ax = plt.subplots(figsize=(14, 14))\nsns.heatmap(train.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax)","b199b5cc":"train.drop(['Parch'],axis=1,inplace=True)","eebaf6e2":"test.drop(['Parch'],axis=1,inplace=True)","bcaf8bf5":"train.head()","2f5157d4":"test.info()","20638d65":"# Everything except target variable\nX = train.drop(\"Survived\", axis=1)\n\n# Target variable\ny = train['Survived'].values","015ae0c2":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split","dd83d9bb":"# Split into train & test set`\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3,random_state=10) ","9d04c506":"logmodel = LogisticRegression()\nlogmodel.fit(X_train,y_train)","dbd8e95c":"predictions = logmodel.predict(X_test)\nX_test.head()","707fe625":"predictions","a4047a15":"from sklearn.metrics import classification_report,confusion_matrix","08686767":"print(confusion_matrix(y_test,predictions))","64bfea1b":"print(classification_report(y_test,predictions))","c4511d6e":"# Calculate the Accuracy\nfrom sklearn.metrics import accuracy_score\nprint(accuracy_score(predictions,y_test))","ff480b74":"logmodel.fit(train.drop(['Survived'],axis=1),train['Survived'])","63595144":"test_prediction = logmodel.predict(test)\ntest_prediction = [ 1 if y>=0.5 else 0 for y in test_prediction]","87d07c56":"test_pred = pd.DataFrame(test_prediction, columns= ['Survived'])","5bc0f0c3":"new_test = pd.concat([test, test_pred], axis=1, join='inner')","ed9dfccd":"new_test.head()","25cbd823":"df= new_test[['PassengerId' ,'Survived']]","0043ea36":"df.head()","a708e631":"df.to_csv('predictions.csv' , index=False)","5b322c1f":"- 100 males and 220 females are survived (1)\n- more than 400 males are dead and less than 80 females are dead(0)","255686f6":"# Pie chart of Sex and Fare","493b8e02":"# 3) Data Exploration","1efb37c8":"# Plot of Male and Female","d64d2795":" # LogisticRegression","f10b83f7":"data = pd.concat([train, test], sort=False, ignore_index=True)\n","08881664":"- Pclass 3 having highest males and females","9b1e2561":"# Count Deatiled plot of people survived\/not survived","85167861":"# 1) Importing Data","e08a80f8":"# Categorical Imputation","83f35ccf":"# Bar plot","f48c5898":"# Which Class have high male and female","fb7aa7e1":"# 2)Data Preparation","b42efd41":"# Pie chart of Pclass with Fare","8e76f42a":"# Which Age people leave in Pclass","9d49eb59":"- only 300 peoples are survived (1)\n- more than 500 peoples are dead(0)","8c61cc35":"# Finding out correlation","ee2f73cc":"# Fare cant be zero so replace with minimum Fare","89520948":"# Filling Nan Values","b45e2320":"# 2.1)Data Cleansing\n- Missing Values\n- Filling  missing Values\n- Droping high missing value column\n- Categorical Imputation\n","e8cb36f5":"# Testing","70c2a396":"- Highest Fare were female in class 1 and low fare were male in class 1\n- Highest Fare were female in class 2 and low fare were male in class 2\n- Highest Fare were female in class 3 and low fare were male in class 3","b1d68285":"# Droping cabin columns it consists of most of null values","b9397c01":"# 4) Data Modeling\n","6753f49b":"- Male is highest in Number","8e040f55":"# Top Names with sur name indicates their is relationship like parents and cousins","dcd8c9f6":"# People Survived and death plot"}}