{"cell_type":{"1e2843c6":"code","fa6565f0":"code","42557ca8":"code","b94a7758":"code","2d0f50bb":"code","30500acf":"code","69d5da43":"code","c9df784c":"code","2d89c86d":"code","a794eace":"code","7108c2a4":"code","c529beb0":"code","513fda23":"code","856e7856":"markdown","542b574c":"markdown","0f27b51d":"markdown","f28cbfbf":"markdown","8613fece":"markdown","cf77f4a8":"markdown","93912cfd":"markdown","e1213ce8":"markdown","71d62fea":"markdown","d7eec49d":"markdown","2e3fd294":"markdown","765522ed":"markdown","ab6cf817":"markdown","720e8ac0":"markdown","82afcac0":"markdown","d6db0609":"markdown","b12b30e1":"markdown","860d7a55":"markdown","147b0d36":"markdown","4ffd2457":"markdown"},"source":{"1e2843c6":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport requests\nfrom bs4 import BeautifulSoup\nimport geopandas as gpd\nfrom prettytable import PrettyTable","fa6565f0":"url = 'https:\/\/www.mohfw.gov.in\/'# make a GET request to fetch the raw HTML content\nweb_content = requests.get(url).content# parse the html content\nsoup = BeautifulSoup(web_content, \"html.parser\")# remove any newlines and extra spaces from left and right\nextract_contents = lambda row: [x.text.replace('\\n', '') for x in row]# find all table rows and data cells within\nstats = [] \nall_rows = soup.find_all('tr')\nfor row in all_rows:\n    stat = extract_contents(row.find_all('td')) # notice that the data that we require is now a list of length 5\n    if len(stat) == 5:\n        stats.append(stat)#now convert the data into a pandas dataframe for further processingnew_cols = [\"Sr.No\", \"States\/UT\",\"Confirmed\",\"Recovered\",\"Deceased\"]\n\nnew_cols = [\"Sr.No\", \"States\/UT\",\"Confirmed\",\"Recovered\",\"Deceased\"]\nstate_data = pd.DataFrame(data = stats, columns = new_cols)\nstate_data.head()\n\n# Data is scrapped on 03-05-2020","42557ca8":"state_data.shape","b94a7758":"state_data['Confirmed'] = state_data['Confirmed'].map(int)\nstate_data['Recovered'] = state_data['Recovered'].map(int)\nstate_data['Deceased'] = state_data['Deceased'].map(int)","2d0f50bb":"table = PrettyTable()\ntable.field_names = (new_cols)\nfor i in stats:\n    table.add_row(i)\ntable.add_row([\"\",\"Total\", \n               sum(state_data['Confirmed']), \n               sum(state_data['Recovered']), \n               sum(state_data['Deceased'])])\nprint(table)","30500acf":"sns.set_style(\"ticks\")\n# plt.rcParams['axes.facecolor'] = 'black'\nplt.figure(figsize = (17,12))\nplt.barh(state_data[\"States\/UT\"], state_data[\"Confirmed\"].map(int),\n         align = 'center', color = 'green', edgecolor = 'blue')\nplt.xlabel('Number of Confirmed cases', fontsize = 18)\nplt.ylabel('States\/UT', fontsize = 18)\nplt.gca().invert_yaxis() #to maintain the order\n\nplt.xticks(fontsize = 14) \nplt.yticks(fontsize = 14)\nplt.title('Total Confirmed Cases Statewise', fontsize = 20)\nplt.show() ","69d5da43":"# donut chart representing nationwide total confirmed, cured and deceased cases\ngroup_size = [sum(state_data['Confirmed']), \n              sum(state_data['Recovered']), \n              sum(state_data['Deceased'])]\n\ngroup_labels = ['Confirmed\\n' + str(sum(state_data['Confirmed'])), \n                'Recovered\\n' + str(sum(state_data['Recovered'])), \n                'Deceased\\n'  + str(sum(state_data['Deceased']))]\ncustom_colors = ['skyblue','yellowgreen','tomato']\n\nplt.figure(figsize = (5,5))\nplt.pie(group_size, labels = group_labels, colors = custom_colors)\ncentral_circle = plt.Circle((0,0), 0.5, color = 'white')\nfig = plt.gcf()\nfig.gca().add_artist(central_circle)\nplt.rc('font', size = 12) \nplt.title('Nationwide total Confirmed, Recovered and Deceased Cases', fontsize = 16)\nplt.show()","c9df784c":"import plotly.express as px\nfig = px.pie(state_data, values = 'Confirmed',names='States\/UT', height=600)\nfig.update_traces(textposition='inside', textinfo='percent+label')\n\nfig.update_layout(\n    title_x = 0.5,\n    geo=dict(\n        showframe = False,\n        showcoastlines = False,\n    ))\n\nfig.show()","2d89c86d":"fig = px.pie(state_data, values = 'Deceased',names='States\/UT', height=600)\nfig.update_traces(textposition='inside', textinfo='percent+label')\n\nfig.update_layout(\n    title_x = 0.5,\n    geo=dict(\n        showframe = False,\n        showcoastlines = False,\n    ))\n\nfig.show()","a794eace":"fig = px.treemap(state_data, path=['States\/UT'], values='Confirmed', height=600, width=800)\n\nfig.update_layout(\n    title_x = 0.5,\n    geo=dict(\n        showframe = False,\n        showcoastlines = False,\n    ))\n\nfig.show()","7108c2a4":"fig = px.treemap(state_data, path=['States\/UT'], values='Recovered', height=600, width=800)\n\nfig.update_layout(\n    title_x = 0.5,\n    geo=dict(\n        showframe = False,\n        showcoastlines = False,\n    ))\n\nfig.show()","c529beb0":"fig = px.treemap(state_data, path=['States\/UT'], values='Deceased', height=600, width=800)\nfig.update_layout(\n    title_x = 0.5,\n    geo=dict(\n        showframe = False,\n        showcoastlines = False,\n    ))\n\nfig.show()","513fda23":"import geopandas as gpd\nimport pandas as pd\n# read the state wise shapefile of India in a GeoDataFrame and preview it\nmap_data = gpd.read_file('\/kaggle\/input\/india-states\/Igismap\/Indian_States.shp')\nmap_data.rename(columns = {'st_nm':'States\/UT'}, inplace = True)\nmap_data.head()\n\n# correct the name of states in the map dataframe \nmap_data['States\/UT'] = map_data['States\/UT'].str.replace('&', 'and')\nmap_data['States\/UT'].replace('Arunanchal Pradesh', 'Arunachal Pradesh', inplace = True)\nmap_data['States\/UT'].replace('Telangana', 'Telengana', inplace = True)\nmap_data['States\/UT'].replace('NCT of Delhi', 'Delhi', inplace = True)\n\n# merge both the dataframes - state_data and map_data\nmerged_data = pd.merge(map_data, state_data, how = 'left', on = 'States\/UT')\nmerged_data.fillna(0, inplace = True)\nmerged_data.drop('Sr.No', axis = 1, inplace = True)\n\n# create figure and axes for Matplotlib and set the title\nfig, ax = plt.subplots(1, figsize=(20, 12))\nax.axis('off')\nax.set_title('Covid-19 Statewise Data - Confirmed Cases', fontdict = {'fontsize': '25', 'fontweight' : '3'})\n# plot the figure\nmerged_data.plot(column = 'Confirmed', cmap='YlOrRd', linewidth=0.8, ax=ax, edgecolor='0.8', legend = True)\nplt.show()\nplt.savefig('in.png')","856e7856":"## Corona Data Scrapping & visualization for India","542b574c":"## Let's Scap the Data","0f27b51d":"## Import Libraries","f28cbfbf":"After seen analysis, we can say that recovered ratio is more than death ratio. So it is good point for us","8613fece":"## Donut chart for analysis of all India Cases","cf77f4a8":"## scraped data columns are actually of \u2018string\u2019 datatype. We need to convert them into \u2018int\u2019 datatype.","93912cfd":"## Now we will use PrettyTable","e1213ce8":"## Let's plot Pie chart with Plotly to see a Confirmed cases ratio","71d62fea":"We can see Maharashtra have many number of cases","d7eec49d":"![](https:\/\/media.giphy.com\/media\/9Gnbm29r7ftUA\/giphy.gif)","2e3fd294":"## Let's see TreeMap for Confirmed Cases","765522ed":"![](https:\/\/media2.giphy.com\/media\/MCAFTO4btHOaiNRO1k\/source.gif)","ab6cf817":"## So let's Understand about Corona","720e8ac0":"## Let' start Visualization","82afcac0":"#### Reference:- https:\/\/towardsdatascience.com\/tracking-corona-covid-19-spread-in-india-using-python-40ef8ffa7e31","d6db0609":"## Let's see for Recovered cases ratio","b12b30e1":"Coronavirus disease (COVID-19) is an infectious disease caused by a newly discovered coronavirus.\n\nMost people infected with the COVID-19 virus will experience mild to moderate respiratory illness and recover without requiring special treatment.  Older people, and those with underlying medical problems like cardiovascular disease, diabetes, chronic respiratory disease, and cancer are more likely to develop serious illness.\n\nThe best way to prevent and slow down transmission is be well informed about the COVID-19 virus, the disease it causes and how it spreads. Protect yourself and others from infection by washing your hands or using an alcohol based rub frequently and not touching your face.  ","860d7a55":"## Let's see for recovered cases","147b0d36":"## Let's see for Deceased class","4ffd2457":"## Do upvote and fork, thanks for watching"}}