{"cell_type":{"46339ec0":"code","27a4b91a":"code","5a2b2f5f":"code","1c6cbbb7":"code","1443bc83":"code","e596096f":"code","74148de0":"code","ab8f9305":"code","6e01d1af":"code","31c64506":"code","3067a8c3":"code","5ef7a694":"code","993a13a6":"code","d2b1cd62":"code","34def6f8":"code","9da80b41":"code","d850f060":"code","dd737204":"code","2249f7f4":"code","e4a7ec0a":"code","73769ac8":"code","2c823099":"code","d984b0ff":"code","d2b51a30":"code","bfd76356":"code","05f635ba":"code","366893e7":"markdown","165ffa3c":"markdown","4a984f34":"markdown","2ec7d672":"markdown","867772b3":"markdown","5040cc46":"markdown","521cba35":"markdown","26fb0ede":"markdown","4d1955a6":"markdown","fa57899f":"markdown"},"source":{"46339ec0":"import numpy as np \nimport pandas as pd \nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","27a4b91a":"import folium\nfrom folium import plugins\nfrom folium.plugins import HeatMap\nimport warnings\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.linear_model import LogisticRegression\nimport tensorflow as tf\nfrom sklearn.metrics import classification_report, confusion_matrix, accuracy_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nimport plotly.express as px\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns","5a2b2f5f":"train = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')","1c6cbbb7":"# \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\ntrain.head()","1443bc83":"# \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\ntest.head()","e596096f":"# \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 \u043f\u0440\u043e\u0431\u0435\u043b\u044b\ncount_NaN = train.isna().sum()\ncount_NaN","74148de0":"# \u0413\u043e\u0440\u043e\u0434\u0430, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0437\u0430\u0445\u043e\u0434\u0438\u043b\u0438 \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u044b\n\nplt.figure(figsize=(15,8))\nsplot = sns.countplot(data=train, x='Embarked')\nplt.ylabel(\"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u043e\u0432\u0430\", fontsize=12)\nplt.xlabel(\"\u0413\u043e\u0440\u043e\u0434\u0430 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438\", fontsize=12)\nplt.title(\"\u0413\u043e\u0440\u043e\u0434\u0430, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0437\u0430\u0445\u043e\u0434\u0438\u043b\u0438 \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u044b\", fontsize=16)\n\nfor p in splot.patches:\n    splot.annotate(format(p.get_height(), '.1f'),\n                   (p.get_x() + p.get_width() \/ 2., p.get_height()),\n                   ha='center', va='center',\n                   xytext=(0, 9),\n                   textcoords='offset points')","ab8f9305":"# \u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043c \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u043e\u0432\n\nplt.figure(figsize=(15,8))\nsns.countplot(data=train, x='Age')\nplt.ylabel(\"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u043e\u0432\", fontsize=12)\nplt.xticks(rotation=90)\nplt.title(\"\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043c \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u043e\u0432\", fontsize=16)","6e01d1af":"# \u0420\u0430\u0441\u043f\u0435\u0440\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0443 \u043f\u043e\u043b\u0430\n\ntrain['Sex'] = np.where(train['Sex'] == 'male', 'Male', 'Female')\nplt.figure(figsize=(15, 8))\nsplot = sns.countplot(data=train, x='Sex')\nplt.ylabel(\"\u041a\u043e\u043b-\u0432\u043e \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u043e\u0432\", fontsize=12)\nplt.xlabel(\"\u041f\u043e\u043b\", fontsize=12)\nplt.title(\"\u0420\u0430\u0441\u043f\u0435\u0440\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0443 \u043f\u043e\u043b\u0430\", fontsize=16)\n\nfor p in splot.patches:\n    splot.annotate(format(p.get_height(), '.1f'),\n                   (p.get_x() + p.get_width() \/ 2., p.get_height()),\n                   ha='center', va='center',\n                   xytext=(0, 9),\n                   textcoords='offset points')","31c64506":"# \u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u043e \u0432\u044b\u0436\u0438\u0432\u0430\u0435\u043c\u043e\u0441\u0442\u0438\n\ntrain['Survived'] = np.where(train['Survived'] == 1, 'Survived', 'Dead')\nplt.figure(figsize=(15, 8))\nsplot = sns.countplot(data=train, x='Survived')\nplt.ylabel(\"\u041a\u043e\u043b-\u0432\u043e \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u043e\u0432\", fontsize=12)\nplt.title(\"\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u043e \u0432\u044b\u0436\u0438\u0432\u0430\u0435\u043c\u043e\u0441\u0442\u0438 \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u043e\u0432\u0430 \u043d\u0430 \u0442\u0438\u0442\u0430\u043d\u0438\u043a\u0435\", fontsize=16)\n\nfor p in splot.patches:\n    splot.annotate(format(p.get_height(), '.1f'),\n                   (p.get_x() + p.get_width() \/ 2., p.get_height()),\n                   ha='center', va='center',\n                   xytext=(0, 9),\n                   textcoords='offset points')","3067a8c3":"# \u0411\u0438\u043b\u0435\u0442\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u0430\ntrain.loc[(train.Pclass == 3), 'Pclass'] = 'Third Class'\ntrain.loc[(train.Pclass == 2), 'Pclass'] = 'Second Class'\ntrain.loc[(train.Pclass == 1), 'Pclass'] = 'First Class'\nplt.figure(figsize=(15, 8))\nsplot = sns.countplot(data=train, x='Pclass')\nplt.ylabel(\"\u041a\u043e\u043b-\u0432\u043e \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u043e\u0432\", fontsize=12)\nplt.title(\"\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u043e \u0431\u0438\u043b\u0435\u0442\u043d\u043e\u043c\u0443 \u043a\u043b\u0430\u0441\u0441\u0443 \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u043e\u0432\", fontsize=16)\n\nfor p in splot.patches:\n    splot.annotate(format(p.get_height(), '.1f'),\n                   (p.get_x() + p.get_width() \/ 2., p.get_height()),\n                   ha='center', va='center',\n                   xytext=(0, 9),\n                   textcoords='offset points')\n","5ef7a694":"count_towns = train.groupby(\n    pd.Grouper(key='Embarked')).size().reset_index(name='count')\n\nlatitude_embark = ['50.897', '49.6423', ' 51.84914']\nlongitude_embark = ['-1.404', '-1.62551', '-8.2975265']\n\ncount_towns['latitude_embark'] = latitude_embark\ncount_towns['longitude_embark'] = longitude_embark\n\nm = folium.Map([49.922935, -6.068136], zoom_start=6, width='%100', height='%100')\n\nheat_data = count_towns.groupby([\"latitude_embark\", \"longitude_embark\"])['count'].mean().reset_index().values.tolist()\nfolium.plugins.HeatMap(heat_data).add_to(m)\nm","993a13a6":"train = pd.read_csv('..\/input\/titanic\/train.csv')\n\ntrain['Survived'] = np.where(train['Survived'] == 1, 'Survived', 'Dead')\ntrain.loc[(train.Pclass == 3), 'Pclass'] = 'Third Class'\ntrain.loc[(train.Pclass == 2), 'Pclass'] = 'Second Class'\ntrain.loc[(train.Pclass == 1), 'Pclass'] = 'First Class'\ntrain['Sex'] = np.where(train['Sex'] == 'male', 'Male', 'Female')\n\nfig = px.sunburst(data_frame=train, # Our dataset\n                  path=[\"Pclass\", \"Sex\", \"Survived\"],  # Root, Branches, Leaves\n                  color=\"Pclass\",\n                  color_discrete_map={'First Class': 'rgb(246,207,113)',\n                                      'Second Class': 'rgb(248,156,116)',\n                                      'Third Class': 'rgb(102,197,204)'},  # Colours (could be changed easily)\n                  maxdepth=-1,\n                  branchvalues='total',\n                  hover_name='Pclass',  # Hover name for chosen column\n                  hover_data={'Pclass': False},\n                  title='\u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 \u0422\u0438\u0442\u0430\u043d\u0438\u043a', template='ggplot2'# Title and the template \n                  )\n\nfig.update_traces(textinfo='label+percent parent')\nfig.update_layout(font=dict(size=16))\nfig.show()","d2b1cd62":"train = pd.read_csv('..\/input\/titanic\/train.csv')\ntrain['Sex'] = np.where(train['Sex'] == 'male', 1, 0) # 1 = Male and 0 = Female for this scenario\n\nplt.figure(figsize=(15,8))\nheatmap = sns.heatmap(train.corr(), vmin=-1, vmax=1, annot=True)\nheatmap.set_title('Correlation Graph of the Training Dataset', fontdict={'fontsize': 24})","34def6f8":"train = pd.read_csv('..\/input\/titanic\/train.csv')\n\n# Male = 1 and Female = 0 \u0447\u0442\u043e\u0431\u044b \u043f\u0435\u0440\u0435\u0432\u0435\u0441\u0442\u0438 \u0432 \u0447\u0438\u0441\u043b\u0430\ntrain['Sex'] = np.where(train['Sex'] == 'male', 1, 0)\n\n\ntrain_male = train[train['Sex'] == 1]  \ntrain_female = train[train['Sex'] == 0]\n\n# \u0417\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u043f\u0443\u0441\u0442\u0443\u044e\u0449\u0438\u0435 \u043c\u0435\u0441\u0442\u0430 \u0441\u0440\u0435\u0434\u043d\u0438\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438\ntrain_male['Age'].fillna(train_male['Age'].median(), inplace=True)\ntrain_female['Age'].fillna(train_female['Age'].median(), inplace=True)\n\ntrain = pd.concat([train_male, train_female], axis=0)\ntrain = train.sort_values(by='PassengerId')","9da80b41":"# \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u043d\u043e\u0432\u044b\u0439 \u0444\u043e\u0440\u043c\u0430\u0442 \u0434\u0430\u043d\u043d\u044b\u0445. \u041a\u0430\u043a \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u0438\u0434\u0435\u0442\u044c Sex \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u043e\u0431\u043b\u0430\u0434\u0430\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438 1 \u0438\u043b\u0438 0\ntrain.head()","d850f060":"# \u0417\u0430\u043c\u0435\u043d\u0438\u043c \u043f\u0443\u0441\u0442\u0443\u044e\u0449\u0438\u0435 \u043c\u0435\u0441\u0442\u0430 \u043f\u043e\u0441\u0430\u0434\u043a\u0438 \u0433\u043e\u0440\u043e\u0434\u043e\u043c S, \u043f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u043e\u043d \u0441\u0430\u043c\u044b\u0439 \u0447\u0430\u0441\u0442\u0439\ntrain['Embarked'].fillna('S', inplace=True)\n\n# \u0417\u0430\u043a\u043e\u0434\u0438\u0440\u0443\u0435\u043c \u043c\u0435\u0441\u0442\u0430 \u043f\u043e\u0441\u0430\u0434\u043a\u0438\ntrain.loc[(train.Embarked == 'S'), 'Embarked'] = 1\ntrain.loc[(train.Embarked == 'C'), 'Embarked'] = 2\ntrain.loc[(train.Embarked == 'Q'), 'Embarked'] = 3","dd737204":"#S = 1, C = 2 and Q = 3\n# \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u0435\u0449\u0435 \u0440\u0430\u0437 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043d\u043e\u0432\u044b\u0439 \u0444\u043e\u0440\u043c\u0430\u0442 \u0434\u0430\u043d\u043d\u044b\u0445\ntrain.head()","2249f7f4":"# \u041d\u0430\u043a\u043e\u043d\u0435\u0446 \u0434\u0430\u0432\u0430\u0439\u0442\u0435 \u0443\u0434\u0430\u043b\u0438\u043c \u0441\u0442\u043e\u0431\u0446\u044b PassengerId, Name, Ticket \u0438 Cabin\ntrain = train.drop(['PassengerId', 'Name', 'Ticket', 'Cabin'], axis=1)\ntrain.head()","e4a7ec0a":"# y - \u044d\u0442\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u044b \u0445\u043e\u0442\u0438\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u0442\u044c\ny = train['Survived']\nX = train.drop('Survived', axis=1)\nX","73769ac8":"# \u0420\u0430\u0437\u0431\u0438\u0432\u0430\u0435\u043c \u043d\u0430\u0448\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u0442\u0435\u0441\u0442 \u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.15, random_state=13)","2c823099":"# \u0418\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f\nrf = RandomForestClassifier(max_depth=10).fit(X_train, y_train)\npredictions_rf = rf.predict(X_val)","d984b0ff":"acc_rf = accuracy_score(y_val, predictions_rf)\nprint('\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u043b\u0435\u0441\u0430: %', 100 * acc_rf)","d2b51a30":"test = pd.read_csv('..\/input\/titanic\/test.csv')\n\ntest['Sex'] = np.where(test['Sex'] == 'male', 1, 0)\n\ntest_male = test[test['Sex'] == 1]  \ntest_female = test[test['Sex'] == 0]\n\n# \u0417\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u043f\u0443\u0441\u0442\u0443\u044e\u0449\u0438\u0435 \u043c\u0435\u0441\u0442\u0430 \u0441\u0440\u0435\u0434\u043d\u0438\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438\ntest_male['Age'].fillna(test_male['Age'].median(), inplace=True)\ntest_female['Age'].fillna(test_female['Age'].median(), inplace=True)\n\ntest = pd.concat([test_male, test_female], axis=0)\ntest = test.sort_values(by='PassengerId')\n\ntest['Embarked'].fillna('S', inplace=True)\n\n# \u0417\u0430\u043a\u043e\u0434\u0438\u0440\u0443\u0435\u043c \u043c\u0435\u0441\u0442\u0430 \u043f\u043e\u0441\u0430\u0434\u043a\u0438\ntest.loc[(test.Embarked == 'S'), 'Embarked'] = 1\ntest.loc[(test.Embarked == 'C'), 'Embarked'] = 2\ntest.loc[(test.Embarked == 'Q'), 'Embarked'] = 3\n\ntest['Fare'].fillna(test['Fare'].mean(), inplace=True)\n\nsub = test[['PassengerId']]\ntest = test.drop(['PassengerId', 'Name', 'Ticket', 'Cabin'], axis=1)","bfd76356":"sub['Survived'] = rf.predict(test)","05f635ba":"sub.to_csv('submission.csv', index=False)","366893e7":"# \u0410\u043b\u0430\u043d\u0438\u0437 \u043a\u043e\u0440\u0435\u043b\u044f\u0446\u0438\u0438 \u0432 \u0434\u0430\u043d\u043d\u044b\u0445\n","165ffa3c":"# \u041b\u043e\u043a\u0430\u0446\u0438\u044f \u0433\u043e\u0440\u043e\u0434\u043e\u0432 \u043f\u043e\u0441\u0430\u0434\u043a\u0438\n","4a984f34":"\u0414\u0430\u043d\u043d\u044b\u0439 \u043d\u043e\u0443\u0442\u0431\u0443\u043a \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u043e\u043c \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u043d\u043e\u0443\u0442\u0431\u0443\u043a\u0430 https:\/\/www.kaggle.com\/atasaygin\/titanic-randomforestclassifier-and-visualization\n<br>\n\u0421\u043f\u0430\u0441\u0438\u0431\u043e \u0430\u0432\u0442\u043e\u0440\u0443","2ec7d672":"# \u0427\u0442\u0435\u043d\u0438\u0435 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0433\u043e \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430","867772b3":"# \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0442\u043e\u0431\u0446\u043e\u0432 \u0438\u0437 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430","5040cc46":"# Random Forest Classifier(\u041a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0442\u0440\u043e \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u043b\u0435\u0441\u0430)","521cba35":"# \u0418\u043c\u043f\u043e\u0440\u0442 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a","26fb0ede":"# \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b\n\n**\u041a\u0430\u043a \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u043c\u0435\u0442\u0438\u0442\u044c, \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0435 Age \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0442 177 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439, \u0430 \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0435 Cabin \u043f\u043e\u0447\u0442\u0438 \u0432\u0441\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0442.**","4d1955a6":"# \u041f\u0440\u0435\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0438\u043d\u0433 \u0434\u0430\u043d\u043d\u044b\u0445\n\n**\u0412 \u044d\u0442\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u044f \u043f\u043e\u0441\u0442\u0430\u0440\u0430\u044e\u0441\u044c \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0438\u043d\u043f\u0443\u0442 \u0434\u043b\u044f Random Forest Classifier(\u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u043b\u0435\u0441\u0430)**","fa57899f":"# \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c"}}