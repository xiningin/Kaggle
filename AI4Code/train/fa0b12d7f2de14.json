{"cell_type":{"63747acf":"code","094370b0":"code","27c26f27":"code","29eab456":"code","c2817836":"code","307638f1":"code","df14a00d":"code","b488d6f7":"code","436ee345":"code","9dfc55a9":"code","e21089ae":"code","98129874":"code","df71955c":"code","ed58ccf0":"code","312cd734":"code","e055b988":"code","52530dc7":"code","f61a48ee":"code","b53f61f9":"code","2a1d1e0c":"code","a5c3b09f":"code","9253bfef":"code","8fd9a041":"code","57ef173c":"code","33742dda":"code","2f02e66b":"code","0c0c0a70":"code","01805528":"code","4b901aba":"code","dd151d29":"code","eb02d433":"code","67e8d16a":"code","c20b15a9":"code","80c99b0b":"code","079e2e1e":"code","8de1cf86":"code","34df099e":"code","016964aa":"code","0b9fa171":"code","1daaab40":"code","db9e53a6":"code","fa2e9de2":"code","124b3eb7":"code","c14bf262":"code","67ff2ac4":"code","9d33c214":"code","d55075c7":"code","8ac2f0cf":"code","24d75ded":"code","3ed1745e":"code","a80a7e54":"code","564d4f8b":"code","7bda269f":"markdown","a44ef5ac":"markdown","d67c5d41":"markdown","6738d234":"markdown","c8c8ac0a":"markdown","17ba82fb":"markdown","2c4e926f":"markdown","6fe5b5a2":"markdown","c6de4e50":"markdown","7efaa352":"markdown","33648c2d":"markdown"},"source":{"63747acf":"# IMPORTING THE LIBRARIES\nimport pandas as pd\nimport seaborn as sns\nimport numpy as np\nsns.set(color_codes=True)\nimport matplotlib.pyplot as plt\nimport altair as alt\nfrom sklearn import datasets\n%matplotlib inline\nimport plotly.offline as py\n\nfrom wordcloud import WordCloud\n\nimport folium\nfrom folium.plugins import MarkerCluster\nfrom geopy.geocoders import Nominatim\n\nimport warnings\nwarnings.filterwarnings( 'ignore' )","094370b0":"# IMPORTING THE DATA SET\n\nKaggle = pd.read_csv('..\/input\/kaggle-survey-2021\/kaggle_survey_2021_responses.csv')\nKaggle.head()\nKaggle.drop(index=0, axis=1, inplace=True)\nKaggle.head()\n","27c26f27":"Kaggle.head()","29eab456":"import seaborn as sns\nsns.set_theme(style=\"darkgrid\")\nax = sns.countplot(x=\"Q1\", data=Kaggle,order = Kaggle['Q1'].value_counts().index)\nax.set( xlabel = 'Agegroup', ylabel='Count')","c2817836":"print(Kaggle.loc[1:, ['Q2']].value_counts().plot(kind='bar',color= '#D4FF00', fontsize=10))","307638f1":"age_18_21 = Kaggle[Kaggle['Q1']=='18-21']['Q3'].value_counts().sort_index().drop([\"Other\", \"I do not wish to disclose my location\"]).tolist()\nage_22_24 = Kaggle[Kaggle['Q1']=='22-24']['Q3'].value_counts().sort_index().drop([\"Other\", \"I do not wish to disclose my location\"]).tolist()\nage_25_29 = Kaggle[Kaggle['Q1']=='25-29']['Q3'].value_counts().sort_index().drop([\"Other\", \"I do not wish to disclose my location\"]).tolist()\n\nTotal = Kaggle.loc[1:, ['Q3']].value_counts().drop([\"Other\", \"I do not wish to disclose my location\"]).sort_index().tolist() \nage_below_30 = (np.array(age_18_21)+np.array(age_22_24)+np.array(age_25_29)).tolist()\nage_30_and_above = (np.array(Total)-np.array(age_below_30)).tolist()\n\nplt.figure(figsize=(15, 11))\ncol=['blue', 'yellow', 'black', 'green', 'red', 'green', 'green', 'yellow', 'yellow', 'yellow', 'red', 'yellow', 'green', 'green', 'yellow', 'blue', 'blue', 'green', 'green', 'blue', 'green', 'red', 'red', 'red', 'red', 'red', 'green', 'red', 'green', 'red', 'red', 'blue', 'red', 'yellow', 'blue', 'red', 'green', 'blue', 'green', 'red', 'yellow', 'red', 'green', 'green', 'green', 'green', 'red', 'red', 'blue', 'red', 'green', 'red', 'green', 'green', 'red', 'red', 'blue', 'red', 'blue', 'green', 'red', 'green', 'yellow', 'red']\nplt.scatter(age_30_and_above, age_below_30, s=Total, c=col, alpha=0.5)\n\nplt.xscale('log')\nplt.yscale('log')\nplt.xlabel('No. of respondents aged 30 and above', fontsize=20)\nplt.ylabel('No. of respondents with age below 30', fontsize=20)\nplt.title('below 30 vs 30 and above', fontsize=24)\n\ntick_val = [100, 1000, 10000]\ntick_lab = ['0.1k', '1k', '10k']\n\nplt.xticks(tick_val, tick_lab, fontsize=24)\nplt.yticks(tick_val, tick_lab, fontsize=24)\n\nplt.text(1400, 5200, 'India', fontsize=17)\nplt.text(1560, 750, 'USA', fontsize=17)\n\nplt.show()\nplt.clf()","df14a00d":"z=Kaggle.groupby([ 'Q3', 'Q1']).size().unstack().fillna(0).astype('int16')\nfig, ax = plt.subplots(figsize=(14, 18))\nsns.heatmap(z.apply(lambda x: x\/x.sum(), axis=1), xticklabels=True, yticklabels=True, cmap='RdBu', annot=True, linewidths=0.005, linecolor='black', annot_kws={\"fontsize\":12}, fmt='.3f')\nplt.title('Age Distribution by Country', fontname = 'monospace', weight='bold')\nplt.yticks(fontsize=9)\nplt.show()\ndel z","b488d6f7":"Kaggle.Q4.replace(\"Bachelor\u2019s degree\",\"BS\",inplace=True)\nKaggle.Q4.replace(\"Doctoral degree\",\"Phd\",inplace=True)\nKaggle.Q4.replace(\"Master\u2019s degree\",\"MS\",inplace=True)\nKaggle.Q4.replace(\"I prefer not to answer\",\"No Answer\",inplace=True)\nKaggle.Q4.replace(\"No formal education past high school\",\"High School\",inplace=True)\nKaggle.Q4.replace(\"Some college\/university study without earning a bachelor\u2019s degree\",\"College\",inplace=True)\nunique,counts = np.unique(Kaggle.Q4[1:],return_counts=True)\nplt.title(\"Education\")\nplt.xlabel(\"Level\")\nplt.pie(counts,labels=unique,colors=colors,autopct='%1.0f%%')\nplt.legend(loc=\"lower right\",bbox_to_anchor=(0,1))\n","436ee345":"text3 = \" \".join(Q4 for Q4 in Kaggle.Q4)\n\n# Creating word_cloud with text as argument in .generate() method\n\nword_cloud2 = WordCloud(collocations = False, background_color = 'white').generate(text3)\n\n# Display the generated Word Cloud\n\nplt.imshow(word_cloud2, interpolation='bilinear')\n\nplt.axis(\"off\")\n\nplt.show()","9dfc55a9":"text4 = \" \".join(Q5 for Q5 in Kaggle.Q5)\n\n# Creating word_cloud with text as argument in .generate() method\n\nword_cloud2 = WordCloud(collocations = False, background_color = 'white').generate(text4)\n\n# Display the generated Word Cloud\n\nplt.imshow(word_cloud2, interpolation='bilinear')\n\nplt.axis(\"off\")\n\nplt.show()","e21089ae":"unique,counts = np.unique(Kaggle.Q5[1:],return_counts=True)\nplt.title(\"Profession\")\nplt.ylabel(\"Type\")\nplt.xlabel(\"Count\")\nplt.barh(unique,counts,zorder=3,color = ['Blue','green','darkgreen','aquamarine','darkslategrey','aqua','powderblue','lightskyblue','lightslategray','lightsteelblue'])\nplt.tick_params(bottom=False,left=False)\nplt.grid(True,color='white', linestyle='solid', linewidth=2.0, alpha=0.5,zorder=0)","98129874":"import plotly.graph_objs as go\n\nedu = Kaggle['Q5'].value_counts()\n\ntrace = go.Scatter(\n    x=edu.index,\n    y=edu.values,\n    mode='markers',\n    marker=dict(\n        sizemode = 'diameter',\n        sizeref = 30,\n        size = edu.values,\n        color = edu.values,\n        colorscale='Fall',\n        showscale=True\n    ),\n)\n\nlayout = go.Layout(\n    title='Current Role'\n)\n\ndata = [trace]\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename=\"Current Role\")","df71955c":"Kaggle.Q6.replace(\"I have never written code\",\"Never\",inplace=True)\nunique,counts = np.unique(Kaggle.Q6[1:],return_counts=True)\nplt.title(\"Coding Experience\")\nplt.ylabel(\"Years\")\nplt.xlabel(\"Count\")\nplt.barh(unique,counts,zorder=3,color=['forestgreen','green','springgreen','aquamarine','darkslategrey','aqua','powderblue'])\nplt.tick_params(bottom=False,left=False)\nplt.grid(True,color='white', linestyle='solid', linewidth=2.0, alpha=0.5,zorder=0)\nplt.tight_layout()","ed58ccf0":"scale =[[0, '#E4C56F'],\n             [0.5,'#455C4F'],\n             [1.0, '#CF673A']]\n\n\nsettings = [ dict(\n        type = 'choropleth',\n        autocolorscale = False,\n        colorscale = scale,\n        showscale = True,\n        locations = Kaggle.Q3.value_counts().index,\n        z = Kaggle.Q3.value_counts().values,\n        locationmode = 'country names',\n        text = Kaggle.Q3.value_counts().index,\n        marker = dict(\n            line = dict(color = '#E4C56F', width = 0.5)),\n            colorbar = dict(autotick = True, tickprefix = '', \n            title = 'Participants')\n            )\n       ]\n\nlayout = dict(\n    title = 'Number of People Participated in Survey',\n    geo = dict(\n        showframe = True,\n        showocean = True,\n        oceancolor = '#1274A1',\n        projection = dict(\n        type = 'orthographic',\n            rotation = dict(\n                    lon = 60,\n                    lat = 10),\n        ),\n        lonaxis =  dict(\n                showgrid = False,\n                gridcolor = '#6e6d6d'\n            ),\n        lataxis = dict(\n                showgrid = False,\n                gridcolor = '#6e6d6d'\n                )\n            ),\n        )\nfig = dict(data=settings, layout=layout)\npy.iplot(fig, validate=False, filename='worldmap')","312cd734":"#df['Q3'].value_counts()\ndf_=Kaggle['Q3'].value_counts().head(5)\n#Draw the pie chart\ncolors = ['#ff9999','#66b3ff','#99ff99','#ffcc99','#2B00FF', '#D4FF00']\nlabels=df_.index\nsizes=df_.values\nfig,ax1=plt.subplots(1,1,figsize=(24,8))\nax1.pie(sizes, labels=labels, colors = colors,autopct='%1.1f%%',shadow=True, startangle=90)\nax1.axis(\"equal\")\nplt.title(\"Top 5 Countries\",fontsize=26,color= \"#90ff00\")\nplt.show()","e055b988":"text2 = \" \".join(Q3 for Q3 in Kaggle.Q3)\n\n# Creating word_cloud with text as argument in .generate() method\n\nword_cloud2 = WordCloud(collocations = False, background_color = 'white').generate(text2)\n\n# Display the generated Word Cloud\n\nplt.imshow(word_cloud2, interpolation='bilinear')\n\nplt.axis(\"off\")\n\nplt.show()","52530dc7":"print(Kaggle.loc[1:, ['Q11']].value_counts().plot(kind='bar', fontsize=10))","f61a48ee":"print(Kaggle.loc[1:, ['Q13']].value_counts().plot(kind='bar', fontsize=10))","b53f61f9":"df_=Kaggle['Q15'].value_counts().head(10)\n#Draw the pie chart\ncolors = ['#ff9999','#66b3ff','#99ff99','#ffcc99']\nlabels=df_.index\nsizes=df_.values\nfig,ax1=plt.subplots(1,1,figsize=(30,12))\nax1.pie(sizes, labels=labels, colors= colors,autopct='%1.1f%%',shadow=True, startangle=90)\nax1.axis(\"equal\")\nplt.title(\"ML Exp\",fontsize=30,color= \"#8B4513\")\nplt.show()","2a1d1e0c":"df_=Kaggle['Q20'].value_counts().head(10)\n#Draw the pie chart\nlabels=df_.index\nsizes=df_.values\nfig,ax1=plt.subplots(1,1,figsize=(24,8))\nax1.pie(sizes, labels=labels, autopct='%1.1f%%',shadow=True, startangle=90)\nax1.axis(\"equal\")\nplt.title(\"Industry\",fontsize=26,color= \"#8B4513\")\nplt.show()","a5c3b09f":"df_=Kaggle['Q21'].value_counts().head(10)\n#Draw the pie chart\nlabels=df_.index\nsizes=df_.values\nfig,ax1=plt.subplots(1,1,figsize=(24,8))\nax1.pie(sizes, labels=labels, autopct='%1.1f%%',shadow=True, startangle=90)\nax1.axis(\"equal\")\nplt.title(\"Company Size\",fontsize=26,color= \"#8B4513\")\nplt.show()","9253bfef":"import seaborn as sns\nsns.set_theme(style=\"darkgrid\")\nax = sns.countplot(x=\"Q22\", data=Kaggle)\nax.set( xlabel = 'Responsible for data science workload', ylabel='Count')","8fd9a041":"df_=Kaggle['Q23'].value_counts().head(10)\n#Draw the pie chart\ncolors = ['#ff9999','#66b3ff','#99ff99','#ffcc99']\nlabels=df_.index\nsizes=df_.values\nfig,ax1=plt.subplots(1,1,figsize=(24,8))\nax1.pie(sizes, labels=labels,colors= colors, autopct='%1.1f%%',shadow=True, startangle=90)\nax1.axis(\"equal\")\nplt.title(\"ML USED\",fontsize=26,color= \"#8B4513\")\nplt.show()","57ef173c":"z=Kaggle.groupby([ 'Q25', 'Q1']).size().unstack().fillna(0).astype('int16')\nfig, ax = plt.subplots(figsize=(14, 18))\nsns.heatmap(z.apply(lambda x: x\/x.sum(), axis=1), xticklabels=True, yticklabels=True, cmap='viridis', annot=True, linewidths=0.005, linecolor='black', annot_kws={\"fontsize\":12}, fmt='.3f')\nplt.title('CTC w.r.t. Age', fontname = 'monospace', weight='bold')\nplt.yticks(fontsize=9)\nplt.show()\ndel z","33742dda":"z=Kaggle.groupby([ 'Q25', 'Q2']).size().unstack().fillna(0).astype('int16')\nfig, ax = plt.subplots(figsize=(14, 18))\nsns.heatmap(z.apply(lambda x: x\/x.sum(), axis=1), xticklabels=True, yticklabels=True, cmap='viridis', annot=True, linewidths=0.005, linecolor='white', annot_kws={\"fontsize\":12}, fmt='.3f')\nplt.title('CTC w.r.t.Gender', fontname = 'monospace', weight='bold')\nplt.yticks(fontsize=9)\nplt.show()\ndel z","2f02e66b":"df_=Kaggle['Q26'].value_counts().head(10)\n#Draw the pie chart\nlabels=df_.index\nsizes=df_.values\nfig,ax1=plt.subplots(1,1,figsize=(24,8))\nax1.pie(sizes, labels=labels, autopct='%1.1f%%',shadow=True, startangle=90)\nax1.axis(\"equal\")\nplt.title(\"Money spent in learning\",fontsize=26,color= \"#8B4513\")\nplt.show()","0c0c0a70":"python_count = Kaggle[1:]['Q7_Part_1'].count() \/ (Kaggle.shape[0]-1)\nR_count = Kaggle[1:]['Q7_Part_2'].count() \/ (Kaggle.shape[0]-1)\nboth_count = Kaggle.loc[1:, ['Q7_Part_1', 'Q7_Part_2']][ (Kaggle['Q7_Part_1'] == \"Python\") & (Kaggle[\"Q7_Part_2\"] == 'R') ].count()[0] \/ (Kaggle.shape[0]-1)\nsns.barplot(['Python', 'R', 'Both'], [python_count*100 , R_count*100, both_count*100], palette=['#82ACBA', '#BA82AC', '#82BA99'])\nplt.title('Python Vs R Comparison')\nplt.xlabel('Language Used')\nplt.ylabel('Percentage')\nplt.show()","01805528":"python_recommend = Kaggle.query(\"Q8 == 'Python'\")['Q8'].count() \/  (Kaggle.shape[0]-1)\nR_recommed = Kaggle.query(\"Q8 == 'R'\")['Q8'].count() \/ (Kaggle.shape[0]-1)\nsns.barplot(['Python', 'R'], [python_recommend*100, R_recommed*100], palette='plasma')\nplt.title('Python Vs R Comparison')\nplt.xlabel('Language Recommendation')\nplt.ylabel('Percentage')\n\nsns.countplot(y=Kaggle['Q35'] , palette='Greens_r')\nplt.title('BI tool Data Analysts most use')\nplt.show()\nplt.show()","4b901aba":"Q10_parts=list(filter(lambda x: x.split('_')[0]=='Q10' ,Kaggle.columns))\ndfQ10=pd.DataFrame(Kaggle[Q10_parts].stack().tolist(),columns=['Notebooks'])\ndfQ10['Notebooks'].value_counts()","dd151d29":"l=sns.countplot(y='Notebooks',data=dfQ10,order=dfQ10['Notebooks'].value_counts().sort_index().index)\nl.set_yticklabels(labels=dfQ10['Notebooks'].value_counts().sort_index().index)\nplt.show()","eb02d433":"Q9_parts=list(filter(lambda x: x.split('_')[0]=='Q9' ,Kaggle.columns))\ndfQ9=pd.DataFrame(Kaggle[Q9_parts].stack().tolist(),columns=['IDE'])\ndfQ9['IDE'].value_counts()","67e8d16a":"l=sns.countplot(y='IDE',data=dfQ9,order=dfQ9['IDE'].value_counts().sort_index().index)\nl.set_yticklabels(labels=dfQ9['IDE'].value_counts().sort_index().index)\nplt.show()","c20b15a9":"Q12_parts=list(filter(lambda x: x.split('_')[0]=='Q12' ,Kaggle.columns))\ndfQ12=pd.DataFrame(Kaggle[Q12_parts].stack().tolist(),columns=['Hardware'])\ndfQ12['Hardware'].value_counts()","80c99b0b":"l=sns.countplot(y='Hardware',data=dfQ12,order=dfQ12['Hardware'].value_counts().sort_index().index)\nl.set_yticklabels(labels=dfQ12['Hardware'].value_counts().sort_index().index)\nplt.show()","079e2e1e":"Q14_parts=list(filter(lambda x: x.split('_')[0]=='Q14' ,Kaggle.columns))\ndfQ14=pd.DataFrame(Kaggle[Q14_parts].stack().tolist(),columns=['Library'])\ndfQ14['Library'].value_counts()","8de1cf86":"l=sns.countplot(y='Library',data=dfQ14,order=dfQ14['Library'].value_counts().sort_index().index)\nl.set_yticklabels(labels=dfQ14['Library'].value_counts().sort_index().index)\nplt.show()","34df099e":"Q16_parts=list(filter(lambda x: x.split('_')[0]=='Q16' ,Kaggle.columns))\ndfQ16=pd.DataFrame(Kaggle[Q16_parts].stack().tolist(),columns=['ML Framework'])\ndfQ16['ML Framework'].value_counts()\nl=sns.countplot(y='ML Framework',data=dfQ16,order=dfQ16['ML Framework'].value_counts().sort_index().index)\nl.set_yticklabels(labels=dfQ16['ML Framework'].value_counts().sort_index().index)\nplt.show()","016964aa":"Q17_parts=list(filter(lambda x: x.split('_')[0]=='Q17' ,Kaggle.columns))\ndfQ17=pd.DataFrame(Kaggle[Q17_parts].stack().tolist(),columns=['ML Algorithm'])\ndfQ17['ML Algorithm'].value_counts()\nl=sns.countplot(y='ML Algorithm',data=dfQ17,order=dfQ17['ML Algorithm'].value_counts().sort_index().index)\nl.set_yticklabels(labels=dfQ17['ML Algorithm'].value_counts().sort_index().index)\nplt.show()","0b9fa171":"Q18_parts=list(filter(lambda x: x.split('_')[0]=='Q18' ,Kaggle.columns))\ndfQ18=pd.DataFrame(Kaggle[Q18_parts].stack().tolist(),columns=['CV Method'])\ndfQ18['CV Method'].value_counts()\nl=sns.countplot(y='CV Method',data=dfQ18,order=dfQ18['CV Method'].value_counts().sort_index().index)\nl.set_yticklabels(labels=dfQ18['CV Method'].value_counts().sort_index().index)\nplt.show()","1daaab40":"Q19_parts=list(filter(lambda x: x.split('_')[0]=='Q19' ,Kaggle.columns))\ndfQ19=pd.DataFrame(Kaggle[Q19_parts].stack().tolist(),columns=['NLP'])\ndfQ19['NLP'].value_counts()\nl=sns.countplot(y='NLP',data=dfQ19,order=dfQ19['NLP'].value_counts().sort_index().index)\nl.set_yticklabels(labels=dfQ19['NLP'].value_counts().sort_index().index)\nplt.show()","db9e53a6":"Q27_parts=list(filter(lambda x: x.split('_')[0]=='Q27' ,Kaggle.columns))\ndfQ27=pd.DataFrame(Kaggle[Q27_parts].stack().tolist(),columns=['Cloud Computing Platform'])\ndfQ27['Cloud Computing Platform'].value_counts()\nl=sns.countplot(y='Cloud Computing Platform',data=dfQ27,order=dfQ27['Cloud Computing Platform'].value_counts().sort_index().index)\nl.set_yticklabels(labels=dfQ27['Cloud Computing Platform'].value_counts().sort_index().index)\nplt.show()","fa2e9de2":"Q29_parts=list(filter(lambda x: x.split('_')[0]=='Q29' ,Kaggle.columns))\ndfQ29=pd.DataFrame(Kaggle[Q29_parts].stack().tolist(),columns=['Cloud Computing Product'])\ndfQ29['Cloud Computing Product'].value_counts()\nl=sns.countplot(y='Cloud Computing Product',data=dfQ29,order=dfQ29['Cloud Computing Product'].value_counts().sort_index().index)\nl.set_yticklabels(labels=dfQ29['Cloud Computing Product'].value_counts().sort_index().index)\nplt.show()","124b3eb7":"Q30_parts=list(filter(lambda x: x.split('_')[0]=='Q30' ,Kaggle.columns))\ndfQ30=pd.DataFrame(Kaggle[Q30_parts].stack().tolist(),columns=['Data Storage Product'])\ndfQ30['Data Storage Product'].value_counts()\nl=sns.countplot(y='Data Storage Product',data=dfQ30,order=dfQ30['Data Storage Product'].value_counts().sort_index().index)\nl.set_yticklabels(labels=dfQ30['Data Storage Product'].value_counts().sort_index().index)\nplt.show()","c14bf262":"Q31_parts=list(filter(lambda x: x.split('_')[0]=='Q31' ,Kaggle.columns))\ndfQ31=pd.DataFrame(Kaggle[Q31_parts].stack().tolist(),columns=['ML Product'])\ndfQ31['ML Product'].value_counts()\nl=sns.countplot(y='ML Product',data=dfQ31,order=dfQ31['ML Product'].value_counts().sort_index().index)\nl.set_yticklabels(labels=dfQ31['ML Product'].value_counts().sort_index().index)\nplt.show()","67ff2ac4":"Q32_parts=list(filter(lambda x: x.split('_')[0]=='Q32' ,Kaggle.columns))\ndfQ32=pd.DataFrame(Kaggle[Q32_parts].stack().tolist(),columns=['Big Data Product'])\ndfQ32['Big Data Product'].value_counts()\nl=sns.countplot(y='Big Data Product',data=dfQ32,order=dfQ32['Big Data Product'].value_counts().sort_index().index)\nl.set_yticklabels(labels=dfQ32['Big Data Product'].value_counts().sort_index().index)\nplt.show()","9d33c214":"Q34_parts=list(filter(lambda x: x.split('_')[0]=='Q34' ,Kaggle.columns))\ndfQ34=pd.DataFrame(Kaggle[Q34_parts].stack().tolist(),columns=['BI TOOL'])\ndfQ34['BI TOOL'].value_counts()\nl=sns.countplot(y='BI TOOL',data=dfQ34,order=dfQ34['BI TOOL'].value_counts().sort_index().index)\nl.set_yticklabels(labels=dfQ34['BI TOOL'].value_counts().sort_index().index)\nplt.show()","d55075c7":"Q36_parts=list(filter(lambda x: x.split('_')[0]=='Q36' ,Kaggle.columns))\ndfQ36=pd.DataFrame(Kaggle[Q36_parts].stack().tolist(),columns=['ML TOOL'])\ndfQ36['ML TOOL'].value_counts()\nl=sns.countplot(y='ML TOOL',data=dfQ36,order=dfQ36['ML TOOL'].value_counts().sort_index().index)\nl.set_yticklabels(labels=dfQ36['ML TOOL'].value_counts().sort_index().index)\nplt.show()","8ac2f0cf":"Q37_parts=list(filter(lambda x: x.split('_')[0]=='Q37' ,Kaggle.columns))\ndfQ37=pd.DataFrame(Kaggle[Q37_parts].stack().tolist(),columns=['ML TOOL'])\ndfQ37['ML TOOL'].value_counts()\nl=sns.countplot(y='ML TOOL',data=dfQ37,order=dfQ37['ML TOOL'].value_counts().sort_index().index)\nl.set_yticklabels(labels=dfQ37['ML TOOL'].value_counts().sort_index().index)\nplt.show()","24d75ded":"Q38_parts=list(filter(lambda x: x.split('_')[0]=='Q38' ,Kaggle.columns))\ndfQ38=pd.DataFrame(Kaggle[Q38_parts].stack().tolist(),columns=['ML TOOL MANAGED'])\ndfQ38['ML TOOL MANAGED'].value_counts()\nl=sns.countplot(y='ML TOOL MANAGED',data=dfQ38,order=dfQ38['ML TOOL MANAGED'].value_counts().sort_index().index)\nl.set_yticklabels(labels=dfQ38['ML TOOL MANAGED'].value_counts().sort_index().index)\nplt.show()","3ed1745e":"Q39_parts=list(filter(lambda x: x.split('_')[0]=='Q39' ,Kaggle.columns))\ndfQ39=pd.DataFrame(Kaggle[Q39_parts].stack().tolist(),columns=['ML DATA SHARED'])\ndfQ39['ML DATA SHARED'].value_counts()\nl=sns.countplot(y='ML DATA SHARED',data=dfQ39,order=dfQ39['ML DATA SHARED'].value_counts().sort_index().index)\nl.set_yticklabels(labels=dfQ39['ML DATA SHARED'].value_counts().sort_index().index)\nplt.show()","a80a7e54":"Q40_parts=list(filter(lambda x: x.split('_')[0]=='Q40' ,Kaggle.columns))\ndfQ40=pd.DataFrame(Kaggle[Q40_parts].stack().tolist(),columns=['LEARNED DATA SCINCE FROM'])\ndfQ40['LEARNED DATA SCINCE FROM'].value_counts()\nl=sns.countplot(y='LEARNED DATA SCINCE FROM',data=dfQ40,order=dfQ40['LEARNED DATA SCINCE FROM'].value_counts().sort_index().index)\nl.set_yticklabels(labels=dfQ40['LEARNED DATA SCINCE FROM'].value_counts().sort_index().index)\nplt.show()","564d4f8b":"Q41_parts=list(filter(lambda x: x.split('_')[0]=='Q41' ,Kaggle.columns))\ndfQ41=pd.DataFrame(Kaggle[Q41_parts].stack().tolist(),columns=['Media Sources for data science'])\ndfQ41['Media Sources for data science'].value_counts()\nl=sns.countplot(y='Media Sources for data science',data=dfQ41,palette=\"Set3\",order=dfQ41['Media Sources for data science'].value_counts().sort_index().index)\nl.set_yticklabels(labels=dfQ41['Media Sources for data science'].value_counts().sort_index().index)\nplt.show()","7bda269f":"# Residence in World","a44ef5ac":"# Current Role \/ Profession","d67c5d41":"# EDUCATION QUALIFICATIONS","6738d234":"# TPU USAGE","c8c8ac0a":"**AGE GROUP & GENDER BIFURCATION****","17ba82fb":"# Notebook USED","2c4e926f":"Hey! It's a great opportunity to get involved in the best and coolest community of Data Scientists, Statisticians, Coders, and Creatives. I look up to many people here and learned a lot in the past few months and want to get involved in the most creative competition of Kaggle's 5th Survey.\n\nI will try to do my best here with creativity and analysis. I am working on ideas on how I am going to tell the story, but I started with my favorite season of the year autumn so my colors are inspired by it. I will keep updating the notebook with new Ideas and hopefully will complete it before submission.\n\nLet's get started and Enjoy!","6fe5b5a2":"# Years of exp in coding","c6de4e50":"Top 10 Countries","7efaa352":"# Computing platform used","33648c2d":"The data realated field is popular among 18-29.\nThe reason for the lower distribution as the age increases must be due to popularity of data jobs in recent years."}}