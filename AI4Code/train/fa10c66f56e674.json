{"cell_type":{"01ec8055":"code","6621eb8a":"code","f11d0ee6":"code","2bc13f87":"code","0a74e347":"code","4a8d1012":"code","5b0aa7c6":"code","edd11b4d":"code","89910465":"code","d9110c6e":"code","5cee00c3":"code","534fd723":"code","59ca28d4":"code","ebc571f5":"code","065d874f":"code","28087257":"code","94732e36":"code","17a08028":"code","7956787d":"code","4d6fdb44":"code","1dcf8b02":"code","c9bf7f8a":"markdown","6e001665":"markdown","5aca24bb":"markdown","89af38b4":"markdown","42077d71":"markdown","7515b1b5":"markdown","66be0fe9":"markdown","d9260612":"markdown","fc6667a4":"markdown","0d460fae":"markdown","583e0ed6":"markdown","a5d95557":"markdown","03f9a1bc":"markdown","3b54ea57":"markdown","710b2299":"markdown","4ae39341":"markdown","3204cc4a":"markdown","dbe7bef0":"markdown"},"source":{"01ec8055":"from mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt # plotting\nimport numpy as np # linear algebra\nimport os # accessing directory structure\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns # for making plots with seaborn\ncolor = sns.color_palette()\nsns.set(rc={'figure.figsize':(25,15)})","6621eb8a":"print(os.listdir('..\/input\/game-of-thrones-episode-data-full'))\ndf_ep = pd.read_csv('..\/input\/game-of-thrones-episode-data-full\/got_csv_full.csv')\ndf_ep.head(10)\nprint('Number of episodes in the dataset : ' , len(df_ep))","f11d0ee6":"df_ep_clean = pd.read_csv('..\/input\/game-of-thrones-episode-data-cleaned\/got_csv_full_clean.csv')\ndf_ep_clean.head(10)\nprint('Number of episodes in the dataset : ' , len(df_ep))","2bc13f87":"#plotPerColumnDistribution(df_ep, 10, 5)\nprint(df_ep.dtypes)","0a74e347":"%matplotlib inline\nfrom matplotlib import pyplot as plt\nplt.style.use('ggplot')\n\ncolor = sns.color_palette()\nsns.set(rc={'figure.figsize':(25,15)})\n\nimport plotly\n# connected=True means it will download the latest version of plotly javascript library.\nplotly.offline.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\nimport plotly.figure_factory as ff\nimport cufflinks as cf\n\n\nimport warnings\nwarnings.filterwarnings('ignore')","4a8d1012":"# Distribution graphs (histogram\/bar graph) of column data\ndef plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n    nunique = df.nunique()\n    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\n    nRow, nCol = df.shape\n    columnNames = list(df)\n    nGraphRow = (nCol + nGraphPerRow - 1) \/ nGraphPerRow\n    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n    for i in range(min(nCol, nGraphShown)):\n        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n        columnDf = df.iloc[:, i]\n        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n            valueCounts = columnDf.value_counts()\n            valueCounts.plot.bar()\n        else:\n            columnDf.hist()\n        plt.ylabel('counts')\n        plt.xticks(rotation = 90)\n        plt.title(f'{columnNames[i]} (column {i})')\n    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)\n    plt.show()\n","5b0aa7c6":"plotPerColumnDistribution(df_ep, 10, 5)","edd11b4d":"number_of_deaths_in_category = df_ep['Notable_Death_Count'].value_counts().sort_values(ascending=True)\n\ndata = [go.Pie(\n        labels = number_of_deaths_in_category.index,\n        values = number_of_deaths_in_category.values,\n        hoverinfo = 'label+value'\n    \n)]\n\nplotly.offline.iplot(data, filename='Notable_Death_Count')","89910465":"data = [go.Histogram(\n        x = df_ep.Imdb_Rating,\n        xbins = {'start': 1, 'size':0.5, 'end' :10}\n)]\n\nprint('Average episode rating = ', np.mean(df_ep['Imdb_Rating']))\nplotly.offline.iplot(data, filename='overall_rating_distribution')","d9110c6e":"sns.set_style(\"darkgrid\")\nax = sns.jointplot(df_ep['Season'], df_ep['Imdb_Rating'])","5cee00c3":"sns.set_style(\"darkgrid\")\nax = sns.jointplot(df_ep['Notable_Death_Count'], df_ep['Imdb_Rating'])","534fd723":"sns.set_style(\"darkgrid\")\nax = sns.jointplot(df_ep['US_viewers_million'], df_ep['Imdb_Rating'])","59ca28d4":"fig, ax = plt.subplots()\nfig.set_size_inches(10, 5)\np = sns.stripplot(x=\"Imdb_Rating\", y=\"US_viewers_million\", data=df_ep, jitter=True, linewidth=1)\ntitle = ax.set_title('Viewers vs. Ratings')","ebc571f5":"fig, ax = plt.subplots()\nfig.set_size_inches(10, 5)\np = sns.stripplot(x=\"Imdb_Rating\", y=\"Writer\", data=df_ep_clean, jitter=True, linewidth=1)\ntitle = ax.set_title('Writers vs. Ratings')","065d874f":"#df_ep_clean_1 = df_ep_clean\n#df_ep_clean_1['Writer'] = df_ep_clean['Writer'].apply(lambda x: x.replace(' ', ' ') if ',' in str(x) else x)","28087257":"\nfig, ax = plt.subplots()\nfig.set_size_inches(10, 5)\np = sns.stripplot(x=\"Imdb_Rating\", y=\"Director\", data=df_ep_clean, jitter=True, linewidth=1)\ntitle = ax.set_title('Directors vs. Ratings')","94732e36":"#!pip install bubbly","17a08028":"from __future__ import division\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode()\nfrom bubbly.bubbly import bubbleplot\n","7956787d":"# Adding Year column\ndf_ep_clean['Original_Air_Date'] = pd.to_datetime(df_ep_clean['Original_Air_Date'], format='%B %d, %Y')\ndf_ep_clean['Original_Air_Year'] = df_ep_clean['Original_Air_Date'].dt.year # df_ep_clean['year']","4d6fdb44":"df_ep_clean.head(10)","1dcf8b02":"figure = bubbleplot(dataset=df_ep_clean, x_column='US_viewers_million', y_column='Imdb_Rating'\n                   ,     bubble_column='Season' \n                  ,  time_column='Original_Air_Year'\n                    , size_column='IMDB_votes'\n                  #  , color_column='Writer'\n                     , color_column='Number_in_Season'\n                       ,x_title=\"Viewers (millions)\", y_title=\"IMDB Ratings\", title='Viewers and Ratings by IMDB Voters over Years',\n    x_logscale=True, scale_bubble=3, height=650, show_colorbar=True)\n\niplot(figure, config={'scrollzoom': True})","c9bf7f8a":"> Most episodes have either 2 (19.2%, 14 episodes) or 4 o1 (17.8%, 13 episodes) notable deaths","6e001665":"## Do certain Writers and Directors make better episodes?","5aca24bb":"## Conclusion\nThis concludes my inital analysis! ","89af38b4":"## Another way to look at Same Analysis of Viewers vs. Ratings","42077d71":"> Consistent ratings until ~8 million viewers","7515b1b5":"## Notable Death - Impacts Ratings?\n\nHow do notable death count impact the episodes ratings","66be0fe9":"> Season 1 has most consistent ratings, Season 3 and 6 have highest ratings overall","d9260612":" ## Is there are link between Ratings and Viewer figures?","fc6667a4":"## Viewers and Ratings by Writers and IMDB Voters","0d460fae":"Distribution graphs (histogram\/bar graph) of sampled columns:","583e0ed6":"## Introduction\nExploring episodes data for Game of Thrones","a5d95557":"## Do certain Directors make better Episodes?","03f9a1bc":"## Exploratory Analysis\nTo begin this exploratory analysis, first import libraries and define functions for plotting the data using `matplotlib`. Depending on the data, not all plots will be made. ","3b54ea57":"## Which Season is most Popular?","710b2299":"Most top rated episodes have optimally sized deaths 0 to 4 - neither too less nor too much.","4ae39341":"## Average Rating of Episodes\n\nDo any episodes perform really bad or really good?","3204cc4a":"## Death Count Percentage","dbe7bef0":"There is 1 csv file in the current version of the dataset but it doesn't include the last seson data, so added that dataset\n"}}