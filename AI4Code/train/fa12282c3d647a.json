{"cell_type":{"fdcb7ef2":"code","56988fad":"code","81066575":"code","a303bb7d":"code","aaee7eaa":"code","1b69f0bb":"code","9edc7927":"code","65d559a1":"code","76f479a4":"code","1b15b9f8":"code","3f056d08":"code","be3e56c2":"code","bb14ea4f":"code","30166bd9":"code","d393f363":"code","6401a4a4":"code","bab0ece7":"code","1d7df13c":"code","e8fd4e38":"code","e99acd5d":"code","263c211e":"code","bfd1f7e6":"code","747c202e":"code","929afe30":"code","7dff3d16":"code","bde01b33":"code","5a2b367c":"code","230a6049":"code","977bc6db":"code","55bbd286":"code","4ed9dc7b":"code","1617491c":"code","ee629b3b":"code","646bb824":"code","1bc24636":"code","dca2122d":"code","8b6bd423":"code","88981494":"code","9a439795":"code","c2cae314":"code","e30ed767":"code","26397800":"code","25d5a8ff":"code","b9ca883b":"code","449a8d7a":"code","a70e6d10":"code","67f7c97f":"code","1275e049":"code","052861f5":"markdown","20db9e65":"markdown","8c059937":"markdown","1a2075e4":"markdown","99eba00c":"markdown","494ab519":"markdown","3bb83f15":"markdown","d6469732":"markdown","ae3fe599":"markdown","3d219603":"markdown","527dfc29":"markdown","a823ba38":"markdown","1d59a4e1":"markdown","6394f9f5":"markdown","3e410809":"markdown","6dbf4b3b":"markdown","044c0e7e":"markdown","bc28e4c5":"markdown","12a24c13":"markdown","a2307a83":"markdown","4360a446":"markdown","7e7a0628":"markdown","86d7b364":"markdown","c7959573":"markdown","ba73a547":"markdown","d73f931d":"markdown","e2bf6d2d":"markdown","36609786":"markdown","d7902db6":"markdown","869eefd9":"markdown","82d1ccaa":"markdown","0f7723f4":"markdown","0c604d80":"markdown","79bd494c":"markdown","3c232414":"markdown","6d84ca8b":"markdown","e30055b7":"markdown","af06edfc":"markdown","296fb6b7":"markdown","0f1c45d4":"markdown","c0e26395":"markdown","ec61bd6f":"markdown","642202df":"markdown","89da8451":"markdown","0685a953":"markdown","04deede5":"markdown","c6a538ea":"markdown","fb567e60":"markdown"},"source":{"fdcb7ef2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","56988fad":"import pandas as pd\nimport numpy as np \nfrom pandas import Series,DataFrame\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('whitegrid')\nfrom datetime import datetime\n#from __future__ import division","81066575":"tech_list = ['HBL', 'UBL', 'BOP', 'MCB']","a303bb7d":"HBL=pd.read_csv('..\/input\/ksedataset\/HBL.csv')\nUBL=pd.read_csv('..\/input\/ksedataset\/UBL.csv')\nBOP=pd.read_csv('..\/input\/ksedataset\/BOP.csv')\nMCB=pd.read_csv('..\/input\/ksedataset\/MCB.csv')","aaee7eaa":"HBL.head()","1b69f0bb":"HBL.index","9edc7927":"#AAPL.index=pd.to_datetime(AAPL.index)\n#AAPL.index","65d559a1":"company_list = [HBL, UBL, BOP, MCB]\ncompany_name = [\"HBL\", \"UBL\", \"BOP\", \"MCB\"]\n\nfor company, com_name in zip(company_list, company_name):\n    company[\"company_name\"] = com_name\n    \ndf = pd.concat(company_list, axis=0)\ndf.sample(10)","76f479a4":"HBL.describe().T","1b15b9f8":"HBL.info()","3f056d08":"HBL['Date']=pd.to_datetime(HBL['Date'])\nUBL['Date']=pd.to_datetime(HBL['Date'])\nBOP['Date']=pd.to_datetime(HBL['Date'])\nMCB['Date']=pd.to_datetime(HBL['Date'])\nHBL.info()","be3e56c2":"HBL.plot(x='Date', y='Close',legend=True,figsize=(10,4))\nplt.title('HBL')\nplt.ioff()\n\nUBL.plot(x='Date', y='Close',legend=True,figsize=(10,4))\nplt.title('UBL')\nplt.ioff()\n\nBOP.plot(x='Date', y='Close',legend=True,figsize=(10,4))\nplt.title('BOP')\nplt.ioff()\n\nMCB.plot(x='Date', y='Close',legend=True,figsize=(10,4))\nplt.title('MCB')\nplt.ioff()","bb14ea4f":"title='VOLUME TRADED'\nylabel='Volume'\nxlabel='Time'","30166bd9":"ax=HBL.plot(x='Date', y='Volume',legend=True,figsize=(10,4));\nax.autoscale(axis='x',tight=True)  # use both if want to scale both axis\nax.set(xlabel=xlabel,ylabel=ylabel)\nplt.title('HBL')\nplt.ioff()\n\nax=UBL.plot(x='Date', y='Volume',legend=True,figsize=(10,4));\nax.autoscale(axis='x',tight=True)  # use both if want to scale both axis\nax.set(xlabel=xlabel,ylabel=ylabel)\nplt.title('UBL')\nplt.ioff()\n\nax=BOP.plot(x='Date', y='Volume',legend=True,figsize=(10,4));\nax.autoscale(axis='x',tight=True)  # use both if want to scale both axis\nax.set(xlabel=xlabel,ylabel=ylabel)\nplt.title('BOP')\nplt.ioff()\n\nax=MCB.plot(x='Date', y='Volume',legend=True,figsize=(10,4));\nax.autoscale(axis='x',tight=True)  # use both if want to scale both axis\nax.set(xlabel=xlabel,ylabel=ylabel)\nplt.title('MCB')\nplt.ioff()","d393f363":"HBL.plot(x='Date', y='Close',ylim=[80,180],legend=True,figsize=(10,4),ls='--',c='red')\nplt.title('HBL')\nplt.ioff()\n\nUBL.plot(x='Date', y='Close',ylim=[80,180],legend=True,figsize=(10,4),ls='--',c='red')\nplt.title('UBL')\nplt.ioff()\n\nBOP.plot(x='Date', y='Close',ylim=[80,180],legend=True,figsize=(10,4),ls='--',c='red')\nplt.title('BOP')\nplt.ioff()\n\nMCB.plot(x='Date', y='Close',ylim=[80,180],legend=True,figsize=(10,4),ls='--',c='red')\nplt.title('MCB')\nplt.ioff()","6401a4a4":"ma_day = [10, 20, 50]\n\nfor ma in ma_day:\n    for company in company_list:\n        column_name = f\"MA for {ma} days\"\n        company[column_name] = company['Close'].rolling(ma).mean()","bab0ece7":"print(HBL.columns)","1d7df13c":"df.groupby(\"company_name\").hist(figsize=(12, 12));","e8fd4e38":"fig, axes = plt.subplots(nrows=2, ncols=2)\nfig.set_figheight(8)\nfig.set_figwidth(15)\n\nHBL[['Close', 'MA for 10 days', 'MA for 20 days', 'MA for 50 days']].plot(ax=axes[0,0])\naxes[0,0].set_title('HBL')\n\nUBL[['Close', 'MA for 10 days', 'MA for 20 days', 'MA for 50 days']].plot(ax=axes[0,1])\naxes[0,1].set_title('UBL')\n\nBOP[['Close', 'MA for 10 days', 'MA for 20 days', 'MA for 50 days']].plot(ax=axes[1,0])\naxes[1,0].set_title('BOP')\n\nMCB[['Close', 'MA for 10 days', 'MA for 20 days', 'MA for 50 days']].plot(ax=axes[1,1])\naxes[1,1].set_title('MCB')\n\nfig.tight_layout()","e99acd5d":"# We'll use pct_change to find the percent change for each day\nfor company in company_list:\n    company['Daily Return'] = company['Close'].pct_change()\n\n# Then we'll plot the daily return percentage\nfig, axes = plt.subplots(nrows=2, ncols=2)           #Use ax.get_subplotspec().colspan.start instead.\nfig.set_figheight(8)\nfig.set_figwidth(15)\n\nHBL['Daily Return'].plot(ax=axes[0,0], legend=True, linestyle='--', marker='o')\naxes[0,0].set_title('HBL')\n\nUBL['Daily Return'].plot(ax=axes[0,1], legend=True, linestyle='--', marker='o')\naxes[0,1].set_title('UBL')\n\nBOP['Daily Return'].plot(ax=axes[1,0], legend=True, linestyle='--', marker='o')\naxes[1,0].set_title('BOP')\n\nMCB['Daily Return'].plot(ax=axes[1,1], legend=True, linestyle='--', marker='o')\naxes[1,1].set_title('MCB')\n\nfig.tight_layout()","263c211e":"# Note the use of dropna() here, otherwise the NaN values can't be read by seaborn\nplt.figure(figsize=(12, 12))\n\nfor i, company in enumerate(company_list, 1):\n    plt.subplot(2, 2, i)\n    sns.distplot(company['Daily Return'].dropna(), bins=100, color='purple')\n    plt.ylabel('Average Daily Return')\n    plt.title(f'{company_name[i - 1]}')\n# Could have also done:\n#AAPL['Daily Return'].hist()","bfd1f7e6":"# Note the use of hist() \nplt.figure(figsize=(12, 12))\n\nfor i, company in enumerate(company_list, 1):\n    plt.subplot(2, 2, i)\n    company['Daily Return'].hist(bins=100)\n    plt.ylabel('Average Daily Return')\n    plt.title(f'{company_name[i - 1]}')","747c202e":"df=HBL['Date'].copy()\ndf=pd.DataFrame(df)\ndf['HBL']=HBL['Close']\ndf['UBL']=UBL['Close']\ndf['BOP']=BOP['Close']\ndf['MCB']=MCB['Close']\ndf.drop(['Date'], axis = 1, inplace = True, errors = 'ignore')","929afe30":"tech_rets=df.pct_change()\ntech_rets=pd.DataFrame(tech_rets)\ntech_rets['Date']=HBL['Date']\ntech_rets.shape","7dff3d16":"import scipy.stats as stats\nsns.jointplot('UBL','UBL',tech_rets,kind='scatter',color='seagreen').annotate(stats.pearsonr)\nplt.ioff()","bde01b33":"sns.jointplot('MCB','HBL',tech_rets,kind='scatter',color='seagreen').annotate(stats.pearsonr)\nplt.ioff()","5a2b367c":"sns.pairplot(tech_rets, kind='reg')\n#sns.pairplot(tech_rets.dropna())\n#plt.ioff()","230a6049":"returns_fig=sns.PairGrid(tech_rets.dropna())\nreturns_fig.map_upper(plt.scatter,color='purple')\nreturns_fig.map_lower(sns.kdeplot,cmap='cool_d')\nreturns_fig.map_diag(plt.hist,bins=30)\nplt.ioff()","977bc6db":"returns_fig=sns.PairGrid(df.dropna())\nreturns_fig.map_upper(plt.scatter,color='purple')\nreturns_fig.map_lower(sns.kdeplot,cmap='cool_d')\nreturns_fig.map_diag(plt.hist,bins=30)\nplt.ioff()","55bbd286":"sns.heatmap(tech_rets.corr(),annot=True,cmap='summer',linewidths=1,linecolor='k',square=True,mask=False, vmin=-1, vmax=1,cbar_kws={\"orientation\": \"vertical\"},cbar=True)\nplt.ioff()","4ed9dc7b":"sns.heatmap(df.corr(),annot=True,cmap='summer',linewidths=1,linecolor='k',square=True,mask=False, vmin=-1, vmax=1,cbar_kws={\"orientation\": \"vertical\"},cbar=True)\nplt.ioff()","1617491c":"rets=tech_rets.dropna()","ee629b3b":"area=np.pi*20\n\nplt.figure(figsize=(12, 10))\nplt.scatter(rets.mean(), rets.std(), s=area)\nplt.xlabel('Expected return')\nplt.ylabel('Risk')\n\nfor label, x, y in zip(rets.columns, rets.mean(), rets.std()):\n    plt.annotate(label, xy=(x, y), xytext=(50, 50), textcoords='offset points', ha='right', va='bottom',\n                 bbox = dict(boxstyle = 'round,pad=0.5', fc = 'yellow', alpha = 0.5),\n                 arrowprops=dict(arrowstyle='->', color='blue', connectionstyle='arc3,rad=-0.3'))","646bb824":"plt.figure(figsize=(12, 12))\n\nfor i, company in enumerate(company_list, 1):\n    plt.subplot(2, 2, i)\n    sns.distplot(company['Daily Return'].dropna(), bins=2000, color='purple')\n    plt.ylabel('AVG Daily Return')\n    plt.title(f'{company_name[i - 1]}')\n    \n    \n#sns.distplot(HBL['Daily Return'].dropna(),bins=2000,color='purple')\n#plt.ioff()","1bc24636":"rets.head()","dca2122d":"rets['HBL'].quantile(0.05)","8b6bd423":"#days=365\n#dt=1\/365\n#mu=rets.mean()['GOOG']\n#sigma=rets.std()['GOOG']\n\ndays=365\ndt=1\/365\nmu=rets.mean()['UBL']\nsigma=rets.std()['UBL']","88981494":"def stock_monte_carlo(start_price,days,mu,sigma):\n    price=np.zeros(days)\n    price[0]=start_price\n    shock=np.zeros(days)\n    drift=np.zeros(days)\n    \n    for x in range(1,days):\n        shock[x]=np.random.normal(loc=mu*dt,scale=sigma*np.sqrt(dt))\n        drift[x]=mu*dt\n        price[x]=price[x-1] + (price[x-1]*(drift[x]+shock[x]))\n        \n    return price","9a439795":"UBL.head()","c2cae314":"start_price=568\nfor run in range(100):\n    plt.plot(stock_monte_carlo(start_price,days,mu,sigma))\n\nplt.xlabel('Days')\nplt.ylabel('Price')\nplt.title('Monte Carlo Analysis For UBL')\nplt.ioff()","e30ed767":"runs=10000\n\nsimulations=np.zeros(runs)\n\nfor run in range(runs):\n    simulations[run]=stock_monte_carlo(start_price,days,mu,sigma)[days-1]","26397800":"q=np.percentile(simulations,1)\n\nplt.hist(simulations,bins=200)\n\n\n# Starting Price\nplt.figtext(0.6, 0.8, s=\"Start price: $%.2f\" %start_price)\n# Mean ending price\nplt.figtext(0.6, 0.7, \"Mean final price: $%.2f\" % simulations.mean())\n\n# Variance of the price (within 99% confidence interval)\nplt.figtext(0.6, 0.6, \"VaR(0.99): $%.2f\" % (start_price - q,))\n\n# Display 1% quantile\nplt.figtext(0.15, 0.6, \"q(0.99): $%.2f\" % q)\n\n# Plot a line at the 1% quantile result\nplt.axvline(x=q, linewidth=4, color='r')\n\n# Title\nplt.title(u\"Final price distribution for UBL Stock after %s days\" % days, weight='bold');","25d5a8ff":"HBL.head()","b9ca883b":"df_prophet=HBL[['Date','Close']]\ndf_prophet=df_prophet.sort_values('Date')\ndf_prophet","449a8d7a":"df_prophet=df_prophet.rename(columns={'Date':'ds','Close':'y'})\ndf_prophet","a70e6d10":"import random \nimport seaborn as sns\nfrom fbprophet import Prophet\nm=Prophet()\nm.fit(df_prophet)\nfuture=m.make_future_dataframe(periods=365)\nforecast=m.predict(future)\nforecast","67f7c97f":"figure=m.plot(forecast,xlabel='Date',ylabel='Closing Price')","1275e049":"figure=m.plot_components(forecast)","052861f5":"-0.030 means that 95% of the times the worst daily Loss will not exceed 2.28%","20db9e65":"**Importing the Stock Prices**","8c059937":"## **Value at Risk**","1a2075e4":"**Plotting component of the Forecast**","99eba00c":"### **Daily Returns**","494ab519":"##### Great, now let's get an overall look at the average daily return using a histogram. We'll use seaborn to create both a histogram and kde plot on the same figure.","3bb83f15":"Tock with Low risk and high return are the best stock to buy","d6469732":"**Import Python Modules **","ae3fe599":"**Display Historical Stock Price**","3d219603":"# 1. What was the change in price of the stock overtime?\n\nIn this section we'll go over how to handle requesting stock information with pandas, and how to analyze basic attributes of a stock.","527dfc29":"**Plotting the HBL Stock Forecast for Period of One years**","a823ba38":"**Customized Pair Grid for Close price **","1d59a4e1":"Some companies have Positive Correlations and Some Negtive","6394f9f5":"**Creating the Prophet Model**","3e410809":"**Renaiming the Column names to Suite Prophet Algorithm**","6dbf4b3b":"### **Correlation plot for daily returns**","044c0e7e":"**Volume tradeding for Stock**","bc28e4c5":"We can see that BOP and UBL have good correlation on daily returns","12a24c13":"1.Historical Trend Show that the Price of HBL Bank has been decreasing .Investors can lose money on it\n\n2.Weekly trend shows that the Stock price decrease is lowest on Tuesday then reduces as week proceeds.Please do note that Saturday and Sunday are off for the Stock Exchange.\n\n3.The annual trend shows the seasoniality of the stock.It can be figured out the stock price peaks in month of Mar.","a2307a83":"We can see that p =0.72","4360a446":"# 4. What was the correlation between different stocks closing prices?","7e7a0628":"**Forecasting HBL Stock Price **","86d7b364":"## **Risk Analysis**","c7959573":"### **Plotting between Specified time**","ba73a547":"Here I will be covering how to work with stock prices? We will be considering the stock prices of four companies HBL,UBL,MCB and BOP.We will be be covering various concepts like moving average,correlation,risk analysis etc.\n\n#### This kernel is a work in process.If you like my work please do <font color=\"red\"><b>VOTE<\/b><\/font>.","d73f931d":"Now that we've seen the visualizations for the closing price and the volume traded each day, let's go ahead and caculate the moving average for the stock.","e2bf6d2d":"We will be using the Adjusted close price to do historic price analysis of the stock","36609786":"## **Customised Pair Grid for Daily Return**","d7902db6":"# Time series data Analysis Stock Price\n\n![1_xR4m0oOKz_jRgQU4Oge53g.jpeg](attachment:1_xR4m0oOKz_jRgQU4Oge53g.jpeg)","869eefd9":"# 2. What was the moving average of the various stocks?","82d1ccaa":"Let's go ahead and play aorund with the HBL DataFrame to get a feel for the data","0f7723f4":"**Pair Plot**","0c604d80":"So the model predicts that the HBL Bank stock Price would decrease from Mar 2018 to Mar 2019.","79bd494c":"## **Value at risk using Monte Carlo Method**","3c232414":"## Average Daily return","6d84ca8b":"**Heatmap Daily Return**","e30055b7":"## **Checking if the Stock prices of tech companies are correlated**","af06edfc":"We have stock Price starting from 2008 to 2018 ","296fb6b7":"# 3. What was the daily return of the stock on average?","0f1c45d4":"**Compare MCB & HBL**","c0e26395":"****Closing Price of Stock**","ec61bd6f":"We can see that the data column values have changed to datetime64 type","642202df":"**Heatmap Closing Price**","89da8451":"We can see from out simulation that the start price of the stock is 568 $ and the mean Final Price is very close at  568.63.This means that UBL Bank stock price is quite stable and doesnt fluctuate more. VaR(0.99) = 28.00 means that the maximm risk for insvestment in this stock is  28.00 which is small amount compared to the investement.","0685a953":"### Moving Average for Stocks","04deede5":"# 5. How much value do we put at risk by investing in a particular stock?","c6a538ea":"We have ploted the closing Price by specifying the range of dates xlim","fb567e60":"We just compared the daily percentage change of UBL with itself.So the correlation is 1 as expected"}}