{"cell_type":{"d6623723":"code","ebcc4483":"code","25cad2ff":"code","ef71ef52":"code","4397e1a9":"code","bfb5e4a3":"code","f4c06b17":"code","b9cd2d1d":"code","36a753c8":"code","8767a910":"code","349e1cf8":"markdown","6a292752":"markdown","3aabb5a3":"markdown","6b14a320":"markdown","27003914":"markdown","8040c144":"markdown","c28c408b":"markdown"},"source":{"d6623723":"import os\nimport numpy as np\nimport pandas as pd\nimport statistics as sta\nfrom scipy import stats\nimport matplotlib.pyplot as plt\nimport statsmodels.api as sm\nimport seaborn as sns\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\ndata = pd.read_csv(\"\/kaggle\/input\/lazada-product-data\/LazadaProductData.csv\")","ebcc4483":"price = data[\"p_price\"]\nnew_price = []\nfor item in price:\n    item = str(item)\n    if \".\" in item:\n        item = item.replace(\".\",\"\") # Remove the dot in the price\n    if item[-1]==\"\u20ab\":   # Remove the character '\u20ab' in the price\n        item = item.replace(\"\u20ab\",\"\")\n    item = item.strip()     # Remove the space before and after the price\n    new_price.append(int(item))   # Convert the price to integer data type\ndata[\"p_price\"] = new_price","25cad2ff":"def stat_table(a,title_plt=\"\"):\n    x = data.groupby(a)[a].count()\n    dt = pd.DataFrame(x)\n    dt.columns = ['quantity']\n    count = []\n    for i in dt['quantity']:\n        x = i\n        count.append(round(x))\n    dt['quantity'] = count\n    print(dt)\n    mylabels = dt.index\n    plt.figure(figsize = (10, 4))\n    # Barplot\n    plt.title(title_plt, fontsize = 20, color = 'red')\n    sns.barplot(count, mylabels, data = dt, orient = 'h')","ef71ef52":"# Filter and divide product price ranges\nprice_cate = data[\"p_price\"]\n# Classification and statistics of the value of products\nlist_cate = [\"Products priced from 0 to less than 10k\",\"Products priced from 10k to less than 100k\",\"Products priced from 100k to less than 1m\",\"Products priced from 1m to less than 10m\",\"Products priced over 10m\"]\ncount_list_cate = [0, 0, 0, 0, 0]\ncount_price_cate = []\nfor item in price_cate:\n    if item<10000:\n        count_list_cate[0] = count_list_cate[0] +1\n    elif item<100000:\n        count_list_cate[1] = count_list_cate[1] +1\n    elif item<1000000:\n        count_list_cate[2] = count_list_cate[2] +1\n    elif item<10000000:\n        count_list_cate[3] = count_list_cate[3] +1\n    else:\n        count_list_cate[4] = count_list_cate[4] +1\n# Calculate percent\nfor item in count_list_cate:\n    count_price_cate.append(round(item))\n    \ndef barplot_khoang_gia_tien_san_pham(count, list_cate):\n    price_df = pd.Series(count, index=list_cate) # Create a dataframe with 2 columns of category names and percentages of amounts\n    print(price_df)\n    mylabels = price_df.index\n    plt.figure(figsize = (10, 4))\n    plt.title('Price ranges of products', fontsize = 20, color = 'red')\n    sns.barplot(price_df, mylabels, orient = 'h')","4397e1a9":"def barplot_cac_thuong_hieu_san_pham(column,title=\"\"):\n    data_check = data[column]\n    brand_list_check = []           # List contains unprocessed brand names\n    quantity_list_check = []        # The list contains the number of each unprocessed brand\n\n    for item in data_check:                                                 #####\n        if item not in brand_list_check:                                        #\n            brand_list_check.append(item)                                       #   \n            quantity_list_check.append(1)                                       #\n        else:                                                                   #\n            index = brand_list_check.index(item)                                #\n            quantity_list_check[index] = quantity_list_check[index]+1       #####\n\n    quantity = []       # The list contains the names of the processed brands\n    brand = []          # The list contains the quantity of each processed brand\n\n    for item in range(len(quantity_list_check)):                                                                \n        count = quantity_list_check[item]\n        name_brand = brand_list_check[item]\n        if count<15:                                    # Brands with less than 15 products     \n            name_brand = \"Small Brand\"                  #  are considered minor brands             \n\n        if name_brand not in brand:                         #####\n            brand.append(name_brand)                            #   \n            quantity.append(count)                              #   Count the number of products\n        else:                                                   #    of all brands\n            index = brand.index(name_brand)                     #\n            quantity[index] = quantity[index] + count       #####\n\n    brand_df = pd.Series(quantity, index=brand) # Create dataframe with 2 columns as brand name and product quantity\n    brand_df = brand_df.sort_values()       # Rearrange the dataframe in ascending order based on product count\n    print(brand_df)\n    mylabels = brand_df.index\n    plt.figure(figsize = (10, 4))\n    plt.title(title, fontsize = 20, color = 'red')\n    sns.barplot(brand_df, mylabels, orient = 'h')","bfb5e4a3":"print(f\"The data collected from Lazada has {len(price_cate)} products\")\nprint(f\"Each product has {len(data.columns)} columns containing data\")\ndata.head(5)\n","f4c06b17":"stat_table(\"p_cate\", \"Catalog of products\")","b9cd2d1d":"barplot_khoang_gia_tien_san_pham(count_price_cate, list_cate)","36a753c8":"stat_table(\"p_mall\",\"Genuine and non-genuine products\")","8767a910":"total_brand = data[\"p_brand\"]\nprint(f\"Total Brands: {len(total_brand)}\")\nbarplot_cac_thuong_hieu_san_pham('p_brand',\"Brands of products\")","349e1cf8":"**Function to draw product price range**\n\nRetrieved from stat_table and adjusted again","6a292752":"**Function to draw statistics of product brands**\n\nRetrieved from stat_table and adjusted again","3aabb5a3":"# **Data processing**","6b14a320":"**Overview of csv files**","27003914":"**Function to create statistics table and draw Barplot**\n\nFor normal data columns and no further editing is required","8040c144":"# **Statistical results**","c28c408b":"**Process and convert product prices into real numbers**"}}