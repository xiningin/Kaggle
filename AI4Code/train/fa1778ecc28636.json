{"cell_type":{"6c7b6003":"code","efd804a0":"code","6ad9e257":"code","d46cf008":"code","61485567":"code","9af859ee":"code","65026dce":"code","4f8e09bb":"code","ac75ab32":"code","3fc74245":"code","14198878":"code","7b7ffd7f":"code","56174632":"code","ce8d9f90":"code","1d0baa0e":"code","21a5a2c8":"code","2e34a37b":"code","d0772c1a":"code","80b2f75b":"code","ecba6db2":"code","1aa82313":"code","9f63a4f2":"markdown","afa99996":"markdown","0f73e63f":"markdown","f05de2f0":"markdown","9c606bdd":"markdown","5ab61408":"markdown"},"source":{"6c7b6003":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport keras\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","efd804a0":"print(keras.__version__)","6ad9e257":"dataset_train = pd.read_csv(\"\/kaggle\/input\/sentiment-analysis-on-movie-reviews\/train.tsv.zip\", sep=\"\\t\", quoting=3)\ndataset_test = pd.read_csv(\"\/kaggle\/input\/sentiment-analysis-on-movie-reviews\/test.tsv.zip\", sep=\"\\t\", quoting=3)","d46cf008":"dataset_train","61485567":"dataset_test","9af859ee":"dataset_train['Phrase'][0]","65026dce":"import nltk, re\nnltk.download(\"stopwords\")\nfrom nltk.corpus import stopwords\nfrom nltk.stem.porter import PorterStemmer","4f8e09bb":"def get_corpus(dataset):\n    corpus = []\n\n    for i in range(0, dataset.shape[0]):\n        review = dataset['Phrase'][i]\n        review = re.sub('[^A-Za-z]', ' ', review)\n        review = review.lower()\n        review = review.split()\n        ps = PorterStemmer()\n        all_stopwords = stopwords.words(\"english\")\n        all_stopwords.remove(\"no\")\n        all_stopwords.remove(\"not\")\n        all_stopwords.remove(\"nor\")\n    \n        review = [ps.stem(word) for word in review if not word in set(all_stopwords)]\n    \n        review = ' '.join(review)\n    \n        corpus.append(review)\n        \n    return corpus","ac75ab32":"corpus_train = get_corpus(dataset_train)\ncorpus_test = get_corpus(dataset_test)","3fc74245":"def get_wordlist(corpus1, corpus2):\n    words = []\n    for phrase in corpus1:\n        for word in phrase.split():\n            words.append(word)\n            \n    for phrase in corpus2:\n        for word in phrase.split():\n            words.append(word)\n            \n    words.sort()\n    return set(words)","14198878":"word_set = get_wordlist(corpus_train, corpus_test)","7b7ffd7f":"def get_dicts(word_set):\n    word_to_index = {}\n    word_to_index['<PAD>'] = 0\n    word_to_index['<UNK>'] = 1\n    for i, word in enumerate(word_set):\n        word_to_index[word] = i  + 2\n        \n    index_to_word = {index:word for (word, index) in word_to_index.items()}\n    \n    return word_to_index, index_to_word","56174632":"word_to_index, index_to_word = get_dicts(word_set)","ce8d9f90":"word_to_index","1d0baa0e":"def tokenize(corpus, word_to_index):\n    tokenized_list = []\n    \n    for phrase in corpus:\n        tokenized_format = []\n        for word in phrase.split():\n            index = word_to_index[word]\n            tokenized_format.append(index)\n            \n        tokenized_list.append(tokenized_format)\n        \n    return np.array(tokenized_list, dtype='object')","21a5a2c8":"X_train = tokenize(corpus_train, word_to_index)\nX_test = tokenize(corpus_test, word_to_index)\nmaxlen = 30\nX_train_padded = keras.preprocessing.sequence.pad_sequences(X_train, maxlen=maxlen, padding='post')\nX_test_padded = keras.preprocessing.sequence.pad_sequences(X_test, maxlen=maxlen, padding='post')\ny_train = dataset_train.iloc[:,-1].values\n## One Hot Encode y_train and y_test\nfrom sklearn.preprocessing import OneHotEncoder\nohe = OneHotEncoder(sparse=False)\ny_train_ohe = ohe.fit_transform(y_train.reshape(-1, 1))\nprint(\"X_train_padded shape: \", X_train_padded.shape)\nprint(\"y_train_ohe shape: \", y_train_ohe.shape)\nprint(\"X_test_padded shape: \", X_test_padded.shape)","2e34a37b":"## Make an embedding layer \ndef get_embedding_layer(word_to_index):\n    vocab_size = len(word_to_index) + 1\n    emb_dim = 30\n    \n    emb_layer = keras.layers.Embedding(input_dim= vocab_size, output_dim=emb_dim, trainable=True)\n    emb_layer.build((None, ))\n    return emb_layer \n\n## Build RNN\nrnn = keras.models.Sequential()\nrnn.add(get_embedding_layer(word_to_index))\nrnn.add(keras.layers.LSTM(units=128, return_sequences=True))\nrnn.add(keras.layers.Dropout(rate=0.5))\nrnn.add(keras.layers.LSTM(units=128))\nrnn.add(keras.layers.Dropout(rate=0.5))\nrnn.add(keras.layers.Dense(units=120, activation='relu'))\nrnn.add(keras.layers.Dense(units=5, activation='softmax'))","d0772c1a":"rnn.summary()","80b2f75b":"rnn.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])","ecba6db2":"rnn.fit(X_train_padded, y_train_ohe, batch_size=256, epochs=10)","1aa82313":"y_pred_ohe = rnn.predict(X_test_padded)\ny_pred = ohe.inverse_transform(y_pred_ohe >= 0.5)\nsubmission_data = pd.DataFrame({'PhraseId': dataset_test.iloc[:,0].values, 'Sentiment': y_pred.reshape(1,-1)[0]})\nsubmission_data.set_index('PhraseId', inplace=True)\nsubmission_data.to_csv('submission.csv')","9f63a4f2":"## Building the RNN Model with Embedding layer","afa99996":"## create word to index dictionary with all words in test and training set","0f73e63f":"## Importing Dataset","f05de2f0":"## Training and predicting and saving result","9c606bdd":"## Tokenize and pad the corpuses","5ab61408":"## Cleaning text\n"}}