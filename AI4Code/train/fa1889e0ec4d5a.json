{"cell_type":{"0996b6ac":"code","e8b78206":"code","593239a2":"code","5e7c4f8e":"code","5465be09":"code","a73aeba1":"code","dcc6ead2":"code","ea020cd9":"code","fcc28e5d":"code","08d3f77d":"code","d27fd658":"code","03e3d937":"code","c9125ba9":"code","818ea3b1":"code","abf182e0":"code","adb92b8b":"code","ea0b0f5d":"code","bde1ce16":"code","6fe82c64":"code","a36513f7":"code","3862bb46":"code","2b00b63b":"code","63908b3d":"code","f529f1b4":"code","8a2a5797":"code","13b8211a":"code","1498a70f":"code","ebf2be35":"code","abe10d05":"code","082f2e0d":"markdown","b0ed398c":"markdown","f09f2bd3":"markdown","bb390597":"markdown","97dbbb95":"markdown","510b4c12":"markdown","191a2b8f":"markdown"},"source":{"0996b6ac":"import numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import confusion_matrix , classification_report\nfrom sklearn.svm import SVC\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import recall_score, accuracy_score\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout\nimport keras.initializers as init\nimport matplotlib.pyplot as plt\nimport seaborn as sns","e8b78206":"df = pd.read_csv('..\/input\/WA_Fn-UseC_-Telco-Customer-Churn.csv')","593239a2":"df.head()","5e7c4f8e":"df.info()","5465be09":"# numeric\uc778\ub370 object(categorical)\ub85c \ub418\uc5b4\uc788\ub294 \uac83 numeric\uc73c\ub85c \ubc14\uafd4\uc90c\ndf['TotalCharges_new']=pd.to_numeric(df.TotalCharges, errors='coerce_numeric')\n\n# NA\uac00 \uc0dd\uacbc\ub294\uc9c0 \ud655\uc778\ndf.loc[pd.isna(df.TotalCharges_new),'TotalCharges']","a73aeba1":"# \uc704\uc758 11\uac1c NA\uac12\uc744 \uc6d0\ub798 \uac12\uc73c\ub85c \ucc44\uc6cc\uc90c\nTotalCharges_Missing=[488,753,936,1082,1340,3331,3826,4380,5218,6670,6754]\ndf.loc[pd.isnull(df.TotalCharges_new),'TotalCharges_new']=TotalCharges_Missing","dcc6ead2":"# \ubcc0\uc218 \ubc14\uafd4\uc8fc\uace0 customerID\ub294 \ube8c\ndf.TotalCharges=df.TotalCharges_new\ndf.drop(['customerID','TotalCharges_new'],axis=1,inplace=True)","ea020cd9":"# cateogirlcal \ubcc0\uc218\ub4e4\uc758 level \ud655\uc778\ndf.dtypes=='object'\ncategorical_var=[i for i in df.columns if df[i].dtypes=='object']\nfor z in categorical_var:\n    print(df[z].name,':',df[z].unique())","fcc28e5d":"# \uc704\uc5d0\uc11c \"No internet service\"\uac19\uc740 \uac83\uc740 \"No\"\ub85c \ubc14\uafd4\uc90c\nDual_features= ['OnlineSecurity','OnlineBackup','DeviceProtection','TechSupport','StreamingTV','StreamingMovies']\nfor i in Dual_features:\n    df[i]=df[i].apply(lambda x: 'No' if x=='No internet service' else x)\ndf.MultipleLines=df.MultipleLines.apply(lambda x: 'No' if x=='No phone service' else x)","08d3f77d":"# \ud655\uc778\nfor z in [i for i in df.columns if df[i].dtypes=='object']:\n    print(df[z].name,':',df[z].unique())","d27fd658":"df.SeniorCitizen= df.SeniorCitizen.apply(lambda x : 'No' if x == 0 else 'Yes')\n# \uc2dc\uac01\ud654\ub97c \uc704\ud574 \ubc14\uafd4\uc90c\n\ncontinues_var=[i for i in df.columns if df[i].dtypes !='object']\nfig , ax = plt.subplots(1,3,figsize=(15,5))\nfor i , x in enumerate(continues_var):\n    ax[i].hist(df[x][df.Churn=='No'],label='Churn=0',bins=30)\n    ax[i].hist(df[x][df.Churn=='Yes'],label='Churn=1',bins=30)\n    ax[i].set(xlabel=x,ylabel='count')\n    ax[i].legend()","03e3d937":"categorical_var_NoChurn=categorical_var[:-1]\n#Count Plot all Categorical Variables with Hue Churn\nfig , ax = plt.subplots(4,4,figsize=(20,20))\nfor axi , var in zip(ax.flat,categorical_var_NoChurn):\n    sns.countplot(x=df.Churn,hue=df[var],ax=axi)","c9125ba9":"# 2-class cateogorical \ubcc0\uc218 -> sklearn \ud328\ud0a4\uc9c0\uc758 \ud568\uc218\ub85c dummy \ubcc0\uc218(0,1)\ub85c \ubc14\uafd4\uc90c\nlabel_encoder = LabelEncoder()\nfor x in [i for i in df.columns if len(df[i].unique())==2]:\n    df[x]= label_encoder.fit_transform(df[x])\n    \n# 3\uac1c\uc774\uc0c1 class\uc758 cateogorical \ubcc0\uc218 -> pandas \uc774\uc6a9\ud574\uc11c dummy \ubcc0\uc218\ub85c \ubc14\uafd4\uc90c \ndf = pd.get_dummies(df, columns= [i for i in df.columns if df[i].dtypes=='object'],drop_first=True)\n\n# \ud655\uc778\n[[x, df[x].unique()] for x in [i for i in df.columns if len(df[i].unique())<10]]","818ea3b1":"X = df[['TotalCharges', 'InternetService_Fiber optic', 'Contract_One year', 'Contract_Two year',\n        'PaperlessBilling', 'TechSupport', 'OnlineSecurity', 'PhoneService', 'InternetService_No', 'tenure']]\n ### SVM\uc73c\ub85c classification\ud588\uc744 \ub54c \ubcc0\uc218 \uc911\uc694\ub3c4\uac00 \ub192\uc740 10\uac1c\uc758 \ubcc0\uc218\ub9cc \uc120\ud0dd\ny = df['Churn']                # target \ubcc0\uc218 y\n\n# train, text \ub098\ub204\uae30\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)","abf182e0":"# Scale \uc870\uc815!!!\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)                 # fit_transform: fit(\u03bc and \u03c3 \uacc4\uc0b0) + transform\nX_train = pd.DataFrame(X_train, columns=X.columns)\nX_test = sc.fit_transform(X_test)                   # X_train\uc5d0\uc11c fit\ud55c \uac78\ub85c transform\n\nX_train.head()","adb92b8b":"### Tuning\n# hidden layer \uc218: 3\n# node \uc218: (24, 12, 8)\n# optimizer: Adam\n# epoch \uc218: 100","ea0b0f5d":"model = Sequential()   #Initiate DNN Classifier\nX_train.shape","bde1ce16":"n_hidden1, n_hidden2, n_hidden3 = 24, 12, 8","6fe82c64":"# Hidden Layer1 (He \ucd08\uae30\uac12)\nmodel.add(Dense(n_hidden1, activation='relu', kernel_initializer=init.he_normal(), input_dim=10))\nDropout(0.5)\n# Hidden Layer2 (He \ucd08\uae30\uac12)\nmodel.add(Dense(n_hidden2, activation='relu', kernel_initializer=init.he_normal()))\nDropout(0.5)\n# Hidden Layer3 (He \ucd08\uae30\uac12)\nmodel.add(Dense(n_hidden3, activation='relu', kernel_initializer=init.he_normal()))\nDropout(0.5)\n# output Layer (Xaiver \ucd08\uae30\uac12)\nmodel.add(Dense(1, activation='sigmoid', kernel_initializer=init.glorot_normal()))\nDropout(0.5)\n# compiling\nmodel.compile(optimizer='adam',loss='binary_crossentropy', metrics=['accuracy'])","a36513f7":"model.summary()","3862bb46":"model.fit(X_train, y_train, batch_size=100, epochs=100, validation_data=(X_test, y_test))","2b00b63b":"# test data\ub85c \uc608\uce21\ny_pred_prob = model.predict(X_test)\ny_pred_prob.shape","63908b3d":"y_pred = (y_pred_prob > 0.3).astype('int')   # \ud655\ub960\ub85c \uc608\uce21\ub41c \uac12\uc744 0, 1\ub85c \ubc14\uafd4\uc90c","f529f1b4":"print(classification_report(y_test,y_pred))","8a2a5797":"# Confusion Matrix\nmat_ann = confusion_matrix(y_test, y_pred)\nsns.heatmap(mat_ann.T, square=True, annot=True, fmt='d', cbar=False,\n          xticklabels=['No','Yes'],\n          yticklabels=['No','Yes'] )\nplt.xlabel('true label')\nplt.ylabel('predicted label')","13b8211a":"svm_classifier= SVC(probability=True)\nsvm_classifier.fit(X_train,y_train)\nsvm_prob = svm_classifier.predict_proba(X_test)[:,1]","1498a70f":"y_pred_svm[np.where(svm_prob>=0.3)]=1\ny_pred_svm[np.where(svm_prob<0.3)]=0\n#Classification Report\nprint(classification_report(y_test,y_pred_svm))","ebf2be35":"logreg = LogisticRegression()\nlogreg.fit(X_train, y_train)\nlogis_prob = logreg.predict_proba(X_test)[:,1]\ny_pred_logis = np.zeros_like(y_test)","abe10d05":"y_pred_logis[np.where(logis_prob>=0.3)]=1\ny_pred_logis[np.where(logis_prob<0.3)]=0\n#Classification Report\nprint(classification_report(y_test,y_pred_logis))","082f2e0d":"## SVM","b0ed398c":"## Logistic Regression","f09f2bd3":"## Prediction","bb390597":"## EDA","97dbbb95":"## DNN Modeling\n","510b4c12":"### Data Pre-processing","191a2b8f":"### Encoding"}}