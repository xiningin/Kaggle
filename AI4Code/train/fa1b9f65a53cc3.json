{"cell_type":{"750d96c1":"code","104cb059":"code","edc2806e":"code","41125c22":"code","f23b7360":"code","c4bf31b5":"code","c770c844":"code","3c6e5595":"code","3cefb4ba":"code","0ec3cbb4":"code","7ad1dff8":"code","f13ec12d":"code","2c29fd24":"code","e20fe839":"code","d25156c4":"code","8be335c4":"code","887e1fed":"code","ad5ddfab":"code","68f0afd1":"code","910edf22":"code","cee8fa7c":"code","cecb40e1":"code","dc0f7592":"code","8ebd5880":"code","32990a67":"code","491c3e21":"code","b7e7f19f":"code","ee0d13e4":"markdown","c4f34f73":"markdown","a3392189":"markdown","f4db4099":"markdown","44d9b5bc":"markdown","7cbe0f65":"markdown","2465180c":"markdown","c39cef4f":"markdown","c6fb7137":"markdown","8ca6676b":"markdown","34ff70c1":"markdown","b8f9cf22":"markdown","437b4220":"markdown","bf41fb80":"markdown","e21a8e94":"markdown","3e99fdb7":"markdown","ed0108a1":"markdown","34645269":"markdown","1af9e989":"markdown","49baa1e5":"markdown","fe9e1f7d":"markdown","8fde08b9":"markdown","ce31ef91":"markdown","9ecb1fa3":"markdown","fa1c851c":"markdown","52b95de1":"markdown","97ff9fd2":"markdown","2947de2d":"markdown"},"source":{"750d96c1":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns  # Provides a high level interface for drawing attractive and informative statistical graphics\n%matplotlib inline\nsns.set()\nfrom subprocess import check_output\n\nimport warnings                                            # Ignore warning related to pandas_profiling\nwarnings.filterwarnings('ignore') \n\n\ndef annot_plot(ax,w,h):                                    # function to add data to plot\n    ax.spines['top'].set_visible(False)\n    ax.spines['right'].set_visible(False)\n    for p in ax.patches:\n        ax.annotate('{0:.1f}'.format(p.get_height()), (p.get_x()+w, p.get_height()+h))\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))","104cb059":"df = pd.read_csv(\"..\/input\/matches\/matches.csv\")","edc2806e":"df.head() #cheking the head of the table to get an insight of the data","41125c22":"df.isnull().sum()   #checking the number of missing values present in the dataset","f23b7360":"df.drop(['umpire3'], axis = 1, inplace = True)","c4bf31b5":"df.columns","c770c844":"print(df['winner'].unique())\nprint(df['city'].unique())","3c6e5595":"df.replace('Rising Pune Supergiant','Rising Pune Supergiants', inplace = True)\ndf.replace('Bangalore','Bengaluru', inplace = True)\ndf.replace('East London','Dubai', inplace = True)\n","3cefb4ba":"df['city'].fillna(df['venue'], inplace = True)\ndf['winner'].fillna(df['toss_winner'], inplace = True)\ndf['player_of_match'].fillna(df['result'], inplace = True)\ndf['umpire1'].fillna('unknown', inplace = True)\ndf['umpire2'].fillna('unknown', inplace = True)","0ec3cbb4":"plt.figure(figsize=(12,7))\nax = sns.countplot(\"season\", data = df, palette='viridis')\nplt.title('Total number of matches b\/w 2008-2018')\nplt.ylabel('Number of Matches.')\nannot_plot(ax,0.1,1)\nplt.show()","7ad1dff8":"plt.figure(figsize=(12,7))\nax = sns.countplot(\"winner\", data = df, order = df['winner'].value_counts().index,palette='viridis')\nplt.title(\"Total number of wins by each team b\/w 2008-2018\")\nplt.xticks(rotation=45, ha = 'right')\nplt.ylabel('Number of matches')\nannot_plot(ax,0.08,1)\nplt.show()","f13ec12d":"max_times_winner = df.groupby('season')['winner'].value_counts()\n#converting it to dataframe\nwinner_season = pd.DataFrame(max_times_winner)\nwinner_season.columns = [' ']\nwinner_season.head(10)","2c29fd24":"total_num_of_matches = df.groupby('season')['id'].count()\ngroups = max_times_winner.groupby('season')\nfig = plt.figure()\ncount = 1\n\nfor year, group in groups:\n    ax = fig.add_subplot(4,3,count)\n    ax.set_title(year)\n    ax = group[year].plot.bar(figsize = (10,15), width = 0.8)\n    \n    count+=1;\n    \n    plt.xlabel('')\n    plt.yticks([])\n    plt.ylabel('Matches Won')\n    \n    total_of_matches = []\n    for i in ax.patches:\n        total_of_matches.append(i.get_height())\n    total = sum(total_of_matches)\n    for i in ax.patches:\n        ax.text(i.get_x()+0.2, i.get_height()-1.5,s= i.get_height(),color=\"black\",fontweight='bold')\nplt.tight_layout()\nplt.show()","e20fe839":"plt.figure(figsize = (20,12))\nax = sns.catplot('winner', col='season',aspect=1, data = df, col_wrap = 2, kind = 'count',legend=True ,order = df['winner'].value_counts().index,palette='viridis')\nax.set_xticklabels(rotation=90, ha = 'right')\nax.set( ylabel = 'Number of matches')\nplt.ylabel('Number of Matches')\nplt.show()","d25156c4":"plt.figure(figsize=(12,7))\nax = sns.countplot(\"winner\", data = df, hue = 'toss_decision',order = df['winner'].value_counts().index,palette='viridis')\nplt.title(\"Total number of wins for every team between 2008-2019\")\nplt.xticks(rotation=45, ha = 'right')\nplt.ylabel('Number of Matches')\nannot_plot(ax,0.08,1)\nplt.show()","8be335c4":"plt.figure(figsize=(12,6))\n\nax = sns.countplot(\"player_of_match\", data = df,order = df['player_of_match'].value_counts()[:20].index,palette='viridis')\nplt.title(\"Total number of Player of the match. \")\nplt.xticks(rotation=60, ha = 'right')\nplt.ylabel('Number of Player of the match')\nplt.xlabel('Name of the top 20 Player of the match.')\nannot_plot(ax,0.08,1)\nplt.show()","887e1fed":"matches_won = df.groupby('winner').count()\ntotal_matches = df['team1'].value_counts()+ df['team2'].value_counts()\n\nmatches_won['Total matches'] = total_matches\nwin_df = matches_won[[\"Total matches\",\"result\"]]\nwin_df.head(14)","ad5ddfab":"ax = win_df[['Total matches','result']].sort_values('Total matches',ascending=False).plot.bar(figsize=(20,12))\nplt.ylabel('Total number of matches played')\nplt.xticks(rotation=60, ha = 'right')\nannot_plot(ax,0.08,1)","68f0afd1":"success_ratio = round((matches_won['id']\/total_matches),4)*100\nsuccess_ratio_sort = success_ratio.sort_values(ascending = False)\nplt.figure(figsize = (10,7))\nax = sns.barplot(x = success_ratio_sort.index, y = success_ratio_sort, palette='viridis' )\nannot_plot(ax,0.08,1)\nplt.xticks(rotation=45, ha = 'right')\nplt.ylabel('Success rate of wining')\nplt.show()","910edf22":"each_season_winner = df.groupby('season')['season','winner'].tail(1)\neach_season_winner_sort = each_season_winner.sort_values('season',ascending = True)\neach_season_winner_sort","cee8fa7c":"sns.countplot('winner', data = each_season_winner_sort)\nplt.xticks(rotation = 45, ha = 'right')\nplt.ylabel('Number of seasons won by any team.')\nplt.show()","cecb40e1":"plt.figure(figsize = (20,12))\nvenue = df[['city','winner','season']]\nvenue_season = venue[venue['season'] == 2018]\nax = sns.countplot('city', data = venue_season, hue = 'winner' )\nplt.xticks(rotation=30, ha = 'right')\nplt.ylabel('Number of matches.')\nplt.show()","dc0f7592":"df['winner'].unique()","8ebd5880":"df.replace('Sunrisers Hyderabad','SRH',inplace = True)\ndf.replace('Rising Pune Supergiants','RPS',inplace = True)\ndf.replace('Kolkata Knight Riders','KKR',inplace = True)\ndf.replace('Mumbai Indians','MI',inplace = True)\ndf.replace('Delhi Daredevils','DD',inplace = True)\ndf.replace('Gujarat Lions','GL',inplace = True)\ndf.replace('Chennai Super Kings','CSK',inplace = True)\ndf.replace('Rajasthan Royals','RR',inplace = True)\ndf.replace('Deccan Chargers','DC',inplace = True)\ndf.replace('Pune Warriors','PW',inplace = True)\ndf.replace('Kochi Tuskers Kerala','KTK',inplace = True)\ndf.replace('no result','Draw',inplace = True)\ndf.replace('Royal Challengers Bangalore','RCB',inplace = True)\ndf.replace('Kings XI Punjab','KXIP',inplace = True)","32990a67":"city_winner = df.groupby('city')['winner'].value_counts()\n\ncount=1\nfig = plt.figure()\n\ngroups=city_winner.groupby('city')\nfor city,group in groups:\n    ax = fig.add_subplot(8,4,count)\n    ax.set_title(city)\n    ax=group[city].plot(kind=\"bar\",figsize=(13,20),width=0.8)\n    \n    count=count+1\n    \n    plt.xlabel('')\n    plt.yticks([])\n    plt.ylabel('Matches Won')\n    \n    totals = []\n    for i in ax.patches:\n        totals.append(i.get_height())\n        #print(i.get_height())\n    total = sum(totals)\n    \n    for i in ax.patches:\n    # get_x pulls left or right; get_height pushes up or down\n        ax.text(i.get_x()+0.2, i.get_height()-0.9,s= i.get_height(),color=\"black\",fontweight='bold')\n    \n    \nplt.tight_layout()\nplt.show()","491c3e21":"df.replace('Dubai International Cricket Stadium','Dubai ICS', inplace = True)","b7e7f19f":"winner_city = df.groupby('winner')['city'].value_counts()\n\ncount=1\nfig = plt.figure()\n\ngroups=winner_city.groupby('winner')\nfor winner,group in groups:\n    ax = fig.add_subplot(8,4,count)\n    ax.set_title(winner)\n    ax=group[winner].plot(kind=\"bar\",figsize=(13,20),width=0.8)\n    \n    count+=1\n    \n    plt.xlabel('')\n    plt.yticks([])\n    plt.ylabel('Matches Won')\n    \n    totals = []\n    for i in ax.patches:\n        totals.append(i.get_height())\n        #print(i.get_height())\n    total = sum(totals)\n    \n    for i in ax.patches:\n    # get_x pulls left or right; get_height pushes up or down\n        ax.text(i.get_x()+0.2, i.get_height()-0.9,s= i.get_height(),color=\"black\",fontweight='bold')\n    \n    \nplt.tight_layout()\nplt.show()","ee0d13e4":"**Importing Necessary Libarires**","c4f34f73":"**Checking the number of Null values which we have in our dataset.**","a3392189":"**Total number of matches played between 2008-2018.**","f4db4099":"**Checking the columns we have in the dataset.**","44d9b5bc":"> **Number of titles won by teams.**","7cbe0f65":"**Checking the unique winners and the city in which the matches have been played.**","2465180c":"**Lets now see the effect of the home ground. Whether it plays a part or not.**","c39cef4f":"**Unique winners till date.**","c6fb7137":"**Plotting the success rate of teams.**","8ca6676b":"**Replacing team names to their abbreviations.**","34ff70c1":"**Total number of wins for every team between 2008-2019.**","b8f9cf22":"**Another way of doing the same thing which was done previously.**","437b4220":"**Replacing some of the values and updating the dataset.**","bf41fb80":"**Working with Null values that is filling the null values with respective information.**","e21a8e94":"**Creating dataframe to store the values of number of matches played and the result of it.**","3e99fdb7":"**Total number of won by each team between 2008-2018.**","ed0108a1":"**Creating a dataframe which stores the count of matches won by each team in different seasons.**","34645269":"**Visualizing teams winning including home and away ground.**","1af9e989":"**Creating a dataframe to store the teams who won title each seasons.**","49baa1e5":"**Getting the brief idea of how our dataset is by using head command.**","fe9e1f7d":"**Players who have won player of the match.**","8fde08b9":"**From the above graph it seems that teams enjoy to play at their home turf.Teams enjoy success too as compared to playing away from home.**","ce31ef91":"**Reading the data from CSV file and storing it in variable.**","9ecb1fa3":"**Data cleaning: We will remove umpire 3 column as it has many null values and it wont play a major part in our model to predict the winner. Hence, deleting the column.**","fa1c851c":"**Replacing the value to update in the dataset.**","52b95de1":"**Viusalizing number of matches won by the team.**","97ff9fd2":"**Plotting the success ratio of teams.**","2947de2d":"**Plotting the number of matches played at specific venues and the teams who have won there.**"}}