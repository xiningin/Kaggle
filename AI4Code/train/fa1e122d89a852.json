{"cell_type":{"6ead37e2":"code","33acd976":"code","f2835bc3":"code","8ba0fb48":"code","727d89e5":"code","df4b0c12":"code","45667595":"code","9f8cf87a":"code","5deddeb9":"code","832c7493":"code","2119bbb1":"code","59e13980":"code","be7f1665":"code","c92a9361":"code","8fe8f098":"code","7ca3f295":"code","e4c4c499":"code","2536a543":"code","b37e7dc5":"code","9a692275":"code","1af70946":"code","2322d8d9":"code","80dc1f53":"code","c249ce7e":"code","8ec73f6b":"code","dfc62b87":"code","cb4a3450":"code","f2833524":"code","86213296":"code","181dcc55":"code","a0cc327f":"code","889a77a2":"code","32d5f6a9":"code","8a96cfe6":"code","9d75f955":"code","75877b12":"code","b89f1c48":"code","227a4bf1":"code","6ff1e363":"code","42638eb6":"code","27c00c33":"code","e4f9fc0f":"code","edebacdd":"code","be95edeb":"code","55851a54":"code","e42734de":"code","3d7c0836":"code","a2e44d7f":"code","8c0ba01f":"code","717c4d00":"code","96bd791a":"code","9a9206d5":"markdown","38a3ad41":"markdown","9a6fad24":"markdown","f8be844d":"markdown","6d268bba":"markdown","2f50706e":"markdown","ce6b618d":"markdown","19a04a26":"markdown","9d0580de":"markdown","4571e65e":"markdown","d4645f56":"markdown","2b7abefa":"markdown","80a2d3e3":"markdown","68bbb143":"markdown","8933da0a":"markdown","df66a438":"markdown","a4c1f13c":"markdown","3a3c35c9":"markdown","b0b4b50c":"markdown","23dba75e":"markdown","cc5c9434":"markdown","9cca3a3c":"markdown","de00299e":"markdown","a38972eb":"markdown","24f03b23":"markdown","0254f7cb":"markdown","9b68c6b6":"markdown","de3fda8e":"markdown","4f6a05be":"markdown","e3f874a4":"markdown","6f087298":"markdown","d743d255":"markdown","527a72ab":"markdown","6d8f2786":"markdown","f39ad29a":"markdown","65fa5a4c":"markdown","3778f38c":"markdown","4e57cf8c":"markdown","8e781e50":"markdown","4936fc7f":"markdown","51ebf15f":"markdown","2efb695b":"markdown","f9cb81d3":"markdown","e8e6ab20":"markdown"},"source":{"6ead37e2":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import plot_confusion_matrix\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import MinMaxScaler\nfrom xgboost import XGBClassifier\nfrom catboost import CatBoostClassifier\nimport plotly.express as px","33acd976":"df = pd.read_csv('..\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv')\ndf.head()","f2835bc3":"df.info()","8ba0fb48":"df.rename(columns={'creatinine_phosphokinase' : 'cpk' ,'DEATH_EVENT':'death_event'}  , inplace=True)\ndf.head()","727d89e5":"for i in df.columns:\n  print(i,df[i].nunique())","df4b0c12":"ds = df['anaemia'].value_counts().reset_index()\nds.columns = ['anaemia', 'count']\nfig = px.bar(ds, x='anaemia', y=\"count\", orientation='v', title='Count of Patients with Anaemia', width=500)\nfig.show()","45667595":"pd.crosstab(df.anaemia  ,df.death_event).plot(kind='bar')\nplt.title('Death Event as per Anaemia')\nplt.xlabel('Anaemia')\nplt.ylabel('Death')\nplt.show()","9f8cf87a":"ds = df['smoking'].value_counts().reset_index()\nds.columns = ['smoking', 'count']\nfig = px.bar(ds, x='smoking', y=\"count\", orientation='v', title='Count of Patients who Smoke', width=500)\nfig.show()","5deddeb9":"pd.crosstab(df.smoking ,df.death_event).plot(kind='bar')\nplt.title('Death Event as per Smoking ')\nplt.xlabel('Smoking')\nplt.ylabel('Death')\nplt.show()","832c7493":"print(\"Percentage of people who died and are smokers:\", \n      df[\"death_event\"][df[\"smoking\"] == 1].value_counts(normalize = True)[1]*100)\n","2119bbb1":"print(\"Percentage of people who died and are not smokers:\", \n      df[\"death_event\"][df[\"smoking\"] == 0].value_counts(normalize = True)[1]*100)\n","59e13980":"ds = df['high_blood_pressure'].value_counts().reset_index()\nds.columns = ['high_blood_pressure', 'count']\nfig = px.bar(ds, x='high_blood_pressure', y=\"count\", orientation='v', title='Count of Patients with high blood pressure', width=500)\nfig.show()","be7f1665":"pd.crosstab(df.high_blood_pressure  ,df.death_event).plot(kind='bar')\nplt.title('Death Event as per BLood Pressure ')\nplt.xlabel('BP')\nplt.ylabel('Death')\nplt.show()","c92a9361":"ds = df['diabetes'].value_counts().reset_index()\nds.columns = ['diabetes', 'count']\nfig = px.bar(ds, x='diabetes', y=\"count\", orientation='v', title='Count of Patients with diabetes', width=500)\nfig.show()","8fe8f098":"pd.crosstab(df.diabetes ,df.death_event).plot(kind='bar')\nplt.title('Death Event as per diabetes ')\nplt.xlabel('diabetes ')\nplt.ylabel('Death')\nplt.show()","7ca3f295":"ds = df['sex'].value_counts().reset_index()\nds.columns = ['sex', 'count']\nfig = px.bar(ds, x='sex', y=\"count\", orientation='v', title='Count of Patients according to sex', width=500)\nfig.show()","e4c4c499":"pd.crosstab(df.sex ,df.death_event).plot(kind='bar')\nplt.title('Death Event as per Sex')\nplt.xlabel('Sex')\nplt.ylabel('Death')\nplt.show()","2536a543":"print(\"Females:\", \n      df[\"death_event\"][df[\"sex\"] == 0].value_counts(normalize = True)[1]*100)\n\nprint(\"Males:\", \n      df[\"death_event\"][df[\"sex\"] == 1].value_counts(normalize = True)[1]*100)\n","b37e7dc5":"g_30=list()\ng_50=list()\ng_70=list()\ngreater70 = list()\nfor i in df.age:\n  if i<=30:\n    g_30.append(1)\n    g_50.append(0)\n    g_70.append(0)\n    greater70.append(0)\n\n  elif i>30 and i<=50:\n    g_30.append(0)\n    g_50.append(1)\n    g_70.append(0)\n    greater70.append(0)\n  \n  elif i>50 and i<=70:\n    g_30.append(0)\n    g_50.append(0)\n    g_70.append(1)\n    greater70.append(0)\n  \n  elif i>70:\n    g_30.append(0)\n    g_50.append(0)\n    g_70.append(0)\n    greater70.append(1)","9a692275":"df['age_till_30'] = g_30\ndf['age_bet_30_50'] = g_50\ndf['age_bet_50_70'] = g_70\ndf['age_gret_70'] = greater70\n","1af70946":"df.age_till_30.value_counts()","2322d8d9":"ds = df['age_till_30'].value_counts().reset_index()\nds.columns = ['age_till_30', 'count']\nfig = px.bar(ds, x='age_till_30', y=\"count\", orientation='v', title='Count of Patients with age till 30', width=500)\nfig.show()","80dc1f53":"pd.crosstab(df.age_till_30 ,df.death_event).plot(kind='bar')\nplt.title('Death Event for people with Age till 30')\nplt.xlabel('Age')\nplt.ylabel('Death')\nplt.show()","c249ce7e":"df.age_bet_30_50.value_counts()","8ec73f6b":"ds = df['age_bet_30_50'].value_counts().reset_index()\nds.columns = ['age_bet_30_50', 'count']\nfig = px.bar(ds, x='age_bet_30_50', y=\"count\", orientation='v', title='Count of Patients with age between 30 and 50', width=500)\nfig.show()","dfc62b87":"pd.crosstab(df.age_bet_30_50 ,df.death_event).plot(kind='bar')\nplt.title('Death Event for people with Age between 30 and 50')\nplt.xlabel('Age')\nplt.ylabel('Death')\nplt.show()","cb4a3450":"print(\"Mortlity Rate:\", \n      df[\"death_event\"][df[\"age_bet_30_50\"] == 1].value_counts(normalize = True)[1]*100)","f2833524":"df.age_bet_50_70.value_counts()","86213296":"ds = df['age_bet_50_70'].value_counts().reset_index()\nds.columns = ['age_bet_50_70', 'count']\nfig = px.bar(ds, x='age_bet_50_70', y=\"count\", orientation='v', title='Count of Patients with age between 50 and 70', width=500)\nfig.show()","181dcc55":"pd.crosstab(df.age_bet_50_70 ,df.death_event).plot(kind='bar')\nplt.title('Death Event for people with Age bet 50 and 70')\nplt.xlabel('Age')\nplt.ylabel('Death')\nplt.show()","a0cc327f":"print(\"Mortality Rate:\", \n      df[\"death_event\"][df[\"age_bet_50_70\"] == 1].value_counts(normalize = True)[1]*100)","889a77a2":"df.age_gret_70.value_counts()","32d5f6a9":"ds = df['age_gret_70'].value_counts().reset_index()\nds.columns = ['age_gret_70', 'count']\nfig = px.bar(ds, x='age_gret_70', y=\"count\", orientation='v', title='Count of Patients with age greater than 70', width=500)\nfig.show()","8a96cfe6":"pd.crosstab(df.age_gret_70 ,df.death_event).plot(kind='bar')\nplt.title('Death Event for people with Age greater than 70')\nplt.xlabel('Age')\nplt.ylabel('Death')\nplt.show()","9d75f955":"print(\"Mortality Rate:\", \n      df[\"death_event\"][df[\"age_gret_70\"] == 1].value_counts(normalize = True)[1]*100)\n","75877b12":"fig = px.bar(df, x=\"diabetes\", y=\"age\", color=\"death_event\", title=\"Long-Form Input\")\nfig.show()","b89f1c48":"fig = px.bar(df, x=\"sex\", y=\"age\", color=\"death_event\", title=\"Long-Form Input\")\nfig.show()","227a4bf1":"fig = px.bar(df, x=\"smoking\", y=\"age\", color=\"death_event\", title=\"Long-Form Input\")\nfig.show()","6ff1e363":"import plotly.express as px\nfig = px.violin(df, y=\"age\", x=\"sex\", color=\"death_event\", box=True, points=\"all\", hover_data=df.columns)\nfig.update_layout(title_text=\"Analysis of Age and Sex on Death Event\")\nfig.show()","42638eb6":"import plotly.express as px\nfig = px.violin(df, y=\"age\", x=\"smoking\", color=\"death_event\", box=True, points=\"all\", hover_data=df.columns)\nfig.update_layout(title_text=\"Analysis of Age and Smoking on Death Event\")\nfig.show()","27c00c33":"X = df.drop(columns=('death_event'),axis=1)\ny = df.death_event","e4f9fc0f":"scaler = MinMaxScaler(feature_range=(0,100))\nX['platelets'] = scaler.fit_transform(X[['platelets']])\nX['cpk'] = scaler.fit_transform(X[['cpk']])\nX.head()","edebacdd":"X_train , X_test , y_train , y_test = train_test_split(X,y , test_size = 0.25, random_state=1 )","be95edeb":"y.value_counts()","55851a54":"class_weight = {0:1 , 1:2}\nmodel = CatBoostClassifier(n_estimators=400  ,  depth = 4 , class_weights = class_weight)\nmodel.fit(X_train , y_train)","e42734de":"print('Training Accuracy: {:.3f}'.format(accuracy_score(y_train, model.predict(X_train))))\nprint('Testing Accuracy: {:.3f}'.format(accuracy_score(y_test, model.predict(X_test))))","3d7c0836":"model = CatBoostClassifier(n_estimators=400  ,  depth = 4)\nmodel.fit(X_train , y_train)","a2e44d7f":"print('Training Accuracy: {:.3f}'.format(accuracy_score(y_train, model.predict(X_train))))\nprint('Testing Accuracy: {:.3f}'.format(accuracy_score(y_test, model.predict(X_test))))","8c0ba01f":"pred = model.predict(X_test)\n\nprint(classification_report(y_test, pred))","717c4d00":"cm = confusion_matrix(y_test, pred)\nprint(cm)\nprint('True Positive' , cm[0,0])\nprint('False Positive' , cm[0,1])\nprint('True Negative' , cm[1,1])\nprint('False Negative' , cm[1,0])","96bd791a":"plot_confusion_matrix(model, X_test, y_test)\nplt.show()","9a9206d5":"**Not so surprisingly this the age group with the highest mortality rate of 59.6%%**","38a3ad41":"# Confusion Matrix","9a6fad24":"# Long Form Graphs","f8be844d":"**As there are too many unique values for age , I have grouped them in 4 groups - Age between 0-30, Age between 30-50, Age between 50-70 and Age greater than 70**","6d268bba":"> **According to this dataset median age of males who die due to heart failure is more than median age of females**","2f50706e":"Printing out the number of unique values for each column","ce6b618d":"**As we can see my model is very slightly overfitting and it is giving a accuracy of around 93%, which is great with such less data**","19a04a26":"**but that didn't seem to work for me very well!**","9d0580de":"# Splitting the data in train and test set","4571e65e":"**As we can see there are very high number of entries for males but if we calculate by percentage we can observe that females have higher mortality rate**","d4645f56":"> **I am using CatBoostClassifier for Classification**","2b7abefa":"**Although that doen't mean you start smoking \ud83d\ude45\u200d\u2642\ufe0f\ud83d\ude45\u200d\u2642\ufe0f\ud83d\ude45\u200d\u2642\ufe0f**","80a2d3e3":"> I am applying min max scaling to only platelets and cpk column becuase that seemed to work out fine for me","68bbb143":"# With Class Weights","8933da0a":"# **Training**","df66a438":"# \ud83d\udeac!=\ud83d\udc98","a4c1f13c":"# Importing all the necessary libraries","3a3c35c9":"# Age","b0b4b50c":"# **Anaemia**","23dba75e":"# Fitting the model","cc5c9434":"> **There is a high class imbalanace in the dataset so I tried giving them class weights.**","9cca3a3c":"**As we can see there are decent amount of entries for this age group as well with a mortality rate of 25%**","de00299e":"# Without Class Weights","a38972eb":"# Age between 50 and 70","24f03b23":"**People who smoke and die have a median age of 68.5 while people who don't smoke and die have a median age of 60.33 which means smoking isn't very risky for heart.**","0254f7cb":"# Diabetes","9b68c6b6":"# **EDA**","de3fda8e":"**We can clearly see that this the age group with maximum entries and a mortality rate of around 26.5%**","4f6a05be":"# Smoking","e3f874a4":"# If you found my work useful don't forget to upvote!\ud83d\ude09","6f087298":"# Box Plots","d743d255":"**This is the classification report with test scores on various metrics**","527a72ab":"# Blood Pressure","6d8f2786":"**As we can see their are no null\/missing values as well as no categorical columns , which is great!!**","f39ad29a":"# Classification Report","65fa5a4c":"# Age between 30 and 50","3778f38c":"**Just Renaming few columns**","4e57cf8c":"**For the graphs below observe only value = 1 on x axis which means that the ages fall in that group , if that made any sense**","8e781e50":"**As we can see there are NO entries for ages between 0-30**","4936fc7f":"**Quite Surprisingly people who smoke have a mortality rate of around 31% and people who don't have a mortality rate of 32.5%, that means..\ud83d\ude36**","51ebf15f":"# Age greater than 70","2efb695b":"# Reading the CSV file","f9cb81d3":"# Sex","e8e6ab20":"# Age below 30"}}