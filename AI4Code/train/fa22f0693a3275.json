{"cell_type":{"5d99618c":"code","6c947f83":"code","63cc53a8":"code","dd84bb54":"code","79f761e2":"code","0e4ed1c7":"code","b8f8e7d5":"code","8c6590a7":"code","c5d93aca":"code","5ff1c3ec":"markdown","70c847eb":"markdown","5bd7f644":"markdown","396e3811":"markdown","3bc2ee91":"markdown","c859e5a0":"markdown","f5961f9a":"markdown"},"source":{"5d99618c":"# load in our libraries\nimport pandas as pd # pandas for data frames\nfrom scipy.stats import ttest_ind # just the t-test from scipy.stats\nfrom scipy.stats import probplot \nimport matplotlib.pyplot as plt \nimport pylab\n\n# read in our data\ncereals = pd.read_csv(\"..\/input\/cereal.csv\")\n# check out the first few lines\ncereals.head()","6c947f83":"# plot a qqplot to check normality. If the varaible is normally distributed, most of the points \n# should be along the center diagonal.\nprobplot(cereals[\"sodium\"], dist=\"norm\", plot=pylab)","63cc53a8":"# get the sodium for hot cerals\nhotCereals = cereals[\"sodium\"][cereals[\"type\"] == \"H\"]\n# get the sodium for cold ceareals\ncoldCereals = cereals[\"sodium\"][cereals[\"type\"] == \"C\"]\n\n# compare them\nttest_ind(hotCereals, coldCereals, equal_var=False)","dd84bb54":"# let's look at the means (averages) of each group to see which is larger\nprint(\"Mean sodium for the hot cereals:\")\nprint(hotCereals.mean())\n\nprint(\"Mean sodium for the cold cereals:\")\nprint(coldCereals.mean())","79f761e2":"# plot the cold cereals\nplt.hist(coldCereals, alpha=0.5, label='cold')\n# and the hot cereals\nplt.hist(hotCereals, label='hot')\n# and add a legend\nplt.legend(loc='upper right')\n# add a title\nplt.title(\"Sodium(mg) content of cereals by type\")\nplt.ylabel(\"Count\")\nplt.xlabel(\"Sodium (mg)\")","0e4ed1c7":"x = \"rating\"\n\n# again do a normal distribution check\n# plot a qqplot to check normality. If the varaible is normally distributed, most of the points \n# should be along the center diagonal.\nprobplot(cereals[x], dist=\"norm\", plot=pylab)","b8f8e7d5":"# get the sodium for hot cerals\nhotCereals = cereals[x][cereals[\"type\"] == \"H\"]\n# get the sodium for cold ceareals\ncoldCereals = cereals[x][cereals[\"type\"] == \"C\"]\n\n# compare them\nttest_ind(hotCereals, coldCereals, equal_var=False)","8c6590a7":"# let's look at the means (averages) of each group to see which is larger\nprint(\"Mean sodium for the hot cereals:\")\nprint(hotCereals.mean())\n\nprint(\"Mean sodium for the cold cereals:\")\nprint(coldCereals.mean())","c5d93aca":"# plot the cold cereals\nplt.hist(coldCereals, alpha=0.5, label='cold')\n# and the hot cereals\nplt.hist(hotCereals, label='hot')\n# and add a legend\nplt.legend(loc='upper right')\n# add a title\nplt.title(\"Ratings content of cereals by type\")\nplt.ylabel(\"Count\")\nplt.xlabel(\"Rating\")","5ff1c3ec":"Today we're going to do a t-test, but first let's read in our data & set up our environment.","70c847eb":"So, if we decided to set our alpha (the highest p-value that would still allow us to reject the null) to 0.05 before we started, we would reject the null (i.e. can be pretty sure that there's not not a difference between these two groups). Statistic is the actual value of the t-test, and the pvalue is the probability that we saw a difference this large between our two groups just due to chance if they were actually drawn from the same underlying population.","5bd7f644":"Now plot for the two cereal types, with each as a different color.","396e3811":"Preform our t-test.","3bc2ee91":"We should make sure that the variable is normally distributed (spoiler: I checked that it was beforehand ;) so let's use a qq-polt to do that.","c859e5a0":"Let's do a quick check for rating for cereal too","f5961f9a":"failed to reject the null meaning there is no statistical difference between the two types of cereal (hot and cold) and their ratings."}}