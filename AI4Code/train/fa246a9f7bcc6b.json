{"cell_type":{"1f8f3e6f":"code","c0f499d4":"code","f07f1f3f":"code","45ed814b":"code","971288ad":"code","e1731dbd":"code","6acf7cdb":"code","5646c133":"code","b0f5568d":"code","a8c9392d":"code","faa4e64b":"code","1c471105":"code","cd4a104f":"code","f45bf5c7":"code","2c806060":"code","f20040ae":"code","a5ad11c4":"code","607d9e2c":"code","9bce124c":"code","d9a84fe5":"code","34c90ea4":"markdown","1505d809":"markdown","44fb4996":"markdown","21559c35":"markdown","c819dfc5":"markdown","eb7cd818":"markdown","ec9eb9da":"markdown","2e6001c6":"markdown","b44f3d48":"markdown","d45d9b27":"markdown","648fb0ed":"markdown"},"source":{"1f8f3e6f":"import pandas as pd\nimport numpy as np\nimport glob\nimport datetime as dt\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nfrom plotly.offline import init_notebook_mode, iplot, plot\nimport plotly.offline as po\nfrom plotly import tools\nimport plotly.graph_objs as pg\n\nimport warnings\nwarnings.filterwarnings('ignore')\npd.set_option(\"display.max_columns\", 100)","c0f499d4":"comp_dir = '..\/input\/learnplatform-covid19-impact-on-digital-learning' \n\nengage_files = glob.glob(comp_dir + \"\/engagement_data\/*.csv\")\nengage_dfs = list()\nfor file in engage_files:\n    df = pd.read_csv(file)\n    engage_dfs.append(df)\n    \nproducts_info = pd.read_csv(comp_dir + \"\/products_info.csv\")\ndistricts_info = pd.read_csv(comp_dir + \"\/districts_info.csv\")\n\nnytimes_dir = '..\/input\/ny-times-covid-19-tracker-data'\ncovid_case_df = pd.read_csv(nytimes_dir + \"\/nytimes_covid_cases_data\")","f07f1f3f":"\"\"\" \nThe original data\/input for all these functions can be located at the following sources:\n1) https:\/\/www.kaggle.com\/c\/learnplatform-covid19-impact-on-digital-learning\/data\n2) https:\/\/github.com\/nytimes\/covid-19-data\n\"\"\"\n\ndef time_to_dt(time):\n    return dt.datetime.strptime(time, \"%Y-%m-%d\")\n\n\"\"\" Preprocessing Products DataFrame\"\"\"\n\ndef preprocess_products_df(df: pd.DataFrame):\n    df['PreK-12'] = df[\"Sector(s)\"].apply(lambda x: True if (str(x)).find(\"PreK-12\")!=-1 else False)\n    df['HigherEd'] = df[\"Sector(s)\"].apply(lambda x: True if (str(x)).find(\"Higher Ed\")!=-1 else False)\n    df['Corporate'] = df[\"Sector(s)\"].apply(lambda x: True if (str(x)).find(\"Corporate\")!=-1 else False)\n    df = df.fillna(\"unknown\")\n    return df\n\n\"\"\" Preprocess Districts DataFrame\"\"\"\n\ndef format_percent(val: str):\n    if val is None or val=='unknown':\n        return 'unknown'\n    val = val[1:-1]\n    val1 = str(float(val.split(', ')[0])*100)\n    val2 = str(float(val.split(', ')[1])*100)\n    return val1+'% - '+val2+'%'\n\ndef format_population(val: str):\n    if val is None or val=='unknown':\n        return 'unknown'\n    val = val[1:-1]\n    return val.split(', ')[0]+' - '+val.split(', ')[1]\n\ndef preprocess_districts_df(df: pd.DataFrame):\n    df = df.fillna(\"unknown\")\n    df['pct_black\/hispanic'] = df['pct_black\/hispanic'].apply(format_percent)\n    df['pct_free\/reduced'] = df['pct_free\/reduced'].apply(format_percent)\n    df['county_connections_ratio'] = df['county_connections_ratio'].apply(format_percent)\n    df['pp_total_raw'] = df['pp_total_raw'].apply(format_population)\n    return df\n\n\"\"\" Preprocess Engage DataFrames\"\"\"\n\ndef link_district_to_engage_df(loc_id: int, engage_files: list):\n    for i in range(len(engage_files)):\n        if(engage_files[i].find(str(loc_id)) != -1):\n            return i\n    return -1  \n\ndef preprocess_engage_dfs(engage_dfs: list, enage_files:list, districts_df: pd.DataFrame):\n    for df in engage_dfs:\n        df['dt'] = df['time'].apply(time_to_dt)\n    districts_df['engage_file_id'] = districts_df['district_id'].apply(lambda x: link_district_to_engage_df(x, engage_files)) \n\n\"\"\" Preprocessing NY Times COVID cases DataFrame\"\"\"\n\ndef preprocess_nytime_cases_df(df: pd.DataFrame) :\n    df['dt'] = df['date'].apply(time_to_dt)\n    df = df[df.dt > dt.datetime(2020,1,1)]\n    df = df[df.dt < dt.datetime(2020,12,31)]\n    df = df.set_index('dt')\n    return df  \n\n\"\"\" Generate Maps That Connect Different Variables \"\"\"\n\ndef generate_state_map(districts_df: pd.DataFrame, covid_case_df: pd.DataFrame, engage_dfs: list, engage_files: list):\n    state_map = dict()\n    for state in districts_df.state.value_counts().index:\n        if(state!='unknown' and state!='District Of Columbia'):\n            case_df = covid_case_df[covid_case_df.state == state]\n            case_df['new_cases'] = case_df['cases'].transform(lambda s: s.sub(s.shift().fillna(0)).abs())\n\n            ids = districts_df[districts_df.state == state].engage_file_id.values\n            dfs = list()\n            for i in ids:\n                dfs.append(engage_dfs[i].groupby(by=['dt'])[['pct_access', 'engagement_index']].sum())\n            engage_df = pd.concat(dfs)\n            engage_df1 = engage_df.groupby(by=['dt'])[['pct_access', 'engagement_index']].mean()\n            #engage_df2 = engage_df.groupby(by=['dt', 'lp_id'])[['pct_access', 'engagement_index']].mean()\n            #engage_df2.reset_index().set_index('dt')\n\n            state_map[state] = [case_df, engage_df1]\n            \n    return state_map\n\ndef generate_pct_black_hisp_map(districts_df: pd.DataFrame, engage_dfs: list):\n    pct_black_hisp_map = dict()\n    for val in np.unique(districts_df['pct_black\/hispanic'].values):\n        ids = districts_df[districts_df['pct_black\/hispanic'] == val].engage_file_id.values\n        dfs = list()\n        for i in ids:\n            dfs.append(engage_dfs[i].groupby(by=['dt'])[['pct_access', 'engagement_index']].max())\n        engage_df = pd.concat(dfs)\n        engage_df1 = engage_df.groupby(by=['dt'])[['pct_access', 'engagement_index']].mean()\n        #engage_df2 = engage_df.groupby(by=['dt', 'lp_id'])[['pct_access', 'engagement_index']].mean()\n        #engage_df2.reset_index().set_index('dt')\n\n        #pct_black_hisp_map[val] = [engage_df1, engage_df2]\n        pct_black_hisp_map[val] = engage_df1\n    return pct_black_hisp_map\n        \ndef generate_pct_free_reduced_lunch_map(districts_df: pd.DataFrame, engage_dfs: list):\n    pct_free_reduced_lunch_map = dict()\n    for val in np.unique(districts_df['pct_free\/reduced'].values):\n        ids = districts_df[districts_df['pct_free\/reduced'] == val].engage_file_id.values\n        dfs = list()\n        for i in ids:\n            dfs.append(engage_dfs[i].groupby(by=['dt'])[['pct_access', 'engagement_index']].max())\n        engage_df = pd.concat(dfs)\n        engage_df1 = engage_df.groupby(by=['dt'])[['pct_access', 'engagement_index']].mean()\n        #engage_df2 = engage_df.groupby(by=['dt', 'lp_id'])[['pct_access', 'engagement_index']].mean()\n        #engage_df2.reset_index().set_index('dt')\n\n        #pct_free_reduced_lunch_map[val] = [engage_df1, engage_df2]\n        pct_free_reduced_lunch_map[val] = engage_df1\n    return pct_free_reduced_lunch_map\n\ndef product_dfs(engage_dfs: list, districts_df: pd.DataFrame):\n    engage_df_us = pd.concat(engage_dfs)\n    product_df_us = engage_df_us.groupby(by=['lp_id'])[['pct_access', 'engagement_index']].mean()\n    \n    prod_lunch_dfs = dict()\n    for val in np.unique(districts_df['pct_free\/reduced'].values):\n        ids = districts_df[districts_df['pct_free\/reduced'] == val].engage_file_id.values\n        dfs = list()\n        for i in ids:\n            dfs.append(engage_dfs[i].groupby(by=['lp_id'])[['pct_access', 'engagement_index']].mean())\n        engage_df = pd.concat(dfs)\n        prod_lunch_dfs[val] = (engage_df.groupby(by=['lp_id'])[['pct_access', 'engagement_index']].mean())\n    \n    return product_df_us, prod_lunch_dfs\n\n\n\"\"\" Generate Nation Wide DataFrames\"\"\"\n\ndef us_dfs(engage_dfs: list, covid_case_df: pd.DataFrame):\n    engage_df_us = pd.concat(engage_dfs)\n    engage_df_us = engage_df_us.groupby(by=['dt'])[['pct_access', 'engagement_index']].mean()\n    \n    covid_case_us = covid_case_df.groupby(by=['dt'])[['cases', 'deaths']].mean()\n    covid_case_us['new_cases'] = covid_case_us['cases'].transform(lambda s: s.sub(s.shift().fillna(0)).abs())\n    \n    return engage_df_us, covid_case_us","45ed814b":"products_df = preprocess_products_df(products_info)\ndistricts_df = preprocess_districts_df(districts_info)\ncovid_case_df = preprocess_nytime_cases_df(covid_case_df)\npreprocess_engage_dfs(engage_dfs, engage_files, districts_df)\n\nstate_map = generate_state_map(districts_df, covid_case_df, engage_dfs, engage_files)\npct_black_hisp_map = generate_pct_black_hisp_map(districts_df, engage_dfs)\npct_free_lunch_map = generate_pct_free_reduced_lunch_map(districts_df, engage_dfs)\n\nengage_df_us, covid_case_us = us_dfs(engage_dfs, covid_case_df)\nproduct_df_us, prod_lunch_dfs = product_dfs(engage_dfs, districts_df)","971288ad":"us_state_abbrev = {\n    'Alabama': 'AL',\n    'Alaska': 'AK',\n    'American Samoa': 'AS',\n    'Arizona': 'AZ',\n    'Arkansas': 'AR',\n    'California': 'CA',\n    'Colorado': 'CO',\n    'Connecticut': 'CT',\n    'Delaware': 'DE',\n    'District of Columbia': 'DC',\n    'Florida': 'FL',\n    'Georgia': 'GA',\n    'Guam': 'GU',\n    'Hawaii': 'HI',\n    'Idaho': 'ID',\n    'Illinois': 'IL',\n    'Indiana': 'IN',\n    'Iowa': 'IA',\n    'Kansas': 'KS',\n    'Kentucky': 'KY',\n    'Louisiana': 'LA',\n    'Maine': 'ME',\n    'Maryland': 'MD',\n    'Massachusetts': 'MA',\n    'Michigan': 'MI',\n    'Minnesota': 'MN',\n    'Mississippi': 'MS',\n    'Missouri': 'MO',\n    'Montana': 'MT',\n    'Nebraska': 'NE',\n    'Nevada': 'NV',\n    'New Hampshire': 'NH',\n    'New Jersey': 'NJ',\n    'New Mexico': 'NM',\n    'New York': 'NY',\n    'North Carolina': 'NC',\n    'North Dakota': 'ND',\n    'Northern Mariana Islands':'MP',\n    'Ohio': 'OH',\n    'Oklahoma': 'OK',\n    'Oregon': 'OR',\n    'Pennsylvania': 'PA',\n    'Puerto Rico': 'PR',\n    'Rhode Island': 'RI',\n    'South Carolina': 'SC',\n    'South Dakota': 'SD',\n    'Tennessee': 'TN',\n    'Texas': 'TX',\n    'Utah': 'UT',\n    'Vermont': 'VT',\n    'Virgin Islands': 'VI',\n    'Virginia': 'VA',\n    'Washington': 'WA',\n    'West Virginia': 'WV',\n    'Wisconsin': 'WI',\n    'Wyoming': 'WY'\n}\n\ndef get_state_ids(state_map: dict):\n    st_ids = list()\n    for st in list(state_map.keys()):\n        st_ids.append(us_state_abbrev[st])\n    return st_ids\n\nst_ids = get_state_ids(state_map)","e1731dbd":"long_teal = ['rgb(42, 86, 116)',\n             'rgb(45, 95, 125)',\n             'rgb(55, 105, 135)',\n             'rgb(59, 115, 143)',\n             'rgb(62, 124, 147)',\n             'rgb(63, 128, 151)',\n             'rgb(65, 133, 154)',\n             'rgb(71, 138, 160)',\n             'rgb(76, 142, 163)',\n             'rgb(79, 144, 166)',\n             'rgb(81, 151, 169)',\n             'rgb(85, 157, 172)',\n             'rgb(90, 162, 175)',\n             'rgb(95, 167, 178)',\n             'rgb(104, 171, 184)',\n             'rgb(114, 182, 192)',\n             'rgb(124, 188, 198)',\n             'rgb(133, 196, 201)',\n             'rgb(145, 205, 205)',\n             'rgb(155, 213, 213)',\n             'rgb(168, 219, 217)',\n             'rgb(178, 225, 223)',\n             'rgb(188, 232, 227)',\n             'rgb(209, 238, 234)']\n\ndef plot_sample_size_details(districts_df: pd.DataFrame, products_df: pd.DataFrame):\n    fig = make_subplots(rows=1, cols=3, specs=[[{\"type\": \"pie\"}, {\"type\": \"pie\"}, {\"type\": \"pie\"}]],\n                       column_titles=['States', 'Locale', 'Product Audience'])\n    fig.add_trace(\n        go.Pie(labels=districts_df.state.value_counts().index, values=districts_df.state.value_counts().values, marker=dict(colors=long_teal), hole=.5, textposition='inside', textinfo='label'),\n        row=1, col=1)\n    \n    fig.add_trace(\n        go.Pie(labels=districts_df.locale.value_counts().index, values=districts_df.locale.value_counts().values, marker=dict(colors=px.colors.sequential.Teal_r), hole=.5, textposition='inside', textinfo='label'),\n        row=1, col=2)\n    \n    fig.add_trace(\n        go.Pie(labels=['Prek-12', 'Higher Ed', 'Corporate'], values=[products_df['PreK-12'].sum(), products_df['HigherEd'].sum(), products_df['Corporate'].sum()], marker=dict(colors=px.colors.sequential.Teal_r), hole=.5, textposition='inside', textinfo='label'),\n        row=1, col=3)\n    \n    fig.update_layout(showlegend=False)\n    fig.show()","6acf7cdb":"plot_sample_size_details(districts_df, products_df)","5646c133":"def resample(df: pd.DataFrame, sample: str, what: list=None):\n    if what is not None:\n        return df[what].resample(sample).mean()\n    return df[['engagement_index', 'pct_access']].resample(sample).mean()\n\ndef add_secondary_y_plot(fig: go.Figure, \n                         row: int, col: int, \n                         x1: np.array, x2: np.array, \n                         y1: np.array, y2: np.array, \n                         color1: str, color2: str,\n                         name1: str, name2: str):\n    fig.add_scatter(x=x1, \n                    y=y1, \n                    mode='lines',\n                    marker={'color': color1},\n                    name=name1,\n                    secondary_y=False,\n                    row=row,\n                    col=col)\n    \n    fig.add_scatter(x=x2, \n                    y=y2, \n                    mode='lines', \n                    marker={'color': color2},\n                    name=name2,\n                    secondary_y=True,\n                    row=row,\n                    col=col)\n    \ndef plot_engage_to_cases(engage_df: pd.DataFrame, cases_df: pd.DataFrame):\n    fig =  make_subplots(rows=2, cols=1, \n                         specs=[[{'secondary_y': True}], [{'secondary_y': True}]],\n                         subplot_titles=('Engagement Index VS Cumulative Cases - Over Time (US)', 'Engagement Index VS New Cases Daily - Over Time (US)'))\n    add_secondary_y_plot(fig, 1, 1, engage_df.index, cases_df.index, engage_df.engagement_index, cases_df.cases, '#36B6D2', '#E76a5d', 'Engagement Index', 'COVID Cases')\n    add_secondary_y_plot(fig, 2, 1, engage_df.index, cases_df.index, engage_df.engagement_index, cases_df.new_cases, '#36B6D2', '#E76a5d', 'Engagement Index', 'COVID Cases')\n\n        \n    fig.add_vline(x=dt.datetime(2020,1,21), line_width=2, line_dash='dash', line_color='#9B9B9B')\n    fig.add_vline(x=dt.datetime(2020,6,1), line_width=2, line_dash='dash', line_color='#9B9B9B')\n    fig.add_vline(x=dt.datetime(2020,8,12), line_width=2, line_dash='dash', line_color='#9B9B9B')\n\n    fig.update_layout(\n        autosize=False,\n        width=850,\n        height=450,)\n\n    fig.update_layout(plot_bgcolor='#E6EFF1') \n    fig.update_xaxes(showgrid=False, title_text='Date')\n    fig.update_yaxes(showgrid=False, title_text='Engagement Index', secondary_y=False)\n    fig.update_yaxes(showgrid=False, title_text='Cases', secondary_y=True)\n    fig.update_layout(title_x=.3, title_y=.92, title_font_size=30, height=750, width=1000)\n    fig.update_traces(showlegend=False)\n    \n    fig.show()\n    \ndef plot_resampled_engage_to_cases(engage_df: pd.DataFrame, cases_df: pd.DataFrame):\n    fig =  make_subplots(rows=3, cols=1, \n                         specs=[[{'secondary_y': True}], [{'secondary_y': True}], [{'secondary_y': True}]],\n                         subplot_titles=(\"Daily\", \"Weekly\", \"Monthly\"))\n    \n    add_secondary_y_plot(fig, 1, 1, engage_df.index, cases_df.index, engage_df.engagement_index, cases_df.new_cases, '#36B6D2', '#E76a5d', 'Engagement Index', 'COVID Cases')\n    \n    engage_df_weekly = resample(engage_df, '7D')\n    cases_df_weekly = resample(cases_df, '7D', ['cases', 'new_cases'])\n    add_secondary_y_plot(fig, 2, 1, engage_df_weekly.index, cases_df_weekly.index, engage_df_weekly.engagement_index, cases_df_weekly.new_cases, '#36B6D2', '#E76a5d', 'Engagement Index', 'COVID Cases')\n    \n    engage_df_monthly = resample(engage_df, 'M')\n    cases_df_monthly = resample(cases_df, 'M', ['cases', 'new_cases'])\n    add_secondary_y_plot(fig, 3, 1, engage_df_monthly.index, cases_df_monthly.index, engage_df_monthly.engagement_index, cases_df_monthly.new_cases, '#36B6D2', '#E76a5d', 'Engagement Index', 'COVID Cases')\n    \n    fig.add_vline(x=dt.datetime(2020,1,21), line_width=2, line_dash='dash', line_color='#9B9B9B')\n    fig.add_vline(x=dt.datetime(2020,6,1), line_width=2, line_dash='dash', line_color='#9B9B9B')\n    fig.add_vline(x=dt.datetime(2020,8,12), line_width=2, line_dash='dash', line_color='#9B9B9B')\n\n    fig.update_layout(\n        autosize=False,\n        width=850,\n        height=450,)\n\n    fig.update_layout(plot_bgcolor='#E6EFF1') \n    fig.update_xaxes(showgrid=False, title_text='Date')\n    fig.update_yaxes(showgrid=False, title_text='Engagement Index', secondary_y=False)\n    fig.update_yaxes(showgrid=False, title_text='Cases', secondary_y=True)\n    fig.update_layout(title_x=.3, title_y=.92, title_font_size=30, height=750, width=1000)\n    fig.update_traces(showlegend=False)\n    \n    fig.show()","b0f5568d":"plot_engage_to_cases(engage_df_us, covid_case_us)","a8c9392d":"plot_resampled_engage_to_cases(engage_df_us, covid_case_us)","faa4e64b":"def split_by_time(engage_df: pd.DataFrame, start: dt.datetime, end: dt.datetime):\n    engage_df = engage_df[engage_df.index > start]\n    engage_df = engage_df[engage_df.index < end]\n    return engage_df.engagement_index.values\n\ndef plot_engage_box_plot(engage_df: pd.DataFrame):\n    y1 = split_by_time(engage_df, dt.datetime(2019,12,31), dt.datetime(2020,1,21))\n    y2 = split_by_time(engage_df, dt.datetime(2020,1,22), dt.datetime(2020,6,1))\n    y3 = split_by_time(engage_df, dt.datetime(2020,6,2), dt.datetime(2020,8,12))\n    y4 = split_by_time(engage_df, dt.datetime(2020,8,13), dt.datetime(2021,1,1))\n    \n    fig = go.Figure()\n    fig.add_trace(go.Box(y=y1, marker_color=px.colors.sequential.Teal[2], name='Before COVID Hit'))\n    fig.add_trace(go.Box(y=y2, marker_color=px.colors.sequential.Teal[3], name='Spring 2020'))\n    fig.add_trace(go.Box(y=y3, marker_color=px.colors.sequential.Teal[1], name='Summer 2020'))\n    fig.add_trace(go.Box(y=y4, marker_color=px.colors.sequential.Teal[4], name='Fall 2020'))\n    fig.update_layout(height=400, width=1000, yaxis_title='engagement', title='Engagement Index Box Plots', title_x=.3) \n    fig.show()","1c471105":"plot_engage_box_plot(engage_df_us)","cd4a104f":"def add_map(fig: go.Figure, row: int, col: int, color: str, vals: list):\n    fig.add_trace(\n        go.Choropleth(\n            locations=st_ids,\n            locationmode = 'USA-states',\n            z = vals,\n            colorscale=color, \n        ),\n        row=row, col=col\n    )\n    \ndef segment_data_by_time(state_map: dict, df_type: int, start_date: dt.datetime, end_date: dt.datetime):\n    vals = list()\n    for st in list(state_map.keys()):\n        df = state_map[st][df_type][state_map[st][df_type].index < end_date]\n        df = df[df.index > start_date]\n        if(df_type==0):\n            if(len(df)>0):\n                vals.append(df['new_cases'].mean())\n        else:\n            vals.append(df['engagement_index'].mean())\n            \n    return vals\n\ndef plot_engage_cases_maps_over_time(state_map: dict):\n    rows = 4\n    cols = 2\n    fig = make_subplots(rows=4, cols=2, \n                        column_titles=['Engagement', 'Cases'], \n                        row_titles=['Before COVID Hit', 'Spring 2020', 'Summer 2020', 'Fall 2020'],\n                        specs=[[{'type': 'choropleth'} for c in np.arange(cols)] for r in np.arange(rows)])\n\n\n    add_map(fig, 1,1,'teal', segment_data_by_time(state_map, 1, dt.datetime(2019,12,31), dt.datetime(2020,1,21)))\n    add_map(fig, 2,1,'teal', segment_data_by_time(state_map, 1, dt.datetime(2020,1,22), dt.datetime(2020,6,1)))\n    add_map(fig, 3,1,'teal', segment_data_by_time(state_map, 1, dt.datetime(2020,6,2), dt.datetime(2020,8,12)))\n    add_map(fig, 4,1,'teal', segment_data_by_time(state_map, 1, dt.datetime(2020,8,13), dt.datetime(2021,1,1)))\n\n    add_map(fig, 1,2,'orrd', segment_data_by_time(state_map, 0, dt.datetime(2019,12,31), dt.datetime(2020,1,21)))\n    add_map(fig, 2,2,'orrd', segment_data_by_time(state_map, 0, dt.datetime(2020,1,22), dt.datetime(2020,6,1)))\n    add_map(fig, 3,2,'orrd', segment_data_by_time(state_map, 0, dt.datetime(2020,6,2), dt.datetime(2020,8,12)))\n    add_map(fig, 4,2,'orrd', segment_data_by_time(state_map, 0, dt.datetime(2020,8,13), dt.datetime(2021,1,1)))\n\n    layout = dict(geo = dict(scope='usa'), height=1000, width=1000, title_font_size=30)\n    fig.update_traces(showscale=False)\n    fig.update_layout(layout)\n    fig.update_geos(scope='usa')\n\n    fig.show()","f45bf5c7":"plot_engage_cases_maps_over_time(state_map)","2c806060":"def add_bar(fig: go.Figure, row: int, col: int, x: list, y: list, x_label: str):\n    chart = go.Bar(x=x, y=y, marker_color=px.colors.sequential.Teal[2])\n    fig.append_trace(chart, row=row, col=col)\n    \n\ndef plot_socioeconomic_bar_charts(pct_black_hisp_map: dict, pct_free_lunch_map: dict):\n    x = ['0.0% - 20.0%', '20.0% - 40.0%', '40.0% - 60.0%', '60.0% - 80.0%', '80.0% - 100.0%']\n    y1, y2= list(), list()\n    for val in x:\n        y1.append(pct_black_hisp_map[val].engagement_index.mean())\n        y2.append(pct_free_lunch_map[val].engagement_index.mean())\n    \n    fig = make_subplots(rows=1, cols=2, specs=[[{'type':'bar'}, {'type':'bar'}]], \n                        column_titles=['% black & hispanic', '% free & reduced lunch'])\n    add_bar(fig, 1, 1, x, y1, '%')\n    add_bar(fig, 1, 2, x, y2, 'teal')\n    fig.update_layout(height=400, width=1000, yaxis_title='engagement')\n    fig.update_traces(showlegend=False)\n    \n    fig.show()","f20040ae":"plot_socioeconomic_bar_charts(pct_black_hisp_map, pct_free_lunch_map)","a5ad11c4":"def plot_product_barpolar(df: pd.DataFrame, products_df: pd.DataFrame, title:str):\n    prod_data = df.nlargest(7, 'engagement_index')\n    plots = list()\n    for i in range(7):\n        try:\n            label = str(products_df[products_df['LP ID'] == int(prod_data.index[i])][\"Product Name\"].values[0])\n        except Exception:\n            label = \"name not known\"\n        color = px.colors.sequential.Teal[6-i]\n        plots.append(go.Barpolar(\n            r=[prod_data.iloc[i][1]],\n            theta=[(i+1)*50],\n            width=[28],\n            marker_color=color,\n            marker_line_color=\"#0541a1\",\n            marker_line_width=2,\n            name=label,\n            opacity=0.8))\n    fig = go.Figure(plots)\n\n    fig.update_layout(\n        template=None,\n        polar = dict(\n            radialaxis = dict(showticklabels=False, ticks=''),\n            angularaxis = dict(showticklabels=False, ticks='')\n        ),\n        showlegend=True,\n        title=title, title_x=.45\n    )\n\n    fig.show()","607d9e2c":"plot_product_barpolar(product_df_us, products_df, 'Most Used Digital Products - US')","9bce124c":"plot_product_barpolar(prod_lunch_dfs['80.0% - 100.0%'], products_df, 'Most Used Digital Products - 80-100% Free & Reduced Lunch')","d9a84fe5":"%%HTML\n<style type=\"text\/css\">\ndiv.h1 {\n    font-size: 32px; \n    margin-bottom:2px;\n}\n\ndiv.h3 {\n    color: #5ab8c7; \n    font-size: 20px; \n    margin-top: 4px; \n    margin-bottom:8px;\n}\n\n<\/style","34c90ea4":"<div class=\"h1\">Conclusion<\/div>\n<br>\n<div class=\"h3\">Time Series Findings<\/div>\n<br>\nDigital student engagement changed during different times of year. After COVID-19 hit, there was a general increase in online engagement. Summer had the lowest engagement since school was out of seesion, and fall had higher engagement scores than the spring likely because the school systems had figured out how to more effective utilize digital platforms.\n<br>\nWhile time of year impacted engagement, actual quantity of COVID-19 Cases did not seem to impact engagement.\n<br>\n<br>\n<div class=\"h3\">Geospatial Findings<\/div>\n<br>\nOverall, there did not seem to be much correlation between location and engagement. \n<br>\nFurthermore, locations with more\/less COVID-19 cases did not necessarily have more\/less engagement.\n<br>\n<br>\n<div class=\"h3\">Socioeconomic Findings<\/div>\n<br>\nSocioeconomic factors did generally seem to have an impact on digital student engagement. Typically, districts with greater percents of black and hispanic population and greater percents of free and reduced lunch students have lower engagement.\n<br>\nSuccessful products for all students include several Google products (e.g. Google Docs and Google Classroom) because they are free or inexpensive. Other successful tools seemed to be YouTube, Meet, Canvas, Kahoot, and Schoology.\n<br>","1505d809":"<div class=\"h1\">Overview<\/div>\n<br>\n<div class=\"h3\">Primary Objective<\/div>\n<br>\n<b>The primary objective of this analysis is to understand how the COVID-19 virus has impacted digital learning and student engagement over time and over geospatial and socioeconomic landscapes.<\/b>\n<br>\n<br>\n<div class=\"h3\">Goals and Questions<\/div>\n<p>\nTime Series Analysis\n<li>What role does time of year play in digital engagement?<\/li>\n<li>Does the quantity of COVID Cases over time impact digital engagement?<\/li> <br>\nGeospatial Analysis <br>\n<li>What does digital learning look like across a geospatial landscape<\/li>\n<li>Does the quantity of COVID Cases between states impact digital engagement?<\/li> <br>\nSocioeconomic Analysis <br>\n<li>What socioeconomic factors impact digital engagement?<\/li>\n<li>Moving forward, what tools\/products were successful in creating student engagement for students at any socioeconomic status?<\/li>\n<\/p>\n<br>\n<div class=\"h3\">Code Reproducibility and Organization<\/div>\n<p>\nBelow is a GitHub that contains hundreds on lines of code that preprocesses the data and creates the visualizations: <br>\n    <a href=https:\/\/github.com\/RaviShah1\/COVID-19-Impact-On-Digital-Learning>https:\/\/github.com\/RaviShah1\/COVID-19-Impact-On-Digital-Learning<\/a> <br>\n<br>\nAll the code from the hidden code cells in this notebook can be found on the GitHub, and all the visible method calls show the results of my analysis. The GitHub should make reproducing the code super simple.\n<br><br>\nAfter I preprocess the data, the analysis is broken down into 3 main parts: \n<ol>   \n    <li>times series analysis<\/li>\n    <li>geospatial analysis<\/li>\n    <li>socioeconomic analysis<\/li>\n<\/ol>\nA summary of my findings from all 3 sections can be found in the conclusion portion of this notebook.\n<br>\n<\/p>\n<br>\n<div class=\"h3\">Data and Sources<\/div>\n<p>\nAll of the raw data I use can be found in the data folder in the GitHub above or by going to the original sites (linked below)\n<a href=https:\/\/www.kaggle.com\/c\/learnplatform-covid19-impact-on-digital-learning\/data>https:\/\/www.kaggle.com\/c\/learnplatform-covid19-impact-on-digital-learning\/data<\/a>\n<br>\n<a href=https:\/\/github.com\/nytimes\/covid-19-data>https:\/\/github.com\/nytimes\/covid-19-data<\/a>\n\n<br>\n<\/p>\n<br>\n\n<div class=\"h3\">Additional Notes<\/div>\n<p>\nAll visualizations are created using plotly and are interactive. <br>\nPut your cursor over the graphs and charts to see exact numbers and more details.\n<\/p>","44fb4996":"<div class=\"h1\">Time Series Anaylsis<\/div>\n\n<br>\nIn the timeseries portion (and other parts of the analysis), I will be splitting the data into 4 sections:\n<br>\n<ol>\n    <li>Before COVID Hit<\/li>\n    <li>Spring 2020<\/li>\n    <li>Summer 2020<\/li>\n    <li>Fall 2020<\/li>\n<\/ol>\n\n<div class=\"h3\">Line Plots Over Time<\/div>\n<br>\n\nThe line plots below investigate engagement (on the left y-axis) and COVID cases (on the right y-axis) over time. \n<br>\nThe COVID line in the first plot shows the cumulative number of COVID-19 while the second plot shows the number of new cases on that given day.\n<br>\n<p style=\"color:#36B6D2\">The Engagement Index is represented by the blue line<\/p>\n<p style=\"color:#E76a5d\">The COVID-19 cases are represented by the red line<\/p>\n<p style=\"color:#7f8781\">The Gray Dashed Lines separate the 4 segments of the year mentioned above<\/p>\n","21559c35":"<div class=\"h3\">Resampling For Generalizing the Trend<\/div>\n<br>\n<p>\nIn the plots above, there is an obvious, regular, constantly occuring dip in engagement. These dips are the weekends when students are far less active. Other larger dips are holidays such as Christmas and other time off school such as summer break.\n<br>\n<br>\nIn order to better visualize the trend of engagement, we can use resampling. Resampling is a time series technique that can allow us to look at the engagement and cases (daily) on a weekly or monthly basis instead of a daily basis\n<\/p>","c819dfc5":"While time of year certainly seems to play a part in digital student engagement, the actual quantity of COVID-19 cases does not seem to have a significant impact of engagement.\n\n<div class=\"h3\">Visualizing With Box Plots<\/div>\n<br>\n<p>\nBy utilizing box plots, we can clearly see the change in engagement over the 4 time periods. \n<br>\nIt is clear that with the existence of COIVD-19 in the U.S., there is now an overall increase in digital engagement. Of course summer had the lowest engagement since school was out of seesion. Also, fall had higher engagement scores than the spring likely because the school systems had figured out how to more effective utilize digital platforms.\n<\/p>","eb7cd818":"<div class=\"h3\">Analyzing Successful Educational Products For All Students<\/div>\n<br>\n<p>\nThe first barpolar chart show the most used products across the whole U.S. and the second chart shows the most used products in districts with 80 to 100 percent of its students on free and reduced lunch.\n<br>\nThe charts show the 7 most used tools. The longer the bar is, the more engagement there is. When you hover over the bar, the r value shows the avg number of engagement that product got.\n<br>\n<br>\nBy far, the most used product in both these charts was Google Docs followed by Google Classroom. This is likely because products such as Google Docs are free and easy to use. Other products such as Canvas were commonly used likely because they could act as a hub for teachers to put assignments on. However, Canvas was not as commonly used in lower income areas likely because it costed more money. In area with more students on free and reduced lunch, more free products such as Kahoot were used.\n<\/p>","ec9eb9da":"<div class=\"h1\">Geospatial Analysis<\/div>\n\n<br>\n<div class=\"h3\">Mapping Engagement and COVID-19 Cases<\/div>\n<br>\n<p>\nThe 8 maps below show the geospatial landscape of engagement and cases. The first column shows avg total engagement, and the second column shows avg COVID-19 cases per day. The 4 rows show the different segments of the year mentioned in the time series portion.\n<br>\nThere does not appear to be much correlation between location and engagement or cases.\n<\/p>","2e6001c6":"<div class=\"h1\">Preprocessing<\/div>\n\n<br>\n<div class=\"h3\">Preprocessing Overview<\/div>\nThe code below sets up the analysis by preforming the following steps: \n<ol>\n  <li>Preprocess products dataframe by segmenting the sectors column and filling null values with \"unknown\"<\/li>   \n  <li>Preprocess districts dataframe by formatting categorical variables and filling null values with \"unknown\"<\/li>\n  <li>Linking each row in the districts dataframe to its engagement dataframe<\/li>\n  <li>Transforming all string dates to datetimes<\/li>\n  <li>Shifting the cumulative cornavirus cases dataframe to get a daily dataframe<\/li>\n  <li>Generating python dictionaries that map places with different characteristics to data about their engagement and coronavirus cases<\/li>\n  <li>Creating dataframes to analyze different educational products<\/li>\n  <li>Creating dataframes that represent engagement and coronavirus cases for the entire U.S.<\/li>\n<\/ol>","b44f3d48":"<div class=\"h1\">Socioeconomic Analysis<\/div>\n\n<br>\n<div class=\"h3\">Charting Engagement Across Different Cultural and Economic Groups<\/div>\n<br>\n<p>\nThe bar chart on the left shows the engagement compared in districts with different percents of black and hispanic populations, and the bar chart on the right shows engagement compared in districts with different percents of students on free and reduced lunch. In order to account for outliers, I am only looking at engagement levels from the most used products in a given district.\n<br>\n<br>\nOverall, there seems to be a general trend in which districts with greater percents of black and hispanic population and greater percents of free and reduced lunch students have lower engagement. There are some exceptions that could be accurate or due to a small sample size.\n<\/p>","d45d9b27":"<div class=\"h3\">Visualizing the Sample Size<\/div>\n<br>\n<p>\nAll visualizations and conclusions drawn from this data are based on this sample. As a result, the charts could vary if the dataset included data from different states, represented a different proportion of locales, or represented a different proportion of age groups.\n<\/p>","648fb0ed":"<div class=\"h3\">What is Engagement Index<\/div>\n<br>\n<p>\nThroughout this analysis, 2 common measurements I will be using are Engagement Index and COVID-19 Cases. \n<br>\nCOVID-19 Cases is the quantity of coronavirus cases.\nEngagement Index is a measurement of student engagement based on the equation below:\n<br>\n    <b>Engagement index = total page load events \/ 1000 students of a given product on that day<\/b>\n<\/p>"}}