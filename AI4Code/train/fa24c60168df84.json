{"cell_type":{"4fec5de4":"code","096ad808":"code","c9b0eb83":"code","d9b13d65":"code","48c60339":"code","73437a43":"code","e17b184c":"code","1fe1a2b1":"code","79b15c04":"code","e3c5c8de":"code","330e15aa":"code","d2cc7b59":"code","dd52a0da":"code","299eb44f":"code","c0e4811c":"code","d73789c0":"code","5f91a32d":"code","4c22436c":"code","15be4512":"code","3e057409":"code","4e1a379b":"code","ccb71af8":"code","ea7d8c5c":"code","48da96f3":"code","8f183973":"code","10026b69":"code","2ac3ee3b":"code","794bea33":"code","b6d712e5":"code","c6f4108a":"code","18bc9d27":"code","5a1c4237":"code","f532a7dc":"code","987c87e0":"code","c532204e":"code","c0c78f0b":"code","b3cfb9c4":"code","8d22a45b":"code","3edb3fbd":"code","379448e0":"code","bdc7642a":"code","6ad2d3ee":"code","4aa1c89b":"code","3ced10ba":"code","64a6c5de":"code","4e109bd4":"code","ddd548d0":"code","2efa2e82":"code","8560b788":"code","518f4130":"code","831b3fa5":"code","7e5d8554":"code","1576b2d5":"code","660938bb":"code","07887a1a":"code","dd5e206d":"code","65c18256":"code","1a48486e":"code","0b89c2f4":"code","d6200d7b":"code","9203f8d5":"code","dd430f5c":"code","8c58f06f":"code","66dd0a59":"code","25c963ca":"code","7db87002":"code","3c791dcd":"code","93d017f5":"code","ce88bed4":"code","5922b2bd":"code","7ca7246e":"code","8dd6bcb5":"code","0bfbcee9":"code","fb68b890":"code","1a4c18bb":"code","67faf2cd":"code","e026460b":"code","a9322d78":"code","c362f4ed":"code","5ac1a2bb":"code","e2bf0b6d":"code","0edb4cd9":"code","2f04be2d":"code","1ca57ecd":"markdown","c32adcc8":"markdown","ac3e8266":"markdown","a0e2127c":"markdown","3d0654df":"markdown","2b3ab65e":"markdown","9fb684d1":"markdown","054bc547":"markdown","3d7029b0":"markdown","fc9c75cd":"markdown","bab4a3a0":"markdown","db067fc0":"markdown","70ac5a56":"markdown","4c46ab1d":"markdown","28cabfea":"markdown","b57665f3":"markdown","2bca6e37":"markdown","2e0bd23f":"markdown","a74b7690":"markdown","359b3ca3":"markdown","ecc1a00d":"markdown","49850efa":"markdown","5241b54c":"markdown","75e3074c":"markdown","3360dd1a":"markdown","1b625d93":"markdown","64e83c93":"markdown","55c97b74":"markdown","4c24717a":"markdown","22b28a49":"markdown","8bb1e4f6":"markdown","ea170057":"markdown","9b1eca9f":"markdown","6c5427a7":"markdown","f2592466":"markdown","06d3af9b":"markdown","487bda90":"markdown","00aada48":"markdown","77eaee3f":"markdown","5ec0c70a":"markdown","6276cdea":"markdown","832c845d":"markdown","a40e7c5d":"markdown","6496d8b6":"markdown","b11d7556":"markdown"},"source":{"4fec5de4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nsns.set(style=\"darkgrid\")\nimport matplotlib.pyplot as plt\n#plt.style.use('ggplot')\nfrom matplotlib.pyplot import figure\nfrom scipy import stats\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","096ad808":"train_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ngender_data = pd.read_csv(\"\/kaggle\/input\/titanic\/gender_submission.csv\")","c9b0eb83":"display('Train Data:',train_data.head(), 'Test Data:',test_data.head(), 'Gender Data:',gender_data.head())","d9b13d65":"# Merging gender table and test table to dataframe 'gender_test'\nleft = gender_data\nright = test_data\n\ngender_test = pd.merge(left, right, on=[\"PassengerId\"])\ngender_test","48c60339":"# Merging the created dataframe 'gender_test' to the existing dataframe 'train_data'\ndf = pd.concat([train_data, gender_test])\ndf","73437a43":"#Show all column names\ndf.columns.tolist()","e17b184c":"#Overview about Columns, Range, Non-Null Value Counts, Memory Usage and Data Types (#df.dtpyes)\ndf.info()","1fe1a2b1":"# Counting rows and coulums\ncol_row = df.shape\nprint('Columns in dataset:', col_row[1],'\\nRows in dataset:', col_row[0])","79b15c04":"# Total cells in the dataset\ntotal_cells=np.product(df.shape)\nprint('Total cells in this dataset:',total_cells)","e3c5c8de":"df.duplicated().sum()","330e15aa":"df.loc[train_data.duplicated(keep=False)]","d2cc7b59":"# Find the amount of missing values in each column\nmissing_values = df.isnull().sum().sort_values(ascending=False)\nmissing_values","dd52a0da":"# Calculating the percentage of missing values:\n\n# 1. Set variables for total amount of cells and total amount of missing data\ntotal_missing = missing_values.sum()\n\n# 2. Calculating percent of data that is missing\npercent_missing = (total_missing\/total_cells) * 100\n\nprint(\"Total missing values: {}  =  {:.2f} %\".format(total_missing, percent_missing))","299eb44f":"number_missing = df.isnull().sum().sort_values(ascending=False)\npct_column = (df.isnull().sum() \/ len(df) * 100).round(2).astype('str')+' %'\npct_total = (df.isnull().sum()\/df.isna().sum().sum()*100).round(2).astype('str')+' %'\nmissing_values = pd.concat([number_missing, pct_column, pct_total], axis=1, keys=['Number_Missing_Values', 'PCT_Missing_in_Column','PCT_of_all_Missing'])\n   \nprint('\\nMISSING VALUES IN',df.shape[0],'ROWS:')    \nall_missing = missing_values.loc[missing_values['Number_Missing_Values'] > 0]\nall_missing","c0e4811c":"# Detect missing values\nmissing = df.isnull()\n\n# Visualisation\nplt.figure(figsize=(15,5), dpi=100)\nsns.heatmap(missing,yticklabels=False, cbar=False, cmap=None)\nplt.title('MISSING VALUES', size=17, pad=13)\nplt.show()","d73789c0":"# Only two values are missing in the 'Embarked' column. Let's check the corresponding rows.\ndf[pd.isnull(df.Embarked)]","5f91a32d":"# Checking and counting the values in the 'Embarked' column.\ndf['Embarked'].value_counts()","4c22436c":"# As only two values are missing (0.22%), I decided to replace them by the most listed value.\ndf[\"Embarked\"] = df[\"Embarked\"].fillna(\"S\")","15be4512":"# ... and if the values have benn replaced by 'S'\ndf['Embarked'].value_counts()","3e057409":"# Deleting the column\ndf.drop(\"Cabin\", axis=1, inplace=True)","4e1a379b":"# Checking if the columns \"Embarked\" and \"Cabin\" are deleted\ntrain_data.head()","ccb71af8":"df.Age.describe().to_frame()","ea7d8c5c":"# The histogramm shows the age distribution of all passengers\ndf['Age'].hist(bins=16, color='purple' ,figsize=(16,7))\nplt.title('Age Distribution of all passengers', size=17, pad=13)\nplt.xlabel('Age')\nplt.ylabel('Count')\nplt.grid(True)","48da96f3":"plt.figure(figsize=(10,6), dpi=75)\nsns.boxplot(x=\"Age\", data=train_data, color='purple')\nplt.title('Age Boxplot', size=17, pad=13)\nplt.show()","8f183973":"# Mean age vs. median\ndisplay(df.Age.mean())\ndisplay(df.Age.median())","10026b69":"# Grouping Column 'Sex' to see the average age or women and men\ngrouped_sex_age = df.groupby(['Sex']).Age.agg([len, min, max, 'mean', 'median'])\ngrouped_sex_age","2ac3ee3b":"# Grouping the 'Pclass' to see if the average age changes from class to class\ngrouped_class_age = df.groupby(['Pclass']).Age.agg([len, min, max, 'mean', 'median'])\ngrouped_class_age","794bea33":"# Checking the (aveage) age and amount of people for each class and sex\ngrouped_sex_pclass_age = train_data.groupby(['Sex', 'Pclass']).Age.agg([len, min, max, 'mean', 'median'])\ngrouped_sex_pclass_age","b6d712e5":"# Checking the age and amount of people for each class and sex and SibSp\ngrouped_sex_pclass_age = df.groupby(['Pclass', 'SibSp']).Age.agg([len, min, max, 'mean', 'median'])\ngrouped_sex_pclass_age","c6f4108a":"fem_p1_s0 =df.loc[(df.Sex == 'female') & (df.Pclass == 1) & (df.SibSp == 0)].Age.median()\nfem_p1_s1 =df.loc[(df.Sex == 'female') & (df.Pclass == 1) & (df.SibSp == 1)].Age.median()\nfem_p1_s2 =df.loc[(df.Sex == 'female') & (df.Pclass == 1) & (df.SibSp == 2)].Age.median()\nfem_p1_s3 =df.loc[(df.Sex == 'female') & (df.Pclass == 1) & (df.SibSp == 3)].Age.median()\nfem_p2_s0 =df.loc[(df.Sex == 'female') & (df.Pclass == 2) & (df.SibSp == 0)].Age.median()\nfem_p2_s1 =df.loc[(df.Sex == 'female') & (df.Pclass == 2) & (df.SibSp == 1)].Age.median()\nfem_p2_s2 =df.loc[(df.Sex == 'female') & (df.Pclass == 2) & (df.SibSp == 2)].Age.median()\nfem_p2_s3 =df.loc[(df.Sex == 'female') & (df.Pclass == 2) & (df.SibSp == 3)].Age.median()\nfem_p3_s0 =df.loc[(df.Sex == 'female') & (df.Pclass == 3) & (df.SibSp == 0)].Age.median()\nfem_p3_s1 =df.loc[(df.Sex == 'female') & (df.Pclass == 3) & (df.SibSp == 1)].Age.median()\nfem_p3_s2 =df.loc[(df.Sex == 'female') & (df.Pclass == 3) & (df.SibSp == 2)].Age.median()\nfem_p3_s3 =df.loc[(df.Sex == 'female') & (df.Pclass == 3) & (df.SibSp == 3)].Age.median()\nfem_p3_s4 =df.loc[(df.Sex == 'female') & (df.Pclass == 3) & (df.SibSp == 4)].Age.median()\nfem_p3_s5 =df.loc[(df.Sex == 'female') & (df.Pclass == 3) & (df.SibSp == 5)].Age.median()\nfem_p3_s8 =df.loc[(df.Sex == 'female') & (df.Pclass == 3) & (df.SibSp == 8)].Age.median()\nmale_p1_s0 =df.loc[(df.Sex == 'male') & (df.Pclass == 1) & (df.SibSp == 0)].Age.median()\nmale_p1_s1 =df.loc[(df.Sex == 'male') & (df.Pclass == 1) & (df.SibSp == 1)].Age.median()\nmale_p1_s2 =df.loc[(df.Sex == 'male') & (df.Pclass == 1) & (df.SibSp == 2)].Age.median()\nmale_p1_s3 =df.loc[(df.Sex == 'male') & (df.Pclass == 1) & (df.SibSp == 3)].Age.median()\nmale_p2_s0 =df.loc[(df.Sex == 'male') & (df.Pclass == 2) & (df.SibSp == 0)].Age.median()\nmale_p2_s1 =df.loc[(df.Sex == 'male') & (df.Pclass == 2) & (df.SibSp == 1)].Age.median()\nmale_p2_s2 =df.loc[(df.Sex == 'male') & (df.Pclass == 2) & (df.SibSp == 2)].Age.median()\nmale_p3_s0 =df.loc[(df.Sex == 'male') & (df.Pclass == 3) & (df.SibSp == 0)].Age.median()\nmale_p3_s1 =df.loc[(df.Sex == 'male') & (df.Pclass == 3) & (df.SibSp == 1)].Age.median()\nmale_p3_s2 =df.loc[(df.Sex == 'male') & (df.Pclass == 3) & (df.SibSp == 2)].Age.median()\nmale_p3_s3 =df.loc[(df.Sex == 'male') & (df.Pclass == 3) & (df.SibSp == 3)].Age.median()\nmale_p3_s4 =df.loc[(df.Sex == 'male') & (df.Pclass == 3) & (df.SibSp == 4)].Age.median()\nmale_p3_s5 =df.loc[(df.Sex == 'male') & (df.Pclass == 3) & (df.SibSp == 5)].Age.median()\nmale_p3_s6 =df.loc[(df.Sex == 'male') & (df.Pclass == 3) & (df.SibSp == 6)].Age.median()\nmale_p3_s8 =df.loc[(df.Sex == 'male') & (df.Pclass == 3) & (df.SibSp == 8)].Age.median()","18bc9d27":"# Filling missing values with average age of women and men in each class\ndef myfunc(age, pclass, sex, SibSp):\n    if pd.isnull(age) and pclass==1 and sex == 'female' and SibSp == 0:\n        age=fem_p1_s0\n    elif pd.isnull(age) and pclass==1 and sex == 'female' and SibSp == 1:\n        age=fem_p1_s1\n    elif pd.isnull(age) and pclass==1 and sex == 'female' and SibSp == 2:\n        age=fem_p1_s2\n    elif pd.isnull(age) and pclass==1 and sex == 'female' and SibSp == 3:\n        age=fem_p1_s3      \n    elif pd.isnull(age) and pclass==2 and sex == 'female' and SibSp == 0:\n        age=fem_p2_s0\n    elif pd.isnull(age) and pclass==2 and sex == 'female' and SibSp == 1:\n        age=fem_p2_s1\n    elif pd.isnull(age) and pclass==2 and sex == 'female' and SibSp == 2:\n        age=fem_p2_s2\n    elif pd.isnull(age) and pclass==2 and sex == 'female' and SibSp == 3:\n        age=fem_p2_s3\n    elif pd.isnull(age) and pclass==3 and sex == 'female' and SibSp == 0:\n        age=fem_p3_s0\n    elif pd.isnull(age) and pclass==3 and sex == 'female' and SibSp == 1:\n        age=fem_p3_s1\n    elif pd.isnull(age) and pclass==3 and sex == 'female' and SibSp == 2:\n        age=fem_p3_s2\n    elif pd.isnull(age) and pclass==3 and sex == 'female' and SibSp == 3:\n        age=fem_p3_s3\n    elif pd.isnull(age) and pclass==3 and sex == 'female' and SibSp == 4:\n        age=fem_p3_s4\n    elif pd.isnull(age) and pclass==3 and sex == 'female' and SibSp == 5:\n        age=fem_p3_s5  \n    elif pd.isnull(age) and pclass==3 and sex == 'female' and SibSp == 8:\n        age=df.Age.median()  \n    elif pd.isnull(age) and pclass==1 and sex == 'male' and SibSp == 0:\n        age=male_p1_s0\n    elif pd.isnull(age) and pclass==1 and sex == 'male' and SibSp == 1:\n        age=male_p1_s1\n    elif pd.isnull(age) and pclass==1 and sex == 'male' and SibSp == 2:\n        age=male_p1_s2\n    elif pd.isnull(age) and pclass==1 and sex == 'male' and SibSp == 3:\n        age=male_p1_s3      \n    elif pd.isnull(age) and pclass==2 and sex == 'male' and SibSp == 0:\n        age=male_p2_s0\n    elif pd.isnull(age) and pclass==2 and sex == 'male' and SibSp == 1:\n        age=male_p2_s1\n    elif pd.isnull(age) and pclass==2 and sex == 'male' and SibSp == 2:\n        age=male_p2_s2   \n    elif pd.isnull(age) and pclass==3 and sex == 'male' and SibSp == 0:\n        age=male_p3_s0\n    elif pd.isnull(age) and pclass==3 and sex == 'male' and SibSp == 1:\n        age=male_p3_s1\n    elif pd.isnull(age) and pclass==3 and sex == 'male' and SibSp == 2:\n        age=male_p3_s2\n    elif pd.isnull(age) and pclass==3 and sex == 'male' and SibSp == 3:\n        age=male_p3_s3\n    elif pd.isnull(age) and pclass==3 and sex == 'male' and SibSp == 4:\n        age=male_p3_s4\n    elif pd.isnull(age) and pclass==3 and sex == 'male' and SibSp == 5:\n        age=male_p3_s5\n    elif pd.isnull(age) and pclass==3 and sex == 'male' and SibSp == 6:\n        age=male_p3_s6\n    elif pd.isnull(age) and pclass==3 and sex == 'male' and SibSp == 8:\n        age=male_p3_s8 \n    else:\n        age=age\n    return age","5a1c4237":"# Creating a new columns 'Age_Filled_Na' with the new average age values \ndf['Age_Filled'] = df.apply(lambda x: myfunc(x['Age'], x['Pclass'], x['Sex'], x['SibSp']), axis=1)","f532a7dc":"# Checking the new column and values\ndf.head()","987c87e0":"# Finally checking if there is any missing data in the new column 'Age_Filled_Na'\ndf.Age_Filled.isnull().sum()","c532204e":"# The histogramm shows the age distribution of all passengers after replacing the missing values\ndf['Age_Filled'].hist(bins=16, color='purple' ,figsize=(16,8))\nplt.title('Age Distribution of all passengers')\nplt.xlabel('Age')\nplt.ylabel('Count')\nplt.grid(True)","c0c78f0b":"# Drop whole row with NaN in \"price\" column\ndf.dropna(subset=[\"Fare\"],axis=0 , inplace=True)\n\n# Reset index, because two rows were dropped\ndf.reset_index(drop=True, inplace=True)\n\ndf[pd.isnull(df['Fare'])]","b3cfb9c4":"df.describe(include='all')","8d22a45b":"# Checking data types\ndf.info()","3edb3fbd":"# Creating a new column 'SexNo' with the values '1' for 'female' and '0' for 'male'\ndf['Sex_Number'] = np.where((df['Sex'] == \"female\"), 1, 0)\n# Checking if the column 'SexNo' has been added\ndf.head()","379448e0":"# Correlation table including the new column 'SexNo'\ncorrelation = df.corr()\ncorrelation","bdc7642a":"# Visualisation of the corralation table\nplt.figure(figsize=(12,8), dpi=77)\nsns.heatmap(correlation, linecolor='white',linewidths=0.1, annot=True)\nplt.title('Correlation Matrix'.upper(), size=19, pad=13)\nplt.xlabel('Titanic Data')\nplt.ylabel('Titanic Data')\nplt.xticks(rotation=33)\nplt.show()","6ad2d3ee":"# Correlation and P-value of 'Survived' and 'Sex'\npearson_coef, p_value = stats.pearsonr(df['Survived'], df['Sex_Number'])\nprint(\"The Pearson Correlation Coefficient is\", pearson_coef, \" with a P-value of P =\", p_value)","4aa1c89b":"# Correlation and P-value of 'Survived' and 'Fare'\npearson_coef, p_value = stats.pearsonr(df['Survived'], df['Fare'])\nprint(\"The Pearson Correlation Coefficient is\", pearson_coef, \" with a P-value of P =\", p_value)","3ced10ba":"# Correlation and P-value of 'Survived' and 'Pclass'\npearson_coef, p_value = stats.pearsonr(df['Survived'], df['Pclass'])\nprint(\"The Pearson Correlation Coefficient is\", pearson_coef, \" with a P-value of P =\", p_value)","64a6c5de":"df[[\"Age_Filled\",\"Fare\"]].corr()","4e109bd4":"# Calculating the P-vau\npearson_coef, p_value = stats.pearsonr(df['Age_Filled'], df['Fare'])\nprint(\"The Pearson Correlation Coefficient is\", pearson_coef, \" with a P-value of P =\", p_value)","ddd548d0":"plt.figure(figsize=(16,8))\nsns.regplot(x=\"Fare\", y=\"Age_Filled\",data=df, scatter_kws={'color':'blue'}, line_kws={'color':'orange'}, marker='*')\nplt.title('Relationship between Fare and Age')\nplt.ylabel('Age')\nplt.ylim(0.1,)","2efa2e82":"plt.figure(figsize=(20,8), dpi=75)\nsns.scatterplot(x='Age_Filled', y='Fare', hue='Sex', data = df)\nplt.title('Relationship between Age and Fare', size=17, pad=13)\nplt.show()","8560b788":"male = (df['Sex'] == 'male').sum()\nfemale = (df['Sex']== 'female').sum()\nproportions = [male,female]\n\nplt.figure(figsize=(12,8), dpi=77)\nplt.pie(proportions, data=df, labels= ['Males', 'Females'], explode = (0.05,0), startangle=90, autopct='%1.1f%%', shadow=False)\nplt.axis('equal')\nplt.title(\"Sex Proportion\", size=17, pad=13)\nplt.show()","518f4130":"# How many people survived ('Survived' == 0)\nsurvived_data=df.Survived.value_counts().to_frame()\nsurvived_data","831b3fa5":"pd.pivot_table(df, index=\"Survived\", values=['Pclass','Age_Filled','SibSp', 'Parch', 'Fare'])\n","7e5d8554":"# Amount and average age of people who survived compared to those who died.\ndf.groupby(['Survived']).Age.agg([len,min, max,'mean', 'median'])","1576b2d5":"# Age comparision of the people who survived and those who died using a boxplot. \nplt.figure(figsize=(10,8), dpi=77)\nsns.boxplot(x=\"Survived\", y=\"Age_Filled\", data=df)\nplt.title(\"Comparison: Age of People who died \/ survived\", size=17, pad=13)\nplt.ylabel('Age')\nplt.xlabel(' ')\nplt.xticks([0, 1], ['Not Survived', 'Survived'])\nplt.show()","660938bb":"# The barplot compares the survival of men to women\nplt.figure(figsize=(10,8), dpi=77)\nsns.barplot(x=\"Sex\", y=\"Survived\", data=df)\nplt.title(\"Survivors - Male & Female\", size=17, pad=13 )\nplt.show()","07887a1a":"# Sex and Age compared with Survived and Not Survived\ng = sns.FacetGrid(df, col='Survived', sharey=False, ylim=(0,80), hue='Sex', height=7, aspect=1.1)\ng.map_dataframe(sns.histplot, x='Age')\ng.set_axis_labels('Age', 'Count')\ng.add_legend()\nplt.show()","dd5e206d":"plt.figure(figsize=(10,8), dpi=77)\nsns.countplot(x=df['Sex'],hue=df['Survived'])\nplt.title(\"Comparison: Survivors - Male & Female\", size=17, pad= 13)\nplt.legend(['Not Survived', 'Survived'], loc='upper right', prop={'size': 12})\nplt.show()","65c18256":"# Amount and average age of women and man who survived compared to those who died.\ndf.groupby(['Sex','Survived']).Age.agg([len,'mean', 'median'])","1a48486e":"# Percentage of women who survived\nwomen = df.loc[df.Sex == 'female'][\"Survived\"]\nrate_women = sum(women)\/len(women)*100\n\nprint(\"% of women who survived: {:.2f}\".format(rate_women))","0b89c2f4":"# Percentage of men who survived\nmen = df.loc[df.Sex == 'male'][\"Survived\"]\nrate_men = sum(men)\/len(men)*100\n\nprint(\"% of men who survived: {:.2f}\".format(rate_men))","d6200d7b":"df['Pclass'].value_counts()","9203f8d5":"df.groupby(['Pclass', 'Survived']).Age.agg([len])","dd430f5c":"# Compares the chance of survival for each ticket class\nplt.figure(figsize=(10,8), dpi=77)\nsns.barplot(x=\"Pclass\", y=\"Survived\", data=df)\nplt.title(\"Chance of Survival for each Ticket Class\", size=17, pad=13)\nplt.show()","8c58f06f":"# Survived and not survived compared for each ticket class\nplt.figure(figsize=(10,8), dpi=77)\nsns.countplot(x=df['Pclass'],hue=df['Survived'])\nplt.title(\"Comparison: Survivors - Ticket Class\", size=17, pad=13)\nplt.legend(['Not Survived', 'Survived'], loc='upper left', prop={'size': 12})\nplt.show()","66dd0a59":"# Amount and average age of women and man of each class who survived compared to those who died.\ndf.groupby(['Sex','Survived', 'Pclass']).Age.agg([len,min, max,'mean'])","25c963ca":"df['Parch'].value_counts().to_frame()","7db87002":"plt.figure(figsize=(12,6), dpi=77)\nsns.barplot(x=\"Parch\", y=\"Survived\", data=df)\nplt.title(\"Chance of Survival for Passengers with Parents or Children\", size=17, pad=13)\nplt.xlabel('Number of Parents \/ Children')\nplt.show()","3c791dcd":"plt.figure(figsize=(12,8), dpi=77)\nsns.countplot(x=df['Parch'],hue=df['Survived'])\nplt.title(\"Survived - Parents or Children\", size=17, pad=12)\nplt.legend(['Not Survived', 'Survived'], loc='upper right', prop={'size': 12})\nplt.xlabel('Parents \/ Children')\nplt.show()","93d017f5":"# Age of people with parents or children\ndf.groupby(['Parch','Survived']).Age.agg([len, min, max])","ce88bed4":"df.SibSp.value_counts()\n","5922b2bd":"df.groupby(['SibSp','Survived']).Age.agg([len, 'mean'])","7ca7246e":"# This barplot compares the chance of survival within a category\nplt.figure(figsize=(12,6), dpi=77)\nsns.barplot(x=\"SibSp\", y=\"Survived\", data=df)\nplt.title(\"Chance of Survival for Passengers with Siblings or Spouses\", size=17, pad=13)\nplt.xlabel('Number of Siblings \/ Spouses')\nplt.show()","8dd6bcb5":"plt.figure(figsize=(12,8), dpi=77)\nsns.countplot(x=df['SibSp'],hue=df['Survived'])\nplt.title(\"Survived - Siblings or Spouses\", size=17, pad=13)\nplt.xlabel('Siblings \/ Spouses')\nplt.legend(['Not Survived', 'Survived'], loc='upper right', prop={'size': 12})\nplt.show()","0bfbcee9":"df.groupby(['SibSp','Survived']).Age.agg([len, min, max, 'mean'])","fb68b890":"plt.figure(figsize=(10,8), dpi=77)\nsns.barplot(x=\"Embarked\", y=\"Survived\", data=df)\nplt.title('Chance of Survival by Port of Embarkation', size=17, pad=13)\nplt.xlabel('Port of Embarkation', size=13)\nplt.xticks([0, 1, 2],['Southampton', 'Cherbourd', 'Queenstown'])\nplt.show()","1a4c18bb":"plt.figure(figsize=(10,8), dpi=77)\nsns.countplot(x=df['Embarked'],hue=df['Survived'])\nplt.title(\"Comparison: Survivors by Port of Embarkation\", size=17, pad=13)\nplt.xlabel('Port of Embarkation')\nplt.legend(['Not Survived', 'Survived'], loc='upper right', prop={'size': 12})\nplt.xticks([0, 1, 2],['Southampton', 'Cherbourd', 'Queenstown'])\nplt.show()","67faf2cd":"plt.figure(figsize=(12,6), dpi=77)\nsns.barplot(x=\"SibSp\", y=\"Age\", data=df)\nplt.title('Average Age of Passengers with Siblings', size=17, pad=13)\nplt.xlabel('Siblings')\nplt.show()","e026460b":"plt.figure(figsize=(12,8), dpi=77)\nsns.boxplot(x=\"Parch\", y=\"Age\", data=df)\nplt.title('Age of Passengers with Parents or Children', size=17, pad=13)\nplt.xlabel('Parents \/ Children')\nplt.show()","a9322d78":"plt.figure(figsize=(12,6), dpi=77)\nsns.barplot(x=\"Parch\", y=\"Age\", data=df)\nplt.title('Average Age of Passengers with Parents or Children', size=17, pad=12)\nplt.xlabel('Parents \/ Children')\nplt.show()","c362f4ed":"plt.figure(figsize=(12,6), dpi=77)\nsns.boxplot(x=\"Pclass\", y=\"Age\", data=df)\nplt.title('Age of Passengers for each Ticket Class', size=17, pad=13)\nplt.xlabel('Ticket Class')\nplt.show()","5ac1a2bb":"# Comparison of Pclass, Age, Sex and Survivors\ng = sns.FacetGrid(df, col='Survived', row='Pclass', sharey=False, ylim=(0,300), hue='Sex', height=7)\ng.map_dataframe(sns.scatterplot, x='Age', y='Fare')\ng.set_axis_labels('Age', 'Fare')\ng.add_legend()\n# g.set_titles(col_template='', row_template='')\nplt.show()","e2bf0b6d":"# Comparison of Parch, Age, Sex and Survivors\ng = sns.FacetGrid(df, col='Survived', row='SibSp', sharey=False, ylim=(0,300), hue='Sex', height=7)\ng.map_dataframe(sns.scatterplot, x='Age', y='Fare')\ng.set_axis_labels('Age', 'Fare')\ng.add_legend()\n# g.set_titles(col_template='', row_template='')\nplt.show()","0edb4cd9":"plt.figure(figsize=(20,10))\nsns.histplot(df.Fare)\nplt.title('Fares Paid', size=17, pad=13)\nplt.show()","2f04be2d":"fig, axs = plt.subplots(figsize=(22, 9))\nsns.countplot(x='Fare', hue='Survived', data=df)\nplt.xlabel('Fare', size=16, labelpad=10)\nplt.ylabel('Count', size=15, labelpad=10)\nplt.tick_params(axis='x', labelsize=13)\nplt.tick_params(axis='y', labelsize=15)\nplt.legend(['Not Survived', 'Survived'], loc='upper right', prop={'size': 15})\nplt.title('Survial compared to Fare', size=20, y=1, pad=13)\nplt.show()\n","1ca57ecd":"## Identifying duplicate values","c32adcc8":"## P-values","ac3e8266":"***\n`Survived`, `Pclass`, `Sex` and `Age`\n***","a0e2127c":"# Data Cleaning","3d0654df":"***\n`Age`\n***","2b3ab65e":"***\n`Survived` and `Parch`\n***","9fb684d1":"### Comparing multiple columns","054bc547":"#### Looking at the columns with missing data","3d7029b0":"## Continuous Numerical Variables","fc9c75cd":"![](https:\/\/cdn.pixabay.com\/photo\/2021\/03\/04\/16\/32\/ship-6068668_1280.png)","bab4a3a0":"***\n`Survived` and `Embarked`\n***","db067fc0":"# Load and View Data","70ac5a56":"# Import Lybraries","4c46ab1d":"***\n`Survived` and `Sex`\n***","28cabfea":"As **most of the data in the column \"Cabin\" is missing** (687 out of 891 values --> **77%**), and I do not need the column for my analysis I deciced to **delete the column** - deleting the rows would remove 687 useful rows.","b57665f3":"***\n`Cabin`\n***","2bca6e37":"# Introduction","2e0bd23f":"***\n`Embarked`\n***","a74b7690":"**Drop data**\n*     Drop the whole row\n*     Drop the whole column\n\n*or*\n\n**Replace data**\n*     Replace it by mean \/ median\n*     Replace it by frequency\n*     Replace it based on other functions\n\nChoosing a method based on the composition and correlation of the data and the task or goal settings.","359b3ca3":"The data type of 'Sex' is an object, which will not be visible in a correlation. I would like to include the values of the column 'Sex' into the correlation matrix by creating a new column 'Sex_Number' and set the value 'female' to '1' and 'male' to '0'","ecc1a00d":"***\n`Age` and `Parch`\n***","49850efa":"# Analysing Patterns using Visualisations","5241b54c":"The **average age** of all people on board is **29.7**. The **middle value** is **28**.\nReplacing the missing values with the mean or the median would be inacurate. I would like to find out the average age of men and women in each class and check if there is a difference and if there might be further correlations.","75e3074c":"## Categorical Variables","3360dd1a":"***\n`Survived`\n***","1b625d93":"***\n`Age` and `Fare`\n***","64e83c93":"**As the average age seem to depend on both, sex and class.**","55c97b74":"***\n`Survived` and `Pclass`\n***","4c24717a":"***\n`Survived` and `SibSp`\n***","22b28a49":"***\n`Age` and `Pclass`\n***","8bb1e4f6":"## Correlation","ea170057":"## Dealing with missing values","9b1eca9f":"***\n`Survived` and `Age`\n***","6c5427a7":"***\n`Fare`\n***","f2592466":"# Data Dictionary\n\n* **'Survival':** \t 0 = No, 1 = Yes\n* **'Pclass':** \t Ticket class \t 1 = 1st, 2 = 2nd, 3 = 3rd\n* **'Sex':** \t Sex\n* **'Age':**\t Age in years\n* **'SibSp':** \t # of siblings \/ spouses aboard the Titanic\n* **'Parch':** \t # of parents \/ children aboard the Titanic\n* **'Ticket':** \t Ticket number\n* **'Fare':** \t Passenger fare\n* **'Cabin':** \t Cabin number\n* **'Embarked':** \t Port of Embarkation \t C = Cherbourg, Q = Queenstown, S = Southampton","06d3af9b":"***\n`Age` and `SibSp`\n***","487bda90":"## Identifying missing values","00aada48":"## Visualisation of missing data","77eaee3f":"### Linear Relationship","5ec0c70a":"**This matrix shows that there is a correlation between sex and the chance to survive.** There is also a correlation between fare and the chance to survive, as well as a **negative correlation between the class and the chance to survive**.","6276cdea":"Looking for the best way to fill the missing data","832c845d":"**The average age in each class and sex is very different. There also seems to be a correlation between Age and SibSp. \nIn my opinion this needs to be considered when replacing the missing values**.","a40e7c5d":"***\n`Fare`\n***","6496d8b6":"# Titanic Dataset\nData Analysis on Titanic Data (Python)\n***","b11d7556":"***\n`Sex`\n***"}}