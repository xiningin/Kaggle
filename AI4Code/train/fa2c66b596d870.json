{"cell_type":{"f23da33c":"code","900f432e":"code","6bbcbb9c":"code","8f19dfa9":"code","b98662b9":"code","eca98f96":"code","85944d86":"code","336757fe":"code","ef378a4a":"code","8288d89b":"code","62b13b2f":"code","66ea0e45":"code","20bafbc1":"code","124bea1b":"code","507d833e":"code","5d6cbb52":"code","b5466cdb":"code","650202a8":"code","74048319":"code","95599ba9":"code","47ecf34c":"code","1c09d641":"markdown"},"source":{"f23da33c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sn\nimport matplotlib.pyplot as plt\npd.set_option('display.float_format', lambda x: '%.3f' % x)\nnp.set_printoptions(suppress=True)\n\nfrom sklearn.model_selection import train_test_split\nimport tensorflow as tf\nfrom tensorflow import keras \n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","900f432e":"train_df = pd.read_csv('\/kaggle\/input\/dont-overfit-ii\/train.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/dont-overfit-ii\/test.csv')\nsample_df = pd.read_csv('\/kaggle\/input\/dont-overfit-ii\/sample_submission.csv')\ntrain_df.drop(['id'],inplace = True,axis = 1)\n","6bbcbb9c":"print('train = {0},test = {1}, sample = {2}'.format(train_df.shape,test_df.shape,sample_df.shape))","8f19dfa9":"train_df.head()","b98662b9":"train_df.target.unique()","eca98f96":"test1_df = test_df.copy()\ntest1_df['target'] = -1.0","85944d86":"full_df = train_df.append(test1_df,sort = False)","336757fe":"full_df.shape","ef378a4a":"correlation_mat = full_df.corr()\ncorr_np = correlation_mat.to_numpy()\nnp.fill_diagonal(corr_np,0)\nnp.where(corr_np > 0.7)","8288d89b":"train_df.target.value_counts()","62b13b2f":"train_df.target.value_counts().plot(kind = 'bar')","66ea0e45":"X_train, X_test, y_train, y_test = train_test_split(train_df.loc[:, train_df.columns != 'target'], train_df.loc[:,'target'])","20bafbc1":"def normalize(array):\n    return (array - array.mean())\/array.std()","124bea1b":"train_df_norm = normalize(train_df)","507d833e":"X_train_norm = normalize(X_train)\ny_train_norm = normalize(y_train)","5d6cbb52":"(X_train_norm.shape)","b5466cdb":"from tensorflow.keras import regularizers\nfrom tensorflow.keras.optimizers import RMSprop\nclass mycallbacks(tf.keras.callbacks.Callback):\n    def on_epoch_end(self,epoch,logs={}):\n        if logs.get('accuracy') and logs.get('accuracy') >= 0.998:\n            print('Reached 99% accuracy so cancelling training!')\n            self.model.stop_training = True\ncallbacks = mycallbacks()\nmodel = keras.Sequential([\n                    keras.layers.Dense(units = 8 ,input_shape = [X_train.shape[1]], activation = 'relu'),\n                    keras.layers.Dropout(0.1),\n                    keras.layers.Dense(units = 16 ,input_shape = [X_train.shape[1]], activation = 'relu'),\n                    keras.layers.Dropout(0.1),\n                    keras.layers.Dense(units = 32 ,input_shape = [X_train.shape[1]], activation = 'relu'),\n                    keras.layers.Dropout(0.1),\n                    keras.layers.Dense(units = 64 ,input_shape = [X_train.shape[1]], activation = 'relu'),\n                    keras.layers.Dropout(0.1),\n                    keras.layers.Dense(units = 1, activation = 'sigmoid')])\nmodel.compile(optimizer = RMSprop(lr = 0.01),loss = 'binary_crossentropy',metrics=['accuracy'])\n","650202a8":"model.summary()","74048319":"history = model.fit(train_df.loc[:, train_df.columns != 'target'],train_df.loc[:,'target'],validation_split= 0.4,epochs = 150)","95599ba9":"# summarize history for loss\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","47ecf34c":"predictions = model.predict(test_df.loc[:,test_df.columns != 'id'])\nprediction = pd.DataFrame(predictions, columns=['target'])\npd.concat([test_df[['id']].astype('int'),prediction[['target']].astype('int')], axis=1).to_csv('results.csv',header = True,index = False)","1c09d641":"No Correlations between the variables"}}