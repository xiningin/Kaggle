{"cell_type":{"8bcc406f":"code","4bc41362":"code","cbdb8c9f":"code","ea78c071":"code","4d06ab2d":"code","4f19b328":"code","5a4e406b":"code","c0b40da0":"markdown","a663bf86":"markdown","885413ab":"markdown","74ad8569":"markdown","86b55d1d":"markdown","dc232ff6":"markdown"},"source":{"8bcc406f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4bc41362":"import pandas as pd\nfrom sklearn.preprocessing import normalize\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import f1_score\nfrom nltk.stem import WordNetLemmatizer\nfrom nltk.corpus import stopwords\nimport re","cbdb8c9f":"# Regular expressions\nNEWLINE_RE = r\"<\\w{1,}\\s{1,}\/>\" # html\nNOT_WORD = r\"\\W\" # special char\nSINGLE_CHAR = r\"\\^[a-zA-Z]\\s+\" # single chars\nMULT_SPACE = r\"\\s+\" # mult spaces -> one space\n\n# Read data\ndata = pd.read_csv(\"\/kaggle\/input\/text-classification-int20h\/train.csv\")\ntest = pd.read_csv('\/kaggle\/input\/text-classification-int20h\/test.csv')\nsubmission = pd.read_csv('\/kaggle\/input\/text-classification-int20h\/submission.csv')","ea78c071":"# Remove redundant substrings\ndef cleaner(string, regex, subst):\n    string = re.sub(regex, subst, string)\n    return string\n\ndef less3(string):\n    string = string.split(\" \")\n    new_string = []\n    for i in range(len(string)):\n        if len(string[i]) > 2:\n            new_string.append(string[i])\n    return \" \".join(new_string)\n\nstemmer = WordNetLemmatizer()\n\ndef stm(string, stemmer):\n    string = string.lower().split(\" \")\n    new_string = [stemmer.lemmatize(x) for x in string]\n    return \" \".join(new_string)\n\ndata[\"review\"] = data[\"review\"].apply(cleaner, args = (NEWLINE_RE, \" \"))\ndata[\"review\"] = data[\"review\"].apply(cleaner, args = (NOT_WORD, \" \"))\ndata[\"review\"] = data[\"review\"].apply(cleaner, args = (MULT_SPACE, \" \"))\ndata[\"review\"] = data[\"review\"].apply(less3)\ndata[\"review\"] = data[\"review\"].apply(stm, args = (stemmer,))\n\ntest[\"review\"] = test[\"review\"].apply(cleaner, args = (NEWLINE_RE, \" \"))\ntest[\"review\"] = test[\"review\"].apply(cleaner, args = (NOT_WORD, \" \"))\ntest[\"review\"] = test[\"review\"].apply(cleaner, args = (MULT_SPACE, \" \"))\ntest[\"review\"] = test[\"review\"].apply(less3)\ntest[\"review\"] = test[\"review\"].apply(stm, args = (stemmer,))\n\nX = data.drop([\"sentiment\"],1)[\"review\"]\nY = data[\"sentiment\"]\nX_sub = test['review']  # for future submission","4d06ab2d":"# Vectorization data\nvectorizer = TfidfVectorizer(ngram_range=(1,4), min_df=2, max_df=0.59)\nX = vectorizer.fit_transform(X)\nX_sub = vectorizer.transform(X_sub) # for future submission\nX, X_sub = normalize(X, norm = \"max\"), normalize(X_sub, norm = \"max\")\nx_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=0.1)","4f19b328":"# Logistic Regression\nmodel = LogisticRegression(random_state = 0, solver = \"sag\", max_iter = 1000, n_jobs=-1)\nmodel.fit(x_train, y_train)\nscore = model.score(x_test, y_test)\nprint(f'Logistic Regression score -- > {score}')\ny_pred = model.predict(x_test)\ny_pred_sub = model.predict(X_sub)\nprint(f'Logistic Regression F1 score -- > {f1_score(y_pred, y_test)}')","5a4e406b":"# Write results (of Log Reg) into .csv\nsubmission['sentiment'] = y_pred_sub\nsubmission.to_csv('results.csv', index=False)","c0b40da0":"Clean the data","a663bf86":"Read the data and define constants","885413ab":"Making necessary imports","74ad8569":"Implementing the model","86b55d1d":"Vectorize","dc232ff6":"Recording results into csv"}}