{"cell_type":{"2a1b12f3":"code","7fdfbc8a":"code","ef0503ae":"code","5e793162":"code","b1eb66b2":"code","b97c3af5":"code","fde4cec4":"code","29638a76":"code","be33b78c":"code","6913de94":"code","2e788d3a":"code","fb2c73b4":"code","01180269":"code","cc7ae630":"code","9fb72326":"code","9c9fb6e8":"code","f9e5c2f4":"code","0187011a":"code","d3fe380b":"code","c5789b13":"code","f0b1e1fe":"code","4f8fcc1c":"code","59abfe13":"code","0098fd5e":"code","67c86699":"code","3c0c9e23":"code","6d90bebe":"code","96133bd9":"code","19db0a5f":"code","47950f02":"code","1d23a058":"code","f332c213":"code","8e53f7d1":"code","c10314f0":"code","4f8eabee":"code","90258e25":"code","1a3f7750":"code","da42069e":"markdown","ed65646b":"markdown","7e09c682":"markdown","a51caf66":"markdown","e2c5d66e":"markdown","458978c4":"markdown","300c4ac6":"markdown","08f637e2":"markdown","65e802e8":"markdown","f25919e3":"markdown","74e36b61":"markdown","31970925":"markdown","0ac10761":"markdown","22e99650":"markdown","631a7ba0":"markdown","66a09efc":"markdown","3c038689":"markdown","2e949d37":"markdown","e44457e4":"markdown","39593524":"markdown"},"source":{"2a1b12f3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7fdfbc8a":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","ef0503ae":"df_train = pd.read_csv('..\/input\/titanic\/train.csv')\ndf_test = pd.read_csv('..\/input\/titanic\/test.csv')","5e793162":"df_train.head()","b1eb66b2":"df_train.shape","b97c3af5":"df_train.info()","fde4cec4":"df_train.corr()","29638a76":"# Check for duplicates\n\nduplicate = df_train[df_train.duplicated()]\nduplicate","be33b78c":"# Check for missing values\n\ndf_train.isnull().sum()","6913de94":"# Replace missing values in Age column with median age\n\n# We will groupby Pclass to find the median age of passenger in each class\n\ndf_train.groupby('Pclass')['Age'].median()","2e788d3a":"# Replace with median age of each class\n\ndf_train['Age'] = np.where(df_train['Pclass']==1, 37, df_train['Age'])\ndf_train['Age'] = np.where(df_train['Pclass']==2, 29, df_train['Age'])\ndf_train['Age'] = np.where(df_train['Pclass']==3, 24, df_train['Age'])","fb2c73b4":"# Drop Cabin column\n\ndf_train.drop(['Cabin'], axis=1, inplace=True)","01180269":"# Remove remaining rows having missing values\n\ndf_train.dropna(inplace=True)","cc7ae630":"# Check for null values again\n\ndf_train.isnull().sum()","9fb72326":"# Missing values in test set\n\ndf_test.isnull().sum()","9c9fb6e8":"# Replace with median age of each class\n\ndf_test['Age'] = np.where(df_test['Pclass']==1, 37, df_test['Age'])\ndf_test['Age'] = np.where(df_test['Pclass']==2, 29, df_test['Age'])\ndf_test['Age'] = np.where(df_test['Pclass']==3, 24, df_test['Age'])","f9e5c2f4":"# Replace fare with median\n\ndf_test[df_test['Fare'].isnull()]","0187011a":"# We will groupby Pclass to find the median age of passenger in each class\n\ndf_train.groupby('Pclass')['Fare'].median()","d3fe380b":"df_test['Fare'].fillna(14.25, inplace=True)","c5789b13":"# Drop Cabin column\n\ndf_test.drop('Cabin', axis=1, inplace=True)","f0b1e1fe":"df_test.isnull().sum()","4f8fcc1c":"corr = df_train.corr()\ncorr.style.background_gradient(cmap='Purples').set_precision(2)","59abfe13":"# Number of passengers survived in each class\n\nsns.countplot(data=df_train, x='Survived', hue='Pclass')","0098fd5e":"# Fare distribution of each class\n\nsns.stripplot(x=\"Pclass\", y=\"Fare\", data=df_train)\nplt.legend(df_train.Pclass.value_counts().index)\nplt.title(\"Fare vs Pclass\")\nplt.show()","67c86699":"# Plot of Embarked\n\nsns.countplot(data=df_train, x='Embarked')","3c0c9e23":"# Male and female passengers who survived\n\nsns.countplot(data=df_train, x='Survived', hue='Sex')","6d90bebe":"sns.kdeplot(x='Age', hue='Survived', data=df_train, fill=True)","96133bd9":"# Drop columns in train and test data\n\ncol_train=['PassengerId', 'Name', 'Ticket']\ndf_train.drop(col_train, axis=1, inplace=True)\n\ncol_test=['Name', 'Ticket']\ndf_test.drop(col_test, axis=1, inplace=True)","19db0a5f":"df_train.columns","47950f02":"df_test.columns","1d23a058":"# Encoding categorical variables\n\n# for encoding\nfrom sklearn.preprocessing import LabelEncoder\n\ndef label_encoding(feature):\n    le = LabelEncoder()\n    le.fit(feature)\n    print(feature.name, le.classes_)\n    return le.transform(feature)","f332c213":"# Train data\ncols = ['Sex', 'Embarked']\nfor col in cols:\n    df_train[col] = label_encoding(df_train[col])","8e53f7d1":"# Test data\nfor col in cols:\n    df_test[col] = label_encoding(df_test[col])","c10314f0":"# Separate independent and dependent variables\n\nX_train = df_train.drop(['Survived'], axis=1, inplace=False)\ny_train = df_train['Survived']\n\nX_test = df_test.drop(['PassengerId'], axis=1, inplace=False)","4f8eabee":"from sklearn.tree import DecisionTreeClassifier\n\ndt = DecisionTreeClassifier()\ndt.fit(X_train, y_train)","90258e25":"y_pred_dt = dt.predict(X_test)\ny_pred_dt","1a3f7750":"output = pd.DataFrame({'PassengerId': df_test.PassengerId, 'Survived': y_pred_dt})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","da42069e":"**Observations:-**\n* Maximum passengers(greater than 600) boarded from Southampton.\n* More than 150 passengers boarded from Cherbourg.\n* Less than 100 passengers boarded from Queenston.","ed65646b":"# **Importing libraries**","7e09c682":"**Observations:-**\n* Most of the passengers who survived were 35 to 40 years old.\n* Followed by the age 22 to 27.","a51caf66":"**Observations:-**\n* There is a positive correlation of 0.57 between Age and Fare. It indicates that older passengers were charged more than younger passengers.\n* There is a negative correlation of 0.55 between Pclass and Fare. It menas that upper class passengers(Pclass=1) had high fare followed by middle class(Pclass=2) and lower class(Pclass=3).","e2c5d66e":"**Observations:-**\n* Median Age of passengers in class 1 is 37.\n* Median Age of passengers in class 2 is 29.\n* Median Age of passengers in class 3 is 24.","458978c4":"**Observations:-**\n* Maximum unkown records are present in Cabin column, so it's best to drop that column.\n* Missing values in Age column can be replaced by mean or median.\n* There are 2 missing values in Embarked column.","300c4ac6":"# **Loading the dataset**","08f637e2":"**Hence, all missing values are removed from training set.**","65e802e8":"**The dataset has 891 records and 12 attributes.**","f25919e3":"**Observations:-**\n* More than 200 female passengers and more than 100 male passengers survived.\n* More than 400 male passengers and less than 100 female passengers died.","74e36b61":"# **Exploratory Data Analysis**","31970925":"# **Model**","0ac10761":"**Observations:-**\n* Maximum passengers(nearly 150) who survived were from upper class.\n* Nearly 100 passengers survived from lower class followed by middle class.\n* More than 350 passengers who died where from lower class.\n* Least passengers who died were from upper class followed by middle class.","22e99650":"**The dataset doesn't have any duplicate records.**","631a7ba0":"### **1. Decision Tree Classifier**","66a09efc":"**Hence, all missing values are removed from training set.**","3c038689":"**The dataset has 2 float, 5 integer and 5 object columns.**","2e949d37":"**Observations:-**\n* Fare for upper class is between 0 to nearly 300 dollars. There are some records for which the fare is above 500 dollars.\n* For middle class and lower class the fare is between 0 to 100 dollars.","e44457e4":"## **Visualizations**","39593524":"### **Attribute Description:-**\n1. PassengerId: stores passenger's id\n2. Survived: tells whether the passenger survived or not. 0 indicates No and 1 indicates Yes.\n3. Pclass: A proxy for socio-economic status (SES) where 1 is Upper, 2 is Middle and 3 is Lower class.\n4. Name: contains the name of passenger\n5. Sex: stores the gender of passenger\n6. Age: stores the age of passenger\n7. Sibsp: stores the number of siblings or spouse aboard of each passenger\n8. Parch: stores the number of parents or children aboard of each passenger\n9. Ticket: stores the ticket number\n10. Fare: contains the ticket fare\n11. Cabin: stores the cabin number in which the passenger stayed\n12. Embarked: stores the port of embarkation. C is Cherbourg, Q is Queenston, S is Southampton"}}