{"cell_type":{"6930af3b":"code","1d428444":"code","4115ef14":"code","63b3f908":"code","ce87061e":"code","c0a20682":"code","6b0e8471":"code","2d5f4981":"code","09783aa3":"code","b0750aba":"code","792f994b":"code","82a7daec":"code","f4563d58":"code","8b16de5f":"code","f5b1582d":"code","075a38ef":"code","6843ec20":"code","ab334544":"markdown","08af1a6d":"markdown","db22c5e8":"markdown","612e105f":"markdown","620e3524":"markdown","1d56d653":"markdown","50f84219":"markdown","6e64e130":"markdown","e84c5493":"markdown","aecfdd6a":"markdown","a97ec127":"markdown","2987aed9":"markdown","98afec2e":"markdown","3a9675e1":"markdown","18b2e2bc":"markdown","ab21ff8a":"markdown","2d14d582":"markdown","8e7f5f88":"markdown","4855592a":"markdown","114d9285":"markdown","79a50504":"markdown","d70c2499":"markdown"},"source":{"6930af3b":"import tensorflow as tf # import tensor flow \nimport numpy as np\nimport keras\nfrom tensorflow.keras import layers\nimport matplotlib.pyplot as plt","1d428444":" from tensorflow.keras.datasets import boston_housing\n(train_data, train_targets), (test_data, test_targets) = boston_housing.load_data()","4115ef14":"train_data.shape, test_data.shape","63b3f908":"train_targets","ce87061e":"# Normalizing the data\n\nmean = train_data.mean(axis=0)\ntrain_data -= mean\nstd = train_data.std(axis=0)\ntrain_data \/= std\ntest_data -= mean\ntest_data \/= std","c0a20682":"# Model Defination\n\ndef build_model():\n    model = keras.Sequential([#1\n      layers.Dense(64, activation='relu'),\n      layers.Dense(64, activation='relu'),\n      layers.Dense(1)\n    ])\n    model.compile(optimizer='rmsprop', loss='mse', metrics=['mae'])\n    return model","6b0e8471":"# K-Fold Validation\nk= 4\nnum_val_samples = len(train_data) \/\/ k \nnum_epochs = 100\nall_scores = []\nfor i in range(k):\n    print('processing fold #%d' % i)\n    val_data = train_data[i * num_val_samples: (i + 1) * num_val_samples] #1\n    val_targets = train_targets[i * num_val_samples: (i + 1) * num_val_samples]\n    partial_train_data = np.concatenate( #2\n        [train_data[:i * num_val_samples],\n         train_data[(i + 1) * num_val_samples:]],\n        axis=0)\n    partial_train_targets = np.concatenate(\n        [train_targets[:i * num_val_samples],\n         train_targets[(i + 1) * num_val_samples:]],\n        axis=0)\n    model = build_model() #3\n    model.fit(partial_train_data, partial_train_targets, #4\n              epochs=num_epochs, batch_size=1, verbose=0)\n    val_mse, val_mae = model.evaluate(val_data, val_targets, verbose=0)#5\n    all_scores.append(val_mae)","2d5f4981":"all_scores","09783aa3":"np.mean(all_scores)","b0750aba":"num_epochs = 500\nall_mae_histories = []\nfor i in range(k):\n    print('processing fold #%d' % i)\n    val_data = train_data[i * num_val_samples: (i + 1) * num_val_samples]\n    val_targets = train_targets[i * num_val_samples: (i + 1) * num_val_samples]\n    partial_train_data = np.concatenate(\n        [train_data[:i * num_val_samples],\n         train_data[(i + 1) * num_val_samples:]],\n        axis=0)\n    partial_train_targets = np.concatenate(\n        [train_targets[:i * num_val_samples],\n         train_targets[(i + 1) * num_val_samples:]],\n        axis=0)\n    model = build_model()\n    history = model.fit(partial_train_data, partial_train_targets,\n                        validation_data=(val_data, val_targets),\n                        epochs=num_epochs, batch_size=1, verbose=0)\n    mae_history = history.history['val_mae']\n    all_mae_histories.append(mae_history)","792f994b":" average_mae_history = [\n    np.mean([x[i] for x in all_mae_histories]) for i in range(num_epochs)]","82a7daec":"plt.plot(range(1, len(average_mae_history) + 1), average_mae_history)\nplt.xlabel('Epochs')\nplt.ylabel('Validation MAE')\nplt.show()","f4563d58":"def smooth_curve(points, factor=0.9):\n  smoothed_points = []\n  for point in points:\n    if smoothed_points:\n      previous = smoothed_points[-1]\n      smoothed_points.append(previous * factor + point * (1 - factor))\n    else:\n      smoothed_points.append(point)\n  return smoothed_points\nsmooth_mae_history = smooth_curve(average_mae_history[10:])\nplt.plot(range(1, len(smooth_mae_history) + 1), smooth_mae_history)\nplt.xlabel('Epochs')\nplt.ylabel('Validation MAE')\nplt.show()","8b16de5f":"model = build_model()\nmodel.fit(train_data, train_targets,\n          epochs=80, batch_size=16, verbose=0)\ntest_mse_score, test_mae_score = model.evaluate(test_data, test_targets)","f5b1582d":"test_mae_score","075a38ef":"predictions = model.predict(test_data)","6843ec20":"predictions[0]","ab334544":"#### compute the average of the per-epoch MAE scores for all folds.","08af1a6d":"#### Plotting Validation Scores","db22c5e8":"1. Prepares the validation data: data from partition #k \n2. Prepares the training data: data from all other partitions \n3. Builds the Keras model (already compiled)\n4. Trains the model (in silent mode, verbose = 0) \n5. Evaluates the model on the validation data","612e105f":"#### The different runs do indeed show rather different validation scores, from 2.1 to 2.6. The average (2.2) is a much more reliable metric than any single score \u2014 that\u2019s the entire point of K-fold cross-validation. In this case, you\u2019re off by $2,200 on average, which is significant considering that the prices range from $10,000 to $50,000.\n\n#### Let\u2019s try training the model a bit longer: 500 epochs. To keep a record of how well the model does at each epoch, you\u2019ll modify the training loop to save the per-epoch validation score log.","620e3524":"#### You\u2019re still off by about $2,750.","1d56d653":"#### Gererating Prediction on new data\n\n####  this scalar regression model, predict() returns the model\u2019s guess for the sample\u2019s price in thousands dollars:","50f84219":"\n1. Prepares the validation data: data from partition #k \n2. Prepares the training data: data from all other partitions \n3. Builds the Keras model (already compiled)\n4. Trains the model (in silent mode, verbose=0)","6e64e130":"#### We will attempt to predict the median price of homes in a given Boston suburb in the mid-1970s, given data points about the suburb at the time, such as the crime rate, the local property tax rate, and so on. \n#### It has relatively few data points: only 506, split between *404 training samples and 102 test samples*. And each feature in the input data (for example, the crime rate) has a different scale. For instance, some values are proportions, which take values between 0 and 1; others take values between 1 and 12, others between 0 and 100, and so on.","e84c5493":"1. Gets a fresh, compiled model \n2. Trains it on the entirety of the data","aecfdd6a":"### Buidling our Model","a97ec127":"### Chooing a Loss Function \n\n#### Note that we compile the model with the mse loss function \u2014 mean squared error, the square of the difference between the predictions and the targets. This is a widely used loss function for regression problems.\n#### We are also monitoring a new metric during training: mean absolute error (MAE). It\u2019s the absolute value of the difference between the predictions and the targets. For instance, an MAE of 0.5 on this problem would mean your predictions are off by $500 on average.\n","2987aed9":"### Final results ","98afec2e":"#### The first house in the test set is predicted to have a price of about $9,500.","3a9675e1":"#### According to this plot, validation MAE stops improving significantly after 80 epochs. Past that point, you start overfitting.\n#### Once we are finished tuning other parameters of the model (in addition to the number of epochs, we could also adjust the size of the intermediate layers), we can train a final production model on all of the training data, with the best parameters, and then look at its performance on the test data.\n","18b2e2bc":"#### 1.) Because you\u2019ll need to instantiate the same model multiple times, you use a function to construct it.\n\n#### The model ends with a single unit and no activation (it will be a linear layer). This is a typical setup for scalar regression (a regression where you\u2019re trying to predict a single continuous value). Applying an activation function would constrain the range the output can take; for instance, if you applied a sigmoid activation function to the last layer, the model could only learn to predict values between 0 and 1. Here, because the last layer is purely linear, the model is free to learn to predict values in any range.","ab21ff8a":"## The Boston Housing Price dataset using keras - Regression ","2d14d582":"### Loading Data","8e7f5f88":"### Validating approach using K-fold validation\n\n#### To evaluate your model while you keep adjusting its parameters (such as the number of epochs used for training), you could split the data into a training set and a validation set, as you did in the previous examples. But because you have so few data points, the validation set would end up being very small (for instance, about 100 examples). As a consequence, the validation scores might change a lot depending on which data points you chose to use for validation and which you chose for training: the validation scores might have a high variance with regard to the validation split. This would prevent you from reliably evaluating your model. \n#### The best practice in such situations is to use K-fold cross-validation (see figure 3.11). It consists of splitting the available data into K partitions (typically K = 4 or 5), instantiating K identical models, and training each one on K \u2013 1 partitions while evaluating on the remaining partition. The validation score for the model used is then the average of the K validation scores obtained. In terms of code, this is straightforward.","4855592a":"#### It may be a little difficult to see the plot, due to scaling issues and relatively high variance. Let\u2019s do the following:\n\n#### Omit the first 10 data points, which are on a different scale than the rest of the curve.\n\n#### Replace each point with an exponential moving average of the previous points, to obtain a smooth curve.\n","114d9285":"#### As you can see, you have 404 training samples and 102 test samples, each with 13 numerical features, such as per capita crime rate, average number of rooms per dwelling, accessibility to highways, and so on.\n#### The targets are the median values of owner-occupied homes, in thousands of dollars:\n\n#### The prices are typically between $10,000 and $50,000. If that sounds cheap, remember that this was the mid-1970s, and these prices aren\u2019t adjusted for inflation.\n","79a50504":"### Take away from this example:\n1. Regression is done using different loss functions than what we used for classification. Mean squared error (MSE) is a loss function commonly used for regression.\n\n2. Similarly, evaluation metrics to be used for regression differ from those used for classification; naturally, the concept of accuracy doesn\u2019t apply for regression. A common regression metric is mean absolute error (MAE).\n\n3. When features in the input data have values in different ranges, each feature should be scaled independently as a preprocessing step.\n\n4. When there is little data available, using K-fold validation is a great way to reliably evaluate a model.\n\n5. When little training data is available, it\u2019s preferable to use a small model with few intermediate layers (typically only one or two), in order to avoid severe overfitting.\n","d70c2499":"#### It would be problematic to feed into a neural network values that all take wildly different ranges. The model might be able to automatically adapt to such heterogeneous data, but it would definitely make learning more difficult. A widespread best practice to deal with such data is to do feature-wise normalization: for each feature in the input data (a column in the input data matrix), you subtract the mean of the feature and divide by the standard deviation, so that the feature is centered around 0 and has a unit standard deviation. This is easily done using NumPy.\n"}}