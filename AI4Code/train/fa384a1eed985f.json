{"cell_type":{"b011ac34":"code","5e14c7a2":"code","2ee8cc1f":"code","d9794ac0":"code","4c9e8717":"code","d99be6be":"code","531094fe":"code","b78f52b3":"code","db4e53d7":"code","ad94608b":"code","fadcf61d":"code","25e5a097":"code","510453a9":"code","e2d1fd7e":"code","72d05937":"code","5b15d6f4":"code","1e6ffe80":"code","20a92a1e":"code","45fac596":"code","781923b4":"code","b0994a05":"code","cc5f9c6d":"code","b988cfde":"code","63b5cbcc":"code","19ff6e96":"code","70cf68e3":"code","200245ab":"code","e5610b33":"code","afeeca92":"code","6ad539ea":"code","aaa56526":"code","e405d33e":"code","6a8b9598":"code","c33af6a1":"code","3c819e71":"code","2f63ccaf":"code","5f100491":"code","dec80c9e":"code","0f054986":"code","d6f7d483":"code","019349e9":"code","0899ab67":"code","00b42f1c":"code","b92479a1":"code","1474ea55":"code","f629e635":"code","2032abd3":"code","e8496f2f":"markdown","33063cc3":"markdown","4bc1d402":"markdown","5e2c733f":"markdown","549e880a":"markdown","dd245f28":"markdown"},"source":{"b011ac34":"#importing libraries\nimport pandas as pd\nimport numpy as np\n\n#Visualisation Libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n#modelling libraries\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\n\n#evaluation metrics\nfrom sklearn.metrics import confusion_matrix, f1_score, classification_report, accuracy_score\n\nimport warnings\nwarnings.simplefilter(\"ignore\")\n%matplotlib inline","5e14c7a2":"#reading data\ntrain = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ntrain.head(2)","2ee8cc1f":"test.head(2)","d9794ac0":"#dropping the PId from train and test dataset\ntrain.drop(\"PassengerId\", axis = 1, inplace = True)\ntest.drop(\"PassengerId\", axis = 1, inplace = True)","4c9e8717":"print(\"Row and Columns in Train Data are\", train.shape[0], \"&\", train.shape[1], \"respectively.\")\nprint(\"Row and Columns in Test Data are\", test.shape[0], \"&\", test.shape[1], \"respectively.\")","d99be6be":"train.describe()","531094fe":"print(\"Data type in Train Dataset.\\n\\n\", train.dtypes)\nprint(\"*\"*50)\nprint(\"Data type in Test Dataset.\\n\\n\", test.dtypes)","b78f52b3":"train.corr()","db4e53d7":"test.corr()","ad94608b":"# Missing values\ndef missing_values_table(df):\n        mis_val = df.isnull().sum()\n        mis_val_percent = 100 * df.isnull().sum() \/ len(df)\n        mis_val_table = pd.concat([mis_val, mis_val_percent], axis=1)\n        mis_val_table_ren_columns = mis_val_table.rename(columns = {0 : 'Missing Values', 1 : '% of Total Values'})\n        mis_val_table_ren_columns = mis_val_table_ren_columns[mis_val_table_ren_columns.iloc[:,1] != 0].sort_values('% of Total Values', ascending=False).round(1)\n        print (\"Your selected dataframe has \" + str(df.shape[1]))   \n        print(\"There are \" + str(mis_val_table_ren_columns.shape[0])+\" columns that have missing values.\")\n        return mis_val_table_ren_columns","fadcf61d":"#checking on the missing values in train dataset\nmissing_values_train= missing_values_table(train)\nmissing_values_train.style.background_gradient(cmap='Paired_r')","25e5a097":"#checking on the missing values in train dataset\nmissing_values_test= missing_values_table(test)\nmissing_values_test.style.background_gradient(cmap='Paired_r')","510453a9":"print(train[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean().sort_values(by='Survived', ascending=False))\nsns.countplot(x = \"Pclass\", hue= \"Survived\", data = train, dodge = True)","e2d1fd7e":"print(train[['Sex','Survived']].groupby(['Sex'], as_index=False).mean())\nsns.countplot(x = \"Survived\", hue= \"Sex\", data = train, dodge = True)","72d05937":"print(train[['SibSp','Survived']].groupby(['SibSp'], as_index=False).count())\nsns.countplot(x = \"SibSp\", hue = \"Survived\", data = train, dodge = True)","5b15d6f4":"bins = np.arange(0, 85, 5)\ng = sns.FacetGrid(train, col='Survived', row = 'Sex')\ng.map(plt.hist, 'Age', bins=bins)","1e6ffe80":"grid = sns.FacetGrid(train, col='Survived', row='Pclass', size=2.2, aspect=1.6)\ngrid.map(plt.hist, 'Age', alpha=.5, bins=20)\ngrid.add_legend();","20a92a1e":"sns.boxplot(x = 'Pclass', y = 'Age', data = train)","45fac596":"sns.boxplot(x = 'Pclass', y = 'Age', data = test)","781923b4":"sns.heatmap(train.isnull(), yticklabels= False)","b0994a05":"sns.heatmap(test.isnull(), yticklabels= False)","cc5f9c6d":"train.groupby(['Survived','Sex','Pclass'])['Age'].mean()","b988cfde":"age_groupby_train = train.groupby(['Survived','Sex','Embarked','Pclass'])['Age'].mean()\nage_groupby_train","63b5cbcc":"age_groupby_test = test.groupby(['Sex','Embarked','Pclass'])['Age'].mean()\nage_groupby_test","19ff6e96":"train['Age'].fillna(value = -1,inplace =True)\ntest['Age'].fillna(value = -1,inplace =True)","70cf68e3":"def fill_value_train(df):\n    for row in range(len(age_groupby_train.index)):\n        df.loc[(df['Survived'] == age_groupby_train.index[row][0]) &\n                 (df['Sex']== age_groupby_train.index[row][1]) &\n                 (df['Embarked']== age_groupby_train.index[row][2])&\n                 (df['Pclass']== age_groupby_train.index[row][3])&\n                 (df['Age']==-1),'Age']=age_groupby_train.values[row]","200245ab":"def fill_value_test(df):\n    for row in range(len(age_groupby_test.index)):\n        df.loc[(df['Sex']== age_groupby_train.index[row][1]) &\n                 (df['Embarked']== age_groupby_train.index[row][2])&\n                 (df['Pclass']== age_groupby_train.index[row][3])&\n                 (df['Age']==-1),'Age']=age_groupby_train.values[row]","e5610b33":"fill_value_train(train)","afeeca92":"fill_value_test(test)","6ad539ea":"sns.heatmap(train.isnull(), yticklabels= False)","aaa56526":"sns.heatmap(test.isnull(), yticklabels= False)","e405d33e":"Sex_train = pd.get_dummies(train['Sex'], drop_first=True)\nEmbark_train = pd.get_dummies(train['Embarked'], drop_first= True)\nPcls_train = pd.get_dummies(train['Pclass'], drop_first= True)\n\nSex_test = pd.get_dummies(test['Sex'], drop_first=True)\nEmbark_test = pd.get_dummies(test['Embarked'], drop_first= True)\nPcls_test = pd.get_dummies(test['Pclass'], drop_first= True)","6a8b9598":"train = pd.concat([train, Sex_train, Embark_train, Pcls_train], axis = 1)\ntrain.head(2)","c33af6a1":"test = pd.concat([test, Sex_test, Embark_test, Pcls_test], axis = 1)\ntest.head(2)","3c819e71":"train.drop(['Sex', 'Embarked', 'Name', 'Ticket', 'Cabin', 'Fare'], axis = 1, inplace = True)\ntrain.head(2)","2f63ccaf":"test.drop(['Sex', 'Embarked', 'Name', 'Ticket', 'Cabin', 'Fare'], axis = 1, inplace = True)\ntest.head(2)","5f100491":"print(\"Missing Values of Age in Train Dataset :\", train.isnull().any())\nprint(\"Missing Values of Age in Test Dataset :\", test.isnull().any())","dec80c9e":"X = train[['Pclass','Age','SibSp', 'Parch', 'male', 'Q','S']]\ny = train['Survived']\n\nX_test =test[['Pclass','Age','SibSp', 'Parch', 'male', 'Q','S']]","0f054986":"X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.30, random_state=42)\nlr = LogisticRegression(random_state= 42, fit_intercept=True,intercept_scaling=1)\nlr.fit(X_train,y_train)\ny_pred = lr.predict(X_val)","d6f7d483":"print(\"Train Data Accuracy {0} \".format(lr.score(X_train, y_train)))\nprint(\"Test Data Accuracy {0} \".format(lr.score(X_val, y_val)))\nprint(\"Confusion Matrix \\n\",confusion_matrix(y_val,y_pred))\nprint(\"Classification Matrix \\n\", classification_report(y_val,y_pred))","019349e9":"y_test = lr.predict(X_test)\ny_test","0899ab67":"dummy = pd.Series(y_test)\ntype(dummy)","00b42f1c":"frame = { 'y_predicted': dummy}\nresult = pd.DataFrame(frame) \nresult.head()","b92479a1":"test.head()","1474ea55":"test_result = pd.merge(test, result, left_index=True, right_index=True)","f629e635":"test_result.shape","2032abd3":"test_result.head()","e8496f2f":"<img src = \"https:\/\/cdn.britannica.com\/79\/4679-050-BC127236\/Titanic.jpg\" alt=\"Drawing\" width=\"400\">\n<figcaption> <h6> Titanic : The most incredible thing that Collide with destiny.<\/h6>\n\n\n#### Definition Key\n\n|S.No.|Variable|Definition|Key       |\n|-----|--------|----------|----------|\n|1    |survival|Survival  |0=No,1=Yes|\n|2    |Pclass  |Ticket Class  |1=1st,2=2nd, 3=3rd|\n|3    |Sex     |Sex  |-|\n|4    |Age     |Age in years|-|\n|5    |Sibsp   |# of siblings \/ spouses aboard the Titanic|-|\n|6    |Parch   |# of parents \/ children aboard the Titanic|-|\n|7    |Ticket  |Ticket number|-|\n|8    |Fare    |Passenger fare|-|\n|9    |Cabin   |Cabin Number|-|\n|10   |embarked|Port of Embarkation|C = Cherbourg, Q = Queenstown, S =Southampton|\n","33063cc3":"# Data Evaluation, Preprocessing and Data Cleaning","4bc1d402":"## THE END!!!","5e2c733f":"# Importing Libraries and Reading Data","549e880a":"# Data Spilit and Model Building","dd245f28":"# Problem Statement\n\nThe sinking of the RMS Titanic is one of the most infamous shipwrecks in history. On April 15, 1912, during her maiden voyage, the Titanic sank after colliding with an iceberg, killing numerous passengers and crew. This sensational tragedy shocked the international community and led to better safety regulations for ships. \nOne of the reasons that the shipwreck led to such loss of life was that there were not enough lifeboats for the passengers and crew. Although there was some element of luck involved in surviving the sinking, some groups of people were more likely to survive than others, such as women, children, and the upper-class. \nIn this, we ask you to complete the analysis of what sorts of people were likely to survive. In particular, we ask you to apply the tools of machine learning to predict which passengers survived the tragedy."}}