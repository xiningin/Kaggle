{"cell_type":{"bafb627e":"code","6fb0c019":"code","7dcb0b79":"code","eb2418e4":"code","2238ac75":"code","db46e486":"code","06a581aa":"code","f3930027":"code","0137c75c":"code","081b6eff":"code","3e4a63cd":"code","6bb5bea1":"code","240ac511":"code","c5a1532e":"code","07376e1a":"code","2d7fe285":"code","3bb4b0a5":"code","7c825a56":"code","2e9997c4":"code","38b2c275":"code","af586886":"code","ae9b7ebb":"code","2094cdf6":"code","c6046530":"code","41bdc2b5":"markdown","4c759ffe":"markdown","a74bf43a":"markdown","e2920548":"markdown","978e2a26":"markdown","5c7cb1e6":"markdown","a55c7f5f":"markdown","46743b26":"markdown","cd265aae":"markdown","31fa0168":"markdown","92d942be":"markdown","6df1e34e":"markdown","fa984f92":"markdown","f7635752":"markdown"},"source":{"bafb627e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","6fb0c019":"features = pd.read_csv('\/kaggle\/input\/walmart-recruiting-store-sales-forecasting\/features.csv.zip')\nfeatures","7dcb0b79":"stores = pd.read_csv('\/kaggle\/input\/walmart-recruiting-store-sales-forecasting\/stores.csv')\nstores.head()","eb2418e4":"train = pd.read_csv('\/kaggle\/input\/walmart-recruiting-store-sales-forecasting\/train.csv.zip')\ntrain.head(10)","2238ac75":"train","db46e486":"stores.Type.value_counts()","06a581aa":"df=pd.merge(train,features,on=['Store','Date','IsHoliday'],how='inner')","f3930027":"df.head()","0137c75c":"df=pd.merge(df,stores,on='Store',how='inner')\ndf.head(10)","081b6eff":"df.isna().mean()*100","3e4a63cd":"from sklearn.impute import SimpleImputer\n\nmarkdown=pd.DataFrame(SimpleImputer().fit_transform(df[['MarkDown1','MarkDown2','MarkDown3','MarkDown4','MarkDown5']]),columns=['MarkDown1','MarkDown2','MarkDown3','MarkDown4','MarkDown5'])\ndf = df.drop(['MarkDown1','MarkDown2','MarkDown3','MarkDown4','MarkDown5'],axis=1)\ndf=pd.concat([df,markdown],axis=1)\n","6bb5bea1":"df.dtypes","240ac511":"df['Date']=pd.to_datetime(df['Date'])\ndf['year']=df['Date'].dt.year\ndf['month']=df['Date'].dt.month\ndf['day']=df['Date'].dt.day\ndel df['Date']","c5a1532e":"from sklearn.preprocessing import LabelEncoder\n\ndf['Type']=LabelEncoder().fit_transform(df['Type'])\ndf['IsHoliday']=LabelEncoder().fit_transform(df['IsHoliday'])\ndf.dtypes","07376e1a":"df['Weekly_Sales'].plot.box()","2d7fe285":"df.columns","3bb4b0a5":"df[['Store', 'Dept', 'Weekly_Sales', 'IsHoliday', 'Temperature',\n       'Fuel_Price', 'CPI', 'Unemployment', 'Type', 'Size']].plot(kind='box',subplots=1,layout=(3,5),figsize=(14,12))","7c825a56":"from scipy.stats import zscore \nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt","2e9997c4":"X = df.drop('Weekly_Sales',axis=1)\ny = df['Weekly_Sales']\nX_scaled = X.apply(zscore)\n\nX_train,X_test,y_train,y_test = train_test_split(X_scaled,y,test_size=.3,random_state=34)","38b2c275":"from sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import r2_score\n\nlr = LinearRegression()\ndt= DecisionTreeRegressor()\nrf = RandomForestRegressor()\nmodels = [lr,dt,rf]\n\nfor model in models:\n    model.fit(X_train,y_train)\n    y_pred = model.predict(X_test)\n    print(r2_score(y_test,y_pred))","af586886":"(pd.DataFrame([X.columns,rf.feature_importances_],columns=['Store', 'Dept', 'IsHoliday', 'Temperature', 'Fuel_Price', 'CPI',\n       'Unemployment', 'Type', 'Size', 'MarkDown1', 'MarkDown2', 'MarkDown3',\n       'MarkDown4', 'MarkDown5', 'year', 'month', 'day']).T).plot.bar()","ae9b7ebb":"pd.DataFrame([X.columns,rf.feature_importances_],columns=['Store', 'Dept', 'IsHoliday', 'Temperature', 'Fuel_Price', 'CPI',\n       'Unemployment', 'Type', 'Size', 'MarkDown1', 'MarkDown2', 'MarkDown3',\n       'MarkDown4', 'MarkDown5', 'year', 'month', 'day']).T","2094cdf6":"x1 = X_scaled.drop(['IsHoliday','year','MarkDown5','MarkDown4','MarkDown1','MarkDown2'],axis=1)","c6046530":"X_train,X_test,y_train,y_test = train_test_split(x1,y,test_size=.3,random_state=34)\nrf.fit(X_train,y_train)\ny_pred = rf.predict(X_test)\nr2_score(y_test,y_pred)","41bdc2b5":"**Since date is of object datatype, I converted it to datetime type and extracting day,month,year from it separetely**","4c759ffe":" **Dropping the least importance feature and building the model again**","a74bf43a":"**Merging train, features, stores on common columns**","e2920548":"**It is observed that Markdown 1-5 have almost 65% of missing values**","978e2a26":"**Checking the given files**","5c7cb1e6":"**Standardizing the data and splitting the data into train and test for building the model**","a55c7f5f":"**Checking for null values**","46743b26":"**Treating the object and bool columns with Label Encoding**","cd265aae":"From the above bar plot, we can observed that Department have high importance compared to other features.\nSize and Store are next importance features.","31fa0168":"It is observed that DecisionTreeRegressor and RandomForestRegressor have better r2 score compared to LinearRegressor model","92d942be":"**Treating NaN values with Simple Imputer**","6df1e34e":"**Checking the feature importance on Random Forest for hyperparameter tuning to get the best model with best parameters**","fa984f92":"**Checking for outliers**","f7635752":"**Building different models to choose the best fit model with better accuracy**"}}