{"cell_type":{"cc100284":"code","f6c125ed":"code","84a0e12f":"code","fed74b6e":"code","2af69855":"code","a39c1c8f":"code","b1a0441d":"code","9e66d5cb":"code","feeb5b19":"code","fb6921a7":"code","c542bbcc":"code","5b8d903a":"code","88cd9a9b":"code","4ff8478d":"code","896a686a":"code","f8bd2100":"code","900e16e2":"code","05bf9719":"code","55b93911":"code","ffd329d9":"code","d91c4d0d":"code","3d370d50":"code","217f5415":"code","c08ecb4b":"code","e2bda880":"code","be675dd3":"code","dfec4aec":"code","698ea0eb":"code","383d758e":"code","a8c1dcf9":"code","bd8f7a0e":"code","e265facd":"code","8aea508a":"code","4dbe821c":"markdown","7aa5b26c":"markdown","90631ed4":"markdown","5089a6b8":"markdown","13f565a6":"markdown"},"source":{"cc100284":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","f6c125ed":"import pandas as pd\necg_train=pd.read_csv('..\/input\/mitbih_train.csv',header=None)","84a0e12f":"ecg_train.head(5)","fed74b6e":"y_train=ecg_train.iloc[:,187] \n","2af69855":"y_train.head(5)","a39c1c8f":"cata=y_train.value_counts().reset_index()\ncata\n","b1a0441d":"x_train=ecg_train.iloc[:,0:187]\n","9e66d5cb":"from matplotlib import pyplot as plt\n#import matplotlib.pyplot as plt\nplt.plot(x_train.iloc[0,:])","feeb5b19":"from matplotlib import pyplot as plt\nplt.plot(x_train.iloc[5,:])","fb6921a7":"plt.bar(cata.iloc[:,0],cata.iloc[:,1])","c542bbcc":"import numpy as np\nclass0=np.where(y_train==0)\nclass0","5b8d903a":"class0=class0[0]\ntype(class0)","88cd9a9b":"class1=np.where(y_train==1)[0]\nclass2=np.where(y_train==2)[0]\nclass3=np.where(y_train==3)[0]\nclass4=np.where(y_train==4)[0]","4ff8478d":"plt.figure(figsize=(20,10))\nplt.plot(x_train.iloc[class0[5],:],label='class0')\nplt.plot(x_train.iloc[class1[5],:],label='class1')\nplt.plot(x_train.iloc[class2[5],:],label='class2')\nplt.plot(x_train.iloc[class3[5],:],label='class3')\nplt.plot(x_train.iloc[class4[5],:],label='class4')\nplt.legend()\nplt.title('ECG Signal')","896a686a":"from scipy.signal import find_peaks,peak_widths,peak_prominences,argrelmin,argrelmax,argrelextrema,spectrogram\npk=find_peaks(x_train.iloc[0,:])\nprint(pk)","f8bd2100":"peaks=[]\nheight=[]\nwidth=[]\nprominance=[]\narg_min=[]\narg_max=[]\nfor i in range(len(x_train)):\n    peak,hei=find_peaks(x_train.iloc[i,:],height=0)\n    peaks.append(peak)\n    height.append(hei['peak_heights'])\n    wid=peak_widths(x_train.iloc[i,:],peak)[0]\n    width.append(wid)\n    pro=peak_prominences(x_train.iloc[i,:],peak)[0]\n    prominance.append(pro)\n    amin=argrelmin(np.array(x_train.iloc[i,:]))[0]\n    arg_min.append(amin)\n    amax=argrelmax(np.array(x_train.iloc[i,:]))[0]\n    arg_max.append(amax)","900e16e2":"f1_len=max([len(i) for i in peaks])\nf2_len=max([len(i) for i in height])\nf3_len=max([len(i) for i in width])\nf4_len=max([len(i) for i in prominance])\nf5_len=max([len(i) for i in arg_min])\nf6_len=max([len(i) for i in arg_max])\n","05bf9719":"F1_peaks=[]\nF2_height=[]\nF3_width=[]\nF4_prominance=[]\nF5_argmin=[]\nF6_argmax=[]\nfor i in range(len(peaks)):\n    pa1=np.pad(peaks[i],(0,f1_len-len(peaks[i])),'constant')\n    F1_peaks.append(pa1)\n    pa2=np.pad(height[i],(0,f2_len-len(height[i])),'constant')\n    F2_height.append(pa2)\n    pa3=np.pad(width[i],(0,f3_len-len(width[i])),'constant')\n    F3_width.append(pa3)\n    pa4=np.pad(prominance[i],(0,f4_len-len(prominance[i])),'constant')\n    F4_prominance.append(pa4)\n    pa5=np.pad(arg_min[i],(0,f5_len-len(arg_min[i])),'constant')\n    F5_argmin.append(pa5)\n    pa6=np.pad(arg_max[i],(0,f6_len-len(arg_max[i])),'constant')\n    F6_argmax.append(pa6)","55b93911":"\necg_feat=np.concatenate((F1_peaks,F2_height,F3_width,F4_prominance,F5_argmin,F6_argmax),axis=1)","ffd329d9":"ecg_feat.shape","d91c4d0d":"from sklearn.model_selection import train_test_split","3d370d50":"[xtrain,xtest,ytrain,ytest]=train_test_split(ecg_feat,y_train,test_size=0.2,random_state=48)","217f5415":"from sklearn.ensemble import RandomForestClassifier\necg_mod=RandomForestClassifier()\necg_mod.fit(xtrain,ytrain)\nypred=ecg_mod.predict(xtest)","c08ecb4b":"from sklearn.metrics import accuracy_score,confusion_matrix,classification_report\nacc=accuracy_score(ytest,ypred)\nprint(\"Accuracy of the model is\",acc*100)\ncm=confusion_matrix(ytest,ypred)\nprint(cm)","e2bda880":"[Xtrain,Xtest,Ytrain,Ytest]=train_test_split(x_train,y_train,test_size=0.2,random_state=48)","be675dd3":"from keras.models import Sequential\nfrom keras.layers import Dense, Activation\nfrom keras.utils import to_categorical","dfec4aec":"y_train1 = to_categorical(Ytrain)\ny_test1 = to_categorical(Ytest)\n","698ea0eb":"model = Sequential()","383d758e":"model.add(Dense(50, activation='relu', input_shape=(187,)))\nmodel.add(Dense(50, activation='relu'))\nmodel.add(Dense(5, activation='softmax'))\n","a8c1dcf9":"model.compile(optimizer='adam',\n              loss='categorical_crossentropy',\n              metrics=['accuracy'])\n","bd8f7a0e":"model.fit(Xtrain, y_train1, epochs=10)\n","e265facd":"model.save('ecg_model.h5')","8aea508a":"from IPython.display import FileLink, FileLinks\nFileLinks('.') ","4dbe821c":"# Do it in DL way","7aa5b26c":"## do the same for train data","90631ed4":"# Extract the Features","5089a6b8":"# Visualize one signal from each class in the same graph","13f565a6":"# Machine Learning Model"}}