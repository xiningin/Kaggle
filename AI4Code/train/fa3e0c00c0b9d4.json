{"cell_type":{"1524cae3":"code","df07d57b":"code","8abae5c2":"code","aac57e29":"code","152ba707":"code","ffa31197":"code","57b7e388":"code","421fd060":"code","5619b966":"markdown","1dee3b95":"markdown","80735762":"markdown","620e76f8":"markdown","b7bc433c":"markdown"},"source":{"1524cae3":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport os\n\nplt.style.use('fivethirtyeight')\nprint(os.listdir(\"..\/input\"))\n\nimport statsmodels.api as sm\nfrom fbprophet import Prophet\nimport xgboost as xgb\n\nfrom sklearn.metrics import mean_absolute_error","df07d57b":"def split_data(data, split_date):\n    return data[data.index <= split_date].copy(), \\\n           data[data.index >  split_date].copy()\n\ndef limit(data, frm, to):\n    return data[(data.index>=frm)&(data.index<to)]","8abae5c2":"energy_hourly = pd.read_csv('..\/input\/PJME_hourly.csv', \n                            index_col=[0], parse_dates=[0])\nenergy_hourly.sort_index(inplace=True)\n\nt = energy_hourly.PJME_MW.copy()\nt = t.drop(t.index[t.index.duplicated()])\nfreq_index = pd.date_range(start=t.index[0], end=t.index[-1], freq='H')\nconstructed = pd.Series(index=freq_index, name='PJME_MW')\nconstructed.update(t)\nconstructed.interpolate(inplace=True)\ntrain, test = split_data(constructed, '01-Jul-2002')\n\ntrain = limit(constructed, '03-01-2011', '04-01-2011')\ntest  = limit(constructed, '04-01-2011', '05-01-2011')","aac57e29":"model_A = sm.tsa.statespace.SARIMAX(constructed,\n                                order=(1,1,1),\n                                seasonal_order=(0,0,1,12),\n                                enforce_stationarity=False,\n                                enforce_invertibility=False)\nresults_A = model_A.fit()\nprint('AIC =', results_A.aic) #AIC\n#result_ARIMA = results.forecast(steps=test.shape[0])\nforecast_A = results_A.forecast(steps=test.shape[0])","152ba707":"model_P = Prophet(interval_width=0.95)\nmodel_P.fit(pd.DataFrame({'ds': train.index, 'y':train}))\nfuture_dates = model_P.make_future_dataframe(periods=test.shape[0], freq='H')\nresults_P = model_P.predict(future_dates[train.shape[0]:])\nforecast_P = results_P.set_index('ds').yhat\n#model_P.make_seasonality_features(period=24*7)","ffa31197":"def to_X(data):\n    return pd.Series(data.index).apply(\n        lambda x: (x - data.index[0]).components.hours) \\\n                                .values \\\n                                .reshape(-1,1)\n\nmodel_X = xgb.XGBRegressor(n_estimators=30)\nmodel_X.fit(to_X(train), train.values,\n        eval_set=[(to_X(train), train.values), (to_X(test), test.values)],\n        early_stopping_rounds=50, #stop if 50 consequent rounds without decrease of error\n        verbose=False) # Change verbose to True if you want to see it train\n\nforecast_X = model_X.predict(to_X(test))","57b7e388":"plt.figure(figsize=(16,8))\nplt.plot(pd.concat([train,test]))\nplt.plot(test.index, forecast_A, label='ARIMA')\nplt.plot(test.index, forecast_P, label='Prophet')\nplt.plot(test.index, forecast_X, label='XGBoost')\nplt.legend()","421fd060":"mean_absolute_error(test, forecast_A), \\\nmean_absolute_error(test, forecast_P), \\\nmean_absolute_error(test, forecast_X)","5619b966":"# Introduction and Exploration of Algorithms, Suitable for Electrical Energy Cunsumption Time Series Forcasting\n\n## Abstract\n\nA very basic understanding of the subject is expected. The goal of this notebook is to familiarize the reader with the interesting capabilities of three machine learning algorithms in a not overwhelming way. The chosen algorithms diferenciate conceptually from each other and in their performance and will help to broaden one's perspective on the subject. The algorithms are ARIMA and Prophet, spechialized in forecasting  time series, and XGBoost - an ensemble of algorithms:\n\n### 1. ARIMA\n\nAutoRegressive Integrated Moving Average with eXogenous regressors model. Just remember that it is composed of several statistical models and is highly configurable.\n\nARIMA has an **order=(p,d,q)** parameter that manages the AR and MA parts of the algorithm. [\\[statsmodels.tsa.arima_model.ARIMA\\](https:\/\/www.statsmodels.org\/dev\/generated\/statsmodels.tsa.arima_model.ARIMA.html?highlight=arima)\n    \nSARIMAX is an extension of ARIMA that enables **seasonal_order(P,D,Q,s)** allowing for day, week, ... components.  [\\[statsmodels.tsa.arima_model.SARIMAX\\]](https:\/\/www.statsmodels.org\/dev\/generated\/statsmodels.tsa.statespace.sarimax.SARIMAX.html)\n    \nThe practice is to run this algorithm for one unknown future date and use that date in the forcasting of next unknown dates.\n    \n### 2. Prophet\n\nProcedure for forecasting time series data based on an additive model where non-linear trends are fit with yearly, weekly, and daily seasonality, plus holiday effects. It is released by Facebook\u2019s Core Data Science team.\n\nAdditive model is a model like:\n$$Data = seasonal\\space effect + trend + residual$$\nand, multiplicative model:\n$$Data = seasonal\\space effect * trend * residual$$\n\nThe algorithm provides useful statistics that help visualize the tuning process, e.g. trend, week trend, year trend and their max and min errors. \n\n### 3. XGBoost\n\neXtreme Gradient Boosting.\n\nThe algorithm XGBoost implements is called *gradient boosting decision tree algorithm*. Boosting is an ensemble technique where new models are added to correct the errors made by existing models. Models are added sequentially until no further improvements can be made.\n\nGradient boosting: approach where new models are created that predict the residuals or errors of prior models and then added together to make the final prediction. \n\nTo minimize the loss when adding new modelsgradient descent algorithm is used.\n\nComputational speed and model performance are impressive.\n\n### Data\n\nThe data on which the algorithms will be trained and tested upon comes from Kaggle Hourly Energy Consumption database. It is collected by PJM Interconnection, a company  coordinating the continuous buying, selling, and delivery of wholesale electricity through the Energy Market from suppliers to customers in the reagon of South Carolina, USA. All .csv files contains rows with a timestamp and a value. The name of the value column corresponds to the name of the contractor. the timestamp represents a single hour and the value represents the total energy, cunsumed during that hour.","1dee3b95":"## Compare the forecasts","80735762":" ## ARIMA\n \nAkaike Information Criterion(AIC) - an estimator of the relative quality of statistical models for a given set of data","620e76f8":"## Conclusion\n\nARIMA is good for guessing the next future value.\n\nProphet is good for captioring seasons - in our case day and week.\n\nXGBoost is good for estimating the most probable behavior of the curve.\n\nTo proceed further in understanding time series forecasting, one has to learn more about algorithm finetuning. A better understanding of algorithms and statistical tools is required. To forecast for a whole month with only a month to learn from in advance is a very small case of possibilities - perhaps if you give more data to Prophet it will capture the trend better. Or, why don't we use multiple algorithms and rate their performance for every prediction. Then we can trust them accordingly based on some other, higher level model. The universe of data science is vast and all you need is desire to understand it.","b7bc433c":"## XGBoost"}}