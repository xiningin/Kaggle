{"cell_type":{"6cc138fe":"code","f4a658e8":"code","cb6764f2":"code","03cfb18e":"code","3c62af90":"code","5c667ab0":"code","9dc3daf7":"code","7cfcd3e9":"code","00502f23":"code","8ef3c120":"code","120fb772":"code","58b4a49b":"code","2d19ecf6":"code","f05c01fb":"code","e7f70559":"code","2897bb1c":"code","5b71420a":"code","a70d2bf9":"code","cee6e36c":"code","bb5dde25":"code","f4caa4bd":"code","7fe54f20":"code","346d0d7b":"code","cbe76aa9":"code","5c505c7e":"code","27ba99ab":"code","ee26f81c":"code","926af5b3":"code","855a5127":"code","68604125":"code","16b4802b":"code","1e15efbb":"code","33836387":"markdown","80a6a316":"markdown","44816469":"markdown","fcce503f":"markdown","4771df92":"markdown","95df8ace":"markdown","f80589c1":"markdown","89d0c774":"markdown","072522e0":"markdown","6695d58f":"markdown","9729cdc5":"markdown","490d111c":"markdown","f3af4325":"markdown","10f4b7c0":"markdown"},"source":{"6cc138fe":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f4a658e8":"import tensorflow as tf\nimport numpy as np\nimport os\nimport time","cb6764f2":"path_to_file = tf.keras.utils.get_file('shakespeare.txt', 'https:\/\/storage.googleapis.com\/download.tensorflow.org\/data\/shakespeare.txt')","03cfb18e":"text = open(path_to_file, 'rb').read().decode(encoding='utf-8')\nprint ('Length of text: {} characters'.format(len(text)))","3c62af90":"# Take a look at the first 250 characters in text\nprint(text[:250])","5c667ab0":"# The unique characters in the file\nvocab = sorted(set(text))\nprint ('{} unique characters'.format(len(vocab)))","9dc3daf7":"char2idx = {u:i for i, u in enumerate(vocab)}\nidx2char = np.array(vocab)\n\ntext_as_int = np.array([char2idx[c] for c in text])","7cfcd3e9":"print('{')\nfor char,_ in zip(char2idx, range(20)):\n    print('  {:4s}: {:3d},'.format(repr(char), char2idx[char]))\nprint('  ...\\n}')","00502f23":"# Show how the first 13 characters from the text are mapped to integers\nprint ('{} ---- characters mapped to int ---- > {}'.format(repr(text[:13]), text_as_int[:13]))","8ef3c120":"seq_length = 100\nexamples_per_epoch = len(text)\/\/(seq_length+1)\n\n\nchar_dataset = tf.data.Dataset.from_tensor_slices(text_as_int)\n\nfor i in char_dataset.take(5):\n  print(idx2char[i.numpy()])","120fb772":"sequences = char_dataset.batch(seq_length+1, drop_remainder=True)\n\nfor item in sequences.take(5):\n  print(repr(''.join(idx2char[item.numpy()])))","58b4a49b":"def split_input_target(chunk):\n    input_text = chunk[:-1]\n    target_text = chunk[1:]\n    return input_text, target_text\n\ndataset = sequences.map(split_input_target)","2d19ecf6":"for input_example, target_example in  dataset.take(1):\n  print ('Input data: ', repr(''.join(idx2char[input_example.numpy()])))\n  print ('Target data:', repr(''.join(idx2char[target_example.numpy()])))","f05c01fb":"for i, (input_idx, target_idx) in enumerate(zip(input_example[:5], target_example[:5])):\n    print(\"Step {:4d}\".format(i))\n    print(\"  input: {} ({:s})\".format(input_idx, repr(idx2char[input_idx])))\n    print(\"  expected output: {} ({:s})\".format(target_idx, repr(idx2char[target_idx])))","e7f70559":"BATCH_SIZE = 64\nBUFFER_SIZE = 10000\ndataset = dataset.shuffle(BUFFER_SIZE).batch(BATCH_SIZE, drop_remainder=True)\n\ndataset","2897bb1c":"vocab_size = len(vocab)\nembedding_dim = 256\nrnn_units = 1024","5b71420a":"def build_model(vocab_size, embedding_dim, rnn_units, batch_size):\n    \n    model = tf.keras.Sequential([\n    tf.keras.layers.Embedding(vocab_size, embedding_dim,batch_input_shape=[batch_size, None]),\n    tf.keras.layers.GRU(rnn_units,return_sequences=True,stateful=True,recurrent_initializer='glorot_uniform'),\n    tf.keras.layers.Dense(vocab_size)\n  ])\n    return model","a70d2bf9":"model = build_model(vocab_size = len(vocab),embedding_dim=embedding_dim,rnn_units=rnn_units,batch_size=BATCH_SIZE)","cee6e36c":"for input_example_batch, target_example_batch in dataset.take(1):\n  example_batch_predictions = model(input_example_batch)\n  print(example_batch_predictions.shape, \"# (batch_size, sequence_length, vocab_size)\")","bb5dde25":"model.summary()","f4caa4bd":"sampled_indices = tf.random.categorical(example_batch_predictions[0], num_samples=1)\nsampled_indices = tf.squeeze(sampled_indices,axis=-1).numpy()","7fe54f20":"sampled_indices","346d0d7b":"print(\"Input: \\n\", repr(\"\".join(idx2char[input_example_batch[0]])))\nprint()\nprint(\"Next Char Predictions: \\n\", repr(\"\".join(idx2char[sampled_indices ])))","cbe76aa9":"def loss(labels, logits):\n    return tf.keras.losses.sparse_categorical_crossentropy(labels, logits, from_logits=True)\n\nexample_batch_loss  = loss(target_example_batch, example_batch_predictions)\nprint(\"Prediction shape: \", example_batch_predictions.shape, \" # (batch_size, sequence_length, vocab_size)\")\nprint(\"scalar_loss:      \", example_batch_loss.numpy().mean())","5c505c7e":"model.compile(optimizer='adam', loss=loss)","27ba99ab":"# Directory where the checkpoints will be saved\ncheckpoint_dir = '.\/kaggle\/working\/training_checkpoints'\n# Name of the checkpoint files\ncheckpoint_prefix = os.path.join(checkpoint_dir, \"ckpt_{epoch}\")\n\ncheckpoint_callback=tf.keras.callbacks.ModelCheckpoint(\n    filepath=checkpoint_prefix,\n    save_weights_only=True)","ee26f81c":"EPOCHS=10\nhistory = model.fit(dataset, epochs=EPOCHS, callbacks=[checkpoint_callback])","926af5b3":"tf.train.latest_checkpoint(checkpoint_dir)","855a5127":"model = build_model(vocab_size, embedding_dim, rnn_units, batch_size=1)\n\nmodel.load_weights(tf.train.latest_checkpoint(checkpoint_dir))\n\nmodel.build(tf.TensorShape([1, None]))","68604125":"model.summary()","16b4802b":"def generate_text(model, start_string):  \n  \n    num_generate = 1000\n    input_eval = [char2idx[s] for s in start_string]\n    input_eval = tf.expand_dims(input_eval, 0)\n\n   \n    text_generated = []\n\n    temperature = 1.0\n\n    model.reset_states()\n    for i in range(num_generate):\n        predictions = model(input_eval)\n        predictions = tf.squeeze(predictions, 0)\n        predictions = predictions \/ temperature\n        predicted_id = tf.random.categorical(predictions, num_samples=1)[-1,0].numpy()\n\n        input_eval = tf.expand_dims([predicted_id], 0)\n\n        text_generated.append(idx2char[predicted_id])\n\n    return (start_string + ''.join(text_generated))","1e15efbb":"print(generate_text(model, start_string=u\"ROMEO: \"))","33836387":"**Given a character, or a sequence of characters, what is the most probable next character? This is the task we're training the model to perform. The input to the model will be a sequence of characters, and we train the model to predict the output\u2014the following character at each time step.\nSince RNNs maintain an internal state that depends on the previously seen elements, given all the characters computed until this moment, what is the next character?**","80a6a316":"# Build The Model","44816469":"**Next divide the text into example sequences. Each input sequence will contain seq_length characters from the text.\nFor each input sequence, the corresponding targets contain the same length of text, except shifted one character to the right.\nSo break the text into chunks of seq_length+1. For example, say seq_length is 4 and our text is \"Hello\". The input sequence would be \"Hell\", and the target sequence \"ello\".\nTo do this first use the tf.data.Dataset.from_tensor_slices function to convert the text vector into a stream of character indices.**","fcce503f":"To get actual predictions from the model we need to sample from the output distribution, to get actual character indices. This distribution is defined by the logits over the character vocabulary.","4771df92":"Now we have an integer representation for each character. Notice that we mapped the character as indexes from 0 to len(unique).","95df8ace":"# preprocessing the text\n","f80589c1":"For each character the model looks up the embedding, runs the GRU one timestep with the embedding as input, and applies the dense layer to generate logits predicting the log-likelihood of the next character:\n\nA drawing of the data passing through the model\n![](https:\/\/raw.githubusercontent.com\/tensorflow\/docs\/master\/site\/en\/tutorials\/text\/images\/text_generation_training.png)","89d0c774":"# Restore the latest checkpoint\nTo keep this prediction step simple, use a batch size of 1.\n\nBecause of the way the RNN state is passed from timestep to timestep, the model only accepts a fixed batch size once built.\n\nTo run the model with a different batch_size, we need to rebuild the model and restore the weights from the checkpoint.","072522e0":"**This kernel is self explanatory kernel explaining how RNN's could be used for generating Skakespeare like text. Shakespeare text extracts have been downloaded from the tensorflow dataset and then RNN have been trained on them. Then after training if a word or text is given to them as a seed input it will generate text like Skakespeare **","6695d58f":"Each index of these vectors are processed as one time step. For the input at time step 0, the model receives the index for \"F\" and trys to predict the index for \"i\" as the next character. At the next timestep, it does the same thing but the RNN considers the previous step context in addition to the current input character.","9729cdc5":"**For each sequence, duplicate and shift it to form the input and target text by using the map method to apply a simple function to each batch:**","490d111c":"# The prediction loop\n\nThe following code block generates the text:\n\nIt Starts by choosing a start string, initializing the RNN state and setting the number of characters to generate.\n\nGet the prediction distribution of the next character using the start string and the RNN state.\n\nThen, use a categorical distribution to calculate the index of the predicted character. Use this predicted character as our next input to the model.\n\nThe RNN state returned by the model is fed back into the model so that it now has more context, instead than only one character. After predicting the next character, the modified RNN states are again fed back into the model, which is how it learns as it gets more context from the previously predicted characters.\n\n![](https:\/\/raw.githubusercontent.com\/tensorflow\/docs\/master\/site\/en\/tutorials\/text\/images\/text_generation_sampling.png)","f3af4325":"# Vectorize the text\nBefore training, we need to map strings to a numerical representation. Create two lookup tables: one mapping characters to numbers, and another for numbers to characters.","10f4b7c0":"Use tf.keras.Sequential to define the model. For this simple example three layers are used to define our model:\n\ntf.keras.layers.Embedding: The input layer. A trainable lookup table that will map the numbers of each character to a vector with embedding_dim dimensions;\ntf.keras.layers.GRU: A type of RNN with size units=rnn_units (You can also use a LSTM layer here.)\ntf.keras.layers.Dense: The output layer, with vocab_size outputs."}}