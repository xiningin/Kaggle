{"cell_type":{"f38fd3b4":"code","d36bedd8":"code","398e1fdf":"code","7c29224e":"code","3bf7b83b":"code","47860529":"code","9ed215a4":"code","dd992729":"code","a47c2ce5":"code","484227f1":"code","75e7ad7e":"code","ddba9de9":"code","94211e40":"code","999602ee":"code","a1202137":"code","74ae2350":"code","77bd2c9a":"code","ce522179":"code","2150a7ed":"code","c4fa1268":"code","56158ea7":"code","c27c62d4":"code","d8a3afbc":"code","aa0d7aca":"code","221b0288":"code","06f6fc23":"code","f01fa0d7":"code","44f46c6d":"code","d4d387be":"code","ac90f827":"code","74c0b297":"code","a9620e38":"code","75ea9f70":"code","ff5c5102":"code","ec508bb3":"code","93948673":"code","b663d18f":"code","eb7bd503":"code","aef75b81":"code","95579a07":"code","e68b3eb4":"code","4fe66840":"code","20350fde":"code","0a8636ad":"code","0eb0fac2":"code","942392f0":"code","95db15fd":"code","10cbecc7":"code","794c2895":"code","00165e50":"code","4d640b54":"code","0155fad1":"code","97286678":"code","78440b38":"code","7d011f64":"code","51c5b334":"code","e82cb98c":"code","ae02574e":"code","7bfc54c4":"code","ad47a048":"code","1fe98204":"code","4a70c203":"code","7e50e23d":"code","38637805":"code","1c608591":"code","fb88de4d":"code","1c08217c":"code","9e0511c4":"code","82097572":"code","9e715d04":"code","82695627":"code","9446214c":"code","7eec7e6b":"code","a07d878d":"code","f194857a":"code","0e447279":"code","c42604b0":"code","057d521b":"code","0fef8a12":"code","b7a9c2bc":"code","0aac72ef":"code","4b9378d6":"code","3e911a02":"code","f1bf954c":"code","dd412110":"code","4838fee3":"code","1dc64402":"code","c485882d":"code","fcc133af":"code","432a4a93":"code","23fb6424":"code","9aec0020":"markdown","1a25ca17":"markdown","ea57a251":"markdown","48ae6ebb":"markdown","7e56b835":"markdown","e8578036":"markdown","4059ab4d":"markdown","ca94a0a4":"markdown","d653220e":"markdown","99039126":"markdown","4b2e413c":"markdown","e6d14251":"markdown","e802db19":"markdown","9e53f206":"markdown","ea967775":"markdown","064becc7":"markdown"},"source":{"f38fd3b4":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings(\"ignore\")","d36bedd8":"import os\nprint(os.listdir(\"..\/input\"))\n","398e1fdf":"train_df = pd.read_csv(\"..\/input\/train.csv\")\ntest_df = pd.read_csv(\"..\/input\/test.csv\")","7c29224e":"train_df.head()","3bf7b83b":"sale_price = train_df[\"SalePrice\"]","47860529":"test_df.head()","9ed215a4":"train_df.shape, test_df.shape","dd992729":"train_df.info()","a47c2ce5":"test_df.info()","484227f1":"train_df.describe(include=\"all\") # include both categorical and numerical features","75e7ad7e":"train_df.drop(\"Id\", axis =1,inplace = True)\ntest_id = test_df[\"Id\"]\ntest_df.drop(\"Id\", axis =1,inplace = True)","ddba9de9":"train_df.shape,test_df.shape","94211e40":"from scipy import stats","999602ee":"plt.subplots(figsize=(12,9))\nsns.distplot(train_df['SalePrice'], fit=stats.norm)","a1202137":"train_df['SalePrice'] = np.log1p(train_df['SalePrice']) # log transform to make it more \"normal\"","74ae2350":"plt.subplots(figsize=(12,9))\nsns.distplot(train_df['SalePrice'], fit=stats.norm)","77bd2c9a":"all_df = pd.concat((train_df,test_df)).reset_index(drop = True)","ce522179":"all_df.drop(['SalePrice'],axis =1,inplace = True)","2150a7ed":"all_df.shape","c4fa1268":"numeric_cols = list(all_df._get_numeric_data().columns) ","56158ea7":"print((numeric_cols))","c27c62d4":"numeric_cols_df = all_df[['MSSubClass', 'LotFrontage', 'LotArea', 'OverallQual', 'OverallCond', 'YearBuilt', 'YearRemodAdd', \n                       'MasVnrArea', 'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', '1stFlrSF', '2ndFlrSF', \n                       'LowQualFinSF', 'GrLivArea', 'BsmtFullBath', 'BsmtHalfBath', 'FullBath', 'HalfBath', 'BedroomAbvGr',\n                       'KitchenAbvGr', 'TotRmsAbvGrd', 'Fireplaces', 'GarageYrBlt', 'GarageCars', 'GarageArea', \n                       'WoodDeckSF', \n                       'OpenPorchSF', 'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea', 'MiscVal', 'MoSold', \n                       'YrSold']]","d8a3afbc":"numeric_cols_df.shape","aa0d7aca":"numeric_cols_df.hist(bins =20, figsize = (20,20))\nplt.show()","221b0288":"for i in train_df[numeric_cols].columns:\n    plt.figure(figsize = (8,4))\n    plt.scatter( train_df[numeric_cols][i],train_df[\"SalePrice\"])\n    plt.xlabel(i)\n    plt.ylabel(\"SalePrice\")","06f6fc23":"corr = train_df[train_df._get_numeric_data().columns].corr()\nplt.subplots(figsize=(20,9))\nsns.heatmap(corr)","f01fa0d7":"# filtering out only highly co-related features\ntop_feature = corr.index[abs(corr['SalePrice']>0.5)]\nplt.subplots(figsize=(12, 8))\ntop_corr = train_df[train_df._get_numeric_data().columns][top_feature].corr()\nsns.heatmap(top_corr, annot=True)\nplt.show()","44f46c6d":"train_df[\"OverallQual\"].unique() # listing values for highest correlated feature with target variable","d4d387be":"sns.barplot(train_df.OverallQual, train_df.SalePrice) # plotting the highest correlated feature","ac90f827":"plt.figure(figsize=(18, 8))\nsns.boxplot(x=train_df.OverallQual, y=train_df.SalePrice)","74c0b297":"col = ['SalePrice', 'OverallQual', 'GrLivArea', 'GarageCars', 'TotalBsmtSF', 'FullBath', 'TotRmsAbvGrd', 'YearBuilt',\n       '1stFlrSF']\nsns.set(style='ticks')\nsns.pairplot(train_df[col], height=3, kind='reg')","a9620e38":"data_nan = (numeric_cols_df.isnull().sum() \/ len(numeric_cols_df)) * 100\ndata_nan = data_nan.drop(data_nan[data_nan == 0].index).sort_values(ascending=False)[:20]\nmissing_data = pd.DataFrame({'Missing Ratio' :data_nan})\nmissing_data","75ea9f70":"plt.figure(figsize = (8,5))\nsns.barplot(x=data_nan.index, y=data_nan)\nplt.xlabel('Features', fontsize=15)\nplt.xticks(rotation= 'vertical' )\nplt.ylabel('Percent of missing values', fontsize=15)\nplt.title('Percent missing data by feature', fontsize=15)","ff5c5102":"all_df[\"LotFrontage\"] = all_df.groupby(\"Neighborhood\")[\"LotFrontage\"].transform(lambda x: x.fillna(x.median()))","ec508bb3":"all_df[\"MasVnrArea\"] = all_df[\"MasVnrArea\"].fillna(0)","93948673":"all_df[\"GarageYrBlt\"] = all_df[\"GarageYrBlt\"].fillna(0)","b663d18f":"all_df[\"BsmtFinSF2\"] = all_df[\"BsmtFinSF2\"].fillna(0)","eb7bd503":"all_df['BsmtFinSF1'] = all_df[\"BsmtFinSF1\"].fillna(0)","aef75b81":"all_df[\"BsmtHalfBath\"] = all_df[\"BsmtHalfBath\"].fillna(0)","95579a07":"all_df['BsmtFullBath'] = all_df[\"BsmtFullBath\"].fillna(0)","e68b3eb4":"all_df['GarageArea'] = all_df[\"GarageArea\"].fillna(0)","4fe66840":"all_df[\"GarageCars\"] = all_df[\"GarageCars\"].fillna(0)","20350fde":"all_df[\"TotalBsmtSF\"] = all_df[\"TotalBsmtSF\"].fillna(0)","0a8636ad":"all_df[\"BsmtUnfSF\"] = all_df[\"BsmtUnfSF\"].fillna(0)","0eb0fac2":"categ_col = list(set(all_df.columns.unique()) - set(numeric_cols))","942392f0":"all_df.shape","95db15fd":"print(len(categ_col))","10cbecc7":"print((categ_col))","794c2895":"categ_col_df = all_df[['Neighborhood', 'MSZoning', 'RoofStyle', 'SaleCondition', 'HouseStyle', 'Utilities', 'LandContour',\n                        'MasVnrType', 'Functional', 'Condition1', 'KitchenQual', 'ExterQual', 'PoolQC', 'Foundation',\n                        'Heating', 'LotConfig', 'GarageCond', 'LandSlope', 'Street', 'Exterior2nd', 'BsmtQual', \n                        'Exterior1st', 'GarageFinish', 'BsmtExposure', 'GarageType', 'HeatingQC', 'CentralAir', \n                        'PavedDrive', 'SaleType', 'BsmtCond', 'RoofMatl', 'Alley', 'LotShape', 'BldgType', 'BsmtFinType1', \n                        'GarageQual', 'Electrical', 'Fence', 'MiscFeature', 'ExterCond', 'FireplaceQu', 'BsmtFinType2',\n                        'Condition2']]","00165e50":"for i in categ_col_df:\n    train_df.boxplot(\"SalePrice\",i, rot = 30, figsize = (12,6))","4d640b54":"data_nan1 = (categ_col_df.isnull().sum() \/ len(categ_col_df)) * 100\ndata_nan1 = data_nan1.drop(data_nan1[data_nan1 == 0].index).sort_values(ascending=False)[:30]\nmissing_data = pd.DataFrame({'Missing Ratio' :data_nan1})\nmissing_data","0155fad1":"plt.figure(figsize = (8,5))\nplt.xticks(rotation =90)\nsns.barplot(x=data_nan1.index, y=data_nan1)\nplt.xlabel('Features', fontsize=15)\nplt.ylabel('Percent of missing values', fontsize=15)\nplt.title('Percent missing data by feature', fontsize=15)","97286678":"all_df[\"PoolQC\"] = all_df[\"PoolQC\"].fillna(\"None\")","78440b38":"all_df[\"MiscFeature\"] = all_df[\"MiscFeature\"].fillna(\"None\")","7d011f64":"all_df[\"Alley\"] = all_df[\"Alley\"].fillna(\"None\")","51c5b334":"all_df[\"Fence\"] = all_df[\"Fence\"].fillna(\"None\")","e82cb98c":"all_df[\"FireplaceQu\"] = all_df[\"FireplaceQu\"].fillna(\"None\")","ae02574e":"for col in ('GarageType', 'GarageFinish', 'GarageQual', 'GarageCond'):\n    all_df[col] = all_df[col].fillna('None')","7bfc54c4":"for col in ('BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2'):\n    all_df[col] = all_df[col].fillna('None')","ad47a048":"all_df[\"MasVnrType\"] = all_df[\"MasVnrType\"].fillna(\"None\")","1fe98204":"all_df[\"MSZoning\"] = all_df[\"MSZoning\"].fillna(\"None\")","4a70c203":"all_df[\"Exterior1st\"] =all_df[\"Exterior1st\"].fillna(\"None\")","7e50e23d":"all_df[\"Exterior2nd\"] = all_df[\"Exterior2nd\"].fillna(\"None\")","38637805":"all_df[\"Functional\"] = all_df[\"Functional\"].fillna(\"None\")","1c608591":"all_df[\"SaleType\"] = all_df[\"SaleType\"].fillna(\"None\")","fb88de4d":"all_df[\"KitchenQual\"] = all_df[\"KitchenQual\"].fillna(\"None\")","1c08217c":"all_df['Electrical'] = all_df['Electrical'].fillna(all_df['Electrical'].mode()[0])","9e0511c4":"all_df = all_df.drop(['Utilities'], axis=1)","82097572":"all_df.isnull().values.sum()","9e715d04":"from sklearn.preprocessing import LabelEncoder","82695627":"cols = ('Neighborhood', 'MSZoning', 'RoofStyle', 'SaleCondition', 'HouseStyle', 'LandContour',\n                        'MasVnrType', 'Functional', 'Condition1', 'KitchenQual', 'ExterQual', 'PoolQC', 'Foundation',\n                        'Heating', 'LotConfig', 'GarageCond', 'LandSlope', 'Street', 'Exterior2nd', 'BsmtQual', \n                        'Exterior1st', 'GarageFinish', 'BsmtExposure', 'GarageType', 'HeatingQC', 'CentralAir', \n                        'PavedDrive', 'SaleType', 'BsmtCond', 'RoofMatl', 'Alley', 'LotShape', 'BldgType', 'BsmtFinType1', \n                        'GarageQual', 'Electrical', 'Fence', 'MiscFeature', 'ExterCond', 'FireplaceQu', 'BsmtFinType2',\n                        'Condition2')","9446214c":"for c in cols:\n    label = LabelEncoder() \n    label.fit(list(all_df[c].values)) \n    all_df[c] = label.transform(list(all_df[c].values))","7eec7e6b":"all_df.shape","a07d878d":"all_df.head()","f194857a":"ntrain = train_df.shape[0]\nntrain","0e447279":"ntest = test_df.shape[0]\nntest","c42604b0":"new_train_df = all_df[:ntrain].copy()","057d521b":"new_train_df[\"SalePrice\"] = sale_price","0fef8a12":"new_train_df['SalePrice'].head()","b7a9c2bc":"test_df = all_df[:ntest]\ntest_df.shape","0aac72ef":"X = new_train_df.drop(\"SalePrice\", axis = 1)","4b9378d6":"Y = new_train_df[\"SalePrice\"]","3e911a02":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=7)","f1bf954c":"from sklearn.linear_model import LinearRegression\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\nprint(\"Accuracy is\", model.score(X_test, y_test)*100)","dd412110":"from sklearn.ensemble import RandomForestRegressor\nmodel = RandomForestRegressor(n_estimators=1000)\nmodel.fit(X_train, y_train)\nprint(\"Accuracy is \", model.score(X_test, y_test)*100)","4838fee3":"from sklearn.ensemble import GradientBoostingRegressor\nGBR = GradientBoostingRegressor(n_estimators=100, max_depth=4)\nGBR.fit(X_train, y_train)\nprint(\"Accuracy is \", GBR.score(X_test, y_test)*100)","1dc64402":"from sklearn.model_selection import cross_val_score\nfrom sklearn.linear_model import Ridge\nridge = Ridge()\nMSEs = cross_val_score(ridge, X, Y, cv=5)\nprint(MSEs)\nmean_MSE = np.mean(MSEs)\nprint(mean_MSE)","c485882d":"#Test predictions","fcc133af":"predicted_price = pd.Series(GBR.predict(test_df), name = \"SalePrice\")\n\nsubmission_df = pd.concat([test_id,predicted_price], axis=1)","432a4a93":"submission_df.head()","23fb6424":"# filename = 'House SalePrice Predictions 1.csv'\n\n# submission_df.to_csv(filename,index=False)\n\n# print('Saved file: ' + filename)","9aec0020":"In the above scatter plot, correlation between target variable and each of the numeric features can be seen.","1a25ca17":"Now, it's more symmetric \/ normal.","ea57a251":"# Analysis of Target Variable:","48ae6ebb":"Above plots show distribution of each numeric feature's value. Here we can identify more categorical features and have already been label encoded with numrical values. Also, some of the freatures are normally distributed.","7e56b835":"# Handling missing data in numeric cols:","e8578036":"3. Gradient Boosting:","4059ab4d":"# Handling missing data in categorical cols:","ca94a0a4":"# Exploration of Categorical Features:","d653220e":"# Exploration of numeric features:","99039126":"# Model Fitting:","4b2e413c":"4. Ridge Regression:","e6d14251":"1. Linear Regression:","e802db19":"2. Random Forest:","9e53f206":"In the above plot we can see that the sale price is positively skewed. Let's apply log transformation to make it more normal","ea967775":"An increasing trend in SalePrice can be observed with increasing Quality. This is what we expect.","064becc7":"Label Encoding:"}}