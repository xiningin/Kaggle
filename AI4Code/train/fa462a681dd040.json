{"cell_type":{"49186198":"code","f55a0c2d":"code","f51f37bb":"code","39ea442f":"code","e552d22a":"code","c78d808c":"code","5b34081b":"code","e713e51d":"code","0a26b0be":"code","f4e16344":"code","2da44e46":"code","24f19362":"code","54c91e0c":"code","18779330":"code","a7edb920":"code","e7507d0d":"code","51d47055":"code","867b71ff":"code","d0302ac6":"code","14123589":"code","6383fbf4":"markdown","b43c78ba":"markdown","2b33a4a9":"markdown"},"source":{"49186198":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","f55a0c2d":"train_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntrain_data.head()","f51f37bb":"test_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_data.head()","39ea442f":"train_data.info()","e552d22a":"train_data.describe()","c78d808c":"def substrings_in_string(big_string, substrings):\n    for substr in substrings:\n        if str(big_string).find(substr) != -1:\n            return substr\n    return np.nan\n\n\ndef phase1clean(df):\n    #setting silly values to nan\n    df.Fare = df.Fare.map(lambda x: np.nan if x==0 else x)\n    \n    #Special case for cabins as nan may be signal\n    df.Cabin = df.Cabin.fillna('Unknown')    \n\n    #creating a title column from name\n    title_list=['Mrs', 'Mr', 'Master', 'Miss', 'Major', 'Rev',\n                'Dr', 'Ms', 'Mlle','Col', 'Capt', 'Mme', 'Countess',\n                'Don', 'Jonkheer']\n\n    df['Title']=df['Name'].map(lambda x: substrings_in_string(x, title_list))\n    \n    #replacing all titles with mr, mrs, miss, master\n    def replace_titles(x):\n        title=x['Title']\n        if title in ['Don', 'Major', 'Capt', 'Jonkheer', 'Rev', 'Col']:\n            return 'Mr'\n        elif title in ['Countess', 'Mme']:\n            return 'Mrs'\n        elif title in ['Mlle', 'Ms']:\n            return 'Miss'\n        elif title =='Dr':\n            if x['Sex']=='Male':\n                return 'Mr'\n            else:\n                return 'Mrs'\n        else:\n            return title\n    df['Title']=df.apply(replace_titles, axis=1)\n\n    #Turning cabin number into Deck\n    cabin_list = ['A', 'B', 'C', 'D', 'E', 'F', 'T', 'G', 'Unknown']\n    df['Deck']=df['Cabin'].map(lambda x: substrings_in_string(x, cabin_list))\n        \n    #Creating new family_size column\n    df['Family_Size']=df['SibSp']+df['Parch']\n    \n    return df\n\ndef phase2clean(train, test):\n    #data type dictionary\n    data_type_dict={'Pclass':'ordinal', 'Sex':'nominal', \n                    'Age':'numeric', \n                    'Fare':'numeric', 'Embarked':'nominal', 'Title':'nominal',\n                    'Deck':'nominal', 'Family_Size':'ordinal'}      \n\n    #imputing nan values\n    for df in [train, test]:\n    #     classmeans = df.pivot_table('Fare', rows='Pclass', aggfunc='mean')\n        classmeans = df.groupby(df.Pclass).Fare.mean()\n        df.Fare = df[['Fare', 'Pclass']].apply(lambda x: classmeans[x['Pclass']] if pd.isnull(x['Fare']) else x['Fare'], axis=1 )\n        meanAge=np.mean(df.Age)\n        df.Age=df.Age.fillna(meanAge)\n        modeEmbarked = df.Embarked.mode()[0]\n        df.Embarked = df.Embarked.fillna(modeEmbarked)\n\n\n#    Fare per person\n    for df in [train, test]:\n        df['Fare_Per_Person']=df['Fare']\/(df['Family_Size']+1)\n    \n    #Age times class\n    for df in [train, test]:\n        df['Age*Class']=df['Age']*df['Pclass']\n    \n    data_type_dict['Fare_Per_Person']='numeric'\n    data_type_dict['Age*Class']='numeric'\n    \n    return [train,test, data_type_dict]\n","5b34081b":"train_data = phase1clean(train_data)\ntrain_data.head()","e713e51d":"phase1clean(test_data)\ntest_data.head()","0a26b0be":"phase2clean(train_data, test_data)","f4e16344":"train_data, test_data, data_type_dict=phase2clean(train_data, test_data)","2da44e46":"import pandas_profiling as pp\npp.ProfileReport(train_data)","24f19362":"# women = train_data.loc[train_data.Sex == 'female'][\"Survived\"]\n# rate_women = sum(women)\/len(women)\n\n# print(\"% of women who survived:\", rate_women)","54c91e0c":"# men = train_data.loc[train_data.Sex == 'male'][\"Survived\"]\n# rate_men = sum(men)\/len(men)\n\n# print(\"% of men who survived:\", rate_men)","18779330":"# train_data.reindex()","a7edb920":"# train_data = train_data.dropna()\n# test_data = test_data.dropna()","e7507d0d":"y = train_data[\"Survived\"]","51d47055":"features = [\"Title\",\"Deck\",\"Family_Size\",\"Age*Class\",\"Fare_Per_Person\",\"Sex\",\"Age\",\"Fare\"]\nX = pd.get_dummies(train_data[features])\nX_test = pd.get_dummies(test_data[features])\nX.drop('Deck_T', axis=1, inplace=True)","867b71ff":"X","d0302ac6":"X_test","14123589":"from sklearn.ensemble import RandomForestClassifier\n# from sklearn.tree import DecisionTreeRegressor \n# from sklearn.metrics import mean_absolute_error\n\n\n\nmodel = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=1)\nmodel.fit(X, y)\npredictions = model.predict(X_test)\n\noutput = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\noutput.to_csv('submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")\n\n# # test 2\n# X = train_data[features]\n# for max_leaf_nodes in [5, 10, 20, 50 ,100]\n#     test2 = DecisionTreeRegressor(max_leaf_nodes)\n","6383fbf4":"## Detailed consideration\nTo do this, import pandas_profiling","b43c78ba":"I probably not imagine what do with infographic to the top\n\n*But I read tutorial*\n\nThis is very important","2b33a4a9":"# Create features"}}