{"cell_type":{"78c9b568":"code","3c71f791":"code","04d23a3a":"code","7460ab0c":"code","388ad419":"code","ef15dfce":"code","c3029b8d":"code","366e0e33":"code","3a5d1482":"code","00efc001":"code","91e8dbc8":"code","63da95e4":"code","0bd2258e":"code","17a04ae1":"code","4a3c25b9":"code","a1997bbc":"code","ef5fffb6":"code","c3e3a179":"code","c1df5a89":"code","87571dba":"code","b046d67a":"code","b764e929":"code","0e21d3e9":"code","f9bd590e":"code","a53073f7":"code","a1f3d4cc":"code","1587525d":"code","1833be33":"code","ce5ace93":"code","dc20fa27":"code","ff6d89cf":"code","27920496":"code","8fb35ebb":"code","21477785":"code","d55a45e0":"code","6f1d43ba":"code","56756f52":"code","abbfae7f":"code","3d2f1b2d":"code","10d32015":"code","9e12f343":"code","8d497101":"code","87b871a0":"code","978e0757":"code","f7905a0b":"code","56da46ac":"code","8d2a2936":"markdown","8d2d133a":"markdown","bda5fc5f":"markdown","1c30403c":"markdown","a4f7ca69":"markdown","ebfcad5a":"markdown","43be0669":"markdown","79e1d8b5":"markdown","598082cf":"markdown","3639c965":"markdown","7b5593db":"markdown","2b6a8b1e":"markdown","3c24ebf2":"markdown","0ee72fbf":"markdown","bc860fcd":"markdown","88ffaa79":"markdown","b79d0538":"markdown","88797da5":"markdown","86523608":"markdown","6b606802":"markdown","5871a887":"markdown","82e6f550":"markdown","183bcc10":"markdown","c0b41d2a":"markdown","24a59ea5":"markdown","7a97ac85":"markdown","06e33520":"markdown","f1b89285":"markdown","0ffcbbd4":"markdown","dab713b6":"markdown","58d32c13":"markdown","0ec93773":"markdown","75e68d71":"markdown","baf80d29":"markdown","57f091c6":"markdown"},"source":{"78c9b568":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline","3c71f791":"df=pd.read_csv('..\/input\/mushrooms\/mushrooms.csv')","04d23a3a":"df.shape","7460ab0c":"df.head()","388ad419":"df.info()","ef15dfce":"df.describe()","c3029b8d":"df['class'].unique()","366e0e33":"df['class'].value_counts()","3a5d1482":"count = df['class'].value_counts()\nplt.figure(figsize=(8,7))\nsns.barplot(count.index,count.values, alpha=0.8, palette='prism')\nplt.ylabel('Count',fontsize=12)\nplt.xlabel('Class', fontsize=12)\nplt.title('Number of poisonous\/edible mushrooms')\nplt.show()","00efc001":"df.isna().sum()","91e8dbc8":"df.columns","63da95e4":"def feature_class_plot(hue,features):\n    for i, col in enumerate(features.columns):\n        plt.figure(i)\n        plt.figure(figsize=(10,8))\n        ax = sns.countplot(x=df[col], hue=hue,data=df)\n        ","0bd2258e":"hue = df['class']\nfeatures = df.drop('class', 1)\nfeature_class_plot(hue,features)","17a04ae1":"df =df.astype('category')","4a3c25b9":"from sklearn.preprocessing import LabelEncoder\nlabelencoder=LabelEncoder()\nfor column in df.columns:\n    df[column]=labelencoder.fit_transform(df[column])","a1997bbc":"df.head()","ef5fffb6":"df.describe()","c3e3a179":"df['veil-type'].unique()","c1df5a89":"df= df.drop(['veil-type'], axis=1)","87571dba":"df.corr()","b046d67a":"plt.figure(figsize=(18,16))\nsns.heatmap(df.corr(), linewidths=.1, cmap='Purples', annot= True)","b764e929":"from statsmodels.stats.outliers_influence import variance_inflation_factor","0e21d3e9":"X= df.drop(columns=['class'])\nY= df['class']","f9bd590e":"vif=pd.DataFrame()\nvif['vif'] = [variance_inflation_factor(X.values,i) for i in range(X.shape[1])]\nvif['Features']= X.columns\nvif","a53073f7":"df= df.drop(['veil-color','ring-type','bruises','spore-print-color','ring-number','gill-attachment'], axis=1)","a1f3d4cc":"df.shape # shpae of dataset after removing some features","1587525d":"plt.figure(figsize=(18,16))\nsns.heatmap(df.corr(), linewidths=.1, cmap='coolwarm', annot= True)","1833be33":"X= df.drop(columns=['class'])\nY= df['class']","ce5ace93":"vif=pd.DataFrame()\nvif['vif'] = [variance_inflation_factor(X.values,i) for i in range(X.shape[1])]\nvif['Features']= X.columns\nvif","dc20fa27":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import accuracy_score, confusion_matrix,classification_report,f1_score","ff6d89cf":"X_train, X_test, Y_train, Y_test = train_test_split(X, Y, random_state=42, test_size=.33)\nprint('Training feature matrix size:',X_train.shape)\nprint('Training target vector size:',Y_train.shape)\nprint('Test feature matrix size:',X_test.shape)\nprint('Test target vector size:',Y_test.shape)","27920496":"X_train, X_test, Y_train, Y_test = train_test_split(X, Y, random_state=167, test_size=.33)\nlog_reg=LogisticRegression(solver='liblinear')\nlog_reg.fit(X_train,Y_train)\ny_pred=log_reg.predict(X_test)\nprint('\\033[1m'+'Logistics Regression Evaluation'+'\\033[0m')\nprint('\\n')\nprint('\\033[1m'+'Accuracy Score of Logistics Regression :'+'\\033[0m', accuracy_score(Y_test, y_pred))\nprint('\\n')\nprint('\\033[1m'+'Confusion matrix of Logistics Regression :'+'\\033[0m \\n',confusion_matrix(Y_test, y_pred))\nprint('\\n')\nprint('\\033[1m'+'classification Report of Logistics Regression'+'\\033[0m \\n',classification_report(Y_test, y_pred))","8fb35ebb":"mnb = MultinomialNB()\nsvc=SVC()\ndtc = DecisionTreeClassifier()\n\nmodel = [mnb,svc,dtc]\n\nfor m in model:\n    m.fit(X_train,Y_train)\n    y_pred=m.predict(X_test)\n    print('\\033[1m'+'Classification ML Algorithm Evaluation Matrix',m,'is' +'\\033[0m')\n    print('\\n')\n    print('\\033[1m'+'Accuracy Score :'+'\\033[0m\\n', accuracy_score(Y_test, y_pred))\n    print('\\n')\n    print('\\033[1m'+'Confusion matrix :'+'\\033[0m \\n',confusion_matrix(Y_test, y_pred))\n    print('\\n')\n    print('\\033[1m'+'Classification Report :'+'\\033[0m \\n',classification_report(Y_test, y_pred))\n    print('\\n')","21477785":"from sklearn.model_selection import cross_val_score\nscore = cross_val_score(dtc, X, Y, cv =6)\nprint('\\033[1m'+'Cross Validation Score Decision Tree Classifier :'+'\\033[0m\\n')\nprint(\"Score :\" ,score)\nprint(\"Mean Score :\",score.mean())\nprint(\"Std deviation :\",score.std())","d55a45e0":"from sklearn.model_selection import cross_val_score\nscore = cross_val_score(log_reg, X, Y, cv =6)\nprint('\\033[1m'+'Cross Validation Score Logistics Regression :'+'\\033[0m\\n')\nprint(\"Score :\" ,score)\nprint(\"Mean Score :\",score.mean())\nprint(\"Std deviation :\",score.std())","6f1d43ba":"from sklearn.model_selection import cross_val_score\nscore = cross_val_score(mnb, X, Y, cv =6)\nprint('\\033[1m'+'Cross Validation Score Multinomial :'+'\\033[0m\\n')\nprint(\"Score :\" ,score)\nprint(\"Mean Score :\",score.mean())\nprint(\"Std deviation :\",score.std())","56756f52":"from sklearn.model_selection import cross_val_score\nscore = cross_val_score(svc, X, Y, cv =6)\nprint('\\033[1m'+'Cross Validation Score SVC :'+'\\033[0m\\n')\nprint(\"Score :\" ,score)\nprint(\"Mean Score :\",score.mean())\nprint(\"Std deviation :\",score.std())","abbfae7f":"from sklearn.model_selection import GridSearchCV","3d2f1b2d":"parameter = {'max_depth': range(2,20,3),\n            'criterion':['gini','entropy'],\n            'splitter':['best','random']}","10d32015":"GCV=GridSearchCV(DecisionTreeClassifier(),parameter,cv=6)","9e12f343":"GCV.fit(X_train,Y_train)\n","8d497101":"GCV.best_params_","87b871a0":"Final_mod = DecisionTreeClassifier(criterion='gini', max_depth=14,splitter='best')\nFinal_mod.fit(X_train,Y_train)\ny_pred=Final_mod.predict(X_test)\nprint('\\033[1m'+'Accuracy Score :'+'\\033[0m\\n', accuracy_score(Y_test, y_pred))","978e0757":"from sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import roc_curve\n\ny_pred_prob = Final_mod.predict_proba(X_test)[:,1]\nfpr, tpr, thresholds = roc_curve(Y_test,y_pred_prob)\nplt.plot([0,1],[0,1], 'k--')\nplt.plot(fpr, tpr, label='Decision tree classifier')\nplt.xlabel('False postive rate')\nplt.ylabel('True postive rate')\nplt.show()\nauc_score = roc_auc_score(Y_test, Final_mod.predict(X_test))\nprint('\\033[1m'+'Auc Score :'+'\\033[0m\\n',auc_score)","f7905a0b":"import joblib","56da46ac":" joblib.dump(Final_mod,'Mushroom_Final.pkl')","8d2a2936":"### Importing dataset","8d2d133a":"##### Checking correlation between features","bda5fc5f":"Downlaod Files:\nhttps:\/\/github.com\/dsrscientist\/dataset1\/blob\/master\/mushrooms.csv","1c30403c":" ##### Checking Heatmap after removing some outliers","a4f7ca69":"## Converting Categorical data using Label Encoder","ebfcad5a":"## Hyper Parameter Tuning : GridSearchCV","43be0669":"##### We can see that Decision Tree Classifier gives maximum Accuracy so we will continue further investigation with decision tree classifier","79e1d8b5":"## Saving model","598082cf":"Observation:\n\n1.Gill Size: If the gills are narrow, the mushroom is likly to be poisonous. If they are broad, then it\u2019s more likely to be edible.\n\n2.Ring Type: Pendant ring types are very likely to be edible. Evanescent and large ring types are likely to be poisonous.\n\n3.Cap Surface: If the mushroom has a more fibrous surface, it\u2019s more likely to be edible. Smooth or scaly mushrooms are slightly more likely to be poisonous.\n\n4.Bruises: If the mushroom has bruises, it\u2019s likely to be edible. If the mushroom does not have bruises, it\u2019s more likely to be poisonous.\n\n5.Spore Print Color: Black and brown are highly likely to be edible. Tan and white colors are highly likely to be poisonous.","3639c965":"Attribute Information:\n\n1. cap-shape: bell=b,conical=c,convex=x,flat=f, knobbed=k,sunken=s\n2. cap-surface: fibrous=f,grooves=g,scaly=y,smooth=s\n3. cap-color: brown=n,buff=b,cinnamon=c,gray=g,green=r, pink=p,purple=u,red=e,white=w,yellow=y\n4. bruises?: bruises=t,no=f\n5. odor: almond=a,anise=l,creosote=c,fishy=y,foul=f, musty=m,none=n,pungent=p,spicy=s\n6. gill-attachment: attached=a,descending=d,free=f,notched=n\n7. gill-spacing: close=c,crowded=w,distant=d\n8. gill-size: broad=b,narrow=n\n9. gill-color: black=k,brown=n,buff=b,chocolate=h,gray=g, green=r,orange=o,pink=p,purple=u,red=e, white=w,yellow=y\n10. stalk-shape: enlarging=e,tapering=t\n11. stalk-root: bulbous=b,club=c,cup=u,equal=e, rhizomorphs=z,rooted=r,missing=?\n12. stalk-surface-above-ring: fibrous=f,scaly=y,silky=k,smooth=s\n13. stalk-surface-below-ring: fibrous=f,scaly=y,silky=k,smooth=s\n14. stalk-color-above-ring: brown=n,buff=b,cinnamon=c,gray=g,orange=o, pink=p,red=e,white=w,yellow=y\n15. stalk-color-below-ring: brown=n,buff=b,cinnamon=c,gray=g,orange=o, pink=p,red=e,white=w,yellow=y\n16. veil-type: partial=p,universal=u\n17. veil-color: brown=n,orange=o,white=w,yellow=y\n18. ring-number: none=n,one=o,two=t\n19. ring-type: cobwebby=c,evanescent=e,flaring=f,large=l, none=n,pendant=p,sheathing=s,zone=z\n20. spore-print-color: black=k,brown=n,buff=b,chocolate=h,green=r, orange=o,purple=u,white=w,yellow=y\n21. population: abundant=a,clustered=c,numerous=n, scattered=s,several=v,solitary=y\n22. habitat: grasses=g,leaves=l,meadows=m,paths=p, urban=u,waste=w,woods=d","7b5593db":"## Final Model","2b6a8b1e":"On basis of Correlation and multicollinearity we can now remove Ring-type,bruises, veil-color, spore-print-color, ring -number, gill-attachment from dataset","3c24ebf2":"#####  AOC ROC of Final model","0ee72fbf":"# ","bc860fcd":" class p represent poisonous mushroom and class e represent ediable mushroom species.","88ffaa79":" The column \u201cveil-type\u201d is 0 and not contributing to the data so we\u2019ll remove it.","b79d0538":"# Feature selection","88797da5":"# EDA","86523608":"### Ploting countplot of features Vs Class to get insight which sub feature most likely to ediable","6b606802":"#####  Checking multicollinearity after removal of feature","5871a887":"We can see that gill-attachment, veil-color,ring-number,population, spore-print-color has high collinearity.","82e6f550":"1. Gill attachment (2 unique subcategories) and veil color (4 unique subcategories) are highly correlated with each other more than 90%. So we can keep one feature and drop other feature.\n2. Ring type (5 unique subcategories) and Bruises (2 unique subcategories) are highly correlated with each other (69%).\n3. Gill color(12 unique subcategories) and Ring type (5 unique subcategories) are 62% correlated with each other.\n4. Spore print color(9 unique subcategories) and gill size(2 unique subcategories) are 62% correlated with each other.\n\nFrom above data we can remove one feature which having less subcategories and keep other feature to check there exist any relation between subcategories and class of mushroom.\n\nBut before that let look at multicollinearity between feature.","183bcc10":"# ","c0b41d2a":"There is no missing values in dataset. It has 23 feature including one target variable. All feature are with object datatype.","24a59ea5":"### CrossValidation :","7a97ac85":"##### Checking Multicollinearity between features using variance_inflation_factor","06e33520":"### Finding best Random state","f1b89285":"If we compare count and frequecy from above table, we can easily notic that feature like gill attachment,gill spacing,  veil color, ring number are did not indicate any definitive characteristics to classify mushroom as ediable or posionous.","0ffcbbd4":"### Data Set Information:","dab713b6":"## Machine Learning Algorithm","58d32c13":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score, confusion_matrix,classification_report,f1_score\nmaxAccu=0\nmaxRS=0\nfor i in range(1,250):\n    X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size = 0.33, random_state=i)\n    log_reg=LogisticRegression()\n    log_reg.fit(X_train,Y_train)\n    y_pred=log_reg.predict(X_test)\n    acc=accuracy_score(Y_test,y_pred)\n    if acc>maxAccu:\n        maxAccu=acc\n        maxRS=i\nprint('Best accuracy is', maxAccu ,'on Random_state', maxRS)","0ec93773":"This data set includes descriptions of hypothetical samples corresponding to 23 species of gilled mushrooms in the Agaricus and Lepiota Family (pp. 500-525). Each species is identified as definitely edible, definitely poisonous, or of unknown edibility and not recommended. This latter class was combined with the poisonous one. The Guide clearly states that there is no simple rule for determining the edibility of a mushroom; no rule like ``leaflets three, let it be'' for Poisonous Oak and Ivy.","75e68d71":"## Objective:\n    In this project we will try to investigate and analyze dataset to answer mainly following two questions.\n    \n1.What types of machine learning models perform best on this dataset?\n\n2.Which features are most indicative of a poisonous mushroom?","baf80d29":"Here we can see that Decision tree Classifier gives maximum Accuracy. Clearly there is Overfitting so Regularization need to done.","57f091c6":"We can see that Dataset is balanced in nature and has enough counts from both classes"}}