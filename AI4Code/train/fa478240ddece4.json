{"cell_type":{"6b91631a":"code","672e5435":"code","60d8cda0":"code","c37749d5":"code","29f540ff":"code","4ee1be22":"code","c0a312d2":"code","723b1334":"code","16f07588":"code","82a7e7bd":"code","d8845476":"code","c4c70be3":"code","126a1106":"code","1b97490f":"code","f132455d":"code","1b93b64e":"code","0b65cd95":"code","fe7d941e":"code","ed996052":"code","160c3126":"code","ad3c2dd6":"code","62ea0d84":"code","cc8ce6ec":"code","817e6dd3":"code","a3f09c18":"code","3bf684b1":"code","9f9c3d9c":"code","3fa1ccb0":"code","f58a869d":"code","08d615f8":"code","9f904e13":"code","67a05090":"code","c0d30004":"code","d209f509":"code","fb354a2c":"code","deca4b49":"code","11910da2":"code","2d83f905":"code","4e51e579":"code","19985dff":"code","b1611660":"code","e6c767eb":"code","c03b43d6":"code","a480a7c3":"code","4254c981":"code","f72f3d3d":"code","739bdf27":"code","1ed63e59":"code","89290cf2":"code","5762de32":"code","de198aa0":"code","6aa4540a":"code","c5833d99":"code","0007fa6c":"code","d2f49753":"code","fec4c7c3":"code","df5400d9":"code","b458efd6":"code","0e6a5a07":"code","73b6580d":"markdown","2c98d8e1":"markdown","98ce111b":"markdown","841e3235":"markdown","a47cd456":"markdown","47bab7dc":"markdown","f9a98a7a":"markdown","984c08af":"markdown","cd00d449":"markdown","a04eea44":"markdown","2e73fec8":"markdown","db211244":"markdown","1cf46b25":"markdown","90f9dd93":"markdown","9b309bef":"markdown","0dece45d":"markdown","55a5aed0":"markdown","152a6262":"markdown","4455845b":"markdown","a151a12d":"markdown","f4e7e033":"markdown","2400d112":"markdown","4919fc8f":"markdown","ad7d79d7":"markdown","93660092":"markdown","051bd874":"markdown","cb8680fd":"markdown","7d7f232c":"markdown","77af8d10":"markdown","a035106e":"markdown","0e94e97c":"markdown","4dbe3545":"markdown","91d83726":"markdown","ed843d29":"markdown","8ca823be":"markdown","619768c0":"markdown","4baa50ff":"markdown","c08189c6":"markdown","a65cc913":"markdown","350163bc":"markdown","f3b36672":"markdown","71e401e6":"markdown","57894485":"markdown","8a3c90f8":"markdown","fc5fdefc":"markdown","b0b2c0f6":"markdown","07313120":"markdown","b727d418":"markdown","07f358a5":"markdown","f0ca40aa":"markdown","5f856207":"markdown","fd62939f":"markdown","1e18b0a1":"markdown"},"source":{"6b91631a":"import sqlite3\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sb\n%matplotlib inline","672e5435":"#connect to the SQLLite database\npath = \"..\/input\/\"\ndatabase = path + 'database.sqlite'\n\ncon = sqlite3.connect(database)\n\n#check if connection works by asking for all tables\ntables = pd.read_sql(\"\"\"SELECT name\n                        FROM sqlite_master\n                        WHERE type='table';\"\"\", con)\ntables","60d8cda0":"df_teams = pd.read_sql_query(\n    \"SELECT * FROM Team;\", con)\ndf_teams.head()","c37749d5":"df_teamattr = pd.read_sql_query(\n    \"SELECT * FROM Team_Attributes;\", con)\ndf_teamattr.head()","29f540ff":"df_matchscores = pd.read_sql_query(\n    \"SELECT id, country_id, league_id, season, match_api_id, home_team_api_id, away_team_api_id, home_team_goal, away_team_goal FROM Match;\", con)\ndf_matchscores.head()","4ee1be22":"#query the database for players per match\ndf_match_players = pd.read_sql_query(\n    \"SELECT id, season, home_team_api_id, away_team_api_id, home_player_1, home_player_2, home_player_3, home_player_4, home_player_5, home_player_6, home_player_7, home_player_8, home_player_9, home_player_10, home_player_11, away_player_1, away_player_2, away_player_3, away_player_4, away_player_5, away_player_6, away_player_7, away_player_8, away_player_9, away_player_10, away_player_11 FROM Match;\", con)\ndf_match_players.tail()","c0a312d2":"#get players for home_teams per season\ndf_players_home_season = df_match_players[['home_team_api_id', 'season', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11']]\n\n#pivot the table and drop the null values for players\ndf_players_home_season = pd.melt(df_players_home_season, id_vars=['home_team_api_id', 'season'], var_name='position', value_name='player').dropna()\n\n#change columnname\ndf_players_home_season.rename(columns={'home_team_api_id': 'team_api_id'}, inplace=True)\n#drop column position\ndf_players_home_season.drop(columns=['position'], inplace=True)\n#since players play more than one match in a season we need to remover duplicates\ndf_players_home_season=df_players_home_season.drop_duplicates(subset=['team_api_id', 'season', 'player'], keep='first')\n\ndf_players_home_season.shape","723b1334":"#get players for away_teams per season\ndf_players_away_season = df_match_players[['away_team_api_id', 'season', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11']]\n\n#pivot the table and drop the null values for players\ndf_players_away_season = pd.melt(df_players_away_season, id_vars=['away_team_api_id', 'season'], var_name='position', value_name='player').dropna()\n\n#change columnname\ndf_players_away_season.rename(columns={'away_team_api_id': 'team_api_id'}, inplace=True)\n#drop column position\ndf_players_away_season.drop(columns=['position'], inplace=True)\n#since players play more than one match in a season we need to remover duplicates\ndf_players_away_season=df_players_away_season.drop_duplicates(subset=['team_api_id', 'season', 'player'], keep='first')\n\ndf_players_away_season.shape","16f07588":"#Now combine the two to get a list of all players\ndf_team_season_players = df_players_home_season.append(df_players_away_season, ignore_index=True)\n#remove duplicates\ndf_team_season_players=df_team_season_players.drop_duplicates(subset=['team_api_id', 'season', 'player'], keep='first')\n\ndf_team_season_players.head()","82a7e7bd":"df_players = pd.read_sql_query(\n    \"SELECT * FROM Player;\", con)\ndf_players.head()","d8845476":"df_playerattr = pd.read_sql_query(\n    \"SELECT * FROM Player_Attributes;\", con)\ndf_playerattr.head()","c4c70be3":"df_teams.info()","126a1106":"df_teams[df_teams.duplicated(['team_api_id'])]","1b97490f":"df_teamattr.info()","f132455d":"pd.read_sql_query(\"SELECT buildUpPlayDribblingClass, buildUpPlayDribbling FROM Team_Attributes WHERE buildUpPlayDribbling IS NULL GROUP BY buildUpPlayDribblingClass;\", con)","1b93b64e":"df_dribbling = df_teamattr[['buildUpPlayDribblingClass', 'buildUpPlayDribbling']]\ndf_dribblinglittle = df_dribbling[df_dribbling.buildUpPlayDribblingClass == 'Little']\ndf_dribblinglittle['buildUpPlayDribbling'].describe()","0b65cd95":"df_teamattr['buildUpPlayDribbling'].fillna(30, inplace=True)","fe7d941e":"df_teamattr.info()","ed996052":"df_teamattr.team_api_id.value_counts().describe()","160c3126":"df_match_players.info()","ad3c2dd6":"df_matchscores.info()","62ea0d84":"df_matchscores[df_matchscores.duplicated(['match_api_id'])]","cc8ce6ec":"df_players.info()","817e6dd3":"df_players[df_players.duplicated(['id'])]","a3f09c18":"df_matchscores.loc[df_matchscores['home_team_goal'] - df_matchscores['away_team_goal'] > 0, 'points_home_team'] = 3\ndf_matchscores.loc[df_matchscores['home_team_goal'] - df_matchscores['away_team_goal'] == 0, 'points_home_team'] = 1\ndf_matchscores.loc[df_matchscores['home_team_goal'] - df_matchscores['away_team_goal'] < 0, 'points_home_team'] = 0\ndf_matchscores.loc[df_matchscores['home_team_goal'] - df_matchscores['away_team_goal'] > 0, 'points_away_team'] = 0\ndf_matchscores.loc[df_matchscores['home_team_goal'] - df_matchscores['away_team_goal'] == 0, 'points_away_team'] = 1\ndf_matchscores.loc[df_matchscores['home_team_goal'] - df_matchscores['away_team_goal'] < 0, 'points_away_team'] = 3","3bf684b1":"df_matchscores.head()","9f9c3d9c":"#sum points for home_team\ndf_points_season_home = df_matchscores.groupby(['home_team_api_id', 'season'])['points_home_team'].agg(['sum','count']).reset_index()\n#rename columns\ndf_points_season_home.columns = ['team_api_id', 'season', 'points', 'matches']\ndf_points_season_home.head()","3fa1ccb0":"#sum points for away_team\ndf_points_season_away = df_matchscores.groupby(['away_team_api_id', 'season'])['points_away_team'].agg(['sum','count']).reset_index()\n#rename columns\ndf_points_season_away.columns = ['team_api_id', 'season', 'points', 'matches']\ndf_points_season_away.head()","f58a869d":"#join the 2 dataframes \ndf_points_season_both = pd.concat([df_points_season_home, df_points_season_away])\n\n#and sum points and matches for each team as home_team and away_team\ndf_team_season_points = df_points_season_both.groupby(['team_api_id', 'season']).sum().reset_index()\n\n#add a column points per match to calculate the average points per match\ndf_team_season_points['points_per_match'] = df_team_season_points['points']\/df_team_season_points['matches']\n\n#add columns for season start en end date assuming that the seasons start on July 1st and end on June 30th. We will need these columns to compare with the team attributes later.\ndf_team_season_points['seasonstart'] = df_team_season_points['season'].str[:4] + '-07-01'\ndf_team_season_points['seasonend'] = df_team_season_points['season'].str[5:] + '-06-30'\n\n#merge with the team dataframe to add names to the teams\ndf_teamname_season_points = pd.merge(df_teams[['team_api_id', 'team_long_name']] , df_team_season_points, how='right', on='team_api_id')\n\n#sort descending by points_per_match\ndf_teamname_season_points.sort_values(by='points_per_match', ascending=False).head(10)","08d615f8":"df_teamname_season_points.sort_values(by='points_per_match', ascending=True).head(10)","9f904e13":"df_team_season_points[['points','matches','points_per_match']].describe(percentiles=[.1, .25, .5, .75, .9])","67a05090":"df_team_top10 = df_team_season_points[(df_team_season_points['points_per_match'] > 2.029412)]\ndf_team_top10.shape","c0d30004":"#merge df_team_top10 and df_teamattr\ndf_teamattr_filtered = pd.merge(df_team_top10, df_teamattr, on='team_api_id', how='outer')\n\n#filter merged df by season                  \ndf_teamattr_top10 = df_teamattr_filtered.loc[df_teamattr_filtered.date.between(df_teamattr_filtered.seasonstart, df_teamattr_filtered.seasonend)]\n\ndf_teamattr_top10.describe()","d209f509":"df_team_bottom90 = df_team_season_points[(df_team_season_points['points_per_match'] <= 2.029412)]\n\n#merge df_team_top10 and df_teamattr\ndf_teamattr_filtered90 = pd.merge(df_team_bottom90, df_teamattr, on='team_api_id', how='outer')\n\n#filter merged df by season                  \ndf_teamattr_bottom90 = df_teamattr_filtered90.loc[df_teamattr_filtered90.date.between(df_teamattr_filtered90.seasonstart, df_teamattr_filtered90.seasonend)]\n\ndf_teamattr_bottom90.describe()","fb354a2c":"df_teamattr_top10_means = df_teamattr_top10[['buildUpPlaySpeed',\n 'buildUpPlayDribbling',\n 'buildUpPlayPassing',\n 'chanceCreationPassing',\n 'chanceCreationCrossing',\n 'chanceCreationShooting',\n 'defencePressure',\n 'defenceAggression',\n 'defenceTeamWidth']].mean()\ndf_teamattr_top10_means","deca4b49":"df_teamattr_bottom90_means = df_teamattr_bottom90[['buildUpPlaySpeed',\n 'buildUpPlayDribbling',\n 'buildUpPlayPassing',\n 'chanceCreationPassing',\n 'chanceCreationCrossing',\n 'chanceCreationShooting',\n 'defencePressure',\n 'defenceAggression',\n 'defenceTeamWidth']].mean()\n#del df_teamattr_bottom90_means[0:6]\n#df_teamattr_bottom90_means.drop(df_teamattr_bottom90_means.columns[[1]], axis=1, inplace=True)\ndf_teamattr_bottom90_means","11910da2":"#create labels from the column headers\nlabels = ['buildUpPlaySpeed',\n 'buildUpPlayDribbling',\n 'buildUpPlayPassing',\n 'chanceCreationPassing',\n 'chanceCreationCrossing',\n 'chanceCreationShooting',\n 'defencePressure',\n 'defenceAggression',\n 'defenceTeamWidth']\n\n#create the radar chart\nstats10=df_teamattr_top10_means.values\nstats90=df_teamattr_bottom90_means.values\n\nangles=np.linspace(0, 2*np.pi, len(labels), endpoint=False)\n# close the plot\nstats10=np.concatenate((stats10,[stats10[0]]))\nstats90=np.concatenate((stats90,[stats90[0]]))\nangles=np.concatenate((angles,[angles[0]]))\n\nfig=plt.figure(figsize=(10, 10))\nax = fig.add_subplot(111, polar=True)\nax.plot(angles, stats10, 'o-', linewidth=2, label='top 10%')\nax.fill(angles, stats10, alpha=0.25)\nax.plot(angles, stats90, 'o-', linewidth=2, label='rest 90%')\nax.fill(angles, stats90, alpha=0.25)\nax.set_thetagrids(angles * 180\/np.pi, labels)\nax.set_title('Team Attributes for top 10% teams compared to rest')\nax.grid(True)\nax.legend();","2d83f905":"#get the team attributes for FC Porto for season 2010\/2011\ndf_teamattr_fcporto = df_teamattr_top10[(df_teamattr_top10['team_api_id'] == 9773) & (df_teamattr_top10['season'] == '2010\/2011')]\ndf_teamattr_fcporto","4e51e579":"#filter team attributes FC Porto\ndf_teamattr_fcporto_means = df_teamattr_fcporto[['buildUpPlaySpeed',\n 'buildUpPlayDribbling',\n 'buildUpPlayPassing',\n 'chanceCreationPassing',\n 'chanceCreationCrossing',\n 'chanceCreationShooting',\n 'defencePressure',\n 'defenceAggression',\n 'defenceTeamWidth']].mean()\ndf_teamattr_fcporto_means","19985dff":"#get the team attributes for Willem II for season 2010\/2011\ndf_teamattr_willemii = df_teamattr_bottom90[(df_teamattr_bottom90['team_api_id'] == 8525) & (df_teamattr_bottom90['season'] == '2010\/2011')]\ndf_teamattr_willemii","b1611660":"#filter team attributes Willem II\ndf_teamattr_willemii_means = df_teamattr_willemii[['buildUpPlaySpeed',\n 'buildUpPlayDribbling',\n 'buildUpPlayPassing',\n 'chanceCreationPassing',\n 'chanceCreationCrossing',\n 'chanceCreationShooting',\n 'defencePressure',\n 'defenceAggression',\n 'defenceTeamWidth']].mean()\ndf_teamattr_willemii_means","e6c767eb":"#create the radar chart\nstats_fcporto=df_teamattr_fcporto_means.values\nstats_willemii=df_teamattr_willemii_means.values\n\nangles=np.linspace(0, 2*np.pi, len(labels), endpoint=False)\n# close the plot\nstats_fcporto=np.concatenate((stats_fcporto,[stats_fcporto[0]]))\nstats_willemii=np.concatenate((stats_willemii,[stats_willemii[0]]))\nangles=np.concatenate((angles,[angles[0]]))\n\nfig=plt.figure(figsize=(10, 10))\nax = fig.add_subplot(111, polar=True)\nax.plot(angles, stats_fcporto, 'o-', linewidth=2, label='FC Porto')\nax.fill(angles, stats_fcporto, alpha=0.25)\nax.plot(angles, stats_willemii, 'o-', linewidth=2, label='Willem II')\nax.fill(angles, stats_willemii, alpha=0.25)\nax.set_thetagrids(angles * 180\/np.pi, labels)\nax.set_title('Team Attributes for FC Porto season 2010\/2011 vs Willem II season 2010\/2011')\n#ax.set_title2('volgende regel')\nplt.suptitle('Comparing most and least effective team')\nax.grid(True)\nax.legend();","c03b43d6":"#merge df_team_top10 and df_team_season_players\ndf_players_top10 = pd.merge(df_team_top10[['team_api_id', 'season']], df_team_season_players, on=['team_api_id', 'season'], how='outer')\ndf_players_top10.head()","a480a7c3":"#merge with player to get players birthdate height and weight\ndf_players_top10bhw = pd.merge(df_players_top10, df_players[['player_api_id','birthday','height','weight']], how='outer', left_on=['player'], right_on=['player_api_id'])\n#calculate age of player for season on December 31st\ndf_players_top10bhw['birthday'] = pd.to_datetime(df_players_top10bhw['birthday'])\ndf_players_top10bhw['age'] = df_players_top10bhw['season'].str.slice(0, 4).astype(int) - df_players_top10bhw['birthday'].dt.year\n\ndf_players_top10bhw.tail()","4254c981":"#to merge the attributes dataframe with the df_players_top10 dataframe we need to add a column season for each attributes row based on date\n#first set date to datetime object to manipulate\ndf_playerattr['date'] = pd.to_datetime(df_playerattr['date'])\ndf_playerattr['season'] = np.where(df_playerattr['date'].dt.month>6, df_playerattr['date'].dt.year.astype(str) + '\/' + (df_playerattr['date'].dt.year + 1).astype(str) , (df_playerattr['date'].dt.year - 1).astype(str) + '\/' + (df_playerattr['date'].dt.year).astype(str))\ndf_playerattr.head()","f72f3d3d":"#merge df_players_top10 and player attributes on player and season\ndf_playersattr_top10 = pd.merge(df_players_top10bhw, df_playerattr, how='left', left_on=['player', 'season'], right_on=['player_api_id', 'season'])\n\ndf_playersattr_top10.head()","739bdf27":"#list all columns\nlabels = df_playersattr_top10.columns.values\nlabels","1ed63e59":"#columns to drop: we will only keep the players attributes including age height and weight\ncolumns_to_drop = labels[[0,1,2,3,4,8,9,10,11]]\ncolumns_to_drop","89290cf2":"df_playersattr_top10 = df_playersattr_top10.drop(columns=columns_to_drop)\ndf_playersattr_top10.head()\n","5762de32":"#calculate the mean player attributes for the top 10% effective teams\ndf_playersattr_top10_condensed = df_playersattr_top10.mean()\ndf_playersattr_top10_condensed\n","de198aa0":"#first we need to add birthdate, height and weight to player attributes\ndf_playerattrbhw = pd.merge(df_players[['player_api_id','birthday', 'height', 'weight']], df_playerattr, how='right', on='player_api_id')\ndf_playerattrbhw.head()","6aa4540a":"#then we need to calculate age\ndf_playerattrbhw['birthday'] = pd.to_datetime(df_playerattrbhw['birthday'])\ndf_playerattrbhw['age'] = df_playerattrbhw['season'].str.slice(0, 4).astype(int) - df_playerattrbhw['birthday'].dt.year\ndf_playerattrbhw.head() ","c5833d99":"labels2 = df_playerattrbhw.columns.values\nlabels2","0007fa6c":"#columns to drop: we will only keep the players attributes including age height and weight\ncolumns_to_drop2 = labels2[[0,1,4,5,6]]\ncolumns_to_drop2","d2f49753":"df_playerattrbhw = df_playerattrbhw.drop(columns=columns_to_drop2)\ndf_playerattrbhw.head()","fec4c7c3":"#move column age to 3d column\ndf_playerattrbhw = df_playerattrbhw[['height', 'weight', 'age', 'overall_rating', 'potential',\n       'preferred_foot', 'attacking_work_rate', 'defensive_work_rate',\n       'crossing', 'finishing', 'heading_accuracy', 'short_passing',\n       'volleys', 'dribbling', 'curve', 'free_kick_accuracy',\n       'long_passing', 'ball_control', 'acceleration', 'sprint_speed',\n       'agility', 'reactions', 'balance', 'shot_power', 'jumping',\n       'stamina', 'strength', 'long_shots', 'aggression', 'interceptions',\n       'positioning', 'vision', 'penalties', 'marking', 'standing_tackle',\n       'sliding_tackle', 'gk_diving', 'gk_handling', 'gk_kicking',\n       'gk_positioning', 'gk_reflexes', 'season']]\ndf_playerattrbhw.head()","df5400d9":"#calculate the mean player attributes BEWARE this takes a lot of time\ndf_playersattr_condensed = df_playerattrbhw.mean()\ndf_playersattr_condensed\n","b458efd6":"#compare player attributesfor top 10% and all teams\nd = {'top10': df_playersattr_top10_condensed, 'all': df_playersattr_condensed}\ndf_playersattr_compared = pd.DataFrame(data=d)\n#calculate delta in percentage\ndf_playersattr_compared['delta_perc'] = ((df_playersattr_compared['top10'] - df_playersattr_compared['all'])\/df_playersattr_compared['all'])*100\ndf_playersattr_compared = df_playersattr_compared.sort_values(by='delta_perc', ascending=False).reset_index()\ndf_playersattr_compared","0e6a5a07":"df_playersattr_compared = df_playersattr_compared.sort_values(by='delta_perc', ascending=True).reset_index()\ndf_playersattr_compared['positive'] = df_playersattr_compared['delta_perc'] > 0\n\ndata = df_playersattr_compared\ngroup_data = df_playersattr_compared['delta_perc']\ngroup_names = df_playersattr_compared['index']\norder = df_playersattr_compared.index.values\nplt.style.use('fivethirtyeight')\nfig, ax = plt.subplots(figsize=(10, 20))\nax.barh(order, group_data, color=df_playersattr_compared.positive.map({True: '#99CC99', False: '#F4874B'}))\nax.set(xlim=[-8, 4])\nax.set_yticklabels(labels=df_playersattr_compared['index'])\nax.set_yticks(np.arange(0, 38, step=1))\n\nplt.xlabel('difference in percentage of top 10 team players to all players', size = 20)\nplt.ylabel('Player Attributes', size = 20)\nplt.title('Mean score of top 10% team players compared to all players', size = 20)\nplt.xticks(size = 16)\nplt.yticks(size = 16);","73b6580d":"Then select the team_attributes for those teams by filtering on team_api_id and season:","2c98d8e1":"Let's create a dataframe for matches with teams and scores:","98ce111b":"There are 299 teams and for 288 of them there is data on the Team_Attributes. The number of records on Team_Attributes is not the same for all 288 teams ranging between 1 and 6. We need to take note of this in our investigation.","841e3235":"Okay no duplicates. The df_teams seems ready for research.","a47cd456":"Then create a dataframe for Team_Attributes:","47bab7dc":"Looks like there are no null values here which is a good thing. To be sure I will check if there are duplicates on the match_api_id since this is the link to other tables and duplicates could have effect on the outcomes of the analysis.","f9a98a7a":"### Research Question 3: How do player attributes differ for the most effective teams compared to the rest of the teams?\n","984c08af":"<a id='conclusions'><\/a>\n## Conclusions\n\nIn this investigation we analysed the data available in the European Soccer Database containing over 25k+ matches, players & teams attributes for European Professional Football over seasons 2008\/2009 to 2015\/2016. The investigation has led to the following findings and results:\n\n### Top 5 effective teams\nWe investigated the effectiveness of all teams in the database. The effectiveness is operationalised as the mean points per match for each season. Points per match vary between 3 for a won match, 1 for draw and 0 for a lost match. The mean points per match for each season as an indicator for effectiveness therefore can vary between max 3 and min 0.\nBased on the available data we selected the 5 most effective teams. \n\nThe top 5 effective teams with average points per match:\n1. FC Porto 2010\/2011 (2.800000)\n2. Juventus 2013\/2014 (2.684211)\n3. FC Bayern Munich 2012\/2013 (2.676471)\n4. FC Bayern Munich 2013\/2014 (2.647059)\n5. FC Barcelona 2012\/2013 (2.631579) \/ Real Madrid CF 2011\/2012 (2.631579)\n...\n1481. Team Willem II 2010\/2011 and RKC Waalwijk 2009\/2010 were least effective with just 0.441176 points per match.\n\n\n### Team attributes to look for\nThe database contains information on team attributes for 288 teams in 11 European leagues. In this investigation we compared the top 10% effective teams to the rest 90% teams on team attributes. Our investigation led to the following findings:\n\nA positive correlation between team effectiveness and the team attributes chanceCreationShooting, defencePressure and defenceAgression. Also defenceTeamWidth and chanceCreationPassing have a (smaller) correlation to effectiveness of a team.\nThis suggests that teams that have a higher defense pressure and defense agression have a bigger chance of winning a match. Improving defense pressure and defense agression might be a good start to improve team effectiveness.\n\nA negative correlation is visible in het team attribute buildUpPlayPassing (represents the passing distance between each player). The top 10% effective teams score significantly lower on this. The negative correlation suggests that higher buildUpPlayPassing leads to less effectiveness in terms of won matches. We could argue that higher buildUpPlayPassing needs more accuracy or it will lead to more loss of ballpossession and in turn to less matches won. A further investigation on this should be interesting. \n\nIn our investigation a individual comparison was made between the most effective team FC Porto 2010\/2011 and the least effective team Willem II 2010\/2011. Based on this individual comparison one might suspect a significant positive correlation of chanceCreationPassing, buildUpPlaySpeed and defenceAgression with effectiveness. FC Porto 2010\/2011 scores high on these attributes. \n\n\n### Player attributes to look for\nThe database contains information on player attributes for 11k+ players in 11 European leagues. In this part of our investigation we compared the player attributes of players in the top 10% effective teams to all players. Our investigation led to the following findings:\n\nComparing player attributes for top 10 effective teams to all teams shows that players in the top 10 teams score higher on almost all player attributes. The top 3 player attributes top teams score higher on are standing_tackle, sliding_tackle and dribbling. \nAgain attributes related to defense seem to have a higher correlation with effectiveness of a team.\n\n### A good defense tactic wins matches!\nIn general our investigation points out that winning matches starts with good defense tactics. Winning teams have higher defense pressure, defense agression and players with higher scores on tackling. \n","cd00d449":"And at the bottom the least effective teams:","a04eea44":"<a id='wrangling'><\/a>\n## Data Wrangling\n\n\n### General Properties","2e73fec8":"The comparison between top 10 team player attributes and all teams player attributes is visualized in the next bar graph","db211244":"Check if all null values are replaced:","1cf46b25":"Now let's check df_matchscores:","90f9dd93":"Looks like there are 299 teams. For 11 teams the team_fifa_api_id is missing. We need to keep an eye on this, but since I will be using team_api_id to connect to other tables I wont do anything with it now. \n\nFirst check if there are no duplicates in the team_api_id since this is the link to other tables:","9b309bef":"The info on players looks ready for use in our analysis.","0dece45d":"Lets first create a dataframe for teams.","55a5aed0":"The df_teamattr looks okay now. I also want to check if all teams have records in the Team_Attributes table by grouping the Team_Attributes by team_api_id and count the number of records for each team:","152a6262":"We will check the same for df_players","4455845b":"To work with I would like to have a dataframe for players in each team per season. Therefore we need to wrangle the match table to our needs:","a151a12d":"Similar we'll look at the Team Attributes","f4e7e033":"The top 10% has a score of 2.029412 points per match. It would be interesting to see how this top 10% effective teams compares to the rest 90% of the teams. Therefore we will compare team attributes.","2400d112":"Let's move on to the players and create a dataframe for that and have a quick look at the dataframe:","4919fc8f":"Create a dataframe for players per team and season to use in our investigation","ad7d79d7":"# Project: Analyse effectiveness of teams in European Soccer\n\n## Table of Contents\n<ul>\n<li><a href=\"#intro\">Introduction<\/a><\/li>\n<li><a href=\"#wrangling\">Data Wrangling<\/a><\/li>\n<li><a href=\"#eda\">Exploratory Data Analysis<\/a><\/li>\n<li><a href=\"#conclusions\">Conclusions<\/a><\/li>\n<\/ul>","93660092":"The column buildUpPlayDribbling has 969 null values. Interesting to see that the buildUpPlayDribblingClass has no null values. Let's investigate this:","051bd874":"Now let's look at the team attributes for the rest 90%","cb8680fd":"Based on these data we can say that team_api_id 9773 (FC Porto) in season 2010\/2011 was most effective with 2.8 points per match. \nThis is in line with the fact that FC Porto had a record season where they ended the Portuguese League unbeaten and 21 points ahead of the team in second place, had 16 consecutive wins, from December 6, 2010, to May 1, 2011. It was an extraordinary year for FC Porto, with four trophies being won, including a Europa League.\n\nThe top 5 effective teams with average points per match:\n1. FC Porto\t2010\/2011 (2.800000)\n2. Juventus\t2013\/2014 (2.684211)\n3. FC Bayern Munich\t2012\/2013 (2.676471)\n4. FC Bayern Munich\t2013\/2014 (2.647059)\n5. FC Barcelona\t2012\/2013 (2.631579)  \/  Real Madrid CF\t2011\/2012 (2.631579)\n\n\nTeam Willem II 2010\/2011 (team_api_id 8525) and RKC Waalwijk 2009\/2010 (team_api_id 10219) were least effective with just 0.441176 points per match.\nThis is confirmed in the fact that Willem II and RKC Waalwijk were at the bottom of the Eredivisie League the whole season and got relegated from the Eredivisie in the mentioned seasons.\n","7d7f232c":"FC Porto gravitates more to chanceCreationShooting, defencePressure and chanceCreationCrossing. Suprisingly Willem II has a much higher score on defenceAgression compared to FC Porto while earlier we noticed a correlation between defenceAgression and effectiveness. Willem II scores very low on defencePressure compared to FC Porto. This is consistent with our earlier investigation on the top 10% teams. Improving defencePressure might be a good start to improve team effectiveness.\n\nWillem II further gravitates heavily to chanceCreationPassing and buildUpPlaySpeed. \nchanceCreationPassing indicates how much players move out of position.\nbuildUpPlaySpeed indicates how fast players move up from defence.\nEarlier when comparing the top 10% to the rest 90% we didn't see a high correlation of these two aspects with effectiveness. Given the data on the most effective team FC Porto and the least effective team Willem II one might suspect a significant correlation of chanceCreationPassing and buildUpPlaySpeed with efectiveness.","77af8d10":"### Research Questions\nBased on my preliminary investigation, given this database it could be interesting to look at the next questions:\n- Which teams are most effective?\n- How do team attributes differ for the most effective teams compared to the rest of the teams?\n- How do player attributes differ for the most effective teams compared to the rest of the teams?\n\nIn this investigation a team is considered more effective if it wins more matches. The effectiveness of a team is therefore operationalised as the mean points per match scored in a season. An effective team will score a higher mean points per match.\n","a035106e":"Based on the radar graph there seems to be a higher correlation between team effectiveness and the team attributes: chanceCreationShooting, defencePressure and defenceAgression. Also defenceTeamWidth and chanceCreationPassing seem to have a correlation to effectiveness of a team.\n\nA google search on defencePressure and defenceAgression learns that on High Pressure and High Aggression, the defence will play a lot higher up the pitch than normal. They will hold their line roughly 10 yards inside their own half, and will not retreat towards goal, rather they will hold their position. On High\/High \u2013 your midfield will also press the opposition\u2019s midfield as soon as the ball is played out from the back, rather than holding off, they will try to win the ball instead of containing.\nThe correlation suggests this is seems to be the best tactic for defense and effectiveness.\n\nA negative correlation is visible in het team attribute buildUpPlayPassing. The top 10% effective teams score significantly lower on this. buildUpPlayPassing represents the passing distance between each player i.e. if you set this to 100 your would want to play a long ball style. The negative correlation suggests that higher buildUpPlayPassing leads to more loss of ballpossession and in turn leads to less effectiveness in terms of won matches.\n\nTo further investigate this let's compare the most effective team with the least effective team. Earlier we saw that the team of FC Porto season 2010\/2011 (team_api_id 9773) was most effective with 2.8 points per match. Team Willem II 2010\/2011 (team_api_id 8525) was least effective with just 0.441176 points per match.\nWe expect to see the same correlation magnified.","0e94e97c":"Let's see what the teams dataframe looks like and needs some cleaning:","4dbe3545":"The null values for buildUpPlayDribbling are all in the buildUpPlayDribblingClass Little. I will look at the values for this Class next:","91d83726":"Since in soccer only results count I will investigate the scores from the matches for each season and team and find out which teams are most effective. I will start with the matches and give each team points for each match depending on the result of the match: 3 points for win, 1 point for draw, 0 points for lose. I will sum the points for each team per season. Then calculate the min, max and standard deviation for each team over all seasons and select the top 5 effective teams.","ed843d29":"Okay no duplicates.","8ca823be":"The spread in values for buildUpPlayDribbling where Class = 'Little' is between 24 and 33 with a mean around 30. Since all null values fall in the buildUpPlayDribblingClass Little we can safely compensate for the Null values in the column buildUpPlayDribbling by changing the Null values to the mean value of 30.","619768c0":"Now that we have investigated team attributes, we will look at players attributes for the teams. We are interested if the players attributes for a team have a correlation with effectiveness (winning matches) of a team.\n\nTo investigate this we will have to filter the players of the top 10% teams and compare their attributes to the rest.","4baa50ff":"<a id='intro'><\/a>\n## Introduction\n\nIn this project the dataset European Soccer Database is selected for analysis. The dataset contains data on more than 25.000 games in 11 European countries. \n\nThe dataset is downloaded from  https:\/\/www.google.com\/url?q=https:\/\/d17h27t6h515a5.cloudfront.net\/topher\/2017\/November\/5a0a4cad_database\/database.sqlite&sa=D&ust=1533821948987000.\n\nAn overview of the database records can be found on:\nhttps:\/\/www.kaggle.com\/hugomathien\/soccer\nBased on this overview the relations between the tables in the database are drafted below using quickdatabasediagrams.com:\nScreenshot databasediagram\n![ScreenshotDBSoccer.JPG](attachment:ScreenshotDBSoccer.JPG)\n","c08189c6":"We will compare the mean on each attribute. So I first create to datasets with the means for the top10 and the bottom90:","a65cc913":"Now we look at df_match_players:","350163bc":"And compare the top 10% effective teams to the rest 90% on team attributes. For this purpose plotting team attributes in a radar graph is a great way of comparing.","f3b36672":"Let's check out the distribution of the records in df_team_season_points:","71e401e6":"### Data Cleaning","57894485":"Now we have a dataframe containing all players per team per season to work with","8a3c90f8":"Comparing player attributes for top 10 effective teams to all teams shows that players in the top 10 teams score higher on almost all player attributes. The top 3 player attributes top teams score higher on are standing_tackle, sliding_tackle and \ndribbling. Again attributes related to defense seem to have a higher correlation with effectiveness of a team. ","fc5fdefc":"Let first count points based on the matches an sum them for each team per season:","b0b2c0f6":"### Research Question 2 How do team attributes differ for the most effective teams compared to the rest of the teams?","07313120":"Create a dataframe for players attributes","b727d418":"There are quite a few null values for players per match. For now this is no problem and we will leave it like that.  ","07f358a5":"To get a better insight in the database I have also investigated the data using DB Browser for SQLLite. ","f0ca40aa":"Now we will look at the mean player height, weight, age and attributes for all players","5f856207":"<a id='eda'><\/a>\n## Exploratory Data Analysis\n\n\n### Research Question 1 Which teams are most effective?","fd62939f":"First we need to link df_team_season_points to team attributes for the top 10% effective teams. Therefore we need to find out which teams are in this top 10% by filtering df_team_season_points on point per match higher than 2.029412.","1e18b0a1":"The df_matchscores will be a good start for assessing wins\/draws\/lost matches for each team. "}}