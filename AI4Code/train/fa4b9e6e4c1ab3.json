{"cell_type":{"6f8304cd":"code","933a161c":"code","8619e072":"code","a8e52419":"code","ff253144":"code","febcb279":"code","3786b866":"code","79d87570":"code","843946e0":"code","0a20df6b":"code","0afd8a2b":"code","6572b54d":"code","e7249273":"code","8542cd52":"code","ce979a20":"code","5c6f52e1":"code","a36f9fa8":"code","945624a9":"code","17cce02a":"code","c7c9bdcb":"code","2ac57d64":"code","bac266db":"code","045fb831":"code","86a749a4":"code","8d1231da":"code","8556826d":"code","8057b6c9":"code","0bc2e1c1":"code","086f922c":"code","a43b85d9":"code","4b472c78":"code","be6a2a2c":"markdown","568c07f0":"markdown","3ec71827":"markdown"},"source":{"6f8304cd":"import tensorflow as tf\nimport numpy as np\nimport pandas as pd\nimport os\nfrom tqdm import tqdm\nimport time\nimport glob\nfrom random import shuffle\nfrom tensorflow.keras.layers import GRU, Embedding, Dense, Input, Dropout, Bidirectional, BatchNormalization, Flatten, Reshape , LSTM\nfrom tensorflow.keras.models import Sequential\nfrom keras.preprocessing.text import Tokenizer, text_to_word_sequence\nfrom keras.preprocessing.sequence import pad_sequences\nfrom sklearn.utils import shuffle\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt","933a161c":"from google.colab import drive\ndrive.mount('\/content\/drive')","8619e072":"!pip install --upgrade --force-reinstall --no-deps kaggle\n!mkdir -p ~\/.kaggle\n!cp kaggle.json ~\/.kaggle\/\n!chmod 600 ~\/.kaggle\/kaggle.json\n!kaggle competitions download -c machathon2-qualifications","a8e52419":"import zipfile\nfilename = \"machathon2-qualifications.zip\"\nwith zipfile.ZipFile(filename, 'r') as zipf:\n  zipf.extractall()\n  print(\"Done\")","ff253144":"with open('labels.txt', 'r') as f:\n  label2name = f.readlines()\n  label2name = [name.replace('\\n', '') for name in label2name]","febcb279":"train_data = pd.read_csv('train.csv')\ntrain_data.head()","3786b866":"x_train = np.array(train_data['data'])\ny_train  = np.array(train_data['labels'])","79d87570":"execluded = '!()*-\u0640.:=o[]\u00ab\u00bb;\u061b,\u060c~?\u061f\\u200f\\ufeff\u0640'\n\nfor i in tqdm(range(len(x_train))):\n  out = \"\"\n  for c in x_train[i]:\n    if c not in execluded:\n      out += c\n  x_train[i] = out","843946e0":"X_train, X_valid , y_train, y_valid = train_test_split(x_train, y_train, test_size = 0.15, random_state = 41)","0a20df6b":"# Creating a mapping from unique characters to indices\nvocab = set(' '.join(x_train))\nchar2idx = {u:i+1 for i, u in enumerate(sorted(vocab))}\n\ndef to_sequences(X):\n  X = [[char2idx[char] for char in line] for line in X]\n  X = pad_sequences(X, padding='post', value=0, maxlen = 100)\n  return X\n \nX_train = to_sequences(X_train)\nX_valid = to_sequences(X_valid)\n\ny_train = np.array(y_train)\ny_valid = np.array(y_valid)","0afd8a2b":"model = Sequential()\nmodel.add(Input((100,)))\nmodel.add(Embedding(len(char2idx)+1, 256))\nmodel.add(Bidirectional(GRU(units = 256, return_sequences=True)))\nmodel.add(Bidirectional(GRU(units = 512, return_sequences=True)))\nmodel.add(Bidirectional(GRU(units = 512, return_sequences=True)))\nmodel.add(Bidirectional(GRU(units = 512, return_sequences=True)))\nmodel.add(Bidirectional(GRU(units = 512)))\nmodel.add(Dense(128, activation = 'relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(len(label2name), activation = 'softmax'))\nmodel.compile(optimizer = 'adam', loss = 'sparse_categorical_crossentropy', metrics = ['accuracy'])","6572b54d":"model.summary()","e7249273":"reduce_lr = tf.keras.callbacks.ReduceLROnPlateau(monitor='val_loss', factor=0.1, patience=6, min_delta=0.0001, min_lr=0.00001, verbose=1)\ncheckpoint = tf.keras.callbacks.ModelCheckpoint('model_checkpoint.h5', monitor='val_accuracy', verbose=1, save_best_only=True, mode='max')","8542cd52":"model.fit(X_train, y_train, validation_data= (X_valid, y_valid), epochs = 50, batch_size= 128, shuffle = True, callbacks=[reduce_lr,checkpoint])","ce979a20":"model = tf.keras.models.load_model('model_checkpoint.h5')","5c6f52e1":"def classify(sentence):\n\n  sequence = [char2idx[char] for char in sentence]\n  sequence = pad_sequences([sequence], maxlen = X_train.shape[1], padding='post', value=0)\n\n  pred = model.predict(sequence)[0]\n  pred = np.argmax(pred, 0)\n  return pred","a36f9fa8":"submission = pd.read_csv('test.csv')\nsubmission","945624a9":"test = np.array(submission['data'])\ntest","17cce02a":"for i in tqdm(range(len(test))):\n  out = \"\"\n  for c in test[i]:\n    if c not in execluded:\n      out += c\n  test[i] = out","c7c9bdcb":"preds = []\nfor i in tqdm(range(len(test))):\n    preds.append(classify(test[i]))","2ac57d64":"ids = [str(id_val) for id_val in range(submission.shape[0])]\nsample_submission = pd.DataFrame(np.array([ids,preds]).T,columns=['id','labels'])\nsample_submission.to_csv(\"\/content\/sample_submission_95.csv\",index=False)","bac266db":"sample_submission","045fb831":"!kaggle competitions download -c machathon-20-qualification-round-final-submission","86a749a4":"import zipfile\nfilename = \"machathon-20-qualification-round-final-submission.zip\"\nwith zipfile.ZipFile(filename, 'r') as zipf:\n  zipf.extractall()\n  print(\"Done\")","8d1231da":"def classify(sentence):\n\n  sequence = [char2idx[char] for char in sentence]\n  sequence = pad_sequences([sequence], maxlen = X_train.shape[1], padding='post', value=0)\n\n  pred = model.predict(sequence)[0]\n  pred = np.argmax(pred, 0)\n  return pred","8556826d":"final_submission = pd.read_csv('test.csv')\nfinal_submission","8057b6c9":"test = np.array(final_submission['data'])\ntest","0bc2e1c1":"for i in tqdm(range(len(test))):\n  out = \"\"\n  for c in test[i]:\n    if c not in execluded:\n      out += c\n  test[i] = out","086f922c":"preds = []\nfor i in tqdm(range(len(test))):\n    preds.append(classify(test[i]))","a43b85d9":"ids = [str(id_val) for id_val in range(submission.shape[0])]\nsample_submission = pd.DataFrame(np.array([ids,preds]).T,columns=['id','labels'])\nsample_submission.to_csv(\"\/content\/Final_submission.csv\",index=False)","4b472c78":"sample_submission","be6a2a2c":"#Submission","568c07f0":"## Create the model","3ec71827":"#Final Submission"}}