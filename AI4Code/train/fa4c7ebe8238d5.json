{"cell_type":{"fd03c290":"code","86d49737":"code","693e7080":"code","61779de6":"code","68911255":"code","39668a76":"code","21552317":"code","07f75d31":"code","041cd67e":"code","6f4e172b":"code","e4d4cb23":"code","8e002ea8":"code","edab6c4b":"markdown","ad0cca30":"markdown","0d94d812":"markdown","683a3267":"markdown","2bcfa1ce":"markdown","d9aca50c":"markdown","37034787":"markdown","0f71ddfe":"markdown","96772147":"markdown","57c9c3e2":"markdown","714cdfc8":"markdown","de7c52ee":"markdown","753ab2d6":"markdown","3bff54f2":"markdown","9fa0b1d9":"markdown","a4343341":"markdown","b83f23e9":"markdown","cccfbd3d":"markdown"},"source":{"fd03c290":"import numpy as np\nimport pandas as pd\nimport geopandas as gpd\nfrom geopandas.tools import geocode\nimport math\nfrom collections import namedtuple\n\nimport folium\nfrom folium import Choropleth, Circle, Marker\nfrom folium.plugins import HeatMap, MarkerCluster, TimestampedGeoJson\n\nimport datetime\nimport os","86d49737":"import os\nfor dirname, _, filenames in os.walk('..\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","693e7080":"# loading the data\nchinaVectors = \"..\/input\/china-regions-map\/china.json\"\ndf = pd.read_csv(\"..\/input\/coronavirus-latlon-dataset\/CV_LatLon_21Jan_12Mar.csv\", index_col = 0)","61779de6":"# lets see how the big picture of virus propagation looked on 12th of March\ndf12OfMarch = df.loc[df.date == '3\/12\/20', \n                         ['state', \n                          'country', \n                          'confirmed', \n                          'recovered', \n                          'death', \n                          'lat', \n                          'lon']]","68911255":"def radiusMinMaxer(radius):\n    radiusMin = 2\n    radiusMax = 40\n    if radius != 0:\n        if radius < radiusMin:\n            radius = radiusMin\n        if radius > radiusMax:\n            radius = radiusMax\n    return radius","39668a76":"# and now the fun part, getting it all on the map. I borrowed the style and some ideas from this article: https:\/\/towardsdatascience.com\/visualizing-bike-mobility-in-london-using-interactive-maps-for-absolute-beginners-3b9f55ccb59\ncolorConfirmed = '#ffbf80'\ncolorRecovered = '#0A5E2AFF'\ncolorDead = '#E80018'\ncircleFillOpacity = 0.2\n\nmap = folium.Map(location=[15.632909, 14.911222], \n                 tiles = \"CartoDB dark_matter\",\n                 detect_retina = True,\n                 zoom_start=2)\n\n# map layers\nlayerFlights = folium.FeatureGroup(name='<span style=\"color: black;\">Flights<\/span>')\nlayerConfirmed = folium.FeatureGroup(name='<span style=\\\\\"color: #EFEFE8FF;\\\\\">Confirmed infected<\/span>')\nlayerDead = folium.FeatureGroup(name='<span style=\\\\\"color: #E80018;\\\\\">Dead<\/span>')\nlayerRecovered = folium.FeatureGroup(name='<span style=\\\\\"color: #0A5E2AFF;\\\\\">Recovered from virus<\/span>')  \n\n# the choropleth idea togeather with circles was adviced by: https:\/\/www.kaggle.com\/gpreda\/tracking-the-spread-of-2019-coronavirus\nfolium.Choropleth(\n                geo_data=chinaVectors,\n                name='Choropleth',\n                key_on='feature.properties.name',\n                fill_color='yellow',\n                fill_opacity=0.18,\n                line_opacity=0.7\n                ).add_to(map)\n\n# coordinates of Huabei province, thats where first infected travelers were departuring from.\ndeparturePoint = [df12OfMarch.loc[df12OfMarch.state == 'Hubei', \n                                  'lat'].values[0], df12OfMarch.loc[df12OfMarch.state == 'Hubei', \n                                                                    'lon'].values[0]]\n\nfor i, row in df12OfMarch.iterrows():\n    lat = row.lat\n    lon = row.lon\n    country = row.country\n    province = row.state\n    recovered = row.recovered\n    death = row.death\n    confirmed = row.confirmed\n\n    radiusConfirmed = radiusMinMaxer(np.sqrt(confirmed))\n    radiusRecovered = radiusMinMaxer(np.sqrt(recovered))\n    radiusDead = radiusMinMaxer(np.sqrt(death))\n    \n    # coordinates of infected travelers arrivals\n    arrivalPoint = [lat, lon]\n\n    if row.state != '0':\n        popup = 'Flight:&nbsp;' + 'Hubei,&nbsp;China&nbsp;-&nbsp;' + row.state + ',&nbsp;' + row.country\n    else:\n        popup = 'Flight:&nbsp;' + 'Hubei,&nbsp;China&nbsp;-&nbsp;' + row.country\n        \n    folium.PolyLine(locations=[departurePoint, arrivalPoint], \n                      color='white', \n                      weight = 0.5,\n                      opacity = 0.3,\n                      popup = popup\n                       ).add_to(layerFlights)\n\n    popupConfirmed = str(country) + ' ' + str(province) + '(Confirmed='+str(row.confirmed) + ' Deaths=' + str(death) + ' Recovered=' + str(recovered) + ')'\n\n    folium.CircleMarker(location = [lat,lon], \n                        radius = radiusConfirmed, \n                        popup = popupConfirmed, \n                        color = colorConfirmed, \n                        fill_opacity = 0.3,\n                          weight = 1, \n                          fill = True, \n                          fillColor = colorConfirmed\n                           ).add_to(layerConfirmed)\n    \n    if row.recovered != 0:\n        popupRecovered = str(country) + ' ' + str(province) + '(Confirmed='+str(row.confirmed) + ' Deaths=' + str(death) + ' Recovered=' + str(recovered) + ')'\n\n        folium.CircleMarker(location = [lat,lon], \n                            radius = radiusRecovered, \n                            popup = popupRecovered, \n                            color = colorRecovered, \n                            fill_opacity = circleFillOpacity,\n                              weight = 1, \n                              fill = True, \n                              fillColor = colorRecovered\n                               ).add_to(layerRecovered) \n        \n    if row.death != 0:\n        popupDead = str(country) + ' ' + str(province) + '(Confirmed='+str(row.confirmed) + ' Deaths=' + str(death) + ' Recovered=' + str(recovered) + ')'\n\n        folium.CircleMarker(location = [lat,lon], \n                            radius = radiusDead, \n                            popup = popupDead, \n                            color = colorDead, \n                            fill_opacity = circleFillOpacity,\n                              weight = 1, \n                              fill = True, \n                              fillColor = colorDead\n                               ).add_to(layerRecovered) \n\nlayerFlights.add_to(map)\nlayerConfirmed.add_to(map)\nlayerRecovered.add_to(map)\nlayerDead.add_to(map)\n\nfolium.map.LayerControl('bottomleft', collapsed=False).add_to(map)\n\nmap","21552317":"map = folium.Map(location=[32.902807, 101.089332], \n                 tiles = \"CartoDB dark_matter\",\n                 detect_retina = True,\n                 zoom_start=4)\n\n# map layers\nlayerFlights = folium.FeatureGroup(name='<span style=\"color: black;\">Flights<\/span>')\nlayerConfirmed = folium.FeatureGroup(name='<span style=\\\\\"color: #EFEFE8FF;\\\\\">Confirmed infected<\/span>')\nlayerDead = folium.FeatureGroup(name='<span style=\\\\\"color: #E80018;\\\\\">Dead<\/span>')\nlayerRecovered = folium.FeatureGroup(name='<span style=\\\\\"color: #0A5E2AFF;\\\\\">Recovered from virus<\/span>')  \n\n# the choropleth idea togeather with circles was adviced by: https:\/\/www.kaggle.com\/gpreda\/tracking-the-spread-of-2019-coronavirus\nfolium.Choropleth(\n                geo_data=chinaVectors,\n                name='Choropleth',\n                key_on='feature.properties.name',\n                fill_color='yellow',\n                fill_opacity=0.18,\n                line_opacity=0.7\n                ).add_to(map)\n\n\n\nfor i, row in df12OfMarch.iterrows():\n    lat = row.lat\n    lon = row.lon\n    country = row.country\n    province = row.state\n    recovered = row.recovered\n    death = row.death\n    confirmed = row.confirmed\n\n    radiusConfirmed = radiusMinMaxer(np.sqrt(confirmed))\n    radiusRecovered = radiusMinMaxer(np.sqrt(recovered))\n    radiusDead = radiusMinMaxer(np.sqrt(death))\n    \n    # coordinates of infected travelers arrivals\n    arrivalPoint = [lat, lon]\n\n    if row.state != '0':\n        popup = 'Flight:&nbsp;' + 'Hubei,&nbsp;China&nbsp;-&nbsp;' + row.state + ',&nbsp;' + row.country\n    else:\n        popup = 'Flight:&nbsp;' + 'Hubei,&nbsp;China&nbsp;-&nbsp;' + row.country\n        \n    folium.PolyLine(locations=[departurePoint, arrivalPoint], \n                      color='white', \n                      weight = 0.5,\n                      opacity = 0.3,\n                      popup = popup\n                       ).add_to(layerFlights)\n\n    popupConfirmed = str(country) + ' ' + str(province) + '(Confirmed='+str(row.confirmed) + ' Deaths=' + str(death) + ' Recovered=' + str(recovered) + ')'\n\n    folium.CircleMarker(location = [lat,lon], \n                        radius = radiusConfirmed, \n                        popup = popupConfirmed, \n                        color = colorConfirmed, \n                        fill_opacity = 0.3,\n                          weight = 1, \n                          fill = True, \n                          fillColor = colorConfirmed\n                           ).add_to(layerConfirmed)\n    \n    if row.recovered != 0:\n        popupRecovered = str(country) + ' ' + str(province) + '(Confirmed='+str(row.confirmed) + ' Deaths=' + str(death) + ' Recovered=' + str(recovered) + ')'\n\n        folium.CircleMarker(location = [lat,lon], \n                            radius = radiusRecovered, \n                            popup = popupRecovered, \n                            color = colorRecovered, \n                            fill_opacity = circleFillOpacity,\n                              weight = 1, \n                              fill = True, \n                              fillColor = colorRecovered\n                               ).add_to(layerRecovered) \n        \n    if row.death != 0:\n        popupDead = str(country) + ' ' + str(province) + '(Confirmed='+str(row.confirmed) + ' Deaths=' + str(death) + ' Recovered=' + str(recovered) + ')'\n\n        folium.CircleMarker(location = [lat,lon], \n                            radius = radiusDead, \n                            popup = popupDead, \n                            color = colorDead, \n                            fill_opacity = circleFillOpacity,\n                              weight = 1, \n                              fill = True, \n                              fillColor = colorDead\n                               ).add_to(layerRecovered) \n\nlayerFlights.add_to(map)\nlayerConfirmed.add_to(map)\nlayerRecovered.add_to(map)\nlayerDead.add_to(map)\n\nfolium.map.LayerControl('bottomleft', collapsed=False).add_to(map)\n\nmap","07f75d31":"radiusMin = 2\nradiusMax = 50\ncolorConfirmed = '#E80018'\ncolorRecovered = '#81D8D0'\n\nfor date in df.date.unique():\n    print('date=', date)\n    _df = df.loc[df.date == date, \n                ['state', \n                'country', \n                'confirmed', \n                'recovered', \n                'death', \n                'lat', \n                'lon']]\n    _df.reset_index(drop = True, inplace = True)\n    _map = folium.Map(location=[15.632909, 14.911222], \n                 tiles = \"CartoDB dark_matter\", \n                 zoom_start=2)\n\n    folium.Choropleth(\n                        geo_data=chinaVectors,\n                        name='choropleth',\n                        key_on='feature.properties.name',\n                        fill_color='yellow',\n                        fill_opacity=0.18,\n                        line_opacity=0.7).add_to(_map)\n\n    for i, row in _df.iterrows():\n        if row.confirmed != 0:\n            arrivalPoint = [row.lat, row.lon]\n\n            if row.state != '0':\n                popup = 'Flight:&nbsp;' + 'Hubei,&nbsp;China&nbsp;-&nbsp;' + row['state'] + ',&nbsp;' + row['country']\n            else:\n                popup = 'Flight:&nbsp;' + 'Hubei,&nbsp;China&nbsp;-&nbsp;' + row['country']\n                folium.PolyLine(locations=[departurePoint, arrivalPoint], \n                              color='white', \n                              weight = 0.5,\n                              opacity = 0.4,\n                              popup = popup).add_to(_map)\n\n        lat = row.lat\n        lon = row.lon\n        country = row.country\n        province = row.state\n        recovered = row.recovered\n        death = row.death\n        confirmed = row.confirmed\n\n        radiusConfirmed = radiusMinMaxer(np.sqrt(confirmed))\n\n        popupConfirmed = str(country) + ' ' + str(province) + '(Confirmed='+str(row.confirmed) + ' Deaths=' + str(death) + ' Recovered=' + str(recovered) + ')'\n        folium.CircleMarker(location = [lat,lon], \n                            radius = radiusConfirmed, \n                            popup = popupConfirmed, \n                            color = colorConfirmed, \n                            fill_opacity = 0.2,\n                            weight = 1, \n                            fill = True, \n                            fillColor = colorConfirmed).add_to(_map)\n      \n        if row.recovered != 0:\n            radiusRecovered = radiusMinMaxer(np.sqrt(recovered))\n\n        popupRecovered = str(country) + ' ' + str(province) + '(Confirmed='+str(row.confirmed) + ' Deaths=' + str(death) + ' Recovered=' + str(recovered) + ')'\n\n        folium.CircleMarker(location = [lat,lon], \n                              radius = radiusRecovered, \n                              popup = popupRecovered, \n                              color = colorRecovered, \n                              fill_opacity = 0.2,\n                              weight = 1, \n                              fill = True, \n                              fillColor = colorRecovered).add_to(_map) \n\n    path = '\/kaggle\/working\/'\n    f = path + 'map' + str(date).replace('\/', '-') + '.html'\n    _map.save(f)\n","041cd67e":"dfConfirmed = df.loc[df.confirmed != 0, \n                         ['state', \n                          'country', \n                          'confirmed', \n                          'lat', \n                          'lon',\n                          'date']]\n\ndfRecovered = df.loc[df.recovered != 0, \n                         ['state', \n                          'country', \n                          'recovered', \n                          'lat', \n                          'lon',\n                         'date']]\n\ndfDead = df.loc[df.death != 0, \n                         ['state', \n                          'country', \n                          'death', \n                          'lat', \n                          'lon',\n                         'date']]","6f4e172b":"def create_geojson_features(dfConfirmed,\n                            dfRecovered, \n                            dfDead,\n                            radiusMax = 40, \n                            radiusMin = 2, \n                            colorConfirmed = colorConfirmed,\n                            colorRecovered = colorRecovered,\n                            colorDead = colorDead,\n                            weight = 1,\n                            fillOpacity = 0.2\n                            ):\n\n    print('> Creating GeoJSON features...')\n    features = []\n    feature = []\n    \n    for _, row in dfConfirmed.iterrows():\n        radius = np.sqrt(row.confirmed)\n        if radius != 0:\n          if radius < radiusMin:\n            radius = radiusMin\n\n          if radius > radiusMax:\n            radius = radiusMax\n\n          feature = {\n              'type': 'Feature',\n              'geometry': {\n                  'type':'Point', \n                  'coordinates':[row.lon, row.lat]\n              },\n              'properties': {\n                  'time': row.date.__str__(),\n                  'style': {'color' : colorConfirmed},\n                  'icon': 'circle',\n                  'iconstyle':{\n                      'fillColor': colorConfirmed,\n                      'fillOpacity': fillOpacity,\n                      'stroke': 'true',\n                      'radius': radius,\n                      'weight': weight\n                  }\n              }\n        }\n        features.append(feature)\n\n    for _, row in dfDead.iterrows():\n        radius = np.sqrt(row.death)\n        if radius != 0:\n          if radius < radiusMin:\n            radius = radiusMin\n\n          if radius > radiusMax:\n            radius = radiusMax\n          popup = str(row.country) + ' ' + str(row.state) + '(Deaths=' + str(row.death) +')'\n          feature = {\n              'type': 'Feature',\n              'geometry': {\n                  'type':'Point', \n                  'coordinates':[row.lon,row.lat]\n              },\n              'properties': {\n                  'time': row.date.__str__(),\n                  'style': {'color' : colorDead},\n                  'icon': 'circle',\n                  'iconstyle':{\n                      'fillColor': colorDead,\n                      'fillOpacity': fillOpacity,\n                      'stroke': 'true',\n                      'radius': radius,\n                      'weight': weight,\n                      'popup': popup\n                  }\n              }\n        }\n        features.append(feature)\n\n    for _, row in dfRecovered.iterrows():\n        radius = np.sqrt(row.recovered)\n        if radius != 0:\n          if radius < radiusMin:\n            radius = radiusMin\n\n          if radius > radiusMax:\n            radius = radiusMax\n\n          feature = {\n              'type': 'Feature',\n              'geometry': {\n                  'type':'Point', \n                  'coordinates':[row.lon,row.lat]\n              },\n              'properties': {\n                  'time': row.date.__str__(),\n                  'style': {'color' : colorRecovered},\n                  'icon': 'circle',\n                  'iconstyle':{\n                      'fillColor': colorRecovered,\n                      'fillOpacity': fillOpacity,\n                      'stroke': 'true',\n                      'radius': radius,\n                      'weight': weight\n                  }\n              }\n        }\n        features.append(feature)\n    \n    \n    return features","e4d4cb23":"def make_map(features, caption):\n    print('> Making map...')\n    coordinates=[15.632909, 14.911222]\n    map = folium.Map(location=coordinates, \n                               control_scale=True, \n                               zoom_start=2,\n                               tiles = 'CartoDB dark_matter',\n                               detect_retina = True\n                              )\n    \n    folium.Choropleth(\n        geo_data=chinaVectors,\n        name='Choropleth',\n        key_on='feature.properties.name',\n        fill_color='yellow',\n        fill_opacity=0.18,\n        line_opacity=0.7\n        ).add_to(map)\n\n\n    TimestampedGeoJson(\n        {'type': 'FeatureCollection',\n        'features': features}\n        , period='P1D'\n        , duration='P1D'\n        , add_last_point=True\n        , auto_play=False\n        , loop=False\n        , max_speed=1\n        , loop_button=True\n        , date_options='YYYY\/MM\/DD'\n        , time_slider_drag_update=True\n        , transition_time = 500\n    ).add_to(map)\n    \n    map.caption = caption\n    print('> Done.')\n    return map","8e002ea8":"features = create_geojson_features(dfConfirmed, dfRecovered, dfDead, fillOpacity=0.3, weight = 1)\nmake_map(features, caption = \"Coronavirus propagation 21Jan\u201313March, 2020.\")","edab6c4b":"## UPDATES:\n1. Added choropleth layer.\n2. Updated data to 2 Feb.\n3. Updated choropleth color to 'yellow'.\n4. Added possible flights paths.","ad0cca30":"### The map using data from 12 th March","0d94d812":"### Interactive map focused on Asia:","683a3267":"### Animation\n\nThe animation part for some reason is not really obvious within the folium library. There is one option to animate HeatMaps, but recently it stopped working, as well as options to animate routes, and marker positions through GeoJason. So the only way I found to actually indicate the development of situation with virus, is to make a bunch of screenshots, and feed them into the gif or video animation as frames. ","2bcfa1ce":"The orange circles indicate the number of people that are confirmed to be sick with coronavirus. The green color indicates the number of those lucky ones who recovered from the deadly virus. The red color indicates number of dead. This map is interactive, and you can click on circles to see statistics for any territory which might interest you.","d9aca50c":"### Reading data\nBig thanks to [Brenda So](https:\/\/www.kaggle.com\/brendaso) for her [dataset](https:\/\/www.kaggle.com\/brendaso\/2019-coronavirus-dataset-01212020-01262020). It really saved me lots of time. As the first thing I found was this: https:\/\/docs.google.com\/spreadsheets\/d\/1yZv9w9zRKwrGTaR-YzmAqMefw4wMlaXocejdxZaTs6w\/htmlview?usp=sharing&sle=true# Which is not usable.","37034787":"I have recently watched a documentary about the breakouts of viruses during the human history. It seems that with every new virus appearance we are getting better and better equipped and ready to fight back. However there are still more to learn, during the current outbreak of coronavirus there are already hundreds of people who died and most likely there will be many more.\n\nThe big question is what we can do? What Kaggle society have to offer as an answer to a natural threat of this kind? I believe we can do various things:\n\n    - research genome of the virus, in order to classify and find the weakness of it.\n    - develop forecast model that would help to understand where should we be ready more then in other places to face the danger.\n\nAs a data scientist, I am more on the forecast site, this and the next few notebooks would be about my attempts to understand how the propagation of our new enemy would look like in the near future.","0f71ddfe":"<img src=\"https:\/\/s5.gifyu.com\/images\/ezgif.com-crop-27005491cdf6bfa9a.gif\" width=\"1153px\">","96772147":"There are two issues that I wasn't able to fix this time: \n1. You can see that anumation is kind of breathing. I think this is because of the data being unequaly spread during the time stamps. Let me know if you get an idea how to fix it without too much effort.\n2. The capture is not displayed.\n3. No legend","57c9c3e2":"# Coronavirus propagation visualization and forecast modeling. Part 1: History of Coronavirus.","714cdfc8":"### Imports","de7c52ee":"### Combo map. Animation, all three stauses (confirmed\/death\/recovered), choropleth.","753ab2d6":"This function gets the GeoJson into the folium map.","3bff54f2":"<img src=\"https:\/\/s5.gifyu.com\/images\/ezgif.com-crop-27005491cdf6bfa9a.gif\" width=\"1153px\">","9fa0b1d9":"The function below is creating a mighty GoeJson that carries our timestamped layers to the folium map.","a4343341":"As you can see, there is no more interactivity. Now, this is just a scary pandemic gif animation. But it still might be useful for some kind of presentations. If you know a different way it could be animated I would really appreciate if you give an advice in comments  below this post.","b83f23e9":"## Visualization","cccfbd3d":"### End of Part 1.\n\nThis post covers past and current situation with the coronavirus. In the part two I am going to look in the future, and try to get some clues of how the virus would migrate to new territories if the current situation would not change.\n\nI would really appreciate any comments on how to produce map animations better. Also, I am looking for a solution to visualize flights information, in order to get a better idea how they impact propagation of the virus."}}