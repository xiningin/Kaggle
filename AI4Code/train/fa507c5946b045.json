{"cell_type":{"6e8bcc54":"code","6bf87f9d":"code","45c08fff":"code","a4085bca":"code","c18ef66d":"code","69ec5fec":"code","9f5d0013":"code","744ef7c9":"code","17689a0b":"code","fa9069ba":"code","1032cde4":"code","ac00b6f0":"code","52e011f8":"code","89071888":"code","fa0aeaae":"code","94138452":"code","afe19d6f":"code","8dd22653":"code","ae699429":"code","7bfc3ee3":"code","891e1546":"code","030f520d":"code","449b50c9":"code","10985d01":"code","e06c419c":"code","d8f42cec":"code","492c1002":"markdown"},"source":{"6e8bcc54":"import pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport seaborn as sns\n\n","6bf87f9d":"df = pd.read_csv('..\/input\/heart-disease-prediction-using-logistic-regression\/framingham.csv')\ndf.head()","45c08fff":"df.drop('education', axis = 1, inplace = True)","a4085bca":"df.isnull().sum()","c18ef66d":"df.info()","69ec5fec":"df.dropna(axis = 0, inplace = True)","9f5d0013":"df.info()","744ef7c9":"df.TenYearCHD.value_counts()","17689a0b":"pd.crosstab(df.male, df.TenYearCHD).plot(kind = 'bar', figsize = (6,4))\nplt.title('Heart Disease Frequency for Gender')\nplt.xlabel('gender (0 = female, 1 = male)')\nplt.legend(['No Disease', 'Disease'])","fa9069ba":"plt.scatter(x = df.sysBP[df.TenYearCHD == 1], y = df.diaBP[df.TenYearCHD == 1], c = 'red')\nplt.scatter(x = df.sysBP[df.TenYearCHD == 0], y = df.diaBP[df.TenYearCHD == 0], c = 'blue')\nplt.legend(['Disease', 'Not Disease'])\nplt.xlabel('sysBP')\nplt.ylabel('diaBP')\nplt.title('systole and diastole bp correlation')\n","1032cde4":"plt.scatter(x = df.age[df.TenYearCHD == 1], y = df.male[df.TenYearCHD == 1], c = 'red')\nplt.scatter(x = df.age[df.TenYearCHD == 0], y = df.male[df.TenYearCHD == 0], c = 'blue', marker = '*', s = 12)\nplt.legend(['Disease', 'Not Disease'])\nplt.xlabel('age')\nplt.ylabel('male')\nplt.title('age and gender')","ac00b6f0":"plt.scatter(x = df.totChol[df.TenYearCHD == 1], y = df.BMI[df.TenYearCHD == 1], c = 'red')\nplt.scatter(x = df.totChol[df.TenYearCHD == 0], y = df.BMI[df.TenYearCHD == 0], c = 'blue', marker = '*', s = 12)\nplt.legend(['Disease', 'Not Disease'])\nplt.xlabel('total cholestrol')\nplt.ylabel('BMI')\nplt.title('chol and BMI')","52e011f8":"plt.scatter(x = df.heartRate[df.TenYearCHD == 1], y = df.prevalentHyp[df.TenYearCHD == 1], c = 'red')\nplt.scatter(x = df.heartRate[df.TenYearCHD == 0], y = df.prevalentHyp[df.TenYearCHD == 0], c = 'blue', marker = '*', s = 12)\nplt.legend(['Disease', 'Not Disease'])\nplt.xlabel('heart rate')\nplt.ylabel('hypertension')\nplt.title('heart rate and BP')","89071888":"plt.scatter(x = df.cigsPerDay[df.TenYearCHD == 1], y = df.male[df.TenYearCHD == 1], c = 'red')\nplt.scatter(x = df.cigsPerDay[df.TenYearCHD == 0], y = df.male[df.TenYearCHD == 0], c = 'blue', marker = '*', s = 12)\nplt.legend(['Disease', 'Not Disease'])\nplt.xlabel('cigs per day')\nplt.ylabel('male')\nplt.title('cigs per day and gender')","fa0aeaae":"from sklearn.ensemble import ExtraTreesRegressor","94138452":"x = df.iloc[:, :-1]\ny = df.iloc[:,-1]","afe19d6f":"model = ExtraTreesRegressor()\nfeat_imp = model.fit(x, y)\nfeat_imp.feature_importances_\nimp = pd.Series(feat_imp.feature_importances_, index = x.columns)\nimp.nlargest(10).plot(kind = 'barh')","8dd22653":"x = np.array(df[['prevalentHyp', 'cigsPerDay', 'male', 'heartRate', 'totChol', 'BMI', 'diaBP', 'glucose', 'sysBP', 'age']])\ny = np.array(df['TenYearCHD'])","ae699429":"plt.figure(figsize = (15,6))\nsns.heatmap(df.corr(), annot = True)","7bfc3ee3":"from sklearn import preprocessing\nx = preprocessing.StandardScaler().fit(x).transform(x)\nx","891e1546":"from imblearn.over_sampling import SMOTE\n\nsmote = SMOTE(sampling_strategy = 'minority')\nx_sm, y_sm = smote.fit_resample(x, y)\n","030f520d":"from sklearn.model_selection import StratifiedKFold, cross_val_score\nfrom sklearn.naive_bayes import GaussianNB\n\nmodel = GaussianNB()\nskfold = StratifiedKFold(n_splits = 5)\nresult = cross_val_score(model, x_sm, y_sm, cv = skfold)\nprint(np.mean(result))","449b50c9":"from sklearn.model_selection import StratifiedKFold, cross_val_score\nfrom sklearn.ensemble import RandomForestClassifier\n\nmodel = RandomForestClassifier()\nskfold = StratifiedKFold(n_splits = 5)\nresult = cross_val_score(model, x_sm, y_sm, cv = skfold)\nprint(np.mean(result))","10985d01":"from sklearn.model_selection import StratifiedKFold, cross_val_score\nfrom sklearn.neighbors import KNeighborsClassifier\n\nmodel = KNeighborsClassifier()\nskfold = StratifiedKFold(n_splits = 5)\nresult = cross_val_score(model, x_sm, y_sm, cv = skfold)\nprint(np.mean(result))","e06c419c":"from sklearn.model_selection import StratifiedKFold, cross_val_score\nfrom sklearn.tree import DecisionTreeClassifier\n\nmodel = DecisionTreeClassifier()\nskfold = StratifiedKFold(n_splits = 5)\nresult = cross_val_score(model, x_sm, y_sm, cv = skfold)\nprint(np.mean(result))","d8f42cec":"from sklearn.model_selection import StratifiedKFold, cross_val_score\nfrom sklearn.linear_model import LogisticRegression\n\nmodel = LogisticRegression()\nskfold = StratifiedKFold(n_splits = 5)\nresult = cross_val_score(model, x_sm, y_sm, cv = skfold)\nprint(np.mean(result))","492c1002":"# Feature Selection"}}