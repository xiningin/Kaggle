{"cell_type":{"86a96efb":"code","d68a403a":"code","fb9e6db6":"code","cca5c424":"code","c9a57427":"code","34f97c68":"code","9b0be17b":"code","ffa7e836":"code","ff3fad4f":"markdown"},"source":{"86a96efb":"\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport tensorflow as tf ","d68a403a":"split_dir = '..\/input\/alaska2trainvalsplit'\ndef transform(x):\n    split = x.split('\/')\n    path = split[-2] + '\/' + split[-1]\n    return path\ntrain_split = pd.read_csv(f'{split_dir}\/alaska2_train_df.csv')\ntrain_split['ImageFileName'] = train_split['ImageFileName'].transform(transform)\n\nvalid_split = pd.read_csv(f'{split_dir}\/alaska2_val_df.csv')\nvalid_split['ImageFileName'] = valid_split['ImageFileName'].transform(transform)\n# combine train and valid split\ndf_all = pd.concat([train_split, valid_split])\ndf_all['Stego'] = df_all['ImageFileName'].transform(lambda x: x.split('\/')[-2])\ndf_all['Group'] = df_all['ImageFileName'].transform(lambda x: x.split('\/')[-1])\ndef qf_transform(x):\n    if x in [1,4,7]:\n        return 75\n    elif x in [2,5,8]:\n        return 90\n    elif x in [3,6,9]:\n        return 95\n    else:\n        return x\ndf_all['quality_factor'] = df_all['Label'].transform(qf_transform)\ndf_all.reset_index(inplace=True, drop=True)\ndf_all.head","fb9e6db6":"def _bytes_feature(value):\n    if isinstance(value, type(tf.constant(0))):\n        value = value.numpy() # BytesList won't unpack a string from an EagerTensor.\n    \n    return tf.train.Feature(bytes_list=tf.train.BytesList(value=[value]))\n\n\ndef _int64_feature(value):\n    return tf.train.Feature(int64_list=tf.train.Int64List(value=[value]))\n\ndef serialize_example(bits, label):\n    feature = {\n        'bits': _bytes_feature(bits),\n        'label' : _int64_feature(label)\n      }\n\n    example_proto = tf.train.Example(features=tf.train.Features(feature=feature))\n    return example_proto.SerializeToString()\n\ndef tf_serialize_example(bits, label):\n    tf_string = tf.py_function(\n        serialize_example,\n        (bits, label),  # pass these args to the above function.\n        tf.string)      # the return type is `tf.string`.\n    return tf.reshape(tf_string, ()) \n\ndef read_image(filename, label=None):\n    bits = tf.io.read_file(filename)\n    if label is None:\n        return bits\n    else:\n        return bits, label\n    \n","cca5c424":"from glob import glob \nimport random\nfrom sklearn.model_selection import GroupKFold, StratifiedKFold\nimport pandas as pd \n\ngrouped_df_all = df_all.query('Stego == \"UERD\"')\nskf = StratifiedKFold(n_splits=5, shuffle=True, random_state=0)\ndf_all.loc[:, 'fold'] = 0\nfor fold_number , (train_index, val_index) in enumerate(skf.split(X=grouped_df_all['Group'].values, y=grouped_df_all['quality_factor'].values)):\n    df_all.loc[df_all[df_all['Group'].isin(grouped_df_all['Group'].values[val_index])].index, 'fold'] = fold_number\n# df_all.to_csv('df_all.csv', index=False)","c9a57427":"df_all['local_path'] = df_all.apply(lambda x : '..\/input\/alaska2-image-steganalysis\/%s' % (x.ImageFileName), axis = 1)\ndataset = df_all.sort_values(['fold','Group'])\ndataset.rename(columns={'Label': 'label'}, inplace=True)\ndataset","34f97c68":"# from glob import glob \n# import random\n# from sklearn.model_selection import GroupKFold\n# import pandas as pd \n\n# dataset = []\n\n# for label, kind in enumerate(['Cover', 'JMiPOD', 'JUNIWARD', 'UERD']):\n#     for path in glob('..\/input\/alaska2-image-steganalysis\/Cover\/*.jpg'):\n#         dataset.append({\n#             'kind': kind,\n#             'image_name': path.split('\/')[-1],\n#             'label': label\n#         })\n\n# random.shuffle(dataset)\n# dataset = pd.DataFrame(dataset)\n\n# gkf = GroupKFold(n_splits=5)\n\n# dataset.loc[:, 'fold'] = 0\n# for fold_number, (train_index, val_index) in enumerate(gkf.split(X=dataset.index, y=dataset['label'], groups=dataset['image_name'])):\n#     dataset.loc[dataset.iloc[val_index].index, 'fold'] = fold_number\n\n\n# dataset['local_path'] = dataset.apply(lambda x : '..\/input\/alaska2-image-steganalysis\/%s\/%s' % (x.kind, x.image_name), axis = 1)\n# dataset = dataset.sort_values('image_name')\n\n","9b0be17b":"from tqdm.notebook import tqdm \n\nstart = 0\n\n# 30 records at ~150mb each \nfor i in tqdm(range(start * 30, start *30 + 30)):\n    \n    df = dataset.iloc[1500 * i : 1500 * (i + 1)]\n\n    ds = tf.data.Dataset.from_tensor_slices((df.local_path.values, df.label.values))\n\n    ds = ds.map(read_image)\n    ds = ds.map(tf_serialize_example)\n\n    def generator():\n        for features in ds:\n            yield features\n\n    serialized_ds = tf.data.Dataset.from_generator(generator, output_types=tf.string, output_shapes=())\n\n\n    serialized_ds\n\n    filename = '%05d.tfrecord' % i\n    writer = tf.data.experimental.TFRecordWriter(filename)\n    writer.write(serialized_ds)\n\n","ffa7e836":"raw_dataset = tf.data.TFRecordDataset(filename)\n\n# Create a description of the features.\nfeature_description = {\n    'bits': tf.io.FixedLenFeature([], tf.string, default_value=''),\n    'label' : tf.io.FixedLenFeature([], tf.int64, default_value=0),\n}\n\ndef _parse_function(example_proto):\n  # Parse the input `tf.Example` proto using the dictionary above.\n  return tf.io.parse_single_example(example_proto, feature_description)\n\ndef split(features):\n    return features['bits'], features['label']\n\ndef decode_image(bits, label=None, image_size=(512, 512)):\n    \n    image = tf.image.decode_jpeg(bits, channels=3)\n    image = tf.cast(image, tf.float32) \/ 255.0\n    image = tf.image.resize(image, image_size)\n    \n    if label is None:\n        return image\n    else:\n        return image, label\n\np = raw_dataset.map(_parse_function)\np = p.map(split)\np = p.map(decode_image)\n\nfor a in p.take(1):\n    print(a)","ff3fad4f":"fork from https:\/\/www.kaggle.com\/hooong\/alaska2-tfrecord-writer\n\nSplit data by Quality factor and Stego.\nStratified by labels.\n\n## About This Notebook\n\nThis is the general process for writing tfrecords for the ALASKA2 competition. \n\nPlease note that kaggle kernels can only store 5gb, so you need to fork it many times to split the data into datsets of 5gb. \n\nIf you use the public option, you won't be consuming your private data storage space. \n\nThe dataframe preparation is taken from https:\/\/www.kaggle.com\/hooong\/train-inference-gpu-baseline. \n\nI recommend reading https:\/\/www.tensorflow.org\/tutorials\/load_data\/tfrecord#writing_a_tfrecord_file for more information if you plan on doing fancy stuff. \n\nJust remember that the augmentations that you can do on the TPU are limited. Most augmentations libraries do not work on the TPU (albumentations for example). You may have to pre augment your data. \n"}}