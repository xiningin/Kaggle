{"cell_type":{"2e30a818":"code","9cc51011":"code","d8ce7186":"code","54580ad3":"code","c4b0def8":"code","fa1e9390":"code","a69a2963":"code","06f1b641":"code","eca540ab":"code","2b28f7b9":"code","088f6ca3":"code","298a70fc":"code","fba8bf10":"code","f452239d":"code","3fa5dc30":"code","3fa58e02":"code","accf57f9":"code","ae76e51a":"code","ddd036d4":"code","4b58527c":"code","a592e5f4":"code","8c8e4b04":"code","9993f9a1":"code","f9d58f57":"code","d7c56ef6":"code","f2252088":"code","2d1d5707":"code","02d7e081":"code","97e8d1d2":"code","ac984532":"code","f33be759":"code","4c129755":"code","608d6c01":"code","d2c51d02":"code","a5c432a2":"code","d81aa9c0":"code","fe83474a":"code","ec19c5f7":"code","40150cf6":"code","3c6d872f":"code","1fd382d7":"code","38a78e26":"code","0aa6b2cc":"code","1161d665":"code","b1281cc1":"code","243b5b0a":"markdown","970012cd":"markdown","f56c9aa3":"markdown","051f01af":"markdown","7e3a15d6":"markdown","3806267b":"markdown","6d3a273c":"markdown"},"source":{"2e30a818":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns  # visualization tool\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))\n\n# Any results you write to the current directory are saved as output.","9cc51011":"data = pd.read_csv('..\/input\/forestfires.csv')","d8ce7186":"data.head(20) #show to only 20 rows","54580ad3":"data.describe(include='all')","c4b0def8":"data.columns #show to features","fa1e9390":"data.info()","a69a2963":"data.corr()","06f1b641":"#correlation map\nf,ax = plt.subplots(figsize=(18, 18))\nsns.heatmap(data.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax)\nplt.show()","eca540ab":"data.RH.plot(kind = 'line', color = 'g',label = 'RH',figsize = (7,7),linewidth=1,alpha = 0.9,grid = True,linestyle = ':') \ndata.temp.plot(color = 'r',label = 'temp',linewidth=1,figsize = (6,6), alpha = 0.9,grid = True,linestyle = '-.')\nplt.legend(loc='upper right')     # legend = puts label into plot\nplt.xlabel('Days that taken measurement')              # label = name of label\nplt.ylabel('Frequency')\nplt.title('RH-temp Line Plot')            # title = title of plot\nplt.show()","2b28f7b9":"data.plot(subplots = True, figsize = (16,16))\nplt.xlabel('Days that taken measurement') \nplt.ylabel('Frequencies')\nplt.show()","088f6ca3":"data.wind.plot(kind = 'hist',bins = 50,figsize = (12,12),range=(0,8),grid = True,normed = True)  #bins defines number of bar; normed=normalization\nplt.show()","298a70fc":"data.wind.plot(kind = 'hist',bins = 10000,figsize = (12,12),range=(0,8),normed = True,cumulative = True)  \nplt.show()","fba8bf10":"x = data['temp'] >= 30\ndata[x]","f452239d":"series = data['ISI']        # data['Defense'] = series\nprint(type(series))\ndata_frame = data[['ISI']]  # data[['Defense']] = data frame\nprint(type(data_frame))","3fa5dc30":"# 1 - Filtering Pandas data frame\nx = data['rain']>=0.5     # There are only 3 pokemons who have higher defense value than 200\ndata[x]","3fa58e02":"# This is also same with previous code line. Therefore we can also use '&' for filtering.\ndata[(data['rain']>=0) & (data['temp'] >= 30)]","accf57f9":"data.wind[data.temp>=30]","ae76e51a":"data.shape","ddd036d4":"print(data['ISI'].value_counts(dropna =False))    #dropna=False = to show Nan ","4b58527c":"Mean_temp = sum(data.temp)\/len(data.temp)\ndata[\"temp_level\"] = [\"high\" if i > Mean_temp else \"low\" for i in data.temp]\ndata.loc[:7,[\"temp_level\",\"temp\"]]","a592e5f4":"data.boxplot(column='temp')","8c8e4b04":"data_new = data.head()   \ndata_new\nmelted = pd.melt(frame=data_new,id_vars = 'month', value_vars= ['FFMC','DC'])\nmelted","9993f9a1":"data1 = data.head()\ndata2= data.tail()\nconc_data_row = pd.concat([data1,data2],axis =0,ignore_index =True) # axis = 0 : adds dataframes in row\nconc_data_row","f9d58f57":"data1 = data['month'].head()\ndata2= data['temp'].head()\nconc_data_col = pd.concat([data1,data2],axis =1) # combine to columns\nconc_data_col","d7c56ef6":"data.dtypes","f2252088":"data['RH '] = data['RH'].astype('float64')","2d1d5707":"data.dtypes","02d7e081":"data.info()","97e8d1d2":"data2 = data.head()\ndate_list = [\"1992-01-10\",\"1992-02-10\",\"1992-03-10\",\"1993-03-15\",\"1993-03-16\"]\ndatetime_object = pd.to_datetime(date_list)\ndata2[\"date\"] = datetime_object\ndata2= data2.set_index(\"date\")\ndata2","ac984532":"data2.resample(\"A\").mean()  #A : year M: mount","f33be759":"data2.resample(\"M\").mean()  #A : year M: mount ","4c129755":"data2.resample(\"M\").first().interpolate(\"linear\")","608d6c01":"data2.resample(\"M\").mean().interpolate(\"linear\")","d2c51d02":"def div(n):\n    return n**2\ndata2.temp.apply(div)","a5c432a2":"data1 = data.set_index([\"temp\",\"wind\"]) \ndata1.head(100)","d81aa9c0":"data.groupby(\"rain\").mean()","fe83474a":"# indexing using square brackets\ndata[\"temp\"][1]","ec19c5f7":"# using loc accessor\ndata.loc[1,[\"temp\"]]","40150cf6":"# Selecting only some columns\ndata[[\"temp\",\"rain\"]]","3c6d872f":"# Slicing and indexing series\ndata.loc[1:10,\"temp\":\"rain\"]   ","1fd382d7":"# From something to end\ndata.loc[1:10,\"ISI\":] ","38a78e26":"# Creating boolean series\nboolean = data.temp > 30\ndata[boolean]","0aa6b2cc":"# Combining filters\nfirst_filter = data.temp > 30\nsecond_filter = data.ISI > 10\ndata[first_filter & second_filter]\ndata.head()","1161d665":"# our index name is this:\nprint(data.index.name)\n# lets change it\n\ndata.index.name = \"index_name\"\ndata.head()","b1281cc1":"# Setting index : type 1 is outer type 2 is inner index\ndata1 = data.set_index([\"month\",\"temp\"]) \ndata1.head(100)\n","243b5b0a":"INDEX OBJECTS AND LABELED DATA","970012cd":"INDEXING DATA FRAMES\n* Indexing using square brackets\n* Using column attribute and row label\n* Using loc accessor\n* Selecting only some columns","f56c9aa3":"Information of Dataset\nFor more information, read [Cortez and Morais, 2007]. \n1. X - x-axis spatial coordinate within the Montesinho park map: 1 to 9 \n2. Y - y-axis spatial coordinate within the Montesinho park map: 2 to 9 \n3. month - month of the year: 'jan' to 'dec' \n4. day - day of the week: 'mon' to 'sun' \n5. FFMC - FFMC index from the FWI system: 18.7 to 96.20 \n6. DMC - DMC index from the FWI system: 1.1 to 291.3 \n7. DC - DC index from the FWI system: 7.9 to 860.6 \n8. ISI - ISI index from the FWI system: 0.0 to 56.10 \n9. temp - temperature in Celsius degrees: 2.2 to 33.30 \n10. RH - relative humidity in %: 15.0 to 100 \n11. wind - wind speed in km\/h: 0.40 to 9.40 \n12. rain - outside rain in mm\/m2 : 0.0 to 6.4 \n13. area - the burned area of the forest (in ha): 0.00 to 1090.84 (this output variable is very skewed towards 0.0, thus it may make sense to model with the logarithm transform).","051f01af":"HIERARCHICAL INDEXING","7e3a15d6":"FILTERING DATA FRAMES","3806267b":"INDEXING PANDAS TIME SERIES\n* datetime = object\n* parse_dates(boolean): Transform date to ISO 8601 (yyyy-mm-dd hh:mm:ss ) format","6d3a273c":"SLICING DATA FRAME\n* Difference between selecting columns\n * Series and data frames\n* Slicing and indexing series\n* Reverse slicing \n* From something to end"}}