{"cell_type":{"62bd49a3":"code","3b6e7d67":"code","e103e50c":"code","f6c9dbbc":"code","3816ef91":"code","f1b8f427":"code","a9168849":"code","58d5fa4c":"code","bf0ca7bb":"markdown","7d6633b5":"markdown","795b96d6":"markdown","c38739fa":"markdown","b859eac8":"markdown","fe5091dd":"markdown","9256b9d8":"markdown","46ed24bd":"markdown","a5689db2":"markdown","afb8a111":"markdown"},"source":{"62bd49a3":"import pandas as pd\nimport seaborn as sns\nfrom learntools.advanced_pandas.data_types_missing_data import *\n\nreviews = pd.read_csv(\"..\/input\/wine-reviews\/winemag-data-130k-v2.csv\", index_col=0)\npd.set_option('max_rows', 5)","3b6e7d67":"check_q1(pd.DataFrame())","e103e50c":"res = reviews.points.dtype\nprint(res)\nprint(check_q1(res))","f6c9dbbc":"res = reviews.price.astype(str)\nprint(res)\nprint(check_q2(res))","3816ef91":"reviews[\"isPrice\"] = reviews.price.isnull()\nres = reviews.isPrice\nprint(res)\nprint(check_q3(res))","f1b8f427":"reviews.region_1.fillna(\"Unknown\",inplace=True)\nres = reviews.region_1.value_counts()\nprint(res)\nprint(check_q4(res))","a9168849":"reviews.drop([\"isPrice\"],inplace=True,axis=1)","58d5fa4c":"cols = reviews.columns\nsums = []\nfor col in cols:\n    sums.append(reviews[col].isnull().sum())\n# print(sums)\ndf = pd.Series(sums, index=cols)\nprint(df)\nprint(check_q5(df))\n# df = reviews.isnull().sum()\n# print(check_q5(df))","bf0ca7bb":"##### Data types and missing data workbook\n\n## Introduction\n\nThis is the workbook component of the \"Data types and missing data\" section of the tutorial.\n\n# Relevant Resources\n- [Data Types and Missing Data Reference](https:\/\/www.kaggle.com\/residentmario\/data-types-and-missing-data-reference)\n\n# Set Up\n\nRun the following cell to load your data and some utility functions","7d6633b5":"# Keep going\nMove on to the [**Renaming and combining workbook**](https:\/\/www.kaggle.com\/kernels\/fork\/598826)","795b96d6":"# Exercises","c38739fa":"Here are a few visual exercises on missing data.\n\n**Exercise 3**: Some wines do not list a price. How often does this occur? Generate a `Series`that, for each review in the dataset, states whether the wine reviewed has a null `price`.","b859eac8":"**Exercise 5**: A neat property of boolean data types, like the ones created by the `isnull()` method, is that `False` gets treated as 0 and `True` as 1 when performing math on the values. Thus, the `sum()` of a list of boolean values will return how many times `True` appears in that list.\nCreate a `pandas` `Series` showing how many times each of the columns in the dataset contains null values. Your result should look something like this:\n\n```\ncountry        63\ndescription     0\n               ..\nvariety         1\nwinery          0\nLength: 13, dtype: int64\n```\n\nHint: write a map that will extract the vintage of each wine in the dataset. The vintages reviewed range from 2000 to 2017, no earlier or later. Use `fillna` to impute the missing values.","fe5091dd":"**Exercise 2**: Create a `Series` from entries in the `price` column, but convert the entries to strings. Hint: strings are `str` in native Python.","9256b9d8":"**Exercise 4**: What are the most common wine-producing regions? Create a `Series` counting the number of times each value occurs in the `region_1` field. This field is often missing data, so replace missing values with `Unknown`. Sort in descending order.  Your output should look something like this:\n\n```\nUnknown                    21247\nNapa Valley                 4480\n                           ...  \nBardolino Superiore            1\nPrimitivo del Tarantino        1\nName: region_1, Length: 1230, dtype: int64\n```","46ed24bd":"**Exercise 1**: What is the data type of the `points` column in the dataset?","a5689db2":"# Checking Answers\n\n**Check your answers in each exercise using the  `check_qN` function** (replacing `N` with the number of the exercise). For example here's how you would check an incorrect answer to exercise 1:","afb8a111":"If you get stuck, **use the `answer_qN` function to see the code with the correct answer.**\n\nFor the first set of questions, running the `check_qN` on the correct answer returns `True`.\n\nFor the second set of questions, using this function to check a correct answer will present an informative graph!"}}