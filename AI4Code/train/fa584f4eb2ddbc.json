{"cell_type":{"0ec0d90d":"code","971e1c13":"code","9ca5dcba":"code","f7393ad6":"code","d0603801":"code","0bd1517b":"code","27e9843e":"code","185214f9":"code","31462af3":"code","d648aae1":"code","f890e725":"code","8f04da08":"code","db7f970b":"code","6b8d474a":"code","a7fa23f0":"code","1f22c02b":"code","3eae8d33":"code","6c4cb17a":"code","f41a9b4e":"code","70fbc74d":"code","3d0d10be":"code","a25d48fe":"code","a836e691":"code","5eb0de30":"code","0c6ff48d":"code","ae8a3cb9":"code","4613500b":"code","17991be8":"code","f54ab670":"code","3b1d67f2":"code","8eaff68a":"code","901316e0":"code","eab4f2f2":"code","7215d5cd":"code","42da7eca":"code","9f301f80":"code","227314b0":"code","0d00f6cc":"code","352063e5":"code","746e8776":"code","e6a520a7":"code","ed340d46":"code","1334cf47":"code","f07b7579":"code","8912c502":"code","de49cbd4":"code","1421dc2a":"code","91bdbd53":"code","167ee3da":"code","8447e442":"code","38ae762d":"code","99cc893a":"code","c949abe9":"code","74eabb9c":"code","5f5d08f6":"code","924cd057":"code","9672665b":"code","648ca40b":"code","720868cc":"code","63e90a73":"code","d9d32521":"code","1b5c2d86":"code","f3322383":"code","a510a07d":"code","57ea688c":"code","e1b9cc91":"code","172cab9d":"code","766132b2":"code","e870d726":"code","23b7bde6":"code","d7f9e519":"code","779e66c7":"code","406df429":"code","6ec54ca1":"code","20ea056c":"code","0a7767ce":"code","be0ae231":"code","23e11d1e":"code","90ce09bc":"code","6bcc453a":"code","a9ffa780":"code","e642b674":"code","57a1b86f":"code","90d142f2":"code","60993fb4":"code","cac5630a":"code","c20e51dc":"code","17dc8528":"code","1edcd484":"code","95b1ced7":"code","7192ec7f":"code","629ff42f":"code","8696f9e8":"code","ac9ea869":"code","b90af809":"code","ee14c74c":"code","fa28d8a1":"code","4821a9a2":"markdown","47fe7031":"markdown","2a1907aa":"markdown","f06a756e":"markdown","afd92843":"markdown","dbf26ac3":"markdown","db90902e":"markdown","6a9f2f5a":"markdown","d60c80e9":"markdown","bd8d5fe1":"markdown","3f50ec4d":"markdown","3ac917b9":"markdown","bb832b18":"markdown","10c2d30d":"markdown","de20ffc3":"markdown","7bc7b1c2":"markdown","750a7abd":"markdown","80506d2c":"markdown","93b504c3":"markdown","ab0c27c2":"markdown","2680ee33":"markdown","8fe975ec":"markdown","8ed40835":"markdown","acf2bb3e":"markdown","9fe08d78":"markdown","c6b0afc1":"markdown","14367611":"markdown","e1062a96":"markdown","22df0f9a":"markdown","1b1d1c3f":"markdown","06ffbe2c":"markdown","2ac308fd":"markdown","b432b2b3":"markdown","d77a2f53":"markdown","7cc62fa2":"markdown","9d63d379":"markdown","75604535":"markdown","68cb0841":"markdown","83f60527":"markdown","bee8f0f1":"markdown","60d811cb":"markdown","f2f4d258":"markdown","3f0fa7e7":"markdown","aef4f356":"markdown","5005a970":"markdown","c661b8dc":"markdown","de8ad0f5":"markdown","a4c181fc":"markdown","82f88648":"markdown","cf5e6ca0":"markdown","4bcf5abf":"markdown","2a0327fc":"markdown","f757eddf":"markdown","898f2f3d":"markdown","9514f186":"markdown","c8edba94":"markdown","b016bc31":"markdown","7e90fbbe":"markdown","127e735c":"markdown"},"source":{"0ec0d90d":"# \u524d\u51e6\u7406\u306b\u5fc5\u8981\u306a\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u8aad\u307f\u8fbc\u307f\n# pandas\u306f\u8868\u5f62\u5f0f\u306e\u30c7\u30fc\u30bf\u3092\u6271\u3046\u305f\u3081\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\nimport pandas as pd","971e1c13":"# \u8aad\u307f\u8fbc\u3093\u3060\u30c7\u30fc\u30bf\u306fExcel\u306e\u8868\u306e\u3088\u3046\u306a\u5f62\u5f0f\u3067\u6271\u3046\uff08\u884c\u3068\u5217\u304c\u3042\u308b\uff09\n# \u30e2\u30c7\u30eb\u4f5c\u6210\u7528\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\uff08\u751f\u5b58\u304b\u6b7b\u4ea1\u304b\u77e5\u3063\u3066\u3044\u308b\u30c7\u30fc\u30bf\uff09\ntrain_df = pd.read_csv('..\/input\/train.csv')\n# \u4e88\u6e2c\u5bfe\u8c61\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\uff08\u751f\u5b58\u304b\u6b7b\u4ea1\u304b\u77e5\u3089\u306a\u3044\u30c7\u30fc\u30bf\uff09\ntest_df = pd.read_csv('..\/input\/test.csv')","9ca5dcba":"# \u30e2\u30c7\u30eb\u4f5c\u6210\u7528\u30c7\u30fc\u30bf\u306e\u30b5\u30a4\u30ba\u3092\u78ba\u8a8d\n# (\u884c\u6570, \u5217\u6570) \u3067\u8868\u793a\u3055\u308c\u308b\ntrain_df.shape","f7393ad6":"# \u4e88\u6e2c\u5bfe\u8c61\u30c7\u30fc\u30bf\u306e\u30b5\u30a4\u30ba\u3092\u78ba\u8a8d\n# \u30e2\u30c7\u30eb\u4f5c\u6210\u7528\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u30661\u5217\u5c11\u306a\u3044\ntest_df.shape","d0603801":"# \u30c7\u30fc\u30bf\u306e\u4e00\u90e8\u3092\u898b\u3066\u307f\u308b\n# \u30e2\u30c7\u30eb\u4f5c\u6210\u7528\u30c7\u30fc\u30bf\u306e\u4e0a\u304b\u30895\u884c\u3092\u8868\u793a\n# \u53c2\u8003: train_df.head(7) # \u4e0a\u304b\u30897\u884c\u8868\u793a\ntrain_df.head()","0bd1517b":"# \u4e88\u6e2c\u5bfe\u8c61\u30c7\u30fc\u30bf\u306e\u4e0a\u304b\u30895\u884c\u3092\u8868\u793a\n# Survived\u306e\u5217\uff08\u751f\u5b58\u304b\u6b7b\u4ea1\u304b\u3092\u8868\u3059\uff09\u304c\u306a\u3044\u3053\u3068\u304c\u78ba\u8a8d\u3067\u304d\u308b\ntest_df.head()","27e9843e":"# \u5404\u5217\u306b\u3069\u3093\u306a\u7a2e\u985e\u306e\u30c7\u30fc\u30bf\u304c\u5165\u3063\u3066\u3044\u308b\u304b\u78ba\u304b\u3081\u308b\uff08\u6570\u5024\u306a\u306e\u304b\u3001\u6587\u5b57\u5217\u306a\u306e\u304b\uff09\n# \u30e2\u30c7\u30eb\u4f5c\u6210\u7528\u30c7\u30fc\u30bf\u306e\u60c5\u5831\u3092\u78ba\u8a8d\uff08\u898b\u65b9\u306b\u3064\u3044\u3066\u306f\u5f8c\u8ff0\uff09\ntrain_df.info()","185214f9":"# \u4e88\u6e2c\u5bfe\u8c61\u30c7\u30fc\u30bf\u306e\u60c5\u5831\u3092\u78ba\u8a8d\ntest_df.info()","31462af3":"# \u30e2\u30c7\u30eb\u4f5c\u6210\u30fb\u6027\u80fd\u8a55\u4fa1\u306b\u4f7f\u3046\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u8aad\u307f\u8fbc\u307f\n# scikit-learn\uff08\u30b3\u30fc\u30c9\u3067\u306fsklearn\uff09\u306f\u3001\u6a5f\u68b0\u5b66\u7fd2\u306e\u69d8\u3005\u306a\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3084\u3001\u30e2\u30c7\u30eb\u306e\u8a55\u4fa1\u30c4\u30fc\u30eb\u3092\u63d0\u4f9b\u3059\u308b\u30e2\u30b8\u30e5\u30fc\u30eb\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier","d648aae1":"# \u30e2\u30c7\u30eb\u304c\u4e88\u6e2c\u306b\u4f7f\u3046\u60c5\u5831\uff08\u3053\u3053\u3067\u306f\u6027\u5225\uff09\u3092x, \u30e2\u30c7\u30eb\u304c\u4e88\u6e2c\u3059\u308b\u60c5\u5831\uff08\u3053\u3053\u3067\u306f\u751f\u6b7b\uff09\u3092y\u3068\u3057\u3066\u53d6\u308a\u51fa\u3059\nx = train_df['Sex']\ny = train_df['Survived']","f890e725":"# x\u306e\u5024\u306e\u3046\u3061\u3001female\u304c1\u306b\u7f6e\u304d\u63db\u308f\u308a\u3001male\u304c0\u306b\u7f6e\u304d\u63db\u308f\u308b\uff08\u30b3\u30ed\u30f3\u306e\u5de6\u5074\u306b\u4e00\u81f4\u3059\u308b\u8981\u7d20\u304c\u3001\u30b3\u30ed\u30f3\u306e\u53f3\u5074\u306e\u5024\u306b\u7f6e\u304d\u63db\u308f\u308b\uff09\n# \u6ce8: Sex\u306e\u53d6\u308a\u3046\u308b\u5024\u306ffemale\u304bmale\n# astype(int)\u3067\u30c7\u30fc\u30bf\u306e\u578b\u304c\u6587\u5b57\u5217\u304b\u3089\u6574\u6570\u3078\u5909\u308f\u308b\u3053\u3068\u306b\u5bfe\u5fdc\ny_pred = x.map({'female': 1, 'male': 0}).astype(int)","8f04da08":"# \u4e88\u6e2cy_pred\u3092\u5b9f\u969b\u306e\u751f\u6b7by\u3067\u63a1\u70b9\u3057\u3001\u4e88\u6e2c\u306e\u6b63\u89e3\u7387(accuracy)\u3092\u8868\u793a\naccuracy_score(y, y_pred)","db7f970b":"# \u4e88\u6e2c\u5bfe\u8c61\u30c7\u30fc\u30bf\u306b\u3064\u3044\u3066\u751f\u6b7b\u3092\u4e88\u6e2c\u3059\u308b\n# \u4e88\u6e2c\u5bfe\u8c61\u30c7\u30fc\u30bf\u306eSex\u5217\u306e\u53d6\u308a\u51fa\u3057\nx_test = test_df['Sex']\n# Sex\u306e\u5024\u3092\u5143\u306b\u3001\u751f\u6b7b\u3092\u4e88\u6e2c\ny_test_pred = x_test.map({'female': 1, 'male': 0}).astype(int)","6b8d474a":"# \u63d0\u51fa\u7528\u30c7\u30fc\u30bf\u306e\u5f62\u5f0f\u306b\u5909\u63db\nsubmission = pd.DataFrame({\n    'PassengerId': test_df['PassengerId'],\n    'Survived': y_test_pred\n})\n# \u63d0\u51fa\u7528\u30c7\u30fc\u30bf\u4f5c\u6210\nsubmission.to_csv('submission.csv', index=False)","a7fa23f0":"# Sex\u3068Pclass\u304b\u3089\u751f\u6b7b\u3092\u4e88\u6e2c\u3059\u308b\u30e2\u30c7\u30eb\u3092\u4f5c\u308b\u3053\u3068\u306b\u3059\u308b\ncolumns = ['Pclass', 'Sex']","1f22c02b":"# \u30e2\u30c7\u30eb\u4f5c\u6210\u306b\u4f7f\u3046\u60c5\u5831\u3092X, \u30e2\u30c7\u30eb\u304c\u4e88\u6e2c\u3059\u308b\u60c5\u5831\uff08\u3053\u3053\u3067\u306f\u751f\u6b7b\uff09\u3092y\u3068\u3057\u3066\u53d6\u308a\u51fa\u3059\uff08X\u3068y\u3068\u3044\u3046\u5909\u6570\u540d\u304c\u591a\u3044\uff09\nX = train_df[columns].copy()\ny = train_df['Survived']\n# \u4e88\u6e2c\u5bfe\u8c61\u30c7\u30fc\u30bf\u306b\u3064\u3044\u3066\u3001\u4e88\u6e2c\u306b\u4f7f\u3046\u60c5\u5831\u3092\u53d6\u308a\u51fa\u3057\u3066\u304a\u304f\nX_test = test_df[columns].copy()","3eae8d33":"# \u30e2\u30c7\u30eb\u4f5c\u6210\u306b\u4f7f\u3046\u30c7\u30fc\u30bf\u3092\u78ba\u8a8d\nX.head()","6c4cb17a":"# \u6027\u5225\uff08female\/male\uff09\u30920\/1\u306b\u5909\u63db\u3059\u308b\uff08male\u3068female\u306e\u307e\u307e\u3067\u306f\u30e2\u30c7\u30eb\u4f5c\u6210\u6642\u306b\u6271\u3048\u306a\u3044\uff09\n# \u30ab\u30c6\u30b4\u30ea\u3092\u6574\u6570\u306b\u7f6e\u304d\u63db\u3048\u308b\u305f\u3081\u306e\u300c\u8f9e\u66f8\u300d\u3092\u7528\u610f\ngender_map = {'female': 0, 'male': 1}\n# \u5f15\u6570\u306e\u8f9e\u66f8\u3067\u30b3\u30ed\u30f3\u306e\u5de6\u5074\uff08\u30ad\u30fc\uff09\u306b\u4e00\u81f4\u3059\u308b\u8981\u7d20\u304c\u3001\u30b3\u30ed\u30f3\u306e\u53f3\u5074\u306e\u5024\u306b\u7f6e\u304d\u63db\u308f\u308b\uff08female\u304c0\u306b\u7f6e\u304d\u63db\u308f\u308a\u3001male\u304c1\u306b\u7f6e\u304d\u63db\u308f\u308b\uff09\nX['Gender'] = X['Sex'].map(gender_map).astype(int)\nX_test['Gender'] = X_test['Sex'].map(gender_map).astype(int)","f41a9b4e":"# Sex\u306b\u4ee3\u3048\u3066Gender\u3092\u4f7f\u3046\u305f\u3081\u3001Sex\u5217\u3092\u524a\u9664\u3059\u308b\nX = X.drop(['Sex'], axis=1)\nX_test = X_test.drop(['Sex'], axis=1)","70fbc74d":"# \u30e2\u30c7\u30eb\u4f5c\u6210\u306b\u4f7f\u3046\u30c7\u30fc\u30bf\u306b\u3064\u3044\u3066\u3001\u524d\u51e6\u7406\u3057\u305f\u5f8c\u306e\u72b6\u614b\u3092\u78ba\u8a8d\nX.head()","3d0d10be":"# \u4eca\u56de\u306e\u30cf\u30f3\u30ba\u30aa\u30f3\u306f7:3\u306b\u5206\u3051\u3066\u9032\u3081\u308b\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.3, random_state=1)","a25d48fe":"# \u5b66\u7fd2\u7528\u30c7\u30fc\u30bf\u306e\u6570\u306e\u78ba\u8a8d\nlen(y_train)","a836e691":"# \u6027\u80fd\u8a55\u4fa1\u7528\u306e\u30c7\u30fc\u30bf\u306e\u6570\u306e\u78ba\u8a8d\nlen(y_val)","5eb0de30":"# \u6c7a\u5b9a\u6728\u3068\u3044\u3046\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u4f7f\u3063\u305f\u30e2\u30c7\u30eb\u3092\u7528\u610f\nmodel = DecisionTreeClassifier(random_state=1, criterion='entropy', max_depth=3, min_samples_leaf=2)\n# \u30e2\u30c7\u30eb\u4f5c\u6210\u306f\u4ee5\u4e0b\u306e1\u884c\uff08\u3053\u3053\u307e\u3067\u306e\u524d\u51e6\u7406\u306b\u5bfe\u3057\u3066\u305f\u3063\u305f1\u884c\uff01\uff09\u3067\u5b8c\u4e86\u3059\u308b\nmodel.fit(X_train, y_train)","0c6ff48d":"# \u6027\u80fd\u8a55\u4fa1\u7528\u30c7\u30fc\u30bf\u306b\u3064\u3044\u3066\u751f\u6b7b\u3092\u4e88\u6e2c\npred = model.predict(X_val)\n# \u6027\u80fd\u78ba\u8a8d:accuracy\u3092\u7b97\u51fa\u3057\u3066\u8868\u793a\naccuracy_score(y_val, pred)","ae8a3cb9":"# X_test\u306b\u3064\u3044\u3066\u751f\u6b7b\u3092\u4e88\u6e2c\uff08\u4e88\u6e2c\u5bfe\u8c61\u30c7\u30fc\u30bf\u304b\u3089Sex\u3068Pclass\u3092X_test\u3068\u3057\u3066\u53d6\u308a\u51fa\u3057\u3001X\u3068\u540c\u69d8\u306e\u524d\u51e6\u7406\u3092\u884c\u3063\u3066\u3044\u308b\uff09\npred = model.predict(X_test)","4613500b":"# \u3053\u306e\u30bb\u30eb\u3092\u5b9f\u884c\u3059\u308b\u969b\u306b\u3001#submission.to_csv(...)\u306e\u5148\u982d\u306e#\u3092\u6d88\u3057\u3066\u304f\u3060\u3055\u3044\n# \u63d0\u51fa\u7528\u30c7\u30fc\u30bf\u306e\u5f62\u5f0f\u306b\u5909\u63db\nsubmission = pd.DataFrame({\n    'PassengerId': test_df['PassengerId'],\n    'Survived': pred\n})\n# \u63d0\u51fa\u7528\u30c7\u30fc\u30bf\u4f5c\u6210\n#submission.to_csv('submission.csv', index=False) # \u5148\u982d\u306e#\u3092\u6d88\u3057\u3066\u304f\u3060\u3055\u3044","17991be8":"# \u30e2\u30c7\u30eb\u306e\u4e88\u6e2c\u306b\u4f7f\u3046\u60c5\u5831\u306bAge\u3092\u8ffd\u52a0\ncolumns = ['Pclass', 'Sex', 'Age']","f54ab670":"# \u30e2\u30c7\u30eb\u4f5c\u6210\u306b\u4f7f\u3046\u60c5\u5831\u3092X, \u30e2\u30c7\u30eb\u304c\u4e88\u6e2c\u3059\u308b\u60c5\u5831\uff08\u3053\u3053\u3067\u306f\u751f\u6b7b\uff09\u3092y\u3068\u3057\u3066\u53d6\u308a\u51fa\u3059\nX = train_df[columns].copy()\ny = train_df['Survived']\n# \u4e88\u6e2c\u5bfe\u8c61\u30c7\u30fc\u30bf\u306b\u3064\u3044\u3066\u3001\u4e88\u6e2c\u306b\u4f7f\u3046\u60c5\u5831\u3092\u53d6\u308a\u51fa\u3057\u3066\u304a\u304f\nX_test = test_df[columns].copy()","3b1d67f2":"# \u30e2\u30c7\u30eb\u4f5c\u6210\u306b\u4f7f\u3046\u30c7\u30fc\u30bf\u3092\u78ba\u8a8d\nX.head()","8eaff68a":"# \u30e2\u30c7\u30eb\u4f5c\u6210\u306b\u4f7f\u3046\u30c7\u30fc\u30bf\u306e\u6b20\u640d\u5024\u306e\u78ba\u8a8d\nX.isnull().sum()","901316e0":"# \u30e2\u30c7\u30eb\u304c\u4e88\u6e2c\u3059\u308b\u30c7\u30fc\u30bf\u306e\u6b20\u640d\u5024\u306e\u78ba\u8a8d\nX_test.isnull().sum()","eab4f2f2":"# Age\u306e\u5e73\u5747\u5024\u306e\u7b97\u51fa\nage_mean = X['Age'].mean()\nprint(f'Age mean: {age_mean}')","7215d5cd":"# \u5e73\u5747\u5024\u3092\u5c0f\u6570\u7b2c2\u4f4d\u3067\u56db\u6368\u4e94\u5165\u3057\u3066\u4f7f\u3046(round\u95a2\u6570)\n# Age\u306e\u6b20\u640d\u3092\u5e73\u5747\u5024\u3067\u57cb\u3081\u305f\u5217AgeFill\u3092\u8ffd\u52a0\nX['AgeFill'] = X['Age'].fillna(round(age_mean, 1))\nX_test['AgeFill'] = X_test['Age'].fillna(round(age_mean, 1))","42da7eca":"# \u6b20\u640d\u3092\u542b\u3080Age\u5217\u3092\u524a\u9664\uff08\u5e74\u9f62\u306e\u60c5\u5831\u306fAgeFill\u5217\u3092\u53c2\u7167\u3059\u308b\uff09\nX = X.drop(['Age'], axis=1)\nX_test = X_test.drop(['Age'], axis=1)","9f301f80":"# \u30e2\u30c7\u30eb\u4f5c\u6210\u306b\u4f7f\u3046\u30c7\u30fc\u30bf\u306e\u6b20\u640d\u5024\u306e\u78ba\u8a8d\nX.isnull().sum()","227314b0":"# \u30e2\u30c7\u30eb\u304c\u4e88\u6e2c\u3059\u308b\u30c7\u30fc\u30bf\u306e\u6b20\u640d\u5024\u306e\u78ba\u8a8d\nX_test.isnull().sum()","0d00f6cc":"# \u6027\u5225\uff08female\/male\uff09\u30920\/1\u306b\u5909\u63db\u3059\u308b\uff08\u300c2.\u30e2\u30c7\u30eb\u4f5c\u6210\u3092\u4e00\u7dd2\u306b\u4f53\u9a13\u300d\u3068\u540c\u69d8\uff09\ngender_map = {'female': 0, 'male': 1}\nX['Gender'] = X['Sex'].map(gender_map).astype(int)\nX_test['Gender'] = X_test['Sex'].map(gender_map).astype(int)","352063e5":"# Sex\u306b\u4ee3\u3048\u3066Gender\u3092\u4f7f\u3046\u305f\u3081\u3001Sex\u5217\u3092\u524a\u9664\u3059\u308b\nX = X.drop(['Sex'], axis=1)\nX_test = X_test.drop(['Sex'], axis=1)","746e8776":"# \u30e2\u30c7\u30eb\u4f5c\u6210\u306b\u4f7f\u3046\u30c7\u30fc\u30bf\u306b\u3064\u3044\u3066\u3001\u524d\u51e6\u7406\u3057\u305f\u5f8c\u306e\u72b6\u614b\u3092\u78ba\u8a8d\nX.head()","e6a520a7":"# \u4eca\u56de\u306e\u30cf\u30f3\u30ba\u30aa\u30f3\u3067\u306f\u30e2\u30c7\u30eb\u4f5c\u6210\u7528\u30c7\u30fc\u30bf\u30927:3\u306b\u5206\u3051\u3066\u9032\u3081\u308b\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.3, random_state=1)","ed340d46":"# \u5b66\u7fd2\u7528\u30c7\u30fc\u30bf\u306e\u6570\u306e\u78ba\u8a8d\nlen(y_train)","1334cf47":"# \u6027\u80fd\u8a55\u4fa1\u7528\u306e\u30c7\u30fc\u30bf\u306e\u6570\u306e\u78ba\u8a8d\nlen(y_val)","f07b7579":"# \u6c7a\u5b9a\u6728\u3068\u3044\u3046\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u4f7f\u3063\u305f\u30e2\u30c7\u30eb\u3092\u7528\u610f\nmodel = DecisionTreeClassifier(random_state=1, criterion='entropy', max_depth=3, min_samples_leaf=2)\n# \u30e2\u30c7\u30eb\u4f5c\u6210\u306f\u4ee5\u4e0b\u306e1\u884c\uff08\u3053\u3053\u307e\u3067\u306e\u524d\u51e6\u7406\u306b\u5bfe\u3057\u3066\u305f\u3063\u305f1\u884c\uff01\uff09\u3067\u5b8c\u4e86\u3059\u308b\nmodel.fit(X_train, y_train)","8912c502":"# \u6027\u80fd\u8a55\u4fa1\u7528\u30c7\u30fc\u30bf\u306b\u3064\u3044\u3066\u751f\u6b7b\u3092\u4e88\u6e2c\npred = model.predict(X_val)\n# \u6027\u80fd\u78ba\u8a8d\uff1aaccuracy\u3092\u7b97\u51fa\u3057\u3066\u8868\u793a\naccuracy_score(y_val, pred)","de49cbd4":"# \u4e88\u6e2c\u5bfe\u8c61\u30c7\u30fc\u30bf\u306b\u3064\u3044\u3066\u751f\u6b7b\u3092\u4e88\u6e2c\npred = model.predict(X_test)","1421dc2a":"# \u3053\u306e\u30bb\u30eb\u3092\u5b9f\u884c\u3059\u308b\u969b\u306b\u3001#submission.to_csv(...)\u306e\u5148\u982d\u306e#\u3092\u6d88\u3057\u3066\u304f\u3060\u3055\u3044\n# \u63d0\u51fa\u7528\u30c7\u30fc\u30bf\u306e\u5f62\u5f0f\u306b\u5909\u63db\nsubmission = pd.DataFrame({\n    'PassengerId': test_df['PassengerId'],\n    'Survived': pred\n})\n# \u63d0\u51fa\u7528\u30c7\u30fc\u30bf\u4f5c\u6210\n#submission.to_csv('submission.csv', index=False) # \u5148\u982d\u306e#\u3092\u6d88\u3057\u3066\u304f\u3060\u3055\u3044","91bdbd53":"# \u30e2\u30c7\u30eb\u306e\u4e88\u6e2c\u306b\u4f7f\u3046\u60c5\u5831\u306bEmbarked\u3092\u8ffd\u52a0\ncolumns = ['Pclass', 'Sex', 'Embarked']","167ee3da":"# \u30e2\u30c7\u30eb\u4f5c\u6210\u306b\u4f7f\u3046\u60c5\u5831\u3092X, \u30e2\u30c7\u30eb\u304c\u4e88\u6e2c\u3059\u308b\u60c5\u5831\uff08\u3053\u3053\u3067\u306f\u751f\u6b7b\uff09\u3092y\u3068\u3057\u3066\u53d6\u308a\u51fa\u3059\nX = train_df[columns].copy()\ny = train_df['Survived']\n# \u4e88\u6e2c\u5bfe\u8c61\u30c7\u30fc\u30bf\u306b\u3064\u3044\u3066\u3001\u4e88\u6e2c\u306b\u4f7f\u3046\u60c5\u5831\u3092\u53d6\u308a\u51fa\u3057\u3066\u304a\u304f\nX_test = test_df[columns].copy()","8447e442":"# \u30e2\u30c7\u30eb\u4f5c\u6210\u306b\u4f7f\u3046\u30c7\u30fc\u30bf\u3092\u78ba\u8a8d\nX.head()","38ae762d":"# \u30e2\u30c7\u30eb\u4f5c\u6210\u306b\u4f7f\u3046\u30c7\u30fc\u30bf\u306e\u6b20\u640d\u5024\u306e\u78ba\u8a8d\nX.isnull().sum()","99cc893a":"# \u30e2\u30c7\u30eb\u304c\u4e88\u6e2c\u3059\u308b\u30c7\u30fc\u30bf\u306e\u6b20\u640d\u5024\u306e\u78ba\u8a8d\nX_test.isnull().sum()","c949abe9":"# \u4e00\u756a\u591a\u304f\u306e\u4eba\u304c\u4e57\u3063\u3066\u3044\u308b\u6e2f\u306e\u53d6\u5f97\nembarked_freq = X['Embarked'].mode()[0]\nprint(f'Embarked freq: {embarked_freq}')","74eabb9c":"# Embarked\u306e\u6b20\u640d\u3092\u5e73\u5747\u5024\u3067\u57cb\u3081\u305f\u5217EmbarkedFill\u3092\u8ffd\u52a0\nX['EmbarkedFill'] = X['Embarked'].fillna(embarked_freq)\nX_test['EmbarkedFill'] = X_test['Embarked'].fillna(embarked_freq)","5f5d08f6":"# \u6b20\u640d\u3092\u542b\u3080Embarked\u5217\u3092\u524a\u9664\uff08\u4e57\u8239\u3057\u305f\u6e2f\u306e\u60c5\u5831\u306fEmbarkedFill\u5217\u3092\u53c2\u7167\u3059\u308b\uff09\nX = X.drop(['Embarked'], axis=1)\nX_test = X_test.drop(['Embarked'], axis=1)","924cd057":"# \u30e2\u30c7\u30eb\u4f5c\u6210\u306b\u4f7f\u3046\u30c7\u30fc\u30bf\u306e\u6b20\u640d\u5024\u306e\u78ba\u8a8d\nX.isnull().sum()","9672665b":"# \u6027\u5225\uff08female\/male\uff09\u30920\/1\u306b\u5909\u63db\u3059\u308b\uff08\u300c2.\u30e2\u30c7\u30eb\u4f5c\u6210\u3092\u4e00\u7dd2\u306b\u4f53\u9a13\u300d\u3068\u540c\u69d8\uff09\ngender_map = {'female': 0, 'male': 1}\nX['Gender'] = X['Sex'].map(gender_map).astype(int)\nX_test['Gender'] = X_test['Sex'].map(gender_map).astype(int)","648ca40b":"# Sex\u306b\u4ee3\u3048\u3066Gender\u3092\u4f7f\u3046\u305f\u3081\u3001Sex\u5217\u3092\u524a\u9664\u3059\u308b\nX = X.drop(['Sex'], axis=1)\nX_test = X_test.drop(['Sex'], axis=1)","720868cc":"# EmbarkedFill\uff08S, Q, C\u3068\u3044\u30463\u30ab\u30c6\u30b4\u30ea\uff09\u3092\u30c0\u30df\u30fc\u5909\u6570\u306b\u3059\u308b\n# \uff08EmbarkedFill\u5217\u304c\u6d88\u3048\u3001EmbarkedFill_S, EmbarkedFill_Q, EmbarkedFill_C\u5217\u304c\u8ffd\u52a0\u3055\u308c\u308b\uff09\nX = pd.get_dummies(X, columns=['EmbarkedFill'])\nX_test = pd.get_dummies(X_test, columns=['EmbarkedFill'])","63e90a73":"# \u30e2\u30c7\u30eb\u4f5c\u6210\u306b\u4f7f\u3046\u30c7\u30fc\u30bf\u306b\u3064\u3044\u3066\u3001\u524d\u51e6\u7406\u3057\u305f\u5f8c\u306e\u72b6\u614b\u3092\u78ba\u8a8d\nX.head()","d9d32521":"# \u4eca\u56de\u306e\u30cf\u30f3\u30ba\u30aa\u30f3\u3067\u306f\u30e2\u30c7\u30eb\u4f5c\u6210\u7528\u30c7\u30fc\u30bf\u30927:3\u306b\u5206\u3051\u3066\u9032\u3081\u308b\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.3, random_state=1)","1b5c2d86":"# \u5b66\u7fd2\u7528\u30c7\u30fc\u30bf\u306e\u6570\u306e\u78ba\u8a8d\nlen(y_train)","f3322383":"# \u6027\u80fd\u8a55\u4fa1\u7528\u306e\u30c7\u30fc\u30bf\u306e\u6570\u306e\u78ba\u8a8d\nlen(y_val)","a510a07d":"# \u6c7a\u5b9a\u6728\u3068\u3044\u3046\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u4f7f\u3063\u305f\u30e2\u30c7\u30eb\u3092\u7528\u610f\nmodel = DecisionTreeClassifier(random_state=1, criterion='entropy', max_depth=3, min_samples_leaf=2)\n# \u30e2\u30c7\u30eb\u4f5c\u6210\u306f\u4ee5\u4e0b\u306e1\u884c\uff08\u3053\u3053\u307e\u3067\u306e\u524d\u51e6\u7406\u306b\u5bfe\u3057\u3066\u305f\u3063\u305f1\u884c\uff01\uff09\u3067\u5b8c\u4e86\u3059\u308b\nmodel.fit(X_train, y_train)","57ea688c":"# \u6027\u80fd\u8a55\u4fa1\u7528\u30c7\u30fc\u30bf\u306b\u3064\u3044\u3066\u751f\u6b7b\u3092\u4e88\u6e2c\npred = model.predict(X_val)\n# \u6027\u80fd\u78ba\u8a8d\uff1aaccuracy\u3092\u7b97\u51fa\u3057\u3066\u8868\u793a\naccuracy_score(y_val, pred)","e1b9cc91":"# \u4e88\u6e2c\u5bfe\u8c61\u30c7\u30fc\u30bf\u306b\u3064\u3044\u3066\u751f\u6b7b\u3092\u4e88\u6e2c\npred = model.predict(X_test)","172cab9d":"# \u3053\u306e\u30bb\u30eb\u3092\u5b9f\u884c\u3059\u308b\u969b\u306b\u3001#submission.to_csv(...)\u306e\u5148\u982d\u306e#\u3092\u6d88\u3057\u3066\u304f\u3060\u3055\u3044\n# \u63d0\u51fa\u7528\u30c7\u30fc\u30bf\u306e\u5f62\u5f0f\u306b\u5909\u63db\nsubmission = pd.DataFrame({\n    'PassengerId': test_df['PassengerId'],\n    'Survived': pred\n})\n# \u63d0\u51fa\u7528\u30c7\u30fc\u30bf\u4f5c\u6210\n#submission.to_csv('submission.csv', index=False) # \u5148\u982d\u306e#\u3092\u6d88\u3057\u3066\u304f\u3060\u3055\u3044","766132b2":"# train_df, test_df\u304b\u3089Sex, Pclass, Age, Embarked\u3092\u53d6\u308a\u51fa\u3059","e870d726":"# Age\u306e\u6b20\u640d\u3078\u306e\u5bfe\u5fdc","23b7bde6":"# Embarked\u306e\u6b20\u640d\u3078\u306e\u5bfe\u5fdc","d7f9e519":"# \u304c\u30c6\u30b4\u30ea\u5909\u6570Sex\u3078\u306e\u5bfe\u5fdc","779e66c7":"# \u30ab\u30c6\u30b4\u30ea\u5909\u6570Embarked\u3078\u306e\u5bfe\u5fdc","406df429":"# \u30e2\u30c7\u30eb\u4f5c\u6210","6ec54ca1":"# \u6027\u80fd\u78ba\u8a8d","20ea056c":"# \u63d0\u51fa\u7528\u30c7\u30fc\u30bf\u4f5c\u6210","0a7767ce":"# \u30e2\u30c7\u30eb\u306e\u4e88\u6e2c\u306b\u4f7f\u3046\u60c5\u5831\u306bAge\u3092\u8ffd\u52a0\ncolumns = ['Pclass', 'Sex', 'Age']","be0ae231":"# \u30e2\u30c7\u30eb\u4f5c\u6210\u306b\u4f7f\u3046\u60c5\u5831\u3092X, \u30e2\u30c7\u30eb\u304c\u4e88\u6e2c\u3059\u308b\u60c5\u5831\uff08\u3053\u3053\u3067\u306f\u751f\u6b7b\uff09\u3092y\u3068\u3057\u3066\u53d6\u308a\u51fa\u3059\nX = train_df[columns].copy()\ny = train_df['Survived']\n# \u4e88\u6e2c\u5bfe\u8c61\u30c7\u30fc\u30bf\u306b\u3064\u3044\u3066\u3001\u4e88\u6e2c\u306b\u4f7f\u3046\u60c5\u5831\u3092\u53d6\u308a\u51fa\u3057\u3066\u304a\u304f\nX_test = test_df[columns].copy()","23e11d1e":"# \u30e2\u30c7\u30eb\u4f5c\u6210\u306b\u4f7f\u3046\u30c7\u30fc\u30bf\u3092\u78ba\u8a8d\nX.head()","90ce09bc":"# \u30e2\u30c7\u30eb\u4f5c\u6210\u306b\u4f7f\u3046\u30c7\u30fc\u30bf\u306e\u6b20\u640d\u5024\u306e\u78ba\u8a8d\nX.isnull().sum()","6bcc453a":"# \u30e2\u30c7\u30eb\u304c\u4e88\u6e2c\u3059\u308b\u30c7\u30fc\u30bf\u306e\u6b20\u640d\u5024\u306e\u78ba\u8a8d\nX_test.isnull().sum()","a9ffa780":"# Age\u306e\u5e73\u5747\u5024\u306e\u7b97\u51fa\nage_mean = X['Age'].mean()\nprint(f'Age mean: {age_mean}')","e642b674":"# \u5e73\u5747\u5024\u3092\u5c0f\u6570\u7b2c2\u4f4d\u3067\u56db\u6368\u4e94\u5165\u3057\u3066\u4f7f\u3046(round\u95a2\u6570)\n# Age\u306e\u6b20\u640d\u3092\u5e73\u5747\u5024\u3067\u57cb\u3081\u305f\u5217AgeFill\u3092\u8ffd\u52a0\nX['AgeFill'] = X['Age'].fillna(round(age_mean, 1))\nX_test['AgeFill'] = X_test['Age'].fillna(round(age_mean, 1))","57a1b86f":"# \u6b20\u640d\u3092\u542b\u3080Age\u5217\u3092\u524a\u9664\uff08\u5e74\u9f62\u306e\u60c5\u5831\u306fAgeFill\u5217\u3092\u53c2\u7167\u3059\u308b\uff09\nX = X.drop(['Age'], axis=1)\nX_test = X_test.drop(['Age'], axis=1)","90d142f2":"# \u30e2\u30c7\u30eb\u4f5c\u6210\u306b\u4f7f\u3046\u30c7\u30fc\u30bf\u306e\u6b20\u640d\u5024\u306e\u78ba\u8a8d\nX.isnull().sum()","60993fb4":"# \u30e2\u30c7\u30eb\u304c\u4e88\u6e2c\u3059\u308b\u30c7\u30fc\u30bf\u306e\u6b20\u640d\u5024\u306e\u78ba\u8a8d\nX_test.isnull().sum()","cac5630a":"# AgeFill\u3092\u6700\u5c0f\u3068\u6700\u5927\u306e\u9593\u306710\u5206\u5272\nage_band = pd.cut(X['AgeFill'], 10)\n# \u533a\u9593\u306b\u542b\u307e\u308c\u308b\u5e74\u4ee3\u306e\u9806\u306b\u8868\u793a\nage_band.value_counts()","c20e51dc":"# \u5e74\u4ee3\u3092\u82e5\u3044\u9806\u306b0,1,2,...,9\u3068\u8a2d\u5b9a\nfor df in [X, X_test]:\n    df.loc[df['AgeFill'] <= 8.378, 'AgeFill'] = 0\n    df.loc[(df['AgeFill'] > 8.378) & (df['AgeFill'] <= 16.336), 'AgeFill'] = 1\n    df.loc[(df['AgeFill'] > 16.336) & (df['AgeFill'] <= 24.294), 'AgeFill'] = 2\n    df.loc[(df['AgeFill'] > 24.294) & (df['AgeFill'] <= 32.252), 'AgeFill'] = 3\n    df.loc[(df['AgeFill'] > 32.252) & (df['AgeFill'] <= 40.21), 'AgeFill'] = 4\n    df.loc[(df['AgeFill'] > 40.21) & (df['AgeFill'] <= 48.168), 'AgeFill'] = 5\n    df.loc[(df['AgeFill'] > 48.168) & (df['AgeFill'] <= 56.126), 'AgeFill'] = 6\n    df.loc[(df['AgeFill'] > 56.126) & (df['AgeFill'] <= 64.084), 'AgeFill'] = 7\n    df.loc[(df['AgeFill'] > 64.084) & (df['AgeFill'] <= 72.042), 'AgeFill'] = 8\n    df.loc[df['AgeFill'] > 72.042, 'AgeFill'] = 9\n    df['AgeFill'] = df['AgeFill'].astype(int) # float\u304b\u3089int\u306b\u5909\u66f4","17dc8528":"# \u6027\u5225\uff08female\/male\uff09\u30920\/1\u306b\u5909\u63db\u3059\u308b\uff08\u300c2.\u30e2\u30c7\u30eb\u4f5c\u6210\u3092\u4e00\u7dd2\u306b\u4f53\u9a13\u300d\u3068\u540c\u69d8\uff09\ngender_map = {'female': 0, 'male': 1}\nX['Gender'] = X['Sex'].map(gender_map).astype(int)\nX_test['Gender'] = X_test['Sex'].map(gender_map).astype(int)","1edcd484":"# Sex\u306b\u4ee3\u3048\u3066Gender\u3092\u4f7f\u3046\u305f\u3081\u3001Sex\u5217\u3092\u524a\u9664\u3059\u308b\nX = X.drop(['Sex'], axis=1)\nX_test = X_test.drop(['Sex'], axis=1)","95b1ced7":"# \u30e2\u30c7\u30eb\u4f5c\u6210\u306b\u4f7f\u3046\u30c7\u30fc\u30bf\u306b\u3064\u3044\u3066\u3001\u524d\u51e6\u7406\u3057\u305f\u5f8c\u306e\u72b6\u614b\u3092\u78ba\u8a8d\nX.head()","7192ec7f":"# \u4eca\u56de\u306e\u30cf\u30f3\u30ba\u30aa\u30f3\u3067\u306f\u30e2\u30c7\u30eb\u4f5c\u6210\u7528\u30c7\u30fc\u30bf\u30927:3\u306b\u5206\u3051\u3066\u9032\u3081\u308b\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.3, random_state=1)","629ff42f":"# \u5b66\u7fd2\u7528\u30c7\u30fc\u30bf\u306e\u6570\u306e\u78ba\u8a8d\nlen(y_train)","8696f9e8":"# \u6027\u80fd\u8a55\u4fa1\u7528\u306e\u30c7\u30fc\u30bf\u306e\u6570\u306e\u78ba\u8a8d\nlen(y_val)","ac9ea869":"# \u6c7a\u5b9a\u6728\u3068\u3044\u3046\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u4f7f\u3063\u305f\u30e2\u30c7\u30eb\u3092\u7528\u610f\nmodel = DecisionTreeClassifier(random_state=1, criterion='entropy', max_depth=3, min_samples_leaf=2)\n# \u30e2\u30c7\u30eb\u4f5c\u6210\u306f\u4ee5\u4e0b\u306e1\u884c\uff08\u3053\u3053\u307e\u3067\u306e\u524d\u51e6\u7406\u306b\u5bfe\u3057\u3066\u305f\u3063\u305f1\u884c\uff01\uff09\u3067\u5b8c\u4e86\u3059\u308b\nmodel.fit(X_train, y_train)","b90af809":"# \u6027\u80fd\u8a55\u4fa1\u7528\u30c7\u30fc\u30bf\u306b\u3064\u3044\u3066\u751f\u6b7b\u3092\u4e88\u6e2c\npred = model.predict(X_val)\n# \u6027\u80fd\u78ba\u8a8d\uff1aaccuracy\u3092\u7b97\u51fa\u3057\u3066\u8868\u793a\naccuracy_score(y_val, pred)","ee14c74c":"# \u4e88\u6e2c\u5bfe\u8c61\u30c7\u30fc\u30bf\u306b\u3064\u3044\u3066\u751f\u6b7b\u3092\u4e88\u6e2c\npred = model.predict(X_test)","fa28d8a1":"# \u3053\u306e\u30bb\u30eb\u3092\u5b9f\u884c\u3059\u308b\u969b\u306b\u3001#submission.to_csv(...)\u306e\u5148\u982d\u306e#\u3092\u6d88\u3057\u3066\u304f\u3060\u3055\u3044\n# \u63d0\u51fa\u7528\u30c7\u30fc\u30bf\u306e\u5f62\u5f0f\u306b\u5909\u63db\nsubmission = pd.DataFrame({\n    'PassengerId': test_df['PassengerId'],\n    'Survived': pred\n})\n# \u63d0\u51fa\u7528\u30c7\u30fc\u30bf\u4f5c\u6210\n#submission.to_csv('submission.csv', index=False) # \u5148\u982d\u306e#\u3092\u6d88\u3057\u3066\u304f\u3060\u3055\u3044","4821a9a2":"\u6e2f\u306b\u3088\u3063\u3066\u751f\u5b58\u7387\u304c\u7570\u306a\u308b\u305f\u3081\u3001Embarked\u3092\u751f\u6b7b\u306e\u4e88\u6e2c\u306b\u52a0\u3048\u3066\u307f\u307e\u3059\n\n- \u6e2fC\u306f\u751f\u5b58\u8005\u304c\u534a\u5206\u7a0b\u5ea6\n- \u6e2fS, Q\u306f\u751f\u5b58\u8005\u304c3\u5206\u306e1\u7a0b\u5ea6","47fe7031":"Embarked\u306e\u6b20\u640d\u3092\u57cb\u3081\u305f\u3042\u3068\u306eX\uff08\u30a4\u30e1\u30fc\u30b8\uff09  \n**EmbarkedFill\u3068\u3044\u3046\u5217\u304c\u8ffd\u52a0\u3055\u308c\u308b**\n\n| Pclass | Sex | Embarked | EmbarkedFill |\n| ---- | ---- | ---- | ---- |\n| 2 | male | NaN | S |\n| 3 | female | C | C |\n| 1 | female | Q | Q |\n| : | : | : | : |","2a1907aa":"## 2. \u30e2\u30c7\u30eb\u4f5c\u6210\u3092\u4e00\u7dd2\u306b\u4f53\u9a13\n\n\u5358\u7d14\u306a\u30e2\u30c7\u30eb\u3088\u308a\u3082\u6027\u80fd\u306e\u3044\u3044\u30e2\u30c7\u30eb\u4f5c\u308a\u306b\u6311\u6226\n\n### Sex\u3068Pclass\u304b\u3089\u30e2\u30c7\u30eb\u4f5c\u6210","f06a756e":"`fillna`  \n\u53c2\u8003: https:\/\/note.nkmk.me\/python-pandas-nan-dropna-fillna\/  \n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8: https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.fillna.html","afd92843":"\u6027\u5225\uff08Sex\uff09\u3092\u5143\u306b\u751f\u6b7b\u3092\u4e88\u6e2c\u3059\u308b\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002  \n\u4ee5\u4e0b\u306e\u30eb\u30fc\u30eb\u3067\u751f\u6b7b\u3092\u4e88\u6e2c\u3059\u308b\u3053\u3068\u306b\u3057\u307e\u3059\u3002\n\n- \u7537\u6027\u3067\u3042\u308c\u3070\u3001\u6b7b\u4ea1\n- \u5973\u6027\u3067\u3042\u308c\u3070\u3001\u751f\u5b58\n\n\u6ce8\uff1a\u3053\u306e\u5358\u7d14\u306a\u30e2\u30c7\u30eb\u306f\u6a5f\u68b0\u5b66\u7fd2\u3067\u4f5c\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u4eba\u304c\u6c7a\u3081\u305f\u30eb\u30fc\u30eb\u3092\u5b9f\u88c5\u3057\u3066\u5b9f\u73fe\u3057\u307e\u3059","dbf26ac3":"`get_dummies`  \n\u53c2\u8003: https:\/\/note.nkmk.me\/python-pandas-get-dummies\/  \n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8: https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.get_dummies.html","db90902e":"Embarked\u304c\u30e2\u30c7\u30eb\u4f5c\u6210\u7528\u3067\u6570\u4ef6\u6b20\u3051\u3066\u3044\u308b\n\n*\u203b\u6b20\u640d\u5024\u306e\u5bfe\u5fdc\u306e\u8a73\u7d30\u306f\u9078\u629e\u80a21\u3092\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044*\n\n\u30e2\u30c7\u30eb\u4f5c\u6210\u7528\u30c7\u30fc\u30bf\u3067\u4e00\u756a\u591a\u304f\u767b\u5834\u3059\u308b\u5024\uff08\u4e00\u756a\u591a\u304f\u306e\u4eba\u304c\u4e57\u3063\u3066\u3044\u308b\u6e2f\uff09\u3067\u57cb\u3081\u308b","6a9f2f5a":"`read_csv`  \n\u89e3\u8aac: https:\/\/note.nkmk.me\/python-pandas-read-csv-tsv\/  \n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8: https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.read_csv.html","d60c80e9":"Age\u306e\u5c64\u306b\u3088\u3063\u3066\u751f\u5b58\u7387\u304c\u7570\u306a\u308b\u305f\u3081\u3001Age\u306f\u751f\u6b7b\u306e\u4e88\u6e2c\u306b\u4f7f\u3048\u308b\u3068\u8003\u3048\u3089\u308c\u307e\u3059\u3002\n\n\u52a9\u304b\u3063\u3066\u3044\u308b\u5272\u5408\u304c\u9ad8\u3044\u5e74\u9f62\u5c64\n- 0\u6b73\u301c8\u6b73\uff08\u534a\u6570\u4ee5\u4e0a\uff09\n- 10\u4ee3\u524d\u534a\u300130\u4ee3\u5f8c\u534a\u300150\u301c60\u6b73\uff08\u534a\u6570\u7a0b\u5ea6\uff09","bd8d5fe1":"### \uff08\u9078\u629e\u80a22\uff09Embarked\u3092\u8ffd\u52a0","3f50ec4d":"`loc`  \n\u4f8b: `df.loc[(df['AgeFill'] > 8.378) & (df['AgeFill'] <= 16.336), 'AgeFill']`  \n\u2192AgeFill\u304c8.378\u4ee5\u4e0a\u3001\u304b\u3064\u300116.336\u672a\u6e80\u306e\u3059\u3079\u3066\u306e\u884c\u306eAgeFill\u306e\u5024\uff08\u30b3\u30fc\u30c9\u3067\u306f\u3001\u53f3\u8fba\u306e\u50241\u306b\u5909\u66f4\u3057\u3066\u3044\u308b\uff09  \n\u53c2\u8003: https:\/\/note.nkmk.me\/python-pandas-at-iat-loc-iloc\/","3ac917b9":"- Age\u304c\u30e2\u30c7\u30eb\u4f5c\u6210\u7528\u30fb\u6027\u80fd\u8a55\u4fa1\u7528\u3068\u306720%\u7a0b\u5ea6\u6b20\u3051\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u3063\u305f\n- \u524a\u9664\u3059\u308b\u3068\u8cb4\u91cd\u306a\u30c7\u30fc\u30bf\u304c\u6e1b\u308b\u306e\u3067\u3001**\u57cb\u3081\u308b**\n- \u30e2\u30c7\u30eb\u4f5c\u6210\u7528\u30c7\u30fc\u30bf\u306e\u5e73\u5747\u5024\uff08=\u5e74\u9f62\u306e\u7dcf\u548c\/\u500b\u6570\uff09\u3067\u57cb\u3081\u308b","bb832b18":"| info\u306b\u3088\u308b\u60c5\u5831 | \u610f\u5473 |\n| ---- | ---- | \n| int | \u6574\u6570 |\n| float | \u6d6e\u52d5\u5c0f\u6570\u70b9\u6570 |\n| object | \u6587\u5b57\u5217 |","10c2d30d":"Sex\u30920\/1\u306b\u5909\u63db\u3057\u305f\u3042\u3068\u306eX\uff08\u30a4\u30e1\u30fc\u30b8\uff09  \n**Gender\u3068\u3044\u3046\u5217\u304c\u8ffd\u52a0\u3055\u308c\u308b**\n\n| Pclass | Sex | Gender |\n| ---- | ---- | ---- |\n| 2 | male | 1 |\n| 3 | female | 0 |\n| : | : | : |","de20ffc3":"\u30e2\u30c7\u30eb\u4f5c\u6210\u7528\u30c7\u30fc\u30bf\u306b\u3064\u3044\u3066\u3001\u6027\u5225\u3068\u751f\u6b7b\u3092\u53ef\u8996\u5316\u3059\u308b\u3068\u3001**\u7537\u6027\u306e\u751f\u5b58\u7387\u306f\u4f4e\u304f\u3001\u5973\u6027\u306e\u751f\u5b58\u7387\u306f\u9ad8\u3044**\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3059\u3002  \n\uff08\u3053\u3053\u3067\u63a1\u7528\u3059\u308b\u4e88\u6e2c\u30eb\u30fc\u30eb\u306f\u5168\u304f\u306e\u898b\u5f53\u9055\u3044\u3068\u3044\u3046\u308f\u3051\u3067\u306f\u306a\u3044\u3068\u3044\u3046\u3053\u3068\u3067\u3059\uff09\n\n![](https:\/\/raw.githubusercontent.com\/ftnext\/2019_slides\/master\/spz_online_titanic_handson\/assets\/survived_per_sex.png)","7bc7b1c2":"`info`  \n\u89e3\u8aac: https:\/\/note.nkmk.me\/python-pandas-len-shape-size\/  \n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8: https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.info.html","750a7abd":"\u3053\u3053\u3067\u7528\u3044\u305f\u53ef\u8996\u5316\u624b\u6cd5\u306f**\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0**\u3068\u547c\u3070\u308c\u307e\u3059\u3002  \n\u7537\u6027\u3001\u5973\u6027\u305d\u308c\u305e\u308c\u306b\u3064\u3044\u3066\u3001Survived\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u63cf\u753b\u3057\u307e\u3057\u305f\u3002  \n\n\u6a2a\u8ef80\u301c1\u306e\u9593\u306b2\u672c\u306e\u67f1\u304c\u3042\u308a\u307e\u3059\u3002  \n\u5de6\u5074\u306e\u67f1\u306fSurvived\u306e\u5024\u304c0\u301c0.5\u306e\u30c7\u30fc\u30bf\u306e\u500b\u6570\u3092\u8868\u3057\u3001\u53f3\u5074\u306e\u67f1\u306fSurvived\u306e\u5024\u304c0.5\u301c1\u306e\u30c7\u30fc\u30bf\u306e\u500b\u6570\u3092\u8868\u3057\u307e\u3059\u3002  \nSurvived\u306e\u53d6\u308a\u3046\u308b\u5024\u306f0\u304b1\u306a\u306e\u3067\u3001**\u5de6\u5074\u306e\u67f1\u306f\u6b7b\u4ea1\u8005\u306e\u4eba\u6570\u3001\u53f3\u5074\u306e\u67f1\u306f\u751f\u5b58\u8005\u306e\u4eba\u6570**\u3092\u8868\u3057\u307e\u3059\u3002\n\n- \u7537\u6027(male)\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3067\u306f\u3001\u6b7b\u4ea1\u8005 \u7d04450\u540d\u3001\u751f\u5b58\u8005 \u7d04100\u540d\u3068\u3001**\u7537\u6027\u306e\u751f\u5b58\u7387\u306f\u4f4e\u3044**\u3067\u3059\n- \u5973\u6027(female)\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3067\u306f\u3001\u6b7b\u4ea1\u8005 \u7d0480\u540d\u3001\u751f\u5b58\u8005 \u7d04230\u540d\u3068\u3001**\u5973\u6027\u306e\u751f\u5b58\u7387\u306f\u9ad8\u3044**\u3067\u3059\n\n\u306a\u304a\u3001\u53ef\u8996\u5316\u306e\u30b3\u30fc\u30c9\u306f\u3053\u3061\u3089\u306e\u30ab\u30fc\u30cd\u30eb\u306b\u3042\u308a\u307e\u3059\uff1ahttps:\/\/www.kaggle.com\/ftnext\/kaggle-spzcolab-201903","80506d2c":"`drop`  \n\u53c2\u8003: https:\/\/note.nkmk.me\/python-pandas-drop\/  \n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8: https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.drop.html","93b504c3":"\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u306e\u3088\u3046\u306bAge\u3092\u304a\u3088\u305d8\u6b73\u523b\u307f\u306e\u5e74\u4ee3\u306b\u5206\u3051\u308b\u30a2\u30d7\u30ed\u30fc\u30c1\u3092\u7d39\u4ecb\u3002  \n\u5e74\u9f62\u304c\u5897\u3048\u308b\u307b\u3069\u50be\u5411\u304c\u5909\u308f\u308b\uff08\u4f8b\uff1a29\u6b73\u3088\u308a28\u6b73\u304c\u52a9\u304b\u308a\u3084\u3059\u304f\u300128\u6b73\u3088\u308a\u308227\u6b73\u304c\u52a9\u304b\u308a\u3084\u3059\u3044\uff09\u3068\u306f\u8003\u3048\u306b\u304f\u3044\u3002  \n\u3057\u304b\u3057\u3001\u5e74\u4ee3\u306b\u3088\u3063\u3066\u50be\u5411\u304c\u5909\u308f\u308b\u3053\u3068\u306f\u5341\u5206\u8003\u3048\u3089\u308c\u308b\u3002\uff08\u4f8b\uff1a20\u4ee3\u3088\u308a\u308210\u4ee3\u306e\u307b\u3046\u304c\u52a9\u304b\u308a\u3084\u3059\u3044\uff09\n\n![](https:\/\/raw.githubusercontent.com\/ftnext\/2019_slides\/master\/spz_online_titanic_handson\/assets\/age_hist_stacked_survived.png)","ab0c27c2":"| \u30c7\u30fc\u30bf\u306e\u60c5\u5831 | \u5217\u540d |\u3000\u610f\u5473 |\n| ----- | ----- | ----- |\n| int | PassengerId | \u4e57\u5ba2ID |\n| int | **Pclass** | \u30c1\u30b1\u30c3\u30c8\u306e\u7b49\u7d1a (1, 2, 3) |\n| int | SibSp | \u540c\u4e57\u3057\u305f\u5144\u5f1f\u59c9\u59b9\/\u914d\u5076\u8005\u306e\u4eba\u6570 |\n| int | Parch | \u540c\u4e57\u3057\u305f\u4e21\u89aa\/\u5b50\u4f9b\u306e\u4eba\u6570 |\n| int | *Survived* | 0\uff1a\u6b7b\u4ea1\u30011\uff1a\u751f\u5b58 |\n| float | **Age** | \u5e74\u9f62\uff08\u63a8\u6e2c\u304c\u3042\u308b\u305f\u3081\u3001\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\uff09 |\n| float | Fare | \u904b\u8cc3 |\n| object | Name | \u6c0f\u540d |\n| object | **Sex** | \u6027\u5225 |\n| object | Ticket | \u30c1\u30b1\u30c3\u30c8\u756a\u53f7 |\n| object | Cabin | \u8239\u5ba4\u756a\u53f7 |\n| object | **Embarked** | \u4e57\u8239\u3057\u305f\u6e2f\u306e\u982d\u6587\u5b57(S, Q, C) |\n\nref: https:\/\/www.kaggle.com\/c\/titanic\/data","2680ee33":"\u4e0a\u306e\u8868\u3067\u592a\u5b57\u3067\u793a\u3057\u305f\u5217\u3092\u4f7f\u3063\u3066\u3001\u30e2\u30c7\u30eb\u4f5c\u6210\u3092\u9032\u3081\u3066\u3044\u304d\u307e\u3059\u3002\n\n- Pclass\n- Age\n- Sex\n- Embarked\n\n\u30e2\u30c7\u30eb\u4f5c\u6210\u306b\u4f7f\u3046\u5217\u3092\u5f90\u3005\u306b\u5897\u3084\u3059\u3068\u3044\u3046\u30a2\u30d7\u30ed\u30fc\u30c1\u3092\u53d6\u308a\u307e\u3059\u3002","8fe975ec":"**\u6b20\u640d\u5024**\u306b\u3064\u3044\u3066\n\n- \u6b20\u3051\u305f\u30c7\u30fc\u30bf\u306e\u3053\u3068\uff08missing value\u3001\u6b20\u6e2c\u5024\u3068\u3082\u547c\u3070\u308c\u308b\uff09\n    - pandas\u3067\u6271\u3046\u969b\u306f\u3001NaN\u3068\u8868\u793a\u3055\u308c\u308b\uff08`train_df.head()`\u306eCabin\u5217\uff09\n    - `train_df.info()`\u306e\u7d50\u679c\u306b714\u3084204\u306a\u3069\u3001891\u3088\u308a\u3082\u5c0f\u3055\u3044\u5024\u304c\u3042\u3063\u305f\n- \u6b20\u640d\u306e\u8981\u56e0\uff1a\u30c7\u30fc\u30bf\u306e\u53ce\u96c6\u904e\u7a0b\u3067\u629c\u3051\u3066\u3057\u307e\u3063\u305f\u306a\u3069\n- \u6a5f\u68b0\u5b66\u7fd2\u306e\u30c4\u30fc\u30eb\u306f **\u4e00\u822c\u306b\u6b20\u640d\u5024\u306b\u5bfe\u51e6\u3067\u304d\u306a\u3044**\uff08\u305d\u306e\u305f\u3081\u30c7\u30fc\u30bf\u3092\u524d\u51e6\u7406\u3059\u308b\uff09","8ed40835":"`map`  \n\u53c2\u8003: https:\/\/note.nkmk.me\/python-pandas-map-replace\/  \n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8: https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.Series.map.html","acf2bb3e":"\u3053\u306e\u3042\u3068\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002  \n\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3057\u305f\u3089\u3059\u3050\u306b\u4e88\u6e2c\u5bfe\u8c61\u30c7\u30fc\u30bf\u306b\u3064\u3044\u3066\u4e88\u6e2c\u3059\u308b\u306e\u3067\u306f\u306a\u304f\u3001**\u3069\u306e\u7a0b\u5ea6\u306e\u6027\u80fd\u306e\u30e2\u30c7\u30eb\u306a\u306e\u304b**\u78ba\u8a8d\u3057\u307e\u3059\u3002  \n\u30e2\u30c7\u30eb\u306e\u6027\u80fd\u78ba\u8a8d\u306e\u305f\u3081\u306b\u3001\u30e2\u30c7\u30eb\u4f5c\u6210\u306b\u4f7f\u3046\u30c7\u30fc\u30bf\u3092\u30e9\u30f3\u30c0\u30e0\u306b2\u3064\u306b\u5206\u3051\u307e\u3059\uff08`train_test_split`\u3092\u4f7f\u3044\u307e\u3059\uff09\n\n- \u30e2\u30c7\u30eb\u4f5c\u6210\u306b\u4f7f\u3046\u30c7\u30fc\u30bf\u306e\u3046\u3061\u3001\u4f8b\u3048\u30707\u5272\u3067\u30e2\u30c7\u30eb\u3092\u4f5c\u308b\n- \u6b8b\u308a\u306e3\u5272\u3067\u30e2\u30c7\u30eb\u306e\u6027\u80fd\u3092\u8a55\u4fa1\u3059\u308b\n    - \u30e2\u30c7\u30eb\u306e\u6027\u80fd\u304c\u554f\u984c\u306a\u3051\u308c\u3070\u3001\u4e88\u6e2c\u5bfe\u8c61\u30c7\u30fc\u30bf\u3092\u4e88\u6e2c\u3059\u308b\n\n![](https:\/\/raw.githubusercontent.com\/ftnext\/2019_slides\/master\/spz_Jan_titanic_handson\/assets\/201901kaggel_talk.010.png)\n\n\u6c17\u306b\u306a\u308b\u65b9\u3078\uff1a  \n\u30e9\u30f3\u30c0\u30e0\u306b\u5206\u3051\u3066\u3044\u307e\u3059\u304c\u3001`random_state`\u5f15\u6570\u306e\u5024\u304c\u540c\u3058\u306a\u3089\u3001**\u4f55\u56de\u5b9f\u884c\u3057\u3066\u3082\u540c\u3058**\u3088\u3046\u306b\u30e9\u30f3\u30c0\u30e0\u306b\u5206\u304b\u308c\u307e\u3059","9fe08d78":"- \u3044\u304f\u3064\u304b\u306e\u6587\u5b57\u5217\u306e\u5024\u3092\u53d6\u308b\u5909\u6570\uff1a\u30ab\u30c6\u30b4\u30ea\u5909\u6570\n    - Sex: male, female\n- \u6587\u5b57\u5217\u3092\u6574\u6570\u306b\u5909\u63db\u3059\u308b\n    - Sex: male=1, female=0\u3068\u3057\u3066\u7f6e\u304d\u63db\u3048\n    \n\u30e2\u30c7\u30eb\u4f5c\u6210\u306b\u4f7f\u3046\u30c7\u30fc\u30bf`X`\u306b\u3064\u3044\u3066\u5909\u63db\u3059\u308b\u969b\u306f\u3001\u30e2\u30c7\u30eb\u304c\u4e88\u6e2c\u3059\u308b\u30c7\u30fc\u30bf`X_test`\u306b\u3064\u3044\u3066\u3082**\u540c\u69d8\u306e\u5909\u63db\u3092\u3059\u308b**\u3053\u3068\u304c\u30dd\u30a4\u30f3\u30c8\u3068\u306a\u308a\u307e\u3059\u3002","c6b0afc1":"\u63d0\u51fa\u306f\u4e00\u7dd2\u306b\u9032\u3081\u307e\u3059  \n\uff08\u5f8c\u8ffd\u3044\u8996\u8074\u306e\u65b9\u5411\u3051\u306b\u624b\u9806\u3092\u30b9\u30e9\u30a4\u30c9\u306b\u3082\u8a18\u8f09\u3057\u307e\u3059\uff09\n\n\u6ce8\uff1a\u63d0\u51fa\u306f\u30d6\u30e9\u30a6\u30b6\u306e\u5225\u306e\u30bf\u30d6\u3067\u884c\u308f\u308c\u307e\u3059\u304c\u3001**\u3053\u306eKernel\u306e\u30bf\u30d6\u306f\u9589\u3058\u306a\u3044\u3067\u304f\u3060\u3055\u3044**\u3002  \n\uff08\u63d0\u51fa\u5f8c\u3001\u3053\u306e\u30bf\u30d6\u306b\u623b\u3063\u3066\u3001\u7d9a\u304d\u3092\u9032\u3081\u307e\u3059\uff09","14367611":"### \uff08\u9078\u629e\u80a21\uff09Age\u3092\u8ffd\u52a0","e1062a96":"Embarked=S,Q,C\u305d\u308c\u305e\u308c\u306b\u3064\u3044\u3066\u3001Survived\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u63cf\u753b\n\n![](https:\/\/raw.githubusercontent.com\/ftnext\/2019_slides\/master\/spz_online_titanic_handson\/assets\/survived_per_embarked.png)","22df0f9a":"`mean`  \n\u53c2\u8003: https:\/\/deepage.net\/features\/pandas-mean.html  \n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8: https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.Series.mean.html","1b1d1c3f":"## \u57fa\u672c\u64cd\u4f5c\n\n\u30b3\u30fc\u30c9\u304c\u66f8\u304b\u308c\u3066\u3044\u308b\u30d6\u30ed\u30c3\u30af\u3092 **\u30bb\u30eb** \u3068\u547c\u3073\u307e\u3059\u3002  \n\n1. \u30bb\u30eb\u3092\u30af\u30ea\u30c3\u30af\u3057\u3066\u9078\u629e\u3059\u308b\uff08\u5165\u529b\u3067\u304d\u308b\u72b6\u614b\u306b\u306a\u308b\uff09\n2. \u9078\u629e\u3057\u305f\u30bb\u30eb\u3092\u5b9f\u884c\u3059\u308b\n    - \u5165\u529b\u3067\u304d\u308b\u72b6\u614b\u3067Shift+Enter\u30ad\u30fc\u3092\u62bc\u3059\uff08\u3053\u3061\u3089\u306b\u6163\u308c\u308b\u3068\u7c21\u5358\u3067\u3059\uff09\n    - \u5de6\u5074\u306b\u8868\u793a\u3055\u308c\u308b\u518d\u751f\u30dc\u30bf\u30f3\u25b6\u3092\u30af\u30ea\u30c3\u30af","06ffbe2c":"## 1. \u5358\u7d14\u306a\u30e2\u30c7\u30eb","2ac308fd":"### \u5909\u66f4\u5c65\u6b74\nhttps:\/\/www.kaggle.com\/ftnext\/kaggle-spzcolab-201901 \u3092\u30d9\u30fc\u30b9\u306b\u3084\u308b\u3053\u3068\u3092\u7d5e\u3063\u3066\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u3057\u305f  \nref: https:\/\/github.com\/PyDataTokyo\/pydata-tokyo-tutorial-1\n\nV3\u306b\u3066\u8a66\u3057\u305f\u3044\u30b3\u30fc\u30c9\u4ee5\u5916\u3067submission.csv\u304c\u4f5c\u3089\u308c\u306a\u3044\u3088\u3046\u306b\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u3057\u305f\u3002\n\uff08V2\u307e\u3067\u306f\u5358\u7d14\u306a\u30e2\u30c7\u30eb\u3067\u30b3\u30df\u30c3\u30c8\u3057\u3066\u3082\u3001\u5168\u3066\u306e\u30b3\u30fc\u30c9\u304c\u5b9f\u884c\u3055\u308c\u308b\u305f\u3081\u306b\u30013\uff08\u9078\u629e\u80a22\uff09\u306e\u30e2\u30c7\u30eb\u306e\u4e88\u6e2c\u7d50\u679c\u304c\u4f5c\u6210\u3055\u308c\u308b\u3068\u3044\u3046\u4e0d\u5177\u5408\u304c\u3042\u3063\u305f\uff09","b432b2b3":"\u53c2\u8003: https:\/\/scikit-learn.org\/stable\/modules\/tree.html#classification  \n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8: https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.tree.DecisionTreeClassifier.html","d77a2f53":"- \u4e88\u6e2c\u3057\u305f\u7d50\u679c\u304b\u3089\u63d0\u51fa\u7528\u30c7\u30fc\u30bf\u3092\u4f5c\u308b\n- \u63d0\u51fa\u7528\u30c7\u30fc\u30bf\u306f\u4ee5\u4e0b\u306e\u5f62\u5f0f\u306eCSV\u3068\u3059\u308b\u3088\u3046\u306b\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b\uff081\u304c\u751f\u5b58\u30010\u304c\u6b7b\u4ea1\uff09\n\nPassengerId | Survived\n----- | -----\n892 | 0\n: | :\n1309|1\n\n- ref: https:\/\/www.kaggle.com\/c\/titanic#evaluation","7cc62fa2":"`isnull().sum()`  \n\u53c2\u8003: https:\/\/note.nkmk.me\/python-pandas-nan-judge-count\/","9d63d379":"\u5b9f\u884c\u3057\u305f\u30b3\u30fc\u30c9\u306e\u30a4\u30e1\u30fc\u30b8  \n\n| `x` | `y_pred` |\n| ---- | ---- |\n| male | 0 |\n| female | 1 |\n|  :  | : |\n| female | 1 |\n\n`x`\u3068\u5bfe\u5fdc\u3059\u308b\u3088\u3046\u306b`y_pred`\u3092\u4f5c\u6210","75604535":"\u30ab\u30c6\u30b4\u30ea\u5909\u6570EmbarkedFill\u306f\u30c0\u30df\u30fc\u5909\u6570\u5316\u3059\u308b\n\n- S=1, Q=2, C=3\u3068\u6574\u6570\u306b\u7f6e\u304d\u63db\u3048\u308b\n    - **\u672c\u6765\u306a\u304b\u3063\u305f\u5927\u5c0f\u95a2\u4fc2\u304c\u60f3\u5b9a\u3055\u308c\u3066\u3057\u307e\u3046**\n- (S, Q, C)\u3068\u3044\u3046\u5f62\u5f0f\u3067\u6574\u6570\u306b\u7f6e\u304d\u63db\u3048\u308b\n\n| EmbarkedFill\u306e\u5024 | \u7f6e\u304d\u63db\u3048\u305f\u3042\u3068 |\n| ----- | ----- |\n| S | (1, 0, 0) |\n| Q | (0, 1, 0) |\n| C | (0, 0, 1) |","68cb0841":"`cut`\u304a\u3088\u3073`value_counts`  \n\u53c2\u8003: https:\/\/note.nkmk.me\/python-pandas-cut-qcut-binning\/","83f60527":"\u30bf\u30a4\u30bf\u30cb\u30c3\u30af\u306e\u5834\u5408\u3001\u30e2\u30c7\u30eb\u306e\u6027\u80fd\u306faccuracy\u3068\u3044\u3046\u30b9\u30b3\u30a2\u3067\u8a55\u4fa1\u3055\u308c\u308b  \n\uff08**\u6ce8**\uff1a\u6027\u80fd\u3092\u8868\u3059\u30b9\u30b3\u30a2\u306f\u4ed6\u306b\u3082\u3042\u308b\uff09\n\n- \u4e88\u6e2c\u5bfe\u8c61\u30c7\u30fc\u30bf418\u540d\u306e\u3046\u3061\u751f\u6b7b\u3092\u6b63\u3057\u304f\u4e88\u60f3\u3067\u304d\u305f\u3082\u306e\u306e\u5272\u5408\n- 1\u306b\u8fd1\u3044\u307b\u3069\u6027\u80fd\u304c\u3088\u3044\n\n| \u30b1\u30fc\u30b9 | \u6b63\u89e3\uff0f\u8aa4\u308a |\n| ----- | ----- |\n| \u751f\u5b58\u3057\u305f\u4e57\u5ba2\u3092\u751f\u5b58\u3068\u4e88\u6e2c | \u6b63\u89e3 |\n| \u751f\u5b58\u3057\u305f\u4e57\u5ba2\u3092\u6b7b\u4ea1\u3068\u4e88\u6e2c | \u8aa4\u308a |\n| \u6b7b\u4ea1\u3057\u305f\u4e57\u5ba2\u3092\u751f\u5b58\u3068\u4e88\u6e2c | \u8aa4\u308a |\n| \u6b7b\u4ea1\u3057\u305f\u4e57\u5ba2\u3092\u6b7b\u4ea1\u3068\u4e88\u6e2c | \u6b63\u89e3 |\n\naccuracy = (\u6b63\u89e3\u306e\u7dcf\u6570) \/ (\u6b63\u89e3\u306e\u7dcf\u6570 + \u8aa4\u308a\u306e\u7dcf\u6570)\n\n>Your score is the percentage of passengers you correctly predict. This is known simply as \"accuracy\u201d.\n\nref: https:\/\/www.kaggle.com\/c\/titanic#evaluation","bee8f0f1":"### \u7df4\u7fd2\u554f\u984c: Age\u3068Embarked\u306e\u4e21\u65b9\u3092\u8ffd\u52a0","60d811cb":"\u53c2\u8003\u60c5\u5831  \n\u5225\u306e\u30e2\u30c7\u30eb\u3092\u4f5c\u3063\u305f\u3068\u304d\u306b\u3001\u4ee5\u524d\u306b\u4f5c\u3063\u305f\u30e2\u30c7\u30eb\u3088\u308a\u30b9\u30b3\u30a2\u304c\u4f4e\u3051\u308c\u3070\u3001\u63d0\u51fa\u3057\u306a\u3044\u3068\u3044\u3046\u5224\u65ad\u304c\u3067\u304d\u307e\u3059  \n\uff08Kaggle\u306b\u63d0\u51fa\u3057\u306a\u304f\u3066\u3082\u8a66\u884c\u932f\u8aa4\u304c\u9032\u3081\u3089\u308c\u308b\u3002\u63d0\u51fa\u56de\u6570\u306b\u306f\u65e5\u6b21\u306e\u4e0a\u9650\u304c\u3042\u308b\uff09","f2f4d258":"Age\u306b\u3064\u3044\u3066\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u4f5c\u6210\uff088\u6b73\u3067\u4e00\u3064\u306e\u67f1\u3068\u3057\u3066\u3044\u308b\uff09  \n1\u3064\u306e\u67f1\u306e\u3046\u3061\u3001\u751f\u5b58\u8005\u3068\u6b7b\u4ea1\u8005\u3092\u8272\u5206\u3051\u3057\u3066\u8868\u793a\u3057\u3066\u3044\u308b  \n\n![](https:\/\/raw.githubusercontent.com\/ftnext\/2019_slides\/master\/spz_online_titanic_handson\/assets\/age_hist_stacked_survived.png)","3f0fa7e7":"Age\u306e\u6b20\u640d\u3092\u57cb\u3081\u305f\u3042\u3068\u306eX\uff08\u30a4\u30e1\u30fc\u30b8\uff09  \n**AgeFill\u3068\u3044\u3046\u5217\u304c\u8ffd\u52a0\u3055\u308c\u308b**\n\n| Pclass | Sex | Age | AgeFill |\n| ---- | ---- | ---- | ---- |\n| 2 | male | NaN | 29.7 |\n| 3 | female | 31 | 31 |\n| : | : | : | : |","aef4f356":"`head`  \n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8: https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.head.html","5005a970":"`train_test_split`  \n\u53c2\u8003: https:\/\/docs.pyq.jp\/python\/machine_learning\/tips\/train_test_split.html  \n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8: https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.model_selection.train_test_split.html","c661b8dc":"## \u3053\u306e\u30ab\u30fc\u30cd\u30eb\u306b\u3064\u3044\u3066\n\n\u682a\u5f0f\u4f1a\u793e\u30b5\u30dd\u30fc\u30bf\u30fc\u30ba \u4e3b\u50ac**\u3010\u30aa\u30f3\u30e9\u30a4\u30f3\u52c9\u5f37\u4f1a\u3011Kaggle\u30bf\u30a4\u30bf\u30cb\u30c3\u30af\u30cf\u30f3\u30ba\u30aa\u30f3**\uff08\u5b66\u751f\u5411\u3051\uff09\u306eKernel\u3067\u3059\u3002  \n\u30cf\u30f3\u30ba\u30aa\u30f3\u30d1\u30fc\u30c8\u3067\u4f7f\u3044\u307e\u3059\u3002\n\n0. \u30e2\u30c7\u30eb\u4f5c\u6210\u306e\u6e96\u5099\n1. \u5358\u7d14\u306a\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3059\u308b\n2. \u30e2\u30c7\u30eb\u4f5c\u6210\u3092\u4e00\u7dd2\u306b\u4e00\u56de\u3084\u3063\u3066\u6d41\u308c\u3092\u3064\u304b\u3080\n3. \u6027\u80fd\u304c\u4e0a\u304c\u308b\u3068\u8003\u3048\u308b\u9078\u629e\u80a2\u3092\u8a66\u3059\uff08\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306e\u30d6\u30ed\u30c3\u30af\u3092\u5b9f\u884c\uff09\n\n\u203b\u52c9\u5f37\u4f1a\u81ea\u4f53\u306f\u52c9\u5f37\u4f1a\u30da\u30fc\u30b8\u304b\u3089\u7533\u3057\u8fbc\u3080\u3068\u5f8c\u8ffd\u3044\u8996\u8074\u3067\u304d\u307e\u3059\uff08\u305f\u3060\u3057**\u5b66\u751f\u9650\u5b9a**\u3067\u3059\uff09","de8ad0f5":"## 3. \u7528\u610f\u3057\u305f\u9078\u629e\u80a2\u3092\u8a66\u3059\n\n\u6b20\u640d\u5024\u306e\u5bfe\u5fdc\u3092\u65b0\u3057\u304f\u6271\u3046","a4c181fc":"## 0. \u30e2\u30c7\u30eb\u4f5c\u6210\u306e\u6e96\u5099","82f88648":"Pclass\u306e\u5024\u306b\u3088\u3063\u3066\u751f\u5b58\u7387\u304c\u7570\u306a\u308b\u305f\u3081\u3001Pclass\u306f\u751f\u6b7b\u306e\u4e88\u6e2c\u306b\u4f7f\u3048\u308b\u3068\u8003\u3048\u3089\u308c\u307e\u3059\n\n- Pclass=1\u306f\u751f\u5b58\u8005\u304c\u904e\u534a\u6570\u3092\u8d85\u3048\u3066\u3044\u308b\n- Pclass=2\u306f\u751f\u5b58\u8005\u304c\u534a\u5206\u7a0b\u5ea6\n- Pclass=3\u306f\u751f\u5b58\u8005\u304c\u5c11\u306a\u3044\uff084\u5206\u306e1\u7a0b\u5ea6\uff09","cf5e6ca0":"| \u5909\u6570\u540d | \u7528\u9014 |\n| ----- | ----- |\n| X_train | \u5b66\u7fd2\u7528\u30c7\u30fc\u30bf\uff08\u4e57\u5ba2\u306e\u5c5e\u6027\uff09 |\n| y_train | \u5b66\u7fd2\u7528\u30c7\u30fc\u30bf\uff08\u751f\u6b7b\uff09 |\n| X_val | \u6027\u80fd\u8a55\u4fa1\u7528\u30c7\u30fc\u30bf\uff08\u4e57\u5ba2\u306e\u5c5e\u6027\uff09 |\n| y_val | \u6027\u80fd\u8a55\u4fa1\u7528\u306e\u30c7\u30fc\u30bf\uff08\u751f\u6b7b\uff09 |\n\n\u203b\u5b66\u7fd2\u3068\u306f\u3001\u30c7\u30fc\u30bf\u3068\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u304b\u3089\u30e2\u30c7\u30eb\uff08\uff1d\u63a8\u8ad6\u306e\u30eb\u30fc\u30eb\uff09\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068","4bcf5abf":"\u53c2\u8003: \u5217\u306e\u53d6\u308a\u51fa\u3057 https:\/\/note.nkmk.me\/python-pandas-index-row-column\/  \n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8: 10 minutes pandas\u306e\u4e2d\u306eSelection https:\/\/pandas.pydata.org\/pandas-docs\/stable\/getting_started\/10min.html#selection","2a0327fc":"### \u5909\u66f4\u5c65\u6b74\n\n| \u958b\u50ac\u6642\u671f | Kernel\u306e\u30d0\u30fc\u30b8\u30e7\u30f3 |\n| ----|---- | \n| [2019\/03](https:\/\/talent.supporterz.jp\/events\/2992699f-53ed-417b-abf7-7d7bba931037\/) | [Version3](https:\/\/www.kaggle.com\/ftnext\/kaggle-spzcolab-online?scriptVersionId=11257494) |\n| [2019\/04](https:\/\/talent.supporterz.jp\/events\/d7384737-e2a6-4dc9-bc5e-f90e17e0924e\/) | \u6700\u65b0\u306eKernel |","f757eddf":"`accuracy_score`  \n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8: https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.metrics.accuracy_score.html","898f2f3d":"`drop`  \n\u53c2\u8003: https:\/\/note.nkmk.me\/python-pandas-drop\/  \n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8: https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.drop.html","9514f186":"`shape`  \n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8: https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.shape.html","c8edba94":"### \u30bf\u30a4\u30bf\u30cb\u30c3\u30af\u30b3\u30f3\u30da\u306e\u30d5\u30a9\u30eb\u30c0\u914d\u7f6e\n```\n\u251c\u2500\u2500 \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\n\u2502\t\u2514\u2500\u2500 \u73fe\u5728\u306eKernel\n\u2514\u2500\u2500 input\/\n \t\u251c\u2500\u2500 train.csv\uff08\u30e2\u30c7\u30eb\u4f5c\u6210\u7528\u30c7\u30fc\u30bf\uff09\n \t\u251c\u2500\u2500 test.csv\uff08\u4e88\u6e2c\u5bfe\u8c61\u30c7\u30fc\u30bf\uff09\n \t\u2514\u2500\u2500 gender_submission.csv\uff08\u63d0\u51fa\u7df4\u7fd2\u7528\u30c7\u30fc\u30bf\uff09\n```\n\u7d9a\u304f\u30bb\u30eb\u3067\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\u969b\u306f\u3001**\u76f8\u5bfe\u30d1\u30b9**\u3067\u30c7\u30fc\u30bf\u3092\u6307\u5b9a\u3057\u3066\u3044\u307e\u3059","b016bc31":"`mode`  \n\u53c2\u8003: https:\/\/note.nkmk.me\/python-pandas-mode\/  \n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8: https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.Series.mode.html","7e90fbbe":"Pclass=1,2,3\u305d\u308c\u305e\u308c\u306b\u3064\u3044\u3066\u3001Survived\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u63cf\u753b\n\n![](https:\/\/raw.githubusercontent.com\/ftnext\/2019_slides\/master\/spz_online_titanic_handson\/assets\/survived_per_pclass.png)","127e735c":"## \u304a\u307e\u3051 3.\uff08\u9078\u629e\u80a21\uff09\u306e\u88dc\u8db3\n\n\u5e74\u9f62\u3092**\u5e74\u4ee3**\u3068\u3057\u3066\u6271\u3046"}}