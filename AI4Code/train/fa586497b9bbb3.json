{"cell_type":{"d8a783a6":"code","7990e370":"code","b5b52520":"code","42433b19":"code","f63a938e":"code","c3e00b3f":"code","f633512d":"code","92320b05":"code","49dfa02a":"code","b9733f9b":"code","5f7f34df":"code","a656e3da":"code","b73d4a5f":"code","9aaa216a":"code","4deaf321":"code","eb9c678d":"code","be14e6ef":"code","b7bd6f3e":"code","9a250e57":"code","62ea3327":"code","69b7057c":"code","3a8d0260":"code","0b02a2af":"code","255ca1bc":"code","b150a543":"code","0af4e95e":"code","8731946f":"code","296a23c9":"code","a157a877":"code","cefe3035":"code","3020fa61":"code","762ea47e":"code","d246d3f7":"code","0821719d":"code","38bb95e5":"code","00ed6976":"code","605837c3":"code","83f4d80d":"code","323fdc12":"code","ce9e76a4":"code","ca8f6678":"code","45ba98d5":"code","f0e0f4e6":"code","02c8043b":"code","e59cf50e":"code","d17381a9":"code","d6bb9b61":"code","e3f8289e":"code","0285b0aa":"code","ed80248b":"code","4b927250":"code","02ab2a83":"code","f26c9dc5":"code","c2d0a88b":"code","189ac621":"code","51b73bcb":"code","6d2bdcb4":"code","e86f44af":"code","dc79a6c1":"code","a84dfa43":"code","2cdbf766":"code","a8ee4ec2":"code","8ccd0e91":"code","a390b5a1":"code","cfe1af4f":"code","389c601c":"code","5f73b7e3":"code","56c0a6ec":"code","eaa8c442":"code","e182d36c":"code","a82ae76b":"markdown","da0b8816":"markdown","d1a20299":"markdown","c6718b35":"markdown","1f5f5ca4":"markdown","48515954":"markdown","87d70a77":"markdown","dd332fb8":"markdown","b2abee1a":"markdown","f020cd36":"markdown","90aeffbf":"markdown","5020a34d":"markdown","c676c891":"markdown","299d0be4":"markdown","092afcc6":"markdown","c74d62eb":"markdown","b844cca9":"markdown","4a4702af":"markdown","fb3f4c6a":"markdown","6725b568":"markdown","1c2afa7f":"markdown","fac8ae85":"markdown","3a89d857":"markdown","014e63b2":"markdown","13cca907":"markdown","66273bbe":"markdown","2170faf0":"markdown","51fca2e2":"markdown","69d5e914":"markdown","4567b38e":"markdown","84d4045e":"markdown","9afb8b3b":"markdown","faec6367":"markdown","93bc5404":"markdown","024a29d3":"markdown","6ad77183":"markdown","3a377d79":"markdown","af307c82":"markdown","751b6932":"markdown","1b70236f":"markdown"},"source":{"d8a783a6":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n\n# Matplolib for visualization\nfrom matplotlib import pyplot as plt\n# display plots in the notebook\n%matplotlib inline\n\n# Datetime deal with dates formats\nimport datetime as dt\nimport plotly.express as px\nimport plotly.graph_objects as go","7990e370":"train = pd.read_csv('..\/input\/please-come\/sales_train.csv')\ntest = pd.read_csv('..\/input\/please-come\/test.csv')\nitems = pd.read_csv('..\/input\/please-come\/items.csv')\nitems_categories = pd.read_csv('..\/input\/please-come\/item_categories.csv')\nshops = pd.read_csv('..\/input\/please-come\/shops.csv')","b5b52520":"print('test shop_id \uac2f\uc218: ',len(test['shop_id'].unique()))\nprint('test item_id\uc758 \uac2f\uc218: ',len(test['item_id'].unique()))","42433b19":"print('\uacf5\ud1b5 shop_id \uac2f\uc218: ', len(set(test['shop_id'].unique()) & set(train['shop_id'].unique())))\nprint('\uacf5\ud1b5 item_id \uac2f\uc218: ', len(set(test['item_id'].unique()) & set(train['item_id'].unique())))","f63a938e":"train['item_cnt_day'].describe()","c3e00b3f":"print(train['item_cnt_day'].min())\nprint(train['item_cnt_day'].quantile(0.01))\nprint(train['item_cnt_day'].quantile(0.99))\nprint(train['item_cnt_day'].max())\n\n#\ub9c8\uc9c0\ub9c9 \uac12\uacfc \ub9c8\uc9c0\ub9c9 \uc9c1\uc804 \uac12\uc758 \ucc28\uc774\uac00 \ub9e4\uc6b0 \ud06c\ub2e4\ub294 \uac83\uc744 \uc54c \uc218 \uc788\uc74c","f633512d":"plt.scatter(train['date'], train['item_cnt_day'])","92320b05":"train.isnull().sum() * 100 \/ len(train)","49dfa02a":"train.head(5)","b9733f9b":"train = train.merge(items, how = 'left', on='item_id').merge(shops,  how = 'left', on='shop_id').merge(items_categories, how='left', on='item_category_id')\ntrain.head(5)","5f7f34df":"import datetime as dt\ntrain['date'] = train.date.apply(lambda x:dt.datetime.strptime(x, '%d.%m.%Y'))","a656e3da":"train['year'] = train['date'].dt.year\ntrain['month'] = train['date'].dt.month\ntrain['dayofweek'] = train['date'].dt.dayofweek\ntrain['month_year'] = train['date'].dt.to_period('M')","b73d4a5f":"train.head()","9aaa216a":"test_item_id = test['item_id'].unique()\ntest_shop_id = test['shop_id'].unique()\n\nlk_train = train[train['item_id'].isin(test_item_id)]\nprint(train.shape, lk_train.shape) # \ud655 \uc904\uc5c8\ub2e4","4deaf321":"lk_train.groupby(['month', 'year']).sum()['item_cnt_day'].unstack().plot(figsize=(13,5))\nplt.xlabel('month')\nplt.ylabel('Total item_cnt_day')\nplt.show()","eb9c678d":"date_sum = lk_train.groupby(['year','date'])['item_cnt_day'].sum().reset_index()\nfig = px.line(date_sum, x=\"date\", y=\"item_cnt_day\", title='Sales by Date', width=900, height=500, color='year')\nfig.show()","be14e6ef":"lk_train.groupby(['month','year']).sum()['item_cnt_day'].unstack().plot(figsize=(13,3))\nplt.xlabel('Month')\nplt.ylabel('Total item_cnt_day')\nplt.show()","b7bd6f3e":"# # Since there is no data for November or December 2015, just select data for 2013 and 2014 and confirm it","9a250e57":"train_2year = lk_train[(lk_train['date'] >= '2013-01-01') & (lk_train['date'] <= '2014-12-31')]\nmonthly_sum = train_2year.groupby('month')['item_cnt_day'].sum().reset_index()\nfig = px.bar(monthly_sum, x='month',y='item_cnt_day',title='Sales by Month', width=900, height=500, color_continuous_midpoint= 'item_cnt_day')\nfig.show()","62ea3327":"day_sum = lk_train.groupby('dayofweek')['item_cnt_day'].sum().reset_index()\nfig = px.bar(day_sum, x='dayofweek',y='item_cnt_day',title='Sales by Day', width=700, height=500 )\nfig.show()","69b7057c":"category_sum = lk_train.groupby('item_category_id')['item_cnt_day'].sum().reset_index().sort_values('item_cnt_day', ascending=False)\nfig = px.bar(category_sum, x='item_category_id',y='item_cnt_day',title='Sales by Category', width=900, height=500)\nfig.show()","3a8d0260":"category_sum = lk_train.groupby(['item_category_id', 'item_category_name'])['item_cnt_day'].sum().reset_index().sort_values('item_cnt_day', ascending=False)[:10]\nlabels = list(category_sum['item_category_name'])\nvalues = list(category_sum['item_cnt_day'])\n\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, hole=.3)])\nfig.show()","0b02a2af":"#shop\ubcc4 \uc8fc\ub85c \ud30c\ub294 item category \uacbd\ud5a5\uc131\n\nshop_top_cat = lk_train.groupby(['shop_id', 'item_category_name'])['item_cnt_day'].sum().reset_index().sort_values('item_cnt_day', ascending=False)\nshop_top_cat = shop_top_cat.drop_duplicates('shop_id', keep='first')\nlabels = list(shop_top_cat['item_category_name'])\nvalues = list(shop_top_cat['item_cnt_day'])\n\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, hole=.3)])\nfig.show()  ","255ca1bc":"item_sum = lk_train.groupby('item_id')['item_cnt_day'].sum().reset_index().sort_values('item_cnt_day',ascending=False)[:5]\nfig = px.bar(item_sum, x='item_id',y='item_cnt_day',title='Sales by Item', width=900, height=500)\nfig.show()","b150a543":"item_sum = lk_train.groupby(['item_id', 'item_name'])['item_cnt_day'].sum().reset_index().sort_values('item_cnt_day', ascending=False)[:5]\nlabels = list(item_sum['item_name'])\nvalues = list(item_sum['item_cnt_day'])\n\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, hole=.3)])\nfig.show()","0af4e95e":"print('item_id 30: ', items[items['item_id'] == 20949].values, \"Corporate package shirt 1C Interest white\")\nprint('item_id 55: ', items[items['item_id'] == 2808].values, \"Diablo III [PC, Jewell, Russian Version]\")\nprint('item_id 10: ', items[items['item_id'] == 3732].values, \"Grand Theft Auto V[PS3] Russian Subtitles\")","8731946f":"category_sum = lk_train.groupby('shop_id')['item_cnt_day'].sum().reset_index().sort_values('item_cnt_day',ascending=False)\nfig = px.bar(category_sum, x='shop_id',y='item_cnt_day',title='Sales by shop', width=900, height=500)\nfig.show()","296a23c9":"print('shop_id 31: ', shops[shops['shop_id'] == 31].values, \"Moscow TRC Semenovsky\")\nprint('shop_id 25: ', shops[shops['shop_id'] == 25].values, \"Moscow TRK Atrium\")\nprint('shop_id 28: ', shops[shops['shop_id'] == 28].values, \"Moscow Warm Stan II\")\n\n# shop name\uc5d0 city\uac00 \ud3ec\ud568\ub418\uc5b4 \uc788\uc74c","a157a877":"lk_train.groupby(['month', 'year']).sum()['item_price'].unstack().plot(figsize=(13,5))\nplt.xlabel('month')\nplt.ylabel('Total item_price')\nplt.show()","cefe3035":"date_sum = lk_train.groupby(['year','date'])['item_price'].sum().reset_index()\nfig = px.line(date_sum, x=\"date\", y=\"item_price\", title='Sales by item_price', width=900, height=500, color='year')\nfig.show()","3020fa61":"category_sum = lk_train.groupby('item_category_id')['item_price'].sum().reset_index()\nfig = px.bar(category_sum, x='item_category_id',y='item_price',title='Sales by Category', width=900, height=500)\nfig.show()","762ea47e":"category_sum = lk_train.groupby(['item_category_id', 'item_category_name'])['item_price'].sum().reset_index().sort_values('item_price', ascending=False)[:10]\nlabels = list(category_sum['item_category_name'])\nvalues = list(category_sum['item_price'])\n\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, hole=.3)])\nfig.show()  ","d246d3f7":"price = lk_train[['item_category_id','item_price']]\nprice = price.drop_duplicates(['item_category_id','item_price'])\nfig = px.box(price, x=\"item_category_id\", y=\"item_price\", title = 'Price variation by Item', width=2000, height=500)\nfig.show()","0821719d":"print(lk_train[lk_train['item_category_id'] == 9]['item_category_name'].unique(), ': delivery the product')\nprint(lk_train[lk_train['item_category_id'] == 16]['item_category_name'].unique() , ': Game Console-XBXOnE')","38bb95e5":"price = lk_train[['item_id','item_price']]\nprice = price.drop_duplicates(['item_id','item_price'])\nfig = px.box(price, x=\"item_id\", y=\"item_price\", title = 'Price variation by Item', width=2000, height=500)\nfig.show()","00ed6976":"print(lk_train[lk_train['item_id'] == 13401]['item_name'].unique(), ': Call of Duty: Advanced Warfare (xbox)')\nprint(lk_train[lk_train['item_id'] == 11365]['item_name'].unique() , ': delivery EMS')","605837c3":"good_shop= lk_train.groupby(['shop_id', 'shop_name'])['item_price'].median().reset_index().sort_values('item_price')[:10]\nfig = px.bar(good_shop, x='shop_id',y='item_price',title='Sales by item_price', width=900, height=500,color_continuous_midpoint= 'item_price')\nfig.show()","83f4d80d":"# \uc218\uc775 \uce7c\ub7fc \ub9cc\ub4e4\uc5b4\uc8fc\uae30\nlk_train['revenue'] = lk_train['item_price'] * lk_train['item_cnt_day']\n\nbest_shop= lk_train.groupby(['shop_id', 'shop_name'])['revenue'].sum().reset_index().sort_values('revenue')[:10]\nfig = px.bar(best_shop, x='shop_id',y='revenue',title='Sales by revenue', width=900, height=500)\nfig.show()","323fdc12":"# 1-1)Add item_cnt_day in November 2013 and 2014 to make average bets \n# 2013\ub144 2014\ub144\uc758 11\uc6d4 'item_cnt_day' \ud3c9\uade0 + \uc911\ubcf5\uac12\uc744 first\ub85c \ub0a8\uae30\uae30\n# score: 1.25\n\nonly11_2013 = train[(train['year']==2013) & (train['month']==11)][['shop_id', 'item_id', 'item_cnt_day']]\nonly11_2014 = train[(train['year']==2014) & (train['month']==11)][['shop_id', 'item_id', 'item_cnt_day']] \n\nonly11 = only11_2013.merge(only11_2014, on=['shop_id', 'item_id'], how='left').fillna(0)\n\nonly11 = test.merge(only11, on=['shop_id', 'item_id'], how='left').fillna(0) \nonly11['item_cnt_month'] = (only11['item_cnt_day_x'] + only11['item_cnt_day_y']) \/ 2\n\nfinal_only11 = only11[['ID', 'item_cnt_month']]\n\nsubset = ['ID']\nfinal_only11.drop_duplicates(subset=subset, inplace=True, keep='first')\n\nfinal_only11.sort_values('ID') # \ud655\uc778\nfinal_only11.to_csv(\"only11_submission_first.csv\", index=False)","ce9e76a4":"# 1-2) Leave duplicate value to last\n# 2013\ub144 2014\ub144\uc758 11\uc6d4 'item_cnt_day' \ud3c9\uade0 + \uc911\ubcf5\uac12\uc744 last\ub85c \ub0a8\uae30\uae30\n# score: 1.23\nsubset = ['ID']\nfinal_only11.drop_duplicates(subset=subset, inplace=True, keep='last')\n\nfinal_only11.sort_values('ID') # \ud655\uc778\nfinal_only11.to_csv(\"only11_submission_last.csv\", index=False)","ca8f6678":"# 2) \ubaa8\ub4e0 \uae30\uac04\uc758 \ucd1d 'item_cnt_day' \ud3c9\uade0\n# score: 2.0\n\nsales = test.merge(train, how='left', on = ['shop_id', 'item_id'])\n\nsubset =['ID', 'shop_id', 'item_id', 'date', 'date_block_num', 'item_price','item_cnt_day']\nsales.drop_duplicates(subset=subset, inplace=True, keep='first')\nsales = sales.dropna(how='any', thresh=None, subset=None)\n\nsamp = sales[['ID', 'date_block_num', 'item_cnt_day']]\nsamp = samp.sort_values(['ID', 'date_block_num'])\nsamp = (samp.groupby('ID')['item_cnt_day'].sum() \/ 34).reset_index()\n\ntotal_avg = test.merge(samp, how='left', on='ID').fillna(0)\ntotal_avg = total_avg.rename(columns = {'item_cnt_day' : 'item_cnt_month'})\ntotal_avg.to_csv('total_avg_submission.csv', index_label='ID')","45ba98d5":"#  3) Weighted in 2014 to reflect growth rate\n# score: 1.23\n\na = train[(train['date'] >= '2013-01-01') & (train['date'] <= '2013-10-31')]\nb = train[(train['date'] >= '2014-01-01') & (train['date'] <= '2014-10-31')]\nc = train[(train['date'] >= '2015-01-01') & (train['date'] <= '2015-10-31')]\n\nsum13 = a.groupby('year')['item_cnt_day'].sum().values\nsum14 = b.groupby('year')['item_cnt_day'].sum().values\nsum15 = c.groupby('year')['item_cnt_day'].sum().values\n\ngrow_2013 = sum15 \/ sum13 * 100\ngrow_2014 = sum15 \/ sum14 * 100\n\nonly11_2013 = train[(train['year']==2013) & (train['month']==11)][['shop_id', 'item_id', 'item_cnt_day']]\nonly11_2014 = train[(train['year']==2014) & (train['month']==11)][['shop_id', 'item_id', 'item_cnt_day']] \n\nonly11 = only11_2013.merge(only11_2014, on=['shop_id', 'item_id'], how='left').fillna(0)\n\nonly11 = test.merge(only11, on=['shop_id', 'item_id'], how='left').fillna(0) \nonly11['item_cnt_month'] = ((only11['item_cnt_day_x'] * grow_2013) + (only11['item_cnt_day_y'] * grow_2014)) \/ 2\n\nfinal_only11 = only11[['ID', 'item_cnt_month']]\n\nsubset = ['ID']\nfinal_only11.drop_duplicates(subset=subset, inplace=True, keep='last')\n\nfinal_only11.sort_values('ID') # \ud655\uc778\nfinal_only11.to_csv(\"g_submission.csv\", index=False)","f0e0f4e6":"def get_outlier(df=None, column=None, weight=1.5):\n    fraud=df[column]\n    print(fraud.shape)\n    q_25 = np.percentile(fraud.values, 25)\n    q_75 = np.percentile(fraud.values, 75)\n    \n    iqr = q_75 - q_25\n    iqr_weight = iqr * weight\n    lowest_val = q_25 - iqr_weight\n    highest_val = q_75 + iqr_weight\n    outlier_index = fraud[(fraud<lowest_val) | (fraud<highest_val)].index\n    return outlier_index","02c8043b":"outlier_index = get_outlier(df=lk_train, column='item_cnt_day')\nlen(outlier_index)","e59cf50e":"# \uc6d4\ubcc4 \ud310\ub9e4\ub7c9\uc744 \ub9cc\ub4e4\uae30 \uc704\ud574 date \uce7c\ub7fc \ubcc0\uacbd\nlk_train['date'] = lk_train['date'].apply(lambda x : x.strftime('%Y-%m'))","d17381a9":"outlier_v2 = lk_train.loc[outlier_index,:]\nlk_train_v2 = lk_train[lk_train.isin(outlier_v2) == False]","d6bb9b61":"pd.set_option('float_format', '{:f}'.format)\nlk_train['item_cnt_day'].describe()","e3f8289e":"lk_train_v2['item_cnt_day'].describe()","0285b0aa":"df2 = lk_train_v2.groupby(['date','item_id','shop_id'])['item_cnt_day'].sum().reset_index()\ndf2 = df2.pivot_table(index=['shop_id','item_id'], columns='date',values='item_cnt_day').reset_index()\ndf2.head()","ed80248b":"df2_test = pd.merge(test, df2, on=['item_id','shop_id'], how='left').fillna(0)\ndf2_test = df2_test.drop(columns=['ID', 'shop_id', 'item_id'], axis=1)\ndf2_test.head()","4b927250":"TARGET = '2015-10'\n\ny_train = df2_test[TARGET]\nX_train = df2_test.drop(columns = [TARGET], axis=1)\n\nX_train.head()","02ab2a83":"y_train.head()","f26c9dc5":"X_test = df2_test.drop(labels=['2013-01'], axis=1)\nX_test.head()","c2d0a88b":"!pip install lightgbm\n\nfrom lightgbm import LGBMRegressor","189ac621":"model=LGBMRegressor()","51b73bcb":"model.fit(X_train, y_train)","6d2bdcb4":"X_train.head()","e86f44af":"X_test.describe()","dc79a6c1":"X_test.head()","a84dfa43":"y_pred = model.predict(X_test).clip(0., 20.)\npreds = pd.DataFrame(y_pred, columns=['item_cnt_month'])\npreds.to_csv('submission_modeling_v4.csv',index_label='ID')","2cdbf766":"y_pred","a8ee4ec2":"X_test['2015-11'] = y_pred","8ccd0e91":"X_test","a390b5a1":"model.feature_importances_","cfe1af4f":"from sklearn.ensemble import RandomForestRegressor\nraf = RandomForestRegressor(n_estimators=1000,\n                              n_jobs=2,\n                              random_state=42)","389c601c":"raf.fit(X_train, y_train)","5f73b7e3":"y_pred = raf.predict(X_test).clip(0., 20.)","56c0a6ec":"preds = pd.DataFrame(y_pred, columns=['item_cnt_month'])\npreds.head()","eaa8c442":"preds.to_csv('submission_light.csv',index_label='ID')","e182d36c":"pd.set_option('float_format', '{:f}'.format)\nraf.feature_importances_","a82ae76b":"### 1-3)Pivoting existing tables and arranging them into columns in order of date (months)","da0b8816":"### 1) Price Trends by Year\n- It is increasing every year.\n- Trends in growth with sales at the end of the year","d1a20299":"# 4. Predict","c6718b35":"## 2. Modeling\nData from February 2013 to October 2015, modeled to predict November 2015","1f5f5ca4":"### 1)Data from January 2013 to September 2015, fitting for forecast in October 2015","48515954":"# 2. Data Cleanup\n    1) Combine all data frames\n    2) Make date data\n    3) Leave only the required id (id only in the predicted test)","87d70a77":"### 2-1)Price Change by Category\n    -There are price changes due to sales\n    -also find that prices fluctuate too much.\n    -maybe it's due to big discounts like Black Friday.","dd332fb8":"### 1. Sales (item_cnt_day) trend","b2abee1a":"## 2)Make date data\nYear\/month\/quarter\/year\/day-month--Organization","f020cd36":"### feature importance check\n    - Confirming the last 6 months (May 2015 - October 2015) as an important feature\n    -In addition, January 2015 is an important feature \u2192 Take a scatterbrain.","90aeffbf":"## 2)skewness\nsevere asymmetry. Outlier removal required prior to prediction","5020a34d":"## 2. Price","c676c891":"## 4-1)What type of things do stores usually sell?\n    Ranking\n    PC Games-Standard Issue\n    Music-Regional Production CD\n    DVD movie\n    present-Bags, Album, mouse carpet\n    Game\n    Gift-soft toys","299d0be4":"# Predictive version B\n## Callenge - LightBGM ","092afcc6":"### 1) Sales by Year\n- Sales are increasing little by little every year.\n- Sales are on the rise at the end of the year.","c74d62eb":"I'm a beginner learning to analyze data. I've made predictions with the focus of EDA. If you're reading a laptop and you know a better code, tell me. I'd appreciate it if you leave comments.\n\nNotebook order is as follows:\n\n### 1. EDA \n    1)DATA CHECK \n    2)DATA Cleanup \n    3)Seasonality & Visualization\n\n### 2. Predict\n    A. prediction without model\n    B. LightBGM \n    C. Randomforest Regressor","b844cca9":"## 1)\uc608\uce21\ud560 test\uc758 id\ub4e4\uc740 \ubaa8\ub450 train\uc5d0 \uc788\uc744\uae4c?\n    Are all test ids in train?\n    \ubd80\uc871\ud55c item_id\ub4e4\uc740 \ubaa8\ub378\ub9c1 & \uc608\uce21 \ubd80\ubd84\uc5d0\uc11c \ucc44\uc6cc\uc8fc\uae30!","4a4702af":"### 1-2)check","fb3f4c6a":"### 2)Data from February 2013 to October 2015, modeled to predict November 2015","6725b568":"## 3. LGBM\n    -The rule tree created by continuously dividing the leaf node with max delta losses is less error than the traditional tree-division method if learning is repeated. \n    -The downside of additional work\n","1c2afa7f":"### 1-4) Completing the data where the outlier has been removed","fac8ae85":"## 3) a good-for-consumption store for consumers (the cheapest selling place)","3a89d857":"### 2) monthly sales\nNovember, December (the end of the year) sales surge","014e63b2":"## 4) a top-selling store","13cca907":"### 2-2)Price change by item\n* Most items have very high price fluctuations","66273bbe":"### 2-3)Check out the products with the most volatile prices\n* Sales price varies by shop and discount is different by shop, showing various price ranges","2170faf0":"## 1. Remove Sales Outlier\n- Minimum: -16, maximum: 2,169\n- IQR: (3rd-minute-1th-minute)*1.5 - Maximum\/minimum value, which is outside this value, shall be treated as an outlier and removed.","51fca2e2":"## 1)Combine all data frames","69d5e914":"### 4) Sales by category\n    Ranking\n    1. PC Games-Standard Issue\n    2. Music-Regional Production CD\n    3. present Bag, Alboma, Cobrikey\n    \n    *PS4, PS3 : Play station,\n    *Xbox: Microsoft-developed home game console","4567b38e":"### 5) the best-selling item\n    1. Corporate package shirt 1C Interest white\n    2. Diablo III [PC, Jewell, Russian Version]\n    3. GTA Grand Theft Auto V[PS3] Russian Subtitles","84d4045e":"# 3. Seasonality & Visualization","9afb8b3b":"### 1-1)Create a New Table without outlier\n","faec6367":"# 1. DATA CHECK\n    1)test\uc758 id\ub4e4\uc740 \ubaa8\ub450 train\uc5d0 \uc788\uc744\uae4c?\n    2)skewness\n    3)missing values","93bc5404":"## 3)missing values","024a29d3":"# Predictive version C \n## Callenge - Randomforest Regressor\nModeling RandomForrestRegressor with the same data","6ad77183":"## 3)Leave only the required id \nid only in the predicted test","3a377d79":"### 6) The highest-selling store\nSales at stores in Moscow are high.","af307c82":"### 3)Sales by day\n    * Monday's sales are the lowest.\n    Sales are the highest in the order of gold.\n    There is a lot of sales over the weekend","751b6932":"## A. prediction without model\n    1-1) Add item_cnt_day in November 2013 and 2014 to make average bets\n    1-2) Leave duplicate value to last\n    \n    2) 2013-2015 Add all item_cnt_day to average\n    \n    3) Weighted in 2014 to reflect growth rate","1b70236f":"## 2)Which category has the highest price?\n    \u0418\u0433\u0440\u044b (= GAME) \n    High price in the gaming sector"}}