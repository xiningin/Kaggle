{"cell_type":{"5f5b4e9d":"code","65ff859a":"code","22bc9858":"code","89ab967d":"code","5c90f6e5":"code","de01bf7c":"code","f40bdef7":"code","7affb114":"code","435a7baf":"code","b7601869":"code","a2209313":"code","431dcf52":"code","121fb6b3":"code","5ec211f4":"code","63d32738":"code","44ae63b9":"code","717bbe1a":"code","6f61eb0f":"code","76048218":"code","9b59c319":"code","fe1480ed":"code","7a64247e":"code","275b46d9":"code","9b05f299":"code","c94a94a0":"code","a1bc9176":"code","d8a92ea7":"code","286b60ee":"code","c5dec8a6":"code","554a7b36":"code","0bcd6207":"code","305d20a7":"code","edca8827":"code","424752cd":"markdown","29dfd684":"markdown","2dcb9560":"markdown","da38c130":"markdown","d01b2628":"markdown","c06be7c1":"markdown","92f96922":"markdown","7185bec8":"markdown","b79482f0":"markdown","4e1e7e5d":"markdown","dcd6a9e4":"markdown","f7c42c5e":"markdown","41f27965":"markdown","50d17e44":"markdown","7514ff38":"markdown","69a5197a":"markdown","015687d0":"markdown","0f554cc4":"markdown","02586bf9":"markdown","881e0719":"markdown","18076c44":"markdown","bc26d9f4":"markdown","78d80660":"markdown","f07031c4":"markdown","35f70f31":"markdown","54c3ddcf":"markdown","f7ba1e51":"markdown","0653f808":"markdown","05637c89":"markdown","ec00b639":"markdown","29e808e3":"markdown","2bba1bf0":"markdown","2e0fc600":"markdown","be5e0245":"markdown"},"source":{"5f5b4e9d":"import warnings\nwarnings.filterwarnings('ignore')\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","65ff859a":"messages = pd.read_csv('..\/input\/sms-spam-collection-dataset\/spam.csv',encoding='latin1')\nmessages = messages.iloc[:,[0,1]]\nmessages.columns = [\"label\", \"message\"]\nmessages.head()","22bc9858":"messages.describe()","89ab967d":"messages.groupby('label').describe()","5c90f6e5":"messages['length'] = messages['message'].apply(len)\nmessages.head()","de01bf7c":"plt.style.use('seaborn-darkgrid')\n\nfig = plt.figure(dpi = 120)\nax = plt.axes()\nmessages['length'].plot(bins=50, kind='hist',ax=ax,color = 'green')\nax.set(xlabel = 'Message Length Class',ylabel = 'Frequency',title = 'Length Distribution');","f40bdef7":"messages.length.describe()","7affb114":"messages[messages['length'] == 910]['message'].iloc[0]","435a7baf":"fig,ax = plt.subplots(1,2,figsize=(12,4),dpi = 120)\n\nmessages[messages['label']=='ham'].hist(column='length', bins=50,ax=ax[0],color = 'green')\nax[0].set(xlabel = 'Length Class',ylabel = 'Frequency',title = 'HAM')\nmessages[messages['label']=='spam'].hist(column='length', bins=50,ax=ax[1],color = 'red')\nax[1].set(xlabel = 'Length Class',ylabel = 'Frequency',title = 'SPAM');","b7601869":"from nltk.corpus import stopwords\nimport string","a2209313":"def text_process(mess):\n    \"\"\"\n    Takes in a string of text, then performs the following:\n    1. Remove all punctuation\n    2. Remove all stopwords\n    3. Returns a list of the cleaned text\n    \"\"\"\n    # Check characters to see if they are in punctuation\n    nopunc = [char for char in mess if char not in string.punctuation]\n\n    # Join the characters again to form the string.\n    nopunc = ''.join(nopunc)\n    \n    # Now just remove any stopwords\n    return [word for word in nopunc.split() if word.lower() not in stopwords.words('english')]","431dcf52":"messages.head()","121fb6b3":"# Check to make sure its working\nmessages['message'].head(5).apply(text_process)","5ec211f4":"from sklearn.feature_extraction.text import CountVectorizer","63d32738":"bow_transformer = CountVectorizer(analyzer=text_process).fit(messages['message'])\n\n# Print total number of vocab words\nprint(len(bow_transformer.vocabulary_))","44ae63b9":"message4 = messages['message'][3]\nprint(message4)","717bbe1a":"bow4 = bow_transformer.transform([message4])\nprint(bow4)\nprint(bow4.shape)","6f61eb0f":"print(bow_transformer.get_feature_names()[4073])\nprint(bow_transformer.get_feature_names()[9570])","76048218":"messages_bow = bow_transformer.transform(messages['message'])","9b59c319":"print('Shape of Sparse Matrix: ', messages_bow.shape)\nprint('Amount of Non-Zero occurences: ', messages_bow.nnz)","fe1480ed":"sparsity = (100.0 * messages_bow.nnz \/ (messages_bow.shape[0] * messages_bow.shape[1]))\nprint('sparsity: {}'.format(round(sparsity)))","7a64247e":"from sklearn.feature_extraction.text import TfidfTransformer\n\ntfidf_transformer = TfidfTransformer().fit(messages_bow)\ntfidf4 = tfidf_transformer.transform(bow4)\nprint(tfidf4)","275b46d9":"print(tfidf_transformer.idf_[bow_transformer.vocabulary_['u']])\nprint(tfidf_transformer.idf_[bow_transformer.vocabulary_['university']])","9b05f299":"messages_tfidf = tfidf_transformer.transform(messages_bow)\nprint(messages_tfidf.shape)","c94a94a0":"from sklearn.naive_bayes import MultinomialNB\nspam_detect_model = MultinomialNB().fit(messages_tfidf, messages['label'])","a1bc9176":"print('predicted:', spam_detect_model.predict(tfidf4)[0])\nprint('expected:', messages.label[3])","d8a92ea7":"all_predictions = spam_detect_model.predict(messages_tfidf)\nprint(all_predictions)","286b60ee":"from sklearn.metrics import classification_report\nprint (classification_report(messages['label'], all_predictions))","c5dec8a6":"from sklearn.model_selection import train_test_split\n\nmsg_train, msg_test, label_train, label_test = \\\ntrain_test_split(messages['message'], messages['label'], test_size=0.2)\n\nprint(len(msg_train), len(msg_test), len(msg_train) + len(msg_test))","554a7b36":"from sklearn.pipeline import Pipeline\n\npipeline = Pipeline([\n    ('bow', CountVectorizer(analyzer=text_process)),\n    ('tfidf', TfidfTransformer()),\n    ('classifier', MultinomialNB()),\n])","0bcd6207":"pipeline.fit(msg_train,label_train)","305d20a7":"predictions = pipeline.predict(msg_test)","edca8827":"print(classification_report(predictions,label_test))","424752cd":"# Preprocessing\n\nOur main issue with our data is that it is all in text format (strings). The classification algorithms that we've learned about so far will need some sort of numerical feature vector in order to perform the classification task. There are actually many methods to convert a corpus to a vector format. The simplest is the the [bag-of-words](http:\/\/en.wikipedia.org\/wiki\/Bag-of-words_model) approach, where each unique word in a text will be represented by one number.","29dfd684":"Very interesting! Through just basic EDA we've been able to discover a trend that spam messages tend to have more characters.\n\n```\nNow let's begin to process the data so we can eventually use it with SciKit Learn!\n```","2dcb9560":"Now we have a classification report for our model on a true testing set! There is a lot more to Natural Language Processing than what we've covered here, and its vast expanse of topic could fill up several college courses! I encourage you to check out other resources on NLP!!\n","da38c130":"# EDA\n\n```\nLet's check out some of the stats with some plots and the built-in methods in pandas!\n```","d01b2628":"### Thank you so much for reading my Notebook. I hope you learned something good in this !! Ah, It's great to share with you guys that i am very close to become Kaggle Master in Notebook Section. Hopefully if i am getting a silver on this, I will be Kernel Master. Thank you for all the support!! Please do an up vote on this :)","c06be7c1":"Here is the original DataFrame again:","92f96922":"\n\n```\nLet's use groupby to use describe by label, this way we can begin to think about the features that separate ham and spam!\n```","7185bec8":"## Train Test Split","b79482f0":"Max is 910 characters, let's use masking to find this message:","4e1e7e5d":"Looks like we have some sort of Romeo sending texts! But let's focus back on the idea of trying to see if message length is a distinguishing feature between ham and spam:","dcd6a9e4":"Now we can use **.transform** on our Bag-of-Words (bow) transformed object and transform the entire DataFrame of messages. Let's go ahead and check out how the bag-of-words counts for the entire SMS corpus is a large, sparse matrix:","f7c42c5e":"Fantastic! We've developed a model that can attempt to predict spam vs ham classification!","41f27965":"Now let's see its vector representation:","50d17e44":"There are many ways the data can be preprocessed and vectorized. These steps involve feature engineering and building a \"pipeline\". I encourage you to check out SciKit Learn's documentation on dealing with text data as well as the expansive collection of available papers and books on the general topic of NLP.","7514ff38":"There are quite a few possible metrics for evaluating model performance. Which one is the most important depends on the task and the business effects of decisions based off of the model. For example, the cost of mis-predicting \"spam\" as \"ham\" is probably much lower than mis-predicting \"ham\" as \"spam\".","69a5197a":"# Data Pipeline\n\nLet's run our model again and then predict off the test set. We will use SciKit Learn's [pipeline](http:\/\/scikit-learn.org\/stable\/modules\/pipeline.html) capabilities to store a pipeline of workflow. This will allow us to set up all the transformations that we will do to the data for future use. Let's see an example of how it works:","015687d0":"## What is TF-IDF?\n\nTF-IDF stands for *term frequency-inverse document frequency*, and the tf-idf weight is a weight often used in information retrieval and text mining. This weight is a statistical measure used to evaluate how important a word is to a document in a collection or corpus. The importance increases proportionally to the number of times a word appears in the document but is offset by the frequency of the word in the corpus. Variations of the tf-idf weighting scheme are often used by search engines as a central tool in scoring and ranking a document's relevance given a user query.","0f554cc4":"In the above \"evaluation\",we evaluated accuracy on the same data we used for training. **You should never actually evaluate on the same dataset you train on!**\n\nSuch evaluation tells us nothing about the true predictive power of our model. If we simply remembered each example during training, the accuracy on training data would trivially be 100%, even though we wouldn't be able to classify any new messages.\n\nA proper way is to split the data into a training\/test set, where the model only ever sees the **training data** during its model fitting and parameter tuning. The **test data** is never used in any way. This is then our final evaluation on test data is representative of true predictive performance.","02586bf9":"Now we can directly pass message text data and the pipeline will do our pre-processing for us! We can treat it as a model\/estimator API:","881e0719":"# Model Evaluation\nNow we want to determine how well our model will do overall on the entire dataset. Let's begin by getting all the predictions:","18076c44":"# Introduction\n\n### I will be sharing an intro tutorial on NLP. I am planning to make few notebooks on NLP later :)\n\n![alt text](https:\/\/image.shutterstock.com\/image-vector\/banner-neurolinguistic-programming-nlp-vector-260nw-1257901324.jpg)\n\nNatural language processing (NLP) is about developing applications and services that are able to understand human languages. Some Practical examples of NLP are speech recognition for eg: google voice search, understanding what the content is about or sentiment analysis etc.\n\n### NLP Implementations\n\nThese are some of the successful implementations of Natural Language Processing (NLP):\n\n1. Search engines like Google, Yahoo, etc. Google search engine understands that you are a tech guy so it shows you results related to you.\n\n2. Social websites feed like the Facebook news feed. The news feed algorithm understands your interests using natural language processing and shows you related Ads and posts more likely than other posts.\n\n3. Speech engines like Apple Siri.\n\n4. Spam filters like Google spam filters. It\u2019s not just about the usual spam filtering, now spam filters understand what\u2019s inside the email content and see **if it\u2019s a spam or not.**","bc26d9f4":"To transform the entire bag-of-words corpus into TF-IDF corpus at once:","78d80660":"We can use SciKit Learn's built-in classification report, which returns [precision, recall,](https:\/\/en.wikipedia.org\/wiki\/Precision_and_recall) [f1-score](https:\/\/en.wikipedia.org\/wiki\/F1_score), and a column for support (meaning how many cases supported that classification). Check out the links for more detailed info on each of these metrics and the figure below:","f07031c4":"## Continuing Normalization\n\nThere are a lot of ways to continue normalizing this text. Such as [Stemming](https:\/\/en.wikipedia.org\/wiki\/Stemming) or distinguishing by [part of speech](http:\/\/www.nltk.org\/book\/ch05.html).\n\nNLTK has lots of built-in tools and great documentation on a lot of these methods.","35f70f31":"Let's try classifying our single random message and checking how we do:","54c3ddcf":"Play around with the bin size! Looks like text length may be a good feature to think about! Let's try to explain why the x-axis goes all the way to 1000ish, this must mean that there is some really long message!","f7ba1e51":"Now let's \"tokenize\" these messages. Tokenization is just the term used to describe the process of converting the normal text strings in to a list of tokens (words that we actually want).\n\nLet's see an example output on on column:","0653f808":"We'll go ahead and check what is the IDF (inverse document frequency) of the word `\"u\"` and of word `\"university\"`?","05637c89":"As we continue our analysis we want to start thinking about the features we are going to be using. This goes along with the general idea of [feature engineering](https:\/\/en.wikipedia.org\/wiki\/Feature_engineering). The better your domain knowledge on the data, the better your ability to engineer more features from it. Feature engineering is a very large part of spam detection in general. I encourage you to read up on the topic!\n\n```\nLet's make a new column to detect how long the text messages are:\n```","ec00b639":"## Data Visualization\n\nLet's visualize this!","29e808e3":"# Model Training\n\nWe'll be using scikit-learn here, choosing the [Naive Bayes](http:\/\/en.wikipedia.org\/wiki\/Naive_Bayes_classifier) classifier to start with:","2bba1bf0":"This means that there are seven unique words in message number 4 (after removing common stop words). Two of them appear twice, the rest only once. Let's go ahead and check and confirm which ones appear twice:","2e0fc600":"Let's take one text message and get its bag-of-words counts as a vector, putting to use our new `bow_transformer`:","be5e0245":"## Vectorization\n\nCurrently, we have the messages as lists of tokens (also known as [lemmas](http:\/\/nlp.stanford.edu\/IR-book\/html\/htmledition\/stemming-and-lemmatization-1.html)) and now we need to convert each of those messages into a vector the SciKit Learn's algorithm models can work with.\n\nFor example:\n\n<table border = \u201c1\u201c>\n<tr>\n<th><\/th> <th>Message 1<\/th> <th>Message 2<\/th> <th>...<\/th> <th>Message N<\/th> \n<\/tr>\n<tr>\n<td><b>Word 1 Count<\/b><\/td><td>0<\/td><td>1<\/td><td>...<\/td><td>0<\/td>\n<\/tr>\n<tr>\n<td><b>Word 2 Count<\/b><\/td><td>0<\/td><td>0<\/td><td>...<\/td><td>0<\/td>\n<\/tr>\n<tr>\n<td><b>...<\/b><\/td> <td>1<\/td><td>2<\/td><td>...<\/td><td>0<\/td>\n<\/tr>\n<tr>\n<td><b>Word N Count<\/b><\/td> <td>0<\/td><td>1<\/td><td>...<\/td><td>1<\/td>\n<\/tr>\n<\/table>\n\n\nSince there are so many messages, we can expect a lot of zero counts for the presence of that word in that document. Because of this, SciKit Learn will output a [Sparse Matrix](https:\/\/en.wikipedia.org\/wiki\/Sparse_matrix)."}}