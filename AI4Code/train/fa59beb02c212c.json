{"cell_type":{"099235e0":"code","370449cd":"code","7f06292f":"code","fd661ac1":"code","c9ae1bcb":"code","e94a4732":"code","48244e79":"code","de99bce0":"code","1aee3f3d":"code","3304b83d":"code","919ccaa7":"code","07b9b8ca":"code","2b937a09":"code","f87dff00":"code","a1d9a171":"code","2acb59e3":"code","c535edb7":"code","4b0d6b03":"code","f90829f0":"code","aa6b7aa8":"code","eb949d32":"code","1f087493":"code","32b605de":"code","5ff24913":"code","ef0d5be6":"code","653a7400":"code","bc0c49ec":"code","199c245c":"code","b63d326c":"code","a1805f01":"code","00bbc64e":"code","5f461237":"code","7d9f406d":"code","57db1d1b":"code","95030bd1":"code","a412dc26":"code","6206cc4b":"code","1e39f61a":"code","e4b5ec59":"markdown"},"source":{"099235e0":"import riiideducation\nimport dask.dataframe as dd\nimport  pandas as pd\nimport numpy as np\nenv = riiideducation.make_env()","370449cd":"train= pd.read_csv('\/kaggle\/input\/riiid-test-answer-prediction\/train.csv',\n                usecols=[1, 2, 3,7, 8, 9], dtype={'timestamp': 'int64', 'user_id': 'int64' ,'content_id': 'int16','answered_correctly':'int8', 'prior_question_elapsed_time': 'float32',\n    'prior_question_had_explanation': 'boolean'}\n              )","7f06292f":"train.head()","fd661ac1":"#Make a simple tree model and estimate score","c9ae1bcb":"train.tail()","e94a4732":"train['prior_question_had_explanation'].fillna(0, inplace=True)\ntrain['prior_question_had_explanation'] = train['prior_question_had_explanation'].astype('int8')\n\ntrain['prior_question_elapsed_time'].fillna(train['prior_question_elapsed_time'].mean(), inplace=True)","48244e79":"#arrange by timestamp\n\ntrain = train.sort_values(['timestamp'], ascending=True)\ntrain.head()","de99bce0":"train.tail()","1aee3f3d":"train.drop(['timestamp'], axis=1,   inplace=True)","3304b83d":"len(list(set(train.iloc[0:90000000,:]['user_id']).intersection(set(train.iloc[90000000:99000000,:]['user_id']))))","919ccaa7":"results_c = train.iloc[0:90000000,:][['content_id','answered_correctly']].groupby(['content_id']).agg(['mean'])\nresults_c.columns = [\"answered_correctly_content\"]","07b9b8ca":"results_u = train.iloc[0:90000000,:][['user_id','answered_correctly']].groupby(['user_id']).agg(['mean', 'sum'])\nresults_u.columns = [\"answered_correctly_user\", 'sum']\nresults_u.head()","2b937a09":"X = train.iloc[90000000:99000000,:]\n","f87dff00":"X = pd.merge(X, results_u, on=['user_id'], how=\"left\")\nX = pd.merge(X, results_c, on=['content_id'], how=\"left\")","a1d9a171":"X=X[X.answered_correctly!= -1 ]\nX=X.sort_values(['user_id'])\n","2acb59e3":"Y = X[[\"answered_correctly\"]]\nX = X.drop([\"answered_correctly\"], axis=1)\nX.head()","c535edb7":"Y","4b0d6b03":"train.head()","f90829f0":"X = X[['answered_correctly_user', 'answered_correctly_content', 'sum',  'prior_question_had_explanation' ,'prior_question_elapsed_time']] \nX['answered_correctly_user'].fillna(0.5,  inplace=True)\nX['answered_correctly_content'].fillna(0.5,  inplace=True)\nX['sum'].fillna(0,  inplace=True)","aa6b7aa8":"from  sklearn.tree import DecisionTreeClassifier\nfrom  sklearn.model_selection import train_test_split\nXt, Xv, Yt, Yv = train_test_split(X, Y, test_size =0.2, shuffle=False)","eb949d32":"import lightgbm as lgb\n\nparams = {\n    'objective': 'binary',\n    'max_bin': 600,\n    'learning_rate': 0.02,\n    'num_leaves': 80\n}\n\n\nlgb_train = lgb.Dataset(Xt, Yt)\nlgb_eval = lgb.Dataset(Xv, Yv, reference=lgb_train)\n\nmodel = lgb.train(\n    params, lgb_train,\n    valid_sets=[lgb_train, lgb_eval],\n    verbose_eval=10,\n    num_boost_round=1000,\n    early_stopping_rounds=10\n)","1f087493":"y_pred = model.predict(Xv)\ny_true = np.array(Yv)","32b605de":"Y.value_counts()","5ff24913":"from sklearn.metrics import roc_auc_score\nroc_auc_score(y_true, y_pred)","ef0d5be6":"###Make sure it works on the test set","653a7400":"test =  pd.read_csv('\/kaggle\/input\/riiid-test-answer-prediction\/example_test.csv' , dtype={'timestamp': 'int64', 'user_id': 'int64' ,'content_id': 'int16','answered_correctly':'int8', 'prior_question_elapsed_time': 'float32',\n    'prior_question_had_explanation': 'boolean'})\ntest.shape","bc0c49ec":"test = pd.merge(test, results_u, on=['user_id'],  how=\"left\")\ntest = pd.merge(test, results_c, on=['content_id'],  how=\"left\")","199c245c":"test.shape","b63d326c":"test['prior_question_had_explanation'].fillna(0, inplace=True)\ntest['prior_question_had_explanation'] = test['prior_question_had_explanation'].astype('int8')\ntest['prior_question_elapsed_time'].fillna(train['prior_question_elapsed_time'].mean(), inplace=True)","a1805f01":"test[['answered_correctly_user', 'answered_correctly_content', 'sum', 'prior_question_had_explanation' ,'prior_question_elapsed_time']]\ntest['answered_correctly_user'].fillna(0.5,  inplace=True)\ntest['answered_correctly_content'].fillna(0.5,  inplace=True)\ntest['sum'].fillna(0,  inplace=True)","00bbc64e":"y_pred = model.predict(test[['answered_correctly_user', 'answered_correctly_content', 'sum', 'prior_question_had_explanation' ,'prior_question_elapsed_time']])","5f461237":"y_pred.shape","7d9f406d":"test['answered_correctly'] = y_pred\ntest.head()","57db1d1b":"#################","95030bd1":"#Make preds\n\nresults_c = train[['content_id','answered_correctly']].groupby(['content_id']).agg(['mean'])\nresults_c.columns = [\"answered_correctly_content\"]\n\nresults_u = train[['user_id','answered_correctly']].groupby(['user_id']).agg(['mean', 'sum'])\nresults_u.columns = [\"answered_correctly_user\", 'sum']","a412dc26":"results_c.head()","6206cc4b":"iter_test = env.iter_test()","1e39f61a":"for (test_df, sample_prediction_df) in iter_test:\n    test_df = pd.merge(test_df, results_u, on=['user_id'],  how=\"left\")\n    test_df = pd.merge(test_df, results_c, on=['content_id'],  how=\"left\")\n    test_df['answered_correctly_user'].fillna(0.5, inplace=True)\n    test_df['answered_correctly_content'].fillna(0.5, inplace=True)\n    test_df['sum'].fillna(0, inplace=True)\n    test_df['prior_question_had_explanation'].fillna(0, inplace=True)\n    test_df['prior_question_had_explanation'] = test_df['prior_question_had_explanation'].astype('int8')\n    test_df['prior_question_elapsed_time'].fillna(train['prior_question_elapsed_time'].mean(), inplace=True)\n    test_df['answered_correctly'] =  model.predict(test_df[['answered_correctly_user', 'answered_correctly_content', 'sum','prior_question_elapsed_time','prior_question_had_explanation' ]])\n    env.predict(test_df.loc[test_df['content_type_id'] == 0, ['row_id', 'answered_correctly']])","e4b5ec59":"This a simple baseline using the LGBM algorithm. \n\nIt builds upon :  https:\/\/www.kaggle.com\/sishihara\/riiid-lgbm-5cv-benchmark?rvi=1\n"}}