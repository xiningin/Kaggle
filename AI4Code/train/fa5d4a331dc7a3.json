{"cell_type":{"5ab325be":"code","8ab37cc3":"code","e76ab2bc":"code","5ff8218f":"code","8302b112":"code","074124a6":"code","1f194c80":"code","8bf591b3":"code","fabc6c76":"code","4937c128":"code","a2d475ee":"code","e9148f3c":"code","b2575ff0":"code","8eb8bb0a":"code","bfb6d4e0":"code","17e1f2aa":"code","890a423c":"code","d650875c":"code","bfc3848f":"code","3288bb3b":"code","f39e12a3":"code","b21fdbed":"code","968ea375":"code","5e635bf7":"code","6841a277":"code","0a259d03":"code","0934a34f":"code","80c23c19":"code","5d678b97":"code","be79f213":"code","2df5bb61":"code","a7b7c5f4":"code","1bbdc084":"markdown","8ef4964c":"markdown","ff677082":"markdown","279d80ff":"markdown","35e6e02a":"markdown","1c687464":"markdown"},"source":{"5ab325be":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport plotly.express as px\nimport matplotlib.pyplot as plt\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn import linear_model, decomposition\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import StratifiedKFold, train_test_split, GridSearchCV, cross_val_score\n\n\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings(\"ignore\", category=FutureWarning)\npd.set_option('display.max_columns', None)","8ab37cc3":"df = pd.read_csv('..\/input\/tabular-playground-series-may-2021\/train.csv')\ndft = pd.read_csv('..\/input\/tabular-playground-series-may-2021\/test.csv')\ndfs = pd.read_csv('..\/input\/tabular-playground-series-may-2021\/sample_submission.csv')","e76ab2bc":"df.shape","5ff8218f":"dft.shape","8302b112":"df.columns","074124a6":"dft.columns","1f194c80":"df.head(3)","8bf591b3":"df.info()","fabc6c76":"X=df.loc[:,'feature_0':'feature_49']","4937c128":"y=df.loc[:,'target']","a2d475ee":"y=np.ravel(y)","e9148f3c":"X.describe()","b2575ff0":"for col in df.columns:\n    print(df[col].value_counts())","8eb8bb0a":"for col in dft.columns:\n    print(dft[col].value_counts())","bfb6d4e0":"cor_matrix=df.corr(method=\"pearson\")\ncor_matrix","17e1f2aa":"for i in X.columns:\n    sns.histplot(X[i])\n    plt.show()","890a423c":"label=LabelEncoder()\ny=label.fit_transform(y)","d650875c":"y","bfc3848f":"X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.2, random_state = 50)","3288bb3b":"cv=StratifiedKFold(n_splits=5)","f39e12a3":"estimator_1=[( 'Scalar1',StandardScaler()),('pcal1',PCA(n_components=30)),\n             ('cls1', RandomForestClassifier())] #created the input for pipelines\n\npipe_1= Pipeline(estimator_1) #first pipe line created\n","b21fdbed":"pipe_1.fit(X_train, y_train)\np1_cv_scores = cross_val_score(pipe_1, X_train, y_train, cv=cv)\n\nprint('Pipe_1_train_Score,{},testScore,{}'.format(pipe_1.score(X_train, y_train),pipe_1.score(X_test, y_test)))\nprint('Pipe_1_cvmean,{},pipe_1_cvstd,{}'.format(np.mean(p1_cv_scores), np.std(p1_cv_scores)))","968ea375":"pca=PCA()\nlogistic = LogisticRegression(max_iter=10000, tol=0.1)\n\nlogistic = LogisticRegression(max_iter=10000, tol=0.1)\npipe_2 = Pipeline(steps=[('pca', pca), ('logistic', logistic)])","5e635bf7":"pipe_2.fit(X_train, y_train)\np2_cv_scores = cross_val_score(pipe_2, X_train, y_train, cv=cv)\n\nprint('Pipe_2_train_Score,{},testScore,{}'.format(pipe_2.score(X_train, y_train),pipe_2.score(X_test, y_test)))\nprint('Pipe_2_cvmean,{},pipe_2_cvstd,{}'.format(np.mean(p2_cv_scores), np.std(p2_cv_scores)))","6841a277":"param_grid = {\n    'pca__n_components': [5, 15, 30, 45, 64],\n    'logistic__C': np.logspace(-4, 4, 4),\n}\nsearch = GridSearchCV(pipe_2, param_grid, n_jobs=-1)\nsearch.fit(X_train, y_train)","0a259d03":"print(\"Best parameter (CV score=%0.3f):\" % search.best_score_)\nprint(search.best_params_)","0934a34f":"X_pred=dft.loc[:,'feature_0':'feature_49']","80c23c19":"predict = pipe_2.predict(X_pred)\nprint(predict)","5d678b97":"probability_predict = pipe_2.predict_proba(X_pred)\nprobability_predict","be79f213":"dfs.iloc[:,1:5] = probability_predict\ndfs","2df5bb61":"dfs.to_csv('submission_log_2.csv',index=False)","a7b7c5f4":"dfs.to_csv('tps_submission_log.csv',index=False)","1bbdc084":"###### Test","8ef4964c":"# TRAIN AND TEST SPLIT","ff677082":"# PREDICTION","279d80ff":"# CREATING TWO PIPELINES FOR LOGISTIC AND RANDOM FOREST","35e6e02a":"###### Train","1c687464":"# GRID SEARCH _PARAMETER OPTIMIZATION"}}