{"cell_type":{"12034f7e":"code","ace6b038":"code","0640cf42":"code","f0e2381c":"code","7c6df29a":"code","d93ca860":"code","22b6259d":"code","62f45922":"code","31c8e4f2":"markdown","e08cceda":"markdown","0de08058":"markdown","30837385":"markdown","6e39c4ec":"markdown","52d7005c":"markdown"},"source":{"12034f7e":"from random import randint, random\nfrom operator import add \nfrom functools import *","ace6b038":"def individual(length, min, max):\n    'Create a member of the population.'\n    return [ randint(min,max) for x in range(length) ]","0640cf42":"def population(count, length, min, max):\n    \"\"\"\n    Create a number of individuals (i.e. a population).\n\n    count: the number of individuals in the population\n    length: the number of values per individual\n    min: the minimum possible value in an individual's list of values\n    max: the maximum possible value in an individual's list of values\n\n    \"\"\"\n    return [ individual(length, min, max) for x in range(count) ]\n","f0e2381c":"def fitness(individual, target):\n    \"\"\"\n    Determine the fitness of an individual. Higher is better.\n\n    individual: the individual to evaluate\n    target: the target number individuals are aiming for\n    \"\"\"\n    sum = reduce(add, individual, 0)\n    return abs(target-sum)","7c6df29a":"def grade(pop, target):\n    'Find average fitness for a population.'\n    summed = reduce(add, (fitness(x, target) for x in pop))\n    return summed \/ (len(pop) * 1.0)","d93ca860":"def evolve(pop, target, retain=0.2, random_select=0.05, mutate=0.01):\n    graded = [ (fitness(x, target), x) for x in pop]\n    graded = [ x[1] for x in sorted(graded)]\n    retain_length = int(len(graded)*retain)\n    parents = graded[:retain_length]\n    # randomly add other individuals to\n    # promote genetic diversity\n    for individual in graded[retain_length:]:\n        if random_select > random():\n            parents.append(individual)\n    # mutate some individuals\n    for individual in parents:\n        if mutate > random():\n            pos_to_mutate = randint(0, len(individual)-1)\n            # this mutation is not ideal, because it\n            # restricts the range of possible values,\n            # but the function is unaware of the min\/max\n            # values used to create the individuals,\n            individual[pos_to_mutate] = randint(\n                min(individual), max(individual))\n    # crossover parents to create children\n    parents_length = len(parents)\n    desired_length = len(pop) - parents_length\n    children = []\n    while len(children) < desired_length:\n        male = randint(0, parents_length-1)\n        female = randint(0, parents_length-1)\n        if male != female:\n            male = parents[male]\n            female = parents[female]\n            half = int(len(male) \/ 2)\n            child = male[:half] + female[half:]\n            children.append(child)        \n    parents.extend(children)\n    return parents","22b6259d":"# find the best solution\ndef find_best(pop,target):\n    best = None\n    val = 10^20  ######### very large number   ,  0 is the best\n    for individual in pop:\n        r = fitness(individual, target)\n        if r < val:\n            best = individual\n            val = r\n    return best, val","62f45922":"# Example usage\n\ntarget = 20\np_count = 1000\ni_length = 5\ni_min = 0\ni_max = 100\n\n# initialize population, estimate average fitness of it\np = population(p_count, i_length, i_min, i_max)\nfitness_history = [grade(p, target),]\n\n\nfor i in range(100):\n    p = evolve(p, target)\n    fitness_history.append(grade(p, target))\n    if grade(p, target) < 10e-3:\n        print(\"loop:\", i, \"average fitness:\", grade(p, target))\n        break\n\nbest, val = find_best(p,target)\nprint(\"best solution\", best, \"fitness value\", val, \"target\", target)   # \n\nprint (\"history_fitness\")\nfor datum in fitness_history:\n    print (datum)\n","31c8e4f2":"# Now we just need a way evolve our population; to advance the population from one generation to the next.\n\nFor each generation we'll take a portion of the best performing individuals as judged by our fitness function. These high-performers will be the parents of the next generation.\n\n# Breed together parents to repopulate the population to its desired size (if you take the top 20 individuals in a population of 100, then you'd need to create 80 new children via breeding).\n\n### In our case, breeding is pretty basic: take the first N\/2 digits from the father and the last N\/2 digits from the mother.\n\nfather = [1,2,3,4,5,6]\n\nmother = [10,20,30,40,50,60]\n\nchild = father[:3] + mother[3:]\n\nchild: [1,2,3,40,50,60]\n\nMerge together the parents and children to constitute the next generation's population.\n\n\n# Finally we mutate a small random portion of the population. What this means is to have a probability of randomly modifying each individual.\n\n","e08cceda":"# Ingredients of The Solution\n\nEach suggested solution for a genetic algorithm is referred to as an individual. In our current problem, each list of N numbers is an individual.\n\nindividual(5,0,100)\n[79, 0, 20, 47, 40]\n\nindividual(5,0,100)\n[64, 1, 25, 84, 87]","0de08058":"# The collection of all individuals is referred to as our population.\n\npopulation(3,5,0,100)\n\n[[51, 55, 73, 0, 80],\n\n[3, 47, 18, 65, 55], \n\n[17, 64, 77, 43, 48]]","30837385":"# We're going to optimize a very simple problem: trying to create a list of N numbers that equal X when summed together.\n\n# EX1:  N = 5 ; X = 10 ; one solution is [2, 0, 0 ,4, 2]\n\n# EX2: N = 5 and X = 200, then these would all be appropriate solutions.\n## lst = [40,40,40,40,40]\n## lst = [50,50,50,25,25]\n## lst = [200,0,0,0,0]\n","6e39c4ec":"# Define the fitness function. \n\nFor our problem, we want the fitness to be a function of the distance between the sum of an individuals numbers and the target number X.\n\nWe define: fitness = sum(individuals) - target , fitness = 0 is the best solution,  and the higher the worse.","52d7005c":"# It's also helpful to create a function that will determine a population's average fitness"}}