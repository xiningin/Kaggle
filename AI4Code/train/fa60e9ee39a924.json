{"cell_type":{"11e51f62":"code","97666d39":"code","903499f1":"code","fd2e7530":"code","852805a9":"code","fb214f79":"code","0cf056f4":"code","c5c7132f":"code","cedf1690":"code","41938b14":"code","1601d6b3":"code","f02da901":"code","6302d479":"code","7123049a":"code","5836bb2e":"code","eca0b500":"code","47803251":"code","1fa73129":"code","9365f668":"code","df322244":"code","ae0d6c8d":"code","011036ea":"code","a4d670b4":"code","3939e262":"code","b305b468":"code","b92d4584":"code","77eaa53d":"code","7b00eb86":"code","e60504d0":"code","26dd8728":"code","ff79184c":"code","f55ec24b":"code","bffb5f3f":"code","035485f3":"code","e55c68cf":"code","ddc58310":"code","e7a0b37e":"code","f65134f0":"code","f43219a7":"code","cbdd8905":"code","357b8214":"code","5c7f86f4":"code","0d4cb5cf":"code","563f1062":"code","125a0f50":"code","8948b377":"code","806b3e0f":"code","ee8dfd80":"code","3ca740dd":"code","2226a382":"code","c899b233":"code","f00d757d":"code","1fb40bb9":"code","b1a45118":"code","6b9eaf34":"code","504b1f53":"code","564d17fe":"code","0b625bfd":"code","3cb3993b":"code","04697b51":"code","0f0761c0":"code","9ce09faa":"code","a251b75f":"code","f0ccffc3":"code","70a7db33":"code","968c1fc5":"code","463ac183":"code","c37605a7":"code","a88fd5e5":"code","6941c7fc":"code","21c6a751":"code","2598f9c3":"code","d68c555c":"code","b1549769":"code","83c9b8be":"code","c3836942":"code","235798fc":"code","e821e039":"code","29d27fdb":"code","51b652f7":"code","f0ad6cb4":"code","38ffea04":"code","6afbca12":"code","36a7938d":"code","b04cf3b6":"code","5021aee7":"code","f6260aff":"code","d630ccb9":"code","11bf76c8":"code","0be61cb7":"code","b48e7ed5":"code","65e1ee62":"code","16019cab":"code","b792050d":"code","53a4cab1":"code","2a743633":"code","3788c5d7":"code","fec748f3":"code","a85319e9":"code","3b8c1d68":"code","b7d7391e":"code","8258111d":"code","c9c41271":"code","95c5a858":"code","8848aba0":"code","1fd80031":"code","5403756f":"code","015c28a9":"code","76484ddf":"code","2b839dd2":"code","f17eba6c":"code","9f466efd":"code","2a7aaec8":"code","828b7d80":"code","d3ebc417":"code","0370c400":"code","ebe89806":"code","fb5df231":"code","1e50c163":"code","3bb75771":"code","440da6e5":"code","b2290d71":"code","be72fc74":"code","299907b0":"code","dc45a76f":"code","3e3f5fcf":"code","a558f4b1":"code","6922d756":"code","477e95d3":"code","e3a45853":"code","d59d8a00":"code","bc85a4c4":"code","63bc0fb1":"code","0a7d46a6":"code","54d7c38d":"code","71b5ce35":"code","640fa781":"code","4f38ff9f":"code","2aabd228":"code","b93ada1e":"code","d91be6b0":"code","3d5514c2":"code","7a989cb7":"code","b7530b7e":"code","3f735b18":"code","36f5a321":"code","4a6299f2":"code","7ae6ea82":"code","633d4a6d":"code","669db564":"code","da58776b":"code","6236dff6":"code","a9092d06":"code","6c3c2bc7":"code","c76c62c0":"code","cdf6c1fb":"code","2b2b2643":"code","81015c34":"code","9e109570":"code","c6b38a3e":"code","28b88638":"code","7c2d0054":"code","114b12c9":"markdown","57afe334":"markdown","29b2fd74":"markdown","9f221406":"markdown","a275e831":"markdown","32738210":"markdown","d998b42b":"markdown","5f017321":"markdown","86fa6ed8":"markdown","6b3276de":"markdown","5309149c":"markdown","00f00ec9":"markdown","fa69b55e":"markdown","17add185":"markdown","60c2d856":"markdown","152763ab":"markdown","647680a6":"markdown","cf0136aa":"markdown","9793e4cf":"markdown","d2af5ab0":"markdown","8d70614f":"markdown","dc44a402":"markdown","3d85d89e":"markdown","4bb1fb9a":"markdown","1750f6d6":"markdown","3de2461d":"markdown","a8bf5cb2":"markdown","ce6dfb00":"markdown","9e26998a":"markdown","4a15df43":"markdown","255827d3":"markdown","f6dfc045":"markdown"},"source":{"11e51f62":"import matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom matplotlib.ticker import FixedLocator, FixedFormatter\nfrom matplotlib.patches import ConnectionPatch\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport datetime\nimport warnings\n\n\nfrom scipy.stats import expon, reciprocal\nfrom scipy.stats import randint\nfrom scipy import stats\n\nfrom pandas.plotting import scatter_matrix\n\nfrom sklearn.manifold import TSNE\nfrom sklearn.manifold import LocallyLinearEmbedding\n\nfrom sklearn.decomposition import PCA\nfrom sklearn.decomposition import KernelPCA\n\nfrom sklearn.cluster import KMeans\nfrom sklearn.cluster import SpectralClustering #kernel\nfrom sklearn.cluster import DBSCAN\nfrom sklearn.cluster import AgglomerativeClustering\nfrom sklearn.cluster import FeatureAgglomeration\nfrom sklearn.cluster import AffinityPropagation\n\nfrom sklearn.mixture import BayesianGaussianMixture\nfrom sklearn.mixture import GaussianMixture\n\nfrom sklearn.metrics import silhouette_score\nfrom sklearn.metrics import silhouette_samples\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import r2_score\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import ConfusionMatrixDisplay\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import precision_score, recall_score, precision_recall_curve\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import roc_curve, roc_auc_score\n\nfrom xgboost import XGBClassifier\n\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import StratifiedShuffleSplit\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import cross_val_predict\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.model_selection import permutation_test_score\nfrom sklearn.model_selection import RepeatedStratifiedKFold\n\nfrom sklearn.linear_model import LogisticRegression, RidgeClassifier\n\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer\n\nfrom sklearn.preprocessing import StandardScaler # mean0 std1\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.preprocessing import LabelEncoder\n\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.ensemble import ExtraTreesClassifier, VotingClassifier\nfrom sklearn.svm import SVC\n\nfrom sklearn.neighbors import KNeighborsClassifier\n\nfrom sklearn.base import BaseEstimator, TransformerMixin\nfrom sklearn.exceptions import ConvergenceWarning\n\n\nfrom yellowbrick.cluster import KElbowVisualizer\n\n%matplotlib inline\n\nfrom  warnings import simplefilter\nsimplefilter(\"ignore\", category=UserWarning)","97666d39":"main_test = pd.read_csv('..\/input\/titanic\/test.csv')\nmain_test.info()","903499f1":"data = pd.read_csv('..\/input\/titanic\/train.csv')\ndata.info()","fd2e7530":"cluster_data_c = data.copy()\ncluster_main_test = main_test.copy()","852805a9":"cluster_data = pd.concat([cluster_data_c, cluster_main_test], axis=0)\ncluster_data.describe().T.style.bar(subset=['mean'], color='#606ff2').background_gradient(subset=['std'], cmap='mako_r').background_gradient(subset=['50%'], cmap='mako_r')","fb214f79":"eda_data = data.reset_index().copy()","0cf056f4":"with plt.style.context('fivethirtyeight'): # background color set rcPram\n    fig, ax = plt.subplots(1, 2, figsize=(18, 6))\n    eda_data['Survived'].value_counts().plot.pie(explode=[0, 0.18], autopct='%1.1f%%',\n                                                 shadow=True, colors=['#682F2F', '#F3AB60'], startangle=70, ax=ax[0])\n    \n    age_bin = pd.qcut(eda_data['Age'], 10)\n    age_counts = sns.barplot(x=age_bin.sort_index().value_counts().index, y=age_bin.value_counts().values,\n                             linewidth=0.5, ec='black', zorder=3, palette='rocket', ax=ax[1])\n    for i in age_counts.patches:\n        values = f'{i.get_height():,.0f} | {i.get_height() \/ age_bin.shape[0]:,.1%}'\n        x = i.get_x() + i.get_width() \/ 2\n        y = i.get_y() + i.get_height() + 5\n        age_counts.text(x, y, values, ha='center', va='center', fontsize=10, \n                        bbox=dict(facecolor='none', edgecolor='black', boxstyle='round', linewidth=0.2))\n        ax[1].set_xlabel('ALL Age Bins')\n        ax[1].set_ylabel('Counts')","c5c7132f":"with plt.style.context('fivethirtyeight'): # background color set\n    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(18, 6))\n    fig.subplots_adjust(wspace=0)\n    eda_data['Survived'].value_counts().plot.pie(explode=[0, 0.2], autopct='%1.1f%%',\n                                                 shadow=True, colors=['#faf0e6', '#F3AB60'], startangle=70, ax=ax1)\n    \n    colors = ['#682f2f', '#774343', '#865858', '#956D6D', '#A48282',\n              '#B39797', '#C2ABAB', '#D1C0C0', '#E0D5D5', '#EFEAEA']\n    bar_per = eda_data['Survived'].groupby(age_bin).count()[::-1]\n    bottom = 0\n    for i in range(len(bar_per.values)):\n        height = bar_per.values[i] \/ bar_per.values.sum()\n        ax2.bar(-0.2, height=height, width=.2 ,bottom=bottom, color=colors[i], edgecolor='black')\n        y = bottom + ax2.patches[i].get_height() \/ 2.5\n        bottom += height\n        values = f'{ax2.patches[i].get_height(): ,.0%} | {bar_per.values[i]: ,.0f}' # \"%d%%\" % (ax2.patches[i].get_height() *100)\n        ax2.text(-0.2, y, values, ha='center',\n                 bbox=dict(facecolor='none', edgecolor='black', boxstyle='round', linewidth=0.2))\n\n    ax2.set_title('Surviver Age Per')\n    # reversed legend\n    ax2.legend(('0-13', '14-18', '19-21', '22-24', '25-27','28-30', '31-35', '36-40', '41-49', '50-80'), \n               title='38.4% -> 100%', loc='center', prop={'size':15})\n    ax2.axis('off')\n    ax2.set_xlim(-2.0 * .2, 2.0 * .2)\n\n    theta1, theta2 = ax1.patches[0].theta1, ax1.patches[0].theta2\n    center, r = ax1.patches[0].center, ax1.patches[0].r\n    \n    x = r * np.cos(np.pi \/ 173 * theta2) + center[0]\n    y = r * np.sin(np.pi \/ 180 * theta2) + center[1]\n    con = ConnectionPatch(xyA=(-.3, 0.01), xyB=(x, y), coordsA=ax2.transData, coordsB=ax1.transData, shrinkA=1, arrowstyle='<-')\n    con.set_color('#e9967a')#e9967a\n    con.set_linewidth(2)\n    ax2.add_artist(con)\n\n    x = r * np.cos(np.pi \/ 216 * theta1) + center[0]\n    y = r * np.sin(np.pi \/ 180 * theta1) + center[1]\n    con = ConnectionPatch(xyA=(-.3, 0.998), xyB=(x, y), coordsA=ax2.transData, coordsB=ax1.transData, shrinkA=1, arrowstyle='<-')\n    con.set_color('#e9967a')#e9967a\n    ax2.add_artist(con)\n    con.set_linewidth(2)","cedf1690":"def ms_pair_plot(values, hue='Survived'):\n    with plt.style.context('fivethirtyeight'):\n        fig, ax = plt.subplots(1, 2, figsize=(18, 6))\n        for i in range(len(values)):\n            #fig, ax = plt.subplots(1, 2, figsize=(18, 6)) when plot_buplication is performed, inclusion \n            value = values[i]\n            sns.histplot(x=value, hue=hue, data=eda_data, kde=True, palette='rocket', ax=ax[i])\n            ax[i].axvline(x=eda_data[value].mean(), color='g', linestyle='--', linewidth=3)\n            ax[i].axvline(x=eda_data[value].std(), color='c', linestyle=':', linewidth=3)\n            ax[i].text(eda_data[value].mean(), eda_data[value].mean(), \"<--Mean\", horizontalalignment='left', size='small', color='black', weight='semibold')\n            ax[i].text(eda_data[value].std(), eda_data[value].std(), \"Std-->\", horizontalalignment='right', size='small', color='black', weight='semibold')\n            sns.despine()","41938b14":"values = ['Age', 'Fare']\nms_pair_plot(values)","1601d6b3":"values = ['SibSp', 'Parch']\nms_pair_plot(values)","f02da901":"with plt.style.context('fivethirtyeight'):\n    fig = plt.figure(figsize=(18, 6))\n    sns.violinplot(x=\"Sex\", y=\"Survived\", data=eda_data, palette=['#682F2F', '#F3AB60'])\n    #plt.ylim(-50, 200)","6302d479":"survived_count = pd.crosstab(eda_data['Sex'], eda_data['Survived'])\nsurvived_pct = survived_count.div(survived_count.sum(1), axis=0)\nwith plt.style.context('fivethirtyeight'):\n    survived_pct.plot.barh(stacked=True, figsize=(19, 6), alpha=0.9, grid=False, color=['#682F2F', '#F3AB60'])","7123049a":"survived_count = pd.crosstab(eda_data['SibSp'], eda_data['Survived'])\nsurvived_pct = survived_count.div(survived_count.sum(1), axis=0)\nwith plt.style.context('fivethirtyeight'):\n    survived_pct.plot.barh(stacked=True, figsize=(19, 6), alpha=0.9, grid=False, color=['#682F2F', '#F3AB60'])","5836bb2e":"survived_count = pd.crosstab(eda_data['Parch'], eda_data['Survived'])\nsurvived_pct = survived_count.div(survived_count.sum(1), axis=0)\nwith plt.style.context('fivethirtyeight'):\n    survived_pct.plot.barh(stacked=True, figsize=(19, 6), alpha=0.9, grid=False, color=['#682F2F', '#F3AB60'])","eca0b500":"survived_count = pd.crosstab(eda_data['Fare'], eda_data['Survived'])\nsurvived_pct = survived_count.div(survived_count.sum(1), axis=0)\nwith plt.style.context('fivethirtyeight'):\n    survived_pct.plot.bar(stacked=True, alpha=0.9, figsize=(19, 6),\n                          grid=False, use_index=None, logy=False,\n                          rot=60, yticks=[], xticks=range(0, 251, 50),\n                          title='Surviver Fare Pattern', color=['#682F2F', '#F3AB60'])","47803251":"def trimming_ax(ax, N):\n    f_axs = ax.flat\n    for ax in f_axs[N:]:\n        ax.remove()\n    return f_axs[:N]\n\ndef cluster_bar_plot(data, product_list, cols=3, figsize=(19, 6)):\n    product_list.append('')\n    length = len(product_list)\n    product_list.remove('')\n    if length % 2 == 0:\n        rows = length \/\/ cols\n    else:\n        rows = length \/\/ cols + 1\n    with plt.style.context('fivethirtyeight'):\n        \n        ax = plt.figure(figsize=figsize, constrained_layout=True).subplots(rows, cols)\n        ax = trimming_ax(ax, length)\n        for i, product in enumerate(product_list):\n            cluster = data.query(\"Survived == {}\".format(i))\n            \n            sns.barplot(x=\"Survived\", y=product, data=data, palette='rocket', ax=ax[i])\n            ax[i].legend(labels=['{}'.format(product)], title='P', loc=2, bbox_to_anchor=(1,1))\n        \n            sns.boxenplot(x=\"Survived\", y=\"Fare\", data=data, palette='rocket', ax=ax[-1])\n            ax[-1].legend(labels=['Survived'], title='Survived_Number', loc=2, bbox_to_anchor=(1,1))","1fa73129":"product_List = ['Sex','Survived', 'Age', 'Fare', 'SibSp','Parch']\n\n\ncluster_bar_plot(eda_data, product_List, figsize=(19, 7))","9365f668":"def Survived_hist_plot(data, columns, cols=4, figsize=(10, 5)):\n    #cols = cols\n    rows = len(np.unique(data['Survived'])) \/\/ cols + 1\n    bins = np.round(np.log(len(data)) + 1).astype(int) # Sturgess Formula : k=log2N+1\n    ax = plt.figure(figsize=figsize, constrained_layout=True).subplots(rows, cols)\n    ax = trimming_ax(ax, len(np.unique(data['Survived'])))\n    with plt.style.context('fivethirtyeight'):\n        for i in np.unique(data['Survived']):\n            cluster = data.query(\"Survived == {}\".format(i))\n            # replace plot\n            sns.histplot(x=columns, data=cluster.reset_index(), bins=bins, ax=ax[i])\n            #sns.countplot(x='Age', data=cluster.reset_index(), ax=ax[i])\n            ax[i].legend(labels=['{}'.format(i)], title='Survived', loc=2, bbox_to_anchor=(1,1))","df322244":"Survived_hist_plot(eda_data, columns='Age', figsize=(19, 7))","ae0d6c8d":"Survived_hist_plot(eda_data, columns='Sex', figsize=(19, 7))","011036ea":"def density_plot(data):\n    density_per_col = [stats.gaussian_kde(col) for col in data.values.T]\n    x = np.linspace(np.min(data.values), np.max(data.values), 100)\n    \n    with plt.style.context('fivethirtyeight'):\n        fig, ax = plt.subplots(figsize=(18, 6))\n        for density in density_per_col:\n            ax.plot(x, density(x))\n        ax.set_xlabel('Value')\n        ax.set_ylabel('Density')\n        fig.legend(data, loc='right')","a4d670b4":"counts = data.copy()\ncounts.reset_index(inplace=True)\ncounts.drop(['Name', 'Cabin', 'Ticket', 'PassengerId', 'Sex', 'Embarked'], axis=1, inplace=True)\ncounts.fillna(0, inplace=True)\ncounts_nd = counts.values\nlog_counts = np.log(counts_nd + 1)\nlog_counts_pd = pd.DataFrame(log_counts, columns=counts.columns)","3939e262":"density_plot(log_counts_pd)","b305b468":"def quantile_norm(X):\n    quantile = np.mean(np.sort(X, axis=0), axis=1) # quantile calculus\n    rank = np.apply_along_axis(stats.rankdata, 0, X)\n    rank_indices = rank.astype(np.int) - 1\n    X_index = quantile[rank_indices]\n    return X_index\n\ndef quantile_log(X):\n    X_log = np.log(X + 1)\n    Xi_log = quantile_norm(X_log)\n    Xi_log_pd = pd.DataFrame(Xi_log, columns=X.columns)\n    return Xi_log_pd","b92d4584":"count_normalized = quantile_log(counts)","77eaa53d":"density_plot(count_normalized)","7b00eb86":"def most_variable_rows(data, *arg):\n    rowvar = np.var(data, axis=1)\n    sort_indices = np.argsort(rowvar)\n    variable_data = data[sort_indices, :]\n    return variable_data\n\nfrom scipy.cluster.hierarchy import linkage\n\ndef bicluster(data, linkage_method='average', distance_metric='correlation'):\n    y_rows = linkage(data, method=linkage_method, metric=distance_metric)\n    y_cols = linkage(data.T, method=linkage_method, metric=distance_metric)\n    return y_rows, y_cols","e60504d0":"from scipy.cluster.hierarchy import dendrogram, leaves_list\n\ndef clear_spines(axes):\n    for loc in ['left', 'right', 'top', 'bottom']:\n        axes.spines[loc].set_visible(False)\n    axes.set_xticks([])\n    axes.set_yticks([])\n\ndef plot_bicluster(data, row_linkage, col_linkage, row_nclusters=10, col_nclusters=5):\n    fig = plt.figure(figsize=(10, 10))\n    \n    ax1 = fig.add_axes([0.09, 0.1, 0.2, 0.6])\n    \n    threshold_r = (row_linkage[-row_nclusters, 2] +\n                   row_linkage[-row_nclusters+1, 2]) \/ 2\n    with plt.rc_context({'lines.linewidth': 0.75}):\n        dendrogram(row_linkage, orientation='left',\n                   color_threshold=threshold_r, ax=ax1)\n    clear_spines(ax1)\n    \n    ax2 = fig.add_axes([0.3, 0.71, 0.6, 0.2]) \n    threshold_c = (col_linkage[-col_nclusters, 2] +\n                   col_linkage[-col_nclusters+1, 2]) \/ 2\n    with plt.rc_context({'lines.linewidth': 0.75}):\n        dendrogram(col_linkage,\n                   color_threshold=threshold_c, ax=ax2)\n    clear_spines(ax2)\n    \n    ax = fig.add_axes([0.3, 0.1, 0.6, 0.6])\n    \n    idx_rows = leaves_list(row_linkage)\n    data = data[idx_rows, :]\n    idx_cols = leaves_list(col_linkage)\n    data = data[:, idx_cols]\n    \n    im = ax.imshow(data, aspect='auto', origin='lower', cmap='YlGnBu_r')\n    clear_spines(ax)\n    \n    ax.set_xlabel('Columns')\n    ax.set_ylabel('Index', labelpad=150)\n    axcolor = fig.add_axes([0.91, 0.1, 0.02, 0.6])\n    plt.colorbar(im, cax=axcolor)","26dd8728":"count_log = np.log(counts_nd + 1)\ncount_var = most_variable_rows(count_log)\n\nyr, yc = bicluster(count_var, linkage_method='ward', distance_metric='euclidean')\n\nplot_bicluster(count_var, yr, yc)","ff79184c":"data.isnull().sum(), main_test.reset_index().isnull().sum()","f55ec24b":"cluster_data['FamilySize'] = cluster_data['SibSp'] + cluster_data['Parch'] + 1\ncluster_data['IsAlone'] = np.where(cluster_data['FamilySize'] <= 1, 1, 0)\ncluster_data.loc[cluster_data['FamilySize'] > 0, 'travelled_alone'] = 'No'\ncluster_data.loc[cluster_data['FamilySize'] == 0, 'travelled_alone'] = 'Yes'\n\ncluster_data['Honorific'] = cluster_data.Name.str.split(',', -1,\n                                                        expand=True)[1].str.split('.', 1,\n                                                                                  expand=True)[0].str.strip().replace({'Mlle': 'Miss','Ms': 'Miss', 'Lady': 'Noble', 'Don': 'Noble',\n                                                                                                                       'Jonkheer': 'Noble', 'the Countess': 'Noble', 'Sir': 'Noble',\n                                                                                                                       'Countess': 'Noble',\n                                                                                                                       'Mme': 'Mrs', 'Capt': 'Soldier', 'Major': 'Soldier', 'Col': 'Soldier', \n                                                                                                                       'Rev': 'Mr', 'Dr': 'Mr', 'Dona': 'Noble', 'Master': 'Soldier'})\ncluster_data['FamilyName'] = cluster_data.Name.str.split(',', -1, expand=True)[0]\ncluster_data['FullName'] = cluster_data.Name.str.split(',', -1, expand=True)[1].str.split('.', 1, expand=True)[1].str.strip()\ncluster_data['FirstName'] = cluster_data.FullName.str.split(' ', 1, expand=True)[0].str.strip('(').str.strip(')')\ncluster_data['NameLength'] = cluster_data.FullName.apply(lambda x: len(x))\ncluster_data['Surname'] = cluster_data.Name.str.extract(r'([A-Za-z]+),', expand=False)\ncluster_data['TicketPrefix'] = cluster_data.Ticket.str.extract(r'(.*\\d)', expand=False)\ncluster_data['SurnameTicket'] = cluster_data['Surname'] + cluster_data['TicketPrefix']\ncluster_data['IsFamily'] = cluster_data.SurnameTicket.duplicated(keep=False).astype(int)\ncluster_data['Child'] = cluster_data.Age.map(lambda x: 1 if x <=16 else 0)\n\n\nbins = [0, 2, 12, 17, 60, np.inf]\nlabels = ['baby', 'child', 'teenager', 'adult', 'elderly']\nage_groups = pd.cut(cluster_data.Age, bins, labels=labels)\ncluster_data['AgeGroup'] = age_groups\n\n#Cont_Features = ['Age', 'Fare']\n#num_bins = 5\n#for feature in Cont_Features:\n#    bin_feature = feature + 'Bin'\n#    cluster_data[bin_feature] = pd.qcut(cluster_data[feature], num_bins)\n#    label = LabelEncoder()\n#    cluster_data[bin_feature] = label.fit_transform(cluster_data[bin_feature])\n\n\ncluster_data['Age*Class'] = cluster_data.Age * cluster_data.Pclass\n\n\nFamilyWithChild = cluster_data[(cluster_data.IsFamily == 1) & (cluster_data.Child == 1)]['SurnameTicket'].unique()\ncluster_data['FamilyId'] = 0\nfor ind, identifier in enumerate(FamilyWithChild):\n    cluster_data.loc[cluster_data.SurnameTicket == identifier, ['FamilyId']] = ind + 1\n\ncluster_data['FamilySurvival'] = 1\nSurvived_by_FamilyId = cluster_data.groupby('FamilyId').Survived.sum()\nfor i in range(1, len(FamilyWithChild)+1):\n    if Survived_by_FamilyId[i] >= 1:\n        cluster_data.loc[cluster_data.FamilyId == i, ['FamilySurvival']] = 2\n    elif Survived_by_FamilyId[i] == 0:\n        cluster_data.loc[cluster_data.FamilyId == i, ['FamilySurvival']] = 0\n\n\ncluster_data.drop('Name', axis=1, inplace=True)\ncabin_map = {'A': 1, 'B': 2, 'C': 3, 'D': 4, 'E': 5, 'F': 6, 'G': 7, 'T': 1, 'M': 8}\ncluster_data['Deck'] = cluster_data['Cabin'].str[0].fillna('M').replace(cabin_map)\ncluster_data['Ticket'] = cluster_data['Ticket'].str.split(' ').str.get(-1).str.get(0).str.replace('L', '2').astype(np.int64)\n\n\ncat_features = cluster_data.columns[~cluster_data.columns.isin(['Survived', 'Fare', 'FamilySize', 'Pclass',\n                                                                'PassengerId', 'Age', 'Ticket', 'Parch', 'Cabin',\n                                                                'Embarked'])]\ncluster_data = pd.get_dummies(cluster_data, columns=cat_features)\ndummie_data = cluster_data.reset_index()\n\ndummie = pd.get_dummies(dummie_data['Cabin'])\ndata_dummie = dummie_data.drop(['Cabin'], axis=1).join(pd.DataFrame(dummie.sum(axis=1), columns=['Cabin']))\ndata_rep = data_dummie.fillna({'Age': data_dummie['Age'].mean(), 'Embarked': data_dummie['Embarked'].fillna(method='ffill'), 'Fare': data_dummie['Fare'].mean()})\ndata_rep['Fare'] = data_rep['Fare'].round().astype(np.int64)\ndata_rep['Age'] = data_rep['Age'].astype(np.int64)\ndata_rep['Fare'].where((np.abs(data_rep['Fare']) < data_rep['Fare'].quantile(0.997, )), 500, inplace=True) # 300\n\ndata_rep_cluster = data_rep.drop('Survived', axis=1)\ndata_rep.drop(['index', 'PassengerId'], axis=1,  inplace=True)","bffb5f3f":"train = data_rep.iloc[cluster_data_c.index]\ntest = data_rep.iloc[cluster_main_test.index+cluster_data_c.shape[0]].drop(columns=['Survived'])\nX = train.drop(columns='Survived', axis=1) # .to_numpy()\ny = train['Survived'] # .to_numpy()\n\ndata_labels = y.to_numpy()","035485f3":"data_num = X.drop([\"Embarked\"], axis=1)\nnumber_attribs = list(data_num)","e55c68cf":"categorie_attribs = [\"Embarked\"] \n\nnumber_pipeline = Pipeline([\n    ('std_scaler', StandardScaler()),\n])\n\ncluster_test_pipeline = ColumnTransformer([\n    (\"number\", number_pipeline, number_attribs),\n    (\"categorie\", OneHotEncoder(), categorie_attribs),\n])","ddc58310":"cluster_data_prepared = cluster_test_pipeline.fit_transform(X)\ncluster_main_test = cluster_test_pipeline.transform(test)","e7a0b37e":"X_train, X_val, y_train, y_val = train_test_split(cluster_data_prepared, data_labels, test_size=0.25, stratify=data_labels)","f65134f0":"#model = RandomForestClassifier()\n#model.fit(X_train, y_train)","f43219a7":"#model.feature_importances_.shape","cbdd8905":"#model = CatBoostClassifier(verbose=False)","357b8214":"#X_c = X[['Age', 'Parch', 'Ticket', 'Fare', 'FamilySize']]\n#y_c = y","5c7f86f4":"#model.fit(X_c, y_c)","0d4cb5cf":"#importance = pd.DataFrame({'feature': X_c.columns, 'importance': model.feature_importances_})","563f1062":"#importance.sort_values('importance', ascending=False).set_index('feature').plot(kind='barh')","125a0f50":"pca_e = PCA().fit(cluster_data_prepared)\ncumsum = np.cumsum(pca_e.explained_variance_ratio_)\nd = np.argmax(cumsum >= 0.95) + 1","8948b377":"plt.figure(figsize=(6,4))\nplt.plot(cumsum, linewidth=3)\nplt.axis([400, 871, 0.6, 1])\nplt.xlabel(\"Dimensions\")\nplt.ylabel(\"Explained Variance\")\nplt.plot([d, d], [0, 0.95], \"k:\")\nplt.plot([0, d], [0.95, 0.95], \"k:\")\nplt.plot(d, 0.95, \"ko\")\nplt.grid(True)","806b3e0f":"pca = PCA(n_components=0.95)\ncluster_data_prepared_pca = pca.fit_transform(cluster_data_prepared)\ncluster_main_test_pca = pca.transform(cluster_main_test)","ee8dfd80":"cluster_data_prepared_pca = pd.DataFrame(cluster_data_prepared_pca)\ncluster_main_test_pca = pd.DataFrame(cluster_main_test_pca)","3ca740dd":"model = KMeans(init=\"k-means++\", n_init=10)\nvisualizer = KElbowVisualizer(model, k=(1, 50)) #100\nvisualizer.fit(cluster_data_prepared_pca)\nvisualizer.show();","2226a382":"#spect_1_cluster_data = SpectralClustering(n_clusters=visualizer.elbow_value_).fit_predict(cluster_data_prepared_pca)# visualizer.elbow_value_\n#spect_1_cluster_test = SpectralClustering(n_clusters=visualizer.elbow_value_).fit_predict(cluster_main_test_pca)# visualizer.elbow_value_","c899b233":"spect_cluster_data = KMeans(n_clusters=visualizer.elbow_value_).fit_predict(cluster_data_prepared_pca) # k=36\nspect_cluster_test = KMeans(n_clusters=visualizer.elbow_value_).fit_predict(cluster_main_test_pca) # k=36","f00d757d":"X['Cluster'] = spect_cluster_data","1fb40bb9":"X.iloc[:, :9].head(10).style.background_gradient(cmap='mako_r', text_color_threshold=0.02)","b1a45118":"test['Cluster'] = spect_cluster_test","6b9eaf34":"test.iloc[:, :9].head(10).style.background_gradient(cmap='mako_r', text_color_threshold=0.02)","504b1f53":"#X['cut_bin'] = pd.cut(X[\"Cluster\"], \n#                      bins=np.round(np.log(len(X['Cluster']))).astype(int),  # Sturgess Formula : k=log2N+1 \n#                      labels=[1, 2, 3, 4, 5, 6, 7], precision=2) # 0~7labels=[1, 2, 3, 4, 5, 6, 7]","564d17fe":"#test['cut_bin'] = pd.cut(test[\"Cluster\"], \n#                      bins=np.round(np.log(len(X['Cluster']))).astype(int),  # Sturgess Formula : k=log2N+1 \n#                      labels=[1, 2, 3, 4, 5, 6, 7], precision=2) # 0~7labels=[1, 2, 3, 4, 5, 6, 7]","0b625bfd":"data_prepared = cluster_test_pipeline.fit_transform(X)","3cb3993b":"cluster_main_test = cluster_test_pipeline.transform(test)","04697b51":"X_train, X_val, y_train, y_val = train_test_split(data_prepared, data_labels, test_size=0.25, stratify=data_labels)","0f0761c0":"#gb_model = GradientBoostingClassifier()\n#gb_param_grid = {'learning_rate':[0.1, 0.01, 0.001], 'max_depth':[5, 10], 'n_estimators':[10, 100, 200, 300]}\n#gb_model.get_params().keys()","9ce09faa":"#gb_s_model = GridSearchCV(gb_model, gb_param_grid, cv=10, scoring='accuracy')\n#gb_s_model.fit(X_train, y_train)","a251b75f":"#gb_s_model.best_params_\n#{'learning_rate': 0.1, 'max_depth': 5, 'n_estimators': 100} samples=10000\ngb_model = GradientBoostingClassifier(learning_rate=0.1, max_depth=5, n_estimators=100) # warm_start=True\ngb_model.fit(X_train, y_train)","f0ccffc3":"#gb = gb_s_model.best_estimator_\ny_pred_gb = gb_model.predict(X_val)","70a7db33":"print('Precision : {} \/ Recall : {}'.format(precision_score(y_val, y_pred_gb), recall_score(y_val, y_pred_gb)))\nprint(classification_report(y_val, y_pred_gb))\ndisp = ConfusionMatrixDisplay(confusion_matrix=confusion_matrix(y_val, y_pred_gb), display_labels=gb_model.classes_)\ndisp.plot(cmap='Blues');","968c1fc5":"main_pred_gb = gb_model.predict(cluster_main_test)","463ac183":"#pd.DataFrame({'PassengerId': np.arange(892, 1310, 1), 'Survived': main_pred_gb.astype(int)}).to_csv('submission_test.csv', index=0) # 0.80143","c37605a7":"kfold_1 =StratifiedKFold(n_splits=5,shuffle=True,random_state=42)","a88fd5e5":"y_score = cross_val_predict(gb_model, X_train, y_train, cv=kfold_1, method='decision_function')","6941c7fc":"def plot_precision_recall_vs_threshold(precisions, recalls, thresholds):\n    plt.plot(thresholds, precision[:-1], \"b--\", label=\"Precision\") # [:-1]\n    plt.plot(thresholds, recalls[:-1], \"g-\", label=\"Recall\") # [:-1]\n    plt.legend()","21c6a751":"precision, recall, thresholds = precision_recall_curve(y_train, y_score)","2598f9c3":"plot_precision_recall_vs_threshold(precision, recall, thresholds)","d68c555c":"threshold_90_precision = thresholds[np.argmax(precision >= 0.80)] # 0.85 # 0.80\nthreshold_90_precision","b1549769":"y_train_pred_90 = (y_score >= threshold_90_precision)","83c9b8be":"y_train_pred_90.shape # y_train","c3836942":"gb_model.fit(X_train, y_train_pred_90)","235798fc":"y_pred_90_gb = gb_model.predict(X_val)","e821e039":"print('Precision : {} \/ Recall : {}'.format(precision_score(y_val, y_pred_90_gb), recall_score(y_val, y_pred_90_gb)))\nprint(classification_report(y_val, y_pred_90_gb))\ndisp = ConfusionMatrixDisplay(confusion_matrix=confusion_matrix(y_val, y_pred_90_gb), display_labels=gb_model.classes_)\ndisp.plot(cmap='Blues');","29d27fdb":"main_pred_90_gb = gb_model.predict(cluster_main_test)","51b652f7":"#pd.DataFrame({'PassengerId': np.arange(892, 1310, 1), 'Survived': main_pred_90_gb.astype(int)}).to_csv('submission_best.csv', index=0)","f0ad6cb4":"errors = [precision_score(y_val, y_pred)\n          for y_pred in gb_model.staged_predict(X_val)]","38ffea04":"bst_n_estimators = np.argmax(errors) + 1","6afbca12":"bst_n_estimators","36a7938d":"gb_best = GradientBoostingClassifier(learning_rate=0.1, max_depth=5, n_estimators=bst_n_estimators)","b04cf3b6":"gb_best.fit(X_train, y_train_pred_90)","5021aee7":"y_pred_90_gb_best = gb_model.predict(X_val)","f6260aff":"print('Precision : {} \/ Recall : {}'.format(precision_score(y_val, y_pred_90_gb_best), recall_score(y_val, y_pred_90_gb_best)))\nprint(classification_report(y_val, y_pred_90_gb_best))\ndisp = ConfusionMatrixDisplay(confusion_matrix=confusion_matrix(y_val, y_pred_90_gb_best), display_labels=gb_best.classes_)\ndisp.plot(cmap='Blues');","d630ccb9":"main_pred_90_gb_best = gb_best.predict(cluster_main_test)","11bf76c8":"#pd.DataFrame({'PassengerId': np.arange(892, 1310, 1),\n#              'Survived': pd.DataFrame(main_pred_90_gb_best).replace({False: 0, True :1}).to_numpy().T[0]}).to_csv('submission_01.csv', index=0)","0be61cb7":"param_rand = {'learning_rate': reciprocal(0.001, 1), \n              'max_depth': randint(low=3, high=10)}","b48e7ed5":"gb_best_rd = GradientBoostingClassifier(subsample=0.25, n_estimators=bst_n_estimators, warm_start=True)","65e1ee62":"rnd_search = RandomizedSearchCV(gb_best_rd, param_rand, n_iter=10, cv=kfold_1, scoring='f1')","16019cab":"rnd_search.fit(X_train, y_train_pred_90)","b792050d":"gb_best_p = GradientBoostingClassifier(learning_rate=0.12727932524008223, max_depth=3, subsample=0.25, n_estimators=bst_n_estimators, warm_start=True)","53a4cab1":"gb_best_p.fit(X_train, y_train_pred_90)","2a743633":"y_pred_90_gb_best_rnd = gb_best_p.predict(X_val)","3788c5d7":"print('Precision : {} \/ Recall : {}'.format(precision_score(y_val, y_pred_90_gb_best_rnd), recall_score(y_val, y_pred_90_gb_best_rnd)))\nprint(classification_report(y_val, y_pred_90_gb_best_rnd))\ndisp = ConfusionMatrixDisplay(confusion_matrix=confusion_matrix(y_val, y_pred_90_gb_best_rnd), display_labels=gb_best_p.classes_)\ndisp.plot(cmap='Blues');","fec748f3":"main_pred_90_gb_best_rnd = gb_best.predict(cluster_main_test)","a85319e9":"#pd.DataFrame({'PassengerId': np.arange(892, 1310, 1),\n#              'Survived': pd.DataFrame(main_pred_90_gb_best_rnd).replace({False: 0, True :1}).to_numpy().T[0]}).to_csv('submission_02.csv', index=0)","3b8c1d68":"precision_score(y_train, y_train_pred_90)","b7d7391e":"recall_score(y_train, y_train_pred_90)","8258111d":"fpr, tpr, thresholds_r = roc_curve(y_train_pred_90, y_score)","c9c41271":"def plot_roc_curve(fpr, tpr, label=None):\n    plt.plot(fpr, tpr, linewidth=2, label=label)\n    plt.plot([0, 1], [0, 1], 'k--')","95c5a858":"plot_roc_curve(fpr, tpr)","8848aba0":"roc_auc_score(y_train_pred_90, y_score)","1fd80031":"y_train_pred = cross_val_predict(gb_model, X_train, y_train_pred_90, cv=3)","5403756f":"cl_a, cl_b = 0, 1","015c28a9":"X_aa = X_train[(y_train == cl_a) & (y_train_pred == cl_a)]\nX_ab = X_train[(y_train == cl_a) & (y_train_pred == cl_b)]\nX_ba = X_train[(y_train == cl_b) & (y_train_pred == cl_a)]\nX_bb = X_train[(y_train == cl_b) & (y_train_pred == cl_b)]","76484ddf":"#ada_model = AdaBoostClassifier() # estimators=DecisionTreeClassifier(max_depth=1) : Default\n#ada_param_grid = {'learning_rate': [0.001, 0.01, 0.1, 1], 'n_estimators': [10, 100, 200, 300]}\n#ada_model.get_params().keys()","2b839dd2":"#ada_s_model = GridSearchCV(ada_model, ada_param_grid, cv=10, scoring='accuracy')\n#ada_s_model.fit(X_train, y_train)","f17eba6c":"#ada_s_model.best_params_\n# {'learning_rate': 1, 'n_estimators': 100} samples=10000\n\n#ada_model = AdaBoostClassifier(learning_rate=1, n_estimators=100) \n#ada_model.fit(X_train, y_train)\nada_model = AdaBoostClassifier(learning_rate=1, n_estimators=100) \nada_model.fit(X_train, y_train_pred_90)","9f466efd":"#ada = ada_s_model.best_estimator_\ny_pred_ada = ada_model.predict(X_val)","2a7aaec8":"print('Precision : {} \/ Recall : {}'.format(precision_score(y_val, y_pred_ada), recall_score(y_val, y_pred_ada)))\nprint(classification_report(y_val, y_pred_ada))\ndisp = ConfusionMatrixDisplay(confusion_matrix=confusion_matrix(y_val, y_pred_ada), display_labels=ada_model.classes_)\ndisp.plot(cmap='Blues');","828b7d80":"prediction_ada = ada_model.predict(cluster_main_test)","d3ebc417":"#pd.DataFrame({'PassengerId': np.arange(892, 1310, 1), 'Survived': prediction_ada.astype(int)}).to_csv('submission_Ada_01.csv', index=0)","0370c400":"#rand_model = RandomForestClassifier()\n#rnd_param_grid = {'n_estimators': [40, 50, 55], 'max_depth': [90, 100, 150], 'max_samples': [1200, 1500, 1600]}\n#rand_model.get_params().keys()","ebe89806":"#rnd_model = GridSearchCV(rand_model, rnd_param_grid, cv=10, scoring='accuracy')\n#rnd_model.fit(X_train, y_train)","fb5df231":"#rnd_model.best_params_\n#{'max_depth': 10, 'max_samples': 300, 'n_estimators': 100} sample=10000","1e50c163":"#rand_model = rnd_model.best_estimator_\n#rand_model = RandomForestClassifier(max_depth=90, max_samples=300, n_estimators=40)\n#rand_model.fit(X_train, y_train)\n#y_pred_rnd = rand_model.predict(X_val)\n\nrand_model = RandomForestClassifier(max_depth=90, max_samples=300, n_estimators=40)\nrand_model.fit(X_train, y_train_pred_90)\ny_pred_rnd = rand_model.predict(X_val)","3bb75771":"print('Precision : {} \/ Recall : {}'.format(precision_score(y_val, y_pred_rnd), recall_score(y_val, y_pred_rnd)))\nprint(classification_report(y_val, y_pred_rnd))\ndisp = ConfusionMatrixDisplay(confusion_matrix=confusion_matrix(y_val, y_pred_rnd), display_labels=rand_model.classes_)\ndisp.plot(cmap='Blues');","440da6e5":"prediction_rand = rand_model.predict(cluster_main_test)","b2290d71":"rand_model.fit(X_train, y_train_pred_90)","be72fc74":"y_pred_rnd_90 = rand_model.predict(X_val)","299907b0":"print('Precision : {} \/ Recall : {}'.format(precision_score(y_val, y_pred_rnd_90), recall_score(y_val, y_pred_rnd_90)))\nprint(classification_report(y_val, y_pred_rnd_90))\ndisp = ConfusionMatrixDisplay(confusion_matrix=confusion_matrix(y_val, y_pred_rnd_90), display_labels=rand_model.classes_)\ndisp.plot(cmap='Blues');","dc45a76f":"#pd.DataFrame({'PassengerId': np.arange(892, 1310, 1), 'Survived': prediction_rand.astype(int)}).to_csv('submission_rand_01.csv', index=0)","3e3f5fcf":"#ex_model = ExtraTreesClassifier()\n#ex_grid_param = {'n_estimators': [10, 90, 100, 110], 'max_depth': [8, 9, 11, 14, 15, 30], 'max_samples': [90, 100, 260, 270]}","a558f4b1":"#ext_model = GridSearchCV(ex_model, ex_grid_param, cv=10, scoring='accuracy')\n#ext_model.fit(X_train, y_train)","6922d756":"#ext_model.best_params_\n# {'max_depth': 14, 'max_samples': 270, 'n_estimators': 110}\n# {'max_depth': 30, 'max_samples': 270, 'n_estimators': 90} sample=10000\n# {'max_depth': 30, 'max_samples': 270, 'n_estimators': 110}","477e95d3":"#ext = ext_model.best_estimator_\n#ex_model = ExtraTreesClassifier(max_depth=30, max_samples=270, n_estimators=110)\n#ex_model.fit(X_train, y_train)\n#y_pred_ext = ex_model.predict(X_val)\n\nex_model = ExtraTreesClassifier(max_depth=30, max_samples=270, n_estimators=110)\nex_model.fit(X_train, y_train_pred_90)\ny_pred_ext = ex_model.predict(X_val)","e3a45853":"print('Precision : {} \/ Recall : {}'.format(precision_score(y_val, y_pred_ext), recall_score(y_val, y_pred_ext)))\nprint(classification_report(y_val, y_pred_ext))\ndisp = ConfusionMatrixDisplay(confusion_matrix=confusion_matrix(y_val, y_pred_ext), display_labels=ex_model.classes_)\ndisp.plot(cmap='Blues');","d59d8a00":"prediction_ex = ex_model.predict(cluster_main_test)","bc85a4c4":"#pd.DataFrame({'PassengerId': np.arange(892, 1310, 1), 'Survived': prediction_ex.astype(int)}).to_csv('submission_ext_01.csv', index=0)","63bc0fb1":"#svm_model=SVC(kernel='rbf', probability=True) # kernel='rbf', probability=True\n#tuned_param = {'gamma': [0.005,0.01,0.05,0.1,1],'C':[0.1,1,5,10]}","0a7d46a6":"#svc_model = GridSearchCV(svm_model, tuned_param, cv=10, scoring='accuracy')\n#svc_model.fit(X_train, y_train)","54d7c38d":"#svc_model.best_params_","71b5ce35":"#svc = svc_model.best_estimator_\n#svm_model=SVC(kernel='rbf', probability=True, C=5, gamma=1)\n#svm_model.fit(X_train, y_train)\n#y_pred = svm_model.predict(X_val)","640fa781":"#print('Precision : {} \/ Recall : {}'.format(precision_score(y_val, y_pred), recall_score(y_val, y_pred)))\n#print(classification_report(y_val, y_pred))\n#disp = ConfusionMatrixDisplay(confusion_matrix=confusion_matrix(y_val, y_pred), display_labels=svc.classes_)\n#disp.plot(cmap='Blues');","4f38ff9f":"#xgb_boost = XGBClassifier(use_label_encoder=False, eval_metric='auc')\n#xgb_boost.fit(X_train, y_train)\n#y_pred_xgb = xgb_boost.predict(X_val)\n\nxgb_boost = XGBClassifier(use_label_encoder=False, eval_metric='auc')\nxgb_boost.fit(X_train, y_train_pred_90)\ny_pred_xgb = xgb_boost.predict(X_val)","2aabd228":"print('Precision : {} \/ Recall : {}'.format(precision_score(y_val, y_pred_xgb), recall_score(y_val, y_pred_xgb)))\nprint(classification_report(y_val, y_pred_xgb))\ndisp = ConfusionMatrixDisplay(confusion_matrix=confusion_matrix(y_val, y_pred_xgb), display_labels=xgb_boost.classes_)\ndisp.plot(cmap='Blues');","b93ada1e":"prediction_xgb = xgb_boost.predict(cluster_main_test)","d91be6b0":"#pd.DataFrame({'PassengerId': np.arange(892, 1310, 1), 'Survived': prediction_xgb.astype(int)}).to_csv('submission_xgb_01.csv', index=0)","3d5514c2":"xgb_boost = XGBClassifier(use_label_encoder=False, eval_metric='auc', learning_rate=0.01, max_depth=3, n_estimators=200)\nxgb_boost.fit(X_train, y_train_pred_90)","7a989cb7":"prediction_xgb_test = xgb_boost.predict(cluster_main_test)","b7530b7e":"#pd.DataFrame({'PassengerId': np.arange(892, 1310, 1), 'Survived': prediction_xgb_test}).to_csv('submission_xgb_02.csv', index=0)","3f735b18":"rf = RandomForestClassifier()\nlogr = LogisticRegression()\nxgb = XGBClassifier(eval_metric='mlogloss')\ndtree= DecisionTreeClassifier(random_state = 0)\nex_model = ExtraTreesClassifier()\ngb_model = GradientBoostingClassifier()\nada_model = AdaBoostClassifier(learning_rate=1, n_estimators=100) \n\nknn = KNeighborsClassifier()\nsvc = SVC(probability=True)\nridge_c = RidgeClassifier()","36f5a321":"kfold =StratifiedKFold(n_splits=5,shuffle=True,random_state=42)","4a6299f2":"def score_model_class(model, params ,scoring = \"f1_macro\"):\n    \n    model = GridSearchCV(model, param_grid=params, scoring=scoring, cv=kfold)\n    \n    model.fit(X_train, y_train_pred_90) # y_train_pred_90\n    y_pred = model.predict(X_val)\n    \n    print (\"Model and params: \", model.best_estimator_, model.best_params_) \n    print(\"\\n\")\n    print(\"Train f1 score: \", model.best_score_)\n    print(\"test f1_score: \",f1_score(y_val, y_pred))\n    print(\"\\n\")\n    print(\"Test Report:\")\n    print(classification_report(y_val, y_pred))\n    return model","7ae6ea82":"ridge_params = {\"max_iter\": [120, 200,300], \"alpha\":[0.1,0.8, 1,1.5, 2,3]}\nlogr_params = {\"solver\":[\"liblinear\",\"saga\", \"lbfgs\", \"newton-cg\"],\n    \"penalty\": [\"l2\",\"l1\", \"elasticnet\", \"none\"],\n    \"C\": [0.01,0.5,1,3,4],\n    \"max_iter\": [4000]\n}\nxgb_params={'learning_rate': [0.05,0.01,0.1, 1], \n           # \"subsample\": [0.5, 0.7, 1.0],\n            'max_depth': [2, 3, 5, 7],\n            #\"gamma\" : [3,4,5,6] ,             \n            'n_estimators': [150, 200, 300, 500]\n           }\nforest_params = {     \n    \"max_depth\" : [10,20,30,40],       \n    \"n_estimators\" : [300,350,400,410,420,440],\n    \"max_features\" :[\"auto\", \"log2\", None]\n}\ntree_params = { \"max_depth\" : [8,10,20,30],       \n    \"max_features\" :[\"auto\", \"log2\", None]}\n\nknn_params = {\"n_neighbors\" : [2,3,5] , \"metric\" :[\"euclidean\", \"manhattan\", \"minkowski\"], \"weights\" :[\"uniform\", \"distance\"]}\nsvc_params = {\"kernel\" : [\"linear\", \"poly\", \"rbf\", \"sigmoid\"], \"C\" : [ 0.001, 0.1, 1, 2, 3], \"gamma\":[\"scale\", \"auto\"]}","633d4a6d":"ex_m = score_model_class(ex_model, {'max_depth': [30], 'max_samples': [270], 'n_estimators': [110]})","669db564":"ada_m = score_model_class(ada_model, {'learning_rate': [1], 'n_estimators': [100]}) ","da58776b":"#ridge_m = score_model_class (ridge_c, ridge_params)\nridge_m = score_model_class(ridge_c, {'alpha': [1.2, 1.5, 2], 'max_iter': [2]})","6236dff6":"#logr_m = score_model_class(logr, logr_params)\nex_m = score_model_class(ex_model, {'max_depth' : [30], 'max_samples' : [270], 'n_estimators': [110]})","a9092d06":"#rf_m =random_forest = score_model_class(rf, forest_params)\nrf_m = score_model_class(rf, {'max_depth': [90], 'max_samples': [300], 'n_estimators': [100]})","6c3c2bc7":"#dtree_m = score_model_class(dtree, tree_params)\ndtree_m = score_model_class(dtree, {'max_depth': [50], 'max_features': [60]})","c76c62c0":"#xgb_m = score_model_class(xgb, xgb_params)\nxgb_m = score_model_class(xgb, {'learning_rate': [0.01], 'max_depth': [3], 'n_estimators': [200]})","cdf6c1fb":"#knn_m = score_model_class(knn, knn_params)\nknn_m = score_model_class(knn, {'metric': ['manhattan'], 'n_neighbors': [5], 'weights': ['distance']})","2b2b2643":"#svc_m = score_model_class(svc, svc_params)\nsvc_m = score_model_class(svc, {'C': [2], 'gamma': ['scale'], 'kernel': ['sigmoid']})","81015c34":"gb_m = score_model_class(gb_model, {'learning_rate': [0.1], 'max_depth': [5], 'n_estimators': [100]})","9e109570":"vc = VotingClassifier([#(\"knn_m\", knn_m), \n                       #(\"svc_m\", svc_m),\n                       (\"xgb_m\",xgb_m),\n                       #(\"ridge_m\", ridge_m),\n                       #(\"dtree_m\", dtree_m),\n                       (\"ex_m\", ex_m),\n                       (\"rf_m\", rf_m), \n                       (\"gb_m\", gb_m), (\"ada_m\", ada_m)],\n                      voting = \"soft\")# hard\n\nvc.fit(X_train,y_train)","c6b38a3e":"print(\"training: \", vc.score(X_train,y_train))\nprint(classification_report(y_val,vc.predict(X_val)))","28b88638":"y_sub = vc.predict(cluster_main_test)\nsub = pd.DataFrame({'PassengerId': test.index, 'Survived': y_sub})\nsub[\"Survived\"] = sub[\"Survived\"].astype(int)","7c2d0054":"#pd.DataFrame({'PassengerId': np.arange(892, 1310, 1), 'Survived': y_sub.astype(int)}).to_csv('submission_VT_01.csv', index=0)","114b12c9":"### **AdaBoost**","57afe334":"<p style=\"background-color:#000000;font-family:Georgia;color:#FFFFFF;font-size:200%;text-align:center;border-radius:10px 10px;\">Data Splitting<\/p>","29b2fd74":"<p style= \"background-color:#000000;font-family:Georgia;color:#FFFFFF;font-size:300%;text-align:center;border-radius:10px 10px;border-style:solid;border-width:3px;border-color:#000000;\"><b>Titanic Data Science<\/b><\/p>\n\n## Please give me an UPVOTE if you can. Your UPVOTE will be a great encouragement to me\n\n- The score is the result of combining multiple pipelines in the following code. We have removed some of the pipelines in the following code because we think it is not good for learning to put the score answers as they are.","9f221406":"### ExtraTreeClassifier","a275e831":">The PCA (dimensionality reduction) described above may have removed features that may have been necessary, but by clustering the data with a lower order and adding them as features, feature clustering is performed so that the model can recognize patterns better.\n\n- In the following, we use the automated ElbowScore, but if you want to create your own, you can implement InertiaScore or SilhouetteScore.","32738210":"<p style=\"background-color:#000000;font-family:Georgia;color:#FFFFFF;font-size:300%;text-align:center;border-radius:10px 10px;\">Final Transform<\/p>","d998b42b":"-----\n<p style=\"background-color:#000000;font-family:Georgia;color:#FFFFFF;font-size:300%;text-align:center;border-radius:10px 10px;\">Model<\/p>\n\n<p style=\"background-color:#000000;font-family:Georgia;color:#FFFFFF;font-size:200%;text-align:center;border-radius:10px 10px;\">GridSearch RandomizedSearch<\/p>","5f017321":"<p style=\"background-color:#000000;font-family:Georgia;color:#FFFFFF;font-size:300%;text-align:center;border-radius:10px 10px;\">PCA<\/p>","86fa6ed8":"----------\n## Feature Importance Sample","6b3276de":"### VotingClassifier","5309149c":"<p style=\"background-color:#000000;font-family:Georgia;color:#FFFFFF;font-size:150%;text-align:center;border-radius:10px 10px;\">Data Science Workflow<\/p>\n\n# WorkFlow\n\n1. Understand the framework and big picture of the problem.\n2. Analyze the data to develop a personal understanding.\n3. Prepare data to make it easier for machine learning algorithms to find patterns in the data.\n4. Try different models and narrow it down to the best few.\n5. Fine-tune the models, use them as an ensemble, and combine them into a solution.\n6. Present the solution.","00f00ec9":"# Model\n- A grid search is used to narrow down the rough range, and a random search is used to further understand the detailed values and obtain the hyperparameters of the model.","fa69b55e":"### SVM","17add185":"<p style=\"background-color:#000000;font-family:Georgia;color:#FFFFFF;font-size:150%;text-align:center;border-radius:10px 10px;\">DATA Concatenation<\/p>","60c2d856":"<p style=\"background-color:#000000;font-family:Georgia;color:#FFFFFF;font-size:300%;text-align:center;border-radius:10px 10px;\">Feature Clustering<\/p>","152763ab":"- Thank you for Reading. \n- Please give me an UPVOTE if you can. Your UPVOTE will be a great encouragement to me","647680a6":"<p style=\"background-color:#000000;font-family:Georgia;color:#FFFFFF;font-size:200%;text-align:center;border-radius:10px 10px;\">Other Models<\/p>","cf0136aa":"### XGBoost","9793e4cf":"## Train & Test\n\n>Divided into Train set used for Model training and data to make predictions.","d2af5ab0":"### RandomForestClassifier","8d70614f":"<p style=\"background-color:#000000;font-family:Georgia;color:#FFFFFF;font-size:300%;text-align:center;border-radius:10px 10px;\">Other Data Plot<\/p>\n\n#### \u30fbData Plot & Normalization\n#### \u30fbDendrogram & HeatMap","dc44a402":">Merge the pre-divided data sets. This operation makes it possible to make the same changes during data conversion.","3d85d89e":"# PCA\n>Dimensionality reduction is performed for the specified variance by PCA because of the large number of features. This will automate the mechanical manipulation of factor contributions that can maintain the variance.\n>Dimensionality reduction is not an optimal solution because it may remove features that are necessary for prediction. This operation has an experimental component only.","4bb1fb9a":"<p style=\"background-color:#000000;font-family:Georgia;color:#FFFFFF;font-size:200%;text-align:center;border-radius:10px 10px;\">early stopping<\/p>","1750f6d6":"<p style=\"background-color:#000000;font-family:Georgia;color:#FFFFFF;font-size:300%;text-align:center;border-radius:10px 10px;\">Pre-Processing & Feature Enginiering<\/p>","3de2461d":"- One way to regularize a model\n- In stochastic gradient descent and mini-batch gradient descent methods, the curve is not as smooth as in batch gradient descent, and there is a risk of being caught in a local minimum. Therefore, if the verification error keeps rising above the minimum for a while, we can construct a syntax to roll back to the last minimum.\n- Early termination can also be used in boosting algorithms to find the optimal number of decision trees.","a8bf5cb2":"# Pre-Processing & Feature Enginiering\n- All possible features\n- Pipeline \n1. **Data cleaning**\n    - Fix or remove outliers\n    - Fill missing values (0, mean, median)\n3. **Feature engineering**\n    - Discretization of continuous value features\n    - Decomposition of features (categorical)\n    - Add transformations that are expected to be effective on features (log(x), sqrt(x), x**2)\n    - Aggregate the features to create new features\n4. **Feature scaling**\n    - Standardization and normalization of features","ce6dfb00":"# EDA\n\n1. Make a copy of the data for observation, or reduce it to the required size if the data is large.\n2. examine the attributes of the data and their characteristics\n    - Missing values\n    - Categorical\/textual\/integer\/floating point numbers\n    - Noise presence and type (stochastic, outlier, rounding error)\n    - Type of distribution (Gaussian, Uniform, Logarithmic)\n3. visualize the data\n4. examine correlation of features\n5. Identify the transformation to be applied","9e26998a":">The following feature clusters can be assigned to the data after processing. It can also be done experimentally.\n\n>The following data is assigned to the data assuming PCA and converted again by Pipeline.","4a15df43":"-----\n<p style=\"background-color:#000000;font-family:Georgia;color:#FFFFFF;font-size:200%;text-align:center;border-radius:10px 10px;\">Best Score Model<\/p>\n\n### **GradientBoosting** ","255827d3":"<p style=\"background-color:#000000;font-family:Georgia;color:#FFFFFF;font-size:300%;text-align:center;border-radius:10px 10px;\">EDA<\/p>","f6dfc045":"<p style=\"background-color:#000000;font-family:Georgia;color:#FFFFFF;font-size:150%;text-align:center;border-radius:10px 10px;\">DATA Observation<\/p>"}}