{"cell_type":{"d7f97879":"code","a6a592de":"code","23ca8442":"code","1f135c9c":"code","acf98e47":"code","7856ddcf":"code","5b8a432f":"code","117b4f5f":"code","e825cda3":"code","cd61f8a1":"markdown"},"source":{"d7f97879":"import torch\nimport torch.nn as nn\nfrom math import ceil","a6a592de":"base_model = [\n    #expansion, channels, repeats, stride, kernel_size\n    [6, 16, 1, 1, 3],\n    [6, 24, 2, 2, 3],\n    [6, 40, 2, 2, 5],\n    [6, 80, 3, 2, 3],\n    [6, 112, 3, 1, 5],\n    [6, 192, 4, 2, 5],\n    [6, 320, 1, 1, 3]\n]","23ca8442":"phi_values = {\n    # tuple of: (phi_value, resolution, drop_rate)\n    \"b0\": (0, 224, 0.2),  # alpha, beta, gamma, depth = alpha ** phi\n    \"b1\": (0.5, 240, 0.2),\n    \"b2\": (1, 260, 0.3),\n    \"b3\": (2, 300, 0.3),\n    \"b4\": (3, 380, 0.4),\n    \"b5\": (4, 456, 0.4),\n    \"b6\": (5, 528, 0.5),\n    \"b7\": (6, 600, 0.5),\n}\n","1f135c9c":"class CNNBlock(nn.Module):\n    def __init__(self, in_channels, out_channels, kernel_size, stride,padding, groups=1):\n        super(CNNBlock, self).__init__()\n        self.cnn1 = nn.Conv2d(in_channels=in_channels, out_channels=out_channels, stride=stride, padding=padding, kernel_size=kernel_size, groups=groups)\n\n        # if we set groups to in_chanels we would be doing a 3d convolutions\n        \n        self.bn = nn.BatchNorm2d(out_channels)\n        self.silu = nn.SiLU()\n#         self.fc = nn.Linear(1024, num_classes)\n    \n    def forward(self, x):\n        return self.silu(self.bn(self.cnn1(x)))","acf98e47":"class SqueezeExcitation(nn.Module):\n    def __init__(self, in_channels, reduced_dim):\n        super(SqueezeExcitation, self).__init__()\n        self.squeeze = nn.Sequential(\n            nn.AdaptiveAvgPool2d(1), # C x H x W -> C x 1 x 1\n            nn.Conv2d(in_channels, reduced_dim, 1),\n            nn.SiLU(),\n            nn.Conv2d(reduced_dim, in_channels, 1),\n            nn.Sigmoid(),\n        )\n    \n    def forward(self, x):\n        return x * self.squeeze(x)\n        ","7856ddcf":"class InvertedResidualBlock(nn.Module):\n    def __init__(\n            self,\n            in_channels,\n            out_channels,\n            kernel_size,\n            stride,\n            padding,\n            expand_ratio,\n            reduction=4, # squeeze excitation\n            survival_prob=0.8, # for stochastic depth\n    ):\n        super(InvertedResidualBlock, self).__init__()\n        self.survival_prob = 0.8\n        self.use_residual = in_channels == out_channels and stride == 1\n        hidden_dim = in_channels * expand_ratio\n        self.expand = in_channels != hidden_dim\n        reduced_dim = int(in_channels \/ reduction)\n\n        if self.expand:\n            self.expand_conv = CNNBlock(\n                in_channels, hidden_dim, kernel_size=3, stride=1, padding=1,\n            )\n\n        self.conv = nn.Sequential(\n            CNNBlock(\n                hidden_dim, hidden_dim, kernel_size, stride, padding, groups=hidden_dim,\n            ),\n            SqueezeExcitation(hidden_dim, reduced_dim),\n            nn.Conv2d(hidden_dim, out_channels, 1, bias=False),\n            nn.BatchNorm2d(out_channels),\n        )\n\n    def stochastic_depth(self, x):\n        if not self.training:\n            return x\n\n        binary_tensor = torch.rand(x.shape[0], 1, 1, 1, device=x.device) < self.survival_prob\n        return torch.div(x, self.survival_prob) * binary_tensor\n\n    def forward(self, inputs):\n        x = self.expand_conv(inputs) if self.expand else inputs\n\n        if self.use_residual:\n            return self.stochastic_depth(self.conv(x)) + inputs\n        else:\n            return self.conv(x)","5b8a432f":"class EfficientNet(nn.Module):\n    def __init__(self, version, num_classes):\n        super(EfficientNet, self).__init__()\n        width_factor, depth_factor, dropout_rate = self.calculate_factors(version)\n        last_channels = ceil(1280 * width_factor)\n        self.pool = nn.AdaptiveAvgPool2d(1)\n        self.features = self.create_features(width_factor, depth_factor, last_channels)\n        self.classifier = nn.Sequential(\n            nn.Dropout(dropout_rate),\n            nn.Linear(last_channels, num_classes),\n        )\n\n    def calculate_factors(self, version, alpha=1.2, beta=1.1):\n        phi, res, drop_rate = phi_values[version]\n        depth_factor = alpha ** phi\n        width_factor = beta ** phi\n        return width_factor, depth_factor, drop_rate\n\n    def create_features(self, width_factor, depth_factor, last_channels):\n        channels = int(32 * width_factor)\n        features = [CNNBlock(3, channels, 3, stride=2, padding=1)]\n        in_channels = channels\n\n        for expand_ratio, channels, repeats, stride, kernel_size in base_model:\n            out_channels = 4*ceil(int(channels*width_factor) \/ 4)\n            layers_repeats = ceil(repeats * depth_factor)\n\n            for layer in range(layers_repeats):\n                features.append(\n                    InvertedResidualBlock(\n                        in_channels,\n                        out_channels,\n                        expand_ratio=expand_ratio,\n                        stride = stride if layer == 0 else 1,\n                        kernel_size=kernel_size,\n                        padding=kernel_size\/\/2, # if k=1:pad=0, k=3:pad=1, k=5:pad=2\n                    )\n                )\n                in_channels = out_channels\n\n        features.append(\n            CNNBlock(in_channels, last_channels, kernel_size=1, stride=1, padding=0)\n        )\n\n        return nn.Sequential(*features)\n\n    def forward(self, x):\n        x = self.pool(self.features(x))\n        return self.classifier(x.view(x.shape[0], -1))","117b4f5f":"def test():\n    device = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n    version = \"b0\"\n    phi, res, drop_rate = phi_values[version]\n    num_examples, num_classes = 4, 10\n    x = torch.randn((num_examples, 3, res, res)).to(device)\n    model = EfficientNet(\n        version=version,\n        num_classes=num_classes,\n    ).to(device)\n\n    print(model(x).shape) # (num_examples, num_classes)","e825cda3":"test()","cd61f8a1":"# Efficient net model:\n\n![](https:\/\/learnopencv.com\/wp-content\/uploads\/2019\/06\/EfficientNet-B0-architecture-1024x511.png)"}}