{"cell_type":{"cc7a2b53":"code","b1fa92d1":"code","27cc24c3":"code","fb74bb8b":"code","28fd03ef":"code","a523a973":"code","0ac223ee":"code","74e0a580":"code","79e27b58":"code","b1474359":"code","151bb2ad":"code","f78730e5":"code","eaade8b1":"code","7262c33a":"code","4c7f6fa0":"code","009f8180":"code","f6fcdb63":"code","814da529":"markdown","15aed947":"markdown","adcb6623":"markdown","d8239380":"markdown","673f24e0":"markdown","9020baf7":"markdown","9c370836":"markdown"},"source":{"cc7a2b53":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","b1fa92d1":"from tensorflow.python.keras.applications import ResNet50\nfrom tensorflow.python.keras.models import Sequential\nfrom tensorflow.python.keras.layers import Dense, Flatten, GlobalAveragePooling2D, Activation, Flatten, Dropout, BatchNormalization\n\nimport h5py","27cc24c3":"traindf=pd.read_csv('..\/input\/dog-breed-identification\/labels.csv')\ntestdf=pd.read_csv('..\/input\/dog-breed-identification\/sample_submission.csv')","fb74bb8b":"\n\ntraindf.isnull().values.any()\n\n","28fd03ef":"import matplotlib.pyplot as plt\nplt.figure(figsize=(13, 6))\ntraindf['breed'].value_counts().plot(kind='bar')\nplt.show()","a523a973":"def class_percentages(labels):\n    class_map={}\n    for i in labels:\n        if str(i) not in class_map:\n            class_map[str(i)]=1\n        else:\n            class_map[str(i)]+=1\n    #     print(class_map)\n    return class_map\n\np=class_percentages(traindf.breed.values)\n# print(p)\n# for i in p.items():\n#     print(i)\n\nprint(\"Class with maximum images-\"+str(max(p, key=p.get))+\"  \"+str(p[max(p, key=p.get)]))\nprint(\"Class with maximum images-\"+str(min(p,key=p.get)) +\"  \"+str(p[min(p, key=p.get)]))\n\n","0ac223ee":"traindf.head(10)","74e0a580":"num_classes = 120\nresnet_weights_path = '..\/input\/resnet50\/resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5'\n\nmy_new_model = Sequential()\nmy_new_model.add(ResNet50(include_top=False, pooling='avg', weights=resnet_weights_path))\nmy_new_model.add(Dense(512))\nmy_new_model.add(Activation('relu'))\nmy_new_model.add(Dropout(0.5))\nmy_new_model.add(Dense(num_classes, activation='softmax'))\n\n# Say not to train first layer (ResNet) model. It is already trained\nmy_new_model.layers[0].trainable = False\n\nmy_new_model.compile(optimizer='sgd', loss='categorical_crossentropy', metrics=['accuracy'])\n\n","79e27b58":"from tensorflow.python.keras.applications.resnet50 import preprocess_input\nfrom tensorflow.python.keras.preprocessing.image import ImageDataGenerator\n\nimage_size = 224\ndatagen = ImageDataGenerator(preprocessing_function=preprocess_input, \n                             rescale=1.\/255.,\n                             horizontal_flip=True,\n                             width_shift_range = 0.2,\n                             height_shift_range = 0.2,\n                             validation_split=0.2)","b1474359":"train_generator=datagen.flow_from_dataframe(\n                        dataframe=traindf,\n                        directory=\"..\/input\/dog-breed-identification\/train\/\",\n                        x_col=\"id\",\n                        y_col=\"breed\",\n                        has_ext=False,\n                        subset=\"training\",\n                        batch_size=32,\n                        seed=50,\n                        shuffle=True,\n                        class_mode=\"categorical\",\n                        target_size=(image_size, image_size))","151bb2ad":"valid_generator=datagen.flow_from_dataframe(\n                        dataframe=traindf,\n                        directory=\"..\/input\/dog-breed-identification\/train\/\",\n                        x_col=\"id\",\n                        y_col=\"breed\",\n                        has_ext=False,\n                        subset=\"validation\",\n                        batch_size=1,\n                        seed=42,\n                        shuffle=True,\n                        class_mode=\"categorical\",\n                        target_size=(image_size, image_size))","f78730e5":"test_datagen=ImageDataGenerator(preprocessing_function=preprocess_input,rescale=1.\/255.)\n\ntest_generator=test_datagen.flow_from_dataframe(\n                            dataframe=testdf,\n                            directory=\"..\/input\/dog-breed-identification\/test\/\",\n                            x_col=\"id\",\n                            y_col=None,\n                            has_ext=False,\n                            batch_size=1,\n                            seed=42,\n                            shuffle=False,\n                            class_mode=None,\n                            target_size=(image_size, image_size))\n\n","eaade8b1":"STEP_SIZE_TRAIN=train_generator.n\nSTEP_SIZE_VALID=valid_generator.n\n\nprint(STEP_SIZE_TRAIN)\nprint(STEP_SIZE_VALID)\n\nmy_new_model.fit_generator(generator=train_generator,\n                    steps_per_epoch=STEP_SIZE_TRAIN,\n                    validation_data=valid_generator,\n                    validation_steps=STEP_SIZE_VALID,\n                    epochs=3\n)","7262c33a":"\nmy_new_model.evaluate_generator(generator=valid_generator)\n","4c7f6fa0":"test_generator.reset()\npred=my_new_model.predict_generator(test_generator,verbose=1)\n","009f8180":"labels = (train_generator.class_indices)\nlabels = list(labels.keys())\ndf = pd.DataFrame(data=pred,\n                 columns=labels)\n\ncolumns = list(df)\ncolumns.sort()\ndf = df.reindex(columns=columns)\n\nfilenames = testdf[\"id\"]\ndf[\"id\"]  = filenames\n\ncols = df.columns.tolist()\ncols = cols[-1:] + cols[:-1]\ndf = df[cols]\ndf.head(5)\n","f6fcdb63":"df.to_csv(\"submission.csv\",index=False)","814da529":"## Test Data Preperation","15aed947":"## Is there a problem of Class Imbalance ?","adcb6623":"\n## Saving Test Data Output to 'submission.csv'","d8239380":"## Clearly , there is some amount of class imbalance ,\n## as biggest class contains almost double of smallest class","673f24e0":"## Is there any missing class:","9020baf7":"\n## My Model using extracted features from ResNet Pretrained\n\n","9c370836":"## Data Preperation"}}