{"cell_type":{"359d2dbb":"code","99fe9327":"code","5fa38d09":"code","456fcee8":"code","3611bd2f":"code","26cfdc59":"code","28b4bfcf":"code","8fd14022":"code","7de83de1":"code","47a12b95":"code","0c3dab19":"code","e2c9a457":"code","fc6d7bef":"code","326e6f1d":"code","d48ca7f2":"code","7138c8b9":"code","43a34df1":"code","0c5dd94e":"code","af461631":"code","15e730a2":"code","49854f36":"code","7904de59":"code","afe912b5":"code","22a2bbad":"code","9070f48b":"code","0032b2ae":"code","e467a904":"code","42318ee0":"code","90e57e00":"code","d9602a6b":"code","3f8c6f5c":"code","73b0e27a":"code","6f08b0f2":"code","da82663d":"code","5e14a941":"code","cbabd01e":"code","9523b62f":"code","a16a7f09":"code","e55eae7f":"code","446a93ed":"code","71d49d72":"code","fd073fdd":"code","80e49b44":"code","3414b80e":"code","6f091ea7":"code","1529adda":"code","0933af90":"code","6c63da06":"code","f769472e":"markdown","92702d1b":"markdown","f9cb892b":"markdown","ef6f04c8":"markdown","3ecbb716":"markdown","b0778942":"markdown","05acadca":"markdown","c1ffe718":"markdown","9022d7cd":"markdown","0edc10fa":"markdown","a3517e04":"markdown","fcf41bbe":"markdown","ff127057":"markdown","a231159f":"markdown","19da0608":"markdown","247d701c":"markdown","5dc75b35":"markdown","ccc8a739":"markdown","4b9b667f":"markdown","80c8ef6a":"markdown","4084833a":"markdown"},"source":{"359d2dbb":"from IPython.display import clear_output\n!pip install imutils\nclear_output()\n\nfrom keras.applications.vgg19 import VGG19,preprocess_input\nfrom keras.applications.xception import Xception,preprocess_input\nfrom keras.applications.inception_v3 import InceptionV3,inception_v3\nfrom keras.applications.resnet50 import ResNet50,resnet50\n","99fe9327":"import numpy as np \nfrom tqdm import tqdm\nimport cv2\nimport os\nimport shutil\nimport itertools\nimport imutils\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import LabelBinarizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, confusion_matrix\n\nimport plotly.graph_objs as go\nfrom plotly.offline import init_notebook_mode, iplot\nfrom plotly import tools\n\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.applications.vgg16 import VGG16, preprocess_input\nfrom keras import layers\nfrom keras.models import Model, Sequential\nfrom keras.optimizers import Adam, RMSprop\nfrom keras.callbacks import EarlyStopping\n\ninit_notebook_mode(connected=True)\nRANDOM_SEED = 123","5fa38d09":"!apt-get install tree\n#clear_output()\n# create new folders\n!mkdir TRAIN TEST VAL TRAIN\/YES TRAIN\/NO TEST\/YES TEST\/NO VAL\/YES VAL\/NO\n!tree -d","456fcee8":"IMG_PATH = '..\/input\/brain-mri-images-for-brain-tumor-detection\/brain_tumor_dataset\/'\n# split the data by train\/val\/test\nfor CLASS in os.listdir(IMG_PATH):\n    if not CLASS.startswith('.'):\n        IMG_NUM = len(os.listdir(IMG_PATH + CLASS))\n        for (n, FILE_NAME) in enumerate(os.listdir(IMG_PATH + CLASS)):\n            img = IMG_PATH + CLASS + '\/' + FILE_NAME\n            if n < 5:\n                shutil.copy(img, 'TEST\/' + CLASS.upper() + '\/' + FILE_NAME)\n            elif n < 0.8*IMG_NUM:\n                shutil.copy(img, 'TRAIN\/'+ CLASS.upper() + '\/' + FILE_NAME)\n            else:\n                shutil.copy(img, 'VAL\/'+ CLASS.upper() + '\/' + FILE_NAME)","3611bd2f":"def load_data(dir_path, img_size=(100,100)):\n    \"\"\"\n    Load resized images as np.arrays to workspace\n    \"\"\"\n    X = []\n    y = []\n    i = 0\n    labels = dict()\n    for path in tqdm(sorted(os.listdir(dir_path))):\n        if not path.startswith('.'):\n            labels[i] = path\n            for file in os.listdir(dir_path + path):\n                if not file.startswith('.'):\n                    img = cv2.imread(dir_path + path + '\/' + file)\n                    X.append(img)\n                    y.append(i)\n            i += 1\n    X = np.array(X)\n    y = np.array(y)\n    print(f'{len(X)} images loaded from {dir_path} directory.')\n    return X, y, labels\n\n\n\ndef plot_confusion_matrix(cm, classes,\n                          normalize=False,\n                          title='Confusion matrix',\n                          cmap=plt.cm.Blues):\n    \"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"\n    plt.figure(figsize = (6,6))\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=90)\n    plt.yticks(tick_marks, classes)\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n\n    thresh = cm.max() \/ 2.\n    cm = np.round(cm,2)\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, cm[i, j],\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')\n    plt.show()","26cfdc59":"TRAIN_DIR = 'TRAIN\/'\nTEST_DIR = 'TEST\/'\nVAL_DIR = 'VAL\/'\nIMG_SIZE = (224,224)\n\n# use predefined function to load the image data into workspace\nX_train, y_train, labels = load_data(TRAIN_DIR, IMG_SIZE)\nX_test, y_test, _ = load_data(TEST_DIR, IMG_SIZE)\nX_val, y_val, _ = load_data(VAL_DIR, IMG_SIZE)","28b4bfcf":"y = dict()\ny[0] = []\ny[1] = []\nfor set_name in (y_train, y_val, y_test):\n    y[0].append(np.sum(set_name == 0))\n    y[1].append(np.sum(set_name == 1))\n\ntrace0 = go.Bar(\n    x=['Train Set', 'Validation Set', 'Test Set'],\n    y=y[0],\n    name='No',\n    marker=dict(color='#33cc33'),\n    opacity=0.7\n)\ntrace1 = go.Bar(\n    x=['Train Set', 'Validation Set', 'Test Set'],\n    y=y[1],\n    name='Yes',\n    marker=dict(color='#ff3300'),\n    opacity=0.7\n)\ndata = [trace0, trace1]\nlayout = go.Layout(\n    title='Count of classes in each set',\n    xaxis={'title': 'Set'},\n    yaxis={'title': 'Count'}\n)\nfig = go.Figure(data, layout)\niplot(fig)","8fd14022":"def plot_samples(X, y, labels_dict, n=50):\n    \"\"\"\n    Creates a gridplot for desired number of images (n) from the specified set\n    \"\"\"\n    for index in range(len(labels_dict)):\n        imgs = X[np.argwhere(y == index)][:n]\n        j = 10\n        i = int(n\/j)\n\n        plt.figure(figsize=(15,6))\n        c = 1\n        for img in imgs:\n            plt.subplot(i,j,c)\n            plt.imshow(img[0])\n\n            plt.xticks([])\n            plt.yticks([])\n            c += 1\n        plt.suptitle('Tumor: {}'.format(labels_dict[index]))\n        plt.show()","7de83de1":"plot_samples(X_train, y_train, labels, 10)","47a12b95":"RATIO_LIST = []\nfor set in (X_train, X_test, X_val):\n    for img in set:\n        RATIO_LIST.append(img.shape[1]\/img.shape[0])\n        \nplt.hist(RATIO_LIST)\nplt.title('Distribution of Image Ratios')\nplt.xlabel('Ratio Value')\nplt.ylabel('Count')\nplt.show()","0c3dab19":"def crop_imgs(set_name, add_pixels_value=0):\n    \"\"\"\n    Finds the extreme points on the image and crops the rectangular out of them\n    \"\"\"\n    set_new = []\n    for img in set_name:\n        gray = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)\n        gray = cv2.GaussianBlur(gray, (5, 5), 0)\n\n        # threshold the image, then perform a series of erosions +\n        # dilations to remove any small regions of noise\n        thresh = cv2.threshold(gray, 45, 255, cv2.THRESH_BINARY)[1]\n        thresh = cv2.erode(thresh, None, iterations=2)\n        thresh = cv2.dilate(thresh, None, iterations=2)\n\n        # find contours in thresholded image, then grab the largest one\n        cnts = cv2.findContours(thresh.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)\n        cnts = imutils.grab_contours(cnts)\n        c = max(cnts, key=cv2.contourArea)\n\n        # find the extreme points\n        extLeft = tuple(c[c[:, :, 0].argmin()][0])\n        extRight = tuple(c[c[:, :, 0].argmax()][0])\n        extTop = tuple(c[c[:, :, 1].argmin()][0])\n        extBot = tuple(c[c[:, :, 1].argmax()][0])\n\n        ADD_PIXELS = add_pixels_value\n        new_img = img[extTop[1]-ADD_PIXELS:extBot[1]+ADD_PIXELS, extLeft[0]-ADD_PIXELS:extRight[0]+ADD_PIXELS].copy()\n        set_new.append(new_img)\n\n    return np.array(set_new)","e2c9a457":"img = cv2.imread('..\/input\/brain-mri-images-for-brain-tumor-detection\/brain_tumor_dataset\/yes\/Y108.jpg')\nimg = cv2.resize(\n            img,\n            dsize=IMG_SIZE,\n            interpolation=cv2.INTER_CUBIC\n        )\ngray = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)\ngray = cv2.GaussianBlur(gray, (5, 5), 0)\n\n# threshold the image, then perform a series of erosions +\n# dilations to remove any small regions of noise\nthresh = cv2.threshold(gray, 45, 255, cv2.THRESH_BINARY)[1]\nthresh = cv2.erode(thresh, None, iterations=2)\nthresh = cv2.dilate(thresh, None, iterations=2)\n\n# find contours in thresholded image, then grab the largest one\ncnts = cv2.findContours(thresh.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)\ncnts = imutils.grab_contours(cnts)\nc = max(cnts, key=cv2.contourArea)\n\n# find the extreme points\nextLeft = tuple(c[c[:, :, 0].argmin()][0])\nextRight = tuple(c[c[:, :, 0].argmax()][0])\nextTop = tuple(c[c[:, :, 1].argmin()][0])\nextBot = tuple(c[c[:, :, 1].argmax()][0])\n\n# add contour on the image\nimg_cnt = cv2.drawContours(img.copy(), [c], -1, (0, 255, 255), 4)\n\n# add extreme points\nimg_pnt = cv2.circle(img_cnt.copy(), extLeft, 8, (0, 0, 255), -1)\nimg_pnt = cv2.circle(img_pnt, extRight, 8, (0, 255, 0), -1)\nimg_pnt = cv2.circle(img_pnt, extTop, 8, (255, 0, 0), -1)\nimg_pnt = cv2.circle(img_pnt, extBot, 8, (255, 255, 0), -1)\n\n# crop\nADD_PIXELS = 0\nnew_img = img[extTop[1]-ADD_PIXELS:extBot[1]+ADD_PIXELS, extLeft[0]-ADD_PIXELS:extRight[0]+ADD_PIXELS].copy()","fc6d7bef":"plt.figure(figsize=(15,6))\nplt.subplot(141)\nplt.imshow(img)\nplt.xticks([])\nplt.yticks([])\nplt.title('Step 1. Get the original image')\nplt.subplot(142)\nplt.imshow(img_cnt)\nplt.xticks([])\nplt.yticks([])\nplt.title('Step 2. Find the biggest contour')\nplt.subplot(143)\nplt.imshow(img_pnt)\nplt.xticks([])\nplt.yticks([])\nplt.title('Step 3. Find the extreme points')\nplt.subplot(144)\nplt.imshow(new_img)\nplt.xticks([])\nplt.yticks([])\nplt.title('Step 4. Crop the image')\nplt.show()","326e6f1d":"# apply this for each set\nX_train_crop = crop_imgs(set_name=X_train)\nX_val_crop = crop_imgs(set_name=X_val)\nX_test_crop = crop_imgs(set_name=X_test)","d48ca7f2":"plot_samples(X_train_crop, y_train, labels, 10)","7138c8b9":"def save_new_images(x_set, y_set, folder_name):\n    i = 0\n    for (img, imclass) in zip(x_set, y_set):\n        if imclass == 0:\n            cv2.imwrite(folder_name+'NO\/'+str(i)+'.jpg', img)\n        else:\n            cv2.imwrite(folder_name+'YES\/'+str(i)+'.jpg', img)\n        i += 1","43a34df1":"# saving new images to the folder\n!mkdir TRAIN_CROP TEST_CROP VAL_CROP TRAIN_CROP\/YES TRAIN_CROP\/NO TEST_CROP\/YES TEST_CROP\/NO VAL_CROP\/YES VAL_CROP\/NO\n\nsave_new_images(X_train_crop, y_train, folder_name='TRAIN_CROP\/')\nsave_new_images(X_val_crop, y_val, folder_name='VAL_CROP\/')\nsave_new_images(X_test_crop, y_test, folder_name='TEST_CROP\/')","0c5dd94e":"def preprocess_imgs(set_name, img_size):\n    \"\"\"\n    Resize and apply VGG-15 preprocessing\n    \"\"\"\n    set_new = []\n    for img in set_name:\n        img = cv2.resize(\n            img,\n            dsize=img_size,\n            interpolation=cv2.INTER_CUBIC\n        )\n        set_new.append(preprocess_input(img))\n    return np.array(set_new)","af461631":"X_train_prep = preprocess_imgs(set_name=X_train_crop, img_size=IMG_SIZE)\nX_test_prep = preprocess_imgs(set_name=X_test_crop, img_size=IMG_SIZE)\nX_val_prep = preprocess_imgs(set_name=X_val_crop, img_size=IMG_SIZE)","15e730a2":" plot_samples(X_train_prep, y_train, labels, 10)","49854f36":"# set the paramters we want to change randomly\ndemo_datagen = ImageDataGenerator(\n    rotation_range=15,\n    width_shift_range=0.05,\n    height_shift_range=0.05,\n    rescale=1.\/255,\n    shear_range=0.05,\n    brightness_range=[0.1, 1.5],\n    horizontal_flip=True,\n    vertical_flip=True\n)","7904de59":"os.mkdir('preview')\nx = X_train_crop[0]  \nx = x.reshape((1,) + x.shape) \n\ni = 0\nfor batch in demo_datagen.flow(x, batch_size=1, save_to_dir='preview', save_prefix='aug_img', save_format='jpg'):\n    i += 1\n    if i > 20:\n        break ","afe912b5":"plt.imshow(X_train_crop[0])\nplt.xticks([])\nplt.yticks([])\nplt.title('Original Image')\nplt.show()\n\nplt.figure(figsize=(15,6))\ni = 1\nfor img in os.listdir('preview\/'):\n    img = cv2.cv2.imread('preview\/' + img)\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    plt.subplot(3,7,i)\n    plt.imshow(img)\n    plt.xticks([])\n    plt.yticks([])\n    i += 1\n    if i > 3*7:\n        break\nplt.suptitle('Augemented Images')\nplt.show()","22a2bbad":"!rm -rf preview\/","9070f48b":"TRAIN_DIR = 'TRAIN_CROP\/'\nVAL_DIR = 'VAL_CROP\/'\n\ntrain_datagen = ImageDataGenerator(\n    rotation_range=15,\n    width_shift_range=0.1,\n    height_shift_range=0.1,\n    shear_range=0.1,\n    brightness_range=[0.5, 1.5],\n    horizontal_flip=True,\n    vertical_flip=True,\n    preprocessing_function=preprocess_input\n)\n\ntest_datagen = ImageDataGenerator(\n    preprocessing_function=preprocess_input\n)\n\n\ntrain_generator = train_datagen.flow_from_directory(\n    TRAIN_DIR,\n    color_mode='rgb',\n    target_size=IMG_SIZE,\n    batch_size=32,\n    class_mode='binary',\n    seed=RANDOM_SEED\n)\n\n\nvalidation_generator = test_datagen.flow_from_directory(\n    VAL_DIR,\n    color_mode='rgb',\n    target_size=IMG_SIZE,\n    batch_size=16,\n    class_mode='binary',\n    seed=RANDOM_SEED\n)","0032b2ae":"\n# load base model\nResNet50_weight_path = '..\/input\/keras-pretrained-models\/resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5'\nresnet50_x = ResNet50(\n    weights=ResNet50_weight_path,\n    include_top=False, \n    input_shape=IMG_SIZE + (3,)\n)","e467a904":"# load base model\nInceptionV3_weight_path = '..\/input\/keras-pretrained-models\/inception_v3_weights_tf_dim_ordering_tf_kernels_notop.h5'\ninceptionV3 = InceptionV3(\n     weights=InceptionV3_weight_path,\n    include_top=False, \n    input_shape=IMG_SIZE + (3,)\n)","42318ee0":"# load base model\nvgg16_weight_path = '..\/input\/keras-pretrained-models\/vgg16_weights_tf_dim_ordering_tf_kernels_notop.h5'\nvgg = VGG16(\n    weights=vgg16_weight_path,\n    include_top=False, \n    input_shape=IMG_SIZE + (3,)\n)","90e57e00":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport math\nimport cv2\nimport matplotlib.pyplot as plt\nimport os\nimport seaborn as sns\nimport umap\nfrom PIL import Image\nfrom scipy import misc\nfrom os import listdir\nfrom os.path import isfile, join\nimport numpy as np\nfrom scipy import misc\nfrom random import shuffle\nfrom collections import Counter\nimport matplotlib.pyplot as plt\nfrom sklearn.decomposition import PCA\nfrom sklearn.manifold import TSNE\nimport tensorflow as tf\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPooling2D\nfrom keras.layers import Activation, Dropout, Flatten, Dense\nfrom keras.utils.np_utils import to_categorical\nfrom keras.layers import Input\n","d9602a6b":"import os\nimport sys\nimport random\nimport warnings\n\nimport numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\n\nfrom tqdm import tqdm\nfrom itertools import chain\nfrom skimage.io import imread, imshow, imread_collection, concatenate_images\nfrom skimage.transform import resize\nfrom skimage.morphology import label\n\nfrom keras.models import Model, load_model\nfrom keras.layers import Input\nfrom keras.layers.core import Dropout, Lambda\nfrom keras.layers.convolutional import Conv2D, Conv2DTranspose\nfrom keras.layers.pooling import MaxPooling2D\nfrom keras.layers.merge import concatenate\nfrom keras.callbacks import EarlyStopping, ModelCheckpoint\nfrom keras import backend as K\nimport keras\n","3f8c6f5c":"# plot feature map of first conv layer for given image\nfrom keras.applications.vgg16 import VGG16\nfrom keras.applications.vgg16 import preprocess_input\nfrom keras.preprocessing.image import load_img\nfrom keras.preprocessing.image import img_to_array\nfrom keras.models import Model\nfrom matplotlib import pyplot \nfrom numpy import expand_dims\n\n\nf = plt.figure(figsize=(16,16))\n# load the modelf = plt.figure(figsize=(10,3))\nmodel = VGG16()\n# redefine model to output right after the first hidden layer\nmodel = Model(inputs=model.inputs, outputs=model.layers[1].output)\nmodel.summary()\n# load the image with the required shape\n# convert the image to an array\nimg = img_to_array(X_val_prep[43])\n# expand dimensions so that it represents a single 'sample'\nimg = expand_dims(img, axis=0)\n# prepare the image (e.g. scale pixel values for the vgg)\nimg = preprocess_input(img)\n# get feature map for first hidden layer\nfeature_maps = model.predict(img)\n# plot all 64 maps in an 8x8 squares\nsquare = 8\nix = 1\nfor _ in range(square):\n\tfor _ in range(square):\n\t\t# specify subplot and turn of axis\n\t\tax = pyplot.subplot(square, square, ix)\n\t\tax.set_xticks([])\n\t\tax.set_yticks([])\n\t\t# plot filter channel in grayscale\n\t\tpyplot.imshow(feature_maps[0, :, :, ix-1], cmap='viridis')\n\t\tix += 1\n# show the figure\npyplot.show()\n","73b0e27a":"\n\nNUM_CLASSES = 1\n\nvgg16 = Sequential()\nvgg16.add(vgg)\nvgg16.add(layers.Dropout(0.3))\nvgg16.add(layers.Flatten())\nvgg16.add(layers.Dropout(0.5))\nvgg16.add(layers.Dense(NUM_CLASSES, activation='sigmoid'))\n\nvgg16.layers[0].trainable = False\n\nvgg16.compile(\n    loss='binary_crossentropy',\n    optimizer=RMSprop(lr=1e-4),\n    metrics=['accuracy']\n)\nvgg16.compile(loss='binary_crossentropy', optimizer=keras.optimizers.Adam(lr=0.0003, beta_1=0.9, beta_2=0.999, epsilon=None, decay=0.0, amsgrad=False), metrics=[\"accuracy\"])\n\nvgg16.summary()","6f08b0f2":"# visualize feature maps output from each block in the vgg model\nfrom keras.applications.vgg16 import VGG16\nfrom keras.applications.vgg16 import preprocess_input\nfrom keras.preprocessing.image import load_img\nfrom keras.preprocessing.image import img_to_array\nfrom keras.models import Model\nimport matplotlib.pyplot as plt\nfrom numpy import expand_dims\n\n\n\n\n# load the model\nmodel = VGG16()\n# redefine model to output right after the first hidden layer\nixs = [2, 5, 9, 13, 17]\noutputs = [model.layers[i].output for i in ixs]\nmodel = Model(inputs=model.inputs, outputs=outputs)\n# load the image with the required shape\n# convert the image to an array\nimg = img_to_array(X_val_prep[43])\n# expand dimensions so that it represents a single 'sample'\nimg = expand_dims(img, axis=0)\n# prepare the image (e.g. scale pixel values for the vgg)\nimg = preprocess_input(img)\n# get feature map for first hidden layer\nfeature_maps = model.predict(img)\n# plot the output from each block\nsquare = 8\nfor fmap in feature_maps:\n\t# plot all 64 maps in an 8x8 squares\n\tix = 1\n\tfor _ in range(square):\n\t\tplt.figure(figsize=(64,64))\n\t\tfor _ in range(square):\n           \n\n\t\t\t# specify subplot and turn of axis\n\t\t\tax = pyplot.subplot(square, square, ix)\n\t\t\tax.set_xticks([])\n\t\t\tax.set_yticks([])\n\t\t\t\n\t\t\t# plot filter channel in grayscale\n\t\t\tplt.imshow(fmap[0, :, :, ix-1], cmap='viridis')\n\t\t\tix += 1\n\t# show the figure\n\n        \n\tplt.show()","da82663d":"import time\n\nstart = time.time()\n\nvgg16_history = vgg16.fit_generator(\n    train_generator,\n    steps_per_epoch=50,\n    epochs=40,\n    validation_data=validation_generator,\n    validation_steps=30,\n)\n\n\nend = time.time()\nprint(end - start)","5e14a941":"# validate on val set\npredictions = vgg16.predict(X_test_prep)\npredictions = [1 if x>0.5 else 0 for x in predictions]\n\n_, train_acc = vgg16.evaluate(X_val_prep, y_val, verbose=0)\n_, test_acc = vgg16.evaluate(X_test_prep, y_test, verbose=0)","cbabd01e":"pyplot.figure(figsize=(12,12))\n# plot loss during training\npyplot.subplot(211)\npyplot.title('Vgg16 Loss')\npyplot.plot(vgg16_history.history['loss'], label='train')\npyplot.plot(vgg16_history.history['val_loss'], label='Validation')\npyplot.legend()\n# plot accuracy during training\npyplot.subplot(212)\npyplot.title('Vgg16 Accuracy')\npyplot.plot(vgg16_history.history['acc'], label='train')\npyplot.plot(vgg16_history.history['val_acc'], label='Validation')\npyplot.legend()\npyplot.show()","9523b62f":"print('Train: %.3f, Test: %.3f' % (train_acc, test_acc))","a16a7f09":"from sklearn.datasets import make_circles\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import precision_score\nfrom sklearn.metrics import recall_score\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import cohen_kappa_score\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import confusion_matrix\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\n# accuracy: (tp + tn) \/ (p + n)\naccuracy = accuracy_score(y_test, predictions)\nprint('Accuracy: %f' % accuracy)\n# precision tp \/ (tp + fp)\nprecision = precision_score(y_test, predictions)\nprint('Precision: %f' % precision)\n# recall: tp \/ (tp + fn)\nrecall = recall_score(y_test, predictions)\nprint('Recall: %f' % recall)\n# f1: 2 tp \/ (2 tp + fp + fn)\nf1 = f1_score(y_test, predictions)\nprint('F1 score: %f' % f1)","e55eae7f":"kappa = cohen_kappa_score(y_test, predictions)\nprint('Cohens kappa: %f' % kappa)\n# ROC AUC\nauc = roc_auc_score(y_test, predictions)\nprint('ROC AUC: %f' % auc)\n# confusion matrix\nmatrix = confusion_matrix(y_test, predictions)\nprint(matrix)","446a93ed":"\n\nNUM_CLASSES = 1\n\ninception_v3 = Sequential()\ninception_v3.add(inceptionV3)\ninception_v3.add(layers.Dropout(0.3))\ninception_v3.add(layers.Flatten())\ninception_v3.add(layers.Dropout(0.5))\ninception_v3.add(layers.Dense(NUM_CLASSES, activation='sigmoid'))\n\ninception_v3.layers[0].trainable = False\n\ninception_v3.compile(\n    loss='binary_crossentropy',\n    optimizer=RMSprop(lr=1e-4),\n    metrics=['accuracy']\n)\n\ninception_v3.summary()","71d49d72":"import time\n\nstart = time.time()\n\ninception_v3_history = inception_v3.fit_generator(\n    train_generator,\n    steps_per_epoch=50,\n    epochs=40,\n    validation_data=validation_generator,\n    validation_steps=30,\n)\n\nend = time.time()\nprint(end - start)","fd073fdd":"\n\nNUM_CLASSES = 1\n\nresnet50 = Sequential()\nresnet50.add(resnet50_x)\nresnet50.add(layers.Dropout(0.3))\nresnet50.add(layers.Flatten())\nresnet50.add(layers.Dropout(0.5))\nresnet50.add(layers.Dense(NUM_CLASSES, activation='sigmoid'))\n\nresnet50.layers[0].trainable = False\n\nresnet50.compile(\n    loss='binary_crossentropy',\n    optimizer=RMSprop(lr=1e-4),\n    metrics=['accuracy']\n)\nresnet50.compile(loss='binary_crossentropy', optimizer=keras.optimizers.Adam(lr=0.0003, beta_1=0.9, beta_2=0.999, epsilon=None, decay=0.0, amsgrad=False), metrics=[\"accuracy\"])\n\nresnet50.summary()","80e49b44":"import time\n\nstart = time.time()\n\nresnet50_history = resnet50.fit_generator(\n    train_generator,\n    steps_per_epoch=50,\n    epochs=40,\n    validation_data=validation_generator,\n    validation_steps=30,\n)\n\nend = time.time()\nprint(end - start)","3414b80e":"history_1= vgg16_history\nhistory_2=inception_v3_history\nhistory_3=resnet50_history","6f091ea7":"def ModelGraphTrainngSummary(history,N,model_name):\n    # set the matplotlib backend so figures can be saved in the background\n    # plot the training loss and accuracy\n    import sys\n    import matplotlib\n    print(\"Generating plots...\")\n    sys.stdout.flush()\n    matplotlib.use(\"Agg\")\n    matplotlib.pyplot.style.use(\"ggplot\")\n    matplotlib.pyplot.figure()\n    matplotlib.pyplot.plot(np.arange(0, N), history.history[\"loss\"], label=\"train_loss\")\n    matplotlib.pyplot.plot(np.arange(0, N), history.history[\"val_loss\"], label=\"val_loss\")\n    #matplotlib.pyplot.plot(np.arange(0, N), history.history[\"acc\"], label=\"train_acc\")\n    #matplotlib.pyplot.plot(np.arange(0, N), history.history[\"val_acc\"], label=\"val_acc\")\n    matplotlib.pyplot.title(\"Training Loss and Accuracy on Brain Tumor Classification\")\n    matplotlib.pyplot.xlabel(\"Epoch #\")\n    matplotlib.pyplot.ylabel(\"Loss\/Accuracy of \"+model_name)\n    matplotlib.pyplot.legend(loc=\"lower left\")\n    matplotlib.pyplot.savefig(\"plot.png\")","1529adda":"def ModelGraphTrainngSummaryAcc(history,N,model_name):\n    # set the matplotlib backend so figures can be saved in the background\n    # plot the training loss and accuracy\n    import sys\n    import matplotlib\n    print(\"Generating plots...\")\n    sys.stdout.flush()\n    matplotlib.use(\"Agg\")\n    matplotlib.pyplot.style.use(\"ggplot\")\n    matplotlib.pyplot.figure()\n    #matplotlib.pyplot.plot(np.arange(0, N), history.history[\"loss\"], label=\"train_loss\")\n    #matplotlib.pyplot.plot(np.arange(0, N), history.history[\"val_loss\"], label=\"val_loss\")\n    matplotlib.pyplot.plot(np.arange(0, N), history.history[\"acc\"], label=\"train_acc\")\n    matplotlib.pyplot.plot(np.arange(0, N), history.history[\"val_acc\"], label=\"val_acc\")\n    matplotlib.pyplot.title(\"Training Loss and Accuracy on Brain Tumor Classification\")\n    matplotlib.pyplot.xlabel(\"Epoch #\")\n    matplotlib.pyplot.ylabel(\"Accuracy of \"+ model_name)\n    matplotlib.pyplot.legend(loc=\"lower left\")\n    matplotlib.pyplot.savefig(\"plot.png\")","0933af90":"for x_model in [{'name':'VGG-16','history':history_1,'model':vgg16},\n                {'name':'Inception_v3','history':history_2,'model':inception_v3},\n                {'name':'Resnet','history':history_3,'model':resnet50}]:\n    ModelGraphTrainngSummary(x_model['history'],40,x_model['name'])\n    ModelGraphTrainngSummaryAcc(x_model['history'],40,x_model['name'])\n    \n    # validate on val set\n    predictions = x_model['model'].predict(X_val_prep)\n    predictions = [1 if x>0.5 else 0 for x in predictions]\n\n    accuracy = accuracy_score(y_val, predictions)\n    print('Val Accuracy = %.2f' % accuracy)\n\n    confusion_mtx = confusion_matrix(y_val, predictions) \n    cm = plot_confusion_matrix(confusion_mtx, classes = list(labels.items()), normalize=False)","6c63da06":"# clean up the space\n!rm -rf TRAIN TEST VAL TRAIN_CROP TEST_CROP VAL_CROP\n# save the model\n\n\nvgg16.save('2019-8-6_VGG_model.h5')\ninception_v3.save('2019-8-6_inception_v3.h5')\nresnet50.save('2019-8-6_resnet50.h5')\n\n\n","f769472e":"Let's look at example what this function will do with MRI scans:","92702d1b":"**Table of Contents**\n- <a href='#intro'>1. Project Overview and Objectives<\/a> \n    - <a href='#dataset'>1.1. Data Set Description<\/a>\n    - <a href='#tumor'>1.2. What is Brain Tumor?<\/a>\n- <a href='#env'>2. Setting up the Environment<\/a>\n- <a href='#import'>3. Data Import and Preprocessing<\/a>\n- <a href='#cnn'>4. CNN Model<\/a>\n    - <a href='#aug'>4.1. Data Augmentation<\/a>\n        - <a href='#demo'>4.1.1. Demo<\/a>\n        - <a href='#apply'>4.1.2. Apply<\/a>\n    - <a href='#build'>4.2. Transfer Learning Tutorial <\/a>\n    - <a href='#perf'>4.3. Model Performance<\/a>\n- <a href='#concl'>5. Conclusions<\/a>","f9cb892b":"## Calculate Metric","ef6f04c8":"# VGG-16 ","3ecbb716":"# RESNET50","b0778942":"As you can see, images have different `width` and `height` and diffent size of \"black corners\". Since the image size for VGG-16 imput layer is `(224,224)` some wide images may look weird after resizing. Histogram of ratio distributions (`ratio = width\/height`):","05acadca":"# <a id='intro'>1. Project Overview and Objectives<\/a>\n\nThe main purpose of this project was to build a CNN model that would classify if subject has a tumor or not base on MRI scan. I used the VGG-16, Inception v3 , xception model architecture and weights to train the model for this binary problem. I used `accuracy` as a metric to justify the model performance which can be defined as:\n\n$\\textrm{Accuracy} = \\frac{\\textrm{Number of correclty predicted images}}{\\textrm{Total number of tested images}} \\times 100\\%$\n\nFinal results look as follows:\n\n| Set | Accuracy |\n|:-:|:-:|\n| Validation Set* | ~92% |\n| Test Set* | ~92% |\n<br>\n\\* *Note: there might be some misunderstanding in terms of set names so I want to describe what do I mean by `test` and `validation` set:*\n* *`validation set` - is the set used during the model training to adjust the hyperparameters. *\n* *`test set` - is the small set that I don't touch for the whole training process at all. It's been used for final model performance evaluation.*\n\n## <a id='dataset'>1.1. Data Set Description<\/a>\n\nThe image data that was used for this problem is [Brain MRI Images for Brain Tumor Detection](https:\/\/www.kaggle.com\/navoneel\/brain-mri-images-for-brain-tumor-detection). It conists of MRI scans of two classes:\n\n* `NO` - no tumor, encoded as `0`\n* `YES` - tumor, encoded as `1`\n\nUnfortunately, the data set description doesn't hold any information where this MRI scans come from and so on.\n\n## <a id='tumor'>1.2. What is Brain Tumor?<\/a>\n\n> A brain tumor occurs when abnormal cells form within the brain. There are two main types of tumors: cancerous (malignant) tumors and benign tumors. Cancerous tumors can be divided into primary tumors, which start within the brain, and secondary tumors, which have spread from elsewhere, known as brain metastasis tumors. All types of brain tumors may produce symptoms that vary depending on the part of the brain involved. These symptoms may include headaches, seizures, problems with vision, vomiting and mental changes. The headache is classically worse in the morning and goes away with vomiting. Other symptoms may include difficulty walking, speaking or with sensations. As the disease progresses, unconsciousness may occur.\n>\n> ![](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/5\/5f\/Hirnmetastase_MRT-T1_KM.jpg)\n>\n> *Brain metastasis in the right cerebral hemisphere from lung cancer, shown on magnetic resonance imaging.*\n\nSource: [Wikipedia](https:\/\/en.wikipedia.org\/wiki\/Brain_tumor)","c1ffe718":"The first step of \"normalization\" would be to crop the brain out of the images. I used technique which was perfectly described in [pyimagesearch](https:\/\/www.pyimagesearch.com\/2016\/04\/11\/finding-extreme-points-in-contours-with-opencv\/) blog and I highly suggest to looks deeper into it.","9022d7cd":"### <a id='apply'>4.1.2. Apply<\/a>","0edc10fa":"# <a id='env'>2. Setting up the Environment<\/a>","a3517e04":"# <a id='concl'>5. Conclusions<\/a>\n\nThis project was a combination of CNN model classification problem (to predict wheter the subject has brain tumor or not) & Computer Vision problem (to automate the process of brain cropping from MRI scans). The final accuracy is much higher than 50% baseline (random guess). However, it could be increased by larger number of train images or through model hyperparameters tuning.\n\nWell we've done very well just about a cycle brother just that it's a record I think I'm happy with that result and I'm also happy to share some science with you.\nNow it is your turn to use lots and lots of your own models, you can publish your next research paper entitled Transefer Learning .\nThis was a great lesson and thank you for following up and thank this man for his efforts at this kernel\n\n Ruslan Klymentiev\n\n","fcf41bbe":"# <a id='import'>3. Data Import and Preprocessing<\/a>","ff127057":"# Transfer Learning Tutorial \n\n![Transfer Learning](https:\/\/cdn.elearningindustry.com\/wp-content\/uploads\/2016\/09\/5-tips-improve-knowledge-transfer-elearning-e1475138920743.jpeg)\n\n> In practice, very few people train an entire Convolutional Network from scratch (with random initialization), because it is relatively rare to have a dataset of sufficient size. Instead, it is common to pretrain a ConvNet on a very large dataset (e.g. ImageNet, which contains 1.2 million images with 1000 categories), and then use the ConvNet either as an initialization or a fixed feature extractor for the task of interest.\n\nWe always hear that we **do not have to reinvent the wheel**. Well, this is always true. Why do not we work and climb over the giant shoulders? Why do not we build something even if we change it a bit?\nWell, that's not a theft. In fact, everything on the Internet without a license is open source. You can deal with a simple modification that you can get on your next research paper, but the purpose is to understand what has been completed and not just use it.\n\n\nThese two major Transfer learning scenarios look as follows:\n\n**Finetuning the convnet**: Instead of random initializaion, we initialize the network with a pretrained network, like the one that is trained on imagenet 1000 dataset. Rest of the training looks as usual.\n\n**ConvNet as fixed feature extractor**: Here, we will freeze the weights for all of the network except that of the final fully connected layer. This last fully connected layer is replaced with a new one with random weights and only this layer is trained.\n\n\n\n\nI was wondering a few days ago if I had 1000 pictures of a dog in a folder , but I do not know the number of types of dogs inside. just 1000 pictures only, no more and no less with out topic or file name or folder name or just a small label . how can i apply classifer method on it ?\nThis was a big problem so I thought of some solutions that might be logical for most of us, namely, Transefer learning .\nWhat if CNN was used and at the last activation Function was removed ?\nThe output must be Tensors *\nYes, a large array of matrices carry the standard Features of each dog and that is what I want.\nNow I can use the compilation method and the elbow method to see how many dogs are in the picture\nThen we apply one of the dimensions reduction algorithms Like (PCA) and use the k-nn algorithm, and then we will have half of the non-supervisory Deep learning algorithm called \nK-CNN.\nI do not know What do you think ?\n\n\n\nWell, it's a great idea but unfortunately there are people before me who wrote the paper but it does not matter I'll invent something else and I will write a research paper someday [Class Agnostic Image Common Object Detection](https:\/\/ieeexplore.ieee.org\/document\/8606132)\n\n\n![Transefer Learning](https:\/\/cdn-images-1.medium.com\/max\/1600\/1*9GTEzcO8KxxrfutmtsPs3Q.png)\n\n\n","a231159f":"I also love the scholars to learn from them and their experiences, and to give me stories about them and their experiences in life.\nI like their way of telling stories and giving me information, they sing for hours of hard and long work\n\nThis is exactly what happens in a model that has been trained on a lot of things. What we are doing now is to give out only two of the 1000 things that we know and ask. Do you know them?\nWell, what would happen if we did not use weights for the model?\nIn that case it will be a normal model all you do is put it in your form and add the final layer **Flatten**  to initialize the model for the classification process\n\n![](https:\/\/cdn-images-1.medium.com\/max\/1600\/1*ZkPBqU8vx2vAgcLpz9pi5g.jpeg)","19da0608":"Let's take a look at the distribution of classes among sets:","247d701c":"Right now all images are in one folder with `yes` and `no` subfolders. I will split the data into `train`, `val` and `test` folders which makes its easier to work for me. The new folder heirarchy will look as follows:","5dc75b35":"The next step would be resizing images to `(224,224)` and applying preprocessing needed for VGG-16 model input.","ccc8a739":"## <a id='build'>4.2. Transfer Learning Tutorial<\/a>","4b9b667f":"# InceptionV3","80c8ef6a":"# <a id='cnn'>4. CNN Model<\/a>\n\nI was using [Transfer Learning](https:\/\/towardsdatascience.com\/keras-transfer-learning-for-beginners-6c9b8b7143e) with VGG-16 architecture , xception,InceptionV3 and weights as a base model.\n\n## <a id='aug'>4.1. Data Augmentation<\/a>\n\nSince I had small data set I used the technique called [Data Augmentation](https:\/\/blog.keras.io\/building-powerful-image-classification-models-using-very-little-data.html) which helps to \"increase\" the size of training set.\n\n### <a id='demo'>4.1.1. Demo<\/a>\n\nThat's the example from one image how does augmentation look like.","4084833a":"## <a id='perf'>4.3. Model Performance<\/a>"}}