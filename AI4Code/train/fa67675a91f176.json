{"cell_type":{"d57e114b":"code","37ab2ebf":"code","c1263e63":"code","57d3406a":"code","f188ed6e":"code","9a7c7bd3":"code","7e5b85ef":"code","1c29e81e":"code","4db9b0b3":"markdown","6d1dce23":"markdown","c7b2590b":"markdown","9187a2ad":"markdown","01a40ac9":"markdown","12a98ba2":"markdown"},"source":{"d57e114b":"!pip install jsonpath2","37ab2ebf":"import pandas as pd\n\n# https:\/\/www.rki.de\/DE\/Content\/InfAZ\/N\/Neuartiges_Coronavirus\/Daten\/Testzahlen-gesamt.xlsx;__blob=publicationFile\n## data is updated every wednesday\ndf = pd.read_excel(\n    '..\/input\/20201202-rki-testzahlen\/Testzahlen-gesamt.xlsx', \n    'Testzahlen', \n    header=2,\n    usecols='B:D,F',\n    # skiprows=1,\n    skipfooter=1\n)\n\n# clean up\ndf = df.drop(38, axis=0)\n\ndf.rename(columns = {\"Kalenderwoche 2020\": \"KW\"},  \n          inplace = True) \n\ndf.loc[36, 'KW'] = 46\ndf.loc[37, 'KW'] = 47\n\ndf.loc[:, 'Positivquote'] = df.loc[:, 'Positiv getestet'] \/ df.loc[:, 'Anzahl Testungen']\ndf.loc[:, 'Vorwoche'] = df.loc[:, 'Positiv getestet'].shift(1)\ndf.loc[:, 'Vorwoche delta'] = df.loc[:, 'Positiv getestet'].diff(1)\ndf_testzahlen = df.copy()\n\ndf = pd.read_excel(\n    '..\/input\/20201202-rki-testzahlen\/Testzahlen-gesamt.xlsx', \n    'Probenr\u00fcckstau'\n)\ndf_r\u00fcckstau = df.copy()\n\n\ndf = pd.read_excel(\n    '..\/input\/20201202-rki-testzahlen\/Testzahlen-gesamt.xlsx', \n    'Testkapazit\u00e4ten',\n    header=1,\n    usecols='A:B,E'\n)\ndf.rename(columns = {\"KW, f\u00fcr die die Angabe prognostisch erfolgt ist:\": \"KW\"},  \n          inplace = True) \ndf.loc[:, 'KW'] = df.loc[:, 'KW'].apply(lambda str: int(str[2:4]))\ndf_kapazit\u00e4ten = df.copy()\n\ndf = df.merge(df_testzahlen, on='KW') \\\n    .merge(df_r\u00fcckstau, on='KW') \\\n    .set_index('KW')\n\n# display(df.head())\ndisplay(df.tail())","c1263e63":"import matplotlib.pyplot as plt\n\nstart_index = 33\n\nplt.plot(df.loc[start_index:, 'Positivquote'], label='Positivquote')\nplt.legend()\nplt.show()\n\nplt.plot(df.loc[start_index:, 'Positiv getestet'], label='Positiv getestet')\nplt.plot(df.loc[start_index:, 'Probenr\u00fcckstau'], label='R\u00fcckstau')\nplt.plot((df.loc[start_index:, 'Positiv getestet'] + df.loc[start_index:, 'Probenr\u00fcckstau'] * df.loc[start_index:, 'Positivquote']), label='Projektion R\u00fcckstau')\nplt.legend()\nplt.show()","57d3406a":"import matplotlib.pyplot as plt\n\nplt.plot(df.loc[start_index:, 'Reale Testkapazit\u00e4t zum Zeitpunkt der Abfrage'], label='Testkapazit\u00e4ten')\nplt.plot(df.loc[start_index:, 'Reale Testkapazit\u00e4t zum Zeitpunkt der Abfrage'] + df.loc[start_index:, 'Probenr\u00fcckstau'], label='Abstriche')\n\nplt.legend()\nax = plt.gca()\n# plt.plot([0, 1], [0, 1], transform=ax.transAxes, alpha=0.3)\nplt.ticklabel_format(scilimits=(0,10), style = 'sci')\nplt.show()","f188ed6e":"import pandas as pd\n\ndef data_loader(): return load_from_arcgis_hub()\n\ndef load_from_tracking():\n    df_tracking = pd.read_csv(\n        '..\/input\/covid19-tracking-germany\/covid_de.csv',\n        usecols = ['date', 'cases', 'deaths', 'recovered'],\n        parse_dates = ['date']\n    )\n    return df_tracking\n\ndef load_from_rki():\n    df_rki = pd.read_csv(\n        '..\/input\/covid19-data-germany-robert-koch-institute\/dd4580c810204019a7b8eb3e0b329dd6_0.csv',\n        usecols = ['Refdatum', 'Meldedatum', 'AnzahlFall', 'AnzahlTodesfall', 'AnzahlGenesen'],\n        parse_dates = ['Refdatum', 'Meldedatum']\n    )\n    df_rki.rename(\n        columns={'Meldedatum':'date', 'AnzahlFall':'cases', 'AnzahlTodesfall':'deaths', 'AnzahlGenesen':'recovered'}, \n        inplace=True\n    )\n    return df_rki\n\ndef load_from_arcgis_hub():\n    from datetime import date\n    filename = date.today().strftime('arcgis_hub_rki_covid_%Y%m%d.csv')\n    \n    from os.path import exists\n    if exists(filename):\n        df_rki_cached = pd.read_csv(filename)\n        return df_rki_cached\n    \n    from urllib.request import urlopen\n    import json\n    from jsonpath2 import match\n    \n    api_data = []\n    resultOffset = 0\n    exceededTransferLimit = True\n    \n    while exceededTransferLimit:\n        print('offset: %d' % resultOffset)\n        res = urlopen('https:\/\/services7.arcgis.com\/mOBPykOjAyBO2ZKk\/arcgis\/rest\/services\/RKI_COVID19\/FeatureServer\/0\/query' + \n                      '?where=1%3D1&f=json'+ \n                      '&outFields=AnzahlFall,AnzahlTodesfall,Refdatum,AnzahlGenesen,Meldedatum' +\n                      '&resultOffset=' + str(resultOffset)\n        )\n        raw_json = res.read()\n        parsed_json = json.loads(raw_json)\n        \n        try:\n            exceededTransferLimit = parsed_json['exceededTransferLimit']\n        except KeyError:\n            exceededTransferLimit = False\n        \n        matches = match('$.features.*.attributes', parsed_json)\n\n        for m in matches:\n            cv = m.current_value\n            try:\n                api_data.append(\n                    {\n                        'date': date.fromtimestamp(cv['Meldedatum']\/1000), \n                        'cases': cv['AnzahlFall'], \n                        'deaths': cv['AnzahlTodesfall'], \n                        'recovered': cv['AnzahlGenesen']\n                    }\n                )\n            except ValueError:\n                import time\n                print(\"bad data: %s %s\" % (cv, time.time()))\n                \n            resultOffset = len(api_data)\n    \n    df_rki_download = pd.DataFrame(api_data)\n    df_rki_download.to_csv(filename)\n    return df_rki_download\n\ndf = data_loader()\n    \ndisplay(df.head())\ndisplay(df.tail())","9a7c7bd3":"df_agg = df.groupby(by=['date'], as_index=True).agg(\n    {'cases': sum, 'deaths': sum, 'recovered': sum}\n).sort_values('date')\n\nstartindex = pd.to_datetime('2020-10-01')\nticks = pd.date_range(startindex, df_agg.index[-1], freq='W')\n\ndisplay(df_agg.tail())","7e5b85ef":"# https:\/\/stackoverflow.com\/questions\/45281297\/group-by-week-in-pandas\n\ndf_rki_kumm = pd.read_excel(\n    '..\/input\/20201211-rki-fallzahlen-kummuliert\/Fallzahlen_Kum_Tab.xlsx', \n    'F\u00e4lle-Todesf\u00e4lle-gesamt',\n    header=2,\n    usecols='A:B,D:F',\n    index_col=0,\n    # parse_dates=False\n)\n\ndef parseDate(sth):\n    from datetime import datetime\n    if sth == '25.08,2020':\n        return datetime(2020, 8, 25)\n    elif isinstance(sth, str):\n        return datetime.strptime(sth, '%d.%m.%Y')\n    elif isinstance(sth, datetime):\n        return datetime(sth.year, sth.month, sth.day)\n    else:\n        return sth\n    \ndf_rki_kumm.index = df_rki_kumm.index.map(parseDate)\n\ndisplay(df_agg.loc[:, 'deaths'].cumsum().tail())\ndisplay(df_rki_kumm.loc[:, 'Differenz Vortag Todesf\u00e4lle'].tail())","1c29e81e":"import matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy.signal import find_peaks\n\npeakX_cases = find_peaks(df_agg.loc[startindex:, 'cases'].values)[0]\npeakX_recovered = find_peaks(df_agg.loc[startindex:, 'recovered'].values)[0]\npeakX_deaths = find_peaks(df_rki_kumm.loc[startindex:, 'Differenz Vortag Todesf\u00e4lle'].values)[0]\n\nfig, ax = plt.subplots(figsize=(20,10))\nax.plot(df_agg.loc[startindex:, 'cases'], color='orange', alpha=0.5, label='Infiziert')\nax.plot(df_agg.loc[startindex:, 'cases'].iloc[peakX_cases], color='darkorange', linewidth=3)\n\nax.plot(df_agg.loc[startindex:, 'recovered'], color='green', alpha=0.5, label='Genesen')\nax.plot(df_agg.loc[startindex:, 'recovered'].iloc[peakX_recovered], color='darkgreen', linewidth=3, label='Genesen')\n\nax.legend()\nax.grid()\n\nax = ax.twinx()\nax.plot(df_rki_kumm.loc[startindex:, 'Differenz Vortag Todesf\u00e4lle'], color='red', alpha=0.5, label='Todesf\u00e4lle')\nax.plot(df_rki_kumm.loc[startindex:, 'Differenz Vortag Todesf\u00e4lle'].iloc[peakX_deaths], color='darkred', linewidth=3)\n\nax.set_ylabel('Todesf\u00e4lle (7T)', color='red')\n# ax.legend()\n\nplt.xticks(ticks)\n\nplt.show()","4db9b0b3":"# Covid-19 RKI Zahlen\n\nFokus auf die Zahlen nach der letzten Anpassung der Teststrategie im November.\nAnalyse verschiedener vom RKI ausgegebenen Dokumente.\n\n## Relevante Links:\nhttps:\/\/www.zdf.de\/nachrichten\/heute\/coronavirus-ausbreitung-infografiken-102.html","6d1dce23":"* um KW 35 entstand ein R\u00fcckstau, w\u00e4hrend die allgemeine Positivquote lag bei unter 2%\n* um KW 44 entstand ein R\u00fcckstau, w\u00e4hrend die allgemeine Positivquote lag bei ca. 7%","c7b2590b":"# \u00dcbersicht Testkapazit\u00e4ten und Positivquote","9187a2ad":"Gem\u00e4\u00df angepasster Teststrategie ab 3.11.2020, KW 46","01a40ac9":"# Changelog\n* initiale Version \/ Datenstand 26.11.2020\n* update Datenstand 03.12.2020\n* adopted currated dataset provided on kaggle\n* update Datenstand 09.12.2020, bessere Darstellung\n* Refdatum f\u00fcr Meldedatum getauscht\n* Todesf\u00e4lle aus alternativer Quelle des RKI bezogen\n* Daten per API ziehen, Datenstand 17.12.2020","12a98ba2":"# \u00dcbersicht Fallzahlen und Todesf\u00e4lle"}}