{"cell_type":{"aa7f2bc8":"code","b83add5c":"code","eb26dcef":"code","7fe22c10":"code","623106a0":"code","f7d275d1":"code","63d0dcc5":"code","85ad4654":"code","1088d307":"code","61feab1d":"code","625da6ee":"code","40069b7d":"code","223f46e6":"code","c495affd":"code","5e43c9a7":"code","491e605c":"code","8dca9f3f":"code","7dfe1fb5":"code","ec495a14":"code","4db7685b":"code","c1e8920c":"code","51d9d04c":"code","821d60fb":"code","d739c1c4":"code","e3891348":"code","cb7f1574":"code","00eeb83d":"code","112ba60e":"code","311e07fa":"code","8eb6ee4c":"code","cffaffcc":"code","5829cc40":"code","f85e691d":"code","90ab20f1":"code","d02798af":"code","20277f01":"code","5f976de8":"code","097bada5":"code","308c71e9":"code","32669a04":"code","9c75cd3f":"code","2fdbfedc":"code","f9da840c":"code","6833fa07":"code","67b33f3d":"code","22b48ebe":"code","76f88203":"code","77e4d76c":"code","b63b6896":"code","a0a2ac3e":"code","4b9242d3":"code","fde0f2a0":"code","fd91719a":"code","3944f590":"code","6362a19e":"code","9fddabc5":"code","61300e69":"code","f37c889f":"code","6bea567f":"code","609fa9cd":"code","67a87160":"code","8560579a":"code","3392a175":"code","3d595115":"code","de33b6a7":"code","53d90bdd":"code","937b3335":"markdown","47f480ae":"markdown","f5175545":"markdown","b34c4c4b":"markdown","c2289740":"markdown","20566241":"markdown","47543257":"markdown","ccff342c":"markdown","d3b141a5":"markdown","f3841e09":"markdown","36585f45":"markdown","3f748d97":"markdown","f4eb3735":"markdown","b3c08d33":"markdown","7b3f58c2":"markdown","d1442159":"markdown","514341a2":"markdown","72c319ba":"markdown","4fe9ffce":"markdown","5ed0b9b5":"markdown","4faabea5":"markdown","a952857d":"markdown","c8d08c8c":"markdown","ae70357d":"markdown","d7b7bbb5":"markdown","1f2508a7":"markdown","37019677":"markdown","6c848ac7":"markdown"},"source":{"aa7f2bc8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.ticker as ticker\nimport matplotlib.cm as cm\nimport matplotlib as mpl\nfrom matplotlib.gridspec import GridSpec\nimport plotly.express as px\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b83add5c":"ben_merge = pd.read_csv(\"..\/input\/desunpuf-ben-and-claims-merged\/ben_merged.xlsx\",low_memory=False)\n#ben_merge.columns.values[0] = \"DESYNPUF_ID\"","eb26dcef":"ben_merge.info()","7fe22c10":"#replacing Y in esrd with 1, 0 with 2\nben_merge['BENE_ESRD_IND_f']=ben_merge['BENE_ESRD_IND_f'].replace({'Y':1})\nben_merge['BENE_ESRD_IND_f']=ben_merge['BENE_ESRD_IND_f'].replace({'0':2})\nben_merge['BENE_ESRD_IND_f'].value_counts()","623106a0":"#function to replace null values with 0 in all cost columns\ndef replace_null (a,b,c):\n    ben_merge.iloc[:,a] = ben_merge.iloc[:,a].replace(np.nan,0)\n    ben_merge.iloc[:,b] = ben_merge.iloc[:,b].replace(np.nan,0)\n    ben_merge.iloc[:,c]= ben_merge.iloc[:,c].replace(np.nan,0)","f7d275d1":"# executing the function for all 6 cost columns i.e. ben, medi,payer for inpatient and outpatient for 2008,2009, and 2010\na=24\nb=46\nc=65\nfor i in range(0,6):\n    #print(a,b,c)\n    replace_null(a,b,c)\n    a=a+1\n    b=b+1\n    c=c+1\n    #print(a,b,c)","63d0dcc5":"#adding ben, medi, payer inpatient and outpatient across years\nben_merge['MEDREIMB_IP_f'] = ben_merge['MEDREIMB_IP_x'] + ben_merge['MEDREIMB_IP_y']+ben_merge['MEDREIMB_IP']\nben_merge['BENRES_IP_f'] = ben_merge['BENRES_IP_x'] + ben_merge['BENRES_IP_y']+ben_merge['BENRES_IP']\nben_merge['PPPYMT_IP_f'] = ben_merge['PPPYMT_IP_x'] + ben_merge['PPPYMT_IP_y']+ben_merge['PPPYMT_IP']\nben_merge['MEDREIMB_OP_f'] = ben_merge['MEDREIMB_OP_x'] + ben_merge['MEDREIMB_OP_y']+ben_merge['MEDREIMB_OP']\nben_merge['BENRES_OP_f'] = ben_merge['BENRES_OP_x'] + ben_merge['BENRES_OP_y']+ben_merge['BENRES_OP']\nben_merge['PPPYMT_OP_f'] = ben_merge['PPPYMT_OP_x'] + ben_merge['PPPYMT_OP_y']+ben_merge['PPPYMT_OP']","85ad4654":"#validating the addition by printing rows where the final column does not match sum of individual 2008, 2009, and 2010 columns\ndisplay(ben_merge.iloc[:,[1,25,47,66,84]][(ben_merge['BENRES_IP_f'])!=((ben_merge['BENRES_IP_x'])+(ben_merge['BENRES_IP_y'])+(ben_merge['BENRES_IP']))])\ndisplay(ben_merge.iloc[:,[1,24,46,65,83]][(ben_merge['MEDREIMB_IP_f'])!=((ben_merge['MEDREIMB_IP_x'])+(ben_merge['MEDREIMB_IP_y'])+(ben_merge['MEDREIMB_IP']))])\ndisplay(ben_merge.iloc[:,[1,26,48,67,85]][(ben_merge['PPPYMT_IP_f'])!=((ben_merge['PPPYMT_IP_x'])+(ben_merge['PPPYMT_IP_y'])+(ben_merge['PPPYMT_IP']))])\n\ndisplay(ben_merge.iloc[:,[1,27,49,68,86]][(ben_merge['BENRES_OP_f'])!=((ben_merge['BENRES_OP_x'])+(ben_merge['BENRES_OP_y'])+(ben_merge['BENRES_OP']))])\ndisplay(ben_merge.iloc[:,[1,28,50,69,87]][(ben_merge['MEDREIMB_OP_f'])!=((ben_merge['MEDREIMB_OP_x'])+(ben_merge['MEDREIMB_OP_y'])+(ben_merge['MEDREIMB_OP']))])\ndisplay(ben_merge.iloc[:,[1,29,51,70,88]][(ben_merge['PPPYMT_OP_f'])!=((ben_merge['PPPYMT_OP_x'])+(ben_merge['PPPYMT_OP_y'])+(ben_merge['PPPYMT_OP']))])","1088d307":"#loading inpatient and outpatient\nout_claims=pd.read_csv(\"\/kaggle\/input\/cms-synthetic-data\/DE1_0_2008_to_2010_Outpatient_Claims_Sample_1.csv\",low_memory=False)\nin_claims=pd.read_csv(\"\/kaggle\/input\/cms-synthetic-data\/DE1_0_2008_to_2010_Inpatient_Claims_Sample_1.csv\",low_memory=False)","61feab1d":"#adding claim type to inpatient and outpatient..\nin_claims['claim_type']= 'inpatient'\nout_claims['claim_type']= 'outpatient'","625da6ee":"# calculatin medicare, payer, and patient costs for inpaient\nin_claims['in_medicare_cost'] = in_claims['CLM_PMT_AMT'] + (in_claims['CLM_PASS_THRU_PER_DIEM_AMT'] * in_claims['CLM_UTLZTN_DAY_CNT'])\nin_claims['in_payer_cost'] = in_claims['NCH_PRMRY_PYR_CLM_PD_AMT']\nin_claims['in_patient_cost']=in_claims['NCH_BENE_IP_DDCTBL_AMT']+in_claims['NCH_BENE_PTA_COINSRNC_LBLTY_AM']+in_claims['NCH_BENE_BLOOD_DDCTBL_LBLTY_AM']\n                                                            \nin_claims.iloc[:,[0,1,6,7,13,14,15,16,17,82,83,84]].head()","40069b7d":"# calculatin medicare, payer, and patient costs for outpatient\nout_claims['out_medicare_cost'] = out_claims['CLM_PMT_AMT']\nout_claims['out_payer_cost'] = out_claims['NCH_PRMRY_PYR_CLM_PD_AMT']\nout_claims['out_patient_cost']=out_claims['NCH_BENE_BLOOD_DDCTBL_LBLTY_AM']+out_claims['NCH_BENE_PTB_DDCTBL_AMT']+out_claims['NCH_BENE_PTB_COINSRNC_AMT']\n                                                            \nout_claims.head()\n    #in_claims.iloc[:,[0,1,6,7,13,14,15,16,17,82,83,84]].head()","223f46e6":"#appending inpatient dataframe with outpatient dataframe\nall_claims_append = in_claims.append(out_claims, ignore_index = True)","c495affd":"# calculating visit days\nall_claims_append['clm_start_date']=pd.to_datetime(all_claims_append['CLM_FROM_DT'], format='%Y%m%d')\nall_claims_append['clm_end_date']=pd.to_datetime(all_claims_append['CLM_THRU_DT'], format='%Y%m%d')\n\nall_claims_append['visit_days'] = (all_claims_append['clm_end_date'] - all_claims_append['clm_start_date']).dt.days","5e43c9a7":"# loading icd9_lookup\nicd9_lookup = pd.read_csv(\"..\/input\/icd-9-utf\/CMS28_DESC_LONG_SHORT_DX_utf.csv\",low_memory=False)\ndel icd9_lookup['Unnamed: 3']\nicd9_lookup.columns = ['diagnosis_code','long_desc','short_desc']\nicd9_lookup.info()\nicd9_lookup.head()","491e605c":"#merging icd look up claims dataset\nall_claims = pd.merge(all_claims_append,\n                 icd9_lookup[['diagnosis_code','long_desc']],\n                 left_on ='ADMTNG_ICD9_DGNS_CD',\n                right_on = 'diagnosis_code',\n                 how ='left')","8dca9f3f":"# replacing null value in the cost columns for analysis\nall_claims['in_medicare_cost'] = all_claims['in_medicare_cost'].replace(np.nan,0)\nall_claims['out_medicare_cost'] = all_claims['out_medicare_cost'].replace(np.nan,0)\n\nall_claims['in_payer_cost'] = all_claims['in_payer_cost'].replace(np.nan,0)\nall_claims['out_payer_cost'] = all_claims['out_payer_cost'].replace(np.nan,0)\n\nall_claims['in_patient_cost'] = all_claims['in_patient_cost'].replace(np.nan,0)\nall_claims['out_patient_cost'] = all_claims['out_patient_cost'].replace(np.nan,0)","7dfe1fb5":"# validating the cost columns\nprint(all_claims[['in_patient_cost','out_patient_cost']][(all_claims['in_patient_cost']!=0) & (all_claims['out_patient_cost']!=0)])\nprint(all_claims[['in_payer_cost','out_payer_cost']][(all_claims['in_payer_cost']!=0) & (all_claims['out_payer_cost']!=0)])\nprint(all_claims[['in_medicare_cost','out_medicare_cost']][(all_claims['in_medicare_cost']!=0) & (all_claims['out_medicare_cost']!=0)])","ec495a14":"# deriving a single cost column including inpatient and outpatient for medicare, payer, and patient\nall_claims['total_medicare_cost']= all_claims['in_medicare_cost']+all_claims['out_medicare_cost']\nall_claims['total_payer_cost']= all_claims['in_payer_cost']+all_claims['out_payer_cost']\nall_claims['total_patient_cost']= all_claims['in_patient_cost']+all_claims['out_patient_cost']\n\nall_claims.iloc[0:3]\n#top_10_costby_payee = all_claims.groupby(['ADMTNG_ICD9_DGNS_CD','long_desc'])['CLM_PMT_AMT'].sum().nlargest(10))","4db7685b":"#deriving a single total column including total medicare, total paer, total patient costs\nall_claims['total_cost']=all_claims['total_medicare_cost']+all_claims['total_payer_cost']+all_claims['total_patient_cost']\nall_claims[['total_cost','total_medicare_cost','total_payer_cost','total_patient_cost']]","c1e8920c":"#Adjusting for negative claim amount\nall_claims_adjusted = all_claims\nall_claims_adjusted = all_claims_adjusted.sort_values(by=['CLM_PMT_AMT'])\nall_claims_adjusted = all_claims_adjusted.iloc[2621:,]","51d9d04c":"# checking for negative values\ndisplay(all_claims_adjusted[all_claims_adjusted['CLM_PMT_AMT']<0])\ndisplay(all_claims_adjusted[all_claims_adjusted['total_medicare_cost']<0])\ndisplay(all_claims_adjusted[all_claims_adjusted['total_cost']<0])","821d60fb":"all_claims_ben = pd.merge(all_claims_adjusted,\n                 ben_merge, \n                 on ='DESYNPUF_ID',\n                 how='left'\n                 )","d739c1c4":"all_claims_adjusted.info()","e3891348":"display(all_claims_adjusted.shape)\ndisplay(all_claims_ben.shape)\n\nprint(all_claims_adjusted.total_cost.sum())\nprint(all_claims_ben.total_cost.sum())\n#print(all_claims_ben['MEDREIMB_IP_f']+all_claims_ben['BENRES_IP_f']+all_claims_ben['PPPYMT_IP_f']+all_claims_ben['BENRES_OP_f']\n #    +all_claims_ben['BENRES_OP_f']+all_claims_ben['PPPYMT_OP_f'])\n\n#print(all_claims_ben.iloc[854937,[1,98]])","cb7f1574":"print(ben_merge['DESYNPUF_ID'].nunique())\nprint(all_claims_adjusted.DESYNPUF_ID.nunique())","00eeb83d":"print(all_claims_adjusted.CLM_ID.count())\n\nclaims_by_claimtype = all_claims_adjusted.groupby('claim_type')['CLM_ID'].count()\nclaims_by_claimtype = pd.DataFrame(\n{\n    'claim_count': claims_by_claimtype\n})\n\ndisplay(claims_by_claimtype)\n\nprint(f'percentage of inpatient claims {(66718\/854942)*100}')\nprint(f'percentage of outpatient claims {(788224\/854942)*100}')","112ba60e":"display(all_claims_adjusted.total_cost.sum())\n\nclaimcost_by_claimtype = all_claims_adjusted.groupby('claim_type')['total_cost'].sum()\nclaimcost_by_claimtype = pd.DataFrame(\n{\n    'claim_count': claimcost_by_claimtype\n})\n\ndisplay(claimcost_by_claimtype)\n\nprint(f'percentage of inpatient claim amount {(748953962\/1050041062.0)*100}')\nprint(f'percentage of outpatient claim amount {(301087100.0\/1050041062.0)*100}')","311e07fa":"print(all_claims_adjusted['ADMTNG_ICD9_DGNS_CD'].nunique())\nprint(all_claims_adjusted.groupby(['ADMTNG_ICD9_DGNS_CD', 'long_desc'])['total_cost'].sum().nlargest(1,))\nprint(all_claims_adjusted.groupby(['ADMTNG_ICD9_DGNS_CD', 'long_desc'])['total_cost'].sum().nsmallest(1))","8eb6ee4c":"(86711\/116352)*100","cffaffcc":"#Pie chart for gender\ntitle_type = ben_merge.groupby('BENE_SEX_IDENT_CD').agg('count')\n\nplt.figure(1, figsize=(20,10)) \nthe_grid = GridSpec(2, 2)\ncmap = plt.get_cmap('Spectral')\ncolors = [cmap(i) for i in np.linspace(0, 1, 8)]\ntype_labels = title_type.DESYNPUF_ID.sort_values().index \ntype_counts = title_type.DESYNPUF_ID.sort_values()\n\nplt.subplot(the_grid[0, 0], aspect=1, title='Breakdown by gender')\ntype_show_ids = plt.pie(type_counts, labels=type_labels, autopct='%1.1f%%', shadow=True, colors=colors)\n\n#Pie chart for race\ntitle_type = ben_merge.groupby('BENE_RACE_CD').agg('count')\ntype_labels = title_type.DESYNPUF_ID.sort_values().index \ntype_counts = title_type.DESYNPUF_ID.sort_values()\n\nplt.subplot(the_grid[0, 1], aspect=1, title='Breakdown by race')\ntype_show_ids = plt.pie(type_counts, labels=type_labels, autopct='%1.1f%%', shadow=True, colors=colors)\nplt.show()","5829cc40":"#patients with esrd\nesrd_count = all_claims_ben[all_claims_ben['BENE_ESRD_IND_f']==1].groupby('BENE_ESRD_IND_f')['DESYNPUF_ID'].nunique()\nprint(esrd_count)\n#display(all_claims_ben.groupby('BENE_ESRD_IND_f')['DESYNPUF_ID'].nunique())\n\n# #patients with alzhmiers\nalzh_count = all_claims_ben[all_claims_ben['SP_ALZHDMTA_f']==1].groupby('SP_ALZHDMTA_f')['DESYNPUF_ID'].nunique()\nprint(alzh_count)\n\n#display(all_claims_ben.groupby('SP_ALZHDMTA_f')['DESYNPUF_ID'].nunique())\n\n#patients with chf\nchf_count = all_claims_ben[all_claims_ben['SP_CHF_f']==1].groupby('SP_CHF_f')['DESYNPUF_ID'].nunique()\nprint(chf_count)\n\n#display(all_claims_ben.groupby('SP_CHF_f')['DESYNPUF_ID'].nunique())\n\n#patients with chronic kidney failure\nkidnfail_count = all_claims_ben[all_claims_ben['SP_CHRNKIDN_f']==1].groupby('SP_CHRNKIDN_f')['DESYNPUF_ID'].nunique()\nprint(kidnfail_count)\n\n#display(all_claims_ben.groupby('SP_CHRNKIDN_f')['DESYNPUF_ID'].nunique())\n\n#patients with cancer\ncancer_count = all_claims_ben[all_claims_ben['SP_CNCR_f']==1].groupby('SP_CNCR_f')['DESYNPUF_ID'].nunique()\nprint(cancer_count)\n\n#display(all_claims_ben.groupby('SP_CNCR_f')['DESYNPUF_ID'].nunique())\n\n#patients with Copd\ncopd_count = all_claims_ben[all_claims_ben['SP_COPD_f']==1].groupby('SP_COPD_f')['DESYNPUF_ID'].nunique()\nprint(copd_count)\n\n#display(all_claims_ben.groupby('SP_COPD_f')['DESYNPUF_ID'].nunique())\n\n#patients with depression\ndeprs_count = all_claims_ben[all_claims_ben['SP_DEPRESSN_f']==1].groupby('SP_DEPRESSN_f')['DESYNPUF_ID'].nunique()\nprint(deprs_count)\n\n#display(all_claims_ben.groupby('SP_DEPRESSN_f')['DESYNPUF_ID'].nunique())\n\n\n#patients with diabetes\ndiab_count = all_claims_ben[all_claims_ben['SP_DIABETES_f']==1].groupby('SP_DIABETES_f')['DESYNPUF_ID'].nunique()\nprint(diab_count)\n\n#display(all_claims_ben.groupby('SP_DIABETES_f')['DESYNPUF_ID'].nunique())\n\n#patients with Ischemic Heart Disease\nisch_count = all_claims_ben[all_claims_ben['SP_ISCHMCHT_f']==1].groupby('SP_ISCHMCHT_f')['DESYNPUF_ID'].nunique()\nprint(isch_count)\n\n#display(all_claims_ben.groupby('SP_ISCHMCHT_f')['DESYNPUF_ID'].nunique())\n\n#patients with Osteoporosis\noste_count = all_claims_ben[all_claims_ben['SP_OSTEOPRS_f']==1].groupby('SP_OSTEOPRS_f')['DESYNPUF_ID'].nunique()\ndisplay(oste_count)\n\n#display(all_claims_ben.groupby('SP_OSTEOPRS_f')['DESYNPUF_ID'].nunique())\n\n#patients with RA OA\nraoa_count = all_claims_ben[all_claims_ben['SP_RA_OA_f']==1].groupby('SP_RA_OA_f')['DESYNPUF_ID'].nunique()\nprint(raoa_count)\n\n#display(all_claims_ben.groupby('SP_RA_OA_f')['DESYNPUF_ID'].nunique())\n\n#patients with Storke\nstroke_count = all_claims_ben[all_claims_ben['SP_STRKETIA_f']==1].groupby('SP_STRKETIA_f')['DESYNPUF_ID'].nunique()\nprint(stroke_count)\n\n#display(all_claims_ben.groupby('SP_STRKETIA_f')['DESYNPUF_ID'].nunique())","f85e691d":"chronic_count=pd.DataFrame(\n{\n    'esrd_count': esrd_count,\n    'alzh_count':alzh_count,\n    'chf_count':chf_count,\n    'kidnfail_count': kidnfail_count,\n    'cancer_count':cancer_count,\n    'copd_count':copd_count,\n    'deprs_count': deprs_count,\n    'diab_count':diab_count,\n    'isch_count':isch_count,\n    'oste_count':oste_count,\n    'raoa_count':raoa_count,\n    'stroke_count':stroke_count        \n})","90ab20f1":"#print(len(chronic_count))\nchronic_count_transposed = chronic_count.T # or df1.transpose()\nchronic_count_transposed.columns = ['Prevalance']\nchronic_count_transposed['Prevalnce_Percentage']=(chronic_count_transposed['Prevalance']\/86711)*100\nchronic_count_transposed = chronic_count_transposed.sort_values(by=['Prevalance'],ascending=False)\nchronic_count_transposed","d02798af":"plt.rcParams[\"figure.figsize\"] = [10,5]\nfig, ax = plt.subplots()\nbottom = np.zeros(len(chronic_count_transposed))\nfor i, col in enumerate(chronic_count_transposed.columns):\n  ax.bar(\n      chronic_count_transposed.index, chronic_count_transposed[col], bottom=bottom, label=col,color=['blue','green'])\n  bottom += np.array(chronic_count_transposed[col])\n\n# Sum up the rows of our data to get the total value of each bar.\ntotals = chronic_count_transposed.sum(axis=1)\n# Set an offset that is used to bump the label up a bit above the bar.\ny_offset = 1000\n# Add labels to each bar.\nfor i, total in enumerate(totals):\n  ax.text(totals.index[i], total + y_offset, round(total), ha='center',\n          #weight='bold'\n         )\n\nax.set_title('Patients with Chronic Condition')\nax.set_xlabel('Chronic Condition')\nplt.xticks(rotation=80)\nax.set_ylabel('Number of claims')\n#ax.legend('Claim Type')\nplt.show()","20277f01":"plt.rcParams[\"figure.figsize\"] = [12,5]\nfig, (ax1,ax2) = plt.subplots(1,2)\nbottom = np.zeros(len(claims_by_claimtype))\nfor i, col in enumerate(claims_by_claimtype.columns):\n  ax1.bar(\n      claims_by_claimtype.index, claims_by_claimtype[col], bottom=bottom, label=col,color=['blue','green'])\n  bottom += np.array(claims_by_claimtype[col])\n\n# Sum up the rows of our data to get the total value of each bar.\ntotals = claims_by_claimtype.sum(axis=1)\n# Set an offset that is used to bump the label up a bit above the bar.\ny_offset = 10000\n# Add labels to each bar.\nfor i, total in enumerate(totals):\n  ax1.text(totals.index[i], total + y_offset, round(total), ha='center',\n          weight='bold')\n\nax1.set_title('Claim Distribution by Claim type')\nax1.set_xlabel('Encounter type')\nax1.set_ylabel('Number of claims')\n#ax1.legend('Claim Type')\n\nbottom2 = np.zeros(len(claimcost_by_claimtype))\nfor i, col in enumerate(claimcost_by_claimtype.columns):\n  ax2.bar(\n      claimcost_by_claimtype.index, claimcost_by_claimtype[col], bottom=bottom2, label=col,color=['blue','green'])\n  bottom += np.array(claimcost_by_claimtype[col])\n\n# Sum up the rows of our data to get the total value of each bar.\ntotals = claimcost_by_claimtype.sum(axis=1)\n# Set an offset that is used to bump the label up a bit above the bar.\ny_offset = 10000000\n# Add labels to each bar.\nfor i, total in enumerate(totals):\n  ax2.text(totals.index[i], total + y_offset, round(total), ha='center',\n          weight='bold')\n\nax2.set_title('Claim Amount Distribution by Claim type')\nax2.set_xlabel('Encounter Type')\nax2.set_ylabel('Claim Amount in 100B')\n#ax2.legend('Claim Type')\nplt.show()","5f976de8":"claimcost_by_payee = all_claims_adjusted.groupby('claim_type').agg(\n{\n    'total_medicare_cost':sum,\n    'total_payer_cost':sum,\n    'total_patient_cost':sum\n})\n\nclaimcost_by_payee = pd.DataFrame(\n{\n    'medicare_cost':claimcost_by_payee['total_medicare_cost'],\n    'payer_cost':claimcost_by_payee['total_payer_cost'],\n    'patient_cost':claimcost_by_payee['total_patient_cost']\n})","097bada5":"claimcost_by_payee_perstacked = claimcost_by_payee.apply(lambda x: x*100\/sum(x), axis=1)\nplt.rcParams[\"figure.figsize\"] = [5,5]\nclaimcost_by_payee_perstacked.plot.bar(stacked=True)\nplt.show()","308c71e9":"plt.rcParams[\"figure.figsize\"] = [7,10]\nfig, ax = plt.subplots()\nbottom = np.zeros(len(claimcost_by_payee_perstacked))\nfor i, col in enumerate(claimcost_by_payee_perstacked.columns):\n   ax.bar(\n       claimcost_by_payee_perstacked.index,claimcost_by_payee_perstacked[col],bottom=bottom, label=col)\n   bottom += np.array(claimcost_by_payee_perstacked[col])\n\n# # Sum up the rows of our data to get the total value of each bar.\n# totals = temp_2.sum(axis=1)\n# # Set an offset that is used to bump the label up a bit above the bar.\n# y_offset = 3000000\n# # Add labels to each bar.\n# for i, total in enumerate(totals):\n#   ax.text(totals.index[i], total + y_offset, round(total), ha='center',\n#           weight='bold')\n\ny_offset = 1\n# For each patch (basically each rectangle within the bar), add a label.\nfor bar in ax.patches:\n  ax.text(\n      # Put the text in the middle of each bar. get_x returns the start\n      # so we add half the width to get to the middle.\n      bar.get_x() + bar.get_width() \/ 2,\n      # Vertically, add the height of the bar to the start of the bar,\n      # along with the offset.\n      bar.get_y() + y_offset,\n      # This is actual value we'll show.\n      round(bar.get_height()),\n      # Center the labels and style them a bit.\n      ha='center',\n      #weight='bold',\n      size=10\n  )\n\n#ax.set_title('top 10 prevalent diseases: Cost by Claim Type')\n#ax.legend(frameon=False, loc='upper center', ncol=3)\n\nax.set_title('Claim Amount % Breakdown by Entity')\nax.set_xlabel('Encounter Type')\nax.set_ylabel('Amount paid in %')\nax.legend(frameon=False, loc='upper center', ncol=3)\nplt.show()","32669a04":"list_chronic_conditions_all = [\"BENE_ESRD_IND_f\",\"SP_ALZHDMTA_f\",\"SP_CHF_f\",\"SP_CHRNKIDN_f\",\"SP_CNCR_f\",\"SP_COPD_f\",\"SP_DEPRESSN_f\",\"SP_DIABETES_f\",\"SP_ISCHMCHT_f\",\"SP_OSTEOPRS_f\",\"SP_RA_OA_f\",\"SP_STRKETIA_f\"]","9c75cd3f":"all_claims_ben['no_chronic_all'] = 0\n\nfor i in range(0,854942):\n    chronic_condition_count = 0\n    for chronic_condition in list_chronic_conditions_all:\n        if all_claims_ben.at[i,chronic_condition] == 1:\n            chronic_condition_count = chronic_condition_count + 1\n    all_claims_ben.at[i,'no_chronic_all'] = chronic_condition_count","2fdbfedc":"all_claims_ben.no_chronic_all","f9da840c":"all_claims_ben.groupby('no_chronic_all').agg(\n{\n    'CLM_ID':'count',\n    'total_cost':'mean'  \n})","6833fa07":"all_claims_ben.groupby('no_chronic_all').agg(\n{\n    'CLM_ID':'count',\n    'total_cost':'mean'\n    \n}).plot.bar()","67b33f3d":"top_10_diag_code_ordered = ['78605 |Shortness of breath','V5789 |Care involving other specified rehabilitation procedure',\n                           '78650 | Chest pain, unspecified','486 |Pneumonia, organism unspecified',\n                           '4280 |Congestive heart failure, unspecified','41401| Coronary atherosclerosis of native coronary artery',\n                           '0389| Unspecified septicemia','7802|Syncope and collapse', '78900| Abdominal pain, unspecified site', '78097|Altered mental status']\n\ntop_10_diag_code = ['0389','41401','4280','486','51881','7802','78605','78650','78900','V5789']\n\n\ntop_10_diag_wdesc = ['0389|Unspecified septicemia','41401|Coronary atherosclerosis of native coronary artery',\n                   '4280|Congestive heart failure, unspecified','486|Pneumonia, organism unspecified',\n                    '51881|Acute respiratory failure','7802|Syncope and collapse','78605|Shortness of breath',\n                   '78650|Chest pain, unspecified','78900|Abdominal pain, unspecified site','V5789|Care involving other specified rehabilitation procedure']","22b48ebe":"top_10_diag = all_claims_adjusted.groupby(['ADMTNG_ICD9_DGNS_CD','long_desc'])['total_cost'].sum().nlargest(10)","76f88203":"#top_10_diag.plot.barh()\n#plt.xlabel('Cost in 10M')\n#plt.ylabel('Diagnosis')\n#plt.rcParams[\"figure.figsize\"] = [8,5]","77e4d76c":"top_10_cost = all_claims_adjusted[all_claims_adjusted['ADMTNG_ICD9_DGNS_CD'].isin(top_10_diag_code)]['total_cost'].sum()\ntotal_cost = all_claims_adjusted['total_cost'].sum()\n\ndisplay (top_10_cost)\ndisplay(total_cost)\ndisplay((top_10_cost\/total_cost)*100)","b63b6896":"plt.rcParams[\"figure.figsize\"] = [12,7]\nfig, ax = plt.subplots()\n\nx = np.arange(len(top_10_diag))\nwidth = 0.35\n\nax.set_ylabel('Cost in 10M')\nax.set_xlabel('Diagnosis')\nax.set_title('Top 10 Diagnosis by Cost Burden')\nax.set_xticks(x)\nax.set_xticklabels(top_10_diag_code_ordered)\nplt.xticks(rotation=80)\n\npps = ax.bar(x+width, top_10_diag, width, label='cost')\nfor p in pps:\n   height = p.get_height()\n   ax.annotate('{}'.format(height),\n      xy=(p.get_x() + p.get_width()\/2, height),\n      xytext=(0, 3), # 3 points vertical offset\n      textcoords=\"offset points\",\n      ha='center', va='bottom')\n\nplt.rcParams[\"figure.figsize\"] = [15,10]\nplt.show()","a0a2ac3e":"top_10_costby_claim_type = all_claims_adjusted[all_claims_adjusted['ADMTNG_ICD9_DGNS_CD'].isin(top_10_diag_code)].groupby(['ADMTNG_ICD9_DGNS_CD','claim_type'])['total_cost'].sum().unstack()\ntop_10_costby_claim_type = top_10_costby_claim_type.sort_values(by=['inpatient'],ascending=False)","4b9242d3":"plt.rcParams[\"figure.figsize\"] = [15,6]\nfig, ax = plt.subplots()\nbottom = np.zeros(len(top_10_costby_claim_type))\nfor i, col in enumerate(top_10_costby_claim_type.columns):\n   ax.bar(\n       top_10_costby_claim_type.index,top_10_costby_claim_type[col],bottom=bottom, label=col)\n   bottom += np.array(top_10_costby_claim_type[col])\n\n# # Sum up the rows of our data to get the total value of each bar.\n# totals = temp_2.sum(axis=1)\n# # Set an offset that is used to bump the label up a bit above the bar.\n# y_offset = 3000000\n# # Add labels to each bar.\n# for i, total in enumerate(totals):\n#   ax.text(totals.index[i], total + y_offset, round(total), ha='center',\n#           weight='bold')\n\ny_offset = 1000000\n# For each patch (basically each rectangle within the bar), add a label.\nfor bar in ax.patches:\n  ax.text(\n      # Put the text in the middle of each bar. get_x returns the start\n      # so we add half the width to get to the middle.\n      bar.get_x() + bar.get_width() \/ 2,\n      # Vertically, add the height of the bar to the start of the bar,\n      # along with the offset.\n      bar.get_y() + y_offset,\n      # This is actual value we'll show.\n      round(bar.get_height()),\n      # Center the labels and style them a bit.\n      ha='center',\n      weight='bold',\n      size=10\n  )\n\n#ax.set_title('top 10 prevalent diseases: Cost by Claim Type')\n#ax.legend(frameon=False, loc='upper center', ncol=3)\n\nx= np.arange(len(top_10_diag_code_ordered))\nax.set_title('Claim Amount Breakdown by Emocunter Type')\nax.set_xlabel('Encounter Type')\nax.set_xticks(x)\nax.set_xticklabels(top_10_diag_code_ordered)\nplt.xticks(rotation=85)\nax.set_ylabel('Claim Amount in 10M')\nax.legend()\nplt.show()","fde0f2a0":"top_10_costby_payee = all_claims_adjusted[all_claims_adjusted['ADMTNG_ICD9_DGNS_CD'].isin(top_10_diag_code)].groupby(['ADMTNG_ICD9_DGNS_CD','long_desc']).agg(\n{\n    'total_medicare_cost': sum,\n    'total_payer_cost': sum,\n    'total_patient_cost':sum\n})\n\ntop_10_costby_payee = top_10_costby_payee.sort_values(by=['total_medicare_cost'],ascending=False)","fd91719a":"top_10_costby_payee.plot.bar(stacked=True)\nplt.xticks(rotation=85)\nplt.show()","3944f590":"total_claim_cost = all_claims_adjusted[all_claims_adjusted['ADMTNG_ICD9_DGNS_CD'].isin(top_10_diag_code)].groupby(['ADMTNG_ICD9_DGNS_CD','long_desc'])['total_cost'].sum()\ntotal_claim_cost \n\navg_claim_cost= all_claims_adjusted[all_claims_adjusted['ADMTNG_ICD9_DGNS_CD'].isin(top_10_diag_code)].groupby(['ADMTNG_ICD9_DGNS_CD','long_desc'])['total_cost'].mean()\navg_claim_cost\n\ntop_10_cost_analysis = pd.DataFrame (\n{\n    'diag_code':top_10_diag_wdesc,\n    'total_claim_cost':total_claim_cost,\n    'avg_claim_cost':avg_claim_cost\n})","6362a19e":"plt.rcParams[\"figure.figsize\"] = [8, 5]\npx.treemap(\n                 top_10_cost_analysis, \n                 path= ['diag_code'],\n                 values= 'total_claim_cost',\n                 color='avg_claim_cost',\n                 color_continuous_scale='blues'\n)\n#fig.update_traces(name='top', selector=dict(type='treemap'))\n#fig.update_traces(visible=True, selector=dict(type='treemap'))\n#fig.show()","9fddabc5":"# calculating average number fo claims\/patient\ntotal_claims = all_claims_adjusted[all_claims_adjusted['ADMTNG_ICD9_DGNS_CD'].isin(top_10_diag_code)].groupby(['ADMTNG_ICD9_DGNS_CD','long_desc'])['CLM_ID'].count()\n#print(total_claims)\n\nunique_patients= all_claims_adjusted[all_claims_adjusted['ADMTNG_ICD9_DGNS_CD'].isin(top_10_diag_code)].groupby(['ADMTNG_ICD9_DGNS_CD','long_desc'])['DESYNPUF_ID'].nunique()\n#print(unique_patients)\n\navg_claim_per_patient = total_claims\/unique_patients","61300e69":"# calculating average days of stay\/ patient\ntotal_visit_days = all_claims_adjusted[all_claims_adjusted['ADMTNG_ICD9_DGNS_CD'].isin(top_10_diag_code)].groupby(['ADMTNG_ICD9_DGNS_CD','long_desc'])['visit_days'].sum()\n#print(total_claims)\n\nunique_patients= all_claims_adjusted[all_claims_adjusted['ADMTNG_ICD9_DGNS_CD'].isin(top_10_diag_code)].groupby(['ADMTNG_ICD9_DGNS_CD','long_desc'])['DESYNPUF_ID'].nunique()\n#print(unique_patients)\n\navg_visit_days_per_patient = total_visit_days\/unique_patients\navg_visit_days_per_patient","f37c889f":"#plt.rcParams[\"figure.figsize\"] = [8, 5]\nfig_2=avg_claim_per_patient\nplt.subplot(2,1,2)\nfig_2.plot.barh(subplots=True)\nplt.title('Average number of claims\/ patient')\nplt.xlabel('avg claim\/patient')\nplt.ylabel('diagnosis')\nplt.show()\n\n#plt.rcParams[\"figure.figsize\"] = [8, 5]\nfig_1 = avg_visit_days_per_patient\nplt.subplot(2,1,1)\nfig_1.plot.barh(subplots=True)\nplt.title('Average days of stay\/patient')\nplt.xlabel('avg days of stay\/patient')\nplt.ylabel('diagnosis')\nplt.show()","6bea567f":"list_chronic_conditions =[\"SP_ALZHDMTA_f\",\"SP_CHF_f\",\"SP_DEPRESSN_f\",\"SP_DIABETES_f\",\"SP_ISCHMCHT_f\"]","609fa9cd":"all_claims_ben['no_chronic'] = 0\n\nfor i in range(0,854942):\n    chronic_condition_count = 0\n    for chronic_condition in list_chronic_conditions:\n        if all_claims_ben.at[i,chronic_condition] == 1:\n            chronic_condition_count = chronic_condition_count + 1\n    all_claims_ben.at[i,'no_chronic'] = chronic_condition_count","67a87160":"all_claims_ben.iloc[:,[170,171,175,176,177,187]]","8560579a":"temp = all_claims_ben[all_claims_ben['ADMTNG_ICD9_DGNS_CD'].isin(['51881','V5789','0389'])].groupby(['ADMTNG_ICD9_DGNS_CD','no_chronic_all']).agg(\n    {\n        'total_cost':sum\n    }).unstack()","3392a175":"plt.rcParams[\"figure.figsize\"] = [12,7]\ntemp.plot.bar()\nplt.show()\n# fig, ax = plt.subplots()\n\n# x = np.arange(len(top_10_diag))\n# width = 0.35\n\n# ax.set_ylabel('Cost in 10M')\n# ax.set_xlabel('Diagnosis')\n# ax.set_title('Top 10 Diagnosis by Cost Burden')\n# ax.set_xticks(x)\n# ax.set_xticklabels(top_10_diag_code_ordered)\n# plt.xticks(rotation=80)\n\n# pps = ax.bar(x+width, top_10_diag, width, label='cost')\n# for p in pps:\n#    height = p.get_height()\n#    ax.annotate('{}'.format(height),\n#       xy=(p.get_x() + p.get_width()\/2, height),\n#       xytext=(0, 3), # 3 points vertical offset\n#       textcoords=\"offset points\",\n#       ha='center', va='bottom')\n\n# plt.rcParams[\"figure.figsize\"] = [15,10]\n# plt.show()","3d595115":"ishc_diag_cost = all_claims_ben[(all_claims_ben['ADMTNG_ICD9_DGNS_CD'].isin(top_10_diag_code))&(all_claims_ben['SP_ISCHMCHT_f']==1)].groupby(['ADMTNG_ICD9_DGNS_CD']).agg(\n    {\n        'DESYNPUF_ID':'nunique',\n        'total_cost': sum\n    })\ndisplay(ishc_diag_cost)\n\ndiab_diag_cost = all_claims_ben[(all_claims_ben['ADMTNG_ICD9_DGNS_CD'].isin(top_10_diag_code))&(all_claims_ben['SP_DIABETES_f']==1)].groupby(['ADMTNG_ICD9_DGNS_CD']).agg(\n    {\n        'DESYNPUF_ID':'nunique',\n        'total_cost': sum\n    })\ndisplay(diab_diag_cost)\n\nchf_diag_cost = all_claims_ben[(all_claims_ben['ADMTNG_ICD9_DGNS_CD'].isin(top_10_diag_code))&(all_claims_ben['SP_CHF_f']==1)].groupby(['ADMTNG_ICD9_DGNS_CD','SP_CHF_f']).agg(\n    {\n        'DESYNPUF_ID':'nunique',\n        'total_cost': sum\n    })\ndisplay(chf_diag_cost)\n\ndep_diag_cost = all_claims_ben[(all_claims_ben['ADMTNG_ICD9_DGNS_CD'].isin(top_10_diag_code))&(all_claims_ben['SP_DEPRESSN_f']==1)].groupby(['ADMTNG_ICD9_DGNS_CD','SP_DEPRESSN_f']).agg(\n    {\n        'DESYNPUF_ID':'nunique',\n        'total_cost': sum\n    })\ndisplay(dep_diag_cost)\n\nalzh_diag_cost = all_claims_ben[(all_claims_ben['ADMTNG_ICD9_DGNS_CD'].isin(top_10_diag_code))&(all_claims_ben['SP_ALZHDMTA_f']==1)].groupby(['ADMTNG_ICD9_DGNS_CD','SP_ALZHDMTA_f']).agg(\n    {\n        'DESYNPUF_ID':'nunique',\n        'total_cost': sum\n    })\ndisplay(alzh_diag_cost)","de33b6a7":"top_5_chronic_diag_corr = pd.DataFrame(\n{\n    'ishc_diag_cost':ishc_diag_cost,\n    'diab_diag_cost':diab_diag_cost\n    #'chf_diag_cost':chf_diag_cost,\n    #'dep_diag_cost':dep_diag_cost,\n    #'alzh_diag_cost':alzh_diag_cost   \n})","53d90bdd":"temp_1 = all_claims_ben[(all_claims_ben['ADMTNG_ICD9_DGNS_CD'].isin(top_10_diag_code)) & (all_claims_ben['SP_ISCHMCHT']==1)].groupby('ADMTNG_ICD9_DGNS_CD')['total_cost'].mean().nlargest(10)\ntemp_1","937b3335":"**Merging and prepping Claims dataset with ICD look up**","47f480ae":"**Loading merged beneficiary data**","f5175545":"# Looking at top 10 Diagnosis with highest cost burden","b34c4c4b":"# Loading the dataset","c2289740":"# Exploring the dataset","20566241":"**Looking at the overall cost burden**\n* By encounter type\n* By cost borne by payee","47543257":"Unique patients in the dataset: **116,352** <br><br>\nThe beneficiary dataset is provided in 3 files, 1 for each year i.e. 2008,2009,2010. The 3 files have been merged outside of this notebook, adjusted and handled for duplicates and the merged dataset i.e. ben_merge has been added to this notebook and used for analysis.","ccff342c":"![](https:\/\/i.ibb.co\/0JvY1KL\/screenshot.png)","d3b141a5":"The cost breakdown by claim type seems to aligned with the overall trend  i.e. inpatient contributes to max percentage of the cost although some of the go higher than the average.. see if we want to include the percentage graph here..","f3841e09":"each patient on an average seems to be making 1 claim, might not be a driver but on the other hand the days of stay for\/patient is higher than the rest for the 3 diagnosis identified above. So number of days of stay could be a driver indicating high cost burden at a patient level","36585f45":"Number of patients who have made atleast 1 claim:  **86,711** i.e. **74%** of patients have made a claim<br><br>\nTotal number of claims made by these patients: **854,942**<br>\nTotal Claim Amount: **$1,050,041,062**<br>\nNumber of unique diagnosis claimed for in the dataset: **4798**\n","3f748d97":"inline with the observation earlier.. highest percentage of cost is borne by the medicare..","f4eb3735":"Looking at number of patients and cost across the top 5 chronic conditions\n\nIschemic Heart Disease\nDiabetes\nCHF\nDepression\nAlzh","b3c08d33":"**By Cost Borne by Payee**","7b3f58c2":"**Loading and prepping claims data**","d1442159":"**Takeaway:**\n\nTop 10 diagnosis contribute to ~ 18% of the overcall claim amount i.e. 1,050,041,062 with Shortness of breadth leading the race\n\nThese top 10 diangosis codes account for 0.2% of all the diagnosis claimed for","514341a2":"**Takeaway: Only ~8% of overall claims are inpatient but it contributes to ~ 71% of the claim amount**","72c319ba":"**Looking at claims cost by number of chronic conditions\/patient**","4fe9ffce":"**Merging inaptient and outpatient**","5ed0b9b5":"**Understanding distribution of the Cost Burden by Entity**\n\nThe claim amount for each claim is split across and borne by 3 entities: \n* Medicare\n* Private Payer(if the patient has a private insurance over and above Medicare)\n* Patient\n\nThe method to obtain the cost borne by each entity is explained\n\n* **Medicare**: Calculated by adding (CLM_PMT_AMT + PER DIEM charge for each day the patient stays in the hospital). The PER DIEM charge does not apply for outpatient visits\n* **Private Payer**(if the patient has a private insurance over and above Medicare): Is the NCH_PRMRY_PYR_CLM_PD_AMT amount\n* **Patient**: Calculated by adding the (Deductible amount + Coinsurance Liability Amount + Blood Deductible amount)\n\nThe total amount\/ claim will be the sum of the 3 costs","4faabea5":"![](https:\/\/i.ibb.co\/680fLw1\/image-1.png)","a952857d":"takeaway: Acute respiratory failure,Care involving other rehabilitation procedure,Unspecified septicemia seem to have lower overall claim cost by extremely high avg claim cost which could indicate high cost burden at a patient level which could be because of multiple factors - number of claims\/ patient., number of days of stay\/ patient","c8d08c8c":"**Merging claims dataset with merged beneficiary data**","ae70357d":"**Loading ICD9 Lookup Datasets**","d7b7bbb5":"**Looking at cost burden at a patient level**","1f2508a7":"**By Encounter Type**","37019677":"# What is in the dataset?\n\nThe DE-SynPUF contains five types of data for the period 2008-2010:\n* Beneficiary Summary \n* Inpatient Claims \n* Outpatient Claims \n* Carrier Claims\n* Prescription Drug Events \n\nDue to file size limitations, each data type in the CMS Linkable 2008-2010 Medicare DE-SynPUF is released in 20 separate samples (essentially each is a .25% sample) \n\n**For our analysis we are using the Sample 1 dataset and working with the Beneficiary Summary, Inpatient claims, and Outpatient claims datasets.**","6c848ac7":"# The Dataset\n\nDataset used for this analysis is the *CMS 2008-2010 Data Entrepreneurs\u2019 Synthetic Public Use File (DE-SynPUF)*.This dataset was created by *Centre for Medicare and Medicaid services (CMS)* to allow interested parties to gain familiarity in using *Medicare claims data* while protecting beneficiary privacy.\n\n**What is Centre for Medicare and Medicaid services (CMS)?**\nThe Centers for Medicare & Medicaid Services is a federal agency within the US that administers the nation\u2019s major healthcare programs including Medicare, Medicaid, and CHIP.\n\n**What is Medicare claims data?**\nAdministrative data or Medicare Fee-for-Service claims (administrative) data, also known as health services utilization data, are collected by the CMS and derived from reimbursement information or the payment of bills. Claims data are clinically valid and include various key attributes related to care such as admission and discharge dates, diagnoses and procedure codes, source of care, date of death, and demographic data (e.g., age, race and ethnicity, place of residence).\n\n**What are the CMS 2008-2010 Data Entrepreneurs\u2019 Synthetic Public Use Files (DE-SynPUF)?**\nThe DE-SynPUF dataset is a synthetic version of the Medicare Claims dataset.CMS created the DE-SynPUF data to make available a realistic set of claims data in the public domain. Although the DE-SynPUF has very limited inferential research value to draw conclusions about Medicare beneficiaries due to the synthetic processes used to create the file,they increase access to realistic Medicare claims data files in a timely and less expensive manner to spur the innovation necessary to achieve the goals of better care for beneficiaries and improve the health of the population."}}