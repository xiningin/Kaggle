{"cell_type":{"ac768436":"code","fce7fe6e":"code","87dc30d9":"code","a9db0ff1":"code","362f3347":"code","a2e5d0c1":"code","0fae1ae1":"code","15efbc94":"code","63bc155d":"code","8b047d04":"code","cad2c502":"code","ebcdbde5":"code","20c2750f":"code","66fa794a":"markdown"},"source":{"ac768436":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fce7fe6e":"data = pd.read_csv('\/kaggle\/input\/bejaiaregion\/Bejaia Region Dataset.csv')\ndata.head()\ndata.keys()","87dc30d9":"data.drop('day', axis = 1 , inplace = True)\ndata.drop('month', axis = 1 , inplace = True)\ndata.drop('year', axis = 1 , inplace = True)","a9db0ff1":"data.head()\n#missing value'lar\u0131 bulmak i\u00e7in i\u015flemler\n\nmissing_values_count = data.isnull().sum()\n\n# look at the # of missing points in the first ten columns\nmissing_values_count[0:10]\n#missin value yok ama silme function'\u0131 burada dursun\n# remove all the rows that contain a missing value\ndata.dropna()","362f3347":"import seaborn as sns\nsns.heatmap(data.corr(), annot =True)\n#DMC-FWI aras\u0131nda \u00e7ok y\u00fcksek bir ili\u015fki var, bunlar\u0131n \u00fczerine ilerleyece\u011fiz.","a2e5d0c1":"from sklearn.preprocessing import LabelEncoder\nlabel_encoder = LabelEncoder()\nx = data['Classes  ']\ndata['Classes  '] = label_encoder.fit_transform(x)\n# class de\u011ferlerini kullanmak i\u00e7in categorical to nominal yap\u0131yoruz\ndata","0fae1ae1":"import matplotlib.pyplot as plt\nplt.scatter(data['FWI'],data['DMC'], alpha = 0.7)\nplt.xlabel('FWI')\nplt.ylabel('DMC')\nplt.show()\n#en y\u00fcksek relation'a sahiplerin grafi\u011fine bak\u0131yoruz\nplt.scatter(data['FWI'],data['ISI'], alpha = 0.7)\nplt.xlabel('FWI')\nplt.ylabel('ISI')\nplt.show()\n\nplt.scatter(data['DC'],data['DMC'], alpha = 0.7)\nplt.xlabel('DC')\nplt.ylabel('DMC')\nplt.show()","15efbc94":"dc = data[['DC']].values\ndmc = data[['DMC']].values","63bc155d":"from sklearn import linear_model\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix, classification_report\n\nmodel = linear_model.LinearRegression()\n\nX_train, X_test, Y_train, Y_test = train_test_split(dc, dmc, test_size = 0.3 , random_state= 123)\n\nmodel.fit(X_train , Y_train) #ba\u011f\u0131ms\u0131z ve ba\u011f\u0131ml\u0131 de\u011fi\u015fken varsay\u0131yoruz dc ve dmc'yi\n\ny_tahmin = model.predict(X_test)\n\nmodel.score(X_test, Y_test)\n\nsns.lmplot(x = 'DC', y= 'DMC', hue ='Classes  ', data = data)\nplt.show()","8b047d04":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_curve, roc_auc_score\nfrom sklearn.metrics import confusion_matrix, classification_report\n\nX = data.drop('Classes  ',axis = 1 ).values\nY = data['Classes  ']\n\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.5 , random_state= 123)\n#iki sonu\u00e7lu bir data oldu\u011fu i\u00e7in logistic regression kullanmak daha mant\u0131kl\u0131d\u0131r\nloj_model = LogisticRegression(solver='liblinear')\nloj_model.fit(X_train, Y_train)\n\nY_tahmin = loj_model.predict(X_test)\n\nprint(confusion_matrix(Y_test, Y_tahmin))\n\nprint(classification_report(Y_test,Y_tahmin, target_names = ['fire', 'not fire']))","cad2c502":"from sklearn.tree import DecisionTreeClassifier\n\ntree = DecisionTreeClassifier(max_depth = 4 )\ntree.fit(X , Y)\n\n","ebcdbde5":"from IPython.display import display\nimport graphviz \nfrom sklearn.tree import export_graphviz\ndisplay( graphviz.Source(export_graphviz(tree,feature_names= ['Temperature','RH','Ws','Rain','FFMC','DMC','DC','ISI','BUI','FWI'], class_names = ['fire', 'not fire'])))","20c2750f":"X = data.drop('Classes  ',axis = 1 ).values\nY = data['Classes  ']\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.4 , random_state= 123)\n\n\ntree_model = DecisionTreeClassifier(max_depth = 6)\ntree_model.fit(X_train, Y_train)\n\ny_preds = tree_model.predict(X_test)\n\n\n\nprint(confusion_matrix(Y_test , y_preds))\n\nprint(classification_report(Y_test , y_preds, target_names = ['fire', 'not fire'] ))","66fa794a":"Grafikte g\u00f6r\u00fcld\u00fc\u011f\u00fc \u00fczere her iki de\u011ferin d\u00fc\u015f\u00fck oldu\u011fu zamanlarda yang\u0131n olma olas\u0131l\u0131\u011f\u0131 daha y\u00fcksek olamkta ama y\u00fcksek olma durumlar\u0131nda yang\u0131n g\u00f6r\u00fclme olas\u0131l\u0131\u011f\u0131 \u00e7ok y\u00fcksek oranda d\u00fc\u015fm\u00fc\u015ft\u00fcr."}}