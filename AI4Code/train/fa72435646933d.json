{"cell_type":{"155adba3":"code","a88577eb":"code","a8dfe124":"code","8dc26ef4":"code","8e0ad29d":"code","3d0ac2c7":"code","b0c92043":"code","7e90755f":"code","d6a0a6a6":"code","618bb318":"code","260646fd":"code","7d61a373":"code","76dce288":"code","bffb400f":"code","64690c7f":"code","a73cecfe":"code","dd889134":"code","3db8de11":"code","775fde3e":"code","825d2829":"code","b0508a63":"code","77bd0189":"code","83d11ece":"code","4c2b006f":"code","e65fa653":"code","8aa8ebbc":"code","0ca7e7f4":"code","cb20e95b":"code","3ce80a89":"code","28743319":"code","31e5fd98":"code","e3a525cf":"code","38554f9a":"code","591b5b97":"code","5fb3dd6c":"code","667c886b":"code","66c12c10":"markdown","0ecb8771":"markdown","13e4f54e":"markdown","1258a39b":"markdown","d27091fa":"markdown","73598231":"markdown","03c20497":"markdown","7d6a5c32":"markdown","4a9ee4d9":"markdown","7ddbd634":"markdown","cd5a9687":"markdown"},"source":{"155adba3":"#installation of libraries\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\n\n#to display all columns and rows:\npd.set_option('display.max_columns', None); pd.set_option('display.max_rows', None);\n\n#we determined how many numbers to show after comma\npd.set_option('display.float_format', lambda x: '%.0f' % x)\nimport matplotlib.pyplot as plt","a88577eb":"#calling the dataset\ndf = pd.read_csv(\"..\/input\/online-retail-ii-uci\/online_retail_II.csv\")","a8dfe124":"#selection of the first 5 observations\ndf.head() ","8dc26ef4":"#ranking of the most ordered products\ndf.groupby(\"Description\").agg({\"Quantity\":\"sum\"}).sort_values(\"Quantity\", ascending = False).head()","8e0ad29d":"#how many invoices are there in the data set\ndf[\"Invoice\"].nunique()","3d0ac2c7":"#which are the most expensive products?\ndf.sort_values(\"Price\", ascending = False).head()","b0c92043":"#top 5 countries with the highest number of orders\ndf[\"Country\"].value_counts().head()","7e90755f":"#total spending was added as a column\ndf['TotalPrice'] = df['Price']*df['Quantity']","d6a0a6a6":"#which countries did we get the most income from\ndf.groupby(\"Country\").agg({\"TotalPrice\":\"sum\"}).sort_values(\"TotalPrice\", ascending = False).head()","618bb318":"df[\"InvoiceDate\"].min() #oldest shopping date","260646fd":"df[\"InvoiceDate\"].max() #newest shopping date","7d61a373":"#to make the assessment easier, today's date is set as January 1, 2012.  \ntoday = pd.datetime(2012,1,1) \ntoday","76dce288":"#changing the data type of the order date\ndf['InvoiceDate'] = pd.to_datetime(df['InvoiceDate'])","bffb400f":"#taking values greater than 0, this will be easier in terms of evaluation\ndf = df[df['Quantity'] > 0]\ndf = df[df['TotalPrice'] > 0]","64690c7f":"df.dropna(inplace = True) #removal of observation units with missing data from df","a73cecfe":"df.shape #size information","dd889134":"df.describe([0.01,0.05,0.10,0.25,0.50,0.75,0.90,0.95, 0.99]).T\n#explanatory statistics values of the observation units corresponding to the specified percentages\n#processing according to numerical variables","3db8de11":"df.head()","775fde3e":"df.info() \n#dataframe's index dtype and column dtypes, non-null values and memory usage information","825d2829":"# finding Recency and Monetary values.\ndf_x = df.groupby('Customer ID').agg({'TotalPrice': lambda x: x.sum(), #monetary value\n                                        'InvoiceDate': lambda x: (today - x.max()).days}) #recency value\n#x.max()).days; last shopping date of customers","b0508a63":"df_y = df.groupby(['Customer ID','Invoice']).agg({'TotalPrice': lambda x: x.sum()})\ndf_z = df_y.groupby('Customer ID').agg({'TotalPrice': lambda x: len(x)}) \n#finding the frequency value per capita","77bd0189":"#creating the RFM table\nrfm_table= pd.merge(df_x,df_z, on='Customer ID')","83d11ece":"#determination of column names\nrfm_table.rename(columns= {'InvoiceDate': 'Recency',\n                          'TotalPrice_y': 'Frequency',\n                          'TotalPrice_x': 'Monetary'}, inplace= True)","4c2b006f":"rfm_table.head()","e65fa653":"#RFM score values \nrfm_table['RecencyScore'] = pd.qcut(rfm_table['Recency'],5,labels=[5,4,3,2,1])\nrfm_table['FrequencyScore'] = pd.qcut(rfm_table['Frequency'].rank(method=\"first\"),5,labels=[1,2,3,4,5])\nrfm_table['MonetaryScore'] = pd.qcut(rfm_table['Monetary'],5,labels=[1,2,3,4,5])","8aa8ebbc":"rfm_table.head()","0ca7e7f4":"#RFM score values are combined side by side in str format\n(rfm_table['RecencyScore'].astype(str) + \n rfm_table['FrequencyScore'].astype(str) + \n rfm_table['MonetaryScore'].astype(str)).head()","cb20e95b":"#calculation of the RFM score\nrfm_table[\"RFM_SCORE\"] = rfm_table['RecencyScore'].astype(str) + rfm_table['FrequencyScore'].astype(str) + rfm_table['MonetaryScore'].astype(str)","3ce80a89":"rfm_table.head()","28743319":"#transposition of the RFM table. This makes it easier to evaluate.\nrfm_table.describe().T","31e5fd98":"#customers with RFM Score 555\nrfm_table[rfm_table[\"RFM_SCORE\"] == \"555\"].head()","e3a525cf":"#customers with RFM Score 111\nrfm_table[rfm_table[\"RFM_SCORE\"] == \"111\"].head()","38554f9a":"#segmenting of customers according to RecencyScore and FrequencyScore values\nseg_map = {\n    r'[1-2][1-2]': 'Hibernating',\n    r'[1-2][3-4]': 'At Risk',\n    r'[1-2]5': 'Can\\'t Lose',\n    r'3[1-2]': 'About to Sleep',\n    r'33': 'Need Attention',\n    r'[3-4][4-5]': 'Loyal Customers',\n    r'41': 'Promising',\n    r'51': 'New Customers',\n    r'[4-5][2-3]': 'Potential Loyalists',\n    r'5[4-5]': 'Champions'\n}","591b5b97":"#creation of segment variable\nrfm_table['Segment'] = rfm_table['RecencyScore'].astype(str) + rfm_table['FrequencyScore'].astype(str)\nrfm_table['Segment'] = rfm_table['Segment'].replace(seg_map, regex=True)","5fb3dd6c":"rfm_table.head()","667c886b":"rfm_table[[\"Segment\", \"Recency\",\"Frequency\",\"Monetary\"]].groupby(\"Segment\").agg([\"mean\",\"count\"])","66c12c10":"![Recency%20and%20Frequency%20Grid.png](attachment:Recency%20and%20Frequency%20Grid.png)","0ecb8771":"# Finding RFM Score\n\nRFM consists of Recency, Frequency, Monetary initials of expressions.\n\nIt is a technique that helps determine marketing and sales strategies based on buying habits of customers.\n\n- Recency: Time since customer last purchase\n\n- Frequency: Total number of purchases.\n\n- Monetary: Total spending by the customer.\n","13e4f54e":"**Table Comment**: The customer with the 12346th Customer ID made a purchase of \u00a3 77.556. The last purchase of this customer is about 1 year ago (347 days) and the number of purchases is 12.","1258a39b":"Resources;\n- https:\/\/docs.exponea.com\/docs\/rfm-segmentation\n\n- Recency and Frequency Grid Image: https:\/\/clevertap.com\/blog\/automate-user-segmentation-with-rfm-analysis\/","d27091fa":"# Data Preparation","73598231":"# Business Problem \n\n\nAn e-commerce company wants to segment its customers and determine marketing strategies according to these segments.\n\nFor this, we will define the behavior of customers and create groups according to the clusters in these behaviors.\n\nIn other words, we will take those who exhibit common behaviors into the same groups and we will try to develop sales and marketing specific techniques to these groups.\n\n\n### **Data Set Information:**\n\nThis Online Retail II data set contains all the transactions occurring for a UK-based and registered, non-store online retail between 01\/12\/2009 and 09\/12\/2011.The company mainly sells unique all-occasion gift-ware. Many customers of the company are wholesalers.\n\nLink to the Data Set: https:\/\/archive.ics.uci.edu\/ml\/datasets\/Online+Retail+II\n\n### **Attribute Information:**\n\n- InvoiceNo: Invoice number. Nominal. A 6-digit integral number uniquely assigned to each transaction. If this code starts with the letter 'c', it indicates a cancellation.\n- StockCode: Product (item) code. Nominal. A 5-digit integral number uniquely assigned to each distinct product.\n- Description: Product (item) name. Nominal.\n- Quantity: The quantities of each product (item) per transaction. Numeric.\n- InvoiceDate: Invice date and time. Numeric. The day and time when a transaction was generated.\n- UnitPrice: Unit price. Numeric. Product price per unit in sterling (\u00c2\u00a3).\n- CustomerID: Customer number. Nominal. A 5-digit integral number uniquely assigned to each customer.\n- Country: Country name. Nominal. The name of the country where a customer resides.\n\n","03c20497":"- Can't Lose Segment;\n\n    - Customers in this segment have not recently made a purchase. For this reason, we need to prepare a discount and gift campaign for this segment. These customers made a large number of purchases when they made purchases before. However, recency values are lower than they should be. The campaign to be implemented for these customers should include both items purchased and recommendations based on previous activities. New and popular products associated with the products that they were interested in can also be included in this campaign. Situations that will cause these customers to stop buying need to be investigated.\n\n\n- Hibernating Segment;\n\n    - Customers in this segment have not made a purchase for a long time. However, by offering discounts, they may be attracted to another purchase.\n\n\n- Champions Segment;\n\n    - Customers in this segment are responsible for most of the revenue. Campaigns should be implemented to ensure the continuity of the shopping of these customers.","7d6a5c32":"We grouped the rfm table according to the mean and count values of the segment variable.","4a9ee4d9":"With \"regex = True\", we used the names like \"need attention\", \"can't lose\" instead of RFM scores to the data set.","7ddbd634":"# Data Understanding","cd5a9687":"## Remark: \n\n3 segments selected for evaluation are \"Can't Lose\", \"Hibernating\" and \"Champions\".\n\nNumber of customers for segments:\n\nCan't Lose = 71, Hibernating = 1522, Champions = 852\n\n\n- Can't Lose Segment;\n\n    - The last shopping date of the customers is on average 353 days before.\n    - Customers have made an average of 16 purchases.\n    - Customers spent an average of \u00a3 8356.\n\n\n- Hibernating Segment;\n\n    - The last shopping date of the customers is 481 days before average.\n    - Customers made an average of 1 purchases.\n    - Customers spent an average of \u00a3 438.\n\n\n- Champions Segment;\n\n    - The last shopping date of the customers is 30 days before average.\n    - Customers made an average of 19 purchases.\n    - Customers spent an average of \u00a3 10796.\n"}}