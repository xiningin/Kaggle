{"cell_type":{"33db041a":"code","0f9cb5b9":"code","96b00f2c":"code","8c47c30f":"code","81d3fe09":"code","f569264c":"code","a48cb42a":"code","65261ac4":"code","d56780ba":"code","b468ad71":"code","8847ea46":"code","3b8fdb93":"code","933ec0a4":"code","9fffce1e":"code","f78fcf56":"code","050cc796":"code","96308b05":"code","2ddf26ba":"code","8970f82c":"code","f4dcca6c":"code","f0a42bff":"code","32df947c":"code","ae71a337":"code","dee2ff2c":"code","9a353104":"code","3bed97bc":"code","d178d5b0":"code","a1e8267e":"code","77f3c4e6":"code","af0866ec":"code","f5f4577c":"code","84af13b4":"code","9820eebc":"code","fd83e5d2":"code","e62d906e":"code","a6effdd5":"markdown","21391416":"markdown"},"source":{"33db041a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0f9cb5b9":"import nltk\nimport matplotlib.pyplot as plt\nfrom nltk.stem import PorterStemmer\nfrom nltk.corpus import stopwords\nimport re\nimport string\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import train_test_split","96b00f2c":"data = pd.read_csv('\/kaggle\/input\/nlp-getting-started\/train.csv')","8c47c30f":"data.head()","81d3fe09":"def preprocess(tweets):\n   \n    # put data to lower case \n    tweets_lower = [tweet.lower() for tweet in tweets]\n    \n    #remove links\n    tweets_re = [re.sub(r'http\\S+', '', tweet) for tweet in tweets_lower]\n    #Remove Hashtags and @name\n    #tweets_re = [re.sub(r'@\\w+', '', tweet) for tweet in tweets_re]\n    #tweets_re = [re.sub(r'#\\w+', '', tweet) for tweet in tweets_re]\n    \n    \n    #tokenize the tweets and remove punctuations and stop words\n    stop_words = stopwords.words('english')\n    \n    tweet_token = []\n    ps = PorterStemmer()\n    clean_tweet = []\n    for tweet in tweets_re:\n            words = nltk.word_tokenize(tweet)\n            #remove Stopwords \/ Punctuations & Special characters\n            tweet_token = [ps.stem(word) for word in words if word not in stop_words and word not in string.punctuation] # and word.isalnum()]\n            tweet_sent = ' '.join(tweet_token)\n            clean_tweet.append(tweet_sent)\n            \n    return clean_tweet","f569264c":"print(preprocess(data.text[:3]))","a48cb42a":"#temp = data[(data.id > 444) & (data.id < 450)]\ntemp = data[(data.id == 445)] # & (data.id < 450)]\nprint(preprocess(temp.text))\ntemp.columns","65261ac4":"data_clean = preprocess(data.text)\ntarget = data.target \n","d56780ba":"data_clean[:5]","b468ad71":"x_train, x_test, y_train, y_test = train_test_split(data_clean, target, test_size = 0.2, \n                                                    stratify = target, random_state = 123)","8847ea46":"x_train[:5]","3b8fdb93":"tfidf = TfidfVectorizer().fit(x_train)","933ec0a4":"tfidf_train = tfidf.transform(x_train)\ntfidf_test = tfidf.transform(x_test)","9fffce1e":"print(tfidf_train.shape)\nprint(tfidf_test.shape)","f78fcf56":"svm_gs = LinearSVC(class_weight= 'balanced', random_state= 123)\nparams = {'C' : [1, 5, 10, 15]}\ngs_model = GridSearchCV(svm_gs, param_grid= params, scoring= 'recall', cv = 5)","050cc796":"gs_model.fit(tfidf_train, y_train)\n","96308b05":"gs_model.best_estimator_\ngs_model.best_params_\ngs_model.best_score_\ngs_model.cv_results_","2ddf26ba":"#gs_predict = gs_model.predict(tfidf_train)\n#gs_train_acc_score = accuracy_score(y_train, gs_predict)\n#gs_train_con_mat = confusion_matrix(y_train, gs_predict)\n#print(gs_train_acc_score)\n#print(gs_train_con_mat)","8970f82c":"#gs_predict_test = gs_model.predict(tfidf_test)\n#gs_test_acc_score = accuracy_score(y_test, gs_predict_test)\n#gs_test_con_mat = confusion_matrix(y_test, gs_predict_test)\n#print(gs_test_acc_score)\n#print(gs_test_con_mat)","f4dcca6c":"#print(classification_report(y_test, gs_predict_test))","f0a42bff":"#svm_gs = SVC(C = 5, class_weight= 'balanced', random_state= 123)\nsvm_gs = LinearSVC(random_state= 123)","32df947c":"svm_gs.fit(tfidf_train, y_train)","ae71a337":"predict_train_gs = svm_gs.predict(tfidf_train)\naccuracy_score(y_train, predict_train_gs)","dee2ff2c":"confusion_matrix(y_train, predict_train_gs)","9a353104":"predict_test_gs = svm_gs.predict(tfidf_test)\naccuracy_score_test = accuracy_score(y_test, predict_test_gs)\nconf_mat_test = confusion_matrix(y_test, predict_test_gs)","3bed97bc":"print(accuracy_score_test)\nprint(conf_mat_test)","d178d5b0":"pred_out = {}\npred_out['text'] = x_test\npred_out['target'] = y_test\npred_out['predicted'] = predict_test_gs\n\ntest_res = pd.DataFrame(pred_out)","a1e8267e":"test_res.head()","77f3c4e6":"test_res.to_csv('\/kaggle\/working\/test_res.csv', index= None)","af0866ec":"test_data = pd.read_csv('\/kaggle\/input\/nlp-getting-started\/test.csv')","f5f4577c":"test = preprocess(test_data.text)","84af13b4":"tfidf_test = tfidf.transform(test)","9820eebc":"test_predict = svm_gs.predict(tfidf_test)","fd83e5d2":"out_dict = {}\nout_dict['id'] = test_data.id\nout_dict['target'] = test_predict\noutput = pd.DataFrame(out_dict)","e62d906e":"output.to_csv('\/kaggle\/working\/result1.csv', index= None)","a6effdd5":"train = preprocess(data.text)\ntarget = data.target\ntfidf = TfidfVectorizer(max_features = 7000).fit(train)","21391416":"Read test file"}}