{"cell_type":{"4e29f3a4":"code","ff42a542":"code","f60a49ab":"code","848439ce":"code","b05cbe4c":"code","1014d389":"code","853254c3":"code","17399ae3":"code","6af76a26":"code","1eb1c3df":"code","37ec4e09":"code","6eb6ca6c":"code","02b461c3":"code","87a177bb":"code","f4ff4716":"code","87ebc9f0":"code","2d4fb02e":"code","d727c3c8":"code","c759aa10":"code","76a90f89":"code","420ff5cc":"markdown","38ec906a":"markdown","f707c2a9":"markdown","5cf908d3":"markdown","8790d592":"markdown","2fd3d2e6":"markdown","295ec913":"markdown","a9e7390d":"markdown","bfa5556d":"markdown","a9f2158c":"markdown"},"source":{"4e29f3a4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.datasets import fetch_openml\nimport matplotlib.pyplot as plt\nimport matplotlib\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ff42a542":"data=pd.read_csv('..\/input\/digit-recognizer\/train.csv')","f60a49ab":"data","848439ce":"x=data.drop(['label'],1)\ny=data['label']","b05cbe4c":"x=np.array(x)","1014d389":"i=2\nsome_digit=x[i]\nsome_digit_image=some_digit.reshape(28,28)\nplt.imshow(some_digit_image,cmap=matplotlib.cm.binary,interpolation='nearest')\nprint(y[i])","853254c3":"x[5].shape","17399ae3":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier","6af76a26":"LM=RandomForestClassifier()\nLM.fit(x,y)","1eb1c3df":"data_test=pd.read_csv('..\/input\/digit-recognizer\/test.csv')","37ec4e09":"test=np.array(data_test)","6eb6ca6c":"test","02b461c3":"predict_y=LM.predict(test)","87a177bb":"predict_y","f4ff4716":"predict_y.shape","87ebc9f0":"out_dist={'ImageId':[a for a in range(1,28001)],'Label':predict_y}\nansw=pd.DataFrame(out_dist)","2d4fb02e":"answ.to_csv('submission.csv', index=False)","d727c3c8":"answ","c759aa10":"from PIL import Image, ImageGrab","76a90f89":"im1 = Image.open('..\/input\/3image\/3.jfif')\ndef predict_digit1(img):\n    img = img.convert('L', dither=Image.NONE)\n    img = img.resize((28,28))\n    img = np.array(img)\n    img=np.invert(img)\n    plt.imshow(img,cmap=matplotlib.cm.binary,interpolation='nearest')\n    res = LM.predict([img.flatten()])\n    return res\nprint(predict_digit1(im1))","420ff5cc":"You can see that it clearely identify the image but its miss identify  in many Cases","38ec906a":"Creating dataframe of the output(predic_y)","f707c2a9":"Check data","5cf908d3":"LogisticRegression model","8790d592":"Train model","2fd3d2e6":"Saperate data into x and y","295ec913":"convert data_test into array","a9e7390d":"Testing data","bfa5556d":"**TEST USING REAL IMAGE**","a9f2158c":"Sample output"}}