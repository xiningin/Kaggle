{"cell_type":{"2fb2e343":"code","8451fe31":"code","8e5ced5c":"code","66ac3fcb":"code","a5e819fd":"code","33002ae2":"code","0eb718f7":"code","f9aceae9":"code","a1514043":"code","f37c2aa1":"code","7dccbe17":"code","744d1700":"code","901cf4f1":"code","0e6a94b2":"code","0e7080b9":"code","f255dfc2":"code","908f0dbf":"code","732cdd0f":"code","e2eaa9d9":"code","aefa425d":"code","d60d3067":"code","ce25cdd3":"code","add80aa0":"code","ed7922cf":"code","11dd7698":"code","4395812f":"code","637318d3":"code","1c53ed02":"code","2093c36b":"markdown"},"source":{"2fb2e343":"import pandas as pd","8451fe31":"df_labels = pd.read_csv('..\/input\/dog-breed-identification\/labels.csv')\ndf_labels.head()","8e5ced5c":"df_labels.shape","66ac3fcb":"df_labels['breed'].value_counts()","a5e819fd":"# train\uc5d0 breed 120\uac1c\uac00 \uc804\ubd80 \uc874\uc7ac\ud558\ub294\uc9c0 \ud655\uc778\ndf_labels['breed'].sort_values().unique","33002ae2":"labels_name = df_labels['breed'].sort_values().unique()","0eb718f7":"len(labels_name)","f9aceae9":"df_labels.head()","a1514043":"# label encording\nfrom sklearn.preprocessing import LabelEncoder\n\nencoder = LabelEncoder() # \uac1d\uccb4 \uc0dd\uc131\nencoder.fit(df_labels['breed']) # \uae30\uc900 \uc815\ubcf4\ndf_labels['breed']= encoder.transform(df_labels['breed']) # \ubcc0\ud658","f37c2aa1":"df_labels.head()","7dccbe17":"print(encoder.classes_)\nprint(encoder.inverse_transform([19,37]))","744d1700":"# df_labels['id'] ===> 000bec180eb18c7604dcecc8fe0dba07\ndf_labels['id'] = df_labels['id'] + '.jpg'","901cf4f1":"df_labels.head()","0e6a94b2":"# df_labels.info()\ndf_labels['breed'] = df_labels['breed'].astype(str)","0e7080b9":"df_labels.info()","f255dfc2":"from tensorflow.keras.preprocessing.image import ImageDataGenerator\n\ntrain_datagen = ImageDataGenerator ( \n    rescale =1\/255.,\n    rotation_range = 20,\n    width_shift_range = 0.1,\n    height_shift_range =0.1,\n    shear_range = 0.1,\n    zoom_range=0.1,\n    horizontal_flip=True,\n    fill_mode = 'nearest',\n    validation_split=0.2\n)\n\nval_datagen = ImageDataGenerator ( \n    rescale=1\/255. ,\n    validation_split=0.2\n)\n\n","908f0dbf":"train_dir = '..\/input\/dog-breed-identification\/train'","732cdd0f":"train_generator = train_datagen.flow_from_dataframe (\n    dataframe = df_labels,\n    directory = train_dir,\n    x_col = 'id' ,    # filename\n    y_col = 'breed',  # class\n    target_size = (150,150),\n    batch_size = 128,\n    class_mode = 'categorical',\n    subset = 'training',\n    seed = 7   \n)\n\n\nval_generator = val_datagen.flow_from_dataframe (\n    dataframe = df_labels,\n    directory = train_dir,\n    x_col = 'id' ,    # filename\n    y_col = 'breed',  # class\n    target_size = (150,150),\n    batch_size = 128,\n    class_mode = 'categorical',\n    subset = 'validation',\n    seed = 7   \n)","e2eaa9d9":"df_labels.head()","aefa425d":"from tensorflow.keras import layers, models, optimizers\n\nmodel = models.Sequential()\nmodel.add(layers.Conv2D(32, (3, 3), activation='relu',input_shape=(150,150,3)))\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Conv2D(64, (3, 3), activation='relu'))\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Conv2D(128, (3, 3), activation='relu'))\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Conv2D(128, (3, 3), activation='relu'))\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Flatten())\nmodel.add(layers.Dropout(0.5))\nmodel.add(layers.Dense(512, activation='relu'))\nmodel.add(layers.Dense(120, activation='softmax'))","d60d3067":"model.summary()","ce25cdd3":"model.compile(loss='categorical_crossentropy',\n              optimizer='rmsprop',\n              metrics=['accuracy'])\nhistory = model.fit(\n    train_generator,    \n    epochs = 3,     \n    steps_per_epoch=len(train_generator) - 1, # batch_size 128\n    validation_data=val_generator,\n    validation_steps = len(val_generator) - 1    \n)","add80aa0":"base_dir = '..\/input\/dog-breed-identification'\n\ntest_datagen = ImageDataGenerator ( \n    rescale=1\/255. \n)\n\ntest_generator = test_datagen.flow_from_directory (\n    base_dir,\n    target_size = (150,150),\n    batch_size = 128,\n    classes=['test']\n)","ed7922cf":"preds = model.predict(test_generator, batch_size=len(test_generator)-1)","11dd7698":"df_submission = pd.read_csv(\"..\/input\/dog-breed-identification\/sample_submission.csv\")\ndf_submission.head()","4395812f":"class_to_num = dict(zip(labels_name, range(120)))\nfor name in labels_name:  \n    df_submission[name] = preds[:,class_to_num[name]]","637318d3":"df_submission.head()","1c53ed02":"df_submission.to_csv('submission_dog_cnn.csv', index=False)","2093c36b":"0. Sequential \uac1d\uccb4 \uc0dd\uc131\n1. conv layer ( filter 32, kernel size (3,3), activation 'relu' , input_shape = ???? )\n2. pooling layer ( pool_size ( 2,2 ))\n3. conv layer ( filter 64, kernel size (3,3), activation 'relu')\n4. pooling layer ( pool_size ( 2,2 ))\n5. conv layer ( filter 128, kernel size (3,3), activation 'relu')\n6. pooling layer ( pool_size ( 2,2 ))\n7. conv layer ( filter 128, kernel size (3,3), activation 'relu')\n8. pooling layer ( pool_size ( 2,2 ))\n9. flatten layer\n9. Dropout (0.5)\n10. Dense layer \ucd9c\ub825 \ub274\ub7f0 \uc218 512\uac1c, \ud65c\uc131\ud654 \ud568\uc218 'relu'\n11. Dense layer \ucd9c\ub825 \ub274\ub7f0 \uc218 ?????, \ud65c\uc131\ud654 \ud568\uc218'????'"}}