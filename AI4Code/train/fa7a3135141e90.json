{"cell_type":{"224b6b46":"code","a1c085fd":"code","21094eac":"code","89570703":"code","de79b464":"code","38adbf33":"code","13d45ba9":"code","69ccaf59":"code","d8cac983":"code","cb032073":"code","e7a4b0a4":"code","7ec96aa8":"code","fde54faa":"code","105f736e":"code","12ef753e":"code","a9d5ec02":"code","e51f107b":"markdown","5f26ee44":"markdown","7fb6662e":"markdown","7fabab0b":"markdown","19384ff5":"markdown","f0a5d182":"markdown","8e050c74":"markdown","180238ac":"markdown","6ce7b5a1":"markdown","318bc2de":"markdown","035b9acc":"markdown","df82381c":"markdown"},"source":{"224b6b46":"!pip install pyspark","a1c085fd":"import numpy as np\nimport pandas as pd \nimport os\nimport pyspark\nfrom pyspark.sql import SparkSession\nfrom pyspark.sql.types import StructType, StructField, IntegerType, StringType\n\nfrom pyspark.sql.functions import round\nfrom pyspark.ml.feature import StringIndexer\nfrom pyspark.ml.feature import VectorAssembler\nfrom pyspark.ml.classification import DecisionTreeClassifier\nfrom pyspark.ml.classification import LogisticRegression\nfrom pyspark.ml.evaluation import MulticlassClassificationEvaluator, BinaryClassificationEvaluator\n","21094eac":"spark = SparkSession.builder \\\n                    .master('local[*]') \\\n                    .appName('ML with PySpark') \\\n                    .getOrCreate()\n# What version of Spark?\nprint(spark.version)\n","89570703":"flights_df = spark.read.csv('..\/input\/pyspark-datasets\/flights-larger.csv',\n                         sep=',',\n                         header=True,\n                         inferSchema=True,\n                         nullValue='NA')","de79b464":"# Get number of records\nprint(\"The data contain %d records.\" % flights_df.count())\n# View the first five records\nflights_df.show(5)","38adbf33":"# Check column data types\nprint(flights_df.dtypes)","13d45ba9":"# Remove the 'flight' column\nflights_df =  flights_df.drop('flight')\n\n# Remove records with missing 'delay' values\n#flights_valid_delay = flights_drop_column.filter('delay IS NOT NULL')\n\n# Remove records with missing values \nflights_df = flights_df.dropna()\nprint(flights_df.count())","69ccaf59":"# Convert columns 'mile' to 'km' and then drop it\nflights_km = flights_df.withColumn('km', round(flights_df.mile * 1.60934, 0)) \\\n                    .drop('mile')\n\n# Create 'label' column indicating whether a flight is delayed or not\nflights_km = flights_km.withColumn('label', (flights_km.delay >= 15).cast('integer'))\n\n# Check first five records\nflights_km.show(5)","d8cac983":"# Create an indexer, which identifies categories and then creates a new column with numeric index values\nflights_indexed = StringIndexer(inputCol='carrier', outputCol='carrier_idx').fit(flights_km).transform(flights_km)\n\n# Repeat the process for org column\nflights_indexed = StringIndexer(inputCol='org', outputCol='org_idx').fit(flights_indexed).transform(flights_indexed)\nflights_indexed.show(5)","cb032073":"# Create an assembler object\nassembler = VectorAssembler(inputCols=['mon', 'dom', 'dow',\n'carrier_idx', 'org_idx', 'km', 'depart', 'duration'], outputCol='features')\n# Consolidate predictor columns\nflights_assembled = assembler.transform(flights_indexed)\n# Check the resulting column\nflights_assembled.select('features', 'delay').show(5, truncate=False)","e7a4b0a4":"# Split into training and testing sets in a 80:20 ratio\nflights_train, flights_test = flights_assembled.randomSplit([0.8, 0.2], seed=42)\n\n# Check that training set has around 80% of records\ntraining_ratio = flights_train.count() \/ flights_assembled.count()\nprint(training_ratio)","7ec96aa8":"# Create a DT classifier object and fit to the training data\ntree = DecisionTreeClassifier()\ntree_model = tree.fit(flights_train)\n# Create predictions on test data\nprediction = tree_model.transform(flights_test)\nprediction.select('label', 'prediction', 'probability').show(5, False)","fde54faa":"# Create a confusion matrix\nprediction.groupBy('label', 'prediction').count().show()\n\n# Calculate the elements of the confusion matrix\nTN = prediction.filter('prediction = 0 AND label = prediction').count()\nTP = prediction.filter('prediction = 1 AND label = prediction').count()\nFN = prediction.filter('prediction = 0 AND label != prediction').count()\nFP = prediction.filter('prediction = 1 AND label != prediction').count()\n\n# Accuracy measures the proportion of correct predictions\naccuracy = (TN + TP) \/ (TN + TP + FN + FP)\nprint(accuracy)","105f736e":"# Create a classifier object and train on training data\nlogistic = LogisticRegression().fit(flights_train)\n# Create predictions for the testing data and show confusion matrix\nprediction = logistic.transform(flights_test)\nprediction.groupBy('label', 'prediction').count().show()","12ef753e":"# Calculate precision and recall\nprecision = TP \/ (TP + FP)\nrecall = TP \/ (TP + FN)\nprint('precision = {:.2f}\\nrecall    = {:.2f}'.format(precision, recall))\n\n# Find weighted precision\nmulti_evaluator = MulticlassClassificationEvaluator()\nweighted_precision = multi_evaluator.evaluate(prediction, {multi_evaluator.metricName: \"weightedPrecision\"})\n\n# Find AUC\nbinary_evaluator = BinaryClassificationEvaluator()\nauc = binary_evaluator.evaluate(prediction, {binary_evaluator.metricName: \"areaUnderROC\"})","a9d5ec02":"#Close spark session\nspark.stop()","e51f107b":"# Basic data exploration\n\n\nExploring basic info like:\n\n- How many records?\n- Which datatypes?\n- missing values etc.\n","5f26ee44":"The accuracy is decent but not a good one. We have a lot of false predictions.","7fb6662e":"We will use a local Spark cluster using all available cores, which will be accessible via a SparkSession object.","7fabab0b":"# **Predicting flight delays using PySpark**\n\nIn this Notebook we will predict flight delays using PySpark. We will use to basic machine learning models namely **Descision Tree** and **Logistic Regression** to achieve this task. \n\nSpark is currently the most popular technology to  process and work with big(large quantities) data. Also, in camparision to other distributed computing technologies, working with Spark is easier even for begginers. We will interact with spark using python PySpark library.\n\n# Input Data\nWe are going to use some airline flight data as a CSV file as input data. Short description of data fields is following:\n\n**Data columns:**\n\nmon \u2014 month (int between 1 and 12)\n\ndom \u2014 day of month (int between 1 and 31)\n\ndow \u2014 day of week (int; 1 = Monday and 7 = Sunday)\n\norg \u2014 origin airport (str; IATA code)\n\nmile \u2014 distance (int; miles)\n\ncarrier \u2014 carrier (str; IATA code)\n\ndepart \u2014 departure time (int; decimal hour)\n\nduration \u2014 expected duration (int; minutes)\n\ndelay \u2014 delay (int; minutes)\n\n(IATA -> International Air Transport Association)","19384ff5":"# First classification model:\n\n**Decision Trees: offers inherit simplicity and explanablility**","f0a5d182":"# **Machine Learning Models**\n\n","8e050c74":"# Seocond classification model:\n\n**Logistic Regression: simple and easy to train**","180238ac":"**Importing neccessary packages and libraries**","6ce7b5a1":"Please provide your valuable feedback and tips to improve efficiency or better models. If you found the notebook interesting or learn anything new, then please don't forget to upvote :-).","318bc2de":"# **Data preparation for training our ML model**\n\n# Data Prepartion includes:\n\n**Data Cleaning**\n- removing an uninformative column and\n- removing rows having missing vlaues\n\n**Column\/Data manipulation**\n- We will consider a flight to be \"delayed\" when it arrives 15 minutes or more after its scheduled time (this complies with FAA's defintion of delayed flight\n- Based on this definition, we will create new boolean column 'label' stating if a flight was delayed or not\n- Convert columns that hold categorical data(carrier & org) into indexed numerical values\n\n**Assembling columns**\n- The final stage consists of  consolidating all predictor columns into a single one","035b9acc":"Again the matrices are reflecting decent values but not good ones. Which means, improving in models' efficiency can be considered as potential future work.","df82381c":"**Evaluate the model**\nA confusion matrix gives a useful breakdown of predictions versus known values. It has four cells which represent the counts of:\nTrue Negatives (TN) \u2014 prediction is negative & label is negative\n\nTrue Positives (TP) \u2014 prediction is positive & label is positive\n\nFalse Negatives (FN) \u2014 prediction is negative & label is positive\n\nFalse Positives (FP) \u2014 prediction is positive & label is negative\n\nUsing these four measure, we can then calculate the accuravy of the model as follows:\n\n**Accuracy=(TN+TP)\/(TN+TP+FN+FP)**"}}