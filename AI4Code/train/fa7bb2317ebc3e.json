{"cell_type":{"a40d3d99":"code","2a3be1be":"code","6b60fdf8":"code","94bd01dd":"code","f457529e":"code","a0c5dc59":"code","b689dcc2":"code","9edd6b82":"code","ad371075":"code","52a5552a":"code","de3de959":"code","159b7abb":"code","5c340fff":"code","17b21616":"code","6bc4076b":"code","28b7b20d":"code","4a8e1205":"code","634a2869":"code","2ec3cb25":"code","749d731f":"code","28357f76":"code","59806c38":"code","fcad1b04":"code","7576760e":"code","89c5f489":"code","be58e7d9":"code","58ad3c7d":"code","023ffe44":"code","5ce66311":"code","be921cfd":"code","aa8be5b2":"code","6d027d26":"code","8d0eae03":"code","0443de2f":"code","910c581b":"code","d77c0fc0":"code","99a8f77f":"code","ed7b00b0":"code","48b3cbe5":"code","cf39ba9e":"code","67585542":"code","eb2b549a":"markdown","ad86e1ae":"markdown","4c323dbb":"markdown","a4edbe4c":"markdown","3a153d0f":"markdown","5e4efc7d":"markdown","566baaa0":"markdown","a433f302":"markdown","107fc524":"markdown","da7e88ab":"markdown","bbc6d1b6":"markdown","e5d6b38b":"markdown","9c364457":"markdown","fbed0480":"markdown","3ef0e90e":"markdown","6c490978":"markdown","c6bca7b6":"markdown","97f20973":"markdown","6a081a9e":"markdown","833124d4":"markdown","8e748d06":"markdown","33031531":"markdown","74bc3a62":"markdown"},"source":{"a40d3d99":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","2a3be1be":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom scipy.stats import norm\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.linear_model import Ridge\nfrom sklearn.linear_model import Lasso\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn import ensemble\n\nimport warnings\nwarnings.filterwarnings('ignore')","6b60fdf8":"df = pd.read_csv('\/kaggle\/input\/vehicle-dataset-from-cardekho\/car data.csv')","94bd01dd":"df.head()","f457529e":"plt.figure(figsize = (10, 8))\nsns.distplot(df['Selling_Price'])\nplt.show()","a0c5dc59":"print(\"Skwness of Selling_Price : {}\".format(df['Selling_Price'].skew()))","b689dcc2":"plt.figure(figsize = (10, 8))\nsns.distplot(df['Selling_Price'], fit=norm)\nplt.show()","9edd6b82":"df.isnull().sum()","ad371075":"plt.figure(figsize = (10, 8))\nsns.distplot(df['Present_Price'], fit=norm)\nplt.show()","52a5552a":"plt.figure(figsize = (10, 8))\nplt.scatter( x = 'Selling_Price', y='Present_Price', data = df )\nplt.show()","de3de959":"print(\"Correlation between Selling_Price and Present_Price \", df['Selling_Price'].corr(df['Present_Price']) )","159b7abb":"plt.figure(figsize = (8, 6))\nsns.countplot( x = 'Fuel_Type', data=df )\nplt.show()","5c340fff":"df['Fuel_Type'].value_counts().plot.pie(autopct=\"%.1f%%\")","17b21616":"df['Fuel_Type'].value_counts()","6bc4076b":"f, ax = plt.subplots(1, 2, figsize=(20, 8) )\n\nsns.barplot(x = 'Fuel_Type', y = 'Selling_Price', data = df, ax = ax[0])\nax[0].set_title(\"Barplot of Selling_Price vs Fuel_Type\", fontsize=15)\n\nsns.stripplot(x=\"Fuel_Type\", y=\"Selling_Price\", data=df, ax = ax[1])\nax[1].set_title(\"Stripplot of Selling_Price vs Fuel_Type\", fontsize=15)\n\nplt.show()","28b7b20d":"df['Year'].value_counts()","4a8e1205":"f, ax = plt.subplots(2, 1, figsize=(16, 12) )\n\nsns.barplot(x = 'Year', y = 'Selling_Price', data = df, ax = ax[0])\nax[0].set_title(\"Barplot of Selling_Price vs Year\", fontsize=15)\n\nsns.stripplot(x=\"Year\", y=\"Selling_Price\", data=df, ax = ax[1])\nax[1].set_title(\"Stripplot of Selling_Price vs Year\", fontsize=15)\n\nplt.show()","634a2869":"df['Kms_Driven'].describe()","2ec3cb25":"sns.relplot(x=\"Selling_Price\", y=\"Kms_Driven\", data=df, ax = ax[0]);\nplt.title(\"Kms_Driven vs Selling_Price\", fontsize=15)\nplt.show()","749d731f":"plt.scatter(x = df['Selling_Price'], y = df['Kms_Driven'])\nplt.title(\"Kms_Driven vs Selling_Price\", fontsize=15)\nplt.show()","28357f76":"df['Seller_Type'].value_counts()","59806c38":"f, ax = plt.subplots(3, 1, figsize=(16, 24) )\n\nsns.barplot(x = 'Seller_Type', y = 'Selling_Price', data = df, ax = ax[0])\nax[0].set_title(\"Barplot of Selling_Price vs Seller_Type\", fontsize=15)\n\nsns.stripplot(x=\"Seller_Type\", y=\"Selling_Price\", data=df, ax = ax[1])\nax[1].set_title(\"Stripplot of Selling_Price vs Seller_Type\", fontsize=15)\n\nsns.boxplot(x='Seller_Type', y='Selling_Price', data = df, ax = ax[2])\nax[2].set_title(\"Boxplot of Selling_Price vs Seller_Type\")\n\nplt.show()","fcad1b04":"df['Transmission'].value_counts()","7576760e":"f, ax = plt.subplots(3, 1, figsize=(16, 24) )\n\nsns.barplot(x = 'Transmission', y = 'Selling_Price', data = df, ax = ax[0])\nax[0].set_title(\"Barplot of Selling_Price vs Transmission\", fontsize=15)\n\nsns.stripplot(x=\"Transmission\", y=\"Selling_Price\", data=df, ax = ax[1])\nax[1].set_title(\"Stripplot of Selling_Price vs Transmission\", fontsize=15)\n\nsns.boxplot(x='Transmission', y='Selling_Price', data = df, ax = ax[2])\nax[2].set_title(\"Boxplot of Selling_Price vs Transmission\")\n\nplt.show()","89c5f489":"df['Owner'].value_counts()","be58e7d9":"f, ax = plt.subplots(3, 1, figsize=(16, 20) )\n\nsns.barplot(x = 'Owner', y = 'Selling_Price', data = df, ax = ax[0])\nax[0].set_title(\"Barplot of Selling_Price vs Owner\", fontsize=15)\n\nsns.stripplot(x=\"Owner\", y=\"Selling_Price\", data=df, ax = ax[1])\nax[1].set_title(\"Stripplot of Selling_Price vs Owner\", fontsize=15)\n\nsns.boxplot(x='Owner', y='Selling_Price', data = df, ax = ax[2])\nax[2].set_title(\"Boxplot of Selling_Price vs Owner\")\n\nplt.show()","58ad3c7d":"print(\"Unique value in Car_Name : \", len(df['Car_Name'].unique()))","023ffe44":"df.drop('Car_Name', axis=1, inplace=True)","5ce66311":"df['Year'].value_counts()","be921cfd":"df['Year'].replace({2010 : 1, 2011 : 2, 2012 : 3, 2013 : 4, 2014 : 5, 2015 : 6, 2016 : 7, 2017 : 8, 2018 : 9}, inplace=True)\ndf.loc[(df['Year'] >= 2003) & (df['Year']<= 2009), 'Year'] = 0\ndf['Year'].value_counts()","aa8be5b2":"df['Fuel_Type'].replace({'Petrol':0, 'Diesel':1, 'CNG':2}, inplace=True)\ndf['Seller_Type'].replace({'Dealer':0, 'Individual':1}, inplace=True)\ndf['Transmission'].replace({'Manual':0, 'Automatic':1}, inplace=True)","6d027d26":"df['Kms_Driven'].describe()","8d0eae03":"df.loc[(df['Kms_Driven'] >= 500) & (df['Kms_Driven'] <= 15000), 'Kms_Driven'] = 0\ndf.loc[(df['Kms_Driven'] > 15000) & (df['Kms_Driven'] <= 32000), 'Kms_Driven'] = 1\ndf.loc[(df['Kms_Driven'] > 32000) & (df['Kms_Driven'] <= 49000), 'Kms_Driven'] = 2\ndf.loc[(df['Kms_Driven'] > 49000), 'Kms_Driven'] = 3","0443de2f":"df['Kms_Driven'].value_counts()","910c581b":"df.head()","d77c0fc0":"X = df.drop('Selling_Price', axis=1)\ny = df['Selling_Price']\n\nX = RobustScaler().fit_transform(X)\n# y = RobustScaler().fit_transform(y)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2)\nX_train.shape, X_test.shape, y_train.shape, y_test.shape","99a8f77f":"lr = LinearRegression()\nlr.fit(X_train, y_train)\ny_pred = lr.predict(X_test)\nprint(\"Linear regression score : \",lr.score(X_test, y_test))\nprint(\"Mean squared error : \", mean_squared_error(y_test, y_pred))","ed7b00b0":"clf = Ridge(alpha=0.1)\nclf.fit(X_train, y_train)\nprint(\"Ridge Regression Score : \", clf.score(X_test, y_test))\ny_pred = clf.predict(X_test)\nprint(\"Mean squared error : \", mean_squared_error(y_test, y_pred))","48b3cbe5":"ls = Lasso()\nls.fit(X_train, y_train)\ny_pred = ls.predict(X_test)\nprint(\"Lasso Score : \", ls.score(X_test, y_test))\nprint(\"Mean squared error : \", mean_squared_error(y_test, y_pred))","cf39ba9e":"dt = DecisionTreeRegressor()\ndt.fit(X_train, y_train)\ny_pred = dt.predict(X_test)\nprint(\"Decision Tree Regressor Score : \", dt.score(X_test, y_test))\nprint(\"Mean squared error : \", mean_squared_error(y_pred, y_test))","67585542":"params = {'n_estimators': 500,\n          'max_depth': 4,\n          'min_samples_split': 5,\n          'learning_rate': 0.01,\n          'loss': 'ls'}\nreg = ensemble.GradientBoostingRegressor(**params)\nreg.fit(X_train, y_train)\ny_pred = reg.predict(X_test)\nprint(\"Score : \", reg.score(X_test, y_test))\nprint(\"Mean squared error : \", mean_squared_error(y_pred, y_test))","eb2b549a":"Let's focus on **Fuel_Type**","ad86e1ae":"**From above algorithams we can say that GradientBoostingRegressor perform best with 96% accuracy and 0.79 rmse**","4c323dbb":"when **Year** inreasing than **Selling_Price** also increasing for some vehicles","a4edbe4c":"****Linear Regression****","3a153d0f":"There are no missing values we are good to go !","5e4efc7d":"Diesel vehicle's price is very high as compared to petrol and CNG","566baaa0":"Selling_Price is positive skewed\nand there are some error look like above 30\nlet's try convert it into to normal distribution","a433f302":"**Lasso**","107fc524":"**Ridge Regession**","da7e88ab":"In Year lots of unique value so it may be increase error so we convert continuos year column to categorical year column","bbc6d1b6":"**Decision Tree Regressor**","e5d6b38b":"let's focus on missing values","9c364457":"Let's see what **Present_Price** give us ","fbed0480":"**Present_Price** is also Positive skewed let's draw scatter plot of Present_Price vs Selling_Price","3ef0e90e":"Dealer's Selling_Price is high as compared to Individual","6c490978":"there are lots of unique value in Car_Name so drop it.","c6bca7b6":"We have good amount of vehicle that have Petrol Fuel_Type","97f20973":"We want to predict **Selling_Price** let's do some analysis on Selling_Price","6a081a9e":"Automatic Transmission Selling_Price is high as compared to Manual","833124d4":"Convert Categorical column to numeric column","8e748d06":"**Gradient Boosting Regressor**","33031531":"It's look like Selling_Price and Present Price are Highly positive correlated","74bc3a62":"Let's talk about Year"}}