{"cell_type":{"cbeeb896":"code","8c9132aa":"code","ffaa7736":"code","27fc9c14":"code","2ed808dc":"code","6e740f2c":"code","fd161753":"code","5ada23fd":"code","1285d46a":"code","fb0c49fe":"code","749a8714":"code","12ef449a":"code","1111285a":"code","9f02854e":"code","826e3f35":"code","a5ad1e6e":"code","2a5811d0":"code","56b1cee3":"code","169f52ae":"code","eb674a86":"code","658c153d":"code","275c28fc":"code","d8ce1886":"code","7d0a6bc1":"markdown","89c8d254":"markdown","fd44cb46":"markdown"},"source":{"cbeeb896":"%matplotlib inline\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn import preprocessing\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nimport seaborn as sns\nimport numpy as np\nfrom sklearn import linear_model\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn import metrics\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import precision_score\nfrom sklearn.metrics import recall_score\nfrom sklearn.metrics import accuracy_score\n!pip install scikit-plot\nimport scikitplot as skplt\nimport pickle\n! pip install -q scikit-plot\nfont = {'family' : 'Times New Roman',\n        'size'   : 26}\n\nplt.rc('font', **font)\nplt.rcParams.update({'font.size': 12})\nsns.set(style=\"white\")\nsns.set(style=\"whitegrid\", color_codes=True)\ndf = pd.read_csv('..\/input\/thesis-conference\/Original (1).csv')\nprint(df.head(10))\nprint(df.info())\npd.value_counts(df['TYPE']).plot.bar()\ndf['TYPE'].value_counts()","8c9132aa":"application = df\ncategorical_list = []\nnumerical_list = []\nfor i in application.columns.tolist():\n    if application[i].dtype=='object':\n        categorical_list.append(i)\n    else:\n        numerical_list.append(i)\nprint('Number of categorical features:', str(len(categorical_list)))\nprint('Number of numerical features:', str(len(numerical_list)))\n# for each column, get value counts in decreasing order and take the index (value) of most common class\ndf[categorical_list] = df[categorical_list].apply(lambda x: x.fillna(x.value_counts().index[0]))\ndf[categorical_list]\nfrom sklearn.preprocessing import LabelEncoder\nlabelencoder = LabelEncoder()   # creating instance of labelencoder\n\nfor attr in categorical_list:\n    df[attr]= labelencoder.fit_transform(df[attr].astype(str))\n\ndf[numerical_list] = df[numerical_list].replace([np.inf, -np.inf], np.nan)\ndf[numerical_list] = df[numerical_list].fillna(df[numerical_list].mean())\ndf[numerical_list] \n#df=df.drop(columns=['TIP', '\u0153','Unnamed: 160','Unnamed: 39','Unnamed: 41','EMERGENCYCESAREANSECTION','apgarfetus1fivemin','weightfetus1','MATERNALEDUCATION','ALIVENEWBORNS','ANESTHESIA'])\ndf=df.drop(columns=['TIP', '\u0153','Unnamed: 160','Unnamed: 39','Unnamed: 41','OXYTOCIN','HOURSOFRUPTUREDMEMBRANESATDELIVERY','EMERGENCYCESAREANSECTION','FETUS1ADMISSIONICU','TEAR','ANESTHESIA','EPISIOTOMY','INDUCTION','ALIVENEWBORNS','apgarfetus1fivemin','FETUS1RECOVERY','apgarfetus1'])","ffaa7736":"data=df\nX = data.loc[:, data.columns != 'TYPE']\ny=data['TYPE']\nprint(X.head())\nfeature_name = X.columns.tolist()\nprint(y.head())\nfrom sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import chi2\nfrom sklearn.preprocessing import MinMaxScaler\nX_norm = MinMaxScaler().fit_transform(X)\nchi_selector = SelectKBest(chi2, k=11)\nchi_selector.fit(X_norm, y)\nchi_support = chi_selector.get_support()\nchi_feature = X.loc[:,chi_support].columns.tolist()\nprint(str(len(chi_feature)), 'selected features')\nchi_feature","27fc9c14":"df_filtered_sec = df[df['TYPE'] == 5] \ndf_filtered_natural = df[df['TYPE'] != 5] \ndf_filtered_sec['TYPE']=0\ndf_filtered_natural['TYPE']=1\n\nframes = [df_filtered_sec, df_filtered_natural]\ndf = pd.concat(frames)\ndf.info()\npd.value_counts(df['TYPE']).plot.bar()\ndf['TYPE'].value_counts()","2ed808dc":"y=df['TYPE']\ny","6e740f2c":"# df = df.rename(columns={'GAGE': 'gestational age', 'PARITY': 'parity', 'ORISK':'obsetrick risk','COMORBIDITY':'comorbidity','NPREVC':'number of previous cesarean','PREVC':'previous cesarean? (t\/f)','INCREASED':'weight increased during pregnency','CARRE':'start week of antenatal care','HEIGHT':'height','WEIGHT':'weight','BMI':'body mass index'})\n\ndf=df[chi_feature]\ndf = df.rename(columns={'MEDICALINDICATION':'Medical Indication','AMNIOTICLIQUID':'Amniotic Liquid','OXYTOCIN':'Oxytocin','ARTMODE':'ART Mode','FetalINTRAPARTUMpH':'Fetal Intrapartum pH','PREINDUCTION':'Pre-Induction','HOURSOFRUPTUREDMEMBRANESATDELIVERY':'Rupture Membrane', 'AMNIOCENTESIS':'Amniocentesis', 'PARITY': 'parity', 'ORISK':'Obsetrick Risk','COMORBIDITY':'Comorbidity','NPREVC':'Number of Previous Cesarean','PREVC':'Previous Cesarean? (t\/f)'})\n\ndf.head()\ndata=df\nX = data.loc[:, data.columns != 'TYPE']\nX.head()\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)\nfrom sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)\n\nprint('Train Data')\nbsome = pd.DataFrame(y_train)\nprint(bsome.value_counts())\n\nprint()\nprint('Test data')\ntdata = pd.DataFrame(y_test)\nprint(tdata.value_counts())\n\n\nfrom imblearn.over_sampling import SMOTE \nsm = SMOTE()\nX_train, y_train = sm.fit_resample(X_train, y_train)\nprint(X_train.shape)\n\nprint('After SMOTE')\n\nprint('Train Data')\nasome = pd.DataFrame(y_train)\nprint(asome.value_counts())\n\nprint()\nprint('Test data')\ntdata = pd.DataFrame(y_test)\nprint(tdata.value_counts())\ny_train","fd161753":"evaluation = pd.DataFrame({'Model': [],\n                           'Accuracy(train)':[],\n                           'Precision(train)':[],\n                           'Recall(train)':[],\n                           'F1_score(train)':[],\n                           'Accuracy(test)':[],\n                           'Precision(test)':[],\n                           'Recall(test)':[],\n                           'F1_score(test)':[]})\n\nevaluation2 = pd.DataFrame({'Model': [],\n                           'Test':[],\n                           '1':[],\n                           '2':[],\n                           '3':[],\n                           '4':[],\n                           '5':[],\n                           '6':[],\n                           '7':[],\n                           '8':[],\n                           '9':[],\n                           '10':[],\n                           'Mean':[]})\n\nbox_train =  pd.DataFrame({'algorithm': [],\n                           'accuracy':[]})\n\nbox_test =  pd.DataFrame({'algorithm': [],\n                           'accuracy':[]})\n\n\n#features = list(data.columns.values)\n\nfeatures=  chi_feature\nprint(features)","5ada23fd":"from sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.datasets import make_classification\nfrom sklearn.ensemble import RandomForestClassifier\nsvc = RandomForestClassifier(max_depth=2, random_state=0)\nclf = AdaBoostClassifier(n_estimators=500,base_estimator=svc, random_state=43)\nclf.fit(X_train, y_train)\n\n\nacc_train=format(accuracy_score(clf.predict(X_train), y_train)*100,'.3f')\nprecision_train=format(precision_score(y_train, clf.predict(X_train), average='weighted')*100,'.3f')\nrecall_train=format(recall_score(y_train,clf.predict(X_train), average='weighted')*100,'.3f')\nf1_train=format(f1_score(y_train,clf.predict(X_train), average='weighted')*100,'.3f')\n\n\nacc_test=format(accuracy_score(clf.predict(X_test), y_test)*100,'.3f')\nprecision_test=format(precision_score(y_test, clf.predict(X_test), average='weighted')*100,'.3f')\nrecall_test=format(recall_score(y_test,clf.predict(X_test), average='weighted')*100,'.3f')\nf1_test=format(f1_score(y_test,clf.predict(X_test), average='weighted')*100,'.3f')\n\nr = evaluation.shape[0]\nevaluation.loc[r] = ['AB',acc_train,precision_train,recall_train,f1_train,acc_test,precision_test,recall_test,f1_test]\nevaluation\n\n\n\n\ncomplex_model_1=clf\n\ncv_train_acc=cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='accuracy')\ncv_train_acc_m=float(format(cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='accuracy').mean(),'.3f'))\n\ncv_train_pre=cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='precision')\ncv_train_pre_m=float(format(cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='precision').mean(),'.3f'))\n\ncv_train_re=cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='recall')\ncv_train_re_m=float(format(cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='recall').mean(),'.3f'))\n\ncv_train_f1=cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='f1_macro')\ncv_train_f1_m=cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='f1_macro').mean()\n\ncv_test_acc=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='accuracy')\ncv_test_acc_m=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='accuracy').mean()\n\ncv_test_pre=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='precision')\ncv_test_pre_m=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='precision').mean()\n\ncv_test_re=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='recall')\ncv_test_re_m=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='recall').mean()\n\ncv_test_f1=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='f1_macro')\ncv_test_f1_m=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='f1_macro').mean()\n\n\nr = evaluation2.shape[0]\nevaluation2.loc[r] = ['AB','Train accuracy',100*float(format(cv_train_acc[0],'.3f')),100*float(format(cv_train_acc[1],'.3f')),100*float(format(cv_train_acc[2],'.3f')),100*float(format(cv_train_acc[3],'.3f')),100*float(format(cv_train_acc[4],'.3f')),100*float(format(cv_train_acc[5],'.3f')),100*float(format(cv_train_acc[6],'.3f')),100*float(format(cv_train_acc[7],'.3f')),100*float(format(cv_train_acc[8],'.3f')),100*float(format(cv_train_acc[9],'.3f')),100*float(format(cv_train_acc_m,'.3f'))]\nevaluation2.loc[r+1] = ['AB','Train precision',100*float(format(cv_train_pre[0],'.3f')),100*float(format(cv_train_pre[1],'.3f')),100*float(format(cv_train_pre[2],'.3f')),100*float(format(cv_train_pre[3],'.3f')),100*float(format(cv_train_pre[4],'.3f')),100*float(format(cv_train_pre[5],'.3f')),100*float(format(cv_train_pre[6],'.3f')),100*float(format(cv_train_pre[7],'.3f')),100*float(format(cv_train_pre[8],'.3f')),100*float(format(cv_train_pre[9],'.3f')),100*float(format(cv_train_pre_m,'.3f'))]\nevaluation2.loc[r+2] = ['AB','Train recall',100*float(format(cv_train_re[0],'.3f')),100*float(format(cv_train_re[1],'.3f')),100*float(format(cv_train_re[2],'.3f')),100*float(format(cv_train_re[3],'.3f')),100*float(format(cv_train_re[4],'.3f')),100*float(format(cv_train_re[5],'.3f')),100*float(format(cv_train_re[6],'.3f')),100*float(format(cv_train_re[7],'.3f')),100*float(format(cv_train_re[8],'.3f')),100*float(format(cv_train_re[9],'.3f')),100*float(format(cv_train_re_m,'.3f'))]\nevaluation2.loc[r+3] = ['AB','Train f1_score',100*float(format(cv_train_f1[0],'.3f')),100*float(format(cv_train_f1[1],'.3f')),100*float(format(cv_train_f1[2],'.3f')),100*float(format(cv_train_f1[3],'.3f')),100*float(format(cv_train_f1[4],'.3f')),100*float(format(cv_train_f1[5],'.3f')),100*float(format(cv_train_f1[6],'.3f')),100*float(format(cv_train_f1[7],'.3f')),100*float(format(cv_train_f1[8],'.3f')),100*float(format(cv_train_f1[9],'.3f')),100*float(format(cv_train_f1_m,'.3f'))]\nevaluation2.loc[r+4] = ['AB','Test accuracy',100*float(format(cv_test_acc[0],'.3f')),100*float(format(cv_test_acc[1],'.3f')),100*float(format(cv_test_acc[2],'.3f')),100*float(format(cv_test_acc[3],'.3f')),100*float(format(cv_test_acc[4],'.3f')),100*float(format(cv_test_acc[5],'.3f')),100*float(format(cv_test_acc[6],'.3f')),100*float(format(cv_test_acc[7],'.3f')),100*float(format(cv_test_acc[8],'.3f')),100*float(format(cv_test_acc[9],'.3f')),100*float(format(cv_test_acc_m,'.3f'))]\nevaluation2.loc[r+5] = ['AB','Test precision',100*float(format(cv_test_pre[0],'.3f')),100*float(format(cv_test_pre[1],'.3f')),100*float(format(cv_test_pre[2],'.3f')),100*float(format(cv_test_pre[3],'.3f')),100*float(format(cv_test_pre[4],'.3f')),100*float(format(cv_test_pre[5],'.3f')),100*float(format(cv_test_pre[6],'.3f')),100*float(format(cv_test_pre[7],'.3f')),100*float(format(cv_test_pre[8],'.3f')),100*float(format(cv_test_pre[9],'.3f')),100*float(format(cv_test_pre_m,'.3f'))]\nevaluation2.loc[r+6] = ['AB','Test recall',100*float(format(cv_test_re[0],'.3f')),100*float(format(cv_test_re[1],'.3f')),100*float(format(cv_test_re[2],'.3f')),100*float(format(cv_test_re[3],'.3f')),100*float(format(cv_test_re[4],'.3f')),100*float(format(cv_test_re[5],'.3f')),100*float(format(cv_test_re[6],'.3f')),100*float(format(cv_test_re[7],'.3f')),100*float(format(cv_test_re[8],'.3f')),100*float(format(cv_test_re[9],'.3f')),100*float(format(cv_test_re_m,'.3f'))]\nevaluation2.loc[r+7] = ['AB','Test f1_score',100*float(format(cv_test_f1[0],'.3f')),100*float(format(cv_test_f1[1],'.3f')),100*float(format(cv_test_f1[2],'.3f')),100*float(format(cv_test_f1[3],'.3f')),100*float(format(cv_test_f1[4],'.3f')),100*float(format(cv_test_f1[5],'.3f')),100*float(format(cv_test_f1[6],'.3f')),100*float(format(cv_test_f1[7],'.3f')),100*float(format(cv_test_f1[8],'.3f')),100*float(format(cv_test_f1[9],'.3f')),100*float(format(cv_test_f1_m,'.3f')) ]\npickle.dump(clf, open('AdaBoost.pkl','wb'))\nprint(evaluation2)\n\nr = box_train.shape[0]\nbox_train.loc[r] = ['AB',float(format(cv_train_acc[0]*100,'.3f'))]\nbox_train.loc[r+1] = ['AB',float(format(cv_train_acc[1]*100,'.3f'))]\nbox_train.loc[r+2] = ['AB',float(format(cv_train_acc[2]*100,'.3f'))]\nbox_train.loc[r+3] = ['AB',float(format(cv_train_acc[3]*100,'.3f'))]\nbox_train.loc[r+4] = ['AB',float(format(cv_train_acc[4]*100,'.3f'))]\nbox_train.loc[r+5] = ['AB',float(format(cv_train_acc[5]*100,'.3f'))]\nbox_train.loc[r+6] = ['AB',float(format(cv_train_acc[6]*100,'.3f'))]\nbox_train.loc[r+7] = ['AB',float(format(cv_train_acc[7]*100,'.3f'))]\nbox_train.loc[r+8] = ['AB',float(format(cv_train_acc[8]*100,'.3f'))]\nbox_train.loc[r+9] = ['AB',float(format(cv_train_acc[9]*100,'.3f'))]\n\n\nr = box_test.shape[0]\nbox_test.loc[r] = ['AB',float(format(cv_test_acc[0]*100,'.3f'))]\nbox_test.loc[r+1] = ['AB',float(format(cv_test_acc[1]*100,'.3f'))]\nbox_test.loc[r+2] = ['AB',float(format(cv_test_acc[2]*100,'.3f'))]\nbox_test.loc[r+3] = ['AB',float(format(cv_test_acc[3]*100,'.3f'))]\nbox_test.loc[r+4] = ['AB',float(format(cv_test_acc[4]*100,'.3f'))]\nbox_test.loc[r+5] = ['AB',float(format(cv_test_acc[5]*100,'.3f'))]\nbox_test.loc[r+6] = ['AB',float(format(cv_test_acc[6]*100,'.3f'))]\nbox_test.loc[r+7] = ['AB',float(format(cv_test_acc[7]*100,'.3f'))]\nbox_test.loc[r+8] = ['AB',float(format(cv_test_acc[8]*100,'.3f'))]\nbox_test.loc[r+9] = ['AB',float(format(cv_test_acc[9]*100,'.3f'))]\n","1285d46a":"box_test","fb0c49fe":"features = list(X.columns.values)\nimportances = clf.feature_importances_\nimportances=importances*100\nimport numpy as np\nindices = np.argsort(importances)\n#plt.title('Feature Importances')\nplt.figure(figsize=(6,8))\nplt.barh(range(len(indices)), importances[indices], color='gbry', align='center')\nplt.yticks(range(len(indices)), [features[i] for i in indices])\n#plt.xlabel('Relative Importance')\n\nplt.show()\nprint(importances)","749a8714":"p=y_train\nq=y_test\n\ny_train = pd.DataFrame(y_train)\ny_train=y_train.replace([0,1], [\"Cesarean\",\"Non Cesarean\"])\n\npred_train=clf.predict(X_train)\npred_train=pd.DataFrame(pred_train)\npred_train=pred_train.replace([0,1], [\"Cesarean\",\"Non Cesarean\"])\n\n\npred_test=clf.predict(X_test)\ny_test = pd.DataFrame(y_test)\ny_test=y_test.replace([0,1], [\"Cesarean\",\"Non Cesarean\"])\npred_test=pd.DataFrame(pred_test)\n\npred_test=pred_test.replace([0,1], [\"Cesarean\",\"Non Cesarean\"])\n\nskplt.metrics.plot_confusion_matrix(\n    y_train, \n    pred_train,\n    figsize=(7,4),\n    title_fontsize='18',\n    text_fontsize='16',\n    title =' ',\n    cmap='BuGn'\n    )\n\nskplt.metrics.plot_confusion_matrix(\n    y_test, \n    pred_test,\n    figsize=(7,4),\n    title_fontsize='18',\n    text_fontsize='16',\n    title =' ',\n    cmap='BuGn'\n    )\ny_train=p\ny_test=q","12ef449a":"from sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.datasets import make_classification\nfrom catboost import CatBoostClassifier\n\nclf = CatBoostClassifier(\n    iterations=1000, \n    learning_rate=0.1, \n    #verbose=5,\n    #loss_function='CrossEntropy'\n)\nclf.fit(X_train, y_train)\n\nacc_train=format(accuracy_score(clf.predict(X_train), y_train)*100,'.3f')\nprecision_train=format(precision_score(y_train, clf.predict(X_train), average='weighted')*100,'.3f')\nrecall_train=format(recall_score(y_train,clf.predict(X_train), average='weighted')*100,'.3f')\nf1_train=format(f1_score(y_train,clf.predict(X_train), average='weighted')*100,'.3f')\n\n\nacc_test=format(accuracy_score(clf.predict(X_test), y_test)*100,'.3f')\nprecision_test=format(precision_score(y_test, clf.predict(X_test), average='weighted')*100,'.3f')\nrecall_test=format(recall_score(y_test,clf.predict(X_test), average='weighted')*100,'.3f')\nf1_test=format(f1_score(y_test,clf.predict(X_test), average='weighted')*100,'.3f')\n\nr = evaluation.shape[0]\nevaluation.loc[r] = ['CB',acc_train,precision_train,recall_train,f1_train,acc_test,precision_test,recall_test,f1_test]\nevaluation\n\n\n\n\ncomplex_model_1=clf\n\ncv_train_acc=cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='accuracy')\ncv_train_acc_m=float(format(cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='accuracy').mean(),'.3f'))\n\ncv_train_pre=cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='precision')\ncv_train_pre_m=float(format(cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='precision').mean(),'.3f'))\n\ncv_train_re=cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='recall')\ncv_train_re_m=float(format(cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='recall').mean(),'.3f'))\n\ncv_train_f1=cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='f1_macro')\ncv_train_f1_m=cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='f1_macro').mean()\n\ncv_test_acc=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='accuracy')\ncv_test_acc_m=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='accuracy').mean()\n\ncv_test_pre=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='precision')\ncv_test_pre_m=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='precision').mean()\n\ncv_test_re=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='recall')\ncv_test_re_m=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='recall').mean()\n\ncv_test_f1=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='f1_macro')\ncv_test_f1_m=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='f1_macro').mean()\n\n\nr = evaluation2.shape[0]\nevaluation2.loc[r] = ['CB','Train accuracy',100*float(format(cv_train_acc[0],'.3f')),100*float(format(cv_train_acc[1],'.3f')),100*float(format(cv_train_acc[2],'.3f')),100*float(format(cv_train_acc[3],'.3f')),100*float(format(cv_train_acc[4],'.3f')),100*float(format(cv_train_acc[5],'.3f')),100*float(format(cv_train_acc[6],'.3f')),100*float(format(cv_train_acc[7],'.3f')),100*float(format(cv_train_acc[8],'.3f')),100*float(format(cv_train_acc[9],'.3f')),100*float(format(cv_train_acc_m,'.3f'))]\nevaluation2.loc[r+1] = ['CB','Train precision',100*float(format(cv_train_pre[0],'.3f')),100*float(format(cv_train_pre[1],'.3f')),100*float(format(cv_train_pre[2],'.3f')),100*float(format(cv_train_pre[3],'.3f')),100*float(format(cv_train_pre[4],'.3f')),100*float(format(cv_train_pre[5],'.3f')),100*float(format(cv_train_pre[6],'.3f')),100*float(format(cv_train_pre[7],'.3f')),100*float(format(cv_train_pre[8],'.3f')),100*float(format(cv_train_pre[9],'.3f')),100*float(format(cv_train_pre_m,'.3f'))]\nevaluation2.loc[r+2] = ['CB','Train recall',100*float(format(cv_train_re[0],'.3f')),100*float(format(cv_train_re[1],'.3f')),100*float(format(cv_train_re[2],'.3f')),100*float(format(cv_train_re[3],'.3f')),100*float(format(cv_train_re[4],'.3f')),100*float(format(cv_train_re[5],'.3f')),100*float(format(cv_train_re[6],'.3f')),100*float(format(cv_train_re[7],'.3f')),100*float(format(cv_train_re[8],'.3f')),100*float(format(cv_train_re[9],'.3f')),100*float(format(cv_train_re_m,'.3f'))]\nevaluation2.loc[r+3] = ['CB','Train f1_score',100*float(format(cv_train_f1[0],'.3f')),100*float(format(cv_train_f1[1],'.3f')),100*float(format(cv_train_f1[2],'.3f')),100*float(format(cv_train_f1[3],'.3f')),100*float(format(cv_train_f1[4],'.3f')),100*float(format(cv_train_f1[5],'.3f')),100*float(format(cv_train_f1[6],'.3f')),100*float(format(cv_train_f1[7],'.3f')),100*float(format(cv_train_f1[8],'.3f')),100*float(format(cv_train_f1[9],'.3f')),100*float(format(cv_train_f1_m,'.3f'))]\nevaluation2.loc[r+4] = ['CB','Test accuracy',100*float(format(cv_test_acc[0],'.3f')),100*float(format(cv_test_acc[1],'.3f')),100*float(format(cv_test_acc[2],'.3f')),100*float(format(cv_test_acc[3],'.3f')),100*float(format(cv_test_acc[4],'.3f')),100*float(format(cv_test_acc[5],'.3f')),100*float(format(cv_test_acc[6],'.3f')),100*float(format(cv_test_acc[7],'.3f')),100*float(format(cv_test_acc[8],'.3f')),100*float(format(cv_test_acc[9],'.3f')),100*float(format(cv_test_acc_m,'.3f'))]\nevaluation2.loc[r+5] = ['CB','Test precision',100*float(format(cv_test_pre[0],'.3f')),100*float(format(cv_test_pre[1],'.3f')),100*float(format(cv_test_pre[2],'.3f')),100*float(format(cv_test_pre[3],'.3f')),100*float(format(cv_test_pre[4],'.3f')),100*float(format(cv_test_pre[5],'.3f')),100*float(format(cv_test_pre[6],'.3f')),100*float(format(cv_test_pre[7],'.3f')),100*float(format(cv_test_pre[8],'.3f')),100*float(format(cv_test_pre[9],'.3f')),100*float(format(cv_test_pre_m,'.3f'))]\nevaluation2.loc[r+6] = ['CB','Test recall',100*float(format(cv_test_re[0],'.3f')),100*float(format(cv_test_re[1],'.3f')),100*float(format(cv_test_re[2],'.3f')),100*float(format(cv_test_re[3],'.3f')),100*float(format(cv_test_re[4],'.3f')),100*float(format(cv_test_re[5],'.3f')),100*float(format(cv_test_re[6],'.3f')),100*float(format(cv_test_re[7],'.3f')),100*float(format(cv_test_re[8],'.3f')),100*float(format(cv_test_re[9],'.3f')),100*float(format(cv_test_re_m,'.3f'))]\nevaluation2.loc[r+7] = ['CB','Test f1_score',100*float(format(cv_test_f1[0],'.3f')),100*float(format(cv_test_f1[1],'.3f')),100*float(format(cv_test_f1[2],'.3f')),100*float(format(cv_test_f1[3],'.3f')),100*float(format(cv_test_f1[4],'.3f')),100*float(format(cv_test_f1[5],'.3f')),100*float(format(cv_test_f1[6],'.3f')),100*float(format(cv_test_f1[7],'.3f')),100*float(format(cv_test_f1[8],'.3f')),100*float(format(cv_test_f1[9],'.3f')),100*float(format(cv_test_f1_m,'.3f')) ]\npickle.dump(clf, open('CB.pkl','wb'))\nprint(evaluation2)\n\nr = box_train.shape[0]\nbox_train.loc[r] = ['CB',float(format(cv_train_acc[0]*100,'.3f'))]\nbox_train.loc[r+1] = ['CB',float(format(cv_train_acc[1]*100,'.3f'))]\nbox_train.loc[r+2] = ['CB',float(format(cv_train_acc[2]*100,'.3f'))]\nbox_train.loc[r+3] = ['CB',float(format(cv_train_acc[3]*100,'.3f'))]\nbox_train.loc[r+4] = ['CB',float(format(cv_train_acc[4]*100,'.3f'))]\nbox_train.loc[r+5] = ['CB',float(format(cv_train_acc[5]*100,'.3f'))]\nbox_train.loc[r+6] = ['CB',float(format(cv_train_acc[6]*100,'.3f'))]\nbox_train.loc[r+7] = ['CB',float(format(cv_train_acc[7]*100,'.3f'))]\nbox_train.loc[r+8] = ['CB',float(format(cv_train_acc[8]*100,'.3f'))]\nbox_train.loc[r+9] = ['CB',float(format(cv_train_acc[9]*100,'.3f'))]\n\n\nr = box_test.shape[0]\nbox_test.loc[r] = ['CB',float(format(cv_test_acc[0]*100,'.3f'))]\nbox_test.loc[r+1] = ['CB',float(format(cv_test_acc[1]*100,'.3f'))]\nbox_test.loc[r+2] = ['CB',float(format(cv_test_acc[2]*100,'.3f'))]\nbox_test.loc[r+3] = ['CB',float(format(cv_test_acc[3]*100,'.3f'))]\nbox_test.loc[r+4] = ['CB',float(format(cv_test_acc[4]*100,'.3f'))]\nbox_test.loc[r+5] = ['CB',float(format(cv_test_acc[5]*100,'.3f'))]\nbox_test.loc[r+6] = ['CB',float(format(cv_test_acc[6]*100,'.3f'))]\nbox_test.loc[r+7] = ['CB',float(format(cv_test_acc[7]*100,'.3f'))]\nbox_test.loc[r+8] = ['CB',float(format(cv_test_acc[8]*100,'.3f'))]\nbox_test.loc[r+9] = ['CB',float(format(cv_test_acc[9]*100,'.3f'))]\n","1111285a":"features = list(X.columns.values)\nimportances = clf.feature_importances_\nimportances=importances*100\nimport numpy as np\nindices = np.argsort(importances)\n#plt.title('Feature Importances')\nplt.figure(figsize=(6,8))\nplt.barh(range(len(indices)), importances[indices], color='gbry', align='center')\nplt.yticks(range(len(indices)), [features[i] for i in indices])\n#plt.xlabel('Relative Importance')\n\nplt.show()\nprint(importances)","9f02854e":"p=y_train\nq=y_test\n\ny_train = pd.DataFrame(y_train)\ny_train=y_train.replace([0,1], [\"Cesarean\",\"Non Cesarean\"])\n\npred_train=clf.predict(X_train)\npred_train=pd.DataFrame(pred_train)\npred_train=pred_train.replace([0,1], [\"Cesarean\",\"Non Cesarean\"])\n\n\npred_test=clf.predict(X_test)\ny_test = pd.DataFrame(y_test)\ny_test=y_test.replace([0,1], [\"Cesarean\",\"Non Cesarean\"])\npred_test=pd.DataFrame(pred_test)\n\npred_test=pred_test.replace([0,1], [\"Cesarean\",\"Non Cesarean\"])\n\nskplt.metrics.plot_confusion_matrix(\n    y_train, \n    pred_train,\n    figsize=(7,4),\n    title_fontsize='18',\n    text_fontsize='16',\n    title =' ',\n    cmap='BuGn'\n    )\n\nskplt.metrics.plot_confusion_matrix(\n    y_test, \n    pred_test,\n    figsize=(7,4),\n    title_fontsize='18',\n    text_fontsize='16',\n    title =' ',\n    cmap='BuGn'\n    )\ny_train=p\ny_test=q","826e3f35":"from sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.datasets import make_classification\nimport xgboost as xgb\nclf = xgb.XGBClassifier(n_estimators=2000)\nclf.fit(X_train, y_train)\n\nacc_train=format(accuracy_score(clf.predict(X_train), y_train)*100,'.3f')\nprecision_train=format(precision_score(y_train, clf.predict(X_train), average='weighted')*100,'.3f')\nrecall_train=format(recall_score(y_train,clf.predict(X_train), average='weighted')*100,'.3f')\nf1_train=format(f1_score(y_train,clf.predict(X_train), average='weighted')*100,'.3f')\n\n\nacc_test=format(accuracy_score(clf.predict(X_test), y_test)*100,'.3f')\nprecision_test=format(precision_score(y_test, clf.predict(X_test), average='weighted')*100,'.3f')\nrecall_test=format(recall_score(y_test,clf.predict(X_test), average='weighted')*100,'.3f')\nf1_test=format(f1_score(y_test,clf.predict(X_test), average='weighted')*100,'.3f')\n\nr = evaluation.shape[0]\nevaluation.loc[r] = ['XB',acc_train,precision_train,recall_train,f1_train,acc_test,precision_test,recall_test,f1_test]\nevaluation\n\n\n\n\ncomplex_model_1=clf\n\ncv_train_acc=cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='accuracy')\ncv_train_acc_m=float(format(cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='accuracy').mean(),'.3f'))\n\ncv_train_pre=cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='precision')\ncv_train_pre_m=float(format(cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='precision').mean(),'.3f'))\n\ncv_train_re=cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='recall')\ncv_train_re_m=float(format(cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='recall').mean(),'.3f'))\n\ncv_train_f1=cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='f1_macro')\ncv_train_f1_m=cross_val_score(complex_model_1,X_train, y_train,cv=10,scoring='f1_macro').mean()\n\ncv_test_acc=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='accuracy')\ncv_test_acc_m=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='accuracy').mean()\n\ncv_test_pre=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='precision')\ncv_test_pre_m=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='precision').mean()\n\ncv_test_re=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='recall')\ncv_test_re_m=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='recall').mean()\n\ncv_test_f1=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='f1_macro')\ncv_test_f1_m=cross_val_score(complex_model_1,X_test, y_test,cv=10,scoring='f1_macro').mean()\n\n\nr = evaluation2.shape[0]\nevaluation2.loc[r] = ['XB','Train accuracy',100*float(format(cv_train_acc[0],'.3f')),100*float(format(cv_train_acc[1],'.3f')),100*float(format(cv_train_acc[2],'.3f')),100*float(format(cv_train_acc[3],'.3f')),100*float(format(cv_train_acc[4],'.3f')),100*float(format(cv_train_acc[5],'.3f')),100*float(format(cv_train_acc[6],'.3f')),100*float(format(cv_train_acc[7],'.3f')),100*float(format(cv_train_acc[8],'.3f')),100*float(format(cv_train_acc[9],'.3f')),100*float(format(cv_train_acc_m,'.3f'))]\nevaluation2.loc[r+1] = ['XB','Train precision',100*float(format(cv_train_pre[0],'.3f')),100*float(format(cv_train_pre[1],'.3f')),100*float(format(cv_train_pre[2],'.3f')),100*float(format(cv_train_pre[3],'.3f')),100*float(format(cv_train_pre[4],'.3f')),100*float(format(cv_train_pre[5],'.3f')),100*float(format(cv_train_pre[6],'.3f')),100*float(format(cv_train_pre[7],'.3f')),100*float(format(cv_train_pre[8],'.3f')),100*float(format(cv_train_pre[9],'.3f')),100*float(format(cv_train_pre_m,'.3f'))]\nevaluation2.loc[r+2] = ['XB','Train recall',100*float(format(cv_train_re[0],'.3f')),100*float(format(cv_train_re[1],'.3f')),100*float(format(cv_train_re[2],'.3f')),100*float(format(cv_train_re[3],'.3f')),100*float(format(cv_train_re[4],'.3f')),100*float(format(cv_train_re[5],'.3f')),100*float(format(cv_train_re[6],'.3f')),100*float(format(cv_train_re[7],'.3f')),100*float(format(cv_train_re[8],'.3f')),100*float(format(cv_train_re[9],'.3f')),100*float(format(cv_train_re_m,'.3f'))]\nevaluation2.loc[r+3] = ['XB','Train f1_score',100*float(format(cv_train_f1[0],'.3f')),100*float(format(cv_train_f1[1],'.3f')),100*float(format(cv_train_f1[2],'.3f')),100*float(format(cv_train_f1[3],'.3f')),100*float(format(cv_train_f1[4],'.3f')),100*float(format(cv_train_f1[5],'.3f')),100*float(format(cv_train_f1[6],'.3f')),100*float(format(cv_train_f1[7],'.3f')),100*float(format(cv_train_f1[8],'.3f')),100*float(format(cv_train_f1[9],'.3f')),100*float(format(cv_train_f1_m,'.3f'))]\nevaluation2.loc[r+4] = ['XB','Test accuracy',100*float(format(cv_test_acc[0],'.3f')),100*float(format(cv_test_acc[1],'.3f')),100*float(format(cv_test_acc[2],'.3f')),100*float(format(cv_test_acc[3],'.3f')),100*float(format(cv_test_acc[4],'.3f')),100*float(format(cv_test_acc[5],'.3f')),100*float(format(cv_test_acc[6],'.3f')),100*float(format(cv_test_acc[7],'.3f')),100*float(format(cv_test_acc[8],'.3f')),100*float(format(cv_test_acc[9],'.3f')),100*float(format(cv_test_acc_m,'.3f'))]\nevaluation2.loc[r+5] = ['XB','Test precision',100*float(format(cv_test_pre[0],'.3f')),100*float(format(cv_test_pre[1],'.3f')),100*float(format(cv_test_pre[2],'.3f')),100*float(format(cv_test_pre[3],'.3f')),100*float(format(cv_test_pre[4],'.3f')),100*float(format(cv_test_pre[5],'.3f')),100*float(format(cv_test_pre[6],'.3f')),100*float(format(cv_test_pre[7],'.3f')),100*float(format(cv_test_pre[8],'.3f')),100*float(format(cv_test_pre[9],'.3f')),100*float(format(cv_test_pre_m,'.3f'))]\nevaluation2.loc[r+6] = ['XB','Test recall',100*float(format(cv_test_re[0],'.3f')),100*float(format(cv_test_re[1],'.3f')),100*float(format(cv_test_re[2],'.3f')),100*float(format(cv_test_re[3],'.3f')),100*float(format(cv_test_re[4],'.3f')),100*float(format(cv_test_re[5],'.3f')),100*float(format(cv_test_re[6],'.3f')),100*float(format(cv_test_re[7],'.3f')),100*float(format(cv_test_re[8],'.3f')),100*float(format(cv_test_re[9],'.3f')),100*float(format(cv_test_re_m,'.3f'))]\nevaluation2.loc[r+7] = ['XB','Test f1_score',100*float(format(cv_test_f1[0],'.3f')),100*float(format(cv_test_f1[1],'.3f')),100*float(format(cv_test_f1[2],'.3f')),100*float(format(cv_test_f1[3],'.3f')),100*float(format(cv_test_f1[4],'.3f')),100*float(format(cv_test_f1[5],'.3f')),100*float(format(cv_test_f1[6],'.3f')),100*float(format(cv_test_f1[7],'.3f')),100*float(format(cv_test_f1[8],'.3f')),100*float(format(cv_test_f1[9],'.3f')),100*float(format(cv_test_f1_m,'.3f')) ]\npickle.dump(clf, open('XB.pkl','wb'))\nprint(evaluation2)\n\nr = box_train.shape[0]\nbox_train.loc[r] = ['XB',float(format(cv_train_acc[0]*100,'.3f'))]\nbox_train.loc[r+1] = ['XB',float(format(cv_train_acc[1]*100,'.3f'))]\nbox_train.loc[r+2] = ['XB',float(format(cv_train_acc[2]*100,'.3f'))]\nbox_train.loc[r+3] = ['XB',float(format(cv_train_acc[3]*100,'.3f'))]\nbox_train.loc[r+4] = ['XB',float(format(cv_train_acc[4]*100,'.3f'))]\nbox_train.loc[r+5] = ['XB',float(format(cv_train_acc[5]*100,'.3f'))]\nbox_train.loc[r+6] = ['XB',float(format(cv_train_acc[6]*100,'.3f'))]\nbox_train.loc[r+7] = ['XB',float(format(cv_train_acc[7]*100,'.3f'))]\nbox_train.loc[r+8] = ['XB',float(format(cv_train_acc[8]*100,'.3f'))]\nbox_train.loc[r+9] = ['XB',float(format(cv_train_acc[9]*100,'.3f'))]\n\n\nr = box_test.shape[0]\nbox_test.loc[r] = ['XB',float(format(cv_test_acc[0]*100,'.3f'))]\nbox_test.loc[r+1] = ['XB',float(format(cv_test_acc[1]*100,'.3f'))]\nbox_test.loc[r+2] = ['XB',float(format(cv_test_acc[2]*100,'.3f'))]\nbox_test.loc[r+3] = ['XB',float(format(cv_test_acc[3]*100,'.3f'))]\nbox_test.loc[r+4] = ['XB',float(format(cv_test_acc[4]*100,'.3f'))]\nbox_test.loc[r+5] = ['XB',float(format(cv_test_acc[5]*100,'.3f'))]\nbox_test.loc[r+6] = ['XB',float(format(cv_test_acc[6]*100,'.3f'))]\nbox_test.loc[r+7] = ['XB',float(format(cv_test_acc[7]*100,'.3f'))]\nbox_test.loc[r+8] = ['XB',float(format(cv_test_acc[8]*100,'.3f'))]\nbox_test.loc[r+9] = ['XB',float(format(cv_test_acc[9]*100,'.3f'))]","a5ad1e6e":"features = list(X.columns.values)\nimportances = clf.feature_importances_\nimportances=importances*100\nimport numpy as np\nindices = np.argsort(importances)\n#plt.title('Feature Importances')\nplt.figure(figsize=(6,8))\nplt.barh(range(len(indices)), importances[indices], color='gbry', align='center')\nplt.yticks(range(len(indices)), [features[i] for i in indices])\n#plt.xlabel('Relative Importance')\n\nplt.show()\nprint(importances)","2a5811d0":"p=y_train\nq=y_test\n\ny_train = pd.DataFrame(y_train)\ny_train=y_train.replace([0,1], [\"Cesarean\",\"Non Cesarean\"])\n\npred_train=clf.predict(X_train)\npred_train=pd.DataFrame(pred_train)\npred_train=pred_train.replace([0,1], [\"Cesarean\",\"Non Cesarean\"])\n\n\npred_test=clf.predict(X_test)\ny_test = pd.DataFrame(y_test)\ny_test=y_test.replace([0,1], [\"Cesarean\",\"Non Cesarean\"])\npred_test=pd.DataFrame(pred_test)\n\npred_test=pred_test.replace([0,1], [\"Cesarean\",\"Non Cesarean\"])\n\nskplt.metrics.plot_confusion_matrix(\n    y_train, \n    pred_train,\n    figsize=(7,4),\n    title_fontsize='18',\n    text_fontsize='16',\n    title =' ',\n    cmap='BuGn'\n    )\n\nskplt.metrics.plot_confusion_matrix(\n    y_test, \n    pred_test,\n    figsize=(7,4),\n    title_fontsize='18',\n    text_fontsize='16',\n    title =' ',\n    cmap='BuGn'\n    )\ny_train=p\ny_test=q","56b1cee3":"evaluation.to_csv('model_results.csv')\nevaluation2.to_csv('cross_validation.csv')\nevaluation","169f52ae":"# evaluation['Precision(test)']= evaluation['Precision(test)'].astype(float)*100\nacc_train= evaluation['Accuracy(train)'].astype(float)\npre_train=evaluation['Precision(train)'].astype(float)\nrecall_train=evaluation['Recall(train)'].astype(float)\nf1_train=evaluation['F1_score(train)'].astype(float)\n\nacc_test= evaluation['Accuracy(test)'].astype(float)\npre_test=evaluation['Precision(test)'].astype(float)\nrecall_test =evaluation['Recall(test)'].astype(float)\nf1_train=evaluation['F1_score(test)'].astype(float)","eb674a86":"import matplotlib.pyplot as plt\nplt.figure(figsize=(6,6))\n\n# line 1 points\nx1 = ['AdaBoost','CatBoost','XgBoost']\n# plotting the line 1 points \nplt.plot(x1, acc_train, label = \"Accuracy\")\nplt.plot(x1, pre_train, label = \"Precision\")\nplt.plot(x1, recall_train, label = \"Recall\")\nplt.plot(x1, f1_train, label = \"F1-Score\")\nplt.legend()\n# Display a figure.\n\nplt.show()","658c153d":"import matplotlib.pyplot as plt\nplt.figure(figsize=(6,6))\n\n# line 1 points\nx1 = ['AdaBoost','CatBoost','XgBoost']\n# plotting the line 1 points \nplt.plot(x1, acc_test, label = \"Accuracy\")\nplt.plot(x1, pre_test, label = \"Precision\")\nplt.plot(x1, recall_test, label = \"Recall\")\nplt.plot(x1, f1_test, label = \"F1-Score\")\nplt.legend()\n# Display a figure.\n\nplt.show()","275c28fc":"import seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndf = box_train\ndf['accuracy']=df['accuracy']\nsns.boxplot( x=df[\"algorithm\"], y=df[\"accuracy\"], width=0.8, saturation=0.95)\n\nplt.xlabel('Models')\nplt.ylabel('Cross-Validation Accuracy(%)(Train Data)')\n\nplt.show()\n","d8ce1886":"import seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndf = box_test\ndf['accuracy']=df['accuracy']\nsns.boxplot( x=df[\"algorithm\"], y=df[\"accuracy\"], width=0.8, saturation=0.95)\n\nplt.xlabel('Models')\nplt.ylabel('Cross-Validation Accuracy(%)(Test Data)')\n\nplt.show()","7d0a6bc1":"# AdaBoost","89c8d254":"# XGBoost","fd44cb46":"# CatBoost"}}