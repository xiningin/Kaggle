{"cell_type":{"728d2097":"code","ea683443":"code","65f5d868":"code","f890fcc3":"code","4030fb22":"code","20b8807e":"code","9049b408":"code","402acbbe":"code","d6209b42":"code","dc840f25":"code","a3ce1482":"code","99e3968a":"code","67a1c3c5":"code","5d8e86ae":"code","3302356e":"code","ab845676":"code","ab551d93":"code","c3f6a798":"code","79b164a7":"code","bbad71a8":"code","eed8a6d5":"code","b736e6cd":"code","e2b71841":"code","2e5e3008":"code","7eea64e2":"code","d89c67a8":"code","080d7e28":"code","287eff22":"code","6cd24108":"code","8eb4ea08":"code","3edcd109":"code","070e073d":"code","6d5192a8":"code","e31e5a27":"code","04826a1d":"code","29619c14":"code","a79569e7":"code","ac7c706e":"code","fc9d9d74":"code","082a8e3a":"code","d56dcedf":"code","c561230e":"code","a3140286":"code","d498d8c3":"code","363571d0":"code","c2482578":"code","bfd65257":"code","a5041a46":"code","1ccfa808":"code","c0fe34a2":"code","f6162b1d":"code","b6d37536":"code","70bb3e6f":"code","9aecf4e0":"code","582c5990":"code","86108ca4":"code","8a852efc":"code","c762a640":"code","235b152a":"code","a5e5e2cc":"code","84266f7b":"code","a2773261":"code","6f130234":"code","b168f289":"code","4e308bd3":"code","9d6986e8":"markdown","ec3b379a":"markdown","e1bea25b":"markdown","20638fb7":"markdown","caad750b":"markdown","bab99233":"markdown","544c41fc":"markdown","07fba0ec":"markdown","2e38e7d6":"markdown","d5f752b4":"markdown","c38b3572":"markdown","4124276a":"markdown","5826dc83":"markdown","46f100ed":"markdown","d7d2c904":"markdown","ad37440d":"markdown","185f0183":"markdown","fed6a8aa":"markdown","a5f95df3":"markdown","e685e815":"markdown","19b29644":"markdown","32f2671d":"markdown","f3e4cc0b":"markdown","74a432c6":"markdown","77fc8fc0":"markdown","b26fbdbe":"markdown","a427f4f3":"markdown","16da6d8b":"markdown","e9963fdf":"markdown","35de8f66":"markdown","10658c63":"markdown","74b75adc":"markdown","07d85d1a":"markdown","a423d233":"markdown","2f73e494":"markdown","defda13f":"markdown","26bd3f68":"markdown","6bce5d05":"markdown","7e812c64":"markdown","b6dd934f":"markdown","1c15621b":"markdown","5a0766a7":"markdown","888fa48c":"markdown","8efafd1e":"markdown","7ad6ccf1":"markdown","29a07740":"markdown","6e0447a1":"markdown","a2a471c6":"markdown","8fcad210":"markdown","ae18356a":"markdown","d70f6a69":"markdown","0917888e":"markdown","cf1c86c0":"markdown","ea977596":"markdown","f3f2b88d":"markdown","381a258e":"markdown","ec218e5c":"markdown","e9812948":"markdown"},"source":{"728d2097":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)import seaborn as sns\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n","ea683443":"netflix_overall=pd.read_csv(\"\/kaggle\/input\/netflix-shows\/netflix_titles.csv\")\nnetflix_overall.head(10)","65f5d868":"netflix_overall.count()","f890fcc3":"netflix_shows=netflix_overall[netflix_overall['type']=='TV Show']\n","4030fb22":"netflix_movies=netflix_overall[netflix_overall['type']=='Movie']","20b8807e":"sns.set(style=\"darkgrid\")\nax = sns.countplot(x=\"type\", data=netflix_overall, palette=\"Set2\")","9049b408":"netflix_shows['date_added'].head(2)","402acbbe":"netflix_date = netflix_shows[['date_added']].dropna()\nnetflix_date['year'] = netflix_date['date_added'].apply(lambda x : x.split(', ')[-1])\nnetflix_date['month'] = netflix_date['date_added'].apply(lambda x : x.lstrip().split(' ')[0])\n\nmonth_order = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'][::-1]\n\nprint(netflix_date.groupby('year'))\n# df = netflix_date.groupby('year')['month'].value_counts().unstack().fillna(0)[month_order].T\n# plt.figure(figsize=(10, 7), dpi=200)\n# plt.pcolor(df, cmap='afmhot_r', edgecolors='white', linewidths=2) # heatmap\n# plt.xticks(np.arange(0.5, len(df.columns), 1), df.columns, fontsize=7, fontfamily='serif')\n# plt.yticks(np.arange(0.5, len(df.index), 1), df.index, fontsize=7, fontfamily='serif')\n\n# plt.title('Netflix Contents Update', fontsize=12, fontfamily='calibri', fontweight='bold', position=(0.20, 1.0+0.02))\n# cbar = plt.colorbar()\n\n# cbar.ax.tick_params(labelsize=8) \n# cbar.ax.minorticks_on()\n# plt.show()","d6209b42":"plt.figure(figsize=(12,10))\nsns.set(style=\"darkgrid\")\nax = sns.countplot(x=\"rating\", data=netflix_movies, palette=\"Set2\", order=netflix_movies['rating'].value_counts().index[0:15])","dc840f25":"imdb_ratings=pd.read_csv('\/kaggle\/input\/imdb-extensive-dataset\/IMDb ratings.csv',usecols=['weighted_average_vote'])\nimdb_titles=pd.read_csv('\/kaggle\/input\/imdb-extensive-dataset\/IMDb movies.csv', usecols=['title','year','genre'])\nratings = pd.DataFrame({'Title':imdb_titles.title,\n                    'Release Year':imdb_titles.year,\n                    'Rating': imdb_ratings.weighted_average_vote,\n                    'Genre':imdb_titles.genre})\nratings.drop_duplicates(subset=['Title','Release Year','Rating'], inplace=True)\nratings.shape","a3ce1482":"ratings.dropna()\njoint_data=ratings.merge(netflix_overall,left_on='Title',right_on='title',how='inner')\njoint_data=joint_data.sort_values(by='Rating', ascending=False)","99e3968a":"import plotly.express as px\ntop_rated=joint_data[0:10]\nfig =px.sunburst(\n    top_rated,\n    path=['title','country'],\n    values='Rating',\n    color='Rating')\nfig.show()","67a1c3c5":"country_count=joint_data['country'].value_counts().sort_values(ascending=False)\ncountry_count=pd.DataFrame(country_count)\ntopcountries=country_count[0:11]\ntopcountries","5d8e86ae":"import plotly.express as px\ndata = dict(\n    number=[1063,619,135,60,44,41,40,40,38,35],\n    country=[\"United States\", \"India\", \"United Kingdom\", \"Canada\", \"Spain\",'Turkey','Philippines','France','South Korea','Australia'])\nfig = px.funnel(data, x='number', y='country')\nfig.show()","3302356e":"plt.figure(figsize=(12,10))\nsns.set(style=\"darkgrid\")\nax = sns.countplot(y=\"release_year\", data=netflix_movies, palette=\"Set2\", order=netflix_movies['release_year'].value_counts().index[0:15])","ab845676":"countries={}\nnetflix_movies['country']=netflix_movies['country'].fillna('Unknown')\ncou=list(netflix_movies['country'])\nfor i in cou:\n    #print(i)\n    i=list(i.split(','))\n    if len(i)==1:\n        if i in list(countries.keys()):\n            countries[i]+=1\n        else:\n            countries[i[0]]=1\n    else:\n        for j in i:\n            if j in list(countries.keys()):\n                countries[j]+=1\n            else:\n                countries[j]=1","ab551d93":"countries_fin={}\nfor country,no in countries.items():\n    country=country.replace(' ','')\n    if country in list(countries_fin.keys()):\n        countries_fin[country]+=no\n    else:\n        countries_fin[country]=no\n        \ncountries_fin={k: v for k, v in sorted(countries_fin.items(), key=lambda item: item[1], reverse= True)}\n","c3f6a798":"plt.figure(figsize=(8,8))\nax = sns.barplot(x=list(countries_fin.keys())[0:10],y=list(countries_fin.values())[0:10])\nax.set_xticklabels(list(countries_fin.keys())[0:10],rotation = 90)\n","79b164a7":"netflix_movies['duration']=netflix_movies['duration'].str.replace(' min','')\nnetflix_movies['duration']=netflix_movies['duration'].astype(str).astype(int)\nnetflix_movies['duration']","bbad71a8":"sns.set(style=\"darkgrid\")\nsns.kdeplot(data=netflix_movies['duration'], shade=True)","eed8a6d5":"from collections import Counter\n\ngenres=list(netflix_movies['listed_in'])\ngen=[]\n\nfor i in genres:\n    i=list(i.split(','))\n    for j in i:\n        gen.append(j.replace(' ',\"\"))\ng=Counter(gen)","b736e6cd":"from wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\nfrom PIL import Image\n\ntext = list(set(gen))\nplt.rcParams['figure.figsize'] = (13, 13)\n\n#assigning shape to the word cloud\nmask = np.array(Image.open('..\/input\/masks\/star.png'))\nwordcloud = WordCloud(max_words=1000000,background_color=\"white\",mask=mask).generate(str(text))\n\nplt.imshow(wordcloud,interpolation=\"bilinear\")\nplt.axis(\"off\")\nplt.show()","e2b71841":"g={k: v for k, v in sorted(g.items(), key=lambda item: item[1], reverse= True)}\n\n\nfig, ax = plt.subplots()\n\nfig = plt.figure(figsize = (10, 10))\nx=list(g.keys())\ny=list(g.values())\nax.vlines(x, ymin=0, ymax=y, color='green')\nax.plot(x,y, \"o\", color='maroon')\nax.set_xticklabels(x, rotation = 90)\nax.set_ylabel(\"Count of movies\")\n# set a title\nax.set_title(\"Genres\");","2e5e3008":"countries1={}\nnetflix_shows['country']=netflix_shows['country'].fillna('Unknown')\ncou1=list(netflix_shows['country'])\nfor i in cou1:\n    #print(i)\n    i=list(i.split(','))\n    if len(i)==1:\n        if i in list(countries1.keys()):\n            countries1[i]+=1\n        else:\n            countries1[i[0]]=1\n    else:\n        for j in i:\n            if j in list(countries1.keys()):\n                countries1[j]+=1\n            else:\n                countries1[j]=1","7eea64e2":"countries_fin1={}\nfor country,no in countries1.items():\n    country=country.replace(' ','')\n    if country in list(countries_fin1.keys()):\n        countries_fin1[country]+=no\n    else:\n        countries_fin1[country]=no\n        \ncountries_fin1={k: v for k, v in sorted(countries_fin1.items(), key=lambda item: item[1], reverse= True)}\n","d89c67a8":"# Set the width and height of the figure\nplt.figure(figsize=(15,15))\n\n# Add title\nplt.title(\"Content creating countries\")\n\n# Bar chart showing average arrival delay for Spirit Airlines flights by month\nsns.barplot(y=list(countries_fin1.keys()), x=list(countries_fin1.values()))\n\n# Add label for vertical axis\nplt.ylabel(\"Arrival delay (in minutes)\")","080d7e28":"features=['title','duration']\ndurations= netflix_shows[features]\n\ndurations['no_of_seasons']=durations['duration'].str.replace(' Season','')\n\n#durations['no_of_seasons']=durations['no_of_seasons'].astype(str).astype(int)\ndurations['no_of_seasons']=durations['no_of_seasons'].str.replace('s','')","287eff22":"durations['no_of_seasons']=durations['no_of_seasons'].astype(str).astype(int)\n","6cd24108":"t=['title','no_of_seasons']\ntop=durations[t]\n\ntop=top.sort_values(by='no_of_seasons', ascending=False)","8eb4ea08":"top20=top[0:20]\ntop20.plot(kind='bar',x='title',y='no_of_seasons', color='red')","3edcd109":"bottom=top.sort_values(by='no_of_seasons')\nbottom=bottom[20:50]\n\nimport plotly.graph_objects as go\n\nfig = go.Figure(data=[go.Table(header=dict(values=['Title', 'No of seasons']),\n                 cells=dict(values=[bottom['title'],bottom['no_of_seasons']],fill_color='lavender'))\n                     ])\nfig.show()","070e073d":"genres=list(netflix_shows['listed_in'])\ngen=[]\n\nfor i in genres:\n    i=list(i.split(','))\n    for j in i:\n        gen.append(j.replace(' ',\"\"))\ng=Counter(gen)","6d5192a8":"from wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\n\ntext = list(set(gen))\n\nmask=np.array(Image.open('..\/input\/masks\/upvote.png'))\nwordcloud = WordCloud(max_words=1000000,background_color=\"black\",mask=mask).generate(str(text))\nplt.rcParams['figure.figsize'] = (13, 13)\nplt.imshow(wordcloud,interpolation=\"bilinear\")\nplt.axis(\"off\")\nplt.show()","e31e5a27":"us_series_data=netflix_shows[netflix_shows['country']=='United States']","04826a1d":"oldest_us_series=us_series_data.sort_values(by='release_year')[0:20]","29619c14":"fig = go.Figure(data=[go.Table(header=dict(values=['Title', 'Release Year'],fill_color='paleturquoise'),\n                 cells=dict(values=[oldest_us_series['title'],oldest_us_series['release_year']],fill_color='pink'))\n                     ])\nfig.show()","a79569e7":"newest_us_series=us_series_data.sort_values(by='release_year', ascending=False)[0:50]","ac7c706e":"fig = go.Figure(data=[go.Table(header=dict(values=['Title', 'Release Year'],fill_color='yellow'),\n                 cells=dict(values=[newest_us_series['title'],newest_us_series['release_year']],fill_color='lavender'))\n                     ])\nfig.show()","fc9d9d74":"netflix_fr=netflix_overall[netflix_overall['country']=='France']\nnannef=netflix_fr.dropna()\nimport plotly.express as px\nfig = px.treemap(nannef, path=['country','director'],\n                  color='director', hover_data=['director','title'],color_continuous_scale='Purples')\nfig.show()\n","082a8e3a":"newest_fr_series=netflix_fr.sort_values(by='release_year', ascending=False)[0:20]","d56dcedf":"newest_fr_series","c561230e":"fig = go.Figure(data=[go.Table(header=dict(values=['Title', 'Release Year']),\n                 cells=dict(values=[newest_fr_series['title'],newest_fr_series['release_year']]))\n                     ])\nfig.show()","a3140286":"topdirs=pd.value_counts(netflix_overall['duration'])\nfig = go.Figure([go.Bar(x=topdirs.index, y=topdirs.values , text=topdirs.values,marker_color='indianred')])\nfig.update_traces(texttemplate='%{text:.2s}', textposition='outside')\nfig.show()","d498d8c3":"from sklearn.feature_extraction.text import TfidfVectorizer","363571d0":"#removing stopwords\ntfidf = TfidfVectorizer(stop_words='english')\n\n#Replace NaN with an empty string\nnetflix_overall['description'] = netflix_overall['description'].fillna('')\n\n#Construct the required TF-IDF matrix by fitting and transforming the data\ntfidf_matrix = tfidf.fit_transform(netflix_overall['description'])\n\n#Output the shape of tfidf_matrix\ntfidf_matrix.shape\n","c2482578":"# Import linear_kernel\nfrom sklearn.metrics.pairwise import linear_kernel\n\n# Compute the cosine similarity matrix\ncosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)","bfd65257":"indices = pd.Series(netflix_overall.index, index=netflix_overall['title']).drop_duplicates()","a5041a46":"def get_recommendations(title, cosine_sim=cosine_sim):\n    idx = indices[title]\n\n    # Get the pairwsie similarity scores of all movies with that movie\n    sim_scores = list(enumerate(cosine_sim[idx]))\n\n    # Sort the movies based on the similarity scores\n    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n\n    # Get the scores of the 10 most similar movies\n    sim_scores = sim_scores[1:11]\n\n    # Get the movie indices\n    movie_indices = [i[0] for i in sim_scores]\n\n    # Return the top 10 most similar movies\n    return netflix_overall['title'].iloc[movie_indices]","1ccfa808":"get_recommendations('Peaky Blinders')","c0fe34a2":"get_recommendations('Mortel')","f6162b1d":"filledna=netflix_overall.fillna('')\nfilledna.head(2)","b6d37536":"def clean_data(x):\n        return str.lower(x.replace(\" \", \"\"))","70bb3e6f":"features=['title','director','cast','listed_in','description']\nfilledna=filledna[features]","9aecf4e0":"for feature in features:\n    filledna[feature] = filledna[feature].apply(clean_data)\n    \nfilledna.head(2)","582c5990":"def create_soup(x):\n    return x['title']+ ' ' + x['director'] + ' ' + x['cast'] + ' ' +x['listed_in']+' '+ x['description']","86108ca4":"filledna['soup'] = filledna.apply(create_soup, axis=1)\n","8a852efc":"from sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.metrics.pairwise import cosine_similarity\n\ncount = CountVectorizer(stop_words='english')\ncount_matrix = count.fit_transform(filledna['soup'])\n\ncosine_sim2 = cosine_similarity(count_matrix, count_matrix)","c762a640":"filledna=filledna.reset_index()\nindices = pd.Series(filledna.index, index=filledna['title'])","235b152a":"def get_recommendations_new(title, cosine_sim=cosine_sim):\n    title=title.replace(' ','').lower()\n    idx = indices[title]\n\n    # Get the pairwsie similarity scores of all movies with that movie\n    sim_scores = list(enumerate(cosine_sim[idx]))\n\n    # Sort the movies based on the similarity scores\n    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n\n    # Get the scores of the 10 most similar movies\n    sim_scores = sim_scores[1:11]\n\n    # Get the movie indices\n    movie_indices = [i[0] for i in sim_scores]\n\n    # Return the top 10 most similar movies\n    return netflix_overall['title'].iloc[movie_indices]","a5e5e2cc":"get_recommendations_new('PK', cosine_sim2)","84266f7b":"get_recommendations_new('Peaky Blinders', cosine_sim2)","a2773261":"get_recommendations_new('The Hook Up Plan', cosine_sim2)","6f130234":"books=pd.read_csv('\/kaggle\/input\/goodbooks-10k\/books.csv')\nbooks['original_title']=books['original_title'].str.lower()\nx=netflix_overall\nx['title']=x['title'].str.lower()\nt=x.merge(books, left_on='title', right_on='original_title', how=\"inner\")","b168f289":"t.shape","4e308bd3":"import plotly.graph_objects as go\n\nlabels = ['Shows from books','Shows not from books']\nvalues = [248,6234]\n\nfig = go.Figure(data=[go.Pie(labels=labels, values=values)])\nfig.show()","9d6986e8":"From here on, the code is basically similar to the upper model except the fact that count vectorizer is used instead of tfidf.","ec3b379a":"Hence, more accurate predictions are obtained.","e1bea25b":"# Analysing IMDB ratings to get top rated movies on Netflix","20638fb7":"# Lollipop plot of Genres vs their count on Netflix","caad750b":"# Year wise analysis","bab99233":"# Movie ratings analysis","544c41fc":"Identifying features on which the model is to be filtered.","07fba0ec":"Top rated 10 movies on Netflix are:","2e38e7d6":"# WordCloud for Genres.","d5f752b4":"Content based filtering on the following factors:\n* Title\n* Cast\n* Director\n* Listed in\n* Plot","c38b3572":"# Content based filtering on multiple metrics","4124276a":"So, 2017 was the year when most of the movies were released.","5826dc83":"The above are latest released US television shows!","46f100ed":"These are some binge-worthy shows that are short and have only one season.","d7d2c904":"There are about 16151 words described for the 6234 movies in this dataset.","ad37440d":"Therefore, it is clear that international movies, dramas and comedies are the top three genres that have the highest amount of content on Netflix.","185f0183":"# Analysis of Movies vs TV Shows.","fed6a8aa":"A word cloud is an image made of words that together resemble a cloudy shape.","a5f95df3":"# How many Netflix Shows\/ Movies are made from books as their storylines?","e685e815":"It can be inferred that having one season is the most preferred duration.","19b29644":"Thus, NCIS, Grey's Anatomy and Supernatural are amongst the tv series that have highest number of seasons.","32f2671d":"It is very interesting to note that the content in France is very rational. There is no director in the data who has a large number of movies. In my opinion, it shows how different directors are given a chance to showcase their talents. What do you think?","f3e4cc0b":"# Content in France","74a432c6":"This recommendation is just based on the Plot.","77fc8fc0":"# Word Cloud for Genres","b26fbdbe":"For a detailed book recommendation system with both content and collaborative filtering click :\n    [Book Recommendation, EDA](https:\/\/www.kaggle.com\/niharika41298\/netflix-or-books-recommender-analysis-eda)","a427f4f3":"Naturally, United States has the most content that is created on netflix in the tv series category.","16da6d8b":"So, a good amount of movies on Netflix are among the duration of 75-120 mins. It is acceptable considering the fact that a fair amount of the audience cannot watch a 3 hour movie in one sitting. Can you? :p","e9963fdf":"netflix_shows['date_added'].head(2)# **Netflix is an application that keeps growing bigger and faster with its popularity, shows and content. This is an EDA or a story telling through its data along with a content-based recommendation system and a wide range of different graphs and visuals.**","35de8f66":"Here, The Cosine similarity score is used since it is independent of magnitude and is relatively easy and fast to calculate.\n\n<img src='https:\/\/i.stack.imgur.com\/36r1U.png'>","10658c63":"Please Upvote if you like the notebook \ud83d\ude00and share possible improvements in the comments.","74b75adc":"The TF-IDF(Term Frequency-Inverse Document Frequency (TF-IDF) ) score is the frequency of a word occurring in a document, down-weighted by the number of documents in which it occurs. This is done to reduce the importance of words that occur frequently in plot overviews and therefore, their significance in computing the final similarity score.","07d85d1a":"# Analysis of TV SERIES on Netflix","a423d233":"It is evident that there are more Movies on Netflix than TV shows.","2f73e494":"# If a producer wants to release some content, which month must he do so?( Month when least amount of content is added)","defda13f":"# Most content creating countries","26bd3f68":"# TOP 10 MOVIE CONTENT CREATING COUNTRIES","6bce5d05":"# TV shows with largest number of seasons","7e812c64":"It is seen that the model performs well, but is not very accurate.Therefore, more metrics are added to the model to improve performance.","b6dd934f":"![image.png](attachment:image.png)","1c15621b":"Above table shows the oldest US tv shows on Netflix.","5a0766a7":"## A little interesting history\n\nEven though it may look like Netflix is fairly new, it has been around since 1997! \n\nHere's a picture of the older Netflix website when rentals costed only 50 cents each and the website had only about 900 titles.\n\n![](https:\/\/producthabits.com\/wp-content\/uploads\/2018\/04\/Screenshot-2018-03-26-16.08.07.png)","888fa48c":"![Made with \u2665](https:\/\/forthebadge.com\/images\/badges\/built-with-love.svg)\nPlease upvote if you liked the kernel! \ud83d\ude00","8efafd1e":"# Top Duration","7ad6ccf1":"# Analysis of duration of movies","29a07740":"![](https:\/\/media.giphy.com\/media\/oenruB2DKC7p6\/giphy.gif)","6e0447a1":"Cleaning the data - making all the words lower case","a2a471c6":"Creating a \"soup\" or a \"bag of words\" for all rows.","8fcad210":"The largest count of movies are made with the 'TV-MA' rating.\"TV-MA\" is a rating assigned by the TV Parental Guidelines to a television program that was designed for mature audiences only. \n\nSecond largest is the 'TV-14' stands for content that may be inappropriate for children younger than 14 years of age.\n\nThird largest is the  very popular 'R' rating.An R-rated film is a film that has been assessed as having material which may be unsuitable for children under the age of 17 by the Motion Picture Association of America; the MPAA writes \"Under 17 requires accompanying parent or adult guardian\".","ae18356a":"# Recommendation System (Content Based)","d70f6a69":"Countries with highest rated content.","0917888e":"# Loading the dataset","cf1c86c0":"<img src='data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAANEAAADxCAMAAABiSKLrAAAByFBMVEX\/\/\/9CQrr8\/Pz\/\/v\/\/\/\/wAAAD8\/\/7\/\/f\/\/\/\/s8JaHs6\/WCdLby8vL5+fn\/\/v39\/\/7R0dHu7u7Dw8M4NLb85+Pi4uLKysr+wL\/X8PDn+PbU8eqLi4uenp5dXV38iYeXl5eurq7+QkIAnYre3t7+8emCgoKxsbFVVVVqamrH7egAnoMXopSRkZHQ0u14eHhycnIrKyv9MRD\/3eNEr6VWVlaRlNVLS0u8v+Y\/Pz8kJCT6AAD97++Ky8Gu3NsTExNDQsD\/77L+4X39PSz99uT\/2WkbGxtDRbhEQcc4ODj\/g3\/+\/\/D\/11L\/IhsAeELi4vOtrORmZr44M75cWr+pq9tDRK40NbDDw+14d8pRTsiantIyLbFLTLKCgsFdXcFubcu+xubyiYn\/3cz5xLb\/npz\/va7+zc79rqn8OzUxKrv2koLtUEb0S17+59ctIsD74erP0+WipNT\/78v43Dn9zAD55pm9wfH8OTX1YWX9aVn\/JyggAJU3HY80h2ap3MFAL5Q2Gqp7b8DG9d0ATwAwj1l+t5kAfioAbipgoH82qWyCtZuqyroAdTRQn26bxakMilGGfLNRQpxzvI6r6MJjt7iH1NMAj4tdwbGp5txcu\/AgAAAXnUlEQVR4nO1diX\/bxpV+HECDEYPBRYHlhRI2RJCyeSixRMl2a+aoKVVry6ZkWbXsyKu0brRttqmbJt0odY6162wdO7vdbt1\/d9+AFEXqiEWKokT\/+JkmIQAE34d3zHvAzACgExD8B4TUP4O\/g0USvFr3CzY0lxq7NXbe\/mP7O6TxH0jbz7T8EIG2o\/cOpCH99vEJQIusLaK28a2\/mgQIaT0jZIdL87TsnLTWs3EMnFoOScj+xyd79yB7tjTed847gX3kbTkzx6Yh8JJORgUz6aTwF5ImENs3MslkMuOl8U01UriPb6dwVUYsWiUnzfEzmhZCpfC7Ku6cJLi+aAUHdHHPqJkCKwpiUz7pRjPJjA95J+fjL3AzAxwsA0BN5UpW72lZV3zDVc0Ry8xfITDioKw5202NuK531XV94o9EAXKG5eYc30IOmbSZn8LP8hUT\/yiaPjdHfNeHTNKMOjnB0knid+1ZKKaAu\/5sxjWSJd+N8iueV07BCDdGXIB0CryRtGFZPSekXjHFR1YcGUWYnYqCgXKZFzmYkyqu9EtZgoxQhnTwhYwL\/AruMJtGuUZsXGOONNYDlH3BCE8BeGUIVAolPHJSbFPxkEZZMCpdVQG\/PR89FjeygtPKR8S7+D37YoMRGuKkbZrgp4tukxEKkEnbGVxy80YWRS2bgpGqqoIRAT\/TYESajHKCUUo1Ob9KIJ8PGLklSLnm\/PE4Uiop5MTTjI7qTcII5FJNRlcdp4ii43KDEUfJk+XiRRQy5wEaKeRHkvjlnJOp6wjPDyp0vjxr2nVGJGCUn3eyUXK1PIk2jYwcPHEp15gS+2d4rxn5RcEFdcRRR1lkZI5ES9tWZxKOjCCdL9YZpcpZGy1IvWjykXJ5RLgVn7SC01Fn5CYDHeHXdulI7HnV9CbtOiNrCl1tFn\/GGFF7zciuH3JWSId+hNaXzhW3rU5sQkZq1qkzEsFbSO4YVokQNye+6WbUHT9C1yAwJfzIbmMktnE8SbhTwAjKJVzy0Ll6zwjSk1bUUr0Ry0tdJIIRvyis7oqwOtzC8bSDP4KM0AcCydO2e5GjnEKxrudNRjFORi3I5O1otijsLIgyglExijE6YCSWOB7SQoMjwty8ER\/8q74dPQZG2MDkiip4xVIeTVp4dtTFc4dNlJopFnNmFNsQksfTaflBo+jnSkmb4Gb0cztVQoHVIu6n4vqiFeQHKdwZzDzxi8VSClw8GRbukYKMSlT0N24L3aVRkUaxVHR77kdDDDHEEEMMMcQQQwwxxBBDDDHEEEMMMcQQQwwxxBBDDDHEEEP0FjrIsoSfGoAk4fJJy3N0aAuaxiBcKBQWCWPSSYvTAyiKHL5x81akVqss3QgzTTlpgY4OvlypzYVu3QrNzUWWCsL6Bhi6rGmFm7VQNVQRqFbnIrcZoBEOLJgiz4RWQju4NbdSYBLpiFJL\/87dXW737kgO2tgjaPBprdJCqFINzVVvdxofiGoYHJqdYVBcVwXic9hf9OOjg2C3I9VWRnNIKbS5qnZodr6Tzu707kGJZ23gzt4eTHu7S\/cUuiTDYrWyQyhYFARrN5VOtETA9SFvQdQiJGqhdiyvbALPGZbJPSAegK3ii1sGqL4Btm0cCx8ACoystvgQcsFwh\/9ClZUbTMHth4abNh3VTbl51bdKkEm5V02Actp37Cnu5QAyUSgaed+CkpHz8lPRY9IRY3Ih0mJxoWo1FFmKYNybq9wKa538qJ\/NJWE+lZ4nVmZeUCgLqzOh5CWjaavBKJ3kRjlVSqX9Y+voLcN0O6NKZFVZRVVVKpszcifBAa1uFmY9z7YyatYoBYyIYGR4pYwaMMKXPxVN2p6K9nlMhBSZL217T92NItMLTP1FBZVVu8OkDii5Lkqcdz3bz0Qnec6yrqCOZlNGToWppNieMSajhldWs57Bk8fGCOTFlaa5hapztbv3sX3S7gu9RaY7Sh08Dzwb\/LxBXCtK1JQV5UAMK4XeVDLE0AjXj5pW2gYzneKGeTx0MNGW769tqydUqd29E5YxqWNwD5U0d0\/TDk1p1yCV1iERxM3sHkVxnH042XItoBOJ1Co3l8OgYZKqMLa4UqnOTcudlBWkOf6G7IwVEZ8cm9kdqsEgl2NsXxV2Z7P6\/tL766t37i+iDcoyowSQ1WqtGrkhs84KpcaQHJ1IutY+IkciBNdCg9ExDmhBRtORdc65Drt85n6tWivIkt7NQRmV5CY0WaNMo1SmvKuDdQr5Rii0jorZ\/WOMYLt0A+SuEnCm0Lb6SlIknUmK1kFz3T0KK3Ohddhb38lsHaulRdJVnaTQ8fGxVlzGFx\/nfSmN76xUQutMY7slV+R1NLuZTtqjHdAPLr27C5f+dePSB33R0XSkUlnikrTbuhSGjWxtucPIgKCc0g+uXdpAB2qCMPrLn+s\/\/lGPZP5hTGNlVF2UYbfkWhjbp9rMPvb4CigL+geXfnVmDKQW\/dI+MppZq1SxBt9jXEzkr2uFzhkR\/cGlX9EzD4DqdBuKBP1jFF4JVSPTe42L3UFGVb7Hv16NB5d+fXn8wwfa5SbGLvdTR\/Kd2lz17q7aTmYEMPvenNGVjqM3vXbt2qVLlzb+7dIOfsNRR\/DjH\/WlPdLp8tLcyu229kgGnRU2K0szOuucEXy+Ma5eHqf0d+M7WqJa\/xgBkcNLlXVolVxWdFivosktMKnzWHdtTGE0rtEdoEPp\/WPExKWtWuR220qF3a+t3FhQFNiTS7wS9M0xQolCGaY\/sq7rQfSWaR91hOBLtVthhQVNukSwuVVk9CKluwwI3nxL11AtTel1HSjpMyO9sFldR98RFiYLtcHq5tr9bi8UI6ONa5fa8FtOf91XRhpWFLVVpgc6kbGSmN5cWUVz7E4AZMQ3xt5qxUdU6a+OGFZDK7XVoK5U2ILyxmZ1CaNcF3FOABmh0TFhbRrUW9kgZ+hb9NZ1bH00vro2d2smjC0RvxFaidzEKlbXMI9hnbMSVrfdDD2oL5xhfYx1WLsoDGMAmf73WiTy\/vrSSqSythoYoCYzDFgdH\/DNt6gy9rvfiRpCpmPic2y8nzpCoYEWlheZ9vHNtUikEopsLt3WFgozi8JoWEcX7OoQVscomh2WrpThkqhp+xnrFpfXkUW1gFGucGd1ffVOAXncjtTmbq2iFXbhSqijhtWd4Rt9tDqFiYs+7ON11Iu4+hhZlkVWqqHjMPj92lw1FKrUIquLaJHN2gk3MiZJui4+FQRhLMgNmIKtMa5CI9WEjpQxdUwkP4xdHqtnQX3I64RojK\/WmrckMAHXZGxV2QK5txbcbwlVQ5GVG4Tp2xVFvXzDXRRJIgtMDgIZrpfYexLFPEFTFFlHRhAfFzndTl433g9GkqJpi0uRUGWH0qqyoCGl8E1xHX977dpquJmXNwseDJDBsrjUE9Q\/D\/\/wztuCFW5qiXVN\/In1wY80SV68i3yasocqK0uLaDiLd+da745Va+vhbauT32vBw48evv3w4cO363jnk08++cM7f3zIqC4iwzgbF5ZZtzzG1H5kqroWfr\/tnkQoNLeko8\/QUCsh\/CNyj2oS0yWZPfwXxM9a8M42\/igYffKzPz7kTFgdFaH7sgja9UtB47p+\/BUfC64CtSojhJ7EJF1b3cUotPKpSPYk0TqJS64IPciq0fIa1qeM\/wHZaFR4lmC0celzrPuu\/YZvfP6mWPjteB9qWFYIVaqtklcrK\/eRkaLP1NoYVVF3YczGgyvIjQs8QXwLIMsi5i28957gJeJdoKMHZ8bfU9HgqDZeh9QHRnL7fbBQ5ValuogBHN1rs90Yq9XIpwsgYfYg6Q0IFpgiSTqRSMBOYooI7ZoikUBHZ6hC4KOfX25Y3Vi8D1dOwr+otDmMWL6N8ZmxTyPVdkqhyippzx20xl0YwS44PUEVJImVQax7cEZBnm+9y8fOfPjhZ5999ifeh1hXiFR2yR2q3p1B2e6EQru3VKrhDrIhYXUfEnSxBx9eptgwqWp\/2qPlSHW3Kqqb01hJr87d2k01FCl00A9A6OizjY\/eGvvRGa6gxcmoL6UPOppe2cMoFJnB9uhGbY\/yQrXbHVxvEH70Llrbh2f+Y2HjzLtnNiiWWv1gFNkjdyjyMSZChbXKHkprMx1UFW+OyaSe\/HBJLGhYr4hrqvSYI8N+jEJhTNoW1\/au74SRfu0tZTsm1pstDPki96b911FlSSdYE1X3Wl1HOrr2FpXqAGl7QdRH9Of9Z7TKRPJ982iM6Jsb43txGdujfjOqVGu\/F71u2fTRGLEz++LzX258\/kHfGd3H9UT7dK\/2OtLR2Edj++Gy8tH4sd613MfqVhZBk7E239wT1jthpClUkeq5BL7p9fcgnaW0r4yqqCQukiBNPRojXZPpHoBEdUq6uBnVEaNqtb0n59xNDHQaFut3Ky0QKVG19ql26NOL2V1zX0xgm51WMDXvOYk2zKzNtUeA6ua9ukBws7WcCEhFFru4EgmiWzxT+tYZnk2vrERasLKyuSxOp6LJ05uRdlSWmdJVpxc5fLyG1gYmLX5caMXHheB6AiNKuH1DobDIuu37fa\/QnXK7ATalrd6ugajoQJQ6e27rYbyQOr8zJpxSHX1jkPvB74IsyWxma9Qc7OEKrRA3a5a2tpZPWo7eQQNWGB0dvXuig2QUCvG4GLeDjciRg67GtHtbX4xuFZhycgNlMH+hf37ENEL1w\/dPPQg6C3\/51VdfbH0ta8qJjTiTsF3\/5j8ff4NqIkdOkwksb42OfrH11SLb042qb5AIKPDkL0+\/TehHT1mY8uUbhdE3bn85DSc4iE7SUU\/X\/\/L06ZP40Q\/mzUB49A0Iz3Q6RqbH0ODR06f\/9U3iyDoSvesEoxMfP0cVeP78+ZPeyBEwOt6xU68Gxrv4t\/D42yOHbyweZcFIh+Psrn4IEIx3aHLPv8UsXMS7rqXRNE2vMzoN0BX67WOso6G7rsRN1K3uFEDHBgn+9lh0yH9dGCmUEvjr9fhRTeYUMZJEE\/vicRxkSo9geaeGkQCVNPrsu7jEpCM406liJFHR2H6XAIWQ14MRWp3OFKSEVte1N50qRpRiY0ukR9cnJKXrARynipEARnE68d0jkAnoXempyag5JGxnvNuBz3FqHUPf63RDIgQTiOvPQOmyYdrREQHT920w1B0Shmnm9vtSfTCjUR+Pbpa6+d0DIe5pUSnx\/TMK3fXCbTLiYM+LYcpOdOekZ6PmyP5a8lxQy16waF\/s5ncPhiRRqkHiz88Esy7qixY\/SmXEu8kJkgsGzYNJzCsAqpBchWB0rFjLcR\/fUYlNxDZuCkY2b2zsEXQaf\/xXcYOhc5tuyVStWRP1UTLMcsbJpUrzNuQs9QoYU7ksV3M58SyeYqlsQT4\/a5Qnc3bWI242l0JGplNChSUdpNkbQgTDXvz5E6oQqeMjtjAi+YtJjlZnjngwm4dkHqYs1BGeeMdXRyyOIUOFaDl4NpSVAz7rGbPodOYkZKzgEVPiMUa9gU4wKsSf\/zWudB7FWxmBmStCLirMqGSBW4Ks0BFPluZd9WIQ+KK50izPp6HOyM6LhyWZk6Ts5HJXIJft2XwORHRwAvrt8zgy6jDiNRkFUdi8QpyAUS5gFOiolCJ5V50MHGXWtmdJcodRGn\/bnuRlw7bRYq2LXk9juYSUmKITvaODtkQG2yTWrNDR1W1GWfFQq3mDzAodCRVliT9PAh1NEWF1kzZRMdZl0pxjpACnx4+Do+zJ8wUJOrt5ss0I5fWnHMeDomFmg4ka\/AyUomYZPaeY8dUp4SO85ORzasrFGOeUzJwNbtlxzSlQc47j8ymn1OuR21R\/8jyudeZLTUYiFJtCaiJG\/eMLg7hYJqBiPMeYEAyzN3ELFwbITcLrXyHiTxNDhGr2PIHAzPXF40RwE\/LQ3tSaMzQfYtkmmXga265HSbbJ3XwwJoFjmTEAKRGFHD7HO3WZ6m7o8OL7hFbvtX4onHpGkiI9uz6hHf6a+KlnpMsSPLueCNqlQ1neqWcUIPH9I0Wih4t5g8EIEtcfYc1+KMsbCEYawYLpkUZfJ0YKTVx\/IQejdF6180AwChD\/\/gVgwf6DDd72\/aOgd2e\/BOsWuhIXd5h+2PKYprEg99bkPnYO6hISF5TYKxhJUsBIgqPfdz9+UEb587\/9MCN5cbHuRx+rR7xn0y\/Q58+pohxcL+nq6HJ49L\/DX78xCDoSUERZ+wPVBYPprf8ZDY1uFUAejOlmubhpxg4WljD7i69Gv9i6qWmDMcmxuN4KT67HD3QRRuDrra9Gt2aAdTnRw4ngBVI6IOZh0L69NTr6ZbjfMh0JBF58lzigpRUj4W59tTXdb5mOBB218+JpYv+uWbLow7u1tdhvoY4ETRjco6ff7Gt1IvcJb309GE1RO75BSgrd3\/m\/nhmkqNCApiSe\/q+4bbsPWEEdkNa1FYxKiaeP9k+vZbYwGI1rGxStTmnfbWLKhj7L0yPErz8BsnPVS4b27AgrC1ki7LjHgvQQEhWUdgQWo86JtANFolRnrKN5m08WFOT49092ru9iTi6xFmDThEqqd28bDChYV9DHz5uWpsQndiNGYxOHu9xySiAhi2cBI6Zg+Lvwj3OtOIv\/Ey\/P92f20Z5BaUQGJa7wC+f+HuctUGnsfGzifHyQdATi2lDgJlSiLy\/830tNbxnGx7T42YQ6aIwA6vN6osldiP\/0ZWuow0iHjOLn+zMvcc8R\/\/uFWPwnL2m8BVSKn4vFz\/dlytve4+U\/zmIk+HvsfAt+CoPM6MJPErFYTGWxFsQHnJFGdJlSrTm9tyxTiJ8dZEYyVTRJJ\/UwV\/8YaD9CRvquokinA291Ly+0Y2LAGcnaT3dh0CODDGI2LsawfsAlGV+DbnWyVre68zHl5fn6wqAzgkYFESexiX8GC4MevbGGxSRIjEEVk+ZzQgY9emvKhSD3OTsBL5tZ0EDrCCARGN0\/4wrWroHVSYPOSCEEC3XOaZzH61P\/D7zVnT2LRhfg9bA6JTYREwk4mhy+JRITg97CgiRmGKRocEzEunqmOtg60s8Lazt3NgYX6qY38FZHz\/5TRLsElRMi1CVErBtsq6PnYuIBSD+JBfP6iste+qAzOhtTFEbPT0gXzomLDudeA6uLsQVkhAlqTI3FEolBz72R0UQ8Ho6fn2A0noiL6WQHvIWV6dnA1s5N0PPn\/vEyLmZ5G3BGIC4\/qvG4clksKCJKDLYfyWImA1mqX\/iWxLClgWeki2taYqIHhOjBryj6YDPab23sXCI2sIxEE7QL53BN4uU5OoCdGxDhhGiB2oFrYnos1uWjbU4a+n5TcqI76Yo0oDrCMLdHcKrJukaVQemwOsQQQxwZZNcjozv45knPyHUAth8Q3cE3Wp+LfQpBQDWiHTys29p+UDlJHYs8vYDrpMqHnw4iYzR0w3s8PUbPQCDlQtoHw1KBWxaolgGqbXkqKsP2LG5YqEXfA9u2bICoUTTA8FUwfW\/+pEU\/EKm87ZhW0sqB41qq42dS3rzlFH2H5PKpsl+yeDFa8pIlK8tTGWvSi2aiDpStZPmkBT8QqWyxCE46NRLNoJukAWaNIrgpcMycrTpgZIxsKpdKGlCMTnEoGplkatbPA588acEPQGB1ZZL1PNvKA\/ipdkY5YmSiSdvj6D9FS0xlgHZn27gbOcVWl4K85edtg8xaUbNspNNeSTDKmg7qiBhF1TEMnolCyUimopOelbENPumlTy8jz8AQAFbeAjPt4n+MDlHwPIjyqMqjYOLmtMsNE6ImcX3xibvaacM6pQ1Sy6RSuxaDT9Jc39awkubGU4lA2m0Zg8X2BIfsvJOWCbeOYwaJIQ6Dndk\/Xh+Q18yckI3vn7QQvQUxHccw89j+EJJS1RTxsXH1Mz42UT2baKqvQINLp4hjqGWTEMfEVtbhajSp5jzH5QPpX0SkRWL2QGxGuaOqOZ4sqSmnmDVK9iDygUail1Uh5wEmQqbDwSr5Ys6snA2DqSMsgqZsv5QRk+ylS8mcnc+4ai6dVkv2ScvWHUTktrGis4Mlj6tY64GYxxJ6NUdg39FMdAQB3siKyClO4l6NOqVGftdYPM1p6RBDDDHE6cP\/AxkCNJHmvFF+AAAAAElFTkSuQmCC' >","ea977596":"Therefore, it is clear that the dataset contains 12 columns for exploratory analysis.","f3f2b88d":"Filling null values with empty string.","381a258e":"If the latest year 2019 is considered, January and December were the months when comparatively much less content was released.Therefore, these months may be a good choice for the success of a new release!","ec218e5c":"Performing inner join on the ratings dataset and netflix dataset to get the content that has both ratings on IMDB and are available on Netflix.","e9812948":"# Lowest number of seasons."}}