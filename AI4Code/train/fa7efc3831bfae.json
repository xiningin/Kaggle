{"cell_type":{"1faea401":"code","c8d885c0":"code","4a1acab5":"code","71fcbe48":"code","bbc4c2f8":"code","b74ff3a7":"code","8a188add":"code","d2948aa5":"code","ae6cdbff":"code","f1bf8eef":"code","ca795e90":"code","d73440de":"code","d1710b92":"code","c9b3e823":"code","f52f6f3f":"code","93c9edb5":"markdown","f2bacede":"markdown","151f8cc6":"markdown","5f8aa5fb":"markdown","093bd148":"markdown","921528d5":"markdown","fa13985b":"markdown","48a1cdbe":"markdown"},"source":{"1faea401":"%load_ext autoreload\n%autoreload 2\n\nimport bayes_classifier as bc\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_auc_score\n\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nfrom sklearn.neighbors import KernelDensity\nfrom scipy import stats\nimport os\n\nwarnings.filterwarnings(\"ignore\")","c8d885c0":"DATA_DIR = \"..\/input\/santander-customer-transaction-prediction-dataset\"\nSUBMISSION_DIR = \".\"\n\nSAMPLE_RATIO = None\nTRAIN_SPLIT = 0.75\nTARGET_COL = \"target\"\nID_COL = \"ID_code\"","4a1acab5":"train_val = pd.read_csv(os.path.join(DATA_DIR, \"train.csv\"))\ntrain, val = train_test_split(train_val, test_size=0.2)\n\nVAR_COLS = list(train.columns)\nVAR_COLS.remove(TARGET_COL)\nVAR_COLS.remove(ID_COL)","71fcbe48":"train.head()","bbc4c2f8":"train.describe()","b74ff3a7":"print(\"Original train size: {}\".format(len(train_val)))\n\nprint(\"[SAMPLED]\\nTrain size: {}\\nValidation size: {}\\n\".format(len(train), len(val)))\n\ntrain.set_index(ID_COL, inplace=True)\nval.set_index(ID_COL, inplace=True)\ntrain_val.set_index(ID_COL, inplace=True)\n\ntrain, val = train_test_split(train, train_size=TRAIN_SPLIT)\n\nif SAMPLE_RATIO is not None:\n    val = val[:int(len(val)*SAMPLE_RATIO)]\n\nprint(\"[NEW]\\nTrain size: {}\\nValidation size: {}\\n\".format(len(train), len(val)))","8a188add":"SAMPLE = 9\nBINS = 501 # bins for distribution\n\nsubplot_x_y = (4, int(SAMPLE\/4)+1)\nplt.figure(figsize=(15,15))\n\n\nfor i in range(SAMPLE):\n    plt.subplot(subplot_x_y[0], subplot_x_y[1], i+1)\n    \n    sns.distplot(train[train.target == 0][\"var_\" + str(i)], bins=BINS, label=\"P(var_{}|0)\".format(i))\n    sns.distplot(train[train.target == 1][\"var_\" + str(i)], bins=BINS, label=\"P(var_{}|1)\".format(i))\n    sns.distplot(train[\"var_\" + str(i)], bins=200, label=\"P(var_{})\".format(i))\n    \n    plt.legend()","d2948aa5":"reverse_bayes = bc.ReverseBayes(TARGET_COL, VAR_COLS)","ae6cdbff":"%%time\nsavgol_params = {\"savgol_num\": 101}\n# p1, val1 = reverse_bayes.fit(train, \n#                              rolling_window=50,\n#                              smoothing_method=\"savgol\",\n#                              smoothing_params=savgol_params)","f1bf8eef":"# import random\n# import warnings\n# warnings.filterwarnings(\"ignore\")\n\n# from scipy.signal import savgol_filter, resample\n# from scipy.interpolate import interp1d\n\n# SAMPLE = random.sample(range(0, 200), 15)\n# BINS_P = 50\n\n# subplot_x_y = ((int(len(SAMPLE)\/4)+1)*2,4)\n# plt.figure(figsize=(25, 25))\n\n# for i, sample in enumerate(SAMPLE):\n    \n#     plt.subplot(subplot_x_y[0], subplot_x_y[1], 2*i+1)\n#     x1 = val1[sample]\n#     y1 = p1[sample]\n#     plt.plot(x1, y1, label=\"P(var_{}|1)\".format(sample))\n#     plt.legend()\n    \n#     plt.subplot(subplot_x_y[0], subplot_x_y[1], 2*i+2)\n#     sns.distplot(train[train.target == 0][\"var_\" + str(sample)], bins=BINS_P, label=\"P(var_{}|0)\".format(sample))\n#     sns.distplot(train[train.target == 1][\"var_\" + str(sample)], bins=BINS_P, label=\"P(var_{}|1)\".format(sample))\n#     plt.legend()\n    \n# plt.show()","ca795e90":"# _y = reverse_bayes.transform(val[val.columns[1:]])\n# print(\"test\")\n# eval_dict = reverse_bayes.evaluate(val[\"target\"], _y)\n# eval_dict","d73440de":"# best_threshold, _ = reverse_bayes.find_threshold(val[\"target\"], _y)","d1710b92":"test = pd.read_csv(os.path.join(DATA_DIR, \"test.csv\"))\ntest.set_index(ID_COL, inplace=True)\n\nif SAMPLE_RATIO is not None:\n    test = test[:int(len(test)*SAMPLE_RATIO)]","c9b3e823":"reverse_bayes.fit(train_val, \n                  rolling_window=50,\n                  smoothing_method=\"savgol\",\n                  smoothing_params=savgol_params)\n_y = reverse_bayes.transform(test)","f52f6f3f":"reverse_bayes.save_submission(_y, )","93c9edb5":"## Get visualization","f2bacede":"## Save submission","151f8cc6":"# Random ideas","5f8aa5fb":"- Filter outliers, for every variaablle","093bd148":"# Prepare dataset","921528d5":"## PREPARE_PROBS","fa13985b":"# Cross validation","48a1cdbe":"# Testing"}}