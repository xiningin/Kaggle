{"cell_type":{"9524f204":"code","72200f5a":"code","5b82299d":"code","f478b825":"code","f6760690":"code","f17b93ed":"code","6292135e":"code","549c4369":"code","6076442f":"code","3eb81e56":"code","573f9a01":"code","aebafd28":"code","6d4a58f9":"code","dd157841":"code","4b20983c":"code","5b187ffb":"code","7f6b2735":"code","05318fe2":"code","c6d42910":"code","189f2e2b":"code","7ca04c7b":"code","b89f7aee":"markdown","cc9be14a":"markdown","e382a0c6":"markdown","17639fe6":"markdown","47968a02":"markdown","a6cebbcf":"markdown","054183df":"markdown","d5037d95":"markdown"},"source":{"9524f204":"# General Libs\nfrom tensorflow import keras\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.preprocessing import image\nfrom tensorflow.keras.applications.inception_v3 import InceptionV3, preprocess_input\nfrom tensorflow.keras.applications.densenet import DenseNet121\nfrom tensorflow.keras.applications.inception_resnet_v2 import InceptionResNetV2, preprocess_input\nfrom tensorflow.keras.layers import GlobalAveragePooling2D, Dense, BatchNormalization, Dropout, Flatten, Conv2D, MaxPooling2D\nfrom tensorflow.keras.models import Sequential, Model, load_model\nfrom tensorflow.keras.optimizers import Adam\nimport numpy as np\nimport pandas as pd\nimport random\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport cv2\n%matplotlib inline","72200f5a":"def import_api_key(user, key):\n    !touch kaggle.json\n    !echo '{\"username\":\"'+user+'\",\"key\":\"'+key+'\"}' > .\/kaggle.json\n    !mkdir -p ~\/.kaggle\/ && mv kaggle.json ~\/.kaggle\/ && chmod 600 ~\/.kaggle\/kaggle.json\n    !ls -la ~\/.kaggle\/\n    from kaggle.api.kaggle_api_extended import KaggleApi\n    \nimport_api_key('eberthfelipe', '')    ","5b82299d":"!ls -la ..\/input\/aptos2019-blindness-detection\/","f478b825":"TRAINING_DIR = '..\/input\/aptos2019-blindness-detection\/train_images'\nTEST_DIR = '..\/input\/aptos2019-blindness-detection\/test_images'\nBATCH_SIZE = 64\n#seed = 10\nim_shape = (512,512)\n\n\n#Datasets path\ndf_train_path = '..\/input\/aptos2019-blindness-detection\/train.csv'\ndf_test_path = '..\/input\/aptos2019-blindness-detection\/test.csv'\n\ndf_train = pd.read_csv(df_train_path)\ndf_test = pd.read_csv(df_test_path)","f6760690":"# Reference: https:\/\/www.kaggle.com\/shubhamgajbhiye\/aptos-blindness-detection-eda-and-keras-resnet50\nsns.set_style(\"white\")\ncount = 1\nplt.figure(figsize=[20, 20])\nfor img_name in df_train['id_code'][:15]:\n    img = cv2.imread(\"..\/input\/aptos2019-blindness-detection\/train_images\/%s.png\" % img_name)[...,[2, 1, 0]]\n    plt.subplot(5, 5, count)\n    plt.imshow(img)\n    plt.title(\"Image %s\" % count)\n    count += 1\n    \nplt.show()","f17b93ed":"df_train.head()","6292135e":"df_train.info()","549c4369":"df_train['diagnosis'] = df_train['diagnosis'].astype(str)\ndf_train['id_code'] = df_train['id_code'].astype(str)+'.png'\n\ndf_test['id_code'] = df_test['id_code'].astype(str)+'.png'","6076442f":"# With augmentation\ndata_generator = ImageDataGenerator(\n        rescale=1.\/255,\n        validation_split=0.2,\n        #rotation_range=20,\n        #width_shift_range=0.2,\n        #height_shift_range=0.2,\n        #preprocessing_function=preprocess_input,\n        #shear_range=0.2,\n        zoom_range=0.2,\n        horizontal_flip=True,\n        vertical_flip=True,\n        #fill_mode='nearest'\n)\nval_data_generator = ImageDataGenerator(\n    #preprocessing_function=preprocess_input,\n    validation_split=0.2,\n    rescale=1.\/255\n)","3eb81e56":"# Generator para parte train\ntrain_generator = data_generator.flow_from_dataframe(directory=TRAINING_DIR, target_size=im_shape, shuffle=True,\n                                                     class_mode='categorical', batch_size=BATCH_SIZE,\n                                                     dataframe=df_train, x_col='id_code', y_col='diagnosis'\n                                                    )\n# Generator para parte valida\u00e7\u00e3o\nvalidation_generator = val_data_generator.flow_from_dataframe(directory=TRAINING_DIR, target_size=im_shape, shuffle=False,\n                                                              class_mode='categorical', batch_size=BATCH_SIZE, \n                                                              dataframe=df_train, x_col='id_code', y_col='diagnosis'\n                                                             )\n\n# Generator para dataset de teste\ntest_generator = ImageDataGenerator(rescale=1.\/255)\ntest_generator = test_generator.flow_from_dataframe(directory=TEST_DIR, target_size=im_shape, shuffle=False,\n                                                    class_mode=None, batch_size=BATCH_SIZE,\n                                                    dataframe=df_test, x_col='id_code'#, y_col='diagnosis'\n                                                   )\n\nnb_train_samples = train_generator.samples\nnb_validation_samples = validation_generator.samples\nnb_test_samples = test_generator.samples\nclasses = list(train_generator.class_indices.keys())\nprint('Classes: '+str(classes))\nnum_classes  = len(classes)","573f9a01":"# Visualizando alguns exemplos do dataset por meio do Generator criado\nplt.figure(figsize=(15,15))\nfor i in range(9):\n    #gera subfigures\n    plt.subplot(330 + 1 + i)\n    batch = train_generator.next()[0]*255\n    image = batch[0].astype('uint8')\n    plt.imshow(image)\nplt.show()","aebafd28":"model = Sequential()\nmodel.add(Conv2D(20, kernel_size=(3, 3),\n                 activation='relu',\n                 input_shape=(im_shape[0],im_shape[1],3)))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Conv2D(15, kernel_size=(3,3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Conv2D(10, kernel_size=(3,3), activation='selu'))\nmodel.add(Flatten())\nmodel.add(Dense(50, activation='relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(num_classes, activation='softmax'))\nmodel.summary()\n\n# Compila o modelo\nmodel.compile(loss='categorical_crossentropy',\n              optimizer=Adam(),\n              metrics=['accuracy'])","6d4a58f9":"epochs = 6\n\n#Callback to save the best model\ncallbacks_list = [\n    keras.callbacks.ModelCheckpoint(\n        filepath='model.h5',\n        monitor='val_loss', save_best_only=True, verbose=1),\n    keras.callbacks.EarlyStopping(monitor='val_loss', patience=2,verbose=1)\n]\n\n#Training\nhistory = model.fit(\n        train_generator,\n        steps_per_epoch=nb_train_samples \/\/ BATCH_SIZE,\n        epochs=epochs,\n        callbacks = callbacks_list,\n        validation_data=validation_generator,\n        verbose = 1,\n        validation_steps=nb_validation_samples \/\/ BATCH_SIZE)","dd157841":"def plot_curves(history_param):\n    # Training curves\n    history_dict = history_param.history\n    loss_values = history_dict['loss']\n    val_loss_values = history_dict['val_loss']\n\n    epochs_x = range(1, len(loss_values) + 1)\n    plt.figure(figsize=(10,10))\n    plt.subplot(2,1,1)\n    plt.plot(epochs_x, loss_values, 'bo', label='Training loss')\n    plt.plot(epochs_x, val_loss_values, 'b', label='Validation loss')\n    plt.title('Training and validation Loss and Accuracy')\n    plt.xlabel('Epochs')\n    plt.ylabel('Loss')\n    plt.legend()\n    plt.subplot(2,1,2)\n    acc_values = history_dict['accuracy']\n    val_acc_values = history_dict['val_accuracy']\n    plt.plot(epochs_x, acc_values, 'bo', label='Training acc')\n    plt.plot(epochs_x, val_acc_values, 'b', label='Validation acc')\n    #plt.title('Training and validation accuracy')\n    plt.xlabel('Epochs')\n    plt.ylabel('Acc')\n    plt.legend()\n    plt.show()\n    \n\n","4b20983c":"plot_curves(history)","5b187ffb":"def view_result():\n    # Load the best saved model\n    model = load_model('model.h5')\n\n    # Using the validation dataset\n    score = model.evaluate(validation_generator)\n    print('Val loss:', score[0])\n    print('Val accuracy:', score[1])\n\n    # Using the test dataset\n    score = model.evaluate(test_generator)\n    print('Test loss:', score[0])\n    print('Test accuracy:', score[1])\n    \n","7f6b2735":"view_result()","05318fe2":"base_model = DenseNet121(weights='imagenet', include_top=False, input_shape=(im_shape[0], im_shape[1], 3))\n\nx = base_model.output\nx = MaxPooling2D(pool_size=(2, 2))(x)\nx = Conv2D(30, kernel_size=(3,3), activation='selu')(x)\nx = Flatten()(x)\nx = Dense(70, activation='selu')(x)\npredictions = Dense(num_classes, activation='softmax', kernel_initializer='random_uniform')(x)\n\nmodel = Model(inputs=base_model.input, outputs=predictions)\n\n# Freezing pretrained layers\nfor layer in base_model.layers:\n    layer.trainable=False\n    \noptimizer = Adam()\nmodel.compile(optimizer=optimizer,loss='categorical_crossentropy',metrics=['accuracy'])","c6d42910":"epochs = 10\n\n# Saving the best model\ncallbacks_list = [\n    keras.callbacks.ModelCheckpoint(\n        filepath='model.h5',\n        monitor='val_loss', save_best_only=True, verbose=1),\n    keras.callbacks.EarlyStopping(monitor='val_loss', patience=2,verbose=1)\n]\n\nhistory = model.fit(\n        train_generator,\n        steps_per_epoch=nb_train_samples \/\/ BATCH_SIZE,\n        epochs=epochs,\n        callbacks = callbacks_list,\n        validation_data=validation_generator,\n        verbose = 1,\n        validation_steps=nb_validation_samples \/\/ BATCH_SIZE)","189f2e2b":"plot_curves(history)","7ca04c7b":"view_result()","b89f7aee":"Change type of `id_code` and `diagnosis` to string","cc9be14a":"# Load Dataset","e382a0c6":"# Create Simple Model","17639fe6":"# Data Augumentation ","47968a02":"Reference: https:\/\/colab.research.google.com\/github\/drprajapati\/APTOS-2019-Blindness-Detection\/blob\/master\/APTOS_Blindness_Detection_Preprocessing.ipynb#scrollTo=siy27T6ig6q4","a6cebbcf":"# Transfer Learning from a Deep Model","054183df":"## Initial View","d5037d95":"**Detec\u00e7\u00e3o de retinopatia diab\u00e9tica para evitar cegueira**\n\n![](https:\/\/raw.githubusercontent.com\/dimitreOliveira\/MachineLearning\/master\/Kaggle\/APTOS%202019%20Blindness%20Detection\/aux_img.png)\n\n\n**Legend**\n* 0 - No DR\n* 1 - Mild\n* 2 - Moderate\n* 3 - Severe\n* 4 - Proliferative DR"}}