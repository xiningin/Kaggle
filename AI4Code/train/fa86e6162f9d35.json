{"cell_type":{"4f6f5a72":"code","0512a737":"code","3a2e96b0":"code","6367aeb6":"code","1965686d":"code","d2b9c7ff":"code","4821438f":"code","a697edcd":"code","ab53fee4":"code","f4238d75":"code","eee68816":"code","a907f8e4":"code","d76623f3":"code","7e0c6252":"code","eb760fca":"code","4fa0eca1":"code","504cc7e3":"code","ad9c2e74":"code","e095d1fa":"code","698d284d":"code","f9665391":"code","ac1124ef":"code","26a72ea6":"code","c457af15":"code","62e306b1":"code","e53672d6":"code","62d2a54d":"code","53afa92e":"code","17c059e1":"code","29b58cd8":"code","72d67ad8":"code","580f4120":"code","ef30d38f":"code","27e92c50":"code","ea154f38":"code","f9952023":"code","5b4e111c":"code","894dc2f4":"code","07fbb7e9":"code","77d6d36c":"code","d7b11f75":"markdown","c74abc78":"markdown","0e7aee90":"markdown","44d83867":"markdown","c9709ef5":"markdown","c101fabf":"markdown","2e44ba6a":"markdown","527cffc2":"markdown","8f86a0c9":"markdown","d87c3201":"markdown","4f6ff121":"markdown","0f33632f":"markdown","6d7e1dc1":"markdown","4d3ab80b":"markdown","ebe535d5":"markdown","56b1d420":"markdown"},"source":{"4f6f5a72":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \nimport matplotlib.pyplot as plt\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nfrom datetime import datetime \n# import matplotlab.pyplot as plt\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    print(dirname)\n    print(filenames)\n    filenames\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","0512a737":"data_train = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ndata_test=pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")\ndata_co=[data_train,data_test]\ndata_train2=data_train","3a2e96b0":"data_test.shape","6367aeb6":"data_train.info()\nt1=datetime.now()\nprint('start data processing',datetime.now())","1965686d":"data_train.MSSubClass","d2b9c7ff":"data_train.describe()","4821438f":"qualitative = [f for f in data_train.columns\n    if data_train[f].dtypes==object]\n\nquantitative =[f for f in data_train.columns\n    if data_train[f].dtypes!=object]\nquantitative.remove('SalePrice')\nquantitative.remove('Id')\nquan=quantitative\nqual=qualitative","a697edcd":"print(\"quantitative:\" +str(len(quantitative))+\" \"\n     \"qualitative:\" + str(len(qualitative)))\n","ab53fee4":"y,ax=plt.subplots(figsize=(12,8))\ncorrmat=data_train.corr()\nsns.heatmap(corrmat)","f4238d75":"k  = 10 # \u5173\u7cfb\u77e9\u9635\u4e2d\u5c06\u663e\u793a10\u4e2a\u7279\u5f81\ncorrmat = data_train.corr()\nfig,ax=plt.subplots(figsize=(14,7))\ncols = corrmat.nlargest(k, 'SalePrice')['SalePrice'].index\ncm = np.corrcoef(data_train[cols].values.T)\nsns.set(font_scale=1.25)\nhm = sns.heatmap(cm, cbar=True, annot=True, square=True, fmt='.2f', annot_kws={'size': 10}, yticklabels=cols.values, xticklabels=cols.values)\nplt.show()","eee68816":"features_int=cols\nfeatures_int","a907f8e4":"idx_qual=data_train2[qual].columns[data_train2[qual].isnull().any()==True]","d76623f3":"idx_qual","7e0c6252":"f,ax=plt.subplots(figsize=(12,6))\ndata_isnull=data_train[qual].isnull().sum()\n\ndata_isnull[data_isnull>0].plot(kind='bar')\n# sns.barplot(data_isnull)","eb760fca":"type(data_isnull)","4fa0eca1":"data_train['MasVnrType'][data_train['MasVnrType'].isnull()]","504cc7e3":"data_train['MasVnrType'].describe()","ad9c2e74":"data_train['Electrical']=data_train['Electrical'].fillna('SBrkr')\ndata_test['Electrical']=data_test['Electrical'].fillna('SBrkr')\nfor data in data_co:\n    for i in ['BsmtQual','BsmtCond','MasVnrType','GarageType','MiscFeature','GarageQual','GarageCond','BsmtExposure','GarageFinish','BsmtFinType2','BsmtFinType1']:\n        data[i]=data[i].fillna('None')","e095d1fa":"data_train.columns[data_train.isnull().any()]","698d284d":"idx_qual","f9665391":"for data in data_co:\n    a=data[qual]\n    c=[b for b in data[qual].columns if (data[b].isnull().sum()<600 and data[b].isnull().sum()>0)]\n    d=[b for b in data[qual].columns if data[b].isnull().sum()>600]\n    for x in d:\n        qual.remove(x)\n","ac1124ef":"for data in data_co:\n    data=data.drop([\"Alley\",  \"FireplaceQu\",  \"PoolQC\",\"Fence\"],axis=1)","26a72ea6":"data_test.shape","c457af15":"data_train[qual].info()","62e306b1":"var=qual\ndata_tem=pd.DataFrame()\ndata_tem1=pd.DataFrame()\nfor i in qual:\n    data_tem=pd.concat([data_tem,pd.get_dummies(data_train[i],prefix=i)],axis=1)\n    data_tem1=pd.concat([data_tem1,pd.get_dummies(data_test[i],prefix=i)],axis=1)\n","e53672d6":"data_tem","62d2a54d":"data_tem1.shape","53afa92e":"data_tem.shape","17c059e1":"for i in data_tem.columns:\n    if i not in data_tem1.columns:\n        data_tem.drop(i,axis=1,inplace=True)","29b58cd8":"data_tem1.shape","72d67ad8":"# X_train.shape\nfor i in data_co:\n    i.fillna(i.mean(),inplace=True)","580f4120":"\ndf_train=pd.concat([data_train[quan],data_tem],axis=1)\ndf_test=pd.concat([data_test[quan],data_tem1],axis=1)","ef30d38f":"X=df_train\ny_train=data_train.SalePrice\nX.isnull().any()","27e92c50":"df_test.shape","ea154f38":"from sklearn.linear_model import ElasticNet, Lasso, BayesianRidge,LassoLarsIC\nfrom sklearn.ensemble import RandomForestRegressor,GradientBoostingRegressor\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import RobustScaler,StandardScaler\nimport xgboost as xgb\nfrom sklearn import linear_model\nfrom sklearn import svm, gaussian_process\nimport warnings\nimport lightgbm as lgb\nwarnings.filterwarnings('ignore')\nfrom sklearn.model_selection import KFold,cross_val_score,train_test_split,learning_curve","f9952023":"scaler=StandardScaler()\nX_scale=scaler.fit_transform(X)\ny_scale=y_train\nX_train,X_test,y_train,y_test=train_test_split(X_scale,y_scale,test_size=0.3,random_state=42)\n\nclfs={\n    'svm':svm.SVR(),\n    'RandomForestRegressor':RandomForestRegressor(n_estimators=400),\n    'BayesianRidge':linear_model.BayesianRidge(),\n    'Lasso':linear_model.Lasso(alpha =0.0005, random_state=1),\n    'xgb': xgb.XGBRegressor(colsample_bytree=0.4603, gamma=0.0468, \n                             learning_rate=0.05, max_depth=3, \n                             min_child_weight=1.7817, n_estimators=2200,\n                             reg_alpha=0.4640, reg_lambda=0.8571,\n                             subsample=0.5213, silent=1,\n                             random_state =7, nthread = -1)\n}\nfor clf in clfs:\n    clfs[clf].fit(X_train,y_train)\n    y_pred=clfs[clf].predict(X_test)\n    print(clf+'cost:'+str(np.sum(y_pred-y_test)\/len(y_pred)))","5b4e111c":"def plot_learning_curve(estimator, title, X, y, ylim=None, cv=None, n_jobs=1, \n                        train_sizes=np.linspace(.05, 1., 20), verbose=0, plot=True):\n    train_sizes, train_scores, test_scores = learning_curve(estimator, \n    X, y, cv=cv, n_jobs=n_jobs, train_sizes=train_sizes, verbose=verbose)\n    \n    train_scores_mean = np.mean(train_scores, axis=1)\n    train_scores_std = np.std(train_scores, axis=1)\n    test_scores_mean = np.mean(test_scores, axis=1)\n    test_scores_std = np.std(test_scores, axis=1)\n    \n    if plot:\n        plt.figure()\n        plt.title(title)\n        if ylim is not None:\n            plt.ylim(*ylim)\n        plt.xlabel(u\"training data\")\n        plt.ylabel(u\"score\")\n        plt.grid()\n    \n        plt.fill_between(train_sizes, train_scores_mean - train_scores_std, train_scores_mean + train_scores_std, \n                         alpha=0.1, color=\"b\")\n        plt.fill_between(train_sizes, test_scores_mean - test_scores_std, test_scores_mean + test_scores_std, \n                         alpha=0.1, color=\"r\")\n        plt.plot(train_sizes, train_scores_mean, 'o-', color=\"b\", label=\"training score\")\n        plt.plot(train_sizes, test_scores_mean, 'o-', color=\"r\", label=\"test score\")\n    \n        plt.legend(loc=\"best\")\n        plt.draw()\n        plt.show()\n\n        # plt.pause(0.001) \n        plt.gca().invert_yaxis()\n       \n    \n    midpoint = ((train_scores_mean[-1] + train_scores_std[-1]) + (test_scores_mean[-1] - test_scores_std[-1])) \/ 2\n    diff = (train_scores_mean[-1] + train_scores_std[-1]) - (test_scores_mean[-1] - test_scores_std[-1])\n    return midpoint, diff\n\n","894dc2f4":"clf_xgb=clfs['xgb']\nplot_learning_curve(clf_xgb,'learning curve',X_scale,y_scale)","07fbb7e9":"# np.isnan(X_train_scale).any()\nclf=clfs['Lasso']\nrfr=clf\nX_test_scale=scaler.fit_transform(df_test)\npredictions=rfr.predict(X_test_scale)\nsub = pd.DataFrame()\nsub['Id'] = data_test['Id']\nsub['SalePrice'] = predictions\nsub.to_csv('submission1.csv',index=False)","77d6d36c":"print('end data processing',datetime.now())\nt2=datetime.now()\nprint('running time:',t2-t1)","d7b11f75":"\u989d\uff0c\uff0c\u8fd9\u4e2a\u6570\u636e\u8fd8\u662f\u6709\u70b9\u591a\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u53ea\u770b\u548csaleprice\u76f8\u5173\u7684","c74abc78":"\u5728\u505a\u8fd9\u4e2adummies \u4e0a\u6d6a\u8d39\u4e86\u534a\u4e2a\u949f\u5934\uff0c\u4e3a\u4e86\u5bfb\u627e\u4e00\u4e2a\u7b80\u5355\u7684for\u3002 \u539f\u6765dataframe\u683c\u5f0f\u53ef\u4ee5\u76f4\u63a5\u8d4b\u503c\uff0c\u4e0d\u7528\u8fdb\u884c\u521d\u59cb\u5316\u3002\u4e0b\u9762\u9a8c\u8bc1\u662f\u5426\u6dfb\u52a0\u6210\u529f\u3002\u63a5\u4e0b\u6765\u5c31\u662f\u628a\u6240\u6709\u7684qual \u548c \u4e4b\u524d\u7684quan\u5408\u5e76\u8d77\u6765","0e7aee90":"\u628a\u4e0b\u9762\u7684\u5199\u5b8c\u4e4b\u540e\u624d\u77e5\u9053\u539f\u6765\u7528 .mode()\u51fd\u6570\u53ef\u4ee5\u76f4\u63a5\u9009\u51fathe most frequency \u7684\u5143\u7d20\u3002\u8bb0\u4f4f\uff01\uff01\uff01\u641c\u8863\uff0c\u4e0b\u9762\u7684\u7528 data_train['Electrical'].mode()[0] \u662f\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u4e0d\u7528\u518d\u52a0\u4e4b\u524d\u7528describe \u68c0\u7d22\u5230\u6700\u591a\u7684\u5143\u7d20","44d83867":"hhhh,\u4e25\u91cd\u8fc7\u62df\u5408\uff01\uff01\uff01\uff0c\u6240\u4ee5\u63a5\u4e0b\u6765\u5c31\u662f\u7b5b\u9009\u5408\u5e76feature\u7684\u8fc7\u7a0b\u4e86\uff0c\u6563\u4e86\u5427\u6563\u4e86\u5427\ud83d\ude22\ud83d\ude22\ud83d\ude22\uff0c\u770b\u770b\u5176\u4ed6\u7684\u4f18\u79c0kernel\u5427\uff0c\u6b64\u6587\u5c31\u662f\u53cd\u9762\u6559\u6750","c9709ef5":"WHAT! \u600e\u4e48\u8fd8\u662f\u6709\u7f3a\u5931\u503c,,,\u641e\u4e86\u534a\u5929\u627e\u5230\u9519\u8bef\u4e86\uff0c\u4ee5\u4e3a\uff0cdata_train.fillna(None\/da\/)\u4e0d\u4f1a\u81ea\u52a8\u586b\u5145\u5230\u539f\u5217\u4e2d\uff0c\u4e5f\u5c31\u662f\u8bf4\u9700\u8981\u628a\u586b\u5145\u7684\u503c\u4ed8\u7ed9\u81ea\u5df1\uff0c\u6216\u8005\u6539\u4e3adata_train.fillna(None\/da\/\uff0cinplace=True)\nAnyway, \u4e5f\u7b97\u5b66\u5230\u4e86\u4e00\u4e2a\u5c0f\u77e5\u8bc6\uff0c\u73b0\u5728\u53ef\u4ee5\u518d\u6b21\u67e5\u770b\uff0c\u6240\u6709\u7684qualitative columns\u5df2\u7ecf\u6ca1\u6709nan\u4e86. So, \u4e0b\u4e00\u6b65\u5c31\u662fdummies \u5904\u7406\u6216\u8005label coder \u6216 one hot code,\u8fd9\u91cc\u9009\u62e9\u7684\u662fdummies ","c101fabf":"\u6e05\u6670\u660e\u4e86\u7684\u591a\u4e86\uff0c\u4e00\u4e0b\u5c31\u53ef\u4ee5\u770b\u51fa\u524d10\u4e2a\u548csaleprice\u76f8\u5173\u5ea6\u7684features,\u628a\u8fd910\u4e2a\u6570\u503c\u578bfeature\u6253\u5370\u5907\u7528","2e44ba6a":"\u4e0a\u9762\u628a\u6240\u6709\u7684nan\u7684\u503c\u5168\u7528\u51fa\u73b0\u6700\u9891\u7e41\u7684\u503c\u586b\u5145\uff0c\u4e5f\u8bb8\u4e0d\u6b63\u786e\u6216\u8005\u6548\u679c\u4e0d\u597d\uff0c\u4f46\u662f\u5148\u628abaseline\u64b8\u51fa\u6765\u662f\u4e0b\u4e00\u6b65\u4f18\u5316\u7684\u57fa\u7840\u3002\u4e0b\u9762\u9a8c\u8bc1\u4e0b\u770b\u770b\u662f\u4e0d\u662f\u8fd8\u6709\u7f3a\u5931\u503c\u3002","527cffc2":"\u4e0b\u9762\u662f\u89c2\u5bdf\u6bcf\u4e2afeature\u7684\u7c7b\u578b\uff0c\u6709\u4e9b\u662fobject \u6709\u4e9b\u662fint64\uff0c\u6240\u4ee5\u63a5\u4e0b\u6765\u5206\u5f00\u8ba8\u8bba\u3002\u53ef\u4ee5\u770b\u5230\u6709\u4e9b\u53d8\u91cf\u7f3a\u5931\u7684\u5389\u5bb3\u554a\uff0c\u9488\u5bf9\u8fd9\u4e9b\u7f3a\u5931\u51e0\u4e4e\u4e00\u534a\u7684feature\u6211\u5c31\u539f\u5730\u820d\u5f03\u4e86\uff0cfill\u65b0\u6570\u636e\u53cd\u800c\u4f1a\u5bf9\u6a21\u578b\u9020\u6210\u8bef\u5bfc\u3002\uff08\u5bf9\u5c0f\u767d\u7684\u6211\u6765\u8bf4\uff0c\u80fd\u5c11\u5219\u5c11\u3002\u3002\uff09","8f86a0c9":"\u5728\u586b\u5145\u4e4b\u540e\u4ecd\u8fd8\u6709nan\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u628a\u4e4b\u524d\u7684nan\u7684\u5217\u6253\u51fa\u6765\u4e86\uff0c\u770b\u770b\u90a3\u4e9b\u4e4b\u524d\u6ca1\u6709\u770b\u627e\u5230\uff0c\u6709\"Alley\",  \"FireplaceQu\",  \"PoolQC\",\"Fence\",  'MisFeature\",\u5c31\u662f\u6211\u4e4b\u524d\u5e94\u8be5drop\u6389\u7684\u4f46\u662f\u5fd8\u8bb0\u4e86,\u73b0\u5728\u6254\u6389\uff0c\u8fd8\u4e0d\u7b97\u665a\u3002","d87c3201":"\u53ef\u4ee5\u770b\u523036\u4e2aquantitative \u7c7b\u7684\u8fd8\u670943 \u4e2a\u975equalitative\uff0c \u96be\u7684\u662f\u540e\u9762\u7684\u8f93\u51fa\u5904\u7406\u3002\u6570\u503c\u578b\u7684\u6570\u636e\u8fd8\u662f\u592a\u591a\u4e86, \u6240\u4ee5\u6211\u5c31\u770b\u5230\u4e4b\u524d\u7684\u4e00\u7bc7kernel\u7528\u4e86\u4e00\u4e2aheatmap \u53bb\u770b\u8fd9\u4e9b\u6570\u636e\u4e4b\u95f4\u7684\u8054\u7cfb\uff0c\u76f8\u5173\u7684\u6570\u636e\u3002 \u8bd5\u4e86\u4e0b\uff0c\u975e\u5e38\u5f3a\u5927\u7684\u4e00\u4e2a\u5de5\u5177\u3002","4f6ff121":"\u5927\u81f4\u7684\u5bf9\u6570\u636e\u6709\u4e2a\u4e86\u89e3\uff0c","0f33632f":"\u7528\u4e86\u8fd9\u4e48\u591a\u53d8\u91cf\uff0coverfit\u7684\u53ef\u80fd\u6027\u5f88\u5927\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u770b\u770blearning-curve \u662f\u4e0d\u662f\u5728\u6b63\u5e38\u7684\u6c34\u5e73\u7ebf\u4e0a\u3002","6d7e1dc1":"\u67e5\u51fa\u6765\u4e4b\u540e\u628a\u7f3a\u5931\u503c\u6dfb\u4e0a\uff0c\u91c7\u7528data.mean(),\u4e0b\u9762\u4f1a\u586b\u5145","4d3ab80b":"\u8fd9\u4e94\u4e2a\u7f3a\u5931\u503c\u5927\u4e8e\u4e00\u534a\u7684qual\u4e5f\u53ef\u4ee5\u7684\u7701\u53bb\u4e86. \u8fd9\u4e00\u6b21\u6211\u5c31\u4e0d\u7b5b\u9009\u4e86\uff0c\u628a\u5168\u90e8\u7684qual\u90fdfill\u4e4b\u540e\u52a0\u5230feature\u91cc\u9762.\u627e\u5230\u4e86\u8fd99\u4e2a\u8fd8\u80fd\u633d\u6551\u7684\u5b69\u5b50\uff0c\u4ed6\u4eec\u7684\u7f3a\u5931\u6570\u91cf\u5728200\u4ee5\u5185\uff0c\u6240\u4ee5\u6211\u5c31\u8bd5\u7740\u7ed9\u4ed6\u4eec\u4e00\u6b21\u673a\u4f1a\u3002\u628a\u4ed6\u4eec\u7684\u7f3a\u5931\u503c\u6a21\u62df\u586b\u5145\u4e00\u4e0b\u3002\u63a5\u4e0b\u7684\u5de5\u4f5c\u5c31\u6bd4\u8f83\u7e41\u7410\u548c\u91cd\u590d\u6027\uff0c\u5bf9\u4e8e\u4ee5\u4e0a\u7684feature\u4e00\u4e2a\u4e2a\u67e5\u627e\u89c2\u5bdf\uff0c\u9009\u62e9\u5408\u9002\u7684fill\u7b56\u7565\u3002","ebe535d5":"\u67e5\u770b\u4e00\u4e0b\u5728\u6d4b\u8bd5\u5c31\u548c\u8bad\u7ec3\u96c6\u4e2d\u8fd9\u51e0\u4e2afeature\u662f\u5426\u5b58\u5728\u6570\u636e\u95ee\u9898\uff0c\u4f8b\u5982\u7f3a\u5931\u7b49,\u5f88\u5b8c\u7f8e\uff0c\u90fd\u6ca1\u6709\uff0c\u6240\u4ee5\u5c31\u6570\u503c\u578b\u800c\u8a00\u6211\u5c31\u51b3\u5b9a\u7528\u774010\u4e2a\uff0c\u5148\u5f85\u5b9a\uff0c\u540e\u9762\u53ef\u4ee5\u518d\u5220\u6216\u8005\u52a0\u3002\u63a5\u4e0b\u6765\u5c31\u662f\u4ee4\u4eba\u5934\u5927\u7684\u6570\u503c\u578bfeature\u4eec\u4e86","56b1d420":"\u5efa\u7acb\u6a21\u578b\u5566\uff01\uff01\uff01basemodel(\u8fd8\u6ca1\u6709\u53bb\u9664outlier\u503c),**\u4ee5\u53ca\u8fd8\u6ca1\u6709\u6807\u51c6\u5316**,\u8fd8\u662f\u5148\u6807\u51c6\u5316\u4e4b\u540e\u518d\u9001\u8fdb\u53bb\u8bad\u7ec3\u5427\u3002"}}