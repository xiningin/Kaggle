{"cell_type":{"110ed4b3":"code","dc33f915":"code","e359c85c":"code","766f568c":"code","7ecb4d8f":"code","edb91d48":"code","75a2c1a7":"code","3c32e889":"code","403f9c7d":"code","c6b713ba":"code","922d162e":"code","851b8475":"code","8700206d":"code","e556164c":"code","b271cada":"code","09c47072":"code","a1b19349":"code","32af4d90":"code","0550d5bb":"code","62949082":"code","6d395626":"code","1b71913e":"code","4cd13c91":"code","5bec558a":"code","bb864880":"code","38151ad1":"code","d7327eb9":"code","07a6c3dd":"code","648c9c70":"code","4da15dd1":"code","04f4eb7d":"code","b7a24918":"code","1fd0fa26":"code","759f183f":"code","28df2ac6":"markdown","0f36734c":"markdown","247433e1":"markdown","1f2924d2":"markdown","452be6a4":"markdown","f78e64b8":"markdown","e7ac6c93":"markdown","759abf7b":"markdown","4cb6d3d2":"markdown","279e216b":"markdown","80d98d14":"markdown","d6eaeba6":"markdown","d6c928cf":"markdown","b6693721":"markdown","4d5adc55":"markdown","da6d43d1":"markdown","0690f252":"markdown","54586113":"markdown","a3a88fcc":"markdown","44a0dea7":"markdown","12f66c80":"markdown","2408b7c2":"markdown","f458a197":"markdown","9947eb3c":"markdown","cdb40ead":"markdown"},"source":{"110ed4b3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","dc33f915":"!pip install  visualkeras\n!pip3 install ann_visualizer\n!pip install graphviz","e359c85c":"from tensorflow.keras.preprocessing.image import ImageDataGenerator, img_to_array, load_img\nfrom tensorflow.keras.models import Sequential , Model\nfrom tensorflow.keras.layers import Activation, Dropout, Flatten, Dense, Conv2D, MaxPooling2D\nfrom tensorflow.keras.applications import EfficientNetB0\nimport matplotlib.pyplot as plt\nfrom glob import glob\nimport pandas as pd\nimport numpy as np \nimport seaborn as sns\nimport matplotlib.pyplot as plt \nimport warnings\nwarnings.filterwarnings('ignore')\nfrom sklearn.metrics import classification_report, confusion_matrix\nimport visualkeras\nimport os\nfrom tqdm import tqdm\nimport cv2\nfrom sklearn.utils import shuffle\nfrom sklearn.model_selection import train_test_split\nimport tensorflow as tf\nfrom tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau, TensorBoard, ModelCheckpoint","766f568c":"train_path = \"\/kaggle\/input\/chest-xray-pneumoniacovid19tuberculosis\/train\/\"\ntest_path = \"\/kaggle\/input\/chest-xray-pneumoniacovid19tuberculosis\/test\/\"","7ecb4d8f":"numberOfClass = len(glob(train_path+\"\/*\")) \nprint(\"Number of Class: \",numberOfClass)","edb91d48":"def sampleImage(sampe_image_path):\n  img = load_img(train_path + sampe_image_path)\n  x = img_to_array(img)\n  print(x.shape)\n  plt.imshow(img)\n  plt.axis(\"off\")\n  plt.show()","75a2c1a7":"sample_image_path = \"COVID19\/COVID19(16).jpg\"\nsampleImage(sample_image_path)","3c32e889":"sample_image_path = \"NORMAL\/NORMAL2-IM-0931-0001.jpeg\"\nsampleImage(sample_image_path)","403f9c7d":"sample_image_path = \"PNEUMONIA\/person1018_virus_1706.jpeg\"\nsampleImage(sample_image_path)","c6b713ba":"sample_image_path = \"TURBERCULOSIS\/Tuberculosis-441.png\"\nsampleImage(sample_image_path)","922d162e":"labels = ['COVID19','NORMAL','PNEUMONIA','TURBERCULOSIS']","851b8475":"X_train = []\ny_train = []\nimage_size = 224\nfor i in labels:\n    folderPath = os.path.join('\/kaggle\/input\/chest-xray-pneumoniacovid19tuberculosis','train',i)\n    for j in tqdm(os.listdir(folderPath)):\n        img = cv2.imread(os.path.join(folderPath,j))\n        img = cv2.cvtColor(img,cv2.COLOR_BGR2RGB)\n        img = cv2.resize(img,(image_size, image_size))\n        X_train.append(img)\n        y_train.append(i)\n        \nfor i in labels:\n    folderPath = os.path.join('\/kaggle\/input\/chest-xray-pneumoniacovid19tuberculosis','test',i)\n    for j in tqdm(os.listdir(folderPath)):\n        img = cv2.imread(os.path.join(folderPath,j))\n        img = cv2.cvtColor(img,cv2.COLOR_BGR2RGB)\n        img = cv2.resize(img,(image_size,image_size))\n        X_train.append(img)\n        y_train.append(i)\n        \nX_train = np.array(X_train)\ny_train = np.array(y_train)","8700206d":"k=0\nfig, ax = plt.subplots(1,4,figsize=(20,20))\nfig.text(s='Sample Image From Each Label',size=18,fontweight='bold',\n             fontname='monospace',y=0.62,x=0.4,alpha=0.8)\nfor i in labels:\n    j=0\n    while True :\n        if y_train[j]==i:\n            ax[k].imshow(X_train[j])\n            ax[k].set_title(y_train[j])\n            ax[k].axis('off')\n            k+=1\n            break\n        j+=1","e556164c":"X_train, y_train = shuffle(X_train,y_train, random_state=101)","b271cada":"X_train.shape","09c47072":"X_train,X_test,y_train,y_test = train_test_split(X_train,y_train, test_size=0.1,random_state=101)","a1b19349":"y_train_new = []\nfor i in y_train:\n    y_train_new.append(labels.index(i))\ny_train = y_train_new\ny_train = tf.keras.utils.to_categorical(y_train)\n\n\ny_test_new = []\nfor i in y_test:\n    y_test_new.append(labels.index(i))\ny_test = y_test_new\ny_test = tf.keras.utils.to_categorical(y_test)","32af4d90":"efficientNet = EfficientNetB0(weights='imagenet',include_top=False,input_shape=(image_size,image_size,3))","0550d5bb":"efficientNet.summary()","62949082":"visualkeras.layered_view(efficientNet)","6d395626":"model = efficientNet.output\nmodel = tf.keras.layers.GlobalAveragePooling2D()(model)\nmodel = tf.keras.layers.Dropout(rate=0.5)(model)\nmodel = tf.keras.layers.Dense(numberOfClass,activation='softmax')(model)\nmodel = tf.keras.models.Model(inputs=efficientNet.input, outputs = model)","1b71913e":"model.summary()","4cd13c91":"visualkeras.layered_view(model)","5bec558a":"model.compile(loss='categorical_crossentropy',\n              optimizer = 'Adam', \n              metrics= ['accuracy'])","bb864880":"tensorboard = TensorBoard(log_dir = 'logs')\ncheckpoint = ModelCheckpoint(\"CovidModelEfficientNet.h5\",monitor=\"val_accuracy\",save_best_only=True,mode=\"auto\",verbose=1)\nreduce_lr = ReduceLROnPlateau(monitor = 'val_accuracy', \n                              factor = 0.3, \n                              patience = 2, \n                              min_delta = 0.001,\n                              mode='auto',verbose=1)","38151ad1":"hist = model.fit(X_train,\n                 y_train,\n                 validation_split=0.1, \n                 epochs =15, \n                 verbose=1, \n                 batch_size=32,\n                  callbacks=[tensorboard,checkpoint,reduce_lr]\n                 )","d7327eb9":"results = model.evaluate(X_train,y_train)","07a6c3dd":"results2 = model.evaluate(X_test,y_test)","648c9c70":"print(hist.history.keys())","4da15dd1":"plt.figure(figsize=(15,10))\nplt.plot(hist.history[\"loss\"],label = \"training loss\")\nplt.plot(hist.history[\"val_loss\"],label = \"validation loss\")\nplt.title(\"Training Loss & Validation Loss\")\nplt.xlabel(\"Epoch\")\nplt.ylabel(\"Loss\")\nplt.legend()\nplt.show()\n\nplt.figure(figsize=(15,10))\nplt.plot(hist.history[\"accuracy\"],label = \"training acc\")\nplt.plot(hist.history[\"val_accuracy\"],label = \"validation acc\")\nplt.title(\"Training Accuracy & Validation Accuracy\")\nplt.xlabel(\"Epoch\")\nplt.ylabel(\"Accuracy\")\nplt.legend()\nplt.show()","04f4eb7d":"pred = model.predict(X_test)\npred = np.argmax(pred,axis=1)\ny_test_new = np.argmax(y_test,axis=1)","b7a24918":"print(classification_report(y_test_new,pred))","1fd0fa26":"colors_dark = [\"#1F1F1F\", \"#313131\", '#636363', '#AEAEAE', '#DADADA']\ncolors_red = [\"#331313\", \"#582626\", '#9E1717', '#D35151', '#E9B4B4']\ncolors_green = ['#01411C','#4B6F44','#4F7942','#74C365','#D0F0C0']\n\nsns.palplot(colors_dark)\nsns.palplot(colors_green)\nsns.palplot(colors_red)","759f183f":"fig,ax=plt.subplots(1,1,figsize=(14,7))\n\nsns.heatmap(confusion_matrix(y_test_new,pred),\n            ax=ax,\n            xticklabels=labels,\n            yticklabels=labels,\n            annot=True,\n            cmap=colors_green[::-1],\n            alpha=0.7,\n            linewidths=2,\n            linecolor=colors_dark[3]\n            )\n\nfig.text(s='Confusion Matrix',\n         size=18,\n         fontweight='bold',\n         fontname='monospace',\n         color=colors_dark[1],\n         y=0.92,\n         x=0.28,\n         alpha=0.8)\nprint(confusion_matrix(y_test_new,pred))\nplt.show()","28df2ac6":"# Exploratory Data Analysis - 1","0f36734c":"# Training the Model","247433e1":"PNEUMONIA","1f2924d2":"# Visualize of the Graph","452be6a4":"COVID19","f78e64b8":"# Building EfficientNet","e7ac6c93":"## Performing One Hot Encoding on the labels after converting it into numerical values","759abf7b":"# Layers of the EfficientNet","4cb6d3d2":"# Visualize of the Model","279e216b":"# CLASSIFICATION REPORT","80d98d14":"As we can see , dimension of every images is different , that is why we must be set each images at same dimension.","d6eaeba6":"## Layers of the Model","d6c928cf":"# Exploratory Data Analysis - 2 (Sample Images)","b6693721":"# CONFUSION MATRIX","4d5adc55":"NORMAL","da6d43d1":"# Dividing the dataset as a Train & Test","0690f252":"# Installing Required Libraries","54586113":"# LIBRARIES","a3a88fcc":"# Reading the Dataset","44a0dea7":"# SAMPLE IMAGE FROM EACH LABEL","12f66c80":"# Data Preprocessing","2408b7c2":"TUBERCULOSIS","f458a197":"# Compiling the Model","9947eb3c":"# Visualize of the EfficientNet","cdb40ead":"# Accuracy of the Model"}}