{"cell_type":{"e7b5d837":"code","fe6f661f":"code","9200bf9f":"code","9a439df4":"code","97aecd7d":"code","9291b241":"code","3ca1bb63":"code","670668b5":"code","47d385da":"code","dd523ed2":"code","1bc8e8d1":"code","e8db24c7":"code","cf4c4401":"code","158efc68":"code","236e26af":"code","9e8a36d4":"code","60ba7ed2":"code","e5b6fba0":"code","05bb8be1":"code","45e1cebb":"code","8d164a4c":"code","405ccaba":"code","ef1d450e":"code","2b6448b3":"code","a29571c1":"code","5f5633b1":"code","8f8d0e3b":"code","35257c91":"code","1685f30d":"code","bde08a69":"code","a140ef0f":"code","659c40cb":"code","9a804ff8":"code","7931a3ba":"code","ff72f872":"code","f215a515":"code","fc53de74":"code","f2cb0e38":"code","d56b6ddb":"code","37cb266d":"code","05e1762b":"code","8e2e6baa":"code","40c0a328":"code","cd3434f5":"code","b657759e":"code","4ff4640a":"code","00709893":"code","c3913d4e":"code","99acfae7":"code","f8321e21":"code","62cc5c10":"code","b4e6f37a":"code","4f333c06":"markdown","2f642bb8":"markdown","f2421f78":"markdown","58a8bee3":"markdown","3e162156":"markdown","85f92fe0":"markdown","e341c832":"markdown","1a18a244":"markdown","ce04e0ab":"markdown","4908a961":"markdown","f063ae41":"markdown","273929c8":"markdown","cc26f25e":"markdown","13a70803":"markdown","8b1e849c":"markdown","71900c88":"markdown","ecf15ee2":"markdown","34a0f7a4":"markdown"},"source":{"e7b5d837":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","fe6f661f":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","9200bf9f":"# Data Loading.\ntrain_df = pd.read_csv('..\/input\/bike-sharing-demand\/train.csv')\ntest_df = pd.read_csv('..\/input\/bike-sharing-demand\/test.csv')","9a439df4":"print(train_df.shape)\nprint(test_df.shape)","97aecd7d":"train_df.head(10)","9291b241":"train_df.info()","3ca1bb63":"test_df.head(10)","670668b5":"test_df.info()","47d385da":"# datatime \uceec\ub7fc\uc5d0\uc11c \ub144,\uc6d4,\uc77c,\uc2dc\uac04,\uc694\uc77c \uac12 \ubd84\ub9ac\uc800\uc7a5\ntrain_df['datetime'] = pd.to_datetime(train_df['datetime'])\ntest_df['datetime'] = pd.to_datetime(test_df['datetime'])\n\ntrain_df['year'] = train_df['datetime'].apply(lambda x: x.year)\ntrain_df['month'] = train_df['datetime'].apply(lambda x: x.month)\ntrain_df['day'] = train_df['datetime'].apply(lambda x: x.day)\ntrain_df['hour'] = train_df['datetime'].apply(lambda x: x.hour)\n\ntest_df['year'] = test_df['datetime'].apply(lambda x: x.year)\ntest_df['month'] = test_df['datetime'].apply(lambda x: x.month)\ntest_df['day'] = test_df['datetime'].apply(lambda x: x.day)\ntest_df['hour'] = test_df['datetime'].apply(lambda x: x.hour)","dd523ed2":"train_df.head(5)","1bc8e8d1":"test_df.head(5)","e8db24c7":"# year, month, day, hour \ucd94\uac00\ub85c datetime \uc0ad\uc81c.\n# casual, registerd \uceec\ub7fc\ub3c4 test data\uc5d0\ub294 \uc5c6\uae30\ub54c\ubb38\uc5d0 \uc0ad\uc81c\ucc98\ub9ac.\ntrain_df = train_df.drop(['datetime', 'casual', 'registered'], axis=1)\ntest_df = test_df.drop(['datetime'], axis=1)","cf4c4401":"train_df.head(5)","158efc68":"test_df.head(5)","236e26af":"#\ub144\ub3c4\ubcc4, \uc6d4\ubcc4, \uc77c\uc790\ubcc4, \uc2dc\uac04\ub300\ubcc4 \ub300\uc5ec\ud69f\uc218 \ud30c\uc545.\n# \ub144\ub3c4\ubcc4 Count\nfig = plt.figure(figsize=[12,10])\nax1 = fig.add_subplot(2,2,1)\nax1 = sns.barplot(x='year',y='count',data=train_df.groupby('year')['count'].mean().reset_index())\n\n# \uc6d4\ubcc4 Count\nax2 = fig.add_subplot(2,2,2)\nax2 = sns.barplot(x='month',y='count',data=train_df.groupby('month')['count'].mean().reset_index())\n\n# \uc77c\uc790\ubcc4 Count\nax3 = fig.add_subplot(2,2,3)\nax3 = sns.barplot(x='day',y='count',data=train_df.groupby('day')['count'].mean().reset_index())\n\n# \uc2dc\uac04\ubcc4 Count\nax4 = fig.add_subplot(2,2,4)\nax4 = sns.barplot(x='hour',y='count',data=train_df.groupby('hour')['count'].mean().reset_index())","9e8a36d4":"#\uacc4\uc808, \ud734\uc77c, \uc791\uc5c5\uc77c, \ub0a0\uc528\ubcc4 \ub300\uc5ec\ud69f\uc218 \ud30c\uc545\nfig = plt.figure(figsize=[12,10])\n\n# WrokingDay\ubcc4 Count\nax1 = fig.add_subplot(2,2,1)\nax1 = sns.barplot(x='workingday',y='count',data=train_df.groupby('workingday')['count'].mean().reset_index())\n\n# Holiday\ubcc4 Count\nax2 = fig.add_subplot(2,2,2)\nax2 = sns.barplot(x='holiday',y='count',data=train_df.groupby('holiday')['count'].mean().reset_index())\n\n# Season\ubcc4 Count\nax3 = fig.add_subplot(2,2,3)\nax3 = sns.barplot(x='season',y='count',data=train_df.groupby('season')['count'].mean().reset_index())\n\n# Weather\ubcc4 Count\nax4 = fig.add_subplot(2,2,4)\nax4 = sns.barplot(x='weather',y='count',data=train_df.groupby('weather')['count'].mean().reset_index())","60ba7ed2":"train_df.head(10)","e5b6fba0":"# windspeed \uac12\uc5d0 \uc5f0\uc18d\ub41c 0\uac12\uc774 \uc788\uc5b4 Value\ubcc4 Count \ud655\uc778\ntrain_df['windspeed'].value_counts()","05bb8be1":"# \ud48d\uc18d\uac12 \uadf8\ub798\ud504\ub85c \ud655\uc778\uacb0\uacfc Train, Test \ubaa8\ub450 0\uac12\uc774 \ub9ce\uc74c.\nfig, axes = plt.subplots(nrows=2)\nfig.set_size_inches(15,15)\n\nplt.sca(axes[0])\nplt.xticks(rotation=30, ha='right')\naxes[0].set(ylabel='Count',title=\"< Train Data Windspeed >\")\nsns.countplot(data=train_df, x=\"windspeed\", ax=axes[0])\n\nplt.sca(axes[1])\nplt.xticks(rotation=30, ha='right')\naxes[1].set(ylabel='Count',title=\"< Test Data Windspeed >\")\nsns.countplot(data=test_df, x=\"windspeed\", ax=axes[1])","45e1cebb":"# \ud48d\uc18d\uc774 0\uc778 Row\uc5d0 \uac04\ub2e8\ud558\uac8c \ud3c9\uade0\uac12\uc744 \uad6c\ud574\uc11c \ub123\uc5b4\uc90c.\ntrain_df.loc[train_df[\"windspeed\"] == 0, \"windspeed\"] = train_df[\"windspeed\"].mean()\ntest_df.loc[test_df[\"windspeed\"] == 0, \"windspeed\"] = test_df[\"windspeed\"].mean()","8d164a4c":"# \ud48d\uc18d\uac12 \uad50\uc815\ud6c4 \uadf8\ub798\ud504 \ud655\uc778\nfig, axes = plt.subplots(nrows=2)\nfig.set_size_inches(15,15)\n\nplt.sca(axes[0])\nplt.xticks(rotation=30, ha='right')\naxes[0].set(ylabel='Count',title=\"< Train Data Windspeed >\")\nsns.countplot(data=train_df, x=\"windspeed\", ax=axes[0])\n\nplt.sca(axes[1])\nplt.xticks(rotation=30, ha='right')\naxes[1].set(ylabel='Count',title=\"< Test Data Windspeed >\")\nsns.countplot(data=test_df, x=\"windspeed\", ax=axes[1])","405ccaba":"sns.distplot(train_df['count'])","ef1d450e":"sns.distplot(np.log1p(train_df['count']))","2b6448b3":"# \ubcc0\uacbd\uc804 count\uac12\ntrain_df['count']","a29571c1":"# \ub85c\uadf8 \uc801\uc6a9\ud6c4 Count\uac12 (*****)\ntrain_df['count'] = np.log1p(train_df['count'])\ntrain_df['count']","5f5633b1":"from sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.linear_model import LinearRegression, Ridge, Lasso","8f8d0e3b":"# \uce90\uae00\uc758 \uc131\ub2a5 \ud3c9\uac00\uc9c0\ud45c\ub294 RMSLE(Root Mean Square Log Error)\n# \uc0ac\uc774\ud0b7\ub7f0\uc740 RMSLE\ub97c \uc81c\uacf5\ud558\uc9c0 \uc54a\uc544 Function Define.\ndef rmsle(y, pred):\n    log_y = np.log1p(y)\n    log_pred = np.log1p(pred)\n    squared_error = (log_y - log_pred)**2   #MSLE\n    rmsle = np.sqrt(np.mean(squared_error)) #RMSLE\n    return rmsle","35257c91":"# Train,Test Data Split\nX_train, X_test, y_train, y_test = train_test_split(train_df.drop(['count'], axis=1), train_df['count'], test_size=0.3)","1685f30d":"lr_reg = LinearRegression()\n\n#\ud559\uc2b5\nlr_reg.fit(X_train, y_train)\n\n#\uc608\uce21\npred = lr_reg.predict(X_test)\n\n# log1p(target) -> expm1(target) ( ***** )\ny_test_exp = np.expm1(y_test)\npred_exp = np.expm1(pred)\n\n#\ud3c9\uac00\nprint('RMSLE:', rmsle(y_test_exp, pred_exp))","bde08a69":"# \uac01\ud53c\uccd0\uc758 \ud68c\uadc0 \uacc4\uc218\uac12 \uc2dc\uac01\ud654\ncoef = pd.Series(lr_reg.coef_, index=X_train.columns)\ncoef_sort = coef.sort_values(ascending=False)\nsns.barplot(x=coef_sort.values, y=coef_sort.index)","a140ef0f":"#train_df = pd.get_dummies(train_df, columns=['year', 'month', 'day', 'hour', 'holiday', 'workingday', 'season', 'weather'])\n#test_df = pd.get_dummies(test_df, columns=['year', 'month', 'day', 'hour', 'holiday', 'workingday', 'season', 'weather'])\n\n# train, test data \ubaa8\ub450 \uc6d0-\ud56b \uc778\ucf54\ub529( One-Hot Encoding ) \uc801\uc6a9. ( day \uac12\uc740 Train Data\uc640 Test Data \uc77c\uc218\uac00 \ud2c0\ub824 \ube7c\ubc84\ub9bc. \ud68c\uadc0\uacc4\uc218\uac12\ub3c4 \ub0ae\uc740\ud3b8\uc784)\ntrain_df = pd.get_dummies(train_df, columns=['year', 'month', 'hour', 'holiday', 'workingday', 'season', 'weather'])\ntest_df = pd.get_dummies(test_df, columns=['year', 'month', 'hour', 'holiday', 'workingday', 'season', 'weather'])","659c40cb":"print(train_df.shape)\nprint(test_df.shape)","9a804ff8":"train_df.info()","7931a3ba":"test_df.info()","ff72f872":"# train_df\uc640 test_df\uc758 shape\ub97c \ub9de\ucdb0\uc8fc\uae30 \uc704\ud574 align \uc801\uc6a9. train data \uc640 test data\uc758 Day(\uc77c) \uac12\uc774 \ud2c0\ub9bc.\n#train_df, test_df = train_df.align(test_df, join='left', axis=1)\n#test_df = test_df.drop(['count'], axis=1)\n#print(train_df.shape)\n#print(test_df.shape)\n#train_df.info()\n#test_df.info()","f215a515":"# \ud6c8\ub828 \ub370\uc774\ud130\uc640 \ud14c\uc2a4\ud2b8 \ud14c\uc774\ud130 \ub2e4\uc2dc \ubd84\ub9ac( After One-Hot Encoding )\nX_train, X_test, y_train, y_test = train_test_split(train_df.drop(['count'], axis=1), train_df['count'], test_size=0.3)","fc53de74":"# \uc120\ud615\ud68c\uadc0 \ubaa8\ub378 \ud559\uc2b5\/\uc608\uce21\/\ud3c9\uac00\ud558\uae30\nlr_reg = LinearRegression()\nlr_reg.fit(X_train, y_train)\npred = lr_reg.predict(X_test)\n\ny_test_exp = np.expm1(y_test)\npred_exp = np.expm1(pred)\nprint('LinearRegression RMSLE:', rmsle(y_test_exp, pred_exp))","f2cb0e38":"# Ridge \ubaa8\ub378 \ud559\uc2b5\/\uc608\uce21\/\ud3c9\uac00\nridge_reg = Ridge(alpha=10)\nridge_reg.fit(X_train, y_train)\npred = ridge_reg.predict(X_test)\n\ny_test_exp = np.expm1(y_test)\npred_exp = np.expm1(pred)\nprint('Ridge RMSLE:', rmsle(y_test_exp, pred_exp))","d56b6ddb":"# Lasso \ubaa8\ub378 \ud559\uc2b5\/\uc608\uce21\/\ud3c9\uac00\nlasso_reg = Lasso(alpha=0.01)\nlasso_reg.fit(X_train, y_train)\npred = lasso_reg.predict(X_test)\n\ny_test_exp = np.expm1(y_test)\npred_exp = np.expm1(pred)\nprint('Lasso RMSLE:', rmsle(y_test_exp, pred_exp))","37cb266d":"# \uc120\ud615\ud68c\uadc0 \ud68c\uadc0\uacc4\uc218 \uc0c1\uc70425\uac1c \ud53c\uccd0 \ucd94\ucd9c.\ncoef = pd.Series(lr_reg.coef_, index=X_train.columns)\ncoef_sort = coef.sort_values(ascending=False)[:25]\nsns.barplot(x=coef_sort.values, y=coef_sort.index)","05e1762b":"# Ridge \ud68c\uadc0\uacc4\uc218 \uc0c1\uc70425\uac1c \ud53c\uccd0 \ucd94\ucd9c.\ncoef = pd.Series(ridge_reg.coef_, index=X_train.columns)\ncoef_sort = coef.sort_values(ascending=False)[:25]\nsns.barplot(x=coef_sort.values, y=coef_sort.index)","8e2e6baa":"# Lasso \ud68c\uadc0\uacc4\uc218 \uc0c1\uc70425\uac1c \ud53c\uccd0 \ucd94\ucd9c.\ncoef = pd.Series(lasso_reg.coef_, index=X_train.columns)\ncoef_sort = coef.sort_values(ascending=False)[:25]\nsns.barplot(x=coef_sort.values, y=coef_sort.index)","40c0a328":"from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\nfrom xgboost import XGBRegressor\nfrom lightgbm import LGBMRegressor","cd3434f5":"rf_reg = RandomForestRegressor(n_estimators=50)\nrf_reg.fit(X_train, y_train)\npred = rf_reg.predict(X_test)\n\ny_test_exp = np.expm1(y_test)\npred_exp = np.expm1(pred)\nprint('RandomForestRegressor RMSLE:', rmsle(y_test_exp, pred_exp))","b657759e":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import mean_squared_log_error,mean_squared_error, r2_score,mean_absolute_error # for regression\n\n# GridSearchCv\ub97c \uc774\uc6a9\ud55c \ud558\uc774\ud37c \ud30c\ub77c\ubbf8\ud130.\ntuned_parameters = {'n_estimators': [100,200,300,500], 'max_depth': [None, 1, 2, 3], 'min_samples_split': [1, 2, 3]}\n\nrf_reg = GridSearchCV(RandomForestRegressor(), tuned_parameters, cv=5, scoring='neg_mean_squared_log_error', n_jobs=-1, verbose=1)\nrf_reg.fit(X_train, y_train)\npred = rf_reg.predict(X_test)\n\ny_test_exp = np.expm1(y_test)\npred_exp = np.expm1(pred)\nprint('RandomForestRegressor RMSLE:', rmsle(y_test_exp, pred_exp))\n\nrf_reg.best_params_\n","4ff4640a":"X_train = train_df.drop(['count'], axis=1)\ny_train = train_df['count']\n\n# Test Data ( test.csv )\nX_test = test_df","00709893":"X_test.head(10)","c3913d4e":"# GridSearchCV\uc758 refit\uc73c\ub85c \uc774\ubbf8 \ud559\uc2b5\uc774 \ub41c estimator \ubc18\ud658\nbest_rf_reg = rf_reg.best_estimator_\n\n# GridSearchCv\ub85c \ucd5c\uc801\uc758 \ud30c\ub77c\ubbf8\ud130 \uc801\uc6a9\ub41c \ubaa8\ub378\ub85c \uc608\uce21\ucc98\ub9ac.\npred = best_rf_reg.predict(X_test)\n\npred_exp = np.expm1(pred)\n\nprint(pred[0:10])","99acfae7":"#\uc2e4\uc81c\uac12 Target\uac12\uacfc \uc608\uce21 Target\uac12 \uadf8\ub798\ud504\ub85c \ube44\uad50\ud574\ubcf4\uae30.\ny_train_exp = np.expm1(y_train)\n\nfig,(ax1,ax2)= plt.subplots(ncols=2)\nfig.set_size_inches(12,5)\nsns.distplot(y_train_exp,ax=ax1,bins=50)\nsns.distplot(pred_exp,ax=ax2,bins=50)","f8321e21":"# Submission Sample Data \ud655\uc778.\nsubmission = pd.read_csv('..\/input\/bike-sharing-demand\/sampleSubmission.csv')\nsubmission","62cc5c10":"# Count\uac12\uc5d0 \uc608\uce21\uac12 \ub123\uc5b4\uc8fc\uae30\nsubmission.loc[:, 'count'] = pred_exp\nsubmission","b4e6f37a":"# \uc81c\ucd9c \ud30c\uc77c\uba85\uc740 \uc544\ubb34\uac83\uc774\ub098 \uc0ac\uc6a9\ud574\ub3c4 \ubb34\ubc29.\nsubmission.to_csv('submission_after_tunning.csv', index=False)","4f333c06":"* \uce74\ud14c\uace0\ub9ac\ud615 Feature \ub4e4\uc774 \uc22b\uc790\ud615 \uac12\uc73c\ub85c \ub418\uc5b4\uc788\uc5b4 \ud68c\uadc0\uacc4\uc218 \uac12\uc774 \ud06c\uac8c \ub098\ud0c0\ub098\uace0 \uc788\ub294\uac83\uc73c\ub85c \ub098\ud0c0\ub0a8.(\uc2e4\uc81c \ub300\uc5ec\ud69f\uc218\uc5d0 \ud06c\uac8c \uc601\ud5a5\uc744 \ubbf8\uce58\uc9c0 \uc54a\uc74c.)<\/br>\n  Feature\uac12\uc911 \uc22b\uc790\ud615 \uce74\ud14c\uace0\ub9ac \uac12\uc744 \uc120\ud615\ud68c\uadc0\uc5d0 \uc0ac\uc6a9\ud560 \uacbd\uc6b0 \ud68c\uadc0\uacc4\uc218\ub97c \uc5f0\uc0b0\ud560\ub54c\uc5d0 \uc22b\uc790\ud615 \uac12\uc5d0 \ud06c\uac8c \uc601\ud5a5\uc744 \ubc1b\uc744\uc218 \uc788\uc5b4 \uc6d0-\ud56b \uc778\ucf54\ub529\uc744 \uc801\uc6a9\ud574 \ubcc0\ud658\n  \n  ","2f642bb8":"* \uc8fc\ub9d0(\ud734\uc77c) \uc774\ub0d0 \uadfc\ubb34\uc77c \uc774\ub0d0\uc5d0 \ub530\ub77c\uc11c\ub294 \ub300\uc5ec \ud69f\uc218 \ucc28\uc774\uac00 \ud06c\uac8c \ub098\uc9c0\uc54a\uc740\uac83\uc73c\ub85c \ubcf4\uc5ec\uc9d0.\n* \uacc4\uc808\ubcc4\ub85c\ub294 \uac00\uc744\uc5d0 \uac00\uc7a5 \ub300\uc5ec\ud69f\uc218\uac00 \ub192\uace0 \ubd04\uc5d0 \uaca8\uc6b8,\ubd04\uc5d0 \uac00\uc7a5\ub0ae\uc740 \uac83\uc73c\ub85c \ud655\uc778\ub428.\n* \ub0a0\uc528\ub294 \ub9d1\uc740\ub0a0 \uac00\uc7a5 \ub300\uc5ec\ud69f\uc218\uac00 \ub192\uace0 \ub0a0\uc528\ub294 \uc548\uc88b\uc744\uc218\ub85d \ub0ae\uc740\uac83\uc73c\ub85c \ud655\uc778\ub428.","f2421f78":"# Model Selection","58a8bee3":"* \uc120\ud615 \ud68c\uadc0 \ubaa8\ub378( Linear Regression Model )","3e162156":"# Check the distribution of target(Count) values<\/br>\n  * Target \uac12\uc758 \ubd84\ud3ec\ub294 \uc815\uaddc \ubd84\ud3ec \ud615\ud0dc\uac00 \uac00\uc7a5 \uc88b\uc74c.<\/br> \uadf8\ub807\uc9c0 \uc54a\uace0 \uc65c\uace1\ub41c \uacbd\uc6b0 \ud68c\uadc0 \uc608\uce21 \uc131\ub2a5\uc774 \uc800\ud558\ub418\ub294 \uacbd\uc6b0\uac00 \ubc1c\uc0dd.","85f92fe0":"* \uc5f0\ub3c4\ubcc4 Count\ub97c \ud1b5\ud574 2011\ub144\uc5d0 \ube44\ud574 2012\ub144\ub3c4\uc5d0 \ub300\uc5ec\ub7c9\uc774 \uc99d\uac00\ud568.\n  \uc2dc\uac04\uc774 \uc9c0\ub0a0\uc218\ub85d \ud64d\ubcf4\ud6a8\uacfc\ub85c \uc0ac\uc6a9\uc778\uc6d0\uc774 \ub298\uc5b4\ub09c \uac83\uc73c\ub85c \ucd94\uc815\ud560\uc218 \uc788\uc74c.\n* \uc6d4\ubcc4 Count\ub97c \ud1b5\ud574 6\uc6d4\uc5d0 \ub300\uc5ec \ud69f\uc218\uac00 \uac00\uc7a5 \ub192\uace0 1\uc6d4\uc5d0 \uac00\uc7a5 \ub0ae\uc74c.\n* \uc77c\ubcc4 Count\ub97c \ubcf4\uba74 \ud3b8\ucc28\uac00 \ud06c\uc9c0 \uc54a\ub294\uac83\uc73c\ub85c \ubcf4\uc784.\n* \uc2dc\uac04\ub300\ubcc4 Count\ub97c \uc0b4\ud3b4\ubcf4\uba74 \uc544\uce68 \ucd9c\uadfc\uc2dc\uac04, \uc800\ub141 \ud1f4\uadfc\uc2dc\uac04\uc5d0 \uac00\uc7a5 \ub300\uc5ec\ub7c9\uc774 \ub9ce\uc740\uac83\uc73c\ub85c \ud655\uc778\ub428.","e341c832":"* \ucd5c\ucd08 \ubaa8\ub378\ub85c \uc608\uce21\ud55c \uac12\uc744 submission \ud30c\uc77c\ub85c \ub9cc\ub4e0\ud6c4 \uc81c\ucd9c\ud558\uae30.\n* \ud29c\ub2dd\ud6c4 \uc81c\ucd9c\ud30c\uc77c\uc744 submission_after_tunning \uc73c\ub85c \ubcc0\uacbd.","1a18a244":"# Find out the characteristics of each feature through the graph","ce04e0ab":"# Hyper-parameter Tuning.","4908a961":"* \uc815\uaddc\ubd84\ud3ec \ud615\ud0dc\ub294 \uc544\ub2c8\uc9c0\ub9cc \ubcc0\ud658\ud558\uae30 \uc804\ubcf4\ub2e4 \uc65c\uace1\uc815\ub3c4\uac00 \ub9ce\uc774 \ud5a5\uc0c1\ub428.","f063ae41":"## Tree-based Regression.","273929c8":"# Data Exploring.","cc26f25e":"* \uac00\uc7a5 \uc131\ub2a5\uc774 \ud3c9\uac00\uc9c0\ud45c\uac00 \ub192\uc740 RandomForestRegressor \ubaa8\ub378\ub85c \ud558\uc774\ud37c\ud30c\ub77c\ubbf8\ud130 \uc801\uc6a9\ud6c4 Test Data \uc608\uce21\uac12 \uc81c\ucd9c\ucc98\ub9ac.","13a70803":"* count \uac12\uc774 \uc815\uaddc \ubd84\ud3ec \ud615\ud0dc\uac00 \uc544\ub2c8\uc5b4\uc11c \ub85c\uadf8\uac12\uc744 \uc801\uc6a9\ud558\uc5ec \ubcc0\ud658\ucc98\ub9ac(\uc815\uaddc\ubd84\ud3ec\ud615\ud0dc)","8b1e849c":"* \uc6d0\ud56b \uc778\ucf54\ub529 \uc801\uc6a9\ud6c4 \ub0a0\uc528, \uacc4\uc808, \uc6d4, \uc8fc\ub9d0\/\uc8fc\uc911, \ud734\uc77c\ub4f1 \ub300\uc5ec\ud69f\uc218\uc640 \uad00\uacc4\uac00 \uc788\ub294 \ud53c\uccd0\uc758 \ud68c\uadc0\uacc4\uc218\uac12\uc774 \ub192\uc544\uc9d0.","71900c88":"# Data Cleansing.","ecf15ee2":"# \uc608\uce21(Prediction), \uc81c\ucd9c(Submission)","34a0f7a4":"* \uc120\ud615\ud68c\uadc0 \uc774\uae30 \ub54c\ubb38\uc5d0 \ud3c9\uac00\uc9c0\ud45c \uac12\uc774 \ub0ae\uc744\uc218\ub85d \uc88b\uc740 \uc810\uc218\uc784.<\/br>\n  \ud3c9\uac00\uc810\uc218\uac00 \uc88b\uc9c0 \uc54a\uc740\uac83\uc73c\ub85c \ud310\ub2e8\ub428."}}