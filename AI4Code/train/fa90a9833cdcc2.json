{"cell_type":{"f7fe1ac0":"code","fae657cf":"code","470ca28a":"code","07e7f253":"code","edc84d58":"code","837cb429":"code","94d1f90b":"code","4653cfae":"markdown"},"source":{"f7fe1ac0":"import numpy as np\nimport pandas as pd\nfrom sklearn.metrics import f1_score, roc_auc_score, cohen_kappa_score, precision_score, recall_score, accuracy_score, confusion_matrix\nfrom keras.layers import Dense, Flatten, Conv2D, MaxPooling2D, Dropout, Input\nfrom keras.models import Sequential\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\nimport cv2\nfrom keras.layers.normalization import BatchNormalization\nfrom keras.models import Model, Sequential\nfrom keras.applications.xception import Xception\nfrom keras.applications import *\nimport matplotlib.pyplot as plt\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.pipeline import Pipeline\nfrom PIL import Image\nimport random\nimport os\nimport cv2\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier\nfrom xgboost import XGBClassifier \nfrom keras.callbacks import EarlyStopping\nimport seaborn as sns\nfrom sklearn.preprocessing import StandardScaler\nfrom tqdm import tqdm\nfrom sklearn.decomposition import PCA\nfrom tensorflow.keras.utils import to_categorical","fae657cf":"lung_aca = \"..\/input\/lung-and-colon-cancer-histopathological-images\/lung_colon_image_set\/lung_image_sets\/lung_aca\/\"\n\nplt.figure(figsize = (10, 10))\nplt.subplot(131)\nimg = cv2.imread(lung_aca + os.listdir(lung_aca)[0])\nplt.title('Lung ACA')\nplt.imshow(img)\n\nplt.subplot(132)\nlung_n = \"..\/input\/lung-and-colon-cancer-histopathological-images\/lung_colon_image_set\/lung_image_sets\/lung_n\/\"\nimg = cv2.imread(lung_n + os.listdir(lung_n)[0])\nplt.title('Lung N')\nplt.imshow(img)\n\nplt.subplot(133)\nlung_scc = \"..\/input\/lung-and-colon-cancer-histopathological-images\/lung_colon_image_set\/lung_image_sets\/lung_scc\/\"\nimg = cv2.imread(lung_scc + os.listdir(lung_scc)[0])\nplt.title('Lung SCC')\nplt.imshow(img)\nplt.show()","470ca28a":"data_dir = \"..\/input\/lung-and-colon-cancer-histopathological-images\/lung_colon_image_set\/lung_image_sets\/\"\n\nSIZE_X = SIZE_Y = 128\n\ndatagen = tf.keras.preprocessing.image.ImageDataGenerator(validation_split = 0.3)\n\ntrain_it = datagen.flow_from_directory(data_dir,\n                                       class_mode = \"categorical\",\n                                       target_size = (SIZE_X,SIZE_Y),\n                                       color_mode=\"rgb\",\n                                       batch_size = 12, \n                                       shuffle = False,\n                                       subset='training',\n                                       seed = 42)\n\nvalidate_it = datagen.flow_from_directory(data_dir,\n                                       class_mode = \"categorical\",\n                                       target_size = (SIZE_X, SIZE_Y),\n                                       color_mode=\"rgb\",\n                                       batch_size = 12, \n                                       shuffle = False,\n                                       subset='validation',\n                                       seed = 42)","07e7f253":"def get_accuracy_metrics(model, train_it, validate_it):\n    y_val = validate_it.classes\n    \n    val_pred_proba = model.predict(validate_it)\n    \n    val_pred_proba, predicted_proba, y_val, y_test = train_test_split(val_pred_proba, y_val, test_size = 0.5, shuffle = True)\n    \n    val_pred = np.argmax(val_pred_proba, axis = 1)\n    predicted = np.argmax(predicted_proba, axis = 1)\n    \n    print(\"Train accuracy Score------------>\")\n    print (\"{0:.3f}\".format(accuracy_score(train_it.classes, np.argmax(model.predict(train_it), axis = 1))*100), \"%\")\n    \n    print(\"Val accuracy Score--------->\")\n    print(\"{0:.3f}\".format(accuracy_score(y_val, val_pred)*100), \"%\")\n    \n    print(\"Test accuracy Score--------->\")\n    print(\"{0:.3f}\".format(accuracy_score(y_test, predicted)*100), \"%\")\n    \n    print(\"F1 Score--------------->\")\n    print(\"{0:.3f}\".format(f1_score(y_test, predicted, average = 'weighted')*100), \"%\")\n    \n    print(\"Cohen Kappa Score------------->\")\n    print(\"{0:.3f}\".format(cohen_kappa_score(y_test, predicted)*100), \"%\")\n    \n    \n    print(\"ROC AUC Score------------->\")\n    print(\"{0:.3f}\".format(roc_auc_score(to_categorical(y_test, num_classes = 3), predicted_proba, multi_class='ovr')*100), \"%\")\n    \n    print(\"Recall-------------->\")\n    print(\"{0:.3f}\".format(recall_score(y_test, predicted, average = 'weighted')*100), \"%\")\n    \n    print(\"Precision-------------->\")\n    print(\"{0:.3f}\".format(precision_score(y_test, predicted, average = 'weighted')*100), \"%\")\n    \n    cf_matrix_test = confusion_matrix(y_test, predicted)\n    cf_matrix_val = confusion_matrix(y_val, val_pred)\n    \n    plt.figure(figsize = (12, 6))\n    plt.subplot(121)\n    sns.heatmap(cf_matrix_val, annot=True, cmap='Blues')\n    plt.title(\"Val Confusion matrix\")\n    \n    plt.subplot(122)\n    sns.heatmap(cf_matrix_test, annot=True, cmap='Blues')\n    plt.title(\"Test Confusion matrix\")\n    \n    plt.show()","edc84d58":"inp = Input(shape = (128, 128, 3))\nmodel = BatchNormalization()(inp)\nmodel = Conv2D(filters = 128, kernel_size = (3, 3), padding = 'same', activation='relu')(model)\nmodel = BatchNormalization()(model)\nmodel = MaxPooling2D()(model)\nmodel = Conv2D(filters = 64, kernel_size = (3, 3), padding = 'same', activation='relu')(model)\nmodel = MaxPooling2D()(model)\nmodel = Dropout(0.2)(model)\nmodel = Flatten()(model)\noutput = Dense(units = len(train_it.class_indices), activation = 'softmax')(model)\n\nmodel = Model(inputs=inp, outputs=output)\nmodel.summary()","837cb429":"model.compile(loss='categorical_crossentropy', optimizer ='adam', metrics=['accuracy'])\n\nes = EarlyStopping(monitor='val_loss', mode='min', verbose=1, patience=5)\n\nhistory = model.fit(train_it, validation_data = validate_it, verbose = 1, epochs = 10, callbacks = [es])","94d1f90b":"get_accuracy_metrics(model, train_it, validate_it)","4653cfae":"# Inputx128x64xFlattenxOutput"}}