{"cell_type":{"78106cb0":"code","4dc783bf":"code","a3414b64":"code","6f241b0b":"code","0e51941f":"code","0a0eab78":"code","851c7049":"code","d28feb59":"code","15eec011":"code","0dfc4be4":"code","b95b8497":"code","1b1d4acd":"code","577daf0c":"code","75db3e48":"code","faabf2a2":"code","7c2e562e":"code","29d34866":"code","d2325113":"markdown"},"source":{"78106cb0":"import os\nimport numpy as np\nimport pandas as pd\nimport random\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport category_encoders as ce\n\nfrom contextlib import contextmanager\nfrom time import time\nfrom tqdm import tqdm\nimport lightgbm as lgbm\nfrom lightgbm import LGBMClassifier\nfrom sklearn.metrics import mean_squared_error\n\nfrom sklearn.metrics import classification_report, log_loss, accuracy_score\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import KFold","4dc783bf":"data0 = pd.read_csv(\"..\/input\/premier-league-matches-20142020\/matchesall2014-2020.csv\")\nprint(data0.columns.tolist())\ndata0","a3414b64":"data0['HOME-AWAY']=data0[['Home Team','Away Team']].apply(lambda x: x['Home Team']+'-'+x['Away Team'], axis=1)\ndata0['SCORE-DIFF']=data0['Home Team Goals Scored']-data0['Away Team Goals Scored']\ndata0","6f241b0b":"data0['SCORE-DIFF']=data0['SCORE-DIFF'].apply(lambda x: np.where(x>3,4,x)).apply(lambda x: np.where(x<-3,-4,x))","0e51941f":"df=data0\nfrom sklearn.preprocessing import LabelEncoder\nfor c in df.columns:\n    if df[c].dtype=='object': \n        lbl = LabelEncoder()\n        lbl.fit(list(df[c].values))\n        df[c] = lbl.transform(df[c].values)\ndata1=df","0a0eab78":"m=len(data1)\nM=list(range(m))\nrandom.seed(2021)\nrandom.shuffle(M)\ndrop0=['Unnamed: 0','Score','Half Time Score','Home Team Goals Scored','Away Team Goals Scored','Home Team Goals Conceeded','Away Team Goals Conceeded','SCORE-DIFF']\ndrop1=['Unnamed: 0','Score','SCORE-DIFF']\nX=data1.drop(drop0,axis=1)\ny=data1['SCORE-DIFF']","851c7049":"target=['SCORE-DIFF']","d28feb59":"df_columns=X.columns.tolist()","15eec011":"def create_numeric_feature(input_df):\n    use_columns = df_columns \n    return input_df[use_columns].copy()","0dfc4be4":"from contextlib import contextmanager\nfrom time import time\n\nclass Timer:\n    def __init__(self, logger=None, format_str='{:.3f}[s]', prefix=None, suffix=None, sep=' '):\n\n        if prefix: format_str = str(prefix) + sep + format_str\n        if suffix: format_str = format_str + sep + str(suffix)\n        self.format_str = format_str\n        self.logger = logger\n        self.start = None\n        self.end = None\n\n    @property\n    def duration(self):\n        if self.end is None:\n            return 0\n        return self.end - self.start\n\n    def __enter__(self):\n        self.start = time()\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.end = time()\n        out_str = self.format_str.format(self.duration)\n        if self.logger:\n            self.logger.info(out_str)\n        else:\n            print(out_str)","b95b8497":"from tqdm import tqdm\n\ndef to_feature(input_df):\n\n    processors = [\n        create_numeric_feature,\n    ]\n    \n    out_df = pd.DataFrame()\n    \n    for func in tqdm(processors, total=len(processors)):\n        with Timer(prefix='create' + func.__name__ + ' '):\n            _df = func(input_df)\n\n        assert len(_df) == len(input_df), func.__name__\n        out_df = pd.concat([out_df, _df], axis=1)\n        \n    return out_df","1b1d4acd":"train_feat_df = to_feature(X)\n#test_feat_df = to_feature(test)","577daf0c":"import lightgbm as lgbm\nfrom sklearn.metrics import mean_squared_error\n\ndef fit_lgbm(X, y, cv, \n             params: dict=None, \n             verbose: int=50):\n\n    if params is None:\n        params = {}\n\n    models = []\n    oof_pred = np.zeros_like(y, dtype=np.float)\n\n    for i, (idx_train, idx_valid) in enumerate(cv): \n        x_train, y_train = X[idx_train], y[idx_train]\n        x_valid, y_valid = X[idx_valid], y[idx_valid]\n\n        clf = lgbm.LGBMRegressor(**params)\n        \n        with Timer(prefix='fit fold={} '.format(i)):\n            clf.fit(x_train, y_train, \n                    eval_set=[(x_valid, y_valid)],  \n                    early_stopping_rounds=100,\n                    verbose=verbose)\n\n        pred_i = clf.predict(x_valid)\n        oof_pred[idx_valid] = pred_i\n        models.append(clf)\n        print(f'Fold {i} RMSLE: {mean_squared_error(y_valid, pred_i) ** .5:.4f}')\n        print()\n\n    score = mean_squared_error(y, oof_pred) ** .5\n    print('-' * 50)\n    print('FINISHED | Whole RMSLE: {:.4f}'.format(score))\n    return oof_pred, models","75db3e48":"params = {'num_leaves': 39, \n          'objective': 'regression', \n          'max_depth': 5, \n          'learning_rate': 0.057719008451099105, \n          'lambda_l1': 2.277211985117e-08, \n          'lambda_l2': 0.03402577319650919, \n          'bagging_freq': 4, \n          'bagging_fraction': 0.5537465329474419, \n          'feature_fraction': 0.76216471107014, \n          'verbosity': 10}","faabf2a2":"from sklearn.model_selection import KFold\nfor i in range(1):\n    fold = KFold(n_splits=5, shuffle=True, random_state=71)\n    ydfi=y\n    yar=np.array(ydfi)\n    cv = list(fold.split(train_feat_df, yar))\n    oof, models = fit_lgbm(train_feat_df.values, yar, cv, params=params, verbose=500)\n    \n    fig,ax = plt.subplots(figsize=(6,6))\n    ax.set_title(target[i],fontsize=20)\n    ax.set_xlabel('Predicted train '+target[i],fontsize=12)\n    ax.set_ylabel('Actual train '+target[i],fontsize=12)\n    ax.scatter(oof,yar)","7c2e562e":"def visualize_importance(models, feat_train_df):\n\n    feature_importance_df = pd.DataFrame()\n    for i, model in enumerate(models):\n        _df = pd.DataFrame()\n        _df['feature_importance'] = model.feature_importances_\n        _df['column'] = feat_train_df.columns\n        _df['fold'] = i + 1\n        feature_importance_df = pd.concat([feature_importance_df, _df], \n                                          axis=0, ignore_index=True)\n\n    order = feature_importance_df.groupby('column')\\\n        .sum()[['feature_importance']]\\\n        .sort_values('feature_importance', ascending=False).index[:50]\n\n    print()\n    print(\"Importance Top 50\")\n    print(order.tolist())\n\n    fig, ax = plt.subplots(figsize=(8, max(6, len(order) * .25)))\n    sns.boxenplot(data=feature_importance_df, \n                  x='feature_importance', \n                  y='column', \n                  order=order, \n                  ax=ax, \n                  palette='viridis', \n                  orient='h')\n    ax.tick_params(axis='x', rotation=0)\n    #ax.set_title('Importance')\n    ax.grid()\n    fig.tight_layout()\n    return fig,ax\n\n#fig, ax = visualize_importance(models, train_feat_df)","29d34866":"MODELS=[]\nfor i in range(1):\n    fold = KFold(n_splits=5, shuffle=True, random_state=71)\n    ydfi=y\n    yar=np.array(ydfi)\n    cv = list(fold.split(train_feat_df, yar))\n    oof, models = fit_lgbm(train_feat_df.values, yar, cv, params=params, verbose=500)\n    fig, ax = visualize_importance(models, train_feat_df)\n    ax.set_title('Importance for '+target[i],fontsize=20)\n    MODELS+=[models]","d2325113":"- param values were obtained by the optuna tuning in the following notebook.<br\/>\nhttps:\/\/www.kaggle.com\/stpeteishii\/premier-league-score-difference-prediction-lgbm"}}