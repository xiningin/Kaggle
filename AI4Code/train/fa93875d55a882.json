{"cell_type":{"551ea531":"code","ffc5290d":"code","716ea6fb":"code","5ce296e3":"code","442c70ec":"code","f037861c":"code","014b23d5":"code","86cd3bb5":"code","77abdb72":"code","54927c75":"code","512090fe":"code","9a3effd7":"code","127388af":"code","753f711e":"code","213f8972":"code","8476155b":"code","835f0d2d":"code","3cd26da5":"markdown","7f1e6152":"markdown","68c9cdc6":"markdown","c289488c":"markdown","738e0711":"markdown","98f2630e":"markdown","ca5ee7c5":"markdown","b4d46ae7":"markdown","48281c52":"markdown","171dd510":"markdown","682afc66":"markdown","d618b690":"markdown","5071b853":"markdown","7b5eb2b5":"markdown","b0e3f0fa":"markdown"},"source":{"551ea531":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","ffc5290d":"#import packages\nimport re\nimport numpy as np\nimport pandas as pd\nfrom pprint import pprint\n\n#import nltk for stopwords and english words\nimport nltk\nfrom nltk.corpus import stopwords\nstop_words = set(stopwords.words('english'))\nwords = set(nltk.corpus.words.words())\n\n# Gensim packages\nimport gensim\nfrom gensim.corpora import Dictionary\nfrom gensim.utils import simple_preprocess\nfrom gensim.models import CoherenceModel\n\n# spacy for lemmatization\nimport spacy\n\n# Plotting tools\nimport pyLDAvis\nimport pyLDAvis.gensim_models\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# Enable logging for gensim\nimport logging\nlogging.basicConfig(format='%(asctime)s : %(levelname)s : %(message)s', level=logging.ERROR)\n\nimport warnings\nwarnings.filterwarnings(\"ignore\",category=DeprecationWarning)","716ea6fb":"nips_papers=pd.read_csv('..\/input\/nips-papers-1987-2019-updated\/papers.csv')\nnips_papers.head(5)","5ce296e3":"nips_papers.shape","442c70ec":"text=nips_papers.full_text.values.tolist()\ntext[1]","f037861c":"#clean the text using 'simple_process()'. tokenization, pancuation removal, remove unnecessary characters\ndef sent_to_words(sentences):\n    for sentence in sentences:\n        yield(gensim.utils.simple_preprocess(str(sentence), deacc=True))  # deacc=True removes punctuations\n\ntext_words = list(sent_to_words(text))","014b23d5":"#Build the bigram\nbigram = gensim.models.Phrases(text_words, min_count=5, threshold=100) # higher threshold fewer phrases.\n\n#Faster way to get a sentence clubbed as a bigram\nbigram_mod = gensim.models.phrases.Phraser(bigram)","86cd3bb5":"# Define functions for stopwords, bigrams, lemmatization and remove non english words\ndef remove_stopwords(texts):\n    return [[word for word in simple_preprocess(str(doc)) if word not in stop_words] for doc in texts]\n\ndef make_bigrams(texts):\n    return [bigram_mod[doc] for doc in texts]\n\ndef lemmatization(texts, allowed_postags=['NOUN', 'VERB', 'ADV', 'ADJ']):\n    \"\"\"https:\/\/spacy.io\/api\/annotation\"\"\"\n    texts_out = []\n    for sent in texts:\n        doc = nlp(\" \".join(sent)) \n        texts_out.append([token.lemma_ for token in doc if token.pos_ in allowed_postags])\n    return texts_out\n\ndef remove_non_english(texts):\n        return [[word for word in doc if word.lower() in words] for doc in texts]","77abdb72":"%%time\n\n# Remove Stop Words\ndata_words_nostops = remove_stopwords(text_words)\n\n# Initialize spacy 'en' model, keeping only tagger component (for efficiency)\nnlp = spacy.load('en', disable=['parser', 'ner'])\n\n# Do lemmatization keeping only noun, adj, vb\ndata_lemmatized = lemmatization(data_words_nostops, allowed_postags=['NOUN', 'VERB', 'ADJ'])\n\n#Remove non english words\nenglish_text=remove_non_english(data_lemmatized)\n\n# Form Bigrams\ndata_words_bigrams = make_bigrams(english_text)","54927c75":"print(data_words_bigrams[1])","512090fe":"#Build term frequency dictionary\nfreq_dict={}\nfor text in data_words_bigrams:\n    for word in text:\n        if word in freq_dict:\n            freq_dict[word]+=1\n        else:\n            freq_dict[word]=1\n            \nprint(\"There are\",len(freq_dict),\"unique words used in the whole set of papers\")\n\n#Frequency of each word\nfor key, value in sorted(freq_dict.items(), key=lambda item: item[1]):\n    print(\"%s: %s\" % (key, value))","9a3effd7":"#Build function to remove low frequency terms\ndef remove_low_freq_terms(texts, f):\n    return [[word for word in doc if freq_dict[word]>f] for doc in texts]\n\ntexts_final=remove_low_freq_terms(data_words_bigrams, 25)","127388af":"%%time\n\n# Create Corpus\ntexts=texts_final\n\n# Create Dictionary\nid2word = Dictionary(texts)\n\n# Term Document Frequency\ncorpus = [id2word.doc2bow(text) for text in texts]","753f711e":"def compute_coherence_values(dictionary, corpus, texts, topic_count):\n    \"\"\"\n    Compute perplexity and c_v coherence scores for various LDA models\n\n    Parameters:\n    ----------\n    dictionary : Gensim dictionary\n    corpus : Gensim corpus\n    texts : List of input texts\n    topic_count : Number of topics\n\n    Returns:\n    -------\n    model_list : List of LDA topic models\n    perplexity_values : Perplexity scores corresponding to the LDA model with respective number of topics and passes\n    coherence_values : Coherence values corresponding to the LDA model with respective number of topics and passes\n    \"\"\"\n    perplexity_values = []\n    coherence_values = []\n    model_list = []\n    for num_topics in topic_count:            \n                model=gensim.models.ldamodel.LdaModel(corpus=corpus,\n                                                      num_topics=num_topics,\n                                                      id2word=id2word,\n                                                      chunksize=300,\n                                                      random_state=100,\n                                                      update_every=1,\n                                                      alpha='auto',\n                                                      eta='auto',\n                                                      passes=40,\n                                                      per_word_topics=True)\n                model_list.append(model)\n                # Compute Perplexity\n                perplexity_score = model.log_perplexity(corpus)\n                perplexity_values.append(perplexity_score)  # a measure of how good the model is. lower the better.\n                coherencemodel = CoherenceModel(model=model, texts=texts, dictionary=dictionary, coherence='c_v')\n                coherence_score=coherencemodel.get_coherence()\n                coherence_values.append(coherence_score)\n                print('num_topics:', num_topics, 'Perplexity:', perplexity_score, 'Coherence:', coherence_score )\n\n    return model_list, perplexity_values, coherence_values","213f8972":"%%time\n\nmodel_list, perplexity_values, coherence_values = compute_coherence_values(dictionary=id2word, corpus=corpus, texts=texts, topic_count = [10,16,20])","8476155b":"# Print the Keyword in the 10 topics\npprint(model_list[-1].print_topics())\ndoc_lda = model_list[-1][corpus]","835f0d2d":"# Visualize the topics\npyLDAvis.enable_notebook()\nvis = pyLDAvis.gensim_models.prepare(model_list[-1], corpus, id2word)\nvis","3cd26da5":"We need to have an idea of how many unique words are included in the corpus and how frequent each one is.","7f1e6152":"Now we're ready to implement the LDA model through a function that will test the performance of the model for different number of topics.","68c9cdc6":"This is the final form of a document inside our corpus. Looks more neat, without strange symbols and meaningful words.","c289488c":"and how the documents look.","738e0711":"We decide to remove the least frequent ones and keep about 25% of the total terms. That percentage should give the most important information.","98f2630e":"Bigrams are a good method to make the terms more compact and give meaning to terms that can't stand on their own.","ca5ee7c5":"Cleaning the documents is necessary as they contain a lot of symbols, mathematical language, abreviations and other words that will not give any useful information to the model.","b4d46ae7":"Let's load the data file and have a loot at the structure of it.","48281c52":"The next step is to finalize the corpus, build the dictionary of the corpus and convert it to Bag Of Words format.","171dd510":"Finally we visualize the topics using pyLDAvis tool.","682afc66":"We want to see how many papers are in the data...","d618b690":"The model with the highest scores is the one with 20 topics.\nThese are the top 10 keywords for each of the 20 topics.","5071b853":"and run them!","7b5eb2b5":"Import all the necessary libraries.","b0e3f0fa":"Let's define the final text cleaning functions to use..."}}