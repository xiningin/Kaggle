{"cell_type":{"637b9f94":"code","030877b4":"code","74c2d145":"code","77e8b417":"code","f8fb18d6":"code","4fd3b764":"code","107f309c":"code","63048806":"code","d68c7c04":"code","2266c601":"code","149372a0":"code","5086a13c":"code","ae091052":"code","8b869d94":"code","d72d117e":"code","ceab1d99":"code","02347ee1":"code","3e5d6407":"code","1c8f20b1":"code","7518614a":"code","3171cf3e":"code","e971e13f":"code","8a195649":"code","8fb76790":"code","4a5caf22":"code","e46c6587":"code","373173ae":"code","a23d865f":"code","8fb9056f":"code","4f0fd0e9":"code","b44bacab":"code","1deb2d1a":"code","cb699e6f":"code","ac840f12":"code","1d5812d3":"code","9915ad74":"code","c940a203":"code","060949f7":"code","d0284b70":"code","ce2327fe":"code","5938e939":"code","51c628bf":"code","f80a2c03":"code","b05524d2":"code","5ee93144":"code","0e8e934a":"code","d2398511":"markdown"},"source":{"637b9f94":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport missingno as msno\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, confusion_matrix\nfrom sklearn.ensemble import RandomForestClassifier","030877b4":"df = pd.read_csv('..\/input\/heart-disease-uci\/heart.csv')","74c2d145":"df.head()","77e8b417":"df.info()","f8fb18d6":"msno.matrix(df)\n#no missing values","4fd3b764":"#Renaming the columns for better understanding\ndf.rename (columns = {\n    'cp':'chest_pain',\n    'trestbps':'blood_pressure',\n    'chol':'cholesterol',\n    'fbs':'blood_sugar',\n    'restecg':'rest_ecg',\n    'thalach':'heart_rate',\n    'exang':'exercise_angina',\n    'oldpeak':'st_peak',\n    'slope':'st_slope',\n    'ca':'n_vessels',\n    'thal':'thallium',\n    'target':'heart_disease'}, inplace = True)","107f309c":"df.sex.replace({\n    0: 'woman',\n    1: 'man'}, inplace=True)\ndf.chest_pain.replace({\n    1: 'typical',\n    2: 'atypical',\n    3: 'non-anginal',\n    0: 'none'}, inplace=True)\ndf.blood_sugar.replace({\n    0: 'normal',\n    1: 'high'}, inplace=True)\ndf.rest_ecg.replace({\n    1: 'normal',\n    2: 'wave-abnormal',\n    0: 'lv-hyperthrophy'}, inplace=True)\ndf.exercise_angina.replace({\n    0: 'no',\n    1: 'yes'}, inplace=True)\ndf.st_slope.replace({\n    2: 'increasing',\n    1: 'flat',\n    0: 'decreasing'}, inplace=True)\ndf.thallium.replace({\n    0: float('nan'), # 0 is not a valid value\n    2: 'normal',\n    1: 'fixed',\n    3: 'reversable'}, inplace=True)\ndf.heart_disease.replace({\n    0: 'yes',\n    1: 'no'}, inplace=True)","63048806":"df.mode()","d68c7c04":"df.mode().iloc[0]","2266c601":"df.fillna(df.mode().iloc[0], inplace=True)","149372a0":"categoricals = ['sex', 'chest_pain', 'blood_sugar', 'rest_ecg', 'exercise_angina',\n                'st_slope', 'thallium', 'heart_disease', 'n_vessels']\nnumericals = ['age', 'blood_pressure', 'cholesterol', 'heart_rate', 'st_peak']","5086a13c":"for col in categoricals:\n    df[col] = df[col].astype('category')\n","ae091052":"categoricals = [c for c in categoricals if c != 'heart_disease']","8b869d94":"col_order = numericals + categoricals + ['heart_disease']","d72d117e":"df = df.loc[:, col_order]","ceab1d99":"fig, axes = plt.subplots(3, 3, sharey=True, figsize=(16,16))\n\nfor i, col in enumerate(categoricals):\n    ax = axes.flat[i]\n    \n    cat_values = df[col].unique()\n    with_disease = [len(df[(df[col] == val) & (df.heart_disease == 'yes')]) \/ len(df[df[col] == val]) for val in cat_values]\n    with_disease = [100 * x for x in with_disease]\n    \n    ax.bar([str(x) for x in cat_values], with_disease)\n    ax.set_ylim(0, 100)\n    ax.set_xlabel(f\"Values for {col}\", fontsize=14)\n    ax.set_ylabel('Patients with heart disease', fontsize=14)\n    ax.set_title(f\"Distribution for {col}\", fontsize=14)\n    \nfig.delaxes(axes.flat[-1])\nfig.tight_layout();","02347ee1":"label = 'heart_disease'\nfeatures = [col for col in df.columns if col != label]","3e5d6407":"X = df[features]\ny = df[label] ","1c8f20b1":"X.columns","7518614a":"y = y.replace({'no': 0, 'yes': 1})","3171cf3e":"X_train,X_test,y_train,y_test = train_test_split(X,y,shuffle = True, test_size = .2, random_state = 0)","e971e13f":"from sklearn.model_selection import StratifiedKFold\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.pipeline import make_pipeline","8a195649":"kfold = StratifiedKFold(n_splits = 5, shuffle = True, random_state = 0)","8fb76790":"transformer = ColumnTransformer(transformers=[\n    ('numerical', StandardScaler(), numericals),\n    ('categorical', OneHotEncoder(drop='first'), categoricals)\n])","4a5caf22":"tree = make_pipeline(\n    transformer,\n    GridSearchCV(\n        estimator=DecisionTreeClassifier(random_state=0),\n        cv=kfold,\n        param_grid={\n            'criterion': ['gini', 'entropy'],\n            'max_depth': [3, 5, 10, 20],\n            'min_samples_split': [.001, .01, .1],\n            'min_samples_leaf': [.001, .01, .1]\n        },\n        n_jobs=4,\n        verbose=1,\n        scoring='recall'\n    )\n)","e46c6587":"tree.fit(X_train,y_train)","373173ae":"tree[-1].best_estimator_","a23d865f":"prediction = tree.predict(X_test)","8fb9056f":"print(\"Accuracy score on the test set:\", accuracy_score(y_test,prediction))","4f0fd0e9":"data = confusion_matrix(y_test, prediction)\ndf_cm = pd.DataFrame(data, columns=np.unique(y_test), index = np.unique(prediction))\ndf_cm.index.name = 'Actual'\ndf_cm.columns.name = 'Predicted'\nplt.figure(figsize = (10,10))\nsns.set(font_scale=1.5)#for label size\nsns.heatmap(df_cm, cmap=\"Blues\", annot=True, cbar = False)","b44bacab":"pip install scikit-plot","1deb2d1a":"import scikitplot as skplt\n\n##Trying out the scikitplot library for the first time, the confusion matrix is same as the one above albeit with fewer lines of code.","cb699e6f":"skplt.metrics.plot_confusion_matrix(\n    y_test,\n    prediction,\n    figsize = (12,12)\n)","ac840f12":"from sklearn.tree import plot_tree","1d5812d3":"ohe = tree[0].transformers_[1][1]","9915ad74":"feature_names = numericals + list(ohe.get_feature_names(input_features = categoricals))","c940a203":"fig, ax = plt.subplots(figsize=(22,16))\nplot_tree(tree[-1].best_estimator_, max_depth=5, feature_names=feature_names, class_names=['no', 'yes'], label='all', filled=True, rounded=True, proportion=True, precision=1, fontsize=12, ax=ax);","060949f7":"feature_importance = tree[-1].best_estimator_.feature_importances_","d0284b70":"for fi, fn in sorted(zip(feature_importance, feature_names), reverse=True):\n    if fi > 0:\n        print(f\"Feature {fn}: importance = {fi:.3f}\")","ce2327fe":"forest = make_pipeline(\n    transformer,\n    GridSearchCV(\n        estimator=RandomForestClassifier(),\n        cv=kfold,\n        scoring='recall',\n        n_jobs=4,\n        verbose=True,\n        param_grid={\n            'n_estimators': [50, 100],\n            'max_features': ['sqrt'],\n            'criterion': ['entropy'],\n            'max_depth': [3, 5],\n            'min_samples_split': [.01, .1],\n            'min_samples_leaf': [.01, .1]\n        }\n    )\n)","5938e939":"forest.fit(X_train, y_train)","51c628bf":"forest[-1].best_estimator_","f80a2c03":"pred = forest.predict(X_test)\n","b05524d2":"print(\"Accuracy score on test set:\", accuracy_score(y_test, pred))","5ee93144":"fig, ax = plt.subplots(figsize=(8,8))\nsns.heatmap(confusion_matrix(y_test, pred), cmap=plt.cm.jet, square=True, annot=True, cbar=False, ax=ax)\nax.set_xlabel('Predicted', fontsize=18)\nax.set_ylabel('True', fontsize=18)\nax.set_title('Confusion Matrix', fontsize=18)","0e8e934a":"skplt.metrics.plot_confusion_matrix(\n    y_test,\n    pred,\n    figsize = (8,8)\n)","d2398511":"## UCI Heart Disease Dataset: \n\n#### Using Decison Trees and Random Forest"}}