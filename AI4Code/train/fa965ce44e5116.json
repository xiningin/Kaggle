{"cell_type":{"e20fa2dd":"code","03528f82":"code","11df6998":"code","a6d8ca4f":"code","580fe223":"code","2d3c3f66":"code","b03f33b7":"code","1f69621d":"code","0719803f":"code","f30b07fc":"code","6fe5b76d":"code","76f776de":"code","764a9456":"code","c1d8e1de":"code","a5cadc84":"code","a6b7700e":"code","76191857":"code","a08b1e25":"code","cb50416b":"code","04c31b5e":"code","15fc183e":"markdown","7acf13a9":"markdown","5ab7a583":"markdown","02e212bb":"markdown","cc23f7f7":"markdown","0e143e0b":"markdown","28598d19":"markdown","93613c7a":"markdown","cd9e7f56":"markdown","c9f1e314":"markdown","f40f464a":"markdown","a21f192b":"markdown","0061272b":"markdown"},"source":{"e20fa2dd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","03528f82":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfrom tensorflow import keras\nfrom tensorflow.keras.preprocessing import sequence\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout , LSTM , Bidirectional \n\nimport tensorflow.compat.v1 as tf\nprint(tf.test.gpu_device_name())\n# See https:\/\/www.tensorflow.org\/tutorials\/using_gpu#allowing_gpu_memory_growth\nconfig = tf.ConfigProto()\nconfig.gpu_options.allow_growth = True\nfrom sklearn.preprocessing import MinMaxScaler","11df6998":"train = pd.read_csv(\"..\/input\/google-stock-price\/Google_Stock_Price_Train.csv\")\ntest = pd.read_csv(\"..\/input\/google-stock-price\/Google_Stock_Price_Test.csv\")","a6d8ca4f":"train.head()","580fe223":"test.head()","2d3c3f66":"train = train.set_index(\"Date\")\ntest = test.set_index(\"Date\")","b03f33b7":"train[\"Volume\"] = train[\"Volume\"].replace(\",\", \"\",regex=True)\ntrain[\"Close\"] = train[\"Close\"].replace(\",\", \"\",regex=True)\n\ntrain[\"Volume\"] = train[\"Volume\"].astype(\"float\")\ntrain[\"Close\"] = train[\"Close\"].astype(\"float\")\nprint(\"train dataset shape\", train.shape)\nprint(\"test dataset shape\", test.shape)\ntrain.info()","1f69621d":"test[\"Volume\"] = test[\"Volume\"].replace(\",\", \"\",regex=True)\ntest[\"Close\"] = test[\"Close\"].replace(\",\", \"\",regex=True)\n\ntest[\"Volume\"] = test[\"Volume\"].astype(\"float\")\ntest[\"Close\"] = test[\"Close\"].astype(\"float\")\ntest.info()","0719803f":"scale = MinMaxScaler()\n\nnum_col = [\"High\", \"Low\", \"Close\", \"Volume\"]\ntrain1 = scale.fit(train[num_col].to_numpy())\n\ntrain.loc[:, num_col] = train1.transform(train[num_col].to_numpy())\ntest.loc[:,num_col] = train1.transform(test[num_col].to_numpy())\n\n","f30b07fc":"#Output variable\nscale1 = MinMaxScaler()\nOpen = scale1.fit(train[[\"Open\"]])\ntrain[\"Open\"] = Open.transform(train[[\"Open\"]].to_numpy())\ntest[\"Open\"] = Open.transform(test[[\"Open\"]].to_numpy())","6fe5b76d":"from tqdm import tqdm_notebook as tqdm\ntqdm().pandas()\ndef prepare_data(X,y,time_steps=1):\n    Xs = []\n    Ys = []\n    for i in tqdm(range(len(X) - time_steps)):\n        a = X.iloc[i:(i + time_steps)].to_numpy()\n        Xs.append(a)\n        Ys.append(y.iloc[i+time_steps])\n    return np.array(Xs),np.array(Ys)    ","76f776de":"steps = 10\nX_train , y_train = prepare_data(train,train.Open,time_steps=steps)\nX_test , y_test = prepare_data(test,test.Open,time_steps=steps)\nprint(\"X_train : {}\\nX_test : {}\\ny_train : {}\\ny_test: {}\".format(X_train.shape,X_test.shape,y_train.shape,y_test.shape))","764a9456":"X_train = np.asarray(X_train).astype(np.float32)","c1d8e1de":"model = Sequential()\nmodel.add(LSTM(128,input_shape=(X_train.shape[1],X_train.shape[2])))\nmodel.add(Dropout(0.2))\n\nmodel.add(Dense(1,activation=\"sigmoid\"))\nmodel.compile(optimizer=\"adam\",loss=\"mse\")\n\nwith tf.device('\/GPU:0'):\n    prepared_model = model.fit(X_train,y_train,batch_size=32,epochs=1000,validation_data=(X_test,y_test))\n\nplt.plot(prepared_model.history[\"loss\"],label=\"loss\")\nplt.plot(prepared_model.history[\"val_loss\"],label=\"val_loss\")\nplt.legend(loc=\"best\")\nplt.xlabel(\"No. Of Epochs\")\nplt.ylabel(\"mse score\")","a5cadc84":"plt.plot(prepared_model.history[\"loss\"],label=\"loss\")\nplt.plot(prepared_model.history[\"val_loss\"],label=\"val_loss\")\nplt.legend(loc=\"best\")\nplt.xlabel(\"No. Of Epochs\")\nplt.ylabel(\"mse score\")","a6b7700e":"pred = model.predict(X_test)\n\ny_test_inv = scale1.inverse_transform(y_test.reshape(-1,1))\npred_inv = scale1.inverse_transform(pred)\n\nplt.figure(figsize=(16,6))\nplt.plot(y_test_inv.flatten(),marker=\".\",label=\"actual\")\nplt.plot(pred_inv.flatten(),marker=\".\",label=\"prediction\",color=\"r\")","76191857":"y_test_actual = scale1.inverse_transform(y_test.reshape(-1,1))\ny_test_pred = scale1.inverse_transform(pred)\n\narr_1 = np.array(y_test_actual)\narr_2 = np.array(y_test_pred)\n\nactual = pd.DataFrame(data=arr_1.flatten(),columns=[\"actual\"])\npredicted = pd.DataFrame(data=arr_2.flatten(),columns = [\"predicted\"])","a08b1e25":"final = pd.concat([actual,predicted],axis=1)\nfinal.head()","cb50416b":"from sklearn.metrics import mean_squared_error, r2_score\nrmse = np.sqrt(mean_squared_error(final.actual,final.predicted)) \nr2 = r2_score(final.actual,final.predicted) \nprint(\"rmse is : {}\\nr2 is : {}\".format(rmse,r2))","04c31b5e":"plt.figure(figsize=(16,6))\nplt.plot(final.actual,label=\"Actual data\")\nplt.plot(final.predicted,label=\"predicted values\")\nplt.legend(loc=\"best\")","15fc183e":"We will follow the same step as above for testing dataset as well, so that both training and testing data will be in same page.","7acf13a9":"# Importing Data using pandas library","5ab7a583":"# Inputs in LSTM:\n\n\u2022\tThe input of the LSTM is always is a 3D array. (batch_size, time_steps, seq_len)\n\n\u2022\tThe output of the LSTM could be a 2D array or 3D array depending upon the return_sequences argument.\n\n\u2022\tIf return_sequence is False, the output is a 2D array. (batch_size, units)\n\n\u2022\tIf return_sequence is True, the output is a 3D array. (batch_size, time_steps, units)\n","02e212bb":"In data preparation step, we are trying to assign values to x_train, y_train, x_test and y_test. In our case we're using \"Open\" coulumn as predicted variable and other as predictors.","cc23f7f7":"# Importing packages\nTo design any machine learning or deep learning model we will need some libraries like **Pandas**, **Numpy**, **Matplotlib** etc. \nFor this multivarient time series, I'm using LSTM layer along with **Dense** and **Dropout** layers. To use this layers we need to import them from keras. Along with these layers we'll need a modeling API so, we'll import **Sequential Model?** from keras.","0e143e0b":"If you have a question or feedback, do not hesitate to write and if you like this kernel, please do not forget to UPVOTE \ud83d\ude42","28598d19":"The first step towards every time series model is to **set date\/ month\/ week\/ day\/time as index**","93613c7a":"# Data Cleaning","cd9e7f56":"# Normalization","c9f1e314":"# Data preparation before building model","f40f464a":"# Forecasting\n\nAccording to wikepedia, Forecasting is the process of making predictions of the future based on past and present data and most commonly by analysis of trends. A commonplace example might be estimation of some variable of interest at some specified future date. Prediction is a similar, but more general term. Both might refer to formal statistical methods employing time series, cross-sectional or longitudinal data, or alternatively to less formal judgmental methods. Usage can differ between areas of application: for example, in hydrology the terms \"forecast\" and \"forecasting\" are sometimes reserved for estimates of values at certain specific future times, while the term \"prediction\" is used for more general estimates, such as the number of times floods will occur over a long period. \n\nInvestors utilize forecasting to determine if events affecting a company, such as sales expectations, will increase or decrease the price of shares in that company. Stock analysts use forecasting to extrapolate how trends, such as GDP or unemployment, will change in the coming quarter or year. \n\n# How to choose right method for forecasting?\n-Right choice of forecasting is very essential because it helps you to derive accurate insights. The reason why we're discussing the right method is because we have different types of forecastung methods and different types have different ways and statistics to do forecasting. So let's discuss different types of forecasting based on today\u2019s business problem. \n\n1.\tInputs vs. Outputs\n\nInputs: Historical data provided to the model in order to make a single forecast.\nOutputs: Prediction or forecast for a future time step beyond the data provided as input.\n\n2.\tEndogenous vs. Exogenous\n\nEndogenous: Input variables that are influenced by other variables in the system and on which the output variable depends on input variable.\nExogenous: Input variables that are not influenced by other variables in the system and on which the output variable depends.\n\n3.\tUnstructured vs. Structured\n\nUnstructured: No obvious systematic time-dependent pattern in a time series variable.\nStructured: Systematic time-dependent patterns in a time series variable (e.g. trend and\/or seasonality).\n\n4.\tRegression vs. Classification\n\nRegression: Forecast a numerical quantity.\n\nClassification: Classify as one of two or more labels.\n\n5.\tUnivariate vs. Multivariate\n\nUnivariate: One variable measured over time.\n\nMultivariate: Multiple variables measured over time.\n\n6.\tSingle-step vs. Multi-step\n\nOne-Step: Forecast the next time step.\n\nMulti-Step: Forecast more than one future time steps.\n\n7.\tStatic vs. Dynamic\n\nStatic. A forecast model is fit once and used to make predictions.\n\nDynamic. A forecast model is fit on newly available data prior to each prediction.\n\n8.\tContiguous vs. Discontiguous\n\nContiguous. Observations are made uniform over time.\n\nDiscontiguous. Observations are not uniform over time.\n\n**What are different types of forecasting methods?**\nThe most common forecasting methods are given below:\n1. ARIMA\n2. SARIMA\n3. Exponential Smoothning\n4. Facebook Prophet Forecasting\n5. RNN\n6. LSTM\n\nPlease comment below if you know any other type of forecasting. I'll be happy to learn \ud83d\ude42.\n\nIn this notebook we're going to learn multivarient time series forecasting. Statistically, **Multivarient Analysis** is a statistical procedure for analysis of data involving more than one type of measurement or observation. It may also mean solving problems where more than one dependent variable is analyzed simultaneously with other variables.","a21f192b":"By loooking at the final data we can say that our model predicted values very near to the actual values. However, if you want you then you can improve the model performance by different model methods such as parameter tunning and GridSearchCV or K fold etc.","0061272b":"In this data we have two columns  \"Volume\" and \"Close\" which have numeric data, but with comma, which behaves like a string. So, we'll first replace those comma and then change the datatype as float."}}