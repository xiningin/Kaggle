{"cell_type":{"108fd295":"code","3e1fd1b3":"code","3df17445":"code","4ffa0700":"code","4d2da649":"code","0af18427":"code","1d8e689d":"code","d4e0dd9b":"code","8a701e2b":"code","45287d18":"code","d78786a7":"code","26072f75":"code","19fba091":"code","c416deca":"code","697b523c":"markdown","2249ba66":"markdown","a857b3aa":"markdown","a800e87c":"markdown"},"source":{"108fd295":"# Import common libraries and connect with Kaggle environment\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3e1fd1b3":"# Import dataset direclty from Kaggle\n\nimport glob\nimport json\nimport pandas as pd\nfrom tqdm import tqdm\nroot_path = '\/kaggle\/input\/CORD-19-research-challenge\/'\nall_json = glob.glob(f'{root_path}\/**\/*.json', recursive=True)\nlen(all_json)","3df17445":"# Create a dataframe \n\n\nmetadata_path = f'{root_path}\/metadata.csv'\nmeta_df = pd.read_csv(metadata_path, dtype={\n    'pubmed_id': str,\n    'Microsoft Academic Paper ID': str, \n    'doi': str\n})\nmeta_df.head()","4ffa0700":"# Dropped columns with mixed dtype as they were not needed\n\nmeta_df.drop(columns=['who_covidence_id', 'arxiv_id'], inplace=True)\nmeta_df.head()","4d2da649":"# Check the number of articles without an abstract\n\nmeta_df.abstract.isnull().sum()","0af18427":"# Check the total number of articles in dataframe\n\nmeta_df.abstract.value_counts().sum()","1d8e689d":"# Percentage of articles without an abstract\n\nmeta_df.abstract.isnull().sum()\/ meta_df.abstract.value_counts().sum()","d4e0dd9b":"# Select only those without an abstract\n\nabstracts = meta_df[meta_df.abstract.isnull()]","8a701e2b":"pd.options.display.max_colwidth = 2000\nabstracts.head()","45287d18":"# Instal transformers\n\n#!pip install -U sentence-transformers\n\n","d78786a7":"# Import libraries\n \n\nfrom transformers import pipeline\nimport requests\nimport pprint\nimport time\npp = pprint.PrettyPrinter(indent=14)","26072f75":"# Create an easy summarizer thanks to HuggingFace (https:\/\/huggingface.co\/transformers\/main_classes\/pipelines.html#summarizationpipeline) the implementation could not be easier\n\nsummarizer =  pipeline(\"summarization\")","19fba091":"# Here I used a text version of the json file:  0001418189999fea7f7cbe3e82703d71c85a6fe5.json\n\nf = open('\/content\/Absence of surface expression of feline infectious peritonitis virus (FIPV).txt', 'r')\nfeline = f.read()\nfeline ","c416deca":"# Generate abstracts\n\n\nabs_bart = summarizer(feline[:1022], min_length = 5, pad_to_max_length=True)\nabs_t5 = summarizer_t5(feline[:511], min_length=5, max_length=40)","697b523c":"The abstract generated by Bart seems to synthesize very well a complex article and it is more concise than the actual abstract. What is even more impressive is that due to a current limitation of the transformer only the first 1024 tokens were included in the generation of the abstract.\nThe abstracts were generated with different lengths and *setting pad_to_max_length=True* returned the best result. \n\nThe second model did not return a good abstract. This is probably due to the fact that it only considers 512 tokens and I used the lowest model (t5-base) because larger models required a lot of computational power. So it would not be difficul to get even better results. But this simple implementation already provided a very good abstract and indicates how the dataset can be further improved. \n\n\nThe following were helpful in the development of this notebook:\n\nhttps:\/\/colab.research.google.com\/github\/theamrzaki\/COVID-19-BERT-ResearchPapers-Semantic-Search\/blob\/master\/COVID_19_BERT_ResearchPapers_Semantic_Search.ipynb#scrollTo=gtDN1zQ8f63B\n\nhttps:\/\/colab.research.google.com\/drive\/1iAIFX1QQiFm1F01vMmnAgFh4oH1H-K8W#scrollTo=NWzDuuEmICBM\n\nhttps:\/\/huggingface.co\/transformers\/main_classes\/pipelines.html#summarizationpipeline\n","2249ba66":"\n# Automatically creating abstracts for scientific articles \n\nThis notebook was designed with the COVID-19 Open Research Dataset Challenge (CORD-19) in mind.  CORD-19 is a resource of over 138,000 scholarly articles about COVID-19, SARS-CoV-2, and related coronaviruses. The dataset is freely available and is been used by the scientific community to gain a better understand of a number of topics related to COVID-19.\n\nAn important point is that 29% of the 107032 of the articles analysed here do not have an abstract, which are critical for literature reviews, meta-analysis and synthesis review. This notebook addresses this by presenting a model that automatically generates good quality abstracts. \n\nAt the end of this notebook I compare an actual abstract from an article and those by generated by two different models. \n\n","a857b3aa":"Let's have a look at the abstract written by the authors and those generated by the models. \n\n\n**Actual Abstract\n**\n\nFeline infectious peritonitis virus (FIPV) positive cells are present in pyogranulomas and exudates from cats with FIP. These cells belong mainly to the monocyte\/macrophage lineage. How these cells survive in immune cats is not known. In this study, FIPV positive cells were isolated from pyogranulomas and exudates of 12 naturally FIPV-infected cats and the presence of two immunologic targets, viral antigens and MHC I, on their surface was determined. The majority of the infected cells were confirmed to be cells from the monocyte\/macrophage lineage. No surface expression of viral antigens was detected on FIPV positive cells. MHC I molecules were present on all the FIPV positive cells. After cultivation of the isolated infected cells, 52\u00a0\u00b1\u00a010% of the infected cells re-expressed viral antigens on the plasma membrane.\n\nIn conclusion, it can be stated that in FIP cats, FIPV replicates in cells of the monocyte\/macrophage lineage without carrying viral antigens in their plasma membrane, which could allow them to escape from antibody-dependent cell lysis.\n\n\n\n**Abstract generated by HuggingFace pipeline (Bart)**\n\nFeline infectious peritonitis (FIP) is a fatal chronic disease in cats. Two forms can be distinguished. Cats suffering from the wet or effusive form have exudates in their body cavities. Exudate is absent in the second form, hence the name dry or non-effusive form.\n\n\n\n**Abstract generated by HuggingFace pipeline (t5-base)**\n\nfeline infectious peritonitis virus (FIPV) causes fatal chronic disease in cats . characterized by granulomatous lesions formed at serosae of\n","a800e87c":"# Results"}}