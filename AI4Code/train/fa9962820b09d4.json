{"cell_type":{"7ac7aa43":"code","de08f5d3":"code","639aeeee":"code","540ddefe":"code","6bd48b12":"code","9d424c2c":"code","66e7bfbd":"code","c62778b2":"code","fa2e902f":"code","f6d901d2":"code","0d3d1e68":"code","1b10300a":"code","2a7b6879":"code","faddf49f":"code","90577560":"code","cd932907":"code","2dcaba95":"code","ace415dc":"code","fb80ac3e":"code","21ea1a1a":"code","5cefa9cd":"code","47713cfa":"code","7194e3e4":"code","74f23ffa":"code","bdeb5777":"code","48149ba9":"code","391670c4":"markdown","051a5d86":"markdown","2c230065":"markdown","f2f69e7b":"markdown","72f02ebd":"markdown","352bb2a6":"markdown"},"source":{"7ac7aa43":"import os\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom keras.models import Model\nfrom keras.layers import Dense, MaxPooling2D, Conv2D, Flatten, Dropout\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.layers.normalization import BatchNormalization\nfrom keras.applications.resnet50 import ResNet50\nfrom keras.applications.vgg16 import VGG16\nfrom keras.applications.inception_v3 import InceptionV3\nsns.set()\n%matplotlib inline","de08f5d3":"train_path='..\/input\/fruit-and-vegetable-image-recognition\/train'\ntest_path='..\/input\/fruit-and-vegetable-image-recognition\/test'\nvalidation_path='..\/input\/fruit-and-vegetable-image-recognition\/validation'\n\ntrain_df=pd.DataFrame()\nfor i,(root,directory,filename) in enumerate(os.walk(train_path)):\n    if len(filename)==0:        \n        classname=directory\n    else:\n        if classname[i-1]=='bell pepper' or classname[i-1]=='soy beans':\n            print('Found')\n            if 'Image_56.jpg' in filename:\n                filename.remove('Image_56.jpg')        \n            if 'Image_96.jpg' in filename:\n                filename.remove('Image_96.jpg')  \n        df=pd.DataFrame([root + '\/'+ s for s in filename if s[-4: ]=='.jpg'], columns=['ImagePath'])\n        #if 'Image_56.jpg' in filename:\n         #   print('found')\n        df['Class']=classname[i-1]\n        train_df=train_df.append(df,ignore_index=True)","639aeeee":"from PIL import Image\nprint('------------')\nfor index,row in train_df.iterrows():\n            imgPath=row['ImagePath']\n            img = Image.open(imgPath) \n            try:\n                exif_data = img._getexif() \n            except:\n                print(imgPath)\n    ","540ddefe":"test_df=pd.DataFrame()\nfor i,(root,directory,filename) in enumerate(os.walk(test_path)):\n    if len(filename)==0:        \n        classname=directory\n    else:\n        df=pd.DataFrame([root + '\/'+ s for s in filename if s[-4: ]=='.jpg'], columns=['ImagePath'])\n        df['Class']=classname[i-1]\n        test_df=test_df.append(df,ignore_index=True)\n\n\nvalid_df=pd.DataFrame()\nfor i,(root,directory,filename) in enumerate(os.walk(validation_path)):\n    if len(filename)==0:        \n        classname=directory\n    else:\n        df=pd.DataFrame([root + '\/'+ s for s in filename if s[-4: ]=='.jpg'], columns=['ImagePath'])\n        df['Class']=classname[i-1]\n        valid_df=valid_df.append(df,ignore_index=True)","6bd48b12":"print('The information of training data')\nprint('----------------------')\nprint(train_df.info())\nprint('\\nThe information of testing data')\nprint('----------------------')\nprint(test_df.info())\nprint('\\nThe information of validation data')\nprint('----------------------')\nprint(valid_df.info())","9d424c2c":"Classes=list(train_df['Class'].unique())\nnumberOfSamples=pd.DataFrame(Classes,columns=['Class'])\nnumberOfSamples['Training_Set']=train_df['Class'].value_counts().values\nnumberOfSamples['Test_Set']=test_df['Class'].value_counts().values\nnumberOfSamples['Validation_Set']=valid_df['Class'].value_counts().values","66e7bfbd":"numberOfSamples","c62778b2":"plt.figure(figsize=(20,5))\ng=sns.countplot(x='Class',data=train_df)\ng=g.set_xticklabels(g.get_xticklabels(),rotation=45)","fa2e902f":"plt.figure(figsize=(20,5))\ng=sns.countplot(x='Class',data=test_df)\ng=g.set_xticklabels(g.get_xticklabels(),rotation=45)","f6d901d2":"# Ten random samples of dataset along with the [class name and Size] are shown\nsample_df=train_df.sample(10)\nplt.subplots(2,5,figsize=(20,10))\nfor i,(index,row) in enumerate(sample_df.iterrows()):\n    plt.subplot(2,5,i+1)\n    img=plt.imread(row['ImagePath'])\n    plt.imshow(img)\n    plt.title(row['Class']+'  '+ str(img.shape))\n    ","0d3d1e68":"train_generator=ImageDataGenerator(horizontal_flip=True,\n                                   vertical_flip=True,\n                                   rotation_range=45,\n                                   brightness_range=[0.5,1],\n                                   zoom_range=0.2,\n                                   rescale=(1.\/255))","1b10300a":"train_gen=train_generator.flow_from_dataframe(train_df,\n                                    x_col='ImagePath',\n                                    y_col='Class',                                    \n                                    batch_size=32,\n                                    seed=42,\n                                    shuffle=True,\n                                    color_mode='rgb',\n                                    class_mode=\"categorical\",\n                                    target_size=(224,224))","2a7b6879":"valid_gen=train_generator.flow_from_dataframe(valid_df,\n                                    x_col='ImagePath',\n                                    y_col='Class',                                    \n                                    batch_size=32,\n                                    seed=42,\n                                    shuffle=True,\n                                    color_mode='rgb',\n                                    class_mode=\"categorical\",\n                                    target_size=(224,224))","faddf49f":"test_generator=ImageDataGenerator(rescale=1.\/255)\ntest_gen=test_generator.flow_from_dataframe(test_df,x_col='ImagePath',\n                                    y_col='Class',                                    \n                                    batch_size=1,\n                                    seed=42,\n                                    color_mode='rgb',\n                                    class_mode=\"categorical\",\n                                    target_size=(224,224))","90577560":"batch_image=train_gen.next()\nbatch_im=batch_image[0]\nprint(batch_im.shape)\nplt.subplots(2,5,figsize=(20,10))\nfor i in range(10):\n    plt.subplot(2,5,i+1)\n    plt.imshow(batch_im[i,:,:,:])","cd932907":"vgg_model=VGG16(weights='imagenet')\nfor layer in vgg_model.layers[:-1]: \n    layer.trainable=False\npretrained_last_layer=vgg_model.get_layer(name=vgg_model.layers[-2].name)\npretrained_output=pretrained_last_layer.output\nnext_layer= Dense(36, activation='softmax')(pretrained_output)\nmodelfruit_vgg = Model(vgg_model.input, next_layer)","2dcaba95":"modelfruit_vgg.compile(loss=keras.losses.categorical_crossentropy,optimizer=keras.optimizers.Adam() ,metrics=['accuracy'])","ace415dc":"batch_size=64\nhistory=modelfruit_vgg.fit(train_gen,validation_data=valid_gen,epochs=8)#callbacks=earlystopping)","fb80ac3e":"loss, accuracy = modelfruit_vgg.evaluate(test_gen)\nprint(\"Test: accuracy = %f  ;  loss = %f \" % (accuracy, loss))","21ea1a1a":"json_model=modelfruit_vgg.to_json()\nwith open('vgg_fruit36.json','w') as json_file:\n    json_file.write(json_model)\nmodelfruit_vgg.save_weights('vgg_fruit36.h5')","5cefa9cd":"resnet_model=ResNet50(weights='imagenet')","47713cfa":"for layer in resnet_model.layers:\n    layer.trainable=False\nresnet_model.summary()","7194e3e4":"pretrained_last_layer=resnet_model.get_layer(name=resnet_model.layers[-2].name)\npretrained_output=pretrained_last_layer.output\nnext_layer=Dense(36, activation='softmax')(pretrained_output)\npretrained_resnet50 = Model(resnet_model.input, next_layer)","74f23ffa":"pretrained_resnet50.summary()","bdeb5777":"pretrained_resnet50.compile(loss='categorical_crossentropy',optimizer='adam',metrics=['Accuracy'])","48149ba9":"pretrained_resnet50.fit(train_gen,validation_data=valid_gen,epochs=2)","391670c4":"# VGG16","051a5d86":" # Load packages","2c230065":"# Save VGG Model","f2f69e7b":"# Count visualization using seaborn","72f02ebd":"> Data preparation","352bb2a6":"# ResNet50 model summary"}}