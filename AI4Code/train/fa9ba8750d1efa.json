{"cell_type":{"155efbe2":"code","f6d73fb2":"code","f4531491":"code","69fc558d":"code","2e9c7c61":"code","abf9dcd9":"code","eed4ed0a":"code","50c1cd66":"code","83cbcb10":"code","3323a4be":"code","5386a8bc":"code","85d811c6":"code","6d76a16f":"code","2acfd06b":"code","0bdfc9fb":"code","0cfe204a":"code","a6f93e10":"code","0395454f":"code","fc2342bc":"code","2db680de":"code","7a03b754":"code","97e480ab":"code","877ab0fd":"code","8a1a16eb":"code","4c45799b":"code","a88b846a":"code","3e8f0bf4":"code","dd6d0d47":"code","fd93548d":"code","39b5cdec":"code","c5c6de46":"code","52061a7b":"code","f2492033":"markdown"},"source":{"155efbe2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f6d73fb2":"import matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.svm import SVC","f4531491":"data = pd.read_csv('\/kaggle\/input\/scikitconf\/heart-disease.csv')\ndata.head()","69fc558d":"data.target.value_counts()","2e9c7c61":"sns.countplot(x=\"target\", data=data, palette=\"bwr\")\nplt.show()","abf9dcd9":"countNoDisease = len(data[data.target == 0])\ncountHaveDisease = len(data[data.target == 1])\nprint(\"Percentage of Patients Haven't Heart Disease: {:.2f}%\".format((countNoDisease \/ (len(data.target))*100)))\nprint(\"Percentage of Patients Have Heart Disease: {:.2f}%\".format((countHaveDisease \/ (len(data.target))*100)))","eed4ed0a":"sns.countplot(x='sex', data=data, palette=\"mako_r\")\nplt.xlabel(\"Sex (0 = female, 1= male)\")\nplt.show()","50c1cd66":"countFemale = len(data[data.sex == 0])\ncountMale = len(data[data.sex == 1])\nprint(\"Percentage of Female Patients: {:.2f}%\".format((countFemale \/ (len(data.sex))*100)))\nprint(\"Percentage of Male Patients: {:.2f}%\".format((countMale \/ (len(data.sex))*100)))","83cbcb10":"data.groupby('target').mean()","3323a4be":"pd.crosstab(data.age,data.target).plot(kind=\"bar\",figsize=(20,6))\nplt.title('Heart Disease Frequency for Ages')\nplt.xlabel('Age')\nplt.ylabel('Frequency')\nplt.savefig('heartDiseaseAndAges.png')\nplt.show()","5386a8bc":"pd.crosstab(data.sex,data.target).plot(kind=\"bar\",figsize=(15,6),color=['#1CA53B','#AA1111' ])\nplt.title('Heart Disease Frequency for Sex')\nplt.xlabel('Sex (0 = Female, 1 = Male)')\nplt.xticks(rotation=0)\nplt.legend([\"Haven't Disease\", \"Have Disease\"])\nplt.ylabel('Frequency')\nplt.show()","85d811c6":"plt.scatter(x=data.age[data.target==1], y=data.thalach[(data.target==1)], c=\"red\")\nplt.scatter(x=data.age[data.target==0], y=data.thalach[(data.target==0)])\nplt.legend([\"Disease\", \"Not Disease\"])\nplt.xlabel(\"Age\")\nplt.ylabel(\"Maximum Heart Rate\")\nplt.show()","6d76a16f":"pd.crosstab(data.slope,data.target).plot(kind=\"bar\",figsize=(15,6),color=['#DAF7A6','#FF5733' ])\nplt.title('Heart Disease Frequency for Slope')\nplt.xlabel('The Slope of The Peak Exercise ST Segment ')\nplt.xticks(rotation = 0)\nplt.ylabel('Frequency')\nplt.show()","2acfd06b":"pd.crosstab(data.fbs,data.target).plot(kind=\"bar\",figsize=(15,6),color=['#FFC300','#581845' ])\nplt.title('Heart Disease Frequency According To FBS')\nplt.xlabel('FBS - (Fasting Blood Sugar > 120 mg\/dl) (1 = true; 0 = false)')\nplt.xticks(rotation = 0)\nplt.legend([\"Haven't Disease\", \"Have Disease\"])\nplt.ylabel('Frequency of Disease or Not')\nplt.show()","0bdfc9fb":"pd.crosstab(data.cp,data.target).plot(kind=\"bar\",figsize=(15,6),color=['#11A5AA','#AA1190' ])\nplt.title('Heart Disease Frequency According To Chest Pain Type')\nplt.xlabel('Chest Pain Type')\nplt.xticks(rotation = 0)\nplt.ylabel('Frequency of Disease or Not')\nplt.show()","0cfe204a":"a = pd.get_dummies(data['cp'], prefix = \"cp\")\nb = pd.get_dummies(data['thal'], prefix = \"thal\")\nc = pd.get_dummies(data['slope'], prefix = \"slope\")","a6f93e10":"frames = [data, a, b, c]\ndata = pd.concat(frames, axis = 1)\ndata.head()","0395454f":"data = data.drop(columns = ['cp', 'thal', 'slope'])\ndata.head()","fc2342bc":"y = data.target.values\nx_data = data.drop(['target'], axis = 1)","2db680de":"x = (x_data - np.min(x_data)) \/ (np.max(x_data) - np.min(x_data)).values","7a03b754":"x_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 0.2,random_state=0)","97e480ab":"#transpose matrices\nx_train = x_train.T\ny_train = y_train.T\nx_test = x_test.T\ny_test = y_test.T","877ab0fd":"#initialize\ndef initialize(dimension):\n    \n    weight = np.full((dimension,1),0.01)\n    bias = 0.0\n    return weight,bias","8a1a16eb":"def sigmoid(z):\n    \n    y_head = 1\/(1+ np.exp(-z))\n    return y_head","4c45799b":"# KNN Model\nfrom sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors = 2)  # n_neighbors means k\n\nknn.fit(x_train.T, y_train.T)","a88b846a":"prediction = knn.predict(x_test.T)\nprint(\"{} KNN Score: {:.2f}%\".format(2, knn.score(x_test.T, y_test.T)*100))","3e8f0bf4":"# try ro find best k value\nscoreList = []\nfor i in range(1,20):\n    knn2 = KNeighborsClassifier(n_neighbors = i)  # n_neighbors means k\n    knn2.fit(x_train.T, y_train.T)\n    scoreList.append(knn2.score(x_test.T, y_test.T))\n    \nplt.plot(range(1,20), scoreList)\nplt.xticks(np.arange(1,20,1))\nplt.xlabel(\"K value\")\nplt.ylabel(\"Score\")\nplt.show()\n\nmaxaccuracy = max(scoreList)*100\nprint(\"Maximum KNN Score is {:.2f}%\".format(maxaccuracy))","dd6d0d47":"data_svm = pd.read_csv('\/kaggle\/input\/scikitconf\/heart-disease.csv')\ndata_svm.head()","fd93548d":"X = data_svm.iloc[:,1:13].values\ny = data_svm.iloc[:, -1].values","39b5cdec":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)\nclassifier = SVC(kernel = 'linear', random_state = 0)\nclassifier.fit(X_train, y_train)\n\ny_pred = classifier.predict(X_test)","c5c6de46":"accuracies = cross_val_score(estimator = classifier, X = X_train, y = y_train, cv = 10)\naccuracies.mean()","52061a7b":"plt.plot(accuracies)\nplt.xlabel(\"SVM value\")\nplt.ylabel(\"Score\")\nplt.show()","f2492033":"**SVM Classifiction**"}}