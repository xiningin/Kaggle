{"cell_type":{"0de1cffe":"code","3450f136":"code","fd075934":"code","52589c8b":"code","03cd29b0":"code","bd93b8e9":"code","3d1662df":"code","719e0e3f":"code","674ea2c3":"code","edff5114":"code","3497819a":"code","7084e444":"code","3cc197e2":"code","89e2e765":"code","b2601a39":"code","3c2c1290":"code","05cd6610":"code","f7ce4109":"code","4370735a":"code","7c49c819":"code","c609d8b3":"code","f96f5728":"code","0c95f82d":"code","4b57c460":"code","0f62d0e3":"code","e7dccb68":"code","cf5c8867":"code","4a71c7c4":"code","902d042f":"code","4eae10d3":"code","165734ac":"code","8682a176":"code","44a76120":"code","e2d9a9f9":"code","ab26ac0e":"code","ef42f123":"code","a3c03cdb":"code","97ac942b":"code","60d74e53":"code","91611638":"code","9f3f79b5":"code","ef6d4b20":"code","455e37b8":"code","c13f789d":"code","cb87b1ce":"code","d506c658":"code","2283f769":"code","fd6467b4":"code","d21b9ad9":"code","7396a114":"code","d6d22c71":"code","7123afd6":"code","7326a9e4":"code","a7f6d542":"code","6e9fa78c":"code","4859d026":"code","7ec39267":"code","6d420b5c":"code","c14bc0a6":"code","622a9bf0":"code","2ffd1e4a":"code","ba9ff283":"code","f62ef0cc":"code","6146def6":"code","daef22d8":"code","2d3f2149":"code","d0dc554f":"code","6edf701c":"code","75152385":"code","1196b4a7":"code","d94d2a99":"code","b86b05ad":"code","52782dd0":"code","210ae24a":"code","7951a016":"code","3dc78767":"code","35b9dbf0":"code","553ea794":"code","8775e55e":"code","a6365d7b":"markdown","e4b0d455":"markdown","3d2a5289":"markdown","72d06b36":"markdown","561f13d0":"markdown","9b44110c":"markdown","80c2938d":"markdown","a14ecc4d":"markdown","955e17e2":"markdown","5616e595":"markdown","bc371117":"markdown","c157a2f8":"markdown","e6a954f0":"markdown","1d18eecc":"markdown","90fb81c7":"markdown","68b50b96":"markdown","88e200e8":"markdown","f28395db":"markdown","ca447eac":"markdown","d333bd5c":"markdown","fe6c6944":"markdown","c1d9817d":"markdown","2a74e2c7":"markdown","3c6e20e5":"markdown","0e614762":"markdown","0364d2b8":"markdown","3034474b":"markdown","d2f9add0":"markdown","53f44c15":"markdown","e5162149":"markdown","e74f0fa3":"markdown","697fb2f1":"markdown","8d8d66b1":"markdown","c88bd525":"markdown","198311ea":"markdown","56102a50":"markdown","4243c89f":"markdown","07644ceb":"markdown","b796b47a":"markdown","f9c7add7":"markdown","f7eb70f7":"markdown","923c12c0":"markdown","5423db2c":"markdown","4fec233a":"markdown","3192df62":"markdown","81935e31":"markdown","c1cfa200":"markdown"},"source":{"0de1cffe":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nplt.style.use('seaborn-whitegrid')\nimport seaborn as sns\nfrom collections import Counter\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3450f136":"train_df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_PassengerId = test_df[\"PassengerId\"]","fd075934":"train_df.columns","52589c8b":"train_df.head()","03cd29b0":"train_df.describe()","bd93b8e9":"train_df.info()","3d1662df":"def bar_plot(variable):\n    \"\"\"\n        input: variable ex: \"Sex\"\n        output: bar plot & value count\n    \"\"\"\n    # get feature\n    var = train_df[variable]\n    # count number of categorical variable(value\/sample)\n    varValue = var.value_counts()\n    \n    # visualize\n    plt.figure(figsize = (9,3))\n    plt.bar(varValue.index,varValue)\n    plt.xticks(varValue.index,varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}: \\n {}\".format(variable,varValue))\n    \n    ","719e0e3f":"category1 = [\"Survived\",\"Sex\",\"Pclass\",\"Embarked\",\"SibSp\",\"Parch\"]\nfor c in category1:\n    bar_plot(c)","674ea2c3":"category2 = [\"Cabin\",\"Name\",\"Ticket\"]\nfor c in category2:\n    print(\"{} \\n\".format(train_df[c].value_counts()))","edff5114":"def plot_hist(variable):\n    plt.figure(figsize = (9,3))\n    plt.hist(train_df[variable],bins = 50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} disturbution with hist\".format(variable))\n    plt.show()","3497819a":"numericVar = [\"Fare\",\"Age\",\"PassengerId\"]\nfor n in numericVar:\n    plot_hist(n)","7084e444":"# Pclass vs Survived\ntrain_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)","3cc197e2":"# Sex vs Survived\ntrain_df[[\"Sex\",\"Survived\"]].groupby([\"Sex\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)","89e2e765":"# SibSp vs Survived\ntrain_df[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)","b2601a39":"# Parch vs Survived\ntrain_df[[\"Parch\",\"Survived\"]].groupby([\"Parch\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)","3c2c1290":"def detect_outliers(df,features):\n    outlier_indices = []\n    \n    for c in features:\n        # 1st quartile\n        Q1 = np.percentile(df[c],25)\n        # 3rd quartile\n        Q3 = np.percentile(df[c],75)\n        # IQR\n        IQR = Q3 - Q1\n        # Outlier Step\n        outlier_step = IQR * 1.5\n        # detect outlier and their indeces\n        outlier_list_col = df[(df[c] < Q1 - outlier_step) | (df[c] > Q3 + outlier_step)].index\n        # store indeces\n        outlier_indices.extend(outlier_list_col)\n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i,v in outlier_indices.items() if v > 2)\n    return multiple_outliers","05cd6610":"train_df.loc[detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]","f7ce4109":"# drop outliers\ntrain_df = train_df.drop(detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"]),axis = 0).reset_index(drop = True)","4370735a":"train_df_len = len(train_df)\ntrain_df = pd.concat([train_df,test_df],axis = 0).reset_index(drop = True)","7c49c819":"train_df.columns[train_df.isnull().any()]","c609d8b3":"train_df.isnull().sum()","f96f5728":"train_df[train_df[\"Embarked\"].isnull()]","0c95f82d":"train_df.boxplot(column=\"Fare\",by = \"Embarked\")\nplt.show()","4b57c460":"train_df[\"Embarked\"] = train_df[\"Embarked\"].fillna(\"C\")","0f62d0e3":"train_df[train_df[\"Fare\"].isnull()]","e7dccb68":"train_df[\"Fare\"] = train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"] == 3][\"Fare\"]))","cf5c8867":"train_df[train_df[\"Fare\"].isnull()]","4a71c7c4":"list1 = [\"SibSp\",\"Parch\",\"Age\",\"Fare\",\"Survived\"]\nsns.heatmap(train_df[list1].corr(),annot = True, fmt = \".2f\")\nplt.show()","902d042f":"g = sns.factorplot(x = \"SibSp\",y = \"Survived\",data = train_df,kind = \"bar\",size = 6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","4eae10d3":"g = sns.factorplot(x = \"Parch\",y = \"Survived\",kind = \"bar\",data = train_df,size = 6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","165734ac":"g = sns.factorplot(x = \"Pclass\",y = \"Survived\",data = train_df, kind = \"bar\",size = 6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","8682a176":"g = sns.FacetGrid(train_df,col = \"Survived\")\ng.map(sns.distplot,\"Age\",bins = 25)\nplt.show()","44a76120":"g = sns.FacetGrid(train_df,col = \"Survived\",row = \"Pclass\",size = 2)\ng.map(plt.hist,\"Age\",bins = 25)\ng.add_legend()\nplt.show()","e2d9a9f9":"g = sns.FacetGrid(train_df,row = \"Embarked\",size = 2)\ng.map(sns.pointplot, \"Pclass\",\"Survived\",\"Sex\")\ng.add_legend()\nplt.show()","ab26ac0e":"g = sns.FacetGrid(train_df,row = \"Embarked\",col = \"Survived\",size = 2.3)\ng.map(sns.barplot,\"Sex\",\"Fare\")\ng.add_legend()\nplt.show()","ef42f123":"train_df[train_df[\"Age\"].isnull()]","a3c03cdb":"sns.factorplot(x = \"Sex\",y = \"Age\",data = train_df, kind = \"box\")\nplt.show()","97ac942b":"sns.factorplot(x = \"Sex\",y = \"Age\",hue = \"Pclass\",data = train_df, kind = \"box\")\nplt.show()","60d74e53":"sns.factorplot(x = \"Parch\",y = \"Age\",data = train_df, kind = \"box\")\nsns.factorplot(x = \"SibSp\",y = \"Age\",data = train_df, kind = \"box\")\nplt.show()","91611638":"train_df[\"Sex\"] = [1 if i == \"male\" else 0 for i in train_df[\"Sex\"]]","9f3f79b5":"sns.heatmap(train_df[[\"Age\",\"Sex\",\"SibSp\",\"Parch\",\"Pclass\"]].corr(), annot = True)\nplt.show()","ef6d4b20":"index_nan_age = list(train_df[\"Age\"][train_df[\"Age\"].isnull()].index)\nfor i in index_nan_age:\n    age_pred = train_df[\"Age\"][((train_df[\"SibSp\"] == train_df.iloc[i][\"SibSp\"]) & (train_df[\"Parch\"] == train_df.iloc[i][\"Parch\"]) & (train_df[\"Pclass\"] == train_df.iloc[i][\"Pclass\"]))].median()\n    age_med = train_df[\"Age\"].median()\n    if not np.isnan(age_pred):\n        train_df[\"Age\"].iloc[i] = age_pred\n    else:\n        train_df[\"Age\"].iloc[i] = age_med\n    ","455e37b8":"train_df[train_df[\"Age\"].isnull()]","c13f789d":"train_df[\"Name\"].head(10)","cb87b1ce":"s = \"McCarthy, Mr.Timothy J\"","d506c658":"name = train_df[\"Name\"]\ntrain_df[\"Title\"] = [i.split(\".\")[0].split(\",\")[-1].strip() for i in name ]","2283f769":"sns.countplot(x = \"Title\",data=train_df)\nplt.xticks(rotation = 60)","fd6467b4":"# convert to categorical\ntrain_df[\"Title\"] = train_df[\"Title\"].replace([\"Lady\",\"the Countess\",\"Capt\",\"Col\",\"Don\",\"Dr\",\"Major\",\"Rev\",\"Sir\",\"Jonkheer\",\"Dona\"],\"other\")\ntrain_df[\"Title\"] = [0 if i == \"Master\" else 1 if i == \"Miss\" or i == \"Ms\" or i == \"Mlle\" or i == \"Mrs\" else 2 if i == \"Mr\" else 3 for i in train_df[\"Title\"]]","d21b9ad9":"g = sns.factorplot(x = \"Title\",y = \"Survived\", data = train_df, kind = \"bar\")\ng.set_xticklabels([\"Master\",\"Mrs\",\"Mr\",\"Other\"])\ng.set_ylabels(\"Survival Probability\")\nplt.show()","7396a114":"train_df.drop(labels = [\"Name\"], axis = 1, inplace = True)","d6d22c71":"train_df = pd.get_dummies(train_df,columns=[\"Title\"])\ntrain_df.head()","7123afd6":"train_df.head()","7326a9e4":"train_df[\"Fsize\"] = train_df[\"SibSp\"] + train_df[\"Parch\"] + 1","a7f6d542":"g = sns.factorplot(x = \"Fsize\",y = \"Survived\",data = train_df,kind = \"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()","6e9fa78c":"train_df[\"family_size\"] = [1 if i < 5 else 0 for i in train_df[\"Fsize\"]]","4859d026":"sns.countplot(x = \"family_size\",data = train_df)\nplt.show()","7ec39267":"g = sns.factorplot(x = \"family_size\",y = \"Survived\",data = train_df,kind = \"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()","6d420b5c":"train_df = pd.get_dummies(train_df,columns = [\"family_size\"])\ntrain_df.head()","c14bc0a6":"train_df[\"Embarked\"]","622a9bf0":"sns.countplot(x = \"Embarked\",data = train_df)\nplt.show()","2ffd1e4a":"train_df = pd.get_dummies(train_df,columns = [\"Embarked\"])\ntrain_df.head()","ba9ff283":"train_df[\"Ticket\"].head(20)","f62ef0cc":"tickets = []\nfor i in list(train_df.Ticket):\n    if not i.isdigit():\n        tickets.append(i.replace(\".\",\"\").replace(\"\/\",\"\").strip().split(\" \")[0])\n    else:\n        tickets.append(\"x\")\ntrain_df[\"Ticket\"] = tickets","6146def6":"train_df = pd.get_dummies(train_df, columns= [\"Ticket\"], prefix = \"T\")","daef22d8":"sns.countplot(x = \"Pclass\", data = train_df)\nplt.show()","2d3f2149":"train_df[\"Pclass\"] = train_df[\"Pclass\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df,columns = [\"Pclass\"])\ntrain_df.head()","d0dc554f":"train_df[\"Sex\"] = train_df[\"Sex\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df,columns = [\"Sex\"])\ntrain_df.head()","6edf701c":"train_df.drop(labels = [\"PassengerId\",\"Cabin\"], axis = 1,inplace = True)","75152385":"train_df.columns","1196b4a7":"from sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score","d94d2a99":"train_df_len","b86b05ad":"test = train_df[train_df_len:]\ntest.drop(labels = [\"Survived\"],axis = 1, inplace = True)","52782dd0":"train = train_df[:train_df_len]\nX_train = train.drop(labels = \"Survived\",axis = 1)\ny_train = train[\"Survived\"]\nX_train, X_test, y_train, y_test = train_test_split(X_train,y_train,test_size = 0.33,random_state = 42)\nprint(\"X_test\",len(X_train))\nprint(\"X_test\",len(X_test))\nprint(\"y_train\",len(y_train))\nprint(\"y_test\",len(y_test))\nprint(\"test\",len(test))","210ae24a":"logreg = LogisticRegression()\nlogreg.fit(X_train,y_train)\nacc_log_train = round(logreg.score(X_train,y_train)*100,2) \nacc_log_test = round(logreg.score(X_test,y_test)*100,2)\nprint(\"Training Accuracy: % {}\".format(acc_log_train))\nprint(\"Testing Accuracy: % {}\".format(acc_log_test))","7951a016":"random_state = 42\nclassifier = [DecisionTreeClassifier(random_state = random_state),\n             SVC(random_state = random_state),\n             RandomForestClassifier(random_state = random_state),\n             LogisticRegression(random_state = random_state),\n             KNeighborsClassifier()]\n\ndt_param_grid = {\"min_samples_split\" : range(10,500,20),\n                \"max_depth\": range(1,20,2)}\n\nsvc_param_grid = {\"kernel\" : [\"rbf\"],\n                 \"gamma\": [0.001, 0.01, 0.1, 1],\n                 \"C\": [1,10,50,100,200,300,1000]}\n\nrf_param_grid = {\"max_features\": [1,3,10],\n                \"min_samples_split\":[2,3,10],\n                \"min_samples_leaf\":[1,3,10],\n                \"bootstrap\":[False],\n                \"n_estimators\":[100,300],\n                \"criterion\":[\"gini\"]}\n\nlogreg_param_grid = {\"C\":np.logspace(-3,3,7),\n                    \"penalty\": [\"l1\",\"l2\"]}\n\nknn_param_grid = {\"n_neighbors\": np.linspace(1,19,10, dtype = int).tolist(),\n                 \"weights\": [\"uniform\",\"distance\"],\n                 \"metric\":[\"euclidean\",\"manhattan\"]}\nclassifier_param = [dt_param_grid,\n                   svc_param_grid,\n                   rf_param_grid,\n                   logreg_param_grid,\n                   knn_param_grid]","3dc78767":"cv_result = []\nbest_estimators = []\nfor i in range(len(classifier)):\n    clf = GridSearchCV(classifier[i], param_grid=classifier_param[i], cv = StratifiedKFold(n_splits = 10), scoring = \"accuracy\", n_jobs = -1,verbose = 1)\n    clf.fit(X_train,y_train)\n    cv_result.append(clf.best_score_)\n    best_estimators.append(clf.best_estimator_)\n    print(cv_result[i])","35b9dbf0":"cv_results = pd.DataFrame({\"Cross Validation Means\":cv_result, \"ML Models\":[\"DecisionTreeClassifier\", \"SVM\",\"RandomForestClassifier\",\"LogisticRegression\",\"KNeighborsClassifier\"]})\ng = sns.barplot(\"Cross Validation Means\", \"ML Models\", data = cv_results)\ng.set_xlabel(\"Mean Accuracy\")\ng.set_title(\"Cross Validation Scores\")","553ea794":"votingC = VotingClassifier(estimators = [(\"dt\",best_estimators[0]),\n                                        (\"rfc\",best_estimators[2]),\n                                        (\"lr\",best_estimators[3])],\n                                        voting = \"soft\", n_jobs = -1)\nvotingC = votingC.fit(X_train, y_train)\nprint(accuracy_score(votingC.predict(X_test),y_test))","8775e55e":"test_survived = pd.Series(votingC.predict(test),name = \"Survived\").astype(int)\nresults = pd.concat([test_PassengerId,test_survived],axis = 1)\nresults.to_csv(\"titanic.csv\",index = False)","a6365d7b":"<a id = \"6\"><\/a><br>\n# Basic Data Analysis\n* Pclass - Survived\n* Sex -  Survived\n* SibSp - Survived\n* Parch - Survived","e4b0d455":"# Introduction\n1. [Load and Check Data](#1)\n1. [Variable Description](#2)\n    * [Univariate Variable Analysis](#3)\n        * [Categorical Variable Analysis](#4)\n        * [Numerical Variable Analysis](#5)\n1. [Basic Data Analysis](#6)\n1. [Outlier Detection](#7)\n1. [Missing Value](#8)\n    * [Find Missing Value](#9)\n    * [Fill Missing Value](#10)\n1. [Visualization](#11)\n    * [Correlation Between SibSp -- Parch -- Age -- Fare - Survived](#12)\n    * [SibSp -- Survived](#13)\n    * [Parch -- Survived](#14)\n    * [Pclass -- Survived](#15) \n    * [Age -- Survived](#16)\n    * [Pclass -- Survived -- Age](#17)\n    * [Embarked -- Sex -- Pclass -- Survived](#18)\n    * [Embarked -- Sex -- Fare -- Survived](#19)\n    * [Fill Missing: Age Feature](#20)\n1. [Feature Engineering](#21)\n    * [Name -- Title](#22)\n    * [Family Size](#23)\n    * [Embarked](#24)\n    * [Ticket](#25)\n    * [Pclass](#26)\n    * [Sex](#27)\n    * [Drop Passenger ID and Cabin](#28)\n1. [Modeling](#29) \n    * [Train Test Split](#30)\n    * [Simple Logistic Regression](#31)\n    * [Hyperparameter Tuning -- Grid Search -- Cross Validation](#32)\n    * [Ensemble Modeling](#33)\n    * [Prediction and Submission](#34)","3d2a5289":"<a id = \"10\"><\/a><br>\n## Fill Missing Value\n* Embarked has 2 missing value\n* Fare has only 1","72d06b36":"<a id = \"31\"><\/a><br>\n## Simple Logistic Regression","561f13d0":"<a id = \"33\"><\/a><br>\n## Ensemble Modeling","9b44110c":"* float64(2): Fare ve Age\n* int64(5): Pclass, sibsp, parch, passengerId and survived\n* object(5): Cabin, embarked, ticket, name and sex","80c2938d":"<a id = \"17\"><\/a><br>\n## Pclass -- Survived -- Age","a14ecc4d":"<a id = '5'><\/a>\n## Numerical Variable","955e17e2":"* Having a lot of SibSp have less chance to survive.\n* if sibsp == 0 or 1 or 2, passenger has more chance to survive.\n* we can consider a new feature describing these categories.","5616e595":"<a id = \"21\"><\/a><br>\n# Feature Engineering","bc371117":"<a id =\"7\"><\/a><br>\n# Outlier Detection","c157a2f8":"<a id = \"14\"><\/a><br>\n## Parch -- Survived","e6a954f0":"<a id = \"8\"><\/a><br>\n# Missing Value\n\n* Find Missing Value\n* Fill Missing Value","1d18eecc":"<a id = \"19\"><\/a><br>\n## Embarked -- Sex -- Fare -- Survived","90fb81c7":"<a id = \"34\"><\/a><br>\n## Prediction and Submission","68b50b96":"<a id = '2'><\/a>\n# Variable Description\n\n1. PassengerId: unique id number to each passenger\n1. Survived: passenger survive(1) or died(0)\n1. Pclass: passenger class\n1. Name: name\n1. Sex: gender of passenger \n1. Age: age of passenger\n1. SibSp: number of siblings\/spouses\n1. Parch: number of parents\/children\n1. Ticket: ticket number\n1. Fare: amount of money spent on ticket\n1. Cabin: cabin category\n1. Embarked: port where passenger embarked (C = Cherbourg, Q = Queenstown, S = Southhampton)","88e200e8":"<a id = \"16\"><\/a><br>\n## Age -- Survived","f28395db":"<a id = \"25\"><\/a><br>\n## Ticket","ca447eac":"<a id = \"22\"><\/a><br>\n## Name -- Title","d333bd5c":"<a id = \"12\"><\/a><br>\n## Correlation Between SibSp -- Parch -- Age -- Fare -- Survived","fe6c6944":"<a id = \"23\"><\/a><br>\n## Family Size","c1d9817d":"* Sibsp and parch can be used for new feature extraction with th = 3\n* Small families have more chance to survive.\n* There is a std in survival of passenger with parch = 3","2a74e2c7":"<a id = \"28\"><\/a><br>\n## Drop Passenger ID and Cabin","3c6e20e5":"* Pclass is important feature for model training","0e614762":"* 1st class passengers are older than 2nd, an 2nd is older than 3rd class.","0364d2b8":"Fare feature seems to have correlation with survived feature (0.26).","3034474b":"<a id = \"30\"><\/a><br>\n## Train Test Split","d2f9add0":"<a id = \"29\"><\/a><br>\n# Modeling","53f44c15":"* Female passengers have much better survival rate than males.\n* Males have better survival rate in pclass 3in C.\n* Embarked and sex will be used in training.","e5162149":"<a id = '3'><\/a>\n# Univariate Variable Analysis\n* Categorical Variable: Survived, Sex, Pclass, Embarked, Cabin, Name, Ticket, Sibsp and Parch\n* Numerical Variable: Fare, age and passengerId ","e74f0fa3":"* Sex is not informative for age prediction, age distribution seems to be same.","697fb2f1":"<a id = \"18\"><\/a><br>\n## Embarked -- Sex -- Pclass - Survived","8d8d66b1":"<a id = '1'><\/a>\n# Load and Check Data","c88bd525":"<a id = \"11\"><\/a><br>\n# Visulization","198311ea":"<a id = \"32\"><\/a><br>\n## Hyperparameter Tuning -- Grid Search -- Cross Validation\n\nWe will compare 5 ml classifier and evaluate mean accuracy of each of them by stratified cross validation.\n\n* Decision Tree\n* SVM\n* Random Forest\n* KNN\n* Logistic Regression","56102a50":"<a id = \"20\"><\/a><br>\n## Fill Missing: Age Feature","4243c89f":"<a id = \"9\"><\/a><br>\n## Find Missing Value","07644ceb":"<a id = \"13\"><\/a><br>\n## SibSp -- Survived","b796b47a":"<a id = \"15\"><\/a><br>\n## Pclass -- Survived","f9c7add7":"* Small families have more chance to survive than large families.","f7eb70f7":"<a id = \"27\"><\/a><br>\n## Sex","923c12c0":"<a id = '4'><\/a>\n## Categorical Variable","5423db2c":"* Passengers who pay higher fare have better survival. Fare can be used as categorical for training.","4fec233a":"<a id = \"24\"><\/a><br>\n## Embarked","3192df62":"* Age is not correlated with sex but it is correlated with parch, sibsp and pclass.","81935e31":"* Age <= 10 has a high survival rate,\n* Oldest passengers  (80) survived,\n* Large number of 20 years old did not survive,\n* Most passengers are in 15-35 age range,\n* Use age feature in training\n* Use age distribution for missing value of age","c1cfa200":"<a id = \"26\"><\/a><br>\n## Pclass"}}