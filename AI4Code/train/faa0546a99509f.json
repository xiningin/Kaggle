{"cell_type":{"d536980d":"code","1f12a647":"code","3a479cef":"code","2164a404":"code","88e7aec0":"code","b8799592":"code","ceaa7aff":"code","c8c28222":"code","68538a6d":"code","2aec9d84":"code","5063c8db":"code","bcf1655c":"code","34e6cc77":"code","05445408":"code","0eb2557b":"code","f855a614":"code","23c8b21e":"code","72426c23":"code","9b3a9be3":"code","c4999542":"code","c58a35ac":"code","3622959e":"code","5ef61239":"code","c74e5a70":"code","dd9e7fd4":"code","b5e67247":"code","93a1f8ff":"code","98982ee8":"code","81821498":"code","fe525654":"code","c10537f3":"code","86e71897":"code","41aa2041":"code","486d0dc1":"code","4a23d7e2":"code","6168d8b2":"code","3eea5997":"code","6d980204":"code","e383b2ad":"code","0dc303e8":"code","401480ec":"code","95b07b53":"code","5b12f2cd":"code","d4583821":"code","1e48392f":"code","6508bd2d":"code","fb48e21a":"code","1c38490f":"code","9d586792":"code","14de3655":"code","2af35b42":"code","5b1a3a7c":"code","d3a89b4c":"markdown","cd846009":"markdown","07400ce1":"markdown","2a7b03b3":"markdown","ccfcb7e0":"markdown","4bc26291":"markdown","a944dc3f":"markdown","3c76566c":"markdown"},"source":{"d536980d":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sys import path\n%matplotlib inline","1f12a647":"train = pd.read_csv('..\/input\/cs-training.csv')\ntest = pd.read_csv('..\/input\/cs-test.csv')\ndf = pd.concat([train, test], ignore_index=1)","3a479cef":"mask = df['SeriousDlqin2yrs'].notnull() # test\u90e8\u5206SeriousDlqin2yrs\u503c\u4e3a\u7a7a,\u53ef\u80fd\u5f71\u54cd\u90e8\u5206\u53d8\u91cf\u7684\u5206\u5e03","2164a404":"df.shape","88e7aec0":"df.head()","b8799592":"df = df.drop('Unnamed: 0', axis=1) # \u53bb\u6389\u91cd\u590d\u7684id\u5217","ceaa7aff":"# \u6837\u672c\u5e73\u5747\u8fdd\u7ea6\u7387\ndf.SeriousDlqin2yrs.mean()","c8c28222":"# \u68c0\u67e5\u7a7a\u503c\ndf.info()","68538a6d":"# \u68c0\u67e5MonthlyIncome\u7684\u5206\u5e03\nsns.distplot(df[df['MonthlyIncome'].notnull()]['MonthlyIncome'],\n            bins=20)","2aec9d84":"# \u53ef\u89c1MonthlyIncome\u5b58\u5728\u5927\u91cf\u7684outlier,\u6700\u597d\u7528\u4f17\u6570\u586b\u5145\u7a7a\u503c\ndf['MonthlyIncome'] = df['MonthlyIncome'].fillna(df.MonthlyIncome.median())","5063c8db":"# \u68c0\u67e5NumberOfDependents\u7684\u5206\u5e03\nsns.distplot(df[df['NumberOfDependents'].notnull()]['NumberOfDependents'],\n            bins=20)","bcf1655c":"# NumberOfDependents\u540c\u6837\u6709\u5927\u91cfoutlier\u800c\u4e1410\u4ee5\u4e0a\u7684dependant\u663e\u7136\u4e0d\u5408\u5e38\u7406\n# \u7a7a\u503c\u53ef\u4ee5\u7528\u5e73\u5747\u6570\u586b\u5145\ndf['NumberOfDependents'] = df['NumberOfDependents'].fillna(df.NumberOfDependents.mean())","34e6cc77":"# \u68c0\u67e5age\u9879\u7684\u5206\u5e03\ng = sns.FacetGrid(df[mask], col='SeriousDlqin2yrs')\ng.map(sns.distplot, 'age')","05445408":"# \u628aage\u5206\u7ec4\u540e\u68c0\u67e5\u5404\u7ec4\u5e73\u5747\u8fdd\u7ea6\u7387\nbins = np.arange(0, 120, 10)\ndf['age_grouped'] = pd.cut(df['age'], bins, right=0)\ngb = df[mask].groupby('age_grouped')['SeriousDlqin2yrs']\npd.concat([gb.count(), gb.mean()], axis=1)","0eb2557b":"# \u91cd\u65b0\u5206\u7ec4,\u5408\u5e76\u6837\u672c\u592a\u5c11\u6216\u8005\u8fdd\u7ea6\u7387\u8fc7\u4e8e\u63a5\u8fd1\u7684\u5206\u7ec4\nbins = [0, 30, 40, 50, 60, 70, 110]\nlabels = ['0-29', '30-39', '40-49', '50-59', '60-69', '70+']\ndf['age_grouped'] = pd.cut(df['age'], bins, right=0, labels=labels)\ngb = df[mask].groupby('age_grouped')['SeriousDlqin2yrs']\npd.concat([gb.count(), gb.mean()], axis=1)","f855a614":"sns.countplot(data=df, x='age_grouped', hue='SeriousDlqin2yrs')","23c8b21e":"# \u68c0\u67e5RevolvingUtilizationOfUnsecuredLines,DebtRatio\u4e24\u9879\ndf[['RevolvingUtilizationOfUnsecuredLines', 'DebtRatio']].describe()","72426c23":"# RevolvingUtilizationOfUnsecuredLines\u9879\u79bb\u6563\u5316\nbins = [0, 0.15, 0.30, 0.45, 0.60, 0.75, 0.90, 1.05, \n       df['RevolvingUtilizationOfUnsecuredLines'].max()]\nlabels = ['0-0.15', '0.15-0.30', '0.30-0.45', '0.45-0.60', '0.60-0.75', '0.75-0.90', '0.90-1.05', '1.05+']\n# \u4ee5\u4e0a\u5206\u7ec4\u662f\u6d4b\u8bd5\u8fc7\u591a\u6b21\u7684\u7ed3\u679c,\u6d4b\u8bd5\u8fc7\u7a0b\u8fd9\u91cc\u7701\u7565\ndf['ru_grouped'] = pd.cut(df['RevolvingUtilizationOfUnsecuredLines'], bins, right=0, labels=labels)\ngb = df[mask].groupby('ru_grouped')['SeriousDlqin2yrs']\npd.concat([gb.count(), gb.mean()], axis=1)","9b3a9be3":"# DebtRatio\u9879\u79bb\u6563\u5316\nbins = [0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 2.0, 5.0, 10.0, 20.0, 50.0, 100,\n       df['DebtRatio'].max()]\ndf['dr_grouped'] = pd.cut(df['DebtRatio'], bins, right=0)\ngb = df[mask].groupby('dr_grouped')['SeriousDlqin2yrs']\npd.concat([gb.count(), gb.mean()], axis=1)","c4999542":"sns.distplot(df['DebtRatio'].apply(np.log1p)) # \u53d6\u5bf9\u6570\u4ee5\u540e\u957f\u5c3e\u90e8\u5206\u4e00\u76ee\u4e86\u7136","c58a35ac":"df['dr_log'] = df['DebtRatio'].apply(np.log1p)\nbins = [0, 0.3, 0.6, 1.0, 3.0,  \n       df['dr_log'].max()]\nlabels = ['0-0.3', '0.3-0.6', '0.6-1.0', '1.0-3.0', '3.0+']\n# \u4ee5\u4e0a\u5206\u7ec4\u540c\u6837\u662f\u6d4b\u8bd5\u8fc7\u591a\u6b21\u7684\u7ed3\u679c,\u6d4b\u8bd5\u8fc7\u7a0b\u7701\u7565\ndf['dr_grouped'] = pd.cut(df['dr_log'], bins, right=0, labels=labels)\ngb = df[mask].groupby('dr_grouped')['SeriousDlqin2yrs']\npd.concat([gb.count(), gb.mean()], axis=1)","3622959e":"# \u68c0\u67e5DaysPastDue\u7684\u4e09\u5217\npd_cols = ['NumberOfTime30-59DaysPastDueNotWorse',\n          'NumberOfTime60-89DaysPastDueNotWorse',\n          'NumberOfTimes90DaysLate']\ndf[pd_cols].describe()","5ef61239":"# \u8ba1\u7b97\u6709\u903e\u671f\u8bb0\u5f55\u7684\u4eba\u6570\u5360\u6bd4\ndf[pd_cols][df[pd_cols]!=0].count()\/df.count().max()","c74e5a70":"# \u68c0\u67e5\u8fd9\u4e09\u5217\u7684\u76f8\u5173\u6027\ndf[pd_cols].corr()","dd9e7fd4":"# \u5c1d\u8bd5\u5c06\u8fd9\u4e09\u5217\u7b80\u5316\u6210\u4e00\u4e2a\u53d8\u91cf:\u662f\u5426\u670990+\u4ee5\u4e0a\u7684\u903e\u671f\u8bb0\u5f55\ndf['pd_90+'] = (df['NumberOfTimes90DaysLate']>0).astype(int)\ndf.groupby('pd_90+')['SeriousDlqin2yrs'].mean()","b5e67247":"df['MonthlyIncome'].describe()","93a1f8ff":"# \u540c\u6837\u662f\u6781\u503c\u5f88\u591a,\u53d6\u5bf9\u6570\u540e\u518d\u770b\u4e00\u4e0b\u5206\u5e03\ndf['income_log'] = (df['MonthlyIncome']\/10000).apply(np.log1p)\nsns.distplot(df['income_log'])","98982ee8":"# \u68c0\u67e5NumberOfOpenCreditLinesAndLoans, NumberRealEstateLoansOrLines\u4e24\u5217\nnum_cols = ['NumberOfOpenCreditLinesAndLoans', 'NumberRealEstateLoansOrLines']\ndf[num_cols].describe()","81821498":"sns.relplot(data=df, x=num_cols[0], y=num_cols[1], hue='SeriousDlqin2yrs')","fe525654":"# \u5bf9NumberOfOpenCreditLinesAndLoans\u5206\u7ec4\nbins = [0, 2, 4, 6, 10, 14,\n       df['NumberOfOpenCreditLinesAndLoans'].max()]\nlabels = ['0-1', '2-3', '4-5', '6-9', '10-13', '14+']\ndf['num_oc_grouped'] = pd.cut(df['NumberOfOpenCreditLinesAndLoans'], bins, right=0, labels=labels)\ngb = df[mask].groupby('num_oc_grouped')['SeriousDlqin2yrs']\npd.concat([gb.count(), gb.mean()], axis=1)","c10537f3":"# \u5bf9NumberRealEstateLoansOrLines\u5206\u7ec4\nbins = [0, 1, 3, \n       df['NumberRealEstateLoansOrLines'].max()]\nlabels = ['0', '1-2', '3+']\ndf['num_re_grouped'] = pd.cut(df['NumberRealEstateLoansOrLines'], bins, right=0, labels=labels)\ngb = df[mask].groupby('num_re_grouped')['SeriousDlqin2yrs']\npd.concat([gb.count(), gb.mean()], axis=1)","86e71897":"# \u5bf9NumberOfDependents\u5206\u7ec4\nbins = [0, 1, 2, 4, \n       df['NumberOfDependents'].max()]\nlabels = ['0', '1', '2-3', '4+']\ndf['num_dep_grouped'] = pd.cut(df['NumberOfDependents'], bins, right=0, labels=labels)\ngb = df[mask].groupby('num_dep_grouped')['SeriousDlqin2yrs']\npd.concat([gb.count(), gb.mean()], axis=1)","41aa2041":"# \u820d\u53bb\u6ca1\u6709\u7528\u5230\u7684\u53d8\u91cf\ndf1 = df.drop(['RevolvingUtilizationOfUnsecuredLines',\n              'age',\n              'DebtRatio',\n              'MonthlyIncome',\n              'NumberOfDependents',\n              'dr_log']\n              + num_cols + pd_cols, axis=1)\ndf1.columns","486d0dc1":"df2 = pd.get_dummies(df1, drop_first=True)\ndf2.columns","4a23d7e2":"# \u7531\u4e8e\u6574\u4e2a\u6837\u672c\u4e2d\u8fdd\u7ea6\u6837\u672c\u5360\u6bd4\u4ec5\u67096-7%,\u5728\u8bad\u7ec3\u6a21\u578b\u65f6\u5e94\u8be5\u5bf9\u8fdd\u7ea6\u6837\u672cup sample\u5904\u7406\nX0 = df2[df['SeriousDlqin2yrs']==0].drop('SeriousDlqin2yrs', axis=1).values\nX1 = df2[df['SeriousDlqin2yrs']==1].drop('SeriousDlqin2yrs', axis=1).values\ny0 = df2[df['SeriousDlqin2yrs']==0]['SeriousDlqin2yrs'].values\ny1 = df2[df['SeriousDlqin2yrs']==1]['SeriousDlqin2yrs'].values\nprint(X0.shape, X1.shape, y0.shape, y1.shape)","6168d8b2":"X1_upsample = np.ndarray(X0.shape)\ny1_upsample = np.ndarray(y0.shape)\nfor i in np.arange(len(y0)):\n    idx = np.random.randint(0, y1.shape[0])\n    X1_upsample[i] = (X1[idx])\n    y1_upsample[i] = (y1[idx])\nprint(X1_upsample.shape, y1_upsample.shape)","3eea5997":"X = np.concatenate([X0, X1_upsample])\ny = np.concatenate([y0, y1_upsample])\nprint(X.shape, y.shape)","6d980204":"#X = df2[mask].drop('SeriousDlqin2yrs', axis=1).values\n#y = df2[mask]['SeriousDlqin2yrs'].values\n#print(X.shape, y.shape)","e383b2ad":"y.sum()","0dc303e8":"from sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.metrics import f1_score, roc_auc_score, confusion_matrix\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LogisticRegression","401480ec":"#scaler = StandardScaler().fit(X)\n#Xt = scaler.transform(X)","95b07b53":"X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.3, shuffle=True)","5b12f2cd":"# GridSearch\u8fd0\u884c\u65f6\u95f4\u8fc7\u957f,\u4ee3\u7801\u5982\u4e0b\n#\n# params_LR = {'C': [0.01, 0.03, 0.1, 0.3, 1, 3, 10],\n#             'solver': ['lbfgs', 'liblinear']}\n# gs = GridSearchCV(LogisticRegression(max_iter=1000), \n#                   param_grid = params_LR,\n#                   scoring = 'f1',\n#                   cv=5).fit(X_train, y_train)\n# gs.best_params_","d4583821":"model_LR = LogisticRegression(C=3, solver='lbfgs').fit(X_train, y_train)","1e48392f":"print('F1 Score: %.6f' % f1_score(y_valid, model_LR.predict(X_valid)))\nprint('AUC Score: %.6f' %  roc_auc_score(y_valid, model_LR.predict(X_valid)))\nprint('Confusion Matrix: \\n', confusion_matrix(y_valid, model_LR.predict(X_valid)))","6508bd2d":"# \u52a0\u5165XGBoost\u6d4b\u8bd5\nimport xgboost as xgb\nparams_xgb = {'max_depth': 6,\n              'eta': 1,\n              'silent': 1,\n              'objective': 'binary:logistic',\n              'eval_matric': 'f1'}\n\n# \u501f\u7528GaryMulder\u7684\u53c2\u6570:\nparams_xgb2 = {'max_depth': 5,\n               'eta': 0.025,\n               'silent':1,\n               'objective': 'binary:logistic',\n               'eval_matric': 'auc',\n               'minchildweight': 10.0,\n               'maxdeltastep': 1.8,\n               'colsample_bytree': 0.4,\n               'subsample': 0.8,\n               'gamma': 0.65,\n               'numboostround' : 391}","fb48e21a":"dtrain = xgb.DMatrix(X_train, y_train, feature_names=df2.columns.drop('SeriousDlqin2yrs'))\ndvalid = xgb.DMatrix(X_valid, y_valid, feature_names=df2.columns.drop('SeriousDlqin2yrs'))\nevals = [(dtrain, 'train'), (dvalid, 'valid')]\nmodel_xgb = xgb.train(params_xgb2, dtrain, 1000, evals, early_stopping_rounds=100);","1c38490f":"model_xgb.dump_model('xgb_v1')","9d586792":"X_test = df2[df['SeriousDlqin2yrs'].isnull()].drop('SeriousDlqin2yrs', axis=1).values\nX_test.shape","14de3655":"dtest = xgb.DMatrix(X_test, feature_names=df2.columns.drop('SeriousDlqin2yrs'))\ny_test = model_xgb.predict(dtest)","2af35b42":"entry = pd.DataFrame()\nentry['ID'] = np.arange(1, len(y_test)+1)\nentry['Probability'] = y_test\n","5b1a3a7c":"entry.to_csv('entry02.csv', header=True, index=False)","d3a89b4c":"## \u6570\u636e\u6e05\u6d17","cd846009":"# KAGGLE GiveMeSomeCredit COMPETITION\n\n\u6765\u6e90\uff1ahttps:\/\/www.kaggle.comcGiveMeSomeCredit","07400ce1":"\u53ef\u4ee5\u770b\u5230\u503c\u51e0\u4e4e\u90fd\u662f0,\u8bf4\u660e\u7edd\u5927\u90e8\u5206\u5ba2\u6237\u6ca1\u670930+\u7684\u903e\u671f\u8bb0\u5f55,\u4e5f\u6bd4\u8f83\u7b26\u5408\u5e38\u7406","2a7b03b3":"\u53ef\u4ee5\u770b\u5230\u8fd9\u4e09\u4e2a\u53d8\u91cf\u7684\u76f8\u5173\u5ea6\u6781\u9ad8,\u5efa\u6a21\u65f6\u53ef\u4ee5\u53ea\u7528\u5176\u4e2d\u7684\u4e00\u4e2a","ccfcb7e0":"\u53ef\u4ee5\u770b\u5230,DebtRatio\u53d8\u91cf\u5373\u4f7f\u79bb\u6563\u5316\u4e4b\u540e\u8fd8\u6709\u5927\u91cf\u503c\u5206\u5e03\u5728100+\u7684\u957f\u5c3e\u533a\u57df,\u5206\u7ec4\u7684\u6548\u679c\u4e0d\u597d\n\n\u56e0\u6b64\u5c1d\u8bd5\u5148\u53d6\u53d6\u5bf9\u6570\u518d\u5206\u7ec4\u7684\u65b9\u5f0f","4bc26291":"\u4ece\u5e38\u8bc6\u8003\u8651,\u8fd9\u4e24\u4e2a\u53d8\u91cf\u90fd\u4e0d\u5e94\u8be5\u5927\u5e45\u8d85\u8fc7100%,\u6240\u4ee5\u6781\u503c\u6700\u597d\u5904\u7406\u4e00\u4e0b\n\n\u8fd9\u91cc\u9009\u62e9\u76f4\u63a5\u628a\u6570\u503c\u8fdb\u884c\u5206\u7ec4\u7136\u540e\u7528\u751f\u6210\u7684dummy variable\u4ee3\u66ff\u539f\u503c\u7684\u65b9\u5f0f","a944dc3f":"\u5148\u5e94\u7528\u7b80\u5355\u7684\u903b\u8f91\u56de\u5f52\u6a21\u578b\u6d4b\u8bd5\u4e00\u4e0b","3c76566c":"MonthlyIncome, NumberOfDependants\u4e24\u9879\u6709\u7a7a\u503c"}}