{"cell_type":{"9813a368":"code","a931c434":"code","ee5a338d":"code","3f73c3fd":"code","c0f5536a":"code","ed16da23":"code","dfc7df5a":"code","e09f2d02":"code","94ed40ee":"code","92c727ca":"code","2a9839bc":"code","b3fce563":"code","cee52c94":"code","1b950783":"code","1586e643":"code","e28ed2aa":"code","c3c66a78":"code","af944f63":"code","5e19f7c0":"code","fe21aa72":"code","75590b09":"code","be3b7f63":"code","81993c60":"code","4b32ec2d":"code","d7344847":"code","71a01a74":"code","7d0ae91d":"code","3d3eac9c":"code","a9922ef8":"code","ce570ce5":"code","6d270940":"code","963d4bfb":"code","1c9de560":"code","e5950cfe":"code","f3f914fc":"code","2a3f3090":"code","1a9979af":"code","14618076":"code","e9fa0bb7":"code","702ff315":"code","a3e0a266":"code","1ca1c265":"code","5a4cdfcb":"code","8e1979a9":"code","935e497a":"code","a1125609":"code","6ee5f3cc":"code","1ce0a90f":"code","8fb966fa":"code","0eabbdaf":"code","c32c2cae":"code","ebe5d115":"code","5e15d489":"code","8cc19e92":"code","4a51e8a2":"code","08c06bcb":"code","174d8996":"code","701ce93f":"code","56b6c321":"code","eef9f1dd":"code","dff15579":"code","44aea3da":"code","664d8f71":"code","f759ebf6":"code","ad224f8e":"code","3d5ac8c5":"code","7657eb5f":"code","07367e24":"markdown","66793e5c":"markdown","01406baf":"markdown","36b26d18":"markdown","387594ed":"markdown","e121eb8d":"markdown","d9588f50":"markdown","759271e4":"markdown","fbdc9918":"markdown"},"source":{"9813a368":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nepl = pd.read_csv('..\/input\/epl-results-19932018\/EPL_Set.csv')\n\nepl","a931c434":"epl_data = epl.dropna()\n\nepl_data","ee5a338d":"epl_data.describe(include=\"all\")","3f73c3fd":"# Make varaible name shorter\n\nepl = epl_data","c0f5536a":"epl_home = epl['HomeTeam']\nepl_away = epl['AwayTeam']","ed16da23":"'''\nkey = team_name \nvalue = total_games\n'''\nteam_total_dic = {}\nteam_home_dic = {}\nteam_away_dic = {}","dfc7df5a":"team_list = list(epl['HomeTeam'].unique())","e09f2d02":"'''\n\nTotal home games\nTotal away games\n\nTotal gmaes = Total home games + Total away games\n\n'''\n\nfor team in team_list:\n    home_games_cnt = 0\n\n    for home in epl_home:\n        if home == team:\n            home_games_cnt += 1\n    \n    team_home_dic[team] = home_games_cnt\n    \nsorted(team_home_dic.items(), key=lambda team : team[1], reverse=True)","94ed40ee":"for team in team_list:\n    away_games_cnt = 0\n\n    for away in epl_away:\n        if away == team:\n            away_games_cnt += 1\n    \n    team_away_dic[team] = away_games_cnt\n    \nsorted(team_away_dic.items(), key=lambda team : team[1], reverse=True)","92c727ca":"# team is key of dic\nfor team in team_home_dic:\n    team_total_dic[team] = team_home_dic[team] + team_away_dic[team]\n\n\n# team_total_dic = team_home_dic + team_away_dic\n\nsorted(team_total_dic.items(), key=lambda team : team[1], reverse=True)","2a9839bc":"# Full time result\n\nepl_ftr = epl['FTR']","b3fce563":"# Get total wins each teams\n\nteam_win_dic = {}\n\nfor team in team_list:\n    win_cnt = 0\n    \n    # The index had been cleared, so add 924 to access pre index\n    for idx, ftr in enumerate(epl_ftr):\n        if ftr == 'H' and epl['HomeTeam'][idx + 924] == team:\n            win_cnt += 1\n        elif ftr == 'A' and epl['AwayTeam'][idx + 924] == team:\n            win_cnt += 1\n               \n    team_win_dic[team] = win_cnt\n\nsorted(team_win_dic.items(), key=lambda team : team[1], reverse=True)","cee52c94":"# Get each teams winning rate\n\n\ntotal_win_rate = {}\n\nfor team in team_list:\n\n    total_win_rate[team] = round((team_win_dic[team] \/ team_total_dic[team]) * 100, 2)\n\nsorted(total_win_rate.items(), key=lambda team : team[1], reverse=True)","1b950783":"# Get home wins each teams\n\nhome_win_cnt = {}\nhome_win_rate = {}\n\n\nfor team in team_list:\n    win_cnt = 0\n    \n    # The index had been cleared, so add 924 to access pre index\n    for idx, ftr in enumerate(epl_ftr):\n        if ftr == 'H' and epl['HomeTeam'][idx + 924] == team:\n            win_cnt += 1\n               \n    home_win_cnt[team] = win_cnt\n\n\n\nfor team in team_list:\n\n    home_win_rate[team] = round((home_win_cnt[team] \/ team_home_dic[team]) * 100, 2)\n\nsorted(home_win_rate.items(), key=lambda team : team[1], reverse=True)","1586e643":"# Get away wins each teams\n\naway_win_cnt = {}\naway_win_rate = {}\n\n\nfor team in team_list:\n    win_cnt = 0\n    \n    # The index had been cleared, so add 7582 to access pre index\n    for idx, ftr in enumerate(epl_ftr):\n        if ftr == 'A' and epl['AwayTeam'][idx + 924] == team:\n            win_cnt += 1\n               \n    away_win_cnt[team] = win_cnt\n\n\n\nfor team in team_list:\n\n    away_win_rate[team] = round((away_win_cnt[team] \/ team_away_dic[team]) * 100, 2)\n\nsorted(away_win_rate.items(), key=lambda team : team[1], reverse=True)","e28ed2aa":"# Is there any team have been more wins in away?\n\nstrong_away_team = False\nprint('Teams that strong in when away:')\n\nfor team in team_list:\n    if away_win_rate[team] > home_win_rate[team]:\n        print(team)\n        strong_away_team = True\n       \n\nif strong_away_team == False:\n    print(\"No such team\")\n# There isn`t...","c3c66a78":"# Have to preprocessing\n\n# Conver float to int\n\nepl.FTAG = epl.FTAG.astype(int)\nepl.FTHG = epl.FTHG.astype(int)\nepl.HTAG = epl.HTAG.astype(int)\nepl.HTHG = epl.HTHG.astype(int)","af944f63":"# Visualization\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n%matplotlib inline\nsns.set()\n\nepl.hist(figsize=(21.7, 13.27))","5e19f7c0":"print('FTAG : ',epl['FTAG'].sum())\nprint('FTHG : ',epl['FTHG'].sum())\nprint('HTAG : ',epl['HTAG'].sum())\nprint('HTHG : ',epl['HTHG'].sum())","fe21aa72":"epl.boxplot(figsize=(8,8))","75590b09":"sns.boxplot(data=epl)","be3b7f63":"total_win_rate = pd.DataFrame.from_dict(total_win_rate, orient='index')\n\ntotal_win_rate.columns = ['Win rate']","81993c60":"# Modify total_win_rate by descending in Win rate\n\ntotal_win_rate_desc = total_win_rate.sort_values(\"Win rate\", ascending=False)\ntotal_win_rate_desc","4b32ec2d":"# Divide teams by win rate \n# top, mid, low\n\ntop = total_win_rate_desc[:16]\n\nmid = total_win_rate_desc[16:32]\n\nlow =total_win_rate_desc[32:48]","d7344847":"top.plot.bar()","71a01a74":"mid.plot.bar()","7d0ae91d":"low.plot.bar()","3d3eac9c":"# Transpose for get easily team list\n\ntop_t = top.T\nmid_t = mid.T\nlow_t = low.T","a9922ef8":"top_team_list = []\n\nfor team in top_t:\n    top_team_list.append(team)\n    \ntop_team_list","ce570ce5":"mid_team_list = []\n\nfor team in mid_t:\n    mid_team_list.append(team)\n    \nmid_team_list","6d270940":"low_team_list = []\n\nfor team in low_t:\n    low_team_list.append(team)\n    \nlow_team_list","963d4bfb":"epl['HTR'].value_counts(normalize=True)","1c9de560":"epl['FTR'].value_counts(normalize=True)","e5950cfe":"epl['FTR'].value_counts(normalize=True)","f3f914fc":"sns.countplot(y=epl['HTR'])","2a3f3090":"sns.countplot(y=epl['FTR'])","1a9979af":"# Mean of HTHG and HTAG \n\nprint(epl['HTHG'].groupby(epl['HTR']).mean(),'\\n\\n', epl['HTAG'].groupby(epl['HTR']).mean())","14618076":"epl['HTHG'].groupby(epl['HTR']).mean().plot.bar()","e9fa0bb7":"epl['HTAG'].groupby(epl['HTR']).mean().plot.bar()","702ff315":"sns.countplot(epl['HTHG'], hue=epl['HTR'])","a3e0a266":"sns.countplot(epl['HTAG'], hue=epl['HTR'])","1ca1c265":"sns.countplot(epl['FTHG'], hue=epl['FTR'])","5a4cdfcb":"sns.countplot(epl['FTAG'], hue=epl['FTR'])","8e1979a9":"# Drop the non valued columns\n\nepl_prep = epl.drop(['Div'], axis=1)\nepl_scatt = epl.drop(['Div'], axis=1)","935e497a":"from sklearn import preprocessing\n\nle_hda = preprocessing.LabelEncoder()\nle_hda.fit(epl_prep['FTR'])\nle_hda_pred = le_hda.transform(epl_prep['FTR'])","a1125609":"epl_prep.insert(0, 'Predicted', le_hda_pred)","6ee5f3cc":"epl_prep","1ce0a90f":"le_hda_htr = le_hda.transform(epl_prep['HTR'])\nle_hda_ftr = le_hda.transform(epl_prep['FTR'])\n\nepl_prep['HTR'] = le_hda_htr\nepl_prep['FTR'] = le_hda_ftr","8fb966fa":"le_date = preprocessing.LabelEncoder()\nle_date.fit(epl_prep['Date'])\n\nle_date = le_date.transform(epl_prep['Date'])\n\nepl_prep['Date'] = le_date","0eabbdaf":"le_ssn = preprocessing.LabelEncoder()\nle_ssn.fit(epl_prep['Season'])\n\nle_ssn = le_ssn.transform(epl_prep['Season'])\n\nepl_prep['Season'] = le_ssn","c32c2cae":"# Encoidng the team top, mid, low\n\n'''\n\ntop_team_list 0\nmid_team_list 1\nlow_team_list 2\n\n'''\n\nfor team in epl_prep['HomeTeam']:\n    for top in top_team_list:\n        if team == top:\n            epl_prep['HomeTeam'] = np.where(epl_prep.HomeTeam == top, 0, epl_prep.HomeTeam)\n\n    for mid in mid_team_list:\n        if team == mid:\n            epl_prep['HomeTeam'] = np.where(epl_prep.HomeTeam == mid, 1, epl_prep.HomeTeam)\n            \n    for low in low_team_list:\n        if team == low:\n            epl_prep['HomeTeam'] = np.where(epl_prep.HomeTeam == low, 2, epl_prep.HomeTeam)\n\n\n\n\nfor team in epl_prep['AwayTeam']:\n    for top in top_team_list:\n        if team == top:\n            epl_prep['AwayTeam'] = np.where(epl_prep.AwayTeam == top, 0, epl_prep.AwayTeam)\n\n    for mid in mid_team_list:\n        if team == mid:\n            epl_prep['AwayTeam'] = np.where(epl_prep.AwayTeam == mid, 1, epl_prep.AwayTeam)\n            \n    for low in low_team_list:\n        if team == low:\n            epl_prep['AwayTeam'] = np.where(epl_prep.AwayTeam == low, 2, epl_prep.AwayTeam)\n","ebe5d115":"# Delet the FTR, its the same as 'Predicted' attribute\n\nepl_prep = epl_prep.drop(['FTR'], axis=1)","5e15d489":"# Date is too specific attribute so drop it\n\nepl_prep = epl_prep.drop(['Date'], axis=1)","8cc19e92":"# FTHG and FTAG is not in frist half so drop it\n\nepl_prep = epl_prep.drop(['FTHG'], axis=1)\nepl_prep = epl_prep.drop(['FTAG'], axis=1)","4a51e8a2":"# Categorized data (numerical)\n\nepl_prep","08c06bcb":"from sklearn.model_selection import train_test_split\n\n# Make train_test_split\n\nepl_train = epl_prep.iloc[:, epl_prep.columns != 'Predicted']\nepl_test = epl_prep.iloc[:, epl_prep.columns == 'Predicted']\n\n\nX_train, X_test, y_train, y_test = train_test_split(epl_train,\n                                                     epl_test,\n                                                     test_size = 0.20, \n                                                     random_state = 42)","174d8996":"X_train, X_val, y_train, y_val = train_test_split(X_train,\n                                                   y_train,\n                                                   test_size = 0.25, \n                                                   random_state = 42)","701ce93f":"from sklearn.ensemble import RandomForestClassifier\n\n# Validation check\n\nrf_v = RandomForestClassifier(criterion='gini', \n                             n_estimators=1000,\n                             min_samples_split=2,\n                             min_samples_leaf=10,\n                             max_features='auto',\n                             oob_score=True,\n                             random_state=42,\n                             n_jobs=-1)\n\nrf_v.fit(X_train, y_train.values.ravel())\nprint(\"OOB Score : %.4f\" % rf_v.oob_score_)\nscore = rf_v.score(X_val, y_val)\nprint(\"Score : \", score)","56b6c321":"# Test data check\n\nrf = RandomForestClassifier(criterion='gini', \n                             n_estimators=1000,\n                             min_samples_split=2,\n                             min_samples_leaf=10,\n                             max_features='auto',\n                             oob_score=True,\n                             random_state=42,\n                             n_jobs=-1)\n\nrf.fit(X_train, y_train.values.ravel())\nprint(\"OOB Score : %.4f\" % rf.oob_score_)\nscore = rf.score(X_test, y_test)\nprint(\"Score : \", score)","eef9f1dd":"# Get the best parameters\n\n# -- This take some minutes, so run it if you want --\n\n# from sklearn.model_selection import GridSearchCV\n# from sklearn.ensemble import RandomForestClassifier\n\n\n# param_grid = { \"criterion\" : [\"gini\", \"entropy\"], \"min_samples_leaf\" : [1, 5, 10], \"min_samples_split\" : [2, 4, 10, 12, 16], \"n_estimators\": [50, 100, 400, 700, 1000]}\n\n# gs = GridSearchCV(estimator=rf, param_grid=param_grid, scoring='accuracy', cv=3, n_jobs=-1)\n\n# gs = gs.fit(X_train, y_train.values.ravel())\n\n# print(gs.best_score_)\n\n# print(gs.best_params_)\n\n# print(gs.cv_results_)\n\n\n# -- This is the results --\n\n# -> 0.648048048048048\n\n# -> {'criterion': 'gini', 'min_samples_leaf': 10, 'min_samples_split': 2, 'n_estimators': 1000}\n\n# -> {'mean_fit_time': array([0.32810688, 0.55880944, 2.31270464, 4.24339898, 5.48761559, ...","dff15579":"plt.scatter(epl_prep['HTHG'],\n            \n            epl_prep['HTAG'],\n            \n            alpha=0.42)\n\nplt.xlabel('Half Time Home Goal', fontsize=14)\nplt.ylabel('Half Time Away Goal', fontsize=14)\nplt.legend()","44aea3da":"sns.scatterplot(x='HTHG', \n\n                y='HTAG', \n\n                hue='HTR',\n                \n                s=90,\n\n                style='FTR',\n\n                data=epl_scatt)\n\nplt.show()","664d8f71":"sns.scatterplot(x='HTHG', \n\n                y='FTHG', \n\n                hue='HTR',\n                \n                s=90,\n\n                style='FTR',\n\n                data=epl_scatt)\n\nplt.show()","f759ebf6":"sns.scatterplot(x='HomeTeam', \n\n                y='HTHG', \n\n                hue='HTR',\n                \n                s=90,\n\n                style='FTR',\n\n                data=epl_scatt)\n\nsns.set(font_scale=0.4)\nsns.set(rc={'figure.figsize':(1001.7,800.27)})\n\n\nplt.show()","ad224f8e":"# Importance of attributes\n\nepl_imp = pd.concat((pd.DataFrame(epl_prep.iloc[:, 1:].columns, columns = ['Attribute']), \n          pd.DataFrame(rf.feature_importances_, columns = ['Importance'])),    \n          axis = 1).sort_values(by='Importance', ascending=False)\n\nepl_imp","3d5ac8c5":"# Ascending importance\n\nepl_imp.sort_values('Importance', ascending=True, inplace=True)","7657eb5f":"epl_imp.plot(kind='barh', x='Attribute', y='Importance', legend=False, figsize=(6, 10))\n\nplt.title('Random forest feature importance', fontsize = 24)\nplt.xlabel('')\nplt.ylabel('')\nplt.xticks([], [])\nplt.yticks(fontsize=20)\nplt.show()","07367e24":"# First half and full time\n\n- In the first half, draws were the most common, but overall results were the most likely to be won by the home team.","66793e5c":"## Data from 1995 to 2018 show no strong team on Away","01406baf":"# Preprocessing\n\nMake epl_prep for prototype","36b26d18":"# Visualiztaion","387594ed":"## There are more goals in team on home ","e121eb8d":"## In first half goal \n\nHome\/Away 0 ~ 1\n\n## Goals on full time\n\nHome team in 1 ~ 2\n\nAway team in 0 ~ 2\n\n\n## The max of the goals are in home team\n\n","d9588f50":"# HTR, FTR ratio","759271e4":"# Conclusions\n\nData about the winning team in the first half can be used to predict the game to some extent.\n\nCan predict the game result by the first half, a little, but more attributes are needed.","fbdc9918":"# So it is more advantages in home team"}}