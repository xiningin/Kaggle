{"cell_type":{"7d15496e":"code","aa39216f":"code","b6ad51f6":"code","eb151f5f":"code","c4d1e59d":"code","5fe4389b":"code","676d89ff":"code","af9046c7":"code","6740b0bb":"code","69e4ae5b":"code","4cc2e984":"code","f11fa5af":"code","3ff35e93":"code","54f74a15":"code","73eca7bb":"code","b8c4af01":"code","b0eccff5":"code","0f359350":"code","ce25dbff":"code","4fbc5535":"code","e6d70472":"code","33de5645":"code","ac7f2ecd":"code","478a02c9":"code","f96f35ee":"code","3e5f6ba8":"code","afa5d5b8":"code","de887885":"code","5d86f0db":"code","88ce2292":"code","756415db":"code","ad680228":"code","476db351":"code","48cb3548":"code","45db7513":"code","56090900":"code","1fb4ae3f":"code","96099bf2":"code","f072bb40":"code","37cf02df":"code","e6436743":"code","31f6d09e":"code","f7abe3cc":"code","5b508fd1":"code","5a5a6e32":"code","8ff41b14":"code","dfe46e5e":"code","afc8782e":"code","3503fd8e":"code","3cdf5f65":"code","24ab6c0c":"code","d611fcd9":"code","cb6bc126":"code","0c8f0285":"code","2fb0e0a7":"code","de5d376f":"code","2b30f109":"code","1cc4bf4a":"code","ca939717":"code","fa4e1e50":"code","53c697fe":"code","bfaed062":"code","9b1495b2":"code","3e248d5c":"code","f781f32a":"code","81752e1b":"code","7b6ca67c":"code","23db1323":"code","9a697145":"code","54c4b096":"code","80b1ec7f":"code","51320b85":"code","66f4a4af":"code","c751de9e":"code","f6400e4a":"code","c39d5ade":"code","ccda0f58":"code","033e179e":"code","1829316c":"code","fa9323fc":"code","aa560445":"code","6a46c6c8":"code","f89ddb74":"code","18fd6c90":"code","31e757f0":"code","92ec9fff":"code","327ddb25":"code","cf2daa98":"code","84918c7c":"code","659e0910":"code","c1d6ebdf":"code","d8ad3fa1":"code","72ca32d4":"code","c5010fd7":"code","fe0e4bf8":"code","1c4daee0":"code","a4000be1":"code","c06f4407":"code","be2da4f6":"code","78fddbb4":"code","71035754":"code","aec9b9df":"code","17ee10d4":"code","8643abe4":"code","c5a2359a":"code","eb0b4e7b":"code","0ed9ae7f":"code","2c248b25":"code","c45797db":"code","d74532e8":"code","2f3cc6fa":"code","a037e8b5":"code","15fafb47":"code","e188e331":"code","5ab9f065":"code","fa4ef62f":"code","01122295":"code","a2877b6e":"code","f48089d0":"code","4d753d60":"code","d3ffb9a4":"code","289a2346":"code","821333c4":"code","cc63dc7c":"code","a218ee81":"code","1d898bb1":"code","f6782aa0":"code","4913fa32":"code","1c78b383":"code","186a0710":"code","05ff8f68":"code","94e14457":"code","7159d37b":"code","91ba7340":"code","65d22e40":"code","a6930353":"code","768403f8":"code","04d69c0a":"code","47c27113":"code","cd1a5e7b":"markdown","b582ddca":"markdown","9f45ea1f":"markdown","71744747":"markdown","ee46c11d":"markdown","c09eb76d":"markdown","12baeb14":"markdown","247bb676":"markdown","250083d3":"markdown","4ff74e62":"markdown","be3f0cb9":"markdown","33fc9e7b":"markdown","99ff772b":"markdown","0ec404b2":"markdown","525cc6af":"markdown","0792d951":"markdown","3506e0a1":"markdown","0626f516":"markdown","74874eaa":"markdown","9170e255":"markdown","cca592d2":"markdown","f043f41b":"markdown","9862e627":"markdown","f8f7b596":"markdown","49162fc6":"markdown","0582714f":"markdown","074d49ac":"markdown","09b853d5":"markdown","633e43b0":"markdown","6cea22b9":"markdown"},"source":{"7d15496e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-whitegrid\")\nimport seaborn as sns\nfrom collections import Counter\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","aa39216f":"train_df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_PassengerId=test_df[\"PassengerId\"]","b6ad51f6":"train_df.columns","eb151f5f":"train_df.head()","c4d1e59d":"train_df.describe()","5fe4389b":"train_df.info()","676d89ff":"def bar_plot(variable):\n    \"\"\"\n    input = variable\n    output=barplot & value\n    \"\"\"\n    var =train_df[variable]\n    varValue=var.value_counts()\n    plt.figure(figsize=(9,3))\n    plt.bar(varValue.index, varValue)\n    plt.xticks(varValue.index, varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}:\\n{}\".format(variable,varValue))","af9046c7":"category1 =[\"Survived\",\"Sex\",\"Pclass\",\"Embarked\",\"SibSp\",\"Parch\"]\nfor c in category1:\n    bar_plot(c)","6740b0bb":"category2 = [\"Cabin\",\"Name\",\"Ticket\"]\nfor c in category2:\n    print(\"{}?n\".format(train_df[c].value_counts()))","69e4ae5b":"def plot_hist(variable):\n    plt.figure(figsize =(9,3))\n    plt.hist(train_df[variable],bins=50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} dist with hist\".format(variable))\n    plt.show()\n","4cc2e984":"numericVar = [\"Fare\",\"Age\",\"PassengerId\"]\nfor n in numericVar:\n    plot_hist(n)","f11fa5af":"fig, ax = plt.subplots(figsize=(20,5))\nsns.heatmap(train_df.corr(), annot = True, fmt = \".2f\",ax=ax)\nplt.show()","3ff35e93":"Counter(train_df[\"Pclass\"])","54f74a15":"# Pclass - Survived\n\ntrain_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"], as_index=False).mean().sort_values(by=\"Survived\",ascending = False)","73eca7bb":"# Sex - Survived\n\ntrain_df[[\"Sex\",\"Survived\"]].groupby([\"Sex\"], as_index=False).mean().sort_values(by=\"Survived\",ascending = False)","b8c4af01":"# Sibsp - Survived\ntrain_df[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"], as_index=False).mean().sort_values(by=\"Survived\",ascending = False)","b0eccff5":"def detect_outliers(df,features):\n    outlier_indices = []\n    \n    for c in df[features]:\n        # 1st quartile\n        Q1 = np.percentile(df[c],25)\n        # 3rd quartile\n        Q3 = np.percentile(df[c],75)\n        # IQR\n        IQR = Q3 - Q1\n        # Outlier step\n        outlier_step = IQR * 1.5\n        # detect outlier and their indeces\n        outlier_list_col = df[(df[c] < Q1 - outlier_step) | (df[c] > Q3 + outlier_step)].index\n        # store indeces\n        outlier_indices.extend(outlier_list_col)\n    \n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i, v in outlier_indices.items() if v > 2)\n    \n    return multiple_outliers","0f359350":"train_df.loc[detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]","ce25dbff":"train_df_len = len(train_df)\ntrain_df = pd.concat([train_df,test_df],axis = 0).reset_index(drop = True)","4fbc5535":"train_df.columns[train_df.isnull().any()]","e6d70472":"train_df.isnull().sum()","33de5645":"train_df.head(20)","ac7f2ecd":"train_df[train_df[\"Embarked\"].isnull()] ","478a02c9":"train_df.boxplot(column=\"Fare\",by=\"Embarked\")\nplt.show()","f96f35ee":"train_df[\"Embarked\"]=train_df[\"Embarked\"].fillna(\"C\")","3e5f6ba8":"train_df[train_df[\"Fare\"].isnull()] ","afa5d5b8":"train_df.boxplot(column=\"Fare\",by=\"Pclass\")\nplt.show()","de887885":"train_df[\"Fare\"] = train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"]==3][\"Fare\"]))","5d86f0db":"list1 = [\"SibSp\", \"Parch\", \"Age\", \"Fare\", \"Survived\",\"Pclass\"]\nsns.heatmap(train_df[list1].corr(), annot = True, fmt = \".2f\")\nplt.show()","88ce2292":"g = sns.factorplot(x = \"SibSp\", y = \"Survived\", data = train_df, kind = \"bar\", size = 6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","756415db":"g = sns.factorplot(x = \"Parch\", y = \"Survived\", kind = \"bar\", data = train_df, size = 6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","ad680228":"g = sns.factorplot(x = \"Pclass\", y = \"Survived\", data = train_df, kind = \"bar\", size = 6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","476db351":"g = sns.FacetGrid(train_df, col = \"Survived\")\ng.map(sns.distplot, \"Age\", bins = 25)\nplt.show()","48cb3548":"g = sns.FacetGrid(train_df, col = \"Survived\", row = \"Pclass\", size = 2)\ng.map(plt.hist, \"Age\", bins = 25)\ng.add_legend()\nplt.show()","45db7513":"g = sns.FacetGrid(train_df, row = \"Embarked\", size = 2)\ng.map(sns.pointplot, \"Pclass\",\"Survived\",\"Sex\")\ng.add_legend()\nplt.show()","56090900":"g = sns.FacetGrid(train_df, row = \"Embarked\", col = \"Survived\", size = 2.3)\ng.map(sns.barplot, \"Sex\", \"Fare\")\ng.add_legend()\nplt.show()","1fb4ae3f":"sns.factorplot(x=\"Sex\",y=\"Age\", data=train_df,kind=\"box\")\nplt.show()","96099bf2":"sns.factorplot(x=\"Sex\",y=\"Age\",hue=\"Pclass\", data=train_df,kind=\"box\")\nplt.show()","f072bb40":"sns.factorplot(x = \"Parch\", y = \"Age\", data = train_df, kind = \"box\")\nsns.factorplot(x = \"SibSp\", y = \"Age\", data = train_df, kind = \"box\")\nplt.show()","37cf02df":"train_df[\"Sex\"] = [1 if i == \"male\" else 0 for i in train_df[\"Sex\"]]","e6436743":"sns.heatmap(train_df[[\"Age\",\"Sex\",\"SibSp\",\"Parch\",\"Pclass\",\"Survived\"]].corr(), annot = True)\nplt.show()","31f6d09e":"train_df.info()","f7abe3cc":"train_df[\"Sex\"] = [\"male\" if i ==1 else \"female\" for i in train_df[\"Sex\"]]","5b508fd1":"train_df[train_df[\"Age\"].isnull()]","5a5a6e32":"index_nan_age = list(train_df[\"Age\"][train_df[\"Age\"].isnull()].index)\nfor i in index_nan_age:\n    age_pred = train_df[\"Age\"][((train_df[\"SibSp\"] == train_df.iloc[i][\"SibSp\"]) &(train_df[\"Parch\"] == train_df.iloc[i][\"Parch\"])& (train_df[\"Pclass\"] == train_df.iloc[i][\"Pclass\"]))].median()\n    age_med = train_df[\"Age\"].median()\n    if not np.isnan(age_pred):\n        train_df[\"Age\"].iloc[i] = age_pred\n    else:\n        train_df[\"Age\"].iloc[i] = age_med","8ff41b14":"train_df[train_df[\"Age\"].isnull()]","dfe46e5e":"train_df[train_df[\"Survived\"].isnull()]","afc8782e":"index_nan_surv = list(train_df[\"Age\"][train_df[\"Age\"].isnull()].index)","3503fd8e":"train_df.head(10)","3cdf5f65":"train_df[\"Sex\"] = [0 if i == \"male\" else 1 for i in train_df[\"Sex\"]]","24ab6c0c":"Cabin1 , Cabin2, Cabin3, =[],[],[]\nfor i in train_df.index:\n    if train_df[\"Pclass\"][i]==1:\n        Cabin1.append(train_df[\"Cabin\"][i])\n    if train_df[\"Pclass\"][i]==2:\n        Cabin2.append(train_df[\"Cabin\"][i])\n    if train_df[\"Pclass\"][i]==3:\n        Cabin3.append(train_df[\"Cabin\"][i])","d611fcd9":"Counter(Cabin1)","cb6bc126":"Counter(Cabin2)\n","0c8f0285":"Counter(Cabin3)","2fb0e0a7":"train_df[\"Fare\"].mean","de5d376f":"Fare1 , Fare2, Fare3, =[],[],[]\nfor i in train_df.index:\n    if train_df[\"Fare\"][i]>=80:\n        Fare1.append(train_df[\"Cabin\"][i])\n    if 40<train_df[\"Fare\"][i]<80:\n        Fare2.append(train_df[\"Cabin\"][i])\n    if train_df[\"Fare\"][i]<=40:\n        Fare3.append(train_df[\"Cabin\"][i])","2b30f109":"Counter(Fare1)","1cc4bf4a":"Counter(Fare2)","ca939717":"Counter(Fare3)","fa4e1e50":"index_nan_cabin = list(train_df[\"Cabin\"][train_df[\"Cabin\"].notnull()].index)\ncab = train_df.iloc[index_nan_cabin,:]","53c697fe":"Counter(cab[\"Cabin\"])","bfaed062":"a= []\nfor i in cab[\"Cabin\"]:\n    a.append(i[0])\n    \ncab[\"Cabin\"]=a\ncab.head(20)    \n    ","9b1495b2":"g = sns.factorplot(x = \"Cabin\", y = \"Survived\", data = cab, kind = \"bar\", size = 6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","3e248d5c":"g = sns.factorplot(x = \"Cabin\", y = \"Fare\", data = cab, kind = \"bar\", size = 6)\ng.set_ylabels(\"Fare\")\nplt.show()","f781f32a":"print(np.mean(cab[\"Fare\"][cab[\"Cabin\"]==\"C\"]))\nprint(np.std(cab[\"Fare\"][cab[\"Cabin\"]==\"C\"]))\nprint(np.min(cab[\"Fare\"][cab[\"Cabin\"]==\"C\"]))\nprint(np.max(cab[\"Fare\"][cab[\"Cabin\"]==\"C\"]))","81752e1b":"print(np.mean(cab[\"Fare\"][cab[\"Cabin\"]==\"B\"]))\nprint(np.std(cab[\"Fare\"][cab[\"Cabin\"]==\"B\"]))\nprint(np.min(cab[\"Fare\"][cab[\"Cabin\"]==\"B\"]))\nprint(np.max(cab[\"Fare\"][cab[\"Cabin\"]==\"B\"]))","7b6ca67c":"print(np.mean(cab[\"Fare\"][cab[\"Cabin\"]==\"E\"]))\nprint(np.std(cab[\"Fare\"][cab[\"Cabin\"]==\"E\"]))\nprint(np.min(cab[\"Fare\"][cab[\"Cabin\"]==\"E\"]))\nprint(np.max(cab[\"Fare\"][cab[\"Cabin\"]==\"E\"]))","23db1323":"print(np.mean(cab[\"Fare\"][cab[\"Cabin\"]==\"D\"]))\nprint(np.std(cab[\"Fare\"][cab[\"Cabin\"]==\"D\"]))\nprint(np.min(cab[\"Fare\"][cab[\"Cabin\"]==\"D\"]))\nprint(np.max(cab[\"Fare\"][cab[\"Cabin\"]==\"D\"]))","9a697145":"g = sns.factorplot(x = \"Cabin\", y = \"Pclass\", data = cab, kind = \"bar\", size = 6)\ng.set_ylabels(\"Pclass\")\nplt.show()","54c4b096":"Counter(cab[\"Cabin\"])","80b1ec7f":"# It mainly depends on fare ","51320b85":"train_df[\"Name\"].head(10)","66f4a4af":"name = train_df[\"Name\"]\ntrain_df[\"Title\"]=[i.split(\".\")[0].split(\",\")[-1].strip() for i in name]","c751de9e":"train_df[\"Title\"].head()","f6400e4a":"sns.countplot(x=\"Title\",data=train_df)\nplt.xticks(rotation=60)\nplt.show()","c39d5ade":"#convert to categorical\n\ntrain_df[\"Title\"]=train_df[\"Title\"].replace([\"Lady\",\"the Countess\",\"Capt\",\"Col\",\"Don\",\"Dr\",\"Major\",\"Rev\",\"Sir\",\"Jonkheer\",\"Dona\"],\"other\")\n","ccda0f58":"Counter(train_df[\"Title\"])","033e179e":"train_df[\"Title\"] = [\"Master\" if i == \"Master\" else \"Mrs\" if i == \"Miss\" or i == \"Ms\" or i == \"Mlle\" or i == \"Mrs\" else \"Mr\" if i == \"Mr\" else \"Other\" for i in train_df[\"Title\"]]","1829316c":"sns.countplot(x=\"Title\",data=train_df)\nplt.xticks(rotation=60)\nplt.show()","fa9323fc":"Counter(train_df[\"Title\"])","aa560445":"g = sns.factorplot(x=\"Title\",y=\"Survived\",data=train_df,kind=\"bar\")\ng.set_xticklabels([\"Master\",\"Mrs\",\"Mr\",\"Other\"])\ng.set_ylabels(\"Survival Probability\")\nplt.show()","6a46c6c8":"train_df = pd.get_dummies(train_df,columns=[\"Title\"])\ntrain_df.head()","f89ddb74":"train_df.drop(labels=[\"Name\"],axis=1,inplace=True)","18fd6c90":"train_df.head()","31e757f0":"train_df[\"Fsize\"] = train_df[\"SibSp\"]+train_df[\"Parch\"]+1","92ec9fff":"g = sns.factorplot(x=\"Fsize\",y=\"Survived\",data=train_df,kind=\"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()","327ddb25":"Counter(train_df[\"Fsize\"])","cf2daa98":"train_df[\"family_size\"]=[2 if 1<i<5 else 1 if i==1 else 1 if i==7  else 0.5 for i in train_df[\"Fsize\"]]","84918c7c":"train_df.head()","659e0910":"sns.countplot(x=\"family_size\",data=train_df)\nplt.show()","c1d6ebdf":"g = sns.factorplot(x=\"family_size\",y=\"Survived\",data=train_df,kind=\"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()","d8ad3fa1":"train_df.drop(labels=[\"Fsize\"],axis=1,inplace=True)","72ca32d4":"train_df.drop(labels=[\"Parch\",\"SibSp\"],axis=1,inplace=True)","c5010fd7":"Counter(train_df[\"Embarked\"])","fe0e4bf8":"train_df = pd.get_dummies(train_df, columns=[\"Embarked\"])\ntrain_df.head()","1c4daee0":"train_df[\"Ticket\"].head(20)","a4000be1":"tickets = []\nfor i in list(train_df.Ticket):\n    if not i.isdigit():\n        tickets.append(i.replace(\".\",\"\").replace(\"\/\",\"\").strip().split(\" \")[0])\n    else:\n        tickets.append(\"x\")\ntrain_df[\"Ticket\"] = tickets","c06f4407":"train_df.head(100)","be2da4f6":"Counter(train_df[\"Ticket\"])","78fddbb4":"x=0\nfor i in train_df.index:\n    if (train_df[\"Ticket\"][i] == \"x\" and train_df[\"Survived\"][i]==1):\n        x=x+1\nprint(x)","71035754":"len(train_df[\"Ticket\"])","aec9b9df":"print(x\/957)","17ee10d4":"ticket_index = []\nfor i in train_df.index:\n    if train_df[\"Ticket\"][i]!=\"x\":\n        ticket_index.append(i) \nticket_df = train_df.iloc[ticket_index,:]","8643abe4":"len(ticket_df)","c5a2359a":"Counter(ticket_df[\"Survived\"])","eb0b4e7b":"print(88\/len(ticket_df))","0ed9ae7f":"ticket2_index =[]\nfor i in train_df.index:\n    if train_df[\"Survived\"][i]==1:\n        ticket2_index.append(i)\nticket2_df = train_df.iloc[ticket2_index,:]","2c248b25":"Counter(ticket2_df[\"Ticket\"])","c45797db":"train_df[\"Ticket\"]=[0.45 if i==\"PC\" else 0.45 if i==\"FCC\" else 0 if i==\"WC\" else 0 if i==\"A4\" else 0 if i==\"SOTONOQ\" else 0 if i==\"A5\" else 0.255 for i in train_df[\"Ticket\"]]","d74532e8":"Counter(train_df[\"Ticket\"])","2f3cc6fa":"Counter(train_df[\"Pclass\"])","a037e8b5":"g = sns.FacetGrid(train_df, col = \"Survived\", size = 2.3)\ng.map(sns.barplot, \"Pclass\")\ng.add_legend()\nplt.show()","15fafb47":"x1, x2, x3, = 0,0,0\nfor i in train_df.index:\n    if train_df[\"Pclass\"][i]==1 and train_df[\"Survived\"][i]==1:\n        x1=x1+1\n    if train_df[\"Pclass\"][i]==2 and train_df[\"Survived\"][i]==1:\n        x2=x2+1\n    if train_df[\"Pclass\"][i]==3 and train_df[\"Survived\"][i]==1:\n        x3=x3+1\nprint(x1,\" \",x2,\" \",x3)","e188e331":"print(x3\/709)\nprint(x2\/277)\nprint(x1\/323)","5ab9f065":"train_df[\"Pclass\"]=[0.167 if i==3 else 0.314 if i==2 else 0.421 for i in train_df[\"Pclass\"]]","fa4ef62f":"Counter(train_df[\"Pclass\"])","01122295":"Counter(train_df[\"Sex\"])\n","a2877b6e":"train_df = pd.get_dummies(train_df, columns=[\"Sex\"])","f48089d0":"train_df[\"Cabin\"]= [\"B\" if i>120 else \"D\" if 45<i<65 else \"G\" if i<25 else 0 for i in train_df[\"Fare\"]]","4d753d60":"Counter(train_df[\"Cabin\"])","d3ffb9a4":"train_df = pd.get_dummies(train_df, columns=[\"Cabin\"])\ntrain_df.head()","289a2346":"train_df.drop(labels=[\"PassengerId\",\"Cabin_0\"],axis=1,inplace=True)","821333c4":"train_df.columns","cc63dc7c":"train_df.head(10)","a218ee81":"train_df[\"Fare\"] = (train_df[\"Fare\"] - np.min(train_df[\"Fare\"]))\/(np.max(train_df[\"Fare\"])-np.min(train_df[\"Fare\"]))\ntrain_df[\"Age\"] = (train_df[\"Age\"] - np.min(train_df[\"Age\"]))\/(np.max(train_df[\"Age\"])-np.min(train_df[\"Age\"]))\ntrain_df[\"family_size\"] = (train_df[\"family_size\"] - np.min(train_df[\"family_size\"]))\/(np.max(train_df[\"family_size\"])-np.min(train_df[\"family_size\"]))\ntrain_df[\"Cabin_B\"]=train_df[\"Cabin_B\"]\ntrain_df[\"Cabin_D\"]=train_df[\"Cabin_D\"]*0.75\ntrain_df[\"Cabin_G\"]=train_df[\"Cabin_G\"]*0.95","1d898bb1":"train_df.head(10)","f6782aa0":"from sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.naive_bayes import GaussianNB","4913fa32":"train_df_len","1c78b383":"test = train_df[train_df_len:]\ntest.drop(labels=[\"Survived\"],axis=1,inplace=True)\ntest.head()","186a0710":"train= train_df[:train_df_len]\nX_train =train.drop(labels=\"Survived\",axis=1)\ny_train = train[\"Survived\"]\n","05ff8f68":"X_train, X_test, y_train, y_test = train_test_split(X_train, y_train, test_size = 0.33, random_state = 42)\nprint(\"X_train\",len(X_train))\nprint(\"X_test\",len(X_test))\nprint(\"y_train\",len(y_train))\nprint(\"y_test\",len(y_test))\nprint(\"test\",len(test))","94e14457":"logreg= LogisticRegression()\nlogreg.fit(X_train,y_train)\nacc_log_train = round(logreg.score(X_train,y_train)*100,2) \nacc_log_test =round(logreg.score(X_test,y_test)*100,2) \nprint(\"Training Accuracy: % {}\".format(acc_log_train))\nprint(\"Testing Accuracy: % {}\".format(acc_log_test))\n","7159d37b":"random_state=42\nclassifier = [DecisionTreeClassifier(random_state = random_state),\n             SVC(random_state = random_state),\n             RandomForestClassifier(random_state = random_state),\n             LogisticRegression(random_state = random_state),\n             KNeighborsClassifier()]\n             \ndt_param_grid={\"min_samples_split\":range(10,500,20),\n              \"max_depth\":range(1,20,2)}\n\nsvc_param_grid ={\"kernel\":[\"rbf\"],\n               \"gamma\":[0.001,0.01,0.1,1],\n               \"C\":[1,10,50,100,200,300,1000]}\n\nrf_param_grid={\"max_features\":[1,3,10],\n              \"min_samples_split\":[2,3,10],\n              \"min_samples_leaf\":[1,3,10],\n              \"bootstrap\":[False],\n              \"n_estimators\":[100,300],\n              \"criterion\":[\"gini\"]}\n\nlogreg_param_grid = {\"C\":np.logspace(-3,3,7),\n                    \"penalty\": [\"l1\",\"l2\"]}\n\nknn_param_grid = {\"n_neighbors\": np.linspace(1,19,10, dtype = int).tolist(),\n                 \"weights\": [\"uniform\",\"distance\"],\n                 \"metric\":[\"euclidean\",\"manhattan\"]}\n\nclassifier_param = [dt_param_grid,\n                   svc_param_grid,\n                   rf_param_grid,\n                   logreg_param_grid,\n                   knn_param_grid\n                   ]\n\n\n","91ba7340":"cv_results = []\nbest_estimators = []\nfor i in range(len(classifier)):\n    clf = GridSearchCV(classifier[i], param_grid=classifier_param[i], cv = StratifiedKFold(n_splits = 10), scoring = \"accuracy\", n_jobs = -1,verbose = 1)\n    clf.fit(X_train,y_train)\n    cv_results.append(clf.best_score_)\n    best_estimators.append(clf.best_estimator_)\n    print(cv_results[i])\n    \n\n","65d22e40":"nb = GaussianNB()\nfrom sklearn.model_selection import cross_val_score\n\naccuracies = cross_val_score(estimator=nb,X = X_train,y = y_train,cv=10)\n\nprint(\"mean =\", np.mean(accuracies))\n","a6930353":"cv_result = pd.DataFrame({\"Cross Validation Means\":cv_results, \"ML Models\":[\"DecisionTreeClassifier\", \"SVM\",\"RandomForestClassifier\",\n             \"LogisticRegression\",\n             \"KNeighborsClassifier\"]})\n\ng = sns.barplot(\"Cross Validation Means\", \"ML Models\", data = cv_result)\ng.set_xlabel(\"Mean Accuracy\")\ng.set_title(\"Cross Validation Scores\")","768403f8":"best_estimators","04d69c0a":"votingC = VotingClassifier(estimators = [(\"dt\",best_estimators[0]),                                  \n                                        (\"rfc\",best_estimators[2]),\n                                        (\"knn\",best_estimators[4])],\n                                        voting = \"soft\", n_jobs = -1)\nvotingC = votingC.fit(X_train, y_train)\nprint(accuracy_score(votingC.predict(X_test),y_test))","47c27113":"test_survived = pd.Series(votingC.predict(test), name = \"Survived\").astype(int)\nresults = pd.concat([test_PassengerId, test_survived],axis = 1)\nresults.to_csv(\"titanic.csv\", index = False)","cd1a5e7b":"* Ticket","b582ddca":"* family size","9f45ea1f":"*Embarked has 2 missing value\n*Fare has only 1","71744747":"* name-title","ee46c11d":"*Embarked","c09eb76d":"<a id=\"11\" ><\/n><br>\n# Visualization","12baeb14":"* pclass","247bb676":"<a id=\"9\" ><\/n><br>\nFind Missing Value","250083d3":"## Numerical Variable Analysis","4ff74e62":"<a id=\"3\"><\/a><br>\n# Univariate Variable Analysis\n\n*Categorical Variable Analysis : Survived, Sex, Pclass, Embarked, Cabin , Name, Ticket, Sibsp and Parch\n\n*Numerical Variable Analysis : Fare, age and passengerId","be3f0cb9":"<a id=\"4\"><\/a><br>\n## Categorical Variable Analysis\n****","33fc9e7b":"* Hyperparameter Tuning -- Grid Search -- Cross Validation","99ff772b":"<a id=\"14\" ><\/n><br>\n# Modelling","0ec404b2":"We will compare 5 ml classifier and evaluate mean accuracy of each of them by stratified cross validation.\n\n   * Decision Tree\n   * SVM\n   * Random Forest\n   * KNN\n   * Logistic Regression\n   * Navies\n   ","525cc6af":"<a id=\"6\" ><\/n><br>\n# Basic Data Analysis\n\n* Pclass - Survived\n* Sex - Survived\n* SibSp - Survived\n* Parch - Survived","0792d951":"<a id=\"2\"><\/a><br>\n# Variable Description\n1-PassengerId : unique id number to each passenger\n\n2-Survived : passenger survive(1) or died(0)\n\n3-Pclass : passenger class\n\n4-Name : passenger's name\n\n5-Sex : gender of passenger\n\n6-Age : age of passenger\n\n7-SibSp : number of siblings\/spouses\n\n8-Parch : number of parents\/children\n\n9-Ticket : ticket number\n\n10-Fare : ticket price\n\n11-Cabin : cabin category\n\n12-Embarked : passenger's port(C = Cherboug, Q=Quenstown , S = Southampton)\n\n\n\n","3506e0a1":"<a id=\"13\" ><\/n><br>\n# Feature Engineering","0626f516":"* Drop Passenger Id and Cabin","74874eaa":"* Sex","9170e255":"<a id=\"1\"><\/a><br>\n# Load and Check Data\n","cca592d2":"###### Introduction\n\nTitanic is the one of the famous disaster of the history. It sinked because it crashed iceberg. 1502 people died and total number of people were 2224.\n\n<font color ='blue' >\nContent:\n\n\n\n1. [Load and Check Data](#1)\n2. [Variable Description](#2)\n   - [Univariate Variable Analysis](#3)\n   - [Categorical Variable Analysis](#4)  \n   - [Numerical Variable Analysis](#5)\n3. [Basic Data Analysis](#6)   \n4. [Outlier Detection](#7)\n5. [Missing Value](#8)\n   -  [Find Missing Value](#9)\n   - [Fill Missing Value](#10)\n6. [Visualization](#11)\n7. [Filling Data](#12)\n8. [Feature Enginnering](#13)\n9. [Modelling](#14)\n10. [Prediction and Submission](#15)\n   ","f043f41b":"<a id=\"7\" ><\/n><br>\n# Outlier Detection","9862e627":"* Train Test Split","f8f7b596":"* Simple Regression","49162fc6":"<a id=\"15\" ><\/n><br>\n# Prediction and Submission","0582714f":"<a id=\"12\" ><\/n><br>\n# Filling Data","074d49ac":"<a id=\"10\" ><\/n><br>\n* Fill Missing Value","09b853d5":"* Ensemble Modelling","633e43b0":"* float64(2): Fare and Age\n* int64(5): Pclass, sibsp,parch,passengerId and survived\n* object(5): Cabin,embarked,ticket,name and sex","6cea22b9":"<a id=\"8\" ><\/n><br>\n# Missing Value\n\n* Find Missing Value\n* Fill Missing Value"}}