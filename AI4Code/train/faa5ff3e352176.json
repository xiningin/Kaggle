{"cell_type":{"2d8719f0":"code","bf07f379":"code","69877fb5":"code","b1c0b7ee":"code","5292b421":"code","ed29be59":"code","62d4de8a":"code","1568f9ac":"code","3f957f05":"code","0d5c4d1a":"code","3e11a2f5":"code","39684a50":"code","673492a4":"code","1daaf4c5":"code","b6bd433f":"code","5f71928c":"code","dc9b1f48":"code","2688511f":"code","bc3b9857":"code","45771f51":"code","b136aaa6":"code","27e783a6":"markdown","e84487d9":"markdown","640389d8":"markdown","11acd612":"markdown","b5fd33ac":"markdown","034c4d3b":"markdown","1516aac9":"markdown","dd711631":"markdown","aadaebcc":"markdown","aaea5c5e":"markdown","2624bc82":"markdown","6fe43953":"markdown","1399d34a":"markdown","5eae9912":"markdown"},"source":{"2d8719f0":"import numpy as np\nimport pandas as pd\nimport torch\n\nimport PIL\nprint(PIL.PILLOW_VERSION)\n\n#file paths\n#\/kaggle\/input\/simpsons4\/train\n#\/kaggle\/input\/simpsons4\/testset\/testset\n\ntrain_on_gpu = torch.cuda.is_available()\n\nif not train_on_gpu:\n    print('CUDA is not available.  Training on CPU ...')\nelse:\n    print('CUDA is available!  Training on GPU ...')","bf07f379":"import pickle\nimport numpy as np\nfrom skimage import io\nimport random\n\nfrom tqdm import tqdm, tqdm_notebook\nfrom PIL import Image\nfrom pathlib import Path\n\nfrom torchvision import transforms\nfrom multiprocessing.pool import ThreadPool\nfrom sklearn.preprocessing import LabelEncoder\nfrom torch.utils.data import Dataset, DataLoader\nimport torch.nn as nn\n\nfrom matplotlib import colors, pyplot as plt\n%matplotlib inline\n\n# \u0432 sklearn \u043d\u0435 \u0432\u0441\u0435 \u0433\u043b\u0430\u0434\u043a\u043e, \u0447\u0442\u043e\u0431\u044b \u0432 colab \u0443\u0434\u043e\u0431\u043d\u043e \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0438 \n# \u043c\u044b \u0431\u0443\u0434\u0435\u043c \u0438\u0433\u043d\u043e\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c warnings\nimport warnings\nwarnings.filterwarnings(action='ignore', category=DeprecationWarning)","69877fb5":"SEED = 42\n\nrandom.seed(SEED)\nnp.random.seed(SEED)\ntorch.manual_seed(SEED)\ntorch.cuda.manual_seed(SEED)\ntorch.backends.cudnn.deterministic = True","b1c0b7ee":"DATA_MODES = ['train', 'val', 'test']\nRESCALE_SIZE = 224\nDEVICE = torch.device(\"cuda\")","5292b421":"import albumentations as A\nfrom albumentations.pytorch import ToTensor\n\naugmentations_pipeline = A.Compose(\n    [\n        A.HorizontalFlip(p = 0.5), # apply horizontal flip to 50% of images\n        A.OneOf(\n            [\n                # apply one of transforms to 50% of images\n                A.RandomContrast(), # apply random contrast\n                A.RandomGamma(), # apply random gamma\n                A.RandomBrightness(), # apply random brightness\n            ],\n            p = 0.5\n        ),\n        \n        A.Normalize(\n            mean=[0.485, 0.456, 0.406],\n            std=[0.229, 0.224, 0.225]),\n        \n        ToTensor() # convert the image to PyTorch tensor\n    ],\n    p = 1\n)","ed29be59":"class SimpsonsDataset(Dataset):\n  def __init__(self, files, mode, augmentations = None):\n    super().__init__()\n    self.files = files\n    self.mode = mode\n    self.augmentations = augmentations\n\n    if self.mode not in DATA_MODES:\n      print(f'wrong mode: {self.mode}')\n      raise NameError\n\n    self.len_ = len(self.files)\n    self.label_encoder = LabelEncoder()\n\n    if self.mode != 'test':\n      self.labels = [path.parent.name for path in self.files]\n      self.label_encoder.fit(self.labels)\n\n      with open('label_encoder.pkl', 'wb') as le_dump:\n        pickle.dump(self.label_encoder, le_dump)\n\n  def __len__(self):\n    return self.len_\n\n  def load_sample(self, file):\n    image = Image.open(file)\n    image.load()\n    return image\n\n  def __getitem__(self, index):\n    transform = transforms.Compose([\n      transforms.ToTensor(),\n      transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])                                \n    ])\n\n    x = self.load_sample(self.files[index])\n    x = self._prepare_sample(x)\n    x = np.array(x \/ 255, dtype='float32')\n\n    x = transform(x)\n  \n    if self.mode == 'test':\n      return x\n    else:\n    \n      #---------- \u0412 \u044d\u0442\u043e\u043c \u043c\u0435\u0441\u0442\u0435 \u043c\u043e\u0436\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0430\u0443\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0439\n        \n      label = self.labels[index]\n      label_id = self.label_encoder.transform([label])\n      y = label_id.item()\n      return x, y\n\n  def _prepare_sample(self, image):\n    image = image.resize((RESCALE_SIZE, RESCALE_SIZE))\n    return np.array(image)","62d4de8a":"TRAIN_DIR = Path('\/kaggle\/input\/simpsons4\/train')\nTEST_DIR = Path('\/kaggle\/input\/simpsons4\/testset\/testset')\n\ntrain_val_files = sorted(list(TRAIN_DIR.rglob('*.jpg')))\ntest_files = sorted(list(TEST_DIR.rglob('*.jpg')))","1568f9ac":"from sklearn.model_selection import train_test_split\n\ntrain_val_labels = [path.parent.name for path in train_val_files]\ntrain_files, val_files = train_test_split(train_val_files, test_size=0.3, \\\n                                          stratify=train_val_labels)","3f957f05":"val_dataset = SimpsonsDataset(val_files, mode='val')\ntrain_dataset = SimpsonsDataset(train_files, mode='train')","0d5c4d1a":"def imshow(img, title=None, plt_ax=plt, default=False):\n  img = img.numpy().transpose((1, 2, 0))\n  mean = np.array([0.485, 0.456, 0.406])\n  std = np.array([0.229, 0.224, 0.225])\n  img = std * img + mean\n  img = np.clip(img, 0, 1)\n  plt_ax.imshow(img)\n  if title is not None:\n    plt_ax.set_title(title)\n  plt_ax.grid(False)","3e11a2f5":"fig, ax = plt.subplots(nrows=3, ncols=3, figsize=(10,10), sharex=True, sharey=True)\n\nfor fig_x in ax.flatten():\n    random_characters = int(np.random.uniform(0,1000))\n    im_val, label = val_dataset[random_characters]\n    img_label = \" \".join(map(lambda x: x.capitalize(),\\\n                val_dataset.label_encoder.inverse_transform([label])[0].split('_')))\n    imshow(im_val.data.cpu(), \\\n          title=img_label,plt_ax=fig_x)","39684a50":"class ConvModel(nn.Module):\n  \n    def __init__(self, n_classes):\n        super().__init__()\n        self.conv1 = nn.Sequential(\n            nn.Conv2d(in_channels=3, out_channels=8, kernel_size=3),\n            nn.MaxPool2d(kernel_size=2),\n            nn.ReLU()\n        )\n        self.conv2 = nn.Sequential(\n            nn.Conv2d(in_channels=8, out_channels=32, kernel_size=3),\n            nn.BatchNorm2d(32),\n            nn.MaxPool2d(kernel_size=2),\n            nn.ReLU()\n        )\n        self.conv3 = nn.Sequential(\n            nn.Conv2d(in_channels=32, out_channels=64, kernel_size=3),\n            nn.BatchNorm2d(64),\n            nn.MaxPool2d(kernel_size=2),\n            nn.ReLU()\n        )\n        self.conv4 = nn.Sequential(\n            nn.Conv2d(in_channels=64, out_channels=96, kernel_size=3),\n            nn.BatchNorm2d(96),\n            nn.MaxPool2d(kernel_size=2),\n            nn.ReLU()\n        )\n        self.conv5 = nn.Sequential(\n            nn.Conv2d(in_channels=96, out_channels=164, kernel_size=3),\n            nn.BatchNorm2d(164),\n            nn.MaxPool2d(kernel_size=2),\n            nn.ReLU()\n        )\n        self.fc1 = nn.Sequential(\n            nn.Linear(5 * 5 * 164, 1024),\n            nn.BatchNorm1d(1024),\n            nn.ReLU(),\n        )\n        self.fc2 = nn.Sequential(\n            nn.Linear(1024, 1024),\n            nn.BatchNorm1d(1024),\n            nn.ReLU()\n        )        \n        self.out = nn.Linear(1024, n_classes)\n\n    def forward(self, x):\n        x = self.conv1(x)\n        x = self.conv2(x)\n        x = self.conv3(x)\n        x = self.conv4(x)\n        x = self.conv5(x)\n        x = x.view(-1, 5 * 5 * 164)\n        x = self.fc1(x)\n        x = self.fc2(x)\n\n        logits = self.out(x)\n        return logits","673492a4":"def fit_epoch(model, train_loader, criterion, optimizer):\n    running_loss = 0.0\n    running_corrects = 0\n    processed_data = 0\n  \n    for inputs, labels in train_loader:\n        inputs = inputs.to(DEVICE)\n        labels = labels.to(DEVICE)\n        optimizer.zero_grad()\n\n        outputs = model(inputs)\n        loss = criterion(outputs, labels)\n        loss.backward()\n        optimizer.step()\n        preds = torch.argmax(outputs, 1)\n        running_loss += loss.item() * inputs.size(0)\n        running_corrects += torch.sum(preds == labels.data)\n        processed_data += inputs.size(0)\n              \n    train_loss = running_loss \/ processed_data\n    train_acc = running_corrects.cpu().numpy() \/ processed_data\n    return train_loss, train_acc\n  \ndef eval_epoch(model, val_loader, criterion):\n    model.eval()\n    running_loss = 0.0\n    running_corrects = 0\n    processed_size = 0\n\n    for inputs, labels in val_loader:\n        inputs = inputs.to(DEVICE)\n        labels = labels.to(DEVICE)\n\n        with torch.set_grad_enabled(False):\n            outputs = model(inputs)\n            loss = criterion(outputs, labels)\n            preds = torch.argmax(outputs, 1)\n\n        running_loss += loss.item() * inputs.size(0)\n        running_corrects += torch.sum(preds == labels.data)\n        processed_size += inputs.size(0)\n    val_loss = running_loss \/ processed_size\n    val_acc = running_corrects.double() \/ processed_size\n    return val_loss, val_acc\n  \ndef train(train_files, val_files, model, epochs, batch_size):\n    train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True)\n    val_loader = DataLoader(val_dataset, batch_size=batch_size, shuffle=False)\n\n    history = []\n    log_template = \"\\nEpoch {ep:03d} train_loss: {t_loss:0.4f} \\\n    val_loss {v_loss:0.4f} train_acc {t_acc:0.4f} val_acc {v_acc:0.4f}\"\n\n    with tqdm(desc=\"epoch\", total=epochs) as pbar_outer:\n      \n        #\u0417\u0434\u0435\u0441\u044c \u043c\u043e\u0436\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0441\u0445\u0435\u043c\u0443 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f learning rate\n        \n        opt = torch.optim.Adam(model.parameters())\n\n        criterion = nn.CrossEntropyLoss()\n\n        for epoch in range(epochs):\n            train_loss, train_acc = fit_epoch(model, train_loader, criterion, opt)\n            print(\"loss\", train_loss)\n            \n            val_loss, val_acc = eval_epoch(model, val_loader, criterion)\n            history.append((train_loss, train_acc, val_loss, val_acc))\n            \n            pbar_outer.update(1)\n            tqdm.write(log_template.format(ep=epoch+1, t_loss=train_loss,\\\n                                           v_loss=val_loss, t_acc=train_acc, v_acc=val_acc))\n            \n    return history","1daaf4c5":"def predict(model, test_loader):\n    with torch.no_grad():\n        logits = []\n    \n        for inputs in test_loader:\n            inputs = inputs.to(DEVICE)\n            model.eval()\n            outputs = model(inputs).cpu()\n            logits.append(outputs)\n            \n    probs = nn.functional.softmax(torch.cat(logits), dim=-1).numpy()\n    return probs","b6bd433f":"n_classes = len(np.unique(train_val_labels))\nmodel = ConvModel(n_classes).to(DEVICE)\nprint(model)","5f71928c":"history = train(train_dataset, val_dataset, model=model, epochs=20, batch_size=32)","dc9b1f48":"loss, acc, val_loss, val_acc = zip(*history)","2688511f":"plt.figure(figsize=(15, 9))\nplt.plot(loss, label=\"train_loss\")\nplt.plot(val_loss, label=\"val_loss\")\nplt.legend(loc='best')\nplt.xlabel(\"epochs\")\nplt.ylabel(\"loss\")\nplt.show()","bc3b9857":"label_encoder = pickle.load(open(\"label_encoder.pkl\", 'rb'))\n\ntest_dataset = SimpsonsDataset(test_files, mode=\"test\")\ntest_loader = DataLoader(test_dataset, shuffle=False, batch_size=64)\nprobs = predict(model, test_loader)\n\npreds = label_encoder.inverse_transform(np.argmax(probs, axis=1))\ntest_filenames = [path.name for path in test_dataset.files]","45771f51":"submit = pd.DataFrame({'Id': test_filenames, 'Expected': preds})\nsubmit.head()","b136aaa6":"submit.to_csv('submission.csv', index=False)","27e783a6":"\u0416\u0435\u043b\u0430\u0442\u0435\u043b\u044c\u043d\u043e, \u0447\u0442\u043e\u0431\u044b \u0441\u0445\u0435\u043c\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u043b\u0430 \u0441\u0445\u0435\u043c\u0443 \u0440\u0430\u0437\u0431\u0438\u0442\u0438\u044f public\/private. \u0412 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u044d\u0442\u043e 30\/70. ","e84487d9":"# Exploring the data","640389d8":"\u041e\u0442\u043d\u0430\u0441\u043b\u0435\u0434\u0443\u0435\u043c\u0441\u044f \u043e\u0442 \u043a\u043b\u0430\u0441\u0441\u0430 Dataset. \u041d\u043e\u0432\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u0434\u0433\u0430\u0442\u0430\u0432\u043b\u0438\u0432\u0430\u0442\u044c \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u2014 \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u043e\u0432\u0430\u0442\u044c, \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u043e\u0432\u044b\u0432\u0430\u0442\u044c, \u0430\u0443\u0433\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438 \u0442.\u0434.","11acd612":"\u0424\u0443\u043d\u043a\u0446\u0438\u0438 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0438 \u043e\u0446\u0435\u043d\u043a\u0438 \u043c\u043e\u0434\u0435\u043b\u0438. \u0422\u0443\u0442 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u0438\u0433\u0440\u0430\u0442\u044c\u0441\u044f \u0441 learning rate, \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0434\u043b\u044f \u043d\u0435\u0433\u043e scheduler, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u0435\u0433\u043e \u0432\u0430\u0440\u044c\u0438\u0440\u043e\u0432\u0430\u0442\u044c.","b5fd33ac":"\u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043c\u043e\u0434\u0435\u043b\u044c, \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c, \u0447\u0442\u043e \u0432 \u043d\u0435\u0439 \u0442\u0435 \u0441\u043b\u043e\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0430\u043c \u043d\u0443\u0436\u043d\u044b.","034c4d3b":"# Let's build the model","1516aac9":"\u0417\u0430\u043f\u0443\u0441\u0442\u0438\u043c \u043c\u043e\u0434\u0435\u043b\u044c. \u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435, \u0447\u0442\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 (\u0438 score) \u043c\u043e\u0436\u0435\u0442 \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u043e\u0442\u043b\u0438\u0447\u0430\u0442\u044c\u0441\u044f \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 batch_size.\n\u0422\u0443\u0442 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043c\u0435\u043d\u044f\u0442\u044c \u043d\u0430 \u0431\u043e\u043b\u044c\u0448\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043f\u043e\u0445. \u041d\u043e \u043d\u0435 \u043f\u0435\u0440\u0435\u043e\u0431\u0443\u0447\u0438\u0441\u044c!","dd711631":"### Baseline \u0434\u043b\u044f \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0439.\n\n\u041f\u0440\u043e\u0441\u0442\u043e\u0440 \u0434\u043b\u044f **\u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0439** \u043e\u0433\u0440\u043e\u043c\u0435\u043d:\n> \n* \u0421\u0445\u0435\u043c\u0430 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u043c\u043e\u0434\u0435\u043b\u0438\n* \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0430\u0443\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0439\n* \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0433\u0440\u0430\u0435\u043c \u0441 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438\n* \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u0443\u0435\u043c learning rate\n* \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043f\u0440\u0435\u0434\u043e\u0431\u0443\u0447\u0435\u043d\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438\n\nAlbumentations\n\nhttps:\/\/github.com\/albumentations-team\/albumentations#how-to-use\n\nOther model example (ResNet)\n\nhttps:\/\/www.kaggle.com\/robinreni\/heng-s-pytorch-resnet34-classifier-training\n\nPretrained models\n\nhttps:\/\/www.kaggle.com\/iafoss\/fine-tuning-resnet34-on-ship-detection\n\nhttps:\/\/www.kaggle.com\/iafoss\/fine-tuning-resnet34-on-ship-detection\n\n\u041d\u0430 kaggle \u0435\u0441\u0442\u044c \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u043a\u0435\u0440\u043d\u0435\u043b\u043e\u0432 \u043f\u043e \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439, \u0438\u0449\u0438\u0442\u0435 \u0432 \u043d\u0438\u0445 \u0434\u0440\u0443\u0433\u0438\u0435 \u0438\u0434\u0435\u0438!","aadaebcc":"\u041f\u0440\u0438\u043c\u0435\u0440 \u0430\u0443\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0439, \u043f\u043e\u043c\u0435\u043d\u044f\u0439\u0442\u0435 \u043d\u0430 \u0442\u0435, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u0447\u0438\u0442\u0430\u0435\u0442\u0435 \u043d\u0443\u0436\u043d\u044b\u043c\u0438 \u0438 \u0434\u043e\u0431\u0430\u0432\u044c\u0442\u0435 \u043a\u043e\u0434 \u0432 \u0441\u0432\u043e\u0439 \u043a\u043b\u0430\u0441\u0441 Dataset'a.\n\u0421\u0430\u043c\u0430\u044f \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u0430\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u0434\u043b\u044f \u0430\u0443\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0439 \u043d\u0430 kaggle \u2014 **Albumentations**.\n\nhttps:\/\/github.com\/albumentations-team\/albumentations\/blob\/master\/notebooks\/showcase.ipynb","aaea5c5e":"### \u041f\u0440\u0438\u043c\u0435\u0440 \u0430\u0443\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0439","2624bc82":"\u0421\u043e\u0431\u0435\u0440\u0435\u043c \u043d\u0430\u0448\u0443 \u043c\u043e\u0434\u0435\u043b\u044c, \u0441\u0435\u0439\u0447\u0430\u0441 \u043e\u043d\u0430 \u043f\u0440\u043e\u0441\u0442\u0430\u044f \u2014 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u0432\u0435\u0440\u0442\u043e\u043a \u0438 FC (fully conected) \u0441\u043b\u043e\u0435\u0432. \u041d\u0430\u043a\u0438\u043d\u0443\u0442\u044c \u0441\u043a\u043e\u0440 \u043c\u043e\u0436\u043d\u043e \u0437\u0430 \u0441\u0447\u0435\u0442 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432, \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 \u0441\u0430\u043c\u043e\u0439 \u0441\u0435\u0442\u0438, \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043f\u0440\u0435\u0434\u043e\u0431\u0443\u0447\u0435\u043d\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, ResNet).","6fe43953":"# Submission","1399d34a":"# Train","5eae9912":"# Dataset construction"}}