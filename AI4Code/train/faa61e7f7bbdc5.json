{"cell_type":{"6a746091":"code","ceb8bdde":"code","99a4cc4c":"code","37570935":"code","9967eb9e":"code","b3195c54":"code","dfddd1f1":"code","5a26e375":"code","9b74d8a2":"code","09fc945f":"code","2ecdb0e3":"code","8e9c9e82":"code","211f2f87":"code","d0bcf1d9":"code","24c2f672":"code","1c31d6cc":"code","dfdd3c01":"code","3ed28634":"code","9591867c":"code","d9d21d59":"code","818ae0b6":"code","7004efce":"code","d6937cd8":"code","815a219f":"code","1f377032":"code","3d2f6af4":"code","fbb7d944":"code","bb2fb86b":"code","9534962d":"code","bca0e5ca":"code","3f402ff2":"code","88663fbe":"code","75c0b69d":"code","ef877e35":"markdown","fb56113e":"markdown","439d7b7c":"markdown","7ad82992":"markdown","504e2f2b":"markdown","0bb467a5":"markdown","004db215":"markdown"},"source":{"6a746091":"# All the libraries\n!python -m pip install gwpy\n!pip install astropy==4.2.1\n!pip install astropy\n!pip install nnAudio\n!pip install tqdm","ceb8bdde":"import tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom scipy import signal\nimport os\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom sklearn.model_selection import train_test_split\n\nimport tqdm\nimport gwpy\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n","99a4cc4c":"df = pd.read_csv(\"\/kaggle\/input\/g2net-gravitational-wave-detection\/training_labels.csv\")\nfnames = []\npath = '\/kaggle\/input\/g2net-gravitational-wave-detection\/train\/0\/0\/0'\npde=[]\n\nfor dirname, _, filenames in os.walk(path):\n    for filename in filenames:\n        fnames.append(os.path.join(dirname,filename))\n        pde.append(filename)\nlen(fnames)\nfnames[:20]","37570935":"\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nplt.style.use('ggplot')\nplt.figure(figsize= (15,10))\n\nfor i in range(3):\n    image = np.load(fnames[1])\n    ax = plt.subplot(3,1,i+1)\n    image = image[i,:]\/np.max(image[i,:])\n    plt.plot(image)","9967eb9e":"image = np.load(fnames[4])\nimage.shape\nimage[0]","b3195c54":"def wavesinone(fno):\n    \"\"\"\n    Function takes filenumber as input and plots all the 3 or 4 waves in that np.array\n    \"\"\"\n    \n\n\n    plt.style.use('ggplot')\n    plt.figure(figsize= (15,10))\n\n    for i in range(3):\n        image = np.load(fnames[fno])\n        ax = plt.subplot(3,1,i+1)\n        image = image[i,:]\/np.max(image[i,:])\n        plt.plot(image)","dfddd1f1":"wavesinone(10)","5a26e375":"def freqinone(fno):\n    b = np.load(fnames[fno])\n    w, h = signal.freqz(b[0][:])\n\n    import matplotlib.pyplot as plt\n\n    fig, ax1 = plt.subplots(figsize= (17,4))\n    ax1.set_title('LIGO Hanford Digital filter frequency response')\n\n    ax1.plot(w, 20 * np.log10(abs(h)), 'b')\n    ax1.set_ylabel('Amplitude [dB]', color='b')\n    ax1.set_xlabel('Frequency [rad\/sample]')\n\n    ax2 = ax1.twinx()\n    angles = np.unwrap(np.angle(h))\n    ax2.plot(w, angles, 'g')\n    ax2.set_ylabel('Angle (radians)', color='g')\n    ax2.grid()\n    ax2.axis('tight')\n    plt.show()\n\n    b = np.load(fnames[10])\n    w, h = signal.freqz(b[1][:])\n\n\n    fig1,ax3=  plt.subplots(figsize= (17,4))\n    ax3.set_title('LIGO Livingston Digital filter frequency response')\n\n    ax3.plot(w, 20 * np.log10(abs(h)), 'b')\n    ax3.set_ylabel('Amplitude [dB]', color='b')\n    ax3.set_xlabel('Frequency [rad\/sample]')\n\n    ax4 = ax3.twinx()\n    angles = np.unwrap(np.angle(h))\n    ax4.plot(w, angles, 'g')\n    ax4.set_ylabel('Angle (radians)', color='g')\n    ax4.grid()\n    ax4.axis('tight')\n    plt.show()\n\n    b = np.load(fnames[10])\n    w, h = signal.freqz(b[2][:])\n\n\n    fig2,ax5=  plt.subplots(figsize= (17,4))\n    ax5.set_title('LIGO Livingston Digital filter frequency response')\n\n    ax5.plot(w, 20 * np.log10(abs(h)), 'b')\n    ax5.set_ylabel('Amplitude [dB]', color='b')\n    ax5.set_xlabel('Frequency [rad\/sample]')\n\n    ax6 = ax5.twinx()\n    angles = np.unwrap(np.angle(h))\n    ax6.plot(w, angles, 'g')\n    ax6.set_ylabel('Angle (radians)', color='g')\n    ax6.grid()\n    ax6.axis('tight')\n    plt.show()","9b74d8a2":"freqinone(2)","09fc945f":"def tseries(fno):\n    b = np.load(fnames[fno])\n    t1= b[0][:]\n    t2 = b[1][:]\n    t3 = b[2][:]\n    \n    return t1,t2,t3","2ecdb0e3":"a,b,c = tseries(1)\n\na.shape,b.shape,c.shape","8e9c9e82":"def totensors(fno):\n    a,b,c = tseries(fno)\n    t1 = tf.convert_to_tensor(a)\n    t2 = tf.convert_to_tensor(b)\n    t3 = tf.convert_to_tensor(c)\n    \n    return t1,t2,t3\n    ","211f2f87":"a,b,c = totensors(32)\nd = tf.constant(a)\nd.shape, a.shape","d0bcf1d9":"model = keras.Sequential([\n    layers.Dense(512 , activation = 'relu', input_shape=[3]),\n    layers.Dense(1024 , activation = 'relu'),\n    layers.Dense(512 , activation = 'relu'),\n    layers.Dense(1),\n    \n])\n\nmodel.compile(\n    optimizer = \"adam\",\n    loss = 'BinaryCrossentropy'\n)","24c2f672":"df.head()","1c31d6cc":"pd= df.id\ntarget = df.target\npd = pd+\".npy\"\npd","dfdd3c01":"t=[]\nx=[]\nfor i in range(155):\n    for j in range(560000):\n        if pde[i] == pd[j]:\n                x.append(j)\n                t.append(target[j])\n                print(j,len(x))\n                \nlen(x)","3ed28634":"#new_pde = {x.replace(\".npy\",\"\") for x in pde}\n#new_pde\nimport pandas as pd\ndf1= pd.DataFrame(list(zip(pde,t)),columns= [\"id\",\"target\"])\ndf1\n","9591867c":"df1.head()","d9d21d59":"aa =[]\nbb =[]\ncc =[]\n\nfor i in range(155):\n    a,b,c = tseries(i)\n    aa.append(a)\n    bb.append(b)\n    cc.append(c)\n    \n\n","818ae0b6":"df11 = df1.target\ndf11","7004efce":"df1 = df1.drop(\"target\",axis = 1)\ndf1","d6937cd8":"df1[\"hanford\"]=aa\ndf1[\"living\"]=bb\ndf1[\"virgo\"]=cc","815a219f":"df1[\"target\"] = df11\ndf1.head()","1f377032":"df1 = df1.drop(\"id\",axis = 1)\ndf1","3d2f6af4":"X_train,X_val,y_train,y_val = train_test_split(df1.drop(\"target\",axis = 1),\n                                               df1.target,test_size = 0.2,\n                                               random_state=13)\nlen(X_train),len(X_val),len(y_train),len(y_val)","fbb7d944":"X_train.head()","bb2fb86b":"def my_func(arg):\n   \n    arg = np.array(arg,dtype = \"object\") \n    print(arg.dtype)\n    arg = tf.convert_to_tensor(arg, dtype=np.float64)\n    return arg","9534962d":"def my_func(arg):\n    \"\"\"\n    function will take Fnames input and convert them into \n    \"\"\"\n    for i in range(124):","bca0e5ca":"d= X_train[1:2]\nd = np.array(d,dtype = \"object\")\nprint(d.shape)\nt = tf.convert_to_tensor(d, dtype=np.float64)\nt","3f402ff2":"\nX_train[1:2]","88663fbe":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Model Evaluations\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.model_selection import RandomizedSearchCV, GridSearchCV\nfrom sklearn.metrics import confusion_matrix, classification_report\nfrom sklearn.metrics import precision_score, recall_score, f1_score\nfrom sklearn.metrics import plot_roc_curve\n\nmodels = {\"Logistic Regression\": LogisticRegression(),\n          \"KNN\": KNeighborsClassifier(),\n          \"Random Forest\": RandomForestClassifier()}\n\n# Create a function to fit and score models\ndef fit_and_score(models, X_train, X_test, y_train, y_test):\n    \"\"\"\n    Fits and evaluates given machine learning models.\n    models : a dict of differetn Scikit-Learn machine learning models\n    X_train : training data (no labels)\n    X_test : testing data (no labels)\n    y_train : training labels\n    y_test : test labels\n    \"\"\"\n    # Set random seed\n    np.random.seed(42)\n    # Make a dictionary to keep model scores\n    model_scores = {}\n    # Loop through models\n    for name, model in models.items():\n        # Fit the model to the data\n        model.fit(X_train, y_train)\n        # Evaluate the model and append its score to model_scores\n        model_scores[name] = model.score(X_test, y_test)\n    return model_scores","75c0b69d":"model_scores = fit_and_score(models=models,\n                             X_train=X_train,\n                             X_test=X_val,\n                             y_train=y_train,\n                             y_test=y_val)\n\nmodel_scores","ef877e35":"# Function to create a data frame for every array and label\n","fb56113e":"# Splitting data into training and test sets\n","439d7b7c":"# Create a Function to extract  the info from 3 sensors\n","7ad82992":"# Reading the NPY file\n","504e2f2b":"# Create a Function to convert extracted Time series into tensors\n","0bb467a5":"# A function to Show all the waveforms contained in one Np.array","004db215":"# Writing a function to show the frequency response"}}