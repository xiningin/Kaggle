{"cell_type":{"76d09aa2":"code","2d7507b0":"code","ec5006d5":"code","d664d186":"code","1c784965":"code","c2422a3c":"code","2598f173":"code","def99a9c":"code","afcdba1e":"code","a9f4a5c4":"code","3fd829f0":"code","511b16bd":"code","9abce80f":"code","54a63ebf":"code","8f38dec2":"code","5411bfe0":"code","6cf128f9":"code","bad41bfb":"code","b8a2ac5b":"code","09e36012":"code","64be6f43":"code","e048560c":"code","37ca41b5":"code","c2c870cc":"code","f5901938":"code","4ea17c1e":"code","638c9b74":"code","2620c40c":"code","5e9c4c48":"code","65033b10":"code","b3b0c5c1":"code","e6b2533b":"code","7c24a54a":"code","2723a283":"code","4a9c0346":"code","c6bc4783":"code","cf89d24a":"code","9b42dd7d":"code","f2bc7fef":"code","d2eb23e9":"code","52436e42":"code","c83d1c7c":"code","bfe70f48":"code","491645d5":"code","de5e79a2":"code","2eccd49c":"markdown","9db6e099":"markdown","5ba89f5a":"markdown","6083aef2":"markdown","ceccb67b":"markdown","a646cfa2":"markdown","8f61e106":"markdown","040b5bd2":"markdown","6db3f856":"markdown","caada981":"markdown","fdb30124":"markdown","20aadf0c":"markdown","89663536":"markdown","884fe47a":"markdown","a1962b8e":"markdown","35bbfd8a":"markdown","0d028903":"markdown","27440801":"markdown","3c6354d1":"markdown","d3cc659a":"markdown","6dfb681a":"markdown","43cbd257":"markdown","b4d447a9":"markdown"},"source":{"76d09aa2":"#Importing libraries\nimport pandas as pd\nimport seaborn as sns\nimport numpy as np\nimport folium as fo\nimport matplotlib.pyplot as plt\nfrom sklearn.cluster import KMeans\nfrom yellowbrick.cluster import KElbowVisualizer","2d7507b0":"#reading data\ndf=pd.read_csv('\/kaggle\/input\/montcoalert\/911.csv')","ec5006d5":"# A quick loock in the data\ndf.head()","d664d186":"df.info()","1c784965":"#Creating columns that might be useful\ndf['timeStamp']=df['timeStamp'].apply(pd.Timestamp)\ndf['Year']=df.timeStamp.dt.year\ndf['Month']=df.timeStamp.dt.month","c2422a3c":"df['Year'].value_counts()","2598f173":"#since 2015 and 2020 are not complete, we're not using them\ndf=df[df['Year'].isin([2016,2017,2018,2019])]","def99a9c":"df['title'].unique()","afcdba1e":"#There are 3 major categories: EMS (Emergency Medical Services), Traffic and Fire, \n#so let's use them to aggregate data\ndf['title']=df['title'].str.split(':').str.get(0)","a9f4a5c4":"#How many calls per year?\nplt.figure(figsize=(10,6))\nsns.set_palette('tab10')\nsns.set_style('darkgrid')\nsns.countplot(x='Year',data=df)\nplt.title('Number of calls per year')","3fd829f0":"#How many calls per month over the years?\nplt.figure(figsize=(13,7))\nsns.set_style('darkgrid')\nsns.countplot(x='Month',hue='Year',data=df)\nplt.title('Number of calls per month over the years')","511b16bd":"#How many calls per category (title)?\nplt.figure(figsize=(10,6))\nsns.set_style('darkgrid')\nsns.countplot(x='Year',hue='title',data=df,hue_order=['EMS','Traffic','Fire'])\nplt.title('Number of calls per per category over the years')","9abce80f":"#How many calls per category (title) over the months?\nplt.figure(figsize=(10,6))\nsns.set_style('darkgrid')\nsns.countplot(x='Month',hue='title',data=df,hue_order=['EMS','Traffic','Fire'])\nplt.title('Number of calls per per category over the months')","54a63ebf":"EMS=df[df['title']=='EMS']","8f38dec2":"#Top 25 towns with more calls\ntop_25=EMS['twp'].value_counts(ascending=False,normalize=True).head(25).index\nplt.figure(figsize=(10,6))\nsns.countplot(y='twp',data=EMS,order=top_25)\nplt.title('Top 25 towns with more calls')","5411bfe0":"df.head(3)","6cf128f9":"#Let's plot a few points to take a look\nMap=fo.Map([40.121354,-75.363829],zoom_start=7)\nrandom_index=np.random.choice(df.index,1000) #getting some random points to plot\nfor ind in random_index:\n    lat=df.loc[ind,'lat']\n    long=df.loc[ind,'lng']\n    fo.CircleMarker([lat,long],radius=2).add_to(Map)\nMap","bad41bfb":"sns.scatterplot(x=EMS['lat'],y=EMS['lng'],data=df, alpha=0.3)","b8a2ac5b":"#Analysing Latitude\nsns.boxplot(x=EMS['lat'])","09e36012":"#Getting outliers data (take a look at https:\/\/medium.com\/analytics-vidhya\/outlier-treatment-9bbe87384d02)\nQ1=EMS['lat'].quantile(.25)\nQ3=EMS['lat'].quantile(.75)\nIQR=Q3-Q1\nLower_Whisker=Q1-1.5*IQR\nUpper_Whisker = Q3+1.5*IQR","64be6f43":"#How many outliers?\nEMS[EMS['lat']>Upper_Whisker].shape[0]+EMS[EMS['lat']<Lower_Whisker].shape[0]","e048560c":"#Let's save the outliers for posteriori analysis\noutliers=EMS[(EMS['lat']>Upper_Whisker)|(EMS['lat']<Lower_Whisker)]","37ca41b5":"#removing outliers\nEMS_treated=EMS[(EMS['lat']<Upper_Whisker)&(EMS['lat']>Lower_Whisker)]","c2c870cc":"#Plotting the treated data \nsns.scatterplot(x=EMS_treated['lat'],y=EMS_treated['lng'],data=df)","f5901938":"#boxplot with treated data\nsns.boxplot(x=EMS_treated['lat'])","4ea17c1e":"#the same process for long\nsns.boxplot(x=EMS_treated['lng'])","638c9b74":"Q1=EMS_treated['lng'].quantile(.25)\nQ3=EMS_treated['lng'].quantile(.75)\nIQR=Q3-Q1\nLower_Whisker=Q1-1.5*IQR\nUpper_Whisker = Q3+1.5*IQR","2620c40c":"#How many outliers?\nEMS_treated[EMS_treated['lng']>Upper_Whisker].shape[0]+EMS_treated[EMS_treated['lng']<Lower_Whisker].shape[0]","5e9c4c48":"#saving outliers\noutliers=pd.concat([EMS_treated[(EMS_treated['lng']>Upper_Whisker)|(EMS_treated['lng']<Lower_Whisker)],outliers])","65033b10":"#cleaning longitude outliers\nEMS_treated=EMS_treated[(EMS_treated['lng']<Upper_Whisker)&(EMS_treated['lng']>Lower_Whisker)]","b3b0c5c1":"#Total outliers\noutliers.shape[0]","e6b2533b":"#Percentagem in relation to the whole data\n(outliers.shape[0]\/EMS.shape[0])*100","7c24a54a":"#Let's see again the treated data\n#It's clear the improvement of this plot in relation to the first ones\nsns.scatterplot(x=EMS_treated['lat'],y=EMS_treated['lng'],data=df)","2723a283":"sns.boxplot(x=EMS_treated['lng'])","4a9c0346":"outliers.head(1)","c6bc4783":"#Outliers in red\nMap_outliers=fo.Map([40.269061,-75.69959],zoom_start=6)\nfor index,row in outliers.iterrows():\n    lat=row['lat']\n    long=row['lng']\n    fo.CircleMarker([lat,long],radius=2,color='red').add_to(Map_outliers)\n\n# Treated data in blue\nrandom_indexes=np.random.choice(EMS_treated.index,2000)\nfor rand_in in random_indexes:\n    lat=EMS_treated.loc[rand_in,'lat']\n    long=EMS_treated.loc[rand_in,'lng']\n    fo.CircleMarker([lat,long],radius=2,color='blue').add_to(Map_outliers)\nMap_outliers","cf89d24a":"#Getting lat long\nX=np.array(EMS_treated[['lat','lng']])","9b42dd7d":"#creating instance of KMeans\nkmeans=KMeans(init='k-means++')","f2bc7fef":"#Creating instance of Elbow Visualizer to find how many clusters we use\nvisualizer = KElbowVisualizer(model=kmeans, k=(5,20))","d2eb23e9":"#Fitting the model\nvisualizer.fit(X)      ","52436e42":"clustering=KMeans(init='k-means++',n_clusters=10)\nclustering.fit(X)    ","c83d1c7c":"clusters=clustering.cluster_centers_","bfe70f48":"Map=fo.Map([ 40.13572425, -75.20909773],zoom_start=8)\nfor i in range(1000):\n    random_index=np.random.choice(EMS_treated.index,1)\n    lat=df.loc[random_index,'lat']\n    long=df.loc[random_index,'lng']\n    fo.Circle([lat,long],radius=2).add_to(Map)     \n    \nfor c in clusters:\n    lat=c[0]\n    long=c[1]\n    fo.RegularPolygonMarker([lat,long],radius=4,number_of_sides=3,color='black').add_to(Map) \nMap","491645d5":"#Clustering including outliers\nX_outliers=np.array(EMS[['lat','lng']])\nclustering_outliers=KMeans(init='k-means++',n_clusters=10)\nclustering_outliers.fit(X_outliers)\nclusters_outliers=clustering_outliers.cluster_centers_","de5e79a2":"#Adding the outlier clusters to the Map\nfor c in clusters_outliers:\n    lat=c[0]\n    long=c[1]\n    fo.RegularPolygonMarker([lat,long],radius=4,number_of_sides=3,color='red').add_to(Map) \nMap","2eccd49c":"These 2 last plots show that the number of calls doesn't vary much over the months. Apparently there's not some kind of seasonality.","9db6e099":"How many clusters should we use?\nI'm using the well known elbow technique to find out. (Take a look at https:\/\/www.scikit-yb.org\/en\/latest\/api\/cluster\/elbow.html)\n\nAn alternative is to use an automatic clustering algorithm.","5ba89f5a":"It's possible to see a big difference already. Those who knows a bit about latitude and longitude know that a small variance in any value (lat or long) can make a big difference. Let's repeat the process for longitude.","6083aef2":"Let's see where the clusters were positioned with a few points","ceccb67b":"# 2. Treating outliers","a646cfa2":"If we zoom out, the algorithm has placed clusters far away from PA. That's because those outlier points we recognized as clusters. This shows us the importance of make a good data cleaning\/preparing. That's crucial for any machine learning model.","8f61e106":"# 3. Clustering","040b5bd2":"Apparently the data is well concentrated in a particular region of PA. Let's make a scatterplot with the whole data","6db3f856":"We can just drop the outliers since they are not so representative. If this was the case, we could consider a way to treat these data in order to use them. \n","caada981":"A clusterization can gives us an ideia of how to alocate our facilities in order to attend the anual emergency calls. Of course in a real case we cannot rely our answer only in a clustering result, but this is a good \"first kick\" to start our analysis, since KMeans clustering is based on data distribution.","fdb30124":"And what if we had used the whole data, that is, without treating the outliers?","20aadf0c":"# 1. Loading and preparing data","89663536":"If we zoom out we can see points in other states of USA. Also there are points even in the ocean and in another continent.","884fe47a":"That's all folks. I'll be glad to hear your feedback and suggestions. Thank you so much!","a1962b8e":"Now we can plot these data in a real map to see if there is really some difference","35bbfd8a":" In order to answer the question presented in the introduction, we will consider only EMS (Emergency Medical Services) to make the clustering analysis, considering the hospitals are the ones responsible for attending this service category.","0d028903":"One may say that there are points next to the aggregated data (those near to West Grove and East Greenville, for instance)  and even so they were considered as outliers. Again, these data are not so representative in relation to the whole data and, in a practical way, these calls can easily be attended since they are not far from the massive data, where the facilities are to be located in order to attend the calls.","27440801":"Apparently there are some outliers. Let's use boxplot to do this analysis.","3c6354d1":"We will use k=10 according to the Visualizer.","d3cc659a":"Hello! I'm a begginer and I had the following ideia about this dataset:\n\n    What if we were asked to answer the following question: \n    Where should we place facilities in order to attend the emergency calls?\n\nTo do so, I intend to make a clustering analysis and show how outliers can be damaging in the results if not well treated. \n\nIt's a simple analysis and the main goal here is to show the importance of treating outliers in a clusterization (mainly for begginers like me). So please, don't get alarmed if something doesn't make much sense for this particular dataset.\n\nSo, this notebook has the following objectives:\n1. How to treat outliers?\n1. Make a cluster analysis (KMeans) comparing outliers with treated data  \n\n\nSummary:\n1. Loading and preparing data\n    * Quick overview of the data\n2. Treating outliers\n    * Geographic distribution of the data (using Folium)\n    * Treating outliers with Boxplot\n    * Cleaning outliers\n3. Clustering\n    * KMeans\n    * Elbow technique\n    * Treated data\n    * Non treated data\n    * Comparison\n\n\nThanks in advance. I hope you enjoy it!\n\nReferences: \n\nhttps:\/\/medium.com\/analytics-vidhya\/outlier-treatment-9bbe87384d02 \n\nhttps:\/\/www.scikit-yb.org\/en\/latest\/api\/cluster\/elbow.html\n\n","6dfb681a":"The number doesn't change much from one to another year","43cbd257":"Once we have treated the outliers, let's work on the clusterization.","b4d447a9":"Apparently the number of calls doesn't change much per category. We could make a deeper analysis into each category, but that's not my goal here."}}