{"cell_type":{"2312ea89":"code","da73c32b":"code","437f544d":"code","55485ddc":"code","40503dea":"code","34aee16f":"code","b5f9247c":"code","0b48955c":"code","934b8369":"code","4b9c71a5":"code","4f726fca":"code","3e6de626":"code","c0abd936":"code","99c2a957":"code","d2bff6e2":"code","a6d6207f":"code","0af502e3":"code","b956b8a4":"code","e98ed07e":"code","f247b510":"code","884596cd":"code","fdfa5a14":"code","491d9ed9":"code","3b072012":"code","a1800119":"code","24c3c0df":"code","c334dcb2":"code","f2f8dede":"code","e56022e1":"code","5ca49069":"code","8f09d60d":"code","db07ebfd":"code","fc41ace8":"code","0a10f9c5":"code","0bd79ae5":"code","3443514a":"code","b54bc1bd":"code","062e4f40":"code","9cdf660f":"code","a45b9dbb":"code","29f42953":"code","e19e21a2":"code","ff8beedb":"code","3b78c745":"code","3996aa38":"code","1285a4df":"code","0e98761a":"code","5bbcc5ea":"code","5aa18742":"code","1bb9e4d2":"code","ade4cbc1":"code","a0d46cd0":"code","07f9e46e":"code","10b60614":"code","6c5b509c":"code","9c1ff31f":"code","928bbd75":"code","0562c177":"code","21c80cd8":"code","11499cd5":"code","689747c8":"code","33bd8598":"code","0d2f2ad2":"code","510bc2ff":"code","c374828f":"code","760f935f":"code","52e24584":"code","5cd12ddd":"code","f2f56dc4":"code","2d88a168":"code","6eb08e06":"code","cbca4e6b":"code","d8c60288":"code","c622175f":"code","efd2a277":"code","8c817f02":"code","a85ca11f":"code","45895d5f":"code","4c4282d1":"code","cb5bd6d4":"code","c27110c7":"code","c13ad8ae":"code","4782578d":"code","705d7d7f":"code","5646a531":"code","d04a8cb3":"code","990f41ab":"code","58ed62c8":"code","fc0d4b44":"code","be191a42":"code","4ae1c8e6":"code","56091abf":"code","4077f27a":"code","29171568":"code","6acdc8d6":"code","45b74114":"code","496d668d":"code","2cedbe55":"code","50da72ba":"code","80ec89c2":"code","4f14280c":"code","0cfb44cf":"code","10bea9e4":"code","89f545ca":"code","6892d643":"code","2b6a3ca6":"code","5c5d5287":"code","13db4220":"code","b44127ab":"code","670916ab":"code","9da120bc":"code","cf218571":"code","c48e5d24":"code","5e933002":"code","41b5887e":"code","e207e818":"code","4fe5b144":"code","bb9ab712":"code","1a93d354":"code","4a6b64ee":"code","0c42f06d":"code","fa95b5a0":"code","0df157d7":"code","16d18c53":"code","df238002":"code","11112d0a":"code","3f10ad87":"code","7b8acf04":"code","ef3a9999":"code","f991ba57":"code","bc17960d":"code","68dd5de3":"code","7e02bd19":"code","7c9f2bb5":"code","55027afc":"code","a976dfbb":"code","2972cbd4":"code","cbbcefc3":"code","5e9b3f0b":"code","8e142207":"code","bdea6d99":"code","247d31b5":"code","d22007aa":"code","99095ec9":"code","1666d1b5":"code","c869e3e4":"code","ec86f46b":"code","5541d7e7":"code","39c1e5d0":"code","3f2dec8f":"code","e0f0670d":"markdown","25dadc50":"markdown","1f9d5842":"markdown","a1d43c2a":"markdown","017bfc33":"markdown","ed156b27":"markdown","5a2c7cc7":"markdown","f877463d":"markdown","8b699333":"markdown","c02d1884":"markdown","3ed43c42":"markdown","b6697ccc":"markdown","50127288":"markdown","c8e05cee":"markdown","d7f30765":"markdown","83b7cf74":"markdown","f30a282c":"markdown","7a4e23ad":"markdown","21fece25":"markdown","bef8b775":"markdown","b0e8bb0c":"markdown","84398adb":"markdown","15e3045e":"markdown","02be1802":"markdown","495a83b5":"markdown","4be053cb":"markdown","d6222265":"markdown","ac01c33c":"markdown","794d4a47":"markdown","84db264f":"markdown","4630463f":"markdown","d92bfdd8":"markdown","ea4e0ea7":"markdown","4629d1b7":"markdown","4cb8f319":"markdown","416f4e7e":"markdown","113ea08e":"markdown","fb450ce2":"markdown","fb99b323":"markdown","3a78c58b":"markdown","baf8a548":"markdown","3ed05fad":"markdown","41e8f9ba":"markdown","e1a7729e":"markdown","f545510f":"markdown","04a76afb":"markdown","f36b0458":"markdown"},"source":{"2312ea89":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","da73c32b":"import matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.metrics import classification_report,confusion_matrix,plot_roc_curve,accuracy_score\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom imblearn.combine import SMOTETomek\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, BaggingClassifier, GradientBoostingClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom xgboost import XGBClassifier\nfrom catboost import CatBoostClassifier\nfrom lightgbm import LGBMClassifier\nfrom sklearn.model_selection import train_test_split, GridSearchCV, RandomizedSearchCV\nfrom sklearn.svm import SVC\n\n\npd.set_option('display.max_columns',None)#to make all columns visible","437f544d":"df = pd.read_csv('\/kaggle\/input\/employee-attrition\/HR-Employee-Attrition.csv')","55485ddc":"df.head()","40503dea":"df.info()\n#looks like there is no null values in the data","34aee16f":"df.isna().sum()","b5f9247c":"def normal(col):\n    print('No of unique values:\\t', df[col].nunique())\n    print('Values Count:\\n',df[col].value_counts())","0b48955c":"def percent_cat(col):\n    groupped = df.groupby([col])['Attrition'].value_counts()\n    y=0\n    for i in groupped.index:\n        total_val = len(df[df[col]==i[0]])\n        print(f'Percent of {i[1]} Employee Attrition of {i[0]} employee in column {col} is {round((groupped[i]\/total_val)*100,2)}%')\n        y+=1\n        if y==2:\n            print('\\n')\n            y=0","934b8369":"normal('Age')","4b9c71a5":"def insight(col):\n    plt.figure(figsize = (16,8))\n    ax = sns.countplot(x = df[col], hue = df['Attrition'])\n\n    for p in ax.patches:\n        ax.annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.15, p.get_height()+13))","4f726fca":"insight('BusinessTravel')","3e6de626":"percent_cat('BusinessTravel')","c0abd936":"normal('DailyRate')","99c2a957":"insight('Department')","d2bff6e2":"percent_cat('Department')","a6d6207f":"normal('DistanceFromHome')","0af502e3":"plt.figure(figsize = (16,10))\nax = sns.countplot(x = df['DistanceFromHome'], hue = df['Attrition'], palette='Accent')\n\nfor p in ax.patches:\n        ax.annotate('{}'.format(p.get_height()), (p.get_x()-0.01, p.get_height()+1))","b956b8a4":"percent_cat('DistanceFromHome')","e98ed07e":"df.groupby(['JobRole', 'Attrition']).agg({'DistanceFromHome':np.mean})","f247b510":"insight('JobRole')","884596cd":"percent_cat('JobRole')","fdfa5a14":"insight('Education')","491d9ed9":"percent_cat('Education')","3b072012":"insight('EducationField')","a1800119":"percent_cat('EducationField')","24c3c0df":"normal('EmployeeCount')","c334dcb2":"normal('EmployeeNumber')","f2f8dede":"insight('EnvironmentSatisfaction')","e56022e1":"percent_cat('EnvironmentSatisfaction')","5ca49069":"insight('Gender')","8f09d60d":"percent_cat('Gender')","db07ebfd":"normal('HourlyRate')","fc41ace8":"plt.figure(figsize=(10,6))\nsns.kdeplot(x = df['HourlyRate']) \n#Hourly rate follows normal distribution","0a10f9c5":"insight('JobInvolvement')","0bd79ae5":"percent_cat('JobInvolvement')","3443514a":"insight('JobSatisfaction')","b54bc1bd":"percent_cat('JobSatisfaction')","062e4f40":"insight('MaritalStatus')","9cdf660f":"percent_cat('MaritalStatus')","a45b9dbb":"normal('MonthlyIncome')","29f42953":"normal('MonthlyRate')","e19e21a2":"df.groupby(['Education','Attrition']).agg({'MonthlyIncome':np.mean}).head(30)","ff8beedb":"insight('NumCompaniesWorked')","3b78c745":"percent_cat('NumCompaniesWorked')","3996aa38":"normal('Over18')\n#This column has only one unique column, so we can drop this column","1285a4df":"insight('OverTime')","0e98761a":"percent_cat('OverTime')","5bbcc5ea":"insight('PercentSalaryHike')","5aa18742":"percent_cat('PercentSalaryHike')","1bb9e4d2":"insight('PerformanceRating')","ade4cbc1":"percent_cat('PerformanceRating')","a0d46cd0":"insight('RelationshipSatisfaction')","07f9e46e":"percent_cat('RelationshipSatisfaction')","10b60614":"normal('StandardHours')\n#There is only one value in this column","6c5b509c":"insight('StockOptionLevel')","9c1ff31f":"percent_cat('StockOptionLevel')","928bbd75":"groupped = df.groupby(['JobLevel'])['StockOptionLevel'].value_counts()\ny=0\nfor i in groupped.index:\n    total_val = len(df[df['JobLevel']==i[0]])\n    print(f'Percent of Stock Option Level {i[1]} in joblevel {i[0]} is {round((groupped[i]\/total_val)*100,2)}%')\n    y+=1\n    if y==4:\n        print('\\n')\n        y=0","0562c177":"normal('JobLevel')","21c80cd8":"df.groupby(['JobLevel','StockOptionLevel'])['Attrition'].value_counts()","11499cd5":"def group(col):\n    groupped = df.groupby(col)['Attrition'].value_counts()\n    return groupped","689747c8":"group('TotalWorkingYears')","33bd8598":"percent_cat('TrainingTimesLastYear')","0d2f2ad2":"percent_cat('WorkLifeBalance')","510bc2ff":"normal('YearsAtCompany')","c374828f":"percent_cat('YearsAtCompany')","760f935f":"percent_cat('YearsInCurrentRole')","52e24584":"percent_cat('YearsSinceLastPromotion')","5cd12ddd":"normal('YearsWithCurrManager')","f2f56dc4":"percent_cat('YearsWithCurrManager')","2d88a168":"df['Attrition'] = np.where(df['Attrition'] == 'No', 0 ,1)","6eb08e06":"normal('Attrition')","cbca4e6b":"final_df = df.drop(['EmployeeCount', 'Over18', 'StandardHours', 'EmployeeNumber'], axis =1)\n#Since these columns have unique values, I'm dropping these columns","d8c60288":"final_df.head()","c622175f":"cat_columns = final_df.select_dtypes(exclude = np.number).columns\n\ncat_columns","efd2a277":"encoded_df  = pd.DataFrame(data = pd.get_dummies(df[cat_columns], drop_first=False),index=final_df.index)\n\nencoded_df.head()","8c817f02":"encoded_df.shape","a85ca11f":"final_df.drop(cat_columns,axis=1,inplace=True)\n#Removing categorical columns\nfinal_df.head()","45895d5f":"final_concat_df = pd.concat([final_df,encoded_df], axis =1)\nfinal_concat_df.head()","4c4282d1":"X = final_concat_df.drop('Attrition', axis =1)\ny = final_concat_df['Attrition']","cb5bd6d4":"sc = StandardScaler()\n\nsc.fit(X)","c27110c7":"X_scaled = pd.DataFrame(data = sc.transform(X), columns = X.columns)\n\nX_scaled.head()","c13ad8ae":"X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.3, random_state=123)","4782578d":"y_train.value_counts()","705d7d7f":"def metrics(y_true,y_pred):\n    print('Confusion Matrix:\\n', confusion_matrix(y_true, y_pred))\n    print('\\n\\nAccuracy Score:\\n', accuracy_score(y_true, y_pred))\n    print('\\n\\nClassification Report: \\n', classification_report(y_true, y_pred))","5646a531":"lg = LogisticRegression()\n\nlg.fit(X_train, y_train)","d04a8cb3":"train_pred = lg.predict(X_train)\n\ntest_pred = lg.predict(X_test)","990f41ab":"print('Train Metrics')\nmetrics(y_train, train_pred)","58ed62c8":"print('Test Metrics')\nmetrics(y_test, test_pred)","fc0d4b44":"plot_roc_curve(lg, X_train, y_train)","be191a42":"knn = KNeighborsClassifier(n_neighbors=5,n_jobs=-1)\n\nknn.fit(X_train, y_train)","4ae1c8e6":"train_pred_knn = knn.predict(X_train)\n\ntest_pred_knn = knn.predict(X_test)","56091abf":"print('Train Metrics')\n\nmetrics(y_train, train_pred_knn)","4077f27a":"print('Test Metrics')\n\nmetrics(y_test, test_pred_knn)","29171568":"plot_roc_curve(knn, X_train, y_train)","6acdc8d6":"error_rate = []\n\n# Will take some time\nfor i in range(1,40):\n    \n    knn = KNeighborsClassifier(n_neighbors=i, n_jobs=-1)\n    knn.fit(X_train,y_train)\n    pred_i = knn.predict(X_test)\n    error_rate.append(np.mean(pred_i != y_test))","45b74114":"plt.figure(figsize=(10,6))\nplt.plot(range(1,40),error_rate,color='blue', linestyle='dashed', marker='o',\n         markerfacecolor='red', markersize=10)\nplt.title('Error Rate vs. K Value')\nplt.xlabel('K')\nplt.ylabel('Error Rate')","496d668d":"# n_neighbours 9 has lower error rate for test value, we can choose that","2cedbe55":"knn = KNeighborsClassifier(n_neighbors=9,n_jobs=-1)\n\nknn.fit(X_train, y_train)","50da72ba":"train_pred_knn = knn.predict(X_train)\n\ntest_pred_knn = knn.predict(X_test)","80ec89c2":"print('Train Metrics')\n\nmetrics(y_train, train_pred_knn)","4f14280c":"print('Test Metrics')\n\nmetrics(y_test, test_pred_knn)","0cfb44cf":"gb = GaussianNB()\n\ngb.fit(X_train, y_train)","10bea9e4":"train_pred_gb = gb.predict(X_train)\n\ntest_pred_gb = gb.predict(X_test)","89f545ca":"print('Train Metrics')\n\nmetrics(y_train, train_pred_gb)","6892d643":"print('Test Metrics')\n\nmetrics(y_test, test_pred_gb)","2b6a3ca6":"sm = SMOTETomek(sampling_strategy=0.5,n_jobs=-1)","5c5d5287":"X_train_sm, y_train_sm = sm.fit_resample(X_train, y_train)\n\nprint(f'The Number of class before the fit \\n {y_train.value_counts()}')\n\nprint(f'The Number of class after the fit \\n {y_train_sm.value_counts()}')","13db4220":"X_train.shape","b44127ab":"X_train_sm.shape","670916ab":"lg = LogisticRegression(max_iter=100)\n\nlg.fit(X_train_sm, y_train_sm)","9da120bc":"train_pred = lg.predict(X_train_sm)\n\ntest_pred = lg.predict(X_test)","cf218571":"print('Test Metrics')\n\nmetrics(y_test, test_pred)","c48e5d24":"print('Train Metrics')\nmetrics(y_train_sm,train_pred)","5e933002":"dtree = DecisionTreeClassifier()","41b5887e":"dtree.fit(X_train, y_train)\n\ntrain_pred_tr = dtree.predict(X_train)\n\ntest_pred_tr = dtree.predict(X_test)\n\nmetrics(y_test,test_pred_tr)","e207e818":"metrics(y_train, train_pred_tr)\n\n#Decision Tree Results in Over fitting","4fe5b144":"bag = BaggingClassifier(base_estimator=dtree)","bb9ab712":"bag.fit(X_train, y_train)\n\ntrain_pred_bag = bag.predict(X_train)\n\ntest_pred_bag = bag.predict(X_test)\n\nmetrics(y_test,test_pred_bag)","1a93d354":"metrics(y_train, train_pred_bag)","4a6b64ee":"rf = RandomForestClassifier()","0c42f06d":"rf.fit(X_train, y_train)\n\ntrain_pred_rf = rf.predict(X_train)\n\ntest_pred_rf = rf.predict(X_test)\n\nmetrics(y_test,test_pred_rf)","fa95b5a0":"ada = AdaBoostClassifier()","0df157d7":"ada.fit(X_train, y_train)\n\ntrain_pred_ada = ada.predict(X_train)\n\ntest_pred_ada = ada.predict(X_test)\n\nmetrics(y_test,test_pred_ada)","16d18c53":"gb = GradientBoostingClassifier()","df238002":"gb.fit(X_train, y_train)\n\ntrain_pred_gb = gb.predict(X_train)\n\ntest_pred_gb = gb.predict(X_test)\n\nmetrics(y_test,test_pred_gb)","11112d0a":"xgb = XGBClassifier()","3f10ad87":"xgb.fit(X_train, y_train)\n\ntrain_pred_xgb = xgb.predict(X_train)\n\ntest_pred_xgb = xgb.predict(X_test)\n\nmetrics(y_test,test_pred_xgb)","7b8acf04":"params = {\n    'learning_rate' : [0.02,0.05, 0.08],\n    'max_depth' : [3, 4, 5, 6, 8],\n    'min_child_weight': [1, 3, 5],\n    'gamma' : [0.0,0.1,0.2], #less than 1 make sure\n    'colsample_bytree':[0.3,0.4,0.5] #less than 1\n}","ef3a9999":"r_xgb = RandomizedSearchCV(xgb, params, n_jobs=-1, verbose=3)","f991ba57":"r_xgb.fit(X_train, y_train)","bc17960d":"r_xgb.best_params_","68dd5de3":"best_xgb = XGBClassifier(min_child_weight = 5, max_depth = 4, learning_rate = 0.08, gamma =0.0, colsample_bytree = 0.3)","7e02bd19":"best_xgb.fit(X_train, y_train)\n\ntrain_pred_xgb = best_xgb.predict(X_train)\n\ntest_pred_xgb = best_xgb.predict(X_test)\n\nmetrics(y_test,test_pred_xgb)","7c9f2bb5":"lgm = LGBMClassifier()","55027afc":"lgm.fit(X_train, y_train)\n\ntrain_pred_lgm = lgm.predict(X_train)\n\ntest_pred_lgm = lgm.predict(X_test)\n\nmetrics(y_test,test_pred_lgm)","a976dfbb":"cat = CatBoostClassifier()","2972cbd4":"cat.fit(X_train, y_train)\n\ntrain_pred_cat = cat.predict(X_train)\n\ntest_pred_cat = cat.predict(X_test)\n\nmetrics(y_test,test_pred_cat)","cbbcefc3":"params_cat = {\n    'learning_rate' : [0.02,0.05, 0.07],\n    'max_depth' : [3, 4, 5, 6, 8],\n    'min_child_samples': [1, 3, 5],\n    'l2_leaf_reg':[5,10,15]\n}","5e9b3f0b":"r_cat = RandomizedSearchCV(cat, params_cat, n_jobs=-1, verbose=1, cv=3)","8e142207":"r_cat.fit(X_train,y_train)","bdea6d99":"r_cat.best_params_","247d31b5":"best_cat = CatBoostClassifier(min_child_samples=1, max_depth=5, learning_rate = 0.05, l2_leaf_reg = 15)","d22007aa":"best_cat.fit(X_train, y_train)\n\ntrain_pred_cat = best_cat.predict(X_train)\n\ntest_pred_cat = best_cat.predict(X_test)\n\nmetrics(y_test,test_pred_cat)","99095ec9":"svm = SVC()","1666d1b5":"svm.fit(X_train, y_train)\n\ntrain_pred_svm = svm.predict(X_train)\n\ntest_pred_svm = svm.predict(X_test)\n\nmetrics(y_test,test_pred_svm)","c869e3e4":"c = [1, 0.25, 0.5, 0.75]\nkernels = ['linear', 'rbf']\ngammas = ['auto', 0.01, 0.001, 1]","ec86f46b":"grid_svm = GridSearchCV(estimator=svm, param_grid=dict(kernel=kernels, C=c, gamma = gammas), cv=3, verbose=3, n_jobs=-1)","5541d7e7":"grid_svm.fit(X_train, y_train)","39c1e5d0":"grid_svm.best_score_","3f2dec8f":"test_pred_grid = grid_svm.predict(X_test)\n\nmetrics(y_test,test_pred_grid)","e0f0670d":"**Observation**:\n* Education level 5 with no job change has higher average of Monthly Income.\n* In all category education level, employees changed their job due to low monthly Income.","25dadc50":"**Observation**\n* 3rd level and 1st level education category employee has higher possibility of employee attrition","1f9d5842":"### Conclusion:\n* Logistics Regression model gave better result.\n* SMOTE implemented Logistics model gave a slight improvement  Recall and Precision Score","a1d43c2a":"**Observation**:\n* Environment Satisfaction with value 3 & 4 have higher chance of not changing their job.\n* Employees with environment satisfaction 1 have changed thir job more.","017bfc33":"### Bagging ","ed156b27":"**Observation**:\n* Employees who are in current role less than 1 year in company has higher possibilities of changing their Job.","5a2c7cc7":"**Observation:**\n* Employees with level 1 Work life balance have changed job in larger amount.","f877463d":"####  SMote ","8b699333":"**Observation**\n* People with less Distance from Home have the less chances of lead to employee attrition\n* People with higher Distance from Home may lead to employee attrition ","c02d1884":"**Observation**:\n* Quite Interesting Bachelor employees changed their job in large amount.","3ed43c42":"**Observation**\n\n* Looks like data is imbalanced","b6697ccc":"#### Naive Bayes","50127288":"**Observation**\n* From the above analysis Sales Representative employees have changed their job more\n* Only lower percent of Research Director were not changed their job.","c8e05cee":"**Observation**\n* Lower the salary hike of employees, higher the chance of job change.","d7f30765":"**Observation**:\n* Employees who joined company within one year have changed their job in higher percent.","83b7cf74":"**Observation**\n* From the above analysis Employees with job level 5 was given higher percent of Stock.","f30a282c":"### SVM","7a4e23ad":"#### Scaling","21fece25":"**Observation**\n* There is no significant difference between Performance Rating level 3 and 4.","bef8b775":"**Observation**:\n* Job Satisfaction level 1 employees have higher number of job change, whereas Job Satisfaction level 4 employees have lesser number of job change.","b0e8bb0c":"**Observation:**\n* Employees who have had no stock option have changed their job in high percent.","84398adb":"**Observations:**\n* JobInvolvement level 1 employees have higher number of job change, whereas Job Involvement level 4 employees have lesser number of job change.","15e3045e":"#### Gradient Boosting","02be1802":"**Observation**\n* Each row of Employee Number column has unique value, so we can drop this column during modelling","495a83b5":"**Observation:**\n* Employees who were given training recently have changed job in large amount.","4be053cb":"**Observation**\n* Employee count column has only one value in all rows, so probably we can drop this column.","d6222265":"### Exploratory Data Analysis - EDA","ac01c33c":"### Decision Tree","794d4a47":"**Observation**:\n* Employees with age 35 were higher.","84db264f":"**Observation**\n* R&D Department employees have lesser chance of job change.\n* Sales Department employees have higher chance of job change.","4630463f":"**Observation:**\n* Employees who got promotion before 15 years have changed their job in higher percent.","d92bfdd8":"#### Modelling","ea4e0ea7":"**Observation**:\n* Looks like employee who travel frequently changes their job.","4629d1b7":"#### Light GBM","4cb8f319":"**Observation**:\n* There is no significant difference between male and female employees in changing their job\n* More number of employees were male.","416f4e7e":"#### CAT Boost","113ea08e":"### ADABoost","fb450ce2":"**Observation**:\n* Employees who did overtime have higher chance of changing their job","fb99b323":"**Observation**\n* Life Sciences and Medical education field employee has higher possibility of not changing their job.\n* Human Resource and Technical Degree employees were changed their job in more amount.","3a78c58b":"#### XGBoost","baf8a548":"**Observation:**\n* Employees with Relationship Satisfaction level 1 changed their job in large amount.\n","3ed05fad":"**Observation**:\n* Employees who have worked in less than 4 companies have lesser chance of changing their job.\n* Higher the number of companies worked, higher the chance of changing their job.","41e8f9ba":"**Observation:**\n* Employees who got in touch with new manager recently have changed their job in larger amount. Maybe due to the manager pressure.","e1a7729e":"### Feature Engineering","f545510f":"#### spliting train and test data","04a76afb":"#### KNN","f36b0458":"### Random Forest"}}