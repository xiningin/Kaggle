{"cell_type":{"df51bcc1":"code","f1da52f7":"code","664fb097":"code","a961596b":"code","e0ed3cf9":"code","2ab9096e":"code","08f6d71d":"code","0e6876c7":"code","01a92786":"code","64fe454f":"code","01b3861e":"code","9a4ad16a":"code","5249c389":"code","6919c1f9":"code","23d3da41":"code","0f2ff88f":"code","d84487f6":"code","5c0311d3":"code","7e35aac5":"code","f529da66":"code","b409d18d":"code","5d3181db":"code","00310664":"code","ccd0e789":"code","4569a55a":"code","0688ef67":"code","9e86aceb":"code","adca0311":"code","9f0e6ca7":"code","26c39ea1":"code","bb991507":"code","cde3813f":"code","aca1189a":"code","e5d07095":"code","264ad707":"code","55c6ccbb":"code","f6e9ee7a":"code","728bccf2":"code","adcf0f6b":"code","b99ab3c0":"code","8930ad7d":"code","196377c2":"code","7acd3b4f":"code","b4789368":"code","a75b77c5":"code","c8f2bb6c":"code","f690602a":"code","1ed95f4e":"code","fb2e3e1d":"code","46cefde1":"code","477f52e7":"code","e33d2ff9":"code","5ae42be8":"code","78f966ca":"code","31f0b8ef":"code","0c669dee":"markdown","b9fd00c8":"markdown","7bbc0b35":"markdown","c04a8660":"markdown","c9439a83":"markdown","ae9bdc9c":"markdown","aead4251":"markdown","0e524aca":"markdown","93b3df6e":"markdown","c8469902":"markdown","efeb6af4":"markdown","27b78b0f":"markdown","a23938a8":"markdown","ed76c83a":"markdown","5b50b748":"markdown","e83c5855":"markdown","60192d69":"markdown","2271a365":"markdown","f35a2d62":"markdown","d7f2f2fd":"markdown","b181c3c9":"markdown","ddd02ddb":"markdown","a4ee7758":"markdown","0b3783e0":"markdown","2bd408ce":"markdown","a1b4606a":"markdown","4e699f07":"markdown","7035e179":"markdown","4e847494":"markdown","58699e2e":"markdown","25116bce":"markdown","d8e9e957":"markdown","db81136d":"markdown","7f592754":"markdown","31f945e9":"markdown","c4c50e53":"markdown","4e605274":"markdown"},"source":{"df51bcc1":"import numpy as np \nimport pandas as pd \n\nimport matplotlib.pyplot as plt\nfrom matplotlib import dates\n%matplotlib inline\n\nimport seaborn as sns\nsns.set_style(\"darkgrid\")\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nfrom sklearn.model_selection import train_test_split, learning_curve, GridSearchCV,KFold\nfrom sklearn import preprocessing\nfrom sklearn.ensemble import RandomForestRegressor, AdaBoostRegressor, VotingRegressor\nfrom sklearn.multioutput import MultiOutputRegressor\nfrom sklearn.metrics import r2_score, mean_squared_error\n\nfrom lightgbm import LGBMRegressor\nfrom xgboost import XGBRegressor\nfrom catboost import CatBoostRegressor\n\n!pip install shap\nimport shap\nshap.initjs()\n\nimport ipywidgets as widgets\n\nfrom statsmodels.graphics.tsaplots import plot_acf,plot_pacf","f1da52f7":"train = pd.read_csv(\"..\/input\/tabular-playground-series-jul-2021\/train.csv\")\ntrain.head(5)","664fb097":"train.describe()","a961596b":"print(train.dtypes)","e0ed3cf9":"print(\"Null values in Features :\\n\", train.isnull().sum())","2ab9096e":"train.rename(columns = {\"date_time\":\"datetime\"},inplace=True)\ntrain.datetime = pd.to_datetime(train.datetime)\n\n# For analysis later\ntrain['Day'] = train['datetime'].dt.day_name()\ntrain['Month'] = train['datetime'].dt.month_name()\ntrain.head(5)","08f6d71d":"fig, ax = plt.subplots(figsize=(20,10))\nplt.title(\"Plot of deg_C with time in the first week\")\n\nfor i in range(10,17):\n    \n    \n    one_day = train[(train.datetime >= \"2010-03-\" +str(i) +\" 00:00:00\") & \n                         (train.datetime <= \"2010-03-\" +str(i) +\" 23:00:00\")]\n    sns.lineplot(data=one_day, x=\"datetime\", y=\"deg_C\",ax=ax)\n    ax.xaxis.set_major_formatter(dates.DateFormatter('%H-%M'))\n    ax.xaxis.set_major_locator(dates.HourLocator(interval=12))\n\nplt.show()","0e6876c7":"fig, ax = plt.subplots(figsize=(20,10))\nplt.title(\"Plot of deg_C with time in the second week\")\n\nfor i in range(17,24):\n    \n    \n    one_day = train[(train.datetime >= \"2010-03-\" +str(i) +\" 00:00:00\") & \n                         (train.datetime <= \"2010-03-\" +str(i) +\" 23:00:00\")]\n    sns.lineplot(data=one_day, x=\"datetime\", y=\"deg_C\",ax=ax)\n    ax.xaxis.set_major_formatter(dates.DateFormatter('%H-%M'))\n    ax.xaxis.set_major_locator(dates.HourLocator(interval=12))\n\nplt.show()","01a92786":"fig, ax = plt.subplots(figsize=(20,10))\nplt.title(\"Plot of relative_humidity with time in the first week\")\n\nfor i in range(10,17):\n    \n    \n    one_day = train[(train.datetime >= \"2010-03-\" +str(i) +\" 00:00:00\") & \n                         (train.datetime <= \"2010-03-\" +str(i) +\" 23:00:00\")]\n    sns.lineplot(data=one_day, x=\"datetime\", y=\"relative_humidity\",ax=ax)\n    ax.xaxis.set_major_formatter(dates.DateFormatter('%H-%M'))\n    ax.xaxis.set_major_locator(dates.HourLocator(interval=12))\n\nplt.show()","64fe454f":"fig, ax = plt.subplots(figsize=(20,10))\nplt.title(\"Plot of absolute_humidity with time in the first week\")\n\nfor i in range(10,17):\n    \n    \n    one_day = train[(train.datetime >= \"2010-03-\" +str(i) +\" 00:00:00\") & \n                         (train.datetime <= \"2010-03-\" +str(i) +\" 23:00:00\")]\n    sns.lineplot(data=one_day, x=\"datetime\", y=\"absolute_humidity\",ax=ax)\n    ax.xaxis.set_major_formatter(dates.DateFormatter('%H-%M'))\n    ax.xaxis.set_major_locator(dates.HourLocator(interval=12))\n\nplt.show()","01b3861e":"fig, ax = plt.subplots(figsize=(20,10))\nplt.title(\"Plot of sensor_1 with time in the first week\")\n\nfor i in range(10,17):\n    \n    \n    one_day = train[(train.datetime >= \"2010-03-\" +str(i) +\" 00:00:00\") & \n                         (train.datetime <= \"2010-03-\" +str(i) +\" 23:00:00\")]\n    sns.lineplot(data=one_day, x=\"datetime\", y=\"sensor_1\",ax=ax)\n    ax.xaxis.set_major_formatter(dates.DateFormatter('%H-%M'))\n    ax.xaxis.set_major_locator(dates.HourLocator(interval=12))\n\nplt.show()","9a4ad16a":"fig, ax = plt.subplots(figsize=(20,10))\nplt.title(\"Plot of sensor_2 with time in the first week\")\n\nfor i in range(10,17):\n    \n    \n    one_day = train[(train.datetime >= \"2010-03-\" +str(i) +\" 00:00:00\") & \n                         (train.datetime <= \"2010-03-\" +str(i) +\" 23:00:00\")]\n    sns.lineplot(data=one_day, x=\"datetime\", y=\"sensor_2\",ax=ax)\n    ax.xaxis.set_major_formatter(dates.DateFormatter('%H-%M'))\n    ax.xaxis.set_major_locator(dates.HourLocator(interval=12))\n\nplt.show()","5249c389":"fig, ax = plt.subplots(figsize=(20,10))\nplt.title(\"Plot of sensor_3 with time in the first week\")\n\nfor i in range(10,17):\n    \n    \n    one_day = train[(train.datetime >= \"2010-03-\" +str(i) +\" 00:00:00\") & \n                         (train.datetime <= \"2010-03-\" +str(i) +\" 23:00:00\")]\n    sns.lineplot(data=one_day, x=\"datetime\", y=\"sensor_3\",ax=ax)\n    ax.xaxis.set_major_formatter(dates.DateFormatter('%H-%M'))\n    ax.xaxis.set_major_locator(dates.HourLocator(interval=12))\n\nplt.show()","6919c1f9":"fig, ax = plt.subplots(figsize=(20,10))\nplt.title(\"Plot of sensor_4 with time in the first week\")\n\nfor i in range(10,17):\n    \n    \n    one_day = train[(train.datetime >= \"2010-03-\" +str(i) +\" 00:00:00\") & \n                         (train.datetime <= \"2010-03-\" +str(i) +\" 23:00:00\")]\n    sns.lineplot(data=one_day, x=\"datetime\", y=\"sensor_4\",ax=ax)\n    ax.xaxis.set_major_formatter(dates.DateFormatter('%H-%M'))\n    ax.xaxis.set_major_locator(dates.HourLocator(interval=12))\n\nplt.show()","23d3da41":"fig, ax = plt.subplots(figsize=(20,10))\nplt.title(\"Plot of sensor_5 with time in the first week\")\n\nfor i in range(10,17):\n    \n    \n    one_day = train[(train.datetime >= \"2010-03-\" +str(i) +\" 00:00:00\") & \n                         (train.datetime <= \"2010-03-\" +str(i) +\" 23:00:00\")]\n    sns.lineplot(data=one_day, x=\"datetime\", y=\"sensor_5\",ax=ax)\n    ax.xaxis.set_major_formatter(dates.DateFormatter('%H-%M'))\n    ax.xaxis.set_major_locator(dates.HourLocator(interval=12))\n\nplt.show()","0f2ff88f":"fig, ax = plt.subplots(figsize=(20,10))\nplt.title(\"Plot of target_carbon_monoxide with time in the first week\")\n\nfor i in range(10,17):\n    \n    \n    one_day = train[(train.datetime >= \"2010-03-\" +str(i) +\" 00:00:00\") & \n                         (train.datetime <= \"2010-03-\" +str(i) +\" 23:00:00\")]\n    sns.lineplot(data=one_day, x=\"datetime\", y=\"target_carbon_monoxide\",ax=ax)\n    ax.xaxis.set_major_formatter(dates.DateFormatter('%H-%M'))\n    ax.xaxis.set_major_locator(dates.HourLocator(interval=12))\n\nplt.show()","d84487f6":"fig, ax = plt.subplots(figsize=(20,10))\nplt.title(\"Plot of target_carbon_monoxide with time in the second week\")\n\nfor i in range(17,24):\n    \n    \n    one_day = train[(train.datetime >= \"2010-03-\" +str(i) +\" 00:00:00\") & \n                         (train.datetime <= \"2010-03-\" +str(i) +\" 23:00:00\")]\n    sns.lineplot(data=one_day, x=\"datetime\", y=\"target_carbon_monoxide\",ax=ax)\n    ax.xaxis.set_major_formatter(dates.DateFormatter('%H-%M'))\n    ax.xaxis.set_major_locator(dates.HourLocator(interval=12))\n\nplt.show()","5c0311d3":"fig, ax = plt.subplots(figsize=(20,10))\nplt.title(\"Plot of target_carbon_monoxide with time in the third week\")\n\nfor i in range(24,31):\n    \n    \n    one_day = train[(train.datetime >= \"2010-03-\" +str(i) +\" 00:00:00\") & \n                         (train.datetime <= \"2010-03-\" +str(i) +\" 23:00:00\")]\n    sns.lineplot(data=one_day, x=\"datetime\", y=\"target_carbon_monoxide\",ax=ax)\n    ax.xaxis.set_major_formatter(dates.DateFormatter('%H-%M'))\n    ax.xaxis.set_major_locator(dates.HourLocator(interval=12))\n\nplt.show()","7e35aac5":"fig, ax = plt.subplots(figsize=(20,10))\nplt.title(\"Plot of target_benzene with time in the first week\")\n\nfor i in range(10,17):\n    \n    \n    one_day = train[(train.datetime >= \"2010-03-\" +str(i) +\" 00:00:00\") & \n                         (train.datetime <= \"2010-03-\" +str(i) +\" 23:00:00\")]\n    sns.lineplot(data=one_day, x=\"datetime\", y=\"target_benzene\",ax=ax)\n    ax.xaxis.set_major_formatter(dates.DateFormatter('%H-%M'))\n    ax.xaxis.set_major_locator(dates.HourLocator(interval=12))\n\nplt.show()","f529da66":"fig, ax = plt.subplots(figsize=(20,10))\nplt.title(\"Plot of nitrogen_oxides with time in the first week\")\n\nfor i in range(10,17):\n    \n    \n    one_day = train[(train.datetime >= \"2010-03-\" +str(i) +\" 00:00:00\") & \n                         (train.datetime <= \"2010-03-\" +str(i) +\" 23:00:00\")]\n    sns.lineplot(data=one_day, x=\"datetime\", y=\"target_nitrogen_oxides\",ax=ax)\n    ax.xaxis.set_major_formatter(dates.DateFormatter('%H-%M'))\n    ax.xaxis.set_major_locator(dates.HourLocator(interval=12))\n\nplt.show()","b409d18d":"fig = plt.figure(figsize=(12,8))\nax = fig.add_subplot(211)\nfig = plot_acf(train.target_carbon_monoxide,lags=360,ax=ax,title=\"monthly seasonality using ACF - carbon_monoxide\")\nfig.show()\n\nfig = plt.figure(figsize=(12,8))\nax = fig.add_subplot(211)\nfig = plot_acf(train.target_benzene,lags=360,ax=ax,title=\"monthly seasonality using ACF - benzene\")\nfig.show()\n\nfig = plt.figure(figsize=(12,8))\nax = fig.add_subplot(211)\nfig = plot_acf(train.target_nitrogen_oxides,lags=360,ax=ax,title=\"monthly seasonality using ACF - carbon_monoxide\")\nfig.show()","5d3181db":"plt.figure(figsize=(15,15))\nsns.heatmap(train.corr(), cmap=\"Greys\")\nplt.show()","00310664":"# Cumulative features\ntrain[\"M-D\"] = train['datetime'].dt.strftime('%m-%d')\ntrain['deg_C_cumsum'] = train.groupby(\"M-D\")['deg_C'].apply(lambda x: x.cumsum())\ntrain['relative_humidity_cumsum'] = train.groupby(\"M-D\")['relative_humidity'].apply(lambda x: x.cumsum())\ntrain.drop(columns=[\"M-D\"],inplace=True)","ccd0e789":"one_day = train[(train.datetime >= \"2010-03-10 00:00:00\") & \n                         (train.datetime <= \"2010-03-10 23:00:00\")]\n\nplt.plot(one_day[\"datetime\"],one_day['deg_C_cumsum'])\none_day = train[(train.datetime >= \"2010-03-11 00:00:00\") & \n                         (train.datetime <= \"2010-03-11 23:00:00\")]\nplt.plot(one_day[\"datetime\"],one_day['deg_C_cumsum'])\nplt.xticks(rotation=45)\nplt.show()","4569a55a":"one_day = train[(train.datetime >= \"2010-03-10 00:00:00\") & \n                         (train.datetime <= \"2010-03-10 23:00:00\")]\n\nplt.plot(one_day[\"datetime\"],one_day['relative_humidity_cumsum'])\none_day = train[(train.datetime >= \"2010-03-11 00:00:00\") & \n                         (train.datetime <= \"2010-03-11 23:00:00\")]\nplt.plot(one_day[\"datetime\"],one_day['relative_humidity_cumsum'])\nplt.xticks(rotation=45)\nplt.show()","0688ef67":"train['Seconds'] = train['datetime'].dt.hour * 3600 + \\\n             train['datetime'].dt.minute * 60 + \\\n             train['datetime'].dt.second","9e86aceb":"one_day = train[(train.datetime >= \"2010-03-10 00:00:00\") & \n                         (train.datetime <= \"2010-03-10 23:00:00\")]\n\nplt.plot(one_day[\"datetime\"],one_day['Seconds'])\none_day = train[(train.datetime >= \"2010-03-11 00:00:00\") & \n                         (train.datetime <= \"2010-03-11 23:00:00\")]\nplt.plot(one_day[\"datetime\"],one_day['Seconds'])\nplt.xticks(rotation=45)\nplt.show()","adca0311":"test = pd.read_csv(\"..\/input\/tabular-playground-series-jul-2021\/test.csv\")\ntest.head(5)","9f0e6ca7":"plt.figure(figsize=(12,8))\nplt.title(\"Covariate drift for deg_C\")\nsns.kdeplot(test.deg_C.values, c='r',label='Test set')\nsns.kdeplot(train.deg_C.values, c='b',label='Train set')\nplt.legend()\nplt.show()\n\nplt.figure(figsize=(12,8))\nplt.title(\"Covariate drift for relative_humidity\")\nsns.kdeplot(test.relative_humidity.values, c='r',label='Test set')\nsns.kdeplot(train.relative_humidity.values, c='b',label='Train set')\nplt.legend()\nplt.show()\n\nplt.figure(figsize=(12,8))\nplt.title(\"Covariate drift for absolute_humidity\")\nsns.kdeplot(test.absolute_humidity.values, c='r',label='Test set')\nsns.kdeplot(train.absolute_humidity.values, c='b',label='Train set')\nplt.legend()\nplt.show()\n\nplt.figure(figsize=(12,8))\nplt.title(\"Covariate drift for sensor_1\")\nsns.kdeplot(test.sensor_1.values, c='r',label='Test set')\nsns.kdeplot(train.sensor_1.values, c='b',label='Train set')\nplt.legend()\nplt.show()\n\nplt.figure(figsize=(12,8))\nplt.title(\"Covariate drift for sensor_2\")\nsns.kdeplot(test.sensor_2.values, c='r',label='Test set')\nsns.kdeplot(train.sensor_2.values, c='b',label='Train set')\nplt.legend()\nplt.show()\n\nplt.figure(figsize=(12,8))\nplt.title(\"Covariate drift for sensor_3\")\nsns.kdeplot(test.sensor_3.values, c='r',label='Test set')\nsns.kdeplot(train.sensor_3.values, c='b',label='Train set')\nplt.legend()\nplt.show()\n\nplt.figure(figsize=(12,8))\nplt.title(\"Covariate drift for sensor_4\")\nsns.kdeplot(test.sensor_4.values, c='r',label='Test set')\nsns.kdeplot(train.sensor_4.values, c='b',label='Train set')\nplt.legend()\nplt.show()\n\nplt.figure(figsize=(12,8))\nplt.title(\"Covariate drift for sensor_5\")\nsns.kdeplot(test.sensor_5.values, c='r',label='Test set')\nsns.kdeplot(train.sensor_5.values, c='b',label='Train set')\nplt.legend()\nplt.show()","26c39ea1":"train.head(5)","bb991507":"train.columns","cde3813f":"train.drop(columns=[\"datetime\"],inplace=True)\ntrain_X = train[[\"Month\",\"deg_C\",'relative_humidity','absolute_humidity','sensor_1','sensor_2','sensor_3','sensor_4','sensor_5', 'relative_humidity_cumsum', 'Seconds',\n       'Day','deg_C_cumsum']]\ntrain_y = train.loc[:, ~train.columns.isin(train_X.columns)]","aca1189a":"print(train_X.columns)\nprint(train_y.columns)","e5d07095":"X_train, X_test, y_train, y_test = train_test_split(train_X, train_y, test_size=0.3,random_state=30)","264ad707":"columns_int =   X_train.select_dtypes(include=['int64']).columns.values.tolist()\ncolumns_float = X_train.select_dtypes(include=['float']).columns.values.tolist()\ncolumns_object = X_train.select_dtypes(include=['object']).columns.values.tolist() # Days\ncolumns_int.extend(columns_float)\n   \n# Scale numerical values    \nSS_in = preprocessing.MinMaxScaler()        \nX_train[columns_int] = SS_in.fit_transform(X_train[columns_int])\nX_test[columns_int] = SS_in.transform(X_test[columns_int])\n\n# Encode Categorical Columns\n# In training, months starts from March. Also, easy intepretation with shap plots\n# Due to missing values of January and Febraury, label encoding (random in behaviour) might give better values \n# than ordinal encoding. Ordinal encoding is purely done for intepretation of the model and the system alone\nmonths = [\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\",\"January\",\"February\"]\nlbl_1 = preprocessing.OrdinalEncoder(categories=[months])\nmonths = lbl_1.fit(np.reshape(months,(-1,1)))\nX_train[\"Month\"] = lbl_1.transform(np.reshape(X_train[\"Month\"].to_list(),(-1,1)))\nX_test[\"Month\"] = lbl_1.transform(np.reshape(X_test[\"Month\"].to_list(),(-1,1)))\n\ndays = [\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\",\"Sunday\"]\nlbl_2 = preprocessing.OrdinalEncoder(categories=[days])\ndays = lbl_2.fit(np.reshape(days,(-1,1)))\nX_train[\"Day\"] = lbl_2.transform(np.reshape(X_train[\"Day\"].to_list(),(-1,1)))\nX_test[\"Day\"] = lbl_2.transform(np.reshape(X_test[\"Day\"].to_list(),(-1,1)))\n\n","55c6ccbb":"columns_int =   y_train.select_dtypes(include=['int64']).columns.values.tolist()\ncolumns_float = y_train.select_dtypes(include=['float']).columns.values.tolist()\ncolumns_int.extend(columns_float)    \n    \nSS_out = preprocessing.MinMaxScaler()        \ny_train[columns_int] = SS_out.fit_transform(y_train[columns_int])\ny_test[columns_int] = SS_out.transform(y_test[columns_int])\n","f6e9ee7a":"model1 = CatBoostRegressor(logging_level='Silent')\nCAT = MultiOutputRegressor(model1)\n\nCAT.fit(X_train, y_train)\n\npred = CAT.predict(X_test)\nprint('Mean r2_score:',r2_score(pred,y_test))","728bccf2":"model2 = LGBMRegressor()\nLGBM = MultiOutputRegressor(model2)\n\nLGBM.fit(X_train, y_train)\n\npred = LGBM.predict(X_test)\nprint('Mean r2_score:',r2_score(pred,y_test))","adcf0f6b":"RF = RandomForestRegressor()\n\nRF.fit(X_train, y_train)\n\npred = RF.predict(X_test)\nprint('Mean r2_score:',r2_score(pred,y_test))","b99ab3c0":"VR = MultiOutputRegressor(VotingRegressor([('lg', model2), ('CAT', model1),(\"RF\",RF)]))\nVR.fit(X_train, y_train)\n\npred = VR.predict(X_test)\nprint('Mean r2_score:',r2_score(pred,y_test))","8930ad7d":"# Derives shap values for the different features\nsamples = X_train.iloc[0:50,:]\n\nexplainer = shap.KernelExplainer(CAT.predict,samples)\nshap_values = explainer.shap_values(samples)","196377c2":"# References\n\n# https:\/\/www.kaggle.com\/vikumsw\/explaining-random-forest-model-with-shapely-values\n# https:\/\/www.analyticsvidhya.com\/blog\/2019\/11\/shapley-value-machine-learning-interpretability-game-theory\/\n# https:\/\/shap.readthedocs.io\/en\/latest\/example_notebooks\/tabular_examples\/model_agnostic\/Multioutput%20Regression%20SHAP.html\n","7acd3b4f":"print(f'Current Plot Shown: Carbon monoxide \\n')\n\nshap.summary_plot(shap_values = shap_values[0],\n                  features = samples, plot_size=(20,20),\n                  title = \"Carbon monoxide\")","b4789368":"print(f'Current Plot Shown: Benzene \\n')\nshap.summary_plot(shap_values = shap_values[1],\n                  features = samples, plot_size=(20,20),title = \"Benzene\"\n                  )","a75b77c5":"print(f'Current Plot Shown: Nitrogen oxide \\n')\nshap.summary_plot(shap_values = shap_values[2],\n                  features = samples, plot_size=(20,20),title=\"Nitrogen oxide\"\n                  )","c8f2bb6c":"pred_inv = SS_out.inverse_transform(pred)\ntest_inv = SS_out.inverse_transform(y_test)","f690602a":"for i,column in enumerate(y_test.columns):\n\n    print('r2_score for '+ column + ': ',round(r2_score(test_inv[:,i],pred_inv[:,i]),2))","1ed95f4e":"for i,column in enumerate(y_test.columns):\n        \n    plt.figure(figsize=(30,10))\n    plt.plot(pred_inv[:50,i],'r--',label='Prediction')\n    plt.plot(test_inv[:50,i],'g--',label='Real')\n    plt.title(column)\n    plt.legend()\n    plt.show()","fb2e3e1d":"test = pd.read_csv(\"..\/input\/tabular-playground-series-jul-2021\/test.csv\")\ntest.head(5)","46cefde1":"test.rename(columns = {\"date_time\":\"datetime\"},inplace=True)\ntest.datetime = pd.to_datetime(test.datetime)\ntest['Day'] = test['datetime'].dt.day_name()\ntest[\"Month\"] = test[\"datetime\"].dt.month_name()\n\n# Cumulative features\ntest[\"M-D\"] = test['datetime'].dt.strftime('%m-%d')\ntest['deg_C_cumsum'] = test.groupby(\"M-D\")['deg_C'].apply(lambda x: x.cumsum())\ntest['relative_humidity_cumsum'] = test.groupby(\"M-D\")['relative_humidity'].apply(lambda x: x.cumsum())\ntest.drop(columns=[\"M-D\"],inplace=True)\n\ntest['Seconds'] = test['datetime'].dt.hour * 3600 + \\\n             test['datetime'].dt.minute * 60 + \\\n             test['datetime'].dt.second\n","477f52e7":"X_test = test[X_train.columns]","e33d2ff9":"columns_int =   X_test.select_dtypes(include=['int64']).columns.values.tolist()\ncolumns_float = X_test.select_dtypes(include=['float']).columns.values.tolist()\ncolumns_object = X_test.select_dtypes(include=['object']).columns.values.tolist()\ncolumns_int.extend(columns_float)    \n    \nX_test[columns_int] = SS_in.transform(X_test[columns_int])\nX_test[\"Month\"] = lbl_1.transform(np.reshape(X_test[\"Month\"].to_list(),(-1,1)))\nX_test[\"Day\"] = lbl_2.transform(np.reshape(X_test[\"Day\"].to_list(),(-1,1)))\n\n                                       ","5ae42be8":"pred = CAT.predict(X_test)","78f966ca":"pred_inv = SS_out.inverse_transform(pred)\nprint(pred_inv)","31f0b8ef":"submission = pd.DataFrame()\nsubmission['date_time'] = test['datetime']\nsubmission['target_carbon_monoxide'] = pred_inv[:,0]\nsubmission['target_benzene'] = pred_inv[:,1]\nsubmission['target_nitrogen_oxides'] = pred_inv[:,2]\nprint(submission.head(10))\n\nsubmission.to_csv(\"Submission.csv\", index=False)","0c669dee":"# Reading and understanding training data","b9fd00c8":"### Analyse behaviour of sensor data over the weekdays","7bbc0b35":"- Temperature between two extremes\n- No clear pattern yet","c04a8660":"### Feature engineering and Data pre-processing","c9439a83":"<img src=\"https:\/\/carbontracker.org\/wp-content\/uploads\/2019\/08\/air-pollution-chimney-clouds-459728-1024x683.jpg\">\n\n```\n\n1. Situation\nData on the daily timeseries relating to weather information (temperature and humidity) and the input values of 5 sensors. Correspondingly, time series for the target_carbon_monoxide, target_benzene, and target_nitrogen_oxides are provided.\n\n2. Task\nPredict the values of target_carbon_monoxide, target_benzene, and target_nitrogen_oxides using weather information and sensor data \n\n3. Action\n- Exploratory Data Analysis\n- Feature Engineering\n- Fine-tuning, selection and training of ML models\n- Testing on the test set\n   \n4. Result\n- Achieve a highly performing predicitive model which can help understand the interaction between pollution and the   atmosphere\n- Intepret the model to gain trust and look for ways to improve performance (Feature elimination)\n- Gain an understanding of the system through the ML model\n```","ae9bdc9c":"### Some interesting observations\n1. Higher values of relative and absolute humidity seem to decrease the level of benzene in the atmosphere\n2. Also higher benzene emmisions happens later in the year (Months) \n3. Lower benzene emmisions happen on later days of the week","aead4251":"- No clear pattern as such","0e524aca":"- Spike (at 2) and drop (at around 14)","93b3df6e":"# Visualization of fit","c8469902":"- Apart from deg_C, absolute_humidity and sensor_4, no major drift\n- During training and testing, it will be clear how much of an impact is the drift.","efeb6af4":"- Baseline catboost is the best model","27b78b0f":"- Month is very important factor for the target values","a23938a8":"- Splitting into training and testing set and normalisation of values","ed76c83a":"- No pecularities, but there seems to be a strong correlation between the sensors data","5b50b748":"- Dual peaks around early morning and late afternoon","e83c5855":"# Training of the model within the training set","60192d69":"- No null values","2271a365":"- The values are depressed around the weekend (Saturday and Sunday)\n- Might be it located in an industrial area\n- Let's check for benzene and nitrogen_oxides","f35a2d62":"## Covariate drift between training and testing set\n\n<img src= \"https:\/\/i.morioh.com\/201029\/ddb97846.webp\" width=\"800\" height=\"400\">","d7f2f2fd":"# Libraries","b181c3c9":"# Testing on test set and submission","ddd02ddb":"Let's introduce some new features with respect to temperature and relative humidity. Since, I am using classical models, there is no memory of time for each input sequence like LSTM. However, I can create features like cumulative sum which can retain some memory of past events. Also other features worth considering -:\n- Cumulative temperature for a single day\n- Cumulative Relative humidity for a single day\n- Time in absolute seconds (in terms of hours not days)","a4ee7758":"- High correlation between the sensors and the target values","0b3783e0":"- Similar patterns, it is a function of holidays and time (drop of pollutants in the night)\n","2bd408ce":"### Analyse behaviour of target variables over the weekdays","a1b4606a":"# Model intepretation\n\n<img src=\"https:\/\/blog.ml.cmu.edu\/wp-content\/uploads\/2019\/11\/sfLP7d0oKFZ5crb6wt7a9lA.png\">","4e699f07":"## Target specific intepretations","7035e179":"## Heatmaps of the correlation plots ","4e847494":"## Models to evaluate\n\n- Catboost\n- LightGBM\n- RandomForest\n- Voting regressor\n","58699e2e":"## Monthly variation of targets values","25116bce":"## Model testing and submission","d8e9e957":"# Feature engineering","db81136d":"### Some interesting observations\n1. Higher nitrogen oxide emmisions happens later in the year (Months) \n2. Lower values of absolute humidity have a higher effect on nitrogen oxide\n3. Higher temperatures has negative impact on nitrogen oxide levels","7f592754":"- An increase of temperature in the morning to a peak value in the afternoon proceeded by a drop at night\n- Also, a cyclical function of time\n- Similarly, let's plot for relative_humidity, absolute_humidity","31f945e9":"### Some interesting observations\n1. Accumulation of Carbon monoxide mostly happens later in the day (seconds)\n2. Higher values of temperature and absolute humidity seem to decrease the level of Carbon monoxide in the atmosphere\n3. Also higher carbon monoxide emmisions happens later in the year (Months) ","c4c50e53":"# EDA of features\n### Analyse behaviour of atmospheric varibles over the weekdays\n\n- Since, it is a time series, let's analyse the change of the features with time\n- Plot of deg_C over the weekdays","4e605274":"## Still under completion. Please feel free to add suggestions"}}