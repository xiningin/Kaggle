{"cell_type":{"871732f2":"code","52d7c193":"code","9bb63d80":"code","e81021af":"code","738e8b20":"code","33735977":"code","a4e28431":"code","52e660d2":"code","8c99f140":"code","88cbe32c":"code","61a673e4":"code","0ac83e95":"code","07561265":"code","6625619d":"code","e05e945a":"code","93343ea9":"code","abd36b00":"code","192835d1":"code","3ff7fd92":"code","b5520f9f":"code","67665112":"code","f1b31a01":"code","f0b67d11":"markdown","b2b5f09c":"markdown","d70a8210":"markdown","a733fe5a":"markdown","a7ce8055":"markdown","dc076e4e":"markdown","10a09f9b":"markdown","a3e7ae58":"markdown","2515e371":"markdown","d3b40497":"markdown","3b8bb633":"markdown","513cd962":"markdown"},"source":{"871732f2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))\n\n# Any results you write to the current directory are saved as output.","52d7c193":"# As you can see from info method. There are 16598 entries (rows).\n# However, Year has 16327 entries. That means Year has NAN value.\n# Also Year should be integer but it is given as float. Therefore we will convert it.\n# In addition, publisher has NAN values.\ndata = pd.read_csv(\"..\/input\/vgsales.csv\")\ndata.info()","9bb63d80":"# Lets start with dropping nan values\ndata.dropna(how=\"any\",inplace = True) #\u2018any\u2019 : If any NA values are present, drop that row or column.\ndata.info()","e81021af":"# Then convert data from float to int\ndata.Year = data.Year.astype(int)\ndata.head()     # head method always gives you overview of data.","738e8b20":"data.info()","33735977":"# bokeh packages\nfrom bokeh.io import output_file,show,output_notebook,push_notebook\nfrom bokeh.plotting import figure\nfrom bokeh.models import ColumnDataSource,HoverTool,CategoricalColorMapper\nfrom bokeh.layouts import row,column,gridplot\nfrom bokeh.models.widgets import Tabs,Panel\noutput_notebook()","a4e28431":"plot = figure(x_axis_label = \"x\",y_axis_label = \"y\",tools = \"pan,box_zoom\")\nplot.circle(x=[5,4,3,2,1],y=[1,2,3,4,5],size = 10,color = \"black\",alpha = 0.7)\noutput_file(\"my_first_bokeh_plot.html\")\nshow(plot)\n","52e660d2":"# There are other types of glyphs\nplot = figure()\nplot.diamond(x=[5,4,3,2,1],y=[1,2,3,4,5],size = 10,color = \"black\",alpha = 0.7)\nplot.cross(x=[1,2,3,4,5],y=[1,2,3,4,5],size = 10,color = \"red\",alpha = 0.7)\nshow(plot)","8c99f140":"# line\nplot = figure()\nplot.line(x=[1,2,3,4,5,6,7],y = [1,2,3,4,5,5,5],line_width = 2)\nplot.circle(x=[1,2,3,4,5,6,7],y = [1,2,3,4,5,5,5],fill_color = \"red\",size = 10)\nshow(plot)","88cbe32c":"# patches\nplot = figure()\nplot.patches(xs = [[1,1,2,2],[2,2,3,3]],ys = [[1,2,1,2],[1,2,1,2]],fill_color = [\"purple\",\"yellow\"],line_color = [\"black\",\"black\"])\nshow(plot)","61a673e4":"data.head()","0ac83e95":"source = ColumnDataSource(data)\ntype(source)","07561265":"print(source)","6625619d":"# Lets use source in a basic example\n# As you know from info() method we have Year and  Global_Sales columns\n# Lets plot it to learn how to use ColumnDataSource\nsource = ColumnDataSource(data)\nplot = figure()\nplot.circle(x=\"Year\",y=\"Global_Sales\",source = source)\nshow(plot)\n# If you remember our column names are \"Year\" and \"Global_Sales\" in pandas data frame.\n# Nothing change when we convert pandas data frame to source.\n# You can think source is like pandas data frame at this point. Only for now :)\n","e05e945a":"# Selection appearance\nplot = figure(tools=\"box_select,lasso_select\")\nplot.circle(x= \"Year\",y = \"Global_Sales\",source=source,color = \"black\",\n            selection_color = \"orange\",\n            nonselection_fill_alpha = 0.2,\n           nonselection_fill_color = \"blue\")\nshow(plot)","93343ea9":"# Hover appearance\nhover = HoverTool(tooltips = [(\"Genre of game\",\"@Genre\"),(\"Publisher of game\",\"@Publisher\")], mode=\"vline\")\nplot = figure(tools=[hover,\"crosshair\"])\nplot.circle(x= \"Year\",y = \"Global_Sales\",source=source,color =\"black\",hover_color =\"red\")\nshow(plot)","abd36b00":"# Color mapping\nfactors = list(data.Genre.unique()) # what we want to color map. I choose genre of games\ncolors = [\"red\",\"green\",\"blue\",\"black\",\"orange\",\"brown\",\"grey\",\"purple\",\"yellow\",\"white\",\"pink\",\"peru\"]\nmapper = CategoricalColorMapper(factors = factors,palette = colors)\nplot =figure()\nplot.circle(x= \"Year\",y = \"Global_Sales\",source=source,color = {\"field\":\"Genre\",\"transform\":mapper})\nshow(plot)\n# plot looks like confusing but I think you got the idea of mapping ","192835d1":"# Row and column\np1 = figure()\np1.circle(x = \"Year\",y= \"Global_Sales\",source = source,color=\"red\")\np2 = figure()\np2.circle(x = \"Year\",y= \"EU_Sales\",source = source,color=\"black\")\np3 = figure()\np3.circle(x = \"Year\",y= \"NA_Sales\",source = source,color=\"blue\")\np4 = figure()\np4.circle(x = \"Year\",y= \"JP_Sales\",source = source,color=\"orange\")\nlayout1 = row(p1,p2)\nlayout2 = row(p3,p4)\nlayout3= column(layout1,layout2)\nshow(layout3)","3ff7fd92":"#nested\n# I use p1, p2 and p3 that are created at above\nlayout = row(column(p1,p2),p3)\nshow(layout)","b5520f9f":"# Grid plot \nlayout = gridplot([[p1,p2],[p3,None]],toolbar_location=\"above\")\nshow(layout)\n","67665112":"#Tabbed layout\n#I use p1 and p2 that are created at above\ntab1 = Panel(child = p1,title = \"Global_Sales\")\ntab2 = Panel(child = p2,title = \"EU_Sales\")\ntabs = Tabs(tabs=[tab1,tab2])\nshow(tabs)","f1b31a01":"# linking axis\n# We will use p1 and p2 that are created at above\np2.x_range = p1.x_range\np2.y_range = p1.y_range\nlayout4=column(p1,p2)\nshow(layout4)","f0b67d11":"## Data Formats\n**Bokeh can use list, numpy arrays and pandas as a data source.** We have pandas data frame in this tutorial.","b2b5f09c":"# CONCLUSION\nIf you like the bokeh library, I am going to dive deep into bokeh.\n<br> I divide bokeh tutorial into 2 parts. **Because kaggle has problem while running bokeh that cause crash in browser**.\n<br> Also look at Part 2: https:\/\/www.kaggle.com\/kanncaa1\/interactive-bokeh-tutorial-part-2\/editnb\n### If you have any question, I am happy to hear it. I thank c who is developer of Bokeh for this useful visualization library.\n","d70a8210":"## Explanation of Bokeh Packages\nFor bokeh library, we will use some packages:\n* **output_file**: that saves our figure with .html extension\n* **show**: shows the figure\n* **figure**: creates empty figure\n* **ColumnarDataSource**: Data source of bokeh\n* **HoverTool**: like cursor\n* **CategoricalColorMapper**: Like a hue in seaborn. If you do not know it look at my seaborn tutorial\n    * https:\/\/www.kaggle.com\/kanncaa1\/seaborn-for-beginners\n* **Row and column**: puts plots in row order or column order in figure\n* **gridplot**\n* **Tabs and Panel**: Panel is figure for each plot and tab is like button\n    \n","a733fe5a":"* The ColumnDataSource is the core of most Bokeh plots, providing the data that is visualized by the glyphs of the plot. With the ColumnDataSource, it is easy to share data between multiple plots and widgets, such as the DataTable. When the same ColumnDataSource is used to drive multiple renderers, selections of the data source are also shared. \n\n* The ColumnDataSource is the core of most Bokeh plots, providing the data that is visualized by the glyphs of the plot. With the ColumnDataSource, it is easy to share data between multiple plots and widgets, such as the DataTable. When the same ColumnDataSource is used to drive multiple renderers, selections of the data source are also shared. ","a7ce8055":"## Plotting with Glyphs\n* **Glyphs**: visual shapes like circle, square, rectangle or diamond\n* **figure**: creates figure\n    * **x_axis_label**: label of x axis\n    * **y_axis_label**: label of y axis\n    * **tools**: tools to move or zoom plot\n        * **pan**: slides the plot\n        * **box_zoom**: zoom in \n* **circle**: like scatter in matplotlib\n    * **size**: size of circles\n    * **color**: color\n    * **alpha**: opacity\n* **output_file**:  that save our figure with .html extension\n* **show**: show the figure\n","dc076e4e":"##  Additional Glyps\n* **line**: line plot\n    * **line_width**: width of line\n    * **fill_color**: filling inside of circle with color\n* **patches**: multiple polynomial shapes at once on a plot\n    * **fill_color**: filling inside of patches\n    * **line_color**: color of line  around patches\n ","10a09f9b":"## Linking Plots\nLinks plot together. For example, there are two plots and we zoom in one of them. Other one is zoomed automatically. ","a3e7ae58":"* The ColumnDataSource is the core of most Bokeh plots, providing the data that is visualized by the glyphs of the plot. With the ColumnDataSource, it is easy to share data between multiple plots and widgets, such as the DataTable. When the same ColumnDataSource is used to drive multiple renderers, selections of the data source are also shared. Thus, it is possible to use a select tool to choose data points from one plot and have them automatically highlighted in a second plot*\n\n* At the most basic level, a ColumnDataSource is simply a mapping between column names and lists of data. The ColumnDataSource takes a data parameter which is a dict, with string column names as keys and lists (or arrays) of data values as values. If one positional argument is passed to the ColumnDataSource initializer, it will be taken as data. Once the ColumnDataSource has been created, it can be passed into the source parameter of plotting methods which allows you to pass a column\u2019s name* ","2515e371":"# INTRODUCTION\nIn this tutorial, we are going to learn basics of **bokeh library**. **Bokeh is interactive visualization library**.\n<br> I divide bokeh tutorial into 2 parts. Because kaggle has problem while running bokeh that cause crash in browser.\n1. PART 1:\n    1. Basic Data Exploration with Pandas\n    1. Explanation of Bokeh Packages\n    1. Plotting with Glyphs\n    1. Additional Glyphs\n    1. Data Formats\n    1. Customizing Glyphs\n    1. Layouts\n    1. Linking Plots\n1. PART 2: https:\/\/www.kaggle.com\/kanncaa1\/interactive-bokeh-tutorial-part-2\/editnb\n    1. Callbacks \n        * Slider\n        * dropdowns\n","d3b40497":"##  Basic Data Exploration with Pandas\n<br>Before everyting, we need to **import data with read_csv()**.\n<br>**In order to make visualization we need to understand data and look whether there are *nan* values in data or not**.\n<br>We will use pandas library:\n    * read_csv()\n    * info()\n    * head()\n","3b8bb633":"## Customizing Glyphs\n* **Selection appearance**: when you select some point on data, that points shine and others burn out\n    * **tools**:\n        * **box_select and lasso_select**: selection tools\n    * **selection_color**: When you select point, it becomes selected color\n    * **nonselection_fill_alpha**: Other non selected points become non selected alpha\n    * **nonselection_fill_color**: Other non selected points become non selected color\n* **HoverTool**: cursor\n    * **Crosshair**: line cursor\n    * **hover_color**: Color of hover\n* **Color mapping**: color map of chose field. (like hue in seaborn)\n    * **factors**: names of variable to color map\n    * **palette**: color of chose factors\n\n","513cd962":"## Layouts\n**Arranging multiple plots like subplot in matplot library**.\n* **Row and columns**: puts plots in row order or column order in figure\n* **Grid arrangement**: list of order for layout\n    * **toolbar_location**: location of tool bar that can be below above left right or none\n* **Tabbed layout**\n    * **Panel**: like a figure\n    * **Tabs**: like a button \n"}}