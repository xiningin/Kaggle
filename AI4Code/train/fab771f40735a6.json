{"cell_type":{"489f1ed6":"code","aa00fb33":"code","5760e242":"code","29257bfc":"code","f7028f75":"code","06f56101":"code","45ec7327":"code","c0525502":"code","6fc99654":"code","28a3b168":"code","103b33d5":"code","42d7be34":"code","42a3a179":"code","b76369d1":"code","93776dac":"code","c7d8896d":"code","b7ba8005":"code","021373e4":"code","9b588d78":"code","ea9dce97":"code","0832a0c4":"code","aa90f7a2":"markdown","a909852d":"markdown","e4aaf559":"markdown","cac2a401":"markdown","07436b51":"markdown","fbaa1027":"markdown","6ccfb6c4":"markdown"},"source":{"489f1ed6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","aa00fb33":"from keras.layers import Input, Dense, Flatten\nfrom keras.models import Model, Sequential\nfrom keras.applications.vgg16 import  VGG16, preprocess_input\nfrom keras.preprocessing import image\nfrom keras.preprocessing.image import ImageDataGenerator\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom glob import glob","5760e242":"# resize image\nIMAGE_SIZE = [224, 224]\n\n#Path, directorio\ntrain_path = '\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/train'\nval_path = '\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/train'","29257bfc":"vgg = VGG16(include_top=False,weights='imagenet',input_shape= IMAGE_SIZE + [3])","f7028f75":"# don't train existing weights\nfor layer in vgg.layers:\n    layer.trainable = False","06f56101":"# getting folder of train class\nfolders = glob('\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/train\/*')\nfolders","45ec7327":"# our layers -\nx = Flatten()(vgg.output)\nprediction = Dense(len(folders), activation = 'softmax')(x)","c0525502":"model = Model(vgg.input,prediction )","6fc99654":"model.summary()","28a3b168":"model.compile(optimizer='adam', loss = 'categorical_crossentropy', metrics=['accuracy'])","103b33d5":"train_datagen = ImageDataGenerator(\nrescale = 1\/255,\nshear_range=0.2,\nzoom_range= 0.2,\n    horizontal_flip=True\n)","42d7be34":"test_datagen = ImageDataGenerator(rescale= 1\/255)","42a3a179":"# charge imagen from forlders directory\ntrainning_set = train_datagen.flow_from_directory(train_path,\n                                                 target_size=IMAGE_SIZE,\n                                                 batch_size=32,\n                                                 class_mode='categorical')","b76369d1":"testing_set = train_datagen.flow_from_directory('\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/test',\n                                                 target_size=IMAGE_SIZE,\n                                                 batch_size=32,\n                                                 class_mode='categorical')","93776dac":"history = model.fit(\n    trainning_set, \n    validation_data= testing_set,\n    epochs=5,\n    steps_per_epoch=len(trainning_set),\n    validation_steps= len(testing_set)\n)","c7d8896d":"history.history.keys()","b7ba8005":"history.history['accuracy']","021373e4":"import matplotlib.pyplot as plt","9b588d78":"plt.plot(history.history['accuracy'], label = 'Accuracy')\nplt.plot(history.history['val_accuracy'], label = 'Validation ACC')\nplt.legend()\nplt.title('Scores')\nplt.show()","ea9dce97":"plt.plot(history.history['loss'], label = 'loss')\nplt.plot(history.history['val_loss'], label = 'Validation Loss')\nplt.legend()\nplt.title('Loss')\nplt.show()","0832a0c4":"model.save('model_vgg16.h5')","aa90f7a2":"## Preprocessing layer to the front of VGG","a909852d":"### Resizing and Normalization","e4aaf559":"##  Create Model, and layers","cac2a401":"#### Accuracy","07436b51":"## Libraries","fbaa1027":"### Save model","6ccfb6c4":"#### Loss"}}