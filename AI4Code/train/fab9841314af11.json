{"cell_type":{"44102974":"code","a6c2b389":"code","c20a4301":"code","06956a89":"code","175db0ab":"code","51a4997f":"code","acb53a67":"code","f7ea4503":"code","d6883cf8":"code","5182ff62":"code","b8f11ae8":"code","dd660360":"code","7b0f80f9":"code","6da5664a":"code","6c0018fc":"code","8414d966":"code","2f0a9850":"code","390bec3e":"code","2c6993c6":"code","8e39f2e8":"code","ce0e6313":"code","7176d4ff":"code","869172e9":"code","44a032c4":"code","30bb2c37":"code","8a6f7faa":"code","b80d59ba":"code","0afc7351":"code","6ada7049":"markdown","e76a9397":"markdown","e3c4762b":"markdown","a891892d":"markdown","708aff7a":"markdown","8bac7d5a":"markdown","da0d622e":"markdown","3dd1218c":"markdown","2942cdac":"markdown","d6bfda31":"markdown","90458c18":"markdown","2958d8ff":"markdown","94efafb3":"markdown","ff3f1504":"markdown","9057494f":"markdown","d4571735":"markdown","28dd6e98":"markdown","2c7bd2df":"markdown","d5cc6e0b":"markdown","f980b275":"markdown","98d2b821":"markdown","338f659e":"markdown","b2eb9e8a":"markdown","4bd11851":"markdown","2ec3a983":"markdown"},"source":{"44102974":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'): # new way of reading comppetition input  \n    for filename in filenames:                         # csv files\n        file_name = os.path.join(dirname, filename)    # if you liked, then upvote\n        if \"train.csv\" in file_name:                   # to make notebook popular among Kagglers\n            df = pd.read_csv(file_name)                # 'df' represents for train dataset\n        elif \"test.csv\" in file_name:\n            test = pd.read_csv(file_name)              # 'test' represents for test dataset\n        elif \"submission.csv\" in file_name:\n            sample = pd.read_csv(file_name)            # 'sample' represents for sample submission dataset\n            ","a6c2b389":"df.head()","c20a4301":"test.head()","06956a89":"df.isnull().sum()","175db0ab":"test.isnull().sum()","51a4997f":"def clean_store(item):\n    return item[6:] # 'KaggleMart' => 'Mart'","acb53a67":"def clean_product(product):\n    return product[7:] # 'Kaggle Hat' => 'Hat'","f7ea4503":"df.store = df.store.apply(clean_store)\ntest.store = test.store.apply(clean_store)","d6883cf8":"df['product'] = df['product'].apply(clean_product)\ntest['product'] = test['product'].apply(clean_product)","5182ff62":"df.store.unique()","b8f11ae8":"df['product'].unique()","dd660360":"df.country.unique()","7b0f80f9":"df.date = pd.to_datetime(df.date)\ntest.date = pd.to_datetime(test.date)","6da5664a":"years = df.groupby([df.date.dt.year])[['num_sold']].mean()\n","6c0018fc":"sns.barplot(x=years.index, y=years.num_sold)\nplt.title(\"Product selling through years\")\nplt.xlabel(\"Years\")\nplt.ylabel(\"Number of Sold Products\")\nplt.show()","8414d966":"months = []\nfor i in range(2015, 2019):\n    sorted_by_months = df.loc[(df.date.dt.year == i)]\n    months.append(sorted_by_months.groupby(df.date.dt.month)['num_sold'].mean())","2f0a9850":"labels = [2015,2016,2017,2018]\nfor j in range(4):\n    label = labels[j]\n    x = months[j].index\n    y = months[j]\n    sns.lineplot(x,y, label=label)\n    plt.title(\"Product selling through months\")\n    plt.xlabel(\"Months\")\n    plt.ylabel(\"Number of Sold Products\")\n    \n    ","390bec3e":"weeks = []\nfor i in range(2015, 2019):\n    sorted_by_weeks = df.loc[(df.date.dt.year == i)]\n    weeks.append(sorted_by_weeks.groupby(df.date.dt.week)['num_sold'].mean())","2c6993c6":"labels = [2015,2016,2017,2018]\nfor j in range(4):\n    label = labels[j]\n    x = weeks[j].index\n    y = weeks[j]\n    sns.lineplot(x,y, label=label)\n    plt.title(\"Product selling through weeks\")\n    plt.xlabel(\"Weeks\")\n    plt.ylabel(\"Number of Sold Products\")\n    ","8e39f2e8":"days_of_week = []\nfor i in range(2015, 2019):\n    sorted_by_days_of_week = df.loc[(df.date.dt.year == i)]\n    days_of_week.append(sorted_by_days_of_week.groupby(df.date.dt.day_of_week)['num_sold'].mean())","ce0e6313":"labels = [2015,2016,2017,2018]\nfor j in range(len(days_of_week)):\n    label = labels[j]\n    x = days_of_week[j].index\n    y = days_of_week[j]\n    sns.lineplot(x,y, label=label)\n    plt.title(\"Product selling through days of week\")\n    plt.xlabel(\"Days of week\")\n    plt.ylabel(\"Number of Sold Products\")","7176d4ff":"sns.lineplot(x='country', y='num_sold', data=df)\nplt.title(\"Ratio of product selling and countries\")\nplt.xlabel(\"Name of countries\")\nplt.ylabel(\"Number of Sold Products\")","869172e9":"sns.lineplot(x='product', y='num_sold', data=df)\nplt.title(\"Ratio of product selling and products` name\")\nplt.xlabel(\"Name of products\")\nplt.ylabel(\"Number of Sold Products\")","44a032c4":"hats = df.loc[(df['product'] == \"Hat\")]\nmugs = df.loc[(df['product'] == \"Mug\")]\nstickers = df.loc[(df['product'] == \"Sticker\")]\n\nhat_products = hats.groupby(hats.date.dt.month)['num_sold'].mean()\nmug_products = mugs.groupby(mugs.date.dt.month)['num_sold'].mean()\nsticker_products = stickers.groupby(stickers.date.dt.month)['num_sold'].mean()\n","30bb2c37":"sns.lineplot(x=mug_products.index, y=mug_products.values, label ='Mugs')\nsns.lineplot(x=hat_products.index, y=hat_products.values, label ='Hats')\nsns.lineplot(x=sticker_products.index, y=sticker_products.values, label ='Stickers')\n","8a6f7faa":"sns.barplot(x='country', y='num_sold', hue='product', data=df)\nplt.title(\"Ratio of product selling and countries among products\")\nplt.xlabel(\"Name of countries\")\nplt.ylabel(\"Number of Sold Products\")\nplt.show()","b80d59ba":"sns.barplot(x='country', y='num_sold', hue='store', data=df)\nplt.title(\"Ratio of product selling and countries among stores\")\nplt.xlabel(\"Name of countries\")\nplt.ylabel(\"Number of Sold Products\")\nplt.show()","0afc7351":"sns.barplot(x='store', y='num_sold', hue='product', data=df)\nplt.title(\"Ratio of product selling among storess\")\nplt.xlabel(\"Name of store\")\nplt.ylabel(\"Number of Sold Products\")\nplt.show()","6ada7049":"# Visualization by years","e76a9397":"# Bar chart of 'country', 'store' and 'num_sold'","e3c4762b":"* April & December are the most popular months for selling\n**Look at the holidays in those months:**\n\nCommon holidays in spring season:\n\nShrovetide=>Mar, 8th\n\nPalm Sunday=>Apr, 10th\n\nGood Friday=>Apr, 15th\n\nMaundy Thursday=>Apr, 15th\n\nEaster Sunday=>Apr, 17th\n\nEaster Monday=>Apr, 18th\n\nAscension of Christ=>May, 26th","a891892d":"#  Introduction to Dataframes","708aff7a":"In a single year - **51 weeks**\n\n![51 weeks](https:\/\/avatars.mds.yandex.net\/i?id=e550d6b86c28b0e5ad1af0f283f37b4d-2352855-images-thumbs&n=13)","8bac7d5a":"# Bar plot of 'country', 'product' and 'num_sold'","da0d622e":"# Visualization by weeks","3dd1218c":"**Mug** \n![kaggle mug](https:\/\/storage.googleapis.com\/kaggle-competitions\/kaggle\/3333\/media\/kaggle_dataviz_mug.png)\n","2942cdac":"# Bar chart of 'store', 'product' and 'num_sold'","d6bfda31":"My new way of reading datasets, write your ideas about it in **comments** section","90458c18":"# Conclusion\n\n* Each visualization has many helpful features for further work in TPS-Jan 2022 competition\n* If you want to modefy, feel free to use **Copy & Edit** button\n* Thank you for your attention!","2958d8ff":"It line graph above, Norway is the most popular\n\nLet\\`s look at  **GDP of Nordic countries:**\n![GDP of Nordic countries](http:\/\/climatepositions.com\/wp-content\/uploads\/2015\/09\/GDP-Finland-Sweden-Norw-Denm-Russ..png)","94efafb3":"# Visualization by days of week \n Monday=0, \n Sunday=6","ff3f1504":"# Visualization by months","9057494f":"**Finland, Norway and Sweden are Nordic countries**","d4571735":"**Sticker** \n![Kaggle Stickers](https:\/\/heads0rtai1s.github.io\/pics\/rstudioconf20_2.jpg)","28dd6e98":"Hats are very popular in spring\nCustomers buy Hats because of own interests, agains rain and other weathers.\nHowever, according to the source: \n\nhttps:\/\/www.worlddata.info\/europe\/sweden\/climate.php,\n\nhttps:\/\/www.worlddata.info\/europe\/norway\/climate.php,\n\nhttps:\/\/www.worlddata.info\/europe\/finland\/climate.php\n\nRainy days are not the reason!","2c7bd2df":"![Map](https:\/\/i.pinimg.com\/736x\/b9\/41\/6e\/b9416ea36ee695f15f4a15d173df21bc--interactive-map-the-map.jpg)","d5cc6e0b":"# No missing values ","f980b275":"**Hat** \n![Kaggle Hat](https:\/\/storage.googleapis.com\/kaggle-avatars\/images\/4089076-gr.jpg)","98d2b821":"# Making dataframes simplier","338f659e":"# Visualization by products","b2eb9e8a":"**Both of datasets do not have missing values which makes our job more easierly and accurately**","4bd11851":"# Visualization by countries","2ec3a983":"# Do not forget to:\n* Share your ideas about my notebook in the **comments** section! \n* Upvote, if current notebook was useful!\n* Mention me in **comments** section!\n\nRegards,\n\n[Sardor Abdirayimov](https:\/\/www.kaggle.com\/sardorabdirayimov)"}}