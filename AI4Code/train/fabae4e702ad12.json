{"cell_type":{"be17c47c":"code","a0ebea48":"code","11be8e3f":"code","6c42be78":"code","ed0df956":"code","92e1808d":"code","4f80025c":"code","f0e95a1d":"code","a49c6a0d":"code","ff19fc2c":"code","80eb3814":"code","2fc2fd03":"code","536e9076":"markdown","8d9e28d3":"markdown","a2078138":"markdown","066cfc58":"markdown","dfb5cd17":"markdown","b5f41943":"markdown","c8dc4319":"markdown","b89b0867":"markdown","43067eb2":"markdown","10a726d4":"markdown","29ffc9d0":"markdown","c393057d":"markdown","e7c0bb83":"markdown","8735782d":"markdown","9d4d5e50":"markdown","c5be5a7c":"markdown","320fd5a2":"markdown"},"source":{"be17c47c":"############## Necessary imports #################\nimport pandas as pd\n\n########################\n# Common \n########################\nimport sys\nimport os\nimport random\nimport gc\nimport time\nimport warnings\nwarnings.filterwarnings(\"ignore\", category=UserWarning)\nwarnings.filterwarnings(\"ignore\", category=RuntimeWarning)\nwarnings.filterwarnings(\"ignore\", category=FutureWarning)\nwarnings.filterwarnings(\"ignore\", category=DeprecationWarning)\nimport numpy as np\nimport scipy\n\n########################\n# Plotting\n########################\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n########################\n# ML libs\n########################\nfrom sklearn.model_selection import train_test_split, GridSearchCV, RandomizedSearchCV\nfrom sklearn import metrics\nfrom sklearn.utils import resample\nfrom sklearn.preprocessing import OneHotEncoder, LabelEncoder\nfrom keras import optimizers\nfrom keras.models import Sequential\nfrom keras.layers import Dense \nfrom keras.callbacks import ModelCheckpoint, Callback, EarlyStopping, ReduceLROnPlateau\nimport tensorflow\nfrom sklearn.ensemble import RandomForestClassifier\n\n########################\n# Global variables and settings\n########################\nfile_name='..\/input\/Skyserver_SQL2_27_2018 6_51_39 PM.csv'\n\n# Set NumPy and TensorFlow random seed to make results reproducable\nplt.style.use('seaborn')\nnp.random.seed(42)\ntensorflow.set_random_seed(2)\nprint(os.listdir(\"..\/input\"))\n# Any results you write to the current directory are saved as output.\n\n# Load the data\nsky = pd.read_csv(file_name, dtype={'class':'category'})\n#sky = sky.sample(1000)\nsky.drop(['objid', 'specobjid'], axis=1,inplace=True)\nsky.head()","a0ebea48":"# Look at data types and counts\nsky.info()","11be8e3f":"sns.countplot('class', data = sky)\nplt.title(\"Number of samples by class\")\nplt.ylabel('Count')\nplt.show()\nsky['class'].value_counts()","6c42be78":"# Print distribution of features by labels: Galaxy, Star, Quazar\n# 3 subplots columns for 3 labels: Galaxy, Star, Quazar\n# subplots rows in number of features in dataset\n\n# Rows and columns in subplots (not sky dataset rows and cols)\nncols = sky['class'].cat.categories.size\n# -1 because we don't show histplot of class by class\nnrows = sky.columns.size-1\n\nf, ax = plt.subplots(nrows, ncols, figsize=(10,30))\naxes = ax.flatten()\ni = 0\n# Go through sky dataset columns: dec, u, g, r etc.\nfor sky_col_name in sky.columns:\n    if sky_col_name == 'class': continue\n    # Go through classes: Galaxy, Star, Quazar\n    for cat in sky['class'].cat.categories:\n        data = sky[sky['class'] == cat][sky_col_name]\n        # Draw the plot for current class\n        axes[i].set_title('%s %s distribution' % (cat, sky_col_name))\n        axes[i].set_ylabel('Count')\n        sns.distplot(data, ax=axes[i])\n        i +=1\n        \nplt.tight_layout()\nplt.show()","ed0df956":"sns.heatmap(sky.corr())\nplt.title(\"Features correlations\")\nplt.show()","92e1808d":"# Balancing not needed:\n# Get number of smallest label and reduce features in other labels\n#nsamples = sky['class'].value_counts().min()\n#sky_balanced = sky.groupby('class', as_index=False).apply(lambda g:  g.sample(nsamples)).reset_index(drop=True)","4f80025c":"# Fitting the model to get feature importances after training\nmodel = RandomForestClassifier()\nmodel.fit(sky.drop('class', axis=1) , sky['class'])\n\n# Draw feature importances\nimp = model.feature_importances_\nf = sky.columns.drop('class')\n# Sort by importance descending\nf_sorted = f[np.argsort(imp)[::-1]]\nsns.barplot(x=f,y = imp, order = f_sorted)\nplt.title(\"Features importances\")\nplt.ylabel(\"Importance\")\nplt.show()","f0e95a1d":"# Select features as input for classification\nf_selected = f_sorted[:7].values\nsky_features = sky.loc[:,f_selected]\nsky_features.head()\n# Store labels in this variable\nsky_labels = sky['class']","a49c6a0d":"# Train\/test split\ntrain_X, test_X, train_y, test_y = train_test_split(sky_features, sky_labels, random_state=42)\n\n# The model\nforest = RandomForestClassifier(random_state=42)\n\n# Adjust tree's parameters with help of GridSearchCV\n# best variant was n_estimators: 40 or 70, f1score: 99,97,1\ntuned_parameters={'n_estimators': range(10,100,10)[1:]}\nclf = GridSearchCV(forest, tuned_parameters,cv=5)\n\n# Train and predict\ntrain = clf.fit(train_X, train_y)\npred = clf.predict(test_X)  \nprint('Best params are: %s' % clf.best_params_)\n","ff19fc2c":"# Print metrics\nprint(metrics.classification_report(pred, test_y))\n\n# Draw a chart for f1 score metric\nf1 = metrics.f1_score(pred, test_y, average=None)\nsns.barplot(sky['class'].cat.categories, f1)\nplt.title(\"F1 score by labels\")\nplt.show()","80eb3814":"# sklearn.metrics.confusion_matrix result: y - true labels, x = predicted labels\ncm = metrics.confusion_matrix(pred, test_y)\n# Normalize\ncm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\nconf_matrix = pd.DataFrame(cm\n                           ,index = sky['class'].cat.categories\n                           ,columns = sky['class'].cat.categories)\n# Visualize confusion matrix\nsns.heatmap(conf_matrix, annot=True)\nplt.title(\"Prediction confusion matrix\")\nplt.xlabel(\"Predicted\")\nplt.ylabel(\"True\")\nplt.show()","2fc2fd03":"print('Accuracy: %s' % metrics.accuracy_score(pred, test_y))","536e9076":"# 6. Conclusion \nAs we are good in classifying stars, quasars and galaxies, we are ready to space flights!\n\nHave a look at prediction accuracy:","8d9e28d3":"It does not contain <b>nans<\/b> at all, nothing to drop, good dataset, grand merci to the Author!","a2078138":"## 5.2 Confusion matrix\n","066cfc58":"# 3. Feature selection\n\nBalancing and normalization are **not needed** for trees and our life became easier. Dimension reduction should save training time, let's do it: check feature importance and select some.","dfb5cd17":"## 3.1 Analyze feature importances\nUse Tree model not for prediction only, but to calc feature importances.","b5f41943":"# 4. Train the model\n\nChoose **RandomForestClassifier** as a base model and **GridSearchCV** as an optimizer to tune parameters of the forest.","c8dc4319":"Features look rather independent, not like everything depends on everything. Exclusion: **u,g,r,i** are highly correlated, close to 1. [http:\/\/skyserver.sdss.org\/dr7\/en\/help\/docs\/glossary.asp](\/\/skyserver.sdss.org\/dr7\/en\/help\/docs\/glossary.asp) tells us that these letters are color filters for the light. Probably they often used in standard combinations, it can explain high correlation between them.","b89b0867":"## 2.3 Distribution analysis\n![](http:\/\/)Draw distribution plot for each feature by  each label. Is it skewed?","43067eb2":"Confusion matrix shows us that our prediction is excellent -  only few samples are misclassified. ","10a726d4":"> ## 3.2 Select important features\nWe can make not bad classification just knowing **redshift** value. But keeping features up to **u** will give us half a percent better accuracy. I tried :)\n","29ffc9d0":"# 2. EDA of the Universe\nCategorical column named **'class'** has 3 categories: **GALAXY**,  **STAR**,  **QSO** (quasar). They will be classification **labels**.\n\n**Features** are  all other columns\n## 2.1. General look","c393057d":"# 1. Introduction\nHere I am experimenting with **RandomForest** model for star, galaxy and quasar classification.\nFor tree models we need not data preparation,  just go to gym and start training. But it is still interesting what is there in the data, do explore it first.","e7c0bb83":"Looks like **redshift** of the light would be enough for our classification. Moving to feature selection...","8735782d":"## 2.2 Explore samples per label","9d4d5e50":"# 5. Results analysis\n## 5.1 Metrics\n**F1 score** is a measure for predictions on unbalanced data.","c5be5a7c":"Much less quasars than galaxies or stars. Fortunately, tree models can balance weights.","320fd5a2":"Features distribution is rather balanced. Don't see a big skew by labels.\n## 2.4 Correlation analysis\n"}}