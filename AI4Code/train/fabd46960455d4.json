{"cell_type":{"60afb602":"code","de0d5b7f":"code","68a19082":"code","451d3840":"code","815b246b":"code","971d20d8":"code","a3643644":"code","a334e469":"code","c67ab4a5":"code","c8cf8d2d":"code","94437a4c":"code","612fe2a5":"code","5c4abcb5":"code","5a5ffbb8":"code","2a198558":"code","1e1efbdb":"code","131380c8":"code","de78c293":"code","cecf5e74":"code","9655012c":"code","e77e01ea":"code","1753c9d4":"code","c6760d2b":"code","a120b6ee":"code","fd6b2087":"code","9238bbec":"code","e533ca91":"code","243a41dc":"code","7d4b9a82":"code","f8d9f081":"code","64a9f416":"code","307e1352":"code","e7c87ad6":"code","f7c9cdd2":"code","5b6d328b":"code","3810695f":"code","514ce83e":"code","fdae08e0":"code","405e2cf8":"code","de0e0429":"code","4abc7bab":"code","3957f504":"code","4487ddcf":"code","363d941b":"code","10c91f79":"code","44c6f006":"code","0446dc31":"markdown","b99d64e6":"markdown","f8f2c0a4":"markdown","57e4cbf3":"markdown","bef69f6d":"markdown","a14306a6":"markdown","a663b525":"markdown","3007e927":"markdown","be540239":"markdown","7536589d":"markdown","bff08e07":"markdown","0dfb7e69":"markdown","ef7d011c":"markdown","8d486fcd":"markdown","9d3c873a":"markdown","37b712eb":"markdown","6da92553":"markdown","0c900ffd":"markdown","120b1936":"markdown","391761b2":"markdown","4f5c2079":"markdown","e6c0a377":"markdown"},"source":{"60afb602":"import pandas as pd\nimport numpy as np\nfrom datetime import datetime, timedelta\nimport seaborn as sns\n%matplotlib inline\nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom matplotlib import mlab\nfrom matplotlib.ticker import FuncFormatter\nmatplotlib.style.use('ggplot')\nimport sqlite3 \nimport warnings\nwarnings.filterwarnings('ignore')\npd.options.mode.chained_assignment = None\n\nmta = pd.read_csv('..\/input\/mta-turnstile-data-first-half-of-2018\/turnstile_18_1.csv', sep = ',',header = None)\nmta.columns =['C\/A','unit','SCP','Station','date','time','desc','entries','exits']      ","de0d5b7f":"mta.head()","68a19082":"mta['datetime'] = pd.to_datetime(mta.date + ' ' + mta.time, format='%m\/%d\/%Y  %H:%M:%S')\nmta['turnstile'] = mta['C\/A'] + '-' + mta['unit'] + '-' + mta['SCP']\n\nmta = mta[(mta.datetime >= '01-01-18 00:00:00') & \n          (mta.datetime <'07-01-18 00:00:00')]","451d3840":"mta.head()","815b246b":"print('Descriptions of entries:')\nprint(mta['entries'].describe())\nprint('')\nprint('Descriptions of exits:')\nprint(mta['exits'].describe())","971d20d8":"# group data by turnstile, sort each turnstile by datetime\n# Create new columns en_diff and ex_diff for each unique turnstile\n# turn cumulative counts into counts per interval\n\nmta_sorted = mta.sort_values(['turnstile', 'datetime'])\nmta_sorted = mta_sorted.reset_index(drop = True)\n\nturnstile_grouped = mta_sorted.groupby(['turnstile'])\n\nmta_sorted['entries_diff'] = turnstile_grouped['entries'].transform(pd.Series.diff)\nmta_sorted['exits_diff'] = turnstile_grouped['exits'].transform(pd.Series.diff)\n\nmta_sorted.head()","a3643644":"del mta","a334e469":"# check distribution of entries_diff and exits_diff\nprint('Descriptions of entries_diff:')\nprint(mta_sorted['entries_diff'].describe())\nprint('')\nprint('Descriptions of exits_diff:')\nprint(mta_sorted['exits_diff'].describe())","c67ab4a5":"print('Number of negative entries_diff: %d' %len(mta_sorted['entries_diff'][mta_sorted['entries_diff'] < 0]))\nprint('Number of negative exits_diff: %d' %len(mta_sorted['exits_diff'][mta_sorted['exits_diff'] < 0]))\nprint('Number of unqiue turnstiles: %d' %len(mta_sorted['turnstile'].unique()))\nprint('Number of NaN rows: %d' %len(mta_sorted[mta_sorted['entries_diff'].isnull()]))","c8cf8d2d":"mta_sorted['entries_diff'] = mta_sorted['entries_diff'].fillna(0)\nmta_sorted['exits_diff'] = mta_sorted['exits_diff'].fillna(0)\n\nmta_sorted['entries_diff'][mta_sorted['entries_diff'] < 0] = 0 \nmta_sorted['exits_diff'][mta_sorted['exits_diff'] < 0] = 0 \n\nmta_sorted['entries_diff'][mta_sorted['entries_diff'] >= 6000] = 0 \nmta_sorted['exits_diff'][mta_sorted['exits_diff'] >= 6000] = 0","94437a4c":"mta_h1 = mta_sorted[['turnstile','Station', 'datetime','date','time', 'entries_diff','exits_diff']]\nmta_h1['busy'] = mta_h1['entries_diff'].values + mta_h1['exits_diff'].values\n\ndel [mta_sorted]\nmta_h1.shape","612fe2a5":"mta_h1.head()","5c4abcb5":"top_10 =mta_h1.groupby(['Station']).agg({'busy': sum}).sort_values(by = 'busy', ascending = False).head(10)\n\nfig, ax = plt.subplots(figsize=(25, 8))\ntop_10.sort_values(by = 'busy',ascending=True).plot(kind='barh', color ='orange',ax=ax)\nax.set(title='Top 10 Stations by Total Entries and Exits (January-June 2018)', xlabel='total traffic', ylabel='')\nax.legend().set_visible(False)","5a5ffbb8":"mta_penn = mta_h1[mta_h1['Station'] == '34 ST-PENN STA']\nprint('Number of turnstiles at 34-PENN STATION: %d' % len(mta_penn.turnstile.unique()))","2a198558":"penn_turnstile =mta_penn.groupby(['turnstile']).agg({'busy': sum}).sort_values(by = 'busy', ascending = False)\n\nfig, ax = plt.subplots(figsize=(25, 8))\npenn_turnstile.sort_values(by = 'busy',ascending=True).plot(kind='barh', color ='steelblue',ax=ax)\nax.set(title='Total Traffic by Turnstile (34 ST-PENN STA)', xlabel='total traffic', ylabel='')\nax.legend().set_visible(False)","1e1efbdb":"top_5 =mta_penn.groupby(['turnstile']).agg({'busy': sum}).sort_values(by = 'busy', ascending = False).head()\n\nfig, ax = plt.subplots(figsize=(25, 8))\ntop_5.sort_values(by = 'busy',ascending=True).plot(kind='barh', color ='steelblue',ax=ax)\nax.set(title='Top 5 Turnstiles by Total Traffic (34 ST-PENN STA)', xlabel='total traffic', ylabel='')\nax.legend().set_visible(False)","131380c8":"bottom_5 =mta_penn.groupby(['turnstile']).agg({'busy': sum}).sort_values(by = 'busy', ascending = True).head()\n\nfig, ax = plt.subplots(figsize=(25, 8))\nbottom_5.sort_values(by = 'busy',ascending=True).plot(kind='barh', color ='steelblue',ax=ax)\nax.set(title='Bottom 5 Turnstiles by Total Traffic (34 ST-PENN STA)', xlabel='total traffic', ylabel='')\nax.legend().set_visible(False)","de78c293":"mta_penn = mta_h1[(mta_h1['Station'] == '34 ST-PENN STA')]\nmta_penn['time'] = pd.to_datetime(mta_penn['time'], format = '%H:%M:%S') # have to be datetime format so that we could resample\nmta_penn_grouped = mta_penn.groupby(['time']).agg({'busy': sum}).sort_values(by = 'busy', ascending = False)\nmta_penn_grouped.resample('60T',convention='end').sum().sort_values(by = 'busy', ascending = False).head()","cecf5e74":"mta_h1busy = mta_h1[['date', 'busy']].groupby(['date']).sum().reset_index()\nmta_h1busy['date'] = pd.to_datetime(mta_h1busy['date'])","9655012c":"mta_h1busy.set_index('date')['busy'].plot(color = 'steelblue')\nplt.title('Daily Total Traffic for First Half of 2018') \nplt.show()","e77e01ea":"del [mta_h1busy]","1753c9d4":"mta_h1['weekday'] = (mta_h1['datetime']).dt.weekday_name\nweekdays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\nmta_h1['weekday'] = pd.Categorical(mta_h1['weekday'], categories=weekdays, ordered = True)","c6760d2b":"weekday_ave = mta_h1[['entries_diff', 'exits_diff', 'busy', 'weekday']].groupby('weekday').sum().reset_index().sort_values(by = 'weekday')\nweekday_ave['emgergency'] = (weekday_ave['entries_diff'] - weekday_ave['exits_diff'])\/weekday_ave['busy']","a120b6ee":"fig, ax1 = plt.subplots()\nax2 = ax1.twinx()\n\np1 = weekday_ave['busy'].plot(kind='bar', color='steelblue', ax=ax1, label = 'entries')\np1.legend(loc = 1)\np2 = weekday_ave['exits_diff'].plot(kind='bar', color='orange', ax=ax1, label = 'exits')\np2.legend(loc = 1)\np3 = weekday_ave['emgergency'].plot(kind='line', dashes = [5, 2], color='maroon', ax=ax2, label = 'EE rate')\np3.legend(loc = (0.775, 0.75)) \n\nplt.xticks((0,1,2,3,4,5,6),('Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'))\nax1.set_xlabel('week of day')\nax1.set_ylabel('total traffic', color='steelblue')\n\nax2.set_ylabel('emgergency exit rate', color='maroon')\nax2.grid(False)\nax2.yaxis.set_major_formatter(FuncFormatter(lambda y, _: '{:.1%}'.format(y))) \nplt.title('Traffic & Emgergency Exits by Week of Day', size = 12) \nplt.show()","fd6b2087":"mta_penn = mta_h1[mta_h1['Station'] == '34 ST-PENN STA'].groupby(by = 'date').agg({'busy' : sum}).reset_index()\nmta_penn['date'] = pd.to_datetime(mta_penn['date'])\nmta_penn['month'] = mta_penn['date'].dt.month\npenn_month = mta_penn[['month', 'busy']].groupby('month')\npenn_mean = penn_month.mean()","9238bbec":"mta_penn['month']=mta_penn['month'].apply(str)\np1 = penn_mean.plot(kind='line', color = 'orange', dashes = (6, 2)) \np1.legend(['mean'])\nplt.boxplot([mta_penn[mta_penn['month'] == '1']['busy'].values,mta_penn[mta_penn['month'] == '2']['busy'].values,mta_penn[mta_penn['month'] == '3']['busy'].values,mta_penn[mta_penn['month'] == '4']['busy'].values,mta_penn[mta_penn['month'] == '5']['busy'].values,mta_penn[mta_penn['month'] == '6']['busy'].values])\nplt.xticks((1,2,3,4,5,6),('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'))\nplt.title('Daily Traffic by Month (34 ST-PENN STATION, quantiles & mean)', size = 13)\nplt.show()","e533ca91":"station_of_interest = '34 ST-PENN STA'\nmta_penn = mta_h1[mta_h1['Station'] == station_of_interest]\ntime_interval = '4H'\n\nmta_penn.head()","243a41dc":"stations_day_time = mta_penn[['Station', 'datetime', 'entries_diff','exits_diff','busy']]\nstations_day_time_group = stations_day_time.groupby(['Station','datetime'], as_index=False)\nstations_day_time = stations_day_time_group[['entries_diff', 'exits_diff','busy']].sum()\nrounded_day_time = stations_day_time.set_index('datetime').groupby(['Station'])\nrounded_day_time = rounded_day_time.resample(time_interval, convention='end').sum()\n\nprint ('Station of interest: ' + station_of_interest)\nprint ('Sample size before resampling:')\nprint (len(stations_day_time[stations_day_time.Station == station_of_interest]))\nprint ('Sample size after resampling:')\nprint (len(rounded_day_time.loc[station_of_interest]))\nrounded_day_time = rounded_day_time.reset_index()","7d4b9a82":"rounded_day_time.head()","f8d9f081":"stations_day_time = rounded_day_time\nstations_day_time['DAY'] = stations_day_time['datetime'].dt.dayofweek\nstations_day_time['TIME'] = stations_day_time['datetime'].dt.time","64a9f416":"stations_day_time_group = stations_day_time.groupby(['Station','DAY','TIME'])\nstations_day_time_group = stations_day_time_group['entries_diff'].mean().reset_index()","307e1352":"draw_station = stations_day_time_group\n\nstation_heatmap = draw_station.set_index(['DAY', 'TIME']).entries_diff.unstack(0)\nweekdays = {0:'Mon',1:'Tue',2:'Wed',3:'Thu',4:'Fri',5:'Sat',6:'Sun'}\nstation_heatmap.columns = [weekdays[c] for c in station_heatmap.columns]\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax.set(title='Entries: ' + station_of_interest , xlabel='', ylabel='Time')\nsns.heatmap(station_heatmap,ax=ax, cmap='Blues')\nplt.show()","e7c87ad6":"stations_day_time_group = stations_day_time.groupby(['Station','DAY','TIME'])\nstations_day_time_group = stations_day_time_group['exits_diff'].mean().reset_index()","f7c9cdd2":"draw_station = stations_day_time_group\n\nstation_heatmap = draw_station.set_index(['DAY', 'TIME']).exits_diff.unstack(0)\nweekdays = {0:'Mon',1:'Tue',2:'Wed',3:'Thu',4:'Fri',5:'Sat',6:'Sun'}\nstation_heatmap.columns = [weekdays[c] for c in station_heatmap.columns]\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax.set(title='Exits: ' + station_of_interest , xlabel='', ylabel='Time')\nsns.heatmap(station_heatmap,ax=ax, cmap='Blues')\nplt.show()","5b6d328b":"stations_day_time_group = stations_day_time.groupby(['Station','DAY','TIME'])\nstations_day_time_group = stations_day_time_group['busy'].mean().reset_index()","3810695f":"draw_station = stations_day_time_group\n\nstation_heatmap = draw_station.set_index(['DAY', 'TIME']).busy.unstack(0)\nweekdays = {0:'Mon',1:'Tue',2:'Wed',3:'Thu',4:'Fri',5:'Sat',6:'Sun'}\nstation_heatmap.columns = [weekdays[c] for c in station_heatmap.columns]\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax.set(title='Traffic: ' + station_of_interest , xlabel='', ylabel='Time')\nsns.heatmap(station_heatmap,ax=ax, cmap='Blues')\nplt.show()","514ce83e":"conn = sqlite3.connect('Station.db')","fdae08e0":"col_names = ['unit','C\/A','Station','LINENAME','DIVISION']\nremote = pd.read_excel('..\/input\/mta-remoteboothstations\/Remote-Booth-Station.xls', names=col_names).drop_duplicates(['unit','C\/A'])\nremote.head()","405e2cf8":"remote.to_sql(name='remote_booth_station', con=conn, if_exists='replace')","de0e0429":"cursor = conn.cursor()\ncursor.execute(\"\"\"SELECT sql FROM sqlite_master WHERE type = 'table' AND name = 'remote_booth_station'\"\"\")\ndesc = cursor.fetchall()\nprint(desc)","4abc7bab":"cursor = conn.cursor()\ncursor.execute(\"\"\"SELECT Station, COUNT(DISTINCT(unit)) FROM remote_booth_station GROUP BY Station ORDER BY COUNT(DISTINCT unit) DESC LIMIT 5\"\"\")\nstation = cursor.fetchall()\nprint(station)","3957f504":"cursor = conn.cursor()\ncursor.execute(\"\"\"SELECT COUNT(DISTINCT(Station)) FROM remote_booth_station \"\"\")\nstation = cursor.fetchall()\nprint(station)","4487ddcf":"cursor = conn.cursor()\ncursor.execute(\"\"\"SELECT COUNT(DISTINCT(DIVISION)) FROM remote_booth_station \"\"\")\nstation = cursor.fetchall()\nprint(station)","363d941b":"cursor = conn.cursor()\ncursor.execute(\"\"\"SELECT DIVISION, COUNT(DIVISION) FROM remote_booth_station GROUP BY DIVISION ORDER BY COUNT(DIVISION) DESC LIMIT 4\"\"\")\nstation = cursor.fetchall()\nprint(station)","10c91f79":"cursor = conn.cursor()\ncursor.execute(\"\"\"SELECT LENGTH(LINENAME)as ilen, Station FROM remote_booth_station GROUP BY STATION ORDER BY ilen DESC LIMIT 10\"\"\")\nstation = cursor.fetchall()\nprint(station)","44c6f006":"cursor.close()\nconn.close()","0446dc31":"### 2.1 The busiest 10 stations\n\nWe define **busy-ness** as the sum of entries and exits for each time interval (total traffic = entries + exits). The 10 stations shown in the below graph typically have multiple subway lines. 34th St Penn station, Grand Central, 42th St Port Authority and 125th st station are also important train\/bus stations that connect New York with other cities\/states on the east coast. For example, a large number of people commute between New York and New Jersey via Penn Station everyday.","b99d64e6":"- **How many MTA stations are there?**","f8f2c0a4":"## 5. Handling in sql\n\nIn this section we imported the metadata for MTA turnstiles to a local database using sqlite3 and ran some queries using sql. _LINENAME_ contains the lines at each station, each letter\/number stands for a unique subway line. _DIVISION_ contains the names of transit agencies prior to city takeover in the 1940.","57e4cbf3":"# MTA Turnstile Data Analysis\n\n### *Author: Yuqi Nie*\n\n## 0. Introduction\nThe New York subway [MTA](http:\/\/web.mta.info\/developers\/turnstile.html) turnstile data is a series of data files containing cumulative number of entries and exits by station, turnstile, date and time. Data files are produced weekly, data records are collected typically every 4 hours with some exceptions.\n\nIn this analysis we use data from the first half of 2018. Data size is over 5 million.\n\nVariables included in initially processed data:\n- **C\/A**      = Control Area (e.g., A002)\n- **unit**     = Remote Unit for a station (e.g., R051)\n- **SCP**      = Subunit Channel Position represents an specific address for a device (e.g., 02-00-00)\n- **station_code** = C\/A + unit, locating a station\n- **turnstile** = C\/A + unit + SCP, locating a turnstile\n- **Station**  = Represents the station name the device is located at\n- **date**     = Represents the date (MM-DD-YY)\n- **time**     = Represents the time (hh:mm:ss) for a scheduled audit event\n- **datetime** = date + time (MM-DD-YY hh:mm:ss)\n- **desc**     = Represent the \"REGULAR\" scheduled audit event (Normally occurs every 4 hours)\n- **entries**  = The comulative entry register value for a device\n- **exits**    = The cumulative exit register value for a device","bef69f6d":"Sanity check of *entries_diff* and *exits_diff*; number of observations with NaN should equal the number of unique turnstiles. *entries_diff* and *exits_diff* should always be positive since cumulative values are supposed to increase or at least stay even.","a14306a6":"IRT: The Interborough Rapid Transit<br>\nIND: The Independent Subway<br>\nBMT: The Brooklyn-Manhattan Transit<br>\nPTH: Port Authority Trans-Hudson, serving lower Manhattan and New Jersey<br>\n\n- **What are the stations that have the most subway lines?**","a663b525":"- **How many unique divisions are there? What divisions has the most stations?**","3007e927":"### 2.2 Turnstiles at the busiest station\n\n**Calculating traffic per turnstile for each station might be able to help MTA better design subway entrances, plan for construction and locate dysfunctioning turnstiles. If we have information on the exact location of exits each turnstile goes to, we might be able to further discover the traffic flow.**\n\nThere are **98** turnstiles at 34 Penn Station, traffic at each turnstile varies enormously, ranging from **less than 100 counts to more than 13 million counts**.","be540239":"**Traffic on weekdays are generally much heavier than weekends, emergency exit rate follows the same trend**, which confirmed our expectation.","7536589d":"34 Penn Station's **entrances** are busy during morning time (4-8am) in general and apparently **Tuesday mornings** are the craziest.","bff08e07":"## 3. What hour is the busiest for the busiest station - resampling time series data\n \n\nThe original data records are typically generated every 4 hours. Most data records are collected at 0\/4\/8\/12\/16\/20, while others are collected at 3\/7\/11\/15\/19. We resampled the data using 1 hour as the new time interval. **The busiest hour for 34 ST-PENN STATION is 8pm.**","0dfb7e69":"The max values of *entries_diff* and *exits_diff* are more than a million times larger than their 75th percentiles, which is apparently abnormal. Minimum values are negative, which is also abnormal. We will set these outliers as 0. After taking a look at observations with negative _entries_diffs_, we find out that of them have _DESC == 'DOOR CLOSE'_. It seems that the entry and exit counts might be reset when experiencing door close. It would be inappropriate to infer the correct values for these observations, therefore we will set them as 0. We also set NAs as 0 since they are the first data record for each turnstile.","ef7d011c":"When adding entries and exits together, **34 Penn Station is busy in general on weekdays, particularly on Tuesdays and at Friday nights.**","8d486fcd":"### 4.3 Mean and quantiles of daily traffic by month\n\nWhile the mean daily traffic has been growing, the median is much higher and generally remain the same from Jan to Dec.","9d3c873a":"## 1. Sanity Check\n\n### 1.1 Original data\nFirst we look for potential abnormal entries and exits values. Since entries and exits are cumulative values, quantiles do not mean anything, but there should not be any negative values. We expect entries to be larger than exits in general, because New York subway stations commonly have emergency exits, which do not collect exit records. Exits are only collected when a passenger exit through a turnstile.","37b712eb":"The pattern of exits seem to be the exact opposite of that of entries. A large amount of traffic comes in at *noon-4pm at Friday nights*. It seems that **in the morning 34 Penn Station is where passengers start their commute, in the evening, especially at Friday nights, it is many passengers' destination. **","6da92553":"- **Which station has the most number of units?**","0c900ffd":"### 4.4 Traffic heat map of 34 Penn Station\n\nIn this section we visualized the traffic of the busiest station in New York by hour and day of week. Our first step is to **resample** the data by 4-hour time intervals and **round** the timestamps to 0\/4\/8\/16\/20 o'clock. Resampling and rounding is necessary because in the original data, records are generated at irregular timestamps when a gate shuts down for maintenance or runs into other issues.","120b1936":"### 4.2 Traffic by week of day - periodicity confirmed\n\nIn New York subway stations, passengers usually exit throught turnstiles - where incoming passengers enter as well. According to our observation, **many people use the emergency exits during rush hours** for convenience, even though there are no emergencies. The alarms do not go off at all. Entries and exits are recorded at turnstiles only and cannot be collected when emergency exits are used, therefore total entries has to be larger than total exits, and we suspect that this gap will be larger on weekdays and smaller on weekends.\n\nThe difference between total entries and total exits is not the exact number of emergency exits, but it can be used as a proxy. We represent this gap as the emergency exit rate:<br>\n\n**EE rate = (entries - exits)\/(entries - exits)**","391761b2":"## 2. What are the busiest stations and turnstiles?","4f5c2079":"### 1.2 Use differenced data instead\n\nThen we calculate the differences between every two collection timestamps and look for abnormal entries\/exits per time interval. NaN values are generated for the very first data record for each unique turnstile during differencing.","e6c0a377":"## 4. Visualization of traffic\n\n### 4.1 Daily total traffic for all stations in New York\n\nIn the below graph we plot the daily total traffic of all stations combined from Jan to Dec. There is a clear **periodicity**. It is reasonable to assume that traffic goes up on weekdays and reduces on weekends."}}