{"cell_type":{"d8d71391":"code","dd74293e":"code","1766a19b":"code","5ce226e3":"code","395dc734":"code","6d44efff":"code","cc46c2e2":"code","a513f4b6":"code","6aef315b":"code","e57112a3":"code","bd8bf06d":"code","8a834e4d":"code","4c1c8ee6":"code","78cead3b":"code","9a41a978":"code","740c4680":"code","ef51a0d6":"code","a7f1305c":"code","055537d1":"code","52402b15":"code","2aa5d60e":"code","b5965f9a":"code","16ba6b10":"code","85a1a1ca":"code","d00a5a04":"code","c49bb1e3":"code","b1cb08c6":"code","bed22cb4":"code","0fad7313":"code","edc27472":"code","56c3bf69":"code","550fcade":"code","b1d5b5ba":"code","8b7e9ec0":"code","e780c838":"code","f2593598":"code","c84cc63a":"code","d294bd48":"code","bd6fe9f1":"code","810d94cb":"code","80d31aec":"code","56f31925":"code","42d7f640":"code","4a62967c":"code","6637a0d3":"code","7ca3a03f":"code","e196c969":"code","a4f95986":"code","38931efd":"code","3ffa3418":"code","bce827b6":"code","b7c2a4db":"code","990e4eea":"code","7f0c10b0":"code","5a00e51d":"code","c3ccf545":"code","64758465":"code","80c23038":"code","4650b2cb":"code","4a5547d6":"code","c0fb1cb7":"code","16228df6":"code","ff88431e":"code","c89f21ce":"code","6ece2796":"code","494740b7":"code","709f0b71":"code","b645267d":"code","6975e360":"code","9e4ee27a":"code","7a291f95":"code","90ca6451":"code","16c63645":"code","7dc60941":"code","890849a2":"code","02236101":"code","f2b4da6c":"code","ce032008":"code","22a9dcd0":"code","cb38ab38":"code","ecf1325c":"code","92d0aa47":"code","ffdd53ea":"code","e6958c58":"code","0bcaea7b":"code","75109b1b":"code","742e405f":"code","56d0f745":"code","84330493":"code","97c9e69c":"code","b6652240":"code","1612b617":"code","0bf28bc6":"code","46736082":"code","74bca3bd":"code","caed2a62":"code","259092d2":"code","426dac58":"code","74f70f3d":"code","f5d5767a":"code","f2f62094":"code","eed11bdb":"code","1a561965":"markdown","768697a1":"markdown","96c12271":"markdown","ef86b12c":"markdown","a3bee167":"markdown","ccf018b5":"markdown","ddb08b71":"markdown","454f1773":"markdown","d0df5c25":"markdown","597bb143":"markdown","32dad22b":"markdown","8010920d":"markdown","014f6407":"markdown","52b1fd6e":"markdown","8b0f4caf":"markdown","d7d3e2da":"markdown","6a51d1fd":"markdown","91cb1b47":"markdown","9ea6b136":"markdown","dddeff3e":"markdown","48524b0b":"markdown","4193cecf":"markdown","fe76fc86":"markdown","c911a5b4":"markdown","eab4d8f5":"markdown","2e54e873":"markdown","8b263790":"markdown","5b330986":"markdown","6b74150a":"markdown","28dec7ac":"markdown","01d6d66a":"markdown","7765ad33":"markdown","da67997b":"markdown","d77a9b3b":"markdown","f4a1ffb3":"markdown","ae7baf16":"markdown","0874f1e5":"markdown","43093bd5":"markdown","450a6f0c":"markdown","17f74501":"markdown","841129cb":"markdown","139851ba":"markdown","4ca27270":"markdown","da31d4a5":"markdown","36ed8738":"markdown","e7eddfb3":"markdown","9c989512":"markdown","1f05efd5":"markdown","5b7fb366":"markdown","439a887b":"markdown","8f46cc45":"markdown","22b74416":"markdown","3aa67809":"markdown","5dd60a60":"markdown","db4b0e03":"markdown","8df1ab00":"markdown","00b8d7fa":"markdown","513062c5":"markdown","b2531230":"markdown","5567edfc":"markdown","bf61c977":"markdown","bd59f373":"markdown","212d1bbd":"markdown"},"source":{"d8d71391":"# Importing libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","dd74293e":"# To perform Hierarchical clustering\nfrom scipy.cluster.hierarchy import linkage\nfrom scipy.cluster.hierarchy import dendrogram\nfrom scipy.cluster.hierarchy import cut_tree\nfrom sklearn.metrics import silhouette_score\nfrom sklearn.cluster import KMeans","1766a19b":"# import all libraries and dependencies for machine learning\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\nfrom sklearn.decomposition import IncrementalPCA\nfrom sklearn.neighbors import NearestNeighbors\nfrom random import sample\nfrom numpy.random import uniform\nfrom math import isnan\n","5ce226e3":"# Data display coustomization\npd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', None)","395dc734":"us=pd.read_csv(\"\/kaggle\/input\/us-police-shootings\/shootings.csv\")\nus.head()","6d44efff":"us_d=us.copy()\nus_d.drop_duplicates(subset=None, inplace=True)","cc46c2e2":"us_d.shape","a513f4b6":"us.shape","6aef315b":"del us_d","e57112a3":"us.info()","bd8bf06d":"us.describe()","8a834e4d":"us.shape","4c1c8ee6":"us['year'] = pd.DatetimeIndex(us['date']).year\nus['month'] = pd.DatetimeIndex(us['date']).month\nus['day'] = pd.DatetimeIndex(us['date']).day\nus['week']= pd.DatetimeIndex(us['date']).weekofyear\nus['quarter']= pd.DatetimeIndex(us['date']).quarter","78cead3b":"us['Weapon']=us['armed']+'-' + us['arms_category']","9a41a978":"us.head()","740c4680":"(us.isnull().sum() * 100 \/ len(us)).value_counts(ascending=False)","ef51a0d6":"us.isnull().sum().value_counts(ascending=False)","a7f1305c":"(us.isnull().sum(axis=1) * 100 \/ len(us)).value_counts(ascending=False)","055537d1":"us.isnull().sum(axis=1).value_counts(ascending=False)","52402b15":"us.head()","2aa5d60e":"us.nunique()","b5965f9a":"plt.figure(figsize=(10,5))\nax=us.name.value_counts(ascending=False)[:5].plot(kind=\"bar\",color='Red')\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.xticks(rotation=45)\nax.set(ylabel = 'Frequency', xlabel= 'Name')\nplt.show()","16ba6b10":"us.name.value_counts()[:5]","85a1a1ca":"plt.figure(figsize=(10,5))\nax=us.date.value_counts()[:3].plot(kind=\"bar\",color='Red')\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.xticks(rotation=45)\nax.set(ylabel = 'Frequency', xlabel= 'Date')\nplt.show()","d00a5a04":"us.date.value_counts()[:3]","c49bb1e3":"plt.figure(figsize=(10,5))\nax=us.manner_of_death.value_counts().plot(kind=\"bar\",color='Red')\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.xticks(rotation=45)\nax.set(ylabel = 'Frequency', xlabel= 'Manner of Death')\nplt.show()","b1cb08c6":"round(us.manner_of_death.value_counts()\/len(us) * 100 , 2)","bed22cb4":"plt.figure(figsize=(30,5))\nax=us.armed.value_counts().plot(kind=\"bar\",color='Red')\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.xticks(rotation=90)\nax.set(ylabel = 'Frequency', xlabel= 'Armed')\nplt.show()","0fad7313":"round(us.armed.value_counts()\/len(us) * 100 , 2)","edc27472":"us['armed']=us['armed'].replace(['shovel', 'hammer', 'hatchet', 'sword', 'machete', 'box cutter',\n                                 'metal object', 'screwdriver', 'lawn mower blade', 'flagpole',\n                                 'guns and explosives', 'cordless drill', 'metal pole', 'Taser',\n                                 'metal pipe', 'metal hand tool', 'blunt object', 'metal stick',\n                                 'sharp object', 'meat cleaver', 'carjack', 'chain',\n                                 \"contractor's level\", 'stapler', 'crossbow', 'bean-bag gun',\n                                 'baseball bat and fireplace poker', 'straight edge razor',\n                                 'gun and knife', 'ax', 'brick', 'baseball bat', 'hand torch',\n                                 'chain saw', 'garden tool', 'scissors', 'pole', 'pick-axe',\n                                 'flashlight', 'nail gun', 'spear', 'chair', 'pitchfork',\n                                 'hatchet and gun', 'rock', 'piece of wood', 'bayonet', 'pipe',\n                                 'glass shard', 'motorcycle', 'pepper spray', 'metal rake', 'baton',\n                                 'crowbar', 'oar', 'machete and gun', 'air conditioner',\n                                 'pole and knife', 'beer bottle', 'baseball bat and bottle',\n                                 'fireworks', 'pen', 'chainsaw', 'gun and sword', 'gun and car',\n                                 'pellet gun', 'BB gun', 'incendiary device', 'samurai sword',\n                                 'bow and arrow', 'gun and vehicle', 'vehicle and gun', 'wrench',\n                                 'walking stick', 'barstool', 'grenade', 'BB gun and vehicle',\n                                 'wasp spray', 'air pistol', 'baseball bat and knife',\n                                 'vehicle and machete', 'ice pick', 'car, knife and mace'],'Other')","56c3bf69":"round(us.armed.value_counts()\/len(us) * 100 , 2)","550fcade":"plt.figure(figsize=(10,5))\nax=us.armed.value_counts()[:5].plot(kind=\"bar\",color='Red')\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.xticks(rotation=90)\nax.set(ylabel = 'Frequency', xlabel= 'Armed')\nplt.show()","b1d5b5ba":"us.age.describe()","8b7e9ec0":"plt.figure(figsize=(30,5))\nax=us.age.value_counts().plot(kind=\"bar\",color='Red')\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.xticks(rotation=90)\nax.set(ylabel = 'Frequency', xlabel= 'Age')\nplt.show()","e780c838":"us.age.describe()","f2593598":"bins = [0,10,18,30,40,50,60,70,80,90,100]\nlabels =['babies','teen','20s','30s','40s','50s','60s','70s','80s','90s']\nus['age'] = pd.cut(us['age'], bins,labels=labels)\nus.age.value_counts(ascending=False)\n\n","c84cc63a":"plt.figure(figsize=(30,5))\nax=us.age.value_counts().plot(kind=\"bar\",color='Red')\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.xticks(rotation=90)\nax.set(ylabel = 'Frequency', xlabel= 'Age')\nplt.show()","d294bd48":"us['age']=us['age'].replace(['60s','70s','80s','90s'],'Senior Citizen')\nus['age']=us['age'].replace(['babies','teen'],'Children')\nus.age.value_counts()","bd6fe9f1":"round(us.age.value_counts()\/len(us) * 100 , 2)","810d94cb":"plt.figure(figsize=(10,5))\nax=us.age.value_counts().plot(kind=\"bar\",color='Red')\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.xticks(rotation=45)\nax.set(ylabel = 'Frequency', xlabel= 'Age Group')\nplt.show()","80d31aec":"plt.figure(figsize=(10,5))\nax=us.month.value_counts().plot(kind=\"bar\",color='Red')\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.xticks(rotation=45)\nax.set(ylabel = 'Frequency', xlabel= 'Months')\nplt.show()","56f31925":"dict ={1:'Jan',2:'Feb',3:'Mar',4:'Apr',5:'May',6:'Jun',7:'Jul',8:'Aug',9:'Sept',10:'Oct',11:'Nov',12:'Dec'}\nus['month']= us['month'].map(dict) ","42d7f640":"plt.figure(figsize=(10,5))\nax=us.month.value_counts().plot(kind=\"bar\",color='Red')\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.xticks(rotation=45)\nax.set(ylabel = 'Frequency', xlabel= 'Months')\nplt.show()","4a62967c":"round(us.month.value_counts()\/len(us) * 100 , 2)","6637a0d3":"plt.figure(figsize=(25,5))\nax=us.week.value_counts().plot(kind=\"bar\",color='Red')\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.xticks(rotation=45)\nax.set(ylabel = 'Frequency', xlabel= 'Week')\nplt.show()","7ca3a03f":"round(us.week.value_counts()\/len(us) * 100 , 2)","e196c969":"plt.figure(figsize=(20,5))\nax=us.day.value_counts().plot(kind=\"bar\",color='Red')\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.xticks(rotation=45)\nax.set(ylabel = 'Frequency', xlabel= 'Days')\nplt.show()","a4f95986":"round(us.day.value_counts()\/len(us) * 100 , 2)","38931efd":"plt.figure(figsize=(10,5))\nax=us.quarter.value_counts().plot(kind=\"bar\",color='Red')\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.xticks(rotation=45)\nax.set(ylabel = 'Frequency', xlabel= 'Quarters')\nplt.show()","3ffa3418":"round(us.quarter.value_counts()\/len(us) * 100 , 2)","bce827b6":"plt.figure(figsize=(10,5))\nax=us.gender.value_counts().plot(kind=\"bar\",color='Red')\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.xticks(rotation=45)\nax.set(ylabel = 'Frequency', xlabel= 'Gender')\nplt.show()","b7c2a4db":"round(us.gender.value_counts()* 100 \/ len(us),2)","990e4eea":"plt.figure(figsize=(10,5))\nax=us.race.value_counts().plot(kind=\"bar\",color='Red')\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.xticks(rotation=45)\nax.set(ylabel = 'Frequency', xlabel= 'Race')\nplt.show()","7f0c10b0":"round(us.race.value_counts()* 100 \/ len(us),2)","5a00e51d":"plt.figure(figsize=(10,5))\nax=us.city.value_counts()[:5].plot(kind=\"bar\",color='Red')\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.xticks(rotation=45)\nax.set(ylabel = 'Frequency', xlabel= 'City')\nplt.show()","c3ccf545":"round(us.city.value_counts()* 100 \/ len(us),2)[:5]","64758465":"plt.figure(figsize=(10,5))\nax=us.state.value_counts()[:5].plot(kind=\"bar\",color='Red')\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.xticks(rotation=45)\nax.set(ylabel = 'Frequency', xlabel= 'State')\nplt.show()","80c23038":"round(us.state.value_counts()* 100 \/ len(us),2)[:5]","4650b2cb":"plt.figure(figsize=(10,5))\nax=us.signs_of_mental_illness.value_counts().plot(kind=\"bar\",color='Red')\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.xticks(rotation=45)\nax.set(ylabel = 'Frequency', xlabel= 'Signs of Mental Illness')\nplt.show()","4a5547d6":"round(us.signs_of_mental_illness.value_counts()* 100 \/ len(us),2)","c0fb1cb7":"plt.figure(figsize=(10,5))\nax=us.threat_level.value_counts().plot(kind=\"bar\",color='Red')\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.xticks(rotation=45)\nax.set(ylabel = 'Frequency', xlabel= 'Threat level')\nplt.show()","16228df6":"round(us.threat_level.value_counts()* 100 \/ len(us),2)","ff88431e":"plt.figure(figsize=(10,5))\nax=us.flee.value_counts().plot(kind=\"bar\",color='Red')\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.xticks(rotation=45)\nax.set(ylabel = 'Frequency', xlabel= 'Flee')\nplt.show()","c89f21ce":"round(us.flee.value_counts()* 100 \/ len(us),2)","6ece2796":"plt.figure(figsize=(10,5))\nax=us.body_camera.value_counts().plot(kind=\"bar\",color='Red')\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.xticks(rotation=45)\nax.set(ylabel = 'Frequency', xlabel= 'Body Camera')\nplt.show()","494740b7":"round(us.body_camera.value_counts()* 100 \/ len(us),2)","709f0b71":"plt.figure(figsize=(10,5))\nax=us.arms_category.value_counts().plot(kind=\"bar\",color='Red')\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.xticks(rotation=45)\nax.set(ylabel = 'Frequency', xlabel= 'Arm Catergory')\nplt.show()","b645267d":"round(us.arms_category.value_counts()* 100 \/ len(us),2)","6975e360":"us['arms_category']=us['arms_category'].replace(['Hand tools','Explosives','Electrical devices',\n                                                'Piercing objects','Multiple'],'Other')\nround(us.arms_category.value_counts()* 100 \/ len(us),2)","9e4ee27a":"plt.figure(figsize=(10,5))\nax=us.arms_category.value_counts().plot(kind=\"bar\",color='Red')\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.xticks(rotation=45)\nax.set(ylabel = 'Frequency', xlabel= 'Arm Catergory')\nplt.show()","7a291f95":"plt.figure(figsize=(10,5))\nax=us.Weapon.value_counts()[:5].plot(kind=\"bar\",color='Red')\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.xticks(rotation=45)\nax.set(ylabel = 'Frequency', xlabel= 'Weapon')\nplt.show()","90ca6451":"round(us.Weapon.value_counts()* 100 \/ len(us),2)","16c63645":"us['Weapon']=us['Weapon'].replace(['shovel-Blunt instruments','nail gun-Piercing objects',\n                                   'hammer-Blunt instruments', 'hatchet-Blunt instruments',\n                                   'sword-Sharp objects', 'machete-Sharp objects',\n                                   'box cutter-Sharp objects', 'metal object-Blunt instruments',\n                                   'screwdriver-Piercing objects', 'lawn mower blade-Sharp objects',\n                                   'flagpole-Blunt instruments', 'guns and explosives-Multiple',\n                                   'cordless drill-Piercing objects', 'metal pole-Blunt instruments',\n                                   'Taser-Electrical devices', 'metal pipe-Blunt instruments',\n                                   'metal hand tool-Hand tools', 'blunt object-Blunt instruments',\n                                   'metal stick-Blunt instruments', 'sharp object-Sharp objects',\n                                   'meat cleaver-Sharp objects', 'carjack-Blunt instruments',\n                                   'chain-Other unusual objects',\n                                   \"contractor's level-Other unusual objects\",\n                                   'stapler-Other unusual objects', 'crossbow-Piercing objects',\n                                   'bean-bag gun-Guns', 'baseball bat and fireplace poker-Multiple',\n                                   'straight edge razor-Sharp objects', 'gun and knife-Multiple',\n                                   'ax-Blunt instruments', 'brick-Blunt instruments',\n                                   'baseball bat-Blunt instruments',\n                                   'hand torch-Other unusual objects', 'chain saw-Sharp objects',\n                                   'garden tool-Blunt instruments', 'scissors-Sharp objects',\n                                   'pole-Blunt instruments', 'pick-axe-Piercing objects',\n                                   'flashlight-Other unusual objects',\n                                   'spear-Piercing objects', 'chair-Other unusual objects',\n                                   'pitchfork-Piercing objects', 'hatchet and gun-Multiple',\n                                   'rock-Blunt instruments', 'piece of wood-Other unusual objects',\n                                   'bayonet-Sharp objects', 'pipe-Blunt instruments',\n                                   'glass shard-Sharp objects', 'motorcycle-Vehicles',\n                                   'pepper spray-Other unusual objects',\n                                   'metal rake-Blunt instruments', 'baton-Blunt instruments',\n                                   'crowbar-Blunt instruments', 'oar-Other unusual objects',\n                                   'machete and gun-Multiple',\n                                   'air conditioner-Other unusual objects', 'pole and knife-Multiple',\n                                   'beer bottle-Sharp objects', 'baseball bat and bottle-Multiple',\n                                   'fireworks-Explosives', 'pen-Piercing objects',\n                                   'chainsaw-Sharp objects', 'gun and sword-Multiple',\n                                   'gun and car-Multiple', 'pellet gun-Guns', 'BB gun-Guns',\n                                   'incendiary device-Explosives', 'samurai sword-Sharp objects',\n                                   'bow and arrow-Multiple', 'gun and vehicle-Multiple',\n                                   'vehicle and gun-Multiple', 'wrench-Blunt instruments',\n                                   'walking stick-Blunt instruments',\n                                   'barstool-Other unusual objects', 'grenade-Explosives',\n                                   'BB gun and vehicle-Multiple', 'wasp spray-Other unusual objects',\n                                   'air pistol-Guns', 'baseball bat and knife-Multiple',\n                                   'vehicle and machete-Multiple', 'ice pick-Piercing objects',\n                                   'car, knife and mace-Multiple'],'Other')\nround(us.Weapon.value_counts()* 100 \/ len(us),2)","7dc60941":"plt.figure(figsize=(10,5))\nax=us.Weapon.value_counts().plot(kind=\"bar\",color='Red')\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.xticks(rotation=90)\nax.set(ylabel = 'Frequency', xlabel= 'Weapon')\nplt.show()","890849a2":"us.pop('id')\nus.head()","02236101":"plt.figure(figsize=(10,5))\nax=us.year.value_counts().plot(kind=\"bar\",color='Red')\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.xticks(rotation=90)\nax.set(ylabel = 'Frequency', xlabel= 'Year')\nplt.show()","f2b4da6c":"round(us.year.value_counts()* 100 \/ len(us),2)","ce032008":"us['Address']=us['city']+'-'+us['state']","22a9dcd0":"plt.figure(figsize=(30,5))\nax=us.Address.value_counts()[:15].plot(kind=\"bar\",color='Red')\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.xticks(rotation=90)\nax.set(ylabel = 'Frequency', xlabel= 'Address')\nplt.show()","cb38ab38":"round(us.Address.value_counts()* 100 \/ len(us),2)","ecf1325c":"plt.figure(figsize = (5,5))\nsns.heatmap(us.corr(), annot = True, cmap=\"rainbow\")\nplt.show()","92d0aa47":"us.head()","ffdd53ea":"us.drop(['date', 'armed','arms_category','city','state',\n        'year', 'month', 'day', 'week', 'quarter','name'], 1, inplace = True)","e6958c58":"us.head()","0bcaea7b":"df_White = us[us['race'] == 'White']\ndf_White.head()","75109b1b":"White_o=round((df_White.groupby(['race','gender','manner_of_death','Weapon']).size() \/ len(df_White) * 100),2)\nWhite_o\n","742e405f":"df_Black = us[us['race'] == 'Black']\ndf_Black.head()","56d0f745":"Black_o=round((df_Black.groupby(['race','gender','manner_of_death','Weapon']).size() \/ len(df_Black) * 100),2)\nBlack_o","84330493":"df_Asian = us[us['race'] == 'Asian']\ndf_Asian.head()","97c9e69c":"Asian_o=round((df_Asian.groupby(['race','gender','manner_of_death','Weapon']).size() \/ len(df_Asian) * 100),2)\nAsian_o","b6652240":"df_Native = us[us['race'] == 'Native']\ndf_Native.head()","1612b617":"Native_o=round((df_Native.groupby(['race','gender','manner_of_death','Weapon']).size() \/ len(df_Native) * 100),2)\nNative_o","0bf28bc6":"df_Other = us[us['race'] == 'Other']\ndf_Other.head()","46736082":"Other_o=round((df_Other.groupby(['race','gender','manner_of_death','Weapon']).size() \/ len(df_Other) * 100),2)\nOther_o","74bca3bd":"df_Hispanic = us[us['race'] == 'Hispanic']\ndf_Hispanic.head()","caed2a62":"Hispanic_o=round((df_Hispanic.groupby(['race','gender','manner_of_death','Weapon']).size() \/ len(df_Hispanic) * 100),2)\nHispanic_o","259092d2":"Hispanic_p=round((df_Hispanic.groupby(['race','Address']).size() \/ len(us) * 100),2)\nHispanic_p","426dac58":"Black_p=round((df_Black.groupby(['race','Address']).size() \/ len(df_Black) * 100),2)\nBlack_p","74f70f3d":"Asian_p=round((df_Asian.groupby(['race','Address']).size() \/ len(df_Asian) * 100),2)\nAsian_p","f5d5767a":"White_p=round((df_White.groupby(['race','Address']).size() \/ len(df_White) * 100),2)\nWhite_p","f2f62094":"Other_p=round((df_Other.groupby(['race','Address']).size() \/ len(df_Other) * 100),2)\nOther_p","eed11bdb":"Native_p=round((df_Native.groupby(['race','Address']).size() \/ len(df_Native) * 100),2)\nNative_p","1a561965":"## Null Percentage: Columns","768697a1":"Following Addresses are having most Shoot crimes:\n- Los Angeles-CA \n- Phoenix-AZ \n- Houston-TX\n- Las Vegas-NV\n- San Antonio-TX\n\n","96c12271":"- 22.53% of shootout deaths were having signs of Mental Illness.\n- Government needs to have program to introduce Mental Health program to treat people well.","ef86b12c":"### Manner of Death ","a3bee167":"## Univariate Analysis","ccf018b5":"## Data Preparation","ddb08b71":"- 95 % of US shootings, manner of death was shot.\n- Only 5% of incidents, manner of death were getting shot and Tesered.","454f1773":"There is a trending appearing where shooters live stream  their shootout at social network, which is alarming for law & enforcement. \nSuch incidents are now 11.81% of total incident ","d0df5c25":"# Data Cleaning","597bb143":"There are no missing \/ Null values either in columns or rows","32dad22b":"- Shootouts are maximun at 1st quarter, accounts of 30.03 % of total killings\n- Shootouts are minimun at 4th quarter, accounts of 21.78% of total killings ","8010920d":"# Duplicate Check","014f6407":"Top 3 Violent Days in US history are\n- 2018-04-01\n- 2018-01-06\n- 2018-06-29\n","52b1fd6e":"# Data Preparation","8b0f4caf":"## Gender","d7d3e2da":"## Body Camera ","6a51d1fd":"## Month","91cb1b47":"- Shootout kills max people with age group of 18-29 with 32.65%.\n- Shootout kills min people with age group of  0-17 with 3.88%.","9ea6b136":"## Quarter","dddeff3e":"![image1](https:\/\/s01.sgp1.cdn.digitaloceanspaces.com\/article\/146511-lytlicxlts-1598329921.jpg)","48524b0b":"## Threat Level","4193cecf":"## Data Loading","fe76fc86":"## Weapon","c911a5b4":"### Address ","eab4d8f5":"## Null Count: Columns","2e54e873":"## Signs of Mental Illness","8b263790":"Drop Unrequired fields ","5b330986":"Top 5 Cities with shootout incidents , this holds only 5.64% of cases reported.\n- Los Angeles \n- Phoenix \n- Houston\n- Las Vegas\n- San Antonio","6b74150a":"Top 5 States with shootout incidents , this holds only 37.61% of cases reported.\n- CA \n- TX \n- FL\n- AZ\n- CO","28dec7ac":"## Null Count: Rows","01d6d66a":"## Null Percentage: Rows","7765ad33":"## Flee","da67997b":"![image1](https:\/\/www.incimages.com\/uploaded_files\/image\/1920x1080\/getty_491726551_118982.jpg)","d77a9b3b":"62% of people didn't able to flee, as there were not prepared & was a surpise.","f4a1ffb3":"### Armed","ae7baf16":"- 50.58% of total killings were from white race, max in race.\n- Only .98% of total killings were from Other race, which exclude White, Black,Hispanic, Asian & Native.\n","0874f1e5":"The shape after running the drop duplicate command is same as the original dataframe.\n\nHence we can conclude that there were zero duplicate values in the dataset.","43093bd5":"### Age","450a6f0c":"# Race","17f74501":"# Exploratory Data Analytics","841129cb":"## **Understanding Race & Address Specific for US Police Shootings**","139851ba":"## Year","4ca27270":"## Arm Catergory ","da31d4a5":"- 56.28% of Weapons used were Guns\n- 7.66% weapons used were non conventional, means anything is used for having crime.\n- 3.49% cases where police misunderstood toy guns as real gun ","36ed8738":"64.56%  of Shootout has a threat level of Attack","e7eddfb3":"It seems TK TK are used for people where real identity was not discovered by police.","9c989512":"# Data Inspection","1f05efd5":"Common Name for Shootout are \n- TK TK    \n- Jeffrey Sims       \n- Eric Harris        \n- Miguel Mercado Segura           \n- Michael Brown     ","5b7fb366":"- Year 2015 has maximum shootout incident \n- Year 2020 is predicted having minimum shootout incident","439a887b":"- Shootouts are maximun at week 4, accounts of 2.59% of total killigs\n- Shootouts are minimun at week 53, accounts  of 0.2% of total killings \n","8f46cc45":"## **Understanding Data on Race Specific**","22b74416":"## Id\n\nThey are unique in nature & not helping to make decison ","3aa67809":"## State","5dd60a60":"## City ","db4b0e03":"- Shootouts are maximun at 5th day, accounts of 4.23% of total killing.\n- Shootouts are minimun at 31st day, accounts of 1.86% of total killings.","8df1ab00":"95% of shootout kills were males ","00b8d7fa":"## Days","513062c5":"### Date","b2531230":"56.47% of shootouts have Arm catergory as Guns","5567edfc":"- Shootouts are maximun at months like January & March, accounts of 20.6%\n- Shootouts are minimun at month like September , accounts of 6.7%\n","bf61c977":"## Week","bd59f373":"### Name","212d1bbd":"56 % of shootout kills were from gun.\n7.11 % of shootout kills were unarmed, they were victims of volience.\n3.5 % of shootout kills were found having toy guns, they were misunderstood as harm & was shot dead "}}