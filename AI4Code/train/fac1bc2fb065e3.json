{"cell_type":{"d20dd851":"code","09d7a483":"code","d53fdd5c":"code","e0dbdc25":"code","ac1b2465":"markdown","a3dfcf2f":"markdown","d0de08d2":"markdown","634933a0":"markdown"},"source":{"d20dd851":"# import required packages\n%matplotlib inline\nimport math\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom ipywidgets import interact, interactive, fixed, interact_manual, widgets","09d7a483":"# Generates random data with N data points. The data generated is a beta distribution plus some allowed amount of error.\ndef gen_data(a_in, b_in, N_in, err_in):\n    \n    a = a_in\n    b = b_in\n    N = N_in\n    err = err_in\n    \n    dx = 1\/(N+1)\n    x = np.arange(dx, 1, dx)\n    y = x**(a-1) * (1-x)**(b-1)\n    A = 0\n    for i in y:\n        A = A + i * dx\n    y = y\/A\n    for i in range(0, N):\n        pos = err * np.random.rand()\n        neg = err * np.random.rand()\n        y[i] = y[i] + pos - neg\n    return [x, y]\n\n# Takes in data points as well as the user's best guess for alpha and beta and plots the proposed fit against the data.\ndef guess(alpha, beta, x_in, y_in):\n    \n    a = alpha\n    b = beta\n    x = x_in\n    y = y_in\n    \n    # create the beta distribution\n    dx = x[1] - x[0]\n    f = x**(a-1) * (1-x)**(b-1)\n    A = 0\n    for i in f:\n        A = A + i * dx\n    f = f\/A\n    \n    # calculate mean and variance as functions of alpha and beta\n    mu = a\/(a+b)\n    var = (a*b)\/(((a+b)**2)*(a+b+1))\n    sigma = math.sqrt(var)\n    \n    plt.xlabel(\"x\")\n    plt.ylabel(\"p(x)\")\n    plt.title('Fit the data by dragging the sliders!')\n    plt.xlim(0, 1)\n    plt.ylim(0, 4)\n    \n    # Display mean and variance for this proposed fit\n    plt.text(0, 5.5, \"mean: \" + str('{:.4}'.format(mu)))\n    plt.text(0, 5, \"standard deviation: \" + str('{:.4}'.format(sigma)))\n    \n    plt.scatter(x, y)\n    plt.plot(x, f, 'r')\n\n# Run this cell to generate new data\ntrue_a = 10 * np.random.rand()\ntrue_b = 10 * np.random.rand()\n\ntrue_mu = true_a\/(true_a+true_b)\ntrue_var = (true_a*true_b)\/(((true_a+true_b)**2)*(true_a+true_b+1))\ntrue_sigma = math.sqrt(true_var)\n\nx_data, y_data = gen_data(true_a, true_b, 100, 0.8)\ninteract(guess, alpha=(0,10, 0.2), beta=(0,10,0.2), x_in=fixed(x_data), y_in=fixed(y_data))\n\n#print(\"true alpha: \", true_a)\n#print(\"true beta: \", true_b)\nbutton = widgets.Button(description='Done')\nout = widgets.Output()\ndef on_button_clicked(_):\n      with out:\n          print(\"true alpha: \", '{:.4}'.format(true_a))\n          print(\"true beta: \", '{:.4}'.format(true_b))\n          print(\"true mean: \", '{:.4}'.format(true_mu))\n          print(\"true standard deviation: \", '{:.4}'.format(true_sigma))\nbutton.on_click(on_button_clicked)\nbox = widgets.VBox([button, out])\nbox","d53fdd5c":"# get data from input file\nx, y_data = np.loadtxt('..\/input\/bluejays\/beta_distribution_project_batting_averages.csv', delimiter=',', usecols=(6,7), skiprows=1, unpack=True)\nn = x.size\ndx = x[1]-x[0]\n\n#normalize data\nA_data = 0\nfor i in y_data:\n    A_data = A_data + i * dx\ny_data = y_data \/ A_data\n\n# plot data\nplt.figure()\nplt.xlim(0, 0.5)\nplt.ylim(0, 12)\nplt.bar(x, y_data, 0.01)\n\n# initialize variables\na_curr = -1\nb_curr = -1\nf_curr = x\nL_curr = -999_999_999\nstep = 0.2\n\n# for every a and b\nfor a in np.arange(step, 15, step):\n    for b in np.arange(step, 35, step):\n\n        # define the beta distribution\n        f = x**(a-1) * (1-x)**(b-1)\n        A = 0\n        for i in f:\n            A = A + i * dx\n        f = f \/ A\n\n        # calculate the likelihood\n        L = 0\n        for k in range(0, n):\n            L = L + y_data[k] * np.log(f[k])\n\n        # if this is the new highest likelihood, keep track of that\n        if L > L_curr:\n            L_curr = L\n            f_curr = f\n            a_curr = a\n            b_curr = b\n            \nplt.xlabel('batting average, x')\nplt.ylabel('p(x)')\nplt.title('Blue Jays batting averages')\nplt.plot(x, f_curr, 'r')\n\nmu = a_curr\/(a_curr+b_curr)\nvar = (a_curr*b_curr)\/(((a_curr+b_curr)**2)*(a_curr+b_curr+1))\nsigma = math.sqrt(var)\n\nprint('alpha:', '{:.4}'.format(a_curr))\nprint('beta:', '{:.4}'.format(b_curr))\nprint('mean:', '{:.4}'.format(mu))\nprint('standard deviation:', '{:.4}'.format(sigma))","e0dbdc25":"# get data from input file\nx_data, y_data = np.loadtxt('..\/input\/bluejays\/beta_distribution_project_ERA.csv', delimiter=',', usecols=(3,4), skiprows=1, max_rows=139, unpack=True)\nx = x_data\/7 # need to rescale the values before fitting (max value here is 7 so I divide by 7)\nn = x.size\ndx = x[1]-x[0]\n\n#normalize data\nA_data = 0\nfor i in y_data:\n    A_data = A_data + i * dx\ny_data = y_data \/ A_data\n\n# plot data\nplt.figure()\nplt.xlim(0, 7)\nplt.ylim(0, 1)\nplt.bar(x_data, y_data\/7, 0.05)\n\n# initialize variables\na_curr = -1\nb_curr = -1\nf_curr = x\nL_curr = -999_999_999\nstep = 0.2\n\n# for every a and b\nfor a in np.arange(step, 15, step):\n    for b in np.arange(step, 15, step):\n\n        # define the beta distribution\n        f = x**(a-1) * (1-x)**(b-1)\n        A = 0\n        for i in f:\n            A = A + i * dx\n        f = f \/ A\n\n        # calculate the likelihood\n        L = 0\n        for k in range(0, n):\n            L = L + y_data[k] * np.log(f[k])\n\n        # if this is the new highest likelihood, keep track of that\n        if L > L_curr:\n            L_curr = L\n            f_curr = f\n            a_curr = a\n            b_curr = b\n            \nplt.xlabel('ERA, x')\nplt.ylabel('p(x)')\nplt.title('ERA data')\nplt.plot(x_data, f_curr\/7, 'r')\n\nmu = (a_curr\/(a_curr+b_curr)) * 7\nvar = (a_curr*b_curr)\/(((a_curr+b_curr)**2)*(a_curr+b_curr+1))\nsigma = math.sqrt(var) * 7\n\nprint('alpha:', '{:.4}'.format(a_curr))\nprint('beta:', '{:.4}'.format(b_curr))\nprint('mean:', '{:.4}'.format(mu))\nprint('standard deviation:', '{:.4}'.format(sigma))","ac1b2465":"### Batting Average (BA) data\n\nThe following cell takes in a set of data and fits a beta curve to it, listing the corresponding alpha and beta values. The data set being graphed is a histogram of all Blue Jays players' batting averages from the years 2015 through 2019. We can read from this graph that the peak occurs at a BA of around 0.230.","a3dfcf2f":"### Guess the fit, interactive display\n\nWhen the following cell is run, random data will be generated creating a scatter plot for you to fit a beta curve to. Change the alpha and beta sliders slowly, giving the curve time to update, and once you've found satisfactory alpha and beta values, scroll down and click the \"Done\" button to reveal the true values used to generate the data.  \n\nThe mean ($\\mu$) and standard deviation ($\\sigma$) will also be displayed above the graph. In beta distribution,  \n    $$\\mu = \\int\\limits_0^1 \\frac{x^{\\alpha - 1}(1 - x)^{\\beta - 1}}{B(\\alpha, \\beta)} \\, dx = \\frac {\\alpha}{\\alpha + \\beta} \\qquad \\textrm{and} \\qquad \\sigma = \\sqrt{\\frac{\\alpha\\beta}{(\\alpha + \\beta)^{2}(\\alpha + \\beta + 1)}} $$  \nwhere $B(\\alpha, \\beta)$ is a constant which ensures a total probability of 1. **Re-run the following cell for a new random set of data**.  \n\nNote that both alpha and beta can be any value between 0 and infinity, but a range of 0-10 was used in this demonstration for the sake of simplicity. \n","d0de08d2":"## Welcome to our notebook on beta distribution!\nTo begin, click the **_Copy and Edit_** button in the top right-hand corner.  \n\nTo run a cell, click on the cell and then the play button either to the left of the cell, or in the toolbar up top. The first cell must be run first, but after that cells can be run in any order.","634933a0":"### Eerned Run Average (ERA) data\n\nFrom wikipedia: In baseball statistics, earned run average (ERA) is the average of earned runs given up by a pitcher per nine innings pitched (i.e. the traditional length of a game). It is determined by dividing the number of earned runs allowed by the number of innings pitched and multiplying by nine.\n\nThe following cell takes the ERA data from 328 pitchers from 2015 to 2019 and fits it with a beta distribution."}}