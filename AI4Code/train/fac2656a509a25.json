{"cell_type":{"461f6eb8":"code","0d36ee8c":"code","59bf9459":"code","4a81fb11":"code","cc07c070":"code","d04658e1":"code","bb18f9da":"code","5316adc1":"code","3597327d":"code","b66f32ff":"code","bff1bafc":"code","387b8be2":"code","011d07b6":"code","a2119d04":"code","3df831d5":"code","8bba5848":"code","4b8977c1":"code","a40bde6c":"markdown","cbc59dd6":"markdown"},"source":{"461f6eb8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\ndata_file=''\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        data_file=os.path.join(dirname, filename)\n        print(data_file)\n\n# Any results you write to the current directory are saved as output.","0d36ee8c":"#Read the csv into dataframe\ndf = pd.read_csv(data_file, index_col=0)","59bf9459":"df.columns","4a81fb11":"#See first 5 samples\ndf.head(5)","cc07c070":"#Display general info per column: number of rows, does it include null?, column type\ndf.info()","d04658e1":"#We saw that the data has no null value except the description column.\n#Replace the null with empty string\ndf.Description.fillna('', inplace=True)\ndf.info()","bb18f9da":"#See numeric columns statistics\ndf.describe()","5316adc1":"#See all cover types\nset(df.Cover.values)\n#We can see from the results there are many repeatitves. such as, hard cover, hardcover, Hardcover, Hard Cover, \u0645\u0642\u0648\u0649...all are the same.\n#Need some work to combine them togther","3597327d":"#Before cleanup\nprint('#Of covers before cleanup: ',len(set(df.Cover.values)))\n\n#Do some basic data cleanup:\ndef covertype(x):\n    x = str(x).strip().lower()\n    if x=='Hard Cover' or x=='HardCover' or x=='hardcover' or x=='hard cover' or x== '\u0645\u0642\u0648\u0649':\n        return 'hardcover'\n    if x=='Paperback' or x=='paperback' or x=='\u063a\u0644\u0627\u0641 \u0648\u0631\u0642\u064a' or x=='\u063a\u0644\u0627\u0641 \u0648\u0631\u0642\u064a':\n        return 'paperback'\n    if x=='\u0639\u0627\u062f\u064a' or x=='\u063a\u0644\u0627\u0641 \u0639\u0627\u062f\u064a' or x=='\u063a\u0644\u0627\u0641':\n        return 'standard'\n    return x\ndf.Cover=df.Cover.apply(lambda x: covertype(x))\n\n\nprint('#Of covers after cleanup: ',len(set(df.Cover.values)))\n\nprint(set(df.Cover.values))","b66f32ff":"#See all Category types\nset(df.Category.values)","bff1bafc":"a=set(df.Author.values)\nprint('Unique Authors before cleanup: ', len(a))\n#display first 20\nlist(set(df.Author.values))[:20]\n\n#If you want to display all of the authors, uncomment next line\n#set(df.Author.values)","387b8be2":"def author_cleanup(x):\n    x = str(x).strip().lower()\n    return x\ndf.Author=df.Author.apply(lambda x: covertype(x))\n\na=set(df.Author.values)\nprint('Unique Authors before cleanup: ', len(a))","011d07b6":"import seaborn as sn\nimport matplotlib.pyplot as plt","a2119d04":"#Author vs Mean Price - plot top 20\ndf1=df.groupby('Author')['Price'].mean().sort_values(ascending=False)\ndf1.head(20).plot(kind='bar', grid=True, title='Authos vs. Price(Mean)')","3df831d5":"#Category vs Mean Price - plot top 20\ndf1=df.groupby('Category')['Price'].mean().sort_values(ascending=False)\ndf1.head(20).plot(kind='bar',grid=True, title='Categiry vs. Price(Mean)')","8bba5848":"#Let see the Author vs. num of books graph - filter for the top 20 only\ntopn=20\ndf.groupby('Author')['Title'].count().sort_values(ascending=False).head(topn).plot(kind='bar', grid=True, title='Authos vs. Num of books', x='Author', y='Num of books');","4b8977c1":"#Let see the Category vs. num of books graph - filter for the top 20 only\ntopn=20\ndf.groupby('Category')['Title'].count().sort_values(ascending=False).head(topn).plot(kind='bar', grid=True, title='Category vs. Num of books', x='Category', y='Num of books');","a40bde6c":"** Let's do some plots to understand the data more **","cbc59dd6":"** Now, let's see what the data includes: columns, head...**"}}