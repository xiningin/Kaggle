{"cell_type":{"3fa72491":"code","88c6b794":"code","497196a0":"code","d3f0215d":"code","5cbf027d":"code","70af532a":"code","71cedfc8":"code","f1bbacdb":"code","77cd3814":"code","cba0dfa5":"code","b71cebc2":"code","be5ff50e":"code","00271897":"markdown","876c9bbe":"markdown","d479f139":"markdown"},"source":{"3fa72491":"'''\nAuthor: Ritwik Biswas\nDescription: Using a Keras Sequential Neural Network to predict whether a titanic passenger survives\n'''\nimport numpy as np \nimport pandas as pd \nimport math\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport os\n","88c6b794":"df = pd.read_csv('..\/input\/train.csv')\ndf.head()","497196a0":"total_size = df['Survived'].count()\nprint(\"Size: \\n\"+ str(total_size))\n","d3f0215d":"feature_list = []\nclass_list = []\n\n#lookup tables\ngender_lookup = {'male': 1, 'female': 0}\nembarked_lookup = {'C' : 0, 'Q': 1, 'S': 2}\n\n#populate feature\/class lists\nfor row in df.iterrows():\n    index, data = row\n    temp = data.tolist()\n    \n    #append survivor class\n    class_list.append(temp[1])\n    \n    #process remaining data into numerical encoding\n    temp = temp[2:]\n    temp.pop(1) #remove name\n    temp.pop(5) #remove ticket\n    temp.pop(6) # remove cabin\n    \n    #encode vars\n    temp[1] = gender_lookup[temp[1]]\n    try:\n        temp[6] = embarked_lookup[temp[6]]\n    except:\n        temp[6] = 0\n    if math.isnan(temp[2]):\n        temp[2] = 0\n#     print(temp)\n    feature_list.append(temp)\nprint(feature_list[:2])\nprint(class_list[:2])","5cbf027d":"training_size = int(0.9*total_size)\ntrain_class = np.array(class_list[:training_size])\ntrain_features = np.array(feature_list[:training_size])\ntest_class = np.array(class_list[training_size:])\ntest_features = np.array(feature_list[training_size:])\nprint(\"Training Length: \" + str(len(train_features)))\nprint(train_class[:4])\nprint(\"Testing Length: \" + str(len(test_features)))","70af532a":"# 3 layer network [7->3->1] 62.11%\n# model = Sequential()\n# model.add(Dense(7, input_dim=7, activation='relu'))\n# model.add(Dense(3, activation='relu'))\n# model.add(Dense(1, activation='sigmoid'))\n\n# 5 layer network [7->14->14->7->1] \nmodel = Sequential()\nmodel.add(Dense(7, input_dim=7, activation='relu'))\nmodel.add(Dense(14, activation='relu'))\nmodel.add(Dense(14, activation='relu'))\nmodel.add(Dense(7, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))","71cedfc8":"# Define loss and optimizer\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])","f1bbacdb":"model.fit(train_features, train_class, epochs=200, batch_size=30)","77cd3814":"# Evaluate on Testing set\nscores = model.evaluate(test_features, test_class)\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))","cba0dfa5":"test_df = pd.read_csv('..\/input\/test.csv')\ntest_df.head()","b71cebc2":"feature_test = []\nid_list = []\n#populate feature\/class lists\ncount = 0\nfor row in test_df.iterrows():\n    index, data = row\n    temp = data.tolist()\n    id_list.append(temp[0])\n    #process data into numerical encoding\n    temp = temp[1:]\n    \n    temp.pop(1) #remove name\n    temp.pop(5) #remove ticket\n    temp.pop(6) # remove cabin\n    \n    #encode vars\n    temp[1] = gender_lookup[temp[1]]\n    try:\n        temp[6] = embarked_lookup[temp[6]]\n    except:\n        temp[6] = 0\n    if math.isnan(temp[2]):\n        temp[2] = 0\n\n    feature_test.append(temp)\n    count += 1\nprint(len(feature_test))\nprint(len(id_list))\nprint(feature_test[:2])\nprint(id_list[:2])","be5ff50e":"test_features = np.array(feature_test)\npredictions = model.predict(test_features)\n# print(str(int(round(predictions[0][0]))))\nwith open('prediction.csv', 'w') as the_file:\n    the_file.write('PassengerId,Survived\\n')\n    for i in range(0,len(predictions)):\n        p = round(predictions[i][0])\n        if math.isnan(p):\n            p = 0\n        out_str = str(id_list[i]) + \",\" + str(int(p)) + \"\\n\"\n        print(out_str)\n        the_file.write(out_str)","00271897":"### Model Creation\/Training","876c9bbe":"### Read in and Visualize Data","d479f139":"### Predictions on Test Data"}}