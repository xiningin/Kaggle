{"cell_type":{"f70d0e48":"code","f622f48e":"code","6654447b":"code","d0f3b151":"code","8ab60e51":"code","f78b753c":"code","c8c44741":"code","e8ce4172":"code","b3e74218":"code","36ec9eb8":"code","6f1eacf4":"code","bfea141a":"code","0124a446":"code","53688fe5":"code","03b741d3":"code","edcb6043":"code","ec121589":"code","f9f46bf9":"code","933ee243":"code","4abbb8e0":"code","fa9ab917":"code","018f6989":"code","2555cfc8":"code","b65582ae":"code","21c78bb2":"code","a6136f8b":"code","405224bd":"code","273e54e5":"code","79afc0fb":"code","9fd6e66e":"code","ef19083f":"code","eb0feea8":"code","ca8b5869":"code","f5f1a295":"code","0c5a359c":"code","6acddc90":"code","23fa6bb0":"code","a2ed9a70":"code","10fc61cb":"code","a1315863":"code","8823f70e":"code","41537e7a":"code","84035741":"code","17f04404":"code","8683a32f":"code","bda0eb7b":"code","d91d5929":"code","dc9c14b5":"code","be57d14f":"code","2332ef46":"code","efb836ed":"code","e7882557":"code","117b36f1":"code","5eb3d059":"code","44dcf896":"code","d89c9e3f":"code","09548e7d":"code","e7217fa5":"code","f89cbe29":"code","8cfb9152":"code","c4a5dddc":"code","d2c3c5d4":"code","ac744bb6":"code","04dc5790":"code","7d3187a9":"code","ae1f6e52":"code","263aca15":"code","29cc5776":"code","81141ff6":"code","ae8790c3":"code","2e5b68c9":"code","19d55168":"code","c5651b19":"code","2d709634":"code","f8804c23":"code","950ed544":"code","5979d848":"code","b4abcf26":"code","077b1af8":"code","0a163f65":"code","8aa753cf":"code","e0f44148":"code","c2456075":"code","4c9f4f3e":"code","d17abb0a":"code","27d59ee5":"code","bf1fa7d7":"code","4300db66":"markdown","2230e725":"markdown","536d4f14":"markdown","c68f559f":"markdown","ec0c3e35":"markdown","3d2f0bd5":"markdown","a4fbe06f":"markdown","1f286f3b":"markdown","ffc3d65d":"markdown","1ccbdbb6":"markdown","039b6c48":"markdown","40eeea4a":"markdown","84dc0da3":"markdown","a0ebd70f":"markdown","89b097b9":"markdown","1c8fb275":"markdown","06d2fc44":"markdown","14c8bbb8":"markdown","d19f4d3b":"markdown","ff8e8c07":"markdown","9c503df3":"markdown","2c80e113":"markdown","e7bdc8fd":"markdown","848bd3cc":"markdown","b9504fe8":"markdown","65861b4c":"markdown","e68a3861":"markdown","f2ee7b36":"markdown","f1582a88":"markdown","a6c8da37":"markdown","fc1bf1fc":"markdown","5b05c170":"markdown","3efa9c11":"markdown","09d531d0":"markdown","13ba0c60":"markdown","f38c5b51":"markdown","f3129f6f":"markdown","7e1b8f1f":"markdown","f6db4bad":"markdown","a1609479":"markdown","fa58bbff":"markdown"},"source":{"f70d0e48":"from IPython.display import YouTubeVideo\nYouTubeVideo('ABBnNjbjv2Q', width=800, height=450)","f622f48e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np\nimport pandas as pd\n\nimport os\nimport json\nfrom pathlib import Path\n\nimport matplotlib.pyplot as plt\nfrom matplotlib import colors\nprint(os.listdir(\"..\/input\/\"))\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n\n# Any results you write to the current directory are saved as output.","6654447b":"pip install -q tensorflow-lattice","d0f3b151":"from __future__ import absolute_import, division, print_function, unicode_literals\ntry:\n    # %tensorflow_version only exists in Colab.\n    %tensorflow_version 2.x\nexcept Exception:\n    pass\nimport tensorflow as tf\nimport logging\nimport tensorflow_lattice as tfl\nimport sys\nfrom tensorflow import keras\ntf.compat.v1.set_random_seed(123)\nsession_conf = tf.compat.v1.ConfigProto(intra_op_parallelism_threads=1, inter_op_parallelism_threads=1)\nsess = tf.compat.v1.Session(graph=tf.compat.v1.get_default_graph(), config=session_conf)\ntf.compat.v1.keras.backend.set_session(sess)\nlogging.disable(sys.maxsize)","8ab60e51":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    print(dirname)\n","f78b753c":"from pathlib import Path\n\ndata_path = Path('\/kaggle\/input\/abstraction-and-reasoning-challenge\/')\ntraining_path = data_path \/ 'training'\nevaluation_path = data_path \/ 'evaluation'\ntest_path = data_path \/ 'test'","c8c44741":"training_tasks = sorted(os.listdir(training_path))\nprint(training_tasks[:3])","e8ce4172":"task_file = str(training_path \/ '00d62c1b.json')\n\nwith open(task_file, 'r') as f:\n    task = json.load(f)\n\nprint(task.keys())","b3e74218":"n_train_pairs = len(task['train'])\nn_test_pairs = len(task['test'])\n\nprint(f'task contains {n_train_pairs} training pairs')\nprint(f'task contains {n_test_pairs} test pairs')","36ec9eb8":"display(task['train'][0]['input'])\ndisplay(task['train'][0]['output'])","6f1eacf4":"def plot_task(task):\n    \"\"\"\n    Plots the first train and test pairs of a specified task,\n    using same color scheme as the ARC app\n    \"\"\"\n    cmap = colors.ListedColormap(\n        ['#000000', '#0074D9','#FF4136','#2ECC40','#FFDC00',\n         '#AAAAAA', '#F012BE', '#FF851B', '#7FDBFF', '#870C25'])\n    norm = colors.Normalize(vmin=0, vmax=9)\n    fig, axs = plt.subplots(1, 4, figsize=(15,15))\n    axs[0].imshow(task['train'][2]['input'], cmap=cmap, norm=norm)\n    axs[0].axis('off')\n    axs[0].set_title('Train Input')\n    axs[1].imshow(task['train'][2]['output'], cmap=cmap, norm=norm)\n    axs[1].axis('off')\n    axs[1].set_title('Train Output')\n    axs[2].imshow(task['test'][0]['input'], cmap=cmap, norm=norm)\n    axs[2].axis('off')\n    axs[2].set_title('Test Input')\n    axs[3].imshow(task['test'][0]['output'], cmap=cmap, norm=norm)\n    axs[3].axis('off')\n    axs[3].set_title('Test Output')\n    plt.tight_layout()\n    plt.show()","bfea141a":"plot_task(task)","0124a446":"def extract_data(files):\n    train_x= []\n    train_y = []\n    test_x= []\n    test_y = []\n    for file in files:\n        train_temp_x= []\n        train_temp_y = []\n        test_temp_x= []\n        test_temp_y = []\n        task_file = str(training_path \/ file)\n        with open(task_file, 'r') as f:\n            task = json.load(f)\n        for c in range(len(task['train'])):\n            train_temp_x.append(np.asarray(task['train'][c]['input']))\n            train_temp_y.append(np.asarray(task['train'][c]['output']))\n        for c in range(len(task['test'])):\n            test_temp_x.append(np.asarray(task['test'][c]['input']))\n            test_temp_y.append(np.asarray(task['test'][c]['output']))\n        train_x.append(train_temp_x)\n        train_y.append(train_temp_y)\n        test_x.append(test_temp_x)\n        test_y.append(test_temp_y)\n    return train_x, train_y, test_x, test_y    ","53688fe5":"train_x, train_y, test_x, test_y  = extract_data(training_tasks)","03b741d3":"cmap = colors.ListedColormap(\n        ['#000000', '#0074D9','#FF4136','#2ECC40','#FFDC00',\n         '#AAAAAA', '#F012BE', '#FF851B', '#7FDBFF', '#870C25'])\nnorm = colors.Normalize(vmin=0, vmax=9)\nfig, axs = plt.subplots(1, 4, figsize=(15,15))\naxs[0].imshow(train_x[0][1], cmap=cmap, norm=norm)\naxs[0].axis('off')\naxs[0].set_title('Train Input')\naxs[1].imshow(train_y[0][1], cmap=cmap, norm=norm)\naxs[1].axis('off')\naxs[1].set_title('Train Output')\naxs[2].imshow(test_x[0][0], cmap=cmap, norm=norm)\naxs[2].axis('off')\naxs[2].set_title('Test Input')\naxs[3].imshow(test_y[0][0], cmap=cmap, norm=norm)\naxs[3].axis('off')\naxs[3].set_title('Test Output')\nplt.tight_layout()","edcb6043":"NUM_EPOCHS = 2000\nBATCH_SIZE = 64\nLEARNING_RATE=0.001","ec121589":"def reshapeData(X_, y_):\n    X_ = X_.reshape(X_.shape[0],X_.shape[1],X_.shape[2],1)\n    y_ = y_.reshape(y_.shape[0],y_.shape[1],y_.shape[2],1)\n    return X_,y_","f9f46bf9":"def InitializeSession():\n    tf.compat.v1.keras.backend.clear_session()\n    tf.compat.v1.reset_default_graph()\n    tf.compat.v1.set_random_seed(123)\n    session_conf = tf.compat.v1.ConfigProto(intra_op_parallelism_threads=1, inter_op_parallelism_threads=1)\n    sess = tf.compat.v1.Session(graph=tf.compat.v1.get_default_graph(), config=session_conf)\n    tf.compat.v1.keras.backend.set_session(sess)","933ee243":"def Lattice_Model(input_data, target_data, use_lim):\n    \n    # We are going to have 2-d embedding as one of lattice inputs.\n    lattice_sizes = [5, 4, 3, 2, 3, 4, 5]\n    \n    input_ = tf.keras.layers.Input(shape=(input_data.shape[1], input_data.shape[2],1), name='Input')\n    conv_1 = tf.keras.layers.Conv2D(128, \n                                    (3,3),\n                                    activation='relu',\n                                    padding='same', \n                                    name='conv_1')\n    activation = tf.keras.layers.LeakyReLU()\n    conv_2 = tf.keras.layers.Conv2D(128, \n                                    (1,1),\n                                    activation='relu', \n                                    name='conv_2')\n    conv_3 = tf.keras.layers.Conv2D(128,\n                                    5,\n                                    activation='relu',\n                                    padding='same',\n                                    name='conv_3')\n    dropout = tf.keras.layers.Dropout(0.4,\n                                      name='Dropout')\n    \n    flatten = tf.keras.layers.Flatten(name='Flatten')\n    \n    dense_1 = tf.keras.layers.Dense(target_data.shape[1]*target_data.shape[2]*7,\n                                    name='Dense')\n    \n    reshape = tf.keras.layers.Reshape((target_data.shape[1],target_data.shape[2],7))\n    if use_lim == 1:\n        lattice = tfl.layers.Lattice(\n                                    lattice_sizes=lattice_sizes,\n                                    monotonicities=['none']*7,\n                                    units=target_data.shape[2],\n                                    output_min=target_data.min(),\n                                    output_max=target_data.max(),\n                                    name = 'Lattice'\n                                    )\n    else:\n        lattice = tfl.layers.Lattice(\n                                    lattice_sizes=lattice_sizes,\n                                    monotonicities=['none']*7,\n                                    units=target_data.shape[2],\n                                    name = 'Lattice'\n                                    )\n    #model_1 = tf.keras.models.Sequential()\n    model = (conv_1)(input_)\n    model = (activation)(model)\n    model = (conv_2)(model)\n    model = (activation)(model)\n    model = (dropout)(model)\n    model = (conv_3)(model)\n    model = (activation)(model)   \n    model = (dropout)(model)\n    model = (flatten)(model)\n    model = (dropout)(model)\n    model = (dense_1)(model)\n    model = (activation)(model)\n    model = (reshape)(model)\n    model = (lattice)(model)\n    #model.build()\n    \n    return tf.keras.models.Model(input_,model)","4abbb8e0":"def ModelFit(model, X_, y_, use_lim):\n    if use_lim==1:\n        loss_ = tf.keras.losses.mean_squared_error\n    else:\n        loss_ = tf.keras.losses.binary_crossentropy\n    model.compile(\n        loss=loss_,\n        optimizer=tf.keras.optimizers.Adam(learning_rate=LEARNING_RATE)\n    )\n\n    model.fit(\n        X_,\n        y_,\n        batch_size=BATCH_SIZE,\n        epochs=NUM_EPOCHS,\n        validation_split=0.2,\n        verbose=0\n    )\n    return model","fa9ab917":"train_x_1, train_y_1 = reshapeData(np.array(train_x[0]),np.array(train_y[0]))","018f6989":"InitializeSession()\nModel_1 = Lattice_Model(train_x_1, train_y_1,0)\nModel_1.summary()","2555cfc8":"Model_1 = ModelFit(Model_1,train_x_1, train_y_1,0)\nModel_1.evaluate(train_x_1, train_y_1)","b65582ae":"pred_1 = Model_1.predict(np.array(test_x[0]).reshape(1,np.array(test_x[0]).shape[1],np.array(test_x[0]).shape[2],1))\npred_1 = pred_1.reshape(np.array(test_y[0]).shape[1],np.array(test_y[0]).shape[2])","21c78bb2":"cmap = colors.ListedColormap(\n        ['#000000', '#0074D9','#FF4136','#2ECC40','#FFDC00',\n         '#AAAAAA', '#F012BE', '#FF851B', '#7FDBFF', '#870C25'])\nnorm = colors.Normalize(vmin=0, vmax=9)\nfig, axs = plt.subplots(1, 3, figsize=(15,15))\naxs[0].imshow(test_x[0][0], cmap=cmap, norm=norm)\naxs[0].axis('off')\naxs[0].set_title('test Input')\naxs[1].imshow(test_y[0][0], cmap=cmap, norm=norm)\naxs[1].axis('off')\naxs[1].set_title('test Output')\naxs[2].imshow(np.rot90(pred_1), cmap=cmap, norm=norm)\naxs[2].axis('off')\naxs[2].set_title('predicted output')\nplt.tight_layout() ","a6136f8b":"train_x_2, train_y_2 = reshapeData(np.array(train_x[2]),np.array(train_y[2]))","405224bd":"InitializeSession()\nModel_2 = Lattice_Model(train_x_2, train_y_2,0)\nModel_2 = ModelFit(Model_2,train_x_2, train_y_2,0)\nModel_2.evaluate(train_x_2, train_y_2)","273e54e5":"pred_2 = Model_2.predict(np.array(test_x[2]).reshape(1,np.array(test_x[2]).shape[1],np.array(test_x[2]).shape[2],1))\npred_2 = pred_2.reshape(np.array(test_y[2]).shape[1],np.array(test_y[2]).shape[2])","79afc0fb":"cmap = colors.ListedColormap(\n        ['#000000', '#0074D9','#FF4136','#2ECC40','#FFDC00',\n         '#AAAAAA', '#F012BE', '#FF851B', '#7FDBFF', '#870C25'])\nnorm = colors.Normalize(vmin=0, vmax=9)\nfig, axs = plt.subplots(1, 3, figsize=(15,15))\naxs[0].imshow(test_x[2][0], cmap=cmap, norm=norm)\naxs[0].axis('off')\naxs[0].set_title('test Input')\naxs[1].imshow(test_y[2][0], cmap=cmap, norm=norm)\naxs[1].axis('off')\naxs[1].set_title('test Output')\naxs[2].imshow((pred_2), cmap=cmap, norm=norm)\naxs[2].axis('off')\naxs[2].set_title('predicted output')\nplt.tight_layout()","9fd6e66e":"InitializeSession()\nModel_2_1 = Lattice_Model(train_x_2, train_y_2,1)\nModel_2_1 = ModelFit(Model_2_1,train_x_2, train_y_2,1)\nModel_2_1.evaluate(train_x_2, train_y_2)","ef19083f":"pred_2_1 = Model_2_1.predict(np.array(test_x[2]).reshape(1,np.array(test_x[2]).shape[1],np.array(test_x[2]).shape[2],1))\npred_2_1 = pred_2_1.reshape(np.array(test_y[2]).shape[1],np.array(test_y[2]).shape[2])","eb0feea8":"cmap = colors.ListedColormap(\n        ['#000000', '#0074D9','#FF4136','#2ECC40','#FFDC00',\n         '#AAAAAA', '#F012BE', '#FF851B', '#7FDBFF', '#870C25'])\nnorm = colors.Normalize(vmin=0, vmax=9)\nfig, axs = plt.subplots(1, 3, figsize=(15,15))\naxs[0].imshow(test_x[2][0], cmap=cmap, norm=norm)\naxs[0].axis('off')\naxs[0].set_title('test Input')\naxs[1].imshow(test_y[2][0], cmap=cmap, norm=norm)\naxs[1].axis('off')\naxs[1].set_title('test Output')\naxs[2].imshow((pred_2_1), cmap=cmap, norm=norm)\naxs[2].axis('off')\naxs[2].set_title('predicted output')\nplt.tight_layout()","ca8b5869":"train_x_3, train_y_3 = reshapeData(np.array(train_x[4]),np.array(train_y[4]))","f5f1a295":"InitializeSession()\nModel_3 = Lattice_Model(train_x_3, train_y_3,1)\nModel_3 = ModelFit(Model_3,train_x_3, train_y_3,1)\nModel_3.evaluate(train_x_3, train_y_3)","0c5a359c":"pred_3 = Model_3.predict(np.array(test_x[4]).reshape(1,np.array(test_x[4]).shape[1],np.array(test_x[4]).shape[2],1))\npred_3 = pred_3.reshape(np.array(test_y[4]).shape[1],np.array(test_y[4]).shape[2])","6acddc90":"cmap = colors.ListedColormap(\n        ['#000000', '#0074D9','#FF4136','#2ECC40','#FFDC00',\n         '#AAAAAA', '#F012BE', '#FF851B', '#7FDBFF', '#870C25'])\nnorm = colors.Normalize(vmin=0, vmax=9)\nfig, axs = plt.subplots(1, 3, figsize=(15,15))\naxs[0].imshow(test_x[4][0], cmap=cmap, norm=norm)\naxs[0].axis('off')\naxs[0].set_title('test Input')\naxs[1].imshow(test_y[4][0], cmap=cmap, norm=norm)\naxs[1].axis('off')\naxs[1].set_title('test Output')\naxs[2].imshow((pred_3), cmap=cmap, norm=norm)\naxs[2].axis('off')\naxs[2].set_title('predicted output')\nplt.tight_layout()","23fa6bb0":"train_x_4, train_y_4 = reshapeData(np.array(train_x[5]),np.array(train_y[5]))","a2ed9a70":"InitializeSession()\nModel_4 = Lattice_Model(train_x_4, train_y_4,0)\nModel_4 = ModelFit(Model_4,train_x_4, train_y_4,0)\nModel_4.evaluate(train_x_4, train_y_4)","10fc61cb":"pred_4 = Model_4.predict(np.array(test_x[5]).reshape(1,np.array(test_x[5]).shape[1],np.array(test_x[5]).shape[2],1))\npred_4 = pred_4.reshape(np.array(test_y[5]).shape[1],np.array(test_y[5]).shape[2])","a1315863":"cmap = colors.ListedColormap(\n        ['#000000', '#0074D9','#FF4136','#2ECC40','#FFDC00',\n         '#AAAAAA', '#F012BE', '#FF851B', '#7FDBFF', '#870C25'])\nnorm = colors.Normalize(vmin=0, vmax=9)\nfig, axs = plt.subplots(1, 3, figsize=(15,15))\naxs[0].imshow(test_x[5][0], cmap=cmap, norm=norm)\naxs[0].axis('off')\naxs[0].set_title('test Input')\naxs[1].imshow(test_y[5][0], cmap=cmap, norm=norm)\naxs[1].axis('off')\naxs[1].set_title('test Output')\naxs[2].imshow(np.rot90(pred_4), cmap=cmap, norm=norm)\naxs[2].axis('off')\naxs[2].set_title('predicted output')\nplt.tight_layout()","8823f70e":"train_x_5, train_y_5 = reshapeData(np.array(train_x[6]),np.array(train_y[6]))","41537e7a":"InitializeSession()\nModel_5 = Lattice_Model(train_x_5, train_y_5,1)\nModel_5 = ModelFit(Model_5,train_x_5, train_y_5,1)\nModel_5.evaluate(train_x_5, train_y_5)","84035741":"pred_5 = Model_5.predict(np.array(test_x[6]).reshape(1,np.array(test_x[6]).shape[1],np.array(test_x[6]).shape[2],1))\npred_5 = pred_5.reshape(np.array(test_y[6]).shape[1],np.array(test_y[6]).shape[2])","17f04404":"cmap = colors.ListedColormap(\n        ['#000000', '#0074D9','#FF4136','#2ECC40','#FFDC00',\n         '#AAAAAA', '#F012BE', '#FF851B', '#7FDBFF', '#870C25'])\nnorm = colors.Normalize(vmin=0, vmax=9)\nfig, axs = plt.subplots(1, 3, figsize=(15,15))\naxs[0].imshow(test_x[6][0], cmap=cmap, norm=norm)\naxs[0].axis('off')\naxs[0].set_title('test Input')\naxs[1].imshow(test_y[6][0], cmap=cmap, norm=norm)\naxs[1].axis('off')\naxs[1].set_title('test Output')\naxs[2].imshow(np.rot90(np.rot90(pred_5)), cmap=cmap, norm=norm)\naxs[2].axis('off')\naxs[2].set_title('predicted output')\nplt.tight_layout()","8683a32f":"train_x_6, train_y_6 = reshapeData(np.array(train_x[9]),np.array(train_y[9]))","bda0eb7b":"InitializeSession()\nModel_6 = Lattice_Model(train_x_6, train_y_6,1)\nModel_6 = ModelFit(Model_6,train_x_6, train_y_6,1)\nModel_6.evaluate(train_x_6, train_y_6)","d91d5929":"pred_6 = Model_6.predict(np.array(test_x[9]).reshape(1,np.array(test_x[9]).shape[1],np.array(test_x[9]).shape[2],1))\npred_6 = pred_6.reshape(np.array(test_y[9]).shape[1],np.array(test_y[9]).shape[2])","dc9c14b5":"cmap = colors.ListedColormap(\n        ['#000000', '#0074D9','#FF4136','#2ECC40','#FFDC00',\n         '#AAAAAA', '#F012BE', '#FF851B', '#7FDBFF', '#870C25'])\nnorm = colors.Normalize(vmin=0, vmax=9)\nfig, axs = plt.subplots(1, 3, figsize=(15,15))\naxs[0].imshow(test_x[9][0], cmap=cmap, norm=norm)\naxs[0].axis('off')\naxs[0].set_title('test Input')\naxs[1].imshow(test_y[9][0], cmap=cmap, norm=norm)\naxs[1].axis('off')\naxs[1].set_title('test Output')\naxs[2].imshow((pred_6), cmap=cmap, norm=norm)\naxs[2].axis('off')\naxs[2].set_title('predicted output')\nplt.tight_layout()","be57d14f":"train_x_7, train_y_7 = reshapeData(np.array(train_x[10]),np.array(train_y[10]))","2332ef46":"InitializeSession()\nModel_7 = Lattice_Model(train_x_7, train_y_7,1)\nModel_7 = ModelFit(Model_7,train_x_7, train_y_7,1)\nModel_7.evaluate(train_x_7, train_y_7)","efb836ed":"pred_7 = Model_7.predict(np.array(test_x[10]).reshape(1,np.array(test_x[10]).shape[1],np.array(test_x[10]).shape[2],1))\npred_7 = pred_7.reshape(np.array(test_y[10]).shape[1],np.array(test_y[10]).shape[2])","e7882557":"cmap = colors.ListedColormap(\n        ['#000000', '#0074D9','#FF4136','#2ECC40','#FFDC00',\n         '#AAAAAA', '#F012BE', '#FF851B', '#7FDBFF', '#870C25'])\nnorm = colors.Normalize(vmin=0, vmax=9)\nfig, axs = plt.subplots(1, 3, figsize=(15,15))\naxs[0].imshow(test_x[10][0], cmap=cmap, norm=norm)\naxs[0].axis('off')\naxs[0].set_title('test Input')\naxs[1].imshow(test_y[10][0], cmap=cmap, norm=norm)\naxs[1].axis('off')\naxs[1].set_title('test Output')\naxs[2].imshow(np.rot90(pred_7), cmap=cmap, norm=norm)\naxs[2].axis('off')\naxs[2].set_title('predicted output')\nplt.tight_layout()","117b36f1":"train_x_8, train_y_8 = reshapeData(np.array(train_x[11]),np.array(train_y[11]))","5eb3d059":"InitializeSession()\nModel_8 = Lattice_Model(train_x_8, train_y_8,1)\nModel_8 = ModelFit(Model_8,train_x_8, train_y_8,1)\nModel_8.evaluate(train_x_8, train_y_8)","44dcf896":"pred_8 = Model_8.predict(np.array(test_x[11]).reshape(1,np.array(test_x[11]).shape[1],np.array(test_x[11]).shape[2],1))\npred_8 = pred_8.reshape(np.array(test_y[11]).shape[1],np.array(test_y[11]).shape[2])","d89c9e3f":"cmap = colors.ListedColormap(\n        ['#000000', '#0074D9','#FF4136','#2ECC40','#FFDC00',\n         '#AAAAAA', '#F012BE', '#FF851B', '#7FDBFF', '#870C25'])\nnorm = colors.Normalize(vmin=0, vmax=9)\nfig, axs = plt.subplots(1, 3, figsize=(15,15))\naxs[0].imshow(test_x[11][0], cmap=cmap, norm=norm)\naxs[0].axis('off')\naxs[0].set_title('test Input')\naxs[1].imshow(test_y[11][0], cmap=cmap, norm=norm)\naxs[1].axis('off')\naxs[1].set_title('test Output')\naxs[2].imshow(np.rot90(pred_8), cmap=cmap, norm=norm)\naxs[2].axis('off')\naxs[2].set_title('predicted output')\nplt.tight_layout()","09548e7d":"train_x_9, train_y_9 = reshapeData(np.array(train_x[14]),np.array(train_y[14]))","e7217fa5":"InitializeSession()\nModel_9 = Lattice_Model(train_x_9, train_y_9,1)\nModel_9 = ModelFit(Model_9,train_x_9, train_y_9,1)\nModel_9.evaluate(train_x_9, train_y_9)","f89cbe29":"pred_9 = Model_9.predict(np.array(test_x[14]).reshape(1,np.array(test_x[14]).shape[1],np.array(test_x[14]).shape[2],1))\npred_9 = pred_9.reshape(np.array(test_y[14]).shape[1],np.array(test_y[14]).shape[2])","8cfb9152":"cmap = colors.ListedColormap(\n        ['#000000', '#0074D9','#FF4136','#2ECC40','#FFDC00',\n         '#AAAAAA', '#F012BE', '#FF851B', '#7FDBFF', '#870C25'])\nnorm = colors.Normalize(vmin=0, vmax=9)\nfig, axs = plt.subplots(1, 3, figsize=(15,15))\naxs[0].imshow(test_x[14][0], cmap=cmap, norm=norm)\naxs[0].axis('off')\naxs[0].set_title('test Input')\naxs[1].imshow(test_y[14][0], cmap=cmap, norm=norm)\naxs[1].axis('off')\naxs[1].set_title('test Output')\naxs[2].imshow((pred_9), cmap=cmap, norm=norm)\naxs[2].axis('off')\naxs[2].set_title('predicted output')\nplt.tight_layout()","c4a5dddc":"train_x_10, train_y_10 = reshapeData(np.array(train_x[15]),np.array(train_y[15]))","d2c3c5d4":"InitializeSession()\nModel_10 = Lattice_Model(train_x_10, train_y_10,1)\nModel_10 = ModelFit(Model_10,train_x_10, train_y_10,1)\nModel_10.evaluate(train_x_10, train_y_10)","ac744bb6":"pred_10 = Model_10.predict(np.array(test_x[15]).reshape(1,np.array(test_x[15]).shape[1],np.array(test_x[15]).shape[2],1))\npred_10 = pred_10.reshape(np.array(test_y[15]).shape[1],np.array(test_y[15]).shape[2])","04dc5790":"cmap = colors.ListedColormap(\n        ['#000000', '#0074D9','#FF4136','#2ECC40','#FFDC00',\n         '#AAAAAA', '#F012BE', '#FF851B', '#7FDBFF', '#870C25'])\nnorm = colors.Normalize(vmin=0, vmax=9)\nfig, axs = plt.subplots(1, 3, figsize=(15,15))\naxs[0].imshow(test_x[15][0], cmap=cmap, norm=norm)\naxs[0].axis('off')\naxs[0].set_title('test Input')\naxs[1].imshow(test_y[15][0], cmap=cmap, norm=norm)\naxs[1].axis('off')\naxs[1].set_title('test Output')\naxs[2].imshow(np.rot90(np.rot90(pred_10)), cmap=cmap, norm=norm)\naxs[2].axis('off')\naxs[2].set_title('predicted output')\nplt.tight_layout()","7d3187a9":"train_x_11, train_y_11 = reshapeData(np.array(train_x[16]),np.array(train_y[16]))","ae1f6e52":"InitializeSession()\nModel_11 = Lattice_Model(train_x_11, train_y_11,1)\nModel_11 = ModelFit(Model_11,train_x_11, train_y_11,1)\nModel_11.evaluate(train_x_11, train_y_11)","263aca15":"pred_11 = Model_11.predict(np.array(test_x[16]).reshape(1,np.array(test_x[16]).shape[1],np.array(test_x[16]).shape[2],1))\npred_11 = pred_11.reshape(np.array(test_y[16]).shape[1],np.array(test_y[16]).shape[2])","29cc5776":"cmap = colors.ListedColormap(\n        ['#000000', '#0074D9','#FF4136','#2ECC40','#FFDC00',\n         '#AAAAAA', '#F012BE', '#FF851B', '#7FDBFF', '#870C25'])\nnorm = colors.Normalize(vmin=0, vmax=9)\nfig, axs = plt.subplots(1, 3, figsize=(15,15))\naxs[0].imshow(test_x[16][0], cmap=cmap, norm=norm)\naxs[0].axis('off')\naxs[0].set_title('test Input')\naxs[1].imshow(test_y[16][0], cmap=cmap, norm=norm)\naxs[1].axis('off')\naxs[1].set_title('test Output')\naxs[2].imshow(np.rot90(pred_11), cmap=cmap, norm=norm)\naxs[2].axis('off')\naxs[2].set_title('predicted output')\nplt.tight_layout()","81141ff6":"train_x_12, train_y_12 = reshapeData(np.array(train_x[19]),np.array(train_y[19]))","ae8790c3":"InitializeSession()\nModel_12 = Lattice_Model(train_x_12, train_y_12,1)\nModel_12 = ModelFit(Model_12,train_x_12, train_y_12,1)\nModel_12.evaluate(train_x_12, train_y_12)","2e5b68c9":"pred_12 = Model_12.predict(np.array(test_x[19]).reshape(1,np.array(test_x[19]).shape[1],np.array(test_x[19]).shape[2],1))\npred_12 = pred_12.reshape(np.array(test_y[19]).shape[1],np.array(test_y[19]).shape[2])","19d55168":"cmap = colors.ListedColormap(\n        ['#000000', '#0074D9','#FF4136','#2ECC40','#FFDC00',\n         '#AAAAAA', '#F012BE', '#FF851B', '#7FDBFF', '#870C25'])\nnorm = colors.Normalize(vmin=0, vmax=9)\nfig, axs = plt.subplots(1, 3, figsize=(15,15))\naxs[0].imshow(test_x[19][0], cmap=cmap, norm=norm)\naxs[0].axis('off')\naxs[0].set_title('test Input')\naxs[1].imshow(test_y[19][0], cmap=cmap, norm=norm)\naxs[1].axis('off')\naxs[1].set_title('test Output')\naxs[2].imshow(np.rot90(pred_12), cmap=cmap, norm=norm)\naxs[2].axis('off')\naxs[2].set_title('predicted output')\nplt.tight_layout()","c5651b19":"InitializeSession()\nModel_12_1 = Lattice_Model(train_x_12, train_y_12,0)\nModel_12_1 = ModelFit(Model_12_1,train_x_12, train_y_12,0)\nModel_12_1.evaluate(train_x_12, train_y_12)","2d709634":"pred_12_1 = Model_12_1.predict(np.array(test_x[19]).reshape(1,np.array(test_x[19]).shape[1],np.array(test_x[19]).shape[2],1))\npred_12_1 = pred_12_1.reshape(np.array(test_y[19]).shape[1],np.array(test_y[19]).shape[2])","f8804c23":"cmap = colors.ListedColormap(\n        ['#000000', '#0074D9','#FF4136','#2ECC40','#FFDC00',\n         '#AAAAAA', '#F012BE', '#FF851B', '#7FDBFF', '#870C25'])\nnorm = colors.Normalize(vmin=0, vmax=9)\nfig, axs = plt.subplots(1, 3, figsize=(15,15))\naxs[0].imshow(test_x[19][0], cmap=cmap, norm=norm)\naxs[0].axis('off')\naxs[0].set_title('test Input')\naxs[1].imshow(test_y[19][0], cmap=cmap, norm=norm)\naxs[1].axis('off')\naxs[1].set_title('test Output')\naxs[2].imshow(np.rot90(pred_12_1), cmap=cmap, norm=norm)\naxs[2].axis('off')\naxs[2].set_title('predicted output')\nplt.tight_layout()","950ed544":"train_x_13, train_y_13 = reshapeData(np.array(train_x[21]),np.array(train_y[21]))","5979d848":"InitializeSession()\nModel_13 = Lattice_Model(train_x_13, train_y_13,1)\nModel_13 = ModelFit(Model_13,train_x_13, train_y_13,1)\nModel_13.evaluate(train_x_13, train_y_13)","b4abcf26":"pred_13 = Model_13.predict(np.array(test_x[21]).reshape(1,np.array(test_x[21]).shape[1],np.array(test_x[21]).shape[2],1))\npred_13 = pred_13.reshape(np.array(test_y[21]).shape[1],np.array(test_y[21]).shape[2])","077b1af8":"cmap = colors.ListedColormap(\n        ['#000000', '#0074D9','#FF4136','#2ECC40','#FFDC00',\n         '#AAAAAA', '#F012BE', '#FF851B', '#7FDBFF', '#870C25'])\nnorm = colors.Normalize(vmin=0, vmax=9)\nfig, axs = plt.subplots(1, 3, figsize=(15,15))\naxs[0].imshow(test_x[21][0], cmap=cmap, norm=norm)\naxs[0].axis('off')\naxs[0].set_title('test Input')\naxs[1].imshow(test_y[21][0], cmap=cmap, norm=norm)\naxs[1].axis('off')\naxs[1].set_title('test Output')\naxs[2].imshow(np.rot90(np.rot90(pred_13.T)), cmap=cmap, norm=norm)\naxs[2].axis('off')\naxs[2].set_title('predicted output')\nplt.tight_layout()","0a163f65":"train_x_14, train_y_14 = reshapeData(np.array(train_x[25]),np.array(train_y[25]))","8aa753cf":"InitializeSession()\nModel_14 = Lattice_Model(train_x_14, train_y_14,0)\nModel_14 = ModelFit(Model_14,train_x_14, train_y_14,0)\nModel_14.evaluate(train_x_14, train_y_14)","e0f44148":"pred_14 = Model_14.predict(np.array(test_x[25]).reshape(1,np.array(test_x[25]).shape[1],np.array(test_x[25]).shape[2],1))\npred_14 = pred_14.reshape(np.array(test_y[25]).shape[1],np.array(test_y[25]).shape[2])","c2456075":"cmap = colors.ListedColormap(\n        ['#000000', '#0074D9','#FF4136','#2ECC40','#FFDC00',\n         '#AAAAAA', '#F012BE', '#FF851B', '#7FDBFF', '#870C25'])\nnorm = colors.Normalize(vmin=0, vmax=9)\nfig, axs = plt.subplots(1, 3, figsize=(15,15))\naxs[0].imshow(test_x[25][0], cmap=cmap, norm=norm)\naxs[0].axis('off')\naxs[0].set_title('test Input')\naxs[1].imshow(test_y[25][0], cmap=cmap, norm=norm)\naxs[1].axis('off')\naxs[1].set_title('test Output')\naxs[2].imshow((pred_14), cmap=cmap, norm=norm)\naxs[2].axis('off')\naxs[2].set_title('predicted output')\nplt.tight_layout()","4c9f4f3e":"train_x_15, train_y_15 = reshapeData(np.array(train_x[26]),np.array(train_y[26]))","d17abb0a":"InitializeSession()\nModel_15 = Lattice_Model(train_x_15, train_y_15,1)\nModel_15 = ModelFit(Model_15,train_x_15, train_y_15,1)\nModel_15.evaluate(train_x_15, train_y_15)","27d59ee5":"pred_15 = Model_15.predict(np.array(test_x[26]).reshape(1,np.array(test_x[26]).shape[1],np.array(test_x[26]).shape[2],1))\npred_15 = pred_15.reshape(np.array(test_y[26]).shape[1],np.array(test_y[26]).shape[2])","bf1fa7d7":"cmap = colors.ListedColormap(\n        ['#000000', '#0074D9','#FF4136','#2ECC40','#FFDC00',\n         '#AAAAAA', '#F012BE', '#FF851B', '#7FDBFF', '#870C25'])\nnorm = colors.Normalize(vmin=0, vmax=9)\nfig, axs = plt.subplots(1, 3, figsize=(15,15))\naxs[0].imshow(test_x[26][0], cmap=cmap, norm=norm)\naxs[0].axis('off')\naxs[0].set_title('test Input')\naxs[1].imshow(test_y[26][0], cmap=cmap, norm=norm)\naxs[1].axis('off')\naxs[1].set_title('test Output')\naxs[2].imshow((pred_15), cmap=cmap, norm=norm)\naxs[2].axis('off')\naxs[2].set_title('predicted output')\nplt.tight_layout()","4300db66":"## Problem - 9","2230e725":"## Introduction\nThe whole story started with twitter, from where I came to know about this competition. Most probably this competition was launched by Kaggle after a very long gap. This competition was discussed among various individuals in the data science community on twitter. I guessed I would approach the solution through some machine learning algorithms or deep learning. But suddenly after two days of an announcement of this competition, I came across a tweet on my timeline by an anonymous user saying **\"Its a coincidence that TensorFlow released its new library TensorFlow Lattice on the same day this competition was announced by Kaggle**\".<br>\nThe first time when I heard about TensorFlow lattice my reaction was...\n![meme](https:\/\/external-content.duckduckgo.com\/iu\/?u=https%3A%2F%2Ftse2.mm.bing.net%2Fth%3Fid%3DOIP.OdvSEFavLCxXLlnBuP0NYQHaEK%26pid%3DApi&f=1)\n","536d4f14":"Looks like the symmetry is disturbed this time.","c68f559f":"## Problem - 12","ec0c3e35":"## Into the Problem","3d2f0bd5":"Let's try to solve this problem by optimizing binary_crossentropy rather than mean_squared_error","a4fbe06f":"The task in this problem was to highlight out the superimposed section of the half divided input image. Yes, our model failed here also...","1f286f3b":"## Note\nwhat is this **use_lim** parameter? <br> Before Explaining this kernel, I found that some the some the problems requires **output_max**, **output_min** with optimization of **means_squared_error**, otherwise both **output_max**, **output_min**  as None with optimization of **binary_crossentropy** to obtain better results.","ffc3d65d":"## Problem - 7","1ccbdbb6":"## Problem - 8","039b6c48":"## What is Tensorflow Lattice?","40eeea4a":"Guess, this did not work well...","84dc0da3":"## Problem - 13","a0ebd70f":"## Problem - 5","89b097b9":"## The most difficult part of this Problem...\nThe most difficult part while approaching the solution was the implementation of TensorFlow Lattice itself. The implementation guide provided by TensorFlow was very helpful to understand how to use it over tabular data, but what for 2d-matrix data like this?. I went through a deep analysis of how TensorFlow lattice works and then found out a way to implement it. It took almost three weeks for me to implement the Lattice model. I was stressed by the thought of whether it would work successfully or not at the end. Although I also can't deny the fact that implementing Lattice over 2d-matrix was much easier than it looked.<br>\nTrust me I tried my hardest to make it successful each time I failed just to prove that I did not waste my time for three weeks.<br>\n![meme](https:\/\/external-content.duckduckgo.com\/iu\/?u=https%3A%2F%2Fmedia.giphy.com%2Fmedia%2FQOaTohH90fuEM%2Fgiphy.gif&f=1&nofb=1)","1c8fb275":"It kind of looks like found a pattern, but as you can see the inverted T section should have black color and the corner square should have blue while the reverse has happened.","06d2fc44":"## Exploring the data","14c8bbb8":"## Conclusion\n\n* TF Lattice is not the absolute solution \n* It failed to solve puzzle-solving tasks and task involved combination of two inputs as one input.\n* I need to rotate the predicted matrix or Transpose it to get the desired result, so that is some-what a bad behavior shown by our model.\n* To solve all the 15 tasks we have used the same Neural Network model and same Lattice structure, same learning rate, and the same number of iterations, so I believe some unsolvable problems could have been solved with a different NN structure or different Lattice structure.\n\n* For solving bigger size matrix problems like in case of problem-11, a higher dimension lattice could have been a better choice, while training it through a higher number of iterations.\n* I have only approached the tasks that have uniform matrix shape for training, for non-uniform distribution I hope concepts like cellular automata, genetic algorithms and many other concepts discussed in the Notebook section of the competition would definitely help.","d19f4d3b":"## Problem - 10","ff8e8c07":"## Problem - 1","9c503df3":"Looks like the model did not perform much well this time....","2c80e113":"## Construction of the Lattice Neural Network","e7bdc8fd":"<h1>Exploiting Tensorflow Lattice to solve ARC<\/h1>","848bd3cc":"## TensorFlow Lattice: Flexible, controlled and interpretable ML \n**by Mahdi Milani Fard, Software Engineer, Google Research**\n\nLink to the original blog - https:\/\/blog.tensorflow.org\/2020\/02\/tensorflow-lattice-flexible-controlled-and-interpretable-ML.html <br><br>\n### Intro\nMost ML practitioners have encountered the typical scenario where the training data looks very different from the run-time queries on which the model is evaluated. As a result, flexible ML solutions such as DNNs or forests that rely solely on the training dataset often act unexpectedly and even wildly in parts of the input space not covered by the training and validation datasets. This behaviour is especially problematic in cases where important policy or fairness constraints can be violated.<br><br>\nEven though common forms of regularization can result in more sensible extrapolation, standard regularizers cannot guarantee reasonable model behaviour across the entire input space, especially with high-dimensional inputs. Switching to simpler models with more controlled and predictable behaviour can come at a severe cost to the model accuracy.<br><br>\nTF Lattice makes it possible to keep using flexible models, but provides several options to inject domain knowledge into the learning process through semantically meaningful common-sense or policy-driven shape constraints.\n For example, you can specify that the model output should be monotonically increasing with respect to a given input. These extra pieces of domain knowledge can help the model learn beyond just the training dataset and makes it behave in a manner controlled and expected by the user.<br><br>\n A **lattice** is an interpolated look-up table that can approximate arbitrary input-output relationships in your data.\n![lattice](https:\/\/www.tensorflow.org\/lattice\/images\/model_comparison.png?) ","b9504fe8":"While optimizing mean_squared_error the model is only able to detect which part of the incomplete pattern is needed to be filled up but is not able to answer which color it would be, while in case of binary_crossentrophy it is answer with entire pattern but is not able to colorize the pattern.","65861b4c":"The problem looks like a puzzle-solving task, and it seems that our lattice model is pretty weak in solving these types of tasks.","e68a3861":"## Problem - 2","f2ee7b36":"## Problem - 15","f1582a88":"Not bad...","a6c8da37":"<h2>Please UpVote and share if you like this notebook or if this notebook was informative to you by some means. Also, let me know your opinions and suggestions in the comment section below.<\/h2>\n![memes](https:\/\/external-content.duckduckgo.com\/iu\/?u=https%3A%2F%2Ftse1.mm.bing.net%2Fth%3Fid%3DOIP.1lFiVY2gxBQobWgyRc9AbAHaHa%26pid%3DApi&f=1)","fc1bf1fc":"## Problem - 14","5b05c170":"No, complains this time...","3efa9c11":"## Problem - 6","09d531d0":"Well the result is not so bad at all. But as you could see that I have rotated the predicted matrix by 90 degrees to match the desired result. We would be discussing that later in this notebook. Let's see how our lattice model performs to solve other problems.","13ba0c60":"## An important tweet by Fran\u00e7ois Chollet\nBelow are some of the screenshots of twitter post by Fran\u00e7ois Chollet(@fchollet) which would briefly explain the main objective of this competition.<br>\n> **One interesting thing about the ARC competition is that it serves to highlight how people who use deep learning often have little idea of what deep learning actually does, and when they should be using it or not**\n\n> **DL is applicable when you're doing *pattern recognition*: when you have data that lies on a smooth manifold, along which samples can be interpolated. And you're going to need a dense sampling of your manifold as training data in order to fit a parametric approximation of it**\n\n> **Generalization in deep learning is interpolation along a latent manifold (or rather a learned approximation of it). It has little to do with your model itself and everything to do with the natural organization of your data**\n\n> **Differentiability & minibatch SGD are the strengths of DL: besides making the learning practically tractable, the smoothness & continuity of the function & the incrementality of its fitting work great to learn to approximate latent manifold. But its strengths are also its limits**\n\n> **The whole setup breaks down when you are no longer doing pattern recognition -- when you no longer have a latent manifold (any kind of discrete problem) or no longer have a dense sampling of it. Or when your manifold changes over time.**\n\n> **This isn't complicated**\n\n<br>\nLink to the twitter post - https:\/\/twitter.com\/fchollet\/status\/1234789789309652992","f38c5b51":"## Thank You....","f3129f6f":"## Problem - 4","7e1b8f1f":"## Problem - 11","f6db4bad":"## Problem - 3","a1609479":"The predicted results have smaller squares, but symmetry is maintained in the predicted output. Let us see what happens if we use mean_squared error for optimization.","fa58bbff":"In this case, the model is understanding the pattern like a bar with the least height would be yellow, bar with the highest height would be blue, the second-highest would be red and third would be green. But, it does not produce the results keeping the respect of the order of the given input."}}