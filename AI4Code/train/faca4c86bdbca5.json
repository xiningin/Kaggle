{"cell_type":{"0cdd0d1f":"code","76ad7e68":"code","7d038586":"code","8ad11c08":"code","2f6b3c68":"code","6d2dbbb9":"code","a6a1a9be":"code","9510b3e9":"code","51d07ce7":"code","c32a6f9b":"code","c0903f0d":"code","e555b5fd":"code","9e9d941d":"code","4e50d51f":"code","5b1ca9a5":"code","eb6f93fc":"code","30504cb9":"code","f4a664b8":"code","0b0869fc":"code","f2502f56":"code","8bf8864b":"code","bc4906f6":"code","b3f5aaee":"code","6824c84f":"code","833b2142":"code","d615dfb3":"code","9d331848":"code","912b44b8":"code","60f60f01":"markdown","58449b8f":"markdown","9d569764":"markdown","7cac7f28":"markdown","2c4b7d14":"markdown","0debb53e":"markdown","a19c5449":"markdown","80307a93":"markdown","083e914a":"markdown","5c9945be":"markdown","3aa08db9":"markdown","1d432825":"markdown","9744c7b2":"markdown"},"source":{"0cdd0d1f":"import pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom plotly.offline import iplot\nimport plotly.graph_objects as go\nsns.set(rc={'figure.figsize':(10,6)})\nsns.set(font_scale=1.3)\n\nimport string \nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.ensemble import GradientBoostingClassifier, AdaBoostClassifier, ExtraTreesClassifier\nfrom sklearn.ensemble import BaggingClassifier, RandomForestClassifier, VotingClassifier\nfrom sklearn.tree import DecisionTreeClassifier, ExtraTreeClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.model_selection import ShuffleSplit, GridSearchCV, cross_validate\nfrom sklearn.metrics import accuracy_score, confusion_matrix\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","76ad7e68":"train = pd.read_csv('..\/input\/titanic\/train.csv')","7d038586":"train.head()","8ad11c08":"train.info()","2f6b3c68":"train.describe()","6d2dbbb9":"(train.isnull().sum()\/len(train))*100","a6a1a9be":"train.drop(columns=['Cabin'], inplace=True)","9510b3e9":"train['Age'].fillna(train['Age'].median(), inplace=True)\ntrain['Embarked'].fillna(method='ffill', inplace=True)","51d07ce7":"(train.isnull().sum()\/len(train))*100","c32a6f9b":"values=train[\"Survived\"].value_counts().values\nfig = go.Figure(data=[go.Pie(labels=['Not Survived','Survived'],values=values,textinfo='label+percent')])\nfig.update_layout(title={'text': \"Titanic Survived\",'y':0.9,'x':0.45,'xanchor': 'center','yanchor': 'top'},\n                  font=dict(size=18, color='black', family=\"Courier New, monospace\"))","c0903f0d":"values=train[\"Pclass\"].value_counts().values\nfig = go.Figure(data=[go.Pie(labels=['3\u00ba Class','2\u00b0 Class','1\u00b0 Class'],values=values,textinfo='label+percent')])\nfig.update_layout(title={'text': \"Class of Ship\",'y':0.9,'x':0.45,'xanchor': 'center','yanchor': 'top'},\n                  font=dict(size=18, color='black', family=\"Courier New, monospace\"))\nfig.show()","e555b5fd":"values=train[\"Sex\"].value_counts().values\nfig = go.Figure(data=[go.Pie(labels=['Male','Female'],values=values,textinfo='label+percent')])\nfig.update_layout(title={'text': \"Sex\",'y':0.9,'x':0.47,'xanchor': 'center','yanchor': 'top'},\n                  font=dict(size=18, color='black', family=\"Courier New, monospace\"))\nfig.show()","9e9d941d":"survived = train[train['Survived']==1]\nvalues=survived[\"Sex\"].value_counts().values\nfig = go.Figure(data=[go.Pie(labels=['Male','Female'],values=values,textinfo='label+percent')])\nfig.update_layout(title={'text': \"Survivor by Sex\",'y':0.9,'x':0.47,'xanchor': 'center','yanchor': 'top'},\n                  font=dict(size=18, color='black', family=\"Courier New, monospace\"))\nfig.show()","4e50d51f":"g = sns.FacetGrid(train, col='Survived', height=6)\ng.map(plt.hist, 'Age', bins=20);","5b1ca9a5":"g = sns.FacetGrid(train, col='Survived', row='Pclass', size=2.8, aspect=1.6)\ng.map(plt.hist, 'Age', bins=20);","eb6f93fc":"g = sns.FacetGrid(train, row='Embarked', size=2.4, aspect=2.6)\ng.map(sns.pointplot, 'Pclass', 'Survived', 'Sex', palette='deep')\ng.add_legend();","30504cb9":"g = sns.FacetGrid(train, row='Embarked', col='Survived', size=2.2, aspect=2.4)\ng.map(sns.barplot, 'Sex', 'Fare')\ng.add_legend();","f4a664b8":"corr = train.corr()\nplt.figure(figsize=(16,8))\nsns.heatmap(data=corr, annot=True);","0b0869fc":"def encoder(data):\n    le = LabelEncoder()\n    for col in data.select_dtypes('object'):\n        data[col] = le.fit_transform(data[col])\n    return(data)","f2502f56":"train['Title'] = train['Name'].str.extract(' ([A-Za-z]+)\\.', expand=False)\ntrain['Title'] = train['Title'].replace(['Lady', 'Countess','Capt', 'Col', \n                                             'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')\ntrain['Title'] = train['Title'].replace('Mlle', 'Miss')\ntrain['Title'] = train['Title'].replace('Ms', 'Miss')\ntrain['Title'] = train['Title'].replace('Mme', 'Mrs')","8bf8864b":"train.loc[ train['Age'] <= 16, 'Age'] = 0\ntrain.loc[(train['Age'] > 16) & (train['Age'] <= 32), 'Age'] = 1\ntrain.loc[(train['Age'] > 32) & (train['Age'] <= 48), 'Age'] = 2\ntrain.loc[(train['Age'] > 48) & (train['Age'] <= 64), 'Age'] = 3\ntrain.loc[ train['Age'] > 64, 'Age']","bc4906f6":"train.head()","b3f5aaee":"train.drop(columns=['Name','PassengerId','Ticket'], inplace=True)","6824c84f":"train = encoder(train)\ntrain.head()","833b2142":"x = train.drop(['Survived'], axis=1)\ny = train.iloc[:,0]\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, stratify=y)","d615dfb3":"colunas = ['Modelo','Acuracy']\nresultado = pd.DataFrame(columns=colunas)","9d331848":"models = []\n\nmodels.append(('GradientBoostingClassifier', GradientBoostingClassifier()))\nmodels.append(('AdaBoostClassifier', AdaBoostClassifier()))\nmodels.append(('ExtraTreesClassifier', ExtraTreesClassifier()))\nmodels.append(('BaggingClassifier', BaggingClassifier()))\nmodels.append(('RandomForestClassifier', RandomForestClassifier()))\nmodels.append(('DecisionTreeClassifier', DecisionTreeClassifier()))\nmodels.append(('ExtraTreeClassifier', ExtraTreeClassifier()))\nmodels.append((\"XGBClassifier\", XGBClassifier()))\n\nfor name, model in models:\n    model.fit(x_train,y_train)\n    y_pred=model.predict(x_test)\n    acc = accuracy_score(y_test, y_pred)\n    resultado = resultado.append(pd.DataFrame([[name, acc]], columns=colunas))\n    \nresultado.sort_values(by=['Acuracy'], ascending=False, inplace=True)\nresultado","912b44b8":"voting = VotingClassifier(estimators=models, voting='soft')\nvoting.fit(x_train, y_train)\nprint('Treino Score:', voting.score(x_train, y_train))\nprint('Teste Score:', voting.score(x_test, y_test))","60f60f01":"# <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:150%; text-align:center; border-radius: 15px 15px;\">Feature Engineering<\/p>","58449b8f":"# <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:150%; text-align:center; border-radius: 15px 15px;\">Import<\/p>\n","9d569764":"# <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:150%; text-align:center; border-radius: 15px 15px;\">Plot<\/p>","7cac7f28":"<div style=\"color:black; background-color:#f5f7b0; border-radius:10px; padding:20px;\">\n<b>Observation<\/b><br\/>\n- 61.6% dit not survive<br\/>\n- 55.1% was 3rd class<br\/>\n- 64.8% were male<br\/>\n- The median age of the survivors was 29 years<br\/>\n- The majority of the survivors were in the 3rd class (the 3rd class was the majority on the ship<br\/>\n<\/div>","2c4b7d14":"<div style=\"color:black; background-color:#f5f7b0; border-radius:10px; padding:20px;\">\n<b>Observation<\/b><br\/>\n- A class was created with the passengers title<br\/>\n- A class was created with age<br\/>\n- Some columns have been deleted<br\/>\n- The object type of the columns has been transformed<br\/>\n<\/div>","0debb53e":"# <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:150%; text-align:center; border-radius: 15px 15px;\">Preprocessing<\/p>","a19c5449":"# Missing Value","80307a93":"<div style=\"color:black; background-color:#f5f7b0; border-radius:10px; padding:20px;\">\n<b>Observation<\/b><br\/>\nThe Age columns has 19.86% of missing values theses values have been replaced by the average.<br\/>\nThe Cabin columns has 77.10% of missing values. There are many missing values, so I deleted it.\n<\/div>","083e914a":"# <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:150%; text-align:center; border-radius: 15px 15px;\">Input<\/p>","5c9945be":"# <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:150%; text-align:center; border-radius: 15px 15px;\">Voting Classifier<\/p>","3aa08db9":"A voting set works by combining predictions from various models that can be used for ranking or regression. In the case of regression, calculations of the average of the models' forecasts are made and the classification makes the sum of the forecasts for each label and the label with the majority of votes is predicted.\n\nThere are two approaches to predicting the vote which are:\n\n* Voting hard. Predict the class with the highest total vote of the models is for models that provide for class labels.\n\n* Smooth voting. Predict the class with the highest probability added to the models is for models that predict probabilities of class association.","1d432825":"<div style=\"color:black; background-color:#fcb23a; border-radius:10px; padding:20px;\">\n<b>Conclusion<\/b><br\/>\nVoting achieved ~95% accuracy in traning data and ~83% in test data. The AdaBoostClassifier achieved an accuracy of ~84% predicting the test data. In this dataset AdaBoostClassifier was better than Voting but in other examples in can be quite the opposite.\n<\/div> ","9744c7b2":"# <p style=\"background-color:#fa5252; font-family:newtimeroman; font-size:150%; text-align:center; border-radius: 15px 15px;\">Voting<\/p>"}}