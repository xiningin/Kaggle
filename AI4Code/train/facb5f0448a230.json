{"cell_type":{"8134bfdb":"code","22b13fcc":"code","ba198859":"code","8c38658d":"code","3a36541d":"code","ef6b8258":"code","0f6a1e93":"code","620a48c8":"code","7d021d18":"code","0021fa0d":"code","ed5c96b5":"code","49564f09":"code","410fc66b":"code","630fd4b3":"code","8d0b3fed":"code","2588bac8":"code","a2e8ffc7":"code","93cf7bcc":"code","95c89faa":"code","a731d91b":"code","5a6c0f13":"code","c3adbea7":"markdown","5c832139":"markdown","4fa3c160":"markdown","f51f0ff5":"markdown","7f1288c9":"markdown","70c48eb1":"markdown","9de34f42":"markdown","39e51887":"markdown"},"source":{"8134bfdb":"import numpy as np\nimport pandas as pd\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split","22b13fcc":"# Data Train\ndataTrain = pd.read_csv('..\/input\/titanic\/train.csv') \n\n# Data Test\ndataTest = pd.read_csv('..\/input\/titanic\/test.csv') ","ba198859":"# Checking the first 5 rows of dataset\nprint(f'Train Data Head :\\n{dataTrain.head()}\\n') \n\n# Checking the last 5 rows of dataset\nprint(f'Test Data Head :\\n{dataTest.head()}') ","8c38658d":"# Checking train data shape\nprint(f'Train Data : {dataTrain.shape}')\n\n# Checking test data shape\nprint(f'Test Data : {dataTest.shape}')","3a36541d":"# Getting the information of the train dataset\nprint(f'Train Data : {dataTrain.info()}')\n\n# Getting the information of the test dataset\nprint(f'Test Data : {dataTest.info()}')","ef6b8258":"# Checking the missing value of train dataset\nprint(f'Train Isnull :\\n{dataTrain.isnull().sum()}\\n')\n\n# Checking the missing value of test dataset\nprint(f'Test Isnull :\\n{dataTest.isnull().sum()}')","0f6a1e93":"# Checking the missing column data train\ndataTrain.loc[:, ['Age', 'Cabin']]","620a48c8":"# Checking the missing column data test\ndataTest.loc[:, ['Age', 'Cabin']]","7d021d18":"# Handling missing value Age\nageTrain = dataTrain['Age'].mean()\ndataTrain['Age'] = dataTrain['Age'].fillna(ageTrain)\n\n# Handling missing value Cabin\ndataTrain.drop('Cabin', axis=1, inplace=True)\n\n# Handling missing value Embarked\nmodusTrain = dataTrain['Embarked'].mode()[0]\ndataTrain['Embarked'] = dataTrain['Embarked'].fillna(modusTrain)\ndataTrain['Embarked'].isna().sum()","0021fa0d":"# Checking the shape\ndataTrain.shape","ed5c96b5":"# Getting the information\ndataTrain.info()","49564f09":"# Handling missing value Age\nageTest = dataTest['Age'].mean()\ndataTest['Age'] = dataTest['Age'].fillna(ageTest)\n\n# Handling missing value Cabin\ndataTest.drop('Cabin', axis=1, inplace=True)\n\n# Handling missing value Embarked\nmodusTest = dataTest['Embarked'].mode()[0]\ndataTest['Embarked'] = dataTest['Embarked'].fillna(modusTest)\ndataTest['Embarked'].isna().sum()","410fc66b":"# Checking the shape\ndataTest.shape","630fd4b3":"# Getting the information\ndataTest.info()","8d0b3fed":"women = dataTrain.loc[dataTrain.Sex == 'female']['Survived']\nrate_women = sum(women)\/len(women)\n\nprint(f'women who survived : {rate_women}')","2588bac8":"man = dataTrain.loc[dataTrain.Sex == 'male']['Survived']\nrate_man = sum(man)\/len(man)\n\nprint(f'man who survived : {rate_man}')","a2e8ffc7":"# Encode Train Data\ndataTrain.replace({'Sex':{'female': 0, 'male': 1}}, inplace=True)\n\n# Encode Embarked\ndataTrain.replace({'Embarked':{'S': 0, 'C': 1, 'Q': 2}}, inplace=True)\n\n# Encode Test Data\ndataTest.replace({'Sex':{'female': 0, 'male': 1}}, inplace=True)\n\n# Encode Embarked\ndataTest.replace({'Embarked':{'S': 0, 'C': 1, 'Q': 2}}, inplace=True)","93cf7bcc":"# Train Shape\nprint(f'Data Train Shape : {dataTrain.shape}')\nprint(\"=\"*50)\n\n# Test Shape\nprint(f'Data Test Shape : {dataTest.shape}\\n')\nprint(\"=\"*50)\n\n# Missing Value Train\nprint(f'Data Train Isnull? :\\n{dataTrain.isnull().sum()}\\n')\nprint(\"=\"*50)\n\n# Missing Value Test\nprint(f'Data Test Isnull? :\\n{dataTest.isnull().sum()}\\n')\nprint(\"=\"*50)\n\n# Checking the first 5 rows of dataset\nprint(f'Train Data Head :\\n{dataTrain.head()}\\n')\nprint(\"=\"*50)\n\n# Checking the last 5 rows of dataset\nprint(f'Test Data Head :\\n{dataTest.head()}\\n')\nprint(\"=\"*50)\n\n# Getting the information \nprint(f'Train Data : {dataTrain.info()}\\n')\nprint(\"=\"*50)\n\n# Getting the information \nprint(f'Test Data : {dataTest.info()}')\nprint(\"=\"*50)","95c89faa":"# Data X\ny = dataTrain[\"Survived\"]\nfeatures = [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\"]\nX = pd.get_dummies(dataTrain[features])\ntestX = pd.get_dummies(dataTest[features])\n\n# Model\nmodel = RandomForestClassifier(n_estimators=750,\n                               max_depth=15,\n                               random_state=1)\n\n# Fit\nmodel.fit(X, y)","a731d91b":"predictions = model.predict(testX)","5a6c0f13":"output = pd.DataFrame({\n    'PassengerId': dataTest.PassengerId,\n    'Survived': prediction})\n\noutput.to_csv('my_submission.csv', index=False)\nprint('Your mission was succesfully saved!')","c3adbea7":"# Handling Missing Value Train Data","5c832139":"# Encode","4fa3c160":"# Handling Missing Value Test Data","f51f0ff5":"# **Check and Clean the Train Data**","7f1288c9":"# **Divide Data and Modelling**","70c48eb1":"# **Looking and Checking the Data Again**","9de34f42":"# **Explore A Pattern**","39e51887":"# **Model Evaluate And Accuracy**"}}