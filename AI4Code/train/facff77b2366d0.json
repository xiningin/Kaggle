{"cell_type":{"0031a230":"code","19fad8e2":"code","239b1355":"code","ecad41ba":"code","8881fe03":"code","5b814012":"code","bbfb0d7b":"code","1e90a2d4":"code","d62f386d":"code","3db5cc5f":"code","ee53ac64":"code","1c4df340":"code","38e41044":"code","f937d4c7":"code","8a53439e":"code","939aaf64":"code","266953b1":"code","fda3fdbd":"code","fe8a0063":"code","11d17b3d":"code","10b59b12":"code","403b1ab8":"code","f50fa7b9":"code","4f99ee0d":"code","47f78601":"code","2803b109":"code","c611c1f8":"code","81a438de":"code","6438bf05":"code","32bd608e":"code","5fe52c67":"code","434fcf2a":"code","a04fc8db":"code","98c7f4ab":"code","20a3a4fc":"markdown","3c120eff":"markdown","295e153d":"markdown","67de0971":"markdown","d724757d":"markdown","3029fe6a":"markdown","018af78d":"markdown","58dfae25":"markdown","413901cb":"markdown","d3123e99":"markdown","aee7619d":"markdown","024d2b66":"markdown","bd8983f8":"markdown","cd6525f8":"markdown","5c189715":"markdown","b5477f62":"markdown","e7f327b7":"markdown","f53e43f6":"markdown","f2dac65b":"markdown","22bccd6c":"markdown","e51d116f":"markdown","a7d88159":"markdown","3821d479":"markdown","e8a32bc9":"markdown","e9fe2e45":"markdown","ec717a03":"markdown","34069b10":"markdown","f116353d":"markdown"},"source":{"0031a230":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\npd.options.mode.chained_assignment = None  # disabled chaining errors as some columns overwritten below\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","19fad8e2":"import sys\nprint(sys.version)","239b1355":"import matplotlib.pyplot as plt\n%matplotlib inline\nfrom sklearn.preprocessing import LabelEncoder\nfrom scipy.stats import levene\nimport seaborn as sns\nfrom scipy.stats import shapiro\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\nfrom sklearn.decomposition import KernelPCA","ecad41ba":"dataset_df = pd.read_csv(\"..\/input\/travel-insurance-prediction-data\/TravelInsurancePrediction.csv\")","8881fe03":"dataset_df.head()","5b814012":"dataset_df.info()","bbfb0d7b":"dataset = dataset_df.loc[:, ~dataset_df.columns.str.contains('^Unnamed')]","1e90a2d4":"dataset.describe().columns","d62f386d":"le = LabelEncoder()\nto_encode = ['Employment Type','GraduateOrNot','FrequentFlyer', 'EverTravelledAbroad']\nfor index in to_encode:\n    dataset[index] = le.fit_transform(dataset[index])\ndataset['AnnualIncome'] = np.log10(dataset['AnnualIncome'])","3db5cc5f":"corrPearson = dataset.corr(method=\"pearson\")\ncorrSpearman = dataset.corr(method=\"spearman\")","ee53ac64":"figure = plt.figure(figsize=(10,8))\nsns.heatmap(corrPearson,annot=True,cmap='RdYlGn', vmin=-1, vmax=+1)\nplt.title(\"PEARSON\")\nplt.xlabel(\"COLUMNS\")\nplt.ylabel(\"COLUMNS\")\nplt.show()","1c4df340":"figure = plt.figure(figsize=(10,8))\nsns.heatmap(corrSpearman,annot=True,cmap='RdYlGn', vmin=-1, vmax=+1)\nplt.title(\"SPEARMAN\")\nplt.xlabel(\"COLUMNS\")\nplt.ylabel(\"COLUMNS\")\nplt.show()","38e41044":"print(\"%.4f - %.4f \" % levene(dataset[\"Age\"],dataset[\"Employment Type\"],dataset[\"GraduateOrNot\"],dataset[\"AnnualIncome\"],dataset[\"FamilyMembers\"],\n                             dataset[\"ChronicDiseases\"],dataset[\"FrequentFlyer\"],dataset[\"EverTravelledAbroad\"],dataset[\"TravelInsurance\"]))","f937d4c7":"for i in dataset.columns:\n    print(\"-----\"*10  )\n    print(\"%.3f - %.3f\" % shapiro(dataset[i]), i)","8a53439e":"dataset.hist(figsize=(25,15))\nplt.show()","939aaf64":"figure = plt.figure(figsize=(6,6))\nsns.barplot(x=\"Employment Type\",y=\"TravelInsurance\",data=dataset)\nplt.show()","266953b1":"figure = plt.figure(figsize=(6,6))\nsns.barplot(x=\"GraduateOrNot\",y=\"TravelInsurance\",data=dataset)\nplt.show()","fda3fdbd":"figure = plt.figure(figsize=(6,6))\nsns.barplot(x=\"ChronicDiseases\",y=\"TravelInsurance\",data=dataset)\nplt.show()","fe8a0063":"figure = plt.figure(figsize=(6,6))\nsns.barplot(x=\"FrequentFlyer\",y=\"TravelInsurance\",data=dataset)\nplt.show()","11d17b3d":"figure = plt.figure(figsize=(6,6))\nsns.barplot(x=\"EverTravelledAbroad\",y=\"TravelInsurance\",data=dataset)\nplt.show()","10b59b12":"datasetV = dataset.copy()\ndatasetV[\"Employment Type\"] = pd.Categorical(datasetV[\"Employment Type\"])\ndatasetV[\"GraduateOrNot\"] = pd.Categorical(datasetV[\"GraduateOrNot\"])\ndatasetV[\"FrequentFlyer\"] = pd.Categorical(datasetV[\"FrequentFlyer\"])\ndatasetV[\"EverTravelledAbroad\"] = pd.Categorical(datasetV[\"EverTravelledAbroad\"])\ndatasetV[\"TravelInsurance\"] = pd.Categorical(datasetV[\"TravelInsurance\"])","403b1ab8":"to_boxplot = [\"Age\", \"AnnualIncome\",\"FamilyMembers\"]\nfor index in to_boxplot:\n    figure = plt.figure(figsize=(10,5))\n    sns.boxplot(x=index, y=\"TravelInsurance\" ,data=datasetV, whis=[0, 100], width=.6, palette=\"vlag\")\nplt.show()\n","f50fa7b9":"rand = 0\nfor index in dataset.columns:\n    rand = rand + 1\n    if rand < 8: # total 14 columns but we don't need output columns\n        figure = plt.figure(figsize=(10,6))\n        sns.lineplot(x=\"TravelInsurance\",y=index,data=dataset)\n        plt.show()\n    else:\n        break","4f99ee0d":"X = dataset.iloc[:,:-1].values\ny = dataset.iloc[:, -1].values\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state = 188)","47f78601":"cKNN = KNeighborsClassifier(n_neighbors = 10, metric = 'minkowski', p = 2).fit(X_train, y_train)\ncDT = DecisionTreeClassifier(criterion = 'entropy', random_state = 0).fit(X_train, y_train)\ncRF = RandomForestClassifier(n_estimators = 10, criterion ='entropy', random_state = 0).fit(X_train, y_train)\ncNB = GaussianNB().fit(X_train, y_train)\ncLoR = LogisticRegression(solver = 'liblinear', random_state = 0).fit(X_train, y_train)\ncSVM = SVC(kernel = 'rbf', random_state=0).fit(X_train, y_train)\n\n","2803b109":"model_lst = [cKNN, cDT, cRF, cLoR, cNB, cSVM]\n\nfor model in model_lst:\n    model_name = model.__class__.__name__\n    predict = model.predict(X_test)\n    R2CV = cross_val_score(model, X_test, y_test, cv = 10, verbose = False).mean()\n    error = -cross_val_score(model, X_test, y_test, cv = 10, scoring = 'neg_mean_squared_error',verbose = False).mean()\n    print(model_name + \"--> \")\n    print(\"*\" * 10)\n    print(accuracy_score(y_test, predict))\n    print(R2CV)\n    print(np.sqrt(error))\n    print('*' * 30)","c611c1f8":"sc = StandardScaler()\nX_train_scaled = sc.fit_transform(X_train)\nX_test_scaled = sc.transform(X_test)","81a438de":"pca = PCA(n_components = 3)\nX_train_pca = pca.fit_transform(X_train_scaled)\nX_test_pca = pca.transform(X_test_scaled)","6438bf05":"cKNN_pca = KNeighborsClassifier(n_neighbors = 10, metric = 'minkowski', p = 2).fit(X_train_pca, y_train)\ncDT_pca = DecisionTreeClassifier(criterion = 'entropy', random_state = 0).fit(X_train_pca, y_train)\ncRF_pca = RandomForestClassifier(n_estimators = 10, criterion ='entropy', random_state = 0).fit(X_train_pca, y_train)\ncNB_pca = GaussianNB().fit(X_train_pca, y_train)\ncLoR_pca = LogisticRegression(solver = 'liblinear', random_state = 0).fit(X_train_pca, y_train)\ncSVM_pca = SVC(kernel = 'rbf', random_state=0).fit(X_train_pca, y_train)","32bd608e":"model_lst_pca = [cKNN_pca, cDT_pca, cRF_pca, cLoR_pca, cNB_pca, cSVM_pca]\nfor model in model_lst_pca:\n    model_name = model.__class__.__name__\n    predict = model.predict(X_test_pca)\n    R2CV = cross_val_score(model, X_test_pca, y_test, cv = 10, verbose = False).mean()\n    error = -cross_val_score(model, X_test_pca, y_test, cv = 10, scoring = 'neg_mean_squared_error',verbose = False).mean()\n    print(model_name + \"--> \")\n    print(\"*\" * 10)\n    print(accuracy_score(y_test, predict))\n    print(R2CV)\n    print(np.sqrt(error))\n    print('*' * 30)","5fe52c67":"kpca = KernelPCA(n_components = 3, kernel = 'rbf') #radial basis function\nX_train_kpca = kpca.fit_transform(X_train_scaled)\nX_test_kpca = kpca.transform(X_test_scaled)","434fcf2a":"cKNN_kpca = KNeighborsClassifier(n_neighbors = 10, metric = 'minkowski', p = 2).fit(X_train_kpca, y_train)\ncDT_kpca = DecisionTreeClassifier(criterion = 'entropy', random_state = 0).fit(X_train_kpca, y_train)\ncRF_kpca = RandomForestClassifier(n_estimators = 10, criterion ='entropy', random_state = 0).fit(X_train_kpca, y_train)\ncNB_kpca = GaussianNB().fit(X_train_kpca, y_train)\ncLoR_kpca = LogisticRegression(solver = 'liblinear', random_state = 0).fit(X_train_kpca, y_train)\ncSVM_kpca = SVC(kernel = 'rbf', random_state=0).fit(X_train_kpca, y_train)","a04fc8db":"model_lst_kpca = [cKNN_kpca, cDT_kpca, cRF_kpca, cLoR_kpca, cNB_kpca, cSVM_kpca]\nfor model in model_lst_kpca:\n    model_name = model.__class__.__name__\n    predict = model.predict(X_test_kpca)\n    R2CV = cross_val_score(model, X_test_kpca, y_test, cv = 10, verbose = False).mean()\n    error = -cross_val_score(model, X_test_kpca, y_test, cv = 10, scoring = 'neg_mean_squared_error',verbose = False).mean()\n    print(model_name + \"--> \")\n    print(\"*\" * 10)\n    print(accuracy_score(y_test, predict))\n    print(R2CV)\n    print(np.sqrt(error))\n    print('*' * 30)","98c7f4ab":"r = pd.DataFrame(columns=[\"MODELS\",\"R2CV\"])\nfor model in model_lst:\n    name = model.__class__.__name__\n    R2CV = cross_val_score(model,X_test,y_test,cv=10,verbose=False).mean()\n    result = pd.DataFrame([[name,R2CV*100]],columns=[\"MODELS\",\"R2CV\"])\n    r = r.append(result)\n    \nfigure = plt.figure(figsize=(20,8))   \nsns.barplot(x=\"R2CV\",y=\"MODELS\",data=r,color=\"k\")\nplt.xlabel(\"R2CV\")\nplt.ylabel(\"MODELS\")\nplt.xlim(0,100)\nplt.title(\"MODEL ACCURACY COMPARISON\")\nplt.show()","20a3a4fc":"#### X and y and split for models","3c120eff":"#### Feature Scaling","295e153d":"#### NORMALITY","67de0971":"### Prediction","d724757d":"# Conclusion","3029fe6a":"#### Boxplots","018af78d":"### **CORRELATION, HOMOGENEITY AND NORMALITY**","58dfae25":"### Barplots","413901cb":"#### Comparing models with extracted features","d3123e99":"#### PCA with Kernel","aee7619d":"### Exploratory Data Analysis","024d2b66":"#### Pearson Correlation","bd8983f8":"#### HOMOGENEITY","cd6525f8":"### Dataset Visual Analysis","5c189715":"#### Comparing the models","b5477f62":"**Context**\n\nA Tour & Travels Company Is Offering Travel Insurance Package To Their Customers.\nThe New Insurance Package Also Includes Covid Cover.\nThe Company Requires To Know The Which Customers Would Be Interested To Buy It Based On Its Database History.\n\nThe Insurance Was Offered To Some Of The Customers In 2019 And The Given Data Has Been Extracted From The Performance\/Sales Of The Package During That Period.\nThe Data Is Provided For Almost 2000 Of Its Previous Customers And You Are Required To Build An Intelligent Model That Can Predict If The Customer Will Be Interested To Buy The Travel Insurance Package Based On Certain Parameters Given Below.\n\n**Content**\n\n*Age*- Age Of The Customer\n\n*Employment Type*- The Sector In Which Customer Is Employed\n\n*GraduateOrNot*- Whether The Customer Is College Graduate Or Not\n\n*AnnualIncome*- The Yearly Income Of The Customer In Indian Rupees[Rounded To Nearest 50 Thousand Rupees]\n*FamilyMembers*- Number Of Members In Customer's Family\n\n*ChronicDisease*- Whether The Customer Suffers From Any Major Disease Or Conditions Like Diabetes\/High BP or Asthama,etc.\n\n*FrequentFlyer*- Derived Data Based On Customer's History Of Booking Air Tickets On Atleast 4 Different Instances In The Last 2 Years[2017-2019].\n\n*EverTravelledAbroad*- Has The Customer Ever Travelled To A Foreign Country[Not Necessarily Using The Company's Services]\n\n*TravelInsurance*- Did The Customer Buy Travel Insurance Package During Introductory Offering Held In The Year 2019.","e7f327b7":"#### Principal Component Analysis","f53e43f6":"#### Spearman Correlation","f2dac65b":"### Libraries","22bccd6c":"#### LinePlots","e51d116f":"#### Fitting","a7d88159":"**BEST SCORE :  KNN 0.8651911468812877, without scaling and feature extraction**.","3821d479":"## Improving the Model","e8a32bc9":"Drop index Unnamed","e9fe2e45":"#### Fitting","ec717a03":"### Feature Extraction","34069b10":"### Importing the dataset","f116353d":"#### Comparing models with extracted features\n"}}