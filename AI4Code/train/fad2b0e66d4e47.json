{"cell_type":{"e4b7a1fd":"code","9dbb4a58":"code","88d9b9ec":"code","ed876e22":"code","a4bf697b":"code","9b554b48":"code","3263eeb6":"code","ca9ef828":"code","701cb8c4":"code","51084434":"code","dbb7277a":"code","2e8863fa":"code","496ecd3c":"markdown","9f903174":"markdown","a605a0cb":"markdown","001fffd6":"markdown","d30373e8":"markdown","ad4d98fd":"markdown","af53529b":"markdown","243807ff":"markdown","1a8bfced":"markdown","a9a2d9c1":"markdown","83388223":"markdown","28181ab3":"markdown","507013f3":"markdown"},"source":{"e4b7a1fd":"import tensorflow as tf\nimport numpy","9dbb4a58":"mnist = tf.keras.datasets.mnist\n#splits the dataset into train and test data\n(x_train, y_train),(x_test,y_test) = mnist.load_data()\n#Convert the samples from integers to floating point numbers\nx_train, x_test = x_train\/255.0, x_test\/255.0","88d9b9ec":"model = tf.keras.models.Sequential([\n    tf.keras.layers.Flatten(input_shape = (28, 28)),\n    tf.keras.layers.Dense(128,activation='relu'),\n    tf.keras.layers.Dropout(0.2),\n    tf.keras.layers.Dense(10)\n                                     \n                                    ])","ed876e22":"predictions = model(x_train[:1]).numpy()\npredictions","a4bf697b":"tf.nn.softmax(predictions).numpy()","9b554b48":"loss_fn = tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True)\nloss_fn","3263eeb6":"loss_fn(y_train[:1], predictions).numpy()","ca9ef828":"model.compile(optimizer='adam',\n             loss = loss_fn,\n             metrics = ['accuracy'] \n             )","701cb8c4":"model.fit(x_train, y_train, epochs = 10)","51084434":"model.evaluate(x_test, y_test, verbose = 2)","dbb7277a":"probability_model = tf.keras.Sequential([\n  model,\n  tf.keras.layers.Softmax()\n])","2e8863fa":"probability_model(x_test[:20])","496ecd3c":"**The image classifier is now trained to ~98% accuracy on this dataset**","9f903174":"**Useful links** - https:\/\/www.tensorflow.org\/tutorials\/","a605a0cb":"**If you want your model to return a probability, you can wrap the trained model, and attach the softmax to it:**","001fffd6":"**Note: It is possible to bake this tf.nn.softmax in as the activation function for the last layer of the network. While this can make the model output more directly interpretable, this approach is discouraged as it's impossible to provide an exact and numerically stable loss calculation for all models when using a softmax output.**\n\nThe losses.SparseCategoricalCrossentropy loss takes a vector of logits and a True index and returns a scalar loss for each example.\n","d30373e8":"# Hi! I am Salman Ibne Eunus. This is the first time I am making a  basic TensorFlow tutorial in kaggle. I will be glad if it helps beginners in learning how to train a deep learning model and test the accuracy of the model using validation-set on test data. I am open to suggestions and feedbacks from expert kaggler on how I can improve my tutorials.Please Upvote my notebook.\n\nI would like to give thanks to [Tensorflow Tutorials](https:\/\/www.tensorflow.org\/tutorials\/) for helping me in preparing this.\n\nYou can also find my other notebooks [here](https:\/\/www.kaggle.com\/salmaneunus\/notebooks)","ad4d98fd":"**This loss is equal to the negative log probability of the true class: It is zero if the model is sure of the correct class.This untrained model gives probabilities close to random (1\/10 for each class), so the initial loss should be close to -tf.log(1\/10) ~= 2.3.**","af53529b":"# Import necessary libraries","243807ff":"# **Load and prepare and MNIST Dataset**\n****Convert the samples from integers to floating point numbers ","1a8bfced":"**The Model.evaluate method checks the models performance, usually on a \"Validation-set\" or \"Test-set\".**","a9a2d9c1":"**The tf.nn.softmax function converts these logits to \"probabilities\" for each class:**","83388223":"# Build the tf.keras.sequential model by stacking layers\n**Choose an Optimizer and loss function for training**","28181ab3":"**The Model.fit method adjusts the model parameters to minimize the loss:**","507013f3":"For each example the model returns a vector of [Logits](https:\/\/developers.google.com\/machine-learning\/glossary#logits) or \"log-odds\" scores, one for each class."}}