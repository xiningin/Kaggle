{"cell_type":{"d1988ac9":"code","9a7e9bbe":"code","09258ad1":"code","361e4374":"code","22c03d8b":"code","33b225ee":"code","2827ed88":"code","c2445ac7":"code","29b2cf05":"code","5b998f17":"code","68bd92e8":"code","e1f32dc0":"code","71149d15":"code","e954207a":"code","bd0246f5":"code","19b10061":"code","ff699334":"code","e92d5f20":"code","4efc680c":"code","c70e7c0a":"code","ea88d738":"code","cc11d292":"markdown","60a2a445":"markdown","02f27401":"markdown","d6aa9702":"markdown","43fab71b":"markdown","3921b124":"markdown","5cbb2060":"markdown","635c1090":"markdown","85dca510":"markdown","80333c22":"markdown","131896cf":"markdown","3c0f3826":"markdown","53774772":"markdown","d3c18d3f":"markdown","2f104a90":"markdown","ff778ba1":"markdown","5f87667f":"markdown","b9e6af80":"markdown","6ac5815e":"markdown","6291ba08":"markdown","17cfbede":"markdown","53bcf82b":"markdown","fca1e6dc":"markdown","a28bb394":"markdown","ebb3dde4":"markdown","faa664f7":"markdown"},"source":{"d1988ac9":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport folium\nfrom folium.plugins import HeatMap","9a7e9bbe":"# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","09258ad1":"train_df=pd.read_csv(\"\/kaggle\/input\/bigquery-geotab-intersection-congestion\/train.csv\")\ntest_df=pd.read_csv(\"\/kaggle\/input\/bigquery-geotab-intersection-congestion\/test.csv\")","361e4374":"#Creating Dummies for train Data\ndfen = pd.get_dummies(train_df[\"EntryHeading\"],prefix = 'en')\ndfex = pd.get_dummies(train_df[\"ExitHeading\"],prefix = 'ex')\ntrain_df = pd.concat([train_df,dfen],axis=1)\ntrain_df = pd.concat([train_df,dfex],axis=1)\n\n#Creating Dummies for test Data\ndfent = pd.get_dummies(test_df[\"EntryHeading\"],prefix = 'en')\ndfext = pd.get_dummies(test_df[\"ExitHeading\"],prefix = 'ex')\ntest_df = pd.concat([test_df,dfent],axis=1)\ntest_df = pd.concat([test_df,dfext],axis=1)\n","22c03d8b":"#Training Data\nX = train_df[[\"IntersectionId\",\"Hour\",\"Weekend\",\"Month\",'en_E',\n       'en_N', 'en_NE', 'en_NW', 'en_S', 'en_SE', 'en_SW', 'en_W', 'ex_E',\n       'ex_N', 'ex_NE', 'ex_NW', 'ex_S', 'ex_SE', 'ex_SW', 'ex_W']]\ny1 = train_df[\"TotalTimeStopped_p20\"]\ny2 = train_df[\"TotalTimeStopped_p50\"]\ny3 = train_df[\"TotalTimeStopped_p80\"]\ny4 = train_df[\"DistanceToFirstStop_p20\"]\ny5 = train_df[\"DistanceToFirstStop_p50\"]\ny6 = train_df[\"DistanceToFirstStop_p80\"]","33b225ee":"testX = test_df[[\"IntersectionId\",\"Hour\",\"Weekend\",\"Month\",'en_E','en_N', 'en_NE', 'en_NW', 'en_S', \n              'en_SE', 'en_SW', 'en_W', 'ex_E','ex_N', 'ex_NE', 'ex_NW', 'ex_S', 'ex_SE', 'ex_SW', 'ex_W']]","2827ed88":"import statsmodels.api as sm\nresults=sm.OLS(y1,X).fit()\nresults.summary()","c2445ac7":"model_lr1=sm.OLS(y1,X).fit()\npred_lr1=model_lr1.predict(testX)\nmodel_lr2=sm.OLS(y2,X).fit()\npred_lr2=model_lr2.predict(testX)\nmodel_lr3=sm.OLS(y3,X).fit()\npred_lr3=model_lr3.predict(testX)\nmodel_lr4=sm.OLS(y4,X).fit()\npred_lr4=model_lr4.predict(testX)\nmodel_lr5=sm.OLS(y5,X).fit()\npred_lr5=model_lr5.predict(testX)\nmodel_lr6=sm.OLS(y6,X).fit()\npred_lr6=model_lr6.predict(testX)","29b2cf05":"# Appending all predictions\nprediction_lr = []\nfor i in range(len(pred_lr1)):\n    for j in [pred_lr1,pred_lr2,pred_lr3,pred_lr4,pred_lr5,pred_lr6]:\n        prediction_lr.append(j[i])\nsubmission_lr = pd.read_csv(\"..\/input\/bigquery-geotab-intersection-congestion\/sample_submission.csv\")\nsubmission_lr[\"Target\"] = prediction_lr\nsubmission_lr.to_csv(\"Submission_lr.csv\",index = False)        ","5b998f17":"from sklearn.linear_model import Lasso\nfrom sklearn.kernel_ridge import KernelRidge\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import RobustScaler","68bd92e8":"#Build the model\nlasso = make_pipeline(RobustScaler(), Lasso(alpha =0.0007, random_state=1))","e1f32dc0":"lasso.fit(X,y1)\npredict_l1= lasso.predict(testX)\nlasso.fit(X,y2)\npredict_l2= lasso.predict(testX)\nlasso.fit(X,y3)\npredict_l3= lasso.predict(testX)\nlasso.fit(X,y4)\npredict_l4= lasso.predict(testX)\nlasso.fit(X,y5)\npredict_l5= lasso.predict(testX)\nlasso.fit(X,y6)\npredict_l6= lasso.predict(testX)","71149d15":"# Appending all predictions\nprediction_l = []\nfor i in range(len(predict_l1)):\n    for j in [predict_l1,predict_l2,predict_l3,predict_l4,predict_l5,predict_l6]:\n        prediction_l.append(j[i])\nsubmission_l = pd.read_csv(\"..\/input\/bigquery-geotab-intersection-congestion\/sample_submission.csv\")\nsubmission_l[\"Target\"] = prediction_l\nsubmission_l.to_csv(\"Submission_l.csv\",index = False)     ","e954207a":"from sklearn.linear_model import Ridge\nridge = make_pipeline(RobustScaler(), Ridge(alpha =20, random_state=42))","bd0246f5":"ridge.fit(X,y1)\npredict_r1= ridge.predict(testX)\nridge.fit(X,y2)\npredict_r2= ridge.predict(testX)\nridge.fit(X,y3)\npredict_r3= ridge.predict(testX)\nlasso.fit(X,y4)\npredict_r4= ridge.predict(testX)\nridge.fit(X,y5)\npredict_r5= ridge.predict(testX)\nridge.fit(X,y6)\npredict_r6= ridge.predict(testX)","19b10061":"# Appending all predictions\nprediction_r = []\nfor i in range(len(predict_r1)):\n    for j in [predict_r1,predict_r2,predict_r3,predict_r4,predict_r5,predict_r6]:\n        prediction_r.append(j[i])\nsubmission_r = pd.read_csv(\"..\/input\/bigquery-geotab-intersection-congestion\/sample_submission.csv\")\nsubmission_r[\"Target\"] = prediction_r\nsubmission_r.to_csv(\"Submission_r.csv\",index = False)     ","ff699334":"from catboost import CatBoostRegressor\ncb_model= CatBoostRegressor(iterations=700,\n                             learning_rate=0.02,\n                             depth=12,\n                             eval_metric='RMSE',\n                             random_seed = 23,\n                             bagging_temperature = 0.2,\n                             od_type='Iter',\n                             metric_period = 75,\n                             od_wait=100)\n","e92d5f20":"cb_model.fit(X, y1)\npred_CB1=cb_model.predict(testX)\ncb_model.fit(X, y2)\npred_CB2=cb_model.predict(testX)\ncb_model.fit(X, y3)\npred_CB3=cb_model.predict(testX)\ncb_model.fit(X, y4)\npred_CB4=cb_model.predict(testX)\ncb_model.fit(X, y5)\npred_CB5=cb_model.predict(testX)\ncb_model.fit(X, y6)\npred_CB6=cb_model.predict(testX)","4efc680c":"# Appending all predictions\nprediction_CB = []\nfor i in range(len(pred_CB1)):\n    for j in [pred_CB1,pred_CB2,pred_CB3,pred_CB4,pred_CB5,pred_CB6]:\n        prediction_CB.append(j[i])\n        \nsubmission_CB = pd.read_csv(\"..\/input\/bigquery-geotab-intersection-congestion\/sample_submission.csv\")\nsubmission_CB[\"Target\"] = prediction_CB\nsubmission_CB.to_csv(\"Submission_CB.csv\",index = False)","c70e7c0a":"from IPython.display import FileLink\nFileLink(r'Submission_GB.csv')","ea88d738":"submission_ensemble= pd.read_csv(\"..\/input\/bigquery-geotab-intersection-congestion\/sample_submission.csv\")\nsubmission_ensemble['Target'] =( 0.9* submission_CB[\"Target\"] +0.025* submission_l[\"Target\"]+0.025*submission_r[\"Target\"] +0.025*submission_lr[\"Target\"])\nsubmission_ensemble.to_csv(\"submission_ensemble.csv\", index = False)","cc11d292":"**Reading the Files**","60a2a445":"**Ridge Regression**","02f27401":"**Bagging** -that often considers homogeneous weak learners, learns them independently from each other in parallel and combines them following some kind of deterministic averaging process\n\n**Boosting** - that often considers homogeneous weak learners, learns them sequentially in a very adaptative way (a base model depends on the previous ones) and combines them following a deterministic strategy","d6aa9702":"![image.png](attachment:image.png)","43fab71b":"![image.png](attachment:image.png)","3921b124":"**Necessary Libraries**","5cbb2060":"**CatBoost Regressor**","635c1090":"The Regression model was able to give a rmse score of **80.210**","85dca510":"Except Catboost all the other algorithms give the same rmse score. Hence I'm giving higher weightage to catboost results","80333c22":"Lasso Regression gave rmse score of **80.210**","131896cf":"The dataset for this competition includes aggregate stopped vehicle information and intersection wait times. Your task is to predict congestion, based on an aggregate measure of stopping distance and waiting times, at intersections in 4 major US cities: Atlanta, Boston, Chicago & Philadelphia.","3c0f3826":"## Modelling","53774772":"I will be extensively using this methods to predict how our model works for the given case","d3c18d3f":"## About the Competition","2f104a90":"The Catboost Regressor was able to give a rmse score of **78.630**","ff778ba1":"**Key Take Aways**\n\n Compartive Study of Models and their performance","5f87667f":"**Kindly upvote if you like or find useful of the kernel**","b9e6af80":"## Ensembling","6ac5815e":"Okay Now we start predicting for all the target variables","6291ba08":"**Regression**","17cfbede":"**I'll be working extensively in Feature Engineering and Modelling part in coming days**\n\n","53bcf82b":"## Feature Engineering","fca1e6dc":"**Lasso Regression**","a28bb394":"## Advanced Regression Techinques","ebb3dde4":"![image.png](attachment:image.png)\n","faa664f7":"Ridge Regression was able to give rmse score of **80.485**"}}