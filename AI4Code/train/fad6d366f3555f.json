{"cell_type":{"50608c3e":"code","8f8f64b9":"code","b5e559a6":"code","9776e34b":"code","4150e431":"code","90f3b383":"code","7241ba67":"code","bc36df31":"code","4cf26e96":"code","80b8114a":"code","15e91919":"code","ef567b98":"code","efbe4087":"code","8bc2d82e":"code","9fb60c5c":"code","0b584edc":"code","650fa1dc":"code","5aaa5ab9":"code","4bdaa132":"code","22044543":"code","ef0241f7":"code","63de4167":"code","68f63b5f":"code","a683fa37":"code","1d1394b5":"code","6975d2f9":"code","b4912dab":"code","97fd8c87":"code","4e926e5a":"code","e31bd908":"code","902c4e77":"code","71a98a2d":"code","49fb9359":"code","8a65543c":"code","11e439b5":"code","3de002e2":"code","7bd14050":"code","59fb9b0a":"code","cc74f9da":"code","b842aeda":"code","3e01e993":"code","dcdfc2fc":"markdown","1bc05c7c":"markdown","e60a15b5":"markdown","17b4f7c6":"markdown","fd56f19f":"markdown","1917be6d":"markdown","6540bd10":"markdown","f3a0ad17":"markdown","e7ee8295":"markdown","d08caf80":"markdown"},"source":{"50608c3e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8f8f64b9":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nfrom sklearn import preprocessing \nfrom category_encoders import *\nfrom sklearn.preprocessing import LabelEncoder\n%matplotlib inline\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import datasets, linear_model, metrics\nfrom sklearn.metrics import  confusion_matrix\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import accuracy_score, plot_confusion_matrix","b5e559a6":"df = pd.read_csv('..\/input\/others\/Movie_regression.xls')\ndf","9776e34b":"df.head()","4150e431":"df.tail()","90f3b383":"df.shape","7241ba67":"df.size","bc36df31":"df.dtypes","4cf26e96":"df.columns","80b8114a":"df.info()","15e91919":"df.describe()","ef567b98":"df.duplicated().sum()","efbe4087":"df.isnull().sum()","8bc2d82e":"df.corr()","9fb60c5c":"df.skew()","0b584edc":"df['3D_available'].value_counts()","650fa1dc":"sns.countplot(x = '3D_available',data=df)\nplt.show()","5aaa5ab9":"fig = px.histogram(df, 'Collection',             \n                   color=\"3D_available\",\n                   title=\"<b>Average Collection<\/b>\")\n\nfig.add_vline(x=df['Collection'].mean(), line_width=2, line_dash=\"dash\", line_color=\"black\")\n\nfig.show()\n\n#For collections morethan 50k majority of the collection came for 3D movies","4bdaa132":"df['Genre'].value_counts()","22044543":"sns.countplot(x = 'Genre',data=df)\nplt.show()","ef0241f7":"fig = px.histogram(df, 'Collection',             \n                   color=\"Genre\",\n                   title=\"<b>Average Collection<\/b>\")\n\nfig.add_vline(x=df['Collection'].mean(), line_width=2, line_dash=\"dash\", line_color=\"black\")\n\nfig.show()\n","63de4167":"plt.figure(figsize=(6,8))\nx = df.drop(['3D_available','Genre'],axis = 1)\nfor i in x.columns:\n    sns.histplot(x[i],kde = True)\n    plt.show()","68f63b5f":"plt.figure(figsize=(6,8))\nx = df.drop(['3D_available','Genre'],axis = 1)\nfor i in x.columns:\n    sns.scatterplot(x = 'Collection',y = i,data = df,color = 'Red')\n    plt.show()","a683fa37":"plt.figure(figsize=(16,9))\nx = df.drop(['3D_available','Genre'],axis = 1)\nax = sns.heatmap(x.corr(),annot = True,cmap = 'viridis')\nplt.show()","1d1394b5":"sns.pairplot(df)","6975d2f9":"x = df.drop(['3D_available','Genre'],axis = 1)\nfor i in x.columns:\n    sns.boxplot(x = i, data = x,color = 'yellowgreen')\n    plt.xlabel(i)\n    plt.show()","b4912dab":"x = df.drop(['3D_available','Genre'],axis = 1)\nfor i in x.columns:\n    sns.violinplot(x = i, data = x,color = 'yellowgreen')\n    plt.xlabel(i)\n    plt.show()","97fd8c87":"def count_outliers(data,col):\n        q1 = data[col].quantile(0.25,interpolation='nearest')\n        q2 = data[col].quantile(0.5,interpolation='nearest')\n        q3 = data[col].quantile(0.75,interpolation='nearest')\n        q4 = data[col].quantile(1,interpolation='nearest')\n        IQR = q3 -q1\n        global LLP\n        global ULP\n        LLP = q1 - 1.5*IQR\n        ULP = q3 + 1.5*IQR\n        if data[col].min() > LLP and data[col].max() < ULP:\n            print(\"No outliers in\",i)\n        else:\n            print(\"There are outliers in\",i)\n            x = data[data[col]<LLP][col].size\n            y = data[data[col]>ULP][col].size\n            a.append(i)\n            print('Count of outliers are:',x+y)\nglobal a\na = []\nfor i in x.columns:\n    count_outliers(x,i)","4e926e5a":"df.isnull().sum()","e31bd908":"# Since there are outliers in time_taken column we should replace null with median\ndf['Time_taken'].fillna(df['Time_taken'].median(),inplace=True)","902c4e77":"df.isnull().sum()","71a98a2d":"label_2=pd.get_dummies(data=df,columns=['Genre','3D_available'],drop_first=True)\nlabel_2","49fb9359":"X = label_2.drop(['Collection'],axis = 1)\nY = label_2['Collection']\nX_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size = 0.3,random_state=44)","8a65543c":"reg = linear_model.LinearRegression()\nreg.fit(X_train, Y_train)","11e439b5":"#Regression Coeeficient\nreg.coef_","3de002e2":"pred = reg.predict(X_test)\npred","7bd14050":"plt.scatter(Y_test,pred)\nplt.xlabel('Y Test (True Values)')\nplt.ylabel('Predicted values')\nplt.show()","59fb9b0a":"print('MAE',metrics.mean_absolute_error(Y_test,pred))\nprint('MSE',metrics.mean_squared_error(Y_test,pred))\nprint('RMSE',np.sqrt(metrics.mean_squared_error(Y_test,pred)))","cc74f9da":"#r2 score\nmetrics.explained_variance_score(Y_test,pred)","b842aeda":"# Curve is distributed normally so model is ok\nsns.displot(Y_test-pred,bins = 50,kde = True)","3e01e993":"# This says that for 1 unit increase in collection marketing expense will decrease by -12.442049 units\ncdf = pd.DataFrame(reg.coef_,X.columns,columns = ['coef'])\ncdf","dcdfc2fc":"# Data Visualisation","1bc05c7c":"## Encoding","e60a15b5":"# Exploratory Data Analysis","17b4f7c6":"# Prediction Using Linear Regression","fd56f19f":"# Loading Datasets","1917be6d":"# Count of outliers","6540bd10":"# Data Preprocessing","f3a0ad17":"# Feature Selection","e7ee8295":"# Importing Libraries","d08caf80":"## Treating with Null values"}}