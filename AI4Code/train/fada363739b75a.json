{"cell_type":{"d3ab3bcb":"code","c1ecffff":"code","7311de76":"code","eccbfbce":"code","cf48796f":"code","ac20fd42":"code","6321d36c":"code","13cb95da":"code","1011b85b":"code","189b5c8e":"code","5a2d2b11":"code","5f0625e5":"code","a59c431d":"code","dc69a185":"code","ece4a896":"code","b0b5067e":"code","e0f2f2c1":"code","502c39dc":"code","3c146810":"code","936c4393":"code","aeb0aded":"code","c6446742":"markdown","868c7aa9":"markdown","be1fab67":"markdown","25c811d8":"markdown","a216f120":"markdown","f482e81e":"markdown","297ccc72":"markdown","815047c2":"markdown","b257bc2a":"markdown","b533f1ff":"markdown","68a336af":"markdown","c589dd30":"markdown","c2ed5b2d":"markdown","d708fdb6":"markdown","26cb017d":"markdown"},"source":{"d3ab3bcb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c1ecffff":"# Importng Required Libraries\nimport tensorflow as tf\nfrom tensorflow import keras\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom keras.datasets import mnist","7311de76":"(X_train, y_train), (X_test, y_test) = mnist.load_data()\nX_train = np.vstack((X_train, X_test))\ny_train = np.concatenate([y_train, y_test])","eccbfbce":"train = pd.read_csv(r'\/kaggle\/input\/digit-recognizer\/train.csv').values\ntest = pd.read_csv(r'\/kaggle\/input\/digit-recognizer\/test.csv').values.astype('float32')","cf48796f":"y_val = train[:,0].astype('int32')\nX_val = train[:,1:].astype('float32')","ac20fd42":"sns.set_style('whitegrid')\nplt.figure(figsize=(7,5))\nsns.countplot(y_train)","6321d36c":"X_train = X_train.astype('float32')\/255\nX_val = X_val.astype('float32')\/255\ntest = test.astype('float32')\/255 ","13cb95da":"X_train = X_train.reshape(-1,28,28,1)\nX_val = X_val.reshape(-1,28,28,1)\ntest=test.reshape(-1,28,28,1)","1011b85b":"print(X_train.shape, y_train.shape)","189b5c8e":"print(X_val.shape, y_val.shape)","5a2d2b11":"y_train = tf.keras.utils.to_categorical(y_train, num_classes=10)\ny_val = tf.keras.utils.to_categorical(y_val, num_classes=10)","5f0625e5":"plt.imshow(X_train[0][:,:,0])","a59c431d":"from keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPooling2D\n\n# define the model\nmodel = Sequential()\nmodel.add(Conv2D(filters=64, kernel_size=3, padding='same', activation='relu', input_shape=(28,28,1)))\nmodel.add(Conv2D(filters=64, kernel_size=3, padding='same', activation='relu'))\nmodel.add(Conv2D(filters=128, kernel_size=3, padding='same', activation='relu'))\nmodel.add(MaxPooling2D(pool_size=2))\nmodel.add(Conv2D(filters=128, kernel_size=3, padding='same', activation='relu'))\nmodel.add(Conv2D(filters=192, kernel_size=3, padding='same', activation='relu'))\nmodel.add(MaxPooling2D(pool_size=2))\nmodel.add(Conv2D(filters=192, kernel_size=5, padding='same', activation='relu'))\nmodel.add(MaxPooling2D(pool_size=2, padding='same'))\nmodel.add(Flatten())\nmodel.add(Dense(256, activation='relu'))\nmodel.add(Dense(10, activation='softmax'))\n# summarize the model\nmodel.summary()","dc69a185":"optimizer='adam'","ece4a896":"model.compile(optimizer=optimizer, loss='categorical_crossentropy', metrics=['acc'])","b0b5067e":"reduce_lr = tf.keras.callbacks.ReduceLROnPlateau(monitor='loss', factor=0.3, verbose=1,\n                              patience=2, min_lr=0.00000001)","e0f2f2c1":"history = model.fit(X_train,y_train, batch_size=100,\n                              epochs = 25, validation_data = (X_val,y_val),\n                              verbose = 1, callbacks=[reduce_lr], shuffle = True)","502c39dc":"plt.figure(figsize=(15,7))\nax1 = plt.subplot(1,2,1)\nax1.plot(history.history['loss'], color='b', label='Training Loss') \nax1.plot(history.history['val_loss'], color='r', label = 'Validation Loss',axes=ax1)\nlegend = ax1.legend(loc='best', shadow=True)\nax2 = plt.subplot(1,2,2)\nax2.plot(history.history['acc'], color='b', label='Training Accuracy') \nax2.plot(history.history['val_acc'], color='r', label = 'Validation Accuracy')\nlegend = ax2.legend(loc='best', shadow=True)","3c146810":"y_pred = model.predict(X_val)\ny_pred_classes = np.argmax(y_pred, axis=1)\ny_true = np.argmax(y_val, axis=1)\nimport scikitplot as skplt\nskplt.metrics.plot_confusion_matrix(y_true,y_pred_classes,title='Confusion Matrix for Train Data')","936c4393":"results = model.predict(test)\nresults = np.argmax(results, axis=1)\nresults = pd.Series(results, name='Label')","aeb0aded":"submission = pd.concat([pd.Series(range(1,28001), name='ImageId'), results], axis=1)\nsubmission.to_csv(r'Digit_Recognizer_MNIST', index=False)","c6446742":"# Please Upvote if you like it","868c7aa9":"### Reshape","be1fab67":"### Normalization","25c811d8":"# Reason why people are getting 100% accuracy ","a216f120":"**Here is the secret behind how people are getting 100% accuracy on Digit Recognizer.\nActually they are using the external MNIST dataset fron Keras Datasets of which the data provided in this competiton is a subset of that data.\nWhen we load both the training and test data of the MNIST data set for training as it can be seen below in my code, the algorithm learns all the input pixels and the labels assosiated with that. As the test data of this dataset is also a subset of that MNIST dataset it given 100% accuracy results.\nBut practically without this hack this isn't possible as the training set have the handwritten digits by office workers and the testing set have the handwritten by the high school students.\nAs the training and test sets are not from the same sample of data, this isn't possible to get 100% accuracy with any of the model.**","f482e81e":"### Using External Data From Keras Datasets to use that data as training data","297ccc72":"## Data Prepration","815047c2":"### Confusion Matrix","b257bc2a":"### Evaluating the Model","b533f1ff":"### Defining the model","68a336af":"### Predicting results on test data","c589dd30":"### Initializing Optimizer","c2ed5b2d":"### Label Encoding","d708fdb6":"### Load Data","26cb017d":"## CNN"}}