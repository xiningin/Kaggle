{"cell_type":{"8eb32827":"code","8bb9e7e4":"code","a7a02792":"code","94632a00":"code","ef1862eb":"code","d9f93bd5":"code","e18b66c8":"code","e47714dc":"code","0bfa487d":"code","97dd5a02":"code","81d23a0e":"code","1def2ed5":"code","eb478dd1":"code","8fca40ef":"code","74792f19":"code","e7b688d3":"code","06164375":"code","6cf379b1":"code","ec44f7ec":"code","a5ad041d":"code","6812c252":"code","6448c012":"code","1dde0fc6":"code","b9ea72d7":"code","2a389a8b":"code","b1b9a7c2":"code","1a611679":"code","d4d8e1c9":"code","6684fd64":"code","e5e227dc":"code","2ff8cde3":"code","04571028":"code","32a7b958":"code","4772dd34":"code","fb1ff903":"code","e3b19b5a":"code","ad3b5e3c":"code","c1ca3ce7":"markdown","6450852b":"markdown","ddf68c84":"markdown","0ec2a3da":"markdown","bc734596":"markdown","bb938fa6":"markdown","8cbd0fea":"markdown","f07359aa":"markdown","7700c3ee":"markdown","90b8e34f":"markdown","d47b1d08":"markdown","54a7ef44":"markdown","58dcd3f4":"markdown","5446598c":"markdown","99f45192":"markdown","b565b40b":"markdown","21e5d1ff":"markdown","b1ee611e":"markdown","8a7d92be":"markdown","85dd397b":"markdown","0977e993":"markdown","47a52db9":"markdown"},"source":{"8eb32827":"import warnings\nwarnings.filterwarnings(action='ignore')\n\nimport os\nimport glob\nfrom tqdm import tqdm\n\nimport pandas as pd\nimport numpy as np\n\n\nimport seaborn as sns\nimport matplotlib as mpl\n%matplotlib inline\nimport plotly.express as px\nimport plotly.graph_objects as gr_ob\nfrom matplotlib import pyplot as plt\n\nfrom sklearn.metrics import r2_score\n\ntrain = pd.read_csv('..\/input\/optiver-realized-volatility-prediction\/train.csv')\nprint(\"train shape:\",train.shape)\ntrain.head(3)","8bb9e7e4":"train.groupby(['stock_id']).size()","a7a02792":"plt.figure(figsize=(10, 5))\nsns.histplot(train['target'], label = 'Target distribution')","94632a00":"plt.figure(figsize=(10, 5))\nsns.distplot(train['time_id'], label = 'Time_id distribution')","ef1862eb":"plt.figure(figsize=(10, 5))\nsns.scatterplot(data=train, x=\"time_id\", y=\"target\")","d9f93bd5":"stock_id = '1'\ntime_id=5\n\nbook = pd.read_parquet(f'..\/input\/optiver-realized-volatility-prediction\/book_train.parquet\/stock_id={stock_id}')\ntrade =  pd.read_parquet(f'..\/input\/optiver-realized-volatility-prediction\/trade_train.parquet\/stock_id={stock_id}')\nbook = book[book['time_id']==time_id]\nbook.loc[:,'stock_id'] = stock_id\n\ntrade = trade[trade['time_id']==time_id]\ntrade.loc[:,'stock_id'] = stock_id\n","e18b66c8":"book.head(5)","e47714dc":"book.hist(figsize=(20,12))\nplt.show()","0bfa487d":"sns.pairplot(book[['seconds_in_bucket','ask_price1','ask_price2','ask_size1','ask_size2']],  diag_kind=\"hist\",height=3)","97dd5a02":"sns.pairplot(book[['seconds_in_bucket','bid_price1','bid_price2','bid_size1','bid_size2']],  diag_kind=\"hist\",height=3)","81d23a0e":"plt.figure(figsize = (10,8)) \nsns.lineplot(x = book[\"seconds_in_bucket\"], y =book[\"ask_price1\"], data = book)\nsns.lineplot(x = book[\"seconds_in_bucket\"], y =book[\"ask_price2\"], data = book)\nplt.legend(labels=['ask_price1', 'ask_price2'])\nplt.show()","1def2ed5":"plt.figure(figsize = (10,8)) \nsns.lineplot(x = book[\"seconds_in_bucket\"], y =book[\"bid_price1\"], data = book)\nsns.lineplot(x = book[\"seconds_in_bucket\"], y =book[\"bid_price2\"], data = book)\nplt.legend(labels=['bid_price1', 'bid_price2'])\nplt.show()\n","eb478dd1":"plt.figure(figsize = (10,8)) \nsns.lineplot(x = book[\"seconds_in_bucket\"], y =book[\"ask_size1\"], data = book)\nsns.lineplot(x = book[\"seconds_in_bucket\"], y =book[\"ask_size2\"], data = book)\nplt.legend(labels=['ask_size1', 'ask_size2'])\nplt.show()","8fca40ef":"plt.figure(figsize = (10,8)) \nsns.lineplot(x = book[\"seconds_in_bucket\"], y =book[\"bid_size1\"], data = book)\nsns.lineplot(x = book[\"seconds_in_bucket\"], y =book[\"bid_size2\"], data = book)\nplt.legend(labels=['bid_size1', 'bid_size2'])\nplt.show()","74792f19":"trade.head(5)","e7b688d3":"trade.hist(figsize=(20,12))\nplt.show()","06164375":"sns.pairplot(trade[['seconds_in_bucket','price','size']],  diag_kind=\"hist\",height=3)","6cf379b1":"plt.figure(figsize = (10,8)) \nsns.lineplot(x = trade[\"seconds_in_bucket\"], y =trade[\"size\"], data = trade)\nplt.legend(labels=['size'])\nplt.show()","ec44f7ec":"plt.figure(figsize = (10,8)) \nsns.lineplot(x = trade[\"seconds_in_bucket\"], y =trade[\"price\"], data = trade)\nplt.legend(labels=['price'])\nplt.show()","a5ad041d":"book['wap'] = (book['bid_price1'] * book['ask_size1'] +book['ask_price1'] * book['bid_size1']) \/ (book['bid_size1']+ book['ask_size1'])\nbook.head(2)","6812c252":"plt.figure(figsize = (10,8)) \nsns.lineplot(x = book[\"seconds_in_bucket\"], y =book[\"wap\"], data = book)\nplt.legend(labels=['wap'])\nplt.title(\"WAP of stock_id_1, time_id_5\")\nplt.show()","6448c012":"def log_return(list_stock_prices):\n    return np.log(list_stock_prices).diff() ","1dde0fc6":"book.loc[:,'log_return'] = log_return(book['wap'])\nbook = book[~book['log_return'].isnull()]\nbook.head(2)","b9ea72d7":"plt.figure(figsize = (10,8)) \nsns.lineplot(x = book[\"seconds_in_bucket\"], y =book[\"log_return\"], data = book)\nplt.legend(labels=['log_return'])\nplt.title(\"log_return of stock_id_1, time_id_5\")\nplt.show()","2a389a8b":"def realized_volatility(series_log_return):\n    return np.sqrt(np.sum(series_log_return**2))\nrealized_vol = realized_volatility(book['log_return'])\nprint(f'Realized volatility for stock_id 1 on time_id 5 is {realized_vol}')","b1b9a7c2":"def log_return(list_stock_prices):\n    return np.log(list_stock_prices).diff() \n\ndef realized_volatility(series_log_return):\n    return np.sqrt(np.sum(series_log_return**2))\n\n\ndef rmspe(y_true, y_pred):\n    return  (np.sqrt(np.mean(np.square((y_true - y_pred) \/ y_true))))\n\ndef calculate_wap(df):\n    A = df['bid_price1'] * df['ask_size1'] + df['ask_price1'] * df['bid_size1']\n    B = df['bid_price2'] * df['ask_size2'] + df['ask_price2'] * df['bid_size2']\n    C = df['bid_size1'] + df['ask_size1'] + df['bid_size2']+ df['ask_size2']\n    x = (A + B)\/ C\n    \n    return x\n\ndef realized_volatility_per_time_id(file_path, prediction_column_name):\n    df_book = pd.read_parquet(file_path)\n    df_book['wap'] = calculate_wap(df_book)\n    df_book['log_return'] = df_book.groupby(['time_id'])['wap'].apply(log_return)\n    df_book = df_book[~df_book['log_return'].isnull()]\n    df_realized_vol_per_stock =  pd.DataFrame(df_book.groupby(['time_id'])['log_return'].agg(realized_volatility)).reset_index()\n    df_realized_vol_per_stock = df_realized_vol_per_stock.rename(columns = {'log_return':prediction_column_name})\n    stock_id = file_path.split('=')[1]\n    df_realized_vol_per_stock['row_id'] = df_realized_vol_per_stock['time_id'].apply(lambda x:f'{stock_id}-{x}')\n    return df_realized_vol_per_stock[['row_id',prediction_column_name]]","1a611679":"def past_realized_volatility_per_stock(list_file,prediction_column_name):\n    df_past_realized = pd.DataFrame()\n    for file in tqdm(list_file):\n        df_past_realized = pd.concat([df_past_realized,\n                              realized_volatility_per_time_id(file,prediction_column_name)])\n    return df_past_realized","d4d8e1c9":"list_train = glob.glob('..\/input\/optiver-realized-volatility-prediction\/book_train.parquet\/*')","6684fd64":"list_train=list_train[0:5]","e5e227dc":"df_past_realized_train = past_realized_volatility_per_stock(list_file=list_train,prediction_column_name='pred')","2ff8cde3":"df_past_realized_train","04571028":"train","32a7b958":"train['row_id'] = train['stock_id'].astype(str) + '-' + train['time_id'].astype(str)\ntrain = train[['row_id','target']]\ndf_joined = train.merge(df_past_realized_train[['row_id','pred']],on = ['row_id'], how = 'left')","4772dd34":"df_joined","fb1ff903":"df_joined = df_joined[~df_joined['pred'].isnull()]","e3b19b5a":"R2 = round(r2_score(y_true = df_joined['target'], y_pred = df_joined['pred']),3)\nRMSPE = round(rmspe(y_true = df_joined['target'], y_pred = df_joined['pred']),3)\nprint(f'Performance of the naive prediction: R2 score: {R2}, RMSPE: {RMSPE}')","ad3b5e3c":"list_order_book_file_test = glob.glob('..\/input\/optiver-realized-volatility-prediction\/book_test.parquet\/*')\n\ndf_naive_pred_test = df_past_realized_train = past_realized_volatility_per_stock(list_file=list_order_book_file_test,\n                                                           prediction_column_name='target')\ndf_naive_pred_test.to_csv('submission.csv',index = False)","c1ca3ce7":"* **stock_id -** Same as above.\n* **time_id-** Same as above.\n* **seconds_in_bucket** - Same as above. Note that since trade and book data are taken from the same time window and trade data is more sparse in general, this field is not necessarily starting from 0.\n* **price** - The average price of executed transactions happening in one second. Prices have been normalized and the average has been weighted by the number of shares traded in each transaction.\n* **size** - The sum number of shares traded.\n* **order_count** - The number of unique trade orders taking place.","6450852b":"# Optiver Volatility Prediction-EDA","ddf68c84":"![download.jpg](attachment:36d565a0-0b69-407d-899d-b4940bee7c28.jpg)","0ec2a3da":"* When we trade options, a valuable input to our models is the standard deviation of the stock log returns. The standard deviation will be different for log returns computed over longer or shorter intervals, for this reason it is usually normalized to a 1-year period and the annualized standard deviation is called volatility.\n* In this competition, you will be given 10 minutes of book data and we ask you to predict what the volatility will be in the following 10 minutes. Volatility will be measured as follows:\n* We will compute the log returns over all consecutive book updates and we define the realized volatility,  \u03c3 , as the squared root of the sum of squared log returns.\n","bc734596":"* **trade_[train\/test].parquet** A parquet file partitioned by stock_id. Contains data on trades that actually executed. Usually, in the market, there are more passive buy\/sell intention updates (book updates) than actual trades, therefore one may expect this file to be more sparse than the order book.","bb938fa6":"#### The realized vol of stock 1 in this feature bucket, will be:","8cbd0fea":"# book","f07359aa":"![0.jpg](attachment:941f2848-ff5a-442b-ac25-8f746efcffae.jpg)\n#### For more details about ORDER BOOK [here](https:\/\/www.kaggle.com\/jiashenliu\/introduction-to-financial-concepts-and-data)","7700c3ee":"# Reading the data for stock id=1","90b8e34f":"![00.JPG](attachment:f1c098ca-886e-40ce-ab8d-b62356e312f4.JPG)","d47b1d08":"* **stock_id** - ID code for the stock. Not all stock IDs exist in every time bucket.\n* **time_id** - ID code for the time bucket. Time IDs are not necessarily sequential but are consistent across all stocks.\n* **target** - The realized volatility computed over the 10 minute window following the feature data under the same stock\/time_id.","54a7ef44":"# Weighted Averaged Price WAP\n* As realized volatility is a statistical measure of price changes on a given stock, to calculate the price change we first need to have a stock valuation at the fixed interval (1 second). We will use weighted averaged price, or WAP, of the order book data we provided.\n\n* The formula of WAP can be written as below, which takes the top level price and volume information into account:\n![Capture.JPG](attachment:012e597e-55e7-49d3-aacd-08bc3dab444c.JPG)","58dcd3f4":"## References\n1. https:\/\/www.kaggle.com\/jiashenliu\/introduction-to-financial-concepts-and-data\n1. https:\/\/www.kaggle.com\/sohommajumder21\/optiver-competition-eda-predictions\n1. https:\/\/www.kaggle.com\/piantic\/starter-optiver-quick-eda-automl-wip\n1. https:\/\/www.kaggle.com\/sohommajumder21\/optiver-competition-eda-predictions\n1. https:\/\/www.kaggle.com\/konradb\/we-need-to-go-deeper-and-validate?scriptVersionId=66939690\n1. https:\/\/www.kaggle.com\/lucasmorin\/realised-vol-weighted-regression-baseline\n1. https:\/\/www.kaggle.com\/shahmahdihasan\/overly-simplified-ols-prediction?scriptVersionId=67473702","5446598c":"### Please if this kernel is useful, <font color='red'>please upvote !!<\/font>","99f45192":"# Function","b565b40b":"* **seconds_in_bucket** - Number of seconds from the start of the bucket, always starting from 0.\n* **bid_price[1\/2]** - Normalized prices of the most\/second most competitive buy level.\n* **ask_price[1\/2]** - Normalized prices of the most\/second most competitive sell level.\n* **bid_size[1\/2]** - The number of shares on the most\/second most competitive buy level.\n* **ask_size[1\/2]** - The number of shares on the most\/second most competitive sell level.","21e5d1ff":"# Order Book","b1ee611e":"![header.png](attachment:b0c516a3-53a2-4475-acf1-040447285abd.png)","8a7d92be":"# Realized volatility","85dd397b":"# Log returns\n##### How can we compare the price of a stock between yesterday and today?\nTo compute the log return, we can simply take the logarithm of the ratio between two consecutive WAP.\nThe first row will have an empty return as the previous book update is unknown, therefore the empty return data point will be dropped.","0977e993":"# Importing libraries","47a52db9":"# Trade"}}