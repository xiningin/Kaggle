{"cell_type":{"7be194e2":"code","113ebd92":"code","59fea390":"code","7153061a":"code","75485441":"code","b6181c6f":"code","41ddc1c3":"code","2f31cd8c":"code","6606340d":"code","61da1792":"code","4ae7d0ca":"code","56aabff2":"code","e8c6a710":"code","67c7e2a0":"code","2624fa9a":"code","02e04cff":"code","b49fce1a":"code","1f3381df":"code","0008891c":"code","9c91b96b":"code","68d62f17":"code","bfdd8963":"code","4ea2f47a":"code","66a027be":"code","e8829eed":"code","08562125":"code","85a92328":"code","7db29e83":"code","03e71dfa":"code","48131f25":"code","234803cc":"code","38c5eb43":"code","f33f9c70":"code","ce977e73":"code","1fe3a721":"code","44b92b34":"code","eaae93da":"code","33e73f53":"code","4c7d4edd":"code","cdbaf375":"code","d45ffe5a":"code","d4f53062":"code","1177572e":"code","b403f607":"code","91bce53f":"code","e2d2359c":"code","075a3fce":"code","27470010":"code","e36ad721":"code","f531280f":"code","cfe93c06":"code","e16b8d51":"code","5da1d3d6":"code","7fb6b507":"code","2adcd3b1":"code","f742fb17":"code","0e7d633e":"markdown","7d4f4e5b":"markdown","611538f7":"markdown","4ce54f65":"markdown","f3675bc1":"markdown","ff7bc546":"markdown","b8aa18c2":"markdown","195755f6":"markdown","4d5e4863":"markdown","1098661f":"markdown","8cd79217":"markdown","3baa14a8":"markdown","f5428e6e":"markdown","099cbfe3":"markdown","fe1b4a89":"markdown","0e155db9":"markdown","4fe3619b":"markdown"},"source":{"7be194e2":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","113ebd92":"data = pd.read_csv(\"..\/input\/bank-marketing\/bank-additional-full.csv\",delimiter=';')\nembedding_path = \"..\/input\/fasttext-crawl-300d-2m\/crawl-300d-2M.vec\"\ndata.head()","59fea390":"data.isnull().sum().sum()","7153061a":"data['job'].unique()","75485441":"data['marital'].unique()","b6181c6f":"data['education'].unique()","41ddc1c3":"print(\"Default \\n\",data['default'].unique())\nprint(\"Loan \\n\",data['loan'].unique())\nprint(\"Housing \\n\",data['housing'].unique())\nprint(\"contact \\n\",data['contact'].unique())\nprint(\"poutcome \\n\",data['poutcome'].unique())\nprint(\"day_of_week \\n\",data['day_of_week'].unique())\nprint(\"month \\n\",data['month'].unique())","2f31cd8c":"# What kind of 'marital clients' this bank have, if you cross marital with default, loan or housing, there is no relation\nimport seaborn as sns\nfig, (ax1, ax2) = plt.subplots(nrows=1, ncols=2,figsize=(60,15))\n\n##Marital Count Status\nsns.set(font_scale=5)\nsns.countplot(x = 'marital', data=data,ax=ax1, order=['married', 'single', 'divorced', 'unknown'])\nax1.set_title('Marital count status', fontsize=35)\nax1.set_xlabel('Marital', fontsize=35)\nax1.set_ylabel('Count', fontsize=35)\nax1.tick_params(labelsize=35)\n\n###Education Count Distribution\nsns.set(font_scale=5)\nsns.countplot(x = 'education', data = data, ax=ax2,order=['basic.4y', 'high.school', 'basic.6y', 'basic.9y',\n       'professional.course', 'unknown', 'university.degree',\n       'illiterate'])\nax2.set_title('Education Count Distribution', fontsize=35)\nax2.set_xlabel('Education', fontsize=35)\nax2.set_ylabel('Count', fontsize=35)\n\nax2.tick_params(labelsize=35)\nsns.despine()","6606340d":"# Default, has credit in default ?\nfig, (ax1, ax2, ax3) = plt.subplots(nrows = 1, ncols = 3, figsize = (20,8))\nsns.countplot(x = 'default', data = data, ax = ax1, order = ['no', 'unknown', 'yes'])\nax1.set_title('Default', fontsize=15)\nax1.set_xlabel('')\nax1.set_ylabel('Count', fontsize=15)\nax1.tick_params(labelsize=15)\n\n# Housing, has housing loan ?\nsns.countplot(x = 'housing', data = data, ax = ax2, order = ['no', 'unknown', 'yes'])\nax2.set_title('Housing', fontsize=15)\nax2.set_xlabel('')\nax2.set_ylabel('Count', fontsize=15)\nax2.tick_params(labelsize=15)\n\n# Loan, has personal loan ?           \nsns.countplot(x = 'loan', data = data, ax = ax3, order = ['no', 'unknown', 'yes'])\nax3.set_title('Loan', fontsize=15)\nax3.set_xlabel('')\nax3.set_ylabel('Count', fontsize=15)\nax3.tick_params(labelsize=15)\n\n\nplt.subplots_adjust(wspace=0.25)","61da1792":"\n##\nfig, (ax1, ax2) = plt.subplots(nrows = 1, ncols = 2, figsize = (15,5))\n##Count plot for contact variable\nsns.countplot(x = 'contact', data = data, ax = ax1, order = ['telephone','cellular'])\nax1.set_title('contact', fontsize=15)\nax1.set_xlabel('')\nax1.set_ylabel('Count', fontsize=15)\nax1.tick_params(labelsize=15)\n\n##Count plot for Marital variable\nsns.countplot(x = 'marital', data = data, ax = ax2, order = ['married', 'single', 'divorced', 'unknown'])\nax2.set_title('marital', fontsize=15)\nax2.set_xlabel('')\nax2.set_ylabel('Count', fontsize=15)\nax2.tick_params(labelsize=15)\n\nplt.subplots_adjust(wspace=0.5)","4ae7d0ca":"sns.set(font_scale=1.5)\nsns.lmplot( x=\"age\", y=\"cons.conf.idx\", data=data, fit_reg=False, hue='emp.var.rate', legend=False)","56aabff2":"sns.set(font_scale=1.5)\nsns.jointplot(x='campaign',y='age',data=data)","e8c6a710":"##Correlation plot\nplt.subplots(figsize=(25,25))\nsns.set(font_scale=2)\nsns.heatmap(data.corr(), annot=True)\nplt.show()","67c7e2a0":"data.info()","2624fa9a":"##Converting categorical data into numerical data by using Label Encoder.\nstringcols = ('job','marital','education', 'default','housing','loan','month', 'day_of_week', 'contact','poutcome','emp.var.rate','cons.conf.idx','euribor3m','nr.employed','y')\nfrom sklearn.preprocessing import LabelEncoder","02e04cff":"for c in stringcols:\n    lbl = LabelEncoder() \n    lbl.fit(list(data[c].values)) \n    data[c] = lbl.transform(list(data[c].values))","b49fce1a":"data.isnull().sum()","1f3381df":"x=data[['age', 'job', 'marital', 'education', 'default', 'housing', 'loan','contact', \n        'month', 'day_of_week', 'duration', 'emp.var.rate', 'cons.price.idx', \n                     'cons.conf.idx', 'euribor3m', 'nr.employed', 'campaign', 'pdays', 'previous', 'poutcome']]","0008891c":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(x,data['y'] ,test_size = 0.2, random_state = 100)\n\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import confusion_matrix, accuracy_score\nk_fold = KFold(n_splits=10, shuffle=True, random_state=0)","9c91b96b":"from sklearn.metrics import roc_curve,auc\nfrom sklearn.svm import SVC","68d62f17":"svcS= SVC(kernel = 'sigmoid')\nsvcS.fit(X_train, y_train)\nsvcSpred = svcS.predict(X_test)","bfdd8963":"print(\"Confusion Matrix using sigmoid kernel \\n\",confusion_matrix(y_test, svcSpred))\nprint(\"Accuracy Score using sigmoid kernel \\n\",round(accuracy_score(y_test, svcSpred),2)*100)","4ea2f47a":"svcS_fpr,svcS_tpr,threshold=roc_curve(y_test,svcSpred)","66a027be":"auc_svcS=auc(svcS_fpr,svcS_tpr)","e8829eed":"SVCCV = (cross_val_score(svcS, X_train, y_train, cv=k_fold, n_jobs=1, scoring = 'accuracy').mean())","08562125":"print(SVCCV)","85a92328":"from sklearn.svm import SVC\nsvcR= SVC(kernel = 'rbf')\nsvcR.fit(X_train, y_train)\nsvcRpred = svcR.predict(X_test)","7db29e83":"print(\"Confusion Matrix using rbf kernel \\n\",confusion_matrix(y_test, svcRpred))\nprint(\"Accuracy Score using rbf kernel \\n\",round(accuracy_score(y_test, svcRpred),2)*100)","03e71dfa":"svcR_fpr,svcR_tpr,threshold=roc_curve(y_test,svcRpred)\nauc_svcR=auc(svcR_fpr,svcR_tpr)","48131f25":"SVCCV1 = (cross_val_score(svcR, X_train, y_train, cv=k_fold, n_jobs=1, scoring = 'accuracy').mean())","234803cc":"SVCCV1","38c5eb43":"from sklearn.svm import SVC\nsvcP= SVC(kernel = 'poly',random_state=42)\nsvcP.fit(X_train, y_train)\nsvcPpred = svcP.predict(X_test)\nprint(\"Confusion matrix using polynomial kernel \\n\",confusion_matrix(y_test, svcPpred))\nprint(\"Accuracy Score using polynomial kernel \\n\",round(accuracy_score(y_test, svcPpred),2)*100)","f33f9c70":"svcP_fpr,svcP_tpr,threshold=roc_curve(y_test,svcPpred)\nauc_svcP=auc(svcP_fpr,svcP_tpr)","ce977e73":"SVCCV2 = (cross_val_score(svcP, X_train, y_train, cv=k_fold, n_jobs=1, scoring = 'accuracy').mean())\nSVCCV2","1fe3a721":"from sklearn.ensemble import RandomForestClassifier\nforest=RandomForestClassifier(n_estimators=1,random_state=42)\nforest.fit(X_train,y_train)","44b92b34":"forestpred = forest.predict(X_test)","eaae93da":"print(\"Accuracy on the training subset:(:.3f)\",format(forest.score(X_train,y_train)))\nprint(\"Accuracy on the testing subset:(:.3f)\",format(forest.score(X_test,y_test)))","33e73f53":"forest_fpr,forest_tpr,threshold=roc_curve(y_test,forestpred)\nauc_forest=auc(forest_fpr,forest_tpr)","4c7d4edd":"forestCV = (cross_val_score(forest, X_train, y_train, cv=k_fold, n_jobs=1, scoring = 'accuracy').mean())\nforestCV","cdbaf375":"from sklearn.tree import DecisionTreeClassifier\ndtree = DecisionTreeClassifier(criterion='gini',random_state=42) #criterion = entopy, gini\ndtree.fit(X_train, y_train)\ndtreepred = dtree.predict(X_test)\n\nprint(confusion_matrix(y_test, dtreepred))\nprint(round(accuracy_score(y_test, dtreepred),2)*100)","d45ffe5a":"dtree_fpr,dtree_tpr,threshold=roc_curve(y_test,dtreepred)\nauc_dtree=auc(dtree_fpr,dtree_tpr)","d4f53062":"print(\"Accuracy on the training subset:(:.3f)\",format(dtree.score(X_train,y_train)))\nprint(\"Accuracy on the testing subset:(:.3f)\",format(dtree.score(X_test,y_test)))","1177572e":"dtreecv = (cross_val_score(dtree, X_train, y_train, cv=k_fold, n_jobs=1, scoring = 'accuracy').mean())\ndtreecv","b403f607":"from xgboost import XGBClassifier\nxgb = XGBClassifier(n_estimators=20,random_state=42)\nxgb.fit(X_train, y_train)\nxgbprd = xgb.predict(X_test)\n\nprint(confusion_matrix(y_test, xgbprd ))\nprint(round(accuracy_score(y_test, xgbprd),2)*100)","91bce53f":"xgb_fpr,xgb_tpr,threshold=roc_curve(y_test,xgbprd)\nauc_xgb=auc(xgb_fpr,xgb_tpr)","e2d2359c":"xgbcv = (cross_val_score(xgb, X_train, y_train, cv=k_fold, n_jobs=1, scoring = 'accuracy').mean())\nxgbcv","075a3fce":"from sklearn.neighbors import KNeighborsClassifier\n#from sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\n#Neighbors\nneighbors = np.arange(0,25)\n\n#Create empty list that will hold cv scores\ncv_scores = []\n\n#Perform 10-fold cross validation on training set for odd values of k:\nfor k in neighbors:\n    k_value = k+1\n    knn = KNeighborsClassifier(n_neighbors = k_value, weights='uniform', p=2, metric='euclidean')\n    kfold = KFold(n_splits=10, random_state=123)\n    scores =cross_val_score(knn, X_train, y_train, cv=kfold, scoring='accuracy')\n    cv_scores.append(scores.mean()*100)\n    print(\"k=%d %0.2f (+\/- %0.2f)\" % (k_value, scores.mean()*100, scores.std()*100))\n\noptimal_k = neighbors[cv_scores.index(max(cv_scores))]\nprint (\"The optimal number of neighbors is %d with %0.1f%%\" % (optimal_k, cv_scores[optimal_k]))\n\nplt.plot(neighbors, cv_scores)\nplt.xlabel('Number of Neighbors K')\nplt.ylabel('Train Accuracy')\nplt.show()","27470010":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors=22)\nknn.fit(X_train, y_train)\nknnpred = knn.predict(X_test)\n\nprint(confusion_matrix(y_test, knnpred))\nprint(round(accuracy_score(y_test, knnpred),2)*100)\n","e36ad721":"knn_fpr,knn_tpr,threshold=roc_curve(y_test,knnpred)\nauc_knn=auc(knn_fpr,knn_tpr)","f531280f":"KNNCV = (cross_val_score(knn, X_train, y_train, cv=k_fold, n_jobs=1, scoring = 'accuracy').mean())","cfe93c06":"KNNCV","e16b8d51":"plt.figure(figsize=(10,8),dpi=100)\nplt.plot(svcS_fpr,svcS_tpr,linestyle=\"-\",label='svcS (auc=%0.3f)' %auc_svcS)\nplt.plot(svcP_fpr,svcP_tpr,marker='.',label='svcP (auc=%0.3f)' %auc_svcP)\nplt.plot(svcR_fpr,svcR_tpr,marker='o',label='svcR (auc=%0.3f)' %auc_svcR)\nplt.xlabel('FPR--->')\nplt.ylabel('TPR--->')\nplt.title(\"Comparison of every kernel's in ROC Curve of SVC\")\nplt.legend()\nplt.show()\nplt.savefig('ROC Curve.png')","5da1d3d6":"plt.figure(figsize=(10,8),dpi=100)\nplt.plot(forest_fpr,forest_tpr,linestyle=\"-\",label='forest (auc=%0.3f)' %auc_forest)\nplt.plot(dtree_fpr,dtree_tpr,marker='.',label='dtree (auc=%0.3f)' %auc_dtree)\nplt.plot(knn_fpr,knn_tpr,marker='o',label='knn (auc=%0.3f)' %auc_knn)\nplt.xlabel('FPR--->')\nplt.ylabel('TPR--->')\nplt.title(\"ROC Curve of dtree,Random_forest,Knn algorithms \")\nplt.legend()\nplt.show()\nplt.savefig('ROC Curve(different algorithms).png')","7fb6b507":"from sklearn.metrics import classification_report","2adcd3b1":"print(\"Report of KNN algo: \\n\", classification_report(y_test,knnpred))\nprint(\" Predicted KNN\",knnpred)\nprint(\"\\n\")\nprint(\"Report of xgboost algo: \\n\", classification_report(y_test,xgbprd))\nprint(\"Predicted Xgboost\",xgbprd )\nprint(\"\\n\")\nprint(\"Report of dtree algo: \\n\", classification_report(y_test,dtreepred))\nprint(\"Predicted Decision Tree\", dtreepred)\nprint(\"\\n\")\nprint(\"Report of random forest algo: \\n\", classification_report(y_test,forestpred))\nprint(\"Predicted Random Forest\",forestpred)","f742fb17":"print(\"Confusion metrics of SVC using 'rbf' kernel : \\n\", classification_report(y_test,svcRpred))\nprint(\"\\n\")\nprint(\"Confusion metrics of SVC using 'sigmoid' kernel: \\n\", classification_report(y_test,svcSpred))\nprint(\"\\n\")\nprint(\"Confusion metrics of SVC using 'Polynomial' kernel : \\n\", classification_report(y_test,svcPpred))","0e7d633e":"***KNN Classifier***","7d4f4e5b":"***Decision Tree***","611538f7":"## Evaluation","4ce54f65":"### Data preprocessing","f3675bc1":"### From the above results we can conclude that xgboost is giving the best model for this classification problem.\n","ff7bc546":"> ***In SVM we have used different kernel's and we got best accuracy using rbf kernel***","b8aa18c2":"### Analysis\n\n\nHere in Analysis, i have taken all independent variable for better accuracy\n\nand my dependent value would be ***'y':{'yes':\"1\",'No':\"0\"}*** (Is client has taken term deposite or not)","195755f6":"### Data Visualization","4d5e4863":"***KNN Algorithm***\n> Accuracy in KNN algorithm is 0.91 means our model is 91.00% accurate.\nIn precision,High Precision means that false positive rate is low we have got 0.93 for 0 (not subscriber of term deposite)\nand 0.64 precision for 1 (Subscriber of term deposite)\nwe got recall as 0.97 for 0 (not subscriber of term deposite) and 0.43 for 1 (Subscriber of term deposite).\nf1-score gives better result than accuracy especially when we have uneven class distribution,Accuracy works better if false positive and false negative have similar cost if it is different then we have to look into recall and precision.\nIn our case accuracy score and f1 score differ much,f1 score is 0.95 for 0(not subscriber of term deposite) and 0.52 for 1(Subscriber of term deposite)\n\n***xgboost Algorithm***\n> Accuracy in xgboost algorithm is 0.92 means our model is 92.00% accurate.\nIn precision,High Precision means that false positive rate is low we have got 0.94 for 0 (not subscriber of term deposite)\nand 0.65 precision for 1 (Subscriber of term deposite)\nwe got recall as 0.97 for 0 (not subscriber of term deposite) and 0.52 for 1 (Subscriber of term deposite).\nf1-score gives better result than accuracy especially when we have uneven class distribution,Accuracy works better if false positive and false negative have similar cost if it is different then we have to look into recall and precision.\nIn our case accuracy score and f1 score differ much,f1 score is 0.95 for 0(not subscriber of term deposite) and 0.58 for1(Subscriber of term deposite)\n\n***decision tree Algorithm***\n\n> Accuracy in decision tree algorithm is 0.89 means our model is 89.00% accurate.\nIn precision,High Precision means that false positive rate is low we have got 0.94 for 0 (not subscriber of term deposite)\nand 0.49 precision for 1 (Subscriber of term deposite)\nwe got recall as 0.93 for 0 (not subscriber of term deposite) and 0.52 for 1 (Subscriber of term deposite).\nf1-score gives better result than accuracy especially when we have uneven class distribution,Accuracy works better if false positive and false negative have similar cost if it is different then we have to look into recall and precision.\nIn our case accuracy score and f1 score differ much,f1 score is 0.94 for 0(not subscriber of term deposite) and 0.50 for 1 (Subscriber of term deposite)\n\n***Random Forest Algorithm***\n\n> Accuracy in decision tree algorithm is 0.89 means our model is 89.00% accurate.\nIn precision,High Precision means that false positive rate is low we have got 0.94 for 0 (not subscriber of term deposite)\nand 0.50 precision for 1 (Subscriber of term deposite)\nwe got recall as 0.94 for 0 (not subscriber of term deposite) and 0.49 for 1 (Subscriber of term deposite).\nf1-score gives better result than accuracy especially when we have uneven class distribution,Accuracy works better if false positive and false negative have similar cost if it is different then we have to look into recall and precision.\nIn our case accuracy score and f1 score differ much,f1 score is 0.94 for 0(not subscriber of term deposite) and 0.49 for 1 (Subscriber of term deposite)\n","1098661f":"### Import important libraries and Dataset","8cd79217":"**Sigmoid SVC**","3baa14a8":"***Data Reading***","f5428e6e":"***Here***\n> ***'0' means \"client hasn't subscribed a term deposite\"***\n\n> ***'1' means \"Client has subscribed a term deposite\"***","099cbfe3":"##  Bank Marketing\n\n\n**Abstract:** \nThe data is related with direct marketing campaigns (phone calls) of a Portuguese banking institution. The classification goal is to predict if the client will subscribe a term deposit (variable y).\n\n**Data Set Information:**\nThe data is related with direct marketing campaigns of a Portuguese banking institution. The marketing campaigns were based on phone calls. Often, more than one contact to the same client was required, in order to access if the product (bank term deposit) would be ('yes') or not ('no') subscribed. \n\n###  Attribute Information:\n\n####  Bank client data:\n\n - Age (numeric)\n - Job : type of job (categorical: 'admin.', 'blue-collar', 'entrepreneur', 'housemaid', 'management', 'retired', 'self-employed', 'services', 'student', 'technician', 'unemployed', 'unknown')\n - Marital : marital status (categorical: 'divorced', 'married', 'single', 'unknown' ; note: 'divorced' means divorced or widowed)\n - Education (categorical: 'basic.4y', 'basic.6y', 'basic.9y', 'high.school',  'illiterate', 'professional.course', 'university.degree', 'unknown')\n - Default: has credit in default? (categorical: 'no', 'yes', 'unknown')\n - Housing: has housing loan? (categorical: 'no', 'yes', 'unknown')\n - Loan: has personal loan? (categorical: 'no', 'yes', 'unknown')\n\n    \n####  Related with the last contact of the current campaign:\n\n - Contact: contact communication type (categorical:\n   'cellular','telephone')\n - Month: last contact month of year (categorical: 'jan', 'feb', 'mar',\n   ..., 'nov', 'dec')\n - Day_of_week: last contact day of the week (categorical:\n   'mon','tue','wed','thu','fri')\n - Duration: last contact duration, in seconds (numeric). Important\n   note: this attribute highly affects the output target (e.g., if\n   duration=0 then y='no'). Yet, the duration is not known before a call\n   is performed. Also, after the end of the call y is obviously known.\n   Thus, this input should only be included for benchmark purposes and\n   should be discarded if the intention is to have a realistic\n   predictive model.\n\n    \n####  Other attributes:\n\n - Campaign: number of contacts performed during this campaign and for\n   this client (numeric, includes last contact)\n - Pdays: number of days that passed by after the client was last\n   contacted from a previous campaign (numeric; 999 means client was not\n   previously contacted)\n - Previous: number of contacts performed before this campaign and for\n   this client (numeric)\n - Poutcome: outcome of the previous marketing campaign (categorical:\n   'failure','nonexistent','success')\n\n    \n####  Social and economic context attributes\n - Emp.var.rate: employment variation rate - quarterly indicator\n   (numeric)\n - Cons.price.idx: consumer price index - monthly indicator (numeric)\n - Cons.conf.idx: consumer confidence index - monthly indicator\n   (numeric)\n - Euribor3m: euribor 3 month rate - daily indicator (numeric)\n - Nr.employed: number of employees - quarterly indicator (numeric)\n\n####  Output variable (desired target):\n\n - y - has the client subscribed a term deposit? (binary: 'yes', 'no')\n","fe1b4a89":"***SVM***\n> making model using different kernel's in svm (SVC)","0e155db9":"***Random Forest***","4fe3619b":"***XgBoost Classifier***"}}