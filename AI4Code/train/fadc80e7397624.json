{"cell_type":{"3cce9733":"code","1a959dfe":"code","aefc47f1":"code","111145cb":"code","81417bfa":"code","0107bd7c":"code","0e26084d":"code","0e83ea57":"code","7168b172":"code","eddf433c":"code","7025d921":"code","0c1f7fbf":"code","20c80023":"code","bb4e4a6c":"code","6d12db98":"code","b1142298":"code","ece445a9":"markdown","9d2e7675":"markdown","54ab71d9":"markdown","827f1fd1":"markdown","83acefff":"markdown","3b47093a":"markdown","24797564":"markdown","290fdf5e":"markdown","6d7761ee":"markdown","10f884a2":"markdown","34deafe5":"markdown"},"source":{"3cce9733":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","1a959dfe":"def tuble_x():\n    \n    t = (1,2,3)\n    return t\n\na,b,c = tuble_x()\nprint(a,b,c)","aefc47f1":"x = 5 #global scope\n\ndef f():\n    x = 4 #local scope\n    return x\n\nprint(x)\nprint(f())\n","111145cb":"x = 14\n\ndef f():\n    \n    y = x**2\n    return y\n\nprint(f())\n\n\n","81417bfa":"\n\n# How can we learn what is built in scope\nimport builtins\ndir(builtins)\n\n","0107bd7c":"def fonk():\n    def fon():\n        a = 5\n        b = 4\n        c = a+b\n        return c\n    return fon()\/\/3\n\nprint(fonk())\n        ","0e26084d":"# default argument\ndef f(a,b=3,c=5):\n    z = a+b+c\n    return z\n\nprint(f(5))\nprint()\nprint(f(3,4,5))","0e83ea57":"def h(*args):\n    for i in args:\n        print(i)\n        \nh(1,2,3)  \nprint()\n\ndef c(**kwargs):\n    for key,value in kwargs.items():\n        print(key,\":\",value)\n\nc(Color = \"Yellow\",Fruit = \"Apple\",Telephone_model = \"Xiaomi\")        \n","7168b172":"example = lambda x: x+x*2\n\nprint(example(4))\nprint()\n\nexample2 = lambda x,y,z : x+y+z\n\nprint(example2(3,6,9))","eddf433c":"liste = [3,6,9]\n\nexample3 = map(lambda x: x**2,liste)\n\nlist(example3)","7025d921":"name  = \"Kemalettin\"\n\nf = iter(name)\nprint(next(f))\nprint()\nprint(*f)","0c1f7fbf":"#zip example\n\nlist1 = [1,2,3,4]\n\nlist2 = [5,6,7]\n\nlist3 = [7,8,9,10]\n\na = zip(list1,list2)\nprint(a)\na_list = list(a)\nprint(a_list)\nprint()\nb = zip(list1,list3)\n\nprint(list(b))\n","20c80023":"x = 1\n\na = [i+2 for i in range(x,x+10)]\n\nprint(a)","bb4e4a6c":"# Conditionals on iterable\n\na = range(0,10)\nb = [i*2 if i%2 == 1 else i+50 if  i*3 == 18 else i for i in a]\nprint(b)","6d12db98":"data = pd.read_csv(\"..\/input\/StudentsPerformance.csv\")","b1142298":"threshold = int(sum(data[\"math score\"])\/len(data[\"math score\"]))\ndata[\"Performance\"] = [\"good\" if i > threshold else \"normal\" if i == threshold else \"bad\" for i in data[\"math score\"]]\n\ndata.loc[:20,[\"Performance\",\"math score\"]]\n\n\n\n","ece445a9":"**Scope**\nWhat we need to know about scope:\n\n    global: defined main body in script\n    local: defined in a function\n    built in scope: names in predefined built in scope module such as print, len\n\n    Lets make some basic examples\n","9d2e7675":"**Lambda Function**","54ab71d9":"** PYTHON DATA SCIENCE TOOLBOX**","827f1fd1":"\n\n\nUSER DEFINED FUNCTION\n\nWhat we need to know about functions:\n\n    docstrings: documentation for functions. Example:\n    for f():\n    \"\"\"This is docstring for documentation of function f\"\"\"\n    tuble: sequence of immutable python objects.\n    cant modify values\n    tuble uses paranthesis like tuble = (1,2,3)\n    unpack tuble into several variables like a,b,c = tuble\n\n","83acefff":"\n\n\nITERATORS\n\n    iterable is an object that can return an iterator\n    iterable: an object with an associated iter() method\n    example: list, strings and dictionaries\n    iterator: produces next value with next() method\n\n","3b47093a":"\n\n\nNESTED FUNCTION\n\n    function inside function.\n    There is a LEGB rule that is search local scope, enclosing function, global and built in scopes, respectively.\n\n","24797564":"zip(): zip lists\n","290fdf5e":"\n\n\nANONYMOUS FUNCT\u0130ON\n\nLike lambda function but it can take more than one arguments.\n\n    map(func,seq) : applies a function to all the items in a list\n\n","6d7761ee":"LIST COMPREHENS\u0130ON\n\nOne of the most important topic of this kernel\nWe use list comprehension for data analysis often.\nlist comprehension: collapse for loops for building lists into a single line\nEx: num1 = [1,2,3] and we want to make it num2 = [2,3,4]. This can be done with for loop. However it is unnecessarily long. We can make it one line code that is list comprehension.","10f884a2":"\n\n[i + 1 for i in num1 ]: list of comprehension\ni +1: list comprehension syntax\nfor i in num1: for loop syntax\ni: iterator\nnum1: iterable object\n","34deafe5":"DEFAULT and FLEXIBLE ARGUMENTS\nDefault argument example:\ndef f(a, b=1): \n\nb = 1 is default argument\n\nFlexible argument example:\ndef f(*args): \n\n*args can be one or more\ndef f(** kwargs) \n**kwargs is a dictionary \n\n"}}