{"cell_type":{"1561ef3d":"code","d6c296db":"code","87d76510":"code","0b9c5ef3":"code","4b8f5473":"code","10f25e90":"code","2610066b":"code","64d6c963":"code","c8ec8bcf":"code","4b77d182":"code","dc02acd9":"markdown"},"source":{"1561ef3d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.pipeline import FeatureUnion\nfrom sklearn.impute import SimpleImputer, MissingIndicator\nimport gc\nimport janestreet\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d6c296db":"train_df = pd.read_csv('\/kaggle\/input\/jane-street-market-prediction\/train.csv')\ntrain_df = train_df[train_df.weight != 0 ]","87d76510":"train_df.head()","0b9c5ef3":"features = [c for c in train_df.columns if 'feature' in c] + ['date']\n\nX = train_df.loc[:, features].values\ny = train_df.loc[:, 'resp'].values","4b8f5473":"del train_df\n\ngc.collect()","10f25e90":"\ntransformer = FeatureUnion(\n    transformer_list=[\n        ('features', SimpleImputer(strategy='mean')),\n        ('indicators', MissingIndicator())])\n\ntransformer = transformer.fit(X, y)\nX = transformer.transform(X)","2610066b":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.10, shuffle=False)","64d6c963":"del X, y\n\ngc.collect()","c8ec8bcf":"\n\nclf = LinearRegression(n_jobs=-1)\n\nclf.fit(X_train,y_train)\ny_hat = clf.predict(X_train)\n\ny_hat_test = clf.predict(X_test)\n\nprint(f'train rmse  {np.sqrt(mean_squared_error(y_hat,y_train))}')\nprint(f'test rmse  {np.sqrt(mean_squared_error(y_hat_test,y_test))}')\n\n","4b77d182":"env = janestreet.make_env() # initialize the environment\niter_test = env.iter_test() # an iterator which loops over the test set\n\nfor (test_df, sample_prediction_df) in iter_test:\n    X_test = test_df.loc[:, features]\n    X_test = transformer.transform(X_test)\n    preds = clf.predict(X_test)  \n    action = ((test_df['weight'].values * preds) > 0).astype('int')\n\n    sample_prediction_df.action = action\n    env.predict(sample_prediction_df)","dc02acd9":"# Simple linear baseline\n\nAdded: \n* Imputation pipeline (Mean Imputation & Missing Indicator)\n* Set Shuffle = False to prevent leaking.. \n\n\nwork in progress.."}}