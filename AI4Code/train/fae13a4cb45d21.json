{"cell_type":{"73174bea":"code","6ea957a0":"code","c8458d47":"code","1715ebb7":"markdown","b0f0a26e":"markdown","37922930":"markdown","b9901250":"markdown","228657f6":"markdown"},"source":{"73174bea":"from kaggle_environments import evaluate, make\nenv = make(\"halite\", debug=True)\nenv.render()","6ea957a0":"%%writefile submission.py\nimport time\nimport copy\nimport sys\nimport math\nimport collections\nimport pprint\nimport numpy as np\nimport scipy.optimize\nimport scipy.ndimage\nfrom kaggle_environments.envs.halite.helpers import *\nimport kaggle_environments\nimport random\n'''\nInitialization code can run when the file is loaded.  The first call to agent() is allowed 30 sec\nThe agent function is the last function in the file (does not matter its name)\nagent must run in less than 6 sec\nSyntax errors when running the file do not cause any message, but cause your agent to do nothing\n\n'''\nCONFIG_MAX_SHIPS = 40\n\n#print('kaggle version',kaggle_environments.__version__)\n#### Global variables\nall_actions = [\n    ShipAction.NORTH, ShipAction.EAST, ShipAction.SOUTH, ShipAction.WEST\n]\nall_dirs = [Point(0, 1), Point(1, 0), Point(0, -1), Point(-1, 0)]\nstart = None\nnum_shipyard_targets = 4\nsize = None\n# Will keep track of whether a ship is collecting halite or carrying cargo to a shipyard\nship_target = {}  # where to go to collect\nme = None\ndid_init = False\nquiet = False\nC = None\n\n\nclass Obj:\n    pass\n\n\n# will hold global data for this turn, updating as we set actions.\n# E.g. number of ships, amount of halite\n# taking into account the actions set so far.  Also max_ships, etc.\nturn = Obj()\n### Data\n#turns_optimal[CHratio, round_trip_travel] for mining\n#See notebook on optimal mining kaggle.com\/solverworld\/optimal-mining\nturns_optimal = np.array(\n    [[0, 2, 3, 4, 4, 5, 5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 8],\n     [0, 1, 2, 3, 3, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7],\n     [0, 0, 2, 2, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7],\n     [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6],\n     [0, 0, 0, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 6],\n     [0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5],\n     [0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4],\n     [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3],\n     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2],\n     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]])\n\n\n#### Functions\ndef print_enemy_ships(board):\n    print('\\nEnemy Ships')\n    for ship in board.ships.values():\n        if ship.player_id != me.id:\n            print('{:6}  {} halite {}'.format(ship.id, ship.position,\n                                              ship.halite))\n\n\ndef print_actions(board):\n    print('\\nShip Actions')\n    for ship in me.ships:\n        print('{:6}  {}  {} halite {}'.format(ship.id, ship.position,\n                                              ship.next_action, ship.halite))\n    print('Shipyard Actions')\n    for sy in me.shipyards:\n        print('{:6}  {}  {}'.format(sy.id, sy.position, sy.next_action))\n\n\ndef print_none(*args):\n    pass\n\n\ndef compute_max_ships(step):\n    #This needs to be tuned, perhaps based on amount of halite left\n    if step < 200:\n        return CONFIG_MAX_SHIPS\n    elif step < 300:\n        return CONFIG_MAX_SHIPS - 4\n    elif step < 350:\n        return CONFIG_MAX_SHIPS - 10\n    else:\n        return CONFIG_MAX_SHIPS - 20\n\n\ndef set_turn_data(board):\n    #initialize the global turn data for this turn\n    turn.num_ships = len(me.ships)\n    turn.max_ships = compute_max_ships(board.step)\n    turn.total_halite = me.halite\n    #this is matrix of halite in cells\n    turn.halite_matrix = np.reshape(\n        board.observation['halite'],\n        (board.configuration.size, board.configuration.size))\n    turn.num_shipyards = len(me.shipyards)\n    #compute enemy presence and enemy halite matrices\n    turn.EP, turn.EH, turn.ES = gen_enemy_halite_matrix(board)\n    #filled in by shipid as a ship takes up a square\n    turn.taken = {}\n    turn.last_episode = (board.step == (board.configuration.episode_steps - 2))\n\n\ndef init(obs, config):\n    #This is only called on first call to agent()\n    #Do initalization things\n    global size\n    global print\n    if hasattr(config, 'myval') and config.myval == 9 and not quiet:\n        #we are called locally, so leave prints OK\n        pass\n    else:\n        #we are called in competition, quiet output\n        print = print_none\n        pprint.pprint = print_none\n    size = config.size\n\n\ndef limit(x, a, b):\n    if x < a:\n        return a\n    if x > b:\n        return b\n    return x\n\n\ndef num_turns_to_mine(C, H, rt_travel):\n    #How many turns should we plan on mining?\n    #C=carried halite, H=halite in square, rt_travel=steps to square and back to shipyard\n    if C == 0:\n        ch = 0\n    elif H == 0:\n        ch = turns_optimal.shape[0]\n    else:\n        ch = int(math.log(C \/ H) * 2.5 + 5.5)\n        ch = limit(ch, 0, turns_optimal.shape[0] - 1)\n    rt_travel = int(limit(rt_travel, 0, turns_optimal.shape[1] - 1))\n    return turns_optimal[ch, rt_travel]\n\n\ndef halite_per_turn(carrying, halite, travel, min_mine=1):\n    #compute return from going to a cell containing halite, using optimal number of mining steps\n    #returns halite mined per turn, optimal number of mining steps\n    #Turns could be zero, meaning it should just return to a shipyard (subject to min_mine)\n    turns = num_turns_to_mine(carrying, halite, travel)\n    if turns < min_mine:\n        turns = min_mine\n    mined = carrying + (1 - .75**turns) * halite\n    return mined \/ (travel + turns), turns\n\n\ndef move(pos, action):\n    ret = None\n    #return new Position from pos when action is applied\n    if action == ShipAction.NORTH:\n        ret = pos + Point(0, 1)\n    if action == ShipAction.SOUTH:\n        ret = pos + Point(0, -1)\n    if action == ShipAction.EAST:\n        ret = pos + Point(1, 0)\n    if action == ShipAction.WEST:\n        ret = pos + Point(-1, 0)\n    if ret is None:\n        ret = pos\n    #print('move pos {} {} => {}'.format(pos,action,ret))\n    return ret % size\n\n\ndef dirs_to(p1, p2, size=21):\n    #Get the actions you should take to go from Point p1 to Point p2\n    #using shortest direction by wraparound\n    #Args: p1: from Point\n    #      p2: to Point\n    #      size:  size of board\n    #returns: list of directions, tuple (deltaX,deltaY)\n    #The list is of length 1 or 2 giving possible directions to go, e.g.\n    #to go North-East, it would return [ShipAction.NORTH, ShipAction.EAST], because\n    #you could use either of those first to go North-East.\n    #[None] is returned if p1==p2 and there is no need to move at all\n    deltaX, deltaY = p2 - p1\n    if abs(deltaX) > size \/ 2:\n        #we wrap around\n        if deltaX < 0:\n            deltaX += size\n        elif deltaX > 0:\n            deltaX -= size\n    if abs(deltaY) > size \/ 2:\n        #we wrap around\n        if deltaY < 0:\n            deltaY += size\n        elif deltaY > 0:\n            deltaY -= size\n    #the delta is (deltaX,deltaY)\n    ret = []\n    if deltaX > 0:\n        ret.append(ShipAction.EAST)\n    if deltaX < 0:\n        ret.append(ShipAction.WEST)\n    if deltaY > 0:\n        ret.append(ShipAction.NORTH)\n    if deltaY < 0:\n        ret.append(ShipAction.SOUTH)\n    if len(ret) == 0:\n        ret = [None]  # do not need to move at all\n    return ret, (deltaX, deltaY)\n\n\ndef shipyard_actions():\n    #spawn a ship as long as there is no ship already moved to this shipyard\n    for sy in me.shipyards:\n        if turn.num_ships < turn.max_ships:\n            if turn.total_halite >= 500 and sy.position not in turn.taken:\n                #spawn one\n                sy.next_action = ShipyardAction.SPAWN\n                turn.taken[sy.position] = 1\n                turn.num_ships += 1\n                turn.total_halite -= 500\n\n\ndef gen_enemy_halite_matrix(board):\n    #generate matrix of enemy positions:\n    #EP=presence of enemy ship\n    #EH=amount of halite in enemy ships\n    #ES=presence of enemy shipyards\n    EP = np.zeros((size, size))\n    EH = np.zeros((size, size))\n    ES = np.zeros((size, size))\n    for id, ship in board.ships.items():\n        if ship.player_id != me.id:\n            EH[ship.position.y, ship.position.x] = ship.halite\n            EP[ship.position.y, ship.position.x] = 1\n    for id, sy in board.shipyards.items():\n        if sy.player_id != me.id:\n            ES[sy.position.y, sy.position.x] = 1\n    return EP, EH, ES\n\n\ndef dist(a, b):\n    #Manhattan distance of the Point difference a to b, considering wrap around\n    action, step = dirs_to(a, b, size=21)\n    return abs(step[0]) + abs(step[1])\n\n\ndef nearest_shipyard(pos):\n    #return distance, position of nearest shipyard to pos.  100,None if no shipyards\n    mn = 100\n    best_pos = None\n    for sy in me.shipyards:\n        d = dist(pos, sy.position)\n        if d < mn:\n            mn = d\n            best_pos = sy.position\n    return mn, best_pos\n\n\ndef assign_targets(board, ships):\n    #Assign the ships to a cell containing halite optimally\n    #set ship_target[ship_id] to a Position\n    #We assume that we mine halite containing cells optimally or return to deposit\n    #directly if that is optimal, based on maximizing halite per step.\n    #Make a list of pts containing cells we care about, this will be our columns of matrix C\n    #the rows are for each ship in collect\n    #computes global dict ship_tagert with shipid->Position for its target\n    #global ship targets should already exist\n    old_target = copy.copy(ship_target)\n    ship_target.clear()\n    if len(ships) == 0:\n        return\n    halite_min = 50\n    pts1 = []\n    pts2 = []\n    for pt, c in board.cells.items():\n        assert isinstance(pt, Point)\n        if c.halite > halite_min:\n            pts1.append(pt)\n    #Now add duplicates for each shipyard - this is directly going to deposit\n    for sy in me.shipyards:\n        for i in range(num_shipyard_targets):\n            pts2.append(sy.position)\n    #this will be the value of assigning C[ship,pt]\n    C = np.zeros((len(ships), len(pts1) + len(pts2)))\n    #this will be the optimal mining steps we calculated\n    for i, ship in enumerate(ships):\n        for j, pt in enumerate(pts1 + pts2):\n            #two distances: from ship to halite, from halite to nearest shipyard\n            d1 = dist(ship.position, pt)\n            d2, shipyard_position = nearest_shipyard(pt)\n            if shipyard_position is None:\n                #don't know where to go if no shipyard\n                d2 = 1\n            #value of target is based on the amount of halite per turn we can do\n            my_halite = ship.halite\n            if j < len(pts1):\n                #in the mining section\n                v, mining = halite_per_turn(my_halite, board.cells[pt].halite,\n                                            d1 + d2)\n                #mining is no longer 0, due to min_mine (default)\n            else:\n                #in the direct to shipyard section\n                if d1 > 0:\n                    v = my_halite \/ d1\n                else:\n                    #we are at a shipyard\n                    v = 0\n            if board.cells[pt].ship and board.cells[pt].ship.player_id != me.id:\n                #if someone else on the cell, see how much halite they have\n                #enemy ship\n                enemy_halite = board.cells[pt].ship.halite\n                if enemy_halite <= my_halite:\n                    v = -1000  # don't want to go there\n                else:\n                    if d1 < 5:\n                        #attack or scare off if reasonably quick to get there\n                        v += enemy_halite \/ (\n                            d1 + 1)  # want to attack them or scare them off\n            #print('shipid {} col {} is {} with {:8.1f} score {:8.2f}'.format(ship.id,j, pt,board.cells[pt].halite,v))\n            C[i, j] = v\n    print('C is {}'.format(C.shape))\n    #Compute the optimal assignment\n    row, col = scipy.optimize.linear_sum_assignment(C, maximize=True)\n    #so ship row[i] is assigned to target col[j]\n    #print('got row {} col {}'.format(row,col))\n    #print(C[row[0],col[0]])\n    pts = pts1 + pts2\n    for r, c in zip(row, col):\n        ship_target[ships[r].id] = pts[c]\n    #print out results\n    print('\\nShip Targets')\n    print('Ship      position          target')\n    for id, t in ship_target.items():\n        st = ''\n        ta = ''\n        if board.ships[id].position == t:\n            st = 'MINE'\n        elif len(me.shipyards) > 0 and t == me.shipyards[0].position:\n            st = 'SHIPYARD'\n        if id not in old_target or old_target[id] != ship_target[id]:\n            ta = ' NEWTARGET'\n        print(\n            '{0:6}  at ({1[0]:2},{1[1]:2})  assigned ({2[0]:2},{2[1]:2}) h {3:3} {4:10} {5:10}'\n            .format(id, board.ships[id].position, t, board.cells[t].halite, st,\n                    ta))\n\n    return\n\n\ndef make_avoidance_matrix(myship_halite):\n    #make a matrix of True where we want to avoid, uses\n    #turn.EP=enemy position matrix\n    #turn.EH=enemy halite matrix\n    #turn.ES=enemy shipyard matrix\n    filter = np.array([[0, 1, 0], [1, 1, 1], [0, 1, 0]])\n    bad_ship = np.logical_and(turn.EH <= myship_halite, turn.EP)\n    avoid = scipy.ndimage.convolve(bad_ship, filter, mode='wrap', cval=0.0)\n    avoid = np.logical_or(avoid, turn.ES)\n    return avoid\n\n\ndef make_attack_matrix(myship_halite):\n    #make a matrix of True where we would want to move to attack an enemy ship\n    #for now, we just move to where the ship is.\n    #turn.EP=enemy position matrix\n    #turn.EH=enemy halite matrix\n    attack = np.logical_and(turn.EH > myship_halite, turn.EP)\n    #print('attack',attack)\n    return attack\n\n\ndef get_max_halite_ship(board, avoid_danger=True):\n    #Return my Ship carrying max halite, or None if no ships\n    #NOTE: creating avoid matrix again!\n    mx = -1\n    the_ship = None\n    for ship in me.ships:\n        x = ship.position.x\n        y = ship.position.y\n        avoid = make_avoidance_matrix(ship.halite)\n        if ship.halite > mx and (not avoid_danger or not avoid[y, x]):\n            mx = ship.halite\n            the_ship = ship\n    return the_ship\n\n\ndef remove_dups(p):\n    #remove duplicates from a list without changing order\n    #Not efficient for long lists\n    ret = []\n    for x in p:\n        if x not in ret:\n            ret.append(x)\n    return ret\n\n\ndef matrix_lookup(matrix, pos):\n    return matrix[pos.y, pos.x]\n    \n    \ndef ship_converts(board):\n    def converts(ship, turn):\n        ship.next_action = ShipAction.CONVERT\n        turn.taken[ship.position] = 1\n        turn.num_shipyards += 1\n        turn.total_halite -= 500\n\n    #if no shipyard, convert the ship carrying max halite unless it is in danger\n    if turn.num_shipyards == 0 and not turn.last_episode:\n        ship = get_max_halite_ship(board)\n        if ship is not None:\n            if ship.halite + turn.total_halite > 500:\n                converts(ship, turn)\n                \n    #Now check the rest to see if they should convert\n    for ship in me.ships:\n        if ship.next_action:\n            continue\n        #CHECK if in danger without escape, convert if h>500\n        avoid = make_avoidance_matrix(ship.halite)\n        z = [matrix_lookup(avoid, move(ship.position, a)) for a in all_actions]\n        if np.all(z) and ship.halite > 500:\n            converts(ship, turn)\n            print('ship id {} no escape converting'.format(ship.id))\n            \n        #CHECK if last step and > 500 halite, convert\n        if turn.last_episode and ship.halite > 500:\n            converts(ship, turn)\n\n    # Generate shipyard from the best ship\n    if turn.num_shipyards <= 4 and turn.num_ships > 10 + turn.num_shipyards * 5 and board.step < 300:\n        max_halite_score = 0\n        max_ship = None\n        for ship in me.ships:\n            halite_score = 0\n            if ship.next_action: continue\n\n            for pt, c in board.cells.items():\n                d = dist(ship.position, pt)\n                if d == 0: # Substract score if the position have much halite\n                    halite_score -= c.halite\n                else:\n                    halite_score += c.halite \/ d\n\n            # Substract if shipyards around\n            for sy in me.shipyards:\n                d = dist(ship.position, sy.position)\n                if d == 0: # shipyard here\n                    halite_score -= 1000000\n                else:\n                    halite_score -= 100 \/ d\n\n            if max_halite_score < halite_score:\n                max_halite_score = halite_score\n                max_ship = ship\n\n        if max_ship:\n            converts(max_ship, turn)\n\n    \ndef ship_moves(board):\n    ships = [ship for ship in me.ships if ship.next_action is None]\n    #update ship_target\n    assign_targets(board, ships)\n    #For all ships without a target, we give them a random movement (we will check below if this\n    actions = {}  # record actions for each ship\n    for ship in ships:\n        if ship.id in ship_target:\n            a, delta = dirs_to(ship.position, ship_target[ship.id], size=size)\n            actions[ship.id] = a\n        else:\n            actions[ship.id] = [random.choice(all_actions)]\n\n    for ship in ships:\n        action = None\n        x = ship.position\n        #generate matrix of places to attack and places to avoid\n        avoid = make_avoidance_matrix(ship.halite)\n        attack = make_attack_matrix(ship.halite)\n        #see if there is a attack options\n        action_list = actions[ship.id] + [None] + all_actions\n        #see if we should add an attack diversion to our options\n        #NOTE: we will avoid attacking a ship that is on the avoid spot - is this a good idea?\n        for a in all_actions:\n            m = move(x, a)\n            if attack[m.y, m.x]:\n                print('ship id {} attacking {}'.format(ship.id, a))\n                action_list.insert(0, a)\n                break\n        #now try the options, but don't bother repeating any\n        action_list = remove_dups(action_list)\n        for a in action_list:\n            m = move(x, a)\n            if avoid[m.y, m.x]:\n                print('ship id {} avoiding {}'.format(ship.id, a))\n            if m not in turn.taken and not avoid[m.y, m.x]:\n                action = a\n                break\n        ship.next_action = action\n        turn.taken[m] = 1\n\n\n# Returns the commands we send to our ships and shipyards, must be last function in file\ndef agent(obs, config):\n    global size\n    global start\n    global prev_board\n    global me\n    global did_init\n    #Do initialization 1 time\n    start_step = time.time()\n    if start is None:\n        start = time.time()\n    if not did_init:\n        init(obs, config)\n        did_init = True\n    board = Board(obs, config)\n    me = board.current_player\n    set_turn_data(board)\n    print('==== step {} sim {}'.format(board.step, board.step + 1))\n    print('ships {} shipyards {}'.format(turn.num_ships, turn.num_shipyards))\n    print_enemy_ships(board)\n    ship_converts(board)\n    ship_moves(board)\n    shipyard_actions()\n    print_actions(board)\n    print('time this turn: {:8.3f} total elapsed {:8.3f}'.format(\n        time.time() - start_step,\n        time.time() - start))\n    return me.next_actions\n\n","c8458d47":"# Play against yourself without an ERROR or INVALID.\n# Note: The first episode in the competition will run this to weed out erroneous agents.\nenv.run([\"\/kaggle\/working\/submission.py\", \"\/kaggle\/working\/submission.py\"])\nprint(\"EXCELLENT SUBMISSION!\" if env.toJSON()[\"statuses\"] == [\"DONE\", \"DONE\"] else \"MAYBE BAD SUBMISSION?\")\n\n# Play as the first agent against default \"shortest\" agent.\nenv.run([\"\/kaggle\/working\/submission.py\", \"random\"])\nenv.render(mode=\"ipython\", width=800, height=600)\n","1715ebb7":"# Create Agent","b0f0a26e":"# Submit to Competition\n\n1. Commit this kernel.\n1. View the commited version.\n1. Go to \"Data\" section and find submission.py file.\n1. Click \"Submit to Competition\"\n1. Go to My Submissions to view your score and episodes being played.\n\n","37922930":"# Test Agent","b9901250":"This agent uses an optimal assignment algorithm to select targets for each ship.  The value of targets is as described in  https:\/\/www.kaggle.com\/solverworld\/optimal-mining-with-carried-halite . An earlier version of this agorithm is discussed in notebook kaggle.com\/solverworld\/optimal-mining.","228657f6":"# Create Environment"}}