{"cell_type":{"98dce9ce":"code","792b2dc5":"code","464df521":"code","881fa86e":"code","63ab2584":"code","4f92d6a5":"code","3b9fa054":"code","0d77a2ab":"code","3892ab69":"code","b0c6f4e9":"code","7e80dc68":"code","2eeb43e6":"code","8c624bd6":"code","1dd67783":"code","7f50bb6a":"code","f60d3a49":"code","0d3718ba":"code","4dac9576":"code","e35dd3b9":"code","0ea734c7":"code","534843b7":"code","7fecaa8c":"code","c0df38ad":"code","272e237b":"code","85347839":"code","5caa9707":"code","b44f4ef6":"code","e63338c5":"code","b409aeeb":"code","48021644":"code","d73c1be7":"code","7a39436d":"code","8fd92fe4":"code","b05c41a0":"code","ea5522c5":"code","903a9672":"code","227558c9":"code","112de3a1":"markdown","42063301":"markdown","07a16c61":"markdown","ae0c342c":"markdown","abdc35ce":"markdown"},"source":{"98dce9ce":"# Import library\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# ignore warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Model selection\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import RepeatedStratifiedKFold\nfrom sklearn.model_selection import RandomizedSearchCV\n\n# Models\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import SGDClassifier\nfrom catboost import CatBoostClassifier\nfrom xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier\n\n# Metrics\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\nfrom sklearn.metrics import confusion_matrix, classification_report\n","792b2dc5":"# Import the dataset\ndf = pd.read_csv(\"..\/input\/heart-attack-analysis-prediction-dataset\/heart.csv\")\ndf.head()","464df521":"# Check any null values\ndf.isna().sum()","881fa86e":"# Check the value counts for output\ndf.output.value_counts()","63ab2584":"# visualize it\nwith plt.xkcd():\n    plt.figure(figsize=(20,4), facecolor='#f1f33f')\n    df.output.value_counts().plot(kind='barh', color=['salmon', 'lightgreen'])\n    plt.title(\"Output Value Counts\")\n    plt.xlabel(\"Count\")\n    plt.ylabel(\"Heart Attack\")\n    \n    num = df.output.value_counts()\n    \n    for index, count in enumerate(num):\n           plt.text(count, index,\n                     str(count))\n    plt.title(\"Heart Attack\")","4f92d6a5":"# Gender\ndf['sex'].value_counts()","3b9fa054":"# visualize it\nwith plt.xkcd():\n    plt.figure(figsize=(20,4), facecolor='#ccccff')\n    df.sex.value_counts().plot(kind='barh', color=['#ffa180', '#ffb865'])\n    plt.xlabel(\"Count\")\n    plt.ylabel(\"Sex\")\n    \n    num = df.sex.value_counts()\n    \n    for index, count in enumerate(num):\n           plt.text(count, index,\n                     str(count))\n    plt.title(\"Heart Attack\")","0d77a2ab":"with plt.xkcd():\n    sns.distplot(df['sex'])","3892ab69":"\nplt.figure(figsize=(10,5))\nsns.displot(x='age', hue='sex', data=df, alpha=0.6)\nplt.title(\"Gender\")\nplt.show()","b0c6f4e9":"# plot age with heart attack\n\nplt.figure(figsize=(10,5))\nsns.displot(x='age', hue='output', data=df, alpha=0.6)\nplt.title(\"Heart Attack Analysis with Age\")\nplt.show()","7e80dc68":"# which age group people has more chest pain\n\nplt.figure(figsize=(10,5))\nsns.displot(x='age',hue='cp',data=df,alpha=0.6)\nplt.title(\"Chest Pain With Respect to Age\")\nplt.show()","2eeb43e6":"# Cholestrol\nwith plt.xkcd():\n    plt.figure(figsize=(10,5))\n    sns.kdeplot(data=df['chol'],shade=True,color='red')\n    plt.xlabel(\"Cholestrol\")\n    plt.title(\"Cholestrol\")\n","8c624bd6":"\nplt.figure(figsize=(10,5))\nsns.scatterplot( df['age'],df['chol'], hue=df['output'])\nplt.xlabel(\"Age\",)\nplt.ylabel(\"Cholestrol\")\nplt.title(\"Cholestrol Level Regarding Age\")\nplt.axhline(df['chol'].mean(), linestyle='--', color='black')\nplt.grid(True)\nplt.style.use(\"ggplot\")","1dd67783":"plt.figure(figsize=(10,5))\nsns.scatterplot( df['age'],df['trtbps'], hue=df['output'])\nplt.xlabel(\"Age\",)\nplt.ylabel(\"BloodPressure\")\nplt.title(\"BloodPressure\")\nplt.axhline(df['trtbps'].mean(), linestyle='--', color='red')\nplt.grid(True)\nplt.style.use(\"ggplot\")\n","7f50bb6a":"plt.figure(figsize=(10,5))\nsns.displot(x='chol',hue='fbs',data=df,alpha=0.6)\nplt.title(\"Cholestrol with Fasting Blood Sugar\")","f60d3a49":"plt.figure(figsize=(10,5))\nsns.scatterplot(df['age'],df['thalachh'],hue=df['output'])\nplt.title(\"Maximum Heart Rate\")\nplt.axhline(df['thalachh'].mean(), linestyle='--', color='green')","0d3718ba":"# Histogram\nsns.distplot(a=df['chol'], label='Cholestrol', kde=False)\nsns.distplot(a=df['thalachh'], label='Heart Rate', kde=False)\nsns.distplot(a=df['trtbps'], label='Blood Pressure', kde=False)\n\nplt.legend()\nplt.xlabel(\"Level\")\nplt.title(\"Histogram \")","4dac9576":"# KDE plots\n\nsns.kdeplot(data=df['chol'], label='Cholestrol', shade=True)\nsns.kdeplot(data=df['thalachh'], label='Heart Rate', shade=True)\nsns.kdeplot(data=df['trtbps'], label='Blood Pressure', shade=True)\nplt.title(\"Distribution Plot\")\nplt.xlabel(\"Level\")\n\nplt.legend()","e35dd3b9":"sns.lineplot(data=df)\nplt.xlabel(\"Count\")\nplt.title(\"Total Column Plot\")","0ea734c7":"sns.pairplot(data=df)","534843b7":"## Correlation\nplt.figure(figsize=(20,10))\nsns.heatmap(df.corr(), annot=True)\nplt.title(\"Correlation\")","7fecaa8c":"# our dataset is imbalanced, balance it using SMOTE\nfrom imblearn.over_sampling import SMOTE\nfrom collections import Counter\n\n# split the dataset\nX = df.drop(\"output\", axis=1)\ny = df['output']\n\n# Split into training and testing\nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.2, random_state=42)\n\nprint(\"----Imbalanced Dataset----\")\ncounter = Counter(y)\nprint(counter)\n\n# transform the dataset\nover = SMOTE()\nX, y = over.fit_resample(X, y)\n\nprint(\"---Balanced Dataset----\")\ncounter = Counter(y)\nprint(counter)","c0df38ad":"## RandomForestClassifer\nnp.random.seed(42)\nmodel1 = RandomForestClassifier()\nmodel1.fit(X_train, y_train)\ny_preds1 = model1.predict(X_test)\ncv = cross_val_score(model1,X,y, cv=5, scoring='accuracy')\nscore = np.mean(cv)\nscore","272e237b":"# GradientBoosting Classifier\nnp.random.seed(42)\nmodel2 = GradientBoostingClassifier()\nmodel2.fit(X_train, y_train)\ny_preds2 = model2.predict(X_test)\ncv = cross_val_score(model2,X,y, cv=5, scoring='accuracy')\nscore = np.mean(cv)\nscore","85347839":"# DecisionTreeClassifier\nnp.random.seed(42)\nmodel3 = DecisionTreeClassifier()\nmodel3.fit(X_train, y_train)\ny_preds3 = model3.predict(X_test)\ncv = cross_val_score(model3,X,y, cv=5, scoring='accuracy')\nscore = np.mean(cv)\nscore","5caa9707":"#KNN\nnp.random.seed(42)\nmodel4 = KNeighborsClassifier()\nmodel4.fit(X_train, y_train)\ny_preds4 = model4.predict(X_test)\ncv = cross_val_score(model4,X,y, cv=5, scoring='accuracy')\nscore = np.mean(cv)\nscore","b44f4ef6":"#LogisticRegression\nnp.random.seed(42)\nmodel5 = LogisticRegression()\nmodel5.fit(X_train, y_train)\ny_preds5 = model5.predict(X_test)\ncv = cross_val_score(model5,X,y, cv=5, scoring='accuracy')\nscore = np.mean(cv)\nscore","e63338c5":"# GaussianNB\nnp.random.seed(42)\nmodel6 = GaussianNB()\nmodel6.fit(X_train, y_train)\ny_preds6 = model6.predict(X_test)\ncv = cross_val_score(model6,X,y, cv=5, scoring='accuracy')\nscore = np.mean(cv)\nscore","b409aeeb":"# SGD\nnp.random.seed(42)\nmodel7 = SGDClassifier()\nmodel7.fit(X_train, y_train)\ny_preds7 = model7.predict(X_test)\ncv = cross_val_score(model7,X,y, cv=5, scoring='accuracy')\nscore = np.mean(cv)\nscore","48021644":"# CatBoost\nnp.random.seed(42)\nmodel8 = CatBoostClassifier(verbose=0)\nmodel8.fit(X_train, y_train)\ny_preds8 = model8.predict(X_test)\ncv = cross_val_score(model8,X,y, cv=5, scoring='accuracy')\nscore = np.mean(cv)\nscore","d73c1be7":"# XGb\nnp.random.seed(42)\nmodel9 = XGBClassifier()\nmodel9.fit(X_train, y_train)\ny_pred9 = model9.predict(X_test)\ncv = cross_val_score(model9,X,y, cv=5, scoring='accuracy')\nscore = np.mean(cv)\nscore","7a39436d":"# LGBM\nnp.random.seed(42)\nmodel10 = LGBMClassifier()\nmodel10.fit(X_train, y_train)\ny_preds10 = model10.predict(X_test)\ncv = cross_val_score(model4,X,y, cv=5, scoring='accuracy')\nscore = np.mean(cv)\nscore","8fd92fe4":"# metrics with best performed model\nprint(f\"Precision score: {precision_score(y_test, y_preds5)}\")\nprint(f\"Recall Score : { recall_score(y_test, y_preds5)}\")\nprint(f\"F1 Score : {f1_score(y_test, y_preds5)}\")\nprint()\nprint(\"-------------Classification Report_________\")\nprint(classification_report(y_test, y_preds5))\nprint()\nsns.heatmap(confusion_matrix(y_test, y_preds5), annot=True)\nplt.title(\"Confusion Matrix\")\nplt.xlabel(\"Predicted Label\")\nplt.ylabel(\"True Label\")","b05c41a0":"grid = {\"penalty\": ['l2' ,'elasticnet'],\n       \"C\" : [0.001,0.01,0.1,1.0],\n       'solver':['liblinear', 'saga'],\n       'multi_class':['ovr','multinomial']}\n\nrandomized = RandomizedSearchCV(estimator=LogisticRegression(),\n                               param_distributions=grid,\n                               n_iter=20,\n                               cv=5,\n                               verbose=1)\nrandomized.fit(X_train, y_train)","ea5522c5":"randomized.best_params_","903a9672":"model = LogisticRegression(penalty='l2',\n                          C=1.0,\n                          solver='liblinear',\n                          multi_class='ovr')\nmodel.fit(X_train, y_train)\nmodel.score(X_test,y_test)","227558c9":"# Make predictions\nmodel.predict(X_test)","112de3a1":"## Modelling","42063301":"## Hyperparameter Tuning","07a16c61":"* **Age** : Age of the patient\n\n* **Sex** : Sex of the patient\n\n* **exang**: exercise induced angina (1 = yes; 0 = no)\n\n* **ca** : number of major vessels (0-3)\n\n* **cp** : Chest Pain type chest pain type\n\n    * Value 1: typical angina\n    * Value 2: atypical angina\n    * Value 3: non-anginal pain\n    * Value 4: asymptomatic\n* **trtbps** : resting blood pressure (in mm Hg)\n\n* **chol** : cholestoral in mg\/dl fetched via BMI sensor\n\n* **fbs** : (fasting blood sugar > 120 mg\/dl) (1 = true; 0 = false)\n \n* **rest_ecg** : resting electrocardiographic results\n\n    *     Value 0: normal\n    *     Value 1: having ST-T wave abnormality (T wave inversions and\/or ST elevation or depression of > 0.05 mV)\n    *     Value 2: showing probable or definite left ventricular hypertrophy by Estes' criteria\n* **thalach** : maximum heart rate achieved\n\n* **output** : 0= less chance of heart attack 1= more chance of heart attack","ae0c342c":"## Data Description","abdc35ce":"## Evaluation Metrics"}}