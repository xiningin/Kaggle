{"cell_type":{"8704ba3f":"code","81b555fb":"code","11303d32":"code","f3bbab58":"code","4ab7c140":"code","d0ef73bc":"code","6f0c6814":"code","dde09549":"code","211ff835":"code","ae1bb6b3":"code","3de59600":"code","c1383578":"code","2a607a9d":"code","6a1f4042":"code","db66ed0e":"code","206f29e3":"code","14119943":"code","8142a12a":"code","a2ac4dcb":"code","8560d002":"markdown","239c32b1":"markdown","a997e8e4":"markdown","1c3ba96e":"markdown","f2ec158e":"markdown","2a40aa8c":"markdown","ea448f9f":"markdown","68c68bd9":"markdown","e52cf28e":"markdown","95b13dd0":"markdown","d970da4c":"markdown","5b9e77e4":"markdown","7565d3de":"markdown","0137a080":"markdown","73fb3d18":"markdown","5f0bd7b4":"markdown","09dd75a7":"markdown","dfcc0892":"markdown","58cdf40d":"markdown","3c0d6ff0":"markdown"},"source":{"8704ba3f":"from mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt # plotting\nimport numpy as np # linear algebra\nimport os # accessing directory structure\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n","81b555fb":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","11303d32":"# Distribution graphs (histogram\/bar graph) of column data\ndef plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n    nunique = df.nunique()\n    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\n    nRow, nCol = df.shape\n    columnNames = list(df)\n    nGraphRow = (nCol + nGraphPerRow - 1) \/ nGraphPerRow\n    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n    for i in range(min(nCol, nGraphShown)):\n        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n        columnDf = df.iloc[:, i]\n        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n            valueCounts = columnDf.value_counts()\n            valueCounts.plot.bar()\n        else:\n            columnDf.hist()\n        plt.ylabel('counts')\n        plt.xticks(rotation = 90)\n        plt.title(f'{columnNames[i]} (column {i})')\n    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)\n    plt.show()\n","f3bbab58":"# Correlation matrix\ndef plotCorrelationMatrix(df, graphWidth):\n    filename = df.dataframeName\n    df = df.dropna('columns') # drop columns with NaN\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    if df.shape[1] < 2:\n        print(f'No correlation plots shown: The number of non-NaN or constant columns ({df.shape[1]}) is less than 2')\n        return\n    corr = df.corr()\n    plt.figure(num=None, figsize=(graphWidth, graphWidth), dpi=80, facecolor='w', edgecolor='k')\n    corrMat = plt.matshow(corr, fignum = 1)\n    plt.xticks(range(len(corr.columns)), corr.columns, rotation=90)\n    plt.yticks(range(len(corr.columns)), corr.columns)\n    plt.gca().xaxis.tick_bottom()\n    plt.colorbar(corrMat)\n    plt.title(f'Correlation Matrix for {filename}', fontsize=15)\n    plt.show()\n","4ab7c140":"# Scatter and density plots\ndef plotScatterMatrix(df, plotSize, textSize):\n    df = df.select_dtypes(include =[np.number]) # keep only numerical columns\n    # Remove rows and columns that would lead to df being singular\n    df = df.dropna('columns')\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    columnNames = list(df)\n    if len(columnNames) > 10: # reduce the number of columns for matrix inversion of kernel density plots\n        columnNames = columnNames[:10]\n    df = df[columnNames]\n    ax = pd.plotting.scatter_matrix(df, alpha=0.75, figsize=[plotSize, plotSize], diagonal='kde')\n    corrs = df.corr().values\n    for i, j in zip(*plt.np.triu_indices_from(ax, k = 1)):\n        ax[i, j].annotate('Corr. coef = %.3f' % corrs[i, j], (0.8, 0.2), xycoords='axes fraction', ha='center', va='center', size=textSize)\n    plt.suptitle('Scatter and Density Plot')\n    plt.show()\n","d0ef73bc":"nRowsRead = 1000 # specify 'None' if want to read whole file\n# Age-standardized suicide rates.csv may have more rows in reality, but we are only loading\/previewing the first 1000 rows\ndf1 = pd.read_csv('\/kaggle\/input\/Age-standardized suicide rates.csv', delimiter=',', nrows = nRowsRead)\ndf1.dataframeName = 'Age-standardized suicide rates.csv'\nnRow, nCol = df1.shape\nprint(f'There are {nRow} rows and {nCol} columns')","6f0c6814":"df1.head(5)","dde09549":"plotPerColumnDistribution(df1, 10, 5)","211ff835":"plotCorrelationMatrix(df1, 8)","ae1bb6b3":"plotScatterMatrix(df1, 12, 10)","3de59600":"nRowsRead = 1000 # specify 'None' if want to read whole file\n# Crude suicide rates.csv may have more rows in reality, but we are only loading\/previewing the first 1000 rows\ndf2 = pd.read_csv('\/kaggle\/input\/Crude suicide rates.csv', delimiter=',', nrows = nRowsRead)\ndf2.dataframeName = 'Crude suicide rates.csv'\nnRow, nCol = df2.shape\nprint(f'There are {nRow} rows and {nCol} columns')","c1383578":"df2.head(5)","2a607a9d":"plotPerColumnDistribution(df2, 10, 5)","6a1f4042":"plotCorrelationMatrix(df2, 8)","db66ed0e":"plotScatterMatrix(df2, 20, 10)","206f29e3":"nRowsRead = 1000 # specify 'None' if want to read whole file\n# Facilities.csv may have more rows in reality, but we are only loading\/previewing the first 1000 rows\ndf3 = pd.read_csv('\/kaggle\/input\/Facilities.csv', delimiter=',', nrows = nRowsRead)\ndf3.dataframeName = 'Facilities.csv'\nnRow, nCol = df3.shape\nprint(f'There are {nRow} rows and {nCol} columns')","14119943":"df3.head(5)","8142a12a":"plotPerColumnDistribution(df3, 10, 5)","a2ac4dcb":"plotCorrelationMatrix(df3, 8)","8560d002":"Distribution graphs (histogram\/bar graph) of sampled columns:","239c32b1":"## Introduction\n> This is the starter notebook for my newly updated dataset on Suicide Rates and Mental Health Facilities. I have added new files in the dataset and hence created a new starter kernel for you to get started with exploring.\n> This is an automatically-generated kernel with starter code demonstrating how to read in the data and begin exploring.","a997e8e4":"Scatter and density plots:","1c3ba96e":"### Let's check 2nd file: \/kaggle\/input\/Crude suicide rates.csv","f2ec158e":"Correlation matrix:","2a40aa8c":"## Exploratory Analysis\nTo begin this exploratory analysis, first use `matplotlib` to import libraries and define functions for plotting the data. Depending on the data, not all plots will be made.","ea448f9f":"Let's take a quick look at what the data looks like:","68c68bd9":"There are 4 csv files in the current version of the dataset:\n","e52cf28e":"Distribution graphs (histogram\/bar graph) of sampled columns:","95b13dd0":"Distribution graphs (histogram\/bar graph) of sampled columns:","d970da4c":"### Let's check 1st file: \/kaggle\/input\/Age-standardized suicide rates.csv","5b9e77e4":"## Conclusion\nThis concludes your starter analysis! To go forward from here, click the blue \"Edit Notebook\" button at the top of the kernel. This will create a copy of the code and environment for you to edit. Delete, modify, and add code as you please. Happy Kaggling!","7565d3de":"Correlation matrix:","0137a080":"Scatter and density plots:","73fb3d18":"### Let's check 3rd file: \/kaggle\/input\/Facilities.csv","5f0bd7b4":"Let's take a quick look at what the data looks like:","09dd75a7":"Now you're ready to read in the data and use the plotting functions to visualize the data.","dfcc0892":"The next hidden code cells define functions for plotting data. Click on the \"Code\" button in the published kernel to reveal the hidden code.","58cdf40d":"Correlation matrix:","3c0d6ff0":"Let's take a quick look at what the data looks like:"}}