{"cell_type":{"9b7f0e1e":"code","2f1f0002":"code","f3ea7540":"code","9d843fc5":"code","28d691dd":"code","85ebaf9e":"code","fb7724d1":"code","50d8ddf0":"code","3035eaf5":"code","bcc97b10":"code","1a5c81af":"code","050c0523":"code","27c26adc":"code","e41a039e":"code","c9235d62":"code","11b944dd":"code","87b73732":"code","bd504325":"code","dbad1630":"markdown","af652c26":"markdown","66719637":"markdown","17327c75":"markdown","60c97e2a":"markdown","066b0d5b":"markdown","5a2b8fe0":"markdown","6a08ab62":"markdown","25145d5e":"markdown","d75bebac":"markdown","ac99b7ca":"markdown","fb01ac00":"markdown","1fd7266e":"markdown","f946f776":"markdown","c024f3f6":"markdown","a9ebcd95":"markdown","453edb3f":"markdown","0f452205":"markdown","430b50fc":"markdown","28a98f80":"markdown","6dd08087":"markdown","3e303ef2":"markdown","663f827d":"markdown","e32d82c6":"markdown","64966449":"markdown"},"source":{"9b7f0e1e":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.tools as tls\nimport os\nimport gc\n\nimport re","2f1f0002":"!unzip \"..\/input\/quora-question-pairs\/train.csv.zip\"","f3ea7540":"df = pd.read_csv(\".\/train.csv\")\n\nprint(\"Number of data points:\",df.shape[0])","9d843fc5":"df.head()","28d691dd":"df.info()","85ebaf9e":"df.groupby(\"is_duplicate\")['id'].count().plot.bar()","fb7724d1":"print('~> Total number of question pairs for training:\\n   {}'.format(len(df)))","50d8ddf0":"print('-> Question pairs are not Similar (is_duplicate = 0):\\n   {}%'.format(100 - round(df['is_duplicate'].mean()*100, 2)))\nprint('\\n-> Question pairs are Similar (is_duplicate = 1):\\n   {}%'.format(round(df['is_duplicate'].mean()*100, 2)))","3035eaf5":"qids = pd.Series(df['qid1'].tolist() + df['qid2'].tolist())\nunique_qs = len(np.unique(qids))\nqs_morethan_onetime = np.sum(qids.value_counts() > 1)\nprint ('Total number of  Unique Questions are: {}\\n'.format(unique_qs))\n#print len(np.unique(qids))\n\nprint ('Number of unique questions that appear more than one time: {} ({}%)\\n'.format(qs_morethan_onetime,qs_morethan_onetime\/unique_qs*100))\n\nprint ('Max number of times a single question is repeated: {}\\n'.format(max(qids.value_counts()))) \n\nq_vals=qids.value_counts()\n\nq_vals=q_vals.values","bcc97b10":"\nx = [\"unique_questions\" , \"Repeated Questions\"]\ny =  [unique_qs , qs_morethan_onetime]\n\nplt.figure(figsize=(10, 6))\nplt.title (\"Plot representing unique and repeated questions  \")\nsns.barplot(x,y)\nplt.show()","1a5c81af":"#checking whether there are any repeated pair of questions\n\npair_duplicates = df[['qid1','qid2','is_duplicate']].groupby(['qid1','qid2']).count().reset_index()\n\nprint (\"Number of duplicate questions\",(pair_duplicates).shape[0] - df.shape[0])","050c0523":"plt.figure(figsize=(20, 10))\n\nplt.hist(qids.value_counts(), bins=160)\n\nplt.yscale('log', nonposy='clip')\n\nplt.title('Log-Histogram of question appearance counts')\n\nplt.xlabel('Number of occurences of question')\n\nplt.ylabel('Number of questions')\n\nprint ('Maximum number of times a single question is repeated: {}\\n'.format(max(qids.value_counts()))) ","27c26adc":"#Checking whether there are any rows with null values\nnan_rows = df[df.isnull().any(1)]\nprint (nan_rows)","e41a039e":"# Filling the null values with ' '\ndf = df.fillna('')\nnan_rows = df[df.isnull().any(1)]\nprint (nan_rows)","c9235d62":"if os.path.isfile('df_fe_without_preprocessing_train.csv'):\n    df = pd.read_csv(\"df_fe_without_preprocessing_train.csv\",encoding='latin-1')\nelse:\n    df['freq_qid1'] = df.groupby('qid1')['qid1'].transform('count') \n    df['freq_qid2'] = df.groupby('qid2')['qid2'].transform('count')\n    df['q1len'] = df['question1'].str.len() \n    df['q2len'] = df['question2'].str.len()\n    df['q1_n_words'] = df['question1'].apply(lambda row: len(row.split(\" \")))\n    df['q2_n_words'] = df['question2'].apply(lambda row: len(row.split(\" \")))\n\n    def normalized_word_Common(row):\n        w1 = set(map(lambda word: word.lower().strip(), row['question1'].split(\" \")))\n        w2 = set(map(lambda word: word.lower().strip(), row['question2'].split(\" \")))    \n        return 1.0 * len(w1 & w2)\n    df['word_Common'] = df.apply(normalized_word_Common, axis=1)\n\n    def normalized_word_Total(row):\n        w1 = set(map(lambda word: word.lower().strip(), row['question1'].split(\" \")))\n        w2 = set(map(lambda word: word.lower().strip(), row['question2'].split(\" \")))    \n        return 1.0 * (len(w1) + len(w2))\n    df['word_Total'] = df.apply(normalized_word_Total, axis=1)\n\n    def normalized_word_share(row):\n        w1 = set(map(lambda word: word.lower().strip(), row['question1'].split(\" \")))\n        w2 = set(map(lambda word: word.lower().strip(), row['question2'].split(\" \")))    \n        return 1.0 * len(w1 & w2)\/(len(w1) + len(w2))\n    df['word_share'] = df.apply(normalized_word_share, axis=1)\n\n    df['freq_q1+q2'] = df['freq_qid1']+df['freq_qid2']\n    df['freq_q1-q2'] = abs(df['freq_qid1']-df['freq_qid2'])\n\n    df.to_csv(\"df_fe_without_preprocessing_train.csv\", index=False)\n\ndf.head()","11b944dd":"print (\"Minimum length of the questions in question1 : \" , min(df['q1_n_words']))\n\nprint (\"Minimum length of the questions in question2 : \" , min(df['q2_n_words']))\n\nprint (\"Number of Questions with minimum length [question1] :\", df[df['q1_n_words']== 1].shape[0])\nprint (\"Number of Questions with minimum length [question2] :\", df[df['q2_n_words']== 1].shape[0])","87b73732":"plt.figure(figsize=(12, 8))\n\nplt.subplot(1,2,1)\nsns.violinplot(x = 'is_duplicate', y = 'word_share', data = df[0:])\n\nplt.subplot(1,2,2)\nsns.distplot(df[df['is_duplicate'] == 1.0]['word_share'][0:] , label = \"1\", color = 'red')\nsns.distplot(df[df['is_duplicate'] == 0.0]['word_share'][0:] , label = \"0\" , color = 'blue' )\nplt.show()","bd504325":"plt.figure(figsize=(12, 8))\n\nplt.subplot(1,2,1)\nsns.violinplot(x = 'is_duplicate', y = 'word_Common', data = df[0:])\n\nplt.subplot(1,2,2)\nsns.distplot(df[df['is_duplicate'] == 1.0]['word_Common'][0:] , label = \"1\", color = 'red')\nsns.distplot(df[df['is_duplicate'] == 0.0]['word_Common'][0:] , label = \"0\" , color = 'blue' )\nplt.show()","dbad1630":"<h3>Checking for Duplicates <\/h3>","af652c26":"<h4>Feature: word_share <\/h4>","66719637":"<h1>Exploratory Data Analysis <\/h1>","17327c75":"<h3> Number of occurrences of each question <\/h3>","60c97e2a":"<p> The distributions of the word_Common feature in similar and non-similar questions are highly overlapping <\/p>","066b0d5b":"<h4>Feature: word_Common <\/h4>","5a2b8fe0":"<h3> Data Overview <\/h3>","6a08ab62":"- Dataset : https:\/\/www.kaggle.com\/c\/quora-question-pairs","25145d5e":"<pre>\n\"id\",\"qid1\",\"qid2\",\"question1\",\"question2\",\"is_duplicate\"\n\"0\",\"1\",\"2\",\"What is the step by step guide to invest in share market in india?\",\"What is the step by step guide to invest in share market?\",\"0\"\n\"1\",\"3\",\"4\",\"What is the story of Kohinoor (Koh-i-Noor) Diamond?\",\"What would happen if the Indian government stole the Kohinoor (Koh-i-Noor) diamond back?\",\"0\"\n\"7\",\"15\",\"16\",\"How can I be a good geologist?\",\"What should I do to be a great geologist?\",\"1\"\n\"11\",\"23\",\"24\",\"How do I read and find my YouTube comments?\",\"How can I see all my Youtube comments?\",\"1\"\n<\/pre>","d75bebac":"<p> \n- Train.csv contains 5 columns : qid1, qid2, question1, question2, is_duplicate <br>\n- Size of Train.csv - 60MB <br>\n- Number of rows in Train.csv = 404,290\n<\/p>","ac99b7ca":"Problem Statement\n- Identify which questions asked on Quora are duplicates of questions that have already been asked. \n- This could be useful to instantly provide answers to questions that have already been answered. \n- We are tasked with predicting whether a pair of questions are duplicates or not. ","fb01ac00":"- There are two rows with null values in question2 ","1fd7266e":"<h2> Data <\/h2>","f946f776":"We are given a minimal number of data fields here, consisting of:\n\n- id:  Looks like a simple rowID\n- qid{1, 2}:  The unique ID of each question in the pair\n- question{1, 2}:  The actual textual contents of the questions.\n- is_duplicate:  The label that we are trying to predict - whether the two questions are duplicates of each other.","c024f3f6":"<h2>Basic Feature Extraction (before cleaning) <\/h2>","a9ebcd95":"<h1 style=\"text-align:center;font-size:30px;\" > Quora Question Pairs Similarity Part-1 <\/h1>","453edb3f":"<h3> Analysis of some of the extracted features <\/h3>","0f452205":"<h3> Distribution of data points among output classes<\/h3>\n- Number of duplicate(smilar) and non-duplicate(non similar) questions","430b50fc":"- The distributions for normalized word_share have some overlap on the far right-hand side, i.e., there are quite a lot of questions with high word similarity\n- The average word share and Common no. of words of qid1 and qid2 is more when they are duplicate(Similar)","28a98f80":"- Here are some questions have only one single words.","6dd08087":"<h3> Checking for NULL values <\/h3>","3e303ef2":"Let us now construct a few features like:\n - ____freq_qid1____ = Frequency of qid1's\n - ____freq_qid2____ = Frequency of qid2's \n - ____q1len____ = Length of q1\n - ____q2len____ = Length of q2\n - ____q1_n_words____ = Number of words in Question 1\n - ____q2_n_words____ = Number of words in Question 2\n - ____word_Common____ = (Number of common unique words in Question 1 and Question 2)\n - ____word_Total____ =(Total num of words in Question 1 + Total num of words in Question 2)\n - ____word_share____ = (word_common)\/(word_Total)\n - ____freq_q1+freq_q2____ = sum total of frequency of qid1 and qid2 \n - ____freq_q1-freq_q2____ = absolute difference of frequency of qid1 and qid2 ","663f827d":"<h3> Example Data point <\/h3>","e32d82c6":"<h3> Number of unique questions <\/h3>","64966449":"<h2>Reading data and basic stats <\/h2>"}}