{"cell_type":{"44fe5f29":"code","90bc9e2a":"code","e49c0ddb":"code","d6de9ece":"code","5e56fc4c":"code","6861d886":"code","0c3669c4":"code","ec83ca13":"code","9e5e6377":"code","615448d8":"code","760d62a2":"code","e330af09":"code","c060e635":"code","c8943de4":"markdown","bee3b68e":"markdown","4fed16c3":"markdown","622cb19b":"markdown","24dabe2a":"markdown","a305aac9":"markdown","60a9bd5b":"markdown"},"source":{"44fe5f29":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","90bc9e2a":"def myfunc(x):\n    if x < 30:\n        mult = 10\n    elif x < 60:\n        mult = 20\n    else:\n        mult = 50\n    return x*mult","e49c0ddb":"print(myfunc(10))\nprint(myfunc(30))\nprint(myfunc(60))","d6de9ece":"import numpy as np\nx = np.arange(0, 100, .01)\n\nmyfuncv = np.vectorize(myfunc)\ny = myfuncv(x)\nX = x.reshape(-1, 1)","5e56fc4c":"import sklearn.model_selection as sk\n\nX_train, X_test, y_train, y_test = sk.train_test_split(X,y,test_size=0.33, random_state = 42)","6861d886":"print(X_train.shape)\nprint(X_test.shape)","0c3669c4":"import matplotlib.pyplot as plt\nplt.scatter(X_train,y_train)","ec83ca13":"plt.scatter(X_test , y_test)","9e5e6377":"import tensorflow as tf\nimport numpy as np\nprint(tf.__version__)","615448d8":"# Import the kera modules\nfrom keras.layers import Input, Dense\nfrom keras.models import Model\n\n# This returns a tensor. Since the input only has one column\ninputs = Input(shape=(1,))\n\n# a layer instance is callable on a tensor, and returns a tensor\n# To the first layer we are feeding inputs\nx = Dense(32, activation='relu')(inputs)\n# To the next layer we are feeding the result of previous call here it is h\nx = Dense(64, activation='relu')(x)\nx = Dense(64, activation='relu')(x)\n\n# Predictions are the result of the neural network. Notice that the predictions are also having one column.\npredictions = Dense(1)(x)\n\n# This creates a model that includes\n# the Input layer and three Dense layers\nmodel = Model(inputs=inputs, outputs=predictions)\nmodel.compile(optimizer='rmsprop',\n              loss='mse',\n              metrics=['mse'])","760d62a2":"model.fit(X_train, y_train,  epochs=550, batch_size=64)  # starts training","e330af09":"# x_test = np.arange(0, 100, 0.02)\n# X_test = x_test.reshape(-1, 1)\ny_test = model.predict(X_test)\nplt.scatter(X_test, y_test)","c060e635":"print(y_test)\nprint(y_test.shape)","c8943de4":"## Training Model\u00b6\n### Importing TensorFlow and Checking its version","bee3b68e":"### Splitting data into Train and Test sets","4fed16c3":"### Generate Data","622cb19b":"## Regression using TensorFlow Keras API\u00b6\n### Data Generation\n### Defining a non-linear function for generating data","24dabe2a":"### Creating a fully connected neural network","a305aac9":"### Testing and Visualizing the model","60a9bd5b":"### Visualize the Data"}}