{"cell_type":{"b1d09cad":"code","fa5ae30b":"code","bb1be843":"code","a0ecafbe":"code","3b13a34d":"code","28e0d950":"code","ebf8d140":"code","326209b6":"code","30e94475":"code","92a9bce6":"code","00731dbe":"code","8af79406":"code","16a89080":"code","407329e5":"code","9148bf11":"code","cf71e1ac":"code","9588ceae":"code","023e07d5":"code","b102198d":"code","040682ac":"code","168d099c":"code","5de4de25":"code","9aa9db7c":"code","e27ddc33":"code","81755a24":"code","373c9527":"code","fd69aebf":"code","c8e0f658":"code","c61f3a22":"code","fd069ae2":"code","55b345ed":"code","39e54680":"code","11e7ab9d":"code","57c74f0c":"code","f834bae0":"code","771c66cd":"code","a6a3e9bf":"code","7c301337":"code","b8b6d8db":"code","8dc39b69":"code","8c68b6a6":"code","d25246b1":"code","44856e6e":"code","01b0ee31":"code","9f380d05":"code","c7e5fa6e":"code","b893b687":"code","7bdbbc60":"code","01be33f7":"code","9a3d9847":"code","6295df78":"code","673b7ca2":"code","11cdb82d":"code","3fd6cb68":"code","e651bfd5":"code","115db9b5":"code","683d4c54":"code","7c550ff5":"code","c75d1c80":"code","af0f9156":"code","f29ef2e7":"code","b92bcfb1":"code","6897c182":"code","ac615682":"code","4e389ec2":"code","5ad323c8":"code","71617a18":"code","e768458a":"code","04adb39d":"markdown","2f0fb2ee":"markdown","cb64278c":"markdown","12ad7a35":"markdown","5d22db26":"markdown","f07668da":"markdown","dd491a5d":"markdown","4b4d4e68":"markdown","c9b22fc2":"markdown","3cd5b7e0":"markdown","08eb6cab":"markdown","2ad8a025":"markdown"},"source":{"b1d09cad":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","fa5ae30b":"from sklearn.decomposition import KernelPCA\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.multiclass import OneVsRestClassifier\nfrom sklearn.utils import class_weight\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.utils import class_weight\nfrom sklearn.metrics import roc_curve, auc, roc_auc_score, f1_score\nfrom sklearn.model_selection import train_test_split\nfrom skmultilearn.model_selection import iterative_train_test_split\nimport pickle\nfrom keras.layers import Dense, Activation, Dropout, BatchNormalization, Input\nfrom keras.models import Sequential, Model\nfrom keras import optimizers, regularizers, initializers\nfrom keras.callbacks import ModelCheckpoint, Callback\nfrom keras import backend as K\nfrom keras.optimizers import Adam\nimport tensorflow as tf\nfrom xgboost import XGBClassifier\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings(\"ignore\")","bb1be843":"NCA1 = 500\nNCA2 = 500\nDROPRATE = 0.2\nEP = 500\nBATCH_SIZE = 256\nVAL_RATIO = 0.1\nTEST_RATIO = 0.1","a0ecafbe":"tox21_df= pd.read_csv('..\/input\/tox21_descriptors\/tox21_df_revised.csv')\nprint(tox21_df.shape)\ntox21_df.head()","3b13a34d":"tox21_df.drop(['mol_id','smiles'], axis=1, inplace=True)\nprint(tox21_df.shape)\ntox21_df.head()","28e0d950":"# Get indices of NaN\n#inds = pd.isnull(tox21_df).any(1).nonzero()[0]","ebf8d140":"# Drop NaN from the dataframe\n#tox21_df.dropna(inplace=True)\n#print(tox21_df.shape)\n#tox21_df.head()","326209b6":"tox21_df = tox21_df.fillna(0)\ntox21_df.head()","30e94475":"tox21_descriptors_df= pd.read_csv('..\/input\/tox21_descriptors\/tox21_descriptors_df.csv',low_memory=False)\nprint(tox21_descriptors_df.shape)\ntox21_descriptors_df.head()","92a9bce6":"# function to coerce all data types to numeric\n\ndef coerce_to_numeric(df, column_list):\n    df[column_list] = df[column_list].apply(pd.to_numeric, errors='coerce')","00731dbe":"coerce_to_numeric(tox21_descriptors_df, tox21_descriptors_df.columns)\ntox21_descriptors_df.head()","8af79406":"tox21_descriptors_df = tox21_descriptors_df.fillna(0)\ntox21_descriptors_df.head()","16a89080":"#tox21_descriptors_df.drop(tox21_descriptors_df.index[inds],inplace=True)\n#tox21_descriptors_df.shape","407329e5":"tox21_scaler1 = StandardScaler()\ntox21_scaler1.fit(tox21_descriptors_df.values)\ntox21_descriptors_df = pd.DataFrame(tox21_scaler1.transform(tox21_descriptors_df.values),\n                                    columns=tox21_descriptors_df.columns)","9148bf11":"nca = NCA1\ncn = ['col'+str(x) for x in range(nca)]","cf71e1ac":"tox21_transformer1 = KernelPCA(n_components=nca, kernel='rbf', n_jobs=-1)\ntox21_transformer1.fit(tox21_descriptors_df.values)\ntox21_descriptors_df = pd.DataFrame(tox21_transformer1.transform(tox21_descriptors_df.values),\n                                    columns=cn)\nprint(tox21_descriptors_df.shape)\ntox21_descriptors_df.head()","9588ceae":"X_train, y_train, X_test, y_test = iterative_train_test_split(tox21_descriptors_df.values,\n                                                              tox21_df.values, \n                                                              test_size=TEST_RATIO)","023e07d5":"X_train, y_train, X_valid, y_valid = iterative_train_test_split(X_train, y_train, \n                                                                test_size=VAL_RATIO)","b102198d":"def Find_Optimal_Cutoff(target, predicted):\n    \"\"\" Find the optimal probability cutoff point for a classification model related to event rate\n    Parameters\n    ----------\n    target : Matrix with dependent or target data, where rows are observations\n\n    predicted : Matrix with predicted data, where rows are observations\n\n    Returns\n    -------     \n    list type, with optimal cutoff value\n\n    \"\"\"\n    fpr, tpr, threshold = roc_curve(target, predicted)\n    i = np.arange(len(tpr)) \n    roc = pd.DataFrame({'tf' : pd.Series(tpr-(1-fpr), index=i), 'threshold' : pd.Series(threshold, index=i)})\n    roc_t = roc.iloc[(roc.tf-0).abs().argsort()[:1]]\n\n    return list(roc_t['threshold']) ","040682ac":"def Find_Optimal_threshold(target, predicted):\n    \n    rng = np.arange(0.0, 0.99, 0.001)\n    f1s = np.zeros((rng.shape[0],predicted.shape[1]))\n    for i in range(0,predicted.shape[1]):\n        for j,t in enumerate(rng):\n            p = np.array((predicted[:,i])>t, dtype=np.int8)\n            scoref1 = f1_score(target[:,i], p, average='binary')\n            f1s[j,i] = scoref1\n            \n    threshold = np.empty(predicted.shape[1])\n    for i in range(predicted.shape[1]):\n        threshold[i] = rng[int(np.where(f1s[:,i] == np.max(f1s[:,i]))[0][0])]\n        \n    return threshold","168d099c":"parameters = {'estimator__class_weight':['balanced'],\n              'estimator__kernel':['rbf','sigmoid'], \n              'estimator__C':[1,0.5,0.25], 'estimator__gamma':['auto','scale']}\ntox21_svc = GridSearchCV(OneVsRestClassifier(SVC(probability=True,\n                                                 random_state=23)), \n                         parameters, cv=3, scoring='roc_auc',n_jobs=-1)","5de4de25":"result = tox21_svc.fit(X_train, y_train)","9aa9db7c":"pred = tox21_svc.predict_proba(X_valid)\npred_svc_t = np.copy(pred)\nroc_auc_score(y_valid,pred)","e27ddc33":"threshold = Find_Optimal_threshold(y_valid, pred)\nprint(threshold)","81755a24":"pred = tox21_svc.predict(X_test)\nf1_score(y_test,pred,average='macro')","373c9527":"pred = tox21_svc.predict_proba(X_test)\npred_svc = np.copy(pred)\nroc_auc_score(y_test,pred)","fd69aebf":"pred[pred<=threshold] = 0\npred[pred>threshold] = 1\nsvc_score = f1_score(y_test,pred,average='macro')\nprint(svc_score)","c8e0f658":"y = X_test[23,:].reshape(1, -1)\nresult = tox21_svc.predict(y)\nprob = tox21_svc.predict_proba(y)\npred = np.copy(prob)\npred[pred<=threshold] = 0\npred[pred>threshold] = 1\nprint(result)\nprint(prob)\nprint(pred)","c61f3a22":"tox21_model = Sequential()\ntox21_model.add(Dense(128, input_dim=tox21_descriptors_df.shape[1], \n                      kernel_initializer='he_uniform'))\ntox21_model.add(BatchNormalization())\ntox21_model.add(Activation('tanh'))\ntox21_model.add(Dropout(rate=DROPRATE))\ntox21_model.add(Dense(64,kernel_initializer='he_uniform'))\ntox21_model.add(BatchNormalization())\ntox21_model.add(Activation('tanh'))\ntox21_model.add(Dropout(rate=DROPRATE))\ntox21_model.add(Dense(32,kernel_initializer='he_uniform'))\ntox21_model.add(BatchNormalization())\ntox21_model.add(Activation('tanh'))\ntox21_model.add(Dropout(rate=DROPRATE))\ntox21_model.add(Dense(tox21_df.shape[1],kernel_initializer='he_uniform',activation='sigmoid'))","fd069ae2":"tox21_model.compile(loss='binary_crossentropy', optimizer='adam',metrics=['accuracy'])","55b345ed":"checkpoint = ModelCheckpoint('tox21_model.h5', monitor='val_loss', verbose=1, save_best_only=True, save_weights_only=True, mode='min')","39e54680":"hist = tox21_model.fit(X_train, y_train, \n                       validation_data=(X_valid,y_valid),epochs=EP, batch_size=BATCH_SIZE, \n                       callbacks=[checkpoint])","11e7ab9d":"plt.ylim(0., 1.)\nplt.plot(hist.epoch, hist.history[\"loss\"], label=\"Train loss\")\nplt.plot(hist.epoch, hist.history[\"val_loss\"], label=\"Valid loss\")","57c74f0c":"tox21_model.load_weights('tox21_model.h5')","f834bae0":"pred = tox21_model.predict(X_valid)\npred_nn_t = np.copy(pred)","771c66cd":"threshold = Find_Optimal_threshold(y_valid, pred)\nprint(threshold)","a6a3e9bf":"pred = tox21_model.predict(X_test)\npred_nn = np.copy(pred)\nroc_auc_score(y_test,pred)","7c301337":"pred[pred<=threshold] = 0\npred[pred>threshold] = 1\nnn_score = f1_score(y_test,pred,average='macro')\nprint(nn_score)","b8b6d8db":"prob = tox21_model.predict(y)\nprob[prob<=threshold] = 0\nprob[prob>threshold] = 1\nprint(prob[0])","8dc39b69":"inp = tox21_model.input\nout = tox21_model.layers[-2].output\ntox21_model_gb = Model(inp, out)","8c68b6a6":"X_train = tox21_model_gb.predict(X_train)\nX_test = tox21_model_gb.predict(X_test)\nX_valid = tox21_model_gb.predict(X_valid)","d25246b1":"data = np.concatenate((X_train,X_test,X_valid),axis=0)","44856e6e":"tox21_scaler2 = StandardScaler()\ntox21_scaler2.fit(data)\nX_train = tox21_scaler2.transform(X_train)\nX_test = tox21_scaler2.transform(X_test)\nX_valid = tox21_scaler2.transform(X_valid)","01b0ee31":"data = np.concatenate((X_train,X_test,X_valid),axis=0)","9f380d05":"nca = NCA2","c7e5fa6e":"tox21_transformer2 = KernelPCA(n_components=nca, kernel='rbf', n_jobs=-1)\ntox21_transformer2.fit(data)\nX_train = tox21_transformer2.transform(X_train)\nX_test = tox21_transformer2.transform(X_test)\nX_valid = tox21_transformer2.transform(X_valid)","b893b687":"nca = X_train.shape[1]\nparameters = {'estimator__class_weight':['balanced'],\n              'estimator__kernel':['rbf','sigmoid'], \n              'estimator__C':[1,0.5,0.25], 'estimator__gamma':['scale','auto']}\n\ntox21_svc_gb = GridSearchCV(OneVsRestClassifier(SVC(probability=True,\n                                                    random_state=23)), \n                            parameters, cv=3, scoring='roc_auc',n_jobs=-1)","7bdbbc60":"result = tox21_svc_gb.fit(X_train, y_train)","01be33f7":"pred = tox21_svc_gb.predict_proba(X_valid)\npred_svc_gb_t = np.copy(pred)\nroc_auc_score(y_valid,pred)","9a3d9847":"threshold = Find_Optimal_threshold(y_valid, pred)\nprint(threshold)","6295df78":"pred = tox21_svc_gb.predict(X_test)\nf1_score(y_test,pred,average='macro')","673b7ca2":"pred = tox21_svc_gb.predict_proba(X_test)\npred_svc_gb = np.copy(pred)\nroc_auc_score(y_test,pred)","11cdb82d":"pred[pred<=threshold] = 0\npred[pred>threshold] = 1\nsvc_gb_score = f1_score(y_test,pred,average='macro')\nprint(svc_gb_score)","3fd6cb68":"y = X_test[23,:].reshape(1, -1)\nresult = tox21_svc_gb.predict(y)\nprob = tox21_svc_gb.predict_proba(y)\nprint(result)\nprint(prob)\nprob[prob<=threshold] = 0\nprob[prob>threshold] = 1\nprint(prob)","e651bfd5":"parameters = {'estimator__learning_rate':[0.05,0.1,0.15],'estimator__n_estimators':[75,100,125], 'estimator__max_depth':[3,5,7],\n              'estimator__booster':['gbtree','dart'],'estimator__reg_alpha':[0.1,0.05],'estimator__reg_lambda':[0.5,1.]}\n\ntox21_xgb_gb = GridSearchCV(OneVsRestClassifier(XGBClassifier(random_state=32)), parameters, cv=3, scoring='roc_auc',n_jobs=-1)","115db9b5":"result = tox21_xgb_gb.fit(X_train, y_train)","683d4c54":"pred = tox21_xgb_gb.predict_proba(X_valid)\npred_xgb_gb_t = np.copy(pred)\nroc_auc_score(y_valid,pred)","7c550ff5":"threshold = Find_Optimal_threshold(y_valid, pred)\nprint(threshold)","c75d1c80":"pred = tox21_xgb_gb.predict(X_test)\nf1_score(y_test,pred,average='macro')","af0f9156":"f1_score(y_test,pred,average=None)","f29ef2e7":"pred = tox21_xgb_gb.predict_proba(X_test)\npred_xgb_gb = np.copy(pred)\nroc_auc_score(y_test,pred)","b92bcfb1":"pred[pred<=threshold] = 0\npred[pred>threshold] = 1\nxgb_gb_score = f1_score(y_test,pred,average='macro')\nprint(xgb_gb_score)","6897c182":"result = tox21_xgb_gb.predict(y)\nprob = tox21_xgb_gb.predict_proba(y)\nprint(result)\nprint(prob)\nprob[prob<=threshold] = 0\nprob[prob>threshold] = 1\nprint(prob)","ac615682":"pred = (pred_svc_t+pred_nn_t+pred_svc_gb_t+pred_xgb_gb_t)\/4.","4e389ec2":"threshold = Find_Optimal_threshold(y_valid, pred)\nprint(threshold)","5ad323c8":"pred = (pred_svc+pred_nn+pred_svc_gb+pred_xgb_gb)\/4.\nprint(roc_auc_score(y_test,pred))\npred[pred<=threshold] = 0\npred[pred>threshold] = 1\nave_score = f1_score(y_test,pred,average='macro')","71617a18":"with open('tox21_svc.pkl', 'wb') as fid:\n    pickle.dump(tox21_svc, fid)\nwith open('tox21_transformer1.pkl', 'wb') as fid:\n    pickle.dump(tox21_transformer1, fid)\nwith open('tox21_transformer2.pkl', 'wb') as fid:\n    pickle.dump(tox21_transformer2, fid)\nwith open('tox21_scaler1.pkl', 'wb') as fid:\n    pickle.dump(tox21_scaler1, fid)\nwith open('tox21_scaler2.pkl', 'wb') as fid:\n    pickle.dump(tox21_scaler2, fid)\nwith open('tox21_svc_gb.pkl', 'wb') as fid:\n    pickle.dump(tox21_svc_gb, fid)\nwith open('tox21_xgb_gb.pkl', 'wb') as fid:\n    pickle.dump(tox21_xgb_gb, fid)","e768458a":"sns.set(style=\"whitegrid\")\nax = sns.barplot(x=[svc_score,nn_score,svc_gb_score,xgb_gb_score,ave_score],\n                 y=['SVC','NN','SVC_GB','XGB_GB','ave'])\nax.set(xlim=(0.30, None))","04adb39d":"## For loading saved model\n\n```python\nwith open('bbbp_svc.pkl', 'rb') as fid:\n    bbbp_svc = pickle.load(fid)\n ```","2f0fb2ee":"The simplified molecular-input line-entry system (**SMILES**) is a specification in form of a line notation for describing the structure of chemical species using short ASCII strings. SMILES can be converted to molecular structure by using RDKIT module.\n\nExample: \n```python\nfrom rdkit import Chem\nm = Chem.MolFromSmiles('Cc1ccccc1')\n```\n\nFurther reading:\n* https:\/\/www.rdkit.org\/docs\/GettingStartedInPython.html","cb64278c":"## Loading Tox21 dataset\n\n**Tox21**: Qualitative toxicity measurements on 12 biological targets, including nuclear receptors and stress response pathways.\n","12ad7a35":"## Scaling and Principal component analysis (PCA) ","5d22db26":"## Saving models, transformer and scaler","f07668da":"## Gradient Boosting of Keras Model with SVC","dd491a5d":"# Comparision of Results with MoleculeNet results\n\nhttp:\/\/moleculenet.ai\/full-results\n\nThe AUC ROC best score on the test data for the MoleculeNet models is ~82, the best score obtained in this kernel is ~82 on the test data. \n\n**Further Reading:**\n* https:\/\/arxiv.org\/pdf\/1703.00564.pdf","4b4d4e68":"## Keras Neural Network Model","c9b22fc2":"## Sklearn SVC Model","3cd5b7e0":"## Loading molecular descriptors\n\nDescriptors dataframe contains 1625 molecular descriptors (including 3D descriptors) generated on the NCI database using Mordred python module.\n\nFurther Reading:\n* https:\/\/en.wikipedia.org\/wiki\/Molecular_descriptor\n* https:\/\/github.com\/mordred-descriptor\/mordred","08eb6cab":"## Gradient Boosting of Keras Model with XGBoost","2ad8a025":"## F1 Score"}}