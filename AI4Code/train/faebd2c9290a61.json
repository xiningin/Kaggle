{"cell_type":{"aca7d846":"code","16d8a341":"code","b83ddf38":"code","dcf0ba3c":"code","1362cf78":"code","8edae642":"code","f8e50fe1":"code","6d3547b6":"code","a3e142ae":"code","fd60447e":"code","250dc3c3":"code","e45f8b5b":"code","a713e58a":"code","a2920c04":"code","370ea0c0":"code","f31c1c8a":"code","b2f6d629":"code","488a80fd":"code","b6752f02":"code","ace05fa3":"code","4e1fec70":"code","1dcd23ef":"code","ee5e7a4a":"code","3f291793":"markdown","9086a3cd":"markdown","0e11b400":"markdown","ebd52d96":"markdown"},"source":{"aca7d846":"import pickle\nimport pandas as pd\nimport numpy as np\nimport os, sys, gc \nfrom plotnine import *\nimport plotnine\n\nfrom tqdm import tqdm_notebook\nimport seaborn as sns\nimport warnings\nimport matplotlib.pyplot as plt\nimport matplotlib.font_manager as fm\nimport matplotlib as mpl\nfrom matplotlib import rc\nimport re\nfrom matplotlib.ticker import PercentFormatter\nimport datetime\nfrom math import log # IDF \uacc4\uc0b0\uc744 \uc704\ud574","16d8a341":"path = \"..\/input\/t-academy-recommendation\/\"","b83ddf38":"# pd.read_json : json \ud615\ud0dc\uc758 \ud30c\uc77c\uc744 dataframe \ud615\ud0dc\ub85c \ubd88\ub7ec\uc624\ub294 \ucf54\ub4dc \nmagazine = pd.read_json(path + 'magazine.json', lines=True) # lines = True : Read the file as a json object per line.\nmetadata = pd.read_json(path + 'metadata.json', lines=True)\nusers = pd.read_json(path + 'users.json', lines=True)","dcf0ba3c":"%%time \nimport itertools\nfrom itertools import chain\nimport glob\nimport os \n\n\ndef chainer(s):\n    return list(itertools.chain.from_iterable(s))","1362cf78":"read_rowwise = pd.read_csv(path + \"read_rowwise.csv\")","8edae642":"from datetime import datetime \n\nmetadata['reg_datetime'] = metadata['reg_ts'].apply(lambda x : datetime.fromtimestamp(x\/1000.0))\nmetadata.loc[metadata['reg_datetime'] == metadata['reg_datetime'].min(), 'reg_datetime'] = datetime(2090, 12, 31)\nmetadata['reg_dt'] = metadata['reg_datetime'].dt.date\nmetadata['type'] = metadata['magazine_id'].apply(lambda x : '\uac1c\uc778' if x == 0.0 else '\ub9e4\uac70\uc9c4')\nmetadata['reg_dt'] = pd.to_datetime(metadata['reg_dt'])","f8e50fe1":"read_rowwise = read_rowwise.merge(metadata[['id', 'reg_dt']], how='left', left_on='article_id', right_on='id')\nread_rowwise = read_rowwise[read_rowwise['article_id'] != '']\n\n# \uc0ac\uc6a9\uc790\uac00 \uc77d\uc740 \uae00\uc758 \ubaa9\ub85d\ub4e4\uc744 \uc800\uc7a5 \nread_total = pd.DataFrame(read_rowwise.groupby(['user_id'])['article_id'].unique()).reset_index()\nread_total.columns = ['user_id', 'article_list']","6d3547b6":"read_rowwise = read_rowwise[(read_rowwise['id'].notnull()) & (read_rowwise['reg_dt'].notnull())]\nread_rowwise = read_rowwise[(read_rowwise['reg_dt'] >= '2019-01-01') & (read_rowwise['reg_dt'] < '2090-12-31')].reset_index(drop=True)\ndel read_rowwise['id']","a3e142ae":"user2idx = {}\nfor i, l in enumerate(read_rowwise['user_id'].unique()):\n    user2idx[l] = i\n    \narticle2idx = {}\nfor i, l in enumerate(read_rowwise['article_id'].unique()):\n    article2idx[l] = i","fd60447e":"print(len(user2idx), len(article2idx))","250dc3c3":"valid = pd.read_csv(path + '\/predict\/dev.users', header=None)","e45f8b5b":"read_total_valid = read_total[read_total['user_id'].isin(valid[0])].reset_index(drop=True)\nread_total_train = read_total[~read_total['user_id'].isin(valid[0])].reset_index(drop=True)","a713e58a":"read_total_train['article_len'] = read_total_train['article_list'].apply(lambda x: len(x))\ntop10_percent = np.percentile(read_total_train['article_len'].values, 90)\nread_total_train = read_total_train[read_total_train['article_len'] >= top10_percent]\nhot_user = read_total_train['user_id'].unique()\n\nuser_total = pd.DataFrame(read_rowwise.groupby(['article_id'])['user_id'].unique()).reset_index()\nuser_total.columns = ['article_id', 'user_list']\n\nuser_total['user_len'] = user_total['user_list'].apply(lambda x: len(x))\ncold_article = user_total[user_total['user_len'] <= 20]['article_id'].unique()","a2920c04":"read_rowwise = read_rowwise[read_rowwise['user_id'].isin(np.append(hot_user, valid[0].values))]\nread_rowwise = read_rowwise[~read_rowwise['article_id'].isin(cold_article)]","370ea0c0":"user2idx = {}\nfor i, l in enumerate(read_rowwise['user_id'].unique()):\n    user2idx[l] = i\n    \narticle2idx = {}\nfor i, l in enumerate(read_rowwise['article_id'].unique()):\n    article2idx[l] = i","f31c1c8a":"idx2user = {i: user for user, i in user2idx.items()}\nidx2article = {i: item for item, i in article2idx.items()}","b2f6d629":"print(len(user2idx), len(article2idx))","488a80fd":"data = read_rowwise[['user_id', 'article_id']].reset_index(drop=True)\nuseridx = data['useridx'] = read_rowwise['user_id'].apply(lambda x: user2idx[x]).values\narticleidx = data['articleidx'] = read_rowwise['article_id'].apply(lambda x: article2idx[x]).values\nrating = np.ones(len(data))","b6752f02":"import scipy\n\npurchase_sparse = scipy.sparse.csr_matrix((rating, (useridx, articleidx)), shape=(len(set(useridx)), len(set(articleidx))))","ace05fa3":"from implicit.evaluation import *\nfrom implicit.als import AlternatingLeastSquares as ALS","4e1fec70":"als_model = ALS(factors=20, regularization=0.08, iterations = 20)\nals_model.fit(purchase_sparse.T)","1dcd23ef":"als_model.recommend(0, purchase_sparse, N=150)[0:10]","ee5e7a4a":"popular_rec_model = read_rowwise['article_id'].value_counts().index[0:1000]\n\nwith open('recommend.txt', 'w') as f:\n    for user in tqdm_notebook(valid[0].values):\n        # \ucd94\ucc9c \ud6c4\ubcf4 \n        seen = chainer(read_total[read_total['user_id'] == user]['article_list'].values)\n        \n        try:\n            recs = als_model.recommend(user2idx[user], purchase_sparse, N=150)\n            recs = [idx2article[x[0]] for x in recs][0:100]          \n            f.write('%s %s\\n' % (user, ' '.join(recs)))\n        except:\n            recs = popular_rec_model[0:100]\n            f.write('%s %s\\n' % (user, ' '.join(recs)))","3f291793":"### implicit\uc758 ALS \ubc29\ubc95","9086a3cd":"![](https:\/\/github.com\/choco9966\/T-academy-Recommendation\/blob\/master\/figure\/Collaborative_Based_score.PNG?raw=true)","0e11b400":"## \ud611\uc5c5\ud544\ud130\ub9c1 \uae30\ubc18\uc758 \ubaa8\ub378\n- Implicit\uc758 ALS \ubc29\ubc95","ebd52d96":"\ud611\uc5c5\ud544\ud130\ub9c1\uc744 \uc801\uc6a9\uc2dc\uc5d0 \ubc1c\uc0dd\uac00\ub2a5\ud55c \ubb38\uc81c\uc810 \n- \uc0ac\uc6a9\uc790\uc640 \uc544\uc774\ud15c\uc758 \uc218\uac00 \ub108\ubb34 \ub9ce\uae30\uc5d0 \uba54\ubaa8\ub9ac\uc0c1\uc758 \ubb38\uc81c\uac00 \ubc1c\uc0dd\n- 148098 * 48649\n\n\ud574\uacb0\ubc29\uc548 \n- \uc720\uc758\ubbf8\ud558\uc9c0 \uc54a\uc740 \uc0ac\uc6a9\uc790\uc640 \uc544\uc774\ud15c\uc744 \uc81c\uac70 \n    - \uc77d\uc740 article\uc758 \uac2f\uc218\uac00 20\uac1c \uc774\ud558\uc778 user_id\n    - \uc0ac\ub78c\ub4e4\uc5d0\uac8c \uc77d\ud78c \ud69f\uc218\uac00 20\ubc88 \uc774\ud558\uc778 article_id \ub294 \uc0ad\uc81c\n- \ucd94\ucc9c\ud560 \ub300\uc0c1\uc790\ub294 \ud3ec\ud568 + \ucd94\ucc9c\ud558\uc9c0 \uc54a\uc740 \ub300\uc0c1\uc790\ub294 \uc0c1\uc704 10%\ub9cc \uc120\ud0dd"}}