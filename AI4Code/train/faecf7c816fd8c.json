{"cell_type":{"9f41a673":"code","41767385":"code","2c20a24d":"code","0d017c22":"code","f8115d7e":"code","5f150a90":"code","eaac53e8":"code","98a21d88":"code","ae8df485":"code","8f7ae8b1":"code","d76444b4":"code","90121bda":"code","f31cd95b":"code","04f7d345":"code","0799aa48":"code","5eef2ffb":"code","022fec11":"code","073af3e6":"code","13f1c702":"code","e1957d9f":"code","a335b5ad":"code","fbe7c92b":"markdown","d7bb7484":"markdown"},"source":{"9f41a673":"# Standard libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport glob\nimport plotly.express as px\nimport os\nimport warnings\n\n# Local server SQL database\nimport sqlite3 as sq\n\n# Setting of Large numbers format\npd.options.display.float_format = '{:,.2f}'.format\n\n# Set data frame display max 10 rows\npd.set_option('display.max_rows', 10)\n\n# Warning is suppressed\nwarnings.simplefilter(action='ignore', category=FutureWarning)","41767385":"# Set-up a connection to a newly named project1.db\ncon = sq.connect('project1.db')\ncur = con.cursor()","2c20a24d":"# Get the count of customers_dataset table\ncur.execute(''' SELECT count(name) FROM sqlite_master WHERE type='table' AND name='..\/input\/brazilian-ecommerce\/olist_customers_dataset.csv' OR name='customers_dataset' ''')\n\n# If the count is 1, then customers_dataset table already exists\nif cur.fetchone()[0]==1 : {\n\tprint('Table already created.')\n}\nelse: # Read all files from csv to db format\n    path = '..\/input\/brazilian-ecommerce'\n    all_files = glob.glob(path + \"\/*.csv\")\n    for file in all_files: # For all files in our directory\n        df = pd.read_csv(file, index_col=0) # Read each CSV file\n        df.to_sql(file, con) # Create the read file as a table in the database.","0d017c22":"# Get the count of customers_dataset table\ncur.execute(''' SELECT count(name) FROM sqlite_master WHERE type='table' AND name='customers_dataset' ''')\n\n# If the count is 1, then customers_dataset table already renamed\nif cur.fetchone()[0]==1:\n\tprint('Table already renamed.')\n\nelse:\n    # Rename all tables\n    rename_tables_query1 = 'ALTER TABLE \"..\/input\/brazilian-ecommerce\/olist_customers_dataset.csv\" RENAME TO \"customers_dataset\"'\n    rename_tables_query2 = 'ALTER TABLE \"..\/input\/brazilian-ecommerce\/olist_geolocation_dataset.csv\" RENAME TO \"geolocation_dataset\"'\n    rename_tables_query3 = 'ALTER TABLE \"..\/input\/brazilian-ecommerce\/olist_orders_dataset.csv\" RENAME TO \"orders_dataset\"'\n    rename_tables_query4 = 'ALTER TABLE \"..\/input\/brazilian-ecommerce\/olist_order_items_dataset.csv\" RENAME TO \"order_items_dataset\"'\n    rename_tables_query5 = 'ALTER TABLE \"..\/input\/brazilian-ecommerce\/olist_order_payments_dataset.csv\" RENAME TO \"order_payments_dataset\"'\n    rename_tables_query6 = 'ALTER TABLE \"..\/input\/brazilian-ecommerce\/olist_order_reviews_dataset.csv\" RENAME TO \"order_reviews_dataset\"'\n    rename_tables_query7 = 'ALTER TABLE \"..\/input\/brazilian-ecommerce\/olist_products_dataset.csv\" RENAME TO \"products_dataset\"'\n    rename_tables_query8 = 'ALTER TABLE \"..\/input\/brazilian-ecommerce\/olist_sellers_dataset.csv\" RENAME TO \"sellers_dataset\"'\n    rename_tables_query9 = 'ALTER TABLE \"..\/input\/brazilian-ecommerce\/product_category_name_translation.csv\" RENAME TO \"product_category_name_translation\"'\n\n    # The function read_sql takes a query string and a database connection, and performs the query.\n    rename_tables1 = pd.read_sql(rename_tables_query1, con)\n    rename_tables2 = pd.read_sql(rename_tables_query2, con)\n    rename_tables3 = pd.read_sql(rename_tables_query3, con)\n    rename_tables4 = pd.read_sql(rename_tables_query4, con)\n    rename_tables5 = pd.read_sql(rename_tables_query5, con)\n    rename_tables6 = pd.read_sql(rename_tables_query6, con)\n    rename_tables7 = pd.read_sql(rename_tables_query7, con)\n    rename_tables8 = pd.read_sql(rename_tables_query8, con)\n    rename_tables9 = pd.read_sql(rename_tables_query9, con)","f8115d7e":"# Read all table names\ntable_list = [a for a in cur.execute(\"SELECT name FROM sqlite_master WHERE type = 'table'\")]\n\n# Table list\nprint(table_list)","5f150a90":"# Write a SQL query of Total Orders and Total Sales\nq1 = (\n      'SELECT count(a.order_id) AS Total_Orders, '\n      '       sum(b.price + b.freight_value) AS Total_Sales '\n      'FROM orders_dataset AS a '\n      'INNER JOIN order_items_dataset AS b '\n      'ON a.order_id = b.order_id '\n      )\n\n# Convert the SQL query to Pandas data Frame\nr1 = pd.read_sql(q1, con)\nr1","eaac53e8":"# Write a SQL query of Orders by Time\nq2 = (\n      'SELECT strftime(\"%Y-%m\", order_approved_at) AS date, '\n      '       COUNT(order_id) AS order_qty '\n      'FROM orders_dataset '\n      'GROUP BY date '\n      'ORDER BY date '\n      )\n\n# Convert the SQL query to Pandas data Frame\nr2 = pd.read_sql(q2, con)\nr2.head(5)","98a21d88":"# Plotting orders by time data \nfig1 = px.bar(r2, x=\"date\", y=\"order_qty\", orientation='v', title='Orders by Date in Brazilian E-Commerce (2016-2018)')\nfig1.show()","ae8df485":"# Write a SQL query of Sales by Time\nq3 = (\n      'SELECT strftime(\"%Y-%m\", a.order_approved_at) AS date, '\n      '       SUM(b.price) AS sales '\n      'FROM orders_dataset AS a '\n      'INNER JOIN order_items_dataset AS b '\n      'ON a.order_id = b.order_id '\n      'GROUP BY date '\n      'ORDER BY date '\n      )\n\n# Convert the SQL query to Pandas data Frame\nr3 = pd.read_sql(q3, con)\nr3.head(5)","8f7ae8b1":"# Plotting sales by time data \nfig2 = px.line(r3, x=\"date\", y=\"sales\", title='Sales by Time in Brazilian E-Commerce (2016-2018)')\nfig2.show()","d76444b4":"# Write a SQL query of Selling Product Categories Quantity\nq4 = (\n      'SELECT a.product_category_name_english AS product, '\n      '       COUNT(b.product_category_name) AS qty '\n      'FROM product_category_name_translation AS a '\n      'INNER JOIN products_dataset AS b '\n      'ON a.product_category_name = b.product_category_name '\n      'GROUP BY product '\n      'ORDER BY qty DESC '\n      )\n\n# Convert the SQL query to Pandas data Frame\nr4 = pd.read_sql(q4, con)\nr4_top = r4.head(5)\nr4_top","90121bda":"# Plotting selling product categories quantity data\nfig3 = px.bar(r4_top, x=\"qty\", y=\"product\", orientation='h', barmode=\"group\", title='Top 5 Selling Product Categories in Brazilian E-Commerce (2016-2018)')\nfig3.update_layout(yaxis={'categoryorder':'total ascending'})\nfig3.show()","f31cd95b":"# Write a SQL query of Sellers by City\nq5 = (\n      'WITH temp_sellers AS '\n      '( '\n      '      SELECT a.seller_city AS seller_city, '\n      '      COUNT(b.order_id) AS sales_qty, '\n      '      COUNT(b.order_id) * 100.0 \/ SUM(COUNT(b.order_id)) OVER () AS temp_sales_percentage '\n      '      FROM sellers_dataset AS a '\n      '      INNER JOIN order_items_dataset AS b '\n      '      ON a.seller_id = b.seller_id '\n      '      GROUP BY seller_city '\n      '      ORDER BY sales_qty DESC '\n      ') '\n      'SELECT seller_city, '\n      '       sales_qty, '\n      '       printf(\"%.2f\", temp_sales_percentage) AS sales_percentage '\n      'FROM temp_sellers '\n      )\n\n# Convert the SQL query to Pandas data Frame\nr5 = pd.read_sql(q5, con)\nr5_top = r5.head(5)\nr5_top","04f7d345":"# Plotting selling sellers by city data\nfig4 = px.bar(r5_top, x=\"sales_qty\", y=\"seller_city\", orientation='h', hover_data=['sales_percentage'], color='sales_percentage', title='Top 5 Sellers by City in Brazilian E-Commerce (2016-2018)')\nfig4.update_layout(yaxis={'categoryorder':'total ascending'})\nfig4.show()","0799aa48":"# Write a SQL query of Customers by City\nq6 = (\n      'WITH temp_customer AS '\n      '( '\n      '      SELECT a.customer_city AS customer_city, '\n      '      COUNT(b.order_id) AS order_qty, '\n      '      COUNT(b.order_id) * 100.0 \/ SUM(COUNT(b.order_id)) OVER () AS temp_order_percentage '\n      '      FROM customers_dataset AS a '\n      '      INNER JOIN orders_dataset AS b '\n      '      ON a.customer_id = b.customer_id '\n      '      GROUP BY customer_city '\n      '      ORDER BY order_qty DESC '\n      ') '\n      'SELECT customer_city, '\n      '       order_qty, '\n      '       printf(\"%.2f\", temp_order_percentage) AS order_percentage '\n      'FROM temp_customer '\n      )\n\n# Convert the SQL query to Pandas data Frame\nr6 = pd.read_sql(q6, con)\nr6_top = r6.head(5)\nr6_top","5eef2ffb":"# Plotting selling customer by city data\nfig5 = px.bar(r6_top, x=\"order_qty\", y=\"customer_city\", orientation='h', hover_data=['order_percentage'], color='order_percentage', title='Top 5 Customers by City in Brazilian E-Commerce (2016-2018)')\nfig5.update_layout(yaxis={'categoryorder':'total ascending'})\nfig5.show()","022fec11":"# Write a SQL query of Average, Max, and Min Products\nq7 = (\n      'SELECT AVG(price) AS Average_Price, '\n      '       MAX(price) AS Max_Price, '\n      '       MIN(price) AS Min_Price '\n      'FROM order_items_dataset '\n      )\n\n# Convert the SQL query to Pandas data Frame\nr7 = pd.read_sql(q7, con)\nr7","073af3e6":"q8 = (\n      'WITH average_time AS '\n      '( '\n      '     SELECT julianday(order_estimated_delivery_date) - julianday(order_delivered_customer_date) AS delivery_time '\n      '     FROM orders_dataset '\n      '     WHERE order_status = \"delivered\" '\n      ') '\n      'SELECT AVG(delivery_time) AS \"Average_Delivery_Time_Interval_(Estimated_vs_Actual)\" '\n      'FROM average_time '\n      )\n\n# Convert the SQL query to Pandas data Frame\nr8 = pd.read_sql(q8, con)\nr8","13f1c702":"# Write a SQL query of Delivery Interval (Estimated vs Actual) per Month\nq9 = (\n      'WITH average_time AS '\n      '( '\n      '     SELECT strftime(\"%Y-%m\", order_delivered_customer_date) AS date, '\n      '            julianday(order_estimated_delivery_date) - julianday(order_delivered_customer_date) AS delivery_time, '\n      '            COUNT(order_id) AS qty'\n      '     FROM orders_dataset '\n      '     WHERE order_status = \"delivered\" '\n      '     GROUP BY date '\n      '     ORDER BY date '\n      ') '\n      'SELECT date AS Date, delivery_time AS Day, qty AS Qty '\n      'FROM average_time '\n      )\n\n# Convert the SQL query to Pandas data Frame\nr9 = pd.read_sql(q9, con)\nr9","e1957d9f":"# Plotting Delivery Interval (Estimated vs Actual) per Month data \nfig6 = px.bar(r9, x=\"Date\", y=\"Day\", orientation='v', hover_data=['Qty'], color='Qty', title='Delivery Interval (Estimated vs Actual) per Month in<br>Brazilian E-Commerce (2016-2018)')\nfig6.show()","a335b5ad":"# Close connection to Database\ncon.close()","fbe7c92b":"The objective of this notebook is merely an exercise to showcase some required skills for a Business Intelligence like SQL query and Python language. Thus, I do some simple data visualization & aggregation of e-commerce in Brazil.","d7bb7484":"# DATA VISUALIZATION & DATA AGGREGATION WITH PYTHON & SQL\n[Muhammad Rifki](https:\/\/www.linkedin.com\/in\/muhammadrifki\/) - January 2021"}}