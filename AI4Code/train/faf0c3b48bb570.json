{"cell_type":{"0f24da01":"code","72575f87":"code","cd98df3c":"code","7d2736e6":"code","1f11d8b2":"code","94207016":"code","b6e2f77c":"code","71285e2b":"code","07af3620":"code","1b40bfb7":"code","0cead67d":"code","1450d22a":"code","981158cb":"code","89018c5e":"code","fa1af814":"code","38b21007":"code","c31196ff":"code","f80a60f6":"code","9aeb4625":"code","adafedde":"code","be1aff73":"code","2b25446a":"markdown","b699f30e":"markdown","c3ebe622":"markdown","eefa4181":"markdown","1bce74d3":"markdown","b541d59b":"markdown","f308e28d":"markdown","dc46690a":"markdown","070ad790":"markdown","a5775abe":"markdown"},"source":{"0f24da01":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport cv2\nimport os\nimport math\nimport seaborn as sns","72575f87":"input_dir = \"\/kaggle\/input\"\nsample_submission = os.path.join(input_dir,\"petfinder-pawpularity-score\/sample_submission.csv\")\ntrain_csv = os.path.join(input_dir,\"petfinder-pawpularity-score\/train.csv\")\ntest_csv = os.path.join(input_dir,\"petfinder-pawpularity-score\/test.csv\")\n\ntrain_dir = os.path.join(input_dir,\"petfinder-pawpularity-score\/train\")\ntest_dir = os.path.join(input_dir,\"petfinder-pawpularity-score\/test\")\n","cd98df3c":"train_df = pd.read_csv(train_csv)","7d2736e6":"train_df.head()","1f11d8b2":"train_df.describe()","94207016":"train_files = os.listdir(train_dir)\nlen(train_files)","b6e2f77c":"plt.figure(figsize=(10,5))\nsns.histplot(data=train_df, x='Pawpularity',color='orange', kde=True)\nmean_p = train_df['Pawpularity'].mean()\nplt.axvline(mean_p, c='purple', ls='-', lw=4, label=\"Mean\")\nplt.legend()\nplt.show()","71285e2b":"print(\"Mean Pawpularity:\", mean_p)","07af3620":"test_data = pd.read_csv(test_csv)","1b40bfb7":"len(test_data)","0cead67d":"for col in train_df.columns[1:-1]:\n    set1_df = train_df[train_df[col]==1]\n    set1_mean = set1_df['Pawpularity'].mean()\n    set1_std = set1_df['Pawpularity'].std()\n    set2_df = train_df[train_df[col]==0]\n    set2_mean = set2_df['Pawpularity'].mean()\n    set2_std = set2_df['Pawpularity'].std()\n    print(f\"{col}: {set1_mean} ({set1_std}), {set2_mean} ({set2_std})\")\n                          \n    ","1450d22a":"fig = plt.figure(figsize=(18,40))\nfor i, col in enumerate(train_df.columns[1:-1]):\n    ax = plt.subplot(12,2,(i*2)+1)\n    df1 = train_df[train_df[col]==1]\n    sns.histplot(data=df1, x=df1['Pawpularity'], bins=25, fill=True, kde=True, ax=ax)\n    ax.set_xlabel(None)\n    mean_p1 = df1['Pawpularity'].mean()\n    ax.axvline(mean_p1, c='red', ls='-', lw=3, label=\"Mean\")\n    ax.set_title(f\"{col} =1, count={df1['Pawpularity'].count()}\", fontweight='bold', color=\"blue\")\n    \n    ax = plt.subplot(12,2,(i*2)+2)\n    df2 = train_df[train_df[col]==0]\n    sns.histplot(data=df1, x=df2['Pawpularity'], bins=25, kde=True, ax=ax)\n    ax.set_xlabel(None)\n    mean_p2 = df2['Pawpularity'].mean()\n    ax.axvline(mean_p2, c='red', ls='-', lw=3, label=\"Mean\")\n    ax.set_title(f\"{col} =0, count={df2['Pawpularity'].count()}\", fontweight='bold', color=\"blue\")\n\nplt.suptitle(\"Pawpularity distribution for different predectors \", y=0.9,\n           fontsize=20, fontweight='bold')\nplt.show()  ","981158cb":"from PIL import Image","89018c5e":"train_df['im_width'] = 0\ntrain_df['im_height'] = 0\ntrain_df['resolution'] = 0\n\nfor index, row in train_df.iterrows():\n    im_path = os.path.join(train_dir,row['Id']+\".jpg\")\n    #im = cv2.imread(im_path) no need to load image content\n    #height,width = im.shape[:2]\n    im = Image.open(im_path) # hopefully efficient option to load image for dimention checking\n    width, height = im.size\n    train_df.loc[index,'im_width'] = width\n    train_df.loc[index,'im_height'] = height\n    train_df.loc[index,'resolution'] = int(round(width * height,0))","fa1af814":"plt.figure(figsize=(15,7))\nsns.histplot(data=train_df, x='resolution',color='orange')\nmean_p = train_df['resolution'].mean()\nplt.axvline(mean_p, c='purple', ls='-', lw=4, label=\"Mean\")\nplt.legend()\nplt.show()","38b21007":"low_resolutions = train_df[train_df['resolution'] < 100000]\nlen(low_resolutions)","c31196ff":"high_resolutions = train_df[train_df['resolution'] > 1500000]\nlen(high_resolutions)","f80a60f6":"fig = plt.figure(figsize=(15,7))\nax = plt.subplot(1,2,1)\nsns.histplot(data=low_resolutions, x=low_resolutions['Pawpularity'], bins=25, fill=True, kde=True, ax=ax)\nax.set_xlabel(None)\nmean_p1 = low_resolutions['Pawpularity'].mean()\nax.axvline(mean_p1, c='red', ls='-', lw=3, label=\"Mean\")\nax.set_title(f\"Lowest resolution Pawpularity distribution\", fontweight='bold', color=\"#e7273e\")\n\nax = plt.subplot(1,2,2)\nsns.histplot(data=high_resolutions, x=high_resolutions['Pawpularity'], bins=25, fill=True, kde=True, ax=ax)\nax.set_xlabel(None)\nmean_p2 = high_resolutions['Pawpularity'].mean()\nax.axvline(mean_p2, c='red', ls='-', lw=3, label=\"Mean\")\nax.set_title(f\"Highest resolution Pawpularity distribution\", fontweight='bold', color=\"#e7273e\")\n","9aeb4625":"def see_animals(df):\n    \n    max_imgs = min(18,len(df))\n    \n    plt.figure(figsize=(15, 30))\n    cols = 3\n    rows = int(math.ceil(max_imgs \/ cols))\n    \n    for i in range(max_imgs):\n        \n        row = df.iloc[i]\n        im_path = os.path.join(train_dir,row['Id']+\".jpg\")\n        im = cv2.imread(im_path)\n        im = cv2.cvtColor(im, cv2.COLOR_BGR2RGB)\n        plt.subplot(rows,cols,i+1)       \n        Pawpularity = row['Pawpularity']\n        title = f\"Pawpularity: {Pawpularity}, \"\n        \n        for i, col in enumerate(train_df.columns[1:-1]):\n            if i % 3 == 0 :\n                title+=\"\\n\"\n            title+=f\"{col}: {row[col]}, \"\n            \n                \n        plt.title(title)\n        \n        plt.imshow(im)\n        plt.axis('off')\n    \n    plt.tight_layout()\n    plt.show()\n    plt.close()","adafedde":"see_animals(train_df[train_df['Pawpularity'] > 90].sample(18))","be1aff73":"see_animals(train_df[train_df['Pawpularity']<20].sample(18))","2b25446a":"# Conclusion based on metadata analysis. \n* The Pawpularity distribution is equally influenced by each predictor and there is no evident trend.\u00a0\n* All metadata including image resolution is not biased toward any trend of Pawpularity, so\\It's difficult to accurately predict Pawpularity based on just meta data.\n* The only hope is to find something in images.","b699f30e":"## Pets with low Pawpularity","c3ebe622":"# Visualizing Training images\nLet's visualize images randomly. ","eefa4181":"# Metadata EDA\nLets do EDA using metadata. ","1bce74d3":"Let's see the Histogram of Pawpularity based for different values of predictors.\u00a0","b541d59b":"# Conclusion based on image observations\n## Most pets with high Pawpularity are looking\n* Happy\n* Healthy\n* Funny\n\n## Most pets with low Pawpularity are looking\n* Not that happy\n* Not that healthy\n\n### So finally it seems that we need a model that can catch pets moods and health from images :)","f308e28d":"Lets find mean of Pawpularity and standard deviation for different values of predictors.","dc46690a":"# PetFinder.my Pawpularity Contest\n## Metadata and image anaysis\n![cute_kitty](https:\/\/www.petfinder.my\/images\/cuteness_meter.jpg)\n","070ad790":"Let's explore if image resolution has any influence on Pawpularity score.","a5775abe":"### Pets with high Pawpularity"}}