{"cell_type":{"67cd0dec":"code","67df9855":"code","1bbcfa4e":"code","c893d6d4":"code","5831e9ce":"code","4e69cd39":"code","5cff606e":"code","d4ffd7e1":"code","da1d2f0c":"code","05c71efd":"code","516645e8":"code","e348c177":"code","b71d1cb1":"code","2957b19a":"code","a1761c56":"code","d7203da2":"code","eb459955":"code","6ca06c3e":"code","312a59c5":"code","8eb31727":"code","4b20a608":"code","5e47ce24":"code","4bc954e5":"code","77fba7fc":"markdown","4523d7b6":"markdown","2528b216":"markdown","c06803d9":"markdown","d0a91ba5":"markdown","c6a0b9c9":"markdown","9455d272":"markdown","a3c698f9":"markdown","3d10021f":"markdown","0e8f15d1":"markdown"},"source":{"67cd0dec":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline","67df9855":"PCOS_inf = pd.read_csv(\"..\/input\/polycystic-ovary-syndrome-pcos\/PCOS_infertility.csv\",encoding='latin 1')\nPCOS_data = pd.read_csv(\"..\/input\/vandithaaa\/data without infertility _final.csv\",encoding='latin 1')","1bbcfa4e":"PCOS_data.head().T","c893d6d4":"PCOS_data.info()","5831e9ce":"PCOS_data[PCOS_data['Marriage Status (Yrs)'].isnull()].T\n\n","4e69cd39":"PCOS_data['Marriage Status (Yrs)'].fillna(PCOS_data['Marriage Status (Yrs)'].median(),inplace=True)","5cff606e":"PCOS_data['Fast food (Y\/N)'].fillna(PCOS_data['Fast food (Y\/N)'].median(),inplace=True)","d4ffd7e1":"PCOS_inf.head()","da1d2f0c":"PCOS_inf.info()","05c71efd":"data = pd.merge(PCOS_data,PCOS_inf, on='Patient File No.', suffixes={'','_y'},how='left')","516645e8":"data.columns = ['Sl No', 'Patient File No.', 'PCOS (Y\/N)', 'Age (yrs)', 'Weight (Kg)',\n       'Height(Cm)', 'BMI','Pulse rate(bpm)',\n       'RR (breaths\/min)', 'Hb(g\/dl)', 'Cycle(R\/I)', 'Cycle length(days)',\n       'Marriage Status (Yrs)', 'Pregnant(Y\/N)', 'No of aborptions',\n       'FSH(mIU\/mL)', 'LH(mIU\/mL)', 'FSH\/LH', 'Hip(inch)', 'Waist(inch)',\n       'Waist\/Hip_Ratio', 'TSH (mIU\/L)', 'AMH(ng\/mL)', 'PRL(ng\/mL)',\n       'Vit D3 (ng\/mL)', 'PRG(ng\/mL)', 'RBS(mg\/dl)', 'Weight gain(Y\/N)',\n       'hair growth(Y\/N)', 'Skin darkening (Y\/N)', 'Hair loss(Y\/N)',\n       'Pimples(Y\/N)', 'Fast food (Y\/N)', 'Reg Exercise(Y\/N)',\n       'BP Systolic(mmHg)', 'BP Diastolic(mmHg)', 'Follicle No (L)',\n       'Follicle No (R)', 'Avg Fsize(L) (mm)', 'Avg Fsize(R) (mm)','Insulin levels (\u00b5IU\/ml)',\n       'Endometrium (mm)', 'Sl.No_y', 'PCOS(Y\/N)_y','I_beta-HCG(mIU\/mL)_y', 'II_beta-HCG(mIU\/mL)_y', 'AMH(ng\/mL)_y']","e348c177":"data.drop(['Sl.No_y', 'PCOS(Y\/N)_y','AMH(ng\/mL)_y'],axis=1,inplace=True)","b71d1cb1":"data.info()","2957b19a":"data.describe().T","a1761c56":"from sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\ntarget = data['PCOS (Y\/N)']\ndata.drop('PCOS (Y\/N)',axis=1,inplace=True)","d7203da2":"plt.figure(figsize=(8,7))\nsns.countplot(target)\nplt.title('Data imbalance')\nplt.show()\n","eb459955":"X_train,X_test, y_train, y_test = train_test_split(data, target, test_size=0.15, random_state=1, stratify = target)\nX_train,X_valid, y_train, y_valid =  train_test_split(X_train, y_train, test_size=0.3, random_state=1, stratify=y_train)","6ca06c3e":"from sklearn.metrics import roc_auc_score\ndef print_scores(m):\n    res = [roc_auc_score(y_train,m.predict_proba(X_train)[:,1]),roc_auc_score(y_valid,m.predict_proba(X_valid)[:,1])]\n    for r in res:\n        print(r)\n      ","312a59c5":"\nrf = RandomForestClassifier(n_jobs=-1,n_estimators=150,max_features='sqrt',min_samples_leaf=10)\nrf.fit(X_train,y_train)\nprint_scores(rf)\n","8eb31727":"\nfrom sklearn.metrics import roc_curve\ny_pred_proba = rf.predict_proba(X_valid)[:,1]\nfpr, tpr, thresholds = roc_curve(y_valid, y_pred_proba)\n","4b20a608":"plt.figure(figsize=(8,7))\nplt.plot([0,1],[0,1],'k--')\nplt.plot(fpr,tpr, label='Knn')\nplt.xlabel('fpr')\nplt.ylabel('tpr')\nplt.title('Knn(n_neighbors=11) ROC curve')\nplt.show()","5e47ce24":"def get_fi(m, df):\n    return pd.DataFrame({'col': df.columns, 'imp': m.feature_importances_}).sort_values('imp',ascending=False)\n\n#lets get the feature importances for training set\nfi = get_fi(rf,X_train)","4bc954e5":"def plot_fi(df):\n    df.plot('col','imp','barh',figsize=(10,10))\n    \nplot_fi(fi)","77fba7fc":"Looks like we can just drop the last erroneous column and go ahead with the analysis","4523d7b6":"Now we are getting a high roc auc score, lets start with out Exploratory Data Analysis","2528b216":"Before fitting the model, we will have to split our data into **train**, **valid** and **test** sets. We can use sklearn's train_test_split function to split our data","c06803d9":"We can see there is 1 null value in `Marraige Status (Yrs)`","d0a91ba5":"# Exploratory Data Analysis","c6a0b9c9":"We have successfully loaded the data. ","9455d272":"# Fitting a Model","a3c698f9":"After loading the data, lets print the data to have a look at the data. Remember, We are not looking at the features in the data. We are just making sure that all the data has been loaded correctly","3d10021f":"# Loading the data","0e8f15d1":"## Merging the two dataframes"}}