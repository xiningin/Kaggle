{"cell_type":{"498710c6":"code","9771fe1f":"code","2f0a51d8":"code","15d4c1f5":"code","24d2e818":"code","61f4f891":"code","2fa476e8":"code","395b2b2a":"code","e552ce82":"code","ec240861":"code","039a5314":"code","6a3f3fa6":"code","38d408c7":"code","fb41dedd":"code","259e92d3":"code","19b0a06d":"code","9ddb39d9":"code","654adb05":"code","02ca7f1f":"code","0ccaec6c":"code","323e504e":"code","ddb58a2a":"code","f738b0b3":"code","560eac9e":"code","eaa48bb1":"code","68eb8ff6":"code","6c39267e":"code","7fe07d20":"code","92ccc7c3":"code","d8505c39":"code","481ef1ee":"code","fb96bea8":"code","ab292d59":"code","9341655f":"code","769a1ca7":"code","5384a995":"code","b6fd30bf":"code","c89f4f69":"code","6a129a9f":"code","20d549aa":"markdown","97acdc7c":"markdown","f7645cd4":"markdown","8de63a8b":"markdown","55bd2c6b":"markdown","aaaf1954":"markdown","87363e8d":"markdown","bb80e191":"markdown","e3a8e99a":"markdown","66839833":"markdown","2dc353ef":"markdown","8927f30e":"markdown","2749b4f3":"markdown","b39fe9ac":"markdown","a71ac998":"markdown","9240dace":"markdown","87047622":"markdown","dbc252c4":"markdown","64378f13":"markdown","af3041df":"markdown","d88bfd95":"markdown","1b8ba281":"markdown","cd81d04e":"markdown","9857dca9":"markdown","1691a692":"markdown","c72ba126":"markdown","e19f37b1":"markdown","cb5d92ea":"markdown","f59be1dd":"markdown","fe8d9789":"markdown","4084398a":"markdown","95f16a77":"markdown","83cdfad1":"markdown","f1559824":"markdown","5f66e7c3":"markdown","2b637e9e":"markdown","0d34cd70":"markdown","aad47ff7":"markdown","5ca4ca86":"markdown","e99fbebc":"markdown"},"source":{"498710c6":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","9771fe1f":"# importing some libraries for visulizations\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# importing sklearn to select the model that will be fitting out data into\n# we will train_test_split to divide the data\n# we will use cross_val_score to determine best accuracy \nfrom sklearn.model_selection import train_test_split, cross_val_score\n\n# import the data into dataframes using pandas library\ntrain = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')\n\ntrain.head()","2f0a51d8":"train.shape, test.shape","15d4c1f5":"cols = {}\nuniqueCols =[]\nfor col in test.columns:\n    if col not in cols:\n        cols[col]=1\n    else:\n        cols+=1\nfor col in train.columns:\n    if col not in cols:\n        uniqueCols.append(col)\n\nprint( uniqueCols)\n    ","24d2e818":"#Save the 'Id' column\ntrain_ID = train['Id']\ntest_ID = test['Id']\n\n#Now drop the  'Id' colum since it's unnecessary for  the prediction process.\ntrain.drop(\"Id\", axis = 1, inplace = True)\ntest.drop(\"Id\", axis = 1, inplace = True)","61f4f891":"sns.distplot(train['SalePrice'], bins=20, rug=True)\n\nprint(\"Skewness: %0.2f\" %train['SalePrice'].skew())\nprint(\"Kurtosis: %0.2f\" %train['SalePrice'].kurt())","2fa476e8":"corrmat = train.corr()\nplt.subplots(figsize=(20, 9))\nsns.heatmap(corrmat, vmax=.8, annot=True);\n","395b2b2a":"corrmat = train.corr()\n# extracting the relevant features\nfilteredCorrMat_features = corrmat.index[abs(corrmat['SalePrice'])>=0.5]\nplt.figure(figsize=(12,12))\n# performing corr on the chosen features and presenting it on the heatmap\nsns.heatmap(train[filteredCorrMat_features].corr(),annot=True,cmap='winter')","e552ce82":"sns.barplot(train.OverallQual,train.SalePrice)\n","ec240861":"ntrain = train.shape[0]\nntest = test.shape[0]\ny_train = train.SalePrice.values\nall_data = pd.concat((train, test)).reset_index(drop=True)\nall_data.drop(['SalePrice'], axis=1, inplace=True)\nprint(\"all_data size is : {}\".format(all_data.shape))","039a5314":"totalMissing = all_data.isnull().sum().sort_values(ascending=False)\npercentage = ((all_data.isnull().sum()\/all_data.isnull().count())*100).sort_values(ascending=False)\n\nmissingData = pd.concat([totalMissing,percentage],axis=1,keys=['Total','Percentage'])\nmissingData.head(20)","6a3f3fa6":"plt.subplots(figsize=(15,20))\nplt.xticks(rotation='90')\nsns.barplot(x=totalMissing.index[:24],y=percentage[:24])\nplt.xlabel('features')\nplt.ylabel('percentage of missing data')\nplt.title('percent of missing data by feature')\nplt.show()","38d408c7":"# columns to be dropped\ncolumnsToDrop = missingData[missingData['Percentage']>50].index\n\nall_data = all_data.drop(columnsToDrop, axis=1)\n# test = test.drop(columnsToDrop, axis=1)\nprint(all_data.shape)","fb41dedd":"for col in ('BsmtQual', 'BsmtCond', 'BsmtExposure', \n            'BsmtFinType1', 'BsmtFinType2','BsmtFullBath', 'BsmtHalfBath',\n            'GarageType', 'GarageFinish', 'GarageQual', 'BsmtUnfSF','BsmtFinSF1','BsmtFinSF2',\n            'GarageCond', 'FireplaceQu', 'MasVnrType', 'Exterior2nd'):\n    if col in all_data.columns:\n        all_data[col] = all_data[col].fillna('None')","259e92d3":"#GarageYrBlt replacing missing data with 0\nall_data['GarageYrBlt'] = all_data['GarageYrBlt'].fillna(0)\n\n# NA most likely means no masonry veneer for these houses. We can fill in 0\nall_data[\"MasVnrArea\"] = all_data[\"MasVnrArea\"].fillna(0)\n\n# let's drop YrSold since it's also not correlated with 'SalePrice'\nall_data = all_data.drop('YrSold', axis=1)\n\n# Electrical has one NA value. Since this feature has mostly 'SBrkr', we can set that for the missing value.\nall_data['Electrical'] = all_data['Electrical'].fillna(all_data['Electrical'].mode()[0])\n\n# 'RL' is by far the most common value. So we can fill in missing values with 'RL'\nall_data['MSZoning'] = all_data['MSZoning'].fillna(all_data['MSZoning'].mode()[0])\n\n# For this categorical feature all records are \"AllPub\", except for one \"NoSeWa\" and 2 NA . \n# Since the house with 'NoSewa' is in the training set, this feature won't help in predictive modelling.\nall_data = all_data.drop(['Utilities'], axis=1)\n\n# data description says NA means typical\nall_data[\"Functional\"] = all_data[\"Functional\"].fillna(\"Typ\")\n\n# Group by neighborhood and fill in missing value by the median LotFrontage of all the neighborhood\nall_data[\"LotFrontage\"] = all_data.groupby(\"Neighborhood\")[\"LotFrontage\"].transform(\n    lambda x: x.fillna(x.median()))\n\n#  Replacing missing data with 0 (Since missing in this case would imply 0.)\nfor col in ('TotalBsmtSF', 'GarageArea', 'GarageCars'):\n    all_data[col] = all_data[col].fillna(0)\n    \n#  Replacing missing data with the most common\nall_data['KitchenQual'] = all_data['KitchenQual'].fillna(all_data['KitchenQual'].mode()[0])\nall_data['Exterior1st'] = all_data['Exterior1st'].fillna(all_data['Exterior1st'].mode()[0])\nall_data['SaleType'] = all_data['SaleType'].fillna(all_data['SaleType'].mode()[0])","19b0a06d":"all_data.isnull().sum().sort_values(ascending=False) #check\n","9ddb39d9":"from pandas.api.types import is_numeric_dtype\ndef remove_outliers(df):\n    low = .05\n    high = .9\n    quant_df = df.quantile([low, high])\n    for name in list(df.columns):\n        if is_numeric_dtype(df[name]):\n            df = df[(df[name] > quant_df.loc[low, name]) & (df[name] < quant_df.loc[high, name])]\n    return df\n\nremove_outliers(all_data).head()","654adb05":"plt.scatter(x = train['GrLivArea'], y = train['SalePrice'])\nplt.ylabel('SalePrice', fontsize=13)\nplt.xlabel('GrLivArea', fontsize=13)\nplt.show()\n\n","02ca7f1f":"#Deleting outliers\ntempTrain = train.drop(train[(train['GrLivArea']>4000) & (train['SalePrice']<300000)].index)\n\nplt.scatter(x = tempTrain['GrLivArea'], y = tempTrain['SalePrice'])\nplt.ylabel('SalePrice', fontsize=13)\nplt.xlabel('GrLivArea', fontsize=13)\nplt.show()","0ccaec6c":"from scipy import stats\nfrom scipy.stats import norm\n\nsns.distplot(train['SalePrice'] , fit=norm);\n\n# Get the fitted parameters used by the function \n# mu is the mean across the population (more accurately, given data)\n# and sigma is the standard deviation across the population\n(mu, sigma) = norm.fit(train['SalePrice'])\nprint( '\\n mu = {:.2f} and sigma = {:.2f}\\n'.format(mu, sigma))\n\n#Now plot the distribution\nplt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)],\n            loc='best')\nplt.ylabel('Frequency')\nplt.title('SalePrice distribution')\n\n#Get also the QQ-plot (probability plot)\nfig = plt.figure()\nres = stats.probplot(train['SalePrice'], plot=plt)\nplt.show()\n\n","323e504e":"#Appling log(1+x) to all elements of 'SalePrice'\ny_train = train[\"SalePrice\"] = np.log1p(train[\"SalePrice\"])\n\n#Check the new distribution \nsns.distplot(train['SalePrice'] , fit=norm);\n\n# Get the fitted parameters used by the function\n(mu, sigma) = norm.fit(train['SalePrice'])\nprint( '\\n mu = {:.2f} and sigma = {:.2f}\\n'.format(mu, sigma))\n\n#Now plot the distribution\nplt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)],\n            loc='best')\nplt.ylabel('Frequency')\nplt.title('SalePrice distribution')\n\n#Get also the QQ-plot\nfig = plt.figure()\nres = stats.probplot(train['SalePrice'], plot=plt)\nplt.show()","ddb58a2a":"all_data['TotalSF'] = all_data['TotalBsmtSF'] + all_data['1stFlrSF'] + all_data['2ndFlrSF']\n","f738b0b3":"from scipy.stats import skew \n\n# extracting numerical features\nnumeric_features = all_data.dtypes[all_data.dtypes != \"object\"].index\n\n# Check the skew of all numerical features\nnumeric_features = all_data[numeric_features].apply(lambda x: skew(x.dropna())).sort_values(ascending=False)\nprint(\"\\nSkew in numerical features: \\n\")\nskewness = pd.DataFrame({'Skew' :numeric_features})\nskewness.head(10)\n\nprint(all_data.shape)","560eac9e":"highly_skewed = ['PoolArea','LotArea','KitchenAbvGr','ScreenPorch']\n\nfrom scipy.special import boxcox1p\nlam = 0.15\nfor feat in highly_skewed:\n    all_data[feat] = boxcox1p(all_data[feat], lam)","eaa48bb1":"all_data = pd.get_dummies(all_data)\n","68eb8ff6":"train = all_data[:ntrain]\ntest = all_data[ntrain:]\n\n# train.drop('SalePrice',axis=1,inplace=True)\n# train['SalePrice']\nprint(train.shape, test.shape)","6c39267e":"from sklearn.model_selection import cross_val_score, train_test_split\nfrom sklearn.linear_model import LinearRegression, LassoCV\nfrom sklearn.metrics import mean_squared_error, make_scorer\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.impute import SimpleImputer \nfrom sklearn.linear_model import Lasso\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.ensemble import GradientBoostingRegressor\nimport lightgbm as lgb\nfrom xgboost import XGBRegressor\n\n","7fe07d20":"# train= train.drop(train.index[[0,1]],axis=0)\nprint(y_train.shape, train.shape)","92ccc7c3":"\nX_train,X_test,y_train2,y_test = train_test_split(train.values,y_train,test_size = 0.3,random_state= 0)\nX_train.shape,X_test.shape,y_train2.shape,y_test.shape\n","d8505c39":"\n# Scoring - Root Mean Squared Error\ndef rmse_CVscore(model,X,y):\n    return np.sqrt(-cross_val_score(model, X, y, scoring=\"neg_mean_squared_error\", cv=5))\n","481ef1ee":"lasso = make_pipeline(RobustScaler(), Lasso(alpha =0.05, random_state=1))\n\nscore = rmse_CVscore(lasso,X_train,y_train2)\nprint(\"\\nLasso score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))\n","fb96bea8":"\nENet = make_pipeline(RobustScaler(), ElasticNet(alpha=0.05, l1_ratio=.9, random_state=3))\n\nscore = rmse_CVscore(ENet,X_train,y_train2)\nprint(\"\\nElasticNet score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))\n","ab292d59":"\nGBoost = GradientBoostingRegressor(n_estimators=1000,max_depth=4,\n                                   learning_rate=0.05,\n                                   max_features='sqrt',\n                                   loss=\"huber\",random_state =5)\nscore = rmse_CVscore(GBoost,X_train,y_train2)\nprint(\"\\nGradient Boosting score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))\n","9341655f":"# create pipeline\n# my_pipeline = make_pipeline(\n#     SimpleImputer(),\n# XGBR = XGBRegressor(n_estimators=1000, learning_rate=0.05, random_state =7,max_depth=3)\n# )\n\n# score = rmse_CVscore(XGBR,X_train,y_train2)\n# print(\"\\nXGBRegressor score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))\n","769a1ca7":"\nmodel_lgb = lgb.LGBMRegressor(objective='regression',num_leaves=5,\n                              learning_rate=0.05, n_estimators=1000)\n\nscore = rmse_CVscore(model_lgb, X_train, y_train2)\nprint(\"\\nLightGBM Regressor score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))\n","5384a995":"from sklearn.base import BaseEstimator, TransformerMixin, RegressorMixin, clone\n\nclass AveragingModels(BaseEstimator, RegressorMixin, TransformerMixin):\n    def __init__(self, models):\n        self.models = models\n        \n    # creating clones of the original models\n    def fit(self, X, y):\n        self.models_ = [clone(x) for x in self.models]\n        \n        # fitting our data to the models\n        for model in self.models_:\n            model.fit(X, y)\n\n        return self\n    \n    #making predictions on our fitted models and averaging them\n    def predict(self, X):\n        predictions = np.column_stack([\n            model.predict(X) for model in self.models_\n        ])\n        return np.mean(predictions, axis=1)","b6fd30bf":"averaged_models = AveragingModels(models = (ENet,GBoost, lasso, model_lgb))\n\nscore = rmse_CVscore(averaged_models,X_train, y_train2)\nprint(\" Averaged base models score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","c89f4f69":"def rmse(y, y_pred):\n    return np.sqrt(mean_squared_error(y, y_pred))\nprint(\"test shape: {}, train shape: {}\".format(test.shape, y_train.shape))\n\n# train=train.drop(train.index[[0,4]],axis=0)\n\naveraged_models.fit(train, y_train)\ntrain_pred = averaged_models.predict(train)\navg_pred = np.expm1(averaged_models.predict(test))\n\nprint(rmse(y_train, train_pred))","6a129a9f":"# test['Id'].shape\n# avg_pred.shape\nsub = pd.DataFrame()\nsub['Id'] = test_ID\nsub['SalePrice'] = avg_pred\nsub.to_csv('submission.csv',index=False)\n#train.shape\n#test.shape","20d549aa":"**LightGBM **","97acdc7c":"What we can do now is a strategy called averaging base models. we combine some of the used models and average their results to get a more accurate result.\n\nlet's do this in a class:\n","f7645cd4":"Now let's check if there are any missing values left","8de63a8b":"Thank you for your interest in this project. I hope it brought value to your Data science endouvers and i hope you had some fun along the way!\n\nThis project was possible with the help of the following kernals:\nhttps:\/\/www.kaggle.com\/serigne\/stacked-regressions-top-4-on-leaderboard\nhttps:\/\/www.kaggle.com\/tecknomart\/basic-data-science-skillset-we-must-have\nhttps:\/\/www.kaggle.com\/bsivavenu\/house-price-calculation-methods-for-beginners\n\nCheers!!","55bd2c6b":"As you can see, sometimes the more complicated the model, the poorer the results.","aaaf1954":"as always, it's best to see things visually before moving forward","87363e8d":"Now that's some HOT results!!!\n\nlet's go ahead and submit our hard work :)","bb80e191":"Now let's drop any feature that has more that 50% missing data. In this case, the features 'PoolQC', 'MiscFeature', 'Alley' and 'Fence' don't seem to add much either way. perhaps that why this data is mostly missing in the first place. \n\nSince most of this data is missing and since such data does not seem to be if high correlation with our dependent variable. let's go ahead and drop them!","e3a8e99a":"Whoa.. now that's a messy graph!\n\nWhen we have TOO MANY features, it is best to filter correlations first. in this case we will settle for 0.5 correlation or above.\n","66839833":"Up next, let's see what's up with skewed features( hmm.. screwed features..)\n\nwe'll focus on the numerical features and how skewed they are.\n","2dc353ef":"huh.. doesn't see like we have any outliers in the chosen quantile.\n\nNonetheless, i would like to explore the feature 'GrLivArea' and see if i could visually spot outliers.","8927f30e":"**ElasticNet** regression model (which basically combines Ridge regression and Lasso regression):","2749b4f3":"yeah, that makes sense. since we need to predict the 'SalePrice' for the test data it can't be a column there :)\n\nokay, moving on..\n\nlet's drop the 'Id' columns since the are unnecessary for the prediction process:\n","b39fe9ac":"\nA good practice when trying to understand dependent variables (in this case it's 'SalePrice') is to look at it's normal distribution and try to understand it's nature.\n\nwe will look also at it's skewness (if it's equal to 0 it means that this variable is evenly distributed) and kurtosis (the standard value should be 3)","a71ac998":"Ain't that beautiful :)\n\nit seems that we have come a long way with our data.\n\nBefore we continue with feature processing, there's this one thing that i would like to be aware of. \nIt's important to realize that till now, our data (all the features that we have been working with) is simply gathered and put into a table. thinking outside the box leads us to one important understanding. Can we combine features in order to create a new one that's potentially more correlatioed with our target variable?\n\nof course we can! take for example the ground area of the whole house, includeing the basement, the first floor, second floor..\nthe total square foor area of the house is a dominant feature for the prediction of the price of the house. \n\nlet's take care of it then ;)","9240dace":"hmm.. as predicted it seems that we have 1 more row and 1 more column for the training data.\nThank God we checked before it was too late ;)\n\nokay, let's figure out which column it is:","87047622":"We can clearly see that the 'SalePrice' distrution plot is right skewed (also indicative from the probability plot). \n\nSince we will be working with linear models, our next step would be to transform our distrubtion to look more normally distributed. We will do that by appling log(1+x) to all elements of 'SalePrice'.\n\nlet's begin :)\n","dbc252c4":"Another good practice (and also the best first move) when doing DS projects is to look for all sorts of correlations between all features.","64378f13":" **XGBRegressor** ","af3041df":"Before we dive into feature engineering, let's join our training data and test data so that we won't get lost later and stay consistent with changes across the data.","d88bfd95":"phew!! that was a long jounrey. however, the interesting part is just about to start ;)\n\n\n**Modeling**\nFirst step's first. let's import all the classes that we will be working with:","1b8ba281":"Now let's split our data into training data and test data. We do this so we can validate our results later on.","cd81d04e":"**Gradient Boosting Regression**\nIn order to take care of outliers for this model we can use the huber loss function.","9857dca9":"Now, let's get all the dummies :)\n\n(this is basically converting categorical variables into dummy\/indicator variables)","1691a692":"This kernal was made for all the dreamers out there that took the path of bravey to become the greatest Data Scientiest they could be!\n\n**I hope you will find value in the content that I'm about to share, don't forget to share the love by upvoting this project of mine.** it would be a great sign of support, love and apprecation. A great shoutout for kaggle as well from making all of this possible. \n\nHurrah!!\n\n**Importing and Exploring**\n\nFirst thing's first. let's do some importing of the libraries that we'll use (i assure you the project will get more entertaining as you progress)","c72ba126":"Outliers removal is not always safe. We decided to delete these two as they are very huge and really bad ( extremely large areas for very low prices). There are probably other outliers in the training data that we need to handle. but removing outliers always comes with a price. For the time being we will settle for the above explination and demonstration of outliers.\n\n**however, notice that this is just a demonstration and we did not in fact change our data (all_data). we will however deal with outliers later using StandardScaler\/RobustScaler**\n \n\n**Stage 3: Target Variable**\n\nSalePrice is the variable we need to predict. So let's do some analysis on this variable first (remember the skewness?).\n","e19f37b1":"**Pre-processing** and **Feature Engineering**\n\n**Stage 1: Handling Missing Data**\n\nNow we approach one of the most important sub sections of DS project. \n\nWhat do we do about missing data?\nDo we ommit it?\nDo we replace it with the mean? the median?\n\nThere are many considerations when we are dealing with missing data. \nAs a first step, let's see which data is missing and it's weight in percentage.","cb5d92ea":"**Handling numerical missing data**\n\nNow, lets take care of missing data for the numerical features.\n\n","f59be1dd":"In this way, we selected only the most important features that will serve us as the best predictors for SalePrice.\n\nFurthermore, we find that the columns ** 'OverallQaul', 'GrLivArea' ** have the highest corrlations with SalePrice.\n\nIt is also very important to notice correlations amongst other features like:\n* ** 'GrLivArea' ** and 'TotalRmsAbvGrd' (corr= 0.83)\n*  'GarageCars' and 'GarageArea' (corr= 0.88)\n* 'lstFlrSF' and 'TotalBsmtSF' (corr= 0.82)\n\nIt seems like OverallQaul serves as the most reliable feature for predicting SalePrice, but don't believe me, let's just see it visually:\n","fe8d9789":"**Stage 2: Outliers! **\n\nIn statistics, an outlier is an observation point that is distant from other observations. usually the distance is measured by standard deviations. such points are usually produced by some sort of error or simply do not represent any real data and just get in the way to make our predictions less accurate. \n\nThe approach we're going to go with is simply remove data that's below the 0.05 percentile or above the 0.9 percentile (check out this link to better understand quantiles and percentiles: http:\/\/www.statisticshowto.com\/quantile-definition-find-easy-steps\/). ","4084398a":"Now, let's explore the data a bit before we dig into the bigger stuff:\n\nalways, **ALWAYS**!! check the shape of your data before you start!!","95f16a77":"Would you look at that.\nAin't that beautiful :)","83cdfad1":"What i would like to do next is define the root mean squared error function for calculating the accuracy of the different modeling algorithms we are going to use.\n\n**Notice** that we are using cross validation technique with 5 folds.","f1559824":"Awesome!! it seems that we have a great estimate of accuracy for our model.\n\n**Final Training and Prediction**\n","5f66e7c3":"There are many modeling algorithms we can use, let's check sevearl and see their accuracy scores.\n\nwe'll start with **LASSO Regression**\n(since this model is senstive to outliers, we can use the RobustScaler to deal with them. the RobustScaler is a standardization technique that allows us to standardize our data using the mean and the standard deviation to be able to compare between data points)","2b637e9e":"Remember when we combined the training data and the test data to make one big all_data dataframe. well it's time to split them once more.","0d34cd70":"We can see at the bottom right two with extremely large GrLivArea that are of a low price. These values are huge oultliers (those bastards). Therefore, we can safely delete them.","aad47ff7":"Let's import more libraries that we'll be using and try to take a peak at the some of the training data:","5ca4ca86":"Now we will use the Box-Cox transformation to deal with the highly skewed values (any features with skewness value > 3).","e99fbebc":"** Handling categorcial missing data**\n\nWe will replace missing data for the catigorical features with None\n\nBsmtQual, BsmtCond, BsmtExposure, BsmtFinType1 and BsmtFinType2 : For all these **categorical** basement-related features, NaN means that there is no basement.\n\nFireplaceQu, GarageType, GarageFinish, GarageQual and GarageCond : Replacing missing data with None"}}