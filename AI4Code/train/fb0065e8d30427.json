{"cell_type":{"b15646e8":"code","180b9f96":"code","681ce416":"code","d899e2b1":"code","3560d24d":"code","529a61a5":"code","814d98be":"code","7e9f3cc5":"code","243c2ba7":"code","3de9cea8":"code","2a265d89":"code","1b93b9a3":"code","e95c654c":"code","d27a2063":"code","32cdc8c6":"code","e085be49":"code","a7f5c0fe":"code","28412379":"markdown","ff124ac4":"markdown","855ed8c4":"markdown","ee8a65ba":"markdown","97dd1b32":"markdown","7cca05e3":"markdown","3fdd3988":"markdown","c346da7d":"markdown","19738f78":"markdown","8a1ee051":"markdown","7522f7be":"markdown","c483f78f":"markdown","a5ebaf7c":"markdown","d90a8266":"markdown","a68ac03f":"markdown","29a76f35":"markdown","38d78489":"markdown"},"source":{"b15646e8":"%load_ext Cython","180b9f96":"from learntools.core import binder\nbinder.bind(globals())\nimport random\nimport numpy as np\n\ndef drop_piece(grid, col, mark, config):\n    next_grid = grid.copy()\n    for row in range(config.rows-1, -1, -1):\n        if next_grid[row][col] == 0:\n            break\n    next_grid[row][col] = mark\n    return next_grid\n\n# Helper function for get_heuristic: checks if window satisfies heuristic conditions\ndef check_window(window, num_discs, piece, config):\n    return (window.count(piece) == num_discs and window.count(0) == config.inarow-num_discs)\n\n# Helper function for get_heuristic: counts number of windows satisfying specified heuristic conditions\ndef count_windows(grid, num_discs, piece, config):\n    num_windows = 0\n    # horizontal\n    for row in range(config.rows):\n        for col in range(config.columns-(config.inarow-1)):\n            window = list(grid[row, col:col+config.inarow])\n            if check_window(window, num_discs, piece, config):\n                num_windows += 1\n    # vertical\n    for row in range(config.rows-(config.inarow-1)):\n        for col in range(config.columns):\n            window = list(grid[row:row+config.inarow, col])\n            if check_window(window, num_discs, piece, config):\n                num_windows += 1\n    # positive diagonal\n    for row in range(config.rows-(config.inarow-1)):\n        for col in range(config.columns-(config.inarow-1)):\n            window = list(grid[range(row, row+config.inarow), range(col, col+config.inarow)])\n            if check_window(window, num_discs, piece, config):\n                num_windows += 1\n    # negative diagonal\n    for row in range(config.inarow-1, config.rows):\n        for col in range(config.columns-(config.inarow-1)):\n            window = list(grid[range(row, row-config.inarow, -1), range(col, col+config.inarow)])\n            if check_window(window, num_discs, piece, config):\n                num_windows += 1\n    return num_windows\n\n\n# Helper function for minimax: calculates value of heuristic for grid\ndef get_heuristic(grid, mark, config):\n    num_threes = count_windows(grid, 3, mark, config)\n    num_fours = count_windows(grid, 4, mark, config)\n    num_threes_opp = count_windows(grid, 3, mark%2+1, config)\n    num_fours_opp = count_windows(grid, 4, mark%2+1, config)\n    score = num_threes - 1e2*num_threes_opp - 1e4*num_fours_opp + 1e6*num_fours\n    return score\n\n# Uses minimax to calculate value of dropping piece in selected column\ndef score_move(grid, col, mark, config, nsteps):\n    next_grid = drop_piece(grid, col, mark, config)\n    score = minimax(next_grid, nsteps-1, False, mark, config)\n    return score\n\n# Helper function for minimax: checks if agent or opponent has four in a row in the window\ndef is_terminal_window(window, config):\n    return window.count(1) == config.inarow or window.count(2) == config.inarow\n\n# Helper function for minimax: checks if game has ended\ndef is_terminal_node(grid, config):\n    # Check for draw \n    if list(grid[0, :]).count(0) == 0:\n        return True\n    # Check for win: horizontal, vertical, or diagonal\n    # horizontal \n    for row in range(config.rows):\n        for col in range(config.columns-(config.inarow-1)):\n            window = list(grid[row, col:col+config.inarow])\n            if is_terminal_window(window, config):\n                return True\n    # vertical\n    for row in range(config.rows-(config.inarow-1)):\n        for col in range(config.columns):\n            window = list(grid[row:row+config.inarow, col])\n            if is_terminal_window(window, config):\n                return True\n    # positive diagonal\n    for row in range(config.rows-(config.inarow-1)):\n        for col in range(config.columns-(config.inarow-1)):\n            window = list(grid[range(row, row+config.inarow), range(col, col+config.inarow)])\n            if is_terminal_window(window, config):\n                return True\n    # negative diagonal\n    for row in range(config.inarow-1, config.rows):\n        for col in range(config.columns-(config.inarow-1)):\n            window = list(grid[range(row, row-config.inarow, -1), range(col, col+config.inarow)])\n            if is_terminal_window(window, config):\n                return True\n    return False\n\n# Minimax implementation with alfabeta pruning\ndef minimax(node, depth, maximizingPlayer, mark, config):\n    is_terminal = is_terminal_node(node, config)\n    valid_moves = [c for c in range(config.columns) if node[0][c] == 0]\n    if is_terminal:\n        return get_heuristic(node, mark, config),True\n    if depth == 0 :\n        return get_heuristic(node, mark, config),False\n\n    if maximizingPlayer:\n        value = -np.Inf\n\n        for col in valid_moves:\n            child = drop_piece(node, col, mark, config)\n            miniv,endg =minimax(child, depth-1, False, mark, config)\n            value = max(value, miniv)\n            if endg==True:##ALFA BETA PRUNING\n                break\n\n        return value, False\n    else:\n        value = np.Inf\n        for col in valid_moves:\n            child = drop_piece(node, col, mark%2+1, config)\n            miniv,endg = minimax(child, depth-1, True, mark, config)\n            value = min(value,miniv )\n            if endg==True:##ALFA BETA PRUNING\n                break\n\n        return value,False\n        \ndef my_agent(obs, config):    \n    # Your code here: Amend the agent!\n    # Get list of valid moves\n    valid_moves = [c for c in range(config.columns) if obs.board[c] == 0]\n    # Convert the board to a 2D grid\n    grid = np.asarray(obs.board).reshape(config.rows, config.columns)\n    # Use the heuristic to assign a score to each possible board in the next step\n    N_STEPS=3\n    scores = dict(zip(valid_moves, [score_move(grid, col, obs.mark, config, N_STEPS) for col in valid_moves]))\n    # Get a list of columns (moves) that maximize the heuristic\n    max_cols = [key for key in scores.keys() if scores[key] == max(scores.values())]\n    \n    \n    # Select at random from the maximizing columns \n    return random.choice(max_cols)\n","681ce416":"from kaggle_environments import make, evaluate\n\nimport time\n\nstart = time.time()\n\n\n# Create the game environment\nenv = make(\"connectx\")\n\n\n# Two random agents play one game round\nmoves=env.run([my_agent,'random'])#'random'\n\n# Show the game\nenv.render(mode=\"ipython\")","d899e2b1":"import time\ndef speedcheck (agent):\n    start = time.time()\n    actions=[];\n    for i in range (3):\n        moves= env.run([agent, 'random']) \n        [actions.append(moves[i][0]['action']) for i in range (1,len(moves),2)]\n    end = time.time()\n    print('Ran game simulations in {} s \\n now have {} moves in dataset '.format((end - start),len(actions)))  \n    print('{} seconds per move'.format((end - start)\/len(actions)))","3560d24d":"speedcheck(my_agent)","529a61a5":"%%cython \nfrom cython.view cimport array as cvarray\n\ncimport numpy as np\nimport numpy as np\nimport pickle \nimport random\n\nDTYPE = np.intc \n\n\ncpdef  np.ndarray[dtype= int , ndim=2] drop_piece( np.ndarray[ dtype=np.int32_t,ndim=2] grid,int col,int mark):\n    ''' Gets board at next step if agent drops piece in selected column\n    Purposefully creates a new board image so as not to corrupt the old one, useful behavior as same grid needs to be pass into a different\n    possbile move in order for evaluation'''\n    cdef np.ndarray[dtype= int , ndim=2] next_grid= grid.copy()\n    cdef int [:,:] nxtgridview = next_grid\n    for row in range(5, -1, -1):\n        if nxtgridview[row][col] == 0:\n            break\n    nxtgridview[row][col] = mark\n    return next_grid\n\n# # Helper function for get_heuristic: checks if window satisfies heuristic conditions\ncdef int count( int[4] window,int piece):\n    cdef int count=0\n    for i in range (4):          \n        if window[i]== piece:\n            count += 1\n    return count    \n\ncdef bint check_window( int[4] window,int num_discs,int piece ):\n    return ( (count(window, piece) == num_discs) and (count(window,0) == 4-num_discs) )\n\n# Helper function for get_heuristic: counts number of windows satisfying specified heuristic conditions\n\ncdef int count_windows(np.ndarray[ dtype=np.int32_t,ndim=2] grid,int num_discs,int piece):\n    cdef int num_windows = 0\n    cdef int[4] window\n    cdef int i =0\n    # horizontal\n    for row in range(6):\n        for col in range(4):\n            window = (grid[row, col:col+4]) \n            if check_window(window, num_discs, piece):\n                num_windows += 1\n    # vertical\n    for row in range(3):\n        for col in range(7):\n            window = (grid[row:row+4, col]) \n            if check_window(window, num_discs, piece):\n                num_windows += 1\n    # positive diagonal\n    for row in range(3):\n        i=0\n        for col in range(4):\n            for i in range (4):\n                window[i] = (grid[row+i,col+i])\n            if check_window(window, num_discs, piece):\n                num_windows += 1\n    # negative diagonal\n    for row in range(3, 6):\n        i=0\n        for col in range(4):\n            for i in range (4):\n                window[i] = (grid[row-i, col+i])\n            if check_window(window, num_discs, piece):\n                num_windows += 1\n    return num_windows\n\n    \n# Helper function for minimax: calculates value of heuristic for grid\ncdef int get_heuristic( np.ndarray[ dtype=np.int32_t,ndim=2] grid, int mark):\n    cdef int score=0\n    score = count_windows(grid, 3, mark) \\\n            - 100*count_windows(grid, 3, mark%2+1) \\\n            - 10000*count_windows(grid, 4, mark%2+1 ) \\\n            + 1000000*count_windows(grid, 4, mark)\n    return score\n\n# Uses minimax to calculate value of dropping piece in selected column\ncdef int score_move(np.ndarray[ dtype=np.int32_t,ndim=2]grid, int col,int mark, int  nsteps):\n    cdef np.ndarray[ dtype=np.int32_t,ndim=2] next_grid = drop_piece(grid, col, mark)\n    score = minimax(next_grid, nsteps-1, False, mark)    \n    \n    return score\n\n# Helper function for minimax: checks if agent or opponent has four in a row in the window\ncdef bint is_terminal_window(int[4] window):\n    return ( (count(window,1) == 4)or (count(window,2) == 4))\n\n# Helper function for minimax: checks if game has ended\ncdef bint is_terminal_node(np.ndarray[ dtype=np.int32_t,ndim=2] grid) :\n    cdef int num_windows = 0\n    cdef int [4] window\n    cdef bint not_draw = False\n    # Check for draw \n    for i in range(7):\n        if grid [0, i] == 0:\n            not_draw = True\n    if not_draw == False:\n        return True\n    # Check for win: horizontal, vertical, or diagonal\n    # horizontal\n    for row in range(6):\n        for col in range(4):\n            window = (grid[row, col:col+4])\n            if is_terminal_window(window):\n                    return True\n    # vertical\n    for row in range(3):\n        for col in range(7):\n            window = (grid[row:row+4, col])\n            if is_terminal_window(window):\n                    return True\n    # positive diagonal\n    for row in range(3):\n        for col in range(4):\n#             window = (grid[range(row, row+4), range(col, col+4)])\n            for i in range (4):\n                window[i] = (grid[row+i,col+i])\n            if is_terminal_window(window):\n                return True\n    # negative diagonal\n    for row in range(3, 6):\n        for col in range(4):\n#             window = (grid[range(row, row-4, -1), range(col, col+4)])\n            for i in range (4):\n                window[i] = (grid[row-i, col+i])\n            if is_terminal_window(window):\n                return True\n    return False\n\n\n\n# Minimax implementation with alfabeta pruning\ncdef int minimax(np.ndarray[ dtype=np.int32_t,ndim=2] Pnode,int depth,int maximizingPlayer,int mark):\n    cdef bint is_terminal\n    cdef int value\n    cdef int maxv\n    cdef int miniv\n    cdef np.ndarray[ dtype=np.int32_t,ndim=2] node = Pnode.copy()\n    cdef int [:,:] node_view = node\n    cdef int col\n    cdef np.ndarray[dtype= int , ndim=2] child \n    cdef int [7] val_m#valid \n    cdef int m_c=0#valid moves count\n    \n    for c in range(7):\n        if node_view [0][c]==0 :\n            val_m[m_c]=c\n            m_c += 1\n        \n    is_terminal = is_terminal_node(node)\n\n    if is_terminal:\n        value =get_heuristic(node, mark)\n        if value > 800000:\n              value= 800000+ 10*(depth)  #alfabeta pruning encoding the depth of a winning path into the score. So as not \n        return value                     # bother looking for similar or longer paths.\n    if depth == 0 :\n        value=get_heuristic(node, mark)\n        return value\n\n    if maximizingPlayer:\n        value = - 200000000 \n\n        for c in range(m_c):\n            col = val_m[c] \n            child = drop_piece(node,col, mark)  \n            maxv =minimax(child, depth-1, False, mark)             \n            value = max(value, maxv)\n            if value >= 800000 :##ALFA BETA PRUNING\n                winning_depth = (value -800000)%10\n                if winning_depth >= (depth-1):\n                    break  #i  Could only come up with an equally fast path. remeber depth goes down. \n        return value\n    else:\n        value =  200000000 \n        for c in range(m_c):\n            col = val_m[c]\n            child = drop_piece(node,col,mark%2+1)\n            miniv = minimax(child, depth-1, True, mark)\n            value = min(value,miniv )\n            if value < -8000:##ALFA BETA PRUNING\n                break   \n        return value\n\ncpdef int my_c_agent (obs, config): \n\n    cdef np.ndarray[dtype= np.int32_t , ndim=2] grid = np.array(obs.board,np.intc ).reshape(6, 7)\n    cdef np.ndarray[ dtype=np.int32_t,ndim=1] valid_moves  \n    cdef int [7] val_m#valid \n    cdef int m_c=0#valid moves count\n    cdef int counter=1 \n    cdef int [:,:] gridview = grid \n    # Get list of valid moves   \n    for c in range(7):\n        if gridview [0][c]==0 :\n            val_m[m_c]=c\n            m_c += 1\n#     valid_moves  = np.array([c for c in range(7) if grid[0][c] == 0],dtype= np.intc)\n\n    # Use the heuristic to assign a score to each possible board in the next step\n    N_STEPS=3\n\n    scores = dict(zip(val_m,\\\n                      [score_move(grid, val_m[i], obs.mark, N_STEPS) for i in range(m_c) ] ))\n    # Get a list of columns (moves) that maximize the heuristic\n    max_cols = [key for key in scores.keys() if scores[key] == max(scores.values())]\n    \n    return max_cols[len(max_cols)\/\/2]\n\n","814d98be":"from kaggle_environments import make, evaluate\n\nimport time\n\nstart = time.time()\n\n\n# Create the game environment\nenv = make(\"connectx\")\n\n\n# Two random agents play one game round\nmoves=env.run([my_c_agent,'random'])#'random'\n\n# Show the game\nenv.render(mode=\"ipython\")","7e9f3cc5":"speedcheck(my_agent)\nspeedcheck(my_c_agent)\n","243c2ba7":"def get_win_percentages(agent1, agent2, n_rounds=10):\n    # Use default Connect Four setup\n    config = {'rows': 6, 'columns': 7, 'inarow': 4}\n    # Agent 1 goes first (roughly) half the time          \n    outcomes = evaluate(\"connectx\", [agent1, agent2], config, [], n_rounds\/\/2)\n    # Agent 2 goes first (roughly) half the time      \n    outcomes += [[b,a] for [a,b] in evaluate(\"connectx\", [agent2, agent1], config, [], n_rounds-n_rounds\/\/2)]\n    print(\"Agent 1 Win Percentage:\", np.round(outcomes.count([1,-1])\/len(outcomes), 2))\n    print(\"Agent 2 Win Percentage:\", np.round(outcomes.count([-1,1])\/len(outcomes), 2))\n    print(\"Number of Invalid Plays by Agent 1:\", outcomes.count([None, 0]))\n    print(\"Number of Invalid Plays by Agent 2:\", outcomes.count([0, None]))\n","3de9cea8":"get_win_percentages(agent1=my_agent, agent2=\"random\")","2a265d89":"%%cython \nfrom cython.view cimport array as cvarray\n\ncimport numpy as np\nimport numpy as np\nimport pickle \nimport random\n\nDTYPE = np.intc \n\n\ncpdef  np.ndarray[dtype= int , ndim=2] drop_piece( np.ndarray[ dtype=np.int32_t,ndim=2] grid,int col,int mark):\n    ''' Gets board at next step if agent drops piece in selected column\n    Purposefully creates a new board image so as not to corrupt the old one, useful behavior as same grid needs to be pass into a different\n    possbile move in order for evaluation'''\n    cdef np.ndarray[dtype= int , ndim=2] next_grid= grid.copy()\n    cdef int [:,:] nxtgridview = next_grid\n    for row in range(5, -1, -1):\n        if nxtgridview[row][col] == 0:\n            break\n    nxtgridview[row][col] = mark\n    return next_grid\n\n# # Helper function for get_heuristic: checks if window satisfies heuristic conditions\ncdef int count( int[4] window,int piece):\n    cdef int count=0\n    for i in range (4):\n#         if window[i] != 0 or window[i] != 1 or window[i] != 2 :\n#             filehandler = open('ERROR IN WINDOW ', 'wb') #######################################################################################\n#             pickle.dump(count, filehandler)##########################################################               \n        if window[i]== piece:\n            count += 1\n    return count    \n\ncdef bint check_window( int[4] window,int num_discs,int piece ):\n    return ( (count(window, piece) == num_discs) and (count(window,0) == 4-num_discs) )\n\n# Helper function for get_heuristic: counts number of windows satisfying specified heuristic conditions\n\ncdef int count_windows(np.ndarray[ dtype=np.int32_t,ndim=2] grid,int num_discs,int piece):\n    cdef int num_windows = 0\n    cdef int[4] window\n    cdef int i =0\n    # horizontal\n    for row in range(6):\n        for col in range(4):\n            window = (grid[row, col:col+4]) \n            if check_window(window, num_discs, piece):\n                num_windows += 1\n    # vertical\n    for row in range(3):\n        for col in range(7):\n            window = (grid[row:row+4, col]) \n            if check_window(window, num_discs, piece):\n                num_windows += 1\n    # positive diagonal\n    for row in range(3):\n        i=0\n        for col in range(4):\n            for i in range (4):\n                window[i] = (grid[row+i,col+i])\n            if check_window(window, num_discs, piece):\n                num_windows += 1\n    # negative diagonal\n    for row in range(3, 6):\n        i=0\n        for col in range(4):\n            for i in range (4):\n                window[i] = (grid[row-i, col+i])\n            if check_window(window, num_discs, piece):\n                num_windows += 1\n    return num_windows\n\n    \n# Helper function for minimax: calculates value of heuristic for grid\ncdef int get_heuristic( np.ndarray[ dtype=np.int32_t,ndim=2] grid, int mark):\n    cdef int score=0\n#  score = num_threes - 1e2*num_threes_opp - 1e4*num_fours_opp + 1e6*num_fours\n#     num_threes = count_windows(grid, 3, mark, config)\n#     num_fours = count_windows(grid, 4, mark, config)\n#     num_threes_opp = count_windows(grid, 3, mark%2+1, config)\n#     num_fours_opp = count_windows(grid, 4, mark%2+1, config)\n    score = count_windows(grid, 3, mark) \\\n            - 100*count_windows(grid, 3, mark%2+1) \\\n            - 10000*count_windows(grid, 4, mark%2+1 ) \\\n            + 1000000*count_windows(grid, 4, mark)\n    return score\n\n# Uses minimax to calculate value of dropping piece in selected column\ncdef int score_move(np.ndarray[ dtype=np.int32_t,ndim=2]grid, int col,int mark, int  nsteps):\n    cdef np.ndarray[ dtype=np.int32_t,ndim=2] next_grid = drop_piece(grid, col, mark)\n    score = minimax(next_grid, nsteps-1, False, mark)    \n    \n    return score\n\n# Helper function for minimax: checks if agent or opponent has four in a row in the window\ncdef bint is_terminal_window(int[4] window):\n    return ( (count(window,1) == 4)or (count(window,2) == 4))\n\n# Helper function for minimax: checks if game has ended\ncdef bint is_terminal_node(np.ndarray[ dtype=np.int32_t,ndim=2] grid) :\n    cdef int num_windows = 0\n    cdef int [4] window\n    cdef bint not_draw = False\n    # Check for draw \n    for i in range(7):\n        if grid [0, i] == 0:\n            not_draw = True\n    if not_draw == False:\n        return True\n    # Check for win: horizontal, vertical, or diagonal\n    # horizontal\n    for row in range(6):\n        for col in range(4):\n            window = (grid[row, col:col+4])\n            if is_terminal_window(window):\n                    return True\n    # vertical\n    for row in range(3):\n        for col in range(7):\n            window = (grid[row:row+4, col])\n            if is_terminal_window(window):\n                    return True\n    # positive diagonal\n    for row in range(3):\n        for col in range(4):\n#             window = (grid[range(row, row+4), range(col, col+4)])\n            for i in range (4):\n                window[i] = (grid[row+i,col+i])\n            if is_terminal_window(window):\n                return True\n\n    # negative diagonal\n    for row in range(3, 6):\n        for col in range(4):\n#             window = (grid[range(row, row-4, -1), range(col, col+4)])\n            for i in range (4):\n                window[i] = (grid[row-i, col+i])\n            if is_terminal_window(window):\n                return True\n    return False\n\n\n\n# Minimax implementation with alfabeta pruning\ncdef int minimax(np.ndarray[ dtype=np.int32_t,ndim=2] Pnode,int depth,int maximizingPlayer,int mark):\n    cdef bint is_terminal\n    cdef int value\n    cdef int maxv\n    cdef int miniv\n    cdef np.ndarray[ dtype=np.int32_t,ndim=2] node = Pnode.copy()\n    cdef int [:,:] node_view = node\n    cdef int col\n    cdef np.ndarray[dtype= int , ndim=2] child \n    cdef int [7] val_m#valid \n    cdef int m_c=0#valid moves count\n    \n    for c in range(7):\n        if node_view [0][c]==0 :\n            val_m[m_c]=c\n            m_c += 1\n        \n    is_terminal = is_terminal_node(node)\n\n    if is_terminal:\n        value =get_heuristic(node, mark)\n        if value > 800000:\n              value= 800000+ 10*(depth)  #alfabeta pruning encoding the depth of a winning path into the score. So as not \n        return value                     # bother looking for similar or longer paths.\n    if depth == 0 :\n        value=get_heuristic(node, mark)\n        return value\n\n    if maximizingPlayer:\n        value = - 200000000 \n\n        for c in range(m_c):\n            col = val_m[c] \n            child = drop_piece(node,col, mark)  \n            maxv =minimax(child, depth-1, False, mark)             \n            value = max(value, maxv)\n            if value >= 800000 :##ALFA BETA PRUNING\n                winning_depth = (value -800000)%10\n                if winning_depth >= (depth-1):\n#                     filehandler = open('AlfaBetaPruningIntervention_saving {}x{} minimax calls'.format(m_c-c,depth), 'wb') #######################################################################################\n#                     pickle.dump(child, filehandler)##########################################################    \n                    break  #i  Could only come up with an equally fast path. remeber depth goes down. \n        return value\n    else:\n        value =  200000000 \n        for c in range(m_c):\n            col = val_m[c]\n            child = drop_piece(node,col,mark%2+1)\n            miniv = minimax(child, depth-1, True, mark)\n            value = min(value,miniv )\n            if value < -8000:##ALFA BETA PRUNING\n                break   \n        return value\n\ncpdef int my_c_agent4 (obs, config): \n\n    cdef np.ndarray[dtype= np.int32_t , ndim=2] grid = np.array(obs.board,np.intc ).reshape(6, 7)\n    cdef np.ndarray[ dtype=np.int32_t,ndim=1] valid_moves  \n    # Your code here: Amend the agent!\n    # Get list of valid moves\n    cdef int [7] val_m#valid \n    cdef int m_c=0#valid moves count\n    cdef int counter=1 #######################################################\n    cdef int [:,:] gridview = grid ##############################################\n \n\n    # Convert the board to a 2D grid\n    \n    \n    for c in range(7):\n        if gridview [0][c]==0 :\n            val_m[m_c]=c\n            m_c += 1\n#     valid_moves  = np.array([c for c in range(7) if grid[0][c] == 0],dtype= np.intc)\n\n    # Use the heuristic to assign a score to each possible board in the next step\n    N_STEPS=4\n\n    scores = dict(zip(val_m,\\\n                      [score_move(grid, val_m[i], obs.mark, N_STEPS) for i in range(m_c) ] ))\n    # Get a list of columns (moves) that maximize the heuristic\n    max_cols = [key for key in scores.keys() if scores[key] == max(scores.values())]\n    \n\n#     for r in range(6):#################################\n#         for c in range(7):\n#             if gridview[r,c] != 0 :\n#                 counter += 1\n#                 \n#     filehandler = open('MyAgents_scores_move{}'.format(counter), 'wb') #######################################################################################\n#     pickle.dump(scores, filehandler)##########################################################      \n\n\n    # Select at random from the maximizing columns \n#       return random.choice(max_cols)\n    # slightly improved the version by eliminating the randomness with a bit of strategy - conquering the center of the board\n    return max_cols[len(max_cols)\/\/2]","1b93b9a3":"speedcheck(my_c_agent4)","e95c654c":"from kaggle_environments import make, evaluate\n\nimport time\n\nstart = time.time()\n\n\n# Create the game environment\nenv = make(\"connectx\")\n\n\n# Two random agents play one game round\nmoves=env.run([my_c_agent4, my_c_agent])\n\n# Show the game\nenv.render(mode=\"ipython\")","d27a2063":"%%cython \nfrom cython.view cimport array as cvarray\n\ncimport numpy as np\nimport numpy as np\nimport pickle \nimport random\n\nDTYPE = np.intc \n\n\ncpdef  np.ndarray[dtype= int , ndim=2] drop_piece( np.ndarray[ dtype=np.int32_t,ndim=2] grid,int col,int mark):\n    ''' Gets board at next step if agent drops piece in selected column\n    Purposefully creates a new board image so as not to corrupt the old one, useful behavior as same grid needs to be pass into a different\n    possbile move in order for evaluation'''\n    cdef np.ndarray[dtype= int , ndim=2] next_grid= grid.copy()\n    cdef int [:,:] nxtgridview = next_grid\n    for row in range(5, -1, -1):\n        if nxtgridview[row][col] == 0:\n            break\n    nxtgridview[row][col] = mark\n    return next_grid\n\n# # Helper function for get_heuristic: checks if window satisfies heuristic conditions\ncdef int count( int[4] window,int piece):\n    cdef int count=0\n    for i in range (4):\n#         if window[i] != 0 or window[i] != 1 or window[i] != 2 :\n#             filehandler = open('ERROR IN WINDOW ', 'wb') #######################################################################################\n#             pickle.dump(count, filehandler)##########################################################               \n        if window[i]== piece:\n            count += 1\n    return count    \n\ncdef bint check_window( int[4] window,int num_discs,int piece ):\n    return ( (count(window, piece) == num_discs) and (count(window,0) == 4-num_discs) )\n\n# Helper function for get_heuristic: counts number of windows satisfying specified heuristic conditions\n\ncdef int count_windows(np.ndarray[ dtype=np.int32_t,ndim=2] grid,int num_discs,int piece):\n    cdef int num_windows = 0\n    cdef int[4] window\n    cdef int i =0\n    # horizontal\n    for row in range(6):\n        for col in range(4):\n            window = (grid[row, col:col+4]) \n            if check_window(window, num_discs, piece):\n                num_windows += 1\n    # vertical\n    for row in range(3):\n        for col in range(7):\n            window = (grid[row:row+4, col]) \n            if check_window(window, num_discs, piece):\n                num_windows += 1\n    # positive diagonal\n    for row in range(3):\n        i=0\n        for col in range(4):\n            for i in range (4):\n                window[i] = (grid[row+i,col+i])\n            if check_window(window, num_discs, piece):\n                num_windows += 1\n    # negative diagonal\n    for row in range(3, 6):\n        i=0\n        for col in range(4):\n            for i in range (4):\n                window[i] = (grid[row-i, col+i])\n            if check_window(window, num_discs, piece):\n                num_windows += 1\n    return num_windows\n\n    \n# Helper function for minimax: calculates value of heuristic for grid\ncdef int get_heuristic( np.ndarray[ dtype=np.int32_t,ndim=2] grid, int mark):\n    cdef int score=0\n    score = count_windows(grid, 3, mark) \\\n            - 1*count_windows(grid, 3, mark%2+1) \\\n            - 10000*count_windows(grid, 4, mark%2+1 ) \\\n            + 1000000*count_windows(grid, 4, mark)\n    return score\n\n# Uses minimax to calculate value of dropping piece in selected column\ncdef int score_move(np.ndarray[ dtype=np.int32_t,ndim=2]grid, int col,int mark, int  nsteps):\n    cdef np.ndarray[ dtype=np.int32_t,ndim=2] next_grid = drop_piece(grid, col, mark)\n    score = minimax(next_grid, nsteps-1, False, mark)    \n    \n    return score\n\n# Helper function for minimax: checks if agent or opponent has four in a row in the window\ncdef bint is_terminal_window(int[4] window):\n    return ( (count(window,1) == 4)or (count(window,2) == 4))\n\n# Helper function for minimax: checks if game has ended\ncdef bint is_terminal_node(np.ndarray[ dtype=np.int32_t,ndim=2] grid) :\n    cdef int num_windows = 0\n    cdef int [4] window\n    cdef bint not_draw = False\n    # Check for draw \n    for i in range(7):\n        if grid [0, i] == 0:\n            not_draw = True\n    if not_draw == False:\n        return True\n    # Check for win: horizontal, vertical, or diagonal\n    # horizontal\n    for row in range(6):\n        for col in range(4):\n            window = (grid[row, col:col+4])\n            if is_terminal_window(window):\n                    return True\n    # vertical\n    for row in range(3):\n        for col in range(7):\n            window = (grid[row:row+4, col])\n            if is_terminal_window(window):\n                    return True\n    # positive diagonal\n    for row in range(3):\n        for col in range(4):\n#             window = (grid[range(row, row+4), range(col, col+4)])\n            for i in range (4):\n                window[i] = (grid[row+i,col+i])\n            if is_terminal_window(window):\n                return True\n\n    # negative diagonal\n    for row in range(3, 6):\n        for col in range(4):\n#             window = (grid[range(row, row-4, -1), range(col, col+4)])\n            for i in range (4):\n                window[i] = (grid[row-i, col+i])\n            if is_terminal_window(window):\n                return True\n    return False\n\n\n\n# Minimax implementation with alfabeta pruning\ncdef int minimax(np.ndarray[ dtype=np.int32_t,ndim=2] Pnode,int depth,int maximizingPlayer,int mark):\n    cdef bint is_terminal\n    cdef int value\n    cdef int maxv\n    cdef int miniv\n    cdef np.ndarray[ dtype=np.int32_t,ndim=2] node = Pnode.copy()\n    cdef int [:,:] node_view = node\n    cdef int col\n    cdef np.ndarray[dtype= int , ndim=2] child \n    cdef int [7] val_m#valid \n    cdef int m_c=0#valid moves count\n    # Create valid moves list\n    for c in range(7):\n        if node_view [0][c]==0 :\n            val_m[m_c]=c\n            m_c += 1\n        \n    is_terminal = is_terminal_node(node)\n    if is_terminal:\n        value =get_heuristic(node, mark)\n        if value > 800000:\n              value= 800000+ 10*(depth)  #alfabeta pruning encoding the depth of a winning path into the score. So as not \n        return value                     # bother looking for similar or longer paths.\n    if depth == 0 :\n        value=get_heuristic(node, mark)\n        return value\n\n    if maximizingPlayer:\n        value = - 200000000 \n        for c in range(m_c):\n            col = val_m[c] \n            child = drop_piece(node,col, mark)  \n            maxv =minimax(child, depth-1, False, mark)             \n            value = max(value, maxv)\n            if value >= 800000 :##ALFA BETA PRUNING\n                winning_depth = (value -800000)%10\n                if winning_depth >= (depth-1):\n                    break  #i  Could only come up with an equally fast path. remeber depth goes down. \n        return value\n    else:\n        value =  200000000 \n        for c in range(m_c):\n            col = val_m[c]\n            child = drop_piece(node,col,mark%2+1)\n            miniv = minimax(child, depth-1, True, mark)\n            value = min(value,miniv )\n            if value < -8000:##ALFA BETA PRUNING\n                break   \n        return value\n\ncpdef int my_c_agent4a (obs, config): \n\n    cdef np.ndarray[dtype= np.int32_t , ndim=2] grid = np.array(obs.board,np.intc ).reshape(6, 7)\n    cdef np.ndarray[ dtype=np.int32_t,ndim=1] valid_moves  \n    cdef int [7] val_m#valid \n    cdef int m_c=0#valid moves count\n    cdef int counter=1 \n    cdef int [:,:] gridview = grid    \n    # Create valid moves list\n    for c in range(7):\n        if gridview [0][c]==0 :\n            val_m[m_c]=c\n            m_c += 1\n\n    # Use the heuristic to assign a score to each possible board in the next step\n    if m_c >= 6:\n        N_STEPS=4\n    if m_c ==5:\n        N_STEPS=4\n    if m_c ==4:\n        N_STEPS=5\n    if m_c <=3:\n        N_STEPS=7\n\n        \n    scores = dict(zip(val_m,[score_move(grid, val_m[i], obs.mark, N_STEPS) for i in range(m_c) ] ))\n    # Get a list of columns (moves) that maximize the heuristic\n    max_cols = [key for key in scores.keys() if scores[key] == max(scores.values())]\n    return max_cols[len(max_cols)\/\/2]","32cdc8c6":"speedcheck(my_c_agent4a)","e085be49":"get_win_percentages(agent1=my_agent, agent2=my_c_agent4a)","a7f5c0fe":"from kaggle_environments import evaluate, make, utils\n\nenv = make(\"connectx\", debug=True)\nenv.play([my_c_agent4a, None], width=500, height=450)","28412379":"# **Why Cython ? **\n\nOne way to speed code up is to write it in Cython.\nThis is a optimizing static compiler witch makes it possible to acheive almost raw C like speed while in the Python Enviroment. The speed increment can be Variable: 2x, 10x, 100x,1000x depending on the use. It certainly seemed a skill to pick up.\n\nIt acheives this by static compiling, type declaring ( like in C) and using functions that are closer to the machine code and that contain less overhead.\nIn my case i manage to acheive a speed increment against the python version of x6. Not Bad !!!!\nThis could mean i can look at least one or two more moves into the future in the 8 second time given in the competition","ff124ac4":"Each increment of N_step should increment expenentially the computational cost. And since the base is 6 ..\nour x6 gain  should just be enough to buy that extra foresight while perfoming in the same time scale as python written- my_agent\nNow i can increment how Forward thinking my c Agent is by changing N -steps from 3 to 4**** *redeclaring underneath","855ed8c4":"Both 100 % Win Ratio,\nGreat, so what next ? ","ee8a65ba":"For the speed test i run 10 matches, and beacuse the is a randomness to how long each match is i decide to count the total of how many moves my agent decide to take in these 10 matches.\nafter opening up the result of env.run i came up with  [actions.append(moves[i][0]['action']) for i in range (1,len(moves),2)] to capture a list of the decisions it took.","97dd1b32":"so i transleted into functional Cython !","7cca05e3":"Great, But is it working just as fine ??  checking out my victory ratio against a random opponent. ","3fdd3988":"# Final thoughts\n\nTHIS was just a pipline part of a bigger project awithc was to make my first RL machine that could initially learn of from the data that i generate with my_c_agent. Training NN takes up a lot of Data !! ( i was aiming at 50.000 Move dataset for my 5.000 Neuron Neural Net. so you see why speed was important to me !! \n\nSee the rest of the project here: link in comment down below !\n\nIf you liked it, want to know more about the fondamentals of Cython please Upvote and write in the comments Every tip i learnt i am happy to share ! As you can see there are a lot of debugging point i left in the code, in my_c_agent4 ( the hidden one). There we a lot of problems encountered and lessons learned. Gonna drop Some in with the Tricks in an upcomming notebook !! \n-link in comments\n\n**Ciao and thanks for reading !**","c346da7d":"**Draw !!**","19738f78":"Turns out that in this game with this size grid with the player thinking equally there is not much advantage of being able too see 4 moves ahead rather than 3. - Especially if we play conservatively !!\n\nBut seeing one move ahead does make us able to play less defensivly. i can decrease the penalty of the adversary getting 3 in a row to be equal but contrary as to my getting 3 Change in (get_heuristics) . I can do this because with the actual extra 1 step sight i can immagine him getting 4 and scoring the big penalty- if it is an actual risk wich I can better assert.","8a1ee051":"That is a x6 improvement in speed !!","7522f7be":"Another thought was to increase N_steps when the possible moves are less, Still exponential but with a smaller base.","c483f78f":"**- My N step lookahead minimax Agent with alfabeta pruning**\nI started off by modifyng the code from the written notebook of Alexis Cook\n[https:\/\/www.kaggle.com\/alexisbcook\/n-step-lookahead](http:\/\/)\n\nFor MiniMax Concept there is a great explanation here:\n[https:\/\/www.youtube.com\/watch?v=STjW3eH0Cik&list=PLUl4u3cNGP63gFHB6xb-kVBiQHYe_4hSi&index=6](http:\/\/)\nthis also contains a variant that takes into account the time constraints\n\nFor speed comparison purposes the agents function parts are declared above so as not to give the Cython version an unfair advantage.","a5ebaf7c":"# Play against my Best Agent Here !","d90a8266":"Opponent Stood no chance !!  and I still give an answer in the same time period !!**","a68ac03f":"# Speed Improvement, Showdown !\n\n","29a76f35":"NOW I CAN PLAY THEM AGAINST EACH OTHER !","38d78489":"# MY N-STEP LOOK AHEAD AGENT"}}