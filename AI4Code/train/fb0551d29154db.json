{"cell_type":{"08744afa":"code","e0fe017e":"code","9a8c4f2f":"code","bff475b3":"code","d8869eb6":"code","06902bbb":"code","b7adf32c":"code","01c9cc19":"code","21eab4ea":"code","bfad99f3":"code","035a4b6c":"code","d60b4c04":"code","6c490ad0":"code","e0d00741":"code","7e764238":"code","f60cccee":"code","a12ecfcb":"code","3765a739":"code","2f4d9e85":"code","de884528":"code","6304ab90":"code","4e7ef21f":"code","4af7ae10":"code","7bbccdde":"code","ebf066fd":"code","fc6d57f3":"code","fdf13676":"code","16f374f3":"code","be010f10":"code","9ce61940":"code","2c4f6c32":"code","7c482fce":"code","2f6e15d9":"code","44f883ad":"code","2a79722e":"code","de1c9da7":"code","754a2647":"code","1a8a22f2":"code","a04ad7ad":"code","af1bcdb0":"code","83a408cb":"code","22ee36fd":"code","0289b613":"code","2d745706":"code","05a790b5":"code","2204e432":"code","13c6ff39":"code","89da98d3":"code","39aa8def":"code","af405a76":"code","194e3c1a":"code","34289c24":"code","f721caea":"code","43bf347d":"code","55eb26fd":"code","cabed225":"code","11862d52":"code","4e175fad":"code","8ed2b60f":"markdown","8e9e9cf7":"markdown","54505980":"markdown","22429bf8":"markdown","c94ad974":"markdown","2014f2fa":"markdown","f1a4c393":"markdown","3752d14d":"markdown","6d63e0b1":"markdown","0afcc32c":"markdown","ec7cbe5b":"markdown","1b000dce":"markdown","298cebdb":"markdown"},"source":{"08744afa":"#import data file\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","e0fe017e":"#import library\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.linear_model import LinearRegression\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","9a8c4f2f":"df_train=pd.read_csv(\"..\/input\/covid19-global-forecasting-week-4\/train.csv\")\ndf_test=pd.read_csv(\"..\/input\/covid19-global-forecasting-week-4\/test.csv\")\ndf_sub=pd.read_csv(\"..\/input\/covid19-global-forecasting-week-4\/submission.csv\")\n\nprint(df_train.shape)\nprint(df_test.shape)\nprint(df_sub.shape)","bff475b3":"df_train.head()","d8869eb6":"print(f\"Unique Countries: {(df_train.Country_Region.nunique())}\")\nprint(f\"Period : {len(df_train.Date.unique())} days\")\nprint(f\"From : {df_train.Date.min()} To : {df_train.Date.max()}\")\n#we have 184 unique cuntries\n#we have 115 days from 22\/01\/2020 to 15\/05\/2020","06902bbb":"df_train.shape[0]\n#we have 35,995 observations","b7adf32c":"print(f\"Unique Regions: {df_train.shape[0]\/len(df_train.Date.unique())}\")\n#WE will use Panel regression when Unit: Unique_Region \n#Time variable: Days\n#This is balanced panel","01c9cc19":"df_train.Country_Region.value_counts()\n#shows that some countries have more than one region such as US, China and Canada","21eab4ea":"print(f\"Number of rows without Country_Region : {df_train.Country_Region.isna().sum()}\")\n#no N\/A for Country_region var","bfad99f3":"#creat new column\/var = Unique_Region\ndf_train[\"Unique_Region\"]=df_train.Country_Region","035a4b6c":"df_train ","d60b4c04":"df_train[df_train.Province_State.isna()==False]\n#The countries that have more than one region ","6c490ad0":"#If country has more than one region >> change Unique_Region to be \"Province_State.Country_region\"\n#If country has only one region or NaN >> Unique_Region is same as \"Country_region\"\ndf_train.Unique_Region[df_train.Province_State.isna()==False]=df_train.Province_State+\" . \"+df_train.Country_Region","e0d00741":"df_train.sample(5)","7e764238":"#Drop 3columns >> Id, Province_State and Country_region\ndf_train.drop(labels=[\"Id\",\"Province_State\",\"Country_Region\"], axis=1, inplace=True)","f60cccee":"df_train\n#35995rows * 4columns","a12ecfcb":"df_test.head()","3765a739":"print(f\"Period :{df_test.Date.nunique()} days\")\nprint(f\"From : {df_test.Date.min()} To : {df_test.Date.max()}\")\n#this data set has 43days from 02\/04\/2020 to 14\/05\/2020","2f4d9e85":"print(f\"Total Regions : {df_test.shape[0]\/43}\")\n#have 313 units as Training Data","de884528":"#creat new column\/var = Unique_Region\ndf_test[\"Unique_Region\"]=df_test.Country_Region\n#If country has more than one region >> change Unique_Region to be \"Province_State.Country_region\"\n#If country has only one region or NaN >> Unique_Region is same as \"Country_region\"\ndf_test.Unique_Region[df_test.Province_State.isna()==False]=df_test.Province_State+\" . \"+df_test.Country_Region","6304ab90":"df_test.sample(5)","4e7ef21f":"df_test.drop(labels=[\"Province_State\",\"Country_Region\"], axis=1, inplace=True)","4af7ae10":"df_test","7bbccdde":"len(df_test.Unique_Region.unique())\n#we have 313 units","ebf066fd":"df_sub\n#13459rows * 3columns","fc6d57f3":"train_dates=list(df_train.Date.unique())\ntest_dates=list(df_test.Date.unique())","fdf13676":"# Dates in train only = 72days\nonly_train_dates=set(train_dates)-set(test_dates)\nprint(\"Only train dates : \",len(only_train_dates))\n#dates in train and test = 43days\nintersection_dates=set(test_dates)&set(train_dates)\nprint(\"Intersection dates : \",len(intersection_dates))\n#dates in only test = 0days\nonly_test_dates=set(test_dates)-set(train_dates)\nprint(\"Only Test dates : \",len(only_test_dates))\n#we will use 72days to predict 43days","16f374f3":"#duplicate df_train2\ndf_train2 = pd.DataFrame()\ndf_train2['Date'] = df_train.Date\ndf_train2['ConfirmedCases'] = df_train.ConfirmedCases\ndf_train2['Fatalities'] = df_train.Fatalities\ndf_train2['Unique_Region'] = df_train.Unique_Region","be010f10":"#drop from 115days to 71days\ndf_train2.drop(df_train2[df_train2.Date>df_test.Date.min()]. index, inplace=True)\ndf_train2.drop(df_train2[df_train2.Date == df_test.Date.min()]. index, inplace=True)","9ce61940":"df_train2.sample(5)\n#22223rows * 5columns","2c4f6c32":"print(f\"Unique_Region : {df_train2.Unique_Region.nunique()} units\")\nprint(f\"Period : {df_train2.Date.nunique()} days\")\nprint(f\"From : {df_train2.Date.min()} To : {df_train2.Date.max()}\")","7c482fce":"#create y, x, fatalities, fatalities lag, Unique_Region and time varaibles\ndf_panel = pd.DataFrame()\ndf_panel['y'] = df_train2.ConfirmedCases\ndf_panel['x'] = df_panel.y.shift(1)\ndf_panel['Fatalities'] = df_train2.Fatalities\ndf_panel['Fata_lag'] = df_panel.Fatalities.shift(1)\ndf_panel['Unique_Region'] = df_train2.Unique_Region\ndf_panel['time'] = df_train2.Date","2f6e15d9":"#Drop day1 of each region since we dont have value of x value\ndf_panel.drop(df_panel[df_panel.time=='2020-01-22']. index, inplace=True)","44f883ad":"#convert datetime to interger\ndf_panel['time'] = pd.to_numeric(df_panel.time.str.replace('-',''))\nprint(df_panel['time'])","2a79722e":"df_panel","de1c9da7":"#create data as panel data\ndf_panel = df_panel.set_index(['Unique_Region','time'])","754a2647":"df_panel","1a8a22f2":"!pip install  linearmodels","a04ad7ad":"#run panel regression with fixed effects\nfrom linearmodels.panel import PanelOLS\nmod = PanelOLS(df_panel.y, df_panel.x, entity_effects=True)\n# mod = PanelOLS.from_formula('y ~ x + EntityEffects', df_panel)\nres = mod.fit(cov_type='clustered', cluster_entity=True)\nprint(res)\n#coeff of x is 1.069","af1bcdb0":"mod = PanelOLS.from_formula('Fatalities ~ Fata_lag + x + EntityEffects', df_panel)\nres = mod.fit(cov_type='clustered', cluster_entity=True)\nprint(res)\n#we got coeff for fatalities' yesterday and cases' yesterday equal to 1.0771 and 0.0014  respectively","83a408cb":"#duplicate df_train3\ndf_train3 = pd.DataFrame()\ndf_train3['Date'] = df_train.Date\ndf_train3['ConfirmedCases'] = df_train.ConfirmedCases\ndf_train3['Fatalities'] = df_train.Fatalities\ndf_train3['Unique_Region'] = df_train.Unique_Region","22ee36fd":"#drop from 115days to 44days include 2020-04-01\ndf_train3.drop(df_train3[df_train3.Date<'2020-04-01']. index, inplace=True)\ndf_train3.drop(df_train3[df_train3.Date=='2020-05-15']. index, inplace=True)\n#create lag var for predict data\ndf_train3['Fata_lag'] = df_train3.Fatalities.shift(1)\ndf_train3['x'] = df_train3.ConfirmedCases.shift(1)\n#drop from 44days to 43days \ndf_train3.drop(df_train3[df_train3.Date<'2020-04-02']. index, inplace=True)","0289b613":"df_train3","2d745706":"#predict cases (y_cases) for day1 of each cross sectional : 2020-04-02\n#using previous actual case for day1\ndf_train3['y_cases'] = round(1.0690*(df_train3.x))","05a790b5":"df_train3.head(50)","2204e432":"df_train3.tail(45)","13c6ff39":"#predict cases (y_cases) for other 42days of each cross sectional : 2020-04-03 until 2020-05-14\n#dynamic forecast\n#End python code after 5 seconds\nimport time\nimport threading\n\ndef listen():\n    for i in range(1,df_train3.shape[0]):\n        df_train3.loc[df_train3['Date'] != '2020-04-02', 'x'] = df_train3.y_cases.shift(1)\n        df_train3['y_cases'] = round(1.0690*(df_train3.x))\n\nt = threading.Thread(target=listen)\nt.daemon = True\nt.start()\n\ntime.sleep(5)","89da98d3":"df_train3.head(50)","39aa8def":"df_train3.tail(45)","af405a76":"#predict fatality rate (predictrate) for day1 of each cross sectional : 2020-04-02\n#using previous actual rate and previous actual case for day 1\ndf_train3['y_fata'] = round(1.0771*(df_train3.Fata_lag) + 0.0014*(df_train3.x))","194e3c1a":"df_train3","34289c24":"#predict fatality rate for other 42days of each cross sectional : 2020-04-03 until 2020-05-14\n#dynamic forecast\n#End python code after 5 seconds\nimport time\nimport threading\n\ndef listen():\n    for i in range(1,df_train3.shape[0]):\n        df_train3.loc[df_train3['Date'] != '2020-04-02', 'Fata_lag'] = df_train3.y_fata.shift(1)\n        df_train3['y_fata'] = round(1.0771*(df_train3.Fata_lag) + 0.0014*(df_train3.x))\n\nt = threading.Thread(target=listen)\nt.daemon = True\nt.start()\n\ntime.sleep(5)","f721caea":"df_train3","43bf347d":"final_df=pd.DataFrame(columns=[\"y_cases\",\"y_fata\"])\nfinal_df=pd.concat([final_df,df_train3], ignore_index=True)","55eb26fd":"df_sub","cabed225":"#replace data\ndf_sub.ConfirmedCases=final_df.y_cases\ndf_sub.Fatalities=final_df.y_fata","11862d52":"df_sub","4e175fad":"df_sub.to_csv(\"submission.csv\", index=None)","8ed2b60f":"## Predict Fatalities using Linear regression\nour equation is\nfatalities today = B1 * (fatalities yesterday) + B2 * (Cases' yesterday)\n","8e9e9cf7":"Total regions in test is same as train data","54505980":"# **Data preparation**","22429bf8":"# Predict using dynamic forecast","c94ad974":"## Data Preparation_Train data >> 71 days","2014f2fa":"## Predict cases","f1a4c393":"# Submission\nuse y_cases and y_fata from df_train3","3752d14d":"# Panel regression","6d63e0b1":"## Predict Cases using Panel regression (Fixed effects)\nWe decided to use Panel regression since our data is recorded both cross section and time series features and we use Fixed effect bc from Hausman test, P-value less than 0.05. So fixed effect is better than random effect\n\nWhen cross section is Unique_region = 313 units and time variable is time = 70 days From : 2020-01-23 To : 2020-04-01 (drop day1 since we dont have lag term data) >> using file df_train2\n\nAfter we get the panel regression equation we will use the equation to predict number of cases for 43 days From : 2020-04-02 To : 2020-05-14 >> using file df_train3\n* y = today's cases\n* x = yesterdays's cases\n\ncode turtorials;\nhttps:\/\/stackoverflow.com\/questions\/49067495\/fixed-effects-model-using-python-linearmodels\nhttps:\/\/stackoverflow.com\/questions\/24195432\/fixed-effect-in-pandas-or-statsmodels\/44836199#44836199\nhttps:\/\/stackoverflow.com\/questions\/50863691\/pandas-convert-date-object-to-int","0afcc32c":"### Data Preparation_Train Data","ec7cbe5b":"### Data Preparation_Submission data","1b000dce":"## Predict Fatality \n","298cebdb":"### Data Preparation_Test Data"}}