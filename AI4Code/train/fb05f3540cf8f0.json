{"cell_type":{"39f32cbd":"code","dc7840c3":"code","be875e5c":"code","e4b1a57a":"code","4a5d7d99":"code","486fd1ee":"code","0e9509a4":"code","20f6dba0":"code","3588766a":"code","933b83f7":"code","440d2820":"code","a4c6a0e0":"code","44b9bdeb":"code","a1223293":"code","377f5893":"code","f950068f":"code","e05dca61":"code","67c7b922":"code","e314e6c2":"code","4cc5b29f":"code","b4036347":"code","d309c318":"code","7527977e":"code","9fc77aa4":"code","270b9dc7":"code","c47d3fa1":"code","792f68fc":"code","681ee930":"code","1745637a":"code","325e900a":"code","9366822b":"code","bac72a36":"code","8edfaec1":"markdown","4b0c6e86":"markdown","1546769a":"markdown","89cdda2d":"markdown","02f58e33":"markdown","0b7bf1fa":"markdown","8861fe7b":"markdown","0bbd155f":"markdown","46992a73":"markdown","f09ef5df":"markdown","cb524ad6":"markdown","5836b973":"markdown","b05f922f":"markdown","8adfcc05":"markdown","aa25d092":"markdown","0ed2fefd":"markdown","14de6827":"markdown"},"source":{"39f32cbd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input\/covid19'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","dc7840c3":"# Import modules\nimport numpy as np\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nimport seaborn as sb\n%matplotlib inline","be875e5c":"!pip install openpyxl  # Install openpyxl to load xlsx extension excel file","e4b1a57a":"# Import dataset\ndf = pd.read_excel('..\/input\/covid19\/Kaggle_Sirio_Libanes_ICU_Prediction.xlsx')","4a5d7d99":"# Increase the number of rows and columns to deal with big dataset\npd.set_option('display.max_rows',300) # Set display rows to 300 \npd.set_option('display.max_columns',300) # Set Display columns to 300","486fd1ee":"df.head()","0e9509a4":"# Create a dataframe that identify for every patient if any of its ICU values more than 0\nICU_admitted = (df.groupby('PATIENT_VISIT_IDENTIFIER').sum()['ICU'] > 0).reset_index()*1  #  '*1' to convert True\/False to (1, 0)","20f6dba0":"ICU_admitted","3588766a":"# Join the two dataframe and add '_admitted' to common ICU column\ndf = df.join(ICU_admitted.set_index('PATIENT_VISIT_IDENTIFIER'), on = 'PATIENT_VISIT_IDENTIFIER', rsuffix='_admitted')","933b83f7":"# Delete any record that had `ICU = 1` and create it in `df_model`\ndf_model = df[df.ICU == 0]","440d2820":"# Drop columns \ndf_model.drop( ['ICU', 'PATIENT_VISIT_IDENTIFIER'], axis = 1, inplace = True)","a4c6a0e0":"patients_admitted = df_model[df_model.ICU_admitted == 1].value_counts().sum()\/ len(df_model)\nprint('Percentage of patients admitted to ICU : {:.2f}%'.format (patients_admitted*100))\n","44b9bdeb":"# Checking the proportions of Nulls\nmissing_props = df_model.isna().sum() \/ len(df_model)\nmissing_props[missing_props > 0].sort_values(ascending=False)","a1223293":"df_model.fillna(method='ffill', inplace = True) # ffill forward filling of nulls\ndf_model.fillna(method='bfill', inplace = True) # bfill backward filling of nulls for the values in the first rows","377f5893":"df_model.isna().sum().all() # Checking for any remaining nulls","f950068f":"# Check duplicated values\ndf_model.duplicated().sum()","e05dca61":"df_model.dropna(inplace = True)","67c7b922":"# Ensure the consistency of all labels \ndf_model.columns = df_model.columns.str.replace(' ', '_')","e314e6c2":"# Convert AGE_PERCENTIL into numbers\ndf_model.AGE_PERCENTIL = df_model.AGE_PERCENTIL.apply(lambda x : int(x.replace('th', '').strip('Above ')))","4cc5b29f":"df_model.info(verbose= True)","b4036347":"# Create dataframe with only data in the first window '0-2'\ndf_model_0_2_window = df_model[df_model.WINDOW == '0-2']\ndf_model_0_2_window.drop('WINDOW', axis = 1, inplace = True)\ndf_model_0_2_window = pd.get_dummies(df_model_0_2_window, columns= ['AGE_PERCENTIL'], drop_first = True) # Create dummies","d309c318":"# Create dataframe with only data in the first window '0-4'\ndf_model_0_4_window = df_model[(df_model.WINDOW == '0-2') | (df_model.WINDOW == '2-4')]\ndf_model_0_4_window.drop('WINDOW', axis = 1, inplace = True)\ndf_model_0_4_window = pd.get_dummies(df_model_0_4_window, columns= ['AGE_PERCENTIL'], drop_first = True) # Create dummies","7527977e":"# Create dataframe with only data in the first window '0-6'\ndf_model_0_6_window = df_model[(df_model.WINDOW == '0-2') | (df_model.WINDOW == '2-4')\n                               | (df_model.WINDOW == '4-6')]\ndf_model_0_6_window.drop('WINDOW', axis = 1, inplace = True)\ndf_model_0_6_window = pd.get_dummies(df_model_0_6_window, columns= ['AGE_PERCENTIL'], drop_first = True) # Create dummies","9fc77aa4":"# Create dummies for df_model\ndf_model = pd.get_dummies(df_model, columns= ['WINDOW', 'AGE_PERCENTIL'], drop_first= True)","270b9dc7":"df_model","c47d3fa1":"\"\"\"\nfrom patsy import dmatrices\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\ny, X = dmatrices('ICU_admitted~'+'+'.join(df_model.columns[:-1]), df_model, return_type = 'dataframe')\nvif = pd.DataFrame()\nvif[\"VIF Factor\"] = [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]\nvif[\"features\"] = X.columns\nvif.round(1)[vif['VIF Factor'] > 10]\n\"\"\"","792f68fc":"def model(df):\n    from sklearn.model_selection import train_test_split\n    from sklearn.ensemble import RandomForestClassifier\n    from sklearn import metrics\n    df_test = df.copy()\n    target = 'ICU_admitted'\n    y = df_test.pop(target)\n    X = df_test\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.15)\n    clf = RandomForestClassifier(max_depth=30, n_estimators=100)\n    clf.fit(X_train, y_train)\n    y_pred = clf.predict(X_test)\n    \n    # Record Model Metrix\n    print(\"Accuracy:{:.6f}\".format(metrics.accuracy_score(y_test, y_pred)))\n    print(\"Precision:{:.6f}\".format(metrics.precision_score(y_test, y_pred)))\n    print(\"Recall:{:.6f}\".format(metrics.recall_score(y_test, y_pred)))\n    \n    # Print Confusion Matrix\n    confusion_matrix = pd.DataFrame(metrics.confusion_matrix(y_test, y_pred)) \n    sb.heatmap(confusion_matrix, annot=True, cmap=\"Blues\")\n    \n    return metrics.accuracy_score(y_test, y_pred)","681ee930":"score_all = model(df_model)","1745637a":"score_window_0_2 = model(df_model_0_2_window)","325e900a":"score_window_0_4 = model(df_model_0_4_window)","9366822b":"score_window_0_6 = model(df_model_0_6_window)","bac72a36":"plt.bar(['Window 0-2', 'Window 0-4', 'Window 0-6', 'Window All'], \n        [score_window_0_2, score_window_0_4, score_window_0_6, score_all])","8edfaec1":"# Multicolinearity Check","4b0c6e86":"**As Stated in the data description we will try to fill nulls with perceding values**\n> Tips & Tricks: It is reasonable to assume that a patient who does not have a measurement recorded in a time window is clinically stable, potentially presenting vital signs and blood labs similar to neighboring windows. Therefore, one may fill the missing values using the next or previous entry. Attention to multicollinearity and zero variance issues in this data when choosing your algorithm.","1546769a":"## **Using all windows parameter to build Scikit Learn Random Forest Classification Model**","89cdda2d":"We have got a good model using Random Forest Classifier and all windows. The window from 0-2 though has got very poor predictability.","02f58e33":"## Missing Data","0b7bf1fa":"# Conculsions","8861fe7b":"### Create model for Window from 0-2","0bbd155f":"### Compare Models for different windows","46992a73":"# Exploring Data","f09ef5df":"### Create model for all windows","cb524ad6":"> We need to clean up the data so that we omit every record that has `ICU = 1`  \nBut first we want to create a new column that identify if the patient eventually got to the ICU or not","5836b973":"## About the data\n> COVID-19 pandemic impacted the whole world, overwhelming healthcare systems - unprepared for such intense and lengthy request for ICU beds, professionals, personal protection equipment and healthcare resources.\nBrazil recorded first COVID-19 case on February 26 and reached community transmission on March 20.","b05f922f":"# Introduction","8adfcc05":"### Create model for Window from 0-4","aa25d092":"## The Task:\n> Task 01\nPredict admission to the ICU of confirmed COVID-19 cases.\nBased on the data available, is it feasible to predict which patients will need intensive care unit support?\nThe aim is to provide tertiary and quarternary hospitals with the most accurate answer, so ICU resources can be arranged or patient transfer can be scheduled.","0ed2fefd":"The following code is useful to check multicolinearity by checking the \"Variable Infliteration Factor\"  \nThis can take too long to run, So I converted it to docstring","14de6827":"### Create model for Window from 0-6"}}