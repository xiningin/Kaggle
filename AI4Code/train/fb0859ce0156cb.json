{"cell_type":{"6f376a91":"code","e877979d":"code","da495d63":"code","b0f9c538":"code","03616dec":"code","c4aac76a":"code","5a808387":"code","96ac1de2":"code","63d07757":"code","fb9931a8":"code","94132496":"code","54abc6bb":"code","5e425fd5":"code","aeadbba3":"code","9d613fcf":"code","43a284a8":"code","2080cd83":"code","096a9336":"code","434c4adf":"code","3742fed7":"code","0cdf8bc3":"code","cadba0a4":"code","12817532":"code","fea5c0f5":"code","31ee6285":"code","76975441":"code","1e1173eb":"markdown","6795c6b1":"markdown","b3ea073f":"markdown","01b1cbe9":"markdown","63916f38":"markdown","03088899":"markdown","8a1b3e70":"markdown","7a70a352":"markdown","6447fb97":"markdown","84093237":"markdown","db438889":"markdown","ba43feb4":"markdown","01492ff6":"markdown","48b3bf3e":"markdown","d97a1764":"markdown"},"source":{"6f376a91":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e877979d":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","da495d63":"df = pd.read_csv(\"\/kaggle\/input\/iris\/Iris.csv\")\ndf.head()","b0f9c538":"df.shape","03616dec":"df.columns","c4aac76a":"df.describe()","5a808387":"df.isnull().sum()","96ac1de2":"df = df.drop(\"Id\",axis=1)\ndf.head()","63d07757":"sns.countplot(x=df.Species)\nplt.title(\"Species count\")\nplt.show()","fb9931a8":"plt.figure(figsize=(10,6))\nsns.heatmap(df.corr())\nplt.show()","94132496":"df.columns","54abc6bb":"plt.figure(figsize=(10,6))\nsns.scatterplot(x=\"SepalLengthCm\",y=\"SepalWidthCm\",data=df,hue=df.Species)\nplt.title(\"Sepal length and sepal width\")\nplt.show()","5e425fd5":"plt.figure(figsize=(10,6))\nsns.scatterplot(x=\"PetalLengthCm\",y=\"PetalWidthCm\",data=df,hue=df.Species)\nplt.title(\"Petal length and petal width\")\nplt.show()","aeadbba3":"sns.pairplot(df,hue=\"Species\")\nplt.show()","9d613fcf":"numerical_features = [x for x in df.columns if df[x].dtype=='int64' or df[x].dtype=='float64']\nplt.figure(figsize=(10,6))\nfor i in numerical_features:\n    sns.boxplot(x=i,data=df)\n    plt.show()","43a284a8":"sns.displot(df.SepalWidthCm,kde=True)\nplt.show()","2080cd83":"from scipy import stats\nz = np.abs(stats.zscore(df['SepalWidthCm']))\nz\ndf['SepalWidthCm'] = np.where(z>3,3,df['SepalWidthCm'])","096a9336":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ndf['Species'] = le.fit_transform(df['Species'])\ndf.head()","434c4adf":"X = df.drop(\"Species\",axis=1)\ny = df.Species","3742fed7":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3,random_state=0)","0cdf8bc3":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report\nlr = LogisticRegression(multi_class = 'multinomial', solver = 'newton-cg')\nlr.fit(X_train,y_train)\ny_pred = lr.predict(X_test)\nprint(confusion_matrix(y_test, y_pred))\nprint(classification_report(y_test,y_pred))\nprint(\"Accuracy for multinomial logistic regression: \",accuracy_score(y_test, y_pred)*100,'%')","cadba0a4":"from sklearn.tree import DecisionTreeClassifier\ndt = DecisionTreeClassifier()\ndt.fit(X_train,y_train)\ny_pred = dt.predict(X_test)\nprint(confusion_matrix(y_test, y_pred))\nprint(classification_report(y_test,y_pred))\nprint(\"Accuracy for Decision tree: \",accuracy_score(y_test, y_pred)*100,'%')","12817532":"from sklearn.ensemble import RandomForestClassifier\nrf = RandomForestClassifier()\nrf.fit(X_train,y_train)\ny_pred = rf.predict(X_test)\nprint(confusion_matrix(y_test, y_pred))\nprint(classification_report(y_test,y_pred))\nprint(\"Accuracy for random forest: \",accuracy_score(y_test, y_pred)*100,'%')","fea5c0f5":"from sklearn.neighbors import KNeighborsClassifier\naccuracy_list = []\nfor k in range(1,50):\n    knn = KNeighborsClassifier(n_neighbors=k)\n    knn.fit(X_train,y_train)\n    y_pred = knn.predict(X_test)\n    accuracy_list.append(accuracy_score(y_test,y_pred))","31ee6285":"#plot graph\nplt.plot(range(1,50),accuracy_list)\nplt.xlabel('Value of KNN')\nplt.ylabel('Accuracy')\nplt.show()","76975441":"from sklearn.ensemble import RandomForestClassifier\nknn = KNeighborsClassifier(n_neighbors=10)\nknn.fit(X_train,y_train)\ny_pred = knn.predict(X_test)\nprint(confusion_matrix(y_test, y_pred))\nprint(classification_report(y_test,y_pred))\nprint(\"Accuracy for random forest: \",accuracy_score(y_test, y_pred)*100,'%')","1e1173eb":"There are no missing values in the dataset.","6795c6b1":"Since the data is normally distributed, hence I'll be using z-score for treating outliers","b3ea073f":"There are same number of observations in each species. ","01b1cbe9":"# Outliers treatment","63916f38":"As seen from above scatter plot of petal length and petal width, setosa class is easily separable. Versicolor and virginica classes are also separable","03088899":"## Decision tree","8a1b3e70":"# Glimpse of dataset","7a70a352":"From the above scatter plot of sepal length and sepal width, we see that Setosa species is a separated class but versicolot and virginica are not linearly separable","6447fb97":"## K nearest neighbors","84093237":"We see there are few outliers in SepalWidthCm feature. ","db438889":"## Random forest","ba43feb4":"## Multinomial Logistic regression","01492ff6":"# Encoding","48b3bf3e":"# Model Building","d97a1764":"# Exploratory data analysis"}}