{"cell_type":{"a56c4e17":"code","d1423d2c":"code","0f4de567":"code","11535cd8":"code","3aad5c2d":"code","0d70b73c":"code","7cf54a2e":"code","44f4e4d5":"code","6ca9344c":"code","013667c0":"code","edd1cf33":"code","e4b56229":"code","6e123fbf":"code","0d74b228":"code","06601beb":"code","b6677322":"code","abb0141c":"code","0eeb63f6":"code","0f53133e":"code","adf73281":"code","d9593501":"markdown","62060081":"markdown","ba199af6":"markdown","ce2a70c0":"markdown"},"source":{"a56c4e17":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport sys\nimport sklearn\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.preprocessing import StandardScaler\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d1423d2c":"train = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv\")\n\nnew_data = pd.concat([train, test])\ndf = new_data","0f4de567":"df","11535cd8":"df.info()","3aad5c2d":"# \ubcc0\ud658 \ubc29\uc9c0 copy\ndef copy(df):\n    return df.copy()\n\n# col drop\ndef drop(df, col):\n    new_df = df.drop(col, axis=1)\n    return new_df\n\n# row drop(drop null)\ndef drop_row(df, col):\n    # find\n    # new_df = df[df[col] != find]\n    new_df = df[~df[col].isnull()]\n    return new_df\n\n# One-hot-encoding\ndef get_dummies(df, col):\n    return pd.get_dummies(df, columns=[col])\n\n# to_numeric\ndef to_numeric(df, col):\n    new_df = df.copy()\n    new_df[col] = pd.to_numeric(new_df[col])\n    return new_df\n\n\n# fillna\ndef fill(df, col, filled):\n    if filled == 'median':\n        num = df[~df[col].isnull()]\n        num = pd.to_numeric(num[col])\n        filled = str(num.median())\n    new_df = df.copy()\n    new_df.loc[df[col].isnull(), col] = filled\n    return new_df\n\n# target\ndef price_pipeline(df):\n    return df.pipe(to_numeric, \"SalePrice\")\n\ndef pipeline(df):\n    return (df.pipe(copy)\n        # drop(Numeric)\n        .pipe(drop, \"Id\") # A\n        .pipe(drop, \"MSSubClass\") # B\n        .pipe(drop, \"LotFrontage\") # D\n        .pipe(drop, \"LotArea\") # E\n        .pipe(drop, \"Alley\") # G\n        .pipe(drop, \"Utilities\") # J\n        .pipe(drop, \"Condition2\") # O\n        .pipe(drop, \"OverallCond\") # S\n        .pipe(drop, \"RoofMatl\") # W\n        .pipe(drop, \"Exterior2nd\") # Y\n        .pipe(drop, \"MasVnrArea\") # AA \n        .pipe(drop, \"Foundation\") # AD  \n        .pipe(drop, \"BsmtQual\") # AE\n        .pipe(drop, \"BsmtExposure\") # AG\n        .pipe(drop, \"BsmtFinType1\") # AH\n        .pipe(drop, \"BsmtFinSF1\") # AI\n        .pipe(drop, \"BsmtFinType2\") # AJ\n        .pipe(drop, \"BsmtFinSF2\") # AK\n        .pipe(drop, \"BsmtUnfSF\") # AL\n        .pipe(drop, \"2ndFlrSF\") # AS\n        .pipe(drop, \"LowQualFinSF\") # AT\n        .pipe(drop, \"GrLivArea\") # AU\n        .pipe(drop, \"BsmtFullBath\") # AV\n        .pipe(drop, \"BsmtHalfBath\") # AW\n        .pipe(drop, \"HalfBath\") # AY\n        .pipe(drop, \"BedroomAbvGr\") # AZ\n        .pipe(drop, \"KitchenAbvGr\") # BA\n        .pipe(drop, \"KitchenQual\") # BB \n        .pipe(drop, \"Fireplaces\") # BE\n        .pipe(drop, \"FireplaceQu\") # BF\n        .pipe(drop, \"GarageType\") # BG\n        .pipe(drop, \"GarageYrBlt\") # BH\n        .pipe(drop, \"GarageFinish\") # BI\n        .pipe(drop, \"GarageCars\") # BJ\n        .pipe(drop, \"GarageArea\") # BK\n        .pipe(drop, \"PavedDrive\") # BN\n        .pipe(drop, \"WoodDeckSF\") # BO\n        .pipe(drop, \"OpenPorchSF\") # BP\n        .pipe(drop, \"EnclosedPorch\") # BQ\n        .pipe(drop, \"3SsnPorch\") # BR\n        .pipe(drop, \"ScreenPorch\") # BS\n        .pipe(drop, \"PoolArea\") # BT\n        .pipe(drop, \"PoolQC\") # BU\n        .pipe(drop, \"Fence\") # BV\n        .pipe(drop, \"MiscFeature\") # BW\n        .pipe(drop, \"MiscVal\") # BX\n        .pipe(drop, \"MoSold\") # BY\n        .pipe(drop, \"YrSold\") # BZ\n        .pipe(drop, \"SaleType\") # CA\n        .pipe(drop, \"SaleCondition\") # CB \n            \n        .pipe(get_dummies, \"MSZoning\") # C\n        .pipe(get_dummies, \"Street\") # F\n        .pipe(get_dummies, \"LotShape\") # H\n        .pipe(get_dummies, \"LandContour\") # I\n        .pipe(get_dummies, \"LotConfig\") # K\n        .pipe(get_dummies, \"LandSlope\") # L\n        .pipe(get_dummies, \"Neighborhood\") # M       \n        .pipe(get_dummies, \"Condition1\") # N\n        .pipe(get_dummies, \"BldgType\") # P\n        .pipe(get_dummies, \"HouseStyle\") # Q\n        .pipe(to_numeric, \"OverallQual\") # R\n        .pipe(to_numeric, \"YearBuilt\") # T\n        .pipe(to_numeric, \"YearRemodAdd\") # U\n            \n        .pipe(get_dummies, \"RoofStyle\") # V\n        .pipe(get_dummies, \"Exterior1st\") # X\n        .pipe(get_dummies, \"MasVnrType\") # Z\n        .pipe(get_dummies, \"ExterQual\") # AB\n        .pipe(get_dummies, \"ExterCond\") # AC      \n        .pipe(get_dummies, \"BsmtCond\") # AF\n        .pipe(get_dummies, \"Heating\") # AN\n        .pipe(fill, \"TotalBsmtSF\", \"median\") # AM\n        .pipe(to_numeric, \"TotalBsmtSF\") # AM     \n        .pipe(get_dummies, \"HeatingQC\") # AO\n        .pipe(get_dummies, \"CentralAir\") # AP \n        .pipe(drop_row, \"Electrical\") # AQ\n        .pipe(get_dummies, \"Electrical\") # AQ\n        .pipe(to_numeric, \"1stFlrSF\") # AR\n        .pipe(to_numeric, \"FullBath\") # AX\n        .pipe(to_numeric, \"TotRmsAbvGrd\") #BC\n        .pipe(get_dummies, \"Functional\") # BD\n        .pipe(get_dummies, \"GarageQual\") # BL\n        .pipe(get_dummies, \"GarageCond\") #BM\n        .pipe(to_numeric, \"SalePrice\")) #\n            \ndata = pipeline(df)\ndata = price_pipeline(data)\ndata","0d70b73c":"train_set = data.iloc[:len(train)-1, :]\ntest_set = data.iloc[len(train_set):, :]","7cf54a2e":"train_data = drop(train_set, \"SalePrice\")\ntrain_data","44f4e4d5":"test_data = drop(test_set, \"SalePrice\")\ntest_data","6ca9344c":"train_label = train_set[\"SalePrice\"]\ntrain_label","013667c0":"numeric_col = ['YearBuilt',  'YearRemodAdd',  'TotalBsmtSF', '1stFlrSF',  'TotRmsAbvGrd']\n# scaler = MinMaxScaler()\nscaler = StandardScaler()\n\nchange_numeric = scaler.fit_transform(train_data[numeric_col])\ntrain_data = np.concatenate((change_numeric, train_data.iloc[:, len(numeric_col):].values), axis = 1)\n\nchange_test_numeric = scaler.transform(test_data[numeric_col])\ntest_data = np.concatenate((change_test_numeric, test_data.iloc[:, len(numeric_col):].values), axis = 1)","edd1cf33":"train_data","e4b56229":"from lightgbm import LGBMRegressor\n\nLGBM_reg = LGBMRegressor(n_estimators=100, random_state=42)\nLGBM_reg.fit(train_data, train_label)","6e123fbf":"from sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import mean_absolute_error\n\ntime_predictions = LGBM_reg.predict(train_data)\nLGBM_mae = mean_absolute_error(train_label, time_predictions)\nLGBM_mse = mean_squared_error(train_label, time_predictions)\nLGBM_rmse = np.sqrt(LGBM_mse)\n\nprint(\"LGBM_mae : \", LGBM_mae, \"\\nLGBM_mse : \", LGBM_mse, \"\\nLGBM_rmse : \", LGBM_rmse)","0d74b228":"def display_scores(scores):\n    print(\"Scores:\", scores)\n    print(\"Mean:\", scores.mean())\n    print(\"Standard deviation:\", scores.std())","06601beb":"from sklearn.model_selection import cross_val_score\nLGBM_scores = cross_val_score(LGBM_reg, train_data, train_label,\n                                scoring=\"neg_mean_squared_error\", cv=10)\nLGBM_rmse_scores = np.sqrt(-LGBM_scores)\ndisplay_scores(LGBM_rmse_scores)","b6677322":"from sklearn.model_selection import GridSearchCV\n\nparam_grid = [\n    # try 12 (3\u00d74) combinations of hyperparameters\n    {'n_estimators': [3, 10, 30], 'max_features': [2, 4, 6, 8]},\n    # then try 6 (2\u00d73) combinations with bootstrap set as False\n    {'bootstrap': [False], 'n_estimators': [3, 10], 'max_features': [2, 3, 4]},\n  ]\n\nLGBM_reg = LGBMRegressor(random_state=42)\n# train across 5 folds, that's a total of (12+6)*5=90 rounds of training \ngrid_search = GridSearchCV(LGBM_reg, param_grid, cv=5,\n                           scoring='neg_mean_squared_error',\n                           return_train_score=True)\ngrid_search.fit(train_data, train_label)","abb0141c":"cvres = grid_search.cv_results_\nfor mean_score, params in zip(cvres[\"mean_test_score\"], cvres[\"params\"]):\n    print(np.sqrt(-mean_score), params)","0eeb63f6":"feature_importances = grid_search.best_estimator_.feature_importances_\nfeature_importances","0f53133e":"final_model = grid_search.best_estimator_\nfinal_predictions = final_model.predict(test_data)","adf73281":"sub = pd.DataFrame()\nsub['Id'] = test['Id']\nsub['SalePrice'] = final_predictions\nsub.to_csv('submission.csv',index=False)","d9593501":"XGBRegressor, LGBMRegressor","62060081":"Target(\ubaa9\ud45c\uac12)\nSalePrice - the property's sale price in dollars. This is the target variable that you're trying to predict.\nProperty info(\uac74\ubb3c \uc815\ubcf4)\nMSSubClass: The building class\n    20\t\t1-STORY 1946 & NEWER ALL STYLES\n\n    30\t\t1-STORY 1945 & OLDER\n\n    40\t\t1-STORY W\/FINISHED ATTIC ALL AGES\n\n    45\t\t1-1\/2 STORY - UNFINISHED ALL AGES\n\n    50\t\t1-1\/2 STORY FINISHED ALL AGES\n\n    60\t\t2-STORY 1946 & NEWER\n\n    70\t\t2-STORY 1945 & OLDER\n\n    75\t\t2-1\/2 STORY ALL AGES\n\n    80\t\tSPLIT OR MULTI-LEVEL\n\n    85\t\tSPLIT FOYER\n\n    90\t\tDUPLEX - ALL STYLES AND AGES\n\n    120\t1-STORY PUD (Planned Unit Development) - 1946 & NEWER\n\n    150\t1-1\/2 STORY PUD - ALL AGES\n\n    160\t2-STORY PUD - 1946 & NEWER\n\n    180\tPUD - MULTILEVEL - INCL SPLIT LEV\/FOYER\n\n    190\t2 FAMILY CONVERSION - ALL STYLES AND AGES\n\n\n\nMSZoning: The general zoning classification ( One-Hot )\n\n\tA\tAgriculture\n\n    C\tCommercial\n\n    FV\tFloating Village Residential\n\n    I\tIndustrial\n\n    RH\tResidential High Density\n\n    RL\tResidential Low Density\n\n    RP\tResidential Low Density Park \n\n    RM\tResidential Medium Density\n\n\n\nLotFrontage: Linear feet of street connected to property(<0.5) ( fillna median)\nLotArea: Lot size in square feet(<0.5)\nStreet: Type of road access  (Label-Encode vs one-hot)\n\n\tPave\t1454 (Paved)\n\n\tGrvl\t6 (Gravel)\n\nAlley: Type of alley access\nLotShape: General shape of property (property: \uac74\ubb3c) - ( One-Hot )\n\n\tReg\tRegular\t\n\n    IR1\tSlightly irregular\n\n    IR2\tModerately Irregular\n\n    IR3\tIrregular\n\n\n\nLandContour: Flatness of the property - ( One-Hot )\n\n\tLvl\tNear Flat\/Level 1311\n\n    Bnk\tBanked - Quick and significant rise from street grade to building 63\n\n    HLS\tHillside - Significant slope from side to side 50\n\n    Low\tDepression 36\n\n\n\nUtilities: Type of utilities available (\uc804\uae30,\uc218\ub3c4 \ub4f1)\n\tAllPub\tAll public Utilities (E,G,W,& S)\t(1459)\n\n    NoSewr\tElectricity, Gas, and Water (Septic Tank)\n\n    NoSeWa\tElectricity and Gas Only (1)\n\n    ELO\tElectricity only\n\n\n\nLotConfig: Lot configuration -  ( One-Hot )\n\n\tInside\tInside lot (1052)\n\n    Corner\tCorner lot (263)\n\n    CulDSac\tCul-de-sac (94)\n\n    FR2\tFrontage on 2 sides of property (47)\n\n    FR3\tFrontage on 3 sides of property (4)\n\n\n\nLandSlope: Slope of property  - ( One-Hot )\n\n\tGtl\tGentle slope (1382)\n\n    Mod\tModerate Slope (65)\n\n    Sev\tSevere Slope (13)\n\n\n\nNeighborhood: Physical locations within Ames city limits - ( Label-Encode )\n\n    Blmngtn\tBloomington Heights\n\n    Blueste\tBluestem\n\n    BrDale\tBriardale\n\n    BrkSide\tBrookside\n\n    ClearCr\tClear Creek\n\n    CollgCr\tCollege Creek\n\n    Crawfor\tCrawford\n\n    Edwards\tEdwards\n\n    Gilbert\tGilbert\n\n    IDOTRR\tIowa DOT and Rail Road\n\n    MeadowV\tMeadow Village\n\n    Mitchel\tMitchell\n\n    Names\tNorth Ames\n\n    NoRidge\tNorthridge\n\n    NPkVill\tNorthpark Villa\n\n    NridgHt\tNorthridge Heights\n\n    NWAmes\tNorthwest Ames\n\n    OldTown\tOld Town\n\n    SWISU\tSouth & West of Iowa State University\n\n    Sawyer\tSawyer\n\n    SawyerW\tSawyer West\n\n    Somerst\tSomerset\n\n    StoneBr\tStone Brook\n\n    Timber\tTimberland\n\n    Veenker\tVeenker\n\n\n\nCondition1: Proximity to main road or railroad  - ( One-Hot )\n\n    Artery\tAdjacent to arterial street\n\n    Feedr\tAdjacent to feeder street\t\n\n    Norm\tNormal\t(1260)\n\n    RRNn\tWithin 200' of North-South Railroad\n\n    RRAn\tAdjacent to North-South Railroad\n\n    PosN\tNear positive off-site feature--park, greenbelt, etc.\n\n    PosA\tAdjacent to postive off-site feature\n\n    RRNe\tWithin 200' of East-West Railroad (2)\n\n\tRRAe\tAdjacent to East-West Railroad\n\n\n\n\n\nCondition2: Proximity to main road or railroad (if a second is present)\n    Artery\tAdjacent to arterial street\n\n    Feedr\tAdjacent to feeder street\t\n\n    Norm\tNormal\t(1445)\n\n    RRNn\tWithin 200' of North-South Railroad\n\n    RRAn\tAdjacent to North-South Railroad\n\n    PosN\tNear positive off-site feature--park, greenbelt, etc.\n\n    PosA\tAdjacent to postive off-site feature\n\n    RRNe\tWithin 200' of East-West Railroad\n\n    RRAe\tAdjacent to East-West Railroad\n\n\nExterior(\uc678\uad00) - Roof(\uc9c0\ubd95), Exterior(\uc678\uad00), Masonry(\uc11d\uacf5)\nBldgType: Type of dwelling   - ( One-Hot )\n\n    1Fam\tSingle-family Detached\t1220\n\n    2FmCon\tTwo-family Conversion; originally built as one-family dwelling 31\n\n    Duplx\tDuplex 52\n\n    TwnhsE\tTownhouse End Unit 114\n\n    TwnhsI\tTownhouse Inside Unit 43\n\n\n\n\nHouseStyle: Style of dwelling - ( One-Hot )\n\n    1Story\tOne story\n\n    1.5Fin\tOne and one-half story: 2nd level finished\n\n    1.5Unf\tOne and one-half story: 2nd level unfinished\n\n    2Story\tTwo story\n\n    2.5Fin\tTwo and one-half story: 2nd level finished\n\n    2.5Unf\tTwo and one-half story: 2nd level unfinished\n\n    SFoyer\tSplit Foyer\n\n    SLvl\tSplit Level\n\n\n\nOverallQual: Overall material and finish quality - \uadf8\ub300\ub85c\n\n    10\tVery Excellent 18\n\n    9\tExcellent 43\n\n    8\tVery Good 168\n\n    7\tGood 319\n\n    6\tAbove Average 374\n\n    5\tAverage 397\n\n    4\tBelow Average\n\n    3\tFair \n\n    2\tPoor 3\n\n    1\tVery Poor 2\n\nOverallCond: Overall condition rating (<0.5) - \uadf8\ub300\ub85c\n    10\tVery Excellent\n\n    9\tExcellent\n\n    8\tVery Good\n\n    7\tGood\n\n    6\tAbove Average\n\n    5\tAverage\n\n    4\tBelow Average\n\n    3\tFair\n\n    2\tPoor\n\n    1\tVery Poor\n\n\n\nYearBuilt: Original construction date  - \uadf8\ub300\ub85c\n\n\n\nYearRemodAdd: Remodel date  - \uadf8\ub300\ub85c\n\n\n\nRoofStyle: Type of roof  - ( One-Hot )\n\n    Flat\tFlat\n\n    Gable\tGable\n\n    Gambrel\tGabrel (Barn)\n\n    Hip\tHip\n\n    Mansard\tMansard\n\n    Shed\tShed\n\n\n\nRoofMatl: Roof material\n    ClyTile\tClay or Tile 1\n\n    CompShg\tStandard (Composite) Shingle 1434\n\n    Membran\tMembrane 1\n\n    Metal\tMetal 1\n\n    Roll\tRoll 1\n\n    Tar&Grv\tGravel & Tar 11\n\n    WdShake\tWood Shakes 5\n\n    WdShngl\tWood Shingles 6  ****\n\n\n\nExterior1st: Exterior covering on house - ( One-Hot )\n\nExterior2nd: Exterior covering on house (if more than one material)\n    BrkCmn\tBrick Common\n\n    BrkFace\tBrick Face\n\n    CBlock\tCinder Block\n\n    None\tNone\n\n    Stone\tStone\n\nMasVnrType: Masonry veneer type  - ( One-Hot )\n\n\nMasVnrArea: Masonry veneer area in square feet (<0.5)\n\n\nExterQual: Exterior material quality  - ( One-Hot )\n\nExterCond: Present condition of the material on the exterior   - ( One-Hot )\n\n\n\tEx\tExcellent\n\n    Gd\tGood\n\n    TA\tAverage\/Typical 1282\n\n    Fa\tFair\n\n    Po\tPoor 1\n\n\n\nFoundation: Type of foundation (\uc77c\ub2e8)\n\n\nBasement(\uc9c0\ud558\uc2e4)\nBsmtQual: Height of the basement (NA\ub3c4 \uc758\ubbf8\uc788\uc744\uac83)\nBsmtCond: General condition of the basement (Na: 37)\n\n\tEx\tExcellent\n\n    Gd\tGood\n\n    TA\tTypical - slight dampness allowed\n\n    Fa\tFair - dampness or some cracking or settling\n\n    Po\tPoor - Severe cracking, settling, or wetness\n\n    NA\tNo Basement\n\nBsmtExposure: Walkout or garden level basement walls (Na: 38)\nBsmtFinType1: Quality of basement finished area (Na: 37)\nBsmtFinSF1: Type 1 finished square feet (<0.5)\nBsmtFinType2: Quality of second finished area (if present) (Na: 38, 332\ud589)\nBsmtFinSF2: Type 2 finished square feet (<0.5)\nBsmtUnfSF: Unfinished square feet of basement area (<0.5)\nTotalBsmtSF: Total square feet of basement area\n\n\nEnvironment(\ud658\uacbd)  - ( One-Hot )\nHeating: Type of heating\n\nHeatingQC: Heating quality and condition\n\nCentralAir: Central air conditioning\n\nElectrical: Electrical system (Na\uac12 row \uc81c\uac70)\n\n    SBrkr\tStandard Circuit Breakers & Romex 1334\n\n    FuseA\tFuse Box over 60 AMP and all Romex wiring (Average)\t 94\n\n    FuseF\t60 AMP Fuse Box and mostly Romex wiring (Fair) 27\n\n    FuseP\t60 AMP Fuse Box and mostly knob & tube wiring (poor) 3\n\n    Mix\tMixed 1\n\n\nFeatures(\uad6c\uc131) - sqaure Feet(\uce35\ubcc4 \ub113\uc774), Bath(\uc695\uc2e4), # of room(\ubc29 \uc218)\n1stFlrSF: First Floor square feet\n\n2ndFlrSF: Second floor square feet (<0.5)\nLowQualFinSF: Low quality finished square feet (all floors) (<0.5)\nGrLivArea: Above grade (ground) living area square feet ~~\nBsmtFullBath: Basement full bathrooms (<0.5)\nBsmtHalfBath: Basement half bathrooms (<0.5)\nFullBath: Full bathrooms above grade\n\n\nHalfBath: Half baths above grade (<0.5)\nBedroom: Number of bedrooms above basement level (<0.5)\nKitchen: Number of kitchens (<0.5)\nKitchenQual: Kitchen quality\nTotRmsAbvGrd: Total rooms above grade (does not include bathrooms)\n\nFunctional: Home functionality rating\nFireplaces: Number of fireplaces (<0.5)\nFireplaceQu: Fireplace quality (Na: 690, Ont-Hot(with Fireplaces))\nGarage(\ucc28\uace0) (Na: No Garage. \uc758\ubbf8\uc788\uc74c)\nGarageType: Garage location (Na: 81)\nGarageYrBlt: Year garage was built (<0.5) (Na: 81)\nGarageFinish: Interior finish of the garage (Na: 81)\nGarageCars: Size of garage in car capacity\nGarageArea: Size of garage in square feet\nGarageQual: Garage quality (Na: 81) - ( One-Hot )\n\n\tEx\tExcellent\n\n    Gd\tGood\n\n    TA\tTypical\/Average 1326\n\n    Fa\tFair\n\n    Po\tPoor\n\n    NA\tNo Garage\n\nGarageCond: Garage condition (Na: 81) - ( One-Hot )\n\n\tEx\tExcellent\n\n    Gd\tGood\n\n    TA\tTypical\/Average\n\n    Fa\tFair\n\n    Po\tPoor\n\n    NA\tNo Garage\n\n\n\n\nGarden(\ub9c8\ub2f9) - Deck, Porch(\ud604\uad00), Pool(\uc218\uc601\uc7a5)\nPavedDrive: Paved driveway\nWoodDeckSF: Wood deck area in square feet (<0.5)\nOpenPorchSF: Open porch area in square feet (<0.5)\nEnclosedPorch: Enclosed porch area in square feet (<0.5)\n3SsnPorch: Three season porch area in square feet (<0.5)\nScreenPorch: Screen porch area in square feet (<0.5)\nPoolArea: Pool area in square feet (<0.5)\nPoolQC: Pool quality \nFence: Fence quality \nMiscFeature: Miscellaneous feature not covered in other categories \nMiscVal: $Value of miscellaneous feature (<0.5)\nMoSold: Month Sold (<0.5)\nYrSold: Year Sold (<0.5)\nSaleType: Type of sale\nSaleCondition: Condition of sale\n","ba199af6":"# minMaxScaler = MinMaxScaler()\nstandardScaler = StandardScaler()\nprint(standardScaler.fit(train_set))\ntrain_data_standardScaler = standardScaler.transform(train_set)","ce2a70c0":"from sklearn.ensemble import RandomForestRegressor\n\nforest_reg = RandomForestRegressor(n_estimators=100, random_state=42)\nforest_reg.fit(train_data, train_label)"}}