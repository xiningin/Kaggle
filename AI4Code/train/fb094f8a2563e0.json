{"cell_type":{"c4f2e00b":"code","be424f22":"code","e65b6680":"code","0cf6a77d":"code","f700d28a":"code","2bf8c1fb":"code","94dcaf26":"code","3db3e00c":"code","a924ccf5":"code","348767bb":"code","51d67c79":"code","00b160ae":"code","a9e50fc1":"code","f6335988":"code","689776ce":"code","72191438":"code","fb065b44":"code","8ef25f69":"markdown","cfad97eb":"markdown"},"source":{"c4f2e00b":"# Ignore  the warnings\nimport warnings\nwarnings.filterwarnings('always')\nwarnings.filterwarnings('ignore')\n\n# data visualisation and manipulation\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib import style\nimport seaborn as sns\nimport missingno as msno\n#configure\n# sets matplotlib to inline and displays graphs below the corressponding cell.\n%matplotlib inline  \nstyle.use('fivethirtyeight')\nsns.set(style='whitegrid',color_codes=True)\n\n#import the necessary modelling algos.\n\n#classifiaction.\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import LinearSVC,SVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier,GradientBoostingClassifier,AdaBoostClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.naive_bayes import GaussianNB\n \n\n#regression\nfrom sklearn.linear_model import LinearRegression,Ridge,Lasso,RidgeCV\nfrom sklearn.ensemble import RandomForestRegressor,BaggingRegressor,GradientBoostingRegressor,AdaBoostRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.neighbors import KNeighborsRegressor\n\n#model selection\nfrom sklearn.model_selection import train_test_split,cross_validate\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import GridSearchCV\n\n#preprocessing\nfrom sklearn.preprocessing import MinMaxScaler,StandardScaler,LabelEncoder\n\n#evaluation metrics\nfrom sklearn.metrics import mean_squared_log_error,mean_squared_error, r2_score,mean_absolute_error # for regression\nfrom sklearn.metrics import accuracy_score,precision_score,recall_score,f1_score  # for classification\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.model_selection import cross_val_score","be424f22":"df = pd.read_csv('..\/input\/drug-classification\/drug200.csv')\ndf.head()","e65b6680":"df.shape","0cf6a77d":"df.info()","f700d28a":"df.isnull().sum()","2bf8c1fb":"for i in ['Sex', 'BP', 'Cholesterol', 'Drug']:\n    print(df[i].unique())","94dcaf26":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()","3db3e00c":"df['Sex'] = le.fit_transform(df['Sex'])\ndf = pd.get_dummies(df, columns = ['BP'])\ndf['Cholesterol'] = le.fit_transform(df['Cholesterol'])\ndf['Drug'] = le.fit_transform(df['Drug'])","a924ccf5":"df.head()","348767bb":"# GD trap\ndf = df.drop('BP_HIGH', axis = 1)\ndf.head()","51d67c79":"X = df.drop('Drug', axis = 1)\ny = df.Drug","00b160ae":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 42)","a9e50fc1":"sc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.fit_transform(X_test)","f6335988":"models = [LogisticRegression(),LinearSVC(),SVC(kernel='rbf'),KNeighborsClassifier(),RandomForestClassifier(),\n        DecisionTreeClassifier(),GradientBoostingClassifier(),GaussianNB()]\nmodel_names=['LogisticRegression','LinearSVM','rbfSVM','KNearestNeighbors','RandomForestClassifier','DecisionTree',\n             'GradientBoostingClassifier','GaussianNB']\n\nacc=[]\nd={}\n\nfor model in range(len(models)):\n    clf=models[model]\n    clf.fit(X_train,y_train)\n    pred=clf.predict(X_test)\n    acc.append(accuracy_score(pred,y_test))\n     \nd={'Modelling Algo':model_names,'Accuracy':acc}\nd","689776ce":"acc_frame=pd.DataFrame(d)\nacc_frame","72191438":"sns.barplot(y='Modelling Algo',x='Accuracy',data=acc_frame)\n","fb065b44":"sns.factorplot(x='Modelling Algo',y='Accuracy',data=acc_frame,kind='point',size=4,aspect=3.5)\n","8ef25f69":"# Modeling","cfad97eb":"# Data Preprocessing"}}