{"cell_type":{"477bc000":"code","afa07d38":"code","bd1f683c":"code","ff3760f2":"code","fe6d8fb4":"code","93f6a8be":"code","d87c1e54":"code","f917697c":"code","fa9c6a37":"code","99de2576":"code","440d99af":"code","79e723db":"code","1a1c5124":"code","4015f8a0":"code","36743296":"code","a2555dc3":"code","7f79fde3":"code","523b86a7":"code","4031340a":"code","1c9afb07":"code","feb37d78":"code","758c3fb0":"code","4111deee":"code","8fc8b273":"code","fb7ab089":"markdown","38bd7b99":"markdown","596da4fb":"markdown","7a916e3b":"markdown","d2ccf545":"markdown","0623f8b1":"markdown","9acddbc0":"markdown","9b1314e9":"markdown"},"source":{"477bc000":"import keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten\nfrom keras.layers import Conv2D, MaxPooling2D\nfrom keras.utils import to_categorical\nfrom keras.preprocessing import image\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom tqdm import tqdm\nimport plotly.graph_objs as go\nfrom plotly.offline import init_notebook_mode, iplot\nfrom plotly import tools\n","afa07d38":"df_train = pd.read_csv('..\/input\/ranzcr-clip-catheter-line-classification\/train.csv') \n\nlabels  = (['ETT - Abnormal', 'ETT - Borderline',\n       'ETT - Normal', 'NGT - Abnormal', 'NGT - Borderline',\n       'NGT - Incompletely Imaged', 'NGT - Normal', 'CVC - Abnormal',\n       'CVC - Borderline', 'CVC - Normal', 'Swan Ganz Catheter Present'])\ndf_train.head()","bd1f683c":"df_train.shape","ff3760f2":"\n#sample.groupby(['StudyInstanceUID']).sum(1).value_counts(sort=True)\n\ndf_train[labels].sum(1).value_counts(sort=True)","fe6d8fb4":"df_train[labels].sum(1).value_counts(sort=True).plot.bar()\nplt.xlabel(\"Occurrence number\")\nplt.ylabel(\"Simultaneous label number\")\n\n","93f6a8be":"import seaborn as sns\ntarg_cts=df_train.iloc[:,1:-2].sum(axis=0)\nfig = plt.figure(figsize=(12,6))\nsns.barplot(y=targ_cts.sort_values(ascending=False).index, x=targ_cts.sort_values(ascending=False).values, palette='mako')\nplt.show()","d87c1e54":"df_train[labels].mean()","f917697c":"df_train[labels].mean().plot.bar()","fa9c6a37":"df_train['PatientID'].value_counts()","99de2576":"df_train[labels[:3]].value_counts().rename('Counts').reset_index()","440d99af":"df_train[labels[4:7]].value_counts().rename('Counts').reset_index()","79e723db":"df_train[labels[7:10]].value_counts().rename('Counts').reset_index()","1a1c5124":"from skimage import exposure\nfrom skimage.util import random_noise\ndef randRange(a, b):\n    return np.random.rand() * (b - a) + a\n\n\ndef AHE(img):\n    img_adapteq = exposure.equalize_adapthist(img, clip_limit=0.03)\n    #var = randRange(0.005, 0.01)\n    #img_adapteq=  random_noise(img_adapteq, var=var)\n    return img_adapteq\n#datagen = ImageDataGenerator(rotation_range=30, horizontal_flip=0.5, preprocessing_function=AHE)","4015f8a0":"train_df1 = pd.read_csv('..\/input\/extract\/train-Copy1.csv') \ndef append_ext(fn):\n    return fn+\".jpg\"\n\n\ntrain_df1[\"StudyInstanceUID\"]=train_df1[\"StudyInstanceUID\"].apply(append_ext)\ntrain_image = []\nfor i in tqdm(range(train_df1.shape[0]-1500)):\n    img = image.load_img(\"..\/input\/ranzcr-clip-catheter-line-classification\/train\/\"+train_df1['StudyInstanceUID'][i],target_size=(640,640,3))\n    img = image.img_to_array(img)\n    img = img\/255\n    train_image.append(img)\n         \nX = np.array(train_image)\n\ndf_lab =train_df1[['ETT - Abnormal', 'ETT - Borderline',\n       'ETT - Normal', 'NGT - Abnormal', 'NGT - Borderline',\n       'NGT - Incompletely Imaged', 'NGT - Normal', 'CVC - Abnormal',\n       'CVC - Borderline', 'CVC - Normal', 'Swan Ganz Catheter Present']]\nlabels = np.array(df_lab)\n#print (labels)\n\nX_train, X_test= train_test_split(X, test_size=0.2, random_state=42)\ny_train, y_test= train_test_split(labels, test_size=0.2, random_state=42)\nX_train = X_train.astype('float32')\nX_test = X_test.astype('float32')\n# print (labels_numeric)\n\nprint (X_train.shape)\n\nprint (y_train.shape)\n\nprint (X_test.shape)\n\nprint (y_test.shape)","36743296":"#\"\"\"\n#for i in range(40,90):\nplt.figure(figsize=(30,12))\nplt.subplot(141)\nplt.imshow((X_train[40]))\nplt.xticks([])\nplt.yticks([])\nplt.title('original image 1')\nplt.subplot(142)\nplt.imshow(AHE(X_train[40]))\nplt.xticks([])\nplt.yticks([])\nplt.title('image 1 with histogram equalization')\nplt.subplot(143)\nplt.imshow((X_train[120]))\nplt.xticks([])\nplt.yticks([])\nplt.title('original image 2')\nplt.subplot(144)\nplt.imshow(AHE(X_train[120]))\nplt.xticks([])\nplt.yticks([])\nplt.title('image 2 with histogram equalization')\nplt.show()\n#\"\"\"","a2555dc3":"import matplotlib.pyplot as plt\nimport numpy as np\nimport os\nimport tensorflow as tf\nimport tensorflow.keras.layers as tfl\nfrom tensorflow.keras import losses\nfrom tensorflow.keras.layers import Flatten ,Dense, Dropout\nfrom tensorflow.keras.preprocessing import image_dataset_from_directory\nfrom tensorflow.keras.layers.experimental.preprocessing import RandomFlip, RandomRotation,RandomCrop,RandomContrast,Normalization","7f79fde3":"#load data\nimport pandas as pd\ntrain_df = pd.read_csv('..\/input\/ranzcr-clip-catheter-line-classification\/train.csv')\n#sample_df.shape\ndef append_ext(fn):\n    return fn+\".jpg\"\n\ntrain_df[\"StudyInstanceUID\"]=train_df[\"StudyInstanceUID\"].apply(append_ext)\n\ntrain_df.shape","523b86a7":"BATCH_SIZE = 64\nIMG_SIZE = (150, 150)\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nlabel=['ETT - Abnormal', 'ETT - Borderline',\n       'ETT - Normal', 'NGT - Abnormal', 'NGT - Borderline',\n       'NGT - Incompletely Imaged', 'NGT - Normal', 'CVC - Abnormal',\n       'CVC - Borderline', 'CVC - Normal', 'Swan Ganz Catheter Present']\n\ndatagen=ImageDataGenerator(validation_split=0.20,\n                          #rotation_range=rotation_range,\n                          #horizontal_flip= True,\n                          rescale=1.\/255.)\n                          \n\ntrain_dataset=datagen.flow_from_dataframe(\n    dataframe=train_df,\n    directory=\"..\/input\/ranzcr-clip-catheter-line-classification\/train\/\",\n    x_col=\"StudyInstanceUID\",\n    y_col=label,\n    subset=\"training\",\n    batch_size=BATCH_SIZE,\n    color_mode='rgb',\n    labels_mode ='binary',\n    class_mode='raw',\n    target_size=IMG_SIZE,\n    shuffle=1024,\n    seed=42,\n    interpolation=\"bilinear\")\n\nvalidation_dataset=datagen.flow_from_dataframe(\ndataframe=train_df,\ndirectory=\"..\/input\/ranzcr-clip-catheter-line-classification\/train\",\nx_col=\"StudyInstanceUID\",\ny_col=label,\nsubset=\"validation\",\nbatch_size=BATCH_SIZE,\ncolor_mode='rgb',\nlabels_mode ='binary',\nclass_mode='raw',\ntarget_size=IMG_SIZE,\n#shuffle=1024,\nshuffle=False,\nseed=42,\ninterpolation=\"bilinear\")\n","4031340a":"# UNQ_C1\nfrom tensorflow.keras.layers.experimental.preprocessing import RandomFlip, RandomRotation,RandomCrop,RandomContrast,Normalization\n# GRADED FUNCTION: data_augmenter\ndef data_augmenter():\n    '''\n    Create a Sequential model composed of 2 layers\n    Returns:\n        tf.keras.Sequential\n    '''\n    \n    ### START CODE HERE\n    data_augmentation = tf.keras.Sequential()\n    data_augmentation.add(RandomFlip('horizontal'))\n    data_augmentation.add(RandomFlip('vertical'))\n    data_augmentation.add(RandomRotation(0.10))\n    #data_augmentation.add(RandomCrop(300,300))\n    data_augmentation.add(RandomContrast(0.2))\n    #data_augmentation.add(Normalization())\n    ### END CODE HERE\n    \n    return data_augmentation","1c9afb07":"data_augmentation = data_augmenter()","feb37d78":"\nimage_shape = (150,150)\ninput_shape = image_shape + (3,)\nim_size =150\nfrom tensorflow.keras import Model, initializers, regularizers\n\nfrom tensorflow.keras.applications.efficientnet import EfficientNetB0\n\n\nmodelB7 = tf.keras.Sequential([EfficientNetB0(input_shape=(im_size, im_size, 3),\n                                                weights='imagenet',\n                                                include_top=False,\n                                                drop_connect_rate=0.7),\n                             tf.keras.layers.GlobalAveragePooling2D()])\n    \n\n    \n    \ninputs = tf.keras.Input(shape=input_shape) \n\nx = data_augmenter()(inputs)    \nx = modelB7(x) \n#x =  Flatten()(x)\nx = Dropout(0.5)(x)\n#x = tfl.GlobalAveragePooling2D()(x)\noutputs = tfl.Dense(11,activation='sigmoid')(x)\n    \n\nmodel = tf.keras.Model(inputs, outputs)    \nmodel.compile(\n    optimizer=tf.keras.optimizers.Adam(learning_rate=1e-4),\n    loss='binary_crossentropy',\n    metrics=[tf.keras.metrics.AUC(multi_label=True)])\nmodel.summary()","758c3fb0":"steps_per_epoch = 24067 \/\/ BATCH_SIZE\ncheckpoint = tf.keras.callbacks.ModelCheckpoint(\n    'model.h5', save_best_only=True, monitor='val_auc', mode='max')\nlr_reducer = tf.keras.callbacks.ReduceLROnPlateau(\n    monitor='val_auc', patience=3, min_lr=1e-6, mode='max')","4111deee":"def auto_select_accelerator():\n    try:\n        tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n        tf.config.experimental_connect_to_cluster(tpu)\n        tf.tpu.experimental.initialize_tpu_system(tpu)\n        strategy = tf.distribute.experimental.TPUStrategy(tpu)\n        print(\"Running on TPU:\", tpu.master())\n    except ValueError:\n        strategy = tf.distribute.get_strategy()\n    print(f\"Running on {strategy.num_replicas_in_sync} replicas\")\n    \n    return strategy","8fc8b273":"strategy = auto_select_accelerator()\nwith strategy.scope():\n    history = model.fit(\n        train_dataset, \n        epochs=20,\n        verbose=True,\n        workers=17,\n        callbacks=[checkpoint, lr_reducer],\n        steps_per_epoch=steps_per_epoch,\n        validation_data=validation_dataset)","fb7ab089":"# DataSet Imbalance :","38bd7b99":"# # # Data set Analysis","596da4fb":"# Height number of annotations for the same patient :","7a916e3b":"# ETT Tubes :","d2ccf545":"# NG Tubes :","0623f8b1":"# CVC Tubes :","9acddbc0":"# Tubes coexistence in the same image :","9b1314e9":"# Preprocesing :"}}