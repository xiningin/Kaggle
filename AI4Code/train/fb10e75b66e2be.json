{"cell_type":{"0a276ee9":"code","17f5f246":"code","0ec18051":"code","151b74de":"code","9e7331a2":"code","7e0b06a8":"code","c6309247":"code","51db62ea":"code","2792c39c":"code","0c7c2d03":"code","ab917c33":"code","d73cd90e":"code","f646b104":"code","2d9d3f9d":"code","aa976307":"code","d7479c45":"code","c81cdf8b":"code","2fb63847":"code","0923bb8b":"code","507fd0ec":"code","74f1ddfe":"code","0cfe16dc":"code","351f38f3":"code","9416418e":"code","b122fa0a":"code","bdfc7c4a":"code","0e9ee3c8":"code","3cd7d392":"code","18cad8ab":"code","61137732":"code","f9989d6a":"code","b4f1e556":"code","d0a17f7a":"code","f626ce45":"code","ea31a0a2":"code","b5bcbb7f":"code","4a318897":"code","8ec8011d":"code","9196f29b":"code","32b3de04":"code","c4debc4f":"code","939d4053":"code","8a8a54c7":"code","3420b730":"code","d2f4fa07":"code","dbf421a4":"markdown","3f6a8951":"markdown","308c7c87":"markdown","064927dc":"markdown","8f5b9e82":"markdown","0e05bd3c":"markdown","6b5bf334":"markdown"},"source":{"0a276ee9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nimport cv2\nfrom PIL import Image\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","17f5f246":"import matplotlib.pyplot as plt\nimport pydicom\nimport pydicom.data  # we need pydicom to read all the dicom files some thing new for beginners","0ec18051":"base='..\/input\/siim-covid19-detection\/train\/'\n#..\/input\/siim-covid19-detection\/train\/00086460a852\/9e8302230c91\/65761e66de9f.dcm","151b74de":"file='65761e66de9f.dcm'\n#filename = pydicom.data.data_manager.get_files(base,  '00')[0]\n#print(file_name)  \nds = pydicom.dcmread('..\/input\/siim-covid19-detection\/train\/00086460a852\/9e8302230c91\/65761e66de9f.dcm')\n  \nplt.imshow(ds.pixel_array, cmap=plt.cm.bone)  # set the color map to bone\nplt.show()","9e7331a2":"import fastai\nimport fastai.medical\nfrom fastai.basics import *\nfrom fastai.vision.all import *\nfrom fastai.medical.imaging import *\n\nimport pydicom\n\nimport pandas as pd","7e0b06a8":"import glob\n# Lets check the meta data for pydicom\n#items=get_dicom_files(base)\n#print(items)\n#df_trn = pd.DataFrame.from_dicoms(items,px_summ=False)\n'''\ncol_list=[ 'StudyID','PatientID','ImageType', 'StudyInstanceUID', 'SeriesInstanceUID',\n        'SOPClassUID', 'SOPInstanceUID', 'PhotometricInterpretation', 'Rows', 'Columns', 'BitsAllocated',\n       'BitsStored', 'HighBit', 'PixelRepresentation', 'fname','BodyPartExamined',]\n\ndf_trn[[ 'StudyID','PatientID','ImageType', 'StudyInstanceUID', 'SeriesInstanceUID',\n        'SOPClassUID', 'SOPInstanceUID', 'PhotometricInterpretation', 'Rows', 'Columns', 'BitsAllocated',\n       'BitsStored', 'HighBit', 'PixelRepresentation', 'fname','BodyPartExamined',]]\n'''","c6309247":"#df_trn.to_csv('df_trn_dicom.csv',index=False)","51db62ea":"#df_trn.values[10]","2792c39c":"#df_trn.StudyID.nunique()","0c7c2d03":"#Mapping directory structure to Ids in Dicom\n#df_trn[df_trn.SeriesInstanceUID=='9e8302230c91'][col_list] #series instance uid is sub dir,studyinstanceuid is upper directory,SOPinstanceUID is image id","ab917c33":"#items[0]","d73cd90e":"import pandas as pd\ntrain_image=pd.read_csv('..\/input\/siim-covid19-detection\/train_image_level.csv')\ntrain_image[train_image.StudyInstanceUID=='00292f8c37bd'].label.values #Non Pneumonia label look like this","f646b104":"!cp ..\/input\/basic-exploration-eda-duplicate-nonduplicate\/df_trn_dicom.csv \/kaggle\/working\/","2d9d3f9d":"# All values are 0 if its  Not a penuomonia\ntrain_study=pd.read_csv('..\/input\/siim-covid19-detection\/train_study_level.csv')\ntrain_study['StudyInstanceUID']=train_study.id.apply(lambda x: x.split('_')[0])\n\n\ntrain_study[train_study[\"Negative for Pneumonia\"]==1].sum(0)","aa976307":"''' \nOpacityCount = train_image['label'].str.count('opacity')\n#np.where(OpacityCount==0)[0].shape\n#train_image[train_image.boxes.isnull()]#.StudyInstanceUID.nunique()\n#set(train_image[train_image.boxes.isnull()].StudyInstanceUID.unique())-set(count_df_train_img[count_df_train_img.boxescnt==0].StudyInstanceUID.values)\ntrain_image['opacity_count']=OpacityCount\nnp.where(OpacityCount==0)[0].shape,train_image[train_image.boxes.isnull()].StudyInstanceUID.unique().shape\n train_image[(train_image['opacity_count']==0) ].StudyInstanceUID.nunique() \ntrain_image['anamoly_flag']=train_image.apply(lambda x:1 if  (x['opacity_count']==0 and  x['Negative for Pneumonia']  !=0)  or (x['opacity_count']==0 and  x['Negative for Pneumonia']  !=1) \n                                              else 0,axis=1 ) \n'''","d7479c45":"#Computing  the presence of BBx there or not  and areas of various bboxes\nimport ast,numpy as np\ntrain_image.boxes.fillna('',inplace=True)\n\ntrain_image['bbx_cnt']=train_image.boxes.apply(lambda x: len(ast.literal_eval(x) ) if  x !=''  else 0)\ntrain_image['area']=train_image.boxes.apply(lambda x : float(np.sum([ a['width']*a['height'] for a in \n                                                               ast.literal_eval(x)])) if  x !='' else 0)","c81cdf8b":"plt.hist(train_image['area'])  #total area for all the bounding boxes for Xray","2fb63847":"#Getting anamoly ids the ones which are Covid positive but no BBX but other way round is 0 so we are good\nanamoly_ids=pd.merge(train_image[train_image.bbx_cnt==0],train_study[train_study[\"Negative for Pneumonia\"]==0],on='StudyInstanceUID').id_x.values.tolist()\nprint('Total No of Anamoly ids ',len(anamoly_ids))\ntrain_image[~train_image.id.isin(anamoly_ids)].shape\n#train_image.shape","0923bb8b":"#train_image=pd.merge(train_image, train_study, on='StudyInstanceUID')\n#train_image.index.size","507fd0ec":"#train_image['anamoly_flag']=train_image.apply(lambda x:1 if  (x['opacity_count']==0 and  train_study[train_study.StudyInstanceUID==x['StudyInstanceUID'] ]['Negative for Pneumonia'].values[0] !=0) else 0,axis=1 ) ","74f1ddfe":"# All values are 0 if its  Not a penuomonia\ntrain_study=pd.read_csv('..\/input\/siim-covid19-detection\/train_study_level.csv')\ntrain_study[train_study[\"Negative for Pneumonia\"]==1].sum(0)","0cfe16dc":"#So all patterns that are typical have No Indeterminate and Atypical patterns\ntrain_study[(train_study[\"Negative for Pneumonia\"]==0) & \n            ((train_study[\"Typical Appearance\"]==1))].sum(0)","351f38f3":"#Same goes for Indeterminate\ntrain_study[(train_study[\"Negative for Pneumonia\"]==0) & \n            ((train_study[\"Indeterminate Appearance\"]==1))].sum(0)","9416418e":"#Same goes for Atypical\ntrain_study[(train_study[\"Negative for Pneumonia\"]==0) & \n            ((train_study[\"Atypical Appearance\"]==1))].sum(0)","b122fa0a":"train_image.StudyInstanceUID.count() ,train_study.id.count() \n#more rows than train study","bdfc7c4a":"train_study.head()","0e9ee3c8":"count_df_train_img","3cd7d392":"#checking if a given StudyUID can have more than one DCMs\ncount_df_train_img=train_image.iloc[:,:-2].groupby('StudyInstanceUID').count().reset_index()\ncount_df_train_img.columns=['StudyInstanceUID','idcnt','boxescnt','labelcnt' ]\ncount_df_train_img","18cad8ab":"#Lets check one  \ntrain_image[train_image.StudyInstanceUID=='ffcb4630f46f']","61137732":"!ls -l ..\/input\/siim-covid19-detection\/train\/ffcb4630f46f\/","f9989d6a":"!ls -l ..\/input\/siim-covid19-detection\/train\/ffcb4630f46f\/4a4a9ae34a66","b4f1e556":" count_df_train_img.shape  ","d0a17f7a":"count_df_train_img[count_df_train_img.idcnt>1  ].head()","f626ce45":"#Looking at ones having boxes greater than 1 real duplicates with no other labels \n\ntrain_image[train_image.StudyInstanceUID=='7416b5cbc531']","ea31a0a2":"\n\ncount_df_train_img[(count_df_train_img.idcnt==1) ] ","b5bcbb7f":"count_df_train_unique= count_df_train_img[(count_df_train_img.idcnt==1) ] ","4a318897":"train_image.head()","8ec8011d":"#merge with train img id having \ntrain_image_unique=pd.merge(count_df_train_unique,train_image,on='StudyInstanceUID')\ntrain_image_unique.head()","9196f29b":"train_image_unique[train_image_unique.boxes.isnull() ].shape # all Nan have no boxes numbering 1705","32b3de04":"#validating with train study\ntrain_study['StudyInstanceUID']=train_study.id.apply(lambda x: x.split('_')[0])\n\n ","c4debc4f":"train_study_unique=pd.merge(count_df_train_unique,train_study,on='StudyInstanceUID')\ntrain_study_unique.head()","939d4053":"train_study_unique[train_study_unique.boxescnt==0 ][\"Negative for Pneumonia\"].value_counts()\n# oh so there are  82 odd instances where are there no bbox provided even though patients have pneumonia","8a8a54c7":"#Further classifying them\ntrain_study_unique[train_study_unique.boxescnt==0 ].sum(0)\n#mostly are atypical  \n#open question from domain expert why should that be","3420b730":"train_study.sum(0)","d2f4fa07":"#lets check regular Atypical cases \n\ntrain_study_unique[train_study_unique.boxescnt!=0 ].sum(0)\n#ok that is fine 386 out of 474 have no irregularity","dbf421a4":"One sop instance UID that is upper most dir will have multiple Series Instance UID which could possibly mean multiple x ray reports one may have infection other instance may not have an infection..negative report","3f6a8951":"Looks like Atypical patterns goes by its meaning interms of its occurances  in Images , and Typical also same . However some thing to notics is that there are around 1k appearance those are categorized as  Indeterminate. ","308c7c87":"Loooking ids greater than 2 count","064927dc":"Conclusion is This Problem Is multiclass objection Detection  Not Multilabel Multiclass ","8f5b9e82":"That is it very  Simple EDA . Could help in building a good CV .Please post your opinions or any questions\n","0e05bd3c":"*Every Covid 19 is considered Pneuomonia  but every pneumonia is not a Covid\nSo if Pneumonia is 0  it means there cannot be covid . If Pneuomonia  is 1 it means there can be various kinds of Covid 19 Pneumonia patterns such as Typical \/Atypical or Indertiminate *\n[https:\/\/www.ncbi.nlm.nih.gov\/pmc\/articles\/PMC7297525\/] )","6b5bf334":"Version 3- Added Anamoly ids  and Area computation for Bounding boxes"}}