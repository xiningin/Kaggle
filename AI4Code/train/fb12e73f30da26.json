{"cell_type":{"d6d39f92":"code","b0b8d1c2":"code","274b49ba":"code","009bdfdc":"code","0f8d5a96":"code","76ca0148":"code","0d502f10":"code","3e7a986e":"code","6e705a0a":"code","3feba0e8":"code","d72c28e7":"code","0e143153":"code","07333bf7":"code","2ffe9dcb":"code","19fc8751":"code","99f663ff":"code","f8cdd3bd":"code","01b80bd8":"code","8a25a03d":"code","0dce0150":"code","8d1f076f":"code","f6e04ef4":"code","e97c4cd2":"code","0e4b7717":"code","913e0058":"code","134f88c0":"code","5a3b400b":"code","b8eeffed":"code","4d37f2e9":"code","c21f3aee":"code","f40dd385":"code","782db534":"code","77850908":"code","e994c283":"code","8b2f2805":"code","a6e078fd":"code","5165a522":"code","e493fde4":"code","5913ec6f":"code","2c801f41":"code","8d923566":"code","82da56a0":"code","63850f6a":"code","01c4fc89":"code","aa47e023":"code","f0dbab2a":"code","58815f04":"code","218634a9":"code","9767fc0f":"code","9f23aadd":"code","1215eaa4":"code","c3014287":"code","c68769b4":"code","818df523":"code","eb94aae0":"code","d5aba1a4":"code","051b10be":"code","86a7af04":"code","0172930a":"code","e94ff6eb":"code","fa50972a":"code","6815f6d4":"code","6f8b12fd":"code","2d06566b":"code","fe41cfe7":"code","fb0a0829":"code","2f503053":"code","709a6769":"code","427a17b6":"code","4e0708a0":"code","daf3c890":"code","223fbad0":"code","30517f3e":"code","706829bf":"code","de680316":"code","470d7383":"code","ddf7a3e2":"code","1f34c3d9":"code","5646535d":"code","8e3b8a2f":"code","918fe10d":"code","efe45298":"code","cb7b5a65":"markdown","fff5585f":"markdown","9797eac1":"markdown","b24b4979":"markdown","50a99c63":"markdown","8c4bf99d":"markdown","9c28d0ec":"markdown","370944c6":"markdown","4f364c5b":"markdown","92ab3105":"markdown","cba1f479":"markdown","c12806a3":"markdown","7fd2873e":"markdown","59a5695c":"markdown","7ff03dbe":"markdown","5efab2d8":"markdown","3da76591":"markdown","48006d67":"markdown","d215b348":"markdown","bf6ccb4b":"markdown","f8df2d54":"markdown","fe6efa5d":"markdown","549a4c98":"markdown","5d696f1b":"markdown","bf0d4d9e":"markdown","4747954a":"markdown","ce233aad":"markdown","93fc06a6":"markdown","452bb88a":"markdown","3c7f3620":"markdown","68c8010f":"markdown","3fdffa13":"markdown","9e6c7d0d":"markdown","d0214a3d":"markdown","f19dfea4":"markdown","bfc69ff0":"markdown"},"source":{"d6d39f92":"# Import libraries\nimport pandas as pd \nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom plotly import express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nfrom sklearn.preprocessing import LabelEncoder, MinMaxScaler\nfrom sklearn.feature_selection import RFE # Recursive Feature Elimination\nfrom sklearn.model_selection import train_test_split, RandomizedSearchCV, cross_val_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier, ExtraTreesClassifier, AdaBoostClassifier, VotingClassifier\nfrom xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier\nfrom sklearn.metrics import accuracy_score, roc_auc_score, confusion_matrix\nimport warnings\nimport time\nimport datetime\nimport pickle","b0b8d1c2":"# Ignore the warnings\nwarnings.filterwarnings(\"ignore\")","274b49ba":"# Read the csv file\ndata_path = \"..\/input\/hotel-booking-demand\/hotel_bookings.csv\"\nhotel_booking_data = pd.read_csv(data_path)","009bdfdc":"# Create a function to display information about the data\npd.set_option('display.max_columns', 50)\ndef display_data_info(data):\n\n  # 1. Print the number of rows and the columns in the data\n  print(\"#################################################### SHAPE OF DATA ##############################################################################\")\n  rows = data.shape[0]\n  columns = data.shape[1]\n  print()\n  print(\"Number of rows in the data are {:,}\".format(rows))\n  print(\"Number of columns in the data are {:,}\".format(columns))\n  print()\n\n  # 2. Print the number of null values in the data and the percentage of null values\n  print(\"#################################################### FEATURES WITH NULL VALUES ##############################################################################\")\n  print()\n  for col in data.columns:\n    # Calculate the number of null values\n    null_values = data[col].isnull().sum()\n\n    # If the null values > 0 print the column, number of null values and the percentage of null values\n    if null_values > 0:\n      perc_null_vals = float(null_values)*100\/rows\n      print(\"FEATURE: {}\".format(col))\n      print(\"NULL VALUES COUNT: {}\".format(null_values))\n      print(\"PERCENTAGE VALUES COUNT: {:.3f}%\".format(perc_null_vals))\n      print()\n  \n  # 3. Describe the data\n  print(\"#################################################### DESCRIPTIVE STATISTICS ##############################################################################\")\n  print()\n  print(data.describe())\n  print()\n\n  # 4. Print the data info\n  print(\"#################################################### DATA INFROMATION ##############################################################################\")\n  print()\n  print(data.info())","0f8d5a96":"# Call the above function\ndisplay_data_info(hotel_booking_data)","76ca0148":"# Create new categories for both the agent and the company column\nhotel_booking_data['agent'] = hotel_booking_data['agent'].fillna('Not Applicable')\nhotel_booking_data['company'] = hotel_booking_data['company'].fillna('Not Applicable')","0d502f10":"# null values in children column could mean 0 children and null values in the country column can be seen as unknown countries\nhotel_booking_data['children'] = hotel_booking_data['children'].fillna(0)\nhotel_booking_data['country'] = hotel_booking_data['country'].fillna('Unknown')","3e7a986e":"# Check null values again\nhotel_booking_data.isnull().sum()","6e705a0a":"hotel_booking_data.head()","3feba0e8":"hotel_booking_data['hotel'].value_counts()","d72c28e7":"# Plot the countplot for both the hotel types\nsns.set(style = \"darkgrid\")\nplt.figure(figsize=(5,4))\nplt.title('Hotel Type', fontdict = {'fontsize': 15})\nsns.countplot(data=hotel_booking_data, x = 'hotel')\nplt.show()","0e143153":"hotel_booking_data.head()","07333bf7":"# Plotting a pie-chart to visualise the number of records by country\n\n'''\nThis analysis involves 3 parts:\n1. Visualising the number of bookings by country.\n2. Visualising the number of confirmed(non-cancelled) bookings by country.\n3. Visualising the number of cancelled bookings by country.\n'''\n\n\n# Extract the total country data\ntotal_country_data =  hotel_booking_data['country'].value_counts().to_frame().reset_index()\ntotal_country_data.rename(columns = {'index' : 'country', 'country' : 'guest_count'}, inplace=True)\n\n# Extract the total country data with confirmed bookings\ntotal_country_data_confirmed =  hotel_booking_data[hotel_booking_data['is_canceled'] == 0]['country'].value_counts().to_frame().reset_index()\ntotal_country_data_confirmed.rename(columns = {'index' : 'country', 'country' : 'guest_count_confirmed'}, inplace=True)\n\n# Extract the total country data with canceled bookings\ntotal_country_data_canceled =  hotel_booking_data[hotel_booking_data['is_canceled'] == 1]['country'].value_counts().to_frame().reset_index()\ntotal_country_data_canceled.rename(columns = {'index' : 'country', 'country' : 'guest_count_canceled'}, inplace=True)\n\n\n#################################################################### PLOT THE PIE CHARTS ##########################################################################################\n\nfig = make_subplots(rows=1, cols=3, specs=[[{\"type\": \"pie\"}, {\"type\": \"pie\"}, {\"type\": \"pie\"}]])\n\n# 1 Visualising the number of bookings by country\nfig.add_trace(go.Pie(labels = total_country_data['country'].values.tolist(), \n                     values=total_country_data['guest_count'].values.tolist(), \n                     title = 'Total Bookings Across Countries'), 1, 1)\n\n# 2. Visualising the number of confirmed(non-cancelled) bookings by country\nfig.add_trace(go.Pie(labels = total_country_data_confirmed['country'].values.tolist(), \n                     values=total_country_data_confirmed['guest_count_confirmed'].values.tolist(), \n                     title = 'Total Confirmed Bookings Across Countries'), 1, 2)\n\n# 3. Visualising the number of cancelled bookings by country\nfig.add_trace(go.Pie(labels = total_country_data_canceled['country'].values.tolist(), \n                    values=total_country_data_canceled['guest_count_canceled'].values.tolist(), \n                    title = 'Total Canceled Bookings Across Countries'), 1, 3)\n# Update the traces\nfig.update_traces(textposition=\"inside\", textinfo=\"label+percent+value\",textfont_size=12,\n                  marker=dict(line=dict(color='black', width=0.5)))\n","2ffe9dcb":"# Display the total bookings (including confirmed and canceled) across countries on the World Map\n\n# Calculate the percentage of bookings across countries\ntotal_country_data['%_guest_across_countries'] = np.round(total_country_data['guest_count']*100\/total_country_data['guest_count'].sum(), 2)\n\n# Plot the map\nbookings_map = px.choropleth(total_country_data,\n                             locations=total_country_data['country'],\n                             color=total_country_data[\"%_guest_across_countries\"], \n                             hover_name=total_country_data[\"country\"], \n                             color_continuous_scale=px.colors.sequential.Plasma,\n                             title=\"Total Bookings Across Countries\")\nbookings_map.show()","19fc8751":"hotel_booking_data.head()","99f663ff":"hotel_booking_data['arrival_date_month'].value_counts()","f8cdd3bd":"# Create a feature called arrival data\n\n#--> Map the name of the months with their corresponding numbers\ndef map_months(x):\n\n  if x == 'January':\n    x = 1\n  elif x == 'February':\n    x = 2\n  elif x == 'March':\n    x = 3\n  elif x == 'April':\n    x = 4\n  elif x == 'May':\n    x = 5\n  elif x == 'June':\n    x = 6\n  elif x == 'July':\n    x = 7\n  elif x == 'August':\n    x = 8\n  elif x == 'September':\n    x = 9\n  elif x == 'October':\n    x = 10\n  elif x == 'November':\n    x = 11\n  elif x == 'December':\n    x = 12\n  return x\n\n# Use the above mapping to create a new feature\nhotel_booking_data['arrival_date_month_number'] = hotel_booking_data['arrival_date_month'].apply(lambda x : map_months(x))\nhotel_booking_data['arrival_date'] = hotel_booking_data['arrival_date_day_of_month'].astype('str') + '\/' + hotel_booking_data['arrival_date_month_number'].astype('str') + '\/'+ hotel_booking_data['arrival_date_year'].astype('str')","01b80bd8":"# Convert into datetime variable\nhotel_booking_data['arrival_date'] = pd.to_datetime(hotel_booking_data['arrival_date'])","8a25a03d":"# Extract the total number of bookings for both the hotel types\nbookings_by_date = hotel_booking_data['arrival_date'].value_counts().to_frame()\nbookings_per_year = bookings_by_date.resample('y').sum().reset_index().rename(columns = {'index' : 'year', 'arrival_date': 'total_bookings'})\n\n# Plot a line chart to visualise the total annual bookings\nsns.lineplot(data = bookings_per_year, x = 'year', y = 'total_bookings')\nplt.xticks(rotation = -45)\nplt.title('Total Annual Bookings', fontdict = {'fontsize' : 15})\nplt.show()","0dce0150":"# Extract the resort and city hotel data\nhotel_resort_data = hotel_booking_data[hotel_booking_data['hotel'] == 'Resort Hotel']\nhotel_city_data = hotel_booking_data[hotel_booking_data['hotel'] == 'City Hotel']\n\n# Extract the total annual bookings from both the frames\n\n# 1. Resort Hotel\ntotal_annual_bookings_resort = hotel_resort_data['arrival_date'].value_counts().to_frame().reset_index()\ntotal_annual_bookings_resort.rename(columns = {'index' : 'year', 'arrival_date': 'total_bookings'}, inplace=True)\n\n# 2. City Hotel\ntotal_annual_bookings_city = hotel_city_data['arrival_date'].value_counts().to_frame().reset_index()\ntotal_annual_bookings_city.rename(columns = {'index' : 'year', 'arrival_date': 'total_bookings'}, inplace=True)\n\n\n# Plot the line chart\nsns.set(style='darkgrid')\nfig, (ax1, ax2) = plt.subplots(1, 2, sharey=True, figsize=(12,4))\nsns.lineplot(data = total_annual_bookings_resort, x = 'year', y = 'total_bookings', label='Resort Hotel', ax=ax1)\nsns.lineplot(data = total_annual_bookings_city, x = 'year', y = 'total_bookings', label='City Hotel', ax=ax2)\nax1.tick_params(labelrotation=45, axis='x')\nax2.tick_params(labelrotation=45, axis='x')\nplt.suptitle('Total Annual Bookings')\nfig.show()\n","8d1f076f":"# Extract the monthly bookings for both the hotesl\n\n# 1. Resort Hotel\ntotal_monthly_bookings_resort = hotel_resort_data['arrival_date'].value_counts()\ntotal_monthly_bookings_resort = total_monthly_bookings_resort.resample('m').sum().to_frame().reset_index()\ntotal_monthly_bookings_resort.rename(columns = {'index' : 'months', 'arrival_date':'total_bookings'}, inplace=True)\n\n# 2. City Hotel\ntotal_monthly_bookings_city = hotel_city_data['arrival_date'].value_counts()\ntotal_monthly_bookings_city = total_monthly_bookings_city.resample('m').sum().to_frame().reset_index()\ntotal_monthly_bookings_city.rename(columns = {'index' : 'months', 'arrival_date':'total_bookings'}, inplace=True)\n\n# Plot the line charts\nfig = go.Figure()\n\nfig.add_trace(go.Scatter(x=total_monthly_bookings_resort['months'], y=total_monthly_bookings_resort['total_bookings'], name=\"Resort Hotel\"))\nfig.add_trace(go.Scatter(x=total_monthly_bookings_city['months'], y=total_monthly_bookings_city['total_bookings'], name=\"City Hotel\"))\nfig.update_layout(title_text='Total Monthly Bookings', title_x=0.5, title_font=dict(size=20))  # Location and the font size of the main title\nfig.update_layout(xaxis_title=\"Arrival Date\",yaxis_title=\"Total Bookings\")\n\nfig.show()","f6e04ef4":"# Extract the daily bookings for both the hotesl\n\n# 1. Resort Hotel\ntotal_daily_bookings_resort = hotel_resort_data['arrival_date'].value_counts()\ntotal_daily_bookings_resort = total_daily_bookings_resort.resample('d').sum().to_frame().reset_index()\ntotal_daily_bookings_resort.rename(columns = {'index' : 'days', 'arrival_date':'total_bookings'}, inplace=True)\n\n# 2. City Hotel\ntotal_daily_bookings_city = hotel_city_data['arrival_date'].value_counts()\ntotal_daily_bookings_city = total_daily_bookings_city.resample('d').sum().to_frame().reset_index()\ntotal_daily_bookings_city.rename(columns = {'index' : 'days', 'arrival_date':'total_bookings'}, inplace=True)\n\n# Plot the line charts\nfig = go.Figure()\n\nfig.add_trace(go.Scatter(x=total_daily_bookings_resort['days'], y=total_daily_bookings_resort['total_bookings'], name=\"Resort Hotel\"))\nfig.add_trace(go.Scatter(x=total_daily_bookings_city['days'], y=total_daily_bookings_city['total_bookings'], name=\"City Hotel\"))\nfig.update_layout(title_text='Total Daily Bookings', title_x=0.5, title_font=dict(size=20))  # Location and the font size of the main title\nfig.update_layout(xaxis_title=\"Arrival Date\",yaxis_title=\"Total Bookings\")\n\nfig.show()","e97c4cd2":"# Extract the weekly bookings for both the hotels\n\n# 1. Resort Hotel\ntotal_weekly_bookings_resort = hotel_resort_data['arrival_date_week_number'].value_counts().to_frame().reset_index()\ntotal_weekly_bookings_resort.rename(columns = {'index':'week number', 'arrival_date_week_number' : 'total_bookings'}, inplace=True)\n\n# 2. City Hotel\ntotal_weekly_bookings_city = hotel_city_data['arrival_date_week_number'].value_counts().to_frame().reset_index()\ntotal_weekly_bookings_city.rename(columns = {'index':'week number', 'arrival_date_week_number' : 'total_bookings'}, inplace=True)\n\n# Plot the line charts\nfig, ax = plt.subplots(1, 2, sharey=True, figsize=(12,4))\nsns.lineplot(data = total_weekly_bookings_resort, x = 'week number', y = 'total_bookings', ax = ax[0])\nsns.lineplot(data = total_weekly_bookings_city, x = 'week number', y = 'total_bookings', ax = ax[1])\nplt.suptitle('Total Weekly Bookings')\nplt.show()","0e4b7717":"# 1. Visualise the count of each marget segment across both the hotel types\nplt.figure(figsize=(12, 4))\nsns.countplot(data=hotel_booking_data, x = 'market_segment', hue='hotel')\nplt.title('Market Segment Count Across Hotel', fontdict={'fontsize' : 20})\nplt.show()","913e0058":"# Extract the data for every market segment for both city and the resort hotel\n\nmark_seg_direct = hotel_booking_data[hotel_booking_data['market_segment'] == 'Direct']['arrival_date'].value_counts().resample('m').sum().to_frame()\nmark_seg_online = hotel_booking_data[hotel_booking_data['market_segment'] == 'Online TA ']['arrival_date'].value_counts().resample('m').sum().to_frame()\nmark_seg_offline = hotel_booking_data[hotel_booking_data['market_segment'] == 'Offline TA\/TO']['arrival_date'].value_counts().resample('m').sum().to_frame()\nmark_seg_groups = hotel_booking_data[hotel_booking_data['market_segment'] == 'Groups']['arrival_date'].value_counts().resample('m').sum().to_frame()\nmark_seg_corporate = hotel_booking_data[hotel_booking_data['market_segment'] == 'Corporate']['arrival_date'].value_counts().resample('m').sum().to_frame()\nmark_seg_complementary = hotel_booking_data[hotel_booking_data['market_segment'] == 'Complementary']['arrival_date'].value_counts().resample('m').sum().to_frame()\nmark_seg_aviation = hotel_booking_data[hotel_booking_data['market_segment'] == 'Aviation']['arrival_date'].value_counts().resample('m').sum().to_frame()\n\n\n################################################################### SUBPLOT ACROSS MARKET SEGMENT ##################################################################################\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=mark_seg_direct.index, y=mark_seg_direct['arrival_date'], name=\"Direct\"))\nfig.add_trace(go.Scatter(x=mark_seg_online.index, y=mark_seg_online['arrival_date'], name=\"Online TA\"))\nfig.add_trace(go.Scatter(x=mark_seg_offline.index, y=mark_seg_offline['arrival_date'], name=\"Offline TA\/TO\"))\nfig.add_trace(go.Scatter(x=mark_seg_groups.index, y=mark_seg_groups['arrival_date'], name=\"Groups\"))\nfig.add_trace(go.Scatter(x=mark_seg_corporate.index, y=mark_seg_corporate['arrival_date'], name=\"Corporate\"))\nfig.add_trace(go.Scatter(x=mark_seg_complementary.index, y=mark_seg_complementary['arrival_date'], name=\"Complementary\"))\nfig.add_trace(go.Scatter(x=mark_seg_aviation.index, y=mark_seg_aviation['arrival_date'], name=\"Aviation\"))\nfig.update_layout(title_text='Total Monthly Bookings Across Market Segments', title_x=0.5, title_font=dict(size=20))  \nfig.update_layout(xaxis_title=\"Arrival Date\",yaxis_title=\"Total Bookings\")\nfig.show()","134f88c0":"# Visualise the distribution channel count across hotel\nplt.figure(figsize=(12, 4))\nsns.countplot(data=hotel_booking_data, x = 'distribution_channel', hue='hotel')\nplt.title('Distribution Channel Count Across Hotel', fontdict={'fontsize' : 20})\nplt.show()","5a3b400b":"# Extract the data for every distribution channel for both city and the resort hotel\n\ndistibution_channel_ta_to = hotel_booking_data[hotel_booking_data['distribution_channel'] == 'TA\/TO']['arrival_date'].value_counts().resample('m').sum().to_frame()\ndistibution_channel_direct = hotel_booking_data[hotel_booking_data['distribution_channel'] == 'Direct']['arrival_date'].value_counts().resample('m').sum().to_frame()\ndistibution_channel_corporate = hotel_booking_data[hotel_booking_data['distribution_channel'] == 'Corporate']['arrival_date'].value_counts().resample('m').sum().to_frame()\ndistibution_channel_gds = hotel_booking_data[hotel_booking_data['distribution_channel'] == 'GDS']['arrival_date'].value_counts().resample('m').sum().to_frame()\ndistibution_channel_undefined = hotel_booking_data[hotel_booking_data['distribution_channel'] == 'Undefined']['arrival_date'].value_counts().resample('m').sum().to_frame()\n\n################################################################### SUBPLOT ACROSS Distribution Channel ##################################################################################\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=distibution_channel_ta_to.index, y=distibution_channel_ta_to['arrival_date'], name=\"TA\/TO\"))\nfig.add_trace(go.Scatter(x=distibution_channel_direct.index, y=distibution_channel_direct['arrival_date'], name=\"Direct\"))\nfig.add_trace(go.Scatter(x=distibution_channel_corporate.index, y=distibution_channel_corporate['arrival_date'], name=\"Corporate\"))\nfig.add_trace(go.Scatter(x=distibution_channel_gds.index, y=distibution_channel_gds['arrival_date'], name=\"GDS\"))\nfig.add_trace(go.Scatter(x=distibution_channel_gds.index, y=distibution_channel_gds['arrival_date'], name=\"Undefined\"))\nfig.update_layout(title_text='Total Monthly Bookings Across Distribution Channel', title_x=0.5, title_font=dict(size=20))  \nfig.update_layout(xaxis_title=\"Arrival Date\",yaxis_title=\"Total Bookings\")\nfig.show()","b8eeffed":"# 1. Visualise the deposit_type across hotel \nplt.figure(figsize=(12, 4))\nsns.countplot(data=hotel_booking_data, x = 'deposit_type', hue='hotel')\nplt.title('Deposit Type Count Across Hotel', fontdict={'fontsize' : 20})\nplt.show()","4d37f2e9":"# Extract the data for every distribution channel for both city and the resort hotel\n\ndeposit_type_no_deposit = hotel_booking_data[hotel_booking_data['deposit_type'] == 'No Deposit']['arrival_date'].value_counts().resample('m').sum().to_frame()\ndeposit_type_non_refund = hotel_booking_data[hotel_booking_data['deposit_type'] == 'Non Refund']['arrival_date'].value_counts().resample('m').sum().to_frame()\ndeposit_type_refundable = hotel_booking_data[hotel_booking_data['deposit_type'] == 'Refundable']['arrival_date'].value_counts().resample('m').sum().to_frame()\n\n################################################################### SUBPLOT ACROSS DEPOSIT TYPE ##################################################################################\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=deposit_type_no_deposit.index, y=deposit_type_no_deposit['arrival_date'], name=\"No Deposit\"))\nfig.add_trace(go.Scatter(x=deposit_type_non_refund.index, y=deposit_type_non_refund['arrival_date'], name=\"Non Refund\"))\nfig.add_trace(go.Scatter(x=deposit_type_refundable.index, y=deposit_type_refundable['arrival_date'], name=\"Refundable\"))\nfig.update_layout(title_text='Total Monthly Bookings Across Deposit Type', title_x=0.5, title_font=dict(size=20))  \nfig.update_layout(xaxis_title=\"Arrival Date\",yaxis_title=\"Total Bookings\")\nfig.show()","c21f3aee":"# 1. Visualise the cutomer type across hotel \nplt.figure(figsize=(12, 4))\nsns.countplot(data=hotel_booking_data, x = 'customer_type', hue='hotel')\nplt.title('Customer Type Count Across Hotel', fontdict={'fontsize' : 20})\nplt.show()","f40dd385":"# Extract the data for every Customer Type for both city and the resort hotel\n\ncutomer_type_transient = hotel_booking_data[hotel_booking_data['customer_type'] == 'Transient']['arrival_date'].value_counts().resample('m').sum().to_frame()\ncustomer_type_transient_party = hotel_booking_data[hotel_booking_data['customer_type'] == 'Transient-Party']['arrival_date'].value_counts().resample('m').sum().to_frame()\ncustomer_type_contract = hotel_booking_data[hotel_booking_data['customer_type'] == 'Contract']['arrival_date'].value_counts().resample('m').sum().to_frame()\n\n################################################################### SUBPLOT ACROSS DEPOSIT TYPE ##################################################################################\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=cutomer_type_transient.index, y=cutomer_type_transient['arrival_date'], name=\"Transient\"))\nfig.add_trace(go.Scatter(x=customer_type_transient_party.index, y=customer_type_transient_party['arrival_date'], name=\"Transient-Party\"))\nfig.add_trace(go.Scatter(x=customer_type_contract.index, y=customer_type_contract['arrival_date'], name=\"Contract\"))\nfig.update_layout(title_text='Total Monthly Bookings Across Customer Type', title_x=0.5, title_font=dict(size=20))  \nfig.update_layout(xaxis_title=\"Arrival Date\",yaxis_title=\"Total Bookings\")\nfig.show()","782db534":"# Average Daily Rate per person across both the hotel types\nhotel_resort_data['adr_pp'] = hotel_resort_data['adr']\/(hotel_resort_data['adults'] + hotel_resort_data['children'] + hotel_resort_data['babies'])\nhotel_city_data['adr_pp'] = hotel_city_data['adr']\/(hotel_city_data['adults'] + hotel_city_data['children'] + hotel_city_data['babies'])\n\nfig, ax = plt.subplots(1, 2, sharey=True, figsize=(12,4))\nsns.lineplot(data=hotel_resort_data, x = 'arrival_date', y = 'adr_pp', ax = ax[0])\nsns.lineplot(data=hotel_city_data, x = 'arrival_date', y = 'adr_pp', ax = ax[1])\nax[0].tick_params(labelrotation=45, axis='x')\nax[1].tick_params(labelrotation=45, axis='x')\nfig.show()","77850908":"hotel_booking_data['adr_pp'] = hotel_booking_data['adr']\/(hotel_booking_data['adults'] + hotel_booking_data['children'] + hotel_booking_data['babies'])","e994c283":"# Calcualte the average and maximum ADR across City Hotel\navg_adr_city = hotel_city_data['adr'].mean()\nmax_adr_city = hotel_city_data['adr'].max()\n\n# Calcualte the average and maximum ADR across Resort Hotel\navg_adr_resort = hotel_resort_data['adr'].mean()\nmax_adr_resort = hotel_resort_data['adr'].max()","8b2f2805":"print(\"Mean ADR for City Hotel is {:.2f}\".format(avg_adr_city))\nprint(\"Mean ADR for Resort Hotel is {:.2f}\".format(avg_adr_resort))\n\nprint(\"Max ADR for City Hotel is {}\".format(max_adr_city))\nprint(\"Max ADR for Resort Hotel is {}\".format(max_adr_resort))","a6e078fd":"# visualising adr_pp across reserved room type\nplt.figure(figsize=(12,4))\nsns.boxplot(data=hotel_booking_data[hotel_booking_data['is_canceled'] == 0], x = 'reserved_room_type', y = 'adr_pp', hue = 'hotel') # Note: Here considering only confirmed bookings\nplt.title(\"Average Daily Rate Across Reserved Room Types\", fontdict = {'fontsize' : 20})\nplt.xlabel('Room Types')\nplt.ylabel('Average Daily Rate Per Person')\nplt.ylim(0,200)\nplt.show()\n\n# visualising adr_pp across assigned room type\nplt.figure(figsize=(12,4))\nsns.boxplot(data=hotel_booking_data[hotel_booking_data['is_canceled'] == 0], x = 'assigned_room_type', y = 'adr_pp', hue = 'hotel') # Note: Here considering only confirmed bookings\nplt.title(\"Average Daily Rate Across Assigned Room Types\", fontdict = {'fontsize' : 20})\nplt.xlabel('Room Types')\nplt.ylabel('Average Daily Rate Per Person')\nplt.ylim(0,200)\nplt.show()","5165a522":"# visualising adr_pp across meal\nplt.figure(figsize=(12,4))\nsns.boxplot(data=hotel_booking_data[hotel_booking_data['is_canceled'] == 0], x = 'meal', y = 'adr', hue = 'hotel') # Note: Here considering only confirmed bookings\nplt.title(\"Average Daily Rate Across Reserved Room Types\", fontdict = {'fontsize' : 20})\nplt.xlabel('Meal')\nplt.ylabel('Average Daily Rate')\nplt.ylim(0,200)\nplt.show()","e493fde4":"sns.countplot(data = hotel_booking_data, x = 'meal', hue='hotel')\nplt.title('Meal Category Across Hotel', fontdict={'fontsize' : 20})\nplt.show()","5913ec6f":"# Extract the monthly adr data\nadr_monthly = hotel_booking_data[[\"hotel\", \"arrival_date_month\", \"adr\"]].sort_values(\"arrival_date_month\")\n\n# Order the data by months\nordered_months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\nadr_monthly[\"arrival_date_month\"] = pd.Categorical(adr_monthly[\"arrival_date_month\"], categories=ordered_months, ordered=True)\n\n############################################################ PLOT THE VARIATION OF ADR ACROSS MONTHS ######################################################\n\n# Plot ADR versus Months\nplt.figure(figsize=(12,4))\nsns.lineplot(data=adr_monthly , x='arrival_date_month', y='adr', hue='hotel', palette='hot')\nplt.title('Average Daily Rate Per Month', fontdict={'fontsize' : 20})\nplt.xlabel('Month')\nplt.ylabel('Average Daily Rate')\nplt.show()","2c801f41":"# Variation of ADR annually\nplt.figure(figsize=(12,4))\nsns.lineplot(data=hotel_booking_data , x='arrival_date_year', y='adr', hue='hotel', palette='hot')\nplt.title('Average Daily Rate Across Year', fontdict={'fontsize' : 20})\nplt.xlabel('Year')\nplt.ylabel('Average Daily Rate')\nplt.xticks(np.arange(2015, 2018, 1))\nplt.show()","8d923566":"# Display the Maximum and Mean ADR for both the hotels for all the three years\n\n\n# 1. City Hotel\nfor year in list((2015, 2016, 2017)):\n\n  # Calculate the Max and Mean ADR for a particular year\n  max_adr = hotel_city_data[hotel_city_data['arrival_date_year'] == year]['adr'].max()\n  mean_adr = hotel_city_data[hotel_city_data['arrival_date_year'] == year]['adr'].mean()\n\n  print(\"Maximum ADR for City Hotel in the year {} is {}\".format(year, max_adr))\n  print(\"Mean ADR for City Hotel in the year {} is {:.2f}\".format(year, mean_adr))\n\n# 2. Resort Hotel\nfor year in list((2015, 2016, 2017)):\n\n  max_adr = hotel_resort_data[hotel_resort_data['arrival_date_year'] == year]['adr'].max()\n  mean_adr = hotel_resort_data[hotel_resort_data['arrival_date_year'] == year]['adr'].mean()\n\n  print(\"Maximum ADR for Resort Hotel in the year {} is {}\".format(year, max_adr))\n  print(\"Mean ADR for Resort Hotel in the year {} is {:.2f}\".format(year, mean_adr))","82da56a0":"hotel_booking_data.head()","63850f6a":"fig, ax = plt.subplots(2, 2, figsize=(25,25))\n\n# 1. Variation of ADR across market segments for both the hotels\nsns.boxplot(data=hotel_booking_data, x='market_segment', y='adr', hue='hotel', ax=ax[0][0])\nax[0][0].set_xlabel('Market Segments')\nax[0][0].set_ylabel('Average Daily Rate')\nax[0][0].set_title('Average Daily Rate For Market Segments Across Hotels')\nax[0][0].set_ylim(0,400)\nax[0][0].tick_params(labelrotation=45, axis='x')\n\n# 2. Variation of ADR across customer type for both the hotels\nsns.boxplot(data=hotel_booking_data, x='customer_type', y='adr', hue='hotel', ax=ax[0][1])\nax[0][1].set_xlabel('Customer Type')\nax[0][1].set_ylabel('Average Daily Rate')\nax[0][1].set_title('Average Daily Rate For Customer Types Across Hotels')\nax[0][1].set_ylim(0,400)\nax[0][1].tick_params(labelrotation=45, axis='x')\n\n# 3. Variation of ADR across distribution channel for both the hotels\nsns.boxplot(data=hotel_booking_data, x='distribution_channel', y='adr', hue='hotel', ax=ax[1][0])\nax[1][0].set_xlabel('Distribution Channel')\nax[1][0].set_ylabel('Average Daily Rate')\nax[1][0].set_title('Average Daily Rate For Distribution Channel Across Hotels')\nax[1][0].set_ylim(0,400)\nax[1][0].tick_params(labelrotation=45, axis='x')\n\n# 4. Variation of ADR across number of special requests for both the hotels\nsns.barplot(data=hotel_booking_data, x='total_of_special_requests', y='adr', hue='hotel', ax=ax[1][1])\nax[1][1].set_xlabel('Total Special Requests')\nax[1][1].set_ylabel('Average Daily Rate')\nax[1][1].set_title('Average Daily Rate For Total Special Requests Across Hotels')\nax[1][1].tick_params(labelrotation=45, axis='x')\n\nfig.show()","01c4fc89":"# Some important statistics\n\n# Checking count of canceled bookings across hotels and count of repeated guests across both the hotels\nfig, ax = plt.subplots(1, 2, figsize=(12,4))\n\nsns.countplot(data=hotel_booking_data, x='is_canceled', hue='hotel', ax=ax[0])\nax[0].set_title('Number of Cancelations Across Hotel')\nax[0].set_xlabel('0 : Not Caneled, 1 : Canceled')\nsns.countplot(data=hotel_booking_data, x='is_repeated_guest', hue='hotel', ax=ax[1])\nax[1].set_title('Number of Repeated Guests Across Hotel')\nax[1].set_xlabel('0 : Not a Repeated Guest, 1 : Repeated Guest')\n\nfig.show()","aa47e023":"# Cancelation across months for City Hotel\nplt.figure(figsize=(15,8))\nsns.countplot(data=hotel_city_data, x='is_canceled', hue='arrival_date_month')\nplt.xlabel('0:Not Canceled, 1:Canceled')\nplt.title(\"Cancelations Across Months For City Hotel\", fontdict={'fontsize':20})\nplt.show()\n\n# Cancelation across months for City Hotel\nplt.figure(figsize=(15,8))\nsns.countplot(data=hotel_resort_data, x='is_canceled', hue='arrival_date_month')\nplt.xlabel('0:Not Canceled, 1:Canceled')\nplt.title(\"Cancelations Across Months For Resort Hotel\", fontdict={'fontsize':20})\nplt.show()","f0dbab2a":"# Cancelation across city hotel for each customer type\nplt.figure(figsize=(12,4))\nsns.countplot(data=hotel_city_data, x='is_canceled', hue='customer_type')\nplt.title('Cancelations Across Customer Types For City Hotel', fontdict={'fontsize':20})\nplt.xlabel('0: Not Canceled, 1: Canceled')\nplt.show()\n\n# Cancelation across resort hotel for each customer type\nplt.figure(figsize=(12,4))\nsns.countplot(data=hotel_resort_data, x='is_canceled', hue='customer_type')\nplt.title('Cancelations Across Customer Types For Resort Hotel', fontdict={'fontsize':20})\nplt.xlabel('0: Not Canceled, 1: Canceled')\nplt.show()","58815f04":"# Cancelation across city hotel for every year\nplt.figure(figsize=(12,4))\nsns.countplot(data=hotel_city_data, x='is_canceled', hue='arrival_date_year')\nplt.title('Cancelations Across Years For City Hotel', fontdict={'fontsize':20})\nplt.xlabel('0: Not Canceled, 1: Canceled')\nplt.show()\n\n# Cancelation across resort hotel for every year\nplt.figure(figsize=(12,4))\nsns.countplot(data=hotel_resort_data, x='is_canceled', hue='arrival_date_year')\nplt.title('Cancelations Across Years For Resort Hotel', fontdict={'fontsize':20})\nplt.xlabel('0: Not Canceled, 1: Canceled')\nplt.show()","218634a9":"# Distribution of number of days of stay\n\n# Extract the data for only those customers who did actually come\nhotel_booking_data_confirmed = hotel_booking_data[hotel_booking_data['reservation_status'] == 'Check-Out'][['reservation_status_date', 'arrival_date']]\ntotal_days_of_stay = pd.to_datetime(hotel_booking_data_confirmed['reservation_status_date']) - hotel_booking_data_confirmed['arrival_date']\nsns.distplot(total_days_of_stay.dt.days)\nplt.show()","9767fc0f":"# Another way to analyse the stay duration is by visualising the stays_in_nights column across both the hotels\nhotel_booking_data['total_night_stays'] = hotel_booking_data['stays_in_week_nights'] + hotel_booking_data['stays_in_weekend_nights']\nhotel_resort_data['total_night_stays'] = hotel_resort_data['stays_in_week_nights'] + hotel_resort_data['stays_in_weekend_nights']\nhotel_city_data['total_night_stays'] = hotel_city_data['stays_in_week_nights'] + hotel_city_data['stays_in_weekend_nights']\n\nfig, ax = plt.subplots(1, 2, figsize = (12, 5))\n# Distribution of total night stays across Resort Hotel\nsns.distplot(hotel_resort_data['total_night_stays'], ax = ax[0])\nax[0].set_xlabel('Total Night Stays')\nax[0].set_title('Total Night Stays in Resort Hotel', fontdict={'fontsize' : 20})\n\n# Distribution of total night stays across City Hotel\nsns.distplot(hotel_city_data['total_night_stays'], ax = ax[1])\nax[1].set_xlabel('Total Night Stays')\nax[1].set_title('Total Night Stays in City Hotel', fontdict={'fontsize' : 20})\n\nfig.show()","9f23aadd":"# Next, I visualise the lead time for every month, since, from earlier observations that number of bookings increase during the summer months a similar pattern should be observed here as well.\nlabels = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\nticks = np.arange(1,13)\nplt.figure(figsize=(12,4))\nsns.lineplot(data=hotel_booking_data, x='arrival_date_month_number', y='lead_time', hue='hotel')\nplt.xticks(ticks=ticks, labels=labels)\nplt.title(\"Lead Time Across Months\", fontdict={'fontsize' : 20})\nplt.show()","1215eaa4":"# adr_pp has inf values hence, drop the column\nhotel_booking_data.drop('adr_pp', axis=1, inplace=True)","c3014287":"# Plot the correlation heatmap\ncorr_matrix = hotel_booking_data.corr()\nplt.figure(figsize=(20,10))\nsns.heatmap(corr_matrix, annot=True, linecolor='black', )\nplt.title(\"Pearson Correlation Matrix\", fontdict={'fontsize':20})\nplt.show()","c68769b4":"hotel_booking_data.head()","818df523":"# Enode the hotel column\n\n'''\nResort Hotel --> 0\nCity Hotel --> 1\n'''\nmap_hotel = {'Resort Hotel' : 0, 'City Hotel' : 1}\nhotel_booking_data['hotel'] = hotel_booking_data['hotel'].map(map_hotel)","eb94aae0":"# Drop the arrival_date_month because we have already encoded the same as arrival_date_month_number\nhotel_booking_data.drop('arrival_date_month', axis=1, inplace=True)","d5aba1a4":"# convert the reservation_status_date into a float variable\ndef cnvt_date_to_num(x):\n  return float(x.day*(10**6) + x.month*(10**4) + x.year)\n\n# Apply the above function to both reservation_status_date and arrival_date\nhotel_booking_data['reservation_status_date'] = pd.to_datetime(hotel_booking_data['reservation_status_date']).apply(lambda x : cnvt_date_to_num(x))\nhotel_booking_data['arrival_date'] = hotel_booking_data['arrival_date'].apply(lambda x : cnvt_date_to_num(x))","051b10be":"# Extract all the object type columns\nobject_columns = [cols for cols in hotel_booking_data.select_dtypes('object').columns]\n\n# Check for columns with high cardinality\ndef check_high_cardnial_columns(data, columns, threshold = 20):\n\n  high_cardinal_columns = [] # List for storing the columns for high cardinality\n\n  # iterate over each object columns and check for cardinality\n  for column in columns:\n    cardinality = data[column].value_counts().shape[0]\n\n    # Check if the cardinality is above the threshold\n    if cardinality > threshold:\n      high_cardinal_columns.append(column)\n\n  return high_cardinal_columns\n\n# Call the above function\nhigh_cardinal_columns = check_high_cardnial_columns(hotel_booking_data, object_columns)","86a7af04":"high_cardinal_columns","0172930a":"# Encode the high cardinal column\nfor cols in high_cardinal_columns:\n  # Creating a LabelEncoder object\n  le = LabelEncoder()\n  hotel_booking_data[cols] = hotel_booking_data[cols].astype('str')\n  hotel_booking_data[cols] = le.fit_transform(hotel_booking_data[cols])","e94ff6eb":"# Remove the high cardinal columns from the object columns list\nfor cols in high_cardinal_columns:\n  object_columns.remove(cols)","fa50972a":"# Create dummies for the rest of the object columns\nfinal_data = pd.get_dummies(hotel_booking_data, drop_first=True)","6815f6d4":"# Divide the data into features and target and then scale the features\nX = final_data.drop('is_canceled', axis=1)\ny = final_data['is_canceled']\n\n# Scale the features\nfor col in X.columns:\n  mms = MinMaxScaler()\n  X[col] = mms.fit_transform(X[col].values.reshape(-1,1))","6f8b12fd":"# Performing Feature Selection using RandomForest and Recursive Feature Elimination\nrf = RandomForestClassifier()\nfeature_selector = RFE(rf, 30, verbose=3)\nfeature_selector.fit(X, y)","2d06566b":"feature_selector.support_","fe41cfe7":"# Select the important features\nimportant_features = X.columns[feature_selector.support_]\nimportant_features","fb0a0829":"# Extract the data only with the important features\nX_imp = X[important_features]","2f503053":"# Build Default Models\ndef build_models(X, y):\n\n  print(\"########################################### FUNCTION BEGINS #####################################################################\")\n\n  # Store all the classifiers to built\n  models = {'Logistic Regression' : LogisticRegression(),\n            'KNN' :KNeighborsClassifier(),\n            'Decision Tree' : DecisionTreeClassifier(),\n            'SVM' : SVC(),\n            'Random Forest' : RandomForestClassifier(),\n            'Extra Trees' : ExtraTreesClassifier(),\n            'AdaBoost' : AdaBoostClassifier(),\n            'XGB' : XGBClassifier(),\n            'LGBM' : LGBMClassifier()\n            }\n\n  # Store the trained models in a dictionary\n  trained_models = {}\n\n  # Note the start time\n  function_start = datetime.datetime.now()\n  print(\"Model Building begins at {}\".format(function_start))\n\n  start_time = time.time()\n  # Iterate over models and model object\n  for model, model_obj in models.items():\n\n    # Note the starting time of the model\n    model_start = time.time()\n    print(\"{} Model begins\".format(model))\n\n    # Fit the model using cross_val_score\n    cv_mean = np.mean(cross_val_score(model_obj, X, y, scoring='accuracy', cv=3, n_jobs=-1))\n\n    # Store the cv score\n    trained_models[model] = cv_mean\n    \n    # Note the end time and print the total time taken for the model to build\n    model_end = time.time()\n    print(\"{} Model built\".format(model))\n    print(\"Total time taken for {} model to build: {:.3f} seconds\".format(model, model_end-model_start))\n  \n  results = pd.DataFrame(trained_models, index = ['Mean CV Accuracy']).T\n  print(\"########################################### FUNCTION ENDS #####################################################################\")\n  print()\n  end_time = time.time()\n  print(\"Total time taken to build models: {:.3f} seconds\".format(end_time-start_time))\n\n  return results","709a6769":"results = build_models(X_imp, y)","427a17b6":"# Sort the results based on the accuracy\nresults_sorted = results.sort_values('Mean CV Accuracy', ascending=False)\nresults_sorted","4e0708a0":"# Train an ensemble model and visualise the feature importance of each feature\nX_train, X_test, y_train, y_test = train_test_split(X_imp, y, test_size=0.2, random_state=42)\n\n# Random Forest Model\nrf_clf = RandomForestClassifier()\nrf_clf.fit(X_train, y_train)\n\n# Compute the accuracy on the test set\ntest_acc_score = rf_clf.score(X_test, y_test)\nprint(\"Accuracy of Random Forest Classifier Model on the test set is {}%\".format(test_acc_score*100))","daf3c890":"# Feature Importances\nfeature_importance = rf_clf.feature_importances_\nfeatures = X_imp.columns\n# Create a dictionary of features and the feature importances\nfeature_importance_dict = {features[i] : feature_importance[i] for i in range(len(feature_importance))}\nfeature_importance_df = pd.DataFrame(feature_importance_dict, index=['Feature Importance']).T.reset_index().rename(columns = {'index' : 'Features'})\nfeature_importance_df = feature_importance_df.sort_values('Feature Importance', ascending=False)\n\n# Plot the feature importances\nplt.figure(figsize=(8,8))\nsns.barplot(x='Feature Importance', y='Features', data=feature_importance_df)\nplt.title(\"Feature Importance\", fontdict={'fontsize' : 20})\nplt.show()","223fbad0":"hotel_booking_data['reservation_status'].value_counts()","30517f3e":"# Drop the reservation_status_Check_Out column\nX_imp_2 = X_imp.drop(\"reservation_status_Check-Out\", axis=1)","706829bf":"# Build models again\nresults_2 = build_models(X_imp_2, y)","de680316":"# Sort the results in descending order\nresults_2_sorted = results_2.sort_values('Mean CV Accuracy', ascending=False)\nresults_2_sorted","470d7383":"# Split the data into train and test split\nX_train_2, X_test_2, y_train_2, y_test_2 = train_test_split(X_imp_2, y, test_size=0.2, random_state=42)","ddf7a3e2":"# 1. Light GBM\n\nlgbm_clf = LGBMClassifier() # Default Model\n\n# Set up hyperparameters\nnum_leaves = [31, 51, 71, 91, 111, 200, 500]\nmax_depth = [-1, 50, 100, 150, 200, 300, 500]\nlearning_rate = [0.01, 0.05, 0.1, 0.5]\nreg_alpha = [0.0, 0.25, 0.5, 0.75, 1.0]\nreg_lambda = [0.0, 0.5, 1.0]\n\nlgbm_params = {\"num_leaves\" : num_leaves,\n               \"max_depth\" : max_depth,\n               \"learning_rate\" : learning_rate,\n               \"reg_alpha\" : reg_alpha,\n               \"reg_lambda\" : reg_lambda\n               }\n\n# Using RandomizedSearchCV for hyperparameter tuning\nrscv_lgbm = RandomizedSearchCV(lgbm_clf, lgbm_params, n_iter=10, scoring='accuracy', n_jobs=-1, cv=3, random_state=12, verbose=4)\nrscv_lgbm.fit(X_train_2, y_train_2)","1f34c3d9":"# Print the mean cv scores calculated\nmean_cv_0 = np.mean(rscv_lgbm.cv_results_[\"split0_test_score\"])\nmean_cv_1 = np.mean(rscv_lgbm.cv_results_[\"split1_test_score\"])\nmean_cv_2 = np.mean(rscv_lgbm.cv_results_[\"split2_test_score\"])\n\nprint(\"Cross Validation Accuracy Scores for Tuned Light GBM Classifer are:\")\nfor i in range(3):\n  print(\"Split {} Score: \".format(i+1), np.round(100*np.mean(rscv_lgbm.cv_results_[\"split{}_test_score\".format(i)]),2), '%')","5646535d":"# Test the model on the test set\ntest_acc_score_2 = rscv_lgbm.score(X_test_2, y_test_2)\nprint(\"Accuracy of Light Gradient Bossting Model (Tuned) on the test set is {:.2f}%\".format(test_acc_score_2*100))","8e3b8a2f":"# Store the probabilities as well\nprediction_prob = rscv_lgbm.predict_proba(X_test_2)","918fe10d":"# Extract the best estimator and train it on the entire dataset and then dump the model in a pickle file\nlgbm_clf_best = rscv_lgbm.best_estimator_\n\n# fit the model\nlgbm_clf_best.fit(X_imp_2, y)","efe45298":"# Dump the model\nfile_path = \".\/LightGBM_Classifier.pkl\"\npickle_out = open(file_path, \"wb\")\npickle.dump(lgbm_clf_best, pickle_out)\npickle_out.close()","cb7b5a65":"![image.png](data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAA6QAAACzCAYAAACehNFjAAAgAElEQVR4Aex9B3gUVff+zGxJTzakQRI6hN5C6C20UA2EXkJLU\/FTwYIFpStYEBUVxAKo9NCbH733Py0QQEoAgZQvCfkg+ZL8kvX9P3d2Znd2d2Z3hiQKOj4P7mZn5t5z33Puuee999w7FNT\/VARUBFQEVARUBFQE\/jIESlPnoLWOgqZqEn4t\/MvEUCtWEVAReOYRKMXNXetwNKP0mW\/JX9cAI7LWjEQVhoGhZQK+3HQY51Kv4erF49ixbBZiW\/gjoP072J1pLEcRVb1R5YimWpSKgIqAioCKgIqAioASBB4ewKyedRHgVwmV\/ELQLOZD7Msuz0BHiTDqvSoCKgIqAioCwCOkrJmGcVERqFetCgICKiO0TjN0io7HtKVHkV6iYlTeCKiEtLwRVctTEVARUBFQEVARUBFQEVARUBFQEVARUBGQhYBKSGXBpN6kIqAioCKgIqAioCKgIqAioCKgIqAioCJQ3giohLS8EVXLUxFQEVARUBFQEVARUBFQEVARUBFQEVARkIWASkhlwaTepCKgIqAioCKgIqAioCKgIqAioCKgIqAiUN4IqIS0vBFVy1MRUBFQEVARUBFQEVARUBFQEVARUBFQEZCFgEpIZcGk3qQioCKgIqAioCKgIqAioCKgIqAioCKgIlDeCPxJhLQUD28cxrqvpmPmqiv4Z7wd6RFSd\/yEX\/bexLP0WrlHqTvw0y97cfNZErq8e0UFllfy8BZObluO+VPfxJJTxRVY0z+56GfF35Tg4a2T2LZ8Pqa+uQRyzaFi++iz6bf+LGuvWOyVtOIv0FPpQ9w4vA5fTZ+JVVf+vqP406Njx\/ZQ8r\/HOHElDQt2p+CXDGevCfoDD3P+g40nL2Puxf\/+Q2Iwx\/ipV1UEVASeLgT+FEKaf2QOugbrQFNahE0+jH9CGF56\/SO019Og3fvh++ynS+mS0pRex0ft9aBpd\/R7ZoSWbM1TeKEEl5aNRwsDA4rxx5iNKuuvCCU9M\/6m5BKWjW8BA0OB8R8DWeZQwX30mfRbFWFEYmVWMPZiVUr99ufrKR9H5nRFsI4GpQ3D5MN\/01G8onRckoOv1h\/F8JXO\/43acx\/OX0NbivOnjqPlB8nwmrEdr95wPEGQfycVfT9dD6\/p69Fi538qMAYrwW9XLmPCyss4or6nUar7qr+rCKgIiCBQzoS0GFd3\/ohtqUU2VRlxf2E36P9BhBSF57HkhUEY9sZqOBkrbLD6K\/8sxPklL2DQsDew+tkR+q8E7AnqLsDqod6gVUL6BNjJfeQZ8jcFqzHUm5ZPSFHBfVTSb0n5drk6eZbuk2prBWOvBCJJPSkpROG9xvtY2E3\/9yakFdW\/\/u8+kj5aj5o\/nMPCs3ex4dJdzFq2Gd7T16PD1jT271WnLmH4FxtQael1\/O5swZNVXRF+\/GmDLEIK\/IEHJw6iUkURUmMRUi5fwYvfb4P\/9GR4f3QK2\/5PoX2pt6sIqAj8oxEoX0L6aBPGBbuh17dZdqAWrBgEd\/qfs0JqB4D6g4oAi0AhtsdXAaMS0gq1h2fG3xRuR3wVRgEhrVDYpAt34NulH3pGr\/yT2qpIRQVYMcgd9N95hVQRHgpuLknHuysuYn\/BH9xDpdixcStLSAecsmTKFGVcx5iNaUiXRUhLsHb1RpmEFCi4cAyBFUBISzJv4aWfDqDvypN4edNB1JuhElIFlqHeqiKgIsAhUI6ENA\/HpreDN6NH109TkZ6ejvT0DGTmmVZLSYDoISCkxoJ0XD5xDOdu5sB2PVWonaLMqzh1aD8OHL+M9ALhFbnfi5B59RQO7T+A45fTIV5EITLSHiCfFFn6GPdTjuPomevIsowTNpUVI+fGaRzafxhnbmRb0l9KHiH9bqbg3iJkpt3DI9vBpTADaQ\/Y2lD6+D5Sjh\/FmetZDveaysVB1n2C+ouzUnHi5A08FMhYlJmGe\/ZCVxBGArhsvxY8wO10kxJKHqbh7JFDOHU9G1KZQIUZaTDBWoys1BM4eeMhBM0CUISsa6dxeP9+HL1wx14vVvUXIev6GRzZvw+HTlzC\/XzrkthbizJx9dQh7D9wHJcdGWdJDm6ePYIDh07hSsZDbI8PliCkRjy6cxuZIg0szk7DXaGSiABO9ChbRuNj3Es5hv179uLQyUu4naswHU8ODgJZWZs\/dgjHLqVb2Xzpo3tIObIfR86n4aEIBqQ9BQ9uw2QSJXiYdhZHDp3C9Wz7m239DYuF4H9FWddw+vB+7D96AXdsbN1YkIsM1n+lIz0jF4UC1QuvZeQWWNmXrL4HoCTnJs4eOYBDp64g4+F2xAcrJ6Tl00cFgFh9tfVbjn07+2hZbYj0TUf9TWA\/Yj6LlUGOHcKI\/HspOH5gHw6cvIZsO1N33lZx7IkEcv2L0vHGSjmCP2z1xF0qiy4cPksIqYeAkBpRkH4ZJ46dw80ch6O4A79biIcZJFYwxQsPbcbcwocZSM\/IRr5VFy9GXlaG6Rmb\/mkZA0rx+H4Kjh89g+vSA7kAS+uv4jouL72RusQJqbUUfyD\/v3k4mZaJw78\/gr2bK8G6NUJC+gce\/zcPJ25n49pj+xReQkiDHBDSosePcOZ2Fg7f\/S8y7PqFtWSSfxXcQswslZBK4qNeUBFQEZBEoJwIaSH2vx0Of70GNEVD6+IBDw\/yzwu1XtjJVs4HiHWf\/wE\/TmyHILIXhaJA0ToEdZiCHTZTgsbM\/Zg3uDF8XT0RFBoMg56B1rcpxn2fIkEqbdtoROb+eRjc2BeunkEIDTZAz2jh23Qcvk\/haGn+cSyM643wUE+4NJuEnxbFo6U\/2etKgaJouFbrgWm7M62CzpIba\/Fyx2C4G6qjRetw1PL1QpX6zdC4TjC8dDS0Ya8D+SfwVXwftKzmDX3YZPDbbfKPL0Rc73CEerqg2aSfsCi+JfzNOLiiWo9p2J0piH4ByMVBzn1W9b\/2CxbHhaMSqZ92R+RnF3Hiq3j0aVkN3nrBHqGKwshWXYK\/cw9+irE9myHYwwVt31mB+SMawkfD24srqnZ\/H7+a7SUfxxfGoXd4KDxdmuG1XxYjLrwSdDQF2j0Sn7Gpx6W4v2sWYhoaoPesgroNwhDirYNbaBe8svKKFSkCCnF13VvoW88PfjWao2WDILjSNBivRnhle65JSmMm9s8bjMa+rvAMCkWwQQ9G64um474Hb1rsjcZcnPhqLCIC9aA1HgioXgvVQ6shxE9vnbJbehsb3xuGLg0C4OraC5YEgyKcWZyIfq1qwEdfHS\/uMQV9jvV4Q4GMRmTtm41+dXzgW6sVOrauy9oDEzgeW2wCQ4F6LF9l4GAlq53N6xDU+X1sP70ZM2IawEfL61gDn\/rD8c15fvooFwc\/HYuezYLh4dIW76yYjxENfaChST+lQLtWRff3f7VaVeD9je2e9dL7uzArpiEMek9UqdsAYSHe0LmFossrK3GFa\/PjI1PR0pPIQsMzYhpOCLAoOPouWriTPuOB8HcO47GSPpp7Al+NjUCgnobGIwDVa1VHaLUQ+Onlpuzml1sftShR8E3Ubznz7WW0ISf9zcp+7HyWElsHSu\/twPu9a8OT9yUUDffqPTB1Zzrn4x21daM49ix8Mv3LE\/hSgXYsX0X1RC6XRRdynuUJaV08\/8OPmNguiPWzbB\/UBaHDlB1WfZCQLqd+t+Qs5nYwgCH92DMC008JiG3JSbzdSAuK8cXgFTmW9pfewJL+gWAoBt5tZuBEofUYMOmnRYhv6W+RzbUaekzbDZuh1VKe+VsF9y9zPeSLY0Ja+t90zP55JyrPSIbXdNO\/wM8OYeZvhYJ4xEJIXziVhte\/2wpf7l6vWVvR49f7uCsIJ6QIqfFxFj5bvQtVZ29ErfnbEDorGYa5u\/D8\/8uTGWsJGqYSUgEY6lcVARUBJQiUEyElVZbgzNQm0FEukim7HrQGQVHTkXz4Im6k3UTKweWY1L4SGEqLBlNOWFYaC09jdjtvuDaMx7obpgGqOC0ZcWE60K4RmHnOarpUtL2Fp2ejnbcrGsavg6mIYqQlxyFMR8M1YiZMRZQgfceLqK+loAmKwvTkw7h4Iw03Uw5i+aT2qMRQ0DZ8Cyf52cKSFMxt5wHGEIUvr5l+LLm5GP0qaeDdcS5O3ruO8+dvsljw5WoFhBQl6djxYn1oKWkcGr51UjkOcvES1F856n2s3ncYOxe\/hpgeQ\/Hx0ccoSd+BF+trbfYIVRRGomoz\/Vh8F6tjq0FDaRAaMx87T19FWto1nNr6BeJa+LCBiP+AH3CHG2zNcmsqI+r91dh3eCcWvxaDHkM\/xtHHwOMj7yLcXQO\/rnNwLMf0kPHhSczt5gdGVwdJ27K5Qb4Ut5YOQojOgPbTDiGX3GrMxoFpkQgJbMYR0kKcnt0O3q4NEb\/uhml1vzgNyXFh0NGuiJh5jlvBLcHlz7ujEqNFcK9Z2HWbZzVFoiukjy99iu4+NCgXISEFSrP2YVJjHSiNhZAK7UhMj4RUy5KxcC9eqqmFa4d5SGXN2YicE\/MxoGWCDEIqsw6BzVXp9yG2nUzFrdu3LH2fZuDfdx72XriJ+5kZuHNxN74cVQ8uNA2v3otxj9Nx8d3ViK2mAaUJRcz8nTh9NQ1p105h6xdxaOFjOiRqwA93zMGaKCF9fATvhrtD49cVc47lmO41PsTJud3gx+hQJ2kbd5hIEY68Vo\/tp9Vf3GOdwVG0FxOra0D69SGiUtl97zI+714JjDYYvWbtgsUclK2Qmm3dKm1SYR+V7HqWcqz8liPfXiYbktHfBPZTJltHKdL2r8XWE1dwJzMH2XfPY\/2UDjAwNHQtZ+CieUiRHsfEsVfiXyz4yhpvlOqpLLqQ9SxHSDVBiJqejMMXbyDtZgoOLp+E9pUYUNoGmHKCHyzl41JyfjrCdTQ01SeCm3NjW15yZiqa6Fzh5qqB34g1yDPjUYprc9tCp2uMd7ijqc26kZStId4yD+Tmguy+mMupkP4lrM4RIf0Dt2\/9jh2\/\/xd3HxcjO+8hNu\/aj9AZyfBdfBmXzIufPCHdguj9D3A6Kx93ch5i9+mz6D6PHHa0CX2PPzKfqCtKSP8vFx99twn+X53BxhxTwcW5v2Pil+vhNXsP5j7gHLBQdEffVULqCB31moqAioADBP5kQmq\/h7Ro70RU19Bw7fcDTOtPRqQvHQCDxoCY5VnmAJPMKF6e3Qo6SoemU89Ipm2ybTWmY+kAAzSGGCzPEjjU0suY3UoHStcUU89wEcij5Yh2IyublpVMtgwu8KRcorCY2xJbenkOWuko6Ht8LZgJzsUP\/VxB61phzmXzSAFIlPtoeTTcBKnLvG5MOFBwiVoMU3VycZB7n6kmqfq5q1ge7SZIyeKkk2gLyooR33i7TyPuftEVekqHxu+ettJ16a2v0NObBq1vi7nmVw88EpeblGu8g0W9vEFr6+PNY5ZgiVwq2PUCa3tuXeabDp7K3YCxwRpoa7+M\/Tx\/tJHNmL4UAwwaGGKWw9q0ZrO2oWs6FaxpZa\/G8AAGTNBwrLKamhcnpCg+jjcbaO0IKcAdgiQkpCDmJW5HbJNlymi88zki9QwqDV8tCPaA0qJCK8xtIGD\/lI2DA1n5vu\/SewmEB1EbM79FLzcampBE7OQXTIx38UVXPShdY7x72swe2JWGW1\/1hDdNQ992LniTsCekRtxZ1AvetBb13zxmmfQhrSnYhReqa0C7dcF87jCvkpRZiNATv\/AajgjMpuQCCZ51aDHtPEogv+9lrx6OAIZB0PBV1is1RcoIKSBh6wr6qJg+zb+JliNN0spiQ5DR34hc5WHr5vYJv+SvxjAfGkzlOGwz93fptopir8S\/mBoje7wRimr3XURPZdGFvGf5FVJBBg0rWBH2TqwODe2Kfj\/wWSQK\/G7pVcxrpweta4b3z\/J9uwTn3m8Gl7qjMLajK5jAWGx4xKFgTMeSPp7Qt5otIGcS\/QKcbJQLoviB3A5M4Q8S5YjgbWq6aYJKGCcIS5P+7oiQijxVfBdjP0yG9yensdN8WBBPSG1P2f0DGReOoyYhsF9fwv\/jwhJ7QvoHMs4eReiMzRh5rkgQa\/2BKwf2wnf6erTdk+t0LLCSViWkVnCof6gIqAjIR+AvJ6Qll2ahJSF5Xb\/g0kvysHKIAbS2LuJ+2IHNq5dh0YIPMW3KK5jQpSo0FA2vIascp5LkrcQQAw1t3Tj8sGMzVi9bhAUfTsOUVyagS1UNKNoLQ1Zx6YAFKzDIQ4SQllzCrJY6UPouWMAtxZWcfBuNtDRc+iyBJYHoMX6J8QSta4R3TvGDKQlyxcu1D5RNyjLj0GUBt\/InFwe595nqkaqfu2qzR4gzJIm2oKwYccXbfxiR8U1PUUIKYzq+6ekCmvbC4JUkYZL8JxUoAchdjoFeNGif4VjLZ4ByT+Hxz4jxoEF7DsDyXCB\/\/Wj4MxqEJv1qvSrG3w8gb+UQGGgt6sb9gB2bV2PZogX4cNoUvDKhC6pqKNBeQ0BMKz95FPwYBr4j1rJpnZYiJAhpyRlMbaITIaSFWD\/KF4wNIXWkR7kygl0V0YDWV0ffaRtwhQ\/4LMJKfpNdB9sVrPeP84WabT6St3nuSuEmjCVk3i8WG3iiYMzANz3FCClgTP8GPV1o0F6DwZuEPT65WD7QCzTtg+H2hoCfYzxA054YQAyB\/Fd6A\/O7kMmZOnj1IM+KS3Hto\/bQ61thNrtMIbfv5SN5lB8Yxhcj1vI2y7VVMSGVsHUFfZSrWfxDtBwHJK0MNiSnvxEh7XVpEV2JHVqe4r7x2AvtzNFqsJifUeBf2FpF8SVJNfbjjZ28wh\/EyimDLuT5AgnbQwkuzWoJHaVH1y\/umoiNIlxKcXVuO+hpHdp8yL2nvOQCpoe7oM6r+3BpXnvoNVUwYYvp3AXk\/oJBBj1azb5sXv2THgMssnVZYMmgEEJp\/V2ijWJ4kweV6s1cmUJCWvIAEz9Nhve8k9jilJCS7cx3ETs3GV6zD+NHzuXYE9L\/w9o1m+E181dM\/H\/p2JZyG98fu4I5u87hxR+3w2d6Mqqsues41jK3h\/uiElJbRNS\/VQRUBGQi8JcT0tLUOWhNCGnnz3CbLGaWXsKsCJKiGIIuE\/6Ff\/3L\/t\/kRcdt9v1Zt7b00ixE6ChoQrpggsjz\/\/rXZCw6zkW6UgNNaSrmtCaEtDM+YwUj5CYZoysz0FSNxzY+eC\/Yj5fraKEJicNWYawpUa5UcPXEOCjES6p+E4IKB+OyYmStNsFfDggpCrF5XAAYSo\/uX6dzz0jITeKFizPYCQ9NjZewj+cVfE1FO5AQogGla4d514qROse0Ah8+46LErHApLs2KgI7SIKTLBFHb\/NfkRTheWGouy3aFlxx8InqoUbkRUrkyEhCMyNo7DV2rkH3TNHRBrTDmo19x2xYnHi\/zp5I6pAmFnc3z5RduwYQgBkwleYQUhZsxLoABpe+Or7m9xXZ2XnIRM8gEk6YGXrI3BOxICIGG0qHdvGucFEbcW9wbXrQGtf61zzRBYbyLhd3c4NJ+Hq6SVQe5fY\/0EzYzw3Z1lwSOSldIJWxdwt9ArI\/yOIt9ipbjgJCWwYac9zeTgHa6NMutzA7JY8W5t3Du8C5sXvsLli6ahM4GGztTSEjl+xd+mUp8orJ89PSk\/ZkgI+dZCdsD8XetWULa+bPbLCFVikvp1blop6fh2vULNg4gGQotXU2TQaWXSfaJBqGJO1hy9HhDLAJdbDKSxCYLWDuxl81sPqJfJNoo2i+IDxCJE0TLtf3ROSEt\/l8+LtzOwLZLd\/DzqfPoNVcBIS3JwpQv1sNr5j7M\/4\/pZF87Qmr8L+Z9ux5eM7ah98ZzeH27\/b+3T2U7jLVsWwWVkNpBov6gIqAiIA+Bp4CQfmBNSEvO4r1mJK02ArOFKbDy2sPeVXL2PTTTUdBFzIbTIhwMNB\/YElKU4uaqODTy0iGo9ShMfvsNjOsYAhdDC7y0kZsZ5uWUKFcquCpNfUIcFOIlVb9JbOWDcZkw4rGy+3RMSJPJiiHthgHLzbMC4iu7hJCem4bmZHJCjJAWbmNfuUFWwT+7XYyz7zVlU8KbvX9WgpCW4Ox7zdh7Iqxm520bwAfwOjR9zza93Dkhtc4sU7pCKldGi8zG7NNY\/tZzqOejAU32efdaiEuCxX7Lnfw3ZXVI2ZydzfPFF25VSEiTMcqXAe02ALxJ2NVZcg7TmksR0kJsI6\/iofTo8tltXgoYs35CjC8DTY2J2FNIDhj7Hv293NB5\/k3TyozcvsdPNuia4j1+qwBfy59ASO37KF+5yKeo3+LtWfx8AFLKk9mQs\/5mks9Ol2axFdhh0VX8nBiBQJ0OfvW6IGbci3htyhi08ikjIZXtX7itI6L4mohN2fVkAka5LsyAOtGjxPhACOkHNoRUKS6lVzGXpO169sV3GSUswXWt8yrY5ISSC5jWQgdN9Rexu7AQOxND4dp6js3YLl82S2vFvkmUU156M1fpgJCWPMKqzXtQc+Z6VP\/yAEZuOIt3dp1CF5KyK3eFtCQTkxckw2vWQXz7SIKQlj7ErG8Iad2DjzL519GYBXyyLyohfTLc1KdUBFQE8PQRUvbl2y6gmSCM28Sl6ChUlPH+QnRzocEEjYPTIhQPNEakb0xCt+dexYxZH2LBD1twLkMkepcoVyq4sgvO5eIg9z4OQ6n6TZfLazCWiZGkXh0Q0tLr+Ki9DpS2Ed42H1IhITcJlDMWs\/sRaYNIym7eMnY\/F7GTzQVG3FvYDS40A9+hq6z2VFrENOI+d0\/QuE2m1wRZLgq+GZE2vzP0FIOA2A029zkgpE3JinwPfJMh2PcMpYRUrowCcbmvxXd34LWWnqC1tfHKAcHGSbtbldUhZXN2Ns\/Xo5CQll7\/CO11FLSN3jYfQGZXpzEDi3u5gaYNIim7eVhG9k4Tn7NZmNedh\/WxQWA0VZH0awFyVw6Fr0c3LOQzJuT2PWMa5nfWg2ICELvBxqf9TQgprzolNuS8v5lKtdMlXxnk2qERdxf3hjetQcjI1TCf08JlSFitxCtcIZXvXzihJcYFstJWXoSUh0e+LvgnLJ\/iz0r5WXtCqhgXcGm7jAFDfj6JD9u6oc6rB7mtEyU4\/W4T6LS18fLuvZhU1w2t56QK0nWJ3PJls7RS7JtEOeWlN3OVUoT0D\/x++jCCpycjbN1dy1kVJel4SUHKrvHxLQyanQyfBWdxgAtP7FdI\/4fFyzbAa8ZWPH9FJIYxy6rgi0pIFYCl3qoioCIgRKBcCem5ac3ZtJ1Ikb0aJKhwJ3vvJh+2OlCEpO2xBwV1\/gxpbBxeggszWkJHMwiMWWZ1bLlQcIffSy6w6Xk0E4iYZTYrl7YPkoHGnew3tTnUiE+zIym7JsHYJ41ZqzGiij9GrxcGrraFshufRMstfxyU4SVVv6kFZDAmLz6vi8n8u2rIhYrCSAQ200\/ShLTk4my0dqGha\/Q2LAc6SshNCiu9gnntXUFramAiWeYS\/Je\/MwnVNAyCRq5l9wSXXJyJluQVHIYe+PKa+ABdcoGkANNgAmOwTHimvqBc8rX4yGsI01JgKg\/FCvMrasgVnpAaMDJZIA85cIukquuaYKrVoT08Ia2GF3Zbcmkd6VGujMaMq7iaLSS\/Rtz5PBJ6JhDjNgtks2kb+VNuHeReKVnt+z5XUeEWjGdTdkfL2ENagouzW8OF1qHR25aTuu3rLMWVee3hSmtQY+Ie6zS0\/J1IqqYBEzQSay2bw1lh8ncmoqpGg9CE9Vg9tjK8e1lO\/iUni8vzVcU48loYtBSDykNXWIJMUgNPSA0jITQHDgmRDwlbV9hHRQo2\/SRaTgmkfHuZbEhGfyNC2evSIr08OyzCHnLoDqVDqzmCfYdmQjoa683mLt1WE+mx8Y8K\/AsrtSi+XOonSeu2GW8sLbX5JlJOWXQh71kJ22NTdsl2Bz06f5Zm2kOqFBcCAZu2yyCobww6eAj3bgPFx95Efa0WYQMGopF7a3yQKjhA0ASs+NglJpsNlNZ\/SrRRBG\/2OYk4wbpMsb9KsX3jVnhPX4\/oU8JXuZRi\/7Yd8Jm+Hl0O\/tdCugWEdLPTPaR\/IO3EIZbUNtmWad4DSghp4PT1aL7zP1wMZkTK\/j3sq2JqrrqN34VDgZjIcn4ruOnwPaSlOddx5lyak3eAy6lIvUdFQEXg74ZAORJSI+5\/3QOuNAOfTu9j9\/VMZN27jstppkNCshZHwYViEBy\/zSoYLD4xBQ20lNXR+8YH6zCmuhY07YF6MVOxZMthnL10Eaf2bsDSLz7GirPm6EFCH0Y8WDcG1bU0aI96iJm6BFsOn8Wli6ewd8NSfPHxCpiLyFqMKBcKTHC84KRFwihOYAo59VTXEjMs7wRAyZn30FRHw6N6a0T1j0Z0dDQGDBiImGET8ObXB\/GAHyclyq0IHJTgxddfecJWKz2YgMzC4igXUEww4i3HTgISbSkzRhLaI\/uZTIcaadHg9SPcgFqI+8e+xfgmnmBcwvD8FuEJzLzclTFhq61tGJG97XnU1TPw7TwN+9NNRLPg5ka8HO4JjV9PfJnKkU9jOtaPqwEdTcO1Vh9M+XYLjpxLwbnDW\/HL159g+fE8wPgA68ZUh5am4VEvBlOXbMHhs5dw8dRebFj6BT5ecdaEa2kq5keaXlFjCJ+AT9bsxYnTJ3Bgy4+Y3MkXDKVD2zmXBYcn5WNHQig0FIPAzpPx3bYjOHXqKHav+wbPtyKH8Xii+xc3zZM5DvUoU8bCTeNRJ+Il86uVkJ+CL\/r4Qxs4FCusVmlFFCWzDvIkL6ucvs\/W9HglhpCTlD0GYjn\/rgf+UCNtA7x+hJsMKryPY9+ORxNPBi5hz2OL4NhjsTqN2dvwfF09GN\/OmLY\/3ZSWXXATG18Oh6fGDz2\/TLVP1S46hEl1tdBWa4WIEAOe+4F\/Z6UJE7l9rzR1PiLZ19MYED7hE6zZewKnTxzAlh8no5MvA0rXFnMuWyYcRBDnfuJtvWx9VLJ80b4u7dvLZsVDMscAACAASURBVEMy+pvAfkR9liw7NOL2wh7wpGnoagzA3A1HcfbUXiQvfpXFnnaNxPybfEaAdFsBMewV+BcCuii+0uONEj2VRRfynhVrP5GwGCemNICW0qGlef+9QlxIMaVXMLctOW1XD3O6Lg9A8SFMqqMFo9PBrc0HsOOjorqRko0vVOxToo3lpTdzlf+H1as2wWv6enQ7ZHk1C\/AH7pw4hMrTk+G74Cjmp2bj\/L1MbDp9HlHsIUUH8CX36jIyIbZuzUZ2D+hEfgK1pBBnz59Fl7nJ8P3sJJL\/a0nF\/c\/pQ\/Cbnoy6mx6Yx37jo9+R+Nl6eE3fiPBVl7D06n9wPjMPZ27ew8\/Hr2KNOaAxC+7wS2nOVfSYmQyvD45h5f9sbi0+hNfIq\/tod3SYJ5gYsrlN\/VNFQEXgn4lAORJSkh65BS83M7AvrKdpPQJajsM3J3OQf\/wT9KqmB01RYDwbYMzyq+zMn\/HeJkyKIO8hpUBrAtH+nZ1mLRSkrsTkqDAYdOQF9RQomoZLYAsMmbkdt8UXr8zPmr4UIHXlZESFGSwvyKZdENhiCGZuv20KPPOP45Ne1aCnKVCMJxqMWW46rMR4D5smRbDvIaVoDQLbv4OdbIBeiqwzCzGsRUO0atMGbfh\/LRujqrcGNGNA\/+\/uAxLlViQOcvAS1k+710bv97aZ3\/MI5OP4J71QTU\/wZuDZYAyWk5NbJNqCsmJkoy3rP3lCysArtA5CfA0weLlAQ+vh13ggpm1NExAHodw03Gv3xnvb7gmOsCclF+PGhrfRt74BOr03Air7wUPvhRqRL+D7szzj4SQoTMXKSd1Ry0vL2itF0dD7NcaAqRtwnecLBalYOTkKYQZyGBAFcg\/tEogWQ2Ziu8A4S+9tx9SomvDQ0Kz96gxh6DN1PVa\/HAYXrxA07jwKC8\/wgTBgvLcZk9sFmeyRZuDi1xiDPtiBn+JD4OJTDc26xuG7SyVW\/clej1w7ZMhYtCMRoToatKsfaoTVRajBC4EthuGjA5k2+Flrx\/yXjDqENues77NdrOQiFsXUgRvpk7QrakUvNFXHE1LGC6F1QuBrMMDLhZwQ7IfGA6dha5rFKYjVyctcfGMD3u5bHwadHt4BleHnoYdXjUi88P1ZiTTtEpwm71emKTC+MfhZQHr5MuX0PfLaqnvbpyKqpgfnH3UwhPXB1PWr8XKYC7xCGqPzqIUQmANfvOBTaOtl6aOCIoVfpfo6m\/ou7tvLbENO+ptQl2WxdRRcwJIxTWBg+6IGHiEd8dLPOzA30hNkrApq\/w528+8oFh3H7or7RxY\/mf5FCl9JXypUjuC7RDll0YXzZyVsD0bc2zQJEeQ9pBQNTWB7vLMzgxNWJi7mppXiyty20NNaQbouf5G8vqUGOwa0+cA2XfdJZOPLFX5KlCOBt\/QYKCxT5LsxH5t\/PYj6s5LhNT0ZPh\/tQdKZh5YxrTgPS9fvYt87Sq4Hfbofr51Px\/ylG1kCW+v7FOwrIESTENLNCF2wF1Hf7kD1uZsRPDsZXjM3I\/zni9j4H352HMi\/ew0DWeKZDO8P\/o3Ec\/z5C0BB1l28\/dOvCCVEcrrpn9\/HuxG7\/wHuWIoQaYj1TyXpt\/DCt1tgYMvYgHpLz2NjjoUQo3Ar4iozoGgdmk\/j39dtXYb6l4qAisA\/F4FyJaQmGIuRe\/sabmYJ01CeHOCSh\/dwNeUiLt\/MQP4TpZSU4OG9q0i5eBk3M\/LlBdqi4hbj0lf9EBLUH0vS7L10wZ6JqKnRouFbJ0WfLuuPcnGQe19Z5RF\/vrww4gkpeQ\/pKRQ+TseNy5dw7X6eZdAWF8DJr5wtpFzB7RyeXUo8UpSD26kpuHTtPh7Zq9v0UMlD3LuagouXbyJD0jiNyE+\/jsvXM1DA2W9BThYeS5WJEjxOv4GraTnm1dD87KwntH0SsziWsTQ\/E7dSL+L8+Uu48aT9w0kdEggr+5knpOQ9pKcKWYwuX7qG+3kWIqqkQFM\/ScGV2zmCVWrxEkyvp2EQFLtegrSanpPV94z5SL9+GdczCjhfVICcrMeW1DxxEZ6SX8V9e7nYkJz+5gwFGXZYnHsb12\/nmvsW8h\/g2vUM84qRpQrxtlqui31T4F\/EHi+H38qii7I861j0vx4Xx\/I9nVfJKbs3HhZbbLX4f\/gtu9DKVh\/\/r5gbE\/9AweN8XMl8hN\/\/90SBEkr+9z9cy8jDlZzCJx9vHEJpRE7KTqxZfxhpTnY8OSxGvagioCLwt0SgAgjp3xInclwr3m+mg7b+GzhmWdTiGmtE5sqhCNRVQ8J2y8zj3xQJ6WaVG0ZGpH\/dw\/Qe0ndOlZGESourXnmGEDCm4+sepveQWr3vt4KaUFqQjyIursvdMBYh+jBMPmSbDl5BlavFqgioCKgIqAioCKgIqAj8gxBQCalcZRuzsGZkFTCMAS0TvsSmw+eQeu0qLh7fgWWzYtHCPwDt39mNzCebnJQrxdN9X7lhxL87ToOqSb9azQg\/3QCo0lUYAvz7\/tgTbyuWGBbs+hfquLqg9rAvsGPXdxhX3xN14jf+s\/t2hSlWLVhFQEVARUBFQEVAReCfjoBKSJVYwKMUrJk2DlER9VCtSgACKoeiTrNOiI6fhqVHuUNSlJT3d7y3HDB6eGAWetYNgF+lSvALaYaYD\/fB6jDYvyNuapscIPAQB2b1RN0AP1Sq5IeQZjH4cF92GdLvHVRFspxTf8C4NnUQUiUUdVv2QvzHu3D3yTKDHVekXlURUBFQEVARUBFQEVARUBEoz\/eQqmiqCKgIqAioCKgIqAioCKgIqAioCKgIqAioCMhHQF0hlY+VeqeKgIqAioCKgIqAioCKgIqAioCKgIqAikA5IqAS0nIEUy1KRUBFQEVARUBFQEVARUBFQEVARUBFQEVAPgIqIZWPlXqnioCKgIqAioCKgIqAioCKgIqAioCKgIpAOSKgEtJyBFMtSkVARUBFQEVARUBFQEVARUBFQEVARUBFQD4CzyYhzUsC1H8qBqoNqDag2oBqA6oNqDag2oBqA6oNqDag2kDF24B8fqn4zn8GIc0Zhxs7e+Crt1pi1amEileY2imeeYxLbo\/AyTWRmP96UyzZF\/\/Mt+fJJnDGI3VdJH7ZPAKF5W3Tvw\/FjsVdsfd83NONbfY43NrbG8vntMCbnw9EcXnj8FSXV4H6L3O7\/0TZniZb\/cvtMQG55wZg81dt8M5rkbiY\/U+dHFaIgxqDPN1+vsz+SEE\/eJr8yZ\/ZbrWuiukDFW1Ptr5LMc2U\/8AzSUiL97RDbN\/qiO7j7F8NTF01CkfeC0awlgKl8cHknX8muZiA4x+GIUYg64C+1TGwf02MGNUQb8\/uhpPXeIJsc2\/fmpi2dqwDA07A9cWNEMNj0LcO5my23F+U0h+LJoWhXzt\/NKlnQNPmQejWuw5enNYbd3IUOM9\/pBNJwKVvwtDChwJFu2LML085aaogHZWebY32Ogq0WzV8f6s8bSYB12cEQU9RcI\/qjOwKkv\/JSLh1O0uOR2J8Uz0YioL\/8KjyJ+ZPcdsrTv\/WGD+Jnv482Z4uW\/3L7TFzEBYNNMCToqAJbYDdmWXX5ZPo\/y9\/RhEOE\/7CGMSRfqxjjgH9w7Bg1wSrmKPkeGe8GG2Js0a93QeZuY7KVK85ts2ny584llXV5dOPT0Xbk4jvks8vFd\/5TBLSwhV1EaBxRafEtlj6fQ+s+6EFuhPyoPXDi1\/3wNofu+KbN6qjjp5B13mjgNzRWNiZ+QsIaRKQMRjTmjOgKAatEzvjl++64qcv22P6mCBU0VLQBVXFl0c5kszdyxhc4UtT8OrRCfelnH\/2IExrwqBSJRIs0wh7vj8ec8Ft0aG26O5Hw71WNbz9STdsWtsLK+Y0RMdABtraTXA4S3U0zh1NHFYP1IH+BxNSYrtLJtTAsJe740Y5T2IUHu6EF56rhTd+HIHSp5iUETsp+LEWvMtCSLOGYedXvZH6rAXvZdB\/8ek++HHNUBRVlG7LIJvzvm\/tHyVt9S\/S619ujzc6oZf+b0BIy6o\/JTj8lTGIoz4oiE\/C3xwkMuGWgLSPQ0wTEFXrYdtt676htC+p9ydB0p840pN6zWqipGLsKB5Xk7tg28k\/c9Gq7P2pwu3J1ncpppnyH3gmCWnR+qZ4blI\/5PBkLaMXJgRQoHShWHSdV3A8Uj6uhQkLY4G8OKx4Tgv6T18hJbLE4Zf+WtCUFoO+E660TcDBFw3QURQqRXflVolM9+ojaiImhAbtWgWfnedXUPl2mT6L\/90U9Vz9MLi\/D7QUg+6fxsLIOq2x+Km\/HozWF2\/vte5YRWe7IWlgBE6qhFSGc4vD9jHuYP7JhFQdBFk7KVxbD1XoJ18hfbQiDMGuofj2hnUfrphB9WmoYzw2jXSHW7dOyPob29Bfpde\/3B4fdMNgj2efkJZZf4pw+CtjEEc+wRKfxCwRxieWZ4rW10coQ0HXpk25T0z+fX2gBT+1jc8IFr9HYVxlDXp9PkZGfPiMtKlcxl8b3yWfXyq+85kkpHYdXJSQCg3GBtC8RBRcG4oTuwbhZpo1abMuOx6Zpwfi0Nb+OH4iFgVPpFyubjtCmoSirY1Qi6Ggqd4I+9nVE9O9+o5tsOYFE9GMeHcISuzqjcOuCZ7waNsKq\/5lYAlpz\/kcIc0agDfq0qD11fBDuc5mJiI\/dQiOb+uPA3uHIVuC1BrvjUbKrv7Ys\/k5nDw+Erl29yXiceoQHNvaD3t3DMSli+Ns9uUl4lHKSGSK7E0qvjUSd28nWjuLjFikXTWlGRXfGIoTe0fgIT9RweOWOQZX9z2H\/dsG4PI18UGX1Xv2WNw8GI0DOwbiym\/jykxIC38biQf3iR0m4PGVITj+7xhcv+Gg\/rx4ZJ2JweGt\/XH0yCg8sm0H3x6Zn7b1H9sxAJes2p+AR6lDcGRrNM5fGCdiZ0T2eGReGG0vS+4E3Ds2APs39cOhvUNw+7Z9P3JqC5ljkJY6nptIsfRXW7md4VacNgKnd\/TH4QMjBHaZgEfXRiHzgaVc677t6PcE5JwfhCPbnsOpU7F4uLYegqUIKYfDgS39cfLMWBtbTgLuDMD0VjowumB8ejIW6ddikf7bGOQJV0udlSFT3+b2Sdl7ThxyfuNkuBaLjNu8Lcbj4XUJ2ST070i3ebvC0c6Lgr5TW6SS9pK6ro8XrJY68wGOdCO8JmGbAp9QSvzR7micOTtGZPVHWJaT77a2KkOvjjAy60qWbhXYY54TPy1Dbjgr40E3DBES0pwJuH9sAA7tHoZMoV0L2ybTxmVhJmXfwvqcfZeDgzOZFeFgG4PY2pucWKO8+o2wbun4hLfRok0NUI0Q0rZtcFMsUyZzDK7tj8b+rdG4kGLjzzPGIYPzAem\/jbPpg3F4+FssMm5NsB57ssYji\/NTxEeZJto5maV0nxuHXIFve5ghaKPgGvFDfLtMn3Jwj0PGhVjkE5vKGoPUPQNxwzYOcWZvttdt\/Ql3XenYZ90WQZsF9cnqU3JjD1vfuus5HDsea6XX0t9HI+XX\/jhyeCQeisRxvMxF14fh1I7+OLB7KNKfaJy2bm\/RjeE482t\/7CNx5ZUJ1naTlwTjfTIW9Me+bQNx7ZZtvDIex94KhDfNoOvsoaZx+losMu\/Y3ifHXpIgPyaRG\/M5sUEJe2KxzhyD6weisX\/LczhxfDTybeNKZ37OdkFPMc2U\/8A\/jJB64\/mFXTCxlRu7MklRFGitGzq82hvpVkpKRObW1hjcQA9XDzeEVtZDT9PwbRSG74\/xQZx1Z+A7mf2ntMMvOdACTbRkprkhtxeHJ6TtcPNAOJppKWjrN7df0fw9CmODdIiaPwJHX7EhpDnDMK8VA5p2Qe9Ph9kHyAJHZS+reJtKU3vj\/e7e8GQoEMzIP\/eqIZiazK\/KJgG5Y7BvajXU8dajVovKaF3LhcU4cFQvs7My3uiP2VHe8DF4oVXbANQ1EDldMX5VHJAzEhvfqIUuYa5wdRGuJsXjzIL66NfCEz46T7y4yeQg8ne3R1x3f4R6MGj2UlcsjvVHJbJPmNIi8oMRpkEndwz2z6iJxgYNPAM8EOzDgNHo0XRkZ6QIHWDuOJz4pC4i\/BnQjBYBVb1QPdgTIb4m+ZTtIZ2A4x\/XQ+9mHvDUV8KkxR0R39zVYm8unugxpa\/NPpwE3N8YgZh6eug93FE3zAchXgzcgqvgle+HmfGTpy8n9Wvd0PnN3ji9siViwvTQcvqkGT3qx3TEeR6X+wPx1ZiqaBmqg94qzTsRWVsi0K+mHr41AtAx3JvFnfEPwxY+CHBiC\/l7OiC+hz+qeTEImxjN2agTucVwyx6BtUmVEeymR\/WmAQivoYdXkAHNGngj2JNhMyJe\/7ftgCJu4yZsE5G7pwPGNneFnqLh4eeJWlU9UK2KC7vf1XoPaQLurQtH7xpaaDgMie1Vj2yBnde4SZOM\/ni7mSv0bL+h4eKuhQf55+mFF5KJXDLKUNJfndn779GY2c7VJC+tR8cZg02BYPYQfNbJhd0n616nLn4+mwBI6d+Jbgu3Nkd4JYatg9Ywpva6a+FVowF2ZibBoQ+Q21YJ2ax8wouRWDTGH\/6sTyB+QYNqkeHYfd1mQstJnaK26kyvTjCS14+JnSqxxyQ49dPO5M6TUQbBiydiIWH45utGaEf8JtcH9IFBeG3FKEEavkwbl4OZM\/t2oksz7k5xkCmzIhy4OMAuS0terFEu\/UYUH+n4hMdLkpDmjMaud2ugoQ8DzyBvNKjtDm+tBqEdGmPlKVOcVHKwNTqQ7VQUBc\/m4TglmLAo2dscjTQUGENNrEiz+OXSc53Q35+c36BDm7cHmsY\/Z7q\/F42pzUkmGgXGpzI+OizILHsQjfe4awFd23OEVAbu9wdgYWwowoO1cGncBL8sqIdwErOQ+Kdj2ydaLRb1J3lPMPaJ6tKCIas7OX0qT17s4di3MghqH47t+6Mwo78BPhqTvimKhk\/dWvjmsHXMbLzeH\/OifeHrokVQsDsMOgpaQyWM+3LIEy36FJ7ugbd6+sDP1xPNmxsQ5EKBpnVo9Hxv5BKcckZjx5uhqO1Bm\/0U7eaJHq\/34eL+OOyf5A9\/nem6Vs+N0+461JrQR769kLpkxyTycIcTG7z4b7FYirODjGFYN6kq6vm6oEYTfzQI0LDt96rfGNvZxSqZfk4lpE4YtW1nlLtCyrgh6q0eOHx0BNLOD8HBRY3R3kAOOzJgyh5L4Fq4PwLtvDRoOKYHbrAONB5py+shTEvBtXlLnHMw68M7ccuntMN\/+GMtVKIpuEd2wD2WEJvu1XdshztZwzCXEEuNN17eat2hs5fUhJ+hBn66Ho\/jtoQ0LwFpX1RDAE3Itjs6vRCJc2WazUtA2tYe2LpnGO5cH4vsS4Ox\/tUgGGgKuuYtzacsFm5uiJoaDTrMGGoiGLljcWJOdbQcyxPSOOxN8ILWJQjzuBx9Y9pAzO\/rjwRCSPOS8Ph4W3T3pkDphYQ0CaU3+mNSAwYUYyGkyI7FjjhCxmlU7hqO1VuisXNBE8RE1sLH\/yYrpnE4PTUQ3i4GxC8bYVqdyRqJ5Fgf6CgNIt4ZxM3KJuDy3GBUomkEd4vAros81vFPvEJacq03XqxLg3Jgb28J0qkf\/9oc4W40\/DpF4FiaKWA23h6IuZ1dwGi9kbRmrN1sn8W+bAahvCRY6ndHv2m9cfLkCNwW2DuZBOg7ox8unB+NzN9G4eKm9hhVhwy0OvReMJqrKwHp6xqivoay3nec0Q8vVafh2qY1UtnV70Tk7GmLAc3rmwmpU1sQ6M5CSIVyS\/dTC24JSJkeCA9aj6iPuImX7BFYHOUCjVdlzN07GtcPD8bNO\/IJSMmJduhuoKCtHIpZG0eaJwKKxFZIc0Zi\/7JeOHFqFDLTxuLu4Z6Y0obs52bQ8m1BVkN2DKY2ZOxsmtWf3DJs\/Z3o3zLt\/XeyYqtnU9GjF44y6To3FisGusG1dn1svsrjJa5\/p7ol9sdNtLnYpew69wGO7NpyTVw2oU8I6hqO5J1DcOPCCKRsj8Sk1oRw02g4SeFJyRK2Cgd6lYORpS32\/Ze\/psgeid+X4acdyU0mSGSVwRExplIIZqweiNTzI3HjYB8sTgiEH0OB8Q7G56c5QiDTxp1jJtO+RfuGCMYO9EcmR2X1bSU42AZ1nJzyYo3y6jciOPByiWRw8XYoTkgn4Mhr\/nBnXND1vQHc9qlEPNzbGt18Kehq1se2W8SXJOD8W\/7QUTSqx\/cTZEkk4MzrlaBz0cCVccGIpYKVy5xhmBvBQNegOU6xY4w83Rf92hT1NBT73GmrGC0e+xI8oXWrjE\/PmOxSHu4WP6MJDMX7P\/bH4eSOeK1\/CIbOjDaf2cHjJOtTwp9Yxmw5Y5+YHu1\/c96nkiA79hDIXSWqFbbtHYpbF4W+lYJ\/z9bYe2QE7l+PxZ2jffHlEB+4UBS8unfk4ltypkoMZrfSwbVePaw7Z4q5iy\/0QFxtBrSLP2YeEkwkyOjLpee7YFAVBobW4TjExrmJyN4WjsgqrmjGEdLSC\/2xdvVAXEkZg5xbo3D+p2bsJAmt9ceMo3x9nD1SjGjKrlx7kRuTyMY9z4kNCvQijKWQMwJLn3OHzicI03aMY8d5463+mNbRHYGNOUIq18\/xPoKfTHNCz8py+R+2Qmp7ym489sZ7QkNp0G\/hOG5VLRZL++qh8amB5Tf44IzMsgzF7BYMKG0lTD3AG7G9E7B3SuKEtPRaX7xGZu20XkhYzZ+OKyCkuYm4\/XEwPCgaIbG9LM4vdzSW9NSj8rCeyMsTI6RktXIsjs6piTAP00yVPigIiZ9EI0Ms3UZGp7dr0\/3uGOZNgQmsh23sqlgi7sytAj3tguE\/CgaWvAQUZXBY5Y7C5x0ZMIZaWH1HgFtOPAr5wSNrAN4Mo0WCd+6AISEhzUvCo0XV4UYOdDKvslnKNV7rggE+NAz9I5ElWP0uPRGBVuQwqUYtcIbUe6s7hvtRYAJqYZXV6smTE1LkjcfyPhqRPcu8vTGIWsDtU8gdhUXddKA1Bry5yzIpQjAv2NgA1RkKbh2UzsY6r7\/357zNEcwSkfl5KItlyLg+lqDh90hEu1oTUmNKO0TqKFSK6Y48ge2UZsZxBF+GLUjqzrncZtxyhmIO6Y+6EHzNr0jmJSF3YTW4UgxavTdUsEpjsQs7Wza3YSxWx7iCod0w\/IcxVhMAooTU\/Jyl7Pwfa8GHolA5treZzDomAJZneblEyxCpi7+f\/5Rt72QV7FxnPBdAgakUioUn4\/FgaR1U9Q7AtD3WJ2zCTv\/ydCtJSOX4ABltZdtsJ5sJSymfULS5IduXXLp2VLyvVbRMSUIjDyNeb9KfZbdH2PlpMoPvYIJEDHuxMviVQdtTdnNj8csAV3ZSpsnrMdZpmIKy7W3cOWZK7FsaU0F\/U4iDvcyClWJZOHBxAB\/UETxyZcYa5dlvBHow4cTHJwyqt6uFkYNr2\/0bHunDHmokTNk1pnRELy8K2rpNccxqW45pOxGJqbrMMWUqlZ5ujXY6CrrG4TjLj\/XZg\/B+YwZ1h9RFRxcKgcN64hEnm\/FaJ\/TxYNBq6hDWh8vWffYQzGzOwJpoJAGZz2FSLQZ+0V1NsYBc3Ik8En5Glo3ZYe3IRykY+yTKtZbJeZ+CwthD1A\/mJcHsW7t3sjox33i9E3q5UtBUqc9mx5A4I\/3r6jAwesQsEo6xCbg8NQA6ikFTB37Dun0Ey3HYMMIdGpFFG\/t7BX0\/bwJWD9SDpt0Qt4ZfgHBASOXai9yYRCHuzmxQTC+5P9dFMEOjdlJ\/Sywiw25E\/ZxKSJ1wbFtg5a6QCgcDtowEXHqXzN6ZTuNl9yrc6YYhPhS0terhh3VRWP1NRyyYFo4pz4ehSwgNitJhyA+8EQuNXOo77\/C1iFnQB5\/E1sRzkf6o4UXDLbgyXlo8xLQ3gZVHSEiTYPyNkCoSONbCam4\/aOn5doj08ETSeiKDBCHl8Ck83xsfDq4EXzZlkEHljs2x84oSMi3RpszeiK9MgfGtgw1cmiY7G8dQ0Fetimk\/DzMPLhbHYJrl1VAMqvcMx4ZTQuLK1SMZJMRh\/RA9GBtCWvBdDZawixHSvO9rwkDRqBvbGTtWdseyz9rhwynN8MroKqjKUKA9a2LVgyTkL68DP5qC76AeFtLP4lcWQioSfNjYW5cPudWp25EY6EmB9q6FtXy6LKc\/3OuKGHcKtEd1LFe0H9h5\/ZF8\/bytkJOraQp+w3paHNiDbhjkbk1Iwa2Q0jpP9J3SE1d+t7cR57aQBHHdOZfbjFv2QLxdn+yVroolgnSvx0tqwJNi0GjyQMmA2GKTAtnv98AoX5I+Vhtr7wl+JwOu2AopryPBJ3+fFYaSNm1dBy+TaBmCOvj7bD\/l2rvpuUQ8+CkMNbUUPBuHolMVV\/T8iMtsENYlon85upUkpHkyfICwfkffRWQjbRO3qySUHI9ASy0FfYd2uCOYoLLFUexv0TId6FUORmL1WP1WDvYIET+tmJCKlSFFSMlE0w\/E71Jw7dYJmRL6E7NxZ5gps2\/xvmWFrwP9Wd3HtUFMZnPqsi0hFcVBxLfJjjXKsd\/Y6YSTi2LQMLo53nujhd2\/d0cEmDKiBHtIcxfVgBdFwSemh12a5eNvybhMwbNvpGmSn6x4kmwvbSA+5N4DX3IkHOF6b7y6ZQjmtWagCQrDFva8hSTkLqkBgy4As0+YYhX5uk\/AtZlBcKEYNHuTz4BKQuGmhqih9UD8Gm7CTTbupkkHuzHQDkMZ9iZ4RtSf2Ab95vstMap57DNfc1yvsz4FhbGHuNwC30oy+4S+NSMKY8lkvzlOHI+VA\/Rs1l\/cwt7Y\/GMkFn3YCtNebYwJHTzYbR5eA7rZ2ZNYf2R\/u98ToytR0ATXx6+CVHDJ+8248bGdC2J\/5mN5B4RUrr3IjUkU4k78jCMbtNfLBKwf6gqG8UDSeutFDmfYiPo5W9t0Qs\/KcvkfvkKagNT3TDMznT8Yya6KlB6PAFIAQgAAIABJREFUQATZ11mlCiYkNsK\/7P41waLdvBE7dggm5fMO33TKrvFeLK4eGogzJ0fjsbDzsp3FdC+bssteG4c1g8iMsx7PLST7NRNw+b0AuNdugiNcKrF9yq6tTAlI39EesQ107B4xn\/ZtcImfpTR3UNtn7P8uvj0C53b2xeZlXbH0s8boTIiywUJIyR7SvVOC2VfZkFfcBLWoi4\/Wj7SstpFN5Tf6YVond3Y\/Jdm722p4a\/x6UdBhJIMEpYSUd+I0QjqEieiwEf41sSOOZ1j03\/g12xl93mk9yXtIRYIPFmtLfby9lRxtyQbKmmoNsc\/WqWb2RkIVGpQ2EPO4VCNnDsXK5kQmYGztnS+vcFUYgmgKlZwR0rxEZG0OR9cg014aXUAAxszog9tC2WXYgr0TJTYnHzcyO5o81I11uvFr+MmNOOxP8oaWcUfcapvVPie2XnqSWzlv0BzW6V6OCGk8cs8PwuGNUVi7pAsWvViZDdysMJS0ab6PySjDiewkLc40sebM3vk6yec47Bzvze4h1jePQIqYTxAbCGXoVpqQyvABTtvKtUFMNgeElOi3NSGk7dvitp3fFeJi\/13UVh3pVQZGfL+T+nwye0yCUz\/tSG4Oe6dlOCCkxdsbow5Jm4xojWvmjBwZNu4Qsyexb3s9WmHtFAcZMivCwd63KYk1nI6dcvuN3X2cXIpSdhNw8W1TGm6NhP5WYzzBuGhdfYSQQ5Bateb23yXg6vRA6CkNus4jcVYCUt71h2vNxjiYya2OMR5IXEfiqgnYMMwVLi0icJm1H2W6N15sj25uwrTdCezWG51gJVcJ7s7IgJVN2WErboOi\/kTR2Cderp0sDvtUEpTGHuJyJ0HSt3ILReY4MWcIZpFXIDLu6DJaLLZuhMmfDbBMiDvB0+wjm1m2jtlhwJeRNQ63DkVj18oe+OXrjpjUnmxbkUdI5duLvJhEKe7ObNBOL\/xKrVVKspTNyPBztrZZFsbp5FmVkL5vTUhLDrZgDxPSNecdopQi5f7u3OFbOpHpXgshTUL+2nrskevundsjLZOkW2nQ3Dz753iF1FIuWW3tjlEsufHFO\/sUrJJmDsPP4\/wRqGXgV6cKYkY2xGuv1kUrkrIrJKRsx09E9v5IvNXbBz5kFZJxQ6+PBfvpyD25Y3F6UTM8V0fPzohpAkKx8DgnjyBIWGz1igzlhPTsG5XYle+IqY5SNy2zYk3f+JMIqa29HQpHczIBIkZIM3ojPoi8zqgKPrsoSB\/nnazkp33wY7KFBKTa1M\/bSOFquYTUZPfGWzFYPqka6nmTgwBoBHVrbzPR4dgW7Jwo2xZlcpee74a4+joQUjxqYnO8MbIyQvR6tEiIwl2FpIMnUeZUbgG2\/Kyh8FCjotNdkUgOq9K6oF6HGhgX1wRThgfAx5bUC2za9rUvsssQyMLry\/ozAfLs3eKzjDd644U6OvgatGA0nhj1I7932HKP9EDoWLc8lvZ7SLmyHfkAp23lylBMSFv9eYSUbYNjjKz1J8Ccaz+PoVx7hFw\/7cAeZZfhgIiR9L0aJFOmSwc8yE2CMhuXwky5fTvD19FKsWyZFeAgNtmmONYoj35j17+cxyf2e0gTcG6KH7svVIyQFq4xvSZL36EtR0iTwKftevbsjIzsoZgTrkGdF55jySxZLW2hpVE9ri8KM\/ogMViD1uYtFwp1nxuL73pyW2B2xwPsAZAatHnfEgcowl3Czzi1LzucLX28PMY++fVL9akklCiMPcTlJoRUwrfaEtLsQXivMdn25m9e\/ZbfDgt+\/DNEj03J9ithKrgd7vG4+m199sBKna8PuvQPw4svNcOYFvIJqRJ7kROTKMVdehw2YWKnF4JzI9P2wvcPSsf6sv2cSkid0GhboytDyq5tgG680h7d9GRPYRg2cSkkfAd4sk\/nDt9SruleISEl+x9erUlSEwMxe1FjhLkHYR5\/YISTlF1LucRwx+K7HqbZqUT2hE\/7Dm59P7meiLsLQuFN9rEO7s4GGOw93MqdPSHly4zH3XVN0NKDgrZGYxyw2mPC3ZM1Cjte8ocnRaP28\/1NByGRYIl0JF0IvvlNSMCUEtJE3P84mN1QHzQySpASzcvHfyYibU5l9gTVgGE9be6roBVSG0Jo\/K0ju8+C9hFJ2b1j2sNJbHGzbTqvbR+w+lsZsSM6VUpIeVspvtTbtBda441XtglWu83yiNuCnRNl71cut\/FaFJI6V8Orb0fgww87Y8uhWGWpupycxgtt0VlHgfGrgw02\/d6OkOaOwuLuOtCMO0b+aDlpml8ZkLVCqqQMM5a83dp+yrV37rmcUfhloAcMrSJw6lhH9CVpVX5Vsch2Fd5pMCauW55MSRJSvj1iPoC\/5uxTQjZxu3IQNDmrR2rV1RGxsypTHCO+\/0h9KrJHJX5aUm4Fvl6SiJG96FXZveg1yAE2T2zjtpgptG8r\/G37Cve3FA5KZJaLAyuPvW974lijLP3GDhtOLkUrpInIWEDOHKBgEEnZzfuGnO1AgYy9Zvvm0nYZn5r4eW8rtHX1xqvbufEiOwbvNmSgrdEIuzc3Rl3XAMw5yQfSynWf9W0N+NI0wl6KRubS2gjwCsU3KZZ4QhHuEn7G3C47PCXsTXCfuI+ytw9THdKTyMpksO1TZJFCWewhLrcD32pLSHNHY2Fn8uYCN4xboSyDSaytxlQuVjfUwirhuSQCrI2XOqK3F8l4rI3V5gP74rFjrDs0MldIFdkLyQR0EpMoxV0xITXjrMfQH\/jsMRu7VOLnVEKqnJCODyArSSFYZHUwDa8EvrN7Y\/JOYdBsn0KJ7MGYQTbG066I+Ybb5ycwcLGO4fg35w7f8rzpXrLPyZJWloDTr5lW+6pV94B3ZAfBtXgc407Z7cG9h9R4pTtmTO\/PnXrHt58cZjEY05qSk8yq4LPzvLMXXBdtYzz2sIc+2RwSIyCk67lDjTJOD0O2cFWKP4jBPwybyT25sbh62vq0WP6AnMCRUaY0DXJwFEnpIAdH7RfKaCGkL3CvfSGYEQfpTvaJihxqVHLElArL+NfAskuWwciCtantxb82QRg5ej6wFlYIDsch+3O3j3EHQ+sxcrmSFG1SrgJ7I6\/paa0BzXhi4ibrevKT67Pvfwsa3AM5ovqR0p+C+rlyzSm7Q232kLqR\/dRNcJibVDD+NgxX2dMT+br5wxNcMW4lkT8RTm1BUncK5c4dg9WD3OE\/tKf8fSdSOGZF47XaNCjaDUO\/s5BMYi88ITUM7mGy08x+mFiVpFIHYA63z4m9j0tVqyTEMHsQpjUhkyxVsEAQFEFJGVIyC36Xa+\/Eri99GAw\/n8qYd4T4wkTcW1oH1TQUfNq0whluTzjbT0gwZqV\/ebrlZ4CtJtaIrHJ8gKBNtn3V6m872Uz2KOUT+PQukrKbJvRTMuoTLVNKrzLt36otYjIoscc8uX6ajAMS9qikDCkiljMCCyPJRI0XXtocB\/k27tyu5Ns375ecfErhoKRfysWB1a+Ib5Mba8jpNzljcf3AIKT9Lj3WidscJ5cjQrqxAXvugq6N5T2kpadao72LKbNnj9Bn5E3AzvGe0NBuGLlMeHAel7ZLu6Fv\/yB4sOm6vI64OEbjgwH9fOEe3gqp5nTvJCjW\/e0eGOVPxq0GeGegKwIHdrM6bEdRjCfhZwiWRWmxyM5QirdU3CJiH6zdiMSoYv7C7jfnfQoKYw9RP0gOyeO2u9j51oxeIHG5ZeEiARfYVG8Kgf0jFWcx2dkvf4gVrUePj4aJTkQXbTIdZqczp4ATm7MQ0tE\/8TEXv+rPwPZ8DUX2IicmUYg7S0itxmG+35g+7fWSgIvv+LMLLYbI9rgmth1HiZ+zjWed0LOyXP57pOze6YoYT4rdazfXdpaf7ahjsLgrA4p2R7z5VC2TYZ541fQeT8urGhLxYFldVNdQoN19EPN6J2zZOQiXjg7E3p+74IuZ3XDWygFbG4ddp8nj6qYY8KTR\/h6+DNO95HUqwj1dpSdaoY2OvJdLjwFfC4PleOyeQDaDM2g3Yzh7Il3puTbooHdB+4ndkMK97qX41hCsezkIlRgGYRN6WxNHO0fGy0I+yUm\/IaYT9qpVx9yfo3F2Xz8kL2iMTgaKJbfzz5OgNg6bRnkjIoF\/TU4S8o+1R59KNDsYZJAAMCMK42v64yX+FSx5E5Ayryr8Na4CAjABO8aaNrcHtm+C79ZE49S+aOxe1hHPt9CBprToPm+E+d2qWQtC2VXQyqP5V8sIZM+NxbrhnuweOY86NTD18144fHAILu7rhw1ft8fH3w0yk+D5HcnrOigYmoXhk6X9cGL\/QBxY1QWT25le49H2vaF2+2SkdUhkUGZv2WsaoK6Ogm\/7cOy\/ZiLiBeej8HIzLTS+IfjSPFssaJ9DvSmp31Tm4+9rwpui4NEv0nJ67o2OiCLZApX505STULgiDHWaNzQf2Y77Q\/BFD1do\/WthBbuqLcMW8pLA6y54jOBEWkW4mU4MJakptLsnWnethug+1RHdtzoG9q+FCa90wMGrwkkNZ9glIHVOFTbllvHxx4RZ3bF3TwxObOuFHydWhi95zVFEBC6TvbK5I7EwkrzzjkGNvq2x4d+DcGpzDyx+wXSfa8e2uMlnBeSOxteRGtC0Hp3e7Ivr18fg3tmhSLtFgneZZTjUNdcuWfaeiPS1DdHElUHLtwab+xFJo984kvQ7DRrGCd7JbKd\/ebo1XumAHi7k9R+V8f6m4ci8MRrXT4xE7gM5PsCZnrjrdrKZfhe3qyQU72mGBmRvo+BVVY77sEUO0TKl9HpbHkbO61Zgj7L9NLFdCXu8nSDT1wtOl61SD9u4A8CKr8fg5wRy+A2D6kO7m17zILufyMBMln1bdOYUXykclPRLnpA6w0EyBpEZazgdO+Nx6CXyOjMK7m1ac3sv5WJhiU+iPuNOfrfxNwU\/mQ7+0zUJt7zyLncsto33hp7Wo\/OU\/khng9443PylEcI9aPhFtkeqTSBMSGxbctquzpKuy+upeAe391hrnV7LXles+wnYOoasgOlh8PFEUrLtapxM3AkOvJ8JDMNWQdxXvL0p6usp6ELqYp3oIog0\/qL+ROnYZ6MjHkfLp4w+lZcIJbGHuNwOfOu9bhjiReLoGljOrWAar\/bAmKpkm48W9fq3wJJV0Th7fAhObe6JpfPaYMVBniBK42dpYyLSfwpDDS2JRb3Q59VO2PLrIKQcisbWJR3wyaIByL3YHj08yCsQPTFgek8cPTgQe5d3xKtsbKdB5Bw+nkzE\/U9D4EoO6moXjt1nxyArdTguXyBv31BgL9kxbLqs45hEGe5SNsjjIKYX47WeGFeNnPOhQa0ezfDtqmicOzYIh1d3xdezInH8toIYxtY2y8I4nTz7zBPS0gs98XonD5aYkBfx+jeviyXClyKTlw7PCkU1QujIyW9hdbGcTXlNxL0VjRFB3kNKUdD4B+Gd5FguxSQOqd83QVRtPevkyXUSfAY2rYmZa0eKzsTwxmH9aV23LjAQSYuHSjxvuZdmXNFuch9k8jP5OSPwRSctNH61sdZ82moCbnxXD03JezspCtrAypi2aSyMlzpjUBUtS8QYnQ6VDFp2r4dHcABGTu2DOzaDhLW8Ik7gwWAsGV4JBvakXhoeVSrjpW97Y25HUzAd1Lo5dqfFYcc4DxYrV19PhNXygMHTFS0GtsYB3lln9kZisKmD+FXzQd1gPbz8\/TBsRn9LO0m6Q2oUJrdyY2d3SLtcfH0x6P3e+GmMO1y8PdGsUz18dzwB+bvboFeo6WAd2s0bvd\/obXnXFe+sHwzFyomhCPMx3cfqUe+KFgNaYvtFC1khL5Sf2tULHmwbKeh8fNDn9Z5YneQDF093NG5fBwsPCFfWRXDi63wie4vHjZ+bo29dPXQ6HQICXeCh06FGxwb4\/qBEyoW5PltZLHZE2uvM3snJ0iVHOyKmpumlycSxR388COSFzJ908zTpgdaiwfBIXM0xHVgRyg4ALqhR2xuhPjoENq2Fj7aN4V6VEu\/UFoS6YzwMGLNoGHuYhdJ+WnojBgsH+qFhi0C0acn\/80fjEB27P9nQqzPu831IEi8Bfjn\/n70rj4qqfP\/33lnYYVB2UBAVFBcWd0UFREVAFgUEBdkGvpktttlipS2\/9rK+LZaVaeVS2jdL09Jc0tw9iktumGAuAQeIU3rUo5zP77x37p25M3PvzB0Etbp\/cAaYuzzv83ye5fOu0\/DdQyHo5mo4IJtWaxGRHIuvFvVBhFaD4N4BmPpKNkvkLv88EkVRhnXQNKNG8NAofLZyMBJI8tO4YPgDqcaz+eqW90G0F\/dMjTMGFMRjT00F5D9DIKOtdtjEezkavohClCuJFzSCsxJNPdSNk\/D8QMOmZxQpFIqScf6cmP3t25aNJ82F+LaSjxkUtJ19UPx6Fpp+lxcD7MYkCWyK4eoGF1NmxZBzSMm6dmcMf4A\/7Ny+XsWeaZCvAuJ2lRELbdlQ+J0DeISsOE1Gc6TkroDsZxAi5qVFt9gADAx1gs5LA2eyiQ2Jm\/cn46RggzN5GJeJK5v4NsVzu\/hhdSytB3kyc8Rclh6kYjLBn4xaw27uLMOaQhcW32akUYgl0d\/N5dIGB+OVDebk7fquUcjrTnK9wXeGzhLUJQ35+N+sLujlxUDr4YwAbzW07u5IKB2FA2JTKLnzRcnZ6sbpurxcZMSmKw1a44f\/E+uAddD2\/A6z6sho7OY7B\/l3sZ8y9C6MM5Qa3cfEYu0xw4jo9S0DMcSDnGFveZSg7ZgiHk\/M7WAvZ8vDt0yfapFXe4jJLRVb2QGIxhwsSPdkp25ThBRNGG6cvn15TxIeSPSCTm2oXdk6z6czch5PQa2j9SnrP30xJkzD1rxsjadxQt\/UWPzvgGGw5NCbPdGPy78qV1fE6xOxbm4gO9Ci9fXH46RuJnni1Hjc25fL6RQD35gIvLeJH+WXgRcyWiy7JpGnd7M6zAKDBAdiduHxcWVPEmaN9oCHitczg869QzHnsynsAIu8OCeCzRM37NDKtn\/9tyekvPI75lOPP47l4ciOXPx6qtTsbMKOeZ\/tYCb\/nRW4UluImv05OPRzLqqPl0iQYPnvu1ZbgOrDxaZRlQuFOHmgULAjmh6XqvNxbMdkVO3KR90FkaksTaWor8rF4e2TcfRgIS5JkgU9\/jqZjxOHphvfd+lMkY3r7bSjsRjn9+Xg8G4JudgEVYFLJ6fglwOFuMzJdbmmCH8Jpg7J178decwSo\/BaDm8781BbI5cAC++\/Nb\/fuFCEM3tyULU9B6dF\/UIGFiR1IK8N13aNQFqgC9LfLLA+b\/RiGu4OpUGKkT2ixYjtd7ReKET17imou8hh+OJ0NJwXK3jL0Xx4CmprTba6dCIP1adEenkbilG7Px8NVlO8HHiGXJ3JwrttHUhjXb5tScw4WVWEK0I\/lx0D2irfLb5P1K7ydSStZ1M75OOR7LJrL05zzxWV2\/Cd\/WeUormW84fmMjamH903FX9I+pocjDugs\/bEt6Qe5MjsqB5MNrW2u51aw47ftNbkYP0nY7H9kEjskRs32nodZ48jewvQJOiMsG6jrfbL\/K49bc+2147eJXVShm+mOkPl0QULjWsTZbZB8pntfb8DPtVy62uP67XTcGJnDn6pslULytVJOZoO5+LIrjxcOCeSq4mfHyhAszFGleLi\/imoE4x6G\/BK\/D4Pv54uk6j3pfHStpqk4\/V+taYAx3bm4OTxEutaqUVOnLOwQdv5pt07FUJ6y4KDhVGV9xp7zDokcSn6\/QfrV4+Dj3SCRqXDwxtMZJDHUWt1EnJ9GHSdniJyHq7ih7yelE8FCwoGFAwoGGgLBqbjo\/HOiJ01UckxSq0FcvTav6YmsUsr236BQkgVZ\/oHE5e2JBrlnju\/QKlAwyfdEUhT0MX0wn+XZuDgnjyc2JGJde8NRGF\/Z\/iSqeT8dHHFxxUfVzCgYEDBgIKB9sJAUz42LM5A3S2dQaXUJndubfIvqknazjft3qkQ0vYKUMpzlGSnYOAWYqAERz6JQ3GiDyJDXOHb2QUh3Tph5IRIPP1uBrfJhpLA79wErthGsY2CAQUDCgYUDPxTMPAvqUns0sq2X6AQUoVE3EIS8U8JPEo7lCSqYEDBgIIBBQMKBhQMKBhQMPAvwkDb+abdOxVCqhBShZAqGFAwoGBAwYCCAQUDCgYUDCgYUDCgYEAaA3ZpZdsv+HsS0ra3V7lT0YCiAUUDigYUDSgaUDSgaEDRgKIBRQOKBu4QDSiE9A4xhCKGogFFA4oGFA0oGlA0oGhA0YCiAUUDigb+bRpQCOm\/zeJKexUNKBpQNKBoQNGAogFFA4oGFA0oGlA0cIdoQCGkd4ghFDEUDSgaUDSgaEDRgKIBRQOKBhQNKBpQNPBv00D7ENLbtAD4zz0p+HRhGn6tc3CHq8ZinN4wDoueicET7+Xguh35b9TmY\/viEZj7eBKO34Zzp6TeL9Z+qWuVXdAcxIgdTCj6VPT5b8SAWMz5N+rhzmuzHn9UZWHtgqGYc99I7G1Q\/LPjbVSGM9+OwrN3RWJqZjcUlMRh5Z4y6c1A7OQUJXffLsyW4NjKBHz+TT6u2LFRx2PKMR04jJlzuVj3fiI2VbUdp23RgcNydpAdHJHjem0+9nyRgNcf6o+Fm8vb7Ndt0Vd73kPasXPZaLzyQAwW79DffDs6kCX\/fQlp0xS8PJgBTamR9t\/pDin56k\/xyI1Qg6ZodC1NxVVb4L+QgedHukJDUVB374fttzrRS71frP1S19pqX3t\/dzEL75eFYXQvd6S8mI8b7f38f93z9KjfMgav3heBzJF+GBClQ59+vhiREIbiGfHYedaxBNaege6f+axynPioP57+tAitBGtNU\/Htw7H47LAhkF\/aOAwl6aHImBCKzEkDsP50hVXsaVk3BNPTuGtyB2LjmRJsfzYCWanc\/9Ij8NaPFgVB0xQsndENmRMM1+TMSARaSrHrhQhkc\/dlpIbjvvdzrTvQLmRi\/tQw472ZWX3x6W7LxKPH6Q96Ib6\/HwpenYSrzdOwemYQ4mLD8NIPpVZtELWtWMz51\/njHepvjTlYPLUzdDQFplNPfO1oJ61iR3k+YNRTMX56yA\/eOj\/c80Yi3sj1ghPFoO+D2Q4+h8PTnZC7jW27QzHeQfLdODAYwzUUaJeu+OjM7Wx7OXa\/0MMYx0mOkfyZGItvj0x0sDbVo3qeP7QUBddxo9DYQfq0yh13CrYdkkOPo+9FINaLAkU7o+hzi3x9q3R30+8px4E3wtHbjQLFuOOu1e1ArBVCKhYkylD1Zm9MyuqPFQctiy+x683\/1\/BmCJzkENKWSrQeH44kzW0ipJLvF2\/\/7Za1+ZPu8NUw0NAUnIcNxenbMKJsFRDFnLohD+vfScGxenNcyLpX7Hkd8b9zk7Ew3xtejBph8RGY83+j8Pknyfj8lWhkdFeD0QTgjcPWhOiOakNH6KUDn3l1Qwz6u3njsU0kcOtx5JkA6AJ7YZ0RJ2Womu3DdlBRFI1uheNQ32yJoVLsuM8bGsYD\/1lVYihQL2bhib4MKIrBgEcni\/bE3zgajwkeFBhdKBYd5+xaNxlPxxjui56Vib8k2n5lexwGqClQ6k54dKMYwSzD2kJXMGzHWn\/suJCBh3uQDj0awcUTZBbR4jFHwZul\/e39XY4Tq0Zj7Z52KA6EeLg4BrkEPwohlYlne3aS\/v7GwaEY6UTBZ8o4XCY2qMvHT8vSUX1e+h6Dn0jb\/nbn7nbx479DXhX6DGu7yVhYGoa8e8fc5nqlDKvznaH2CcA9\/zcayxYnY\/nDQWwnk6Z\/FD5ZnIwVH8TjyVRPOGmC8NbRCodr0yvbR+KuieF4eNGtHSy4U7DtmBxlWJGlAX0nEdI2+VcRPkhiQCuE1F5wvn3fX\/6oG9xlElJcTMIkl9tHSB16\/+2UtbkIS9K1cB\/dH\/fGMKC1AXj1gOOdBe2SGC2TjsXffy6NQJBzCD44ffswaLOdTfn4OM0VKsYVE17Ixp8W8rfWZOCF9Ah8eFQhpDb1aKE329eWY0OJG1QqL8z6rgxozMLjvRmoAnri61oTTi4vDIOryhVdAxnQKncUf1ZoGE0VvOuP\/3aBk9ofrxg7y0qwaDwhlmpM\/kiit7U+DTO70lD37I9dxpkYZfg8nczmUCF7ocR95L0XE5HtQoF2DsPnF02yCtvbWp2AbB0FzcDBONFUiT+\/7IWuDIO+D2R1eAEvlONf\/\/u5cSgOUGH8m0Xtq\/e6FJT7K4T0VuDrytKe8KFp9LhrIq4J\/N7uu23Z\/nbmbkfaYOPaOz6v2pDdru06\/N5yfH9PVzy6eroxn1xZEQF\/moI2MR71\/Pvrc\/B2VgQ+PlEBh2pD\/v7b8XmnYNshOcrwXZErmDuIkLbNv8qwLEP9LyKkzWVoPlWI308afv4QThcSfFdXzY0WsA5RgUvHcrBrbTq2bspDo7EAsyim6gpRc8LQ43\/tdC52b8rHH4IRiavVBTh\/zroob70wDUc2pmPz2iycPGPdE335Y3NCeuP8NBzZMBG79hZZT+ElIHa1QUjri3Bi80RsWZuJX05KFI3NpTi\/MxNbVqdh26Yc1NZayyQZEG2836r9Ytc2lKBBYJ\/G8xYkUY78MoJY6\/F4pLirMe71AlQ9SkaRGIx4Zor0tN2G6Ti9ZSK2rM\/GaYGNrp8rxG\/VFnqUI6MAK6w9N2Zg\/4Ei69Gos5mYO0gDRhOE1\/ZwuD1VhBbjKJgFBsXaXl+Ek1sysGVNBg4dKTEmECsbCmQSw6\/V9ZxvNHwcDj+aQufU0TgvwLv49QJ5Zcp15VQBLl4g9+nx1\/Ec7FyXiaNm2NXjz2M5+HlNBqoOFVtPE2XlLMPFw4UG\/TYWo+anDGzbPAWNjQJ5zHQnz+ctZdv1QzaqTwvwIIgpJOY01wn8X\/jdqWJcdkR3LVyPKEXBKWYADp2fgIpAGmQkNOLuDCN5uPxhGNzUfnjitUjx5zVhAAAgAElEQVR0V1NQhfTEqlMCGVoq0fJOVzipA\/BqFe9rJfgkhRBSDXIXCdoi1E99Ou4JpaGOjMZuYzwsw9KJhJCqMelDifvIMzi\/p13DsFSCkOLCGOR5OSPtTUPv+NXVUQj1CsDLO3kZpexm\/n+rmMO2oQJ\/HcvBzjVp2LQuC0cPFztWqLc4iCUZfnW1Og9716Vj68Zc\/C6hk1Y27qfjx28mYs+uAjQb9S5scznq92Vh25p07NpdaBgRE9qN\/b0MdYcKcYn83lSKCzszsWPrFDQIcyF7XQl2PuoHT5pB4nO5xpxZf9Y8H8iRncSC6zX5OPB9OrZtzkNdbQrKA9pKSOX5pjx9CXVn\/fvV03nYtz4dW36YjLMiuZuPcXbjgJUN5NjJWh7+fcZPOzG0ta4YtW+Gwo2i0b10PH47WYi62jLpHGCU047tLXN3cxl+352Fndvy0WQrN8nJjUYZbLS\/vgjVWzOw5duJ2L1rGi5Zxk6uhtn6bTr27J9u7d8y86osbDtQGziOp3I07MnCnoPFApuVo\/7QNPxp2WaiNzn6vZn6zoZtRAmp8Pq2YKa+CDXHrGuWm\/Vtm\/e3RU5O9\/brrAr8eaQA9SJ1x7UzBfitVpCbLeUQ6pL83jgdv\/6Uga3rsnD8VHHbCakgP9msRQXvt4tjmf5ljGPGZ5dheaaQkJpqvuPV5nnH\/F6JeHrHT9k9n4E5MaRoosCQAme7oMC5mIEnue98E4ezRd2NYyl4aown3BkKFGX4ce0SjDmrTCMNlzYOR9kYH4S4MYiemYj3C33QiUxJo9RI+L8c7H41EhNi3OGp8cID6wVKbZqGdY+EoLsbzcpDnk+7uCP5oQn4XRBseELaZWo8Pqnwgx\/7bPJ8BgFD+mH1EWEbJAhpcxG2zOuGvjoV3H3dEOTFgFFp0b9gFI4YC6AKNHw7EGndtPAO80V8nCfbDsYnAt9aFSsSycLKiUql2291bSVuHE5ELltYU3AKDsa81dz6OFnyS8hkBDv\/vR5nXgyCq2sI3jtWgevb4hCtpuA0eDBOWk3b1eP04j6ID1BD16UzBkd7wNvdFb36eqNHgAYaQgDu4QiADBnNsDIjAQuKfOBjtKcKXRPisLGaC0p16Xgs2hlaFns0nFzVcCM\/7h64a5UAR1bt49rZNA0bnghDlBcDd39P9O7uCk+1CiEj+mLZXhNhMJPJCr\/5RnJjHgC4dzRPw3uJatC0C4o+E5t+yetc8ClLrlLseiUSKdFucNd2wqz341Ee48xNP6VAq10w6pEU7Fs2ANkRWqg536QZLXplx6OKx3TtRLyWH4zoADWcBsZg6fPdEeVp8jfn4CA89ZXJl0kb7fu8Hdmc3JE8O9UwPVYQb2g3HzwtXI95MQNP9DfEIrfoGGy3O4VOoMOWCjStjkN6nC9SZ6eiqbkUu57rhmExQXhw6TSjzXhC+uK+InxX4snitUtesll8uRMJ6fWdI\/Ho3HTUsXGwAmc\/jMNTy6dKdxiZ+YB0zGk9nY7nxnnCS+eBQUN90VPHsNOcSpab\/EEU5+T5DmJJjl+1VqfjpQxveDup4R\/kCh1ZbqHrhOL\/5pjIZHMRNs\/pih6eWoTHBmBwuBPrB35Txws6sCpQv2YwJvfWwtnNBSEBWmhpGt59IvDRTq5tFzLxdmEI4oLUcOrbF5++EYkBnchUaENecw4JxtN8vG0pw5ZZPvDRGHxFreVij6sG4aWGadOyZCfLOGqz8E6+D\/w0FFSuzggNc0dIiCs6axwnpPZ9sxKQpS+hL1n\/fuN4Kp5N10GnUSMwXIeIQA00zm4Y\/Z8kHDfmQgfigBGfMuxkvNZaLiM2ZcXQCtS\/2RXeTgYbMmoVmz+8x8bjgqC+MD7T+F77tuc7ldThvfHxO1EY5mvCkcbXH7NXmsdUYhP79YeN9vKy1eVh5awuiPR2Qlg\/H\/T2VbH49ejVF9+xM0P0OL8yDilhaqg4XJM6LDQhFutPys+r8rAtvzZoC54eXBiPsmiDr9MugXhjRwbeKeqCASEaaC33CJGl33ao73g7iHzKJqQyMHPpxxEoT\/ZBVw+G7WA1juzfrG\/LuZ+vS2XIyfqOHF9sKsDXD4djdIQznJ2Es93KsX9+L6TFusNL444ZwnWTvBxWti7G7ld7YqAPmdqqhm8XD4QGuSPY25DL5K4hNctP9mpRzt6ycHxTdStPSN1Q8vpo3DNIUPNpXDBi5jicNavR7cTTO56QtlTi6vf9EamioOkdg31mPRXl2Kx3h9olAK\/tJyRPj5o1yVjzYx7OVk9H49HJ+Op+f8M8+ZgBOMzf21iIdWU6qCkaAYlxWPFtBtbP74fshHC88kMprp9MwYyeNCiVOSG9cSgdX67IwvEjRWg6MxVVn0ZjhBcptn0wT7DDlIGQUvBJGIA1m3Jx5nA+DnwVj5mDnNig6zVyGDutjXUOURCXYd8cP3g66VC+ON8wqtpQgFWFXtBQKgx8fJJhVKkuDTNDaTgPGYxjbO97BZp+HIrMmF43QUgrJdtvTGoCh2s9loS8QBqdBkXjez6BtMiUXyRIWidbMiqQhxcHMXBLjDeM6DVmY04UA1rjh5f2Ccg96dXfORjDXCnoEofjJKsTPX6d3xWdGA3i52bh\/IHJqKoio+kyZRRgxT8xDqvW5+D0oXwc+S4BswY7gaFoRM3KMvXocrJRWmEQk5G4W0rx84M+cGWckPhkJpq4wv6PTYOR5E1B060X1p7hErRAJjH8iuqQ1\/XFsZjmTYHi1onYvJa9R75cRr9hXJH2dAr27MlHbVUOflrQF8N1FEskUuel4VDVNNSfmorDq4djKrvWUIOU+dO4HuVy\/LaoB7oyFFRBYXh9VTZOHCrAyc3j8VZhZ3ixG6uE4uMjfM+kPJ83yeaCcY8mY\/uOfNQIZKNUOjzKru0k8aYfG29UXaLwo9noQTk2lbuz024fWCeDEPE6d+DTSEhJPKudgLu7kyTmhqmfmArGO5GQ2seRbR8w2scs5pZhk94Daid\/vMStiWytycLrqT7QyyGkLQ5iyZ5f1WXjuUEaOEdGYuVBQwfTtUPJKCM2cvLBM9sMsejKN1HoplJhxLxcQ1xono7dz4diwHQTIb2yZSCGeagQVZSM0yzGylGzJBIRagrOMQNwkM1Vevy+Mgq9VBRUviGYuyQDhw8W4NedE7Fkhj860RQ74r3HOPKqx\/6HOrGzR6ym7MqUHY25eHO0ExiVK8Y\/kYpanszVt2WEVJ5vytGXTXydz8AT0WqovIPw\/AZuSmJzMfbMDUJnmkGPkhQ0coTOiDPGfhwg75RnJ9vYJhuIyY7tLZVgYwA3c8JY2NuNITZsT+7l6gxJHEWYz5yQVX\/Yk6kpH59MdIXGyx9PrzOMGLaeScfT8a7w68sR0qYCbFk8Hrv3TkV9zXT8tn0sZg\/RgiHr4R8TnFJgK6\/KxLbs2qCteHpkDDavn4D3Z4YhOWsIdpw3+a\/5ppUya4\/2qO9s2EguIZWFGUHsJDN+eNzerG\/Lut8hbMv3xb92DcUYTwqWtdyN0+mY1ZthN\/KxT0j1+OXFIHSiaQQlDcSGw3zdUO74CKlAx7JqUQdwDFv+ZQNDpI5mR0hpZ4x9bLyh5js4Cd\/Pj8Iwbxo0rUXii3nGjmm78fR6xzHS9ttltzEHz5B1gxbED\/UTMSucQeeMRDRI9SCSqWSeFBi\/SKzlk2tLJf5cEAoXyaBfgiUTVKDNiiOxpFOKFVladrSp7AseaJXgR0gtd9ltPZmIHB\/D5iBztnBESoSQtp4cjUwvGrr0BLN23dg9EIPUFDR9YrG\/sRKtR4YhQUOhU\/YYtAhAc6O+TGIapEgbRN6PFon2W1zbWpuOJ+K08I0fiJ8FUxfkym+zyBC05\/rPcYhTk+m6JtKyZ5Y31BSDoXNNYCcdEr886csWZMmvmQp41I5CmhMFTexA\/ML11jgioxRWrn4ThVCGglNiPBp4edvo2K1H4jHeg2LX+O00FpjEXmXYUOoOFaXC6OdNo59SMtnTaeux4Ugku\/65dcMyflSSl13k0zG5JHDTwhE5ikHKm8Jdq8mIQAjrh2TzG35H6tajBhmtOqCa8vFOgga0ld0tcC3q8\/ZlGzefW3fXmINnSbxReeHB7wUj242TMTeagaZ\/HKr4zi0Rndmzga3vzQhpSyX+WN0HkWTqbmB3LOc2I\/onElLRmNM8FW\/GM2B04Vgh3PG5qRxXZOrfUSxJ+1UFfn83FDpGi+wF3CwQ1vZ6\/DLHEHP6P5SN6y0VOPtiILS0E6YsEi4j0eNqHRfzmwvxSaoWKq8wLBHupNyUi+diGXbzqDlbuWvPJSDDWWRJR30a7u5Cs8XS+8a16lKkRK7slWhcFA5fmoJ\/dpL5hlptIqQWfkn0ZeWbMvRl08cqcPaNEHhSNHrdl2kshFkfu5iKu7rQoJ0D8bpgvbV4bjfFKGMccMRONmR0LIZ2LCE1J0ZkyqgBR7RTV3zMrWV3JDfaimXNn\/VEEEOje2W6YGaACCYsdHdpUTi8KAoBhSmm+yTzqlxsy60N2gtPXDtF\/FeuftulvrPQrdBecgmpHMyQ51rHznbwbXuxlLTPoi41tlEM247UWQ2ZeCTCEGPN9wPhlt8wMkZIz4zBlM4UGN9wLOdn0rE2aQMhFdWxAWfWtaiDOJb0L3v+yo+QWu6yW4HfF3Zjl4ZpomINA4ly4un+jmOk7UdIW\/Q4+Yw\/u\/V59CPc6CDpvVwdhTC1G8q\/sDH1kE+k3j3wPwEhtd0Lya2tsktIeVA5ofAz+4SUFF3LM7XsJiLGHmwRZ2r5qBt0FI2ehaOwbtkYLH5jGF6YHY37pgWiC0OBdu+G5YRMcD1otMYdqbPH4vg5e+AR+V7k\/YQEsWvLLNsvvLZ2Et5IcEXAqMHYJSwWyRo3ufLbCJbGoNJSjj2zdFAzLhieF4V7KvqwPzNSdXClKGgHDhKc36oHT1QnCInP+URku1HQ9IrBXq6QdURGKaxc3zWQ3X1UO2IYzvIdIm107OYFYfCgKHhlJ5um\/nH6+euDMLhRFNxTE8yndkp2qIjYmXvWjX2DMFQtn5A6JpcEblr0OPqEYd1vwgtTBWtrKkE28CAFcOe8scbio\/VUPMZqxGZEVOD314PhRFHwyEiS3BUWoj5vX7bRRtn0OP18IEuUycYiPFG+sZ9s4c9g0JwcY4+fCafSOnfkGktCSmLGprt00JIda7OS2BkC\/0xCKmYfwwipimIQOjYO\/9srJHjy9O0olqR8ndhhGYndKk+UvZ2CbxYlYMELg\/D0\/X1ROsKNnfnikZnE+i7bq89Q0Hbpgqc\/y7PaNAxnk5DjRUEdHomPV47DivfiMf\/pOMz+TwRGB5N1xRrkfMzlE2HMFXZUcZ0mlCYQ8wWzBcRHSOXKXopVOU5gaC3yF1vkVN6nbnaXXf45gnxsV18280QxlqSRTiotpiw25WCDz5XiM3bTLjUyFxRzsVMMZwRLphhljAOO2MmGjI7F0FtMSI04MuysSvTmSG6Ujm2l+CrXGQzjhsqvBJ16NvTEP+vql5EIssgJ0iM4crEttzZoLzxx8UnEf2Xrtz3qOxv6bjMhFcEMsZ1Y7Lw5366ErPtFdMxiSUROh3xRspYrw1c5WjAyCOmlJT3QmabgPSnZol7huYNjx76I6Zi01boWdRDHkm21l2elCGklcM6Q52gy5bm6ErLy3vLLHTZE2o6EtBKth4cjyUVYpJayQ96anv1hPqJUiWu1+Ti4PhXfLE7EJ2\/0xSgvctxBOxHShmKc2ZaBDcuS8fm78Zg1XAuGlktIy\/HTXZ7mI3tWzsQnRhrBIyKMBIwnYuzn3fHYxZLrCjR8E4dEf8N6EI2vL4rmTUCt2TRDO4Cyej+5XiJpG6+NwsvlXtAwbihcIhwtIPc6Ir8d2UgwrZ+I+7vRcI3sisrS3riL\/ynpgeF+NGiNL\/5vDzea0FKJ5iU9EEDT6FKUYiwEL6\/pgx4qGsGF47mg4JiMUkHgxp6BGKymoB0+FLU3RUj1OPwYIWw0wvTpRgJkTNAreyGYoaAZNPimCWnriREYozFM2X2bP\/5DMmk5KpcEblr0OMaNXI\/6vwJzQrrcsNNfJ1mEtBJXlkWwBFY7eoTZukr7Pu+YbK3HyCZaFFRhfbCZ9acK\/PZKEFy0\/lbTxHk7tccnizW1H15klyBw\/nEuHQ\/2IlN3XZHzwVQ034mbGkliSIaPs\/eK26f1dBqe5s5qJuuQB00ZjO8Pyy9wpQmpOJakfB1NhlFzinHF6GmGTjGzmFzRBw+8kWnoVGkuwqbZQQhk15oz8I\/tiZe\/KjD69Y1dAzGQHfUORCnXwWb+rH5YsNEOIW3KxfNxDCiz45kkRkjlyk6eyY7QeuMJfgYPb1eeSLaBkNr1TTv6sulXjTmYR44uYtwx81tLXJRj3XRXkA6NYfPy7BJSyxjlkJ14PVl9OhpDxQt7mzpg3ylhe14eY+62OO\/cCkeO5UZJuYxYMl\/OJH59OZqrJmH71+Pw5cLRWDAjgF1mJcwJkoRULrbl1gbthicu7lnp3RH9tkN9x9tf5LPNhNQKM4a2isbOm\/FtIrOc+610zOneSk4HfVGSpMklpKa6h5whfN3MBu1LSK1qUUdxLNlWe\/nbBiFtMNTuFFfPyIqnu678PQgpmgvx4VgNaJUOj2wsB86Nw3R\/FYY8lWsarajPw2fFPvBTM+jcIxDZBVF48P6eGESm7N40IS3HiQ96sQuTNd5eGJ0egRkzo1EU6xghZdegUQzGvMpNKbVyJj0OPGxYBzRwjqBtZmA2B0nrmWwsmdUVkezmLzT8k4bjqMwpbeLTHcSLQ+G1G9fHYaArmUoYhiWHTISQEFJH5RdPUlyQ+6oXuqo0SPuvYAouq4tybKn0YIuNwU8K9NSUj+WF3vBQu2BwTj88dm8E4gMZ6PpH4WvjMSaOySgaaMlmOnsGtRshPTi7syQhvfJFJALJ9uwjht40IUX9BOjJJlS0K0qXW4yCWGFMD8fkksANIaRPGaY1WhFSbut5YfFhk0Qs6QFvmoJLaoKhw0G2zzsoW3MRPk039ILevbqMTYwfjdfAZfhQ\/Gq2SN\/cF21hWc53ooS0pRJ\/reuPfloKKv9ueH8eOfZFuMtuKT5NJZuF2Ngttz4NM7rQ0PSNxQFjbOB0Yus+ggkuRtncZdcKO47qRco+pCiZjn0LojGxh5YdiSRrmt7eJYw50u9yCEsSvfys3Ron4Uly1qvaB8\/tlvPuCjRuScCjKV7wIrNaGBeMf8WwJu76T7HspmyaGNMSAklsWOUHrq1Nufg\/uYRUrux8UaLuhCf5KcO8XdtCSGX7JmmTtL4kdUNka5yEp\/tJEdIyrCVHK1AMRv9fgX1CahGjHLITryerT0dj6K0npOY4ciw3StqGYK6PYfr5Uz9J+8vVfYmoIJvfqZ0QOSIMxWX9MHuKL7tXgDAnSBJSudgmdpFTG7Qbnjg\/tfJfx\/V7U\/WdFR5NsfJmCKk5ZgzPlKqT2uzbRtntxAYrHXNttIqRDvoiHw+1ITAtiyDPlk9I+Rkr\/R\/uaEJqUYs6imNBW82nJ5vwIu7rNggpmTLdlWb3K3nnRAVkxdMOo6NAu46QEmU0fBAGb5pGxMwM1H\/SHb4eIXjPOF2pAr\/NN6wlCZ48Bhf5Eav6FLYAv1lC2no0HikehrVcK8gZTayzcD2wckdIm4uwMFnFntlz9zdcb66VM1XgwitB7LRE\/4Jxhq3+jY5pGxzXjqbgQbLrsMoT96217C2WuNfq\/QaHsztlt6EcVfMC2MThPXIoDhtHZdsuvzXgS\/B1vitU7l3xkXHDJFM7yLz5MDJyGDsQR4UkobkQX5cEYeJdA\/Ds08Pw8fJJqDMW4eR+x2SUCrTtR0grUDefrKWkoBOZstvyHlnvTIHggdeRlEz899Kf0\/F5BtmMiYJfZpLZKKP1PY7KJUUq2ouQ6lE9z58l7n3YjaQc8XnHZWv5tAf8yWh7yQRcrk1Crk6NpFfMR3itdWbCZ1u+kyKkZGOU7bM6wZmi2V1P1WaEtAwrJ5OlAAzGvSFx\/mTdOJT4GEbza\/jYyM+EuNMJKR\/\/GqZi3Uwf9ozn7v9JN18vyF9j8SlNSC2xZLCbpF81T8Pbo8iuiC4oXmqvI0eIgXL8trIfBrhRUIf1xdaGSsOB81qyrigCq9njkYTXW\/wuGp9Jce0AIZUre3MBXh\/OgKKdUWi5A7fDhNQR3xS22VpfNv2ouRDvJ5HOGLEpuyVYTPaCIDZbxk\/nlR8H2IPu5drJAncmmR2NobebkDqWG03tFNqQdCLx\/qJF7scSU+2bp+L9MRp25kfBIlOH81VuRpAsQmp8j0y\/tFcbtBueOH1Y+W\/b9dum+k4Sl5W4dYSUx4aDvm0lu8T9Vjrm3mcVIx30RULSSKeKJhjvmR29JpeQVqDm+QBoKQq+eWMtavn2HiG1IKSO4rgDCGlr9UhMcKag6hqFTfUy897fiZCiNhlTfcjam954PMsZfllJaDSCthw\/kh0wKQaDhCNmAkL6lcUaUleyTlOwI5gpuPJJy9N47At7rh5HfviNcdBiIqTTPuUTnvSmRjeqhiOZkNqwKGziN5QhzuRC2mSaSnP95wHs2kTGJwyLjaN6vFObPltP5eEEv\/Mqqwd+EbmzIAGbrje1T\/A\/kfebpuya2s\/ea3ltYx7eTiTkRo3YWRONU2Tlyi8qj9GelUBNEvK8aXiMGyVOnOpScVcIzW529YzxvMMKNCzqjsBOPfAVr2PhM7nfHZGRFKliWCHTJMgmU2TKrrHI53umzNZ2CfQtIgvRw429gzHcyeC8PwpwSojI+hJ3qGgXFCw2bQgkJZNdnZLRttV90IOsIyW74b6YbbYhluX9jsll7TeG55mmrliNkPJTdnNlrCFtzMFzcWRzM2889iPpcHHE5x2XDRcmoCKYhiqoF75a1BMBHiF4\/xjfGUVsWo6mk9NxxUjw7NvZUr+Wf7N2JVNcLHaPZq+7QI6dMRybQJkRUj2OsGt0KfhPGmO2ERr\/\/Gvb4hCrphFeKSRynE7ECGlDPlbcG4dVZCMGzu\/FRkivHRyDhx9JNt8ARwLjvCzinyL2aS7EiX2mg9zJfa3cRm5+BeOMa47Fn2ewhSQhtcKS4Xppv9LjEDutnoJfegJ+k7R5Ber25Rl3dWVl4zdn8onAN8S3Gyez00xp2hnZ75mvqbZqi2XM5XXLT4kkU3YP8ZjkRwAYmK\/Vlit7OX6e6cUeyRSQZdFZxRNSr+5YZRafpDAv1zdl6Itvs+inHsfn+bMdNWHlaeaYuDABlSE0GN\/u+LKGl1MEZ+xzRWKUI3YSlc3wTsdiqIGQiuUbK2yYvVPK9ly7HcCRI7lRWiY9Dj\/uwxbjuoThOGnWIczJxG\/MpfbF84JZB0ZCKsgJxpFwq7wqF9vknXJqg\/bCk7Te5epXTn13o2YK9m8rED\/j1AwfnDyC\/13hcq82IV48fjuAGYID69h5s74t834H5HTIF8kmc2Q5gLoTjJuQsvozEdK7LI99sajlr33fDxEqsqlqOJaaDarwhFSLgiUm7iDtTwb7WevY8H\/rWtRBHLexbiVcwfwcUh5nepx5JZjdbC5cn2bYF0VOPP1bEdKWUqwpcoWK1kLn5Y7KVcKe6grUvhIMd4qCpmsoXvwsAwc2p2HV\/L4YSY6ccArE61WmUcOG+SHsKGTANNNW\/CYwFOH9RNJT7IpybvdcsoY12Y0c8eKOzLljseOnLGxaEo\/7h5EtylVIeD7f2GPP77IbXJTCrVksR\/3WRMwk03vV7pi2iN8tthI4HY9xpBc2QLALcHMhVk5xZwsDtx5hmPPmeGz\/KQeHN6fhf+8OxysfTmIT75WlEegRE2U8ggAXcvBWsjPUPuFYatajw4NE5FPs\/S3W7Wd1I3LtjUOjkUXWcqo9UPQJd+6gTPlN+haRq4UAOggeFIP4Z\/NN07IFAZWQtS\/ILsdkh8WZGVwxosd+dsqzGqFxIUifEIqMCaHITAtD3rT+ePe7QsOzHJCRx0pQkWDXv5ZKXPsxGr3JcUTCI4Wap+HdBNIrr8XIR1JRXV2E8wdyUSPYhVi03c3TsbbEE1pai1Gz0\/E7m8DL8OvnfRDnRqNzwnAcEyR1XiZx\/IrpU\/i\/Ymx5yJddp0NRKoQM6YGH5sbj88Xj8M2niVjwbBweqYzDqio9O11SvlwSuGkpx+77yTFLFlv5E3L8UTd4UhTc0hKMxJgnEeqI\/viZ61S4cjwTH0ztBHeaQUTJeI50OeLzjstGCOe2GZ5Qq9wxKMYVuhRhx0g5frpHx2601iW\/PQiZwT6sXa0SoMl2l3+MwwAXslO3cMpuJcjxS9O6kJ2BXZF4bwK27S\/C5aYKkIOzD3w2ENndVNAEhOFjYlOjD3E6odTIfKcQLWdL0HJ2Oi7uGIdnxrrDpUd\/7CAb6XB+T7uEYtEpck0JWmoKcXjpAKR2USHyHtM2\/6Znm2SW9z8R+5BR3W4+mMkffdVSiiMvdYGPyhm5H5pGVGw9Xz6WBPonO3yK5IXWE8koIru2UmpEpsdi4fIMHNiVg73fjMUnLw3B0p9IYVGG1VM9MVDPH+dSiUs7h2NCJ5rtQOXPab24uCdCVRRoVy9kPzQS366fhKM7srDps9F465kkHOBJn0jMZdvbkIXZZAdIs53nK3DhtWA4k83RhsVh44EiNBybgl8OFUOe7GQZwlAkkKMOaC3ipg3BF99kYd+P6fj2nX5sHiXrgZ7fbcqj0rqX65ty9GUbS61nUvCfcLIbcwCeXlNoWKt1MR9fV\/rAnXHC2JdzBeu3RHDG+oNYjKqAbDsZfUpE1lsS26Vtz9rIERw5kBul7V+J1pNjUdyV7G+hQnhyND5YnoGDOydh+4pEvPtsAnbVFuDtBHKuM4Ow1MH43w+TsPebZLx\/VwC7LMM5fih+5TfyspFX5WKbLCeSUxu0DU8uKF0hQizE9C5Tv3bru4aJeJAcOUWp2SOmbtjCoEXr2bcAACAASURBVMh3LQsNGylqBoqd526K+2a1KXmOaOypBF+TmOqkm\/VtmfeL6VhKTod8sRTrphs2rPMb3g8ffpGBvZszsHFxPP4TSzZSU2PMS6a6n8+TZvpqysXr8YQjUNBFR+DVT9Kwe0sWti4fjQdY7sBg6JO5xv0FbPkT+c5ax4Z4I1aLOoRjG\/5lWyaekBKuxPGxhiLs\/yAKg7woaLr0wApjJ76MeNpxS0jbf8ouUQy\/65Y6UnhuFpcELk7GwimdoGPIweE03AIDMPODFLwYbwh6\/oNjsLGmApc2DsH4EMNGQLSLJ1IeTjGcb8k6bSl2PRuCrmTjF7KzaURPLGFHK8pw6M2e6OdlOLRa5eqKeH0i1s0NZEmw1tcfj6829OYTQqrz8sCgYT7o5q2FzkPFjtzqenTB7MV5JvBdyMSrSe5sLyJFq9F7SoLgfNJcLLs7BBFeBjmJLLTWGbGZA\/DdYUNRSXoSQ8hIl5MTwrp7IsRLA7\/+4Xh5reVGQyJJkrRV9P0S7Re9ljy3AhcW9UAXUlw5e2LKu9wxLBfty28L6Nd3DmPP3yTt9oqJxiZuS3rhPde3D8MYX4M9aGcd7lk1HWgqwv5XwhEb6YshA\/yMPwN6u8GTocB4dcWH\/GY+MmQUYoVx06FogaF9rcfGYVaMYeorzThj+AOGw+eJPuqW90E0hxNa44wBBfHYU8OPYkjYgg2g+fjfrC7o5cVA6+GMAG81tO7uSCgdhQOCnYyFMlnj18bzWXzz35fg0IcxyI5xhRvrLwa80xonRIyMxKtfFxg7WNAgRy4J3LRU4PzSvhioMzxf5eOPx1cZyMT1HfEsUaIJtp08kPHKJJYs8SSCcXdDj0DS+aSBE9m11NsbWbPHo0ZAzCHL50skfFpcNjOMbYlFP7I5Da1F9gdCv9IbzgomZ0EKzuUV3uvo7ya70vAZ0B9rzXpUebuVYe9sX7hpzAkpedfVqhS8MDUIvTpxsY3olXTQebhjSHYcvj4gJBLm9iJ+ZvlDpohfFvq9yDWU2XRIXkZHP81lMcbc+hRUBJG2qNC5qxd6Bmnh4dMZefPSxXv0zfBtkMERLJn0T0HKry7vScIDiV7QsRsWGXTm5NMZOY+noJbFZTnWFbtBQ1Fw9nZHRLgbdO7OiM0ajK1m2\/6X4dhH\/TCuu5a9lo3vFAO\/\/t3wzJcFBgIl1L0wPzRPw+oZPuw5pCTP+Q2OwXquA7L11Hjc29ew1pYU+r4xEXhvk2FmhX3Zic70OP9lLMaFqtn1uuQZuu5dMOfTMbi3OwOPQG+MyhmO\/TxRENG5EfeyfLNMpr5sY+rawbF4bKwOOjUDz84u6OzKwKNrIO767yRjRxfpwBTP7bbigAw72dIB\/52sGFpppzaxrQNJ27cBR5CRG4125tso8nllTxJmjfaAh4qPLww69w7FnM+msHXQ5Z9HoiiKwyujRvDQKHy2cjASSOe\/xgXDH0g1nsltK6\/KwrYDtUFb8OQaFoInvxAMNkjpnehJhn7t1nd141HmR\/TKIGa26fQJ+3bRo+bT\/kgM5vIE44wB+SPNjzKTkl0i9ghjJ18nkQ5debFQCtcy7ndQTlY3Mn2RXEvqvAcGuRhqdIqCk7c3Jj2Vgk+LXOHk6Y7okZH4kOxnICUHmf12LAVzEj2MdZbGywsTHhqLFZVecHJ3Rd\/hPfD2VmFuFteHmI5JJ4R0LVoJeTgm72tr3UoIqRa6UF+MjPFAZy8tPJ3IAJUWkcnRWLnfsl124unfa4RU3FCWDnittgDVh4tNBfWFQpw8UGg+nUckeFo+R\/TvhmLUHihAszEhl+Li\/imo43u0yXPPF+MPrmhuvViEM7tzcOKoQB5H3t1YjPP7cnB4dz7qLliTmhsXinBmTw6qtufg9KlSsx1MReV35N3tca0d+dtVxoYcvDPOFf7jR6JGuKaUbUcZfiz3gEqlw6ObLJykI2QkONmfj4Y6a5vZbTMnz5G9BWgyrs2Vh327zxax6dXaaajelYMj+wrQcNGGvLdILp5EkHNI99aV4veDuTi6fxpahETUoh0d5vPc1vGMbw98JegUYPXMrsuk4Tl2pGnNuoVcbbGH3Xuay3HpXCmuSU0bbSpFXVUuDm3PwfGqQvxpQ29233Ur2mPrHU2lqK\/KxeHtk3H0YCEuSbVZ4hltwZIcnVyvnYYTO3PwS5WYTHpcqs7HsR2TUbVLPG6b3qHHH8fycGRHLn5tt\/hdjubDefj1dJloPrAtOxdnmkvx+4FcVJ\/in1GGptOlEjNVbMcm+77piL5sv4tv2\/HD000dvxLYMNnA9jMN17WTnTo8htq2vWNtJtPLbdcfcp93taYAx3bm4OTxEhEMEZmnoLbWlJcvnchjsWf1fDt5lbe\/lV+2sTbgn9f+eOIwZ0e\/tuu7CjTtnIAvPs1AjY3lSVY6bBd\/kOMz5Jqb9e2bvd+GnLJ9UY+\/TubjxKHpRk5x6UyRg7moApdOTsEvBwpxmcthl2uK8JdVnWpD3puwm2wc2\/EvMSz9VVvMzUCpwOXqfPyyKw+\/CXxZ7B6CC9G8908kpOIK6BhDK++6c\/R6fVscotU0et1rcUA6ceTmIizLcoYmpBe+a8t5rTcRDBSMOIaR1pMjkMydQ8qfG3tLddhUhkv1HDGvHYvpgQwi7p5o3aF1ZhTSO3XGo99JbNqhYEYwPdgxDLSXvW87lhQM3HYMtBeWlOfcHh9uD70rtcHf13btYX\/lGX8T+yuE9G9iKKWwsVvYtJ4egwJ\/Mi3XB\/qXx2H7tlyc3JeDXSsT8GxeZ\/h0JtOqhdMuFdvfiYGaP1NLFdwL3wtnHtwKH7iYinu6qeAUFo63VqbiwwId3LtF4muz6ZYG3NyoSsXKH7g1ybdCNuUddmOAJZ5vK5YUezlsL0v7KX8rOao9MKDUBgqO2gNHyjM6GEcKIe1gBStFyS0tSv7cOQZPF4RgYA93BHZ2RkCQJ6KHhaJ89mjsOCnc0EWx+x0ZXGvT8WyCJ3y9ndDJ2xXR6YOw2Wwn6Q62W2MuPi7wQ49AV4SE+2B80RBsOKrg5o7Eir3YeruxZE8+5ftbmhv+lhhWMNJuGFFqgw7OnQpW2w2r\/9pYpRBSxUn\/teBXAqgSQBUMKBhQMKBgQMGAggEFAwoGFAzcXgwohFQhpAohVTCgYEDBgIIBBQMKBhQMKBhQMKBgQMHAbcHAHU9Iz\/YClB9FBwoGFAwoGFAwoGBAwYCCAQUDCgYUDCgY+Odh4I4npMoQ+u0dQlf0r+hfwYCCAQUDCgYUDCgYUDCgYEDBgIKBjsKAQkiVofnbMjTfUYBWnqsESwUDCgYUDCgYUDCgYEDBgIIBBQN\/HwwohFQhpAohVTCgYEDBgIIBBQMKBhQMKBhQMKBgQMHAbcGAQkjbCXjncrHu\/URsqiqz0xuhxx9VWVi7YCjm3DcSexva6f3t1At0vTYfe75IwOsP9cfCzeV22nK7ZS\/BsZUJ+PybfFxpp\/YbnVC2PW+3DuS9\/0ZtPrYvHoG5jyfheJO8e4y6aG\/dtujRfDAT37wzBI8\/mIDDjbdbng5+f1MxTq9PxjuPDsDyvcoRMh2Hqw62Y3v5gSQeOjCetVSCxPady0bjlQdisHiHPRzq8cfBDKx8NQ7PfJyHG+3VduU5d3BOvUU2t5Vb6\/Kx+b8DcX9hD+Rkdsd\/Hk3GsXY6i9ox\/HdQLJH0fbH3dWw8+NfH4faKRbbwfNPvaEe+cCEfm98dhIdLeiJvYhgmZfVA+V1xeO+rKbh003KK4df+\/6z4hkJI7SvNvuPqUT3PH1qKguu4UWi0ZdzGHCye2hk6mgLTqSe+bqdga19GOe3U4+h7EYj1okDRzij63B65lvPMjrvmxoHBGK6hQLt0xUdn2vM9DtjTlq3vlO8uZOD5ka7QUBTU3fth++3uBKmfhAVZOrhTFFQhvbGxvj1td6c9qxQ\/PxmEIDUFSuWFB9bf6Z08bdRffR6W3ROHr05XsAX3jSPj8eRDiai97Z0fbWxPh\/muNB46Lp4RHZTjwBvh6O1GgWLccddq2zi89P1AJAYwoCkaEXdn4JpD+tDj9Ae9EN\/fDwWvTsLV5mlYPTMIcbFheOmHUtmE7NLGYShJD0XGBKmfbnj+W9vtaJ+8eKdhqGPkuTmby5XJRm6tnYg5A7ToNLAPFnwwFNO6M6DV3nhii73OEznvdgz\/HYMbad8Xe1\/HxgM5OqvE1X1JeGj2WDQ0k+v1OLs8FnM+KJDw4TLsnR+FSSO8ETZmGH79m8X+GwcToR\/aGcMmj8DB+gpcWNoPSdG+yJ6XIdFeg05k1\/4OxVDOPu3EF24cSkJZhBpqXSdkzxiEd95OwKfzuiFMRYFW++K53e3hY\/IwZcK6CN9QCKmjShS\/\/sr2kbhrYjgeXpRvvzf54hjketyJhJS0rQwrsjSg\/waEFHWTsbA0DHn3jsHpdg5+DtmzLYHmFt\/Tenw4kjR3CCElbT89EuO1HUVIy3Fi1Wis3XOLi9WGPKx\/JwXHLAl28zS8PYr5BxPScux8oBPce8VgD+nsaMzBK8O0CJ6egqu3COfX9k3Aoi9yb9n7TElVPB\/Y\/F4KDx0YzwzyFOGDJAa0DEKKlgpceCUI2jYR0jKsLXQFw3aA9ceOCxl4uIeB3AYXT7BR3FnqsgxVs33YjjSnuCgsfHc0Pnl3NBa9NQLPFfmhM8MgY4F8gmvTJrcIp3e2DDdjc0vbSf8tnlv1OP1cAJwFdceVgxPxzdop+KvdbOMI\/qXlvykbSvm+WBs7PB7YaWN9Jh7vo0afWVlsh9T1nUMw0ssV+pUSebV2DPI7M9CoKdBOAXjt4O0gOXbaxOpZvD648kUkAmlDx\/FDP5Rix71ebOxRBfayGbPE8SxHDpnX3DRfKMZXeS5g1Do88F2JqS2N+fjfY1GYMXsMjlvWLGJ47JD\/WfANhZDKBEV7GqMuBeX+dy4h\/a7IFYwgMdxUAG5PvSnPMgUTR3VxMQmTXO4gQnoxCZPdOoiQnhuH4gAVxr9Z1HZ9Oarflkr8uTQCQc4h+OC0ZUwpw9KJatD\/1BHS+lT8J5iGuntf\/HSxEtc3x6CvmkZQ\/jj80QY9Oh5vSrC6wBUuSSPRcEveZ2lfR\/++XXgow7IMtUxCWonLH4bBtU2EtBKt1QnI1lHQDByME02V+PPLXujKMOj7QJZDPnl5IZGBgtvEJFwW2ra5GFsfDkHl4jt7Fo\/jWHYUS+17\/c3Y\/ObaWobV+c5gVJ64\/zsJwiO0f5t+dwz\/N9ceKbvcLt+Xkkf6\/1e\/7o0uDI2IGRNxuUWPvQ94Q8O4YvrnxSI+XIH6BWHQuQXhoUrSicQg\/tkp9gdn2mRHaZll2UyqPmguwpJ0LRi1H17cpwfOpUAfQkPTO0akvTcpgyPtvlm+UJ+Ku0JoqIJ7Y8NtI55S+iqDGd\/4+xHScjQcyMbPa9Kx7cccXLhgmCJmBsT6IpzckoEtazJw6EgJWqWMX1eImhOGHtYb56fhyMYM7D9QJLkesZVcsyEdP34zEXt2FaDZcupjfRFqjom\/73pNPg58n45tm\/NQV5uC8gAbhLS+CCc2T8SWtZn45aREwhXIfu10LnZvyscf7LQKk+GvVudh77p0bN2Yi98vmv5vpiuim8bp+PWnDGxdl4Xjp4rNASKlO+P\/K3DpWA52rU3H1k15aLTUifE66\/dfOVWAixfI\/\/X463gOdq7LxFGz9urx57Ec\/LwmA1WHinFd9FnlqD80DX9atB3NpTi\/MxNbVqdh26Yc1NZaJrkK\/HUsBzvXpGHTuiwcPVxsPS1Nwp6Wcu\/6IRvVpyXs1FKJazX52LcuHdu35gv0o8efJ6ei3souFbhcW4jfTxp+6mqFzxV8d6oILYLg0nqB4Dcdm9dm4eQZy7ZWAoSQuooT0tZzU1FbLdKb2TAdNUeLRfynHPX7srBtTTp27S40LxRFbWRteyJPjpCQNpXiws5MbNuYh3pBu0xYrcCfRwpQL7Le9NqZAvxWy8eBEux81A+eNIPE53KNeqw\/K6IToaz2\/InD09Zv07Fn\/3RrrJzNxNxBGjCaILy2h7Of0UaWRUgFLp\/Mxe4Nk\/BrjS255Oi5DHWHCg1rQBqKcOzHLJw26kJE76TN9trC6kWGf\/D643pwKYrBgMcn469VvRDMUKIE3FHfIVNNG\/ZnY\/uadOz4eaq1n7dUomVDHIZ5UNCOHIpjvN9Ul9gZLZUXty6fKMDv7LIKPf44NAk\/r8tC9RkRX2F1UYaLhwsN+aOxGDU\/ZWDb5ilotMKsJR6EdpKIZ+zz7eU+e20qw\/JMISE1xd3j1dY4JOTEzQYhtZlfLoxBnpcz0t40zBi6ujoKoV4BeHmnlO6EOjD9bpBBhJDy2LP4vHo6D\/vWp2PLD5Nx9hwfE0zP4+OJCYflaNiThT0HxeKc+X1S7b1xcTrqONz9fqoQf\/DLcOqLUX+Ki+NWeLRnK+7dgrjE1igbJmLnLg5jXNtvnJuGI9+n4+ftBfjDCmuG58jF8U3Z3MIWvK5FP81yawWu1Bbggwmk084Td62Yysbt5ovS9iPPtJvzrORxDP9GueXWk+R9dq8V8\/1y\/HlakPPPlApqHYl4YIkLO7UrGqbj9JaJ2LI+G6cF9cH1c4X4rVpYY5gwf3lRODwpCrTWB8\/8XIr1xa5Qcct+jLrhddw8De+P0cA9MR612+MQp6bgNGQIqiVnrpWj6WA2tq3JwP6DgnzaWILfj1p0JMuph1sEeZCrJXZsnYIG3hd5OVts1Qel+CJLC59xI3GGyF2fihldtIifl2OfkJrh2aRDu5zBKJfpHqLbduMLzWVoPjwSGW4U1GG9seaoCWekxrx4JA8HN07CWUs9OYqvlkpIxUcrrNjiG38fQlqGE4ujkdrDCZ27dsaACBc4UxQYd2\/c9yXXY9M0DRueCEOUFwN3f0\/07u4KT7UKISP6Ytlek9Nd2jgcZWN8EOLGIHpGAhYU+cCHrPGiyI8KXRPisLFaEAybi7B5Tlf08NQiPDYAg8Od2KF8v6nj2eLj0o8jUJ7sg64ejNV6m9baLLyT7wM\/DQWVqzNCw9wREuKKzhoRQtpchC3zuqGvTgV3XzcEeTFgVFr0LxiFIxxxMZN9ZiLeL\/RBJ1Z2NRL+L591nNbqdLyU4Q1vJzX8g1yhI1M1dZ1Q\/N8cc\/LQXIzdr\/bEQB8yjUsN3y4eCA1yR7A3I2vK7o1jKXhqjCfcGV53FFy7BGPOqkIREsM7XCl2vRKJlGg3uGs7Ydb78SiPcWb1SfRPq10w6pEU7Fs2ANkRWqhZm1CgGS16ZcejiidwF7LwTlEXDAjRQGu2LrICDd8ORFo3LbzDfBEf58nqh\/GJwLec07WeTsdz4zzhpfPAoKG+6KkztLdkuQEj4va0I7eTO5Jnp6JeSIwb8\/FlZQCCXLQI7e+LuDAtPPx1iO7tiSB3hi3YH\/rBshAsxc8P+bDrKylai5HzJguSUxl2POwDN4L7ziF4e48eaJqGdY+EoLsbDZrXlYs7kh+agN+FslgRUj1qP49F3ggdfJ3MRxOvbo1HxThfhHkyCC1LExT2FahfMxiTe2vh7OaCkAAttDQN7z4R+Ginyb+sApBY0OUJaXAE3nu3D4YRDHLya\/388eDSqYbe1aYCfP1wOEZHOMPZSTj6WI7983shLdYdXhp3zGDXxJVhyywf+GgMulBr1XBzJT8ahJeKTxW07096nF8Zh5QwNZuMDTFCjdCEWKw\/ycWIunQ8Fu0MLesHNJzYd6rh5u6Bu1YR+\/JFiCf+8\/Zo3D3IxQzvI+5PMbdViww9X8jE24UhiAtSw6lvP3w+PxJxBMdkHXv8UIkp7DLaQgo9O\/5hZd\/m6fjx0a4YHNsFT6+ejtYLmXgt0w8DRvfD6uNER23wnRY9Lnw9ENmRWmjdXNEzwgvBHgxcggJx30d5xk7DK2tiENeJYW1DqxjO3mp4hPXGetGOjUrYj1vF+Om5nhjb1xVuWj88\/uFQ5Edqjfanndww5hGBf9VOxGv5wYgOUMNpYAyWPt8dUZ4mf3QODsJTXwljIo8HwZpiyXhG4qb93Ge\/TYbnGAipG0peH417BgnirsYFI2aOw1lBASlFTuTkl+s7R+LRuemoY2NQBc5+GIenlnM+LRYPJP4nl5DeOJ6KZ9N10GnUCAzXISJQA42zG0b\/JwnHjcWWOQ4fXBiPsmhDLqddAvGGxBRDe+39c\/0AjOxksDfjGYCXfzaQ7uu7hiJRR3KjGpFTEo3FuRxbmcUlqxqFgf\/wOHy3ZRzmpevgpeLzLw2vnuF4bzsfix3EcYthVFysE8KeDqxigoQ9RXNrcxEWpmjhzLVD40xithapb0wTryPk5jwrGXhCKg\/\/JLfKqSfZtsu+VsT3mwrwWZaB7NFaN4x9LA3158TrG9u4EKldW\/Q4vbgP4gPU0HXpjMHRHvB2d0Wvvt7oEaCBhnQ43SO+RrK1Jg1zx\/ti0Ng4bKypwKWNQ5EzyAdjZo6zImg3qoYh0UWNca9PQ2vjJDzVlwGt9cfL+607oK4fTMa9Q13h6uWO2DgfhOs0COzZCX27ucJDTTrN+xueL6Mehlke7ItP34jEgE6mWsI5JBhPry7icGSnPmjMwcJZg7H5lCGvtx5JwlOPjDeLiZY4F8UzwZ0dzmD5HP7v9uYLrdUjMVGnYutommbgwtcmrmo4k6nVpObSBOCNw4Y2O44vMhumHfnG34OQ6nHm3TAEq7UYPnsimkmSa56OrbMDEezTiSOkpfj5QR+4Mk5IfDITTVwi\/GPTYCR5U9B064W1Z7gCsrEQ68p0UFM0\/BPjsGp9Dk4fyseR7xIwa7ATGIpGFDdvngDlyjdR6KZSYcS8XMPISPN07H4+FAOmGwgpBM8z2wCiMRdvjnYCo3LF+CdSUcsnxnqxEdIy7JvjB08nHcoX5xtIQEMBVhWSeewqDHx8koGYCN4VkBiHFd9mYP38fshOCMcrZMOIumw8N0gD58hIrDxoIDvXDiWjjGwQ4OSDZ7bxAUKPX14MQieaRlDSQGw4zCexcpkjpHrUrEnGmh\/zcLZ6OhqPTsZX9\/uzmzVpYgbY3Dn1+skUzOhJg2JckfZ0CvbsyUdtVQ5+WtAXw3UUS4ZT56XhUNU01J+aisOrh2MquwZJg5T5fJLS4\/eVUeilshj1q0vDzFAazkMG4xg7WluBph+HIjOmF0dIy7BJ7wG1kz9e4tYYttZk4fVUH+g5QiplT5PcLhj3aDK278hHjUBuSqXDo5t4gqnHkbl+cKO1GPdyngE3jfl4f5wTVB4BeHHTNFRvn4xfz3KYFCbP+gw81IMGJbKhw9VvoxCmUmPUc4adL28cSseXK7Jw\/EgRms5MRdWn0RjhRYi9D+YJd9K0IqSVwPkcvDZaC5pizKe3NhVh8wxvNlkJCemVLQMxzEOFqKJknGaL\/XLULIlEhJqCc8wAHJToneeDrdknR0iZTsGYtyILx6oKcPqnCXhfT9aGUWA8g\/AmmTbTUom\/dg3FGE8KlFZISCtx43Q6ZvVm2E1aDISUFN167H+oEztlSNaUXXv+1FSALYvHY\/feqaivmY7fto\/F7CFaMGQ08LEcU2dBYzbmRDFWMhrazBUhjDRuZv\/I46YS8vRswr\/KLwRPLUrH9lXxeDA9GLnPZIivu5LVFhn+IcSqzN8d851K\/PV9DOJcaHQeORA7a7gCoTYLL45yAqP2ROUX043F6vWtsehHeuRlTdmVF7euHR2DwhASo9yQ\/fwE7NtXgJr9WVjzUiRiCRZpZ2S+PZWToRy\/LeqBrgwFVVAYXl+VjROHCnBy83i8VdgZXuwGdqH4+Ajv6yJFaYvJnuYbj8nJffLaRIgtS0hpZ4x9bLwh7h6chO\/nR2GYNw2a1iLxRdOOuqKEVHZ+4Tsgb+5TlJA2FWLd7L74gHTIEfydz8AT0WqovIPw\/AYOF83F2DM3CJ1pBj1KUtDIdc6Z4fCRMdi8fgLenxmG5Kwh2HFeRFaZ7f2TjNJ7kk5mk51bTyQh10+FiOnjcJF7P4lPsvKmIC4FjhuEtZtyceawsEah4DN2MDb9nI8L1YU4uyMV\/83xghNFwWNMPM5z73MMxxKEVKYOzOK7VFwQtMusVjJ22gk6aSSeITvnWd3vCP4dqCdbHLlWxPebp2FplivUOj88auy4kogHAv3JqV2v7xyMYa4UdInDcZKth\/T4dX5XdGI0iJ+bhfMHJqOqSrCu0EpnIj5hdY0ex+f6wck1BO8dIzFOj31cDh42zxRPWHw05uDFQWowXiH4735DzrteFY80HQ3PoYOx59gUVG0nAysy62FB3FT5hmDukgwcPliAX3dOxJIZ\/uhEU1BHRhv2NmDldrA+sGqrhT4E9hDi2S5nEHtuR\/AF8h6x2o\/8v3Y8ykmOExBSYe0rB1\/tzjf+FoS0diymB9BQh\/XBFp7UWRi09Ug8xntQUPfsj51m00bLsKHUHSpKhdHPG0YQiWP8uSAULiLTka5+E4VQhoJTYjy3HqkCZ18MhJZ2wpRFQsfV42odT+7En9e4KBy+NAX\/7CTzkTMRQtp6cjQyvWjo0hO4Hc0MwL+xeyAGqSlo+sRiP1fwS8lONqL4\/d1Q6BgtshfwvULkOXr8MseXLdL7P5RtKKLPjMGUzhQY33AsF44Gt8glpBaOSexBpmmRpOwXibUSdjIkrRIsmaASmdJXjk3lxFYMUt6cLuiFq0D9myGsvcimGMaNUs4lIMPZnJC2HhmGBA2FTtlj0CLAyI36MkO7m6fizXgGjC4cK84K2tBUjisCQiWuY\/tyj5vPTTdpysXzsQwoTTDe5UfSWirR\/HZXOFMMBj2Za2N9hR5HHjeswzAjPS3l+GmGJzTe3fA5t5updRFQihVZWtC0C8q+4DsZpIJSOXbdRzpmLAgp6Slnp+vQphHS5kJ8kqqFyisMS4TvbsrFc6Sd6k6Ys9XkD9ZyCXRN7MKPkFrusttciM8znVnC14\/HakMmHomgRcgeCEnVmgAAIABJREFUtyCe4UdIDVh3iJDaiAVSbbi0KBxeFIWAwhTjSB3kEFKrNaQ83lVIe5ub5eGInkXwLyWz1P+t2iLTP6SeJ\/1\/B3yneSoWJGlAq3R4ZIOJqJNnX\/66NxufXUaYRoEdI6QWOJSKW81T8dZIgmvLXT71OPNqMDuVTTtwsPEIpdajw5Goodj1RvsEcQRN+XgnQcN2+gydyxdnIkUpkUPMnjJyn6jORWMxP0JkuctuBX5f2A1+NAVNVCx4+a0JqQP5RRB7ReWT+T1PSNWBvkhnd9vtiuT+rtCqvfHYJhJvKnD2jRB4UjR63ZdpPpX+Yiru6kKDdg7E68bRTykciuDCkXxKRqLe6gp\/moJP4nAcqy\/EFzlu8IqLw252WYrY87n\/idpKvKYgujTWKGNGmu3oT0ZDxjtTIJuwGGcHOIjjW2Fz8dwq4ROycCKR86zulY9\/R+pJR641zZbhiDdZC\/2gL3SdA\/Hs9xbTxsXigY18ZcSFsXbV45cnDXVf8muCGRq1o5DmREETOxC\/CGZEtNlPGydjbjQDt0RBR8imGPRRURDGSPJ8vp7VJowQzAoqxsfjVOxur89zu706Ug+Lxk1i+\/o03N3FUDe8b9zXoZ0Jqag95HEGS313FF+QJKR87SYkpKLtMcQpa3w5kA\/k8o2\/AyG99GkP+NA0QkoEZMQi2DQvCIMHRcErO9l8WioZYfmArIWh4J6aYCQ51oHXoPTruwZigJqCdsQwnOV6GdneDoaCtksXPP1ZHv60eDcBlvXzSrEqxwkMrUX+YoudAEUIactH3aCjaPQsHIV1y8Zg8RvD8MLsaNw3LRBdyHos925Yzk1XtX4Xn+xKsCxTy67DKHs7Bd8sSsCCFwbh6fv7onSEGzvlzCPTsDnEpSU90Jmm4D0p2WI05SYIKd8u7x74n01CKpV89Dj6hIGIJbzAjz4Y2nZlaU+W3HfOG2siAWI9P9wIKa1xR+rssTh+jtcN\/2kYASKkN3RsHP63V9jJwF8jZk\/ynX25R\/NyN2bhsV40aG0XLKwxPfevhWFwpxj0eSDLNLomgqcb+4dghJaCpm+caeSxLg0zujIIKUqxsJnp+WTNnWGRuBMKP7NHSKWD85VPe8CbFhDSs0nI8aKgDo\/ExyvHYcV78Zj\/dBxm\/ycCo4NpUJQGOR8L3ifSJrMALEVISUD8mPgCBeekkagnz5Eke2X4KkcL5iYJqbQ\/CfVq+v3ql5EIoimYYVFSRnKffdwkvsTh3RE9i+Hfnt4tvrduizz\/MLOlxTPFv7OvA6Pv1CYgy50C7RmOL\/kp+vw7zici25UC7RaKJbUGm9w0IRWLW82FeC9BjJBWovVkPMZqDTF5GTeq1noqHmPFCCkhNa8HG0auMpI4v5XQhYg95eQ+UX2LtYkfIRXbZfecwb9pMi2+2qBXa7+Qn19EZeJt6MCnQQYKTjG9seCtUfjwzXi8cV9XdHfnCWkxlqQRwq\/FFKsNjkrx\/+x9B1gUV9f\/zjZ6k15ERMWuiCWKqKCI2BAUUBREakx8k2iKKSZqypvim8R0jTGWGEssid0k9oaiPooNNaJiIgq8gHyWD\/2A\/+\/\/3NmZ3dndmd0ZBKNmfB6fhWXmlt8595zzu\/fce5eNUINSqDFqHnsQiwD2vG2S2N+qVKxLcYKGUqNrlA\/83f3xhZiTvnllJeSDcqGPUSIMMQqNd2kMJpJJZq7\/lajHD0Pm5nVYspE6XbSsTwI+z0ymQoSUTAYZ67+UeFLKs8a+IB0n\/u0PXy8\/fLCdJw7hsQcEB378OHqhj12zkT\/VjZ5wHsqd4Cc21EEBTbtQHOFOnpnhJQb7XNzf2RUdVBS8e7XGlJyO+Bf5n9kCHewUoDReeJ9z93YtQ1RtovuhUl9fBn4k41Tthtd36Sa1pcTDgoSrIhHvhJJFAV\/M1WenCMc8lnVMGAs+eYjhDMb1NR1fEMSnMgn\/DiP4GFJ2pemXePsomm88+oQ0G4XMLE8YN0VOr8xEUbJx6jVCZCgEZY8wrKAxz9xboztkQ9Ozl1VCWpffA70IIQ3vjWI2zaYqDTun+8GX3quphHe3NvhoXYpRPWZKya6Qmc2wk5kb05RdlohR8O8bohvQ7MBmP5+NwCGG5JnVxWJRyQxApT0GTGAMA\/s+8znt01GoqTZg2ulFZsWULUNPaMTdQ3q\/eBxObBuGDUuisPjTTujvooDSteGElJV1\/3+n6FPyyCCpWRlCzz43s0ZIq3NQviEMUd66fQQaT0+kzR6KYs5+svqi4ZjJ3MtJ9qz2HNsLv54yWYnhPdBDKJgx4GlodzrWJtlBqXRA1k+ss8nE7lxnqJX2yFxlMkmhx58xfFUp+KK\/zkiz97DdWd0W\/mpXvGyyaoTydFzeF4ffV0Tjx68jMDVcCyXVuIS07lAP9FCT2XdfZJjoFO2Acjpj3vbGIaT3t3RCa5XuhM4LZAZXkOw9LEKahaqC0dj\/SwxWLxiAec\/40KnpRroo2EYiT\/F6IwlngYDF2NGZOlLrfREzPizXYVqnNAxqD3anJwVVgR2wizNu6TrLYpHtS9LZvfAhsz+pIYTUqt2yEMijNAbp7mTvjZ8++0GYkOaiZkUIPZmmHcCuCgjog5k8DXZF2PcZsLbaJ0uEtHwkXmipw\/UDBlczPyPavxjaJF1PjN\/VtcH0UKNsXNs0GPvO59BXDM0mQafSEVPM7iTNwtaJZG+eEiR1UNcWAexN7S\/5vSH9LR6Kp4PIBJ0SPd7gpPSblG9dVsLEgzdGIeWXDkGGp4n\/lajHD0PmZnXQ2EiQC3lejM8zwZzYYeNDvTi6ZqT\/WRLiSamxp6Gfz87ugBA1hYDkaOMMOrbdZvZA115+\/HLBpxdVS1vDh6LQPC1Wv5Byd1NHtFZR8E8dYmFim4MN2x7ezyzsnewMtZ0rRk5qj8kZhv8TetnRY6\/XW5xssOJoTPBSQOXfFpvZxYLrI\/BcSwoq37bYRE\/wSYuHLRGu98wI18MhpGQPqTXOYGQbm5AvWMJHCiE10y\/R9tHgx6zyjceBkB5\/WbcnrOsrzD5Ks4GRjRPT3QUJKXu\/kLZvbxGEtKc5IaXry0HF7ki8GusCF7JiqbTDkDkGh2NmJNgAVd0Mb5qmMvIQUraPPWZwBq9ZPy0bJFSMxpudyKy+h5WLbg2DssvLDSSkZclYlu4BL7US7q19kZDSAS++0AY9ScrugxDSt3QpJgZip+tzzSqxhFT3fP3lBCydGoi29OEiFLwHhuMMdzawaiKOzuuKka11h5WQ\/QdfHjKknJrJk5aFwZlM28YlsNko5Gl3XcFAZLbTgJDi8c+G4uUUH\/hrteiWHYM\/2ckOARmTVLTrnzenU9Ha06lok\/DLOHvYde\/JSbPJwvlv29GHUmncXDBgRAiemdIVad0aQEjZVGOmPaYrpLV7u6ErSR0PbaQ0HwsrpCQ1JIhkJAzoq9t7xY4lbQAMqTdEzk1PSO8djUIOOXRLbYO2fYOQntkZ08d60vsCG4WQmuiNJJwFAhYjR8fRL9F9Ie9YGR9CdQh\/L37s1O4LQyiZ\/OAjpMwR+GTWmz2IQRIhFWu3LAby0RhP9rrbtsBSJqiySEiXkmwDBeyGRTJBoQAWZvLMBusXhH0fmeAUa4stBOQkvS2Q7Cfyw1eE6PGtxIj2LzobLKwL4v+us8OmhJTzfsVozOwsREgzsZlcYaZQYsC\/U6QTUsn9zUH56vZo66SFG7liK6A1VtF76jjtFS0rS4RUIEaRTEjN9djM70nGgNNXju3h6oJZHfRzAmPCrAwJPs\/sXbH6nyUhnpQae3L6uT4OM0PJqdf2GD0vxXwLj5k90GHLjx8hpDx6UTkOK1Pd4KS2Q6\/EznjtuRBE+Crh2qUDfjnD7mm3LjOu\/Ix+vj4UuQEUnGL6c1JwdeXd29QRwcSPh3Fjhmxc+r4tOjoq4R3WGtOmdkF6b3vYuLhjyo9sVpzB7omJh6URLkPsK+qMCTMdMsdKSB4khrPEGYxwZGOcJuAL0vCRYHdE2wYD5lb5xqNPSHNwbY4fnfLkFj\/QaF+gQaA5KJ1L9hgq4MqTslv9DdkvqoB3iuF0MCEl4h3URkqZhT\/XdEZ3+hjlTtjD7Fc1K68qBZ+EK+nDL1KXmayGmRFS3YXU5EAC0sY7RvVJGADMpctk\/2D6cpM6jcrMwZX3fKBVKOCZPNikPjb9xdIKaQ7+nKvbt+M\/ZpDhwAZm9eJRIKSsbtw\/E4sXidFXOeP5zVwSyeBaPh5bp5BTbSm0enqEfg+SmTxp\/DjORAQhJW2ovxCD3P6BeOG1Hnj\/\/f7YuC\/VYqou2276sygKo12ZPbIXyaXTGsR8whrtXNSfiUCsE1m1bIVVTBBJUnbpVQGJK6TRn3D2mJAVaZOU3fpz4RioJXuOQ7De2p4oI10z11+6b4KElOwXbk7vFw7KYk74Jca6o24\/7jfMCXg6nJqYkFaNp4+yJwFDyiIDPmzGRVMQUkk4CwQsRjrEykJKX9h3yKfA+OCtg\/ue2c\/ixw4hd2QvHOXCk7J7VbdvnOjhBiadVzwhlWC3LBDSuuO9EE5Og2wXqj8sQ5iQZuPibG96spS9YF5wxdxMnuJ8n3hbLByQk\/2HQ8n+w8AO2MmsSpvZQNH+RWDMm+mE9ed0bbBASKtSMX+gSiBldxKWkLMKiD9cwWZvCOkhT1sk9rfudBSS\/LTo82Y8Tn\/anF4V9xwcgQv6iVAJ+sc3IcDgJxijSCSkfHr8MGRuVgfdL3FykeTzzPRNrP5LiSelPEt0zLif9\/b3Qj96Et8PHx80iU\/M7IFOR\/nxEyCkBIOqVPwyyQ8jJ3fHOzP74PuVo1Gq10kevTfDTfiZWz+2ga9Sg+FfGPyj3jcwk1yU2hPvcib76bNOfmyHgbGdMPuNnpj75RCc+MOwGED+XsLE\/GLiYWmEy0COmp6QsrjxcwY9TrSMmo4vSMNHAiEVbR8l8I1Hn5Dmgk7hItekuPjjC55jpIlg6470QriNzqHuMNq\/mIFtkxyhouyQssRwUA4Z1OTS7zbPxulJCF1Ovu4QIZKye4VexcpB6dFk\/Sl9tBKxB394hGADJ43WuLwsHJjiQh+37BM\/0Hj2iCWkLq2wlnm\/9oAuTU3pEYQlVmauhNpOUpdP0qnLCniNiLS4Cnf\/184IUZEDiIKxnHPojmEPohYpS1knzg4s9jMLO5jDh4wO5+EQ0nVGMmDfYz9Zo+wMs5VGJj3bbIWUTdlNMtlDSmaigztjPzMxUP9HMs6zpynThpXdYG6rC0qqUnH+qOGETiLPeuYgJK+UGP3+VH6MJba7Kg2rRtvDI2mw2b5mWo+sGv50rEnUXRY+eVowvDyCsfIyi2Eu6Lv9lKaHExgI6YQfOPIjzs0EK91hV7o9u\/oDhJg2sYQ0MGOYLjW9YgxIahxF2SLhGwMp5u1H2UTcuJxplHJt9pwQIa0chy\/JITBKJ0zZwLSfbL4naXnk4KTdXMdlIKST6WtfCDbsjLUSpvuQzdrA9JVf1pxDEdSeYA9bIGXoCSlXF9mVGqP9KqysJOiNFJx5ZcrWafLJHvBgrS8ix4cQlsLfS8CgMhkf9lKBUjri2fUcHa7OxZ217ejTbL3HROv3ILErqlrTPXVm40uC3RIkpNk4NcMTNmQfOOckdkFCWpGId8OU9P6o1\/QnKQtgwSNP675PQp8EUxazcXkOOaiJQnD2cL2tMh8X4v2LsB6wepmNyuMJOHGS\/95u9n1dGxSwH6k7+4D93vCZjXOzvWFLtutkDdfbb\/rvJbrVG6VnK6zW7+MXwN5MV0g7JfS3PBFzB9jAtU8vnCS+qGoCfkpyhJrSou9bCUy7pMhKFxgaxxQ67EjqHDno0BCjMJiWDsEk0Sm7\/Hr8YDLPQuWFiaixkv1jXgdpvzi5SPJ5ZjIVIqTm+i8lnpTyrHk\/s3FuTgB9nod9l1DsY9NYSdt57AHRa378dCm75nqRg\/JFreDbrDXWme7HN8OH0SPR30\/EyngbqBwDsdAohmTLYQ8UJfdTG7IJ64sGYZy3LYziE5M6pcTDQjiBTYMleyRPsqvB0uMDg61h+2X8aS4PcZzBuNym4wvS8JGiX+Lto2i+8TgQUjLDsy7Fkb67zzaoOaZ\/NgQH9iXixLYh+PHjp7CUbAivmojNk5yhpbToP30EbtAzQJm49GNHhDlQcI8MRyFnVqh8bgC96uqXxjkpszoX93d0RXuyf01\/dUkm1o93Ro9s9qqLXNzJC8fQZhS84gcy96zlgq+8uvzeiKSvCNAibMJT+GlDPI7uGIGNX3VGP3I\/mdoL7x1mZsWqUrFmrCNNYB1aB2HGZ0Owf28iTu0ajp+\/Dsec70brnS1bl88E5toZzmCuPx+NNHKyILn7bEQ3LFgZh+OHEnFkw2As\/vApLN9rCPI\/iSDXVyjg2jUE\/1k8HId3x2PPygGY1kd3rUXvN5OM9skaBlAOiuf403dlagJb4INlcTi+azjWzu1E94uy8cUnBSazfZw2ojoN86PI6rE9srgnwVZn4fALulNfjU+XzcXthS3pky0dhkcaVsmLIhBDVu18DKf61iwPQevQDvorb1CSiM+jbaH2CMZysrpWGoNJLT0whb1apzoDpz9sDg+VLZK+M8zysRgb64fEdlck4M2OSlD2jugVFYg4ckrksBaIHxGMjOf7Yu95LrkyNnIs1rdXtYW\/UgEXFy2CJg01Ws2uPxWOaAdyxYsjRs0ajIN747FzaQReoOWnQuR74wyTLTxYkTrurGmHAHLNiocPpn0eiwO74nFwfTS+meRJHxLmOCAcl2iyn4PrS9qghUoByt4FCS\/1w8Zto3HmYDx2LhuAz98eiONkEqJ8JF5qQwJwB0xcwj3p2aR\/LCH1bYvNzMEw9y8mYFm2J1wpJVokDdJfXUDusdw6UXcol1d4Z3z3UxyO7IrD9iUReLobOdBEjUEfsn3NQcnH\/vQdxS59wrD9eBrKC8fi7En2UBOTdlQbxq7ZeKpKwZeR5FAUJYKG9cLPv43GkQ3RmD\/Zh07BtI3ozWCjC0C\/jiSrMVr0e2UYLl5Mw7XjSbhSTByhFL0RiTMZT6xMvUKwyeIEEGmfyL6IHB+sfor\/lIZBxU\/t0UajgFt4GHZf0I2TuwUxeI6+3oMcFmMYO\/Xn+iLahlwV5IO31o9FWdEEXDycorsezMjuSLBbLCFVueKlXxmbWToBeZ+FoLODAjat2mMj57RplpCqQ7rgABP41ZwbhW\/HN4MjpUTIpCGc09MFsGDlybFn1n1fugRbzAbkxO4yGTTlaTj2bQf0dFFA09w4xZTPBor2L0a4m4+5+1s709dFUXbe+JA5WZNPl9g2aCMj9L7W9Ln6y7F4OpicnO6DmZuYDJTr4\/BLrgcclTYY\/FESJyuFxd4OGauMJztMyyW\/i+pvVSq2ZDeDndoDsw4Y\/F795Rik+1GgbFzxzE\/Et0jQP45dMvZBfDEKg++1gUh0IvY5CEvZE+Ql6jGLN7dOURiQE+D\/5UpP1DQfJ7AnktEJvjoMNtKyXCT5PDMdlKD\/UuJJKc\/y+YLKFCwarttvGTx2kOHeSz57IFkvsnGM3vKmRouwAOak6hYYNTwIyRO64Ostqeapwma4mY9fMjbqCsIxyFEBTe+ncEngtN47i4PpAwrVbTrjAOOjSEZLF7UCDs09ETOkBR0XjRoWhIT4ELzy8UhcJ2VJiIf1fpBrN0kfyuMxnZzOb3QFnvT4gM8ucL8z12dxnIFbBo1nE\/EFPT6mcQIvPoZ4iGsDSPvMuZFI+0hkUZkEUXzjsSCkpEOlSVjxjB+CHQ0Xjmvd3DDqpcG4yB58UT4OP09tjnYuSmidbOHjpobW0RGRGf1xnDXQJAjf\/hSGBOgOvVE6uCJtnu44\/vrCGEwNJfeQkj2itgifNhR0CmS6g44MuzkiJNgBro626BbfC3uY61L4ytMpWzaure6GmBZq3cXtCiVcWzXHjB8G4blWSjj5uqF\/YjiOMat7uJ6EFc8GIMTFcLEvpbVFt1HdseWULgDj1kXZOSP25VhO4K4zHHfzB2JalAtc6UOYdJdm23i4I\/H1WBRzSDm5oHtGlBMclLpnNC4uGPrSYKzKdYGNoz06hbfGl3sMDtZoAF0fgwVjm8GVfpeCg68Ppnwbiw8idAG8d69Q+jJlo3doQ5eBQ+8EIFCjq9MxpA2W0vdN5uDa8k7oQV8kroDKwxuvr9URxNqDEUhoSdKyFKBsnBA3ZzTIhcj\/GehIpx0rKDXaj43E+Urd6lUAufDXxgZBrZwR4KKBV5dgfLSZIUdlscjxI\/iq4B7ogjZ+Wjh5uCN59gj9wQJcjFn9IKRISrtJv+uKEvBlvDs6dPPCU93Z\/x7o5K+h9cF1SH+UWJlNRulwPNuCAn3HqX6FhXUQmTj5WRt0dtGNCZW9PSKyo7B1li89WaD19Mbr6yeiXgArWjZVE7DhWS94M\/JQam3QaWRPbJ3flt7vGtjJD5mfJ+r3XxUu7IyYVlp6PCiIPBRKeHVpibdXp+iCvooEvNtdQ9\/ly72Xy0wPCCF10aJlNx\/0aGEDVxcNbMlqL9HBF6JxgR3TtM7kgozNaT3tdPJWKGDj5obRb8XihzR72Dg7omu\/tviOSQuq\/2MInuuk2xtM2ucZGoJvdhqyI7ht4cqabzzdPdAPaR2YspRq+PfugGVreiGSTARo7BA+bZj+zuPSlR3RlZEFpbFF95QI5F+ZJFlvyCy6VZy5MlWo0WpQN2w23a\/GYMf2V1RfblgfH2x54j+ljx1id4uWhWJYGy00Gg08vWzgoNEgKKI9Fu5lDwljxkFVKjbmsrZIAa27B9I\/iWfkwo4V5lOs3WIDeUqDgJb2cHPRwklLgdLYoNPwMGw6aSDEBAeWkCodHdDaV0vrsw3ZP+XmhvjpQ3BFb3cFsODKk2PPaIyt+T6xfaJXSLVwbeGJfqFOcHfRwtmGAqXWom10V6xh7gUkdXLHhcEG6jAU618s6UfNqrbwochkmjtm6u\/GNpYVtw3k8Lk+kyJxVo+j8bP3TwzGa4Nd4apWwtndDu72SjgF+mLyF6MNE5gmNtw+KABv\/sTea21cHrftFvtbnobN2a70Kf7kXu2kBYbskdq9PdDbSefnKDsXZC2dgHqRsuL2ncW\/jugZT4xSSnxIRSLmjXCmtyYpFCoEDw3X2WwJesxXJ4uDRQxomWTr7lEn9z62MmQsse+zn\/x1GI8Jy3IR6fNMbJ+ufkJIxek\/\/bzIeFL8s8b9NMQ+uag\/Nwjj\/YkfV6F1wgBc+JM\/vuHDT0gv6HZVpuHYnGB0a+vJiUG80L29A5zJRLRLIL47x64eCo8BHX6cv1ckYi65E1pBJgI9MH0Dz4RvxRjMHUCINhkDKrTPGYrKqmyU7wlHchdX9NTHRF54KtQNzZ10dyGP+HyCTndFxMNCcSDJUFj\/jAd9D6lCQcGrVyi2Mdt9pMQHZv020Ss+eYjhDPzlNj5fMMKHGycI4MPXH4v6RVbsG5NvHLvfZJRU0SglmygAyiaiOD8RZ45NwC2BWRlUpOPa0UScPpKCSpPAll8ROAPNtD7692zcuTgOhQfHoODQOJSWSBzAVRm4cTwJF\/9g0xgzUVmUITwzxbT\/1OEG1MVpf23xBJzPS8TZglTcESQ+ObhzYSzOHk\/FXeaZu1fScFsIW075BMv7xSm4eCrdsBJXkooLx1P1q7kNw9uaPCz\/va4kDZfzE1GwPxFFf2SYp45WZqCsIAmn9o\/BmROWsLFcj6W+3T\/UF8N97TDiM77DCnQk0\/jC5obXRU4cLD6egip2YqM6A9ePjUWptVUzjixrr6Wi6GgKKtkySiaiXFDPs3GzMBmnDybhEg++5FRRL6UGwz4zrDibY5WBqmImqK\/KpOVx5uh43GTr57TN8G42bl8Yh\/MnJ+r17c7lNAHdzkLVqWRcKmLH3APgW03KGoviYsPkzJ3zyfR4NrSNKZ\/I4tg4lJdKtBEC\/bWEs1ndvGWY9ltEXx7C+BDfdkbX8pJRfMWAP9\/7xBZdKEizmjJI3rVqt9hAnpySviuT1ruzh5JRctWYiLLtYAmppn0ojpRm4MaJJNpHVQsQKPY9SZ9WfJ\/VPpEr0IrTmdXCHNy9OA6kT39y9FpKe8T5F1P9Y36vmojTawdh3bYUfYqwlLqFnmXbdO7URIHsHoH2iBg7bNmW\/am48sXISqiPkr6XqMfWyraIAcmu8KDgPLif4VwJEbhaq5P37w30eQ3SfynxpJRnmwobttzyRHwVYw\/vIf1wxSyey8SOLCeoVK54dadlu8qLP1uHpM8snPlPIPw9A7HAZEKP1HF3fQe0VFLoMDWemQBnxlIjxcPG\/WjM+IBvzD8AZ\/ib+IIxPnx9svydRdug1xMrfKNRSCN\/IU1DSPUdswzOg4Irvy\/j23AdyMaJV5pBo+K5ooXMcl8ciCQPJQInGo5ib3hdj56cKr4IhEeXrtjL3Q8jj1tjJyvj8WjjUZWKr5l7SNm78SyN0foLfRHN3EPaGHf7WapL\/tujZ\/MeWZlI1OMH6sfl\/hjRzB2vbjHJYJBt3d9i68je+q5qCu2eG6WfwNXLtyoNK+JtoQlohy0Py09XjMZbnZRQt+mCPLOJ5xyULQyGl9oR2atl\/dHL6Z82dvi5ZKN8KxPSf5oyyf1lHE8Oyhe3gi+lgGtoO3yxPA4n8pNx\/uAobP2mB1K72MKTpDQzKd9PlvHJxqVfonHQ6NQ8OYB8smT8D5AnORCD3GGndEDuOut7Ddk72lT+7fCrhMwEWS\/+Abr0d\/pFiXr8IPpYVzAMa35r+J7EB6lbftd8HJHDg1K8SVquB7I\/isH+fUm4cDQRh9ZE4p1kd3i4ky09Fs55aGy9rUrDT2PsoaS06D4xHOu3jUbhsWSc2h6LJW+0RrdmZJvcMP3WKVmm5jJ94jFpFOrJX4hMSBt7QMvl\/S0zjQ0zApNwenEY0qM80DbAHp7udgho2Qz9hrbFzK\/jmEPCdQNLAAAgAElEQVS3\/oEGR9bhx0iH\/6n6mY49b\/ijjbsNmrnawL9TEN7faHwyt5FNKB6BdyKd4elmg2Zu9ug6oid2GZ30\/U\/FUe63kZ48dNsnUY8fevtk\/Whq\/biVNwgzUwLQo7UjfN1t4ePnjK59WiBr+gAcZA6La+o2GJX\/VyJ+mh6CmFAXBHrbwtPLAa07+SAuLQyLf5NwJZ6sq09mHMHPJRvlW5mQyoPmyRw0slxluco6IOuArAOyDsg6IOuArAOyDsg60Dg60CjUk7+QxiGk\/GXL38oIyAjICMgIyAjICMgIyAjICMgIyAjICMgICCIgE1JBaOQ\/yAjICMgIyAjICMgIyAjICMgIyAjICMgINCUCMiFtSnTlsmUEZARkBGQEZARkBGQEZARkBGQEZARkBAQRkAmpIDTyH2QEZARkBGQEZARkBGQEZARkBGQEZARkBJoSAZmQNiW6ctkyAjICMgIyAjICMgIyAjICMgIyAjICMgKCCMiEVBCax+sPtwq34ocfd+JSzePV7sertXW4WbQfa76ahbdXnkPdI9z4uptF2L\/mK8x6eyXONXVDa6tQlLcBi+a8jjeWnELt34SLpD7fKsTWH37EzkdxwNTexOX8zVj6yQy8suAI7nPwFD3OLZTBKU7+8e9CoOYydi18By9kjkdiYgqenrUGhbLt\/rukYb3eupso2r8GX816Gyub3KBab478hIyAjICMwJOGwGNGSO\/h\/IqXMHNdOeqJJOquYuObM7CsWBdx3zk0F5MSRiEuLg6jxs3GtnL6KSOZVe+bg4nxzDMT3sX2imrs\/0864kfF6d5LyMDnh+8avYO6i1g+NRGj4sgzo5A49UcAd3Bo7iQkMO\/FjUrG8z+cNQ\/G7xzC3EkJzLtxGJX8PH44axqy16FoWTYiuvVBylcncK++BOtfHIiwngn48OBt47bw\/VZ3ER+Fa0FR9hi+sILvCfm7RkDgzoH3EOWnAaVQI2TafiOi0AjFN14Rdw7gvSg\/aCgF1CHTsJ\/LaBqvFn1J947PQ1J7R1AKFQInb8c9\/V8e4g+S+lyHix+FQ0tRsB++EI\/aiKk9swSTurlCqVDCI+0X6HmKhHEuWMZDFIlclQACN\/dixlNuaNb7X5i37FNMCLEBpemEN46a+gWB9+WvHzICd3DgvSj4aSgo1CGY1tQG9SH3Tq5ORkBGQEbgUUCgcQjpQ7rf597voeji4IbXdmYB1dk4\/bYPXH3bYWsZe3lzJgqme0CjUEChoNAyNQZlVezf2M8MHHzeDRqlE55eO0l3L8\/1eLzRSQmFQonur45BDU9\/6s5EYKiTAkrXFlh0Lkf3XukYzAzVvdd16ijc5nmPXDhcsz8M3dUKKNTN8Or2DJ67gDKxOdUeSoUC6lZdcLAkDi+3VoJSUPBPH8rzPNsX9jMTBZ+1x+j4Llh1IpvzfBbOrx2AzfkEL\/ZZ+dM6FkK45aBkjh+0Cgohz8bhfmNiWp6MbV\/FolCvy2LkJNTOXNSfC8dADdGnzthfLqasB3um\/LMA2CgoBGYMw73GxEVCWVL6XLO\/HyaPDMbLi8ahTkId1nXnwXBky7+7KBjOCgU8xsZw7JHQOOevk78M\/mfZepvuU1hXm67Ov6uvlurNRtG7PrClbJH2YyZtl2tOjMSGzWMF\/ceTic9jpg9VE\/BlfyUUKhdM2\/aE+VMxvudRiFblNsgIyAg80Qg8RoQ0C79PcoBK5YKpWzKBini83l4JlU8b\/FJsCADuLgiCvcoegb5KUCpHpC9LRb1JwHnzi+awUXtjjp68TcKiIYRYqjFmoS5IMAsCyoZjSiAFdZsuOKQP8DPx4wg1vTKUsEDgPVL39Sgk2ClA2Qbhx+uGtnLrqL8YiQRXBTQ9euF8ZS5urW6HQKUSnabFN5xM\/hWDdB8VhnyW1vAyTLDjtvmJ\/dkCbne\/C4J9ExDSW8tD4GcbgG+L+PWDF2sL7cT1gRht9\/AI6d2FLeH4NxPSh91nXpk00nipWd0WvpQpIZWgG2QirBHKaLQ+WtLVRsKs0drapO3JxPpxtlCqnPHClieM2EjB7bHTh0wsH6kG9QQSUlG+54kOg+XOyQjICDwKCDQBIc3BncJEHNo8Ant2JqNCT96Mg6n6axNw+vcR2LFhJPIPpaBK4DlDkJGJVfEkXVIBm9DuOHltKHJ8KXollKxWsc8RwuCg9sIbH7dFK7UCqoA2WPsHs6LJOMzqrwJho\/bBfwrY1cRJWBxLCKkGSYsEiGXZCPyrBQV12644rG8r46QUaoz+TuA9UichB\/YKUPZBWC5ASFEyCMkuthj+mW7F5t76Dmjh4oOP8tg2GuPH9pf7ee9iCq79xfZ1EvJe9YIzpUTUu0m4cSGV\/l92VVwQVPNHCq6XkDqzcftcIvK2jsKZC9w+ZuNWYSIObIpDwcl01AoGI1koOxqPfZtG4NDhVNwVeK6+ZAJObx+BXZvjceGyUBszUXoyFXdIGZUZKMkbhYN7xqK8VACbqgxcyxuF3euHY9\/ORBQXC5XLfd8ybrR+cQhp\/fVUnN0xCicKJgqvDDLt2LNxBPKPTTRfWb06CrN6aqDU+OHjfJ2cbvyRhmqLq6WW28nqnH6FtCoTNw7HI2\/fOFRaKrcsDed3jcTuzaNw1kjeXIzMf777vTEhraPH90gcOpImjEt1Lu4VJePothHY\/dsYXNXrrnn5qM5C+bEE7N80AgcPjMcts8wHwzjT95noSfkklP\/BYHohFRXXOOOpLA1XCieZTViZ6v6h3xJwsYir+8btu39lHI5uHYH9e8Zx7F02bl0YjzKh8W42DrJRWTAaBzaPxJEjqbi5ui38BAip8TjntkV8GVy7YfyzxDFG+lGWhgu747B7UxxOnjbHE9VWdNUMC26fdD\/fKxqLY7+OwK6t8ThzLsNMZg21H\/t+T8QNrv2onIRreXHY\/esYXCnm6IppGxs0TnJQU5yCb4cSYuOMyavG0za56jprs3Nh0L0slOfHI\/9EullfxY0Zczk2uK+mfWd\/t2bX2OfMPkXoQ2kqrpzXZRPdL0rC4Z3jcNNozAvEGVWZqOKM95tc2XL+VnqRyY7St82an2ogIRWJkSQbIkb3OPjRtnh7HI4dT+NkWzBjTKzveRSiVbkNMgIyAk80Ao1KSOsKY\/HWIGc4KknKrO6\/fXN\/zFjLWaWsSsOuGYFo7axFcDcf9Aq2oVNsvcYPMTeWemdBjGcOKteHYUSYJ4ZNH4bKqgwcercl+oT64cXlE8wI6QdH07BlkjM0CgrNk6Nxg+PMHkVCWpvXD6\/OGoFSup05uPpdGN5aOV5EOmEGDv+nLYaGOsJZw6YTZWL3VA94aCiawKu1ajjYk\/8aBGdYSgHOwKE5bRHb1QGO2maYOj8CWaG2TAq0ApTaDv1ficXRFd2REKKFmpExpdSiXUIECoyC7xyUbeqFMe21sHWwQ4CPlt6z59YxBAvzOMF95QRsfSUArRx0bSV6Q9k5IvqloQaZlYzCl6kBCPNTw6ZTJ\/zwaVt0b0ZSmnU6Zhvgj5nr0ziBWw7KN\/bA8JZauAV5IiLMGc3UCig9QrCRG6AY6RfRMeu4sYS0zaT+WJTlBW+Sik23Qwnvp7pi6wVDcEnI\/LU1YYgNUkPFtJWswreI7IZt7HOlI\/BaV1to6TFDwYaWkxoOjk6YvFaIQFtvp56QBrfH9191QB9PA14aT29MX8MZkwSHqjTsnt0SnVxVcPR0gJ+LEkqVFl1S+uO0kVyZQMYEO5aQNh8fgcU5XvDi4OLzVGesP20c3NedG4Z3RrjCVaOGb7ArQnw10Ng6YMDTA3HOSEbZKPmlBxLaaqF1sEebEBf4Oylh5+eL5xcmG9sMZuKHS0jrTkUhiZ64UsDG3x+z16fh1o6+yIr2QKCTkpN6bUX3bRwRPX2Y8RaAinFYnesDPzstWnTxRFiQFk7eruja3hl+jiRDwwUv\/SYkQxbHHFTt6IuJobZ0KriDuyOCmzsg0NcGWqOUXb5xLrUM9nmeT8ljjEwKTcDvbwShg4sSjt7OaN\/KHs5qFQL6dsKKI+wYF6GrJrrEJcg1R6Px6mAXuLs5IjTUFd42ClCUBh2fjkUVea8R7IfG0wdvrU7AhteC0N7ZYIdUzq4Y+8kY40m0BxknVWlYEKuFrUpnMzS2xCZrMezTsTjIsbsvLohAZledX6TsfPEpk8kjasxYkaOkvgrKRYRdE3zXsj7c2R6OzEEeCHBQouuUKMxP9aBtN7Gbkf8eR\/t5i3HGtTjMCCVZSwooyYTufo7duR6HN5m\/eUaFMzGDSD9VLZWQisRIig0RoXtG+D0TiXlpHvDQ22IVAiPDsP0i46Ok+J4nOgyWOycjICPwKCDQiIQ0G1c2RWPTjmRcvTgRFWfGYN0L3nClFNCEdsepCl0QVLOhA1qqVOg7O0m3UlQ1EYffa4HuE60RUp4gisfpsSukHxzLBoqH4tlWSlBKB4xfbAjAH0VCyg3CpP5ceyEWz7ShTPa3ZOPYS82gUSglpezqy1LaY\/jMWOTnj0NxQSL2zuuEcFcSDNpi2OzhOFkwAWV\/jMep9eEYT+931SB27gQ9KazZ3QN9nFTokBaNInpFLgtXlrZFiFoB29DuOMHoQ93JEVi9Kh7nTqeh8vJ4FPzQFX1dCPn1wOyDbDCRjRtrOqCdSgGVZwBmLY3DqRMpuJQ3Ekuf8UYzcnhP267IZ1euS4djSgsKtk\/1QiH9XQ4qd\/TGqNB2Vggp0THLuLGE1DsqDGu3JaLo5Dic3hKJqb1soFRQaP9CvGEFtDIFu5cMweEj41F2ZSL+3D8Y05\/S0ofVdH8t0bCqXJGAGR2UUGilpOxabidLSAXxCjFe6T86wwvONq7IWjJOt6JZnoK1qS7QKFTo8fpoQ1t5xhzRVx0hVcAjsjs27UzC5VPjcHxdBKb0tKHJuEu\/PnQqOq3b1+LwRlc1VG5+eO\/3iTqdqUpH\/iw\/uFNKtJ4UiwpmAun2r6EIs6Pg3q8H8q7oAqn64nh80N8GSrUzcn9i3ift4iGk9YUDkexLoVnPrviVnQSoSMXWTFeoOSvdpF0G3bdDzKvR2H9wHK5wdF+hcsWr9P51nZ6cnuUFB0qLmI+SdTKvGIf5MTZQOfngg50TcHH\/GFy6yp2gMLdhtYf7YJCrAmqfALzzS4qeYN\/jWSHVt88kbVBKGcK2ReIYq87AgRc9YK+0QdSbo1DJTKTd3NkLA90U0LRsh82X2b5b0VUBnaorGIDRvkq49grDvmJSVg4qNoch0tcWXRlCKtl+eAfi\/Z\/iUViQgssc+6Fs1hwfbhiDS+fSUHo6Eds\/ao22WgUoxwDML2T7kYkHHSdk0osv9VMvW6UdYl4ZhF3bhmL+lCBExz+Fg9dyAdFjhiPHB+qrua7qdUesXROQq0UbyxmbPlFhWLUxDtvmdkZCZDDm\/EZWTK3HGfd+7YK2KgU07UNxlPEzurZnYVe2I9R2PviYxAckrV2knxKSmx4T076Kwigb4m2ISN3j4CfkozpM5fgosb7nUYhW5TbICMgIPNEINCIh5XFgJA3VWQGlV1tsplc9cnD1A19oKRuMXcRNmcnGvVKWfPCUY2rsLfxuREirc3FzfUe0Jam7vq2wkjmM6EkjpCQlbulQlcn+loYFgfxlEZlkYWeWI1QKJWI\/m6hfkSZBYtlnAbBjDmCiD7SpSsXiYVqoXIKwtIgN5shqRhLe7aakD3easUdI3hlYFU9ODLZD5k\/sKksu8Fck4mx59kSWDcezzSmazM1n9l\/Wn+6DSI0CzRIGoZqjK3VlmVaJlcVgiRAvkhJuQmRIUHJvQwe0UCpgG9Nft3LDqZcbtNxZFAwXhQI+qbF68gGxQYFRmVbky0PO6HYweFE2gfie2Xtdf2EARrlQcB0RiXJOJkHd4R7oqVZA07EbjhkFduZjlF0hNT3UqP5CFBI9dAd6zdhNZJ6Dq58GwFlBod3zowzknfTt+jBMbk6BsvXFJ2RVqGo85g3UgFK54pXfjVca7\/7Snsbbrm9vFFUy7THpc33xCLwRpoVnRA8coAmNod235rWgddb4cCq+cWSs+zFzmf3YlUl4j+iyxh9fs0S3OhdVXwbCVqFEzzeTRGQ3TMSqBFsoKTuM\/Z67wp8LPkLKPzallmHAgKuX9M+SxlgEhjgp6D31eexEEK2fmfg9g9gJFQa8p1vRsjamzNpBl5OOn8fZQ6VyxnObOHbAaAzw9aVh9oPSBmDBZU55VWn4dqAKlNIeOUymQmOME2FiI6R7pE0SxgzBx4ocxfSVXyYcfEzkwGvXTJ4xlGnZdvGPTeG66e0u3DijIhFvhypNJjVJavlITA1Wwj0uSmfnJPkp\/okEQ58stI\/BwQwjCTZEiu4J4cf6KJuoCJSzshHre57oMFjunIyAjMCjgEDTEtKyWGT5KKB0a42fmTQ8eoVUqYC2eXPMXJaMW6xhbKRPU0JKgridk13pdDj\/+IG4VpWLJ4+Q8jlLy05f2JHylUWcbTbOvEFOMFYi8v3x+pVQUk7N8jbwpBRwTx6sI1lXByLRRQF1cFt8vyYGq76JwNyZYZj+dAgG+JN9vxokfi8UZGZhS5o9lJQNUpdxnjEhG\/r2VyTiHXLSscYXc08z5JdZIaU0jhg2fTDO\/WU9WNCXJ3KF1JjI5KL2UA\/6JGVtv3D8ySF1hnJ1bWCJhh4rovdigwKjMWJFvlbx8sPnZ3R4VS9sCVcFhTap\/bF1xSAs+bQP3p\/eFc9P8EVzJVklaomVVtJ2hQgpGX8rR2npg790h2ulY+lwshdci7FLOPKl+5aBZfQhYWqMmpcOFEci3lEByjkYq03rvxaFBLIv26EFlrKHmnH7XDwan0baw6d\/Lxy6ai5\/\/okF67o\/gNX9ini81o4CpW2OBVcM5d9eEARHhRIdp8Vbn\/woicZ4N3JydyusJqtgHPmyemJ6yq7Z6prkMozr4dbJt8JM\/51njFXNC4KTQgGXhGjjlNbqXNz+lkzaKOA4LJLpkxVd5fRb356SwZjQTAGVXzv8amnPs9m7jWA\/6DKZw4c4dqgxxokwIRXSPSIvCWOGtJ07DriTBTxy1OFt3le9HMzw5dcfVl+N7Jrgu5b1gX9s8tdLt9MszsjGhbe9YaNQousrhuyOmvUdEKR2QNZPzEn3kvyUJflYaBsHAzOMJNgQKbonhJ\/eR\/Xtg6usjxLrex6FaFVug4yAjMATjUCjE9L7xeNwYtswbFgShcWfdkJ\/FxJwGQgp2au2c7offOl9DUp4d2uDj9alWDz4RIpzNCekZMZ4BF5sR1J37ZH47XhUPYqHGnEcl5T+6p7lc5aWnb5wHXxlEYebjcI3PWlC2v\/fKcaEdGUIvCkFmjGEtO5QD\/SgV6V9kZHTEf8y+98Z87ZzyEh5Oi7vi8PvK6Lx49cRmBquFU9IySxzGCGkPvj0FLsam4PyDWGI8tbtm9R4eiJt9lAUiwpsLeMm5Ozr8nugl1oBbXhvFLPOnpZpFqoKRmP\/LzFYvWAA5j3jQ6exs1jRchAbFBjpiOV2CgalZnixEw0U\/PuG8MiqI\/71bAQOGe3rNA\/AhAlpFvZOdoZaoUTvWcmoq0jEbDKBoHTElI3Gq55kFX7rRHt6Fb7P7GTUHuxOk3xVYAfsMpVdWSyyyd5QtRc+ZNLvDH3ugI+yXKBROiB1qfHKI6v3\/HKUovvpWJtkB6WSBLhstkcmduc6Q620R+YqvuudjHEjOkOvQJulFgqtkJq3T3oZxm1g8aA\/hYgMj86ceo1MTlEIyh5hZrvvrWkHf6UCmp69GkxI9f3qatjuYdRW7lhodPtBMMrExgl2HDvUOOOkQYRUwpiRJkdWF0z7yn5v6VOEXePKyOhny7aLf2wat8VanFF\/KhwD7bhpuxn0RKemTRewK\/rS\/JT52BPUR31frWEk1oZI0z0h\/Hh9lFjf80SHwXLnZARkBB4FBBqPkJYlY1m6B7zUSri39kVCSge8+EIb9CSpNFxCShvrHFTsjsSrsS5wISswSjsMmcPZU6c36MZOyLoDYFIq1V6g95Byyrm9tQs6axVQebfE\/Nnk2hfuKbsZ+GGYCpSl03LLhuOZ5hQ0nbrhuD59kXFSlt4jbWACPYun7HLaKqafxs\/wOUvLTt\/4fS7OfGWRv2ej8C0BQrrKmJDW7u2GriTVM7QHzrLplLz9y8L5b9uhh4cSGjcXDBgRgmemdEVaN2mE9N9mhFTXn\/rLCVg6NRBt6YNKKHgPDMcZvey4feb+bBk3YWff04yQ3jsahRxyKJTaBm37BiE9szOmj\/WEC4e803IQGxQYYWi5nazOcQ\/4oeuqTIIxXtk4\/rJur3GPGWLSTLlYGX62REjZVO9B\/0lFfcVozOwsREgzsZmsjiuUGPDvFNTuC0MomdjgI6SlscjyVtAr4\/qJCA6h2r4tDD3sSap+EJaeNE8P55ejNN2vKxiIzHYakAmP8c+G4uUUH\/hrteiWHWNxlZwde7V7uqGzQEo0u5pibYVUehkGmbHt0H9y8DO6u5ZHZ05MdxckpDU\/6a6s0fbt3WBCSmxIF4JNpzCOvTVte1Paj0xsMiGkjTFOGkZIxY8ZWpai5cjiadpX9nv+T9F2zcheccuybLv4xybzvtg4oyoV3w1m0v23ZwF\/xWCitwpPvWWwceL9FKlbyDZw+2X4WSxG4myINBsthF9dvrmPEp2d8yhEq3IbZARkBJ5oBBqJkObgz7m6fWH+YwbhOrtCxKximBNS1nBn4c81ndHdQQF1UCfs4aYXCToz9l3+T9oY8xBSVGdg\/9RmsFVQaBHkCLURIc3EmjEkrVCJmE8F7uwsjcEkD90K2BW2f6yTkgmp0Qpp\/blwDNQqoPQMwXr66hh+WdWfiUCsk25\/76rz7Ooms0rGSZVrWJBlqPP+mVi8SE5XVDnj+c2mq3KG53SBecOCJTNnXzUe8wdp6FX5lEWGA7XY1aO\/c4XUmJDmoGSOH2wUCninxOiu1GnA2BMkpORk0WiyF88Rz27IAqpSMZ\/szeNN2Z2EJWQvNGWH9BWZqP8jAkNsFaBceFJ2r+r2FBMd28Cm8xoF4lkomO1Dk3+3fr1xymSFlT9oEwo6hSdj6i\/EILd\/IF54rQfef78\/Nu5LtZ6qy+Bbf7I3+msUULq3xs8m40QsIZVehqm+c343wo\/zvRkhzUHpXLJvXAFXnpTd6m\/I\/lydPokZU7pnOPVV56K+kLEhrsFYyZNyTd5pWvthStIaZ5wIExsh3SMnYIsfMzSWouXIYm7aV\/Z7nk8pdk3QjjTMxpK9tFLijPJvg+BGUQiZEoeyxa3g6RSAb9htHUR\/RPopnX5akI9pPyViZN2GSNM9ftuWCzMfRdotdjL0iQ6D5c7JCMgIPAoINBIhzcIO5sAbo8M8OIR0HXOoUenRZP0JmrShrxqPzyKU9JUcG6ykBeocA4+T5DgEYoztCSE9ar4qgpI4vNGFBMPkkBXuCmk2TtP7IxXwHj3I6GAXts77+8LQTU0hOHcE5yAWxknxEdLycVj1XBjWkiPWSYBgx38P6f0Tg\/DyK9HG10lw+sPWb\/mTdZbOmLaNJVzZ0K1imO\/5lF4WwVxEym4Ss4e0YgydlklO5E34xni\/Kbdu+q5VktrXjbuSaiCkE37gpPUyGKqDO8N09UZ3uIwPPj2pI7X1fyTjvP6ET9J29jAtW5rocNtg\/rNl3Gj9Ivstn43j6AFx9rr0S5KyS09YsIctqT3x3mGDLuoJKYsVHRQwKyDcfbBWdcByO1mdE4NX7QFdaqzSIwhLmH2l5rhYGXcm95Cy79cVhCOaTDoEdcBOmjhm49xsb3piKChruOFgJ9LfkqHIDaCg9GyF1WRfZmUyPuzFkNn1HF2ozsWdte0QqFTAe0w0KlmsTHWkIhlfRpHTj9XoNnWk0X51fjnyjSMLul+VhlWj7eGRNNhsHyXbf4uf5XF4sRUFBWWHpO8MkxbkHZaQuo6J5mDE0z7JZViQoyl+LK76w1cMY6zuSC+E2+hWr3cY2e0MbJvkCBVlh5Ql7OFnVnSVrYf7yR5MQ2kR\/VEyL8lvKvuhk1kmNo7XpexOYPayN8Y4MRBSrq0mMuGRrR4PCWOGvCNBjkJ9FdRbKXZN335TnbOsD\/xjk5QhNs5g6iuOxngPcpZBe7webwuv+IGo4LZJpJ9iMdLt3zaVm2nfyOFJzEF7Ymy\/SBsiRfeE8DPzUQQLNmOFz\/dUTsTFPaNxhdwPLf+TEZARkBFoYgQaiZDmoHiOPxwVCmgCW+CDZXE4vms41s7thH7kqhAbX3xSQIhSJtaPd0aPbPYqkFzcyQvH0GYU7Sx0d3DyGHiuE7Hyc\/ncANiom0F3oqd5WXd3hKG7nSkhJTPyAzGhObk70B5Rz0Vi37E03K3MAblU+viyHkhoqYLGJwjfFxjIBarTMD9KCXJH2qivUlF9dRKqr07E9YMxeHuwI+xad8FBsupbFIEYcoWAXQss+oM8MwnVV1Jxanl3DGuuQtt\/GZMbwWBAsO9MOyh7ZOlPps1Bycf+sCUHj\/QJw\/bjaSgvHIuzJ9ONDk8xr4uvLIJjFg6\/QK7KUMLoyhJyiMnClnBWKOAwPJI51TYH15e0QQsVIeEuSHipHzZuG40zB+Oxc9kAfP72QBwvzQXZ5xPtQK54ccSoWYNxcG88di6NwAt9yNUoKkS+N85A+hgMlT7sic2MbMvjMT2E7CU0XBNTszwErUM7YM0JhpyXJOLzaFuoPYKx\/A92JdZcN3RYWMaN1i+FAn5pnFNyq3Nxf0dXtCdXDbBXHFWl4MtIch+eEkHDeuHn30bjyIZozJ\/sAzdKAduI3rjEZgRUTcDXkWRlUIt+rwzDxYtpuHY8CVdMToY1lpXldrI6JwYvsgKzZqwjfa+sQ+sgzPhsCPbvTcSpXcPx89fhmPPdaA4p4seNXSH1T4vFbVpPs1C2JwpTSPq12hETFhmuBKq\/HIung5VQuvpg5iZmRfH6OPyS6waZXcUAACAASURBVAFHpQ0Gf5TEEJAcVPzUHm00CriFh2H3Bd3Yu1sQg+foa2P88UU+Zzzy6EjdyQGI96JAqZ2Qtthwry+\/HCXqfkUC3uyoBGXviF5RgYgb2gJxw1ogfkQwMp7vi73nOW3jHbvZKHzPl17FVbp4IOOdQdi5IwGHNw\/Bomd1eqLp0QNn9au7fO2TWga\/\/Gjd4sGP\/p5njKFqIjZPcoaW0qL\/9BG4QafCZ+LSjx0R5kDBPTIchfr0eCu6yotNDm78EIIgNfEfThj6Qj9s\/HU0Tu+Lw6YFffGfeaNQ1UT2QzfOMrBiFDl8S434ecwe4UYYJ3qfQdkhYxV3koWVren3OnmJHzMGfyNq7NPY8\/SVVyZktVaCXRMqo9qyPrBj02eC6VVwYuMMVsczsCnNHipKC1cXR+SuNd3XLc5P6fSBlQ\/Xx7L1mHxKwUisDZGgeyx+Vn0UkY+g78nEvink2i8F7J\/qhbN1TRyJysXLCMgI\/OMRaCRCSmZlx2DB2GZwVZJLvyk4+Ppgyrex+CBCF5R79wrF9iuZ2JruQBs5WzdHhAQ7wNXRFt3ie2EPe1mzoBMzMfo8z93Z\/hSGBJCDbCh4dO+CzZzrGHROhZSRiSPTPeGg4a6Q6sq+VxCL98f7oV0z3WE4ZCWV\/Nc4OeKphDD8cpxdfSTPZ+DQOwEI1OguOVeQVVeT\/yQF8m7JKPxnoCN9yb3p3+nfmfREQ\/us99P4WeN2OIa0wVJmdbj+jyF4rpOWvgeSECPP0BB8s5NdteCrR6isHFxb3gk9XHV9VHl44\/W1uhWd2oMRNFmnsbJxQtyc0QzhzUThws6IaaWl5U36Strg1aUl3l6dwhCOTJz8rA06u+guo1fZ2yMiOwpbZ\/nSkxtaT2+8vn4i6rkYUmq0Hxupu9OyagLWP+NB30NKdM6rVyi2\/ZEDsgoZQAeyNghq5YwAFw28ugTjo838B9wY45kLIdwM+qWA0sEVafOS6as96gtjMDWUrMSR\/dC2CJ82lMbg7oF+SOvA4K9Uw793Byxb0wuRhIRr7BA+bZj+\/sbSlR3RlcGB0tiie0oE8pl7N03bx\/4u1E5IxIsu73oSVjwbgBAXne7T8tLaotuo7thyyhqx0t1D6urihJ59PNDSTQtXJxV9OJFr6+aYviTZ7OCb+ycG47XBrnBVK+Hsbgd3eyWcAn0x+YvRRlf1kImQomWhGNZGC41GA08vGzhoNAiKaI+Fe9nDhMjqKmeccXWEBL+LWqM5mRyxdcbYr5PxP3o7YZCj6Xg2jCN+3SeY1RUl4Mt4d3To5oWnurP\/PdDJX0OPOdch\/VGiT+\/nG29kFXgCtrwUgJb2ujFAqbUIie6GdYs6IkSrgX97H4yfk4D7JvbG0D4pZQi0gdhSIfwExhitM+Xj8PPU5mjnooTWyRY+bmpoHR0RmdEfx03SbAV1lceOs\/pNbHXhwk4YFKShJ0tondTYoNOwbviZtsVNYz9INsipT4PQ2lZn72yDWuDLfcwYeKBxYmxf7YMC8OZPZKJG6HtjeYkaM5LlaKGvArIRb9eM22+QqzgbS9k5I\/blWPpkfP27ouIMw6Qje6o\/uaf6MDsBaNQvMX7KWD5GY8+oLEN\/xWIkyYaI0D2pPopkD\/H7nkxsSrWjfZqmcxhO1P7jY2UZABkBGYEmRqDxCCljmO8Xp+DiqXTDylZJKi4cT+WssGTjzsVxKDw4BgWHxqG0xOA89E5HwMg32t+rsnDnrwzcFwoWKzNQWpCEk\/sTca4gFbf0M\/0Gh9NobWnqvlZnoepUMi4VZRqdjPvw2p+Nm4XJOH0wCZf+yOBvQ3k6io+noEofMGTg+rGxKDVKBZSGfV1JGi7nJ6JgfyKKhOq1iH1j4UbKGYviYsNkxp3zybj4B3d1hOkbweHYOJSXShkTjdVOpg0V6bh2NBGnDkscm9fScZMZJ\/XX03D5cCLOn+HYAQGsa4sn4HxeIs6dmmhGWo11lNGjvGQUXzFgafyMNB15kHfvH+qL4b52GPFZivl9o9eH49kWFEgQnK\/Xacttqy9JxcXDY1F6nZH99Ykov2Z9IoDbh8Yog1ue6J8ZnTl9JAWV+tVcvv42VFezUHkqCacPJaPkLx5MmsB+WO17Q8eJwDiwWh\/nPfFjhk8GjfWdBLvGabtxPxuqD7mwHmdI7acIPyXYD6G6LGPUYBvSFLrH43vqryRi2+LB2H8ys4nDULl4GQEZARkBoNEJqbHDETLU8vcyTrIOyDrwuOpANk680gwalSte\/t2cHNdfHIgkDyUCJ8Ya7VuV5f24yltut6y7ja0Dj5kNkaNlGQEZARmBJkZAJqSSZz0b2zHJ5cnBjqwDj5cO5KB8cSv4Ugq4hrbDF8vjcCI\/GecPjsLWb3ogtYstPMkWhUbYhvB44SLrsSwvWQfE6cBjZkOaOBCVi5cRkBGQEZAJqUxIrRxyJAcY4gIMGad\/Fk6TcHpxGNKjPNA2wB6e7nYIaNkM\/Ya2xcyv45hDfmSd+GfphCxvWd5SdOAxsiFyrCwjICMgI9DECMiEVCakMiGVdUDWAVkHZB2QdUDWAVkH+HWgiQNRuXgZARkBGQGZkMoOiN8BybjIuMg6IOuArAOyDsg6IOuAHCvLCMgIyAg0MQKNQ0ibuJFy8TICMgIyAjICMgIyAjICMgIyAjICMgIyAk8eAjIhffJkKvdIRkBGQEZARkBGQEZARkBGQEZARkBG4LFAQCakj4WY5EbKCMgIyAjICMgIyAjICMgIyAjICMgIPHkIyIT0yZOp3CMZARkBGQEZARkBGQEZARkBGQEZARmBxwIBmZA+FmKSG2mEwK1CbP3hR+y8VGP09QP90hRlNqBBNZd3YeE7LyBzfCISU57GrDWFaMReWmxRbVUR8jYswpzX38CSU7UWn220P9bdRNH+Nfhq1ttYea6uUYqtu1mE\/Wu+wqy3V6KRimyUdtGFNEF\/LTeuFjcv52Pz0k8w45UFOHLf8tPyX2UEnkgEam\/icv5mLP1kBl5ZcARSh8Gtwq344cedaEyX06Q4193HpT9L8MOB05h9ohrWrHnd\/95G3pki\/Hv3n7hQ36Qt+2cX\/tDt\/xMKd1PEa01R5hMKf1N16zEnpPdwddc8vJo+HP26d0aHDl3QI3wgRo5\/Bu9vvtpUmMnl\/q0I1OHiR+HQUhTshy9ERaO0pSnKlN6wm3tn4Cm3Zuj9r3lY9ukEhNhQ0HR6A0etRRPSq+J54x6Oz0tCe0cKClUgJm+\/x\/NMY391Bwfei4KfhoJCHYJp+6WGiTztuXMA70X5QUMpoA6ZhsYokqeWBn7VBP211pLaM1gyqRtclQooPdLwy8Oa3bDWLvnvMgIPEYHaM0swqZsrlAolPNJ+kTbJV3cRH4VrQVH2GL6wcTyOcdfrcSQvH2NXHLT+f9UZbLn7\/4xf5\/nt3vVLSPvyFzjNWov2m0ph0Zrf\/y\/mLN4Mt1lr4fpFAfIeir8xb3RNVRkW\/H4UYxfvQr+vf0OPb3YgdvlRzDpajpKGtqn+FpZtzrOM66pC7G6Q67mPw3NTMSouDnHW\/o+egY0Vtxrf35nD+A\/4pinitaYo8x8gikbu4mNMSO\/hxCeD4Km2R5uRr+GrFeuxZeNyfPJMBHw0aoRM29\/IUMnFiUfgPs5vW4TNhRbdoJXihMuoKViAyaOT8fKqIkhbU2uKMq10Q+yf64rwcT9bHWm4S16qQdHeDdhz8bbYEhrhuXJ8O8QGVFMQ0vvnsW3RZpipRH0JvhyobTxCCqC+5EsM1DYVIRXWIVECaIL+Wq337iokOVMPQEgfsM9WGyjtgfvnt2HR5kLLQba0IuWnHyEEmkq+d1clwZlqACFFDQoWTMbo5JexqkiaxxEHax02\/7wRrnN246W8K1h95i+s2bkXAbPXwm3ecSw78xfWFhThnRXb4P7OXnxTbZ2Qknr\/e3Q\/3MUQUmIz\/+cihr\/zNxLS+9cx5ZN1cJq9AQM3X8Lmy\/\/F\/gvFeH\/lr\/CctQ6tll1EYUNIaW0F3vxyHZze3YiOX\/yGXl\/\/zvn\/Gzp9uA4u\/zmKLQ0ipDVYP9ETaq9++Neni7Fi9RqsfHMQPfmn6fYMFq9ejVXLvsGbo1rDRhuFz\/+sJ86p0f2dOB172E81hs8QLuOJjAEftogewfoeX0Ja8QMSXJXQdHoN+Ua85x4uLs9F8rv5jyDc\/5Am3VqPdD87DPm2vOEdbowyTGtvijJN62jo7zXrMdFDCXXrF7C3Qc6xoRVz37uLFWMcm4SQ3lqfDj+7ITBXibtYPtoeVGOtkJLu3F2O0fZU06yQPrAONUF\/uSLk+7lmC7J8lQ0npA\/cZ75GNfS7W1if7ge7Id\/iAaxLQyuX32tyBJpOvjVbsuCrbAghbepO12H7rwfx1qX7YLNla84fRfDstWj2wyWDntdWY\/5PR7H0ljhCevfUIfiIJKS4fxXj3\/sbCWn9LazaegiTdl7HDRYEAvu9Ukz7jBDVTcg6+3\/SBVFXhTmrjmBJKQ+bJWT1q5\/ReUuZtBVzfSvu4deXRuLVHZUGuW3KgLdSAW3MPJSxz907jS+TMvD9ddKxv8H+s+14mJ+N4TMaowzTPjdFmaZ1yL83GIHHlpDez3sZ7dQUbIZ\/j5siul9\/6yqKy3iM0v0KXPnzpt6g6IqqQemV67hDfqm7jZLTediXdwY3uOludbdw7fQB7D5QgCs3ecol79aU4sp1uhTU3S7B6bx9yDtzw8j41d26htMHduNAwRUIFYP6O7h2+hD27NqD\/AsVgvtfakqvQFfdfZQXHkZ+0U3U3q1C6Y0buEH+l1ahhmPs6zl\/K626a4KBZVDrb1\/D6bzd2LFzH\/LPFKNKT6KqkTerD5yVWkR9XKir90Ypyqq5swb1uHPtNA7t2YU9+RdQoX+XrVNEGffKcOXaLbM2P1C7BMqkW3WvHBePHcDuXftw+EwJ7nBwJH8Xrpftk4XP+hpUFX+LOAcK6laTselPnazuGtVxD+UXjmL\/7t04ePIqbhn9jVs2R3fvl6PwcD6Kbgo+zH2RdpYrE7mEtA63S04jb98hnCvjys\/ktXvluHB0P3bvPoiTV81lguo8zOrjDKU2Ch8XsrpYBp1KEAftwCGk9bh74ywO553ApUoLdZo0wehXQkgJlmzKbv1d3Dh7GHknLsFikdb6ARF6iXsoO38E+3bvwaGzN0Avdhs3zqS\/nD\/W38a103nYvWMn9uWfQbFhUHEeEvdjbeUlHD+wB\/uOnEPpzS3I8hMipI0wFmGtDF2bxY0Ry\/hV581CH2cltFEfo5Cxa6Vl1ZzV0nrcvnYaebt3YOe+fJwprhK0lxaRFGVzxYw1y\/2x2AbuH+9eRzHjgGpvXsHxA\/tw5GKF4N5APl9gZAXuleH8kX3YvecQzt4w11JGYqKwvFd2Hkf27caeQ2chVJShPTqbcujgMVws5zpUXY3W5UueE4tpLSovHceBPftw5Fwpbm7Jgt8DENJ7ZVdwzczwcnSAjhUO4eCxi+DpGleaVn\/mJaQmb9Xf\/1+c\/bMce69U4g9jZ0E\/aUpI6+6R5\/+L\/PIaznhhCrVGSGtrcOHaf7HvSgXO3RKId+prUVJagX2XynDwr\/\/B1f810jiT1ov99f\/w44qf4TRrHSJ2Wd8LK7ZU8lzF6cMIfmc73qGJopQ3hZ+t4SOkRo831N+J0Xlxtk\/MeDVqssAvwvZcjJ+05jNElCEQrz1QuwTKpCFoshiwBjdLmbjoRilumpjFmpuluFFagTtGw+4+qstLeeN60lYxMjbYZANfMB6xYnROQDka+PVjS0jrLnyIPhoKSvdYfH3BjNEwcNSh+Jc3kTygPTxtbY1W7O4dm4+c4T0R5KJFi2d26Az0nUP4MjMWYQGOsOk6FT\/My0J3Dw0ohQIKBQWNd3+8teUoNsxOQHsXtf57lUs7jP2mQB983jn0JTJjwxDgaIOuU3\/AvKzu8CD75Eg5lAbe\/d\/ClqMbMDuhPVzU7PcquLQbi28KuMFBHa5tfQuxrRyhokgbyPv2aBE9A9v004h3cOjLTMSGBcDRpite\/HE+MsOa0XvoKPtIfPDT6+hO9gUqKDj2mInDHGW\/e\/ANdLOnoKAcEPb6fohKDq0vx653h6O1ixuCe0agVxtSlxJekzaiBjXY\/VoYPLQqUAoKahsHODiQ\/04InryNlkndta14K7YVHFVMvxUU7FtEY8a2Gwy5tFzGncNfIWtodwQ6a+m0bL3kH6BdgmWSFtecx5pXh6GtuzuCQrujvbctKEoJp47PY0sVYaKW8BA3KuvLFmCkmy3UlAKUUgM7gpnbMMwrIeahDiW\/v4OEDq7QOvqiTfsQ+DtrYBcwAM+vOGeY3DDS3Rfx4\/xMhDUjukvBPvJTiMs0uwsdIW2OSd8sxr\/6eNF6RPSO0vqg74vrcZWbsVZXgt\/fSUAHVy0cfdugfYg\/nDV2CBjwPFacYxStZjdeC\/OAlsibUsOG1gcHODgFY\/I2QjhZB90GT3+\/CM\/28TbUqfFG3+lbjWfMxUDKEtI2T+P7Rc+ijzd3DPfF9K2srjGFiemHVd2uR9nuDzGmkxtsHb0R4OcKrVINty7pWHiaO6bZ\/nL3zNajfNe7GN7aBW7BPRHRqw2aEdvmNQkbOeNVTNfrqw7jq4k94KWloHLwRIvgFggI9Ie71jxl90HHImmP9TLEjhHr+NXsfg1hHlraFlJqG8a2OMApeDKIKtWX78K7w1vDxS0YPSN6oQ3Rf6UXJkkCUYTNFTXWrPdHjDyr9n6MiYO7ws\/BBr1fX45PxnWAC2s7KVs0H\/QWfhXpCz4lRqC+DLs\/HINObrZw9A6An6sWSrUbuqQvBFdNxWBZX7YbH47pBDdbR3gH+MFVq4TarQvSF55mfKGxb5r6wzxkdfcwjG\/bQETP3I4yJgqyJl9ALKb1qDr8FSb28IKWUsHBswWCWwQg0N8dWskpu3dw+KssDO0eCGctZ8wa6YB5rGAbGI2Z28vMJkzFyJw8Y5GQ1v8vftu5H13+vZbeI0r2iTq9txUjd9xAKSeiZAlpu1+KsGzLLrR8m31+HVotPInNNzkrrUKEtL4G+\/YfQq8PfobPnC1o88E6OL+9Ab1\/voyzeuf7\/\/Dfy4VI\/Hw9mn+2E4MX\/IrAt9fCec5RbGnAoqYxRv+HZct1hDTm4J0G42lcJrFJt\/DZ97\/Aa9EFXOJgZvacxC\/EE1Kx\/k6czjfOeBXZWYsxj+X4jdRg3WdYLkMwXnuAdgmWSRrc1DFg7XF80Jfsb1eAcuyBWUc4E\/G1+XitoxoKpRvGLK80CKiuCAtGeNF74p2fmq2P66XaZFO+QPsI0XbW0JzG+umxJaSou4LvRnpCSYiibz+8sPQEqvgMy+0z+HiQCyiFjREhRV05dk3tBI1CZSCkqMWNrc+gnVoBle9wvL85H4WXi3H59F4snRqOZkoS1A3DhztP4lJJGUqvnsL2L8ajrQ0FyikW868xDai9ga3PtINaoYLv8PexOb8Ql4sv4\/TepZga3gxK4hSHfYidJy+hpKwUV09txxfj28KGouAUOx9sMaSPu1dvwuFzV1FWWYE\/C9ZhOlFcSoPus0\/pZ8drb2zFM+3UUKh8EPPWKuzavw3zX0xAdNIcHLx9DwdebEu3RU+8We25txPPtlDRK0n7RAa+NTunoKXaFn0\/LNStPNRX4vAno9A9mxBS8q8Wx2Z0hsYUb\/pvdbiyezU2HT6Hq2WVqPizAOum94WrkoKm+2wYDna1UIYeW90+YdYnPlC7BMpE3WUsHu0PjWs4Zu6rop1hfcUezIz0h1dXHSG1Xi8LtpVPlkSxq3rM47cPvIEwexXco95DXqVOv+pv5uODge5Qalojd3MF46Q5uusTg7dW7cL+bfPxYkI0kuYcFDfZAIaQKj0wePYm5BdeRnHRcfw6fwr6uKtAKV0Q9dl5Zt\/ubRx4Iwz2KndEvZcHXdPqcTP\/Awx0V0LTOhebK9jxcAwzOmugsBFK2XUApfJGzKy12H+qCFcuncbepVMR3kwJhbo9ph9mpWwFQ\/bPDJYq7xjMWrsfp4qu4JJ+DCugbj8dhiIl9MOCbtccfRd9nG3RIWsNimh\/ch9X1mYiREPBtsfbOKGf3eQhpDU7MaWlGrZ9P0Qh3dV6VB7+BKO6Z0sjpLVn8dmgZlCq\/TDknd9RzI7pe3wrpI0wFiGuDDFjRCx+tcdmoLNGARuzlN0a7JzSEmrbvvhQByLqKw\/jk1H\/v70zAY+qyPp+3+50J0BCOgQSIGERWURRhAAjqCzKIm4Yh2VUENlcQBSYERc0rAouiIgK4ihGFqMmCAECIwSQffvYEkIyISTwBrJIAgPJm+Tt7vl9z+3u27m93E43RHC5PE+4t+9Sdc6\/TtWtf52qUzGM9YeQ+tTm1lzXfNVHMlnFY9VZEoY3R6fRER07n40HM8nNzeLAuoWM7hRqC9Iz6EvOSFXN67eggoOzu1M\/6FbG\/HDKNghblUvi6LbohSC6zDxi\/6b4gGXFQWZ3r0\/QrWP4wWbwVOUmMrqtHiGoCzPtBl\/9bVKq37fy6v7q+q1cvuArpqYTH3F\/Ay0BTQcw66c8x6Bd5VV6SB06OC0rkNmAUjtz66vIVFMsYk83vBFSc2kxqzNLyLpYQUl5OcdPHKfv3ERCZm7hHRkjlQhpi\/gTpPzPf8i9eIWj2TlM+SKZ0OmJRC37d3VEXY+E1Mz\/276VprP\/xfj0KzZ7MZWxZs0mwqavpue2izZ7+b8ipixIouE\/M8m0tnP\/peR\/shi25NC1E1LTL7y6MImQmZt4QzJyT4D5ea089yh3zlzLsMMVtUdyRe7iq4fUx++dbzZfe\/XVFxhrbs+99N98\/GZ47Ucq9NeuSS6FNK9XH9B0dDqd9QK6FuPZIuej1u9dEHWCdIT\/7TsuOQrITNbcu9DrO\/C6FDrf7zbZE1\/wvZ11iFKLJ79fQioOcpXsZv5f2xKsFT2HBpr0GMcnuwpdAt1UsfeV9gR4IEi2IAdyQgpcjufROrLpfhLYdvImBD7AUnmgPUsRnw+og6CLYpzV42N74XL8o9QRnEmTeKcydTwtdAKBDyx1ihBrKfqcAXUEdFHjrKP9Uraux7KEoYQKWhqPXu\/40MJl4h+tI5v26PyWKW0WXQyiTlPYVf3tx3RMrAR6OsUddZBb5zddf1k481FvDNoGDEuorhqiF6+yQupxe2uMXNMDyhIYGiqgbTya9VIH2kvHX0zBHdtrl8s9TShd\/TRNdQHcPHGbDGu5Dr7kK3\/ey7knQmo5w+IB9RECbuGVPbKCE\/2KPz1vtaM6veZXez+VbNdLts63JA+pa5RdCwUrBhOh1aC\/fZo16q\/lzGIG1BcIuOUVnEUr56fnW6AT6tBr\/ilb8iYfCKlTZ098rZLU8WI6QTz0peiK9uOfJyzF16U6HPQQUpJ+6aFkl5YClg0yojPGEl9sZwZifuYTzO6qR6O\/g2mHpPrhTkgtZz6it0FLg2EJsg8OmCsrfKyXNmwuJAyjkVZL5LBvHV4n6x2PhNT2jtP\/V1EXnd4Xf7il4UMd8QM\/RcJiOcNHvQ1oGwzDuWmqxNE0uQnr2wWPba63uuaHPjVLYOHswj4YNHo6vHHQyR7Mpz+hX30BwXAXcx37Gyl\/CywFyxhk1GGMjcfZTGfTVa9Bf8c0rGZaI5YWCpYNwqgzEhtfLOvQmzkxuyt6jZ47ph2yy6okj71+awLpv6R6NbBy+fpaxy6QMKwRWm0kw7519lBeLSFV\/L4q2YC9ndEE9kemWs1FLXvCGyGVPWY\/NZH4\/RrrOsvxWdVTWCRC6hplV1y+NPw9kcD+xExp9NsDIbVczmXY3ESiv83jF3mzVpRBr5mJhH2WzmHR6X7x3wyclUjz7886t18ms5O9ustd85XSkwdpNyORxl9mclImQ81vennCUsGqhGSM7x9gnaPP4eV5P275TEh9+d752o7Uan2tSVkf2nOl76RS0m7fDPFB7\/1I9\/7atcvlnuZ17AOaM5nX3YCg78hbh6W+gokjb3UksM2TPH1PENqI4ay+bAfRUsDSgcEYus4m3Vrla6NNFkmVr+2sUmFe2\/XfNSG1qV5BzoZ3eKJjmG0ql74xvd\/YyDlHu6xs2BVJTxKmdSGkSp1ZUzqzYvRoDL1Z4DRSZ4u0ptWGM3x1detWvvJx6nkgpKb0WcToNRh6L3CMalv1EIPaNNKiDR+OLBm30pU+quHDV8tIknsn1+lF8ynm9xIJa2te\/lkafjGTJW6fYujKbJtFO72i9MM6CqUTMLR4kLjVJ5HqR\/XzynhXPyM7kzrLTnp7T8MTttcql3uaZSQ91RCtLppnN0mYyeS2n9acr\/s7Hq94srvSeB4LERBCh\/G9fNanmMCV5cTWExCCBxEv8TVPaXjMTOmiEiEVRwG+ZbBRQAgawOdFUBr\/GCGCQOiw7x1T1aVUryyPpZ4gEDwo3nbpqgipifRZMeg1BvosPCvr9Eq5eDkq4eCow\/aIh\/iph9JH8tIqKzYBbUbzZcpaEr5ezIJ34pj60ih6NdOhEUIY\/K1UgB7qqtVDqkMwtODBuNWcdK9UXpSVbpWR+GQ4Wm0Yf\/veZfK9VMdq2vZFes6Puijl7jh6SKPGOuIHfoqEBZuXQCcYaPFgHKuvDkSHGvITj22uko2JL\/qhjzwfz+cWCj\/r55GQip2Hz\/oFIggh\/HWVVOYe7Mue8KVVgzEKAbQZ\/SUpaxP4evEC3ombykujetFMp0EIGYzNTGvC8hKrBhsRAtow+ssU1iZ8zeIF7xA39SVG9WqGTiMQMvhbe7ugJE91\/e614IyjfiuWr6+YliXyZLgWbdjfcK8GV7uGVEEHJRtwtDO9XPoKnkvY01X\/CKmZTWvWU39GMmMzHB0flAgp\/B8\/fLeWkOmreeygvc\/igZBeOr6X6OlJ3Lkml3+dPMuKA\/\/mg63HeeXH7dwyI5GQt\/fygzhOavWQJhIyK4W\/bs0nS\/lz6UlVxWuW8gImrtUYCAAAIABJREFUfZxE\/bk\/81FBtV6KL\/h4w1R0kj6zk+iYUizrQ\/n4cg2PXT0hra4Pju+drzZfY9vnT32tQUHRCyzOklP7gA6gasbD8aiXEzOZc7tjEPT85Z2TNqea6RjTOwfS+uWtpM\/rgUHXhFHJtpg0lK7gcaOBrrNP2B1w\/pSxQnsmSuezzXlR5Rpu\/QEIqV17UwE7Fg6nQ30tGm0oPd9Pl24oTiH1i5CaM5jTTSSkPfkwTz5UV0HyqEi02gY+EVJzxhy6iYS054c4J5PMqEgt2gauhLSK0tNH2PnTWr5fsYzFk3pi1Gpp4A8hxUL+kgcIEXS0enGrbeqN5SyL7qtDYI95ZPrT1luKSY3rQxNxTay4HrbrCN7dlGdL04q4dzIpPlJVepojO39i7fcrWLZ4Ej2Nrnp7T8OdPNrWqV2LXG5piuVt9W51Zkb1XGK7TckONeIhe9bbqYfOjen4DOvgha7lBLa6fuQrUxgbpUOj7848aVTcQxresnS\/54WQVv3My60D0OjvYm5WJcdniGRRR8sJdnuSJVaZMpYonQZ993m2q1dFSM1kzOlmJaQ9P8xzdFhl2SifKuHgVodN\/umhQEjN6bPootegi+rFqBdf5EW3v8ks3isNVnn6GFgoTo2jTxPbml99ZFdGvLuJPNcyV9YYHPbagTdcN66VSKIHQnqtdVEUqcY0aqgj\/uCnSFisTUAqcX2a2NbP6yPpOuJdNvkFogSwD22uko2JjnG\/7EHKU+nohZBSwdqR4rIVA\/d\/WmBPwJN9ibfMpM\/qYq2zUb1GebDRF3lx8mIkM7UUe8HSnM6sLno0uih6jfJk7y8yefFee2dfWR5P9VupfH3FVPy+Wr29HvZvlgYW\/N6H1LHOXbaGVIRUyQbc2hmlslW+XiMhNVWRe\/4XUk\/+DwmHc3j1q7XUn7HWR0JqYVfKRozTk7hvx2Vbh9aNkP6XjO1brHuTtv3qIH\/fcMT9b2MO+61rRP\/LLzknePD9JOua1rD3Uhm3s4AzkqNHWU3lO1UXWRifTOjbm3kly3VabRV7Foxk6JAhDFH8e4K49dWe9+qMTKQmpxA6cwtvO9ZeV9+91rOrJ6Tu3ztfbV6Uufbqqw8I1NCe1+TdFHOo8Zuh8K2VpHPrr9lAuKa+qVuajm\/q9ekDmjPn0t0gENRnoZUbiDMbY4JsTiTzCXEWi47ocSnWgb4rq4cTEdiVOSfsnfdaaZNr+9sllZbvxz8OIbXqbKHwuydtneEOr9tRkJEbl\/kz\/hLStxUI6Tq\/COnbCoR0nRshrcxczrguEej14bTrFcvIF6YwdURXQv0mpGKD9Q2xYVp0LcezpUKMbfFPHg6pQ8\/5OS5TnH0xHgsXDsbz6iPtrAE2xPV\/Axal26fnyPB23eOjMpPl47oQodcT3q4XsSNfYMrUEXQNrQVCai\/\/q5LL2rdw8WibDvPmHeJ0S\/kUCiVsvOGh9I7LdQ+dG9OROO4UiY4nQlqx3rqVh8bQq3qAxEMaLrnU8NMLIRWnobXUoTHczyfnqzgSd6ciIa1YL26voMHQ60NbfldLSN+ufULqXIdN\/umh8JE0HX6TjuKUxy6zkb4PykArddDBcuEg8a8+QrtQHYKgI3LAItJ97dRJGOvv4E3H9GC7FJ4IaW3URZ\/TEOVQriP+4KdEWBx4Wy5wMP5VHmkXik4Q0EUOYJHPIILPba6XuuaPPg65FU+8E9LEJ8PQCnUYFC+51ZXsy8ThNztap9N2cYyqK2Zqu6GEpdg2dhTbxi7MrtHgleQxk+GhfiuVr6+YSu\/r73jTNv1YpuL1JKTO7YxMCB9PlQmpmayjh+j5XhJh8zbxwLcHmLTpOOM+X+MHITWzfX0KodOTeHj\/\/9oG+9wIqYWjqZsJm55Ez+3\/8amPIEbtX\/nTbjq\/Ywue1OqbbGQOWx81F9nKRT5dsZ6wuam8me1KRsVkqtj9wVM8HhtLrOLfEN5Mdieklv+cZsjcRCKW\/ZtcuV\/Bd+m8PnlNhNSlPvhq8w6BaqW+OlKr4US5PfdKSH3+ZnjpR3rqrzmkvUq5PKV5vfuA5kzmitN2gx\/ki0KTdUA+SNwGUByYNh0jrpMeXYsX2FxRwcZx0QR1m1Pd36iVNhn8tjkH7rVz8gcjpEDJFwwMFL0V4+wIiYZ9h9XT0vezQidPy2+akFrOsuSB+ta1qU8knHfIbfM++eshFaG4RNLwSLS6Zjy7qZzSVUMIq3cfi5zctP4aVRVnU6ZYo\/gG3PwS263LHJUaEgtnlzxAfUFH1BMJOCKt2z19zp5hpTRs8rmNZLmJ7Y9cCmla8ll0XyCCNowh38rXy7plJrvgKV\/ZbW+nHjq4lsIl1nXFgtHDlN1LX1vXOmsjR7LWMRvUZbsTb\/l5vKdMSMVIwAPFNc4tx5NaaaFwyQDqCAJGD1N2L30trp\/WEjlyrS0XiSx5C2rktqbGc4fVo9iuFz1gaX3EnIFzR9FPPRQIqeXcIu4LFBDLYo19Ro2rSNW\/lTro1U9UnU1hSkwwQsDNvGSrVNU3lc4suczvaUCjbcTw1S5CuBHS2qiL\/qQhF9q9jviDn0Q43IMayfMQ+6xnSZkSQ7AQwM0vbfdt6xd\/2lwlGxOpt1\/24CK3208vhNSczbs99GgCbuM1R\/QcJfuycG7RfQRa6+Ua25ZmbnkpXHDF0nLO3jZGMrJGg1eSx3P9VipfXzG15M6np0GDttFw3KvBdZqy69bOKODq5bISIbVcyiH2nURCP9hHomM\/UjP\/WrueUF89pJYKli1fTciMFCbn2D0sboT0v5zf9zPh0xNptfqcX\/ZSdamA15f8SMjMjbziL+urLOXj5esJ\/2AnC85W78vqBSo\/blk4tnUzDWas5YkjnoiuH0kpPFqbhNRXm3cT5Zrqq1tqNVxwb8+VCak\/34w\/YR8Q+7RdrZHBy\/fzzl11aP3yz\/bZhyYOvnE7+oCbmbg5lUlt6tBtTkb1QFGttMm1\/e2qwXQ83P6dElIL576bwdzt1RsSS7qZjsbRSYxsKXlnEAMtiFOV9Nw+zTkohERImz+\/uXrKqdjRqCsQ0GYyO+VxZCT3vThl16mRrSD5GduU3adkiz9F0lRXXK8zeadTZ0iaUiRO2XVOJplnrFN2n7KtIa3cYo2Aq9HL3PJiXBbrdEgtDZ5Kkq1\/ED\/6da1reiY7CS2hYjuWbRxHM52O6LFJJDzdmPoDZBF9nR9V+GWhMDMTKXiq9SFpQX3ESNZaZyVKXicDvWVrg8QgNVvEIDUaPV3nSPPerQpZp55qGzxFkjSrEaU0bGK5Y3stcimlaeL4zBjrNgHGvh+T5dFT5Uu+ClC6XvZkd+aTzOsRhKBryXjRrS37V7bxWZrrtEQ+8T2OYOCe0pC9U\/OpEiE1c3pRX+tgQqsJqdYpI+aT8+gRZCOozqKVsfHZ5ui0kTzxvV0y0xHi7vS0\/lqUSMl2xSlMYoAUAz0\/zHUMyNSsg3Wo0+c67JceSnZpOsaMGNsWI7Ff17Te1V1fS2Emmc6Vyh48LIKRtkrlg9pV7JrSlgCNlsZDVjpvlSMRUuMTJFrNqDbqoq9p+FBH\/MBPmjXgtgbfUkhmphRx2gaXFCwqYuRaWVvpBUp\/2lxvdc0PfbxIY7+lTEhNx2fTLVBAf9trsqjR7vYl5WE6Ji4BELcTiuXrs17cQzViaeKYOGVf3O4r9mu8JeVv\/VYsX18xrdrFlLbiNgmNGbLSeXsnyUNqfCLRN3uQgFNqo5RsQLGv4EiwxhMHIY3PcQpAVZlzmFtnJBL2eYYsyE81IR0j81grrSE1l2bziEhqPzpsH0QWB3DO8OScRIwLj7LH\/q0zFZzgXuv2LXtYcUm2RYyL9JYrl8kql9\/\/L2f3bqfBjHU85wi25fKSp5+VJSyIX0fUJwdJ+MV5HZGl\/BcW\/CvHHsDF08s+XKs4xwsfiGT+IBuUlkOYS8g+dIRct\/1mfUhfXF+Z\/AyR4uygfoudA8s5Xleqnx6+d77afK3WV4egCic+tOdK30m1D6iAafVl27RdLZEPxnJ3PXnMF6ja8wq3BATQdtBj3Fa3G287TT+ojTbZ5on1vS9TLXdtnf1OCamZU+\/dTWB4DyZ\/m8ZF67e1igtpP\/CPHg3QBbbl+fXVoXDLUsYSrdOgjejJ5C\/Ws+vAAXZv\/oHPnutqDcwSfP9CciTyWbyE\/oEatE3HyKK+ig32Pqa2F9fQxbisKbzCqsH1EYR6PBZf7UkrXtKfQI2WpmPk0XDFZKbSPkDjss2JGKRmFYPFiIn1HsOajCWPRX2DEQQ9LQfNZfXuwxxITWTJy\/cSphUI6j2\/WmaKWdI\/0PoRHuUtbFzlDia1CSCgeVe6RBl55EvnD3bNRlXBmmda02WCtLUFlKUtZGDDACKGrLTvgWbh3Kd9CRK0hN77FpuziyjOz+ZE7gXyFvUlWBDQtxzE3NW7OXwglcQlL3NvmBYhqDfzHYWglIYteo87ttcil1KaYsCxJEa21CMIQbQaOJXPk3dxJO0IO9et4NP349l7yZd8a0bV+oRkd41HySL\/Wbiw\/jnaGLSE9YxjW4Gtp1Ce8yMTOwejC+\/HxxkypuwxDR\/ztz4mEdIoxqy3B0mpKuLQ8gl0NWrRt3iKBCkqo+UC659rg0EbRs+4bdhEKyfnx4l0DtYR3u9jHKJZzvFp3yDrtjH3vrWZ7KJi8rNPkGvdp0my3aaMqQ6zbJ2WtW+qGB3beYsjn7SRcPClDvujB0p2eYHzP4ygRYBYf9sRO20pyTsPk378AKmrl7HwvZUcdownuOtbseYZWneZ4Ng+g7I0Fg5sSEDEEFbKtnGoSXdzxnx6h4pr6I10HvU+36Xu4+C+7SR\/Ndlax8T1v3NOiD0xSy3URV\/rsy91xOIzfpZzn9I3SEAbei9vbc6mqDif7BO5lJav4ZnWXZggbWdCGWkLB9IwIIIhK51nxiji6E+bK9mYU32VUvZdH+kN5aNESANo\/\/dd9kBBFZzb8znP3B6MNrAtzyXLI91K9tUYt2+B5Tw\/jGhBgCBQr10s05Yms\/NwOscPpLJ62ULeW3nYRtQqasbScv4HRrQIsH732sVOY2nyTg6nH+dA6mqWLXyPlQ6Dl+TxrX4rlq\/FV0zNZMzvTahWg9bYmVHvf0fqvoPs257MV5PFb6cG\/V1zsFYDZdBd7ijoINmAL+2MS4o1\/bx0bA9NpicS9sVJ\/i0bO7BczOYRcf\/RmSkM25HP3vMlbD+Rw9Qv11J\/+moG7r7iGACXCGnbNeft235ZKD53himfr6X+zBTGpNmn64rClOUwaFYi9T84xEZp71DL\/\/JjUgrG6YlEfryHmYfOsef8f0jPLyL5cDYLjl202kvFyYN0\/PwwP5ZI3tZLfLY8GeN7e\/nuipyoetG6soSP4tdhnJXCw2uPMe1f1X+vr9\/Pgx\/9SHTCGS56ScL7rf+St38HTacn0WnTL9UOCKeXqtgxRdwCSaDu3fOqp0M6PeP9x6UVsYQIoo3NRQrt4PyGgi1Rhfv3zkebr9X66iyt+y\/f2nO1DyjvE7ujqHjFfJK5d4nRdg04putKD1ftYFLrALR6PXX+8rbbdHj\/22QP3wh8tDlJplo+\/k4JqYWz\/3ycqLriB1GLIaQBYfX0CLp6RHd7gtkbzziHG7fks3ZydyINAhqNgDYwnA6Pv03KN2OICgylecc+jP4iHcr28v6A5hgEDRptMO1HxNsC\/ljyWTOpCw2s28voiOjxOhutHUUTxxfH0rqOLd2gVo+y6IiJsr3vM6C5AUGjQRvcnhHxtr0bLflrmNSlgW0DXF0EPV7faCNxpuMsjm1NHTFfkfw8ushazOXHljLidqMterCuHlH3TGB5ylx6B4uh\/iPp8fpmSixl7H1\/AM3tutW9+QHeXJ+v4FEycVDcI1TQoA2LZbk89r9PhlVJyrhoa4MdFN6Stm2iMYZE0Gnou2yXdjcXu7uFyUzsaJdbMNAoZiSf7S+B8mMsHXE7RnFjd3HD8qh7mLA8hbm9ReJtILLH62yW9tpUSMMTtqL39Vrk8pymDZCKjFVMur8VIQFiGdu2FwrvMIhpq7Op9DHfGqGV251Ql5sfeJP1EvGjilOrX+PBW4zoDfVp1DiceoYQWvZ+nn8erh4AcbJdtzRqlMD+gEhIjRhv6sq9XW4i3GikfpAOQW+k3cCp\/OAaPrHqFKtfe5BbjHoM9RvROLwehpCW9H7+n8hFEwlQYfJEOhp1CBrRdhsRM\/Iz9pdcltmuluD2I4i3RtiykL9mEl3EfUg1ArqIHry+sdA3JeRY+lSHRe7rqx5ebJtyMlZNpn9bo7V+ibYiCIFEdBrMzA159vZIXler9a1MGUe0XoxgHE7Ltm2INoYQ0Wko72533raiZgDM5G+YRv+b6tnaDEGPse1ApiUlMLFtICFRHej55CIOiYNvtVAXfUvjf32qm6InrWb8rI0LyRM72tsQAUOjGEZ+tp+S\/01hXLRt8Ci8ZVvaRBsJiejE0He3K3gqPKPpU5t7WfadUKxrPurjWQzZVYmQagmJbk1UmBFjSCBiNOHwDo8Rty5X9q2T25eAx29BeQarJvenrVEMoKWx1i8hMIJOg2eyIc8+uFXpG5blGauY3L8tRjHAnbVtFAiM6MTgmRuwJSWXp9rexfZAsX5bCj2Xr5WU+YipOZ8N0\/pzUz17e6M30nbgNJISJtI2MISoDj15ctEhB3GTge3hVEGHq2lnPKTufum\/5J04xoPzV1sDBIXMSObe1ac57nAYmkg7dIC\/iPuOTk8kdM56+q0\/w792bKfx9EQavLeV6adsU11FQho9N4VeX26hw7y1RL+z2rpuNPrjnbyZfrmalFVd4KNvNtBgeiIhM34kJilPtj\/pf\/h+4w46zbUFLBLzDJm1jru\/O8EmmyeAyn8fot3MREJmJ3Pbx5toN3cNNy3ey4Jc36fFVuUepaOYhpi+x7\/VDNxbptCvcUfR7YqphLhPkgiZtYV5ioN8Fawb3di2t\/2dcbK9o91S83DBTG7S3+nTLNBarwRdQ2KeXspR2XgxKNiSt\/rgS7tYa\/XVg1pul66tr+XbN8M2AqPUj\/TcX7s2uTynaVP+uvQBHTibOTn3LgxCgGy6rnRT3CqrpbXt\/8vbsum60m3xs+5Xm6zwjfDF5mR51ubp75SQ2iGwVHCxIJestGMcO5HNuctOtd8NJ9OVAk5l5lIieUPLLlBcJht+dHvjt3ChitK8bPJKJaGh7HwW2YUOl4tfQtq2ndESOTzJac8w3xMxU1Z0mozjRzmafopCRfxEubPIKXb\/KFWV5pGdV1rdISg7T1Z2oYdpVMppuMt77XK5p1l9pbIkj4y0dLLO2aMSOm75mq\/jhas8MXExP5O0tJPklSjNN7rKpGWvXSm1b3aOhfKi05xIz+TsxWrbkz1afWq6SH5mGmkn8\/AqWlUpeVk5FFf8Ruucr3rgzS7t5XT8BDmFvnegzGVFnM44ztGj6Zzy473qQpCdWcooyD5BdmG5vQNXTknxler1JrJHa6Mu1pyGP3XEN\/zEPLNyinEyJXMZRaczOH70KOmnClFsmmT6ez6tzTbXN308yyFelQipuA\/pASrEb9gJsR26JCOiym8r3rHb+vETOZ7bcD+wNF3MJzPtOCdyrgVzZ0k9lq\/jEd8wtZQVkH0im8Jye3tTXkLxFQezc6T2uzwxVXHmQhmlji6PiYJfrlAkeTdFpSqruGhX11JVQW7Rf8i6VFX93fVHcXMV5365RHrRFYqq3L2eZjH94kscL\/gPOVdMV08c\/ZHpV3jWUpLGxu+S2JkrBWb4FTK5qiRrsPnrWl99bc+Vv5M1fzMkkJTTkJ6oPl67XNVpuZ\/d+D6gu0xKV2qnTa7B5pQyv4brv29Ceg2K\/5leNZeXUWn\/JpeufpooQ1sm77g6Qvtnwk3VVUVARUBF4MYiYKHg0762fUhfP3BtJPTGKqLmriKgIqAioCKgIqCIgEpIFaH5Y9wo\/+lFWgcFcvPQhaT89AUjbwmm9Zgf\/ZrG9sdAQtVCRUBFQEXg94aAtD+hjmbPbvIwi+T3po8qr4qAioCKgIqAioA7AiohdcfkD3XFlPElI\/\/Smqgm0bSJGcCY937irGOazx9KVVUZFQEVARWBPxQCF7fPol+bRoQ3aEB4VEdi39nqHOX8D6WtqoyKgIqAioCKwJ8VAZWQ\/llLXtVbRUBFQEVARUBFQEVARUBFQEVARUBF4AYjoBLSG1wAavYqAioCKgIqAioCKgIqAioCKgIqAioCf1YEVEL6Zy15VW8VARUBFQEVARUBFQEVARUBFQEVARWBG4yASkhvcAGo2asIqAioCKgIqAioCKgIqAioCKgIqAj8WRFQCemfteRVvVUEVARUBFQEVARUBFQEVARUBFQEVARuMAIqIb3BBaBmryKgIqAioCKgIqAioCKgIqAioCKgIvBnReAGEFITpaf2sPar93j9ja85fp22ILmckcI3K1LJqbgxRW26eJr96+OZP+0Vlh6oujFCXM4g5ZsVpN4oEHzQ2nzxFDt\/+ITpM7\/lpNmHF27EI+aLnNr5A59Mn8m3NQp5mYyUb1iRmqPuIfgrl9XvwnYUMKg6m8WYVbsZJv4lZLDtapuIygLeTrCns2o\/H5+1KOSoXlYRUBFQEVARUBFQEVAR+G0gcP0JaeVhFg9pT7CgQdf8eTZXXgcgzNm828OAINTloX9euA4ZumZhIv3rZ+hk1KLRNmTEjzeCFZvJfrcHBkGg7kP\/5Eag4IqK2++yXczp0xS9oCGg7WR2Xm2n3C1hbxcqyVz1d+KSivGt617Grjl9aKoX0AS0ZXINQpqz36WHQUCo+xDX1fTMp1g+9h46dX+CT47UUMnK9rLgmVgGPfooj0p\/gwbxWOzjDH16PHFLNnPqijcMfwP3bojt1J7eFRn7aT4jiZg1p9mQVcL\/SMZouczy9XtsRFUirK5HOYE1l3Mw6xzxa\/5F2Iy1jM34rY7q1B52akoqAioCKgIqAioCKgK\/bwSuPyEV8Sr+nAGBgh+EtIrMjV+xPqOGjrViWVRwdOnzPD70HySculEdtHIShtRHuGGEFCqOLuX5x4fyj4RT3CgUpCKqytzIV+szcC1Ry7lF3Ge4foS0cs\/r3BF8G6\/t94P9Ws6x6D6DT4SUiqMsff5xhv4jgetqehXrGd1Ei0YTQNu\/76Ym7SqOxhGj1yAEdmH8F8tZuSKeLz6cxvCYhugELca7prO7TCq93+bxettObaIgEdL7dlx2rpumC7y5KImQ2cnc9vG\/6PbpT7K\/f9FhXhKh7x9kg1MB\/5d\/79iqEtLaLCA1LRUBFQEVARUBFQEVgV8NgRtDSMtX8ddgPwjp5TWMbFqHAZ8X\/2pA\/PoJV7BhTBO0N5CQ\/vo6+prDZdaMbEqdAZ\/jVqLlK3m8rnCdPKSV\/PRcM3QBbZn0c7mvwgPlrHy8LoIPHlI\/Eq3lRy0UxccSptVz19xMZ5LjKafyFcTWFRDqPc5KORSla3gmWodGCOWx+BJPb\/52rl1X26ldtRUJqbmU9xIO8HWhh7UNIln9ZDW3byhymQ6uEtLaLR01NRUBFQEVARUBFQEVgV8TgV+HkFYWk3VwJ9u27ebYmcvuUyHLv2WwnJCar3AubQ879p6kyNVlxiX2TO9Ofa2BPh9kUFBQQEFBIUWX5A9aKMtPY+\/2rWzfn8UFJ29BNXyVRbnkX5bmwknXKyjMPY\/V+WOVYy+7D2VT7G1WbWURmQd2sG37Xk4UyHvvUpr2o6mEnMO72L7jACcLL7JhTFP\/CanlMmfyinDvjlZxIfcsF13UsVzJJ23PNrak7mB\/eh6lrlhUFpGb714mFYW5nLeBwJVzaezdfYhsLyBUlZzi4I5t7Dx0Soa3icsFZynyAomIzKU90+leX4uhzwdkWMuzgMKiSzZvqUgq6skIqaWcghP72HMkhxJ5kbtAja9l4vSe3WutEQiMmckxJ5AtXMlPY8+2LaTu2E96XqnMyygS0nouhLSKy8WFdvssoPDCFVmZVVKUm4+76RWSawMd85VzpO3ZwZ70AidyYb6cT9qubew6mstFJ\/mqFakuuyqKM\/ax\/9RFa50r+24oxoYPsfS0D\/5wO+5uhJQSvhgYiEajp1PcMZlO1fl7PCs\/T16BrRKZLuZyeNcODmRfUHzfUpZP2t7tbN2+nyylCmzNqJLi7EPs2raVHfvSOVcmqwCutiM+X3WZ4kKxzbC1GxeuyEH0rd2gqoRTB3ewbechTslkM10u4KyrsV+VHYIiIfUIru3ihbR9tJq1mVnnZRhYb6mE1Ats6i0VARUBFQEVARUBFYHfGAK1S0jN5\/hpViy3Gg0EN2lD+7ZR1NfXIbrXS6w6KWN4EiFt9gyfLXuR7hF6BI0GjUbA0Phupqw5Y\/foVLDttc40NOgQNAIBgfWoV0\/8C6HV8xutUJrzU3jrgZsJ1glo7GnUbdGXaRsL7ES4jH2fjGFgTHPqG2Rr\/sr2smj0A3SODiaw4yS+WTyGmIbVcgQ170vc5iJnMm0pYtu8v9IhLIjgyGiaGg1oA8K4Y+Q\/SZOTMEsp+z55mi4RBgRdPRq1aEWL6OZEhRt8nrJrzvuRN4f2on2jIILknsTKQywZ9xBdW4ZiaPECWySSZilm6+yHaB0aRquu99CtTQP0gpaIZ5KtBKds3yeMGRhD8\/oG2k7eaSdXZexdNJoHOkcTHNiRSd8sZkxMQ+saThFLIag5feM2UyTv75pO8f3Ee2ha10iLTt3o3CqMkCa30LFDa5qG6K0k7e+7XVlwtdVXbHuNzg0N6AQNQkCgvTzrEdLqeTaKukikos1zfPnVeLpHVpeJPvJupqZI5WpP09cyqRZBdmahZMt0Hu7WlQfjNlNi19NSvJXZD7UmNKwVXe\/pRpsGegRtBM8kSzbsgZCa81g+JAqdiFtgM\/rN2ELR5X18MmYgMc3rY5CtiS3bu4jRD3QmOjiQjpO+YfGYGBqKa1L4JqLnAAAW9UlEQVRF+xX0RPZ8iw0H1zIjtj2hAdJ1HaG3DOOzo5KhOZfdlBVLGN1ZLHMNQt3efHiqkrSlrzJ3a6GzDcu0dzpVIqTW9dd6NEIIj3zl5s92SkL8UfrzBzzdryNN6wVy1+srmf+3WwmV6qYQRLP732JTgcygzPmkvPUANweLdVxsA0T5W9B32kbkj0EFmT+8yoPtwglveScx7SMJEgS0Ibfx0oZSmxyS7ciwNuctZ0iUztq2BDbrx4wttjpdc7shJmni1PcTuadpXYwtOtGtcyvCQppwS8cOtG4agl6wTYe2Zn5NdngVhNRymY++\/JGIr7LIkcFpA0IlpDYc1P9VBFQEVARUBFQEVAR+DwjUIiG9wq43OlNXF06fOXvsnXsLF\/fP5b5wLfrWz7L+gr3nZCek2ob9mLFuPxmn8zh1eBNLJnQnXCegDe3DR5mSV8fEoWm3o9cEepiyayZ32\/es23eSM0UlXDh7lKSpd2PUCuhjZjgi+JoKUnjhlgCXNX8mClJe4JYADbrI\/kxP3MnxU7nkpP1M\/KQeNNBqCLj1VaqXFlZwcHZ36gfdypgfTtm8eVW5JI5ui14IosvMI3bvj4kTH91PA20ATQfM4qc8icRU+ukhvUL6B\/cTKmgIlBNSzBRvnUQHvQadjJBWpE7gpoAg7p6XYSOblhL2zR9EzFgbIcVUQMoLtxAgril0EFJwYKOLpP\/0RHYeP0VuTho\/x0+iRwMtmoBbedUBgom0ud2ppzXS\/+MsWz6mHJY81ABd\/XuYuz+f7KNHybnk1kN2qgumQ9O4Xe+ql\/0RO6lQLJP2U9nn4Lu+lolT9jX8qCB1wk0EBN3NvAxbRpaSfcwfFMNYb4TUks\/KoVEENOjOq5sk0lxtY05BmhxloaPJQ++wfn8Gp\/NOk\/ZzPJN6NEAraGn44DxSj+VwrqiQM8c38\/GT7QgUBEIeWEK+Hd7qsmtM\/7cS2LpzI0umxNJ3yHvs9jcIkUdCaqHop4ncZhAIum0SqZdqgE68XXWWhOHN0Wl0RMfOZ+PBTHJzsziwbiGjO4Wi1WhpOOhLzth1MOdu4\/t1+zh5poiSC2c5mjSVu41aBH0MMxwhuM2cXvY4UXojPeJ2UCq+a7nA9rjeREV09EpILfkrGRoVQIPur8qIsI\/tRtpcutfTYuz\/MVlWUzCRs+QhGujqc8\/c\/eRnH+VojgjKtduhvx7S8tyj3DlzLcMOV3gYcFAJqQ+Wqj6iIqAioCKgIqAioCLwG0Gg1gip5cxiBtQXCLjlFfY4CIOoZTk\/Pd8CnVCHXvNP2dSWPKSuUXYtBawYHIFWo+f2aQcdBE+ZkHpAsSyBoaEC2sajWS9xQS4T\/2gdlymWwOV4Hq0jmx4qJVeZyvgWOjSB\/VlidwpZCpYxyKjDGBtPsYxvmU\/Mpqteg\/6OaRwSZwNeSGBYIy3ayGF86+Ra9JeQQtXeV2gf4IG4lScwpL4gI6QWznzUG4O2AcMS5KzBTGVF9RTFy\/GPUkf06sgIKUrYUEnq+BboNIH0l0Awn2BOVz0aQ18+lbmvSr98iCBBT9c5J2peqyj6nXwgpE4ETiwXe5kIQQ\/xpd0h5nOZSOXqy9Fyho96G9A2GIYzlJVUQ+niIbWUsv2Nbhgb9WbWrlJngqBgY57LQlRzPC10AoEPLHWKhGwp+pwBdQR0UeNsnmSrLgp27Yuers9IhFR\/M31Hj2Xs6OE8ft\/tRDdtR5\/R75N6Thogcn3R9beFswv7YNDo6fCGVIdtz5hPf0K\/+gKC4S7mKm6XU0bC0FAEbWNGSxW4dDVPN9URcPNEtjnqtGu+Mu+63UNqKd3OG92MNOo9i11WFuvhHemSW7th5sScrug1Bvp+Kg0wiC7gL3koSEDfdQ4n7JDUhh36RUgtFaxKSMb4\/gHWecRDJaRSsapHFQEVARUBFQEVARWB3z4CtUZIS+MfI0QQCB32PdKkQkn9K8tjqScIBA+Kt11SIqQiR\/x2MEZBsE5TLbI+7c1DKuUgO1ZuYExTLdrw4ax2dNZcCIT0uIcpfrYs05kVIxKvXiywu3IurRLlCqDN6C9JWZvA14sX8E7cVF4a1YtmOg1CyGC+LYeyxCcJ12oJ+9v3ODup\/CekisStIoknw7QyQgpWD6lOwNDiQeJWn+SypKPsWL7yceq5EVIFbDCRPivG2iHvteCMjWSZ9vPabQEIgQNZKotvc2VFLMGCntteP6C4RlAmxtURUpNUJn1YaN9b0dcykedd87nNQ6oTDLR4MI7VJz0iKVtDepEjH\/ajSeP7mLtXPhhgz0nBxjyXBZjSZ1mj3Rp6L3B4Ea0pVazhaXGgwxe7rllJ9yckQhrYhecXL+HVfhFohSA6vbnfaU2r+4uuVywUftbPIyHFUsBn\/QIRhBD+usq5dlSnItWTcIbbK3BZ0lM01OqIfnaTW1Tm6vdcCOnFI3zYrwmN75uLp2Jxek\/84dZumNj\/2m0ECIEMdDZ2YoMF9Le9zgH7WE9t2KE\/hNRUdJI+s5PomFKsUDYqIXUrX\/WCioCKgIqAioCKgIrAbxaBWiKkJo7PEMmLjpYTtrp1GitTxhKl06DvPs8GhBdCWvXzy7QO0KC\/ay5ZVg9EzYS0qvQ0R3b+xNrvV7Bs8SR6GrVoG1wDITVnMKebSEh78mGe6A41kz6ri1W\/qF6jePHFF93\/Ji9mb4WZDKtXxd07BFJH2\/d9SP0hpFiKSY3rQxNxLaK4DrHrCN7dlOdUFp5JkBIhFXXpZiWkPT\/Ms3v9Skl8qjFaXTPGrJeIWjnbJrYmQBfF6HVKJMPZ\/hX1Eh9TIHBcdZk45+3LL0txKnF9mtjWY+oj6TriXTblSYt1rUI6COn4d8fTVq8jenii81pbKSMFfTyXBZgz5tBNr8HQ80OspielU5HMqEgf7Vp6x5+jREjtUXarDr3FneL+qfV78UFGtZe95iS9EFIqWDuyEVqNgfs\/LahOqqqU00d28tPa71mxbDGTehrRahvYCWl1neo847j3AQ8H1uN5d3xb9Lpohie6rAOvzpWa2o3SxKdorNXRbMx6xwBP+baJtA7QETV6nX3Ayde2QZaxh1PfCamJ1OQUQmdu4W3ZLAXnJFVC6oyH+ktFQEVARUBFQEVAReC3jECtEdIjcXcqEtKK9WNootVg6PWhDQsvhFScsthSp8Fw\/yfYgkd6IaSVmSwf14UIvZ7wdr2IHfkCU6aOoGuojx13Rwd2Mjvl04zNGbztREhNHH6zI3qNni6zvU1LlWTVc8ebh1w6z9dCSJc4b4\/iwUNqA9bChYPxvPpIO2sgGUEXyYBF6Q45PJMgL4T0bVdCCuacbxl9Wwj6yG48Ofk1\/jHyHqICjXSa8CN2x2WN9n61hPTqyqRGcTw\/YLnAwfhXeaRdKDpBQBc5gEXpEjGTYbZ5J3Fd6iHoong8Ptd9yrKCjXkuC5GQvq1ASNddV0IqejO\/iW1oXfPZaNBXzt5az4jZr3onpIlPhqEV6jAoXhzQqCRz+Ti6ROjRh7ejV+xIXpgylRFdQ2WEVKx7d1jrXse3Djts2aMIMqw374yjSz1xivPjxOe6TDf2td0w5\/Dt6NsI0UfS7cnJvPaPkdwTFYix0wR+dBi7r22DR4kdF30lpJb\/nGbI3EQilv2bXNnSAUdC1hOVkDrjof5SEVARUBFQEVARUBH4LSNQS4TUQuGSAdQRBIwepuxe+lpcu6glcuRaGxaKhNRC0dKB1BF0tByfavfuSSTPNaiRhbNLHqC+oCPqiQQ7eRX7uCmMjdJds4fUmfxYOLfoPgKtOqyxbRHjsVQt5M7viUGjpdHw1S7PXR0hvUP0lvX9jEJ551ORkEpCVXE2ZQoxwQIBN7\/EdjvZ9kyCZOTKmZWT4YGQijlYCn7k2fse4eUZs3hnwZckHyn0ThQksezH2iGkvpaJS+b+\/qw6S8qUGIKFAG5+abs9OrEzZpVH53GvOAgS1ocPjss9qcoeX89l8RsipOJa3+Pv0L2egKYGT6MzpF4IqRSxN+A2XttfheXsEh4Q10JHPUGCY+uSSlLGRqFzeEgt5NvrXtiQb\/EwKbo6exkh3VlVydF59xIqTp\/v8wHVxeJPu2E1dn589j4eeXkGs95ZwJfJR3DeErR27NA3Qmrh2NbNNJixlieOeApmJEGhElIJCfWoIqAioCKgIqAioCLw20eglggpmE\/Oo0eQgK7leLY41m6KAJSx8dnm6LSRPPG9feGhEiE1n2ZR3\/oIulZMSJVWopqweV8N9JbWMlpxrWSLNeiOSzAdByF9iiSHHCKBqIsQ0IbJctIldmDrCgS0cfeQ2oL39ORDuxvCdGwGMXoBbUQsXzu8I+4FXLVrCm0DNGgbD2Gl05Q6iZAaeSLRIZh7ArIrYsCkLmLApNuncVByzon3JULqCAploTAzEymIsTUJKThPxEjW2rMTSVBdcR2sU1AjBWyQpkoa6PlhbnWgHksxCX9rQsOnktzWCstE93pqOhLHnSLRdl0nKb71K5SJV2Fcb1oKycy8UK2vyEnOfERvg5aIkWvta\/ZcMTNxclF\/wrUCdTu9xg5pNrMXfTyXhW3KrhgkS5yy6+QBq0jmGeuU3adc1kZ7sGtXnXz5bcddqPs4K6WqRxk\/T2mPXhAIuGkMa+XRvBTTVCakpuOz6RYorr98zRopuXKLGMBJ4xQgSPSaSoT0KXsFNh2fSYxBQGvsy8dZ8orgIoSr7ZhOsqh\/OFqhLp1e22GfdutPu2GhOOFvNGn4FEkOTFzyFIm7j22D+5vVV3wipBXneOGDREI\/OMgGl3GP6pTEM8+E1FySzaEjue774Tq\/rP5SEVARUBFQEVARUBFQEbiuCNQaIRW3YVj\/XBsM2jB6xm2jwNpvLCfnx4l0DtYR3u9jHEvRJEIaNYb19mWHVUWHWD6hK0atnhZPJTi2tgAL5z7tS5CgJfTet9icXURxfjYnci+Qt6gvwYKAvuUg5q7ezeEDqSQueZl7w7QIQb2ZnyPNwy1mSf9ANNqmjJEid4owFy+hf6AGbdMxsoi84tYV+5jaPgCNfOsJy3l+GNGCAEGgXrtYpi1NZufhdI4fSGX1soW8t\/KwjayYM5jf27a9hbHzKN7\/LpV9B\/exPfkrJt8bZo0gfNecE05rOxVLvCyFsdE6NNoIek7+gvW7DnBg92Z++Ow5uoYICMH3s9CqYwVrnmlNlwk\/cMreUS1LW8jAhgFEDFnp8K4WL+lPoEZL0zHrZcFQFLChin1T2xOg0RMjX7tnOsSbd+gR6rWgW\/+HefTRR3l00CAeix3KqFc+5efzLtMjPShnOfcpfYPE7X3u5a3N2RQV55N9Ite2ncevUSYeZFC8VLGGZ1p3YYK0tQ9lpC0cSMOACIaslPb09ICZOZevHmuMTtDTasR3nJFgUNDHc1mIpjfVGllZvm2RVdYrqxgsRqit9xjxDjehJEdjRnkOt6qoptsNu5waQ38W26KJ2R65+BPj2+oRxJkIf13GKalKuSUgXZAIaQDt\/77LPmhRwbk9n\/PM7cFoA9vyXHKxlfBb8hbRN1hA0Ldk0NzV7D58gNTEJbws1hMhiN7zc+xbGBWQNLKllRgHtRrI1M+T2XUkjSM717Hi0\/eJl6IWecDanPsVjzXWIehbMeI7cX9jix\/tholD4nRhoR4tuvXnYdHWHx3EoMdiGTrqFT79+bxtiravbYMEkYdjzYT0v+Tt30HT6Ul02vRLDe2HB0JatYMp1nKsy93zvC078CCceklFQEVARUBFQEVARUBF4FdEoPYIqShk1SlWv\/Ygtxj1GOo3onF4PQwhLen9\/D857OhEi16wbxlsNHJT13vpclM4RmN9gnQCemM7Bk79gSyX0X9LYTITOxrRCRoEwUCjmJF8tr8Eyo+xdMTtGHViIB8d9aLuYcLyFOb2DrY+F9njdTaXXGbv+wNobhDQaLQEtx9BvLjHadle3h\/QHIOgQaMNpv2IeKxbn1ryWTOpi3UfUjHNiB6vs1GaL1uewarJ\/Wlr1CNoNGg0AkJgBJ0Gz2RDXrXnxpy\/gWn9b6KeVS5Rr7YMnJZEwsS2BIZE0aHnkyw6VGPPXvTNkb92Mt0jDdb8BG0g4R0e5+2UbxgTFUho8470Gf0F6aZKUsZF2zrs4S1p2yYaY0gEnYa+y3b71jNle99nQHNbOtrg9oyIz7R6rz1iI+a7ZhJdxH1INQK6iB68vrHQaobm4kMsGtqJW7v+hb\/8RfqLoUOz+ugELcaHv+CcfHqxJ+O1FJI8saO93AQMjWIY+dl+Si7\/emXiSQyP1ypTGBctErAgwlu2pU20kZCITgx9d7s9aFGZZ3sSS+tcAk82C0AQ6tB62DKy\/uNZH09lIfJXS\/4aJnVpgFajQdBF0OP1jbbBBNNxFse2po5oq0IQrR5d5FJ2AnVvfoA31+c7eXY96ufporwuCAaa9XuPPWXVD5ZunsgtYv0R9DTuOYPt8rpc\/Zj9TCKkWkKiWxMVZsQYEogYtTi8w2PErcuVTe8u59jSEdxu1CGIdlYvinsmLCdlbm\/rQJMhsgevby6x6VSRwapJ99MqJMBR9wzhHRg0bTXZYnsh10Fen8UBrYQnaRYgINRpzbBlWZh9ajcsYC7m0KKhdLq1q8zW\/0JMh2bUF\/dLNj7MF5Kx+9g2uMFlv1AjITWVEPdJEiGztjBPao+UEvPkIa1Yx+jGWmsZ3hkn7ZmsmIB6Q0VARUBFQEVARUBFQEXguiFQu4RUEtt0kfzMNNJO5lHiQi5tj1yh9KKdwFnKKTp9gvTMs1z0ytGqKM3LIqfYfe1UVWke2Xml9vV9Yuf0PFnZhTIvoCRYLR3t+h0\/kUNhmRL7slBWkM2J7ELK7Y+UlxRzRfKc+SOK6QoFpzLJLZEAKuNCcZkL+TBTVnSajONHOZp+yotc\/mTs\/GxV+ic8FBXJw0s9Be\/ZwvibdATc+ir7JTGdX3f7JZZbVk4xFUoQur3h5YJPZeLlffktcxlFpzM4fvQo6acKUSxi+TvquR0BiZCKkaYPUHGlgFMn0sk6d0lGRF3AqiolLzuPUofdlHE+K5tCTzPbK0vIy0gjPescl6+mLsmy9tpuVKXzyUNRRD68FNeYSOLeylvG34Qu4FZedTX2q7TDGgmpTO6aTz14SLFQkraR75J2kutl+nHNaatPqAioCKgIqAioCKgIqAjULgK\/DiGtXRnV1H4TCJg48lZH9AG38I89DubgkMxStIohEXqaj93g2CLDcVM9+RMhYKHg0762fUh93Jf2twiO6chbdNQHcMs\/9lQPdEmCWopYNSQCffOxbJCvF5buX8Xx1yekVyGU+oqKgIqAioCKgIqAioCKwHVAQCWk1wHkP0YWFoq\/e4ImWi3GmLF8vGYnRzKyyDy+l5SvZzG8U0MaiVOk7VOE\/xg6q1r4j4C0f62OZs9u+vVmKfgvmF9vWIq\/44kmWrTGGMZ+vIadRzLIyjzO3pSvmTW8Ew0bidOJlfc49SszMU5Zxn6az0ii9\/ZLXPk\/i\/v2QT4n+F+q\/s9E+vZUwmasZWzGNbqRfc5XfVBFQEVARUBFQEVARUBF4OoQUAnp1eH2J33rMmnfxTGyfxfaNW9Co0aNiW7dkXsfHUPcst32QFZ\/UmhUta0IXNw+i35tGhHeoAHhUR2JfWerc\/Tn3xFOl9O+I25kf7q0a06TRo1oHN2ajvc+ypi4Zey2RW2rNW0qMv8fHd9dS\/N5a2n+\/j6+87jUwYfs\/jePEe\/b03l3Iy9ZF8b78J76iIqAioCKgIqAioCKgIrADUJAJaQ3CHg1WxUBFQEVARUBFQEVARUBFQEVARUBFYE\/OwIqIf2zW4Cqv4qAioCKgIqAioCKgIqAioCKgIqAisANQuD\/A\/\/UfvkUxnhMAAAAAElFTkSuQmCC)","fff5585f":"**As per the paper there are 2 types of hotel:**\n\n\n*   City Hotel\n*   Resort Hotel\n\n\n","9797eac1":"**Outliers can be observed**","b24b4979":"**Visualise the total number of bookings for both the hotels combined**","50a99c63":"**Data has no more null values.**","8c4bf99d":"**Lead time is high for the months of March to September, then a dip is observed for both the hotels.**","9c28d0ec":"\n\n*   For City Hotel the pattern observed for canceled bookings and confirmed bookings(Not Canceled) is same.\n*   No cancelations can be observed across Contract and Group category in Resort Hotel.\n\n","370944c6":"# Data Wrangling and Data Analysis","4f364c5b":"\n\n1.   ADR for Resort Hotel is observes a slight dip from 2015 to 2016, then increases linearly from 2016 till 2017.\n2.   ADR for City Hotel has been increasing approximately Linearly for three years.\n\n","92ab3105":"**Visualise the total annual bookings for both the hotels separately, to draw a comparison.**","cba1f479":"**Variation of ADR Across various Market Segments, Distribution Channel, Customer Type, Number of Special Requests.**","c12806a3":"**Approx. 98% of accuracy score can be observed on the test data**","7fd2873e":"**Visualise the amount guests pay per night and how does it vary.**\n\n*Assumption : Since, majority of the data is for Portugal, then I am assuming that the hotel is actually in Portugal and currency used their is Euro.*","59a5695c":"**Average Daily Rate surges during summer months.**","7ff03dbe":"**Variation of ADR monthly and anually**","5efab2d8":"\n\n*   Confirmed Bookings are more than the Canceled Bookings for both the hotels.\n*   Very few repeated guests for both the hotels.\n\n","3da76591":"**Cross Validation Accuracy Score of 0.73 or 73% is observed.**\n\n\n*   Light GBM is the Champion Model\n*   AdaBoost is the Runner Up\n\n","48006d67":"**From the above output, we can observe null values in 4 columns but according to the research paper attached to the dataset it can be noted that NULL here, does not mean missing value, rather it mean Not Applicable. The snippet from the paper mentioning the above information is attached below.**","d215b348":"**Improving the performance of the champion model model using hyperparameter tuning.**","bf6ccb4b":"**Visualisng the monthly bookings across both the hotel types.**","f8df2d54":"**Next, visualise the number of customers by country**","fe6efa5d":"\n\n*   Average Daily Rate across FB meal category for city hotel is very less.\n*   Average Daily Rate across SC meal category for resort hotel is very less.\n*   BB Meal Category is preferred across both the hotels.\n\n\n","549a4c98":"**Cross Validation Accuracy Score of 1.0 is achieved for most of the models. Below is the Root Cause Analysis for the same.**","5d696f1b":"**Visualise the total weekly bookings**","bf0d4d9e":"## Null values treatment","4747954a":"**country, agent and company columns are high cardinal columns, hence these will be ordinally encoded**","ce233aad":"**Visualising adr across meal.**","93fc06a6":"# Model for predicting chances of booking getting cancelled","452bb88a":"**After hyperparameter tuning, it can be observed that the Cross Validation Score increases Significantly.**","3c7f3620":"**Skewed Distribution can be observed for total night stays for both the hotels.**","68c8010f":"**Next, I try to draw some insights on total bookings across market_segment,distribution_channel, deposit_type, customer_type and reservation_status.**\t","3fdffa13":"**Negative days of stay observed, which seems absurd. There seem to be an error either in reservation_status_date column. or arrival_date column**","9e6c7d0d":"**Clearly, the reservation_status column has 3 categories which tell whether a person has canceled the booking or not(which is our target). Let's build the model without this feature to check the performance of the model.**","d0214a3d":"**From the above plot it is clear that the feature \"reservation_status_Check_Out\" has the most importance.**","f19dfea4":"## Data Preprocessing, Feature Engineering and Feature Selection","bfc69ff0":"**Average Deposit Rate Per Person across different room types.**"}}