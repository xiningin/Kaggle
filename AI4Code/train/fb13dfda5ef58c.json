{"cell_type":{"0e0ccb1d":"code","65abbac5":"code","dca7b153":"code","3b20d8bb":"code","e431df82":"code","eb364cc4":"code","912361d4":"code","d145670b":"code","e5d40009":"code","7f8fec07":"code","3b3f022e":"code","465976e2":"code","2b41efad":"code","a988bc81":"code","f9592565":"code","8ba58f81":"code","f710badb":"code","71f4e5a4":"code","33be10fd":"code","8b1c28e8":"code","0de3559e":"code","c64f8141":"code","fb73a2a8":"code","2d25d1a2":"code","69322a50":"code","058ec801":"code","7b9bf39c":"code","94da720b":"code","88ea3098":"code","6483fe32":"code","1ff1068d":"code","1567a727":"code","73954699":"markdown","c1c5a197":"markdown"},"source":{"0e0ccb1d":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\nimport torch.nn.functional as F\nimport torchvision.transforms as transforms\nfrom torch.utils.data import DataLoader, TensorDataset, Dataset\n\nfrom sklearn.model_selection import train_test_split\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom fastai import *\nfrom fastai.vision import *\n\nimport os, gc, random\nimport time\nprint(os.listdir(\"..\/input\"))","65abbac5":"# make training deterministic\/reproducible\ndef seed_everything(seed=2018):\n    random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed_all(seed)\n    np.random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    torch.backends.cudnn.deterministic = True\nseed_everything()\n\ndef to_img(*args):\n    return np.array(args, dtype=np.uint8)\n\ndef conv2(ni, no, kernel_size=3, stride=2, padding=0):\n    return nn.Sequential(\n        nn.Conv2d(ni, no, kernel_size=kernel_size, stride=stride, padding=padding, bias=False),\n#         nn.ReLU(inplace=True),\n        nn.LeakyReLU(inplace=True),\n        nn.BatchNorm2d(no)\n    )\n\nclass Flatten(nn.Module):\n    def __init__(self):\n        super(Flatten, self).__init__()\n\n    def forward(self, x):\n        return x.view(x.size(0), -1)\n    \nclass ResBlock(nn.Module):\n    def __init__(self, nf):\n        super(ResBlock, self).__init__()\n        self.conv1 = conv2(nf, nf, kernel_size=3, stride=1, padding=1)\n        self.conv2 = conv2(nf, nf, kernel_size=3, stride=1, padding=1)\n\n    def forward(self, x):\n        x = x + self.conv2(self.conv1(x))\n        return x","dca7b153":"device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\ndevice","3b20d8bb":"class ExImagePoints(ImagePoints):\n    def reconstruct(self, t, x): return ExImagePoints(FlowField(x.size, t), scale=False)\n\nclass PointsProcessor(PreProcessor):\n    \"`PreProcessor` that stores the number of targets for point regression.\"\n    def __init__(self, ds:ItemList):\n        print('PointsProcessor')\n        print(ds)\n        self.c = len(ds.items[0].reshape(-1))\n    def process(self, ds:ItemList):\n        ds.c = self.c\n\nclass ExPointsLabelList(ItemList):\n    \"`ItemList` for points.\"\n    _processor = PointsProcessor\n\n    def __post_init__(self): self.loss_func = MSELossFlat()\n\n    def get(self, i):\n        o = super().get(i)\n        o = torch.tensor(o.astype(np.float32), dtype=torch.float32)\n        return ExImagePoints(FlowField(self.x.get(i).size, o), scale=True, y_first=False)\n\n    def analyze_pred(self, pred, thresh:float=0.5): return pred.view(-1,2)\n\n\nclass ExPointsItemList(ImageItemList):\n    _label_cls,_square_show_res = ExPointsLabelList,False\n\n    def open(self, fn):\n        img = (to_img(*fn.split(' '))\/255).reshape(1,96,96)\n        return Image(torch.tensor(img, dtype=torch.float32))","e431df82":"train_df = pd.read_csv('..\/input\/training\/training.csv')\ntest_df = pd.read_csv('..\/input\/test\/test.csv')","eb364cc4":"# check to missing values\ntrain_df.isna().any().value_counts()","912361d4":"# drop N\/As\ntrain_df.dropna(inplace=True)\ntrain_df.shape","d145670b":"labels = train_df.drop('Image',axis = 1).values.astype(np.float32)\nlabels = labels.reshape(-1, 15, 2)\n# ## convert from (x,y) to (y,x)\n# labels = labels[:, :, [1,0]]\nlabels = torch.tensor(labels, dtype=torch.float32)","e5d40009":"valid_pct = 0.2\nrand_idx = np.random.permutation(len(train_df))\ncut = int(valid_pct * len(train_df))\ntrain_idxs, valid_idxs = rand_idx[cut:],rand_idx[:cut]\ntrain_idxs.shape,valid_idxs.shape","7f8fec07":"data = ExPointsItemList(items=train_df.Image, path='.')\ndata = data.split_by_idxs(train_idx=train_idxs,valid_idx=valid_idxs)\ndata = data.label_from_lists(labels[train_idxs],labels[valid_idxs])\n# data = data.databunch(bs=16)\n# data","3b3f022e":"empty_labels = np.zeros((len(test_df.Image), 15, 2))\ndata = data.add_test(items=test_df.Image, label=empty_labels)","465976e2":"tfms = get_transforms(do_flip=True, \n                      flip_vert=False, \n                      max_rotate=0.0, \n                      max_zoom=1.0, \n                      max_lighting=0.2, \n                      max_warp=0.0, \n                      p_affine=0.8, \n                      p_lighting=0.8)\ndata = data.transform(tfms=tfms)","2b41efad":"data = data.databunch(bs=16)\ndata","a988bc81":"data.show_batch(rows=2)","f9592565":"model = nn.Sequential(\n    conv2(1, 4, kernel_size=5, stride=1, padding=2),\n    ResBlock(4),\n    nn.MaxPool2d(2,2),\n    conv2(4, 6, kernel_size=5, stride=1, padding=2),\n    nn.MaxPool2d(2,2),\n    conv2(6, 8, kernel_size=4, stride=1, padding=2),\n    nn.MaxPool2d(2,2),\n    Flatten(),\n    nn.Dropout(0.5),\n    nn.Linear(12 * 12 * 8, 250),\n    nn.Dropout(0.5),\n    nn.Linear(250, 30),\n)","8ba58f81":"# (xs,ys) = data.one_batch()\n# model(xs).shape","f710badb":"def rmse(preds, targets):\n    return torch.sqrt(nn.functional.mse_loss(preds, targets.view(targets.size(0), -1)))\n\ndef mse(preds, targets):\n    return nn.functional.mse_loss(preds, targets.view(targets.size(0), -1)) \n\nlearn = Learner(data, model, loss_func=mse, metrics=rmse)","71f4e5a4":"learn.lr_find(end_lr=100)","33be10fd":"learn.recorder.plot()","8b1c28e8":"learn.fit_one_cycle(20, max_lr=1e-2\/2)","0de3559e":"preds,y = learn.get_preds(ds_type=DatasetType.Test)","c64f8141":"preds.min(),preds.max()","fb73a2a8":"preds = preds * 48 + 48","2d25d1a2":"def show_im(img, pnts):\n    img = (to_img(*img.split(' '))\/255).reshape(1,96,96)\n    img = Image(torch.tensor(img, dtype=torch.float32))\n    pnts = pnts.reshape(15, 2)\n    pnts = ImagePoints(FlowField(img.size, pnts), y_first=True)\n    img.show(y=pnts)\n\nshow_im(test_df.Image[1], preds[1])\n# show_im(train_df.Image[0], labels[0][:,[1,0]].reshape(-1))","69322a50":"# (y,x) -> (x,y)\npreds = preds.reshape(-1, 15, 2)[:, :, [1,0]]\npreds = preds.reshape(-1, 30)\npreds = preds.detach().numpy()","058ec801":"look_id = pd.read_csv('..\/input\/IdLookupTable.csv')\nlook_id.drop('Location',axis=1,inplace=True)","7b9bf39c":"columns = train_df.drop('Image', axis=1).columns","94da720b":"ind = np.array(columns)\nvalue = np.array(range(0,30))\nmaps = pd.Series(value,ind)","88ea3098":"look_id['location_id'] = look_id.FeatureName.map(maps)","6483fe32":"df = look_id.copy()\nlocation = pd.DataFrame({'Location':[]})\nfor i in range(1,1784):\n    ind = df[df.ImageId==i].location_id\n    location = location.append(pd.DataFrame(preds[i-1][list(ind)],columns=['Location']), ignore_index=True)","1ff1068d":"look_id['Location']=location","1567a727":"look_id[['RowId','Location']].to_csv('submission.csv',index=False)","73954699":"## Test set","c1c5a197":"### Submit Result"}}