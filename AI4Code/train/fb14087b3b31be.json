{"cell_type":{"a6cd75a0":"code","57daf469":"code","fd9ae4e0":"code","0d657c4a":"code","57d5f525":"code","69ccb8e6":"code","d6190327":"code","d7ba731d":"code","ea0bd60b":"code","eb9d0694":"code","ae832e23":"code","fa82904c":"code","ec1f161a":"code","d6ba5d7a":"code","73ac1a74":"code","c0d7e4cc":"code","e2f8aa31":"code","ab72ebd8":"code","7b54fd35":"code","c47d87c4":"code","c2468771":"code","6bea08b5":"code","f1ebadfd":"code","18f1f349":"code","8a80364e":"code","65acde58":"code","99c2ebe1":"code","f528193e":"code","a8c11646":"code","a586aea9":"code","e7499114":"code","f3da0fd1":"code","25f1ecc0":"code","d50f4a96":"code","394d5290":"code","b9ee7bd0":"code","818f1d52":"markdown","f1942d5f":"markdown","6bdf5f93":"markdown","c692a688":"markdown","77a12d32":"markdown","07d62cd6":"markdown","7576acfd":"markdown","ce1384b1":"markdown","cc8e3207":"markdown","809af0fa":"markdown","780c8d46":"markdown","68242f70":"markdown","e968fe53":"markdown","7ffcf5fd":"markdown","e4f3b1d2":"markdown","954ad7a3":"markdown","733c417f":"markdown","7e25d1cf":"markdown","d7d19e79":"markdown","f72e5f9d":"markdown","859b11ce":"markdown","a5e3458a":"markdown","a9b1ece5":"markdown","dec83c09":"markdown","2c14c4ac":"markdown","013cb665":"markdown"},"source":{"a6cd75a0":"from sklearn import linear_model as lm\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport statsmodels.api as sm\nimport scipy.stats as sts\nimport pandas as pd\nimport scipy as scp\nimport numpy as np\nimport sklearn.preprocessing as preproc\nfrom sklearn.model_selection import train_test_split  ### for train and test split package\nfrom sklearn import metrics  ## For calculation of MSE & RMSE\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.metrics import confusion_matrix, f1_score","57daf469":"bank = pd.read_csv(\"..\/input\/QualitativeBankruptcy.csv\")","fd9ae4e0":"bank.head()","0d657c4a":"bank.shape   ## It display the no of rows and column","57d5f525":"## It gives the unique label of each column\n\nfor col in bank:\n    print (col)\n    print (bank[col].unique())","69ccb8e6":"bank.describe()  ##It gives the summary of the DataFrame","d6190327":"var = ['indRisk','mgtRisk','finFlexibility','Credibility','Competitiveness', 'OperatingRisk', 'bclass']\nvar","d7ba731d":"def func_labelEncoder(var,features):\n    encode= LabelEncoder()\n    features[var] = encode.fit_transform(features[var].astype(str))\n    \nfor i in var:\n    func_labelEncoder(i,bank)","ea0bd60b":"bank.head()","eb9d0694":"bank.describe()","ae832e23":"bank.isnull().any()","fa82904c":"sns.pairplot(bank)","ec1f161a":"bank.corr()","d6ba5d7a":"xVal = bank.drop(['bclass'], axis=1)","73ac1a74":"xVal.head()","c0d7e4cc":"yVal = bank.bclass.values.reshape(-1,1)","e2f8aa31":"yVal.shape","ab72ebd8":"X_train, X_test, Y_train, Y_test = train_test_split(xVal,yVal, test_size=0.2, random_state=42)","7b54fd35":"print(\"X_train shape:\", X_train.shape)\nprint(\"X_test shape:\", X_test.shape)\nprint(\"Y_train shape:\", Y_train.shape)\nprint(\"X_test shape:\", Y_test.shape)","c47d87c4":"### 1. Logistic Regression Model\n\nlmod = lm.LogisticRegression(penalty='l2',fit_intercept=True,max_iter=500,solver='lbfgs',tol=0.0001,multi_class='ovr')\n","c2468771":"lrmod = lmod.fit(X_train,Y_train.ravel())","6bea08b5":"lrmod.intercept_  ### Intercapt (B0)","f1ebadfd":"lrmod.coef_   ### Coefficients (B1, B2...)","18f1f349":"predicted_data = lrmod.predict(X_test)  ### Predicting the  model for independent test data","8a80364e":"predicted_data","65acde58":"confusion_matrix(Y_test, predicted_data)","99c2ebe1":"from sklearn import metrics as accuracyMatrics","f528193e":"accuracyMatrics.accuracy_score(Y_test, predicted_data)  ## Predicting accuracy score","a8c11646":"prec = accuracyMatrics.precision_score(Y_test, predicted_data)  ## Precision score\nprec","a586aea9":"recall = accuracyMatrics.recall_score(Y_test, predicted_data)  ## Recall score\nrecall","e7499114":"probPred = lrmod.predict_proba(X_test)\npredictProbAdmit = probPred[:,1]","f3da0fd1":"### ROC curve calculation\n\nfpr, tpr, threshold = accuracyMatrics.roc_curve(Y_test,predictProbAdmit)","25f1ecc0":"auc_val = accuracyMatrics.auc(fpr,tpr)\nauc_val   ### AUC Value","d50f4a96":"threshold","394d5290":"## Plotting ROC Curve\n\nplt.plot(fpr,tpr,linewidth=2, color='g',label='ROC curve (area = %0.2f)' % auc_val)\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver operating characteristic example')\n","b9ee7bd0":"## F1 score \n\nF1_score = f1_score(Y_test, predicted_data)\nF1_score","818f1d52":"**Exploratory data analysis (EDA)**","f1942d5f":"**In the above we can see the correlation between different variables are between -0.5 to 0.5, so we can take all the variables for developing prediction model.**","6bdf5f93":"**Training the Logistic Model**","c692a688":"**The Dataset has 250 rows and 7 columns**","77a12d32":"**Through Label Encoder we have transformed all the cloumns into Numerical value so as it will best suit for our modelling purpose.**","07d62cd6":"**Precision**","7576acfd":"**ROC Curve**","ce1384b1":"**We will split the whole dataset into test and train row.The train data will be 80% of the total dataset and test data will be 20% of the dataset.**","cc8e3207":"**Confusion Matrix**","809af0fa":"**Applying Logistic Regression Model**","780c8d46":"**This is a simple representation of basic Logistic Regression with all the evaluation metrics. When we have complex dataset then we get more oppurtunity to clean and treat missing values and outliers.**\n\n**Hope you like this Material**","68242f70":"**Here we are getting accuracy of 62%. As we have less number of rows in this dataset thats why we are getting less accuracy.**","e968fe53":"**Storing the dependent variables to xVal and independent variable to yVal**","7ffcf5fd":"**Predicting the test data**","e4f3b1d2":"**Recall**","954ad7a3":"**The columns are in categorical text form. For our modelling purpose we have to convert it into numerical form, so we have to apply Label Encoding. For that we have to assign all the columns name to a variable to perform Label Encoding in loop.**","733c417f":"**Reading the csv data through Pandas DataFrame**","7e25d1cf":"**We have to check if any null value exist for any columns or not.**","d7d19e79":"**AUC Value**","f72e5f9d":"**Calculating the Correlation for each columns**","859b11ce":"**Calculating values for ROC Curve**","a5e3458a":"**Qualitative_Bankruptcy Data Set**\n\nAbstract: Predict the Bankruptcy from Qualitative parameters from experts. The data is taken from UCI Machine Learning Repository.\n\nAttribute Information: (P=Positive,A-Average,N-negative,B-Bankruptcy,NB-Non-Bankruptcy)\n\n1.Industrial Risk: {P,A,N}\n\n2.Management Risk: {P,A,N}\n\n3.Financial Flexibility: {P,A,N}\n\n4.Credibility: {P,A,N}\n\n5.Competitiveness: {P,A,N}\n\n6.Operating Risk: {P,A,N}\n\n7.Class: {B,NB}\n","a9b1ece5":"**We got all the details of the columns value. Their mean,standard deviation, count,min , max etc.**","dec83c09":"**Importing Libraries**","2c14c4ac":"**F1 Score**","013cb665":"**Doing EDA on transformed data**"}}