{"cell_type":{"49d10e9c":"code","ea70d836":"code","ea7966ad":"code","2911fc61":"code","fe07cbbf":"code","2ca26b46":"code","20c8af24":"code","a8181eb8":"code","7b9a2433":"code","0a9c8ecc":"code","0d46a498":"code","b55bf3e6":"code","ac2c27ea":"code","37104f53":"code","bdc4e01c":"code","bbf239e7":"code","743b5aa3":"code","ceef5179":"code","eabf5380":"code","cdddd367":"code","cdbc0685":"code","724428b4":"code","90d36029":"code","e2e4d94b":"code","bcfebd78":"code","76436808":"code","8d385195":"code","d50e3cad":"code","dd31277d":"code","fc961196":"code","da9ac0d1":"code","659fee3d":"code","bb035143":"code","7189f52d":"code","9c0cb2e0":"code","0b6a2d35":"code","2ebce96e":"code","249796ba":"code","6e8245c7":"code","3ad7bd4c":"code","ccea3ec6":"code","f1b8c259":"code","e6383aa5":"code","8ea6a918":"code","15c2e45d":"code","1ac0df27":"code","32dbc75f":"code","a22b6dba":"code","458331ab":"code","f9dcbce6":"code","e97f1882":"code","5386818c":"code","1351cdb0":"code","6a6d2da3":"code","0617e436":"code","7de59821":"code","4c56e87d":"code","f6b202bb":"code","c9b21223":"code","fcfac9ec":"code","5a2a2aba":"code","e2a5eeea":"code","afab2c8a":"code","5c73bd29":"code","4c795d52":"code","b17365ef":"code","53bbfb15":"code","8cb66bb5":"code","fbef367f":"code","bcaf01ca":"code","2cfc7919":"code","bf77fdb6":"code","3ccfc02e":"code","d2eabd20":"code","574d9a44":"code","932a0a46":"code","08319cc4":"code","c9b046ba":"code","3be24c83":"code","8607036c":"markdown","ba0e6d1f":"markdown","19096b2b":"markdown","cd908759":"markdown","f3b980db":"markdown","ea571a50":"markdown","e5a125aa":"markdown","d7695430":"markdown","b6a1140e":"markdown","4aafd01a":"markdown","1159d3c6":"markdown","ecd6ada2":"markdown","e051941c":"markdown","c2701156":"markdown","32b0d14d":"markdown","cd795787":"markdown","e25c7898":"markdown","7942c070":"markdown","22462a50":"markdown","06dcd33d":"markdown","761ea1f8":"markdown","459fdce4":"markdown","7ca805ba":"markdown","d65d1825":"markdown","c4d46fa5":"markdown","b362a828":"markdown","656b9224":"markdown","c90d211e":"markdown","7bb714bf":"markdown","0685ee73":"markdown","d50a639e":"markdown"},"source":{"49d10e9c":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nimport pandas as pd\npd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', None)\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","ea70d836":"data = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\nprint(data.shape)\ndata.head()","ea7966ad":"data_explore = data.copy()\ndata_explore = data_explore.drop(columns=\"Id\", axis=1)","2911fc61":"data_explore.info()","fe07cbbf":"nulls = data_explore.isna().sum()\nnulls[nulls>0]","2ca26b46":"na_cols = [\"Alley\", \"BsmtQual\", \"BsmtCond\", \"BsmtExposure\", \"BsmtFinType1\", \"BsmtFinType2\", \"GarageType\", \"GarageFinish\", \"GarageCond\", \"GarageQual\"]\n\ndata_explore[na_cols] = data_explore[na_cols].fillna(\"NA\")","20c8af24":"data_explore[\"Alley\"].value_counts()","a8181eb8":"nulls = data_explore.isna().sum()\nnan_cols = nulls[nulls>0].index\ndata_explore[nan_cols].info()","7b9a2433":"from sklearn.impute import SimpleImputer\n\nnum_imputer = SimpleImputer(strategy=\"mean\")\ncat_imputer = SimpleImputer(strategy=\"most_frequent\")","0a9c8ecc":"num_nans = ['LotFrontage', 'MasVnrArea', 'GarageYrBlt']\ncat_nans = ['MasVnrType', 'Electrical', 'FireplaceQu']\ndata_explore[num_nans] = num_imputer.fit_transform(data[num_nans])\ndata_explore[cat_nans] = cat_imputer.fit_transform(data[cat_nans])","0d46a498":"nulls = data_explore.isna().sum()\nnan_cols = nulls[nulls>0].index\nnan_cols","b55bf3e6":"data_explore.head()","ac2c27ea":"data_explore['MSSubClass'] = data_explore['MSSubClass'].astype(str)\n\ncat_attrs = []\nnum_attrs = []\ncolumns = list(data_explore.columns)\nfor col in columns:\n    if data_explore[col].dtype=='O':\n        cat_attrs.append(col)\n    else:\n        num_attrs.append(col)","37104f53":"data_explore.describe()","bdc4e01c":"Q1 = data_explore.quantile(0.25)\nQ3 = data_explore.quantile(0.75)\nIQR = Q3 - Q1\noutliers = ((data_explore < (Q1 - 1.5 * IQR)) | (data_explore > (Q3 + 1.5 * IQR))).sum()\noutliers[outliers>0]","bbf239e7":"data_explore[\"SalePrice\"].hist()","743b5aa3":"plt.hist(data_explore[\"SalePrice\"].apply(np.log))\nplt.show()","ceef5179":"plt.figure(figsize=(85, 16))\ncorr_matrix = data_explore.corr()\nsns.heatmap(corr_matrix, mask=np.zeros_like(corr_matrix, dtype=np.bool), square=True, annot=True, cbar=False)\nplt.tight_layout()","eabf5380":"corr_matrix['SalePrice'].sort_values(ascending=False)","cdddd367":"features_to_viz = ['GrLivArea', 'GarageArea', 'TotalBsmtSF']\ni=1\nplt.style.use(\"seaborn\")\nplt.figure(figsize=(15, 6))\nfor feature in features_to_viz:\n    plt.subplot(1, 3, i)\n    i=i+1\n    plt.scatter(data_explore[feature], data_explore['SalePrice'])\n    plt.title(\"Sale Price Vs \"+feature)","cdbc0685":"plt.figure(figsize=(10, 6))\nsns.boxplot(x='OverallQual', y='SalePrice', data=data_explore)","724428b4":"plt.figure(figsize=(18, 8))\nsns.boxplot(x='YearBuilt', y='SalePrice', data=data_explore)\nplt.xticks(rotation=90);","90d36029":"plt.scatter(data_explore['GrLivArea'], data_explore['SalePrice'], c=data_explore['TotRmsAbvGrd'], cmap=\"Set2_r\")\nplt.title('SalePrice Vs. GrLivArea')\nplt.colorbar().set_label('# of Total Rooms Above Ground', fontsize=14)","e2e4d94b":"data_explore['GarageCars'].value_counts()","bcfebd78":"plt.scatter(data_explore['GrLivArea'], data_explore['SalePrice'], c=data_explore['GarageCars'], cmap=\"Set2_r\")\nplt.title('SalePrice Vs. GrLivArea')\nplt.colorbar().set_label('Capacity of # Cars in Garage', fontsize=14)","76436808":"plt.scatter(data_explore['GrLivArea'], data_explore['SalePrice'], c=data_explore['YearBuilt'].astype('int'), cmap=\"rainbow\")\nplt.title('SalePrice Vs. GrLivArea')\nplt.colorbar().set_label('YearBuilt', fontsize=14)","8d385195":"features_to_viz = ['ExterQual', 'GarageQual', 'KitchenQual', 'FireplaceQu', 'BsmtQual', 'BsmtExposure',]\ni=1\nplt.figure(figsize=(15, 10))\nfor col in features_to_viz:\n    plt.subplot(3, 2, i)\n    sns.boxplot(y=col, x='SalePrice', data=data_explore, orient='h')\n    i+=1","d50e3cad":"features_to_viz = ['BldgType', 'HouseStyle', 'Foundation', 'MSZoning',]\ni=1\nplt.figure(figsize=(15, 10))\nfor col in features_to_viz:\n    plt.subplot(3, 2, i)\n    sns.boxplot(y=col, x='SalePrice', data=data_explore, orient='h')\n    i+=1","dd31277d":"plt.figure(figsize=(15, 5))\nplt.subplot(1, 2, 1)\nsns.boxplot(y='SaleType', x='SalePrice', data=data_explore)\nplt.subplot(1, 2, 2)\nsns.boxplot(y='SaleCondition', x='SalePrice', data=data_explore)\nplt.show()","fc961196":"cols = ['SalePrice', 'OverallQual', 'GrLivArea', 'GarageCars', 'TotalBsmtSF', 'FullBath', 'YearBuilt']\nprint(cols)\nsns.pairplot(data_explore[cols])\nplt.show()","da9ac0d1":"X = data.drop(columns=['SalePrice'], axis=1)\ny = data['SalePrice'].copy()","659fee3d":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\ny_log_train = np.log(y_train)\ny_log_test = np.log(y_test)","bb035143":"na_cols = [\"Alley\", \"BsmtQual\", \"BsmtCond\", \"BsmtExposure\", \"BsmtFinType1\", \"BsmtFinType2\", \"GarageType\", \"GarageFinish\", \"GarageCond\", \"GarageQual\", \"PoolQC\", \"Fence\", \"MiscFeature\"]\ncat_attrs = [cat for cat in cat_attrs if not cat in na_cols]\nnum_attrs.remove('SalePrice')","7189f52d":"from sklearn.impute import SimpleImputer, KNNImputer\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import PowerTransformer, OneHotEncoder","9c0cb2e0":"num_pipeline = Pipeline([('imputer', SimpleImputer(strategy=\"mean\")),\n                        ('transformer', PowerTransformer(method='yeo-johnson', standardize=True))])\n\ncat_pipeline_1 = Pipeline([('cat_na_fill', SimpleImputer(strategy=\"constant\", fill_value='NA')),\n                          ('encoder', OneHotEncoder(handle_unknown='ignore'))])\n\ncat_pipeline_2 = Pipeline([('cat_nan_fill', SimpleImputer(strategy=\"most_frequent\")),\n                          ('encoder', OneHotEncoder(handle_unknown='ignore'))])","0b6a2d35":"pre_process = ColumnTransformer([('drop_id', 'drop', ['Id']),\n                                ('cat_pipeline_1', cat_pipeline_1, na_cols),\n                                ('cat_pipeline_2', cat_pipeline_2, cat_attrs),\n                                ('num_pipeline', num_pipeline, num_attrs)], remainder='passthrough')","2ebce96e":"X_train_transformed = pre_process.fit_transform(X_train)\nX_test_transformed = pre_process.transform(X_test)","249796ba":"X_train_transformed.shape, X_test_transformed.shape","6e8245c7":"oh_na_cols = list(pre_process.transformers_[1][1]['encoder'].get_feature_names(na_cols))\noh_nan_cols = list(pre_process.transformers_[2][1]['encoder'].get_feature_names(cat_attrs))\nfeature_columns = oh_na_cols+oh_nan_cols + num_attrs","3ad7bd4c":"from sklearn.model_selection import GridSearchCV, KFold","ccea3ec6":"kf = KFold(n_splits=5, shuffle=True, random_state=42)","f1b8c259":"from sklearn.linear_model import ElasticNet","e6383aa5":"elastic_net_grid_param = [{'l1_ratio': list(np.linspace(0, 1, 10)), 'alpha': [0.0001, 0.005, 0.001, 0.005, 0.01, 0.05, 0.1]}]\nelastic_net_grid_search = GridSearchCV(ElasticNet(random_state=42), elastic_net_grid_param, cv=kf, scoring='neg_root_mean_squared_error', return_train_score=True, n_jobs=-1)\nelastic_net_grid_search.fit(X_train_transformed, y_log_train)","8ea6a918":"train_results=[]\ntrain_results.append(['Elastic Net', elastic_net_grid_search.best_params_, -elastic_net_grid_search.best_score_])\nelastic_net_grid_search.best_params_, -elastic_net_grid_search.best_score_","15c2e45d":"best_elastic_net_reg = elastic_net_grid_search.best_estimator_\nbest_elastic_net_reg","1ac0df27":"feature_imp = [ col for col in zip(feature_columns, best_elastic_net_reg.coef_)]\nfeature_imp.sort(key=lambda x:x[1], reverse=True)\nfeature_imp[:15]","32dbc75f":"from sklearn.svm import SVR","a22b6dba":"svr_grid_param = [{'C':list(np.linspace(0.1, 1, 10)), 'epsilon':[0.01, 0.05, 0.1, 0.5, 1]}]\nsvr_grid_search = GridSearchCV(SVR(kernel=\"poly\", degree=2), svr_grid_param, cv=kf, scoring=\"neg_root_mean_squared_error\", return_train_score=True, n_jobs=-1)\nsvr_grid_search.fit(X_train_transformed, y_log_train)","458331ab":"train_results.append(['SVR', svr_grid_search.best_params_, -svr_grid_search.best_score_])\nsvr_grid_search.best_params_, -svr_grid_search.best_score_","f9dcbce6":"best_svr_reg = svr_grid_search.best_estimator_\nbest_svr_reg","e97f1882":"from sklearn.ensemble import RandomForestRegressor","5386818c":"rf_grid_param = [{'max_features':[0.2, 0.4, 0.6, 'auto'], 'max_depth':[8, 12, 16, 20]}]\nrf_grid_search = GridSearchCV(RandomForestRegressor(n_estimators=300, random_state=42, n_jobs=-1), rf_grid_param, cv=kf, scoring='neg_root_mean_squared_error', return_train_score=True, n_jobs=-1)\nrf_grid_search.fit( X_train_transformed, y_log_train)","1351cdb0":"train_results.append(['Random Forest', rf_grid_search.best_params_, -rf_grid_search.best_score_])\nrf_grid_search.best_params_, -rf_grid_search.best_score_","6a6d2da3":"best_rf_reg = rf_grid_search.best_estimator_\nbest_rf_reg","0617e436":"feature_imp = [ col for col in zip(feature_columns, best_rf_reg.feature_importances_)]\nfeature_imp.sort(key=lambda x:x[1], reverse=True)\nfeature_imp[:15]","7de59821":"from xgboost import XGBRegressor","4c56e87d":"xgb_grid_parm=[{'max_depth':[4, 6, 8, 12], 'subsample':[0.5, 0.75, 1.0]}]\nxgb_grid_search = GridSearchCV(XGBRegressor(objective='reg:squarederror', n_estimators=300, learning_rate=0.1, random_state=42, n_jobs=-1), xgb_grid_parm, cv=kf, scoring=\"neg_root_mean_squared_error\", return_train_score=True, n_jobs=-1)\nxgb_grid_search.fit(X_train_transformed, y_log_train)","f6b202bb":"train_results.append(['XGBoost', xgb_grid_search.best_params_, -xgb_grid_search.best_score_])\nxgb_grid_search.best_params_, -xgb_grid_search.best_score_","c9b21223":"cvres = xgb_grid_search.cv_results_\nfor train_mean_score, test_mean_score, params in zip(cvres[\"mean_train_score\"], cvres[\"mean_test_score\"], cvres[\"params\"]):\n    print(-train_mean_score, -test_mean_score, params)","fcfac9ec":"best_xgb_reg = xgb_grid_search.best_estimator_\nbest_xgb_reg","5a2a2aba":"feature_imp = [ col for col in zip(feature_columns, best_xgb_reg.feature_importances_)]\nfeature_imp.sort(key=lambda x:x[1], reverse=True)\nfeature_imp[:15]","e2a5eeea":"from sklearn.ensemble import StackingRegressor\nfrom sklearn.linear_model import ElasticNetCV","afab2c8a":"base_estimators = [('elastic_net', best_elastic_net_reg), ('svr', best_svr_reg), ('rf', best_rf_reg), ('xgb', best_xgb_reg)]\n\nstack_reg = StackingRegressor(estimators=base_estimators, final_estimator=ElasticNetCV(l1_ratio=[.1, .5, .7, .9, .95, .99, 1], random_state=42), cv=kf, passthrough=False, n_jobs=-1)\nstack_reg.fit(X_train_transformed, y_log_train)","5c73bd29":"from sklearn.model_selection import cross_val_score\n\nstack_rmse_scores = cross_val_score(stack_reg, X_train_transformed, y_log_train, scoring='neg_root_mean_squared_error', cv=kf, n_jobs=-1)\nstack_rmse = np.round(np.mean(-stack_rmse_scores), 4)\ntrain_results.append(['Stacking', '', stack_rmse])","4c795d52":"pd.set_option('display.max_colwidth', -1)\n\ntrain_models_df = pd.DataFrame(train_results, columns=['Model', 'Best Paramas', 'RMSLE'])\ntrain_models_df","b17365ef":"results = dict()\nbest_models = [best_elastic_net_reg, best_svr_reg, best_rf_reg, best_xgb_reg, stack_reg]\nmodel_names = []\nmodel_rmse = []\n\nfor model in best_models:\n    test_rmse_scores = cross_val_score(model, X_test_transformed, y_log_test, scoring='neg_root_mean_squared_error', cv=kf, n_jobs=-1)\n    test_rmse_scores = np.round(-test_rmse_scores,4)\n    test_rmse = np.round(np.mean(test_rmse_scores),4)\n    model_names.append(model.__class__.__name__)\n    model_rmse.append(test_rmse)","53bbfb15":"def plot_results(model_names, model_rmse):\n        \n    plt.figure(figsize=(12, 5))\n    x_indexes = np.arange(len(model_names))     \n    width = 0.15                            \n    \n    plt.barh(x_indexes, model_rmse)\n    for i in range(len(x_indexes)):\n        plt.text(x=model_rmse[i], y=x_indexes[i], s=str(model_rmse[i]), fontsize=12)\n    \n    plt.xlabel(\"Mean RMSLE\", fontsize=14)\n    plt.yticks(ticks=x_indexes, labels=model_names, fontsize=14)\n    plt.title(\"Results on Test Dataset\")\n    plt.show()","8cb66bb5":"plot_results(model_names, model_rmse)","fbef367f":"best_model = best_models[np.argmin(model_rmse)]\nbest_model","bcaf01ca":"y_train_pred = best_model.predict(X_train_transformed)\ny_test_pred = best_model.predict(X_test_transformed)\ny_train_pred = np.exp(y_train_pred)\ny_test_pred = np.exp(y_test_pred)\npredicted = np.concatenate([y_train_pred, y_test_pred], axis=0)\nobsereved = np.concatenate([y_train, y_test], axis=0)","2cfc7919":"combine_data = pd.concat([X_train, X_test], axis=0)\ncombine_data['SalePrice'] = obsereved\ncombine_data['Predicted_SalePrice'] = predicted\ncombine_data.shape","bf77fdb6":"plt.figure(figsize=(10, 5))\nplt.subplot(1, 2, 1)\nax = combine_data['SalePrice'].hist()\nfor p in ax.patches:\n        ax.annotate('{}'.format(p.get_height()), (p.get_x()+0.1, p.get_height()+10))\nplt.subplot(1, 2, 2)\nax = combine_data['Predicted_SalePrice'].hist()\nfor p in ax.patches:\n        ax.annotate('{}'.format(p.get_height()), (p.get_x()+0.1, p.get_height()+10))\nplt.show()","3ccfc02e":"plt.figure(figsize=(12, 6))\nplt.scatter(combine_data['GrLivArea'], combine_data['SalePrice'], label=\"Observed\")\nplt.scatter(combine_data['GrLivArea'], combine_data['Predicted_SalePrice'] , c='green', label=\"Predicted\")\nplt.xlabel('GrLivArea')\nplt.ylabel('Sale Price')\nplt.legend()\nplt.show()","d2eabd20":"final_model = Pipeline([('pre_process', pre_process),\n                       ('best_model', best_model)])\nfinal_model.fit(X_train, y_log_train)","574d9a44":"test_data = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")","932a0a46":"log_predictions = final_model.predict(test_data)\npredictions = np.exp(log_predictions)","08319cc4":"test_predictions = pd.DataFrame(test_data['Id'])\ntest_predictions['SalePrice'] = predictions.copy()","c9b046ba":"test_predictions.head()","3be24c83":"test_predictions.to_csv(\".\/submission.csv\", index=False)","8607036c":"- Have a look at 1st row, we can see the upward trend in sale prices for each attribute.\n- There is large living area for high quality houses. Not true for all cases, but there is that trend.\n- In recent years there are many houses built with large basement.","ba0e6d1f":"- With more capacity to accomodate the cars in garage, the sale price increases. Since more cars in garage means more garage area. So we can infer that the house with large garage area tend be expensive. ","19096b2b":"- There verticle lines in some graph which indicate that there is absenece of that attribute for the house. Ex. there are houses with no garage or no basement","cd908759":"- Better the quality, higher is the price.\n- For Garage, there is not so much of difference in house prices.\n- Houses with no basement(NA) are chepear.","f3b980db":"- There are many variables which are correalted with sale price.\n- There is also strong correlation among many independent varibles.\n- Looking at the attributes, we can see that the sale price is highly correlated with segments such as Garage, various area measurements, number of rooms etc.\n- This results doesn't include categorical variables. So there can few of those variable which can be correlated with sale price.","ea571a50":"- SaleType: Type of sale\t\t\n   - WD: \tWarranty Deed - Conventional\n   - CWD:\tWarranty Deed - Cash\n   - VWD:\tWarranty Deed - VA Loan\n   - New:\tHome just constructed and sold\n   - COD:\tCourt Officer Deed\/Estate\n   - Con:\tContract 15% Down payment regular terms\n   - ConLw:\tContract Low Down payment and low interest\n   - ConLI:\tContract Low Interest\n   - ConLD:\tContract Low Down\n   - Oth:\tOther\n\t\n    \n- SaleCondition: Condition of sale\n   - Normal:\tNormal Sale\n   - Abnorml:\tAbnormal Sale -  trade, foreclosure, short sale\n   - AdjLand:\tAdjoining Land Purchase\n   - Alloca:\tAllocation - two linked properties with separate deeds, typically condo with a garage unit\t\n   - Family:\tSale between family members\n   - Partial:\tHome was not completed when last assessed (associated with New Homes)","e5a125aa":"- If we look at the data, there are few areas\/segments around which attributes are present. Ex. for segment Garage, there are many attributes related with it such as GarageCond, GarageArea, GarageCars etc.\n- I will explore following important segments in given dataset:\n    - Plot\n    - Zone & Neighbourhood\n    - Type of house\n    - Proximity to various conditions\n    - Garage","d7695430":"- BldgType: Type of dwelling\t\n   - 1Fam:\tSingle-family Detached\t\n   - 2FmCon:\tTwo-family Conversion; originally built as one-family dwelling\n   - Duplx:\tDuplex\n   - TwnhsE:\tTownhouse End Unit\n   - TwnhsI:\tTownhouse Inside Unit\n   \n   \n- HouseStyle: Style of dwelling\n   - 1Story:\tOne story\n   - 1.5Fin:\tOne and one-half story: 2nd level finished\n   - 1.5Unf:\tOne and one-half story: 2nd level unfinished\n   - 2Story:\tTwo story\n   - 2.5Fin:\tTwo and one-half story: 2nd level finished\n   - 2.5Unf:\tTwo and one-half story: 2nd level unfinished\n   - SFoyer:\tSplit Foyer\n   - SLvl: \t    Split Level\n   \n   \n- Foundation: Type of foundation\n   - BrkTil:\tBrick & Tile\n   - CBlock:\tCinder Block\n   - PConc:\tPoured Contrete\t\n   - Slab:\tSlab\n   - Stone:\tStone\n   - Wood:\tWood\n\n\n- MSZoning: Identifies the general zoning classification of the sale.\t\t\n   - A:\tAgriculture\n   - C:\tCommercial\n   - FV:\tFloating Village Residential\n   - I:\tIndustrial\n   - RH:\tResidential High Density\n   - RL:\tResidential Low Density\n   - RP:\tResidential Low Density Park \n   - RM:\tResidential Medium Density\n","b6a1140e":"### Distribution of Sale Price","4aafd01a":"- Data modifications performed in previous step:\n    - Keeping NA as NA for some columns.\n    - Replacing some NaN values with mean\/most frequent value in column.\n    - Converting some numerical or ordinal attributes into categorical attributes.\n    - Dropped Id column\n\n\n- We also observe the distribution of some variable is skewed towards left. I will box-cox transformation to handle such distributions.","1159d3c6":"## Step 5: Model Evaluation","ecd6ada2":"- Buildings of type Single-family Detached & Townhouse End Unit are expensive.\n- Two and one-half story: 2nd level finished & Two story houses have mean price around 200,000 USD.\n- Houses in Floating Village Residential zone have mean sale price more than 200,000 USD, next expensive zone is Residential High Density.","e051941c":"We know that there are columns which has NA values with some specific meaning. Lets replace those columns NaN with NA.","c2701156":"## Step 6: Make Submission","32b0d14d":"### Correlation Plot","cd795787":"- Clearly, this sales price is skewed towards left with heavy right tail.\n- This distibution also indicates that there are very less records of expensive houses. This can be a potential drawback for model, model will fail to accurately predict the price of expensive homes because of less data of expensive houses.","e25c7898":"- There is no column having many outliers present in them. EnclosedPorch, BsmtFinSF2, LotFrontage, ScreenPorch are the only attributes having more than 100 outliers.      ","7942c070":"- From left side chart, we can see that the sale prices are high for newly constructed homes.\n- Now lets see the distribution of highly correlated attributes with sale price.","22462a50":"## Step 1: Frame the Problem","06dcd33d":"# Ames Housing Price Prediction","761ea1f8":"- Now lets see how model is performing on overall dataset. This will help us to understand where the model is underperforming.","459fdce4":"- Since there are 79 variables. Box plot is not best approach to visualize the distribution and analyse the outliers. Lets directly have a look at number of outliers each attribute possess.","7ca805ba":"- Model does well when predicting the sale prices for houses with living area below 2000 square feet.\n- For houses with living area above 2000 square feet, there is considerable difference in observed value and predicted value.\n- Look at botton left, we can see that there are some houses with less sale price, model has predicted bit higher prices for those houses. ","d65d1825":"## Step 2: Data Exploration","c4d46fa5":"- Quality\/Condition\n    - Ex:\tExcellent\n    - Gd:\tGood\n    - TA:\tAverage\/Typical\n    - Fa:\tFair\n    - Po:\tPoor\n    - No: Not available","b362a828":"- Well not completely but its fair to say that the prices of new houses is more than the old ones.\n- The old houses can be still expensive because of various factors such as location, asthetics and quality of house etc.\n- Decades after decades, the price of cheap house is seems to increasing. ","656b9224":"### Statistical Overview","c90d211e":"- Newer the house, higher is the price and vice-versa.","7bb714bf":"- **Objective**: With 79 explanatory variables describing (almost) every aspect of residential homes in Ames, Iowa, we to predict the final price of each home.\n    \n- From my little understanding of real estate, the price of a house majorly depends on the location, proximity to entertainment and essential facilities, age of the house, number of bedrooms. Looking at the dataset, there is more information than I thought of. \n- Dataset has 79 variables describing (almost) every aspect of residential homes in Ames, Iowa. The SalePrice field is a target variable. The price is in USD.\n- There are many columns that have NA values. But those NA has a specific meaning for each feature. So I will keep those NA values in the dataset. \nFollowing list represents NA value description & the fields in which that NA value is present:\n\n- NA: No alley access\n    - Alley: Type of alley access to property\n\n\n- NA: No Basement\n    - BsmtQual: Evaluates the height of the basement\n    - BsmtCond: Evaluates the general condition of the basement\n    - BsmtExposure: Refers to walkout or garden level walls\n    - BsmtFinType1: Rating of basement finished area\n    - BsmtFinType2: Rating of basement finished area (if multiple types)\n\n\n- NA: No Garage\n    - GarageType: Garage location\n    - GarageFinish: Interior finish of the garage\n    - GarageCond: Garage condition\n    - GarageQual: Garage quality\n\n\n- NA: No Pool\n    - PoolQC: Pool quality\n\n\n- NA: No Fence\n    - Fence: Fence quality\n\n\n- NA: None   \n    - MiscFeature: Miscellaneous feature not covered in other categories","0685ee73":"## Step 4: Modelling","d50a639e":"## Step 3: Data Preprocessing"}}