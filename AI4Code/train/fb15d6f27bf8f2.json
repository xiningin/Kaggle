{"cell_type":{"e47f96ff":"code","2c8503f5":"code","c12257c7":"code","5873d79b":"code","0f177cbb":"code","38f85546":"code","279ed2eb":"code","23cb6da9":"code","60bda379":"code","f20f2e1e":"code","404718d5":"code","ff93bb75":"markdown","be815a6a":"markdown"},"source":{"e47f96ff":"#Import Libraries \nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","2c8503f5":"#read data\ndata = pd.read_csv(\"..\/input\/housingprice\/ex1data2.txt\" , header=None, names=['Size', 'Bedrooms', 'Price'])\ndata.head(5)","c12257c7":"# rescaling data\ndata = (data - data.mean()) \/ data.std()","5873d79b":"# add ones column\ndata.insert(0, 'Ones', 1)\n\n# separate X (training data) from y (target variable)\ncols = data.shape[1]\nX = data.iloc[:,0:cols-1]\ny = data.iloc[:,cols-1:cols]","0f177cbb":"# convert to matrices and initialize theta\nX = np.matrix(X.values)\ny = np.matrix(y.values)\ntheta = np.matrix(np.array([0,0,0]))","38f85546":"# Function Computing Cost\ndef computeCost(X, y, theta):\n    z = np.power(((X * theta.T) - y), 2)\n    return np.sum(z) \/ (2 * len(X))\n","279ed2eb":"# Function Computing gradientDescent to minimize cost and get best theta\ndef gradientDescent(X, y, theta, alpha, iters):\n    temp = np.matrix(np.zeros(theta.shape))\n    parameters = int(theta.ravel().shape[1])\n    cost = np.zeros(iters)\n    \n    for i in range(iters):\n        error = (X * theta.T) - y\n        \n        for j in range(parameters):\n            term = np.multiply(error, X[:,j])\n            temp[0,j] = theta[0,j] - ((alpha \/ len(X)) * np.sum(term))\n            \n        theta = temp\n        cost[i] = computeCost(X, y, theta)\n        \n    return theta, cost","23cb6da9":"# initialize variables for learning rate and iterations\nalpha = 0.1\niters = 100\n\n# perform linear regression on the data set where g is theta\ng, cost = gradientDescent(X, y, theta, alpha, iters)\n\n# get the cost (error) of the model\nthiscost = computeCost(X, y, g)\n\n\nprint('theta is  = ' , g)\nprint('cost  = ' , cost[0:50] )\nprint('computeCost = ' , thiscost)\n","60bda379":"\n# get best fit line for Size vs. Price\n\nx = np.linspace(data.Size.min(), data.Size.max(), 100)\n#function \nf = g[0, 0] + (g[0, 1] * x)\n# draw the line for Size vs. Price\nfig, ax = plt.subplots(figsize=(5,5))\nax.plot(x, f, 'r', label='Prediction')\nax.scatter(data.Size, data.Price, label='Training Data')\nax.legend(loc=2)\nax.set_xlabel('Size')\nax.set_ylabel('Price')\nax.set_title('Size vs. Price')","f20f2e1e":"# get best fit line for Bedrooms vs. Price\nx = np.linspace(data.Bedrooms.min(), data.Bedrooms.max(), 100)\nf = g[0, 0] + (g[0, 1] * x)\nprint('f \\n',f)\n# draw the line  for Bedrooms vs. Price\n\nfig, ax = plt.subplots(figsize=(5,5))\nax.plot(x, f, 'r', label='Prediction')\nax.scatter(data.Bedrooms, data.Price, label='Traning Data')\nax.legend(loc=2)\nax.set_xlabel('Bedrooms')\nax.set_ylabel('Price')\nax.set_title('Size vs. Price')\n\n","404718d5":"# draw error graph\n\nfig, ax = plt.subplots(figsize=(5,5))\nax.plot(np.arange(iters), cost, 'r')\nax.set_xlabel('Iterations')\nax.set_ylabel('Cost')\nax.set_title('Error vs. Training Epoch')\n","ff93bb75":"**The relationship of the number of rooms to the house price is not good to use and this makes sense******","be815a6a":"****you can use 20 only iterations !****"}}