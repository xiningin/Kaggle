{"cell_type":{"0eae70e1":"code","6ed25bc0":"code","59314baf":"code","19acc151":"code","b7bac46c":"code","df298289":"code","5d22afac":"code","ba866894":"code","754beddd":"code","c62e22b9":"code","46d03982":"code","aa76b659":"code","e534ab0a":"code","e1a5fec9":"code","37260cea":"code","9e044752":"code","986a7157":"code","7852f847":"code","33697d20":"code","807c3fb5":"code","d485afe8":"code","c3f85c4a":"code","10e997c3":"code","092406b3":"code","32b69cc5":"code","fcbce89a":"code","95795ba4":"markdown"},"source":{"0eae70e1":"import lightgbm as lgb\nimport numpy as np\nimport pandas as pd\nimport random\nimport optuna\nfrom sklearn.model_selection import KFold, train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import mean_squared_error","6ed25bc0":"train = pd.read_csv(\"..\/input\/tabular-playground-series-mar-2021\/train.csv\")\ntest = pd.read_csv(\"..\/input\/tabular-playground-series-mar-2021\/test.csv\")","59314baf":"train.head()","19acc151":"df=train\nfrom sklearn.preprocessing import LabelEncoder\nfor c in df.columns:\n    if df[c].dtype=='object': \n        lbl = LabelEncoder()\n        lbl.fit(list(df[c].values))\n        df[c] = lbl.transform(df[c].values)\ntrain=df","b7bac46c":"train","df298289":"df=test\nfor c in df.columns:\n    if df[c].dtype=='object': \n        lbl = LabelEncoder()\n        lbl.fit(list(df[c].values))\n        df[c] = lbl.transform(df[c].values)\ntest=df","5d22afac":"test","ba866894":"Name0=train['target'].unique()\nName=sorted(Name0)\nprint(Name)","754beddd":"N=[]\nfor i in range(2):\n    N+=[i]\n    \nnormal_mapping=dict(zip(Name,N)) \nreverse_mapping=dict(zip(N,Name)) ","c62e22b9":"target = train['target'].map(normal_mapping)\ndata = train.drop(['target','id'],axis=1)\ntest = test.drop('id',axis=1)","46d03982":"columns=data.columns.to_list()\nprint(columns)","aa76b659":"def objective(trial,data=data,target=target):\n    \n    train_x, test_x, train_y, test_y = train_test_split(data, target, test_size=0.2,random_state=42)\n    param =   {\n        'num_leaves': trial.suggest_int('num_leaves', 2, 200),\n        'objective': trial.suggest_categorical('objective',['regression','rmse']),  \n        'max_depth': trial.suggest_int('max_depth', 3, 5),\n        'learning_rate': trial.suggest_loguniform('learning_rate', 1e-1, 1.0),\n        \"boosting\": \"gbdt\",\n        'lambda_l1': trial.suggest_loguniform('lambda_l1', 1e-8, 1e-3),\n        'lambda_l2': trial.suggest_loguniform('lambda_l2', 1e-3, 10.0),\n        \"bagging_freq\": 5,\n        \"bagging_fraction\": trial.suggest_uniform('bagging_fraction', 0.1, 1.0),\n        \"feature_fraction\": trial.suggest_uniform('feature_fraction', 0.4, 1.0),\n        \"verbosity\": -1,\n    }\n    model = lgb.LGBMClassifier(**param)      \n    model.fit(train_x,train_y,eval_set=[(test_x,test_y)],early_stopping_rounds=100,verbose=False)\n    preds = model.predict(test_x)\n    rmse = mean_squared_error(test_y, preds,squared=False)\n    \n    return rmse","e534ab0a":"study = optuna.create_study(direction='minimize')\nstudy.optimize(objective, n_trials=16)\nprint('Number of finished trials:', len(study.trials))\nprint('Best trial:', study.best_trial.params)","e1a5fec9":"study.trials_dataframe()","37260cea":"# shows the scores from all trials\noptuna.visualization.plot_optimization_history(study)","9e044752":"# interactively visualizes the hyperparameters and scores\noptuna.visualization.plot_parallel_coordinate(study)","986a7157":"# shows the evolution of the search\noptuna.visualization.plot_slice(study)","7852f847":"# parameter interactions on an interactive chart.\noptuna.visualization.plot_contour(study, params=['num_leaves','objective'])","33697d20":"# Visualize parameter importances.\noptuna.visualization.plot_param_importances(study)","807c3fb5":"# Visualize empirical distribution function\noptuna.visualization.plot_edf(study)","d485afe8":"Best_trial=study.best_trial.params\nprint(Best_trial)","c3f85c4a":"sample = pd.read_csv(\"..\/input\/tabular-playground-series-mar-2021\/sample_submission.csv\")\nsample","10e997c3":"preds = np.zeros((sample.shape[0]))\nkf = KFold(n_splits=5,random_state=48,shuffle=True)\nfor trn_idx, test_idx in kf.split(train[columns],target):\n    X_tr,X_val=train[columns].iloc[trn_idx],train[columns].iloc[test_idx]\n    y_tr,y_val=target.iloc[trn_idx],target.iloc[test_idx]\n    model = lgb.LGBMClassifier(**Best_trial)\n    model.fit(X_tr,y_tr,eval_set=[(X_val,y_val)],early_stopping_rounds=100,verbose=False)\n    preds+=model.predict(test[columns])\/kf.n_splits   ###### predict_proba\n    rmse=mean_squared_error(y_val, model.predict(X_val),squared=False)\n    print(rmse)","092406b3":"model","32b69cc5":"print(preds.shape)\nprint(preds[0])","fcbce89a":"subm = sample\nsubm['target'] = np.where(preds<0.5,0,1).astype(int)\nsubm.to_csv('submission.csv',index=False)\nsubm","95795ba4":"# LightGBM with Optuna tuning\n* doc: \nhttps:\/\/github.com\/optuna\/optuna"}}