{"cell_type":{"f40173d4":"code","1690a325":"code","48fdb5d7":"code","7d72521c":"code","8cc11015":"code","2025900e":"code","cd794403":"code","945911cc":"code","eaaac178":"code","2004f5c4":"code","d8b991e5":"code","18477faa":"code","4f0e26e5":"markdown","878dae6a":"markdown","9c6ceb7e":"markdown","30522dea":"markdown","d7067e0e":"markdown"},"source":{"f40173d4":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder\nfrom sklearn.linear_model import LinearRegression, Lasso, ElasticNet\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import mean_squared_error\nfrom scipy.sparse import hstack\nimport eli5","1690a325":"df = pd.read_csv(\n    '\/kaggle\/input\/real-time-advertisers-auction\/Dataset.csv', \n#      parse_dates=['date'],\n)\nprint(df.shape)\ndf.head(2)","48fdb5d7":"# Check feature redundancy\ncorr = df.corr()\nplt.figure(figsize=(10,8))\nsns.heatmap(data=corr,vmin=0, vmax=1, cmap=\"YlGnBu\",  square=True, annot=True, fmt=\".2f\")\nplt.show()","7d72521c":"# some features are constant\ndf.std().sort_values().reset_index().T","8cc11015":"# drop useless features\nuseless_cols = [\n    'integration_type_id' ,  # no variance\n    'revenue_share_percent', # no variance\n    'total_impressions',     # full correlation with measurable_impressions\n]\ndf.drop(useless_cols, axis=1, inplace=True)\n\n# add day_of_week feature\ndf['date'] = pd.to_datetime(df.date)\ndf['day_of_week'] = df.date.apply(lambda x: x.dayofweek)\n\n\ndef weird_division(n, d):\n    return n \/ d if d else 0\n\n\ndf['CPM'] = df.apply(lambda x: weird_division(x['total_revenue'] * 100,\n                                              x['measurable_impressions']) * 1000 , axis=1)\n\n# drop outliers\ndf = df[df['CPM'].between(0, df['CPM'].quantile(.95))]\n\n# drop leaking features\nleaking_cols = ['total_revenue', 'measurable_impressions']\ndf.drop(leaking_cols, axis=1, inplace=True)\n# scale only numeric feature\ndf['viewable_impressions'] = (df['viewable_impressions'] -\n                              df['viewable_impressions'].mean()) \/ df['viewable_impressions'].std()","2025900e":"corr = df.corr()\nplt.figure(figsize=(10,8))\nsns.heatmap(data=corr,vmin=0, vmax=1, cmap=\"YlGnBu\",  square=True, annot=True, fmt=\".2f\")\nplt.show()","cd794403":"# train-test split\ntest_df = df[df.date >= \"2019-06-22\"].drop(['date', 'CPM'], axis=1)\ntest_y = df[df.date >= \"2019-06-22\"]['CPM']\n\ntrain_df = df[df.date < \"2019-06-22\"].drop(['date'], axis=1)","945911cc":"cat_features = [\n    'site_id', 'ad_type_id',\n    'geo_id', 'device_category_id',\n    'advertiser_id',\n    'order_id', 'os_id',\n    'line_item_type_id',\n    'monetization_channel_id', \n    'ad_unit_id', 'day_of_week',\n]\nnum_features = ['viewable_impressions']\n\nassert len(cat_features) + len(num_features) == train_df.shape[1] - 1 == test_df.shape[1]","eaaac178":"# encode categorical features\nohe = OneHotEncoder(handle_unknown='ignore', dtype=np.uint8)\nX = ohe.fit_transform(train_df[cat_features])\nX_test = ohe.transform(test_df[cat_features])\ny = train_df.CPM\n\n# add numeric feature\nX_extended = hstack([X, train_df[num_features]], dtype=np.float32).tocsr()\nX_test_extended = hstack([X_test, test_df[num_features]], dtype=np.float32).tocsr()\n\nassert X.shape[1] == X_test.shape[1] == train_df[cat_features].nunique().sum()","2004f5c4":"# call regressor \"clf\" out of habit... clf is regressor!\nfast_clfs = [\n    LinearRegression(), # good\n    Lasso(.1),          # not bad\n    Lasso(.5),\n    Lasso(1.),\n    ElasticNet(alpha=1, l1_ratio=0.7),\n    ElasticNet(alpha=1, l1_ratio=0.2),\n    ElasticNet(alpha=.5, l1_ratio=0.7),\n    ElasticNet(alpha=.5, l1_ratio=0.2),\n]\n\nfor clf in fast_clfs:\n    scores = cross_val_score(clf, X, y, cv=5, scoring='neg_mean_squared_error', n_jobs=-1)\n    print(repr(clf), -np.round(scores, 2))","d8b991e5":"clf = LinearRegression()\nclf.fit(X, y)\ny_pred = clf.predict(X_test)\nfinal_score = mean_squared_error(test_y, y_pred)\nprint(f\"final CPM prediction score = {final_score:.2f}\")","18477faa":"ohe_features = ohe.get_feature_names(cat_features)\neli5.show_weights(clf, top=30, feature_names=ohe_features)","4f0e26e5":"## We didn't use single numeric feature, because:\n- score is already good\n- with this feature X-matrix will be converted to float dtype and training time will increase. Don't want to wait...\n- it is useless","878dae6a":"### Simple `LinearRegression` is the best of best","9c6ceb7e":"### We can see that `order_id` is the most valuable feature","30522dea":"![image.png](attachment:image.png)","d7067e0e":"## Model interpretation"}}