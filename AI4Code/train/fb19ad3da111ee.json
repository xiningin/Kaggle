{"cell_type":{"3a909cdc":"code","8f86b8cc":"code","57f1908a":"code","03799f4a":"code","6988b26d":"code","c9ee45da":"code","4140ed97":"code","cb6bb288":"code","e2687b75":"code","6c5d3e87":"code","ff7d6888":"code","1684b025":"code","676de8c9":"code","17a9378b":"code","331aec03":"code","588b8bac":"code","87d276b6":"code","80d84151":"code","800400a3":"code","14895077":"code","c024b173":"code","a6e73a0f":"code","2991badb":"code","60c88cf9":"code","49d97e01":"code","6aab87fd":"markdown","eea813c7":"markdown","36c83054":"markdown","b95de051":"markdown","beb7802a":"markdown","1ecb3417":"markdown","d79f5328":"markdown","b3e7c5e1":"markdown","e5ae681b":"markdown"},"source":{"3a909cdc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8f86b8cc":"# Directive pour afficher les graphiques dans Jupyter\n%matplotlib inline\n\n\n# MatPlotLib : librairie de visualisation et graphiques\n# Seaborn : libraire d'affichage\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n\nfrom sklearn import model_selection\n\nfrom sklearn.metrics import classification_report, confusion_matrix, roc_curve, roc_auc_score,auc, accuracy_score\n\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\n\nfrom sklearn.linear_model import LogisticRegression\n\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn import datasets","57f1908a":"from keras.datasets import mnist\n\nfrom keras.models import Sequential, load_model\n\nfrom keras.layers import Dense, Dropout, Flatten\n\nfrom keras.layers.convolutional import Conv2D, MaxPooling2D\n\nfrom keras.utils.np_utils import to_categorical","03799f4a":"df = pd.read_csv('..\/input\/skin-cancer-mnist-ham10000\/hmnist_28_28_RGB.csv')","6988b26d":"df.head(10)","c9ee45da":"df.shape","4140ed97":"df.info","cb6bb288":"n_samples = len(df.index)\nimages = np.array(df.drop(['label'],axis=1))\nimages = images.reshape(n_samples,28,28,3)","e2687b75":"plt.figure(figsize=(10,20))\nfor i in range(0,49) :\n    plt.subplot(10,5,i+1)\n    plt.axis('off')\n    plt.imshow(images[i], cmap=\"gray_r\")\n    plt.title(df.label[i])","6c5d3e87":"y = df['label']\nX = df.drop(['label'],axis=1)","ff7d6888":"X = X\/255","1684b025":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)","676de8c9":"from sklearn.neural_network import MLPClassifier\nmlp = MLPClassifier(hidden_layer_sizes=(200,60))\nmlp.fit(X_train,y_train)\ny_mlp = mlp.predict(X_test)","17a9378b":"mlp_score = accuracy_score(y_test, y_mlp)\nprint(mlp_score)","331aec03":"pd.crosstab(y_test, y_mlp, rownames=['Reel'], colnames=['Prediction'], margins=True)","588b8bac":"num_classes = 25","87d276b6":"from keras.models import Sequential\nfrom keras.layers import Dense","80d84151":"model = Sequential()\n# model.add(Dense(200, activation='relu'))\n# model.add(Dense(60, activation='relu'))\nmodel.add(Dense(num_classes, activation='softmax'))","800400a3":"model.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","14895077":"train = model.fit(X_train , y_train , validation_data=(X_test,y_test), epochs=30, verbose=1)","c024b173":"model.evaluate(X_test,y_test)","a6e73a0f":"print(train.history['accuracy'])","2991badb":"print(train.history['val_accuracy'])","60c88cf9":"def plot_scores(train) :\n    accuracy = train.history['accuracy']\n    val_accuracy = train.history['val_accuracy']\n    epochs = range(len(accuracy))\n    plt.plot(epochs, accuracy, 'b', label='Score apprentissage')\n    plt.plot(epochs, val_accuracy, 'r', label='Score validation')\n    plt.title('Scores')\n    plt.legend()\n    plt.show()","49d97e01":"plot_scores(train)","6aab87fd":"S\u00e9p\u00e9ration de X et Y","eea813c7":"Test \/ Train - Split ","36c83054":"Matrice de confusion","b95de051":"Affichage de samples","beb7802a":"Lecture de donn\u00e9es ","1ecb3417":"## R\u00e9seaux denses (Keras\/ Tensorflow)","d79f5328":"Donner la performance ","b3e7c5e1":"## R\u00e9seaux denses (sklearn)","e5ae681b":"Normalization de valeurs entre 0 et 1 :"}}