{"cell_type":{"7a784fb8":"code","31534634":"code","56d92ec0":"code","18fdde3d":"code","d8e60874":"code","15870b17":"code","8505eddd":"code","d0401562":"code","abecf9d3":"code","0f52c87c":"code","f1458af0":"code","4d9ec8ee":"markdown","b5e76440":"markdown","766352a9":"markdown","5433190a":"markdown","8bf7cdc8":"markdown","8884029f":"markdown","b0489e0a":"markdown","29778db9":"markdown","53577116":"markdown","690d0903":"markdown","e437d83b":"markdown"},"source":{"7a784fb8":"import os\nimport sys\nimport numpy as np\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport matplotlib.gridspec as gridspec\nimport glob\nimport time\nimport pickle\nfrom scipy import signal","31534634":"save_figures = False\nfile_ending = '.png'\nmodel_string = 'NMDA'\n\ndataset_folder = '\/kaggle\/input\/single-neurons-as-deep-nets-nmda-test-data'\n\nmorphology_folder = os.path.join(dataset_folder, 'Morphology')\ntest_data_folder  = os.path.join(dataset_folder, 'Data_test')\n\nmorphology_filename      = os.path.join(morphology_folder, 'morphology_dict.pickle')\ntest_files               = sorted(glob.glob(os.path.join(test_data_folder, '*_128_simulationRuns*_6_secDuration_*')))\n\nprint('-----------------------------------------------')\nprint('finding files: morphology and test data')\nprint('-----------------------------------------------')\nprint('morphology found     : \"%s\"' %(morphology_filename.split('\/')[-1]))\nprint('number of test files is %d' %(len(test_files)))\nprint('-----------------------------------------------')","56d92ec0":"#%% helper functions\n\ndef dict2bin(row_inds_spike_times_map, num_segments, sim_duration_ms):\n    \n    bin_spikes_matrix = np.zeros((num_segments, sim_duration_ms), dtype='bool')\n    for row_ind in row_inds_spike_times_map.keys():\n        for spike_time in row_inds_spike_times_map[row_ind]:\n            bin_spikes_matrix[row_ind,spike_time] = 1.0\n    \n    return bin_spikes_matrix\n\ndef parse_sim_experiment_file(sim_experiment_file):\n    \n    print('-----------------------------------------------------------------')\n    print(\"loading file: '\" + sim_experiment_file.split(\"\\\\\")[-1] + \"'\")\n    loading_start_time = time.time()\n    experiment_dict = pickle.load(open(sim_experiment_file, \"rb\" ), encoding='latin1')\n    \n    # gather params\n    num_simulations = len(experiment_dict['Results']['listOfSingleSimulationDicts'])\n    num_segments    = len(experiment_dict['Params']['allSegmentsType'])\n    sim_duration_ms = experiment_dict['Params']['totalSimDurationInSec']*1000\n    num_ex_synapses  = num_segments\n    num_inh_synapses = num_segments\n    num_synapses = num_ex_synapses + num_inh_synapses\n    \n    # collect X, y_spike, y_soma\n    X = np.zeros((num_synapses,sim_duration_ms,num_simulations), dtype='bool')\n    y_spike = np.zeros((sim_duration_ms,num_simulations))\n    y_soma  = np.zeros((sim_duration_ms,num_simulations))\n    for k, sim_dict in enumerate(experiment_dict['Results']['listOfSingleSimulationDicts']):\n        X_ex  = dict2bin(sim_dict['exInputSpikeTimes'] , num_segments, sim_duration_ms)\n        X_inh = dict2bin(sim_dict['inhInputSpikeTimes'], num_segments, sim_duration_ms)\n        X[:,:,k] = np.vstack((X_ex,X_inh))\n        spike_times = (sim_dict['outputSpikeTimes'].astype(float) - 0.5).astype(int)\n        y_spike[spike_times,k] = 1.0\n        y_soma[:,k] = sim_dict['somaVoltageLowRes']\n\n    loading_duration_sec = time.time() - loading_start_time \n    print('loading took %.3f seconds' %(loading_duration_sec))\n    print('-----------------------------------------------------------------')\n\n    return X, y_spike, y_soma\n\n\ndef parse_multiple_sim_experiment_files(sim_experiment_files):\n    \n    for k, sim_experiment_file in enumerate(sim_experiment_files):\n        X_curr, y_spike_curr, y_soma_curr = parse_sim_experiment_file(sim_experiment_file)\n        \n        if k == 0:\n            X       = X_curr\n            y_spike = y_spike_curr\n            y_soma  = y_soma_curr\n        else:\n            X       = np.dstack((X,X_curr))\n            y_spike = np.hstack((y_spike,y_spike_curr))\n            y_soma  = np.hstack((y_soma,y_soma_curr))\n            \n    return X, y_spike, y_soma\n","18fdde3d":"#%% load test dataset\n\nprint('----------------------------------------------------------------------------------------')\nprint('loading testing files...')\ntest_file_loading_start_time = time.time()\n\nv_threshold = -55\n\ntest_files = test_files[:3] # just load 3 files (no need for more than that)\n\n# load test data\nX_test , y_spike_test , y_soma_test  = parse_multiple_sim_experiment_files(test_files)\ny_soma_test[y_soma_test > v_threshold] = v_threshold\n\ntest_file_loading_duration_min = (time.time() - test_file_loading_start_time)\/60\nprint('time took to load data is %.3f minutes' %(test_file_loading_duration_min))\nprint('----------------------------------------------------------------------------------------')","d8e60874":"##%% load morphology\n\nmorphology_dict = pickle.load(open(morphology_filename, \"rb\" ), encoding='latin1')\n\nallSectionsLength                  = morphology_dict['all_sections_length']\nallSections_DistFromSoma           = morphology_dict['all_sections_distance_from_soma']\nallSegmentsLength                  = morphology_dict['all_segments_length']\nallSegmentsType                    = morphology_dict['all_segments_type']\nallSegments_DistFromSoma           = morphology_dict['all_segments_distance_from_soma']\nallSegments_SectionDistFromSoma    = morphology_dict['all_segments_section_distance_from_soma']\nallSegments_SectionInd             = morphology_dict['all_segments_section_index']\nallSegments_seg_ind_within_sec_ind = morphology_dict['all_segments_segment_index_within_section_index']\n\nall_basal_section_coords  = morphology_dict['all_basal_section_coords']\nall_basal_segment_coords  = morphology_dict['all_basal_segment_coords']\nall_apical_section_coords = morphology_dict['all_apical_section_coords']\nall_apical_segment_coords = morphology_dict['all_apical_segment_coords']\n\nseg_ind_to_xyz_coords_map = {}\nseg_ind_to_sec_ind_map = {}\nfor k in range(len(allSegmentsType)):\n    curr_segment_ind = allSegments_seg_ind_within_sec_ind[k]\n    if allSegmentsType[k] == 'basal':\n        curr_section_ind = allSegments_SectionInd[k]\n        seg_ind_to_xyz_coords_map[k] = all_basal_segment_coords[(curr_section_ind,curr_segment_ind)]\n        seg_ind_to_sec_ind_map[k] = ('basal', curr_section_ind)\n    elif allSegmentsType[k] == 'apical':\n        curr_section_ind = allSegments_SectionInd[k] - len(all_basal_section_coords)\n        seg_ind_to_xyz_coords_map[k] = all_apical_segment_coords[(curr_section_ind,curr_segment_ind)]\n        seg_ind_to_sec_ind_map[k] = ('apical', curr_section_ind)\n    else:\n        print('error!')\n","15870b17":"##%% load dendritic voltage traces of single simulation file\n\nsim_experiment_file = test_files[0]\nexperiment_dict = pickle.load(open(sim_experiment_file, \"rb\" ), encoding='latin1')\n\nX_spikes, _, _ = parse_sim_experiment_file(sim_experiment_file)\n\n# gather params\nnum_simulations = len(experiment_dict['Results']['listOfSingleSimulationDicts'])\nnum_segments    = len(experiment_dict['Params']['allSegmentsType'])\nsim_duration_ms = experiment_dict['Params']['totalSimDurationInSec']*1000\n\n# collect X, y_spike, y_soma\nsim_dict = experiment_dict['Results']['listOfSingleSimulationDicts'][0]\n\nt_LR = sim_dict['recordingTimeLowRes']\nt_HR = sim_dict['recordingTimeHighRes']\ny_soma_LR  = np.zeros((sim_duration_ms,num_simulations))\ny_nexus_LR = np.zeros((sim_duration_ms,num_simulations))\ny_soma_HR  = np.zeros((sim_dict['somaVoltageHighRes'].shape[0],num_simulations))\ny_nexus_HR = np.zeros((sim_dict['nexusVoltageHighRes'].shape[0],num_simulations))\n\ny_DVTs  = np.zeros((num_segments,sim_duration_ms,num_simulations), dtype=np.float16)\n\n# go over all simulations in the experiment and collect their results\nfor k, sim_dict in enumerate(experiment_dict['Results']['listOfSingleSimulationDicts']):\n    y_nexus_LR[:,k] = sim_dict['nexusVoltageLowRes']\n    y_soma_LR[:,k] = sim_dict['somaVoltageLowRes']    \n    y_nexus_HR[:,k] = sim_dict['nexusVoltageHighRes']\n    y_soma_HR[:,k] = sim_dict['somaVoltageHighRes']    \n    y_DVTs[:,:,k] = sim_dict['dendriticVoltagesLowRes']\n\n    output_spike_times = np.int32(sim_dict['outputSpikeTimes'])\n    # put \"voltage spikes\" in low res\n    y_soma_LR[output_spike_times,k] = 30\n","8505eddd":"#%% show some colored DVTs with trace colors colorcoded with morphology segments\n# also show soma and nexus voltage traces at the bottom\n\ntime_point_ranges_options = [[2800,3200],[2600,3400]]\n\n# select random simulation to display\nnum_spikes_per_sim = (y_soma_LR > 20).sum(axis=0)\npossible_simulations = np.nonzero(np.logical_and(num_spikes_per_sim >= 5, num_spikes_per_sim <= 30))[0]\nrandom_simulation = np.random.choice(possible_simulations, size=1)[0]\n\nprint('random_simulation = %d' %(random_simulation))\n\nfor time_points_ranges in time_point_ranges_options:\n    # choose time points to display\n    # time_points_ranges = [2800,3200]\n    width_mult_factor = 1.2\n\n    duration_ms = time_points_ranges[1] - time_points_ranges[0]\n\n    section_index      = np.array(experiment_dict['Params']['allSegments_SectionInd'])\n    distance_from_soma = np.array(experiment_dict['Params']['allSegments_SectionDistFromSoma'])\n    is_basal           = np.array([x == 'basal' for x in experiment_dict['Params']['allSegmentsType']])\n\n    dend_colors = section_index*20 + distance_from_soma\n    dend_colors = dend_colors \/ dend_colors.max()\n\n    all_seg_inds = seg_ind_to_xyz_coords_map.keys()\n    colors = plt.cm.jet(dend_colors)\n\n    # assemble the colors for each dendritic segment\n    colors_per_segment = {}\n    for seg_ind in all_seg_inds:\n        colors_per_segment[seg_ind] = colors[seg_ind]\n\n    fig = plt.figure(figsize=(32,15))\n    fig.subplots_adjust(left=0.01,right=0.99,top=0.99,bottom=0.01,hspace=0.01, wspace=0.2)\n\n    ax1 = plt.subplot2grid((1, 4), (0, 0), colspan=1)\n    ax2 = plt.subplot2grid((1, 4), (0, 1), colspan=3)\n\n    # plot the cell morphology\n    ax1.set_axis_off()\n    for key in all_seg_inds:\n        seg_color = colors_per_segment[key]\n        seg_line_width = width_mult_factor*np.array(seg_ind_to_xyz_coords_map[key]['d']).mean()\n        seg_x_coords = seg_ind_to_xyz_coords_map[key]['x']\n        seg_y_coords = seg_ind_to_xyz_coords_map[key]['y']\n\n        ax1.plot(seg_x_coords,seg_y_coords,lw=seg_line_width,color=seg_color)\n\n    # add black soma    \n    ax1.scatter(x=45.5,y=19.8,s=120,c='k')\n    ax1.set_xlim(-180,235)\n    ax1.set_ylim(-210,1200)\n\n    # plot the DVTs\n    dend_colors = section_index*20 + distance_from_soma\n    dend_colors = dend_colors \/ dend_colors.max()\n    sorted_according_to_colors = np.argsort(dend_colors)\n    delta_voltage = 700.0 \/ sorted_according_to_colors.shape[0]\n    for k in sorted_according_to_colors:\n        ax2.plot(t_LR, 150+k*delta_voltage+y_DVTs[k,:,random_simulation].T,c=colors[k], alpha=0.55)\n\n    # plot the soma and nexus traces\n    ax2.plot(t_HR[:], 2.3*y_soma_HR[:,random_simulation].T, c='darkblue', lw=2.4)\n    ax2.plot(t_HR[:], 2.3*y_nexus_HR[:,random_simulation].T, c='red', lw=2.4)\n    ax2.set_xlim(time_points_ranges[0],time_points_ranges[1]);\n    ax2.set_axis_off()\n\n    fig.patch.set_facecolor('black')\n    #fig.patch.set_facecolor('0.12')\n    \n    if save_figures:\n        figure_name = '%s__DVT_%d_ms_%d' %(model_string, duration_ms, np.random.randint(20))\n        fig.savefig(output_figures_dir + figure_name + file_ending, bbox_inches='tight')\n","d0401562":"#%% show some colored DVTs with trace colors colorcoded with morphology segments\n# also show soma and nexus voltage traces at the bottom\n\ntime_point_ranges_options = [[2800,3200],[2600,3400]]\n\n# select random simulation to display\nnum_spikes_per_sim = (y_soma_LR > 20).sum(axis=0)\npossible_simulations = np.nonzero(np.logical_and(num_spikes_per_sim >= 5, num_spikes_per_sim <= 30))[0]\nrandom_simulation = np.random.choice(possible_simulations, size=1)[0]\n\nprint('random_simulation = %d' %(random_simulation))\n\nfor time_points_ranges in time_point_ranges_options:\n    # choose time points to display\n    # time_points_ranges = [2800,3200]\n    width_mult_factor = 1.2\n\n    duration_ms = time_points_ranges[1] - time_points_ranges[0]\n\n    section_index      = np.array(experiment_dict['Params']['allSegments_SectionInd'])\n    distance_from_soma = np.array(experiment_dict['Params']['allSegments_SectionDistFromSoma'])\n    is_basal           = np.array([x == 'basal' for x in experiment_dict['Params']['allSegmentsType']])\n\n    dend_colors = section_index*20 + distance_from_soma\n    dend_colors = dend_colors \/ dend_colors.max()\n\n    all_seg_inds = seg_ind_to_xyz_coords_map.keys()\n    colors = plt.cm.jet(dend_colors)\n\n    # assemble the colors for each dendritic segment\n    colors_per_segment = {}\n    for seg_ind in all_seg_inds:\n        colors_per_segment[seg_ind] = colors[seg_ind]\n\n    fig = plt.figure(figsize=(32,15))\n    fig.subplots_adjust(left=0.01,right=0.99,top=0.99,bottom=0.01,hspace=0.01, wspace=0.2)\n\n    ax1 = plt.subplot2grid((1, 4), (0, 0), colspan=1)\n    ax2 = plt.subplot2grid((1, 4), (0, 1), colspan=3)\n\n    # plot the cell morphology\n    ax1.set_axis_off()\n    for key in all_seg_inds:\n        seg_color = colors_per_segment[key]\n        seg_line_width = width_mult_factor*np.array(seg_ind_to_xyz_coords_map[key]['d']).mean()\n        seg_x_coords = seg_ind_to_xyz_coords_map[key]['x']\n        seg_y_coords = seg_ind_to_xyz_coords_map[key]['y']\n\n        ax1.plot(seg_x_coords,seg_y_coords,lw=seg_line_width,color=seg_color)\n\n    # add black soma    \n    ax1.scatter(x=45.5,y=19.8,s=120,c='k')\n    ax1.set_xlim(-180,235)\n    ax1.set_ylim(-210,1200)\n\n    # plot the DVTs\n    dend_colors = section_index*20 + distance_from_soma\n    dend_colors = dend_colors \/ dend_colors.max()\n    sorted_according_to_colors = np.argsort(dend_colors)\n    delta_voltage = 700.0 \/ sorted_according_to_colors.shape[0]\n    for k in sorted_according_to_colors:\n        ax2.plot(t_LR, 150+k*delta_voltage+y_DVTs[k,:,random_simulation].T,c=colors[k], alpha=0.55)\n\n    # plot the soma and nexus traces\n    ax2.plot(t_HR[:], 2.3*y_soma_HR[:,random_simulation].T, c='black', lw=2.4)\n    ax2.plot(t_HR[:], 2.3*y_nexus_HR[:,random_simulation].T, c='red', lw=2.4)\n    ax2.set_xlim(time_points_ranges[0],time_points_ranges[1]);\n    ax2.set_axis_off()\n    \n    if save_figures:\n        figure_name = '%s__DVT_%d_ms_%d' %(model_string, duration_ms, np.random.randint(20))\n        fig.savefig(output_figures_dir + figure_name + file_ending, bbox_inches='tight')\n","abecf9d3":"#%% show input spikes (X) and output somatic voltages\n\nnum_spikes_per_sim = y_spike_test.sum(axis=0)\npossible_simulations = np.nonzero(np.logical_and(num_spikes_per_sim >= 3, num_spikes_per_sim <= 30))[0]\nrandom_simulation = np.random.choice(possible_simulations, size=1)[0]\n\nnum_synapses = X_test.shape[0]\nnum_ex_synapses  = int(num_synapses\/2)\nnum_inh_synapses = int(num_synapses\/2)\n\n# covert binary matrix to dict representation\nall_presynaptic_spikes_bin = X_test[:,:,random_simulation]\n\nexc_presynaptic_spikes = X_test[:num_ex_synapses,:,random_simulation].T\ninh_presynaptic_spikes = X_test[num_ex_synapses:,:,random_simulation].T\n\n#ex_presynaptic_spikes = X_test[random_simulation,:num_ex_synapses,:]\nsoma_voltage_trace = y_soma_test[:,random_simulation]\nsoma_voltage_trace[soma_voltage_trace > -30] = 30 # fix spikes height (that occurs due to low resolution temporal sampling)\n\n# for raster plot (scatter)\nexc_syn_activation_time, exc_syn_activation_index = np.nonzero(exc_presynaptic_spikes)\nexc_syn_activation_time = exc_syn_activation_time \/ 1000.0\n\ninh_syn_activation_time, inh_syn_activation_index = np.nonzero(inh_presynaptic_spikes)\ninh_syn_activation_index = inh_syn_activation_index + num_ex_synapses\ninh_syn_activation_time = inh_syn_activation_time \/ 1000.0\n\n\nexc_instantaneous_firing_rate = exc_presynaptic_spikes.sum(axis=1)\ninh_instantaneous_firing_rate = inh_presynaptic_spikes.sum(axis=1)\n\ntau = 10\nexc_instantaneous_firing_rate = signal.convolve(exc_instantaneous_firing_rate   , (1.0\/tau)*np.ones((tau,)), mode='same')\ninh_instantaneous_firing_rate = signal.convolve(inh_instantaneous_firing_rate   , (1.0\/tau)*np.ones((tau,)), mode='same')\n\nsim_duration_sec = sim_duration_ms \/ 1000.0\ntime_in_sec = np.arange(sim_duration_ms) \/ 1000.0\n\n\nxytick_labels_fontsize = 16\ntitle_fontsize = 30\nxylabels_fontsize = 22\nlegend_fontsize = 26\n\nfig = plt.figure(figsize=(25,18));\ngs = gridspec.GridSpec(4,1)\ngs.update(left=0.05, right=0.97, bottom=0.05, top=0.97, hspace=0.12)\nax0 = plt.subplot(gs[0:2,0])\nax1 = plt.subplot(gs[2,0])\nax2 = plt.subplot(gs[3,0])\n\nax0.scatter(exc_syn_activation_time, exc_syn_activation_index, s=2, c='r')\nax0.scatter(inh_syn_activation_time, inh_syn_activation_index, s=2, c='b')\n#ax0.set_axis_off()\nax0.set_xlim(0,sim_duration_sec-0.01)\nax0.set_ylabel('synapse index \\n', fontsize=xylabels_fontsize)\nax0.grid('off')\nax0.set_yticks([])\nax0.set_xticks([])\n\nax1.plot(time_in_sec, exc_instantaneous_firing_rate, c='r')\nax1.plot(time_in_sec, inh_instantaneous_firing_rate, c='b')\nax1.set_xlim(0,sim_duration_sec)\nax1.set_ylabel('total number of input spikes\\n per milisecond', fontsize=xylabels_fontsize);\nax1.legend(['excitation', 'inhibition'], fontsize=legend_fontsize, loc='upper left', ncol=2);\n\nax2.plot(time_in_sec, soma_voltage_trace, c='k')\nax2.set_xlim(0,sim_duration_sec)\nax2.set_ylabel('Soma Voltage [mV]', fontsize=xylabels_fontsize);\nax2.set_xlabel('Time [sec]', fontsize=xylabels_fontsize);\n\nif save_figures:\n    figure_name = '%s__input_output_%d' %(model_string, np.random.randint(20))\n    fig.savefig(output_figures_dir + figure_name + file_ending, bbox_inches='tight')\n","0f52c87c":"#%% create plot of \"input ex\/ing, bas\/apic inst rate\" and \"output soma voltage\" for several simulations\n\nnum_plots = 5\nselected_inds = np.random.choice(y_soma_test.shape[1],size=num_plots)\n\n# soma traces\nfig = plt.figure(figsize=(32,15))\nfig.subplots_adjust(left=0.05, bottom=0.05, right=0.95, top=0.95, wspace=0.05, hspace=0.15)\nfor k in range(num_plots):\n    soma_voltage_trace = y_soma_test[:,selected_inds[k]]\n    soma_voltage_trace[soma_voltage_trace > -30] = 30 # fix spikes height (that occurs due to low resolution temporal sampling)\n\n    plt.subplot(num_plots,1,k+1); \n    plt.plot(time_in_sec, soma_voltage_trace)\n    plt.xlim(0,sim_duration_sec)\n    if k == int(num_plots\/2):\n        plt.ylabel('Soma Voltage [mV]', fontsize=20)\nplt.xlabel('Time [sec]', fontsize=20)\n\nif save_figures:\n    figure_name = '%s__soma_traces_%d' %(model_string, np.random.randint(20))\n    for file_ending in all_file_endings_to_use:\n        if file_ending == '.png':\n            fig.savefig(output_figures_dir + figure_name + file_ending, bbox_inches='tight')\n        else:\n            subfolder = '%s\/' %(file_ending.split('.')[-1])\n            fig.savefig(output_figures_dir + subfolder + figure_name + file_ending, bbox_inches='tight')\n\n# input traces\nnum_segments =  639\nbasal_cutoff =  262\ntuft_cutoff  = [366,559]\n\nex_basal_syn_inds    = np.arange(basal_cutoff)\nex_oblique_syn_inds  = np.hstack((np.arange(basal_cutoff,tuft_cutoff[0]),np.arange(tuft_cutoff[1],num_segments)))\nex_tuft_syn_inds     = np.arange(tuft_cutoff[0],tuft_cutoff[1])\ninh_basal_syn_inds   = num_segments + ex_basal_syn_inds\ninh_oblique_syn_inds = num_segments + ex_oblique_syn_inds\ninh_tuft_syn_inds    = num_segments + ex_tuft_syn_inds\n\ntau = 20\n\nfig = plt.figure(figsize=(32,15))\nfig.subplots_adjust(left=0.07, bottom=0.05, right=0.95, top=0.9, wspace=0.05, hspace=0.1)\nfor k in range(num_plots):\n    ex_basal    = X_test[ex_basal_syn_inds,:,selected_inds[k]].sum(axis=0)\n    ex_oblique  = X_test[ex_oblique_syn_inds,:,selected_inds[k]].sum(axis=0)\n    ex_apical   = X_test[ex_tuft_syn_inds,:,selected_inds[k]].sum(axis=0)\n\n    inh_basal   = X_test[inh_basal_syn_inds,:,selected_inds[k]].sum(axis=0)\n    inh_oblique = X_test[inh_oblique_syn_inds,:,selected_inds[k]].sum(axis=0)\n    inh_apical  = X_test[inh_tuft_syn_inds,:,selected_inds[k]].sum(axis=0)\n\n    plt.subplot(num_plots,1,k+1); \n    plt.plot(time_in_sec, signal.convolve(ex_basal   , (1.0\/tau)*np.ones((tau,)), mode='same'), c='red')\n    plt.plot(time_in_sec, signal.convolve(ex_oblique , (1.0\/tau)*np.ones((tau,)), mode='same'), c='orange')\n    plt.plot(time_in_sec, signal.convolve(ex_apical  , (1.0\/tau)*np.ones((tau,)), mode='same'), c='yellow')\n    plt.plot(time_in_sec, signal.convolve(inh_basal  , (1.0\/tau)*np.ones((tau,)), mode='same'), c='darkblue')\n    plt.plot(time_in_sec, signal.convolve(inh_oblique, (1.0\/tau)*np.ones((tau,)), mode='same'), c='blue')\n    plt.plot(time_in_sec, signal.convolve(inh_apical , (1.0\/tau)*np.ones((tau,)), mode='same'), c='skyblue')\n    plt.xlim(0,sim_duration_sec)\n\n    if k == 0:\n        plt.legend(['exc basal','exc oblique','exc tuft','inh basal','inh oblique','inh tuft'], ncol=2, fontsize=15, loc='upper left');\n\n    if k == int(num_plots\/2):\n        plt.ylabel('Instantanous input rate \\n[spikes per second per subtree]', fontsize=20);\n\n\nfor k in range(num_plots):\n    selected_ind = np.random.choice(y_soma_test.shape[1],size=1)[0]    \n\n    soma_voltage_trace = y_soma_test[:,selected_ind]\n    soma_voltage_trace[soma_voltage_trace > -30] = 30 # fix spikes height (that occurs due to low resolution temporal sampling)\n\n    plt.figure(figsize=(32,15));\n    plt.subplots_adjust(left=0.07, bottom=0.05, right=0.95, top=0.95, wspace=0.05, hspace=0.1)\n\n    ex_basal    = X_test[ex_basal_syn_inds,:,selected_ind].sum(axis=0)\n    ex_oblique  = X_test[ex_oblique_syn_inds,:,selected_ind].sum(axis=0)\n    ex_apical   = X_test[ex_tuft_syn_inds,:,selected_ind].sum(axis=0)\n\n    inh_basal   = X_test[inh_basal_syn_inds,:,selected_ind].sum(axis=0)\n    inh_oblique = X_test[inh_oblique_syn_inds,:,selected_ind].sum(axis=0)\n    inh_apical  = X_test[inh_tuft_syn_inds,:,selected_ind].sum(axis=0)\n\n    plt.subplot(2,1,1); \n    plt.plot(time_in_sec, signal.convolve(ex_basal   , 1000*(1.0\/tau)*np.ones((tau,)), mode='same'), c='red')[tau:]\n    plt.plot(time_in_sec, signal.convolve(ex_oblique , 1000*(1.0\/tau)*np.ones((tau,)), mode='same'), c='orange')[tau:]\n    plt.plot(time_in_sec, signal.convolve(ex_apical  , 1000*(1.0\/tau)*np.ones((tau,)), mode='same'), c='yellow')[tau:]\n    plt.plot(time_in_sec, signal.convolve(inh_basal  , 1000*(1.0\/tau)*np.ones((tau,)), mode='same'), c='darkblue')[tau:]\n    plt.plot(time_in_sec, signal.convolve(inh_oblique, 1000*(1.0\/tau)*np.ones((tau,)), mode='same'), c='blue')[tau:]\n    plt.plot(time_in_sec, signal.convolve(inh_apical , 1000*(1.0\/tau)*np.ones((tau,)), mode='same'), c='skyblue')[tau:]\n    plt.ylabel('Instantanous input rate \\n[spikes per second per subtree]', fontsize=20);\n    plt.legend(['exc basal','exc oblique','exc tuft','inh basal','inh oblique','inh tuft'], ncol=2, fontsize=20, loc='upper left');\n    plt.xlim(0,sim_duration_sec)\n    plt.subplot(2,1,2);\n    plt.plot(time_in_sec, soma_voltage_trace)\n    plt.ylabel('Soma Voltage [mV]', fontsize=20)\n    plt.xlim(0,sim_duration_sec)\n\nplt.xlabel('Time [sec]', fontsize=20)\n\nif save_figures:\n    figure_name = '%s__inst_rates_%d' %(model_string, np.random.randint(20))\n    fig.savefig(output_figures_dir + figure_name + file_ending, bbox_inches='tight')\n","f1458af0":"#%% show histograms and scatter plots of input and output firing rates (x=ex, y=inh, c=output) for different time windows\n\nfor time_window_size_ms in [100,200,1000]:\n    # time_window_size_ms = 100\n    \n    xytick_labels_fontsize = 20\n    title_fontsize = 34\n    xylabels_fontsize = 28\n    legend_fontsize = 28\n    \n    half_window_size = int(time_window_size_ms\/2)\n    \n    selected_simulations = np.random.choice(X_test.shape[2], size=X_test.shape[2], replace=False)\n    \n    X_exc = X_test[:num_ex_synapses,:,selected_simulations].sum(axis=0).astype(np.float32)\n    X_inh = X_test[num_ex_synapses:,:,selected_simulations].sum(axis=0).astype(np.float32)\n    y_out = y_spike_test[:,selected_simulations]\n    \n    tau = time_window_size_ms\n    \n    filter_to_use = np.ones((tau,1))\n    \n    X_exc_aggregated = signal.convolve(X_exc, filter_to_use, mode='same')[half_window_size::half_window_size,:].ravel()\n    X_inh_aggregated = signal.convolve(X_inh, filter_to_use, mode='same')[half_window_size::half_window_size,:].ravel()\n    y_out_aggregated = signal.convolve(y_out, filter_to_use, mode='same')[half_window_size::half_window_size,:].ravel()\n    \n    # histograms\n    fig = plt.figure(figsize=(32,15))\n    fig.subplots_adjust(left=0.05, bottom=0.08, right=0.95, top=0.92, wspace=0.1, hspace=0.1)\n    plt.suptitle('input and output histograms (window = %d ms)' %(time_window_size_ms), fontsize=title_fontsize)\n    plt.subplot(1,3,1); plt.ylabel('Counts', fontsize=xylabels_fontsize)\n    plt.hist(X_exc_aggregated, bins=100); plt.xlabel('num excitatory spikes per window', fontsize=xylabels_fontsize);\n    plt.subplot(1,3,2); \n    plt.hist(X_inh_aggregated, bins=100); plt.xlabel('num inhibitory spikes per window', fontsize=xylabels_fontsize)\n    plt.subplot(1,3,3); \n    if time_window_size_ms < 300:\n        plt.hist(y_out_aggregated, bins=np.arange(1,7)-0.5); plt.xlabel('num output spikes per window', fontsize=xylabels_fontsize)\n    else:\n        plt.hist(y_out_aggregated, bins=np.arange(1,14)-0.5); plt.xlabel('num output spikes per window', fontsize=xylabels_fontsize)\n    \n    if save_figures:\n        figure_name = '%s__inout_rates_histograms_%d_ms' %(model_string, time_window_size_ms)\n        for file_ending in all_file_endings_to_use:\n            if file_ending == '.png':\n                fig.savefig(output_figures_dir + figure_name + file_ending, bbox_inches='tight')\n            else:\n                subfolder = '%s\/' %(file_ending.split('.')[-1])\n                fig.savefig(output_figures_dir + subfolder + figure_name + file_ending, bbox_inches='tight')\n    \n    # scatter\n    fig = plt.figure(figsize=(18,18))\n    fig.subplots_adjust(left=0.07, bottom=0.05, right=0.95, top=0.95, wspace=0.1, hspace=0.1)\n    plt.scatter(x=X_inh_aggregated,y=X_exc_aggregated,c=y_out_aggregated, vmin=0, vmax=3, s=100, alpha=0.55)\n    plt.ylabel('num excitatory spikes per window', fontsize=xylabels_fontsize)\n    plt.xlabel('num inhibitory spikes per window', fontsize=xylabels_fontsize)\n    plt.colorbar();\n    plt.title('scatter plot (x=inh, y=exc, color=output)', fontsize=title_fontsize)\n    \n    if save_figures:\n        figure_name = '%s__inout_rates_scatter_%d_ms' %(model_string, time_window_size_ms)\n        fig.savefig(output_figures_dir + figure_name + file_ending, bbox_inches='tight')\n","4d9ec8ee":"# Load test dataset\nNOTE: for those unfamiliar with kaggle, please press the \"code\" rectangle on the right to collapse\/uncollapse this cell","b5e76440":"# Once more, this time with white background\nNOTE: for those unfamiliar with kaggle, please press the \"code\" rectangle on the right to collapse\/uncollapse this cell","766352a9":"# Show input spikes raster and output somatic voltages\nNOTE: for those unfamiliar with kaggle, please press the \"code\" rectangle on the right to collapse\/uncollapse this cell\n","5433190a":"# Create plot of instantanoues firing rates and output somatic voltage\n- several samples of output somatic voltage traces\n- several concurrent samples of all of the following traces:\n    - instantanous firing rate of excitatory input to the basal tree\n    - instantanous firing rate of excitatory input to the oblique tree\n    - instantanous firing rate of excitatory input to the apical tree\n    - instantanous firing rate of inhibitory input to the basal tree\n    - instantanous firing rate of inhibitory input to the oblique tree\n    - instantanous firing rate of inhibitory input to the apical tree\n- several samples of concurrent (input, output) pairs\n\nNOTE: for those unfamiliar with kaggle, please press the \"code\" rectangle on the right to collapse\/uncollapse this cell\n","8bf7cdc8":"# Simulation of a Single Cortical Neuron\n\nThis script explores the simulations performed in the paper \"[Single Cortical Neurons as Deep Artificial Neural Networks](https:\/\/www.biorxiv.org\/content\/10.1101\/613141v2)\" (Supplementary Figures 1 & 2).  \n\nThe work in the paper is my attempt to compactly summarize what biological neurons actually are, when taking into consideration their full biological complexity.  \nThis is done by simulating a state of the art detailed biophysical model of a single cortical neuron (that attmepts to capture all biological details that are currently known and well modeled about the innter workings of biological neurons), and attempting to fit a as-small-as-possible deep network to that dataset.  \nThis work was made for the benefit of, first of all, myself, but additionally for the benifit of all other machine learning practitioners who are familiar with artificial neural networks and want to be more biologically inspired in their endeavors.  \n\n**TD;LR**:  \nI've previously created a short [twitter thread](https:\/\/twitter.com\/DavidBeniaguev\/status\/1131890349578829825) to simply explain the key results of the full paper. Welcome to have a look for a brief visual summery.\n\n**TD;LR to the TD;LR**:  \nbiological neurons are more complex than the neurons we use in our artificial neural networks by quite a bit, but at the same time they are not unimaginably more complex so we can still have a firm handle of what they actually are.\n\n### What this script contains\n- loads and displays the simulated cortical neuron morphology (Layer 5 Pyramidal Cell)\n- loads a single simulation file (contains 128 simulations of 6 second simulation time each)\n- displays the main fields of the simulation (inputs to the simulated cell, outputs of the cell, dendritic voltage traces at each dendritic compartment of the cell)\n- shows some aggregate statsitics of the inputs and outputs to asses the variability of the simulations\n\n\n### Additional resources \n- The [dataset](https:\/\/www.kaggle.com\/selfishgene\/single-neurons-as-deep-nets-nmda-test-data) that is used in this script\n- A [script](https:\/\/www.kaggle.com\/selfishgene\/exploring-a-single-cortical-neuron) to explore this dataset\n","8884029f":"# Show histograms and scatter plots of input and output firing rates \n- Histograms of number of excitatory input spikes, inhibotory input spikes and output somatic spikes per time windows size (100ms, 200ms, 1sec)\n- Scatter plot to show inputs and output together:\n    - x axis: number of excitatory spikes per time window\n    - y axis: number of inhibotory spikes per time window\n    - color: number of output spikes per time window\n\nNOTE: for those unfamiliar with kaggle, please press the \"code\" rectangle on the right to collapse\/uncollapse this cell\n","b0489e0a":"# Show morphology and dendritic voltage traces (with dark background)\nNOTE: for those unfamiliar with kaggle, please press the \"code\" rectangle on the right to collapse\/uncollapse this cell","29778db9":"# Some helper functions\nIn the section below we have some costum functions that will be used later in the script to load and parse the data\n\nNOTE: for those unfamiliar with kaggle, please press the \"code\" rectangle on the right to collapse\/uncollapse this cell","53577116":"# Script params and file paths","690d0903":"# Load dendritic voltage traces of single simulation file\nNOTE: for those unfamiliar with kaggle, please press the \"code\" rectangle on the right to collapse\/uncollapse this cell\n","e437d83b":"# Load morphology\nNOTE: for those unfamiliar with kaggle, please press the \"code\" rectangle on the right to collapse\/uncollapse this cell"}}