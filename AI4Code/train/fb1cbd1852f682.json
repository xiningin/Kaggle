{"cell_type":{"ee130060":"code","352897b8":"code","57f23ec8":"code","1d5f1ce3":"code","ae7ac106":"code","18d17f82":"code","25b1aa89":"code","7c759b1d":"code","e31274e6":"code","bb77d249":"code","78f1e76f":"code","4a09fc03":"code","e444d18d":"code","ec9dff41":"code","85ec6777":"code","690629e8":"code","171dc056":"code","5f4c70c9":"code","f054ebc1":"code","8708eed8":"code","c2b02354":"code","3b43fe70":"code","2ab7bf2a":"code","bd76e909":"code","36badf75":"code","3a3a38e9":"code","7794e046":"code","1990b5c2":"code","59909bf9":"code","dc8304bb":"code","3c5584bb":"markdown","d86b444d":"markdown","6f7fa237":"markdown","195dd313":"markdown","408c146b":"markdown","65895ced":"markdown","d55a1f91":"markdown","b7eda627":"markdown","26705f0b":"markdown"},"source":{"ee130060":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","352897b8":"data=pd.read_csv(\"\/kaggle\/input\/success-of-bank-telemarketing-data\/Alpha_bank.csv\")\ndata.head()","57f23ec8":"import matplotlib.pyplot as plt\nimport seaborn as sns\nsns.countplot(data=data,x=\"Marital_Status\")","1d5f1ce3":"plt.figure(figsize=(13,13))\nsns.countplot(data=data,x=\"Education\")","ae7ac106":"sns.countplot(data=data,x=\"Subscribed\")","18d17f82":"x=data.iloc[:,0:7]\ny=data.iloc[:,7:]","25b1aa89":"from sklearn.preprocessing import OneHotEncoder\nenc = OneHotEncoder(handle_unknown='ignore')\nX=enc.fit_transform(x)\nX.shape","7c759b1d":"from sklearn.model_selection import train_test_split\n\nx_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)","e31274e6":"from sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import chi2\nseletK=SelectKBest(chi2, k=20)\nx_train_new = seletK.fit_transform(x_train, y_train)\nx_test_new=seletK.transform(x_test)","bb77d249":"from sklearn.ensemble import RandomForestClassifier\nrfc=RandomForestClassifier()\nrfc.fit(x_train_new,y_train)\nypred=rfc.predict(x_test_new)\nimport sklearn.metrics as metrik\nprint(metrik.confusion_matrix(y_pred=ypred,y_true=y_test))\nprint(metrik.accuracy_score(y_pred=ypred,y_true=y_test))","78f1e76f":"majority=data[data[\"Subscribed\"]==\"no\"]\nminority=data[data[\"Subscribed\"]==\"yes\"]","4a09fc03":"from sklearn.utils import resample\nminority_upsampled = resample(minority, \n                                 replace=True,     # sample with replacement\n                                 n_samples=15000,    # to match majority class\n                                 random_state=123) # reproducible results","e444d18d":"data_upsampled=pd.concat([majority,minority_upsampled])","ec9dff41":"sns.countplot(data=data_upsampled,x=\"Subscribed\")","85ec6777":"x=data_upsampled.iloc[:,0:7]\ny=data_upsampled.iloc[:,7:]\nX=enc.fit_transform(x)\nprint(X.shape)\nfrom sklearn.model_selection import train_test_split\n\nx_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)","690629e8":"\nseletK=SelectKBest(chi2, k=100)\nx_train_new = seletK.fit_transform(x_train, y_train)\nx_test_new=seletK.transform(x_test)","171dc056":"rfc=RandomForestClassifier()\nrfc.fit(x_train_new,y_train)\nypred=rfc.predict(x_test_new)\nprint(metrik.confusion_matrix(y_pred=ypred,y_true=y_test))\nprint(metrik.accuracy_score(y_pred=ypred,y_true=y_test))","5f4c70c9":"majority=data[data[\"Subscribed\"]==\"no\"][0:5000]\nminority=data[data[\"Subscribed\"]==\"yes\"]","f054ebc1":"data_downsampled=pd.concat([majority,minority])","8708eed8":"sns.countplot(data=data_downsampled,x=\"Subscribed\")","c2b02354":"x=data_downsampled.iloc[:,0:7]\ny=data_downsampled.iloc[:,7:]\nX=enc.fit_transform(x)\nprint(X.shape)\nfrom sklearn.model_selection import train_test_split\n\nx_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)","3b43fe70":"\nseletK=SelectKBest(chi2, k=20)\nx_train_new = seletK.fit_transform(x_train, y_train)\nx_test_new=seletK.transform(x_test)\n\nrfc=RandomForestClassifier()\nrfc.fit(x_train_new,y_train)\nypred=rfc.predict(x_test_new)\nprint(metrik.confusion_matrix(y_pred=ypred,y_true=y_test))\nprint(metrik.accuracy_score(y_pred=ypred,y_true=y_test))","2ab7bf2a":"x=data.iloc[:,0:7]\ny=data.iloc[:,7:]\nenc = OneHotEncoder(handle_unknown='ignore')\nX=enc.fit_transform(x)\nfrom imblearn.over_sampling import SMOTE\nsm = SMOTE(random_state=42)\nX_res, y_res = sm.fit_resample(X, y)","bd76e909":"from sklearn.model_selection import cross_val_score\nprint(cross_val_score(RandomForestClassifier(), X_res, y_res, cv=3))","36badf75":"x_train, x_test, y_train, y_test = train_test_split(X_res, y_res, test_size=0.25, random_state=42)\nrfc=RandomForestClassifier()\nrfc.fit(x_train,y_train)\nypred=rfc.predict(x_test)\nprint(metrik.confusion_matrix(y_pred=ypred,y_true=y_test))\nprint(metrik.accuracy_score(y_pred=ypred,y_true=y_test))","3a3a38e9":"from sklearn.svm import SVC\nsvm=SVC()\nsvm.fit(x_train,y_train)\nypred=svm.predict(x_test)\nprint(metrik.confusion_matrix(y_pred=ypred,y_true=y_test))\nprint(metrik.accuracy_score(y_pred=ypred,y_true=y_test))","7794e046":"from sklearn.neighbors import KNeighborsClassifier\nmaxaccu=0\nbestk=0\nfor i in range(1,23,2):\n    knn = KNeighborsClassifier(n_neighbors=i)\n    knn.fit(x_train,y_train)\n    ypred=knn.predict(x_test)\n    accuracy=metrik.accuracy_score(y_pred=ypred,y_true=y_test)\n    print(\"K'nin De\u011feri: \",i,accuracy)\n    if accuracy>maxaccu:\n        bestk=i\n        maxaccu=accuracy\nprint(\"Max Accuracy: \",maxaccu)\nprint(\"Best K: \",bestk)\nprint(metrik.confusion_matrix(y_pred=ypred,y_true=y_test))","1990b5c2":"print(metrik.confusion_matrix(y_pred=ypred,y_true=y_test))","59909bf9":"from tpot import TPOTClassifier\ntpot = TPOTClassifier(verbosity=2,max_time_mins=138)\ntpot.fit(x_train.toarray(), y_train)\nypred=tpot.predict((x_test.toarray()))\nprint(metrik.confusion_matrix(y_pred=ypred,y_true=y_test))\nprint(metrik.accuracy_score(y_pred=ypred,y_true=y_test))","dc8304bb":"ypred=tpot.predict((x_test.toarray()))\nprint(metrik.confusion_matrix(y_pred=ypred,y_true=y_test))\nprint(metrik.accuracy_score(y_pred=ypred,y_true=y_test))","3c5584bb":"DownSample can't work as good as  UPsampled Also False Positive.","d86b444d":"## CREATE SAMPLES with SMOTE ALGORITHM ","6f7fa237":"\u0130mbalanced Problem is solved and also Accuracy is very good. SMOTE is work very very good. ","195dd313":"\u0130mbalanced is effected as you can see.","408c146b":"This data is  unbalanced.","65895ced":"## Second Method Downsample the Majority Class","d55a1f91":"Accuracy is Decreased Terribly howewer confusion matrix is looks more balanced. \n","b7eda627":"## THANKS FOR READ\u0130NG","26705f0b":"## UPSAMPLE W\u0130TH Sklearn Resample"}}