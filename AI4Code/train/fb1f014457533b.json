{"cell_type":{"83dd2685":"code","815e3932":"code","abc694a1":"code","30061a57":"code","14bc9302":"code","4dc90f9d":"code","6e5503a7":"code","e24bfe35":"code","2e4fdc1b":"code","5514d1e9":"code","fd72fa58":"code","52c87ddb":"code","640b2c6c":"code","295265e1":"code","d6130837":"code","0f12af64":"code","c261d61a":"code","a8407447":"code","9bf0cce7":"code","94200241":"code","081ef2a4":"code","8974adab":"code","f8584de9":"code","1f11a41b":"code","6d168ede":"markdown","43b822b1":"markdown","f2fcc507":"markdown","b9173b14":"markdown","92257b39":"markdown","bd01d2d7":"markdown","8ea2ea91":"markdown","cad333f9":"markdown","26033763":"markdown","5156e019":"markdown","483c3e78":"markdown","3031bbb9":"markdown","af0ee7ee":"markdown","05a6b16f":"markdown","5dd08d32":"markdown","33d9cb08":"markdown","48c899de":"markdown","68b25560":"markdown","07e4c37a":"markdown","0c553c9f":"markdown","1bc82fa6":"markdown","9b246ae8":"markdown","a814dcba":"markdown","edb6d57f":"markdown","4033ecb5":"markdown"},"source":{"83dd2685":"import numpy as np\nimport pandas as pd\nimport warnings  \nwarnings.filterwarnings('ignore') # to ignore the warnings","815e3932":"training = pd.read_csv(\"..\/input\/google-stock-price\/Google_Stock_Price_Train.csv\")\ntraining.head()","abc694a1":"real_stock_price_train = training.iloc[:, 1:2].values     # creates a 2D array having observation and feature","30061a57":"from sklearn.preprocessing import MinMaxScaler\nsc = MinMaxScaler()\ntraining2 = sc.fit_transform(real_stock_price_train)","14bc9302":"training2.shape\n","4dc90f9d":"# hence in the input we take\nX_train = training2[0:1257]  # all but last observation as we don't have the output value for it\ny_train = training2[1:1258]  # values shifted by 1","6e5503a7":"X_train = np.reshape(X_train, (1257, 1, 1))\n# (1257, 1, 1) the 2nd argument is no. of features and 3rd argument is the time step","e24bfe35":"# importing libraries\nfrom keras.models import Sequential  # initialize NN as a sequnce of layers\nfrom keras.layers import Dense  # to add fully connected layers\nfrom keras.layers import LSTM","2e4fdc1b":"rnn_regressor = Sequential()","5514d1e9":"rnn_regressor.add(LSTM(units=4, activation='sigmoid', input_shape=(1, 1)))","fd72fa58":"rnn_regressor.add(Dense(units=1))","52c87ddb":"rnn_regressor.compile(optimizer='adam', loss='mean_squared_error')","640b2c6c":"rnn_regressor.fit(X_train, y_train, batch_size=32, epochs=200)","295265e1":"# predicting the training results\npredicted_stock_price_train = rnn_regressor.predict(X_train)\npredicted_stock_price_train = sc.inverse_transform(predicted_stock_price_train)","d6130837":"# visualizing the training results\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(20,10))\nplt.plot(real_stock_price_train, color = 'red', label='Real Google Stock Price')\nplt.plot(predicted_stock_price_train, color = 'blue', label='Predicted Google Stock Price')\nplt.title('Google Stock Price Prediction')\nplt.xlabel('Time')\nplt.ylabel('Stock Price')\nplt.legend()\nplt.show()","0f12af64":"testing = pd.read_csv(\"..\/input\/google-stock-price\/Google_Stock_Price_Test.csv\")\ntesting.head()","c261d61a":"# taking the column of \"open\" value of stock price\nreal_stock_price_test = testing.iloc[:, 1:2].values","a8407447":"# feature Scaling\ninputs = sc.transform(real_stock_price_test)","9bf0cce7":"# reshaping\ninputs = np.reshape(inputs, (20, 1, 1))     # only 20 observations in testing set","94200241":"# predicting the stock price (for the year 2017)\npredicted_stock_price_test = rnn_regressor.predict(inputs)     # but these are the scaled values","081ef2a4":"predicted_stock_price_test = sc.inverse_transform(predicted_stock_price_test)","8974adab":"# visualizing the results for testing\nplt.figure(figsize=(20,10))\nplt.plot(real_stock_price_test, color = 'red', label='Real Google Stock Price')\nplt.plot(predicted_stock_price_test, color = 'blue', label='Predicted Google Stock Price')\nplt.title('Google Stock Price Prediction (Test Set)')\nplt.xlabel('Time')\nplt.ylabel('Stock Price')\nplt.legend()\nplt.show()","f8584de9":"from sklearn.metrics import mean_squared_error\nrmse = np.sqrt(mean_squared_error(real_stock_price_test, predicted_stock_price_test))\nprint('The RMSE value is', rmse)","1f11a41b":"print('RMSE in terms of % of the orignal value is', round((rmse\/real_stock_price_test.mean()*100), 2) , '%')   \n# we take the avg because it would be a true representative of the real stock values","6d168ede":"**Arguments used -**\n* `units` = no. of neurons in output layer, here it is a regressor hence 1","43b822b1":"* We need to express this as percentage of the orignal value coz it may tell there is a prediction error of 7, but that error won't mean the same thing whether the orignal stock price was betn 1 and 10 or betn 1000 and 10000\n* Generally a good rmse expressed in terms of percentage is around or less than 1%","f2fcc507":"**Step 2.1 :** Initializing the RNN","b9173b14":"**Step 1.3 :** Getting the input and output values\n\n**Note -**\n* The input values must be the stock prices at time `t` and the output values should be the stock prices at time `t+1`","92257b39":"### **Interpretation of RMSE value :**\n* It is a way of figuring out how much a model disagrees with the actual data","bd01d2d7":"**Step 1.4 :** Reshaping\n* We need to convert this 2D (observation and feature)array into a 3D array because it is a time series problem\n* So we need to add a *time step* of 1 because our input is stock price at time `t` and output is stock price at time `t+1` and `(t+1) - t = 1`, hence `1` is the time step","8ea2ea91":"## **Conclusions**\n* As there is 1 time step between the input and the output, that makes it one time step prediction\n* It is seen that the predictions are actually following the real google stock prices\n* If we imagine today is the 1st day of 2017 and we want to predict stock price for the next 60 days, we won't get these accurate results as our model was trained for 1 time step prediction\n* As amazing as that sounds it would be hard to get such close predictions because in finance, the future variations may not always be dependent on the past, hence its nearly impossible to make long term predictions of stock price","cad333f9":"**Things to consider -**\n* For this project sake we will be considering only the \"Open\" value of the stock as we are building the RNN\n* This is done because in RNN, one value at a time `t` is given as an input in a module and that in return gives the next predicted value at time `t+1`","26033763":"**Step 3.2 :** Performing inverse scaling","5156e019":"## **Step - 3 :** Making predictions and visualizing results for testing set","483c3e78":"## **Step 1** : Pre-processing","3031bbb9":"**Note -** We do only \".transform\" and not \"fit.transform\" and we use the same scaler 'sc' we used while standardzing the training data because the scaling should be done with respect to the training data and not the testing set because the minimum and maximum of the training and testing sets may vary","af0ee7ee":"**Step 2.2 :** Adding input layer and LSTM layer\n* In the add method, we use the class corresponding to the layer we want to add\n* In this case we are adding the LSTM layer thus replacing the input layer (Dense class) by the LSTM class","05a6b16f":"**Note -**\n* We prefer `Normalization` over `Standardization` here coz the sigmoid function takes values betn 0 and 1, \n* Hence it would be better to scale our values betn 0 and 1, thus its better to do use `MinMaxScaler`","5dd08d32":"**Arguments used -**\n* `units` = no. of memory units\n* `input_shape=(1, 1)` means the 1st element is the time step and the 2nd element is no. of features","33d9cb08":"**Step 2.3 :** Adding the output layer","48c899de":"**Step 2.4 :** Compiling the RNN","68b25560":"**Step 3.1 :** Performing similar pre-prcoessing as performed on training set","07e4c37a":"**Step 2.5 :** Fitting the RNN to training set","0c553c9f":"**Step - 1.2 :** Checking the shape","1bc82fa6":"**Step - 1.1 :** Feature Scaling","9b246ae8":"# Recurrent Neural Network Simplified (Google Stock Price Forecasting)\n\n### **Goals of the project -** \n* To understand the basic implemetation of the RNN and LSTM\n* To build the RNN layer by layer and understanding the significance of LSTM and the arguments used\n* Understanding the importance of Normalization in RNN\n* To understand the concept of time steps\n* Creating training and testing set from the same data by using the concept of time steps\n* Comparing the forecast of the actual and predicted stock prices\n* Understanding the significance of RNN in terms of forecasting and its limitations\n* Evaluating the RNN by RMSE value taken as a percentage of the orignal value","a814dcba":"## **Step - 2 :** Building the RNN","edb6d57f":"**Step 2.6 :** Predicting and Visualizing the training results","4033ecb5":"## **Step - 4 :** Evaluating the RNN"}}