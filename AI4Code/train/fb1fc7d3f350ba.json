{"cell_type":{"f52a22ad":"code","ceef0b9d":"code","20658393":"code","89676a31":"code","eaf1c225":"code","81be9827":"code","6e4b20f2":"code","49ba5c8d":"code","9d3cc134":"code","db443dd7":"code","bb37a61e":"code","858bbf9e":"code","64b532e6":"code","33e68940":"code","dec72e71":"code","1c7597fb":"code","7d147fec":"markdown","540bb812":"markdown","0cbe8c87":"markdown","69535654":"markdown","1e8d75ed":"markdown","967ac75f":"markdown","c4b70958":"markdown"},"source":{"f52a22ad":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ceef0b9d":"train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ngender_submission = pd.read_csv(\"..\/input\/titanic\/gender_submission.csv\")\n\ndata = pd.concat([train, test], sort=False)","20658393":"from sklearn.preprocessing import LabelEncoder\n\ndata = pd.concat([train, test], sort=False)\n\ndata['Sex'].replace(['male','female'], [0, 1], inplace=True)\ndata['Embarked'].fillna(('S'), inplace=True)\ndata['Embarked'] = data['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)\ndata['Fare'].fillna(np.mean(data['Fare']), inplace=True)\ndata['Age'].fillna(data['Age'].median(), inplace=True)\ndata['FamilySize'] = data['Parch'] + data['SibSp'] + 1\ndata['IsAlone'] = 0\ndata.loc[data['FamilySize'] == 1, 'IsAlone'] = 1","89676a31":"data.head()","eaf1c225":"delete_columns = ['Name', 'PassengerId', 'Ticket', 'Cabin']\ndata.drop(delete_columns, axis=1, inplace=True)\n\ntrain = data[:len(train)]\ntest = data[len(train):]\n\ny_train = train['Survived']\nX_train = train.drop('Survived', axis=1)\nX_test = test.drop('Survived', axis=1)","81be9827":"X_train.head()","6e4b20f2":"y_train.head()","49ba5c8d":"from sklearn.model_selection import train_test_split\nX_train, X_valid, y_train, y_valid = train_test_split(X_train, y_train, test_size=0.3, random_state=0, stratify=y_train)","9d3cc134":"from optuna.integration import lightgbm as lgb\nimport time\n\nts = time.time()\n\ndtrain = lgb.Dataset(X_train, y_train)\neval_data = lgb.Dataset(X_valid, y_valid)\n\nparam = {\n        'objective': 'binary'\n    }\n\nbest_params, history = {}, []\nmodel = lgb.train(param, dtrain, valid_sets=eval_data,\n                    verbose_eval=20,\n                    num_boost_round=1000,\n                    early_stopping_rounds=20,\n                    best_params=best_params,\n                    tuning_history=history)\n\ntime.time() - ts","db443dd7":"best_params","bb37a61e":"history","858bbf9e":"params = {\n    'objective': 'binary',\n    'metric':'auc',\n    'learning_rate':0.05,\n'lambda_l1':best_params['lambda_l1'],\n 'lambda_l2':best_params['lambda_l2'],\n 'num_leaves':best_params['num_leaves'],\n 'feature_fraction':best_params['feature_fraction'],\n 'bagging_fraction':best_params['bagging_fraction'],\n 'bagging_freq':best_params['bagging_freq'],\n 'min_child_samples':best_params['min_child_samples']\n}\n\ncv_result = lgb.cv(params, dtrain,\n                    verbose_eval=20,\n                    num_boost_round=1000,\n                    early_stopping_rounds=100,\n                    nfold = 10)","64b532e6":"params = {\n    'objective': 'binary',\n    'metric':'auc',\n    'learning_rate':0.05,\n'lambda_l1': best_params['lambda_l1'],\n 'lambda_l2':best_params['lambda_l2'],\n 'num_leaves':best_params['num_leaves'],\n 'feature_fraction':best_params['feature_fraction'],\n 'bagging_fraction':best_params['bagging_fraction'],\n 'bagging_freq':best_params['bagging_freq'],\n 'min_child_samples':best_params['min_child_samples']\n}\n\nlgb_train = lgb.Dataset(X_train, y_train)\nlgb_eval = lgb.Dataset(X_valid, y_valid, reference=lgb_train)\n\nmodel = lgb.train(\n    params, lgb_train,\n    valid_sets=[lgb_train, lgb_eval],\n    verbose_eval=10,\n    num_boost_round=1000,\n    early_stopping_rounds=10\n)\n\ny_pred = model.predict(X_test, num_iteration=model.best_iteration)","33e68940":"lgb.plot_importance(model)","dec72e71":"sub = gender_submission\ny_pred = (y_pred > 0.5).astype(int)\nsub['Survived'] = y_pred\nsub.to_csv(\"submission_lightgbm_optuna.csv\", index=False)\n\nsub.head()","1c7597fb":"sub = pd.DataFrame(pd.read_csv('..\/input\/titanic\/test.csv')['PassengerId'])\nsub['Survived'] = list(map(int, y_pred))\nsub.to_csv('submission.csv', index=False)","7d147fec":"#  \u5b9f\u88c5\n\n```\nfrom optuna.integration import lightgbm as lgb\n```\n\u3067LightGBM Tuner\u3092\u30a4\u30f3\u30dd\u30fc\u30c8","540bb812":"# **LightGBM Tuner\u3092\u4f7f\u3063\u3066\u307f\u3088\u3046**","0cbe8c87":"#  \u53e4\u306eOptuna\u3092\u5fa9\u7fd2\n\ndef objective(trial)\u5185\u306fLightGBM\u306e\u5b66\u7fd2\u30e2\u30c7\u30eb\u69cb\u7bc9\u306b\u7528\u3044\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u305d\u306e\u3082\u306e\u306a\u306e\u3067\u3053\u3053\u3067\u3064\u3044\u3067\u306b\u5fa9\u7fd2\n```\nimport optuna\nfrom sklearn.metrics import log_loss\n\n\ndef objective(trial):\n    #\u63a2\u7d22\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8a2d\u5b9a\n    params = {\n        'objective': 'binary',\n        'max_bin': trial.suggest_int('max_bin', 255, 500),\n        'learning_rate': 0.05,\n        'num_leaves': trial.suggest_int('num_leaves', 32, 128),\n    }\n    \n    #lightGBM\u7528\u306b\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\n    lgb_train = lgb.Dataset(X_train, y_train)\n    lgb_eval = lgb.Dataset(X_valid, y_valid)\n\u3000\u3000 \n    #LightGBM\u306e\u30e2\u30c7\u30eb\u69cb\u7bc9\n    model = lgb.train(\n        params, lgb_train,\n        valid_sets=[lgb_train, lgb_eval],\n        verbose_eval=10,\n        num_boost_round=1000,\n        early_stopping_rounds=10\n    )\n\u3000\u3000 #\u4e88\u6e2c\u3057\u3066\u30b9\u30b3\u30a2\u51fa\u3059\n    y_pred_valid = model.predict(X_valid, num_iteration=model.best_iteration)\n    score = log_loss(y_valid, y_pred_valid)\n    return score\n\n#score\u3092\u826f\u304f\u3059\u308b\u3088\u3046\u306b\u30d1\u30e9\u30e1\u30fc\u30bf\u63a2\u7d22\u3059\u308b\nstudy = optuna.create_study(sampler=optuna.samplers.RandomSampler(seed=0))\nstudy.optimize(objective, n_trials=40)\n    \n```\n","69535654":"#  \u6700\u7d42\u7684\u306a\u5b66\u7fd2\n\n\u6700\u9069\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u898b\u3064\u304b\u3063\u305f\u306e\u3067\u3001\u305d\u308c\u3092\u7528\u3044\u3066LightGBM\u3067\u5b66\u7fd2\u3092\u884c\u304a\u3046","1e8d75ed":"LightGBM Tuner\u304b\u3089\u306e\u65b0\u30d1\u30e9\u30e1\u30fc\u30bf\n* best_params\n\nStepwise Tuning\u3067\u8abf\u6574\u3055\u308c\u305f\u30d9\u30b9\u30c8\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u683c\u7d0d\u3055\u308c\u308b\n* tuning_history\n\n\u3069\u3093\u306a\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3092\u8a66\u3057\u305f\u304b\u3001\u305d\u306e\u5c65\u6b74\u304c\u683c\u7d0d\u3055\u308c\u308b","967ac75f":"#  cross validation\u3092\u884c\u3046\n\nLightGBM\u306b\u306f\u3082\u3068\u3082\u3068\u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u306e\u6a5f\u80fd\u304c\u3064\u3044\u3066\u3044\u305f\n\nLightGBM Tuner\u306b\u3082\u305d\u306e\u6a5f\u80fd\u304c\u3042\u308b(\u6700\u8fd1\u5b9f\u88c5\u3055\u308c\u305f)\n\n```\nmodel = lgb.cv(params, dtrain,\n                    verbose_eval=20,\n                    num_boost_round=1000,\n                    early_stopping_rounds=100,\n                    nfold = 10)\n```\n\nlgb.train\u3092lgb.cv\u306b\u5909\u66f4\u3057\u3001\u5f15\u6570\u306enfold\u3092\u8a2d\u5b9a\u3059\u308b\u3060\u3051","c4b70958":"# **\u524d\u51e6\u7406**"}}