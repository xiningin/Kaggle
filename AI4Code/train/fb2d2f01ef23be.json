{"cell_type":{"5961c9bc":"code","6f5642aa":"code","5b9b4e40":"code","0e743e3a":"code","c47142fc":"code","ddfff1c0":"code","a06be257":"code","a4f4cdbe":"code","57212405":"code","99548108":"code","9f6dc536":"code","faeea15c":"code","a448a620":"code","d6ddd498":"code","45192a0f":"code","f4522a20":"code","37228c34":"code","8364252b":"code","f8b264d6":"code","a24756c4":"code","b90c025d":"markdown"},"source":{"5961c9bc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6f5642aa":"train = pd.read_csv(\"..\/input\/jigsaw-toxic-comment-classification-cleaned-data\/train_data.csv\")\nval = pd.read_csv(\"..\/input\/jigsaw-toxic-comment-classification-cleaned-data\/val_data.csv\")\ntest = pd.read_csv(\"..\/input\/jigsaw-toxic-comment-classification-cleaned-data\/test_data.csv\")\nprint(len(train), len(val), len(test))","5b9b4e40":"dummy = train.cleaned_text.values[0]\ntest.cleaned_text[pd.isnull(test.cleaned_text)] = dummy\ntest[pd.isnull(test.cleaned_text)]","0e743e3a":"len(train[train.toxic == 1])","c47142fc":"new_train = pd.DataFrame()\nnew_train = pd.concat((train[train.toxic == 1][:20000],train[train.toxic == 0][:30000]))","ddfff1c0":"new_train","a06be257":"import tensorflow as tf\nimport transformers\n","a4f4cdbe":"model = 'roberta-large'\ntokenizer = transformers.AutoTokenizer.from_pretrained(model)","57212405":"from sklearn.utils import shuffle\nfrom sklearn.model_selection import train_test_split\nnew_train = new_train[pd.notnull(new_train.cleaned_text)]\n\ntrain = train[pd.notnull(train.cleaned_text)]\ntrain, validation = train_test_split(train, test_size = 0.2)","99548108":"max_seq_length = 200\n\ntrain_input_ids = [tokenizer.encode(i, max_length = max_seq_length , pad_to_max_length = True) for i in train.cleaned_text.values[::10]]\nval_input_ids = [tokenizer.encode(i, max_length = max_seq_length , pad_to_max_length = True) for i in validation.cleaned_text.values[::10]]","9f6dc536":"def create_model(): \n    input_word_ids = tf.keras.layers.Input(shape=(max_seq_length,), dtype=tf.int32,\n                                           name=\"input_word_ids\")\n    bert_layer = transformers.TFAutoModel.from_pretrained( 'roberta-large')\n    bert_outputs = bert_layer(input_word_ids)[0]\n    pred = tf.keras.layers.Conv1D(128,2,padding='same')(bert_outputs)\n    pred = tf.keras.layers.LeakyReLU()(pred)\n    pred = tf.keras.layers.Dropout(0.3)(pred)\n    pred = tf.keras.layers.Conv1D(64,2,padding='same')(pred)\n    pred = tf.keras.layers.Dense(256, activation='relu')(pred)\n    pred = tf.keras.layers.Dense(1, activation='sigmoid')(pred)\n    model = tf.keras.models.Model(inputs=input_word_ids, outputs=pred)\n    model.compile(loss='binary_crossentropy', optimizer=tf.keras.optimizers.Adam(\n    learning_rate=0.00001), metrics=['accuracy'])\n    return model","faeea15c":"use_tpu = True\nif use_tpu:\n    # Create distribution strategy\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\n\n    # Create model\n    with strategy.scope():\n        model = create_model()\nelse:\n    model = create_model()\n    \nmodel.summary()","a448a620":"model.fit(np.array(train_input_ids[::10]),np.array(train.toxic.values[::100]),\n          validation_data = (np.array(val_input_ids[::10]),np.array(validation.toxic.values[::100])),\n          verbose = 1, epochs = 30, batch_size = 128)","d6ddd498":"model.fit(np.array(val_input_ids[::10]),np.array(validation.toxic.values[::100]), epochs = 10, verbose = 1)","45192a0f":"test_input_ids = [tokenizer.encode(i, max_length = max_seq_length , pad_to_max_length = True) for i in test.cleaned_text.values]","f4522a20":"preds = model.predict(test_input_ids)","37228c34":"np.where(preds > 0.5)","8364252b":"preds = [max(preds[i]) for i in range(len(preds))]","f8b264d6":"evaluation = test.id.copy().to_frame()\nevaluation['toxic'] = np.round(preds)\nevaluation","a24756c4":"evaluation.to_csv(\"submission.csv\", index=False)","b90c025d":"This notebook makes use of a translated, cleaned dataset."}}