{"cell_type":{"879c057e":"code","320a6d1d":"code","97163e10":"code","54468261":"code","26adeb2d":"code","3688944e":"code","5718e7a1":"code","d31fc9e6":"code","e8dfd3cd":"code","840a0c3a":"code","a18af0e3":"code","bd945dd0":"code","f86b6a30":"code","c67ac581":"code","c50b356b":"code","e9d1d276":"code","ae915148":"code","9bcc87e4":"code","f8558f2e":"code","fef0011c":"code","1e4a70ab":"markdown","b701784e":"markdown","07f3bf59":"markdown","331d25c5":"markdown","fbc09440":"markdown","c199d4c4":"markdown","e12075d3":"markdown","92a17719":"markdown","a8d6a94d":"markdown","a60de98f":"markdown","93a9d9b3":"markdown","d87ae076":"markdown","4574014a":"markdown","d5c44731":"markdown","185f8607":"markdown","d5370085":"markdown","6a174b06":"markdown","79725f1f":"markdown","311508c4":"markdown","41019b4a":"markdown","90cb6dc5":"markdown","92afdc73":"markdown","faec6c4c":"markdown","6fafe2d0":"markdown"},"source":{"879c057e":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.preprocessing import OneHotEncoder, LabelEncoder\nfrom sklearn import feature_selection\nfrom sklearn import model_selection\nfrom sklearn import metrics\n\n#Visualization\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport matplotlib.pylab as pylab\nimport seaborn as sns\n#from pandas.tools.plotting import scatter_matrix\n\n#Configure Visualization Defaults\n#%matplotlib inline = show plots in Jupyter Notebook browser\n%matplotlib inline\nmpl.style.use('ggplot')\nsns.set_style('white')\npylab.rcParams['figure.figsize'] = 12,8\n\n# Load dataset.\ndataset = pd.read_csv('..\/input\/titanic\/train.csv')\n\n#fill NaN values in the age column with the median of that column\ndataset['Age'].fillna(dataset['Age'].median(), inplace = True)\n\n#fill NaN values in the embarked column with the mode of that column\ndataset['Embarked'].fillna(dataset['Embarked'].mode()[0], inplace = True)\n\n#fill NaN values in the fare column with the median of that column\ndataset['Fare'].fillna(dataset['Fare'].median(), inplace = True)\n\n#delete the cabin feature\/column and others \ndrop_column = ['PassengerId','Cabin', 'Ticket']\ndataset.drop(drop_column, axis=1, inplace = True)\n\n#create a new column which is the combination of the sibsp and parch column\ndataset['FamilySize'] = dataset ['SibSp'] + dataset['Parch'] + 1\n\n#create a new column and initialize it with 1\ndataset['IsAlone'] = 1 #initialize to yes\/1 is alone\ndataset['IsAlone'].loc[dataset['FamilySize'] > 1] = 0 # now update to no\/0 if family size is greater than 1\n\n#quick and dirty code split title from the name column\ndataset['Title'] = dataset['Name'].str.split(\", \", expand=True)[1].str.split(\".\", expand=True)[0]\n\n#Continuous variable bins; qcut vs cut: https:\/\/stackoverflow.com\/questions\/30211923\/what-is-the-difference-between-pandas-qcut-and-pandas-cut\n#Fare Bins\/Buckets using qcut or frequency bins: https:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.qcut.html\ndataset['FareBin'] = pd.qcut(dataset['Fare'], 4)\n\n#Age Bins\/Buckets using cut or value bins: https:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.cut.html\ndataset['AgeBin'] = pd.cut(dataset['Age'].astype(int), 5)\n\n#so create stat_min and any titles less than 10 will be put into Misc category\nstat_min = 10 #while small is arbitrary, we'll use the common minimum in statistics: http:\/\/nicholasjjackson.com\/2012\/03\/08\/sample-size-is-10-a-magic-number\/\ntitle_names = (dataset['Title'].value_counts() < stat_min) #this will create a true false series with title name as index\n\n#apply and lambda functions are quick and dirty code to find and replace with fewer lines of code: https:\/\/community.modeanalytics.com\/python\/tutorial\/pandas-groupby-and-python-lambda-functions\/\ndataset['Title'] = dataset['Title'].apply(lambda x: 'Misc' if title_names.loc[x] == True else x)\n\n#convertion from categorical data to dummy variables\nlabel = LabelEncoder()  \ndataset['Sex_Code'] = label.fit_transform(dataset['Sex'])\ndataset['Embarked_Code'] = label.fit_transform(dataset['Embarked'])\ndataset['Title_Code'] = label.fit_transform(dataset['Title'])\ndataset['AgeBin_Code'] = label.fit_transform(dataset['AgeBin'])\ndataset['FareBin_Code'] = label.fit_transform(dataset['FareBin'])\n\n#define y variable aka target\/outcome\nTarget = ['Survived']","320a6d1d":"dataset.columns.values","97163e10":"dataset.info()","54468261":"dataset.describe(include = 'all')","26adeb2d":"dataset.isnull().sum()","3688944e":"dataset.sample(10)","5718e7a1":"dataset.head()","d31fc9e6":"dataset.tail()","e8dfd3cd":"pd.crosstab(dataset['Title'],dataset[Target[0]])","840a0c3a":"dataset[[\"Sex\", \"Survived\"]].groupby(['Sex'], as_index=False).mean().sort_values(by='Survived', ascending=False)","a18af0e3":"#to organize our graphics will use figure: https:\/\/matplotlib.org\/api\/_as_gen\/matplotlib.pyplot.figure.html#matplotlib.pyplot.figure\n#subplot: https:\/\/matplotlib.org\/api\/_as_gen\/matplotlib.pyplot.subplot.html#matplotlib.pyplot.subplot\n#and subplotS: https:\/\/matplotlib.org\/api\/_as_gen\/matplotlib.pyplot.subplots.html?highlight=matplotlib%20pyplot%20subplots#matplotlib.pyplot.subplots\n\n#graph distribution of quantitative data\nplt.figure(figsize=[16,12])\n\nplt.subplot(231)\nplt.boxplot(x=dataset['Fare'], showmeans = True, meanline = True)\nplt.title('Fare Boxplot')\nplt.ylabel('Fare ($)')\n\nplt.subplot(232)\nplt.boxplot(dataset['Age'], showmeans = True, meanline = True)\nplt.title('Age Boxplot')\nplt.ylabel('Age (Years)')\n\nplt.subplot(233)\nplt.boxplot(dataset['FamilySize'], showmeans = True, meanline = True)\nplt.title('Family Size Boxplot')\nplt.ylabel('Family Size (#)')\n\nplt.subplot(234)\nplt.hist(x = [dataset[dataset['Survived']==1]['Fare'], dataset[dataset['Survived']==0]['Fare']], \n         stacked=True, color = ['g','r'],label = ['Survived','Dead'])\nplt.title('Fare Histogram by Survival')\nplt.xlabel('Fare ($)')\nplt.ylabel('# of Passengers')\nplt.legend()\n\nplt.subplot(235)\nplt.hist(x = [dataset[dataset['Survived']==1]['Age'], dataset[dataset['Survived']==0]['Age']], \n         stacked=True, color = ['g','r'],label = ['Survived','Dead'])\nplt.title('Age Histogram by Survival')\nplt.xlabel('Age (Years)')\nplt.ylabel('# of Passengers')\nplt.legend()\n\nplt.subplot(236)\nplt.hist(x = [dataset[dataset['Survived']==1]['FamilySize'], dataset[dataset['Survived']==0]['FamilySize']], \n         stacked=True, color = ['g','r'],label = ['Survived','Dead'])\nplt.title('Family Size Histogram by Survival')\nplt.xlabel('Family Size (#)')\nplt.ylabel('# of Passengers')\nplt.legend()","bd945dd0":"#we will use seaborn graphics for multi-variable comparison: https:\/\/seaborn.pydata.org\/api.html\n\n#graph individual features by survival\nfig, saxis = plt.subplots(2, 3,figsize=(16,12))\n\nsns.barplot(x = 'Embarked', y = 'Survived', data=dataset, ax = saxis[0,0])\nsns.barplot(x = 'Pclass', y = 'Survived', order=[1,2,3], data=dataset, ax = saxis[0,1])\nsns.barplot(x = 'IsAlone', y = 'Survived', order=[1,0], data=dataset, ax = saxis[0,2])\n\nsns.pointplot(x = 'FareBin', y = 'Survived',  data=dataset, ax = saxis[1,0])\nsns.pointplot(x = 'AgeBin', y = 'Survived',  data=dataset, ax = saxis[1,1])\nsns.pointplot(x = 'FamilySize', y = 'Survived', data=dataset, ax = saxis[1,2])","f86b6a30":"#graph distribution of qualitative data: Pclass\n#we know class mattered in survival, now let's compare class and a 2nd feature\nfig, (axis1,axis2,axis3) = plt.subplots(1,3,figsize=(14,12))\n\nsns.boxplot(x = 'Pclass', y = 'Fare', hue = 'Survived', data = dataset, ax = axis1)\naxis1.set_title('Pclass vs Fare Survival Comparison')\n\nsns.violinplot(x = 'Pclass', y = 'Age', hue = 'Survived', data = dataset, split = True, ax = axis2)\naxis2.set_title('Pclass vs Age Survival Comparison')\n\nsns.boxplot(x = 'Pclass', y ='FamilySize', hue = 'Survived', data = dataset, ax = axis3)\naxis3.set_title('Pclass vs Family Size Survival Comparison')","c67ac581":"#graph distribution of qualitative data: Sex\n#we know sex mattered in survival, now let's compare sex and a 2nd feature\nfig, qaxis = plt.subplots(1,3,figsize=(14,12))\n\nsns.barplot(x = 'Sex', y = 'Survived', hue = 'Embarked', data=dataset, ax = qaxis[0])\naxis1.set_title('Sex vs Embarked Survival Comparison')\n\nsns.barplot(x = 'Sex', y = 'Survived', hue = 'Pclass', data=dataset, ax  = qaxis[1])\naxis1.set_title('Sex vs Pclass Survival Comparison')\n\nsns.barplot(x = 'Sex', y = 'Survived', hue = 'IsAlone', data=dataset, ax  = qaxis[2])\naxis1.set_title('Sex vs IsAlone Survival Comparison')","c50b356b":"#more side-by-side comparisons\nfig, (maxis1, maxis2) = plt.subplots(1, 2,figsize=(14,12))\n\n#how does family size factor with sex & survival compare\nsns.pointplot(x=\"FamilySize\", y=\"Survived\", hue=\"Sex\", data=dataset,\n              palette={\"male\": \"blue\", \"female\": \"pink\"},\n              markers=[\"*\", \"o\"], linestyles=[\"-\", \"--\"], ax = maxis1)\n\n#how does class factor with sex & survival compare\nsns.pointplot(x=\"Pclass\", y=\"Survived\", hue=\"Sex\", data=dataset,\n              palette={\"male\": \"blue\", \"female\": \"pink\"},\n              markers=[\"*\", \"o\"], linestyles=[\"-\", \"--\"], ax = maxis2)","e9d1d276":"#how does embark port factor with class, sex, and survival compare\n#facetgrid: https:\/\/seaborn.pydata.org\/generated\/seaborn.FacetGrid.html\ne = sns.FacetGrid(dataset, col = 'Embarked')\ne.map(sns.pointplot, 'Pclass', 'Survived', 'Sex', ci=95.0, palette = 'deep')\ne.add_legend()","ae915148":"#plot distributions of age of passengers who survived or did not survive\na = sns.FacetGrid( dataset, hue = 'Survived', aspect=4 )\na.map(sns.kdeplot, 'Age', shade= True )\na.set(xlim=(0 , dataset['Age'].max()))\na.add_legend()","9bcc87e4":"#histogram comparison of sex, class, and age by survival\nh = sns.FacetGrid(dataset, row = 'Sex', col = 'Pclass', hue = 'Survived')\nh.map(plt.hist, 'Age', alpha = .75)\nh.add_legend()","f8558f2e":"#pair plots of entire dataset\npp = sns.pairplot(dataset, hue = 'Survived', palette = 'deep', height=1.2, diag_kind = 'kde', diag_kws=dict(shade=True), plot_kws=dict(s=10) )\npp.set(xticklabels=[])","fef0011c":"#correlation heatmap of dataset\ndef correlation_heatmap(df):\n    _ , ax = plt.subplots(figsize =(14, 12))\n    colormap = sns.diverging_palette(220, 10, as_cmap = True)\n    \n    _ = sns.heatmap(\n        df.corr(), \n        cmap = colormap,\n        square=True, \n        cbar_kws={'shrink':.9 }, \n        ax=ax,\n        annot=True, \n        linewidths=0.1,vmax=1.0, linecolor='white',\n        annot_kws={'fontsize':12 }\n    )\n    \n    plt.title('Pearson Correlation of Features', y=1.05, size=15)\n    \ncorrelation_heatmap(dataset)","1e4a70ab":"The command below displays the list of column names.","b701784e":"The definition given by the documentation is:\n> Generate descriptive statistics that summarize the central tendency, dispersion and shape of a dataset\u2019s distribution\n\nSo I guess if you have basic knowledge of statistics then you would understand what the values mean. If not then you might need to brush up with a bit of the fundamentals.","07f3bf59":"The code below returns a random sample of items from the dataset (or dataframe). This means it randomly selects 10 examples to display.","331d25c5":"The code below returns the first few number of items from the dataset. The default number of items is 5 if not specified.","fbc09440":"The plot below would be a more general one as it plots the distribution of age of passengers, for both survived and dead.","c199d4c4":"For the code below, the top 3 boxplots shows the distribution of the data for each feature\/variable. The bottom 3 plots shows the feature with respect to the output variable, for the survived and the dead, e.g. bottom left,the # of passengers for each fare bin, for the dead and the survived.","e12075d3":"The code below generates a comparison between  two (or more) factors. Means compute a table comparing two features, here it is comparing one of the features with the output variable.","92a17719":"The code below returns the last few number of items from the dataset. The default number of items is 5 if not specified.","a8d6a94d":"The graphs below are displaying the same thing as above, but this time it is splitted into 3 graphs, comparing each category of the embarked column, in terms of its Pclass and the survival rate.","a60de98f":"The graphs below might seem a bit confusing at first, as they have are plotting 3 variables for each graph, and might be a bit hard to wrap your head around at first, but you can think of it this way, for the survived people,how fare and Pclass relate to each other, and then for the dead too. (1st graph). In a way, it is also the distribution for the 2 variables, for the survived and the dead.","93a9d9b3":"The code below generates the dataset info for each of the columns.","d87ae076":"Hi guys, this is meant to be for my own reference, but who knows, it might come in handy to other newcomers in the future who feel overwhelmed by the available tools but don't let that scare you from having the most exciting journey in your life. the journey is just about to start!","4574014a":"This code is similar to the top, where the groupby method groups them by the column 'Sex' for the 'Survived' column values.","d5c44731":"Okay. back to data cleaning. I'm just going to copy the code below for you all to catch up.","185f8607":"The graphs below are also similar to the previous one, in a different format. Therefore, there is no strict rules saying when to use which types of graphs, you choose whatever that is able to represent your data or give meaning to it.","d5370085":"The graphs generated below might look a bit less intimidating compared to the previous one, but they are doing the same thing too. So e.g., for each embarked, the survival rate, for male and female. (1st one)","6a174b06":"The plot belows compare every column to each other, It is a bit hard to grasp what the usage of this, but in the documentation it says:\n> By default, this function will create a grid of Axes such that each variable in data will by shared in the y-axis across a single row and in the x-axis across a single column. The diagonal Axes are treated differently, drawing a plot to show the univariate distribution of the data for the variable in that column.\n\nHowever, it is worth it to find out more what they represent to be able to put it into use.","79725f1f":"Okay since this is meant to focus on visualization tools, therefore we will just focus on that and I will take codes from some other reference to quickly preprocess our data, or data cleaning. \n\nData preprocessing consists of multiple steps such as:\n(a) Correcting\n(b) Completing\n(c) Creating\n(d) Converting\n(e) Correlating\n(f) Classifying\n\nYou can read more about them at these notebooks. Feel free to go through them. :) \nhttps:\/\/www.kaggle.com\/ldfreeman3\/a-data-science-framework-to-achieve-99-accuracy\nhttps:\/\/www.kaggle.com\/startupsci\/titanic-data-science-solutions","311508c4":"For the code below, the top 3 graphs compares the categorical features with respect to the outcome feature, or the output variable. The bottom 3 graphs plots each bins with respect to the dependent variable. Here, outcome feature, output variable, dependent variable all refer to the same thing, whichever you prefer, as long as you understand it refers to the 'Survived' column.","41019b4a":"The graphs below splits the Pclass categories into each respective graph, and for both male and female, and shows the survived and dead #.","90cb6dc5":"Now we have done filling the missing values\/removing columns etc that are necessary, (again for more infor please refer to the links given above), the next is to visualize our data. As a note, some of examples below might appear as a table\/list\/graph.","92afdc73":"The code below checks and sums the amount of null values within each column.","faec6c4c":"Okay, this is what I have for now, I will continue to update this if I have found more interesting ones. Again, I'm not stealing any content, this is solely for the purpose of my personal use, but who knows, if it is able to benefit other people too. Why not share it? Isolation will not get to far. I will quote the resources I got these graphs from below again, if you missed it at the top.\n\nhttps:\/\/www.kaggle.com\/ldfreeman3\/a-data-science-framework-to-achieve-99-accuracy\nhttps:\/\/www.kaggle.com\/startupsci\/titanic-data-science-solutions\nhttps:\/\/www.kaggle.com\/arthurtok\/introduction-to-ensembling-stacking-in-python\n\nEnjoy coding! :)","6fafe2d0":"Lastly, the heatmap below compares the correlation of each column to each other. From what I have read, usualyl the less relevant they are, the better the output results generated, my guess is that it might have something to do with redundancy of features, feel free to find out more."}}