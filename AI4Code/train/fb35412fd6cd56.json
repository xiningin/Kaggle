{"cell_type":{"906c9fef":"code","588c90c1":"code","7a36c5d1":"code","fad07db7":"code","6edff3c1":"code","297b824e":"code","450a9b6e":"code","9cea3480":"code","9291d32d":"code","26a9c408":"code","cf6354bd":"code","a166a92a":"code","b717675e":"code","5993a81c":"code","25edc844":"code","f2db04c2":"code","c96b2e91":"code","9f1ad3d8":"code","5f24ddef":"code","cb3b6d30":"code","f6dd6b0b":"code","2b225250":"code","8f28231f":"code","2cfeb5a4":"code","4dc623cd":"code","f69f6cca":"code","7c9c506f":"code","bf83dd8f":"code","a13a3560":"code","91f3c7e0":"code","80d4a73b":"code","067358bc":"code","e2d6c03e":"code","4dc41056":"code","cfb6621c":"code","9b0d4476":"code","74b38524":"code","9dbce7c8":"code","96c9a994":"code","38d42351":"code","e7e23e9f":"code","df26c921":"code","b346f944":"code","cd9cf3ea":"code","f5ac457b":"code","0b4af8c2":"code","2515a249":"code","c4aefead":"code","738dbc81":"code","54c4e5b2":"code","2d4814a5":"code","9730a16c":"code","6fd6d387":"code","375e640e":"code","570d165c":"code","10d01ce7":"code","987ca233":"code","d60990ad":"code","51cb1e0a":"code","e0a47207":"markdown","7a4514ff":"markdown","8022afd7":"markdown","24c4bec5":"markdown","00f3f57e":"markdown","71b8f0cf":"markdown","5290bff1":"markdown","02b010bd":"markdown","da26a4dc":"markdown","5f8e50cb":"markdown","a823e225":"markdown","b8976d1b":"markdown","59f83bf2":"markdown","11437220":"markdown","876d79b0":"markdown","70d5e229":"markdown","9563365f":"markdown","6fec4f40":"markdown"},"source":{"906c9fef":"import numpy as np","588c90c1":"np.array([1, 2, 3])","7a36c5d1":"# Cannot do this\n# Uncomment to see the error\n# np.array([1, 2, 3],[4, 5, 6])\n","fad07db7":"# We need to bundle the array\narr = np.array([[1, 2, 3], [4, 5, 6]])\narr","6edff3c1":"arr.shape","297b824e":"ex = np.array([1, 2, 3])","450a9b6e":"ex.shape","9cea3480":"arr.dtype","9291d32d":"# Tells us the dimension of the array\nprint(arr.ndim)\nprint(ex.ndim)","26a9c408":"# Let's add one float element inside list\nnp.array([1, 2, 3.0]).dtype","cf6354bd":"np.arange(10)","a166a92a":"c_python = range(10000)","b717675e":"%timeit [i**4 for i in c_python]","5993a81c":"c_numpy = np.arange(10000)","25edc844":"%timeit c_numpy**4","f2db04c2":"# arange function to start with 3\nnp.arange(2, 20)","c96b2e91":"# arange function to do step\nnp.arange(3, 20, 3)","9f1ad3d8":"# Array with zeros and rows and columns\nnp.zeros((3, 2))","5f24ddef":"# Array with ones and rows and columns\nnp.ones((3, 2))","cb3b6d30":"# Identity Matrix\nnp.eye(3)","f6dd6b0b":"# Fill the values of array other than zeros or ones\n# second attribute is the number by which you wanna fill the array\nnp.full((3, 3), 2)","2b225250":"np.full((3, 3), 3.4, dtype=np.int)","8f28231f":"# Diagonal Matrix\nnp.diag([1, 2, 3, 4, 5])","2cfeb5a4":"a = np.array([1, 2, 3])\nnp.tile(a, (3, 1))","4dc623cd":"np.tile(a, (3, 3))","f69f6cca":"# generating a random number between 0 and 1\nprint(np.random.random())\n# generating a random number between 0 and 50\nprint(50*np.random.random())\n# generating a random number between 100 and 200\nprint(100*np.random.random() + 100)","7c9c506f":"# generating random matrix (rows, columns)\nnp.random.random([3, 3])","bf83dd8f":"# distributes array into 100 parts between 1 and 50\na = np.linspace(1, 50, 100)  # 50 is not excluded\na","a13a3560":"# Bytes of memory taken\na.itemsize","91f3c7e0":"b = np.arange(18)","80d4a73b":"print(b.shape)\n# Reshaping it to different dimension\n# last 3,3 is rows and colums inside 2 rows\nb.reshape(2, 3, 3)","067358bc":"a = np.arange(2, 20, 2)","e2d6c03e":"a","4dc41056":"# Access the list using indices normally\na[4]","cfb6621c":"# Lets make an array for boolean of list a\na > 10","9b0d4476":"a = np.arange(20)\nb = a\nprint(b)\nprint(a)\n# updating b\nb[0] = 20\nprint(b)\n# Here a is also changed\nprint(a)","74b38524":"np.shares_memory(a, b)","9dbce7c8":"a = np.arange(20)\n# This way a values are not changed and both shares different memory location\nb = a.copy()\nprint(a)\nprint(b)\nb[0] = 11\nprint(a)\nprint(b)\nnp.shares_memory(a, b)","96c9a994":"a = np.array([[1, 2, 3], [4, 5, 6]])\na","38d42351":"a.T","e7e23e9f":"b = np.array([[7, 8, 9], [10, 11, 12]])","df26c921":"# Concatenate inside one matrix\nnp.vstack((a, b))","b346f944":"np.hstack((a, b))","cd9cf3ea":"print(np.sin(a))\nprint(np.cos(a))\nprint(np.exp(a))","f5ac457b":"# Sum\nprint(np.sum(a))\n# Median \nprint(np.median(a))\n# Standard deviation\nprint(a.std())","0b4af8c2":"# Shortcut to create matrix with 3X3\nnp.arange(1, 10).reshape(3, 3)","2515a249":"A = np.array([[1,2],[3,4]]) \nA","c4aefead":"# Determinant of matrix\nnp.linalg.det(A)","738dbc81":"# Inverse of a matrix\nnp.linalg.inv(A)","54c4e5b2":"# Getting all the eigen values \nnp.linalg.eig(A)","2d4814a5":"# Dot product of two matrices\nB = A.T\nprint(B)\nnp.dot(A, B)","9730a16c":"A","6fd6d387":"# Columnwise addition\nA.sum(axis=0)","375e640e":"# Rowwise addition\nA.sum(axis=1)","570d165c":"print(A)\nprint(A.max())\n# index of max value\nprint(A.argmax())","10d01ce7":"# Adding column to the shape\na = np.arange(1, 10)","987ca233":"a.shape","d60990ad":"a[:, np.newaxis].shape","51cb1e0a":"# Sorting the array\nnp.sort(a)","e0a47207":"### This returns true because a and b shares the same memory location and hence both a and b are updated if I change only b","7a4514ff":"## Getting values using operators for linear algebra","8022afd7":"## Types of element present in the array","24c4bec5":"### Stacking the matrix (row, column) wise\n### Example\na = [1, 2, 3]\nStack same items on different rows","00f3f57e":"## Making the transpose of the matrix","71b8f0cf":"### Note: Assigning same list to other variable changes both the variable","5290bff1":"## Change the dimension of the array","02b010bd":"## Making an array","da26a4dc":"## Rows and columns in an Array\n### If array is two dimensional then it displays (rows, columns) else if it is one dimensional then it represents columns","5f8e50cb":"## Again finding matrix basic operations","a823e225":"### Equally dividing the array into specific parts between specific range","b8976d1b":"## Using arange function for making a list \n### It starts from 0 and excludes the last number","59f83bf2":"## Solution for the above problem","11437220":"## Comparing which is better numpy list or python list","876d79b0":"### Inference\n#### python list took 10 ** -3 time and numpy list took 10 ** -6 time to execute. Hence numpy is faster than python list ","70d5e229":"## Thanks","9563365f":"### random.random()","6fec4f40":"## Array with matrix operations"}}