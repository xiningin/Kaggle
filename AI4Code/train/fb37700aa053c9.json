{"cell_type":{"11c1847e":"code","34c1ce3a":"code","66a6bc09":"code","dc7da963":"code","e833bbdf":"code","a550528e":"code","80e8b02c":"code","7c3aa47e":"code","81b89a7d":"code","786e59cb":"code","4acd14dd":"code","29787b15":"code","e6e491fb":"code","120f9b65":"code","331dad6b":"code","669b51f1":"code","7b857f22":"code","803ed59b":"code","2543b319":"code","5e3a6ddf":"code","9a4313bd":"code","f427e6f8":"code","ad0c077b":"code","9184cd3b":"code","4df5d10f":"code","b7941f2d":"code","72f58d13":"code","2601ce3a":"code","45723fd4":"code","3c213e84":"code","62c38ca8":"code","53518e1a":"code","cfba1364":"code","c9727e38":"code","158e1d87":"code","ae00e754":"code","992e29ed":"code","cac286ed":"code","57fd366b":"code","f4edeb06":"code","d0fcdbbf":"code","3baa805b":"code","764f5b53":"code","b17be87e":"code","ee2fa267":"code","fd36bbb7":"code","7f1fb08d":"code","b20d676a":"code","288ae583":"code","e3df35ac":"code","866e5bb3":"code","e1596a7f":"code","63138b86":"code","63bc047a":"code","1b742fb2":"code","67405f27":"code","1915e349":"code","6e64127d":"code","8285e114":"code","afce10c8":"code","2c32d445":"code","6716e9cc":"code","6ed011b5":"code","ca3fe65c":"code","aeab496a":"code","ba7ef468":"code","e70c9386":"code","35f2d79a":"code","715498dd":"code","935be6a1":"code","401e19b4":"code","f5cc1f48":"code","d44cd103":"code","a9d48171":"code","9c104c10":"code","343dc41b":"code","69b94fdf":"code","fe93bea9":"code","bddba4f5":"code","2163a460":"code","4923fc6c":"code","c1c57e19":"code","2d041c43":"code","4973a678":"code","506e8a72":"code","f24b4c69":"code","16b49575":"code","6fae0e8a":"code","f26c8c0e":"code","84b528d1":"code","21b68bf7":"code","ee26d19a":"code","a5b36c3e":"code","51c9a786":"code","a6add0c0":"code","be1da3a5":"code","2b4ebb55":"code","6345d178":"code","fe105639":"code","5932280d":"code","ea4a5131":"markdown","5072c1fa":"markdown","d2893b62":"markdown","891d0a11":"markdown","cd53f3a8":"markdown","b6875710":"markdown","1dc4fa3f":"markdown","c82bc3ea":"markdown","b80bf389":"markdown","de22247f":"markdown","460f2d40":"markdown","457b8e45":"markdown","4d074fcd":"markdown","224d89bc":"markdown","fff55da3":"markdown","040e7b35":"markdown","b7bd6c5d":"markdown","60291a56":"markdown","7b0d1eb9":"markdown","bb90e3ec":"markdown","3e5839c7":"markdown","797ca97a":"markdown","45a1a944":"markdown","8f77857a":"markdown","d8d8b343":"markdown","0f3ba724":"markdown","4830a7e8":"markdown","fcde3d26":"markdown","795149f3":"markdown","13b0163c":"markdown","a3a4b906":"markdown","451572bd":"markdown","0a790de7":"markdown","776bcf23":"markdown","2ae6921e":"markdown","c8957f7f":"markdown","da8557c7":"markdown","892ddb0c":"markdown","8c4e6e48":"markdown","2cb21be0":"markdown","7cf88f98":"markdown","c35eda39":"markdown","9abc1568":"markdown","0c4a56bf":"markdown","d2785b73":"markdown","ee5bb0c1":"markdown","e6aa9e9b":"markdown","5535f9c9":"markdown","279dd664":"markdown","a48e7af7":"markdown","96223a67":"markdown","7cee9cbc":"markdown","05e4e2e3":"markdown","488d67e1":"markdown","93084127":"markdown","fec9fc5e":"markdown","e9d4be0c":"markdown","ee52b488":"markdown","bab1bb99":"markdown","42c610a1":"markdown","987cb7f1":"markdown","ff1dc994":"markdown","0fcea236":"markdown","3bac438e":"markdown","af991988":"markdown","0a8cb7bd":"markdown","b6db6d84":"markdown","5a011253":"markdown","1a77e9fe":"markdown","9292db35":"markdown","30aed336":"markdown","99cd8480":"markdown","9c0e1dfd":"markdown","7f96de16":"markdown","7b09b970":"markdown","a289d79d":"markdown","38f686e4":"markdown","fe0f0e8b":"markdown","b7f444a1":"markdown","82807483":"markdown","f707d108":"markdown","038340ae":"markdown","7e04bd86":"markdown","7ef80572":"markdown","45d7fd55":"markdown","b62ae4fb":"markdown","2874ba1a":"markdown","793d044a":"markdown","63adf5d0":"markdown","dc71ac45":"markdown","519bee70":"markdown","f89ea35f":"markdown","27734733":"markdown","67aff060":"markdown","f0e2f2d8":"markdown","7e6e0cec":"markdown","81bc78c3":"markdown"},"source":{"11c1847e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n#Read system file path of data set to load the path\nimport os\n\n# import 'Numpy' \nimport numpy as np # linear algebra\n# import 'Pandas' \nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# import subpackage of Matplotlib\nimport matplotlib.pyplot as plt\n\n# import 'Seaborn' \nimport seaborn as sns\n\n# to suppress warnings \nfrom warnings import filterwarnings\nfilterwarnings('ignore')\n\n# display all columns of the dataframe\npd.options.display.max_columns = None\n\n# display all rows of the dataframe\npd.options.display.max_rows = None\n \n# to display the float values upto 6 decimal places     \npd.options.display.float_format = '{:.6f}'.format\n\n# import train-test split \nfrom sklearn.model_selection import train_test_split\n\n# import various functions from statsmodel to perform linear regression\nimport statsmodels \nimport statsmodels.api as sm\nimport statsmodels.stats.api as stats\nfrom statsmodels.compat import lzip\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\nfrom statsmodels.graphics.gofplots import qqplot\nfrom statsmodels.stats.anova import anova_lm\nfrom statsmodels.formula.api import ols\nfrom statsmodels.tools.eval_measures import rmse\nfrom sklearn.multioutput import MultiOutputRegressor\nfrom sklearn.preprocessing import LabelEncoder\n\n\nfrom sklearn.model_selection import KFold\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.preprocessing import LabelEncoder\n\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.feature_selection import SelectFromModel\nfrom sklearn import metrics\nfrom sklearn.metrics import mean_squared_error,r2_score\nimport glob\n%matplotlib inline\nplt.rcParams['figure.figsize'] = (10, 7)\nfrom datetime import datetime, timedelta\n\n\n# import various functions from scipy\nimport scipy as sci\nfrom scipy import stats as scistats\nfrom scipy.stats import shapiro\n\n# 'metrics' from sklearn is used for evaluating the model performance\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import mean_squared_error\n\nfrom sklearn.model_selection import RepeatedKFold\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.metrics import r2_score, mean_squared_error, make_scorer\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import Ridge","34c1ce3a":" #Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\ndf_AQI = pd.DataFrame()\ncount = 0\nfor dirname, _, filenames in os.walk('..\/input\/beijing-multisite-airquality-data-set'):\n# for dirname, _, filenames in os.walk('C:\/Users\/Balya\/MTech\/ML\/PRESENTATIONS\/PRSA_Data_20130301-20170228'):\n    for filename in filenames:\n        path = os.path.join(dirname, filename) \n#         path = dirname+'\/'+ filename\n        print('File path : ',path)\n        if count == 0:\n            df_AQI1 = pd.read_csv(path, encoding=\"utf-8\")\n            df_AQI = df_AQI.append(df_AQI1)\n            count = 1\n            continue\n            \n        df_AQI1 = pd.read_csv(path, encoding=\"utf-8\")\n        df_AQI = df_AQI.append(df_AQI1)\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","66a6bc09":"df_AQI.head()","dc7da963":"df_AQI.info()","e833bbdf":"df_Quantitative = df_AQI.select_dtypes(exclude='object')\ndf_Quantitative.info()","a550528e":"df_Qualitative = df_AQI.select_dtypes(exclude=np.number)\ndf_Qualitative.info()","80e8b02c":"df_AQI.isna().sum().sum()","7c3aa47e":"# percentage of missing values in each column\nround(df_AQI.isnull().sum()\/len(df_AQI.index), 2)*100","81b89a7d":"df_AQI['PM2.5'].fillna(df_AQI['PM2.5'].median(), inplace=True)\ndf_AQI['PM10'].fillna(df_AQI['PM10'].median(), inplace=True)\ndf_AQI['SO2'].fillna(df_AQI['SO2'].median(), inplace=True)\ndf_AQI['NO2'].fillna(df_AQI['NO2'].mean(), inplace=True)\ndf_AQI['CO'].fillna(df_AQI['CO'].median(), inplace=True)\ndf_AQI['O3'].fillna(df_AQI['O3'].median(), inplace=True)\ndf_AQI['TEMP'].fillna(df_AQI['TEMP'].median(), inplace=True)\ndf_AQI['PRES'].fillna(df_AQI['PRES'].median(), inplace=True)\ndf_AQI['DEWP'].fillna(df_AQI['DEWP'].mean(), inplace=True)\ndf_AQI['RAIN'].fillna(df_AQI['RAIN'].median(), inplace=True)\ndf_AQI['WSPM'].fillna(df_AQI['WSPM'].median(), inplace=True)","786e59cb":"round(df_AQI.isnull().sum()\/len(df_AQI.index), 2)*100","4acd14dd":"df_AQI = df_AQI.drop(['wd', 'No'], axis=1)\ndf_AQI.isna().sum().sum()","29787b15":"df_AQI.drop(['year','month','day','hour'],axis=1).describe().transpose()","e6e491fb":"df_AQI.std()","120f9b65":"data = df_AQI.copy()\ndata = data.select_dtypes(exclude='object')\n# set the plot size using figure()\n# pass width and height in inches to 'figsize' \nplt.figure(figsize = (15,5))\n\n# plot a boxplot to visualize the outliers in all the numeric variables\ndata.boxplot()\n\n# set plot label\n# set text size using 'fontsize'\nplt.title('Distribution of all Numeric Variables', fontsize = 15)\n\n# xticks() returns the x-axis ticks\n# 'rotation = vertical' rotates the x-axis labels vertically\nplt.xticks(rotation = 'vertical', fontsize = 10)\n\n# display the plot\nplt.show()","331dad6b":"data = df_AQI.select_dtypes(exclude='object').copy()\ndata.drop(['month','day','year','hour'],axis=1,inplace=True)\nplt.rcParams['figure.dpi'] = 100\noutliers_by_variables = data.columns\n\nplt.figure(figsize=(17,15))\nfor i in range(0,outliers_by_variables.shape[0]):\n    plt.subplot(4,7, i+1)\n    plt.boxplot(data[outliers_by_variables[i]], autorange=True)\n    plt.title(outliers_by_variables[i], fontdict= {'fontsize': 15 ,'fontweight': 5, 'color':'000000'})\n    plt.AutoLocator.default_params","669b51f1":"print(\"Skewness of the Target Variable: \", round(data['PM2.5'].skew(),4))\nfig, axes = plt.subplots(ncols=2, nrows=1, figsize = (8,4))\n# plot a distplot for the residuals\ndata['PM2.5'].hist(ax = axes[0])\nsns.histplot(data['PM2.5'], ax = axes[0], color='b')\n# set text size using 'fontsize'\naxes[0].set_title('PM2.5 Hist Plot', fontsize = 12)\n\n# plot the Q-Q plot\n# 'r' represents the regression line\nsns.boxplot(data['PM2.5'], ax = axes[1],orient=\"v\")\naxes[1].set_title('PM2.5 Box Plot', fontsize = 12)\nfig.tight_layout()\n# display the plot\nplt.show()","7b857f22":"import seaborn as sns\ndata = data.drop(['PM10'],axis=1)\ncorrmat = data.select_dtypes(exclude='object').corr()\nf, ax = plt.subplots(figsize=(12, 10))\n\ndupl_key_values = list()\nfor i in range(len(corrmat.columns)):\n  for j in range(len(corrmat.index)):\n    if corrmat.iloc[i,j]>0.50 and corrmat.iloc[i,j] != 1.0:\n        if i not in dupl_key_values or j in dupl_key_values:\n            dupl_key_values.append(j)\n        if i in dupl_key_values or j not in dupl_key_values:\n            dupl_key_values.append(i)\n            print('Multi-Collinearity Feature:: {} &  {} :-> Correlation Score {}'.format(corrmat.columns[i],corrmat.columns[j],round(corrmat.iloc[i,j],4)))\n\nsns.heatmap(round(corrmat, 2), vmax=.8, square=True, annot=True,cmap='cubehelix')","803ed59b":"#Remove outliers from the data set \n#not standard approach\nprint('Before: Outliers Treating with IQR', data.shape)\ndf_outlier = data.copy()\n# df_outlier.drop(['PM10'], axis=1, inplace=True)\ndf_outlier  = df_outlier.select_dtypes(exclude ='object')\n#1st quantile\nq1 = df_outlier.quantile(0.25)\n\n#3rd quantile\nq3 = df_outlier.quantile(0.75)\n\n# IQR: The Interquartile Range is defined as the difference between the third and first quartile\n# calculate IQR for each numeric variable\niqr = q3-q1\n# print(IQR)\n# retrieve the dataframe without the outliers\n# '~' returns the values that do not satisfy the given conditions \n# i.e. it returns values between the range [Q1-1.5*IQR, Q3+1.5*IQR]\n# '|' is used as 'OR' operator on multiple conditions   \n# 'any(axis=1)' checks the entire row for atleast one 'True' entry (those rows represents outliers in the data)\ndf_outlier = df_outlier[~((df_outlier  < (q1-(1.5*iqr))) | (df_outlier  > (q3+(1.5*iqr)))).any(axis=1)]\n\n# check the shape of the data\nprint('After: Outliers Treating with IQR', df_outlier.shape)","2543b319":"df_outlier = df_outlier.select_dtypes(exclude='object').copy()\n# df_outlier.drop('PM10', inplace=True, axis=1)\n# set the plot size using figure()\n# pass width and height in inches to 'figsize' \nplt.figure(figsize = (15,5))\n\n# plot a boxplot to visualize the outliers in all the numeric variables\ndf_outlier.boxplot()\n\n# set plot label\n# set text size using 'fontsize'\nplt.title('Distribution of all Numeric Variables', fontsize = 15)\n\n# xticks() returns the x-axis ticks\n# 'rotation = vertical' rotates the x-axis labels vertically\nplt.xticks(rotation = 'vertical', fontsize = 10)\n\n# display the plot\nplt.show()","5e3a6ddf":"# df_comp = df_comp.select_dtypes(exclude='object').copy()\nplt.rcParams['figure.dpi'] = 100\ndf_out=df_outlier.copy()\noutliers_by_variables = df_out.columns\n\nplt.figure(figsize=(17,14))\nfor i in range(0,outliers_by_variables.shape[0]):\n    plt.subplot(4,7, i+1)\n    plt.boxplot(data[outliers_by_variables[i]], autorange=True)\n    plt.title(outliers_by_variables[i], fontdict= {'fontsize': 15 ,'fontweight': 5, 'color':'000000'})\n    plt.AutoLocator.default_params","9a4313bd":"df = df_AQI[['SO2','year','station']].groupby([\"year\"]).median().reset_index().sort_values(by='year',ascending=False)\nfig,ax=plt.subplots(2, 3,figsize=(15,6))\nax[0, 0].set_title('SO2-By-Year')\nsns.pointplot(ax= ax[0,0],x='year', y='SO2', data=df)\n\ndf = df_AQI[['NO2','year','station']].groupby([\"year\"]).median().reset_index().sort_values(by='year',ascending=False)\nax[0, 1].set_title('NO2-By-Year')\nsns.pointplot(ax= ax[0,1], x='year', y='NO2', data=df,markers='o', color='red')\n\ndf = df_AQI[['CO','year','station']].groupby([\"year\"]).median().reset_index().sort_values(by='year',ascending=False)\nax[0, 2].set_title('CO-By-Year')\nsns.pointplot(ax= ax[0,2],x='year', y='CO', data=df,markers='o', color='olive')\n\ndf = df_AQI[['O3','year','station']].groupby([\"year\"]).median().reset_index().sort_values(by='year',ascending=False)\nax[1, 0].set_title('O3-By-Year')\nsns.pointplot(ax=ax[1, 0], x='year', y='O3', data=df,markers='o', color='green')\n\n\ndf = df_AQI[['PM2.5','year','station']].groupby([\"year\"]).median().reset_index().sort_values(by='year',ascending=False)\nax[1, 1].set_title('PM2.5-By-Year')\nsns.pointplot(ax=ax[1, 1],x='year', y='PM2.5', data=df,markers='o', color='yellow')\n\n\ndf = df_AQI[['PM10','year','station']].groupby([\"year\"]).median().reset_index().sort_values(by='year',ascending=False)\nax[1, 2].set_title('PM10-By-Year')\nsns.pointplot(ax=ax[1,2], x='year', y='PM10', data=df,markers='o', color='orange')\nfig.tight_layout()","f427e6f8":"df_2017 = df_AQI[df_AQI['year']==2017]","ad0c077b":"df = df_2017[['SO2','hour','station']].groupby([\"hour\"]).median().reset_index().sort_values(by='hour',ascending=False)\nfig,ax=plt.subplots(2, 3, figsize=(15,6))\nax[0, 0].set_title('SO2-By-Hour')\nsns.pointplot(ax=ax[0,0],x='hour', y='SO2', data=df)\n\ndf = df_2017[['NO2','hour','station']].groupby([\"hour\"]).median().reset_index().sort_values(by='hour',ascending=False)\nax[0, 1].set_title('NO2-By-Hour')\nsns.pointplot(ax= ax[0,1], x='hour', y='NO2', data=df,markers='o', color='red')\n\ndf = df_2017[['CO','hour','station']].groupby([\"hour\"]).median().reset_index().sort_values(by='hour',ascending=False)\nax[0, 2].set_title('CO-By-Hour')\nsns.pointplot(ax= ax[0,2],x='hour', y='CO', data=df,markers='o', color='olive')\n\ndf = df_2017[['O3','hour','station']].groupby([\"hour\"]).median().reset_index().sort_values(by='hour',ascending=False)\nax[1, 0].set_title('O3-By-Hour')\nsns.pointplot(ax=ax[1, 0], x='hour', y='O3', data=df,markers='o', color='green')\n\ndf = df_2017[['PM2.5','hour','station']].groupby([\"hour\"]).median().reset_index().sort_values(by='hour',ascending=False)\nax[1, 1].set_title('PM2.5-By-Hour')\nsns.pointplot(ax=ax[1, 1],x='hour', y='PM2.5', data=df,markers='o', color='yellow')\n\ndf = df_2017[['PM10','hour','station']].groupby([\"hour\"]).median().reset_index().sort_values(by='hour',ascending=False)\nax[1, 2].set_title('PM10-By-Hour')\nsns.pointplot(ax=ax[1,2], x='hour', y='PM10', data=df,markers='o', color='orange')\n\nfig.tight_layout()","9184cd3b":"# creating date field for further analysis by extracting day of the week, month etc.\ndf_2017['date']=pd.to_datetime(df_2017[['year', 'month', 'day']])","4df5d10f":"# function to find day of the week based on the date field\nimport calendar\ndef findDay(date): \n    dayname = calendar.day_name[date.weekday()]\n    return dayname","b7941f2d":"df_2017['day_week'] = df_2017['date'].apply(lambda x: findDay(x))","72f58d13":"custom_day = {'Monday':0, 'Tuesday':1,'Wednesday':2,'Thursday':3,'Friday':4,'Saturday':5,'Sunday':6}","2601ce3a":"df = df_2017[['SO2','day_week','station']].groupby([\"day_week\"]).median().reset_index().sort_values(by='day_week',ascending=True)\ndf = df.iloc[df['day_week'].map(custom_day).argsort()]\nfig,ax=plt.subplots(2,3, figsize=(15,5))\nax[0, 0].set_title('SO2-By-day_week')\nsns.pointplot(ax=ax[0,0],x='day_week', y='SO2',markers='o', data=df)\n\ndf = df_2017[['NO2','day_week','station']].groupby([\"day_week\"]).median().reset_index().sort_values(by='day_week',ascending=True)\ndf = df.iloc[df['day_week'].map(custom_day).argsort()]\nax[0, 1].set_title('NO2-By-day_week')\nsns.pointplot(ax= ax[0,1], x='day_week', y='NO2', data=df,markers='o', color='red')\n\ndf = df_2017[['CO','day_week','station']].groupby([\"day_week\"]).median().reset_index().sort_values(by='day_week',ascending=True)\ndf = df.iloc[df['day_week'].map(custom_day).argsort()]\nax[0, 2].set_title('CO-By-day_week')\nsns.pointplot(ax= ax[0,2],x='day_week', y='CO', data=df, color='olive')\n\ndf = df_2017[['O3','day_week','station']].groupby([\"day_week\"]).median().reset_index().sort_values(by='day_week',ascending=True)\ndf = df.iloc[df['day_week'].map(custom_day).argsort()]\nax[1, 0].set_title('O3-By-day_week')\nsns.pointplot(ax=ax[1, 0], x='day_week', y='O3', data=df,markers='o', color='green')\n\ndf = df_2017[['PM2.5','day_week','station']].groupby([\"day_week\"]).median().reset_index().sort_values(by='day_week',ascending=True)\ndf = df.iloc[df['day_week'].map(custom_day).argsort()]\nax[1, 1].set_title('PM2.5-By-day_week')\nsns.pointplot(ax=ax[1, 1],x='day_week', y='PM2.5', data=df,markers='o', color='yellow')\n\ndf = df_2017[['PM10','day_week','station']].groupby([\"day_week\"]).median().reset_index().sort_values(by='day_week',ascending=True)\ndf = df.iloc[df['day_week'].map(custom_day).argsort()]\nax[1, 2].set_title('PM10-By-day_week')\nsns.pointplot(ax=ax[1,2], x='day_week', y='PM10', data=df, markers='o', color='orange')\n\nfig.tight_layout()","45723fd4":"df_mon = df_AQI.copy()\n#converting month values to month name for better understanding\ndf_mon.month.replace([1,2,3,4,5,6,7,8,9,10,11,12], ['Jan', 'Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'], inplace=True)","3c213e84":"#Assign the year to numeric number\ncustom_dict = {'Jan':0, 'Feb':1,'Mar':2,'Apr':3,'May':4,'Jun':5,'Jul':6,'Aug':7,'Sep':8,'Oct':9,'Nov':10,'Dec':11}","62c38ca8":"df = df_mon[['SO2','month','station']].groupby([\"month\"]).median().reset_index().sort_values(by='month',ascending=True)\ndf = df.iloc[df['month'].map(custom_dict).argsort()]\nfig,ax=plt.subplots(2,3, figsize=(15,5))\nax[0, 0].set_title('SO2-By-month')\nsns.pointplot(ax= ax[0,0], x='month', y='SO2', data=df)\n\ndf = df_mon[['NO2','month','station']].groupby([\"month\"]).median().reset_index().sort_values(by='month',ascending=True)\nax[0, 1].set_title('NO2-By-month')\nsns.pointplot(ax= ax[0,1], x='month', y='NO2', data=df,markers='o', color='red')\n\ndf = df_mon[['CO','month','station']].groupby([\"month\"]).median().reset_index().sort_values(by='month',ascending=True)\nax[0, 2].set_title('CO-By-month')\nsns.pointplot(ax= ax[0,2],x='month', y='CO', data=df,markers='o', color='olive')\n\ndf = df_mon[['O3','month','station']].groupby([\"month\"]).median().reset_index().sort_values(by='month',ascending=True)\nax[1, 0].set_title('O3-By-month')\nsns.pointplot(ax=ax[1, 0], x='month', y='O3', data=df,markers='o', color='green')\n\ndf = df_mon[['PM2.5','month','station']].groupby([\"month\"]).median().reset_index().sort_values(by='month',ascending=True)\nax[1, 1].set_title('PM2.5-By-month')\nsns.pointplot(ax=ax[1, 1],x='month', y='PM2.5', data=df,markers='o', color='yellow')\n\ndf = df_mon[['PM10','month','station']].groupby([\"month\"]).median().reset_index().sort_values(by='month',ascending=True)\nax[1, 2].set_title('PM10-By-month')\nsns.pointplot(ax=ax[1,2], x='month', y='PM10', data=df,markers='o', color='orange')\n\nfig.tight_layout()","53518e1a":"pm2_out = df_AQI[['station', 'PM2.5']]\nfig,ax=plt.subplots(3,4, figsize=(13,7))\nfig.tight_layout()\npm2_out.groupby('station').boxplot(ax=ax)\nplt.suptitle('PM2.5 Target variable Outlier Analysis wrt station')\nplt.show()","cfba1364":"df_so2_sta = df_AQI[['station', 'SO2', 'PM2.5']]\nfig,ax=plt.subplots(3,4, figsize=(13,7))\nfig.tight_layout()\ndf_so2_sta.groupby('station').boxplot(ax=ax, column='SO2')\nplt.suptitle('SO2 Target variable Outlier Analysis wrt station')\nplt.show()","c9727e38":"df_No2_sta = df_AQI[['station', 'NO2']]\nfig,ax=plt.subplots(3,4, figsize=(13,7))\nfig.tight_layout()\ndf_No2_sta.groupby('station').boxplot(ax=ax, column='NO2')\nplt.show()","158e1d87":"df_Co_sta = df_AQI[['station', 'CO']]\nfig,ax=plt.subplots(3,4, figsize=(13,7))\nfig.tight_layout()\ndf_Co_sta.groupby('station').boxplot(ax=ax, column='CO')\nplt.show()","ae00e754":"df_o3_sta = df_AQI[['station', 'O3']]\nfig,ax=plt.subplots(3,4, figsize=(13,7))\nfig.tight_layout()\ndf_o3_sta.groupby('station').boxplot(ax=ax, column='O3')\nplt.show()","992e29ed":"df_AQI = df_AQI.drop(['PM10'], axis=1)\ndf_AQI.head(1)","cac286ed":"#Keep original Dat frame after data cleaning and the imputing null value.\n#copy the data frame for Model building analysis\ndf_md1 = df_AQI.copy()\ndf_md1.head(1)","57fd366b":"#Add constant in to the data frame for the intercept -NA\n# df = sm.add_constant(df)\n# SPlit data n\ndf_md1 = df_AQI.copy()\nX= df_md1.drop(['PM2.5','station','year'], axis=1)\nX= sm.add_constant(X)\nY =df_md1['PM2.5']\n\nX_train , X_test, y_train,y_test = train_test_split( X, Y, test_size = 0.2)\n\nprint(X_train.shape , X_test.shape, y_train.shape,y_test.shape)","f4edeb06":"#Build model using linear\n# Reomve Object type\nX_train_ex_object = X_train.select_dtypes(exclude = 'object')\nols_model1 = sm.OLS(y_train, X_train_ex_object).fit()\nols_model1.summary()","d0fcdbbf":"print(\"==============================================================\")\ny_train_predict=ols_model1.predict(X_train)\ny_test_predict=ols_model1.predict(X_test)\n\nmd1_rmse_train = round(np.sqrt(mean_squared_error(y_train, y_train_predict)), 4)\nprint(\"Root Mean Squared Error (RMSE) on training set: \", md1_rmse_train)\n\nmd1_rmse_test = round(np.sqrt(mean_squared_error(y_test, y_test_predict)), 4)\nprint(\"Root Mean Squared Error (RMSE) on testing set: \", md1_rmse_test)\nprint(\"==============================================================\")","3baa805b":"model=ols_model1\nsummary_4=pd.DataFrame({'Model Name':['MLR MODEL'],\n                        'R Square':[model.rsquared],'Adj R Square':[model.rsquared_adj],\n                         'Prob (F-statistic)':[model.f_pvalue],'Cn':[model.condition_number],\n                       'Prob(JB)':[0.00],'D-W':[1.997],'RMSE train':md1_rmse_train,'RMSE test':md1_rmse_test})\nsummary_4","764f5b53":"from sklearn.linear_model import Ridge\nmodel = Ridge()\ncv = RepeatedKFold(n_splits=3, n_repeats=3, random_state=3)\nreg_cv_score = cross_val_score(model, X,Y, cv=cv)\nreg_cv_mse = cross_val_score(model, X,Y, cv=cv,scoring='neg_mean_squared_error')\nR2 = np.mean(reg_cv_score)\nRMSE = np.sqrt(np.abs(np.mean(reg_cv_mse)))\nprint('R2 :',R2)\nprint('RMSE :',RMSE)\n","b17be87e":"cv_summary_1_0 = pd.DataFrame({'CV Name':['RIDGE REGRESSION'],'R-Square':[R2],'RMSE':[RMSE]})\ncv_summary_1_0","ee2fa267":"from sklearn.linear_model import Lasso\nmodel = Lasso()\ncv = RepeatedKFold(n_splits=3, n_repeats=3, random_state=3)\nreg_cv_score = cross_val_score(model, X,Y, cv=cv)\nreg_cv_mse = cross_val_score(model, X,Y, cv=cv,scoring='neg_mean_squared_error')\nR2 = np.mean(reg_cv_score)\nRMSE = np.sqrt(np.abs(np.mean(reg_cv_mse)))\nprint('R2 :',R2)\nprint('RMSE :',RMSE)","fd36bbb7":"cv_summary_1_1 = pd.DataFrame({'CV Name':['LASSO REGRESSION'],'R-Square':[R2],'RMSE':[RMSE]})\ncv_summary_1_1","7f1fb08d":"from sklearn.linear_model import LinearRegression\nmodel = LinearRegression()\ncv = RepeatedKFold(n_splits=3, n_repeats=3, random_state=3)\nreg_cv_score = cross_val_score(model, X,Y, cv=cv)\nreg_cv_mse = cross_val_score(model, X,Y, cv=cv,scoring='neg_mean_squared_error')\nR2 = np.mean(reg_cv_score)\nRMSE = np.sqrt(np.abs(np.mean(reg_cv_mse)))\nprint('R2 :',R2)\nprint('RMSE :',RMSE)\n","b20d676a":"cv_summary_1_2 = pd.DataFrame({'CV Name':['LINEAR REGRESSION'],'R-Square':[R2],'RMSE':[RMSE]})\ncv_summary_1_2","288ae583":"cv_summary_1 = pd.DataFrame()\n\ncv_summary_1 = cv_summary_1.append(cv_summary_1_0).append(cv_summary_1_1).append(cv_summary_1_2)\ncv_summary_1['Model Name'] = 'MLR MODEL'\ncv_summary_1 = cv_summary_1.set_index('Model Name')\ncv_summary_1","e3df35ac":"# Plot Residual Error using SNS and QQ Plot for analysis\nprint(\"Skewness of the residuals: \", round(ols_model1.resid.skew(), 4) )\nfig, axes = plt.subplots(ncols=2, nrows=1, figsize = (8,4))\n# plot a distplot for the residuals\nsns.distplot(ols_model1.resid, ax = axes[0])\n# set text size using 'fontsize'\naxes[0].set_title('Distribution of Residuals', fontsize = 12)\n\n# plot the Q-Q plot\n# 'r' represents the regression line\nqqplot(ols_model1.resid, line = 'r', ax = axes[1])\naxes[1].set_title('Q-Q Plot', fontsize = 12)\nfig.tight_layout()\n# display the plot\nplt.show()","866e5bb3":"# Build a model on training dataset\n# fit() is used to fit the OLS model\n# use log transformation of y_train \ndf_md1 = df_AQI.copy()\nX= df_md1.drop(['PM2.5','station','year'], axis=1)\nX = sm.add_constant(X)\nY =df_md1['PM2.5']\n\n\nX_train , X_test, y_train,y_test = train_test_split( X, Y, test_size = 0.2)\n# print(X_train.shape , X_test.shape, y_train.shape,y_test.shape)\n# X_train = sm.add_constant(X_train)\nMLR_model_after_transform = sm.OLS(np.log(y_train), X_train).fit()\n\n# print the summary output\nprint(MLR_model_after_transform.summary())","e1596a7f":"print(\"Skewness of the residuals: \", round(MLR_model_after_transform.resid.skew(), 4) )","63138b86":"print(\"==============================================================\")\ny_train_predict = MLR_model_after_transform.predict(X_train)\ny_test_predict = MLR_model_after_transform.predict(X_test)\n\nmd2_rmse_train = round(np.sqrt(mean_squared_error(y_train, y_train_predict)), 4)\nprint(\"Root Mean Squared Error (RMSE) on training set: \", md2_rmse_train)\n\nmd2_rmse_test = round(np.sqrt(mean_squared_error(y_test, y_test_predict)), 4)\nprint(\"Root Mean Squared Error (RMSE) on testing set: \", md2_rmse_test)\nprint(\"==============================================================\")","63bc047a":"model=MLR_model_after_transform\nsummary_3=pd.DataFrame({'Model Name':['MLR WITH LOG TRANSFORM OF Y'],\n                        'R Square':[model.rsquared],'Adj R Square':[model.rsquared_adj],\n                         'Prob (F-statistic)':[model.f_pvalue],'Cn':[model.condition_number],\n                       'Prob(JB)':[0.00],'D-W':[1.996], 'RMSE train':md2_rmse_train,'RMSE test':md2_rmse_test })\nsummary_3","1b742fb2":"model = Ridge()\ncv = RepeatedKFold(n_splits=3, n_repeats=3, random_state=3)\nreg_cv_score = cross_val_score(model, X,np.log(Y), cv=cv)\nreg_cv_mse = cross_val_score(model, X,np.log(Y), cv=cv,scoring='neg_mean_squared_error')\nr2 = np.mean(reg_cv_score)\nRMSE =np.sqrt(np.abs(np.mean(reg_cv_mse)))\nprint('R2 :',R2)\nprint('RMSE :',RMSE)","67405f27":"cv_summary_2_0 = pd.DataFrame({'CV Name':['RIDGE REGRESSION'],'R-Square':[R2],'RMSE':[RMSE]})\ncv_summary_2_0","1915e349":"model = Lasso()\ncv = RepeatedKFold(n_splits=3, n_repeats=3, random_state=3)\nreg_cv_score = cross_val_score(model, X,np.log(Y), cv=cv)\nreg_cv_mse = cross_val_score(model, X,np.log(Y), cv=cv,scoring='neg_mean_squared_error')\nR2 = np.mean(reg_cv_score)\nRMSE = np.sqrt(np.abs(np.mean(reg_cv_mse)))\n\nprint('R2 :',R2)\nprint('RMSE :',RMSE)","6e64127d":"cv_summary_2_1 = pd.DataFrame({'CV Name':['LASSO REGRESSION'],'R-Square':[R2],'RMSE':[RMSE]})\ncv_summary_2_1","8285e114":"model = LinearRegression()\ncv = RepeatedKFold(n_splits=3, n_repeats=3, random_state=3)\nreg_cv_score = cross_val_score(model, X,np.log(Y), cv=cv)\nreg_cv_mse = cross_val_score(model, X,np.log(Y), cv=cv,scoring='neg_mean_squared_error')\nR2 = np.mean(reg_cv_score)\nRMSE = np.sqrt(np.abs(np.mean(reg_cv_mse)))\nprint('R2 :',R2)\nprint('RMSE :',RMSE)\n","afce10c8":"cv_summary_2_2 = pd.DataFrame({'CV Name':['LINEAR REGRESSION'],'R-Square':[R2],'RMSE':[RMSE]})\ncv_summary_2_2","2c32d445":"cv_summary_2 = pd.DataFrame()\n\ncv_summary_2 = cv_summary_2.append(cv_summary_2_0).append(cv_summary_2_1).append(cv_summary_2_2)\ncv_summary_2['Model Name'] = 'MLR MODEL AFTER TRNANSFORM OF Y'\ncv_summary_2 = cv_summary_2.set_index('Model Name')\ncv_summary_2","6716e9cc":"# Plot Residual Error using SNS and QQ Plot for analysis after Data Transform\nprint(\"Skewness of the residuals: \", MLR_model_after_transform.resid.skew())\nfig, axes = plt.subplots(ncols=2, nrows=1, figsize = (8,4))\n# plot a distplot for the residuals\nsns.distplot(MLR_model_after_transform.resid, ax = axes[0])\n# set text size using 'fontsize'\naxes[0].set_title('Distribution of Residuals', fontsize = 12)\n\n# plot the Q-Q plot\n# 'r' represents the regression line\nqqplot(MLR_model_after_transform.resid, line = 'r', ax = axes[1])\naxes[1].set_title('Q-Q Plot', fontsize = 12)\nfig.tight_layout()\n# display the plot\nplt.show()","6ed011b5":"# perform Shapiro Wilk test using 'shapiro()' from scipy library\n# shapiro() returns a tuple having the values of test statistics and the corresponding p-value\n# 'resid' returns the residuals in the model\n# pass the residuals to 'shapiro()'\nstat, p_value = shapiro(MLR_model_after_transform.resid)\n\n# print the test statistic and corresponding p-value \nprint('Test statistic:', stat)\nprint('P-Value:', p_value)","ca3fe65c":"# VIF = Vriance influential Factor\n# VIF = 1\/(1-R**2)\n# VIF > 5 is highly correlated\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\n\n# Lets calculate VIF\ndf_comp_num = df_outlier.select_dtypes(exclude = 'object')\ndf_comp_num = df_comp_num.drop(['PM2.5','PRES', 'TEMP', 'RAIN','NO2'], axis =1)\n\n# Empty Data Frame for VIF calculation\ndf_comp_vif  = pd.DataFrame()\ndf_comp_vif['columns'] = df_comp_num.columns\ndf_comp_vif['VIF_Value'] = [variance_inflation_factor(df_comp_num.values, i) for i in range(df_comp_num.shape[1])]\ndf_comp_vif.sort_values('VIF_Value', ascending=False)\n","aeab496a":"# Split data \nX = df_md1.copy()\nX = df_md1.drop(['PM2.5', 'PRES', 'TEMP', 'RAIN','NO2'], axis =1)\nX.drop('station',axis=1,inplace=True)\nY = df_md1['PM2.5']\nX = sm.add_constant(X)\nX_train , X_test, y_train,y_test = train_test_split( X, Y, test_size = 0.2)\nX_train.shape , X_test.shape, y_train.shape,y_test.shape\n","ba7ef468":"lin_reg_model2 = sm.OLS(y_train, X_train).fit()\nlin_reg_model2.summary()","e70c9386":"print(\"==============================================================\")\ny_train_predict = lin_reg_model2.predict(X_train)\ny_test_predict = lin_reg_model2.predict(X_test)\n\nmd3_rmse_train = round(np.sqrt(mean_squared_error(y_train, y_train_predict)), 4)\nprint(\"Root Mean Squared Error (RMSE) on training set: \", md3_rmse_train)\n\nmd3_rmse_test = round(np.sqrt(mean_squared_error(y_test, y_test_predict)), 4)\nprint(\"Root Mean Squared Error (RMSE) on testing set: \", md3_rmse_test)\nprint(\"==============================================================\")","35f2d79a":"summary_2=pd.DataFrame({'Model Name':['MLR AFTER EXCLUDING VARS WITH VIF>5'],\n                        'R Square':[lin_reg_model2.rsquared],'Adj R Square':[lin_reg_model2.rsquared_adj],\n                         'Prob (F-statistic)':[lin_reg_model2.f_pvalue],'Cn':[lin_reg_model2.condition_number],\n                       'Prob(JB)':[0.00],'D-W':[2.002], 'RMSE train':md3_rmse_train,'RMSE test':md3_rmse_test })\nsummary_2","715498dd":"model = Ridge()\ncv = RepeatedKFold(n_splits=3, n_repeats=3, random_state=3)\nreg_cv_score = cross_val_score(model, X,Y, cv=cv)\nreg_cv_mse = cross_val_score(model, X,Y, cv=cv,scoring='neg_mean_squared_error')\nR2 = np.mean(reg_cv_score)\nRMSE = np.sqrt(np.abs(np.mean(reg_cv_mse)))\n\nprint('R2 :',R2)\nprint('RMSE :',RMSE)","935be6a1":"cv_summary_3_0 = pd.DataFrame({'CV Name':['RIDGE REGRESSION'],'R-Square':[R2],'RMSE':[RMSE]})\ncv_summary_3_0","401e19b4":"model = Lasso()\ncv = RepeatedKFold(n_splits=3, n_repeats=3, random_state=3)\nreg_cv_score = cross_val_score(model, X,Y, cv=cv)\nreg_cv_mse = cross_val_score(model, X,Y, cv=cv,scoring='neg_mean_squared_error')\nR2= np.mean(reg_cv_score)\nRMSE = np.sqrt(np.abs(np.mean(reg_cv_mse)))\n\nprint('R2 :',R2)\nprint('RMSE :',RMSE)","f5cc1f48":"cv_summary_3_1 = pd.DataFrame({'CV Name':['LASSO REGRESSION'],'R-Square':[R2],'RMSE':[RMSE]})\ncv_summary_3_1","d44cd103":"model = LinearRegression()\ncv = RepeatedKFold(n_splits=3, n_repeats=3, random_state=3)\nreg_cv_score = cross_val_score(model, X,Y, cv=cv)\nreg_cv_mse = cross_val_score(model, X,Y, cv=cv,scoring='neg_mean_squared_error')\nR2 = np.mean(reg_cv_score)\nRMSE = np.sqrt(np.abs(np.mean(reg_cv_mse)))\nprint('R2 :',R2)\nprint('RMSE :',RMSE)","a9d48171":"cv_summary_3_2 = pd.DataFrame({'CV Name':['LINEAR REGRESSION'],'R-Square':[R2],'RMSE':[RMSE]})\ncv_summary_3_2","9c104c10":"cv_summary_3= pd.DataFrame()\n\ncv_summary_3 = cv_summary_3.append(cv_summary_3_0).append(cv_summary_3_1).append(cv_summary_3_2)\ncv_summary_3['Model Name'] = 'MLR MODEL AFTER EXCLUDING VARS WITH VIF'\ncv_summary_3 = cv_summary_3.set_index('Model Name')\ncv_summary_3","343dc41b":"# df = sm.add_constant(df)\n# X= df_md1.drop(['PM2.5','year'], axis=1)\nX = sm.add_constant(X)\n# Y =df_md1['PM2.5']\n\nX_train , X_test, y_train,y_test = train_test_split( X, Y, test_size = 0.2)\nprint(X_train.shape , X_test.shape, y_train.shape,y_test.shape)","69b94fdf":"ols_model_const=sm.OLS(y_train,X_train).fit()\nols_model_const_summary=ols_model_const.summary()\n\n#Model Summary\nols_model_const_summary","fe93bea9":"print(\"==============================================================\")\ny_train_predict = ols_model_const.predict(X_train)\ny_test_predict = ols_model_const.predict(X_test)\n\nmd4_rmse_train = round(np.sqrt(mean_squared_error(y_train, y_train_predict)), 4)\nprint(\"Root Mean Squared Error (RMSE) on training set: \", md4_rmse_train)\n\nmd4_rmse_test = round(np.sqrt(mean_squared_error(y_test, y_test_predict)), 4)\nprint(\"Root Mean Squared Error (RMSE) on testing set: \", md4_rmse_test)\nprint(\"==============================================================\")","bddba4f5":"summary_1=pd.DataFrame({'Model Name':['MLR WITH CONSTANT AND EXCLUDING YEAR'],\n                        'R Square':[ols_model_const.rsquared],'Adj R Square':[ols_model_const.rsquared_adj],\n                         'Prob (F-statistic)':[ols_model_const.f_pvalue],'Cn':[ols_model_const.condition_number],\n                        'Prob(JB)':[0.00],'D-W':[1.999],'RMSE train':md4_rmse_train,'RMSE test':md4_rmse_test})\nsummary_1","2163a460":"model = Ridge()\ncv = RepeatedKFold(n_splits=3, n_repeats=3, random_state=3)\nreg_cv_score = cross_val_score(model, X,Y, cv=cv)\nreg_cv_mse = cross_val_score(model, X,Y, cv=cv,scoring='neg_mean_squared_error')\nR2 = np.mean(reg_cv_score)\nRMSE = np.sqrt(np.abs(np.mean(reg_cv_mse)))\n\nprint('R2 :',R2)\nprint('RMSE :',RMSE)","4923fc6c":"cv_summary_4_0 = pd.DataFrame({'CV Name':['RIDGE REGRESSION'],'R-Square':[R2],'RMSE':[RMSE]})\ncv_summary_4_0","c1c57e19":"model = Lasso()\ncv = RepeatedKFold(n_splits=3, n_repeats=3, random_state=3)\nreg_cv_score = cross_val_score(model, X,Y, cv=cv)\nreg_cv_mse = cross_val_score(model, X,Y, cv=cv,scoring='neg_mean_squared_error')\n\nprint('R2 :',np.mean(reg_cv_score))\nprint('RMSE :',np.sqrt(np.abs(np.mean(reg_cv_mse))))","2d041c43":"cv_summary_4_1 = pd.DataFrame({'CV Name':['LASSO REGRESSION'],'R-Square':[R2],'RMSE':[RMSE]})\ncv_summary_4_1","4973a678":"model = LinearRegression()\ncv = RepeatedKFold(n_splits=3, n_repeats=3, random_state=3)\nreg_cv_score = cross_val_score(model, X,Y, cv=cv)\nreg_cv_mse = cross_val_score(model, X,Y, cv=cv,scoring='neg_mean_squared_error')\n\nprint('R2 :',np.mean(reg_cv_score))\nprint('RMSE :',np.sqrt(np.abs(np.mean(reg_cv_mse))))","506e8a72":"cv_summary_4_2 = pd.DataFrame({'CV Name':['LINEAR REGRESSION'],'R-Square':[R2],'RMSE':[RMSE]})\ncv_summary_4_2","f24b4c69":"cv_summary_4 = pd.DataFrame()\n\ncv_summary_4 = cv_summary_4.append(cv_summary_4_0).append(cv_summary_4_1).append(cv_summary_4_2)\ncv_summary_4['Model Name'] = 'MODEL WITH CONSTANT AND EXCLUDING YEAR'\ncv_summary_4 = cv_summary_4.set_index('Model Name')\ncv_summary_4","16b49575":"df_outlier.shape","6fae0e8a":"df_outlier.head(1)","f26c8c0e":"X = df_outlier.copy()\nX = sm.add_constant(X)\nY = df_outlier['PM2.5']\nX.drop(['PM2.5', 'PRES', 'TEMP', 'RAIN','NO2'], axis =1,inplace=True)\n\nX_train,X_test, y_train, y_test = train_test_split(X,Y, train_size=0.2)\n\nols_model_exout=sm.OLS(y_train, X_train).fit()\n# np.asarray(y_train)\nols_model_exout.summary()","84b528d1":"print(\"==============================================================\")\ny_train_predict = ols_model_exout.predict(X_train)\ny_test_predict = ols_model_exout.predict(X_test)\n\nmd5_rmse_train = round(np.sqrt(mean_squared_error(y_train, y_train_predict)), 4)\nprint(\"Root Mean Squared Error (RMSE) on training set: \", md4_rmse_train)\n\nmd5_rmse_test = round(np.sqrt(mean_squared_error(y_test, y_test_predict)), 4)\nprint(\"Root Mean Squared Error (RMSE) on testing set: \", md4_rmse_test)\nprint(\"==============================================================\")","21b68bf7":"model = Ridge()\ncv = RepeatedKFold(n_splits=3, n_repeats=3, random_state=3)\nreg_cv_score = cross_val_score(model, X,Y, cv=cv)\nreg_cv_mse = cross_val_score(model, X,Y, cv=cv,scoring='neg_mean_squared_error')\nR2 = np.mean(reg_cv_score)\nRMSE = np.sqrt(np.abs(np.mean(reg_cv_mse)))\nprint('R2 :',R2)\nprint('RMSE :',RMSE)","ee26d19a":"cv_summary_5_0 = pd.DataFrame({'CV Name':['RIDGE REGRESSION'],'R-Square':[R2],'RMSE':[RMSE]})\ncv_summary_5_0","a5b36c3e":"model = Lasso()\ncv = RepeatedKFold(n_splits=3, n_repeats=3, random_state=3)\nreg_cv_score = cross_val_score(model, X,Y, cv=cv)\nreg_cv_mse = cross_val_score(model, X,Y, cv=cv,scoring='neg_mean_squared_error')\nR2 = np.mean(reg_cv_score)\nRMSE = np.sqrt(np.abs(np.mean(reg_cv_mse)))\n\nprint('R2 :',R2)\nprint('RMSE :',RMSE)","51c9a786":"\ncv_summary_5_1 = pd.DataFrame({'CV Name':['LINEAR REGRESSION'],'R-Square':[R2],'RMSE':[RMSE]})\ncv_summary_5_1","a6add0c0":"model = LinearRegression()\ncv = RepeatedKFold(n_splits=3, n_repeats=3, random_state=3)\nreg_cv_score = cross_val_score(model, X,Y, cv=cv)\nreg_cv_mse = cross_val_score(model, X,Y, cv=cv,scoring='neg_mean_squared_error')\nR2 = np.mean(reg_cv_score)\nRMSE = np.sqrt(np.abs(np.mean(reg_cv_mse)))\nprint('R2 :',R2)\nprint('RMSE :',RMSE)\n","be1da3a5":"cv_summary_5_2 = pd.DataFrame({'CV Name':['LINEAR REGRESSION'],'R-Square':[R2],'RMSE':[RMSE]})\ncv_summary_5_2","2b4ebb55":"cv_summary_5 = pd.DataFrame()\n\ncv_summary_5 = cv_summary_5.append(cv_summary_5_0).append(cv_summary_5_1).append(cv_summary_5_2)\ncv_summary_5['Model Name'] = 'MODEL EXCLUDING OUTLIERS AND VARS W\/ HIGH VIF'\ncv_summary_5 = cv_summary_5.set_index('Model Name')\ncv_summary_5","6345d178":"model=ols_model_exout\nsummary_5=pd.DataFrame({'Model Name':['MODEL EXCLUDING OUTLIERS AND VARS W\/ HIGH VIF'],\n                        'R Square':[model.rsquared],'Adj R Square':[model.rsquared_adj],\n                         'Prob (F-statistic)':[model.f_pvalue],'Cn':[model.condition_number],\n                       'Prob(JB)':[0.00],'D-W':[2.006], 'RMSE train':md5_rmse_train,'RMSE test':md5_rmse_test})\nsummary_5","fe105639":"summary_df=pd.DataFrame()\n\nsummary_df=summary_df.append(summary_1).append(summary_2).append(summary_3).append(summary_4).append(summary_5)\n\nsummary_df","5932280d":"summary_df_cv=pd.DataFrame()\n\nsummary_df_cv=summary_df_cv.append(cv_summary_1).append(cv_summary_2).append(cv_summary_3).append(cv_summary_4).append(cv_summary_5)\n\nsummary_df_cv","ea4a5131":"**Interpretation:** The R-squared value obtained from this model is 0.635 which means that the above model explains 63.5% of the variation in the PM2.5 \n\n\n\nThe condition number is: 6710, which reduced from 3.31e+05 from the previous model.","5072c1fa":"**Interpretation:** From the above plots, we notice that all the variables have points above the upper extreme or below the lower extreme - these points are outliers in the data. However, the exact location of these points is not precisely seen.","d2893b62":"### Outlier Analyis for individual features.","891d0a11":"#### SUMMARY:  ","cd53f3a8":"### Build OLS - Model for anlaysis","b6875710":"##### LINEAR REGRESSION ","1dc4fa3f":"=======================================================================<br\/>\n**1. No:** \t\tRow number                              <br\/>\n**2. year:** \tYear of data in this row                <br\/>\n**3. month:** \tMonth of data in this row               <br\/>\n**4. day:** \tDay of data in this row                 <br\/>\n**5. hour:** \tHour of data in this row                <br\/>\n**6. PM2.5:** \tPM2.5 concentration (ug\/m^3)            <br\/>\n**7. PM10:** \tPM10 concentration (ug\/m^3)             <br\/>\n**8. SO2:** \tSO2 concentration (ug\/m^3)              <br\/>\n**9. NO2:** \tNO2 concentration (ug\/m^3)              <br\/>\n**10. CO:** \tCO concentration (ug\/m^3)           \t<br\/>\n**11. O3:** \tO3 concentration (ug\/m^3)           \t<br\/>\n**12. TEMP:** \tTemperature (degree Celsius)            <br\/>\n**13. PRES:** \tPressure (hPa)                          <br\/>\n**14. DEWP:** \tDew point temperature (degree Celsius)  <br\/>\n**15. RAIN:** \tPrecipitation (mm)                      <br\/>\n**16. wd:** \t\tWind direction                      <br\/>\n**17. WSPM:** \tWind speed (m\/s)                        <br\/>\n**18. station:**\tName of the air-quality monitoring site <br\/>\n\n==========================================================================","c82bc3ea":"##### LINEAR REGRESSION","b80bf389":"#### MLR MODEL AFTER EXCLUDING VARS WITH VIF: ","de22247f":"**Interpretation:** The R-squared value obtained from this model is 0.636 which means that the above model explains 63.6% of the variation in PM2.5. \n\n\nThe condition number is , 6730 as high VIF vars have been excluded","460f2d40":"**Interpretation:** <br\/>\n\nFrom the above plots:<br\/>\nThe day of busines end hours (9:00 AM to 7:00 PM) we can easily find the Polutant gases contributing more to PM2.5","457b8e45":"<a id=\"Model Building and Analysis\"><\/a>\n### Model Building and Analysis","4d074fcd":"<a id='quantitative'><\/a>\n### <span style=\"font-family: Arial; font-weight:bold;font-size:1em;color:black;\"> Quantitative Variable:Numerical Data Details","224d89bc":"## Exploring Air Pollutants in Beijing\n#### Context\nPM2.5 readings are often included in air quality reports from environmental authorities and companies. PM2.5 refers to atmospheric particulate matter (PM) that have a diameter less than 2.5 micrometers. In other words, it's used as a measure of pollution.\n\n#### Content\nThis data set includes  air pollutants data from 12 nationally-controlled air-quality monitoring sites. The air-quality data are from the Beijing Municipal Environmental Monitoring Center. The meteorological data in each air-quality site are matched with the nearest weather station from the China Meteorological Administration. <br\/>\nThe time period is from March 1st, 2013 to February 28th, 2017.\n\n#### Acknowledgements\nZhang, S., Guo, B., Dong, A., He, J., Xu, Z. and Chen, S.X. (2017) Cautionary Tales on Air-Quality Improvement in Beijing. Proceedings of the Royal Society A, Volume 473, No. 2205, Pages 20170457.\n\nThe files were downloaded from the UCI Machine Learning Repository and have not been modified.<br\/>\nhttps:\/\/archive.ics.uci.edu\/ml\/datasets\/Beijing+Multi-Site+Air-Quality+Data","fff55da3":"#### MODEL -5: MODEL AFTER OUTLIER TREATING ANALYSIS","040e7b35":"### Yearly Analysis of Pollutants for each Station","b7bd6c5d":"#### Residual skewness reduced from 1.64 to -0.54","60291a56":"#### CROSS VALIDATION SUMMARY for MLR MODEL AFTER TRNSAFORM OF Y","7b0d1eb9":"##### LINEAR REGRESSION","bb90e3ec":"As per the assumptions of linear regression, residuals should be normally distributed. If the target variable is normally distributed then the residuals are also normally distributed, thus we check the normality only for the target variable.","3e5839c7":"**Interpretation:** The R-squared value obtained from this model is 0.639 which means that the above model explains 63.9% of the variation in PM2.5 \n\n\nThe condition number is large, 3.31e+05. This might indicate that there are strong multicollinearity ","797ca97a":"##### LASSO REGRESSION","45a1a944":"### Analysis of Pollutants in day of the week","8f77857a":"### MODEL SUMMARY:","d8d8b343":"<a id='NO2'><\/a>\n##### <b style=\"color:black\">NO2 Outlier Analysis<\/b>","0f3ba724":"#####  RMSE: MLR MODEL AFTER TRANSFORM","4830a7e8":"### OVER ALL MODEL SUMMARY:","fcde3d26":"<table align=\"right\" width=100%>\n    <tr><b>Date:18\/09\/2021<\/b>\n        <td width=\"25%\">\n            <img src=\"https:\/\/th.bing.com\/th\/id\/OIP.1lf7rizd_C5U1_ieDXAF2gHaEO?w=319&h=181&c=7&r=0&o=5&dpr=1.1&pid=1.7\">\n        <\/td>\n        <td>\n            <div align=\"center\">\n                <font color=\"#21618C\" size=5px>\n                  <b>Beijing Multisite Air Quality Machine Learing Model's<\/b>\n                <\/font>\n            <\/div>\n        <\/td>  \n    <\/tr>\n<\/table>","795149f3":"##### RIDGE REGRESSION","13b0163c":"### Analysis of Pollutants month wise wrt to station","a3a4b906":"## DATA LOADING","451572bd":"<a id='qualitative'><\/a>\n## <span style=\"font-family: Arial; font-weight:bold;font-size:1em;color:black;\">Qualitative Variable:Categorical Data Details","0a790de7":"#### CROSS VALIDATION SUMMARY FOR MODEL WITH CONSTANT AND EXCLUDING YEAR","776bcf23":"<a id='data-cleaning'><\/a>\n### <span style=\"font-family: Arial; font-weight:bold;font-size:1em;color:black;\">Data Cleaning:","2ae6921e":"<a id='O3'><\/a>\n##### <b style=\"color:black\">O3 Outlier Analysis<\/b>","c8957f7f":"##### LASSO REGRESSION","da8557c7":"#### MLR-MODEL SUMMARY: ","892ddb0c":"### Hourly Analysis of Pollutants in 2017","8c4e6e48":"<a id='CO'><\/a>\n##### <b style=\"color:black\">CO Outlier Analysis<\/b>","2cb21be0":"##### LINEAR REGRESSION","7cf88f98":"##### LASSO REGRESSION","c35eda39":"### Problem Statement:\n\nThe pollutant that affects people the most is particulate matter, usually abbreviated as PM and used as a measure of air pollution. Although particles with a diameter of 10 microns or less (\u2264PM10) can penetrate and embed deep in the lungs, the ones that are more harmful to health are those with a diameter of 2.5 microns or less (\u2264PM2.5).\n\nThe predictive model is comprised of major components By reading its Particulate Matter(PM2.5) percentage using linear regression-based.","9abc1568":"## CROSS VALIDATION: \n\nNOTE: Ran with 3 Times 3 Fold using Cross Value Score and Data used is without Outliers ","0c4a56bf":"#### MODEL-1 : MLR MODEL","d2785b73":"<a id=\"vif\"><\/a>\n### VARIANCE  INFLATION FACTOR (VIF)","ee5bb0c1":"**Interpretation:** From the above plots, we notice that all the variables have points above the upper extreme or below the lower extreme - these points are outliers in the data. However, the exact location of these points is not precisely seen.\nSO2, NO2, CO , PM2.5, O3 are having the extreme outliers","e6aa9e9b":"### Indivdual Feature Analysis using Box Plot after Outlier Treating with IQR:","5535f9c9":"<a id=\"types\"><\/a>\n#### Types of Transformations ##### Split the data into training and test sets.","279dd664":"<a id='iqr'><\/a>\n### <b style=\"color:black\">Outliers Treating with IQR<\/b>","a48e7af7":"**Build the multiple linear regression model using the OLS method after transforming the target variable.**\n#### MODEL -2: TARGET VARIABLE TRANSFORMATION","96223a67":"**Interpretation:** <br\/>\n\nFrom the above plots:<br\/>\nBy the end of 2017 fine particulate pollution (PM2. 5) fell by 35% and by 25% in the surrounding Beijing-Tianjin-Hebei region. Much of this reduction came from measures to control coal-fired boilers, provide cleaner domestic fuels, and industrial restructuring\nhttps:\/\/www.ccacoalition.org\/en\/news\/beijing%E2%80%99s-air-quality-improvements-are-model-other-cities#:~:text=By%20the%20end%20of%202017,domestic%20fuels%2C%20and%20industrial%20restructuring.","7cee9cbc":"**Interpretation:** The R-squared value obtained from this model is 0.676 which means that the above model explains 67.6% of the variation in PM2.5 \n\n**`Durbin-Watson`:** Test is used to check the autocorrelation between the residuals.\n\n    If the Durbin-Watson test statistic is near to 2: no autocorrelation<br>\n    If the Durbin-Watson test statistic is between 0 and 2: positive autocorrelation <br>\n    If the Durbin-Watson test statistic is between 2 and 4: negative autocorrelation\n\nThe test statistic of Model summary is close to 2 (= 1.998) which means there is no autocorrelation.\n\n**`Jarque-Bera`:** Test is used to check the normality of the residuals.<br\/>\n\n    Here, the p-value of the test is less than 0.05; <br\/>\n    Implies the residuals are not normally distributed.\n\n**`Condition Number (CN)`:** The `Condition Number (CN)` is used to check the multicollinearity. \n\n    If CN < 100: no multicollinearity<br>\n    If CN is between 100 and 1000: moderate multicollinearity<br>\n    If CN > 1000: severe multicollinearity\n\nThe condition number is large, 3.30e+05. This indicates that there is strong multicollinearity","05e4e2e3":"#### CROSS VALIDATION FOR MODEL AFTER OUTLIER TREATING ANALYSIS","488d67e1":"### Check the Normality of residuals After Transforming the Target Variable","93084127":"**Interpretation:** There are no zero standard devition of given data set","fec9fc5e":"We can see that the distribution of the residuals is positively skewed. We can apply a log transformation to the target variable.<br\/>\n\n##### Interpretation of coefficient of skewness<br\/>\n 1.6449 > 0 implies positive skewnesss<br\/>","e9d4be0c":"### Conclusion: \n\nModel considers PM2.5 as the target variable. Analysis based on the dependence of PM2.5 on the meteorological variables without considering the atmospheric chemical reaction that generates PM2.5.\n\nAfter running multiple models we can conclude that the Linear Regression model excluding the vars with high VIF provide the best fit for the data","ee52b488":"#### Outlier Analysis for Target Variable i.e. PM2.5","bab1bb99":"### Box Plot after Outlier Treating with IQR: ","42c610a1":"<table align=\"right\" width=100%>\n    <tr><b>\n        <td>\n            <div align=\"center\">\n                <font color=\"#21618C\" size=5px>\n                  <b>THANK'S ALL<\/b>\n                <\/font>\n            <\/div>\n        <\/td>  \n    <\/tr>\n<\/table>","987cb7f1":"We can see that the distribution of the residuals is negatively skewed.<br\/>\n\n##### Interpretation of coefficient of skewness<br\/>\n -0.0.54987 < 0 implies Negative skewnesss<br\/>\n \n ","ff1dc994":"<a id=\"normality\"><\/a>\n### Tests for Normality","0fcea236":"### Check Standard Deviation is Zero, if any remove from the analysis","3bac438e":"<a id=\"vif\"><\/a>\n#### MODEL -3: MODEL AFTE RPERFORMING  VARIANCE INFLATION FACTOR (VIF)","af991988":"#### MLR-MODEL CROSS VALIDATION SUMMARY: ","0a8cb7bd":"##### LASSO REGRESSION","b6db6d84":"##### LASSO REGRESSION","5a011253":"**Interpretation:** The R-squared value obtained from this model is 0.584 which means that the above model explains 58.4% of the variation in PM2.5 \n\nThe condition number is 5020 hence there is some Mc in the model","1a77e9fe":"#####  MLR MODEL RMSE: ROOT MEAN SQUARE","9292db35":"#### RMSE: MODEL WITH CONST AND EXCLUDING YEAR","30aed336":"**Interpretation on QQ-Plot**<br\/>\n\nThe diagonal line (red line) is the regression line and the blue points are the cumulative distribution of the residuals. <br\/>\nAs some of the points are close to the diagonal line, we conclude that the residuals do not follow a `normal distribution`.<br\/>\nHere we can see that the residuals are not normally distributed. The value of skewness is 1.6661.<br\/>\n    \nWe will go for log transform on the target variable and see if skewness reduces.","99cd8480":"**Interpretation:** From the above test we can see that the p-value is 0.0 (less than 0.05), thus we can say that the residuals are not normally distributed.","9c0e1dfd":"#### CROSS VALIATION FOR MLR MODEL AFTER EXCLUDING VARS WITH VIF:","7f96de16":"<a id='SO2'><\/a>\n##### <b style=\"color:black\">SO2 Outlier Analysis<\/b>","7b09b970":"##### Interpretation of Target variable PM2.5 skewness<br\/>\n 2.0479 > 0 implies positive skewnesss<br\/>\n **Target Variable is Poistively Skewed**","a289d79d":"##### RMSE: MODEL AFTER VIF","38f686e4":"**Interpretation:** <br\/>\n\nFrom the above plots:<br\/>\nDuring week days Co, NO2, SO2 Polutant gases contributing more to PM2.5","fe0f0e8b":"The Shapiro Wilk test is used to check the normality of the residuals. The test hypothesis is given as:<br>\n\n<p style='text-indent:25em'> <strong> H<sub>o<\/sub>:  Residuals are normally distributed <\/strong> <\/p>\n<p style='text-indent:25em'> <strong> H<sub>1<\/sub>:  Residuals are not normally distributed <\/strong> <\/p>","b7f444a1":"#### RIDGE REGRESSION","82807483":"### The process followed is highlighted below:\n\n**1. Data Cleaning** - Noise detection and removal<br\/>\n**2. Subjective analysis** - Using our intuition to evaluate a data variable\/feature and \n        decide whether a variable influences the popularity of the article or not.<br\/>\n**3. Quantitative Analysis** - How correct is our intuition? \n      Here we carry our several analysis to accept or debunk our initial hypothesis<br\/>\n**4. Normal Distribuiton Observation on the dataset**<br\/>\n**5. Feature Selection and Evaluation**<br\/>\n**6. Machine Learning Classification**<br\/>\n**7. Summary and Conclusion**<br\/>","f707d108":"<a id=\"SWT\"><\/a>\n### Shapiro Wilk Test","038340ae":"#### RMSE: MODEL WITH CONSTANT AND EXCLUDING YEAR","7e04bd86":"**Interpretation:** From the above plots, we notice that all the variables have points above the upper extreme or below the lower extreme - these points are outliers in the data. However, the exact location of these points is not precisely seen.\n\nAfter performing the Outlier analysis and Treated with Upper and lower extremes point we observed CO gas got lesser extrem points, which is higly correlated to increases the PM 2.5","7ef80572":"<table width=100%>\n    <tr>\n        <td>\n            <div align=\"left\">\n                <font size=4px>\n                    <b> <h3>Imputing Missing Values<\/h3><\/b>\n                <\/font>\n            <\/div>\n        <\/td>\n        <td width=\"20%\">\n            <div align=\"rigth\">\n            <img src=\"https:\/\/th.bing.com\/th\/id\/OIP.bgivqnU_a21HC0KMmWbMmQHaF7?pid=ImgDet&rs=1\">\n            <\/div\n        <\/td><br\/>\n  \n<\/table>","45d7fd55":"#### Interpretation: Relatively high correlation seen among CO, NO2, SO2 and PM2.5 and also between O3 and temp.\n\n##### #Correlation Score#\n1. NO2 &  PM2.5 :-> 0.658\n2. Multi-Collinearity Feature:: NO2 &  CO :-> 0.6869\n3. Multi-Collinearity Feature:: CO &  PM2.5 :-> 0.7672\n4. Multi-Collinearity Feature:: CO &  SO2 :-> 0.5235\n5. Multi-Collinearity Feature:: CO &  NO2 :-> 0.6869\n6. Multi-Collinearity Feature:: TEMP &  O3 :-> 0.5858\n7. Multi-Collinearity Feature:: TEMP &  DEWP :-> 0.8201\n\n\n**Subsequent models might have high Multicolinearity behavior**","b62ae4fb":"##### RIDGE REGRESSION","2874ba1a":"<a id='Exploratory Analysis of Data'><\/a>\n### <span style=\"font-family: Arial; font-weight:bold;font-size:1em;color:black;\">Exploratory Analysis of Data","793d044a":"### Correlation between features and ploting Heat map:","63adf5d0":"<a id='PM2.5'><\/a>\n##### <b style=\"color:black\">PM2.5 Target variable Outlier Analysis wrt station<\/b>","dc71ac45":"<a id='outlier_station'><\/a>\n### <b style=\"color:black\">Outlier Analyis for Different types of Pollutant Gas With respect to Station<\/b>","519bee70":"#### DATA SET DETAILS:","f89ea35f":"##### RIDGE REGRESSION","27734733":"#### MODEL -4: MODEL WITH CONSTANT AND EXCLUDING YEAR","67aff060":"<a id=\"outlier\"><\/a>\n#### Outlier Analysis and Treatment for all features","f0e2f2d8":"#### MLR MODEL AFTER TRNSAFORM OF Y SUMMARY: ","7e6e0cec":"### References\n\nhttps:\/\/www.researchgate.net\/publication\/323012727_Air_Quality_Prediction_Big_Data_and_Machine_Learning_Approaches\n\nhttps:\/\/royalsocietypublishing.org\/doi\/full\/10.1098\/rspa.2015.0257#d3e5459\n    \nhttps:\/\/www.iqair.com\/china\/beijing","81bc78c3":"<a id='summary_stats'><\/a>\n## <span style=\"font-family: Arial; font-weight:bold;font-size:1em;color:black;\">   Summary Statistics"}}