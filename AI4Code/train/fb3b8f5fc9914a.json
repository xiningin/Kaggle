{"cell_type":{"1cbdb2d0":"code","1e3b6fa3":"code","bcf49564":"code","b9cfd8ad":"code","50a42f7b":"code","e54732ce":"code","f2ee9059":"code","8c955d41":"code","af398b26":"code","3ab8b4a9":"code","a951d3a3":"code","6be9cc96":"code","5ebe4621":"code","66a76026":"code","48334e1b":"code","c13e8410":"code","79a604b6":"code","88cffab2":"code","9ddb821b":"code","aee48884":"code","abd088eb":"code","3abc77aa":"code","2352e25d":"code","febb994d":"code","be420ca3":"code","c4e7c6b7":"code","71cf5645":"code","c180d20b":"code","c389a0e8":"code","82aa7970":"code","9859d499":"code","95a74dec":"code","322090c2":"code","4927241e":"code","13d25d6f":"code","2773b566":"code","dcc44571":"code","7ef9bf48":"code","6c4e2233":"code","929ab151":"markdown","104e2650":"markdown","6fba45a0":"markdown","54c11611":"markdown","1eaffa7b":"markdown","e8e6bae5":"markdown","98142f33":"markdown","281a6f34":"markdown","cdfdaee8":"markdown","fe09bd8e":"markdown","95c4b7f8":"markdown","b9420a96":"markdown","54efa351":"markdown","dd614d0b":"markdown","bc243595":"markdown"},"source":{"1cbdb2d0":"#Importing our packages\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\nimport plotly.express as px\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","1e3b6fa3":"#Reading our datasets\n\ncharacters = pd.read_csv('\/kaggle\/input\/characters.csv')\ntires = pd.read_csv('\/kaggle\/input\/tires.csv')\nbodies = pd.read_csv('\/kaggle\/input\/bodies.csv')\ngliders = pd.read_csv('\/kaggle\/input\/gliders.csv')\n\n#Inspecting\ncharacters.head()","bcf49564":"tires.head()","b9cfd8ad":"bodies.head()","50a42f7b":"gliders.head()","e54732ce":"characters[characters['Speed'] != characters['Speed (Air)']]\n#characters[characters['Speed'] != characters['Speed (Water)']]   ----\n#characters[characters['Speed'] != characters['Speed (Ground)']]  ---- These lines generated the same results ","f2ee9059":"tires[tires['Speed'] != tires['Speed (Air)']]","8c955d41":"tires[tires['Speed'] != tires['Speed (Water)']]","af398b26":"tires[tires['Speed'] != tires['Speed (Ground)']]","3ab8b4a9":"def new_speed(row):\n    return row['Speed'] * 0.75 + row['Speed (Water)'] * 0.1 + row['Speed (Air)'] * 0.05 + row['Speed (Ground)'] * 0.1\n\ncharacters['new_speed'] = characters.apply(new_speed, axis=1)\ncharacters.drop(['Speed', 'Speed (Water)', 'Speed (Air)', 'Speed (Ground)'], axis=1, inplace=True)\n\ncharacters.head()","a951d3a3":"#Now let's do similar to the Handling factor:\ndef new_handling (row):\n    return row['Handling'] * 0.75 + row['Handling (Water)'] * 0.1 + row['Handling (Air)'] * 0.05 + row['Handling(Ground)'] * 0.1\n\ncharacters['new_handling'] = characters.apply(new_handling, axis=1)\ncharacters.drop(['Handling', 'Handling (Water)', 'Handling (Air)', 'Handling(Ground)'], axis=1, inplace=True)\n\ncharacters.head()","6be9cc96":"#fig = go.Figure(data=go.Heatmap(\n#                   z=characters.groupby('Class').mean().values,\n#                   x=characters.groupby('Class').mean().columns,\n#                   y=characters.groupby('Class').mean().index,\n#                   colorscale='Viridis'\n#))\n#\n#fig.show()\n\n# --- Just left this scrap here because it could be useful another time","5ebe4621":"# Evaluating the characters by class:\n\nplt.figure(figsize=(17,7))\nsns.set(font_scale=1.4)\nsns.heatmap(characters.groupby('Class').mean(),\n           linewidths=1,\n           annot=True,\n           fmt=\".1f\",\n           cmap='viridis')\nplt.title('Heatmap of Classes')","66a76026":"#how speed, acceleration and the class are distribuited?\nfig = px.scatter(characters, x=\"new_speed\", y=\"Acceleration\", color=\"Class\",hover_data=['Character'], size='Mini Turbo')\nfig.show()","48334e1b":"# Who are the five best of each factor?\n\nfactors = ['Acceleration', 'Weight', 'Traction', 'Mini Turbo', 'new_speed', 'new_handling']\nfor factor in factors:\n    print('')\n    print('Factor: {}'.format(factor))\n    print('')\n    print(characters.sort_values(by=[factor], ascending=False).head()['Character'])\n","c13e8410":"def effectiveness(row):\n    return row['new_speed'] * 0.3 + row['new_handling'] * 0.1 + row['Mini Turbo'] * 0.3 + row['Traction'] * 0.1 + row['Acceleration'] * 0.2\n\ncharacters['effectiveness'] = characters.apply(effectiveness, axis=1)\n\ncharacters.head()","79a604b6":"characters.sort_values(by=['effectiveness'], ascending=False)","88cffab2":"characters = pd.read_csv('\/kaggle\/input\/characters.csv')\n\ncharacters.drop_duplicates(['Class', 'Speed', 'Speed (Water)', 'Speed (Air)',\n       'Speed (Ground)', 'Acceleration', 'Weight', 'Handling',\n       'Handling (Water)', 'Handling (Air)', 'Handling(Ground)', 'Traction',\n       'Mini Turbo'])","9ddb821b":"#Okay, let's think in a name for these runners\nnames =['Babies', 'Toad & Friends', 'Peach\/Daisy\/Yoshi', \"Marios\", 'DK\/Rosa\/Waluig', 'Metal\/Gold', 'Heavy Heavies']\n\ncharacters = characters.drop_duplicates(['Class', 'Speed', 'Speed (Water)', 'Speed (Air)',\n       'Speed (Ground)', 'Acceleration', 'Weight', 'Handling',\n       'Handling (Water)', 'Handling (Air)', 'Handling(Ground)', 'Traction',\n       'Mini Turbo'])\ncharacters['Character'] = names\ncharacters","aee48884":"#Now let's do the same for the components\n\ngliders.drop_duplicates(['Type', 'Speed', 'Speed (Water)', 'Speed (Air)',\n       'Speed (Ground)', 'Acceleration', 'Weight', 'Handling',\n       'Handling (Water)', 'Handling (Air)', 'Handling(Ground)', 'Traction',\n       'Mini Turbo'], inplace=True)\ngliders.drop('Body', axis=1, inplace=True)\ngliders \n#Only two actual changes here...","abd088eb":"tires.drop_duplicates(['Speed', 'Speed (Water)', 'Speed (Air)',\n       'Speed (Ground)', 'Acceleration', 'Weight', 'Handling',\n       'Handling (Water)', 'Handling (Air)', 'Handling(Ground)', 'Traction',\n       'Mini Turbo'], inplace=True)\ntires\n#7 here...","3abc77aa":"bodies.drop_duplicates(['Speed', 'Acceleration', 'Weight', 'Handling',\n       'Traction', 'Mini Turbo'], inplace=True)\nbodies\n#18 here...","2352e25d":"cols = ['Speed', 'Speed (Water)', 'Speed (Air)', 'Speed (Ground)',\n       'Acceleration', 'Weight', 'Handling', 'Handling (Water)',\n       'Handling (Air)', 'Handling(Ground)', 'Traction', 'Mini Turbo']\n\ndf_fim = pd.DataFrame()\nfor index, row in gliders.iterrows():\n    df_temp = characters.copy()\n    df_temp['gliders'] = row['Type']\n    for col in cols:\n        df_temp[col] = df_temp[col] + row[col]\n    df_fim = df_fim.append(df_temp)    \n","febb994d":"aux = df_fim.copy()\ndf_fim = pd.DataFrame()\nfor index, row in tires.iterrows():\n    df_temp = aux.copy()\n    df_temp['tires'] = row['Body']\n    for col in cols:\n        df_temp[col] = df_temp[col] + row[col]\n    df_fim = df_fim.append(df_temp)   ","be420ca3":"cols = ['Speed', 'Acceleration', 'Weight', 'Handling', 'Traction', 'Mini Turbo']\naux = df_fim.copy()\ndf_fim = pd.DataFrame()\nfor index, row in bodies.iterrows():\n    df_temp = aux.copy()\n    df_temp['Vehicle'] = row['Vehicle']\n    for col in cols:\n        df_temp[col] = df_temp[col] + row[col]\n    df_fim = df_fim.append(df_temp)   ","c4e7c6b7":"df_fim.head(10)","71cf5645":"len(df_fim)","c180d20b":"df_fim['new_speed'] = df_fim.apply(new_speed, axis=1)\ndf_fim.drop(['Speed', 'Speed (Water)', 'Speed (Air)', 'Speed (Ground)'], axis=1, inplace=True)\n\ndf_fim['new_handling'] = df_fim.apply(new_handling, axis=1)\ndf_fim.drop(['Handling', 'Handling (Water)', 'Handling (Air)', 'Handling(Ground)'], axis=1, inplace=True)\n\ndf_fim['effectiveness'] = df_fim.apply(effectiveness, axis=1)","c389a0e8":"df_fim.describe()","82aa7970":"plt.figure(figsize=(17,7))\nsns.boxplot(x=\"Character\", y=\"effectiveness\", data=df_fim, palette=\"Set3\")\nplt.title('Effectiveness by Characters')","9859d499":"sns.pairplot(df_fim, hue=\"Character\")","95a74dec":"plt.figure(figsize=(17,7))\nsns.violinplot(x=\"tires\", y=\"new_handling\", data=df_fim)\nplt.title('Tires by handling')","322090c2":"plt.figure(figsize=(17,7))\nsns.boxplot(x=\"Character\", y=\"new_speed\", hue=\"gliders\", data=df_fim)\nplt.title('new_speed and gliders by Character')","4927241e":"plt.figure(figsize=(17,7))\nsns.violinplot(x=\"Character\", y=\"new_handling\", hue=\"gliders\", data=df_fim)\nplt.title('new_handling and gliders by Character')","13d25d6f":"plt.figure(figsize=(17,7))\nsns.set(font_scale=1.4)\nsns.heatmap(df_fim.corr(),\n           linewidths=1,\n           annot=True,\n           fmt=\".1f\")\nplt.title('Correlation heatmap')","2773b566":"#TOP 10\ndf_fim.sort_values(by=['effectiveness'], ascending=False).head(10)","dcc44571":"# BOT 10\ndf_fim.sort_values(by=['effectiveness'], ascending=False).tail(10)","7ef9bf48":"fig = px.scatter(df_fim, x=\"new_speed\", y=\"Acceleration\", color=\"Class\",hover_data=['Character', 'tires', 'Vehicle'], size='new_handling')\nfig.show()","6c4e2233":"fig = px.scatter(df_fim, x=\"effectiveness\", y=\"Mini Turbo\", color=\"Class\",hover_data=['Character', 'tires', 'Vehicle'], size='new_handling')\nfig.show()","929ab151":"## Hello and welcome everybody! :D\n\n## Today, we'll explore the Mario Kart Datasets: \n* Karts, \n* Characters\n* Tires\n* Gliders\n\n## Here you can learn a little bit of data manipulation, working with pandas, EDA (Exploratory Data Analysis) and, finally, answer the question:\n\n# What is the best kart combination for a determined playstyle?\n\n![fig](http:\/\/s2.glbimg.com\/J0c0C48qmT7IIlKhlgI6QBIO7eY=\/695x0\/s.glbimg.com\/po\/tt2\/f\/original\/2017\/03\/10\/000303.jpg)","104e2650":"There is a direct inverse-relation between speed and acceleration (only Pink gold Peach and Metal Mario aren't part of this rule, because of reasons, hehehe)\n\nOther interesting fact,\n# Even with all 28 characters, we are only choosing between 7 groups of stats values\n\n(I choose luigi anyway 'cause he looks badass)","6fba45a0":"# We have 1764 possible combinations. O.o\n\nBut we still wanna summarize everything. Let's apply our 3 functions (for speed, handling and effectiveness)","54c11611":"**My favorite kart performed so badly! :(**\n\nThink I should change some parameters, hehe\n\n**Here we can visualize again the 7 groups of characters.\n**\n\nLet's aggregate them to make more easy the next steps, but first, let's reload the original datasets, because we will need them to do all the possible combinations","1eaffa7b":"# Here's the hard part: Combine all datasets \n\n**(I would love to receive some tips of how to perform this)**","e8e6bae5":"#### To conclude: an interactive plot of Speed, handling and Acceleration | effectiveness x Turbo","98142f33":"too much to read... \n\n# We want some value that summarize the overall effectiveness of the kart.\n\n**This time I'll use my 'just for fun' gameplay in Mario Kart to assign the following weights:**\n\n* new_speed      = 0.3\n* new_handling\t = 0.1\n* Mini Turbo\t = 0.3\n* Traction       = 0.1\n* Acceleration   = 0.2\n\n**Ps.: As you can see, I really like using Mini Turbos... But feel free to commit and change this values according to your playstyle **","281a6f34":"Well, as expected, Light have better handling and acceleration, while Heavy wins in speed. Medium are medium, hehehe","cdfdaee8":"# And, finally, lets see (according to my parameters), which one are the best and worst karts combinations**","fe09bd8e":"- only 5 cars have different speeds ^^","95c4b7f8":"**Ok, so with tires we have more issues**\n\nUnfortunately, I don't know the exact distribution ratio of terrain types per track, so I will arbitrarily assign the following values:\n\n* Speed          = 0.75\n* Speed (Water)\t = 0.1\n* Speed (Air)\t = 0.05\n* Speed (Ground) = 0.1\n","b9420a96":"**Looks like my Luigi isn't the best choice for me...**\n\n**That's explain why I lose every time. hehehe**\n\n# Thanks for reading, and plis, upvote if you liked! :D\n\n![luigi](https:\/\/images-wixmp-ed30a86b8c4ca887773594c2.wixmp.com\/f\/d739185e-99c8-4a81-a984-46e93d545928\/ddbjpwg-1a6257e9-d8ce-42e4-a4f5-eccd3c8d1d27.png\/v1\/fill\/w_774,h_1032,strp\/luigi___full_body_artwork_by_bluetyphoon17_ddbjpwg-pre.png?token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1cm46YXBwOjdlMGQxODg5ODIyNjQzNzNhNWYwZDQxNWVhMGQyNmUwIiwiaXNzIjoidXJuOmFwcDo3ZTBkMTg4OTgyMjY0MzczYTVmMGQ0MTVlYTBkMjZlMCIsIm9iaiI6W1t7ImhlaWdodCI6Ijw9NDAzMiIsInBhdGgiOiJcL2ZcL2Q3MzkxODVlLTk5YzgtNGE4MS1hOTg0LTQ2ZTkzZDU0NTkyOFwvZGRianB3Zy0xYTYyNTdlOS1kOGNlLTQyZTQtYTRmNS1lY2NkM2M4ZDFkMjcucG5nIiwid2lkdGgiOiI8PTMwMjQifV1dLCJhdWQiOlsidXJuOnNlcnZpY2U6aW1hZ2Uub3BlcmF0aW9ucyJdfQ.m1GeCU2NKd29r9DXCxs5RN4HMHu1iDOcVnUTxCxrEcU)[](http:\/\/)","54efa351":"Ok, now we have our datasets more simple\n\n# Before we start doing some combinations of cars, tires and everything else, let's evaluate only the characters:","dd614d0b":"Since we have different speeds for different terrains, my first idea was to summarize them by the mean function but I thought that this wouldn't be fair, after all, there are much more 'normal ground' than water ou air. \n#### Let's investigate this behavior of different speeds","bc243595":"# Now the EDA that we all love"}}