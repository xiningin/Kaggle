{"cell_type":{"09e88b84":"code","81e6f1e0":"code","278ff7e9":"code","6da76cc9":"code","53f305cf":"code","ba6d38cd":"code","de25ddf4":"code","a0d9390c":"code","186cfdf9":"code","5a112834":"code","6ccba144":"code","30382e14":"code","ca6d8568":"code","3c92b270":"code","67b5a08b":"code","5fd3793f":"code","33078992":"code","5d5bfdb3":"code","18abbc45":"code","ff3efb16":"code","c164fd28":"code","efa8aedd":"code","7adb68b6":"code","442de733":"code","1d86f0cd":"code","a5a2549d":"code","1efdecad":"markdown","b5a261da":"markdown","4426e9fa":"markdown","e2f7bdc4":"markdown","0e182e49":"markdown","0aec2837":"markdown"},"source":{"09e88b84":"# Verileri okumak, analiz etmek ve g\u00f6rselle\u015ftirmek i\u00e7in gerekli t\u00fcm k\u00fct\u00fcphaneleri import ediyoruz.\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom tensorflow import keras\n\nimport os\nimport random\nimport cv2\nfrom tqdm import tqdm","81e6f1e0":"#Omphalotus olearius e ait resimlerde y\u00fckleme hatas\u0131 oldu\u011fu i\u00e7in onu eklemedim.\nlabels = ['Amanita bisporigera', 'Amanita muscaria','Cantharellus', 'Boletus edulis','Russula mariae']\nIMG_SIZE = 124","278ff7e9":"# Klas\u00f6rlerin i\u00e7inde yer alan t\u00fcm resimleri y\u00fckl\u00fcyoruz\ndef loadData(DIR):\n    X = []\n    Y = []\n    for label in labels:\n        path = os.path.join(DIR, label)\n        class_num = labels.index(label)\n        for img in tqdm(os.listdir(path)):\n            try:\n                arr = cv2.imread(os.path.join(path, img), cv2.IMREAD_COLOR)\n                resized_arr = cv2.resize(arr, (IMG_SIZE, IMG_SIZE))\n                X.append(resized_arr)\n                Y.append(class_num)\n            except Exception as e:\n                print(e)\n    return (np.array(X), np.array(Y))","6da76cc9":"DIR = '\/kaggle\/input\/mushroom-pictures\/All_Mushroom_Data\/'\n(X, Y) = loadData(DIR)","53f305cf":"l = []\nfor img in Y:\n    l.append(labels[img])\nsns.countplot(l);","ba6d38cd":"# Resim verisetinden herhangi 10 resim\nfig, ax = plt.subplots(5, 3)\nfig.set_size_inches(15, 20)\nfor i in range(5):\n    for j in range(3):\n        l = random.randint(0, len(X))\n        ax[i, j].imshow(X[l])\n        ax[i, j].set_title('Mantar: ' + labels[Y[l]])","de25ddf4":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report","a0d9390c":"# Verileri normalle\u015ftirme. G\u00f6r\u00fcnt\u00fcn\u00fcn piksel de\u011feri 0-1 aras\u0131nda normalle\u015ftiriliyor.\nX = X \/ 255\n\n# Veriyi yeniden \u015fekillendirmek\nX = X.reshape(-1, IMG_SIZE, IMG_SIZE, 3)\nY = Y.reshape(-1, 1)\nY = keras.utils.to_categorical(Y, 5)# hedef s\u00fctunda mantar t\u00fcrlerini kategorile\u015ftiriyoruz.","186cfdf9":"X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.3)\n\n# E\u011fitim ve test verilerinin yap\u0131lar\u0131na bak\u0131yoruz.\nprint(\"X_train boyutu:\" + str(X_train.shape))\nprint(\"Y_train boyutu:\" + str(Y_train.shape))\nprint(\"X_test boyutu:\" + str(X_test.shape))\nprint(\"Y_test boyutu:\" + str(Y_test.shape))","5a112834":"from keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPool2D, Dropout, Flatten\nfrom keras.layers import Dense","6ccba144":"# 5 adet giri\u015f de\u011feri oldu\u011fu i\u00e7in sinir a\u011f\u0131nda 5 adet n\u00f6ron olu\u015fturuyoruz.\nmodel = Sequential(\n    [\n        Conv2D(filters = 32, kernel_size = (3, 3), padding = 'same', activation = 'relu', input_shape = (IMG_SIZE, IMG_SIZE, 3)),\n        MaxPool2D(pool_size = (2, 2), strides = (2, 2)),\n        \n        Conv2D(filters = 64, kernel_size = (3, 3), padding = 'same', activation = 'relu'),\n        MaxPool2D(pool_size = (2, 2), strides = (2, 2)),\n        \n        Conv2D(filters = 128, kernel_size = (3, 3), padding = 'same', activation = 'relu'),\n        MaxPool2D(pool_size = (2, 2), strides = (2, 2)),\n        \n        Conv2D(filters = 256, kernel_size = (3, 3), padding = 'same', activation = 'relu'),\n        MaxPool2D(pool_size = (2, 2), strides = (2, 2)),\n        \n        Conv2D(filters = 512, kernel_size = (3, 3), padding = 'same', activation = 'relu'),\n        MaxPool2D(pool_size = (2, 2), strides = (2, 2)),     \n    \n        Flatten(),\n        Dense(1024, activation = 'relu'),\n        Dropout(0.5),\n        Dense(5, activation = 'softmax')\n    ]\n)","30382e14":"model.summary()","ca6d8568":"model.compile(optimizer = 'adam', loss = 'categorical_crossentropy', metrics = ['accuracy'])","3c92b270":"history = model.fit(X_train, Y_train, epochs = 8, validation_split = 0.2)","67b5a08b":"# E\u011fitim ve do\u011frulama veri setlerinde do\u011fruluk de\u011ferlerinin \u00e7izgi grafi\u011finde g\u00f6sterimi\nplt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('Model Do\u011frulu\u011fu')\nplt.xlabel('E\u011fitim Ad\u0131mlar\u0131')\nplt.ylabel('Do\u011fruluk')\nplt.legend(['Train', 'Val'], loc = 'upper left')\nplt.show()\n\n# E\u011fitim ve do\u011frulama veri setlerinde kay\u0131p de\u011ferlerin g\u00f6sterimi\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('Model Kayb\u0131')\nplt.xlabel('E\u011fitim Ad\u0131mlar\u0131')\nplt.ylabel('Kay\u0131p')\nplt.legend(['Train', 'Val'], loc = 'upper left')\nplt.show()","5fd3793f":"# E\u011fitim ve test setindeki do\u011fruluk de\u011ferinin bulunmas\u0131\negitim_kaybi, egitim_dogru = model.evaluate(X_train, Y_train)\ntest_kaybi, test_dogru = model.evaluate(X_test, Y_test)\nprint(\"E\u011fitim veri setinin do\u011fruluk de\u011feri: %f\" %(egitim_dogru * 100)  + \"%\")\nprint(\"Test veri setinin do\u011fruluk de\u011feri: %f\" %(test_dogru * 100)  + \"%\")","33078992":"from keras.applications import VGG19","5d5bfdb3":"pre_trained_model = VGG19(input_shape = (IMG_SIZE, IMG_SIZE, 3), include_top = False, weights = 'imagenet')\n\nfor layer in pre_trained_model.layers[:19]:\n    layer.trainable = False\n\nmodel = Sequential(\n    [\n        pre_trained_model,\n        Flatten(),\n        Dense(5, activation = 'softmax')\n    ]\n)","18abbc45":"model.summary()","ff3efb16":"model.compile(optimizer = 'adam', loss = 'categorical_crossentropy', metrics = ['accuracy'])","c164fd28":"history = model.fit(X_train, Y_train, epochs = 6, validation_split = 0.2)","efa8aedd":"# E\u011fitim ve test setlerinde do\u011fruluk de\u011ferlerinin \u00e7izgi grafi\u011finde g\u00f6sterimi\nplt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('Model Do\u011frulu\u011fu')\nplt.xlabel('E\u011fitim Ad\u0131mlar\u0131')\nplt.ylabel('Do\u011fruluk')\nplt.legend(['Train', 'Val'], loc = 'upper left')\nplt.show()\n\n# E\u011fitim ve do\u011frulama veri setlerinde ky\u0131p de\u011ferlerinin \u00e7izgi grafi\u011finde g\u00f6sterimi\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('Model Kayb\u0131')\nplt.xlabel('E\u011fitim Ad\u0131mlar\u0131')\nplt.ylabel('Kay\u0131p')\nplt.legend(['Train', 'Val'], loc = 'upper left')\nplt.show()","7adb68b6":"# E\u011fitim ve test setindeki do\u011fruluk de\u011ferinin bulunmas\u0131\negitim_kaybi, egitim_dogru = model.evaluate(X_train, Y_train)\ntest_kaybi, test_dogru = model.evaluate(X_test, Y_test)\nprint(\"E\u011fitim veri setinin do\u011fruluk oran\u0131: %f\" %(egitim_dogru * 100)  + \"%\")\nprint(\"Test veri setinin do\u011fruluk oran\u0131: %f\" %(test_dogru * 100)  + \"%\")","442de733":"Y_pred = model.predict(X_test)\nY_pred = np.argmax(Y_pred, axis = 1)\nY_test = np.argmax(Y_test, axis = 1)\n\n# Do\u011fru ve yanl\u0131\u015f etiketlenen de\u011ferler\ndogru = np.nonzero(Y_pred == Y_test)[0]\nyanlis = np.nonzero(Y_pred != Y_test)[0]\n\nprint(\"Test veri setinde do\u011fru tahmin edilen de\u011ferlerin say\u0131s\u0131:\" + str(dogru.shape))\nprint(\"Test veri setinde yanl\u0131\u015f tahmin edilen de\u011ferlerin say\u0131s\u0131:\" + str(yanlis.shape))\n\n# S\u0131n\u0131fland\u0131rma Raporu\nprint(classification_report(Y_test, Y_pred))","1d86f0cd":"# Do\u011fru Tahmin Edilen Resimler\nfig, ax = plt.subplots(3, 3)\nfig.set_size_inches(12, 16)\ncur = 0\nfor i in range(3):\n    for j in range(3):\n        ax[i, j].imshow(X_test[dogru[cur]])\n        ax[i, j].set_title(\"Tahmin Edilen: {}\\nGer\u00e7ek: {}\".format(labels[Y_pred[dogru[cur]]], labels[Y_test[dogru[cur]]]))\n        cur = cur + 1","a5a2549d":"# Yanl\u0131\u015f Tahmin Edilen Resimler\nfig, ax = plt.subplots(3, 3)\nfig.set_size_inches(12, 16)\ncur = 0\nfor i in range(3):\n    for j in range(3):\n        ax[i, j].imshow(X_test[yanlis[cur]])\n        ax[i, j].set_title(\"Tahmin Edilen: {}\\nGer\u00e7ek: {}\".format(labels[Y_pred[yanlis[cur]]], labels[Y_test[yanlis[cur]]]))\n        cur = cur + 1","1efdecad":"# Mantar Tan\u0131ma","b5a261da":"## Verileri G\u00f6rselle\u015ftirme","4426e9fa":"## Visualizing the predictions","e2f7bdc4":"## VGG19 Derin \u00f6\u011frenme Modeli","0e182e49":"## Veri \u00dczerinde \u00d6n \u0130\u015fleme","0aec2837":"* ## Evri\u015fimsel Sinir A\u011flar\u0131 (Convolutional Neural Network)"}}