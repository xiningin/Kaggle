{"cell_type":{"5b2c7996":"code","a915c33d":"code","920f4126":"code","ceb44e6d":"code","7d21bf17":"code","4d71a123":"code","04a67961":"code","99c62173":"code","c924376c":"code","0357f795":"markdown","38161431":"markdown","a78ef24d":"markdown","5d7f5727":"markdown","b3c50cd3":"markdown","ba02b7ac":"markdown","053ce042":"markdown"},"source":{"5b2c7996":"import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LogisticRegression,PassiveAggressiveClassifier,RidgeClassifier,SGDClassifier\nfrom sklearn.neighbors import KNeighborsClassifier,RadiusNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier, ExtraTreeClassifier\nfrom sklearn.svm import LinearSVC, SVC,NuSVC\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\nfrom sklearn.ensemble import AdaBoostClassifier, RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV\nfrom time import perf_counter\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom IPython.display import Markdown, display\n\ndef printmd(string):\n    # Print with Markdowns    \n    display(Markdown(string))\n\nimport warnings\nwarnings.filterwarnings(action='ignore')","a915c33d":"train_df = pd.read_csv('..\/input\/video-games-rating-by-esrb\/Video_games_esrb_rating.csv')\ntest_df = pd.read_csv('..\/input\/video-games-rating-by-esrb\/test_esrb.csv')\npd.concat([train_df.iloc[:3,:6],train_df.iloc[:3,-1]], axis = 1)","920f4126":"train_df['esrb_rating'].value_counts().plot.bar(color = ['#6b6b6b','#b8b8b8','grey','r'],\n                                               figsize = (10,5))\nplt.xticks(rotation=0)\nplt.title('Repartition of the ESRB ratings\\nin the training set', fontsize = 15)\nplt.xticks(fontsize=14)\nplt.yticks(fontsize=14)\nplt.show()","ceb44e6d":"def preprocessing(df):\n    df = df.copy()\n    \n    # Drop title column\n    df = df.drop('title', axis=1)\n    \n    # Shuffle the data\n    df = df.sample(frac=1.0, random_state=0).reset_index(drop=True)\n    \n    X = df.drop('esrb_rating', axis=1)\n    y = df['esrb_rating']\n    \n    X = pd.DataFrame(X, index=X.index, columns=X.columns)\n    \n    return X, y\n\n# Scale the datasets\nscaler = StandardScaler()\nX_train,y_train = preprocessing(train_df)\nX_train = scaler.fit_transform(X_train)\n\nX_test,y_test = preprocessing(test_df)\nX_test = scaler.transform(X_test)","7d21bf17":"models = {\n    \"PassiveAggressiveClassifier\":{\"model\":PassiveAggressiveClassifier() },\n    \"RidgeClassifier\":{\"model\":RidgeClassifier() },\n    \"SGDClassifier\":{\"model\":SGDClassifier() },\n    \"KNeighborsClassifier\":{\"model\":KNeighborsClassifier() },\n    \"DecisionTreeClassifier\":{\"model\":DecisionTreeClassifier() },\n    \"ExtraTreeClassifier\":{\"model\":ExtraTreeClassifier() },\n    \"LinearSVC\":{\"model\":LinearSVC() },\n    \"SVC\":{\"model\":SVC() },\n    \"NuSVC\":{\"model\":NuSVC() },\n    \"MLPClassifier\":{\"model\":MLPClassifier() },\n    \"RandomForestClassifier\":{\"model\":RandomForestClassifier() },\n    \"GradientBoostingClassifier\":{\"model\":GradientBoostingClassifier() },\n    \"AdaBoostClassifier\":{\"model\":AdaBoostClassifier() }\n}\n\nfor name, m in models.items():\n    start = perf_counter()\n    m['model'].fit(X_train, y_train)\n    duration = perf_counter() - start\n    duration = round(duration,3)\n    test_acc = m['model'].score(X_test,y_test)\n    m['test_acc'] = test_acc\n    m['Training time (sec)'] = duration\n    print(f\"{name:27} trained - test set acc: {test_acc*100:.2f}% - trained in {duration} sec\")","4d71a123":"# Create a DataFrame with the results\nmodels_result = []\n\nfor name, v in models.items():\n    lst = [name, v['test_acc'],v['Training time (sec)']]\n    models_result.append(lst)\n\ndf_results = pd.DataFrame(models_result, \n                          columns = ['model','test_acc','Training time (sec)'])\ndf_results.sort_values(by='test_acc', ascending=False, inplace=True)\ndf_results.reset_index(inplace=True,drop=True)\ndf_results","04a67961":"plt.figure(figsize = (15,5))\nsns.barplot(x = 'model', y = 'test_acc', data = df_results)\nplt.title('Accuracy on the test set\\nComparison of the different models', fontsize = 15)\nplt.ylim(0,1)\nplt.xlabel('Model', fontsize=15)\nplt.ylabel('Accuracy',fontsize=15)\nplt.xticks(rotation=90, fontsize=12)\nplt.show()","99c62173":"plt.figure(figsize = (15,5))\nsns.barplot(x = 'model', y = 'Training time (sec)', data = df_results)\nplt.title('Training time for each model in sec', fontsize = 15)\nplt.xticks(rotation=90, fontsize=12)\nplt.xlabel('Model', fontsize=15)\nplt.ylabel('Training time (sec)',fontsize=15)\nplt.show()","c924376c":"best_model = df_results.iloc[0]\npred = models[best_model[0]]['model'].predict(X_test)\nprintmd(f'## Best Model: {best_model[0]} with {round(best_model[1],2)*100}% accuracy on the test set')\nprintmd(f'## Trained in: {best_model[2]} sec')\n\n# Display a confusion matrix\nfrom sklearn.metrics import confusion_matrix\ncf_matrix = confusion_matrix(y_test, pred, normalize='true')\nplt.figure(figsize = (7,5))\nsns.heatmap(cf_matrix, annot=True, xticklabels = sorted(set(y_test)), yticklabels = sorted(set(y_test)),cbar=False)\nplt.title('Normalized Confusion Matrix', fontsize = 23)\nplt.xticks(fontsize=15)\nplt.yticks(fontsize=15)\nplt.show()","0357f795":"# 1. Data Description<a class=\"anchor\" id=\"1\"><\/a><a class=\"anchor\" id=\"1\"><\/a>\n\n- This data contains the name for 1895 games with 34 of ESRB rating content with the name and console as features for each game.\n\n- A single data point is represented as a binary value 0-1 for Console and a binary vector for the features of ESRB content.\n\n- RP, EC, A, rating is not provided in the current version of the data, it might be included in the next updates.\n\n## File descriptions:\n- Video_games_esrb_rating.csv - the training set\n\n- test_esrb.csv - the test set\n\n## Load the datasets and visualize it\nHaving a look at some of the columns: Basically there is the title of the game and its different features like *Blood* or *Mature_Humr* and its ratings *esrb_rating*.\n\n**ESRB rating description:**\n","38161431":"# 2. Data Preprocessing<a class=\"anchor\" id=\"2\"><\/a><a class=\"anchor\" id=\"2\"><\/a>","a78ef24d":"# 3. Model comparison<a class=\"anchor\" id=\"3\"><\/a><a class=\"anchor\" id=\"3\"><\/a>","5d7f5727":"## Load the libraries:","b3c50cd3":"# 4. Prediction metrics of the best model<a class=\"anchor\" id=\"4\"><\/a><a class=\"anchor\" id=\"1\"><\/a>","ba02b7ac":"# Table of contents\n\n[<h3>1. Data Description<\/h3>](#1)\n\n[<h3>2. Data Preprocessing<\/h3>](#2)\n\n[<h3>3. Model comparison<\/h3>](#3)\n\n[<h3>4. Prediction metrics of the best model<\/h3>](#4)","053ce042":"# Predict the ESRB rating of video games\n## *Compare 13 algorithms*\n  \n![video games](https:\/\/i.imgur.com\/4TMUrfq.png)"}}