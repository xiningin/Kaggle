{"cell_type":{"d44acfec":"code","b845da7a":"code","a47b7bf6":"code","8324553a":"code","0e24a287":"code","1a5b171e":"code","31a5552f":"code","999b5b37":"code","2492ec80":"code","7898afab":"code","4d7b73bf":"markdown","36e8cdee":"markdown","71755f43":"markdown","137834d3":"markdown","a44b876b":"markdown","60d54da5":"markdown","a3f887b6":"markdown"},"source":{"d44acfec":"%matplotlib inline\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# reading csv\ndata = pd.read_csv('..\/input\/headbrain.csv')\nprint(data.shape)\ndata.head()","b845da7a":"\n# extracting the column values\nX = data['Head Size(cm^3)'].values\nY = data['Brain Weight(grams)'].values\n\n# calculating mean\nmean_x = np.mean(X)\nmean_y = np.mean(Y)\nm = len(X)","a47b7bf6":"# check formula to find the coefficient b0 and b1 and you will understand the code\nnum = 0\nden = 0\nfor i in range(m):\n    num += (X[i] - mean_x) * (Y[i] - mean_y)\n    den += (X[i] - mean_x) ** 2\n\nb1 = num \/ den\nb0 = mean_y - (b1 * mean_x)\n\nprint(b1, b0)","8324553a":"#plotting values \nx_max = np.max(X) + 100\nx_min = np.min(X) - 100\n#calculating line values of x and y\nx = np.linspace(x_min, x_max, 1000)\ny = b0 + b1 * x\n#plotting line \nplt.plot(x, y, color='#00ff00', label='Linear Regression')\n#plot the data point\nplt.scatter(X, Y, color='#ff0000', label='Data Point')\n# x-axis label\nplt.xlabel('Head Size (cm^3)')\n#y-axis label\nplt.ylabel('Brain Weight (grams)')\nplt.legend()\nplt.show()","0e24a287":"# calculating root mean squared error - again check the formula\nrmse = 0\nfor i in range(m):\n    y_pred = b0 + b1 * X[i]\n    rmse += (Y[i] - y_pred) ** 2\nrmse = np.sqrt(rmse\/m)\nprint(\"RMSE Score = \", float(rmse))","1a5b171e":"# calculating r-squared score (check formula for clarity)\nss_t = 0\nss_r = 0\nfor i in range(m):\n    y_pred = b0 + b1 * X[i]\n    ss_t += (Y[i] - mean_y) ** 2\n    ss_r += (Y[i] - y_pred) ** 2\n\nr2 = 1 - (ss_r \/ ss_t)\nprint(\"R^2 Score = \",  float(r2))","31a5552f":"from sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error","999b5b37":"# Can not use rank 1 matrix in Sklearn\nX = X.reshape((m,1))","2492ec80":"# Creating Model\nreg = LinearRegression()\n# Fitting training data\nreg = reg.fit(X, Y)\n# Y Prediction\nY_pred = reg.predict(X)","7898afab":"# Calculating RMSE and R^2 Score\n# mse = mean_squared_error(Y, Y_pred)\n# rmse = np.sqrt(mse)\nrmse = np.sqrt(mean_squared_error(Y, Y_pred))\nr2_score = reg.score(X, Y)\n\nprint(\"RMSE = {} \\t R^2 Score = {}\".format(rmse, r2_score))\n#print(r2_score)","4d7b73bf":"\\begin{equation}\nRMSE = \\sqrt{\\sum_{i=1}^m\\frac{1}{m}(\\hat{y_i}-y_i)^2}\n\\end{equation}","36e8cdee":"### 2. Sci-kit Learn Approach","71755f43":"\\begin{equation}\n\\hat{\\beta}_1 = \\frac{\\sum(X_i \u2013 \\bar{X}) (Y_i \u2013 \\bar{Y})} {\\sum(X_i \u2013 \\bar{X})^2}\n\\end{equation}\n\\begin{equation}\n\\hat{\\beta}_0 = \\bar{Y} \u2013 \\hat{\\beta}_1 \\bar{X}\n\\end{equation}\n\n\\begin{equation}\nY = \\hat{\\beta}_0 + \\hat{\\beta}_1 \\bar{X}\n\\end{equation}","137834d3":"### 1. From Scratch ","a44b876b":"## Linear Regression","60d54da5":"<br \/>\n<br \/>\n<br \/>\n<br \/>","a3f887b6":"\\begin{equation}\nSS_t=\\sum_{i=1}^m(y_i - \\bar y)^2\n\\end{equation}\n\n\\begin{equation}\nSS_r=\\sum_{i=1}^m(y_i - \\hat y_i)^2\n\\end{equation}\n\n\\begin{equation}\nR^2\u22611\u2212\\frac{SS_r}{SS_t}\n\\end{equation}"}}