{"cell_type":{"ce454605":"code","a3f677ae":"code","cf75e3a5":"code","2086c9c3":"code","36cd8a2e":"code","0a47e284":"code","e7ef30b4":"code","d4c15953":"code","5668e0d1":"code","af645e5c":"code","d1aa7c6f":"code","e8ef8a2c":"code","d6f5bb6a":"code","be6d964d":"code","f69d6de7":"code","1a67502b":"code","5da7c526":"code","d0e36ef1":"code","232836a3":"code","593d9fa5":"code","6752c51e":"code","2490d774":"code","5ae8bab4":"code","d9073c6b":"code","46dea660":"code","a9e6a271":"code","45f9e3e2":"code","265f24ca":"code","a8d77a48":"code","da5e8870":"code","5e3ecb8b":"code","c4d6bdd5":"code","f3717da6":"code","c155283e":"code","f87e8cf0":"code","e7196d79":"code","2bf9bf9f":"markdown","ace915b0":"markdown","087a9b7b":"markdown","8dd88742":"markdown","1df90959":"markdown","a43e0394":"markdown","3f28e5a5":"markdown","6145c6f9":"markdown","a223849b":"markdown","f6da7c7f":"markdown","c00e57da":"markdown","09b6dc8c":"markdown","f5c699e9":"markdown","6585ee83":"markdown","2a9f0184":"markdown","3d041b7a":"markdown","2bd120a9":"markdown","bcf52249":"markdown","d9889e31":"markdown","417972a4":"markdown","5cd4624d":"markdown"},"source":{"ce454605":"#importing libraries\nimport pandas as pd\nimport numpy as np\nimport os\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport matplotlib.pyplot as plt\nfrom statsmodels.tsa.stattools import acf,pacf, adfuller, kpss\nfrom scipy import stats\nimport warnings\nwarnings.filterwarnings('ignore')","a3f677ae":"#Importing User defined modules\n%cd '\/kaggle\/input\/solar-eda'\nimport ads_creation as ads_crtn\nimport winsorize as wz\nfrom constants import CORR_THRESHOLD, OUTLIER_METHOD, ATTR, TIME_VARIANT_ATTR, \\\n                      TIME_INVARIANT_ATTR, SPLIT_PCT","cf75e3a5":"#Function for train-test split","2086c9c3":"def train_test_split(df,panel_id_col,split_pct):\n    '''\n    This function does train-test split at a panel level dividing each panel into training and testing\n    observations depending on the split percentage\n\n    Input\n    1. df: pandas dataframe, this is the ads that needs to be split\n    2. panel_id_col: str, this is the column name that has panel IDs\n    3. split_pct: float, contains the percentage split\n\n    Return\n    1. train_data: pandas dataframe, dataset that is to be used for training\n    2. test_data: pandas dataframe, dataset that is to be used for testing purposes\n    '''\n    assert split_pct < 1, 'Split Percentage should be divided by 100'\n    train_indices = []\n    test_indices = []\n    for panel in df[panel_id_col].unique():\n        obs_index = df.loc[df[panel_id_col]==panel].index\n        train_upper_limit = int(split_pct * len(obs_index))\n        train_indices.append(obs_index[0:train_upper_limit])\n        test_indices.append(obs_index[train_upper_limit:len(obs_index)])\n    train_indices = [item for sublist in train_indices for item in sublist]\n    test_indices = [item for sublist in test_indices for item in sublist]\n\n    train_data = df.loc[train_indices,].reset_index(drop=True)\n    test_data = df.loc[test_indices,].reset_index(drop=True)\n    return train_data, test_data\n","36cd8a2e":"#Function for bos plots","0a47e284":"def box_plot(df, x_axis_attribute, cluster_name):\n    '''\n    This function creates a box plot for each panel ID \n    df: the dataset that will be used for plotting\n    x_axis_attribute: the column that will be plotted\n    cluster_name: the column that identifies the different clusters present in the data\n    '''\n    fig = px.box(df, \n            x = x_axis_attribute, \n            color = cluster_name, \n            facet_row = cluster_name, \n            facet_row_spacing = 0.02)\n    for anno in fig['layout']['annotations']:\n        anno['text']=''\n\n    for axis in fig.layout:\n        if type(fig.layout[axis]) == go.layout.YAxis:\n            fig.layout[axis].title.text = ''\n        if type(fig.layout[axis]) == go.layout.XAxis:\n            fig.layout[axis].title.text = ''\n\n    fig.update_layout(\n        # keep the original annotations and add a list of new annotations:\n        annotations = list(fig.layout.annotations) + \n        [go.layout.Annotation(\n                x=0.5,\n                y=-0.08,\n                font=dict(\n                    size=16, color = 'blue'\n                ),\n                showarrow=False,\n                text=x_axis_attribute,\n                textangle=-0,\n                xref=\"paper\",\n                yref=\"paper\"\n            )\n        ]\n    )\n    \n    fig.show()\n    return \n","e7ef30b4":"#Function for line plots","d4c15953":"def line_plot(df, x_axis_attribute, y_axis_attribute, panel_id_col):\n    '''\n    This function makes line plots for each panel in the dataset\n    Input\n    1. df: Pandas dataframe, this is the ads\n    2. attributes: both x and y attributes are supplied. They can be a list (when plotting 2 lines) or str\n    3. panel_id_col: str, it is the column name that contains the panel IDs\n    '''\n    if type(y_axis_attribute) != str:\n        text_for_y_axis = ' & '.join(y_axis_attribute)\n    else:\n        text_for_y_axis = y_axis_attribute\n    \n    if type(x_axis_attribute) != str:\n        text_for_x_axis = ' & '.join(x_axis_attribute)\n    else:\n        text_for_x_axis = x_axis_attribute\n\n    fig = px.line(df,\n            x = x_axis_attribute,\n            y = y_axis_attribute,\n            color = panel_id_col, \n            facet_row = panel_id_col,\n            facet_row_spacing = 0.02)\n\n    for anno in fig['layout']['annotations']:\n        anno['text']=''\n\n    for axis in fig.layout:\n        if type(fig.layout[axis]) == go.layout.YAxis:\n            fig.layout[axis].title.text = ''\n        if type(fig.layout[axis]) == go.layout.XAxis:\n            fig.layout[axis].title.text = ''\n\n    fig.update_layout(\n        # keep the original annotations and add a list of new annotations:\n        annotations = list(fig.layout.annotations) + \n        [go.layout.Annotation(\n                x=-0.07,\n                y=0.5,\n                font=dict(\n                    size=16, color = 'blue'\n                ),\n                showarrow=False,\n                text=text_for_y_axis,\n                textangle=-90,\n                xref=\"paper\",\n                yref=\"paper\"\n            )\n        ] +\n        [go.layout.Annotation(\n                x=0.5,\n                y=-0.08,\n                font=dict(\n                    size=16, color = 'blue'\n                ),\n                showarrow=False,\n                text=text_for_x_axis,\n                textangle=-0,\n                xref=\"paper\",\n                yref=\"paper\"\n            )\n        ]\n    )\n    \n    fig.show()\n\n    return \n","5668e0d1":"#Function for picking up the lag that is significant and highly correlated with target variable","af645e5c":"def pick_pacf(df,alpha=0.05,nlags=192):\n    '''\n    This function returns the lags in the timeseries which are highly correlated with the original timeseries\n    Input\n    1. df: pandas series, this is the column for which we are trying to find AR lag\n    2. metric: str, what metric to be calculated - acf\/pacf\n    3. alpha: float, confidence interval\n    4. nlags: int, the no. of lags to be tested\n\n    Return\n    1. lags: list, this contain the list of all the lags (# of timestamps) that are highly correlated\n    '''\n    \n\n    values,conf_int = pacf(df.values,alpha=alpha,nlags=nlags)\n\n    lags = []\n    #in the pacf function, confidence interval is centered around pacf values\n    #we need them to be centered around 0, this will produce the intervals we see in the graph\n    conf_int_cntrd = [value[0] - value[1] for value in zip(conf_int,values)]\n    for obs_index, obs in enumerate(zip(conf_int_cntrd,values)):\n        if (obs[1] >= obs[0][1]) & (obs[1] >= CORR_THRESHOLD): #obs[0][1] contains the high value of the conf int\n            lags.append(obs_index)\n        elif (obs[1] <= obs[0][0]) & (obs[1] <= -1 * CORR_THRESHOLD): #obs[0][0] contains the low value of the conf_int\n            lags.append(obs_index)\n    lags.remove(0) #removing the 0 lag for auto-corr with itself\n    #keeping statistically significant and highly correlated lags\n    return lags \n","d1aa7c6f":"#Function for identifying the lags for MA using ACF","e8ef8a2c":"def pick_acf(df,nlags=192):\n    '''\n    This funciton takes returns the ACF value for a MA model for a time series\n\n    Input\n    1. df: pandas series, this is the series for which we want to find ACF value\n    2. nlags: the number of lags to be taken into consideration for ACF\n\n    Returns\n    1. The lags value at which ACF cuts off\n    '''\n    acf_values = acf(df.values)\n    acf_values = np.round(acf_values,1)\n    q = np.where(acf_values <= 0.2)[0][0]\n    return [q]\n","d6f5bb6a":"#Function for getting the list of correlated variables ","be6d964d":"def correlated_var(df, target_variable):\n    '''\n    This function finds all the variables that are highly correlated with the target variable\n    \n    Input:\n    1. df: pandas dataframe, this is the ads\n    2. target_variable: str, the variable name with which we want to find correlation\n\n    return:\n    corr_var: list, list of variables that are highly correlated with the target variable\n    '''\n    corr_df = df.corr().reset_index()\n    corr_df = pd.melt(corr_df, id_vars = 'index', var_name = 'variable 2', value_name = 'corr_val')\n    corr_var = corr_df.loc[(abs(corr_df['corr_val']) > CORR_THRESHOLD) & (abs(corr_df['corr_val']!=1)) & (corr_df['index'] == target_variable),]\n    corr_var = corr_var['variable 2'].unique()\n    return corr_var\n","f69d6de7":"#Function for getting all the box plots for a dataframe and variables","1a67502b":"def get_box_plot(df):\n    '''\n    This funciton creates box plots for all the columns and panels present in the data\n    '''\n    for variable in [column for column in df.columns if column != 'INVERTER_ID']:\n        for i in range(0,df['INVERTER_ID'].nunique(),6):\n            box_plot(df.loc[df['INVERTER_ID'].isin(df['INVERTER_ID'].unique()[i:i+6].tolist()),], variable, 'INVERTER_ID')\n    return \n","5da7c526":"#Function for conducting ADF and KPSS test on a series ","d0e36ef1":"def adf_kpss_test(df):\n\n    '''\n    This function conducts the ADS and KPSS tests for stationarity\n    --------------\n    Case 1: Both tests conclude that the series is not stationary - The series is not stationary\n    Case 2: Both tests conclude that the series is stationary - The series is stationary\n    Case 3: KPSS indicates stationarity and ADF indicates non-stationarity - The series is trend stationary. \n    Trend needs to be removed to make series strict stationary. The detrended series is checked for stationarity.\n    Case 4: KPSS indicates non-stationarity and ADF indicates stationarity - The series is difference stationary.\n    Differencing is to be used to make series stationary. The differenced series is checked for stationarity.\n    ---------------\n\n    Input:\n    1. df: pandas series, the series which we want to test if it is stationary or not\n\n    Return:\n    1. 0\/1: 0 means stationary, 1 means non-stationary\n    '''\n\n    p_value_kpss = kpss(df)[1]\n    p_value_adf = adfuller(df)[1]\n\n    if (p_value_adf < 0.05) & (p_value_kpss > 0.05):\n        #Stationary\n        return 0\n    elif (p_value_adf > 0.05) & (p_value_kpss < 0.05):\n        #Not Stationary\n        return 1\n    elif (p_value_adf > 0.05) & (p_value_kpss > 0.05):\n        #Trend Stationary\n        return 1\n    elif (p_value_adf < 0.05) & (p_value_kpss < 0.05):\n        #Difference Stationary\n        return 1\n","232836a3":"#Function for returning the list of variables that are non stationary for each panel","593d9fa5":"def return_non_stnry_invtr_list(df,panel_id_col):\n    '''\n    This function takes ADS as input and panel_id column name \n    and return the list of those panels which have even one attribute non stationary\n\n    Input\n    1. df: pandas dataframe, this is the ads\n    2. panel_id_col: str, this is the column name of the column containing the panel IDs in the ads\n\n    Return:\n    stnry_check_ads: pandas dataframe, index is panel IDs and for each panel and for each time series, we get\n    to know if it is stationary or not\n    '''\n    stnry_check_ads = df[TIME_VARIANT_ATTR + [panel_id_col]].groupby(panel_id_col).agg(lambda x: adf_kpss_test(x))\n    stnry_ads_list = stnry_check_ads.apply(sum,axis=1)\n    stnry_ads_list = stnry_ads_list[stnry_ads_list != 0].index\n\n    stnry_check_ads = stnry_check_ads.loc[stnry_check_ads.index.isin(stnry_ads_list),]\n    return stnry_check_ads\n","6752c51e":"#Function for making a series stationary through differencing","2490d774":"def make_series_stnry(df,date_col):\n    '''\n    This function makes a series stationary by continuous differencing\n\n    Input:\n    1. df: pandas series, the series that has to be differenced\n    2. date_col: str, the name of the column that contains the dates in the ads\n\n    Return:\n    1. df: pandas series, series that is stationary\n    '''\n    result = 1\n    df.set_index([date_col],inplace=True)\n    while result != 0:\n        df = df.diff().dropna()\n        result = adf_kpss_test(df)\n    return df\n","5ae8bab4":"#Funciton for making ADS stationary ","d9073c6b":"def make_ads_stnry(df,stnry_check_ads,panel_id_col,date_col):\n    '''\n    This function goes inverter by inverter and column by column \n    making each column in each inverter stationary (if not already)\n\n    Input:\n    1. df: pandas dataframe, this is the dataset that has to be made stationary\n    2. stnry_check_ads: pandas dataframe, this is the df that contains info on what all attributes are non\n    stationary for what all panels in the data\n    3. panel_id_col: str, this is the name of the column that contains the panel IDs in the data\n    4. date_col: str, this is the name of the column that contains the dates in the ads\n\n    Returns:\n    1. df: pandas dataframe, this is the ads that has all the attributes stationary\n    '''\n    while len(stnry_check_ads) != 0:\n        for invtr in stnry_check_ads.index:\n            for column in stnry_check_ads.columns:\n                if stnry_check_ads.loc[invtr,column] == 1:\n                    strct_stnry_ads = make_series_stnry(df.loc[df[panel_id_col] == invtr,[column,date_col]],date_col)\n                    strct_stnry_ads.reset_index(inplace=True)\n                    drop_idx = df.loc[(~df[date_col].isin(strct_stnry_ads[date_col]) & (df[panel_id_col]==invtr))].index\n                    df = df.drop(drop_idx)\n                    #different indices make it very tough to just write values at certain places\n                    df.at[(df.DATE.isin(strct_stnry_ads[date_col])) & (df[panel_id_col] == invtr),column] = strct_stnry_ads[column].to_list()\n                    df.reset_index(drop=True,inplace=True)\n        stnry_check_ads = return_non_stnry_invtr_list(df,panel_id_col)\n    \n    return df\n","46dea660":"ads = ads_crtn.create_ads()","a9e6a271":"variable = 'AC_POWER'\nget_box_plot(ads[['INVERTER_ID',variable]])","45f9e3e2":"train_ads, test_ads = train_test_split(ads,'INVERTER_ID',SPLIT_PCT)","265f24ca":"#The winsorize class has been written to mimic the scikit learn API so that it is easy to use\n#and is intuitive enough for any new user\noutlier_feature = [feature for feature in ATTR if feature != 'TOTAL_YIELD'] \nclip_model = wz.winsorize(OUTLIER_METHOD)\nclip_model.fit(train_ads[outlier_feature],'INVERTER_ID')\ntrain_ads[outlier_feature] = clip_model.transform(train_ads[outlier_feature])\ntest_ads[outlier_feature] = clip_model.transform(test_ads[outlier_feature])\n","a8d77a48":"get_box_plot(train_ads[['AC_POWER','INVERTER_ID']])","da5e8870":"non_stnry_invtr_list = return_non_stnry_invtr_list(train_ads,'INVERTER_ID')\nprint(non_stnry_invtr_list)","5e3ecb8b":"train_ads = make_ads_stnry(train_ads,non_stnry_invtr_list,'INVERTER_ID','DATE')\nnon_stnry_invtr_list = return_non_stnry_invtr_list(train_ads,'INVERTER_ID')\nprint(non_stnry_invtr_list)","c4d6bdd5":"#Performing the same procedure with test dataset\nnon_stnry_invtr_list = return_non_stnry_invtr_list(test_ads,'INVERTER_ID')\ntest_ads = make_ads_stnry(test_ads,non_stnry_invtr_list,'INVERTER_ID','DATE')\n","f3717da6":"train_ads.groupby('INVERTER_ID').apply(lambda x: list(correlated_var(x, 'PER_TS_YIELD')))\n    ","c155283e":"lag_values = train_ads[['INVERTER_ID','PER_TS_YIELD']].groupby('INVERTER_ID').agg(lambda x: pick_pacf(x,nlags=40))\nacf_values = train_ads[['INVERTER_ID','PER_TS_YIELD']].groupby('INVERTER_ID').agg(lambda x: pick_acf(x,nlags=40))\n","f87e8cf0":"print(lag_values)","e7196d79":"print(acf_values)","2bf9bf9f":"<h1> Stationarity <\/h1>","ace915b0":"<h3> Finding out the lags that would be the most optimal for the MA and AR models for each panel <\/h3>","087a9b7b":"<h3> Plotting box plots to see the effect of the outlier treatment <\/h3>","8dd88742":"<h3> Since the lags that are significant from an ACF plot are very high order, that means we should not create a MA model <\/h3>","1df90959":"<h1> Train-Test Split <\/h1>","a43e0394":"<h1> Helper Functions <\/h1>","3f28e5a5":"<h1> ACF & PACF <\/h1>","6145c6f9":"<h3> Using the user defined function above, we can check for stationarity. A series should be stationary so that we can maintain the assumption of iid across our train and test datasets <\/h3>","a223849b":"<h3>Creating box plots for a feature to show as an example to how is the distribution looking like <\/h3>","f6da7c7f":"<h1> Outlier Treatment <\/h1>","c00e57da":"<h3> Finding out all the variables that are correlated with our target variable: PER_TS_YIELD <\/h3>","09b6dc8c":"<h1> Correlation <\/h1>","f5c699e9":"<h3> Performing train test split so that whatever MVT or outlier treatment we do, does not lead to data leak <\/h3>","6585ee83":"<h3> We can see that each panel is having a series that is non stationary. We can remedy this by continuous differencing <\/h3>","2a9f0184":"<h3> We can see that there are various panels that are having outliers (observation whose values are outside the upper and lower fences) <\/h3>","3d041b7a":"<h3> Performing outlier treatment through Winsorizing. It caps outliers with very large values to 99%ile and values with very low values to 10%ile. This is dynamically through the user defined winsorize.py class <\/h3>","2bd120a9":"<h1> Box Plots <\/h1>","bcf52249":"<h3> We can see now that there are no outliers present thanks to winsorizing. The same procedure has been done for all the other variables as well <\/h3>","d9889e31":"<h3> The above result showcases that for most panels, only the immediately preceding lag value is significantly correlated. It is also indicative that we should make an AR model <\/h3>","417972a4":"<h3> After doing continuous differencing, we see that now all panels are stationary <\/h3>","5cd4624d":"<h1> Creating the ADS <\/h1>"}}