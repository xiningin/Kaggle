{"cell_type":{"7745ca98":"code","be3ca9c9":"code","61a70e58":"code","e86188f2":"code","b170e8ae":"code","e3d75950":"code","8d3a03bd":"code","7ba75391":"code","9928d5ed":"code","d680ca52":"code","cc26c8d6":"code","d9945381":"code","13651b1a":"code","d67a2c80":"code","291aa727":"code","df85977a":"code","2e13207c":"code","acd99cce":"code","3d9993e4":"code","b0ca86ed":"code","ba53a513":"code","77828c28":"code","9512017a":"code","2fa87df1":"code","f8a97579":"code","24f172b5":"code","9ba25292":"code","cb1df6b0":"code","5b569095":"code","013d8054":"code","74b8fd9f":"code","2ec4987b":"code","5f6c9897":"code","1ef12d1d":"code","bdb15a5b":"code","3961d5d5":"code","127f260c":"code","ce462089":"code","0d5ce480":"code","fee5cd56":"code","eeac56de":"code","beca34a5":"code","90299934":"code","56bc7f12":"code","9b6078f6":"code","3ae15a17":"code","aae0e8ce":"code","76627a62":"code","a13ae2e2":"code","12d35886":"code","464ae412":"code","f7a96b27":"code","462ae29d":"code","69ab2e90":"code","83c8fb9e":"code","841124ec":"code","d0385c65":"code","ec473588":"code","b86d1c81":"markdown","a5437a44":"markdown","bbbcb79f":"markdown","0750cf49":"markdown","2190652b":"markdown","d9822342":"markdown","7bd5b9b2":"markdown","07ef502e":"markdown","2c6eec38":"markdown","a561220a":"markdown","861f3981":"markdown","c44cc411":"markdown","58faa1d7":"markdown","8dd1d938":"markdown","4dbf1565":"markdown","c4a802bb":"markdown","4a10c5e6":"markdown","7fc4007c":"markdown","b903053f":"markdown","3edcabe7":"markdown"},"source":{"7745ca98":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","be3ca9c9":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns; sns.set(color_codes=True)  # visualization tool\n\n\nfrom sklearn.linear_model import LinearRegression\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","61a70e58":"from IPython.display import IFrame\nIFrame('https:\/\/www.myheatmap.com\/maps\/PPk1_rfT1jQ%3D', width=800, height=600)","e86188f2":"data= pd.read_csv(\"..\/input\/novel-corona-virus-2019-dataset\/2019_nCoV_data.csv\")","b170e8ae":"data.head()","e3d75950":"data.info()","8d3a03bd":"data.shape","7ba75391":"data.describe()","9928d5ed":"data.isnull().sum()","d680ca52":"#this shows we have empty values in province\/state field","cc26c8d6":"#data[['Confirmed', 'Deaths', 'Recovered']].sum()","d9945381":"# Let's get rid of the Sno column as it's redundant\ndata.drop(['Sno'], axis=1, inplace=True)","13651b1a":"data['Date'] = data['Date'].apply(pd.to_datetime)","d67a2c80":"data['Last Update'] =data['Last Update'].apply(pd.to_datetime)","291aa727":"data.tail()","df85977a":"data['Province\/State'].value_counts()","2e13207c":"# Countries affected\n\ncountries = data['Country'].unique().tolist()\nprint(countries)\n\nprint(\"\\nTotal countries affected by virus: \",len(countries))","acd99cce":"#Combining China and Mainland China cases\n\ndata['Country'].replace({'Mainland China':'China'},inplace=True)\ncountries = data['Country'].unique().tolist()\nprint(countries)\nprint(\"\\nTotal countries affected by virus: \",len(countries))","3d9993e4":"data","b0ca86ed":"from datetime import date\nd = data['Date'][-1:].astype('str')\nyear = int(d.values[0].split('-')[0])\nmonth = int(d.values[0].split('-')[1])\nday = int(d.values[0].split('-')[2].split()[0])","ba53a513":"latest_nCoV_data = data[data['Date'] > pd.Timestamp(date(year,month,day))]\n","77828c28":"# Data Glimpse\nlatest_nCoV_data.tail()","9512017a":"# Getting the latest numbers\n\n#formatted_text('***Latest Numbers Globaly***')\nprint('Confirmed Cases around the globe : ',latest_nCoV_data['Confirmed'].sum())\nprint('Deaths Confirmed around the globe: ',latest_nCoV_data['Deaths'].sum())\nprint('Recovered Cases around the globe : ',latest_nCoV_data['Recovered'].sum())","2fa87df1":"tempState = data['Province\/State'].mode()\nprint(tempState)\n#df['Province\/State'].fillna(tempState, inplace=True)","f8a97579":"from datetime import datetime\n# 1\/22\/2020 12:00\n# 1\/26\/2020 23:00\n# 1\/23\/20 12:00 PM\n# 2020-01-02 23:33:00\n# \ndef try_parsing_date_time(text):\n    for fmt in ('%Y-%m-%d', '%d.%m.%Y', '%m\/%d\/%Y %h:%m', '%m\/%d\/%Y %H:%M','%m\/%d\/%Y %H:%M:%S','%m\/%d\/%y %I:%M %p', '%m\/%d\/%Y %I:%M %p', '%Y-%d-%m %H:%M:%S'):\n        try:\n            return datetime.strptime(text, fmt)\n        except ValueError:\n            pass\n    raise ValueError('no valid date time format found', text)\n\n\ndef try_parsing_date(text):\n    for fmt in ('%m\/%d\/%Y', '%m\/%d\/%y', '%Y-%d-%m', '%d.%m.%Y'):\n        try:\n            return datetime.strptime(text, fmt)\n        except ValueError:\n            pass\n    raise ValueError('no valid date format found', text)","24f172b5":"data['Date']","9ba25292":"data['Date']","cb1df6b0":"#No. Of Countries Currently affected by it.\nallCountries = latest_nCoV_data['Country'].unique().tolist()\nprint(allCountries)\n\nprint(\"\\nTotal countries affected by virus: \",len(allCountries))","5b569095":"CountryWiseData = pd.DataFrame(latest_nCoV_data.groupby('Country')['Confirmed', 'Deaths', 'Recovered'].sum())\nCountryWiseData['Country'] = CountryWiseData.index\nCountryWiseData.index = np.arange(1, len(allCountries)+1)\n\nCountryWiseData = CountryWiseData[['Country','Confirmed', 'Deaths', 'Recovered']]\n\n#formatted_text('***Country wise Analysis of ''Confirmed'', ''Deaths'', ''Recovered'' Cases***')\nCountryWiseData","013d8054":"#formatted_text('***Country wise Analysis of ''Confirmed'', ''Deaths'', ''Recovered'' Cases***')\nCountryWiseData.plot('Country',['Confirmed', 'Deaths', 'Recovered'],kind='bar',figsize=(30,20), fontsize=18)","74b8fd9f":"date_wise_data = data[[\"Date\",\"Confirmed\",\"Deaths\",\"Recovered\"]]\ndate_wise_data.head()","2ec4987b":"date_wise_data = date_wise_data.groupby([\"Date\"]).sum().reset_index()\n\n# strip off the time part from date for day-wise distribution\ndate_wise_data.Date = date_wise_data.Date.apply(lambda x:x.date())\n\n#formatted_text('***Day wise distribution (WorldWide) for Confirmed, Deaths and Recovered Cases***')\ndate_wise_data","5f6c9897":"#*Day wise distribution (WorldWide) for Confirmed, Deaths and Recovered Cases\ndate_wise_data.plot('Date',['Confirmed', 'Deaths', 'Recovered'],kind='bar',figsize=(20,15), fontsize=15, rot=30)","1ef12d1d":"latest_nCoV_data","bdb15a5b":"china_latest_data = latest_nCoV_data[latest_nCoV_data['Country']=='China'][['Province\/State','Confirmed','Deaths','Recovered']]\n#data[data.Country == 'China'][['Province\/State', 'Confirmed']].groupby('Province\/State').max()\n# Reset Index\nchina_latest_data.reset_index(drop=True, inplace=True)\nchina_latest_data.index = pd.RangeIndex(start=1, stop=len(china_latest_data['Province\/State']) + 1, step=1)\n\n#formatted_text('***Numbers in China for Confirmed, Deaths and Recovered Cases***')\n\n# Data Glimpse\nchina_latest_data","3961d5d5":"china_latest_data.plot('Province\/State',['Confirmed', 'Deaths', 'Recovered'],kind='bar',figsize=(20,15), fontsize=15)","127f260c":"rest_of_China = china_latest_data[china_latest_data['Province\/State'] !='Hubei'][[\"Province\/State\", \"Confirmed\",\"Deaths\",\"Recovered\"]]\n\n# Reset Index to start from 1\nrest_of_China.reset_index(drop=True, inplace=True)\nrest_of_China.index = pd.RangeIndex(start=1, stop=len(china_latest_data['Province\/State']), step=1)\n\n#formatted_text('***Numbers in rest of China for Confirmed, Deaths and Recovered Cases***')\n\n# Data Glimpse\nrest_of_China","ce462089":"rest_of_China.plot('Province\/State',['Confirmed', 'Deaths', 'Recovered'],kind='bar',figsize=(20,15), fontsize=15)","0d5ce480":"#formatted_text('***Most number of Confirmed Cases Outside of Hubei***')\nprint(rest_of_China[rest_of_China['Confirmed'] > 500])","fee5cd56":"#Rest Of World ","eeac56de":"rest_of_world = CountryWiseData[CountryWiseData['Country'] !='China'][[\"Country\", \"Confirmed\",\"Deaths\",\"Recovered\"]]\n\n# Reset Index\nrest_of_world.reset_index(drop=True, inplace=True)\nrest_of_world.index = pd.RangeIndex(start=1, stop=len(CountryWiseData['Country']), step=1)\n\n#formatted_text('***Numbers in rest of world for Confirmed, Deaths and Recovered Cases***')\n\n# Data Glimpse\nrest_of_world","beca34a5":"#formatted_text('***Most number of Confirmed Cases Outside of China***')\nprint(rest_of_world[rest_of_world['Confirmed'] > 20])","90299934":"rest_of_world.plot('Country',['Confirmed', 'Deaths', 'Recovered'],kind='bar',figsize=(20,15), fontsize=15)","56bc7f12":"data.Country.nunique()","9b6078f6":"#Plots for the field after data cleaning \ndata.plot(subplots=True,figsize=(18,18))\nplt.show()","3ae15a17":"\nfrom datetime import date\ndata_2_feb = latest_nCoV_data[latest_nCoV_data['Date'] > pd.Timestamp(date(2020,2,2))]\ndata_2_feb.head()","aae0e8ce":"import plotly.express as px\npxdf = px.data.gapminder()\n\ncountry_isoAlpha = pxdf[['country', 'iso_alpha']].drop_duplicates()\ncountry_isoAlpha.rename(columns = {'country':'Country'}, inplace=True)\ncountry_isoAlpha.set_index('Country', inplace=True)\ncountry_map = country_isoAlpha.to_dict('index')","76627a62":"def getCountryIsoAlpha(country):\n    try:\n        return country_map[country]['iso_alpha']\n    except:\n        return country\n    ","a13ae2e2":"latest_nCoV_data['iso_alpha'] = latest_nCoV_data['Country'].apply(getCountryIsoAlpha)\nlatest_nCoV_data","12d35886":"data_plot = latest_nCoV_data.groupby('iso_alpha').sum().reset_index()\nfig = px.choropleth(data_plot, locations=\"iso_alpha\",\n                    color=\"Confirmed\", \n                    hover_name=\"iso_alpha\", # column to add to hover information\n                    color_continuous_scale=px.colors.sequential.Plasma)\nfig.show()","464ae412":"latest_nCoV_data.groupby('Country')['Confirmed'].sum()","f7a96b27":"latest_nCoV_data.groupby('Country')['Confirmed'].sum().sort_values(ascending=False)[0:10]\n","462ae29d":"latest_nCoV_data.groupby('Country')['Deaths'].sum().sort_values(ascending=False)","69ab2e90":"#Initial Case time\ndata.sort_values(by='Date')['Date'][0]","83c8fb9e":"#latest Case \nlatest_nCoV_data['Date'].max()","841124ec":"latest_nCoV_data[latest_nCoV_data.Country == 'China'][['Province\/State', 'Confirmed']].groupby('Province\/State').max()","d0385c65":"latest_nCoV_data[['Confirmed', 'Deaths', 'Recovered']].max().plot(kind='bar')","ec473588":"plt.figure(figsize=(12,7))\nchart = sns.countplot(data=latest_nCoV_data, x='Country', palette='Set1')\nchart.set_xticklabels(chart.get_xticklabels(), rotation=45, horizontalalignment='right', fontweight='light');","b86d1c81":"**Converting\n<br>Convert the Date Time stamp to Date<\/br>\n**\n","a5437a44":"<h1>If you like my work Kindly **upvote** the kernel!!<\/h1>","bbbcb79f":"**How many entries are being recorded per Country?**","0750cf49":"<br>**INFREENCES**<\/br>\n\nThere have been many confirmed cases reported outside of Hubei. Zhejiang, Guangdong, Henan, Hunan beng the top four.\n\nThe recovery from the virus outside of Hubei has not been fast. The virus did not match any other known virus. This raised concern because when a virus is new, we do not know how it affects people. However the number of deaths have very minimal.","2190652b":"<h2>**Distribution in China**<\/h2>","d9822342":"<h2>**Day wise distribution (WorldWide) for Confirmed, Deaths and Recovered Cases**<\/h2>","7bd5b9b2":"<h2>**Latest_Data_On_nCoV Virus**<\/h2>","07ef502e":"<h2>**Rest Of China (Excluding Hubei)**<\/h2>","2c6eec38":"**Show the no.of Persons affected with Virus**","a561220a":"<h1>**Implementing EDA**<\/h1>","861f3981":"Contribution from Following Kernels","c44cc411":"**Implementing EDA on the data**","58faa1d7":"(\"** Countries, territories or areas with reported confirmed cases, Deaths, Recovered of 2019-nCoV, 31 January 2020**\")","8dd1d938":"**Which Countries States were affected the most?**","4dbf1565":"<h2>Numbers in rest of world for Confirmed, Deaths and Recovered Cases<\/h2>","c4a802bb":"https:\/\/www.kaggle.com\/ranjithks\/ran-coronavirus-exploratory-data-analysis-eda\n<br>https:\/\/www.kaggle.com\/parulpandey\/wuhan-coronavirus-a-geographical-analysis<\/br>","4a10c5e6":"<h1>**Implementing Data Exploration**<\/h1>","7fc4007c":"**INFERENCES**\n\n<br>Hubei is the worst affected by nCov with almost 95% of cases reported.<\/br>\n<br>The recovery from the virus has not been that rapid. As the number of cases being reported is increasing at a very rapid rate and the virus being a new one proper medical treatment not available to treat the virus could the possible reason for the slowed down recovery. This can also be the reason for the number of deaths increasing day by day. The virus does not match any other known virus. This raised concern because when a virus is new, we do not know how it affects people.","b903053f":"<br><h2>**What is Coronavirus<\/h2>**<\/br>\n2019 Novel Coronavirus (2019-nCoV) is a virus (more specifically, a coronavirus) identified as the cause of an outbreak of respiratory illness first detected in Wuhan, China. Early on, many of the patients in the outbreak in Wuhan, China reportedly had some link to a large seafood and animal market, suggesting animal-to-person spread. However, a growing number of patients reportedly have not had exposure to animal markets, indicating person-to-person spread is occurring. At this time, it\u2019s unclear how easily or sustainably this virus is spreading between people - CDC\n\nThis dataset has daily level information on the number of affected cases, deaths and recovery from 2019 novel coronavirus.\n\nThe data is available from 22 Jan 2020.","3edcabe7":"<br><h2>**Define the Problem**<\/h2><\/br>\nCoronaviruses are a large family of viruses that are common in many different species of animals, including camels, cattle, cats, and bats. Rarely, animal coronaviruses can infect people and then spread between people such as with MERS, SARS, and now with 2019-nCoV.\n\nOutbreaks of novel virus infections among people are always of public health concern. The risk from these outbreaks depends on characteristics of the virus, including whether and how well it spreads between people, the severity of resulting illness, and the medical or other measures available to control the impact of the virus (for example, vaccine or treatment medications).\n\nThis is a very serious public health threat. The fact that this virus has caused severe illness and sustained person-to-person spread in China is concerning, but it\u2019s unclear how the situation in the United States will unfold at this time.\n\nThe risk to individuals is dependent on exposure. At this time, some people will have an increased risk of infection, for example healthcare workers caring for 2019-nCoV patients and other close contacts. For the general American public, who are unlikely to be exposed to this virus, the immediate health risk from 2019-nCoV is considered low. The goal of the ongoing U.S. public health response is to prevent sustained spread of 2019-nCov in this country.\n\n<br><h2>**Precautions**<\/h2><\/br>\nHealth authorities and scientists say the same precautions against other viral illnesses can be used: wash your hands frequently, cover up your coughs, try not to touch your face.\nAnd anyone who does come down with the virus should be placed in isolation.\n\"Considering that substantial numbers of patients with SARS and MERS were infected in health-care settings\", precautions need to be taken to prevent that happening again, the Chinese team warned in The Lancet."}}