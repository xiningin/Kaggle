{"cell_type":{"5e7eadd4":"code","e042adb2":"code","7f1062b3":"code","4ce3aa82":"code","1b6171e7":"code","58acc075":"code","521cdbd6":"code","774ca84d":"code","bd20edf9":"code","31e3bd37":"code","30d2ad29":"code","97ddade1":"code","c9efd3aa":"code","3f760726":"code","6d1e1fe5":"code","0201c24c":"code","51a3d2f7":"code","e0460f98":"code","1ebeead8":"code","fe52a975":"code","d3defd84":"code","ec0fdda3":"code","d38e17ba":"code","f41a95db":"code","719b6d58":"code","93da4dbf":"code","b4bb5c24":"code","4991d236":"code","aa12e456":"code","e4207cdc":"code","69cead6c":"code","7a47ab2d":"code","aac84bf8":"code","57b96990":"markdown","2fcf0b64":"markdown","ef96ca28":"markdown","270f19c5":"markdown","78d772a8":"markdown","53fe5e5f":"markdown","406213a2":"markdown","6ec81949":"markdown","2c9c1710":"markdown","05dbb685":"markdown","fb97c805":"markdown"},"source":{"5e7eadd4":"import numpy as np\nimport pandas as pd\nimport os\nfrom pathlib import Path\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","e042adb2":"# debug mode setting\nis_dev = False\nnrows = 10000","7f1062b3":"# train.csv\ninput_dir = Path('..\/input\/g-research-crypto-forecasting')\nif is_dev:\n    df_train = pd.read_csv(input_dir \/ 'train.csv', nrows=nrows)\nelse:\n    df_train = pd.read_csv(input_dir \/ 'train.csv')\ndf_train.shape","4ce3aa82":"list(df_train.columns)","1b6171e7":"df_train.head()","58acc075":"# check missing value\ndf_train.isnull().sum()","521cdbd6":"df_test = pd.read_csv(input_dir \/ 'example_test.csv')\ndf_test.shape","774ca84d":"df_test.head()","bd20edf9":"df_test.group_num.value_counts()","31e3bd37":"df_sample_submission = pd.read_csv(input_dir \/ 'example_sample_submission.csv')\ndf_sample_submission.shape","30d2ad29":"df_sample_submission.head()","97ddade1":"df_asset = pd.read_csv(input_dir \/ 'asset_details.csv')\ndf_asset.shape","c9efd3aa":"df_asset.head()","3f760726":"if is_dev:\n    df_sup_train = pd.read_csv(input_dir \/ 'supplemental_train.csv', nrows=nrows)\nelse:\n    df_sup_train = pd.read_csv(input_dir \/ 'supplemental_train.csv')\ndf_sup_train.shape","6d1e1fe5":"df_sup_train.head()","0201c24c":"df_sup_train.isnull().sum()","51a3d2f7":"df_train = df_train.merge(df_asset.drop('Weight', axis=1), on='Asset_ID')\ndf_train['timestamp'] = df_train['timestamp'].astype('datetime64[s]')\ndf_train = df_train.sort_values(['timestamp'])\ndf_train.shape","e0460f98":"binance_coin = df_train.query(f'Asset_ID == 0')\nbit_coin = df_train.query(f'Asset_ID == 1')\nbit_cash = df_train.query(f'Asset_ID == 2')\neos_io = df_train.query(f'Asset_ID == 5')\neth_classic = df_train.query(f'Asset_ID == 7')\n\ncurrencies = {'binance_coin': binance_coin,\n              'bit_coin': bit_coin,\n              'bit_cash': bit_cash,\n              'eos_io': eos_io,\n              'eth_classic': eth_classic\n             }","1ebeead8":"import seaborn as sns\nfrom matplotlib import pyplot as plt\nplt.rcParams[\"font.size\"] = 15","fe52a975":"def plot_lines(df, index, columns, title, tail=None):\n    if tail is not None:\n        df_plot = df.copy()[-tail:]\n    else:\n        df_plot = df.copy()\n    df_plot = df_plot.set_index(index)[columns]\n    plt.figure(figsize=(20, 10))\n    if title is not None:\n        plt.title(title)\n    sns.lineplot(data=df_plot)","d3defd84":"index = 'timestamp'\ncolumns = ['Target']\nplot_lines(bit_coin, index, columns, 'bit_coin', tail=100000)","ec0fdda3":"index = 'timestamp'\ncolumns = ['High', 'Open', 'Close', 'Low']\nplot_lines(bit_coin, index, columns, 'bit_coin', tail=1000)","d38e17ba":"def plot_line_dict(dict_df, index, columns, tail=None):\n    i = int(np.ceil(len(dict_df) \/ 2))\n    j = 2\n    fig, axes = plt.subplots(i, j, figsize=(40, 40))\n    keys = dict_df.keys()\n    for idx, key in enumerate(keys):\n        df = dict_df[key]\n        if tail is not None:\n            df_plot = df.copy()[-tail:]\n        else:\n            df_plot = df.copy()\n        df_plot = df_plot.set_index(index)[columns]\n        ax = axes[idx \/\/ j][idx % j]\n        ax.set_title(key)\n        sns.lineplot(data=df_plot, ax=ax)","f41a95db":"plot_line_dict(currencies, index, columns, tail=1000)","719b6d58":"def plot_line_pivot(df, index, divide_col, value, tail=None):\n    if tail is not None:\n        df = df[-tail:]\n    df = pd.pivot_table(df, index=index, columns=[divide_col], values=value)\n    plt.figure(figsize=(20, 10))\n    sns.lineplot(data=df)","93da4dbf":"plot_line_pivot(df_train, index, divide_col='Asset_Name', value='Volume', tail=10000)","b4bb5c24":"df_train['Estimated_Amount'] = df_train['Volume'] * df_train['Close']","4991d236":"df_train.groupby('Asset_Name')['Estimated_Amount'].mean().astype(int).sort_values(ascending=False).plot.bar()","aa12e456":"plot_line_pivot(df_train, index, divide_col='Asset_Name', value='Estimated_Amount', tail=10000)","e4207cdc":"df_train_pivot = df_train.pivot_table(index=['timestamp'], columns=['Asset_Name'], values='Target', aggfunc='max')","69cead6c":"df_train_pivot","7a47ab2d":"tail_num = 1000\narray_scatter_matrix = pd.plotting.scatter_matrix(df_train_pivot.fillna(0).tail(tail_num), alpha=0.2, figsize=(30, 30))","aac84bf8":"corr = df_train_pivot.corr()\nmask = np.zeros_like(corr)\nmask[np.triu_indices_from(mask)] = True\nwith sns.axes_style(\"white\"):\n    f, ax = plt.subplots(figsize=(20, 15))\n    ax = sns.heatmap(corr, mask=mask, square=True, annot=True, cmap=\"YlGnBu\")","57b96990":"# asset_details.csv","2fcf0b64":"## Correlations between Assets","ef96ca28":"# example_test.csv","270f19c5":"# Data Description\nhttps:\/\/www.kaggle.com\/c\/g-research-crypto-forecasting\/data?select=train.csv","78d772a8":"## Amount","53fe5e5f":"# train.csv","406213a2":"# example_sample_submission","6ec81949":"# Plot data","2c9c1710":"## Volume","05dbb685":"# supplemental_train.csv","fb97c805":"# Merge train.csv and asset_details.csv"}}