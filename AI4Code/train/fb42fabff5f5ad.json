{"cell_type":{"e5ad10de":"code","ed90254e":"code","fbb44990":"code","95d263c7":"code","eabfb135":"code","cbab1efb":"code","dc278c7b":"code","404f782e":"code","a6bf367b":"code","171c71a1":"code","c706416f":"markdown","48307aca":"markdown","38351594":"markdown","f32337dd":"markdown","36ab46d8":"markdown","062a3931":"markdown","1646c7ff":"markdown","33e02789":"markdown","2347bbea":"markdown"},"source":{"e5ad10de":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd","ed90254e":"dataset = pd.read_csv('..\/input\/Social_Network_Ads.csv')\nX = dataset.iloc[:, [2,3]].values\ny = dataset.iloc[:, 4].values","fbb44990":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 0)\n","95d263c7":"from sklearn.preprocessing import StandardScaler\nsc_X = StandardScaler()\nX_train = sc_X.fit_transform(X_train)\nX_test = sc_X.transform(X_test)","eabfb135":"from sklearn.tree import DecisionTreeClassifier\nclassifier=DecisionTreeClassifier(criterion=\"entropy\",random_state=0)\nclassifier.fit(X_train,y_train)","cbab1efb":"y_pred=classifier.predict(X_test)\nprint(y_pred)","dc278c7b":"from sklearn.metrics import confusion_matrix\ncm=confusion_matrix(y_test,y_pred)\nprint(cm)\n","404f782e":"from sklearn.metrics import accuracy_score\nacc=accuracy_score(y_test, y_pred)\nprint(acc)","a6bf367b":"from matplotlib.colors import ListedColormap\nX_set, y_set = X_train, y_train\nX1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 1, stop = X_set[:, 0].max() + 1, step = 0.01),\n                     np.arange(start = X_set[:, 1].min() - 1, stop = X_set[:, 1].max() + 1, step = 0.01))\nplt.contourf(X1, X2, classifier.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape),\n             alpha = 0.75, cmap = ListedColormap(('red', 'green')))\nplt.xlim(X1.min(), X1.max())\nplt.ylim(X2.min(), X2.max())\nfor i, j in enumerate(np.unique(y_set)):\n    plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1],\n                c = ListedColormap(('red', 'green'))(i), label = j)\nplt.title('Classifier (Training set)')\nplt.xlabel('Age')\nplt.ylabel('Estimated Salary')\nplt.legend()\nplt.show()","171c71a1":"from matplotlib.colors import ListedColormap\nX_set, y_set = X_test, y_test\nX1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 1, stop = X_set[:, 0].max() + 1, step = 0.01),\n                     np.arange(start = X_set[:, 1].min() - 1, stop = X_set[:, 1].max() + 1, step = 0.01))\nplt.contourf(X1, X2, classifier.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape),\n             alpha = 0.75, cmap = ListedColormap(('red', 'green')))\nplt.xlim(X1.min(), X1.max())\nplt.ylim(X2.min(), X2.max())\nfor i, j in enumerate(np.unique(y_set)):\n    plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1],\n                c = ListedColormap(('red', 'green'))(i), label = j)\nplt.title('Classifier (Test set)')\nplt.xlabel('Age')\nplt.ylabel('Estimated Salary')\nplt.legend()\nplt.show()\n\n","c706416f":"importing library\n*  NumPy is a package in Python used for Scientific Computing. The ndarray (NumPy Array) is a multidimensional array used to store values of same datatype\n* matplotlib.pyplot for data visualization \n* pandas for data manipulation  \n","48307aca":" Feature Scaling","38351594":"importing dataset to x and y","f32337dd":"confusion_matrix","36ab46d8":"fitting model","062a3931":"Predicting a new result","1646c7ff":" Visualising the Training set results\n","33e02789":"Splitting the dataset into the Training set and Test set","2347bbea":" Visualising the Test set results\n"}}