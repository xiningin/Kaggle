{"cell_type":{"87c33c47":"code","7a0fd082":"code","adc172b8":"code","8ec9d53e":"code","85e57824":"code","e6b0f09c":"code","7c8bc56f":"code","b71832b2":"code","3a55faec":"code","45b4e217":"code","94274b6d":"code","2dbf17e5":"code","8995b310":"code","244ad122":"code","0a00df44":"code","d01b2993":"code","582bf7e1":"code","e25e43cc":"code","9fa69d2d":"code","5a0af5e7":"code","49b99732":"code","bee5c603":"code","64e01583":"code","5e57823e":"code","27082282":"code","cc68314b":"code","cba86508":"code","b96b2599":"code","731a2e56":"code","644fe83f":"code","b891d06d":"code","24a83129":"code","911bc953":"code","0a70080c":"markdown","bd289e14":"markdown","ae328026":"markdown","2fc65d2c":"markdown","62c9696b":"markdown","c1d5a9dd":"markdown","b56b2b5a":"markdown"},"source":{"87c33c47":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\n\nimport os\nprint(os.listdir(\"..\/input\"))","7a0fd082":"train =  pd.read_csv('..\/input\/train.csv', nrows = 100_000)\ntest =  pd.read_csv('..\/input\/test.csv')\ntest.shape","adc172b8":"train.head()","8ec9d53e":"print(train.shape)","85e57824":"train.dtypes","e6b0f09c":"train.describe()","7c8bc56f":"print(train.isnull().sum())","b71832b2":"# drop nan\ntrain = train.dropna()\ntest = test.dropna()\nprint(train.shape)","3a55faec":"# drop zero passenger\ntrain = train[train.passenger_count!=0]\ntest = test[test.passenger_count!=0]\nprint(train.shape)","45b4e217":"# drop negative fares\ntrain = train[train.fare_amount>=0]\nprint(train.shape)","94274b6d":"# calculate distance\ndef cal_dis(df):\n    delta_longitude = np.fabs((df.dropoff_longitude - df.pickup_longitude))\n    delta_latitude = np.fabs((df.dropoff_latitude - df.pickup_latitude))\n    dis = np.sqrt(delta_longitude**2 + delta_latitude**2)\n    \n    return dis\n      \ntrain['dis'] = train.apply(cal_dis, axis='columns')\ntest['dis'] = test.apply(cal_dis, axis='columns')\ntrain.head()","2dbf17e5":"# extract 'year' and 'hour' \ndef get_Year(df):\n    y = pd.to_datetime(df.pickup_datetime).year\n\n    return y\n\ndef get_Hour(df):\n    h = pd.to_datetime(df.pickup_datetime).hour\n\n    return h\n\ntrain['year'] = train.apply(get_Year, axis='columns')\ntrain['hour'] = train.apply(get_Hour, axis='columns')\ntest['year'] = test.apply(get_Year, axis='columns')\ntest['hour'] = test.apply(get_Hour, axis='columns')\ntrain.head()","8995b310":"sns.heatmap(train.corr(),annot = True)","244ad122":"plt = sns.boxplot(\n    x='passenger_count',\n    y='fare_amount',\n    data=train\n)\nplt.axes.set_ylim([0, 25])","0a00df44":"train.plot(x='dis',y='fare_amount',kind='scatter')\ntrain.dis.plot.hist()","d01b2993":"# divide the distance region\ntrain = train[train.dis<0.3]\ntrain.dis.plot.hist()\n","582bf7e1":"# drop distance outliers\ntrain = train[train.dis<=0.3]\ntest = test[test.dis<=0.3]\nprint(train.shape)\ntrain.plot(x='dis',y='fare_amount',kind='scatter')","e25e43cc":"# drop distance outliers \ntrain = train[train.dis>=0.001]\ntest = test[test.dis>=0.001]\nprint(train.shape)\ntrain.plot(x='dis',y='fare_amount',kind='scatter')","9fa69d2d":"plt = sns.boxplot(\n    x='year',\n    y='fare_amount',\n    data=train\n)\n\nplt.axes.set_ylim([0, 30])","5a0af5e7":"plt = sns.boxplot(\n    x='hour',\n    y='fare_amount',\n    data=train\n)\n\nplt.axes.set_ylim([0, 25])","49b99732":"print(train.dtypes)\ntrain = train.drop(columns=['key','pickup_datetime'])\ntrain.dtypes\ntrain_y = train['fare_amount']\ntrain_x = train.drop(columns=['fare_amount'])\n","bee5c603":"SaveX = train_x","64e01583":"from sklearn.preprocessing import StandardScaler\nfrom sklearn import linear_model\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.feature_selection import RFECV\nfrom sklearn.metrics import r2_score","5e57823e":"# standarization\ncol_names = train_x.columns\n\nscaler = StandardScaler()\nscaler.fit(train_x) \ntrain_x = scaler.transform(train_x)\ntrain_x = pd.DataFrame(train_x,columns=col_names)\n\nb0 = train_y.mean(axis=0)\ntrain_y -= b0","27082282":"\n\nprint(\"Regular linear regression:\")\nlm = linear_model.LinearRegression(fit_intercept=False)\n#print(\"R2: %8.6f\" \n#      % (np.mean(cross_val_score(lm, train_x[['dis','year','hour', 'passenger_count']], train_y, cv=10, scoring='r2')))) \nlm.fit(train_x[['dis','year','hour', 'passenger_count']], train_y)\nprint(train_x[['dis','year','hour', 'passenger_count']].columns)\nprint(lm.coef_)","cc68314b":"print(\"Ridge regression:\")\nalpha_list = np.arange(0,1000,10)\nr2_list = []\nfor a in alpha_list:\n    ridge = linear_model.Ridge(fit_intercept=False, alpha=a)\n    r2_list.append(np.mean(cross_val_score(ridge, train_x, train_y, cv=10, scoring='r2')))\n\nError = pd.DataFrame(np.stack((alpha_list,r2_list)),index = ['alpha','R2']).T\nError.plot(x='alpha',y='R2',kind='line')","cba86508":"print(\"Lasso regression:\")\nalpha_list = np.arange(0.1,10,0.1)\nr2_list = []\nfor a in alpha_list:\n    lasso = linear_model.Lasso(fit_intercept=False, alpha=a)\n    r2_list.append(np.mean(cross_val_score(lasso, train_x, train_y, cv=10, scoring='r2')))\n\nError = pd.DataFrame(np.stack((alpha_list,r2_list)),index = ['alpha','R2']).T\nError.plot(x='alpha',y='R2',kind='line')","b96b2599":"lm = linear_model.LinearRegression(fit_intercept=False)\nselector = RFECV(lm, step=1, cv=10)\nselector = selector.fit(train_x, train_y)\nprint(selector.support_)\nprint(selector.ranking_)","731a2e56":"print(\"Regular linear regression:\")\nlm = linear_model.LinearRegression(fit_intercept=False)\nprint(\"R2: %8.6f\" \n      % (np.mean(cross_val_score(lm, pd.DataFrame(train_x['dis']), train_y, cv=10, scoring='r2'))))\nprint(\"R2: %8.6f\" \n      % (np.mean(cross_val_score(lm, pd.DataFrame(train_x[['dis','year']]), train_y, cv=10, scoring='r2'))))\nprint(\"R2: %8.6f\" \n      % (np.mean(cross_val_score(lm, pd.DataFrame(train_x[['dis','year','hour']]), train_y, cv=10, scoring='r2'))))\nprint(\"R2: %8.6f\" \n      % (np.mean(cross_val_score(lm, pd.DataFrame(train_x[['dis','year','hour', 'passenger_count']]), \n                                 train_y, cv=10, scoring='r2'))))\nprint(\"R2: %8.6f\" \n      % (np.mean(cross_val_score(lm, pd.DataFrame(train_x[['dis','year','hour', 'passenger_count']]), \n                                 train_y, cv=10, scoring='r2'))))\nprint(\"R2: %8.6f\" \n      % (np.mean(cross_val_score(lm, pd.DataFrame(train_x[['dis','year','hour', 'passenger_count',\n                                                          'pickup_longitude', 'pickup_latitude']]), \n                                 train_y, cv=10, scoring='r2'))))\nprint(\"R2: %8.6f\" \n      % (np.mean(cross_val_score(lm, pd.DataFrame(train_x[['dis','year','hour', 'passenger_count',\n                                                          'pickup_longitude', 'pickup_latitude',\n                                                          'dropoff_longitude', 'dropoff_latitude']]), \n                                 train_y, cv=10, scoring='r2'))))","644fe83f":"lm.coef_","b891d06d":"from sklearn.tree import DecisionTreeRegressor\n\ndepth = np.arange(2,10,1)\nfor i in depth:\n    reg = DecisionTreeRegressor(max_depth=i)\n    print(\"max_depth:%d R2: %8.6f\" % (i, np.mean(cross_val_score(reg, train_x, train_y, cv=10, scoring='r2'))))","24a83129":"from sklearn.ensemble import RandomForestRegressor\n\ndepth = np.arange(2,10,1)\nfor i in depth:\n    rf = RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=i, n_estimators=100)\n    print(\"max_depth:%d R2: %8.6f\" % (i, np.mean(cross_val_score(rf, train_x, train_y, cv=10, scoring='r2'))))","911bc953":"from sklearn.ensemble import GradientBoostingRegressor\n\ngbr = GradientBoostingRegressor(n_estimators=100, learning_rate=0.1,\n      max_depth=1, random_state=0, loss='ls')\n\nprint(\"R2: %8.6f\" % (np.mean(cross_val_score(gbr, train_x, train_y, cv=10, scoring='r2'))))","0a70080c":"## Reference","bd289e14":"## Linear Regression","ae328026":"https:\/\/www.kaggle.com\/dster\/nyc-taxi-fare-starter-kernel-simple-linear-model\n\nhttps:\/\/www.kaggle.com\/breemen\/nyc-taxi-fare-data-exploration","2fc65d2c":"## Data Processing","62c9696b":"## Feature","c1d5a9dd":"## Overview","b56b2b5a":"## Visualization"}}