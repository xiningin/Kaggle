{"cell_type":{"33a87b2b":"code","721d1a2f":"code","8b418d63":"code","55da6ac6":"code","eb804b68":"code","c04baae6":"code","a1705274":"code","974fb35a":"code","2946ddda":"code","bf2bb44c":"code","4f81614e":"code","e99a870f":"code","a2b6e8f9":"code","07c8e826":"code","fe4c9585":"code","5b50029a":"code","a7cf0f48":"code","08d92c81":"code","3fcc7e4c":"code","8df800d7":"code","2d85b45a":"code","10ae9209":"code","4a43c17c":"code","eb384e48":"code","c16011a4":"code","04294344":"code","37d44458":"code","c628254d":"code","61eb4db5":"code","79190a6b":"code","cde4dc9c":"code","83758c17":"code","e1b1fa52":"code","7cbd5176":"code","86798eb3":"markdown","bdfac5d9":"markdown","c20c3226":"markdown"},"source":{"33a87b2b":"import pandas as pd\nimport numpy as np\nimport tensorflow as tf\n\nimport matplotlib.pyplot as plt\nplt.style.use('ggplot')          # python visualization package\nplt.rcParams['figure.dpi']=300   # the resolution in dots per inch\nimport missingno as msno\nimport seaborn as sns\nsns.set_palette('husl')\n\nimport plotly.express as px\nimport plotly.graph_objs as go\nimport plotly.offline as pof                   #plotting offline\nfrom plotly.subplots import make_subplots\n\n\n","721d1a2f":"from tensorflow.python.client import device_lib\n\ndevice_lib.list_local_devices()","8b418d63":"df=pd.read_csv('..\/input\/amazon-top-50-bestselling-books-2009-2019\/bestsellers with categories.csv')\ndf.head()","55da6ac6":"df.describe()    #statistics of columns","eb804b68":"df.info()","c04baae6":"msno.matrix(df,sort=\"descending\", figsize=(8,4))   # graph plots the non-null values","a1705274":"s=df['Name'][df.duplicated(subset=['Name'])==True].value_counts() # duplicate books present\ns","974fb35a":"#pie plot of top 10 books repeating with maximum count\n\nlist_names=df['Name'][df.duplicated(subset=['Name'])==True].value_counts().sort_values(ascending=False)[:10]\n\nnames=list(list_names.index)\nlist_names_count=list(list_names.values)\n\nplt.pie(list_names_count,labels=names)\n# plt.pie(list_names,labels=list_names.index)","2946ddda":"df=df.drop_duplicates(subset=['Name'])  ## dropping duplicate books\ndf.head()","bf2bb44c":"df.info()","4f81614e":"s=df['User Rating'].value_counts() #### Ratings Count\ns","e99a870f":"## ratings\n\ngraph1=go.Bar(x=list(s.index),y=list(s.values),marker=dict(color='rgb(255,165,0)',line=dict(color='rgb(255,165,0)',width=1.5)))\nlayout=go.Layout(template=\"plotly_dark\",title='rating count',xaxis=dict(title='ratings'),yaxis=dict(title='counts'))\n\n\nfig=go.Figure(data=[graph1],layout=layout)\nfig.show()","a2b6e8f9":"# px.bar(df['User Rating'].value_counts().reset_index(),x='index',y='User Rating',title='rating count')\n##better use graph objects in plotly for manual labelling","07c8e826":"# ### top 10 authors with most numbers of books\n\nt=df['Author'].value_counts()[:10]\nt.head(10)","fe4c9585":"def pie_plot():\n    graph2=go.Pie(values=t.values,labels=t.index,title='top 10 authors',hoverinfo='percent+value', \n                  textinfo='percent',textposition='inside',hole=0.8,showlegend=True)\n    fig=go.Figure(data=[graph2])\n    fig.show()\n\npie_plot()","5b50029a":"## books vs reviews\n# Top 10 books with reviews\n\nc=df.sort_values(by='Reviews',ascending=False)[:10][['Name','Reviews']]\nc.head()","a7cf0f48":"graph3=go.Bar(x=c.Name,y=c.Reviews,marker=dict(color='rgb(255,165,0)',line=dict(color='rgb(255,165,0)',width=1.5)))\nlayout=go.Layout(title='Top 10 books with reviews',xaxis=dict(title='book name'),yaxis=dict(title='reviews'),width=1000,height=1000)\nfig=go.Figure(data=[graph3],layout=layout)\nfig.show()\n","08d92c81":"### price visualization\n# creating bins of prices\nbins=pd.qcut(df.Price,10)\nbins","3fcc7e4c":"t=df[['Name','Price']]\nt['bins']=bins\nt.head()","8df800d7":"# prices\nplt.figure(figsize=(5,5))\nplt.hist(t['Price'].values,bins=10)","2d85b45a":"## Years with number of books published\nsns.set(rc={'figure.figsize': (10,8)})\nsns.countplot(df.Year)","10ae9209":"### Genre vs user Ratings\nt=df[['Genre','User Rating']].groupby('Genre')['User Rating'].value_counts()\n# fic_counts,non_fic_counts=[t[i] for i in t.index if i[0]=='Fiction'],[t[i] for i in t.index if i[0]=='Non Fiction']\nt","4a43c17c":"## fiction and non-fiction group\nf=df[['User Rating']][df['Genre']=='Fiction'].reset_index(drop=True)\nnf=df[['User Rating']][df['Genre']=='Non Fiction'].reset_index(drop=True)\n","eb384e48":"## user rating vs fiction visualization\nsns.countplot(f['User Rating'])\nplt.title('Fiction')\nplt.show()","c16011a4":"## user rating vs non-fiction visualization\n\nsns.countplot(nf['User Rating'])\nplt.title('Non- Fiction')\nplt.show()","04294344":"df.head()","37d44458":"##Total 10 counts of books written by authors\n\n# go.Bar(x=c.Name,y=c.Reviews,marker=dict(color='rgb(255,165,0)',line=dict(color='rgb(255,165,0)',width=1.5)))\n\nz=df[['Author','Name']].groupby('Author')\nz.get_group('Jeff Kinney').value_counts()","c628254d":"author_list=list(df['Author'].unique())\nbooks_count_with_author=[(sum(list((z.get_group(x).value_counts().values))),x) for x in author_list]\nbooks_count_with_author=sorted(books_count_with_author, key=lambda x:x[0], reverse = True)\nbooks_count,authors=[x[0] for x in books_count_with_author][:10],[x[1] for x in books_count_with_author][:10]\nprint(books_count,authors)\n\n\ngraph4=go.Line(x=authors,y=books_count,marker=dict(color=\"rgb(255,0,123)\",line=dict(color=\"rgb(255,10,145)\",width=2.0)))\nlayout4=go.Layout(template='plotly_dark',xaxis=dict(title='authors'),yaxis=dict(title='book counts'),title='Total no.of books written by each author')\nfig=go.Figure([graph4],layout=layout4)\nfig.show()\n","61eb4db5":"### price vs reviews vs year\n\nfig = make_subplots(rows=1, cols=2, subplot_titles=(\"Plot 1\", \"Plot 2\"))\n\nfig.add_trace(go.Scatter(x=df['Price'].values,y=df['Reviews'].values,mode='markers',name='price vs reviews'),row=1,col=1)\nfig.update_xaxes(title_text='price', row=1, col=1)\nfig.update_yaxes(title_text='reviews', row=1, col=1)\n\nfig.add_trace(go.Bar(x=df['Price'].values,y=df['Year'].values,name='price vs years'),row=1,col=2)\nfig.update_xaxes(title_text='price', row=1, col=2)\nfig.update_yaxes(title_text='year', row=1, col=2)\n\nfig.update_layout(\n    title=\"price vs reviews vs year\",\n    font=dict(\n        family=\"Courier New, monospace\",\n        size=18,\n        color=\"RebeccaPurple\"\n    ),\n)","79190a6b":"px.scatter(df,x='Price',y='Reviews',color='Year')  ## plotly express api visualization","cde4dc9c":"### price vs reviews vs Genre\npx.scatter(df,x='Price',y='Reviews',color='Genre')","83758c17":"df.info()","e1b1fa52":"### Year vs Genre\n# matplotlib visualization\n\nlist(zip(df['Genre'][df['Year']==2016].value_counts().index,df['Genre'][df['Year']==2016].value_counts().values))","7cbd5176":"unique_years=list(df['Year'].unique())\nX = np.arange(len(df['Year'].unique()))\nbarWidth=0.25\ncounts=[]\nfor year in unique_years:\n    counts.append(list(df['Genre'][df['Year']==year].value_counts().values))\ncounts=np.array(counts)\n\nplt.bar(X,counts[:,0],color ='r',width = barWidth,edgecolor='grey',label='non-fiction')\nplt.bar(X+0.25,counts[:,1],color='b',width = barWidth,edgecolor='grey',label='fiction')\nplt.xticks([i+0.25 for i in range(len(unique_years))],unique_years)\nplt.legend()","86798eb3":"### Visualizations","bdfac5d9":"### let's view the data ","c20c3226":"## data visualizations with plotly,seaborn,matplotlib"}}