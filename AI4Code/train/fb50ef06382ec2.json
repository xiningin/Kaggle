{"cell_type":{"68c320f3":"code","e24b73e7":"code","3f8db0cb":"code","941db6b1":"code","37531a2f":"code","3f372389":"code","731109c7":"code","a77874fa":"code","7b92ef94":"code","c7db35d2":"code","4e91c65d":"code","2f5dad7d":"code","cc63fd50":"code","b17abe2b":"code","8eccb066":"code","91421df9":"code","6a57e3a8":"code","090b3f81":"code","183e0685":"code","e42c3de4":"code","0c285924":"code","3c65f97c":"code","beec2f32":"code","4676476d":"code","6d6c978b":"code","3b993277":"code","5e758972":"code","16d3b120":"code","d4391109":"code","a460617d":"code","28884817":"code","e98d226e":"code","5201e97e":"code","eba1631a":"code","ad801d2e":"code","471e3e87":"code","45d564d8":"code","bc4f4391":"code","9d433fc6":"code","722e95a6":"code","b7309770":"code","095700f3":"code","7f01527a":"code","b98fcf96":"code","39c6ead0":"code","da6c9e31":"code","4d9fe772":"code","b505c9c1":"code","d949d8ee":"code","30c633b2":"code","d0d7711a":"code","aaf04da0":"code","cfaa5f32":"code","1fbe5537":"markdown","30814ed1":"markdown","eebe50f3":"markdown","d4393683":"markdown","badf2360":"markdown","2f87c20c":"markdown","9543ec11":"markdown","03d69f28":"markdown","4efd0c98":"markdown","20085187":"markdown","34858010":"markdown","4fb7553c":"markdown","f2da9148":"markdown","cd92a70b":"markdown","da548aab":"markdown","46414db5":"markdown","8f4d51cb":"markdown","45073703":"markdown","392539bd":"markdown","0f32ed6b":"markdown","d4f2424e":"markdown","0103cae1":"markdown","675d0ba1":"markdown","447c7011":"markdown","855e3576":"markdown","715a5bfa":"markdown","8a16fccf":"markdown","57d5de24":"markdown","6df08a2a":"markdown","013d8f9f":"markdown","5aef37dd":"markdown","004ff710":"markdown","b702586d":"markdown","5f266089":"markdown","9d296276":"markdown","5618f6e5":"markdown","cfca1ad9":"markdown","c3747cca":"markdown","b551600e":"markdown","0808a25a":"markdown","871322eb":"markdown","2e0b15b7":"markdown","82e149fb":"markdown","8c7534c1":"markdown","2a94a102":"markdown","3c80e23f":"markdown","bc862d05":"markdown","461e5a1f":"markdown","57acd3c5":"markdown","87b660a7":"markdown","5256a6d5":"markdown","17a615c9":"markdown"},"source":{"68c320f3":"import os\nimport datetime as dt\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","e24b73e7":"def generate_table_summary(data, data_name):\n    print('The number of \\'{}\\' rows is {}'.format(data_name, data.shape[0]))\n    print('')\n    print('Column names and data types:')\n    print(data.dtypes)\n\ndef generate_cum_plot(data, date_col, data_name):\n    pd.DataFrame(1, index=data[date_col], columns=[data_name]).sort_index().cumsum().plot()\n    plot_title = 'Cumulative Count of {} over Time'.format(data_name)\n    plt.title(plot_title)\n    plt.xlabel('Date')\n    plt.xlabel('Cumulative Count')\n    plt.savefig('{}.jpg'.format(plot_title.replace(' ', '').replace('\/','')))\n    plt.show()\n    \ndef create_group_by_counts(data, \n                           group_by_col, group_by_name,\n                           count_col, count_name, \n                           hist_cut_off, bin_numbers):\n    group_by_counts = data.groupby(group_by_col)[count_col].count().sort_values(ascending=False)\n    print('The number of unique \\'{} by {}\\' is {}'.format(count_name, group_by_name , len(group_by_counts)))\n    print(group_by_counts.head(10))\n    \n    group_by_counts[group_by_counts < hist_cut_off].hist(bins=bin_numbers)\n    plot_title = 'Histogram of {} by {}'.format(group_by_name, count_name)\n    plt.title(plot_title)\n    plt.xlabel(count_name)\n    plt.ylabel(group_by_name)\n    plt.savefig('{}.jpg'.format(plot_title.replace(' ', '').replace('\/','')))\n    plt.show()\n    \n    return group_by_counts\n\ndef collect_actors_activities(actors, actor_id):\n    activities = pd.DataFrame(np.concatenate((actors[[actor_id]].merge(\n                                                               questions[['questions_author_id', 'questions_date_added']], \n                                                               left_on=actor_id, right_on='questions_author_id', how='inner').values[:,[0,2]],\n                                                           actors[[actor_id]].merge(\n                                                               answers[['answers_author_id', 'answers_date_added']], \n                                                               left_on=actor_id, right_on='answers_author_id', how='inner').values[:,[0,2]],\n                                                           actors[[actor_id]].merge(\n                                                               comments[['comments_author_id', 'comments_date_added']], \n                                                               left_on=actor_id, right_on='comments_author_id', how='inner').values[:,[0,2]]), \n                                                          axis=0), \n                                           columns=[actor_id, 'activity_time'])\n    activities['activity_date'] = activities['activity_time'].dt.date\n    activities_df = activities.groupby(\n        [actor_id, 'activity_date'])['activity_time'].count().reset_index().pivot(\n        values='activity_time', columns=actor_id, index='activity_date')\n    return activities_df\n\ndef plot_temporal_active_actors(activities_df, activity_days, actor_name):\n    activities_df.rolling(window=activity_days, min_periods=1).sum().count(axis=1).plot()\n    plot_title = '{}-day windowed Active {} over Time'.format(activity_days, actor_name)\n    plt.title(plot_title)\n    plt.xlabel('Date')\n    plt.ylabel('Active {}'.format(actor_name))\n    plt.savefig('{}.jpg'.format(plot_title.replace(' ', '').replace('\/','')))\n    plt.show()","3f8db0cb":"# Input data files are available in the \"..\/input\/\" directory.\ninput_dir = \"..\/input\"\nprint(\"\\n\".join(os.listdir(input_dir)))","941db6b1":"# Load all data tables to explore #\n\ncareer_village_dir = os.path.join(input_dir,'data-science-for-good-careervillage')\n\nprofessionals = pd.read_csv(os.path.join(career_village_dir, 'professionals.csv'), parse_dates=True)\nstudents = pd.read_csv(os.path.join(career_village_dir, 'students.csv'))\nschool_memberships = pd.read_csv(os.path.join(career_village_dir, 'school_memberships.csv'))\ngroups = pd.read_csv(os.path.join(career_village_dir, 'groups.csv'))\ngroup_memberships = pd.read_csv(os.path.join(career_village_dir, 'group_memberships.csv'))\nquestions = pd.read_csv(os.path.join(career_village_dir, 'questions.csv'))\nanswers = pd.read_csv(os.path.join(career_village_dir, 'answers.csv'))\nemails = pd.read_csv(os.path.join(career_village_dir, 'emails.csv'))\nmatches = pd.read_csv(os.path.join(career_village_dir, 'matches.csv'))\ncomments = pd.read_csv(os.path.join(career_village_dir, 'comments.csv'))\ntags = pd.read_csv(os.path.join(career_village_dir, 'tags.csv'))\ntag_users = pd.read_csv(os.path.join(career_village_dir, 'tag_users.csv'))\ntag_questions = pd.read_csv(os.path.join(career_village_dir, 'tag_questions.csv'))\n\n# Convert string dates to date time objects #\n\nprofessionals['professionals_date_joined'] = pd.to_datetime(professionals['professionals_date_joined'])\nstudents['students_date_joined'] = pd.to_datetime(students['students_date_joined'])\nquestions['questions_date_added'] = pd.to_datetime(questions['questions_date_added'])\nanswers['answers_date_added'] = pd.to_datetime(answers['answers_date_added'])\nemails['emails_date_sent'] = pd.to_datetime(emails['emails_date_sent'])\ncomments['comments_date_added'] = pd.to_datetime(comments['comments_date_added'])","37531a2f":"generate_table_summary(professionals, data_name='professionals')\nprofessionals.sample(5)","3f372389":"generate_cum_plot(professionals, date_col='professionals_date_joined', data_name='Professionals')","731109c7":"professionals_location_counts = create_group_by_counts(data=professionals, \n                                                       group_by_col='professionals_location', group_by_name = 'Locations',\n                                                       count_col='professionals_id', count_name='Professional Numbers',\n                                                       hist_cut_off=50, bin_numbers=50)","a77874fa":"professionals_industry_counts = create_group_by_counts(data=professionals, \n                                                       group_by_col='professionals_industry', group_by_name = 'Industries',\n                                                       count_col='professionals_id', count_name='Professional Numbers',\n                                                       hist_cut_off=50, bin_numbers=50)","7b92ef94":"professionals_headline_counts = create_group_by_counts(data=professionals, \n                                                       group_by_col='professionals_headline', group_by_name = 'Headlines',\n                                                       count_col='professionals_id', count_name='Professional Numbers',\n                                                       hist_cut_off=50, bin_numbers=50)","c7db35d2":"professional_activities_df = collect_actors_activities(actors=professionals, actor_id='professionals_id')\nprofessional_activities_df.index = pd.to_datetime(professional_activities_df.index)\nplot_temporal_active_actors(professional_activities_df, activity_days= 365, actor_name='Professionals')\nplot_temporal_active_actors(professional_activities_df, activity_days= 30, actor_name='Professionals')\nplot_temporal_active_actors(professional_activities_df, activity_days= 7, actor_name='Professionals')","4e91c65d":"generate_table_summary(students, data_name='students')\nstudents.sample(5)","2f5dad7d":"generate_cum_plot(students, date_col='students_date_joined', data_name='Students')","cc63fd50":"students_location_counts = create_group_by_counts(data=students, \n                                                  group_by_col='students_location', group_by_name = 'Locations',\n                                                  count_col='students_id', count_name='Student Numbers',\n                                                  hist_cut_off=50, bin_numbers=50)","b17abe2b":"print('The number of professionals in India is {}'.format(\n    professionals.dropna(subset=['professionals_location']).apply(lambda row: row['professionals_location'].lower().find('india')>=0, axis=1).sum()))","8eccb066":"student_activities_df = collect_actors_activities(actors=students, actor_id='students_id')\nstudent_activities_df.index = pd.to_datetime(student_activities_df.index)\nplot_temporal_active_actors(student_activities_df, activity_days= 365, actor_name='Students')\nplot_temporal_active_actors(student_activities_df, activity_days= 30, actor_name='Students')\nplot_temporal_active_actors(student_activities_df, activity_days= 7, actor_name='Students')","91421df9":"generate_table_summary(school_memberships, data_name='school memberships')\nschool_memberships.head(3)","6a57e3a8":"school_memberships_counts = create_group_by_counts(data=school_memberships, \n                                                   group_by_col='school_memberships_school_id', group_by_name = 'Schools',\n                                                   count_col='school_memberships_user_id', count_name='User Numbers',\n                                                   hist_cut_off=50, bin_numbers=50)","090b3f81":"generate_table_summary(groups, data_name='groups')\ngroups.head(3)","183e0685":"group_type_counts = create_group_by_counts(data=groups, \n                                           group_by_col='groups_group_type', group_by_name = 'Group Types',\n                                           count_col='groups_id', count_name='Group Numbers',\n                                           hist_cut_off=50, bin_numbers=50)","e42c3de4":"generate_table_summary(group_memberships, data_name='group memberships')\ngroup_memberships.head(3)","0c285924":"group_memberships_counts = create_group_by_counts(data=group_memberships, \n                                                  group_by_col='group_memberships_group_id', group_by_name = 'Groups',\n                                                  count_col='group_memberships_user_id', count_name='User Numbers',\n                                                  hist_cut_off=200, bin_numbers=100)","3c65f97c":"generate_table_summary(questions, data_name='questions')\nquestions.sample(3)","beec2f32":"generate_cum_plot(questions, date_col='questions_date_added', data_name='Questions')","4676476d":"print('The average number of questions that a student asks on the website is {}'.format(round(questions.groupby('questions_author_id')['questions_id'].count().mean(), 0)))\nquestions_authors_counts = create_group_by_counts(data=questions, \n                                                  group_by_col='questions_author_id', group_by_name = 'Users',\n                                                  count_col='questions_id', count_name='Question Numbers',\n                                                  hist_cut_off=200, bin_numbers=100)","6d6c978b":"generate_table_summary(answers, data_name='answers')\nanswers.sample(3)","3b993277":"generate_cum_plot(answers, date_col='answers_date_added', data_name='Answers')","5e758972":"print('The average number of answers for each contributing professional {}'.format(round(answers.groupby('answers_author_id')['answers_id'].count().mean(), 0)))\nanswers_authors_counts = create_group_by_counts(data=answers, \n                                                  group_by_col='answers_author_id', group_by_name = 'Users',\n                                                  count_col='answers_id', count_name='Answer Numbers',\n                                                  hist_cut_off=200, bin_numbers=100)","16d3b120":"print('The average number of answers for each responsed question {}'.format(round(answers.groupby('answers_question_id')['answers_id'].count().mean(), 0)))\nanswers_questions_counts = create_group_by_counts(data=answers, \n                                                  group_by_col='answers_question_id', group_by_name = 'Questions',\n                                                  count_col='answers_id', count_name='Answer Numbers',\n                                                  hist_cut_off=200, bin_numbers=100)\nanswers_questions_counts.describe()","d4391109":"answers_by_professionalss = answers.merge(professionals, left_on='answers_author_id', right_on='professionals_id', how='inner')\nprint('The percentage of answers from professionals is {}'.format(round(100.0 * answers_by_professionalss.shape[0] \/ answers.shape[0], 2)))\nanswers_by_students = answers.merge(students, left_on='answers_author_id', right_on='students_id', how='inner')\nprint('The percentage of answers from students is {}'.format(round(100.0 * answers_by_students.shape[0] \/ answers.shape[0], 2)))","a460617d":"snap_shot_date = dt.datetime(2018, 7, 1)\nprint('The snapshot date is {}'.format(snap_shot_date))\n\nquestions_july_2018 = questions[questions['questions_date_added'] >= snap_shot_date]\nprint('The number of questions after the snap shot date is {}'.format(questions_july_2018.shape[0]))\nprint('Compared to the full data set, the percentage of questions after the snap shot date is {}%'.format(round((100.0 * questions_july_2018.shape[0]) \/ questions.shape[0], 2)))\n\nanswers_july_2018 = answers[answers['answers_date_added'] >= snap_shot_date]\nprint('The number of answers after the snap shot date is {}'.format(answers_july_2018.shape[0]))\nprint('Compared to the full data set, the percentage of answers after the snap shot date is {}%'.format(round((100.0 * answers_july_2018.shape[0]) \/ answers.shape[0], 2)))","28884817":"professional_activities_df_before_july_2018_df = professional_activities_df.iloc[:professional_activities_df.index.get_loc(snap_shot_date)-1]\nprofessional_activities_df_before_july_2018 = pd.DataFrame(\n    professional_activities_df_before_july_2018_df.sum(axis=0).values, index=professional_activities_df_before_july_2018_df.columns, columns=['100000_day_activity_count'])\nprofessional_activities_df_before_july_2018['365_day_activity_count'] = professional_activities_df_before_july_2018_df.iloc[-365:].sum(axis=0)\nprofessional_activities_df_before_july_2018['30_day_activity_count'] = professional_activities_df_before_july_2018_df.iloc[-30:].sum(axis=0)\nprofessional_activities_df_before_july_2018.dropna().sort_values(by='100000_day_activity_count', ascending=False).head(10)\n\nactivities_answers_july_2018 = answers_july_2018.merge(professional_activities_df_before_july_2018.reset_index(), left_on='answers_author_id', right_on='professionals_id', how='outer')\nprofessionals_with_answers_july_2018 = activities_answers_july_2018.dropna(subset=['answers_id'])[professional_activities_df_before_july_2018.columns]\nprint('Activities of Professionals with Answers:\\n{}'.format(professionals_with_answers_july_2018.mean()))\nprint('Activities of Professionals Overall:\\n{}'.format(professional_activities_df_before_july_2018.mean()))","e98d226e":"generate_table_summary(emails, data_name='emails')\nemails.sample(5)","5201e97e":"generate_cum_plot(emails, date_col='emails_date_sent', data_name='Emails')","eba1631a":"emails.groupby(['emails_frequency_level'])['emails_id'].count().plot.bar()\nplt.savefig('volumes_of_each_emails_frequency_level.jpg')","ad801d2e":"emails_recipients_counts = create_group_by_counts(data=emails, \n                                                  group_by_col='emails_recipient_id', group_by_name = 'Users',\n                                                  count_col='emails_id', count_name='Email Numbers',\n                                                  hist_cut_off=200, bin_numbers=100)","471e3e87":"generate_table_summary(matches, data_name='matches')\nmatches.head(3)","45d564d8":"matches_emails_counts = create_group_by_counts(data=matches, \n                                                  group_by_col='matches_email_id', group_by_name = 'Emails',\n                                                  count_col='matches_question_id', count_name='Question Numbers',\n                                                  hist_cut_off=200, bin_numbers=100)\nprint('The average number of recommended questions in each email is {}'.format(round(matches_emails_counts.mean(),0)))\nprint('The number of emails that have at most 3 recommendations is {}'.format(matches_emails_counts[matches_emails_counts <=3].shape[0]))","bc4f4391":"matches_questions_counts = create_group_by_counts(data=matches, \n                                                  group_by_col='matches_question_id', group_by_name = 'Questions',\n                                                  count_col='matches_email_id', count_name='Email Numbers',\n                                                  hist_cut_off=200, bin_numbers=100)\nprint('The average number of emails sent for each question is {}'.format(round(matches_questions_counts.mean(),0)))","9d433fc6":"ml_data_dir = os.path.join(input_dir,'cv-machine-learning-data-construction')\nexamples = pd.read_parquet(os.path.join(ml_data_dir,'positive_negative_examples.parquet.gzip'))\nexamples['emails_date'] = examples['emails_date_sent'].dt.date\nmatches_per_email = examples.groupby(['answer_user_id', 'emails_date'])['questions_id'].count().reset_index()","722e95a6":"print('The average number of questions that a professional could receive on an active day is {}'.format(round(matches_per_email['questions_id'].mean())))\nmatches_per_email[matches_per_email['questions_id'] <= 50]['questions_id'].hist(bins=50)\nplot_title = 'The distribution of questions in emails per professional in an active day'\nplt.title(plot_title)\nplt.xlabel('Number of questions on an active day')\nplt.xlabel('Cumulative Count')\nplt.savefig('questions_in_emails_per professional_in_an_active_day.jpg')\nplt.show()","b7309770":"generate_table_summary(comments, data_name='comments')\ncomments.sample(5)","095700f3":"generate_cum_plot(comments, date_col='comments_date_added', data_name='Comments')","7f01527a":"comments_authors_counts = create_group_by_counts(data=comments, \n                                                  group_by_col='comments_author_id', group_by_name = 'Users',\n                                                  count_col='comments_id', count_name='Comment Numbers',\n                                                  hist_cut_off=200, bin_numbers=100)\ncomments_authors_counts.describe()","b98fcf96":"comments_qa_counts = create_group_by_counts(data=comments, \n                                                  group_by_col='comments_parent_content_id', group_by_name = 'Questions\/Answers',\n                                                  count_col='comments_id', count_name='Comment Numbers',\n                                                  hist_cut_off=200, bin_numbers=100)\ncomments_qa_counts.describe()","39c6ead0":"generate_table_summary(tags, data_name='tags')\ntags.sample(10)","da6c9e31":"tags.merge(tag_questions, left_on='tags_tag_id', right_on='tag_questions_tag_id').groupby(\n    'tags_tag_name')['tag_questions_question_id'].count().sort_values(ascending=False).head(10)","4d9fe772":"tags.merge(tag_users, left_on='tags_tag_id', right_on='tag_users_tag_id').groupby(\n    'tags_tag_name')['tag_users_user_id'].count().sort_values(ascending=False).head(10)","b505c9c1":"generate_table_summary(tag_users, data_name='tag users')\ntag_users.head(3)","d949d8ee":"tags_users_counts = create_group_by_counts(data=tag_users, \n                                           group_by_col='tag_users_user_id', group_by_name = 'Users',\n                                           count_col='tag_users_tag_id', count_name='Tag Numbers',\n                                           hist_cut_off=200, bin_numbers=100)\ntags_users_counts.describe()\nprint('The number of tag registering users having at most 3 tags is {}'.format(sum(tags_users_counts<=3)))","30c633b2":"professionals.merge(tags_users_counts.reset_index(), left_on='professionals_id', right_on='tag_users_user_id', how='inner').shape[0]","d0d7711a":"students.merge(tags_users_counts.reset_index(), left_on='students_id', right_on='tag_users_user_id', how='inner').shape[0]","aaf04da0":"generate_table_summary(tag_questions, data_name='tag questions')\ntag_questions.head(3)","cfaa5f32":"tag_questions_counts = create_group_by_counts(data=tag_questions, \n                                                  group_by_col='tag_questions_question_id', group_by_name = 'Questions',\n                                                  count_col='tag_questions_tag_id', count_name='Tag Numbers',\n                                                  hist_cut_off=200, bin_numbers=100)\ntag_questions_counts.describe()","1fbe5537":"** Around 10% of question and answer data will be used for performance test. **","30814ed1":"The number of professionals in India is 1231","eebe50f3":"** Each question on average has 3 tags. The tag distribution across questions is also skewed. **","d4393683":"## II.11. Tags ##","badf2360":"** [The current tag-based recommendation system](https:\/\/www.kaggle.com\/c\/data-science-for-good-careervillage\/discussion\/84845#latest-510508) sends questions to professionals through emails. Together with the question growth, the sent emails also increases exponentially over time. As questions keep increasing, the professionals can be overwhelmed by the requests. Therefore, building a good recommediation engine is very important to reduce the numbers of recommendations and emails sent to professionals and keep them engaged. **","2f87c20c":"** The average number of matches (i.e. recommended questions) in each email is 2.0. Most of them have at most 3 recommendations. **","9543ec11":"# II. Data Tables #","03d69f28":"** Each contributing professional on average creates 5 answers. However, the distribution is skewed since some professionals have contributed more than 200 answers. **","4efd0c98":"## II.10. Comments ##","20085187":"** Most of professionals have registered for their interested tags, i.e. 25594 out of 28152 professionals. **","34858010":"** Professionals who contributed answers in the test period are more active than others in the past. This analysis demonstrates the predictive power of rolling window activity counts. **","4fb7553c":"## II.1. Professionals ##","f2da9148":"** The average number of emails sent for each question is 197.0 **","cd92a70b":"** The comment distribution across questions\/answers is also skewed. **","da548aab":"** Since professionals join the website at different times and can register for 3 different email frequency levels, the distribution of the number of emails that each professional receives is also skewed. ** ","46414db5":"** Compared to professionals location and industry, the distribution of professionals headlines is the most skewed one. It is more likely that professionals are allowed to list their headlines in a free-text form. **","8f4d51cb":"** The distribution of these professionals across industries is also skewed. A large portion of them are working in Information Technology,Telecommunications, and Computer Software. **","45073703":"** The distribution of the numbers of tags registered by each user is skewed. Most users register for a very small number of tags. For example, the number of users who registered at most 3 tags is 18142. This sparsity of tag information could be one of the reasons to move away from tag-based recommendation methods. Historical activities and texts could provide more information to match questions to professionals. **","392539bd":"** Professionals can register for different email frequency levels. Most of them are on the daily or immediately basis. **","0f32ed6b":"** Not many website members register their school memberships. The number of members in a school on average is relative small. Most of groups have 1 or 2 members. **","d4f2424e":"** Commenting is less active than questioning and answering. ** ","0103cae1":"## II.8. Emails ##","675d0ba1":"** Some students also contribute answers to the website. **","447c7011":"# I. EDA Functions #","855e3576":"** Three plots below explore the number of active professionals over yearly, monthly, and weekly time rolling windows. A professional is active if she or he makes at least one one contribution to the website, i.e. a question, an answer, or a comment. Across all three time rolling windows, CareerVillage enjoys a healthy growth of active professionals starting significantly from 2016. **","715a5bfa":"** Matches are recommendations sent to professionals in emails. **","8a16fccf":"## II.5. Group Memberships ##","57d5de24":"** Only a smaller portion of students registered their interested tags, i.e. 4608 out of 30971 students. **","6df08a2a":"** The number of groups is low and most of them belong to 'youth program.' **","013d8f9f":"## II.9. Matches ##","5aef37dd":"## II.6. Questions ##","004ff710":"** There are some large groups with more than 30 members. **","b702586d":"** Below is a cumulative count of professionals joined the website over time. The number of professionals increases exponentially with a acceleration period starting from 2016. **","5f266089":"## II.12. Tag Users ##","9d296276":"** Below is a cumulative count of questions created over time. Similar to the growth of students and professionals, the number of questions increases exponentially with a acceleration period starting from 2016. **","5618f6e5":"** Top 10 tags registered by users **","cfca1ad9":"## II.4. Groups ##","c3747cca":"** In many inactive days, professionals receive no recommendation emails. Since some professionals register for the immediate email frequency (i.e. the possibility of receiving multiple emails on a day), on an active day a professional could receive 7 questions on average. ** ","b551600e":"** Each question that was responsed has 2 answers on average. However, the distribution is also skewed since some questions have more than 20 answers. **","0808a25a":"## II.3. School Memberships ##","871322eb":"** Not all students joining the website ask for career advice. Only 12329 students out of 30971 have at least one question. On average, a student who actively seek for career advice ask 2 questions. However, the distribution is very skewed, top active students can have more than 40 questions. **","2e0b15b7":"** Below is a cumulative count of answers over time. Matching with the question growth, the number of answers increases exponentially with a acceleration period starting from 2016. **","82e149fb":"## II.2. Students ##","8c7534c1":"** Top 10 tags used by questions **","2a94a102":"** The comment distribution across members is also skewed. Some made more than 100 comments while most of them have only one comment. **","3c80e23f":"** Below is a cumulative count of students joined the website over time. Similar to professionals, the number of students increases exponentially with a acceleration period starting from 2016. **","bc862d05":"** Three plots below explore the number of active students over yearly, monthly, and weekly time rolling windows. A student is active if she or he makes at least one one contribution to the website, i.e. a question, an answer, or a comment. The monthly and weekly active students are low but it could be that after joining the website for career advice and collecting relevant information, they move on and focus on building up their careers. **","461e5a1f":"** The location distribution of these students is also more concentrated at some large cities across USA such as New York and California and India such as Bengaluru and Hyderabad. For career advice questions that are country-specific, students in India could be underserved by their country's professionals. The total number of professionals who registered locations in India is 1231. ** ","57acd3c5":"** Below we explore some characteristics of members that answered questions from July 2018, our selected test period for recommendation performance discuss later in other notebooks. **","87b660a7":"## II.13. Tag Questions ##","5256a6d5":"** The location distribution of these professionals is more concentrated at large cities across USA such as New York and California. ** ","17a615c9":"## II.7. Answers ##"}}