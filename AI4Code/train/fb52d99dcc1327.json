{"cell_type":{"be06dd63":"code","8f0f148e":"code","524e06b3":"code","16d174c2":"code","25bfac3b":"code","98f144ed":"code","8f0ae018":"code","ff01befb":"code","c0833a27":"code","6bcdf33a":"code","529aa2ac":"code","ba5ae55d":"code","07940336":"code","29e41ff6":"code","2b382af3":"code","39e5c833":"code","f00cdfc8":"code","a7d3c367":"code","3f08585e":"code","3f7f48d3":"code","816ccd74":"code","5409c255":"code","474c2dba":"code","d0b52646":"code","82fd7715":"markdown"},"source":{"be06dd63":"import numpy as np\nimport pandas as pd\nimport tensorflow as tf\nimport keras\nfrom keras.layers import Conv2D\nfrom keras.layers import MaxPooling2D\nfrom keras.layers import Dropout\n","8f0f148e":"# digits = pd.read_csv(\"..\/input\/digit-recognizer\/train.csv\") # 1170th\ndigitsTest = pd.read_csv(\"..\/input\/digit-recognizer\/test.csv\")\ndigits = pd.read_csv(\"..\/input\/mnist-in-csv\/mnist_train.csv\")","524e06b3":"digits_ext.head()","16d174c2":"digits.head()","25bfac3b":"digits.shape, digitsTest.shape, digits_ext.shape","98f144ed":"train = digits.values[:,1:]\ntrainLabels = digits.values[:,0]\ntest = digitsTest.values","8f0ae018":"train.shape, trainLabels.shape, test.shape","ff01befb":"import matplotlib.pyplot as plt\nfig = plt.figure()\nfor i in range(9):\n    plt.subplot(3,3,i+1)\n    plt.tight_layout()\n    plt.imshow(train[i].reshape(28,-1),cmap=\"gray\")\n    plt.title(\"Digit: {}\".format(trainLabels[i]))\n    plt.xticks([])\n    plt.yticks([])\nplt.show()\nplt.close()","c0833a27":"train = train.astype(\"float32\")\ntrain\/=255.0\n","6bcdf33a":"trainLabels[:10]","529aa2ac":"num_categories = 10\ntrainLabels = keras.utils.to_categorical(trainLabels,num_categories)\n","ba5ae55d":"trainLabels.shape","07940336":"from keras.models import Sequential\nfrom keras.layers import Conv2D\nfrom keras.layers import Flatten\nfrom keras.layers import Dense","29e41ff6":"train.shape","2b382af3":"model = Sequential()\nmodel.add(Conv2D(32, \n                 kernel_size=(3,3), \n                 activation = \"relu\", \n                 input_shape = (28,28,1)\n))\n\nmodel.add(Conv2D(64,(3,3),activation=\"relu\"))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(64,(3,3),activation=\"relu\"))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Flatten())\nmodel.add(Dense(128,activation = \"relu\"))\n\nmodel.add(Dense(128, activation = \"relu\"))\n\nmodel.add(Dropout(0.5))\nmodel.add(Dense(num_categories, activation = \"softmax\"))\n\n#Adaptive learning rate (adaDelta) is a popular form of gradient descent rivaled only by adam and adagrad\n#categorical ce since we have multiple classes (10) \nmodel.compile(loss=keras.losses.categorical_crossentropy,\n              optimizer=keras.optimizers.Adam(),\n              metrics=['accuracy'])\n\n","39e5c833":"batch_size = 128\nnum_epoch = 15\n#model training\n\nmodel_log = model.fit(train.reshape(-1, 28,28,1), trainLabels,\n          batch_size=batch_size,\n          epochs=num_epoch,\n          verbose=1,\n          \n          )","f00cdfc8":"ypred = model.predict(test.reshape(-1,28,28,1))","a7d3c367":"import os\n# plotting the metrics\nfig = plt.figure()\n# plt.subplot(2,1,1)\nplt.plot(model_log.history['acc'])\nplt.plot(model_log.history['val_acc'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='lower right')\nplt.tight_layout()\nfig","3f08585e":"ypred = np.argmax(ypred, axis = 1)","3f7f48d3":"plt.imshow(test[0].reshape(-1,28), cmap=\"gray\")\nprint(ypred[0])","816ccd74":"\nimport matplotlib.pyplot as plt\nfig = plt.figure(1)\nplt.figure(figsize=(12,12))\nfor i in range(9):\n    plt.subplot(3,3,i+1)\n    plt.tight_layout()\n    plt.imshow(test[i].reshape(28,-1),cmap=\"gray\")\n    plt.title(\"Digit: {}\".format((ypred[i])))\n    plt.xticks([])\n    plt.yticks([])\nplt.show()\nplt.close()","5409c255":"ypreddf = pd.DataFrame(ypred)\nypreddf.columns = [\"Label\"]\nypreddf.head()\n\nypredDF = []\nfor i in range(len(ypred)):\n    ypredDF.append([i+1, ypred[i]])\nypredDF = pd.DataFrame(ypredDF, columns=[\"ImageId\",\"Label\"])","474c2dba":"ypredDF.to_csv(\"submissions.csv\", index = False)","d0b52646":"pd.read_csv(\"submissions.csv\")","82fd7715":"> We are seperating the digits of MNIST dataset ie the labels and the pixels. Train and trainLabels are two sets of arrays to do that! "}}