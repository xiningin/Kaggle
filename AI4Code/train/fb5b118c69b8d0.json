{"cell_type":{"c17c462b":"code","678f3c32":"code","a1d56c1e":"code","49e1171c":"code","629e16d4":"code","6ed34b26":"code","8c69ebcb":"code","1a7845f4":"code","54c2187f":"code","7360118f":"code","91c9b06c":"code","074129ce":"code","48e086aa":"code","e39753ed":"code","01c6d734":"code","7d8b87de":"code","35db7022":"code","0bdf0faf":"code","3a3a8ee1":"code","4a537cba":"code","d97d0599":"markdown","94172366":"markdown","4ddb10af":"markdown","16b37556":"markdown","8567b950":"markdown","13cf215c":"markdown","49f6396f":"markdown","ba6c37e8":"markdown","8dcd30e7":"markdown"},"source":{"c17c462b":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","678f3c32":"df = pd.read_csv('..\/input\/kyphosis.csv')","a1d56c1e":"df.head()","49e1171c":"sns.pairplot(df,hue='Kyphosis',palette='Set1')","629e16d4":"from sklearn.model_selection import train_test_split","6ed34b26":"X = df.drop('Kyphosis',axis=1)\ny = df['Kyphosis']","8c69ebcb":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30)","1a7845f4":"from sklearn.tree import DecisionTreeClassifier","54c2187f":"dtree = DecisionTreeClassifier()","7360118f":"dtree.fit(X_train,y_train)","91c9b06c":"predictions = dtree.predict(X_test)","074129ce":"from sklearn.metrics import classification_report,confusion_matrix","48e086aa":"print(classification_report(y_test,predictions))","e39753ed":"print(confusion_matrix(y_test,predictions))","01c6d734":"from IPython.display import Image  \nfrom sklearn.externals.six import StringIO  \nfrom sklearn.tree import export_graphviz\nimport pydot \n\nfeatures = list(df.columns[1:])\nfeatures","7d8b87de":"dot_data = StringIO()  \nexport_graphviz(dtree, out_file=dot_data,feature_names=features,filled=True,rounded=True)\n\ngraph = pydot.graph_from_dot_data(dot_data.getvalue())  \nImage(graph[0].create_png())  ","35db7022":"from sklearn.ensemble import RandomForestClassifier\nrfc = RandomForestClassifier(n_estimators=100)\nrfc.fit(X_train, y_train)","0bdf0faf":"rfc_pred = rfc.predict(X_test)","3a3a8ee1":"print(confusion_matrix(y_test,rfc_pred))","4a537cba":"print(classification_report(y_test,rfc_pred))","d97d0599":"## Prediction and Evaluation \n\nLet's evaluate our decision tree.","94172366":"## Tree Visualization\n\nScikit learn actually has some built-in visualization capabilities for decision trees, you won't use this often and it requires you to install the pydot library, but here is an example of what it looks like and the code to execute this:","4ddb10af":"(https:\/\/medium.com\/@josemarcialportilla\/enchanted-random-forest-b08d418cb411#.hh7n1co54) explaining the general logic of decision trees and random forests which you can check out. \n\n## Import Libraries","16b37556":"\n# Decision Trees and Random Forests in Python","8567b950":"## EDA\n\nWe'll just check out a simple pairplot for this small dataset.","13cf215c":"## Get the Data","49f6396f":"## Train Test Split\n\nLet's split up the data into a training set and a test set!","ba6c37e8":"## Decision Trees\n\nWe'll start just by training a single decision tree.","8dcd30e7":"## Random Forests\n\nNow let's compare the decision tree model to a random forest."}}