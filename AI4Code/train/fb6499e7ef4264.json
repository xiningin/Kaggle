{"cell_type":{"63ae02e6":"code","0cc303a0":"code","3a37bc59":"code","0431c88f":"code","d04e2f0c":"code","e8521bc2":"code","2a2371bf":"code","e84e9976":"code","702d25fa":"code","cb388764":"code","fc495e6c":"code","4c80ee00":"code","7896390f":"code","3577e521":"code","ca7ec10e":"code","bebdf9f5":"code","91b18593":"markdown","7d5f5d71":"markdown","edb5ba16":"markdown","a783606a":"markdown","44acfbb5":"markdown","08f5666b":"markdown","fcfdb33f":"markdown","51d6e486":"markdown"},"source":{"63ae02e6":"import numpy as np\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\n\nkeras = tf.keras","0cc303a0":"def plot_series(time, series, format=\"-\", start=0, end=None, label=None):\n    plt.plot(time[start:end], series[start:end], format, label=label)\n    plt.xlabel(\"Time\")\n    plt.ylabel(\"Value\")\n    if label:\n        plt.legend(fontsize=14)\n    plt.grid(True)\n    \ndef trend(time, slope=0):\n    return slope * time\n\ndef seasonal_pattern(season_time):\n    \"\"\"Just an arbitrary pattern, you can change it if you wish\"\"\"\n    return np.where(season_time < 0.4,\n                    np.cos(season_time * 2 * np.pi),\n                    1 \/ np.exp(3 * season_time))\n\ndef seasonality(time, period, amplitude=1, phase=0):\n    \"\"\"Repeats the same pattern at each period\"\"\"\n    season_time = ((time + phase) % period) \/ period\n    return amplitude * seasonal_pattern(season_time)\n\ndef white_noise(time, noise_level=1, seed=None):\n    rnd = np.random.RandomState(seed)\n    return rnd.randn(len(time)) * noise_level","3a37bc59":"time = np.arange(4 * 365 + 1)\n\nslope = 0.05\nbaseline = 10\namplitude = 40\nseries = baseline + trend(time, slope) + seasonality(time, period=365, amplitude=amplitude)\n\nnoise_level = 5\nnoise = white_noise(time, noise_level, seed=42)\n\nseries += noise\n\nplt.figure(figsize=(10, 6))\nplot_series(time, series)\nplt.show()","0431c88f":"split_time = 1000\ntime_train = time[:split_time]\nx_train = series[:split_time]\ntime_valid = time[split_time:]\nx_valid = series[split_time:]\n\nnaive_forecast = series[split_time - 1:-1]\n\nplt.figure(figsize=(10, 6))\nplot_series(time_valid, x_valid, start=0, end=150, label=\"Series\")\nplot_series(time_valid, naive_forecast, start=1, end=151, label=\"Forecast\")","d04e2f0c":"keras.metrics.mean_absolute_error(x_valid, naive_forecast).numpy()","e8521bc2":"def moving_average_forecast(series, window_size):\n  \"\"\"Forecasts the mean of the last few values.\n     If window_size=1, then this is equivalent to naive forecast\"\"\"\n  forecast = []\n  for time in range(len(series) - window_size):\n    forecast.append(series[time:time + window_size].mean())\n  return np.array(forecast)","2a2371bf":"def moving_average_forecast(series, window_size):\n  \"\"\"Forecasts the mean of the last few values.\n     If window_size=1, then this is equivalent to naive forecast\n     This implementation is *much* faster than the previous one\"\"\"\n  mov = np.cumsum(series)\n  mov[window_size:] = mov[window_size:] - mov[:-window_size]\n  return mov[window_size - 1:-1] \/ window_size","e84e9976":"moving_avg = moving_average_forecast(series, 30)[split_time-30:]\n\nplt.figure(figsize=(10, 6))\nplot_series(time_valid, x_valid, label=\"Series\")\nplot_series(time_valid, moving_avg, label=\"Moving average (30 days)\")","702d25fa":"keras.metrics.mean_absolute_error(x_valid, moving_avg).numpy()","cb388764":"diff_series = (series[365:] - series[:-365])\ndiff_time = time[365:]\n\nplt.figure(figsize=(10, 6))\nplot_series(diff_time, diff_series, label=\"Series(t) \u2013 Series(t\u2013365)\")\nplt.show()","fc495e6c":"plt.figure(figsize=(10, 6))\nplot_series(time_valid, diff_series[split_time - 365:], label=\"Series(t) \u2013 Series(t\u2013365)\")\nplt.show()","4c80ee00":"diff_moving_avg = moving_average_forecast(diff_series, 50)[split_time - 365 - 50:]\n\nplt.figure(figsize=(10, 6))\nplot_series(time_valid, diff_series[split_time - 365:], label=\"Series(t) \u2013 Series(t\u2013365)\")\nplot_series(time_valid, diff_moving_avg, label=\"Moving Average of Diff\")\nplt.show()","7896390f":"diff_moving_avg_plus_past = series[split_time - 365:-365] + diff_moving_avg\n\nplt.figure(figsize=(10, 6))\nplot_series(time_valid, x_valid, label=\"Series\")\nplot_series(time_valid, diff_moving_avg_plus_past, label=\"Forecasts\")\nplt.show()","3577e521":"keras.metrics.mean_absolute_error(x_valid, diff_moving_avg_plus_past).numpy()","ca7ec10e":"diff_moving_avg_plus_smooth_past = moving_average_forecast(series[split_time - 370:-359], 11) + diff_moving_avg\n\nplt.figure(figsize=(10, 6))\nplot_series(time_valid, x_valid, label=\"Series\")\nplot_series(time_valid, diff_moving_avg_plus_smooth_past, label=\"Forecasts\")\nplt.show()","bebdf9f5":"keras.metrics.mean_absolute_error(x_valid, diff_moving_avg_plus_smooth_past).numpy()","91b18593":"That's worse than naive forecast! The moving average does not anticipate trend or seasonality, so let's try to remove them by using differencing. Since the seasonality period is 365 days, we will subtract the value at time *t* \u2013 365 from the value at time *t*.","7d5f5d71":"## Trend and Seasonality","edb5ba16":"## Naive Forecast","a783606a":"Great, the trend and seasonality seem to be gone, so now we can use the moving average:","44acfbb5":"Better than naive forecast, good. However the forecasts look a bit too random, because we're just adding past values, which were noisy. Let's use a moving averaging on past values to remove some of the noise:","08f5666b":"Now let's bring back the trend and seasonality by adding the past values from t \u2013 365:","fcfdb33f":"## Moving Average","51d6e486":"Focusing on the validation period:"}}