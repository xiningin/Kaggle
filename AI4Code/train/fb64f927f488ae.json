{"cell_type":{"88b2e1ad":"code","47ac6704":"code","7236a53e":"code","435631e7":"code","adcbe3ef":"code","eeead9c9":"code","e18171d2":"code","b162361c":"code","cf36e1e7":"code","2d56159a":"code","3ee531ec":"code","d7ee7617":"code","aa1b38cf":"code","9c816e98":"code","999c46bf":"code","4ef62faf":"code","6b938b8a":"code","16ba6d15":"code","3ca90642":"code","460f36b7":"code","2ddedcf3":"code","33ac537d":"code","428efcc6":"code","d3265493":"code","9082b25e":"code","347806e9":"code","d241e34e":"code","7f384e8c":"code","bf113797":"code","9529e930":"code","d1a2f2ef":"code","2b7b3e17":"markdown","cdcdbce1":"markdown","029aa982":"markdown","8736fc4d":"markdown","ad315b4e":"markdown","407c0954":"markdown","2722e15b":"markdown","a63a9425":"markdown","b33c40b0":"markdown","f3fdcd44":"markdown","d6cb1c85":"markdown","ea161e78":"markdown","52350b3d":"markdown","89e1b573":"markdown","3eb9e5d6":"markdown","521bd7ec":"markdown","86ec42d3":"markdown","80b10bdc":"markdown","0bdb9764":"markdown","d5564d84":"markdown"},"source":{"88b2e1ad":"import numpy as np\nimport pandas as pd","47ac6704":"family_data = pd.read_csv('\/kaggle\/input\/santa-workshop-tour-2019\/family_data.csv', index_col='family_id')\nsample_sub = pd.read_csv('\/kaggle\/input\/santa-workshop-tour-2019\/sample_submission.csv', index_col='family_id')","7236a53e":"family_size_dict = family_data[['n_people']].to_dict()['n_people']\n\ncols = [f'choice_{i}' for i in range(10)]\nchoice_dict = family_data[cols].to_dict()\n\nN_DAYS = 100\nMAX_OCCUPANCY = 300\nMIN_OCCUPANCY = 125\n\n# from 100 to 1\ndays = list(range(N_DAYS,0,-1))\n\ndef old_cost_function(prediction):\n\n    penalty = 0\n\n    # We'll use this to count the number of people scheduled each day\n    daily_occupancy = {k:0 for k in days}\n    \n    # Looping over each family; d is the day for each family f\n    for f, d in enumerate(prediction):\n\n        # Using our lookup dictionaries to make simpler variable names\n        n = family_size_dict[f]\n        choice_0 = choice_dict['choice_0'][f]\n        choice_1 = choice_dict['choice_1'][f]\n        choice_2 = choice_dict['choice_2'][f]\n        choice_3 = choice_dict['choice_3'][f]\n        choice_4 = choice_dict['choice_4'][f]\n        choice_5 = choice_dict['choice_5'][f]\n        choice_6 = choice_dict['choice_6'][f]\n        choice_7 = choice_dict['choice_7'][f]\n        choice_8 = choice_dict['choice_8'][f]\n        choice_9 = choice_dict['choice_9'][f]\n\n        # add the family member count to the daily occupancy\n        daily_occupancy[d] += n\n\n        # Calculate the penalty for not getting top preference\n        if d == choice_0:\n            penalty += 0\n        elif d == choice_1:\n            penalty += 50\n        elif d == choice_2:\n            penalty += 50 + 9 * n\n        elif d == choice_3:\n            penalty += 100 + 9 * n\n        elif d == choice_4:\n            penalty += 200 + 9 * n\n        elif d == choice_5:\n            penalty += 200 + 18 * n\n        elif d == choice_6:\n            penalty += 300 + 18 * n\n        elif d == choice_7:\n            penalty += 300 + 36 * n\n        elif d == choice_8:\n            penalty += 400 + 36 * n\n        elif d == choice_9:\n            penalty += 500 + 36 * n + 199 * n\n        else:\n            penalty += 500 + 36 * n + 398 * n\n\n    # for each date, check total occupancy\n    #  (using soft constraints instead of hard constraints)\n    for _, v in daily_occupancy.items():\n        if (v > MAX_OCCUPANCY) or (v < MIN_OCCUPANCY):\n            penalty += 100000000\n\n    # Calculate the accounting cost\n    # The first day (day 100) is treated special\n    accounting_cost = (daily_occupancy[days[0]]-125.0) \/ 400.0 * daily_occupancy[days[0]]**(0.5)\n    # using the max function because the soft constraints might allow occupancy to dip below 125\n    accounting_cost = max(0, accounting_cost)\n    \n    # Loop over the rest of the days, keeping track of previous count\n    yesterday_count = daily_occupancy[days[0]]\n    for day in days[1:]:\n        today_count = daily_occupancy[day]\n        diff = abs(today_count - yesterday_count)\n        accounting_cost += max(0, (daily_occupancy[day]-125.0) \/ 400.0 * daily_occupancy[day]**(0.5 + diff \/ 50.0))\n        yesterday_count = today_count\n\n    penalty += accounting_cost\n\n    return penalty","435631e7":"## from https:\/\/www.kaggle.com\/nickel\/250x-faster-cost-function-with-numba-jit\n#prediction = sample_sub['assigned_day'].values\ndesired = family_data.values[:, :-1]\nfamily_size = family_data.n_people.values\npenalties = np.asarray([\n    [\n        0,\n        50,\n        50 + 9 * n,\n        100 + 9 * n,\n        200 + 9 * n,\n        200 + 18 * n,\n        300 + 18 * n,\n        300 + 36 * n,\n        400 + 36 * n,\n        500 + 36 * n + 199 * n,\n        500 + 36 * n + 398 * n\n    ] for n in range(family_size.max() + 1)\n])","adcbe3ef":"## from https:\/\/www.kaggle.com\/nickel\/250x-faster-cost-function-with-numba-jit\nfrom numba import njit\n\n@njit()\ndef jited_cost(prediction, desired, family_size, penalties):\n    N_DAYS = 100\n    MAX_OCCUPANCY = 300\n    MIN_OCCUPANCY = 125\n    penalty = 0\n    daily_occupancy = np.zeros(N_DAYS + 1, dtype=np.int64)\n    for i in range(len(prediction)):\n        n = family_size[i]\n        pred = prediction[i]\n        n_choice = 0\n        for j in range(len(desired[i])):\n            if desired[i, j] == pred:\n                break\n            else:\n                n_choice += 1\n        \n        daily_occupancy[pred - 1] += n\n        penalty += penalties[n, n_choice]\n\n    accounting_cost = 0\n    n_out_of_range = 0\n    daily_occupancy[-1] = daily_occupancy[-2]\n    for day in range(N_DAYS):\n        n_next = daily_occupancy[day + 1]\n        n = daily_occupancy[day]\n        n_out_of_range += (n > MAX_OCCUPANCY) or (n < MIN_OCCUPANCY)\n        diff = abs(n - n_next)\n        accounting_cost += max(0, (n-125.0) \/ 400.0 * n**(0.5 + diff \/ 50.0))\n\n    penalty += accounting_cost\n    return np.asarray([penalty, n_out_of_range])","eeead9c9":"family_data.shape","e18171d2":"family_data.head()","b162361c":"family_data.isnull().sum()","cf36e1e7":"family_data.n_people.sum()","2d56159a":"family_data.n_people.sum()\/300","3ee531ec":"## thanks to https:\/\/www.kaggle.com\/chewzy\/santa-finances-a-closer-look-at-the-costs\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\n\nno_of_people = family_data['n_people'].value_counts().sort_index()\n\nplt.figure(figsize=(14,6))\nax = sns.barplot(x=no_of_people.index, y=no_of_people.values)\n\nfor p in ax.patches:\n    ax.annotate(f'{p.get_height():.0f}\\n({p.get_height() \/ sum(no_of_people) * 100:.1f}%)', \n                xy=(p.get_x() + p.get_width()\/2., p.get_height()), ha='center', xytext=(0,5), textcoords='offset points')\n    \nax.set_ylim(0, 1.1*max(no_of_people))\nplt.xlabel('Number of people in family', fontsize=14)\nplt.ylabel('Count', fontsize=14)\nplt.title('Family Size Distribution', fontsize=20)\nplt.show()","d7ee7617":"choice_0 = family_data.choice_0.value_counts().sort_index()\nchoice_9 = family_data.choice_9.value_counts().sort_index()","aa1b38cf":"plt.figure(figsize=(20,10))\n_ = sns.barplot(x=choice_0.index, y=choice_0.values)","9c816e98":"plt.figure(figsize=(20,10))\n_ = sns.barplot(x=choice_9.index, y=choice_9.values)","999c46bf":"## from https:\/\/www.kaggle.com\/inversion\/santa-s-2019-starter-notebook\n# Start with the sample submission values\nbest = sample_sub['assigned_day'].values\nstart_score = old_cost_function(best)","4ef62faf":"start_score","6b938b8a":"new_start_score, errors = jited_cost(best, desired, family_size, penalties)","16ba6d15":"\nerrors","3ca90642":"new_start_score","460f36b7":"assigned_days_choice_cost = [] ","2ddedcf3":"sample_sub['assigned_day'] = family_data.choice_0\nchoice_0_cost, _ = jited_cost(sample_sub['assigned_day'].values, desired, family_size,penalties)\nassigned_days_choice_cost.append(choice_0_cost)\nchoice_0_cost","33ac537d":"sample_sub['assigned_day'] = family_data.choice_1\nchoice_1_cost, _ = jited_cost(sample_sub['assigned_day'].values, desired, family_size,penalties)\nassigned_days_choice_cost.append(choice_1_cost)\nchoice_1_cost","428efcc6":"sample_sub['assigned_day'] = family_data.choice_2\nchoice_2_cost, _ = jited_cost(sample_sub['assigned_day'].values, desired, family_size,penalties)\nassigned_days_choice_cost.append(choice_2_cost)\nchoice_2_cost","d3265493":"sample_sub['assigned_day'] = family_data.choice_3\nchoice_3_cost, _ = jited_cost(sample_sub['assigned_day'].values, desired, family_size,penalties)\nassigned_days_choice_cost.append(choice_3_cost)\nchoice_3_cost","9082b25e":"sample_sub['assigned_day'] = family_data.choice_4\nchoice_4_cost, _ = jited_cost(sample_sub['assigned_day'].values, desired, family_size,penalties)\nassigned_days_choice_cost.append(choice_4_cost)\nchoice_4_cost","347806e9":"sample_sub['assigned_day'] = family_data.choice_5\nchoice_5_cost, _ = jited_cost(sample_sub['assigned_day'].values, desired, family_size,penalties)\nassigned_days_choice_cost.append(choice_5_cost)\nchoice_5_cost","d241e34e":"sample_sub['assigned_day'] = family_data.choice_6\nchoice_6_cost, _ = jited_cost(sample_sub['assigned_day'].values, desired, family_size,penalties)\nassigned_days_choice_cost.append(choice_6_cost)\nchoice_6_cost","7f384e8c":"sample_sub['assigned_day'] = family_data.choice_7\nchoice_7_cost, _ = jited_cost(sample_sub['assigned_day'].values, desired, family_size,penalties)\nassigned_days_choice_cost.append(choice_7_cost)\nchoice_7_cost","bf113797":"sample_sub['assigned_day'] = family_data.choice_8\nchoice_8_cost, _ = jited_cost(sample_sub['assigned_day'].values, desired, family_size,penalties)\nassigned_days_choice_cost.append(choice_8_cost)\nchoice_8_cost","9529e930":"sample_sub['assigned_day'] = family_data.choice_9\nchoice_9_cost, _ = jited_cost(sample_sub['assigned_day'].values, desired, family_size,penalties)\nassigned_days_choice_cost.append(choice_9_cost)\nchoice_9_cost","d1a2f2ef":"plt.figure(figsize = (10,5))\n_ =sns.lineplot(x = list(range(1,11)), y = assigned_days_choice_cost,  marker = \"*\", markersize = 20, color = 'green')\n\nplt.title('Penalty by Choice Number')\nplt.xlabel(\"Choice Number\")\nplt.ylabel(\"Penalty\")","2b7b3e17":"## Comes out to be the same. Perfect let's use the faster cost function for further exploration.","cdcdbce1":"#### If maximum people visit everyday how many days would this affair last?","029aa982":"### Experiments with costs on the basis of choices","8736fc4d":"### Choice 1 for all families together is causing the biggest loss to Santa by far!","ad315b4e":"#### Comparison of new cost function output with the old one","407c0954":"#### What is the total number of people visiting?","2722e15b":"No missing values!","a63a9425":"Let's look at what the data is telling us first!","b33c40b0":"Let's check the data's health before we make any optimisation moves.","f3fdcd44":"#### Errors - count of the number of times the assigned days caused the condition to go out of bounds","d6cb1c85":"#### How big are the families?","ea161e78":"## Santa Business!","52350b3d":"## More Updates coming up soon!","89e1b573":"## How do we help Santa?","3eb9e5d6":"#### Simple Cost Function","521bd7ec":"#### The family_data that we are exploring represents each family in a row. So one family is one row here. Then each family has 10 preferences so 0 to 9 choices are given as columns. The number of people in each family are given by the column n_people. Each family is uniquely identified by a family_id. This is the data we will be using to help Santa!","86ec42d3":"#### What would the cost of assigning the same nth choice to each family be?","80b10bdc":"#### New Faster cost function","0bdb9764":"#### Most prefered days","d5564d84":"## Santa's special surprise:\n\n1. Tours to his workshop from 100 days before Christmas.\n2. Extra perks for families that don't get their preference.\n3. Ten preferences for visit to each family.\n\n## Santa's constraints:\n\n1. 5000 Families with variable number of members\n2. 100 Days only\n3. Cost attached to each family's visit must be limited\n4. Total number of people (not families) attending the workshop each day must be between 125 - 300\n5. Every family must be scheduled for one and only one assigned_day.\n\n## Let's lessen Santa's Workload\n\nSanta's accountants have devised a formula of how cost would be calculated which is given below. We need to minimise this cost. This sort of a problem where we need to minimise or maximise a function's value output is known as Optimisation problem in Mathematics"}}