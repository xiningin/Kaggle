{"cell_type":{"e1180c4e":"code","2e26f45e":"code","d425bc0e":"code","2edb5650":"code","5ab3ee75":"code","be8ac99d":"code","a4dff5d7":"code","46b4603a":"code","031a29b3":"code","19a501d6":"code","7a459677":"code","81951a7e":"code","0dd9956b":"code","3269fd19":"code","e4dcbe61":"code","f563b806":"code","7ce4a3c9":"code","998b9252":"code","2142bf0c":"code","bbb2aa89":"code","81346b6d":"code","c85040cd":"code","f5cafa83":"code","a1344a39":"code","cc45a7a5":"code","6e9623c8":"code","67de55a3":"code","b720904a":"code","3e8f8b01":"code","426462c2":"code","cf4e2d77":"markdown","6a695a72":"markdown","cd88b005":"markdown","9cd0c55b":"markdown","121f84c1":"markdown","a5d912a5":"markdown","97c4d12f":"markdown","797c06db":"markdown","3c30211a":"markdown","af690412":"markdown","748438bd":"markdown","ab3f0fb9":"markdown","bb2c9436":"markdown","13865ba3":"markdown","41a4f7ae":"markdown","011d655f":"markdown"},"source":{"e1180c4e":"import numpy as np \nimport pandas as pd \nfrom sklearn.linear_model import LinearRegression, BayesianRidge\nfrom sklearn.model_selection import RandomizedSearchCV, train_test_split\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\nimport datetime\nfrom collections import OrderedDict\n\n# plotly packages\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nfrom plotly.graph_objs import *","2e26f45e":"def Bayesian_Reg(Lin_index, Lin_df, future_forcast):\n    MAE = {}\n    tol = [1e-10, 1e-9, 1e-8, 1e-7, 1e-6, 1e-5, 1e-4, 1e-2, 1e-1]\n    alpha_1 = [1e-10, 1e-9, 1e-8, 1e-7, 1e-6, 1e-5, 1e-4, 1e-2, 1e-1]\n    alpha_2 = [1e-10, 1e-9, 1e-8, 1e-7, 1e-6, 1e-5, 1e-4, 1e-2, 1e-1]\n    lambda_1 = [1e-10, 1e-9, 1e-8, 1e-7, 1e-6, 1e-5, 1e-4, 1e-2, 1e-1]\n    lambda_2 = [1e-10, 1e-9, 1e-8, 1e-7, 1e-6, 1e-5, 1e-4, 1e-2, 1e-1]\n    bayesian_grid = {'tol': tol, 'alpha_1': alpha_1, 'alpha_2' : alpha_2, 'lambda_1': lambda_1, 'lambda_2' : lambda_2}\n    \n    for size in np.arange(.05, .51, .05):\n        X_train_confirmed, X_test_confirmed, y_train_confirmed, y_test_confirmed = train_test_split(Lin_index, Lin_df, test_size=size, shuffle=False) \n    \n        for deg in np.arange(3, 8):\n            # transform our data for polynomial regression\n            poly = PolynomialFeatures(degree=deg)\n            poly_X_train_confirmed = poly.fit_transform(X_train_confirmed)\n            poly_X_test_confirmed = poly.fit_transform(X_test_confirmed)\n            poly_future_forcast = poly.fit_transform(future_forcast)\n    \n            # bayesian ridge polynomial regression\n            bayesian = BayesianRidge(fit_intercept=False, normalize=True)\n            bayesian_search = RandomizedSearchCV(bayesian, bayesian_grid, scoring='neg_mean_squared_error', cv=3, return_train_score=True, n_jobs=-1, n_iter=40)\n            bayesian_search.fit(poly_X_train_confirmed, y_train_confirmed)\n            bayesian_confirmed = bayesian_search.best_estimator_\n            test_bayesian_pred = bayesian_confirmed.predict(poly_X_test_confirmed)\n            bayesian_pred = bayesian_confirmed.predict(poly_future_forcast)\n            MAE.update( {mean_absolute_error(test_bayesian_pred, y_test_confirmed) : [deg, size]} )\n    sort = list(sorted(MAE.items()))\n    mae = sort[0][0]\n    size = sort[0][1][1]\n    deg = sort[0][1][0]\n    X_train_confirmed, X_test_confirmed, y_train_confirmed, y_test_confirmed = train_test_split(Lin_index, Lin_df, test_size=size, shuffle=False) \n    \n    # transform our data for polynomial regression\n    poly = PolynomialFeatures(degree=deg)\n    poly_X_train_confirmed = poly.fit_transform(X_train_confirmed)\n    poly_X_test_confirmed = poly.fit_transform(X_test_confirmed)\n    poly_future_forcast = poly.fit_transform(future_forcast)\n    \n    # bayesian ridge polynomial regression\n    bayesian = BayesianRidge(fit_intercept=False, normalize=True)\n    bayesian_search = RandomizedSearchCV(bayesian, bayesian_grid, scoring='neg_mean_squared_error', cv=3, return_train_score=True, n_jobs=-1, n_iter=40)\n    bayesian_search.fit(poly_X_train_confirmed, y_train_confirmed)\n    bayesian_confirmed = bayesian_search.best_estimator_\n    test_bayesian_pred = bayesian_confirmed.predict(poly_X_test_confirmed)\n    bayesian_pred = bayesian_confirmed.predict(poly_future_forcast)\n    return bayesian_pred, y_test_confirmed, test_bayesian_pred, mae, deg","d425bc0e":"def Linear_Reg(Lin_index, Lin_df, future_forcast):\n    MAE = {}\n    \n    for size in np.arange(.01, .51, .01):\n        X_train_confirmed, X_test_confirmed, y_train_confirmed, y_test_confirmed = train_test_split(Lin_index, Lin_df, test_size=size, shuffle=False) \n    \n        for deg in np.arange(3, 7):\n            # transform our data for polynomial regression\n            poly = PolynomialFeatures(degree=deg)\n            poly_X_train_confirmed = poly.fit_transform(X_train_confirmed)\n            poly_X_test_confirmed = poly.fit_transform(X_test_confirmed)\n            poly_future_forcast = poly.fit_transform(future_forcast)\n    \n            # polynomial regression\n            linear_model = LinearRegression(normalize=True, fit_intercept=False)\n            linear_model.fit(poly_X_train_confirmed, y_train_confirmed)\n            test_linear_pred = linear_model.predict(poly_X_test_confirmed)\n            linear_pred = linear_model.predict(poly_future_forcast)\n            MAE.update( {mean_absolute_error(test_linear_pred, y_test_confirmed) : [deg, size]} )\n    sort = list(sorted(MAE.items()))\n    mae = sort[0][0]\n    size = sort[0][1][1]\n    deg = sort[0][1][0]\n    X_train_confirmed, X_test_confirmed, y_train_confirmed, y_test_confirmed = train_test_split(Lin_index, Lin_df, test_size=size, shuffle=False) \n    \n    # transform our data for polynomial regression\n    poly = PolynomialFeatures(degree=deg)\n    poly_X_train_confirmed = poly.fit_transform(X_train_confirmed)\n    poly_X_test_confirmed = poly.fit_transform(X_test_confirmed)\n    poly_future_forcast = poly.fit_transform(future_forcast)\n    \n    # polynomial regression\n    linear_model = LinearRegression(normalize=True, fit_intercept=False)\n    linear_model.fit(poly_X_train_confirmed, y_train_confirmed)\n    test_linear_pred = linear_model.predict(poly_X_test_confirmed)\n    linear_pred = linear_model.predict(poly_future_forcast)\n    return linear_pred, y_test_confirmed, test_linear_pred, mae, deg","2edb5650":"confirmed_df = pd.read_csv('..\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_confirmed.csv')\ndeaths_df = pd.read_csv('..\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_deaths.csv')\nbrazil_df = pd.read_csv(\"..\/input\/corona-virus-brazil\/brazil_covid19.csv\")","5ab3ee75":"brazil_df.head()","be8ac99d":"cols = confirmed_df.keys()\nbrazil_df['date'] = pd.to_datetime(brazil_df['date'])","a4dff5d7":"confirmed = confirmed_df.loc[:, cols[4]:cols[-1]]\ndeaths = deaths_df.loc[:, cols[4]:cols[-1]]","46b4603a":"dates = confirmed.keys()\nworld_cases = []\nbrazil_cases = [] \nitaly_cases = []\nus_cases = [] \nspain_cases = [] \nbrazil_deaths = [] \n\nfor i in dates:\n    confirmed_sum = confirmed[i].sum()\n    world_cases.append(confirmed_sum)\n    brazil_deaths.append(deaths_df[deaths_df['Country\/Region']=='Brazil'][i].sum())\n    brazil_cases.append(confirmed_df[confirmed_df['Country\/Region']=='Brazil'][i].sum())\n    italy_cases.append(confirmed_df[confirmed_df['Country\/Region']=='Italy'][i].sum())\n    us_cases.append(confirmed_df[confirmed_df['Country\/Region']=='US'][i].sum())\n    spain_cases.append(confirmed_df[confirmed_df['Country\/Region']=='Spain'][i].sum())","031a29b3":"def daily_increase(data):\n    d = [] \n    for i in range(len(data)):\n        if i == 0:\n            d.append(data[0])\n        else:\n            d.append(data[i]-data[i-1])\n    return d \n\nbrazil_daily_increase = daily_increase(brazil_cases)","19a501d6":"days_since_1_22 = np.array([i for i in range(len(dates))]).reshape(-1, 1)\nworld_cases = np.array(world_cases).reshape(-1, 1)","7a459677":"days_in_future = 7","81951a7e":"adjusted_dates = np.array([i for i in range(len(dates)+days_in_future)]).reshape(-1, 1)[:-days_in_future]\nstart = '22\/1\/2020'\nstart_date = datetime.datetime.strptime(start, '%d\/%m\/%Y')\nadjusted_dates_dates = []\nfor i in range(len(adjusted_dates)):\n    adjusted_dates_dates.append((start_date + datetime.timedelta(days=i)).strftime('%d\/%m\/%Y'))","0dd9956b":"layout = Layout(\n    paper_bgcolor='rgba(0,0,0,0)'\n    , plot_bgcolor='rgba(0,0,0,0)'\n    , title=\"Confirmed cases over time\"\n)\n\n\nfig = go.Figure(data=[\n    \n    go.Scatter(name='Brazil', x = adjusted_dates_dates, y=brazil_cases)\n    , go.Scatter(name='Italy', x = adjusted_dates_dates, y=italy_cases)\n    , go.Scatter(name='Spain', x = adjusted_dates_dates, y=spain_cases)\n    , go.Scatter(name='US', x=adjusted_dates_dates, y=us_cases)\n    ])\n\nfig['layout'].update(layout)\n\nfig.show()","3269fd19":"layout = Layout(\n    paper_bgcolor='rgba(0,0,0,0)'\n    , plot_bgcolor='rgba(0,0,0,0)'\n    , title=\"Confirmed cases over time around the world\"\n)\n\n\nfig = go.Figure(data=[\n    \n    go.Scatter(name='World', x = adjusted_dates_dates, y=world_cases.reshape(-1))\n    ])\n\nfig['layout'].update(layout)\n\nfig.show()","e4dcbe61":"layout = Layout(\n    paper_bgcolor='rgba(0,0,0,0)'\n    , plot_bgcolor='rgba(0,0,0,0)'\n    , title=\"Confirmed cases over time\"\n)\n\n\nfig = go.Figure(data=[\n    \n    go.Scatter(name='Brazil', x = adjusted_dates_dates[34:], y=brazil_cases[34:])\n    ])\n\nfig['layout'].update(layout)\n\nfig.show()","f563b806":"layout = Layout(\n    paper_bgcolor='rgba(0,0,0,0)'\n    , plot_bgcolor='rgba(0,0,0,0)'\n    , title=\"Deaths over time\"\n)\n\n\nfig = go.Figure(data=[\n    \n    go.Scatter(name='Deaths', x = adjusted_dates_dates[53:], y=brazil_deaths[53:])\n    ])\n\nfig['layout'].update(layout)\n\nfig.show()","7ce4a3c9":"layout = Layout(\n    paper_bgcolor='rgba(0,0,0,0)'\n    , plot_bgcolor='rgba(0,0,0,0)'\n    , title=\"Daily increase of confirmed cases in Brazil\"\n)\n\n\nfig = go.Figure(data=[\n    go.Bar(x=adjusted_dates_dates[34:], y=brazil_daily_increase[34:]),\n    ])\n\nfig['layout'].update(layout)\n\nfig.show()","998b9252":"days_since_2_25 = np.array([i for i in range(len(days_since_1_22[34:]))]).reshape(-1, 1)\nbrazil_cases_since_2_25 = brazil_cases[34:]\nfuture_forcast = np.array([i for i in range(len(days_since_2_25)+days_in_future)]).reshape(-1, 1)\nlinear_pred, test_data, reg_data, mae, deg  = Linear_Reg(days_since_2_25, brazil_cases_since_2_25, future_forcast)\nprint('Linear Regression mean absolute error:')\nprint(mae)\nbayesian_pred, test_data_B, reg_data_B, mae_B, deg_B  = Bayesian_Reg(days_since_2_25, brazil_cases_since_2_25, future_forcast)\nprint('Bayesian Ridge Regression mean absolute error:')\nprint(mae_B)","2142bf0c":"start = '25\/2\/2020'\nstart_date = datetime.datetime.strptime(start, '%d\/%m\/%Y')\nfuture_forcast_dates = []\nfor i in range(len(future_forcast)):\n    future_forcast_dates.append((start_date + datetime.timedelta(days=i)).strftime('%d\/%m\/%Y'))","bbb2aa89":"layout = Layout(\n    paper_bgcolor='rgba(0,0,0,0)'\n    , plot_bgcolor='rgba(0,0,0,0)'\n    , title=\"Confirmed cases predictions over time\"\n)\n\n\nfig = go.Figure(data=[\n    \n    go.Scatter(name='Confirmed cases', x = future_forcast_dates, y=brazil_cases_since_2_25)\n    , go.Scatter(name='Polynomial Regression', x = future_forcast_dates, y=linear_pred, line = dict(dash='dot'))\n    , go.Scatter(name='Polynomial Bayesian Ridge', x = future_forcast_dates, y=bayesian_pred, line = dict(dash='dash'))\n    ])\n\nfig['layout'].update(layout)\n\nfig.show()","81346b6d":"brazil_deaths_since_2_25 = brazil_deaths[53:]\nlinear_pred, test_data, reg_data, mae, deg  = Linear_Reg(days_since_2_25[19:], brazil_deaths_since_2_25, future_forcast[19:])\nprint('Linear Regression mean absolute error:')\nprint(mae)\nbayesian_pred, test_data_B, reg_data_B, mae_B, deg_B  = Bayesian_Reg(days_since_2_25[19:], brazil_deaths_since_2_25, future_forcast[19:])\nprint('Bayesian Ridge Regression mean absolute error:')\nprint(mae_B)","c85040cd":"layout = Layout(\n    paper_bgcolor='rgba(0,0,0,0)'\n    , plot_bgcolor='rgba(0,0,0,0)'\n    , title=\"Deaths predictions over time\"\n)\n\n\nfig = go.Figure(data=[\n    \n    go.Scatter(name='Deaths', x = future_forcast_dates[19:], y=brazil_deaths_since_2_25)\n    , go.Scatter(name='Polynomial Regression', x = future_forcast_dates[19:], y=linear_pred, line = dict(dash='dot'))\n    , go.Scatter(name='Polynomial Bayesian Ridge', x = future_forcast_dates[19:], y=bayesian_pred, line = dict(dash='dash'))\n    ])\n\nfig['layout'].update(layout)\n\nfig.show()","f5cafa83":"other_states_df = brazil_df[['cases','deaths']][brazil_df['state']!='S\u00e3o Paulo'].groupby(brazil_df['date']).sum().sort_values(by = 'date', ascending=True)\n\nsp_df = brazil_df[['cases','deaths']][brazil_df['state']=='S\u00e3o Paulo'].groupby(brazil_df['date']).sum().sort_values(by = 'date', ascending=True)\n\nlayout = Layout(\n    paper_bgcolor='rgba(0,0,0,0)'\n    , plot_bgcolor='rgba(0,0,0,0)'\n    , title=\"Total cases in S\u00e3o Paulo vs other states\"\n)\n\nfig = go.Figure(data=[\n    \n    go.Scatter(name='Other states', x=other_states_df.index[26:] , y=other_states_df['cases'][26:])\n    , go.Scatter(name='S\u00e3o Paulo', x=sp_df.index[26:] , y=sp_df['cases'][26:])\n    \n])\n\nfig.update_layout(barmode='stack')\nfig['layout'].update(layout)\n\nfig.show()","a1344a39":"layout = Layout(\n    paper_bgcolor='rgba(0,0,0,0)'\n    , plot_bgcolor='rgba(0,0,0,0)'\n    , title=\"Deaths in S\u00e3o Paulo vs other states\"\n)\n\nfig = go.Figure(data=[\n    \n    go.Scatter(name='Other states', x=other_states_df.index[27:] , y=other_states_df['deaths'][27:])\n    , go.Scatter(name='S\u00e3o Paulo', x=sp_df.index[27:] , y=sp_df['deaths'][27:])\n    \n])\n\nfig.update_layout(barmode='stack')\nfig['layout'].update(layout)\n\nfig.show()","cc45a7a5":"sp_index = np.array([i for i in range(len(sp_df.index[41:]))]).reshape(-1, 1)\nfuture_forcast = np.array([i for i in range(len(sp_index)+days_in_future)]).reshape(-1, 1) \nlinear_pred, test_data, reg_data, mae, deg  = Linear_Reg(sp_index, sp_df['deaths'][41:], future_forcast)\nprint('Linear Regression mean absolute error:')\nprint(mae)\nbayesian_pred, test_data_B, reg_data_B, mae_B, deg_B  = Bayesian_Reg(sp_index, sp_df['deaths'][41:], future_forcast)\nprint('Bayesian Ridge Regression mean absolute error:')\nprint(mae_B)","6e9623c8":"start = '11\/3\/2020'\nstart_date = datetime.datetime.strptime(start, '%d\/%m\/%Y')\nfuture_forcast_dates = []\nfor i in range(len(future_forcast)):\n    future_forcast_dates.append((start_date + datetime.timedelta(days=i)).strftime('%d\/%m\/%Y'))","67de55a3":"layout = Layout(\n    paper_bgcolor='rgba(0,0,0,0)'\n    , plot_bgcolor='rgba(0,0,0,0)'\n    , title=\"Deaths predictions over time\"\n)\n\n\nfig = go.Figure(data=[\n    \n    go.Scatter(name='Deaths', x = future_forcast_dates, y=sp_df['deaths'][41:])\n    , go.Scatter(name='Polynomial Regression', x = future_forcast_dates, y=linear_pred, line = dict(dash='dot'))\n    , go.Scatter(name='Polynomial Bayesian Ridge', x = future_forcast_dates, y=bayesian_pred, line = dict(dash='dash'))\n    ])\n\nfig['layout'].update(layout)\n\nfig.show()","b720904a":"sp_index = np.array([i for i in range(len(sp_df.index[26:]))]).reshape(-1, 1)\nfuture_forcast = np.array([i for i in range(len(sp_index)+days_in_future)]).reshape(-1, 1)\nlinear_pred, test_data, reg_data, mae, deg  = Linear_Reg(sp_index, sp_df['cases'][26:], future_forcast)\nprint('Linear Regression mean absolute error:')\nprint(mae)\nbayesian_pred, test_data_B, reg_data_B, mae_B, deg_B  = Bayesian_Reg(sp_index, sp_df['cases'][26:], future_forcast)\nprint('Bayesian Ridge Regression mean absolute error:')\nprint(mae_B)","3e8f8b01":"start = '26\/3\/2020'\nstart_date = datetime.datetime.strptime(start, '%d\/%m\/%Y')\nfuture_forcast_dates = []\nfor i in range(len(future_forcast)):\n    future_forcast_dates.append((start_date + datetime.timedelta(days=i)).strftime('%d\/%m\/%Y'))","426462c2":"layout = Layout(\n    paper_bgcolor='rgba(0,0,0,0)'\n    , plot_bgcolor='rgba(0,0,0,0)'\n    , title=\"Confirmed cases predictions over time\"\n)\n\n\nfig = go.Figure(data=[\n    \n    go.Scatter(name='Cases', x = future_forcast_dates, y=sp_df['cases'][26:])\n    , go.Scatter(name='Polynomial Regression', x = future_forcast_dates, y=linear_pred, line = dict(dash='dot'))\n    , go.Scatter(name='Polynomial Bayesian Ridge', x = future_forcast_dates, y=bayesian_pred, line = dict(dash='dash'))\n    ])\n\nfig['layout'].update(layout)\n\nfig.show()","cf4e2d77":"### Model for predicting the number of cases in S\u00e3o Paulo.","6a695a72":"### Model for predicting the number of deaths in S\u00e3o Paulo.","cd88b005":"Getting daily increases","9cd0c55b":"Import the data","121f84c1":"### Model for predicting the number of deaths.","a5d912a5":"## Situation in S\u00e3o Paulo","97c4d12f":"### Bayesian ridge polynomial regression function","797c06db":"## Modeling using Brazil's data","3c30211a":"### Model for predicting the number of cases.","af690412":"### Polynomial regression function","748438bd":"Future forcasting","ab3f0fb9":"## Situation in Brazil","bb2c9436":"## Modeling using S\u00e3o Paulo's data","13865ba3":"## Situation around the world","41a4f7ae":"Get all the dates","011d655f":"# Introduction\n    COVID-19 is the infectious disease caused by the most recently discovered coronavirus. This new virus and disease were unknown before the outbreak began in Wuhan, China, in December 2019.\n    \n    People can catch COVID-19 from others who have the virus. The disease can spread from person to person through small droplets from the nose or mouth which are spread when a person with COVID-19 coughs or exhales. These droplets land on objects and surfaces around the person. Other people then catch COVID-19 by touching these objects or surfaces, then touching their eyes, nose or mouth. People can also catch COVID-19 if they breathe in droplets from a person with COVID-19 who coughs out or exhales droplets. This is why it is important to stay more than 1 meter (3 feet) away from a person who is sick."}}