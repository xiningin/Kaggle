{"cell_type":{"97eff6d4":"code","5aaaa8c7":"code","1f741482":"code","56bee986":"code","713d952f":"code","e8cf4347":"code","27cd6af6":"code","528daf53":"code","d828551a":"code","6eb2108e":"code","d37b7543":"code","e5cc8785":"code","31e2be59":"code","09091e2d":"code","d76c54f9":"code","f011103c":"code","4decd43d":"code","b9460c9c":"code","f6cc8f4c":"code","ca796be7":"code","911a4a0f":"code","e3ef9051":"code","975df04c":"code","2b7c1956":"code","62dbd0b6":"code","f8b13db9":"code","a01d0a76":"code","01ecb224":"code","949a8a69":"code","0430577c":"code","c2886e3e":"code","3c6121b5":"code","f5043903":"code","06131414":"code","14993eaf":"code","dedf6fa4":"code","d405ec8b":"code","76f7e5fa":"code","d9dd6146":"code","c0d4b333":"code","3a913050":"code","6173f540":"code","bbe501df":"code","29a16ad0":"code","0eb22b06":"code","d3715f8b":"code","cbb2ecff":"code","6fd680c4":"code","4dc9daf5":"code","1c7aba19":"code","9282330f":"code","87354cdf":"code","8a4699cc":"code","e8aba20b":"code","7b55d1b7":"code","55f87781":"code","86430011":"code","63967783":"code","15a2eeb9":"code","f2cff400":"code","e8fa5362":"code","5e275d40":"code","28aed5e9":"code","7ea629ea":"code","52249713":"code","ba084c4c":"code","49067ca6":"code","2c71a556":"code","a53cd5ed":"code","a4265419":"code","36fff7c1":"code","230c3882":"code","97cb5520":"code","6ef61974":"code","a12f59fc":"code","a7d376dc":"code","2048a0d5":"code","958e88d2":"code","a767ec6f":"code","b180c0c6":"code","e40727d1":"code","cc32cd96":"code","3ad85d38":"code","bd63e70d":"code","90227afa":"markdown","f687d68f":"markdown","eb9e69db":"markdown","df501b67":"markdown","f9293c5d":"markdown","bd8095d7":"markdown","36fa1671":"markdown","736e8aa3":"markdown","63b66d72":"markdown","b98df6c1":"markdown","82d882f1":"markdown","8b35c002":"markdown","e7f38f7a":"markdown","40deffa3":"markdown","1b94fde5":"markdown","2cdd4042":"markdown","a26396e8":"markdown","2e15f3e0":"markdown","60c747e6":"markdown","83e54538":"markdown","b2c1c005":"markdown","abb67926":"markdown","9bb11799":"markdown","c6296c64":"markdown","dec2e6ae":"markdown","e504eb4a":"markdown","6c2e1e92":"markdown","4c73070d":"markdown","2eb5c921":"markdown","9f2c109e":"markdown","1dce5642":"markdown","8a4e768c":"markdown","c59c2895":"markdown","a0807bd3":"markdown","e013f063":"markdown","bac2cf5d":"markdown","22ec86f1":"markdown","bce378c7":"markdown","5e4b365a":"markdown","4814b564":"markdown","950a4d0d":"markdown","c0e41977":"markdown","46e80f59":"markdown","caa46529":"markdown","d10dbf60":"markdown","21b07b8f":"markdown","43739687":"markdown","c496a46f":"markdown","48ab7f6f":"markdown","cad7a660":"markdown","276968f1":"markdown","20dd30da":"markdown","d0311f40":"markdown","115e7152":"markdown","bb4a32aa":"markdown","6ca7283d":"markdown","6f5728c1":"markdown","86905a36":"markdown","aa2f32a2":"markdown","9ad1ecd3":"markdown","2f5db86b":"markdown","85b9da3a":"markdown","c51fb0d3":"markdown","a35b6805":"markdown","f72f5761":"markdown","e6863049":"markdown","a937c16e":"markdown","a5688f31":"markdown","89d79481":"markdown","6d562cd0":"markdown","afc3024d":"markdown","782193fb":"markdown","aecfd7a0":"markdown","f415d941":"markdown","4fcfa3c3":"markdown","860dd8f7":"markdown","50125e94":"markdown","7e175d07":"markdown","32dd87bc":"markdown","a22cd6ef":"markdown","a60f9ac8":"markdown","497223ef":"markdown","c225d0d2":"markdown","bad63d5e":"markdown","9ed28725":"markdown","4bc34860":"markdown","cafbc734":"markdown","4302655f":"markdown","e42d7529":"markdown","7506ffda":"markdown","aebf3020":"markdown","193a0c56":"markdown","5f0b2409":"markdown","b49fb471":"markdown","08d703a1":"markdown","e5cc11b7":"markdown"},"source":{"97eff6d4":"def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[int(len(arr) \/ 2)]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quicksort(left) + middle + quicksort(right)\n\nprint(quicksort([9,3,6,8,10,5,1,2,7,1,4]))","5aaaa8c7":"x = 3\nprint(x, type(x))","1f741482":"print(  x + 1   )  # adi\u00e7\u00e3o;\nprint(  x - 1   )  # subtra\u00e7\u00e3o\nprint(  x * 2   )  # multiplica\u00e7\u00e3o\nprint(  x ** 2  )  # pot\u00eancia","56bee986":"y = 2.5 ## para definir n\u00fameros reais, usar o '.'\nprint(type(y) )  # imprime o tipo\nprint( y, y + 1, y * 2, y ** 2 )  # imprime \"2.5 3.5 5.0 6.25\"","713d952f":"t, f = True, False # designa\u00e7\u00e3o dupla de vari\u00e1veis. t recebe True e f recebe False\nprint(type(t) )  # Imprime \"<type 'bool'>\"","e8cf4347":"print( t and f )  # Logical AND;\nprint( t or f  )  # Logical OR;\nprint( not t   )  # Logical NOT;\nprint( t != f  )  # Logical XOR;","27cd6af6":"hello = 'hello'   # Strings usam aspas simples\nworld = \"world\"   # ou duplas, n\u00e3o importa\nprint( hello, len(hello) )  # a v\u00edrgula pode ser usada para encadear (concatenar) v\u00e1rias strings ao imprimir","528daf53":"hw = hello + ' ' + world  # Ou use a opera\u00e7\u00e3o de adi\u00e7\u00e3o para concatenar\nprint( hw  )  # imprime \"hello world\"","d828551a":"hw12 = '%s %s %d %.4f' % (hello, world, 12, 10)  # impress\u00e3o no estilo printf do C++\nprint( hw12  )  # imprime  \"hello world 12\"","6eb2108e":"s = \"hello\"\nprint( s.capitalize()  )\nprint( s.upper()       )\nprint( s.rjust(7)      )  # Alinha a direita num texto de tamanho 7\nprint( s.center(7)     )  # Centraliza\nprint( s.replace('l', '(ell)')  )  # substitui todas as inst\u00e2ncias de uma substring por outra\nprint('  world '.strip()  )  # remove espa\u00e7\u00f5s antes e depois","d37b7543":"xs = [3, 1, 2]   # cria uma lista\nprint(xs, xs[2])\nprint(xs[-1], xs[-2], xs[-3] )  # indices negativos contam do fim para o in\u00edcio da lista, mas come\u00e7am em 1 em vez de 0","e5cc8785":"xs[2] = 'foo'    # Atribui um novo valor\nprint(xs)","31e2be59":"xs.append('bar') # Acrescenta um novo item\nprint(xs  )","09091e2d":"x = xs.pop()     # Remove e retorna o \u00faltimo elemento\nprint(x, xs )","d76c54f9":"nums = list(range(5))    # range \u00e9 uma fun\u00e7\u00e3o que cria uma lista\nprint( nums         )  # imprime \"[0, 1, 2, 3, 4]\"\nprint( nums[2:4]    )  # slice do indice 2 ao 4 (exclusivo); imprime \"[2, 3]\"\nprint( nums[2:]     )  # slice do \u00edndice 2 at\u00e9 o fim da lista; imprime \"[2, 3, 4]\"\nprint( nums[:2]     )  # slice do in\u00edcio da lista at\u00e9 o \u00edndice 2 (exclusivo); imprime \"[0, 1]\"\nprint( nums[:]      )  # : sem os \u00edndices significa todos os \u00edndices. Para listas com mais de uma dimens\u00e3o tem grande utilidade\nprint( nums[:-1]    )  # \u00edndices do slice pode ser negativo; imprime [\"0, 1, 2, 3]\"\nnums[2:4] = [8, 9] # atribui uma nova sublista ao slice\nprint( nums         )  # imprime \"[0, 1, 8, 9, 4]\"","f011103c":"animals = ['cat', 'dog', 'monkey']\nfor animal in animals:\n    print(animal)","4decd43d":"animals = ['cat', 'dog', 'monkey']\nfor idx, animal in enumerate(animals):\n    print('#%d: %s' % (idx + 1, animal))","b9460c9c":"nums = [0, 1, 2, 3, 4]\nsquares = []\nfor x in nums:\n    squares.append(x ** 2)\nprint(squares)","f6cc8f4c":"nums = [0, 1, 2, 3, 4]\nsquares = [x ** 2 for x in nums]\nprint(squares)","ca796be7":"nums = [0, 1, 2, 3, 4]\neven_squares = [x ** 2 for x in nums if x % 2 == 0]\nprint(even_squares)","911a4a0f":"d = {'cat': 'cute', 'dog': 'furry'}  # Cria o dicion\u00e1rio. ',' separa a rela\u00e7\u00e3o de pares de chave ':' valor\nprint( d['cat']       )  # recupera uma entrada pela chave\nprint( 'cat' in d     )  # Verifica se uma chave est\u00e1 presente no dicion\u00e1rio.","e3ef9051":"d['fish'] = 'wet'    # Atribui uma entrada nova no dicion\u00e1rio. Sobrescreve caso j\u00e1 exista\nprint( d['fish']      )  # Imprime \"wet\"","975df04c":"print( d['monkey']  )  # KeyError: 'monkey' n\u00e3o est\u00e1 no dicion\u00e1rio","2b7c1956":"print( d.get('monkey', 'N\/A')  )  # Recupera um elemento com um valor default caso n\u00e3o exita, evitando KeyError; prints \"N\/A\"\nprint( d.get('fish', 'N\/A')    )  # Aqui o elemento foi encontrado","62dbd0b6":"del d['fish']        # Remove um elemento do dicion\u00e1rio\nprint( d.get('fish', 'N\/A') )  # \"fish\" n\u00e3o est\u00e1 mais no dicion\u00e1rio","f8b13db9":"d = {'person': 2, 'cat': 4, 'spider': 8}\nfor animal in d:\n    legs = d[animal]\n    print('A %s has %d legs' % (animal, legs))","a01d0a76":"d = {'person': 2, 'cat': 4, 'spider': 8}\nfor (animal, legs) in d.items():\n    print('A %s has %d legs' % (animal, legs))","01ecb224":"nums = [0, 1, 2, 3, 4]\neven_num_to_square = {x: x ** 2 for x in nums if x % 2 == 0}\nprint(even_num_to_square)","949a8a69":"animals = {'cat', 'dog'}\nprint( 'cat' in animals   )  # Verifica a exist\u00eancia de um elemento\nprint( 'fish' in animals  )\nanimals.add('fish') #adiciona novo elemento\nprint( len(animals) )  #imprime a quantidade de elementos\nanimals.add('cat')       # adicionar um elemento existente n\u00e3o muda o conjunto\nprint( len(animals) )","0430577c":"animals = {'cat', 'dog', 'fish'}\nfor idx, animal in enumerate(animals):\n    print('#%d: %s' % (idx + 1, animal))\n# Prints \"#1: fish\", \"#2: dog\", \"#3: cat\"","c2886e3e":"from math import sqrt\nprint({int(sqrt(x)) for x in range(30)})","3c6121b5":"d = {(x, x + 1): x for x in range(10)}  # Cria um dicion\u00e1rio cujas chaves s\u00e3o tuplas\nt = (5, 6)       # Cria uma tupla\nprint(type(t))\nprint(d)\nprint( d[t] )\nprint( d[(1, 2)] )  #recupera o valor do elemento cuja chave \u00e9 (1,2)","f5043903":"t[0] = 1 # tuplas n\u00e3o suportam atribui\u00e7\u00e3o de itens, pois s\u00e3o imut\u00e1veis.","06131414":"def sign(x):\n    if x > 0:\n        return 'positive'\n    elif x < 0:\n        return 'negative'\n    else:\n        return 'zero'\n\nfor x in [-1, 0, 1]:\n    print(sign(x))","14993eaf":"def hello(name, loud=False):\n    if loud:\n        print('HELLO, %s' % name.upper())\n    else:\n        print('Hello, %s!' % name)\n\nhello('Bob')\nhello('Fred', loud=True)","dedf6fa4":"import numpy as np","d405ec8b":"a = np.array([1, 2, 3])  # cria um array de rank 1 \nprint(type(a), a.shape, a[0], a[1], a[2])\na[0] = 5                 # Muda o elmento de um array\nprint( a )","76f7e5fa":"b = np.array([[1,2,3],[4,5,6]])   # Cria um array de rank 2\nprint(b)\nprint(b.shape)\nprint(b[0, 0], b[0, 1], b[1, 0])","d9dd6146":"a = np.zeros((2,2))  # Array de zeros\nprint(a)","c0d4b333":"b = np.ones((1,2))   # Array de \"um's\"\nprint(b)","3a913050":"c = np.full((2,2), 7) # Array de uma constante qualquer\nprint(c )\n\n# O alerta mostra que dever\u00edamos explicitamente declarar o n\u00famero de ponto flutuante, pois em vers\u00f5es futuras ser\u00e1 considerado um\n#array de inteiros.","6173f540":"d = np.eye(2)  # Cria um array (matriz) identidade 2x2 \nprint(d)","bbe501df":"e = np.random.random((2,2)) # Cria uma matrix 2x2 com valores aleat\u00f3rios\nprint(e)","29a16ad0":"# Cria um array de rank 2 de dimens\u00f5es (3, 4)\n# [[ 1  2  3  4]\n#  [ 5  6  7  8]\n#  [ 9 10 11 12]]\na = np.array([[1,2,3,4], [5,6,7,8], [9,10,11,12]])\n\n# Cria um novo array tirando uma fatia das duas primeiras linhas e colunas 1 e 2 (2a e 3a colunas):\n# [[2 3]\n#  [6 7]]\nb = a[:2, 1:3]\nprint(b)","0eb22b06":"print( a[0, 1] )\nb[0, 0] = 77    # b[0, 0] \u00e9 o mesmo dado (mesma posi\u00e7\u00e3o no vetor original) que a[0, 1]\nprint( a[0, 1] )","d3715f8b":"a = np.array([[1,2], [3, 4], [5, 6]])\nprint(a)\n# O resultado \u00e9 um array de formato (3,)\nprint(a[[0, 1, 2], [0, 1, 0]])\n\n# Ou poder\u00edamos fazer o mesmo da seguinte forma:\nprint(np.array([a[0, 0], a[1, 1], a[2, 0]]))","cbb2ecff":"a = np.array([[1,2], [3, 4], [5, 6]])\nprint(a)\nbool_idx = (a > 2)  # Retorna um array de booleanos \n\nprint(bool_idx)","6fd680c4":"# podemos usar a t\u00e9cnica para construir um array de rank 1 que consiste dos elementos que atendem ao crit\u00e9rio\nprint(a[bool_idx])","4dc9daf5":"x = np.array([1, 2])  # Numpy escolhe o tipo\ny = np.array([1.0, 2.0])  # Numpy escolhe o tipo\nw = np.array([1, 2], dtype=np.int32)  # For\u00e7a o tipo\nz = np.array([1.0, 2.0], dtype=np.int32)  # For\u00e7a o tipo. Nesse caso h\u00e1 convers\u00e3o de tipos.\n\nprint(x.dtype, y.dtype, w.dtype, z.dtype)","1c7aba19":"%%time\na = range(100000000) ## lista python (built-in)\nprint(type(a))\nprint(sum(a))","9282330f":"%%time\na = np.arange(100000000) #array numpy\nprint(type(a))\nprint(np.sum(a))","87354cdf":"x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n\n# Soma elemento por elmento em cada posi\u00e7\u00e3o\nprint(x + y)\nprint(np.add(x, y))","8a4699cc":"print(x - y)\nprint(np.subtract(x, y))","e8aba20b":"print(x * y)\nprint(np.multiply(x, y))","7b55d1b7":"print(x \/ y)\nprint(np.divide(x, y))","55f87781":"print(np.sqrt(x))","86430011":"x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nv = np.array([9,10])\nw = np.array([11, 12])\n\n# Produto interno dos vetores\nprint(v.dot(w))\nprint(np.dot(v, w))","63967783":"# Multiplica\u00e7\u00e3o da matriz x pelo vetor v\nprint(x.dot(v) )\nprint(np.dot(x, v))","15a2eeb9":"# Multiplica\u00e7\u00e3o da matriz x pela y\nprint(x.dot(y))\nprint(np.dot(x, y))","f2cff400":"x = np.array([[1,2],[3,4]])\nprint(x)\nprint( np.sum(x) )  # Soma todos os elmentos do array em todas as dimens\u00f5es\nprint( np.sum(x, axis=0) )  # Soma as colunas\nprint( np.sum(x, axis=1) )  # Soma as linhas","e8fa5362":"print(x)\nprint(x.T )  # transposta\nprint(x.reshape(1,4))\na = np.array([[1,2,3]])\nprint(a.T)","5e275d40":"import matplotlib.pyplot as plt # importa o m\u00f3dulo e o apelida de plt","28aed5e9":"%matplotlib inline","7ea629ea":"x = np.arange(0, 3 * np.pi, 0.1) # gera n\u00fameros entre 0 e 3*PI, incrementando de 0.1 em 0.1\ny_sin = np.sin(x) # calcula o seno de cada elemento de X\n\n# Gera o gr\u00e1fico de sen(x)\nplt.plot(x, y_sin)","52249713":"y_cos = np.cos(x)\n\nplt.plot(x, y_sin)\nplt.plot(x, y_cos)\nplt.xlabel('x axis label')\nplt.ylabel('y axis label')\nplt.title('Sine and Cosine')\nplt.legend(['Sine', 'Cosine'])","ba084c4c":"# Calcula seno e cosseno de X\nx = np.arange(0, 3 * np.pi, 0.1)\ny_sin = np.sin(x)\ny_cos = np.cos(x)\n\n# Configura um grid de gr\u00e1ficos que tem 2 linhas e uma coluna\n# e diz que vamos trabalhar no primeiro elemento (primeiro gr\u00e1fico)\nplt.subplot(2, 1, 1)\n\n# Gera o primerio gr\u00e1fico\nplt.plot(x, y_sin)\nplt.title('Sine')\n\n# Muda para o segundo subplot e gera o segundo gr\u00e1fico\nplt.subplot(2, 1, 2)\nplt.plot(x, y_cos)\nplt.title('Cosine')\n\n# Mostra a figura\nplt.show()","49067ca6":"# Importando a biblioteca e apelidando de pd\nimport pandas as pd","2c71a556":"# Cria um \u00edndice de datas\ndates = pd.date_range('20130101', periods=6)\n\n# Cria uma s\u00e9rie\nserie = pd.Series([1,3,5,np.nan,6,8], index=dates)\nprint(serie)","a53cd5ed":"df = pd.DataFrame(np.random.randn(6,4), index=dates, columns=list('ABCD'))\nprint(df)","a4265419":"df2 = pd.DataFrame({ 'A' : 1.,\n   'B' : pd.Timestamp('20130102'),\n   'C' : pd.Series(1,index=list(range(4)),dtype='float32'),\n   'D' : np.array([3] * 4,dtype='int32'),\n   'E' : pd.Categorical([\"test\",\"train\",\"test\",\"train\"]),\n  'F' : 'foo' })\nprint(df2)","36fff7c1":"#dtypes retorna o tipo de cada coluna\ndf2.dtypes","230c3882":"df.head() #notar que sem usar print, a formata\u00e7\u00e3o da sa\u00edda fica como tabela.","97cb5520":"df.values","6ef61974":"df.describe()","a12f59fc":"# Ordenando pelo \u00edndice\ndf.sort_index(ascending=False).head()","a7d376dc":"# Ordenando pelos valores\ndf.sort_values(by='B')","2048a0d5":"# Exibindo uma \u00fanica coluna.\ndf['A'] # ou o equivalente df.A","958e88d2":"# Selecionando por posi\u00e7\u00e3o\ndf[0:3]","a767ec6f":"# selecionando pelo \u00edndice\ndf['20130102':'20130104'] # note que \u00e9 uma sele\u00e7\u00e3o inclusiva, diferente da sele\u00e7\u00e3o pela posi\u00e7\u00e3o","b180c0c6":"df.plot()","e40727d1":"dfParasite = pd.read_csv('..\/input\/parasite_data.csv')","cc32cd96":"dfParasite.head()","3ad85d38":"dfParasite.describe()","bd63e70d":"dfParasite['ShannonDiversity'].plot(figsize=(15,5))","90227afa":"#### Slicing (sele\u00e7\u00e3o de sublistas)","f687d68f":"Numpy fornece diversas fun\u00e7\u00f5es para operar sobre arrays. Uma muito utilizada \u00e9 a de soma `sum`:","eb9e69db":"Veja a [document\u00e7\u00e3o](http:\/\/docs.scipy.org\/doc\/numpy\/reference\/routines.math.html) completa das opera\u00e7\u00f5es matem\u00e1ticas sobre arrays","df501b67":"Uma forma mais eficiente de iterar, \u00e9 usar a fun\u00e7\u00e3o `iteritems()`","f9293c5d":"### Tipos de dados b\u00e1sicos","bd8095d7":"A fun\u00e7\u00e3o \"m\u00e1gica\" %%time no in\u00edcio de uma c\u00e9lula do IPython Notebook mede o tempo de execu\u00e7\u00e3o dela","36fa1671":"Boolean array indexing: Permite selecionar elementos de um array baseados em um crit\u00e9rio que satisfa\u00e7a alguma condi\u00e7\u00e3o. Por exemplo:","736e8aa3":"#### Listas","63b66d72":"## Numpy","b98df6c1":"values retorna um array com apenas os valores, sem \u00edndices ou r\u00f3tulos de colunas. \u00c9 muito usado para extrair o conte\u00fado que interessa aos algoritmos","82d882f1":"Podemos tamb\u00e9m redefinir o formato (shape) dos arrays:","8b35c002":"`Series` s\u00e3o vers\u00f5es simplificadas (apenas um conjunto de dados ou coluna) de um `DataFrame` (que possui v\u00e1rias colunas). Ambos possuem um \u00edndice, que pode ser de qualquer tipo","e7f38f7a":"Se voc\u00ea deseja acessar o \u00edndice de cada elemento dentro do loop, use a fun\u00e7\u00e3o `enumerate` em vez de criar um contador e increment\u00e1-lo dentro do loop:","40deffa3":"## Pandas","1b94fde5":"#### Booleanos","2cdd4042":"Documenta\u00e7\u00e3o dos [dicion\u00e1rios](https:\/\/docs.python.org\/2\/library\/stdtypes.html#dict).","a26396e8":"Fun\u00e7\u00f5es em Python s\u00e3o definidas pela palavra chave `def`. Em Python, a indenta\u00e7\u00e3o define os blocos de c\u00f3digo. Todo o c\u00f3digo de uma fun\u00e7\u00e3o deve estar indentado. ","2e15f3e0":"## Matplotlib","60c747e6":"Tamb\u00e9m podemos criar um dataframe utilizando dicion\u00e1rios:","83e54538":"List comprehensions tamb\u00e9m podem ter condi\u00e7\u00f5es:","b2c1c005":"### Arrays","abb67926":"Experimente outras multplica\u00e7\u00f5es abaixo. Veja que \u00e9 necess\u00e1rio haver conformidade entre as dimens\u00f5es.","9bb11799":"N\u00fameros inteiros e reais funcionam como em qualquer outra linguagem. ","c6296c64":"Dictionary comprehensions: Semelhante \u00e0s List Comprehensions:","dec2e6ae":"[![scipy.org](https:\/\/www.scipy.org\/_static\/logo.png)](https:\/\/www.scipy.org\/)","e504eb4a":"Conte\u00fado complementar:<br><br>\n[PYTHON \u2013 FOLHA DE CONSULTA](https:\/\/www.ime.usp.br\/~vwsetzer\/python-opers-funcoes.html)","6c2e1e92":"describe() exibe um resumo estat\u00edstico dos dados","4c73070d":"#### N\u00fameros","2eb5c921":"#### Sets (conjuntos sem repeti\u00e7\u00e3o)","9f2c109e":"#### List comprehensions:","1dce5642":"As opera\u00e7\u00f5es matem\u00e1ticas b\u00e1sicas operam elemento por elmento (em pares) nos arrays:","8a4e768c":"A documenta\u00e7\u00e3o completa de subplots est\u00e1 em [aqui](http:\/\/matplotlib.org\/api\/pyplot_api.html#matplotlib.pyplot.subplot).","c59c2895":"String possuem diversas fun\u00e7\u00f5es \u00fateis:","a0807bd3":"Documenta\u00e7\u00e3o completa de [Listas](https:\/\/docs.python.org\/2\/tutorial\/datastructures.html#more-on-lists).","e013f063":"Para usar o Numpy, voc\u00ea deve importar a biblioteca. O apelido `np` \u00e9 opcional. ","bac2cf5d":"Agora vamos criar um DataFrame com 4 colunas, mas usando o mesmo \u00edndice anterior","22ec86f1":"Fun\u00e7\u00f5es podem receber par\u00e2metros opcionais. Nesse caso, temos de definir um valor padr\u00e3o para o atributo:","bce378c7":"#### Loops","5e4b365a":"#### Tuplas","4814b564":"### Tipos de dados em Arrays","950a4d0d":"Nesse tutorial vamos cobrir:\n\n* Python b\u00e1sico: Tipos e estruturas de dados b\u00e1sicos e fun\u00e7\u00f5es\n* Numpy: Arrays, Array indexing, Opera\u00e7\u00f5es matem\u00e1ticas com Arrays\n* Matplotlib: Gerando gr\u00e1ficos e visualizando imagens\n* Pandas: Importando arquivos e analisando dados","c0e41977":"### Selecionando dados","46e80f59":"Dicion\u00e1rios armazenam pares de (chave, valor), semelhante a um objeto `Map` do Java:","caa46529":"Set \u00e9 um conjunto sem ordena\u00e7\u00e3o e sem repeti\u00e7\u00e3o de elementos:","d10dbf60":"Podemos criar arrays numpy a partir de listas do Python:","21b07b8f":"Slicing \u00e9 uma forma de acessar sublistas dentro de uma lista:","43739687":"Observar que Python n\u00e3o possui a opera\u00e7\u00e3o de incremento unit\u00e1rio (x++ e x--).\n\nPython tamb\u00e9m possui tipos para inteiros longos e n\u00fameros complexos: [documentation](https:\/\/docs.python.org\/2\/library\/stdtypes.html#numeric-types-int-float-long-complex).","c496a46f":"Python \u00e9 uma linguagem de alto n\u00edvel e dinamicamente tipada (os tipos s\u00e3o definidos em tempo de execu\u00e7\u00e3o). Alguns dizem que ela \u00e9 como um pseudoc\u00f3digo, j\u00e1 que permite expressar id\u00e9ias complexas em poucas linhas de c\u00f3digo, enquanto mant\u00e9m a legibilidade. Como exemplo, vejam a implementa\u00e7\u00e3o do famoso algoritmo de ordena\u00e7\u00e3o <a href=\"https:\/\/pt.wikipedia.org\/wiki\/Quicksort\">QuickSort<\/a> em Python:\n","48ab7f6f":"Matplotlib \u00e9 uma das bibliocas gr\u00e1ficas do Python. A nota\u00e7\u00e3o \u00e9 semelhante ao MATLAB. H\u00e1 outras bibliotecas dispon\u00edveis tamb\u00e9m, que utilizam outras nota\u00e7\u00f5es, como a [ggplot](http:\/\/ggplot.yhathq.com\/).\n\nNessa se\u00e7\u00e3o faremos uma breve apresenta\u00e7\u00e3o do m\u00f3dulo `matplotlib.pyplot`.","cad7a660":"Integer array indexing: Quando voc\u00ea usa a t\u00e9cnica de slicing, o resultado \u00e9 sempre um subarray do array original. Em contrapartida, quando voc\u00ea utiliza indexa\u00e7\u00e3o com n\u00fameros inteiros, voc\u00ea pode ter como resultado um formato arbitr\u00e1rio de array como resultado:","276968f1":"Python \u00e9 uma linguagem de programa\u00e7\u00e3o de prop\u00f3sito geral, mas possui uma enorme quantidade de bibliotecas (numpy, scipy, matplotlib, sklearn, skimage, pandas) que a torna uma poderosa ferramenta de computa\u00e7\u00e3o cient\u00edfica, nos mesmos moldes do Matlab e R.\n\nNesse laborat\u00f3rio voc\u00ea ter\u00e1 um vis\u00e3o geral da linguagem e de algumas de suas estruturas de dados. Para aqueles que s\u00e3o usu\u00e1rios do Matlab, h\u00e1 um guia que mostra as semelhan\u00e7as e diferen\u00e7as entre os dois (https:\/\/docs.scipy.org\/doc\/numpy-dev\/user\/numpy-for-matlab-users.html).","20dd30da":"Mais informa\u00e7\u00f5es sobre List comprehensions veja em [pythonacademy.com.br](https:\/\/pythonacademy.com.br\/blog\/list-comprehensions-no-python#list-comprehensions-compreens%C3%A3o-de-listas)\n","d0311f40":"### Opera\u00e7\u00f5es matem\u00e1ticas com Arrays","115e7152":"### Plotting","bb4a32aa":"Pandas \u00e9 uma biblioteca para Python utilizada para manipular conjuntos de dados no formato de `DataFrames`. A sintaxe \u00e9 muito semelhante aos Dataframes do R. A seguir veremos algumas funcionalidades da biblioteca.","6ca7283d":"head() e tail() fornecem a vis\u00e3o dos primeiros e \u00faltimos elementos.","6f5728c1":"### Subplots ","86905a36":"Python possui todos os operadores l\u00f3gicos comuns, mas usa preferencialmente palavras em vez de s\u00edmbolos (`&&`, `||`, etc.):","aa2f32a2":"A tupla \u00e9 semelhante a uma lista, mas \u00e9 imut\u00e1vel e pode ser usada como chave em um dicion\u00e1rio e elementos em conjuntos, enquanto listas n\u00e3o podem.","9ad1ecd3":"Subplots servem para dividir uma mesma figura em v\u00e1rios gr\u00e1ficos separados.","2f5db86b":"Voc\u00ea sempre pode iterar sobre os elementos de uma lista de forma simples. Em Python, a indenta\u00e7\u00e3o define os blocos de c\u00f3digo, em vez do uso de delimitadores como o { } do Java\/C++ ou Begin e End de algumas linguagens.","85b9da3a":"### Visualizando os dados","c51fb0d3":"#### Strings","a35b6805":"Um array numpy \u00e9 uma matriz de valores, *todos do mesmo tipo* (ao contr\u00e1rio de listas padr\u00e3o do Python), e \u00e9 indexado por uma tupla (tuplas podem ter n elementos).\nO n\u00famero de dimens\u00f5es \u00e9 o `rank` do array. O formato (ou shape) \u00e9 uma tupla de inteiros mostrando o tamanho de cada dimens\u00e3o.","f72f5761":"[![scikit-learn](https:\/\/scikit-learn.org\/stable\/_static\/scikit-learn-logo-small.png)](https:\/\/scikit-learn.org\/stable\/modules\/classes.html)","e6863049":"Esse laborat\u00f3rio \u00e9 uma adapta\u00e7\u00e3o do material do curso  <a href=\"http:\/\/cs231n.stanford.edu\/\">CS231n: Convolutional Neural Networks for Visual Recognition<\/a> da Universidade de Stanford. ","a937c16e":"# Laborat\u00f3rio - Introdu\u00e7\u00e3o ao Python","a5688f31":"#### Dicion\u00e1rios","89d79481":"Numpy \u00e9 uma biblioteca muito importante para computa\u00e7\u00e3o cient\u00edfica. Ele \u00e9 implementada em C e fornece arrays multidimensionais de alto desempenho para opera\u00e7\u00f5es matem\u00e1ticas. Se voc\u00ea est\u00e1 familiarizado com Matlab, veja esse [tutorial](http:\/\/wiki.scipy.org\/NumPy_for_Matlab_Users).","6d562cd0":"## Python b\u00e1sico","afc3024d":"Diferentemente do MATLAB, `*` \u00e9 a opera\u00e7\u00e3o padr\u00e3o de multiplica\u00e7\u00e3o elemento por elmento, e n\u00e3o a multiplica\u00e7\u00e3o matricial. \nPara fazer multiplica\u00e7\u00e3o matricial ou entre vetores e matrizes, usamos a fun\u00e7\u00e3o `dot` do numpy (que tamb\u00e9m pode ser chamada diretamente do objeto array).","782193fb":"Aqui est\u00e1 a documenta\u00e7\u00e3o completa de [Strings](https:\/\/docs.python.org\/2\/library\/stdtypes.html#string-methods).","aecfd7a0":"### Outros pacotes importantes","f415d941":"### Comparando o desempenho de um array numpy com listas python","4fcfa3c3":"### Fun\u00e7\u00f5es","860dd8f7":"_Loops_: Iterar sobre os elementos de um conjunto tem a mesma sintaxe de listas, mas note que tamb\u00e9m n\u00e3o temos, assim como nos dicion\u00e1rios, nenhuma garantia sobre qual a ordem dos elementos.","50125e94":"Uma lista \u00e9 equivalente a um array, mas pode ser redimensionado e pode conter elementos de quaisquer tipo, incluindo listas de listas.","7e175d07":"Um slice \u00e9 apenas uma vis\u00e3o do array original. Uma atribui\u00e7\u00e3o em um slice modifica o objeto original","32dd87bc":"### Containers","a22cd6ef":"Numpy fornece diversas maneiras de acessar os elementos dos arrays","a60f9ac8":"Numpy tamb\u00e9m possui outras fun\u00e7\u00f5es para criar arrays:","497223ef":"Voc\u00ea poderia fazer isso com uma List Comprehension:","c225d0d2":"### Carregando a partir de um CSV","bad63d5e":"[Numpy datatypes](http:\/\/docs.scipy.org\/doc\/numpy\/reference\/arrays.dtypes.html).","9ed28725":"A fun\u00e7\u00e3o mais importante do `matplotlib` \u00e9 `plot`, que permite gera\u00e7\u00e3o de gr\u00e1ficos 2D:","4bc34860":"Como dito antes, todo array \u00e9 um grid de elementos do mesmo tipo. Numpy tem uma grande quantidade de tipos num\u00e9ricos. Quando voc\u00ea cria um array, Numpy tenta escolher o melhor tipo, mas voc\u00ea tamb\u00e9m pode definir o seu tipo preferido.","cafbc734":"Python possui diversos tipos de containers: listas, dicion\u00e1rios (Hashmaps), conjuntos (sem repeti\u00e7\u00e3o) e tuplas (semelhante a listas, mas \u00e9 imut\u00e1vel).","4302655f":"Com poucos ajustes podemos gerar v\u00e1rias curvas no mesmo gr\u00e1fico","e42d7529":"## Introdu\u00e7\u00e3o","7506ffda":"Slicing: Semelhante ao que vimos nas listas Python. Como podem ser multidimensionais, precisamos especificar o slice para cada dimens\u00e3o do array:","aebf3020":"### Array indexing","193a0c56":"Set comprehensions:","5f0b2409":"Executando esse comando especial do IPython notebook, geramos os gr\u00e1ficos no pr\u00f3prio notebook, em vez de sermos obrigados a salvar figuras no sistema de arquivos.","b49fb471":"Para iterar sobre os itens de um dicion\u00e1rio, a forma \u00e9 a mesma que para qualquer outro container, mas note que a ordem de inser\u00e7\u00e3o n\u00e3o garante a mesma ordem de recupera\u00e7\u00e3o","08d703a1":"Quando programamos usualmente queremos transformar um tipo de dado em outro. As List Comprehensions s\u00e3o uma ferramenta poderosa para isso. A nota\u00e7\u00e3o \u00e9 similar \u00e0 nota\u00e7\u00e3o da teoria de conjuntos.\n\nImagine que queremos converter uma lista de inteiros numa lista do quadrado desses n\u00fameros:","e5cc11b7":"[![](https:\/\/algospark.com\/img\/icon\/TensorFlow.png)](https:\/\/www.tensorflow.org\/tutorials)"}}