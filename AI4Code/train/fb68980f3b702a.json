{"cell_type":{"da535f07":"code","cf493200":"code","08cbeec2":"code","1d979595":"code","daedcb3c":"code","c07e4e18":"code","91785799":"markdown","e378f6c7":"markdown"},"source":{"da535f07":"import numpy as np","cf493200":"def positive_int(num_array):\n    num_sort = np.sort(num_array)\n    return [i for i in range(1,num_sort[len(num_sort)-1]+2) if i not in num_sort][0]","08cbeec2":"positive_int(np.array([3,4,-1,1]))","1d979595":"positive_int(np.array([1,2,0]))","daedcb3c":"# Answer should be 1\npositive_int(np.array([15,-2,14,6,14,13,-2,17,0,-7]))\n","c07e4e18":"num_sort = np.sort(np.array([3,4,-1,1]))\nfor i in range(1,num_sort[len(num_sort)-1]+2):\n    if i not in num_sort:\n        print(i)\n        break","91785799":"# Daily Coding Problem (Asked by Stripe)\n\nGiven an array of integers, find the first missing positive integer in linear time and constant space. In other words, find the lowest positive integer that does not exist in the array. The array can contain duplicates and negative numbers as well.\n\nFor example, the input [3, 4, -1, 1] should give 2. The input [1, 2, 0] should give 3.\n\nYou can modify the input array in-place.","e378f6c7":"# Appendix"}}