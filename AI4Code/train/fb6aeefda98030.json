{"cell_type":{"1e20a7cb":"code","8d7486a9":"code","b0bada07":"code","9bde596e":"code","96efb8a6":"code","e468d996":"code","3c0bbaaf":"code","ebdd1292":"code","189b70dd":"code","eb755ec1":"code","9a068a06":"code","df575e28":"code","87704aab":"code","cfa6ba66":"code","5ffedf7c":"code","c8031163":"code","01504ffa":"code","95073e45":"code","4d95a696":"code","f44ed040":"code","84a14377":"code","9c8515b9":"code","d665259d":"code","8f52354f":"code","4223c4e8":"code","c097d6fb":"code","c79c895f":"code","b1e8b04d":"code","7407f8f9":"code","4c9ce010":"code","d9dc3dca":"code","8a44bb78":"code","41f39306":"code","90ba5fc7":"code","85978269":"code","0b4a73d7":"code","437c27dd":"code","8f11dc7e":"code","6362c7ae":"code","27710339":"code","5fb7ceb6":"code","394a1a5c":"code","55bfc18b":"code","247fae2a":"code","a74d8f23":"code","83c2fcba":"code","52822485":"code","27c6eb35":"code","cab317ee":"code","e4bcf0b4":"code","f44f9485":"code","e600c26c":"code","75de2962":"code","1c12d136":"code","95af38a1":"code","9e1c9262":"markdown","d91186a0":"markdown","8925f6e1":"markdown","0f6b6d6a":"markdown","4070c48a":"markdown","79afd9fa":"markdown","dd65455c":"markdown","7fc61665":"markdown","b3ac3589":"markdown","8c42d91b":"markdown","a7ed838d":"markdown","3ccff676":"markdown","ec69947d":"markdown","ef21d7e2":"markdown","17347874":"markdown","bee5931f":"markdown","2cb23227":"markdown","ccf4482a":"markdown","4d4d459c":"markdown","69e07ce6":"markdown","d8cd73c6":"markdown","a893259f":"markdown","416679f2":"markdown","b212cd57":"markdown","4912e971":"markdown","5d3e827a":"markdown"},"source":{"1e20a7cb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns    # visualization tool ( g\u00f6rselle\u015ftirme arac\u0131)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):  # kaggle bize eklemek istedi\u011fimiz yollar\u0131 g\u00f6sterdi\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8d7486a9":"data = pd.read_csv(\"\/kaggle\/input\/pokemon-challenge\/pokemon.csv\")  # pokemon.csv tan\u0131tt\u0131k","b0bada07":"data.info()  # info ile columnlar\u0131m\u0131z\u0131n \u00f6zelliklerine bakt\u0131k , veri tiplerine bakt\u0131k\n","9bde596e":"# correlation map  (korelasyon haritas\u0131 )\nf,ax = plt.subplots(figsize=(18,18))\nsns.heatmap(data.corr(),annot = True, linewidths=.5,fmt=\".1f\",ax=ax)\nplt.show()\n#heatmap fonksiyonunu g\u00f6rselle\u015ftirme i\u015flei yapmak i\u00e7in kullan\u0131yoruz\n#data.corr() fonksyonu ise g\u00f6rselle\u015ftirme olmadan verilerimizi excel g\u00f6r\u00fcn\u00fcm\u00fcnde g\u00f6steriyor\n#annot = True , bu ifade renklii kutular i\u00e7inde say\u0131lar  g\u00f6z\u00fcks\u00fcn m\u00fc diye kullan\u0131yoruz\n#linewidths=.5 renkli kutular aras\u0131 kal\u0131nl\u0131k\n#fmt = \".1f\" , ifadesi s\u0131f\u0131rdan sonra 1 say\u0131 yaz\u0131lacak anlm\u0131na gelir\n#figsize=(18,18) , bu ifade kutular\u0131n b\u00fcy\u00fckl\u00fc\u011f\u00fc ile alakalad\u0131r , tabi buda tablonun b\u00fcy\u00fckl\u00fc\u011f\u00fcn\u00fc etkiliyor\n","96efb8a6":"data.head()  # ilk 5 pokemonun \u00e7a\u011f\u0131rd\u0131k ","e468d996":"data.columns  # s\u00fctunlar\u0131n ba\u015fl\u0131klar\u0131n\u0131 g\u00f6rd\u00fck","3c0bbaaf":"# Line plot \u00f6rnek \n# burda h\u0131z ve defans\u0131 kar\u015f\u0131la\u015ft\u0131r\u0131yoruz\n#kind = hangi plot tipini kullanca\u011f\u0131m\u0131z\u0131 belirtiyoruz\n# label \u00e7izgimizn ad\u0131 sa\u011fk\u00f6\u015fedeki g\u00f6r\u00fcnt\u00fc , color \u00e7izgimizin rengi , linewidth \u00e7izgimizin kal\u0131nl\u0131\u011f\u0131 , alpha saydaml\u0131k , grid arka plan \u00e7izgileri\n# linestyle \u00e7izgilerin hangi \u015fekilde \u00e7izildi\u011fi\ndata.Speed.plot(kind=\"line\",color=\"g\",label=\"Speed\",linewidth= 1,alpha=0.7,grid=True,linestyle=\"--\")\ndata.Defense.plot(color=\"r\",label=\"Defense\",linewidth=1,alpha=0.7,grid=True,linestyle=\"-\") # defense de  kind belirtmedik\nplt.legend(loc=\"upper right\")  # bu ifade \u00e7izgi bilgisini g\u00f6steren kutuyu sa\u011f \u00fcstte g\u00f6stermemizi sa\u011fl\u0131yor , \n#e\u011fer bu koduu yazmaz isek kutuyu g\u00f6stermiyor , loc ile kutunun lokasyonunu giriyoruz\nplt.xlabel(\"x axis\")\nplt.ylabel(\"y axis\")\n\nplt.title(\"line plot\") # tablonun ba\u015fl\u0131\u011f\u0131 \nplt.show()","ebdd1292":"# Scatter Plot \n# x = attack , y = defense \n\ndata.plot(kind=\"scatter\",x=\"Attack\",y=\"Defense\",alpha=0.5,color=\"red\") # Attack bilerek b\u00fcy\u00fc kayzd\u0131k , \u00e7\u00fcnk\u00fc column \u00f6yle belirtilmi\u015f\nplt.xlabel(\"Attack\")\nplt.ylabel(\"Dedfence\")\nplt.title(\"Attack Defence Scatter plot\")\nplt.show()\n# nokta g\u00f6sterimli tablomuz\n# attack ve defense do\u011fru orant\u0131l\u0131d\u0131r bunu g\u00f6rm\u00fc\u015f olduk","189b70dd":"plt.scatter(data.Attack,data.Defense,color=\"red\")  # bu \u015fekilde de g\u00f6stermi var \nplt.show()","eb755ec1":"data.Speed.plot(kind=\"hist\",bins=50,figsize=(13,13))\n\n#figsize ile tablonu b\u00fcy\u00fckl\u00fc\u011f\u00fcn\u00fc belirledik\n# bins ile ka\u00e7 adet histogarm s\u00fctunu  ldu\u011funu belirttik\nplt.show()\n# x ekseni speed de\u011ferini veriyor , y ekseni frekans\u0131n\u0131 veriyor(her speed de\u011ferinden ka\u00e7 adet oldu\u011fu)\n","9a068a06":"data.Speed.plot(kind=\"hist\",bins=50)\nplt.clf() # olu\u015fturdu\u011fumuz histogram\u0131 temizledik ","df575e28":"dictionary = {\"spain\":\"madrid\",\"use\":\"vegas\"}\nprint(dictionary.keys())\nprint(dictionary.values())","87704aab":"dictionary[\"spain\"] = \"barcelona\"  # madrid de\u011ferini barcelona ile de\u011fi\u015ftirdik\nprint(dictionary)\ndictionary[\"turkey\"] = \"istanbul\"  # dictionary e veri ekledik\nprint(dictionary)\ndel dictionary[\"spain\"]  # spain verimizi sildik\nprint(dictionary)\nprint(\"turkey\" in dictionary)   # turkey keyimizi aratt\u0131k\ndictionary.clear()  # dictioanry i\u00e7ini temziledik , fakat haf\u0131zada yer kaplamas\u0131n diye bu dictionarymizi siledebiliriz\nprint(dictionary)  \n# del dictionary        dictionary mizi sildik , ula\u015fmaya \u00e7al\u0131\u015f\u0131rsak hata verecektir","cfa6ba66":"\n\n\n#data  = pd.read_csv(\"\/kaggle\/input\/pokemon-challenge\/pokemon.csv\")\nseriler = data[\"Defense\"]   # serilerde tek parantez\nprint(type(seriler))\ndata_frame = data[[\"Defense\"]]   # data framelerde \u00e7ift parantez , asl\u0131nda bir liste i\u00e7inde olu\u015fturuyoruz\nprint(type(data_frame))","5ffedf7c":"x  = data[\"Defense\"] > 200\nprint(x) # boolen \u015feklinde hepsini d\u00f6nd\u00fcrd\u00fc\ndata[x]  # excel tipinde verileri d\u00f6nd\u00fcrd\u00fc","c8031163":"data[np.logical_and(data[\"Defense\"]>200 , data[\"Attack\"]>100)] # logical_and fonksiyonu ile and i\u015fareti kullanmadan mant\u0131k kulland\u0131k","01504ffa":"data[(data[\"Defense\"]>200) & (data[\"Attack\"]>100)]  # fonkisyon kullanmadan & ii\u015faretii ile mant\u0131k kulland\u0131k","95073e45":"i = 0 \nwhile i != 5:\n    print(\"i is:\",i)\n    i +=1\nprint(\"i de\u011feri\",i)","4d95a696":"liste = [1,2,3,4,5]\nfor i in liste:\n    print(\"i is:\",i)\nprint(\"\")\nprint(\"\")\n\n\nfor index ,value in enumerate(liste):  # enumerate ile listede bizi g\u00f6rmedi\u011fimiz index ded\u011ferini , de\u011ferlerimizin kar\u015f\u0131s\u0131na yazd\u0131k\n    print(index,\":\",value)\nprint(\"\\n\\n\")\n    \n    \ndicti = {\"turkey\":\"istanbul\",\"use\":\"vegas\"}\nfor key,values in dicti.items(): # items ile key ve value de\u011ferlerini birlikte \u00e7ektik\n    print(key,\":\",values)\n\nprint(\"\\n\\n\")    \n    \nfor index,value in data[[\"Attack\"]][0:1].iterrows():  \n    # Attack s\u00fctununda ilk indeksimizdeki de\u011ferimizi \u00e7ekmeye \u00e7ali\u015ft\u0131k\n    \n    print(index,\":\",value)","f44ed040":"def tuple_example():\n    t=(1,2,3)\n    return t\na,b,c = tuple_example()  # 3 ded\u011feri , 3 de\u011fi\u015fkene atad\u0131k\nprint(a,b,c)","84a14377":"x = 2 \ndef f():\n    x=3\n    return x\nprint(x)      # d\u0131\u015fardaki de\u011ferimizi ald\u0131\nprint(f())   # i\u00e7erdeki ded\u011ferimizi ald\u0131 \n\n# ilk \u00f6nce yerel de\u011fi\u015fken aran\u0131r e\u011fer yoksa genel de\u011fi\u015fkene bak\u0131l\u0131r","9c8515b9":"def square():\n    \n    def add():\n        x=2\n        y=3\n        z=x+y\n        return z\n    \n    \n    return add()**2\nprint(square())","d665259d":"def f(a,b=2,c=3):  #default arg\u00fcmanlar tan\u0131mlad\u0131k\n    y = a+b+c    \n    return y\nprint(f(5))  # a dan ba\u015fka di\u011fer de\u011fi\u015fkenlerin parametersi old\u011fu i\u00e7in , sadece a de\u011fi\u015fkenine atad\u0131k \n \nprint(f(5,3,6))  # default de\u011ferleride de\u011fi\u015ftirdik","8f52354f":"#flexible arg\u00fcman\n\ndef f(*args):\n    for i in args:\n        print(i)\nf(1)\nprint(\" \")\nf(1,2,3,4,5,6)\nprint(\" \")\n\n#flexible arg\u00fcman **kwargs \ndef f(**kwargs):\n    for key,value in kwargs.items():\n        print(key,\":\",value)\n        \nf(country = \"spain\",capital=\"madrid\",population=1234534)\n","4223c4e8":"square = lambda x: x**2\nprint(square(4))\n\ntot = lambda x,y,z:x+y+z\nprint(tot(1,2,3))","c097d6fb":"number_list = [1,2,3]\ny = map(lambda x:x**2,number_list)\nprint(list(y))","c79c895f":"name = \"ronaldo\"\nit = iter(name)\nprint(next(it))\nprint(*it)","b1e8b04d":"list1 = [1,2,3,4,5]\nlist2 = [6,7,8,9,10]\nz = zip(list1,list2)  # zip : birle\u015ftirme i\u015flemi ysp\u0131yor\nprint(z)\nz_list = list(z)  # liste haline \u00e7evirdik\nprint(z_list)","7407f8f9":"num1 = [1,2,3]\nnum2 = [i + 1 for i in num1]\nprint(num2)","4c9ce010":"# Conditionals on iterable \n\nnumber1 = [5,10,15]\nnumber2 = [i**2 if i == 10 else i-5 if i<7 else i+ 5 for i in number1]\n# number1 de\u011ferlerini \u00e7ektik , i de\u011feri 10 ise karesi al , de\u011fil ise ;7dedn k\u00fc\u00e7\u00fckse i de\u011ferinden 5 \u00e7\u0131kart\n# di\u011fe t\u00fcm durumlarda i ded\u011ferine 5 ekle. i\u015filem s\u0131ras\u0131 bu \u015fekilde\n\nprint(number2)","d9dc3dca":"threshold = sum(data.Speed)\/len(data.Speed)\nprint(\"ortalama :\",threshold)\n#Speed verisinin toplam de\u011ferini , de\u011fer say\u0131s\u0131na b\u00f6ld\u00fck ve ortalama bulduk\ndata[\"speed_level\"] = [\"high\" if i > threshold else \"low\" for i in data.Speed]\n#speed_level ad\u0131nda bir column olu\u015fturduk\n#Speed de\u011ferlerini d\u00f6ng\u00fcye ald\u0131k\n#Speed de\u011ferleri ortalamdan y\u00fcksek ise hight de\u011feri gelececk , d\u00fc\u015f\u00fck ise low\ndata.loc[:10,[\"speed_level\",\"Speed\"]]\n# data.loc ile 0dan 10 a kadar de\u011ferlerimizi ald\u0131k ,speed_level ve Speed columnlar\u0131n\u0131n","8a44bb78":"data.head()\n","41f39306":"data.tail()","90ba5fc7":"data.columns","85978269":"data.shape","0b4a73d7":"data.info()","437c27dd":"data.describe() # yukar\u0131daki a\u00e7\u0131klamas\u0131n\u0131 yapt\u0131\u011f\u0131m\u0131z de\u011fer tan\u0131lar\u0131n\u0131 a\u015fa\u011f\u0131da g\u00f6sterdik","8f11dc7e":"data.boxplot(column=\"Attack\",by=\"Legendary\")","6362c7ae":"data_new = data.head()\ndata_new","27710339":"melted = pd.melt(frame=data_new,id_vars = \"Name\",value_vars=[\"Attack\",\"Defense\"])\nmelted\n\n#frame=data_new ile hangi tablodan \u00e7ekece\u011fimizi belirttik\n#id_vars ile neye g\u00f6re s\u0131ralanaca\u011f\u0131na bakt\u0131k\n#value_vars ile ihtiyac\u0131m\u0131z olan de\u011ferleri \u00e7ektik\n# burda ihityac\u0131m\u0131z olan de\u011ferleri tablodan ald\u0131k gibi d\u00fc\u015f\u00fcnebiliriz","5fb7ceb6":"melted.pivot(index=\"Name\",columns=\"variable\",values=\"value\")","394a1a5c":"data1 = data.head()   # iki datay\u0131 tablonun s\u0131f\u0131r y\u00f6n\u00fcnde birle\u015ftirdim\ndata2 = data.tail()\n\nconc_data_row = pd.concat([data1,data2],axis=0,ignore_index=True) \nconc_data_row\n\n","55bfc18b":"data_1 = data[\"Attack\"].head()\n\ndata_2 = data[\"Defense\"].head()\n\nconc_data_col = pd.concat([data_1,data_2],axis=1)  # tablo 1 y\u00f6n\u00fcnde birle\u015ftirildi\nconc_data_col","247fae2a":"data.dtypes","a74d8f23":"data[\"Type 1\"] = data[\"Type 1\"].astype(\"category\")\ndata[\"Speed\"] = data[\"Speed\"].astype(\"float\")\ndata.dtypes\n# Type 1 ve Speed s\u00fctunlar\u0131n\u0131n veri tiplerini de\u011fi\u015ftirdik","83c2fcba":"data.info()\n\n# g\u00f6r\u00fcld\u00fc\u011f\u00fc \u00fczere Type 1 de\u011ferlerinin hepsi dolu fakat Type 2 de\u011ferlerinin 386 tanesi bo\u015f\n\n","52822485":"data[\"Type 2\"].value_counts(dropna=False)\n#Type 2 s\u00fctununda mesela u\u00e7an(flying) t\u00fcrde 97 pokemon varm\u0131\u015f\n# dropna=False ile bo\u015f olan tipleride g\u00f6sterdik","27c6eb35":"data1 = data\ndata1[\"Type 2\"].dropna(inplace=True)\n#dropna ; null olan de\u011ferleri at demek istiyor\n#inplance = True ile kalan sonu\u00e7lar\u0131 data1 e kaydet\n# bize bu \u015fekilde hi\u00e7bir \u00e7\u0131kt\u0131 vermeyecek \n# i\u015flemimizin do\u011fru oldu\u011funu nerden anlayaca\u011f\u0131z peki ? ","cab317ee":"assert 1==1  \n# assert ile do\u011fru oldu\u011funu d\u00fc\u015f\u00fcnd\u00fcm\u00fcz de\u011feri kontrol ederiz\n# do\u011fru olan de\u011fer herhangi bir \u00e7\u0131kt\u0131 vermez\n","e4bcf0b4":"assert 1==2  # burda g\u00f6rd\u00fc\u011f\u00fcm\u00fcz gibi hata ald\u0131k\n","f44f9485":"assert  data['Type 2'].notnull().all() # returns nothing because we drop nan values\n# null de\u011ferlerin hepsini siliyoruz","e600c26c":"data[\"Type 2\"].fillna(\"empty\",inplace=True)  \n# Type 2 de null de\u011ferleri kald\u0131rm\u0131\u015ft\u0131k , \u015fimdi null yerine empty koyuyoruz","75de2962":"assert data[\"Type 2\"].notnull().all()","1c12d136":"data.info() # tekrar kontrol etti\u011fimizde null de\u011ferler olmad\u0131\u011f\u0131n\u0131 g\u00f6r\u00fcyoruz art\u0131k","95af38a1":"data #null de\u011fer yerinde art\u0131k empty de\u011fer var ","9e1c9262":"# PYTHON DATA SCIENCE TOOLBOX","d91186a0":"VISUAL EXPLORATORY DATA ANALYSIS\n\nKutu grafikleri: ayk\u0131r\u0131 de\u011ferler, minimum \/ maksimum veya nicelikler gibi temel istatistikleri g\u00f6rselle\u015ftirebiliriz\n","8925f6e1":"USER DEFINED FUNCT\u0130ON\n* tuple: tuple = (1,2,3)\n* oval parantez ile g\u00f6sterilir , ayn\u0131anda farkl\u0131 de\u011ferler i\u00e7in birden fazla dedi\u015fken alabilir\n* D\u011ferleri de\u011fi\u015ftrilemez","0f6b6d6a":"* [i + 1 for i in num1 ]: \n* i +1: list comprehension syntax\n* for i in num1: for loop syntax\n* i: iterator\n* num1: iterable object","4070c48a":"    MATPLOTLIB: G\u00f6reslletirmeye yarayan bir k\u00fct\u00fcphane \n    en kolay plotlar , line plot,scatter plot ,histogram plot tur\n    Line plot: E\u011fer x eksenimiz zamaamn ise bu plotu kullanmak daha iyi olacakt\u0131r.\n    Scatter plot: iki veri aras\u0131ndaki correlation'\u0131 bulmak isted\u011fmizde kullan\u0131r\u0131z\n    Histogram plot: bir verinin s\u0131kl\u0131\u011f\u0131n\u0131 bulmak istiyorsak kullan\u0131r\u0131z.\n    ","79afd9fa":"CLEANING  DATA  \n\nDiagnose Data For Celaning \n\nVerilerle i\u015fle yapmadan \u00f6nce verileri te\u015fhisetmmeiz vve temizlememiz gerek\n\nTemiz olayan veriler : \n\nB\u00fcy\u00fck k\u00fc\u00e7\u00fck harf uyumsuzlu\u011funun oldu\u011fu veriler\ns\u00fctun adlar\u0131nada bo\u015fluk olmas\u0131\nkay\u0131p veri \nfarkl\u0131 dil(t\u00fcrk\u00e7e karakter gibi)\n\nVerilerde bozuklu\u011fu , head, tail , columns , shape fonksiyonlar\u0131n\u0131 kullanarak kontrl edece\u011fiz\n","dd65455c":"TIDY DATA\n\nBurada melt() fonksiyonunnu kullan\u0131yoruz","7fc61665":"ITERATORS\n* ","b3ac3589":"# 1. introduction to python","8c42d91b":"SCOPE \n* \u0130\u015flem \u00f6nceli\u011fi hagi de\u011fi\u015fkended olur bunu g\u00f6rece\u011fiz","a7ed838d":"# WH\u0130LE and FOR LOOPS","3ccff676":"NESTED FUNCT\u0130ON\n* \u0130\u00e7 i\u00e7e fonksiyon gibi d\u00fc\u015f\u00fcnebiliriz","ec69947d":"# PANDAS","ef21d7e2":"DATA TYPES\n\nBu ba\u015fl\u0131k alt\u0131nda katagorik veri tipini g\u00f6rece\u011fiz\n\n\n","17347874":"LIST COMPRAHENSION\n","bee5931f":"# DICTIONARY \n","2cb23227":" LAMBDA FUNCT\u0130ON\n \n Daha h\u0131zl\u0131 fonksyon yazarken kullan\u0131l\u0131yor","ccf4482a":" correlaton: iki figure aras\u0131nda korelasyon 1 ise  bunlar birbiriyle do\u011fru orant\u0131l\u0131d\u0131r.\n yukar\u0131daki veriler aras\u0131nda korelasyonu bulmak i\u00e7in \"seaborn\" k\u00fct\u00fcphanesini kullanmam\u0131z gerek\n 1 ve 1 e yak\u0131n \u00e7\u0131karsa pozitif korelasyon , 0 ve s\u0131f\u0131ra yak\u0131  \u00e7\u0131krsanegatif korelasyon diyoruz\n","4d4d459c":" DEDFAULT and FLEXILBE ARGUMENT\n \n default arg\u00fcman example:\n def f(a,b=1):  # b burda default arg\u00fcmand\u0131r\n \n flexible arg\u00fcman:\n def f(*args):    # *args ile bir ve birden fazla de\u011fi\u015fken kullanmam\u0131za yarar\n \n def f(*kwargs):  # bir s\u00f6zl\u00fck arg\u00fcman\u0131d\u0131r\n \n \n","69e07ce6":" i\u00e7inde key ve value bar\u0131nd\u0131r\u0131r ----- \n listelerden daha h\u0131zl\u0131 oldu\u011fu i\u00e7in dictionary kullan\u0131r\u0131z","d8cd73c6":"CONCATENAT\u0130NG DATA\n\nVerileri birle\u015ftirmek\n\ndata1 = data.head()\ndata2 = data.tail()\n\nconc_data_row = pd.concat([data1,data2],axis=0,ignore_index=True)\nconc_data-row ","a893259f":"MISSING DATA and  TESTING WITH ASSERT\n\nEksik verilerle kar\u015f\u0131la\u015f\u0131rsak ; \n\n1) Veriyi oldu\u011fu gibi b\u0131rak\u0131r\u0131z ,herhangi bir ekleme yapmay\u0131z\n\n2) Bo\u015f de\u011ferleri data setten \u00e7\u0131kartabiliriz\n\n3) \u0130\u00e7inde herhangi bir anlam ifaded etmeyen de\u011ferler var ise biz bunlar\u0131 bo\u015f veriye \u00e7evirebiliriz\n\n4) E\u011fer say\u0131sal bir de\u011fer olsayd\u0131 bu bo\u015fluklar , biz bunlar\u0131 di\u011fer de\u011ferlerin ortalamas\u0131n\u0131 alarak doldurabilirdik\n\n\n\n\n","416679f2":"PIVOTING DATA\n\nMelting ifadesinin tersini yap\u0131yoruz\n\n","b212cd57":"EXPLORATORY DATA ANALYSIS  (ARA\u015eTIRICI VER\u0130 ANAL\u0130Z\u0130)\n\nvalue_counts():frekans say\u0131mlar\u0131\n\noutliers(ayk\u0131r\u0131 de\u011ferler): Ayk\u0131r\u0131 veriler. veri de\u011ferinin \u00e7ok y\u00fcksek ve \u00e7ok d\u00fc\u015f\u00fck oldu\u011funu bild\u011fimiz de\u011ferler. G\u00f6rselde ise \u00fcst a\u015f\u0131r\u0131 ve alt a\u015f\u0131r\u0131 olarak belirtilmi\u015f\n\n1,2,3,4,5,6,7,8,9,10,11,12,13,14,115\n\nMedian(Medyan):15 de\u011fer aras\u0131nda tam ortada kalan de\u011fer yani 8 de\u011feri\n\nLower Quartile - Q1 - %25(Alt \u00e7eyrek): 8 ile 1 aras\u0131nda kalan de\u011ferdir. Yani 4 de\u011feri\n\nUpper Quartile - Q3 - %75(\u00dcst \u00e7eyrek): 8 ile 115 de\u011feri aras\u0131nda kalan de\u011fer. Yani 12 de\u011feri\n\nQ3 ile Q1 aras\u0131 IQR olarak adland\u0131r\u0131l\u0131yor\n\nAyk\u0131r\u0131 de\u011fer : 115\n\nstd : standart  sapma \n\nmean : ortalama de\u011fer\n\nmax : en b\u00fcy\u00fck de\u011fer\n\nmin : en k\u00fc\u00e7\u00fck de\u011fer\n\n![](https:\/\/datavizcatalogue.com\/TR\/yontemleri\/images\/anatomy\/SVG\/kutu_grafikleri.svg)\n","4912e971":"data  = pd.read_csv(\"dosyan\u0131nn ad\u0131 ile birlikte bulundu\u011fu dosya yolunu ekliyoruz\")\n\npandas 3 \u00e7e\u015fit veri tipinden ou\u015fuyor \n1. series\n2. dataFrame \n\n> seriler = data[\"Defense\"]   # serilerde tek parantez\n> print(type(series))\n> data_frame = data[[\"Defense\"]]   # data framelerde \u00e7ift parantez , asl\u0131nda bir liste i\u00e7inde olu\u015fturuyoruz\n> print(type(data_frame))","5d3e827a":"ANONYMOUS FUNCT\u0130ON\n\n"}}