{"cell_type":{"27da0323":"code","da1b8399":"code","78a44a39":"code","17fd8027":"code","b9e0a41c":"code","c9da213a":"code","0ce48f12":"code","8ea1dce2":"code","c979ab15":"code","8c26fe7b":"code","6a26fa07":"code","c624c628":"code","c4fee419":"code","0cccf00c":"code","385c61c8":"code","08baca14":"code","5f54f048":"code","452e411a":"code","7335b528":"code","28215cf7":"code","de039832":"code","544b4c42":"code","eb67ffcd":"code","9ad95c11":"code","67a892a6":"code","4aebd932":"code","a6a4cb56":"code","f0942272":"code","4b614e19":"code","c6e94fc5":"code","8df3e808":"code","934188f6":"code","0b713543":"code","f5c6d66b":"code","f49cf201":"code","1b721859":"code","3e90d3ab":"code","29dc4754":"code","fdd9536b":"code","18f4aa5b":"code","c8df6e33":"code","f51148cd":"code","aaaf4a8a":"code","1ccdac35":"code","7b14db30":"code","976f636d":"code","3f7942e9":"code","8d7db373":"markdown","ae5f91ce":"markdown","8da37bad":"markdown","da54adac":"markdown","b1b87032":"markdown","88f20dd8":"markdown","86a8a410":"markdown","38d5fcb9":"markdown"},"source":{"27da0323":"import tensorflow as tf\nfrom tensorflow.keras import Sequential\nfrom tensorflow.keras.layers import Flatten, Dense, Dropout, BatchNormalization\nfrom tensorflow.keras.layers import Conv2D, MaxPool2D\nfrom tensorflow.keras.optimizers import Adam\nprint(tf.__version__)","da1b8399":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder","78a44a39":"file = open('..\/input\/human-activity-recogination\/WISDM_ar_v1.1\/WISDM_ar_v1.1_raw.txt')\nlines = file.readlines()\n\nprocessedList = []\n\nfor i, line in enumerate(lines):\n    try:\n        line = line.split(',')\n        last = line[5].split(';')[0]\n        last = last.strip()\n        if last == '':\n            break;\n        temp = [line[0], line[1], line[2], line[3], line[4], last]\n        processedList.append(temp)\n    except:\n        print('Error at line number: ', i)","17fd8027":"processedList","b9e0a41c":"columns = ['user', 'activity', 'time', 'x', 'y', 'z']","c9da213a":"data = pd.DataFrame(data = processedList, columns = columns)\ndata.head()","0ce48f12":"data.shape","8ea1dce2":"data.info()","c979ab15":"data.isnull().sum()","8c26fe7b":"data['activity'].value_counts()","6a26fa07":"data['x'] = data['x'].astype('float')\ndata['y'] = data['y'].astype('float')\ndata['z'] = data['z'].astype('float')\n","c624c628":"data.info()","c4fee419":"Fs = 20","0cccf00c":"activities = data['activity'].value_counts().index","385c61c8":"activities","08baca14":"def plot_activity(activity, data):\n    fig, (ax0, ax1, ax2) = plt.subplots(nrows=3, figsize=(15, 7), sharex=True)\n    plot_axis(ax0, data['time'], data['x'], 'X-Axis')\n    plot_axis(ax1, data['time'], data['y'], 'Y-Axis')\n    plot_axis(ax2, data['time'], data['z'], 'Z-Axis')\n    plt.subplots_adjust(hspace=0.2)\n    fig.suptitle(activity)\n    plt.subplots_adjust(top=0.90)\n    plt.show()\n\ndef plot_axis(ax, x, y, title):\n    ax.plot(x, y, 'g')\n    ax.set_title(title)\n    ax.xaxis.set_visible(False)\n    ax.set_ylim([min(y) - np.std(y), max(y) + np.std(y)])\n    ax.set_xlim([min(x), max(x)])\n    ax.grid(True)\n\nfor activity in activities:\n    data_for_plot = data[(data['activity'] == activity)][:Fs*10]\n    plot_activity(activity, data_for_plot)","5f54f048":"df = data.drop(['user', 'time'], axis = 1).copy()\ndf.head()","452e411a":"df['activity'].value_counts()","7335b528":"Walking = df[df['activity']=='Walking'].head(3555).copy()\nJogging = df[df['activity']=='Jogging'].head(3555).copy()\nUpstairs = df[df['activity']=='Upstairs'].head(3555).copy()\nDownstairs = df[df['activity']=='Downstairs'].head(3555).copy()\nSitting = df[df['activity']=='Sitting'].head(3555).copy()\nStanding = df[df['activity']=='Standing'].copy()\n","28215cf7":"balanced_data = pd.DataFrame()\nbalanced_data = balanced_data.append([Walking, Jogging, Upstairs, Downstairs, Sitting, Standing])\nbalanced_data.shape","de039832":"balanced_data['activity'].value_counts()","544b4c42":"balanced_data.head()","eb67ffcd":"from sklearn.preprocessing import LabelEncoder","9ad95c11":"label = LabelEncoder()\nbalanced_data['label'] = label.fit_transform(balanced_data['activity'])\nbalanced_data.head()","67a892a6":"label.classes_","4aebd932":"X = balanced_data[['x', 'y', 'z']]\ny = balanced_data['label']","a6a4cb56":"scaler = StandardScaler()\nX = scaler.fit_transform(X)\n\nscaled_X = pd.DataFrame(data = X, columns = ['x', 'y', 'z'])\nscaled_X['label'] = y.values\n\nscaled_X","f0942272":"import scipy.stats as stats","4b614e19":"Fs = 20\nframe_size = Fs*4 # 80\nhop_size = Fs*2 # 40","c6e94fc5":"def get_frames(df, frame_size, hop_size):\n\n    N_FEATURES = 3\n\n    frames = []\n    labels = []\n    for i in range(0, len(df) - frame_size, hop_size):\n        x = df['x'].values[i: i + frame_size]\n        y = df['y'].values[i: i + frame_size]\n        z = df['z'].values[i: i + frame_size]\n        \n        # Retrieve the most often used label in this segment\n        label = stats.mode(df['label'][i: i + frame_size])[0][0]\n        frames.append([x, y, z])\n        labels.append(label)\n\n    # Bring the segments into a better shape\n    frames = np.asarray(frames).reshape(-1, frame_size, N_FEATURES)\n    labels = np.asarray(labels)\n\n    return frames, labels","8df3e808":"X, y = get_frames(scaled_X, frame_size, hop_size)","934188f6":"X.shape, y.shape","0b713543":"(3555*6)\/40","f5c6d66b":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0, stratify = y)","f49cf201":"X_train.shape, X_test.shape","1b721859":"X_train[0].shape, X_test[0].shape","3e90d3ab":"X_train = X_train.reshape(425, 80, 3, 1)\nX_test = X_test.reshape(107, 80, 3, 1)","29dc4754":"X_train[0].shape, X_test[0].shape","fdd9536b":"model = Sequential()\nmodel.add(Conv2D(16, (2, 2), activation = 'relu', input_shape = X_train[0].shape))\nmodel.add(Dropout(0.1))\n\nmodel.add(Conv2D(32, (2, 2), activation='relu'))\nmodel.add(Dropout(0.2))\n\nmodel.add(Flatten())\n\nmodel.add(Dense(64, activation = 'relu'))\nmodel.add(Dropout(0.5))\n\nmodel.add(Dense(6, activation='softmax'))\n","18f4aa5b":"model.compile(optimizer=Adam(learning_rate = 0.001), loss = 'sparse_categorical_crossentropy', metrics = ['accuracy'])","c8df6e33":"history = model.fit(X_train, y_train, epochs = 10, validation_data= (X_test, y_test), verbose=1)","f51148cd":"def plot_learningCurve(history, epochs):\n  # Plot training & validation accuracy values\n  epoch_range = range(1, epochs+1)\n  plt.plot(epoch_range, history.history['accuracy'])\n  plt.plot(epoch_range, history.history['val_accuracy'])\n  plt.title('Model accuracy')\n  plt.ylabel('Accuracy')\n  plt.xlabel('Epoch')\n  plt.legend(['Train', 'Val'], loc='upper left')\n  plt.show()\n\n  # Plot training & validation loss values\n  plt.plot(epoch_range, history.history['loss'])\n  plt.plot(epoch_range, history.history['val_loss'])\n  plt.title('Model loss')\n  plt.ylabel('Loss')\n  plt.xlabel('Epoch')\n  plt.legend(['Train', 'Val'], loc='upper left')\n  plt.show()","aaaf4a8a":"plot_learningCurve(history, 10)","1ccdac35":"from mlxtend.plotting import plot_confusion_matrix\nfrom sklearn.metrics import confusion_matrix","7b14db30":"y_pred = model.predict_classes(X_test)","976f636d":"mat = confusion_matrix(y_test, y_pred)\nplot_confusion_matrix(conf_mat=mat, class_names=label.classes_, show_normed=True, figsize=(7,7))","3f7942e9":"model.save_weights('model.h5')","8d7db373":"#### Load the Dataset ","ae5f91ce":"## Human Activity Recognition Using 2D CNN Model","8da37bad":"### Frame Preparation ","da54adac":"### 2D CNN Model ","b1b87032":"### Balance this data ","88f20dd8":"Dataset Link: http:\/\/www.cis.fordham.edu\/wisdm\/dataset.php\n\nThe WISDM dataset contains six different labels (Downstairs, Jogging, Sitting, Standing, Upstairs, Walking). ","86a8a410":"### Standardized data ","38d5fcb9":"### Confusion Matrix "}}