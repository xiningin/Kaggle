{"cell_type":{"11a2983d":"code","1022a9ac":"code","79e391f7":"code","8e728c04":"code","f95defda":"code","7e0c83c9":"code","181b4c5b":"code","574dc9a7":"code","d0436f79":"code","fefbb648":"code","6d0b6316":"code","2116e8c2":"code","78568c05":"code","8052c436":"code","9111207d":"code","9ae1561f":"code","84756f60":"code","62799e50":"code","c654ec1e":"code","a25736b3":"code","d871a46c":"code","5fe3e0e3":"code","4a347c13":"code","51ce8485":"code","d3f9f464":"code","c029052e":"code","dee145bf":"code","003bf035":"code","6154d012":"code","52413ff0":"code","2e43223e":"code","c27bc467":"code","daa3a8f1":"code","8dbc3f14":"code","ceb83a8d":"code","5d96ca2a":"markdown","10ac35f8":"markdown","da0ef8df":"markdown","2e363609":"markdown","35ef688b":"markdown","3f9becbb":"markdown","dec2b8e7":"markdown","0e9294b2":"markdown","f11a3af3":"markdown","883e56af":"markdown","a195e59d":"markdown","29520964":"markdown","cad48b33":"markdown","29f4b224":"markdown","56fb0c4f":"markdown","2906b7f8":"markdown","e10b18fd":"markdown"},"source":{"11a2983d":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport plotly.graph_objects as go\nfrom bokeh.plotting import figure\nfrom bokeh.models import ColumnDataSource,HoverTool\nfrom bokeh.io import show, output_notebook\nfrom scipy.ndimage import gaussian_gradient_magnitude\nfrom PIL import Image\nfrom wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\nimport seaborn as sns\nfrom matplotlib_venn import venn2\nimport scipy as sp\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nimport random","1022a9ac":"# import datasets\nspotify = pd.read_csv('\/kaggle\/input\/spotify-dataset-19212020-160k-tracks\/data.csv')\ngrammy = pd.read_csv('\/kaggle\/input\/data-on-songs-from-billboard-19992019\/BillboardFromLast20\/grammySongs_1999-2019.csv')\nbillboard = pd.read_csv('\/kaggle\/input\/data-on-songs-from-billboard-19992019\/BillboardFromLast20\/billboardHot100_1999-2019.csv')","79e391f7":"len(spotify)","8e728c04":"len(grammy)","f95defda":"len(billboard)","7e0c83c9":"spotify.head()","181b4c5b":"grammy.head()","574dc9a7":"billboard.head()","d0436f79":"# put spotify into the same format\nspotify['artists'] = spotify['artists'].str.strip(\"[]\")\nspotify['artists'] = spotify['artists'].str.replace(\"'\", \"\").str.replace(\" &\", \",\")\nspotify.rename(columns = {'name':'Name', 'artists':'Artist'}, inplace = True)\nspotify['Name'] = spotify['Name'].str.lower()\nspotify['Artist'] = spotify['Artist'].str.lower()\n\n# put grammy into the same format\ngrammy['Artist'] = grammy['Artist'].str.replace(\" &\", \",\")\ngrammy['Name'] = grammy['Name'].str.lower()\ngrammy['Artist'] = grammy['Artist'].str.lower()\n\n# put billboard into the same format\nbillboard.rename(columns = {'Artists':'Artist'}, inplace = True)\nbillboard['Artist'] = billboard['Artist'].str.replace(\" &\", \",\")\nbillboard['Name'] = billboard['Name'].str.lower()\nbillboard['Artist'] = billboard['Artist'].str.lower()","fefbb648":"# clean spotify dataset (in case it contains the same songs by the same artists)\nsongs = spotify.groupby(['Name', 'Artist'], as_index = False).agg({'acousticness' : 'mean', 'acousticness' : 'mean', 'danceability' : 'mean', 'duration_ms' : 'mean', 'energy' : 'mean', 'explicit' : 'max', 'instrumentalness' : 'mean', 'key' : 'median',  'liveness' : 'mean',  'loudness' : 'mean',  'mode' : 'max', 'popularity' : 'sum', 'speechiness' : 'mean', 'tempo' : 'mean', 'valence' : 'mean', 'year' : 'min'})\n\n# clean grammy songs, merge it with songs(spotify) to get more info, drop useless columns\ngr = grammy.merge(songs, on = ['Name', 'Artist'])\ngr = gr.drop(columns = 'Unnamed: 0').drop(columns = 'X')\n\n# clean billboard\nbb1 = billboard.groupby(['Name', 'Artist', 'Week', 'Weekly.rank'], as_index = False).agg({'Weeks.on.chart' : 'max', 'Peak.position' : 'min', 'Genre' : 'first', 'Date':'first'})\nbb1 = bb1.merge(songs, on = ['Name', 'Artist'])\nbb2 = bb1.groupby(['Name','Artist'], as_index = False).agg({'Weeks.on.chart' : 'max', 'Peak.position' : 'min'})\nbb2 = bb2.dropna(subset = ['Peak.position', 'Weeks.on.chart'])\nbb3 = bb1.groupby(['Name','Artist'], as_index = False).agg({'acousticness' : 'mean', 'danceability' : 'mean', 'duration_ms' : 'mean', 'energy' : 'mean', 'explicit' : 'max', 'instrumentalness' : 'mean', 'key' : 'median',  'liveness' : 'mean',  'loudness' : 'mean',  'mode' : 'max', 'speechiness' : 'mean', 'tempo' : 'mean', 'valence' : 'mean', 'year' : 'min'})\n\n# capitalize each word (reformatting)\nsongs['Name'] = songs['Name'].str.title()\nsongs['Artist'] = songs['Artist'].str.title()\ngr['Name'] = gr['Name'].str.title()\ngr['Artist'] = gr['Artist'].str.title()\nbb1['Name'] = bb1['Name'].str.title()\nbb1['Artist'] = bb1['Artist'].str.title()\nbb2['Name'] = bb2['Name'].str.title()\nbb2['Artist'] = bb2['Artist'].str.title()\nbb3['Name'] = bb3['Name'].str.title()\nbb3['Artist'] = bb3['Artist'].str.title()\nbb3['loudness'] = bb3['loudness']\/60 + 1\nsongs['loudness'] = songs['loudness']\/60 + 1\ngr['loudness'] = gr['loudness']\/60 + 1","6d0b6316":"songs.head()","2116e8c2":"gr.head()","78568c05":"bb1.head()","8052c436":"bb2.head()","9111207d":"bb3.head()","9ae1561f":"fig = go.Figure()\nfig.add_trace(go.Box(y=songs['acousticness'], name = 'acousticness - all', hovertext= songs['Name'],\n    hoverinfo=\"y+text\"))\nfig.add_trace(go.Box(y=gr['acousticness'], name = 'acousticness - grammy', hovertext= gr['Name'],\n    hoverinfo=\"y+text\"))\nfig.add_trace(go.Box(y=bb3['acousticness'], name = 'acousticness - popular', hovertext= bb3['Name'],\n    hoverinfo=\"y+text\"))\nfig.add_trace(go.Box(y=songs['danceability'], name = 'danceability - all', hovertext= songs['Name'],\n    hoverinfo=\"y+text\"))\nfig.add_trace(go.Box(y=gr['danceability'], name = 'danceability - grammy', hovertext= gr['Name'],\n    hoverinfo=\"y+text\"))\nfig.add_trace(go.Box(y=bb3['danceability'], name = 'danceability - popular', hovertext= bb3['Name'],\n    hoverinfo=\"y+text\"))\nfig.add_trace(go.Box(y=songs['energy'], name = 'energy - all', hovertext= songs['Name'],\n    hoverinfo=\"y+text\"))\nfig.add_trace(go.Box(y=gr['energy'], name = 'energy - grammy', hovertext= gr['Name'],\n    hoverinfo=\"y+text\"))\nfig.add_trace(go.Box(y=bb3['energy'], name = 'energy - popular', hovertext= bb3['Name'],\n    hoverinfo=\"y+text\"))\nfig.add_trace(go.Box(y=songs['instrumentalness'], name = 'instrumentalness - all', hovertext= songs['Name'],\n    hoverinfo=\"y+text\"))\nfig.add_trace(go.Box(y=gr['instrumentalness'], name = 'instrumentalness - grammy', hovertext= gr['Name'],\n    hoverinfo=\"y+text\"))\nfig.add_trace(go.Box(y=bb3['instrumentalness'], name = 'instrumentalness - popular', hovertext= bb3['Name'],\n    hoverinfo=\"y+text\"))\nfig.add_trace(go.Box(y=songs['liveness'], name = 'liveness - all', hovertext= songs['Name'],\n    hoverinfo=\"y+text\"))\nfig.add_trace(go.Box(y=gr['liveness'], name = 'liveness - grammy', hovertext= gr['Name'],\n    hoverinfo=\"y+text\"))\nfig.add_trace(go.Box(y=bb3['liveness'], name = 'liveness - popular', hovertext= bb3['Name'],\n    hoverinfo=\"y+text\"))\nfig.add_trace(go.Box(y=songs['loudness'], name = 'loudness - all', hovertext= songs['Name'],\n    hoverinfo=\"y+text\"))\nfig.add_trace(go.Box(y=gr['loudness'], name = 'loudness - grammy', hovertext= gr['Name'],\n    hoverinfo=\"y+text\"))\nfig.add_trace(go.Box(y=bb3['loudness'], name = 'loudness - popular', hovertext= bb3['Name'],\n    hoverinfo=\"y+text\"))\nfig.add_trace(go.Box(y=songs['valence'], name = 'valence - all', hovertext= songs['Name'],\n    hoverinfo=\"y+text\"))\nfig.add_trace(go.Box(y=gr['valence'], name = 'valence - grammy', hovertext= gr['Name'],\n    hoverinfo=\"y+text\"))\nfig.add_trace(go.Box(y=bb3['valence'], name = 'valence - popular', hovertext= bb3['Name'],\n    hoverinfo=\"y+text\"))\n\nfig.update_layout(\n    title='Audio Profile Comparison between popular songs, award-winning songs, and all songs',\n    yaxis=dict(\n        zerolinecolor='rgb(0, 0, 0)',\n        zerolinewidth=2,\n    ),\n    paper_bgcolor='rgb(250, 250, 250)',\n    plot_bgcolor='rgb(230, 230, 240)',\n    showlegend=False, \n)\nfig.show()","84756f60":"f = plt.figure(figsize=(10, 10))\ncorr = spotify.corr()\nax = sns.heatmap(corr, vmin=-1, vmax=1, center=0,  cmap = sns.diverging_palette(220, 10, n=100),  square=True)\n_ = ax.set_xticklabels(ax.get_xticklabels(), rotation=45, horizontalalignment='right')","62799e50":"STOPWORDS.add(\"featuring\")\nSTOPWORDS.add(\"songwriter\")\nSTOPWORDS.add(\"nan\")\nSTOPWORDS.add(\"artist\")\nSTOPWORDS.add(\"the\")\nstopwords = set(STOPWORDS)","c654ec1e":"def green_color_func(word, font_size, position, orientation, random_state=None,\n                    **kwargs):\n    return \"hsl(140, 25%%, %d%%)\" % random.randint(1, 60)\n_words = '' \n  \n# iterate through the csv file \nfor val in gr.Artist: \n      \n    # typecaste each val to string \n    val = str(val)\n  \n    # split the value \n    tokens = val.split()\n      \n    _words += \" \".join(tokens)+\" \"\n  \nwordcloud = WordCloud(width = 800, height = 800,\n                background_color ='white',\n                stopwords = stopwords,\n                min_font_size = 10,random_state=1).generate(_words)\n\n# plot the WordCloud image\nplt.figure(figsize = (8, 8))\nplt.imshow(wordcloud.recolor(color_func=green_color_func, random_state=3),\n           interpolation=\"bilinear\")\nplt.axis(\"off\")\nplt.tight_layout(pad = 0)\nplt.show()","a25736b3":"def blue_color_func(word, font_size, position, orientation, random_state=None,\n                    **kwargs):\n    return \"hsl(200, 250%%, %d%%)\" % random.randint(1, 60)\n_words = ''  \n  \n# iterate through the csv file \nfor val in billboard.Artist: \n      \n    # typecaste each val to string \n    val = str(val).title()\n  \n    # split the value \n    tokens = val.split()\n      \n    _words += \" \".join(tokens)+\" \"\n  \nwordcloud = WordCloud(width = 800, height = 800,\n                background_color ='white',\n                stopwords = stopwords,\n                min_font_size = 10,random_state=1).generate(_words)\n\n# plot the WordCloud image\nplt.figure(figsize = (8, 8))\nplt.imshow(wordcloud.recolor(color_func=blue_color_func, random_state=3),\n           interpolation=\"bilinear\")\nplt.axis(\"off\")\nplt.tight_layout(pad = 0)\nplt.show()","d871a46c":"def purple_color_func(word, font_size, position, orientation, random_state=None,\n                    **kwargs):\n    return \"hsl(267, 100%%, %d%%)\" % random.randint(1, 60)\nd = os.path.dirname(__file__) if \"__file__\" in locals() else os.getcwd()\n_words_2 = '' \n\n  \n# iterate through the csv file \nfor val in songs.Artist: \n      \n    # typecaste each val to string \n    val = str(val) \n  \n    # split the value \n    tokens = val.split()\n      \n    _words_2 += \" \".join(tokens)+\" \"\n    \nmusic_color = np.array(Image.open(os.path.join(d, \"..\/input\/images\/cd1.png\"))) # a cd image found online\n\nstopwords = set(STOPWORDS) \nSTOPWORDS.add(\"featuring\")\nSTOPWORDS.add(\"songwriter\")\nSTOPWORDS.add(\"nan\")\nSTOPWORDS.add(\"artist\")\n\nwc = WordCloud(width = 400, height = 400,background_color=\"white\", max_words=2000, mask=music_color,\n               stopwords=stopwords, max_font_size=40, random_state=42)\n\nwc.generate(_words_2)\n\n# create coloring from image\nimage_colors = ImageColorGenerator(music_color)\n# show\nplt.figure(figsize = (15, 15))\nplt.imshow(wc.recolor(color_func=purple_color_func), interpolation=\"bilinear\")\nplt.axis(\"off\")\nplt.figure()\nplt.tight_layout(pad = 0)\nplt.show()","5fe3e0e3":"coeffs = np.polyfit(bb2[\"Peak.position\"], bb2[\"Weeks.on.chart\"], 1)\nplt.scatter(bb2[\"Peak.position\"], bb2[\"Weeks.on.chart\"])\nplt.xlabel(\"Chart Position\")\nplt.ylabel(\"Weeks on Chart\")\nplt.plot(bb2[\"Peak.position\"], coeffs[0] * bb2[\"Peak.position\"] + coeffs[1], color = \"black\")","4a347c13":"bb2_mean = bb2.groupby('Peak.position',as_index = False).agg({'Weeks.on.chart' : 'mean'})\nplt.scatter(bb2_mean[\"Peak.position\"], bb2_mean[\"Weeks.on.chart\"])\nplt.xlabel(\"Peak Position\")\nplt.ylabel(\"Mean weeks on chart of songs with the same peak position\")\nplt.plot(bb2_mean[\"Peak.position\"], coeffs[0] * bb2_mean[\"Peak.position\"] + coeffs[1], color = \"black\")","51ce8485":"output_notebook()","d3f9f464":"data2 = ColumnDataSource(bb2)","c029052e":"TOOLTIPS = [(\"(Name, Artist, Peak, Weeks)\", \"(@Name, @Artist, @{Peak.position}, @{Weeks.on.chart})\")]\n\np = figure(title = 'Weeks On Chart vs. Peak Position', plot_width=500, plot_height=400, tooltips = TOOLTIPS)\n\n# add a circle renderer with a size, color, and alpha\n# plt.scatter(pz['contributions'], pz['GPA'])\np.circle(\"Peak.position\", \"Weeks.on.chart\", size = 3, color=\"blue\", source = data2)\np.xaxis.axis_label = 'Weekly Rank'\np.yaxis.axis_label = 'Weeks On Chart'\n# show the results\nshow(p)","dee145bf":"rad = bb1[(bb1['Name'] == 'Radioactive') & (bb1['Artist'] == 'Imagine Dragons')]\ncostar = bb1[(bb1['Name'] == 'Counting Stars') & (bb1['Artist'] == 'Onerepublic')]\nroll = bb1[(bb1['Name'] == 'Rolling In The Deep') & (bb1['Artist'] == 'Adele')]\nimy = bb1[(bb1['Name'] == 'I\\'M Yours') & (bb1['Artist'] == 'Jason Mraz')]\nsoy = bb1[(bb1['Name'] == 'Shape Of You') & (bb1['Artist'] == 'Ed Sheeran')]\n\nynt = bb1[(bb1['Name'] == 'You Need To Calm Down') & (bb1['Artist'] == 'Taylor Swift')]\nibe = bb1[(bb1['Name'] == 'I Believe') & (bb1['Artist'] == 'Fantasia')]\nbadg = bb1[(bb1['Name'] == 'Bad Guy') & (bb1['Artist'] == 'Billie Eilish')]\nks = bb1[(bb1['Name'] == 'Killshot') & (bb1['Artist'] == 'Eminem')]\natm = bb1[(bb1['Name'] == 'Atm') & (bb1['Artist'] == 'J. Cole')]","003bf035":"fig = go.Figure()\nfig.add_trace(go.Scatter(x = rad['Weeks.on.chart'], y = rad['Weekly.rank'], mode = 'lines', name = 'Radioactive - Imagine Dragons'))\nfig.add_trace(go.Scatter(x = costar['Weeks.on.chart'], y = costar['Weekly.rank'], mode = 'lines', name = 'Counting Stars - OneRepublic'))\nfig.add_trace(go.Scatter(x = roll['Weeks.on.chart'], y = roll['Weekly.rank'], mode = 'lines', name = 'Rolling In The Deep - Adele'))\nfig.add_trace(go.Scatter(x = imy['Weeks.on.chart'], y = imy['Weekly.rank'], mode = 'lines', name = 'I\\'m Yours - Jason Mraz'))\nfig.add_trace(go.Scatter(x = soy['Weeks.on.chart'], y = soy['Weekly.rank'], mode = 'lines', name = 'Shape Of You - Ed Sheeran'))\n\nfig.add_trace(go.Scatter(x = ynt['Weeks.on.chart'], y = ynt['Weekly.rank'], mode = 'lines', name = 'You Need To Calm Down - Taylor Swift'))\nfig.add_trace(go.Scatter(x = ibe['Weeks.on.chart'], y = ibe['Weekly.rank'], mode = 'lines', name = 'I Believe - Fantasia'))\nfig.add_trace(go.Scatter(x = badg['Weeks.on.chart'], y = badg['Weekly.rank'], mode = 'lines', name = 'Bad Guy - Billie Eilish'))\nfig.add_trace(go.Scatter(x = ks['Weeks.on.chart'], y = ks['Weekly.rank'], mode = 'lines', name = 'Killshot - Eminem'))\nfig.add_trace(go.Scatter(x = atm['Weeks.on.chart'], y = atm['Weekly.rank'], mode = 'lines', name = 'Atm - J. Cole'))\n\nfig.update_layout(\n    title='Weekly Rank vs. Weeks on Billboard',\n    xaxis_title=\"Weeks On Chart\",\n    yaxis_title=\"Weekly Rank\",\n    legend_title=\"Song - Artist\",\n    paper_bgcolor='rgb(250, 250, 250)',\n    plot_bgcolor='rgb(230, 230, 240)'\n)\nfig['layout']['yaxis']['autorange'] = \"reversed\"\nfig.show()","6154d012":"gr[gr['Name'] == 'Rolling In The Deep']","52413ff0":"gr[gr['Name'] == 'Shape Of You']","2e43223e":"gr[gr['Name'] == 'Radioactive']","c27bc467":"plt.figure(figsize=(6,6))\nv = venn2([set(gr['Name']), set(bb1['Name'])], \n          set_labels = ('Songs got Grammy', 'Songs on Billboard'), \n          set_colors=('darkblue', 'lightblue'), \n          )\nv.get_label_by_id('A').set_size(20)\nv.get_label_by_id('A').set_color('darkblue')\nv.get_label_by_id('B').set_size(15)\nv.get_label_by_id('A').set_color('darkblue')","daa3a8f1":"grammy_for_pie = gr.groupby(\"Genre\", as_index = False).agg({\"Name\": \"count\"})","8dbc3f14":"my_colors = ['palegreen', 'paleturquoise', 'lightpink', 'lightsteelblue', \n           'khaki', 'tomato', 'aqua', 'lightseagreen', 'lightsalmon', 'lightskyblue',\"plum\"]","ceb83a8d":"plt.figure(figsize = (10,15))\n_ = plt.pie(grammy_for_pie[\"Name\"],labels= grammy_for_pie[\"Genre\"],autopct=\"%1.2f%%\",colors= my_colors)","5d96ca2a":"# Objective: \n    Compare popular songs(billboard) & award_winning(grammy) songs from different aspects.\n# Introduction:\n    We are very curious about what kind of music do people like and what kind of music are likely to get awards. We initially thought that the music that are popular and the ones that win awards will differ greatly. However, through analyzing and visualizing data: we noticed that the two kind of music actually overlap greatly.","10ac35f8":"    In order to assign features to grammy and billboard songs, we renamed the columns' name and changed the format of the objects in the Artist column (get rid of the square bracket and quotation mark, change \"&\" to \",\") and combined the repeated songs with columns(features\/weekly rank\/weeks on chart, etc.) we need for different cleaned datasets.","da0ef8df":"# 2. Correlation heat graph: \n\n    The heat graph takes a closer look at the audio profile of the Spotify songs, and focuses on the connection between song features. The graph shows which properties of songs are more correlated with each by colors. \n\n    According to the scale on the right, as the correlation box become more reddish it shows that two properties are more correlated with each other. We can see high correlation between energy & mode, energy & loudness, dancability & valence... The years column is particularly interesting, we can see that over the years song become more danceable, more energetic, louder and that newer songs are more popular. This line shows the trend of song features development.","2e363609":"# Visualizations ","35ef688b":"    This graph shows more clearly that songs with higher peak positions tend to stay on the chart longer, meaning that popularity produces popularity. People tend to listen to songs that are already popular and further add to their popularity.","3f9becbb":"# Conclusion:\n    From the analysis and visualization above, we have come to the conclusion that popularity and awards are correlated. the reason is still unclear.\n\n    One possibility is the distribution of the Grammy Awards contributes to the intersection. Grammy awards are awarded by genres, which a great proportion of the awards are given to popular genres. As shown in the Pie Chart below, almost 50% of the awards are given to Country, Pop, and Rap. In terms of specific songs, people might start listening to a song after it gets an award, or a song might get nominated for an award because of its popularity. The exact reason behind this trend needs further research.","dec2b8e7":"# 6. Line Chart\n    We picked out some representative points (high week, high peak, and low week, high peak) from the scatter plot above and graphed out the position of the songs throughout their presense on Billboard by weeks. The line graph below shows a comparison between ever-lasting classics and evanescent fireworks on the Billboard. \n    \n    Most of the long-lived songs first appear at the bottom part of the Billboard and climbs up to the top and disappear when they fall out of Top 50. On the other hand, the short lived ones usually show up at the top of the chart but drops to the bottom or just disappears suddenly after a short period of time. These examples include You Need To Calm Down and Killshot. We hypothesize that the long-lived songs climbed up because of the quality or brainwashiness of the song itself, while the short-lived songs flashes at the very top of Billboard because of either the reputation of the artist or advertisement of the song.\n    \n    Noticing the wierd invisible 'dead' line of Rank 50 that makes all the long-lasting songs disappear from Billboard, we researched about this phenomenon and found out the recurrent rules of Billboard: For songs that have been on chart for more than 20 weeks, they will be removed from Billboard and placed into the recurrent list if they fall below rank 50. This rule also explains the trendline of Shape Of You by Ed Sheeran: because it appears on Billboard two times but have fallen below rank 50.","0e9294b2":"# 7. Venn Diagram\n    After displaying the overlapping trends in popular and award-winning song features and artist, the venn diagram below shows the intersection of popular and award-winning songs in the simplest and most straightforward way. As shown by the venn diagram, 131 out of 180 songs that got the Grammy Award (we count the songs that win multiple awards as one song) have appeared on the Billboard as some time.","f11a3af3":"# 5. Scatter Plot2\n    The songs with a high peak position in Scatter Plot 1 shows a great range of weeks on chart, different from songs with a low peak position. Therefore, we made an interactive chart with the same information to provide information about each points for further analysis.\n\n    As shown by the graph when hovering, the left top point on the chart Radioactive by Imagine Dragons (Peak:3, weeks: 87!!!), and  the bottom left point is You Need To Calm Down by Taylor Swift (Peak: 2, weeks: 2). Both songs have a really high peak position, but the weeks on chart varies drastically.","883e56af":"    At the end we have five cleaned dataset:\n    1. songs: all the songs\n    2. gr: all grammy awards and songs and features\n    3. bb1: all billboard songs and features (contain repeated songs but on different weeks)\n    4. bb2: combine the same song contain peak position and weeks on chart (without repeated)\n    5. bb3: combine the same song with features (without repeated)","a195e59d":"# Data cleaning\n    The three datasets we used are: Spotify Music Database 1912-2020, Grammy Awards 1999-2018, and BillBoard Top 100 1999-2019. The spotify dataset that includes 160,000+ entrys acts as a control group, which includes roughly all kinds of available music. The Billboard datasets acts as a representation of popular songs, while the Grammy dataset acts as a representation of award winning songs. In order to make the best use out of the datasets, we filtered out the information we do not need and merged the datasets for comparison purposes. As following:","29520964":"# Further analysis or things to improve:\n    The other aspect to focus on in further research will be in the data cleaning part. The Grammy data set initially has over 400 entrys but when we merge it with the Spotify dataset, it got cut to about 220 entrys. Maybe some of the songs that got awarded are not recorded in Spotify, but since the Spotify database, that is not likely. If we had more time, we would look into what happened in the merging process and check if formatting issues are causing the elimination of those entries.\n    Also, the Spotify dataset include many lyricless music, including classical music, piano compositions, electric lyricless music and so on. Since our project focuses on songs with lyrics, we can improve the accuracy of our analysis if we can find out a way to take out those music pieces.","cad48b33":"# 4. Scatter Plot1: \n\n    We focused on the Billboard dataset for the scatterplots below. We are going to plot the peak position of a song v.s. its weeks on chart using the dataset bb2 (with only needed columns left and filtered out repeated terms). ","29f4b224":"    This graph displays the week and peak position of each song in the Billboard dataset, we can roughly see a correlation between peak position and weeks on chart. \n\n    Therefore we plotted another graph grouping the songs with the same peak position and graphing their mean weeks on chart: ","56fb0c4f":"# 3. Wordcloud:\n    In the two graphs above, we analyzed the features of the audio profile of the songs. In the wordclouds below, we are oing to analyze the intersection and difference of artists who often appear on Billboard and who get many Grammy Awards. The following wordclouds are made in these order: Grammy, Billboard, and Spotify.","2906b7f8":"    We realize that there are lots of similar artists, like Taylor Swift and Coldplay, in the Billboard and Grammy word clouds, proving that high-quality songs tend to be popular, and popular songs tend to win awards. \n\n    However, we also noticed some differences between the two wordclouds. For example, Beyonc\u00e9 is one of the biggest name in the Grammy wordcloud, yet she can barely be seen on the Billboard wordcloud. We find this pretty shocking. The lack of appearance of Beyonc\u00e9 on the Billboard wordcloud shows that people are more likely to listen to freshly published songs. Therefore, even though Beyonc\u00e9 is very famous, she does not appear on Billboard very often likely because the lack of new songs. \n\n    We did not find the Spotify wordcloud particularly useful because we can see that the artist with most music published are actually classical music composers, like Beetovin, Bach, and Chopin. Since the other two datasets include mainly songs with words, this Spotify wordcloud does not provide much information.","e10b18fd":"# 1. Boxplot:\n    In order to compare the features of average music, popular music, and award_winning music, we utilized the audio features that the Spotify dataset assigned to each song to compare the values of each feature of the three datasets. The following graph shows that compared to the features of the huge Spotify music gallery, BillBoard songs and Grammy songs tend to be more energetic, more dancable, less acoustic, less positive, and less instrumental. The Billboard data displays that nowadays people tend to favor dancable, energetic, and loud music, as these kind of music can elicit positive emotions and are more brainwashing. The Grammy data tend to be studio recordings (low liveness), probably because of sound quality. One really interesting feature is 'loudness', we can see that no music with loudness less than 0.6 are on Billboard or wins Grammy. By hovering on the boxplot, we can see that the outliers of the spotify control group are mostly voiceless music. We can probably further improve the scaling by taking out those music and rescaling the loudness."}}