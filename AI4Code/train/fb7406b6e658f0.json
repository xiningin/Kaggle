{"cell_type":{"10f92f95":"code","70659522":"code","78f48810":"code","73b8f450":"code","3f99b30d":"code","015f79ed":"code","3359b465":"code","8a9a6d02":"code","8e2e4d5c":"code","bf6b577f":"code","f3d22e85":"markdown","65626d4a":"markdown","2da4f719":"markdown","a7b2b28a":"markdown","043dd5b8":"markdown"},"source":{"10f92f95":"import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\nfrom matplotlib import cm\nfrom matplotlib.ticker import LinearLocator\nimport matplotlib.animation as animation\n\nfrom IPython.display import HTML","70659522":"def f(x,y):\n    \"the parabolic surface function\"\n    return x**2+y**2\n\nX = np.arange(-5, 5, 0.1)\nY = np.arange(-5, 5, 0.1)\n# Create a mesh grid to get a 2d arrays from the two 1d arrays\nX, Y = np.meshgrid(X, Y)\n\n# Z from the X,Y meshgrid (which is also a 2d array)\nZ = f(X,Y)","78f48810":"fig = plt.figure()\n# we say that the plot is 3d with the projection option\n# and we set the plot angle in view_init\nax = fig.add_subplot(111, projection='3d')\nax.view_init(elev=20, azim=30)\n\n#plot the surface with plot_surface\nax.plot_surface(X,Y,Z)\n\n#the points can be plotted with scatter.\nax.scatter(0,0,f(0,0),s=50,c=\"red\",depthshade=False)\n\n#set the axis off (if you don't want the axis obviously :D)\nax.set_axis_off()\n\nplt.title(\"f(x,y) = x^2+y^2\")\nplt.show()","73b8f450":"def f(x,y):\n    \"the parabolic surface function\"\n    return x**2+y**2\n\nX = np.arange(-5, 5, 0.25)\nY = np.arange(-5, 5, 0.25)\n# Create a mesh grid to get a 2d arrays from the two 1d arrays\nX, Y = np.meshgrid(X, Y)\n\n# Z from the X,Y meshgrid (which is also a 2d array)\nZ = f(X,Y)","3f99b30d":"# simple gradient descent\nFRAMES = 60\npoints = [(5,5)]\nLR = 0.05\n\ndef gradient(x,y):\n    return (2*x,2*y) \n\nfor i in range(FRAMES):\n    grad = gradient(points[i][0],points[i][1])\n    new_p = (points[i][0] - LR*grad[0], \n             points[i][1] - LR*grad[1])\n    points.append(new_p)","015f79ed":"fig = plt.figure()\nax = Axes3D(fig)\n\nax.plot_wireframe(X, Y, Z,color='blue',\n                  linewidth=1)\n\nt1 = ax.text(-2,0,f(5,5), f\"current = {f(5,5)}\u00b0\", fontsize=16)\n\n# Do a normal plot in which we will update the point with set_data_3d\nscatter, = ax.plot([5],[5],[f(5,5)], \"o\", markersize=12, color=\"red\")\n\ndef init():\n    \"First view of the plot\"\n    \n    ax.view_init(elev=40, azim=-90)\n    \n    ax.set_xlim([-5,5])\n    ax.set_ylim([-5,5])\n    return fig,\n\ndef animate(frame_n):\n    \"\"\"\n    Change the plot point value on each iteration!\n    \"\"\"\n    x = points[frame_n][0]\n    y = points[frame_n][1]\n    t1.set_text(f\"value = {round(f(x,y),2)}\")\n    \n    scatter.set_data([x],[y])\n    scatter.set_3d_properties([f(x,y)])\n    return fig,\n\n# Animate\nani = animation.FuncAnimation(fig, animate, init_func=init,\n                               frames=FRAMES, interval=150, blit=True)\n\nplt.close()\n\n# show the animation as a javascript animation (so you can control it interactively)\nHTML(ani.to_jshtml())","3359b465":"from math import pi\nfrom numpy import sin, cos, sqrt\n\nv = np.arange(-pi\/2, pi\/2, 0.001)\nu = np.arange(0, pi, 0.001)\n\nu, v = np.meshgrid(u, v)\n\n\nX = 2 \/ 3. * (cos(u) * cos(2 * v)\n        + sqrt(2) * sin(u) * cos(v)) * cos(u) \/ (sqrt(2) -\n                                                 sin(2 * u) * sin(3 * v))\nY = 2 \/ 3. * (cos(u) * sin(2 * v) -\n        sqrt(2) * sin(u) * sin(v)) * cos(u) \/ (sqrt(2)\n        - sin(2 * u) * sin(3 * v))\nZ = -sqrt(2) * cos(u) * cos(u) \/ (sqrt(2) - sin(2 * u) * sin(3 * v))","8a9a6d02":"fig = plt.figure()\nax = Axes3D(fig)\n\ndef init():\n    \"First view of the plot\"\n    ax.plot_surface(X, Y, Z, rstride=10, cstride=10,\n                    linewidth=0, antialiased=False)\n    ax.set_axis_off()\n    ax.view_init(elev=0, azim=0)\n    ax.set_xlim([-1.5,1.5])\n    ax.set_ylim([-1.5,1.5])\n    ax.set_zlim([-2,0])\n    return fig,\n\ndef animate(frame_n):\n    \"\"\"\n    A loop which returns on the initial point!\n    \"\"\"\n    if frame_n < 30:\n        elev = frame_n*6 \n        azim = frame_n*12\n    else:\n        elev = 30*6 - (frame_n - 30)*6\n        azim = 30*12 - (frame_n - 30)*12\n    ax.view_init(elev=elev, azim=azim)\n    print(f\"done frame number: {frame_n}\", end=\"\\r\")\n    return fig,\n\n# Animate\nani = animation.FuncAnimation(fig, animate, init_func=init,\n                               frames=60, interval=120, blit=True)\n\nplt.close()\n\n# show the animation as a javascript animation (so you can control it interactively)\nHTML(ani.to_jshtml())","8e2e4d5c":"# Taken From stack :D\ndef plot_implicit(fn, bbox=(-2.5,2.5)):\n    ''' create a plot of an implicit function\n    fn  ...implicit function (plot where fn==0)\n    bbox ..the x,y,and z limits of plotted interval'''\n    xmin, xmax, ymin, ymax, zmin, zmax = bbox*3\n    fig = plt.figure()\n    ax = Axes3D(fig)\n    A = np.linspace(xmin, xmax, 150) # resolution of the contour\n    B = np.linspace(xmin, xmax, 75) # number of slices\n    A1,A2 = np.meshgrid(A,A) # grid on which the contour is plotted\n\n    for z in B: # plot contours in the XY plane\n        X,Y = A1,A2\n        Z = fn(X,Y,z)\n#         col = [plt.cm.Greens(z)]\n        cset = ax.contour(X, Y, Z+z, [z], zdir='z', alpha=0.7)\n        # [z] defines the only level to plot for this contour for this value of z\n\n    for y in B: # plot contours in the XZ plane\n        X,Z = A1,A2\n        Y = fn(X,y,Z)\n#         col = [plt.cm.Blues(z)]\n        cset = ax.contour(X, Y+y, Z, [y], zdir='y', alpha=0.7)\n\n    for x in B: # plot contours in the YZ plane\n        Y,Z = A1,A2\n        X = fn(x,Y,Z)\n#         col = [plt.cm.Reds(z)]\n        cset = ax.contour(X+x, Y, Z, [x], zdir='x', alpha=0.7)\n\n    # must set plot limits because the contour will likely extend\n    # way beyond the displayed level.  Otherwise matplotlib extends the plot limits\n    # to encompass all values in the contour.\n    ax.set_zlim(zmin,zmax)\n    ax.set_xlim(xmin,xmax)\n    ax.set_ylim(ymin,ymax)\n    return fig,ax","bf6b577f":"def fun(x,y,z):\n    return  x**4+2*x**2*y**2+2*x**2*z**2+y**4+2*y**2*z**2+z**4+8*x*y*z-10*x**2-10*y**2-10*z**2+20\n\nfig, ax = plot_implicit(fun, bbox=(-3.5,3.5))\ndef init():\n    \"First view of the plot\"\n    ax.set_axis_off()\n    ax.view_init(elev=0, azim=0)\n    return fig,\n\ndef animate(frame_n):\n    \"\"\"\n    A loop which returns on the initial point!\n    \"\"\"\n    if frame_n < 30:\n        elev = frame_n*6 \n        azim = frame_n*12\n    else:\n        elev = 30*6 - (frame_n - 30)*6\n        azim = 30*12 - (frame_n - 30)*12\n    ax.view_init(elev=elev, azim=azim)\n    return fig,\n\n# Animate\nani = animation.FuncAnimation(fig, animate, init_func=init,\n                               frames=60, interval=120, blit=True)\n\nplt.close()\n\n# show the animation as a javascript animation (so you can control it interactively)\nHTML(ani.to_jshtml())","f3d22e85":"# Boy's Surface\nThanks to [@carlmcbrideellis](https:\/\/www.kaggle.com\/carlmcbrideellis) for the idea!\n\nBoy's surface for those who know something about topology is obtained by attaching a disk to the border of a mobius strip, otherwise here is the parametric equation:\n\n\\begin{align}\nx &= \\dfrac{\\sqrt 2 \\cos^2 v\\cos(2 u) + \\cos u \\sin(2v)}{2 - \\sqrt 2 \\sin(3u)\\sin(2v)} \\\\\ny &= \\dfrac{\\sqrt 2 \\cos^2 v\\sin(2 u) - \\sin u \\sin(2v)}{2 - \\sqrt 2 \\sin(3u)\\sin(2v)} \\\\\nz &= \\dfrac{3\\cos^2 v}{2 - \\sqrt 2 \\sin(3u)\\sin(2v)}\n\\end{align}\nwith $u \\in [-\\pi\/2,\\pi\/2]$ and $v \\in [0,\\pi]$\n\nNow let's try to plot it and see what this strange object is!","65626d4a":"# Moving Scatter points\n\nLet's use the gradient descent on the function $f(x,y)=x^2+y^2$ to find the minima, which we know to be global because the function in convex!\n\nGradient Descent: \n\\begin{equation}\nx_{new} = x_{old} - lr*\\nabla_x f\\\\\ny_{new} = y_{old} - lr*\\nabla_y f\n\\end{equation}","2da4f719":"Let's start by seing how the 3D plots and animations works with two simple example:","a7b2b28a":"# 3D plots in matplotlib\nFirst of all we show how to do a simple 3d surface plot in matplotlib and later we will see also how animate it!","043dd5b8":"Next Step is trying to plot this implicit equation solution :D\n$$ x^4+2x^2y^2+2x^2z^2+y^4+2y^2z^2+z^4+8xyz\u221210x^2\u221210y^2\u221210z^2+20=0. $$\nfollowed by some very cool Chmutov Surfaces as suggested by @carlmcbrideellis!"}}