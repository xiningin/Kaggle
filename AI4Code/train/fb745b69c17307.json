{"cell_type":{"3bf4f44b":"code","490a74eb":"code","8a407305":"code","f1362466":"code","2e8be758":"code","308942bd":"code","ee678786":"code","eb2a98cf":"code","52757282":"code","5ed07d42":"code","5835134b":"code","53ef04ae":"code","51ff06c0":"code","e68c05bc":"code","156dbdd3":"markdown","4af7158d":"markdown","67f08e8f":"markdown","51027c76":"markdown","d4a5ecc4":"markdown","25a9e178":"markdown","a00427dc":"markdown","18cd0319":"markdown"},"source":{"3bf4f44b":"import os\nimport sys\nimport shutil\nimport time\nimport random\nimport re\nimport gc\n\nfrom pathlib import Path\nfrom typing import List, Tuple, Dict, Union, Optional\n\nfrom functools import partial\nfrom itertools import chain\nfrom collections import Counter\n\nimport numpy as np\nimport pandas as pd\n\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n\n%matplotlib inline","490a74eb":"COMPETITION_NAME = \"trends-assessment-prediction\"\nROOT = Path(\".\").resolve().parents[0]\n\nINPUT_ROOT = ROOT \/ \"input\"\nRAW_DATA = INPUT_ROOT \/ COMPETITION_NAME\nTRAIN_IMAGES = RAW_DATA \/ \"fMRI_train\"\nTEST_IMAGES = RAW_DATA \/ \"fMRI_test\"","8a407305":"fnc = pd.read_csv(RAW_DATA \/ \"fnc.csv\")\nicn_numbers = pd.read_csv(RAW_DATA \/ \"ICN_numbers.csv\")\nloading = pd.read_csv(RAW_DATA \/ \"loading.csv\")\nreveal_ID_site2 = pd.read_csv(RAW_DATA \/ \"reveal_ID_site2.csv\")\n\ntrain_scores = pd.read_csv(RAW_DATA \/ \"train_scores.csv\")\nsample_sub = pd.read_csv(RAW_DATA \/ \"sample_submission.csv\")","f1362466":"def convert_fnc_feature_to_symmetric_matrix(\n    fnc_arr: np.ndarray, n_fnc: int, diag_comp: Union[int, float, str]=0. \n) -> np.ndarray:\n    \"\"\"\n    Convet fnc features to Matrix.\n    \n    This matrix is symmetric matrix. The bellow is a toy sample.\n    Example:\n      input: shape = (2, 4)\n        [\n          [a_{f2_vs_f1}, a_{f3_vs_f1}, a_{f4_vs_f1}. a_{f3_vs_f2}, a_{f4_vs_f2}, a_{f4_vs_f3}],\n          [b_{f2_vs_f1}, b_{f3_vs_f1}, b_{f4_vs_f1}. b_{f3_vs_f2}, b_{f4_vs_f2}, b_{f4_vs_f3}],\n        ]\n      -> output: shape = (2, 4, 4)\n        [\n          [\n            [      0     , a_{f2_vs_f1}, a_{f3_vs_f1}, a_{f4_vs_f1}],\n            [a_{f2_vs_f1},        0    , a_{f3_vs_f2}, a_{f4_vs_f2}],\n            [a_{f3_vs_f1}, a_{f3_vs_f2},        0    , a_{f4_vs_f3}],\n            [a_{f4_vs_f1}, a_{f4_vs_f2}, a_{f4_vs_f3},        0    ],\n          ],\n          [\n            [      0     , a_{f2_vs_f1}, a_{f3_vs_f1}, a_{f4_vs_f1}],\n            [a_{f2_vs_f1},        0    , a_{f3_vs_f2}, a_{f4_vs_f2}],\n            [a_{f3_vs_f1}, a_{f3_vs_f2},        0    , a_{f4_vs_f3}],\n            [a_{f4_vs_f1}, a_{f4_vs_f2}, a_{f4_vs_f3},        0    ],\n          ],\n        ]\n    \"\"\"\n    n_example = fnc_arr.shape[0]\n    tmp = np.repeat(np.arange(n_fnc - 1, -1, -1)[:, None], n_fnc, axis=1)\n    tmp[0] = np.arange(n_fnc)\n    tmp = np.cumsum(tmp, axis=0)\n    idx_arr = np.triu(tmp, 1) + np.tril(tmp.T, -1)\n    \n    fnc_arr = np.concatenate([np.full((n_example, 1), diag_comp), fnc_arr], axis=1)\n    return fnc_arr[(\n        np.tile(np.arange(n_example)[:, None, None], (n_fnc, n_fnc)),\n        np.repeat(idx_arr[None, ...], n_example, axis=0),\n    )]","2e8be758":"icn_numbers[\"FNC_name\"] = [\"SCN(69)\"] + list(map(lambda x: x.split(\"_\")[0], fnc.columns[1:53]))\nicn_numbers","308942bd":"l = []\ntmp_idx = 0\nn_comb = 52\nfnc_columns = fnc.columns[1:].tolist()\nfor i, fnc_name in enumerate(icn_numbers.FNC_name[:-1]):\n    l.append([\"-\"] * (i + 1) + fnc_columns[tmp_idx: tmp_idx + n_comb])\n    tmp_idx = tmp_idx + n_comb\n    n_comb -= 1\nl.append([\"-\"] * 53)\n\npd.options.display.max_columns=53\npd.DataFrame(\n    l,\n    columns=icn_numbers.FNC_name.tolist(),\n    index=icn_numbers.FNC_name.tolist(),)","ee678786":"# # remove id\nfnc_feat_vecs = fnc.iloc[:, 1:].values\nfnc_feat_vecs.shape","eb2a98cf":"%time\nfnc_conn_mats = convert_fnc_feature_to_symmetric_matrix(fnc_feat_vecs, n_fnc=53, diag_comp=0)","52757282":"fnc_conn_mats.shape","5ed07d42":"fnc_feat_vecs[:3, 52 - 5:52]","5835134b":"fnc_conn_mats[:3, 0, -5:]","53ef04ae":"fnc_feat_vecs[:3, 52 + 51 - 5:52 + 51]","51ff06c0":"fnc_conn_mats[:3, 1, -5:]","e68c05bc":"col_labels = icn_numbers[\"FNC_name\"].values\nfig, axes = plt.subplots(4, 2,figsize=(22.5, 52))\n\nfor i in range(8):\n    mat_example = fnc_conn_mats[i]\n    row_idx, col_idx = divmod(i, 2)\n    ax = axes[row_idx, col_idx]\n    sns.heatmap(\n        mat_example, cmap='coolwarm', square=True, ax=ax, \n        xticklabels=col_labels, yticklabels=col_labels,\n        cbar=False, center=0, vmin=-1, vmax=1)\n\n    _ = ax.set_title('Mat Example {}'.format(i), fontsize=15)","156dbdd3":"### preparation","4af7158d":"5 tail elements of `XXX(Y)_vs_SCN(69)`of 3 examples","67f08e8f":"### cheack the order of fnc feature's column","51027c76":"### Converting\n\nconvert `fnc_feat_vecs`: $ \\ \\left(11754, \\ 1378 \\right) = \\left(11754, \\ {}_{53} C _{2} \\right) \\ $ to `fnc_conn_mats` : $ \\ \\left(11754, \\ 53, \\ 53 \\right)$","d4a5ecc4":"5 tail elements of `XXX(Y)_vs_SCN(53)` of 3 examples","25a9e178":"# Convert FNC data to Connectivity Matrices Efficiently\n\nThe explanation of this notebook is here: https:\/\/www.kaggle.com\/c\/trends-assessment-prediction\/discussion\/147128\n\n![Converting](https:\/\/www.googleapis.com\/download\/storage\/v1\/b\/kaggle-user-content\/o\/inbox%2F473234%2Ffd306599c498e101b6a7558719e3611d%2Fconvert_fnc_to_matrix.png?generation=1588174928673267&alt=media)","a00427dc":"### Visualization\n\nReference: https:\/\/www.kaggle.com\/srsteinkamp\/trends-eda#Back-to-FNC-data\n\nThis notebook is helpful for me to understand competition data. Thanks!","18cd0319":"For instance, check the part of ```fnc_feat_vecs``` and ```fnc_conn_mats```"}}