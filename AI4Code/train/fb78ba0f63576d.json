{"cell_type":{"5500b5fc":"code","3c60620d":"code","2c4dbfa5":"code","d008a435":"code","22287f9d":"code","b207f0a4":"code","286d5b48":"code","29f6bf4a":"markdown"},"source":{"5500b5fc":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","3c60620d":"import pandas as pd\nimport numpy as np\n\nfrom sklearn.model_selection import cross_val_score, train_test_split\nfrom sklearn.ensemble import GradientBoostingClassifier, RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier, DecisionTreeRegressor\n\nimport warnings\nwarnings.filterwarnings('ignore')\n","2c4dbfa5":"data_path = '\/kaggle\/input\/3rd-ml100marathon-midterm\/'\ndf_train = pd.read_csv(data_path + 'train_data.csv')\n\ndf_test = pd.read_csv(data_path + 'test_features.csv')\n\ndf_train.head()","d008a435":"df_train.describe()","22287f9d":"df_train['poi'] = df_train['poi'].astype(float)\ntrain_Y = df_train['poi']\nids = df_test['name']\n\ndf_train = df_train.drop(['name', 'email_address', 'poi'] , axis=1)\ndf_test = df_test.drop(['name', 'email_address'] , axis=1)\n\ndf = pd.concat([df_train,df_test])\ndf = df.fillna(0)\ndf.info()","b207f0a4":"#finalcial \u548c email \u6578\u64da\u7684\u6578\u503c\u8cc7\u8a0a\u90fd\u6368\u53bb, \u6709\u5c31\u662f1, \u6c92\u6709(na)\u5c31\u662f0\nfor col in df:\n    df[col] = df[col].apply(lambda x: 1 if abs(x)>0 else 0)\n\n#\u5148\u524d\u6e2c\u8a66, \u767c\u73fe\u6709\u6642\u5019\u628a 'bonus' \u548c 'deferred_income' \u7d50\u5408\u6210\u65b0\u7684 feature \u7d50\u679c\u6bd4\u8f03\u597d\ndf ['com2'] = df['bonus'] + df['deferred_income']\ndf.drop(['bonus', 'deferred_income'], axis = 1)\n        \ndf.describe()","286d5b48":"#\u6e2c\u8a66\u5e7e\u7a2emodel\u5f8c, \u767c\u73fe gdbt \u548c clf \u5206\u7684\u6bd4\u8f03\u597d\n\ngdbt = GradientBoostingClassifier(tol=100, subsample=0.75, n_estimators=250, max_features=9,\n                                  max_depth=6, learning_rate=0.03)\n         \ntrain_num = train_Y.shape[0]\ntrain_X = df[:train_num]\ntest_X = df[train_num:]\n            \nX_train, X_test, y_train, y_test = train_test_split(train_X, train_Y, test_size=0.25, random_state=4)\n          \ngdbt.fit(train_X, train_Y)\ngdbt_pred = gdbt.predict_proba(test_X)[:,1]\ngdbt_score = cross_val_score(gdbt, train_X, train_Y, cv=5).mean()\n\nsub = pd.DataFrame({'name': ids, 'poi': gdbt_pred})\nsub.to_csv('mid_abs_com2_gdbt1027.csv', index=False)\n            \n\n# \u5efa\u7acb\u6a21\u578b\nclf = DecisionTreeClassifier()\nclf.fit(train_X, train_Y)\nclf_pred = clf.predict_proba(test_X)[:,1]\nclf_score = cross_val_score(clf, train_X, train_Y, cv=5).mean()\n\nsub = pd.DataFrame({'name': ids, 'poi': clf_pred})\nsub.to_csv('mid_abs_com2_clf1027.csv', index=False)\n\n\nprint('gdbt:')\nprint(gdbt_score)\n\nprint('clf:')\nprint(clf_score)            \n\n","29f6bf4a":"gdbt_ef:\n0.8679841897233201\n\nclf_ef:\n0.8588932806324111"}}