{"cell_type":{"20161707":"code","5180c0a4":"code","785ecd25":"code","fdd39765":"code","29d99b31":"code","b204a354":"code","52dee132":"code","d1079c5c":"code","123685cb":"code","4fbf5aac":"code","1bb462cc":"code","eb3582eb":"code","716b3b13":"code","15494fbb":"code","793ab005":"code","332deebf":"code","e87807c7":"code","c887b2c1":"code","7e691d96":"code","930df1c7":"code","73d522b8":"code","611a92ca":"code","ef627e2a":"code","48e9611e":"code","fab91621":"code","2a9805d5":"code","2af15fcd":"code","f01b6e3b":"code","59409b2d":"code","4febc7fa":"code","3039bb8a":"code","f250d016":"code","8fde292e":"code","d1f53660":"code","4f04f660":"code","fca53925":"code","7fe3011a":"code","47034194":"code","62e8dda1":"code","7ac187d7":"code","a3091195":"code","ce9fdd2b":"code","d4370744":"code","a1e669af":"code","4da149c2":"code","d58c82e0":"code","9dcfd7ad":"markdown","7909762f":"markdown","51520648":"markdown","a91ea801":"markdown","8dd75654":"markdown","53d8f40c":"markdown","8a7ae8d6":"markdown","b7381e32":"markdown","025d3efb":"markdown","3b91172b":"markdown","5a659ef3":"markdown","8ab7afb5":"markdown","9a152b53":"markdown","1b2aad65":"markdown","89261b69":"markdown","a6bc0fe7":"markdown","31e90418":"markdown","1060b97e":"markdown","1c2d4dac":"markdown","06d106cd":"markdown","39ea0b52":"markdown","697e4d04":"markdown","091b43b2":"markdown","0400db6e":"markdown","18ee0b5c":"markdown","e27b1d1c":"markdown","d1d4d6a1":"markdown","7af6c1f7":"markdown","1b5b372a":"markdown","8d7dcf59":"markdown","d4af8f26":"markdown","9f1658ec":"markdown","37d711b4":"markdown","dbcc30b4":"markdown","b49d8390":"markdown","b1aeed9a":"markdown","26b3d512":"markdown","017cdb68":"markdown","ca6a49b0":"markdown","4dc65e6b":"markdown","a63d671b":"markdown"},"source":{"20161707":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5180c0a4":"import numpy as np\nimport pandas as pd\npd.set_option(\"display.precision\", 2)","785ecd25":"df = pd.read_csv(\"..\/input\/telecom-churn-datasets\/churn-bigml-80.csv\")\ndf.head()","fdd39765":"print(df.shape)\n","29d99b31":"print(df.columns)\n","b204a354":"print(df.info())","52dee132":"df['Churn'] = df['Churn'].astype('int64')\n","d1079c5c":"df['Churn'].dtype","123685cb":"df.describe()","4fbf5aac":"df.describe(include=['object', 'bool'])","1bb462cc":"df['Churn'].value_counts()","eb3582eb":"df['Churn'].value_counts(normalize=True)","716b3b13":"df.sort_values(by='Total day charge', ascending=False).head()","15494fbb":"df.sort_values(by=['Churn', 'Total day charge'],\n        ascending=[True, False]).head()","793ab005":"df.Churn.mean()","332deebf":"df[df['Churn'] == 1].mean()","e87807c7":"df[df['Churn'] == 1]['Total day minutes'].mean()","c887b2c1":"df[(df['Churn'] == 0) & (df['International plan'] == 'No')]['Total intl minutes'].max()","7e691d96":"df.loc[0:5, 'State':'Area code']","930df1c7":"df.iloc[0:5, 0:3]","73d522b8":"df.apply(np.max)","611a92ca":"df[df['State'].apply(lambda state : state[0]=='W')].head()","ef627e2a":"df['International plan'].head()","48e9611e":"d = {'No':False, 'Yes':True}\ndf['International plan'] = df['International plan'].map(d)\ndf.head()","fab91621":"df = df.replace({'Voice mail plan': d})\ndf.head()","2a9805d5":"columns_to_show = ['Total day minutes', 'Total eve minutes', \n                   'Total night minutes']\n\ndf.groupby(['Churn'])[columns_to_show].describe(percentiles=[])","2af15fcd":"columns_to_show = ['Total day minutes', 'Total eve minutes', \n                   'Total night minutes']\ndf.groupby(['Churn'])[columns_to_show].agg([np.mean, np.std, np.min, \n                                            np.max])","f01b6e3b":"pd.crosstab(df['Churn'], df['International plan'])","59409b2d":"pd.crosstab(df['Churn'], df['Voice mail plan'], normalize=True)","4febc7fa":"total_calls = df['Total day calls'] + df['Total eve calls'] + \\\n              df['Total night calls'] + df['Total intl calls']\n\ndf.insert(loc=len(df.columns), column='Total calls', value=total_calls) ","3039bb8a":"df.head()","f250d016":"df['Total charge'] = df['Total day charge'] + df['Total eve charge'] + \\\n                     df['Total night charge'] + df['Total intl charge']\ndf.head()","8fde292e":"# get rid of just created columns\ndf.drop(['Total charge', 'Total calls'], axis=1, inplace=True) \n# and here\u2019s how you can delete rows\ndf.drop([1, 2]).head() ","d1f53660":"pd.crosstab(df['Churn'], df['International plan'], margins=True)","4f04f660":"# some imports to set up plotting \nimport matplotlib.pyplot as plt\n# pip install seaborn \nimport seaborn as sns\n# Graphics in retina format are more sharp and legible\n%config InlineBackend.figure_format = 'retina'","fca53925":"sns.countplot(x='International plan', hue='Churn', data=df);\n","7fe3011a":"pd.crosstab(df['Churn'], df['Customer service calls'], margins=True)\n\n","47034194":"sns.countplot(x='Customer service calls', hue='Churn', data=df);\n","62e8dda1":"from pandas_profiling import ProfileReport\n","7ac187d7":"design_report = ProfileReport(df)\ndesign_report.to_file(output_file='report.html')","a3091195":"design_report","ce9fdd2b":"!pip install sweetviz","d4370744":"import sweetviz as sv\nsweet_report = sv.analyze(df)\nsweet_report.show_html('sweet_report.html')","a1e669af":"!pip install autoviz","4da149c2":"from autoviz.AutoViz_Class import AutoViz_Class\nAV = AutoViz_Class()","d58c82e0":"df = AV.AutoViz('..\/input\/telecom-churn-datasets\/churn-bigml-80.csv[](http:\/\/)')\n\n","9dcfd7ad":"What is the maximum length of international calls among loyal users (Churn == 0) who do not have an international plan?","7909762f":"Let\u2019s do the same thing, but slightly differently by passing a list of functions to agg()","51520648":"Autoviz is an open-source python library that mainly works on visualizing the relationship of the data, it can find the most impactful features and plot creative visualization in just one line of code. Autoviz is incredibly fast and highly useful.\n\nBefore Exploring Autoviz we need to install it by using pip install autoviz.\n\nImplementation\n\nFor using autoviz first we need to import the autoviz class and instantiate it.","a91ea801":"We'll demonstrate the main methods in action by analyzing a dataset on the churn rate of telecom operator clients. Let's read the data (using read_csv), and take a look at the first 5 lines using the head method:","8dd75654":"How much time (on average) do churned users spend on the phone during daytime?","53d8f40c":"DataFrames can be indexed by column name (label) or row name (index) or by the serial number of a row. The loc method is used for indexing by name, while iloc() is used for indexing by number.\n\nIn the first case below, we say \"give us the values of the rows with index from 0 to 5 (inclusive) and columns labeled from State to Area code (inclusive)\". In the second case, we say \"give us the values of the first five rows in the first three columns\" (as in a typical Python slice: the maximal value is not included).","8a7ae8d6":"Indexing and retrieving data\n\nA DataFrame can be indexed in a few different ways.\n\nTo get a single column, you can use a DataFrame['Name'] construction. Let's use this to answer a question about that column alone: what is the proportion of churned users in our dataframe?","b7381e32":"### 3.  Automating EDA","025d3efb":"After loading the dataset we just need to run the following commands to generate and download the EDA report.","3b91172b":"## Sweetviz","5a659ef3":"It is possible to add a column more easily without creating an intermediate Series instance:","8ab7afb5":"The map method can be used to replace values in a column by passing a dictionary of the form {old_value: new_value} as its argument:","9a152b53":"We can use the info() method to output some general information about the dataframe:\n","1b2aad65":"2278 users out of 2666 are loyal; their Churn value is 0. To calculate fractions, pass normalize=True to the value_counts function.","89261b69":"In order to see statistics on non-numerical features, one has to explicitly indicate data types of interest in the include parameter.","a6bc0fe7":"Summary tables\n\nSuppose we want to see how the observations in our sample are distributed in the context of two variables - Churn and International plan. To do so, we can build a contingency table using the crosstab method:","31e90418":"For categorical (type object) and boolean (type bool) features we can use the value_counts method. Let's have a look at the distribution of Churn:","1060b97e":"### Autoviz","1c2d4dac":"Applying Functions to Cells, Columns and Rows\n\nTo apply functions to each column, use apply():","06d106cd":"We can also sort by multiple columns","39ea0b52":"### DataFrame transformations\n\nLike many other things in Pandas, adding columns to a DataFrame is doable in many ways.\n\nFor example, if we want to calculate the total number of calls for all users, let's create the total_calls Series and paste it into the DataFrame:","697e4d04":"- First, the groupby method divides the grouping_columns by their values. They become a new index in the resulting dataframe.\n- Then, columns of interest are selected (columns_to_show). If columns_to_show is not included, all non groupby clauses will be included.\n- Finally, one or several functions are applied to the obtained groups per selected columns.\n","091b43b2":"Let's see how churn rate is related to the International plan feature. We'll do this using a crosstab contingency table and also through visual analysis with Seaborn (however, visual analysis will be covered more thoroughly in the next article).","0400db6e":"### 2. First attempt at predicting telecom churn\n","18ee0b5c":"We see that, with International Plan, the churn rate is much higher, which is an interesting observation! Perhaps large and poorly controlled expenses with international calls are very conflict-prone and lead to dissatisfaction among the telecom operator's customers.\n\nNext, let's look at another important feature \u2013 Customer service calls. Let's also make a summary table and a picture.","e27b1d1c":"We can change the column type with the astype method. Let's apply this method to the Churn feature to convert it into int64:","d1d4d6a1":"### Grouping\n\nIn general, grouping data in Pandas works as follows:","7af6c1f7":"To delete columns or rows, use the drop method, passing the required indexes and the axis parameter (1 if you delete columns, and nothing or 0 if you delete rows). The inplace argument tells whether to change the original DataFrame. With inplace=False, the drop method doesn't change the existing DataFrame and returns a new one with dropped rows or columns. With inplace=True, it alters the DataFrame.","1b5b372a":"### Sorting\n\nA DataFrame can be sorted by the value of one of the variables (i.e columns). For example, we can sort by Total day charge (use ascending=False to sort in descending order)\n","8d7dcf59":"df.groupby(by=grouping_columns)[columns_to_show].function()","d4af8f26":"About printing DataFrames in Jupyter notebooks\nRecall that each row corresponds to one client, an instance, and columns are features of this instance.\n\nLet\u2019s have a look at data dimensionality, feature names, and feature types.","9f1658ec":"Exploratory Data Analysis (EDA) is used to explore different aspects of the data we are working on. EDA should be performed in order to find the patterns, visual insights, etc. that the data set is having, before creating a model or predicting something through the dataset. EDA is a general approach of identifying characteristics of the data we are working on by visualizing the dataset. EDA is performed to visualize what data is telling us before implementing any formal modelling or creating a hypothesis testing model.","37d711b4":"### 1. Demonstration of main Pandas methods\n","dbcc30b4":"Sweetviz is a python library that focuses on exploring the data with the help of beautiful and high-density visualizations. It not only automates the EDA but is also used for comparing datasets and drawing inferences from it.\n\nHere we will analyze the same dataset as we used for pandas profiling.\n\nImplementation\n\nBefore using sweetviz we need to install it by using pip install sweetviz.\n\nWe have already loaded the dataset above in the variable named \u201cdf\u201d, we will just import the dataset and create the EDA report in just a few lines of code.","b49d8390":"4.5% is actually quite bad for a company; such a churn rate can make the company go bankrupt.\n\nBoolean indexing with one column is also very convenient. The syntax is df[P(df['Name'])], where P is some logical condition that is checked for each element of the Name column. The result of such indexing is the DataFrame consisting only of rows that satisfy the P condition on the Name column.\n\nLet's use it to answer the question:\n\nWhat are average values of numerical features for churned users?","b1aeed9a":"The apply method can also be used to apply a function to each row. To do this, specify axis=1. Lambda functions are very convenient in such scenarios. For example, if we need to select all states starting with W, we can do it like this:","26b3d512":"Here is an example where we group the data according to the values of the Churn variable and display statistics of three columns in each group:","017cdb68":"The same thing can be done with the replace method:","ca6a49b0":"# Exploratory Data Analysis : EDA","4dc65e6b":"Now let's try printing out column names using columns:\n\n","a63d671b":"The describe method shows basic statistical characteristics of each numerical feature (int64 and float64 types): number of non-missing values, mean, standard deviation, range, median, 0.25 and 0.75 quartiles."}}