{"cell_type":{"05371d52":"code","b8ec431d":"code","3c05ac28":"code","0661c32f":"code","43315a77":"code","d3cebf17":"code","9630fa6b":"code","f98e547e":"code","8ab2fbcc":"code","701ff0ab":"code","604e0341":"code","9cc08b8c":"code","6966e2bc":"code","18fe1d49":"code","48436f9a":"code","3d5019c9":"code","8688a9d0":"code","05deb105":"code","20d5ec4f":"code","b06d633b":"code","1c67c3dc":"code","e65d8cdd":"code","ccbd3fdf":"code","f4016fa2":"code","122debec":"code","3fb763b2":"code","9677dbc1":"code","6b2554c8":"code","6f2f7712":"code","c89d8e22":"code","30f76ff3":"code","2e234b93":"code","49b0f57c":"code","19d8b0e4":"code","93430f71":"code","9d9b1f4a":"code","c662364b":"code","49da6883":"code","96730cad":"code","4b65ff80":"code","8a3f28e8":"code","aa97897c":"code","d8845ec2":"code","0bc5f791":"code","d0901859":"code","072aec42":"code","9a1e875b":"code","b523592c":"code","3503e156":"code","39ee758d":"code","5226d2fd":"code","fe11abae":"code","446cf9b1":"code","ade33ead":"code","081d30a4":"code","8dc8e810":"code","352ae952":"code","912bfe22":"code","77fdfb2c":"code","3253dbc1":"code","0770c4d0":"code","d7949122":"code","a6a0d0a2":"markdown","ffc3d6f7":"markdown","eef939c0":"markdown","6f99fe8e":"markdown","e64653d2":"markdown","8da84cc1":"markdown","19ff6c91":"markdown","6080b39e":"markdown","59a75e82":"markdown","dc4d850b":"markdown","37141266":"markdown","a9e6763b":"markdown","1a143389":"markdown","8570c327":"markdown","e595d26b":"markdown","505495a7":"markdown","6c6e90b3":"markdown","5eb05b99":"markdown","31de97d1":"markdown","e9a5e5e0":"markdown","94706921":"markdown","ee7b2c05":"markdown","f9269f41":"markdown","22fe8351":"markdown","0810e133":"markdown","f9f40a9b":"markdown","d51b8bc7":"markdown","c560198a":"markdown","f945b67f":"markdown","1b4ab425":"markdown","24506571":"markdown","7851e041":"markdown","fb7a5d0d":"markdown","4bd6487d":"markdown","e262ff04":"markdown","5567b3c9":"markdown","9e88bfeb":"markdown","bf7a7579":"markdown","3a031272":"markdown","5752fda3":"markdown","589bf8ef":"markdown","775c6649":"markdown","344a2f6f":"markdown","ed6d026e":"markdown","836909a5":"markdown","8fee2d82":"markdown","81a91e0c":"markdown","149c777f":"markdown","1fd72a0b":"markdown","1e832a9b":"markdown","60247672":"markdown"},"source":{"05371d52":"import numpy as np\nimport pandas as pd\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.ensemble import RandomForestClassifier\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n%matplotlib inline","b8ec431d":"train = pd.read_csv('..\/input\/titanic\/train.csv', index_col='PassengerId')\ntest_X = pd.read_csv('..\/input\/titanic\/test.csv', index_col='PassengerId')","3c05ac28":"print(train.columns); print(train.shape)\nprint(test_X.columns); print(test_X.shape)","0661c32f":"features = list(set(train.columns) - {'Survived'})\ntarget = 'Survived'\ntrain_X, train_y = train[features], train[target]","43315a77":"train_X.head()","d3cebf17":"print(train_X.info())","9630fa6b":"print(test_X.info())","f98e547e":"plt.figure()\nplt.title('Visualizing null values in train (nulls in white)')\nsns.heatmap(train_X.isnull(), cbar=False)","8ab2fbcc":"null_percent = (train_X.isnull().sum() \/ train_X.shape[0]).values * 100\nplt.figure()\nplt.xlabel('Percentage of nulls')\nsns.barplot(x=null_percent, y=features)","701ff0ab":"null_threshold = 0.5    # Features with more than null_threshold fraction of nulls will be dropped.\nfor feature in features:\n    null_fraction = train_X[feature].isnull().sum() \/ train_X.shape[0]\n    if(null_fraction > null_threshold):\n        print(f'Dropped \\'{feature}\\' having {round(null_fraction * 100, 2)}% nulls.')\n        train_X = train_X.drop(feature, axis=1)\n        test_X = test_X.drop(feature, axis=1)\n        features.remove(feature)","604e0341":"print('Number of unique values for each feature')\ntrain_X.nunique()","9cc08b8c":"numeric_features = ['Age', 'Fare', 'Parch', 'SibSp']\nordinal_features = ['Pclass']    # Label encoded\nnominal_features = ['Sex', 'Ticket', 'Embarked']    # To one hot encode","6966e2bc":"fig, ax = plt.subplots(1, 2, figsize=(8, 3))\nplt.tight_layout()\nfor i, feature in enumerate(['Age', 'Fare']):\n    ax[i].set_title(f'Histogram of {feature}')\n    sns.distplot(train_X[feature], ax=ax[i], kde=False)","18fe1d49":"fig, ax = plt.subplots(1, 5, figsize=(18, 3))\nplt.tight_layout()\nfor i, feature in enumerate(['Parch', 'SibSp', 'Pclass', 'Sex', 'Embarked']):\n    sns.countplot(train_X[feature], ax=ax[i])","48436f9a":"plt.figure()\nsns.pairplot(pd.concat([train_y, train_X[numeric_features]], axis=1), \n             hue='Survived', \n             vars=numeric_features,\n             markers=['+', 'x'],\n             diag_kind=None, \n             dropna=True,\n             plot_kws={'alpha': 0.4})","3d5019c9":"plt.title('Effect of age on survival')\nsns.swarmplot(x=train_y, y=train_X['Age'])","8688a9d0":"plt.title('Effect of fare on survival')\nsns.swarmplot(x=train_y, y=train_X['Fare'])","05deb105":"survival_percent = dict(round(train.groupby(by='Sex').mean()['Survived'] * 100, 2))\nprint(survival_percent)","20d5ec4f":"survived_males_age = train_X['Age'].where((train_X['Sex'] == 'male') & (train_y == 1))\nnot_survived_males_age = train_X['Age'].where((train_X['Sex'] == 'male') & (train_y == 0))\nsurvived_females_age = train_X['Age'].where((train_X['Sex'] == 'female') & (train_y == 1))\nnot_survived_females_age = train_X['Age'].where((train_X['Sex'] == 'female') & (train_y == 0))","b06d633b":"fig, ax = plt.subplots(1, 2, figsize=(9, 4))\nplt.tight_layout()\n\nax[0].set_title('Male age hist (by survival)')\nax[0].set_xlim([0, 80])\nsns.distplot(survived_males_age, ax=ax[0], kde=False, label='Survived')\nsns.distplot(not_survived_males_age, ax=ax[0], kde=False, label='Not survived')\nax[0].legend()\n\nax[1].set_title('Female age hist (by survival)')\nax[1].set_xlim([0, 80])\nsns.distplot(survived_females_age, ax=ax[1], kde=False, label='Survived')\nsns.distplot(not_survived_females_age, ax=ax[1], kde=False, label='Not survived')\nax[1].legend()","1c67c3dc":"survival_percent = dict(round(train.groupby(by='Parch').mean()['Survived'] * 100, 2))\nprint(survival_percent)","e65d8cdd":"plt.figure()\nplt.xlabel('Number of parents\/children')\nplt.ylabel('% survived')\nitems = survival_percent.items()\nparch = [item[0] for item in items]\nsurvival_rates = [item[1] for item in items]\nsns.barplot(x=parch, y=survival_rates)","ccbd3fdf":"survival_percent = dict(round(train.groupby(by='SibSp').mean()['Survived'] * 100, 2))\nprint(survival_percent)","f4016fa2":"plt.figure()\nplt.xlabel('Number of siblings\/spouses')\nplt.ylabel('% survived')\nitems = survival_percent.items()\nparch = [item[0] for item in items]\nsurvival_rates = [item[1] for item in items]\nsns.barplot(x=parch, y=survival_rates)","122debec":"train_X['FamilyMembers'] = train_X['Parch'] + train_X['SibSp']\ntest_X['FamilyMembers'] = test_X['Parch'] + test_X['SibSp']\nnumeric_features.append('FamilyMembers')","3fb763b2":"survival_percent = dict(round((pd.concat([train_X, train_y], axis=1)).groupby(by='FamilyMembers').mean()['Survived'] * 100, 2))\nprint(survival_percent)","9677dbc1":"plt.figure()\nplt.xlabel('Number of family members')\nplt.ylabel('% survived')\nitems = survival_percent.items()\nparch = [item[0] for item in items]\nsurvival_rates = [item[1] for item in items]\nsns.barplot(x=parch, y=survival_rates)","6b2554c8":"survival_percent = dict(round(train.groupby(by='Pclass').mean()['Survived'] * 100, 2))\nprint(survival_percent)","6f2f7712":"plt.figure()\nplt.xlabel('Class')\nplt.ylabel('% survived')\nitems = survival_percent.items()\nparch = [item[0] for item in items]\nsurvival_rates = [item[1] for item in items]\nsns.barplot(x=parch, y=survival_rates)","c89d8e22":"survival_percent = dict(round(train.groupby(by='Embarked').mean()['Survived'] * 100, 2))\nprint(survival_percent)","30f76ff3":"plt.figure()\nplt.xlabel('Port of embarking')\nplt.ylabel('% survived')\nitems = survival_percent.items()\nparch = [item[0] for item in items]\nsurvival_rates = [item[1] for item in items]\nsns.barplot(x=parch, y=survival_rates)","2e234b93":"train_titles = [name.split(',')[1].strip().split(' ')[0] for name in train_X['Name']]\ntest_titles = [name.split(',')[1].strip().split(' ')[0] for name in test_X['Name']]","49b0f57c":"train_X['Title'] = train_titles\ntest_X['Title'] = test_titles","19d8b0e4":"print('Title occurrences in training set:')\nprint(train_X['Title'].value_counts())","93430f71":"print(train_X['Name'][train_X['Title'] == 'the'])    # Using logical indexing on train_X['Name']","9d9b1f4a":"print('Title occurrences in test set:')\nprint(test_X['Title'].value_counts())","c662364b":"def group_titles(title):\n    \"\"\" Function to group low occurrence titles using the scheme above. \"\"\"\n    \n    if(title in {'Major.', 'Col.', 'Capt.'}):\n        return 'Military'\n    elif(title in {'Jonkheer.', 'Lady.', 'Sir.', 'Don.', 'Dona.', 'the'}):\n        return 'Royalty'\n    elif(title in {'Mlle.', 'Ms.'}):\n        return 'Miss.'\n    elif(title == 'Mme.'):\n        return 'Mrs.'\n    else:\n        return title","49da6883":"train_X['Title'] = train_X['Title'].apply(group_titles)\ntest_X['Title'] = test_X['Title'].apply(group_titles)","96730cad":"print(f'Unique titles in training set:\\t{train_X.Title.unique()}')\nprint(f'Unique titles in test set:\\t{test_X.Title.unique()}')","4b65ff80":"nominal_features.append('Title')","8a3f28e8":"corr_with_fare = train_X['Age'].corr(train_X['Fare'])\ncorr_with_family_members = train_X['Age'].corr(train_X['FamilyMembers'])\ncorr_with_pclass = train_X['Age'].corr(train_X['Pclass'])\n\nprint(f'Correlation of Age with Fare = {round(corr_with_fare, 3)}')\nprint(f'Correlation of Age with FamilyMembers = {round(corr_with_family_members, 3)}')\nprint(f'Correlation of Age with Pclass = {round(corr_with_pclass, 3)}')","aa97897c":"null_ids_train = train_X['Age'].isnull()\nnull_ids_train = null_ids_train[null_ids_train != False].index.tolist()    # Passenger indices where age is null in training set\nlen(null_ids_train)","d8845ec2":"fill_values_train = train_X.groupby(by=['Title', 'Pclass']).mean()['Age'].astype(int)\nprint('Age values to fill classwise, training set:')\nprint(fill_values_train)","0bc5f791":"for index in null_ids_train:\n    title = train_X.loc[index, 'Title']\n    pclass = train_X.loc[index, 'Pclass']\n    train_X.loc[index, 'Age'] = fill_values_train[(title, pclass)]","d0901859":"print(train_X.info())","072aec42":"null_ids_test = test_X['Age'].isnull()\nnull_ids_test = null_ids_test[null_ids_test != False].index.tolist()    # Passenger indices where age is null in test set\nlen(null_ids_test)","9a1e875b":"fill_values_test = test_X.groupby(by=['Title', 'Pclass']).mean()['Age'].astype(int)\nprint('Age values to fill classwise, test set:')\nprint(fill_values_test)","b523592c":"for index in null_ids_test:\n    title = test_X.loc[index, 'Title']\n    pclass = test_X.loc[index, 'Pclass']\n    test_X.loc[index, 'Age'] = fill_values_test[(title, pclass)]","3503e156":"print(test_X.info())","39ee758d":"imputer = SimpleImputer(strategy='mean')\ntrain_X[numeric_features] = imputer.fit_transform(train_X[numeric_features])\ntest_X[numeric_features] = imputer.transform(test_X[numeric_features])","5226d2fd":"imputer = SimpleImputer(strategy='most_frequent')\n\ntrain_X[ordinal_features] = imputer.fit_transform(train_X[ordinal_features])\ntest_X[ordinal_features] = imputer.transform(test_X[ordinal_features])\n\ntrain_X[nominal_features] = imputer.fit_transform(train_X[nominal_features])\ntest_X[nominal_features] = imputer.transform(test_X[nominal_features])","fe11abae":"print(f'train_X null count = {train_X.isnull().sum().sum()}')\nprint(f'test_X null count = {test_X.isnull().sum().sum()}')","446cf9b1":"print(f'Ordinal categorical features: {ordinal_features}')\nprint(f'Nominal categorical features: {nominal_features}')","ade33ead":"print(train_X['Pclass'].unique())","081d30a4":"one_hot_encoder = OneHotEncoder(handle_unknown='error', sparse=False, drop='if_binary')\n\ntrain_oe_matrix = one_hot_encoder.fit_transform(train_X[['Sex', 'Embarked', 'Title']]).astype('int')\ntest_oe_matrix = one_hot_encoder.transform(test_X[['Sex', 'Embarked', 'Title']]).astype('int')\n\nprint(train_oe_matrix.shape)\nprint(test_oe_matrix.shape)","8dc8e810":"one_hot_encoder.categories_","352ae952":"features = ['Sex', 'Embarked', 'Title']\nohe_column_names = list()\nfor i, categories in enumerate(one_hot_encoder.categories_):\n    for category in categories:\n        ohe_column_names.append(features[i] + '_' + category)\n# Dropped first column in 'Sex', so dropping it from ohe_column_names as well\nohe_column_names.pop(0)\nprint(ohe_column_names)","912bfe22":"# Converting one hot encoded matrices to dataframe\ntrain_oe = pd.DataFrame(train_oe_matrix, index=train_X.index, columns=ohe_column_names)\ntest_oe = pd.DataFrame(test_oe_matrix, index=test_X.index, columns=ohe_column_names)\n\n# Dropping columns 'Sex', 'Embarked' and 'Title' as they have been one hot encoded\ntrain_X = train_X.drop(columns=['Sex', 'Embarked', 'Title'])\ntest_X = test_X.drop(columns=['Sex', 'Embarked', 'Title'])\n\n# Adding the one hot encoded columns to train_X and test_X\ntrain_X = pd.concat([train_X, train_oe], axis=1)\ntest_X = pd.concat([test_X, test_oe], axis=1)","77fdfb2c":"train_X = train_X.drop(columns=['Ticket', 'Name'])\ntest_X = test_X.drop(columns=['Ticket', 'Name'])","3253dbc1":"fig, ax = plt.subplots(1, 2, figsize=(7, 3))\nfig.suptitle('Before scaling', y=1.1)\nplt.tight_layout()\nax[0].set_title('Training')\nax[1].set_title('Test')\nsns.scatterplot(train_X['Age'], train_X['Fare'], ax=ax[0], hue=train_y)\nsns.scatterplot(test_X['Age'], test_X['Fare'], ax=ax[1])","0770c4d0":"mean = train_X[numeric_features].mean(axis=0)\nstddev = train_X[numeric_features].std(axis=0)\n\nfor numeric_feature in numeric_features:\n    train_X[numeric_feature] = (train_X[numeric_feature] - mean[numeric_feature]) \/ stddev[numeric_feature]\n    test_X[numeric_feature] = (test_X[numeric_feature] - mean[numeric_feature]) \/ stddev[numeric_feature]","d7949122":"fig, ax = plt.subplots(1, 2, figsize=(7, 3))\nfig.suptitle('After scaling', y=1.1)\nplt.tight_layout()\nax[0].set_title('Training')\nax[1].set_title('Test')\nsns.scatterplot(train_X['Age'], train_X['Fare'], ax=ax[0], hue=train_y)\nsns.scatterplot(test_X['Age'], test_X['Fare'], ax=ax[1])","a6a0d0a2":"### Effect of port of embarking on survival","ffc3d6f7":"Label\/ordinal encoding ordinal categorical features.\n\nOne hot encoding nominal features.","eef939c0":"### Effect of fare on survival","6f99fe8e":"Age correlates highest (in absolute magnitude) with Pclass. The older a person is, the greater the chance of being able to afford a better class (1st > 2nd > 3rd).","e64653d2":"### Effect of number of parents\/children on survival","8da84cc1":"## Visualizing null values","19ff6c91":"Apart from 'Mr.', 'Miss.', 'Mrs.' and 'Master.', the titles have very low occurrences.\n\nGrouping the low occurrence titles according to the scheme below:\n* 'Major.', 'Col.' and 'Capt.' under 'Military'\n* 'Jonkheer.', 'Lady.', 'Sir.', 'Don.' and 'Dona.' under 'Royalty'\n* 'Mlle.' (Mademoiselle) under 'Miss.' and 'Mme.' (Madame) under 'Mrs.'\n* 'Ms.' under 'Miss.', even though Ms. could mean either Miss. or Mrs. (there's only one occurrence of Ms., so it shouldn't matter anyway)\n* 'the' under 'Royalty' (because of 'the Countess.')\n* 'Dr.' and 'Rev.' get their own categories","6080b39e":"Imputing numeric features using mean","59a75e82":"## Scaling numeric features","dc4d850b":"### Imputing nulls in all other columns","37141266":"Most were single travellers ('Parch' and 'SibSp'). A large number portion travelled in 3rd class. A majority were male. Most embarked from Southampton.","a9e6763b":"## Multivariate analysis","1a143389":"Highest survival rates were observed in those who had 1 or 2 siblings\/spouses.","8570c327":"### Combining Parch and SibSp into one feature FamilyMembers and observing its effect on survival\n\nIt probably makes more sense to have one feature for the total number of family members than have separate counts for the number of parents\/children and number of siblings\/spouses.","e595d26b":"It looks like in the age bracket 0 to 5, there were more survivors than were killed. The trend is reversed in the middle age groups, where more were killed than survived. This makes sense, as it was ladies and children first. And there were more men than women, so despite ladies first, men would have dominated the not survived section, explaining the blue bulge among the middle-aged.","505495a7":"'Pclass' is already label\/ordinal encoded by default.","6c6e90b3":"# Exploratory Data Analysis and Feature Engineering","5eb05b99":"Instead of imputing age using mean across the age column, it might be a good idea to fill age by grouping primarily using title, and secondarily using class.\n\nWe can expect that age is correlated with title. It's reasonable to assume a 'Mr.' would be older than a 'Master.', and generally speaking, a 'Mrs.' to be older than a 'Miss.'\n\nImputing age grouping primarily by title and secondarily by class.","31de97d1":"### Effect of sex on survival","e9a5e5e0":"### Effect of class on survival","94706921":"Sanity check: len(null_ids_train) matches the number of nulls in the 'Age' column in train_X.","ee7b2c05":"Sanity check: len(null_ids_test) matches the number of nulls in the 'Age' column in test_X.","f9269f41":"### Effect of age and sex together on survival","22fe8351":"Highest survival rates were observed among those who had 1, 2 or 3 parents\/children.","0810e133":"'Age' and 'Fare' are continuous variables. 'Parch', 'SibSp' and 'Pclass' are ordinal categorical variables. The rest are nominal categorical variables.","f9f40a9b":"'Age' seems to be relatively normally distributed. 'Fare' seems to be rather skewed.","d51b8bc7":"Survival rates by class and survival rates by port of embarking show similar patterns. It's possible that class and port of embarking are correlated.","c560198a":"### Effect of age on survival","f945b67f":"A significantly higher proportion of females survived (74.2%) than males (18.89%). Sex seems to be an important feature determining survival.","1b4ab425":"### Dealing with 'Sex', 'Embarked' and 'Title'","24506571":"## Univariate analysis (effect of features on survival)","7851e041":"Number of family members clearly impacts survival rates, as seen from the above graph.","fb7a5d0d":"### Dealing with 'Pclass'","4bd6487d":"## Dealing with nulls","e262ff04":"Filling null values in 'Age' for the test set","5567b3c9":"Generating the column names for the one hot encoded features in the format (feature)_(category)","9e88bfeb":"## Distribution of features","bf7a7579":"Neither train nor test contain nulls now.","3a031272":"Survival rates were highest in 1st class and lowest in 3rd class.","5752fda3":"It is quite apparent that among those passengers who paid a zero fare, the vast majority did not survive. Also among those who paid a high fare (Fare > 10), more passengers survived than were killed.","589bf8ef":"Features with far too many null values have low predictive power. It makes sense to remove such variables than try to impute and fill in so many null values.","775c6649":"Filling null values in 'Age' for the training set","344a2f6f":"Sanity check: The number of columns in the one hot encoded matrices should be 12 each.\n* 'Sex' has 2 categories, and we've used drop='if_binary', so it contributes 1 column to the OHE matrix.\n* 'Embarked' has 3 categories, so it contributes 3 columns to the OHE matrix.\n* 'Title' has 8 categories, so it contributes 8 columns to the OHE matrix.","ed6d026e":"From the colour coding, it's quite apparent that more males died than survived, and more females survived than not.\n\nFrom the graph on the left hand side, we can see that the males in the age range 20-40 had the highest chance of not surviving.\n\nThe spike in the age range 0-5 in both the male and female graphs indicates that children were probably given first preference to be saved.","836909a5":"## Adding a title feature (Mr., Mrs., Dr., etc.)","8fee2d82":"'Ticket' contains far too many categories to be one hot encoded. Maybe it could be label encoded or maybe we could glean some information from it. But for now, dropping the 'Ticket' column.\n\nAlso dropping 'Name' as we have extracted it from it as much useful information as we could.","81a91e0c":"## Encoding categorical features","149c777f":"### Effect of number of siblings\/spouses on survival","1fd72a0b":"'the' seems to be an odd title. But because we split on ' ', the whole title 'the Countess.' became 'the'. So the title should actually be 'Countess'.","1e832a9b":"### Nulls in 'Age'\n\nFinding which feature best correlates with age (absolute magnitude). Then using it to impute the missing age values, along with using titles as an indicator of age.","60247672":"Imputing ordinal and nominal categorical features using mode"}}