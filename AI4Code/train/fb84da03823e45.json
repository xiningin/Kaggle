{"cell_type":{"c722c3c1":"code","7e446c12":"code","5175746d":"code","2a8ec46b":"code","a8d3286e":"code","de9ca3fb":"code","7a961270":"markdown","4ec8c972":"markdown","22e9baca":"markdown","e421cfd8":"markdown","6841186f":"markdown","1d0e27f3":"markdown","e0f8fc3f":"markdown","3a62ec26":"markdown","7b09a815":"markdown","a444d575":"markdown","a77ddd0f":"markdown","7823b91f":"markdown","67e76763":"markdown","8fb58bd2":"markdown","7b8eb801":"markdown"},"source":{"c722c3c1":"# pandas is for data manipulation and wrangling\nimport pandas as pd\n# XGBoost is the specific model and we want the classifier \nfrom xgboost import XGBClassifier\n# creates feature importance plot\nfrom xgboost import plot_importance\n# Label encoding transforms non-ordinal catigorical variables\nfrom sklearn.preprocessing import LabelEncoder\n# splits data into test and training sets\nfrom sklearn.model_selection import train_test_split\n# for tuning, located in sklearn.grid_search depending on version\nfrom sklearn.model_selection import RandomizedSearchCV\n# for assessing accuracy\nfrom sklearn.metrics import accuracy_score\n# For the spliting the data\nfrom sklearn.model_selection import StratifiedKFold\n\n","7e446c12":"# import data set\ndf = pd.read_csv('..\/input\/WA_Fn-UseC_-Telco-Customer-Churn.csv')\n# view the top rows\ndf.head()","5175746d":"# Make dummy variables for catigorical variables with >2 levels\ndummy_columns = [\"MultipleLines\",\"InternetService\",\"OnlineSecurity\",\n                 \"OnlineBackup\",\"DeviceProtection\",\"TechSupport\",\n                 \"StreamingTV\",\"StreamingMovies\",\"Contract\",\n                 \"PaymentMethod\"]\n\ndf_clean = pd.get_dummies(df, columns = dummy_columns)\n\n# Encode catigorical variables with 2 levels\nenc = LabelEncoder()\nencode_columns = [\"Churn\",\"PaperlessBilling\",\"PhoneService\",\n                  \"gender\",\"Partner\",\"Dependents\"]\n\nfor col in encode_columns:\n    df_clean[col] = enc.fit_transform(df[col])\n    \n# Remove customer ID column\ndel df_clean[\"customerID\"]\n\n\n# Make TotalCharges column numeric, empty strings are zeros\ndf_clean[\"TotalCharges\"] = pd.to_numeric(df_clean[\"TotalCharges\"],\n    errors = 'coerce').fillna(0)","2a8ec46b":"# Split data into x and y\ny = df_clean[[\"Churn\"]]\nx = df_clean.drop(\"Churn\", axis=1)\n\n# Create test and training sets\nx_train, x_test, y_train, y_test = train_test_split(x,\n    y, test_size= .2, random_state= 1)","a8d3286e":"# Build XGBoost model\nmodel = XGBClassifier()\nmodel.fit(x_train, y_train)\n\n\n# make predictions for test data\ny_pred = model.predict(x_test)\npredictions = [round(value) for value in y_pred]\n\n# Find Accuracy\naccuracy = accuracy_score(y_test, predictions)\nprint(\"Accuracy: %.2f%%\" % (accuracy * 100.0))\n\n# Display feature importance\nplot_importance(model)","de9ca3fb":"tuned_parameters = {\n        'min_child_weight': [1, 5, 10],\n        'gamma': [0.5, 1, 1.5, 2, 5, 10],\n        'subsample': [0.6, 0.8, 1.0],\n        'colsample_bytree': [0.6, 0.8, 1.0],\n        'max_depth': [3, 5, 8]\n        }\n\nmodel = XGBClassifier(learning_rate=0.02, \n                    n_estimators=200,\n                    booster = 'gbtree',\n                    objective='binary:logistic',\n                    silent=True, \n                    nthread=-1)\n\n\nskf = StratifiedKFold(n_splits=5, shuffle = False, random_state = 22)\n\nrandom_search_model = RandomizedSearchCV(estimator = model, \n                                   param_distributions=tuned_parameters, \n                                   n_iter=10, \n                                   scoring='accuracy', \n                                   n_jobs=-1, \n                                   cv=skf.split(x_train,y_train), \n                                   verbose=3, \n                                   random_state=22)\n\nrandom_search_model.fit(x_train, y_train)\n\ny_pred = random_search_model.predict(x_test)\n\npredictions = [round(value) for value in y_pred]\n\naccuracy = accuracy_score(y_test, y_pred)\nprint(\"Accuracy: %.2f%%\" % (accuracy * 100.0))","7a961270":"This kernel has successfully executed a simple machine learning problem and can be easily adapted in the future. ","4ec8c972":"# Preprocess Data <a id=\"3\"><\/a>","22e9baca":"# Load Packages <a id=\"1\"><\/a>","e421cfd8":"# Split Data into Test and Training Sets <a id=\"4\"><\/a>","6841186f":"Fortunately this is not a 'messy' data set in that there aren't any missing values. That said, in order to use XGBoost some preprocessing still needs to be done so that all the data is numerical:\n\n* Encode catigorical variables with two levels.\n* For catigorical variables with more than two levels create dummy variables.\n* Remove the customer ID feature.\n* The data in the Total Charges column are strings. Convert to float","1d0e27f3":"# Purpose of this Kernel\n\nThe following is a demonstration machine learning project in Python. I have a couple years of experience with R and have thus become familiar with machine learning using the Caret framework. However, I realize that Python is truely the lingua franca of data science so I am getting on board. I have a good deal of Python porgramming experience so (hopefully) the transition will be fairly painless. My goal for this kernel isn't to demonstrate anything ground breaking but to get personally comfortable creating attractive looking kernels in python and develope a XGBoost workflow that I can come back to in future more complex projects.  \n\n**All feedback is highly appreciated!**\n\nI have drawn on a large number of resources to learn Python and XGBoost but the following had a direct effect on this kernel:\n\n* This [cheat sheet](https:\/\/s3.amazonaws.com\/assets.datacamp.com\/blog_assets\/Scikit_Learn_Cheat_Sheet_Python.pdf) for Scikit Learn \n* This [guide](https:\/\/www.analyticsvidhya.com\/blog\/2016\/03\/complete-guide-parameter-tuning-xgboost-with-codes-python\/) to tuning XGBoost hyperparamters \n* This [kernel](https:\/\/www.kaggle.com\/tilii7\/hyperparameter-grid-search-with-xgboost) by Tilii was really helpful in understanding how to implement random grid search\n* This [mini course](https:\/\/machinelearningmastery.com\/develop-first-xgboost-model-python-scikit-learn\/) on XGBoost in Python \n\n","e0f8fc3f":"This is the XGBoost model built using the default parameters. I will compare this base model's performance to that of a tuned model.","3a62ec26":"# Build Base Model <a id=\"5\"><\/a>","7b09a815":"# Conclusions <a id=\"7\"><\/a>","a444d575":"# Import Data <a id=\"2\"><\/a>","a77ddd0f":"# Build Tuned Model <a id=\"6\"><\/a>\n","7823b91f":"The following explinations are quick reminders to myself based on the documentation. \n\n### Model parameters to be tuned\n* **min_child_weight** \u2013 Minimum sum of instance weight (hessian) needed in a child. Used to control over-fitting. Values that are too high can lead to under-fitting. If the classes are highly unbalanced, lower values (even 1) can be alright. \n* **gamma** \u2013 Minimum loss reduction required to make a further partition on a leaf node of the tree. Good values of this parameter are highly specific to the data and model. (typically 0 - 10) \n* **subsample** \u2013 Subsample ratio of the training instance. Lower values make the algorithm more conservative and prevents overfitting but too small values might lead to under-fitting. (typically .5 - 1). \n* **colsample_bytree** \u2013 Subsample ratio of columns for each split, in each level. Denotes the fraction of columns to be randomly sampled for each tree. (typically .5 - 1)\n* **max_depth** \u2013 Maximum tree depth for base learners. Used to control overfitting. (typically 3 \u2013 10)\n\n### Model parameters that do not need to be tuned\n* **learning_rate** \u2013 Boosting learning rate (xgb\u2019s \u201ceta\u201d), smaller generally gives better results but will take more time\n* **n_estimators** \u2013 Number of boosted trees to fit. To a point, more are better but will take more time.\n* **objective** \u2013 Specify the learning task and the corresponding learning objective. I use \u2018binary:logistic\u2019 which uses logistic regression and returns probabilities or each of the two classes. \n* **silent** \u2013 Whether to print messages while running boosting.\n* **nthread** \u2013 Number of parallel threads used to run xgboost. -1 means all cores available.\n* **booster** \u2013 Specify which booster to use: gbtree, gblinear or dart. As this is a classification model we cannot use gblinear. I choose gbtree arbitrarily but I know others have had success with dart. \n\n### Stratified K fold parameters \nWe use stratified folds so that each sub-sample has the same ratio of each target variable as the entire data set. We do this because machine learning model performance can be very sensitive to sample balancing. \n* **n_splits** \u2013 Number of folds, higher will generally return better results but will take more time to run.\n* **shuffle** \u2013 Whether to shuffle each stratification of the data before splitting into batches. These is no need to do so here as the data ordering is arbitrary. \n* **random_state** - If int, random_state is the seed used by the random number generator.\n\n### Random search parameters\n* **estimator** - A object of that type is instantiated for each grid point. This is the model we specify,\n* **param_distributions** \u2013 Dictionary with parameter names as keys and distributions or lists of parameters to try. This is specified as \u2018tuned parameters\u2019 in this kernel.\n* **n_iter** \u2013 Number of parameter settings that are sampled. In other words, the number of random combinations of the tuning parameters to evaluate the model on. The higher this number, the better the results but the longer the run time. \n* **scoring** \u2013 A single string to evaluate the predictions of the test set\n* **n_jobs** \u2013 number of jobs to run in parallel. -1 means all cores available.\n* **cv** - Determines the cross-validation splitting strategy. Here I use a split method which generates indices for a training and testing set. \n* **verbose** - Controls the verbosity: the higher, the more messages.\n* **random_state**  - random_state is the seed used by the random number generator\n","67e76763":"<img src=\"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/0\/0a\/Python.svg\/768px-Python.svg.png\" width=\"250px\"\/>","8fb58bd2":" <a id=\"top\"><\/a>\n# Table of Contents\n\n* [Load Packages](#1)\n* [Import Data](#2)\n* [Preprocess Data](#3)\n* [Split Data Into Test and Training Sets](#4)\n* [Build Base Model](#5)\n* [Build Tuned Model](#6)\n* [Conclusions](#7)\n","7b8eb801":"Split the data into to the target variable, y, which needs to be predicted (whether the customer churned or not) and all the other predictive variables x. Then use the train_test_split function to assign 80% of the data to the training set and 20% to the test set."}}