{"cell_type":{"92e67fe1":"code","04bb1745":"code","5288ed37":"code","ec17c216":"code","10c971ba":"code","69bdbc44":"code","913ac070":"code","cc6ed2d6":"code","08e6bac5":"code","6c8aab73":"code","bc73294e":"code","cb2a385e":"code","afe49d2b":"code","535b5b7d":"code","49584ac1":"code","4696df13":"code","471e5b9f":"code","10aee3f8":"code","043ba4fa":"code","3459aec2":"code","008d272f":"code","a684038f":"code","688962e2":"code","0c0fe603":"code","33327e41":"code","aa1515bf":"code","ff51045b":"code","29d55b80":"code","f9b5f935":"code","2edcb661":"code","f2e71dd7":"code","d3a8b37c":"code","0287fbeb":"code","6185685b":"code","93823b99":"code","6eb78ad2":"markdown","752b7240":"markdown","40828516":"markdown","8ab48b59":"markdown","ea2a6fe7":"markdown","537fc558":"markdown","444e3cdb":"markdown","936a27cd":"markdown","73d8c3c1":"markdown"},"source":{"92e67fe1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","04bb1745":"df = pd.read_csv('..\/input\/world_cup_results.csv')\ndf.head()","5288ed37":"import pandas as pd\nimport matplotlib as plt","ec17c216":"df.shape","10c971ba":"#let's deal with the duplicates\n#Notice that from a shape of (852cols, 11rows) we now arrive at (836, 11). There was duplicates\ndf = df.drop_duplicates()\ndf.shape","69bdbc44":"#Total goals column\ndf['TotalGoals'] = df['HomeGoals'] + df['AwayGoals']","913ac070":"df['month'] = df['Date'].apply(lambda x: x.split('-')[1])\ndf['day'] = pd.to_datetime(df['Date']).dt.day_name()","cc6ed2d6":"#Let's see what our df looks like now by peeping the head\ndf.head(2)","08e6bac5":"df = df[['Year', 'month', 'day', 'Time', 'Round', 'HomeTeam', 'HomeGoals', 'AwayTeam', 'AwayGoals', 'TotalGoals']]\ndf.head(2)","6c8aab73":"import plotly.express as px\nimport plotly.graph_objects as go\nimport numpy as np\n#A value_count on the Year column nicely delivers this\n#To plot this effortlessly with plotly, we will convert the result to a fresh dataframe\n#Notice how nicely plotly highlights the expected years world cups were not played\nmatches_per_year = df.Year.value_counts() #a series to hold our values\nall_games = pd.DataFrame(matches_per_year) #make series into a dataframe\nall_games.reset_index(inplace=True) #reset it's index inplace\nall_games.columns = ['Year', 'Matches'] #rename the columns as needed\nfig = px.bar(all_games, x='Year', y='Matches', text='Matches', color='Matches', height=500,\nlabels={'Matches':'Matches Played', 'Year':'World Cup Year'},\ntitle=\"Total Matches Played Each World Cup Year\")\nfig.update_traces(texttemplate='%{text}', textposition='outside')\nfig.update_layout()\nfig.update_xaxes(\ntickangle=45, tickfont=dict(family='Arial', color='blue', size=14),\ntickvals=[line for line in all_games.Year])\nfig.show()","bc73294e":"all_goals = df.groupby(['Year']).TotalGoals.sum()\nall_goals_df = pd.DataFrame(all_goals)\nall_goals_df.reset_index(inplace=True) #reset it's index inplace\nall_goals_df.columns = ['Year', 'Goals'] #rename the columns as needed\nfig = px.bar(all_goals_df, x='Year', y='Goals', text='Goals', color='Goals', height=450,\nlabels={'Goals':'Goals Scored', 'Year':'World Cup Year'},\ntitle=\"Total Goals Scored Each World Cup Year\")\nfig.update_traces(texttemplate='%{text}', textposition='inside')\nfig.update_layout()\nfig.update_xaxes(\ntickangle=45, tickfont=dict(family='Arial', color='blue', size=14),\ntickvals=[line for line in all_goals_df.Year])\nfig.show()","cb2a385e":"#Take a piece of the df corresponding to all 'Final' in the 'Round' column\nall_finals = df[df['Round'] == 'Final']\nall_finals.head()","afe49d2b":"#Let's make a list of all teams who reach this stage.\n#This will be a list of all featuring HomeTeams and AwayTeams\n#A simple concatenation of a python list of both will do\nteams = [line for line in all_finals.HomeTeam] + [line for line in all_finals.AwayTeam]\n#Peep a sample\nteams[:5]","535b5b7d":"#To count the frequency that I am going to eventually plot I prefer to use a dataframe. It's seamless\n#So I will make a dataframe from the list 'teams' and take a drop a value_counts(). Neat, yea?\nall_finals_df = pd.DataFrame(columns=['Teams'], data = teams)\n#peep the head()\nall_finals_df.head(2)","49584ac1":"#To demonstrate this value_counts() counting, see the result before we plot\n#PS: I am choosing to leave Germany and Germany FR as different entities\nall_finals_df.Teams.value_counts()","4696df13":"#Make a dataframe from counting values in all_finals_df\nfinals_teams_ranked = all_finals_df.Teams.value_counts()\nfinals_teams_ranked_df = pd.DataFrame(finals_teams_ranked)\nfinals_teams_ranked_df.reset_index(inplace=True)\nfinals_teams_ranked_df.columns = ['Teams', 'Frequency'] #rename the columns as needed\nfig = px.bar(finals_teams_ranked_df, x='Teams', y='Frequency', color='Frequency', height=450,\nlabels={'Teams':'Teams in the Finals'},\ntitle=\"All Teams Who Have Reached Finals and Frequency\")\nfig.update_layout()\nfig.show()","471e5b9f":"#Take a piece of the df corresponding to all 'Semi-finals' in the 'Round' column\nall_semi_finals = df[df['Round'] == 'Semi-finals']\nall_semi_finals.head()","10aee3f8":"#Make a list of all teams invovled Home and Away\nteams = [line for line in all_semi_finals.HomeTeam] + [line for line in all_semi_finals.AwayTeam]","043ba4fa":"#Make a df of teams\nall_semi_finals_df = pd.DataFrame(columns=['Teams'], data = teams)\n#peep the head()\nall_semi_finals_df.head(2)","3459aec2":"#Make a dataframe from counting values in all_semi_finals\n#See 'Finals' cell above for explanation as the steps are identical. We are avoiding functions for practise\nsemifinals_teams_ranked = all_semi_finals_df.Teams.value_counts()\nsemifinals_teams_ranked_df = pd.DataFrame(semifinals_teams_ranked)\nsemifinals_teams_ranked_df.reset_index(inplace=True)\nsemifinals_teams_ranked_df.columns = ['Teams', 'Frequency']\nfig = px.bar(finals_teams_ranked_df, x='Teams', y='Frequency', color='Frequency', height=450,\nlabels={'Teams':'Teams in the Finals'},\ntitle=\"All Teams Who Have Reached Semi-Final and Frequency\")\nfig.update_layout()\nfig.show()","008d272f":"#Continue with our dataframe holding only semi-final matches\n#Let's take a sum and mean of 'TotalGoals'\nsemi_goals_sum = all_semi_finals.TotalGoals.sum()\nsemi_goals_ave = all_semi_finals.TotalGoals.mean()\nprint(f\"{semi_goals_sum} goals were scored in all Semi-Finals\\nAn average of {semi_goals_ave:.2f} in every match.\")","a684038f":"#Get a slice of the original df for all quarter-finals\nall_qtrs = df[df['Round'] == 'Quarter-finals']\nall_qtrs.head()","688962e2":"qtrs_goals_sum = all_qtrs.TotalGoals.sum()\nqtrs_goals_ave = all_qtrs.TotalGoals.mean()\nprint(f\"{qtrs_goals_sum} goals were scored in all Semi-Finals\\nAn average of {qtrs_goals_ave:.2f} in every match.\")","0c0fe603":"#All goals in finals\nfinals = df[df['Round'] == 'Final']['HomeGoals'].sum() + df[df['Round'] == 'Final']['AwayGoals'].sum()#[['HomeTeam',\nprint(f\"{finals} goals in finals\")","33327e41":"#Working with the piece of the original df holding finals\nfinals_goals_sum = all_finals.TotalGoals.sum()\nfinals_goals_ave = all_finals.TotalGoals.mean()\nprint(f\"{finals_goals_sum} goals were scored in all Semi-Finals\\nAn average of {finals_goals_ave:.2f} in every match\")","aa1515bf":"#Let's be creative here!\n#First get a slice with no finals\ndf_less_finals = df[df['Round'] != 'Final']\n#From there get a slies with no semi-finals and viola we are left with all matches neither finals or semis\ndf_less_finals_semis = df_less_finals[df_less_finals['Round'] != 'Semi-Finals']\n#One more dropping qtrs. This is fun.\ndf_less_finals_semis_qtrs = df_less_finals_semis[df_less_finals_semis['Round'] != 'Quarter-finals']","ff51045b":"#Did it work? Well, let's check!\n'Final' in df_less_finals_semis_qtrs.Round.tolist() or 'Semi-Finals' in df_less_finals_semis_qtrs.Round.tolist()","29d55b80":"#Just in case that was lady-luck, let's make sure other Rounds are there\n'Round of 16' in df_less_finals_semis_qtrs.Round.tolist()","f9b5f935":"#Total matches in this slice of the dataframe is same number of rows. A number of move will show the number\nd_rest0 = df_less_finals_semis_qtrs.shape[0]\nd_rest1 = len(df_less_finals_semis_qtrs)\nd_rest0 == d_rest1","2edcb661":"print(f\"There are {d_rest0} matches played outside Quater-finals and above\")","f2e71dd7":"#I love python lists a lot as I know them in and out\n#I will use a zip of four different columns from the datafarame to solve the kicker\n# a python list of all four columns we are considering\nAwayT_list = df['AwayTeam'].tolist()\nHomeT_list = df['HomeTeam'].tolist()\nAwayG_list = df['AwayGoals'].tolist()\nHomeG_list = df['HomeGoals'].tolist()\n#Two empty lists to hold our values for the two new columns\nverdict, winner = [], []\n#We zip the four lists created and step through them looking for the kicker condition, assigning values as we go\nfor at, ht, ag, hg in zip (AwayT_list, HomeT_list, AwayG_list, HomeG_list):\n    if ag > hg:\n       verdict.append('A')\n       winner.append (at)\n    elif hg > ag:\n       verdict.append('H')\n       winner.append(ht)\n    elif hg == ag:\n     if ag == 0:\n      verdict.append('D')\n      winner.append('Draw')\n     else:\n      verdict.append('A')\n      winner.append(at)\n#Finally write the two new columns to our dataframe\ndf['Verdict'] = verdict\ndf['Winner'] = winner","d3a8b37c":"df.sample(10)","0287fbeb":"#Assemble all games played in Finals and Semi-finals\nfinals = df[df['Round'] == 'Final']\nsemis = df[df['Round']== 'Semi-finals']\n#Conct both dataframes resetting the index\nfinals_semis = pd.concat([finals, semis]).reset_index(drop=True)\nfinals_semis.shape","6185685b":"#Let's cherry-pick the columns we need\nplot_df = finals_semis[['TotalGoals', 'Round', 'Year', 'month', 'day']]\nplot_df[:5]","93823b99":"#The Plot\nvalues2 = [68, 123, 36, 32, 65, 58, 20, 16, 6, 15, 5, 6, 25, 24, 5, 11, 11, 19, 8, 3, 7, 3, 7]\nfig = go.Figure(go.Sunburst(\nlabels=[\n\"Final\", \"Semi-finals\", \"Jun\", \"Jul\", 'Jun ', 'Jul ',\n'Saturday', 'Sunday',\n'Sunday ', 'Friday ', 'Saturday ', 'Tuesday ',\n'Monday ', 'Saturday ', 'Tuesday ', 'Wednesday ',\n'Friday ', 'Monday ', 'Sunday ', 'Saturday ', 'Thursday ', 'Tuesday ', 'Wednesday '\n],\nparents=[\n\"\", \"\", \"Final\", \"Final\", 'Semi-finals', 'Semi-finals',\n'Jun', 'Jun',\n'Jul', 'Jul', 'Jul', 'Jul',\n'Jun ', 'Jun ', 'Jun ', 'Jun ',\n'Jul ', 'Jul ', 'Jul ', 'Jul ', 'Jul ', 'Jul ', 'Jul '\n],\nvalues=values2),\nlayout=go.Layout(paper_bgcolor='rgba(0,0,0,0)', plot_bgcolor='rgba(0,0,0,0)')\n)\nfig.update_layout(margin=dict(t=0, l=0, r=0, b=0), title_text='Matches')\nfig.data[0].marker=dict(colors=px.colors.sequential.Aggrnyl)\nfig.show()","6eb78ad2":"**All teams who have reached finals and how many times.**","752b7240":"**Total goals scored for each tournament year.**\n1.   Group initial dataframe by year summing total goals\n2.   Convert result to a dataframe and drop a plot on the result","40828516":"**How many goals and average number scored in all finals**","8ab48b59":"**How many goals and average goals scored in all semi-finals.**","ea2a6fe7":"**How many matches were played each world cup year from 1930.**","537fc558":"**How many goals and average goals scored in all quarter-finals.**","444e3cdb":"# **The Kicker.**\nTwo new columns for each of the outcome of every match stating\n\n1. outcome = D for Draw, A for AwayTeam Wins, H for HomeTeam wins.\n2. Winner of each game: 'Draw' if no winner.","936a27cd":"**How many matches were played outside quarter-finals and above.**","73d8c3c1":"**All teams who have reached semis and how many times.**"}}