{"cell_type":{"d326309f":"code","181ab67c":"code","ea468db8":"code","1760f687":"code","db857701":"code","30959b60":"code","a1437690":"code","da196fa7":"code","ccf37b0c":"code","75d1f4b6":"code","714e3c75":"code","efea2d8f":"code","e701844c":"code","3e80f59e":"code","bea951e3":"code","8ba5409c":"code","0cf679d2":"code","071159ea":"code","bae88e6b":"code","2d722718":"code","0eb9c156":"code","bb077ca8":"code","541135d6":"code","89932c69":"markdown","4680f5cd":"markdown","e2f12e67":"markdown","eede1efa":"markdown","2b808b59":"markdown","e23a7081":"markdown"},"source":{"d326309f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","181ab67c":"train_dir = \"\/kaggle\/input\/digit-recognizer\/train.csv\"\ntest_dir = \"\/kaggle\/input\/digit-recognizer\/test.csv\"\nsubmission_dir = \"\/kaggle\/input\/digit-recognizer\/submission.csv\"","ea468db8":"df_train = pd.read_csv(train_dir)","1760f687":"df_train.head()","db857701":"import matplotlib.pyplot as plt\n\ndef plot_images(df, n):\n    for i in range(n**2):\n        random_value = np.random.randint(10)\n        plt.subplot(n, n, i+1)\n        X = df.iloc[random_value, 1:].values.reshape(28, 28)\n        plt.imshow(X, cmap=\"binary\")\n        plt.title(str(df[\"label\"][random_value]))\n        plt.axis(\"off\")\n    plt.figure(figsize=(10, 10))\n    plt.subplots_adjust(left=1, right=1.5, bottom=1.5, top=2.5)\n    plt.show()","30959b60":"plot_images(df_train, 4)","a1437690":"X = df_train.iloc[:, 1:].values\ny = df_train[\"label\"].values","da196fa7":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=123)","ccf37b0c":"print(\"train size: {}\\ntest size: {}\".format(len(X_train), len(X_test)))","75d1f4b6":"from sklearn.ensemble import RandomForestClassifier\n\nrnd_clf = RandomForestClassifier(n_estimators=100, n_jobs=-1)\nrnd_clf.fit(X_train, y_train)","714e3c75":"from sklearn.metrics import accuracy_score\n\npreds = rnd_clf.predict(X_test)\naccuracy_score(preds, y_test)","efea2d8f":"rnd_clf.get_params()","e701844c":"from sklearn.model_selection import GridSearchCV\n\nparams = {\n    'bootstrap': [True],\n    'max_depth': [80, 90, 100],\n    'max_features': [2, 3],\n    'min_samples_leaf': [3, 4, 5],\n    'min_samples_split': [8, 10, 12],\n    'n_estimators': [100, 150, 200]\n}\n\ngrid_search = GridSearchCV(rnd_clf, params, cv=3, n_jobs=-1, verbose=2)","3e80f59e":"grid_search.fit(X_train, y_train)","bea951e3":"grid_search.best_score_","8ba5409c":"final_model = grid_search.best_estimator_\npreds = final_model.predict(X_test)\naccuracy_score(preds, y_test)","0cf679d2":"from sklearn.metrics import confusion_matrix\nimport seaborn as sns\n\ncnf_mtx = confusion_matrix(preds, y_test)","071159ea":"fig, ax = plt.subplots(figsize=(10,10))\nsns.heatmap(cnf_mtx, annot=True, fmt=\"d\")","bae88e6b":"test_df = pd.read_csv(test_dir)\npredictions = final_model.predict(test_df)\ntest_df[\"Label\"] = predictions","2d722718":"# Checking how many times our data is getting confused with what number\n# It turns out its 9 and 0 the most\ntemp = pd.read_csv(test_dir)\ntemp[\"label\"] = predictions\n\nplot_images(temp, 5)","0eb9c156":"test_df.head()","bb077ca8":"submission = pd.DataFrame({'ImageId': range(1,len(test_df)+1) ,'Label': predictions })\nsubmission.head()","541135d6":"submission.to_csv(\"submission.csv\",index=False)","89932c69":"# Hyperparameter tuning","4680f5cd":"## Plotting the data","e2f12e67":"## Testing data, predictions and submission","eede1efa":"## Model Selection","2b808b59":"## Splitting the data for training and testing","e23a7081":"## Confusion Matrix"}}