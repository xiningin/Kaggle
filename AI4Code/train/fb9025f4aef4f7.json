{"cell_type":{"c692cf05":"code","fd382b51":"code","ffc8d99f":"code","0a52c3d9":"code","bc68bc2a":"code","5ae6eb8e":"code","45947a53":"code","166ad279":"code","125524f8":"code","04e7696c":"code","2536223b":"code","d20f4615":"code","dbc883e6":"code","8ee6a22a":"code","ec036678":"code","e520d252":"code","bdde6d08":"code","5747b59a":"code","4e6a3d16":"code","54582bfe":"code","0ec0d01e":"code","c20d197e":"code","edf96f27":"code","894fc7be":"code","fbc59b67":"code","ae23d96c":"code","2377b269":"code","535f85e3":"code","f3300b1c":"code","67833891":"code","3200e36f":"code","7a7efa04":"code","1afb8080":"code","9ae8166f":"code","aceab401":"code","cbc9e0cb":"code","9ca67120":"code","9059811b":"code","76b93cb9":"code","979daa6e":"code","062a48d1":"code","c1062909":"code","1276ea23":"code","42ebba3e":"code","9159a6bf":"code","9c17d4bd":"code","ff559854":"code","da3c8b55":"code","cdb1643b":"code","7928f85a":"code","b84ea295":"code","4ffd8d1e":"code","dfccdf43":"code","7c872819":"code","100d8960":"code","8c27286d":"code","2b91687d":"code","472f810f":"code","4052a7b2":"code","0561182b":"code","9659274e":"code","4a41eed8":"code","1ea2ab71":"code","43067f37":"code","8d758dc8":"code","dc6b6114":"code","6a1a2fee":"code","9636c922":"code","a67ed703":"code","a8b68439":"code","1ebd0ba6":"code","9d4efd8b":"code","4e543d53":"code","f0e2b51a":"code","842eaaad":"code","0991e910":"code","2b132ccd":"code","e8bfd72e":"code","266936a4":"code","8239f0a2":"code","c969ed32":"code","99c3393e":"code","49ca5d4c":"code","721e8c86":"code","4e6b1862":"code","cae9bfef":"code","8b4ac3f9":"code","45cfc7b1":"code","925d4ae3":"code","19bbbd1e":"code","520ec02d":"code","e0fe70fa":"code","9cbb6019":"code","1e08e859":"code","87c7f7ff":"code","87fce9c0":"code","17ab689c":"markdown","b125f635":"markdown","3d00ddd1":"markdown","cd81141e":"markdown","e607c6c1":"markdown","71b21e53":"markdown","0090f34e":"markdown","e87a72cc":"markdown","2f10e6b2":"markdown","91a04bb2":"markdown","b664a1d1":"markdown","44e49acd":"markdown"},"source":{"c692cf05":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fd382b51":"# It is always consider as a good practice to make a copy of original dataset.\n\nmain_df = pd.read_csv(\"\/kaggle\/input\/water-potability\/water_potability.csv\")\ndf = main_df.copy()","ffc8d99f":"# Getting top 5 row of the dataset\n\ndf.head()","0a52c3d9":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport plotly.express as px\nimport warnings\nwarnings.filterwarnings('ignore')","bc68bc2a":"print(df.shape)","5ae6eb8e":"print(df.columns)","45947a53":"df.describe()","166ad279":"df.info()","125524f8":"print(df.nunique())","04e7696c":"print(df.isnull().sum())","2536223b":"df.dtypes","d20f4615":"sns.heatmap(df.isnull())","dbc883e6":"plt.figure(figsize=(10, 8))\nsns.heatmap(df.corr(), annot= True, cmap='coolwarm')","8ee6a22a":"# Unstacking the correlation matrix to see the values more clearly.\ncorr = df.corr()\nc1 = corr.abs().unstack()\nc1.sort_values(ascending = False)[12:24:2]","ec036678":"ax = sns.countplot(x = \"Potability\",data= df, saturation=0.8)\nplt.xticks(ticks=[0, 1], labels = [\"Not Potable\", \"Potable\"])\nplt.show()","e520d252":"x = df.Potability.value_counts()\nlabels = [0,1]\nprint(x)","bdde6d08":"sns.violinplot(x='Potability', y='ph', data=df, palette='rocket')","5747b59a":"# Visualizing dataset and also checking for outliers \n\nfig, ax = plt.subplots(ncols = 5, nrows = 2, figsize = (20, 10))\nindex = 0\nax = ax.flatten()\n\nfor col, value in df.items():\n    sns.boxplot(y=col, data=df, ax=ax[index])\n    index += 1\nplt.tight_layout(pad = 0.5, w_pad=0.7, h_pad=5.0)","4e6a3d16":"plt.rcParams['figure.figsize'] = [20,10]\ndf.hist()\nplt.show()","54582bfe":"sns.pairplot(df, hue=\"Potability\")","0ec0d01e":"plt.rcParams['figure.figsize'] = [7,5]\nsns.distplot(df['Potability'])","c20d197e":"df.hist(column='ph', by='Potability')","edf96f27":"df.hist(column='Hardness', by='Potability')","894fc7be":"# Individual box plot for each feature\ndef Box(df):\n    plt.title(\"Box Plot\")\n    sns.boxplot(df)\n    plt.show()\nBox(df['ph'])","fbc59b67":"sns.histplot(x = \"Hardness\", data=df)","ae23d96c":"df.nunique()","2377b269":"skew_val = df.skew().sort_values(ascending=False)\nskew_val","535f85e3":"fig = px.box(df, x=\"Potability\", y=\"ph\", color=\"Potability\", width=800, height=400)\nfig.show()","f3300b1c":"fig = px.box(df, x=\"Potability\", y=\"Hardness\", color=\"Potability\", width=800, height=400)\nfig.show()","67833891":"fig = px.histogram (df, x = \"Sulfate\",  facet_row = \"Potability\",  template = 'plotly_dark')\nfig.show ()","3200e36f":"fig = px.histogram (df, x = \"Trihalomethanes\",  facet_row = \"Potability\",  template = 'plotly_dark')\nfig.show ()","7a7efa04":"fig =  px.pie (df, names = \"Potability\", hole = 0.4, template = \"plotly_dark\")\nfig.show ()","1afb8080":"fig = px.scatter (df, x = \"ph\", y = \"Sulfate\", color = \"Potability\", template = \"plotly_dark\",  trendline=\"ols\")\nfig.show ()","9ae8166f":"fig = px.scatter (df, x = \"Organic_carbon\", y = \"Hardness\", color = \"Potability\", template = \"plotly_dark\",  trendline=\"lowess\")\nfig.show ()","aceab401":"df.isnull().mean().plot.bar(figsize=(10,6)) \nplt.ylabel('Percentage of missing values') \nplt.xlabel('Features') \nplt.title('Missing Data in Percentages');","cbc9e0cb":"df['ph'] = df['ph'].fillna(df['ph'].mean())\ndf['Sulfate'] = df['Sulfate'].fillna(df['Sulfate'].mean())\ndf['Trihalomethanes'] = df['Trihalomethanes'].fillna(df['Trihalomethanes'].mean())","9ca67120":"df.head()","9059811b":"sns.heatmap(df.isnull())","76b93cb9":"df.isnull().sum()","979daa6e":"X = df.drop('Potability', axis=1)\ny = df['Potability']","062a48d1":"X.shape, y.shape","c1062909":"# import StandardScaler to perform scaling\nfrom sklearn.preprocessing import StandardScaler \nscaler = StandardScaler()","1276ea23":"X = scaler.fit_transform(X)\nX","42ebba3e":"# import train-test split \nfrom sklearn.model_selection import train_test_split","9159a6bf":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)","9c17d4bd":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report","ff559854":"# Creating model object\nmodel_lg = LogisticRegression(max_iter=120,random_state=0, n_jobs=20)","da3c8b55":"# Training Model\nmodel_lg.fit(X_train, y_train)","cdb1643b":"# Making Prediction\npred_lg = model_lg.predict(X_test)","7928f85a":"# Calculating Accuracy Score\nlg = accuracy_score(y_test, pred_lg)\nprint(lg)","b84ea295":"print(classification_report(y_test,pred_lg))","4ffd8d1e":"# confusion Maxtrix\ncm1 = confusion_matrix(y_test, pred_lg)\nsns.heatmap(cm1\/np.sum(cm1), annot = True, fmt=  '0.2%', cmap = 'Reds')","dfccdf43":"from sklearn.tree import DecisionTreeClassifier","7c872819":"# Creating model object\nmodel_dt = DecisionTreeClassifier( max_depth=4, random_state=42)","100d8960":"# Training Model\nmodel_dt.fit(X_train,y_train)","8c27286d":"# Making Prediction\npred_dt = model_dt.predict(X_test)","2b91687d":"# Calculating Accuracy Score\ndt = accuracy_score(y_test, pred_dt)\nprint(dt)","472f810f":"print(classification_report(y_test,pred_dt))","4052a7b2":"# confusion Maxtrix\ncm2 = confusion_matrix(y_test, pred_dt)\nsns.heatmap(cm2\/np.sum(cm2), annot = True, fmt=  '0.2%', cmap = 'Reds')","0561182b":"from sklearn.ensemble import RandomForestClassifier","9659274e":"# Creating model object\nmodel_rf = RandomForestClassifier(n_estimators=300,min_samples_leaf=0.16, random_state=42)","4a41eed8":"# Training Model\nmodel_rf.fit(X_train, y_train)","1ea2ab71":"# Making Prediction\npred_rf = model_rf.predict(X_test)","43067f37":"# Calculating Accuracy Score\nrf = accuracy_score(y_test, pred_rf)\nprint(rf)","8d758dc8":"print(classification_report(y_test,pred_rf))","dc6b6114":"# confusion Maxtrix\ncm3 = confusion_matrix(y_test, pred_rf)\nsns.heatmap(cm3\/np.sum(cm3), annot = True, fmt=  '0.2%', cmap = 'Reds')","6a1a2fee":"from xgboost import XGBClassifier","9636c922":"# Creating model object\nmodel_xgb = XGBClassifier(max_depth= 8, n_estimators= 125, random_state= 0,  learning_rate= 0.03, n_jobs=5)","a67ed703":"# Training Model\nmodel_xgb.fit(X_train, y_train)","a8b68439":"# Making Prediction\npred_xgb = model_xgb.predict(X_test)","1ebd0ba6":"# Calculating Accuracy Score\nxgb = accuracy_score(y_test, pred_xgb)\nprint(xgb)","9d4efd8b":"print(classification_report(y_test,pred_xgb))","4e543d53":"# confusion Maxtrix\ncm4 = confusion_matrix(y_test, pred_xgb)\nsns.heatmap(cm4\/np.sum(cm4), annot = True, fmt=  '0.2%', cmap = 'Reds')","f0e2b51a":"from sklearn.neighbors import KNeighborsClassifier","842eaaad":"# Creating model object\nmodel_kn = KNeighborsClassifier(n_neighbors=9, leaf_size=20)","0991e910":"# Training Model\nmodel_kn.fit(X_train, y_train)","2b132ccd":"# Making Prediction\npred_kn = model_kn.predict(X_test)","e8bfd72e":"# Calculating Accuracy Score\nkn = accuracy_score(y_test, pred_kn)\nprint(kn)","266936a4":"print(classification_report(y_test,pred_kn))","8239f0a2":"# confusion Maxtrix\ncm5 = confusion_matrix(y_test, pred_kn)\nsns.heatmap(cm5\/np.sum(cm5), annot = True, fmt=  '0.2%', cmap = 'Reds')","c969ed32":"from sklearn.svm import SVC, LinearSVC","99c3393e":"model_svm = SVC(kernel='rbf', random_state = 42)","49ca5d4c":"model_svm.fit(X_train, y_train)","721e8c86":"# Making Prediction\npred_svm = model_svm.predict(X_test)","4e6b1862":"# Calculating Accuracy Score\nsv = accuracy_score(y_test, pred_svm)\nprint(sv)","cae9bfef":"print(classification_report(y_test,pred_kn))","8b4ac3f9":"# confusion Maxtrix\ncm6 = confusion_matrix(y_test, pred_svm)\nsns.heatmap(cm6\/np.sum(cm6), annot = True, fmt=  '0.2%', cmap = 'Reds')","45cfc7b1":"## Using AdaBoost Classifier","925d4ae3":"from sklearn.ensemble import AdaBoostClassifier","19bbbd1e":"model_ada = AdaBoostClassifier(learning_rate= 0.002,n_estimators= 205,random_state=42)","520ec02d":"model_ada.fit(X_train, y_train)","e0fe70fa":"# Making Prediction\npred_ada = model_ada.predict(X_test)","9cbb6019":"# Calculating Accuracy Score\nada = accuracy_score(y_test, pred_ada)\nprint(ada)","1e08e859":"print(classification_report(y_test,pred_ada))","87c7f7ff":"# confusion Maxtrix\ncm7 = confusion_matrix(y_test, pred_ada)\nsns.heatmap(cm7\/np.sum(cm7), annot = True, fmt=  '0.2%', cmap = 'Reds')","87fce9c0":"models = pd.DataFrame({\n    'Model':['Logistic Regression', 'Decision Tree', 'Random Forest', 'XGBoost', 'KNeighbours', 'SVM', 'AdaBoost'],\n    'Accuracy_score' :[lg, dt, rf, xgb, kn, sv, ada]\n})\nmodels\nsns.barplot(x='Accuracy_score', y='Model', data=models)\n\nmodels.sort_values(by='Accuracy_score', ascending=False)","17ab689c":"## Using SVM","b125f635":"## Using Decision Tree Classifier","3d00ddd1":"# <center> Water Quality <\/center> ","cd81141e":"## Using XGBoost Classifier","e607c6c1":"## Using Random Forest ","71b21e53":"## About dataset\n\n#### Content\nThe water_potability.csv file contains water quality metrics for 3276 different water bodies.\n\n**1. pH value:**\nPH is an important parameter in evaluating the acid\u2013base balance of water. It is also the indicator of acidic or alkaline condition of water status. \nWHO has recommended maximum permissible limit of pH from 6.5 to 8.5. The current investigation ranges were 6.52\u20136.83 which are in the range of WHO standards.\n\n**2. Hardness:**\nHardness is mainly caused by calcium and magnesium salts. These salts are dissolved from geologic deposits through which water travels. The length of time water is in contact with hardness producing material helps determine how much hardness there is in raw water. Hardness was originally defined as the capacity of water to precipitate soap caused by Calcium and Magnesium.\n\n**3. Solids (Total dissolved solids - TDS):**\nWater has the ability to dissolve a wide range of inorganic and some organic minerals or salts such as potassium, calcium, sodium, bicarbonates, chlorides, magnesium, sulfates etc. These minerals produced un-wanted taste and diluted color in appearance of water. This is the important parameter for the use of water. The water with high TDS value indicates that water is highly mineralized. Desirable limit for TDS is 500 mg\/l and maximum limit is 1000 mg\/l which prescribed for drinking purpose.\n\n**4. Chloramines:**\nChlorine and chloramine are the major disinfectants used in public water systems. Chloramines are most commonly formed when ammonia is added to chlorine to treat drinking water. Chlorine levels up to 4 milligrams per liter (mg\/L or 4 parts per million (ppm)) are considered safe in drinking water.\n\n**5. Sulfate:**\nSulfates are naturally occurring substances that are found in minerals, soil, and rocks. They are present in ambient air, groundwater, plants, and food. The principal commercial use of sulfate is in the chemical industry. Sulfate concentration in seawater is about 2,700 milligrams per liter (mg\/L). It ranges from 3 to 30 mg\/L in most freshwater supplies, although much higher concentrations (1000 mg\/L) are found in some geographic locations.\n\n**6. Conductivity:**\nPure water is not a good conductor of electric current rather\u2019s a good insulator. Increase in ions concentration enhances the electrical conductivity of water. Generally, the amount of dissolved solids in water determines the electrical conductivity. Electrical conductivity (EC) actually measures the ionic process of a solution that enables it to transmit current. According to WHO standards, EC value should not exceeded 400 \u03bcS\/cm.\n\n**7. Organic_carbon:**\nTotal Organic Carbon (TOC) in source waters comes from decaying natural organic matter (NOM) as well as synthetic sources. TOC is a measure of the total amount of carbon in organic compounds in pure water. According to US EPA < 2 mg\/L as TOC in treated \/ drinking water, and < 4 mg\/Lit in source water which is use for treatment.\n\n**8. Trihalomethanes:**\nTHMs are chemicals which may be found in water treated with chlorine. The concentration of THMs in drinking water varies according to the level of organic material in the water, the amount of chlorine required to treat the water, and the temperature of the water that is being treated. THM levels up to 80 ppm is considered safe in drinking water.\n\n**9. Turbidity:**\nThe turbidity of water depends on the quantity of solid matter present in the suspended state. It is a measure of light emitting properties of water and the test is used to indicate the quality of waste discharge with respect to colloidal matter. The mean turbidity value obtained for Wondo Genet Campus (0.98 NTU) is lower than the WHO recommended value of 5.00 NTU.\n\n**10. Potability:**\nIndicates if water is safe for human consumption where 1 means Potable and 0 means Not potable.","0090f34e":"#### Conclusion :- Here SVM classifier has achieved highest accuracy.","e87a72cc":"<center> <img src=\"https:\/\/media.istockphoto.com\/photos\/analyzing-samples-picture-id182188515?k=6&m=182188515&s=612x612&w=0&h=Hcjly5YZGs4tFxPmD6Q-hbCKcoGFU-JIPT8qLaYDUOQ=\"> <\/center>","2f10e6b2":"* Using pandas skew function to check the correlation between the values.\n* Values between 0.5 to  -0.5 will be considered as the normal distribution else will be skewed depending upon the skewness value.","91a04bb2":"## Using KNeighbours","b664a1d1":"## Using Logistic Regression","44e49acd":"### Following are the list of algorithms that are used in this notebook.\n\n|    Algorithm         | \n| -------------------- | \n| Logistic Regression  |\n| Decision Tree|\n| Random Forest|\n| XGBoost|\n| KNeighbours|\n| SVM|\n| AdaBoost|"}}