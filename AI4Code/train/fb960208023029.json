{"cell_type":{"15b274f9":"code","9d973053":"code","01f0709d":"code","d419517d":"code","7a699a23":"code","47fbe8e6":"code","04ad2291":"code","9e83a953":"code","5fa2a740":"code","2ff6821a":"code","a17c8c42":"code","37816f5f":"code","8953b4f4":"code","3996f6fa":"code","cef54122":"code","a71c0e8c":"markdown","3bacacab":"markdown","682bafa0":"markdown","9625868b":"markdown","4d0dd7c6":"markdown","ce8a092f":"markdown","df8f8158":"markdown","d0daf617":"markdown","4e02ed3f":"markdown","92438bd6":"markdown"},"source":{"15b274f9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9d973053":"\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n%matplotlib inline\ndf= pd.read_csv('..\/input\/rtb\/biddings.csv')","01f0709d":"print(df.shape)","d419517d":"count_classes = pd.value_counts(df['convert'], sort = True).sort_index()\ncount_classes.plot(kind = 'bar')\nplt.title(\"bidding conversion histogram\")\nplt.xlabel(\"Conversion\")\nplt.ylabel(\"Count\")","7a699a23":"train = df[:800000]\ntest = df[800000:]","47fbe8e6":"def undersample(df, ratio=1):\n    conv = df[df.convert == 1]\n    oth = df[df.convert == 0].sample(n=ratio*len(conv))\n    return pd.concat([conv, oth]).sample(frac=1) #shuffle data\n\nustrain = undersample(train)\n\ny = ustrain.convert\nx = ustrain.drop('convert', axis=1)\n\nprint(\"Remaining rows\", len(ustrain))","04ad2291":"from sklearn.model_selection import KFold, cross_val_score, train_test_split\nfrom sklearn.metrics import auc,roc_curve\nfrom sklearn.metrics import f1_score","9e83a953":"X_train, X_test, Y_train, Y_test = train_test_split(x, y, test_size = 0.2, random_state = 42)","5fa2a740":"\nprint('Shape of X_train=>',X_train.shape)\nprint('Shape of X_test=>',X_test.shape)\nprint('Shape of Y_train=>',Y_train.shape)\nprint('Shape of Y_test=>',Y_test.shape)","2ff6821a":"# Building Decision Tree\nfrom sklearn.tree import DecisionTreeClassifier\ndt = DecisionTreeClassifier(criterion = 'entropy', random_state = 42)\ndt.fit(X_train, Y_train)\ndt_pred_train = dt.predict(X_train)","a17c8c42":"# Evaluation on Training set\ndt_pred_train = dt.predict(X_train)\nprint('Training Set Evaluation F1-Score=>',f1_score(Y_train,dt_pred_train))","37816f5f":"# Evaluating on Test set\ndt_pred_test = dt.predict(X_test)\nprint('Testing Set Evaluation F1-Score=>',f1_score(Y_test,dt_pred_test))","8953b4f4":"from sklearn.tree import DecisionTreeClassifier\nmsl_s = [1,2,4,8,16,32,64,128,256]\nscores = list()\nscores_std = list()\ndect = DecisionTreeClassifier(criterion='gini', splitter='best', max_depth=None, min_samples_split=2, min_samples_leaf=1, min_weight_fraction_leaf=0.0, max_features=None,\n                              random_state=None, max_leaf_nodes=None, min_impurity_decrease=0.0, min_impurity_split=None, class_weight=None, presort='deprecated', ccp_alpha=0.0)\n\nfor msl in msl_s:\n    dect.min_samples_leaf = msl\n    this_scores = cross_val_score(dect, x, y, cv=4,scoring='roc_auc')\n    scores.append(np.mean(this_scores))\n    scores_std.append(np.std(this_scores))\n    \ndect_results = pd.DataFrame({'score':scores, 'Minimum samples leaf': msl_s}) \ndect_results","3996f6fa":"y_preds = []\ndect.min_samples_leaf = int(dect_results.loc[dect_results['score'].idxmax()]['Minimum samples leaf'])\ny_preds.append(dect.fit(x,y).predict_proba(test.drop('convert', axis=1))[:,1])","cef54122":"model = ['Decision Tree']\ncolors = ['b']\n\nfor i in range(0,1):\n    fpr, tpr, thresholds = roc_curve(test.convert,y_preds[i])\n    roc_auc = auc(fpr,tpr)\n    plt.plot(fpr, tpr, 'b',label='%s AUC = %0.2f'% (model[i] ,roc_auc),  color=colors[i], linestyle='--')\n    plt.legend(loc='lower right')\n    \nplt.title('Receiver Operating Characteristic')\nplt.plot([-0.1,1.1],[-0.1,1.1],color='gray', linestyle=':')\nplt.xlim([-0.1,1.1])\nplt.ylim([-0.1,1.1])\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.show()","a71c0e8c":"# 2.Undersample the data","3bacacab":"Let\u2019s take a look at the shape of the created train and test sets:","682bafa0":"# 5.Evaluate the Fit\nNow we are going to test how good Decision Tree Model is performing with regard to the imbalanced test set, we reserved in the beginning. We are going to use the model with the best parameters (selected with sklearn cross-validation)","9625868b":"# 3.Fitting Model","4d0dd7c6":"# 1.Checking the target classes","ce8a092f":"Creating Train and Test Sets\n\nNow, let\u2019s split the dataset in an 80:20 ratio for training and test set respectively","df8f8158":"We reduced our dataset from 0.8 million records to roughly 3000, so we don't use 99 percent of the original dataset anymore. This seems like we would introduce a lot of bias, so to generalise we need to do this step multiple times and obtain many different undersampled datasets to train our model on.","d0daf617":"# 4.Building and Evaluating the Model\nSince we have both the training and testing sets, it\u2019s time to train our model and classify the loan applications. We will train a decision tree on this dataset:","4e02ed3f":"**This is real real-time bidding data that is used to predict if an advertiser should bid for a marketing slot e.g. a banner on a webpage. Explanatory variables are things like browser, operation system or time of the day the user is online, marketplace his identifiers were traded on earlier, etc. The column 'convert' is 1, when the person clicked on the ad, and 0 if this is not the case\n**\nAnalyze, Visualize and create a decision tree classification model on the dataset\n\n# Loading the dataset\nWe have 1 million records with 88 principle components that can be used to predict our target variable convert.","92438bd6":"The data is heavily unbalanced. Less than 1% belongs to converted users."}}