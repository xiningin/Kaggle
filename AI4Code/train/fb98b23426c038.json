{"cell_type":{"f540db85":"code","97ec0d00":"code","36c1ea6e":"code","9fbd795c":"code","5a91f85d":"code","7390ec73":"code","d17c57b9":"code","140f350c":"code","8eee0699":"code","05d28106":"code","b1334270":"code","b133b51b":"code","d0ba4f83":"code","1f5f43d4":"code","b5e1da32":"code","e5325928":"code","bae0c83d":"code","107c28b0":"code","a26f4534":"code","94d1e05a":"code","5accb0bf":"code","587ff499":"code","51ebffe7":"code","5078459f":"code","5c683365":"code","ee930280":"code","7f7bba59":"code","7b67f271":"code","cd2d5d79":"code","36ccfbcf":"code","21e9fa8a":"code","f68b8e58":"code","bb44d76a":"code","1a7bb25b":"code","ff43956b":"code","0574e143":"code","982ed9fd":"code","4e0d6131":"code","7c74391c":"code","b51dcf9c":"code","2653f17e":"code","e0777b9c":"code","fbb5217c":"code","3cae6573":"code","ae471afe":"code","31a14efc":"code","5060bf76":"code","24bcd1c7":"code","4006baef":"code","1e595d07":"code","af616997":"code","96e7af97":"code","570f344c":"code","ff7a2d67":"code","725e0c8b":"code","94af790c":"code","2dabaa09":"code","b6743b7d":"code","2a8aeea0":"code","bc1d1f58":"code","815fdf5d":"code","67faf1f1":"code","1dab3e25":"code","e7bcbf02":"code","187beec0":"code","f7b00532":"code","775bdcfd":"code","e4fc1b09":"code","283d7cca":"code","897858cb":"code","d0f5e952":"code","2ec7e3f0":"code","b1dd3f43":"code","ff4da1f6":"code","a2bf368e":"code","1b8058e6":"code","6c939f00":"code","9e21de2b":"code","a8e4f99b":"code","2690cbf5":"code","f2769bd4":"code","3b36f382":"code","56e5db96":"code","3710c5cd":"code","d0eb438f":"code","e449b2cd":"code","72d8bf03":"code","3f2ba9a6":"code","bcc5ea0f":"code","6e5d568e":"code","105a5fa2":"code","b2b4413f":"code","906b78fc":"markdown","0b51d52c":"markdown","68f4a24e":"markdown","e991d433":"markdown","b7eb32f4":"markdown","5fbd6352":"markdown","777ecc48":"markdown","b3e968da":"markdown","561c2850":"markdown","f0cdfb16":"markdown","358b7759":"markdown","77fb7bc1":"markdown","1ae91d43":"markdown","123be1e1":"markdown","a7ea49eb":"markdown","6c13a897":"markdown","c196b5cf":"markdown","a6e81b3d":"markdown","38909612":"markdown","f4418574":"markdown","13a60e49":"markdown","170b3453":"markdown","4f57d689":"markdown","cd3c3460":"markdown","b59c4dae":"markdown","a47ef777":"markdown","b54fc723":"markdown","70553e4f":"markdown","9aa77969":"markdown","c08a0fa6":"markdown","63d78920":"markdown","9f883d58":"markdown","84e14dac":"markdown","c1d8fc1f":"markdown","71d7ee53":"markdown","5a086017":"markdown","96fcc407":"markdown","c028e595":"markdown","e5b47c88":"markdown","52bda54a":"markdown","ba4dfd19":"markdown"},"source":{"f540db85":"from pandas import Series\nimport pandas as pd\nimport numpy as np\nimport pandas_profiling\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.feature_selection import f_classif, mutual_info_classif\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder, StandardScaler\n\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\n\n\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay, auc, \\\n                            roc_auc_score, roc_curve, accuracy_score, precision_score, \\\n                            recall_score, f1_score ","97ec0d00":"# \u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0435\u043c RANDOM_SEED\n# \u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0435\u043c \u0432\u0435\u0440\u0441\u0438\u044e \u043f\u0430\u043a\u0435\u0442\u0430\nRANDOM_SEED = 42\n!pip freeze > requirements.txt\nCURRENT_DATE = pd.to_datetime('02\/10\/2021')","36c1ea6e":"import warnings\nwarnings.filterwarnings(\"ignore\")","9fbd795c":"df_train = pd.read_csv('\/kaggle\/input\/sf-dst-scoring\/train.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/sf-dst-scoring\/test.csv')\npd.set_option('display.max_columns', None)\nprint('\u0420\u0430\u0437\u043c\u0435\u0440 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430: ', df_train.shape)\ndisplay(df_train.head(3))\nprint('\u0420\u0430\u0437\u043c\u0435\u0440 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430: ', df_test.shape)\ndisplay(df_test.head(3))","5a91f85d":"# \u0434\u043b\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u0442\u0440\u0435\u0439\u043d \u0438 \u0442\u0435\u0441\u0442 \u0432 \u043e\u0434\u0438\u043d \u0434\u0430\u0442\u0430\u0441\u0435\u0442\ndf_train['Train'] = 1 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0442\u0440\u0435\u0439\u043d\ndf_test['Train'] = 0 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0442\u0435\u0441\u0442\n\ndf = df_train.append(df_test, sort=False).reset_index(drop=True) ","7390ec73":"df.head(3)","d17c57b9":"df.info()","140f350c":"df.describe()","8eee0699":"# \u0432\u043d\u0435\u0441\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0440\u0435\u0437\u044e\u043c\u0435 \u0432 \u0441\u043f\u0438\u0441\u043a\u0438 \n# \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u0440\u044f\u0434 (1)\ntime_cols = ['app_date']\n# \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 (5)\nbin_cols = ['sex', 'car', 'car_type', 'good_work', 'foreign_passport']\n# \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 (5)\ncat_cols = ['education', 'region_rating', 'home_address', 'work_address', 'sna', 'first_time']\n# \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435, client_id \u0438\u0441\u043a\u043b\u044e\u0447\u0438\u043b\u0438 \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u0430 (6)\nnum_cols = ['age','decline_app_cnt','score_bki','bki_request_cnt','income','days']\n# client_id \u043d\u0435 \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u043c \u0432 \u0441\u043f\u0438\u0441\u043a\u0438","05d28106":"# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u043e\u0432\nwith sns.plotting_context(\"notebook\"), sns.axes_style(\"whitegrid\"):\n    sns.displot(df['age'],bins=10, color='red')","b1334270":"sns.boxplot(data=df['age'], palette=\"Blues\", width=0.3);","b133b51b":"# \u041b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u0443\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435\nwith sns.plotting_context(\"notebook\"), sns.axes_style(\"whitegrid\"):\n    sns.displot(np.log((df['age'])+1),bins=10, color='red')","d0ba4f83":"sns.boxplot(data=np.log((df['age'])+1), palette=\"Blues\", width=0.3);","1f5f43d4":"# \u0412\u044b\u0432\u043e\u0434\u044b: \u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043b\u043e\u0433\u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0435, \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u043f\u043e \u043a\u0432\u0430\u0440\u0442\u0438\u043b\u044f\u043c \u043d\u0435\u0442. \n# \u041b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u0443\u0435\u043c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0432 \u043e\u0431\u0449\u0435\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u0435\ndf['age'] = np.log(df['age'] + 1)\ndf.head(3)","b5e1da32":"# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u044f\u0432\u043e\u043a\nwith sns.plotting_context(\"notebook\"), sns.axes_style(\"whitegrid\"):\n    sns.displot(df['decline_app_cnt'], color='red')","e5325928":"sns.boxplot(data=df['decline_app_cnt'], palette=\"Blues\", width=0.3);","bae0c83d":"# \u041b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u0443\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435\nwith sns.plotting_context(\"notebook\"), sns.axes_style(\"whitegrid\"):\n    sns.displot(np.log((df['decline_app_cnt'])+1),color='red')","107c28b0":"sns.boxplot(data=np.log((df['decline_app_cnt'])+1), palette=\"Blues\", width=0.3);","a26f4534":"# \u0412\u044b\u0432\u043e\u0434\u044b: \u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043b\u043e\u0433\u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0435, \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u043e\u0447\u0435\u043d\u044c \u043c\u043d\u043e\u0433\u043e. \n# \u041b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u0443\u0435\u043c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0432 \u043e\u0431\u0449\u0435\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u0435\ndf['decline_app_cnt'] = np.log(df['decline_app_cnt'] + 1)\ndf.head(3)","94d1e05a":"# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0431\u0430\u043b\u043b\u043e\u0432\nwith sns.plotting_context(\"notebook\"), sns.axes_style(\"whitegrid\"):\n    sns.displot(df['score_bki'],bins = 20,color='red')","5accb0bf":"sns.boxplot(data=df['score_bki'], palette=\"Blues\", width=0.3);","587ff499":"# \u0412\u044b\u0432\u043e\u0434\u044b: \u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0435, \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u043d\u0435 \u043c\u043d\u043e\u0433\u043e. ","51ebffe7":"# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432\nwith sns.plotting_context(\"notebook\"), sns.axes_style(\"whitegrid\"):\n    sns.displot(df['bki_request_cnt'],bins = 20,color='red')","5078459f":"sns.boxplot(data=df['bki_request_cnt'], palette=\"Blues\", width=0.3);","5c683365":"# \u041b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u0443\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435\nwith sns.plotting_context(\"notebook\"), sns.axes_style(\"whitegrid\"):\n    sns.displot(np.log((df['bki_request_cnt'])+1), bins = 20, color='red')","ee930280":"sns.boxplot(data=np.log((df['bki_request_cnt'])+1), palette=\"Blues\", width=0.3);","7f7bba59":"# \u0412\u044b\u0432\u043e\u0434\u044b: \u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043b\u043e\u0433\u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0435, \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u043d\u0435 \u043c\u043d\u043e\u0433\u043e. \n# \u041b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u0443\u0435\u043c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0432 \u043e\u0431\u0449\u0435\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u0435\ndf['bki_request_cnt'] = np.log(df['bki_request_cnt'] + 1)\ndf.head(3)","7b67f271":"# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432\nwith sns.plotting_context(\"notebook\"), sns.axes_style(\"whitegrid\"):\n    sns.displot(df['income'],bins = 50, color='red')","cd2d5d79":"sns.boxplot(data=df['income'], palette=\"Blues\", width=0.3);","36ccfbcf":"# \u041b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u0443\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435\nwith sns.plotting_context(\"notebook\"), sns.axes_style(\"whitegrid\"):\n    sns.displot(np.log((df['income'])+1), bins = 20, color='red')","21e9fa8a":"sns.boxplot(data=np.log((df['income'])+1), palette=\"Blues\", width=0.3);","f68b8e58":"# \u0412\u044b\u0432\u043e\u0434\u044b: \u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043b\u043e\u0433\u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0435, \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u043c\u043d\u043e\u0433\u043e. \n# \u041b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u0443\u0435\u043c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0432 \u043e\u0431\u0449\u0435\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u0435\ndf['income'] = np.log(df['income'] + 1)\ndf.head(3)","bb44d76a":"# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432\nwith sns.plotting_context(\"notebook\"), sns.axes_style(\"whitegrid\"):\n    sns.displot(df['sex'],bins = 50, color='red')\n# \u0412\u044b\u0432\u043e\u0434\u044b: \u0416\u0435\u043d\u0449\u0438\u043d\u044b \u043f\u043e\u0434\u0430\u044e\u0442 \u0437\u0430\u044f\u0432\u043a\u0443 \u043d\u0430 \u043a\u0440\u0435\u0434\u0438\u0442 \u0447\u0430\u0449\u0435.","1a7bb25b":"# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432\nwith sns.plotting_context(\"notebook\"), sns.axes_style(\"whitegrid\"):\n    sns.displot(df['car'],bins = 50, color='red')\n# \u0412\u044b\u0432\u043e\u0434\u044b: \u0423 \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u0430 \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u043e\u0432 \u043d\u0435\u0442 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f.","ff43956b":"# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432\nwith sns.plotting_context(\"notebook\"), sns.axes_style(\"whitegrid\"):\n    sns.displot(df['car_type'],bins = 50, color='red')\n# \u0412\u044b\u0432\u043e\u0434\u044b: \u0423 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0438\u043c\u0435\u044e\u0449\u0438\u0445 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044c \u0443 \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u0430 \u043e\u043d \u043e\u0442\u0435\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439","0574e143":"# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432\nwith sns.plotting_context(\"notebook\"), sns.axes_style(\"whitegrid\"):\n    sns.displot(df['good_work'], bins=2, color='red')\n# \u0412\u044b\u0432\u043e\u0434\u044b: \u0423 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u043c \u043d\u0435\u0442 \u0445\u043e\u0440\u043e\u0448\u0435\u0439 \u0440\u0430\u0431\u043e\u0442\u044b","982ed9fd":"# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432\nwith sns.plotting_context(\"notebook\"), sns.axes_style(\"whitegrid\"):\n    sns.displot(df['foreign_passport'], bins=2, color='red')\n# \u0412\u044b\u0432\u043e\u0434\u044b: \u0423 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u043c \u043d\u0435\u0442 \u0437\u0430\u0433\u0440\u0430\u043d\u0438\u0447\u043d\u043e\u0433\u043e \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430","4e0d6131":"# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f\nwith sns.plotting_context(\"notebook\"), sns.axes_style(\"whitegrid\"):\n    sns.displot(df['education'], bins=2, color='red')","7c74391c":"# \u0418\u0437 \u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0432\u0438\u0434\u0438\u043c, \n# \u0447\u0442\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0432 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e\u0431 \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432. \n\n# \u041e\u0442\u0441\u0443\u0442\u0441\u0432\u0438\u0435 \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0432\u0430\u0436\u043d\u044b\u043c \u0444\u0430\u043a\u0442\u043e\u0440\u043e\u043c, \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0431\u0438\u043d\u0430\u0440\u043d\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e\ndf['education_nan'] = pd.isna(df['education']).astype('uint8')\n\n# \u0417\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u0430\u043c\u044b\u043c \u0440\u0430\u0441\u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0435\u043d\u044b\u043c \u0448\u043a\u043e\u043b\u044c\u043d\u044b\u043c 'SCH'\ndf['education'] = df['education'].fillna('SCH')\n\n# TODO - \u043d\u0430\u0439\u0442\u0438 \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0447\u0435\u0440\u0435\u0437 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438","b51dcf9c":"df.head(3)","2653f17e":"# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0448\u043b\u044b\u0445 \u0437\u0430\u044f\u0432\u043e\u043a\nwith sns.plotting_context(\"notebook\"), sns.axes_style(\"whitegrid\"):\n    sns.displot(df['region_rating'],  color='red')","e0777b9c":"sns.boxplot(data=df['region_rating'], palette=\"Blues\", width=0.3); ","fbb5217c":"# \u041b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u0443\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435\nwith sns.plotting_context(\"notebook\"), sns.axes_style(\"whitegrid\"):\n    sns.displot(np.log((df['region_rating'])+1), bins = 20, color='red')","3cae6573":"sns.boxplot(data=np.log((df['region_rating'])+1), palette=\"Blues\", width=0.3);","ae471afe":"# \u0412\u044b\u0432\u043e\u0434\u044b: \u0412\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0440\u0430\u0437\u0431\u0438\u0442\u044b \u043d\u0430 7 \u0433\u0440\u0443\u043f\u043f, \u0432 \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438 \u043d\u0435\u0442 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438","31a14efc":"# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0448\u043b\u044b\u0445 \u0437\u0430\u044f\u0432\u043e\u043a\nwith sns.plotting_context(\"notebook\"), sns.axes_style(\"whitegrid\"):\n    sns.displot(df['home_address'], bins=3, color='red')","5060bf76":"sns.boxplot(data=df['home_address'], palette=\"Blues\", width=0.3); ","24bcd1c7":"# \u0412\u044b\u0432\u043e\u0434\u044b: \u0412\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0440\u0430\u0437\u0431\u0438\u0442\u044b \u043d\u0430 3 \u0433\u0440\u0443\u043f\u043f\u044b, \u0432 \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438 \u043d\u0435\u0442 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438","4006baef":"# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0448\u043b\u044b\u0445 \u0437\u0430\u044f\u0432\u043e\u043a\nwith sns.plotting_context(\"notebook\"), sns.axes_style(\"whitegrid\"):\n    sns.displot(df['work_address'], bins=3, color='red')","1e595d07":"sns.boxplot(data=df['work_address'], palette=\"Blues\", width=0.3); ","af616997":"# \u0412\u044b\u0432\u043e\u0434\u044b: \u0412\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0440\u0430\u0437\u0431\u0438\u0442\u044b \u043d\u0430 3 \u0433\u0440\u0443\u043f\u043f\u044b, \u0432 \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438 \u043d\u0435\u0442 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438","96e7af97":"# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0448\u043b\u044b\u0445 \u0437\u0430\u044f\u0432\u043e\u043a\nwith sns.plotting_context(\"notebook\"), sns.axes_style(\"whitegrid\"):\n    sns.displot(df['sna'], bins=4, color='red')","570f344c":"sns.boxplot(data=df['sna'], palette=\"Blues\", width=0.3);","ff7a2d67":"# \u0412\u044b\u0432\u043e\u0434\u044b: \u0412\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0440\u0430\u0437\u0431\u0438\u0442\u044b \u043d\u0430 4 \u0433\u0440\u0443\u043f\u043f\u044b, \u0432 \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438 \u043d\u0435\u0442 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438","725e0c8b":"# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0448\u043b\u044b\u0445 \u0437\u0430\u044f\u0432\u043e\u043a\nwith sns.plotting_context(\"notebook\"), sns.axes_style(\"whitegrid\"):\n    sns.displot(df['first_time'],bins=4, color='red')","94af790c":"sns.boxplot(data=df['first_time'], palette=\"Blues\", width=0.3);","2dabaa09":"# \u0412\u044b\u0432\u043e\u0434\u044b: \u0412\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0440\u0430\u0437\u0431\u0438\u0442\u044b \u043d\u0430 4 \u0433\u0440\u0443\u043f\u043f\u044b, \u0432 \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438 \u043d\u0435\u0442 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438","b6743b7d":"# \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u0444\u043e\u0440\u043c\u0430\u0442 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\ndf.app_date = pd.to_datetime(df.app_date, format='%d%b%Y')","2a8aeea0":"# \u0421\u0440\u0435\u0434\u043d\u0435\u0435 \u0447\u0438\u0441\u043b\u043e \u0434\u0435\u0444\u043e\u043b\u0442\u043e\u0432 \u043f\u043e \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u043c\u0443 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0443 \u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u0443\u0435\u0442 \u0441 \u043c\u0435\u0441\u044f\u0446\u0435\u043c \u043f\u043e\u0434\u0430\u0447\u0438 \u0437\u0430\u044f\u0432\u043a\u0438\nplt.style.use('seaborn-paper')\nplt.subplots(figsize=(12, 4))\ncolor_text = plt.get_cmap('PuBu')(0.85)\nsns.barplot(data=df[df['Train']==1], x=df.loc[df['Train']==1,'app_date'].dt.month, y='default', palette=\"PuBu\");","bc1d1f58":"# \u0412\u044b\u044f\u0441\u043d\u044f\u0435\u043c \u043d\u0430\u0447\u0430\u043b\u043e \u0438 \u043a\u043e\u043d\u0435\u0446 \u043f\u0435\u0440\u0438\u043e\u0434\u0430 \u043d\u0430\u0448\u0435\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 - \u044d\u0442\u043e 1 \u044f\u043d\u0432\u0430\u0440\u044f \u0438 30 \u0430\u043f\u0440\u0435\u043b\u044f 2014 \u0433\u043e\u0434\u0430\nstart = df.app_date.min()\nend = df.app_date.max()\nstart,end\n\n# \u0412\u0432\u043e\u0434\u0438\u043c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a - \u043d\u043e\u043c\u0435\u0440 \u0434\u043d\u044f \u0441 1 \u044f\u043d\u0432\u0430\u0440\u044f\ndf['days'] = (df.app_date - start).dt.days.astype('int')","815fdf5d":"df.head(3)","67faf1f1":"sns.heatmap(df[num_cols].corr().abs(), vmin=0, vmax=1)\n\n# \u0412\u044b\u0432\u043e\u0434: \u0421\u0438\u043b\u044c\u043d\u043e \u0441\u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u043d\u0435\u0442.","1dab3e25":"temp_df = df[df['Train']==1]\n\nimp_num = pd.Series(f_classif(temp_df[num_cols], temp_df['default'])[0], index = num_cols)\nimp_num.sort_values(inplace = True)\nimp_num.plot(kind = 'barh')","e7bcbf02":"# \u0412\u044b\u0432\u043e\u0434: \u0421\u0430\u043c\u044b \u0437\u043d\u0430\u0447\u0438\u043c\u044b\u0439 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c \u043e\u0446\u0435\u043d\u043a\u0430 \u043f\u043b\u0430\u0442\u0435\u043b\u044c\u0449\u0438\u043a\u0430 \u0411\u041a\u0418 (score_bki) ","187beec0":"label_encoder = LabelEncoder()\ndf['education_l'] = label_encoder.fit_transform(df['education'])\n\n# \u043f\u0430\u0440\u0430\u043b\u0435\u043b\u044c\u043d\u043e \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u0438\u043c \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0438 \u043f\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043c \u0438\u0445 \u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439 \u0444\u043e\u0440\u043c\u0430\u0442\n# \u0434\u043b\u044f \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043c\u044b \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c LabelEncoder\nlabel_encoder = LabelEncoder()\nfor column in bin_cols:\n    df[column] = label_encoder.fit_transform(df[column])\n    \n# \u0442\u0443\u0442 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043f\u043e\u0442\u0435\u043d\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0434\u0430\u0442\u0430\u043b\u0438\u043a\u0438, \u043d\u043e \u043c\u044b \u043f\u043e\u043a\u0430 \u043d\u0435 \u043f\u0440\u0438\u0434\u0443\u043c\u0430\u043b\u0438 \u043a\u0430\u043a \u044d\u0442\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c,\n# \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u0434\u0430\u043b\u0435\u0435 \u043f\u043e \u044d\u0442\u0438\u043c \u043c\u0435\u0442\u043a\u0430\u043c \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u043d\u043e\u0432\u044b\u0435 \u0444\u0438\u0447\u0438 \u043f\u043e get_dummies\n\nall_cat_and_bin_cols = cat_cols+bin_cols\nall_cat_and_bin_cols.remove('education')\nall_cat_and_bin_cols.append('education_l')\nprint(all_cat_and_bin_cols)\n\ntemp_df = df[df['Train']==1]\nimp_cat = pd.Series(mutual_info_classif(temp_df[all_cat_and_bin_cols], temp_df['default'], discrete_features =True), index = all_cat_and_bin_cols)\nimp_cat.sort_values(inplace = True)\nimp_cat.plot(kind = 'barh', title = '\u0417\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u044c \u0431\u0438\u043d. \u0438 \u043a\u0430\u0442\u0435\u0433\u043e\u0440. \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u043f\u043e Mutual information test')","f7b00532":"# \u0412\u044b\u0432\u043e\u0434: \u0421\u0430\u043c\u044b\u0435 \u0437\u043d\u0430\u0447\u0438\u043c\u044b\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u0441\u0432\u044f\u0437\u044c \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430 \u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c\u0438 \u0431\u0430\u043d\u043a\u0430 (sna) \n# \u0438 \u0434\u0430\u0432\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0435 (first_time)","775bdcfd":"# \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u043c \u043c\u0435\u0442\u043e\u0434 OneHotLabels \u0447\u0435\u0440\u0435\u0437 get_dummies \u0434\u043b\u044f \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445\ndf=pd.get_dummies(df, prefix=cat_cols, columns=cat_cols)","e4fc1b09":"df.head(3)","283d7cca":"# \u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0430 \u0432 \u0445\u043e\u0434\u0435 \u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430","897858cb":"# \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043d\u0435\u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u0435\u0432\ndf.drop(['app_date', 'education_l'], axis=1, inplace=True)\ndf.head(3)","d0f5e952":"df.info()","2ec7e3f0":"train_data = df.query('Train == 1').drop(['Train', 'client_id'], axis=1)\ntest_data = df.query('Train == 0').drop(['Train', 'client_id'], axis=1)\n\ny = train_data['default'].values            # \u0446\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f\nX = train_data.drop(['default'], axis=1)","b1dd3f43":"# \u0412\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0435 train_test_split \u0434\u043b\u044f \u0440\u0430\u0437\u0431\u0438\u0432\u043a\u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n# \u0412\u044b\u0434\u0435\u043b\u0438\u043c 20% \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e (\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 test_size)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, \n                                                    random_state=RANDOM_SEED)","ff4da1f6":"# \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c\ntest_data.shape, train_data.shape, X.shape, X_train.shape, X_test.shape","a2bf368e":"model = LogisticRegression(solver='liblinear')\nmodel.fit(X_train, y_train)\n\ny_pred_prob = model.predict_proba(X_test)[:,1]\ny_pred = model.predict(X_test)","1b8058e6":"# \u0420\u0438\u0441\u0443\u0435\u043c ROC \u043a\u0440\u0438\u0432\u0443\u044e\nprobs = model.predict_proba(X_test)\nprobs = probs[:,1]\n\nfpr, tpr, threshold = roc_curve(y_test, probs)\nroc_auc = roc_auc_score(y_test, probs)\n\nplt.figure()\nplt.plot([0, 1], label='Baseline', linestyle='--')\nplt.plot(fpr, tpr, label = 'Regression')\nplt.title('Logistic Regression ROC AUC = %0.3f' % roc_auc)\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.legend(loc = 'lower right')\nplt.show()","6c939f00":"confusion_matrix(y_test, y_pred)","9e21de2b":"# Defining a function for visualization of confusion matrix.\ndef show_confusion_matrix(y_true, y_pred):\n    color_text = plt.get_cmap('PuBu')(0.95)\n    class_names = ['Default', 'Non-Default']\n    cm = confusion_matrix(y_true, y_pred)\n    cm[0,0], cm[1,1] = cm[1,1], cm[0,0]\n    df = pd.DataFrame(cm, index=class_names, columns=class_names)\n    \n    fig, ax = plt.subplots(figsize=(6, 6))\n    ax.set(xticks=np.arange(cm.shape[1]), yticks=np.arange(cm.shape[0]), title=\"Confusion Matrix\")\n    ax.title.set_fontsize(15)\n    sns.heatmap(df, square=True, annot=True, fmt=\"d\", linewidths=1, cmap=\"PuBu\")\n    plt.setp(ax.get_yticklabels(), rotation=0, ha=\"right\", rotation_mode=\"anchor\", fontsize=12)\n    plt.setp(ax.get_xticklabels(), rotation=0, ha=\"center\", rotation_mode=\"anchor\", fontsize=12)\n    ax.set_ylabel('Predicted Values', fontsize=14, color = color_text)\n    ax.set_xlabel('Real Values', fontsize=14, color = color_text)\n    b, t = plt.ylim()\n    plt.ylim(b+0.5, t-0.5)\n    fig.tight_layout()\n    plt.show()\n\n\nshow_confusion_matrix(y_test, y_pred)","a8e4f99b":"def all_metrics(y_true, y_pred, y_pred_prob):\n    dict_metric = {}\n    P = np.sum(y_true==1)\n    N = np.sum(y_true==0)\n    TP = np.sum((y_true==1)&(y_pred==1))\n    TN = np.sum((y_true==0)&(y_pred==0))\n    FP = np.sum((y_true==0)&(y_pred==1))\n    FN = np.sum((y_true==1)&(y_pred==0))\n    \n    dict_metric['Positive, P'] = [P,'default']\n    dict_metric['Negative, N'] = [N,'non-default']\n    dict_metric['True Positive, TP'] = [TP,'correctly identified default']\n    dict_metric['True Negative, TN'] = [TN,'correctly identified non-default']\n    dict_metric['False Positive, FP'] = [FP,'incorrectly identified default']\n    dict_metric['False Negative, FN'] = [FN,'incorrectly identified non-default']\n    dict_metric['Accuracy'] = [accuracy_score(y_true, y_pred),'Accuracy=(TP+TN)\/(P+N)']\n    dict_metric['Precision'] = [precision_score(y_true, y_pred),'Precision = TP\/(TP+FP)'] \n    dict_metric['Recall'] = [recall_score(y_true, y_pred),'Recall = TP\/P']\n    dict_metric['F1-score'] = [f1_score(y_true, y_pred),'Harmonical mean of Precision \u0438 Recall']\n    dict_metric['ROC_AUC'] = [roc_auc_score(y_true, y_pred_prob),'ROC AUC Score']    \n\n    temp_df = pd.DataFrame.from_dict(dict_metric, orient='index', columns=['Value', 'Description'])\n    display(temp_df)   \n\nall_metrics(y_test, y_pred, y_pred_prob)","2690cbf5":"# \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c GridSearch \u043d\u0430 \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u043e\u043c \u043a\u043e\u043b-\u0432\u0435 \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0439 max_iter=100 \u0438 \u0441 \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u0434\u0435\u043b\u044c\u0442\u043e\u0439 \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u0430 tol1e-3\n# \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043c\u043e\u0434\u0435\u043b\u0438 \u0432 \u043f\u0435\u0440\u0432\u043e\u043c \u043f\u0440\u0438\u0431\u043b\u0438\u0436\u0435\u043d\u0438\u0438\nmodel = LogisticRegression(random_state=RANDOM_SEED)\n\niter_ = 100\nepsilon_stop = 1e-3\n\nparam_grid = [\n    {'penalty': ['l1'], \n     'solver': ['liblinear', 'lbfgs'], \n     'class_weight':['none', 'balanced'], \n     'multi_class': ['auto','ovr'], \n     'max_iter':[iter_],\n     'tol':[epsilon_stop]},\n    {'penalty': ['l2'], \n     'solver': ['newton-cg', 'lbfgs', 'liblinear', 'sag', 'saga'], \n     'class_weight':['none', 'balanced'], \n     'multi_class': ['auto','ovr'], \n     'max_iter':[iter_],\n     'tol':[epsilon_stop]},\n    {'penalty': ['none'], \n     'solver': ['newton-cg', 'lbfgs', 'sag', 'saga'], \n     'class_weight':['none', 'balanced'], \n     'multi_class': ['auto','ovr'], \n     'max_iter':[iter_],\n     'tol':[epsilon_stop]},\n]\ngridsearch = GridSearchCV(model, param_grid, scoring='f1', n_jobs=-1, cv=5)\ngridsearch.fit(X_train, y_train)\nmodel = gridsearch.best_estimator_\n##\u043f\u0435\u0447\u0430\u0442\u0430\u0435\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b\nbest_parameters = model.get_params()\nfor param_name in sorted(best_parameters.keys()):\n        print('\\t%s: %r' % (param_name, best_parameters[param_name]))\n    ##\u043f\u0435\u0447\u0430\u0442\u0430\u0435\u043c \u043c\u0435\u0442\u0440\u0438\u043a\u0438\npreds = model.predict(X_test)\nprint('Accuracy: %.4f' % accuracy_score(y_test, preds))\nprint('Precision: %.4f' % precision_score(y_test, preds))\nprint('Recall: %.4f' % recall_score(y_test, preds))\nprint('F1: %.4f' % f1_score(y_test, preds))","f2769bd4":"'''\nC: 1.0\n\tclass_weight: 'balanced'\n\tdual: False\n\tfit_intercept: True\n\tintercept_scaling: 1\n\tl1_ratio: None\n\tmax_iter: 50\n\tmulti_class: 'auto'\n\tn_jobs: None\n\tpenalty: 'none'\n\trandom_state: 42\n\tsolver: 'newton-cg'\n\ttol: 0.001\n\tverbose: 0\n\twarm_start: False\nAccuracy: 0.6711\nPrecision: 0.2268\nRecall: 0.6875\nF1: 0.3410\n'''","3b36f382":"# \u0432\u0442\u043e\u0440\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0430 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u0445 \u043f\u043e\u0441\u043b\u0435 \u043f\u0435\u0440\u0432\u043e\u0439 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438\nmodel = LogisticRegression(C=1, \n                           class_weight= 'balanced', \n                           dual= False, \n                           fit_intercept= True, \n                           intercept_scaling= 1, \n                           l1_ratio= None, \n                           multi_class= 'auto', \n                           n_jobs= None, \n                           penalty= 'l2', \n                           solver='liblinear', \n                           verbose= 0, \n                           warm_start= False)\n\nmodel.fit(X_train, y_train)\n\ny_pred_prob = model.predict_proba(X_test)[:,1]\ny_pred = model.predict(X_test)","56e5db96":"confusion_matrix(y_test, y_pred)","3710c5cd":"show_confusion_matrix(y_test, y_pred)","d0eb438f":"all_metrics(y_test, y_pred, y_pred_prob)","e449b2cd":"# \u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c ROC \u043a\u0440\u0438\u0432\u0443\u044e\nprobs = model.predict_proba(X_test)\nprobs = probs[:,1]\n\nfpr, tpr, threshold = roc_curve(y_test, probs)\nroc_auc = roc_auc_score(y_test, probs)\n\nplt.figure()\nplt.plot([0, 1], label='Baseline', linestyle='--')\nplt.plot(fpr, tpr, label = 'Regression')\nplt.title('Logistic Regression ROC AUC = %0.3f' % roc_auc)\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.legend(loc = 'lower right')\nplt.show()","72d8bf03":"all_metrics(y_test, y_pred, y_pred_prob)","3f2ba9a6":"train_data = df.query('Train == 1').drop(['Train', 'client_id'], axis=1)\ntest_data = df.query('Train == 0').drop(['Train', 'client_id'], axis=1)","bcc5ea0f":"X_train=train_data.drop(['default'], axis=1)\ny_train = train_data.default.values\nX_test = test_data.drop(['default'], axis=1)","6e5d568e":"# \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c\ntest_data.shape, train_data.shape, X_train.shape, y_train.shape, X_test.shape","105a5fa2":"model = LogisticRegression(C=7, \n                           penalty='l2', \n                           multi_class = 'ovr', \n                           class_weight='balanced', \n                           solver='liblinear', \n                           random_state=RANDOM_SEED,\n                           max_iter=1000)\n\nmodel.fit(X_train, y_train)","b2b4413f":"y_pred_prob = model.predict_proba(X_test)[:,1]\n\n\nsubmit = pd.DataFrame(df_test.client_id)\nsubmit['default']=y_pred_prob\nsubmit.to_csv('submission.csv', index=False)","906b78fc":"### Submission","0b51d52c":"### 4.15 Sna - \u0441\u0432\u044f\u0437\u044c \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430 \u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c\u0438 \u0431\u0430\u043d\u043a\u0430","68f4a24e":"### 4.11 Education - \u0443\u0440\u043e\u0432\u0435\u043d\u044c \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f","e991d433":"### \u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438","b7eb32f4":"### 6. \u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438","5fbd6352":"### \u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435","777ecc48":"### 4.10 Foreign_passport - \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0437\u0430\u0433\u0440\u0430\u043d\u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430","b3e968da":"### 4.16 First_time - \u0434\u0430\u0432\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0435","561c2850":"### 4.5 Income - \u0434\u043e\u0445\u043e\u0434 \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430","f0cdfb16":"### \u0417\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u044c \u043d\u0435\u043f\u0440\u0435\u0440\u044b\u0432\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u043f\u043e ANOVA F test","358b7759":"### 4.8 Car_type - \u0444\u043b\u0430\u0433 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f \u0438\u043d\u043e\u043c\u0430\u0440\u043a\u0438","77fb7bc1":"### \u043d\u0435 \u043f\u043e\u043d\u0438\u043c\u0430\u044e \u043e\u0448\u0438\u0431\u043a\u0438. \u0438\u0441\u043a\u0430\u0442\u044c \u0440\u0435\u0448\u0435\u043d\u0438\u0435, \u0432\u044b\u043a\u043b\u044e\u0447\u0438\u043b warnings. \u043d\u0435 \u043f\u043e\u043c\u043e\u0433\u0430\u0435\u0442","1ae91d43":"### \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u043f\u043e\u043b\u0435\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430:\n* client_id - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n* education - \u0443\u0440\u043e\u0432\u0435\u043d\u044c \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f\n* sex - \u043f\u043e\u043b \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430\n* age - \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430\n* car - \u0444\u043b\u0430\u0433 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f\n* car_type - \u0444\u043b\u0430\u0433 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f \u0438\u043d\u043e\u043c\u0430\u0440\u043a\u0438\n* decline_app_cnt - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0448\u043b\u044b\u0445 \u0437\u0430\u044f\u0432\u043e\u043a\n* good_work - \u0444\u043b\u0430\u0433 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u201c\u0445\u043e\u0440\u043e\u0448\u0435\u0439\u201d \u0440\u0430\u0431\u043e\u0442\u044b\n* bki_request_cnt - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u0411\u041a\u0418\n* home_address - \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0437\u0430\u0442\u043e\u0440 \u0434\u043e\u043c\u0430\u0448\u043d\u0435\u0433\u043e \u0430\u0434\u0440\u0435\u0441\u0430\n* work_address - \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0437\u0430\u0442\u043e\u0440 \u0440\u0430\u0431\u043e\u0447\u0435\u0433\u043e \u0430\u0434\u0440\u0435\u0441\u0430\n* income - \u0434\u043e\u0445\u043e\u0434 \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430\n* foreign_passport - \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0437\u0430\u0433\u0440\u0430\u043d\u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430\n* sna - \u0441\u0432\u044f\u0437\u044c \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430 \u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c\u0438 \u0431\u0430\u043d\u043a\u0430\n* first_time - \u0434\u0430\u0432\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0435\n* score_bki - \u0441\u043a\u043e\u0440\u0438\u043d\u0433\u043e\u0432\u044b\u0439 \u0431\u0430\u043b\u043b \u043f\u043e \u0434\u0430\u043d\u043d\u044b\u043c \u0438\u0437 \u0411\u041a\u0418\n* region_rating - \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0440\u0435\u0433\u0438\u043e\u043d\u0430\n* app_date - \u0434\u0430\u0442\u0430 \u043f\u043e\u0434\u0430\u0447\u0438 \u0437\u0430\u044f\u0432\u043a\u0438\n* default - \u0444\u043b\u0430\u0433 \u0434\u0435\u0444\u043e\u043b\u0442\u0430 \u043f\u043e \u043a\u0440\u0435\u0434\u0438\u0442\u0443","123be1e1":"### \u041c\u0430\u0442\u0440\u0438\u0446\u0430 \u043e\u0448\u0438\u0431\u043e\u043a","a7ea49eb":"**\u0412\u044b\u0432\u043e\u0434\u044b \u043f\u043e \u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u043c\u0443 \u0430\u043d\u0430\u043b\u0438\u0437\u0443:** \n\u0412 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435 73799 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432, \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 - 36349. \u0412\u0441\u0435\u0433\u043e \u0434\u0430\u043d\u043d\u044b\u0435 \u043e 110148 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u0445. \u0412\u0441\u0435\u0433\u043e 16 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445, \u0438\u0437 \u043d\u0438\u0445 1 - \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u0440\u044f\u0434, 5 \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0445, 4 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u0438 6 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445. \u0412\u0441\u0435 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 education. client_id \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0435 \u043d\u0435\u0441\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438. \u0412 \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u0445 \u043d\u0430\u0448\u0435 \u0446\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f default \u0438 \u0438\u0441\u043a\u0443\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 Train.","6c13a897":"### 4.14 Work_address - \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0437\u0430\u0442\u043e\u0440 \u0440\u0430\u0431\u043e\u0447\u0435\u0433\u043e \u0430\u0434\u0440\u0435\u0441\u0430","c196b5cf":"### 5. \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u043a \u043c\u0430\u0448\u0438\u043d\u043d\u043e\u043c\u0443 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044e","a6e81b3d":"# \u041f\u0440\u043e\u0435\u043a\u0442 5 \u041a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440 \u0433\u043e\u0432\u043e\u0440\u0438\u0442 \"\u043d\u0435\u0442\"","38909612":"### 4.2 Decline_app_cnt - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0448\u043b\u044b\u0445 \u0437\u0430\u044f\u0432\u043e\u043a","f4418574":"### 2. \u0418\u043c\u043f\u043e\u0440\u0442 \u0434\u0430\u043d\u043d\u044b\u0445","13a60e49":"\u0412\u044b\u0432\u043e\u0434\u044b: \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u044c \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u0432\u044b\u0440\u043e\u0441\u043b\u0430, \u043e\u043d \u043b\u0443\u0447\u0448\u0435 \u0432\u0435\u0434\u0435\u0442 \u0441\u0435\u0431\u044f \u043d\u0430 \u043d\u0435\u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 ","170b3453":"### 4.12 Region_rating - \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0440\u0435\u0433\u0438\u043e\u043d\u0430","4f57d689":"### \u0427\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435","cd3c3460":"### 4. \u0410\u043d\u0430\u043b\u0438\u0437 \u043f\u043e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u043c","b59c4dae":"### 4.9 Good_work - \u0444\u043b\u0430\u0433 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u201c\u0445\u043e\u0440\u043e\u0448\u0435\u0439\u201d \u0440\u0430\u0431\u043e\u0442\u044b","a47ef777":"### \u041f\u043e\u0438\u0441\u043a \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u043c\u043e\u0434\u0435\u043b\u0438, \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432","b54fc723":"### \u0411\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435","70553e4f":"## \u0410\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440 \u041d\u0438\u0449\u0438\u043a","9aa77969":"### 4.7 Car - \u0444\u043b\u0430\u0433 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f","c08a0fa6":"### \u0412\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u0440\u044f\u0434","63d78920":"### 4.4 Bki_request_cnt - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u0411\u041a\u0418","9f883d58":"### 3. \u041f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445","84e14dac":"### 4.1 Age - \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430","c1d8fc1f":"### 4.6 Sex - \u043f\u043e\u043b \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430","71d7ee53":"### \u0420\u0430\u0437\u0431\u0438\u0432\u0430\u0435\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u043d\u0430 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0439 \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439, \u0440\u0430\u0437\u0431\u0438\u0432\u0430\u0435\u043c \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435","5a086017":"### \u041e\u0446\u0435\u043d\u0438\u043c \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044e \u041f\u0438\u0440\u0441\u043e\u043d\u0430 \u0434\u043b\u044f \u043d\u0435\u043f\u0440\u0435\u0440\u044b\u0432\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445:","96fcc407":"### 1. \u0418\u043c\u043f\u043e\u0440\u0442 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a","c028e595":"### \u041e\u0431\u0443\u0447\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c, \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0438 \u0441\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u043c \u0441 \u0442\u0435\u0441\u0442\u043e\u043c","e5b47c88":"\u0412\u044b\u0432\u043e\u0434\u044b:\u043c\u043e\u0434\u0435\u043b\u044c, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043c\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u0438, \u043e\u0447\u0435\u043d\u044c \u043f\u043b\u043e\u0445\u0430\u044f, \u043d\u0435\u0441\u043c\u043e\u0442\u0440\u044f \u043d\u0430 \u0442\u043e, \u0447\u0442\u043e \u0446\u0435\u043b\u0435\u0432\u0430\u044f \u043c\u0435\u0442\u0440\u0438\u043a\u0430 ROC-AUC \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0432\u044b\u0441\u043e\u043a\u0430\u044f (=0.744).\n\u041f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e:\n\n\u0418\u0437 \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u043e\u0448\u0438\u0431\u043e\u043a \u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u043c\u044b \u043f\u043e\u0447\u0442\u0438 \u043d\u0435 \u0443\u0433\u0430\u0434\u044b\u0432\u0430\u0435\u043c \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 (40 \u0438\u0437 1787). \u041e\u0431 \u044d\u0442\u043e\u043c \u0442\u0430\u043a\u0436\u0435 \u0441\u0432\u0438\u0434\u0435\u0442\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043c\u0435\u0442\u0440\u0438\u043a\u0430 \u043f\u043e\u043b\u043d\u043e\u0442\u0430 recall = 0.021, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u044d\u0442\u043e\u0442 \u043c\u043e\u043c\u0435\u043d\u0442. \u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u0432\u0441\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u044b \u043f\u043e\u043f\u0430\u043b\u0438 \u0432 \u043e\u0448\u0438\u0431\u043a\u0443 \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u0440\u043e\u0434\u0430, \u0430 \u044d\u0442\u043e \u043e\u0447\u0435\u043d\u044c \u043f\u043b\u043e\u0445\u043e \u0434\u043b\u044f \u0431\u0430\u043d\u043a\u0430, \u0442\u0430\u043a \u043a\u0430\u043a \u043c\u044b \u0431\u0443\u0434\u0435\u043c \u0432\u044b\u0434\u0430\u0432\u0430\u0442\u044c \u043a\u0440\u0435\u0434\u0438\u0442\u044b \u043b\u044e\u0434\u044f\u043c \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u0445 \u043d\u0435 \u0441\u043c\u043e\u0433\u0443\u0442 \u0432\u0435\u0440\u043d\u0443\u0442\u044c - \u0440\u0438\u0441\u043a \u043f\u043e\u0442\u0435\u0440\u044f\u0442\u044c \u0432\u0441\u0435 \u0434\u0435\u043d\u044c\u0433\u0438.","52bda54a":"### 4.13 \u041dome_address - \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0437\u0430\u0442\u043e\u0440 \u0434\u043e\u043c\u0430\u0448\u043d\u0435\u0433\u043e \u0430\u0434\u0440\u0435\u0441\u0430","ba4dfd19":"### 4.3 Score_bki - \u0441\u043a\u043e\u0440\u0438\u043d\u0433\u043e\u0432\u044b\u0439 \u0431\u0430\u043b\u043b \u043f\u043e \u0434\u0430\u043d\u043d\u044b\u043c \u0438\u0437 \u0411\u041a\u0418"}}