{"cell_type":{"70188443":"code","15dc8101":"code","58cfb27f":"code","93b5971a":"code","4d31ccea":"code","05c65c2c":"code","2065962b":"code","477ce247":"code","4b00586e":"code","62c7abdf":"code","7731347d":"code","6f6a9fe1":"code","c9160295":"code","c52199e3":"code","cc1db85f":"code","05b16136":"code","bf561a47":"code","f0c52194":"code","b0207361":"code","9c7ed1de":"code","249d4e18":"code","e7ad1729":"code","28508ced":"code","9beefc07":"code","d80a63b0":"code","199f87aa":"code","184fdd1a":"code","822749d2":"code","b1005437":"code","77d82f57":"code","20bebd75":"code","b83d685c":"code","e0d04937":"code","62c4fb29":"code","5340d817":"code","1f0769d0":"markdown","061fd886":"markdown","05e9241b":"markdown","0304452a":"markdown","e060bff7":"markdown","f14f9113":"markdown","152414e5":"markdown","8cc5eec7":"markdown","3128799e":"markdown","138edc25":"markdown","4b368e60":"markdown"},"source":{"70188443":"import os\nimport glob\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix, classification_report\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.models import Sequential, Model\nfrom tensorflow.keras.callbacks import Callback, EarlyStopping","15dc8101":"path_train = '..\/input\/aslamerican-sign-language-aplhabet-dataset\/ASL_Alphabet_Dataset\/asl_alphabet_train'\npath_test = '..\/input\/aslamerican-sign-language-aplhabet-dataset\/ASL_Alphabet_Dataset\/asl_alphabet_test'","58cfb27f":"train = list(glob.glob(path_train+'\/**\/*.jpg'))\ntest = list(glob.glob(path_test+'\/*.jpg'))","93b5971a":"def process(file_path):\n    labels = list(map(lambda x:os.path.split(os.path.split(x)[0])[1], file_path))\n    filepath = pd.Series(file_path, name='FilePath').astype(str)\n    labels = pd.Series(labels, name='Label')\n    df = pd.concat([filepath, labels], axis=1)\n    df = df.sample(frac=1).reset_index(drop=True)\n    return df","4d31ccea":"data = process(train)\ndata.head()","05c65c2c":"fig, axes = plt.subplots(nrows=3, ncols=4, figsize=(10, 7),\n                        subplot_kw={'xticks': [], 'yticks': []})\n\nfor i, ax in enumerate(axes.flat):\n    ax.imshow(plt.imread(data.FilePath[i]))\n    ax.set_title(data.Label[i])\nplt.tight_layout()\nplt.show()","2065962b":"plt.figure(figsize=(12, 6))\ncounts = data.Label.value_counts()\nsns.barplot(x=counts.index, y=counts)\nplt.xlabel('Labels')\nplt.ylabel('Count')\nplt.xticks(rotation=50);","477ce247":"train_df, test_df = train_test_split(data, train_size=0.7, random_state=1)","4b00586e":"def gen(pre,train,test):\n    train_datagen = ImageDataGenerator(\n                        preprocessing_function=pre,\n                        validation_split=0.2)\n    test_datagen = ImageDataGenerator(\n                        preprocessing_function=pre)\n    \n    train_gen = train_datagen.flow_from_dataframe(\n        dataframe=train,\n        x_col='FilePath',\n        y_col='Label',\n        target_size=(100,100),\n        class_mode='categorical',\n        batch_size=32,\n        shuffle=True,\n        seed=0,\n        subset='training',\n        rotation_range=30,\n        zoom_range=0.15,\n        width_shift_range=0.2,\n        height_shift_range=0.2,\n        shear_range=0.15,\n        horizontal_flip=True,\n        fill_mode=\"nearest\"\n        )\n    valid_gen = train_datagen.flow_from_dataframe(\n        dataframe=train,\n        x_col='FilePath',\n        y_col='Label',\n        target_size=(100,100),\n        class_mode='categorical',\n        batch_size=32,\n        shuffle=False,\n        seed=0,\n        subset='validation',\n        rotation_range=30,\n        zoom_range=0.15,\n        width_shift_range=0.2,\n        height_shift_range=0.2,\n        shear_range=0.15,\n        horizontal_flip=True,\n        fill_mode=\"nearest\"\n    )\n    test_gen = test_datagen.flow_from_dataframe(\n        dataframe=test,\n        x_col='FilePath',\n        y_col='Label',\n        target_size=(100,100),\n        color_mode='rgb',\n        class_mode='categorical',\n        batch_size=32,\n        shuffle=False\n    )\n    return train_gen, valid_gen, test_gen","62c7abdf":"def func(name_model):\n    pre_model = name_model(input_shape=(100,100, 3),\n                   include_top=False,\n                   weights='imagenet',\n                   pooling='avg')\n    pre_model.trainable = False\n    inputs = pre_model.input\n\n    x = Dense(120, activation='relu')(pre_model.output)\n    x = Dense(120, activation='relu')(x)\n    outputs = Dense(29, activation='softmax')(x)\n\n    model = Model(inputs=inputs, outputs=outputs)\n    model.compile(loss = 'categorical_crossentropy',optimizer='Adam',metrics=['accuracy'])\n    my_callbacks  = [EarlyStopping(monitor='val_loss',\n                              min_delta=0,\n                              patience=1,\n                              mode='auto')]\n    return model, my_callbacks","7731347d":"def plot(history,test_gen,train_gen,model):\n    # Plotting Accuracy, val_accuracy, loss, val_loss\n    fig, ax = plt.subplots(1, 2, figsize=(10, 3))\n    ax = ax.ravel()\n\n    for i, met in enumerate(['accuracy', 'loss']):\n        ax[i].plot(history.history[met])\n        ax[i].plot(history.history['val_' + met])\n        ax[i].set_title('Model {}'.format(met))\n        ax[i].set_xlabel('epochs')\n        ax[i].set_ylabel(met)\n        ax[i].legend(['train', 'val'])\n        \n    # Predict Data Test\n    pred = model.predict(test_gen )\n    pred = np.argmax(pred,axis=1)\n    labels = (train_gen.class_indices)\n    labels = dict((v,k) for k,v in labels.items())\n    pred = [labels[k] for k in pred]\n    \n    # Classification report\n    cm=confusion_matrix(test_df.Label,pred)\n    clr = classification_report(test_df.Label, pred)\n    print(clr)\n    # Display 6 picture of the dataset with their labels\n    fig, axes = plt.subplots(nrows=2, ncols=3, figsize=(12, 8),\n                        subplot_kw={'xticks': [], 'yticks': []})\n\n    for i, ax in enumerate(axes.flat):\n        ax.imshow(plt.imread(test_df.FilePath.iloc[i+1]))\n        ax.set_title(f\"True: {test_df.Label.iloc[i+1]}\\nPredicted: {pred[i+1]}\")\n    plt.tight_layout()\n    plt.show()\n        \n    return history","6f6a9fe1":"def result_test(test,model_use):\n    results = model_use.evaluate(test, verbose=0)\n    \n    print(\"    Test Loss: {:.5f}\".format(results[0]))\n    print(\"Test Accuracy: {:.2f}%\".format(results[1] * 100))\n    \n    return results","c9160295":"from tensorflow.keras.applications import ResNet50\nfrom tensorflow.keras.applications.resnet50 import preprocess_input\nRestNet_pre=preprocess_input\ntrain_gen_RestNet, valid_gen_RestNet, test_gen_RestNet = gen(RestNet_pre,train_df, test_df)","c52199e3":"ResNet50_model, callback=func(ResNet50)","cc1db85f":"history = ResNet50_model.fit(\n    train_gen_RestNet,\n    validation_data=valid_gen_RestNet,\n    epochs=50,\n    callbacks=callback\n)","05b16136":"history_ResNet=plot(history,test_gen_RestNet,train_gen_RestNet,ResNet50_model)","bf561a47":"result_ResNet = result_test(test_gen_RestNet,ResNet50_model)","f0c52194":"from tensorflow.keras.applications import MobileNet\nfrom tensorflow.keras.applications.mobilenet import preprocess_input\nMobileNet_pre=preprocess_input\ntrain_gen_MobileNet, valid_gen_MobileNet, test_gen_MobileNet = gen(MobileNet_pre,train_df,test_df)","b0207361":"MobileNet_model, callback=func(MobileNet)","9c7ed1de":"history_MobileNet = MobileNet_model.fit(\n    train_gen_MobileNet,\n    validation_data=valid_gen_MobileNet,\n    epochs=100,\n    callbacks=callback\n)","249d4e18":"history=plot(history,test_gen_MobileNet,train_gen_MobileNet,MobileNet_model)","e7ad1729":"result_MobileNet = result_test(test_gen_MobileNet,MobileNet_model)","28508ced":"from tensorflow.keras.applications import VGG16\nfrom tensorflow.keras.applications.vgg16 import preprocess_input\n\nvgg_pre=preprocess_input\ntrain_gen_VGG, valid_gen_VGG, test_gen_VGG = gen(vgg_pre,train_df,test_df)","9beefc07":"model_VGG16, callback=func(VGG16)","d80a63b0":"history = model_VGG16.fit(\n    train_gen_VGG,\n    validation_data=valid_gen_VGG,\n    epochs=100,\n    callbacks=callback\n)","199f87aa":"history=plot(history,test_gen_VGG,train_gen_VGG, model_VGG16)","184fdd1a":"result = result_test(test_gen_VGG,model_VGG16)","822749d2":"from tensorflow.keras.applications import Xception\nfrom tensorflow.keras.applications.xception import preprocess_input\nXception_pre=preprocess_input\ntrain_gen_Xception, valid_gen_Xception, test_gen_Xception = gen(Xception_pre,train_df,test_df)","b1005437":"Xception_model, callback=func(Xception)","77d82f57":"history = Xception_model.fit(\n    train_gen_Xception,\n    validation_data=valid_gen_Xception,\n    epochs=100,\n    callbacks=callback\n)","20bebd75":"history_Xception=plot(history,test_gen_Xception,train_gen_Xception, Xception_model)","b83d685c":"result_Xception = result_tresult_Xception = result_test(test_gen_Xception,Xception_model)","e0d04937":"output = pd.DataFrame({'Model':['VGG16','ResNet50','Xception','MobileNet'],\n                      'Accuracy':[result[1], result_ResNet[1], result_Xception[1], result_MobileNet[1]]})","62c4fb29":"output","5340d817":"plt.figure(figsize=(12, 6))\nplots = sns.barplot(x='Model', y='Accuracy', data=output)\nfor bar in plots.patches:\n    plots.annotate(format(bar.get_height(), '.2f'),\n                   (bar.get_x() + bar.get_width() \/ 2,\n                    bar.get_height()), ha='center', va='center',\n                   size=15, xytext=(0, 8),\n                   textcoords='offset points')\n\nplt.xlabel(\"Models\", size=14)\nplt.ylabel(\"Accuracy\", size=14)\nplt.show()","1f0769d0":"* Feel free to download Notebook and do experiments on it.\n* Comments if you find something inappropriate and will improve accordingly.\n* Upvote if you find this notebook useful.","061fd886":"# Xception","05e9241b":"# Load Dataset","0304452a":"# Functions","e060bff7":"# MobileNet","f14f9113":"# ResNet50","152414e5":"# Importing Libraries","8cc5eec7":"# VGG16","3128799e":"# Final Report","138edc25":"# Train & Test Split","4b368e60":"# Thanks"}}