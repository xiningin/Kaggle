{"cell_type":{"c8e0c244":"code","a46968d0":"code","be5baa49":"code","52637a17":"code","43755e37":"code","b41549d0":"code","fb001eca":"code","a1a516eb":"code","1dfbf2cf":"code","10e8d358":"code","e73645e6":"code","c3ba0598":"code","0666a551":"code","232cacae":"code","10a74acd":"code","8741f026":"code","b50d866c":"code","ce3a84f0":"code","36bc81e7":"code","5e64a240":"code","88ab415e":"markdown","05fca04b":"markdown","3e5314a8":"markdown","27eaad79":"markdown","84fcea61":"markdown","b61ed610":"markdown","962a2a48":"markdown","56da6026":"markdown"},"source":{"c8e0c244":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.impute import SimpleImputer","a46968d0":"train_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")","be5baa49":"train_data.head()","52637a17":"#Checking missing values and data types\ntrain_data.info()","43755e37":"#Looking the describe for explore outliers\ntrain_data.describe(include=\"all\")","b41549d0":"train_data.shape, test_data.shape","fb001eca":"#Cut the target feature\ny = train_data['Survived']\nx_train = train_data.copy()\nx_train = x_train.drop(['Survived'], axis=1)","a1a516eb":"#Checking all name of features\nx_train.columns.values","1dfbf2cf":"#Choosing essential features and creating functions for preprocessing data\nfeatures = ['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked']\n\nimputer = SimpleImputer(strategy='most_frequent')\n\ndef data_preprocessing (data):\n    data = data[features]\n    data = pd.get_dummies(data, drop_first=True)\n    return data\n\ndef my_imputer (fit_data, imput_data):\n    imputer.fit(fit_data)\n    data = pd.DataFrame(imputer.transform(imput_data))\n    data.columns = fit_data.columns\n    return data","10e8d358":"#Preprocessing train_data using functions above\nx_train_preprocessed = data_preprocessing(x_train)\nx_train_preprocessed = my_imputer(x_train_preprocessed, x_train_preprocessed)\nx_train_preprocessed.head() #Check preprocessed data","e73645e6":"#Check preprocessed data\nx_train_preprocessed.info()","c3ba0598":"#For choosing best parameters of our model using GridSearchCV\nparameters = {'n_estimators': [100, 150, 200, 250],\n                'max_features': np.arange(4, 9),\n                'max_depth': np.arange(3, 10),\n    \n}\n\nclf = GridSearchCV(\n            estimator=RandomForestClassifier(),\n            param_grid=parameters,\n            scoring='accuracy',\n            cv=5)","0666a551":"clf.fit(x_train_preprocessed, y)","232cacae":"cv_results = pd.DataFrame(clf.cv_results_)\n\ncv_results.columns","10a74acd":"param_columns = [\n    column\n    for column in cv_results.columns\n    if column.startswith('param_')\n]\n\nscore_columns = ['mean_test_score']\n\ncv_results = (cv_results[param_columns + score_columns]\n              .sort_values(by=score_columns, ascending=False))\n\ncv_results.head(10)","8741f026":"#Checking the best parameters\nclf.best_params_","b50d866c":"test_data_preprocessed = data_preprocessing(test_data)\ntest_data_preprocessed = my_imputer(x_train_preprocessed, test_data_preprocessed)\ntest_data_preprocessed.head()","ce3a84f0":"test_data_preprocessed.info()","36bc81e7":"model = RandomForestClassifier(n_estimators=150, max_depth=8, random_state=6)\nmodel.fit(x_train_preprocessed, y)\npredictions = model.predict(test_data_preprocessed)\npredictions","5e64a240":"output = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","88ab415e":"## Save result","05fca04b":"## Create DataFrame of all parameters","3e5314a8":"## Explore data","27eaad79":"## Feature engineering","84fcea61":"## Loading data","b61ed610":"## Preprocessing of the test data","962a2a48":"## Build model with best parameters and make prediction","56da6026":"## Selecting parameters"}}