{"cell_type":{"777e79e6":"code","e39bf064":"code","abf2b922":"code","33915dd5":"code","9b9a054d":"code","7dfcf9c1":"code","25046e19":"code","38f5eceb":"code","3e3618bf":"code","68b0ebce":"code","87f03f02":"code","c76da216":"code","37921737":"code","0971d20f":"code","079969ea":"code","b26ade8d":"code","6a560b96":"code","14a93e54":"code","75106f25":"code","04cecaf6":"code","1d1023bf":"code","20ea8284":"code","42327ebd":"code","a58f15b6":"code","4175dea0":"code","93cb0123":"code","3db37246":"code","adaad3ee":"code","6f3129ac":"code","686af604":"code","8e47afdd":"markdown","2975177e":"markdown","854c13a1":"markdown","f2cd3b38":"markdown","bc16b881":"markdown","a7cad98f":"markdown","b2f411da":"markdown","6fd255ac":"markdown","b155fd88":"markdown","e1b4a836":"markdown","8775ee6a":"markdown","1b6388b5":"markdown","a7fcc8cb":"markdown","77bbca6e":"markdown"},"source":{"777e79e6":"import pandas as pd\nimport numpy as np\nfrom surprise import Reader, Dataset, SVD\nfrom surprise import accuracy\nfrom surprise.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nimport warnings; warnings.simplefilter('ignore')\nimport plotly.graph_objs as go\nfrom plotly.offline import init_notebook_mode, plot, iplot","e39bf064":"df = pd.read_csv('..\/input\/netflix-movie-rating-dataset\/Netflix_Dataset_Rating.csv')\ndf","abf2b922":"df.dtypes","33915dd5":"df.info()","9b9a054d":"df['Rating'].describe().astype('int')","7dfcf9c1":"print(\"Unique Values :\\n\",df.nunique())","25046e19":"df_title = pd.read_csv('..\/input\/netflix-movie-rating-dataset\/Netflix_Dataset_Movie.csv')\ndf_title","38f5eceb":"df_title.dtypes","3e3618bf":"df_title.info()","68b0ebce":"df_title['Year'].describe().astype('int')","87f03f02":"print(\"Unique Values :\\n\",df_title.nunique())","c76da216":"no_of_rated_products_per_users = df.groupby(by='User_ID')['Rating'].count().sort_values(ascending=False)\nno_of_rated_products_per_users.head()","37921737":"no_of_rated_products_per_users.describe()\n","0971d20f":"quantiles = no_of_rated_products_per_users.quantile(np.arange(0,1.01,0.01), interpolation='higher')\n\nplt.figure(figsize=(10,10))\nplt.title(\"Quantiles and their Values\")\nquantiles.plot()\nplt.scatter(x=quantiles.index[::5], y=quantiles.values[::5], c='orange', label=\"quantiles with 0.05 intervals\")\nplt.scatter(x=quantiles.index[::25], y=quantiles.values[::25], c='m', label = \"quantiles with 0.25 intervals\")\nplt.ylabel('No of ratings given by user')\nplt.xlabel('Value at the quantile')\nplt.legend(loc='best')\nplt.show()","079969ea":"no_of_rated_products_per_movies = df.groupby(by='Movie_ID')['Rating'].count().sort_values(ascending=False)\nno_of_rated_products_per_movies.head()","b26ade8d":"no_of_rated_products_per_movies.describe()","6a560b96":"quantiles = no_of_rated_products_per_movies.quantile(np.arange(0,1.01,0.01), interpolation='higher')\n\nplt.figure(figsize=(10,10))\nplt.title(\"Quantiles and their Values\")\nquantiles.plot()\nplt.scatter(x=quantiles.index[::5], y=quantiles.values[::5], c='orange', label=\"quantiles with 0.05 intervals\")\nplt.scatter(x=quantiles.index[::25], y=quantiles.values[::25], c='m', label = \"quantiles with 0.25 intervals\")\nplt.ylabel('No of ratings given to movies')\nplt.xlabel('Value at the quantile')\nplt.legend(loc='best')\nplt.show()","14a93e54":"f = ['count','mean']\ndf_movie_summary = df.groupby('Movie_ID')['Rating'].agg(f)\ndf_movie_summary.index = df_movie_summary.index.map(int)\nmovie_benchmark = round(df_movie_summary['count'].quantile(0.7),0)\ndrop_movie_list = df_movie_summary[df_movie_summary['count'] < movie_benchmark].index\n\ndf__title = df_title.set_index('Movie_ID')","75106f25":"data = df['Rating'].value_counts()\n\ntrace = go.Bar(x = data.index,y = data.values,text = ['{:.1f} %'.format(val) for val in (data.values \/ df.shape[0] * 100)],textposition = 'auto')\n\nlayout = dict(title = 'Distribution of {} Movie-ratings'.format(df.shape[0]), xaxis = dict(title = 'Rating'), yaxis = dict(title = 'Movies'))\n\nfig = go.Figure(data=[trace], layout=layout)\n\niplot(fig)","04cecaf6":"data = df_title['Year'].value_counts()\n\ntrace = go.Bar(x = data.index,y = data.values,text = ['{:.1f} %'.format(val) for val in (data.values \/ df_title.shape[0] * 100)],textposition = 'auto')\n\nlayout = dict(title = 'Distribution of {} Movie - Year-wise'.format(df.shape[0]), xaxis = dict(title = 'Year'), yaxis = dict(title = 'Movies'))\n\nfig = go.Figure(data=[trace], layout=layout)\n\niplot(fig)","1d1023bf":"df_2004 = df_title[df_title['Year']==2004]\ndf_2004 = df_2004.merge(df,on='Movie_ID')\n\ndata = df_2004['Rating'].value_counts()\n\ntrace = go.Bar(x = data.index,y = data.values,text = ['{:.1f} %'.format(val) for val in (data.values \/ df_2004.shape[0] * 100)],textposition = 'auto')\n\nlayout = dict(title = 'Distribution of {} Movie-ratings released in 2004'.format(df.shape[0]), xaxis = dict(title = 'Rating'), yaxis = dict(title = 'Movies'))\n\nfig = go.Figure(data=[trace], layout=layout)\n\niplot(fig)","20ea8284":"df_max_ratings = df_movie_summary[df_movie_summary['count']==df_movie_summary['count'].max()]\n\nreq_MID = df_max_ratings.index[0]\ndf_max_ratings = df[df['Movie_ID'] ==req_MID]\n\nMovie_name_max_raings = df_title['Name'][df_title['Movie_ID']==req_MID].to_string(index=False)\n\ndata = df_max_ratings['Rating'].value_counts()\n\ntrace = go.Bar(x = data.index,y = data.values,text = ['{:.1f} %'.format(val) for val in (data.values \/ df_max_ratings.shape[0] * 100)],textposition = 'auto')\n\nlayout = dict(title = 'Distribution of Most Rated Movie -'+Movie_name_max_raings+ ' Movie-Ratings')\n\nfig = go.Figure(data=[trace], layout=layout)\n\niplot(fig)","42327ebd":"model = SVD(n_epochs=10,verbose = True)\n\ndata = Dataset.load_from_df(df[['User_ID', 'Movie_ID', 'Rating']], Reader())\n\ntrainset, testset = train_test_split(data, test_size=0.3,random_state=10)\n\ntrainset = data.build_full_trainset()\n\nmodel.fit(trainset)","a58f15b6":"predictions = model.test(testset)\n\naccuracy.rmse(predictions, verbose=True)","4175dea0":"def Recommendation(given_user_id,n_movies):\n    given_user = df_title.copy()\n    given_user = given_user.reset_index()\n    given_user = given_user[~given_user['Movie_ID'].isin(drop_movie_list)]\n\n\n    given_user['Estimated_Rating'] = given_user['Movie_ID'].apply(lambda x: model.predict(given_user_id, x).est)\n\n    given_user = given_user.drop('Movie_ID', axis = 1)\n\n    given_user = given_user.sort_values('Estimated_Rating', ascending=False)\n    given_user.drop(['index'], axis = 1,inplace=True)\n    given_user.reset_index(inplace=True,drop=True)\n    return given_user.head(n_movies)","93cb0123":"Recommendation(712664,10)","3db37246":"Recommendation(2643029,10)","adaad3ee":"df_p = pd.pivot_table(df,values='Rating',index='User_ID',columns='Movie_ID')\n\ndef Recommend_based_on_movie(movie_title, min_count):\n    i = int(df__title.index[df__title['Name'] == movie_title][0])\n    target = df_p[i]\n    similar_to_target = df_p.corrwith(target)\n    corr_target = pd.DataFrame(similar_to_target, columns = ['PearsonR'])\n    corr_target.dropna(inplace = True)\n    corr_target = corr_target.sort_values('PearsonR', ascending = False)\n    corr_target.index = corr_target.index.map(int)\n    corr_target = corr_target.join(df__title).join(df_movie_summary)[['PearsonR', 'Name', 'count', 'mean']]\n    corr_target = corr_target[corr_target['count']>min_count][:10]\n    corr_target.reset_index(drop=True,inplace=True)\n    return corr_target","6f3129ac":"Recommend_based_on_movie(\"The Education of Little Tree\", 0)","686af604":"Recommend_based_on_movie(\"Character\", 0)","8e47afdd":"### Movie Recommendation for User - 712664","2975177e":"### Movie Recommendation for User - 2643029","854c13a1":"# 4. Recommendation Model\n","f2cd3b38":"# 2. Load Movie Data","bc16b881":"# 1. Load Rating Data","a7cad98f":"# Movie Recommendation using Netflix Movie Reviews\n\n\n","b2f411da":"\n**Table of Content**\n","6fd255ac":"### Recommendation based on given movie - \"Character\"","b155fd88":"\n#### 1.  Load Rating Data\n#### 2.  Load Movie Data\n#### 3.  Analyze Data\n#### 4.  Recommendation Model\n#### 4.1 Collaborative Filtering - SVD\n#### 4.2 Pearson Correlation Method","e1b4a836":"## 4.1 Collaborative Filtering - SVD","8775ee6a":"# 3. Analyze Data","1b6388b5":"This project aims to build a movie recommendation system using Netflix Movie Ratings. There are 17337458 Ratings given by 143458 users to 1350 movies. Ratings are in the form of Integer i.e. 1 - 5\n\n### *Please Upvote if this notebook is helpful to you in some ways!*\nSo let's get started","a7fcc8cb":"### Recommendation based on given movie - \"The Education of Little Tree\"","77bbca6e":"## 4.2 Pearson Correlation Method"}}