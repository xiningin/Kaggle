{"cell_type":{"735a0cd1":"code","c6ac851c":"code","fb7032a9":"code","bc70a917":"code","93109797":"code","f906e204":"code","23547158":"code","d50e5d3d":"code","eec7681d":"code","0f13cf80":"code","46bf3e46":"code","a13bd11f":"code","f5de8a7e":"code","d69e0107":"code","a4763e02":"code","1313f61d":"code","c84a3eec":"code","1f778afb":"code","1164e995":"code","7fa1d45f":"code","3fa54f65":"code","d74d21ad":"code","e0a2c221":"code","cac08eda":"code","5d8d7a52":"code","e910bb47":"code","31c0e66e":"code","f20910d7":"code","0f03463b":"code","945f4cfb":"code","99428954":"code","a30f94d2":"code","b1064c08":"code","8fe29ed9":"code","4bf0a50c":"code","17514179":"code","e71e0855":"code","d2285b8f":"code","98c4a6e8":"code","a546d73e":"code","27bebfe9":"code","d39bac5e":"code","ea720588":"code","6abdf3dc":"code","a775ebed":"markdown","ec2b7309":"markdown","10ab9163":"markdown","c0a874bf":"markdown","114dde07":"markdown","d7aef377":"markdown","3eee1e8b":"markdown","538c2baf":"markdown","785820d8":"markdown","527d0334":"markdown","3665078a":"markdown","cfe713b4":"markdown","815ad324":"markdown","9d3eeeb2":"markdown","7600dca9":"markdown","c8f96292":"markdown","e27b99be":"markdown","9087b963":"markdown","184d26d1":"markdown","e18092e1":"markdown","8636df02":"markdown","3f47c40d":"markdown","b82d53c6":"markdown","19513073":"markdown","915cec3a":"markdown"},"source":{"735a0cd1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport tensorflow as tf\nimport cv2\nfrom glob import glob\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nimage_path = os.path.join(\"..\/input\/chest-xray-masks-and-labels\/data\/Lung Segmentation\/CXR_png\")\nmask_path = os.path.join(\"..\/input\/chest-xray-masks-and-labels\/data\/Lung Segmentation\/masks\")\nreading_path = os.path.join(\"..\/input\/chest-xray-masks-and-labels\/data\/Lung Segmentation\/ClinicalReadings\")\n\n# Any results you write to the current directory are saved as output.","c6ac851c":"images = os.listdir(image_path)\nmasks = os.listdir(mask_path)\nreadings = os.listdir(reading_path)\nprint('Total number of x-ray images:',len(images))\nprint('Total number of masks:',len(masks))\nprint('Total number of clinical readings:',len(readings))","fb7032a9":"tb_positive = [image for image in images if image.split('.png')[0][-1]=='1']\ntb_negative = [image for image in images if image.split('.png')[0][-1]=='0']\nprint('There are %d tuberculosis positive cases.' % len(tb_positive))\nprint('There are %d tuberculosis negative cases.' % len(tb_negative))","bc70a917":"from IPython.display import Image\npos_image = np.random.choice(tb_positive,1)\nneg_image = np.random.choice(tb_negative,1)\nprint(\"Image %s is positive on tuberculosis.\" % pos_image[0])\ndisplay(Image(os.path.join(\"..\/input\/chest-xray-masks-and-labels\/data\/Lung Segmentation\/CXR_png\",pos_image[0]),width=256,height=256))\nprint(\"Image %s is negative on tuberculosis.\" % neg_image[0])\ndisplay(Image(os.path.join(\"..\/input\/chest-xray-masks-and-labels\/data\/Lung Segmentation\/CXR_png\",neg_image[0]),width=256,height=256))","93109797":"tb_state = [int(image.split('.png')[0][-1]) for image in images]\nimg_df = pd.DataFrame({'Image_name':images, 'TB_state': tb_state})\nimg_df['Path'] = img_df['Image_name'].map(lambda x: \"..\/input\/chest-xray-masks-and-labels\/data\/Lung Segmentation\/CXR_png\/\"+x)\nimg_df['Source'] = img_df['Image_name'].map(lambda x: x.split('_')[0])\nimg_df['Text_path'] = img_df['Image_name'].map(lambda x: \"..\/input\/chest-xray-masks-and-labels\/data\/Lung Segmentation\/ClinicalReadings\/\"+x.split('.png')[0]+'.txt')\nimg_df.head()","f906e204":"ages=[]\ngenders=[]\ndescriptions=[]\nfor txt in img_df.Text_path.tolist():\n    lines = [line for line in open(txt,'r')]\n    if \"Patient's Sex:\" in lines[0]:\n        gender = lines[0][lines[0].index(\"Patient's Sex:\")+len(\"Patient's Sex:\")+1]\n        genders.append(gender)\n        start = lines[1].index(\"Patient's Age:\")\n        length = len(\"Patient's Age:\")\n        age = int(lines[1][start+length+2:start+length+4])\n        ages.append(age)\n        description = ' '.join(lines[2:]).strip()\n        descriptions.append(description)\n    else:\n        if \"male\" or \"MALE\" in lines[0]:\n            gender = 'M'\n            genders.append(gender)\n        else:\n            gender = 'F'\n            genders.append(gender)\n        if \"yrs\" in lines[0]:\n            start = lines[0].index(\"yrs\")\n            age = int(lines[0][start-2:start])\n            ages.append(age)\n        elif \"yr\" in lines[0]:\n            start = lines[0].index(\"yr\")\n            age = int(lines[0][start-2:start])\n            ages.append(age)\n        else:\n            ages.append(np.NaN)\n        description = ' '.join(lines[1:]).strip()\n        descriptions.append(description)\n            \nimg_df['Age'] = ages\nimg_df['Gender'] = genders\nimg_df['Description'] = descriptions\nimg_df.head()","23547158":"sns.countplot(x='TB_state', data=img_df)","d50e5d3d":"img_df.groupby(by='Source')['Image_name'].count()","eec7681d":"sns.countplot(x='Source', data=img_df)","0f13cf80":"sns.countplot(x='Gender', hue='TB_state', data=img_df)","46bf3e46":"sum((img_df.Gender=='M'))","a13bd11f":"sum((img_df.Gender=='F'))","f5de8a7e":"img_df[img_df.Gender=='O']","d69e0107":"print('TB positive rate of male patients:',sum((img_df.Gender=='M') & (img_df.TB_state==1)) \/ sum(img_df.Gender=='M'))","a4763e02":"print('TB positive rate of female patients:',sum((img_df.Gender=='F') & (img_df.TB_state==1)) \/ sum(img_df.Gender=='F'))","1313f61d":"img_df[img_df.Age.isnull()]","c84a3eec":"null_age_imgs = img_df[img_df.Age.isnull()].Text_path\nfor txt in null_age_imgs:\n    lines = [line for line in open(txt,'r')]\n    print(lines)","1f778afb":"img_df.ix[446,'Age']=1\nimg_df.ix[469,'Age']=0\nimg_df.ix[535,'Age']=1\nimg_df.ix[660,'Age']=42\nimg_df[img_df.Age.isnull()]","1164e995":"sns.distplot(img_df[img_df.TB_state==1]['Age'], kde=False)","7fa1d45f":"import time\nstart = time.time()\n\nimport numpy as np\nfrom tensorflow.python.keras.applications import ResNet50, InceptionV3, InceptionResNetV2\nfrom tensorflow.python.keras.preprocessing import image\nfrom tensorflow.python.keras.models import Model\nfrom tensorflow.python.keras.applications.resnet50 import preprocess_input\n#from tensorflow.python.keras.applications.inception_v3 import preprocess_input\n#from tensorflow.python.keras.applications.inception_resnet_v2 import preprocess_input\n\nresnet_weights_path = '..\/input\/keras-pretrained-models\/resnet50_weights_tf_dim_ordering_tf_kernels.h5'\n#inceptionv3_weights_path = '..\/input\/keras-pretrained-models\/inception_v3_weights_tf_dim_ordering_tf_kernels_notop.h5'\n#inceptionresnetv2_weights_path = '..\/input\/keras-pretrained-models\/inception_resnet_v2_weights_tf_dim_ordering_tf_kernels_notop.h5'\n\nbase_model = ResNet50(weights=resnet_weights_path)\nmodel = Model(inputs=base_model.input, outputs=base_model.get_layer('avg_pool').output)\n\nimage_size = 224\nimg_paths = img_df.Path.tolist()\nfeatures_array = np.zeros((800,2048))\n\nfor i, img_path in enumerate(img_paths):\n    img = image.load_img(img_path, target_size=(image_size, image_size))\n    x = image.img_to_array(img)\n    x = np.expand_dims(x, axis=0)\n    x = preprocess_input(x)\n    features = model.predict(x)\n    features = features.reshape(2048,)\n    features_array[i,:] = features\n    \nprint('Running time: %.4f seconds' % (time.time()-start))","3fa54f65":"model.summary()","d74d21ad":"features_array.shape","e0a2c221":"img_df.head(2)","cac08eda":"df = pd.DataFrame(features_array)\ndf['Image_name'] = img_df.Image_name\ndf['TB_state'] = img_df.TB_state\ndf.head(2)","5d8d7a52":"from sklearn.model_selection import train_test_split\nX = df.drop(['Image_name', 'TB_state'], axis=1)\ny = df.TB_state\nXtrain, Xtest, ytrain, ytest = train_test_split(X, y, test_size=0.2)","e910bb47":"import time\nstart = time.time()\n\nfrom sklearn.svm import SVC\nclf = SVC()\nclf.fit(Xtrain, ytrain)\npreds = clf.predict(Xtest)\n\nprint('Running time: %.4f seconds' % (time.time()-start))","31c0e66e":"from sklearn.metrics import accuracy_score, confusion_matrix, classification_report\nprint(accuracy_score(ytest, preds))","f20910d7":"cm = confusion_matrix(ytest, preds)\nsns.heatmap(cm, annot=True, cbar=False)\nplt.xlabel('Predicted label')\nplt.ylabel('True label')\nplt.title('Confusion Matrix')","0f03463b":"from sklearn.metrics import classification_report\nprint(classification_report(ytest, preds))","945f4cfb":"from sklearn.model_selection import GridSearchCV","99428954":"import time\nstart = time.time()\n\nfrom sklearn.metrics import make_scorer\nscoring = {'AUC': 'roc_auc', 'Accuracy': make_scorer(accuracy_score)}\n\nclf_cv = GridSearchCV(SVC(), cv=5, param_grid={'C':[1,10,100,1000], 'gamma':[0.0001,0.001,0.01,0.1,1]}, verbose=1,\n                      scoring=scoring, refit='AUC', return_train_score=True)\nclf_cv.fit(Xtrain, ytrain)\n\nprint('Running time: %.4f seconds' % (time.time()-start))","a30f94d2":"best_clf_cv = clf_cv.best_estimator_\nbest_clf_cv","b1064c08":"clf_cv.best_score_","8fe29ed9":"preds_cv = best_clf_cv.predict(Xtest)\nprint(accuracy_score(ytest, preds_cv))","4bf0a50c":"cm = confusion_matrix(ytest, preds_cv)\nsns.heatmap(cm, annot=True, cbar=False)\nplt.xlabel('Predicted label')\nplt.ylabel('True label')\nplt.title('Confusion Matrix')","17514179":"from sklearn.metrics import classification_report\nprint(classification_report(ytest, preds_cv))","e71e0855":"norms = np.linalg.norm(features_array, axis = 1, keepdims=True)\nX_norm = features_array\/norms\nX_norm.shape","d2285b8f":"Xtrain2, Xtest2, ytrain2, ytest2 = train_test_split(X_norm, y, test_size=0.2)","98c4a6e8":"start = time.time()\n\nfrom sklearn.metrics import make_scorer\nscoring = {'AUC': 'roc_auc', 'Accuracy': make_scorer(accuracy_score)}\n\nclf_cv_norm = GridSearchCV(SVC(), cv=5, param_grid={'C':[1,10,100,1000], 'gamma':[0.0001,0.001,0.01,0.1,1]}, verbose=1,\n                      scoring=scoring, refit='AUC', return_train_score=True)\nclf_cv_norm.fit(Xtrain2, ytrain2)\n\nprint('Running time: %.4f seconds' % (time.time()-start))","a546d73e":"best_clf_cv_norm = clf_cv_norm.best_estimator_\nbest_clf_cv_norm","27bebfe9":"clf_cv_norm.best_score_","d39bac5e":"preds_cv_norm = best_clf_cv_norm.predict(Xtest2)\nprint(accuracy_score(ytest2, preds_cv_norm))","ea720588":"cm = confusion_matrix(ytest2, preds_cv_norm)\nsns.heatmap(cm, annot=True, cbar=False)\nplt.xlabel('Predicted label')\nplt.ylabel('True label')\nplt.title('Confusion Matrix')","6abdf3dc":"from sklearn.metrics import classification_report\nprint(classification_report(ytest2, preds_cv_norm))","a775ebed":"### Use pretrained ResNet50 for feature extraction\n* #### Output of the layer before the final classification layer: shape (1, 2048)","ec2b7309":"#### Classification report","10ab9163":"Out of the 800 x-ray images, 394 are tuberculosis positive and 406 are negative.","c0a874bf":"#### Classification report","114dde07":"Now we consolidate all patients' information into a dataframe.","d7aef377":"As mentioned earlier, the proportion of TB positive cases is around 50%, out of all the x-ray images.","3eee1e8b":"We notice there are a few null values in Age column. ","538c2baf":"Let's inspect these few records and we find that Age unit is missing.","785820d8":"## Part 3: Feed extracted features into SVM for classification","527d0334":"#### Classification report","3665078a":"Out of the 800 images, 662 are from Shenzhen and 138 are from Montgomery.","cfe713b4":"#### Confustion matrix","815ad324":"#### Confustion matrix","9d3eeeb2":"Next, the missing age information is fixed.","7600dca9":"There are 800 chest x-ray images and 704 masks.","c8f96292":"### SVM w\/o cross-validation","e27b99be":"We have more male patients, and the TB positive rate is also higher for male patients (51.4%) compared with female (28.4%).","9087b963":"## This notebook basically covers two parts based on the chest X-ray datasets:\n* Exploratory data analysis\n* Feature extraction\n* Feed extracted features into SVM for classification","184d26d1":"Below shows one TB positive image and one TB negative image. ","e18092e1":"### If feature vector is L2 normalized to unit length","8636df02":"#### Confustion matrix","3f47c40d":"The age distribution of TB positive patients is shown in the below histogram. Age group from 20 to 40 contributes the highest proportion of TB positive patients.","b82d53c6":"## Part 1: Exploratory data analysis\n### Extract patients information","19513073":"## Part 2: Feature extraction","915cec3a":"### SVM with cross-validation"}}