{"cell_type":{"6b507598":"code","1d221c47":"code","2ee02daa":"code","252dcd68":"code","bbe4d30b":"code","86aaccde":"code","5e302192":"code","282ff294":"code","ebfc3d31":"code","920cbcc2":"code","dfedf8f7":"code","c3d34ff0":"markdown","03684edb":"markdown","ecf6e223":"markdown","8b05b529":"markdown"},"source":{"6b507598":"import h5py\nimport numpy as np\n\nf = h5py.File('..\/input\/lungnodemalignancy\/all_patches.hdf5','r')\nprint(list(f.keys()))\n\nct_slices = f['ct_slices']\nslice_class = f['slice_class']\n\nct_slices = np.array(ct_slices)\nslice_class = np.array(slice_class)\nprint(ct_slices.shape)\nprint(slice_class.shape)\nprint(ct_slices[1].min())","1d221c47":"import pylab\nct_slices = np.clip(ct_slices, -1000,320)\nprint(ct_slices.max())\nprint(ct_slices.min())\n\npylab.imshow(ct_slices[5], cmap=pylab.cm.gray)  \npylab.show()\n\n","2ee02daa":"from sklearn.model_selection import train_test_split\nfrom tensorflow import keras\nct_slices = ct_slices.reshape(6691,64,64,1)\n#slice_class = slice_class(6691,64,64,1)\n\nX_train, X_test, y_train, y_test = train_test_split(ct_slices, slice_class, test_size=0.33, random_state=42)\n\ny_train = keras.utils.to_categorical(y_train, num_classes=2)\ny_test = keras.utils.to_categorical(y_test, num_classes=2)\n\n\nprint(X_train.shape)\nprint(y_train.shape)","252dcd68":"from keras.applications.resnet50 import ResNet50\n#from keras.applications import MobileNetV2\nfrom keras.datasets import mnist\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Activation, BatchNormalization, AveragePooling2D, GlobalAveragePooling2D\nfrom keras.layers import Conv2D, MaxPooling2D, Input\nfrom keras import backend as K\nfrom PIL import Image\nfrom torch.autograd import Variable\nimport matplotlib.pyplot as plt\nimport torch\nfrom torchvision import models, transforms\nimport torch.nn.functional as F\nimport numpy as np\nimport skimage.transform\nimport keras\n\n#conv_base = MobileNetV2(weights='imagenet', include_top=False, input_shape=(224, 224, 3))\n\nmodel = Sequential()\n\n\nmodel.add(Conv2D(32, kernel_size=(3, 3), activation='relu', padding='same',input_shape=(64,64,1)))\n# model.add(Dropout(0.2))\n#model.add(MaxPooling2D(pool_size=(2, 2)))\n\n#model.add(MyCustomLayer(32,use_bias = False))\nmodel.add(Conv2D(32, kernel_size=(3, 3), activation='relu', padding='same'))\n# # model.add(Dropout(0.2))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(Conv2D(64, kernel_size=(3, 3), activation='relu', padding='same'))\nmodel.add(Conv2D(64, kernel_size=(3, 3), activation='relu', padding='same'))\n# # model.add(Dropout(0.2))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\n\n# model.add(conv_base)\nmodel.add(GlobalAveragePooling2D())\nmodel.add(Flatten())\n# model.add(Dense(64, activation = 'relu'))\nmodel.add(Dense(2, activation='softmax'))\n\nmodel.compile(loss=keras.losses.categorical_crossentropy,\n              optimizer='Adam',\n              metrics=['accuracy'])\n#kernel_regularizer=l2(1e-2)\n# model.fit(x_train, y_train,\n#           batch_size=64,\n#           epochs=10,\n#           verbose=1,\n#           validation_data=(x_test, y_test))\nhistory = model.fit(\n        X_train,y_train,\n        batch_size=100,\n        epochs=100,\n        validation_data=(X_test, y_test))","bbe4d30b":"model.summary()\n","86aaccde":"from matplotlib import pyplot as plt\nplt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('Two class recognition')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'val'], loc='upper left')\nplt.show()","5e302192":"def make_gradcam_heatmap(img_array, model, last_conv_layer_name, pred_index=None):\n    # First, we create a model that maps the input image to the activations\n    # of the last conv layer as well as the output predictions\n    grad_model = tf.keras.models.Model(\n        [model.inputs], [model.get_layer(last_conv_layer_name).output, model.output]\n    )\n\n    # Then, we compute the gradient of the top predicted class for our input image\n    # with respect to the activations of the last conv layer\n    with tf.GradientTape() as tape:\n        last_conv_layer_output, preds = grad_model(img_array)\n        if pred_index is None:\n            pred_index = tf.argmax(preds[0])\n        class_channel = preds[:, pred_index]\n\n    # This is the gradient of the output neuron (top predicted or chosen)\n    # with regard to the output feature map of the last conv layer\n    grads = tape.gradient(class_channel, last_conv_layer_output)\n\n    # This is a vector where each entry is the mean intensity of the gradient\n    # over a specific feature map channel\n    pooled_grads = tf.reduce_mean(grads, axis=(0, 1, 2))\n\n    # We multiply each channel in the feature map array\n    # by \"how important this channel is\" with regard to the top predicted class\n    # then sum all the channels to obtain the heatmap class activation\n    last_conv_layer_output = last_conv_layer_output[0]\n    heatmap = last_conv_layer_output @ pooled_grads[..., tf.newaxis]\n    heatmap = tf.squeeze(heatmap)\n\n    # For visualization purpose, we will also normalize the heatmap between 0 & 1\n    heatmap = tf.maximum(heatmap, 0) \/ tf.math.reduce_max(heatmap)\n    return heatmap.numpy()","282ff294":"def normalization(image):\n    return (image - image.min())\/(image.max() - image.min())\n\ndef gray_to_redblue(image):\n    R,G,B = image[:,:,0], image[:,:,1], image[:,:,2]\n    #grey = sum(pixel) \/\/ len(pixel)\n    redvalue = 1 - R  # \"darkness\"\n    bluevalue = B  # \"brightness\"\n    image[:,:,0] = B\n    image[:,:,1] = 0\n    image[:,:,2] = 1-R\n    return image# + alpha\n\n","ebfc3d31":"import cv2\nfrom PIL import Image\nfrom sklearn import preprocessing\nimport tensorflow as tf\n\ndef generate_CAM(image,layer):\n    img_array = np.reshape(image,(1,64,64,1))\n    preds = model.predict(img_array)\n    H5py_cam = make_gradcam_heatmap(img_array,model,layer)\n    print(H5py_cam.shape)\n    heatmap = cv2.resize(H5py_cam,(img_array.shape[1],img_array.shape[2]))\n    img_map = np.reshape(img_array,(64,64))\n    heatmap = normalization(heatmap)\n    img_map = normalization(img_map)\n    heatmap = cv2.cvtColor(heatmap,cv2.COLOR_GRAY2RGB)\n    img_map = cv2.cvtColor(img_map,cv2.COLOR_GRAY2RGB)\n    heatmap = gray_to_redblue(heatmap)\n    #heatmap = cv2.cvtColor(heatmap,cv2.COLOR_GRAY2RGB)\n    print(heatmap.shape)\n    print(img_map.shape)\n    combination = heatmap * 0.8 + img_map * 1\n\n    plt.imshow(combination)\n    plt.show()\n    \n    pylab.imshow(img_map, cmap=pylab.cm.gray)  \n    pylab.show()\n    pylab.imshow(heatmap, cmap=pylab.cm.jet)  \n    pylab.show()\n    \ngenerate_CAM(ct_slices[378],'max_pooling2d_1')\n    ","920cbcc2":"from sklearn.metrics import classification_report\ny_pred_proba = model.predict(X_test)\ny_pred = np.argmax(y_pred_proba,1)\nprint('')\nprint(classification_report(np.argmax(y_test,1),\n                      y_pred))","dfedf8f7":"from sklearn.metrics import roc_curve, auc\nfpr, tpr, thresholds = roc_curve(np.argmax(y_test, 1), y_pred_proba[:,1])\nfig, ax1 = plt.subplots(1,1)\nax1.plot(fpr, tpr, 'r-.', label = 'CNN (%2.2f)' % auc(fpr, tpr))\nax1.set_xlabel('False Positive Rate')\nax1.set_ylabel('True Positive Rate')\nax1.plot(fpr, fpr, 'b-', label = 'Random Guess')\nax1.legend()","c3d34ff0":"Build CNN with Keras","03684edb":"Create CAM(heating map)","ecf6e223":"**Load the data**","8b05b529":"Split training dataset and validation dataset"}}