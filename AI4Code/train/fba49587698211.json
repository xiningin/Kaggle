{"cell_type":{"de826313":"code","6e721278":"code","d7704cd0":"code","118355d9":"code","c8dc832c":"code","c2510dec":"code","4b06ac05":"code","e950a139":"code","7ffeb126":"code","c3508c07":"code","4574bada":"code","615037c5":"code","155b13f9":"code","5a97f9d3":"code","9849e332":"code","ef340ff3":"code","8e9f53d9":"code","66e72a09":"code","6d50a0af":"code","d5481007":"code","695b9fde":"code","303116c8":"code","9548e06f":"code","04ed4879":"code","494626ac":"code","e9aefe62":"code","e30e2cfa":"markdown"},"source":{"de826313":"!pip install fastai==0.7.0","6e721278":"import numpy as np \nfrom pandas import *\nimport pandas as pd\nfrom pandas.api.types import is_string_dtype, is_numeric_dtype\nimport os\nfrom sklearn.ensemble import RandomForestRegressor, RandomForestClassifier\nfrom sklearn import metrics\nimport math\nfrom matplotlib import pyplot as plt, rcParams, animation\nfrom sklearn.tree import export_graphviz\nimport IPython, graphviz, re\nfrom pdpbox import pdp\nfrom fastai.imports import *\nfrom fastai.structured import *\n\nfrom pandas_summary import DataFrameSummary\nfrom sklearn.ensemble import RandomForestRegressor, RandomForestClassifier\nfrom IPython.display import display\n\nfrom sklearn import metrics\nimport warnings","d7704cd0":"warnings.filterwarnings(\"ignore\")\ndef rmse(x,y): return math.sqrt(((x-y)**2).mean())\n\ndef print_score(m):\n    res = [rmse(m.predict(X_train), y_train), rmse(m.predict(X_valid), y_valid),\n                m.score(X_train, y_train), m.score(X_valid, y_valid)]\n    if hasattr(m, 'oob_score_'): res.append(m.oob_score_)\n    print(res)\n    \ndef display_all(df):\n    with pd.option_context(\"display.max_rows\", 1000, \"display.max_columns\", 1000): \n        display(df)\n        \ndef split_vals(a,n): return a[:n].copy(), a[n:].copy()\n\ndef plot_pdp(feat, model_features, clusters=None, feat_name=None):\n    feat_name = feat_name or feat\n    p = pdp.pdp_isolate(m, x, model_features, feat)\n    return pdp.pdp_plot(p, feat_name, plot_lines=True, \n                        cluster=clusters is not None, \n                        n_cluster_centers=clusters)\ndef get_sample(df, n):\n    idxs = sorted(np.random.permutation(len(df))[:n])\n    return df.iloc[idxs].copy()","118355d9":"# the dataframe along the columns\nPATH = \"..\/input\/\"\ndf_raw = pd.read_csv(f'{PATH}train.csv', low_memory=False)\ndisplay_all(df_raw.tail().T)","c8dc832c":"# descibing the dataframe along the columns\ndisplay_all(df_raw.describe(include='all').T)","c2510dec":"# taking the log of the dependent variable\ndf_raw.SalePrice = np.log(df_raw.SalePrice)","4b06ac05":"# convert the string datatype to categories\ntrain_cats(df_raw)","e950a139":"# make the categories values ordered so that the tree has not to split much often.\n# I found out the columns which are not having category values in order\ndf_raw.LotShape.cat.set_categories(['Reg','IR1', 'IR2', 'IR3'], ordered=True, inplace=True)\ndf_raw.LandContour.cat.set_categories(['Lvl', 'Bnk', 'HLS', 'Low'], ordered=True, inplace=True)\ndf_raw.LotConfig.cat.set_categories(['Inside', 'Corner', 'CulDSac', 'FR2', 'FR3'], ordered=True, inplace=True)\ndf_raw.ExterQual.cat.set_categories(['Ex', 'Gd', 'TA', 'Fa'], ordered=True, inplace=True)\ndf_raw.BsmtQual.cat.set_categories(['Ex', 'Gd', 'TA', 'Fa'], ordered=True, inplace=True)\ndf_raw.BsmtCond.cat.set_categories(['Ex', 'Gd', 'TA', 'Fa'], ordered=True, inplace=True)\ndf_raw.BsmtExposure.cat.set_categories(['Gd', 'Av', 'Mn', 'No'], ordered=True, inplace=True)\ndf_raw.BsmtFinType1.cat.set_categories(['GLQ', 'ALQ', 'BLQ', 'Rec', 'LwQ', 'Unf', 'NA'], ordered=True, inplace=True)\ndf_raw.BsmtFinType2.cat.set_categories(['GLQ', 'ALQ', 'BLQ', 'Rec', 'LwQ', 'Unf'], ordered=True, inplace=True)\ndf_raw.HeatingQC.cat.set_categories(['Ex', 'Gd', 'TA', 'Fa', 'Po'], ordered=True, inplace=True)\ndf_raw.Electrical.cat.set_categories(['SBrkr', 'FuseA', 'FuseF', 'FuseP', 'Mix'], ordered=True, inplace=True)\ndf_raw.KitchenQual.cat.set_categories(['Ex', 'Gd', 'TA', 'Fa', 'Po'], ordered=True, inplace=True)\ndf_raw.Functional.cat.set_categories(['Typ', 'Min1', 'Min2', 'Mod', 'Maj1', 'Maj2', 'Sev', 'Sal'], ordered=True, inplace=True)\ndf_raw.FireplaceQu.cat.set_categories(['Ex', 'Gd', 'TA', 'Fa', 'Po'], ordered=True, inplace=True)\ndf_raw.GarageQual.cat.set_categories(['Ex', 'Gd', 'TA', 'Fa', 'Po'], ordered=True, inplace=True)\ndf_raw.GarageCond.cat.set_categories(['Ex', 'Gd', 'TA', 'Fa', 'Po'], ordered=True, inplace=True)\ndf_raw.PoolQC.cat.set_categories(['Ex', 'Gd', 'Fa'], ordered=True, inplace=True)\ndf_raw.Fence.cat.set_categories(['GdPrv', 'MnPrv', 'GdWo', 'MnWw'], ordered=True, inplace=True)\ndf_raw.SaleType.cat.set_categories(['WD', 'CWD', 'New', 'COD', 'Con', 'ConLw', 'ConLI', 'ConLD', 'Oth'], ordered=True, inplace=True)\ndf_raw.SaleCondition.cat.set_categories(['Normal', 'Abnorml', 'AdjLand', 'Alloca', 'Family', 'Partial'], ordered=True, inplace=True)","7ffeb126":"# check which column has null values\ndisplay_all(df_raw.isnull().sum().sort_index()\/len(df_raw))","c3508c07":"# Sorting the data by YrSold and MoSold, so that we are doing the prediction on the future date data\ndf_raw = df_raw.sort_values(['YrSold', 'MoSold'])","4574bada":"# processng the dataframe: \n# handling the missing values, creating additional columns with na subscript for the missing values columns\n# the missing values in a column has been assigned the median of that column\n# splitting the dependent variables and independent variable\ndf, y, nas = proc_df(df_raw, 'SalePrice')\ndisplay_all(df.tail().T)","615037c5":"# columns having the null values\nnas","155b13f9":"# lets now check which column has null values for df\ndisplay_all(df.isnull().sum().sort_index()\/len(df_raw))","5a97f9d3":"# Creating a validation and training sets\nn_valid = 50\nn_trn = len(df)-n_valid\nX_train, X_valid = split_vals(df, n_trn)\ny_train, y_valid = split_vals(y, n_trn)","9849e332":"# Lets train a RF using one estimator\nm = RandomForestRegressor(n_estimators=1, max_depth=3, bootstrap=False, n_jobs=-1)\nm.fit(X_train, y_train)\nprint_score(m)","ef340ff3":"# Lets draw the tree and observe which variables are getting splitted\ndraw_tree(m.estimators_[0], df, precision=3)","8e9f53d9":"# Lets train a RF using 30 estimators\nm = RandomForestRegressor(n_estimators=30,  min_samples_leaf=3, max_features=0.5, n_jobs=-1, oob_score=True)\nm.fit(X_train, y_train)\nprint_score(m)","66e72a09":"# sorting according to feature importance\nfi = rf_feat_importance(m, df); fi[:20]","6d50a0af":"fi.plot('cols', 'imp', figsize=(10,6), legend=False);","d5481007":"fi[:20].plot('cols', 'imp', 'barh', figsize=(12,7), legend=False)","695b9fde":"# Getting features having importance greater than 0.01\nto_keep = fi[fi.imp>0.01].cols; len(to_keep)","303116c8":"df_keep = df[to_keep].copy()","9548e06f":"# finding correlation between the features\nimport scipy\nfrom scipy.cluster import hierarchy as hc\ncorr = np.round(scipy.stats.spearmanr(df_keep).correlation, 4)\ncorr_condensed = hc.distance.squareform(1-corr)\nz = hc.linkage(corr_condensed, method='average')\nfig = plt.figure(figsize=(16,10))\ndendrogram = hc.dendrogram(z, labels=df_keep.columns, orientation='left', leaf_font_size=16)\nplt.show()\n","04ed4879":"# As shown in the graph, Garage cars and Garage Area are somewhat correlated\n# Lets plot the interaction plot between Garage Cars and Garage Area\nx = get_sample(X_train, 500) # take 500 samples from X_train\nfeats = ['GarageCars', 'GarageArea']\np = pdp.pdp_interact(m, x, X_train.columns, feats)\npdp.pdp_interact_plot(p, feats)","494626ac":"# partial dependence plot between Sale Price and OverallQuality\nplot_pdp('OverallQual', model_features=x.columns)","e9aefe62":"plot_pdp('GrLivArea', model_features=x.columns)","e30e2cfa":"Hope you liked it"}}