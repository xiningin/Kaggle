{"cell_type":{"6a3b8f23":"code","3192fd56":"code","3dee74d9":"code","95189ff8":"code","b0b87652":"code","d8f7b28b":"code","8765ff95":"code","9abd1509":"code","f7e5f047":"code","a533c5af":"code","42c5bebb":"code","6c41d7e2":"code","488d66f5":"code","410d2a9e":"code","94a75c43":"code","3391c6c2":"code","cee387be":"code","4a4be3b2":"code","921f599a":"code","34a35eb6":"code","cf8a61e3":"code","5448e3b2":"code","d7415c4d":"code","090ffea6":"code","d55c21e1":"code","2be7eca7":"markdown","e54f7d47":"markdown","0c348f0a":"markdown","9be8f83e":"markdown","eee9ae7e":"markdown","cf037cbb":"markdown","a17fc9ed":"markdown","ffa8019f":"markdown","ff4ba28e":"markdown","d4921bba":"markdown","c80c1fc6":"markdown","69557345":"markdown"},"source":{"6a3b8f23":"import numpy as np\nimport pandas as pd\n\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\n\nfrom sklearn.metrics import confusion_matrix\nimport itertools\n\nfrom keras.utils.np_utils import to_categorical\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom keras.optimizers import RMSprop,Adam\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau\n\nfrom sklearn.model_selection import train_test_split\nfrom keras.utils.np_utils import to_categorical","3192fd56":"train = pd.read_csv(\"..\/input\/digit-recognizer\/train.csv\")\nprint(train.shape)\ntrain.head()","3dee74d9":"test= pd.read_csv(\"..\/input\/digit-recognizer\/test.csv\")\nprint(test.shape)\ntest.head()","95189ff8":"Y_train = train[\"label\"]\n# Drop 'label' column\nX_train = train.drop(\"label\",axis = 1) ","b0b87652":"plt.figure(figsize=(15,7))\ng = sns.countplot(Y_train, palette=\"icefire\")\nplt.title(\"Number of digit classes\")\nY_train.value_counts();","d8f7b28b":"fig,ax=plt.subplots(2,3,figsize=(15,10))\n\nfor i in range(2):\n    for j in range(3):\n        select=np.random.randint(0,len(train))\n        img = train.iloc[select,1:].values\n        img = img.reshape((28,28))\n        ax[i][j].imshow(img)\n        ax[i][j].set_title(train.iloc[select,0],fontsize=20)\n        #ax[i][j].axis(\"off\")\n        #plt.show()","8765ff95":"fig,ax=plt.subplots(2,3,figsize=(15,10))\n\nfor i in range(2):\n    for j in range(3):\n        select=np.random.randint(0,len(train))\n        img = train.iloc[select,1:].values\n        img = img.reshape((28,28))\n        ax[i][j].imshow(img,cmap=\"gray\")\n        ax[i][j].set_title(train.iloc[select,0],fontsize=20)\n        ax[i][j].axis(\"off\")","9abd1509":"X_train = X_train \/ 255.0\ntest = test \/ 255.0\nprint(\"x_train shape: \",X_train.shape)\nprint(\"test shape: \",test.shape)","f7e5f047":"X_train.shape","a533c5af":"X_train = X_train.values.reshape(-1,28,28,1)\ntest = test.values.reshape(-1,28,28,1)\nprint(\"x_train shape: \",X_train.shape)\nprint(\"test shape: \",test.shape)","42c5bebb":"Y_train[:5]","6c41d7e2":"Y_train = to_categorical(Y_train, num_classes = 10)\nY_train[:5]","488d66f5":"X_train, X_val, Y_train, Y_val = train_test_split(X_train, Y_train, test_size = 0.1, random_state=2)\nprint(\"x_train shape\",X_train.shape)\nprint(\"x_test shape\",X_val.shape)\nprint(\"y_train shape\",Y_train.shape)\nprint(\"y_test shape\",Y_val.shape)","410d2a9e":"plt.imshow(X_train[10][:,:,0],cmap='gray')\nplt.show()","94a75c43":"model = Sequential()\n#\nmodel.add(Conv2D(filters = 8, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu', input_shape = (28,28,1)))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n#\nmodel.add(Conv2D(filters = 16, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation = \"softmax\"))","3391c6c2":"model.summary()","cee387be":"optimizer = Adam(lr=0.001, beta_1=0.9, beta_2=0.999)\nmodel.compile(optimizer = optimizer , loss = \"categorical_crossentropy\", metrics=[\"accuracy\"])","4a4be3b2":"epochs = 10\nbatch_size = 250","921f599a":"datagen = ImageDataGenerator(\n        featurewise_center=False,\n        samplewise_center=False,\n        featurewise_std_normalization=False,\n        samplewise_std_normalization=False,\n        zca_whitening=False,\n        rotation_range=5,\n        zoom_range = 0.1,\n        width_shift_range=0.1,\n        height_shift_range=0.1,\n        horizontal_flip=False,\n        vertical_flip=False)\n\ndatagen.fit(X_train)","34a35eb6":"history = model.fit_generator(datagen.flow(X_train,Y_train, batch_size=batch_size),\n                              epochs = epochs, validation_data = (X_val,Y_val), steps_per_epoch=X_train.shape[0] \/\/ batch_size)","cf8a61e3":"Y_train[:5]","5448e3b2":"plt.plot(history.history['val_loss'], color='b', label=\"validation loss\")\nplt.title(\"Test Loss\")\nplt.xlabel(\"Number of Epochs\")\nplt.ylabel(\"Loss\")\nplt.legend()\nplt.show()","d7415c4d":"Y_pred = model.predict(X_val)\nY_pred_classes = np.argmax(Y_pred,axis = 1)","090ffea6":"fig,ax=plt.subplots(2,3,figsize=(15,10))\n\nfor i in range(2):\n    for j in range(3):\n        select_number=np.random.randint(0,len(X_val.shape))\n        img = X_val[select_number]\n        img = img.reshape((28,28))\n        ax[i][j].imshow(img)\n        ax[i][j].set_title(Y_pred_classes[select_number],fontsize=20)\n        #ax[i][j].axis(\"off\")\n        #plt.show()","d55c21e1":"Y_pred = model.predict(X_val)\nY_pred_classes = np.argmax(Y_pred,axis = 1) \nY_true = np.argmax(Y_val,axis = 1) \nconfusion_mtx = confusion_matrix(Y_true, Y_pred_classes) \nf,ax = plt.subplots(figsize=(8, 8))\nsns.heatmap(confusion_mtx, annot=True, linewidths=0.01,cmap=\"Greens\",linecolor=\"gray\", fmt= '.1f',ax=ax)\nplt.xlabel(\"Predicted Label\")\nplt.ylabel(\"True Label\")\nplt.title(\"Confusion Matrix\")\nplt.show()","2be7eca7":"# \u0130mport Modules","e54f7d47":"# Evaluate The Model","0c348f0a":"# Number is Value Counts","9be8f83e":"# Label Encoding","eee9ae7e":"# Confusion Matrix","cf037cbb":"# Train & Test Read","a17fc9ed":"# X,Y Split","ffa8019f":"# Normalize Data","ff4ba28e":"# Create Model","d4921bba":"# Train Test Split","c80c1fc6":"# Data Replication","69557345":"# Reshape Data"}}