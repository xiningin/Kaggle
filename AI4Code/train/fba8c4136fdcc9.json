{"cell_type":{"e0fe6397":"code","edfac664":"code","1fa762e6":"code","d7d211ec":"code","4f4fddec":"code","07654000":"code","93f2ffa1":"code","b8947546":"code","cf906eb4":"code","0fc4aaef":"code","1cc5cc1f":"code","272767d6":"code","7afb1722":"code","b6a37ded":"code","f7fef97a":"code","7aac657b":"code","4e136ddf":"code","cb5228cc":"code","c3fd763b":"code","adaf243e":"code","10908fc7":"code","40015689":"code","26dd08cc":"code","e6b93fa8":"code","074329b6":"code","40c8adc1":"code","ba7ceee3":"code","bee719f4":"code","3dbcf1ce":"code","248f71a2":"code","be403486":"markdown","b16622ed":"markdown","ce6208d7":"markdown","931d5333":"markdown","e1f0d57a":"markdown","cadbfd74":"markdown","d8b913d2":"markdown","3969e86e":"markdown","f5e6ba06":"markdown","8ff91646":"markdown","5e48de7c":"markdown","e2df9be3":"markdown","90f3c64f":"markdown","bffce398":"markdown","5f3789f1":"markdown","14056e3d":"markdown","d57e254b":"markdown","ece7c58f":"markdown","fdb077a6":"markdown","13a9743f":"markdown","75e5a87a":"markdown","ff62d311":"markdown","11556d7f":"markdown","81425a80":"markdown","2aaf5fa6":"markdown","0db5f124":"markdown","3582a09c":"markdown","5deee693":"markdown","50d3968a":"markdown","1449bdfd":"markdown","6814b19d":"markdown","469fb8e2":"markdown","b2495511":"markdown","f9d39ea3":"markdown","463fd221":"markdown","6d4ba43a":"markdown","b1d424ac":"markdown","2fdb33b9":"markdown","592e9ffe":"markdown","800d3e29":"markdown","bb88c5db":"markdown","0df7e6b4":"markdown","34941490":"markdown","612aa371":"markdown","ce8f1918":"markdown","a14f1d48":"markdown","05662a86":"markdown","1363d398":"markdown","dfbe9cd7":"markdown","13b0a1d4":"markdown","38e359b7":"markdown","e867efb1":"markdown"},"source":{"e0fe6397":"import numpy as np  # useful for many scientific computing in Python\nimport pandas as pd # primary data structure library","edfac664":"!conda install -c conda-forge folium=0.5.0 --yes\nimport folium\n\nprint('Folium installed and imported!')","1fa762e6":"# define the world map\nworld_map = folium.Map()\n\n# display world map\nworld_map","d7d211ec":"# define the world map centered around Canada with a low zoom level\nworld_map = folium.Map(location=[56.130, -106.35], zoom_start=4)\n\n# display world map\nworld_map","4f4fddec":"# define the world map centered around Canada with a higher zoom level\nworld_map = folium.Map(location=[56.130, -106.35], zoom_start=8)\n\n# display world map\nworld_map","07654000":"Mexico_map=folium.Map(location=[19.432, -99.13],zoom_start=4)\n\nMexico_map\n","93f2ffa1":"# create a Stamen Toner map of the world centered around Canada\nworld_map = folium.Map(location=[56.130, -106.35], zoom_start=4, tiles='Stamen Toner')\n\n# display map\nworld_map","b8947546":"# create a Stamen Toner map of the world centered around Canada\nworld_map = folium.Map(location=[56.130, -106.35], zoom_start=4, tiles='Stamen Terrain')\n\n# display map\nworld_map","cf906eb4":"Mexico_map=folium.Map(location=[19.432, -99.13], zoom_start=6, tiles='Stamen Terrain')\n\n\nMexico_map\n","0fc4aaef":"df_incidents = pd.read_csv('https:\/\/cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud\/IBMDeveloperSkillsNetwork-DV0101EN-SkillsNetwork\/Data%20Files\/Police_Department_Incidents_-_Previous_Year__2016_.csv')\n\nprint('Dataset downloaded and read into a pandas dataframe!')","1cc5cc1f":"df_incidents.head()","272767d6":"df_incidents.shape","7afb1722":"# get the first 100 crimes in the df_incidents dataframe\nlimit = 100\ndf_incidents = df_incidents.iloc[0:limit, :]","b6a37ded":"df_incidents.shape","f7fef97a":"# San Francisco latitude and longitude values\nlatitude = 37.77\nlongitude = -122.42","7aac657b":"# create map and display it\nsanfran_map = folium.Map(location=[latitude, longitude], zoom_start=12)\n\n# display the map of San Francisco\nsanfran_map","4e136ddf":"# instantiate a feature group for the incidents in the dataframe\nincidents = folium.map.FeatureGroup()\n\n# loop through the 100 crimes and add each to the incidents feature group\nfor lat, lng, in zip(df_incidents.Y, df_incidents.X):\n    incidents.add_child(\n        folium.features.CircleMarker(\n            [lat, lng],\n            radius=5, # define how big you want the circle markers to be\n            color='yellow',\n            fill=True,\n            fill_color='blue',\n            fill_opacity=0.6\n        )\n    )\n\n# add incidents to map\nsanfran_map.add_child(incidents)","cb5228cc":"# instantiate a feature group for the incidents in the dataframe\nincidents = folium.map.FeatureGroup()\n\n# loop through the 100 crimes and add each to the incidents feature group\nfor lat, lng, in zip(df_incidents.Y, df_incidents.X):\n    incidents.add_child(\n        folium.features.CircleMarker(\n            [lat, lng],\n            radius=5, # define how big you want the circle markers to be\n            color='yellow',\n            fill=True,\n            fill_color='blue',\n            fill_opacity=0.6\n        )\n    )\n\n# add pop-up text to each marker on the map\nlatitudes = list(df_incidents.Y)\nlongitudes = list(df_incidents.X)\nlabels = list(df_incidents.Category)\n\nfor lat, lng, label in zip(latitudes, longitudes, labels):\n    folium.Marker([lat, lng], popup=label).add_to(sanfran_map)    \n    \n# add incidents to map\nsanfran_map.add_child(incidents)","c3fd763b":"# create map and display it\nsanfran_map = folium.Map(location=[latitude, longitude], zoom_start=12)\n\n# loop through the 100 crimes and add each to the map\nfor lat, lng, label in zip(df_incidents.Y, df_incidents.X, df_incidents.Category):\n    folium.features.CircleMarker(\n        [lat, lng],\n        radius=5, # define how big you want the circle markers to be\n        color='yellow',\n        fill=True,\n        popup=label,\n        fill_color='blue',\n        fill_opacity=0.6\n    ).add_to(sanfran_map)\n\n# show map\nsanfran_map","adaf243e":"from folium import plugins\n\n# let's start again with a clean copy of the map of San Francisco\nsanfran_map = folium.Map(location = [latitude, longitude], zoom_start = 12)\n\n# instantiate a mark cluster object for the incidents in the dataframe\nincidents = plugins.MarkerCluster().add_to(sanfran_map)\n\n# loop through the dataframe and add each data point to the mark cluster\nfor lat, lng, label, in zip(df_incidents.Y, df_incidents.X, df_incidents.Category):\n    folium.Marker(\n        location=[lat, lng],\n        icon=None,\n        popup=label,\n    ).add_to(incidents)\n\n# display map\nsanfran_map","10908fc7":"!conda install -c anaconda xlrd --yes","40015689":"df_can = pd.read_excel('https:\/\/cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud\/IBMDeveloperSkillsNetwork-DV0101EN-SkillsNetwork\/Data%20Files\/Canada.xlsx',\n                     sheet_name='Canada by Citizenship',\n                     skiprows=range(20),\n                     skipfooter=2)\n\nprint('Data downloaded and read into a dataframe!')","26dd08cc":"df_can.head()","e6b93fa8":"print(df_can.shape)","074329b6":"# clean up the dataset to remove unnecessary columns (eg. REG) \ndf_can.drop(['AREA','REG','DEV','Type','Coverage'], axis=1, inplace=True)\n\n# let's rename the columns so that they make sense\ndf_can.rename(columns={'OdName':'Country', 'AreaName':'Continent','RegName':'Region'}, inplace=True)\n\n# for sake of consistency, let's also make all column labels of type string\ndf_can.columns = list(map(str, df_can.columns))\n\n# add total column\ndf_can['Total'] = df_can.sum(axis=1)\n\n# years that we will be using in this lesson - useful for plotting later on\nyears = list(map(str, range(1980, 2014)))\nprint ('data dimensions:', df_can.shape)","40c8adc1":"df_can.head()","ba7ceee3":"# download countries geojson file\n!wget --quiet https:\/\/cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud\/IBMDeveloperSkillsNetwork-DV0101EN-SkillsNetwork\/Data%20Files\/world_countries.json\n    \nprint('GeoJSON file downloaded!')","bee719f4":"world_geo = r'world_countries.json' # geojson file\n\n# create a plain world map\nworld_map = folium.Map(location=[0, 0], zoom_start=2)","3dbcf1ce":"# generate choropleth map using the total immigration of each country to Canada from 1980 to 2013\nworld_map.choropleth(\n    geo_data=world_geo,\n    data=df_can,\n    columns=['Country', 'Total'],\n    key_on='feature.properties.name',\n    fill_color='YlOrRd', \n    fill_opacity=0.7, \n    line_opacity=0.2,\n    legend_name='Immigration to Canada'\n)\n\n# display map\nworld_map","248f71a2":"world_geo = r'world_countries.json'\n\n# create a numpy array of length 6 and has linear spacing from the minium total immigration to the maximum total immigration\nthreshold_scale = np.linspace(df_can['Total'].min(),\n                              df_can['Total'].max(),\n                              6, dtype=int)\nthreshold_scale = threshold_scale.tolist() # change the numpy array to a list\nthreshold_scale[-1] = threshold_scale[-1] + 1 # make sure that the last value of the list is greater than the maximum immigration\n\n# let Folium determine the scale.\nworld_map = folium.Map(location=[0, 0], zoom_start=2)\nworld_map.choropleth(\n    geo_data=world_geo,\n    data=df_can,\n    columns=['Country', 'Total'],\n    key_on='feature.properties.name',\n    threshold_scale=threshold_scale,\n    fill_color='YlOrRd', \n    fill_opacity=0.7, \n    line_opacity=0.2,\n    legend_name='Immigration to Canada',\n    reset=True\n)\nworld_map","be403486":"Let's create a Stamen Terrain map of Canada with zoom level 4.\n","b16622ed":"## Table of Contents\n\n<div class=\"alert alert-block alert-info\" style=\"margin-top: 20px\">\n\n1.  [Exploring Datasets with _p_andas](#0)<br>\n2.  [Downloading and Prepping Data](#2)<br>\n3.  [Introduction to Folium](#4) <br>\n4.  [Map with Markers](#6) <br>\n5.  [Choropleth Maps](#8) <br>\n    <\/div>\n","ce6208d7":"Map of Mexico with a zoom level of 4.\n","931d5333":"You can customize this default definition of the world map by specifying the centre of your map and the intial zoom level. \n\nAll locations on a map are defined by their respective _Latitude_ and _Longitude_ values. So you can create a map and pass in a center of _Latitude_ and _Longitude_ values of **[0, 0]**. \n\nFor a defined center, you can also define the intial zoom level into that location when the map is rendered. **The higher the zoom level the more the map is zoomed into the center**.\n\nLet's create a map centered around Canada and play with the zoom level to see how it affects the rendered map.\n","e1f0d57a":"In order to create a `Choropleth` map, we need a GeoJSON file that defines the areas\/boundaries of the state, county, or country that we are interested in. In our case, since we are endeavoring to create a world map, we want a GeoJSON that defines the boundaries of all world countries. Let's name it **world_countries.json**.\n","cadbfd74":"The other proper remedy is to group the markers into different clusters. Each cluster is then represented by the number of crimes in each neighborhood. These clusters can be thought of as pockets of San Francisco which you can then analyze separately.\n\nTo implement this, we start off by instantiating a _MarkerCluster_ object and adding all the data points in the dataframe to this object.\n","d8b913d2":"Another cool feature of **Folium** is that you can generate different map styles.\n","3969e86e":"As you can see, the higher the zoom level the more the map is zoomed into the given center.\n","f5e6ba06":"Now that we reduced the data a little bit, let's visualize where these crimes took place in the city of San Francisco. We will use the default style and we will initialize the zoom level to 12. \n","8ff91646":"#### Let's install **Folium**\n","5e48de7c":"Feel free to zoom in and out to see how this style compares to the default one.\n","e2df9be3":"Let's download and import the data on police department incidents using _pandas_ `read_csv()` method.\n","90f3c64f":"### A. Stamen Toner Maps\n\nThese are high-contrast B+W (black and white) maps. They are perfect for data mashups and exploring river meanders and coastal zones. \n","bffce398":"Let's take a look at the first five items of our cleaned dataframe.\n","5f3789f1":"**Folium** is not available by default. So, we first need to install it before we are able to import it.\n","14056e3d":"# Generating Maps with Python\n\n-   Visualize geospatial data with Folium\n","d57e254b":"## Introduction\n\nIn this lab, we will learn how to create maps for different objectives. To do that, we will part ways with Matplotlib and work with another Python visualization library, namely **Folium**. What is nice about **Folium** is that it was developed for the sole purpose of visualizing geospatial data. While other libraries are available to visualize geospatial data, such as **plotly**, they might have a cap on how many API calls you can make within a defined time frame. **Folium**, on the other hand, is completely free.\n","ece7c58f":"# Introduction to Folium <a id=\"4\"><\/a>\n","fdb077a6":"So each row consists of 13 features:\n\n> 1.  **IncidntNum**: Incident Number\n> 2.  **Category**: Category of crime or incident\n> 3.  **Descript**: Description of the crime or incident\n> 4.  **DayOfWeek**: The day of week on which the incident occurred\n> 5.  **Date**: The Date on which the incident occurred\n> 6.  **Time**: The time of day on which the incident occurred\n> 7.  **PdDistrict**: The police department district\n> 8.  **Resolution**: The resolution of the crime in terms whether the perpetrator was arrested or not\n> 9.  **Address**: The closest address to where the incident took place\n> 10. **X**: The longitude value of the crime location \n> 11. **Y**: The latitude value of the crime location\n> 12. **Location**: A tuple of the latitude and the longitude values\n> 13. **PdId**: The police department ID\n","13a9743f":"Now let's superimpose the locations of the crimes onto the map. The way to do that in **Folium** is to create a _feature group_ with its own features and style and then add it to the sanfran_map.\n","75e5a87a":"Let's create the map again with a higher zoom level\n","ff62d311":"# Choropleth Maps <a id=\"8\"><\/a>\n\nA `Choropleth` map is a thematic map in which areas are shaded or patterned in proportion to the measurement of the statistical variable being displayed on the map, such as population density or per-capita income. The choropleth map provides an easy way to visualize how a measurement varies across a geographic area or it shows the level of variability within a region. Below is a `Choropleth` map of the US depicting the population by square mile per state.\n\n<img src = \"https:\/\/cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud\/IBMDeveloperSkillsNetwork-DV0101EN-SkillsNetwork\/labs\/Module%205\/images\/2000_census_population_density_map_by_state.png\" width = 600> \n","11556d7f":"Let's find out how many entries there are in our dataset.\n","81425a80":"### B. Stamen Terrain Maps\n\nThese are maps that feature hill shading and natural vegetation colors. They showcase advanced labeling and linework generalization of dual-carriageway roads.\n","2aaf5fa6":"Generating the world map is straigtforward in **Folium**. You simply create a **Folium** _Map_ object and then you display it. What is attactive about **Folium** maps is that they are interactive, so you can zoom into any region of interest despite the initial zoom level. \n","0db5f124":"Feel free to zoom in and out to see how this style compares to Stamen Toner and the default style.\n","3582a09c":"# Downloading and Prepping Data <a id=\"2\"><\/a>\n","5deee693":"Let's take a look at the first five items in our dataset.\n","50d3968a":"# Exploring Datasets with _pandas_ and Matplotlib<a id=\"0\"><\/a>\n\nToolkits: This lab heavily relies on [_pandas_](http:\/\/pandas.pydata.org?cm_mmc=Email_Newsletter-_-Developer_Ed%2BTech-_-WW_WW-_-SkillsNetwork-Courses-IBMDeveloperSkillsNetwork-DV0101EN-SkillsNetwork-20297740&cm_mmca1=000026UJ&cm_mmca2=10006555&cm_mmca3=M12345678&cvosrc=email.Newsletter.M12345678&cvo_campaign=000026UJ&cm_mmc=Email_Newsletter-_-Developer_Ed%2BTech-_-WW_WW-_-SkillsNetwork-Courses-IBMDeveloperSkillsNetwork-DV0101EN-SkillsNetwork-20297740&cm_mmca1=000026UJ&cm_mmca2=10006555&cm_mmca3=M12345678&cvosrc=email.Newsletter.M12345678&cvo_campaign=000026UJ) and [**Numpy**](http:\/\/www.numpy.org?cm_mmc=Email_Newsletter-_-Developer_Ed%2BTech-_-WW_WW-_-SkillsNetwork-Courses-IBMDeveloperSkillsNetwork-DV0101EN-SkillsNetwork-20297740&cm_mmca1=000026UJ&cm_mmca2=10006555&cm_mmca3=M12345678&cvosrc=email.Newsletter.M12345678&cvo_campaign=000026UJ&cm_mmc=Email_Newsletter-_-Developer_Ed%2BTech-_-WW_WW-_-SkillsNetwork-Courses-IBMDeveloperSkillsNetwork-DV0101EN-SkillsNetwork-20297740&cm_mmca1=000026UJ&cm_mmca2=10006555&cm_mmca3=M12345678&cvosrc=email.Newsletter.M12345678&cvo_campaign=000026UJ) for data wrangling, analysis, and visualization. The primary plotting library we will explore in this lab is [**Folium**](https:\/\/github.com\/python-visualization\/folium\/).\n\nDatasets: \n\n1.  San Francisco Police Department Incidents for the year 2016 - [Police Department Incidents](https:\/\/data.sfgov.org\/Public-Safety\/Police-Department-Incidents-Previous-Year-2016-\/ritf-b9ki?cm_mmc=Email_Newsletter-_-Developer_Ed%2BTech-_-WW_WW-_-SkillsNetwork-Courses-IBMDeveloperSkillsNetwork-DV0101EN-SkillsNetwork-20297740&cm_mmca1=000026UJ&cm_mmca2=10006555&cm_mmca3=M12345678&cvosrc=email.Newsletter.M12345678&cvo_campaign=000026UJ) from San Francisco public data portal. Incidents derived from San Francisco Police Department (SFPD) Crime Incident Reporting system. Updated daily, showing data for the entire year of 2016. Address and location has been anonymized by moving to mid-block or to an intersection.    \n\n2.  Immigration to Canada from 1980 to 2013 - [International migration flows to and from selected countries - The 2015 revision](http:\/\/www.un.org\/en\/development\/desa\/population\/migration\/data\/empirical2\/migrationflows.shtml?cm_mmc=Email_Newsletter-_-Developer_Ed%2BTech-_-WW_WW-_-SkillsNetwork-Courses-IBMDeveloperSkillsNetwork-DV0101EN-SkillsNetwork-20297740&cm_mmca1=000026UJ&cm_mmca2=10006555&cm_mmca3=M12345678&cvosrc=email.Newsletter.M12345678&cvo_campaign=000026UJ) from United Nation's website. The dataset contains annual data on the flows of international migrants as recorded by the countries of destination. The data presents both inflows and outflows according to the place of birth, citizenship or place of previous \/ next residence both for foreigners and nationals. For this lesson, we will focus on the Canadian Immigration data\n","1449bdfd":"Download the dataset and read it into a _pandas_ dataframe:\n","6814b19d":"Map of Mexico to visualize its hill shading and natural vegetation. Use a zoom level of 6.\n","469fb8e2":"## Thank You","b2495511":"Isn't this really cool? Now you are able to know what crime category occurred at each marker.\n\nIf you find the map to be so congested will all these markers, there are two remedies to this problem. The simpler solution is to remove these location markers and just add the text to the circle markers themselves as follows:\n","f9d39ea3":"Let's find out how many entries there are in our dataset.\n","463fd221":"Folium is a powerful Python library that helps you create several types of Leaflet maps. The fact that the Folium results are interactive makes this library very useful for dashboard building.\n\nFrom the official Folium documentation page:\n\n> Folium builds on the data wrangling strengths of the Python ecosystem and the mapping strengths of the Leaflet.js library. Manipulate your data in Python, then visualize it in on a Leaflet map via Folium.\n\n> Folium makes it easy to visualize data that's been manipulated in Python on an interactive Leaflet map. It enables both the binding of data to a map for choropleth visualizations as well as passing Vincent\/Vega visualizations as markers on the map.\n\n> The library has a number of built-in tilesets from OpenStreetMap, Mapbox, and Stamen, and supports custom tilesets with Mapbox or Cloudmade API keys. Folium supports both GeoJSON and TopoJSON overlays, as well as the binding of data to those overlays to create choropleth maps with color-brewer color schemes.\n","6d4ba43a":"Much better now! Feel free to play around with the data and perhaps create `Choropleth` maps for individuals years, or perhaps decades, and see how they compare with the entire period from 1980 to 2013.\n","b1d424ac":"Notice how the legend is displaying a negative boundary or threshold. Let's fix that by defining our own thresholds and starting with 0 instead of -6,918!\n","2fdb33b9":"Go ahead. Try zooming in and out of the rendered map above.\n","592e9ffe":"Let's take a look at the first five items in our dataset.\n","800d3e29":"Let's confirm that our dataframe now consists only of 100 crimes.\n","bb88c5db":"As per our `Choropleth` map legend, the darker the color of a country and the closer the color to red, the higher the number of immigrants from that country. Accordingly, the highest immigration over the course of 33 years (from 1980 to 2013) was from China, India, and the Philippines, followed by Poland, Pakistan, and interestingly, the US.\n","0df7e6b4":"# Maps with Markers <a id=\"6\"><\/a>\n","34941490":"You can also add some pop-up text that would get displayed when you hover over a marker. Let's make each marker display the category of the crime when hovered over.\n","612aa371":"Import Primary Modules:\n","ce8f1918":"Notice how when you zoom out all the way, all markers are grouped into one cluster, _the global cluster_, of 100 markers or crimes, which is the total number of crimes in our dataframe. Once you start zooming in, the _global cluster_ will start breaking up into smaller clusters. Zooming in all the way will result in individual markers.\n","a14f1d48":"Zoom in and notice how the borders start showing as you zoom in, and the displayed country names are in English.\n","05662a86":"And now to create a `Choropleth` map, we will use the _choropleth_ method with the following main parameters:\n\n1.  geo_data, which is the GeoJSON file.\n2.  data, which is the dataframe containing the data.\n3.  columns, which represents the columns in the dataframe that will be used to create the `Choropleth` map.\n4.  key_on, which is the key or variable in the GeoJSON file that contains the name of the variable of interest. To determine that, you will need to open the GeoJSON file using any text editor and note the name of the key or variable that contains the name of the countries, since the countries are our variable of interest. In this case, **name** is the key in the GeoJSON file that contains the name of the countries. Note that this key is case_sensitive, so you need to pass exactly as it exists in the GeoJSON file.\n","1363d398":"So the dataframe consists of 150,500 crimes, which took place in the year 2016. In order to reduce computational cost, let's just work with the first 100 incidents in this dataset.\n","dfbe9cd7":"Now that we have the GeoJSON file, let's create a world map, centered around **[0, 0]** _latitude_ and _longitude_ values, with an intial zoom level of 2.\n","13b0a1d4":"Now, let's create our own `Choropleth` map of the world depicting immigration from various countries to Canada.\n\nLet's first download and import our primary Canadian immigration dataset using _pandas_ `read_excel()` method. You would need to install the **xlrd** module.","38e359b7":"Download the dataset and read it into a _pandas_ dataframe:\n","e867efb1":"Let's create a Stamen Toner map of canada with a zoom level of 4.\n"}}