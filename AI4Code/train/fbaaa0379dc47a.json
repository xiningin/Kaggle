{"cell_type":{"ce628f2e":"code","063c67d0":"code","b895bad4":"code","01c01112":"code","8822e288":"code","b8ee33af":"code","52ee8d3e":"code","7919524a":"code","aeb2a0ec":"code","4723160a":"code","9bf1e237":"code","e8f667ff":"code","51bcd313":"code","8e905407":"code","d9e0de53":"code","d2c1405c":"code","7d646950":"markdown","8464d7c0":"markdown","020af0d2":"markdown","9a936584":"markdown","218887ce":"markdown","f8dea65b":"markdown","7c80ced8":"markdown","c875b772":"markdown","50ce87aa":"markdown","0cfc0cf9":"markdown","8cd5607e":"markdown","f2caabf2":"markdown","e45e5fdf":"markdown","1ee413f2":"markdown","e875fde6":"markdown","8b8056ff":"markdown","bd54215e":"markdown","e26167f1":"markdown","e0506164":"markdown","16691314":"markdown","d92b5914":"markdown","a7551372":"markdown","c2f040a2":"markdown","cd9f86cb":"markdown","40e974e7":"markdown","46c2f016":"markdown","f59d0e41":"markdown"},"source":{"ce628f2e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","063c67d0":"!pip install pmdarima","b895bad4":"import os\nimport warnings\nwarnings.filterwarnings('ignore')\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nplt.style.use('fivethirtyeight')\nfrom pylab import rcParams\nrcParams['figure.figsize'] = 10, 6\nfrom statsmodels.tsa.stattools import adfuller\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom pmdarima.arima import auto_arima\n\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\nimport math","01c01112":"dateparse = lambda dates: pd.datetime.strptime(dates, '%Y-%m-%d')\nstock_data = pd.read_csv('..\/input\/price-volume-data-for-all-us-stocks-etfs\/Stocks\/acgl.us.txt',sep=',', index_col='Date', parse_dates=['Date'], date_parser=dateparse).fillna(0)","8822e288":"stock_data.head()","b8ee33af":"#plot close price\nplt.figure(figsize=(10,6))\nplt.grid(True)\nplt.xlabel('Date')\nplt.ylabel('Close Prices')\nplt.plot(stock_data['Close'])\nplt.title('ARCH CAPITAL GROUP closing price')\nplt.show()","52ee8d3e":"#Distribution of the dataset\nstock_data['Close'].plot(kind='kde')","7919524a":"#Test for staionarity\ndef test_stationarity(timeseries):\n    #Determing rolling statistics\n    rolmean = timeseries.rolling(12).mean()\n    rolstd = timeseries.rolling(12).std()\n    #Plot rolling statistics:\n    plt.plot(timeseries, color='blue',label='Original')\n    plt.plot(rolmean, color='red', label='Rolling Mean')\n    plt.plot(rolstd, color='black', label = 'Rolling Std')\n    plt.legend(loc='best')\n    plt.title('Rolling Mean and Standard Deviation')\n    plt.show(block=False)\n    \n    print(\"Results of dickey fuller test\")\n    adft = adfuller(timeseries,autolag='AIC')\n    # output for dft will give us without defining what the values are.\n    #hence we manually write what values does it explains using a for loop\n    output = pd.Series(adft[0:4],index=['Test Statistics','p-value','No. of lags used','Number of observations used'])\n    for key,values in adft[4].items():\n        output['critical value (%s)'%key] =  values\n    print(output)\n    \ntest_stationarity(stock_data['Close'])","aeb2a0ec":"#To separate the trend and the seasonality from a time series, \n# we can decompose the series using the following code.\nresult = seasonal_decompose(stock_data['Close'], model='multiplicative', freq = 30)\nfig = plt.figure()  \nfig = result.plot()  \nfig.set_size_inches(16, 9)","4723160a":"#if not stationary then eliminate trend\n#Eliminate trend\nfrom pylab import rcParams\nrcParams['figure.figsize'] = 10, 6\ndf_log = np.log(stock_data['Close'])\nmoving_avg = df_log.rolling(12).mean()\nstd_dev = df_log.rolling(12).std()\nplt.legend(loc='best')\nplt.title('Moving Average')\nplt.plot(std_dev, color =\"black\", label = \"Standard Deviation\")\nplt.plot(moving_avg, color=\"red\", label = \"Mean\")\nplt.legend()\nplt.show()","9bf1e237":"#split data into train and training set\ntrain_data, test_data = df_log[3:int(len(df_log)*0.9)], df_log[int(len(df_log)*0.9):]\nplt.figure(figsize=(10,6))\nplt.grid(True)\nplt.xlabel('Dates')\nplt.ylabel('Closing Prices')\nplt.plot(df_log, 'green', label='Train data')\nplt.plot(test_data, 'blue', label='Test data')\nplt.legend()","e8f667ff":"model_autoARIMA = auto_arima(train_data, start_p=0, start_q=0,\n                      test='adf',       # use adftest to find optimal 'd'\n                      max_p=3, max_q=3, # maximum p and q\n                      m=1,              # frequency of series\n                      d=None,           # let model determine 'd'\n                      seasonal=False,   # No Seasonality\n                      start_P=0, \n                      D=0, \n                      trace=True,\n                      error_action='ignore',  \n                      suppress_warnings=True, \n                      stepwise=True)\nprint(model_autoARIMA.summary())\nmodel_autoARIMA.plot_diagnostics(figsize=(15,8))\nplt.show()","51bcd313":"#Modeling\n# Build Model\nmodel = ARIMA(train_data, order=(1,1,2))  \nfitted = model.fit(disp=-1)  \n\nprint(fitted.summary())","8e905407":"# Forecast\nfc, se, conf = fitted.forecast(321, alpha=0.05)  # 95% conf","d9e0de53":"# Make as pandas series\nfc_series = pd.Series(fc, index=test_data.index)\nlower_series = pd.Series(conf[:, 0], index=test_data.index)\nupper_series = pd.Series(conf[:, 1], index=test_data.index)\n# Plot\nplt.figure(figsize=(10,5), dpi=100)\nplt.plot(train_data, label='training data')\nplt.plot(test_data, color = 'blue', label='Actual Stock Price')\nplt.plot(fc_series, color = 'orange',label='Predicted Stock Price')\nplt.fill_between(lower_series.index, lower_series, upper_series, \n                 color='k', alpha=.10)\nplt.title('ARCH CAPITAL GROUP Stock Price Prediction')\nplt.xlabel('Time')\nplt.ylabel('ARCH CAPITAL GROUP Stock Price')\nplt.legend(loc='upper left', fontsize=8)\nplt.show()","d2c1405c":"# report performance\nmse = mean_squared_error(test_data, fc)\nprint('MSE: '+str(mse))\nmae = mean_absolute_error(test_data, fc)\nprint('MAE: '+str(mae))\nrmse = math.sqrt(mean_squared_error(test_data, fc))\nprint('RMSE: '+str(rmse))\nmape = np.mean(np.abs(fc - test_data)\/np.abs(test_data))\nprint('MAPE: '+str(mape))","7d646950":"Here in this notebook we will forecast the stock price of ARCH CAPITAL GROUP using ARIMA model\n\n### What is ARIMA?\nAutoregressive Integrated Moving Average (ARIMA) Model converts non-stationary data to stationary data before working on it. It is one of the most popular models to predict linear time series data.\n\nARIMA model has been used extensively in the field of finance and economics as it is known to be robust, efficient and has a strong potential for short-term share market prediction.","8464d7c0":"### Visualize the per day closing price of the stock.","020af0d2":"**ADF (Augmented Dickey-Fuller) Test**\n\nThe Dickey-Fuller test is one of the most popular statistical tests. It can be used to determine the presence of unit root in the series, and hence help us understand if the series is stationary or not. The null and alternate hypothesis of this test is:\n\nNull Hypothesis: The series has a unit root (value of a =1)\n\nAlternate Hypothesis: The series has no unit root.\n\nIf we fail to reject the null hypothesis, we can say that the series is non-stationary. This means that the series can be linear or difference stationary.\n\nIf both mean and standard deviation are flat lines(constant mean and constant variance), the series becomes stationary.","9a936584":"### Import Libraries","218887ce":"Next, create an ARIMA model with provided optimal parameters p, d and q.\n\nSo the Auto ARIMA model provided the value of p,d, and q as 1, 1 and 2 respectively.","f8dea65b":"Now we are going to create an ARIMA model and will train it with the closing price of the stock on the train data. So let us split the data into training and test set and visualize it.","7c80ced8":"As you can see our model did quite handsomely. Let us also check the commonly used accuracy metrics to judge forecast results:","c875b772":"Through the above graph, we can see the increasing mean and standard deviation and hence our series is not stationary.","50ce87aa":"### Eliminate trend","0cfc0cf9":"## Create an ARIMA model","8cd5607e":"### Auto ARIMA","f2caabf2":"### Plot the results","e45e5fdf":"Its time to choose parameters p,q,d for ARIMA model. Now we are going to use Auto ARIMA to get the best parameters without even plotting ACF and PACF graphs.","1ee413f2":"### So how to interpret the plot diagnostics?\n\nTop left: The residual errors seem to fluctuate around a mean of zero and have a uniform variance.\n\nTop Right: The density plot suggest normal distribution with mean zero.\n\nBottom left: All the dots should fall perfectly in line with the red line. Any significant deviations would imply the distribution is skewed.\n\nBottom Right: The Correlogram, aka, ACF plot shows the residual errors are not autocorrelated. Any autocorrelation would imply that there is some pattern in the residual errors which are not explained in the model. So you will need to look for more X\u2019s (predictors) to the model.\n\nOverall, it seems to be a good fit. Let\u2019s start forecasting the stock prices.","e875fde6":"### We can also visualize the data in our series through a probability distribution too.\n","8b8056ff":"Also, a given time series is thought to consist of three systematic components including level, trend, seasonality, and one non-systematic component called noise.\n\nThese components are defined as follows:\n\nLevel: The average value in the series.\n\nTrend: The increasing or decreasing value in the series.\n\nSeasonality: The repeating short-term cycle in the series.\n\nNoise: The random variation in the series.\n\nFirst, we need to check if a series is stationary or not because time series analysis only works with stationary data.","bd54215e":"### Separate Trend and Seasonality from the time series.","e26167f1":"## Stock market forecasting using Time Series analysis","e0506164":"![stock9-getty-1200.webp](attachment:stock9-getty-1200.webp)","16691314":"**Auto ARIMA**: Automatically discover the optimal order for an ARIMA model.\nThe auto_arima function seeks to identify the most optimal parameters for an ARIMA model, and returns a fitted ARIMA model. This function is based on the commonly-used R function, forecast::auto.arima.\n\nThe auro_arima function works by conducting differencing tests (i.e., Kwiatkowski\u2013Phillips\u2013Schmidt\u2013Shin, Augmented Dickey-Fuller or Phillips\u2013Perron) to determine the order of differencing, d, and then fitting models within ranges of defined start_p, max_p, start_q, max_q ranges. If the seasonal optional is enabled, auto_arima also seeks to identify the optimal P and Q hyper- parameters after conducting the Canova-Hansen to determine the optimal order of seasonal differencing, D.","d92b5914":"We see that the p-value is greater than 0.05 so we cannot reject the Null hypothesis. Also, the test statistics is greater than the critical values. so the data is non-stationary.\n\nIn order to perform a time series analysis, we may need to separate seasonality and trend from our series. The resultant series will become stationary through this process.","a7551372":"## **So let's check for stationarity:**","c2f040a2":"### Forecast\n\nNow let's start forecast the stock prices on the test dataset keeping 95% confidence level.","cd9f86cb":"#### What is a Stock market?\nThe stock market is a market that enables the seamless exchange of buying and selling of company stocks. Every Stock Exchange has its own Stock Index value. The index is the average value that is calculated by combining several stocks. This helps in representing the entire stock market and predicting the market\u2019s movement over time. The stock market can have a huge impact on people and the country\u2019s economy as a whole. Therefore, predicting the stock trends in an efficient manner can minimize the risk of loss and maximize profit.","40e974e7":"### ARIMA model with optimal parameters","46c2f016":"We start by taking a log of the series to reduce the magnitude of the values and reduce the rising trend in the series. Then after getting the log of the series, we find the rolling average of the series. A rolling average is calculated by taking input for the past 12 months and giving a mean consumption value at every point further ahead in series.","f59d0e41":"Around 2.5% MAPE implies the model is about 97.5% accurate in predicting the next 15 observations."}}