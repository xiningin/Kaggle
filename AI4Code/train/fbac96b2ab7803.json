{"cell_type":{"87e1359d":"code","034d8496":"code","1963a749":"code","9a4a4208":"code","f7403cc5":"code","b1c1a151":"code","d200d414":"code","d5ae4a12":"code","8976f883":"code","af075a3e":"code","9d1d594b":"code","68a1e6fe":"code","bb293fa2":"code","2877f3b2":"code","113bf367":"code","623d9705":"code","f1c63e8a":"code","1f558fa9":"code","d4a83aa8":"markdown","24ea3ee4":"markdown","41ff4549":"markdown","3939b2a7":"markdown","9569dd13":"markdown"},"source":{"87e1359d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n#Tools\nfrom datetime import datetime as dt\nfrom datetime import timedelta\n\n#IPython manager\nfrom IPython.display import display\n\n#Graphs\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n%matplotlib inline\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\ndf = pd.read_csv(\"..\/input\/prices.csv\", parse_dates=['date'])\ndf.head()\n# Any results you write to the current directory are saved as output.","034d8496":"ticker_list = df['symbol'].unique() \nprint(ticker_list)","1963a749":"date_list = df['date'].unique() \ndate_list","9a4a4208":"df.sample(10)","f7403cc5":"year_list = df[\"date\"].dt.year\nprint(year_list.unique())","b1c1a151":"#Create a new df for Apple tickers\ndf_AMZN = df[df['symbol'] == 'AMZN']\n","d200d414":"#Sort the dataframe by date\ndf_AMZN.sort_values(by=['date'], inplace=True, ascending= True)\n# reset index to have sequential numbering\ndf_AMZN = df_AMZN.reset_index(drop=True)\n\ndf_AMZN.head()","d5ae4a12":"# Create a new column to show the change in percentage between open and close\ndf_AMZN['change'] = (df_AMZN['close'] \/ df_AMZN['open']-1).fillna(0)\ndf_AMZN.head()","8976f883":"print(df_AMZN.index.max())","af075a3e":"print(df_AMZN.loc[df_AMZN.index.max()-261]['open'])","9d1d594b":"# create a list of probable % change between open and close\nrise = [.0009,.001,.002,.003,.004,.005,.008,.01]\nfall = [-.01,-.011,-.012,-.014,-.015,-.016,-.02,-.04]\n\nd = 251 # Nummber of days to invest (number of working days in year)\ninitial_amt = 1000 # initial amount to invest in dollars\ntotal_profit = np.zeros([8, 8],dtype = float)","68a1e6fe":"df_AMZN.shape","bb293fa2":"# define the starting date to invest from\nstart_index = (df_AMZN.index.max()-d)\nstart_index","2877f3b2":"#Convert dollars to invest into shares based on open price of the first day\n#the 2016 data starts on 4 Jan, we find the open value on that date\nstart_open = df_AMZN.loc[start_index]['open']\n# use the first days open value to deduce number of shares\nshares = initial_amt\/start_open\n\nprint(shares)","113bf367":"df_AMZN.reset_index(inplace=True)","623d9705":"x=0 # iterator for the rise loop\n#loops through posible percentage increase in stock price\nfor b in rise: \n    \n    y=0#iterator for the fall loop\n    #loops through posible percentage decrease in stock price\n    for s in fall:\n        \n        available_funds = 0.0\n        temp_shares= shares\n        #loop throught using index\n        for i in range(start_index,df_AMZN.index.max()):\n            \n            daily_change = df_AMZN.loc[i]['change']\n            share_price = df_AMZN.loc[i]['open']\n            \n            #Sell shares if price ffalls below certain percentage\n            if daily_change <=s and temp_shares>0.0:\n                #liquidate shares \n                available_funds = temp_shares*share_price\n                temp_shares = 0\n            #Buys shares if price rises above certain percentage\n            elif daily_change >= b and available_funds>0:\n                temp_shares = available_funds\/share_price\n                available_funds = 0\n            else:\n                continue\n        \n        #Total funds generated at the end of the cycle\n        if temp_shares > 0:\n            final_fund = temp_shares*share_price\n        else:\n            final_fund = available_funds\n        \n        # Calculate profit\n        #print(final_fund)\n        profit = final_fund-initial_amt\n        total_profit[y,x] = profit\n        y+=1\n    x+=1\nprint(total_profit)      ","f1c63e8a":"max_profit = np.amax(total_profit)\n# find the index of the highest profit\nresult = np.where(total_profit == max_profit)\n\nfinal_rise = rise[int(result[1])]\nfinal_fall = fall[int(result[0])]\nprint(max_profit, final_rise, final_fall)","1f558fa9":"print('The maximum profit we made Amazon stock investment of $1000 is ${:,.2f}'.format(max_profit),'\/n')\nprint('The positive change percentage delimiter used ',final_rise)\nprint('The negative change percentage delimiter used ',final_fall)","d4a83aa8":"Below we use a to function loop through all the rise and fall percentages and and itterate through the dates to calculate the possible profit. It also populates the profit matrix, which finally helps determine the indeal percentage settings.","24ea3ee4":"Inorder to decide the ideal value for percentage change we cross validate different values of change using lists 'rise' and 'fall'. The code below loops through these two lists of percentage change tabulating total profit in a 2D array name 'total_profit'(I alway forget what my varables are meant for).\n\nIdeally the code below should have been a function, so you could easily change out the Amazon ticker for anotherr ticker. But for now we will go with this.","41ff4549":"<img src=\"https:\/\/media.breitbart.com\/media\/2017\/09\/wi\/ap\/07\/19d99j5-640x430.jpg\" \/>","3939b2a7":"The data we have available is daily the SNP 500 stock data from 2010 to 2016.\n\nThis code analyses historical Amazon stock data and decides wether to buy apple stock based on the change in the previous days price fluctuation. If the price falls below a certain percentage the code decides to sell the stock and if the price rises above a certain percentage the code decides  to buy the stocks back.But if the change in price does not fullfill the benchmark of either buy or sell the code decides to hold its previous position. The deciding percentage to both buy or sell is selected by cross validation.\n\nFor convinience we decide our innitial investment to be 1000 dollars and we invest for a period of 1 year, i.e from 1\/1\/2016 to 12\/30\/2016.","9569dd13":"## Main Function"}}