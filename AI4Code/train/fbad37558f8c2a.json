{"cell_type":{"d42611f3":"code","c122be0a":"code","21c06788":"code","045fad54":"code","d137e0d1":"code","d9573c6c":"code","3dc0a781":"code","ecdbfc1f":"code","1c169d2b":"code","9c80de15":"code","7e83848b":"code","5aa44a28":"code","0db7e1d5":"code","f98d54c6":"code","bb2d48bf":"code","dfbffb4f":"code","c6be07d8":"code","5fae18d8":"code","384d3e28":"code","600d389f":"code","889fa7e7":"code","133d3b86":"code","38d44b45":"code","40220d15":"code","d65cdef3":"code","27776f22":"code","335ae76a":"code","7dedab56":"code","85858cbb":"code","f36d6590":"markdown","ddd73ad8":"markdown","e2783862":"markdown","62eea565":"markdown","7c4aaa7d":"markdown","e842fd17":"markdown","f238aca4":"markdown","ff983eee":"markdown","0d05143e":"markdown","ee209a40":"markdown","bb475c90":"markdown","09e87814":"markdown","95ba555b":"markdown","1309fee7":"markdown","006fa4ed":"markdown","05dafc5d":"markdown"},"source":{"d42611f3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd\n# data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c122be0a":"df= pd.read_csv(\"..\/input\/titanic\/train.csv\")\ndf_test= pd.read_csv(\"..\/input\/titanic\/test.csv\")\ndf.head()","21c06788":"df['Died'] = 1 - df['Survived']\n\ndf.groupby('Sex').agg('mean')[['Survived', 'Died']].plot(kind='bar', figsize=(10,6), stacked=True);","045fad54":"figure = plt.figure(figsize=(25, 7))\nplt.hist([df[df['Survived'] == 1]['Fare'], df[df['Survived'] == 0]['Fare']], \n         stacked=True, color = ['g','r'],\n         bins = 50, label = ['Survived','Dead'])\nplt.xlabel('Fare')\nplt.ylabel('Number of passengers')\nplt.legend();","d137e0d1":"## Finding out the missing values\n\ndf.isna().sum().sort_values(ascending = False)","d9573c6c":"df.corr()","3dc0a781":"df.drop({'Cabin', 'Age', 'Embarked'}, axis=1, inplace= True)\n\n# from the test data set as well. \n\ndf_test.drop({'Cabin', 'Age', 'Embarked'}, axis=1, inplace= True)","ecdbfc1f":"df_test.isna().sum().sort_values(ascending = False)","1c169d2b":"df_test[df_test.isna().T.any().T]","9c80de15":"df_test1= pd.read_csv(\"..\/input\/titanic\/test.csv\")\n\ndf_test1['Fare'].groupby([df_test1['Pclass'], df_test1['Sex']]).mean()","7e83848b":"df_test1['Fare'].groupby([df_test1['Pclass'], df_test1['Sex']]).median()","5aa44a28":"# Setting up a loop to fill value for that specific row\n\nfor i in range(len(df_test['Fare'])):\n    if df_test['PassengerId'][i] == 1044:\n        df_test['Fare'][i] = 10\n               ","0db7e1d5":"# Checking it..\n\ndf_test.iloc[[152]]['Fare']","f98d54c6":"print(df.shape)\nprint(df_test.shape)","bb2d48bf":"df.head()","dfbffb4f":"df_test.head()","c6be07d8":"id= df_test['PassengerId']\n\ndf.drop({'PassengerId', 'Died'}, axis=1, inplace= True)\ndf_test.drop({'PassengerId'}, axis=1, inplace= True)","5fae18d8":"print(df.shape)\nprint(df_test.shape)","384d3e28":"y= df['Survived']\ndf.drop({'Survived'}, axis= 1, inplace= True)","600d389f":"df1= df\ndf2= df_test\n\ndf= pd.get_dummies(df)\ndf_test= pd.get_dummies(df_test)","889fa7e7":"for col in df.columns:\n  if col not in df_test.columns:\n    df.drop({col}, axis= 1, inplace= True)\n    \nfor col in df_test.columns:\n  if col not in df.columns:\n    df_test.drop({col}, axis= 1, inplace= True)","133d3b86":"# Checking out the shapes of both data sets:\n\nprint(df.shape)\nprint(df_test.shape)","38d44b45":"from sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import GradientBoostingClassifier\n\n# Splitting data for training, validation\n\nX_train, X_test, y_train, y_test= train_test_split(df, y, random_state= 42)\n","40220d15":"# Plotting the feature importances using the Boosted Gradient Descent\nfrom xgboost import XGBClassifier\nfrom xgboost import plot_importance\n\n# Training the model\nmodel = XGBClassifier()\nmodel_importance = model.fit(X_train, y_train)\n\n# Plotting the Feature importance bar graph\nplt.rcParams['figure.figsize'] = [14,12]\nsns.set(style = 'darkgrid')\nplot_importance(model_importance);","d65cdef3":"\t\nprint(model)","27776f22":"\n# make predictions for test data\ny_pred = model.predict(X_test)\npredictions = [round(value) for value in y_pred]\n","335ae76a":"from sklearn.metrics import accuracy_score","7dedab56":"# evaluate predictions\naccuracy = accuracy_score(y_test, predictions)\nprint(\"Accuracy: %.2f%%\" % (accuracy * 100.0))","85858cbb":"\noutput = pd.DataFrame({'PassengerId': y_test, 'Survived': predictions})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","f36d6590":"### The ritual called Visualizations :D\nLets see some interesting insights into the data- (The Titanic movie was a literal visualization, but alas- Jack never told us that female were more likely to survive more than men, so i guess we will have to use our Statistico Reducto spell!) :P","ddd73ad8":"### Let's see how Fare impacts survival.","e2783862":"### Importing the libraries from Ministry of Magic, Hogwarts","62eea565":"### Age and cabin aren't really something we can afford to say \"correlated\" with our label. And missing values arent making them any more desirable.\n\n### so lets drop Cabin, Age, Embarked\n\n\n\n\n\n","7c4aaa7d":"### So, what this plot tells us is that passengers with cheaper ticket fares are more likely to die. Put differently, passengers with more expensive tickets- which also means a higher passanger class, and therefore a more important social status, seem to be rescued first.\n\n### If only Jack was rich...","e842fd17":"#### Visualizing Survival based on gender","f238aca4":"#### The one extra column in train is the label. so lets take that out:\n#### We can train_test_split the train then to get out validation data;","ff983eee":"### Lets try to impute that one missing value in the fare column in the test dataset.\nSee what is that about.","0d05143e":"## Thou shalt Behold thou data first!","ee209a40":"Now, after doing this, you might have some unever number of columns, which would be a little bit dramatic for our model to understand","bb475c90":"#### We can see the mean price for a male in Pclass 3 is approximately 12 dollars, and the median is 8 dollars.\n#### Lets make it an even 10?\n#### Also, on a completely irrelevant topic: Did you notice, Female ticket prices are always higher than men?\n#### Intresting..","09e87814":"### We can see here that females had a greater chances of survival than men. A perfect example from the movie- Rose survived.","95ba555b":"### Couple of things here:\n\n#### We will nedd passenger id later during predicting survuval on testing data, so saving it in another variable.\n\n#### We also need to remove Died from training data and passenger id from both of the data sets. ","1309fee7":"### Checking do the missing values actually matter?\n#### What i mean is: is age and cabin highly correlated with the label we are interested in predicting?\n#### Let's find out!","006fa4ed":"#### One -hot encoding:\n\nSince we have categorical variables, we must convert them to some sort of numeric value so that our model could understand and create a relationship between various attributes. We can do that by-\n\n1. Label Encoder\n2. One Hot encoding\n\nWe will use One- hot here: (using pd.get_dummies)","05dafc5d":"#### Looking up for this value in our dataset:\n\n#### Alright we can use an estimation that what would be generally the mean (or median) fare for someone travelling in class 3 and is aged over 60 years."}}