{"cell_type":{"fc0156e6":"code","2efe8b86":"code","7247e200":"code","7aa5786a":"code","31b6d330":"code","8f26e2a4":"code","12afcbef":"code","4193cbe4":"code","f4a1e67c":"code","1fefee2d":"code","4229af4e":"code","61393106":"code","9151b17d":"code","42722d83":"code","35c3884b":"code","85a171d1":"code","71aa1880":"code","986ff93c":"code","1f089504":"code","a08187be":"code","053b6a58":"code","466ca8bb":"code","d63a9b86":"code","729efd7a":"code","35688646":"code","5c793c0b":"code","73b033ec":"code","2b17ed53":"code","cbd92b43":"code","70932e98":"code","774515ac":"code","56d088e0":"code","51d673bf":"code","3f7d0852":"code","b4c4bb84":"code","d16446c7":"code","4940f377":"code","4d719228":"code","0c19175d":"markdown","e937865f":"markdown","e3369e73":"markdown"},"source":{"fc0156e6":"#Imports\nimport os\nimport numpy as np\nimport keras\nimport sklearn\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import confusion_matrix, precision_score, recall_score, accuracy_score","2efe8b86":"data = pd.read_csv('..\/input\/train.csv')","7247e200":"data.shape","7aa5786a":"data.head()","31b6d330":"data.describe()","8f26e2a4":"train_data = data.iloc[:,2:203]","12afcbef":"train_data.shape","4193cbe4":"y = data.iloc[:,1]","f4a1e67c":"y.shape","1fefee2d":"y.head()","4229af4e":"train_data.head()","61393106":"#Checking Incomplete Data Rows\nsample_incomplete_rows = data[train_data.isnull().any(axis=1)].head()\nsample_incomplete_rows","9151b17d":"X_train, X_test, y_train, y_test = train_test_split(train_data, y, test_size=0.2, random_state=142)","42722d83":"X_train.head()","35c3884b":"y_train.head()","85a171d1":"#Basic Models\nfrom xgboost import XGBClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.ensemble import RandomForestClassifier,GradientBoostingClassifier, VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB","71aa1880":"gnb = GaussianNB()\ngnb.fit(X_train, y_train)","986ff93c":"y_preds_gnb = gnb.predict(X_test)\nprint(accuracy_score(y_test, y_preds_gnb))","1f089504":"test_data = pd.read_csv('..\/input\/test.csv')","a08187be":"test_data.shape","053b6a58":"test_data.head()","466ca8bb":"X_test_data = test_data.iloc[:,1:202]","d63a9b86":"X_test_data.shape","729efd7a":"y_preds_test_data_gnb = gnb.predict(X_test_data)","35688646":"my_submission_gnb = pd.DataFrame({'ID_code': test_data.ID_code, 'target': y_preds_test_data_gnb})\nmy_submission_gnb.to_csv('submission_gnb.csv', index=False)","5c793c0b":"from catboost import CatBoostClassifier","73b033ec":"cat = CatBoostClassifier(iterations=3000, learning_rate=0.03, objective=\"Logloss\", eval_metric='AUC')\ncat.fit(X_train, y_train)","2b17ed53":"y_preds_cat = cat.predict(X_test)\nprint(accuracy_score(y_test, y_preds_cat))","cbd92b43":"y_preds_test_data_cat = cat.predict(X_test_data)","70932e98":"my_submission_cat = pd.DataFrame({'ID_code': test_data.ID_code, 'target': y_preds_test_data_cat})\nmy_submission_cat.to_csv('submission_cat.csv', index=False)","774515ac":"import lightgbm as lgb\nfrom sklearn.model_selection import StratifiedKFold\nimport time","56d088e0":"def augment(x,y,t=2):\n    xs,xn = [],[]\n    for i in range(t):\n        mask = y>0\n        x1 = x[mask].copy()\n        ids = np.arange(x1.shape[0])\n        for c in range(x1.shape[1]):\n            np.random.shuffle(ids)\n            x1[:,c] = x1[ids][:,c]\n        xs.append(x1)\n\n    for i in range(t\/\/2):\n        mask = y==0\n        x1 = x[mask].copy()\n        ids = np.arange(x1.shape[0])\n        for c in range(x1.shape[1]):\n            np.random.shuffle(ids)\n            x1[:,c] = x1[ids][:,c]\n        xn.append(x1)\n\n    xs = np.vstack(xs)\n    xn = np.vstack(xn)\n    ys = np.ones(xs.shape[0])\n    yn = np.zeros(xn.shape[0])\n    x = np.vstack([x,xs,xn])\n    y = np.concatenate([y,ys,yn])\n    return x,y","51d673bf":"n_fold = 5\nfolds = StratifiedKFold(n_splits=n_fold, shuffle=False, random_state=42)","3f7d0852":"lgbm_params = {'bagging_freq': 5,\n               'bagging_fraction': 0.335,\n               'boost_from_average':'false',\n               'boost': 'gbdt',\n               'feature_fraction': 0.041,\n               'learning_rate': 0.0083,\n               'max_depth': -1,\n               'metric':'auc',\n               'min_data_in_leaf': 80,\n               'min_sum_hessian_in_leaf': 10.0,\n               'num_leaves': 13,\n               'num_threads': 8,\n               'tree_learner': 'serial',\n               'objective': 'binary', \n               'verbosity': -1\n}","b4c4bb84":"prediction_lgb_new = np.zeros(len(X_test_data))\n\nfor fold_n, (train_index, valid_index) in enumerate(folds.split(train_data,y)):\n    print('Fold', fold_n)\n    X_training, X_validation = train_data.iloc[train_index], train_data.iloc[valid_index]\n    y_training, y_validation = y.iloc[train_index], y.iloc[valid_index]\n    \n    X_training, y_training = augment(X_training.values, y_training.values)\n    X_training = pd.DataFrame(X_training)\n    \n    training_data = lgb.Dataset(X_training, label=y_training)\n    validation_data = lgb.Dataset(X_validation, label=y_validation)\n        \n    model = lgb.train(lgbm_params,training_data,num_boost_round=1000000,\n                    valid_sets = [training_data, validation_data],verbose_eval=1000,early_stopping_rounds = 3000)\n            \n    #y_pred_valid = model.predict(X_valid)\n    prediction_lgb_new += model.predict(X_test_data, num_iteration=model.best_iteration)\/folds.n_splits","d16446c7":"prediction_lgb_new","4940f377":"my_submission_lgb_new = pd.DataFrame({'ID_code': test_data.ID_code, 'target': prediction_lgb_new})\nmy_submission_lgb_new.to_csv('submission_lgb_new.csv', index=False)","4d719228":"my_submission_cat_lgb_gnb = pd.DataFrame({'ID_code': test_data.ID_code,\n                                          'target': (y_preds_test_data_cat + y_preds_test_data_gnb)\/2})\nmy_submission_cat_lgb_gnb.to_csv('my_submission_cat_gnb.csv', index=False)","0c19175d":"Gaussian NB","e937865f":"CatBoost Classifier","e3369e73":"LightGBM"}}