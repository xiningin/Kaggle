{"cell_type":{"082ca4f9":"code","0e645663":"code","9a0a27db":"code","ec257d9b":"code","e77c472c":"code","c924e0e1":"code","0fd745ba":"code","3f139754":"code","4247fa0b":"code","60993dd6":"code","c5865bdb":"code","a8a7119e":"markdown","75498f6f":"markdown","e28005c8":"markdown","ec7e4411":"markdown","1dbfb87d":"markdown","85218103":"markdown","c1cf5f26":"markdown"},"source":{"082ca4f9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0e645663":"df=pd.read_csv(\"\/kaggle\/input\/finance-accounting-courses-udemy-13k-course\/udemy_output_All_Finance__Accounting_p1_p626.csv\")\ndf.dropna(axis=0,inplace=True)\ndf.info()","9a0a27db":"df=df[['is_paid','is_wishlisted','num_subscribers','num_reviews','avg_rating','num_published_lectures','num_published_practice_tests','price_detail__amount','rating']]\nX = df.iloc[:, :-1].values\ny = df.iloc[:, -1].values","ec257d9b":"from sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import OneHotEncoder\nct=ColumnTransformer(transformers=[('encoder',OneHotEncoder(),[1])],remainder='passthrough')\nX=np.array(ct.fit_transform(X))","e77c472c":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.1,random_state=1)","c924e0e1":"from sklearn.linear_model import LinearRegression\nregressor=LinearRegression()\nregressor.fit(X_train,y_train)","0fd745ba":"y_pred=regressor.predict(X_test)\ny_pred=y_pred.round(2)\ny_pred","3f139754":"y_test","4247fa0b":"from sklearn.metrics import r2_score\ncofficient_of_multiple_dermination=r2_score(y_pred,y_test)\nprint(cofficient_of_multiple_dermination)","60993dd6":"import sklearn.metrics as metrics\ndef regression_results(y_true, y_pred):\n\n    # Regression metrics\n    explained_variance=metrics.explained_variance_score(y_true, y_pred)\n    mean_absolute_error=metrics.mean_absolute_error(y_true, y_pred) \n    mse=metrics.mean_squared_error(y_true, y_pred) \n    median_absolute_error=metrics.median_absolute_error(y_true, y_pred)\n    r2=metrics.r2_score(y_true, y_pred)\n    print('explained_variance: ', round(explained_variance,4))    \n    print('r2: ', round(r2,4))\n    print('MAE: ', round(mean_absolute_error,4))\n    print('MSE: ', round(mse,4))\n    print('RMSE: ', round(np.sqrt(mse),4))\n    \nregression_results(y_test,y_pred)","c5865bdb":"n=12205\nk=8\nr2_adj=1-(((1-cofficient_of_multiple_dermination)*(n-1))\/(n-k-1))\nprint(r2_adj)","a8a7119e":"## Finding the r2 score ","75498f6f":"## Predicting the Test set results","e28005c8":"## Splitting the dataset into the Training set and Test set","ec7e4411":"## Training the Multiple Linear Regression model on the Training set","1dbfb87d":"## Importing the dataset","85218103":"## Encoding categorical data","c1cf5f26":"## Importing the libraries"}}