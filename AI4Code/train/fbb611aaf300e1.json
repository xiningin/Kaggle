{"cell_type":{"5ceb610c":"code","97100ad8":"code","e2ade7fa":"code","fa3ed7e7":"code","d8aebe5e":"code","61929fcc":"code","0d24a205":"code","fdbbe5b7":"code","c8762951":"code","ffac239d":"code","f2540b84":"code","374ad9ac":"code","26a3398e":"code","01b9084c":"code","1ba46ef9":"code","7229db97":"code","0fe87355":"code","5ce6b9e1":"code","5b40c9af":"code","1af38341":"code","81371d26":"code","7f77f83f":"markdown","2c47b20b":"markdown","a7270bf9":"markdown","f5227fdd":"markdown","d6ec15c9":"markdown","eef8a34f":"markdown","fc5627c9":"markdown","b7a723de":"markdown","61076d13":"markdown","ac4eb21f":"markdown","93bcb25a":"markdown","27f580e4":"markdown","9b2ea710":"markdown","bd94d0d3":"markdown","f6fb3745":"markdown","cd6cbad8":"markdown","e3530ca7":"markdown","b7991947":"markdown","c9a20956":"markdown","a8cdbd3c":"markdown","40bbc1db":"markdown"},"source":{"5ceb610c":"import pandas as pd\nimport seaborn as sns \nimport numpy as np \nimport matplotlib.pyplot as plt\n%matplotlib inline","97100ad8":"df = pd.read_csv('..\/input\/KNN_Project_Data')","e2ade7fa":"df.head()","fa3ed7e7":"sns.pairplot(data=df,hue='TARGET CLASS')","d8aebe5e":"from sklearn.preprocessing import StandardScaler","61929fcc":"scaler = StandardScaler()","0d24a205":"scaler.fit(df.drop('TARGET CLASS',axis=1))","fdbbe5b7":"scaled_features = scaler.transform(df.drop('TARGET CLASS',axis=1))","c8762951":"df_new = pd.DataFrame(scaled_features)\ndf_new.head()","ffac239d":"from sklearn.model_selection import train_test_split\nX = df_new\ny = df['TARGET CLASS']","f2540b84":"X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.4)","374ad9ac":"from sklearn.neighbors import KNeighborsClassifier","26a3398e":"knn = KNeighborsClassifier(n_neighbors=1)","01b9084c":"knn.fit(X_train,y_train)","1ba46ef9":"predictions = knn.predict(X_test)","7229db97":"from sklearn.metrics import confusion_matrix,classification_report","0fe87355":"print(confusion_matrix(y_test,predictions))","5ce6b9e1":"print(classification_report(y_test,predictions))","5b40c9af":"error_rate = []\nfor i in range(1,40):\n    knn = KNeighborsClassifier(n_neighbors=i)\n    knn.fit(X_train,y_train)\n    pred_i = knn.predict(X_test)\n    error_rate.append(np.mean(pred_i != y_test))\n    \n    ","1af38341":"plt.figure(figsize=(10,6))\nplt.plot(range(1,40),error_rate,color='blue', linestyle='dashed', marker='o',\n         markerfacecolor='red', markersize=10)\nplt.title('Error Rate vs. K Value')\nplt.xlabel('K')\nplt.ylabel('Error Rate')","81371d26":"knn = KNeighborsClassifier(n_neighbors=30)\nknn.fit(X_train,y_train)\npred = knn.predict(X_test)\nprint(classification_report(y_test,predictions))","7f77f83f":"# K Nearest Neighbors Project \n\nWelcome to the KNN Project! This will be a simple project very similar to the lecture, except you'll be given another data set. Go ahead and just follow the directions below.\n## Import Libraries\n**Import pandas,seaborn, and the usual libraries.**","2c47b20b":"# Train Test Split\n\n**Use train_test_split to split your data into a training set and a testing set.**","a7270bf9":"## Retrain with new K Value\n\n**Retrain your model with the best K value (up to you to decide what you want) and re-do the classification report and the confusion matrix.**","f5227fdd":"** Fit scaler to the features.**","d6ec15c9":"# Using KNN\n\n**Import KNeighborsClassifier from scikit learn.**","eef8a34f":"# Choosing a K Value\nLet's go ahead and use the elbow method to pick a good K Value!\n\n** Create a for loop that trains various KNN models with different k values, then keep track of the error_rate for each of these models with a list. Refer to the lecture if you are confused on this step.**","fc5627c9":"** Create a StandardScaler() object called scaler.**","b7a723de":"___\n\n<a href='http:\/\/www.pieriandata.com'> <img src='..\/Pierian_Data_Logo.png' \/><\/a>\n___","61076d13":"**Use the .transform() method to transform the features to a scaled version.**","ac4eb21f":"## Get the Data\n** Read the 'KNN_Project_Data csv file into a dataframe **","93bcb25a":"**Create a KNN model instance with n_neighbors=1**","27f580e4":"# Standardize the Variables\n\nTime to standardize the variables.\n\n** Import StandardScaler from Scikit learn.**","9b2ea710":"** Create a confusion matrix and classification report.**","bd94d0d3":"# Great Job!","f6fb3745":"**Check the head of the dataframe.**","cd6cbad8":"**Convert the scaled features to a dataframe and check the head of this dataframe to make sure the scaling worked.**","e3530ca7":"**Use the predict method to predict values using your KNN model and X_test.**","b7991947":"**Fit this KNN model to the training data.**","c9a20956":"**Now create the following plot using the information from your for loop.**","a8cdbd3c":"# EDA\n\nSince this data is artificial, we'll just do a large pairplot with seaborn.\n\n**Use seaborn on the dataframe to create a pairplot with the hue indicated by the TARGET CLASS column.**","40bbc1db":"# Predictions and Evaluations\nLet's evaluate our KNN model!"}}