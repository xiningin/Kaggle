{"cell_type":{"2c18ae30":"code","680be472":"code","7fd1cd9e":"code","4ccb4f7f":"code","3a294e9e":"code","7726c52f":"code","7132f3ed":"code","389b1351":"code","06bb725b":"markdown","e424a635":"markdown","cccb02d0":"markdown","61daac92":"markdown","0269fd6a":"markdown","0600e5b2":"markdown"},"source":{"2c18ae30":"from tensorflow.keras.datasets import imdb\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Embedding, Flatten, Dropout\nfrom tensorflow.keras.callbacks import EarlyStopping\nfrom tensorflow.keras import utils\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\n# \u0440\u0430\u0431\u043e\u0442\u0430 \u0441 \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u0439 \u0441\u0432\u044f\u0437\u044c\u044e \u043e\u0442 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439\u0441\u044f \u043d\u0435\u0439\u0440\u043e\u043d\u043d\u043e\u0439 \u0441\u0435\u0442\u0438\nfrom tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint, ReduceLROnPlateau\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline \nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","680be472":"KAGGLE_PATH = '\/kaggle\/input\/nn-urfu-imdb\/'\nx_train = np.load(KAGGLE_PATH + 'train.npy', allow_pickle=True)\ny_train = np.load(KAGGLE_PATH + 'train_label.npy', allow_pickle=True)\nx_test = np.load(KAGGLE_PATH + 'test.npy', allow_pickle=True)\nx_train.shape, y_train.shape, x_test.shape, ","7fd1cd9e":"max_words = 10_000\nmaxlen = 100\nx_train = pad_sequences(x_train, maxlen=maxlen, padding='post')\nx_test = pad_sequences(x_test, maxlen=maxlen, padding='post')","4ccb4f7f":"model = Sequential()\nmodel.add(Embedding(max_words, 5, input_length=maxlen))\nmodel.add(Dropout(0.1))\nmodel.add(Flatten())\nmodel.add(Dense(1, activation='sigmoid'))","3a294e9e":"model.compile(optimizer='sgd', \n              loss='binary_crossentropy', \n              metrics=['accuracy'])","7726c52f":"history = model.fit(x_train, \n                    y_train, \n                    epochs=15,\n                    batch_size=256,\n                    validation_split=0.1)","7132f3ed":"plt.plot(history.history['accuracy'], \n         label='\u0414\u043e\u043b\u044f \u0432\u0435\u0440\u043d\u044b\u0445 \u043e\u0442\u0432\u0435\u0442\u043e\u0432 \u043d\u0430 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u043c \u043d\u0430\u0431\u043e\u0440\u0435')\nplt.plot(history.history['val_accuracy'], \n         label='\u0414\u043e\u043b\u044f \u0432\u0435\u0440\u043d\u044b\u0445 \u043e\u0442\u0432\u0435\u0442\u043e\u0432 \u043d\u0430 \u043f\u0440\u043e\u0432\u0435\u0440\u043e\u0447\u043d\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435')\nplt.xlabel('\u042d\u043f\u043e\u0445\u0430 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f')\nplt.ylabel('\u0414\u043e\u043b\u044f \u0432\u0435\u0440\u043d\u044b\u0445 \u043e\u0442\u0432\u0435\u0442\u043e\u0432')\nplt.legend()\nplt.show()","389b1351":"sample_submission = pd.read_csv(KAGGLE_PATH + 'sample_supmission.csv', index_col='id')\nsample_submission.label = model.predict_classes(x_test)\nsample_submission.to_csv(\"sample_submission.csv\")","06bb725b":"## \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f","e424a635":"\u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435","cccb02d0":"## \u0413\u043e\u0442\u043e\u0432\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f LeaderBoard","61daac92":"## \u041e\u0431\u0443\u0447\u0430\u0435\u043c \u043d\u0435\u0439\u0440\u043e\u043d\u043d\u0443\u044e \u0441\u0435\u0442\u044c","0269fd6a":"## \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u0435\u0439\u0440\u043e\u043d\u043d\u043e\u0439 \u0441\u0435\u0442\u0438","0600e5b2":"# \u041f\u043b\u043e\u0442\u043d\u043e\u0435 \u0432\u0435\u043a\u0442\u043e\u0440\u043d\u043e\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u043b\u043e\u0432 \u0434\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0442\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0442\u0435\u043a\u0441\u0442\u0430 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043d\u0430 \u0444\u0438\u043b\u044c\u043c\u044b \u0438\u0437 IMDb (Internet Movie Database) \n\n\u0423\u0447\u0435\u0431\u043d\u044b\u0439 \u043a\u0443\u0440\u0441 \"[\u041d\u0435\u0439\u0440\u043e\u0441\u0435\u0442\u0438 \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0442\u0435\u043a\u0441\u0442\u043e\u0432](https:\/\/www.asozykin.ru\/courses\/nnpython)\"."}}