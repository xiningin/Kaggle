{"cell_type":{"7ba0294e":"code","ab050d18":"code","f921185b":"code","5fa5939e":"code","53837dfa":"code","b34f6332":"code","f9501e1a":"code","486a9923":"code","bcd0cac4":"code","96520817":"code","a4a0e5df":"code","43680823":"code","489045ff":"code","a0884423":"code","9fa0c24e":"code","1c1de33a":"code","910a8bb7":"code","6a5c6c12":"code","2b7ac6a6":"code","6f2203bc":"code","ab20dbfd":"code","41529ca3":"code","adfa2ad5":"code","e76eece7":"code","d0709447":"code","d5500afb":"code","24893533":"code","8f88815d":"code","5ddb12bb":"code","80c0fbf7":"code","3f20c99b":"code","494edb4f":"code","5fe7dbad":"code","b7881fef":"code","1a317b06":"code","f1a0b358":"code","27a65ba9":"code","3096fe49":"code","209af654":"code","2e98f935":"code","9ae15a8e":"code","e48aaec6":"code","3cd643df":"code","d076b4fe":"code","0ef15cb1":"code","314a4d47":"code","34cd9a3f":"code","d2735e53":"code","05bc322d":"code","38917308":"code","c37fb049":"code","e0285a86":"code","75dd65ac":"code","d2a9c237":"code","0befd4b0":"code","48b3dbb7":"code","b0c820fa":"code","9c0dae98":"code","44d36299":"code","eb8851c6":"markdown","55f4bc0b":"markdown","ab1b1547":"markdown","1be1a623":"markdown","ec6bddb4":"markdown","9ceb33e9":"markdown","4e8dd71b":"markdown","3dfb00bd":"markdown","1f156129":"markdown"},"source":{"7ba0294e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","ab050d18":"hra = pd.read_csv('..\/input\/ibm-hr-analytics-attrition-dataset\/WA_Fn-UseC_-HR-Employee-Attrition.csv')","f921185b":"hra.head()","5fa5939e":"sns.barplot(x = 'Attrition',y='DailyRate',data=hra,hue='Gender')","53837dfa":"sns.swarmplot(x='Attrition',y='DistanceFromHome',hue='Gender',data=hra,split=True)","b34f6332":"sns.boxplot(x='Attrition',y='YearsSinceLastPromotion',data=hra,hue='Department')","f9501e1a":"sns.barplot(x='YearsSinceLastPromotion',y='YearsInCurrentRole',data=hra)","486a9923":"sns.lmplot(x='YearsAtCompany',y='YearsWithCurrManager',data=hra)","bcd0cac4":"hra.corr()","96520817":"sns.heatmap(hra.corr())","a4a0e5df":"df = pd.read_csv('..\/input\/ibm-hr-analytics-attrition-dataset\/WA_Fn-UseC_-HR-Employee-Attrition.csv')","43680823":"df.drop(columns='StandardHours',inplace=True)\ndf.drop(columns='EmployeeCount',inplace=True)","489045ff":"df.head()","a0884423":"df.corr()","9fa0c24e":"plt.figure(figsize=(20,20))\nsns.heatmap(df.corr(),annot=True)","1c1de33a":"sns.stripplot(x='Attrition',y='HourlyRate',data=hra)","910a8bb7":"sns.stripplot(x='YearsWithCurrManager',y='StockOptionLevel',data=hra)","6a5c6c12":"df['Attrition'] = df['Attrition'].map({'Yes':1,'No':0})\ny = df.iloc[:,1].values\nX = df.drop(columns='Attrition',inplace=True)","2b7ac6a6":"X = df.iloc[:,:].values","6f2203bc":"X = pd.get_dummies(data=df, columns=['BusinessTravel','Department','EducationField','Gender','JobRole','MaritalStatus','OverTime'],drop_first=True)\nX.drop(columns='EmployeeNumber',axis=1,inplace=True)\nX.drop(columns='Over18',axis=1,inplace=True)\nX","ab20dbfd":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.3,random_state=42,shuffle=True)\nregressor = LogisticRegression()","41529ca3":"regressor.fit(X_train,y_train)","adfa2ad5":"y_pred = regressor.predict(X_test)","e76eece7":"regressor.score(X_test,y_test)\nregressor.score(X_train,y_train)","d0709447":"from sklearn.metrics import confusion_matrix\nconfusion_matrix = confusion_matrix(y_test, y_pred,labels=[0,1])\nconfusion_matrix","d5500afb":"from sklearn.metrics import classification_report\nprint(classification_report(y_test,y_pred))","24893533":"from imblearn.over_sampling import SMOTE\n\nsm = SMOTE()\n\nx1,y1 = sm.fit_sample(X,y)","8f88815d":"X_train,X_test,y_train,y_test = train_test_split(x1,y1,test_size=0.3,random_state=10)","5ddb12bb":"regressor = LogisticRegression()","80c0fbf7":"regressor.fit(X_train,y_train)\n\ny_pred = regressor.predict(X_test)\n\nregressor.score(X_test,y_test)","3f20c99b":"from sklearn.metrics import confusion_matrix\nconfusion_matrix = confusion_matrix(y_test,y_pred)\nconfusion_matrix","494edb4f":"print(classification_report(y_test,y_pred))","5fe7dbad":"from imblearn.over_sampling import RandomOverSampler\n\nros = RandomOverSampler(random_state=0)\n\nx1,y1 = ros.fit_resample(X,y)","b7881fef":"x_train,x_test,y_train,y_test = train_test_split(x1,y1,test_size=0.3,random_state=42)","1a317b06":"reg = LogisticRegression()\n\nreg.fit(x_train,y_train)\n\ny_pred = reg.predict(x_test)\n\nreg.score(x_test,y_test)","f1a0b358":"print(classification_report(y_test,y_pred))","27a65ba9":"from imblearn.under_sampling import ClusterCentroids\n\ncc = ClusterCentroids(random_state=0)\n\nx1,y1 = cc.fit_resample(X,y)","3096fe49":"x_train,x_test,y_train,y_test = train_test_split(x1,y1,test_size=0.3,random_state=42)","209af654":"reg = LogisticRegression()\n\nreg.fit(x_train,y_train)\n\ny_pred = reg.predict(x_test)","2e98f935":"reg.score(x_test,y_test)","9ae15a8e":"from sklearn.metrics import confusion_matrix\nconfusion_matrix = confusion_matrix(y_test,y_pred)\nconfusion_matrix","e48aaec6":"print(classification_report(y_test,y_pred))","3cd643df":"from imblearn.under_sampling import RandomUnderSampler\n\nrus = RandomUnderSampler(random_state=0)\n\nx1,y1 = rus.fit_resample(X,y)","d076b4fe":"x_train,x_test,y_train,y_test = train_test_split(x1,y1,test_size=0.3,random_state=42)","0ef15cb1":"reg = LogisticRegression()\n\nreg.fit(x_train,y_train)\n\ny_pred = reg.predict(x_test)","314a4d47":"from sklearn.metrics import confusion_matrix\nconfusion_matrix = confusion_matrix(y_test,y_pred)\nconfusion_matrix","34cd9a3f":"print(classification_report(y_test,y_pred))","d2735e53":"from imblearn.under_sampling import NearMiss\n\nnm = NearMiss(version = 1)\n\nx1,y1 = nm.fit_resample(X,y)","05bc322d":"x_train,x_test,y_train,y_test = train_test_split(x1,y1,test_size=0.3,random_state=42)","38917308":"reg = LogisticRegression()\n\nreg.fit(x_train,y_train)\n\ny_pred = reg.predict(x_test)","c37fb049":"print(classification_report(y_test,y_pred))","e0285a86":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom imblearn.over_sampling import SMOTE\nfrom sklearn.metrics import confusion_matrix, classification_report\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier","75dd65ac":"class Data_Preprocessing:\n    df = pd.read_csv('..\/input\/ibm-hr-analytics-attrition-dataset\/WA_Fn-UseC_-HR-Employee-Attrition.csv')\n    \n    def initialize(self):\n        self.df['Attrition'] = self.df['Attrition'].map({'Yes':1,'No':0})\n        y = self.df['Attrition']\n        X = self.df.drop(columns=['Attrition','Over18','StandardHours','EmployeeCount'],inplace=True)\n        #X = self.df[['Age','BusinessTravel','DailyRate','Department','DistanceFromHome','Education','EducationField','EmployeeNumber','EnvironmentSatisfaction','Gender','HourlyRate','JobInvolvement','JobLevel','JobRole','JobSatisfaction','MaritalStatus','MonthlyIncome','MonthlyRate','NumCompaniesWorked','Over18','OverTime','PercentSalaryHike','PerformanceRating','RelationshipSatisfaction','StockOptionLevel','TotalWorkingYears','TrainingTimesLastYear','WorkLifeBalance','YearsAtCompany','YearsInCurrentRole','YearsSinceLastPromotion','YearsWithCurrManager']]\n        #X.drop(columns = ['Over18'],axis=1,inplace=True)\n        X = pd.get_dummies(data=self.df, columns=['BusinessTravel','Department','EducationField','Gender','JobRole','MaritalStatus','OverTime'],drop_first=True)\n        return X,y\n    def oversampling(self,X,y):\n        sm = SMOTE()\n        X1,y1 = sm.fit_sample(X,y)\n        return X1,y1","d2a9c237":"class Train_Test:\n    \n    def train(self,X,y):\n        x_train,x_test,y_train,y_test = train_test_split(X,y,test_size=0.3,random_state=42)\n        #regressor = LogisticRegression()\n        #regressor = KNeighborsClassifier()\n        regressor = RandomForestClassifier()\n        regressor.fit(x_train,y_train)\n        return regressor,x_test,y_test\n    \n    def test(self,x_test,y_test,regressor):\n        y_pred = regressor.predict(x_test)\n        acc = regressor.score(x_test,y_test)\n        confusion_mat = confusion_matrix(y_test,y_pred)\n        print(classification_report(y_test,y_pred))\n        return acc,confusion_mat","0befd4b0":"process = Data_Preprocessing()","48b3dbb7":"X,y = process.initialize()","b0c820fa":"X,y = process.oversampling(X,y)","9c0dae98":"train_test = Train_Test()\nreg,x_test,y_test = train_test.train(X,y)\naccuracy, confusion_matrix = train_test.test(x_test,y_test,reg)","44d36299":"print(confusion_matrix)","eb8851c6":"# EDA","55f4bc0b":"# Using Undersampling","ab1b1547":"## Oversampler","1be1a623":"## ClusterCentroids","ec6bddb4":"# Final Analysis and Predictions","9ceb33e9":"## Near Miss","4e8dd71b":"## Using SMOTE","3dfb00bd":"## Random Undersampler","1f156129":"# Class Imbalance"}}