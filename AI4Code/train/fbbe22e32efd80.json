{"cell_type":{"36cb5f04":"code","010f28f9":"code","3d02c013":"code","95ed9e76":"code","251075aa":"code","ab06358c":"code","4bd920ae":"code","0de7ecff":"code","c376151b":"code","3f8f7149":"code","11fb082b":"code","baad8941":"code","b4785868":"code","35520a32":"code","3d3495f9":"code","05d51a51":"code","af8a5034":"code","0815ba5f":"code","ca4f3724":"code","948d1f01":"code","dc1da4d6":"code","354999ba":"code","9b5928fa":"code","2d6be113":"code","e819a539":"code","1c5bf447":"code","4027e3b6":"code","ec490aed":"code","4268084e":"code","fbd48e9d":"markdown","ebfcb935":"markdown","b5764b8b":"markdown","4b8306c6":"markdown","7adbde5a":"markdown","47d33d5a":"markdown","ed96f71b":"markdown","ac61a5a1":"markdown","f517712a":"markdown","46609ea6":"markdown","3f7da274":"markdown","6810bd75":"markdown","234ee3ed":"markdown","61cc750c":"markdown","7e406ab6":"markdown","27a35754":"markdown","3beb3557":"markdown","3238ee25":"markdown","d79de58f":"markdown","80fb4953":"markdown","c90e85dd":"markdown","f40d0596":"markdown"},"source":{"36cb5f04":"# print dataset paths by Kaggle's way\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","010f28f9":"#Load the CSV file as Pandas DataFrame.\nimport pandas as pd\nimport warnings\ndata=pd.read_csv(\"\/kaggle\/input\/csv-files\/sample.csv\")\ndata","3d02c013":"#Drop missing value and show the DataFrame.\ndf=data.dropna()\ndf","95ed9e76":"#Add a cloumn named \"BMI\" that stands for Body Mass Index.\n#BMI\uff1d [Weight(Kilogram)] \/ [Height(Meter)]**2\nwarnings.simplefilter('ignore')\ndf.loc[:,\"Body Mass Index\"]=df.loc[:,\"Weight(kilogram)\"]\/df.loc[:,\"Height(Unit=cm)\"]*100\/df.loc[:,\"Height(Unit=cm)\"]*100\ndf","251075aa":"#Add a cloumn named \"Ideal Weight\" for each person\n#Ideal Weight\uff1d [Height(Meter)]*[Height(Meter)]*22\ndf.loc[:,\"Ideal Weight\"]=pow(df.loc[:,\"Height(Unit=cm)\"]\/100,2)*22\ndf\n","ab06358c":"#Make a collumn that shows the difference between Weight and Ideal Weight and name the column \"BMI-Ideal Weight\".\ndf.loc[:,\"Weight-Ideal Weight\"]= df.loc[:,\"Weight(kilogram)\"]-df.loc[:,\"Ideal Weight\"]\ndf","4bd920ae":"#Make a column named \"BMI Over 25\" that shows BMI is over 25 or not.\ndef bmi_check(bmi):\n    if bmi >= 25:\n        return float(1)\n    else:\n        return float(0)\n        \ndf.loc[:,\"BMI Over 25\"]= df.loc[:,\"Body Mass Index\"].apply(bmi_check)\ndf","0de7ecff":"#apply label encoding to a column \"Country\" and show the result in array style.\nfrom sklearn.preprocessing import LabelEncoder,OneHotEncoder\nle = LabelEncoder()\nle_fit_x=le.fit_transform(df[\"Country\"])\nle_fit_x","c376151b":"#apply one-hot-encoding to column \"Country\".\none_hot=OneHotEncoder(categories=\"auto\")\nle_fit_x_reshape=le_fit_x.reshape(-1,1)\none_hot_result=one_hot.fit_transform(le_fit_x_reshape)\none_hot_array=one_hot_result.toarray()\none_hot_pd=pd.DataFrame(one_hot_array.T, columns=[\"USA\",\"India\",\"Australia\",\"China\",\"Italy\"]).astype(int)\none_hot_pd","3f8f7149":"#Concatenate the newly made one-hot-encoding DataFrame to the last DataFrame \ndf=pd.concat([df,one_hot_pd], axis=1)\ndf","11fb082b":"# Apply one-hot-encoding without frameworks on a column \"Favorite Food\".\ndef label_encoding(X):\n    X=df.iloc[:,X].astype(str)\n    df_c1=X.str.contains(list[0])==True\n    df_c1=df_c1.replace(True,1)\n    df_c1=df_c1.replace(False,0)\n    \n    df_c2=X.str.contains(list[1])==True\n    df_c2=df_c2.replace(True,1)\n    df_c2=df_c2.replace(False,0)\n\n    df_c3=X.str.contains(list[2])==True\n    df_c3=df_c3.replace(True,1)\n    df_c3=df_c3.replace(False,0)\n\n    df_Q1_new=pd.concat([df_c1,df_c2,df_c3],axis=1)\n    df_Q1_new=df_Q1_new.set_axis([list[0], list[1], list[2]], axis=1)\n    return df_Q1_new ","baad8941":"list=[\"french fries\",\"burger\",\"salad\"]\ndf_food=label_encoding(5)\ndf_food","b4785868":"#Connect DataFrame to processed DataFrame\ndf=pd.concat([df,df_food], axis=1)\ndf","35520a32":"#Show all columns and indexes without limitation.\npd.set_option('display.max_rows', None)\npd.set_option('display.max_columns', None)\ndf","3d3495f9":"#Show only columns and indexes that have numerical characters. \ndf_numerical=df.iloc[:,[1,2,3,6,7,8,9,10,11,12,13,14,15,16,17]]\ndf_numerical","05d51a51":"from sklearn.preprocessing import MinMaxScaler\nmm=MinMaxScaler()\nmm.fit(df_numerical)\nmm_result=mm.transform(df_numerical)\n\npd.DataFrame(mm_result)","af8a5034":"#show pairplot figures by using Seaborn. \nimport seaborn as sns\nsns.pairplot(df_numerical)","0815ba5f":"#show Correlation.\ndf_numerical.corr()","ca4f3724":"#Load test.csv and predict Mr. J's weight by using Linear Regression Model .etc\nnew_data=pd.read_csv(\"\/kaggle\/input\/csv-files\/new_sample.csv\")\nnew_data","948d1f01":"#Let's get only necesally columns for test data.\nnew_df=new_data.iloc[:,[1,2]]\nnew_df","dc1da4d6":"#Let's get only necesally columns for train data.\ndf_train=df_numerical.iloc[:,[0,1,2]]\ndf_train","354999ba":"#Change Pandas DataFrame into Numpy array.\ndf_train.iloc[:,[2]].to_numpy()","9b5928fa":"from sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nx=df_train.iloc[:,[0,1]].to_numpy()\ny=df_train.iloc[:,[2]].to_numpy()\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=0)","2d6be113":"model=LinearRegression()\nmodel.fit(x_train,y_train)","e819a539":"y_pred=model.predict(new_df.iloc[:,[0,1]].to_numpy())","1c5bf447":"print(\"Person Mr J's weight might be \",int(y_pred),\"kilograms\")","4027e3b6":"import plotly.express as px\np_express = px.scatter_3d(df, z=\"Number of steps in a day\",x='Height(Unit=cm)',y=\"Weight(kilogram)\", color=\"Weight(kilogram)\",size='Weight(kilogram)', \n                           template=\"plotly_dark\",hover_name=\"Weight(kilogram)\")\np_express.show()\n","ec490aed":"p_express = px.scatter(df, x='Height(Unit=cm)',y=\"Weight(kilogram)\", color=\"Weight(kilogram)\",size='Weight(kilogram)', \n                           template=\"plotly_dark\",hover_name=\"Weight(kilogram)\")\np_express.show()","4268084e":"import matplotlib.pyplot as plt\nfig,ax=plt.subplots()\nx=df[\"Weight(kilogram)\"]\ny=df[\"Height(Unit=cm)\"]\nax.scatter(x,y)\nplt.show()","fbd48e9d":"### [18] Answer to the question","ebfcb935":"<BR>\n[Data preprocessing tutorial]\n<pre>\nQuestion 1: Load sample.csv and show it by using Pandas DataFrame.\nQuestion 2: Drop missing value and show the DataFrame. \nQuestion 3: Add a cloumn named \"BMI\" that stands for Body Mass Index.\n            <i>BMI\uff1d [Weight(Kilogram)] \/ [Height(Meter)]**2<\/i>\nQuestion 4: Add a cloumn named \"Ideal Weight\" for each person\n            <i>Ideal Weight\uff1d [Height(Meter)]*[Height(Meter)]*22<\/i>\nQuestion 5: Make a collumn that shows the difference between Weight and Ideal Weight and \n            name the column \"BMI-Ideal Weight\".\nQuestion 6: Make a column named \"BMI Over 25\" that shows BMI is over 25 or not by using apply function.\nQuestion 7: Apply label encoding to a column \"Country\" and show the result in array style.\nQuestion 8: Apply one-hot-encoding without frameworks on a column \"Country\".\n            and connect the processed DataFrame to the last DataFrame.\nQuestion 9: Concatenate the newly made one-hot-encoding DataFrame to the last DataFrame.\nQuestion10: Apply one-hot-encoding without frameworks on a column \"Favorite Food\".\n            and connect the processed DataFrame to the last DataFrame.\n            <i>one of cells has two or more values in one cell<\/i>\nQuestion10: Apply one-hot-encoding without frameworks on a column \"Favorite Food\".\nQuestion11: Show all columns and indexes. Get rid of limitations.\nQuestion12: Show only columns and indexes that have numerical characters. \nQuestion13: Scale columns from 0 to 1 by using MinMax Scaler.\nQuestion14: Let's enjoy and show pairplot figures by using Seaborn. \nQuestion15: Show correlation.\nQuestion16: Load new_sample.csv and change into Numpy Array.\nQuestion17: Predict Mr. J's weight by using Linear Regression Model .etc\n            <i>We only have 6 samples and 1 test sample, but split data into train data and test data.<\/i>\nQuestion18: Prot data and make a 3D-figure by using plotly Express.\nQuestion19: Prot data and make a 2D-figure by using plotly Express.\nQuestion20: Prot data and make a 2D-figure by using Matplotlib.\n<\/pre>","b5764b8b":"### [16] Answer to the question","4b8306c6":"### [14] Answer to the question","7adbde5a":"### [1] Answer to the question","47d33d5a":"### [13] Answer to the question","ed96f71b":"### [17] Answer to the question","ac61a5a1":"### [15] Answer to the question","f517712a":"Thanks for reading my notebook :-)","46609ea6":"### [10] Answer to the question","3f7da274":"### [9] Answer to the question","6810bd75":"### [11] Answer to the question","234ee3ed":"### [4] Answer to the question","61cc750c":"### [2] Answer to the question","7e406ab6":"### [12] Answer to the question","27a35754":"### [7] Answer to the question","3beb3557":"### [8] Answer to the question","3238ee25":"### [6] Answer to the question","d79de58f":"### [19] Answer to the question","80fb4953":"### [5] Answer to the question","c90e85dd":"### [3] Answer to the question","f40d0596":"### [20] Answer to the question"}}