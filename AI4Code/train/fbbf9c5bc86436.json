{"cell_type":{"a9a042ef":"code","a1fff2e2":"code","2dca157a":"code","2a5a9922":"code","549fe000":"code","848847e7":"code","66aa75d0":"code","79387a5d":"code","084fe2e4":"code","e990263d":"code","21a12bf1":"code","3c6bf6a7":"code","f751d459":"code","98bd3012":"code","4314beab":"code","c41a732c":"code","187aaa72":"code","7ac8a8cb":"code","f517b75f":"code","d0839d20":"code","cd899e66":"code","77a997ae":"code","d032e740":"code","b230756a":"code","9d6bd61a":"code","1b589759":"code","14fc19fd":"code","e7abb1a4":"code","d1f02f54":"markdown","2bb1023e":"markdown","fed0cbe0":"markdown","e2f8e8ef":"markdown","0dd2e4cb":"markdown"},"source":{"a9a042ef":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.metrics import classification_report, roc_auc_score\nfrom sklearn.model_selection import train_test_split \nfrom sklearn.ensemble import RandomForestClassifier\nfrom catboost import CatBoostClassifier\nfrom lightgbm import LGBMClassifier\nfrom sklearn.model_selection import cross_val_predict\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import StandardScaler\n\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \nimport warnings \nwarnings.filterwarnings('ignore')\npd.set_option('max_columns', 20)","a1fff2e2":"train = pd.read_csv('\/kaggle\/input\/janatahack-crosssell-prediction\/train.csv',index_col=0)\ntest = pd.read_csv('\/kaggle\/input\/janatahack-crosssell-prediction\/test.csv',index_col=0)\nsample_submission = pd.read_csv('\/kaggle\/input\/janatahack-crosssell-prediction\/sample_submission.csv',index_col=0)","2dca157a":"train[['Driving_License','Previously_Insured','Policy_Sales_Channel','Region_Code']] = train[['Driving_License','Previously_Insured','Policy_Sales_Channel','Region_Code']].astype('object')\ntrain['Response'] = train['Response'].astype('object')\n\ntest[['Driving_License','Previously_Insured','Policy_Sales_Channel','Region_Code']] = test[['Driving_License','Previously_Insured','Policy_Sales_Channel','Region_Code']].astype('object')","2a5a9922":"sns.distplot(train['Annual_Premium']);","549fe000":"premium_median = train['Annual_Premium'].median()\ntrain['Annual_Premium'] = np.where(train['Annual_Premium']> 100000.000000, premium_median, train['Annual_Premium'])\nsns.distplot(train['Annual_Premium']);","848847e7":"premium_median_test = test['Annual_Premium'].median()\ntest['Annual_Premium'] = np.where(test['Annual_Premium']> 100000.000000, premium_median_test, test['Annual_Premium'])\nsns.distplot(test['Annual_Premium']);","66aa75d0":"plt.figure(figsize=(20,6))\nsns.countplot(x='Region_Code',data=train,hue='Response');","79387a5d":"sns.countplot(x='Driving_License',data=train,hue='Response');","084fe2e4":"sns.countplot(x='Vehicle_Damage',data=train,hue='Response');","e990263d":"# channel = train['Policy_Sales_Channel'].value_counts()\n# pct_80 = train.shape[0]*0.80\n# channel.cumsum()[channel.cumsum()<pct_80]\n\n# train[~train['Policy_Sales_Channel'].isin([152,26,124])]['Policy_Sales_Channel'] = 999\n\n# channel.cumsum().iloc[:10]\n#every channel other than 152, 26 and 124 has to be coded as 999 i.e. other","21a12bf1":"train['Vehicle_Age_Damage'] = train['Vehicle_Age'] + '_' + train['Vehicle_Damage']","3c6bf6a7":"test['Vehicle_Age_Damage'] = test['Vehicle_Age'] + '_' + test['Vehicle_Damage']","f751d459":"sns.countplot(x='Gender',data=train,hue='Response');","98bd3012":"sns.countplot(x='Previously_Insured',data=train,hue='Response');","4314beab":"train.head()","c41a732c":"X = train.drop('Response',axis=1)\ny = train['Response'].values","187aaa72":"#Scaling numeric variables\n\nsc = StandardScaler()\nX[X.select_dtypes(exclude='object').columns.to_list()] = sc.fit_transform(X.select_dtypes(exclude='object'))","7ac8a8cb":"test[test.select_dtypes(exclude='object').columns.to_list()] = sc.transform(test.select_dtypes(exclude='object'))","f517b75f":"X.head()","d0839d20":"test.head()","cd899e66":"#Encoding categorical variables\n\nX = pd.get_dummies(X,drop_first=True)\ntest = pd.get_dummies(test,drop_first=True)","77a997ae":"le = LabelEncoder()\ny = le.fit_transform(y)","d032e740":"clf = LGBMClassifier(n_estimators=550,\n                     learning_rate=0.03,\n                     min_child_samples=40,\n                     random_state=1,\n                     colsample_bytree=0.5,\n                     reg_alpha=2,\n                     reg_lambda=2)\n\nclf.fit(X, y, verbose=50,eval_metric = 'auc')","b230756a":"lgb_pred = clf.predict_proba(X)[:,1]\nroc_auc_score(y,lgb_pred)","9d6bd61a":"print(test.shape,X.shape)\n\nmissing_cols = set(X.columns) - set(test.columns)\nfor c in missing_cols:\n    test[c] = 0\n\nprint(test.shape,X.shape)\n\n#keeping the order of columns same for X and test\ntest = test[X.columns]","1b589759":"test_pred = clf.predict_proba(test)[:,1]","14fc19fd":"sample_submission['Response'] = test_pred\nsample_submission.to_csv('Submission_v5.csv')","e7abb1a4":"sample_submission.head()","d1f02f54":"Data pre-processing","2bb1023e":"Treating outliers","fed0cbe0":"Pre-processing test data and predicting probabilities","e2f8e8ef":"Importing libraries and data files","0dd2e4cb":"Training the model"}}