{"cell_type":{"970d9dc4":"code","88faa0cc":"code","701a571f":"code","208f21c8":"code","6d9ed91d":"code","5e1b4039":"code","fce607e4":"code","4bd96731":"code","915eaec9":"code","7294886b":"code","1ef2516a":"code","8cb2c86c":"code","8c341241":"code","33bc6a04":"code","09618a0f":"code","633530fd":"code","7d0c6bda":"code","69acd393":"code","ae098d82":"code","35f82d26":"code","53b71e54":"code","04d93553":"code","39e5f9a0":"code","c9e7a691":"code","b46c0ec4":"code","7b8652b7":"code","e79a0674":"code","31151010":"code","18c94c38":"code","cc9e877f":"code","a6a3b56b":"code","f00d7382":"code","0dba8be3":"markdown","1bb2a172":"markdown","e0168fe0":"markdown","2ab977e1":"markdown"},"source":{"970d9dc4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\npd.set_option('display.max_rows', None)\npd.set_option('max_colwidth', -1)\n","88faa0cc":"path ='\/kaggle\/input\/coronahack-chest-xraydataset\/'\n\nmeta_data = pd.read_csv(path+'Chest_xray_Corona_Metadata.csv')\nmeta_data.head()","701a571f":"meta_data.drop(['Unnamed: 0'],inplace=True,axis=1)","208f21c8":"\nmeta_data.head()","6d9ed91d":"print(meta_data['Label'].value_counts())\nprint(meta_data['Label_2_Virus_category'].value_counts())\nprint(meta_data['Label_1_Virus_category'].value_counts())","5e1b4039":"meta_data[(meta_data['Label']=='Normal') &( meta_data['Dataset_type']=='TRAIN') ].sample(10)","fce607e4":"meta_data[meta_data['Label_2_Virus_category']=='COVID-19'].sample(10)","4bd96731":"COVID_19_train = meta_data[(meta_data['Dataset_type']=='TRAIN') & \n                        ((meta_data['Label']=='Normal')|(meta_data['Label']=='Pnemonia')\n                         & (meta_data['Label_1_Virus_category']=='Virus'))]\n\n\nCOVID_19_test = meta_data[(meta_data['Dataset_type']=='TEST') & \n                        ((meta_data['Label']=='Normal')|(meta_data['Label']=='Pnemonia') \n                         & (meta_data['Label_1_Virus_category']=='Virus'))]","915eaec9":"print(COVID_19_train.shape)\nprint(COVID_19_train['Label'].value_counts())","7294886b":"Train_path='\/kaggle\/input\/coronahack-chest-xraydataset\/Coronahack-Chest-XRay-Dataset\/Coronahack-Chest-XRay-Dataset\/train\/'\nCOVID_19_train['X-ray_Path']=Train_path +COVID_19_train.loc[:,'X_ray_image_name']\n","1ef2516a":"print(COVID_19_test.shape)\nprint(COVID_19_test['Label'].value_counts())","8cb2c86c":"Test_path='\/kaggle\/input\/coronahack-chest-xraydataset\/Coronahack-Chest-XRay-Dataset\/Coronahack-Chest-XRay-Dataset\/test\/'\nCOVID_19_test['X-ray_Path']=Test_path +COVID_19_test.loc[:,'X_ray_image_name']","8c341241":"\nimport cv2","33bc6a04":"\nprint(\"[INFO] loading Train images...\")\nimagePaths = COVID_19_train['X-ray_Path']\ndata = []\nTrainlabels = []\n\nPatient_df=pd.DataFrame()\n\n\nfor imagePath in imagePaths:\n\n  \n  column_name=imagePath.split('\/')[-1]\n  label=COVID_19_train.loc[COVID_19_train['X_ray_image_name']==column_name,'Label'].tolist()\n\n  image=cv2.imread(imagePath)\n  if image.any():\n#       print(image.shape)\n      image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n      image=cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n      image=cv2.resize(image, (300, 300),interpolation=cv2.INTER_AREA)\n      Patient_df[column_name]=image.flatten()\n\n      Trainlabels.append(label[0])\n  else:\n    print('failed to load',imagePath)","09618a0f":"print(len(Trainlabels))\nprint(Patient_df.shape)","633530fd":"print(\"[INFO] loading Test images...\")\n\nTestimagePaths =COVID_19_test['X-ray_Path']\n\ntestPatient_df = pd.DataFrame()\nTestlabels = []\n\nfor imagePath in TestimagePaths:\n\n  column_name=imagePath.split('\/')[-1]\n  label=COVID_19_test.loc[COVID_19_test['X_ray_image_name']==column_name,'Label'].tolist()\n  image=cv2.imread(imagePath)\n  image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n\n  image=cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n  image=cv2.resize(image, (300, 300),interpolation=cv2.INTER_AREA)\n  testPatient_df[column_name]=image.flatten()\n  Testlabels.append(label[0])\n  ","7d0c6bda":"print(len(Testlabels))\nprint(testPatient_df.shape)","69acd393":"Trainlabels = np.array(Trainlabels)\nfrom sklearn import preprocessing\nle = preprocessing.LabelEncoder()\nytrain=le.fit_transform(Trainlabels)","ae098d82":"test_Patient_df=pd.DataFrame()\ntest_Patient_df = testPatient_df.T","35f82d26":"Traindata_df=Patient_df.T","53b71e54":"# creating a dict file  \ntargets = {'Pnemonia':1 ,'Normal': 0,'covid19': 2}  \ny_test = [targets[item] for item in Testlabels] \n# print(y_test,Testlabels) ","04d93553":"import umap\nimport matplotlib.pyplot as plt\n\n# Patient_df data_df\ntrans = umap.UMAP(n_neighbors=50,\n                      min_dist=0.5,n_components = 3,random_state=123).fit(Traindata_df.values)\ntest_embedding = trans.transform(test_Patient_df)","39e5f9a0":"import plotly.express as px\ndf=pd.DataFrame(data=test_embedding,columns=['comp1','comp2','comp3'])\ndf['label']=y_test\nfig = px.scatter_3d(df, x='comp1', y='comp2', z='comp3',color='label')\nfig.show()","c9e7a691":"import umap\n# Patient_df data_df\ntrans_1 = umap.UMAP(n_neighbors=50,\n                      min_dist=0.5,n_components = 3,random_state=123).fit(Traindata_df.values,y=ytrain)\ntest_embedding_1 = trans_1.transform(test_Patient_df)","b46c0ec4":"df2=pd.DataFrame(data=test_embedding_1,columns=['comp1','comp2','comp3'])\ndf2['label']=y_test\nimport plotly.express as px\nfig = px.scatter_3d(df2, x='comp1', y='comp2', z='comp3',color='label')\nfig.show()","7b8652b7":"embedding_1 = umap.UMAP(n_neighbors=10,\n                      min_dist=0.05,n_components = 3,metric='manhattan',random_state=123).fit(Traindata_df.values,y=ytrain)","e79a0674":"train_embeddings = embedding_1.transform(Traindata_df.values)\nplt.scatter(train_embeddings[:, 0], train_embeddings[:, 1], c=ytrain, cmap='Spectral')","31151010":"test_embedding_2 = embedding_1.transform(test_Patient_df)","18c94c38":"import matplotlib.pyplot as plt\nplt.scatter(test_embedding_2[:, 0], test_embedding_2[:, 1], c=y_test, cmap='Spectral')","cc9e877f":"from sklearn.neighbors import KNeighborsClassifier\n\nknn = KNeighborsClassifier(n_neighbors=5, n_jobs=-1)\n%time knn.fit(embedding_1.embedding_, ytrain)","a6a3b56b":"test_knn=embedding_1.transform(test_Patient_df)\n%time knn.score(test_knn, y_test)","f00d7382":"y_pred = knn.predict(test_knn)\nfrom sklearn.metrics import confusion_matrix\nconfusion_matrix(y_test, y_pred)","0dba8be3":"# Metric Learning with UMAP\n            -Training with Labels and Embedding Unlabelled Test Data","1bb2a172":"#  We could also train a model and then later pass new data to the model and have it transform that data into the learned space.\n","e0168fe0":"Work in Progress- \nwill update using NN on the generated embeddings","2ab977e1":"# Unsupervised UMAP"}}