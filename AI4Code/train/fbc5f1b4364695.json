{"cell_type":{"14c86bb1":"code","b9013fbe":"code","71bc009c":"code","a29f7909":"code","0b23f1e3":"code","0ac279a9":"code","bb6f8f20":"code","64dbcd4b":"code","ff01ccab":"code","2b910dcc":"code","7048afaa":"code","2a259d60":"code","2fb60101":"code","f2216a9d":"code","fa88ac6b":"code","5b59b3d5":"code","e017ef0c":"code","90eb768e":"code","73d6d986":"code","a5a95d74":"code","02ab717a":"code","58a13339":"code","7ef83dcd":"code","5e718ea9":"code","8f2fa298":"code","af2f82a5":"markdown","af90efdb":"markdown","ea63e2d3":"markdown"},"source":{"14c86bb1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","b9013fbe":"df = pd.read_csv(\"\/kaggle\/input\/dataisbeautiful\/r_dataisbeautiful_posts.csv\")\ndf.head()","71bc009c":"df.dtypes","a29f7909":"df.isnull().sum()","0b23f1e3":"import seaborn as sns","0ac279a9":"sns.heatmap(df.isnull())","bb6f8f20":"df = df.drop(columns=['author_flair_text','total_awards_received','removed_by','awarders','full_link','created_utc'],axis=1)\ndf.head(2)","64dbcd4b":"df['over_18'] = df['over_18'].replace(True,1)\ndf['over_18'] = df['over_18'].replace(False,0)\ndf['title'] = df['title'].fillna(' ')","ff01ccab":"df.head().style.background_gradient(cmap='Purples')","2b910dcc":"df['text'] = df['title']+\" \"+ df['author']\n\ndf.head().style.background_gradient(cmap='Purples')","7048afaa":"df.drop(columns=['title','author'],axis=1,inplace=True)","2a259d60":"df['over_18'].value_counts()","2fb60101":"sns.heatmap(df.isnull())","f2216a9d":"df.info()","fa88ac6b":"df.shape","5b59b3d5":"import nltk\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nfrom sklearn.feature_extraction.text import CountVectorizer,HashingVectorizer,TfidfTransformer\nfrom mlxtend.plotting import plot_confusion_matrix\nfrom sklearn.metrics import confusion_matrix,accuracy_score\nfrom nltk.corpus import stopwords\nfrom nltk.stem.porter import PorterStemmer\nimport re\nimport matplotlib.pyplot as plt","e017ef0c":"df.head()","90eb768e":"df['text'] = df['text'].astype(str)","73d6d986":"porter = PorterStemmer()\ncorpus = []\nfor i in range(0,len(df)):\n    review = re.sub('[^a-zA-Z]',' ',df['text'][i])\n    review = review.lower()\n    review = review.split()\n    review = [porter.stem(word) for word in review if not word in stopwords.words('english')]\n    review = \" \".join(review)\n    corpus.append(review)\n    ","a5a95d74":"# CountVectorizer\ncv = CountVectorizer(max_features=4000,ngram_range=(1,4))\nX = cv.fit_transform(corpus).toarray()\ncv.get_feature_names()[:20]\n","02ab717a":"cv.get_params()","58a13339":"y = df['over_18']","7ef83dcd":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)","5e718ea9":"# Multinomial NaiveBayes\nfrom sklearn.naive_bayes import MultinomialNB\nmnb = MultinomialNB()\nmnb.fit(X_train,y_train)\ny_pred = mnb.predict(X_test)\ncm = confusion_matrix(y_test,y_pred)\nprint(\"naive bayes accuracy is \",round(accuracy_score(y_test,y_pred),2)*100,\"%\")\nprint(\"\\n\")\nprint(\"confusion matrix for naive bayes \")\nplot_confusion_matrix(cm,class_names=['FAKE','REAL'],cmap='Purples',show_normed=True,colorbar=True,figsize=(6,6))\nplt.show()","8f2fa298":"# PassiveAgressiveClassifier\nfrom sklearn.linear_model import PassiveAggressiveClassifier\npac = PassiveAggressiveClassifier()\npac.fit(X_train,y_train)\ny_pred = pac.predict(X_test)\ncm = confusion_matrix(y_test,y_pred)\nprint(\"Passive Aggressive Classifier accuracy is \",round(accuracy_score(y_test,y_pred),2)*100,\"%\")\nprint(\"\\n\")\nprint(\"confusion matrix for Passive Aggressive Classifier \")\nplot_confusion_matrix(cm,class_names=['fake','Real'],cmap='Purples',show_normed=True,colorbar=True,figsize=(6,6))\nplt.show()","af2f82a5":"# PassiveAgressiveClassifier","af90efdb":"# Furthur modifications will be done including visualisations and other vectorizers","ea63e2d3":"# # Multinomial NaiveBayes"}}