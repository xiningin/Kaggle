{"cell_type":{"dae87bb1":"code","e7f4190f":"code","345b76e4":"code","86d755ad":"code","2b1aad62":"code","79fa8401":"code","ab600c18":"code","fbe7a723":"code","7e852744":"code","76a24ed6":"code","ab9ac19e":"code","317f62c7":"markdown","262db99d":"markdown","6995632e":"markdown","90f0717f":"markdown"},"source":{"dae87bb1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom collections import defaultdict\nimport re\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","e7f4190f":"def preprocess_string(str_arg):\n    \n    \"\"\"\"\n        Parameters:\n        ----------\n        str_arg: example string to be preprocessed\n        \n        What the function does?\n        -----------------------\n        Preprocess the string argument - str_arg - such that :\n        1. everything apart from letters is excluded\n        2. multiple spaces are replaced by single space\n        3. str_arg is converted to lower case \n        \n        Example:\n        --------\n        Input :  Menu is absolutely perfect,loved it!\n        Output:  ['menu', 'is', 'absolutely', 'perfect', 'loved', 'it']\n        \n\n        Returns:\n        ---------\n        Preprocessed string \n        \n    \"\"\"\n    \n    cleaned_str=re.sub('[^a-z\\s]+',' ',str_arg,flags=re.IGNORECASE) #every char except alphabets is replaced\n    cleaned_str=re.sub('(\\s+)',' ',cleaned_str) #multiple spaces are replaced by single space\n    cleaned_str=cleaned_str.lower() #converting the cleaned string to lower case\n    \n    return cleaned_str # eturning the preprocessed string in tokenized form","345b76e4":"class NaiveBayes:\n    \n    def __init__(self,unique_classes):\n        \n        self.classes=unique_classes # Constructor is sinply passed with unique number of classes of the training set\n        \n\n    def addToBow(self,example,dict_index):\n        \n        '''\n            Parameters:\n            1. example \n            2. dict_index - implies to which BoW category this example belongs to\n\n            What the function does?\n            -----------------------\n            It simply splits the example on the basis of space as a tokenizer and adds every tokenized word to\n            its corresponding dictionary\/BoW\n\n            Returns:\n            ---------\n            Nothing\n        \n       '''\n        \n        if isinstance(example,np.ndarray): example=example[0]\n     \n        for token_word in example.split(): #for every word in preprocessed example\n          \n            self.bow_dicts[dict_index][token_word]+=1 #increment in its count\n            \n    def train(self,dataset,labels):\n        \n        '''\n            Parameters:\n            1. dataset - shape = (m X d)\n            2. labels - shape = (m,)\n\n            What the function does?\n            -----------------------\n            This is the training function which will train the Naive Bayes Model i.e compute a BoW for each\n            category\/class. \n\n            Returns:\n            ---------\n            Nothing\n        \n        '''\n    \n        self.examples=dataset\n        self.labels=labels\n        self.bow_dicts=np.array([defaultdict(lambda:0) for index in range(self.classes.shape[0])])\n        \n        #only convert to numpy arrays if initially not passed as numpy arrays - else its a useless recomputation\n        \n        if not isinstance(self.examples,np.ndarray): self.examples=np.array(self.examples)\n        if not isinstance(self.labels,np.ndarray): self.labels=np.array(self.labels)\n            \n        #constructing BoW for each category\n        for cat_index,cat in enumerate(self.classes):\n          \n            all_cat_examples=self.examples[self.labels==cat] #filter all examples of category == cat\n            \n            #get examples preprocessed\n            \n            cleaned_examples=[preprocess_string(cat_example) for cat_example in all_cat_examples]\n            \n            cleaned_examples=pd.DataFrame(data=cleaned_examples)\n            \n            #now costruct BoW of this particular category\n            np.apply_along_axis(self.addToBow,1,cleaned_examples,cat_index)\n            \n                \n        ###################################################################################################\n        \n        '''\n            Although we are done with the training of Naive Bayes Model BUT!!!!!!\n            ------------------------------------------------------------------------------------\n            Remember The Test Time Forumla ? : {for each word w [ count(w|c)+1 ] \/ [ count(c) + |V| + 1 ] } * p(c)\n            ------------------------------------------------------------------------------------\n            \n            We are done with constructing of BoW for each category. But we need to precompute a few \n            other calculations at training time too:\n            1. prior probability of each class - p(c)\n            2. vocabulary |V| \n            3. denominator value of each class - [ count(c) + |V| + 1 ] \n            \n            Reason for doing this precomputing calculations stuff ???\n            ---------------------\n            We can do all these 3 calculations at test time too BUT doing so means to re-compute these \n            again and again every time the test function will be called - this would significantly\n            increase the computation time especially when we have a lot of test examples to classify!!!).  \n            And moreover, it doensot make sense to repeatedly compute the same thing - \n            why do extra computations ???\n            So we will precompute all of them & use them during test time to speed up predictions.\n            \n        '''\n        \n        ###################################################################################################\n      \n        prob_classes=np.empty(self.classes.shape[0])\n        all_words=[]\n        cat_word_counts=np.empty(self.classes.shape[0])\n        for cat_index,cat in enumerate(self.classes):\n           \n            #Calculating prior probability p(c) for each class\n            prob_classes[cat_index]=np.sum(self.labels==cat)\/float(self.labels.shape[0]) \n            \n            #Calculating total counts of all the words of each class \n            count=list(self.bow_dicts[cat_index].values())\n            cat_word_counts[cat_index]=np.sum(np.array(list(self.bow_dicts[cat_index].values())))+1 # |v| is remaining to be added\n            \n            #get all words of this category                                \n            all_words+=self.bow_dicts[cat_index].keys()\n                                                     \n        \n        #combine all words of every category & make them unique to get vocabulary -V- of entire training set\n        \n        self.vocab=np.unique(np.array(all_words))\n        self.vocab_length=self.vocab.shape[0]\n                                  \n        #computing denominator value                                      \n        denoms=np.array([cat_word_counts[cat_index]+self.vocab_length+1 for cat_index,cat in enumerate(self.classes)])                                                                          \n      \n        '''\n            Now that we have everything precomputed as well, its better to organize everything in a tuple \n            rather than to have a separate list for every thing.\n            \n            Every element of self.cats_info has a tuple of values\n            Each tuple has a dict at index 0, prior probability at index 1, denominator value at index 2\n        '''\n        \n        self.cats_info=[(self.bow_dicts[cat_index],prob_classes[cat_index],denoms[cat_index]) for cat_index,cat in enumerate(self.classes)]                               \n        self.cats_info=np.array(self.cats_info)                                 \n                                              \n                                              \n    def getExampleProb(self,test_example):                                \n        \n        '''\n            Parameters:\n            -----------\n            1. a single test example \n\n            What the function does?\n            -----------------------\n            Function that estimates posterior probability of the given test example\n\n            Returns:\n            ---------\n            probability of test example in ALL CLASSES\n        '''                                      \n                                              \n        likelihood_prob=np.zeros(self.classes.shape[0]) #to store probability w.r.t each class\n        \n        #finding probability w.r.t each class of the given test example\n        for cat_index,cat in enumerate(self.classes): \n                             \n            for test_token in test_example.split(): #split the test example and get p of each test word\n                \n                ####################################################################################\n                                              \n                #This loop computes : for each word w [ count(w|c)+1 ] \/ [ count(c) + |V| + 1 ]                               \n                                              \n                ####################################################################################                              \n                \n                #get total count of this test token from it's respective training dict to get numerator value                           \n                test_token_counts=self.cats_info[cat_index][0].get(test_token,0)+1\n                \n                #now get likelihood of this test_token word                              \n                test_token_prob=test_token_counts\/float(self.cats_info[cat_index][2])                              \n                \n                #remember why taking log? To prevent underflow!\n                likelihood_prob[cat_index]+=np.log(test_token_prob)\n                                              \n        # we have likelihood estimate of the given example against every class but we need posterior probility\n        post_prob=np.empty(self.classes.shape[0])\n        for cat_index,cat in enumerate(self.classes):\n            post_prob[cat_index]=likelihood_prob[cat_index]+np.log(self.cats_info[cat_index][1])                                  \n      \n        return post_prob\n    \n   \n    def test(self,test_set):\n      \n        '''\n            Parameters:\n            -----------\n            1. A complete test set of shape (m,)\n            \n\n            What the function does?\n            -----------------------\n            Determines probability of each test example against all classes and predicts the label\n            against which the class probability is maximum\n\n            Returns:\n            ---------\n            Predictions of test examples - A single prediction against every test example\n        '''       \n       \n        predictions=[] #to store prediction of each test example\n        for example in test_set: \n                                              \n            #preprocess the test example the same way we did for training set exampels                                  \n            cleaned_example=preprocess_string(example) \n             \n            #simply get the posterior probability of every example                                  \n            post_prob=self.getExampleProb(cleaned_example) #get prob of this example for both classes\n            \n            #simply pick the max value and map against self.classes!\n            predictions.append(self.classes[np.argmax(post_prob)])\n                \n        return np.array(predictions)","86d755ad":"import pandas as pd\ndf = pd.read_csv(\"..\/input\/word2vec-tutorial-suite\/labeledTrainData.tsv\", sep=\"\\t\")","2b1aad62":"df.head()","79fa8401":"#getting training set examples labels\ny_train=df['sentiment'].values\nx_train=df['review'].values\nprint (\"Unique Classes: \",np.unique(y_train))\nprint (\"Total Number of Training Examples: \",x_train.shape)","ab600c18":"from sklearn.model_selection import train_test_split\ntrain_data,test_data,train_labels,test_labels=train_test_split(x_train,y_train,shuffle=True,test_size=0.25,random_state=42,stratify=y_train)\nclasses=np.unique(train_labels)","fbe7a723":"\nnb=NaiveBayes(classes)\nprint (\"------------------Training In Progress------------------------\")\nprint (\"Training Examples: \",train_data.shape)\nnb.train(train_data,train_labels)\nprint ('------------------------Training Completed!')\n\n# Validating phase \n\npclasses=nb.test(test_data)\ntest_acc=np.sum(pclasses==test_labels)\/float(test_labels.shape[0])\nprint (\"Test Set Examples: \",test_labels.shape[0])\nprint (\"Test Set Accuracy: \",test_acc)","7e852744":"# Loading the kaggle test dataset\ntest=pd.read_csv('..\/input\/word2vec-tutorial-suite\/testData.tsv',sep='\\t')\nXtest=test.review.values\n\n#generating predictions....\npclasses=nb.test(Xtest) \n\n#writing results to csv to uplaoding on kaggle!\nkaggle_df=pd.DataFrame(data=np.column_stack([test[\"id\"].values,pclasses]),columns=[\"id\",\"sentiment\"])\nkaggle_df","76a24ed6":"from sklearn.pipeline import Pipeline #importing the pipeline functionality\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.feature_extraction.text import CountVectorizer\n\nclf=Pipeline([('count_vect', CountVectorizer()),('clf', MultinomialNB())])\nclf.fit(train_data,train_labels)  \nprint (\"Done\")","ab9ac19e":"predicted=clf.predict(test_data)\nprint (\"Test Set Accuracy : \",np.sum(predicted==test_labels)\/float(len(predicted))) ","317f62c7":"# Na\u00efve Bayes \n\n## Explanation\n\nhttps:\/\/towardsdatascience.com\/unfolding-na%C3%AFve-bayes-from-scratch-2e86dcae4b01\nhttps:\/\/towardsdatascience.com\/na%C3%AFve-bayes-from-scratch-using-python-only-no-fancy-frameworks-a1904b37222d","262db99d":"## Without skLearn","6995632e":"Data taken from https:\/\/www.kaggle.com\/c\/word2vec-nlp-tutorial","90f0717f":"### Using skLearn\n\nhttps:\/\/towardsdatascience.com\/the-final-act-just-like-a-na%C3%AFve-bayes-pro-5c440b511b8d"}}