{"cell_type":{"329e89e7":"code","c664b58a":"code","f71847ec":"code","493d4410":"code","87f7c6af":"code","af5a8e9a":"code","de781035":"code","148eb4e1":"code","1f24fc09":"code","c3eea1a0":"code","616e7848":"markdown","85ac9342":"markdown","19b78435":"markdown","adba791c":"markdown","501fa45d":"markdown","c57e8391":"markdown","9e4b9f0a":"markdown"},"source":{"329e89e7":"## Importing Required Libaries","c664b58a":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport tensorflow as tf\nimport glob\nfrom tensorflow.keras.models import Sequential, Model, load_model\nfrom tensorflow.keras.applications import EfficientNetB3\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow import keras\n\nSEED = 42\nDEBUG = False\n","f71847ec":"weight_path = '..\/input\/efficientnetb3-keras-tf2-baseline-training\/best_model.hdf5'\n\nmy_model = load_model(weight_path)\n\n","493d4410":"\ntest_images = glob.glob('..\/input\/cassava-leaf-disease-classification\/test_images\/*.jpg')\n\ndf_test = pd.DataFrame(test_images, columns = ['path'])\n\n\n\ndef make_test_gen( batch_size=64):\n    my_test_idg = ImageDataGenerator(#rescale=1. \/ 255.0,\n                                    horizontal_flip = True, \n                                    vertical_flip = True, \n                                    height_shift_range=0.2, \n                                    width_shift_range=0.2, \n                                    brightness_range=[0.7, 1.5],\n                                    rotation_range=30, \n                                    shear_range=0.2,\n                                    fill_mode='nearest',\n                                    zoom_range=[0.3,0.6])\n        \n    test_gen= my_test_idg.flow_from_dataframe(dataframe=df_test,\n\n                                                x_col=\"path\",\n                                                y_col=None,\n                                                batch_size=batch_size,\n                                                seed=42,\n                                                shuffle=False,\n                                                class_mode=None,\n                                                target_size=(300,300)) ## (height, width)\n    return test_gen\n\n\n\n","87f7c6af":"test_gen = make_test_gen(batch_size = 128)\n","af5a8e9a":"preds = []\nfor i in range(15):\n    #test_gen.reset()\n    local_pred = my_model.predict(test_gen,  verbose = True)\n    preds.append(local_pred)","de781035":"pred_test = np.mean(preds, axis=0)","148eb4e1":"#pred_test = my_model.predict(test_gen,  verbose = True)\npred_test_labels = np.argmax(pred_test, axis = -1)","1f24fc09":"final_submission = df_test\nfinal_submission['image_id'] = final_submission.path.str.split('\/').str[-1]\nfinal_submission['label'] = pred_test_labels\n\nfinal_csv = final_submission[['image_id', 'label']]\nfinal_csv.head()","c3eea1a0":"final_csv.to_csv('submission.csv', index=False)","616e7848":"## Update 25\/11\n\n1. Using 15*TTA\n","85ac9342":"## Test Data Generator","19b78435":"**While Saving I am saving weights plus architecture so I don't need to build the model again here**","adba791c":"## Train Baseline Kernel is [here](https:\/\/www.kaggle.com\/harveenchadha\/efficientnetb3-keras-tf2-baseline-training).\n\n","501fa45d":"## Generating Predictions File","c57e8391":"## Generating Predictions","9e4b9f0a":"## Loading Best Model"}}