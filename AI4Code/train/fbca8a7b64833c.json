{"cell_type":{"3aee3217":"code","1660d6bf":"code","a173ae08":"code","70e2a7a9":"code","b36ea3f3":"code","a6b7af54":"code","b0addf0c":"code","e013f69c":"code","a2769e88":"code","0d937c52":"code","4d2a3f94":"markdown","42f88863":"markdown"},"source":{"3aee3217":"import warnings\nwarnings.filterwarnings('ignore')\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\nfrom sklearn.metrics import mean_squared_error,r2_score\nfrom statsmodels.tsa.arima_model import ARIMA\nimport statsmodels.api as sm\nfrom fbprophet import Prophet\nfrom fbprophet.plot import plot_plotly, add_changepoints_to_plot\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.preprocessing import OrdinalEncoder, OneHotEncoder\nimport plotly.express as px\nimport matplotlib.dates as mdates\n%matplotlib inline\nfrom pylab import rcParams\npd.options.display.max_rows=100#Notebook \u7684\u4e00\u4e2acell\u7684\u663e\u793a\u884c\u6570\npd.options.display.max_columns=100#Notebook \u7684\u4e00\u4e2acell\u7684\u663e\u793a\u5217\u6570\npd.options.display.float_format = '{:,.2f}'.format\nstd = StandardScaler()\nmms = MinMaxScaler()","1660d6bf":"filename = '..\/input\/us-counties-covid19-weather-sociohealth-data\/US_counties_COVID19_health_weather_data.csv'\n\n#select significant factor based on regression analysis showed below\ndf1 = pd.read_csv(filename)\ndf2 = df1[['date',\n 'county',\n 'state',\n 'fips',\n 'cases',\n 'deaths',\n 'percent_less_than_18_years_of_age',\n 'percent_65_and_over',\n 'percent_below_poverty',\n 'mean_temp',\n 'total_population',\n 'population_density_per_sqmi',\n 'violent_crime_rate',\n 'percent_black',\n 'percent_asian',\n 'percent_hispanic',\n 'percent_non_hispanic_white',\n 'percent_female',\n 'percent_rural',\n 'percent_overcrowding']\n]\ndf2.columns=['Date',\n 'County',\n 'State',\n 'fips',\n 'cases',\n 'deaths',\n '<18',\n '>65',\n '<poverty',\n 'temp',\n 'population',\n 'population_density_per_sqmi',\n 'violent_crime_rate',\n 'percent_black',\n 'percent_asian',\n 'percent_hispanic',\n 'percent_non_hispanic_white',\n 'percent_female',\n 'percent_rural',\n 'percent_overcrowding']","a173ae08":"#Calculate infection rate, death rate\ndf2.loc[:,'casep'] = df2['cases']\/df2['population']*100\ndf2.loc[:,'deathp'] = df2['deaths']\/df2['cases']*100\n\n#Create dataframe for futhre calculation\ndf2['Date']=pd.to_datetime(df2['Date'])\ndf2.head()\ndfc = df2.groupby(['County','State']).agg('max').reset_index()\ndfc = dfc.sort_values('cases', ascending=0)\n#get the top 200 counties with highest cases\ndfc['ct'] = dfc['State'] + ' '+ dfc['County'] \ndf2['ct'] =  df2['State'] + ' '+ df2['County']\nnamelist = dfc['ct'].unique()[:200].tolist()\n\n#data for top25 county cases evolving\ndfwc = df2[df2['ct'].isin(namelist)].sort_values('cases',ascending=1).reset_index().drop(['index','fips'],axis=1)","70e2a7a9":"#overall dataframe for training based on fbprophet model\ndf_pre = df2.groupby(['Date']).agg('sum').reset_index()\ndf_pre = df_pre[['Date','cases']]\ndf_pre.columns=['ds','y']","b36ea3f3":"#fbprophet parameter tunning, the parameter was tunned several times and the value showed below is based on final result\nimport itertools\nfrom fbprophet.diagnostics import cross_validation,performance_metrics\ncutoffs = pd.to_datetime(['2020-03-01', '2020-06-01', '2020-09-01'])\nparam_grid = {  \n    'changepoint_prior_scale': [8,80],'seasonality_prior_scale': [0.1,1,10],\n}\n\n# Generate all combinations of parameters\nall_params = [dict(zip(param_grid.keys(), v)) for v in itertools.product(*param_grid.values())]\nrmses = []  # Store the RMSEs for each params here\n\n# Use cross validation to evaluate all parameters\nfor params in all_params:\n    m = Prophet(**params).fit(df_pre)  # Fit model with given params\n    df_cv = cross_validation(m, cutoffs=cutoffs, horizon='30 days', parallel=\"processes\")\n    df_p = performance_metrics(df_cv, rolling_window=1)\n    rmses.append(df_p['rmse'].values[0])\n\n# Find the best parameters\ntuning_results = pd.DataFrame(all_params)\ntuning_results['rmse'] = rmses\nprint(tuning_results)\nbest_params = all_params[np.argmin(rmses)]\nprint(best_params)","a6b7af54":"#Besides cross validation, we compare the real data in 2021 with prediction as well.\n#The result predicted about 22 million cases in mid of Feb.2021, comparing the real number 26 million in Feb.2021, is basically acceptable. \n#The prediction error is due to a sharp increase in Jan2021 which was not reflected in 2020 data.\nm = Prophet(changepoint_prior_scale= 80)\nm.fit(df_pre)\nfuture = m.make_future_dataframe(periods=80)\nforecast = m.predict(future)\nforecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()\nfig1 = m.plot(forecast)","b0addf0c":"px.area(forecast, x='ds', y='yhat')","e013f69c":"#train and predict based on history data of each top200 infected county\ntem = pd.DataFrame(columns=['Date','County','casep'])\nfor i in namelist:\n    m = Prophet(changepoint_prior_scale= 80)\n    df_train = dfwc[dfwc.ct==i][['Date','casep']].rename(columns={'Date':'ds','casep':'y'})\n    m.fit(df_train)\n    future = m.make_future_dataframe(periods=200)\n    forecast = m.predict(future)\n    forecast['County'] = dfwc[dfwc.ct==i].ct.unique()[0]\n    forecast['State'] = dfwc[dfwc.ct==i].State.unique()[0]\n    tempdf = forecast[['ds','County','yhat','State']].iloc[-200:,:]\n    tempdf.columns=['Date','County','casep','State']\n    tem = tem.append(tempdf,ignore_index=True)\ntem = tem.rename({'casep':'Casep'},axis=1)","a2769e88":"#append dfwc and temp to final dataframe for plot\nfindf = dfwc[['Date','ct','casep','State']].rename({'ct':'County'},axis=1)\nfindf = findf.append(tem,ignore_index=True)\n#Drop two states that only have 1 county in top 200 infected county\nind = findf[findf.State.isin(['Alaska','Delaware'])].index\nfindf = findf.drop(ind)","0d937c52":"#draw the Top200 county performance by seaborn facetgrid\na = findf.State.unique().tolist()\na = sorted(a)\ng = sns.FacetGrid(findf, col='State', col_wrap=7,col_order=a)\ng.map_dataframe(sns.lineplot, x='Date', y='casep',hue='County')\ng.map_dataframe(sns.lineplot, x='Date', y='Casep',hue='County',alpha=0.8,linestyle=\":\")\ng.set_ylabels('%Infection Rate')\ng.set(xticklabels=['01\/2020','','','','12\/2020','','','','06\/2021','',''])\n#g.format_xdata = mdates.DateFormatter('%mm\/%YY')\ng.set_xticklabels(size = 9)\ng.add_legend(ncol=2,loc = 'right')\ng._legend.set_title(\"State County\")\n#output the fiture\ng.savefig(\"output.png\")","4d2a3f94":"# Code","42f88863":"# Abstract\n\n* US Top200 counties that're most affected by Covid-19 were analyzed and predicted.\n* * In each lineplot, solid line showed history infection% while dotted line predicted trend in 2021.\n* * Some counties infection rate reached to 15% in 2020 and predicted to be 40% in mid of 2021.\n* * The model use fbprophet for prediction and parameter tunned using prophet cross validation.\n* * Besides cross validation, we also compare the up to date number in 2021 to evaluate the prophet model robustness.\n* * Each county prediction was based on its own history data in 2020 using fbprophet with tunned parameter.\n* * The screenshot of output picture as follows, Just a kind notice - you can right click and save the .png file in output session then zoom it to have a better view. :-)\n![download%20%282%29.png](attachment:download%20%282%29.png)"}}