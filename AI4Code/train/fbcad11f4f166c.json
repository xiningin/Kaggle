{"cell_type":{"91a27657":"code","b0e2c674":"code","7a684d43":"code","4c55d438":"code","13382b24":"code","8ac4dbe2":"code","22e716a0":"code","d7f44a35":"code","7111ddf6":"code","d6333fc5":"code","3eba708b":"code","c3a3856d":"code","5cf76281":"code","7b03d23c":"code","1882848b":"code","270ecd1a":"code","1414c361":"code","7ab8162b":"code","fd5c52f4":"code","f7e558c0":"code","077fd0a8":"code","b0d23f96":"code","a840002e":"code","2c744ee7":"code","f34e4b24":"code","0331baec":"code","eaa0b890":"code","0fbdbea8":"code","302dbbb9":"code","c81e2332":"code","ab4d44af":"code","c6283767":"code","41bfdec7":"code","c30cd44e":"code","c9c56e09":"code","5fa5fccf":"code","9f4766fa":"code","4346ab32":"code","e16535aa":"code","5e018125":"code","24e2deec":"code","5da244ec":"code","6d9584f0":"code","acc84079":"code","c7642c23":"code","f123781c":"code","3a6139b0":"code","da3faddb":"code","37df9eb7":"code","0b4edf96":"code","3e91efe8":"code","243e4387":"code","9ef7f250":"code","4cbe98e9":"code","3404af77":"code","b1db6b29":"code","6a0e013d":"code","18c1c5b9":"code","0abef561":"markdown","2863826a":"markdown","f55a7a4b":"markdown","d4234168":"markdown"},"source":{"91a27657":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport numpy as np\nimport pandas as pd\n\n# to show whole column and rows \npd.set_option('display.max_columns',5400)\npd.set_option('display.max_rows',5400)\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\n\n\n\nfrom sklearn.linear_model import LinearRegression\nfrom xgboost import XGBRegressor\nfrom sklearn.ensemble import RandomForestRegressor\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n        \n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b0e2c674":"#Reading datas\ntrain = pd.read_csv('..\/input\/covid19-global-forecasting-week-5\/train.csv')\ntest = pd.read_csv('..\/input\/covid19-global-forecasting-week-5\/test.csv')\nsubmission = pd.read_csv('..\/input\/covid19-global-forecasting-week-5\/submission.csv')","7a684d43":"train","4c55d438":"test","13382b24":"submission","8ac4dbe2":"print ('train dataset shape : ', train.shape,'\\n', 'test dataset shape : ',test.shape)","22e716a0":"#General information about train data set\n\ntrain.info()","d7f44a35":"#General information about train data set\n\ntest.info()","7111ddf6":"# Checking null values \n\ntrain.isnull().sum()","d6333fc5":"# Checking % null values \n\nround(100*(train.isnull().sum() )\/ train.shape[0],3)","3eba708b":"round(100*(test.isnull().sum() )\/ train.shape[0],3)","c3a3856d":"train.columns","5cf76281":"#checking values where country is not null\n\ntrain.loc[~train['County'].isnull()]","7b03d23c":"#checking values where country is not null\n\ntrain.loc[train['County'].isnull()]","1882848b":"# Here we are considering only country wise. Same can be performed for county as well as province_state.\n# So dropping 'County', 'Province_State'\n\ntrain = train.drop(['County', 'Province_State'],axis = 1)\ntest  = test.drop(['County', 'Province_State'],axis = 1)\ntrain","270ecd1a":"# converting date column from object type to date time \n\ntrain['Date'] = pd.to_datetime(train['Date'])\ntest['Date'] = pd.to_datetime(test['Date'])\ntrain.info()","1414c361":"# Creating separate df for confirmed cases & Fatalities\n\nby_tv = train.groupby('Target')\nconfirmed_df = by_tv.get_group('ConfirmedCases')\nconfirmed_df","7ab8162b":"fatality_df = by_tv.get_group('Fatalities')\nfatality_df","fd5c52f4":"# Plotting mean confirmed cases country wise \n\nplt.figure(figsize=(30,100))\nax0=sns.barplot(x = 'TargetValue',y= 'Country_Region', data = confirmed_df,estimator = np.mean, ci =None)\n\nfor p in ax0.patches:\n  val = p.get_width() # height of each bar\n  x = p.get_x() + p.get_width() + 10.0 #x-cordinate of the text\n  y = p.get_y() + p.get_height()\/2 # y-coordinate of the text\n  ax0.annotate(round(val,2),(x,y)) # attaching bar height to each bar of the barplot\n\nplt.show()\n\n","f7e558c0":"# Plotting mean fatalities country wise\n\nplt.figure(figsize=(30,100))\n\na = sns.barplot(x = 'TargetValue', y = 'Country_Region', estimator = np.mean, data = fatality_df,ci =None)\n\nfor p in a.patches:\n  val = p.get_width()\n  x = p.get_x() + p.get_width() + 10\n  y = p.get_y() + p.get_height()\/2\n  a.annotate(round(val,2),(x,y))\n\nplt.show()","077fd0a8":"#country vs targetValue\n\nfig = px.pie(train, values='TargetValue', names='Country_Region')\n\nfig.show()\n","b0d23f96":"# ploting confirmed cases country wise with time \n\ncountries =set( confirmed_df['Country_Region'])\n\nlen(countries)","a840002e":"\n#Creating Features from date columns\n\ndef date_feature(df):\n  df['day'] = df['Date'].dt.day\n  df['month'] = df['Date'].dt.month\n#   df['dayofweek'] = df['Date'].dt.dayofweek  \n#   df['weekofyear'] = df['Date'].dt.weekofyear #these are not selected as they dont give good result -reults were checked\n#   df['quarter'] = df['Date'].dt.quarter\n\n  return df\n  \n","2c744ee7":"train = date_feature(train)\ntest = date_feature(test)\ntrain","f34e4b24":"# dropping date column\n\ntrain.drop(['Date'],axis =1, inplace =True)\ntest.drop(['Date'],axis =1, inplace =True)","0331baec":"train.columns","eaa0b890":"# Rearranging columns of train\n\ntrain = train [['Id', 'Country_Region', 'Population','day', 'month','Weight','Target', 'TargetValue']]\n# Rearranging columns of test\n\ntest = test [['ForecastId','Country_Region', 'Population','day', 'month','Weight','Target']]\n\ntrain","0fbdbea8":"country_train = set(train['Country_Region']) #unique countries in train dataset\ncountry_test = set(test['Country_Region']) #unique countries in test dataset\n\ncountry_list = [i for i in country_train if i in country_test]\n\nprint('no. of unique countries in train dataset = ', len(country_train),'\\n','no. of unique countries in train dataset = ',len(country_test))\nprint('no. of unique countries after varification =', len(country_list))","302dbbb9":"target_train = set(train['Target'])\ntarget_test = set(test['Target'])\n\ntarget_list = [i for i in target_train if i in target_test]\n\nprint('no. of unique Target values in train dataset = ', len(target_train),'\\n','no. of unique Target values in train dataset = ',len(target_test))\nprint('no. of unique Target values after varification =', len(target_list))","c81e2332":"# encoding target values \n\ncombine = [train,test]\nfor dataset in combine:\n    dataset['Target'] = dataset['Target'].map({'ConfirmedCases':0,'Fatalities':1}).astype(int)\ntrain","ab4d44af":"#Encoding Country names\n\ncombine = [train,test]\ncountry = train['Country_Region'].unique()\nnum = [item for item in range(1,len(country)+1)]\ncountry_num = dict(zip(country,num))\nfor dataset in combine:\n    dataset['Country_Region'] = dataset['Country_Region'].map(country_num).astype(int)\n\ntrain","c6283767":"#Removing id from train dataset\nid_train = train.pop('Id')\ntrain","41bfdec7":"# for test dataset\n\nid_test = test.pop('ForecastId')\ntest","c30cd44e":"# Spliting into X and y \n\ny = train.pop('TargetValue')\nX = train\nX","c9c56e09":"# Spliting into train and test \n\nfrom sklearn.model_selection import train_test_split\n\nX_train,X_test, y_train,y_test = train_test_split(X,y, test_size = 0.10,random_state =7)\nX_train","5fa5fccf":"X_test","9f4766fa":"print('X_train shape : ',X_train.shape, '\\n','X_test shape : ',X_test.shape)","4346ab32":"print('y_train shape : ',y_train.shape, '\\n','y_test shape : ',y_test.shape)","e16535aa":"col = X_train.columns","5e018125":"# # Standardising for faster convergence\n\n# from sklearn.preprocessing import StandardScaler\n\n# scaler = StandardScaler()\n\n# X_train[col] = scaler.fit_transform(X_train[col])\n\n\n","24e2deec":"# X_train","5da244ec":"# X_test[col] = scaler.transform(X_test[col])\n# X_test","6d9584f0":"# # Scaling test data set\n\n# test[col] = scaler.transform(test[col])\n# test","acc84079":"# Searching for best parameters by Gridsearch\n\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import KFold\n\n\n# Hyperparameter tuning for random forest\n\n# param_rf = {\n#     'max_depth': [8,10],\n#     'min_samples_leaf': range(50, 450, 50),\n#     'min_samples_split':range(50, 300, 50),\n#     'n_estimators': [100,150,200],\n    \n# }\n\n# rf = RandomForestRegressor(n_jobs=-1, max_features='auto',random_state=105)\n\n# folds= KFold(n_splits = 3, shuffle = True, random_state = 90)\n\n# grid_rf = GridSearchCV(estimator = rf, param_grid = param_rf, \n#                           cv = folds, n_jobs = -1,verbose = 1,scoring = 'r2')\n\n\n# # Fitting\n# grid_rf.fit(X_train, y_train)","c7642c23":"# #best params\n# grid_rf.best_params_","f123781c":"# Random forest\n\nrf = RandomForestRegressor(n_jobs = -1,random_state=7)\n\nrf.fit(X_train,y_train)","3a6139b0":"#Predicting\n\ny_train_pred = rf.predict(X_test)\npd.DataFrame({'y_train_test':y_test, 'y_train_pred': y_train_pred})","da3faddb":"# importing metrics\n\nfrom sklearn.metrics import r2_score\n\nr2_score(y_test,y_train_pred)\n","37df9eb7":"#Predicting on test data for submission\n\ntest_pred = rf.predict(test)\ntest_pred","0b4edf96":"# # Using XGboost\n\n# # trying with xgboost\n\n# xgb=XGBRegressor(max_depth=3,learning_rate=0.1,\n#                   objective='reg:squarederror', booster='gbtree', n_jobs=1, nthread=None, gamma=0,\n#                   subsample=0.75,reg_alpha=0,reg_lamda=1,\n#                   scale_pos_weight=1, base_score=0.5, random_state=100)\n\n\n# xgb.fit(X_train,y_train)\n","3e91efe8":"# y_pred_xgb = xgb.predict(X_test)\n\n# pd.DataFrame({'y_train_test':y_test, 'y_train_pred': y_pred_xgb})","243e4387":"# r2_score(y_test,y_pred_xgb) # Score was 0.754 hence only Randomforest is selected","9ef7f250":"#Creatin submission file\n\nsub = pd.DataFrame({'Id': id_test , 'TargetValue': test_pred})\nsub","4cbe98e9":"m=sub.groupby(['Id'])['TargetValue'].quantile(q=0.05).reset_index()\nn=sub.groupby(['Id'])['TargetValue'].quantile(q=0.5).reset_index()\nq=sub.groupby(['Id'])['TargetValue'].quantile(q=0.95).reset_index()","3404af77":"m.columns = ['Id' , 'q0.05']\nn.columns = ['Id' , 'q0.5']\nq.columns = ['Id' , 'q0.95']","b1db6b29":"m = pd.concat([m,n['q0.5'] , q['q0.95']],1)\nm","6a0e013d":"id_list = []\nvariable_list = []\nvalue_list = []\nfor index, row in m.iterrows():\n  id_list.append(row['Id'])\n  variable_list.append('q0.05')\n  value_list.append(row['q0.05'])\n\n  id_list.append(row['Id'])\n  variable_list.append('q0.5')\n  value_list.append(row['q0.5'])\n\n  id_list.append(row['Id'])\n  variable_list.append('q0.95')\n  value_list.append(row['q0.95'])\n\nsub = pd.DataFrame({'Id':id_list, 'variable': variable_list, 'value':value_list})\nsub","18c1c5b9":"sub = sub.astype({'Id':int})\nsub['variable']=sub['variable'].str.replace(\"q\",\"\", regex=False)\nsub['ForecastId_Quantile']=sub['Id'].astype(str)+'_'+sub['variable']\nsub['TargetValue']=sub['value']\nsub=sub[['ForecastId_Quantile','TargetValue']]\nsub.reset_index(drop=True,inplace=True)\nsub.to_csv(\"submission.csv\",index=False)\nsub","0abef561":"This is a Regression Problem. \nReasons:\n1) We have more than one features (such as population, weight, date) as independent variable.Time series problem has only one independent variable ('Date' or 'Time') \n2) Also here data points are independent of each other","2863826a":"## **Model Building**","f55a7a4b":"**Feature Enginnering :**","d4234168":"**Exploratory Data Analysis : **"}}