{"cell_type":{"0755645f":"code","4b251b15":"code","978bf479":"code","61e8e69f":"code","67b06dbc":"code","aa0cf9e0":"code","7e6780ad":"code","0af3aca7":"code","a12ed853":"code","9a7a2876":"code","ae4d9416":"code","c5a259f2":"code","63499fbc":"code","7cfb6d48":"code","5b21c38c":"code","4438313a":"code","6eab6c1b":"code","9438970e":"code","e96c4939":"code","32b407ad":"code","acedf2ca":"code","13408809":"code","1a8a40db":"markdown","a314773a":"markdown","c1d74889":"markdown","f43ea690":"markdown","1bfe9a30":"markdown","8ee5b06e":"markdown","9047a570":"markdown","4abf4ec3":"markdown","101acf6b":"markdown","a333cc77":"markdown"},"source":{"0755645f":"import numpy as np\nimport pandas as pd\n\nimport os\nprint(os.listdir(\"..\/input\"))","4b251b15":"N_FEATURES = 22\n\n# taken from http:\/\/simaaron.github.io\/Estimating-rainfall-from-weather-radar-readings-using-recurrent-neural-networks\/\nTHRESHOLD = 73 ","978bf479":"train_df = pd.read_csv(\"..\/input\/train.csv\")","61e8e69f":"# to reduce memory consumption\ntrain_df[train_df.columns[1:]] = train_df[train_df.columns[1:]].astype(np.float32)","67b06dbc":"train_df.shape","aa0cf9e0":"good_ids = set(train_df.loc[train_df['Ref'].notna(), 'Id'])\ntrain_df = train_df[train_df['Id'].isin(good_ids)]\ntrain_df.shape","7e6780ad":"train_df.fillna(0.0, inplace=True)\ntrain_df.reset_index(drop=True, inplace=True)\ntrain_df.head()","0af3aca7":"train_df.shape","a12ed853":"train_df = train_df[train_df['Expected'] < THRESHOLD]","9a7a2876":"train_df.shape","ae4d9416":"train_groups = train_df.groupby(\"Id\")\ntrain_size = len(train_groups)","c5a259f2":"MAX_SEQ_LEN = train_groups.size().max()\nMAX_SEQ_LEN","63499fbc":"X_train = np.zeros((train_size, MAX_SEQ_LEN, N_FEATURES), dtype=np.float32)\ny_train = np.zeros(train_size, dtype=np.float32)\n\ni = 0\nfor _, group in train_groups:\n    X = group.values\n    seq_len = X.shape[0]\n    X_train[i,:seq_len,:] = X[:,1:23]\n    y_train[i] = X[0,23]\n    i += 1\n    del X\n    \ndel train_groups\nX_train.shape, y_train.shape","7cfb6d48":"test_df = pd.read_csv(\"..\/input\/test.csv\")\ntest_df[test_df.columns[1:]] = test_df[test_df.columns[1:]].astype(np.float32)\ntest_ids = test_df['Id'].unique()\n\n# Convert all NaNs to zero\ntest_df = test_df.fillna(0.0)\ntest_df = test_df.reset_index(drop=True)","5b21c38c":"test_groups = test_df.groupby(\"Id\")\ntest_size = len(test_groups)\n\nX_test = np.zeros((test_size, MAX_SEQ_LEN, N_FEATURES), dtype=np.float32)\n\ni = 0\nfor _, group in test_groups:\n    X = group.values\n    seq_len = X.shape[0]\n    X_test[i,:seq_len,:] = X[:,1:23]\n    i += 1\n    del X\n    \ndel test_groups\nX_test.shape","4438313a":"from keras.layers import (\n    Input,\n    Dense,\n    LSTM,\n    AveragePooling1D,\n    TimeDistributed,\n    Flatten,\n    Bidirectional,\n    Dropout\n)\nfrom keras.models import Model","6eab6c1b":"from keras.callbacks import EarlyStopping, ReduceLROnPlateau\nearly_stopping = EarlyStopping(monitor='val_loss', min_delta=0, patience=5)\nreduce_lr = ReduceLROnPlateau(monitor='val_loss', factor=0.1, patience=3, min_delta=0.01)","9438970e":"BATCH_SIZE = 1024\nN_EPOCHS = 30","e96c4939":"def get_model_deep(shape=(19, 22)):\n    inp = Input(shape)\n    x = Dense(16)(inp)\n    x = Bidirectional(LSTM(64, return_sequences=True))(x)\n    x = TimeDistributed(Dense(64))(x)\n    x = Bidirectional(LSTM(128, return_sequences=True))(x)\n    x = TimeDistributed(Dense(1))(x)\n    x = AveragePooling1D()(x)\n    x = Flatten()(x)\n    x = Dropout(0.5)(x)\n    x = Dense(1)(x)\n\n    model = Model(inp, x)\n    return model","32b407ad":"model = get_model_deep((19,22))\nmodel.compile(optimizer='adam', loss='mae',)\nmodel.summary()","acedf2ca":"model.fit(X_train, y_train, \n            batch_size=BATCH_SIZE, epochs=N_EPOCHS, \n            validation_split=0.2, callbacks=[early_stopping, reduce_lr])","13408809":"y_pred = model.predict(X_test, batch_size=BATCH_SIZE)\nsubmission = pd.DataFrame({'Id': test_ids, 'Expected': y_pred.reshape(-1)})\nsubmission.to_csv('submission.csv', index=False)","1a8a40db":"Define and exclude outliers from training set","a314773a":"## Training set","c1d74889":"## Test set","f43ea690":"### Grouping and padding into sequences","1bfe9a30":"# Data preprocessing","8ee5b06e":"# Models","9047a570":"Forked from https:\/\/www.kaggle.com\/ilya16\/lstm-models?scriptVersionId=10420679 with refactoring, simplification and some changes to the model\n\nData Preprocessing and Deep LSTM model are inspired by the top solution described here: \nhttp:\/\/simaaron.github.io\/Estimating-rainfall-from-weather-radar-readings-using-recurrent-neural-networks\/","4abf4ec3":"Remove ids with NaNs in `Ref` column for each observation (obeservations, where we have no data from radar)","101acf6b":"## Deep model\n\nDeep NN inspired by the top solution","a333cc77":"Replace NaN values with zeros"}}