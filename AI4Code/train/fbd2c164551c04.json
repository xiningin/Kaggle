{"cell_type":{"cc2a1fe8":"code","7c3c642a":"code","a030eb02":"code","ae26abbb":"code","27db80a9":"code","40d38607":"code","4065c83e":"code","594b1854":"code","c813664f":"code","3dc0569d":"code","950bd779":"code","d2bb8f70":"code","69d7fb57":"code","7cdbc647":"code","6e3f11f5":"code","e6a27699":"code","38a1272a":"code","988aac05":"code","1b86f9f0":"code","fbaf5648":"code","cac3e441":"code","f974ace4":"code","221811bb":"code","ae8dca10":"code","4e285ff2":"code","5e280517":"code","ddf349a1":"code","7670db15":"code","181e0058":"code","37752afe":"code","2ff49308":"code","b9ff8c82":"code","6c1cf97e":"code","e4247735":"code","45892b95":"markdown","33b9d7cb":"markdown","37187582":"markdown","7ac53319":"markdown","d2461f21":"markdown","cb5a46f6":"markdown","d8ff1d97":"markdown","f484c8e7":"markdown","cfe69b3f":"markdown","853ffd14":"markdown","625aa05b":"markdown","0a231741":"markdown","4967b5df":"markdown","3e149204":"markdown","81b153ad":"markdown","75b902e2":"markdown","1981016b":"markdown","37643068":"markdown","20dcf3ee":"markdown","575282ac":"markdown","636a5927":"markdown","7f3c5ecd":"markdown","ed235714":"markdown","7240a646":"markdown","8bf81031":"markdown","cd94c087":"markdown","736f26b2":"markdown","8495e2aa":"markdown","963a5b23":"markdown","beb40950":"markdown","bc76a064":"markdown","75348eff":"markdown"},"source":{"cc2a1fe8":"import numpy as np\nimport pandas as pd\nimport os\nimport datetime as dt\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport networkx as nx \nimport itertools\nfrom itertools import combinations\nimport random","7c3c642a":"df = pd.read_csv(\"..\/input\/netflix-shows\/netflix_titles.csv\")","a030eb02":"df.drop(columns = ['show_id'], inplace = True)\ndf = df[df['release_year'] > 1980]\ndf_TV = df[df['type'] == 'TV Show']\ndf_Movies = df[df['type'] == 'Movie']","ae26abbb":"def process_df(df, rep_pattern, variable):\n    new_df = df.copy()\n    new_df['duration'] = df['duration'].replace(rep_pattern, regex = True)\n    new_df['duration'] = new_df['duration'].astype('int64')\n    new_df['date_added'] = new_df['date_added'].astype('datetime64').dt.year\n    new_df['years_from_release_to_add'] = new_df['date_added'] - new_df['release_year']\n    new_df['years_from_release_to_add'].fillna(new_df['years_from_release_to_add'].mode()[0], inplace=True)\n    new_df['audience'] = df['rating'].replace(rating_to_audience_map)\n    new_df.fillna('Unknown', inplace = True)\n    new_df.drop(columns = ['date_added', 'type'], inplace = True)\n    new_df.rename(columns = {'duration':f'duration_{variable}'}, inplace = True)\n    new_df['number_of_countries'] = new_df.country.str.count(',') + 1\n    \n    return new_df\n\nrating_to_audience_map = {'G': 'Child','NC-17': 'Adult','NR': 'Unrated',\n                      'PG': 'Child','PG-13': 'Older Child','R': 'Adult',\n                      'TV-14': 'Older Child','TV-G': 'Child','TV-MA': 'Adult',\n                      'TV-PG': 'Child','TV-Y': 'Child','TV-Y7': 'Child',\n                      'TV-Y7-FV': 'Child','UR': 'Unrated'}\n\ndf_TV_new = process_df(df_TV, {' Season': '', 's': ''}, 'TV_seasons')\ndf_Movies_new = process_df(df_Movies, {' min': ''}, 'Movies_mins')","27db80a9":"df_TV_overall = df_TV_new.copy()\ndf_TV_overall['type'] = 'TV Show'\n\ndf_Movies_overall = df_Movies_new.copy()\ndf_Movies_overall['type'] = 'Movie'\n\ndf_Overall = pd.concat([df_TV_overall, df_Movies_overall])","40d38607":"g = sns.set_theme(style=\"darkgrid\")\ng = sns.countplot(x = 'type', data = df_Overall, palette = ['b', 'g'], alpha = 0.5)","4065c83e":"def histplots(x, i, j):\n    g = sns.histplot(x = x, data = df_Overall, hue = 'type', palette = ['b','g'], ax = ax[i,j], alpha=0.5)\n    \n    return g\n\ncols = ['audience', 'number_of_countries', 'release_year', 'years_from_release_to_add']\n\n_, ax = plt.subplots(2,2, figsize = (12,8))\n\nfor index, cols_ in enumerate(cols):\n    histplots(cols_, int(index\/2), 0) if index % 2 == 0 else histplots(cols_, int((index-1)\/2), 1)","594b1854":"def general_plot(plot_type, i):\n    x = 'number_of_countries' if i == 0 else 'audience'\n    if plot_type == 'violin':\n        g = sns.violinplot(y = cols[index], x = x, data = df, ax = ax[index, i], color = color[index])\n        for j, _ in enumerate(g.collections[::2]): g.collections[::2][j].set_alpha(0.6)\n    elif plot_type == 'bar':\n        g = sns.barplot(y = cols[index], x = x, data = df, color = color[index], ax = ax[index, i], alpha=0.5)\n    \n    ax[index, 1].set_ylabel('')\n    ax[index, 1].set(yticklabels=[])\n    ax[0, i].set_xlabel('')\n    \n    return g\n\ndf_list = [df_Movies_new, df_TV_new]\ncols = ['duration_Movies_mins','duration_TV_seasons']\ncolor = ['g', 'b']","c813664f":"fig, ax = plt.subplots(2,2, figsize = (10,8))\n\nfor index, df in enumerate(df_list):\n    for i in [0,1]: general_plot('bar', i)","3dc0569d":"fig, ax = plt.subplots(2, 2, figsize = (10,8))\n\nfor index, df in enumerate(df_list):\n    for i in [0,1]: general_plot('violin', i)","950bd779":"def frequency_plot(df, col, ax, color, ylabel):\n    general_list = list(df[col])\n    general_list = [element for item in general_list for element in item.split(', ')]\n    \n    general_df = pd.DataFrame(general_list, columns = [col]).value_counts().reset_index(drop = False).rename(columns = {0:ylabel})\n\n    general_df = general_df[general_df[col] != 'Unknown']\n\n    general_df_top = general_df.head(20)\n\n    g = sns.barplot(x = col, y = ylabel, data = general_df_top, ax = ax, color = color, alpha=0.5)\n    g = g.set_xticklabels(g.get_xticklabels(), rotation=90)\n    \n    return g, general_df","d2bb8f70":"fig, ax = plt.subplots(2, 2, figsize = (15,25))\n\nreturnplot = frequency_plot(df_TV_new, 'country', ax = ax[0,0], color = 'b', ylabel = 'Frequency (TV shows)')\nreturnplot, cast_TV_df = frequency_plot(df_TV_new, 'cast', ax = ax[0,1], color = 'b', ylabel = 'Frequency (TV shows)')\nreturnplot = frequency_plot(df_Movies_new, 'country', ax = ax[1,0], color = 'g', ylabel = 'Frequency (Movies)')\nreturnplot, cast_Movies_df = frequency_plot(df_Movies_new, 'cast', ax = ax[1,1], color = 'g', ylabel = 'Frequency (Movies)')\n    \n_ = ax[0, 0].set_xlabel('')\n_ = ax[0, 1].set_xlabel('')","69d7fb57":"def calc_degs(df):\n\n    combinations_list = []\n    for i in df['cast'].iteritems():\n        combinations_list.append(list(itertools.combinations(i[1].split(\", \"), 2)))\n\n    flat_list = [item for sublist in combinations_list for item in sublist]\n    \n    G=nx.Graph()\n    G.add_edges_from(flat_list)\n  \n    degrees = pd.DataFrame.from_dict(G.degree).rename(columns = {0:'cast', 1:'degree'})\n    \n    return G, degrees","7cdbc647":"df_list = [df_Movies_new, df_TV_new]\ncast_dfs = [cast_Movies_df, cast_TV_df]\ndf_results = []\ngraph = []\nfor index, df in enumerate(df_list):\n    G, degrees = calc_degs(df)\n    results_ = cast_dfs[index].merge(degrees, left_on = 'cast', right_on = 'cast')\n    results_ = results_.sort_values('degree', ascending = False).reset_index(drop = 'True')\n    \n    df_results.append(results_)\n    graph.append(G)","6e3f11f5":"def pair_plot(df, color):\n    g = sns.pairplot(df, kind='reg', diag_kind = 'kde', corner = 'True',\n                 diag_kws = {'color':color[0]},\n                 plot_kws={'line_kws':{'color':color},\n                           'scatter_kws': {'color':color,'alpha': 0.5}})\n    \n    return g","e6a27699":"_ = pair_plot(df_results[0], color[0])","38a1272a":"_ = pair_plot(df_results[1], color[1])","988aac05":"graph_vals = ['Movie','TV Show']\ncorr = []\nfor index, g in enumerate(graph):\n    r = nx.degree_pearson_correlation_coefficient(g)\n    corr.append(r)\n    \ncorr_df = pd.DataFrame({'Dataset':graph_vals, 'Pearson Correlation Coefficient':corr})\n\ng = sns.barplot(x = 'Dataset', y = 'Pearson Correlation Coefficient', data = corr_df, palette = color, alpha=0.5)","1b86f9f0":"def get_actor_tuple(df, particular_actor_index):\n    particular_actor = df.iloc[particular_actor_index]['cast']\n    actor_list = list(df[df.cast != particular_actor]['cast'])\n\n    tuple_list = []\n    for actor in actor_list:\n        tuple_list.append((particular_actor, actor))\n\n    paths = {}\n    for nodes in tuple_list:\n        try:\n            paths[nodes] = nx.shortest_path_length(graph[0], *nodes)\n        except:\n            pass\n        \n    return paths","fbaf5648":"def plot_graph_path(paths, path_type, color):\n    if path_type == 'min':\n        path = min(paths.items(), key=lambda x: x[1])[0]\n    else:\n        path = max(paths.items(), key=lambda x: x[1])[0]\n        \n    induced_path = nx.shortest_path(graph[0], *path)\n\n    sG = nx.subgraph(graph[0], induced_path)\n\n    pos = nx.spring_layout(sG, scale=20, k=3\/np.sqrt(graph[0].order()))\n    nx.draw(sG, pos, node_color=color, \n            with_labels=True, \n            node_size=1500,\n            arrowsize=20)","cac3e441":"paths_movie = get_actor_tuple(df_results[0], 0)\nplot_graph_path(paths_movie, 'min', 'lightgreen')","f974ace4":"plot_graph_path(paths_movie, 'max', 'lightgreen')","221811bb":"paths_tv = get_actor_tuple(df_results[1], 0)\nplot_graph_path(paths_tv, 'min', 'lightblue')","ae8dca10":"plot_graph_path(paths_tv, 'max', 'lightblue')","4e285ff2":"def plot_subgraph(graph, graph_index, color, dorandom):\n    subgraphs = [graph.subgraph(c) for c in nx.connected_components(graph)]\n\n    subgraphslist = []\n    for subgraph in subgraphs:\n        if subgraph.number_of_nodes() > 10 and subgraph.number_of_nodes() <= 50:\n            subgraphslist.append(subgraph)\n    \n    if dorandom: graph_index = random.sample(range(len(subgraphslist)),1)[0]\n    \n    nx.draw(subgraphslist[graph_index], node_color=color, \n            with_labels=True, \n            node_size=1500,\n            arrowsize=20)","5e280517":"plot_subgraph(graph[0],_,'lightgreen',True)","ddf349a1":"plot_subgraph(graph[0],3,'lightgreen', False)","7670db15":"plot_subgraph(graph[1],_,'lightblue',True)","181e0058":"plot_subgraph(graph[1],23,'lightblue',False)","37752afe":"def plot_egograph(type_, graph_index):\n    if type_ == 'Movies':\n        actor = df_results[0].iloc[graph_index]['cast']\n        egograph = nx.ego_graph(graph[0], n = actor)\n        color = 'lightgreen'\n    else:\n        actor = df_results[1].iloc[graph_index]['cast']\n        egograph = nx.ego_graph(graph[1], n = actor)\n        color = 'lightblue'        \n    \n    r = nx.degree_pearson_correlation_coefficient(egograph)\n\n    graph_ = nx.draw(egograph, node_color=color, \n                with_labels=True, \n                node_size=1500,\n                arrowsize=20)\n    \n    return graph_, r, actor","2ff49308":"egograph, r, actor = plot_egograph('Movies', 5000)\n\nprint(r)\nprint(actor)","b9ff8c82":"index = int(np.round(df_results[1].shape[0]\/2,2))\n\negograph, r, actor = plot_egograph('Movies', index)\n\nprint(r)\nprint(actor)","6c1cf97e":"egograph, r, actor = plot_egograph('TV Show', 2000)\n\nprint(r)\nprint(actor)","e4247735":"index = int(np.round(df_results[1].shape[0]\/2,2))\n\negograph, r, actor = plot_egograph('TV Show', index)\n\nprint(r)\nprint(actor)","45892b95":"<a id=\"B8\"><\/a>\n# B.8 Longest path for TV Shows\nThe longest path is again much longer between the same actors!","33b9d7cb":"# Importing required packages","37187582":"<a id=\"B4\"><\/a>\n# B.4 Correlation within graph\nThis correlation measures the similarity of connections within graphs relative to the node degree.\n\nThis shows that for TV shows, similarity in connectivity is more related to the degree for an actor than for Movies. A strange but interesting difference in behaviour between the two modes of content.","7ac53319":"# Basic cleansing\nThe show ID is not required here, and I only consider TV shows and movies released after 1980 (which is the majority). I then split the dataset up into Movies and TV shows separately for processing.","d2461f21":"# Table of Contents\n* [Getting ready](#Getting-ready)\n* [A. Start of analysis](#A)\n    - [A.1 High level view of TV and Movies data](#A1)\n    - [A.2 Breakdown comparison of TV Shows and Movies](#A2)\n    - [A.3 Breakdown of durations for TV Shows and Movies](#A3)\n    - [A.4 View as Violin plots](#A4)\n    - [A.5 Breakdown of contents and Actors](#A5)\n* [B. Graph Network analysis](#B)\n    - [B.1 Generating graphs and calculating Degrees](#B1)\n    - [B.2 Viewing connection between number of Movies and degree of nodes](#B2)\n    - [B.3 Viewing the connection between number of TV Shows and degree of nodes](#B3)\n    - [B.4 Correlation within graph](#B4)\n    - [B.5 Shortest path between actors](#B5)\n    - [B.6 Longest path](#B6)\n    - [B.7 Shortest path for TV Shows](#B7)\n    - [B.8 Longest path for TV Shows](#B8)\n    - [B.9 Viewing subgraphs for Movies](#B9)\n    - [B.10 Example of interesting subgraph](#B10)\n    - [B.11 Viewing subgraphs for TV Shows](#B11)\n    - [B.12 Viewing an interesting subgraph](#B12)\n    - [B.13 Egographs for Movies](#B13)\n    - [B.14 Viewing egograph for midway actor in Movies](#B14)\n    - [B.15 Egograph for TV Shows](#B15)\n    - [B.16 Viewing egograph for midway actor in TV shows](#B16)","cb5a46f6":"<a id=\"Getting-ready\"><\/a>\n# Getting ready...","d8ff1d97":"<a id=\"B13\"><\/a>\n# B.13 Egographs for Movies\nThe egograph looks at the subgraph centred on an actor within a particular radius. I use the default of radius = 1.\n\nThis is for actor Sameer Dharkmadhikari. There is low similarity in connectivity here.","f484c8e7":"<a id=\"B3\"><\/a>\n# B.3 Viewing the connection between number of TV Shows and degree of nodes\nOnce again, the same correlation exists here as with Movies.\n\nThis also shows that you can end up getting more contracts for acting if you forge relationships between actors. So the more actors in a movie\/TV show, the better for individual actors.","cfe69b3f":"<a id=\"A1\"><\/a>\n# A.1 TV Shows vs Movies\nThere are significantly more Movies on Netflix than TV shows for all time.","853ffd14":"<a id=\"A\"><\/a>\n# A. Start of Analysis!","625aa05b":"<a id=\"B6\"><\/a>\n# B.6 Longest path\nThe longest path between Anupam Kher and Shah Rukh Khan is much longer!","0a231741":"<a id=\"B\"><\/a>\n# B. Starting Graph Network analysis","4967b5df":"<a id=\"B9\"><\/a>\n# B.9 Viewing subgraphs for Movies\nI break down the graph into subgraphs, and choose only those with more than 10 nodes and less than or equal to 50 nodes.\n\nThis is a randomised viewer of the subgraphs.","3e149204":"# Exploring Actor Graph + EDA\nHere I explore the Netflix dataset, followed by exploring a graph for actors in both TV Shows and Movies.","81b153ad":"![Graph image](https:\/\/sailab.diism.unisi.it\/gnn\/_images\/intro.gif)","75b902e2":"<a id=\"B11\"><\/a>\n# B.11 Viewing subgraphs for TV Shows\nThis is again a randomised viewer of the subgraphs for TV shows.","1981016b":"<a id=\"B12\"><\/a>\n# B.12 Viewing an interesting subgraph\nI chose this subgraph as an interesting example of a more dense subgraph.","37643068":"<a id=\"B14\"><\/a>\n# B.14 Viewing egograph for midway actor in Movies\nThe subgraph is as below for the actor middling in the list of all actors (ordered by degree of nodes).","20dcf3ee":"<a id=\"B16\"><\/a>\n# B.16 Viewing egograph for midway actor in TV shows\nThe subgraph is as below for the actor middling in the list of all actors (ordered by degree of nodes).","575282ac":"<a id=\"B15\"><\/a>\n# B.15 Egograph for TV Shows\nI choose an interesting egograph, in this case it is Cedric the Entertainer (what a name!).","636a5927":"<a id=\"B1\"><\/a>\n# B.1 Generating graphs and calculated Degrees\nHere I generate the graphs for the movies and TV shows.\n\nThe graphs are undirected since it is looking at actors who directly worked in the same movies\/TV shows. The information encapsulated in the graphs is related to who has worked with who in the shows\/movies.\n\nI also calculate the degree of nodes\/vertices (in the context of an undirected graph). The degree is the number of edges connected to a single node.","7f3c5ecd":"<a id=\"A4\"><\/a>\n# A.4 Representing as Violin plots\nThis reinforces the above message, i.e. most movies are roughly 100 minutes in duration, with varying ranges.","ed235714":"<a id=\"A5\"><\/a>\n# A.5 Breaking down content and Actors data\nHere are few findings:\n* For both movies and TV shows, the US is significantly higher in content.\n* Second is India for Movies, whilst UK is second for TV Shows.\n* Takahiro Sakurai has the most TV shows.\n* Anupam Kher has the most movies.","7240a646":"# Rejoining datasets for overall view\nOnce cleansed and processed, I join the two datasets again for some graphs later.","8bf81031":"<a id=\"B7\"><\/a>\n# B.7 Shortest path for TV Shows\nAgain I choose the top actor and compare the graph for all other actors.\n\nThe closest connection is Yuchi Nakamura.","cd94c087":"# Processing\nThis function cleanses both the Movies and TV datasets concurrently. I find the time since a Movie\/TV show was released relative to the dates they were added on Netflix. I do the map mentioned above, and I also calculate the number of countries a movie was showed in. These may all be useful fields.\n\nRather than considering individual ratings, I map them to audience types - there is overlap between certain ratings.","736f26b2":"<a id=\"B10\"><\/a>\n# B.10 Example of interesting subgraph\nThis is a densely connected subgraph - there are others and functions can be used to find these.","8495e2aa":"<a id=\"A3\"><\/a>\n# A.3 Breakdown of durations\nThere are a few findings:\n* The duration of movies is independent of the number of countries it is released in.\n* Interestingly, TV shows tend to have longer seasons on average if released in 4 countries, but tail off later. However there is great variability in 4 countries also.\n* Movies tend to be longest for Older children.\n* Unrated seasons are longest on average, albeit with huge variations. There are also very few of these as seen above, so not very representative.","963a5b23":"<a id=\"A2\"><\/a>\n# A.2 TV Shows and Movies broken down\nThere are a few findings here:\n* Of the movies released, most are aimed at Adults. Although, the total of Older Children (Pre-teens + Teens) and Children are higher than adults.\n* Most Movies and TV Shows are released in one single country.\n* There has been an exponential increase in the number of TV Shows and Movies released in the past 40 years.\n* There seems to be a slowing of Movies released, whilst TV shows continue to excel.\n* Many shows are released directly into Netflix, or within the first year of production.","beb40950":"<a id=\"B2\"><\/a>\n# B.2 Viewing connection between number of Movies and degree of nodes\nThere is a clear correlation between the number of movies and the degree for an actor. \n\nIn real terms, this means that the more movies an actor is present in, the more connections they form.","bc76a064":"<a id=\"B5\"><\/a>\n# B.5 Shortest path between actors\nHere I look at the \"top\" actor, which is Anupam Kher. Changing the last index would get the connection for a different actor.\n\nThe shortest path for the set of all actors with Anupam Kher is Shah Rukh Khan.","75348eff":"# Load Dataset"}}