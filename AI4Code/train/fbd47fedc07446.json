{"cell_type":{"653c688c":"code","6e191415":"code","8708b306":"code","809e507c":"code","d69bb325":"code","e76de271":"code","72d9f2d4":"code","255d4897":"code","f82da0ef":"code","dbf16926":"code","52b96c83":"code","57032487":"code","4b2da8e1":"code","b4de42fd":"code","4f5d37ca":"code","63779c89":"code","b90a968a":"code","b9539a0b":"code","03e59e7b":"code","f950aa06":"code","fbbc0d46":"code","e02700fc":"code","3714c452":"code","a03c969f":"code","b3c15cfb":"code","97496758":"code","8fa2c47e":"code","0000e39d":"code","fccbd6aa":"code","09c8f7a4":"code","fec40568":"code","8565683c":"code","cbb6dead":"code","d5f93648":"code","149b1052":"markdown","40580acf":"markdown","4e762faf":"markdown","4c3569da":"markdown","7b97be8b":"markdown","91de7116":"markdown","9423dff7":"markdown","27e9b86f":"markdown","0c2650bc":"markdown","7412816e":"markdown","f9c6f03f":"markdown","3bc3fdbc":"markdown","bb7ab646":"markdown","a5abaf3c":"markdown","df8c7f6f":"markdown","06c93088":"markdown","fa1f3f2e":"markdown","0a5ba658":"markdown","35273138":"markdown","8284a7d6":"markdown","baee2224":"markdown","ba6ee21b":"markdown","6a358eb9":"markdown","f05ce6fd":"markdown","dd14ccc3":"markdown","a32dc548":"markdown","76986d8e":"markdown","ce3cb34b":"markdown","79e6dca4":"markdown","9a3a4e2f":"markdown"},"source":{"653c688c":"!pip install plotly","6e191415":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np \nimport pandas as pd\nimport seaborn as sns\nfrom scipy import stats\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nfrom datetime import datetime\n%matplotlib inline\n\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import GridSearchCV, KFold\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8708b306":"train = pd.read_csv('..\/input\/covid19-global-forecasting-week-5\/train.csv')\ntest = pd.read_csv('..\/input\/covid19-global-forecasting-week-5\/test.csv')\nsubmission = pd.read_csv('..\/input\/covid19-global-forecasting-week-5\/submission.csv')","809e507c":"train.columns","d69bb325":"train.isnull().sum()","e76de271":"test.isnull().sum()","72d9f2d4":"submission","255d4897":"submission.shape","f82da0ef":"submission['TargetValue'].sum()","dbf16926":"# 'TargetValue'\uc5d0 \ub530\ub77c \uc624\ub984\ucc28\uc21c\uc73c\ub85c \uc815\ub82c\ntrain.sort_values(by=['TargetValue'])","52b96c83":"fig = px.pie(train, values = 'TargetValue', names='Target')\nfig.update_traces(textposition = 'inside')\nfig.update_layout(uniformtext_minsize=12, uniformtext_mode='hide')\nfig.show()","57032487":"fig = px.pie(train, values='TargetValue', names='Country_Region')\nfig.update_traces(textposition='inside')\nfig.update_layout(uniformtext_minsize=12, uniformtext_mode='hide')\nfig.show()","4b2da8e1":"getToplist = 15\ngrouped_multiple = train.groupby(['Country_Region'], as_index=False)['TargetValue'].sum()\ncountryTop = grouped_multiple.nlargest(getToplist, 'TargetValue')['Country_Region']\nnewlist = train[train['Country_Region'].isin(countryTop.values)]\nline = newlist.groupby(['Date', 'Country_Region'], as_index=False)['TargetValue'].sum()\nline = line[line['TargetValue'] >= 0]","b4de42fd":"line.pivot(index='Date', columns='Country_Region', values='TargetValue').plot(figsize=(10,5))\nplt.grid(zorder=0)\nplt.title('Top' + str(getToplist) + 'ConfirmedCases & Fatalities', fontsize=18, pad=10)\nplt.ylabel('People')\nplt.xlabel('Date')\nplt.legend(loc='center left', bbox_to_anchor=(1.0, 0.5))\nplt.show()","4f5d37ca":"train = train.drop(['County', 'Province_State','Country_Region','Target'], axis=1)\ntest = test.drop(['County', 'Province_State','Country_Region','Target'], axis=1)\n\ntrain.head()","63779c89":"from sklearn.preprocessing import OrdinalEncoder\n\ndef create_feature(df):\n    df['day'] = df['Date'].dt.day\n    df['month'] = df['Date'].dt.month\n    df['dayofweek'] = df['Date'].dt.dayofweek\n    df['dayofyear'] = df['Date'].dt.dayofyear\n    df['quarter'] = df['Date'].dt.quarter\n    df['weekofyear'] = df['Date'].dt.weekofyear\n    return df\n\n# Date \ubcc0\uc218 \ubd84\ub9ac","b90a968a":"def train_dev_split(df, days):\n    date = df['Date'].max() - dt.timedelta(days=days)\n    return df[df['Date'] <= date], df[df['Date'] > date]","b9539a0b":"test_date_min = test['Date'].min()\ntest_date_max = test['Date'].max()","03e59e7b":"def avoid_date_leakage(df, date=test_date_min):\n    return df[df['Date'] < date]","f950aa06":"def to_integer(dt_time):\n    return 10000*dt_time.year + 100*dt_time.month + dt_time.day","fbbc0d46":"train['Date'] = pd.to_datetime(train['Date'])\ntest['Date'] = pd.to_datetime(test['Date'])","e02700fc":"train['Date'] = train['Date'].dt.strftime('%Y%m%d')\ntest['Date'] = test['Date'].dt.strftime('%Y%m%d')","3714c452":"train.head()","a03c969f":"from sklearn.model_selection import train_test_split\n\npredictors = train.drop(['TargetValue', 'Id'], axis=1)\ntarget = train['TargetValue']\nX_train, X_test, y_train, y_test = train_test_split(predictors, target, test_size=0.22, random_state=0)","b3c15cfb":"model = RandomForestRegressor(n_jobs=-1)\nestimators=100\nscores=[]\nmodel.set_params(n_estimators=estimators)\nmodel.fit(X_train, y_train)\nscores.append(model.score(X_test, y_test))","97496758":"X_test","8fa2c47e":"test.drop(['ForecastId'], axis=1, inplace=True)\ntest.index.name = 'Id'\ntest","0000e39d":"y_pred2 = model.predict(X_test)\ny_pred2","fccbd6aa":"predictions = model.predict(test)\n\npred_list = [int(x) for x in predictions]\n\noutput = pd.DataFrame({'Id': test.index, 'TargetValue': pred_list})\nprint(output)","09c8f7a4":"output","fec40568":"a = output.groupby(['Id'])['TargetValue'].quantile(q=0.05).reset_index() # 5% \uc9c0\uc810\nb = output.groupby(['Id'])['TargetValue'].quantile(q=0.5).reset_index() # \uc808\ubc18 \uc9c0\uc810\nc = output.groupby(['Id'])['TargetValue'].quantile(q=0.05).reset_index() # 95% \uc9c0\uc810","8565683c":"a.columns = ['Id', 'q0.05']\nb.columns = ['Id', 'q0.5']\nc.columns = ['Id', 'q0.95']\n\na = pd.concat([a,b['q0.5'],c['q0.95']], 1)\n\na['q0.05'] = a['q0.05'].clip(0, 10000)\na['q0.5'] = a['q0.5'].clip(0, 10000)\na['q0.95'] = a['q0.95'].clip(0, 10000)\n\na","cbb6dead":"a['Id'] = a['Id'] + 1\na","d5f93648":"sub = pd.melt(a, id_vars=['Id'], value_vars = ['q0.05', 'q0.5', 'q0.95'])\nsub['variable'] = sub['variable'].str.replace('q', '', regex=False)\nsub['ForecastId_Quantile'] = sub['Id'].astype(str)+'-'+sub['variable']\nsub['TargetValue'] = sub['value']\nsub = sub[['ForecastId_Quantile', 'TargetValue']]\nsub.reset_index(drop=True, inplace=True)\nsub.to_csv('submission.csv', index=False)\nsub.head()","149b1052":"### Data Check","40580acf":"'2020-05-07' \ud615\uc2dd\uc5d0\uc11c '20200507' \ud615\uc2dd\uc73c\ub85c \ubcc0\uacbd\ub428.","4e762faf":"### ConfirmedCases & Fatalities \ubc1c\ubcd1\uc778\uc6d0\uacfc \uc0ac\ub9dd\uc778\uc6d0","4c3569da":"## Using Regressor to find Target values","7b97be8b":"## Data Visualization","91de7116":"RandomForest Regressor\ub97c \uc774\uc6a9\ud558\uc5ec Target Value output \ub3c4\ucd9c","9423dff7":"---","27e9b86f":"## Submission","0c2650bc":"---","7412816e":"- Id : \ud658\uc790 \uc21c\ubc88\n\n- County : \uce74\uc6b4\ud2f0(\uad70)\n\n- Province_State : \uc2dc\ub3c4 \ud639\uc740 \uc8fc\n\n- Country_Region : \uad6d\uac00\uba85\n\n- Population : \ud574\ub2f9 \uad6d\uac00 \uc778\uad6c \uc218 \n\n- Weight (\ub2e8\uc704 \ud574\uc11d\uc774 \uc5b4\ub824\uc6c0 \/ \uae30\uc900 \ub2e8\uc704 \ud655\uc778 \ud544\uc694)\n\n- Date : \ud655\uc9c4 \uc77c\uc790 \n\n- Target : ConfirmedCases \ud655\uc9c4 \/ Fatalities \uc0ac\ub9dd\uc73c\ub85c \uc774\uc9c4 \ubd84\ub958\n\n- TargetValue : y\uac12. \uc608\uce21\ubcc0\uc218","f9c6f03f":"## Intro","3bc3fdbc":"## Data Preprocessing","bb7ab646":"`County`, `Province_State`, `Country_Region` = \uc9c0\uc5ed \uad00\ub828 \ubcc0\uc218 & `Target`\n\n\uba85\ubaa9\ud615 \ubcc0\uc218\uc774\uae30 \ub54c\ubb38\uc5d0 \uc218\uce58\ud615\uc73c\ub85c \ubcc0\ud658\ud558\uc9c0 \uc54a\uc73c\uba74 \ubaa8\ub378 \uc801\uc6a9 \ubd88\uac00","a5abaf3c":"### Checking Missing Values \uacb0\uce21\uce58 \ud655\uc778\ud558\uae30","df8c7f6f":"## Finding Quanlite values from the output","06c93088":"![covid-19](https:\/\/www.topevents.co.za\/wp-content\/uploads\/2020\/04\/covid-19-1024x431.jpg)","fa1f3f2e":"`County`\uc640 `Province_State` \ubcc0\uc218\uc5d0 \uacb0\uce21\uce58\uac00 \ub9ce\uc774 \ub098\ud0c0\ub0a8\n\n> \uacb0\uce21\uce58 \ucc98\ub9ac \ud544\uc694\ud568","0a5ba658":"## EDA","35273138":"*\uc774 notebook\uc740 \ud544\uc0ac \ub178\ud2b8\ubd81\uc785\ub2c8\ub2e4. \ud574\ub2f9 \ucee4\ub110\uc744 \ucc38\uace0\ud558\uc600\uc2b5\ub2c8\ub2e4!*\n\n\n- [Nischay Dhankhar's kernel](https:\/\/www.kaggle.com\/nischaydnk\/covid19-week5-visuals-randomforestregressor)\n\n- [Sarut Yentakham's kernel](https:\/\/www.kaggle.com\/benzintel01\/randomforestregressor-covid-19)","8284a7d6":"## [\ubb34\uc791\uc815 Kaggle \ub530\ub77c\ud558\uae30] COVID-19 RandomForest Regressor","baee2224":"\uacb0\uce21\uce58\uac00 \ub9ce\uace0 \uc911\uc694\ub3c4\uac00 \ub0ae\uc740 \uba87\uba87 \ubcc0\uc218\ub97c \uc81c\uac70\ud558\ub294 \uc791\uc5c5\uc744 \uc9c4\ud589\ud568","ba6ee21b":"\ucd5c\uadfc \ub370\uc774\ud130 (2020-04-27 ~ 2020-05-11)\uc744 \uc774\uc6a9\ud558\uc5ec \uc77c\uc77c COVID-19 \ubc1c\ubcd1 \ud69f\uc218\uc640 \uc0ac\ub9dd \ud69f\uc218\ub97c \uc608\uce21\ud558\ub294 Competition.\n\n\ud574\ub2f9 notebook\uc5d0\uc11c\ub294 RandomForest Regression\uc744 \uc774\uc6a9\ud558\uc5ec \ubc1c\ubcd1\uacfc \uc0ac\ub9dd\ud69f\uc218\ub97c \uc608\uce21\ud55c\ub2e4.\n\nRandomForest\uc758 \ub0b4\uc6a9\uc774 \uad81\uae08\ud558\uc2e0 \ubd84\uc740 [\ud574\ub2f9 \uce7c\ub7fc](https:\/\/towardsdatascience.com\/understanding-random-forest-58381e0602d2)\uc744 \ud655\uc778\ud574\uc8fc\uc138\uc694!","6a358eb9":"## Read Data","f05ce6fd":"\ubd84\uc704\uc218 \uac12\uc73c\ub85c output \ucc3e\uc544 \ubd84\ub958\ud558\uae30","dd14ccc3":"### Current share of Worldwide COVID-19 Confirmed Cases","a32dc548":"> \ubbf8\uad6d\uc774 3\uc6d4 \uc911\uc21c\uc744 \uae30\uc810\uc73c\ub85c \uc0c1\ud669\uc774 \uae09\uaca9\ud788 \uc545\ud654\ub41c \uac83\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc74c. <br>\n[\ud574\ub2f9 \uae30\uc0ac \ucc38\uc870 \/ Trump declares national emergency -- and denies responsibility for coronavirus testing failures](https:\/\/edition.cnn.com\/2020\/03\/13\/politics\/donald-trump-emergency\/index.html)","76986d8e":"## Setting","ce3cb34b":"---","79e6dca4":"---","9a3a4e2f":"### Top 15 Countries"}}