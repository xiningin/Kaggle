{"cell_type":{"2daddf72":"code","f35db225":"code","d40833ea":"code","408d4522":"code","6c0d8e96":"code","463d3747":"code","486c301b":"code","e7f4f942":"code","7af10dd7":"code","ad663ffc":"code","ddaec2a3":"code","09eb970b":"code","dfc9adc5":"code","46c108d7":"code","fc1505a7":"code","c2164b08":"markdown","b3d06f34":"markdown","15543a17":"markdown","cc09a2eb":"markdown","5228f5cb":"markdown","aa99950a":"markdown"},"source":{"2daddf72":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f35db225":"data_path = '..\/input\/cricket-world-cup-2019-players-data\/Batsman_Data.csv'\nbd = pd.read_csv(data_path)\nbd.head()","d40833ea":"#Seeing the initial data types of all columns\nbd.dtypes","408d4522":"#Dropping all the values with 'Did not Bat (DNB)'\nbd.drop(bd[bd.Bat1 == 'DNB'].index, inplace=True)\nbd.head()","6c0d8e96":"#To Convert required columns into float we have to replace and remove some string elements\nbd['Bat1'] = bd['Bat1'].str.replace('*', '.')\nbd['SR'] = bd['SR'].str.replace('-', '0')\nbd['Runs'] = bd['Runs'].str.replace('-', '0')\nbd['4s'] = bd['4s'].str.replace('-', '0')\nbd['6s'] = bd['6s'].str.replace('-', '0')\nbd.head()","463d3747":"#Converting all required columns into float\nbd['SR']=bd['SR'].astype(float)\nbd['Runs']=bd['Runs'].astype(float)\nbd['4s']=bd['4s'].astype(float)\nbd['6s']=bd['6s'].astype(float)","486c301b":"#Checking the datatype\nbd.dtypes","e7f4f942":"#Top 100 batsmen with highest macthes\/data\nnew = bd['Batsman'].value_counts()[:100]\nnew","7af10dd7":"#Gathering Data of reqd Batsman induvidually\nbd_induvidual = bd.query('Batsman ==\"Shimron Hetmyer\"')\nbd_induvidual","ad663ffc":"#Gathering some important data from the required Batsman\nprint(\"The highest number of score for this batsman is: \")\nprint(bd_induvidual['Runs'].max())\nprint(\"The highest Strike Rate for this batsman is: \")\nprint(bd_induvidual['SR'].max())\nprint(\"The most number of 4s for this batsman is: \")\nprint(bd_induvidual['4s'].max())\nprint(\"The most number of 6s score for this batsman is: \")\nprint(bd_induvidual['6s'].max())","ddaec2a3":"#Getting the data of a particular batsman against a particular Team\nagainstindia = bd_induvidual.query('Opposition == \"v India\"')\nagainstindia","09eb970b":"plt.figure(figsize=(15,7))\nx = againstindia['Ground']\ny = againstindia['Runs']\nplt.xlabel('Ground Location', labelpad=25)\nplt.ylabel('Runs Scored', labelpad=25)\nplt.title('Runs vs The Ground', fontweight='bold', pad=30, fontsize=20)\nplt.bar(x, y)","dfc9adc5":"#strike rate vs the score of player in each match\nplt.figure(figsize=(15,7))\nx = bd_induvidual['SR']\ny = bd_induvidual['Runs']\nplt.xlabel('Strike Rate', labelpad=30)\nplt.ylabel('Runs', labelpad=30)\nplt.title('Runs vs Strike Rate', fontweight='bold', pad=20, fontsize=20)\nplt.scatter(x, y, color='red', s=300, edgecolor='black')","46c108d7":"bd_opposition = bd.query('Opposition ==\"v England\"')\nbd_opposition","fc1505a7":"#Gathering some important data from the required Batsman\nprint(\"The highest number of score against this team is: \")\nprint(bd_opposition['Runs'].max())\nprint(\"The highest Strike Rate against this team is: \")\nprint(bd_opposition['SR'].max())\nprint(\"The most number of 4s against this team is: \")\nprint(bd_opposition['4s'].max())\nprint(\"The most number of 6s against this team is: \")\nprint(bd_opposition['6s'].max())","c2164b08":"Things that we can do with the Data:\n1. Eliminate rows with DNB (Did not bat)\n2. Highest score from a batsman\n3. Hoghest strik rate \n4. Most number of 4s and 6s (boundaries\n5. Grouping matches by the teams against they have played\n6. Strike rate vs The Score data of Each player\n\nImportant columns: Bat1, Runs, SR, 4s, 6s, Opp, Ground, Batsman, PlayerID","b3d06f34":"# 6. Strike Rate vs Runs of Batsman","15543a17":"# 5. Grouping matches against a particular batsman for a particular team","cc09a2eb":"# 1. Cleaning the data","5228f5cb":"# Grouping Matches by the opposition on whole","aa99950a":"# Answering questions from 2-4"}}