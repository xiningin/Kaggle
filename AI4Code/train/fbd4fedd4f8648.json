{"cell_type":{"db8aac7f":"code","c2ac62ab":"code","bf73291f":"code","47a660fb":"code","6154810a":"code","b80172e5":"code","c921c788":"code","05a58a24":"code","e8bcac86":"markdown","3f039d22":"markdown","a239a89a":"markdown","9b32801c":"markdown","5b87a5f7":"markdown","7dffe7ef":"markdown","fcea8e3d":"markdown","a9f753af":"markdown"},"source":{"db8aac7f":"import pandas as pd\nimport numpy as np\n\nfrom sklearn.model_selection import KFold, StratifiedKFold\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import Pipeline\n\nimport lightgbm as lgb\nimport catboost as cat\nimport xgboost as xgb\n\nfrom warnings import filterwarnings\nfilterwarnings('ignore')\n\nprint('done!')","c2ac62ab":"path = \"..\/input\/tabular-playground-series-oct-2021\/\"\n\ndata = {\n    \"train\" : path + \"train.csv\",\n    \"test\"  : path + \"test.csv\",\n    \"sample\": path + \"sample_submission.csv\"\n}\n\ntrain = pd.read_csv(data[\"train\"])\ntest  = pd.read_csv(data[\"test\"])\nsample= pd.read_csv(data[\"sample\"])\n","bf73291f":"# this function will help to reduce momory \n# data will be samller with the same value\n\ndef reduce_mem_usage(df):\n    \"\"\" iterate through all the columns of a dataframe and modify the data type\n        to reduce memory usage.        \n    \"\"\"\n    start_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage of dataframe is {:.2f} MB'.format(start_mem))\n    \n    for col in df.columns:\n        col_type = df[col].dtype\n        \n        if col_type != object:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n        else:\n            df[col] = df[col].astype('category')\n\n    end_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage after optimization is: {:.2f} MB'.format(end_mem))\n    print('Decreased by {:.1f}%'.format(100 * (start_mem - end_mem) \/ start_mem))\n    \n    return df","47a660fb":"train = reduce_mem_usage(train)\ntest  = reduce_mem_usage(test)","6154810a":"features = [col for col in train.columns if col not in ('id', 'target')]\n\ntrain['min'] = train[features].min(axis=1)\ntrain['max'] = train[features].max(axis=1)\ntrain['std'] = train[features].std(axis=1)\ntrain['men'] = train[features].mean(axis=1)\n\ntest['min'] = test[features].min(axis=1)\ntest['max'] = test[features].max(axis=1)\ntest['std'] = test[features].std(axis=1)\ntest['men'] = test[features].mean(axis=1)\n\nTARGET = 'target'\ntarget = train[TARGET]\n\nfeatures += ['std']\n","b80172e5":"%%time\n\nparams = {\n    'n_estimators' : 10000,\n    'learning_rate': 0.0472,\n    \n    'tree_method': 'gpu_hist',\n    'gpu_id': 0,\n    'predictor': 'gpu_predictor'    \n}\n\ntrain['kfold'] = -1\n\nkf = KFold(n_splits=5, shuffle=True, random_state=1)\n\nfor fold, (trn_idx, val_idx) in enumerate(kf.split(X = train, y = target)):\n    train.loc[val_idx, \"kfold\"] = fold\n\nxtrain = train[train.kfold != 0].reset_index(drop=True)\nxvalid = train[train.kfold == 0].reset_index(drop=True)\n\nytrain = xtrain[TARGET]\nyvalid = xvalid[TARGET]\n\nxtrain = xtrain[features]\nxvalid = xvalid[features]\n\nmodel = xgb.XGBClassifier(**params)\n\nmodel.fit(xtrain, ytrain,\n#          eval_set=[(xvalid, yvalid)],\n#          early_stopping_rounds=200\n    )\n\nprint('')","c921c788":"pred = model.predict_proba(xvalid)[:, -1]\nauc = roc_auc_score(yvalid, pred)\nprint('auc: ', auc)\n\ntest_pred = model.predict_proba(test[features])[:, -1]","05a58a24":"output = sample.copy()\noutput.target = test_pred\n\noutput.to_csv('submission.csv', index=False)","e8bcac86":"# Feature","3f039d22":"# Fit","a239a89a":"# Data","9b32801c":"# Create submission file","5b87a5f7":"# Memory reduce","7dffe7ef":"<div style=\"font-size:35px;\n            stylr:bold;\n            text-align:center\">\n    <a href=\"https:\/\/www.kaggle.com\/c\/tabular-playground-series-oct-2021\/\">Tabular Playground Series - Oct 2021<\/a>\n<\/div>\n","fcea8e3d":"\n\n<div style=\"font-size:35px;\n            stylr:bold;\n            text-align:center\">The End\n<\/div>\n\n![Upvote!](https:\/\/img.shields.io\/badge\/Upvote-If%20you%20like%20my%20work-07b3c8?style=for-the-badge&logo=kaggle)","a9f753af":"# import libraries"}}