{"cell_type":{"37b4b213":"code","6ee35daa":"code","0da6af8d":"code","1e118d73":"code","fd4fcf82":"code","8294e2fb":"code","0aa6b3f1":"code","81eef63c":"code","455ece54":"code","ca5a53d1":"code","1bd162cb":"code","d672b21c":"code","da3907e9":"code","ac36e812":"code","c16d5de6":"code","cfefb919":"code","9440bc23":"code","a74f223d":"code","80e79aeb":"code","7083fdf8":"code","8fe261d6":"code","916bd008":"code","ccd52d89":"code","852ef738":"code","4f09ef4b":"code","acaf59ef":"code","47f6f0a4":"code","d93cee66":"code","39845b2a":"code","d13c51d8":"code","2590477a":"code","a56161a1":"markdown","ae65accb":"markdown","9842d94c":"markdown","f7cdaff4":"markdown","17313b18":"markdown","0b718541":"markdown","651b6ac6":"markdown","7d7c2072":"markdown","4387d08d":"markdown","699bf8d8":"markdown","a76d0058":"markdown","1571c9e7":"markdown","2146312d":"markdown","8f0a32ed":"markdown","6cf68702":"markdown","d98c004c":"markdown","6da61c1b":"markdown","09ea0033":"markdown","b2f48ee6":"markdown","9a7ab202":"markdown","3fe54386":"markdown"},"source":{"37b4b213":"import warnings\n\nimport numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nfrom matplotlib import cm\nimport seaborn as sns\n\nfrom sklearn.cluster import DBSCAN\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler, RobustScaler\n\nfrom sklearn.feature_selection import SelectFromModel\n\nfrom sklearn.model_selection import cross_val_score\n\nfrom sklearn.linear_model import Lasso, Ridge, ElasticNet, BayesianRidge\nfrom sklearn.ensemble import RandomForestRegressor, AdaBoostRegressor, GradientBoostingRegressor\nfrom sklearn.neighbors import KNeighborsRegressor\n\nfrom xgboost import XGBRegressor\n\n\nfrom sklearn.metrics import mean_squared_log_error, make_scorer\n\nfrom scipy.stats import *\nfrom scipy.special import boxcox1p\nfrom scipy.optimize import minimize_scalar\n\nimport statsmodels.api as sm\nimport scipy.stats as stats\n\n#Options\nrandom_state = 10\npd.options.display.max_rows = 999\npd.options.display.max_columns = 999\nwarnings.filterwarnings(\"ignore\")","6ee35daa":"\ndef desc(df, feat, y='SalePrice', hue=None):\n    if df[feat].dtype.name == 'object':\n        cat_desc(df, feat, y)\n    else:\n        num_desc(df, feat, y, hue)\n             \n    \ndef num_desc(df, feat, y='SalePrice', hue=None):\n    \n    df_loc = df.loc[:, [feat,y, hue]].copy()\n    df_loc[feat].fillna(df_loc[feat].mean(), inplace=True)  # fast decision for data clustering\n    \n    fig, ax = plt.subplots(figsize=(20,4), nrows=1, ncols=2)\n    plt.suptitle(feat)\n    \n    ax[0] = sns.distplot(df_loc[feat], bins=40, ax=ax[0], norm_hist=True, kde=True)\n    ax[0].set_title(\"Feature distribution\")\n    \n    #ax[1] = sns.scatterplot(df_loc[feat], df_loc[y], ax=ax[1], palette=\"BuGn_r\", hue=hue)\n    #ax[1] = sns.scatterplot(x=feat, y=y, data=df_loc, ax=ax[1], palette=\"winter_r\", hue=hue)\n    ax[1] = sns.scatterplot(x=feat, y=y, data=df_loc, ax=ax[1], palette=\"RdBu_r\", hue=hue)\n    ax[1].set_title(\"Relation with target variable\")\n    ax[1].grid()\n        \n    ax[1].annotate(\"NA values: {}\".format(df[feat].isna().sum()), xy=(1.02, 0.95), xycoords='axes fraction')\n    ax[1].annotate(\"Skew: {0:.4}\".format(df[feat].skew()), xy=(1.02, 0.85), xycoords='axes fraction')\n    ax[1].annotate(\"Kurtosis: {0:.4}\".format(df[feat].kurt()), xy=(1.02, 0.75), xycoords='axes fraction')\n    ax[1].annotate(str(df[feat].describe()), xy=(1.02, 0.02), xycoords='axes fraction')\n    \n\ndef cat_desc(df, feat, y='SalePrice'):\n    \n    df_loc = df.loc[:, [feat,y]].copy()\n    df_loc[feat].fillna(\"NA_values\", inplace=True)  \n    \n    cats, cnts = np.unique(df_loc[feat].tolist(),return_counts=True)\n\n    fig, ax = plt.subplots(figsize=(20,5), nrows=1, ncols=2)\n    plt.suptitle(feat)\n    \n    result = df_loc.groupby([feat])[y].aggregate(np.median).reset_index().sort_values(y)[feat]\n    \n    ax[0] = sns.barplot(cats, cnts, ax=ax[0], order=result)\n    ax[0].set_title(\"Feature distribution\")\n    ax[0].set_xticklabels(ax[0].get_xticklabels(), rotation=90)\n    \n    ax[1] = sns.boxplot(x=feat, y=y, data=df_loc, ax=ax[1], order=result)\n    ax[1].set_title(\"Relation with target variable\")\n    ax[1].set_xticklabels(ax[1].get_xticklabels(), rotation=90)\n    \n    ax[1].annotate(\"NA values: {}\".format(df[feat].isna().sum()), xy=(1.02, 0.95), xycoords='axes fraction')\n    ax[1].annotate(str(df[feat].astype('object').describe()), xy=(1.02, 0.02), xycoords='axes fraction')\n\n        \ndef col_types(df, drop_feats = []):\n    data_describe = df.describe(include=\"all\")\n    if len(drop_feats):\n        cat_cols = [c for c in df.drop(drop_feats, axis=1).columns if df[c].dtype.name == 'object']\n        num_cols = [c for c in df.drop(drop_feats, axis=1).columns if df[c].dtype.name != 'object']\n    else:\n        cat_cols = [c for c in df.columns if df[c].dtype.name == 'object']\n        num_cols = [c for c in df.columns if df[c].dtype.name != 'object']\n        \n    bin_cols    = [c for c in cat_cols if data_describe[c]['unique'] == 2]\n    nonbin_cols = [c for c in cat_cols if data_describe[c]['unique'] > 2]\n    return cat_cols, num_cols, bin_cols, nonbin_cols\n\n# Group splitting functions\ndef make_groups(ser, num):\n    desc = ser.describe()\n    return(np.linspace(desc[\"min\"], desc[\"max\"]+1, num+1))\n    \n#\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u0435\u0442 \u043d\u043e\u043c\u0435\u0440 \u0433\u0440\u0443\u043f\u043f\u044b (\u043e\u0442\u0440\u0435\u0437\u043a\u0430) \u043f\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044e.\ndef set_groups(x, groups):\n    for i in range(len(groups)-1):\n        if (x >= groups[i])&(x < groups[i+1]):\n            return i\n    #return -1\n    raise ValueError(\"Value not in group\")\n\n#num_desc(data, \"LotArea\", hue='OverallQual')","0da6af8d":"path = \"\/kaggle\/input\/house-prices-advanced-regression-techniques\/\"\n#path= \"\"   #local path\n\ntrain = pd.read_csv(path + 'train.csv', index_col='Id')\nX_test_s = pd.read_csv(path + \"test.csv\", index_col='Id')\ny_test_s = pd.read_csv(path + \"sample_submission.csv\", index_col='Id')\n\ntest = pd.merge(y_test_s, X_test_s, how='inner', left_index=True, right_index=True)\n\ndata = pd.concat([train, test], axis=0, sort=False)\n\ntrain_idx = train.index\ntest_idx = test.index","1e118d73":"display(data.sample(10))\ndisplay(data.describe(include='all'))","fd4fcf82":"fig, ax = plt.subplots(figsize=(20,4), nrows=1, ncols=2)\nax[0].set_title(\"SalePrice\")\nax[1].set_title(\"QQ Plot\")\nsns.distplot(data.loc[train_idx, \"SalePrice\"], bins=40, ax=ax[0], norm_hist=True, kde=True).grid()\nfig = sm.qqplot(data.loc[train_idx, \"SalePrice\"], stats.t, fit=True, line='45', ax=ax[1])","8294e2fb":"data[\"SalePrice\"] = np.log(data[\"SalePrice\"])","0aa6b3f1":"fig, ax = plt.subplots(figsize=(20,4), nrows=1, ncols=2)\nax[0].set_title(\"SalePrice\")\nax[1].set_title(\"QQ Plot\")\nsns.distplot(data.loc[train_idx, \"SalePrice\"], bins=40, ax=ax[0], norm_hist=True, kde=True).grid()\nfig = sm.qqplot(data.loc[train_idx, \"SalePrice\"], stats.t, fit=True, line='45', ax=ax[1])","81eef63c":"data[\"MSSubClass\"] = data[\"MSSubClass\"].astype(object)\nfor feat in data.drop(\"SalePrice\", axis=1).columns:\n    desc(data,feat)\n    pass","455ece54":"feats = [\"MSZoning\", \"Electrical\", \"Functional\", \"Utilities\", \"SaleType\", \"KitchenQual\", \"Exterior2nd\", \"Exterior1st\"]\nfor feat in feats:\n    data[feat].fillna(data[feat].mode()[0], inplace=True)\n\nfeats = [\"GarageType\", \"GarageYrBlt\", \"GarageFinish\", \"GarageCars\", \"GarageArea\", \"GarageQual\", \"GarageCond\", \n         \"BsmtQual\", \"BsmtCond\", \"BsmtExposure\", \"BsmtFinType1\", \"BsmtFinSF1\", \"BsmtFinType2\", \"BsmtFinSF2\", \n         \"BsmtUnfSF\", \"TotalBsmtSF\", \"BsmtHalfBath\", \"BsmtFullBath\", \"Fireplaces\", \"FireplaceQu\", \"MasVnrArea\", \n         \"MasVnrType\", \"Fence\", \"MiscFeature\", \"MiscVal\", \"PoolQC\", \"PoolArea\", \"LotFrontage\", \"Alley\"]\nfor feat in feats:\n    data[feat].fillna(0, inplace=True)\n    \ndata['LotFrontage'] = data.groupby(['BldgType'])['LotFrontage'].transform(lambda x: x.fillna(x.mean()))\n\ndata.isnull().sum().sum()","ca5a53d1":"data[\"hasGarage\"] = 1\ndata.loc[data[\"GarageArea\"]==0, [\"hasGarage\"]]=0\ndata[\"hasGarage\"] = data[\"hasGarage\"].astype(object)\n\ndata[\"hasBsmt\"] = 1\ndata.loc[data[\"TotalBsmtSF\"]==0, [\"hasBsmt\"]]=0\ndata[\"hasBsmt\"] =  data[\"hasBsmt\"].astype(object)\n\ndata[\"hasPool\"] = 1\ndata.loc[data[\"PoolArea\"]==0, [\"hasPool\"]]=0\ndata[\"hasPool\"] = data[\"hasPool\"].astype(object)\n","1bd162cb":"fig, ax = plt.subplots(figsize=(24,4), ncols=3)\nax[0] = sns.scatterplot(data.loc[train_idx, \"GrLivArea\"]  , data.loc[train_idx, \"SalePrice\"], hue=data.loc[train_idx, \"OverallQual\"], ax=ax[0])\nax[1] = sns.scatterplot(data.loc[train_idx, \"TotalBsmtSF\"], data.loc[train_idx, \"SalePrice\"], hue=data.loc[train_idx, \"OverallQual\"], ax=ax[1])\nax[2] = sns.scatterplot(data.loc[train_idx, \"MasVnrArea\"], data.loc[train_idx, \"SalePrice\"], hue=data.loc[train_idx, \"OverallQual\"], ax=ax[2])","d672b21c":"#drop outliars \ntrain_idx = train_idx.drop(train[train[\"GrLivArea\"]>4500].index)","da3907e9":"data['LivingAreaSF'] = data[\"GrLivArea\"] + data[\"TotalBsmtSF\"] + data[\"MasVnrArea\"] \n\nfig, ax = plt.subplots(ncols=2, figsize=(24,4))\nax[0] = sns.scatterplot(data.loc[train_idx, \"LivingAreaSF\"] , data.loc[train_idx, \"SalePrice\"], hue=data.loc[train_idx, \"OverallQual\"], ax=ax[0])\nax[1] = sns.regplot(data.loc[train_idx, \"LivingAreaSF\"] , data.loc[train_idx, \"SalePrice\"], ax=ax[1])","ac36e812":"data[\"has2Floor\"] = 0\ndata.loc[data[\"2ndFlrSF\"]>0, [\"has2Floor\"]]=1\ndata[\"has2Floor\"] = data[\"has2Floor\"].astype(object)\n\n#data.drop([\"1stFlrSF\", \"2ndFlrSF\"], axis=1, inplace=True, errors='ignore')","c16d5de6":"fig, ax = plt.subplots(figsize=(24,4), ncols=2)\n\nax[0].set_title(\"YearBuilt\")\nax[1].set_title(\"YearRemodAdd\")\nax[0] = sns.scatterplot(data.loc[train_idx, \"YearBuilt\"] , data.loc[train_idx, \"SalePrice\"], ax=ax[0], hue = data.loc[train_idx, \"OverallQual\"])\nax[1] = sns.scatterplot(data.loc[train_idx, \"YearRemodAdd\"] , data.loc[train_idx, \"SalePrice\"], ax = ax[1] , hue = data.loc[train_idx, \"OverallQual\"])","cfefb919":"#New features ====================================================================================================================\n#Year group------------------------------------\ndata[\"AgeOnSoldMoment\"] = data[\"YrSold\"]-data[\"YearBuilt\"]\ndata[\"RemodAgeOnSoldMoment\"] = data[\"YrSold\"]-data[\"YearRemodAdd\"]\n\n#fix some negative values\ndata.loc[data[\"AgeOnSoldMoment\"]<0,\"AgeOnSoldMoment\"]=0\ndata.loc[data[\"RemodAgeOnSoldMoment\"]<0,\"RemodAgeOnSoldMoment\"]=0\n\n\nfig, ax = plt.subplots(ncols=2, figsize=(24,4))\nax[0] = sns.scatterplot(data.loc[train_idx, \"AgeOnSoldMoment\"] , data.loc[train_idx, \"SalePrice\"], hue=data.loc[train_idx, \"OverallQual\"], ax=ax[0])\nax[1] = sns.regplot(data.loc[train_idx, \"AgeOnSoldMoment\"] , data.loc[train_idx, \"SalePrice\"], ax=ax[1])\n\nfig, ax = plt.subplots(ncols=2, figsize=(24,4))\nax[0] = sns.scatterplot(data.loc[train_idx, \"RemodAgeOnSoldMoment\"] , data.loc[train_idx, \"SalePrice\"], hue=data.loc[train_idx, \"OverallQual\"], ax=ax[0])\nax[1] = sns.regplot(data.loc[train_idx, \"RemodAgeOnSoldMoment\"] , data.loc[train_idx, \"SalePrice\"], ax=ax[1])","9440bc23":"#GarageYrBlt\ndata[\"GarageOnSoldMoment\"] = data[\"YrSold\"]-data[\"GarageYrBlt\"]\ndata.loc[data[\"GarageOnSoldMoment\"]<0,\"GarageOnSoldMoment\"]=0\ndata.loc[data[\"GarageOnSoldMoment\"]>250,\"GarageOnSoldMoment\"]=0\n\nfig, ax = plt.subplots(ncols=2, figsize=(24,4))\nax[0] = sns.scatterplot(data.loc[train_idx, \"GarageOnSoldMoment\"] , data.loc[train_idx, \"SalePrice\"], hue=data.loc[train_idx, \"OverallQual\"], ax=ax[0])\nax[1] = sns.regplot(data.loc[train_idx, \"GarageOnSoldMoment\"] , data.loc[train_idx, \"SalePrice\"], ax=ax[1])","a74f223d":"data2 = data.copy()","80e79aeb":"data = data2.copy()","7083fdf8":"season_coef = data.loc[train_idx,:].groupby([\"MoSold\", \"YrSold\"]).agg({\"SalePrice\":\"mean\"}) \nseason_coef = season_coef\/data[\"SalePrice\"].mean() \nseason_coef.columns = [\"SeasonCoeff\"]\nseason_coef_gr = season_coef.unstack(-1)\nseason_coef_gr.columns = [col[1] for col in season_coef_gr.columns]\n\nfig, ax = plt.subplots(figsize=(12,4))\nax.grid()\nax = sns.lineplot(data=season_coef_gr, ax=ax)","8fe261d6":"def y_transform(df, coeffs):\n    coeffs_ = coeffs.reset_index() \n    coeffs_[\"idx\"] = coeffs_[\"MoSold\"].astype(str) + \"-\" + coeffs_[\"YrSold\"].astype(str) \n\n    df_ = df[[\"MoSold\",\"YrSold\"]]\n    df_[\"season_idx\"] = df_[\"MoSold\"].astype(str) + \"-\" + df_[\"YrSold\"].astype(str) \n    df_ = pd.merge(df_, coeffs_, how=\"left\", left_on=\"season_idx\", right_on=\"idx\") \n    return df_[\"SeasonCoeff\"].values","916bd008":"coeffs = y_transform(data, season_coef)    \ndata['SalePrice'] = data['SalePrice'] \/ coeffs","ccd52d89":"fig, ax = plt.subplots(figsize=(24,4), ncols=4)\nax[0] = sns.scatterplot(data.loc[train_idx, \"OpenPorchSF\"]  , data.loc[train_idx, \"SalePrice\"], hue=data.loc[train_idx, \"OverallQual\"], ax=ax[0])\nax[1] = sns.scatterplot(data.loc[train_idx, \"ScreenPorch\"], data.loc[train_idx, \"SalePrice\"], hue=data.loc[train_idx, \"OverallQual\"], ax=ax[1])\nax[2] = sns.scatterplot(data.loc[train_idx, \"3SsnPorch\"], data.loc[train_idx, \"SalePrice\"], hue=data.loc[train_idx, \"OverallQual\"], ax=ax[2])\nax[3] = sns.scatterplot(data.loc[train_idx, \"EnclosedPorch\"], data.loc[train_idx, \"SalePrice\"], hue=data.loc[train_idx, \"OverallQual\"], ax=ax[3])","852ef738":"data[\"PorchSF\"] = data[\"OpenPorchSF\"]+data[\"ScreenPorch\"] +data[\"3SsnPorch\"] +data[\"EnclosedPorch\"]\n\ndata[\"hasPorch\"] = 0\ndata.loc[data[\"PorchSF\"]>0, [\"hasPorch\"]]=1\ndata[\"hasPorch\"] = data[\"hasPorch\"].astype(object)\n\nfig, ax = plt.subplots(ncols=2, figsize=(24,4))\nax[0] = sns.scatterplot(data.loc[train_idx, \"PorchSF\"] , data.loc[train_idx,\"SalePrice\"], hue=data.loc[train_idx,\"OverallQual\"], ax=ax[0])\nax[1] = sns.regplot(data.loc[train_idx, \"PorchSF\"] , data.loc[train_idx,\"SalePrice\"], ax=ax[1])\n#print(data.loc[data[\"hasPorch\"]==1,[\"PorchSF\",\"SalePrice\"]].corr())","4f09ef4b":"data[\"hasWoodDeck\"] = 0\ndata.loc[data[\"WoodDeckSF\"]>0, [\"hasWoodDeck\"]]=1\ndata[\"hasWoodDeck\"] = data[\"hasWoodDeck\"].astype(object)\n\nfig, ax = plt.subplots(ncols=2, figsize=(24,4))\nax[0] = sns.scatterplot(data.loc[train_idx, \"WoodDeckSF\"] , data.loc[train_idx, \"SalePrice\"], hue=data.loc[train_idx, \"OverallQual\"], ax=ax[0])\nax[1] = sns.regplot(data.loc[train_idx, \"WoodDeckSF\"] , data.loc[train_idx, \"SalePrice\"], ax=ax[1])","acaf59ef":"fig, ax = plt.subplots(figsize=(24,4), ncols=4)\nax[0] = sns.scatterplot(data.loc[train_idx, \"HalfBath\"]  , data.loc[train_idx, \"SalePrice\"], hue=data.loc[train_idx, \"OverallQual\"], ax=ax[0])\nax[1] = sns.scatterplot(data.loc[train_idx, \"FullBath\"], data.loc[train_idx, \"SalePrice\"], hue=data.loc[train_idx, \"OverallQual\"], ax=ax[1])\nax[2] = sns.scatterplot(data.loc[train_idx, \"BsmtHalfBath\"], data.loc[train_idx, \"SalePrice\"], hue=data.loc[train_idx, \"OverallQual\"], ax=ax[2])\nax[3] = sns.scatterplot(data.loc[train_idx, \"BsmtFullBath\"], data.loc[train_idx, \"SalePrice\"], hue=data.loc[train_idx, \"OverallQual\"], ax=ax[3])","47f6f0a4":"data[\"Baths\"] = data[\"HalfBath\"] + data[\"FullBath\"]  + data[\"BsmtFullBath\"] + data[\"BsmtHalfBath\"]\n\nfig, ax = plt.subplots(ncols=2, figsize=(24,4))\nax[0] = sns.scatterplot(data.loc[train_idx, \"Baths\"] , data.loc[train_idx, \"SalePrice\"], hue=data.loc[train_idx, \"OverallQual\"], ax=ax[0])\nax[1] = sns.regplot(data.loc[train_idx, \"Baths\"] , data.loc[train_idx, \"SalePrice\"], ax=ax[1])","d93cee66":"data.drop([\"GrLivArea\", \"TotalBsmtSF\", \"MasVnrArea\"], axis=1, inplace=True, errors='ignore')\ndata.drop([\"1stFlrSF\", \"2ndFlrSF\"], axis=1, inplace=True, errors='ignore')\ndata.drop([\"OpenPorchSF\", \"ScreenPorch\",\"3SsnPorch\", \"EnclosedPorch\"], axis=1, inplace=True, errors='ignore')\ndata.drop([\"YearBuilt\", \"YearRemodAdd\"], axis=1, inplace=True, errors='ignore')\ndata.drop([\"HalfBath\", \"FullBath\",\"BsmtFullBath\", \"BsmtHalfBath\"], axis=1, inplace=True, errors='ignore')","39845b2a":"cat_cols, num_cols, bin_cols, nonbin_cols = col_types(data)\n\ndisplay(data[num_cols].sample(2))\ndisplay(data[cat_cols].sample(2))","d13c51d8":"data[\"MSSubClass\"] = data[\"MSSubClass\"].astype(object)\ndata[\"MoSold\"] = data[\"MoSold\"].astype(object)\ndata[\"YrSold\"] = data[\"YrSold\"].astype(object)","2590477a":"cat_cols, num_cols, bin_cols, nonbin_cols = col_types(data, drop_feats = [\"SalePrice\"])\n\ncm = data.loc[train_idx, num_cols + [\"SalePrice\"]].corr()\nfig, ax = plt.subplots(figsize=(24,8))\nsns.heatmap(cm, ax=ax, cmap='coolwarm', annot=True, center=0)\n\nfig, ax = plt.subplots(figsize=(18,5))\ncorr = cm[\"SalePrice\"].sort_values().drop([\"SalePrice\"])\nax.set_title(\"Numeric feature correlation chart\")\nsns.barplot(y = corr.index, x = corr.values, orient='h', ax=ax).grid()","a56161a1":"## Feature correlarion","ae65accb":"## hasFeature","9842d94c":"<a class=\"anchor\" id=\"1.3\"><\/a>\n# Missing values\n[on top](#0)","f7cdaff4":"## Features","17313b18":"## Porch","0b718541":"## Types","651b6ac6":"# EDA <a class=\"anchor\" id=\"2\"><\/a>\n## First approach <a class=\"anchor\" id=\"2.1\"><\/a>\n[on top](#0)","7d7c2072":"# References <a class=\"anchor\" id=\"01\"><\/a>\n[on top](#0)\n\n1. Prediction notebook","4387d08d":"# Exploratory data analysis\n\n\nHello!\nI present to you an analysis of dataset [House Prices: Advanced Regression Techniques](https:\/\/www.kaggle.com\/c\/house-prices-advanced-regression-techniques). \n\nThis is the first step towards prediction.\n\nKey findings will be presented in the [Conclusion](#4) section.","699bf8d8":"<a class=\"anchor\" id=\"1.3\"><\/a>\n# Read the data \n[on top](#0)","a76d0058":"## Living Area\n","1571c9e7":"### WoodDeck","2146312d":"### Baths","8f0a32ed":"### Drop duplicate features","6cf68702":"## Target variable","d98c004c":"<a class=\"anchor\" id=\"1.3\"><\/a>\n# New features\n[on top](#0)","6da61c1b":"## Season coefficient","09ea0033":"# Preparing <a class=\"anchor\" id=\"1\"><\/a>\n\n## Imports <a class=\"anchor\" id=\"1.1\"><\/a> \n[on top](#0)","b2f48ee6":"## TABLE OF CONTENTS <a class=\"anchor\" id=\"0\"><\/a>\n\n1. [References](#01)\n1. [Preparing](#1)\n    - [Imports](#1.1)\n    - [Useful functions](#1.2)\n    - [Read the data](#1.3)\n2. [EDA](#2)\n    - [First approach](#2.1)\n    - [Target variable](#target)\n    - [NA Values](#2.2)\n    - [Types](#2.3)\n    - [Outliars](#2.4)\n    - [Feature correlations](#2.5)\n3. [Feature engeneering](#3)\n4. [Conclusion](#4)\n5. [Code](#5)\n","9a7ab202":"## Year's","3fe54386":"## Useful functions <a class=\"anchor\" id=\"1.2\"><\/a>\n[on top](#0)"}}