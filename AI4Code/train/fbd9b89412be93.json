{"cell_type":{"3a43b138":"code","d7f2bd55":"code","45793ac3":"code","96dea5a1":"code","91129036":"code","f1ffd6dd":"code","bbe300ad":"code","7fba3cf6":"code","dfd6715e":"code","44465947":"code","e5295ee6":"code","e01bafac":"code","a101150a":"code","30fc3b32":"code","578ff15d":"code","2b87b424":"code","f0a123fb":"code","8d4b1323":"code","327b84e6":"code","cb53ee59":"code","5f2ef0dc":"code","1a00be9b":"code","4988b5db":"code","643ab906":"code","218a4802":"code","374444a7":"code","9754c321":"code","25a0d16b":"code","e7016baf":"code","bda5433f":"code","31ac5203":"code","b7af9cb7":"code","519f8477":"code","edd5c129":"code","91287cfa":"code","e3261e36":"code","ecbb0089":"code","79942337":"code","231688b7":"code","2ae82c78":"code","10ddba20":"code","200f62b0":"code","4ce87dda":"code","7b75acc6":"code","dd16db29":"code","e756ed56":"code","91be9581":"code","3b95331d":"code","81b0750f":"code","bba776be":"code","a5d33887":"code","92dc6ac4":"code","d26935a6":"code","817d5496":"markdown","b24ba4fe":"markdown","1f5d8545":"markdown","3c87c83e":"markdown","198a191b":"markdown","d0de41f5":"markdown","17385efb":"markdown","d5dfa236":"markdown","dea7f4ca":"markdown","57417f80":"markdown"},"source":{"3a43b138":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt \n\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers","d7f2bd55":"# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","45793ac3":"df = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ndf1 = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","96dea5a1":"df.head()","91129036":"df1.head()","f1ffd6dd":"dfy = df.Survived\n\ndf.drop(['PassengerId','Survived','Name','Ticket','Cabin','Fare'],axis=1,inplace=True)\ndf1.drop(['PassengerId','Name','Ticket','Cabin','Fare'],axis=1,inplace=True)","bbe300ad":"dfy","7fba3cf6":"df.head()","dfd6715e":"df1.head()","44465947":"print('shape of training data: ',df.shape)\nprint('shape of testing data: ',df1.shape )","e5295ee6":"df.info()","e01bafac":"df1.info()","a101150a":"df.describe()","30fc3b32":"df1.describe()","578ff15d":"df.columns","2b87b424":"column_df = df.columns\n\nfor x in column_df:\n  print('unique value information: ',x)\n  # print(df[x].unique())\n  print('number of unique values: ',df[x].unique().shape[0])\n  print('number of null (True if value is NaN) : \\n',df[x].isnull().value_counts())\n  print('\\n-----------------------------------------------------------------\\n')","f0a123fb":"columns_df1 = df1.columns\n\nfor x in columns_df1:\n  print('unique value information: ',x)\n  #print(df1[x].unique())\n  print('number of unique values: ',df1[x].unique().shape[0])\n  print('number of null (True if value is NaN): \\n',df1[x].isnull().value_counts())\n  print('\\n-------------------------------------------------------------\\n')","8d4b1323":"df.Age.isnull().value_counts()","327b84e6":"df.Age.fillna(df.Age.mean(),inplace=True)","cb53ee59":"df.Age.isnull().value_counts()","5f2ef0dc":"df1.Age.isnull().value_counts()","1a00be9b":"df1.Age.fillna(df1.Age.mean(), inplace = True)","4988b5db":"df1.Age.isnull().value_counts()","643ab906":"df.Embarked.isnull().value_counts()","218a4802":"df.Embarked.value_counts()","374444a7":"df.Embarked.fillna('S',inplace = True)","9754c321":"df.Embarked.isnull().value_counts()","25a0d16b":"from sklearn.preprocessing import LabelEncoder","e7016baf":"le = LabelEncoder()\n\nle.fit(df.Sex)\nSex_labeled = le.transform(df.Sex)\ndf['Sex_labeled'] = Sex_labeled\ndf.drop(['Sex'],axis = 1, inplace = True)\n\nle.fit(df.Embarked)\nEmbarked_labeled = le.transform(df.Embarked)\ndf['Embarked_labeled'] = Embarked_labeled\ndf.drop(['Embarked'],axis =1, inplace = True)\n\nle.fit(df1.Sex)\nSex_labeled= le.transform(df1.Sex)\ndf1['Sex_labeled'] = Sex_labeled\ndf1.drop(['Sex'], axis =1, inplace =True)\n\nle.fit(df1.Embarked)\nEmbarked_labeled = le.transform(df1.Embarked)\ndf1['Embarked_labeled'] = Embarked_labeled\ndf1.drop(['Embarked'], axis =1, inplace =True)","bda5433f":"df.head()","31ac5203":"df1.head()","b7af9cb7":"df.info()","519f8477":"df1.info()","edd5c129":"x = np.array(df)\ny = np.array(dfy)\n\nx1 = np.array(df1)","91287cfa":"from sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\n\nx = scaler.fit_transform(x)\nx1 = scaler.fit_transform(x1)","e3261e36":"from sklearn.model_selection import train_test_split as tts\nx_train, x_test, y_train, y_test = tts(df, dfy, test_size =0.2)","ecbb0089":"print('Shape of Train and Test Set: ')\nprint('x_train: ', x_train.shape)\nprint('x_test: ', x_test.shape)\nprint('y_train: ', y_train.shape)\nprint('y_test: ',y_test.shape)","79942337":"from sklearn.ensemble import RandomForestClassifier as RFC\nfrom sklearn.metrics import roc_auc_score","231688b7":"model_rfc = RFC(max_depth=10, n_estimators =100, random_state = 2)\nmodel_rfc.fit(x_train,y_train)","2ae82c78":"model_rfc.score(x_test,y_test)","10ddba20":"y_pred = model_rfc.predict(df1)\n#roc_auc_score(y_test,y_pred)","200f62b0":"from sklearn.svm import SVC","4ce87dda":"model_svm = SVC(C=10)\nmodel_svm.fit(df,dfy)","7b75acc6":"model_svm.score(df,dfy)","dd16db29":"y_pred = model_svm.predict(df1)\n\n#roc_auc_score(y_test,y_pred)","e756ed56":"# create Model \n\nmodel = keras.Sequential()\nmodel.add(layers.Dense(12 , activation=\"relu\", input_shape=(6,)))\nmodel.add(layers.Dense(6, activation=\"relu\")),\nmodel.add(layers.Dense(1,activation=\"sigmoid\"))\n\nmodel.summary()","91be9581":"# fit and compile model\n\nmodel.compile(optimizer=\"adam\", loss=\"binary_crossentropy\", metrics=[keras.metrics.AUC()])\n\nhistory= model.fit(df,dfy,batch_size=23,epochs=100,validation_data=(x_test,y_test))\n\nplt.figure()\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])","3b95331d":"y_pred = model.predict_classes(df1)\n\n#roc_auc_score(y_test,y_pred)","81b0750f":"Survived = np.squeeze(y_pred)","bba776be":"PassengerId = np.arange(892,1310)","a5d33887":"ans = pd.DataFrame(list(zip(PassengerId,Survived)),columns=['PassengerId','Survived'])\nans.head()","92dc6ac4":"ans.shape","d26935a6":"ans.to_csv(\"final_ans.csv\",index=False)","817d5496":"# Normalizing Data","b24ba4fe":"# Solve by ANN\n\n> Indented block\n\n","1f5d8545":"## Replace **NaN** with **mean** **Value** ","3c87c83e":"# Train test split df","198a191b":"# SVM Classifier","d0de41f5":"## Embarked in df has 2 missing values, replace it by **mode** of that column","17385efb":"Age in df and df1","d5dfa236":"# labeling of column which contain catagorical data in object data type ('Sex' and 'Embarked')","dea7f4ca":"# Random Forest Model ","57417f80":"# Crreate submission file"}}