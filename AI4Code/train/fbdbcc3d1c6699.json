{"cell_type":{"732462b7":"code","eeba5c1c":"code","1c1235c6":"code","0d193731":"code","43dc9399":"code","666b5fc9":"code","548264bf":"code","44d06ab2":"code","95956fdf":"code","e61ae6f5":"code","1e99f4c6":"code","97aa8d82":"code","6c5342b7":"code","b5a4bf2c":"code","a273d77a":"code","1aeb76d3":"code","b1229665":"code","cc37c2e3":"code","4da80230":"code","05466082":"code","becfac12":"code","6a9b59fa":"code","c251d02a":"code","b57661ab":"code","d133ca32":"code","deb6ae2d":"code","2f094502":"markdown"},"source":{"732462b7":"import pandas as pd\ndataset=pd.read_csv('..\/input\/digit-recognizer\/train.csv')\ndataset.head()","eeba5c1c":"dataset.info()","1c1235c6":"dataset.nunique().sort_values(ascending=False)[:5]","0d193731":"data = dataset.sample(frac=0.8, random_state=42)\ndata_unseen = dataset.drop(data.index)\ndata.reset_index(inplace=True, drop=True)\ndata_unseen.reset_index(inplace=True, drop=True)\nprint('Data for Modeling: ' + str(data.shape))","43dc9399":"print('Unseen Data For Predictions: ' + str(data_unseen.shape))","666b5fc9":"!pip install pycaret","548264bf":"from pycaret.classification import *","44d06ab2":"numeric_features=data.columns.tolist()\nnumeric_features.remove('label')\nnumeric_features[:5]","95956fdf":"data.label.value_counts()","e61ae6f5":"exp_clf101 = setup(data = data, target = 'label', session_id=42,\n                  normalize = True, \n                  transformation = True, \n                  log_experiment = True,\n                  handle_unknown_categorical = True, \n                  unknown_categorical_method = 'most_frequent',\n                  remove_multicollinearity = True, #rop one of the two features that are highly correlated with each other\n                  ignore_low_variance = True,#all categorical features with statistically insignificant variances are removed from the dataset.\n                  combine_rare_levels = True,# all levels in categorical features below the threshold defined in rare_level_threshold param are combined together as a single level\n                  numeric_imputation='median',\n                  categorical_imputation='mode',\n                   numeric_features=numeric_features)","1e99f4c6":"lightgbm = create_model('lightgbm')","97aa8d82":"print(lightgbm)","6c5342b7":"tuned_lightgbm = tune_model(lightgbm,optimize = 'AUC')","b5a4bf2c":"plot_model(tuned_lightgbm, plot = 'auc')","a273d77a":"plot_model(tuned_lightgbm, plot = 'pr')","1aeb76d3":"plot_model(tuned_lightgbm, plot='feature')","b1229665":"plot_model(tuned_lightgbm, plot = 'confusion_matrix')","cc37c2e3":"evaluate_model(tuned_lightgbm)","4da80230":"predict_model(tuned_lightgbm)","05466082":"unseen_predictions = predict_model(tuned_lightgbm, data=data_unseen)\nunseen_predictions.head()","becfac12":"print(\"Confidence Score :   {}\".format(round(unseen_predictions.Score.mean(),2)))#Confidence Score","6a9b59fa":"test=pd.read_csv('..\/input\/digit-recognizer\/test.csv')\ntest.head()","c251d02a":"sol = predict_model(tuned_lightgbm, data=test)\nsol.head()","b57661ab":"final=pd.read_csv('..\/input\/digit-recognizer\/sample_submission.csv')\nfinal.head()","d133ca32":"final.Label=sol.Label\nfinal.head()","deb6ae2d":"final.to_csv('final.csv', index=False)","2f094502":"#### Time is constant, so using model which will take less time to execute"}}