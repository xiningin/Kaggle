{"cell_type":{"7b352df4":"code","1888cbed":"code","657276f0":"code","e42deacd":"code","7298dcc3":"code","57e804b5":"code","aef0f2bc":"code","4ba69eb7":"code","469b55c4":"code","5b2972b1":"code","d1c8b63b":"code","3f2061ba":"code","064b2b79":"code","64921ba8":"code","765bf993":"code","cce2bbff":"code","4c6996e2":"markdown","4dd7c639":"markdown","0d65fa39":"markdown","51d64f24":"markdown","b0e9fde1":"markdown","7a66ff63":"markdown","0e34ae82":"markdown","0c7eb3f0":"markdown","b32fa11e":"markdown","86c10b57":"markdown","8f73a136":"markdown","8292122f":"markdown","1366e1bf":"markdown","9b4f5a32":"markdown","ffb9e1e8":"markdown"},"source":{"7b352df4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","1888cbed":"import re\nimport json\nimport math\nimport matplotlib.pyplot as plt\nfrom matplotlib.pyplot import figure\nimport seaborn as sns\nimport spacy\nfrom spacy.matcher import Matcher\nfrom tqdm import tqdm\n\nnlp = spacy.load(\"en_core_web_sm\")","657276f0":"debug = False\narticles = {}\nstat = { }\npaths = ['biorxiv_medrxiv\/biorxiv_medrxiv','comm_use_subset\/comm_use_subset','custom_license\/custom_license','noncomm_use_subset\/noncomm_use_subset']\nfor path in paths:\n    lists = list(os.listdir('\/kaggle\/input\/CORD-19-research-challenge\/'+path))\n    for i in lists:\n        articles[i] = os.path.join('\/kaggle\/input\/CORD-19-research-challenge\/'+path, i)\ndf = pd.read_csv('\/kaggle\/input\/CORD-19-research-challenge\/metadata.csv')","e42deacd":"df.head()","7298dcc3":"df.shape","57e804b5":"virus_ref = ['covid-19', 'coronavirus', 'cov-2', 'sars-cov-2', 'sars-cov', 'hcov', '2019-ncov']\nsymptoms = ['weight loss','chills','shivering','convulsions','deformity','discharge','dizziness','vertigo','fatigue','malaise','asthenia','hypothermia','jaundice','muscle weakness','pyrexia','sweats','swelling','swollen','painful lymph node','weight gain','arrhythmia','bradycardia','chest pain','claudication','palpitations','tachycardia','dry mouth','epistaxis','halitosis','hearing loss','nasal discharge','otalgia','otorrhea','sore throat','toothache','tinnitus','trismus','abdominal pain','fever','bloating','belching','bleeding','blood in stool','melena','hematochezia', 'constipation','diarrhea','dysphagia','dyspepsia','fecal incontinence','flatulence','heartburn','nausea','odynophagia','proctalgia fugax','pyrosis','steatorrhea','vomiting','alopecia','hirsutism','hypertrichosis','abrasion','anasarca','bleeding into the skin','petechia','purpura','ecchymosis and bruising','blister','edema','itching','laceration','rash','urticaria','abnormal posturing','acalculia','agnosia','alexia','amnesia','anomia','anosognosia','aphasia and apraxia','apraxia','ataxia','cataplexy','confusion','dysarthria','dysdiadochokinesia','dysgraphia','hallucination','headache','akinesia','bradykinesia','akathisia','athetosis','ballismus','blepharospasm','chorea','dystonia','fasciculation','muscle cramps','myoclonus','opsoclonus','tic','tremor','flapping tremor','insomnia','loss of consciousness','syncope','neck stiffness','opisthotonus','paralysis and paresis','paresthesia','prosopagnosia','somnolence','abnormal vaginal bleeding','vaginal bleeding in early pregnancy', 'miscarriage','vaginal bleeding in late pregnancy','amenorrhea','infertility','painful intercourse','pelvic pain','vaginal discharge','amaurosis fugax','amaurosis','blurred vision','double vision','exophthalmos','mydriasis','miosis','nystagmus','amusia','anhedonia','anxiety','apathy','confabulation','depression','delusion','euphoria','homicidal ideation','irritability','mania','paranoid ideation','suicidal ideation','apnea','hypopnea','cough','dyspnea','bradypnea','tachypnea','orthopnea','platypnea','trepopnea','hemoptysis','pleuritic chest pain','sputum production','arthralgia','back pain','sciatica','Urologic','dysuria','hematospermia','hematuria','impotence','polyuria','retrograde ejaculation','strangury','urethral discharge','urinary frequency','urinary incontinence','urinary retention']\norgans = ['mouth','teeth','tongue','salivary glands','parotid glands','submandibular glands','sublingual glands','pharynx','esophagus','stomach','small intestine','duodenum','Jejunum','ileum','large intestine','liver','Gallbladder','mesentery','pancreas','anal canal and anus','blood cells','respiratory system','nasal cavity','pharynx','larynx','trachea','bronchi','lungs','diaphragm','Urinary system','kidneys','Ureter','bladder','Urethra','reproductive organs','ovaries','Fallopian tubes','Uterus','vagina','vulva','clitoris','placenta','testes','epididymis','vas deferens','seminal vesicles','prostate','bulbourethral glands','penis','scrotum','endocrine system','pituitary gland','pineal gland','thyroid gland','parathyroid glands','adrenal glands','pancreas','circulatory system','Heart','patent Foramen ovale','arteries','veins','capillaries','lymphatic system','lymphatic vessel','lymph node','bone marrow','thymus','spleen','tonsils','interstitium','nervous system','brain','cerebrum','cerebral hemispheres','diencephalon','the brainstem','midbrain','pons','medulla oblongata','cerebellum','the spinal cord','the ventricular system','choroid plexus','peripheral nervous system','nerves','cranial nerves','spinal nerves','Ganglia','enteric nervous system','sensory organs','eye','cornea','iris','ciliary body','lens','retina','ear','outer ear','earlobe','eardrum','middle ear','ossicles','inner ear','cochlea','vestibule of the ear','semicircular canals','olfactory epithelium','tongue','taste buds','integumentary system','mammary glands','skin','subcutaneous tissue']\nold = ['over', 'above', 'higher', 'older', '>', 'over', 'less']\nyoung = ['under', 'below', 'fewer', 'younger', '<', 'under', 'more']","aef0f2bc":"matchers = {\"Term Matcher\": lambda term: [{'LOWER': t} for t in term.split(' ')],\n    \"Terms Matcher\": lambda terms: [{\"LOWER\": {\"IN\": terms } }],\n    \"Number Suffix Matcher\": lambda periods: [{'LIKE_NUM': True},{\"TEXT\": {\"REGEX\": f'({\"|\".join(periods)})'}}],\n    \"Number Interval Matcher\": lambda periods: [{'POS': 'NUM',},{'TEXT': {'REGEX': f'({\"|\".join(periods)})'}, 'OP': '?'},{'DEP': 'quantmod', 'OP': '?'},{'DEP': 'punct', 'OP': '?'},{'DEP': 'prep', 'OP': '?'},{'POS': 'NUM'},{'TEXT': {'REGEX': f'({\"|\".join(periods)})'}},],\n    \"Group Matcher\": [{\"TEXT\": {\"IN\": old+young }}]}","4ba69eb7":"def plot_dict(stat,t = 10,sort_values = False,barh = False,width = 20,height = 4,title = ''):\n    filtered = dict(stat)\n    delete = []\n    for i in filtered:\n        if filtered[i] < t:\n            delete.append(i)\n    for i in delete:\n        del filtered[i]\n    if sort_values == False:\n        lists = sorted(filtered.items())\n    else:\n   #     if sort_values == True:\n        lists = sorted(filtered.items())#, key = lambda item : item[1]\n       # else:\n         #   lists = sorted(filtered.items(), key = sort_values)\n    fig = figure(num=None, figsize=(width, height))    \n    if title != '':\n        fig.suptitle(title, fontsize=20)        \n    x, y = zip(*lists) \n    if barh == True:\n        plt.barh(x, y)\n    else:\n        plt.bar(x, y)\n    plt.show()\ndef merge_keys(mergers, obj):\n    result = dict(obj)\n    for key, arr in mergers:\n        if key not in result:\n            result[key] = 0\n        for merger in arr:\n            if merger in result:\n                result[key] = result[key] + result[merger]\n                del result[merger]\n    return result\ndef dict_counter(res, arg):\n    try:\n        key = str(arg)\n        res.setdefault(key, 0)\n        res[key] = res[key] + 1\n    except:\n        pass\ndef numval(val):\n    try:\n        return int(float(str(val))) \n    except:\n        return None\ndef day_value(val, rep = None):\n    if rep != None:\n        val = numval(val.text)\n        if val != None and 'week' in rep.text:\n            val = val * 7\n        return val\n    else:\n        return None\ndef report_interval(res, min_val, max_val):       \n    if min_val != None and max_val != None:\n        for key in range(min_val, max_val):\n            res.setdefault(key, 0)\n            res[key] = res[key] + 1    \ndef virus_match(text):\n    return len(re.findall(rf'({\"|\".join(virus_ref)})', text, flags=re.IGNORECASE)) > 0","469b55c4":"literature = []\nfor index, row in tqdm(df.iterrows(), total=df.shape[0]):\n    sha = str(row['sha'])\n    if sha != 'nan':\n        sha = sha + '.json';\n        try:\n            found = False\n            with open(articles[sha]) as f:\n                data = json.load(f)\n                for key in ['abstract', 'body_text']:\n                    if found == False and key in data:\n                        for content in data[key]:\n                            text = content['text']\n                            if virus_match(text) == True:                                \n                                literature.append({'file': articles[sha], 'body': text})                                \n        except KeyError:\n            pass","5b2972b1":"len(literature)","d1c8b63b":"def execute_matches(match_arr,root,sentence,file,index = 0,execution = []):\n    key, result = match_arr[0]\n    rest = match_arr[1:]\n    ne = execution + [(key, result, index)]\n    if key in root:\n        r = root[key]\n        if callable(r):\n            r( (result, ne, sentence, file) )            \n        else:\n            if 'execute' in r:\n                rule['execute']( (result,ne,sentence,file) )\n            if len(rest) > 0:\n                execute_matches(rest,r,sentence,file,index+1,ne)\n    \n    if len(rest) > 0:               \n        execute_matches(rest, root, sentence, file, index + 1, execution)    \ndef merge_dict_values(original,rules,drop = []):\n    a = {}\n    b = {}\n    for key, values in rules:\n        for val in values:\n            b[val] = key\n    for key in original.keys():\n        new = key if key not in b else b[key]        \n        if key not in drop and new not in drop:\n            val = original[key]            \n            a[new] = val if new not in a else a[new] + val\n    return a   \ndef merge_matches(matches, doc):\n    a = []\n    b = (None, None, None)\n    for ids, start, end in matches:   \n        if ids != b[0] or b[2] < start:\n            if b[0] != None:\n                a.append(b)\n            b = (ids, start, end)\n        elif b[2] < end:\n            b = (ids, b[1], end)\n    a.append(b)\n    return a;\n\ndef match_parser(matcher, doc, rule, file):\n    match = matcher(doc)\n    if len(match)>0:\n        to_process = []\n        for match_id, start, end in merge_matches(match, doc):\n            string_id = nlp.vocab.strings[match_id]\n            span = doc[start:end]\n            to_process.append((string_id, span))\n        execute_matches(to_process, rule['root'], doc, file)\n\ndef parse_body(matcher, text, rule, file = None, sentence_level = False):\n    text = text.lower()\n    doc = nlp(text)\n    if sentence_level == True:    \n        for sent in doc.sents:\n            sent_doc = nlp(sent.text)\n            match_parser(matcher, sent_doc, rule, file)\n    else:\n        match_parser(matcher, doc, rule, file)\n\ndef execute_ruleset(term, rule, sentence_level = False, literature = literature):\n    matcher = Matcher(nlp.vocab)\n    for name, m in rule[\"Matchers\"]:\n        matcher.add(name, None, m)\n    for article in tqdm(literature):\n        text_list = re.compile(\"\\. \").split(article['body'])\n        file = article['file']\n        for text in text_list:\n            if callable(term):\n                allow = term(text)\n            else:\n                allow = term == None or term in text\n            if allow == True:\n                parse_body(matcher, text, rule, file, sentence_level) ","3f2061ba":"stat['symptoms'] = {}\ndef match(text):\n    if virus_match(text) == True:\n        return len(re.findall(rf'\\ ({\"|\".join(symptoms)})\\ ', text)) > 0\n    else:\n        return False\ndef symptom(res):\n    ref, agregate, sentence, file = res\n    dict_counter(stat['symptoms'], ref.text)\nrule = {\"Matchers\": [(\"Symptoms Reference\", matchers['Terms Matcher'](symptoms)),],\"root\": {\"Symptoms Reference\": symptom}}\ndef symptom_match(text):\n    return len(re.findall(r'symptom', text)) > 0\nexecute_ruleset(symptom_match, rule)\nplot_dict(stat['symptoms'], 50, True, title = \"Manifested Symptoms\")","064b2b79":"stat","64921ba8":"stat['transmission'] = {}\ndef report_term(x):\n    arr = x[1]\n    m1, v1, i1 = arr[0]\n    m2, v2, i2 = arr[1]\n    m3, v3, i3 = arr[2]\n    if m1 == 'Term Matcher' and m2 == 'Form Matcher':\n        dict_counter(stat['transmission'], re.sub(r'[ ]?(-|the| a )[ ]?','', v3.text))\nterm_match = ['transmit','transmitted', 'spread', 'spreaded']\nrule = {\"Matchers\": [(\"Term Matcher\", [{\"LOWER\": \"now\", \"OP\": \"!\"}] + matchers[\"Terms Matcher\"](term_match)),\n        (\"Form Matcher\", matchers[\"Terms Matcher\"](['through', 'by', 'via'])),\n        (\"Noun Matcher\", [{\"POS\": \"VERB\", \"OP\": \"?\"},{\"POS\": \"DET\", \"OP\": \"?\"},{\"POS\": \"ADJ\", \"OP\": \"?\"},{\"POS\": \"PUNCT\", \"OP\": \"?\"},{\"POS\": \"ADJ\", \"OP\": \"?\"},{\"POS\": \"NOUN\", \"OP\": \"+\"},])],\n    \"root\": { \"Term Matcher\": {\"Form Matcher\": {\"Noun Matcher\": report_term}}}}\ndef transmission_match(text):\n    return len(re.findall(rf'({\"|\".join(term_match)})', text)) >0\n\nexecute_ruleset(transmission_match, rule, False)\nnew_dict = merge_dict_values(stat['transmission'], [('contact', ['direct contact', 'close contact', 'indirect contact', 'person contact']),\n    ('respiratory droplets\/route', ['droplets','air', 'airborne route', 'aerosols', 'airborne transmission', 'respiratory route','respiratory droplets', 'droplet', 'respiratory secretions']),\n    ('surfaces\/fomites', ['fomites', 'surfaces', 'environmental surfaces', 'environment']),\n    ('human transmission', ['human','humans','patient', 'patients','person', 'people']),\n    ('fecal-oral route', ['fecaloral route', 'faecaloral route'])], ['%', 'virus', 'viruses'])\nplot_dict(new_dict, 30, True, barh = True, height = 20, title = 'Transmission Routes')","765bf993":"stat.keys()","cce2bbff":"stat['organs'] = {}\ndef match(text):\n    if virus_match(text) == True:\n        return len(re.findall(rf'\\ ({\"|\".join(organs)})\\ ', text)) > 0\n    else:\n        return False\ndef organ_ref(res):\n    ref, agregate, sentence, file = res\n    dict_counter(stat['organs'], ref.text)\n        \nrule = {\"Matchers\": [(\"Organ Reference\", matchers['Terms Matcher'](organs)),],\n    \"root\": {\"Organ Reference\": organ_ref}}\ndef organ_match(text):\n    res = re.findall(rf'\\ ({\"|\".join(organs)})\\ ', text, flags=re.IGNORECASE)    \n    return len(res) >0\n\nexecute_ruleset(organ_match, rule)\nplot_dict(stat['organs'], 500, True, title = 'Affected Organs')","4c6996e2":"## Defining other important functions","4dd7c639":"# Importing the JSON files","0d65fa39":"# Virus Symptoms\nSearching for word representing symptoms in all articles that have a coronaviru,that matches at least one term in symptoms.*","51d64f24":"# Organs affected by Corona\nSearching for word representing organs in human body in all articles that can be affected by coronaviru that matches at least one term in transmission.","b0e9fde1":"* plot_dict - plot a dictionary\n* dict_counter - set the value of a key in the dictionary\n* day_value - determine value of days\n* report_interval - populates dictionary with values for an interval\n* virus_match - to checks if any virus term is present in the text or not\n","7a66ff63":"# Virus Transmission\nSearching for word representing transmission in all articles that have a coronaviru,that matches at least one term in transmission.","0e34ae82":"![image.png](attachment:image.png)","0c7eb3f0":"**Comment** : There are 45,774 articles, and 17 features. <br>\n- sha: Sourvce of article\n- source_x: Sourvce of article\n- title\n- 'pmcid': populated for all PMC paper records \n- 'doi': populated for all BioRxiv\/MedRxiv paper records and most of the other records \n- 'WHO #Covidence': populated for all CZI records and none of the other records \n- 'pubmed_id': populated for some of the records\n- 'Microsoft Academic Paper ID': populated for some of the records\n- publish_time \n<br>\n","b32fa11e":"# COVID - 19","86c10b57":"# Prepare term List\n\n    virus_ref - virus related words in articles is used to filter the dataset.\n    symptoms - list of symptoms\n    organs - list of human organs\n    old - list of terms that are used to define the starting point of an age group\n    young - list of terms that are used to define the end of an age group\n\n","8f73a136":"![image.png](attachment:image.png)","8292122f":"# Defining important function for further smothening of execution****","1366e1bf":"![image.png](attachment:image.png)","9b4f5a32":"# Prepared dataset for COVID-19","ffb9e1e8":"## Importing important library and files"}}