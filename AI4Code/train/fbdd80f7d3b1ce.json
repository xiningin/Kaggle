{"cell_type":{"2a3d6d59":"code","0ed041e5":"code","21768fa3":"code","3636facb":"code","bfb07cf0":"code","56bd4e19":"code","e67e2a2e":"code","45a3dd03":"code","789d3ba9":"code","48cd0982":"code","a1315965":"code","6d12daae":"code","14da17a1":"code","de6b0765":"markdown","06d05ec9":"markdown","16d8fc27":"markdown","b467af37":"markdown","84877606":"markdown","8b59fa41":"markdown","345174e2":"markdown","94ad5d1f":"markdown","f2e16969":"markdown","674f5f32":"markdown","30a428ba":"markdown","85089a8f":"markdown","4e650d32":"markdown","bdcd43a5":"markdown","e414924d":"markdown","651a1e7c":"markdown","e77c6e6e":"markdown","8fcdda58":"markdown"},"source":{"2a3d6d59":"import pandas as pd \nimport numpy as np \nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","0ed041e5":"data = pd.read_csv(r'\/kaggle\/input\/airline-passenger-traffic\/airline-passenger-traffic(1).csv')\ndata.columns = ['Month','Passengers']\ndata['Month'] = pd.to_datetime(data['Month'], format='%Y-%m')\ndata = data.set_index('Month')\ndata.head()","21768fa3":"data.plot(figsize=(20, 4))\nplt.grid()\nplt.legend(loc='best')\nplt.title('Airline passenger traffic')\nplt.show(block=False)","3636facb":"data = data.assign(Passengers_Linear_Interpolation=data.Passengers.interpolate(method='linear'))\ndata[['Passengers_Linear_Interpolation']].plot(figsize=(20, 4))\nplt.grid()\nplt.legend(loc='best')\nplt.title('Airline passenger traffic: Linear interpolation')\nplt.show(block=False)","bfb07cf0":"data['Passengers'] = data['Passengers_Linear_Interpolation']\ndata.drop(columns=['Passengers_Linear_Interpolation'],inplace=True)\ndata.head()","56bd4e19":"import seaborn as sns\nfig = plt.subplots(figsize=(20, 5))\nax = sns.boxplot(x=data['Passengers'],whis=1.5)","e67e2a2e":"fig = data.Passengers.hist(figsize = (20,5))","45a3dd03":"from pylab import rcParams\nimport statsmodels.api as sm\nrcParams['figure.figsize'] = 20,24\ndecomposition = sm.tsa.seasonal_decompose(data.Passengers, model='additive') # additive seasonal index\nfig = decomposition.plot()\nplt.show()","789d3ba9":"decomposition = sm.tsa.seasonal_decompose(data.Passengers, model='multiplicative') # multiplicative seasonal index\nfig = decomposition.plot()\nplt.show()","48cd0982":"train_len = 120\ntrain = data[0:train_len] # first 120 months as training set\ntest = data[train_len:] # last 24 months as out-of-time test set","a1315965":"y_hat_avg = test.copy()\ny_hat_avg['avg_forecast'] = train['Passengers'].mean()","6d12daae":"plt.figure(figsize=(20,4))\nplt.grid()\nplt.plot(train['Passengers'], label='Train')\nplt.plot(test['Passengers'], label='Test')\nplt.plot(y_hat_avg['avg_forecast'], label='Simple average forecast')\nplt.legend(loc='best')\nplt.title('Simple Average Method')\nplt.show()","14da17a1":"from sklearn.metrics import mean_squared_error\n\nrmse = np.sqrt(mean_squared_error(test['Passengers'], y_hat_avg['avg_forecast'])).round(2)\nmape = np.round(np.mean(np.abs(test['Passengers']-y_hat_avg['avg_forecast'])\/test['Passengers'])*100,2)\n\nresults = pd.DataFrame({'Method':['Simple average method'], 'MAPE': [mape], 'RMSE': [rmse]})\nresults = results[['Method', 'RMSE', 'MAPE']]\nresults","de6b0765":"### Box plot and interquartile range","06d05ec9":"# Time series forecasting","16d8fc27":"## Import time series data: Airline passenger traffic","b467af37":"# Build and evaluate time series forecast","84877606":"## Time series Decomposition","8b59fa41":"### Calculate RMSE and MAPE","345174e2":"### Additive seasonal decomposition","94ad5d1f":"### Linear interpolation","f2e16969":"## Missing value treatment","674f5f32":"### Split time series data into training and test set","30a428ba":"## Import required packages","85089a8f":"### Plot train, test and forecast","4e650d32":"## Outlier detection","bdcd43a5":"### Histogram plot","e414924d":"### Multiplicative seasonal decomposition","651a1e7c":"##  Simple average method","e77c6e6e":"## Plot time series data","8fcdda58":"# Time series analysis"}}