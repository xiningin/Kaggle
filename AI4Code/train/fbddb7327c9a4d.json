{"cell_type":{"3e7413aa":"code","a5950032":"code","583d9f3f":"code","72e7cb2f":"code","e6ad45da":"code","a1d3e116":"code","bd42678f":"code","18950d8d":"code","646360a6":"code","33f6bf9a":"code","625e59e0":"code","c1781ad8":"code","2f9748f4":"code","01395cb0":"code","3353ffe2":"code","7ec1d661":"markdown","87610cf8":"markdown","b5f81d22":"markdown","249073e9":"markdown","de353f7d":"markdown","f0960319":"markdown","d1b69035":"markdown","1b15a8f3":"markdown","bc7a1847":"markdown","e892b16b":"markdown","85139e16":"markdown"},"source":{"3e7413aa":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a5950032":"import pandas as pd\nimport numpy as np\n\nfrom scipy.stats import skew\n\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import r2_score, mean_squared_error\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nplt.style.use(\"ggplot\")\nplt.rcParams['figure.figsize'] = (12,8)\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","583d9f3f":"ad = pd.read_csv(\"\/kaggle\/input\/sales-prediction\/Advertising.csv\")\nad.head()","72e7cb2f":"ad.info()","e6ad45da":"sns.pairplot(ad, x_vars=['TV','radio','newspaper'], y_vars='sales', height = 7, aspect = 0.7)\nplt.show()","a1d3e116":"x = ad[['TV','radio','newspaper']]\ny= ad.sales\n\nlm1 = LinearRegression()\nlm1.fit(x,y)\n\nprint(lm1.intercept_)\nprint(lm1.coef_)","bd42678f":"list(zip(['TV','radio','newspaper'], lm1.coef_))","18950d8d":"sns.set(rc={'figure.figsize':(13,7)})\nsns.heatmap(ad.corr(), annot = True)\nplt.show()","646360a6":"lm2 = LinearRegression().fit(x[['TV','radio']], y)\nlm2_pred = lm2.predict(x[['TV','radio']])\n\nprint(\"R2: \", r2_score(y, lm2_pred))","33f6bf9a":"lm3 = LinearRegression().fit(x, y)\nlm3_pred = lm3.predict(x)\n\nprint(\"R2: \", r2_score(y, lm3_pred))","625e59e0":"x_train, x_test, y_train, y_test = train_test_split(x, y, random_state = 1)\n\nlm4 = LinearRegression().fit(x_train,y_train)\n\nlm4_preds = lm4.predict(x_test)\n\nprint(\"RMSE: \", np.sqrt(mean_squared_error(y_test, lm4_preds)))\n\nprint(\"R2: \", r2_score(y_test, lm4_preds))","c1781ad8":"x_train, x_test, y_train, y_test = train_test_split(x[['TV', 'radio']], y, random_state = 1)\n\nlm5 = LinearRegression().fit(x_train,y_train)\n\nlm5_preds = lm5.predict(x_test)\n\nprint(\"RMSE: \", np.sqrt(mean_squared_error(y_test, lm5_preds)))\n\nprint(\"R2: \", r2_score(y_test, lm5_preds))","2f9748f4":"from yellowbrick.regressor import PredictionError, ResidualsPlot\n\nvisualizer = PredictionError(lm5).fit(x_train, y_train)\nvisualizer.score(x_test, y_test)\nvisualizer.poof()\nplt.show()","01395cb0":"ad['interaction'] = ad['TV'] * ad['radio']\n\nx = ad[['TV','radio','interaction']]\ny = ad.sales\n\nx_train, x_test, y_train, y_test = train_test_split(x, y, random_state = 1)\n\nlm6 = LinearRegression().fit(x_train,y_train)\n\nlm6_preds = lm6.predict(x_test)\n\nprint(\"RMSE: \", np.sqrt(mean_squared_error(y_test, lm6_preds)))\n\nprint(\"R2: \", r2_score(y_test, lm6_preds))","3353ffe2":"visualizer = PredictionError(lm6).fit(x_train, y_train)\nvisualizer.score(x_test, y_test)\nvisualizer.poof()\nplt.show()","7ec1d661":"### Multiple Linear Regression - Estimating Coefficients","87610cf8":"<h2 align=\"center\">Multiple Linear Regression<\/h2>\n\nLinear Regression is a useful tool for predicting a quantitative response.\n\nWe have an input vector $X^T = (X_1, X_2,...,X_p)$, and want to predict a real-valued output $Y$. The linear regression model has the form\n\n<h4 align=\"center\"> $f(x) = \\beta_0 + \\sum_{j=1}^p X_j \\beta_j$. <\/h4>\n\nThe linear model either assumes that the regression function $E(Y|X)$ is linear, or that the linear model is a reasonable approximation.Here the $\\beta_j$'s are unknown parameters or coefficients, and the variables $X_j$ can come from different sources. No matter the source of $X_j$, the model is linear in the parameters.\n\n**Simple Linear Regression**: <h5 align=center>$$Y = \\beta_0 + \\beta_1 X + \\epsilon$$<\/h5>\n\n**Multiple Linear Regression**: <h5 align=center>$$Y = \\beta_0 + \\beta_1 X_1 + \\beta_2 X_2 +...+ \\beta_p X_p + \\epsilon$$ <\/h5>\n<h5 align=center> $$sales = \\beta_0 + \\beta_1 \\times TV + \\beta_2 \\times radio + \\beta_3 \\times newspaper + \\epsilon$$ <\/h5>","b5f81d22":"### Relationship between Features and Response","249073e9":"Thus, after introducing synergy the accuracy of the model increased from 91% to 97% and the RMSE droped to 0.7","de353f7d":"### Load the Data\n\nThe adverstiting dataset captures sales revenue generated with respect to advertisement spends across multiple channles like radio, tv and newspaper.","f0960319":"## Model Evaluation Using Train\/Test Split and Metrics","d1b69035":"**Mean Absolute Error** (MAE) is the mean of the absolute value of the errors: <h5 align=center>$$\\frac{1}{n}\\sum_{i=1}^{n} \\left |y_i - \\hat{y_i} \\right |$$<\/h5>\n**Mean Squared Error** (MSE) is the mean of the squared errors: <h5 align=center>$$\\frac{1}{n}\\sum_{i=1}^{n} (y_i - \\hat{y_i})^2$$<\/h5>\n**Root Mean Squared Error** (RMSE) is the mean of the squared errors: <h5 align=center>$$\\sqrt{\\frac{1}{n}\\sum_{i=1}^{n} (y_i - \\hat{y_i})^2}$$<\/h5>","1b15a8f3":"### Interaction Effect (Synergy)","bc7a1847":"### Importing Libraries","e892b16b":"Let's use train\/test split with RMSE to see whether newspaper should be kept in the model:","85139e16":"## Feature Selection"}}