{"cell_type":{"72ab8589":"code","2226dcdb":"code","99d74d40":"code","70bee6a3":"code","0d6c48e0":"code","382c7e09":"code","a7538c64":"code","982af5c3":"code","9bff3500":"code","f7430f86":"code","3aa49c07":"code","62132bf5":"code","5216286d":"code","c0fdb5e2":"code","ef318719":"code","d2d4ff01":"code","60225eb4":"code","d5bd1d6d":"code","42f591b7":"code","f753ce52":"code","99439a21":"code","954840dc":"code","7b18092b":"code","117cb3cb":"code","1d85782c":"code","d7ecdb10":"code","f9d838cd":"code","eb577842":"code","e62378b5":"code","d41daa7c":"code","9260f739":"code","cea3b39d":"code","023963de":"code","8dd4cc5f":"code","2d41e278":"code","90d70dc5":"code","1fd9ace4":"code","9d8d47f0":"code","7727eeab":"code","7346baf2":"code","d0548a5e":"code","dc6a3b4d":"code","f5cf926a":"code","818ee590":"code","ad912dd4":"code","c118643f":"code","c3de51c2":"code","03e90bef":"code","5b9b4d8f":"code","47839833":"code","16084a83":"code","3f8571c2":"code","8faeb8b3":"code","c2adc049":"code","2137bb59":"code","79ee37f6":"markdown","9ea00aa1":"markdown","3e29eec5":"markdown","22780936":"markdown","e16eac7f":"markdown","3f4f2578":"markdown","d83e9380":"markdown","d52b4e66":"markdown","aa1787e5":"markdown","a21f0cdb":"markdown","75055ea0":"markdown","cb98fc0c":"markdown","8d54f09b":"markdown","2a5f0543":"markdown","5f90bfd7":"markdown","4f05d83c":"markdown","b326e234":"markdown","aa598725":"markdown","fb453b3f":"markdown","9edf95df":"markdown","0c374c93":"markdown","69e2e438":"markdown","9773b8ba":"markdown","d65806cf":"markdown","da49cd2d":"markdown","56b5f8ff":"markdown","2882e635":"markdown","c16bd526":"markdown","ee484648":"markdown","4e1cf350":"markdown","67b49f01":"markdown","a65d7d24":"markdown","361bcfb2":"markdown","daa1a43f":"markdown","d8981f81":"markdown","f1f32d13":"markdown","30de9e4b":"markdown","a631513b":"markdown","ed328b4f":"markdown","aae591ed":"markdown","37b31ca3":"markdown","0bfb7ad9":"markdown","1d037b58":"markdown","5f8f4886":"markdown","0b2d2ac9":"markdown","c5306e4e":"markdown","b0e84dd7":"markdown","18365657":"markdown","070d90e2":"markdown","c30e1799":"markdown","f4bf5ebc":"markdown","111c85c3":"markdown","097c6159":"markdown","bdbf05af":"markdown","e4190e12":"markdown","64cea6f3":"markdown","189a3234":"markdown","45cd3279":"markdown","29a73b45":"markdown","ec2858ab":"markdown","e51b4b34":"markdown","efed031a":"markdown"},"source":{"72ab8589":"# \ud544\uc694\ud55c \ub77c\uc774\ube0c\ub7ec\ub9ac import\n\nimport numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.linear_model import LinearRegression, Ridge\nfrom sklearn.metrics import r2_score\n\nimport tensorflow as tf","2226dcdb":"file_addr='\/kaggle\/input\/height\/height_purged.xlsx'\nheight=pd.read_excel(file_addr)\nheight","99d74d40":"correlation_matrix=height.corr().round(2)\nsns.heatmap(data=correlation_matrix,annot=True,cmap='bwr')","70bee6a3":"# \uc131\ubcc4\uc740 one-hot encoding\uc744 \uc774\uc6a9\ud55c\ub2e4.\n\nheight = pd.get_dummies(height, columns=['sex'])","0d6c48e0":"x=height[['sex_0', 'sex_1', 'father_height','mother_height']]\ny=height['height']\n\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=1)","382c7e09":"lin_reg=LinearRegression()\nlin_reg.fit(x_train,y_train)\n\npred=lin_reg.predict(x_train)\nprint('train \uc815\ud655\ub3c4',r2_score(y_train,pred))\npred=lin_reg.predict(x_test)\nprint('test \uc815\ud655\ub3c4',r2_score(y_test,pred))","a7538c64":"def axe_make(axe, data, columns, regressor):\n    clm = columns\n\n    stack_list = []\n    minus_list = []\n    label_list = []\n    minus_label = []\n    bottom = [0 for _ in range(len(data))]\n\n    if lin_reg.intercept_ < 0:\n        minus_list.append([regressor.intercept_ for _ in range(len(data))])\n        minus_label.append(\"intercept\")\n    else:\n        stack_list.append([regressor.intercept_ for _ in range(len(data))])\n        label_list.append(\"intercept\")\n\n    for i, next_clm in enumerate(clm):\n        if regressor.coef_[i] > 0:\n            stack_list.append(data[next_clm] * regressor.coef_[i])\n            label_list.append(next_clm)\n        else:\n            minus_list.append(data[next_clm] * regressor.coef_[i])\n            minus_label.append(next_clm)\n            bottom = [bottom[j] + x for j, x in enumerate(data[next_clm] * regressor.coef_[i])]\n\n    for i, next_stack in enumerate(stack_list):\n        axe.bar(range(len(data)), next_stack, bottom=bottom, label=label_list[i])\n        for i, val in enumerate(next_stack):\n            bottom[i] += val\n    \n    bottom = [0 for _ in range(len(data))]\n    \n    for i, next_stack in enumerate(minus_list):\n        axe.bar([x + 0.25 for x in range(len(data))], next_stack, bottom=bottom, label=minus_label[i], width=0.25)\n        for i, val in enumerate(next_stack):\n            bottom[i] += val\n\n    axe.scatter(range(len(data)), data['height'], zorder=3)\n    axe.axhline(0, color='red')\n    axe.legend()\n    \n    return axe\n","982af5c3":"fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(12, 5))\nax1 = ax[0]\nax2 = ax[1]\n\nplot_men = height.loc[height[\"sex_0\"] == 1].sample(10)\nplot_women = height.loc[height[\"sex_1\"] == 1].sample(10)\n\n\nax1 = axe_make(ax1, plot_men, ['sex_0', 'sex_1', 'father_height','mother_height'], lin_reg)\nax2 = axe_make(ax2, plot_women, ['sex_0', 'sex_1', 'father_height','mother_height'], lin_reg)\n\n\nax1.set_ylim(0, 190)\nax2.set_ylim(-10, 180)\n\nplt.show()","9bff3500":"y_train_sorted = y_train.sort_values()\nx_train_sorted = x_train.loc[y_train_sorted.index]\nx_train_sorted.reset_index(drop=True, inplace=True)\nx_train_male = x_train_sorted.loc[x_train_sorted[\"sex_0\"] == 1]\nx_train_female = x_train_sorted.loc[x_train_sorted[\"sex_1\"] == 1]\ny_train_male_predicted = lin_reg.predict(x_train_male)\ny_train_female_predicted = lin_reg.predict(x_train_female)\n\ny_test_sorted = y_test.sort_values()\nx_test_sorted = x_test.loc[y_test_sorted.index]\nx_test_sorted.reset_index(drop=True, inplace=True)\nx_test_male = x_test_sorted.loc[x_test_sorted[\"sex_0\"] == 1]\nx_test_female = x_test_sorted.loc[x_test_sorted[\"sex_1\"] == 1]\ny_test_male_predicted = lin_reg.predict(x_test_male)\ny_test_female_predicted = lin_reg.predict(x_test_female)\n\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(12, 5))\nax[0].scatter(x_train_sorted.index, y_train_sorted, label=\"ground_truth\")\nax[0].scatter(x_train_male.index, y_train_male_predicted, label=\"predicted_male\")\nax[0].scatter(x_train_female.index, y_train_female_predicted, label=\"predicted_female\")\n\nax[1].scatter(x_test_sorted.index, y_test_sorted, label=\"ground_truth\")\nax[1].scatter(x_test_male.index, y_test_male_predicted, label=\"predicted_male\")\nax[1].scatter(x_test_female.index, y_test_female_predicted, label=\"predicted_female\")\n\nax[0].legend()\nplt.show()","f7430f86":"lin_reg = Ridge()\nlin_reg.fit(x_train,y_train)\n\npred=lin_reg.predict(x_train)\nprint('train \uc815\ud655\ub3c4',r2_score(y_train,pred))\npred=lin_reg.predict(x_test)\nprint('test \uc815\ud655\ub3c4',r2_score(y_test,pred))","3aa49c07":"fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(12, 5))\nax1 = ax[0]\nax2 = ax[1]\n\nplot_men = height.loc[height[\"sex_0\"] == 1].sample(10)\nplot_women = height.loc[height[\"sex_1\"] == 1].sample(10)\n\n\nax1 = axe_make(ax1, plot_men, ['sex_0', 'sex_1', 'father_height','mother_height'], lin_reg)\nax2 = axe_make(ax2, plot_women, ['sex_0', 'sex_1', 'father_height','mother_height'], lin_reg)\n\n\nax1.set_ylim(0, 190)\nax2.set_ylim(-10, 180)\n\nplt.show()","62132bf5":"y_train_sorted = y_train.sort_values()\nx_train_sorted = x_train.loc[y_train_sorted.index]\nx_train_sorted.reset_index(drop=True, inplace=True)\nx_train_male = x_train_sorted.loc[x_train_sorted[\"sex_0\"] == 1]\nx_train_female = x_train_sorted.loc[x_train_sorted[\"sex_1\"] == 1]\ny_train_male_predicted = lin_reg.predict(x_train_male)\ny_train_female_predicted = lin_reg.predict(x_train_female)\n\ny_test_sorted = y_test.sort_values()\nx_test_sorted = x_test.loc[y_test_sorted.index]\nx_test_sorted.reset_index(drop=True, inplace=True)\nx_test_male = x_test_sorted.loc[x_test_sorted[\"sex_0\"] == 1]\nx_test_female = x_test_sorted.loc[x_test_sorted[\"sex_1\"] == 1]\ny_test_male_predicted = lin_reg.predict(x_test_male)\ny_test_female_predicted = lin_reg.predict(x_test_female)\n\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(12, 5))\nax[0].scatter(x_train_sorted.index, y_train_sorted, label=\"ground_truth\")\nax[0].scatter(x_train_male.index, y_train_male_predicted, label=\"predicted_male\")\nax[0].scatter(x_train_female.index, y_train_female_predicted, label=\"predicted_female\")\n\nax[1].scatter(x_test_sorted.index, y_test_sorted, label=\"ground_truth\")\nax[1].scatter(x_test_male.index, y_test_male_predicted, label=\"predicted_male\")\nax[1].scatter(x_test_female.index, y_test_female_predicted, label=\"predicted_female\")\n\nax[0].legend()\nplt.show()","5216286d":"nn_reg_heri = tf.keras.Sequential([\n                                   tf.keras.layers.Input(shape=(4, )),\n                                   tf.keras.layers.Dense(16, activation=\"relu\"),\n                                   tf.keras.layers.Dense(16, activation=\"relu\"),\n                                   tf.keras.layers.Dense(1),\n])\n\nadamopt = tf.keras.optimizers.Adam(learning_rate=0.001)\nnn_reg_heri.compile(optimizer=adamopt,\n                    loss=tf.keras.losses.log_cosh,\n                    metrics=tf.keras.metrics.mean_squared_error)\n\nnn_reg_heri.fit(x_train, y_train, epochs=1000, validation_data=(x_test, y_test), callbacks=[tf.keras.callbacks.EarlyStopping(patience=10)], verbose=0)\n\npred=nn_reg_heri.predict(tf.convert_to_tensor(x_train))\nprint('train \uc815\ud655\ub3c4',r2_score(y_train,pred))\npred=nn_reg_heri.predict(tf.convert_to_tensor(x_test))\nprint('test \uc815\ud655\ub3c4',r2_score(y_test,pred))","c0fdb5e2":"y_train_sorted = y_train.sort_values()\nx_train_sorted = x_train.loc[y_train_sorted.index]\nx_train_sorted.reset_index(drop=True, inplace=True)\nx_train_male = x_train_sorted.loc[x_train_sorted[\"sex_0\"] == 1]\nx_train_female = x_train_sorted.loc[x_train_sorted[\"sex_1\"] == 1]\ny_train_male_predicted = nn_reg_heri.predict(tf.convert_to_tensor(x_train_male))\ny_train_female_predicted = nn_reg_heri.predict(tf.convert_to_tensor(x_train_female))\n\ny_test_sorted = y_test.sort_values()\nx_test_sorted = x_test.loc[y_test_sorted.index]\nx_test_sorted.reset_index(drop=True, inplace=True)\nx_test_male = x_test_sorted.loc[x_test_sorted[\"sex_0\"] == 1]\nx_test_female = x_test_sorted.loc[x_test_sorted[\"sex_1\"] == 1]\ny_test_male_predicted = nn_reg_heri.predict(tf.convert_to_tensor(x_test_male))\ny_test_female_predicted = nn_reg_heri.predict(tf.convert_to_tensor(x_test_female))\n\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(12, 5))\nax[0].scatter(x_train_sorted.index, y_train_sorted, label=\"ground_truth\")\nax[0].scatter(x_train_male.index, y_train_male_predicted, label=\"predicted_male\")\nax[0].scatter(x_train_female.index, y_train_female_predicted, label=\"predicted_female\")\n\nax[1].scatter(x_test_sorted.index, y_test_sorted, label=\"ground_truth\")\nax[1].scatter(x_test_male.index, y_test_male_predicted, label=\"predicted_male\")\nax[1].scatter(x_test_female.index, y_test_female_predicted, label=\"predicted_female\")\n\nax[0].legend()\nplt.show()","ef318719":"x=height[['sex_0', 'sex_1', 'exercise', 'sleep_time', 'good_food', 'bad_food', 'drug']]\ny=height['height']\n\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=1)","d2d4ff01":"lin_reg=LinearRegression()\nlin_reg.fit(x_train,y_train)\n\npred=lin_reg.predict(x_train)\nprint('train \uc815\ud655\ub3c4',r2_score(y_train,pred))\npred=lin_reg.predict(x_test)\nprint('test \uc815\ud655\ub3c4',r2_score(y_test,pred))","60225eb4":"fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(12, 5))\nax1 = ax[0]\nax2 = ax[1]\n\nplot_men = height.loc[height[\"sex_0\"] == 1].sample(10)\nplot_women = height.loc[height[\"sex_1\"] == 1].sample(10)\n\n\nax1 = axe_make(ax1, plot_men, ['sex_0', 'sex_1', 'exercise', 'sleep_time', 'good_food', 'bad_food', 'drug'], lin_reg)\nax2 = axe_make(ax2, plot_women, ['sex_0', 'sex_1', 'exercise', 'sleep_time', 'good_food', 'bad_food', 'drug'], lin_reg)\n\n\nax1.set_ylim(-10, 190)\nax2.set_ylim(-20, 180)\n\nplt.show()","d5bd1d6d":"y_train_sorted = y_train.sort_values()\nx_train_sorted = x_train.loc[y_train_sorted.index]\nx_train_sorted.reset_index(drop=True, inplace=True)\nx_train_male = x_train_sorted.loc[x_train_sorted[\"sex_0\"] == 1]\nx_train_female = x_train_sorted.loc[x_train_sorted[\"sex_1\"] == 1]\ny_train_male_predicted = lin_reg.predict(x_train_male)\ny_train_female_predicted = lin_reg.predict(x_train_female)\n\ny_test_sorted = y_test.sort_values()\nx_test_sorted = x_test.loc[y_test_sorted.index]\nx_test_sorted.reset_index(drop=True, inplace=True)\nx_test_male = x_test_sorted.loc[x_test_sorted[\"sex_0\"] == 1]\nx_test_female = x_test_sorted.loc[x_test_sorted[\"sex_1\"] == 1]\ny_test_male_predicted = lin_reg.predict(x_test_male)\ny_test_female_predicted = lin_reg.predict(x_test_female)\n\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(12, 5))\nax[0].scatter(x_train_sorted.index, y_train_sorted, label=\"ground_truth\")\nax[0].scatter(x_train_male.index, y_train_male_predicted, label=\"predicted_male\")\nax[0].scatter(x_train_female.index, y_train_female_predicted, label=\"predicted_female\")\n\nax[1].scatter(x_test_sorted.index, y_test_sorted, label=\"ground_truth\")\nax[1].scatter(x_test_male.index, y_test_male_predicted, label=\"predicted_male\")\nax[1].scatter(x_test_female.index, y_test_female_predicted, label=\"predicted_female\")\n\nax[0].legend()\nplt.show()","42f591b7":"lin_reg = Ridge()\nlin_reg.fit(x_train,y_train)\n\npred=lin_reg.predict(x_train)\nprint('train \uc815\ud655\ub3c4',r2_score(y_train,pred))\npred=lin_reg.predict(x_test)\nprint('test \uc815\ud655\ub3c4',r2_score(y_test,pred))","f753ce52":"fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(12, 5))\nax1 = ax[0]\nax2 = ax[1]\n\nplot_men = height.loc[height[\"sex_0\"] == 1].sample(10)\nplot_women = height.loc[height[\"sex_1\"] == 1].sample(10)\n\n\nax1 = axe_make(ax1, plot_men, ['sex_0', 'sex_1', 'exercise', 'sleep_time', 'good_food', 'bad_food', 'drug'], lin_reg)\nax2 = axe_make(ax2, plot_women, ['sex_0', 'sex_1', 'exercise', 'sleep_time', 'good_food', 'bad_food', 'drug'], lin_reg)\n\n\nax1.set_ylim(-10, 190)\nax2.set_ylim(-20, 180)\n\nplt.show()","99439a21":"y_train_sorted = y_train.sort_values()\nx_train_sorted = x_train.loc[y_train_sorted.index]\nx_train_sorted.reset_index(drop=True, inplace=True)\nx_train_male = x_train_sorted.loc[x_train_sorted[\"sex_0\"] == 1]\nx_train_female = x_train_sorted.loc[x_train_sorted[\"sex_1\"] == 1]\ny_train_male_predicted = lin_reg.predict(x_train_male)\ny_train_female_predicted = lin_reg.predict(x_train_female)\n\ny_test_sorted = y_test.sort_values()\nx_test_sorted = x_test.loc[y_test_sorted.index]\nx_test_sorted.reset_index(drop=True, inplace=True)\nx_test_male = x_test_sorted.loc[x_test_sorted[\"sex_0\"] == 1]\nx_test_female = x_test_sorted.loc[x_test_sorted[\"sex_1\"] == 1]\ny_test_male_predicted = lin_reg.predict(x_test_male)\ny_test_female_predicted = lin_reg.predict(x_test_female)\n\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(12, 5))\nax[0].scatter(x_train_sorted.index, y_train_sorted, label=\"ground_truth\")\nax[0].scatter(x_train_male.index, y_train_male_predicted, label=\"predicted_male\")\nax[0].scatter(x_train_female.index, y_train_female_predicted, label=\"predicted_female\")\n\nax[1].scatter(x_test_sorted.index, y_test_sorted, label=\"ground_truth\")\nax[1].scatter(x_test_male.index, y_test_male_predicted, label=\"predicted_male\")\nax[1].scatter(x_test_female.index, y_test_female_predicted, label=\"predicted_female\")\n\nax[0].legend()\nplt.show()","954840dc":"nn_reg_envr = tf.keras.Sequential([\n                                   tf.keras.layers.Input(shape=(7, )),\n                                   tf.keras.layers.Dense(16, activation=\"relu\"),\n                                   tf.keras.layers.Dense(16, activation=\"relu\"),\n                                   # tf.keras.layers.Dense(4, activation=\"relu\"),\n                                   tf.keras.layers.Dense(1),\n])\n\nadamopt = tf.keras.optimizers.Adam(learning_rate=0.001)\nnn_reg_envr.compile(optimizer=adamopt,\n                    loss=tf.keras.losses.log_cosh,\n                    metrics=tf.keras.metrics.mean_squared_error)\n\nnn_reg_envr.fit(x_train, y_train, epochs=1000, validation_data=(x_test, y_test), callbacks=[tf.keras.callbacks.EarlyStopping(patience=10)], verbose=0)","7b18092b":"pred=nn_reg_envr.predict(tf.convert_to_tensor(x_train))\nprint('train \uc815\ud655\ub3c4',r2_score(y_train,pred))\npred=nn_reg_envr.predict(tf.convert_to_tensor(x_test))\nprint('test \uc815\ud655\ub3c4',r2_score(y_test,pred))","117cb3cb":"y_train_sorted = y_train.sort_values()\nx_train_sorted = x_train.loc[y_train_sorted.index]\nx_train_sorted.reset_index(drop=True, inplace=True)\nx_train_male = x_train_sorted.loc[x_train_sorted[\"sex_0\"] == 1]\nx_train_female = x_train_sorted.loc[x_train_sorted[\"sex_1\"] == 1]\ny_train_male_predicted = nn_reg_envr.predict(tf.convert_to_tensor(x_train_male))\ny_train_female_predicted = nn_reg_envr.predict(tf.convert_to_tensor(x_train_female))\n\ny_test_sorted = y_test.sort_values()\nx_test_sorted = x_test.loc[y_test_sorted.index]\nx_test_sorted.reset_index(drop=True, inplace=True)\nx_test_male = x_test_sorted.loc[x_test_sorted[\"sex_0\"] == 1]\nx_test_female = x_test_sorted.loc[x_test_sorted[\"sex_1\"] == 1]\ny_test_male_predicted = nn_reg_envr.predict(tf.convert_to_tensor(x_test_male))\ny_test_female_predicted = nn_reg_envr.predict(tf.convert_to_tensor(x_test_female))\n\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(12, 5))\nax[0].scatter(x_train_sorted.index, y_train_sorted, label=\"ground_truth\")\nax[0].scatter(x_train_male.index, y_train_male_predicted, label=\"predicted_male\")\nax[0].scatter(x_train_female.index, y_train_female_predicted, label=\"predicted_female\")\n\nax[1].scatter(x_test_sorted.index, y_test_sorted, label=\"ground_truth\")\nax[1].scatter(x_test_male.index, y_test_male_predicted, label=\"predicted_male\")\nax[1].scatter(x_test_female.index, y_test_female_predicted, label=\"predicted_female\")\n\nax[0].legend()\nplt.show()","1d85782c":"x=height[['sex_0', 'sex_1', 'exercise', 'bad_food', 'drug']]\ny=height['height']\n\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=1)","d7ecdb10":"lin_reg=LinearRegression()\nlin_reg.fit(x_train,y_train)\n\npred=lin_reg.predict(x_train)\nprint('train \uc815\ud655\ub3c4',r2_score(y_train,pred))\npred=lin_reg.predict(x_test)\nprint('test \uc815\ud655\ub3c4',r2_score(y_test,pred))","f9d838cd":"fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(12, 5))\nax1 = ax[0]\nax2 = ax[1]\n\nplot_men = height.loc[height[\"sex_0\"] == 1].sample(10)\nplot_women = height.loc[height[\"sex_1\"] == 1].sample(10)\n\n\nax1 = axe_make(ax1, plot_men, ['sex_0', 'sex_1', 'exercise', 'bad_food', 'drug'], lin_reg)\nax2 = axe_make(ax2, plot_women, ['sex_0', 'sex_1', 'exercise', 'bad_food', 'drug'], lin_reg)\n\n\nax1.set_ylim(-10, 190)\nax2.set_ylim(-20, 180)\n\nplt.show()","eb577842":"y_train_sorted = y_train.sort_values()\nx_train_sorted = x_train.loc[y_train_sorted.index]\nx_train_sorted.reset_index(drop=True, inplace=True)\nx_train_male = x_train_sorted.loc[x_train_sorted[\"sex_0\"] == 1]\nx_train_female = x_train_sorted.loc[x_train_sorted[\"sex_1\"] == 1]\ny_train_male_predicted = lin_reg.predict(x_train_male)\ny_train_female_predicted = lin_reg.predict(x_train_female)\n\ny_test_sorted = y_test.sort_values()\nx_test_sorted = x_test.loc[y_test_sorted.index]\nx_test_sorted.reset_index(drop=True, inplace=True)\nx_test_male = x_test_sorted.loc[x_test_sorted[\"sex_0\"] == 1]\nx_test_female = x_test_sorted.loc[x_test_sorted[\"sex_1\"] == 1]\ny_test_male_predicted = lin_reg.predict(x_test_male)\ny_test_female_predicted = lin_reg.predict(x_test_female)\n\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(12, 5))\nax[0].scatter(x_train_sorted.index, y_train_sorted, label=\"ground_truth\")\nax[0].scatter(x_train_male.index, y_train_male_predicted, label=\"predicted_male\")\nax[0].scatter(x_train_female.index, y_train_female_predicted, label=\"predicted_female\")\n\nax[1].scatter(x_test_sorted.index, y_test_sorted, label=\"ground_truth\")\nax[1].scatter(x_test_male.index, y_test_male_predicted, label=\"predicted_male\")\nax[1].scatter(x_test_female.index, y_test_female_predicted, label=\"predicted_female\")\n\nax[0].legend()\nplt.show()","e62378b5":"lin_reg = Ridge()\nlin_reg.fit(x_train,y_train)\n\npred=lin_reg.predict(x_train)\nprint('train \uc815\ud655\ub3c4',r2_score(y_train,pred))\npred=lin_reg.predict(x_test)\nprint('test \uc815\ud655\ub3c4',r2_score(y_test,pred))","d41daa7c":"fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(12, 5))\nax1 = ax[0]\nax2 = ax[1]\n\nplot_men = height.loc[height[\"sex_0\"] == 1].sample(10)\nplot_women = height.loc[height[\"sex_1\"] == 1].sample(10)\n\n\nax1 = axe_make(ax1, plot_men, ['sex_0', 'sex_1', 'exercise', 'bad_food', 'drug'], lin_reg)\nax2 = axe_make(ax2, plot_women, ['sex_0', 'sex_1', 'exercise', 'bad_food', 'drug'], lin_reg)\n\n\nax1.set_ylim(-10, 190)\nax2.set_ylim(-20, 180)\n\nplt.show()","9260f739":"y_train_sorted = y_train.sort_values()\nx_train_sorted = x_train.loc[y_train_sorted.index]\nx_train_sorted.reset_index(drop=True, inplace=True)\nx_train_male = x_train_sorted.loc[x_train_sorted[\"sex_0\"] == 1]\nx_train_female = x_train_sorted.loc[x_train_sorted[\"sex_1\"] == 1]\ny_train_male_predicted = lin_reg.predict(x_train_male)\ny_train_female_predicted = lin_reg.predict(x_train_female)\n\ny_test_sorted = y_test.sort_values()\nx_test_sorted = x_test.loc[y_test_sorted.index]\nx_test_sorted.reset_index(drop=True, inplace=True)\nx_test_male = x_test_sorted.loc[x_test_sorted[\"sex_0\"] == 1]\nx_test_female = x_test_sorted.loc[x_test_sorted[\"sex_1\"] == 1]\ny_test_male_predicted = lin_reg.predict(x_test_male)\ny_test_female_predicted = lin_reg.predict(x_test_female)\n\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(12, 5))\nax[0].scatter(x_train_sorted.index, y_train_sorted, label=\"ground_truth\")\nax[0].scatter(x_train_male.index, y_train_male_predicted, label=\"predicted_male\")\nax[0].scatter(x_train_female.index, y_train_female_predicted, label=\"predicted_female\")\n\nax[1].scatter(x_test_sorted.index, y_test_sorted, label=\"ground_truth\")\nax[1].scatter(x_test_male.index, y_test_male_predicted, label=\"predicted_male\")\nax[1].scatter(x_test_female.index, y_test_female_predicted, label=\"predicted_female\")\n\nax[0].legend()\nplt.show()","cea3b39d":"nn_reg_envr_purged = tf.keras.Sequential([\n                                   tf.keras.layers.Input(shape=(5, )),\n                                   tf.keras.layers.Dense(16, activation=\"relu\"),\n                                   tf.keras.layers.Dense(16, activation=\"relu\"),\n                                   # tf.keras.layers.Dense(4, activation=\"relu\"),\n                                   tf.keras.layers.Dense(1),\n])\n\nadamopt = tf.keras.optimizers.Adam(learning_rate=0.001)\nnn_reg_envr_purged.compile(optimizer=adamopt,\n                    loss=tf.keras.losses.log_cosh,\n                    metrics=tf.keras.metrics.mean_squared_error)\n\nnn_reg_envr_purged.fit(x_train, y_train, epochs=1000, validation_data=(x_test, y_test), callbacks=[tf.keras.callbacks.EarlyStopping(patience=10)], verbose=0)","023963de":"pred=nn_reg_envr_purged.predict(tf.convert_to_tensor(x_train))\nprint('train \uc815\ud655\ub3c4',r2_score(y_train,pred))\npred=nn_reg_envr_purged.predict(tf.convert_to_tensor(x_test))\nprint('test \uc815\ud655\ub3c4',r2_score(y_test,pred))","8dd4cc5f":"y_train_sorted = y_train.sort_values()\nx_train_sorted = x_train.loc[y_train_sorted.index]\nx_train_sorted.reset_index(drop=True, inplace=True)\nx_train_male = x_train_sorted.loc[x_train_sorted[\"sex_0\"] == 1]\nx_train_female = x_train_sorted.loc[x_train_sorted[\"sex_1\"] == 1]\ny_train_male_predicted = nn_reg_envr_purged.predict(tf.convert_to_tensor(x_train_male))\ny_train_female_predicted = nn_reg_envr_purged.predict(tf.convert_to_tensor(x_train_female))\n\ny_test_sorted = y_test.sort_values()\nx_test_sorted = x_test.loc[y_test_sorted.index]\nx_test_sorted.reset_index(drop=True, inplace=True)\nx_test_male = x_test_sorted.loc[x_test_sorted[\"sex_0\"] == 1]\nx_test_female = x_test_sorted.loc[x_test_sorted[\"sex_1\"] == 1]\ny_test_male_predicted = nn_reg_envr_purged.predict(tf.convert_to_tensor(x_test_male))\ny_test_female_predicted = nn_reg_envr_purged.predict(tf.convert_to_tensor(x_test_female))\n\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(12, 5))\nax[0].scatter(x_train_sorted.index, y_train_sorted, label=\"ground_truth\")\nax[0].scatter(x_train_male.index, y_train_male_predicted, label=\"predicted_male\")\nax[0].scatter(x_train_female.index, y_train_female_predicted, label=\"predicted_female\")\n\nax[1].scatter(x_test_sorted.index, y_test_sorted, label=\"ground_truth\")\nax[1].scatter(x_test_male.index, y_test_male_predicted, label=\"predicted_male\")\nax[1].scatter(x_test_female.index, y_test_female_predicted, label=\"predicted_female\")\n\nax[0].legend()\nplt.show()","2d41e278":"x=height[['sex_0', 'sex_1', 'father_height', 'mother_height', 'exercise', 'sleep_time', 'good_food', 'bad_food', 'drug']]\ny=height['height']\n\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=1)","90d70dc5":"lin_reg=LinearRegression()\nlin_reg.fit(x_train,y_train)\n\npred=lin_reg.predict(x_train)\nprint('train \uc815\ud655\ub3c4',r2_score(y_train,pred))\npred=lin_reg.predict(x_test)\nprint('test \uc815\ud655\ub3c4',r2_score(y_test,pred))","1fd9ace4":"fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(12, 10))\nax1 = ax[0]\nax2 = ax[1]\n\nplot_men = height.loc[height[\"sex_0\"] == 1].sample(10)\nplot_women = height.loc[height[\"sex_1\"] == 1].sample(10)\n\n\nax1 = axe_make(ax1, plot_men, ['sex_0', 'sex_1', 'father_height', 'mother_height', 'exercise', 'sleep_time', 'good_food', 'bad_food', 'drug'], lin_reg)\nax2 = axe_make(ax2, plot_women, ['sex_0', 'sex_1', 'father_height', 'mother_height', 'exercise', 'sleep_time', 'good_food', 'bad_food', 'drug'], lin_reg)\n\n\nax1.set_ylim(-10, 190)\nax2.set_ylim(-20, 180)\n\nplt.show()","9d8d47f0":"y_train_sorted = y_train.sort_values()\nx_train_sorted = x_train.loc[y_train_sorted.index]\nx_train_sorted.reset_index(drop=True, inplace=True)\nx_train_male = x_train_sorted.loc[x_train_sorted[\"sex_0\"] == 1]\nx_train_female = x_train_sorted.loc[x_train_sorted[\"sex_1\"] == 1]\ny_train_male_predicted = lin_reg.predict(x_train_male)\ny_train_female_predicted = lin_reg.predict(x_train_female)\n\ny_test_sorted = y_test.sort_values()\nx_test_sorted = x_test.loc[y_test_sorted.index]\nx_test_sorted.reset_index(drop=True, inplace=True)\nx_test_male = x_test_sorted.loc[x_test_sorted[\"sex_0\"] == 1]\nx_test_female = x_test_sorted.loc[x_test_sorted[\"sex_1\"] == 1]\ny_test_male_predicted = lin_reg.predict(x_test_male)\ny_test_female_predicted = lin_reg.predict(x_test_female)\n\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(12, 5))\nax[0].scatter(x_train_sorted.index, y_train_sorted, label=\"ground_truth\")\nax[0].scatter(x_train_male.index, y_train_male_predicted, label=\"predicted_male\")\nax[0].scatter(x_train_female.index, y_train_female_predicted, label=\"predicted_female\")\n\nax[1].scatter(x_test_sorted.index, y_test_sorted, label=\"ground_truth\")\nax[1].scatter(x_test_male.index, y_test_male_predicted, label=\"predicted_male\")\nax[1].scatter(x_test_female.index, y_test_female_predicted, label=\"predicted_female\")\n\nax[0].legend()\nplt.show()","7727eeab":"from sklearn.linear_model import Ridge\nfrom sklearn.metrics import r2_score\nlin_reg = Ridge()\nlin_reg.fit(x_train,y_train)\n\npred=lin_reg.predict(x_train)\nprint('train \uc815\ud655\ub3c4',r2_score(y_train,pred))\npred=lin_reg.predict(x_test)\nprint('test \uc815\ud655\ub3c4',r2_score(y_test,pred))","7346baf2":"fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(12, 10))\nax1 = ax[0]\nax2 = ax[1]\n\nplot_men = height.loc[height[\"sex_0\"] == 1].sample(10)\nplot_women = height.loc[height[\"sex_1\"] == 1].sample(10)\n\n\nax1 = axe_make(ax1, plot_men, ['sex_0', 'sex_1', 'father_height', 'mother_height', 'exercise', 'sleep_time', 'good_food', 'bad_food', 'drug'], lin_reg)\nax2 = axe_make(ax2, plot_women, ['sex_0', 'sex_1', 'father_height', 'mother_height', 'exercise', 'sleep_time', 'good_food', 'bad_food', 'drug'], lin_reg)\n\n\nax1.set_ylim(-10, 190)\nax2.set_ylim(-20, 180)\n\nplt.show()","d0548a5e":"y_train_sorted = y_train.sort_values()\nx_train_sorted = x_train.loc[y_train_sorted.index]\nx_train_sorted.reset_index(drop=True, inplace=True)\nx_train_male = x_train_sorted.loc[x_train_sorted[\"sex_0\"] == 1]\nx_train_female = x_train_sorted.loc[x_train_sorted[\"sex_1\"] == 1]\ny_train_male_predicted = lin_reg.predict(x_train_male)\ny_train_female_predicted = lin_reg.predict(x_train_female)\n\ny_test_sorted = y_test.sort_values()\nx_test_sorted = x_test.loc[y_test_sorted.index]\nx_test_sorted.reset_index(drop=True, inplace=True)\nx_test_male = x_test_sorted.loc[x_test_sorted[\"sex_0\"] == 1]\nx_test_female = x_test_sorted.loc[x_test_sorted[\"sex_1\"] == 1]\ny_test_male_predicted = lin_reg.predict(x_test_male)\ny_test_female_predicted = lin_reg.predict(x_test_female)\n\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(12, 5))\nax[0].scatter(x_train_sorted.index, y_train_sorted, label=\"ground_truth\")\nax[0].scatter(x_train_male.index, y_train_male_predicted, label=\"predicted_male\")\nax[0].scatter(x_train_female.index, y_train_female_predicted, label=\"predicted_female\")\n\nax[1].scatter(x_test_sorted.index, y_test_sorted, label=\"ground_truth\")\nax[1].scatter(x_test_male.index, y_test_male_predicted, label=\"predicted_male\")\nax[1].scatter(x_test_female.index, y_test_female_predicted, label=\"predicted_female\")\n\nax[0].legend()\nplt.show()","dc6a3b4d":"nn_reg_both = tf.keras.Sequential([\n                                   tf.keras.layers.Input(shape=(9, )),\n                                   tf.keras.layers.Dense(32, activation=\"relu\"),\n                                   tf.keras.layers.Dense(16, activation=\"relu\"),\n                                   tf.keras.layers.Dense(1),\n])\n\nadamopt = tf.keras.optimizers.Adam(learning_rate=0.001)\nnn_reg_both.compile(optimizer=adamopt,\n                    loss=tf.keras.losses.log_cosh,\n                    metrics=tf.keras.metrics.mean_squared_error)\n\nnn_reg_both.fit(x_train, y_train, epochs=1000, validation_data=(x_test, y_test), callbacks=[tf.keras.callbacks.EarlyStopping(patience=20)], verbose=0)\n\npred=nn_reg_both.predict(tf.convert_to_tensor(x_train))\nprint('train \uc815\ud655\ub3c4',r2_score(y_train,pred))\npred=nn_reg_both.predict(tf.convert_to_tensor(x_test))\nprint('test \uc815\ud655\ub3c4',r2_score(y_test,pred))","f5cf926a":"y_train_sorted = y_train.sort_values()\nx_train_sorted = x_train.loc[y_train_sorted.index]\nx_train_sorted.reset_index(drop=True, inplace=True)\nx_train_male = x_train_sorted.loc[x_train_sorted[\"sex_0\"] == 1]\nx_train_female = x_train_sorted.loc[x_train_sorted[\"sex_1\"] == 1]\ny_train_male_predicted = nn_reg_both.predict(tf.convert_to_tensor(x_train_male))\ny_train_female_predicted = nn_reg_both.predict(tf.convert_to_tensor(x_train_female))\n\ny_test_sorted = y_test.sort_values()\nx_test_sorted = x_test.loc[y_test_sorted.index]\nx_test_sorted.reset_index(drop=True, inplace=True)\nx_test_male = x_test_sorted.loc[x_test_sorted[\"sex_0\"] == 1]\nx_test_female = x_test_sorted.loc[x_test_sorted[\"sex_1\"] == 1]\ny_test_male_predicted = nn_reg_both.predict(tf.convert_to_tensor(x_test_male))\ny_test_female_predicted = nn_reg_both.predict(tf.convert_to_tensor(x_test_female))\n\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(12, 5))\nax[0].scatter(x_train_sorted.index, y_train_sorted, label=\"ground_truth\")\nax[0].scatter(x_train_male.index, y_train_male_predicted, label=\"predicted_male\")\nax[0].scatter(x_train_female.index, y_train_female_predicted, label=\"predicted_female\")\n\nax[1].scatter(x_test_sorted.index, y_test_sorted, label=\"ground_truth\")\nax[1].scatter(x_test_male.index, y_test_male_predicted, label=\"predicted_male\")\nax[1].scatter(x_test_female.index, y_test_female_predicted, label=\"predicted_female\")\n\nax[0].legend()\nplt.show()","818ee590":"x=height[['sex_0', 'sex_1', 'father_height', 'mother_height', 'exercise', 'bad_food', 'drug']]\ny=height['height']\n\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=1)","ad912dd4":"lin_reg=LinearRegression()\nlin_reg.fit(x_train,y_train)\n\npred=lin_reg.predict(x_train)\nprint('train \uc815\ud655\ub3c4',r2_score(y_train,pred))\npred=lin_reg.predict(x_test)\nprint('test \uc815\ud655\ub3c4',r2_score(y_test,pred))","c118643f":"fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(12, 10))\nax1 = ax[0]\nax2 = ax[1]\n\nplot_men = height.loc[height[\"sex_0\"] == 1].sample(10)\nplot_women = height.loc[height[\"sex_1\"] == 1].sample(10)\n\n\nax1 = axe_make(ax1, plot_men, ['sex_0', 'sex_1', 'father_height', 'mother_height', 'exercise', 'bad_food', 'drug'], lin_reg)\nax2 = axe_make(ax2, plot_women, ['sex_0', 'sex_1', 'father_height', 'mother_height', 'exercise', 'bad_food', 'drug'], lin_reg)\n\n\nax1.set_ylim(-10, 190)\nax2.set_ylim(-20, 180)\n\nplt.show()","c3de51c2":"y_train_sorted = y_train.sort_values()\nx_train_sorted = x_train.loc[y_train_sorted.index]\nx_train_sorted.reset_index(drop=True, inplace=True)\nx_train_male = x_train_sorted.loc[x_train_sorted[\"sex_0\"] == 1]\nx_train_female = x_train_sorted.loc[x_train_sorted[\"sex_1\"] == 1]\ny_train_male_predicted = lin_reg.predict(x_train_male)\ny_train_female_predicted = lin_reg.predict(x_train_female)\n\ny_test_sorted = y_test.sort_values()\nx_test_sorted = x_test.loc[y_test_sorted.index]\nx_test_sorted.reset_index(drop=True, inplace=True)\nx_test_male = x_test_sorted.loc[x_test_sorted[\"sex_0\"] == 1]\nx_test_female = x_test_sorted.loc[x_test_sorted[\"sex_1\"] == 1]\ny_test_male_predicted = lin_reg.predict(x_test_male)\ny_test_female_predicted = lin_reg.predict(x_test_female)\n\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(12, 5))\nax[0].scatter(x_train_sorted.index, y_train_sorted, label=\"ground_truth\")\nax[0].scatter(x_train_male.index, y_train_male_predicted, label=\"predicted_male\")\nax[0].scatter(x_train_female.index, y_train_female_predicted, label=\"predicted_female\")\n\nax[1].scatter(x_test_sorted.index, y_test_sorted, label=\"ground_truth\")\nax[1].scatter(x_test_male.index, y_test_male_predicted, label=\"predicted_male\")\nax[1].scatter(x_test_female.index, y_test_female_predicted, label=\"predicted_female\")\n\nax[0].legend()\nplt.show()","03e90bef":"lin_reg = Ridge()\nlin_reg.fit(x_train,y_train)\n\npred=lin_reg.predict(x_train)\nprint('train \uc815\ud655\ub3c4',r2_score(y_train,pred))\npred=lin_reg.predict(x_test)\nprint('test \uc815\ud655\ub3c4',r2_score(y_test,pred))","5b9b4d8f":"fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(12, 10))\nax1 = ax[0]\nax2 = ax[1]\n\nplot_men = height.loc[height[\"sex_0\"] == 1].sample(10)\nplot_women = height.loc[height[\"sex_1\"] == 1].sample(10)\n\n\nax1 = axe_make(ax1, plot_men, ['sex_0', 'sex_1', 'father_height', 'mother_height', 'exercise', 'bad_food', 'drug'], lin_reg)\nax2 = axe_make(ax2, plot_women, ['sex_0', 'sex_1', 'father_height', 'mother_height', 'exercise', 'bad_food', 'drug'], lin_reg)\n\n\nax1.set_ylim(-10, 190)\nax2.set_ylim(-20, 180)\n\nplt.show()","47839833":"y_train_sorted = y_train.sort_values()\nx_train_sorted = x_train.loc[y_train_sorted.index]\nx_train_sorted.reset_index(drop=True, inplace=True)\nx_train_male = x_train_sorted.loc[x_train_sorted[\"sex_0\"] == 1]\nx_train_female = x_train_sorted.loc[x_train_sorted[\"sex_1\"] == 1]\ny_train_male_predicted = lin_reg.predict(x_train_male)\ny_train_female_predicted = lin_reg.predict(x_train_female)\n\ny_test_sorted = y_test.sort_values()\nx_test_sorted = x_test.loc[y_test_sorted.index]\nx_test_sorted.reset_index(drop=True, inplace=True)\nx_test_male = x_test_sorted.loc[x_test_sorted[\"sex_0\"] == 1]\nx_test_female = x_test_sorted.loc[x_test_sorted[\"sex_1\"] == 1]\ny_test_male_predicted = lin_reg.predict(x_test_male)\ny_test_female_predicted = lin_reg.predict(x_test_female)\n\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(12, 5))\nax[0].scatter(x_train_sorted.index, y_train_sorted, label=\"ground_truth\")\nax[0].scatter(x_train_male.index, y_train_male_predicted, label=\"predicted_male\")\nax[0].scatter(x_train_female.index, y_train_female_predicted, label=\"predicted_female\")\n\nax[1].scatter(x_test_sorted.index, y_test_sorted, label=\"ground_truth\")\nax[1].scatter(x_test_male.index, y_test_male_predicted, label=\"predicted_male\")\nax[1].scatter(x_test_female.index, y_test_female_predicted, label=\"predicted_female\")\n\nax[0].legend()\nplt.show()","16084a83":"nn_reg_both = tf.keras.Sequential([\n                                   tf.keras.layers.Input(shape=(7, )),\n                                   tf.keras.layers.Dense(32, activation=\"relu\"),\n                                   tf.keras.layers.Dense(16, activation=\"relu\"),\n                                   tf.keras.layers.Dense(1),\n])\n\nadamopt = tf.keras.optimizers.Adam(learning_rate=0.001)\nnn_reg_both.compile(optimizer=adamopt,\n                    loss=tf.keras.losses.log_cosh,\n                    metrics=tf.keras.metrics.mean_squared_error)\n\nnn_reg_both.fit(x_train, y_train, epochs=1000, validation_data=(x_test, y_test), callbacks=[tf.keras.callbacks.EarlyStopping(patience=20)], verbose=0)\n\npred=nn_reg_both.predict(tf.convert_to_tensor(x_train))\nprint('train \uc815\ud655\ub3c4',r2_score(y_train,pred))\npred=nn_reg_both.predict(tf.convert_to_tensor(x_test))\nprint('test \uc815\ud655\ub3c4',r2_score(y_test,pred))","3f8571c2":"y_train_sorted = y_train.sort_values()\nx_train_sorted = x_train.loc[y_train_sorted.index]\nx_train_sorted.reset_index(drop=True, inplace=True)\nx_train_male = x_train_sorted.loc[x_train_sorted[\"sex_0\"] == 1]\nx_train_female = x_train_sorted.loc[x_train_sorted[\"sex_1\"] == 1]\ny_train_male_predicted = lin_reg.predict(x_train_male)\ny_train_female_predicted = lin_reg.predict(x_train_female)\n\ny_test_sorted = y_test.sort_values()\nx_test_sorted = x_test.loc[y_test_sorted.index]\nx_test_sorted.reset_index(drop=True, inplace=True)\nx_test_male = x_test_sorted.loc[x_test_sorted[\"sex_0\"] == 1]\nx_test_female = x_test_sorted.loc[x_test_sorted[\"sex_1\"] == 1]\ny_test_male_predicted = lin_reg.predict(x_test_male)\ny_test_female_predicted = lin_reg.predict(x_test_female)\n\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(12, 5))\nax[0].scatter(x_train_sorted.index, y_train_sorted, label=\"ground_truth\")\nax[0].scatter(x_train_male.index, y_train_male_predicted, label=\"predicted_male\")\nax[0].scatter(x_train_female.index, y_train_female_predicted, label=\"predicted_female\")\n\nax[1].scatter(x_test_sorted.index, y_test_sorted, label=\"ground_truth\")\nax[1].scatter(x_test_male.index, y_test_male_predicted, label=\"predicted_male\")\nax[1].scatter(x_test_female.index, y_test_female_predicted, label=\"predicted_female\")\n\nax[0].legend()\nplt.show()","8faeb8b3":"height_male = height[height['sex_0']==1]\nheight_female = height[height['sex_1'] == 1]","c2adc049":"correlation_matrix=height_male.corr().round(2)\nsns.heatmap(data=correlation_matrix,annot=True,cmap='bwr')","2137bb59":"correlation_matrix=height_female.corr().round(2)\nsns.heatmap(data=correlation_matrix,annot=True,cmap='bwr')","79ee37f6":"# Conclusion\n\n\ud0a4\ub294 \uc720\uc804\uacfc \uac00\uc7a5 \ud070 \uc601\ud5a5\uc744 \ubc1b\ub294\ub2e4\ub294 \uac83\uc744 \uc54c \uc218 \uc788\uc5c8\ub2e4. \uadf8\ub9ac\uace0 \ud658\uacbd\uc801\uc778 \uc694\uc778\uc5d0\uc11c\ub294 \uc6b4\ub3d9\uc5d0 \uc601\ud5a5\uc744 \ub9ce\uc774 \ubc1b\ub294\ub2e4\ub294 \uac83\uc744 \uc54c \uc218 \uc788\uc5c8\ub2e4. \uc57d \ubcf5\uc6a9\ub7c9\uacfc \ud0a4\ub294 \uc74c\uc758 \uc0c1\uad00\uad00\uacc4\ub97c \ubcf4\uc774\ub294\ub370 \uc544\ub9c8\ub3c4 \uc2a4\ud2b8\ub808\uc2a4\uc758 \uc601\ud5a5\uc774 \uc788\uac70\ub098, \ud0a4\uac00 \uc798 \ud06c\uc9c0 \uc54a\ub294 \uc544\uc774\uc77c\uc218\ub85d \ub354 \uc57d\uc744 \ub9ce\uc774 \uba39\uae30 \ub54c\ubb38\uc774 \uc544\ub2d0\uae4c \uc0dd\uac01\ud574\ubcfc \uc218 \uc788\uc5c8\ub2e4. \ub610\ud55c \uc218\uba74 \uc2dc\uac04\uc774\ub098 \uc6b0\uc720 \ub4f1 \ud0a4\ud06c\ub294 \uc74c\uc2dd\uc740 \ud0a4\uc758 \ubcc4\ub85c \uc601\ud5a5\uc744 \ubbf8\uce58\uc9c0 \uc54a\uc73c\uba70 \ud584\ubc84\uac70\ub098 \ud0c4\uc0b0\uc74c\ub8cc \ub4f1 \ud0a4\uac00 \uc548 \ud06c\uac8c \ud55c\ub2e4\ub294 \uc74c\uc2dd\uc774 \uc624\ud788\ub824 \ud0a4 \ud06c\ub294\ub370 \uc870\uae08 \ub354 \uc0c1\uad00\uad00\uacc4\uac00 \uc788\ub294 \uac83\uc744 \uc54c \uc218 \uc788\uc5c8\ub2e4. \uc6b0\ub9ac\ub294 linear regression\uacfc NN\ub4f1\uc744 \uc0ac\uc6a9\ud558\uc5ec 75%\uac00\ub7c9\uc758 \uc815\ud655\ub3c4\ub97c \uc5bb\uc744 \uc218 \uc788\uc5c8\ub2e4.","9ea00aa1":"#### \uae30\uc5ec\ub3c4 \uadf8\ub798\ud504","3e29eec5":"### Neural Network","22780936":"### Ridge\n\n\uc720\uc804\uc694\uc778\uc744 \uae30\ubc18\uc73c\ub85c \ud559\uc2b5\ud55c \uacb0\uacfc \uc815\ud655\ub3c4\uac00 \ucda9\ubd84\ud788 \ub192\uc9c0 \uc54a\ub2e4\uace0 \ud310\ub2e8\ud558\uc600\uace0, \uadf8 \uc774\uc720\uac00 \ub370\uc774\ud130\uc14b\uc774 \ucda9\ubd84\ud788 \ub9ce\uc9c0 \uc54a\uae30 \ub54c\ubb38\uc5d0 regression line\uc774 overfitting \ub418\uc5c8\uc744 \uac00\ub2a5\uc131\uc5d0 \ub300\ud574 \uc0dd\uac01\ud574\ubcf4\uac8c \ub418\uc5c8\ub2e4. \ub530\ub77c\uc11c l2-norm\uc5d0 \uc758\ud574 regularization \ud558\ub294 linear regression\ubaa8\ub378\uc778 Ridge()\ub97c \uc0ac\uc6a9\ud574 \ud559\uc2b5\ud574\ubcf4\uc558\ub2e4.","e16eac7f":"### Ridge","3f4f2578":"# Methodlogy\n\n* correlation matrix\n    * \ubcc0\uc218 \uac04\uc758 \uc0c1\uad00\uacc4\uc218\ub97c \uacc4\uc0b0\ud574 \ud589\ub82c\ub85c \ub098\ud0c0\ub0b8 \uac83\uc774\ub2e4. \uc22b\uc790\ub85c \ud45c\ud604\ub41c \uac12\uc5d0 \ub300\ud574\uc11c\ub9cc -1 ~ 1 \uc0ac\uc774\uc758 \uac12\uc73c\ub85c \ud45c\ud604\ub418\uba70, \ubcf4\ud1b5 \uadf8 \ud06c\uae30\uac00 0.7 \uc774\uc0c1\uc778 \uacbd\uc6b0 \uc0c1\uad00\uad00\uacc4\uac00 \ud06c\ub2e4\uace0 \ud560 \uc218 \uc788\ub2e4. \uadf8\ub7ec\ub098\uc0c1\uad00\uad00\uacc4\uac00 \uc778\uacfc\uad00\uacc4\ub97c \uc758\ubbf8\ud558\uc9c0\ub294 \uc54a\ub294\ub2e4\ub294 \uac83\uc740 \uc8fc\uc758\ud574\uc57c \ud55c\ub2e4. \uc5b4\ub5a0\ud55c \ubcc0\uc218\uc5d0 \ub300\ud574 \uc720\uc0ac\ud55c \uacbd\ud5a5 \ud639\uc740 \ubc18\ub300\ub418\ub294 \uacbd\ud5a5\uc73c\ub85c \uc99d\uac00\/\uac10\uc18c \ud568\uc744 \uc758\ubbf8\ud560 \ubfd0 \uc5b4\ub5a0\ud55c \ubcc0\uc218\uc5d0 \uc758\ud574 \ub2e4\ub978 \ubcc0\uc218\uac00 \uacb0\uc815\ub41c\ub2e4\uace0 \ud574\uc11d\ud560 \uc218\ub294 \uc5c6\ub2e4.\n    \n    \n* Linear Regression\n    * \uac00\uc7a5 \uae30\ubcf8\uc801\uc73c\ub85c \uc0ac\uc6a9\ud558\ub294 \uc54c\uace0\ub9ac\uc998 \uc911\uc5d0 \ud558\ub098\uc774\ub2e4. \uc785\ub825 \ubcc0\uc218\ub4e4\uacfc \ucd9c\ub825 \ubcc0\uc218\ub294 \uc120\ud615\uc801\uc778 \uad00\uacc4\ub97c \uc774\ub8e8\uba70, \ucd9c\ub825 \ubcc0\uc218\ub294 \uadf8 \ud569\uc73c\ub85c \uacb0\uc815\ub41c\ub2e4. Linear Regression\uc758 \uacb0\uacfc\ub85c \uc5bb\uc744 \uc218 \uc788\ub294 \uc2dd\uc740 \ucd5c\uc18c\uc81c\uacf1\ubc95\uc744 \ud1b5\ud574 \uc624\ucc28\ub97c \ucd5c\uc18c\ud654 \ud560 \uc218 \uc788\ub2e4. \uc774\ub294 \ub370\uc774\ud130\uc640 \uc2dd \uc0ac\uc774\uc758 \uac70\ub9ac\ub97c \uc81c\uacf1\ud55c \uac12\uc744 \uc804\ubd80 \ub354\ud558\uc5ec \ub098\uc628 \uac12\uc744 \ucd5c\uc18c\ud654\ud558\ub294 \uacfc\uc815\uc774\ub2e4.\n    * Scikit learn\uc758 linear_model \uc744 \uc0ac\uc6a9\ud558\uc5ec linear regression\uc744 \uc9c4\ud589\ud560 \uc218 \uc788\ub2e4. \uc218\uc9d1\ud55c train \ub370\uc774\ud130\uc5d0 \ub300\ud574 fit \uba54\uc18c\ub4dc\ub97c \ud1b5\ud574 \uc120\ud615 \ubaa8\ub378\uc744 \ub9cc\ub4e4 \uc218 \uc788\ub2e4. \ub610\ud55c \uc774\uc5d0 test dataset\uc744 \ub123\uc5b4 \uac12\uc744 \uc608\uce21\ud560 \uc218 \uc788\uace0, r2 score \ub4f1\uc758 \ubc29\ubc95\uc744 \ud1b5\ud574 \uc815\ud655\ub3c4\ub97c \uacc4\uc0b0\ud560 \uc218 \uc788\ub2e4.\n    \n    \n* r2 score\n    * R^2\uc774\ub77c\uace0 \ud45c\ud604\ub418\uae30\ub3c4 \ud55c\ub2e4. \uacc4\uc0b0 \ubc29\ubc95\uc740 $$R^2=\\frac{SSR(\\text{\ud68c\uadc0\uc2dd\uacfc \ud3c9\uade0\uac12\uc758  \ucc28\uc774})}{SST(\\text{\ud3b8\ucc28\uc758  \uc81c\uacf1\uc758  \ud569})}$$  \uc774\ub2e4. Regression line\uc73c\ub85c fitting\ud55c \uac12\uc774 \uc2e4\uc81c \uac12\uacfc \uc5bc\ub9c8\ub098 \uac00\uae4c\uc6b4\uc9c0\ub97c \ud310\ub2e8\ud560 \uc218 \uc788\ub294 \uc218\uce58\uc774\ub2e4. 0 ~ 1 \uc0ac\uc774\uc758 \uac12\uc73c\ub85c \ud45c\ud604\ub418\uba70, \ub3c5\ub9bd\ubcc0\uc218\uc5d0 \uc758\ud574 \uc608\uce21\ub41c \uacb0\uacfc\ub4e4\uc758 \ubd84\uc0b0\uacfc \ucc38\uac12\uc758 \ubd84\uc0b0\uc5d0 \ub300\ud55c \ube44\uc728\ub85c \uacc4\uc0b0\ub41c\ub2e4. \uac12\uc774 1\uc5d0 \uac00\uae4c\uc6b8 \uc218\ub85d \uc608\uce21 \uac12\uacfc \uc2e4\uc81c \uac12 \uc0ac\uc774\uc758 \uc624\ucc28\uac00 \uc791\uc74c\uc744 \uc758\ubbf8\ud55c\ub2e4. \uc774 \uac12\uc744 \ud1b5\ud574 regression \ud55c \uac12\uc774 \uc2e0\ub8b0\ud560 \uc218 \uc788\ub294\uc9c0 \ud310\ub2e8\ud55c\ub2e4. \uc808\ub300\uc801\uc73c\ub85c \ubaa8\ub378\uc744 \ud310\ub2e8\ud558\ub294 \uc218\uce58\ub294 \uc544\ub2c8\uc9c0\ub9cc, \uc77c\ubc18\uc801\uc73c\ub85c \ubaa8\ub378\uc774 \uc5bc\ub9c8\ub098 \uc798 fitting \ub418\uc5c8\ub294\uac00\ub97c \ud310\ub2e8\ud558\uae30 \uc704\ud574 \uc4f0\uc774\ub294 \uc218\uce58\uc774\ub2e4.\n    \n    \n* Regularization - Ridge\n    * linear regression\uc758 \uc815\ud655\ub3c4\ub97c \ub192\uc774\uae30 \uc704\ud574 \uc9c4\ud589\ud558\ub294 \uacfc\uc815\uc73c\ub85c, overfitting\ubb38\uc81c\ub97c \ud574\uacb0\ud558\uae30 \uc704\ud574 \uc0ac\uc6a9\ub41c\ub2e4. regression line\uc774 \uacfc\ud558\uac8c \ud559\uc2b5 \ub370\uc774\ud130\uc5d0 fitting\ub418\uc5b4 \ud559\uc2b5\ub370\uc774\ud130\uc5d0\uc11c\ub294 \ub192\uc740 \uc815\ud655\ub3c4\ub97c \ubcf4\uc774\uc9c0\ub9cc \uc0c8\ub85c\uc6b4 \ub370\uc774\ud130\uc5d0 \ub300\ud574\uc11c\ub294 \uc62c\ubc14\ub978 \uac12\uc744 \ub0b4\uc9c0 \ubabb\ud55c\ub2e4\uba74 overfitting \ubb38\uc81c\uc77c \uac00\ub2a5\uc131\uc774 \ud06c\ub2e4. \uadf8\ub798\uc11c \uacfc\uc801\ud569\uc744 \ubc29\uc9c0\ud558\uace0 \ubaa8\ub378\uc774 \uc77c\ubc18\uc801\uc778 \ub370\uc774\ud130\uc5d0 \ub300\ud574\uc11c\ub3c4 \ub4e4\uc5b4\ub9de\ub3c4\ub85d \ud558\uae30 \uc704\ud574 Regularization\uc744 \ud55c\ub2e4. \uc774\ub97c \uc5b4\ub5bb\uac8c \uc9c4\ud589 \ud558\ub294 \uac00\uc5d0 \ub530\ub77c L1\uacfc L2\ub85c \ubd84\ub958\ud558\ub294\ub370, \uc774 \ub54c L2 regularization\uc744 Ridge \ub77c\uace0 \ubd80\ub978\ub2e4. \uae30\uc874 lienar regression\uc758 cost function\uc5d0 L2 \ud56d\uc744 \ucd94\uac00\ud574 \uc0c8\ub85c\uc6b4 cost function\uc744 \uc0ac\uc6a9\ud558\ub294\ub370, \uc774 \uc2dd\uc744 \ubbf8\ubd84\ud558\uc5ec grdient descent\uc5d0 \uc0ac\uc6a9\ud558\uba74 \uc804\uccb4\uc801\uc73c\ub85c \uac01 feature\uc758 \uacc4\uc218\uac00 \uc791\uc544\uc9d1\ub2c8\ub2e4. \ub530\ub77c\uc11c L1\uc5d0 \ube44\ud574 \uc548\uc815\uc801\uc73c\ub85c regularization\uc774 \uac00\ub2a5\ud558\uc9c0\ub9cc regularization \uc815\ub3c4\uac00 L1\uc5d0 \ube44\ud574\uc11c\ub294 \uc791\ub2e4.\n    \n    \n* Optimizer \u2013 Adam\n    * \uc778\uacf5 \uc2e0\uacbd\ub9dd\uc5d0\uc11c weight\ub97c \uc870\uc808\ud558\ub294 \uacfc\uc815\uc5d0\uc11c \uc0ac\uc6a9\ud558\ub294 stochastic Gradient Descent \uc911 \ub450\uac00\uc9c0\uc778 Momentum\uacfc RMSProp\ubc29\uc2dd\uc758 \uc7a5\uc810\uc744 \ud63c\ud569\ud55c optimizer\uc774\ub2e4. Momentum \ubc29\uc2dd\uc758 \uacbd\uc6b0 \ubb38\uc790 \uadf8\ub300\ub85c \uad00\uc131\uc744 \uc8fc\ub294 \ubc29\uc2dd\uc774\ub2e4. \uc989, \uc774\uc804\uc5d0 \uc774\ub3d9\ud55c \ubc29\uc2dd\uc744 \uae30\uc5b5\ud558\uace0 \uadf8 \ubc29\ud5a5\uc73c\ub85c \ud798\uc744 \ub354 \uc2e4\uc5b4 \uc8fc\uc5b4 \ube60\ub974\uac8c \uc774\ub3d9\ud560 \uc218 \uc788\uac8c \ud55c\ub2e4. RMSProp\ub294 \uc774\uc804\uc758 gradient\ub97c \uc9c0\uc218 \uac00\uc911 \uc774\ub3d9\ud3c9\uade0\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc0c8\ub86d\uac8c \uad6c\ud55c gradient\ub97c \uc0ac\uc6a9\ud558\ub294 \ubc29\uc2dd\uc73c\ub85c, \uc0c8\ub86d\uac8c \uad6c\ud55c gradient\uac00 \uacfc\ud558\uac8c \ucee4\uc9c0\uc9c0 \uc54a\uace0 \ucd5c\uadfc \ubcc0\ud654\ub7c9\uc758 \ubcc0\uc218\uac04 \ucc28\uc774\ub97c \uc720\uc9c0\ud560 \uc218 \uc788\ub2e4\ub294 \uc7a5\uc810\uc774 \uc788\ub2e4. \uc774 \ub450\uac00\uc9c0\ub97c \ud63c\ud569\ud55c \ubc29\uc2dd\uc778 Adam\uc740 \uc9c0\uae08\uae4c\uc9c0 \uacc4\uc0b0\ud574\uc628 \uae30\uc6b8\uae30\uc758 \uc9c0\uc218\ud3c9\uade0\uacfc \uae30\uc6b8\uae30 \uc81c\uacf1\uc758 \uc9c0\uc218\ud3c9\uade0\uc744 \uc0ac\uc6a9\ud558\uc5ec step size\uc640 \ubc29\ud5a5\uc744 \ubaa8\ub450 \uc870\uc808\ud574 \uc8fc\ub294 \ubc29\uc2dd\uc774\ub2e4.","d83e9380":"### Ridge","d52b4e66":"#### \uc608\uce21 \ube44\uad50 \uadf8\ub798\ud504","aa1787e5":"#### \uc608\uce21 \ube44\uad50 \uadf8\ub798\ud504","a21f0cdb":"### Linear Regression","75055ea0":"#### \uae30\uc5ec\ub3c4 \uadf8\ub798\ud504","cb98fc0c":"## Heatmap\uc744 \ud1b5\ud55c \uc0c1\uad00\uad00\uacc4 \ud30c\uc545\n* corr() \uba54\uc18c\ub4dc\ub97c \ud65c\uc6a9\ud558\uc5ec correlation matrix\ub97c \uad6c\ud574 \uc774\ub97c \ud65c\uc6a9\ud558\uc5ec heatmap\uc744 \uadf8\ub9b0\ub2e4. \uc2e0\uc7a5\uc5d0 \ub300\ud55c \uac01 \ubcc0\uc218\ub4e4\uc758 \uc0c1\uad00\uad00\uacc4\ub97c \ud30c\uc545\ud560 \uc218 \uc788\ub2e4.","8d54f09b":"### Linear Regression","2a5f0543":"\uc9c0\uae08\uae4c\uc9c0 \uc9c4\ud589\ud55c \ubaa8\ub4e0 \ud559\uc2b5\uc5d0 \ub300\ud574 r2_score\ub97c \ud1b5\ud574 \uc815\ud655\ub3c4\ub97c \uc815\ub9ac\ud558\uba74 \ub2e4\uc74c\uacfc \uac19\ub2e4. Neural Network\ub294 \ub9e4 \uc2dc\ud589\ub9c8\ub2e4 \ubcc0\ub3d9 \ud3ed\uc774 \ud06c\uae30 \ub54c\ubb38\uc5d0 \ucd5c\uc885 \uacb0\uacfc\uc640 \uac12\uc774 \ub2e4\ub97c \uc218 \uc788\ub2e4.","5f90bfd7":"### Linear Regression","4f05d83c":"## \uc720\uc804\uc801 \uc694\uc778\uc744 \uc774\uc6a9\ud55c \ud0a4 \uc608\uce21\ud558\uae30\nRegression \uc54c\uace0\ub9ac\uc998\uc5d0\ub294 Linear Regression, Radom Forest, Decision Tree \ub4f1\uc774 \uc788\ub2e4. \ub2e4\uc591\ud55c \uc54c\uace0\ub9ac\uc998\uc744 \ud1b5\ud574 regression\uc744 \uc9c4\ud589\ud574\ubcf8 \uacb0\uacfc Linear Regression\uc758 \uacbd\uc6b0\uac00 \uc81c\uc77c \uacb0\uacfc\uac00 \uc88b\uc558\uae30 \ub54c\ubb38\uc5d0 \uc774\ud6c4\uc758 \uacfc\uc815\uc5d0\uc11c regression \uc54c\uace0\ub9ac\uc998\uc73c\ub85c linear regression\uc744 \uc120\uc815\ud558\uc600\ub2e4.","b326e234":"# Related Work\n\ucc38\uace0\n\n\n* Linear regression : https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.linear_model.LinearRegression.html\n\n\n* r2 score : https:\/\/towardsdatascience.com\/statistics-for-machine-learning-r-squared-explained-425ddfebf667\n\n\n* Optimizer : https:\/\/ucsd.tistory.com\/50, http:\/\/shuuki4.github.io\/deep%20learning\/2016\/05\/20\/Gradient-Descent-Algorithm-Overview.html\n\n\n* L2 : https:\/\/dailyheumsi.tistory.com\/57","aa598725":"#### \uc608\uce21 \ube44\uad50 \uadf8\ub798\ud504","fb453b3f":"## \uc804\uccb4 - \ub0ae\uc740 \uc0c1\uad00\uad00\uacc4 \uc81c\uac70\n\n\ub9c8\ucc2c\uac00\uc9c0\ub85c, \uc0c1\uad00\uad00\uacc4\uac00 \ub0ae\uc740 \ubcc0\uc218\ub4e4\uc740 \uc81c\uac70\ud558\uace0 \ub2e4\uc2dc \ud559\uc2b5\uc744 \ud574\ubcf4\uc558\ub2e4.","9edf95df":"# Evaluation & Analysis","0c374c93":"### Neural Network","69e2e438":"#### \uc608\uce21 \ube44\uad50 \uadf8\ub798\ud504","9773b8ba":"## \ud658\uacbd \uc694\uc778 - \ub0ae\uc740 \uc0c1\uad00\uad00\uacc4 \uc81c\uac70\n\n\uc774 \ub54c, \uc704\uc758 correlation matrix \uc5d0\uc11c \uc0c1\uad00\uacc4\uc218\uc758 \ud06c\uae30\uac00 0.1\ubcf4\ub2e4 \uc791\uc740 \uac83\uc740 \uc0c1\uad00\uad00\uacc4\uac00 \ub0ae\ub2e4\uace0 \ud310\ub2e8\ud560 \uc218 \uc788\ub2e4. \uc774\ub807\uac8c \uc0c1\uad00\uad00\uacc4\uac00 \ub0ae\uc740 feature\ub97c \ubaa8\ub450 \uc0ac\uc6a9\ud558\uc5ec \ud559\uc2b5\uc744 \ud558\uba74 \ub178\uc774\uc988\uac00 \ub9ce\uc544\uc838 \ud559\uc2b5\uc758 \uc815\ud655\ub3c4\ub97c \ub0ae\ucd9c \uc218 \uc788\uae30 \ub54c\ubb38\uc5d0 \ubcc0\uc218\ub4e4\uc744 \uc81c\uac70\ud558\uc600\ub2e4. \uc88b\uc740 \uc74c\uc2dd \uc12d\ucde8\uc758 \uc815\ub3c4, \uc218\uba74\uc2dc\uac04 \ub4f1\uc740 \uadf8 \uc0c1\uad00\uad00\uacc4\uac00 \ub0ae\ub2e4. \ub530\ub77c\uc11c \ud574\ub2f9\ub418\ub294 feature\ub4e4\uc744 \uc81c\uac70\ud55c \ub4a4, \ub2e4\uc2dc \uc704\uc758 \uc791\uc5c5\uc744 \uc9c4\ud589\ud558\uba74 \ub2e4\uc74c\uacfc \uac19\ub2e4.","d65806cf":"|\uc720\uc804|lin_reg|Ridge|NN|\n|---|---|---|---|\n|train \uc815\ud655\ub3c4|73.2%|73.2%|71.3%|\n|test \uc815\ud655\ub3c4|68.6%|68,7%|67.0%|\n\n|\ud658\uacbd|lin_reg|Ridge|NN|\n|---|---|---|---|\n|train \uc815\ud655\ub3c4|64.9%|64.9%|60.1%|\n|test \uc815\ud655\ub3c4|67.4%|67.4%|51.2%|\n\n|\ud658\uacbdtop3|lin_reg|Ridge|NN|\n|---|---|---|---|\n|train \uc815\ud655\ub3c4|64.5%|64.5%|64.5%|\n|test \uc815\ud655\ub3c4|67.2%|67.2%|68.2%|\n\n|\uc720\uc804+\ud658\uacbd|lin_reg|Ridge|NN|\n|---|---|---|---|\n|train \uc815\ud655\ub3c4|75.9%|75.9%|74.1%|\n|test \uc815\ud655\ub3c4|70.7%|70.7%|69.4%|\n\n|\uc720\uc804+\ud658\uacbdtop3|lin_reg|Ridge|NN|\n|---|---|---|---|\n|train \uc815\ud655\ub3c4|75.3%|75.3%|72.2%|\n|test \uc815\ud655\ub3c4|71.1%|71.2%|68.1%|\n","da49cd2d":"### Linear Regression","56b5f8ff":"## \uc131\ubcc4\uc5d0 \ub530\ub77c \ub370\uc774\ud130 \ubd84\ub9ac\ud558\uc5ec \uc0c1\uad00\uad00\uacc4 \ubd84\uc11d\ud558\uae30\n\n\uc9c0\uae08\uae4c\uc9c0\ub294 \uc804\uccb4 \uc131\ubcc4\uc5d0 \ub300\ud574 \uc0c1\uad00\uad00\uacc4\ub97c \ubd84\uc11d\ud558\uace0 \ud559\uc2b5\uc744 \uc9c4\ud589\ud588\ub2e4. \uc131\ubcc4\uc5d0 \ub530\ub978 \uc0c1\uad00\uad00\uacc4\uc758 \ucc28\uc774\ub294 \uc5c6\uc744\uc9c0 \ud655\uc778\ud574 \ubcf4\uc558\ub2e4. \ub370\uc774\ud130\uc14b\uc744 \uc131\ubcc4\uc5d0 \ub530\ub77c \ubd84\ub9ac\ud558\uace0, \uadf8 \ub370\uc774\ud130\ub97c \uc0ac\uc6a9\ud574 heatmap\uc744 \ub9cc\ub4e4\uba74 \ub2e4\uc74c\uacfc \uac19\ub2e4.","2882e635":"#### \uc608\uce21 \ube44\uad50 \uadf8\ub798\ud504","c16bd526":"#### \uc608\uce21 \ube44\uad50 \uadf8\ub798\ud504","ee484648":"#### \uc608\uce21 \ube44\uad50 \uadf8\ub798\ud504","4e1cf350":"## \ud690\uacbd\uc694\uc778\uc744 \uc774\uc6a9\ud55c \ud0a4 \uc608\uce21\ud558\uae30\n\ud658\uacbd\uc694\uc778\uc744 \ubaa8\ub450 \uc0ac\uc6a9\ud558\uc5ec \ud0a4\ub97c \uc608\uce21\ud574\ubcf8 \uacb0\uacfc, \uc704\uc640 \ub9c8\ucc2c\uac00\uc9c0\ub85c \uc778\uacf5\uc2e0\uacbd\ub9dd\uc5d0 \ube44\ud574 linear regression\uc774 \ub192\uc740 \uc815\ud655\ub3c4\ub97c \ubcf4\uc778\ub2e4. \uc774 \uacbd\uc6b0\uc5d0\ub294 Regularization\uc758 \uc601\ud5a5\uc774 \ud06c\uc9c0 \uc54a\uc740\ub370, line\uc774 overfitting\ub418\uc9c0 \uc54a\uace0 \uc815\ud655\ud558\uac8c fitting\ub41c \uac83\uc774\ub77c\uace0 \ubcf4\uae30\ub294 \uc5b4\ub824\uc6c0\uc774 \uc788\ub2e4. \uc815\ud655\ub3c4 \uc790\uccb4\uac00 \ub9e4\uc6b0 \ub0ae\uae30 \ub54c\ubb38\uc778\ub370, \uc624\ud788\ub824 regression\uc744 \uc9c4\ud589\ud55c feature\uc758 \ub178\uc774\uc988\uac00 \ucee4 regularization\uc73c\ub85c\ub3c4 \uac1c\uc120\ub418\uc9c0 \ubabb\ud588\ub2e4\uace0 \ubcf4\ub294 \uac83\uc774 \uc801\uc808\ud574 \ubcf4\uc778\ub2e4. \ub610\ud55c \uc77c\ubc18\uc801\uc73c\ub85c\ub294 test\uc815\ud655\ub3c4\uac00 train \uc815\ud655\ub3c4\ubcf4\ub2e4 \ud06c\uc9c0\ub9cc \uc774 \uacbd\uc6b0\uc5d0\ub294 \ubc18\ub300\uac00 \ub41c\uac83\uc744 \uc54c \uc218 \uc788\ub2e4. \uadf8\ub798\ud504\ub4e4\uc744 \ucc38\uc870\ud558\uba74 \ubaa8\ub378\uc758 intercept \uac12\uc774 \ub9e4\uc6b0 \ud06c\ub2e4\ub294 \uc0ac\uc2e4\uc744 \ud655\uc778\ud560 \uc218 \uc788\ub2e4. test\uc5d0 \ub354 \ud3c9\uade0\uac12\uacfc \uac00\uae4c\uc6b4 \ub370\uc774\ud130\uac00 \ub9ce\uc744 \uac83\uc774\ub77c \ucd94\uce21\ud574\ubcfc \uc218 \uc788\ub2e4.","67b49f01":"#### \uae30\uc5ec\ub3c4 \uadf8\ub798\ud504","a65d7d24":"regularization\uc744 \ud558\uc9c0 \uc54a\uc740 \uacbd\uc6b0\uc5d0 \ube44\ud574 \uc815\ud655\ub3c4\uac00 \uc88b\uc544\uc9c4 \uac83\uc744 \uc54c \uc218 \uc788\uc5c8\ub2e4. \uc774\ub97c \ud1b5\ud574 \ub370\uc774\ud130\uc14b\uc774 \ub9ce\uc9c0 \uc54a\uae30 \ub54c\ubb38\uc5d0 \uc5b4\ub290\uc815\ub3c4 overfitting\uc774 \uc788\uc5c8\uc74c\uc744 \ucd94\uce21\ud560 \uc218 \uc788\ub2e4.","361bcfb2":"#### \uc608\uce21 \ube44\uad50 \uadf8\ub798\ud504","daa1a43f":"#### \uc608\uce21 \ube44\uad50 \uadf8\ub798\ud504","d8981f81":"#### \uae30\uc5ec\ub3c4 \uadf8\ub798\ud504","f1f32d13":"#### \uae30\uc5ec\ub3c4 \uadf8\ub798\ud504","30de9e4b":"# Members\n* \ub0a8\ub3c4\ud604, \ucef4\ud4e8\ud130\uc18c\ud504\ud2b8\uc6e8\uc5b4\ud559\uacfc, dhnam0502@naver.com\n* \uc720\ud658\uaddc,\uae30\uacc4\uacf5\ud559\ubd80, hkyoo52@naver.com\n* \uc724\uc740\uc12d, \uc804\uae30\uc0dd\uccb4\uacf5\ud559\ubd80, passieun97@hanyang.ac.kr\n* \uc774\uc11c\uc9c4,\ubb34\uc6a9\ud559\uacfc, darin1229@naver.com\n\n## \uc5ed\ud560\ubd84\ub2f4\n\n* \ub370\uc774\ud130 \uc218\uc9d1 : \uc8fc : \uc720\ud658\uaddc, \ubcf4\uc870 : \uc774\uc11c\uc9c4, \uc724\uc740\uc12d\n* \ucf54\ub529 : \uc8fc: \ub0a8\ub3c4\ud604, \ubcf4\uc870 : \uc724\uc740\uc12d, \uc720\ud658\uaddc\n* \ube14\ub85c\uadf8 \ud3b8\uc9d1 : \uc8fc: \ub0a8\ub3c4\ud604, \ubcf4\uc870: \uc724\uc740\uc12d\n* \uc601\uc0c1 \ud3b8\uc9d1 : \uc720\ud658\uaddc","a631513b":"# Introduction\n\n* \ud604\ub300\uc778\ub4e4\uc740 \uc678\ubaa8\uc758 \uad00\uc2ec\uc744 \ub9ce\uc774 \uac00\uc9c4\ub2e4. \uadf8 \uc911 '\ud0a4'\ub294 \uc5b4\ub9b4 \ub54c\ubd80\ud130 \ub9ce\uc740 \uc0ac\uc5f0\uc744 \ub9cc\ub4e0\ub2e4. \ucd08\ub4f1\ud559\uad50, \ud639\uc740 \uadf8 \uc774\uc804\uc5d0\ub3c4 \uc904\uc744 \ud0a4 \uc21c\uc11c\ub85c \uc885\uc885 \uc120\ub2e4. \uc9d1\uc5d0\uc11c\ub294 \uc218\uc2dc\ub85c \uc544\uc774\uc758 \ud0a4\ub97c \uc7ac\uba74\uc11c \uc5bc\ub9c8\ub098 \ucef8\ub294\uc9c0 \ud655\uc778\ud55c\ub2e4. \ub098\uc774\uac00 \ub4e4\uc5b4\ub3c4 \ub2ec\ub77c\uc9c0\uc9c0 \uc54a\ub294\ub2e4. \ub0a8\uc131\uc740 \ub9de\uc120\uc744 \ubcfc \ub54c \ub4f1\uc758 \uc0c1\ud669\uc5d0\uc11c \ud0a4\ub97c \uacf5\uac1c\ud574\uc57c \ud558\uace0, \uc791\uc740 \ud0a4\ub294 \uadf8\ub9cc\ud07c \uc190\ud574\uac00 \ub41c\ub2e4. \uadf8\ub798\uc11c \uc131\uc7a5\ud310\uc774 \ub2eb\ud788\uae30 \uc804 \ud0a4 \ud06c\uae30 \uc704\ud55c \ub178\ub825\uc744 \ud558\ub294 \uacbd\uc6b0\ub97c \uc885\uc885 \ubcfc \uc218 \uc788\ub2e4. \ud0a4 \ucee4\uc9c0\ub294 \uc74c\uc2dd, \ud639\uc740 \ubcf4\uc591\uc2dd \ub4f1\uc744 \uba39\uac70\ub098, \uc0dd\ud65c \ud328\ud134\uc744 \ubc14\uafb8\ub294 \ub354 \uc88b\uac8c \ud558\uac70\ub098, \uc758\ud559\uc801\uc778 \ubc29\ubc95\uc5d0 \uc758\uc874\ud558\ub294 \ub4f1\uc758 \ubc29\ubc95\uc744 \uc0ac\uc6a9\ud558\uace0\ub294 \ud55c\ub2e4. \ud55c\ud3b8 \ud0a4\ub294 \uc720\uc804\uc758 \uc601\ud5a5\uc744 \ub9ce\uc774 \ubc1b\ub294\ub2e4\uace0 \uc54c\ub824\uc838 \uc788\ub2e4. \uadf8\ub9ac\ud558\uc5ec \ud658\uacbd\uacfc \uc720\uc804\uc774 \uc5bc\ub9c8\ub098 \ud0a4\uc640 \uc601\ud5a5\uc774 \uc788\ub294\uc9c0 \uc54c\uc544\ubcf4\ub824\uace0 \ud55c\ub2e4. \uadf8\ub9ac\uace0 \uc774\ub7ec\ud55c \uc694\uc18c\ub97c \ubc14\ud0d5\uc73c\ub85c \ud0a4\ub97c \uc608\uce21\ud574 \ubcf4\ub824\uace0 \ud55c\ub2e4.","ed328b4f":"#### \uc608\uce21 \ube44\uad50 \uadf8\ub798\ud504\n\nTrain \ub370\uc774\ud130\uc640 Test \ub370\uc774\ud130\ub97c \uac01\uac01 \ub098\ub204\uace0 \uc815\ub82c\ud558\uc5ec \uc608\uce21\uac12\uacfc Ground Truth\ub97c \ube44\uad50\ud558\ub294 \uadf8\ub798\ud504\ub2e4.","aae591ed":"## \uc720\uc804\uacfc \ud658\uacbd\uc694\uc778\uc744 \ubaa8\ub450 \uc774\uc6a9\ud574 \ud0a4 \uc608\uce21\ud558\uae30\n\uc720\uc804\uacfc \ud658\uacbd\uc694\uc778 \uac01\uac01\uc744 \uc774\uc6a9\ud574 \ud0a4\ub97c \uc608\uce21\ud574 \ubcf4\uc558\ub294\ub370, heatmap \uc5d0\uc11c\ub3c4 \uc54c \uc218 \uc788\uc5c8\uc9c0\ub9cc \uc720\uc804\uc801\uc778 \uc694\uc18c\uac00 \ud0a4\ub97c \uacb0\uc815\ud558\ub294\ub370\uc5d0 \ud06c\uac8c \uc791\uc6a9\ud558\ub294 \uac83\uc744 \uc54c \uc218 \uc788\ub2e4. \ub530\ub77c\uc11c \ud658\uacbd\uc694\uc778\uacfc \uac19\uc774 \ud559\uc2b5\uc744 \ud558\uba74 \ud658\uacbd\uc694\uc778\uc758 \uc601\ud5a5\uc740 \uac70\uc758 \uc5c6\uc5b4\uc838 \uc0c1\uad00\uad00\uacc4\uac00 \uc791\uc740 feature\ub97c \ud3ec\ud568\ud558\uace0 \uc81c\uc678\ud558\ub294 \uac83\uc758 \uc601\ud5a5\uc774 \uc544\uc8fc \uc791\ub2e4.","37b31ca3":"### Ridge","0bfb7ad9":"#### \uc608\uce21 \ube44\uad50 \uadf8\ub798\ud504","1d037b58":"#### \uae30\uc5ec\ub3c4 \uadf8\ub798\ud504","5f8f4886":"https:\/\/youtu.be\/3N5fK3f13ZQ\n\n\uc601\uc0c1 \ub9c1\ud06c","0b2d2ac9":"\uac19\uc740 dataset\uc744 \uc0ac\uc6a9\ud558\uc600\uc744 \ub54c \uc815\ud655\ub3c4\uac00 \uc57d 10% \uac00\uae4c\uc774 \ub0ae\uc544\uc9c4 \uac83\uc744 \uc54c \uc218 \uc788\ub2e4. \uc774\ub294 \ub370\uc774\ud130 \uc218\uac00 \uc801\uc740 \uac83\uc774 \uac00\uc7a5 \ud070 \uc694\uc778\uc73c\ub85c \ubcf4\uc778\ub2e4. \uc778\uacf5\uc2e0\uacbd\ub9dd\uc740 \ub370\uc774\ud130\uac00 \ub9ce\uc744 \uc218\ub85d \uadf8 \uc131\ub2a5\uc774 \uc88b\uc544\uc9c0\uc9c0\ub9cc \ub370\uc774\ud130\uac00 \uc801\uc744 \ub54c\ub294 \uc624\ud788\ub824 \uace0\uc804\uc801\uc778 regression\uc774 \ub354 \ub098\uc740 \uc131\ub2a5\uc744 \ubcf4\uc774\ub294 \uac83\uc774 \uc77c\ubc18\uc801\uc73c\ub85c \uc54c\ub824\uc838 \uc788\ub2e4. \ub530\ub77c\uc11c \uc9c0\uae08\uacfc \uac19\uc740 \uc0c1\ud669\uc5d0\uc11c\ub294 regularized linear regression\uc774 \uc778\uacf5\uc2e0\uacbd\ub9dd\uc5d0 \ube44\ud574 \ub192\uc740 \uc815\ud655\ub3c4\ub97c \ubcf4\uc774\ub294 \uac83\uc774 \ub2f9\uc5f0\ud558\ub2e4.","c5306e4e":"#### \uc608\uce21 \ube44\uad50 \uadf8\ub798\ud504","b0e84dd7":"# Datasets\n\n1. \ub370\uc774\ud130 \uc218\uc9d1\n    - \ucd1d 359 \uba85\uc5d0\uac8c 8\uac00\uc9c0 \ud56d\ubaa9\uc5d0 \ub300\ud574 \uc124\ubb38\uc870\uc0ac\ub97c \ud558\uc5ec \ub370\uc774\ud130\ub97c \uc218\uc9d1\ud558\uc600\ub2e4. \uc720\uc804\uacfc \uad00\ub828\ud558\uc5ec \uc131\ubcc4\uacfc \ubd80\ubaa8\ub2d8\uc758 \uc2e0\uc7a5\uc5d0 \ub300\ud574 \uc870\uc0ac\ud558\uc600\ub2e4. \ud658\uacbd\uacfc \uad00\ub828\ud55c \ud56d\ubaa9\uc73c\ub85c\ub294 \ud559\ucc3d \uc2dc\uc808 \ucde8\uce68\uc2dc\uac04, \uc6b4\ub3d9\uc2dc\uac04, \uc12d\ucde8 \uc74c\uc2dd, \ud0a4 \uc131\uc7a5\uacfc \uad00\ub828\ud55c \uc57d \ubcf5\uc6a9 \ud639\uc740 \uc8fc\uc0ac \uc5ec\ubd80\ub97c \uc870\uc0ac\ud558\uc600\ub2e4.\n1. \ub370\uc774\ud130 \ud56d\ubaa9\n * \uc131\ubcc4\n     - \ub0a8\uc131\uc744 0 \uc5ec\uc131\uc744 1\ub85c \uc124\uc815\ud558\uc600\ub2e4.\n * \uc2e0\uc7a5\n     - \uc720\uc804\uc801\uc778 \uc694\uc18c\ub85c \ubcf8\uc778\uacfc \ubd80\ubaa8\ub2d8\uc758 \ud0a4\ub97c \uc870\uc0ac\ud558\uc600\ub2e4.\n * \ud559\ucc3d\uc2dc\uc808 \uc6b4\ub3d9\uc2dc\uac04(exercise)\n     - \uac70\uc758 \ud558\uc9c0 \uc54a\uc558\ub2e4, 30\ubd84 \uc774\ub0b4, 1\uc2dc\uac04 \uc774\ub0b4, 1\uc2dc\uac04 30\ubd84 \uc774\ub0b4, 1\uc2dc\uac04 30\ubd84 \uc774\uc0c1\uc73c\ub85c \uad6c\ubd84\ud558\uc5ec 5\uac00\uc9c0\uc758 \uc120\ud0dd\uc9c0\ub97c \uc81c\uacf5\ud558\uc600\ub2e4. \uac01 \uc120\ud0dd\uc9c0\ub294 \ub2e4\uc2dc 0, 30, 60, 90, 120 (\ubd84)\uc73c\ub85c \ubcc0\ud658\ud558\uc5ec \uc0ac\uc6a9\ud558\uc600\ub2e4.\n * \ud559\ucc3d\uc2dc\uc808 \ucde8\uce68\uc2dc\uac04(sleep_time)\n     - \uc624\ud6c4 11\uc2dc \uc774\uc804, \uc624\uc804 12\uc2dc \uc774\uc804, \uc624\uc804 1\uc2dc \uc774\uc804, \uc624\ud6c4 2\uc2dc \uc774\uc804, \uc624\ud6c4 2\uc2dc \uc774\ud6c4\ub85c \uad6c\ubd84\ud558\uc5ec 5\uac00\uc9c0\uc758 \uc120\ud0dd\uc9c0\ub97c \uc81c\uacf5\ud558\uc600\ub2e4. \uc911\/\uace0\ub4f1\ud559\uc0dd\uc758 \uc77c\ubc18\uc801\uc778 \uae30\uc0c1\uc2dc\uac04\uc778 \uc624\uc804 7\uc2dc\ub97c \uae30\uc900\uc73c\ub85c \ud558\uc5ec \uac01 \uc120\ud0dd\uc9c0\ub97c \ub2e4\uc2dc 8, 7, 6, 5, 4 (\uc2dc\uac04)\uc73c\ub85c \ubcc0\ud658\ud558\uc600\ub2e4.\n * \ud559\ucc3d\uc2dc\uc808 \ud0a4 \uc131\uc7a5\uc5d0 \ub3c4\uc6c0\uc774 \ub418\ub294 \uc74c\uc2dd \uc12d\ucde8 \uc815\ub3c4(good_food)\n     - \uc6b0\uc720,\ucf69,\uace0\ub4f1\uc5b4 \ub4f1 \uc77c\ubc18\uc801\uc73c\ub85c \ud0a4 \uc131\uc7a5\uc5d0 \ub3c4\uc6c0\uc774 \ub41c\ub2e4\uace0 \uc54c\ub824\uc9c4 \uc74c\uc2dd\uc744 \uc990\uaca8 \uba39\uc5c8\ub294\uac00\uc5d0 \ub300\ud574 \uc9c8\ubb38\ud558\ub294 \ud56d\ubaa9\uc73c\ub85c \uc804\ud600 \uadf8\ub807\uc9c0 \uc54a\ub2e4\ub97c 1, \ub9e4\uc6b0 \uadf8\ub807\ub2e4\ub97c 5\ub85c \uc124\uc815\ud558\uc5ec 1 ~ 5 \uc758 \uc120\ud0dd\uc9c0\ub97c \uc81c\uacf5\ud558\uc600\ub2e4.\n * \ud559\ucc3d\uc2dc\uc808 \ud0a4 \uc131\uc7a5\uc5d0 \ubc29\ud574\uac00 \ub418\ub294 \uc74c\uc2dd \uc12d\ucde8 \uc815\ub3c4(bad_food)\n     - \uc778\uc2a4\ud134\uc2a4, \ud0c4\uc0b0\uc74c\ub8cc \ub4f1 \uc77c\ubc18\uc801\uc73c\ub85c \ud0a4 \uc131\uc7a5\uc5d0 \ubc29\ud574\uac00 \ub41c\ub2e4\uace0 \uc54c\ub824\uc9c4 \uc74c\uc2dd\uc744 \uc990\uaca8\uba39\uc5c8\ub294\uac00\uc5d0 \ub300\ud574 \uc9c8\ubb38\ud558\ub294 \ud56d\ubaa9\uc774\ub2e4. \ub9c8\ucc2c\uac00\uc9c0\ub85c \uc804\ud600 \uadf8\ub807\uc9c0 \uc54a\ub2e4\ub97c 1, \ub9e4\uc6b0 \uadf8\ub807\ub2e4\ub97c 5\ub85c \uc124\uc815\ud558\uc5ec 1 ~ 5 \uc758 \uc120\ud0dd\uc9c0\ub97c \uc81c\uacf5\ud558\uc600\ub2e4.\n * \ud559\ucc3d\uc2dc\uc808 \ud0a4 \uc131\uc7a5\uc5d0 \ub3c4\uc6c0\uc774 \ub418\ub294 \uc57d\/\uc8fc\uc0ac \uc5ec\ubd80(drug)\n     - \ud559\ucc3d\uc2dc\uc808\uc5d0 \ud0a4 \uc131\uc7a5\uc744 \uc704\ud574 \uc57d\uc744 \ubcf5\uc6a9\ud558\uc600\uac70\ub098, \uc8fc\uc0ac\ub97c \ub9de\uc544\ubcf8 \uacbd\ud5d8\uc774 \uc788\ub294\uc9c0, \uc788\ub2e4\uba74 \uc5b4\ub290 \uc815\ub3c4 \uc600\ub294\uc9c0\uc5d0 \ub300\ud574 \uc9c8\ubb38\ud558\ub294 \ud56d\ubaa9\uc774\ub2e4. \uc704\uc640 \uac19\uc774 \uc804\ud600 \uadf8\ub807\uc9c0 \uc54a\ub2e4\ub97c 1, \ub9e4\uc6b0 \uadf8\ub807\ub2e4\ub97c 5\ub85c \uc124\uc815\ud558\uc5ec 1 ~ 5 \uc758 \uc120\ud0dd\uc9c0\ub97c \uc81c\uacf5\ud558\uc600\ub2e4.","18365657":"#### \uae30\uc5ec\ub3c4 \uadf8\ub798\ud504","070d90e2":"#### \uc608\uce21 \ube44\uad50 \uadf8\ub798\ud504","c30e1799":"#### \uc608\uce21 \ube44\uad50 \uadf8\ub798\ud504","f4bf5ebc":"#### \uae30\uc5ec\ub3c4 \uadf8\ub798\ud504\n\n\uc784\uc758\ub85c 10\uac1c\uc758 \ub370\uc774\ud130\ub97c \uace8\ub77c\uc11c, \uac01 \ub370\uc774\ud130\uc758 \uc608\uce21\uac12 \uc911 \uc5b4\ub290 \uc5f4\uc774 \uc5bc\ub9c8\ub098 \uae30\uc5ec\ud588\ub294\uc9c0\ub97c \ud655\uc778\ud558\ub294 \uadf8\ub798\ud504\uc774\ub2e4.\n[\uc774 \ube14\ub85c\uadf8](https:\/\/chelseatroy.com\/2017\/09\/21\/visualizing-multidimensional-linear-regression-data-in-2d\/)\uc5d0\uc11c \uc544\uc774\ub514\uc5b4\ub97c \ub530 \uc654\ub2e4.","111c85c3":"# Contents\n**1. Introduction**\n\n**2. Datasets**\n\n**3. Methodology**\n\n**4. Evaluation & Analysis**\n\n**5. Related Work**\n\n**6. Conclusion**","097c6159":"### Neural Network","bdbf05af":"\uc704\uc5d0\uc11c \ubcf4\uc774\ub4ef\uc774 \uc0c1\uad00\uad00\uacc4\uac00 \uc5ec\uc131\uacfc \ub0a8\uc131\uc758 \uacbd\uc6b0\uac00 \uc0ac\ubb47 \ub2e4\ub974\ub2e4. \uc5ec\uc131\uc758 \uacbd\uc6b0 \ub0a8\uc131\uacfc \ube44\uad50\ud588\uc744 \ub54c \uc5c4\ub9c8\uc758 \uc2e0\uc7a5\uc774 \ub354 \ud070 \uc601\ud5a5\uc744 \ubbf8\uce58\uace0, \uc6b4\ub3d9\uc774 \ub354 \uc801\uc740 \uc601\ud5a5\uc744 \ubbf8\uce58\uba70, \uc57d \ubcf5\uc6a9 \uc5ec\ubd80\/\uc815\ub3c4\uac00 \ub354 \ud070 \uc74c\uc758 \uc0c1\uad00\uad00\uacc4\ub97c \uac16\ub294\ub2e4. \uc77c\ubc18\uc801\uc73c\ub85c \uc0dd\uac01\ud588\uc744 \ub54c, \ub0a8\uc131\uc5d0 \ube44\ud574 \uc5ec\uc131\uc774 \uc6b4\ub3d9\uc2dc\uac04\uc774 \uc801\uae30 \ub54c\ubb38\uc5d0 \uc0c1\uad00\uad00\uacc4\ub3c4 \ub354 \uc801\uac8c \ub098\uc628 \uac83\uc774\ub77c \ucd94\uce21\ud560 \uc218 \uc788\ub2e4","e4190e12":"### Linear Regression","64cea6f3":"### Neural Network\n\n\uace0\uc804\uc801\uc778 regression \ubc29\ubc95\uc744 \uc0ac\uc6a9\ud55c \ud559\uc2b5\uacfc \uc778\uacf5\uc2e0\uacbd\ub9dd\uc744 \uc0ac\uc6a9\ud55c \ud559\uc2b5\uc758 \uc815\ud655\ub3c4\ub97c \ud655\uc778\ud574 \ubcf4\uae30\uc704\ud574 keras\ub97c \uc774\uc6a9\ud558\uc5ec \uac04\ub2e8\ud558\uac8c \uc778\uacf5\uc2e0\uacbd\ub9dd\uc744 \uad6c\ud604\ud558\uc5ec \uacb0\uacfc\ub97c \ud655\uc778\ud574 \ubcf4\uc558\ub2e4. input\uc758 \uacbd\uc6b0 \uc131\ubcc4, \ubd80\ubaa8\uc758 \uc2e0\uc7a5\uc73c\ub85c \ucd1d 4\uac1c\uc774\uace0, \uc740\ub2c9\uce35\uc740 2\uac1c, activation fuction\uc740 ReLU\ub97c \uc0ac\uc6a9\ud558\uc5ec \uc9c4\ud589\ud558\uc600\ub2e4. \ud559\uc2b5\uc728\uc740 0.001\uc73c\ub85c \uc124\uc815\ud558\uc600\uace0, optimizer\ub294 \uc815\ud655\ub3c4\uac00 \ub192\ub2e4\uace0 \uc54c\ub824\uc838\uc788\ub294 Adam\uc744 \uc0ac\uc6a9\ud558\uc600\uace0 \uadf8\uacb0\uacfc\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4.","189a3234":"#### \uc608\uce21 \ube44\uad50 \uadf8\ub798\ud504","45cd3279":"#### \uae30\uc5ec\ub3c4 \uadf8\ub798\ud504","29a73b45":"### Neural Network","ec2858ab":"\ub2e4\uc74c\uc740 \uadf8\ub798\ud504\ub97c Linear \ubaa8\ub378\uc5d0\uc11c \uac01 \ud56d\ubaa9\uc758 \uae30\uc5ec\ub3c4\ub97c \uadf8\ub798\ud504\ub85c \uadf8\ub9b4 \ub54c \uc0ac\uc6a9\ud560 \ud568\uc218\uc774\ub2e4. ","e51b4b34":"### Ridge","efed031a":"#### \uae30\uc5ec\ub3c4 \uadf8\ub798\ud504"}}