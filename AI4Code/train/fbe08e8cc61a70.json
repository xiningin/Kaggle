{"cell_type":{"b9458ee5":"code","bcbbd1a5":"code","b349dffa":"code","400c25fb":"code","3f01ca63":"code","e7882a25":"code","d2f0a586":"code","380b0552":"code","ac2d1f14":"code","360a5cb8":"code","22e53bb6":"code","8c3925c8":"code","c448ea13":"code","5dbe1a36":"code","f8c0149b":"code","c6d5d2b1":"markdown","9baada13":"markdown","df88036f":"markdown","9949706c":"markdown","f2359e70":"markdown","002d908e":"markdown","41a597be":"markdown","4760e031":"markdown","bcf89435":"markdown","c56ad504":"markdown","905a40db":"markdown","5f886102":"markdown"},"source":{"b9458ee5":"import warnings\nwarnings.filterwarnings('ignore')\nimport numpy as np \nimport pandas as pd \nimport seaborn as sns \nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import KFold,StratifiedKFold,train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.metrics import roc_auc_score\nfrom lightgbm import LGBMClassifier\nimport os\nimport eli5\nfrom eli5.sklearn import PermutationImportance\nfrom catboost import CatBoostClassifier\n\nfrom keras.models import Sequential,load_model\nfrom keras.layers import Dense, Dropout\nfrom sklearn.preprocessing import StandardScaler\nfrom keras.callbacks import ReduceLROnPlateau,ModelCheckpoint\n","bcbbd1a5":"train_df=pd.read_csv('..\/input\/av-janatahack-crosssell-prediction\/train.csv')\ntest_df=pd.read_csv('..\/input\/av-janatahack-crosssell-prediction\/test.csv')\nsubmission_df=pd.read_csv('..\/input\/av-janatahack-crosssell-prediction\/sample.csv')","b349dffa":"train_df.head(5)","400c25fb":"sns.distplot(train_df['Annual_Premium'])","3f01ca63":"train_df['Annual_Premium']=np.log(train_df['Annual_Premium'])\nsns.distplot(train_df['Annual_Premium'])","e7882a25":"plt.figure(figsize=(10,10))\nsns.heatmap(train_df.corr(),annot=True)","d2f0a586":"sns.barplot(train_df['Response'],train_df['Response'].value_counts())","380b0552":"train_df=train_df.drop_duplicates(subset=[ele for ele in list(train_df.columns) if ele not in ['id']])\ncombine_set=pd.concat([train_df,test_df])\nle=LabelEncoder()\ncombine_set['Gender']=le.fit_transform(combine_set['Gender'])\ncombine_set['Vehicle_Damage']=le.fit_transform(combine_set['Vehicle_Damage'])\ncombine_set['Vehicle_Age']=combine_set['Vehicle_Age'].map({'< 1 Year':0,'1-2 Year':1,'> 2 Years':2})\n# df=pd.get_dummies(combine_set['Vehicle_Age'],drop_first=True)\n# combine_set=pd.concat([combine_set,df],axis=1)\n\n# fe=combine_set.groupby('Vehicle_Age').size()\/len(combine_set)\n# combine_set['Vehicle_Age']=combine_set['Vehicle_Age'].apply(lambda x: fe[x])\ncombine_set['Customer_term_in_year']=combine_set['Vintage']\/365\ncombine_set['Total_premium_Channelwise']=combine_set.groupby(['Policy_Sales_Channel'])['Annual_Premium'].transform('sum')\ncombine_set['Mean_premium_Channelwise']=combine_set.groupby(['Policy_Sales_Channel'])['Annual_Premium'].transform('mean')\ncombine_set['Maximum_premium_Channelwise']=combine_set.groupby(['Policy_Sales_Channel'])['Annual_Premium'].transform('max')\ncombine_set['Min_premium_Channelwise']=combine_set.groupby(['Policy_Sales_Channel'])['Annual_Premium'].transform('min')\ncombine_set['Total_premium_regionwise']=combine_set.groupby(['Region_Code'])['Annual_Premium'].transform('sum')\ncombine_set['Mean_premium_regionwise']=combine_set.groupby(['Region_Code'])['Annual_Premium'].transform('mean')\ncombine_set['Max_premium_regionwise']=combine_set.groupby(['Region_Code'])['Annual_Premium'].transform('max')\ncombine_set['Min_premium_regionwise']=combine_set.groupby(['Region_Code'])['Annual_Premium'].transform('min')\ncombine_set['Age_groups_region_wise']=combine_set.groupby(['Region_Code'])['Age'].transform('nunique')\ncombine_set['regionwise_channels']=combine_set.groupby(['Policy_Sales_Channel'])['Region_Code'].transform('nunique')\ncombine_set['Channelwise_regions']=combine_set.groupby(['Region_Code'])['Policy_Sales_Channel'].transform('nunique')\ncombine_set['Unique_customers_based_Vinatge']=combine_set.groupby(['Region_Code','Policy_Sales_Channel'])['Vintage'].transform('nunique')\ncombine_set['Region_wise_Vehicle_Age_premium']=combine_set.groupby(['Region_Code','Vehicle_Age'])['Annual_Premium'].transform('sum')\ncombine_set['Region_wise_Vehicle_Age_premium_mean']=combine_set.groupby(['Region_Code','Vehicle_Age'])['Annual_Premium'].transform('mean')\ncombine_set['Region_wise_Vehicle_Age_premium_max']=combine_set.groupby(['Region_Code','Vehicle_Age'])['Annual_Premium'].transform('max')\ncombine_set['Channel_wise_Vehicle_Age_premium']=combine_set.groupby(['Policy_Sales_Channel', 'Vehicle_Age'])['Annual_Premium'].transform('sum')\ncombine_set['Channel_wise_Vehicle_Age_premium_mean']=combine_set.groupby(['Policy_Sales_Channel', 'Vehicle_Age'])['Annual_Premium'].transform('mean')\ncombine_set['Channel_wise_Vehicle_Age_premium_max']=combine_set.groupby(['Policy_Sales_Channel', 'Vehicle_Age'])['Annual_Premium'].transform('max')\n\n#Rank Features\ncombine_set['Rank_regionwise_premium']=combine_set.groupby(['Region_Code'])['Annual_Premium'].rank(method='first',ascending=True)\ncombine_set['Rank_mean_regionwise_premium']=combine_set.groupby(['Region_Code'])['Annual_Premium'].rank(method='average',ascending=True)\ncombine_set['Rank_max_regionwise_premium']=combine_set.groupby(['Region_Code'])['Annual_Premium'].rank(method='max',ascending=True)\ncombine_set['Rank_min_regionwise_premium']=combine_set.groupby(['Region_Code'])['Annual_Premium'].rank(method='min',ascending=True)\ncombine_set['Rank_regionwise_diff']=combine_set['Rank_max_regionwise_premium']- combine_set['Rank_min_regionwise_premium']\ncombine_set['Rank_channelwise_premium']=combine_set.groupby(['Policy_Sales_Channel'])['Annual_Premium'].rank(method='first',ascending=True)\ncombine_set['Rank_mean_channelwise_premium']=combine_set.groupby(['Policy_Sales_Channel'])['Annual_Premium'].rank(method='average',ascending=True)\ncombine_set['Rank_max_channelwise_premium']=combine_set.groupby(['Policy_Sales_Channel'])['Annual_Premium'].rank(method='max',ascending=True)\ncombine_set['Rank_min_channelwise_premium']=combine_set.groupby(['Policy_Sales_Channel'])['Annual_Premium'].rank(method='min',ascending=True)\ncombine_set['Rank_channelwise_diff']=combine_set['Rank_max_channelwise_premium']- combine_set['Rank_min_channelwise_premium']\ncombine_set['Rank_Channel_wise_Vehicle_Age_Premium']=combine_set.groupby(['Policy_Sales_Channel','Vehicle_Age'])['Annual_Premium'].rank(method='first',ascending=True)\ncombine_set['Rank_Region_wise_Vehicle_Age_premium']=combine_set.groupby(['Region_Code','Vehicle_Age'])['Annual_Premium'].rank(method='first',ascending=True)\ncombine_set['Rank_Age_wise_premium']=combine_set.groupby(['Age'])['Annual_Premium'].rank(method='first',ascending=True)\n\ncombine_set.head(5)","ac2d1f14":"cat_cols = train_df.select_dtypes(include = 'object')\nnum_cols = train_df.select_dtypes(include=['int64','float64'])\ncombine=pd.concat([train_df,test_df])\ncombine['Vintage'] = combine['Vintage']\/365\ncombine['Vehicle_Age']=combine['Vehicle_Age'].replace({'< 1 Year':0,'1-2 Year':1,'> 2 Years':2})\ncombine['Vehicle_Damage']=combine['Vehicle_Damage'].replace({'Yes':1,'No':0})\ncombine['Gender']=combine['Gender'].replace({'Male':1,'Female':0})\ncombine['IsPreviouslyInsuredandVehicleDamaged'] = np.where((combine['Previously_Insured']==0) & (combine['Vehicle_Damage']==1),1,0)\ncombine['IsVehicleDamagedandDrivingLicense'] = np.where((combine['Vehicle_Damage']==1) & (combine['Driving_License']==1),1,0)\ncombine['TotalAmountPaidTillDate'] = combine['Annual_Premium']*combine['Vintage']\ncombine['PremiumperRegion'] = combine.groupby('Region_Code')['Annual_Premium'].transform('mean')\ncombine['PremiumperPolicy_Sales_Channel'] = combine.groupby('Policy_Sales_Channel')['Annual_Premium'].transform('mean')\ncombine['AvgVehicleAgePerRegion'] = combine.groupby('Policy_Sales_Channel')['Annual_Premium'].transform('mean')\ncombine['AvgCustomerAgeRegionWise'] = combine.groupby('Region_Code')['Age'].transform('mean')\ncombine['AvgCustomerAgeSaleChannelWise'] = combine.groupby('Policy_Sales_Channel')['Age'].transform('mean')\ncombine['SaleChannelsPerRegion'] = combine.groupby('Region_Code')['Policy_Sales_Channel'].transform('nunique')\ncombine['RegionwisePreviouslyInsured'] = combine.groupby('Region_Code')['Previously_Insured'].transform('count')\ncombine['RegionwiseVintage'] = combine.groupby('Region_Code')['Vintage'].transform('mean').astype('int')\ncombine['SaleChannelwiseVintage'] = combine.groupby('Policy_Sales_Channel')['Vintage'].transform('mean').astype('int')\ncombine['AvgRegionGenderWisePremium'] = combine.groupby(['Region_Code','Gender'])['Annual_Premium'].transform('mean')\ncombine['NoPeoplePrevInsuredRegionGenderWise'] = combine.groupby(['Region_Code','Gender'])['Previously_Insured'].transform('count')\ncombine['NoPeoplePrevInsuredSalesChannelGenderWise'] = combine.groupby(['Policy_Sales_Channel','Gender'])['Previously_Insured'].transform('count')\ncombine['NoPeoplePrevInsuredSalesChannelRegionWise'] = combine.groupby(['Region_Code','Policy_Sales_Channel'])['Previously_Insured'].transform('count')\ncombine['AvgCustomerDurationRegionGenderWise'] = combine.groupby(['Region_Code','Gender'])['Vintage'].transform('mean')\ncombine['InsuranceLicense'] = combine['Driving_License'].astype('str') + '' + combine['Previously_Insured'].astype('str')\ncombine['InsuranceGender'] = combine['Gender'].astype('str') + '' + combine['Previously_Insured'].astype('str')\ncombine['Region_Code']=combine['Region_Code'].astype(int)\ncombine['Policy_Sales_Channel']=combine['Policy_Sales_Channel'].astype(int)\ncombine.head(5)\n","360a5cb8":"train_df=combine_set[combine_set['Response'].isnull()==False]\ntest_df=combine_set[combine_set['Response'].isnull()==True]\nX=train_df.drop(['id','Response'],axis=1)\ny=train_df['Response'] \nX_main_test=test_df.drop(['id','Response'],axis=1)\n","22e53bb6":"cat_col=['Gender','Driving_License', 'Region_Code', 'Previously_Insured', 'Vehicle_Age', 'Vehicle_Damage','Policy_Sales_Channel', 'InsuranceLicense','InsuranceGender']\ntrain = combine[combine['Response'].isnull()!= True]\ntest = combine[combine['Response'].isnull()== True]\ntest=test.drop(['id','Response'],axis=1)\nX_cat = train.drop(['id',\"Response\"], axis=1)\nY = train[\"Response\"]","8c3925c8":"# #Check for Permutation Importance of Features\n# perm = PermutationImportance(lg,random_state=294).fit(X_val, y_val)\n# eli5.show_weights(perm,feature_names=X_val.columns.tolist())\n","c448ea13":"#Kfold\nkf=StratifiedKFold(n_splits=10,shuffle=True,random_state=294)\npred_score=0\npreds=0\n\nfor i, (train_idx,val_idx) in enumerate(kf.split(X,y)):\n    X_train,y_train=X.iloc[train_idx,:],y.iloc[train_idx]\n    X_val,y_val=X.iloc[val_idx,:],y.iloc[val_idx]\n    \n    print('\\nFold: {}\\n'.format(i+1))\n    \n    lg=LGBMClassifier(boosting_type='gbdt',n_estimators=500,depth=10,learning_rate=0.04,objective='binary',metric='auc',\n                 colsample_bytree=0.5,reg_lambda=2,reg_alpha=2,random_state=294,n_jobs=-1)      \n   \n\n    lg.fit(X_train,y_train)\n    print(roc_auc_score(y_val,lg.predict_proba(X_val)[:,1]))\n    \n    pred_score+=roc_auc_score(y_val,lg.predict_proba(X_val)[:,1])\n    \n    preds+=lg.predict_proba(X_main_test)[:,1]\n    \nprint('mean_score: {}'.format(pred_score\/10))\n\npreds_lg=preds\/10\n\n    ","5dbe1a36":"kf=StratifiedKFold(n_splits=5,shuffle=True,random_state=294)\npredictions=[]\ntest_roc_score=[]\n\n    \nfor i,(train_idx,val_idx) in enumerate(kf.split(X_cat,Y)):    \n\n    X_train, y_train = X_cat.iloc[train_idx,:], Y.iloc[train_idx]\n\n    X_val, y_val = X_cat.iloc[val_idx, :], Y.iloc[val_idx]\n    \n\n    print('\\nFold: {}\\n'.format(i+1))\n\n    classifier = CatBoostClassifier(learning_rate = 0.055,random_state=42,scale_pos_weight=7, custom_metric=['AUC'])\n\n    classifier.fit(X_train,y_train,cat_features=cat_col,eval_set=(X_val, y_val),early_stopping_rounds=30,verbose=100)\n    \n    testpred = classifier.predict_proba(X_val)[:,1]\n    test_roc_score.append(roc_auc_score(y_val, testpred))\n    print(\"Test ROC AUC : %.4f\"%(roc_auc_score(y_val, testpred)))\n    predictions.append(classifier.predict_proba(test)[:,1])\n\nprint(\"Mean test score:\",np.mean(test_roc_score))\npreds_cb=np.mean(predictions,axis=0)","f8c0149b":"#Submission File\nsubmission_df['Response']=preds_lg*0.6+preds_cb*0.4\nsubmission_df.to_csv('main_test.csv',index=False)\nsubmission_df.head(5)\n# np.array(lg.predict_proba(X_main_test)[:,1])","c6d5d2b1":"# **Loading Data....(Catboost)**","9baada13":"# **Adding Features for Catboost**","df88036f":"# **Adding Features for LGBM**","9949706c":"# **If you like the notebook please upvote**\n\n# **Thank You :)**","f2359e70":"# **Loading Data....(LGBM)**","002d908e":"# **KFold (Catboost)**","41a597be":"# **KFold (LGBM)**","4760e031":"**1) when class imbalance is taken into account different set of prediction probabilities are predicted where as when we don't take class imbalance into account different prediction probabilities are predicted but LB score and my cv score were giving same ROC AUC score in both the cases.**\n\n**2) when we take mean or provide weights while blending gives the values between two extremes so i have blended predictions of Catboost and Lightgbm which pushed my score 0.8588 to 0.8593 in public LB** \n\n**3) Creating Rank Features boosted my LGBM score. Thanks to @Anil who introduced me to such features**\n\n   reference link:https:\/\/github.com\/AnilBetta\/AV-Janata-Hack-healh-Care-2\n   \n**4) Creating different set of features for different models really helped in pushing the score.**\n\n","bcf89435":"# **Basic EDA**","c56ad504":"**Public LB: 85.9335 (6th rank)**\n\n**Private LB: 86.3685 (7th rank)**\n\nLink to LB: https:\/\/datahack.analyticsvidhya.com\/contest\/janatahack-cross-sell-prediction\/#LeaderBoard","905a40db":"# **Key takeaways which helped :**","5f886102":"# **Problem Statement**\n\n\n\nYour client is an Insurance company that has provided Health Insurance to its customers now they need your help in building a model to predict whether the policyholders (customers) from past year will also be interested in Vehicle Insurance provided by the company.\n\nAn insurance policy is an arrangement by which a company undertakes to provide a guarantee of compensation for specified loss, damage, illness, or death in return for the payment of a specified premium. A premium is a sum of money that the customer needs to pay regularly to an insurance company for this guarantee.\n\nFor example, you may pay a premium of Rs. 5000 each year for a health insurance cover of Rs. 200,000\/- so that if, God forbid, you fall ill and need to be hospitalised in that year, the insurance provider company will bear the cost of hospitalisation etc. for upto Rs. 200,000. Now if you are wondering how can company bear such high hospitalisation cost when it charges a premium of only Rs. 5000\/-, that is where the concept of probabilities comes in picture. For example, like you, there may be 100 customers who would be paying a premium of Rs. 5000 every year, but only a few of them (say 2-3) would get hospitalised that year and not everyone. This way everyone shares the risk of everyone else.\n\nJust like medical insurance, there is vehicle insurance where every year customer needs to pay a premium of certain amount to insurance provider company so that in case of unfortunate accident by the vehicle, the insurance provider company will provide a compensation (called \u2018sum assured\u2019) to the customer.\n\nBuilding a model to predict whether a customer would be interested in Vehicle Insurance is extremely helpful for the company because it can then accordingly plan its communication strategy to reach out to those customers and optimise its business model and revenue. \n\nNow, in order to predict, whether the customer would be interested in Vehicle insurance, you have information about demographics (gender, age, region code type), Vehicles (Vehicle Age, Damage), Policy (Premium, sourcing channel) etc."}}