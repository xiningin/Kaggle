{"cell_type":{"696129a3":"code","ca674b4b":"code","fc370f70":"code","6f0d00e1":"code","1e8fbc21":"code","734d201a":"code","c8811ca8":"code","c0400ef4":"code","c9a2d2f6":"code","00dc9c75":"code","25ffa981":"code","6d7d894b":"code","4f0b9634":"code","10b71726":"code","fbd3d673":"code","c973d51b":"code","45f631e2":"code","2fe37455":"code","1d947b14":"code","ee31b4b7":"code","902d3a99":"code","3e2d8813":"markdown","2678ea04":"markdown","d86af20c":"markdown","8928f2ed":"markdown","4275e793":"markdown"},"source":{"696129a3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","ca674b4b":"! git clone https:\/\/github.com\/NVIDIA\/apex\n! cd apex\n! pip install -v --no-cache-dir --global-option=\"--cpp_ext\" --global-option=\"--cuda_ext\" \/kaggle\/working\/apex\/","fc370f70":"!pip install simpletransformers","6f0d00e1":"from simpletransformers.classification import ClassificationModel","1e8fbc21":"# Lets import the csv file in pandas dataframe first\ntrain_df = pd.read_csv('\/kaggle\/input\/ttc4900\/7all.csv', encoding='utf-8', header=None, names=['cat', 'text'])","734d201a":"# Check the df\ntrain_df.head()","c8811ca8":"# unique categories\nprint(train_df.cat.unique())\nprint(\"Total categories\",len(train_df.cat.unique()))\n","c0400ef4":"# convert string labels to integers\ntrain_df['labels'] = pd.factorize(train_df.cat)[0]\n\ntrain_df.head()","c9a2d2f6":"# Let's create a train and test set\nfrom sklearn.model_selection import train_test_split\n\ntrain, test = train_test_split(train_df, test_size=0.2, random_state=42)","00dc9c75":"train.shape, test.shape","25ffa981":"# Lets define the model with the parameters (important here is the number of labels and nr of epochs)\n\nmodel = ClassificationModel('bert', 'bert-base-multilingual-uncased', num_labels=7, \n                            args={'reprocess_input_data': True, 'overwrite_output_dir': True, 'num_train_epochs': 3})","6d7d894b":"# Now lets fine tune bert with the train set\nmodel.train_model(train)","4f0b9634":"# Let's evaluate this finetuned model with the test set\nresult, model_outputs, wrong_predictions = model.eval_model(test)","10b71726":"predictions = model_outputs.argmax(axis=1)","fbd3d673":"predictions[0:10]","c973d51b":"actuals = test.labels.values\nactuals[0:10]","45f631e2":"# Now lets see the accuracy one the test set\nfrom sklearn.metrics import accuracy_score\naccuracy_score(actuals, predictions)","2fe37455":"sample_text = test.iloc[10]['text']\nprint(sample_text)","1d947b14":"# Lets predict the text of sample_text:\nmodel.predict([sample_text])","ee31b4b7":"# Lets see what the truth was\ntest.iloc[10]['labels']\n","902d3a99":"# And this was category: \ntest.iloc[10]['cat']","3e2d8813":"An accuracy of 90.3%. Not bad!!! ","2678ea04":"# Text Classification with BERT for Turkish Language","d86af20c":"We need nvidia apex for 16 bit precision","8928f2ed":"We will use bert base multilingual uncased what has around 100+ language support. So Turkish is also supported","4275e793":"## Let's Download simpletransformers first\nSimpletransformers is a library what has some wrappers around huggingface transformers.\nYou can easily fine-tune and do some NLP stuff with it like NER or in this case Classification"}}