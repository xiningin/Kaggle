{"cell_type":{"e8b76ee5":"code","bd11a018":"code","fc91b7b8":"code","48510775":"code","47574a84":"code","e9fea1d3":"code","54e2976e":"code","2dc80911":"code","d4c6c099":"code","62509954":"code","fd93a141":"code","46d1e4e7":"code","384875ce":"code","0362fbd2":"code","e0b1dbb5":"code","1351e782":"code","bbeef901":"code","aa92523c":"code","1ec1ad95":"code","4eb84c96":"code","6cfaf8b8":"code","66360962":"code","2a8d38c4":"code","5d4cafb2":"code","66909d97":"markdown","5bfd2a49":"markdown","205ebd1e":"markdown","fffdfe4f":"markdown","4b8ffd9c":"markdown"},"source":{"e8b76ee5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bd11a018":"import pandas as pd \nimport numpy as np \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('darkgrid')","fc91b7b8":"df = pd.read_csv('\/kaggle\/input\/red-wine-quality-cortez-et-al-2009\/winequality-red.csv')\ndf.head()","48510775":"df.info()","47574a84":"# Check for Null Values\nnull_values = df.isnull().sum()[df.isnull().sum() > 0]\nlen(null_values)","e9fea1d3":"df.describe()","54e2976e":"df.groupby(['quality']).mean()","2dc80911":"sns.barplot(x=df['quality'].unique(), y=df['quality'].value_counts())\nplt.ylabel('Count')\nplt.xlabel('Wine Quality')\nplt.title('Number of wines for each quality category');","d4c6c099":"sns.boxplot(y=df['quality'].values)\nplt.title('Distribution of Wine Quality')\nplt.ylabel('Quality Category')\nplt.axhline(np.quantile(df['quality'].values, 0.75), 1, 0, color='red', linewidth=5, label='0.75 quantile')\nplt.legend();","62509954":"# Everything above the 0.75 quantile is considered to be good quality (quality=1) while everything below is considered being rather bad quality (quality=0)\nborder = np.quantile(df['quality'].values, 0.75)\ndf['quality'] = [1 if i>border else 0 for i in df['quality']]\ndf['quality'].head().to_frame()","fd93a141":"X_data = df.drop(['quality'], axis=1).values\ny_data = df['quality'].values","46d1e4e7":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nscaler.fit(X_data)\nX_data = scaler.transform(X_data.astype(float))","384875ce":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X_data, y_data, test_size=0.3, random_state=4)\nprint ('Train set:', X_train.shape,  y_train.shape)\nprint ('Test set:', X_test.shape,  y_test.shape)","0362fbd2":"# Create K-Nearest Neighbour and calculate accuracy for different 'Ks'\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn import metrics\n\nKs = 50\nmean_acc = np.zeros((Ks-1))\n\nfor n in range(1, Ks):\n    # Train Model and Predict\n    clm = KNeighborsClassifier(n_neighbors=n).fit(X_train, y_train)\n    yhat = clm.predict(X_test)\n    mean_acc[n-1] = metrics.accuracy_score(y_test, yhat)\n\nbest_K = mean_acc.argmax()+1\nprint('Maximum Accuracy achieved:', mean_acc.max(), 'at', best_K)","e0b1dbb5":"plt.plot(range(1, Ks), mean_acc)\nplt.title('Accuracy for each K-Nearest-Neighbour')\nplt.xlabel('No. of nearest Neighbours')\nplt.ylabel('Accuracy');","1351e782":"# Evaluate Model with a distplot\ndef evaluate_distplot(y_test, yhat):\n    \"\"\"\n    y_test: Test-Data (Target)\n    yhat: Predicted Data (Target) \n    \"\"\"\n    y_test_std = y_test.std()\n    y_test_mean = y_test.mean()\n    y_test_median = np.median(y_test)\n    sns.set_style(\"darkgrid\")\n    sns.kdeplot(y_test, label='Actual Value')\n    sns.kdeplot(yhat, label='Predicted Value')\n    plt.axvline(y_test_mean, 1, 0, color='black', label='Mean of Test-Data')\n    plt.axvline(y_test_mean+y_test_std, 1, 0, color='grey')\n    plt.axvline(y_test_mean-y_test_std, 1, 0, color='grey', label='+\/- 1 standard deviation')\n    plt.axvline(y_test_median, 1, 0, color='darkblue', label='Median of Test-Data')\n    plt.legend()\n    plt.title('Test Data Prediction vs. Actual Value')\n    plt.show()","bbeef901":"clm = KNeighborsClassifier(n_neighbors=best_K).fit(X_train, y_train)\nyhat = clm.predict(X_test)\nevaluate_distplot(y_test, yhat);","aa92523c":"from sklearn import tree","1ec1ad95":"clm_tree = tree.DecisionTreeClassifier(criterion=\"entropy\")\nclm_tree.fit(X_train, y_train)\npred_tree = clm_tree.predict(X_test)\nprint(\"Decision Trees's Accuracy:\", metrics.accuracy_score(y_test, pred_tree))","4eb84c96":"# Extract Features & Class Names\nfeature_names = df.drop(['quality'], axis=1) # get feature columns\nfeature_names = list(feature_names.columns) # get feature columns\n\nclass_names = list(df['quality'].value_counts().index) # get classification names\nclass_names = list(map(str, class_names))\nclass_names.sort()","6cfaf8b8":"fig, axes = plt.subplots(nrows = 1,ncols = 1,figsize = (4,4), dpi=600)\na = tree.plot_tree(clm_tree, feature_names=feature_names, class_names=class_names, filled=True);\nfig.savefig('decision_tree.png');\nprint('Export Done')","66360962":"evaluate_distplot(y_test, pred_tree)","2a8d38c4":"from sklearn.ensemble import RandomForestClassifier\n\nn = 10\nmean_acc = np.zeros((n))\n\nfor i in range(0, n):\n    clm_rf = RandomForestClassifier()\n    clm_rf.fit(X_train, y_train)\n    yhat = clm_rf.predict(X_test)\n    acc = metrics.accuracy_score(y_test, yhat)\n    mean_acc[i] = acc\n    print(f'{i+1}\/{n} done: {round(acc, 4)}')\n\nprint(f\"Mean Accuracy after {n} runs: {mean_acc.mean()}\")","5d4cafb2":"evaluate_distplot(y_test, yhat)","66909d97":"# K-Nearest-Neighbor","5bfd2a49":"<h1>SUMMARY<\/h1>\n<p>Different classification methodologies had different accuracies:<\/p>\n<li>Nearest Neighbor: ~0.89 with K = 2<\/li>\n<li>Decision Tree: ~0.88<\/li>\n<li>Random Forest: ~0.9 (average after 10 runs)<\/li>\n<br>\n<p>Based on the results, we would chose the Random Forest Classificator<\/p>","205ebd1e":"# Decision Tree Classification","fffdfe4f":"# Train & Test Data","4b8ffd9c":"# Random Forest"}}