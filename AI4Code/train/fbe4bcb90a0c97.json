{"cell_type":{"2613251b":"code","b5382ba8":"code","594ca8bf":"code","4f647161":"code","ecb223d1":"code","91c9d06d":"code","4480cf1e":"code","13f71f56":"code","2768938e":"code","13c48c15":"code","9cb6ee32":"code","fac2fe61":"code","c6ba9939":"code","a3cb3fe9":"code","f5ed94d7":"code","96b1e8f3":"code","cf9e2984":"code","6adf203e":"code","e812ed2d":"code","8abc2189":"code","d9468341":"code","66c11c43":"code","1319cd3e":"code","2f4f980c":"code","40002daa":"code","f3c8cd26":"code","6ff0e35b":"code","a79ae604":"code","37da000b":"code","a5a15f94":"code","95184075":"code","da6a4057":"code","633b7276":"code","2884b23a":"code","1f7b88a4":"code","773d1ccf":"code","e6032840":"code","099f7021":"code","8dec8b6b":"code","7aac9587":"code","2dfc7002":"code","7e04da6d":"code","85a765a5":"code","d2c1e38d":"code","c0c1dad8":"code","e8061f96":"code","01b2d1ce":"code","a0ce45e1":"code","99d5aedb":"code","23359475":"code","365e9715":"code","25578005":"code","e4872fe6":"code","9c371fc1":"code","703bd1fe":"markdown","12c3345c":"markdown","bc9026f2":"markdown","947ed6db":"markdown","3f06db26":"markdown","7a88a59f":"markdown","10bf5e37":"markdown","855d34db":"markdown","b2db10c3":"markdown"},"source":{"2613251b":"#!pip install opendatasets --upgrade --quiet","b5382ba8":"#import opendatasets as od","594ca8bf":"#dataset_url = 'https:\/\/www.kaggle.com\/alxmamaev\/flowers-recognition'","4f647161":"#od.download(dataset_url)","ecb223d1":"data_dir = '..\/input\/flowers-recognition\/flowers\/flowers'","91c9d06d":"import os\nfor file in os.listdir(data_dir):\n    print(data_dir+file)","4480cf1e":"os.listdir(data_dir)","13f71f56":"for cls in os.listdir(data_dir):\n  print(cls, ':', len(os.listdir(data_dir + '\/' + cls)))","2768938e":"from torchvision.datasets import ImageFolder","13c48c15":"dataset = ImageFolder(data_dir)","9cb6ee32":"len(dataset)","fac2fe61":"dataset[0]","c6ba9939":"dataset.classes","a3cb3fe9":"import matplotlib.pyplot as plt\n%matplotlib inline","f5ed94d7":"img, label = dataset[0]\nplt.imshow(img);","96b1e8f3":"import torchvision.transforms as tt\n\ndataset = ImageFolder(data_dir, tt.Compose([tt.Resize(64), \n                                            tt.RandomCrop(64), \n                                            tt.ToTensor()]))","cf9e2984":"img, label = dataset[0]\nplt.imshow(img.permute(1, 2, 0));","6adf203e":"val_pct = 0.1 # validation %\nval_size = int(val_pct * len(dataset))\n\ntrain_size = len(dataset) - val_size\n\ntrain_size, val_size","e812ed2d":"from torch.utils.data import random_split\n\ntrain_ds, valid_ds = random_split(dataset, [train_size, val_size])\nlen(train_ds), len(valid_ds)","8abc2189":"\nfrom torch.utils.data import DataLoader\n\nbatch_size = 64\n\ntrain_dl = DataLoader(train_ds, \n                      batch_size, \n                      shuffle=True, \n                      num_workers=4, \n                      pin_memory=True)\n\nval_dl = DataLoader(valid_ds, \n                    batch_size*2, \n                    num_workers=4, \n                    pin_memory=True)","d9468341":"from torchvision.utils import make_grid\n\ndef show_batch(dl):\n    for images, labels in dl:\n        fig, ax = plt.subplots(figsize=(12, 6))\n        ax.set_xticks([]); ax.set_yticks([])\n        ax.imshow(make_grid(images, nrow=16).permute(1, 2, 0))\n        break","66c11c43":"show_batch(train_dl)","1319cd3e":"import torch\n\ndef get_default_device():\n    \"\"\"Pick GPU if available, else CPU\"\"\"\n    if torch.cuda.is_available():\n        return torch.device('cuda')\n    else:\n        return torch.device('cpu')\n    \ndef to_device(data, device):\n    \"\"\"Move tensor(s) to chosen device\"\"\"\n    if isinstance(data, (list,tuple)):\n        return [to_device(x, device) for x in data]\n    return data.to(device, non_blocking=True)\n\nclass DeviceDataLoader():\n    \"\"\"Wrap a dataloader to move data to a device\"\"\"\n    def __init__(self, dl, device):\n        self.dl = dl\n        self.device = device\n        \n    def __iter__(self):\n        \"\"\"Yield a batch of data after moving it to device\"\"\"\n        for b in self.dl: \n            yield to_device(b, self.device)\n\n    def __len__(self):\n        \"\"\"Number of batches\"\"\"\n        return len(self.dl)","2f4f980c":"torch.cuda.is_available()","40002daa":"device = get_default_device()\ndevice","f3c8cd26":"img, label = dataset[0]","6ff0e35b":"img.device","a79ae604":"img_gpu = to_device(img, device)\nimg_gpu.device","37da000b":"train_dl = DeviceDataLoader(train_dl, device)\nvalid_dl = DeviceDataLoader(val_dl, device)","a5a15f94":"import torch.nn as nn\nimport torch.nn.functional as F\nclass ImageClassificationBase(nn.Module):\n    def training_step(self, batch):\n      '''calculate loss for a batch of training data'''\n\n      images, labels = batch \n      out = self(images)                  # Generate predictions\n      loss = F.cross_entropy(out, labels) # Calculate loss\n      return loss\n    \n    def validation_step(self, batch):\n      '''calculate loss for a batch of validation data'''\n      images, labels = batch \n      out = self(images)                    # Generate predictions\n      loss = F.cross_entropy(out, labels)   # Calculate loss\n      acc = accuracy(out, labels)           # Calculate accuracy\n      return {'val_loss': loss.detach(), 'val_acc': acc}\n        \n    def validation_epoch_end(self, outputs):\n        batch_losses = [x['val_loss'] for x in outputs]\n        epoch_loss = torch.stack(batch_losses).mean()   # Combine losses\n        batch_accs = [x['val_acc'] for x in outputs]\n        epoch_acc = torch.stack(batch_accs).mean()      # Combine accuracies\n        return {'val_loss': epoch_loss.item(), 'val_acc': epoch_acc.item()}\n    \n    def epoch_end(self, epoch, result):\n        print(\"Epoch [{}], train_loss: {:.4f}, val_loss: {:.4f}, val_acc: {:.4f}\".format(\n            epoch, result['train_loss'], result['val_loss'], result['val_acc']))\n        \ndef accuracy(outputs, labels):\n    _, preds = torch.max(outputs, dim=1)\n    return torch.tensor(torch.sum(preds == labels).item() \/ len(preds))","95184075":"@torch.no_grad()\ndef evaluate(model, val_loader):\n  ''' Evaluates the model's performance on the validation set '''\n  model.eval()\n  outputs = [model.validation_step(batch) for batch in val_loader]\n  return model.validation_epoch_end(outputs)\n\ndef fit(epochs, lr, model, train_loader, val_loader, opt_func=torch.optim.SGD):\n    history = []\n    optimizer = opt_func(model.parameters(), lr)\n    for epoch in range(epochs):\n        # Training Phase \n        model.train()\n        train_losses = []\n        for batch in train_loader:\n            loss = model.training_step(batch)\n            train_losses.append(loss)\n            loss.backward()\n            optimizer.step()\n            optimizer.zero_grad()\n        # Validation phase\n        result = evaluate(model, val_loader)\n        result['train_loss'] = torch.stack(train_losses).mean().item()\n        model.epoch_end(epoch, result)\n        history.append(result)\n    return history","da6a4057":"def conv_block(in_channels, out_channels, pool=False):\n    layers = [nn.Conv2d(in_channels, out_channels, kernel_size=3, padding=1), \n              nn.BatchNorm2d(out_channels), \n              nn.ReLU(inplace=True)]\n    if pool: layers.append(nn.MaxPool2d(2))\n    return nn.Sequential(*layers)\n\nclass ResNet9(ImageClassificationBase):\n    def __init__(self, in_channels, num_classes):\n        super().__init__()\n        # input: 128 x 3 x 64 x 64\n        self.conv1 = conv_block(in_channels, 64) #  128 x 64 x 64 x 64\n        self.conv2 = conv_block(64, 128, pool=True) # 128 x 128 x 32 x 32\n        self.res1 = nn.Sequential(conv_block(128, 128),  # 128 x 128 x 32 x 32\n                                  conv_block(128, 128)) #  128 x 512 x 16 x 16\n        \n        self.conv3 = conv_block(128, 256, pool=True) \n        self.conv4 = conv_block(256, 512, pool=True)\n        self.res2 = nn.Sequential(conv_block(512, 512), conv_block(512, 512))\n        \n        self.classifier = nn.Sequential(nn.AdaptiveMaxPool2d(1), \n                                        nn.Flatten(), \n                                        nn.Dropout(0.2),\n                                        nn.Linear(512, num_classes))\n        \n    def forward(self, xb):\n        out = self.conv1(xb)\n        out = self.conv2(out)\n        out = self.res1(out) + out\n        out = self.conv3(out)\n        out = self.conv4(out)\n        out = self.res2(out) + out\n        out = self.classifier(out)\n        return out","633b7276":"model = to_device(ResNet9(3, len(dataset.classes)), device)\nmodel","2884b23a":"model.conv1[0].weight","1f7b88a4":"model.conv1[0].weight.device","773d1ccf":"torch.cuda.empty_cache()\nfor batch in train_dl:\n  images, labels = batch\n  print('images.shape', images.shape)\n  print('images.device',images.device)\n  preds = model(images)\n  print('preds.shape', preds.shape)\n  print(preds)\n  \n  break","e6032840":"history = [evaluate(model, valid_dl)]\nhistory","099f7021":"history += fit(5, 0.001, model, train_dl, valid_dl, torch.optim.Adam)","8dec8b6b":"history += fit(5, 0.0001, model, train_dl, valid_dl, torch.optim.Adam)","7aac9587":"history += fit(5, 0.00001, model, train_dl, valid_dl, torch.optim.Adam)","2dfc7002":"history += fit(5, 0.0001, model, train_dl, valid_dl, torch.optim.SGD)","7e04da6d":"history += fit(5, 0.00001, model, train_dl, valid_dl, torch.optim.SGD)","85a765a5":"def plot_accuracies(history):\n    accuracies = [x['val_acc'] for x in history]\n    plt.plot(accuracies, '-x')\n    plt.xlabel('epoch')\n    plt.ylabel('accuracy')\n    plt.title('Accuracy vs. No. of epochs');","d2c1e38d":"plot_accuracies(history)","c0c1dad8":"def plot_losses(history):\n    train_losses = [x.get('train_loss') for x in history]\n    val_losses = [x['val_loss'] for x in history]\n    plt.plot(train_losses, '-bx')\n    plt.plot(val_losses, '-rx')\n    plt.xlabel('epoch')\n    plt.ylabel('loss')\n    plt.legend(['Training', 'Validation'])\n    plt.title('Loss vs. No. of epochs');","e8061f96":"plot_losses(history)","01b2d1ce":"def predict_image(img, model, classes):\n    # Convert to a batch of 1\n    xb = to_device(img.unsqueeze(0), device)\n    # Get predictions from model\n    yb = model(xb)\n    # Pick index with highest probability\n    _, preds  = torch.max(yb, dim=1)\n    # Retrieve the class label\n    return classes[preds[0].item()]","a0ce45e1":"def show_image_prediction(img, label):\n  plt.imshow(img.permute((1,2,0)))\n  pred = predict_image(img, model, dataset.classes)\n  print('Target:', dataset.classes[label])\n  print('Prediction:', pred)","99d5aedb":"show_image_prediction(*valid_ds[100])","23359475":"show_image_prediction(*valid_ds[352])","365e9715":"show_image_prediction(*valid_ds[265])","25578005":"show_image_prediction(*valid_ds[402])","e4872fe6":"show_image_prediction(*valid_ds[4])","9c371fc1":"torch.save(model.state_dict(), 'flower-resnet9.pth')","703bd1fe":"## Model ","12c3345c":"### Test with indivisual Images","bc9026f2":"## Download The Dataset\n\nUsing OpenDataset and Donwload the dataset from https:\/\/www.kaggle.com\/alxmamaev\/flowers-recognition","947ed6db":"Pass one batch of input tensor through the model","3f06db26":"# TO DO\n\n1. Pick a dataset\n2. Download The dataset\n3. Import the dataset using Pytorch\n4. Explore the dataset\n5. Prepare the dataset for training\n6. Train the Dataset \n7. Predict","7a88a59f":"## Training","10bf5e37":"### Model and Training Utiliies","855d34db":"## GPU Utilities","b2db10c3":"### Imoprt the datasets into Pytorch\n\nUse the `ImageFloder` class from `torchvision`"}}