{"cell_type":{"4065dedb":"code","838c2b68":"code","1b7d2a1a":"code","6cc79be4":"code","b6435b4d":"code","5871f769":"code","12b5543b":"code","fe28dbd7":"code","ab7c268e":"code","0a028da5":"code","07055249":"code","c8eb46dd":"code","3876e060":"code","31edef7f":"code","2990dea9":"code","09428f8e":"code","6ac5944b":"code","501e0007":"code","bbd66b3e":"code","29f3c24a":"code","c5f602b0":"code","1ffd69a1":"markdown"},"source":{"4065dedb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","838c2b68":"#Import Packages\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as mlib\nprint('Setup complete')","1b7d2a1a":"#import data\npath_train = '..\/input\/30-days-of-ml\/train.csv'\npath_test = '..\/input\/30-days-of-ml\/test.csv'\npath_submission = '..\/input\/30-days-of-ml\/sample_submission.csv'\ndf_train = pd.read_csv(path_train)\ndf_test = pd.read_csv(path_test)\nsubmission = pd.read_csv(path_submission)\nprint('Import has been completed!')","6cc79be4":"#check for nulls\n# kod n\u0259tic\u0259l\u0259rinin daha y\u0131\u011fcam g\u00f6r\u00fcnm\u0259si \u00fc\u00e7\u00fcn \".tolist()\"-d\u0259n istifad\u0259 olunub.\n# daha ayd\u0131n n\u0259tic\u0259 \u00fc\u00e7\u00fcn \".tolist()\"-i sil\u0259 bil\u0259rsiniz.\nprint(df_train.isna().sum().tolist())\nprint('=================================================')\nprint(df_test.isna().sum().tolist())\n# n\u0259tic\u0259d\u0259n d\u0259 g\u00f6r\u00fcnd\u00fcy\u00fc kimi datada \"null\" d\u0259y\u0259r yoxdur.","b6435b4d":"# train data info\ndf_train.info()\n#print('==================================================================')\n#test data info\n#print(test_data.info())","5871f769":"#train data describe\ndf_train.describe()","12b5543b":"# test data describe\n\ndf_test.describe()","fe28dbd7":"# train data review\n\ndf_train.head(3)","ab7c268e":"# test data review\n\ndf_test.head(3)","0a028da5":"# columns review\n\nprint(df_train.columns.tolist())\nprint('========================================================================================================================')\nprint(df_test.columns.tolist())\n\n# column types\nprint(df_train.dtypes.tolist())\nprint('========================================================================================================================')\nprint(df_test.dtypes.tolist())\n# dtype('0') --> \"object type\" dem\u0259kdir.","07055249":"#choose numeric variables\nnumeric_train = df_train[[column for column in df_train.columns.tolist()\n                      if df_train[column].dtypes == 'float64' and column != 'target']]\n\nnumeric_test = df_test[[column for column in df_test.columns.tolist()\n                      if df_test[column].dtypes == 'float64']]","c8eb46dd":"#choose x and y for train data\nx_train = numeric_train\ny_train = df_train['target']\nprint(x_train.head(2))\nprint(y_train.head(2))\n\n#choose x for test data\nx_test = numeric_test\nprint(x_test.head(2))","3876e060":"#split train data\nfrom sklearn.model_selection import train_test_split as tts\nx_tr_train, x_tr_test, y_tr_train, y_tr_test = tts(x_train, y_train, test_size = 0.2, random_state = 33)\n","31edef7f":"from xgboost import XGBRegressor","2990dea9":"# defining model\nregressXGB = XGBRegressor()","09428f8e":"#fit\nregressXGB.fit(x_tr_train, y_tr_train)","6ac5944b":"#predict\ny_tr_predict = regressXGB.predict(x_tr_test)","501e0007":"y_tr_predict","bbd66b3e":"#import package\nfrom sklearn.metrics import mean_squared_error\n\n#evaluate\n\nmean_squared_error(y_tr_predict, y_tr_test)","29f3c24a":"#prediction with regress model using test data x_test which contain all test data\ny_predict = regressXGB.predict(x_test)","c5f602b0":"# add id column\nprediction = pd.concat([df_test['id'], pd.DataFrame(y_predict)], axis=1)\n# rename columns\nprediction.columns = ['id', 'target']\n# save as \".csv\"\nprediction.to_csv('ml_30_2nd_try_XGB.csv', index = False)\n# print shape (optional)\nprediction.shape","1ffd69a1":"We train our model with our **train data**."}}