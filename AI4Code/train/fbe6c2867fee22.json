{"cell_type":{"f8c1c795":"code","6869e784":"code","bd7aa6b5":"code","726d3943":"code","41ed591b":"code","305956c1":"code","e7d8bf3f":"code","f2ac55f1":"code","6c8687c6":"code","3448bab5":"code","5d1bca43":"code","c61a3a54":"code","641754af":"code","1067b9c4":"code","787d5f51":"code","46cfef10":"code","ee54fc35":"code","b436fd55":"code","a2a302f6":"code","f9b07a46":"markdown","0a680712":"markdown","62173cef":"markdown","aff7519c":"markdown","ec899d59":"markdown","739aac92":"markdown","a2713b18":"markdown","7d66d01e":"markdown","3a1b7473":"markdown"},"source":{"f8c1c795":"from google.cloud import bigquery\n\nimport numpy as np \nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\n\nclient = bigquery.Client()","6869e784":"# Set options and functions\nsns.set(rc={'figure.figsize':(22,8)})\n\ndef get_atts(obj, filter=\"\"):\n    \"\"\"Helper function wich prints the public attributes and methods of the given object.\n    Can filter the results for simple term.\n    - `obj`: the Python object of interest\n    - `filter`, str: The filter term\n    \"\"\"\n    return [a for a in dir(obj) if not a.startswith('_') and filter in a]","bd7aa6b5":"#Print available tables in the crypto_bitcoin schema\n\nproject = 'bigquery-public-data'\ndataset = 'crypto_bitcoin'\n\n[ds.table_id for ds in client.list_tables(f'{project}.{dataset}')]","726d3943":"# Exploring bigquery-public-data.crypto_bitcoin.blocks blocks content \n\nq_blocks ='''SELECT \n              *       \n             FROM   `bigquery-public-data.crypto_bitcoin.blocks`  \n             order by timestamp_month\n             limit 10\n          '''\n\nblocks = client.query(q_blocks).to_dataframe()\nblocks.to_csv('blocks_head.csv')\nblocks.head()","41ed591b":"# Aggregating block size and count over months \n\nq_blocks_m ='''SELECT \n              timestamp_month\n            , count(*)   as n_blocks\n            , avg(size)  as mean_size\n            , avg(stripped_size)  as mean_stripped_size        \n           FROM   `bigquery-public-data.crypto_bitcoin.blocks`  \n           group by 1 \n        '''\n\nblocks_m = client.query(q_blocks_m).to_dataframe()\nblocks_m.to_csv('blocks_size_month.csv')\nblocks_m.head()","305956c1":"blocks_m['month'] = blocks_m.timestamp_month.astype(str).str[0:7]\nblocks_m = blocks_m.sort_values(by=['month']).copy()","e7d8bf3f":"p = sns.barplot(x = blocks_m['month'], y= blocks_m['n_blocks'], color='teal')\np.set_title('Number of blocks by month', size = 20)\np.set_xticklabels(p.get_xticklabels(), rotation=90, size = 9);","f2ac55f1":"p = sns.barplot(x = blocks_m['month'], y= blocks_m['mean_stripped_size'], color='teal')\np.set_title('Average block stripped size by month', size = 20)\np.set_xticklabels(p.get_xticklabels(), rotation=90, size = 9);","6c8687c6":"trx = \"\"\"\n      SELECT  \n     `hash`            as txn_hash\n     ,size             as txn_size\n     ,version          as txn_version\n     ,lock_time        as txn_lock_time\n     ,block_hash       as txn_block_hash\n     ,block_number     as txn_block_number\n     ,block_timestamp  as txn_block_timestamp\n     ,input_count      as txn_input_count\n     ,input_value      as txn_input_value\n     ,output_count     as txn_output_count\n     ,output_value     as txn_output_value      \n     ,is_coinbase      as txn_is_coinbase\n     ,fee              as txn_fee      \n     \n    FROM `bigquery-public-data.crypto_bitcoin.transactions`\n    order by block_timestamp\n    limit 50\n \n     \"\"\"\n\nquery_job = client.query(trx)\niterator  = query_job.result(timeout=60)\nrows      = list(iterator)\n\n# Transform the rows into a nice pandas dataframe\ntrx = pd.DataFrame(data=[list(x.values()) for x in rows], columns=list(rows[0].keys()))\ntrx.to_csv('transactions_head.csv')\ntrx.head()","3448bab5":"# Get the hash of first transaction and explore it on blockchain.com\ntrx.txn_hash[0]","5d1bca43":"#Lets see the pizza transaction, and how the recipient of those 10K btc spent the coins)\n\n\nq_anatomy = \"\"\"\n      SELECT  \n     `hash`           as txn_hash\n     ,block_timestamp as txn_block_tms\n     ,input_count     as txn_input_count\n     ,input_value     as txn_input_value\n     ,i.spent_transaction_hash   as nested_hash  \n     ,i.value         as nested_input_value\n     ,output_count    as txn_output_count\n     ,output_value    as txn_output_value\n     ,o.value         as nested_output_value     \n\n     FROM `bigquery-public-data.crypto_bitcoin.transactions`\n     JOIN UNNEST(inputs)  as i\n     JOIN UNNEST(outputs) as o\n     WHERE `hash` in\n     ('a1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d',\n     'cca7507897abc89628f450e8b1e0c6fca4ec3f7b34cccf55f3f531c659ff4d79')\n\n     ORDER BY block_timestamp\n     \"\"\"\n\nquery_job = client.query(q_anatomy)\niterator  = query_job.result(timeout=60)\nrows      = list(iterator)\n\n# Transform the rows into a nice pandas dataframe\nanatomy = pd.DataFrame(data=[list(x.values()) for x in rows], columns=list(rows[0].keys()))\nanatomy","c61a3a54":"anatomy.to_csv('anatomy_of_a_transaction.csv')","641754af":"# Transactions in today's blocks \n\nq1 = \"\"\"\n      SELECT  \n     `hash` as thash\n     ,o.script_hex       \n     ,o.value\n     ,output_count\n     ,output_value \n\n     FROM `bigquery-public-data.crypto_bitcoin.transactions`\n     JOIN UNNEST(outputs) as o\n     WHERE is_coinbase = True and\n           DATE(block_timestamp)  > DATE_SUB(current_date(), INTERVAL 3 DAY)\n           \n\"\"\"\n\nquery_job = client.query(q1)\niterator  = query_job.result(timeout=30)\nrows      = list(iterator)\n\n# Transform the rows into a nice pandas dataframe\nq1 = pd.DataFrame(data=[list(x.values()) for x in rows], columns=list(rows[0].keys()))\nq1","1067b9c4":"q1.to_csv('todays_txn_explore.csv')","787d5f51":"q2 = \"\"\"\n      SELECT \n      \n     date(block_timestamp) as day \n     ,o.type\n     ,count(*) as total\n\n     FROM `bigquery-public-data.crypto_bitcoin.transactions`\n     JOIN UNNEST(outputs) as o\n     WHERE block_timestamp >= '2020-01-01'\n     group by 1,2\n     \n           \n\"\"\"\n\nquery_job = client.query(q2)\niterator  = query_job.result(timeout=30)\nrows      = list(iterator)\n\n# Transform the rows into a nice pandas dataframe\nq2 = pd.DataFrame(data=[list(x.values()) for x in rows], columns=list(rows[0].keys()))\nq2","46cfef10":"q2.to_csv('txn_type.csv')","ee54fc35":"q2 = \"\"\"\n      SELECT  \n     `hash` as thash\n     ,i.script_hex       \n     ,i.value\n     ,input_count\n     ,input_value \n\n     FROM `bigquery-public-data.crypto_bitcoin.transactions`\n     JOIN UNNEST(inputs) as i\n     WHERE is_coinbase = False and\n     block_timestamp_month <= '2010-01-01'\n           \n\"\"\"\n\nquery_job = client.query(q2)\niterator  = query_job.result(timeout=30)\nrows      = list(iterator)\n\n# Transform the rows into a nice pandas dataframe\nq2 = pd.DataFrame(data=[list(x.values()) for x in rows], columns=list(rows[0].keys()))\nq2","b436fd55":"q3.loc['outputs']","a2a302f6":"q3.to_csv('analyzing_in_detail.csv')","f9b07a46":"# Outputs\n\n* **index**: 0-indexed number of an output within a transaction used by a later transaction to refer to that specific output\n* **script_asm**: Symbolic representation of the bitcoin's script language op-codes\n* **script_hex**: Hexadecimal representation of the bitcoin's script language op-codes\n* **required_signatures**: The number of signatures required to authorize spending of this output\n* **type**: The address type of the output\n* **addresses**: Addresses which own this output\n* **value**: The value in base currency attached to this output","0a680712":"# Blocks","62173cef":"**Transaction types by day**","aff7519c":"### Exploring a specific transaction\n\nThe previously mentioned transaction was the first one, and involves 50 btc that have never been spent, so it has no input (was created from mining) and no linked transaction after that (never spent). To go deeper into a more typical transaction that has inputs and outputs, we need the nested tables inputs and outputs.\n\nA good example for is the \ud83c\udf55 transaction, with hash a1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d we can pull information from the three tables. The pizza transaction is the first known use of Bitcoin to buy delicious food. It was broadcasted to the network on May 22, 2010, after Laszlo Hanyecz paid 10,000 for two pizzas.","ec899d59":"\nField descriptions [from the bitcoin-etl-airflow repo](https:\/\/github.com\/blockchain-etl\/bitcoin-etl-airflow\/blob\/master\/dags\/resources\/stages\/enrich\/schemas\/blocks.json).\n\n* **hash**: Hash of this block\n* **size**: The size of block data in bytes\n* **stripped_size**: The size of block data in bytes excluding witness data\n* **weight**: Three times the base size plus the total size. [More info.](https:\/\/github.com\/bitcoin\/bips\/blob\/master\/bip-0141.mediawiki)\n* **number**: The number of the block\n* **version**: Protocol version specified in block header\n* **merkle_root**: The root node of a Merkle tree, where leaves are transaction hashes \n* **timestamp**: Block creation timestamp specified in block header\n* **timestamp_month**: Month of Block creation timestamp specified in block header\n* **nonce**: Difficulty solution specified in block header\n* **bits**: Difficulty threshold specified in block header\n* **coinbase_param**: Data specified in the coinbase transaction of this block \n* **transaction_count**: Number of transactions included in this block\n","739aac92":"# Transactions\n\nExploring Transactions table, ignoring the nested tables inputs and outputs. \n\n* **hash**: The hash of this transaction \n* **size**: The size of this transaction in bytes \n* **virtual_size**: The virtual transaction size (differs from size for witness transactions) \n* **version**: Protocol version specified in block which contained this transaction \n* **lock_time**: Earliest time that miners can include the transaction in their hashing of the Merkle root to attach it in the latest block of the blockchain \n* **block_hash**: Hash of the block which contains this transaction \n* **block_number**: Number of the block which contains this transaction \n* **block_timestamp**: Timestamp of the block which contains this transaction \n* **block_timestamp_month**: Month of the block which contains this transaction \n* **input_count**: The number of inputs in the transaction \n* **output_count**: The number of outputs in the transaction \n* **input_value**: \"Total value of inputs in the transaction \n* **output_value**: Total value of outputs in the transaction \n* **is_coinbase**: true if this transaction is a coinbase transaction \n* **fee**: The fee paid by this transaction \n* **inputs**: This includes a json formatted field with all the variables in the Inputs table, which is explored later in the notebook. \n* **outputs**: Also json field with all the outputs, explored later as well. ","a2713b18":"Without those nested tables, there's no much \"transaction\" information you can get. For example, for the first transaction, we can see it is_coinbase = True since it's the first transaction included in a block, and the output value of 5000000000, in sats, was the 50 BTC reward for processing a block back in 2009. Checking Bitcoin Explorer, using the transaction hash, we can see the same info + some info about output (the address that it was sent to). \n\n![Screen Shot 2021-07-24 at 5.41.43 PM.png](attachment:af96567e-2cb5-48c5-9d55-c40fc8e5861c.png)","7d66d01e":"This post is an exploratory approach to Bitcoin Blockchain data. The goal of this EDA is to become familiarized with blockchain data structure, and where to find information about blocks, transactions, inputs and output - the main elements of the blockchain.\n\nThere are four tables on Big Query:\n- Blocks\n- Transactions\n- Inputs\n- Outputs\n\nTo explore Blocks table, I extract the average size by month since 2009 and plot its distribution through time. To understand transaction table, I explore the first recorded transaction, and to understand how inputs and outputs are used, I analyze the pizza transaction \ud83c\udf55.","3a1b7473":"# Inputs\n\n* **index**: 0-indexed number of an input within a transaction\n* **spent_transaction_hash**: The hash of the transaction which contains the output that this input spends\n* **spent_output_index**: The index of the output this input spends\n* **script_asm**: Symbolic representation of the bitcoin's script language op-codes\n* **script_hex**: Hexadecimal representation of the bitcoin's script language op-codes\n* **sequence**: A number intended to allow unconfirmed time-locked transactions to be updated before being finalized; not * **currently** used except to disable locktime in a transaction\n* **required_signatures**: The number of signatures required to authorize the spent output\n* **type**: The address type of the spent output\n* **addresses**: Addresses which own the spent output\n* **value**: The value in base currency attached to the spent output"}}