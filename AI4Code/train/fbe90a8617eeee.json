{"cell_type":{"68684594":"code","3a5cd40a":"code","63f4b3bd":"code","3c7f9d0b":"code","631248b0":"code","abccb5ca":"code","a73981e2":"code","8555e2c1":"code","ba513e26":"code","9adac622":"code","ef64ce1e":"code","ae22eaf8":"code","130b2375":"code","d88c6ef4":"code","d0084391":"code","fa58c02c":"code","a5821ae5":"code","c0062c61":"code","31ab3ad3":"code","71cb8c71":"code","e6e2637d":"code","1d836f78":"code","05939764":"code","444e16da":"code","5d300e38":"code","be4d2df3":"code","8d90f444":"code","02575d03":"code","1f861e89":"code","1474bb67":"code","ec2c660c":"code","3a880339":"code","af43ebe7":"code","ab43d0ca":"code","6a0d50aa":"code","ba855f39":"code","802e3d8b":"code","4af7f141":"code","aa4b9665":"code","20385e17":"code","406e84f1":"code","b276fe1a":"code","1f310d2c":"code","01bafab8":"code","c665186b":"code","7c02b500":"code","ad0dccac":"code","0f883aa3":"code","37651126":"code","448429e7":"code","0c090c38":"code","47759927":"code","92231ee0":"code","78cb3202":"code","80b13de4":"code","ba68738a":"code","e628d2d3":"code","b75680cf":"code","843a5667":"code","dc61c3fe":"code","0ae3a3b6":"code","4070b714":"code","dcfa4bf5":"code","5f77fb5b":"code","b2d92077":"code","f003b003":"code","a0e5ad09":"code","67b8eafa":"code","f448b2da":"code","7f78bf87":"code","85f04e3e":"code","56ccc81b":"code","519b0efd":"code","97afa664":"code","5355bf9e":"code","3d711b63":"code","cb77ad92":"code","b9e06ec0":"code","5506c3c1":"code","d6ae8738":"code","868bfdb2":"code","cdb1604c":"code","e4ee1801":"code","b231f004":"code","285a9af2":"code","5f6498da":"code","1f641215":"code","7fd55d17":"code","1e40ce86":"code","50676ad1":"code","d2fee923":"code","a8e8448b":"code","9f9b42bc":"code","bdc00e77":"code","d0a9017e":"code","83cdc85a":"code","f88c627d":"code","2ec1492b":"code","bead7028":"markdown","41b4d2a9":"markdown","c25cb734":"markdown","d5040628":"markdown","6d2d688b":"markdown","87a0b2eb":"markdown","003de9dd":"markdown","9cbb6fa5":"markdown","188bf2c5":"markdown","c2f63af6":"markdown","84678f5d":"markdown","bb515cf5":"markdown","4c007f81":"markdown","538c83d1":"markdown","6591eabf":"markdown","60acb9ca":"markdown","bccfc146":"markdown","a95eee76":"markdown","503b7eae":"markdown","3539e200":"markdown","434acefe":"markdown","56c1684d":"markdown","3d2e0805":"markdown","268cc486":"markdown","664d7cd6":"markdown","620d3beb":"markdown","26d0857a":"markdown","dcced2a1":"markdown","8eb835d6":"markdown","8831535c":"markdown","e53ed24e":"markdown","65f4ab17":"markdown","73fb4bd8":"markdown","8f463a45":"markdown","b715ac2e":"markdown","62874233":"markdown","cdbe9933":"markdown","68360e6f":"markdown","6cca111a":"markdown","521da164":"markdown","ef31b1c4":"markdown","660162c4":"markdown","7e633b64":"markdown","c296b653":"markdown","f9d37f8f":"markdown","886e7e4d":"markdown","38cc56fa":"markdown","995d6c5a":"markdown","e743babe":"markdown","d0f9e334":"markdown","d78d1bef":"markdown","95b64452":"markdown","9a2d4faa":"markdown","92889559":"markdown"},"source":{"68684594":"%matplotlib inline\n\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt","3a5cd40a":"# Download the data\ntrain_data = pd.read_csv('..\/input\/titanic\/train.csv')\ntest_data = pd.read_csv('..\/input\/titanic\/test.csv')\ndata = pd.concat([train_data, test_data]).reset_index().drop(['index'], axis=1)","63f4b3bd":"train_data.head(5)","3c7f9d0b":"train_data.dtypes","631248b0":"train_data.select_dtypes(include = \"object\").describe()","abccb5ca":"train_data.select_dtypes(exclude = \"object\").describe()","a73981e2":"test_data.tail(5)","8555e2c1":"print(\"In train data there are {} categorical features; \\n\\t\\t\\t {} numerical features.\".format(\n    train_data.select_dtypes(include = ['object']).columns.size,\n    train_data.drop('Survived', axis = 1).select_dtypes(exclude = ['object']).columns.size))\n\nprint(\"In test data there are {} categorical features; \\n\\t\\t\\t {} numerical features.\".format(\n    test_data.select_dtypes(include = ['object']).columns.size,\n    test_data.select_dtypes(exclude = ['object']).columns.size))","ba513e26":"sns.set_style(\"whitegrid\")","9adac622":"def plot_grid(data, fig_size, grid_size, plot_type, target = ''):\n    \"\"\"\n    Custom function for plotting grid of plots.\n    It takes: DataFrame of data, size of a grid, type of plots, string name of target variable;\n    And it outputs: grid of plots.\n    Source: https:\/\/www.kaggle.com\/aipi12\/top-1-approach#2.1-Target-variable-and-numerical-data\n    \"\"\"\n    fig = plt.figure(figsize = fig_size)\n    if plot_type == 'histplot':\n        for i, column_name in enumerate(data.select_dtypes(exclude = 'object').columns):\n            fig.add_subplot(grid_size[0], grid_size[1], i + 1)\n            plot = sns.histplot(data[column_name], kde = True, color = 'red', stat = 'count')\n            plot.set_xlabel(column_name, fontsize = 16)\n    if plot_type == 'boxplot':\n        for i, column_name in enumerate(data.select_dtypes(exclude = 'object').columns):\n            fig.add_subplot(grid_size[0], grid_size[1], i + 1)\n            plot = sns.boxplot(x = data[column_name], color = 'red')\n            plot.set_xlabel(column_name, fontsize = 16)\n    if plot_type == 'scatterplot':\n        for i, column_name in enumerate(data.drop(target, axis = 1).select_dtypes(exclude = 'object').columns):\n            fig.add_subplot(grid_size[0], grid_size[1], i + 1)\n            plot = sns.scatterplot(x = data[column_name], y = data[target], color = 'red')\n            plot.set_xlabel(column_name, fontsize = 16)\n    if plot_type == 'boxplot_cat':\n        for i, column_name in enumerate(data.select_dtypes(include = 'object').columns):\n            fig.add_subplot(grid_size[0], grid_size[1], i + 1)\n            sort = data.groupby([column_name])[target].median().sort_values(ascending = False) # This is here to make sure boxes are sorted by median\n            plot = sns.boxplot(x = data[column_name], y = data[target], order = sort.index, palette = 'Reds')\n            plot.set_xlabel(column_name, fontsize = 16)\n    plt.tight_layout()","ef64ce1e":"plot_grid(train_data, grid_size = (3,3), fig_size = (10,9), plot_type = 'histplot')","ae22eaf8":"plt.figure(figsize = (12,6))\nsns.scatterplot(x = train_data['Fare'], y = train_data['Survived'], alpha = 0.3, color = 'red')","130b2375":"train_data[(train_data['Fare'] >= 450) == True]","d88c6ef4":"embarked = train_data.loc[:,['Fare', 'Pclass', 'Embarked']].copy()","d0084391":"sort = embarked.groupby('Embarked').median().sort_values(by = 'Fare', ascending = False)\n\nplt.figure(figsize = (12,6))\nsns.boxplot(x='Embarked', y='Fare', data=embarked, order = sort.index)\nplt.annotate('C: Cherbourg \\nS: Southampton \\nQ: Queenstown', xy = (2,440), \n            bbox=dict(boxstyle=\"round\", alpha=0.1))","fa58c02c":"embarked_clean = embarked[(embarked['Fare'] < 400) & (embarked['Fare'] != 0)]\n\nsort = embarked_clean.groupby('Embarked').median().sort_values(by = 'Fare', ascending = False)\n\nplt.figure(figsize = (12,6))\nsns.boxplot(x='Embarked', y='Fare', data=embarked_clean, order = sort.index)\nplt.annotate('C: Cherbourg \\nS: Southampton \\nQ: Queenstown', xy = (2,150), \n            bbox=dict(boxstyle=\"round\", alpha=0.1))\n\nplt.yscale('log')","a5821ae5":"sns.countplot(x = 'Embarked', hue = 'Pclass', data = embarked)","c0062c61":"cabin_fare = train_data.loc[:,[\"Pclass\",\"Ticket\",\"Fare\", \"Cabin\"]].copy()\ncabin_fare.head(5)","31ab3ad3":"cabin_fare_clean = cabin_fare.dropna()","71cb8c71":"cabins = cabin_fare_clean['Cabin']","e6e2637d":"import re\n\nn_cabins = len(cabins)\ncabin_class = np.array(['']*n_cabins)\ncabin_number = np.array([0]*n_cabins)\nfor i in range(n_cabins):\n    cabin_class[i] = re.search('[A-Z]', cabins.iloc[i]).group()\n    try:\n        cabin_number[i] = re.search('\\d+', cabins.iloc[i]).group()\n    except AttributeError:\n        continue\n        \n\ncabin_fare_clean['Cabin class'] = cabin_class\ncabin_fare_clean['Cabin number'] = cabin_number\ncabin_fare_clean.head(2)","1d836f78":"sort_by_fare = cabin_fare_clean.groupby('Cabin class').median().sort_values(by = 'Fare', ascending = False)\nsns.boxplot(x = 'Cabin class', y = 'Fare', data = cabin_fare_clean, order = sort_by_fare.index)","05939764":"plt.figure(figsize = (12,6))\nsns.scatterplot(x = 'Cabin number', y = 'Fare', hue = 'Cabin class', data = cabin_fare_clean)","444e16da":"cabin_fare_clean.corr()","5d300e38":"tickets_data = train_data.loc[:,[\"Ticket\", \"Fare\", \"Pclass\"]].copy()","be4d2df3":"def group_by_ticket(tickets, key, diff):\n    \"\"\"\n    Group integer tickets according to their number\n    differences.\n    \"\"\"\n    n = len(tickets)\n    group_num = 0\n    dct = {}\n    \n    i = 0\n    while i+1 < n:\n        if  int(tickets[i + 1]) - int(tickets[i]) < diff:\n            dct[str(tickets[i])] = key\n        else:\n            dct[str(tickets[i])] = key\n            new_num = group_num + 1\n            key = key.replace(str(group_num), str(new_num))\n            group_num = new_num\n        i+=1\n    dct[str(tickets[i])] = key\n    \n    return group_num, dct","8d90f444":"tickets = np.unique(tickets_data[\"Ticket\"])\nint_tickets = tickets[:514].astype(int) # chose the ticket number that does not contain letters.\nint_tickets.sort()","02575d03":"plt.figure(figsize=(12,6))\ndiff = np.diff(int_tickets)\nsns.scatterplot(x = range(len(diff)), y = diff, color = 'red')\nplt.axhline(y = 900, color = 'black')\nplt.yscale('log')","1f861e89":"n, ticket_agents = group_by_ticket(int_tickets, '0', 900)\nn # agents who sold integer tickets","1474bb67":"tickets_with_series = tickets[514:]\ntickets_with_series.sort()\ntickets_with_series","ec2c660c":"for i in range(len(tickets_with_series)):\n    tickets_with_series[i] = tickets_with_series[i].replace('A.\/5.', 'A\/5')\n    tickets_with_series[i] = tickets_with_series[i].replace('A\/5.', 'A\/5')\n    tickets_with_series[i] = tickets_with_series[i].replace('A.5.', 'A\/5')\n    tickets_with_series[i] = tickets_with_series[i].replace('A\/4.', 'A\/4')\n    tickets_with_series[i] = tickets_with_series[i].replace('A4.', 'A\/4')\n    tickets_with_series[i] = tickets_with_series[i].replace('CA', 'C.A.')\n    tickets_with_series[i] = tickets_with_series[i].replace('F.C', 'F.C.C.')\n    tickets_with_series[i] = tickets_with_series[i].replace('P\/PP', 'PP')\n    tickets_with_series[i] = tickets_with_series[i].replace('SC\/AH Basle', 'SC\/AH')\n    tickets_with_series[i] = tickets_with_series[i].replace('SOTON\/OQ', 'SOTON\/O.Q.')\n    tickets_with_series[i] = tickets_with_series[i].replace('STON\/O 2.', 'STON\/O2.')\n    tickets_with_series[i] = tickets_with_series[i].replace('S.W.\/PP', 'SW\/PP')\n    tickets_with_series[i] = tickets_with_series[i].replace('W\/C', 'W.\/C.')\n    tickets_with_series[i] = tickets_with_series[i].replace('W.E.P.', 'WE\/P')\n    tickets_with_series[i] = tickets_with_series[i].replace('F.C.C..', 'F.C.C.')\n    tickets_with_series[i] = tickets_with_series[i].replace('F.C.C..C.', 'F.C.C.')\n    tickets_with_series[i] = tickets_with_series[i].replace('LINE', 'LINE 0')\n    tickets_with_series[i] = tickets_with_series[i].replace('C.A..', 'C.A.')\n\n\ntickets_with_series.sort()","3a880339":"import re\n\ndef group_by_ticket_alph(tickets, dct, n, key):\n    cur_series = re.search('\\\\S+(?=\\\\s+)', tickets[0]).group() # get the series of the tickets.\n    dct[tickets[0]] = key\n    group_num = n + 1\n    for i in range(1, len(tickets)):\n        new_series = re.search('\\\\S+(?=\\\\s+)', tickets[i]).group()\n        if new_series == cur_series:\n            dct[tickets[i]] = key\n        else:\n            new_num = group_num + 1\n            #print(group_num, new_num)\n            key = key.replace(str(group_num), str(new_num))\n            group_num = new_num\n            dct[tickets[i]] = key\n            cur_series = new_series\n    return dct\n\nticket_agents = group_by_ticket_alph(tickets = tickets_with_series, dct = ticket_agents, n = n, key = '{}'.format(n + 1))","af43ebe7":"tickets_data['Agent'] = tickets_data['Ticket'].map(ticket_agents)\ntickets_data.head()","ab43d0ca":"unique_tickets_data = tickets_data.copy()\nunique_tickets_data.drop_duplicates(subset = 'Ticket', keep = 'first', inplace = True)\nlen(tickets_data), len(unique_tickets_data)","6a0d50aa":"diff = np.diff(int_tickets)\ndif = np.insert(diff, 0, 0)","ba855f39":"def plt_tickets_fare(data, dif, fig_size, grid_size, cabin = False):\n    fig = plt.figure(figsize = fig_size)\n\n    start = 0\n    for i in range(54):\n        agent = data.loc[data['Agent'] == str(i), :]\n        end = len(agent)\n        time_lapse = np.cumsum(dif[start : end + start])\n        fig.add_subplot(grid_size[0], grid_size[1], i + 1)\n        plot = sns.scatterplot(x = time_lapse, y = 'Fare', hue = 'Pclass', data = agent, palette=\"deep\")\n        if cabin:\n            for j, txt in enumerate(agent['Cabin']):\n                if txt == txt:\n                    plot.annotate(txt, (time_lapse[j], agent['Fare'].iloc[j]))\n        \n        plot.set_xlabel('Agent_{}'.format(i), fontsize = 16)\n    plt.tight_layout()","802e3d8b":"plt_tickets_fare(unique_tickets_data, dif = dif, fig_size = (15, 40), grid_size = (18, 3))","4af7f141":"unique_tickets_data_cabin = tickets_data.copy()\nunique_tickets_data_cabin['Cabin'] = train_data['Cabin']\nunique_tickets_data.drop_duplicates(subset = 'Ticket', keep = 'first', inplace = True)\nlen(tickets_data), len(unique_tickets_data)\n\nplt_tickets_fare(unique_tickets_data_cabin, dif = dif, fig_size = (15, 40), grid_size = (18, 3), cabin = True)","aa4b9665":"plt_tickets_fare(unique_tickets_data_cabin, dif = dif, fig_size = (15, 40), grid_size = (18, 3), cabin = True)","20385e17":"sns.countplot(x = 'Survived', hue = 'Sex', data = train_data)","406e84f1":"def adulthood(row):\n    \"\"\"\n    Create groups according to the sex and age of\n    the passengers. Where:\n    0 - child\n    1 - male\n    2 - female.\n    \"\"\"\n    age = row.Age#train_data['Age'].iloc[i]\n    #print(age)\n    if (age < 18):\n        row['Adulthood'] = 0\n    else:\n        sex = row.Sex#train_data['Sex'].iloc[i]\n        if (sex == 'male'):\n            row['Adulthood'] = 1\n        if (sex == 'female'):\n            row['Adulthood'] = 2\n    return row","b276fe1a":"train_data = train_data.apply(lambda x: adulthood(x), axis = 'columns')\n\nsns.countplot(x = 'Survived', hue = 'Adulthood', data = train_data)","1f310d2c":"train_data['Survived'].groupby(train_data['Adulthood']).value_counts(normalize=True)","01bafab8":"x, y, hue = \"Survived\", \"proportion\", \"Adulthood\"\nhue_order = [\"Child\", \"Male\", \"Female\"]\n\n(train_data[x]\n .groupby(train_data[hue])\n .value_counts(normalize=True)\n .rename(y)\n .reset_index()\n .pipe((sns.barplot, \"data\"), x=x, y=y, hue=hue))","c665186b":"survived_age_sex = (train_data[x]\n .groupby([train_data[hue], train_data['Pclass']])\n .value_counts(normalize=True)\n .reset_index(name ='Perc'))","7c02b500":"sns.catplot(data=train_data, kind='count', \n                   x='Pclass', hue='Adulthood')","ad0dccac":"g = sns.barplot(x = 'Pclass', y = 'Perc', hue = 'Adulthood', data = survived_age_sex.loc[survived_age_sex['Survived'] == 1, :], palette=[\"C4\", \"C1\", \"r\"])\n\nfor p in g.patches:\n        txt = str(p.get_height().round(2)) + '%'\n        txt_x = p.get_x() \n        txt_y = p.get_height()-0.05\n        g.text(txt_x,txt_y,txt)\n        \nplt.show() # percentage survival of groups","0f883aa3":"train_data.groupby('Pclass').mean()['Survived']","37651126":"train_data.groupby('Pclass').mean()['Survived']","448429e7":"import scipy as sp\n\ndef wald_test(data, feature, partition,target = 'Survived'):\n    first_class = data.loc[data[feature] == partition,:]\n    other_classes = data.loc[data[feature] != partition,:]\n\n    first_class_target = first_class[target]\n    other_classes_target = other_classes[target]\n\n    u_1 = first_class_target.mean()\n    s_1 = first_class_target.std()\n    m = len(first_class_target)\n\n    u_2 = other_classes_target.mean()\n    s_2 = other_classes_target.std()\n    n = len(other_classes_target)\n\n    mean_diff = (u_1 - u_2)\n    sigma_hat = (s_1**2 \/ m) + (s_2**2 \/ n)\n\n    estimate = mean_diff \/ np.sqrt(sigma_hat)\n    p_value = sp.stats.norm.sf(abs(estimate))*2 # 1-cdf\n    return p_value","0c090c38":"p_value_survived = wald_test(train_data, 'Pclass', partition = 1, target = 'Survived')\np_value_survived < 0.05","47759927":"p_value_sex = wald_test(train_data, 'Sex', partition = 'male', target = 'Survived')\np_value_sex < 0.05","92231ee0":"Sib_Parch = train_data.copy()\nSib_Parch['Relative'] = np.logical_or(Sib_Parch['SibSp'], Sib_Parch['Parch']) # identify people who are with realtives.","78cb3202":"p_value_relative = wald_test(Sib_Parch, feature = 'Relative' , partition = True, target = 'Survived')\np_value_relative < 0.05","80b13de4":"import re\n\ndata['Surname'] = data['Name'].apply(lambda x: re.search('^([^,])+', x).group()) # get surnames","ba68738a":"data['GroupId'] = 'new_col2'\n\ndef group_id(row, columns):\n    \"\"\"\n    Group passengers by their common features.\n    \"\"\"\n    mutate = ''\n    i = 0\n    while i < len(columns) - 1:\n        mutate += str(row[columns[i]]) + '-'\n        i += 1\n    mutate += str(row[columns[i]])\n    row['GroupId'] = mutate #str(row.Surname) + '-' + str(row.Ticket) + '-' + str(row.Pclass) + '-' + str(row.Fare) + '-' + str(row.Embarked)\n    return row\n\ndata = data.apply(lambda x: group_id(x, ['Surname', 'Ticket', 'Pclass', 'Fare', 'Embarked']), axis='columns')","e628d2d3":"data.groupby('GroupId')['GroupId'].count()","b75680cf":"data.loc[data.SibSp == 1,:].sort_values('Ticket')","843a5667":"data['TicketId'] = data['Ticket'].apply(lambda x: x[:-1])\ndata = data.apply(lambda x: group_id(x, ['Surname', 'TicketId', 'Pclass', 'Fare', 'Embarked']), axis='columns')","dc61c3fe":"# We have already defined this function.\ndef adulthood(row):\n    age = row.Age#train_data['Age'].iloc[i]\n    #print(age)\n    if (age < 18):\n        row['Adulthood'] = 0\n    else:\n        sex = row.Sex#train_data['Sex'].iloc[i]\n        if (sex == 'male'):\n            row['Adulthood'] = 1\n        if (sex == 'female'):\n            row['Adulthood'] = 2\n    return row","0ae3a3b6":"data = data.apply(lambda x: adulthood(x), axis = 'columns')","4070b714":"data.loc[data['Adulthood'] == 1, 'GroupId'] = 'noGroup'\ndata['Family count'] = data.loc[data['Adulthood'] != 1].groupby('GroupId')['GroupId'].transform('count') # drop males\n\ndata.loc[data['Family count'] <= 1, 'GroupId'] = 'noGroup'\ndata.head()","dcfa4bf5":"n_rows, _ = data.shape\nindices = []\ncount = 0\nfor i in range(n_rows):\n    if (data.loc[i, 'Adulthood'] != 1) & (data.loc[i, 'GroupId'] == 'noGroup'):\n        data.loc[i,'GroupId'] = data.loc[(data['Ticket'] == data.loc[i, 'Ticket']) & (data['Adulthood'] != 1), 'GroupId'].iloc[0]\n        data.loc[i, 'Family count'] += 1\n        if (data.loc[i, 'GroupId'] != 'noGroup'):\n            indices.append(i)\n            count += 1\nprint('{:d} passengers were added to an existing group'.format(count))","5f77fb5b":"data.iloc[indices,:]","b2d92077":"number_of_groups = data.loc[data.GroupId != 'noGroup', 'GroupId'].nunique()\nprint('Number of groups found: {:d}'.format(number_of_groups))\nnumber_of_mother_child_passengers = data.loc[data.GroupId != 'noGroup', 'GroupId'].count()\nprint('\\nNumber of passengers in a group: {:d}'.format(number_of_mother_child_passengers))","f003b003":"data['Group Survived'] = data.loc[data['GroupId'] != 'noGroup',:].groupby('GroupId')['Survived'].transform('mean')","a0e5ad09":"print(data['Group Survived'].value_counts().to_string())\nplt.figure(figsize=(12, 6))\nf = sns.countplot(x = data['Group Survived'])","67b8eafa":"data.loc[(data['Group Survived'] == 0.50) | (data['Group Survived'] == 0.75),:].sort_values('Surname')","f448b2da":"# Get the family names using set difference\ntest_groups_indx = set(data[891:1309]['GroupId'].unique()) - set(data[0:891]['GroupId'].unique())\ndata.loc[data['GroupId'].isin(test_groups_indx), :].sort_values(by='GroupId')","7f78bf87":"data.loc[data['GroupId'].isin(test_groups_indx) & (data['Pclass'] == 1), 'Group Survived'] = 1\ndata.loc[data['GroupId'].isin(test_groups_indx) & (data['Pclass'] != 1), 'Group Survived'] = 0\ndata.loc[data['GroupId'].isin(test_groups_indx) & (data['Pclass'] != 1) & (data['Adulthood'] == 0), 'Group Survived'] = 1 # make children live!","85f04e3e":"data.loc[891:1308, 'Predict'] = 0\n# Set women to 1.\ndata.loc[891:1308, 'Predict'][(data['Adulthood'] == 2)] = 1\n# Change women with 'Group Survived'=0 to 0.\ndata.loc[891:1308,'Predict'][(data['Adulthood'] == 2) & (data['Group Survived'] == 0)] = 0\n# Change WCG boys with 'Group Survived'=1 to 1.\ndata.loc[891:1308, 'Predict'][(data['Adulthood'] == 0) & (data['Group Survived'] == 1)] = 1","56ccc81b":"output = pd.DataFrame({'PassengerId': data[891:1309].PassengerId, 'Survived': data[891:1309].Predict.astype('int')})\noutput.to_csv('MC_gender.csv', index=False)\n\nfrom IPython.display import FileLink\nFileLink('MC_gender.csv')","519b0efd":"adult_groups = data.loc[(data['Adulthood'] != 0)] # drop children\nadult_groups = adult_groups.apply(lambda x: group_id(x, ['Surname', 'TicketId', 'Pclass', 'Fare', 'Embarked']), axis='columns')","97afa664":"adult_groups['Adult fam number'] = adult_groups.groupby('GroupId')['Surname'].transform('count')\nadult_groups = adult_groups.loc[adult_groups['Adult fam number'] >= 2] # drop alone passengers\nadult_groups = adult_groups.loc[(adult_groups['Family count'] == adult_groups['Adult fam number']) | (adult_groups['Family count'] != adult_groups['Family count'])]","5355bf9e":"adult_groups['Group Survived'] = adult_groups.loc[adult_groups['Survived'] == adult_groups['Survived']].groupby('GroupId')['Survived'].transform('mean')\nadult_groups.head()","3d711b63":"print(adult_groups['Group Survived'].value_counts().to_string())\nplt.figure(figsize=(12, 6))\nf = sns.countplot(x = adult_groups['Group Survived'])","cb77ad92":"adult_groups['Predict'] = 0\nsurvived_male = adult_groups.loc[(adult_groups['Group Survived'] == 1) & (adult_groups['Sex'] == 'male'), 'GroupId']","b9e06ec0":"adult_groups.loc[(adult_groups['GroupId'].isin(survived_male)) & (adult_groups['Sex'] == 'female'), 'Predict'] = 1\nadult_groups.loc[(adult_groups['GroupId'].isin(survived_male)) & (adult_groups['Sex'] == 'female')]","5506c3c1":"survived_female = set(adult_groups.loc[(adult_groups['Group Survived'] == 1) & (adult_groups['Sex'] == 'female'), 'GroupId']) - set(survived_male)\nadult_groups.loc[(adult_groups['GroupId'].isin(survived_female)) & (adult_groups['Adult fam number'] > 2), 'Predict'] = 1","d6ae8738":"survived_brides = adult_groups.loc[(adult_groups['Survived'] != adult_groups['Survived']) & (adult_groups['Sex'] == 'female') & (adult_groups['Predict'] == 1)].index\nsurvived_husbands = adult_groups.loc[(adult_groups['Survived'] != adult_groups['Survived']) & (adult_groups['Sex'] == 'male') & (adult_groups['Predict'] == 1)].index","868bfdb2":"data.loc[survived_brides,'Predict'] = 1\ndata.loc[survived_husbands, 'Predict'] = 1","cdb1604c":"output = pd.DataFrame({'PassengerId': data[891:1309].PassengerId, 'Survived': data[891:1309].Predict.astype('int')})\noutput.to_csv('husband_bride.csv', index=False)\n\nfrom IPython.display import FileLink\nFileLink('husband_bride.csv')","e4ee1801":"data['Pfare'] = data['Fare'] \/ data.groupby('Ticket')['Ticket'].transform('count')","b231f004":"fig, ax = plt.subplots(1,2,figsize=(12,8))\n\nsns.swarmplot(x='Pclass', y='Fare', hue = 'Survived', data=data, ax=ax[0])\nsns.swarmplot(x='Pclass', y='Pfare', hue = 'Survived', data=data, ax=ax[1])","285a9af2":"train_male = data[0:891].loc[(data['Adulthood'] == 1)]\ntest_male = data[891:1309].loc[(data['Adulthood'] == 1)]","5f6498da":"from sklearn.metrics import make_scorer, precision_score, recall_score\n# We set zero_division=0 to avoid raising errors\ncustom_precision = make_scorer(precision_score, pos_label=0, zero_division=0)\ncustom_recall = make_scorer(recall_score, pos_label=0)","1f641215":"from sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import VotingClassifier\n\ny_male = train_male['Survived']\nX_male = train_male[['Pfare', 'Pclass', 'Embarked']]\n\nnumerical_cols = ['Pfare']\ncategorical_cols = ['Pclass', 'Embarked']\n\nnumerical_transformer = Pipeline(steps = [\n    ('imputer', SimpleImputer()),\n    ('scaler', StandardScaler())\n])\n\ncategorical_transformer = Pipeline(steps = [\n    ('imputer', SimpleImputer(strategy = 'most_frequent')),\n    ('onehot', OneHotEncoder(handle_unknown = 'ignore'))\n])\n\npreprocessor = ColumnTransformer(transformers = [\n    ('num', numerical_transformer, numerical_cols),\n    ('cat', categorical_transformer, categorical_cols)\n])\n\nprecision_male = []\nrecall_male = []\n\nfor k in range(1, 18):\n    pipeline1 = Pipeline(steps = [\n        ('preprocessor', preprocessor),\n        ('model', KNeighborsClassifier(n_neighbors = k))\n    ])\n    precision_male.append(cross_val_score(pipeline1, X_male, y_male,\n                                         cv = 15, n_jobs = 1, scoring = custom_precision).mean())\n    recall_male.append(cross_val_score(pipeline1, X_male, y_male,\n                                      cv = 15, n_jobs = 1, scoring = custom_recall).mean())\n\nk_range = range(1, 18)\nplt.figure(figsize = (12, 6))\nplt.plot(k_range, precision_male, label = '15-fold precision')\nplt.plot(k_range, recall_male, label = '15-fold recall')\nplt.axhline(y = 0.5, color = 'red')\nplt.legend()","7fd55d17":"m1 = KNeighborsClassifier(n_neighbors = 2)\nm2 = KNeighborsClassifier(n_neighbors = 3)\nm3 = KNeighborsClassifier(n_neighbors = 15)\n\nmale_pipeline = Pipeline([\n    ('preprocessr', preprocessor),\n    ('voting', VotingClassifier([\n        ('m1',m1), ('m2',m2), ('m3',m3)]))\n])\n\nprint('15-fold precision of the ensemble: {:.3f}'.format(\n    cross_val_score(male_pipeline, X_male, y_male, cv=15, n_jobs=-1, scoring=custom_precision).mean()))\nprint('15-fold recall of the ensemble: {:.3f}'.format(\n    cross_val_score(male_pipeline, X_male, y_male, cv=15, n_jobs=-1, scoring=custom_recall).mean()))\nprint('15-fold accuracy of the ensemble: {:.3f}'.format(\n    cross_val_score(male_pipeline, X_male, y_male, cv=15, n_jobs=-1).mean()))\n\nmale_pipeline.fit(X_male, y_male)\nlearn_train_male = male_pipeline.predict(X_male)\n\nX_test_male = test_male[['Pfare', 'Pclass', 'Embarked']]\npredictions_male = male_pipeline.predict(X_test_male)","1e40ce86":"n_men_pred_survivals = sum(predictions_male == 1)\n\nprint('\\nThe following {} adult males are predicted to live:'.format(n_men_pred_survivals))\ntest_male.loc[(predictions_male==1), :]","50676ad1":"data.loc[891:1308, 'Predict'][(data['Adulthood'] == 1) & (data['Group Survived'].isnull())] = predictions_male\noutput = pd.DataFrame({'PassengerId': data[891:1309].PassengerId, 'Survived': data[891:1309].Predict.astype('int')})\noutput.to_csv('male.csv', index=False)","d2fee923":"from IPython.display import FileLink\nFileLink('male.csv')","a8e8448b":"alone_females = data.drop(survived_brides, axis = 0)","9f9b42bc":"train_female = data[0:891].loc[(data['Adulthood'] == 2) & (data[\"GroupId\"] == 'noGroup')]\ntest_female = data[891:1309].loc[(data['Adulthood'] == 2) & (data[\"GroupId\"] == 'noGroup')]","bdc00e77":"from sklearn.metrics import make_scorer, precision_score, recall_score\n# We set zero_division=0 to avoid raising errors\ncustom_precision = make_scorer(precision_score, pos_label=0, zero_division=0)\ncustom_recall = make_scorer(recall_score, pos_label=0)","d0a9017e":"y_female = train_female['Survived']\nX_female = train_female[['Pfare', 'Pclass', 'Embarked']]\nprecision_female = []\nrecall_female = []\n\nfor k in range(1, 18):\n    pipeline_2 = Pipeline([\n        ('preprocessor', preprocessor),\n        ('model', KNeighborsClassifier(n_neighbors = k))\n    ])\n    precision_female.append(cross_val_score(pipeline_2, X_female, y_female, cv = 9, n_jobs = 1, scoring = custom_precision).mean())\n    recall_female.append(cross_val_score(pipeline_2, X_female, y_female, cv = 9, n_jobs = 1, scoring = custom_recall).mean())\n\nk_range = range(1, 18)\nplt.figure(figsize = (12, 8))\nplt.plot(k_range, precision_female, label = '9-fold precision')\nplt.plot(k_range, recall_female, label = '9-fold recall')\nplt.axhline(y = 0.5, color = 'red')\nplt.legend()","83cdc85a":"f1 = KNeighborsClassifier(n_neighbors = 2)\nf2 = KNeighborsClassifier(n_neighbors = 7)\nf3 = KNeighborsClassifier(n_neighbors = 16)\n\nfemale_pipeline = Pipeline([\n    ('preprocessor', preprocessor),\n    ('voting', VotingClassifier([\n     ('f1', f1), ('f2', f2), ('f3', f3)]))\n])\n\nprint('9-fold precision of the ensemble: {:.3f}'.format(\n    cross_val_score(female_pipeline, X_female, y_female, cv=9, scoring=custom_precision).mean()))\nprint('9-fold recall of the ensemble: {:.3f}'.format(\n    cross_val_score(female_pipeline, X_female, y_female, cv=9, scoring=custom_recall).mean()))\nprint('9-fold accuracy of the ensemble: {:.3f}'.format(\n    cross_val_score(female_pipeline, X_female, y_female, cv=9).mean()))\n# Preprocessing of training data, fit model\nfemale_pipeline.fit(X_female, y_female)\nlearn_train_f = female_pipeline.predict(X_female)\nX_test_f = test_female[['Pfare', 'Pclass', 'Embarked']]\npredictions_f = female_pipeline.predict(X_test_f)\nprint('\\nThe following {} alone females are predicted to die:'.format(sum(predictions_f == 0)))\ntest_female.loc[(predictions_f==0), :]","f88c627d":"data.loc[[1060, 1171, 1267], 'Predict'] = 0","2ec1492b":"output = pd.DataFrame({'PassengerId': data[891:1309].PassengerId, 'Survived': data[891:1309].Predict.astype('int')})\noutput.to_csv('alone_females.csv', index=False)\n\nfrom IPython.display import FileLink\nFileLink('alone_females.csv')","bead7028":"### Alone females","41b4d2a9":"# Prediction","c25cb734":"For the ensamble we chose one model where the recall is high, one where the precision is high and one with both beign high.","d5040628":"# Reading the data","6d2d688b":"### Wald's test","87a0b2eb":"As it can be seen from our group's counts there are some people in the titanic that belong to the same family but are sorted into separate groups.\nThis happens only because the thier tickets numbers differ in the last digit. Let's delete the last digit of the ticket number and repeat the above steps.","003de9dd":"There may be mother-children group representatives who are entirely in the test data. Let's examine this possibility.","9cbb6fa5":"Examine the data","188bf2c5":"$H_0: u_1 = u_2, H_1: u_1 \\not= u_2$. Where $u_1$ is the mean survival rate of the first class passengers and $u_2$ is the mean survival rate of the remaning passengers.","c2f63af6":"Submission","84678f5d":"The 'p-value' value tells us that under the null hypothesis the probability of seeing such survival rates is quite negligible.\nSince p-value is less then our significance level (0.05) we enough evidence to reject the null hypothesis that the class of the passenger does not have\nany impact on the mean survival rate. ","bb515cf5":"Some remarks:\nApparantely, I check and Cherbourg is in France, Southampton is in England and Queenstown is in Ireland.\nHence, the most wealthy people were boarded from the France while the ones that spent the least come from the Ireland. Though the ultimate least spender was from France too.","4c007f81":"Here we want to:\n- Identify the surnames of the passengers.\n- Create mother-children groups among passengers.\n- Create husband-bride groups among the passengers who don't have non-adult (child) passengers with them.\n- Identify the passengers by their sex and age.","538c83d1":"We have enough evidance to reject the null hypothesis that the presence of relatives of the Titanic passengers does not have any impact on the mean survival rate.","6591eabf":"#### Does the class makes difference on the chances of surviving on mean?","60acb9ca":"Some interesting remarks:\n\nThe most expensive cabins were located here: B-51, B-53 and B-55 were all connected by a private promenade, idem for B-52, B-54 and B-56. The even numbered cabins were used by Bruce Ismay (the same suite that Cal Hockley, Rose and Ruth Dewitt-Bukater's characters inhabited in Cameron's film; see popular culture below) while the odd numbered cabins were booked by the Cardeza family.\n\nSource: https:\/\/titanic.fandom.com\/wiki\/First_Class_Staterooms\n\nAccording to Encyclopedia titanica 'Lesurer, Mr. Gustave J' and 'Ward, Miss. Anna' were working for the Cardeza family.\n\nSource: \nhttps:\/\/www.encyclopedia-titanica.org\/titanic-survivor\/gustave-lesueur.html  \nhttps:\/\/www.encyclopedia-titanica.org\/titanic-survivor\/annie-moore-ward.html","bccfc146":"### Males","a95eee76":"Let's add to the mother-children group those people who are not related by parent\/child relation but still can be considered relatives such as aunts. We would consider as such those non-male adult people who have different surname but the same ticket number.","503b7eae":"## Embarked","3539e200":"Let's examine what fraction of mother-children groups were saved.","434acefe":"However, we will do hypothesis testing too.","56c1684d":"Assign die to the females who are predicted to die.","3d2e0805":"Just by looking at the desctiption of the data some thoughts come to my mind:\n\nHypothesis\n\n- the high class people have better chances of surviving on mean\n- people with siblings\/parents\/childs have lower chances of surviving on mean\n- women have better chances of surviving then men on mean\n\nExplore\n- Was there some logic at how people were decided to be saved\n- The relation between cabin number and the fare\n- Was there some relation between people wealth and the embarked variable","268cc486":"Let's see the survival by the class","664d7cd6":"I can't catch on eye any relationship between the cabin number and the fare.","620d3beb":"Submission","26d0857a":"Let's just throw out the Cardeza family and the $0$'s from the data and have another look at the plot.","dcced2a1":"## Hypothesis testing","8eb835d6":"First submission","8831535c":"Let's try to unite families with each other into the groups","e53ed24e":"We can see that there are plenty of cases where the ticket series differ only slightly. Let's assume it is due to human mistake.","65f4ab17":"This is my first work in Kaggle. The two works that heavily influence my notebook are:  \nhttps:\/\/www.kaggle.com\/mviola\/titanic-wcg-knns-ensemble-0-82775-top-1  \nhttps:\/\/www.kaggle.com\/aipi12\/top-1-approach#2.1-Target-variable-and-numerical-data","73fb4bd8":"### Husband-bride","8f463a45":"https:\/\/www.encyclopedia-titanica.org\/community\/threads\/ticket-numbering-system.20348\/","b715ac2e":"We can see that there is a very small correlation indeed.","62874233":"As we previously see the survival rate of women in the first class was quite high. So let's assume for this people that Gibson family survived.\nMoreover, I would assume that the children in the $3$ class also survived (because it is more human). However, it happens that I know that \"Peacock, Master. Alfred Edward\" is the second youngest victim of the Titanic disaster. Neverthless, I am reluctunt to use this information since I don't think that it is a good practice to mess up with the test data. I would rather follow my assumptions.","cdbe9933":"## Cabin and fare","68360e6f":"### Age and sex","6cca111a":"Let's see if we can spot any relationship between ticket number and the Fare\/Pclass variables. Here I used the idea suggested at <a href=\"https:\/\/www.encyclopedia-titanica.org\/community\/threads\/ticket-numbering-system.20348\/\">Encyclopedia Titanica<\/a>\naccording to which the ticket numbering may be due to the system different agents were using to sell them. So, I tried to identify the agents and see if there is some logic according to which agents determine the price of the ticket.","521da164":"#### Does gender have an effect on the chances of surviving on mean?","ef31b1c4":"#### Is there a difference on the mean survival rates between people with siblings\/parents\/childs and those who travels alone?","660162c4":"We have enough evidance to reject the null hypothesis that the gender of the Titanic passengers does not have any impact on the mean survival rate. ","7e633b64":"Though we call the section husband-bride it is more about the groups of adult members of the families.","c296b653":"Let's follow the logic:\n- Predict die for the femailes whose entire family (children) has died.\n- Predict survive for the children whose entire family (brothers\/sisters\/mothers) survived.","f9d37f8f":"## Tickets","886e7e4d":"A naive way is to check the mean survival rates in our sample.","38cc56fa":"As it can be seen the majority of our family groups either died altogheter or managed to survive. However, there are still people who lost thier children\/mothers\/relatives but managed to survive. Remember that we found out that in the first class the survival rate of women is bigger than the children one. Let's see who are those people.","995d6c5a":"Now since our previous analysis suggest that being a children and women on mean makes a difference while survivng let's examine mother-children group.","e743babe":"- Predict survive for the brides whose husbands managed to survive.\n- Predict survive for the husbands whose entire family managed to survive.","d0f9e334":"In such kind of plot it is not easy to detect any relationship between the variables 'Fare' and 'Survived'. However, there is this one person (at the right top corner) who paid higher than others and managed to survive. Let's see who is he\/she?","d78d1bef":"# Data visualization and analysis","95b64452":"As we can see the main problem is just with $3$ familyies Abbott, Allison, Asplund. Notice that 'Cleaver, Miss. Alice' and 'Daniels, Miss. Sarah' were employees of Allison's family.\n\nSource: https:\/\/www.encyclopedia-titanica.org\/titanic-survivor\/alice-cleaver.html  \nhttps:\/\/www.encyclopedia-titanica.org\/titanic-survivor\/sarah-daniels.html","9a2d4faa":"We see that the majority of the people who died in our sample are males. However, we also see the the smallest group that managed to survived is children group. From my previous knowledge about the disaster I don't think it is right and so we would have a look at groups in proportions too to see have another perspective.","92889559":"## Feature engineering"}}