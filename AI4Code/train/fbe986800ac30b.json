{"cell_type":{"0c5da396":"code","26477794":"code","eaeeb3b6":"code","543c5255":"code","d458caba":"code","6973c2dd":"code","fae3eae4":"code","b7e9e706":"code","3e665af4":"code","b6202b47":"code","34196a85":"code","af913ab8":"code","62334826":"code","3393a35d":"code","2c645d78":"code","58525802":"code","b6ee681c":"code","640bb498":"code","6ba4d1d0":"code","44789797":"code","a3d080f2":"code","8630ffc9":"code","0963b28c":"code","ddf3c833":"code","06b0fe78":"code","6fe48bf1":"code","7d3dea16":"code","0aea5af2":"code","1e9b3e8c":"code","cbb69479":"code","97223a93":"code","6a6646e0":"code","87ad8f5c":"code","dfd0b9bf":"code","fe0aa5ac":"code","4fec634a":"code","1ba84d25":"code","e9458112":"code","7c97d4ee":"code","6fc8937d":"code","c02955cb":"code","08a8877d":"code","4ab47613":"code","874de269":"code","ec8d5b26":"code","bed1527a":"code","cc5ccd9d":"code","e0e003c7":"code","cb7e1201":"code","b2e49f84":"code","6446047f":"code","4a13a81e":"code","8c97cdc3":"code","c9a8d159":"code","c372e0ed":"code","8b5d1f97":"code","e23e294f":"code","8faf2a59":"code","53577944":"markdown","79fe093a":"markdown","c6f38fc3":"markdown","b97837f1":"markdown","e9f70167":"markdown","2fb2f6d4":"markdown","788a7df1":"markdown","612bcef1":"markdown","c4f019f8":"markdown","c439a356":"markdown","8119b1ee":"markdown","d24d185e":"markdown","9dfe4ea5":"markdown","4877a122":"markdown"},"source":{"0c5da396":"import pandas as pd\nimport numpy as np\nfrom sklearn.linear_model  import Ridge,Lasso,RidgeCV, LassoCV, ElasticNet, ElasticNetCV, LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nplt.rcParams['figure.figsize'] = (8, 6)\nplt.rcParams['font.size'] = 14\nimport pandas_profiling\nfrom pandas_profiling import ProfileReport\nfrom IPython.display import Image\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import mean_squared_error\nfrom IPython.display import Image\nfrom sklearn.preprocessing import StandardScaler \nfrom sklearn.feature_selection import RFE\nimport statsmodels.api as sm \nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\n","26477794":"# read the data \nSHC =pd.read_csv('..\/input\/car-data\/Car.csv')\n","eaeeb3b6":"SHC.head()","543c5255":"SHC.shape","d458caba":"SHC.info","6973c2dd":"SHC.describe()","fae3eae4":"plt.figure(figsize=(20,8))\n\nplt.subplot(1,2,1)\nplt.title('Car Price Distribution Plot')\nsns.distplot(SHC.Selling_Price )\n\nplt.subplot(1,2,2)\nplt.title('Car Price Spread')\nsns.boxplot(y=SHC.Selling_Price )\n\nplt.show()","b7e9e706":"report=pandas_profiling.ProfileReport(SHC)\nreport","3e665af4":"SHC.drop_duplicates(keep=False,inplace=True) ","b6202b47":"SHC.shape","34196a85":"correlation = SHC[['Selling_Price','Year','Present_Price', 'Kms_Driven', 'Owner']].corr()\ncorrelation","af913ab8":"sns.heatmap(correlation, vmin = -1, vmax = 1) ","62334826":"#SHC= SHC.drop(columns = ['Car_Name'])\n#SHC.head()","3393a35d":"sns.pairplot(SHC)\nplt.show()","2c645d78":"from imblearn.ensemble import BalancedBaggingClassifier\nfrom sklearn.tree import DecisionTreeClassifier\n\n#Create an object of the classifier.\nlinreg = BalancedBaggingClassifier(base_estimator=DecisionTreeClassifier(),\n                                sampling_strategy='auto',\n                                replacement=False,\n                                random_state=0)\n\n","58525802":"feature_col = ['Present_Price']\nX = SHC [feature_col]\ny = SHC.Selling_Price\nlinreg = LinearRegression()\nlinreg.fit(X,y)\nprint (linreg.intercept_)\nprint (linreg.coef_)\nlist(zip(feature_col, linreg.coef_))","b6ee681c":"from sklearn.model_selection import train_test_split\ndef train_test_rmse(feature_cols):\n    X = SHC[feature_cols]\n    y = SHC.Selling_Price\n    X_train,X_test, y_train,y_test = train_test_split(X,y, random_state =123)\n    linreg= LinearRegression()\n    linreg.fit(X_train,y_train)\n    y_pred = linreg.predict(X_test)\n    return np.sqrt(metrics.mean_squared_error(y_test, y_pred))\n","640bb498":"print (train_test_rmse(['Present_Price']))","6ba4d1d0":"# predict Selling_Price when Present Price of \nlinreg.predict(pd.DataFrame([12]))","44789797":"print(\"Values for Coeffiencet given here is 12  for 'Present_Price'\")\nprint(\"\\nSelling_Price Pridction on Test Data Set with 12 Values=>\",linreg.predict([[12]]))","a3d080f2":"#from sklearn.model_selection import train_test_split\n#def train_test_rmse(feature_cols):\n#X = SHC[feature_cols]\n#y = SHC.Selling_Price\nX_train,X_test, y_train,y_test = train_test_split(X,y, random_state =123)\nlinreg= LinearRegression()\nlinreg.fit(X_train,y_train)\ny_pred = linreg.predict(X_test)\nrmse_val=np.sqrt(metrics.mean_squared_error(y_test, y_pred))\n\ndf= pd.DataFrame({'Actual': y_test, 'Predicted': y_pred,'Error':y_test - y_pred})\n                 ","8630ffc9":"df","0963b28c":"import statsmodels.formula.api as smf\nlinreg = smf.ols(formula='Selling_Price ~ Present_Price', data=SHC).fit()\nlinreg.conf_int()","ddf3c833":"############Printing the Correlation and Cofficients\ndf1 = df.head(5)\ndf1.plot(kind='line',figsize=(12,8))\nplt.grid(which='major', linestyle='-', linewidth='0.5', color='green')\nplt.grid(which='minor', linestyle=':', linewidth='0.5', color='black')\nplt.grid(which='minor', linestyle=':', linewidth='0.5', color='green')\nplt.show()\nSHC.hist(column=\"Present_Price\")\nsns.boxplot(data=df)","06b0fe78":"feature_col = ['Present_Price', 'Kms_Driven', 'Owner']\nX = SHC [feature_col]\ny= SHC.Selling_Price\nlinreg = LinearRegression()\nlinreg.fit(X,y)\nprint (linreg.intercept_)\nprint (linreg.coef_)\nlist(zip(feature_col, linreg.coef_))","6fe48bf1":"print (train_test_rmse(['Present_Price', 'Kms_Driven', 'Owner']))","7d3dea16":"# predict Selling_Price when 'Present_Price', 'Kms_Driven', 'Owner' \nlinreg.predict(pd.DataFrame([[10,3000,1]]))","0aea5af2":"print(\"Values for Coeffiencet given here is 10  for 'Present_Price' : 10 , 'Kms_Driven': 30000', 'Owner' : 1\")\nprint(\"\\nSelling_Price Pridction on Test Data Set with 10,30000,1 Values=>\",linreg.predict ([[10,3000,1]]))","1e9b3e8c":"# VIF score Model \n#X_new = build_model(X,y)\n","cbb69479":"scaler =StandardScaler()\nX_scaled = scaler.fit_transform(X)\n","97223a93":"from statsmodels.stats.outliers_influence import variance_inflation_factor\nvariables = X_scaled\nvif = pd.DataFrame()\nvif[\"VIF\"] = [variance_inflation_factor(variables, i) for i in range(variables.shape[1])]\nvif[\"Features\"] = X.columns","6a6646e0":"vif","87ad8f5c":"lm = smf.ols(formula='Selling_Price ~ Present_Price + Kms_Driven + Owner', data=SHC).fit()\nlm.conf_int()\nlm.summary()","dfd0b9bf":"# create a new column when we will determine how old is the car by subtraction from current year 2020 -\nSHC['No_Years'] = 2020- SHC.Year\nSHC.head()","fe0aa5ac":"feature_col = ['Present_Price', 'Kms_Driven', 'Owner','No_Years']\nX = SHC [feature_col]\ny = SHC.Selling_Price\nlinreg = LinearRegression()\nlinreg.fit(X,y)\nprint (linreg.intercept_)\nprint (linreg.coef_)\nlist(zip(feature_col, linreg.coef_))","4fec634a":"print (train_test_rmse(['Present_Price', 'Kms_Driven', 'Owner','No_Years']))","1ba84d25":"# predict Selling_Price when ''Present_Price', 'Kms_Driven', 'Owner','No_Years'\nlinreg.predict(pd.DataFrame([[10,300,1,2]]))","e9458112":"Fuel_Type_dummies = pd.get_dummies(SHC['Fuel_Type'], prefix ='Fuel_Type')\nFuel_Type_dummies.sample(n=5, random_state=1)","7c97d4ee":"# drop the first column\nFuel_Type_dummies.drop(Fuel_Type_dummies.columns[0], axis=1, inplace=True)\n\n# print 5 random rows\nFuel_Type_dummies.sample(n=5, random_state=1)","6fc8937d":"SHC = pd.concat([SHC, Fuel_Type_dummies], axis=1)\nSHC.head()","c02955cb":"feature_cols = ['Present_Price', 'Kms_Driven', 'Owner','No_Years','Fuel_Type_Diesel','Fuel_Type_Petrol']\nX = SHC [feature_cols]\ny= SHC.Selling_Price\nlinreg = LinearRegression()\nlinreg.fit(X,y)\nprint (linreg.intercept_)\nprint (linreg.coef_)","08a8877d":"print (train_test_rmse(['Present_Price', 'Kms_Driven', 'Owner','No_Years','Fuel_Type_Diesel','Fuel_Type_Petrol']))","4ab47613":"Transmission_dummies = pd.get_dummies(SHC.Transmission, prefix ='Transmission')\nTransmission_dummies.sample(n=5, random_state=1)","874de269":"# drop the first column\nTransmission_dummies.drop(Transmission_dummies.columns[0], axis=1, inplace=True)\n\n# print 5 random rows\nTransmission_dummies.sample(n=5, random_state=1)","ec8d5b26":"SHC = pd.concat([SHC, Transmission_dummies], axis=1)\nSHC.head()","bed1527a":"feature_cols = ['Present_Price', 'Kms_Driven', 'Owner','No_Years','Fuel_Type_Diesel','Fuel_Type_Petrol','Transmission_Manual']\nX = SHC [feature_cols]\ny= SHC.Selling_Price\nlinreg = LinearRegression()\nlinreg.fit(X,y)\nprint (linreg.intercept_)\nprint (linreg.coef_)","cc5ccd9d":"print (train_test_rmse(['Present_Price', 'Kms_Driven', 'Owner','No_Years','Fuel_Type_Diesel','Fuel_Type_Petrol','Transmission_Manual']))","e0e003c7":"Seller_Type_dummies = pd.get_dummies(SHC['Seller_Type'], prefix ='Seller_Type')\nSeller_Type_dummies.sample(n=5, random_state=1)","cb7e1201":"# drop the first column\nSeller_Type_dummies.drop(Seller_Type_dummies.columns[0], axis=1, inplace=True)\n\n# print 5 random rows\nSeller_Type_dummies.sample(n=5, random_state=1)","b2e49f84":"SHC = pd.concat([SHC, Seller_Type_dummies], axis=1)\nSHC.head()","6446047f":"feature_cols = ['Present_Price', 'Kms_Driven', 'Owner','No_Years','Fuel_Type_Diesel','Fuel_Type_Petrol','Transmission_Manual','Seller_Type_Individual']\nX = SHC [feature_cols]\ny= SHC.Selling_Price\nlinreg = LinearRegression()\nlinreg.fit(X,y)\nprint (linreg.intercept_)\nprint (linreg.coef_)","4a13a81e":"print (train_test_rmse(['Present_Price', 'Kms_Driven', 'Owner','No_Years','Fuel_Type_Diesel','Fuel_Type_Petrol','Transmission_Manual','Seller_Type_Individual']))","8c97cdc3":"#Check for multicollinearity\nimport numpy as np\ncorr = np.corrcoef(X, rowvar=0)\ncorr","c9a8d159":"    print (np.linalg.det(corr))","c372e0ed":"X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.30,random_state=False)","8b5d1f97":"print(X_train.shape)\nprint(y_train.shape)\nprint(X_test.shape)\nprint(y_test.shape)","e23e294f":"## Coefficient of determination or R squared value\nmodel.score(X_train,y_train)","8faf2a59":"print(model.intercept_)\nprint (model.coef_)","53577944":"The plot seemed to be LEFT-skewed, meaning that the most prices in the dataset are low(Below 6).\nThere is a significant difference between the mean (4.66) and the median (20) of the price distribution.\nThe data points are far spread out from the mean, which indicates a high variance in the car prices.(75% of the prices are below 6)","79fe093a":"Model 2","c6f38fc3":"* **Used Car Price Prediction**\n\nProblem Statement :\n\nPredict the second hand car prices \n\nBusiness Goal\n\nYou are required to model the price of used cars with the available independent variables. It will be used  to understand how exactly the prices vary with the independent variables. ","b97837f1":"we can use BalancedBaggingClassifier from imblearn library. It allows the resampling of each subset of the dataset before training each estimator of the ensemble.","e9f70167":"1.1. Loading the data","2fb2f6d4":"Analysis & Performance ","788a7df1":"Model 3","612bcef1":"Car_Name has a high cardinality: 98 distinct values IN 297 records \nCar_Name is Nominal data type ie groups without order (discrete).\nHere we\u2019re concerned with encoding nominal and ordinal data. A column with nominal data has values that cannot be ordered in any meaningful way. Nominal data is most often one-hot (aka dummy) encoded. \n\nWe will test performance of Model by either dropping Car_Name from variable or do one hot encoding .\n","c4f019f8":"Model 6","c439a356":"Inference :\n* Selling_Price of the car is positively & highly correlated to Present_Price of the car. But Selling Price is dependent Variable & Present Price is independ variable hence we have to ignore this corellation \n\n* Kms_Driven of the car is negatively correlated to Year of the car. These is issue of MultiCollinearity bewtween Kms_Driven & Year .\nMulticollinearity happens when independent variables in the regression model are highly correlated to each other.\nI would need to either drop  of these variables or find a way to make them less correlated.","8119b1ee":"Build Model 5","d24d185e":"1.2. Visualizing the data ","9dfe4ea5":"Model 4","4877a122":"Model 1 : Selecting single feature \" Present Price \""}}