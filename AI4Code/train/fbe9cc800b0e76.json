{"cell_type":{"84826752":"code","b0b82b7e":"code","ba9e9be7":"code","89ad58db":"code","5420a17d":"code","307bf91d":"code","8ddf2736":"code","66bf7955":"code","da9cecc9":"code","51eb62bb":"code","052d14d0":"code","4d06b65f":"code","d6b79cad":"code","1b0bd2dc":"code","7780ba74":"code","63bbed46":"code","f6befd87":"code","5b0be9b6":"code","45a1daa1":"code","19aa91a3":"code","4f0f53c3":"code","a20aee15":"code","bc7f8f04":"code","0d04cc36":"code","9f86b6fc":"code","1fae1715":"code","e4ace285":"code","d54adbb5":"code","685093e6":"code","ac49e7d0":"code","91f09b03":"code","e2efdb3c":"code","e3a3eae2":"code","3dce604c":"code","004d30f6":"code","ba2ea3b4":"code","0947d5b5":"code","a3c1cf8f":"code","f0f0070c":"code","b662f8cb":"markdown","a61b4268":"markdown","8be5fb85":"markdown","d61a8e4e":"markdown","7b802e9d":"markdown","d20f2341":"markdown","d543a956":"markdown","bda083b7":"markdown","17eae6d8":"markdown","b1203b72":"markdown"},"source":{"84826752":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b0b82b7e":"df=pd.read_csv('\/kaggle\/input\/which-oil-is-the-best\/Oil Well.csv')","ba9e9be7":"df.head()","89ad58db":"df.dtypes","5420a17d":"df.isnull().sum()","307bf91d":"df=df.drop(index=[42])","8ddf2736":"df.isnull().sum()","66bf7955":"df[\"retail markup\"] = df[\"retail markup\"].str.replace(\"%\", \"\")\ndf[\"polyunsaturated (omega 3 & 6) %\"] = df[\"polyunsaturated (omega 3 & 6) %\"].str.replace(\"%\", \"\")\ndf[\"monounsaturated %\"] = df[\"monounsaturated %\"].str.replace(\"%\", \"\")\ndf[\"other fat %\"] = df[\"other fat %\"].str.replace(\"%\", \"\")\ndf[\"saturated %\"] = df[\"saturated %\"].str.replace(\"%\", \"\")\ndf[\"total reported fat content of oil %\"] = df[\"total reported fat content of oil %\"].str.replace(\"%\", \"\")\ndf[\"other things (water, protein etc.), %\"] = df[\"other things (water, protein etc.), %\"].str.replace(\"%\", \"\")\ndf[\"omega 3 %\"] = df[\"omega 3 %\"].str.replace(\"%\", \"\")\ndf[\"omega 6 %\"] = df[\"omega 6 %\"].str.replace(\"%\", \"\")\ndf[\"health rating\"] = df[\"health rating\"].str.replace(\"%\", \"\")\ndf=df.fillna('others')\ndf[\"type\"] = df[\"type\"].str.replace(\"#REF!\", \"others\")\ndf[\"omega 6 to omega 3 ratio: using calc\"] = df[\"omega 6 to omega 3 ratio: using calc\"].str.replace(\"no 3\", \"0\")\ndf[\"trans fat\"] = df[\"trans fat\"].str.replace(\"%\", \"\")\ndf=df.replace(\"-\",\"0\")\ndf=df.replace(\"-\\n\",\"0\")\ndf['intl price per metric ton ($)']=df['intl price per metric ton ($)'].str.replace(\",\",\"\")\ndf['omega 6 mg per 100g']=df['omega 6 mg per 100g'].str.replace(\",\",\"\")\ndf['omega 3 mg per 100g']=df['omega 3 mg per 100g'].str.replace(\",\",\"\")\ndf['yield, litres per hectare']=df['yield, litres per hectare'].str.replace(\",\",\"\")","da9cecc9":"df.dtypes","51eb62bb":"df['taste strength index']=df['taste strength index'].astype(float)\ndf['intl price per metric ton ($)']=df['intl price per metric ton ($)'].astype(float)\ndf['UK retail cost per 100ml ($)']=df['UK retail cost per 100ml ($)'].astype(float)\ndf['retail markup']=df['retail markup'].astype(float)\ndf['saturated %']=df['saturated %'].astype(float)\ndf['polyunsaturated (omega 3 & 6) %']=df['polyunsaturated (omega 3 & 6) %'].astype(float)\ndf['monounsaturated %']=df['monounsaturated %'].astype(float)\ndf['other fat %x']=df['other fat %'].astype(float)\ndf['total reported fat content of oil %']=df['total reported fat content of oil %'].astype(float)\ndf['other things (water, protein etc.), %']=df['other things (water, protein etc.), %'].astype(float)\ndf['omega 6 to omega 3 ratio: using calc']=df['omega 6 to omega 3 ratio: using calc'].astype(float)\ndf['omega 6 mg per 100g']=df['omega 6 mg per 100g'].astype(float)\ndf['omega 3 mg per 100g']=df['omega 3 mg per 100g'].astype(float)\ndf['omega 3 %']=df['omega 3 %'].astype(float)\ndf['omega 6 %']=df['omega 6 %'].astype(float)\ndf['trans fat']=df['trans fat'].astype(float)\ndf['health rating']=df['health rating'].astype(float)\ndf['yield, litres per hectare']=df['yield, litres per hectare'].astype(float)\ndf['smoke point (C), average of sources']=df['smoke point (C), average of sources'].astype(float)\ndf['smoke point (F), average of sources']=df['smoke point (F), average of sources'].astype(float)\ndf['smoke point (C) source 1']=df['smoke point (C) source 1'].astype(float)\ndf['smoke point (C) source 2']=df['smoke point (C) source 2'].astype(float)\ndf['smoke point (C) source 3']=df['smoke point (C) source 3'].astype(float)\ndf['smoke point (C) source 4']=df['smoke point (C) source 4'].astype(float)\ndf['smoke point (C) source 2']=df['smoke point (C) source 2'].astype(float)","052d14d0":"df1=df.drop(['...based on flavour description','source','comment on omegas','note',\n             'source names','links','omega 6 : omega 3 ratio (old)'], axis=1)","4d06b65f":"df1=pd.get_dummies(df1)","d6b79cad":"import matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport seaborn as sns","1b0bd2dc":"plt.figure(figsize=(30, 20))\nsns.heatmap(df1.corr())","7780ba74":"sns.boxplot(x=df1['taste strength index'],y=df1['health rating'])","63bbed46":"ax=sns.scatterplot(x=df1['intl price per metric ton ($)'],y=df1['UK retail cost per 100ml ($)'],\n                   hue=df1['taste strength index'],size=df1['retail markup'],sizes=(10,500))\nax.legend(loc='upper left',bbox_to_anchor=(1,1))","f6befd87":"from sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA","5b0be9b6":"sc = StandardScaler()\ncl_sc=sc.fit_transform(df1)","45a1daa1":"kmeans = KMeans(n_clusters=4, random_state=0)\nclusters = kmeans.fit(cl_sc)","19aa91a3":"df1[\"clustering\"] = clusters.labels_\ndf1.head()","4f0f53c3":"df1.groupby('clustering')['health rating'].mean().plot.bar()","a20aee15":"df1.groupby('clustering')['taste strength index'].mean().plot.bar()","bc7f8f04":"ax=sns.scatterplot(x=df1['intl price per metric ton ($)'],y=df1['UK retail cost per 100ml ($)'],\n                   hue=df1['clustering'],size=df1['retail markup'],sizes=(10,500))\nax.legend(loc='upper left',bbox_to_anchor=(1,1))","0d04cc36":"pre = cl_sc\npca = PCA(n_components=2) \npca.fit(pre)\npca_pre = pca.transform(pre)\npca_data = pd.DataFrame(pca_pre)","9f86b6fc":"for i in df1[\"clustering\"].unique():\n    tmp = pca_data.loc[df1[\"clustering\"] == i]\n    plt.scatter(tmp[0], tmp[1], label=i)\nplt.legend()","1fae1715":"df2=pd.DataFrame(df['...based on flavour description'])","e4ace285":"df2=df2.rename(columns={'...based on flavour description':'text'})","d54adbb5":"from nltk.tokenize import word_tokenize\nfrom nltk.corpus import stopwords\nfrom string import punctuation\nimport string\n\nlist_stopwords = set(stopwords.words('english'))","685093e6":"df2['text'] = df2['text'].str.lower()\ndf2['text'] = df2['text'].apply(word_tokenize)\ndf2['text'] = df2['text'].apply(lambda x: [word for word in x if word not in list_stopwords])\ndf2['text'] = df2['text'].apply(lambda x : [word.translate(str.maketrans('', '', string.punctuation)) for word in x])\ndf2['text'] = df2['text'].apply(lambda x : [word for word in x if len(word) > 1])","ac49e7d0":"df2['taste strength index']=df1['taste strength index']\ndf2['health rating']=df1['health rating']\ndf2['clustering']=df1['clustering']","91f09b03":"df2","e2efdb3c":"df2_0=df2[df2['clustering']==0]\ndf2_1=df2[df2['clustering']==1]\ndf2_2=df2[df2['clustering']==2]\ndf2_3=df2[df2['clustering']==3]","e3a3eae2":"df3_0=df2_0['text'].explode()\ndf3_1=df2_1['text'].explode()\ndf3_2=df2_2['text'].explode()\ndf3_3=df2_3['text'].explode()","3dce604c":"df3_0=pd.DataFrame(df3_0)\ndf3_1=pd.DataFrame(df3_1)\ndf3_2=pd.DataFrame(df3_2)\ndf3_3=pd.DataFrame(df3_3)","004d30f6":"import squarify","ba2ea3b4":"df3_0=pd.DataFrame(df3_0.groupby('text')['text'].count().sort_values(ascending=False).head(30))\ndf3_0=df3_0.rename(columns={'text': 'num'})\n\nx = df3_0['num']\nlabel = df3_0.index\nsquarify.plot(x, label=label,color=sns.color_palette('husl'))\nplt.axis('off')\nplt.show()","0947d5b5":"df3_1=pd.DataFrame(df3_1.groupby('text')['text'].count().sort_values(ascending=False).head(30))\ndf3_1=df3_1.rename(columns={'text': 'num'})\n\nx = df3_1['num']\nlabel = df3_1.index\nsquarify.plot(x, label=label,color=sns.color_palette('husl'))\nplt.axis('off')\nplt.show()","a3c1cf8f":"df3_2=pd.DataFrame(df3_2.groupby('text')['text'].count().sort_values(ascending=False).head(30))\ndf3_2=df3_2.rename(columns={'text': 'num'})\n\nx = df3_2['num']\nlabel = df3_2.index\nsquarify.plot(x, label=label,color=sns.color_palette('husl'))\nplt.axis('off')\nplt.show()","f0f0070c":"df3_3=pd.DataFrame(df3_3.groupby('text')['text'].count().sort_values(ascending=False).head(30))\ndf3_3=df3_3.rename(columns={'text': 'num'})\n\nx = df3_3['num']\nlabel = df3_3.index\nsquarify.plot(x, label=label,color=sns.color_palette('husl'))\nplt.axis('off')\nplt.show()","b662f8cb":"**6.Description Analysis(NLP) by Clusters**","a61b4268":"<Words of people in Cluster '3'>","8be5fb85":"**4.Price, Cost and Markup Analysis**","d61a8e4e":"**2.Correlation Analysis**","7b802e9d":"**5.Clustering and PCA**","d20f2341":"**1.Data Cleaning**","d543a956":"**3.Taste Strength and Health Rating Analysis**","bda083b7":"<Words of people in clusster '0'>","17eae6d8":"<Words of people in Cluster '2'>","b1203b72":"<Words of people in Cluster '1'>"}}