{"cell_type":{"ab81d706":"code","386065a5":"code","4468b7e6":"code","fbde6285":"code","d1d2042c":"code","38948770":"code","5ea4a892":"code","db430e31":"code","d43adfb0":"code","a6665046":"code","f189f8ae":"code","515f49d0":"code","02da18df":"code","2206430d":"code","8187ddf9":"code","71a9c17a":"code","40c5d4c0":"code","4d8bb3bc":"code","247d15d2":"code","e3797e0c":"code","1dd54d01":"code","17deddab":"code","0d0ed00d":"code","5c5c05a5":"code","4027bc03":"code","cceb5830":"code","c7abac60":"code","8ff754a7":"code","8d90e30d":"code","b9728638":"code","759b3d1e":"code","e04c273e":"code","24e89301":"code","e6d71118":"code","b272148c":"code","b5228be9":"code","37f72759":"code","afbc8659":"code","c5bbd612":"code","a103cc23":"code","bd151471":"code","a30efea8":"code","4480c94c":"code","64450b31":"code","7391f42e":"code","f994e5e5":"code","3c1b7ad0":"code","67a7cf57":"code","4efd9d24":"code","3f71dc7f":"code","5a1251f6":"code","9f4a0b06":"code","48eeeca1":"markdown","cf80f8d9":"markdown","4879bd89":"markdown","69a4c9fe":"markdown","a556b3d4":"markdown","9b7188bd":"markdown","328fa227":"markdown","6aeb683d":"markdown","2cc3e386":"markdown","f1ba308f":"markdown","c45440ad":"markdown","da48a6c2":"markdown","decf3952":"markdown","b3122c9d":"markdown","d8cbadec":"markdown","5171c114":"markdown","62776dd4":"markdown","de8186fd":"markdown","664a8f13":"markdown","b245be1e":"markdown","699b0b11":"markdown","92312425":"markdown","f64dce35":"markdown","1a13ae29":"markdown","fe098e67":"markdown","d8d0e5d5":"markdown","7f37b9d0":"markdown","1ee587b5":"markdown"},"source":{"ab81d706":"# for basic mathematics operation \nimport numpy as np\nimport pandas as pd\nfrom pandas import plotting\n\n# for visualizations\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.style.use('fivethirtyeight')\n\n# for path\nimport os\n","386065a5":"\ndataset_path = '\/kaggle\/input\/seoul-bike-rental-ai-pro-iti\/'\ndf = pd.read_csv(os.path.join(dataset_path, 'train.csv'))\nprint(\"The shape of the dataset is {}.\\n\\n\".format(df.shape))\ndf.head()","4468b7e6":"# Shape or Size\ndf.shape","fbde6285":"#Dataset information\ndf.info()","d1d2042c":"#Data types validation\ndf.dtypes\n#P.S Date is in string format","38948770":"#Rename the columns\ndf.rename(columns={'Temperature(\ufffdC)':'Temperature','Humidity(%)':'Humidity','Wind speed (m\/s)':'Wind_speed','Dew point temperature(\ufffdC)':'Dew_point_temperature',\n                        'Solar Radiation (MJ\/m2)':'Solar_Radiation','Visibility (10m)':'Visibility','Functioning Day':'Functioning_Day',\n                       'Rainfall(mm)':'Rainfall','Snowfall (cm)':'Snowfall'},inplace=True)\n\ndf.info()","5ea4a892":"df[df.duplicated()].count()","db430e31":"#Looking out for missing values and handling them\ndf.isnull().sum()","d43adfb0":"df.isna().sum()","a6665046":"#Summary Stastics\ndf.drop(columns = ['ID','y']).describe() ","f189f8ae":"df.head()","515f49d0":"#Replacing zeros by np.nan\ndf_copy = df.copy()\ndf_copy = df_copy.loc[: , df_copy.columns.isin([ 'Wind_speed','Solar_Radiation' , 'Rainfall' ,'Snowfall' ])]\ndf_copy.replace(0, np.nan , inplace = True)\ndf_copy.isnull().sum()","02da18df":"#Fill Nullable values with mean values. Median() and Mode() can be used too.\ndf_copy = df_copy.fillna(df_copy.mean()) \ndf_copy.isnull().sum()\n","2206430d":"df_copy.head()","8187ddf9":"df['Wind_speed']= df_copy['Wind_speed']\ndf['Solar_Radiation']= df_copy['Solar_Radiation']\ndf['Rainfall']= df_copy['Rainfall']\ndf['Snowfall']= df_copy['Snowfall']\ndf.head()","71a9c17a":"df['Date']","40c5d4c0":"\ndf['Date']= pd.to_datetime(df['Date'])\ndf['year'] = df['Date'].dt.year\ndf['month'] = df['Date'].dt.month\ndf['day'] = df['Date'].dt.day\ndf = df.drop(columns=['Date'])\ndf.head()","4d8bb3bc":"#check new added column datatype\ndf.info()","247d15d2":"# count the values of each column\nfor col in df.drop(columns=['ID','y']).columns:\n    print(f'For column {col}')\n    print('------------------')\n    print(df[col].value_counts())\n    print('\\n')","e3797e0c":"df['Seasons'].value_counts()","1dd54d01":"df['Holiday'].value_counts()","17deddab":"df['Functioning_Day'].value_counts()","0d0ed00d":"#categorical attributes\ncat_attributes=['Seasons','Holiday','Functioning_Day']\n#numerical attributes\nnum_attributes=['Temperature','Wind_speed','Humidity','Visibility', 'Solar_Radiation','Dew_point_temperature','Hour','year','month','day']\n\n\n# df['year']=df.year.astype('category')\ndf['Seasons']=df.Seasons.astype('category')\ndf['Holiday']=df.Holiday.astype('category')\ndf['Functioning_Day']=df.Functioning_Day.astype('category')","5c5c05a5":"#create correlation\ncorr = df.drop(columns='ID').corr(method = 'pearson')\ncorr","4027bc03":"#convert correlation to numpy array\nmask = np.array(corr)","cceb5830":"#to mask the repetitive value for each pair\nmask[np.tril_indices_from(mask)] = False\nfig, ax = plt.subplots(figsize = (15,12))\nfig.set_size_inches(15,15)\nsns.heatmap(corr, mask = mask, vmax = 0.9, square = True, annot = True)","c7abac60":"#Pairplot for the Data\nsns.pairplot(df , diag_kind=\"kde\")\nplt.title('Pairplot for the Data', fontsize = 20)\nplt.show()","8ff754a7":"ig,ax=plt.subplots(figsize=(15,8))\n#Bar plot for Seasons distribution of counts\nsns.barplot(data=df,x='Seasons',y='y')\nax.set_title('Rented_bikes Vs Seasons')\nplt.show()","8d90e30d":"ig,ax=plt.subplots(figsize=(15,8))\n#Bar plot for Holidays distribution of counts\nsns.barplot(data=df,x='Holiday',y='y')\nax.set_title('Rented_bikes Vs Holidays')\nplt.show()","b9728638":"ig,ax=plt.subplots(figsize=(15,8))\n#Bar plot for Years distribution of counts\nsns.barplot(data=df,x='year',y='y')\nax.set_title('Rented_bikes Vs Years')\nplt.show()","759b3d1e":"ig,ax=plt.subplots(figsize=(15,8))\n#Bar plot for Hours distribution of counts\nsns.barplot(data=df,x='Hour',y='y')\nax.set_title('Rented_bikes Vs Hours')\nplt.show()","e04c273e":"ig,ax=plt.subplots(figsize=(15,8))\n#Bar plot for month distribution of counts\nsns.barplot(data=df,x='month',y='y')\nax.set_title('Rented_bikes Vs month')\nplt.show()","24e89301":"ig,ax=plt.subplots(figsize=(15,8))\n#Bar plot for workingday distribution of counts\nsns.barplot(data=df,x='day',y='y')\nax.set_title('Rented_bikes Vs day')\nplt.show()","e6d71118":"#Total_outliers\nfig,ax=plt.subplots(figsize=(15,8))\n#Boxplot for total_count outliers\nsns.boxplot(data=df[['y']])\nax.set_title('Rented_bikes outliers')\nplt.show()","b272148c":"#Temp_windspeed_humidity_outliers\nfig,ax=plt.subplots(figsize=(15,8))\n#Box plot for Temp_windspeed_humidity_outliers\nsns.boxplot(data=df[['Temperature','Wind_speed','Humidity' ,'Visibility' , 'Rainfall' , 'Snowfall' ]])\nax.set_title('Temp_windspeed_humidity_outiers')\nplt.show()","b5228be9":"#To get dummy variables to encode the categorical features to numeric\nencoded_pd=pd.get_dummies(df,columns=cat_attributes)\nprint('Shape of transfomed dataframe::',encoded_pd.shape)\nencoded_pd.head()\ndf=encoded_pd\ndf.head()\n\n#this way of encoding will increae diementions.","37f72759":"\n#load the required libraries\nfrom sklearn import preprocessing,metrics,linear_model\nfrom sklearn.model_selection import cross_val_score,train_test_split\n\n#Split the dataset into the train and test data\nfrom sklearn.model_selection import train_test_split\nX_train,X_val,y_train,y_val=train_test_split(df.iloc[:,2:],df.iloc[:,1],test_size=0.2, random_state=42)\n\n#Reset train index values\nX_train.reset_index(inplace=True)\ny_train=y_train.reset_index()\n\n# Reset train index values\nX_val.reset_index(inplace=True)\ny_val=y_val.reset_index()\n\n#Removing un-important features\nX_train = X_train.drop(columns=['index'])\ny_train = y_train.drop(columns=['index' ])\n\nX_val = X_val.drop(columns=['index' ])\ny_val = y_val.drop(columns=['index' ])\n\nprint(X_train.shape,X_val.shape,y_train.shape,y_val.shape)\n","afbc8659":"X_val.head()","c5bbd612":"y_val.head()","a103cc23":"# Creating Bar chart as the Target variable is Continuous\ndf['y'].hist()","bd151471":"#Training the model\nfrom sklearn.ensemble import RandomForestRegressor\nrf=RandomForestRegressor(n_estimators=200)","a30efea8":"#Fit the trained model\nrf.fit(X_train,y_train)\n\n#Cross validation prediction\npredict=rf.predict(X_val)\nprint(predict.shape)","4480c94c":"#accuracy of the model\nrf_score =rf.score(X_val,y_val)\nprint('Accuracy of the model :',rf_score)","64450b31":"fig,ax=plt.subplots(figsize=(15,8))\nax.scatter(y_val,predict)\nax.axhline(lw=2,color='black')\nax.set_title('cross validation prediction plot')\nax.set_xlabel('Observed')\nax.set_ylabel('Residual')\nplt.show()","7391f42e":"\nfrom sklearn.metrics import mean_squared_log_error \nprint ('RMSLE:' + str(np.sqrt(mean_squared_log_error ( predict , y_val) )))","f994e5e5":"dataset_path = '\/kaggle\/input\/seoul-bike-rental-ai-pro-iti\/'\ntest_df = pd.read_csv(os.path.join(dataset_path, 'test.csv'))\nprint(\"The shape of the dataset is {}.\\n\\n\".format(df.shape))\ntest_df.head()","3c1b7ad0":"\n#Rename the columns\ntest_df.rename(columns={'Temperature(\ufffdC)':'Temperature','Humidity(%)':'Humidity','Wind speed (m\/s)':'Wind_speed','Dew point temperature(\ufffdC)':'Dew_point_temperature',\n                        'Solar Radiation (MJ\/m2)':'Solar_Radiation','Visibility (10m)':'Visibility','Functioning Day':'Functioning_Day',\n                       'Rainfall(mm)':'Rainfall','Snowfall (cm)':'Snowfall'},inplace=True)\n\n","67a7cf57":"\n#Replacing zeros by np.nan\ntest_df_copy = test_df.copy()\ntest_df_copy = test_df_copy.loc[: , test_df_copy.columns.isin([ 'Wind_speed','Solar_Radiation' , 'Rainfall' ,'Snowfall' ])]\ntest_df_copy.replace(0, np.nan , inplace = True)\ntest_df_copy.isnull().sum()\n\n#Fill Nullable values with mean values. Median() and Mode() can be used too.\ntest_df_copy = test_df_copy.fillna(test_df_copy.mean()) \ntest_df_copy.isnull().sum()\n\ntest_df['Seasons']=test_df.Seasons.astype('category')\ntest_df['Holiday']=test_df.Holiday.astype('category')\ntest_df['Functioning_Day']=test_df.Functioning_Day.astype('category')\n\ntest_df['Wind_speed']= test_df_copy['Wind_speed']\ntest_df['Solar_Radiation']=test_df_copy['Solar_Radiation']\ntest_df['Rainfall']= test_df_copy['Rainfall']\ntest_df['Snowfall']= test_df_copy['Snowfall']","4efd9d24":"#Type casting the datetime and numerical attributes to category\ntest_df['Date']= pd.to_datetime(test_df['Date'])\ntest_df['year'] = test_df['Date'].dt.year\ntest_df['month'] = test_df['Date'].dt.month\ntest_df['day'] = test_df['Date'].dt.day\ntest_df = test_df.drop(columns=['Date'])","3f71dc7f":"#categorical attributes\ncat_attributes=['Seasons','Holiday','Functioning_Day']\n#numerical attributes\nnum_attributes=['Temperature','Wind_speed','Humidity','Visibility', 'Solar_Radiation','Dew_point_temperature','Hour','year','month','day']\n\n#To get dummy variables to encode the categorical features to numeric\nencoded_pd=pd.get_dummies(test_df,columns=cat_attributes)\ntest_df=encoded_pd","5a1251f6":"#predict the model\ny_test_predicted = rf.predict(test_df.drop(columns =['ID']))\ntest_df['y'] = y_test_predicted\ntest_df","9f4a0b06":"test_df[['ID', 'y']].to_csv('\/kaggle\/working\/submission.csv', index=False)\n","48eeeca1":"The remaining steps is to submit the generated file and are as follows. \n\n1. Press `Save Version` on the upper right corner of this notebook.\n2. Write a `Version Name` of your choice and choose `Save & Run All (Commit)` then click `Save`.\n3. Wait for the saved notebook to finish running the go to the saved notebook.\n4. Scroll down until you see the output files then select the `submission.csv` file and click `Submit`.","cf80f8d9":"# Dataset Information\n\nBike sharing systems are a means of renting bicycles where the process of obtaining membership, rental, and bike return is automated via a network of kiosk locations throughout a city. Using these systems, people are able rent a bike from a one location and return it to a different place on an as-needed basis. Currently, there are over 500 bike-sharing programs around the world.\n\nThe crucial part is the prediction of bike count required at each hour for the stable supply of rental bikes. ","4879bd89":"P.S. No duplicate values","69a4c9fe":"### Handling the Categorical values","a556b3d4":"### Heat Map","9b7188bd":"![image.png](attachment:image.png)","328fa227":"\n\n### Looking at the distribution of Target variable\nIf target variable's distribution is too skewed then the predictive modeling will not be possible.\nBell curve is desirable but slightly positive skew or negative skew is also fine\nWhen performing Regression, make sure the histogram looks like a bell curve or slight skewed version of it. Otherwise it impacts the Machine Learning algorithms ability to learn all the scenarios.","6aeb683d":"The dataset contains weather information (Temperature, Humidity, Windspeed, Visibility, Dewpoint, Solar radiation, Snowfall, Rainfall), the number of bikes rented per hour, and date information.","2cc3e386":"#### Type casting the datetime","f1ba308f":"Large Null values at columns of ('Wind_speed','Solar_Radiation' , 'Rainfall' ,'Snowfall')","c45440ad":"# 4: Dataset Visualization","da48a6c2":"### Checking Duplicate values","decf3952":"P.S Minimum values at the following columns are zeros ( 'Wind_speed','Solar_Radiation' , 'Rainfall' ,'Snowfall') ","b3122c9d":"### Handling missing values","d8cbadec":"## Submission File Generation\n\nWe have built a model and we'd like to submit our predictions on the test set! In order to do that, we'll load the test set, predict the class and save the submission file. \n\nFirst, we'll load the data.","5171c114":"## Model Training\n\nLet's train a model with the data! We'll train a Random Forest Classifier to demonstrate the process of making submissions. ","62776dd4":"Now we're ready to generate the submission file. The submission file needs the columns ID and y only.","de8186fd":"## Data Splitting\n\nNow it's time to split the dataset for the training step. Typically the dataset is split into 3 subsets, namely, the training, validation and test sets. In our case, the test set is already predefined. So we'll split the \"training\" set into training and validation sets with 0.8:0.2 ratio. \n","664a8f13":"### Typecasting the datetime ","b245be1e":"# 3- Explainatry Data Analysis - EDA","699b0b11":"# 1: Import Libraries","92312425":"## RMSLE \n\nRoot Mean Squared Logarithmic Error (RMSLE) is the metric used for the ASHRAE Energy Prediction competition and a common metric for regression problems. It is an extension on Mean Squared Error (MSE) that is mainly used when predictions have large deviations.\n\n![image.png](attachment:image.png)","f64dce35":"# 2: Reading the Dataset\n","1a13ae29":"Note that the test set has the same features and doesn't have the `y` column.\nAt this stage one must **NOT** forget to apply the same processing done on the training set on the features of the test set.\n\nNow we'll add `y` column to the test `DataFrame` and add the values of the predicted class to it.\n","fe098e67":"### cross validation prediction plot\nCross validation prediction plot tells about finite variance between actual target value and predicted target value. In this plot, some data points are have same finite variance between them and for some are not have it.","d8d0e5d5":"## Encoding the categorical features","7f37b9d0":"# 5- Data Splitting & Model Training\nLet's train a model with the data! We'll train many Classifier to demonstrate the process of making submissions.","1ee587b5":"## Model Prediction"}}