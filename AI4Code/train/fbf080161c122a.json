{"cell_type":{"44b5ecfa":"code","96f5566a":"code","0e200836":"code","3a38f4c9":"code","b2a507da":"code","b46cc8d9":"code","33b83980":"code","a9340811":"code","dbaa66ab":"code","2d7adda4":"code","8084d368":"code","0350e994":"code","6824f244":"code","e44676ed":"code","c9dce3c1":"code","f85ad407":"code","aa74d65d":"code","e702c8db":"code","22852759":"code","db18511e":"code","3c54122c":"code","af5c48c4":"code","ea49bb1f":"code","ba31b18f":"code","ae23d517":"code","a10c463d":"code","c4974747":"code","85621b0e":"code","aaa27370":"code","bd500e05":"code","07d4ee8d":"code","d2865e09":"code","3b01aab8":"code","f6f78ddf":"code","1328ef32":"code","9187f95e":"code","94849a0f":"code","1f753aff":"code","af8beb07":"code","c7993c37":"code","fad91f8d":"code","f1c793b3":"code","7be2c856":"code","fd0f091e":"code","1c49e593":"code","10c87291":"code","cfe490fd":"code","3d68e280":"code","adc8d9b8":"code","7dd91c1d":"code","efce972a":"code","385e6f5d":"code","ebdd775a":"code","791fabd1":"code","3f6b33b9":"code","5920b7ce":"code","60fb553f":"code","c058014a":"code","6fbe46f0":"code","f472bc41":"code","fda0cc7d":"code","40342d43":"code","f3c7a908":"code","9ea11c5d":"code","2215ee85":"code","b39cf9ca":"code","f30aaab6":"code","c3a9a04b":"markdown","4543d2c0":"markdown","85993731":"markdown","0b81914c":"markdown","106dbdab":"markdown","965483e6":"markdown","2247c8ad":"markdown","d65b9ca4":"markdown"},"source":{"44b5ecfa":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","96f5566a":"df = pd.read_csv(\"\/kaggle\/input\/wine-quality\/winequalityN.csv\")","0e200836":"df.head()","3a38f4c9":"df.describe()","b2a507da":"df.info()","b46cc8d9":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","33b83980":"df.isnull().sum()","a9340811":"df[\"fixed acidity\"].value_counts()","dbaa66ab":"## df[\"fixed acidity\"].fillna(mean,inplace=True)","2d7adda4":"mean = df[\"fixed acidity\"].mean()\ndf[\"fixed acidity\"].fillna(mean,inplace=True)\ndf[\"fixed acidity\"].isnull().sum()","8084d368":"mean2 = df[\"volatile acidity\"].mean()\ndf[\"volatile acidity\"].fillna(mean,inplace=True)\ndf[\"volatile acidity\"].isnull().sum()","0350e994":"df[\"citric acid\"].value_counts()","6824f244":"mean3 = df[\"citric acid\"].mean()\ndf[\"citric acid\"].fillna(mean,inplace=True)\ndf[\"citric acid\"].isnull().sum()","e44676ed":"df[\"residual sugar\"].value_counts()","c9dce3c1":"mean4 = df[\"residual sugar\"].mean()\ndf[\"residual sugar\"].fillna(mean,inplace=True)\ndf[\"residual sugar\"].isnull().sum()","f85ad407":"mean4 = df[\"chlorides\"].mean()\ndf[\"chlorides\"].fillna(mean,inplace=True)\ndf[\"chlorides\"].isnull().sum()","aa74d65d":"\nmean5 = df[\"pH\"].mean()\ndf[\"pH\"].fillna(mean,inplace=True)\ndf[\"pH\"].isnull().sum()","e702c8db":"mean6 = df[\"sulphates\"].mean()\ndf[\"sulphates\"].fillna(mean,inplace=True)\ndf[\"sulphates\"].isnull().sum()","22852759":"df.isnull().sum()","db18511e":"plt.figure(figsize=(10,7))\nplt.scatter(x=\"alcohol\",y=\"fixed acidity\",data =df,marker= 'o',c=\"m\")\nplt.xlabel(\"alcohol\",fontsize=15)\nplt.ylabel(\"fixed_acidity\",fontsize=15)\nplt.show()","3c54122c":"sns.lmplot(x=\"alcohol\",y=\"fixed acidity\",data=df)\nplt.plot()","af5c48c4":"plt.figure(figsize=(10,7))\nplt.scatter(x=\"volatile acidity\",y=\"alcohol\",data =df,marker= 'o',c=\"m\")\nplt.xlabel(\"volatile_acidity\",fontsize=15)\nplt.ylabel(\"alcohol\",fontsize=15)\nplt.show()","ea49bb1f":"sns.set(style=\"darkgrid\")\nsns.countplot(df[\"quality\"],hue=\"type\",data=df)\nplt.show()","ba31b18f":"sns.set()\nsns.distplot(df[\"quality\"],bins=10)\nplt.show()","ae23d517":"plt.figure(figsize=(10,7))\nsns.regplot(x=\"citric acid\",y=\"chlorides\",data =df,marker= 'o',color=\"m\")\nplt.show()","a10c463d":"sns.set()\nsns.pairplot(df)\nplt.show()","c4974747":"sns.set()\nplt.figure(figsize=(20,10))\nsns.boxplot(data=df,palette=\"Set3\")\nplt.show()","85621b0e":"lower_limit = df[\"free sulfur dioxide\"].mean() - 3*df[\"free sulfur dioxide\"].std()\nupper_limit = df[\"free sulfur dioxide\"].mean() + 3*df[\"free sulfur dioxide\"].std()\n","aaa27370":"print(lower_limit,upper_limit)","bd500e05":"df2 = df[(df[\"free sulfur dioxide\"] > lower_limit) & (df[\"free sulfur dioxide\"] < upper_limit)]","07d4ee8d":"df.shape[0] - df2.shape[0]","d2865e09":"lower_limit = df2['total sulfur dioxide'].mean() - 3*df2['total sulfur dioxide'].std()\nupper_limit = df2['total sulfur dioxide'].mean() + 3*df2['total sulfur dioxide'].std()\nprint(lower_limit,upper_limit)","3b01aab8":"df3 = df2[(df2['total sulfur dioxide'] > lower_limit) & (df2['total sulfur dioxide'] < upper_limit)]\ndf3.head()","f6f78ddf":"df2.shape[0] - df3.shape[0]","1328ef32":"lower_limit = df3['residual sugar'].mean() - 3*df3['residual sugar'].std()\nupper_limit = df3['residual sugar'].mean() + 3*df3['residual sugar'].std()\nprint(lower_limit,upper_limit)","9187f95e":"df4 = df3[(df3['residual sugar'] > lower_limit) & (df3['residual sugar'] < upper_limit)]\ndf4.head()","94849a0f":"df3.shape[0] - df4.shape[0]","1f753aff":"df4.isnull().sum()","af8beb07":"dummies = pd.get_dummies(df4[\"type\"],drop_first=True)","c7993c37":"df4 = pd.concat([df4,dummies],axis=1)","fad91f8d":"df4.drop(\"type\",axis=1,inplace=True)","f1c793b3":"df4.head()","7be2c856":"df4.quality.value_counts()","fd0f091e":"quaity_mapping = { 3 : \"Low\",4 : \"Low\",5: \"Medium\",6 : \"Medium\",7: \"Medium\",8 : \"High\",9 : \"High\"}\ndf4[\"quality\"] =  df4[\"quality\"].map(quaity_mapping)","1c49e593":"df4.quality.value_counts()","10c87291":"df4.head()","cfe490fd":"mapping_quality = {\"Low\" : 0,\"Medium\": 1,\"High\" : 2}\ndf4[\"quality\"] =  df4[\"quality\"].map(mapping_quality)","3d68e280":"df4.head()","adc8d9b8":"x = df4.drop(\"quality\",axis=True)\ny = df4[\"quality\"]","7dd91c1d":"from sklearn.ensemble import ExtraTreesClassifier\nmodel = ExtraTreesClassifier()\nmodel.fit(x,y)","efce972a":"print(model.feature_importances_)","385e6f5d":"feat_importances = pd.Series(model.feature_importances_,index =x.columns)\nfeat_importances.nlargest(9).plot(kind=\"barh\")\nplt.show()","ebdd775a":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC","791fabd1":"model_params  = {\n    \"svm\" : {\n        \"model\":SVC(gamma=\"auto\"),\n        \"params\":{\n            'C' : [1,10,20],\n            'kernel':[\"rbf\"]\n        }\n    },\n    \n    \"decision_tree\":{\n        \"model\": DecisionTreeClassifier(),\n        \"params\":{\n            'criterion':[\"entropy\",\"gini\"],\n            \"max_depth\":[5,8,9]\n        }\n    },\n    \n    \"random_forest\":{\n        \"model\": RandomForestClassifier(),\n        \"params\":{\n            \"n_estimators\":[1,5,10],\n            \"max_depth\":[5,8,9]\n        }\n    },\n    \"naive_bayes\":{\n        \"model\": GaussianNB(),\n        \"params\":{}\n    },\n    \n    'logistic_regression' : {\n        'model' : LogisticRegression(solver='liblinear',multi_class = 'auto'),\n        'params': {\n            \"C\" : [1,5,10]\n        }\n    }\n    \n}","3f6b33b9":"score=[]\nfor model_name,mp in model_params.items():\n    clf = GridSearchCV(mp[\"model\"],mp[\"params\"],cv=8,return_train_score=False)\n    clf.fit(x,y)\n    score.append({\n        \"Model\" : model_name,\n        \"Best_Score\": clf.best_score_,\n        \"Best_Params\": clf.best_params_\n    })","5920b7ce":"df5 = pd.DataFrame(score,columns=[\"Model\",\"Best_Score\",\"Best_Params\"])","60fb553f":"df5","c058014a":"from sklearn.model_selection import cross_val_score\nclf_svm = SVC(kernel=\"rbf\",C=1)\nscores = cross_val_score(clf_svm,x,y,cv=8,scoring=\"accuracy\")","6fbe46f0":"scores","f472bc41":"scores.mean()","fda0cc7d":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=0)","40342d43":"clf_svm1 = SVC(kernel=\"rbf\",C=1)\nclf_svm1.fit(x_train,y_train)","f3c7a908":"y_pred = clf_svm1.predict(x_test)","9ea11c5d":"from sklearn.metrics import accuracy_score\naccuracy = accuracy_score(y_test,y_pred)","2215ee85":"accuracy","b39cf9ca":"accuracy_dataframe = pd.DataFrame({\"y_test\": y_test, \"y_pred\": y_pred})","f30aaab6":"accuracy_dataframe.head()","c3a9a04b":"# So we are getting 93% Accuracy for predicting the Quality of Wine","4543d2c0":"# Now Lets see the Real value and Predicted Value","85993731":"# Let's Visualize the Data","0b81914c":"# Lets Select the best Features for our Model","106dbdab":" # We can see that there are Some outliers.So now let's remove those Outliers","965483e6":"# Now lets Change the Categorical 'String' Variables into Numerical Variables","2247c8ad":"# So we can see that, we are getting 93% accuracy for SVM & Random Forest","d65b9ca4":"# Now Let's select the best model for our Dataset"}}