{"cell_type":{"3711cec2":"code","253b65d5":"code","0604b01c":"code","23091975":"code","9aecf024":"code","f903074a":"code","4b70ab90":"code","d27fc4d8":"code","9b72bff2":"code","21ae067d":"code","baa8629c":"code","055d21f8":"code","f1a0043c":"code","9b97cc3a":"code","0df56fe2":"code","7fbc2260":"markdown","4436218b":"markdown","9417cd90":"markdown","8d250b94":"markdown","81749328":"markdown"},"source":{"3711cec2":"# Import required packages\nimport math\nimport os\nimport time\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport shap\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report, roc_auc_score, f1_score, recall_score, precision_score, SCORERS\n\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost.sklearn import XGBClassifier\nfrom lightgbm.sklearn import LGBMClassifier\nfrom sklearn.model_selection import GridSearchCV\n\npd.set_option('display.max_colwidth', None)\npd.options.display.max_rows = 999\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","253b65d5":"raw_data = pd.read_csv(\"\/kaggle\/input\/characteristics-corona-patients\/Characteristics_Corona_patients_version_6 - 19-7-2020.csv\")\nraw_data","0604b01c":"df = raw_data.copy()\n\ndef is_dead(row):\n    if math.isnan(row['deceased_date_D']):\n        return 0\n    else:\n        return 1\n\ndf['is_dead'] = df.apply(is_dead, axis=1)\n\ndf.drop(columns=['confirmed_date_D',\n                 'deceased_date_D',\n                 'released_date_D',\n                 'return_date_D',\n                 'date_onset_symptoms_D',\n                 'age_band',\n                 'background_diseases_binary',\n                 'country',\n                 'origin',\n                 'return_date_until_date_onset_symptoms',\n                 'confirmed_date_until_released_date',\n                 'confirmed_date_until_deceased_date'], inplace=True)\n\ndf = pd.concat([df.pop('is_dead'), df], axis=1)\n\ndf.isna().sum()\/len(df)","23091975":"# Cleaning 'treatment' column\ndef clean_treatment(data):\n    if data == '1':\n        return 1.0\n    elif type(data) == str:\n        return np.NaN\n    elif math.isnan(data):\n        return np.NaN\n    else:\n        return data\n    \ndf['treatment'] = df['treatment'].apply(clean_treatment)","9aecf024":"df2 = df.copy()\ndf2","f903074a":"# Collecting all symptoms and background_diseases features\nall_symptoms = []\nall_bd = []\n\nfor col in list(df2.columns):\n    if col[:8] == \"symptoms\":\n        all_symptoms.append(col)\n    elif col[:19] == \"background_diseases\":\n        all_bd.append(col)\n\n# Check which features contain missing data for dataset with symptoms\ntemp = df2.copy()\ntemp.dropna(how='any', subset=all_symptoms, inplace=True)\ntemp.reset_index(drop=True, inplace=True)\n\nprint(\"Length of symptoms data:\", len(temp))\n\ntemp.iloc[:,:8].isna().sum()\/len(temp)","4b70ab90":"# Check which features contain missing data for dataset with background diseases\ntemp = df2.copy()\ntemp.dropna(how='any', subset=all_bd, inplace=True)\ntemp.reset_index(drop=True, inplace=True)\n\nprint(\"Length of background_diseases data:\", len(temp))\n\ntemp.iloc[:,:8].isna().sum()\/len(temp)","d27fc4d8":"### Cleaning only symptoms\ndf.drop(columns=['severity_illness_infectious_person',\n                 'severity_illness'], inplace=True)\n\nall_symptoms = []\n\nfor col in list(df.columns):\n    if col[:8] == \"symptoms\":\n        all_symptoms.append(col)\n\ndf.drop(columns=all_symptoms, inplace=True)\n\ndf.dropna(how='any', inplace=True)\ndf.reset_index(drop=True, inplace=True)\n\ndf","9b72bff2":"list(df.columns)","21ae067d":"temp = df.copy()\n\nfor col in list(df.columns):\n    print(\"Column:\", col)\n    print(temp[col].value_counts().append(pd.Series(temp[col].isna().sum(),index=['NaN'])))\n    print(\"\\n\")","baa8629c":"for col in list(df.columns):\n    if col == \"age\" or col == \"date_onset_symptoms_until_confirmed_date\":\n        continue\n    else:\n        df[col] = df[col].astype('bool')\n\nprint(df.info())\ndf","055d21f8":"# Train-Test Split\nX = df.iloc[:,1:].copy()\ny = df.iloc[:,0:1].copy()\n\nX_train, X_test, y_train, y_test = train_test_split(X, y,\n                                                    test_size=0.2,\n                                                    shuffle=True,\n                                                    random_state=42)","f1a0043c":"df_train = pd.concat([y_train, X_train], axis=1)\ndf_train","9b97cc3a":"df_test = pd.concat([y_test, X_test], axis=1)\ndf_test","0df56fe2":"df_train.to_csv(\"Exception_Datasets (Train).csv\", index=False)\ndf_test.to_csv(\"Exception_Datasets (Test).csv\", index=False)","7fbc2260":"## Data Cleaning","4436218b":"## Further Data Cleaning","9417cd90":"## Loading Dataset","8d250b94":"## Importing Packages & Displaying Available Data Files","81749328":"## Data Wrangling"}}