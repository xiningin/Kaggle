{"cell_type":{"3c9e0339":"code","58be2ec1":"code","0f8c0ed7":"code","cb302ce7":"code","f5e5d8d8":"code","004363da":"code","3ab876d3":"code","86af8b36":"code","9483deed":"code","8d3c3cc1":"code","302f62a9":"code","3016b11a":"code","d9876864":"code","bd4d28ef":"code","0e541421":"code","69f6c836":"markdown","e5a31c86":"markdown"},"source":{"3c9e0339":"# Code you have previously used to load data\nimport pandas as pd\nimport numpy as np\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.model_selection import train_test_split\nfrom learntools.core import *\n\n# Path of the file to read. We changed the directory structure to simplify submitting to a competition\niowa_file_path = '..\/input\/train.csv'\nhome_data = pd.read_csv(iowa_file_path)\n","58be2ec1":"import seaborn as sns\nimport matplotlib.pyplot as plt","0f8c0ed7":"home_data.describe()\nhome_data.info()","cb302ce7":"sns.distplot(home_data['SalePrice'])","f5e5d8d8":"#f,ax=plt.subplots(figsize=(15,12))\n#sns.heatmap(home_data.corr(),vmax=0.8,square=True)\nk=10\ncols=home_data.corr().nlargest(k,'SalePrice')['SalePrice']\ncols","004363da":"train_y=np.log1p(home_data.pop('SalePrice'))\n","3ab876d3":"#sns.distplot(train_y)\ntest_data=pd.read_csv('..\/input\/test.csv')\ntrain_data=pd.read_csv('..\/input\/train.csv')\ntrain_data.pop('SalePrice')\ntrain_data.set_index(['Id'],inplace=True)\ntest_data.set_index(['Id'],inplace=True)\nfull_data=train_data.append(test_data)\n","86af8b36":"#full_data.info()\n#full_data['MSSubClass'].value_counts()\n#pd.get_dummies(full_data['MSSubClass'],prefix='MSSubClass').head()\nfull_dummy_data=pd.get_dummies(full_data)\n","9483deed":"#full_dummy_data.isnull().sum().sort_values(ascending=False).head(15)\nmean_cols=full_dummy_data.mean()\nfull_dummy_data=full_dummy_data.fillna(mean_cols)\nfull_dummy_data.isnull().sum()","8d3c3cc1":"numeric_cols=full_data.columns[full_data.dtypes!='object']\nnumeric_col_mean=full_dummy_data.loc[:,numeric_cols].mean()\nnumeric_col_std=full_dummy_data.loc[:,numeric_cols].std()\nfull_dummy_data.loc[:,numeric_cols]=(full_dummy_data.loc[:,numeric_cols]-numeric_col_mean)\/numeric_col_std","302f62a9":"dummy_train_data=full_dummy_data.loc[train_data.index]\ndummy_test_data=full_dummy_data.loc[test_data.index]\n","3016b11a":"from sklearn.linear_model import Ridge\nfrom sklearn.model_selection import cross_val_score\nalphas=np.logspace(-3,2,50)\nX_train=dummy_train_data.values\nX_test=dummy_test_data.values\ntest_scores=[]\nfor alpha in alphas:\n    clf=Ridge(alpha)\n    test_score=np.sqrt(-cross_val_score(clf,X_train,train_y,cv=10,scoring='neg_mean_squared_error'))\n    test_scores.append(np.mean(test_score))\nplt.plot(alphas,test_scores)\nplt.title('alphas vs cv error')","d9876864":"N_estimators=[20,50,100,150,200,250,300]\ntest_scores=[]\nfor N in N_estimators:\n    clf=RandomForestRegressor(n_estimators=N,max_features=0.3)\n    test_score=np.sqrt(-cross_val_score(clf,X_train,train_y,cv=5,scoring='neg_mean_squared_error'))\n    test_scores.append(np.mean(test_score))  \nplt.plot(N_estimators,test_scores)\nplt.title('N_estimator vs CV Error')\n\n","bd4d28ef":"ridge=Ridge(alpha=15)\nrf=RandomForestRegressor(n_estimators=350,max_features=0.3)\nridge.fit(X_train,train_y)\nrf.fit(X_train,train_y)\nridge_predict=ridge.predict(X_test)\ny_ridge=np.expm1(ridge_predict)\nrf_predict=rf.predict(X_test)\ny_rf=np.expm1(rf_predict)\ny_final=(y_ridge+y_rf)\/2","0e541421":"\noutput = pd.DataFrame({'Id': test_data.index,\n                       'SalePrice': y_final})\noutput.to_csv('submission.csv', index=False)","69f6c836":"**Analysis feature**","e5a31c86":"2.**build model**"}}