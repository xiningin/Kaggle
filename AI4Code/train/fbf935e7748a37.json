{"cell_type":{"7405f538":"code","2360c929":"code","483dc5a7":"code","80d84b0c":"code","bb7d63dd":"code","c4f1a115":"code","babc5ee5":"code","e781a071":"code","f71306a0":"code","9bab5214":"code","155a99db":"code","05dcda2c":"code","cda165da":"code","8c116cfc":"code","f0e3685f":"code","36e21846":"code","64a21ad5":"code","dcdefd55":"markdown","2c261862":"markdown","fd341322":"markdown","e0a9c5a2":"markdown","5cd6e6bb":"markdown","850cd328":"markdown","bd7cf808":"markdown"},"source":{"7405f538":"# Import libraries and create their respective shortcuts\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Import the dataset and \ndataset = pd.read_csv('..\/input\/ushealthinsurancedataset\/insurance.csv')","2360c929":"# Check data set headings\ndataset.head()","483dc5a7":"# Check dataset array dimensions\ndataset.shape","80d84b0c":"# Check the dataset summary\/description, not this is only the numerical data\ndataset.describe()","bb7d63dd":"# Create independant (X) and dependant (y) variables\nX = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, -1].values","c4f1a115":"# Encode the categorical in the second column of the data from strings into binary vectors\n# Dummy variables = n-1 to prevent dummy variable trap\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import OneHotEncoder\nct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(drop = 'first'), [1])], remainder='passthrough', sparse_threshold = 0)\n# sparse_threshold = 0 allows for six or more categories\n#drop, drops the dummy variable (line above)\nX = np.array(ct.fit_transform(X))","babc5ee5":"print(X)","e781a071":"# Encode the fifth column\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import OneHotEncoder\nct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(drop = 'first'), [4])], remainder='passthrough', sparse_threshold = 0)\n# sparse_threshold = 0 allows for six or more categories\n#drop, drops the dummy variable (line above)\nX = np.array(ct.fit_transform(X))","f71306a0":"print(X)","9bab5214":"#Encode the sixth column\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import OneHotEncoder\nct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(drop = 'first'), [5])], remainder='passthrough', sparse_threshold = 0)\n# sparse_threshold = 0 allows for six or more categories\n#drop, drops the dummy variable (line above)\nX = np.array(ct.fit_transform(X))","155a99db":"print(X)","05dcda2c":"# Data divided into a training and test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)","cda165da":"# Feature scaling \nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","8c116cfc":"# This class will identify the best features with highest p-values to determine the dependant variable\nfrom sklearn.linear_model import LinearRegression\nregressor = LinearRegression()\nregressor.fit(X_train, y_train)","f0e3685f":"# Dispay two vectors: vectors of real insurance charge in test set, second is the predicted insurance charges\ny_pred = regressor.predict(X_test)\nnp.set_printoptions(precision = 2)\nprint(np.concatenate((y_pred.reshape(len(y_pred), 1), y_test.reshape(len(y_pred), 1)), 1))","36e21846":"# Mean square error\nprint(\"Mean squared error: %.2f\" % np.mean((regressor.predict(X_test) - y_test) ** 2))","64a21ad5":"# Variance score where 1.0 represents a perfect score (100%)\nprint('Variance score: %.2f' % regressor.score(X_test, y_test))","dcdefd55":"**Training the multiple linear regression model on the training set** the model will now be trained on the training set and thereafter this training will allow the test set to make predictions","2c261862":"**Split the data into a training and test set** The data will now be divided into a training set and a test set. In this case will will create a test set which contains a random 20% of the training set.","fd341322":"**Predicting the test set results**","e0a9c5a2":"**Insurance prediction** The code herein will attempt to provide an accurate prediction for the cost of insurance. The independant variables: age, sex, bmi (body mass index), children, smoker or non-smoker, and the region, will be used to predict the charge of the insurance. ","5cd6e6bb":"**Feature Scaling** This will prevent certain independant variables with large values not overpower the prediction results. The feature scaling methods allows for more accurate predictions and is done prior to training the model so that data leakage from the training set does not occur in the test set.","850cd328":"**Data preprocessing and analysis** The data will need to be processed i.e. split in independant and dependant variables, categorical data changed to binary data, dummy variables to be correctly dealt with to prevent dummy variable trap. Herein we shall assume that there is no multicollinarity.","bd7cf808":"**Accuracy check** We will check the accuracy of this model by using a mean square error and variance score."}}