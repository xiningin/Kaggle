{"cell_type":{"b4d5fe0f":"code","c95828af":"code","8b9c34ae":"code","598656b5":"code","125aa3ab":"code","7acd3601":"code","7943578d":"code","125854ec":"code","02f5a4b4":"code","93f46e9a":"code","cf564fb4":"code","b3e0fd0c":"code","44d2651d":"code","d704bd95":"code","09761098":"code","f5678198":"code","cf93fd85":"code","289d6c1f":"code","6be459ea":"markdown","758d3bfa":"markdown","3ffcdc81":"markdown","d064037a":"markdown","1450a3c2":"markdown","56b1fbe2":"markdown","53f2dfcd":"markdown"},"source":{"b4d5fe0f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/working'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","c95828af":"!unzip \/kaggle\/input\/denoising-dirty-documents\/train.zip\n!unzip \/kaggle\/input\/denoising-dirty-documents\/test.zip\n!unzip \/kaggle\/input\/denoising-dirty-documents\/train_cleaned.zip\n!unzip \/kaggle\/input\/denoising-dirty-documents\/sampleSubmission.csv.zip","8b9c34ae":"import numpy as np\nfrom keras.layers import Input, Dense,Conv2D,MaxPooling2D,UpSampling2D,BatchNormalization\nfrom keras.models import Model,Sequential\nimport matplotlib.pyplot as plt\nimport cv2\nfrom keras.callbacks import EarlyStopping\nfrom sklearn.model_selection import train_test_split","598656b5":"plt.figure(figsize=(20, 2))\nfor root, dirs, files in os.walk('\/kaggle\/working\/train'):\n    for i in range(5):\n        ax = plt.subplot(1, 5, i+1)\n        img = cv2.imread(os.path.join(root,files[i]))\n        resized = cv2.resize(img, (128,128), interpolation = cv2.INTER_AREA)\n        plt.imshow(resized)\nplt.show()","125aa3ab":"plt.figure(figsize=(20, 2))\nfor root, dirs, files in os.walk('\/kaggle\/working\/train_cleaned'):\n    for i in range(5):\n        ax = plt.subplot(1, 5, i+1)\n        img = cv2.imread(os.path.join(root,files[i]))\n        resized = cv2.resize(img, (128,128), interpolation = cv2.INTER_AREA)\n        plt.imshow(resized)\nplt.show()","7acd3601":"# Load train and train_cleaned data\ntrain_data = []\ntrain_data_cleaned = []\ntrain_path = '\/kaggle\/working\/train'\ntrain_cleaned_path = '\/kaggle\/working\/train_cleaned'\n\n\n\nfor filename in os.listdir(train_path):\n    train_img = cv2.imread(os.path.join(train_path,filename))\n    train_img = cv2.cvtColor(train_img, cv2.COLOR_BGR2GRAY)\n    train_img = cv2.resize(train_img,(540, 258),interpolation = cv2.INTER_AREA)\n    train_img = train_img.astype('float32')\n    train_img = train_img\/255.0\n    train_data.append(train_img)\n    train_cleaned_img = cv2.imread(os.path.join(train_cleaned_path,filename))\n    train_cleaned_img = cv2.cvtColor(train_cleaned_img, cv2.COLOR_BGR2GRAY)\n    train_cleaned_img = cv2.resize(train_cleaned_img,(540, 258),interpolation = cv2.INTER_AREA)\n    train_cleaned_img = train_cleaned_img.astype('float32')\n    train_cleaned_img = train_cleaned_img\/255.0\n    train_data_cleaned.append(train_cleaned_img)","7943578d":"# Let's stack the images\ntrain_data = np.stack(train_data)\ntrain_data_cleaned = np.stack(train_data_cleaned)\n\n# Reshaping the data for model\ntrain_data = train_data.reshape(train_data.shape[0],train_data.shape[1],train_data.shape[2],1)\ntrain_data_cleaned = train_data_cleaned.reshape(train_data_cleaned.shape[0],train_data_cleaned.shape[1],train_data_cleaned.shape[2],1)\n\n\n\nx_train,x_val,y_train,y_val = train_test_split(train_data,train_data_cleaned,test_size=0.2)\n","125854ec":"# Define the model\ninput_img = Input(shape=(258,540,1))\nencoder = Conv2D(filters=64,kernel_size=(3,3),padding='same',activation='elu')(input_img)\nencoder = MaxPooling2D((2,2))(encoder)\ndecoder = Conv2D(64,kernel_size=(3,3),padding='same',activation='elu')(encoder)\ndecoder = UpSampling2D((2,2))(decoder)\ndecoder = Conv2D(1,kernel_size=(3,3),padding='same',activation='sigmoid')(decoder)\nautoencoder = Model(input_img,decoder)\nautoencoder.compile(loss='binary_crossentropy',optimizer='adam',metrics=['mse'])\n\nautoencoder.summary()\n","02f5a4b4":"early_stopping = EarlyStopping(monitor='val_loss',min_delta=0,patience=5,verbose=1, mode='auto')","93f46e9a":"history = autoencoder.fit(x_train,y_train,epochs=100,batch_size=20,validation_data=(x_val,y_val),callbacks=[early_stopping])","cf564fb4":"plt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.xlabel('Epochs')\nplt.ylabel('Model Loss')\nplt.legend(['Train', 'Test'])\nplt.show()","b3e0fd0c":"preds = autoencoder.predict(x_val)","44d2651d":"preds_0 = preds[0].reshape(preds.shape[1],preds.shape[2])\nx_val_0 = x_val[0].reshape(x_val.shape[1],x_val.shape[2])\nplt.imshow(preds_0,cmap='gray')","d704bd95":"preds_1= preds[1].reshape(preds.shape[1],preds.shape[2])\nx_val_1 = x_val[1].reshape(x_val.shape[1],x_val.shape[2])\nplt.imshow(preds_1,cmap='gray')","09761098":"def load_test(path):\n    test_data= []\n    test_keys= []\n    for filename in os.listdir(path):\n        test_key = filename.split('.')[0]\n        img = cv2.imread(os.path.join(path,filename))\n        img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n        img = cv2.resize(img,(540, 258),interpolation = cv2.INTER_AREA)\n        img = img.astype('float32')\n        img = img\/255.0\n        test_data.append(img)\n        test_keys.append(test_key)\n    return test_data,test_keys\n\ntest_path = '\/kaggle\/working\/test'\ntest_data,test_keys = load_test(test_path)\ntest_data = np.stack(test_data)\ntest_data = test_data.reshape(test_data.shape[0],test_data.shape[1],test_data.shape[2],1)","f5678198":"test_preds = autoencoder.predict(test_data)","cf93fd85":"test_preds_1= test_preds[1].reshape(test_preds.shape[1],test_preds.shape[2])\ntest_data_1 = test_data[1].reshape(test_data.shape[1],test_data.shape[2])\nplt.imshow(test_data_1,cmap='gray')","289d6c1f":"plt.imshow(test_preds_1,cmap='gray')","6be459ea":"Let's load our train an test images and preprocess them to make them appropriate for modelling","758d3bfa":"**Import the required packages**","3ffcdc81":"**Unzipping the files**","d064037a":"Let's define the callbacks for our model","1450a3c2":"# Load the test data and make predictions","56b1fbe2":"Creating a autoencoder using keras","53f2dfcd":"Let's visualize few images that we are going to deal with."}}