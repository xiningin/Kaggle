{"cell_type":{"3eac3f69":"code","d7ad63e3":"code","7f28c34c":"code","81f5dcfe":"code","db6f128f":"code","0546edee":"code","b9d29b3a":"code","851656f5":"code","d8921494":"code","85fb47ef":"code","337d306c":"code","049a7a5a":"code","fb465833":"code","ec646629":"markdown","87f40a11":"markdown","cd874691":"markdown","7473382e":"markdown","30bbec66":"markdown","51cc37a3":"markdown","36287fba":"markdown","20209e71":"markdown","fcf89448":"markdown","59ca9e4a":"markdown","4a7f14b2":"markdown","ef083bcb":"markdown","1f857017":"markdown","74e56cba":"markdown","a2eefbd3":"markdown","11608551":"markdown"},"source":{"3eac3f69":"import matplotlib.pyplot as plt\nplt.style.use('ggplot')\n\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.figure_factory as ff\nfrom bokeh.layouts import gridplot\nfrom bokeh.plotting import figure\nfrom bokeh.io import show, output_notebook\nfrom bokeh.io import curdoc\ncurdoc().theme = 'light_minimal'\nimport pandas as pd\n\nimport numpy as np\nimport warnings\nwarnings.filterwarnings(\"ignore\")","d7ad63e3":"df = sns.load_dataset('titanic')\n\ndisplay(df.head(5))","7f28c34c":"fig, axes = plt.subplots(2, 1, figsize = (20, 12)) # syntax is plt.subplots(nrows, ncols, figsize=(width, height))\nax = axes.ravel()\n\ndf.loc[df.sex == 'male'].fare.plot(kind = 'hist', ax = ax[0], alpha = 0.5,  bins = 50, sharex=True, label = 'male', edgecolor='black', linewidth=3)\ndf.loc[df.sex == 'female'].fare.plot(kind = 'hist', ax = ax[0], alpha = 0.5, bins = 50, sharex=True, label = 'female', edgecolor='black', linewidth=3)\n\nfig.suptitle(\"Histogram\/Density of fares based on sex\", fontsize = 20)\n\ndf.loc[df.sex == 'male'].fare.plot(kind = 'density', ax = ax[1], alpha = 0.5, label = 'male', linewidth=4)\ndf.loc[df.sex == 'female'].fare.plot(kind = 'density', ax = ax[1], alpha = 0.5, label = 'female', linewidth=4)\n\nax[0].legend(fontsize=18)\nax[0].set_xlim(-15, 225)\nax[0].set_title('Fare Histogram based on sex', fontsize = 15)\nax[0].tick_params(axis='both', which='major', labelsize=14)\nax[0].tick_params(axis='both', which='minor', labelsize=14)\n\nax[1].legend(fontsize=18)\nax[1].set_xlim(-15, 225)\nax[1].set_xlabel('fare', fontsize = 18)\nax[1].set_title('Fare distribution based on sex', fontsize = 15)\nax[1].tick_params(axis='both', which='major', labelsize=14)\nax[1].tick_params(axis='both', which='minor', labelsize=14)","81f5dcfe":"fig, ax = plt.subplots(2, 1, figsize = (20, 12))\n\nfig.suptitle(\"Histogram of fares based on sex\", fontsize = 20)\n\nax[0].hist(df.loc[df.sex == 'male'].fare, bins=80, density=True, alpha=0.5, label='male', edgecolor='black', linewidth=3)\nax[0].hist(df.loc[df.sex == 'female'].fare, bins=80, density=True, alpha=0.5, label='female', edgecolor='black', linewidth=3)\n\nax[1].hist(df.loc[df.sex == 'male'].fare, bins=80, density=False, alpha=0.5, label='male', edgecolor='black', linewidth=3)\nax[1].hist(df.loc[df.sex == 'female'].fare, bins=80, density=False, alpha=0.5, label='female', edgecolor='black', linewidth=3)\n\nax[0].set_xlim(-15, 225)\nax[0].set_xlabel('fare', fontsize = 18)\nax[0].set_ylabel('density', fontsize = 18)\nax[0].set_title('Fare Histogram based on sex (Density)', fontsize = 15)\nax[0].tick_params(axis='both', which='major', labelsize=14)\nax[0].tick_params(axis='both', which='minor', labelsize=14)\nax[0].legend(fontsize=22)\n\nax[1].set_xlim(-15, 225)\nax[1].set_xlabel('fare', fontsize = 18)\nax[1].set_ylabel('count', fontsize = 18)\nax[1].set_title('Fare Histogram based on sex (Count)', fontsize = 15)\nax[1].tick_params(axis='both', which='major', labelsize=14)\nax[1].tick_params(axis='both', which='minor', labelsize=14)\nax[1].legend(fontsize=22)\n\nplt.subplots_adjust(hspace = 0.3)","db6f128f":"fig, ax = plt.subplots(2, 1, figsize = (20, 12))\n\nfig.suptitle(\"Histogram of Ages based on sex\", fontsize = 20)\n\nsns.histplot(data = df, x = 'age', hue = 'sex', ax = ax[0], kde=True, bins = 50,\n             stat = 'density',\n             alpha = 0.3, legend = True, hue_order = ['male', 'female'], \n             edgecolor = 'black',\n             linewidth = 3, line_kws= {'linewidth': 3})\n\nsns.histplot(data = df, x = 'age', hue = 'sex', ax = ax[1], kde=True, \n             common_norm = False, bins = 50, hue_order = ['male', 'female'],\n             edgecolor = 'black',\n             alpha = 0.3, legend = True, linewidth = 3, line_kws= {'linewidth': 3})\n\nax[0].legend(fontsize=18)\nax[0].set_title('Age Histogram based on sex (Density)', fontsize = 15)\nax[0].tick_params(axis='both', which='major', labelsize=14)\nax[0].tick_params(axis='both', which='minor', labelsize=14)\n\nax[1].legend(fontsize=18)\nax[1].set_xlabel('Age', fontsize = 18)\nax[1].set_title('Age Histogram based on sex (Count)', fontsize = 15)\nax[1].tick_params(axis='both', which='major', labelsize=14)\nax[1].tick_params(axis='both', which='minor', labelsize=14)","0546edee":"fig, axes = plt.subplots(2, 1, figsize = (20, 12))\nax = axes.ravel()\n\nfig.suptitle(\"Histogram of Ages based on sex\", fontsize = 20)\n\nsns.histplot(data = df, x = 'age', hue = 'sex', ax = ax[0], kde=True, bins = 50,\n             stat = 'density',\n             alpha = 0.3, legend = True, \n             edgecolor = 'black',\n             hue_order = ['male', 'female'], \n             linewidth = 2, line_kws= {'linewidth': 3})\n\nax[0].legend(fontsize=18)\nax[0].set_title('Age Histogram based on sex with hue', fontsize = 15)\nax[0].tick_params(axis='both', which='major', labelsize=14)\nax[0].tick_params(axis='both', which='minor', labelsize=14)\n\nsns.histplot(data = df.loc[df.sex == 'male'], x = 'age', \n             ax = ax[1], kde=True, bins = 50,\n             stat = 'density', color = 'red',\n             edgecolor = 'black',\n             alpha = 0.3, label = 'male',\n             linewidth = 2, line_kws= {'linewidth': 3})\n\nsns.histplot(data = df.loc[df.sex == 'female'], x = 'age', \n             ax = ax[1], kde=True, bins = 50, stat = 'density', \n             alpha = 0.3,  label = 'female',\n             edgecolor = 'black',\n             linewidth = 2, line_kws= {'linewidth': 3})\n\n\nax[1].legend(fontsize=18)\nax[1].set_xlabel('Age', fontsize = 18)\nax[1].set_title('Age Histogram based on sex without HUE', fontsize = 15)\nax[1].tick_params(axis='both', which='major', labelsize=14)\nax[1].tick_params(axis='both', which='minor', labelsize=14)\n\nplt.subplots_adjust(hspace = 0.3)","b9d29b3a":"fig, axes = plt.subplots(2, 1, figsize = (20, 12))\nax = axes.ravel()\n\nfig.suptitle(\"KDE of fare based on embark_town\", fontsize = 20)\n\nsns.kdeplot(data = df, x = 'fare', hue = 'embark_town', ax = ax[0], linewidth = 3, fill = True,  legend = True)\n\nax[0].set_title('Fare KDE based on embark_town with hue', fontsize = 15)\nax[0].tick_params(axis='both', which='major', labelsize=14)\nax[0].tick_params(axis='both', which='minor', labelsize=14)\n\nsns.kdeplot(data = df.loc[df.embark_town == 'Southampton'], x = 'fare', \n             ax = ax[1],  color = 'red', fill = True,\n             alpha = 0.3, label = 'Southampton',\n             linewidth = 3)\n\nsns.kdeplot(data = df.loc[df.embark_town == 'Cherbourg'], x = 'fare', \n             ax = ax[1], fill = True, color = 'blue',\n             alpha = 0.3,  label = 'Cherbourg',\n             linewidth = 3)\n\nsns.kdeplot(data = df.loc[df.embark_town == 'Queenstown'], x = 'fare', \n             ax = ax[1], fill = True, color = 'yellow',\n             alpha = 0.3,  label = 'Queenstown',\n             linewidth = 3)\n\n\nax[1].legend(fontsize=18)\nax[1].set_xlabel('Age', fontsize = 18)\nax[1].set_title('Fare KDE based on embark_town without HUE', fontsize = 15)\nax[1].tick_params(axis='both', which='major', labelsize=14)\nax[1].tick_params(axis='both', which='minor', labelsize=14)\n\nplt.subplots_adjust(hspace = 0.3)","851656f5":"fig = px.histogram(df.loc[(df.fare.notna()) & (df.embark_town.notna())], x=\"age\", color=\"embark_town\",\n                  opacity=0.5, nbins = 50, title = 'age histogram based on embark_town')\n\nfig.update_layout(\n    font_size = 15,\n    title_font_size = 20,\n)\n\nfig.show()","d8921494":"hist_data = [df.loc[df.embark_town == 'Southampton'].fare, \n             df.loc[df.embark_town == 'Cherbourg'].fare,\n             df.loc[df.embark_town == 'Queenstown'].fare]\n\ngroup_labels = ['Southampton', 'Cherbourg', 'Queenstown']\n\n# Create distplot with custom bin_size\nfig = ff.create_distplot(hist_data, group_labels, bin_size=.2, show_hist = False, show_rug = False)\nfig.update_xaxes(range=[-10, 250])\nfig.update_layout(\n    font_size = 15,\n    title = 'fare histogram based on embark_town',\n    title_font_size = 20,\n    xaxis_title=\"fare\",\n    yaxis_title=\"Density\",\n    \n)\nfig.show()","85fb47ef":"hist_1, bins_1 = np.histogram(df.loc[df.embark_town == 'Southampton'].age.dropna(), bins = 50, normed = True)\nhist_2, bins_2 = np.histogram(df.loc[df.embark_town == 'Cherbourg'].age.dropna(), bins=50, normed = True)\nhist_3, bins_3 = np.histogram(df.loc[df.embark_town == 'Queenstown'].age.dropna(), bins=50, normed = True)","337d306c":"output_notebook()\n\np = figure(title = 'age histogram based on embark_town')\np.quad(top=hist_1, bottom=0, left=bins_1[:-1], right=bins_1[1:],\n           fill_color=\"navy\", line_color=\"white\", alpha=0.3, legend_label=\"Southampton\",)\n\np.quad(top=hist_2, bottom=0, left=bins_2[:-1], right=bins_2[1:],\n           fill_color=\"#ff8888\", line_color=\"white\", alpha=0.3, legend_label='Cherbourg')\n\np.quad(top=hist_3, bottom=0, left=bins_3[:-1], right=bins_3[1:],\n           fill_color=\"orange\", line_color=\"white\", alpha=0.3, legend_label='Queenstown')\n\np.y_range.start = 0\np.legend.location = \"center_right\"\np.legend.background_fill_color = \"#fefefe\"\np.xaxis.axis_label = 'age'\np.yaxis.axis_label = 'Density'\np.grid.grid_line_color=\"black\"\np.ygrid.grid_line_alpha = 0.2\np.xgrid.grid_line_alpha = 0.2\n\np.xgrid.visible = True\n\n\nshow(p)\n\n","049a7a5a":"fig = px.histogram(df, x=\"age\", color=\"class\", \n                   facet_col=\"class\",\n                   color_discrete_sequence=px.colors.qualitative.G10,\n                   title=\"Passenger Class Age Histogram\")\n\nfig.update_layout(\n    font_size = 15,\n    title = 'Passenger Class Age Histogram',\n    title_font_size = 20,\n    xaxis_title=\"age\",\n    yaxis_title=\"count\")\n\nfig.show()","fb465833":"hist_data = [df.loc[df.sex == 'male'].fare, df.loc[df.sex == 'female'].fare]\n\ngroup_labels = ['male', 'female']\n\n# Create distplot with custom bin_size\nfig = ff.create_distplot(hist_data, group_labels, bin_size=5., show_hist = True, show_rug = True)\nfig.update_xaxes(range=[-10, 250])\nfig.update_layout(\n    font_size = 15,\n    title = 'fare histogram based on sex',\n    title_font_size = 20,\n    xaxis_title=\"fare\",\n    yaxis_title=\"Density\")\n\nfig.show()","ec646629":"<h2 style=\"background-color:#e6f7ff;\" align = 'center'> Overlapping Density-Histogram Plots using Pandas-Matplotlib-Seaborn-Plotly-Bokeh <\/h2>\n\n<div class=\"row\" style=\"margin-bottom: 100px\">\n  <div class=\"column\">\n    <img src=\"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/e\/ed\/Pandas_logo.svg\/1200px-Pandas_logo.svg.png\" align=\"left\" style=\"width:28%; margin-left:5%\">\n  <\/div>\n    <br>\n    <div class=\"column\">\n    <img src=\"https:\/\/matplotlib.org\/_static\/logo2_compressed.svg\" align=\"left\" style=\"width:28%; margin-left:5%\">\n  <\/div>\n  <div class=\"column\">\n    <img src=\"https:\/\/seaborn.pydata.org\/_static\/logo-wide-lightbg.svg\" style=\"width:28%; margin-left:5%;margin-top:-10px\" align=\"left\">\n  <\/div>\n <\/div>\n    <br><br>\n    <div class=\"row\" style=\"display:inline-block;\">\n    <div class=\"column\" style=\"width:30%; margin-right:10%; display:inline-block;\">\n    <img src=\"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/3\/37\/Plotly-logo-01-square.png\/1200px-Plotly-logo-01-square.png\">\n   <\/div>\n    <div class=\"column\" style=\"width:30%;  margin-left:60%; margin-top:-160px\">\n    <img src=\"https:\/\/i.imgur.com\/mQ3JFJ1.png\" >\n  <\/div>\n    <\/div>\n    \n    \n<br><br><br>","87f40a11":"Specify groups using `hue`","cd874691":"<h1 style=\"background-color:#e6f7ff;\" align = 'center'><i>plotly<\/i><\/h1>\n<a id = \"plotly\"><\/a>\n\n<img src = \"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/3\/37\/Plotly-logo-01-square.png\/1200px-Plotly-logo-01-square.png\" width = 250><\/img>\n\n<br>\n\nPlotly [Python documentation](https:\/\/plotly.com\/python\/) is outstanding. Differently from pandas and seaborn, both using a matplotlib backend (at least that's the most popular choice), plotly has its own way of handling figures and subplots. That's why here you won't see any `ax` or `plt`.<br><br>\n\n*References*:\n\n- https:\/\/plotly.com\/python\/histograms\/\n- https:\/\/plotly.com\/python\/distplot\/","7473382e":"Difference in specyfing `hue` or plot groups separately","30bbec66":"<a id = \"random_plots\"><\/a>\n<h1 style=\"background-color:#e6f7ff;\" align = 'center'><i>some random plots<\/i><\/h1>","51cc37a3":"<a id = \"imports\"><\/a>\n<h3 style=\"background-color:#e6f7ff;\" align = 'center'><i>Imports<\/i><\/h3>","36287fba":"See that without `hue` the distributions are calculated indipendently (as if there were the same number of men and women).","20209e71":"<a id = \"dataset\"><\/a>\n<h2 style=\"background-color:#e6f7ff;\" align = 'center'><i>Titanic Dataset<\/i><\/h2>\n\nWe will use the popular Titanic Dataset and plot different numerical variables (age\/fare) based on different groups (sex\/embark_town). \n\n<div>\n<img src = \"https:\/\/lithub.com\/wp-content\/uploads\/sites\/3\/2021\/02\/titanic-feat1.jpg\" style=\"width:100%\" align=\"center\">\n    <\/div>","fcf89448":"<h1 style=\"background-color:#e6f7ff;\" align = 'center'><i>matplotlib<\/i><\/h1>\n<a id = \"matplotlib\"><\/a>\n<img src = \"https:\/\/matplotlib.org\/_static\/logo2_compressed.svg\" width = 150><\/img>\n<br><br>\n\nThere is no *density* plot in Matplotlib. To plot a distribution you can estimate it and then plot it with `plt.plot(x, y)`<br><br>\n\n*References*:\n\n- https:\/\/matplotlib.org\/stable\/api\/_as_gen\/matplotlib.pyplot.hist.html","59ca9e4a":"<h2 style=\"background-color:#e6f7ff;\" align = 'center'><i>Table of Contents<\/i><\/h2>\n\n- [dataset](#dataset)\n- [imports](#imports)\n- [pandas](#pandas)\n- [matplotlib](#matplotlib)\n- [seaborn](#seaborn)\n- [plotly](#plotly)\n- [bokeh](#bokeh)\n- [some random plots](#random_plots)\n\n\n**Reason**: *any time you have numerical features and categorical ones in your dataframe it is nice to check the distribution of the numerical ones based on different groups\/levels of the categorical ones.* \n\n**TLDR**: `pandas`, `matplotlib` and `seaborn` are pretty much the same, when used with default `matplotlib` backend. `plotly` and `bokeh` have their own syntax: you may need more time to understand how to use them, but you may get better visualizations (I didn't yet). ","4a7f14b2":"<h1 style=\"background-color:#e6f7ff;\" align = 'center'><i>seaborn<\/i><\/h1>\n<a id = \"seaborn\"><\/a>\n\n<img src = \"https:\/\/seaborn.pydata.org\/_static\/logo-wide-lightbg.svg\" width = 150><\/img>\n\n<br>\n\nhttps:\/\/seaborn.pydata.org\/introduction.html\n\nIt builds on top of matplotlib and integrates closely with pandas data structures.<br><br>\n\n*References*:\n\n- https:\/\/seaborn.pydata.org\/generated\/seaborn.kdeplot.html\n- https:\/\/seaborn.pydata.org\/generated\/seaborn.histplot.html\n- https:\/\/seaborn.pydata.org\/generated\/seaborn.displot.html","ef083bcb":"<h1 style=\"background-color:#e6f7ff;\" align = 'center'><i>bokeh<\/i><\/h1>\n<a id = \"bokeh\"><\/a>\n\n<img src = \"https:\/\/numfocus.org\/wp-content\/uploads\/2018\/03\/Bokeh-Logo-Twitter.png\" width = 150><\/img>\n\n<br>\n\nBokeh allows for a great deal of customization and as Plotly it has its own way of dealing with figures, axes and legend.\n\nPer documentation you need to calculate your own histogram, using `np.histogram`.\n\n<br><br>\n\n\n*References*:\n\n- https:\/\/docs.bokeh.org\/en\/latest\/\n- https:\/\/docs.bokeh.org\/en\/latest\/docs\/gallery\/histogram.html\n- https:\/\/docs.bokeh.org\/en\/latest\/docs\/gallery.html#id4","1f857017":"<a id = \"pandas\"><\/a>\n<h1 style=\"background-color:#e6f7ff;\" align = 'center'><i>pandas<\/i><\/h1>\n<img src = \"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/e\/ed\/Pandas_logo.svg\/1200px-Pandas_logo.svg.png\" width = 150><\/img>\n<br><br>\n\nIf not specified `pandas` uses a `matplotlib` backend for its plots. \n\nBy default, when you call `df.plot(kind = 'hist')` or `df.plot(kind = 'density')`, Pandas will plot all the numerical variables found in `df`. Notice that `density` and `kde` generate the same plot. <br>\n<br>\n\n\n*References*:\n\n- https:\/\/pandas.pydata.org\/docs\/reference\/api\/pandas.DataFrame.hist.html\n\n- https:\/\/pandas.pydata.org\/docs\/reference\/api\/pandas.DataFrame.plot.hist.html\n\n- https:\/\/pandas.pydata.org\/docs\/reference\/api\/pandas.DataFrame.plot.kde.html","74e56cba":"_plotly_","a2eefbd3":"<div>\n    <h5>This is a simple stackoverflow-like notebook. <\/h5>\n    <\/div>","11608551":"If you want just the density use `sns.kdeplot` (which does the same as `sns.displot(kind = 'kde')`)"}}