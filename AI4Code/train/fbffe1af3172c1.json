{"cell_type":{"68f41a92":"code","2812c7c8":"code","ba8ff573":"code","c2478d3b":"code","35a736e3":"code","41521d4b":"code","3d2fb46d":"code","9d759621":"code","3140e220":"code","83613507":"code","495cf83a":"code","b6e2d2dd":"code","c0ee73a2":"code","099c53eb":"code","7e9ddea4":"code","50c33026":"code","76b332d7":"code","c657d73f":"code","d14fee3d":"code","82fd16dc":"code","ec3f36e2":"code","b005d504":"code","cae2427d":"code","1ffcdda8":"code","92664436":"code","567bf318":"code","3d1ef7df":"markdown","62171f57":"markdown","697b8b80":"markdown","86067c59":"markdown","bfc6c6e4":"markdown","c6a4db6b":"markdown","49cf3ff5":"markdown","b559ae85":"markdown","b6b5f462":"markdown"},"source":{"68f41a92":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport warnings\nimport matplotlib.dates as mdates\nimport datetime\nimport plotly.graph_objs as go\nfrom scipy.integrate import solve_ivp\nfrom scipy.optimize import minimize\nfrom scipy.integrate import odeint\n%config IPCompleter.greedy=True\nwarnings.filterwarnings('ignore')\n%matplotlib inline ","2812c7c8":"#Reading datasets\ndf_age = pd.read_csv(\"\/kaggle\/input\/covid19-in-india\/AgeGroupDetails.csv\",index_col = 0)\ndf_statetests = pd.read_csv(\"\/kaggle\/input\/covid19-in-india\/StatewiseTestingDetails.csv\")\ndf_hosp = pd.read_csv('\/kaggle\/input\/covid19-in-india\/HospitalBedsIndia.csv',index_col=0)\ndf_pop = pd.read_csv('\/kaggle\/input\/covid19-in-india\/population_india_census2011.csv',index_col= 0)\ndf_individual = pd.read_csv('\/kaggle\/input\/covid19-in-india\/IndividualDetails.csv',index_col=0)\ndf_testlabs = pd.read_csv('\/kaggle\/input\/covid19-in-india\/ICMRTestingLabs.csv',index_col= 0)\ndf_india = pd.read_csv(\"\/kaggle\/input\/covid19-in-india\/covid_19_india.csv\",index_col= 0)","ba8ff573":"df_india.head()","c2478d3b":"df_india.info()","35a736e3":"df_india['Date'] = pd.to_datetime(df_india['Date'], dayfirst=True)","41521d4b":"#Checking for missing values in all the dataframes\ndf_india.isnull().sum()","3d2fb46d":"#Visualizing the trend in India for infected,confirmed, recovered\ndf_india['Date'] = pd.to_datetime(df_india['Date'], dayfirst=True)\nCovid_df = df_india[['Date','State\/UnionTerritory','Cured','Deaths','Confirmed']]\nCovid_df = Covid_df.groupby('Date')[['Confirmed', 'Cured','Deaths']].sum().reset_index()\nCovid_df['Active'] = Covid_df['Confirmed'] - Covid_df['Cured'] - Covid_df['Deaths']\nCovid_df['new_case\/day'] = Covid_df['Confirmed'] - Covid_df['Confirmed'].shift(1)\nCovid_df['growth_ratio'] = Covid_df['new_case\/day'] \/ Covid_df['new_case\/day'].shift(1)\nCovid_df['new_case\/day'] = Covid_df['new_case\/day'].replace(np.nan,'0.0')\nCovid_df['growth_ratio'] = Covid_df['growth_ratio'].replace(np.nan,'0.0')\ncovid_melt_df = pd.melt(Covid_df, id_vars=['Date'], value_vars=['Confirmed','Active','Cured','new_case\/day','Deaths'])\ntarget_date = covid_melt_df['Date'].max()\nfig = px.line(covid_melt_df, x=\"Date\", y=\"value\", color='variable', \n              title=f'All-India Cases as of {target_date}')\nfig.show()","9d759621":"state_report = df_india.groupby(by = 'State\/UnionTerritory').max().reset_index()\nimport IPython\nIPython.display.HTML('<div class=\"flourish-embed flourish-bar-chart-race\" data-src=\"visualisation\/1977187\" data-url=\"https:\/\/flo.uri.sh\/visualisation\/1977187\/embed\"><script src=\"https:\/\/public.flourish.studio\/resources\/embed.js\"><\/script><\/div>')","3140e220":"max_date = df_india['Date'].max()\nstates_df = df_india.query('(Date == @max_date) & (Confirmed > 35000)').sort_values('Confirmed', ascending=False)\nstates_df['Active'] = states_df['Confirmed'] - states_df['Cured'] - states_df['Deaths']\nstates_melt_df = pd.melt(states_df, id_vars='State\/UnionTerritory', value_vars=['Confirmed','Active', 'Cured','Deaths'])\nfig = px.bar(states_melt_df.iloc[::-1],\n             x='value', y='State\/UnionTerritory', color='variable', barmode='group',\n             title=f'Confirmed\/Cured\/Deaths as on {max_date}', text='value', height=800, orientation='h')\nfig.show()","83613507":"latest = df_india[df_india[\"Date\"] > pd.to_datetime('2020-04-01')]\n\nlatest2 = latest.groupby('State\/UnionTerritory')['Confirmed','Deaths','Cured',\"Date\"].max().reset_index()\n\nlatest2['Active'] = latest2['Confirmed'] - (latest2['Deaths'] - latest2['Cured'])\n\nstate_list = list(latest2.sort_values('Active',ascending = False)['State\/UnionTerritory'])[0:15]\n\nstates_confirmed = {}\nstates_deaths = {}\nstates_recovered = {}\nstates_active = {}\nstates_dates = {} ","495cf83a":"fig = plt.figure(figsize=(25,20),dpi = 250)\n\nimport matplotlib.dates as mdates\n\n\ndef movingaverage(values,N):\n    cumulativesum = [0]\n    movingav = []\n    \n    for i,x in enumerate(values,1):\n        cumulativesum.append(cumulativesum[i-1] + x)\n        \n        if i >= N:\n            movingav.append((cumulativesum[i] - cumulativesum[i-N]) \/ N)\n        else:\n            movingav.append(0)\n    return movingav\n\n\ndef percentchange(values):\n    \n    pctchange = []\n    \n    for i in range(0,len(values)):\n        pastsum = 0\n        \n        for j in range(i):\n            pastsum = pastsum + values[j]\n        \n        pctchange.append(int((values[i]\/pastsum)*100))\n        \n    return pctchange\n\naxno = 1\nsns.set_style('darkgrid')\n\nfor state in state_list:\n    df1 = latest[latest['State\/UnionTerritory'] == state].reset_index(drop = True)\n\n    new_cases = [0]\n\n    state_dates = latest[latest['State\/UnionTerritory'] == state]['Date']\n    \n    for i in range (1,len(df1)):\n        cases_delta = (df1['Confirmed'][i] - df1['Confirmed'][i-1])\n        new_cases.append(cases_delta)\n\n    df1['New Cases'] = new_cases\n    \n    \n    ax = fig.add_subplot(5,3,axno)\n    ax.xaxis.set_major_formatter(mdates.DateFormatter('%d-%b'))\n    \n    ax.bar(state_dates.values,df1['New Cases'], label = 'Day wise confirmed cases',color = 'yellow')\n    plt.title(state,fontsize = 20)\n    \n    plt.xlim(pd.to_datetime('2020-04-01'),pd.to_datetime('2020-08-01'))\n    moving_aves = movingaverage(df1['New Cases'],10)\n    \n    ax.plot(state_dates.values,moving_aves,color='red',lw = 2.5,label = 'Moving Average')\n    ax.text(datetime.date(2020,4, 15), 28, \"*\",fontsize = 20)\n    ax.text(datetime.date(2020,5,4), 31, \"*\",fontsize = 20)\n    ax.text(datetime.date(2020,6, 18), 120, \"*\",fontsize = 20)\n\n    handles, labels = ax.get_legend_handles_labels()\n    fig.legend(handles, labels, loc='upper left',)\n    axno = axno + 1\n\nplt.suptitle('Confirmed Cases with a 10 day moving average',fontsize = 30,y=1.0)\nplt.tight_layout(pad = 4.0)\nplt.savefig(\"State\")\n","b6e2d2dd":"df_statetests.head()","c0ee73a2":"df_statetests.info()","099c53eb":"#Converting the Date column's datatype to date \ndf_statetests['Date']= pd.to_datetime(df_statetests['Date'], dayfirst=True)\n#State wise testing\nstate_test = pd.pivot_table(df_statetests, values=['TotalSamples','Negative','Positive'], index='State', aggfunc='max')\nstate_names = list(state_test.index)\nstate_test['State'] = state_names\n\nplt.figure(figsize=(15,10))\nsns.set_color_codes(\"pastel\")\nsns.barplot(x=\"TotalSamples\", y= state_names, data=state_test,label=\"Total Samples\", color = '#9370db')\n#sns.barplot(x=\"Negative\", y=state_names, data=state_test,label='Negative', color= '#ff9999')\nsns.barplot(x=\"Positive\", y=state_names, data=state_test,label='Positive', color='#87479d')\nplt.title('Testing statewise insight',fontsize = 20)\nplt.legend(ncol=2, loc=\"lower right\", frameon=True);","7e9ddea4":"values = list(df_testlabs['state'].value_counts())\nnames = list(df_testlabs['state'].value_counts().index)\n\nplt.figure(figsize=(15,10))\nsns.set_color_codes(\"pastel\")\nplt.title('ICMR Testing Centers in each State', fontsize = 20)\nsns.barplot(x= values, y= names,color = '#00FFFF');","50c33026":"#Prediction using fbprophet\n\nmodel_pro_df = df_india.groupby(\"Date\")[\"Confirmed\"].sum().reset_index()\n","76b332d7":"from fbprophet import Prophet\nfrom fbprophet.plot import plot_plotly, add_changepoints_to_plot\n\n\n#convert data to natural log as for some cases values might be rreally small while for others its quite large. Therefore to reduce the impact of such\n#outliers of sort we take log to normalize distribution of data.\n\nmodel_pro_df['Confirmed']= np.log(model_pro_df['Confirmed'])\n\n#making dataset prophet compliant\nmodel_pro_df.columns = ['ds','y']\nmodel_pro_df.head()","c657d73f":"m1 = Prophet(daily_seasonality=True)\nm1.fit(model_pro_df)\nfuture=m1.make_future_dataframe(periods=90)\nprop_forecast=m1.predict(future)\nforecast = prop_forecast[['ds','yhat']].tail(30)\nprop_forecast.tail().T\n\nfig = plot_plotly(m1, prop_forecast)\nfig = m1.plot(prop_forecast,xlabel='Date',ylabel='Confirmed Cases')","d14fee3d":"prop_forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()","82fd16dc":"np.exp(prop_forecast[['yhat', 'yhat_lower', 'yhat_upper']].tail())","ec3f36e2":"m1.plot_components(prop_forecast);","b005d504":"#Performance Metric\n\nfrom fbprophet.diagnostics import cross_validation\ndf_cv = cross_validation(m1, initial='30 days', period='15 days', horizon = '120 days')\ndf_cv.head()","cae2427d":"from fbprophet.plot import plot_cross_validation_metric\nfig = plot_cross_validation_metric(df_cv, metric='rmse')","1ffcdda8":"from fbprophet.diagnostics import performance_metrics\nperformance_metrics_results = performance_metrics(df_cv)\nperformance_metrics_results.describe()","92664436":"from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error\n\n#merging the predicted values and the original one\nFinal_df = prop_forecast.set_index('ds')[['yhat']].join(model_pro_df.set_index('ds').y).reset_index()\nFinal_df.dropna(inplace=True)\nprint(\"R2 SCORE\")\nprint(r2_score(Final_df.y, Final_df.yhat))\n\nprint(\"Mean Squared Error\")\nprint(mean_squared_error(Final_df.y, Final_df.yhat))\n\nprint(\"Mean Absolute Error\")\nprint(mean_absolute_error(Final_df.y, Final_df.yhat))","567bf318":"fig = plt.figure(figsize=(15, 10))\nax = plt.subplot() \nplt.title(\"Actual Vs Predicted Covid Cases\")\nax.plot(prop_forecast['ds'],prop_forecast['yhat'],color='green',linestyle='dashed')\nax.plot(model_pro_df['ds'],model_pro_df['y'],color='red')\n","3d1ef7df":"> *We can see that we have number of confirmed cases, deaths and recoveries against different dates for respective State\/UTs of India. This particular dataset can be leveraged and further explored to understand how different states are doing as far as the pandemic is concerned.\n> *","62171f57":"We can see from the above graph that Maharashtra is leading with maximum number of confirmed cases , followed by Tamil Nadu, Delhi,karnataka and Andhra Pradesh. Here, we can see that almost 45% of confirmed cases in Maharashtra have been cured while for Tamil Nadu and Delhi its 30% and 15.2% respectively.","697b8b80":"This graph lays down daily cases from 1st April for different states. We can see that many have such a steep growth of cases.\nIndia underwent 4 phases of lockdown, the '*' point to different phases of lockdown imposed by the government.\nIt is noteworthy that states like Karnataka and Bihar with such huge population had really less number of covid cases till the end of phase-4 lockdown.\nIs it because of the medical facility available or the testing wasn't at par for these states. We can further have a look at their daily testing capacity to guage our response.","86067c59":"> *We can see that from almost 15th April the number of confirmed cases started increasing exponentially.\nThere is a gradual exponential increase in number of infected, recovered. It is certainly relieving to see that \nthe slope of death and new cases is quite less while that of cured cases is huge.  \n> We can see that post May 31st confirmed cases increased further more; making the slope further steep. We can further deep dive and look into probable casuses of this. As Covid-19 spreads through human contact one of the cause could be the end of Nation wide lockdown(this still needs to be concluded as India went through 4 phases of lockdown but still we see exponential increase in number of infected people )*","bfc6c6e4":"> *The trend shows an increase in the confirmed cases with time which is not good. \n> Also, confirmed cases reach a peak around mid of the week, this can be due to several reasons; \n> First being the incubation period of the virus.\n> *","c6a4db6b":"The RMSE is 5.3 which means that we have an average of 5.3 difference in our predicted values. Lower the RMSE the better. \nSame goes for MAPE, lower the MAPE better the model is. ","49cf3ff5":"*yhat_upper and yhat_lower are the uncertainity levels.\n*","b559ae85":"## Predictions using Prophet and SIR ","b6b5f462":"> *Date and Time are being considered as objects. Converting dates to format that is understandable by python is paramount as we are working on a time series and have to gauge the trend that is being followed in case of infected, susceptible and removed population with time.*\n\n"}}