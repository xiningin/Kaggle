{"cell_type":{"f6987b4a":"code","581b6964":"code","557e7eca":"code","d55d7712":"code","33a13b17":"code","ddfc58cf":"code","d9ce417b":"code","857aea13":"code","505b0660":"code","4e45ab26":"code","e8dfc711":"code","a50e7267":"code","e5ccb991":"code","66d19224":"code","371a42cc":"code","45113958":"code","c85f2e6d":"code","e17cb970":"code","1b55e1a4":"code","b5c92649":"code","86c0c5ff":"code","32cdac33":"code","dfabed7c":"code","9623c975":"code","9883290a":"code","2b16607f":"code","d5c78015":"code","92b71a56":"code","72d3c040":"code","411e2f3a":"code","268ba17b":"markdown","572a7973":"markdown","bd13f14c":"markdown","a3e78994":"markdown","4a2fccff":"markdown","97147a96":"markdown","ebb73440":"markdown"},"source":{"f6987b4a":"pip install tensorflow_addons","581b6964":"import numpy as np\nimport pandas as pd\nimport os\nimport glob\nimport matplotlib\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nIMG_SIZE = 224\nBATCH_SIZE = 32\nNO_EPOCHS = 50\nNUM_CLASSES = 2\nDATA_FOLDER = \"..\/input\/ocular-disease-recognition-odir5k\/ODIR-5K\/ODIR-5K\/Training Images\"\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report\nfrom tqdm import tqdm\nimport cv2 as cv\nfrom random import shuffle \nfrom IPython.display import SVG\nfrom keras.utils.vis_utils import model_to_dot\nfrom keras.utils import plot_model\nfrom tensorflow.keras.applications import ResNet50\nfrom tensorflow.python.keras.models import Sequential\nfrom tensorflow.python.keras.layers import Dense, Flatten, GlobalAveragePooling2D\nimport tensorflow_addons as tfa\nimport tensorflow as tf\n%matplotlib inline ","557e7eca":"data_df = pd.read_excel(open(\"..\/input\/ocular-disease-recognition-odir5k\/ODIR-5K\/ODIR-5K\/data.xlsx\", 'rb'), sheet_name='Sheet1')  ","d55d7712":"data_df.columns = [\"id\", 'age', \"sex\", \"left_fundus\", \"right_fundus\", \"left_diagnosys\", \"right_diagnosys\", \"normal\",\n                  \"diabetes\", \"glaucoma\", \"cataract\", \"amd\", \"hypertension\", \"myopia\", \"other\"]","33a13b17":"print(data_df.loc[(data_df.cataract==1)].shape)\nprint(data_df.loc[data_df.cataract==0].shape)","ddfc58cf":"data_df.loc[(data_df.cataract==1)]['left_diagnosys'].value_counts()","d9ce417b":"data_df.loc[(data_df.cataract==1)]['right_diagnosys'].value_counts()","857aea13":"def has_cataract_mentioned(text):\n    if 'cataract' in text:\n        return 1\n    else:\n        return 0","505b0660":"data_df['le_cataract'] = data_df['left_diagnosys'].apply(lambda x: has_cataract_mentioned(x))\ndata_df['re_cataract'] = data_df['right_diagnosys'].apply(lambda x: has_cataract_mentioned(x))","4e45ab26":"cataract_le_list = data_df.loc[(data_df.cataract==1) & (data_df.le_cataract==1)]['left_fundus'].values\ncataract_re_list = data_df.loc[(data_df.cataract==1) & (data_df.re_cataract==1)]['right_fundus'].values\nprint(len(cataract_le_list), len(cataract_re_list))\nnon_cataract_le_list = data_df.loc[(data_df.cataract==0) & (data_df.left_diagnosys==\"normal fundus\")]['left_fundus'].sample(150, random_state=314).values\nnon_cataract_re_list = data_df.loc[(data_df.cataract==0) & (data_df.right_diagnosys==\"normal fundus\")]['right_fundus'].sample(150, random_state=314).values\nprint(len(non_cataract_le_list), len(non_cataract_re_list))","e8dfc711":"cataract_list = np.concatenate((cataract_le_list, cataract_re_list), axis = 0)\nnon_cataract_list = np.concatenate((non_cataract_le_list, non_cataract_re_list), axis = 0)\nprint(len(non_cataract_list), len(cataract_list))","a50e7267":"print(len(os.listdir(DATA_FOLDER)))","e5ccb991":"def label_image(label):\n    if label == 1:\n        return [1,0]\n    elif label == 0: \n        return [0,1]\n\ndef process_data(data_image_list, DATA_FOLDER, is_cataract):\n    data_df = []\n    for img in tqdm(data_image_list):\n        path = os.path.join(DATA_FOLDER,img)\n        label = label_image(is_cataract)\n        img = cv.imread(path,cv.IMREAD_COLOR)\n        img = cv.resize(img, (IMG_SIZE,IMG_SIZE))\n        data_df.append([np.array(img),np.array(label)])\n    shuffle(data_df)\n    return data_df","66d19224":"cat_df = process_data(cataract_list, DATA_FOLDER, 1)","371a42cc":"cat_no_df = process_data(non_cataract_list, DATA_FOLDER, 0)","45113958":"def show_images(data, isTest=False):\n    f, ax = plt.subplots(5,5, figsize=(15,15))\n    for i,data in enumerate(data[:25]):\n        img_num = data[1]\n        img_data = data[0]\n        label = np.argmax(img_num)\n        if label  == 0: \n            str_label='Cataract'\n        elif label == 1: \n            str_label='No Cataract'\n        if(isTest):\n            str_label=\"None\"\n        ax[i\/\/5, i%5].imshow(img_data)\n        ax[i\/\/5, i%5].axis('off')\n        ax[i\/\/5, i%5].set_title(\"Label: {}\".format(str_label))\n    plt.show()\n\nshow_images(cat_df)","c85f2e6d":"show_images(cat_no_df)","e17cb970":"train = cat_df + cat_no_df\nshuffle(train)\nshow_images(train)","1b55e1a4":"X = np.array([i[0] for i in train]).reshape(-1,IMG_SIZE,IMG_SIZE,3)\ny = np.array([i[1] for i in train])","b5c92649":"model = Sequential()\nmodel.add(ResNet50(include_top=False, pooling='max', weights='imagenet'))\nmodel.add(Dense(NUM_CLASSES, activation='softmax'))\n# ResNet-50 model is already trained, should not be trained\nmodel.layers[0].trainable = True","86c0c5ff":"opt = tfa.optimizers.LazyAdam()\nloss = tf.keras.losses.CategoricalCrossentropy(label_smoothing=0.025)\nmodel.compile(optimizer='sgd', loss=loss, metrics=['accuracy'])","32cdac33":"model.summary()","dfabed7c":"plot_model(model, to_file='model.png')\nSVG(model_to_dot(model).create(prog='dot', format='svg'))","9623c975":"X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42,stratify=y)","9883290a":"train_model = model.fit(X_train, y_train,\n                  batch_size=BATCH_SIZE,\n                  epochs=NO_EPOCHS,\n                  verbose=1,\n                  validation_data=(X_val, y_val))","2b16607f":"def plot_accuracy_and_loss(train_model):\n    hist = train_model.history\n    acc = hist['accuracy']\n    val_acc = hist['val_accuracy']\n    loss = hist['loss']\n    val_loss = hist['val_loss']\n    epochs = range(len(acc))\n    f, ax = plt.subplots(1,2, figsize=(14,6))\n    ax[0].plot(epochs, acc, 'g', label='Training accuracy')\n    ax[0].plot(epochs, val_acc, 'r', label='Validation accuracy')\n    ax[0].set_title('Training and validation accuracy')\n    ax[0].legend()\n    ax[1].plot(epochs, loss, 'g', label='Training loss')\n    ax[1].plot(epochs, val_loss, 'r', label='Validation loss')\n    ax[1].set_title('Training and validation loss')\n    ax[1].legend()\n    plt.show()\nplot_accuracy_and_loss(train_model)","d5c78015":"score = model.evaluate(X_val, y_val, verbose=0)\nprint('Validation loss:', score[0])\nprint('Validation accuracy:', score[1])","92b71a56":"#get the predictions for the test data\npredicted_classes = model.predict_classes(X_val)\n#get the indices to be plotted\ny_true = np.argmax(y_val,axis=1)","72d3c040":"correct = np.nonzero(predicted_classes==y_true)[0]\nincorrect = np.nonzero(predicted_classes!=y_true)[0]","411e2f3a":"target_names = [\"Cataract\", \"Normal\"]\nprint(classification_report(y_true, predicted_classes, target_names=target_names))","268ba17b":"# Introduction\n\n\nWe use Ocular Disease Recognition dataset to train a model for Cataract prediction - from eye fundus exam & dyagnosis notes.\n\nIn the dataset, annotations were added by trained human readers with quality control management. They classify patient into eight labels including:\n\n* Normal (N);  \n* Diabetes (D);  \n* Glaucoma (G);  \n* Cataract (C);  \n* AMD (A);  \n* Hypertension (H);  \n* Myopia (M);\n* Other diseases\/abnormalities (O)  \n\nWe will select a subset of images for which we can definitely identify if there is a certain pathology (from the associated flag) and which eye is identified with the issue (from the eye diagnosys notes for each eye).\n\nWe focus on Cataract.\n","572a7973":"## Validation results","bd13f14c":"## Train model","a3e78994":"# Train images\n\nLet's check which images have the `Cataract` flag positive and which images have the eye diagnosys associated clearly stating either `cataract` or `normal`\n","4a2fccff":"# Data preparation\n\n\n## Load packages","97147a96":"# Train model","ebb73440":"\n## Load tabelar data (Excel)"}}