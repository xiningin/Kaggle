{"cell_type":{"9215a080":"code","9b8d6192":"code","09f5acf9":"code","d899c645":"code","db995a53":"code","b143eee9":"code","39e6fa67":"code","a8ce9144":"code","60e47caf":"code","57bf8560":"code","63984417":"code","a129cc97":"code","d1e8e7d4":"code","b7ae1f0b":"code","5a0c88a4":"code","f4f3f939":"code","45581841":"code","821a325f":"code","6a69c903":"code","3224b57e":"code","8b21b840":"code","f9e2b876":"code","2abd09a0":"code","5628799a":"code","219852f7":"code","d4dec54d":"code","0ffdfb03":"code","81a7ae64":"code","7ba7e84e":"code","14a00ba5":"code","b5765d70":"code","0c9c09ff":"code","24856340":"code","6b4dc72f":"code","f853a570":"code","c23d25e6":"code","02ede78d":"code","ea9ffaa0":"code","e7a362a8":"code","44a43505":"code","6b748d33":"code","c0d41be6":"code","778b9d97":"code","e0eb4e23":"code","b8d9b102":"code","36ddb5fb":"code","7ef01ef3":"code","0443139b":"code","93bc2ee1":"code","250f3251":"code","55774603":"code","6e1ede41":"code","c2933605":"markdown","5ec899b7":"markdown","a5f58785":"markdown","f1d8dc80":"markdown","4639e29f":"markdown","a18f7a4f":"markdown","2a37a489":"markdown"},"source":{"9215a080":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings(\"ignore\")","9b8d6192":"df = pd.read_csv(\"..\/input\/creditcardfraud\/creditcard.csv\")","09f5acf9":"df.shape","d899c645":"df.head()","db995a53":"df.info()","b143eee9":"df.dtypes.sort_values().to_frame('feature_type').groupby(by = 'feature_type').size().to_frame('count').reset_index()","39e6fa67":"df_dtypes = pd.merge(df.isnull().sum(axis = 0).sort_values().to_frame('missing_value').reset_index(),\n         df.dtypes.to_frame('feature_type').reset_index(),\n         on = 'index',\n         how = 'inner')","a8ce9144":"df_dtypes.sort_values(['missing_value', 'feature_type'])","60e47caf":"df.describe().round()","57bf8560":"def find_constant_features(dataFrame):\n    const_features = []\n    for column in list(dataFrame.columns):\n        if dataFrame[column].unique().size < 2:\n            const_features.append(column)\n    return const_features","63984417":"const_features = find_constant_features(df)","a129cc97":"const_features","d1e8e7d4":"df.drop_duplicates(inplace= True)","b7ae1f0b":"df.shape","5a0c88a4":"def duplicate_columns(frame):\n    groups = frame.columns.to_series().groupby(frame.dtypes).groups\n    dups = []\n\n    for t, v in groups.items():\n\n        cs = frame[v].columns\n        vs = frame[v]\n        lcs = len(cs)\n\n        for i in range(lcs):\n            ia = vs.iloc[:,i].values\n            for j in range(i+1, lcs):\n                ja = vs.iloc[:,j].values\n                if np.array_equal(ia, ja):\n                    dups.append(cs[i])\n                    break\n    return dups","f4f3f939":"duplicate_cols = duplicate_columns(df)","45581841":"duplicate_cols\ndf.shape\n","821a325f":"df.columns","6a69c903":"sns.countplot('Class', data=df)\nplt.title('Class Distributions \\n (0: No Fraud || 1: Fraud)', fontsize=11)","3224b57e":"\nsns.catplot(x=\"Class\",y=\"Amount\",kind=\"bar\",data=df);","8b21b840":"amount = df['Amount'].values\ntime= df['Time'].values","f9e2b876":"sns.distplot(amount,bins=20,color='r')","2abd09a0":"sns.distplot(time,bins=50,color='r')","5628799a":"df.describe().T","219852f7":"from sklearn.utils import shuffle, class_weight\nfrom sklearn import preprocessing\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, classification_report, confusion_matrix\nimport cufflinks as cf\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected=True)\ncf.go_offline()\n","d4dec54d":"\ncorr = df.corr(method = 'spearman')\n","0ffdfb03":"layout = cf.Layout(height=600,width=600)\ncorr.abs().iplot(kind = 'heatmap', layout=layout.to_plotly_json(), colorscale = 'RdBu')","81a7ae64":"new_corr = corr.abs()\nnew_corr.loc[:,:] = np.tril(new_corr, k=-1) # below main lower triangle of an array\nnew_corr = new_corr.stack().to_frame('correlation').reset_index().sort_values(by='correlation', ascending=False)","7ba7e84e":"new_corr[new_corr.correlation > 0.3]","14a00ba5":"corr_with_target = df.corrwith(df.Class).sort_values(ascending = False).abs().to_frame('correlation_with_target').reset_index().head(20)\nunique_values = df.nunique().to_frame('unique_values').reset_index()\ncorr_with_unique = pd.merge(corr_with_target, unique_values, on = 'index', how = 'inner')","b5765d70":"corr_with_unique","0c9c09ff":"df_major=df[df.Class==0]","24856340":"df_minor=df[df.Class==1]","6b4dc72f":"df_major.shape","f853a570":"from sklearn.utils import resample","c23d25e6":"df_minor_upsmapled = resample(df_minor, replace = True, n_samples = 283253, random_state = 2018)","02ede78d":"df_minor_upsmapled.shape","ea9ffaa0":"final_data=pd.concat([df_minor_upsmapled,df_major])\n","e7a362a8":"final_data.shape","44a43505":"X = final_data.drop('Class', axis = 1)\nY = final_data.Class","6b748d33":"xtrain, xtest, ytrain, ytest = train_test_split(X, Y, test_size=0.25, random_state=0)","c0d41be6":"mms = StandardScaler()\nmms.fit(xtrain)\nxtrain_scaled = mms.transform(xtrain)\nxtest_scaled = mms.transform(xtest)","778b9d97":"def evaluate_model(ytest, ypred, ypred_proba = None):\n    if ypred_proba is not None:\n        print('ROC-AUC score of the model: {}'.format(roc_auc_score(ytest, ypred_proba[:, 1])))\n    print('Accuracy of the model: {}\\n'.format(accuracy_score(ytest, ypred)))\n    print('Classification report: \\n{}\\n'.format(classification_report(ytest, ypred)))\n    print('Confusion matrix: \\n{}\\n'.format(confusion_matrix(ytest, ypred)))","e0eb4e23":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier","b8d9b102":"logisticRegr = LogisticRegression()","36ddb5fb":"logisticRegr.fit(xtrain_scaled, ytrain)","7ef01ef3":"lr_pred = logisticRegr.predict(xtest_scaled)","0443139b":"evaluate_model(ytest, lr_pred)","93bc2ee1":"def random_forest(xtrain, xtest, ytrain):\n    rf_params = {\n        'n_estimators': 126, \n        'max_depth': 14\n    }\n\n    rf = RandomForestClassifier(**rf_params)\n    rf.fit(xtrain, ytrain)\n    rfpred = rf.predict(xtest)\n    rfpred_proba = rf.predict_proba(xtest)\n    \n    return rfpred, rfpred_proba, rf","250f3251":"rfpred, rfpred_proba, rf = random_forest(xtrain_scaled, xtest_scaled, ytrain)","55774603":"from sklearn.metrics import recall_score, roc_auc_score, f1_score\nfrom sklearn.metrics import accuracy_score, roc_auc_score,                             classification_report, confusion_matrix","6e1ede41":"evaluate_model(ytest, rfpred, rfpred_proba)","c2933605":"****************Find highly correlated features************","5ec899b7":"**Data Gathering and Data Preprocessing ****","a5f58785":"************Data Splitation and Standerdization************","f1d8dc80":"************Correlation and Correlation with Target Variable********","4639e29f":"**********Random Forest**************","a18f7a4f":"*********Remove duplicate columns*********","2a37a489":"**Remove Duplicate Rows**"}}