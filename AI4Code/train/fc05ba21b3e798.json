{"cell_type":{"0a8457da":"code","a23a557c":"code","9dc53b62":"code","9d44d628":"code","7f512ef6":"code","78bc2c14":"code","fcd13462":"code","3c9fd959":"code","35f26d71":"code","f2fcc878":"code","706cdc02":"code","34f65400":"code","eb48eeb6":"code","443c56b2":"code","2289e7f7":"code","47223b5b":"code","103bebec":"code","d71119df":"code","19620946":"code","35bda0bc":"code","0c4cb9ca":"code","edc6ac64":"code","bbf6af43":"code","312e3c45":"code","94150e59":"code","2270d6ec":"code","15acdf73":"code","8b9af0c8":"code","73a1fd08":"code","2e98b249":"code","43d77b2b":"code","f59126e7":"code","4ff6eb8b":"code","258c3194":"code","d6bb2561":"code","211a2a76":"code","ab949497":"code","2272df33":"markdown","418a89d2":"markdown","c2e0c683":"markdown","7a2c3c88":"markdown","4fe33652":"markdown","6006cb9d":"markdown","efe331fa":"markdown","991b1a32":"markdown","8dfc4445":"markdown","cb63ce9f":"markdown","6d8f58a4":"markdown","37912091":"markdown","562d9425":"markdown","9ad59c03":"markdown","695017e1":"markdown","dfe8cbe8":"markdown","f53bbd51":"markdown","97f31230":"markdown","f3121a56":"markdown","84c4786a":"markdown","344d4477":"markdown","3efa017b":"markdown","57c48332":"markdown","49b98c19":"markdown","8e097453":"markdown","cdf2768f":"markdown","5a10f8db":"markdown","da8654af":"markdown","498eefb4":"markdown","672a6f77":"markdown","5b0e138b":"markdown","1aa8441b":"markdown","752442cd":"markdown","88981bc1":"markdown"},"source":{"0a8457da":"# import libraries\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np","a23a557c":"# put train data aet into a dataframe\npass_train=pd.read_csv('..\/input\/titanic\/train.csv')\npass_test=pd.read_csv('..\/input\/titanic\/test.csv')","9dc53b62":"pass_train.info()","9d44d628":"# function for grouped bar chart\ndef grouped_bar_chart(labels,set1,set2):\n    x = np.arange(len(labels))  # the label locations\n    width = 0.35  # the width of the bars\n\n    fig, ax = plt.subplots()\n    rects1 = ax.bar(x - width\/2, set1, width, label='Dead') # rectangles for the dead\n    rects2 = ax.bar(x + width\/2, set2, width, label='Survived') # rectangles for the survived\n\n    ax.set_ylabel('Number of people')\n    ax.set_xticks(x)\n    ax.set_xticklabels(labels)\n    ax.legend()\n    fig.tight_layout()\n    plt.show()","7f512ef6":"# grouping data by surviving and the class\ngr=pass_train[['Survived','Pclass','PassengerId']].groupby(['Survived','Pclass']).count()\ngr=gr.reset_index()\ngrouped_bar_chart(['1st class', '2nd class', '3rd class'],\n                  gr[gr['Survived']==0]['PassengerId'],\n                  gr[gr['Survived']==1]['PassengerId'])","78bc2c14":"# grouping data by surviving and the sex\ngr=pass_train[['Survived','Sex','PassengerId']].groupby(['Survived','Sex']).count()\ngr=gr.reset_index()\ngrouped_bar_chart(gr[gr['Survived']==0]['Sex'],\n                  gr[gr['Survived']==0]['PassengerId'],\n                  gr[gr['Survived']==1]['PassengerId'])","fcd13462":"# grouping data by surviving and the number of siblings and spouses\ngr=pass_train[['Survived','SibSp','PassengerId']].groupby(['Survived','SibSp']).count()\ngr","3c9fd959":"gr=gr.reset_index()\n# The number of groups is different for survived=0 and survived=0. Therefore I add missing rows to create a plot.\nfor i in range(0,2):\n    for j in range(1,9):\n        if len(gr[(gr['Survived']==i)&(gr['SibSp']==j)])==0:\n            gr=gr.append({'Survived':i,'SibSp':j,'PassengerId':0},ignore_index=True)\ngr=gr.sort_values(by=['Survived','SibSp'])\ngrouped_bar_chart(gr[gr['Survived']==0]['SibSp'],\n                  gr[gr['Survived']==0]['PassengerId'],\n                  gr[gr['Survived']==1]['PassengerId'])","35f26d71":"gr=pass_train[['Survived','Parch','PassengerId']].groupby(['Survived','Parch']).count()\ngr","f2fcc878":"gr=gr.reset_index()\n# The number of groups is different for survived=0 and survived=0. Therefore I add missing rows to create a plot.\ngr=gr.append({'Survived':1,'Parch':4,'PassengerId':0},ignore_index=True)\ngr=gr.append({'Survived':1,'Parch':6,'PassengerId':0},ignore_index=True)\ngr=gr.sort_values(by=['Survived','Parch'])\ngrouped_bar_chart(gr[gr['Survived']==0]['Parch'],\n                  gr[gr['Survived']==0]['PassengerId'],\n                  gr[gr['Survived']==1]['PassengerId'])","706cdc02":"gr=pass_train[['Survived','Embarked','PassengerId']].groupby(['Survived','Embarked']).count()\ngr=gr.reset_index()\ngrouped_bar_chart(['Cherbourg','Queenstown','Southampton'],\n                  gr[gr['Survived']==0]['PassengerId'],\n                  gr[gr['Survived']==1]['PassengerId'])","34f65400":"pass_train['Title']=pass_train['Name'].str.extract(r',\\s?(.+?)\\.\\s')\npass_test['Title']=pass_test['Name'].str.extract(r',\\s?(.+?)\\.\\s')","eb48eeb6":"gr=pass_train[['Survived','Title','PassengerId']].groupby(['Survived','Title']).count()\ngr=gr.reset_index()\n# I only show groups with more than 3 people\ngr=gr[gr['PassengerId']>=3]\ngr=gr.append({'Survived':1,'Title':'Rev','PassengerId':0},ignore_index=True)\ngrouped_bar_chart(gr[gr['Survived']==0]['Title'],\n                  gr[gr['Survived']==0]['PassengerId'],\n                  gr[gr['Survived']==1]['PassengerId'])","443c56b2":"pass_train[['Fare','Survived']].groupby(['Survived']).median()","2289e7f7":"pass_train[['Fare','Survived']].groupby(['Survived']).mean()","47223b5b":"pass_train['Deck']=pass_train['Cabin'].str.slice(0,1)\npass_test['Deck']=pass_test['Cabin'].str.slice(0,1)\npd.concat([pass_train,pass_test])[['Deck','Pclass','PassengerId']].groupby(['Pclass','Deck']).count()","103bebec":"Y_train=pass_train[['Survived']].copy()\nparams=['Pclass','Sex','Age','SibSp','Parch','Fare','Embarked','Title','Deck']\nX_train=pass_train[params].copy()\nX_test=pass_test[params].copy()\n\n# concat X_train and X_test to preprocess them together\nX_train['Set']='train'\nX_test['Set']='test'\nX_full=pd.concat([X_train,X_test])\nX_full.info()","d71119df":"pd.isna(X_full).sum()","19620946":"X_full['Deck'].replace(np.nan,'Z',inplace=True)","35bda0bc":"X_full['Age'].replace(np.nan,X_full['Age'].median(),inplace=True)\nX_full['Fare'].replace(np.nan,X_full['Fare'].median(),inplace=True)","0c4cb9ca":"X_full['Embarked'].replace(np.nan,X_full['Embarked'].value_counts().idxmax(),inplace=True)","edc6ac64":"# Check values of 'Sex' in both sets\nX_full[['Set','Sex','Pclass']].groupby(['Set','Sex']).count()","bbf6af43":"# Check values of 'Embarked' in both sets\nX_full[['Set','Embarked','Pclass']].groupby(['Set','Embarked']).count()","312e3c45":"# Check values of 'Title' in both sets\nX_full[['Set','Title','Pclass']].groupby(['Set','Title']).count().sort_values(by=['Set','Title'])","94150e59":"X_full['Title'].replace(['Capt','Don','Dona','Jonkheer','Lady','Major','Mlle','Mme','Sir','the Countess'],\n                        ['Mr','Mr','Mrs','Mr','Mrs','Mr','Miss','Mrs','Mr','Mrs'],inplace=True)","2270d6ec":"# Check values of 'Deck' in both sets\nX_full[['Set','Deck','Pclass']].groupby(['Set','Deck']).count().sort_values(by=['Set','Deck'])","15acdf73":"X_full['Deck'].replace('T','Z',inplace=True)","8b9af0c8":"X_full['Deck'].replace(['A','B','C','D','E','F','G','Z'],[1,2,3,4,5,6,7,0],inplace=True)\nX_full['Sex'].replace(['male','female'],[1,0],inplace=True)\ncat_params=['Embarked','Title']\nX_full=pd.get_dummies(data=X_full,columns=cat_params,drop_first=True)","73a1fd08":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\n\nfrom sklearn.model_selection import cross_validate\nfrom sklearn.preprocessing import StandardScaler\n\n# array of methods\nmodels=[LogisticRegression(),\n        RandomForestClassifier(),\n        SVC(),\n        DecisionTreeClassifier(),\n        KNeighborsClassifier()]\n\nX_train=X_full[X_full['Set']=='train'].copy()\nX_test=X_full[X_full['Set']=='test'].copy()\nX_train.drop(columns=['Set'],inplace=True)\nX_test.drop(columns=['Set'],inplace=True)\n\n# scaling\nscale=StandardScaler().fit(X_train)\nX_train_sc=scale.transform(X_train)\nX_test_sc=scale.transform(X_test)\n\nfor model in models:\n    # fit the model with cross validation\n    results=cross_validate(model,X_train_sc,Y_train.values.ravel(),cv=10)\n    # accuracy\n    r2=results['test_score'].mean()\n    # print the result\n    m=str(model)\n    print('r2 for',m[:m.index('(')],'=',r2)\n","2e98b249":"# Logistic Regression\nfrom sklearn.model_selection import GridSearchCV\n\nparam_lr={'penalty':['l1','l2'],\n         'C' : [0.01,0.1,1,10,50,100,200,300],\n         'solver':['liblinear', 'saga']}\n\ngs_lr = GridSearchCV(LogisticRegression(),param_grid = param_lr, scoring=\"accuracy\",n_jobs=-1)\ngs_lr.fit(X_train_sc,Y_train.values.ravel())\nbest_lr=gs_lr.best_estimator_\nprint(best_lr)\nprint('score=',gs_lr.best_score_)","43d77b2b":"# Random Forest\nparam_rf={'max_features': [1, 2, 3, 5, 10],\n          'min_samples_split': [2, 3, 5, 7, 10],\n          'min_samples_leaf': [1, 3, 5, 7, 10],\n          'bootstrap': [False],\n          'n_estimators' :[100,200,300]}\n\ngs_rf = GridSearchCV(RandomForestClassifier(),param_grid = param_rf, scoring=\"accuracy\",n_jobs=-1)\ngs_rf.fit(X_train_sc,Y_train.values.ravel())\nbest_rf=gs_rf.best_estimator_\nprint(best_rf)\nprint('score=',gs_rf.best_score_)","f59126e7":"# Support Vector Machine\nparam_sv={'probability':[True],\n          'gamma': [ 0.001, 0.01, 0.1, 1],\n          'C': [1, 10, 50, 100, 200, 300, 1000]}\n\ngs_sv = GridSearchCV(SVC(),param_grid = param_sv, scoring=\"accuracy\",n_jobs=-1)\ngs_sv.fit(X_train_sc,Y_train.values.ravel())\nbest_sv=gs_sv.best_estimator_\nprint(best_sv)\nprint('score=',gs_sv.best_score_)","4ff6eb8b":"# Decision Tree\nparam_dt={'max_features': [1, 2, 3, 5, 6, 7, 8, 9, 10, 15],\n          'min_samples_split': [2, 3, 4, 5, 6, 7, 10, 15],\n          'min_samples_leaf': [1, 2, 3, 5, 6, 7, 8, 10, 15],\n          'splitter':['best']}\n\ngs_dt = GridSearchCV(DecisionTreeClassifier(),param_grid = param_dt, scoring=\"accuracy\",n_jobs=-1)\ngs_dt.fit(X_train_sc,Y_train.values.ravel())\nbest_dt=gs_dt.best_estimator_\nprint(best_dt)\nprint('score=',gs_dt.best_score_)","258c3194":"# KNN\nparam_kn={'n_neighbors':[1,2,3,5,7,10,14,15]}\n\ngs_kn = GridSearchCV(KNeighborsClassifier(),param_grid = param_kn, scoring=\"accuracy\",n_jobs=-1)\ngs_kn.fit(X_train_sc,Y_train.values.ravel())\nbest_kn=gs_kn.best_estimator_\nprint(best_kn)\nprint('score=',gs_kn.best_score_)","d6bb2561":"from sklearn.ensemble import VotingClassifier\nvote=VotingClassifier(estimators=[('lr',best_lr),\n                                  ('rfc', best_rf),\n                                  ('svc',best_sv),\n                                  ('dtc',best_dt),\n                                  ('knc',best_kn)],\n                      voting='soft', n_jobs=-1)\n\nvote = vote.fit(X_train_sc, Y_train.values.ravel())","211a2a76":"Y_predict=vote.predict(X_test_sc)\npass_test['Survived']=Y_predict","ab949497":"pass_test.set_index('PassengerId',inplace=True)\npass_test[['Survived']].to_csv('result.csv')","2272df33":"<h1>Titanic competition<\/h1>","418a89d2":"One passenger had the deck 'T'. Let's replace this with 'Z'.","c2e0c683":"<div style=\"background:#abd5f5; color:#069; border:1px solid #b3deff; padding: 20px\">\n<h2 id='Data-Analysis'>Data Analysis<\/h2>\n<\/div>","7a2c3c88":"Next, I extract the title from names.","4fe33652":"As we see, married women (Mrs) have more chances for surviving than unmarried (Miss).","6006cb9d":"Parameter \"Cabin\" has a lot of missing values. Other values are connected with the class. The higher class is, the higher deck is.","efe331fa":"The next step is preparing categorical values","991b1a32":"Calculate the mean value.","8dfc4445":"Checking missing values","cb63ce9f":"<div style=\"background:#abd5f5; color:#069; border:1px solid #b3deff; padding: 20px\">\n<h2 id='Modelling'>Modelling<\/h2>\n<\/div>","6d8f58a4":"The next is sex.","37912091":"Replace the place of embarkment with the most frequent value","562d9425":"As we see, if you are rich and travel by 1st class, you have more chances to survive. Unfortunately, if you travel by 3rd class, it decreases your chance of surviving.","9ad59c03":"To have exactly one spouse or sibling is little better for surviving.","695017e1":"<div style=\"background:#abd5f5; color:#069; border:1px solid #b3deff; padding: 20px\">\n<h2 id='Prediction'>Prediction<\/h2>\n<\/div>","dfe8cbe8":"Obviously, be a woman is better than a man if you travel on Titanic.","f53bbd51":"<div style=\"background:#abd5f5; color:#069; border:1px solid #b3deff; padding: 20px\">\n<h2>Table of content<\/h2>\n<ul>    \n<li><a href=\"#Data-Analysis\">Data Analysis<\/a><\/li>\n<li><a href=#Data-Preprocessing>Data Preprocessing<\/a><\/li>\n<li><a href=#Modelling>Modelling<\/a><\/li>\n<li><a href=#Prediction>Prediction<\/a><\/li>\n<\/ul>\n<\/div>","97f31230":"The next parameter is number of siblings and spouses.","f3121a56":"People from Cherbourg have more chances than from Southampton.","84c4786a":"Replace missing age and fare with the mean","344d4477":"The next is embarkment place.","3efa017b":"Let's copy dependent and independent values into Y and X.","57c48332":"<p>I got very good accuracy for each method. Nevertheless, I think actual accuracy will be less. It may be connected with\n2 problems:<\/p>\n<li>Hyperparameters. X_train contains 21 variables. Some may increase the accuracy parameter but have no actually\nconnection with Y. <\/li>\n<li>Overfitting. We have too litle data to create an honest model<\/li>\n<I'll try to solve the problems with grid search optimization and combine all methods using voting classiffier>","49b98c19":"The bigger fare is, the more chances to survive you have. I think the fare was connected with the class.","8e097453":"<div style=\"background:#abd5f5; color:#069; border:1px solid #b3deff; padding: 20px\">\n<h2 id='Data-Preprocessing'>Data Preprocessing<\/h2>\n<\/div>","cdf2768f":"Let's explore the data!\nThe first parameter is Pclass. I'm going to create a bar chart to see how passenger's class relates with surviving.","5a10f8db":"As we see, there are values in the train set that are not in the test and vise versa. Let's replace them with the most popular values","da8654af":"The next parameter is fare. Calculate the median value.","498eefb4":"Mark missing deck with \"Z\"","672a6f77":"Convert categorical values into numerical.","5b0e138b":"Finally, I get a deck from the cabin number. I think the deck is connected with the class.","1aa8441b":"I'll try to build several models using different methods and choose the best one.","752442cd":"The best option is to have exactly one parent or child.","88981bc1":"Let's explore the number of parents or children "}}