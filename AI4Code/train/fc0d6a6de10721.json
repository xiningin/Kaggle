{"cell_type":{"a9d87159":"code","d634d68a":"code","5b0bfc67":"code","bb01f53a":"code","afc79260":"code","e7ee25cb":"code","71acbba1":"code","5d3e870d":"code","f215130d":"code","e3eb53fa":"code","10f271f8":"code","495813c2":"code","ca38d6dd":"code","3da76fef":"code","47c850f9":"code","895c082a":"code","c36e57d5":"code","9acbba88":"code","bb6277a8":"code","2f2192c7":"code","bdb7f801":"code","8d86eb09":"code","c8bbe386":"code","4bcca3b0":"code","7b8b42f8":"code","1bf13ec7":"code","940bdf52":"code","a8da7565":"code","2478cf7a":"code","7ba6c17f":"code","85d21492":"code","7b61e0fc":"code","3f7de833":"code","c83911b0":"code","72a13316":"code","55523f01":"code","523202c4":"code","05ce5efb":"code","e23ccc83":"code","69fc5d95":"code","a5ae7c51":"code","3fdcdceb":"code","44eb4d04":"code","721294da":"code","5b510f6e":"code","051e1aac":"code","c1bbcc9e":"code","68aed75a":"code","96c1f92a":"code","d0470bcb":"code","26f0ac4e":"code","d7c6a9ef":"code","aeb5299b":"code","fdc7bfb2":"code","96abc0a4":"code","8fe7c000":"code","051b519b":"code","2abdb543":"code","0510670f":"code","c08ba806":"code","65814ade":"code","3c1fdd09":"code","61553a07":"code","885b4b8d":"code","acc892ee":"code","3a2700fe":"code","aaf7e053":"code","2773a168":"code","2c20b8ad":"code","683102d3":"code","0aa5ebed":"code","6407aa41":"code","9d45b93f":"code","b53444fd":"code","e8d32935":"code","99722a96":"code","fcc773c1":"code","57601e9f":"code","90754d91":"code","cfd39510":"code","be38d255":"code","50b091d6":"code","ecbfc320":"code","196c11de":"markdown","a3e1a75c":"markdown","7ac6ffa3":"markdown","db0eda8e":"markdown","5f12c99e":"markdown","436a748f":"markdown","c15b6740":"markdown","90f3db3d":"markdown","30e769bd":"markdown","fb2a0be4":"markdown","024eb6e9":"markdown","2f78be32":"markdown","89e43a3f":"markdown","f33d2ed0":"markdown","f823be34":"markdown","27ef2efa":"markdown","0e4ccd6c":"markdown","e557e55d":"markdown","8eaea994":"markdown","3e4e820f":"markdown","a51b70d8":"markdown","27b94589":"markdown","f0565dbf":"markdown","7afe89e8":"markdown","06e949e2":"markdown","5d56cdf2":"markdown","c9a83014":"markdown","d475abb9":"markdown","8e6014e7":"markdown","a61cc1cb":"markdown","ae13aee1":"markdown","a4dfac7f":"markdown","fdb81028":"markdown","7411f24c":"markdown","1a975c71":"markdown","067f8ad1":"markdown","c5db2a4e":"markdown","10856def":"markdown","1bcb9178":"markdown","c87be8d0":"markdown","970a17c9":"markdown","9db3b026":"markdown","5b39ae87":"markdown","c37015cd":"markdown","6c6e8f09":"markdown","212d23d5":"markdown","d0a4805b":"markdown"},"source":{"a9d87159":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nimport pandas as pd\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","d634d68a":"data = pd.read_csv(\"..\/input\/bank-marketing-dataset\/bank.csv\")\nprint(data.shape)\ndata.head()","5b0bfc67":"data_explore = data.copy()","bb01f53a":"data_explore.info()","afc79260":"data_explore.describe()","e7ee25cb":"data_explore['pdays'].value_counts()[-1]","71acbba1":"data_explore = data_explore.drop(columns=['pdays'], axis=1)","5d3e870d":"Q1 = data_explore.quantile(0.25)\nQ3 = data_explore.quantile(0.75)\nIQR = Q3 - Q1\n((data_explore < (Q1 - 1.5 * IQR)) | (data_explore > (Q3 + 1.5 * IQR))).sum()","f215130d":"plt.figure(figsize=(10,5))\nplt.subplot(1, 4, 1)\nsns.boxplot(x='age', data=data_explore, orient='v')\nplt.subplot(1, 4, 2)\nsns.boxplot(x='balance', data=data_explore, orient='v')\nplt.subplot(1, 4, 3)\nsns.boxplot(x='campaign', data=data_explore, orient='v')\nplt.subplot(1, 4, 4)\nsns.boxplot(x='previous', data=data_explore, orient='v')\nplt.tight_layout()","e3eb53fa":"features = list(data_explore.columns)\ncat_attrs = [ col for col in features if data_explore[col].dtype=='O' ]\ncat_attrs","10f271f8":"plt.figure(figsize=(13, 9))\nfor k in range(len(features)):\n    plt.subplot(4, 4, k+1)\n    plt.hist(data_explore[features[k]])\n    plt.title(features[k], fontsize=12)\n    plt.tight_layout()","495813c2":"plt.figure(figsize=(12, 5))\nplt.hist(data_explore['job'])\nplt.title('Jobs', fontsize=14)\nplt.tight_layout()","ca38d6dd":"plt.figure(figsize=(10, 5))\nplt.hist(data_explore['month'])\nplt.title('Months', fontsize=14)\nplt.tight_layout()","3da76fef":"sns.boxplot(x=\"deposit\", y=\"age\", hue=\"deposit\", data=data_explore, palette=\"RdBu\")\nplt.tight_layout()","47c850f9":"plt.figure(figsize=(10, 5))\nax = sns.countplot(x=\"loan\", hue=\"deposit\", data=data_explore)\nfor p in ax.patches:\n        ax.annotate('{}'.format(p.get_height()), (p.get_x()+0.1, p.get_height()+10))\nplt.xlabel(\"Personal Loan?\", fontsize=14)\nplt.show()","895c082a":"plt.figure(figsize=(10, 5))\nax = sns.countplot(x=\"housing\", hue=\"deposit\", data=data_explore)\nfor p in ax.patches:\n        ax.annotate('{}'.format(p.get_height()), (p.get_x()+0.1, p.get_height()+10))\nplt.xlabel(\"Housing Loan?\", fontsize=14)\nplt.show()","c36e57d5":"plt.figure(figsize=(10, 5))\nax = sns.countplot(x=\"default\", hue=\"deposit\", data=data_explore)\nfor p in ax.patches:\n        ax.annotate('{}'.format(p.get_height()), (p.get_x()+0.1, p.get_height()+10))\nplt.xlabel(\"Has Default on Credit?\", fontsize=14)\nplt.show()","9acbba88":"plt.figure(figsize=(10, 5))\nax = sns.countplot(x=\"marital\", hue=\"deposit\", data=data_explore)\nfor p in ax.patches:\n        ax.annotate('{}'.format(p.get_height()), (p.get_x()+0.1, p.get_height()+10))\nplt.xlabel('Marital Status', fontsize=14)\nplt.show()","bb6277a8":"plt.figure(figsize=(10, 5))\nax = sns.countplot(x=\"education\", hue=\"deposit\", data=data_explore)\nfor p in ax.patches:\n        ax.annotate('{}'.format(p.get_height()), (p.get_x()+0.1, p.get_height()+50))\nplt.show()","2f2192c7":"plt.figure(figsize=(15, 6))\nax = sns.countplot(x=\"job\", hue=\"deposit\", data=data_explore)\nfor p in ax.patches:\n        ax.annotate('{}'.format(p.get_height()), (p.get_x()+0.1, p.get_height()+10))\nplt.xlabel('Job Occupation', fontsize=14)\nplt.ylabel(\"Count\", fontsize=14)\nplt.show()","bdb7f801":"plt.figure(figsize=(10, 6))\nplt.subplot(1, 2, 1)\nsns.boxplot(x=\"balance\", data=data_explore, orient='v')\nplt.ylim(-3000, 6000)\nplt.tight_layout()\nplt.subplot(1, 2, 2)\nsns.boxplot(x=\"deposit\", y=\"balance\", data=data_explore)\nplt.ylim(-3000, 6000)\nplt.tight_layout()","8d86eb09":"plt.figure(figsize=(13, 6))\nsns.boxplot(x=\"job\", y=\"balance\", hue=\"deposit\", data=data_explore)\nplt.ylim(-4000, 8000)\nplt.tight_layout()","c8bbe386":"def has_loan(loans):\n    a, b, c = loans\n    if a=='yes' or b=='yes' or c=='yes':\n        return 1\n    else:\n        return 0\n    \ndata_explore['has_loans'] = data_explore[['default', 'housing', 'loan']].apply(has_loan, axis=1)\ndata_explore.head()","4bcca3b0":"plt.figure(figsize=(10, 5))\nax = sns.countplot(x=\"has_loans\", data=data_explore)\nfor p in ax.patches:\n        ax.annotate('{}'.format(p.get_height()), (p.get_x()+0.1, p.get_height()+10))\nplt.xlabel(\"Has Loan?\", fontsize=14)\nplt.show()","7b8b42f8":"plt.figure(figsize=(12, 5))\nax = sns.countplot(x=\"has_loans\", hue=\"deposit\", data=data_explore)\nfor p in ax.patches:\n        ax.annotate('{}'.format(p.get_height()), (p.get_x()+0.1, p.get_height()+10))\nplt.xlabel(\"Has Loan?\", fontsize=14)\nplt.show()","1bf13ec7":"data_explore_has_loan_deposit = data_explore[(data_explore['has_loans']==1) & (data_explore['deposit']=='yes')]\ndata_explore_has_loan_deposit.shape","940bdf52":"plt.figure(figsize=(15, 15))\nplt.subplot(3, 1, 1)\nplt.title(\"Peoples Who Have Loan\", fontsize=16)\nax = sns.countplot(x='education', hue='deposit', data=data_explore[data_explore['has_loans']==1])\nfor p in ax.patches:\n        ax.annotate('{}'.format(p.get_height()), (p.get_x()+0.1, p.get_height()+10))\n\nplt.subplot(3, 1, 2)\nax = sns.countplot(x='job', hue='deposit', data=data_explore[data_explore['has_loans']==1])\nfor p in ax.patches:\n        ax.annotate('{}'.format(p.get_height()), (p.get_x()+0.1, p.get_height()+10))\n        \nplt.subplot(3, 1, 3)\nax = sns.boxplot(x='job', y='balance', hue='deposit', data=data_explore[data_explore['has_loans']==1], orient='v' )\nfor p in ax.patches:\n        ax.annotate('{}'.format(p.get_height()), (p.get_x()+0.1, p.get_height()+10))\nplt.ylim(-2500, 7000)\nplt.show()","a8da7565":"plt.figure(figsize=(15, 15))\nplt.subplot(3, 1, 1)\nplt.title(\"Peoples Who Don't Have Loan\", fontsize=16)\nax = sns.countplot(x='education', hue='deposit', data=data_explore[data_explore['has_loans']==0])\nfor p in ax.patches:\n        ax.annotate('{}'.format(p.get_height()), (p.get_x()+0.1, p.get_height()+10))\n\nplt.subplot(3, 1, 2)\nax = sns.countplot(x='job', hue='deposit', data=data_explore[data_explore['has_loans']==0])\nfor p in ax.patches:\n        ax.annotate('{}'.format(p.get_height()), (p.get_x()+0.1, p.get_height()+10))\n        \nplt.subplot(3, 1, 3)\nax = sns.boxplot(x='job', y='balance', hue='deposit', data=data_explore[data_explore['has_loans']==0], orient='v' )\nfor p in ax.patches:\n        ax.annotate('{}'.format(p.get_height()), (p.get_x()+0.1, p.get_height()+10))\nplt.ylim(-2500, 7000)\nplt.show()","2478cf7a":"plt.figure(figsize=(10, 5))\nax = sns.countplot(x=\"contact\", hue=\"deposit\", data=data_explore)\nfor p in ax.patches:\n        ax.annotate('{}'.format(p.get_height()), (p.get_x()+0.1, p.get_height()+10))\nplt.ylabel(\"Count\", fontsize=14)\nplt.xlabel(\"Communication Type\", fontsize=14)\nplt.show()","7ba6c17f":"print(\"Average contact duration with perosn who has subscribed: \", data_explore[data_explore['deposit']=='yes']['duration'].mean()\/60)\nprint(\"Average contact duration with perosn who hasn't subscribed: \", data_explore[data_explore['deposit']=='no']['duration'].mean()\/60)","85d21492":"plt.figure(figsize=(10, 6))\nplt.subplot(1, 2, 1)\nsns.boxplot(x=\"duration\", data=data_explore, palette=\"RdBu\", orient='v')\nplt.ylim(top=1600)\nplt.tight_layout()\nplt.subplot(1, 2, 2)\nsns.boxplot(x=\"deposit\", y=\"duration\", data=data_explore, palette=\"RdBu\")\nplt.ylim(top=1600)\nplt.tight_layout()","7b61e0fc":"plt.figure(figsize=(12, 10))\nplt.subplot(2, 1, 1)\nsns.countplot(x='campaign', hue='deposit', data=data_explore)\nplt.xlim(right=10)\nplt.xlabel('')\nplt.subplot(2, 1, 2)\nsns.countplot(x='campaign', hue='deposit', data=data_explore)\nplt.xlim(left=11)\nplt.ylim(top=30)\nplt.xlabel('# of Campaign', fontsize=14)\nplt.show()","3f7de833":"plt.figure(figsize=(10, 5))\nax = sns.countplot(x=\"poutcome\", hue=\"deposit\", data=data_explore)\nfor p in ax.patches:\n        ax.annotate('{}'.format(p.get_height()), (p.get_x()+0.1, p.get_height()+10))\nplt.show()","c83911b0":"plt.figure(figsize=(15, 6))\nax1 = plt.subplot(1, 3, 1)\nsns.scatterplot(x='age', y='campaign', hue='poutcome', data=data_explore[(data_explore['deposit']=='no') & (data_explore['poutcome']!='unknown')],)\nplt.title(\"Unsubscribed\", fontsize=14)\nplt.subplot(1, 3, 2, sharey=ax1)\nsns.scatterplot(x='age', y='campaign', hue='poutcome', data=data_explore[(data_explore['deposit']=='yes') & (data_explore['poutcome']!='unknown')], )\nplt.title(\"Subscribed\", fontsize=14)","72a13316":"plt.figure(figsize=(12, 5))\nax = sns.countplot(x=\"month\", hue=\"deposit\", data=data_explore)\nfor p in ax.patches:\n        ax.annotate('{}'.format(p.get_height()), (p.get_x()+0.1, p.get_height()+10))\nplt.show()","55523f01":"from sklearn.preprocessing import LabelEncoder\n\nlabel_enc = LabelEncoder()\nfor cat in cat_attrs:\n    data_explore[cat] = label_enc.fit_transform(data_explore[cat])\n\ndata_explore.head()","523202c4":"corr_matrix = data_explore.corr()\n\nplt.figure(figsize=(17, 12))\nsns.heatmap(corr_matrix, mask=np.zeros_like(corr_matrix, dtype=np.bool), square=True, annot=True, cbar=False)","05ce5efb":"X = data.drop(columns=['deposit'], axis=1)\ny = data['deposit'].copy()\ny = y.apply(lambda x: 0 if x=='no' else 1)","e23ccc83":"list(X.columns)","69fc5d95":"feature_columns = list(X.columns)\ncat_attrs = [ col for col in feature_columns if X[col].dtype=='O' ]\nnum_attrs = [ col for col in feature_columns if not col in cat_attrs ]\nnum_attrs.remove('pdays')\ncat_attrs, num_attrs","a5ae7c51":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\nX_train.shape, X_test.shape, y_train.shape, y_test.shape","3fdcdceb":"from sklearn.base import BaseEstimator, TransformerMixin\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline","44eb4d04":"class AddCustomAttribute(BaseEstimator, TransformerMixin):\n    def __init__(self):\n        pass\n    \n    def fit(self, X, y=None):\n        return self\n    \n    def transform(self, X):\n        default_idx, housing_idx, loan_idx = cat_attrs.index('default'), cat_attrs.index('housing'), cat_attrs.index('loan')\n        has_loan_attr = (X[:, default_idx]=='yes') | (X[:, housing_idx]=='yes') | (X[:, loan_idx]=='yes')\n        X = np.delete(X, (default_idx, housing_idx, loan_idx), axis=1)\n        return np.c_[X, has_loan_attr]","721294da":"cat_pipeline = Pipeline([('cat_imputer', SimpleImputer(strategy='most_frequent')),\n                        ('add_attrs', AddCustomAttribute()),\n                        ('encoder', OneHotEncoder(handle_unknown='ignore'))])\n\npre_process = ColumnTransformer([('drop_attrs', 'drop', ['pdays']),\n                                 ('cat_process', cat_pipeline, cat_attrs),\n                                 ('num_process', SimpleImputer(strategy='mean'), num_attrs)], remainder='passthrough')","5b510f6e":"X_train_transformed = pre_process.fit_transform(X_train)\nX_test_transformed = pre_process.transform(X_test)","051e1aac":"X_train_transformed.shape, X_test_transformed.shape","c1bbcc9e":"cat_attrs.remove('loan')\ncat_attrs.remove('housing')\ncat_attrs.remove('default')\ncat_attrs.append('has_loan')\n\nall_cat_attrs = list(pre_process.transformers_[1][1]['encoder'].get_feature_names(cat_attrs))","68aed75a":"feature_columns = all_cat_attrs + num_attrs\nlen(feature_columns), feature_columns","96c1f92a":"from sklearn.model_selection import GridSearchCV, KFold","d0470bcb":"kf = KFold(n_splits=5, shuffle=True, random_state=42)\n\ndef grid_search(model, grid_param):\n    print(\"Obtaining Best Model for {}\".format(model.__class__.__name__))\n    grid_search = GridSearchCV(model, grid_param, cv=kf, scoring='roc_auc', return_train_score=True, n_jobs=-1)\n    grid_search.fit(X_train_transformed, y_train)\n    \n    print(\"Best Parameters: \", grid_search.best_params_)\n    print(\"Best Scores: \", grid_search.best_score_)\n    \n    cvres = grid_search.cv_results_\n    print(\"\\nResults for each run of {}...\".format(model.__class__.__name__))\n    for train_mean_score, test_mean_score, params in zip(cvres[\"mean_train_score\"], cvres[\"mean_test_score\"], cvres[\"params\"]):\n        print(train_mean_score, test_mean_score, params)\n        \n    return grid_search.best_estimator_","26f0ac4e":"from sklearn.metrics import roc_auc_score, roc_curve\nfrom sklearn.model_selection import cross_val_score\n\nresults = dict()\n\nnp.set_printoptions(precision=4)\n\ndef plot_roc_curve(model, X=X_test_transformed, y_true=y_test):\n    y_scores = model.predict(X)\n    auc_score = np.round(roc_auc_score(y_true, y_scores), 4)\n    fpr, tpr, thresholds = roc_curve(y_true, y_scores)\n    plt.plot(fpr, tpr, linewidth=2, label=model.__class__.__name__+\"(AUC Score: \"+str(auc_score)+\")\")\n    plt.plot([0, 1], [0, 1], 'k--') # Dashed diagonal\n    plt.axis([0, 1, 0, 1])\n    plt.xlabel(\"FPR\", fontsize=16)\n    plt.ylabel(\"TPR\", fontsize=16)\n    plt.legend()\n    \n\n    \ndef performance_measures(model, store_results=True):\n    \n    test_acc = cross_val_score(model, X_test_transformed, y_test, cv=kf, n_jobs=-1, scoring='accuracy')\n    test_acc = np.around(test_acc, decimals=4)\n    mean_test_acc = np.around(np.mean(test_acc), decimals=4)\n    sd_test_acc = np.around(np.std(test_acc), decimals=4)\n    print(\"CV Test Accuracy Scores: \", test_acc)\n    print(\"Mean Accuracy: {} (S.D = {})\".format(mean_test_acc, sd_test_acc))\n    \n    test_f1 = cross_val_score(model, X_test_transformed, y_test, cv=kf, n_jobs=-1, scoring='f1')\n    test_f1 = np.around(test_f1, decimals=4)\n    mean_test_f1 = np.around(np.mean(test_f1), decimals=4)\n    sd_test_f1 = np.around(np.std(test_f1), decimals=4)\n    print(\"\\nCV Test F1 Scores: \", test_f1)\n    print(\"Mean F1: {} (S.D = {})\".format(mean_test_f1, sd_test_f1))\n     \n    if store_results:\n        results[model.__class__.__name__] = (mean_test_acc*100, sd_test_acc*100,  mean_test_f1*100, sd_test_f1*100)","d7c6a9ef":"from sklearn.linear_model import LogisticRegression","aeb5299b":"logistic_clf = LogisticRegression(solver='liblinear', random_state=42, n_jobs=-1)\nlogistic_param_grid = [{'C':[0.01, 0.1, 1, 10], 'penalty':['l1', 'l2']}]","fdc7bfb2":"logistic_clf = grid_search(logistic_clf, logistic_param_grid)","96abc0a4":"feature_importance = []\nfor feature_imp in zip(feature_columns, logistic_clf.coef_[0]):\n    feature_importance.append(feature_imp)\n    \nfeature_importance.sort(key=lambda a:a[1], reverse=True)\nfeature_importance[:10]","8fe7c000":"from sklearn.ensemble import RandomForestClassifier","051b519b":"forest_clf = RandomForestClassifier(n_estimators=250, random_state=42, n_jobs=-1)\nforest_param_grid = [{'max_depth':[8, 12, 16, 20], 'max_features':[None, 'sqrt', 'auto']}]","2abdb543":"forest_clf = grid_search(forest_clf, forest_param_grid)","0510670f":"forest_clf.max_depth=8\nforest_clf.max_features='auto'\nforest_clf.fit(X_train_transformed, y_train)","c08ba806":"feature_importance = []\nfor feature_imp in zip(feature_columns, forest_clf.feature_importances_):\n    feature_importance.append(feature_imp)\n    \nfeature_importance.sort(key=lambda a:a[1], reverse=True)\nfeature_importance[:10]","65814ade":"from sklearn.ensemble import GradientBoostingClassifier","3c1fdd09":"gb_clf = GradientBoostingClassifier(n_estimators=250, loss='deviance', random_state=42)\ngb_param_grid = [{'max_depth':[3, 8, 16], 'max_features':[None, 'sqrt', 'auto']}]","61553a07":"gb_clf = grid_search(gb_clf, gb_param_grid)\ngb_clf","885b4b8d":"gb_clf.max_depth=3\ngb_clf.max_features='auto'\ngb_clf.fit(X_train_transformed, y_train)","acc892ee":"feature_importance = []\nfor feature_imp in zip(feature_columns, gb_clf.feature_importances_):\n    feature_importance.append(feature_imp)\n    \nfeature_importance.sort(key=lambda a:a[1], reverse=True)\nfeature_importance[:10]","3a2700fe":"from xgboost import XGBClassifier","aaf7e053":"xgb_clf = XGBClassifier(n_estimators=250, random_state=42, n_jobs=-1)\nxgb_param_grid = [{'max_depth':[4, 8, 16], 'learning_rate':[0.01, 0.1, 1]}]","2773a168":"xgb_clf = grid_search(xgb_clf, xgb_param_grid)","2c20b8ad":"feature_importance = []\nfor feature_imp in zip(feature_columns, xgb_clf.feature_importances_):\n    feature_importance.append(feature_imp)\n    \nfeature_importance.sort(key=lambda a:a[1], reverse=True)\nfeature_importance[:10]","683102d3":"print('\\n Logistic Regression : CV Results')\nperformance_measures(logistic_clf)\n\nprint(\"--\"*30)\nprint('\\n Random Forest : CV Results')\nperformance_measures(forest_clf)\n\nprint(\"--\"*30)\nprint('\\n Gradient Boost : CV Results')\nperformance_measures(gb_clf)\n\nprint(\"--\"*30)\nprint('\\n XGBoost : CV Results')\nperformance_measures(xgb_clf)","0aa5ebed":"models =  list(results.keys())\nresult = list(results.values())\ntest_mean_acc=[]\ntest_sd_acc=[]\ntest_mean_f1=[]\ntest_sd_f1=[]\n\nfor res in result:\n    test_mean_acc.append(res[0])\n    test_sd_acc.append(res[1])\n    test_mean_f1.append(res[2])\n    test_sd_f1.append(res[3])","6407aa41":"plt.figure(figsize=(7, 4))\nplot_roc_curve(logistic_clf)\nplot_roc_curve(forest_clf)\nplot_roc_curve(gb_clf)\nplot_roc_curve(xgb_clf)\nplt.title(\"ROC Curve\", fontsize=14)\nplt.show()","9d45b93f":"plt.figure(figsize=(12, 4))\nx_indexes = np.arange(len(models))     \nwidth = 0.15                            \n\nplt.bar(x_indexes - width,  test_mean_acc, label=\"Mean Test Accuracy (S.D.)\", width=width)\nfor i in range(len(x_indexes)):\n    label=str(test_mean_acc[i])[:6]+\" ({:.3f})\".format(test_sd_acc[i])\n    plt.text(x=x_indexes[i]-width, y=test_mean_acc[i]+0.3, s=label, fontsize=12)\n\nplt.bar(x_indexes,  test_mean_f1, label=\"Mean F1 Score (S.D.)\", width=width)\nfor i in range(len(x_indexes)):\n    label=str(test_mean_f1[i])[:6]+\"({:.3f})\".format(test_sd_f1[i])\n    plt.text(x=x_indexes[i], y=test_mean_f1[i]+0.1, s=label, fontsize=12)\n    \nplt.ylim(75, 85)\nplt.ylabel(\"%\", fontsize=14)\nplt.legend(loc=\"upper left\", fontsize=12)\nplt.xticks(ticks=x_indexes, labels=models, fontsize=12)\nplt.show()","b53444fd":"feature_importance = []\nfor feature_imp in zip(feature_columns, xgb_clf.feature_importances_):\n    feature_importance.append(feature_imp)\n    \nfeature_importance.sort(key=lambda a:a[1], reverse=True)\nfeature_importance[:10]","e8d32935":"y_train_pred = xgb_clf.predict(X_train_transformed)\ny_test_pred = xgb_clf.predict(X_test_transformed)\ny_pred = np.concatenate([y_train_pred, y_test_pred], axis=0)\n\ny_true = np.concatenate([y_train, y_test], axis=0)\ny_pred.shape, y_true.shape","99722a96":"combine_data = pd.concat([X_train, X_test], axis=0)\ncombine_data.shape","fcc773c1":"combine_data['deposit'] = y_true\ncombine_data['predictions'] = y_pred\ncombine_data['has_loan'] = combine_data[['default', 'housing', 'loan']].apply(has_loan, axis=1)","57601e9f":"combine_data.head()","90754d91":"plt.figure(figsize=(15, 4))\nplt.subplot(1, 2, 1)\nax = sns.countplot(x='deposit', data=combine_data)\nfor p in ax.patches:\n        ax.annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.1, p.get_height()+50))\nplt.title(\"Observed Subscibers\")\nplt.subplot(1, 2, 2)\nax = sns.countplot(x='predictions', data=combine_data)\nfor p in ax.patches:\n        ax.annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.1, p.get_height()+50))\nplt.title(\"Predicted Subscibers\")\nplt.show()","cfd39510":"plt.figure(figsize=(15, 4))\nplt.subplot(1, 2, 1)\nax = sns.countplot(x='has_loan', hue='deposit', data=combine_data)\nfor p in ax.patches:\n        ax.annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.1, p.get_height()+50))\nplt.title(\"Observed Subscibers\", fontsize=14)\n\nplt.subplot(1, 2, 2)\nax = sns.countplot(x='has_loan', hue='predictions', data=combine_data)\nfor p in ax.patches:\n        ax.annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.1, p.get_height()+50))\nplt.title(\"Predicted Subscibers\", fontsize=14)\nplt.show()","be38d255":"plt.figure(figsize=(14, 10))\nplt.subplot(2, 1, 1)\nax = sns.countplot(x='job', hue='deposit', data=combine_data)\nfor p in ax.patches:\n        ax.annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.1, p.get_height()+10))\nplt.title(\"Observed Subscibers\", fontsize=14)\nplt.subplot(2, 1, 2)\nax = sns.countplot(x='job', hue='predictions', data=combine_data)\nfor p in ax.patches:\n        ax.annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.1, p.get_height()+10))\nplt.title(\"Predicted Subscibers\", fontsize=14)\nplt.show()","50b091d6":"plt.figure(figsize=(12, 5))\nplt.subplot(1, 2, 1)\nax = sns.countplot(x='education', hue='deposit', data=combine_data)\nfor p in ax.patches:\n        ax.annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.1, p.get_height()+10))\nplt.title(\"Observed Subscibers\", fontsize=14)\nplt.subplot(1, 2, 2)\nax = sns.countplot(x='education', hue='predictions', data=combine_data)\nfor p in ax.patches:\n        ax.annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.1, p.get_height()+10))\nplt.title(\"Predicted Subscibers\", fontsize=14)\nplt.show()","ecbfc320":"plt.figure(figsize=(12, 5))\nplt.subplot(1, 2, 1)\nax = sns.countplot(x='contact', hue='deposit', data=combine_data)\nplt.title(\"Observed Subscibers\", fontsize=14)\nfor p in ax.patches:\n        ax.annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.1, p.get_height()+10))\nplt.subplot(1, 2, 2)\nax = sns.countplot(x='contact', hue='predictions', data=combine_data)\nfor p in ax.patches:\n        ax.annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.1, p.get_height()+10))\nplt.title(\"Predicted Subscibers\", fontsize=14)\nplt.show()","196c11de":"- Who also saw there are people who are loan-free but didn't subscribe to the deposit.","a3e1a75c":"- Campaign attribute indicates number of contacts made with customer during this campaign.\n- We can see that, as the number of contacts are increasing, lesser the customers are subscribing to the deposit.","7ac6ffa3":"- Though the peoples with secodary education are the most subscribers to term deposit among all types of educated peoples, it is highly educated peoples who have net positive response to term deposit than others.","db0eda8e":"- Now, there is considerable misclassification between peoples having either secondary or tertiary education.","5f12c99e":"- From above chart, it seems that the campaign is successfull in during February to April and in September and October.\n- Majority of campaign is done between May to August which didn't result in success.\n- Very little activity is done in months of December and January.","436a748f":"## Step 3: Data Preprocessing","c15b6740":"# Bank Marketing Campaign","90f3db3d":"- Up to this point it is was evident that duration, campaign, education, job, balance, loan, month of contact are some crucial parameters to needs to be taken in account for having successful campaign.    ","30e769bd":"- I will add new attribute 'has_loan' and will remove 'loan', 'housing' & 'default' attributes.\n- The data is clean but I still add cleaning steps in preprocessing pipeline.\n- For numeric columns, null value will be replace by mean and for categorical columns null value is replace by most frequent value.","fb2a0be4":"### Statistical Overview","024eb6e9":"- The given dataset is fairly balanced in terms of deposit.\n- Majority of customers lie within the age category of 25 to 45.\n- Campaign is mostly activated in months from May to August.\n- Peoples having job occuption as admin, service, management and bluecollar are mostly contacted for term deposit.\n- Many peoples are having negative bank balance.","2f78be32":"- Be it any education level or job category, approximately only 35-40% of peoples(who is carrying loan) are subscibed to the term deposit.\n- There is also not so much difference in the median balance of peoples who subscribed to term deposit and the one who doesn't.\n- Though this is not completely true in all job categories but the overall picture gives the impression that the one who have loan and also subscribed to term deposit, may be because of good financial condition.\n\n- It would have been very benificial to have information about amount of loan that is remain to payoff. This would have given a more clear picture about who are those people having loan can be a potential subscriber. In my opinion, if the person is near to repay his loan, there is some possibility that the person might be willing to look for some kind of safe investment.","89e43a3f":"- If look at some job categories such as management, technician, blue collar, admin etc. we see that the people who didn't subscribe to deposit despite having no loans are the ones with less median balance.\n\n\n- Up to this point we can say following are important attributes of term deposit subscribers:\n    1. Loan-free or having loan with sufficiently good balance\n    2. Good education background.\n    3. Having sufficiently good balance and with job category either of following: admin., management, technicianm retired, student","f33d2ed0":"## Step 6: Introspection of Model Performance","f823be34":"- Again, there is not so much difference in predicted and observed values accorss all job categories. ","27ef2efa":"## Step 2: Data Exploration","0e4ccd6c":"- There not so much difference in observed and predicted values for peoples who are carrying some kind of loan.\n- For peoples who are loan-free, there is slightly more difference in observed and predicted values.","e557e55d":"- As depth is increasing, model is starting to overfit. At depth=8 model is not overfitting and has better ROC AUC score.","8eaea994":"- Above chart clearly shows the importance of outcome of previous contact. Right side chart contains more green points indicating that the previous contact made with customers who has subscribed to deposit, was a mostly a success. \n- On left side, represents the customers who hasn't subscribed to the deposit, the previous contact made with the resulted in failure.\n- We already seen that there many retired people who subscribed to the term deposit. If look at to the right side age 60, there are many peoples who subscribed to term deposit. ","3e4e820f":"- There is negative balance values and pdays. As of now we don't know what those negative values represent.\n- Minmum age of target customer is 18 indicates that this campaign is focused towards adults. This makes sense because there is noway children going to afford term deposits.","a51b70d8":"- It is obvious that duration attribute is highly correlated with target variable. More the concat with customer, higher the chances of him\/her getting subscribe to the term deposit.\n- Other than duration, there is no attribute which has strong correlation with target variable.\n- Newly created attribute has_loan is slightly more correlated with target variable than housing, loan, & default.\n- Variables such as previous, campaign and poutcome are few other attributes which shows slightly better correlation with target variable.\n- There are some independent attributes which are strongly correlated with each other ex. poutcome & previous.","27b94589":"- Lets introspect more about peoples who have some kind of loan and the peoples who are loan free.","f0565dbf":"## Step 5: Model Evaluation","7afe89e8":"- There are some peoples who do have loan and also subscribed to term deposit. Lets explore more about those peoples.","06e949e2":"### Logistic Regression","5d56cdf2":"- Focusing on success and failure, It is evident that if previous contact results in success there are very high chances that in next contact customer will subscribe to term deposit.\n- Another interesting result is that even if the result of previous contact is failure, there is still chance of customer might subscribe to the term deposit.","c9a83014":"- For all most all job categories, the median deposit balance of people who subscribed to term deposit is higher than those who hasn't subscribed.","d475abb9":"### XGBoost Classifier","8e6014e7":"- Observations:\n    - All models give good accuracy as well as f1-score in test dataset.\n    - ROC Curve for ensembel models is very close to each other.\n    - Among all models, XGBoost has slightly better AUC Score.\n\n\n- There is not so much difference between performance of Gradient boost and XGBoost classifier. I will stick with ROC AUC Score and will select XGBoost as final model.","a61cc1cb":"- We can see that those who have some kind of load or debt to pay they generally do not subscribe to the term deposit.","ae13aee1":"## Step 4: Modelling","a4dfac7f":"- Objective: Predict whether client will subscribe to term deposit or not.\n- Supervise, Classification Problem.\n\n\n- Description: \n    - Marketing campaigns for any product from any domain are mainly focused into advertising the product in a such way that it will highlights customer needs, problem and capture their attention. There are various factors involve in marketing campagin and approach to those factors decides whether campaign will be successfull or not.\n    - Few important factors involve in campaign are:\n        1. Characterisitics of targeted customer base: Characterisitics includes place, age category, overall behavior towards new things coming in market, overall financial condition etc.\n        2. Medium of marketing campaign: This involves various channels such as TV advertisement, Pamplets, socail marketing etc.\n        3. Price: The cost of product or service the customer.\n        4. Promotional strategy: This involves the timing of campaign, who will involve in the campaign, management of finance for compaign.\n  \n  \n  \n- What is term deposit?\n    - It is investment where you deposit money in the bank for some period on which bank offers some fixed rate. At end of period you get your deposited money plus the amount equivalent to fixed rate % of deposited money.\n  \n  \n- The data is related with direct marketing campaigns (phone calls) of a Portuguese banking institution. The dataset involves 17 attributes. Following is the description about each attribute.\n- Columns giving information about client:\n    - Age\n    - Job : type of job (admin, bluecollar, entrepreneur, housemaid, management, retired, selfemployed, services, student, technician, unemployed, unknown)\n    - Marital : marital status       (divorced, married, single, unknown)\n    - Education : eduction level     (primary, secondary, tertiary and unknown)\n    - Default: has credit in default?   (no, yes, unknown)\n    - Housing: has housing loan?   (no, yes, unknown)\n    - Loan: has personal loan?\n    - Balance: Balance of the individual\n\n\n- Related with the last contact of the current campaign:\n    - Contact: contact communication type   (cellular, telephone)\n    - Month: last contact month of year \n    - Day: last contact day of the month\n    - Duration: last contact duration, in seconds\n\n\n- Related with contact of previous campaign:\n    - Campaign: number of contacts performed during this campaign and for this client\n    - Pdays: number of days that passed by after the client was last contacted from a previous campaign\n        - Note: 999 means client was not previously contacted.\n    - Previous: number of contacts performed before this campaign and for this client\n    - Poutcome: outcome of the previous marketing campaign (failure, nonexistent, success)\n\n\n- Output variable:\n    - deposit: has the client subscribed a term deposit? (yes, no)","fdb81028":"- No column contains null values.","7411f24c":"### Analysis of Deposit w.r.t. Client Information","1a975c71":"- Approach:\n    - I will be implementing following algorithms:\n        1. Logistic Regression\n        2. Random Forest\n        3. Gradient Boosting\n        4. XGBoost\n    - Using GridSeachCV, best model for each algorithm will be obtained. Since dataset is fairly balance hence I will select best model by observing ROC curve and accuracy.\n    - I will use following metrics to evaluate performance of each model:\n        1. Accuracy score\n        2. Precision and Recall score\n        3. ROC Curve\n    ","067f8ad1":"- We don't know what -1 pdays represent and it is occupying more than 70% of data. I will drop this column as there no information about what -1 refers to is given. Also days will not be negative values.","c5db2a4e":"### Gradient Boost Classifier","10856def":"### Random Forest","1bcb9178":"### Analysis of Deposit w.r.t. Previous Campaign Results","c87be8d0":"Now lets analyse the predictions made by model on overall dataset. This will help us to understand where the model is not performing well. \n\n- Lets find out which are the most important features according to the selected model.","970a17c9":"### Histograms","9db3b026":"### Analysis of Deposit w.r.t. Communication Type","5b39ae87":"### Final Thoughts:\n- Following are some important parameters on which more emphasis should be given in order to improve success rate of campaign:\n    1. <b>Duration of contact:<\/b> Focus should be on increasing the contact with target person. More engaging the communication, more are the chances of person becoming the potential customer.\n    2. <b>Month:<\/b> According to analysis, most subscribers are the ones who are contacted in months of February to May and Septemeber and October. So cutting down the activities in other months and focusing more in these periods will be benificial.\n    3. <b>Loan & Balance:<\/b> We saw that there are many loan-free peoples who subscribed to the term deposit. Also there are some peoples who do have loan but still subscribed to the deposit and there are loan-free ones who didn't subscribed to the deposit. The main reason for this is the balance. The ones with sufficiently good balance are tend to subscribe to the term deposit.\n    4. <b>Contacts:<\/b> In analysis we saw that the number of contacts made with most of the subscribers is less than 4. So, contacting person for more than 3-4 time should be avoided.\n    5. <b>Jobs:<\/b> Targetting either students, retired peoples or peoples from management background will bring more success. Also the data showed that there very less positive response from people having job occupations such as blue-collar, entrepreneue, services, house-maid etc. The contact to such peoples should be avoided or atleast there other factors such as balance, loan and education should be taken in consideration before approaching them. Overall, This factor shoulb be exercise with balance and education. \n    6. <b>Eduaction:<\/b> Not massive but still important factor to consider. In analysis we saw that there many subscribers who have good educational background. I believe that educated person having some kind of knowledge about investment will atleast give some extra time to understand the offer made.","c37015cd":"- Again there is considerable misclassification when the communication type was cellular.","6c6e8f09":"## Step 1: Frame the Problem","212d23d5":"- The most important parameters according XGBoost model are outcome of previous contact, whether person has loan or not, month in which last contact is made.\n- 'unknown' value of contact and poutcome variable is not really going to be helpful for determining steps to improve the success of campaign.","d0a4805b":"- There are almost 10% outliers exist in attributes balance and previous. 5% outliers exist in campaign attribute."}}