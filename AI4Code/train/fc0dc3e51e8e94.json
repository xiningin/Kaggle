{"cell_type":{"04b753ba":"code","79d88188":"code","3fc7d3bc":"code","6cc993c2":"code","98ed3c24":"code","d7d3aad3":"code","08c9668f":"code","a5a84ac7":"code","b345764f":"code","1ca00f24":"code","4098fc8f":"code","d09f5da2":"code","a19ce71e":"code","bcaaf790":"code","70c107cf":"code","fc967629":"code","d37d4af6":"code","29c01cde":"code","0c207cb2":"code","edf572bf":"code","df970524":"code","b2795f13":"code","cbf31d36":"code","541a7a37":"code","9e8326e4":"code","6ca2dce2":"code","6b302d85":"code","79407ac6":"code","2252978e":"code","228078ff":"code","9b750c6b":"code","c18be425":"code","e906034f":"code","4ba24875":"code","30569add":"code","6625586b":"code","07e5e9dc":"code","df320486":"code","5b37d444":"code","d9c2a005":"code","598806c3":"code","09e60b9d":"code","9d8f63c7":"code","6f344be4":"markdown","af6686f2":"markdown","a057f284":"markdown"},"source":{"04b753ba":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","79d88188":"#Importing libraries:\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nsns.set_palette(\"GnBu_d\")\nsns.set_style('whitegrid')","3fc7d3bc":"#Read and Import data:\ndata = pd.read_csv('..\/input\/train.csv')","6cc993c2":"#Head 0f Data\ndata.head()","98ed3c24":"#Dealing with null values:\ndata.dropna(subset = ['pickup_longitude', 'pickup_latitude', 'dropoff_latitude', 'dropoff_longitude'], inplace= True)\ndata.fillna(value = 0, inplace= True)\ndata.isnull().sum()","d7d3aad3":"#Descriptive Stats:\ndata.describe()","08c9668f":"data = data[data['dropoff_latitude']!=0]\ndata = data[data['dropoff_longitude']!=0]\n                                                #Removing zeros from latitudes and longitudes\ndata = data[data['pickup_latitude']!=0]\ndata = data[data['pickup_longitude']!=0]","a5a84ac7":"#Calculating the distance from latitudes and longitudes\ndef haversine_distance(lat1, long1, lat2, long2):\n    dat = [data]\n    for i in dat:\n        R = 6371  #radius of earth in kilometers\n        x1 = np.radians(i[lat1])\n        x2 = np.radians(i[lat2])\n        delta_x1 = np.radians(i[lat2]-i[lat1])\n        delta_lambda = np.radians(i[long2]-i[long1])\n #a = sin\u00b2((\u03c6B - \u03c6A)\/2) + cos \u03c6A . cos \u03c6B . sin\u00b2((\u03bbB - \u03bbA)\/2)\n        a = np.sin(delta_x1 \/ 2.0) ** 2 + np.cos(x1) * np.cos(x2) * np.sin(delta_lambda \/ 2.0) ** 2\n #c = 2 * atan2( \u221aa, \u221a(1\u2212a) )\n        c = 2 * np.arctan2(np.sqrt(a), np.sqrt(1-a))\n #d = R*c\n        d = (R * c) #in kilometers\n        i['Distance'] = d\nhaversine_distance('pickup_latitude', 'pickup_longitude', 'dropoff_latitude', 'dropoff_longitude')\n#Checking the head again:\ndata.head()","b345764f":"plt.scatter(x=data['Distance'],y=data['fare_amount'], alpha= .2)\nplt.xlabel(\"Trip Distance\")\nplt.ylabel(\"Fare Amount\")\nplt.title(\"Trip Distance vs Fare Amount\")","1ca00f24":"sns.kdeplot(data['Distance'].values).set_title(\"Distribution of Trip Distance\")","4098fc8f":"data[data['Distance']>100]","d09f5da2":"#Removing outliers: (probably wrong data point....)\ndata = data[data['Distance']<100]\ndata = data[data['mta_tax'] > 0]","a19ce71e":"sns.kdeplot(np.log(data['Distance'].values)).set_title(\"Distribution of Trip Distance (log scale)\")","bcaaf790":"plt.scatter(x=data['Distance'],y=data['fare_amount'], alpha= .2)\nplt.xlabel(\"Trip Distance\")\nplt.ylabel(\"Fare Amount\")\nplt.title(\"Trip Distance vs Fare Amount\")","70c107cf":"#Converting the pickup and dropoff time to datetime object:\ndata['pickup_datetime']=pd.to_datetime(data['pickup_datetime'])\n\ndata['dropoff_datetime']=pd.to_datetime(data['dropoff_datetime'])\n\n#Calculating Trip Duration:\ndata['duration'] = data['dropoff_datetime'] - data['pickup_datetime']\n\n#Getting the seconds from datetime object\ndata['duration'] = data['duration'].dt.total_seconds()\n#Coverting duration into minutes:\ndata['duration'] = data['duration'] \/ 60\ndata.head()\n","fc967629":"data[data['duration']>200]","d37d4af6":"data = data[data['duration']<200]","29c01cde":"#Adding back the target column:\n#data['fare_amount'] = temp\ndata.head()","0c207cb2":"plt.figure(figsize=(8,5))\nsns.kdeplot(np.log(data['fare_amount'].values)).set_title(\"Distribution of fare amount (log scale)\")","edf572bf":"sns.kdeplot(np.log(data['Distance'].values)).set_title(\"Distribution of Trip Distance (log scale)\")","df970524":"plt.scatter(x=data['Distance'],y=data['fare_amount'], alpha= .2)\nplt.xlabel(\"Trip Distance\")\nplt.ylabel(\"Fare Amount\")\nplt.title(\"Trip Distance vs Fare Amount\")","b2795f13":"#print(\"Avg trip distance (in miles) when there are zero passengers\",np.mean(train.loc[train['passenger_count']==0,'Distance'].values))","cbf31d36":"#Dropping unnecessary columns:\ndata.drop(['TID','new_user', 'store_and_fwd_flag', 'payment_type', 'mta_tax'],axis = 1, inplace=True)","541a7a37":"data.head()","9e8326e4":"#Dropping location and time columns:\ndata.drop(['dropoff_longitude', 'dropoff_latitude','pickup_longitude','pickup_latitude','pickup_datetime',\n       'dropoff_datetime'], axis = 1 , inplace= True)","6ca2dce2":"#Heatmap of correlation matrix:\nplt.figure(figsize= (12,7))\nsns.heatmap(data.corr(), annot= True, cmap = 'Reds')","6b302d85":"g = trips_year_fareamount=data.groupby(['passenger_count'])['fare_amount'].mean().reset_index().rename(columns={'fare_amount':'avg_fare_amount'})","79407ac6":"sns.barplot(x = 'passenger_count', y = 'avg_fare_amount',data=g).set_title(\"Avg Fare Amount for passenger count\")","2252978e":"#Creating dummies for categorical columns:\ncat_cols = ['vendor_id']\ndata[cat_cols] = data[cat_cols].apply(lambda x: x.astype('category'))\ndata = pd.get_dummies(data, columns = cat_cols, drop_first= True)","228078ff":"#Writing the cleaned data to a csv file\n\ndata.to_csv('train_cleaned', index = False)","9b750c6b":"from sklearn.model_selection import train_test_split\ny = data['fare_amount']\nX = data.drop(['fare_amount'],axis =1)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state =1) ","c18be425":"from sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\n#Linear Regression Model:\nlm = LinearRegression()\n#Fitting the Model on train:\nlm.fit(X_train, y_train)\n#Predicting the model on train:\ntrainpred = lm.predict(X_train)\n#Predicting the model on validation:\ntestpred = lm.predict(X_test)\nprint('---------MODEL-METRICS-----------')\nprint('MAE-Train:\\t',mean_absolute_error(y_train, trainpred)** .5)\nprint('MAE-Test:\\t',mean_absolute_error(y_test, testpred)** .5)\nprint('RMSE-Train:\\t',mean_squared_error(y_train, trainpred)** .5)\nprint('RMSE-Test:\\t',mean_squared_error(y_test, testpred)** .5)\nprint('R2-Train:\\t',r2_score(y_train, trainpred))\nprint('R2-Test:\\t',r2_score(y_test, testpred))","e906034f":"plt.scatter(y_test,testpred, alpha = .2)\nplt.xlabel('Y Test')\nplt.ylabel('Predicted Y')","4ba24875":"sns.distplot(np.log(y_test - testpred),bins = 20).set_title(\"Distribution of Residuals (log scale)\")","30569add":"from sklearn.linear_model import RidgeCV\n\n#Ridge Regression\nRidge_cv=RidgeCV(alphas=[0.1,1,10,100],cv=10)\nRidge_cv.fit(X_train,y_train)\n\ntrainpred_rcv=Ridge_cv.predict(X_train)\ntestpred_rcv=Ridge_cv.predict(X_test)\n\nprint('---------MODEL-METRICS-----------')\nprint('RMSE-Train:\\t',mean_squared_error(y_train, trainpred_rcv)** .5)\nprint('RMSE-Validation:\\t',mean_squared_error(y_test, testpred_rcv)** .5)\nprint('R2-Train:\\t',r2_score(y_train, trainpred_rcv))\nprint('R2-Validation:\\t',r2_score(y_test, testpred_rcv))","6625586b":"from sklearn.linear_model import LassoCV\n\n#Lasso Regression:\nLasso_cv=LassoCV(cv=10)\nLasso_cv.fit(X_train,y_train)\n\n#Predicting the model:\ntrainpred_lcv=Lasso_cv.predict(X_train)\ntestpred_lcv=Lasso_cv.predict(X_test)\n\nprint('---------MODEL-METRICS-----------')\nprint('RMSE-Train:\\t',mean_squared_error(y_train, trainpred_lcv)** .5)\nprint('RMSE-Test:\\t',mean_squared_error(y_test, testpred_lcv)** .5)\nprint('R2-Train:\\t',r2_score(y_train, trainpred_lcv))\nprint('R2-Test:\\t',r2_score(y_test, testpred_lcv))","07e5e9dc":"from sklearn.linear_model import ElasticNetCV\n\n\nElas_cv=ElasticNetCV(l1_ratio=[0.01,0.03,0.1,0.8,0.9],random_state=1,cv=10)\nElas_cv.fit(X_train,y_train)\n\ntrainpred_ecv=Elas_cv.predict(X_train)\n\ntestpred_ecv=Elas_cv.predict(X_test)\n\nprint('---------MODEL-METRICS-----------')\nprint('RMSE-Train:\\t',mean_squared_error(y_train, trainpred_ecv)** .5)\nprint('RMSE-Validation:\\t',mean_squared_error(y_test, testpred_ecv)** .5)\nprint('R2-Train:\\t',r2_score(y_train, trainpred_ecv))\nprint('R2-Validation:\\t',r2_score(y_test, testpred_ecv))","df320486":"from sklearn.tree import DecisionTreeRegressor\nfrom sklearn.model_selection import GridSearchCV, RandomizedSearchCV\n\n#Decision Tree Regression:\ndtr=DecisionTreeRegressor()\nparams = {\"min_samples_leaf\": [2,5,7,10,12,15],\"max_depth\": [3,5,7,9,11,13,15]}\n#params = {\"n_neighbors\": [1],\"metric\": [\"euclidean\", \"cityblock\"]}\n\ngrid = GridSearchCV(dtr,param_grid=params,scoring=\"neg_mean_squared_error\",cv=10)\ngrid.fit(X_train,y_train)\n\ngrid.best_estimator_\n\n#Decision Tree Regression- Metrics:\ntrainpred_dtr=grid.predict(X_train)\ntestpred_dtr=grid.predict(X_test)\nprint('---------MODEL-METRICS-----------')\nprint('RMSE-Train:\\t',mean_squared_error(y_train, trainpred_dtr)** .5)\nprint('RMSE-Validation:\\t',mean_squared_error(y_test, testpred_dtr)** .5)\nprint('R2-Train:\\t',r2_score(y_train, trainpred_dtr))\nprint('R2-Validation:\\t',r2_score(y_test, testpred_dtr))","5b37d444":"#Learning Curves:\nfrom sklearn.model_selection import learning_curve\n\n\n\ntrain_sizes, train_scores, validation_scores = learning_curve(\nestimator = Lasso_cv,\nX = X,\ny = y, train_sizes = np.array([.1, .2, 0.30, .4, 0.50, 0.60, .7, .8, .9]), cv = 10,\nscoring = 'neg_mean_squared_error')\n\nprint('Training scores:\\n\\n', train_scores)\nprint('\\n', '-' * 70) # separator to make the output easy to read\nprint('\\nValidation scores:\\n\\n', validation_scores)","d9c2a005":"train_scores_mean = -train_scores.mean(axis = 1)\nvalidation_scores_mean = -validation_scores.mean(axis = 1)\nprint('Mean training scores\\n\\n', pd.Series(train_scores_mean))\nprint('\\n', '-' * 20) # separator\nprint('\\nMean validation scores\\n\\n',pd.Series(validation_scores_mean))","598806c3":"import matplotlib.pyplot as plt\n\nplt.style.use('seaborn')\nplt.plot(train_sizes, train_scores_mean, label = 'Training error')\nplt.plot(train_sizes, validation_scores_mean, label = 'Validation error')\nplt.ylabel('MSE', fontsize = 14)\nplt.xlabel('Training set size', fontsize = 14)\nplt.title('Learning curves for a linear regression model', fontsize = 18, y = 1.03)\nplt.legend()\nplt.ylim(2,10)","09e60b9d":"#MEtrics Dataframe\ndata=[['Linear Regression','Train',r2_score(y_train, trainpred),mean_squared_error(y_train, trainpred)**.5],['Linear Regression','Test',r2_score(y_train, trainpred),(mean_squared_error(y_test, testpred))** .5]]\neval_metrics_df=pd.DataFrame(data,columns=['Model','Train_Test','R-Squared','RMSE'])\neval_metrics_df=eval_metrics_df.append(pd.DataFrame([['Elastinet Regression','Train',r2_score(y_train, trainpred_ecv),(mean_squared_error(y_train, trainpred_ecv))** .5],['Elastinet Regression','Test',r2_score(y_train, trainpred_ecv),(mean_squared_error(y_test, testpred_ecv))** .5]],columns=['Model','Train_Test','R-Squared','RMSE']))\neval_metrics_df=eval_metrics_df.append(pd.DataFrame([['Ridge Regression','Train',r2_score(y_train, trainpred_rcv),(mean_squared_error(y_train, trainpred_rcv))** .5],['Ridge Regression','Test',r2_score(y_train, trainpred_rcv),(mean_squared_error(y_test, testpred_rcv))** .5]],columns=['Model','Train_Test','R-Squared','RMSE']))\neval_metrics_df=eval_metrics_df.append(pd.DataFrame([['Lasso Regression','Train',r2_score(y_train, trainpred_lcv),(mean_squared_error(y_train, trainpred_lcv))** .5],['Lasso Regression','Test',r2_score(y_train, trainpred_lcv),(mean_squared_error(y_test, testpred_lcv))** .5]],columns=['Model','Train_Test','R-Squared','RMSE']))\neval_metrics_df=eval_metrics_df.append(pd.DataFrame([['DT Regression','Train',r2_score(y_train, trainpred_dtr),(mean_squared_error(y_train, trainpred_dtr))** .5],['DT Regression','Test',r2_score(y_train, trainpred_dtr),(mean_squared_error(y_test, testpred_dtr))** .5]],columns=['Model','Train_Test','R-Squared','RMSE']))","9d8f63c7":"#Model RMSE comparison plot:\nplt.figure(figsize=(9,5))\nsns.barplot(x='RMSE',y='Train_Test',hue='Model',data=eval_metrics_df)\nplt.xlabel('Train and Test Datsets')\nplt.ylabel('RMSE Values')\nplt.title('Model Comparison')\naxes=plt.gca()\naxes.set_xlim([0,4])","6f344be4":"**train['Hour'] = train['pickup_datetime'].apply(lambda time: time.hour)**\n\n**train['Month'] = train['pickup_datetime'].apply(lambda month : month.month)**\n\n**train['DayOfWeek'] = train['pickup_datetime'].apply(lambda day : day.dayofweek)**\n\n**dmap = {0:'Mon',1:'Tue',2:'Wed',3:'Thu',4:'Fri',5:'Sat',6:'Sun'}**\n\n**train['DayOfWeek'] = train['DayOfWeek'].map(dmap)**","af6686f2":"## Model building","a057f284":"## Data Visualization"}}