{"cell_type":{"d521206a":"code","6a002351":"code","6ca54395":"code","9f933da8":"code","e30211cf":"code","e78b016b":"code","8aefab25":"code","f84bb487":"code","b842065b":"code","877b3579":"code","ec5b52e2":"code","3d6daebf":"code","9048897f":"code","4eed085d":"code","47e8ba51":"code","9ab277bf":"code","8c6e3b7e":"code","90879f1a":"code","1258d6f2":"code","2d13840d":"code","97b78cad":"markdown","1242d655":"markdown","5dd648e0":"markdown","8d35a401":"markdown","f814bd21":"markdown","9b0668d6":"markdown","aadc2293":"markdown","422518c1":"markdown","e6cbfb60":"markdown","3ffaeb5f":"markdown","9742d65e":"markdown"},"source":{"d521206a":"import pandas as pd\nimport numpy as np\nimport io\nimport requests\n\nimport cufflinks as cf\ncf.go_offline()\nimport plotly.graph_objs as go\nimport plotly.offline as py\nimport seaborn as sns\nsns.set()\nfrom plotly.offline import init_notebook_mode, iplot \nimport plotly.express as px\nimport warnings\nwarnings.filterwarnings('ignore')","6a002351":"# india_covid_dataset = pd.read_csv('https:\/\/raw.githubusercontent.com\/dhruvipatel14\/Covid-2019-India-Analysis\/master\/datasets_549966_1189152_complete.csv',parse_dates=['Date'])\nindia_covid_dataset = pd.read_csv('..\/input\/datasets_549966_1189152_complete.csv',parse_dates=['Date'])\ncovid_df = pd.DataFrame(india_covid_dataset)\ncovid_df.head()","6ca54395":"daily_covid = pd.read_csv('..\/input\/datasets_549966_1189152_nation_level_daily.csv')\ndaily_df = pd.DataFrame(daily_covid)\ndaily_df.tail()","9f933da8":"state_level= pd.read_csv('..\/input\/datasets_549966_1189152_state_level_latest.csv')\nstate_df = pd.DataFrame(state_level)\nstate_df.head()","e30211cf":"final_state_df = state_df.drop([0])","e78b016b":"confirm = final_state_df['confirmed'].values.sum()","8aefab25":"print(f'Total number of Confirmed COVID 2019 cases across India:', confirm)\nprint(f'Total number of Active COVID 2019 cases across India:', final_state_df['active'].sum())\nprint(f'Total number of recovered COVID 2019 cases across India:', final_state_df['recovered'].sum())\nprint(f'Total number of Deaths due to COVID 2019  across India:', final_state_df['deaths'].sum())\nprint(f'Total number of States\/UTs affected:', final_state_df['state'].nunique())","f84bb487":"state_active = final_state_df.groupby('state')['active'].sum().sort_values(ascending=False).to_frame()\nstate_active.style.background_gradient(cmap='Reds')","b842065b":"state_active_df = final_state_df.groupby('state')['active'].sum().sort_values(ascending=True).reset_index()","877b3579":"data = px.data.gapminder()\n\nfig = px.bar(state_active_df, x='active', y='state',title='Total Active Cases', \n             text='active', \n             orientation='h', \n             height=1000,\n             color='active',\n             range_x = [0, max(state_active_df['active'])]\n            )                                                \nfig.show()","ec5b52e2":"state_conf_active = final_state_df.groupby('state')['active','confirmed','deaths'].sum().sort_values(ascending=True,by='active').reset_index()\n\n\nfig = go.Figure(data=[\n    go.Bar(name='Confirmed', y=final_state_df['confirmed'], x=final_state_df['state']),\n    go.Bar(name='Active', y=final_state_df['active'], x=final_state_df['state'])\n])\n# Change the bar mode\nfig.update_layout(barmode='group',title = 'Comparision of confimed VS Active cases')\nfig.show()","3d6daebf":"daily_df['date'] = pd.date_range(start= '2020-01-30', end = '2020-05-25', freq='D')","9048897f":"daily_df.head()","4eed085d":"new_daily  = daily_df.copy()\nnew_daily = new_daily.set_index('date')\nnew_daily.head()","47e8ba51":"fig = go.Figure()\nfig.add_trace(go.Scatter(x=new_daily.index, y=new_daily['totalconfirmed'],\n                    mode='lines+markers',name='Total Cases'))\n\nfig.add_trace(go.Scatter(x=new_daily.index, y=new_daily['dailyconfirmed'], \n                mode='lines',name='New Cases'))\nfig.add_trace(go.Scatter(x=new_daily.index, y=new_daily['dailyrecovered'], \n                mode='lines',name='Daily recovered'))\n        \n    \nfig.update_layout(title_text='Trend of Coronavirus Cases on daily basis')\n\nfig.show()","9ab277bf":"from statsmodels.tsa.seasonal import seasonal_decompose\nimport itertools\nimport statsmodels.api as sm\nimport warnings\nfrom statsmodels.graphics.tsaplots import plot_acf,plot_pacf\nimport matplotlib.pyplot as plt","8c6e3b7e":"fig = plt.figure(figsize=(12,8))\nax1 = fig.add_subplot(211)\nfig = sm.graphics.tsa.plot_acf( new_daily['totalconfirmed'].values.squeeze(), lags=20, ax=ax1)\nax2 = fig.add_subplot(212)\nfig = sm.graphics.tsa.plot_pacf(new_daily['totalconfirmed'], lags=20, ax=ax2)","90879f1a":"def gridSearch(itemObj):\n    # Define the p, d and q parameters to take any value between 0 and 3\n    p = d = q = range(1, 5)\n\n    # Generate all different combinations of p, q and q triplets\n    pdq = list(itertools.product(p, d, q))\n\n    # Generate all different combinations of seasonal p, q and q triplets\n    seasonal_pdq = [(x[0], x[1], x[2], 4) for x in list(itertools.product(p, d, q))]\n\n    bestAIC = np.inf\n    bestParam = None\n    bestSParam = None\n    \n    print('Running GridSearch')\n    \n    #use gridsearch to look for optimial arima parameters\n    for param in pdq:\n        for param_seasonal in seasonal_pdq:\n            try:\n                mod = sm.tsa.statespace.SARIMAX(itemObj,\n                                                order=param,\n                                                seasonal_order=param_seasonal,\n                                                enforce_stationarity=False,\n                                                enforce_invertibility=False)\n\n                results = mod.fit()\n\n                #if current run of AIC is better than the best one so far, overwrite it\n                if results.aic<bestAIC:\n                    if results.aic >= 1:\n                        bestAIC = results.aic\n                        bestParam = param\n                        bestSParam = param_seasonal\n\n            except:\n                continue\n                \n    print('the best ones are:',bestAIC,bestParam,bestSParam)\n    return bestAIC,bestParam,bestSParam","1258d6f2":"import warnings\nwarnings.filterwarnings(\"ignore\")\n\n# bestAIC,bestParam,bestSParam = gridSearch(new_daily['totalconfirmed'])\nbestAIC = 94036.38\norder = (2,1,2)\nseasonal_order = (2,1,2,12)\nmod = sm.tsa.statespace.SARIMAX(new_daily['totalconfirmed'],\n                                    order=order,\n                                    seasonal_order=seasonal_order,\n                                    enforce_stationarity=False,\n                                    enforce_invertibility=False)\n\nresults = mod.fit()\nprint(results.summary())","2d13840d":"forecast = results.get_forecast(steps=20)\n\n# Get confidence intervals of forecasts\npred_ci = forecast.conf_int()\n\nforecast_df = pd.DataFrame(forecast.predicted_mean,columns=['Predicted Confirmed cases'])\n\nforecast_plot = pd.concat([new_daily['totalconfirmed'],forecast_df,pred_ci])\n\n\nlayout = go.Layout(title = \"Prediction of covid-2019 for next 20 days\",\n     xaxis=dict(title='Date'),\n     yaxis=dict(title=\"Total confirmed cases\"))\nfig = forecast_plot.iplot(kind = \"scatter\",  layout = layout)","97b78cad":"## Analysis and visualization of active cases in states\/UTs","1242d655":"## Comparison of confimed cases and active cases","5dd648e0":"## Handling Data for timeseries analysis using SARIMAX","8d35a401":"## Prediction for next 20 days.","f814bd21":"## Dataset : Multiple CSVs including data of daily updates and states wise cases\nhttps:\/\/www.kaggle.com\/imdevskp\/covid19-corona-virus-india-dataset?select=nation_level_daily.csv ( Till 26th May 2020)\n\nCredits : \n\nData from India Health Ministry Website: https:\/\/www.mohfw.gov.in\/ \n\nCOVID-19 tracker dashboard https:\/\/www.covid19india.org\/","9b0668d6":"## Total number of Confirmed cases, Active cases, Recovered cases, Deaths in India","aadc2293":"## Calculating Auto correlation and partial auto correlation of total confirmed cases","422518c1":"# prediction results shows that total covid-19 cases can reach upto 3,65,171 by 14th June 2020","e6cbfb60":"# Data analysis, data visualization and prediction of Covid-19 cases in India using SARIMAX \n\n## Analysis and visualization of total confirmed cases, active cases, deaths due to covid-19 in respective States\/UTs\n","3ffaeb5f":"## Train SARIMAX model on \"total confirmed\" cases","9742d65e":"## Trend of total number of cases in India on daily basis from the 30th january "}}