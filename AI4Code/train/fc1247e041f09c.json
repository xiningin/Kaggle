{"cell_type":{"e0e51df9":"code","e2749450":"code","ddbf3e93":"code","dc88dee6":"code","27463cdf":"code","eb5caa05":"code","653b5cf5":"code","a9198c5d":"code","89c31ec9":"code","765ed52f":"code","d8249853":"code","2855b1cc":"code","09683075":"code","b541fa06":"code","917ee428":"code","2dabd011":"code","7bf88ba5":"code","b2b8e0c2":"code","4f5dc794":"code","4a7c59a0":"code","08807bc5":"markdown","8a9e612b":"markdown","ed03287c":"markdown","4d34b320":"markdown","6ce50aa5":"markdown","40f60a64":"markdown","b618f97c":"markdown","17fea03f":"markdown","ce9f8fa3":"markdown","f406f0c3":"markdown","f72b5d87":"markdown","ffa727f2":"markdown","a0d77126":"markdown","17fc3af8":"markdown","f73b4fc1":"markdown","007c6a22":"markdown"},"source":{"e0e51df9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e2749450":"import csv\ncsv_filename = \"\/kaggle\/input\/clash-royale-season-18-dec-0320-dataset\/BattlesStaging_12272020_WL_tagged\/battlesStaging_12272020_WL_tagged.csv\"\nchunk_size = 500000\n\ntext_file_reader = pd.read_csv(csv_filename, engine='python',encoding='utf-8-sig', quoting=csv.QUOTE_MINIMAL, chunksize = chunk_size,index_col=0)","ddbf3e93":"dfList = []\ncounter = 0\n\nfor df in text_file_reader:\n    dfList.append(df)\n    counter= counter +1\n    print(\"Max rows read: \" + str(chunk_size * counter) )\n\ndf = pd.concat(dfList,sort=False)","dc88dee6":"wincon_csv_filename = \"\/kaggle\/input\/clash-royale-season-18-dec-0320-dataset\/Wincons.csv\"\ndf_wincon = pd.read_csv(wincon_csv_filename, engine='python',encoding='utf-8-sig', quoting=csv.QUOTE_MINIMAL, index_col = 0)\nwincon_dict = dict(zip(df_wincon[\"card_id\"],df_wincon[\"card_name\"]))","27463cdf":"def arena_placer(row):\n    arena_name = None\n    \n    if(row['average.startingTrophies'] < 300):\n        arena_name = '01.Goblin Stadium'\n    elif ((row['average.startingTrophies'] >= 300)&(row['average.startingTrophies'] < 600)):\n        arena_name = '02.Bone Pit' \n    elif ((row['average.startingTrophies'] >= 600)&(row['average.startingTrophies'] < 1000)):\n        arena_name = '03.Barbarian Bowl'\n    #1000\n    elif ((row['average.startingTrophies'] >= 1000)&(row['average.startingTrophies'] < 1300)):\n        arena_name = '04.P.E.K.K.A\\'s Playhouse'\n    elif ((row['average.startingTrophies'] >= 1300)&(row['average.startingTrophies'] < 1600)):\n        arena_name = '05.Spell Valley'  \n    elif ((row['average.startingTrophies'] >= 1600)&(row['average.startingTrophies'] < 2000)):\n        arena_name = '06.Builder\\'s Workshop'\n    # 2000\n    elif ((row['average.startingTrophies'] >= 2000)&(row['average.startingTrophies'] < 2300)):\n        arena_name = '07.Royal Arena'\n    elif ((row['average.startingTrophies'] >= 2300)&(row['average.startingTrophies'] < 2600)):\n        arena_name = '08.Frozen Peak'  \n    elif ((row['average.startingTrophies'] >= 2600)&(row['average.startingTrophies'] < 3000)):\n        arena_name = '09.Jungle Arena'\n    # 3000\n    elif ((row['average.startingTrophies'] >= 3000)&(row['average.startingTrophies'] < 3300)):\n        arena_name = '10.Hog Mountain'\n    elif ((row['average.startingTrophies'] >= 3300)&(row['average.startingTrophies'] < 3600)):\n        arena_name = '11.Electro Valley'  \n    elif ((row['average.startingTrophies'] >= 3600)&(row['average.startingTrophies'] < 4000)):\n        arena_name = '12.Spooky Town'\n    # 4000\n    elif ((row['average.startingTrophies'] >= 4000)&(row['average.startingTrophies'] < 4300)):\n        arena_name = '13.Challenger I'\n    elif ((row['average.startingTrophies'] >= 4300)&(row['average.startingTrophies'] < 4600)):\n        arena_name = '14.Challenger II'\n    elif ((row['average.startingTrophies'] >= 4600)&(row['average.startingTrophies'] < 5000)):\n        arena_name = '15.Challenger III'\n    # 5000\n    elif ((row['average.startingTrophies'] >= 5000)&(row['average.startingTrophies'] < 5300)):\n        arena_name = '16.Master I'\n    elif ((row['average.startingTrophies'] >= 5300)&(row['average.startingTrophies'] < 5600)):\n        arena_name = '17.Master II'\n    elif ((row['average.startingTrophies'] >= 5600)&(row['average.startingTrophies'] < 6000)):\n        arena_name = '18.Master III'\n    # 6000\n    elif ((row['average.startingTrophies'] >= 6000)&(row['average.startingTrophies'] < 6300)):\n        arena_name = '19.Champion'\n    elif ((row['average.startingTrophies'] >= 6300)&(row['average.startingTrophies'] < 6600)):\n        arena_name = '20.Grand Champion'\n    elif ((row['average.startingTrophies'] >= 6600)&(row['average.startingTrophies'] < 7000)):\n        arena_name = '21.Royal Champion'         \n    elif(row['average.startingTrophies'] >= 7000):\n        arena_name = '22.Ultimate Champion' \n        \n    return arena_name","eb5caa05":"df['average.startingTrophies'] = df['average.startingTrophies'].fillna(0)\ndf['arena.name'] = None\ndf['arena.name'] = df.apply(arena_placer, axis=1)","653b5cf5":"import json\ndef win_con_populator(row):\n\n    winner_win_con_id = 99999999\n    loser_win_con_id = 99999999\n    \n    \n    for key, value in wincon_dict.items():\n        if((key in json.loads(row['winner.cards.list']))&(winner_win_con_id == 99999999)):\n            winner_win_con_id = key\n    \n        if((key in json.loads(row['loser.cards.list']))&(loser_win_con_id == 99999999)):\n            loser_win_con_id = key\n            \n        if((winner_win_con_id !=99999999)&(loser_win_con_id !=99999999)):\n            break\n        \n    return winner_win_con_id, wincon_dict[winner_win_con_id], loser_win_con_id, wincon_dict[loser_win_con_id]","a9198c5d":"df.sample(n=5)","89c31ec9":"df['winner.wincon.card.id'] = 99999999\ndf['loser.wincon.card.id'] = 99999999\ndf['winner.wincon.card.name'] = None\ndf['loser.wincon.card.name'] = None\ndf['winner.wincon.card.id'],df['winner.wincon.card.name'],df['loser.wincon.card.id'],df['loser.wincon.card.name'] = zip(*df.apply(win_con_populator, axis=1))","765ed52f":"df.reset_index(inplace=True)","d8249853":"df.columns","2855b1cc":"df_arena_win_counts = df.groupby(['arena.name', 'winner.wincon.card.name']).agg({\"index\":[\"count\"]})\ndf_arena_win_counts.columns = df_arena_win_counts.columns.map('_'.join)\ndf_arena_win_counts = df_arena_win_counts.reset_index()\ndf_arena_win_counts.columns = [col.strip() for col in df_arena_win_counts.columns]\ndf_arena_win_counts.sort_values([\"arena.name\",\"index_count\"], ascending=[True, False], inplace=True)\ndf_arena_win_counts['arena.name'] = df_arena_win_counts['arena.name'].str.split('.').str[1]","09683075":"df_arena_win_counts[df_arena_win_counts[\"arena.name\"] == \"Ultimate Champion\"]","b541fa06":"df_arena_win_counts[df_arena_win_counts[\"arena.name\"] == \"Master I\"]","917ee428":"df_arena_win_lose_counts = df.groupby(['arena.name', 'winner.wincon.card.name','loser.wincon.card.name']).agg({\"index\":[\"count\"]})\ndf_arena_win_lose_counts.columns = df_arena_win_lose_counts.columns.map('_'.join)\ndf_arena_win_lose_counts = df_arena_win_lose_counts.reset_index()\ndf_arena_win_lose_counts.columns = [col.strip() for col in df_arena_win_lose_counts.columns] ","2dabd011":"df_arena_win_lose_counts_pivoted =  df_arena_win_lose_counts.pivot_table(columns='loser.wincon.card.name', index=['arena.name', 'winner.wincon.card.name'], aggfunc=sum, fill_value=0)","7bf88ba5":"df_arena_win_lose_counts_pivoted.columns = df_arena_win_lose_counts_pivoted.columns.map('_'.join)\ndf_arena_win_lose_counts_pivoted = df_arena_win_lose_counts_pivoted.reset_index()","b2b8e0c2":"df_arena_win_lose_counts_pivoted['arena.name'] = df_arena_win_lose_counts_pivoted['arena.name'].str.split('.').str[1]","4f5dc794":"df_arena_win_lose_counts_pivoted.columns = [col.replace(\"index_count_\",\"\") for col in df_arena_win_lose_counts_pivoted.columns] ","4a7c59a0":"df_arena_win_lose_counts_pivoted","08807bc5":"### Stitch the indivdual dataframes as one","8a9e612b":"### Let's remove some unwanted strings in the columns","ed03287c":"### Let's populate the win-cons of the decks","4d34b320":"### Let's see what's the most winning win-con in the Master I Arena","6ce50aa5":"### Define the Win Con Populator of the Deck","40f60a64":"### Let's the get winningest\/ most-winning win-con","b618f97c":"### Just a simple eye-check","17fea03f":"### Let's see what's the most winning win-con in the Ultimate Champion Arena","ce9f8fa3":"### Load the win-conditions, this is based here https:\/\/www.deckshop.pro\/card\/flag\/win-condition","f406f0c3":"### Define Arena Placer Code, average starting trophies of 2 players will be used","f72b5d87":"### Let's just remove some unwanted string(s) in the row values of arena.name","ffa727f2":"### Let's pivot the Loser WinCon column, using the Winner Arena and Winner WinCon as index\/ pivoting columns","a0d77126":"### Let's load the data","17fc3af8":"### TODO: graphs","f73b4fc1":"### Some eye-checks","007c6a22":"### What columns do we have?"}}