{"cell_type":{"75bd2434":"code","2d24e3a1":"code","ae891e42":"code","fc4d0246":"code","063ed1db":"code","b7c789dc":"code","0207267e":"code","55f1a9b7":"code","b24965a3":"code","e3496a1b":"code","0c69ecc6":"code","94b06132":"code","17df92c4":"code","c0b36eab":"code","b1cf3473":"code","670e7ec1":"code","930f4cce":"code","f39100c8":"code","efca2673":"code","59c730f1":"code","2de87a72":"code","14599f28":"code","66d3d8a0":"code","793b811c":"code","f93fd341":"code","d8a8730c":"code","3ac358c5":"code","da22a704":"code","aaf3c25e":"code","831deec9":"code","848c2345":"markdown","6e075c02":"markdown","c9b6fef4":"markdown","50e66768":"markdown","40018a00":"markdown","e2b7f336":"markdown","527f3548":"markdown","c035a29b":"markdown","8ed4b2ed":"markdown","84b55608":"markdown","d8638023":"markdown","f4412afc":"markdown","5c349c86":"markdown","fa2e26e0":"markdown","f90ac902":"markdown","2c509b76":"markdown","c3fb885a":"markdown","3f350031":"markdown","125cb9b5":"markdown","48b63178":"markdown","2e8031aa":"markdown","2f180eaa":"markdown","194faef7":"markdown","bb9f9a5e":"markdown","61f3fe88":"markdown","3bdd6d09":"markdown","50307d43":"markdown","573c8a1c":"markdown","397b465b":"markdown","cf0fcf1a":"markdown"},"source":{"75bd2434":"import requests, re, folium\nimport pandas as pd\nfrom bs4 import BeautifulSoup\nfrom ipyleaflet import Map, Marker, MarkerCluster\nfrom folium import plugins, IFrame\nfrom folium.plugins import MarkerCluster, FloatImage","2d24e3a1":"def getlat(links): \n    \n    url = links\n    r = requests.get(url)\n    soup = BeautifulSoup(r.text, \"html.parser\")\n    \n    try:\n\n        lat = soup.find(\"span\", {\"class\" : \"latitude\"}).text    \n        return lat\n        \n    except:\n        \n        return None\n    \ndef getlong(links): \n    \n    url = links\n    r = requests.get(url)\n    soup = BeautifulSoup(r.text, \"html.parser\")\n    \n    try:\n\n        long = soup.find(\"span\", {\"class\" : \"longitude\"}).text\n        return long\n        \n    except:\n        \n        return None","ae891e42":"def dms2dec(s):\n    \n    try:\n    \n        deg, a = re.split(\"\u00b0\", s) \n        try: \n\n            minu, b = re.split(\"\u2032\", a)\n        except:\n            \n            minu, b = 0, None\n        try: \n            \n            sec, direction = re.split(\"\u2033\", b)\n        except:\n            \n            sec, direction = 0, None\n            \n        decimal = float(deg) + float(minu)\/60 + float(sec)\/(3600);\n    \n        if direction in ('S','W'):\n    \n            decimal*= -1\n    \n        return decimal\n    \n    except:\n        \n        return None","fc4d0246":"def getimg(links):\n    \n    r = requests.get(links)\n\n    soup = BeautifulSoup(r.text, \"html.parser\")\n    \n    try:\n\n        newurl = \"https:\/\/en.wikipedia.org\/\" + soup.find(\"a\", {\"class\" : \"image\"})[\"href\"]\n\n        r2 = requests.get(newurl)\n\n        soup2 = BeautifulSoup(r2.text, \"html.parser\")\n\n        image = \"https:\" + soup2.find(\"a\", {\"class\" : \"mw-thumbnail-link\"})[\"href\"]\n\n        return image\n\n    except:\n        \n        return None","063ed1db":"def getdesc(links):\n    \n    r = requests.get(links)\n\n    soup = BeautifulSoup(r.text, \"html.parser\")\n\n    desc = soup.find(\"p\").text\n\n    return desc","b7c789dc":"url0 = \"https:\/\/en.wikipedia.org\/w\/index.php?title=Category:Ancient_Greek_archaeological_sites_in_Turkey&pageuntil=Laertes+%28Cilicia%29#mw-pages\"\n\nr0 = requests.get(url0)\n\nprint(r0.status_code)","0207267e":"soup0 = BeautifulSoup(r0.text, \"html.parser\")\n\nprint(soup0.title.text)","55f1a9b7":"frame =[]","b24965a3":"groups0 = soup0.find_all(\"div\", {\"class\" : \"mw-category-group\"})[-12:]\n\nfor group in groups0:\n    \n    sites = group.find_all(\"li\")\n    \n    for site in sites:\n        \n        links = \"https:\/\/en.wikipedia.org\/\" + site.find(\"a\")[\"href\"]\n        \n        rows = {\"Name\" : site.find(\"a\")[\"title\"],\n                \n        \"Type\" : \"Greek\",\n        \n        \"Link\" : links,\n        \n        \"Latitude\" : getlat(links),\n        \n        \"Longitude\" : getlong(links),\n                \n        \"ImageUrl\" : getimg(links),\n                \n        \"Description\" : getdesc(links)}\n        \n        frame.append(rows)","e3496a1b":"soup1 = BeautifulSoup(requests.get(\"https:\/\/en.wikipedia.org\/w\/index.php?title=Category:Ancient_Greek_archaeological_sites_in_Turkey&pagefrom=Laertes+%28Cilicia%29#mw-pages\").text,\n                      \"html.parser\")\n\ngroups1 = soup1.find_all(\"div\", {\"class\" : \"mw-category-group\"})[-12:]\n\nfor group in groups1:\n    \n    sites = group.find_all(\"li\")\n    \n    for site in sites:\n        \n        links = \"https:\/\/en.wikipedia.org\/\" + site.find(\"a\")[\"href\"]\n        \n        rows = {\"Name\" : site.find(\"a\")[\"title\"],\n                \n        \"Type\" : \"Greek\",\n        \n        \"Link\" : links,\n        \n        \"Latitude\" : getlat(links),\n        \n        \"Longitude\" : getlong(links),\n                \n        \"ImageUrl\" : getimg(links),\n                \n        \"Description\" : getdesc(links)}\n        \n        frame.append(rows)","0c69ecc6":"soup2 = BeautifulSoup(requests.get(\"https:\/\/en.wikipedia.org\/wiki\/Category:Roman_sites_in_Turkey\").text,\n                      \"html.parser\")\n\ngroups2 = soup2.find_all(\"div\", {\"class\" : \"mw-category-group\"})\n\nfor group in groups2:\n    \n    sites = group.find_all(\"li\")\n    \n    for site in sites:\n        \n        links = \"https:\/\/en.wikipedia.org\/\" + site.find(\"a\")[\"href\"]\n        \n        rows = {\"Name\" : site.find(\"a\")[\"title\"],\n                \n        \"Type\" : \"Roman\",\n        \n        \"Link\" : links,\n        \n        \"Latitude\" : getlat(links),\n        \n        \"Longitude\" : getlong(links),\n                \n        \"ImageUrl\" : getimg(links),\n               \n        \"Description\" : getdesc(links)}\n        \n        frame.append(rows)","94b06132":"df = pd.DataFrame(frame)\n\n#df.to_csv(\"AncientSites.csv\")\n\n#df = pd.read_csv(\"AncientSites.csv\", index_col = 0)\n\ndf.head()","17df92c4":"df[\"LatDec\"] = df[\"Latitude\"].apply(dms2dec).astype(float)\n\ndf[\"LongDec\"] = df[\"Longitude\"].apply(dms2dec).astype(float)\n\ndf.head()","c0b36eab":"df.isna().sum()","b1cf3473":"print(((df.isna().sum()[\"Latitude\"]*100)\/len(df)).round(decimals = 2) , \"percent of the dataset is empty for spatial data\")","670e7ec1":"df2 = df.copy()\n\ndf = df[df[\"Latitude\"].notna()]","930f4cce":"df2.shape[0] - df.shape[0]","f39100c8":"df.loc[df[\"Name\"].duplicated(keep = False) == True, \"Type\"] = \"Greek\/Roman\"\ndf.drop_duplicates(inplace = True, ignore_index = True)\n\ndf2.loc[df2[\"Name\"].duplicated(keep = False) == True, \"Type\"] = \"Greek\/Roman\"\ndf2.drop_duplicates(inplace = True, ignore_index = True)","efca2673":"df2[\"Type\"].value_counts()","59c730f1":"df.loc[df[\"Type\"] == \"Roman\", \"IconUrl\"] = \"https:\/\/github.com\/ocaktans\/Mapping-of-the-Ancient-Greek-and-Roman-Sites-in-Turkey\/blob\/main\/images\/roman.png?raw=true\"\ndf.loc[df[\"Type\"] == \"Greek\", \"IconUrl\"] = \"https:\/\/github.com\/ocaktans\/Mapping-of-the-Ancient-Greek-and-Roman-Sites-in-Turkey\/blob\/main\/images\/greek.png?raw=true\"\ndf.loc[df[\"Type\"] == \"Greek\/Roman\", \"IconUrl\"] = \"https:\/\/github.com\/ocaktans\/Mapping-of-the-Ancient-Greek-and-Roman-Sites-in-Turkey\/blob\/main\/images\/combined.png?raw=true\"","2de87a72":"df.loc[df[\"ImageUrl\"] == \"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/e\/e5\/Turkey_adm_location_map.svg\/800px-Turkey_adm_location_map.svg.png\",\n      \n      \"ImageUrl\"] = None ","14599f28":"df.sort_values(by = \"Name\", inplace = True)\ndf.head(5)","66d3d8a0":"df[\"Description\"] = df[\"Description\"].str.replace(r\"(\\s*\\[.*?\\]\\s*)\", \"\", regex = True).str.strip()\ndf[\"Description\"] = df[\"Description\"].str.replace(r\"(\\s*\\(.*?\\)\\s*)\", \"\", regex = True).str.strip()","793b811c":"m = folium.Map(location=[39,35.5], tiles=\"CartoDB Dark_Matter\", control_scale = True, zoom_start=6)","f93fd341":"markercluster = MarkerCluster().add_to(m)\n\ndf.apply(lambda row: folium.Marker(location=[row[\"LatDec\"], row[\"LongDec\"]],\n                                  icon = folium.features.CustomIcon(row[\"IconUrl\"], icon_size=(35, 35)), \n                                  popup = folium.Popup((row[\"Description\"][:200] + \"...\" + '<a href=' + row[\"Link\"] +' target=\"_blank\"> See more<\/a>'), min_width = 250, max_width = 250),\n                                  tooltip = row[\"Name\"]).add_to(markercluster), axis = 1)","d8a8730c":"FloatImage(\"https:\/\/github.com\/ocaktans\/Mapping-of-the-Ancient-Greek-and-Roman-Sites-in-Turkey\/blob\/main\/images\/thelegend.png?raw=true\", bottom=7, left=1).add_to(m)","3ac358c5":"minim = plugins.MiniMap(tile_layer = \"CartoDB Dark_Matter\", toggle_display = True, height = 115) \n\nm.add_child(minim)","da22a704":"m.save(\"themap.html\")","aaf3c25e":"df2.to_csv(\"AncientSitesinTurkey.csv\")","831deec9":"df","848c2345":"The function below converts degree minute second format to decimals. This is a necessary process to be able to work with spatial data. Not every latitude and longitude return with second or minute precision. Therefore, try and except commands are used to work with any value. \n\nLastly, we will not get negative coordinates beacuse of the Turkey's location but it's good to keep the direction in mind and in the code.","6e075c02":"Status of the first link.","c9b6fef4":"Scraping takes a while, so we can export our dataset once we have it and use it as a local file in the future.","50e66768":"### Creating Functions\n\n##### The functions called \"getlat, getlong, getimg, getdesc\" will work on the pages of individual sites. You can examine [this page](https:\/\/en.wikipedia.org\/\/wiki\/Troy) as an example. \n\n##### Wikipedia records these pages \"mostly\" in the same format, so we can work with loops. But this is not always true. Sometimes tags can be different or the data we need is not there at all. This means we will have null values after these.","40018a00":"A minimap is added to the map.","e2b7f336":"Markers are placed. \n\nIcons are custom icons that use the \"icon_url\" in the dataset.\n\n\"popup\" contains the first 200 characters of the \"Description\" column and the Wikipedia link for the site. \"Link\" column is used to create a hyperlink. They are arranged to be opened in new tabs. The width parameters are set for a better appearance for every object. The images of the sites could be added as well via the ImageUrl column yet since they are connected to lots of links, they decrease the performance. Therefore, images are not shown on popups.\n\n\"tooltip\" shows the names of the sites when the cursor is on them.\n\nThe sites mostly overlap. Clusters of markers are used for a better appearance. It is possible to classify these clusters according to the type column. We would only need to create 3 marker clusters and filter the dataset according to the type so that we can add these clusters to the map separately. Yet, the sites are not split according to their types in this map. This is a process that does not have one correct answer. These can be changed.","527f3548":"Checking the none values.","c035a29b":"Some site pages without images return the map of Turkey, which use the same URL in every site. We will drop the rows that contain this specific URL.","8ed4b2ed":"Changing the format of the spatial data.","84b55608":"The function below tries to acquire an image URL from the inserted Wikipedia link. If it can not find an image with these parameters, it returns none.","d8638023":"The function below tries to acquire the first few lines of the description from the inserted Wikipedia link.","f4412afc":"# Data Wrangling","5c349c86":"The functions below try to acquire latitude and longitude from the inserted Wikipedia link. If they can not find location data with these parameters, they return none.","fa2e26e0":"# Introduction\n\n### Acknowledgments\n##### Data is scraped from Wikipedia. Wikipedia has lists of the ancient Greek and Roman sites in Turkey. The link for the Roman page is [here](https:\/\/en.wikipedia.org\/wiki\/Category:Roman_sites_in_Turkey). First page of the Greek sites is [here](https:\/\/en.wikipedia.org\/wiki\/Category:Ancient_Greek_archaeological_sites_in_Turkey).\n\n##### A vector image that was [Designed by Freepik](http:\/\/www.freepik.com) is edited to be used for custom icons. Images were uploaded to [this GitHub repository](https:\/\/github.com\/ocaktans\/Mapping-of-the-Ancient-Greek-and-Roman-Sites-in-Turkey).\n\n### The Goal\n\nThis notebook aims to collect spatial data for the ancient Greek&Roman sites in Turkey and visualize these sites on an interactive map. So that users can observe these sites and get additional info about them on the map via tooltips\/popups. Distribution, quantity and density of these sites can be examined and routes can be set for travel plans etc.\n\n### Products\n\nThe map of the ancient sites were saved as an HTML file. [Here](https:\/\/ocaktans.github.io\/Mapping-of-the-Ancient-Greek-and-Roman-Sites-in-Turkey\/themap.html) is the final version of the map.\n\nA CSV file was also created and uploaded to [this Kaggle dataset](https:\/\/www.kaggle.com\/ocaktan\/map-of-the-ancient-greek-and-roman-sites-in-turkey).","f90ac902":"Number of the sites in each type.","2c509b76":"First, we create an empty list to record our rows. Then, we have to locate the list in the pages. Next step is collecting necessary data.\n\n\"links\" is recording links of the ancient sites with \"href\" tags so that we can work with the URL.\n\n\"rows\" will be the rows of our dataset.\n\n\"Name\" is the first column which is acquired with the \"title\" tags from the html file.\n\n\"Type\" is filled manually since we know the type of the inserted page.\n\n\"Link\" is the same with the \"links\" but we record it as an attribute this time.\n\nLocation data, image URLs and descriptions are being recorded with the previous functions.","c3fb885a":"Necessary data will be taken from Wikipedia. Wikipedia has lists of Roman and Greek sites in Turkey. [Here](https:\/\/en.wikipedia.org\/wiki\/Category:Roman_sites_in_Turkey) is the link for the Roman sites. Greek sites were recorded in 2 pages, which means there are 3 pages of lists to scrape.\n\nOur code will track the URLs of each ancient site in these lists and scrape the necessary data from there one by one.\n\nThis means that we need to create loops and functions to automate this process.","3f350031":"##### Note that none values in the both format of the spatial data can also be used as an indicator to test our format changing function.\nThey have 49 none values, which means that our function worked fine.","125cb9b5":"Custom icon URLs for the sites in the dataset.","48b63178":"# Web Scraping","2e8031aa":"# Table of Contents\n\n1. [Introduction](#Introduction)\n\n    1.1 [Acknowledgments](#Acknowledgments)\n    \n    1.2 [The Goal](#The-Goal)\n    \n    1.3 [Products](#Products)\n\n2. [Web Scraping](#Web-Scraping)\n\n    2.1 [Creating Functions](#Creating-Functions)\n\n    2.2 [BeautifulSoup](#BeautifulSoup)\n\n3. [Data Wrangling](#Data-Wrangling)\n\n4. [Creating the Map](#Creating-the-Map)\n    ","2f180eaa":"Same process with the second page.","194faef7":"# Creating the Map","bb9f9a5e":"There are common sites in the both lists of Wikipedia. We will drop duplicates and change their type to Greek\/Roman.","61f3fe88":"### BeautifulSoup","3bdd6d09":"The map is centered at Turkey.","50307d43":"Description column contains some undesired text such as Greek alphabet and the indexes of the sources in the Wikipedia page. \n\nDescription column is created to give an idea of the site to the users. Therefore, we have to make the most of it.\n\nGreek versions of the names take a lot of place in the small description boxes and look a bit messy. They are stored in parentheses, so we can drop them. \n\nThe indexes are stored in brackets. They are dropped with the same method. \n\nSources, Greek versions of the names and more information will be given to users via inserted Wikipedia hyperlinks.","573c8a1c":"The legend is inserted as an image, since we use custom markers. The image was created before for this map.","397b465b":"We won't be able to work with 49 sites, but we can still store them in a different dataset.","cf0fcf1a":"Same process with the last(Roman) page."}}