{"cell_type":{"69c3b4c2":"code","edc474a8":"code","b80811f9":"code","6545a816":"code","5c45fc42":"code","3a408d6f":"code","2ce5daca":"code","8b21cfac":"code","ebc95dcd":"code","70bd222a":"code","98466264":"code","19d9dead":"code","c6ddfb7b":"code","7d27ec34":"code","37591e24":"code","4e331842":"code","69a50a5e":"code","b89ff571":"code","67feb33e":"code","69946f95":"code","73edde00":"code","b2d77ce8":"code","820cb86e":"code","c8abe32e":"code","d07bc3f8":"code","9708cd8f":"code","8d5ec623":"markdown","f2a5ce5d":"markdown","73339b05":"markdown","6d95696a":"markdown","e355f676":"markdown","b0dc1e1c":"markdown","e07eb92c":"markdown","e85ed92c":"markdown","c98bd4fc":"markdown","d2099e39":"markdown","9364ad43":"markdown","7ec44c3f":"markdown"},"source":{"69c3b4c2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nplt.style.use('seaborn-whitegrid')\n\nimport seaborn as sns\n\nfrom collections import Counter\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","edc474a8":"train_df = pd.read_csv('..\/input\/titanic\/train.csv')\ntest_df = pd.read_csv('..\/input\/titanic\/test.csv')\ntest_PassegerId= test_df['PassengerId']","b80811f9":"train_df.columns","6545a816":"train_df.head()","5c45fc42":"train_df.describe()","3a408d6f":"train_df.info()","2ce5daca":"def bar_plot(variable):\n    \"\"\"\n        input: variable ex: \"Sex\"\n        output: bar plot & value count\n    \"\"\"\n    # get feature\n    var = train_df[variable]\n    # count number of categorical variable(value\/sample)\n    varValue = var.value_counts()\n    \n    # visualize\n    \n    plt.figure(figsize = (9,3))\n    plt.bar(varValue.index, varValue)\n    plt.xticks(varValue.index, varValue.index.values)\n    plt.ylabel('Frequency')\n    plt.title(variable)\n    plt.show()\n    print(\"{}: \/n {}\".format(variable, varValue))","8b21cfac":"category1 = [\"Survived\", \"Sex\", \"Pclass\", \"Embarked\", \"SibSp\", \"Parch\"]\nfor c in category1:\n    bar_plot(c)","ebc95dcd":"category2 = [\"Cabin\", \"Name\", \"Ticket\"]\nfor c in category2:\n    print(\"{}: \/n\".format(train_df[c].value_counts()))","70bd222a":"def plot_hist(variable):\n    plt.figure(figsize = (9,3))\n    plt.hist(train_df[variable], bins = 100)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with hist\".format(variable))\n    plt.show()","98466264":"numericVar = [\"Fare\", \"Age\", \"PassengerId\"]\nfor n in numericVar:\n    plot_hist(n)","19d9dead":"# Pclass vs Survived\ntrain_df[[\"Pclass\", \"Survived\"]].groupby([\"Pclass\"], as_index = False).mean().sort_values(by = \"Survived\", ascending = False)","c6ddfb7b":"# Sex vs Survived\ntrain_df[[\"Sex\", \"Survived\"]].groupby([\"Sex\"], as_index = False).mean().sort_values(by = \"Survived\", ascending = False)","7d27ec34":"# SibSp vs Survived\ntrain_df[[\"SibSp\", \"Survived\"]].groupby([\"SibSp\"], as_index = False).mean().sort_values(by = \"Survived\", ascending = True)","37591e24":"# Parch vs Survived\ntrain_df[[\"Parch\", \"Survived\"]].groupby([\"Parch\"], as_index = False).mean().sort_values(by = \"Survived\", ascending = True)","4e331842":"def detect_outliers(df, features):\n    outlier_indices = []\n    for c in features:\n        # 1st quartile\n        q1 = np.percentile(df[c], 25)\n        # 3rd quartile\n        q3 = np.percentile(df[c], 75)\n        # IQR\n        IQR = q3 - q1\n        # Outlier Step\n        outlier_step = IQR * 1.5\n        # Detect Outlier and their indices\n        outlier_list_col = df[(df[c] < q1 - outlier_step) | (df[c] > q3  + outlier_step)].index\n        # Store Indices\n        outlier_indices.extend(outlier_list_col)\n        \n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i, v in outlier_indices.items() if v > 2)\n    \n    return multiple_outliers","69a50a5e":"train_df.loc[detect_outliers(train_df, [\"Age\", \"SibSp\", \"Parch\", \"Fare\"])]","b89ff571":"# drop outliers\n\ntrain_df = train_df.drop(detect_outliers(train_df, [\"Age\", \"SibSp\", \"Parch\", \"Fare\"]), axis = 0).reset_index(drop = True)","67feb33e":"trains_df_len = len(train_df)\ntrain_df = pd.concat([train_df, test_df], axis = 0).reset_index(drop = True)","69946f95":"train_df.columns[train_df.isnull().any()]","73edde00":"train_df.isnull().sum()","b2d77ce8":"train_df[train_df[\"Embarked\"].isnull()]","820cb86e":"train_df.boxplot(column = \"Fare\", by = \"Embarked\")\nplt.show()","c8abe32e":"train_df[\"Embarked\"] = train_df[\"Embarked\"].fillna(\"C\")\ntrain_df[train_df[\"Embarked\"].isnull()]","d07bc3f8":"train_df[train_df[\"Fare\"].isnull()]","9708cd8f":"train_df[\"Fare\"] = train_df[\"Fare\"].fillna(train_df[train_df[\"Pclass\"] == 3][\"Fare\"].mean())\ntrain_df[train_df[\"Fare\"].isnull()]","8d5ec623":"**# Introduction**\n\nThe sinking of Titanic is one of the notorious shipwredcks in the history. There were 1502 people died 2224 of the passengers and the crew.\n\n<font color= 'blue'>\nContent:\n    \n1. [Load and Check Data](#1)\n2. [Variable Description](#2)\n3. [Univariate Variable Analysis](#3)\n    * [Categorical Variable Analysis](#4)\n    * [Numerical Variable Analysis](#5)\n4. [Basic Data Analysis](#6)\n5. [Outlier Detection](#7)\n6. [Missing Value](#8)\n    * [Find Missing Value](#9)\n    * [Fill Missing Value](#10)","f2a5ce5d":"<a id = '5'><\/a>\n## Numerical Variable Analysis","73339b05":"<a id = '1'><\/a>\n# Load and Check Data","6d95696a":"<a id = \"8\"><\/a>\n# Missing Value\n\n* Find Missing Value\n* Fill Missing Value","e355f676":"<a id = \"6\"><\/a>\n# Basic Data Analysis\n\n* Pclass - Survived\n* Sex- Survived\n* SibSp - Survived\n* Parch - Survived","b0dc1e1c":"<a id = '3'><\/a>\n# Univariate Variable Analysis\n\n* Categorical Variable: Survived, Sex, Pclass, Embarked, Cabin, Name, Ticket, Sibsp and Parch\n* Numerical Variable: Age, passengerId and Fare","e07eb92c":"<a id = '2'><\/a>\n# Variable Description\n\n1. PassengerId: unique id number to each passenger\n2. Survived: passenger survived(1) or died(0) \n3. Pclass: passenger class \n4. Name: name \n5. Sex: gender \n6. Age: age \n7. SibSp: number of siblings\/spouses\n8. Parch: number of parents\/children \n9. Ticket: ticket number \n10. Fare: amount of money paid \n11. Cabin: cabin category \n12. Embarked: port where passenger embarked (C = Cherbourgh, Q = Queenstwon, S = Southampton)","e85ed92c":"* float64(2): fare, age \n* int64(5): Pclass, SibSp, parch, passengerId and survived\n* object(5): Cabin, embarked, ticket, name and sex","c98bd4fc":"<a id = \"9\"><\/a>\n## Find Missing Value","d2099e39":"<a id = \"7\"><\/a>\n# Outlier Detection","9364ad43":"<a id = \"10\"><\/a>\n## Fill Missing Value","7ec44c3f":"<a id = '4'><\/a>\n## Categorical Variable Analysis"}}