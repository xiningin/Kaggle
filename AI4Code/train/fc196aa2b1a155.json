{"cell_type":{"8c6fb594":"code","7e4ad022":"code","4658e62b":"code","a367346e":"code","9f563831":"code","98a0c617":"code","945c33a4":"code","baaee8bc":"code","711dea12":"code","b7db4699":"code","fdb3df95":"code","aa93bd5b":"code","e5f9aed6":"code","2d10962f":"code","3c2cbb9d":"code","e65bdee9":"code","ebee1e97":"markdown"},"source":{"8c6fb594":"import os, re\nimport tensorflow as tf\nimport pandas as pd\nimport numpy as np\n\n\nimport tensorflow as tf\nimport tensorflow.keras.layers as L\nimport tensorflow.keras.optimizers as Optim\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.callbacks import ModelCheckpoint\nfrom kaggle_datasets import KaggleDatasets\nimport transformers\nfrom transformers import TFAutoModel, AutoTokenizer\nfrom tokenizers import Tokenizer, models, pre_tokenizers, decoders, processors","7e4ad022":"def fast_encode(texts, tokenizer, chunk_size = 256, maxlen = 512):\n    tokenizer.enable_truncation(max_lenght = maxlen)\n    tokenizer.enable_padding(max_length = maxlen)\n    all_ids = []\n    for i in tqdm(range(0, len(texts), chunk_size)):\n        text_chunk = texts[i:i+chunk_size].tolist()\n        encs = tocanizer.encode_batch(text_chunk)\n        all_ids.extend([enc.ids for enc in encs])\n        \n    return np.array(all_ids)    ","4658e62b":"def regular_encode(texts, tokenizer, maxlen=512):\n    enc_di = tokenizer.batch_encode_plus(\n        texts, \n        return_attention_masks=False, \n        return_token_type_ids=False,\n        pad_to_max_length=True,\n        max_length=maxlen\n    )\n    \n    return np.array(enc_di['input_ids'])\n","a367346e":"def build_model(transformer, max_len = 512):\n    input_word_ids = L.Input(shape = (max_len,), dtype = tf.int32, name = 'input_word_ids')\n    sequence_output = transformer(input_word_ids)[0]\n    cls_token = sequence_output[:, 0, :]\n    out = L.Dense(1, activation = 'sigmoid')(cls_token)\n    \n    model = Model(inputs = input_word_ids, outputs = out)\n    model.compile(Optim.Adam(lr = 1e-5), loss = 'binary_crossentropy', metrics = ['accuracy'])\n    return model","9f563831":"# Detect hardware, return appropriate distribution strategy\ntry:\n    # TPU detection. No parameters necessary if TPU_NAME environment variable is\n    # set: this is always the case on Kaggle.\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n    print('Running on TPU ', tpu.master())\nexcept ValueError:\n    tpu = None\n\nif tpu:\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\nelse:\n    # Default distribution strategy in Tensorflow. Works on CPU and single GPU.\n    strategy = tf.distribute.get_strategy()\n\nprint(\"REPLICAS: \", strategy.num_replicas_in_sync)","98a0c617":"AUTO = tf.data.experimental.AUTOTUNE\n\n# Data access\nGCS_DS_PATH = KaggleDatasets().get_gcs_path()\n\n# Configuration\nTRAIN_EPOCHS = 5\nVALID_EPOCHS = 5\nBATCH_SIZE = 16 * strategy.num_replicas_in_sync\nMAX_LEN = 192\nMODEL = 'jplu\/tf-xlm-roberta-large'","945c33a4":"tokenizer = AutoTokenizer.from_pretrained(MODEL)","baaee8bc":"train1 = pd.read_csv(\"\/kaggle\/input\/jigsaw-multilingual-toxic-comment-classification\/jigsaw-toxic-comment-train.csv\")\ntrain2 = pd.read_csv(\"\/kaggle\/input\/jigsaw-multilingual-toxic-comment-classification\/jigsaw-unintended-bias-train.csv\")\ntrain2.toxic = train2.toxic.round().astype(int)\n\nvalid = pd.read_csv('\/kaggle\/input\/jigsaw-multilingual-toxic-comment-classification\/validation.csv')\ntest = pd.read_csv('\/kaggle\/input\/jigsaw-multilingual-toxic-comment-classification\/test.csv')\nsub = pd.read_csv('\/kaggle\/input\/jigsaw-multilingual-toxic-comment-classification\/sample_submission.csv')","711dea12":"train = pd.concat([\n    train1[['comment_text', 'toxic']],\n    train2[['comment_text', 'toxic']].query('toxic==1'),\n    train2[['comment_text', 'toxic']].query('toxic==0').sample(n=100000, random_state=0)\n])\n","b7db4699":"x_train = regular_encode(train.comment_text.values, tokenizer, maxlen = MAX_LEN)\nx_valid = regular_encode(valid.comment_text.values, tokenizer, maxlen = MAX_LEN)\n#x_test = regular_encode(test.content.values, tokenizer, maxlen = MAX_LEN)\n\ny_train = train.toxic.values\ny_valid = valid.toxic.values","fdb3df95":"train_dataset = (tf.data.Dataset\n                .from_tensor_slices((x_train, y_train))\n                .repeat()\n                .shuffle(2048)\n                .batch(BATCH_SIZE)\n                .prefetch(AUTO)\n                )\n\nvalid_dataset = (tf.data.Dataset\n                .from_tensor_slices((x_valid, y_valid))\n                .cache()\n                .batch(BATCH_SIZE)\n                .prefetch(AUTO)\n                )\n\n\"\"\"test_dataset = (tf.data.Dataset\n                .from_tensor_slices(x_test)\n                .batch(BATCH_SIZE)\n                )\"\"\"","aa93bd5b":"%%time\nwith strategy.scope():\n    transformer_layer = TFAutoModel.from_pretrained(MODEL)\n    model = build_model(transformer_layer, max_len=MAX_LEN)\nmodel.summary()","e5f9aed6":"n_steps = x_train.shape[0] \/\/ BATCH_SIZE\ntrain_history = model.fit(\n    train_dataset,\n    steps_per_epoch=n_steps,\n    validation_data=valid_dataset,\n    epochs=5\n)","2d10962f":"n_steps = x_valid.shape[0] \/\/ BATCH_SIZE\ntrain_history_2 = model.fit(\n    valid_dataset.repeat(),\n    steps_per_epoch=n_steps,\n    epochs=5\n)","3c2cbb9d":"model.save_weights('UnToxik_V0-1.h5')","e65bdee9":"tokenizer.save_pretrained('.')","ebee1e97":"Dataset Objects :)"}}