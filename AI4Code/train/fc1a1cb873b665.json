{"cell_type":{"ca69c3c2":"code","9b111e61":"code","525f2db5":"code","5bcb2f6b":"code","ea87d9f4":"code","29d9b8b6":"code","a5202b01":"code","536ceac9":"code","6bea1a12":"code","c742ebcc":"code","cc1db132":"code","353a7907":"code","93374ae7":"code","4f98cb43":"code","7c408c3c":"code","a18666a3":"code","2e40692e":"code","98229eb8":"code","bc206bc3":"code","50eb85e7":"code","f1a305cc":"code","65023384":"markdown","b967c89d":"markdown","bde6d02a":"markdown","9f906656":"markdown","fc38d7b6":"markdown","60758232":"markdown","b1aa4991":"markdown","7f1bd736":"markdown","8d74cd51":"markdown","f6f938ed":"markdown","e3725bf1":"markdown","78c25242":"markdown","9605062a":"markdown","c6029519":"markdown"},"source":{"ca69c3c2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9b111e61":"%matplotlib inline\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport scipy as stats\nfrom ast import literal_eval\nfrom sklearn.feature_extraction.text import TfidfVectorizer,CountVectorizer\nfrom sklearn.metrics.pairwise import linear_kernel, cosine_similarity\nfrom nltk.stem.snowball import SnowballStemmer\nfrom nltk.stem.wordnet import WordNetLemmatizer\nfrom nltk.corpus import wordnet\nfrom surprise import Reader,Dataset,SVD\n\npd.pandas.set_option('display.max_columns',None)\n","525f2db5":"md = pd.read_csv('\/kaggle\/input\/the-movies-dataset\/movies_metadata.csv')\nmd.head()","5bcb2f6b":"md['genres'] = md['genres'].fillna('[]').apply(literal_eval).apply(lambda x: [i['name'] for i in x]if isinstance(x,list) else [])","ea87d9f4":"md['vote_count']","29d9b8b6":"vote_count= md[md['vote_count'].notnull()]['vote_count'].astype('int')\nvote_averages = md[md['vote_average'].notnull()]['vote_average'].astype('int')\nC = vote_averages.mean()\nC","a5202b01":"m = vote_count.quantile(0.95)\nm","536ceac9":"md['release_date']","6bea1a12":"pd.to_datetime(md['release_date'], errors='coerce')","c742ebcc":"md['year'] = pd.to_datetime(md['release_date'], errors='coerce').apply(lambda x: str(x).split('-')[0] if x != np.nan else np.nan)","cc1db132":"qualified = md[(md['vote_count'] >= m) & (md['vote_count'].notnull()) & (md['vote_average'].notnull())][['title', 'year', 'vote_count', 'vote_average', 'popularity', 'genres']]\nqualified['vote_count'] = qualified['vote_count'].astype('int')\nqualified['vote_average'] = qualified['vote_average'].astype('int')\nqualified.shape","353a7907":"def weig_rat(x):\n    v = x['vote_count']\n    R = x['vote_average']\n    return (v\/(v+m)*R) + (m\/(m+v)*C)","93374ae7":"qualified['wr'] = qualified.apply(weig_rat,axis = 1)","4f98cb43":"qualified.head()","7c408c3c":"qualified = qualified.sort_values('wr',ascending=False).head(250)","a18666a3":"qualified.head(15)","2e40692e":"s = md.apply(lambda x: pd.Series(x['genres']),axis=1).stack().reset_index(level=1, drop=True)","98229eb8":"s.name = 'genre'\ngen_md = md.drop('genres', axis=1).join(s)","bc206bc3":"gen_md","50eb85e7":"def top_movie(genre,n_precentile =.85):\n    df = gen_md[gen_md['genre'] == genre]\n    vote_count = df[df['vote_count'].notnull()]['vote_count'].astype('int')\n    vote_avg = df[df['vote_average'].notnull()]['vote_average'].astype('int')\n    C = vote_avg.mean()\n    m = vote_count.quantile(n_precentile)\n    qualified = df[(df['vote_count']>= m) & (df['vote_count'].notnull()) & (df['vote_average'].notnull())][['title', 'year', 'vote_count', 'vote_average', 'popularity']]\n    qualified['vote_count'] = qualified['vote_count'].astype('int')\n    qualified['vote_average'] = qualified['vote_average'].astype('int')\n    qualified['wr'] = qualified.apply(lambda x: (x['vote_count']\/(x['vote_count']+m)*x['vote_average'])+(m\/(m+x['vote_count'])*C),axis = 1)\n    qualified = qualified.sort_values('wr',ascending =False).head(250)\n    return qualified\n    ","f1a305cc":"top_movie('Action')","65023384":"The above will get the year from the release_date, to_datetime will convert the pandas datetime to datafram ","b967c89d":"**Simmple Recomender**\n\nIn this we are going to recommend movies based on the gener and rating or popularity of movie watched by most people ","bde6d02a":"let's sort the values in decending order","9f906656":"From the above we are taking out the genres values from the dictionary such that the name from the data alone is picked up and made into list. here literal_eval will evaluate the list we gave in the fillna and will apply the same.","fc38d7b6":"In the above we are taking the notnull values alone and changeing the data type as 'int'","60758232":"We can see that inception dark knight are having higher weighted rating which are christopher nolan film","b1aa4991":"here we are taking the genres column and making it as a series the stack() Function will make the list of geners for movie as a stack and having the same index for the geners of the specific movie","7f1bd736":"from ast import literal_eval is used to evaluate the python literals like float,int,string etc.\neg: code = \"\"\"(1, 2, {'foo': 'bar'})\"\"\" can be evaluated as Tuple when passed through the literal_eval object \n","8d74cd51":"Weighted Rating (WR) =  (vv+m.R)+(mv+m.C) \nwhere,\n\nv is the number of votes for the movie\nm is the minimum votes required to be listed in the chart\nR is the average rating of the movie\nC is the mean vote across the whole report\n\nvalue of m is determined by taking 95th percentile as the cutoff. i.e we are taking movies having more votes than 95%","f6f938ed":"from the above we can see that we are droping the geners and concatinating the stacked seperated geners and get assingned to the sepecific movies","e3725bf1":"Above shows that for 95th Percentile the votecount of the movies must be above 434 and those movies are taken for consideration","78c25242":"TMBD Rating is used for Top Movie rating. we will be using IMDB Weighted Rating to construct the chart","9605062a":"creating the new dataset containing the votecount graeter then the 95% percentile votecount ignoring the null values both from  vote_count and vote_average. and changing the type as int\n\n\nwe can see the vote count of the movie must be above 434, and the avarage rating will be 5.244896612406511","c6029519":"We have already calculated the weighted rating for the entire genres  columns for the movie having the vote count above 95% precentile. from that we found the most good rated movies. similarly  since we seperated the movies in tearm of genres we are going to create a function which finds the top rated movie based on specific genres. and we are going to take 85% as the criticle value of vote count. so the movies above 85% of vote count of total vote count wiill be selected."}}