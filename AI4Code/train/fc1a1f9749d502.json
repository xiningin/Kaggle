{"cell_type":{"61abe194":"code","89e7515e":"code","8e24e6e0":"code","38bcce4a":"code","4745147e":"code","48a895fb":"code","c98e407f":"code","d3e9988a":"code","e70d9fdd":"code","1f12ca4a":"code","9bd0a957":"code","0a24211e":"code","c3c2be05":"code","9b9a703d":"code","236c001c":"code","d5328ecb":"code","a6dc1658":"code","68434132":"code","b46f530a":"code","2ab36101":"code","abaa751d":"code","e192aab9":"code","10439903":"code","3f989e20":"code","46c1386e":"code","00fd189d":"code","02e35212":"code","997ee4d8":"code","c6439209":"code","7732e1e7":"code","31d0e0b2":"code","002402c1":"code","bef965a0":"code","5701f669":"code","c5c1445b":"code","7007756a":"code","8a6a5a43":"code","b25f1e71":"code","9441c3c6":"code","2484f0a4":"code","b51fe5fa":"code","a8d23d71":"code","394ca176":"code","ea0c4958":"markdown","1ff28507":"markdown","b2d024dd":"markdown","f9999303":"markdown","d8b10c06":"markdown","12befc15":"markdown","9096f3bc":"markdown","e890cd38":"markdown","6fe24ef0":"markdown","f420f937":"markdown","bba6aeac":"markdown","ddedc637":"markdown","900bdace":"markdown","a56cad5d":"markdown","e2eb4a28":"markdown","d91c07e6":"markdown","2d8ccc14":"markdown","326f5c97":"markdown","a6e96d0b":"markdown","f89cd3cb":"markdown","8fcc61af":"markdown","16235914":"markdown","17446996":"markdown","fad7b41f":"markdown","57868218":"markdown","e2636316":"markdown","efa1b768":"markdown","93de112f":"markdown","4ceeace5":"markdown","0d6c9d1e":"markdown","faea1ff4":"markdown","682c8f75":"markdown","e54c0443":"markdown","1882ab81":"markdown","1df5468c":"markdown","5338ae63":"markdown"},"source":{"61abe194":"import pandas as pd\n\n# Not limiting the column number when displaying dataframe\npd.set_option(\"display.max_columns\", None)","89e7515e":"df = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ndf.head()","8e24e6e0":"df.tail()","38bcce4a":"print(df.columns)","4745147e":"rows = df.shape[0]\ncols = df.shape[1]\n\nprint(\"Before cleaning, there are \" + str(rows) + \" rows and \" + str(cols) + \" columns in this dataframe.\")","48a895fb":"dupRows = df.duplicated().sum()\nprint(\"There are \" + str(dupRows) + \" duplicated rows in the dataframe.\")","c98e407f":"df.isnull().sum()","d3e9988a":"df.nunique()","e70d9fdd":"df.info()","1f12ca4a":"df.dtypes.value_counts()","9bd0a957":"df.describe()","0a24211e":"import numpy as np\nimport matplotlib.pyplot as plt\n\nboxplot_columns = [\"LotArea\", \"OverallQual\", \"OverallCond\", \"YearBuilt\", \"FullBath\", \"Fireplaces\", \"GarageCars\", \"SalePrice\"]\n\n\nfor entry in boxplot_columns:\n    fig1, axes = plt.subplots(figsize = (10, 8))\n    axes.set_title(entry)\n    axes.boxplot(df[entry]);","c3c2be05":"df.memory_usage()","9b9a703d":"df.corr()","236c001c":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\ncorrelations = df.corr()\n\nplt.figure(figsize = (26, 26))\nplt.title(\"Heatmap displaying the correlations between all columns\", fontsize = 20)\nsns.heatmap(correlations, annot = True, cmap = \"mako\")","d5328ecb":"survivedCorr = df.corr()[\"SalePrice\"]\nsurvivedCorr = pd.DataFrame(survivedCorr)\nsurvivedCorr","a6dc1658":"%matplotlib inline\n\nplt.figure(figsize = (50, 20))\nplt.title(\"Correlations between input columns and target column 'SalePrice'\", fontsize = 20)\nplt.xlabel(\"Columns\", fontsize = 16)\nplt.ylabel(\"Correlation factor\", fontsize = 16)\nplt.plot(survivedCorr, color = \"purple\", linestyle = \"\", marker = \"o\")\nplt.show()","68434132":"prices = df.value_counts([\"SalePrice\"])\nprices","b46f530a":"priceRange = []\n\nfor value in df[\"SalePrice\"]:\n    if (value <= 100000):\n        priceRange.append(1) # Cheap\n    elif (value > 100000) & (value <= 300000):\n        priceRange.append(2) # Middle Class\n    elif (value > 300000) & (value <= 600000):\n        priceRange.append(3) # High Income\n    elif (value > 600000) & (value <= 1000000):\n        priceRange.append(4) # Very High Income\n    elif (value > 1000000):\n        priceRange.append(5) # Luxury\n    \ndf[\"priceRange\"] = priceRange\n\ndf.head()","2ab36101":"ages = df.value_counts([\"YearBuilt\"])\nages","abaa751d":"age = []\n\nfor value in df[\"YearBuilt\"]:\n    if (value <= 1900):\n        age.append(1) # 19th Century\n    elif (value > 1900) & (value <= 1930):\n        age.append(2) # Early 20th Century\n    elif (value > 1930) & (value <= 1960):\n        age.append(3) # Mid 20th Century\n    elif (value > 1960) & (value <= 1990):\n        age.append(4) # Late 20th Century\n    elif (value > 1990):\n        age.append(5) # Modern\n\ndf[\"age\"] = age\n\ndf.head()","e192aab9":"equipment = df.value_counts([\"Utilities\"])\nequipment","10439903":"equipment = []\n\nfor value in df[\"Utilities\"]:\n    if (value == \"AllPub\"):\n        equipment.append(1)\n    else:\n        equipment.append(2)\n\ndf[\"equipment\"] = equipment\n\ndf.head()","3f989e20":"qualex = df.value_counts([\"ExterQual\"])\nqualex","46c1386e":"qualex = []\n\nfor value in df[\"ExterQual\"]:\n    if (value == \"Po\"):\n        qualex.append(1)\n    elif (value == \"Fa\"):\n        qualex.append(2)\n    elif (value == \"TA\"):\n        qualex.append(3)\n    elif (value == \"Gd\"):\n        qualex.append(4)\n    elif (value == \"Ex\"):\n        qualex.append(5)\n    else:\n        qualex.append(0)\n\ndf[\"qualex\"] = qualex\n\ndf.head()","00fd189d":"condex = df.value_counts([\"ExterCond\"])\ncondex","02e35212":"condex = []\n\nfor value in df[\"ExterCond\"]:\n    if (value == \"Po\"):\n        condex.append(1)\n    elif (value == \"Fa\"):\n        condex.append(2)\n    elif (value == \"TA\"):\n        condex.append(3)\n    elif (value == \"Gd\"):\n        condex.append(4)\n    elif (value == \"Ex\"):\n        condex.append(5)\n    else:\n        condex.append(0)\n\ndf[\"condex\"] = condex\n\ndf.head()","997ee4d8":"stories = df.value_counts([\"HouseStyle\"])\nstories","c6439209":"size = []\n\nfor value in df[\"HouseStyle\"]:\n    if (value == \"1Story\"):\n        size.append(1) # One story\n    elif (value == \"1.5Fin\"):\n        size.append(2) # One and one-half story: 2nd level finished\n    elif (value == \"1.5Unf\"):\n        size.append(3) # One and one-half story: 2nd level unfinished\n    elif (value == \"2Story\"):\n        size.append(4) # Two Story\n    elif (value == \"2.5Fin\"):\n        size.append(5) # Two and one-half story: 2nd level finished\n    elif (value == \"2.5Unf\"):\n        size.append(6) # Two and one-half story: 2nd level unfinished\n    elif (value == \"SFoyer\"):\n        size.append(7) # Split Foyer\n    elif (value == \"SLv1\"):\n        size.append(8) # Split Level\n    else:\n        size.append(0)\n    \ndf[\"size\"] = size\n\ndf.head()","7732e1e7":"df = df.fillna(0)\ndf = df.replace(\"Y\", 1)\ndf = df.replace(\"N\", 0)\ndf = df.replace(\"P\", 0.5)\n\ndf.head()","31d0e0b2":"pd.crosstab(df[\"priceRange\"], df[\"age\"])","002402c1":"ct = pd.crosstab(df[\"priceRange\"], df[\"age\"]) \n\nplt.figure(figsize = (18, 18))\nplt.title(\"Crosstab showing how the Construction Year influences the Price\", fontsize = 20)\nsns.heatmap(ct, cmap = \"YlGnBu\", annot = True, cbar = True, fmt = \"g\")","bef965a0":"pd.crosstab(df[\"priceRange\"], df[\"size\"])","5701f669":"ct = pd.crosstab(df[\"priceRange\"], df[\"size\"]) \n\nplt.figure(figsize = (18, 18))\nplt.title(\"Crosstab showing how the House Size influences the Price\", fontsize = 20)\nsns.heatmap(ct, cmap = \"BuPu\", annot = True, cbar = True, fmt = \"g\")","c5c1445b":"pd.crosstab(df[\"age\"], df[\"size\"])","7007756a":"ct = pd.crosstab(df[\"age\"], df[\"size\"]) \n\nplt.figure(figsize = (18, 18))\nplt.title(\"Crosstab showing how the House Age influences its Size\", fontsize = 20)\nsns.heatmap(ct, cmap = \"Greens\", annot = True, cbar = True, fmt = \"g\")","8a6a5a43":"pip install pandas-profiling[notebook]","b25f1e71":"import pandas_profiling\nfrom pandas_profiling import ProfileReport\n\nprofile = ProfileReport(df, title = \"Pandas Profiling Report\", explorative = True)\n\nprofile.to_widgets()","9441c3c6":"df = pd.get_dummies(df)\ndf.head()","2484f0a4":"X = df.drop([\"SalePrice\"], axis = 1).values\ny = df[\"SalePrice\"].values","b51fe5fa":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state = 0, test_size = 0.15)","a8d23d71":"from sklearn.linear_model import LinearRegression\n\nmodel = LinearRegression()\n\nmodel.fit(X_train, y_train)","394ca176":"model.score(X_test, y_test)","ea0c4958":"## **Machine Learning**","1ff28507":"#### Statistics for each column","b2d024dd":"#### Data types of the columns","f9999303":"#### NAs & Encoding","d8b10c06":"#### Defining X and y and Splitting data","12befc15":"#### How much do the columns correlate with each other?","9096f3bc":"#### Quality of the Exterior Material","e890cd38":"#### Exterior Condition","6fe24ef0":"#### Relation between House Price and Age of House","f420f937":"#### Names of columns","bba6aeac":"#### How old are the houses?","ddedc637":"#### Relation between House Price and Size of House","900bdace":"#### Loading and Displaying data","a56cad5d":"#### Regression Model","e2eb4a28":"#### Are older Houses bigger\/smaller than newer ones?","d91c07e6":"Most columns are of type **object**, followed by **integer** and **float**.","2d8ccc14":"#### ***Multiple Linear Regression***","326f5c97":"#### Boxplots for interesting columns","a6e96d0b":"#### How much are the columns correlation with our target\/pred column **SalePrice**?","f89cd3cb":"#### How many houses lay in what price range?","8fcc61af":"#### One-Hot-Encoding","16235914":"#### Sum of unique values per column","17446996":"There are multiple null values in the column **Lot Frontage**.","fad7b41f":"## **Exploratory Data Analysis (EDA)**","57868218":"### Interactive Data Science Charts","e2636316":"We can see that (not really supringsing) parameters like the construction year or overall living space influence the price strongly while other factors don't.","efa1b768":"#### How many stories?","93de112f":"#### Visualizing the correlation table above","4ceeace5":"# **House Prices EDA & Regression**","0d6c9d1e":"#### Any null values? If yes, how many in which column?","faea1ff4":"The **corr()**-function is used to find the pairwise correlation of all columns in the dataframe. Any missing values are automatically excluded. For any non-numeric data type columns in the dataframe, it is ignored. This function comes in handy while we doing the Feature Selection by observing the correlation between features and target variable or between variables.","682c8f75":"#### Any duplicates?","e54c0443":"#### Sums of columns with same data type","1882ab81":"#### Equipment","1df5468c":"#### How much memory does each column need (in bytes)?","5338ae63":"#### Shape of the train dataset"}}