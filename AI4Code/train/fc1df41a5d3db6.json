{"cell_type":{"0ad7c27c":"code","0633d3a7":"code","5453acec":"code","bf008541":"code","bcac17b1":"code","6d45a141":"code","e5ac5f5b":"code","ae05a4ec":"code","9a2564d9":"code","143f8755":"code","d38d75bb":"code","66bc032f":"code","b401027b":"code","607f4caf":"code","992cee6f":"code","cbd8353f":"code","8ce1866b":"code","db066408":"code","6ee6e6a1":"code","a7ee87e4":"code","a0e1e951":"code","bba15a94":"code","7ea04240":"code","dc8ddada":"code","50c2683f":"code","0559e4ed":"code","70ca7588":"code","030b78cf":"code","651d84d7":"code","cf22d9fc":"code","a4e7734a":"code","f9d5bb99":"code","b6c5304c":"code","adcfb146":"code","4afd469d":"code","b62cc9df":"code","496aaade":"code","4e8611c3":"code","7ebaa2b9":"code","abb796a9":"code","e158522e":"code","b7291305":"code","c91b7728":"code","789b5da4":"code","9d36c84c":"code","e2f05628":"code","1e90d056":"code","10138e0a":"code","c954e255":"code","615672c4":"code","d70692b5":"code","2a5cf541":"code","20377664":"code","84fb2d00":"code","7c6f5e3e":"code","1cf93bf6":"code","26027f14":"code","82f5ebdc":"code","8f014c1f":"code","0d801f70":"code","3916ca1d":"code","88d15cfa":"markdown","8b63bb93":"markdown","e9ceed06":"markdown","189e1374":"markdown","f5811c63":"markdown","a6424bb7":"markdown","2b0b60ee":"markdown","f55ff3a3":"markdown","06efe49c":"markdown","36afa7e3":"markdown","8bc3ba30":"markdown","f9a12d2d":"markdown","3b575f7d":"markdown","c183ba4e":"markdown","8b30c802":"markdown","852fe3b3":"markdown","cf95239d":"markdown","80b5b004":"markdown","845c6529":"markdown","de17afb3":"markdown","200caca5":"markdown","d5ea072c":"markdown","13c8c851":"markdown","1090acea":"markdown","0b7abe63":"markdown","265a7f7c":"markdown","7ef966a5":"markdown","7119d25e":"markdown","1e3fbf7f":"markdown","9557b730":"markdown","99e8e3fc":"markdown","ae73e1cf":"markdown","c6bfc016":"markdown","574a93e4":"markdown","40d69696":"markdown","bb5ae05a":"markdown","3e75039b":"markdown","703d1d1c":"markdown","49fc5abd":"markdown","825a5386":"markdown","2dd51d73":"markdown","b079f740":"markdown","b1a23d7c":"markdown","acf85791":"markdown","037b839b":"markdown"},"source":{"0ad7c27c":"import numpy as np\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nimport seaborn as sns","0633d3a7":"test = pd.read_csv('test.csv')\ntrain = pd.read_csv('train.csv')","5453acec":"#running on kaggle:\ntest = pd.read_csv('..\/input\/house-price-feature-eng\/test.csv')\ntrain = pd.read_csv('..\/input\/house-price-feature-eng\/train.csv')","bf008541":"train_y = train['SalePrice']\ntrain_X = train.copy().loc[:,train.columns != 'SalePrice']  ","bcac17b1":"def create_normalize_feature(df, feature, ordered_categories):\n  weight = 1\/(len(ordered_categories)-1)\n  for i in range(len(ordered_categories)):\n    df[feature].replace(ordered_categories[i], round(weight*(i),3), \n                       inplace= True)","6d45a141":"def merge_categories_by_threshold(df, label, new_col_name, threshold):\n  value_counts_label = df.value_counts(df[label])\n  mask = (value_counts_label \/ value_counts_label.sum() * 100).lt(threshold)\n  new_df = df.assign(new_label = \n                           np.where(df[label].isin(\n                               value_counts_label[mask].index),\n                                    'Other', df[label]))\n  new_df.rename(columns={'new_label': new_col_name}, inplace=True)\n  new_df.drop(columns = label, inplace=True)\n  return new_df","e5ac5f5b":"train_X.info()","ae05a4ec":"missing = train_X.isna().sum(axis=0)\nmissing = missing[missing>0]\nmissing.sort_values(ascending=False)","9a2564d9":"train_X[train_X.PoolQC.isna()].PoolArea.unique()","143f8755":"ordered_categories = ['Na', 'Fa', 'TA', 'Gd', 'Ex']\ncreate_normalize_feature(train_X, 'PoolQC', ordered_categories)\ntrain_X.PoolQC.fillna(0, inplace=True)","d38d75bb":"train_X.PoolQC.value_counts()","66bc032f":"train_X.Fence.fillna(0, inplace=True)\ntrain_X.Fence = train_X.Fence.map({'GdPrv': 1, 'MnPrv': 0.75, 'GdWo': 0.5, 'MnWw': 0.25, 0:0})","b401027b":"train_X.Fireplaces[train_X.FireplaceQu.isna()].unique()","607f4caf":"ordered_categories = ['Na', 'Po', 'Fa', 'TA', 'Gd', 'Ex']\ncreate_normalize_feature(train_X, 'FireplaceQu', ordered_categories)\ntrain_X.FireplaceQu.fillna(0, inplace=True)","992cee6f":"garage_columns = ['GarageType', 'GarageYrBlt', 'GarageFinish', 'GarageCars', \n                  'GarageArea', 'GarageQual', 'GarageCond']\ngarage = train_X[garage_columns]\n\ngarage_missing_columns = ['GarageType', 'GarageYrBlt', 'GarageFinish', \n                          'GarageQual', 'GarageCond']\ngarage[garage[garage_missing_columns].isna().all(axis=1)]","cbd8353f":"ordered_categories = ['Na', 'Unf', 'RFn', 'Fin']\ncreate_normalize_feature(train_X, 'GarageFinish', ordered_categories)\ntrain_X.GarageFinish.fillna(0, inplace=True)","8ce1866b":"ordered_categories = ['Na', 'Po', 'Fa', 'TA', 'Gd', 'Ex']\ncreate_normalize_feature(train_X, 'GarageQual', ordered_categories)\ntrain_X.GarageQual.fillna(0, inplace=True)","db066408":"create_normalize_feature(train_X, 'GarageCond', ordered_categories)\ntrain_X.GarageCond.fillna(0, inplace=True)","6ee6e6a1":"train_X.GarageYrBlt.fillna(0, inplace=True)","a7ee87e4":"train_X.loc[train_X['GarageType'].notnull(), 'GarageType'] = 1\ntrain_X.GarageType.fillna(0, inplace=True)\ntrain_X.rename(columns={'GarageType':'Garage'}, inplace=True)","a0e1e951":"train_X.LotFrontage.fillna(train_X.LotFrontage.mean(), inplace=True)","bba15a94":"basement_columns = ['BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', \n                    'BsmtFinSF1', 'BsmtFinType2', 'BsmtFinSF2', 'BsmtUnfSF', \n                    'TotalBsmtSF']\nbasement = train_X[basement_columns]\n\nbasement_missing_columns = ['BsmtQual', 'BsmtCond', 'BsmtExposure', \n                            'BsmtFinType1', 'BsmtFinType2']\nbasement[basement[basement_missing_columns].isna().all(axis=1)]","7ea04240":"ordered_categories = ['NA','Po', 'Fa', 'TA', 'Gd', 'Ex']\ncreate_normalize_feature(train_X, 'BsmtQual', ordered_categories)\ntrain_X.BsmtQual.fillna(0, inplace=True)","dc8ddada":"create_normalize_feature(train_X, 'BsmtCond', ordered_categories)\ntrain_X.BsmtCond.fillna(0, inplace=True)","50c2683f":"ordered_categories = ['NA','No', 'Mn', 'Av', 'Gd']\ncreate_normalize_feature(train_X, 'BsmtExposure', ordered_categories)\ntrain_X.BsmtExposure.fillna(0, inplace=True)","0559e4ed":"ordered_categories = ['NA','Unf', 'LwQ', 'Rec', 'BLQ', 'ALQ', 'GLQ']\ncreate_normalize_feature(train_X, 'BsmtFinType1', ordered_categories)\ntrain_X.BsmtFinType1.fillna(0, inplace=True)","70ca7588":"create_normalize_feature(train_X, 'BsmtFinType2', ordered_categories)\ntrain_X.BsmtFinType2.fillna(0, inplace=True)","030b78cf":"vnr_columns = ['MasVnrArea', 'MasVnrType']\nveneer = train_X[vnr_columns]\n\nveneer[veneer.isna().all(axis=1)]","651d84d7":"train_X.loc[train_X['MasVnrType'].notnull(), 'MasVnrType'] = 1\ntrain_X.MasVnrType.fillna(0, inplace=True)\ntrain_X['MasVnrType'][train_X.MasVnrArea == 0] = 0\ntrain_X.rename(columns={'MasVnrType':'MasVnr'}, inplace=True)\n\ntrain_X.MasVnrArea.fillna(0, inplace=True)","cf22d9fc":"train_X.Electrical.fillna('SBrkr', inplace=True)\nordered_categories = ['Mix', 'FuseP', 'FuseF', 'FuseA', 'SBrkr']\ncreate_normalize_feature(train_X, 'Electrical', ordered_categories)","a4e7734a":"des_obj = train_X.describe(include=[np.object]) \ndes_obj.columns","f9d5bb99":"ordered_categories = ['Po', 'Fa', 'TA', 'Gd', 'Ex']\nfeatures = ['HeatingQC', 'KitchenQual', 'ExterQual', 'ExterCond']\n\nfor feature in features:\n  create_normalize_feature(train_X, feature, ordered_categories)","b6c5304c":"ordered_categories = ['IR3', 'IR2', 'IR1', 'Reg']\ncreate_normalize_feature(train_X, 'LotShape', ordered_categories)\n\nordered_categories = ['Low', 'HLS', 'Bnk', 'Lvl']\ncreate_normalize_feature(train_X, 'LandContour', ordered_categories)\n\nordered_categories = ['Sev', 'Mod', 'Gtl']\ncreate_normalize_feature(train_X, 'LandSlope', ordered_categories)\n\nordered_categories = ['Twnhs', 'TwnhsE', 'Duplex', '2fmCon', '1Fam']\ncreate_normalize_feature(train_X, 'BldgType', ordered_categories)\n\nordered_categories = ['N', 'P', 'Y']\ncreate_normalize_feature(train_X, 'PavedDrive', ordered_categories)\n\nordered_categories = ['ELO', 'NoSeWa', 'NoSewr', 'AllPub']\ncreate_normalize_feature(train_X, 'Utilities', ordered_categories)","adcfb146":"train_X.Street = train_X.Street.map({'Grvl': 1, 'Pave': 0})\ntrain_X.CentralAir = train_X.CentralAir.map({'Y': 1, 'N': 0})","4afd469d":"train_X = merge_categories_by_threshold(train_X, 'RoofMatl', \n                                        'RoofMatl_CompShg', 5)\ntrain_X.RoofMatl_CompShg = train_X.RoofMatl_CompShg.map({'CompShg': 1, \n                                                         'Other': 0})","b62cc9df":"train_X = merge_categories_by_threshold(train_X, 'Heating', \n                                        'Heating_GasA', 5)\ntrain_X.Heating_GasA = train_X.Heating_GasA.map({'GasA': 1, 'Other': 0})","496aaade":"train_X.fillna('Typ', inplace=True)\ntrain_X = merge_categories_by_threshold(train_X, 'Functional', \n                                        'Functional_typical', 5)\ntrain_X.Functional_typical = train_X.Functional_typical.map({'Typ': 1, \n                                                             'Other': 0})","4e8611c3":"train_X = merge_categories_by_threshold(train_X, 'Condition2', \n                                        'Condition2_norm', 5)\ntrain_X.Condition2_norm = train_X.Condition2_norm.map({'Norm': 1, \n                                                             'Other': 0})","7ebaa2b9":"train_X = merge_categories_by_threshold(train_X, 'RoofStyle', \n                                        'RoofStyle_merged', 5)","abb796a9":"train_X = merge_categories_by_threshold(train_X, 'Foundation', \n                                        'Foundation_merged', 5)","e158522e":"train_X = merge_categories_by_threshold(train_X, 'SaleType', \n                                        'SaleType_merged', 5)","b7291305":"train_X = merge_categories_by_threshold(train_X, 'SaleCondition', \n                                        'SaleCondition_merged', 5)","c91b7728":"train_X = merge_categories_by_threshold(train_X, 'HouseStyle', \n                                        'HouseStyle_merged', 5)","789b5da4":"train_X['Exterior_combined'] = train_X.apply(lambda x: x.Exterior1st + '_' + \n                                             x.Exterior2nd, axis=1)\ntrain_X.drop(columns=['Exterior1st', 'Exterior2nd'], inplace=True)\ntrain_X = merge_categories_by_threshold(train_X, 'Exterior_combined', \n                                        'Exterior_combined_merged', 5)\ntrain_X.Exterior_combined_merged.value_counts()","9d36c84c":"train_X = merge_categories_by_threshold(train_X, 'Neighborhood', \n                                        'Neighborhood_merged', 5)","e2f05628":"# One-hot encoding with pd.get_dummies\nonehot_columns = ['RoofStyle_merged', 'Foundation_merged', 'SaleType_merged', \n           'SaleCondition_merged', 'Exterior_combined_merged', \n           'HouseStyle_merged', 'Neighborhood_merged']\ndata = pd.get_dummies(train_X, prefix=onehot_columns, columns=onehot_columns)","1e90d056":"data.info()","10138e0a":"columns = ['LotConfig', 'Condition1', 'MoSold','Neighborhood_merged_NWAmes']\ndata.drop(columns = columns, inplace=True)","c954e255":"data.set_index(['Id'], inplace=True)","615672c4":"data.info()","d70692b5":"y_train_log = np.log1p(train_y)","2a5cf541":"from scipy.stats import norm\nplt.figure();\nsns.distplot(train_y , fit=norm);\nplt.title('Before the transformation');\n\nplt.figure();\nplt.title('After the transformation');\nsns.distplot(y_train_log , fit=norm);\n","20377664":"def garage_features(df):\n  df.loc[df['GarageType'].notnull(), 'GarageType'] = 1\n  df.GarageType.fillna(0, inplace=True)\n  df.rename(columns={'GarageType':'Garage'}, inplace=True)\n\ndef lot_frontage_feature(df):\n  df.LotFrontage.fillna(df.LotFrontage.mean(), inplace=True)\n\ndef veneer_features(df):\n  df.loc[df['MasVnrType'].notnull(), 'MasVnrType'] = 1\n  df.MasVnrType.fillna(0, inplace=True)\n  df['MasVnrType'][df.MasVnrArea == 0] = 0\n  df.rename(columns={'MasVnrType':'MasVnr'}, inplace=True)\n  df.MasVnrArea.fillna(0, inplace=True)\n\ndef functional_feature(df):\n  df.Functional.fillna('Typ', inplace=True)\n\ndef electrical_feature(df):\n  df.Electrical.fillna('SBrkr', inplace=True)\n  ordered_categories = ['Mix', 'FuseP', 'FuseF', 'FuseA', 'SBrkr']\n  create_normalize_feature(df, 'Electrical', ordered_categories)\n\ndef exterior_feature(df):\n  df.Exterior1st.fillna('None', inplace=True)\n  df.Exterior2nd.fillna('None', inplace=True)\n  df['Exterior_combined'] = df.apply(lambda x: x.Exterior1st + '_' + \n                                             x.Exterior2nd, axis=1)\n  df.drop(columns=['Exterior1st', 'Exterior2nd'], inplace=True)","84fb2d00":"def fillna_continues_features(df, continues_features):\n  for feature in continues_features:\n    df.loc[np.isnan(df[feature]), feature] = 0\n\ndef encoding_ordinal_categories(df, categorial_dict):\n  for feature, ordered_categories in categorial_dict.items():\n    create_normalize_feature(df, feature, ordered_categories)\n    df.loc[np.isnan(df[feature]), feature] = 0\n\ndef special_categories_treatment(df):\n  garage_features(df)\n  functional_feature(df)\n  lot_frontage_feature(df)\n  veneer_features(df)\n  electrical_feature(df)\n  exterior_feature(df)\n\ndef remove_categorical_features(df, columns):\n    df_columns = df.columns\n    for feature in columns:\n        if feature in df_columns:\n            df.drop(columns = [feature], inplace=True)\n\ndef merge_categories(df, merged_features_dict, threshold):\n  for feature, new_feature in merged_features_dict.items():\n    df = merge_categories_by_threshold(df, feature, new_feature, threshold)\n  return df\n\ndef unicode_features(df, unicode_dict):\n  for feature, new_unicode_dict in unicode_dict.items():\n    df[feature] = df[feature].map(new_unicode_dict) \n\ndef create_onehot_features(df, onehot_columns):\n  data = pd.get_dummies(df, prefix=onehot_columns, columns=onehot_columns)\n  return data","7c6f5e3e":"def preprocessing(df, continues_features, category_ordered, remove_columns, \n                  merged_features_dict, unicode_features_dict, onehot_columns):\n  fillna_continues_features(df, continues_features)\n  encoding_ordinal_categories(df, category_ordered)\n  special_categories_treatment(df)\n  df = merge_categories(df, merged_features_dict, 5)\n  unicode_features(df, unicode_features_dict)\n  data = create_onehot_features(df, onehot_columns)\n  remove_categorical_features(data, remove_columns)\n  data.set_index(['Id'], inplace=True)\n  return data","1cf93bf6":"continues_features = ['GarageArea', 'GarageCars', 'BsmtFinSF1', 'BsmtFinSF2', \n                      'BsmtUnfSF','TotalBsmtSF', 'BsmtFullBath', 'BsmtHalfBath', 'GarageYrBlt']\n\ncategory_ordered = {'PoolQC': ['Na', 'Fa', 'TA', 'Gd', 'Ex'],\n                    'Fence': ['Na', 'MnWw', 'GdWo', 'MnPrv', 'GdPrv'],\n                    'FireplaceQu': ['Na', 'Po', 'Fa', 'TA', 'Gd', 'Ex'],\n                    'GarageFinish': ['Na', 'Unf', 'RFn', 'Fin'],\n                    'GarageQual': ['Na', 'Po', 'Fa', 'TA', 'Gd', 'Ex'],\n                    'GarageCond': ['Na', 'Po', 'Fa', 'TA', 'Gd', 'Ex'],\n                    'BsmtQual': ['NA','Po', 'Fa', 'TA', 'Gd', 'Ex'],\n                    'BsmtCond': ['NA','Po', 'Fa', 'TA', 'Gd', 'Ex'],\n                    'BsmtExposure': ['NA','No', 'Mn', 'Av', 'Gd'],\n                    'BsmtFinType1': ['NA','Unf', 'LwQ', 'Rec', 'BLQ', 'ALQ', 'GLQ'],\n                    'BsmtFinType2': ['NA','Unf', 'LwQ', 'Rec', 'BLQ', 'ALQ', 'GLQ'],\n                    'HeatingQC': ['Po', 'Fa', 'TA', 'Gd', 'Ex'],\n                    'KitchenQual': ['Po', 'Fa', 'TA', 'Gd', 'Ex'],\n                    'ExterQual': ['Po', 'Fa', 'TA', 'Gd', 'Ex'],\n                    'ExterCond': ['Po', 'Fa', 'TA', 'Gd', 'Ex'],\n                    'LotShape': ['IR3', 'IR2', 'IR1', 'Reg'],\n                    'LandContour': ['Low', 'HLS', 'Bnk', 'Lvl'],\n                    'LandSlope': ['Sev', 'Mod', 'Gtl'],\n                    'BldgType': ['Twnhs', 'TwnhsE', 'Duplex', '2fmCon', '1Fam'],\n                    'PavedDrive': ['N', 'P', 'Y'],\n                    'Utilities': ['ELO', 'NoSeWa', 'NoSewr', 'AllPub']}\n            \nmerged_features_dict = {'RoofMatl': 'RoofMatl_CompShg', \n                        'Heating': 'Heating_GasA',\n                        'Functional': 'Functional_typical',\n                        'RoofStyle': 'RoofStyle_merged',\n                        'Foundation': 'Foundation_merged',\n                        'SaleType': 'SaleType_merged',\n                        'SaleCondition': 'SaleCondition_merged',\n                        'Condition2': 'Condition2_norm',\n                        'HouseStyle': 'HouseStyle_merged',\n                        'Neighborhood': 'Neighborhood_merged',\n                        'Exterior_combined': 'Exterior_combined_merged'}\n                                            \nunicode_features_dict = {'Street': {'Grvl': 1, 'Pave': 0},\n                          'CentralAir': {'Y': 1, 'N': 0},\n                          'RoofMatl_CompShg': {'CompShg': 1, 'Other': 0},\n                          'Heating_GasA': {'GasA': 1, 'Other': 0},\n                          'Functional_typical': {'Typ': 1, 'Other': 0},\n                          'Condition2_norm': {'Norm': 1, 'Other': 0}}\n\nonehot_columns = ['RoofStyle_merged', 'Foundation_merged', 'SaleType_merged', \n                  'SaleCondition_merged', 'Exterior_combined_merged',\n                  'HouseStyle_merged', 'Neighborhood_merged']\n\nremove_columns = ['LotConfig', 'Condition1', 'MoSold', 'Neighborhood_merged_NWAmes']","26027f14":"from sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_log_error\n\ntrain_y = train['SalePrice']\ntrain_X = train.copy().loc[:,train.columns != 'SalePrice']  \n\ntrain_X = preprocessing(train_X, continues_features, category_ordered, \n                        remove_columns, merged_features_dict, \n                        unicode_features_dict, onehot_columns)","82f5ebdc":"# Transform target values from log-normal to normal\ny_train_log = np.log1p(train_y)\n\nest = LinearRegression().fit(train_X, y_train_log)\ny_pred = est.predict(train_X)\ny_pred_final = np.expm1(y_pred)\nnp.sqrt(mean_squared_log_error(train_y, y_pred_final))","8f014c1f":" from sklearn.model_selection import cross_val_score\n from sklearn.linear_model import LinearRegression\n\n clf = LinearRegression()\n print(cross_val_score(clf, train_X, y_train_log, cv=5))","0d801f70":"test = pd.read_csv('test.csv')\ntest_X = preprocessing(test, continues_features, category_ordered, remove_columns, \n                  merged_features_dict, unicode_features_dict, onehot_columns)\n\ny_pred = est.predict(test_X)\n# Transform the target values back \ny_pred_final = np.expm1(y_pred)\nsubmission = pd.DataFrame({'Id':test.Id, 'Predicted': y_pred_final})","3916ca1d":"submission.to_csv('submission.csv', index=False)","88d15cfa":"#### **Feature extraction option:**\nIn the futue we might consider to use an union feature:\n\n$ Pool = PoolArea \\cdot PoolQC$ \n\nWith [0,1] normalization","8b63bb93":"#### GarageFinish, GarageQual, GarageCond\nAs we can see it has an ordinal categories so we can create a normalize numeric feature and on samples without garage fill nan as 0.","e9ceed06":"We want to find the best way to fili none in each variable, so we will explore every one of them seperately:","189e1374":"## Fence: Fence quality (1179 missing values)\n\n       GdPrv\tGood Privacy\n       MnPrv\tMinimum Privacy\n       GdWo\tGood Wood\n       MnWw\tMinimum Wood\/Wire\n       NA\tNo Fence\n","f5811c63":"* At this part we will fill the nan values by treating each feature seperatly by it's properties. In addition we will the those features that are categorical to numeric.\n\n* We decided to change the categorical features to numeric by given normalize values to them","a6424bb7":"#### GarageYrBlt\n\n* If there are nan values - we will fill them with zero.","2b0b60ee":"#### **HouseStyle**","f55ff3a3":"#### GarageType\nfrom the EDA we can see that when we have a garage the sale price is higher so we can encode this feature to 1\/0 valuse and the meaning of the feature will be if there is garage or not.","06efe49c":"* As we can see, all the rows with none value in \"Fireplaces\" feature have 0 values in \"Fireplace Quality\" feature. This means that all the houses that doesn't have pool quality value are houses without pool at all. \n* Also we can see that this feature is categorieze and we won't be able ot use it as is in linear regression. The categories are ordinal, so we can transom it to numerical values.\n* We will replace all the none values of quality with 0.\n","36afa7e3":"## FireplaceQu: Fireplace quality (690 missing values)\n\nFireplaces: Number of fireplaces\n\nFireplaceQu: Fireplace quality\n\n       Ex\tExcellent - Exceptional Masonry Fireplace\n       Gd\tGood - Masonry Fireplace in main level\n       TA\tAverage - Prefabricated Fireplace in main living area or Masonry Fireplace in basement\n       Fa\tFair - Prefabricated Fireplace in basement\n       Po\tPoor - Ben Franklin Stove\n       NA\tNo Fireplace\n\nVery similar to the pool feature. We can do the same here:\n\nFirst we can check if the missing values are related to the non-missing column of PoolArea. Zero PoolArea means no pool at all.","8bc3ba30":"## LotFrontage: Linear feet of street connected to property (259 missing)\n\nThere is not a lot of information about this feature but as seen in the EDA, the density of this feature is very centered around the mean with low std. This brings us to the conclusion that a fillna with mean will be the best approximation.","f9a12d2d":"# Basic model- linear regression after preprocessing\n\n* This model represent the current results after we finished the preprocessing without adding any other changes. ","3b575f7d":"## Unit categories and use onehot\n* Those features has a lot of categories. We decided to union all the categories that are under < 5% and then we saw we have more then 2 categories so we used onehot to represent the feature","c183ba4e":"## Unit categories and defined the new features\n* Those features has a lot of categories. We decided to union all the categories that are under < 5%.\nafterward we saw we have 2 meaningfull categories in each feature so we encode everyone of the as boolean feature.","8b30c802":"## Electrical (1 missing)\n\n* There is 1 missing value. From the EDA we can see that over 90% of the values are 'SBrkr'. we fill the missing value with SBrkr.\n\n* Because this category is ordinal we will convert it into numeric.","852fe3b3":"#### **Feature extraction option**:\nIn the futue we might consider to use an union feature:\n\n$ Fireplace = Fireplaces \\cdot FireplaceQu$ \n\nWith [0,1] normalization","cf95239d":"# Encoding categorical data","80b5b004":"As we can see there are some variables with missing values. Let's check which variables has nan and need to handle.","845c6529":"* From our EDA we can see that GarageArea and GarageCars are high correlated, the GarageCars has better correlation with Y. \nSo we might consider to remove GarageArea in the future.","de17afb3":"#### BsmtQual + BsmtCond + BsmtExposure + BsmtFinType1 + BsmtFinType2\n\n* When we look on all the basement featurew we can see that on the places that we got nan values the TotalBsmtSF (Total square feet of basement area) is 0 which means that there isn't basement at all and that's the reason for nan values.\n\n* As we can see it has an ordinal categories so we can create a normalize numeric feature and on samples without garage fill nan as 0.","200caca5":"## Garage features\nThere are some Garage feaures with missing values: \n\nGarageFinish, GarageYrBlt, GarageType, GarageQual, GarageCond\n\nSo we want to investigate them together with all the features that related to garage.\n\nGarageType: Garage location\n\t\t\n       2Types\tMore than one type of garage\n       Attchd\tAttached to home\n       Basment\tBasement Garage\n       BuiltIn\tBuilt-In (Garage part of house - typically has room above garage)\n       CarPort\tCar Port\n       Detchd\tDetached from home\n       NA\tNo Garage\n\t\t\nGarageYrBlt: Year garage was built\n* If NaN - fill with zero\n\t\t\nGarageFinish: Interior finish of the garage\n\n       Fin\tFinished\n       RFn\tRough Finished\t\n       Unf\tUnfinished\n       NA\tNo Garage\n\t\t\nGarageCars: Size of garage in car capacity\n* If NaN - fill with zero\n\nGarageArea: Size of garage in square feet\n* If NaN - fill with zero\n\nGarageQual: Garage quality\n\n       Ex\tExcellent\n       Gd\tGood\n       TA\tTypical\/Average\n       Fa\tFair\n       Po\tPoor\n       NA\tNo Garage\n\t\t\nGarageCond: Garage condition\n\n       Ex\tExcellent\n       Gd\tGood\n       TA\tTypical\/Average\n       Fa\tFair\n       Po\tPoor\n       NA\tNo Garage","d5ea072c":"### PoolQC: Pool quality (1453 missing values)\n\n       Ex\tExcellent\n       Gd\tGood\n       TA\tAverage\/Typical\n       Fa\tFair\n       NA\tNo Pool\n\nWe can check if the missing values are related to the non-missing column of PoolArea. Zero PoolArea means no pool at all.\n","13c8c851":"#### **Foundation**","1090acea":"## Basement features (38, 37 missing)\n\nBsmtQual: Evaluates the height of the basement\n\n       Ex\tExcellent (100+ inches)\t\n       Gd\tGood (90-99 inches)\n       TA\tTypical (80-89 inches)\n       Fa\tFair (70-79 inches)\n       Po\tPoor (<70 inches)\n       NA\tNo Basement\n\t\t\nBsmtCond: Evaluates the general condition of the basement\n\n       Ex\tExcellent\n       Gd\tGood\n       TA\tTypical - slight dampness allowed\n       Fa\tFair - dampness or some cracking or settling\n       Po\tPoor - Severe cracking, settling, or wetness\n       NA\tNo Basement\n\t\nBsmtExposure: Refers to walkout or garden level walls\n\n       Gd\tGood Exposure\n       Av\tAverage Exposure (split levels or foyers typically score average or above)\t\n       Mn\tMimimum Exposure\n       No\tNo Exposure\n       NA\tNo Basement\n\t\nBsmtFinType1: Rating of basement finished area\n\n       GLQ\tGood Living Quarters\n       ALQ\tAverage Living Quarters\n       BLQ\tBelow Average Living Quarters\t\n       Rec\tAverage Rec Room\n       LwQ\tLow Quality\n       Unf\tUnfinshed\n       NA\tNo Basement\n\t\t\nBsmtFinSF1: Type 1 finished square feet\n\nBsmtFinType2: Rating of basement finished area (if multiple types)\n\n       GLQ\tGood Living Quarters\n       ALQ\tAverage Living Quarters\n       BLQ\tBelow Average Living Quarters\t\n       Rec\tAverage Rec Room\n       LwQ\tLow Quality\n       Unf\tUnfinshed\n       NA\tNo Basement\n\nBsmtFinSF2: Type 2 finished square feet\n\nBsmtUnfSF: Unfinished square feet of basement area\n\nTotalBsmtSF: Total square feet of basement area","0b7abe63":"#### **Condition 2**\n\n* From the EDA we can see that all the categories except Norm (=Normal) are below 5% of the values. We decided to convert this feature to represent if the Condition2 is Normal or not.","265a7f7c":"## Encoding ordinal categories\n* First we want to encode all the categorial features that are ordinal.","7ef966a5":"#### **SaleCondition**","7119d25e":"* When we check those columns we can see that MasVnrArea is nan on the same places as MasVnrType. The meaning of MasVnrType= nan is  that there isn't veneer at all.\nSo we can replace the nan values in MasVnrArea with 0 value which means that the veneer area is 0.\n\n* In addition from the EDA we can see that when we have a veneer the sale price is higher so we can encode this feature to 1\/0 valuse and the meaning of the feature will be if there is veneer or not.","1e3fbf7f":"#### **RoofStyle**","9557b730":"#### **Exterior**\n\n* When we checked the meaning of the columns we saw that they are both represent the Exterior covering on house. The Exterior1st represent the material and the second one another material (if exist) so we decided to combine it into one colum that represent the pairs of materials.\n\n* When we checked the combine colum we saw there are some categories that are under the threshold we defined so we merge them together to \"other\" category.\n\n* In the end we use onehot to encode the combined exterior feature","99e8e3fc":"### Main functions","ae73e1cf":"## MasVnrArea, MasVnrType (8 missing)","c6bfc016":"## Notebook description\n* On the first part of the notebook you can see the flow we did to preprocess data with explanations about what we did.\n* On the second part you can see the functions that we used for running the process A-Z (united the code to small functions).\n* On the third part we present the base model that we chose.\n","574a93e4":"#### **Heating**\n\n* From the EDA we can see that all the categories except GasA are below 5% of the values. We decided to convert this feature to represent if the heating is GasA or not.\n\n","40d69696":"#### **SaleType**","bb5ae05a":"# Preprocess A-Z","3e75039b":"## Remove categorial\n\n* There are some features we decide to remove from diffrent reasons:\n - **LotConfig, Condition1, MoSold**- we decided to remove those features because it's correlation with Y is very low (below 0.2) \n\n - **Neighborhood_merged_NWAmes**- we decided to remove this feature because the maning of getting 0 in all the other categories of neighborhood is that the house is in this neighborhood so it doesn't contribute us.","703d1d1c":"## Using Y-log\n* We saw in the EDA that the y is closer to log_norm distribution then to norm, so we decided to transform the Y","49fc5abd":"#### **RoofMatl**\n\n* From the EDA we can see that all the categories except CompShg are below 5% of the values. We decided to convert this feature to represent if the roof is from CompShg or not.","825a5386":"* As we can see, all the rows with none value in \"Pool quality\" feature have 0 values in \"Pool Area\" feature. This means that all the houses that doesn't have pool quality value are houses without pool at all. \n* Also we can see that this feature is categorieze and we won't be able ot use it as is in linear regression. The categories are ordinal, so we can transom it to numerical values.\n* We will replace all the none values of quality with 0.\n","2dd51d73":"#### **Neighborhood**\n* When we checked the combine colum we saw there are some categories that are under the threshold we defined, so we merge them to \"other\" category.\n\n* In the end we used onehot to encode the combined neighborhood feature","b079f740":"# Handle Missing values","b1a23d7c":"#### **Functional**\n\n* From the EDA we can see that all the categories except Typ (=Typical) are below 5% of the values. We decided to convert this feature to represent if the functional is Typical or not.\n\nIn case of NaN values, we assume Typical because of the high abundance of Typical (93% in the train data)","acf85791":"* Now we encode the boolean categorial features","037b839b":"* When we look on all the garage featurew we can see that on the places that we got nan values the garage area is 0 and the number of cars is 0, which means that there isn't garage at all and that's the reason for nan values.\n"}}