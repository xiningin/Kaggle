{"cell_type":{"44e40e26":"code","e05723b9":"code","d5a73bed":"code","df1d2caf":"code","383f08d7":"code","7b07f84b":"code","7993fbf0":"code","808f35d3":"code","277f919b":"code","2582d224":"code","99b60c48":"code","cd03ecec":"code","15357810":"code","13a9284b":"code","43596637":"markdown","7e1ae476":"markdown","ac50ec83":"markdown","41091c0b":"markdown","fbf3c200":"markdown","cefed27b":"markdown","a1b76107":"markdown"},"source":{"44e40e26":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.model_selection import train_test_split\nfrom yellowbrick.classifier import ROCAUC\nimport plotly.graph_objects as go","e05723b9":"df = pd.read_csv('\/kaggle\/input\/german-credit-data-with-risk\/german_credit_data.csv')\ndf = df.drop(['Unnamed: 0'],axis=1)\ndf.head()","d5a73bed":"df.columns = list(map(lambda name:name.replace(' ','_'),df.columns))","df1d2caf":"df[['Sex','Job','Housing','Saving_accounts','Checking_account','Purpose']] = \\\n    df[['Sex','Job','Housing','Saving_accounts','Checking_account','Purpose']].astype('category')","383f08d7":"df['Sex']=df['Sex'].cat.codes\ndf['Job']=df['Job'].cat.codes\ndf['Housing']=df['Housing'].cat.codes\ndf['Saving_accounts']=df['Saving_accounts'].cat.codes\ndf['Checking_account']=df['Checking_account'].cat.codes\ndf['Purpose']=df['Purpose'].cat.codes\ndf['Risk']=df['Risk'].map({'good':0,'bad':1})","7b07f84b":"df.head()","7993fbf0":"X,y = df.loc[:, df.columns != 'Risk'],df['Risk']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","808f35d3":"gbm = GradientBoostingClassifier(n_estimators=500)\n\nvisualizer = ROCAUC(gbm, classes=[ \"good\", \"bad\"])\nvisualizer.fit(X_train, y_train)        \nvisualizer.score(X_test, y_test)        \nvisualizer.show()                       ","277f919b":"\nX_test['predicted_probability'] = gbm.predict_proba(X_test)[:,1] # Predicted Proba for bads(=1)\nX_test['Risk'] = y_test #Ground Truth\nX_test.head()","2582d224":"#Sort the data in descending order of predicted probabilities.\nX_test = X_test.sort_values(by='predicted_probability', ascending=False)\nX_test.head()","99b60c48":"#Cut deciles based on the predicted probabilities\nX_test['decile_group'] = pd.qcut(X_test['predicted_probability'], 10)\nX_test.head()","cd03ecec":"lift = X_test.groupby('decile_group').agg( #Group by Deciles of Predicted Probabilties\n[\n    'count', #The total number of customers(data points) in the decile\n    'sum', #The total number of bad customers(Risk=1)\n]\n)['Risk'].sort_index(ascending=False)\nlift.columns = ['Number of customers','Number of goods']\nlift['Cumulative goods'] = lift['Number of goods'].cumsum() #Cumulative Sum of the number of bads\n#Calculate Gain = Cumulative Percent of Events\/Bads\nlift['Percent of Events'] = lift['Number of goods']\/lift['Number of goods'].sum()*100\nlift['Gain'] = lift['Percent of Events'].cumsum() \n#Calculate Lift = Ratio of Bads to the number of data points in the decile\nlift['Lift'] = lift['Gain']\/np.array(range(10,100+10,10))\nlift.head(10)","15357810":"gain = lift.Gain.tolist()\ngain.insert(0,0)\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=list(range(0,100+10,10)), y=list(range(0,100+10,10)),\n                    mode='lines+markers',\n                    name='lines+markers'))\nfig.add_trace(go.Scatter(x=list(range(0,100+10,10)), y=gain,\n                    mode='lines+markers',\n                    name='lines+markers'))\n\nfig.update_xaxes(\n        title_text = \"% of Data Set\",\n)\n\nfig.update_yaxes(\n        title_text = \"% of Gain\",\n        )\nfig.update_layout(title='Gain Charts',)\n\nfig.show()","13a9284b":"fig = go.Figure()\nfig.add_trace(go.Scatter(x=list(range(10,100+10,10)), y=np.repeat(1,10),\n                    mode='lines+markers',\n                    name='lines+markers'))\nfig.add_trace(go.Scatter(x=list(range(10,100+10,10)), y=lift.Lift,\n                    mode='lines+markers',\n                    name='lines+markers'))\n\nfig.update_xaxes(\n        title_text = \"% of Data Set\",\n)\n\nfig.update_yaxes(\n        title_text = \"Lift\",\n        )\nfig.update_layout(title='Lift Charts',)\n\nfig.show()","43596637":"# Plot the Charts","7e1ae476":"# Fit a Gradient Boosting Machine and examine the ROC AUC graph.","ac50ec83":"# Calculate the Lift and Gain Charts.","41091c0b":"# Read the Data and extract the features","fbf3c200":"# Import the libraries","cefed27b":"# Risk is the target variable and then a train-test split","a1b76107":"#  Inference\n### Gain - The ratio of bads(risk=1) across each of the deciles of predicted probabilities. 84% of bads can be found across the top 6 deciles.\n### Lift - Compare the predictive model with the random model. Like in the first 10% data one can find ~2.2 times the bads by using the gradient boosted trees model compared to a random predictor."}}