{"cell_type":{"69b6c9e4":"code","37bc07e2":"code","ab1c0d8d":"code","6d1e54ef":"code","ba857df8":"code","17b0bc6f":"code","e2a0d8a4":"code","6b2949a4":"code","604e7b01":"code","ef69a3a2":"code","4bc322dc":"code","ba2ee042":"code","c327d8bd":"code","729c3d2b":"code","bdd52f5b":"code","325c3330":"code","0c671f0b":"code","90af978c":"code","948d3833":"code","7f3e6c31":"code","751d7f3b":"markdown","36f3a541":"markdown","29065659":"markdown","f5314d4c":"markdown","7c4915d6":"markdown","d602c857":"markdown","627a1570":"markdown","996c1a20":"markdown","8d2a991e":"markdown","a4c3ba7e":"markdown","bb80fdad":"markdown"},"source":{"69b6c9e4":"import os, glob, re\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nfrom skimage.transform import resize","37bc07e2":"def sorted_list(path):\n    \n    tmplist = glob.glob(path)\n    tmplist.sort()\n    \n    return tmplist\n\ndef read_csv(path, head=5):\n    \n    df = pd.read_csv(path)\n    print(\"Shape:\", df.shape)\n    \n    return df","ab1c0d8d":"list_in = sorted_list(os.path.join('..\/input\/shopee-product-matching', '*'))\nlist_in","6d1e54ef":"list_tr = sorted_list(os.path.join('..\/input\/shopee-product-matching\/train_images', '*'))\nlist_tr[:10]","ba857df8":"list_te = sorted_list(os.path.join('..\/input\/shopee-product-matching\/test_images', '*'))\nlist_te","17b0bc6f":"df_tr = read_csv('..\/input\/shopee-product-matching\/train.csv')\ndf_tr","e2a0d8a4":"df_te = read_csv('..\/input\/shopee-product-matching\/test.csv')\ndf_te","6b2949a4":"df_sb = read_csv('..\/input\/shopee-product-matching\/sample_submission.csv')\ndf_sb","604e7b01":"uniq_tr = list(set(list(df_tr['label_group'])))\nuniq_tr.sort()\nprint(len(uniq_tr))\nprint(uniq_tr[:10])\n\ntmp_group = df_tr[df_tr['label_group'] == uniq_tr[-1]]\ntmp_group","ef69a3a2":"for idx in range(tmp_group.shape[0]):\n    tmp_path = os.path.join('..\/input\/shopee-product-matching\/train_images', tmp_group['image'].iloc[idx])\n    tmp_image = plt.imread(tmp_path)\n    \n    plt.figure(figsize=(15, 10))\n    plt.subplot(2, 3, 1)\n    h, w, c = tmp_image.shape\n    plt.title(\"Group: %s (%d x %d x %d)\" %(tmp_group['label_group'].iloc[idx], h, w, c))\n    plt.imshow(tmp_image)\n    \n    plt.subplot(2, 3, 2)\n    tmp_image_r = resize(tmp_image, (128, 128))\n    h, w, c = tmp_image_r.shape\n    plt.title(\"Resized (%d x %d x %d)\" %(h, w, c))\n    plt.imshow(tmp_image_r)\n    \n    plt.subplot(2, 3, 4)\n    plt.title(\"Histogram-Red\")\n    plt.hist(tmp_image[:, :, 0].reshape(-1), color='#ff0000')\n    \n    plt.subplot(2, 3, 5)\n    plt.title(\"Histogram-Green\")\n    plt.hist(tmp_image[:, :, 1].reshape(-1), color='#00ff00')\n    \n    plt.subplot(2, 3, 6)\n    plt.title(\"Histogram-Blue\")\n    plt.hist(tmp_image[:, :, 2].reshape(-1), color='#0000ff')\n    \n    plt.tight_layout()\n    plt.show()","4bc322dc":"def get_words(df_group):\n    dict_word = {}\n    for idx in range(df_group.shape[0]):\n        list_word = re.findall(r'\\w+', df_group['title'].iloc[idx].lower())\n        for name_word in list_word:\n            try: dict_word[name_word] += 1\n            except: dict_word[name_word] = 1\n\n    list_sorted = sorted(dict_word.items(), key=lambda x: x[1], reverse=True)\n    dict_word = {}\n    for content in list_sorted:\n        dict_word[content[0]] = content[1]\n\n    return dict_word\n\ndef get_keys(dictionary, sort=False):\n    \n    tmplist = list(dictionary.keys())\n    if(sort): tmplist.sort()\n    \n    return tmplist\n\ndef show_dict(dictionary):\n    \n    for name_key in get_keys(dictionary):\n        print(\"%s: %.5f\" %(name_key, dictionary[name_key]))","ba2ee042":"dict_word = get_words(tmp_group)\nshow_dict(dict_word)","c327d8bd":"dict_inform = {\\\n    'NUM_GROUP': [],\\\n    'HEGHIT': [],\\\n    'WIDTH': [],\\\n    'CHANNEL': []}\n\nfor uniq_id in uniq_tr:\n    tmp_group = df_tr[df_tr['label_group'] == uniq_id]\n    dict_inform['NUM_GROUP'].append(tmp_group.shape[0])\n    \n    for idx in range(tmp_group.shape[0]):\n        tmp_path = os.path.join('..\/input\/shopee-product-matching\/train_images', tmp_group['image'].iloc[idx])\n        tmp_image = plt.imread(tmp_path)\n        h, w, c = tmp_image.shape\n        dict_inform['HEGHIT'].append(h)\n        dict_inform['WIDTH'].append(w)\n        dict_inform['CHANNEL'].append(c)\n    \nlist_key = list(dict_inform.keys())\nfor idx_key, name_key in enumerate(list_key):\n    print(\"* %s\" %(name_key))\n    print(\"MIN:\", np.min(dict_inform[name_key]))\n    print(\"MAX:\", np.max(dict_inform[name_key]))\n    print(\"AVG:\", np.average(dict_inform[name_key]))\n    \n    plt.figure(figsize=(8, 4))\n    plt.title(\"Histogram: %s\" %(name_key))\n    plt.hist(dict_inform[name_key])\n    plt.show()","729c3d2b":"dict_uniq = {}\nfor uniq_id in uniq_tr:\n    tmp_group = df_tr[df_tr['label_group'] == uniq_id]\n    dict_word = get_words(tmp_group)\n    val_sum = np.sum(list(dict_word.values()))\n    list_key = get_keys(dict_word)\n    for name_key in list_key:\n        dict_word[name_key] = float(dict_word[name_key] \/ val_sum)\n    \n    dict_uniq[uniq_id] = dict_word","bdd52f5b":"list_uniq = get_keys(dict_uniq, sort=True)\nfor idx_uniq, name_uniq in enumerate(list_uniq):\n    if(idx_uniq > 3): break\n    print(\"\\n* ID: %s\" %(name_uniq))\n    show_dict(dict_uniq[name_uniq])","325c3330":"dict_te = {}\nfor name_id in list(df_te['posting_id']):\n    dict_word = get_words(df_te[df_te['posting_id'] == name_id])\n    \n    print(\"\\n* ID: %s\" %(name_id))\n    val_sum = np.sum(list(dict_word.values()))\n    list_key = get_keys(dict_word)\n    for name_key in list_key:\n        dict_word[name_key] = float(dict_word[name_key] \/ val_sum)\n        \n    dict_te[name_id] = dict_word\n    show_dict(dict_te[name_id])","0c671f0b":"df_sb","90af978c":"list_te = get_keys(dict_te, sort=True)\nfor name_te in list_te:\n    list_word_te = get_keys(dict_te[name_te])\n    dict_socre = {}\n    for idx_uniq, name_uniq in enumerate(list_uniq):\n        dict_socre[name_uniq] = 0\n        list_word_tr = get_keys(dict_uniq[name_uniq])\n        \n        for idx_te, name_word_te in enumerate(list_word_te):\n            for idx_tr, name_word_tr in enumerate(list_word_tr):\n                if(name_word_te == name_word_tr):\n                    val_tr = dict_uniq[name_uniq][name_word_tr]\n                    val_te = dict_te[name_te][name_word_te]\n                    dict_socre[name_uniq] += val_tr * val_te\n\n    max_score = max(dict_socre.values())\n    list_score = get_keys(dict_socre, sort=True)\n    \n    group_te = df_te[df_te['posting_id'] == name_te]\n    path_te = os.path.join('..\/input\/shopee-product-matching\/test_images', group_te['image'].iloc[0])\n    image_te = plt.imread(path_te)\n    \n    plt.title(\"Test\")\n    plt.imshow(image_te)\n    plt.show()\n    plt.close()\n            \n    matches = \"\"\n    for idx_score, name_score in enumerate(list_score):\n        if(dict_socre[name_score] == max_score):\n            \n            group_tr = df_tr[df_tr['label_group'] == name_score]\n            for idx_tr in range(group_tr.shape[0]):\n                if(len(matches) == 0): matches = group_tr['posting_id'].iloc[idx_tr]\n                else: matches += \" %s\" %(group_tr['posting_id'].iloc[idx_tr])\n                    \n                path_tr = os.path.join('..\/input\/shopee-product-matching\/train_images', group_tr['image'].iloc[idx_tr])\n                image_tr = plt.imread(path_tr)\n\n                plt.title(\"Train: %s\" %(group_tr['image'].iloc[idx_tr]))\n                plt.imshow(image_tr)\n                plt.show()\n                plt.close()\n                \n    print(\"Test ID: %s\\nMached ID: %s\" %(name_te, matches))\n    df_sb.loc[df_sb['posting_id'] == name_te, 'matches'] = matches\n","948d3833":"df_sb","7f3e6c31":"df_sb.to_csv('submission.csv', index=False)","751d7f3b":"# 2. Exploration of Given Dataset\nSection 2 includes simple EDA for training and test procedure for this competition.\n1. CSV explocation\n2. Training set exploration  \n    2.1. Image presentation  \n    2.2. Word extraction  \n    2.3. Statistics of unique group  ","36f3a541":"# 0. Introduction\nWelcome to the competition 'Shopee - Price Match Guarantee'!  \nAlso, welcome to this source code.  \nThis source code provides a concise source code that allows users to submit results as simply as possible.  \nTry this source code and upvote if you like it!  \nHave a nice day, and good luck to you.","29065659":"Image of the training set.  \nEach image are saved with varied size.  \nIn this code block, the histogram for every channel is shown.","f5314d4c":"# 5. Make Submission","7c4915d6":"Aggregation of the each group.  \nAggregated information is following.  \n* NUM_GROUP: number of sample for each unique label group  \n* HEGHIT: height for each image\n* WIDTH: width for each image\n* CHANNEL: number of the channel for each image","d602c857":"Extracting the words from the title column of the df_tr (training set).  \nMoreover, in the following code block aggregates frequency of each word that extracted from the title.","627a1570":"## Show CSV","996c1a20":"# 3. Training (Word Embedding)","8d2a991e":"## Training Set\n1. Confirm the unique groups via applying 'label_group' key to df_tr (training data).  \n2. Present the varied information of the unique group.","a4c3ba7e":"# 4. Test","bb80fdad":"# 1. Preparation\nIn this section, we will prepare some of the python packages and define some of the python custom functions."}}