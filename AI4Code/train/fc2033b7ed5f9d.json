{"cell_type":{"25b16495":"code","6f71164a":"code","e0bee914":"code","1c75aa82":"code","f7138027":"code","4763d366":"code","0c4131f5":"code","33527819":"code","c055b47f":"code","2f1e9a81":"code","bdd4ce0a":"code","ffe5cef4":"code","72a47f66":"code","ac28b80b":"code","6e248457":"code","f56e757a":"code","8ecf5d1c":"code","4495cf34":"code","44ff94d4":"code","f876c0c6":"code","5afc0df4":"code","704ce9c7":"code","4c0db512":"code","964d4da3":"code","d5dc7b98":"code","0914af35":"code","a7a9faf0":"code","54fd6cf5":"code","86a816d0":"code","b95a9344":"code","97fc885e":"code","507b5601":"code","a4fdfe75":"code","da7b5a6e":"code","658424a0":"code","fa6ea2b1":"code","12fcd80c":"code","5861570c":"code","5d573a3e":"code","30b3bf6a":"code","4002d3b2":"code","628ac4b1":"code","8b6c80bd":"code","19dab904":"code","dcbb314e":"code","5e26a75c":"code","9bc45a26":"code","475697b1":"code","45c6956b":"code","a30374c8":"markdown","6ba33c0c":"markdown","50c7c006":"markdown","855cdb58":"markdown","5b0e28bf":"markdown","9c1c19ab":"markdown","f112adb1":"markdown","42b557ae":"markdown","67df136d":"markdown","33c7eec8":"markdown","d5742222":"markdown","6515bced":"markdown","78ebca68":"markdown","842b4306":"markdown","b1aea199":"markdown","2e8a082b":"markdown","bb8f82c3":"markdown","d882bfd2":"markdown","f632e78a":"markdown","616c8703":"markdown","f93bf1fd":"markdown","95cd385b":"markdown","5513cd5a":"markdown","cb76ffc6":"markdown","84c4dcf3":"markdown","aa98599e":"markdown","b360af81":"markdown","ac2d197a":"markdown","9434a3f2":"markdown","05b1623b":"markdown","c754bd0d":"markdown","208c5779":"markdown","e0f9466b":"markdown","47f91b01":"markdown","6bfece01":"markdown","6ea72578":"markdown","4e639500":"markdown","bb27217f":"markdown"},"source":{"25b16495":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\n\nplt.style.use('fivethirtyeight')","6f71164a":"games = pd.read_csv('..\/input\/nfl-big-data-bowl-2022\/games.csv')\ngames","e0bee914":"def downcast(df, verbose=True):\n    start_mem = df.memory_usage().sum() \/ 1024**2\n    for col in df.columns:\n        dtype_name = df[col].dtype.name\n        if dtype_name == 'object':\n            pass\n        elif dtype_name == 'bool':\n            df[col] = df[col].astype('int8')\n        elif dtype_name.startswith('int') or (df[col].round() == df[col]).all():\n            df[col] = pd.to_numeric(df[col], downcast='integer')\n        else:\n            df[col] = pd.to_numeric(df[col], downcast='float')\n    end_mem = df.memory_usage().sum() \/ 1024**2\n    if verbose:\n        print('{:.1f}% Compressed'.format(100 * (start_mem - end_mem) \/ start_mem))\n    \n    return df","1c75aa82":"games = downcast(games)","f7138027":"def resumetable(df):\n    print(f'Shape : {df.shape}')\n    summary = pd.DataFrame(df.dtypes, columns=['Data Type'])\n    summary = summary.reset_index()\n    summary = summary.rename(columns={'index': 'Feature'})\n    summary['Num of null'] = df.isnull().sum().values\n    summary['Num of unique'] = df.nunique().values\n    summary['First value'] = df.loc[0].values\n    summary['Second value'] = df.loc[1].values\n    summary['Third value'] = df.loc[2].values\n    return summary\n\nresumetable(games)","4763d366":"def write_percent(ax, total_size):\n    '''Traverse the figure object and display the ratio at the top of the bar graph.'''\n    for patch in ax.patches:\n        height = patch.get_height() # Figure height (number of data)\n        width = patch.get_width() # Figure width\n        left_coord = patch.get_x() # The x-axis position on the left edge of the figure\n        percent = height\/total_size*100 # percent\n        \n        # Type text in the (x, y) coordinates\n        ax.text(x=left_coord + width\/2.0, # x-axis position\n                y=height + total_size*0.001, # y-axis position\n                s=f'{percent:1.1f}%', # Text\n                ha='center') # in the middle","0c4131f5":"games['month'] = games['gameDate'].apply(lambda x: int(x.split('\/')[0]))\ngames['day'] = games['gameDate'].apply(lambda x: int(x.split('\/')[1]))\ngames['hour'] = games['gameTimeEastern'].apply(lambda x: int(x.split(':')[0]))","33527819":"mpl.rc('font', size=15) # Set font size\nplt.figure(figsize=(7, 6)) # Set figure size\n\nax = sns.countplot(x='season', data=games)\nwrite_percent(ax, len(games)) \nax.set_title('Number of games for season');","c055b47f":"mpl.rc('font', size=15)\nplt.figure(figsize=(8, 6))\n\nax = sns.countplot(x='month', data=games)\nwrite_percent(ax, len(games))\nax.set_title('Number of games for month');","2f1e9a81":"mpl.rc('font', size=12) \nplt.figure(figsize=(15, 7))\n\nax = sns.countplot(x='day', data=games)\nwrite_percent(ax, len(games))\nax.set_title('Number of games for day');","bdd4ce0a":"mpl.rc('font', size=12) \nplt.figure(figsize=(15, 7))\n\nax = sns.countplot(x='gameTimeEastern', data=games)\nwrite_percent(ax, len(games))\nax.set_title('Number of games for gameTimeEastern');\nax.tick_params('x', labelrotation=30) # rotate 30 degree of x label","ffe5cef4":"mpl.rc('font', size=12) \nplt.figure(figsize=(15, 7))\n\nax = sns.countplot(x='hour', data=games)\nwrite_percent(ax, len(games))\nax.set_title('Number of games for hour');","72a47f66":"mpl.rc('font', size=12) \nplt.figure(figsize=(15, 7))\n\nax = sns.countplot(x='week', data=games)\nwrite_percent(ax, len(games))\nax.set_title('Number of games for week');","ac28b80b":"players = pd.read_csv('..\/input\/nfl-big-data-bowl-2022\/players.csv')\nplayers","6e248457":"players = downcast(players)","f56e757a":"resumetable(players)","8ecf5d1c":"check = players['height'].str.split('-', expand=True)\n\ncheck.columns = ['first', 'second']\n\ncheck.loc[(check['second'].notnull()), 'first'] = check[check['second'].notnull()]['first'].astype(np.int16) * 12 + check[check['second'].notnull()]['second'].astype(np.int16)","4495cf34":"players['height'] = check['first']\nplayers['height'] = players['height'].astype(np.float32)\nplayers['height'] \/= 12\n\nplayers","44ff94d4":"mpl.rc('font', size=15) \nplt.figure(figsize=(10, 6))\n\nax = sns.distplot(players['height'], bins=12)\nax.set_title('Height Distribution');","f876c0c6":"mpl.rc('font', size=15) \nplt.figure(figsize=(10, 6))\n\nax = sns.distplot(players['weight'])\nax.set_title('Weight Distribution');","5afc0df4":"top_players_colleage = players['collegeName'].value_counts()[:20].reset_index()\ntop_players_colleage.columns = ['collageName', 'numberOfPlayers']","704ce9c7":"mpl.rc('font', size=10) \nplt.figure(figsize=(15, 12))\n\nax = sns.barplot(x='numberOfPlayers', y='collageName', data=top_players_colleage)\nax.set_title('Number of players for collegeName');","4c0db512":"players['birthYear'] = 0","964d4da3":"players.dropna(subset=['birthDate'], inplace=True)","d5dc7b98":"for idx, row in players.iterrows():\n    if len(row['birthDate'].split('\/')) == 3: # ex) 05\/17\/1994 \n        players.loc[idx, 'birthYear'] = row['birthDate'].split('\/')[2]\n        \n    elif len(row['birthDate'].split('-')) == 3: # ex) 1995-05-05\n        players.loc[idx, 'birthYear'] = row['birthDate'].split('-')[0]","0914af35":"mpl.rc('font', size=15) \nplt.figure(figsize=(10, 5))\n\nax = sns.distplot(players['birthYear'], bins=25)\nax.set_title('Players birth year Distribution');","a7a9faf0":"players['birthYear'].min(), players['birthYear'].max()","54fd6cf5":"plays = pd.read_csv('..\/input\/nfl-big-data-bowl-2022\/plays.csv')\n\nplays","86a816d0":"plays = downcast(plays)","b95a9344":"resumetable(plays)","97fc885e":"mpl.rc('font', size=12) \nplt.figure(figsize=(12, 6))\n\nax = sns.countplot(x='quarter', data=plays)\nwrite_percent(ax, len(plays))\nax.set_title('Number of plays of every quarter');","507b5601":"mpl.rc('font', size=12) \nplt.figure(figsize=(12, 6))\n\nax = sns.countplot(x='down', data=plays)\nwrite_percent(ax, len(plays))\nax.set_title('Number of plays of every down');","a4fdfe75":"mpl.rc('font', size=12) \nplt.figure(figsize=(12, 6))\n\nax = sns.countplot(x='yardsToGo', data=plays)\nax.set_title('Number of plays for every yards to go category');","da7b5a6e":"mpl.rc('font', size=15) \nplt.figure(figsize=(10, 5))\n\nax = sns.distplot(plays['playResult'], bins=25);\nax.set_title('playResult Distribution'); ","658424a0":"mpl.rc('font', size=15) \nplt.figure(figsize=(10, 5))\n\nax = sns.distplot(plays['preSnapHomeScore'], bins=12);\nax.set_title('preSnapHomeScore Distribution'); ","fa6ea2b1":"mpl.rc('font', size=15) \nplt.figure(figsize=(10, 5))\n\nax = sns.distplot(plays['preSnapVisitorScore'], bins=12);\nax.set_title('preSnapVisitorScore Distribution'); ","12fcd80c":"tracking2018 = pd.read_csv('..\/input\/nfl-big-data-bowl-2022\/tracking2018.csv')\ntracking2018.head()","5861570c":"tracking2018 = downcast(tracking2018)","5d573a3e":"fig, ax = plt.subplots(figsize=(12, 8))\ntracking2018.query('gameId == 2018123000 and playId == 36').groupby('team') \\\n    .plot(x='x', y='y', ax=ax, style='.')\nplt.legend().remove();","30b3bf6a":"fig, ax = plt.subplots(figsize=(12, 8))\ntracking2018.query('gameId == 2018091001 and playId == 4033').groupby('team') \\\n    .plot(x='x', y='y', ax=ax, style='.')\nplt.legend().remove();","4002d3b2":"fig, ax = plt.subplots(figsize=(12, 8))\ntracking2018.query('gameId == 2018091609 and position == \"CB\"').groupby('team') \\\n    .plot(x='x', y='y', ax=ax, style='.')\nplt.legend().remove();","628ac4b1":"fig, ax = plt.subplots(figsize=(12, 8))\ntracking2018.query('gameId == 2018091609 and position == \"LB\"').groupby('team') \\\n    .plot(x='x', y='y', ax=ax, style='.')\nplt.legend().remove();","8b6c80bd":"fig, ax = plt.subplots(figsize=(12, 8))\ntracking2018.query('gameId == 2018091609 and position == \"RB\"').groupby('team') \\\n    .plot(x='x', y='y', ax=ax, style='.')\nplt.legend().remove();","19dab904":"import matplotlib.patches as patches\nfrom matplotlib.patches import Arc\nfrom matplotlib import pyplot as plt\nimport matplotlib.patches as mpatches\n\n# Change size of the figure\nplt.rcParams['figure.figsize'] = [12, 8]\ndef drawPitch(width, height, color=\"w\"):\n    fig = plt.figure()\n    ax = plt.axes(xlim=(-10, width + 30), ylim=(-15, height + 5))\n    plt.axis('off')\n\n    # Grass around pitch\n    rect = patches.Rectangle((-10, -5), width + 40, height + 10, linewidth=1, facecolor='#3f995b', capstyle='round')\n    ax.add_patch(rect)\n    ###################\n\n    # Pitch boundaries\n    rect = plt.Rectangle((0, 0), width + 20, height, ec=color, fc=\"None\", lw=2)\n    ax.add_patch(rect)\n    ###################\n\n    # vertical lines - every 5 yards\n    for i in range(21):\n        plt.plot([10 + 5 * i, 10 + 5 * i], [0, height], c=\"w\", lw=2)\n    ###################\n        \n    # distance markers - every 10 yards\n    for yards in range(10, width, 10):\n        yards_text = yards if yards <= width \/ 2 else width - yards\n        # top markers\n        plt.text(10 + yards - 2, height - 7.5, yards_text, size=15, c=\"w\", weight=\"bold\")\n        # botoom markers\n        plt.text(10 + yards - 2, 7.5, yards_text, size=15, c=\"w\", weight=\"bold\", rotation=180)\n    ###################\n\n    # yards markers - every yard\n    # bottom markers\n    for x in range(20):\n        for j in range(1, 5):\n            plt.plot([10 + x * 5 + j, 10 + x * 5 + j], [1, 3], color=\"w\", lw=2)\n\n    # top markers\n    for x in range(20):\n        for j in range(1, 5):\n            plt.plot([10 + x * 5 + j, 10 + x * 5 + j], [height - 1, height - 3], color=\"w\", lw=2)\n\n    # middle bottom markers\n    y = (height - 18.5) \/ 2\n    for x in range(20):\n        for j in range(1, 5):\n            plt.plot([10 + x * 5 + j, 10 + x * 5 + j], [y, y + 2], color=\"w\", lw=2)\n\n    # middle top markers\n    for x in range(20):\n        for j in range(1, 5):\n            plt.plot([10 + x * 5 + j, 10 + x * 5 + j], [height - y, height - y - 2], color=\"w\", lw=2)\n    ###################\n\n    # draw home end zone\n    plt.text(2.5, (height - 15) \/ 2, \"HOME\", size=30, c=\"w\", weight=\"bold\", rotation=90)\n    rect = plt.Rectangle((0, 0), 10, height, ec=color, fc=\"#0064dc\", lw=2)\n    ax.add_patch(rect)\n\n    # draw away end zone    \n    plt.text(111, (height - 15) \/ 2, \"AWAY\", size=30, c=\"w\", weight=\"bold\", rotation=-90)\n    rect = plt.Rectangle((width + 10, 0), 10, height, ec=color, fc=\"#c80014\", lw=2)\n    ax.add_patch(rect)\n    ###################\n    \n    # draw extra spot point\n    # left\n    y = (height - 3) \/ 2\n    plt.plot([10 + 2, 10 + 2], [y, y + 3], c=\"w\", lw=2)\n    \n    # right\n    plt.plot([width + 10 - 2, width + 10 - 2], [y, y + 3], c=\"w\", lw=2)\n    ###################\n    \n    # draw goalpost\n    goal_width = 6 # yards\n    y = (height - goal_width) \/ 2\n    # left\n    plt.plot([0, 0], [y, y + goal_width], \"-\", c=\"y\", lw=10, ms=20)\n    # right\n    plt.plot([width + 20, width + 20], [y, y + goal_width], \"-\", c=\"y\", lw=10, ms=20)\n    \n    return fig, ax","dcbb314e":" fig, ax = drawPitch(100, 53.3)","5e26a75c":"games_ids = {}\ngames_tracking2018 = tracking2018.groupby(by=[\"gameId\"])\nfor game, data in games_tracking2018:\n    games_ids[game] = list(set(data.playId.tolist()))","9bc45a26":"def extract_one_game(game_id, play_id, df):\n    game = df[(df.gameId == game_id) & (df.playId == play_id)]\n    home = {}\n    away = {}\n    balls = []\n    \n    players = game.sort_values(['frameId'], ascending=True).groupby('nflId')\n    for id, dx in players:\n        jerseyNumber = int(dx.jerseyNumber.iloc[0])\n        if dx.team.iloc[0] == \"home\":\n            home[jerseyNumber] = list(zip(dx.x.tolist(), dx.y.tolist()))\n        elif dx.team.iloc[0] == \"away\":\n            away[jerseyNumber] = list(zip(dx.x.tolist(), dx.y.tolist()))\n\n\n    ball_df = game.sort_values(['frameId'], ascending=True) \n    ball_df = ball_df[ball_df.team == \"football\"]\n    balls = list(zip(ball_df.x.tolist(), ball_df.y.tolist()))\n    return home, away, balls","475697b1":"from matplotlib import animation\nfrom IPython.display import HTML\ndef animate_one_play(game_id, play_id, df):\n    fig, ax = drawPitch(100, 53.3)\n    \n    home, away, balls = extract_one_game(game_id, play_id, df)\n\n    team_left, = ax.plot([], [], 'o', markersize=20, markerfacecolor=\"r\", markeredgewidth=2, markeredgecolor=\"white\", zorder=7)\n    team_right, = ax.plot([], [], 'o', markersize=20, markerfacecolor=\"b\", markeredgewidth=2, markeredgecolor=\"white\", zorder=7)\n    ball, = ax.plot([], [], 'o', markersize=10, markerfacecolor=\"black\", markeredgewidth=2, markeredgecolor=\"white\", zorder=7)\n    drawings = [team_left, team_right, ball]\n\n    def init():\n        team_left.set_data([], [])\n        team_right.set_data([], [])\n        ball.set_data([], [])\n        return drawings\n\n    def draw_teams(i):\n        X = []\n        Y = []\n        for k, v in home.items():\n            x, y = v[i]\n            X.append(x)\n            Y.append(y)\n        team_left.set_data(X, Y)\n        \n        X = []\n        Y = []\n        for k, v in away.items():\n            x, y = v[i]\n            X.append(x)\n            Y.append(y)\n        team_right.set_data(X, Y)\n\n    def animate(i):\n        draw_teams(i)\n        \n        x, y = balls[i]\n        ball.set_data([x, y])\n        return drawings\n    \n    # !May take a while!\n    anim = animation.FuncAnimation(fig, animate, init_func=init,\n                                   frames=len(balls), interval=100, blit=True)\n\n    return HTML(anim.to_html5_video())","45c6956b":"animate_one_play(2018123000, 36, tracking2018)","a30374c8":"Downcast is a great skill to compress data size which helps to save memory.","6ba33c0c":"#### gameId == 2018091001 and playId == 4033","50c7c006":"#### gameId == 2018091609 and position == \"CB\"","855cdb58":"<a id=\"3\"><\/a>\n<h2 style='background:transparent; border:0; color:black'><center>3. Play Data<center><h2>","5b0e28bf":"## Function for making feature summary ","9c1c19ab":"preSnapHomeScore: Home score prior to the play (numeric)","f112adb1":"<a id=\"2\"><\/a>\n<h2 style='background:transparent; border:0; color:black'><center>2. Player Data<center><h2>","42b557ae":"## Function for Downcast","67df136d":"## Data Visualization","33c7eec8":"#### 2018123000 and playId == 36","d5742222":"### This is very simple EDA notebook. I have lots of things to analyze so that I'll keep updating.","6515bced":"#### As the years go by, the number of games increases","78ebca68":"#### gameId == 2018091609 and position == \"RB\"","842b4306":"#### The game was held from September to January. There are especially many games in December, and they are rarely held in January","b1aea199":"#### There are lots of null values in `returnerld`, `kickBlockerId`, `penaltyCodes`, `penaltyJerseyNumbers`, `penaltyYards`, `passResult`, `kickReturnYardage` features","2e8a082b":"playResult: Net yards gained by the offense, including penalty yardage (numeric)","bb8f82c3":"# Upvote is Free \ud83e\udd17\n### PLEASE UPVOTE if you like this notebook. It will keep me motivated to update my notebook.","d882bfd2":"This function is taken from the post created by JARON_MICHAL. See the post [here](https:\/\/www.kaggle.com\/jaronmichal\/tracking-data-visualization)","f632e78a":"#### gameId == 2018091609 and position == \"LB\"","616c8703":"#### Those born in 1995 are the most common","f93bf1fd":"### **Game data:** The games.csv contains the teams playing in each game. The key variable is gameId.\n\n* **gameId:** Game identifier, unique (numeric)\n\n* **gameDate:** Game Date (time, mm\/dd\/yyyy)\n\n* **gameTimeEastern:** Start time of game (time, HH:MM:SS, EST)\n\n* **homeTeamAbbr:** Home team three-letter code (text)\n\n* **visitorTeamAbbr:** Visiting team three-letter code (text)\n\n* **week:** Week of game (numeric)","95cd385b":"#### The oldest player was born in 1972, and the youngest player was born in 1999","5513cd5a":"Extract birth year","cb76ffc6":"<h1><center>NFL Big Data Bowl Basic EDA for beginner<\/center><\/h1>\n\n<center><img src=\"https:\/\/deadline.com\/wp-content\/uploads\/2021\/01\/NFL-ball.jpg?crop=0px%2C33px%2C1226px%2C687px&resize=681%2C383\"><\/center>","84c4dcf3":"## Function to create animation","aa98599e":"## Make derivative features (month, day, hour)","b360af81":"### Convert all heights to feet","ac2d197a":"## Function to create football field\n","9434a3f2":"### **Play data:** The plays.csv file contains play-level information from each game. The key variables are gameId and playId\n- gameId: Game identifier, unique (numeric)\n- playId: Play identifier, not unique across games (numeric)\n- playDescription: Description of play (text)\n- quarter: Game quarter (numeric)\n- down: Down (numeric)\n- yardsToGo: Distance needed for a first down (numeric)\n- possessionTeam: Team punting, placekicking or kicking off the ball (text)\n- specialTeamsPlayType: Formation of play: Extra Point, Field Goal, Kickoff or Punt (text)\n- specialTeamsPlayResult: Special Teams outcome of play dependent on play type: Blocked Kick Attempt, Blocked Punt, Downed, Fair Catch, Kick Attempt Good, Kick Attempt No Good, Kickoff Team Recovery, Muffed, Non-Special Teams Result, Out of Bounds, Return or Touchback (text)\n- kickerId: nflId of placekicker, punter or kickoff specialist on play (numeric)\n- returnerId: nflId(s) of returner(s) on play if there was a special teams return. Multiple returners on a play are separated by a ; (text)\n- kickBlockerId: nflId of blocker of kick on play if there was a blocked field goal or blocked punt (numeric)\n- yardlineSide: 3-letter team code corresponding to line-of-scrimmage (text)\n- yardlineNumber: Yard line at line-of-scrimmage (numeric) \n- gameClock: Time on clock of play (MM:SS)\n- penaltyCodes: NFL categorization of the penalties that occurred on the play. Multiple penalties on a play are separated by a ; (text)\n- penaltyJerseyNumber: Jersey number and team code of the player committing each penalty. Multiple penalties on a play are separated by a ; (text)\n- penaltyYards: yards gained by possessionTeam by penalty (numeric)\n- preSnapHomeScore: Home score prior to the play (numeric)\n- preSnapVisitorScore: Visiting team score prior to the play (numeric)\n- passResult: Scrimmage outcome of the play if specialTeamsPlayResult is \"Non-Special Teams Result\" (C: Complete pass, I: Incomplete pass, S: Quarterback sack, IN: Intercepted pass, R: Scramble, ' ': Designed Rush, text)\n- kickLength: Kick length in air of kickoff, field goal or punt (numeric)\n- kickReturnYardage: Yards gained by return team if there was a return on a kickoff or punt (numeric)\n- playResult: Net yards gained by the kicking team, including penalty yardage (numeric)\n- absoluteYardlineNumber: Location of ball downfield in tracking data coordinates (numeric)","05b1623b":"### **Player data:** The players.csv file contains player-level information from players that participated in any of the tracking data files. The key variable is nflId\n\n* **nflId:** Player identification number, unique across players (numeric)\n\n* **height:** Player height (text)\n\n* **weight:** Player weight (numeric)\n\n* **birthDate:** Date of birth (YYYY-MM-DD)\n\n* **collegeName:** Player college (text)\n\n* **position:** Player position (text)\n\n* **displayName:** Player name (text)","c754bd0d":"<a id=\"1\"><\/a>\n<h2 style='background:transparent; color:black'><center>1. Game Data<center><h2>","208c5779":"### Create birth year feature","e0f9466b":"#### The most games were held at 1, 4, and 8","47f91b01":"## Function for writing percent at the top of the bar graph","6bfece01":"<a id=\"3\"><\/a>\n<h2 style='background:transparent; border:0; color:black'><center>4. Tracking Data<center><h2>","6ea72578":"There are NA values in birthDate so that we should drop them","4e639500":"preSnapVisitorScore: Visiting team score prior to the play (numeric)","bb27217f":"This function is taken from the post created by ROB MULLA. See the post [here](https:\/\/www.kaggle.com\/robikscube\/nfl-big-data-bowl-2022-twitch-stream-eda). Thank you ROB MULLA :)"}}