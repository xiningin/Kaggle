{"cell_type":{"60787b0a":"code","fa306d78":"code","c1b06419":"code","2fd1e38e":"code","7f9bb1a5":"code","a2237cf7":"code","23f4d768":"code","162201bd":"code","57f0432f":"code","981d7bf9":"code","64c415de":"code","aa4d3b10":"code","69772051":"code","9d861601":"code","2cdf465f":"code","7ed2ca05":"code","985eb0ca":"code","587e6006":"code","ebf616f5":"code","c1bfac3f":"code","317f84e9":"code","a2cec399":"code","234ea339":"code","a77f4705":"code","e6782c5b":"code","38aad149":"code","59085988":"markdown","4dba6b57":"markdown","7bed28ba":"markdown"},"source":{"60787b0a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","fa306d78":"from mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt # plotting\nimport numpy as np # linear algebra\nimport os # accessing directory structure\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)","c1b06419":"\n# Distribution graphs (histogram\/bar graph) of column data\ndef plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n    nunique = df.nunique()\n    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\n    nRow, nCol = df.shape\n    columnNames = list(df)\n    nGraphRow = (nCol + nGraphPerRow - 1) \/ nGraphPerRow\n    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n    for i in range(min(nCol, nGraphShown)):\n        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n        columnDf = df.iloc[:, i]\n        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n            valueCounts = columnDf.value_counts()\n            valueCounts.plot.bar()\n        else:\n            columnDf.hist()\n        plt.ylabel('counts')\n        plt.xticks(rotation = 90)\n        plt.title(f'{columnNames[i]} (column {i})')\n    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)\n    plt.show()","2fd1e38e":"# Correlation matrix\ndef plotCorrelationMatrix(df, graphWidth):\n    filename = df.dataframeName\n    df = df.dropna('columns') # drop columns with NaN\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    if df.shape[1] < 2:\n        print(f'No correlation plots shown: The number of non-NaN or constant columns ({df.shape[1]}) is less than 2')\n        return\n    corr = df.corr()\n    plt.figure(num=None, figsize=(graphWidth, graphWidth), dpi=80, facecolor='w', edgecolor='k')\n    corrMat = plt.matshow(corr, fignum = 1)\n    plt.xticks(range(len(corr.columns)), corr.columns, rotation=90)\n    plt.yticks(range(len(corr.columns)), corr.columns)\n    plt.gca().xaxis.tick_bottom()\n    plt.colorbar(corrMat)\n    plt.title(f'Correlation Matrix for {filename}', fontsize=15)\n    plt.show()","7f9bb1a5":"\n# Scatter and density plots\ndef plotScatterMatrix(df, plotSize, textSize):\n    df = df.select_dtypes(include =[np.number]) # keep only numerical columns\n    # Remove rows and columns that would lead to df being singular\n    df = df.dropna('columns')\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    columnNames = list(df)\n    if len(columnNames) > 10: # reduce the number of columns for matrix inversion of kernel density plots\n        columnNames = columnNames[:10]\n    df = df[columnNames]\n    ax = pd.plotting.scatter_matrix(df, alpha=0.75, figsize=[plotSize, plotSize], diagonal='kde')\n    corrs = df.corr().values\n    for i, j in zip(*plt.np.triu_indices_from(ax, k = 1)):\n        ax[i, j].annotate('Corr. coef = %.3f' % corrs[i, j], (0.8, 0.2), xycoords='axes fraction', ha='center', va='center', size=textSize)\n    plt.suptitle('Scatter and Density Plot')\n    plt.show()","a2237cf7":"nRowsRead = 1000 # specify 'None' if want to read whole file\ndf1 = pd.read_csv('..\/input\/cusersmarildownloadsmastercsv\/master.csv', delimiter=';', nrows = nRowsRead)\ndf1.dataframeName = 'master.csv'\nnRow, nCol = df1.shape\nprint(f'There are {nRow} rows and {nCol} columns')","23f4d768":"df1.head(5)","162201bd":"df1.shape","57f0432f":"df1.info","981d7bf9":"df1.describe()","64c415de":"plotPerColumnDistribution(df1, 10, 5)","aa4d3b10":"plotCorrelationMatrix(df1, 8)","69772051":"plotScatterMatrix(df1, 15, 10)","9d861601":"df1.annee.describe()","2cdf465f":"df1.taux_de_chomage_national.describe()","7ed2ca05":"df1.salaire_net_mensuel_median_national.describe()","985eb0ca":"\nprint (\"Skew is:\", df1.salaire_net_mensuel_median_national.skew())\nplt.hist(df1.salaire_net_mensuel_median_national, color='blue')\nplt.show()","587e6006":"target = np.log(df1.salaire_net_mensuel_median_national)\nprint (\"Skew is:\", target.skew())\nplt.hist(target, color='blue')\nplt.show()","ebf616f5":"numeric_features = df1.select_dtypes(include=[np.number])\nnumeric_features.dtypes","c1bfac3f":"corr = numeric_features.corr()\n\nprint (corr['salaire_net_mensuel_median_national'].sort_values(ascending=False)[1:11], '\\n')\nprint (corr['salaire_net_mensuel_median_national'].sort_values(ascending=False)[-10:])","317f84e9":"# How many unique features are there?\n\ndf1.secteur_indus.unique()","a2cec399":"\n#Define a function which can pivot and plot the intended aggregate function \ndef pivotandplot(data,variable,onVariable,aggfunc):\n    pivot_var = data.pivot_table(index=variable,\n                                  values=onVariable, aggfunc=aggfunc)\n    pivot_var.plot(kind='bar', color='blue')\n    plt.xlabel(variable)\n    plt.ylabel(onVariable)\n    plt.xticks(rotation=0)\n    plt.show()","234ea339":"pivotandplot(df1,'secteur_indus','salaire_net_mensuel_median_national',np.median)","a77f4705":"# numpy, matplotlib, seaborn\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('whitegrid')\n%matplotlib inline","e6782c5b":"# It is a continous variable and hence lets look at the relationship of GrLivArea with SalePrice using a Regression plot\n\n_ = sns.regplot(df1['secteur_indus'], df1['salaire_net_mensuel_median_national'])","38aad149":"df1 = df1.drop(df1[(df1['secteur_info']>4000) & (df1['salaire_net_mensuel_median_national']<300000)].index)\n_ = sns.regplot(df1['secteur_info'], df1['salaire_net_mensuel_median_national'])","59085988":"Thank's to Kaggle's bot. I'm just a copier and paster! ","4dba6b57":"It takes me \"only\" 1:38 min. to run these codes.","7bed28ba":"SAGAR thank you so much. I copied your codes in Housing Prices competition for Kaggle learn users. So I left Saleprice in comments code above TO REMENBER ME that I'm just in a \"copy level\" kerneler (and sometimes I do it wrong, even doing ctrl+C plus ctrl+V)  "}}