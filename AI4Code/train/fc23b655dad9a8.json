{"cell_type":{"12479c51":"code","bb40fd85":"code","e83e0554":"code","8fe7474b":"code","a35759d6":"code","a78e940e":"code","aa0b2d9c":"code","754760e3":"code","b985928c":"code","e2ed18d8":"code","d420c97a":"code","dd23ccc4":"code","a59ab469":"code","6d3b856f":"code","8db85a89":"code","76a08202":"code","5f28438f":"code","e472529e":"code","132b5f3c":"code","43b59b5a":"code","48ffa684":"code","824dea3c":"code","b989ebc1":"code","26f2698d":"code","b5b61cb6":"code","0b1bc273":"code","f3148368":"code","eceef748":"code","3cc90c68":"code","1f0868f5":"code","e063549a":"code","815959ea":"code","31f03c66":"code","0d6ec019":"code","afa0d783":"code","e5d1f906":"code","856b10b2":"code","124b1415":"code","516d2d02":"code","18d7c8f7":"code","d0541eb1":"code","d5fa8d50":"code","a0cc2172":"code","834c201d":"code","989c8a84":"code","3f8074a9":"code","e6c5fd5a":"code","1305ff91":"code","ab216258":"code","3ae4b6d5":"code","a6e15f68":"code","4545d9b2":"code","3bd10daf":"code","d693efac":"code","e6b6f45b":"code","14ba0c4c":"code","5e13e0c8":"markdown","402e46d2":"markdown","781a871b":"markdown","3187e196":"markdown","e009bcbf":"markdown","262cc929":"markdown","0563baf1":"markdown","f4723380":"markdown","755af543":"markdown","cf34844e":"markdown","9d78fd99":"markdown","504966e1":"markdown","8f3dc1fc":"markdown","1e45f7b9":"markdown","0f578c8c":"markdown","5496355f":"markdown","6ee0baac":"markdown","09abb4fa":"markdown","58dda603":"markdown","90c86163":"markdown","32c03fea":"markdown","1f05d3c3":"markdown","dbf67f4e":"markdown","a0cccd0b":"markdown","a47cf8b5":"markdown","eb6272e9":"markdown","9a4c4afc":"markdown","731b9e6a":"markdown","ab6c44aa":"markdown","29d932cc":"markdown","f2dbe85b":"markdown","2a97fcab":"markdown","4ee41833":"markdown","6919660f":"markdown","c92faa3a":"markdown","75f82910":"markdown","5f74a95c":"markdown","7d12ded1":"markdown","76a131c0":"markdown","cce2e8ea":"markdown","858dc04d":"markdown","15f12843":"markdown","d7adecad":"markdown","524f27e4":"markdown","661bba00":"markdown","5fda38bd":"markdown","e5a6a4ce":"markdown","a66cb8e2":"markdown","16ff4ec7":"markdown","5537db08":"markdown","6d15b6ed":"markdown","60243975":"markdown","4627fb77":"markdown","4bea6d96":"markdown","0989e1ef":"markdown","19879317":"markdown","7020d032":"markdown","56274890":"markdown"},"source":{"12479c51":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom scipy import stats\n\n%matplotlib inline  \n# it will make your plot outputs appear and be stored within the notebook, you don't need to use plt.show() everytime.\nsns.set_style(\"whitegrid\") \n# The style parameters control properties like the color of the background and whether a grid is enabled by default.\n# plt.style.use(\"fivethirtyeight\") \n","bb40fd85":"data = pd.read_csv(\"\/kaggle\/input\/heart-disease-uci\/heart.csv\")","e83e0554":"data.sample(frac=0.01)  # or data.sample(5)","8fe7474b":"plt.figure(figsize=(10,6))","a35759d6":"# pip install missingno","a78e940e":"import missingno as msno","aa0b2d9c":"msno.matrix(data)","754760e3":"# f,ax=plt.subplots(1,2,figsize=(18,8))\nsns.countplot('target',data=data)\n# ax.set_title('Count of people')","b985928c":"# using pandas\n# data['target'].value_counts().plot(kind='bar', title =\"Disease and no disease\", figsize=(15, 10), legend=True, fontsize=12)\n# ax.set_xlabel(\"Hour\", fontsize=12)\n# ax.set_ylabel(\"V\", fontsize=12)\n# plt.show()","e2ed18d8":"plt.figure(figsize=(5,5))\ncounts = data[\"target\"].value_counts()\nplt.bar(counts.index, counts.values)\nplt.xticks(rotation=90)\nplt.xlabel('Target values')\nplt.ylabel('Count')\nplt.title(\"Frequency of people having heart issue\")\nplt.show()","d420c97a":"fig, ax = plt.subplots(2,1,figsize=(16, 6))\n# type 1 : use hue parameter\nsns.countplot(x='sex', data=data, hue='target', palette='Set1', alpha=0.7, ax=ax[0])\nplt.legend()\nplt.xticks(rotation='vertical')\n\n#type 2: use value_counts + barplot \/ hard to divide like hue \nsns.barplot(x=data['sex'].value_counts().index, y=data['sex'].value_counts(), ax=ax[1])\nplt.show()","dd23ccc4":"fig, ax = plt.subplots(2,1,figsize=(16, 6))\n# type 1 : use hue parameter\nsns.countplot(x='cp', data=data, hue='target', palette='Set1', alpha=0.7, ax=ax[0])\nplt.legend()\nplt.xticks(rotation='vertical')\n\n#type 2: use value_counts + barplot \/ hard to divide like hue \nsns.barplot(x=data['cp'].value_counts().index, y=data['cp'].value_counts(), ax=ax[1])\nplt.show()","a59ab469":"fig, ax = plt.subplots(2,1,figsize=(16, 6))\n# type 1 : use hue parameter\nsns.countplot(x='ca', data=data, hue='target', palette='Set1', alpha=0.7, ax=ax[0])\nplt.legend()\nplt.xticks(rotation='vertical')\n\n#type 2: use value_counts + barplot \/ hard to divide like hue \nsns.barplot(x=data['ca'].value_counts().index, y=data['ca'].value_counts(), ax=ax[1])\nplt.show()","6d3b856f":"fig, ax = plt.subplots(2,1,figsize=(16, 6))\n# type 1 : use hue parameter\nsns.countplot(x='slope', data=data, hue='target', palette='Set1', alpha=0.7, ax=ax[0])\nplt.legend()\nplt.xticks(rotation='vertical')\n\n#type 2: use value_counts + barplot \/ hard to divide like hue \nsns.barplot(x=data['slope'].value_counts().index, y=data['slope'].value_counts(), ax=ax[1])\nplt.show()","8db85a89":"fig, ax = plt.subplots(2,1,figsize=(16, 6))\n# type 1 : use hue parameter\nsns.countplot(x='fbs', data=data, hue='target', palette='Set1', alpha=0.7, ax=ax[0])\nplt.legend()\nplt.xticks(rotation='vertical')\n\n#type 2: use value_counts + barplot \/ hard to divide like hue \nsns.barplot(x=data['fbs'].value_counts().index, y=data['fbs'].value_counts(), ax=ax[1])\nplt.show()","76a08202":"fig, ax = plt.subplots(2,1,figsize=(16, 6))\n# type 1 : use hue parameter\nsns.countplot(x='restecg', data=data, hue='target', palette='Set1', alpha=0.7, ax=ax[0])\nplt.legend()\nplt.xticks(rotation='vertical')\n\n#type 2: use value_counts + barplot \/ hard to divide like hue \nsns.barplot(x=data['restecg'].value_counts().index, y=data['restecg'].value_counts(), ax=ax[1])\nplt.show()","5f28438f":"fig, ax = plt.subplots(2,1,figsize=(16, 6))\n# type 1 : use hue parameter\nsns.countplot(x='exang', data=data, hue='target', palette='Set1', alpha=0.7, ax=ax[0])\nplt.legend()\nplt.xticks(rotation='vertical')\n\n#type 2: use value_counts + barplot \/ hard to divide like hue \nsns.barplot(x=data['exang'].value_counts().index, y=data['exang'].value_counts(), ax=ax[1])\nplt.show()","e472529e":"fig, ax = plt.subplots(2,1,figsize=(16, 6))\n# type 1 : use hue parameter\nsns.countplot(x='thal', data=data, hue='target', palette='Set1', alpha=0.7, ax=ax[0])\nplt.legend()\nplt.xticks(rotation='vertical')\n\n#type 2: use value_counts + barplot \/ hard to divide like hue \nsns.barplot(x=data['thal'].value_counts().index, y=data['thal'].value_counts(), ax=ax[1])\nplt.show()","132b5f3c":"plt.hist(data['age'])\nplt.xlabel('Age')\nplt.ylabel('Count')\nplt.title('Age distribution.')","43b59b5a":"fig, ax = plt.subplots(1,1,figsize=(16, 6))\nsns.distplot(data['chol'])\nplt.show()\n\n# By default rugplot is False","48ffa684":"fig, ax = plt.subplots(1,1,figsize=(16, 6))\nsns.distplot(data['chol'], kde=False)\nplt.show()","824dea3c":"fig, ax = plt.subplots(1,1,figsize=(16, 6))\nsns.distplot(data['chol'], hist=False,rug=True, rug_kws={'height':0.15})\nplt.show()","b989ebc1":"# type 1 : default view\nfig, ax = plt.subplots(1,1,figsize=(16, 6))\nsns.kdeplot(data['chol'])\nplt.show()","26f2698d":"# type 2 : draw 2 graph with label\nfig, ax = plt.subplots(1,1,figsize=(16, 6))\nsns.kdeplot(data[data['sex']==0]['thalach'], color='purple', ax=ax, label='female')\nsns.kdeplot(data[data['sex']==1]['thalach'], color='orange', ax=ax, label='male')\nplt.xticks(rotation='vertical')\nplt.legend()\nplt.show()","b5b61cb6":"g = data.groupby('fbs')\nsugar = g.get_group(1)\nno_sugar=g.get_group(0)\n\nfig, ax = plt.subplots()\n\nax = sns.kdeplot(data=sugar['chol'], label='sugar and thalach', ax=ax)\nax = sns.kdeplot(data=no_sugar['chol'], label='less sugar and thalach', ax=ax, shade=True)\n\nplt.legend()","0b1bc273":"g = data.groupby('fbs')\nsugar = g.get_group(1)\nno_sugar=g.get_group(0)\n\nfig, ax = plt.subplots()\n\nax = sns.kdeplot(data=sugar['age'], label='sugar and thalach', ax=ax)\nax = sns.kdeplot(data=no_sugar['age'], label='less sugar and thalach', ax=ax, shade=True)\n\nplt.legend()","f3148368":"# type 2 : draw 2 graph with label\nfig, ax = plt.subplots(1,1,figsize=(16, 6))\nsns.kdeplot(data[data['target']==0]['thalach'], color='purple', ax=ax, label='No heart disease')\nsns.kdeplot(data[data['target']==1]['thalach'], color='orange', ax=ax, label='Heart Disease')\nplt.xticks(rotation='vertical')\nplt.legend()\nplt.show()","eceef748":"# type 2 : draw 2 graph with label\nfig, ax = plt.subplots(1,1,figsize=(16, 6))\nsns.kdeplot(data[data['target']==0]['age'], color='purple', ax=ax, label='No heart disease')\nsns.kdeplot(data[data['target']==1]['age'], color='orange', ax=ax, label='Heart Disease')\n\n# avg line\nplt.axvline(data[data['target']==0]['age'].mean(), color='purple')\nplt.axvline(data[data['target']==1]['age'].mean(), color='orange')\n\nplt.xticks(rotation='vertical')\nplt.legend()\nplt.show()","3cc90c68":"fig_ax = sns.histplot(data=data, x='age', hue='target')","1f0868f5":"# fig, ax = plt.subplots(1,1,figsize=(16, 6))\nsns.displot(data=data, x='trestbps',kde='True',hue='sex')   # ,kind='hist'\nplt.show()","e063549a":"# fig, ax = plt.subplots(1,1,figsize=(16, 6))\nsns.displot(data=data, x='thalach',kde='True',hue='cp')   # ,kind='hist'\nplt.show()","815959ea":"# fig, ax = plt.subplots(1,1,figsize=(16, 6))\nsns.displot(data=data, x='thalach',kde='True',hue='cp',col='cp')   # ,kind='hist'\nplt.show()","31f03c66":"# fig, ax = plt.subplots(1,1,figsize=(16, 6))\nsns.displot(data=data, x='trestbps',y='age')   # ,kind='hist',hue='sex'\nplt.show()","0d6ec019":"# fig, ax = plt.subplots(1,1,figsize=(16, 6))\nsns.displot(data=data, x='trestbps',y='age',hue='target')   # ,kind='hist'\nplt.show()","afa0d783":"# fig, ax = plt.subplots(1,1,figsize=(16, 6))\nsns.displot(data=data, x='trestbps',y='age',hue='target',col='target')   # ,kind='hist'\nplt.show()","e5d1f906":"# fig, ax = plt.subplots(1,1,figsize=(16, 6))\nsns.displot(data=data, x='chol',y='age',hue='target',col='target')   # ,kind='hist'\nplt.show()","856b10b2":"# type 2 : draw 2 graph with label\nfig, ax = plt.subplots(1,1,figsize=(16, 6))\nsns.kdeplot(data[data['target']==0]['thalach'], color='purple', ax=ax, label='No heart disease')\nsns.kdeplot(data[data['target']==1]['thalach'], color='orange', ax=ax, label='Heart Disease')\n\n# avg line\nplt.axvline(data[data['target']==0]['thalach'].mean(), color='purple')\nplt.axvline(data[data['target']==1]['thalach'].mean(), color='orange')\n\n\nplt.xticks(rotation='vertical')\nplt.legend()\nplt.show()","124b1415":"# type 2 : draw 2 graph with label\nfig, ax = plt.subplots(1,1,figsize=(16, 6))\nsns.kdeplot(data[data['sex']==0]['thalach'], color='purple', ax=ax, label='Female')\nsns.kdeplot(data[data['sex']==1]['thalach'], color='orange', ax=ax, label='Male')\n\n# avg line\nplt.axvline(data[data['sex']==0]['thalach'].mean(), color='purple')\nplt.axvline(data[data['sex']==1]['thalach'].mean(), color='orange')\n\n\nplt.xticks(rotation='vertical')\nplt.legend()\nplt.show()","516d2d02":"fig_ax = sns.kdeplot(data=data, x='oldpeak', hue='target', shade=True)","18d7c8f7":"fig_ax = sns.histplot(data=data, x='oldpeak', hue='target')","d0541eb1":"plt.plot(data['trestbps'], data['age'], linestyle='none', marker='o', color='b')\nplt.show()","d5fa8d50":"fig, ax = plt.subplots(2, 2, figsize=(10, 10))\n\n# type 1 : default scatter plot \nsns.scatterplot(data=data, x='trestbps', y='oldpeak', alpha=0.7, ax=ax[0][0])\n\n# type 2 : with hue\nsns.scatterplot(data=data, x='trestbps', y='oldpeak', hue='cp', alpha=0.7, ax=ax[0][1])\n\n# type 3 : with style & color\nsns.scatterplot(data=data, x='trestbps', y='oldpeak',style='cp', color='royalblue', alpha=0.5, ax=ax[1][0])\n\n# type 4 : with size & color \nsns.scatterplot(data=data, x='trestbps', y='oldpeak',size='cp', color='brown', alpha=0.5, ax=ax[1][1])\n\nplt.show()","a0cc2172":"fig, ax = plt.subplots(1, 1, figsize=(6, 6))\nsns.scatterplot(data=data, x='trestbps', y='oldpeak',style='sex',hue='target', color='royalblue', alpha=0.7)  # , hue='parental level of education',size='parental level of education'\nplt.show()","834c201d":"fig, ax = plt.subplots(1,2,figsize=(8,4), gridspec_kw=dict(width_ratios=[4,3]))\nsns.scatterplot(data=data, x='oldpeak', y='age', hue='target', ax=ax[0])\nsns.kdeplot(data=data, x='oldpeak', hue='target', shade=True, ax=ax[1])\nfig.tight_layout()","989c8a84":"fig, ax = plt.subplots(1,2,figsize=(8,4), gridspec_kw=dict(width_ratios=[4,3]))\nsns.scatterplot(data=data, x='chol', y='age', hue='target', ax=ax[0])\nsns.kdeplot(data=data, x='chol', hue='target', shade=True, ax=ax[1])\nfig.tight_layout()","3f8074a9":"fig, ax = plt.subplots()\nax.boxplot(data[\"chol\"])\nplt.xticks([1], [\"Cholestrol\"], rotation=10)\nplt.show()","e6c5fd5a":"# type 1 : default boxplot & stripplot\n\nfig, ax = plt.subplots(2, 2, figsize=(14, 12))\n\n# boxplot\nsns.boxplot(x='thal', y='thalach', data=data, ax=ax[0][0])\n\n# stripplot\nsns.stripplot(x='thal', y='thalach', data=data, ax=ax[0][1], alpha=0.5)\n\n# swarmplot \nsns.swarmplot(x='thal', y='thalach', data=data, ax=ax[1][0], alpha=0.7)\n\n# both\nsns.boxplot(x='thal', y='thalach', data=data, ax=ax[1][1])\nsns.stripplot(x='thal', y='thalach', data=data, ax=ax[1][1], alpha=0.3)\n\nplt.tight_layout()\nplt.show()","1305ff91":"# type 2 : we can add hue parameter\nfig, ax = plt.subplots(1, 1, figsize=(12,6))\nsns.boxplot(x='thal', y='thalach', hue='target', palette='Set2', data=data, ax=ax)\nplt.show()","ab216258":"# type 2 : we can add hue parameter\nfig, ax = plt.subplots(1, 1, figsize=(12,6))\nsns.boxplot(x='ca', y='thalach', hue='target', palette='Set2', data=data, ax=ax)\nplt.show()","3ae4b6d5":"fig, (ax1, ax2, ax3) = plt.subplots(nrows=1, ncols=3)\nax1.violinplot(data.trestbps, showmedians=True, showmeans=True, vert=False)\nax1.set_title('Resting bp')\n\nax2.violinplot(data.thalach, showmedians=True, showmeans=True, vert=False)\nax2.set_title('Max heart rate')\n\nax3.violinplot(data.age, showmedians=True, showmeans=True, vert=False)\nax3.set_title('Age')\nplt.show()","a6e15f68":"# type 1 : compare with boxplot\n\nfig, ax = plt.subplots(1, 2, figsize=(28, 6))\n\n# boxplot\nsns.boxplot(x='slope', y='trestbps', data=data, ax=ax[0])\n\n# violinplot\nsns.violinplot(x='slope', y='trestbps', data=data, ax=ax[1])\n\nplt.show()","4545d9b2":"# type 2 : hue parameter\n\nfig, ax = plt.subplots(1, 2, figsize=(18, 6))\nsns.violinplot(x='slope', y='trestbps', hue='sex', data=data, ax=ax[0])\n\n\n# type 3 : hue + split\nsns.violinplot(x='slope', y='trestbps', hue='target', data=data, split=True, ax=ax[1])\nplt.show()","3bd10daf":"# type 1 : default\nsns.set(style=\"white\", color_codes=True) # suitable theme for jointplot\nsns.jointplot(data=data, x='age', y='oldpeak', alpha=0.7)\n# plt.show()","d693efac":"# type 2 : many types (reg, hex, kde)\nsns.jointplot(data=data,x='age', y='oldpeak', kind='reg', color='skyblue')\nsns.jointplot(data=data,x='age', y='oldpeak', kind='hex', color='gold')\nsns.jointplot(data=data,x='age', y='oldpeak', kind='kde', color='forestgreen' )\nplt.show()","e6b6f45b":"from matplotlib.gridspec import GridSpec","14ba0c4c":"fig = plt.figure()\ngs = GridSpec(4, 4)\n\nax_scatter = fig.add_subplot(gs[1:4, 0:3])\nax_hist_x = fig.add_subplot(gs[0,0:3])\nax_hist_y = fig.add_subplot(gs[1:4, 3])\n\nax_scatter.scatter(data['chol'], data['thalach'])\n\nax_hist_x.hist(data['chol'])\nax_hist_y.hist(data['thalach'], orientation = 'horizontal')\n\nplt.show()","5e13e0c8":"There is more chance to have sugar at the age of 55-60","402e46d2":"### Matplotlib","781a871b":"# **Background of data**\n\nThis database contains 76 attributes, but all published experiments refer to using a subset of 14 of them. In particular, the Cleveland database is the only one that has been used by ML researchers to this date. The \"goal\" field refers to the presence of heart disease in the patient. It is integer valued from 0 (no presence) to 4.","3187e196":"## Histogram","e009bcbf":"If slope=2, then our graph shows that they are more prone to heart disease.","262cc929":"# EDA\n\nHere, we are trying to understand data in a better way by looking for following answers:\n1. What question(s) are you trying to solve?\n2. What kind of data do we have and how do we treat different types?\n3. What's missing from the data and how do you deal with it?\n4. Where are the outliers and why should you care about them?\n5. How can you add, change or remove features to get more out of your data?","0563baf1":"From this graph, we can tell that 0 i.e female have high chances to get heart disease","f4723380":"## Scatter Plot\n\n### Matplotlib","755af543":"Understanding distribution of continuous variables","cf34844e":"##  Bar Plot \n\n","9d78fd99":"you can use `hue` parameter\n\nand there are two views.\n\n- split : True\n- split : False(default)","504966e1":"From here, we can say that a person whose cholestrol is approx 220 and age is 60 they are more likely to not have heart disease. Again, we observe that people in the age range of 41-55 have very high chances of getting heart disease. Also, if a person has very high cholestrol we can see that he\/she is most likely to have heart disease.","8f3dc1fc":"If cp is 0 i.e Typical angina (chest pain related decrease blood supply to the heart), that person has less chances to have heart disease.","1e45f7b9":"!pip install matplotlib (if matplotlib is not installed)","0f578c8c":"### Seaborn : boxplot, stripplot, swarmplot\n\n- [boxplot](https:\/\/seaborn.pydata.org\/generated\/seaborn.boxplot.html) : Draw a box plot to show distributions with respect to categories.\n- [stripplot](https:\/\/seaborn.pydata.org\/generated\/seaborn.stripplot.html) : Draw a scatterplot where one variable is categorical.\n- [swarmplot](https:\/\/seaborn.pydata.org\/generated\/seaborn.swarmplot.html) : Draw a categorical scatterplot with non-overlapping points.\n\n\nIt consists of the minimum value (min), the maximum value (max), the median value (median or second quartile), and 1Q and 3Q (first quartile and third quartile, respectively), and are typically 1.5 times IQR (values \u200b\u200bof 3Q-1Q) from 1Q. Data points less than or greater than 1.5 IQR from 3Q will be represented as outliers.\n\nUsually I use stripplot(swarmplot) with boxplot to look at distribution and information.\n\nWe can look at a single variable or two variables.","5496355f":"\n### Seaborn : distplot\n\n- [Distplot](https:\/\/seaborn.pydata.org\/generated\/seaborn.distplot.html#seaborn.distplot) : Flexibly plot a univariate distribution of observations.\n\n`distplot` is similar to `countplot` because countplot is *a histogram according to frequency*.\n\nBasically, you can look at it with histogram, so it's easier to see trends than countplot.\n\nYou cannot set the hue separately, so you need to draw the graphs individually. (you can add `label`)\nseaborn combines, histogram, kdeplot, rugplot.","6ee0baac":"This shows that our dataset has no missing value.","09abb4fa":"In general people who have higher thalach they have higher chances of getting disease irrespective of their ca (i.e number of major vessels)","58dda603":"**Problem we are trying to solve**\n\nGiven clinical parameters about a patient, can we predict whether or not they have heart disease?","90c86163":"If I have to apply distplot on two variables, then we can use displot","32c03fea":"If we just want to print histogram instead of kde plot, then we can change some parameters.","1f05d3c3":"People whose thalium stress result is 2, graph shows that they are also prone to heart disease.","dbf67f4e":"### Matplotlib","a0cccd0b":"Similarly, we can try to find relation between all other variables.","a47cf8b5":"This graph shows that people with age 41-45 are most prone to heart disease, which can be contributed to stress factor. Once we reach age 60 chances to get affected by heart disease reduces. ","eb6272e9":"Relative to a histogram, KDE can produce a plot that is less cluttered and more interpretable, especially when drawing multiple distributions. But it has the potential to introduce distortions if the underlying distribution is bounded or not smooth. Like a histogram, the quality of the representation also depends on the selection of good smoothing parameters.","9a4c4afc":"From here, we can also observe outlier value of cholestrol, and think if we want to do it's treatment or use it.","731b9e6a":"If a person has 0 major vessels i.e ca=0, then they are highly prone to heart disease.","ab6c44aa":"## Violin Plot \n","29d932cc":"People with and without sugar show similar pattern of cholestrol","f2dbe85b":"## Missing values","2a97fcab":"Plotting heatmap between variables.","4ee41833":"### Seaborn : violinplot\n\n- [violinplot](https:\/\/seaborn.pydata.org\/generated\/seaborn.violinplot.html#seaborn.violinplot) : Draw a combination of boxplot and kernel density estimate.\n\nAlmost the same function as box plot, with the difference that it draws kde.","6919660f":"As with many other seaborn functions, you can add hue parameters.","c92faa3a":"If a person's restecg=1 (which represents ST-T Wave abnormality and signals non-normal heart beat), then that person can have heart disease.","75f82910":"### Seaborn : scatterplot\n\n- [Scatter plot](https:\/\/seaborn.pydata.org\/generated\/seaborn.scatterplot.html) : Draw a scatter plot with possibility of several semantic groupings.\n\nVery simple point plotting. But depending on your custom abilities, you can create huge graphs that can handle high-dimensional data.\n\n**Custom parameter**\n\n1. `hue` : Color change by category\n2. `style` : marker (+, o, -, etc)\n3. `size` : point size\n\nThe example will make it easier to understand.\n\nThe size is small, but if you look closely, you will be able to feel different parts. Compare with the `legend` section.","5f74a95c":"* Plotly's main object is Figure() object.\n* add_trace can consider as 'stacking figures'.\n      These libraries are used:\n        *import plotly.graph_objects as go\n        *import plotly.express as px\n        *import plotly.figure_factory as ff","7d12ded1":"## Joint Plot\nJoint Plots are used to explore relationships between bivariate data, as well as their distributions at the same time.\n\n### Seaborn : jointplot\n\n- [Joint Plot](https:\/\/seaborn.pydata.org\/generated\/seaborn.jointplot.html) : Draw a plot of two variables with bivariate and univariate graphs.\n\nIt is distribution picture that Bayes theorem comes to mind.\n\nYou can look at the probability of a bivariate based on the value of each variable.","76a131c0":"Similarly, we can observe distribution for all other continuous variables.","cce2e8ea":"This shows, that people who do exercise are less prone to having heart disease.","858dc04d":"### Finding relation between target and other categorical variables","15f12843":"### Matplotlib","d7adecad":"This shows that people who have heart disease have higher maximum heart rate i.e thalach value.","524f27e4":"## Countplot\n\n### Seaborn : countplot, barplot + value_counts()\n\nIn seaborn, we can easily draw these graph\n\n- **[Countplot](https:\/\/seaborn.pydata.org\/generated\/seaborn.countplot.html#seaborn.countplot)** : Show the counts of observations in each categorical bin using bars.\n\nLet's plot seaborn countplot.\n\n**Little tips**\n- If you want to make it vertical, replace x by y.\n- Use `alpha` parameter to set opacity for more readable plot\n- Use `hue` to find features' trend\n- use `plt.xticks` or `plt.yticks` to rotation xaxis label.","661bba00":"https:\/\/towardsdatascience.com\/histograms-vs-kdes-explained-ed62e7753f12","5fda38bd":"This variable doesn't give us any clear cut idea.","e5a6a4ce":"Here, we can observe the outlier value of cholestrol.\n\nWe've extracted the fig and ax objects from the return of the subplots() function, so we can use either of them to call the boxplot() function. Alternatively, we could've just called plt.boxplot().\n\nThe Box Plot shows the median of the dataset (the vertical line in the middle), as well as the interquartile ranges (the ends of the boxes) and the minimum and maximum values of the chosen dataset feature (the far end of the \u201cwhiskers\u201d).","a66cb8e2":"Or we can use kdeplot separately to plot so.","16ff4ec7":"Here the frequency of the observation is plotted. In this case we are plotting the frequency of the target values in the dataset, i.e people who have and don't have diseases. This tells us that in our dataset we have more number of people who had heart disease.","5537db08":"References:\n* https:\/\/pythonprogramming.net\/styles-matplotlib-tutorial\/\n* https:\/\/stackoverflow.com\/questions\/20937538\/how-to-display-pandas-dataframe-of-floats-using-a-format-string-for-columns","6d15b6ed":"Depending on our comfortability, we can choose parameter accordingly.","60243975":"#  Import modules ","4627fb77":"## Box Plot\n\nBox plots are used to visualize summary statistics of a dataset, displaying attributes of the distribution like the data\u2019s range and distribution.Box Plots visualize continuous variable distribution.\n\n### Matplotlib\n[Reference](https:\/\/stackabuse.com\/matplotlib-box-plot-tutorial-and-examples\/)","4bea6d96":"    * 0: Typical angina: chest pain related decrease blood supply to the heart\n    * 1: Atypical angina: chest pain not related to heart\n    * 2: Non-anginal pain: typically esophageal spasms (non heart related)\n    * 3: Asymptomatic: chest pain not showing signs of disease","0989e1ef":"Here, we observe that even though bp is touching 200, that person is not that likely to have heart disease, so it is possible that trestbp may not turn out to be a important deciding factor.","19879317":"### Matplotlib\n\nNote: This sort of task is much more fit for libraries such as Seaborn, which has a built-in jointplot() function. With Matplotlib, we'll construct a Joint Plot manually, using GridSpec and multiple Axes objects, instead of having Seaborn do it for us.\n\n[Reference](https:\/\/stackabuse.com\/matplotlib-scatter-plot-with-distribution-plots-histograms-jointplot\/)","7020d032":"Although extra, you can also add a mean line using matplotlib.","56274890":"# FEATURE EXPLANATION\n\n1. `age` - age in years\n2. `sex` - (1 = male; 0 = female)\n3. `cp` - chest pain type\n    * 0: Typical angina: chest pain related decrease blood supply to the heart\n    * 1: Atypical angina: chest pain not related to heart\n    * 2: Non-anginal pain: typically esophageal spasms (non heart related)\n    * 3: Asymptomatic: chest pain not showing signs of disease\n4. `trestbps` - resting blood pressure (in mm Hg on admission to the hospital) anything above 130-140 is typically cause for concern\n5. `chol` - serum cholestoral in mg\/dl\n    * serum = LDL + HDL + .2 * triglycerides\n    * above 200 is cause for concern\n6. `fbs` - (fasting blood sugar > 120 mg\/dl) (1 = true; 0 = false)\n    * '>126' mg\/dL signals diabetes\n7. `restecg` - resting electrocardiographic results\n    * 0: Nothing to note\n    * 1: ST-T Wave abnormality\n        * can range from mild symptoms to severe problems\n        * signals non-normal heart beat\n    * 2: Possible or definite left ventricular hypertrophy\n        * Enlarged heart's main pumping chamber\n8. `thalach` - maximum heart rate achieved\n9. `exang` - exercise induced angina (1 = yes; 0 = no)\n10. `oldpeak` - ST depression induced by exercise relative to rest looks at stress of heart during excercise unhealthy heart will stress more\n11. `slope` - the slope of the peak exercise ST segment\n    * 0: Upsloping: better heart rate with excercise (uncommon)\n    * 1: Flatsloping: minimal change (typical healthy heart)\n    * 2: Downslopins: signs of unhealthy heart\n12. `ca` - number of major vessels (0-3) colored by flourosopy\n    * colored vessel means the doctor can see the blood passing through\n    * the more blood movement the better (no clots)\n13. `thal` - thalium stress result\n    * 1,3: normal\n    * 6: fixed defect: used to be defect but ok now\n    * 7: reversable defect: no proper blood movement when excercising\n14. `target` - have disease or not (1=yes, 0=no) (= the predicted attribute)"}}