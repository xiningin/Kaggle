{"cell_type":{"11931f41":"code","e56069cf":"code","d15c6736":"code","0cff45fc":"code","465b0f40":"code","4d7704af":"code","582ddad8":"code","03cbe825":"code","31100c46":"code","93c6e96d":"code","2b0501ab":"code","3ce32392":"code","2e9bfb91":"code","b8c1bd8f":"code","23a0010b":"code","43c8f944":"code","442cd44d":"markdown","e6803229":"markdown","5086c45e":"markdown","1ca298af":"markdown","58deb356":"markdown","fd46486e":"markdown"},"source":{"11931f41":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns \nsalary_df = pd.read_csv('..\/input\/sf-salaries\/Salaries.csv') # load the dataset\n%matplotlib inline","e56069cf":"# Salaries in San Francisco from 2011 to 2014\nsalary_df.head()","d15c6736":"salary_df.info()","0cff45fc":"list1 =['BasePay','OvertimePay' , 'OtherPay' , 'Benefits']\nfor i in list1:\n    salary_df[i] = pd.to_numeric(salary_df[i], errors='coerce')\n    \nsalary_df.drop('Notes' , axis=1 , inplace=True)","465b0f40":"salary_df.info()","4d7704af":"salary_df['EmployeeName'].value_counts()","582ddad8":"# It can be seen from above that there are more than one rows for some names! Lets check why!!!\n# for example for the first name in the series above: Kevin Lee\nsalary_df.set_index('EmployeeName' , inplace=True)\nsalary_df.head()\nsalary_df.loc['Kevin Lee']","03cbe825":"\nsalary_df.loc['Stanley Lee']","31100c46":"# there are some Nan datas in column BasePay, lets find them\nnull_BasePay = pd.isnull(salary_df['BasePay'])\nsalary_df[null_BasePay]","93c6e96d":"# delete the rows with name and job name as not provided\nsalary_df.drop('Not provided' , inplace=True)\nsalary_df.reset_index(inplace=True)","2b0501ab":"# chang the pays as NaN with the mean of all the other pays\n# calculate the sum of the new datas and add them to the total pay and total pay with benefits\npays = ['BasePay' , 'OvertimePay' , 'OtherPay' , 'Benefits' ]\nfor i in pays:\n    salary_df[i].fillna(value = salary_df[i].mean() , inplace=True)\nsalary_df['TotalPay'] = salary_df['BasePay'] + salary_df['OvertimePay'] + salary_df['OtherPay']\nsalary_df['TotalPayBenefits'] = salary_df['TotalPay']+salary_df['Benefits'] \n","3ce32392":"# here i am going to compare salaries over time (comparing the base pays and total pays with benefits)\nsalary_over_timee = salary_df.groupby('Year').mean()\nsalary_over_timee.reset_index(inplace=True)\nsns.barplot(x = 'Year', y='BasePay' , data = salary_over_timee)\nplt.figure()\nsns.barplot(x = 'Year', y='TotalPayBenefits' , data = salary_over_timee)","2e9bfb91":"# Now I am going to compare the biggest salary with the lowest salary in each year (total pay with benefits)\nmax_2011 = salary_df[salary_df['Year'] == 2011]['TotalPayBenefits'].max()\nmin_2011 = salary_df[salary_df['Year'] == 2011]['TotalPayBenefits'].min()\nmax_2012 = salary_df[salary_df['Year'] == 2012]['TotalPayBenefits'].max()\nmin_2012 = salary_df[salary_df['Year'] == 2012]['TotalPayBenefits'].min()\nmax_2013 = salary_df[salary_df['Year'] == 2013]['TotalPayBenefits'].max()\nmin_2013 = salary_df[salary_df['Year'] == 2013]['TotalPayBenefits'].min()\nmax_2014 = salary_df[salary_df['Year'] == 2014]['TotalPayBenefits'].max()\nmin_2014 = salary_df[salary_df['Year'] == 2014]['TotalPayBenefits'].min()\ndf = pd.DataFrame({'year':[2011,2012,2013,2014] , 'maximum salary': [max_2011, max_2012, max_2013 , max_2014]})\nsns.barplot(data = df , x = 'year' , y = 'maximum salary')","b8c1bd8f":"df = pd.DataFrame({'year':[2011,2012,2013,2014] , 'minimum salary': [min_2011, min_2012, min_2013 , min_2014]})\nsns.barplot(data = df , x = 'year' , y = 'minimum salary')","23a0010b":"sns.barplot(data = salary_df , x='Year' , y= 'Benefits')","43c8f944":"\nsalary_df.head()","442cd44d":"the plot above depicts that the maximum income in 2011 was the maximum salary from 2011 to 2014\n","e6803229":"# How have salaries changed over time?","5086c45e":"the most average pay for both base pay and total pay with benefits was for 2013.","1ca298af":"the most minimum salary was also for 2011.","58deb356":"change the type of columns BasePay, OvertimePay , OtherPay and Benefits to float64\nSo they will be analyzable\nerase the Notes column, as all of its components are Nan","fd46486e":"maybe there are more than one person with the same name!!!!!\n"}}