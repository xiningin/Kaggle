{"cell_type":{"03f41980":"code","34667fae":"code","02fbade4":"code","ecc1d1c3":"code","74e23279":"code","0808c7e9":"code","f036506d":"code","90f38aa0":"code","5342910f":"code","69aa10bf":"code","faaf90d2":"code","aadb7daf":"code","d73b3618":"code","e2d78a8a":"code","1ccedd34":"code","4d3ab810":"code","76a2fcff":"code","a24239e4":"code","eaa89d0f":"code","627c200a":"code","490702d2":"code","a21f918b":"code","5e2e1659":"code","e322daa8":"markdown","bd1dc74b":"markdown","bd726d3c":"markdown","9177d7c0":"markdown","13e83d7d":"markdown","2beec45f":"markdown","e52306bb":"markdown","df82672d":"markdown","54235ab6":"markdown","2e850625":"markdown"},"source":{"03f41980":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","34667fae":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport seaborn as sns\n%matplotlib inline\n\nnp.random.seed(2)\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nimport itertools\n\nfrom keras.utils.np_utils import to_categorical # convert to one-hot-encoding\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom keras.optimizers import RMSprop\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau\n\n\nsns.set(style='white', context='notebook', palette='deep')\n","02fbade4":"train_data = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\")\ntest_data  = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\")","ecc1d1c3":"print(\"Shape of train data :{}\".format(train_data.shape))\nprint(\"Shape of test data  :{}\".format(test_data.shape))","74e23279":"train_data.head()","0808c7e9":"Y_train = train_data['label']\n\nX_train = train_data.drop(labels = [\"label\"],axis = 1) \n\n\ng = sns.countplot(Y_train)\n\nY_train.value_counts()","f036506d":"X_train.isnull().any().describe()","90f38aa0":"test_data.isnull().any().describe()","5342910f":"X_train = X_train \/ 255.0\ntest_data = test_data \/ 255.0\nprint(\"Shape of train data :{}\".format(train_data.shape))\nprint(\"Shape of test data  :{}\".format(test_data.shape))","69aa10bf":"X_train = X_train.values.reshape(-1,28,28,1)\ntest_data = test_data.values.reshape(-1,28,28,1)\n","faaf90d2":"# Encode labels to one hot vectors (ex : 2 -> [0,0,1,0,0,0,0,0,0,0])\nY_train = to_categorical(Y_train, num_classes = 10)\n","aadb7daf":"X_train, X_val, Y_train, Y_val = train_test_split(X_train, Y_train, test_size = 0.1, random_state=1)","d73b3618":"img = plt.imshow(X_train[1][:,:,0])\nplt.axis(\"off\")\nplt.show()\n\n","e2d78a8a":"model = Sequential()\n\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu', input_shape = (28,28,1)))\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation = \"softmax\"))","1ccedd34":"# Define the optimizer\noptimizer = RMSprop(lr=0.001, rho=0.9, epsilon=1e-08, decay=0.0)\n\n\n# Compile the model\nmodel.compile(optimizer = optimizer , loss = \"categorical_crossentropy\", metrics=[\"accuracy\"])","4d3ab810":"# Set a learning rate annealer\nlearning_rate_reduction = ReduceLROnPlateau(monitor='val_acc', \n                                            patience=3, \n                                            verbose=1, \n                                            factor=0.5, \n                                            min_lr=0.00001)","76a2fcff":"epochs = 3\nbatch_size = 86","a24239e4":"datagen = ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # apply ZCA whitening\n        rotation_range=10,  # randomly rotate images in the range (degrees, 0 to 180)\n        zoom_range = 0.1, # Randomly zoom image \n        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)\n        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)\n        horizontal_flip=False,  # randomly flip images\n        vertical_flip=False)  # randomly flip images\n\n\ndatagen.fit(X_train)\n","eaa89d0f":"# Fit the model\n# Fit the model\nhistory = model.fit_generator(datagen.flow(X_train,Y_train, batch_size=batch_size),\n                              epochs = epochs, validation_data = (X_val,Y_val), steps_per_epoch=X_train.shape[0] \/\/ batch_size)","627c200a":"def plot_confusion_matrix(cm, classes,\n                          normalize=False,\n                          title='Confusion matrix',\n                          cmap=plt.cm.Blues):\n    \"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45)\n    plt.yticks(tick_marks, classes)\n\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, cm[i, j],\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n\n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')\n\n# Predict the values from the validation dataset\nY_pred = model.predict(X_val)\n# Convert predictions classes to one hot vectors \nY_pred_classes = np.argmax(Y_pred,axis = 1) \n# Convert validation observations to one hot vectors\nY_true = np.argmax(Y_val,axis = 1) \n# compute the confusion matrix\nconfusion_mtx = confusion_matrix(Y_true, Y_pred_classes) \n# plot the confusion matrix\nplot_confusion_matrix(confusion_mtx, classes = range(10)) ","490702d2":"#Predict Models\n\nresults = model.predict(test_data)\n","a21f918b":"# select the indix with the maximum probability\nresults = np.argmax(results,axis = 1)\n\nresults = pd.Series(results,name=\"Label\")","5e2e1659":"submission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),results],axis = 1)\n\nsubmission.to_csv(\"submission.csv\",index=False)","e322daa8":"**2-Loading Train and Test Data**","bd1dc74b":"**8- Data Augmentation**","bd726d3c":"**1-Importing Libraries**","9177d7c0":"**4-Reshape**","13e83d7d":"**Checking whether there is null value or not **","2beec45f":"**7.1 Define Optimizer and Annealer\n **","e52306bb":"**6-Train Validation Split**","df82672d":"**3-Normalization**","54235ab6":"**5-Label Encoding**","2e850625":"**7-Convolutional Neural Network(CNN)**"}}