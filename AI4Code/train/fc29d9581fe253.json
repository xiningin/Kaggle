{"cell_type":{"e595a724":"code","90a18706":"code","30540db1":"code","2556f3a3":"code","a8437d25":"code","636a84ee":"code","af5cafcd":"code","7fd08511":"code","3672563d":"code","dc130e8b":"code","ab90a5bc":"code","1e4a882e":"code","4fccd2b6":"code","ece0b282":"code","8e1c11e7":"code","8ec462eb":"code","0d8089ee":"code","f9012093":"code","85d2baaa":"code","c05d26da":"markdown","7b532d14":"markdown","810c6ff7":"markdown","7e2ec4fc":"markdown","67a033aa":"markdown","28203cd7":"markdown","946e7797":"markdown","b18321d8":"markdown"},"source":{"e595a724":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\npd.set_option('display.max_columns', 500)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport pyarrow.parquet as pq\nimport os\nprint(os.listdir(\"..\/input\"))\n\nfrom sklearn import metrics\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport gc\n\nfrom sklearn.metrics import mean_squared_error, matthews_corrcoef\n\nfrom sklearn.model_selection import KFold\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport lightgbm as lgb\n\n# Any results you write to the current directory are saved as output","90a18706":"def reduce_mem_usage(df, verbose=True):\n    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n    start_mem = df.memory_usage().sum() \/ 1024**2    \n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)    \n    end_mem = df.memory_usage().sum() \/ 1024**2\n    if verbose: print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'.format(end_mem, 100 * (start_mem - end_mem) \/ start_mem))\n#     return df","30540db1":"meta_train = pd.read_csv('..\/input\/metadata_train.csv')\n# meta_test = pd.read_csv('..\/input\/metadata_test.csv')","2556f3a3":"reduce_mem_usage(meta_train)\n# reduce_mem_usage(meta_test)","a8437d25":"meta_train.shape","636a84ee":"%%time \n# Start small, load in 500 signals and calculate some basic aggregates (mean, sum)\n# Read in 500 signals\n# Each column contains one signal\nsubset_train_0_500 = pq.read_pandas('..\/input\/train.parquet', columns=[str(i) for i in range(500)]).to_pandas()","af5cafcd":"# Function to add a few basic aggregations for the different signal ids\ndef add_cols(df, df_sig):\n    for signal in df['signal_id'].tolist():\n        df.loc[df['signal_id']==signal,'signal_mean'] = np.mean(df_sig[str(signal)])\n        df.loc[df['signal_id']==signal,'signal_sum'] = np.sum(df_sig[str(signal)])\n        df.loc[df['signal_id']==signal,'signal_median'] = np.median(df_sig[str(signal)])\n        df.loc[df['signal_id']==signal,'signal_ptp'] = np.ptp(df_sig[str(signal)])","7fd08511":"meta_train['signal_mean'] = 0\nmeta_train['signal_sum'] = 0\nmeta_train['signal_median'] = 0\nmeta_train['signal_ptp'] = 0\nmeta_train.head()","3672563d":"meta_train_0_500 = meta_train[:500]","dc130e8b":"%%time\nadd_cols(meta_train_0_500,subset_train_0_500)","ab90a5bc":"reduce_mem_usage(meta_train_0_500)","1e4a882e":"meta_train_0_500.head()","4fccd2b6":"meta_train_0_500.tail()","ece0b282":"target = meta_train_0_500['target']\nmeta_train_0_500.drop('target', axis=1, inplace=True)\nfeatures = meta_train_0_500.columns","8e1c11e7":"# def lgb_mcc_score(y_hat, data):\n#     y_true = data.get_label()\n#     y_hat = np.round(y_hat)\n#     return 'mcc', matthews_corrcoef(y_true, y_hat), True\n\n# # def lgb_mcc(preds, dtrain):\n# #     THRESHOLD = 0.5\n# #     labels = dtrain.get_label()\n# #     return 'mcc', matthews_corrcoef(labels, preds >= THRESHOLD)\n\n","8ec462eb":"param = {'num_leaves': 60,\n         'min_data_in_leaf': 60, \n         'objective':'binary',\n         'max_depth': -1,\n         'learning_rate': 0.1,\n         \"boosting\": \"gbdt\",\n         \"feature_fraction\": 0.8,\n         \"bagging_freq\": 1,\n         \"bagging_fraction\": 0.8 ,\n         \"bagging_seed\": 11,\n         \"metric\": 'auc',\n         \"lambda_l1\": 0.1,\n         \"random_state\": 42,\n         \"verbosity\": -1}","0d8089ee":"max_iter=5\ngc.collect()","f9012093":"folds = KFold(n_splits=5, shuffle=True, random_state=42)\noof = np.zeros(len(meta_train_0_500))\n# categorical_columns = [c for c in categorical_columns if c not in ['MachineIdentifier']]\n# features = [c for c in train.columns if c not in ['MachineIdentifier']]\n# predictions = np.zeros(len(test))\n\nfeature_importance_df = pd.DataFrame()\n\nscore = [0 for _ in range(folds.n_splits)]\n\nfor fold_, (trn_idx, val_idx) in enumerate(folds.split(meta_train_0_500.values, target.values)):\n    print(\"Fold No.{}\".format(fold_+1))\n    trn_data = lgb.Dataset(meta_train_0_500.iloc[trn_idx][features],\n                           label=target.iloc[trn_idx],\n#                            categorical_feature = categorical_columns\n                          )\n    val_data = lgb.Dataset(meta_train_0_500.iloc[val_idx][features],\n                           label=target.iloc[val_idx],\n#                            categorical_feature = categorical_columns\n                          )\n    evals_result = {}\n    \n    num_round = 10000\n    clf = lgb.train(param,\n                    trn_data,\n                    num_round,\n                    valid_sets = [trn_data, val_data],\n                    verbose_eval=100,\n                    early_stopping_rounds = 200)\n#                     feval = lgb_mcc_score,\n#                     evals_result = evals_result)\n    \n    oof[val_idx] = clf.predict(meta_train_0_500.iloc[val_idx][features], num_iteration=clf.best_iteration)\n    \n    fold_importance_df = pd.DataFrame()\n    fold_importance_df[\"feature\"] = features\n    fold_importance_df[\"importance\"] = clf.feature_importance(importance_type='gain')\n    fold_importance_df[\"fold\"] = fold_ + 1\n    feature_importance_df = pd.concat([feature_importance_df, fold_importance_df], axis=0)\n    \n#     lgb.plot_metric(evals_result, metric='mcc')\n\n    score[fold_] = metrics.roc_auc_score(target.iloc[val_idx], oof[val_idx])\n    if fold_ == max_iter - 1: break\n        \nif (folds.n_splits == max_iter):\n    print(\"CV score: {:<8.5f}\".format(metrics.roc_auc_score(target, oof)))\nelse:\n     print(\"CV score: {:<8.5f}\".format(sum(score) \/ max_iter))","85d2baaa":"cols = (feature_importance_df[[\"feature\", \"importance\"]]\n        .groupby(\"feature\")\n        .mean()\n        .sort_values(by=\"importance\", ascending=False)[:1000].index)\n\nbest_features = feature_importance_df.loc[feature_importance_df.feature.isin(cols)]\n\nplt.figure(figsize=(10,10))\nsns.barplot(x=\"importance\",\n            y=\"feature\",\n            data=best_features.sort_values(by=\"importance\",\n                                           ascending=False))\nplt.title('LightGBM Features (avg over folds)')\nplt.tight_layout()","c05d26da":"### Very inefficient approach to  start off with -- will clean this up later","7b532d14":"### I write a custom function to use the actual evaluation metric for this competition (Matthews Correlation Coefficient)","810c6ff7":"### Clearly this isn't a viable solution for the test set, so let's at least get a reasonable CV score from the few training examples we have signal aggregations for, and leave the rest till someone more experienced comes up with a method for handling the rather large datasets","7e2ec4fc":"### Create a custom feval for the Matthews Correlation Coefficient","67a033aa":"### Have to fix this","28203cd7":"### In line with the discussion (https:\/\/www.kaggle.com\/c\/vsb-power-line-fault-detection\/discussion\/75373) I have used numpy","946e7797":"### Will someone please give me a custom file parser for Christmas","b18321d8":"### Is phase really that insignificant in target prediction? "}}