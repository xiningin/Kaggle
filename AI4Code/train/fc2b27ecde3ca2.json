{"cell_type":{"b5531db0":"code","33ece20d":"code","d5334bde":"code","e17c9f11":"code","72006c84":"code","dd86fa67":"code","87b8cfab":"code","3790e761":"code","2ea69c25":"code","4de614ce":"code","22bc0016":"code","bfe59301":"code","8458b939":"code","d749b581":"code","e4d4a672":"code","f6112674":"code","b2e91b9f":"code","3eacceca":"code","80cd44c2":"code","3961f662":"code","59fd6dcb":"code","bf439823":"code","3889b98e":"code","fc62c43c":"code","a90d8f9a":"markdown","30bc29aa":"markdown","e7357d1e":"markdown","97fd9e06":"markdown","7bfc30b5":"markdown","fd080df7":"markdown","895af9c3":"markdown","7e37a111":"markdown","1c0255ae":"markdown","bf6d79d4":"markdown","c4004d11":"markdown","a6101667":"markdown","ab2788f2":"markdown","10bd13f3":"markdown","5ca85cb4":"markdown","775cf5ba":"markdown","0a26efb1":"markdown","ccb4cb55":"markdown"},"source":{"b5531db0":"import numpy as np\nimport pandas as pd\n\nimport tensorflow as tf\n\nfrom tensorflow import feature_column\nfrom tensorflow.keras import layers\nfrom sklearn.model_selection import train_test_split","33ece20d":"import pathlib\n\ndataset_url = 'http:\/\/storage.googleapis.com\/download.tensorflow.org\/data\/petfinder-mini.zip'\ncsv_file = 'datasets\/petfinder-mini\/petfinder-mini.csv'\n\ntf.keras.utils.get_file('petfinder_mini.zip', dataset_url,\n                        extract=True, cache_dir='.')\ndataframe = pd.read_csv(csv_file)\ndataframe.head()","d5334bde":"dataframe.info()","e17c9f11":"# In the original dataset \"4\" indicates the pet was not adopted.\ndataframe['target'] = np.where(dataframe['AdoptionSpeed']==4, 0, 1)\n\n# Drop un-used columns.\ndataframe = dataframe.drop(columns=['AdoptionSpeed', 'Description'])\n","72006c84":"dataframe.head(20)","dd86fa67":"train, test = train_test_split(dataframe, test_size=0.2)\ntrain, val = train_test_split(train, test_size=0.2)\nprint('Train examples: ', len(train))\nprint('Validation examples: ', len(val))\nprint('Test examples: ',  len(test), )","87b8cfab":"# A utility method to create a tf.data dataset from a Pandas Dataframe\ndef df_to_dataset(dataframe, shuffle=True, batch_size=32):\n    dataframe = dataframe.copy()\n    labels = dataframe.pop('target')\n    ds = tf.data.Dataset.from_tensor_slices((dict(dataframe), labels))\n    if shuffle:\n        ds = ds.shuffle(buffer_size=len(dataframe))\n    ds = ds.batch(batch_size)\n    return ds","3790e761":"batch_size = 5 # A small batch sized is used for demonstration purposes\ntrain_ds = df_to_dataset(train, batch_size=batch_size)\nval_ds = df_to_dataset(val, shuffle=False, batch_size=batch_size)\ntest_ds = df_to_dataset(test, shuffle=False, batch_size=batch_size)","2ea69c25":"for feature_batch, label_batch in train_ds.take(1):\n    print('Every feature:', list(feature_batch.keys()))\n    print('A batch of ages:', feature_batch['Age'])\n    print('A batch of targets:', label_batch )","4de614ce":"# We will use this batch to demonstrate several types of feature columns\nexample_batch = next(iter(train_ds))[0]\n\n# A utility method to create a feature column\n# and to transform a batch of data\ndef demo(feature_column):\n    feature_layer = layers.DenseFeatures(feature_column)\n    print(feature_layer(example_batch).numpy())","22bc0016":"photo_count = feature_column.numeric_column('PhotoAmt')\ndemo(photo_count)","bfe59301":"age = feature_column.numeric_column('Age')\nage_buckets = feature_column.bucketized_column(age, boundaries=[1, 3, 5])\ndemo(age_buckets)","8458b939":"animal_type = feature_column.categorical_column_with_vocabulary_list('Type', ['Cat', 'Dog'])\n\nanimal_type_one_hot = feature_column.indicator_column(animal_type)\ndemo(animal_type_one_hot)","d749b581":"# Notice the input to the embedding column is the categorical column\n# we previously created\nbreed1 = feature_column.categorical_column_with_vocabulary_list('Breed1', dataframe.Breed1.unique())\nbreed1_embedding = feature_column.embedding_column(breed1, dimension=8)\ndemo(breed1_embedding)","e4d4a672":"breed1_hashed = feature_column.categorical_column_with_hash_bucket('Breed1', hash_bucket_size=10)\ndemo(feature_column.indicator_column(breed1_hashed))","f6112674":"crossed_feature = feature_column.crossed_column([age_buckets, animal_type], hash_bucket_size=10)\ndemo(feature_column.indicator_column(crossed_feature))","b2e91b9f":"feature_columns = []\n\n# numeric cols\nfor header in ['PhotoAmt', 'Fee', 'Age']:\n    feature_columns.append(feature_column.numeric_column(header))\n\n# bucketized cols\nage = feature_column.numeric_column('Age')\nage_buckets = feature_column.bucketized_column(age, boundaries=[1, 2, 3, 4, 5])\nfeature_columns.append(age_buckets)\n\n# indicator_columns\nindicator_column_names = ['Type', 'Color1', 'Color2', 'Gender', 'MaturitySize', 'FurLength', 'Vaccinated', 'Sterilized', 'Health']\nfor col_name in indicator_column_names:\n    categorical_column = feature_column.categorical_column_with_vocabulary_list(col_name, dataframe[col_name].unique())\n    indicator_column = feature_column.indicator_column(categorical_column)\n    feature_columns.append(indicator_column)\n    \n# embedding columns\nbreed1 = feature_column.categorical_column_with_vocabulary_list('Breed1', dataframe.Breed1.unique())\nbreed1_embedding = feature_column.embedding_column(breed1, dimension=8)\nfeature_columns.append(breed1_embedding)\n\n# crossed columns\nage_type_feature = feature_column.crossed_column([age_buckets, animal_type], hash_bucket_size=100)\nfeature_columns.append(feature_column.indicator_column(age_type_feature))","3eacceca":"feature_layer = tf.keras.layers.DenseFeatures(feature_columns)","80cd44c2":"batch_size = 12\ntrain_ds = df_to_dataset(train, batch_size=batch_size)\nval_ds = df_to_dataset(val, shuffle=False, batch_size=batch_size)\ntest_ds = df_to_dataset(test, shuffle=False, batch_size=batch_size)","3961f662":"model = tf.keras.Sequential([ feature_layer,\n                             layers.Dense(128, activation='relu'),\n                             layers.Dense(128, activation='relu'),\n                             layers.Dropout(.1),\n                             layers.Dense(1)])","59fd6dcb":"model.compile(optimizer='adam', \n              loss=tf.keras.losses.BinaryCrossentropy(from_logits=True), \n              metrics=['accuracy'])\n\ntrain_history = model.fit(train_ds,\n                          validation_data=val_ds, \n                          epochs=30)","bf439823":"loss, accuracy = model.evaluate(test_ds)\nprint(\"Accuracy\", accuracy)","3889b98e":"def visualize_training(history, lw = 3):\n    import matplotlib.pyplot as plt\n    plt.figure(figsize=(10,10))\n    plt.subplot(2,1,1)\n    plt.plot(history.history['accuracy'], label = 'training', marker = '*', linewidth = lw)\n    plt.plot(history.history['val_accuracy'], label = 'validation', marker = 'o', linewidth = lw)\n    plt.title('Accuracy Comparison')\n    plt.xlabel('Epochs')\n    plt.ylabel('Accuracy')\n    plt.grid(True)\n    plt.legend(fontsize = 'x-large')\n    \n\n    plt.subplot(2,1,2)\n    plt.plot(history.history['loss'], label = 'training', marker = '*', linewidth = lw)\n    plt.plot(history.history['val_loss'], label = 'validation', marker = 'o', linewidth = lw)\n    plt.title('Loss Comparison')\n    plt.xlabel('Epochs')\n    plt.ylabel('Loss')\n    plt.legend(fontsize = 'x-large')\n    plt.grid(True)\n    plt.show()\n\n#     plt.figure(figsize=(10,5))\n#     plt.plot(history.history['lr'], label = 'lr', marker = '*',linewidth = lw)\n#     plt.title('Learning Rate')\n#     plt.xlabel('Epochs')\n#     plt.ylabel('Learning Rate')\n#     plt.grid(True)\n#     plt.show()","fc62c43c":"visualize_training(train_history)","a90d8f9a":"### Bucketized columns\nOften, you don't want to feed a number directly into the model, but instead split its value into different categories based on numerical ranges. Consider raw data that represents a person's age. Instead of representing age as a numeric column, we could split the age into several buckets using a [bucketized column](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/feature_column\/bucketized_column). Notice the one-hot values below describe which age range each row matches.","30bc29aa":"## Create, compile, and train the model","e7357d1e":"### Hashed feature columns\n\nAnother way to represent a categorical column with a large number of values is to use a [categorical_column_with_hash_bucket](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/feature_column\/categorical_column_with_hash_bucket). This feature column calculates a hash value of the input, then selects one of the `hash_bucket_size` buckets to encode a string. When using this column, you do not need to provide the vocabulary, and you can choose to make the number of hash_buckets significantly smaller than the number of actual categories to save space.\n\nKey point: An important downside of this technique is that there may be collisions in which different strings are mapped to the same bucket. In practice, this can work well for some datasets regardless.","97fd9e06":"Earlier, we used a small batch size to demonstrate how feature columns worked. We create a new input pipeline with a larger batch size.","7bfc30b5":"## Understand the input pipeline\n\nNow that we have created the input pipeline, let's call it to see the format of the data it returns. We have used a small batch size to keep the output readable.","fd080df7":"## Choose which columns to use\nWe have seen how to use several types of feature columns. Now we will use them to train a model. The goal of this tutorial is to show you the complete code (e.g. mechanics) needed to work with feature columns. We have selected a few columns to train our model below arbitrarily.\n\nKey point: If your aim is to build an accurate model, try a larger dataset of your own, and think carefully about which features are the most meaningful to include, and how they should be represented.","895af9c3":"## Create an input pipeline using tf.data\n\nNext, we will wrap the dataframes with [tf.data](https:\/\/www.tensorflow.org\/guide\/datasets). This will enable us  to use feature columns as a bridge to map from the columns in the Pandas dataframe to features used to train the model. If we were working with a very large CSV file (so large that it does not fit into memory), we would use tf.data to read it from disk directly. That is not covered in this tutorial.","7e37a111":"### Crossed feature columns\nCombining features into a single feature, better known as [feature crosses](https:\/\/developers.google.com\/machine-learning\/glossary\/#feature_cross), enables a model to learn separate weights for each combination of features. Here, we will create a new feature that is the cross of Age and Type. Note that `crossed_column` does not build the full table of all possible combinations (which could be very large). Instead, it is backed by a `hashed_column`, so you can choose how large the table is.","1c0255ae":"## Demonstrate several types of feature columns\nTensorFlow provides many types of feature columns. In this section, we will create several types of feature columns, and demonstrate how they transform a column from the dataframe.","bf6d79d4":"## Split the dataframe into train, validation, and test\n\nThe dataset we downloaded was a single CSV file. We will split this into train, validation, and test sets.","c4004d11":"### Embedding columns\nSuppose instead of having just a few possible strings, we have thousands (or more) values per category. For a number of reasons, as the number of categories grow large, it becomes infeasible to train a neural network using one-hot encodings. We can use an embedding column to overcome this limitation. Instead of representing the data as a one-hot vector of many dimensions, an [embedding column](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/feature_column\/embedding_column) represents that data as a lower-dimensional, dense vector in which each cell can contain any number, not just 0 or 1. The size of the embedding (8, in the example below) is a parameter that must be tuned.\n\nKey point: using an embedding column is best when a categorical column has many possible values. We are using one here for demonstration purposes, so you have a complete example you can modify for a different dataset in the future.","a6101667":"This tutorial demonstrates how to classify structured data (e.g. tabular data in a CSV). I will use [Keras](https:\/\/www.tensorflow.org\/guide\/keras) to define the model, and [feature columns](https:\/\/www.tensorflow.org\/guide\/feature_columns) as a bridge to map from columns in a CSV to features used to train the model. This tutorial contains complete code to:\n\n* Load a CSV file using [Pandas](https:\/\/pandas.pydata.org\/).\n* Build an input pipeline to batch and shuffle the rows using [tf.data](https:\/\/www.tensorflow.org\/guide\/datasets).\n* Map from columns in the CSV to features used to train the model using feature columns.\n* Build, train, and evaluate a model using Keras.\n\n## The Dataset\n\nWe will use a simplified version of the PetFinder [dataset](https:\/\/www.kaggle.com\/c\/petfinder-adoption-prediction). \nThere are several thousand rows in the CSV. Each row describes a pet, and each column describes an attribute. \nWe will use this information to predict the speed at which the pet will be adopted.\n\nFollowing is a description of this dataset. Notice there are both numeric and categorical columns. There is a free text column which we will not use in this tutorial.\n\nColumn | Description| Feature Type | Data Type\n------------|--------------------|----------------------|-----------------\nType | Type of animal (Dog, Cat) | Categorical | string\nAge |  Age of the pet | Numerical | integer\nBreed1 | Primary breed of the pet | Categorical | string\nColor1 | Color 1 of pet | Categorical | string\nColor2 | Color 2 of pet | Categorical | string\nMaturitySize | Size at maturity | Categorical | string\nFurLength | Fur length | Categorical | string\nVaccinated | Pet has been vaccinated | Categorical | string\nSterilized | Pet has been sterilized | Categorical | string\nHealth | Health Condition | Categorical | string\nFee | Adoption Fee | Numerical | integer\nDescription | Profile write-up for this pet | Text | string\nPhotoAmt | Total uploaded photos for this pet | Numerical | integer\nAdoptionSpeed | Speed of adoption | Classification | integer\n","ab2788f2":"### There are some advanced model which are suitable for classifying the tabular data. They are working extremely well on different datasets. However each of them has their strengths and weaknesses. Gradually we will work our way up to those advanced methods and learn new things.  Upvote this notebook if you feel this worthy. It keeps me motivated to learn newer things. ","10bd13f3":"### Categorical columns\nIn this dataset, Type is represented as a string (e.g. 'Dog', or 'Cat'). We cannot feed strings directly to a model. Instead, we must first map them to numeric values. The categorical vocabulary columns provide a way to represent strings as a one-hot vector (much like you have seen above with age buckets). The vocabulary can be passed as a list using [categorical_column_with_vocabulary_list](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/feature_column\/categorical_column_with_vocabulary_list), or loaded from a file using [categorical_column_with_vocabulary_file](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/feature_column\/categorical_column_with_vocabulary_file).","5ca85cb4":"## Create target variable\n\nThe task in the original dataset is to predict the speed at which a pet will be adopted (e.g., in the first week, the first month, the first three months, and so on). Let's simplify this for our tutorial. Here, we will transform this into a binary classification problem, and simply predict whether the pet was adopted, or not.\n\nAfter modifying the label column, 0 will indicate the pet was not adopted, and 1 will indicate it was.","775cf5ba":"## Use Pandas to create a dataframe\n\n[Pandas](https:\/\/pandas.pydata.org\/) is a Python library with many helpful utilities for loading and working with structured data. We will use Pandas to download the dataset from a URL, and load it into a dataframe.","0a26efb1":"### Create a feature layer\nNow that we have defined our feature columns, we will use a [DenseFeatures](https:\/\/www.tensorflow.org\/versions\/r2.0\/api_docs\/python\/tf\/keras\/layers\/DenseFeatures) layer to input them to our Keras model.","ccb4cb55":"### Numeric columns\nThe output of a feature column becomes the input to the model (using the demo function defined above, we will be able to see exactly how each column from the dataframe is transformed). A [numeric column](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/feature_column\/numeric_column) is the simplest type of column. It is used to represent real valued features. When using this column, your model will receive the column value from the dataframe unchanged."}}