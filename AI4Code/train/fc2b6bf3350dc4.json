{"cell_type":{"f8bd8c43":"code","d882744a":"code","f723979e":"code","7ee27d8d":"code","575b7019":"code","ec1aa791":"code","b5cb970f":"code","45397af9":"code","22807828":"code","f52b2f45":"code","d2adc29e":"code","903dd3f1":"code","7c184670":"code","098120dd":"code","7c3260e8":"code","47ecb8ec":"code","9cbd863c":"code","b31e2310":"code","f202b198":"code","1dcdd6b6":"code","a11e4190":"code","8d8f304e":"code","57b8a738":"code","87f9b235":"code","51bf3bd8":"code","5a5ca088":"code","4f1b237f":"code","d9ecf87c":"code","ef6d07eb":"code","8960e7bf":"code","da6ac29b":"code","80086225":"code","190ef80c":"code","0e097df3":"code","5c065b62":"code","89838cc3":"code","66a7378a":"code","bb14f910":"code","670053e2":"code","c302a981":"code","7923c9c2":"code","98357851":"code","f8fd1926":"code","34bfbe33":"code","72ef616b":"code","4515c85a":"code","a479e1ed":"code","eb124dad":"code","f4ae3717":"code","516f3ad9":"code","ad51cecc":"code","bdcd7035":"code","391031d4":"code","591e470f":"code","644c1b16":"code","2b3c30ce":"markdown","44d769fb":"markdown","bdded89a":"markdown","4d088cad":"markdown","e8c2324b":"markdown","c2e066b6":"markdown","c2c08559":"markdown","03136fc5":"markdown","79454085":"markdown","1464822c":"markdown","82644d06":"markdown","c0c30a8a":"markdown","0c4d76de":"markdown","57a55eb9":"markdown","0070d847":"markdown","502a6002":"markdown","94e4252e":"markdown","932044cb":"markdown","7bacfb04":"markdown","15a1e06e":"markdown","98860d9f":"markdown","09e663d1":"markdown","31c2579e":"markdown","5463892a":"markdown","46d02f20":"markdown","9bb54ec8":"markdown"},"source":{"f8bd8c43":"from __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\nfrom __future__ import unicode_literals\n\nimport torch\nfrom torch.jit import script, trace\nimport torch.nn as nn\nfrom torch import optim\nimport torch.nn.functional as F\nimport csv\nimport random\nimport re\nimport os\nimport unicodedata\nimport codecs\nfrom io import open\nimport itertools\nimport math\nimport time\n\ndevice = \"cpu\"","d882744a":"corpus = \"..\/input\/\"\n#corpus = os.path.join(\"data\", corpus_name)","f723979e":"# to read or write files use open\n# to access file module use os\nlines_filepath = os.path.join(corpus, \"movie_lines.txt\")\nconv_filepath = os.path.join(corpus, \"movie_conversations.txt\")","7ee27d8d":"# visualise some lines\nwith open(lines_filepath, 'r',encoding = \"ISO-8859-1\") as file:\n    lines = file.readlines()\nfor line in lines[:8]:\n    print(line.strip()) \n# displayOrder: lineid charID movieID charNAME utterance\nprint()\n# visualise some conversations\nwith open(conv_filepath, 'r',encoding = \"ISO-8859-1\") as file:\n    conv = file.readlines()\nfor line in conv[:8]:\n    print(line.strip()) \n# displayOrder: char1ID char2ID movieID lineIDs","575b7019":"# Splits each line of the file into a dictionary of fields(lineID, charID, movieID, characterNAME, text)\nline_fields = [\"lineID\", \"characterID\", \"movieID\", \"character\", \"text\"]\nlines = {} # empty dictionary\nwith open(lines_filepath, 'r', encoding='iso-8859-1') as f:\n    for line in f:\n        values = line.split(\" +++$+++ \")\n        # Extarct fields\n        lineObj = {}\n        for i, field in enumerate(line_fields):\n            lineObj[field] = values[i]\n        lines[lineObj['lineID']] = lineObj # key is lineID","ec1aa791":"# lines\nlist(lines.items())[:2]","b5cb970f":"# process the conversations\n# Group fields of lines from 'LoadLines' into conversatons based on 'movie_conversations.txt'\nconv_fields = [\"character1ID\", \"character2ID\", \"movieID\", \"utteranceIDs\"]\nconversations = []\nwith open(conv_filepath, 'r', encoding='iso-8859-1') as f:\n    for line in f:\n        values = line.split(\" +++$+++ \")\n        # Extract fields\n        convObj = {}\n        for i, field in enumerate(conv_fields):\n            convObj[field] = values[i]\n#       Convert string resulted from split to list, since ConvObj[\"utterancesIDs\"] == \"['L8299', ...]\"\n        # remember that utterance ID is the LineID\n        lineIDs = eval(convObj[\"utteranceIDs\"])\n        # Reassamble lines\n        convObj[\"lines\"] = []\n        for lineID in lineIDs:\n            convObj[\"lines\"].append(lines[lineID])\n        conversations.append(convObj)","45397af9":"conversations[0]","22807828":"conversations[0][\"lines\"][0][\"text\"].strip() # with strip '\/n' is discarded","f52b2f45":"# processing the dataset part 3\n# Extract pair of sentences from conversations\n# ques ans pair\nqa_pairs = []\nfor conversation in conversations:\n    for i in range(len(conversation[\"lines\"]) - 1):\n        inputLine = conversation[\"lines\"][i][\"text\"].strip()\n        targetLine = conversation[\"lines\"][i+1][\"text\"].strip()\n        # filter wrong results\n        if inputLine and targetLine:\n            qa_pairs.append([inputLine, targetLine])","d2adc29e":"qa_pairs[2]","903dd3f1":"corpus2 = \"..\/working\/\"\n#corpus = os.path.join(\"data\", corpus_name)\n\n# Define path to new file\ndatafile = os.path.join(corpus2, \"formatted_movie_lines.txt\")\ndelimiter = '\\t'\n# Unescape the delimiter\ndelimiter = str(codecs.decode(delimiter, \"unicode_escape\"))\n\n# write new csv file note that it is tab seperated not comma seperated\nprint(\"\\nWriting newly formatted file...\")\nwith open(datafile, 'w', encoding='utf-8') as outputfile:\n    writer = csv.writer(outputfile, delimiter = delimiter, lineterminator='\\n')\n    for pair in qa_pairs:\n        writer.writerow(pair)\nprint(\"Done writing to file\")","7c184670":"# visualise some lines\ndatafile = os.path.join(corpus2, \"formatted_movie_lines.txt\")\nwith open(datafile, 'rb') as file:\n    lines = file.readlines()\nfor line in lines[:10]:\n    print(line)","098120dd":"# Processing the words\nPAD_token = 0 # used for padding short sentences\nSOS_token = 1 # Start of sent token\nEOS_token = 2 # End of Sent token\n\nclass Vocabulary:\n    def __init__(self, name):\n        self.name = name\n        self.word2index = {}\n        self.word2count = {}\n        self.index2word = {PAD_token: \"PAD\", SOS_token: \"SOS\", EOS_token: \"EOS\"}\n        self.num_words = 3 # Count SOS, EOS, PAD\n        \n    def addSentence(self, sentence):\n        for word in sentence.split(' '):\n            self.addWord(word)\n    # add index(unique value) for each word\n    def addWord(self, word):\n        if word not in self.word2index:\n            self.word2index[word] = self.num_words # just opp of 3rd line\n            self.word2count[word] = 1\n            self.index2word[self.num_words] = word\n            self.num_words += 1\n        else:\n            self.word2count[word] += 1\n            \n    # remove words that don't pass min count\n    def trim(self, min_count):\n        keep_words = []\n        for k, v in self.word2count.items():\n            if v >= min_count:\n                keep_words.append(k)\n                \n        # print words that are kept\n        print('keep_words {} \/ {} = {:.4f}'.format(len(keep_words), len(self.word2index), len(keep_words) \/ len(self.word2index)))\n        # Reinitailize dictionaries\n        self.word2index = {}\n        self.word2count = {}\n        self.index2word = {PAD_token: \"PAD\", SOS_token: \"SOS\", EOS_token: \"EOS\"}\n        self.num_words = 3 # Count SOS, EOS, PAD\n\n        for word in keep_words:\n            self.addWord(word)","7c3260e8":"sen = \"hi ali bin arshad\"\nsen.split()","47ecb8ec":"# turn unicode string to plain ASCII\n# nfd: normal form decomposed\n# mn: normalized\ndef unicodeToAscii(s):\n    return ''.join(c for c in unicodedata.normalize('NFD', s) if unicodedata.category(c)!= 'Mn')","9cbd863c":"''.join(['a','l','i'])","b31e2310":"# Lowercase, trim, and remove non-letter characters\ndef normalizeString(s):\n    s = unicodeToAscii(s.lower().strip())\n    # re.sub = Subsitute any .!? by a whitespace + the character\n    # r is to not consider \\1 as a character(r to escape a backslash)\n    s = re.sub(r\"([.!?])\", r\" \\1\", s)\n    # remove any char that is not a sequence of lower or upper character\n    # + means one or more\n    s = re.sub(r\"[^a-zA-Z.!?]+\", r\" \", s)\n    # remove seq of whitespace charactersc\n    s = re.sub(r\"\\s+\", r\" \", s).strip()\n    return s","f202b198":"# testing the funcion\nnormalizeString(\"aa123bcd!s's    ad?\")","1dcdd6b6":"datafile = os.path.join(corpus, \"formatted_movie_lines.txt\")\n\n# Read query\/response pairs and return voc object\ndef readVocs(datafile, corpus_name):\n    # Read the file and split into lines\n    print(\"Reading and processing file.....Plaese Wait!\")\n    lines = open(datafile, encoding='utf-8').read().strip().split('\\n') # conversatons are splitted by \\n\n    # Split every line into pair and normalize\n    pairs = [[normalizeString(s) for s in pair.split('\\t')] for pair in lines] # for each char(represented by pair) we are gonna normalize\n    print(\"Done Reading!\")\n    voc = Vocabulary(corpus_name)\n    return voc, pairs\n    \n","a11e4190":"# a = [i for i in range(0,10)]\n# a","8d8f304e":"# Returns True if boths sentences in a pair 'p' are under the MAX_LENGTH threshold\nMAX_LENGTH = 10 # Max sentence length to consider\ndef filterPair(p):\n    # Input sequences need to preserve the last word for EOS token\n    return len(p[0].split(' ')) < MAX_LENGTH and len(p[1].split(' ')) < MAX_LENGTH\n    # if True keep the pair else ignore\n# Filter pairs using filterPair condition\ndef filterPairs(pairs):\n    return [pair for pair in pairs if filterPair(pair)]\n\n# Using the functions defined above, return a populated voc object and pairs list\ndef loadPrepareData(corpus, corpus_name, datafile, save_dir):\n    print(\"Start preparing training data ...\")\n    voc, pairs = readVocs(datafile, corpus_name)\n    print(\"Read {!s} sentence pairs\".format(len(pairs)))\n    pairs = filterPairs(pairs)\n    print(\"Trimmed to {!s} sentence pairs\".format(len(pairs)))\n    print(\"Counting words...\")\n#      Word 2 index word conversion occurs here\n    for pair in pairs:\n        voc.addSentence(pair[0])\n        voc.addSentence(pair[1])\n    print(\"Counted words:\", voc.num_words)\n    return voc, pairs\n\n\n# Load\/Assemble voc and pairs\nsave_dir = os.path.join(\"data\", \"save\")\nvoc, pairs = loadPrepareData(corpus, corpus_name, datafile, save_dir)\n# Print some pairs to validate\nprint(\"\\npairs:\")\nfor pair in pairs[:10]:\n    print(pair)\n","57b8a738":"# We don't want our model to have words which appeared less than 3 times\nMIN_COUNT = 3\n\ndef trimRareWords(voc, pairs, MIN_COUNT):\n    # Trim words less than MIN_COUNT from voc\n    voc.trim(MIN_COUNT) # Function from class voc\n    # filter out pairs with trimmed words\n    keep_pairs = []\n    for pair in pairs:\n        input_sequence = pair[0]\n        output_sequence = pair[1]\n        keep_input = True\n        keep_output = True\n        # Check input Sequence\n        for word in input_sequence.split(' '):\n            if word not in voc.word2index: # voc.word2index contains filtered words\n                keep_input = False\n                break\n        # now check output sequence\n        for word in output_sequence.split(' '):\n            if word not in voc.word2index:\n                keep_output = False\n                break\n                \n        # only keep words that are not trimmed in in or out seq\n        if keep_input and keep_output:\n            keep_pairs.append(pair)\n            \n    print(\"Trimmed from {} pairs to {}, {:.4f} of total\".format(len(pairs), len(keep_pairs), len(keep_pairs) \/ len(pairs)))\n    return keep_pairs\n        \n# trim voc and pairs\npairs = trimRareWords(voc, pairs, MIN_COUNT)","87f9b235":"# preparing data part1\n# returns converted word 2 index\ndef indexesFromSentence(voc, sentence):\n    return [voc.word2index[word] for word in sentence.split(' ')]+ [EOS_token]","51bf3bd8":"pairs[1][0]","5a5ca088":"# Testing function\nindexesFromSentence(voc,pairs[1][0])\n# 2 at the end of output represents EOS_token","4f1b237f":"# Define some samples for testing\ninp = []\nout = []\n# print(pairs[1])\nfor pair in pairs[:10]:\n    inp.append(pair[0])\n    out.append(pair[1])\nprint(inp)\nprint(len(inp))\nindexes = [indexesFromSentence(voc, sentence) for sentence in inp]\nindexes","d9ecf87c":"a = ['A', 'B', 'C', 'D', 'E']\nb = [1, 2, 3]\nprint(list(zip(a,b)))\nlist(itertools.zip_longest(a,b))","ef6d07eb":"# Preparing data for model part 2\na = [[3, 4, 2],\n [7, 8, 9, 10, 4, 11, 12, 13, 2],\n [16, 4, 2],\n [8, 31, 22, 6, 2],\n [33, 34, 4, 4, 4, 2],\n [35, 36, 37, 38, 7, 39, 40, 41, 4, 2],\n [42, 2],\n [47, 7, 48, 40, 45, 49, 6, 2],\n [50, 51, 52, 6, 2],\n [58, 2]]\n","8960e7bf":"list(itertools.zip_longest(*a, fillvalue = 0))","da6ac29b":"def zeroPadding(l, fillValue = 0):\n    return list(itertools.zip_longest(*l, fillvalue=fillValue))","80086225":"leng = [len(ind) for ind in indexes]\nmax(leng)","190ef80c":"# Test the function\ntest_result = zeroPadding(indexes)\nprint(len(test_result))\ntest_result","0e097df3":"# data modelling part 3\n# l contains the index value of each word\n# remember that pad+token is 0\ndef binaryMatrix(l, value=0):\n    m = []\n    for i, seq in enumerate(l):\n        m.append([])\n        for token in seq:\n            if token == PAD_token:\n                m[i].append(0)\n            else:\n                m[i].append(1)\n    return m","5c065b62":"binary_result = binaryMatrix(test_result)\nbinary_result","89838cc3":"#  Returns padded input tensor and a tensor of lengths for each or the sequences in the batch\n# l is going to be questions not replies, i.e. only what the first char said\ndef inputVar(l, voc):\n    indexes_batch = [indexesFromSentence(voc, sentence) for sentence in l]\n    lengths = torch.tensor([len(indexes) for indexes in indexes_batch])\n    padList = zeroPadding(indexes_batch)\n    padVar = torch.LongTensor(padList)\n    return padVar, lengths","66a7378a":"# returns padded target sequence tensor, padding mask and max target len\n# this one is for all replies\ndef outputVar(l, voc):\n    indexes_batch = [indexesFromSentence(voc, sentence) for sentence in l]\n    max_target_len = max([len(indexes) for indexes in indexes_batch])\n    padList = zeroPadding(indexes_batch)\n    mask = binaryMatrix(padList)\n    mask = torch.ByteTensor(mask)\n    padVar = torch.LongTensor(padList)\n    return padVar, mask, max_target_len","bb14f910":"pairs[20000]","670053e2":"# Returns all items for a given batch of pairs\ndef batch2TrainData(voc, pair_batch):\n    # Sorts the ques in descending order as shown in img above\n    pair_batch.sort(key=lambda x:len(x[0].split(\" \")), reverse=True)\n    input_batch, output_batch = [], []\n    for pair in pair_batch:\n        input_batch.append(pair[0])\n        output_batch.append(pair[1])\n    inp, lengths = inputVar(input_batch, voc)\n    # assert len(inp) == lengyh[0]\n    output, mask, max_target_len = outputVar(output_batch, voc)\n    return inp, lengths, output, mask, max_target_len","c302a981":"# Example for validation\nsmall_batch_size = 5\nbatches = batch2TrainData(voc, [random.choice(pairs) for i in range(small_batch_size)])\ninput_variable, lengths, target_variable, mask, max_target_len = batches\n\nprint(\"input variable:\")\nprint(input_variable)\nprint(\"lengths: \", lengths)\nprint(\"target_variable:\")\nprint(target_variable)\nprint(\"mask:\")\nprint(mask)\nprint(\"max_target_len:\", max_target_len)\n","7923c9c2":"# encoder class inherited from nn.Module\n# hidden size: how many RNN cells are there in hidden layer\n# embedding: converts index to dense vector of values\n# size of embedding = number of input features\n# seq is the timestep\nclass EncoderRNN(nn.Module):\n    def __init__(self, hidden_size, embedding, n_layers=1, dropout=0):\n        super(EncoderRNN, self).__init__()\n        self.n_layers = n_layers\n        self.hidden_size = hidden_size\n        self.embedding = embedding\n        \n        # the input_size & hidden_size params are both set to 'hidden_size'\n        self.gru = nn.GRU(hidden_size, hidden_size, n_layers, dropout=(0 if n_layers == 1 else dropout), bidirectional=True)\n    \n    # overridden forward function of class nn.Module\n    def forward(self, input_seq, input_lengths, hidden=None):\n        # input_seq: batch of input sentences; shape=(max_length, batch_size)\n        # input_lengths: list of sentence lengths corresponding to each sentence in the batch\n        # hidden state of shape:(n_layers times num_directions(2 in this case), batch_size, hidden_size)\n        \n        # convert word indexes to embeddings\n        embedded = self.embedding(input_seq)\n        # pack padded batch of sequences for RNN module\n        packed = torch.nn.utils.rnn.pack_padded_sequence(embedded, input_lengths)\n        # Forward pass through  GRU\n        outputs, hidden = self.gru(packed, hidden)\n        # Unpack padding\n        outputs, _ = torch.nn.utils.rnn.pad_packed_sequence(outputs)\n        # Sum bidirectional gru outputs\n        outputs = outputs[:, :, :self.hidden_size] + outputs[:, :, self.hidden_size:]\n        # Return output from final hidden state\n        # outputs: (timesteps, batch, hidden_size)\n        return outputs, hidden\n        # outputs: the output features h_t from the last layer of GRU, for each timestep(sum of bidirectional outputs)\n        # hidden: hidden state for the last timestep, of shape=(n_layers x mum_directions, batch_size, hidden_size)\n    ","98357851":"# Understanding Pack Padded Sequence","f8fd1926":"# decoder is built with attention mechanism","34bfbe33":"# Luong attention layer\nclass Attn(torch.nn.Module):\n    def __init__(self, method, hidden_size): # method can be dot, general or concat\n        super(Attn, self).__init__()\n        self.method = method\n        if self.method not in ['dot', 'general', 'concat']:\n            raise ValueError(self.method, \"is not an appropriate attention method.\")\n        self.hidden_size = hidden_size\n        if self.method == 'general':\n            self.attn = torch.nn.Linear(self.hidden_size, hidden_size)\n        elif self.method == 'concat':\n            self.attn = torch.nn.Linear(self.hidden_size * 2, hidden_size)\n            self.v = torch.nn.Parameter(torch.FloatTensor(hidden_size))\n        \n    def dot_score(self, hidden, encoder_output): # hidden is the decoder output at certain timestep\n     # Element wise multiplication of current target state with the encoder output and sum them\n        return torch.sum(hidden * encoder_output, dim=2)\n\n    def general_score(self, hidden, encoder_output):\n        energy = self.attn(encoder_output)\n        return torch.sum(hidden * energy, dim=2)\n\n    def concat_score(self, hidden, encoder_output):\n        energy = self.attn(torch.cat((hidden.expand(encoder_output.size(0), -1, -1), encoder_output), 2)).tanh()\n        return torch.sum(self.v * energy, dim=2)\n    \n    def forward(self, hidden, encoder_outputs):\n        # hidden of shape:(1,batch_size, hidden_size)\n        # encoder output shape: (max_length, batch_size, hidden_size)\n        # comment 3:(1, batch_size, hidden_size) * (max_length, batch_size, hidden_size) = (max_length, batch_size, hidden_size)\n        \n        # calculate the attention weights(energies)\n        if self.method == 'general':\n            attn_energies = self.general_score(hidden, encoder_outputs)\n        elif self.method == 'concat':\n            attn_energies = self.concat_score(hidden, encoder_outputs)\n        elif self.method == 'dot':\n            attn_energies = self.dot_score(hidden, encoder_outputs) # (max_length, batch_size)\n        # Transpose max_length and batch_size dimensions\n        attn_energies = attn_energies.t()\n        # Return the softmax normalized probability scores(with added dimension)\n        return F.softmax(attn_energies, dim=1).unsqueeze(1) # (batch_size, 1, max_length)\n    # softmax: sum of entire row is 1\n    ","72ef616b":"# understanding of comment 3\n# summing across dim=2 means we're summing all the cols of each row\na = torch.randn(5,3,7)\nprint(a)\ntorch.sum(a, dim=2)","4515c85a":"# Designing the Decoder 1\n# We are using the attention to build decoder\n# note that data is(max_length,batch_size)\n# we feed data row by row to every GRU   \n# output from encoder is fed to 1st timestep of decoder\n# dropout drops random num of neurons in each layer, helps neurons not to be dependent on each other\n\n\nclass LuongAttnDecoderRNN(nn.Module):\n    def __init__(self, attn_model, embedding, hidden_size, output_size, n_layers=1, dropout=0.1):\n        super(LuongAttnDecoderRNN, self).__init__()\n        self.attn_model = attn_model\n        self.hidden_size = hidden_size\n        self.output_size = output_size\n        self.n_layers = n_layers\n        self.dropout = dropout\n        \n        # Define layers\n        self.embedding = embedding\n        self.embedding_dropout = nn.Dropout(dropout)\n        self.gru = nn.GRU(hidden_size, hidden_size, n_layers, dropout=(0 if n_layers == 1 else dropout))\n        self.concat = nn.Linear(hidden_size * 2, hidden_size)\n        self.out = nn.Linear(hidden_size, output_size)\n        \n        self.attn = Attn(attn_model, hidden_size)\n        \n    def forward(self, input_step, last_hidden, encoder_outputs):\n        # input_step: one time step (one word) of input sequence batch; shape=(1, batch_size)\n        # last_hidden: final hidden state of encoder GRU; shape=(n_layers x num_directions, batch_size, hidden_state)\n        # encoder_outputs: encoder model's output; shape=(seq_len, batch, num_directions * hidden_size)\n        # Note: we run this one step (batch of words) at a time\n        \n        # Get embedding of current input word\n        # nn.Embedding as a lookup table where the key is the word index and the value is the corresponding word vector\n        embedded = self.embedding(input_step)\n        embedded = self.embedding_dropout(embedded)\n        # Forward through unidirectional GRU\n        rnn_output, hidden = self.gru(embedded, last_hidden)\n        # rnn_output of shape = (1, batch, num_directions * hidden_size)\n        # hidden of shape = (num_layers * num_directions, batch, hidden_size)\n        # hidden is the hidden state of the current time step of GRU\n        \n        # Calculate attention weights from the current GRU output\n        attn_weights = self.attn(rnn_output, encoder_outputs)\n        # Multiply attention weights to encoder outputs to get new weighted sum context vector\n        # (batch_size, 1m max_lengths) bmm(batch multiplication) with (batch_size, max_length, hidden) = (batch_size, 1, hidden)\n        context = attn_weights.bmm(encoder_outputs.transpose(0, 1))\n        # Concatenate weighted vectors and GRU output\n        rnn_output = rnn_output.squeeze(0)\n        context = context.squeeze(1)\n        concat_input = torch.cat((rnn_output, context), 1) # 1 is the dimencion of concatenation\n        # concat_input: (batch_size, hidden_size * 2)\n        concat_output = torch.tanh(self.concat(concat_input))\n        # Predict next word using Luong eq. 6\n        output = self.out(concat_output)\n        output = F.softmax(output, dim=1)\n        # return output and final hidden state\n        return output, hidden\n        # output: sofmax normalized tensor giving probabilies of each word being the correct next word in decoded sequencw\n        # shape: (batch_size, voc.num_words)\n        # hidden: final hidden state of GRU; shape=(n_layers x num_directions, batch_size, hidden_size)\n        ","a479e1ed":"# calculate loss only for non 0 elements\n# mask is what was returned above \u25b2\n# we calc loss btw decoder output and target\n\n# NLLL: Negative Log Likelihood Loss\n# def maskNLLLoss(decoder_out, target, mask):\n#     nTotal = mask.sum()# gives how many non zerro elements we have, that we consider\n#     target = target.view(-1,1)\n#     # decoder_out shape: (batch_size, vocab_size), target_size = (batch_size, 1)\n#     gathered_tensor = torch.gather(decoder_out, 1, target)\n#     # calc the NLLL\n#     crossEntropy = -torch.log(gathered_tensor)\n#     # Select the non-zer0 elements\n#     loss = crossEntropy.masked_select(mask) # loss is only for non-zere\n#     # calc teh mean of loss\n#     loss = loss.mean()\n# #     loss = loss.to(device) for cuda\n#     return loss, nTotal.item()\n\ndef maskNLLLoss(inp, target, mask):\n    nTotal = mask.sum()\n    crossEntropy = -torch.log(torch.gather(inp, 1, target.view(-1, 1)).squeeze(1))\n    loss = crossEntropy.masked_select(mask).mean()\n    loss = loss.to(device)\n    return loss, nTotal.item()\n","eb124dad":"def train(input_variable, lengths, target_variable, mask, max_target_len, encoder, decoder, embedding,\n          encoder_optimizer, decoder_optimizer, batch_size, clip, max_length=MAX_LENGTH):\n\n    # Zero gradients\n    encoder_optimizer.zero_grad()\n    decoder_optimizer.zero_grad()\n\n#     # Set device options\n#     input_variable = input_variable.to(device)\n#     lengths = lengths.to(device)\n#     target_variable = target_variable.to(device)\n#     mask = mask.to(device)\n\n    # Initialize variables\n    loss = 0\n    print_losses = []\n    n_totals = 0\n\n    # Forward pass through encoder\n    encoder_outputs, encoder_hidden = encoder(input_variable, lengths)\n\n    # Create initial decoder input (start with SOS tokens for each sentence)\n    decoder_input = torch.LongTensor([[SOS_token for _ in range(batch_size)]])\n#     decoder_input = decoder_input.to(device)\n\n    # Set initial decoder hidden state to the encoder's final hidden state\n    decoder_hidden = encoder_hidden[:decoder.n_layers]\n\n    # Determine if we are using teacher forcing this iteration\n    use_teacher_forcing = True if random.random() < teacher_forcing_ratio else False\n\n    # Forward batch of sequences through decoder one time step at a time\n    if use_teacher_forcing:\n        for t in range(max_target_len):\n            decoder_output, decoder_hidden = decoder(\n                decoder_input, decoder_hidden, encoder_outputs\n            )\n            # Teacher forcing: next input is current target\n            decoder_input = target_variable[t].view(1, -1)\n            # Calculate and accumulate loss\n            mask_loss, nTotal = maskNLLLoss(decoder_output, target_variable[t], mask[t])\n            loss += mask_loss\n            print_losses.append(mask_loss.item() * nTotal)\n            n_totals += nTotal\n    else:\n        for t in range(max_target_len):\n            decoder_output, decoder_hidden = decoder(\n                decoder_input, decoder_hidden, encoder_outputs\n            )\n            # No teacher forcing: next input is decoder's own current output\n            _, topi = decoder_output.topk(1)\n            decoder_input = torch.LongTensor([[topi[i][0] for i in range(batch_size)]])\n#             decoder_input = decoder_input.to(device)\n            # Calculate and accumulate loss\n            mask_loss, nTotal = maskNLLLoss(decoder_output, target_variable[t], mask[t])\n            loss += mask_loss\n            print_losses.append(mask_loss.item() * nTotal)\n            n_totals += nTotal\n\n    # Perform backpropatation\n    loss.backward()\n\n    # Clip gradients: gradients are modified in place, solve exploding gradient problem\n    # parameters are weights\n    _ = torch.nn.utils.clip_grad_norm_(encoder.parameters(), clip)\n    _ = torch.nn.utils.clip_grad_norm_(decoder.parameters(), clip)\n\n    # Adjust model weights\n    encoder_optimizer.step()\n    decoder_optimizer.step()\n\n    return sum(print_losses) \/ n_totals","f4ae3717":"def trainIters(model_name, voc, pairs, encoder, decoder, encoder_optimizer, decoder_optimizer, embedding, encoder_n_layers, decoder_n_layers, save_dir, n_iteration, batch_size, print_every, save_every, clip, corpus_name, loadFilename):\n\n    # Load batches for each iteration\n    training_batches = [batch2TrainData(voc, [random.choice(pairs) for _ in range(batch_size)])\n                      for _ in range(n_iteration)]\n\n    # Initializations\n    print('Initializing ...')\n    start_iteration = 1\n    print_loss = 0\n    if loadFilename:\n        start_iteration = checkpoint['iteration'] + 1\n\n    # Training loop\n    print(\"Training...\")\n    for iteration in range(start_iteration, n_iteration + 1):\n        training_batch = training_batches[iteration - 1]\n        # Extract fields from batch\n        input_variable, lengths, target_variable, mask, max_target_len = training_batch\n\n        # Run a training iteration with batch\n        loss = train(input_variable, lengths, target_variable, mask, max_target_len, encoder,\n                     decoder, embedding, encoder_optimizer, decoder_optimizer, batch_size, clip)\n        print_loss += loss\n\n        # Print progress\n        if iteration % print_every == 0:\n            print_loss_avg = print_loss \/ print_every\n            print(\"Iteration: {}; Percent complete: {:.1f}%; Average loss: {:.4f}\".format(iteration, iteration \/ n_iteration * 100, print_loss_avg))\n            print_loss = 0\n\n        # Save checkpoint\n        if (iteration % save_every == 0):\n            directory = os.path.join(save_dir, model_name, corpus_name, '{}-{}_{}'.format(encoder_n_layers, decoder_n_layers, hidden_size))\n            if not os.path.exists(directory):\n                os.makedirs(directory)\n            torch.save({\n                'iteration': iteration,\n                'en': encoder.state_dict(),\n                'de': decoder.state_dict(),\n                'en_opt': encoder_optimizer.state_dict(),\n                'de_opt': decoder_optimizer.state_dict(),\n                'loss': loss,\n                'voc_dict': voc.__dict__,\n                'embedding': embedding.state_dict()\n            }, os.path.join(directory, '{}_{}.tar'.format(iteration, 'checkpoint')))","516f3ad9":"class GreedySearchDecoder(nn.Module):\n    def __init__(self, encoder, decoder):\n        super(GreedySearchDecoder, self).__init__()\n        self.encoder = encoder\n        self.decoder = decoder\n\n    def forward(self, input_seq, input_length, max_length):\n        # Forward input through encoder model\n        encoder_outputs, encoder_hidden = self.encoder(input_seq, input_length)\n        # Prepare encoder's final hidden layer to be first hidden input to the decoder\n        decoder_hidden = encoder_hidden[:decoder.n_layers]\n        # Initialize decoder input with SOS_token\n        decoder_input = torch.ones(1, 1, device=device, dtype=torch.long) * SOS_token\n        # Initialize tensors to append decoded words to\n        all_tokens = torch.zeros([0], device=device, dtype=torch.long)\n        all_scores = torch.zeros([0], device=device)\n        # Iteratively decode one word token at a time\n        for _ in range(max_length):\n            # Forward pass through decoder\n            decoder_output, decoder_hidden = self.decoder(decoder_input, decoder_hidden, encoder_outputs)\n            # Obtain most likely word token and its softmax score\n            decoder_scores, decoder_input = torch.max(decoder_output, dim=1)\n            # Record token and score\n            all_tokens = torch.cat((all_tokens, decoder_input), dim=0)\n            all_scores = torch.cat((all_scores, decoder_scores), dim=0)\n            # Prepare current token to be next decoder input (add a dimension)\n            decoder_input = torch.unsqueeze(decoder_input, 0)\n        # Return collections of word tokens and scores\n        return all_tokens, all_scores","ad51cecc":"def evaluate(encoder, decoder, searcher, voc, sentence, max_length=MAX_LENGTH):\n    ### Format input sentence as a batch\n    # words -> indexes\n    indexes_batch = [indexesFromSentence(voc, sentence)]\n    # Create lengths tensor\n    lengths = torch.tensor([len(indexes) for indexes in indexes_batch])\n    # Transpose dimensions of batch to match models' expectations\n    input_batch = torch.LongTensor(indexes_batch).transpose(0, 1)\n    # Use appropriate device\n#     input_batch = input_batch.to(device)\n#     lengths = lengths.to(device)\n    # Decode sentence with searcher\n    tokens, scores = searcher(input_batch, lengths, max_length)\n    # indexes -> words\n    decoded_words = [voc.index2word[token.item()] for token in tokens]\n    return decoded_words\n\n\ndef evaluateInput(encoder, decoder, searcher, voc):\n    input_sentence = ''\n    while(1):\n        try:\n            # Get input sentence\n            input_sentence = input('> ')\n            # Check if it is quit case\n            if input_sentence == 'q' or input_sentence == 'quit': break\n            # Normalize sentence\n            input_sentence = normalizeString(input_sentence)\n            # Evaluate sentence\n            output_words = evaluate(encoder, decoder, searcher, voc, input_sentence)\n            # Format and print response sentence\n            output_words[:] = [x for x in output_words if not (x == 'EOS' or x == 'PAD')]\n            print('Bot:', ' '.join(output_words))\n\n        except KeyError:\n            print(\"Error: Encountered unknown word.\")","bdcd7035":"# Configure models\nmodel_name = 'cb_model'\nattn_model = 'dot'\n#attn_model = 'general'\n#attn_model = 'concat'\nhidden_size = 500\nencoder_n_layers = 2\ndecoder_n_layers = 2\ndropout = 0.1\nbatch_size = 64\n\n# Set checkpoint to load from; set to None if starting from scratch\nloadFilename = None\ncheckpoint_iter = 4000\n#loadFilename = os.path.join(save_dir, model_name, corpus_name,\n#                            '{}-{}_{}'.format(encoder_n_layers, decoder_n_layers, hidden_size),\n#                            '{}_checkpoint.tar'.format(checkpoint_iter))\n\n\n# Load model if a loadFilename is provided\nif loadFilename:\n    # If loading on same machine the model was trained on\n    checkpoint = torch.load(loadFilename)\n    # If loading a model trained on GPU to CPU\n    #checkpoint = torch.load(loadFilename, map_location=torch.device('cpu'))\n    encoder_sd = checkpoint['en']\n    decoder_sd = checkpoint['de']\n    encoder_optimizer_sd = checkpoint['en_opt']\n    decoder_optimizer_sd = checkpoint['de_opt']\n    embedding_sd = checkpoint['embedding']\n    voc.__dict__ = checkpoint['voc_dict']\n\n\nprint('Building encoder and decoder ...')\n# Initialize word embeddings\nembedding = nn.Embedding(voc.num_words, hidden_size)\nif loadFilename:\n    embedding.load_state_dict(embedding_sd)\n# Initialize encoder & decoder models\nencoder = EncoderRNN(hidden_size, embedding, encoder_n_layers, dropout)\ndecoder = LuongAttnDecoderRNN(attn_model, embedding, hidden_size, voc.num_words, decoder_n_layers, dropout)\nif loadFilename:\n    encoder.load_state_dict(encoder_sd)\n    decoder.load_state_dict(decoder_sd)\n# Use appropriate device\nencoder = encoder.to(device)\ndecoder = decoder.to(device)\nprint('Models built and ready to go!')","391031d4":"# Configure training\/optimization\nclip = 50.0\nteacher_forcing_ratio = 1.0\nlearning_rate = 0.0001\ndecoder_learning_ratio = 5.0\nn_iteration = 4000\nprint_every = 1\nsave_every = 500\n\n# Ensure dropout layers are in train mode\nencoder.train()\ndecoder.train()\n\n# Initialize optimizers\nprint('Building optimizers ...')\nencoder_optimizer = optim.Adam(encoder.parameters(), lr=learning_rate)\ndecoder_optimizer = optim.Adam(decoder.parameters(), lr=learning_rate * decoder_learning_ratio)\nif loadFilename:\n    encoder_optimizer.load_state_dict(encoder_optimizer_sd)\n    decoder_optimizer.load_state_dict(decoder_optimizer_sd)\n\n# Run training iterations\nprint(\"Starting Training!\")\nstart = time.time()\ntrainIters(model_name, voc, pairs, encoder, decoder, encoder_optimizer, decoder_optimizer,\n           embedding, encoder_n_layers, decoder_n_layers, save_dir, n_iteration, batch_size,\n           print_every, save_every, clip, corpus_name, loadFilename)\nend = time.time()\nprint(\"-------------TIME TAKEN----------------\")\nprint(end - start)\n","591e470f":"# Run the following to chat","644c1b16":"# Set dropout layers to eval mode\nencoder.eval()\ndecoder.eval()\n\n# Initialize search module\nsearcher = GreedySearchDecoder(encoder, decoder)\n\nevaluateInput(encoder, decoder, searcher, voc)","2b3c30ce":"similar to inputVar but in binaryMaskTensor every element that is a PAD_TOKEN is 0 and all others are 1","44d769fb":"### Loss Function","bdded89a":"inputVar function converts sentences to tensors","4d088cad":"![title](img\/batch_Sentence.png)","e8c2324b":"!['title'](img\/attentionMechanism.png)","c2e066b6":"###### Formatted lines seperated by tab","c2c08559":"# Part 1: Data Preprocessing","03136fc5":"![\"title\"](img\/understandingPackedPaddedSeq.png)","79454085":"!['title'](img\/attentionOp.png)","1464822c":"#### Teacher forcing:\n\nAdv is that if wrong word is generated, it's not fed into the nn","82644d06":"!['title'](img\/forwardExp.png)","c0c30a8a":"\n###### We use mini batches to speed up the process","0c4d76de":"# Building The model","57a55eb9":"Since we are dealing with batches of padded sequences, we cannot simply consider all elements of the tensor when calculating loss. We define maskNLLLoss to calculate our loss based on our decoder\u2019s output tensor, the target tensor, and a binary mask tensor describing the padding of the target tensor. This loss function calculates the average negative log likelihood of the elements that correspond to a 1 in the mask tensor.","0070d847":"GRUs(gatted recurrent unit) are better than LSTMs","502a6002":"!['title'](img\/teacherForcing.png)","94e4252e":"!['title'](img\/definingModels.png)","932044cb":"## Run Our Model","7bacfb04":"!['title'](img\/attentionImplementation.png)","15a1e06e":"This Class keeps mapping of words to ```indexes```","98860d9f":"# We're done with building the architecture, Let's start Training Code","09e663d1":"# Data preparation","31c2579e":"Greedy decoding is used when we are not using teacher forcing","5463892a":"we need to be able to index our batch along time, and across all sequences in the batch. Therefore, we transpose our input batch shape to (max_length, batch_size), so that indexing across the first dimension returns a time step across all sentences in the batch. We handle this transpose implicitly in the zeroPadding function.","46d02f20":"![title](img\/batch_sent2.png)","9bb54ec8":"!['title'](img\/rnnstonn.png)"}}