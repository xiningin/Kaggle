{"cell_type":{"bed4d8ba":"code","355c84b6":"code","b600edce":"code","cc43a14a":"code","38e8298e":"code","b79c6d6d":"code","a295c025":"code","b0926599":"code","43148899":"code","2fe4e6d2":"code","ab5e7e7f":"markdown","e9347433":"markdown","f89f9e25":"markdown","7bad633c":"markdown","9829a68a":"markdown","d4d4206b":"markdown","8aae0c47":"markdown","7144bf08":"markdown","59f7f08e":"markdown"},"source":{"bed4d8ba":"import numpy as np\nimport pandas as pd","355c84b6":"df=pd.read_csv('..\/input\/g-research-crypto-forecasting\/train.csv')\ndf.head()","b600edce":"df=df[df['Asset_ID']==0]\ndf['date']=pd.to_datetime(df['timestamp'],unit='s')","cc43a14a":"df.head()","38e8298e":"dfnumpy=np.array(df[['Close','Target']])\ndfnumpy[[0,1]]","b79c6d6d":"asset=pd.read_csv('..\/input\/g-research-crypto-forecasting\/asset_details.csv')\nasset","a295c025":"t=0\nnum=dfnumpy[t+16,0]\ndenom=dfnumpy[t+1,0]\nr=np.log(num\/denom)\nr","b0926599":"M=r","43148899":"beta=M**2","2fe4e6d2":"Target=r-beta*M\nTarget","ab5e7e7f":"# Load Data ","e9347433":"I think many people are having problems with the target variable this is where i will explain it nicely with code","f89f9e25":"# Target compuation come on this is simple\n$$\\text{Target}^a(t) = R^a(t) - \\beta^a M(t)$$\n\njust plug in the values and compute it","7bad633c":"# Lets peel the onion now","9829a68a":"First computation\n$$R^a(t) = log (P^a(t+16)\\ \/\\ P^a(t+1))$$\n\nFirst lets understand $P^a$ it means it means that P is the Close price or the price at the end of the minute for the asset id $a$ t is our current minute for which we want to compute the targets now $P^a$ are prices for asset id $a$ so t+16 is the price after 16 minutes from the current timestamp while t+1 is just the next timestamp , so $P^a(t+16)$ is the timestamp after the end of 15 minutes and $P^a(t+1)$ is at the start of the minute taking these two future price values we calculates $R^a$ with given formula\n\nCode is given below","d4d4206b":"# Beta calculation \n\n$\\beta$ is just the rolling average of $M^2$ with 3750 minutes so lets say i compute R value not just for one sample but for many samples if we define that by $M$ then the code is simple in pandas\n```df['beta']=(df['M']**2.rolling.mean(3750).mean()```  https:\/\/pandas.pydata.org\/docs\/reference\/api\/pandas.core.window.rolling.Rolling.mean.html \n\nbut as where we just have R for one sample or one minute we cannot get 3750 minutes so we were not able to compute this here and this will result into close but not exact measurements","8aae0c47":"crop the asset id","7144bf08":"# Import","59f7f08e":"Second compuatition [can be ignored also],\n\n$$M(t) = \\frac{\\sum_a w^a R^a(t)}{\\sum_a w^a}$$\n\nin this formula we basically take a weighted average of the target values but as we can cancel out $w^a$ we can skip this we should have used this if we had many samples with different weights but here this can be ignored  as here $\\sum_a w^a$ is just $w^a$ with no change for only one sample so M=R"}}