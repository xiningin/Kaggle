{"cell_type":{"53cf6470":"code","fa0f0562":"code","ab40a5e3":"code","e1a710b8":"code","cbc5c7df":"code","e188a264":"code","b1394df7":"code","9af8ae2d":"code","3aa9350e":"code","dc80c2ec":"code","1db57c1f":"code","b5a4d6e9":"code","f8496c89":"code","2a28e7f6":"code","e925019a":"code","f53df87e":"code","d3787dcd":"code","27a422f8":"code","fba61b4d":"code","dce33ed7":"code","5ec22b9e":"code","f506e1ac":"code","3bbaa03d":"code","c8acd704":"code","700b4b5d":"code","43c53925":"code","ac7e153b":"code","ed0f6d55":"code","ef06592e":"code","18beaa65":"code","61e4c69a":"code","803487ab":"code","03e1261b":"code","5ff064e8":"code","7ae18095":"code","680e298a":"code","c6b5d4a7":"code","becbcbf3":"code","c71b043d":"code","8989df9b":"code","3c1508be":"code","9c85d6cc":"code","b791b872":"code","5e748d8a":"code","6a6bc814":"code","74eddb5d":"code","a93d069f":"code","c314b4a1":"code","a2d0c372":"code","72906e7c":"code","621665e5":"code","bee94bf8":"code","d562aaa5":"code","244b6f49":"code","63b92044":"code","6f7a1caa":"code","3c287a13":"code","5245c842":"code","a66c9832":"code","6f91c1ac":"code","6b56faab":"code","0cbff62f":"markdown","de8b6161":"markdown","00449fe7":"markdown"},"source":{"53cf6470":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fa0f0562":"store = pd.read_csv('\/kaggle\/input\/rossmann-store-sales\/store.csv')\npast_sales_data = pd.read_csv('\/kaggle\/input\/rossmann-store-sales\/train.csv')\nfuture_sales_data = pd.read_csv('\/kaggle\/input\/rossmann-store-sales\/test.csv')\npast_sales_data['Date'] = pd.to_datetime(past_sales_data['Date'], format='%Y-%m-%d')\nfuture_sales_data['Date'] = pd.to_datetime(future_sales_data['Date'], format='%Y-%m-%d')\nstore.shape, past_sales_data.shape","ab40a5e3":"#past_sales_data.head(3)","e1a710b8":"#future_sales_data['Date'].describe()","cbc5c7df":"#store.head()","e188a264":"#store.describe()","b1394df7":"#store.isna().sum()","9af8ae2d":"#store.isna().sum() \/ store.shape[0] * 100","3aa9350e":"#store[store['Promo2SinceWeek'].isna()].head()","dc80c2ec":"#store[~store['Promo2SinceWeek'].isna()].head()","1db57c1f":"#past_sales_data.head()","b5a4d6e9":"#past_sales_data['Store'].nunique()","f8496c89":"#past_sales_data.isna().sum()","2a28e7f6":"#single_store_sales = past_sales_data[past_sales_data['Store'] == 1]\n#single_store_sales.sort_values('Date').set_index('Date')['Sales'].plot.line(figsize=(15,5))","e925019a":"#single_store_sales[single_store_sales['Sales'] == 0]","f53df87e":"#single_store_sales.groupby(['DayOfWeek']).agg(avg_sales=('Sales', 'mean'))","d3787dcd":"#past_sales_data.groupby('Store').agg(total_sales = ('Sales', 'mean')).sort_values(['total_sales'], ascending=False)","27a422f8":"#past_sales_data.describe(include=object)","fba61b4d":"#past_sales_data['StateHoliday'].unique()","dce33ed7":"#past_sales_data[past_sales_data['StateHoliday']==0]","5ec22b9e":"#past_sales_data[past_sales_data['Open']==0]['Sales']","f506e1ac":"#past_sales_data['DayOfWeek_Text'] = past_sales_data['Date'].dt.strftime('%A')\n#past_sales_data.head()","3bbaa03d":"#past_sales_data[past_sales_data['DayOfWeek'] == 7]","c8acd704":"#past_sales_data[past_sales_data['DayOfWeek'] ==7]['Open'].value_counts()","700b4b5d":"#store.head()","43c53925":"#past_sales_data[past_sales_data['DayOfWeek'] ==7][['Store', 'Open']].drop_duplicates()['Open'].value_counts()","ac7e153b":"#past_sales_data[(past_sales_data['DayOfWeek']==7) & (past_sales_data['Open']==1)]['Store'].unique()","ed0f6d55":"#past_sales_data['Date'].describe()","ef06592e":"#store.head()","18beaa65":"#store.isna().sum()","61e4c69a":"#store_new['CompetitionOpenSinceYear'].mode().iloc[0]\n#store_new['CompetitionOpenSinceYear'].mode().tolist()[0]","803487ab":"store_new = store.copy()\nstore_new['CompetitionDistance'] = store_new['CompetitionDistance'].fillna(0)\nstore_new['CompetitionOpenSinceMonth'] = store_new['CompetitionOpenSinceMonth'].fillna(0)\ncompetition_year_mode = store_new['CompetitionOpenSinceYear'].mode().iloc[0]\nstore_new['CompetitionOpenSinceYear'] = store_new['CompetitionOpenSinceYear'].fillna(competition_year_mode)\n\n\nstore_new['Promo2SinceWeek'] = store_new['Promo2SinceWeek'].fillna(0)\npromo2year_mode = store_new['Promo2SinceYear'].mode().iloc[0]\nstore_new['Promo2SinceYear'] = store_new['Promo2SinceYear'].fillna(promo2year_mode)\npromo_interval_mode = store_new['PromoInterval'].mode().iloc[0]\nstore_new['PromoInterval'] = store_new['PromoInterval'].fillna(promo_interval_mode)\nstore_new.isna().sum()","03e1261b":"#past_sales_data.head()","5ff064e8":"#store_new.head()","7ae18095":"past_sales_data_comb = pd.merge(left=past_sales_data, right=store_new,\n                               how='left', on=['Store'])\npast_sales_data_comb.head()","680e298a":"#past_sales_data.shape, past_sales_data_comb.shape","c6b5d4a7":"#past_sales_data['StateHoliday'].unique()","becbcbf3":"#past_sales_data_comb['StateHoliday'].unique()","c71b043d":"\npast_sales_data_comb = pd.merge(left=past_sales_data, right=store_new,\n                               how='left', on=['Store'])\npast_sales_data_comb['StateHoliday'] = past_sales_data_comb['StateHoliday'].replace({0: '0'})\npast_sales_data_comb['sales_month'] = past_sales_data_comb['Date'].dt.month\ncols_ignore = ['Date', 'Customers', 'Store']\npast_sales_data_comb = past_sales_data_comb.drop(cols_ignore, axis=1)\npast_sales_data_dummies = pd.get_dummies(past_sales_data_comb, drop_first=True)\npast_sales_data_dummies.shape, past_sales_data_comb.shape","8989df9b":"#past_sales_data_dummies.head()","3c1508be":"#past_sales_data_comb['StateHoliday'].unique()","9c85d6cc":"#past_sales_data_dummies.columns.drop(target_col)","b791b872":"target_col_name = 'Sales'\ninput_cols_names = past_sales_data_dummies.columns.drop(target_col_name)\n\nfrom sklearn.model_selection import train_test_split\ntrain_x, validate_x, train_y, validate_y = train_test_split(past_sales_data_dummies[input_cols_names],\n                                                   past_sales_data_dummies[target_col_name],\n                                                   test_size=0.2,\n                                                   random_state=1)\ntrain_x.shape, validate_x.shape, train_y.shape, validate_y.shape","5e748d8a":"#train_y.mean()","6a6bc814":"from sklearn.tree import DecisionTreeRegressor\nfrom sklearn.model_selection import GridSearchCV\n\nbase_model = DecisionTreeRegressor()\nparams = {'max_depth': list(range(5, 10))}\ncv = GridSearchCV(estimator=base_model, param_grid=params).fit(train_x, train_y)","74eddb5d":"#cv.best_params_","a93d069f":"from sklearn.metrics import mean_squared_error\nvalidate_y_pred = cv.best_estimator_.predict(validate_x)\nrmse = mean_squared_error(validate_y, validate_y_pred, squared=False)\nprint('RMSE on validation set is %.2f' % rmse)","c314b4a1":"from sklearn.linear_model import LinearRegression\nlr_model = LinearRegression().fit(train_x, train_y)\nvalidate_y_pred = lr_model.predict(validate_x)\nrmse = mean_squared_error(validate_y, validate_y_pred, squared=False)\nprint('RMSE on validation set is %.2f' % rmse)","a2d0c372":"'''\nfrom sklearn.ensemble import RandomForestRegressor\nrf_model = RandomForestRegressor(n_estimators=100).fit(train_x, train_y)\nvalidate_y_pred = rf_model.predict(validate_x)\nrmse = mean_squared_error(validate_y, validate_y_pred, squared=False)\nprint('RMSE on validation set is %.2f' % rmse)\n'''","72906e7c":"#!pip install pydotplus","621665e5":"def draw_tree(model, columns):\n\n    import pydotplus\n    from six import StringIO\n    from IPython.display import Image\n    import os\n    from sklearn import tree\n    graphviz_path = 'C:\\Program Files (x86)\\Graphviz2.38\/bin\/'\n    os.environ[\"PATH\"] += os.pathsep + graphviz_path\n    dot_data = StringIO()\n    tree.export_graphviz(model,\n                         out_file=dot_data,\n                         feature_names=columns)\n    graph = pydotplus.graph_from_dot_data(dot_data.getvalue())  \n    return Image(graph.create_png())","bee94bf8":"#draw_tree(cv.best_estimator_, train_x.columns)","d562aaa5":"#future_sales_data.head()","244b6f49":"future_sales_data_comb = pd.merge(left=future_sales_data, right=store_new,\n                               how='left', on=['Store'])\nfuture_sales_data_comb['StateHoliday'] = future_sales_data_comb['StateHoliday'].replace({0: '0'})\nfuture_sales_data_comb['sales_month'] = future_sales_data_comb['Date'].dt.month\ncols_ignore = ['Date', 'Store', 'Id']\nfuture_sales_data_comb = future_sales_data_comb.drop(cols_ignore, axis=1)\nfuture_sales_data_dummies = pd.get_dummies(future_sales_data_comb)\nfuture_sales_data_dummies.shape, future_sales_data_comb.shape","63b92044":"#past_sales_data['StateHoliday'].unique()","6f7a1caa":"#future_sales_data_comb['StateHoliday'].unique()","3c287a13":"#future_sales_data_comb.isna().sum()","5245c842":"future_sales_data_dummies['StateHoliday_b'] = 0\nfuture_sales_data_dummies['StateHoliday_c'] = 0\nfuture_sales_data_dummies['Open'] = future_sales_data_dummies['Open'].fillna(1)\ntest_x = future_sales_data_dummies[input_cols_names]\ntest_y_pred = cv.best_estimator_.predict(test_x)\ntest_y_pred","a66c9832":"future_sales_data['Sales'] = test_y_pred\nfuture_sales_data.head()","6f91c1ac":"sample_submission = pd.read_csv('\/kaggle\/input\/rossmann-store-sales\/sample_submission.csv')\nsample_submission.head()","6b56faab":"future_sales_data[['Id', 'Sales']].to_csv('submission.csv', index=False)","0cbff62f":"## Submission","de8b6161":"### Data Preprocessing","00449fe7":"### Model Building"}}