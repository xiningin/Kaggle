{"cell_type":{"09260710":"code","2ad1d42e":"code","bcb4433f":"code","8a2bbfef":"code","a97a9d36":"code","af5c11ec":"code","2550c1fe":"code","b5017deb":"code","2f8ea949":"code","21c5d177":"code","0c950cab":"code","79fd4483":"code","7fdec51e":"code","6f15167c":"code","67b9b68f":"code","137cee18":"code","8ad262eb":"code","36cb5355":"code","597c337b":"code","a2158b05":"code","a041d1d5":"code","ab7f4c01":"code","7e79b59e":"code","19f48ce1":"code","712e2032":"code","a76d95c1":"code","93ff7e4f":"code","91b88516":"code","0068dad0":"code","ef7bba5c":"code","a66b3805":"code","eff9a3fb":"code","70867e1f":"code","2b8106d9":"markdown"},"source":{"09260710":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2ad1d42e":"import zipfile\nfrom tqdm import tqdm\nimport tensorflow as tf\nfrom tensorflow.keras import layers\nfrom tensorflow.keras.layers import Flatten, Dense, Dropout\nfrom tensorflow.keras.layers import Conv2D, MaxPool2D, ZeroPadding2D\nfrom tensorflow.keras.optimizers import SGD\nimport numpy as np\nfrom matplotlib import pyplot as plt\nfrom tensorflow.keras.models import Model\nfrom sklearn.model_selection import train_test_split","bcb4433f":"def extract_files(source_path, target_path):\n    zip_ref = zipfile.ZipFile(source_path,'r')\n    zip_ref.extractall(target_path)\n    zip_ref.close()","8a2bbfef":"extract_files('\/kaggle\/input\/dogs-vs-cats\/test1.zip','\/kaggle\/working\/')\nextract_files('\/kaggle\/input\/dogs-vs-cats\/train.zip','\/kaggle\/working\/')","a97a9d36":"train_dir = \".\/train\/\"\ntest_dir  = \".\/test1\/\"","af5c11ec":"filenames = os.listdir(\"\/kaggle\/working\/train\")\nlen(filenames)","2550c1fe":"filenames = os.listdir(\"\/kaggle\/working\/train\")\nbase_path = '\/kaggle\/working\/train\/'\nclasses = []\nimages = []\nfor filename in tqdm(filenames):\n    images.append(base_path + str(filename))\n    classes.append(filename.split('.')[0])\n\n\ndf = pd.DataFrame({\n    'filename': filenames,\n    'class': classes\n})","b5017deb":"df.head()","2f8ea949":"df[\"class\"] = df[\"class\"].replace({0: 'cat', 1: 'dog'}) \ndf.head()","21c5d177":"from sklearn.model_selection import train_test_split\ntrain_df, validation_df = train_test_split(df, test_size=0.2, random_state=42)\n\ntrain_df.head()","0c950cab":"train_df.reset_index(drop=True).head()","79fd4483":"validation_df.reset_index(drop=True).head()","7fdec51e":"from keras.preprocessing.image import ImageDataGenerator\ntrain_datagen = ImageDataGenerator(\n    rescale = 1.\/255,\n    shear_range = 0.2,\n    zoom_range = 0.2,\n    horizontal_flip = True\n)\ntraining_set = train_datagen.flow_from_dataframe(\n    train_df,\n    directory=train_dir,\n    x_col=\"filename\",\n    y_col=\"class\",\n    target_size=(224, 224),\n    batch_size=32,\n    class_mode='categorical'\n)","6f15167c":"from keras.preprocessing.image import ImageDataGenerator\nvalidation_datagen = ImageDataGenerator(\n    rescale = 1.\/255,\n    shear_range = 0.2,\n    zoom_range = 0.2,\n    horizontal_flip = True\n)\nvalidation_set = validation_datagen.flow_from_dataframe(\n    validation_df,\n    directory=train_dir,\n    x_col=\"filename\",\n    y_col=\"class\",\n    target_size=(224, 224),\n    batch_size=32,\n    class_mode='categorical'\n)","67b9b68f":"def Model(input_shape=None, classes=None):\n\n    img_input = layers.Input(shape=input_shape)\n\n    x = layers.Conv2D(64, (3, 3), activation='relu', padding='same', name='block1_conv1')(img_input)\n    x = layers.MaxPooling2D((2, 2), strides=(2, 2), name='pool1')(x)\n    x = layers.Conv2D(64, (3, 3), activation='relu', padding='same', name='block1_conv2')(x)\n    x = layers.BatchNormalization()(x)\n    x = layers.MaxPooling2D((2, 2), strides=(2, 2), name='pool2')(x)\n   \n    x = layers.Conv2D(128, (3, 3), activation='relu', padding='same', name='block2_conv1')(x)\n    x = layers.MaxPooling2D((2, 2), strides=(2, 2), name='pool3')(x)\n    x = layers.Conv2D(128, (3, 3), activation='relu', padding='same', name='block2_conv2')(x)\n    x = layers.BatchNormalization()(x)\n    x = layers.MaxPooling2D((2, 2), strides=(2, 2), name='pool4')(x)\n    \n\n\n    x = layers.Flatten(name='flatten')(x)\n    x = layers.Dense(500, activation='relu', name='fc1')(x)\n    x = layers.Dense(100, activation='relu', name='fc2')(x)\n    x = layers.Dense(classes, activation='softmax', name='predictions')(x)\n\n    model = tf.keras.Model(inputs=img_input, outputs=x, name=\"moldel\")\n    \n    return model\n","137cee18":"model = Model(input_shape=(224, 224,3), classes=2)\nprint(model.summary()) ","8ad262eb":"model.compile(optimizer= tf.keras.optimizers.Adam(0.001), loss= 'categorical_crossentropy', metrics=['accuracy'])","36cb5355":"total_validate = len(validation_df)\ntotal_train = len(train_df)\nbatch_size = 32\nepochs=15\nhistory = model.fit(\n    training_set, \n    epochs=epochs,\n    validation_data=validation_set,\n    validation_steps=total_validate\/\/batch_size,\n    steps_per_epoch=total_train\/\/batch_size,\n\n)","597c337b":"import matplotlib.pyplot as plt\nplt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","a2158b05":"import matplotlib.pyplot as plt\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","a041d1d5":"test_filenames = os.listdir(\"\/kaggle\/working\/test1\")\ntest_df = pd.DataFrame({\n    'filename': test_filenames\n})\nnb_samples = test_df.shape[0]","ab7f4c01":"test_df.count()","7e79b59e":"test_df\n","19f48ce1":"test_datagen = ImageDataGenerator(rescale=1.\/255)\ntest_set = test_datagen.flow_from_dataframe(\n    test_df, \n    \"\/kaggle\/working\/test1\/\", \n    x_col='filename',\n    y_col=None,\n    class_mode=None,\n    target_size=(224, 224),\n    batch_size=32,\n    shuffle=False\n)","712e2032":"predict = model.predict(test_set, steps=np.ceil(nb_samples\/32))","a76d95c1":"predict[1]","93ff7e4f":"test_df['category'] = np.argmax(predict, axis=-1)","91b88516":"test_df['category'] = test_df['category'].apply(lambda x: 0 if x < 0.5 else 1)","0068dad0":"test_df","ef7bba5c":"test_df.to_csv(\"submission.csv\")","a66b3805":"sample_test = test_df.head(15)\nsample_test.head()\n","eff9a3fb":"from keras.preprocessing.image import  load_img\n\nIMAGE_SIZE = 224\nplt.figure(figsize=(12, 24))\nfor index, row in sample_test.iterrows():\n    filename = row['filename']\n    category = row['category']\n    img = tf.keras.preprocessing.image.load_img(\"\/kaggle\/working\/test1\/\"+str(filename))\n    plt.subplot(6, 3, index+1)\n    plt.imshow(img)\n    plt.xlabel(filename + '(' + \"{}\".format(category) + ')' )\nplt.tight_layout()\nplt.show()","70867e1f":"filename = 'dog.6990.jpg'\ncategory = 'dog'\n\nimage = tf.keras.preprocessing.image.load_img(\"\/kaggle\/working\/train\/\"+str(filename))\nplt.imshow(img)\nplt.xlabel(filename + '(' + \"{}\".format(category) + ')' )\n# plt.tight_layout()\nplt.show()","2b8106d9":"# **Prediction part**"}}