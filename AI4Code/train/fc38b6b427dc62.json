{"cell_type":{"f1b83a3d":"code","1b7d152c":"code","75dbcaa0":"code","6ea59d3f":"code","e0674ad3":"code","c7d8f0e7":"code","6a078904":"code","b13ee86c":"code","c59550a9":"code","a2868602":"code","96b9808c":"code","20e1b892":"code","97ed2845":"code","36d13ac7":"code","33c02150":"code","e21f7d8d":"code","d622ec85":"code","c69ea879":"code","df1d0184":"code","46607b59":"code","350968da":"code","e2a65429":"code","95b3a86e":"code","1245fbf3":"code","44d6f657":"code","148daaca":"markdown","01b40d1f":"markdown","aac38b79":"markdown","47375108":"markdown","c36aeefe":"markdown","fe4878b4":"markdown","45fe6cb9":"markdown","0f4529ad":"markdown","3965c7fe":"markdown","5f1efb2b":"markdown","eea1dfd9":"markdown","1f9da9dd":"markdown","96869f18":"markdown"},"source":{"f1b83a3d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","1b7d152c":"df = pd.read_csv(\"..\/input\/Pokemon.csv\")","75dbcaa0":"df.head()","6ea59d3f":"df.describe()","e0674ad3":"df[\"Attack\"] = df[\"Attack\"] + df[\"Sp. Atk\"]\ndf[\"Defense\"] = df[\"Defense\"] + df[\"Sp. Def\"]","c7d8f0e7":"df.head()","6a078904":"df.drop(columns=[\"Sp. Atk\",\"Sp. Def\",], inplace=True)","b13ee86c":"df.head()","c59550a9":"df.isna().sum()","a2868602":"df.drop(columns=[\"Type 2\",\"#\"], inplace=True)","96b9808c":"df.head()","20e1b892":"df[\"Type 1\"].value_counts()","97ed2845":"df.Generation.value_counts()","36d13ac7":"sns.barplot(x=\"Type 1\",y = \"Total\", data = df).set_title(\"Type 1 vs Avg-score\")\nplt.xticks(rotation = 90)","33c02150":"sns.barplot(x=\"Generation\",y = \"Total\", data = df).set_title(\"Generation vs Avg-score\")","e21f7d8d":"sns.barplot(x=\"Type 1\",y = \"Speed\", data = df).set_title(\"Type 1 vs Avg-Speed-score\")\nplt.xticks(rotation = 90)","d622ec85":"sns.barplot(x=\"Type 1\",y = \"HP\", data = df).set_title(\"Type 1 vs Avg-HP-score\")\nplt.xticks(rotation = 90)","c69ea879":"sns.barplot(x=\"Generation\",y = \"Speed\", data = df).set_title(\"Generaion vs Avg-Speed-score\")","df1d0184":"sns.barplot(x=\"Generation\",y = \"HP\", data = df).set_title(\"Generation vs Avg-HP-score\")","46607b59":"plt.figure(figsize=(15,8))\nsns.barplot(x = \"Type 1\", y = \"Total\",hue = \"Generation\", data = df )\nplt.xticks(rotation = 90)\n","350968da":"df.groupby([\"Type 1\",\"Generation\"])[\"Total\"].mean()","e2a65429":"print(\"\\n best pokemons based on Total Scores of their respective Generations\\n\")\nref = dict(df.groupby([\"Generation\"])[\"Total\"].max())\nfor i in range(1,7):\n    print(\"\\nGeneration : \"+str(i)+\": \"+str(df[(df.Generation == i) & (df.Total == ref[i])].Name))","95b3a86e":"print(\"\\n best pokemons based on Total Scores of their respective Types\\n\")\nref = dict(df.groupby([\"Type 1\"])[\"Total\"].max())\nfor key,value in ref.items():\n    print(\"best pokemon based on Type 1 : \"+key+\" : \",df[(df[\"Type 1\"] == key) & (df.Total == value)].Name)","1245fbf3":"print(\"Top 5 Worst Pokemons based on Total scores\")\ndf.sort_values(by = \"Total\")[:5]","44d6f657":"print(\"Top 5 Best Pokemons based on Total scores\")\ndf.sort_values(by = \"Total\",ascending = False)[:5]","148daaca":"Let's have a plot based on Generations and Type 1 with Y-axis as scores","01b40d1f":"Generation - 1 Pokemons have higher speed compared to that of other Generations","aac38b79":"Avg score of Generation 4 is higher compared to that of other Generations","47375108":"So, Avg Total score for Pokemons of type Dragon, Steel, Flying are higher compared to that of other types.","c36aeefe":"Please suggest me to improve the kernel further.","fe4878b4":"Here, in this kernel, I would like to analyze only Type 1 category.","45fe6cb9":"Let's plot overall data based on Total Scores","0f4529ad":"Pokemons are categorised into 6 Generations","3965c7fe":"In this kernel, I will analyze the Pokemon dataset and find some insights and find some best pokemons based on certain categories. Any ideas regarding finding more insights are encouraged.","5f1efb2b":"I would like to Add Special Attack and Special Defense scores to Attack and Defense respectively","eea1dfd9":"As Expected, Speed of Flying Pokemons is higher compared to that of other Pokemons","1f9da9dd":"Let's see the best and worst pokemons based on total scores","96869f18":"So, it seems like Pokemons are divided to many Type 1 categories."}}