{"cell_type":{"656957f6":"code","ff0760ee":"code","eda1f780":"code","489c4460":"code","03169dfc":"code","f138f0a4":"code","e4818e7f":"code","36d432bf":"code","d94ae8b4":"code","9b4987c7":"code","210e06a1":"code","b9dd26a2":"code","df1aabf3":"code","cbb187be":"code","2af25af4":"code","a1e6966d":"code","afeb08f7":"code","ff5024b7":"code","79182016":"code","1d9547f6":"code","c1f5cedf":"code","75f33550":"code","23bb1282":"code","b424743f":"code","8bbcd000":"code","f642e136":"code","a6e83402":"code","ac980529":"code","e5bb67f3":"code","9da16622":"code","646a3e22":"code","78658391":"code","86600cb7":"code","b011670d":"code","81bcc7c3":"code","798fdcaf":"code","4390830c":"code","ec5d40f0":"code","ad61fc74":"code","a2d48847":"code","87ab1617":"code","6e49c7c1":"code","c5154a3a":"code","6da4a484":"code","3f96131e":"code","5c34f0e9":"code","278eed84":"code","96ff74ec":"code","268d48ea":"code","b541b83e":"code","2341e039":"code","192effca":"code","9ed35239":"code","3038f1fc":"code","abefabae":"code","6fef4070":"code","b0ec92b7":"code","faa62bb6":"code","d2bede3a":"code","010fac7c":"code","c0dd0189":"code","fc277dfe":"code","52744984":"code","a476782c":"code","76d6b076":"code","4e503663":"code","1435d19b":"code","1f8db398":"code","c8f23a61":"code","82284053":"code","8fb6d269":"markdown","9a0f6af4":"markdown","e1a59af2":"markdown","2e1a35a7":"markdown","fcec5206":"markdown","22754822":"markdown","0a2a7058":"markdown","81719f67":"markdown","8223ee76":"markdown","93d15abd":"markdown","fa1c16ef":"markdown","f892d556":"markdown","d10c7d3c":"markdown","4024d464":"markdown","e7976487":"markdown","c71faf12":"markdown","9976ea1f":"markdown","b48a62ea":"markdown","ce10ebb4":"markdown","335e0839":"markdown","53c249e3":"markdown","4478d8d3":"markdown","b8e4bc7a":"markdown","c2ff1fa5":"markdown","46a76afd":"markdown","c629476e":"markdown","01f81d21":"markdown","fa8596d9":"markdown","d1ab4be3":"markdown","f77b8f5d":"markdown","bfcbe8b6":"markdown","e583f4c7":"markdown","070d1cdf":"markdown","7944154e":"markdown"},"source":{"656957f6":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport pandas_profiling\nfrom datetime import date as dt\nfrom sklearn.model_selection import train_test_split\nfrom xgboost import XGBRFRegressor, XGBRegressor\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.ensemble import RandomForestRegressor, ExtraTreesRegressor\nimport lazypredict\nfrom lazypredict.Supervised import LazyRegressor\nfrom sklearn.metrics import mean_squared_log_error, mean_squared_error, r2_score\nfrom sklearn.feature_selection import RFE, f_oneway, f_regression, SelectKBest\nimport itertools\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor","ff0760ee":"!pip install lazypredict","eda1f780":"pd.set_option('display.max_rows', 500)\npd.set_option('display.max_columns', 500)\n\nimport warnings\nwarnings.filterwarnings('ignore')","489c4460":"df = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ndf.head()","03169dfc":"df.shape","f138f0a4":"df.info()","e4818e7f":"# report = pandas_profiling.ProfileReport(df)\n# report.to_file('report.html')","36d432bf":"df_cat = df.select_dtypes(include = 'object')\ndf_num = df.select_dtypes(exclude = 'object')\nprint(df_cat.shape, df_num.shape)","d94ae8b4":"# Drop unique value\ndf_num.drop(['Id'], axis = 1, inplace = True)","9b4987c7":"(df_num.isnull().sum()\/df_num.shape[0]*100)[df_num.isnull().sum()\/df_num.shape[0]*100>0]","210e06a1":"df_num.drop(['GarageYrBlt'], axis = 1, inplace = True)","b9dd26a2":"def missing(x):\n    x = x.fillna(x.median())\n    return x","df1aabf3":"df_num = df_num.apply(missing)","cbb187be":"(df_cat.isnull().sum()\/df_cat.shape[0]*100)[df_cat.isnull().sum()\/df_cat.shape[0]*100>0]","2af25af4":"for i in df_cat.columns:\n    if i == 'Electrical':\n        continue\n    df_cat[i] = df_cat[i].fillna('No')","a1e6966d":"df_cat['Electrical'].value_counts()","afeb08f7":"df_cat[df_cat['Electrical'].isnull()]","ff5024b7":"df_cat['Electrical'] = df_cat['Electrical'].fillna('Mix')","79182016":"df_cat","1d9547f6":"df_num","c1f5cedf":"df_num['No_years_old'] = dt.today().year - pd.to_datetime(df_num['YearBuilt'], format = '%Y').dt.year","75f33550":"df_num['No_years_after_remodel'] = df_num['YearRemodAdd'] - df_num['YearBuilt']","23bb1282":"df_num.drop(['YearBuilt', 'YearRemodAdd', 'YrSold'], axis = 1, inplace = True)","b424743f":"df_num.describe()","8bbcd000":"df_cat.describe()","f642e136":"def summary(x):\n    return pd.Series([x.count(), x.mean(), x.std(), x.min(), x.quantile(0.25), x.quantile(0.50), x.quantile(0.75), \n                      x.quantile(0.90), x.quantile(0.95), x.quantile(0.99), x.max()], \n                     index = ['count', 'mean', 'std', 'min', '25%', '50%', '75%', '90%', '95%', '99%', 'max'])","a6e83402":"df_num.apply(summary)","ac980529":"# def outlier_capping(x):\n#     x = x.clip(upper = x.quantile(0.99))\n#     x = x.clip(lower = x.quantile(0.01)) \n#     return x","e5bb67f3":"# df_num = df_num.apply(outlier_capping)","9da16622":"# df_num.apply(summary)","646a3e22":"df_cat.columns","78658391":"lst = []\nfor i in df_cat.columns:\n    v = df_cat[i].value_counts()\n    lst.append(v)\n    print(v)\n    print('-'*50)","86600cb7":"df1 = pd.concat([df_num, df_cat], axis = 1)\ndf1.head()","b011670d":"cv = np.mean(df1)\/np.std(df1)\ncv","81bcc7c3":"plt.figure(figsize=(20,15))\nsns.heatmap(df.corr(), annot = True, fmt = '.2f', cmap = 'coolwarm')\nplt.show()","798fdcaf":"df1 = pd.get_dummies(df1, drop_first = True)","4390830c":"feature = df1[df1.columns.difference(['SalePrice'])]\ntarget = df1.SalePrice","ec5d40f0":"#rfe = RFE(RandomForestRegressor(), n_features_to_select = 15).fit(feature,target)","ad61fc74":"#list(feature.columns[rfe.get_support()])","a2d48847":"skb = SelectKBest(f_oneway, k = 15).fit(feature, target)","87ab1617":"list(feature.columns[skb.get_support()])","6e49c7c1":"f_value, p_value = f_regression(feature, target)\n\nf_reg = [(i,v,z) for i, v,z in itertools.zip_longest(feature.columns, f_value, ['%.3f' %p for p in p_value])]","c5154a3a":"f_reg = pd.DataFrame(f_reg, columns = ['Feature', 'F_value', 'P_value'])\nf_reg.sort_values(by = ['P_value'], ascending = True)['Feature'].head(15)","6da4a484":"final_list = ['1stFlrSF',\n              '2ndFlrSF',\n              'BsmtFinSF1',\n#              'BsmtUnfSF',\n              'GarageArea',\n              'GarageCars',\n              'LotArea',\n#              'LotFrontage',\n             'No_years_old',\n              'OpenPorchSF',\n              'OverallCond',\n              'OverallQual',\n              'TotalBsmtSF',\n              'WoodDeckSF',\n#             'Condition2_RRAn',\n#              'ExterCond_Po',\n#              'Exterior1st_AsphShn',\n#              'Exterior1st_ImStucc',\n#              'Exterior2nd_Other',\n#              'Functional_Sev',\n#              'HeatingQC_Po',\n#              'MiscFeature_TenC',\n#              'PoolArea',\n#              'RoofMatl_Membran',\n#              'RoofMatl_Metal',\n#              'RoofMatl_Roll',\n#              'Utilities_NoSeWa',\n#             'GarageQual_TA',\n             'GarageType_Attchd',\n#             'GarageType_BuiltIn',\n             'GarageType_Detchd',\n#             'GarageType_No',\n             'GrLivArea',\n#             'HalfBath',\n#             'GarageQual_Fa',\n#             'HeatingQC_Fa',\n#             'HeatingQC_TA',\n#             'Heating_GasA',\n#             'Heating_Grav',\n#             'HouseStyle_2Story'\n            ]\n\nx = feature[final_list]","3f96131e":"vif = pd.DataFrame()\nvif['vif_factor'] = [variance_inflation_factor(x.values,i) for i in range(x.shape[1])]\nvif['features'] = x.columns\nvif.sort_values(by = ['vif_factor'], ascending = False)","5c34f0e9":"model = ExtraTreesRegressor().fit(x, target)","278eed84":"model.feature_importances_","96ff74ec":"pd.Series(model.feature_importances_, index = x.columns).sort_values(ascending = False).head(20).plot(kind = 'barh')\nplt.show()","268d48ea":"x_train, x_test, y_train, y_test = train_test_split(x, target, random_state = 20)\nprint(x_train.shape, x_test.shape, y_train.shape, y_test.shape)","b541b83e":"reg = LazyRegressor(verbose=0,ignore_warnings=False)\nmodels,predictions = reg.fit(x_train, x_test, y_train, y_test)","2341e039":"models","192effca":"predictions","9ed35239":"xgb = XGBRegressor(learning_rate=0.01, n_estimators=5500,\n                       max_depth=3, min_child_weight=0,\n                       gamma=0, subsample=0.7,\n                       colsample_bytree=0.7,\n                       objective='reg:squarederror', nthread=-1,\n                       scale_pos_weight=1,\n                       reg_alpha=0.00006)\n\nxgb.fit(x_train, y_train)","3038f1fc":"result_train = pd.DataFrame()\nresult_test = pd.DataFrame()\n\nresult_train['Predicted'] = xgb.predict(x_train)\nresult_train['Actual'] = y_train\n\nresult_test['Predicted'] = xgb.predict(x_test)\nresult_test['Actual'] = y_test","abefabae":"print('Train Accuracy', r2_score(y_train, result_train.Predicted))\nprint('Test Accuracy', r2_score(y_test, result_test.Predicted))","6fef4070":"print('Train Error', np.sqrt(mean_squared_log_error(y_train,  result_train.Predicted)))\nprint('Test Error', np.sqrt(mean_squared_log_error(y_test,  result_test.Predicted)))","b0ec92b7":"train_error = result_train['Actual'] - result_train['Predicted']","faa62bb6":"sns.distplot(train_error)","d2bede3a":"test_error = result_test['Actual'] - result_test['Predicted']","010fac7c":"sns.distplot(test_error)","c0dd0189":"result_train['Decile'] = pd.qcut(result_train['Predicted'], 10, labels=False)\nresult_train.groupby('Decile').mean()","fc277dfe":"result_test['Decile'] = pd.qcut(result_test['Predicted'], 10, labels=False)\nresult_test.groupby('Decile').mean()","52744984":"df = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\ndf.head()","a476782c":"df.shape","76d6b076":"df_cat = df.select_dtypes(include = 'object')\ndf_num = df.select_dtypes(exclude = 'object')\n\ndf_num.drop(['Id'], axis = 1, inplace = True)\n\ndf_num.drop(['GarageYrBlt'], axis = 1, inplace = True)\n\ndef missing(x):\n    x = x.fillna(x.median())\n    return x\n\ndf_num = df_num.apply(missing)\n\nfor i in df_cat.columns:\n    if i == 'Electrical':\n        continue\n    df_cat[i] = df_cat[i].fillna('No')\n    \ndf_cat['Electrical'] = df_cat['Electrical'].fillna('Mix')\n\ndf_num['No_years_old'] = dt.today().year - pd.to_datetime(df_num['YearBuilt'], format = '%Y').dt.year\n\ndf_num['No_years_after_remodel'] = df_num['YearRemodAdd'] - df_num['YearBuilt']\n\n# Drop unwanted columns\n\ndf_num.drop(['YearBuilt', 'YearRemodAdd', 'YrSold'], axis = 1, inplace = True)\n\n\n\ndf1 = pd.concat([df_num, df_cat], axis = 1)\n\ndf1 = pd.get_dummies(df1, drop_first = True)","4e503663":"df1 = df1[final_list]","1435d19b":"list(xgb.predict(df1))","1f8db398":"submission = pd.DataFrame({'Id' : df['Id'], 'SalePrice': xgb.predict(df1)})","c8f23a61":"submission","82284053":"submission.to_csv('submission.csv', index=False)","8fb6d269":"# Drop unwanted columns","9a0f6af4":"# Profile Report","e1a59af2":"# Coefficient of variance","2e1a35a7":"# Label Encoding","fcec5206":"# Import the Dataset","22754822":"# Correlation Analysis","0a2a7058":"> Alley: Type of alley access to property\n\n> MasVnrArea: Masonry veneer area in square feet\n\n> BsmtQual: Evaluates the height of the basement\n\n> BsmtCond: Evaluates the general condition of the basement\n\n> BsmtExposure: Refers to walkout or garden level walls","81719f67":"> LotFrontage: Linear feet of street connected to property\n\n> MasVnrArea: Masonry veneer area in square feet\n    \n> GarageYrBlt: Year garage was built","8223ee76":"# Merge the cat and cont variables","93d15abd":"# Percentage of missing values in categorical variable","fa1c16ef":"# Feauture Engineering","f892d556":"# Split the categorical and numerical Data","d10c7d3c":"# Model validation\n## Decile Analysis","4024d464":"# Seleck KBest","e7976487":"# F-regression","c71faf12":"# Train Test Split","9976ea1f":"# Train Errors ","b48a62ea":"# Prediction","ce10ebb4":"# Taking Final List","335e0839":"# Predict the Sales Price in Test Dataset","53c249e3":"# Outliers Capping","4478d8d3":"# Import Necessary Libraries","b8e4bc7a":"# Deriving new Feature","c2ff1fa5":"# Accuracy","46a76afd":"# Pre Model Building","c629476e":"# RFE","01f81d21":"# Model Building","fa8596d9":"> Here the errors are normally distributed","d1ab4be3":"# Onehot Encoding","f77b8f5d":"# Percentage of missing values in continuous variable","bfcbe8b6":"# VIF","e583f4c7":"# Data Summary","070d1cdf":"# Extra Tree Regressor","7944154e":"# Test Errors "}}