{"cell_type":{"f78e5bd7":"code","f48cacb3":"code","6578597d":"code","d3adf0b0":"code","dc6eb36f":"code","f5edfef1":"code","ca123188":"code","79b7aa7f":"code","28b49992":"code","0184f8e0":"code","35659446":"code","a83071a2":"code","afa16551":"code","a4b4b45c":"code","77016e5a":"code","2da76e17":"code","36beeedb":"code","416672e9":"markdown","1ae893f8":"markdown","12321ea6":"markdown","da6cff29":"markdown","5f5f75dc":"markdown","3d2d84d2":"markdown","296460cb":"markdown","c9db60b7":"markdown","3c6a4dc6":"markdown","c4808ddc":"markdown","5280729f":"markdown","0dff4fb7":"markdown","4151769d":"markdown","2125a3e2":"markdown","08c9b7d5":"markdown","e642874c":"markdown","aebeba68":"markdown","c7c87d24":"markdown","9d4dfe29":"markdown","e77228cd":"markdown","a06ffec3":"markdown","fe9f0eb1":"markdown"},"source":{"f78e5bd7":"import pandas as pd\nimport seaborn as sns\nfrom learntools.advanced_pandas.indexing_selecting_assigning import *\n\nreviews = pd.read_csv(\"..\/input\/wine-reviews\/winemag-data-130k-v2.csv\", index_col=0)\npd.set_option(\"display.max_rows\", 5)\nreviews","f48cacb3":"reviews.head()","6578597d":"check_q1(pd.DataFrame())","d3adf0b0":"reviews.description # Your code here\ncheck_q1(reviews.description)\nanswer_q1()","dc6eb36f":"reviews.description[0] # Your code here\ncheck_q2(reviews.description[0])\nanswer_q2()","f5edfef1":"reviews.iloc[0] # Your code here\ncheck_q3(reviews.iloc[0])\nanswer_q3()","ca123188":"pd.Series(reviews.description)[0:10] # Your code here\ncheck_q4(pd.Series(reviews.description)[0:10])\nanswer_q4()\nreviews.iloc[0:10, 1]","79b7aa7f":"reviews.iloc[[1,2,3,5,8]]# Your code here\ncheck_q5(reviews.iloc[[1,2,3,5,8]])\nanswer_q5()","28b49992":"reviews.iloc[[0,1,10,100],[0,5,6,7]]# Your code here\n#check_q5(reviews.iloc[[0,1,10,100],[0,5,6,7]])\nreviews.loc[[0, 1, 10, 100], ['country', 'province', 'region_1', 'region_2']]\n#answer_q6()","0184f8e0":"reviews.loc[0:99,['country','variety']]# Your code here\ncheck_q7(reviews.loc[0:99,['country','variety']])\nanswer_q7()","35659446":"reviews.loc[reviews.country=='Italy']# Your code here\ncheck_q8(reviews.loc[reviews.country=='Italy'])\nanswer_q8()","a83071a2":"reviews.loc[reviews.region_2.notnull()]   # Your code here\ncheck_q9(reviews.loc[reviews.region_2.notnull()])\n#answer_q9()# Your code here","afa16551":"reviews.points # Your code here\ncheck_q10(reviews.points)\nanswer_q10()","a4b4b45c":"reviews.loc[0:999,'points'] # Your code here\ncheck_q11(reviews.loc[0:999,'points'])\nanswer_q11()","77016e5a":"reviews.iloc[-1000:,3] # Your code here\ncheck_q12(reviews.iloc[-1000:,3])\nanswer_q12()","2da76e17":"reviews.loc[reviews.country=='Italy','points'] # Your code here\nreviews[reviews.country == \"Italy\"].points\nanswer_q13()","36beeedb":"reviews[reviews.country.isin([\"Italy\", \"France\"]) & (reviews.points >= 90)].country # Your code here\nanswer_q14()","416672e9":"**Exercise 4**: Select the first 10 values from the `description` column in `reviews`. Hint: format your output as a `pandas` `Series`.","1ae893f8":"**Exercise 5**: Select the records with the `1`, `2`, `3`, `5`, and `8` row index positions. In other words, generate the following`DataFrame`:\n\n![](https:\/\/i.imgur.com\/sHZvI1O.png)","12321ea6":"**Exercise 14**: Who produces more above-averagely good wines, France or Italy? Select the `country` column, but only  when said `country` is one of those two options, _and_ the `points` column is greater than or equal to 90.\n\nYour output should look roughly like this:\n```\n119       France\n120        Italy\n           ...  \n129969    France\n129970    France\nName: country, Length: 15840, dtype: object\n```","da6cff29":"**Exercise 6**: Select the `country`, `province`, `region_1`, and `region_2` columns of the records with the `0`, `1`, `10`, and `100` index positions. In other words, generate the following `DataFrame`:\n\n![](https:\/\/i.imgur.com\/FUCGiKP.png)","5f5f75dc":"**Exercise 3**: Select the first row of data (the first record) from `reviews`. Hint: from this exercise onwards I strongly recommend using `loc` or `iloc`.","3d2d84d2":"# Set Up\nRun the following cell to load your data and some utility functions","296460cb":"**Exercise 8**: Select wines made in `Italy`. Hint: `reviews.country` equals what?","c9db60b7":"**Exercise 9**: Select wines whose `region_2` is not `NaN`.","3c6a4dc6":"**Exercise 2**: Select the first value from the description column of `reviews`.","c4808ddc":"# Introduction\n\nMost projects requiring selecting specific values from a `DataFrame` or `Series`. You will work on that skill here using the [Wine Reviews dataset](https:\/\/www.kaggle.com\/zynicide\/wine-reviews). \n\n# Relevant Resources\n* **[Quickstart to indexing and selecting data](https:\/\/www.kaggle.com\/residentmario\/indexing-and-selecting-data\/)** \n* [Indexing and Selecting Data](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/indexing.html) section of pandas documentation\n* [Pandas Cheat Sheet](https:\/\/assets.datacamp.com\/blog_assets\/PandasPythonForDataScience.pdf)\n\n\n","5280729f":"**Exercise 10**: <!--What is the distribution of wine ratings assigned by Wine Magazine?--> Select the `points` column.","0dff4fb7":"**Exercise 11**: <!--What is the distribution of reviews scores for the first 1000 wines in the dataset?--> Select the `points` column for the first 1000 wines.","4151769d":"**Exercise 1**: Select the `description` column from `reviews`.","2125a3e2":"**Exercise 13**: <!--What is the distribution of reviews scores for wines made in Italy?--> Select the `points` column, but only for wines made in Italy.","08c9b7d5":"## Keep going\n\nMove on to the [**Summary functions and maps workbook**](https:\/\/www.kaggle.com\/kernels\/fork\/599524).","e642874c":"# Checking Answers\n\nYou can check your answers in each of the exercises that follow using the  `check_qN` function provided in the code cell above (replacing `N` with the number of the exercise). For example here's how you would check an incorrect answer to exercise 1:","aebeba68":"**Exercise 12**: <!--What is the distribution of reviews scores for the last 1000 wines in the dataset?--> Select the `points` column for the last 1000 wines.","c7c87d24":"The remaining exercises are visual.","9d4dfe29":"Look at an overview of your data by running the following line","e77228cd":"For the first set of questions, if you use `check_qN` on your answer, and your answer is right, a simple `True` value will be returned.\n\nFor the second set of questions, using this function to check a correct answer will present you will an informative graph!\n\nIf you get stuck, use `answer_qN` function to print the answer outright.","a06ffec3":"**Exercise 7**: Select the `country` and `variety` columns of the first 100 records. \n\nHint: you may use `loc` or `iloc`. When working on the answer this question and the several of the ones that follow, keep the following \"gotcha\" described in the [reference](https:\/\/www.kaggle.com\/residentmario\/indexing-selecting-assigning-reference) for this tutorial section:\n\n> `iloc` uses the Python stdlib indexing scheme, where the first element of the range is included and the last one excluded. So `0:10` will select entries `0,...,9`. `loc`, meanwhile, indexes inclusively. So `0:10` will select entries `0,...,10`.\n\n> [...]\n\n> ...[consider] when the DataFrame index is a simple numerical list, e.g. `0,...,1000`. In this case `df.iloc[0:1000]` will return 999 entries, while `df.loc[0:1000]` return 1000 of them! To get 1000 elements using `iloc`, you will need to go one higher and ask for `df.iloc[0:1001]`.","fe9f0eb1":"# Exercises"}}