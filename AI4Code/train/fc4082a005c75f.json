{"cell_type":{"dfcff5c8":"code","d858acb4":"code","db6a4b95":"code","bdcd0472":"code","67a17832":"code","de81c8b6":"code","51904612":"code","3af8451d":"code","cf6aa404":"code","22d0ae17":"code","6200207b":"code","0a5b91d3":"code","e20f2aa4":"code","32bb7d83":"code","c34061f5":"code","2994c9ae":"code","bcbcb02c":"code","6ab5235d":"code","44f54474":"code","4a43fdb2":"code","c9003228":"code","bcde3633":"code","e2adec0f":"code","e081d4b0":"code","ee143955":"code","66582475":"code","6d5f1a8e":"code","d6b5216e":"code","1d3b6221":"code","68fc13c1":"code","47489581":"code","3e968c9e":"code","83f41cb8":"code","372356bd":"code","95f86da9":"code","f8ad0e93":"code","0fad93a7":"code","a6a4bdcc":"code","e2ae5c1d":"code","bd26bfe4":"code","6dffa93c":"code","948d44f5":"code","97a16f6f":"code","201db13d":"code","25a192f3":"code","fd26cfc6":"code","87b7109a":"code","50581998":"code","52ad3414":"code","850a4e0b":"code","97b4c01a":"code","72d5daa3":"code","63aac1cc":"code","c6f64a1a":"code","02187fbf":"code","6275f9d4":"code","aeb9f3b1":"markdown","35dfe6ee":"markdown","5b31e709":"markdown","359232e8":"markdown","dbd2a093":"markdown","d3aa7489":"markdown","8b782ef9":"markdown","e5a04ffe":"markdown","8dc4515c":"markdown","fd0ab7e9":"markdown","063024da":"markdown","eb532290":"markdown","8037edab":"markdown","b17c752f":"markdown","b42a0a00":"markdown","b10d4b65":"markdown","e5dcf4a0":"markdown","4de3c2f9":"markdown","182322c2":"markdown","08b03935":"markdown","95603e85":"markdown","820a6b39":"markdown","49232e92":"markdown","549e97c7":"markdown","5223d1ab":"markdown","5f61af71":"markdown","01679f12":"markdown","920da54c":"markdown","aecb6b94":"markdown","a29d3553":"markdown","352269bb":"markdown","0f3ea486":"markdown","7a363168":"markdown","ed7816ff":"markdown","7e9cca2f":"markdown","ee5eb5ff":"markdown","0b888478":"markdown","1ce0bd9f":"markdown","9fd5e5c8":"markdown","90ad33f4":"markdown","435839f4":"markdown"},"source":{"dfcff5c8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as  sns # for visualization\nfrom matplotlib import pyplot as plt\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d858acb4":"DATA_DIR = '\/kaggle\/input\/sf-scoring\/'\n#DATA_DIR = '.' #\u0414\u043b\u044f \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b\ndf_train = pd.read_csv(DATA_DIR +'\/train.csv')\ndf_test = pd.read_csv(DATA_DIR +'\/test.csv')\nsample_submission = pd.read_csv(DATA_DIR+'\/sample_submission.csv')","db6a4b95":"# \u0420\u0430\u0437\u043c\u0435\u0440\u044b \u0432\u044b\u0431\u043e\u0440\u043e\u043a: \u0422\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0439, \u0422\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0438 \u0444\u0430\u0439\u043b\u0430 Submission\ndf_train.shape, df_test.shape, sample_submission.shape","bdcd0472":"# \u0412\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 (\u0444\u043e\u0440\u043c\u0430\u0442 object) \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u0438\u0437\u0443\u0447\u0435\u043d\u0438\u044f \u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438\ndf_train.info()","67a17832":"# \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0442\u0430\u043a\u0436\u0435 \u0440\u0430\u0437\u043d\u044f\u0442\u044c\u0441\u044f\ndf_train.sample(2)","de81c8b6":"# \u0412\u0410\u0416\u041d\u041e! \u0434\u043b\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u0442\u0440\u0435\u0439\u043d \u0438 \u0442\u0435\u0441\u0442 \u0432 \u043e\u0434\u0438\u043d \u0434\u0430\u0442\u0430\u0441\u0435\u0442\ndf_train['sample'] = 1 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0440\u0435\u0439\u043d\ndf_test['sample'] = 0  # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0435\u0441\u0442\ndf_test['default'] = 0 # \u0432 \u0442\u0435\u0441\u0442\u0435 \u0443 \u043d\u0430\u0441 \u043d\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f Rating, \u043c\u044b \u0435\u0433\u043e \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u0442\u044c, \u043f\u043e \u044d\u0442\u043e\u043c\u0443 \u043f\u043e\u043a\u0430 \u043f\u0440\u043e\u0441\u0442\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043d\u0443\u043b\u044f\u043c\u0438\n\ndata = df_test.append(df_train, sort=False).reset_index(drop=True) # \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c","51904612":"# \u0414\u043b\u044f \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430 \u0441\u0433\u0440\u0443\u043f\u043f\u0438\u0440\u0443\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0432 \u0442\u0440\u0438 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u043f\u043e \u0442\u0438\u043f\u0443 \u0438\u0445 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 (\u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435, \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u0438 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435)\n\nnum_cols = ['age', 'score_bki', 'decline_app_cnt', 'bki_request_cnt', 'income']\ncat_cols = ['education', 'first_time', 'sna', 'work_address', 'home_address', 'region_rating']\nbin_cols = ['sex', 'car', 'car_type', 'good_work', 'foreign_passport']","3af8451d":"# \u041d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 -- \u0443 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 'client_id' \u0438 'score_bki'.\n# --> \u0412\u044b\u0431\u043e\u0440\u043a\u0430 \u0432\u0435\u0441\u044c\u043c\u0430 \u0438\u043d\u0434\u0438\u0432\u0438\u0434\u0443\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u043f\u043e \u0420\u0435\u0439\u0442\u0438\u043d\u0433\u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0432 \u0411\u041a\u0418.\n# --> \u041e\u0436\u0438\u0434\u0430\u0435\u043c \u0441\u0438\u043b\u044c\u043d\u043e\u0433\u043e \u0432\u043b\u0438\u044f\u043d\u0438\u044f 'score_bki' \u043d\u0430 \u0446\u0435\u043b\u0435\u0432\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e\n\ndata.nunique(dropna=False)","cf6aa404":"# \u041f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0441 id \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0438 \u0434\u0430\u0442\u043e\u0439 \u043f\u043e\u0434\u0430\u0447\u0438 \u0437\u0430\u044f\u0432\u043a\u0438 \u0431\u0443\u0434\u0435\u043c \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0431\u0435\u0441\u043f\u043e\u043b\u0435\u0437\u043d\u044b\u043c\u0438 \u0438 \u0443\u0434\u0430\u043b\u0438\u043c \u0438\u0445\ndata.drop(['client_id','app_date',], axis = 1, inplace=True)","22d0ae17":"# \u0418\u0449\u0435\u043c...\ndata.isna().sum()","6200207b":"# \u041f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u0432 'education'. \n# \u0418\u0445 \u0441\u043e\u0432\u0441\u0435\u043c \u043c\u0430\u043b\u043e\ndata.isna().sum()[2] \/ data.shape[0]","0a5b91d3":"# \u0417\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u044d\u0442\u0438 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 'SCH' -- \u0441\u0430\u043c\u044b\u043c \u0447\u0430\u0441\u0442\u044b\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c\ndata['education'].fillna(data.education.mode()[0],inplace=True)","e20f2aa4":"# \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c -- \u0432\u0441\u0451 \u0442\u0435\u043f\u0435\u0440\u044c \u043a\u0440\u0430\u0441\u0438\u0432\u043e \ud83c\udf39 \ud83c\udf3c\ndata.education.value_counts(dropna=False)","32bb7d83":"# \u0420\u0430\u0437\u0432\u0435\u0440\u043d\u0435\u043c \u0437\u0430\u0431\u043b\u0430\u0433\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a 'education', \u0430 \u043f\u043e\u0442\u043e\u043c \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u044c \u043a\u0430\u0436\u0434\u043e\u0439 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438\n# \u0422\u0430\u043a\u0436\u0435 \u043e\u0431\u043d\u043e\u0432\u0438\u043c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0441 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f\u043c\u0438 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 (data.education.unique())\n\ndata = pd.get_dummies(data, columns=['education'], dummy_na=True)\ncat_cols = ['education_GRD', 'education_SCH', 'education_UGR', 'education_PGR', 'education_ACD', 'first_time', 'sna', 'work_address', 'home_address', 'region_rating']\n","c34061f5":"# \u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439.\n# \u041a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0441 \u0434\u0435\u0444\u043e\u043b\u0442\u043e\u043c \u0443 \u0431\u0430\u043d\u043a\u0430 \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043c\u0435\u043d\u044c\u0448\u0435, \u0447\u0435\u043c \u0441 \u0434\u0435\u0444\u043e\u043b\u0442\u043e\u043c. \n# \u042d\u0442\u043e \u0434\u043b\u044f \u0431\u0430\u043d\u043a\u0430 \u0445\u043e\u0440\u043e\u0448\u043e, \u043d\u043e \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438 -- \u043f\u043b\u043e\u0445\u043e\u0432\u0430\u0442\u043e. \n# \u041e\u0436\u0438\u0434\u0430\u0435\u043c \u043f\u0435\u0440\u0435\u043a\u043e\u0441 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0439 \u0432 \u0431\u0430\u0437\u043e\u0432\u043e\u043c \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438!\n\ndata['default'].value_counts(ascending=True).plot(kind='barh')","2994c9ae":"# \u0421\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435, \u043a\u0430\u043a\u0438\u0435 \u0438\u0437 \u043d\u0438\u0445 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043d\u0435\u043f\u043e\u043b\u0435\u0437\u043d\u044b\u043c\u0438 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u043c\u043e\u0434\u0435\u043b\u0438.\n# --> \u041a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438 \u043c\u0435\u0436\u0434\u0443 \u043d\u0438\u043c\u0438 \u0441\u043b\u0430\u0431\u044b\u0435, \u043c\u043e\u0436\u043d\u043e \u0431\u0440\u0430\u0442\u044c \u0432\u0441\u0451!\n# (\u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0438 \u043d\u0435-\u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043d\u0435 \u043e\u0442\u043b\u0438\u0447\u0430\u044e\u0442\u0441\u044f, \u0434\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u0430 -- \u0437\u0430 \u043a\u0430\u0434\u0440\u043e\u043c)\n\nsns.heatmap(data[num_cols].corr().abs(), vmin=0, vmax=1,annot=True, cmap='YlOrBr')\n","bcbcb02c":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u044c \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u0446\u0435\u043b\u0435\u0432\u043e\u0439\n# \u041e\u0436\u0438\u0434\u0430\u0435\u043c\u043e, \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0411\u041a\u0418 \u0438 \u043a\u043e\u043b-\u0432\u043e \u043e\u0442\u043a\u0430\u0437\u043e\u0432 -- \u0441\u0430\u043c\u044b\u0435 \u0432\u0430\u0436\u043d\u044b\u0435.\n# \u041d\u0435\u0432\u0430\u0436\u043d\u043e\u0435 \u043f\u043e\u043a\u0430 \u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c.\n\nfrom sklearn.feature_selection import f_classif\n\nimp_num = pd.Series(f_classif(data[num_cols], data['default'])[0], index = num_cols)\nimp_num.sort_values(inplace = True)\nimp_num.plot(kind = 'barh')","6ab5235d":"def get_boxplot(df, column):\n    '''\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f boxplot'''\n    fig, ax = plt.subplots(figsize=(3, 6))\n    sns.boxplot(x='default', y=column,\n                data=df,\n                ax=ax)\n    plt.xticks(rotation=45)\n    ax.set_title('Boxplot for ' + column)\n    plt.show()\n    ","44f54474":"for column in num_cols:\n    get_boxplot(data.loc[data.loc[:, column].isin(data.loc[:, column].value_counts(normalize=True).index[:20])], column)\n   ","4a43fdb2":"# 7% \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0431\u0435\u0437 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u043d\u044b\u0445 \u0437\u0430\u044f\u0432\u043e\u043a \u043e\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u043c\u0438 (\u043d\u0435 \u043e\u043f\u043b\u0430\u0447\u0438\u0432\u0430\u044e\u0442 \u043a\u0440\u0435\u0442\u0438\u0442)\ndata[data['default'] == 1]['decline_app_cnt'].value_counts(normalize=True)[0]","c9003228":"# \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0435\u043d\u044b \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u0445 \u0438 \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0438\u0445\n\nfor column in data[bin_cols]:\n    print(data[column].value_counts(),  '\\n'*2)","bcde3633":"# \u041f\u0435\u0440\u0435\u043a\u043e\u0434\u0438\u0440\u0443\u0435\u043c \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0438\u0437 \u0431\u0443\u043a\u0432\u0435\u043d\u043d\u044b\u0445 \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0432 \u0446\u0438\u0444\u0440\u043e\u0432\u044b\u0435\nfrom sklearn.preprocessing import LabelEncoder\n\nlabel_encoder = LabelEncoder()\n\nfor column in bin_cols:\n    data[column] = label_encoder.fit_transform(data[column])\n    print(column, dict(enumerate(label_encoder.classes_)))\n    \n# \u0443\u0431\u0435\u0434\u0438\u043c\u0441\u044f \u0432 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0438    \ndata.sample()","e2adec0f":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043a\u0430\u043a\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0434\u0440\u0443\u0433\u0438\u0445 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u0445\n# --> \u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043d\u0435\u0440\u0430\u0432\u043d\u043e\u043c\u0435\u0440\u043d\u043e\u0435, \u0434\u0430\u0436\u0435 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0431\u0435\u0441\u043f\u043e\u0440\u044f\u0434\u043e\u0447\u043d\u043e\u0435\n\ndata[['first_time', 'sna', 'work_address', 'home_address', 'region_rating']].hist(figsize=(8, 8))","e081d4b0":"from sklearn.feature_selection import  mutual_info_classif ","ee143955":"# \u0410 \u0432\u043e\u0442 \u0438 \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u044c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 (\u0432\u043a\u043b\u044e\u0447\u0430\u044f \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 'education') \u0434\u043b\u044f \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439\n\nfrom sklearn.feature_selection import  mutual_info_classif \n\nimp_cat = pd.Series(mutual_info_classif(data[bin_cols + cat_cols], data['default'], discrete_features =True), index = bin_cols + cat_cols)\nimp_cat.sort_values(inplace = True)\nimp_cat.plot(kind = 'barh')","66582475":"plt.figure(figsize=(12, 9))\nsns.heatmap(data[['first_time', 'sna', 'work_address', 'home_address', 'region_rating']+bin_cols].corr(), vmin=0, vmax=1,annot=True, cmap='YlOrBr', linewidths=.5)","6d5f1a8e":"def get_boxplot(df, column):\n    '''\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f boxplot'''\n    fig, ax = plt.subplots(figsize=(10, 5))\n    sns.boxplot(x=column, y='score_bki',\n                data=df,\n                ax=ax)\n    plt.xticks(rotation=45)\n    ax.set_title('Boxplot for ' + column)\n    plt.show()","d6b5216e":"for column in num_cols+cat_cols+bin_cols:\n    get_boxplot(data.loc[data.loc[:, column].isin(data.loc[:, column].value_counts(normalize=True).index[:10])], column)","1d3b6221":"# \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u0443\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a age\ndata['age'] = np.log(data['age'] + 1)\n\n# \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u0443\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a decline_app_cnt\ndata['decline_app_cnt'] = np.log(data['decline_app_cnt'] + 1)\n\n# \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u0443\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a income\ndata['income'] = np.log(data['income'] + 1)\n\n# \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u0443\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a bki_request_cnt\ndata['bki_request_cnt'] = np.log(data.bki_request_cnt + 1)\n","68fc13c1":"# \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043f\u043e\u043b\u0438\u043d\u043e\u043c\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 (\u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u044b).\n# \u041d\u0435\u0441\u043c\u043e\u0442\u0440\u044f \u043d\u0430 \u0441\u0432\u043e\u044e \u043d\u0435\u0438\u043d\u0442\u0440\u043f\u0440\u0435\u0442\u0438\u0440\u0443\u0435\u043c\u043e\u0441\u0442\u044c, \u043e\u043d\u0438 \u0443\u0432\u0435\u043b\u0438\u0447\u0430\u0442 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438.\n\n#from sklearn.preprocessing import PolynomialFeatures\n#pf = PolynomialFeatures(3)\n#poly_features = pf.fit_transform(data[num_cols])\n#poly_features = pd.DataFrame(poly_features, columns = pf.get_feature_names())","47489581":"# \u041d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\nfrom sklearn.preprocessing import StandardScaler\n\nfor column in num_cols:\n    data[column] = StandardScaler().fit_transform(np.array(data[column].values).reshape(-1, 1))\n","3e968c9e":"# \u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u0445 \u043f\u043e\u0441\u043b\u0435 \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0437\u0430\u0446\u0438\u0438 \u0438 \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438\n# --> \u043f\u043e\u043a\u0440\u0430\u0441\u0438\u0432\u0435\u0439 \u0441\u0442\u0430\u043b\u043e \ud83c\udf39 \ud83c\udf3c\ndata[num_cols].boxplot()","83f41cb8":"# \u041f\u0435\u0440\u0435\u043a\u043e\u0434\u0438\u0440\u0443\u0435\u043c \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0432\u043f\u043e\u043d\u044f\u0442\u043d\u044b\u0439 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438 \u0432\u0438\u0434\n\nfrom sklearn import preprocessing\nle = preprocessing.LabelEncoder()\n\nfor column in bin_cols:\n    data[column] = le.fit_transform(data[column])\n    \ncolumns = ['first_time', 'sna', 'work_address', 'home_address', 'region_rating']\n\nfor column in columns:\n    data[column] = le.fit_transform(data[column])","372356bd":"# \u041f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u043f\u043e\u043b\u0438\u043d\u043e\u043c\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 (\u0436\u0430\u043b\u044c, \u043e\u043d\u0438 \u043d\u0435\u0438\u043d\u0442\u0440\u043f\u0440\u0435\u0442\u0438\u0440\u0443\u0435\u043c\u044b)\n# --> \u0438\u043b\u0438 \u043d\u0435 \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u0434\u043b\u044f \u0444\u0438\u043d\u0430\u043b\u044c\u043d\u043e\u0439 \u0432\u0435\u0440\u0441\u0438\u0438...\n\n#data = pd.concat([data, poly_features], axis=1)","95f86da9":"# \u041f\u0440\u043e\u0431\u0443\u0435\u043c \u0431\u0435\u0437 \u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u0443\u044e\u0449\u0438\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0438 \u0441 \u043d\u0438\u043c\u0438\n# --> \u0432 \u0438\u0442\u043e\u0433\u0435 \u0434\u0435\u043b\u0430\u0435\u043c \u043a\u0430\u043a \u0443\u0447\u0438\u043b\u0438... \n\ndata_ready = data.drop(columns=['work_address', 'first_time', 'car'])\n#data_ready = data","f8ad0e93":"# \u0422\u0435\u043f\u0435\u0440\u044c \u0432\u044b\u0434\u0435\u043b\u0438\u043c \u0442\u0435\u0441\u0442\u043e\u0432\u0443\u044e \u0447\u0430\u0441\u0442\u044c\ntrain_data = data_ready.query('sample == 1').drop(['sample'], axis=1)\ntest_data = data_ready.query('sample == 0').drop(['sample', 'default'], axis=1)\n\ny = train_data['default'].values  # \u043d\u0430\u0448 \u0442\u0430\u0440\u0433\u0435\u0442\nX = train_data.drop(['default'], axis=1)","0fad93a7":"# \u0412\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0435 train_test_split \u0434\u043b\u044f \u0440\u0430\u0437\u0431\u0438\u0432\u043a\u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\nfrom sklearn.model_selection import train_test_split\n\n# \u0432\u044b\u0434\u0435\u043b\u0438\u043c 20% \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e (\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 test_size)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","a6a4bdcc":"# \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c\nX_train.shape, X_test.shape, y_train.shape, y_test.shape","e2ae5c1d":"random_seed = 42\nC = np.logspace(-2, 1, 10)\niter_ = 100\nepsilon_stop = 1e-3\n \nparam_grid = [\n    {'penalty': ['l1'], \n     'C': C,\n     'solver': ['liblinear', 'lbfgs'], \n     'class_weight':['none', 'balanced'], \n     'multi_class': ['auto','ovr'], \n     'max_iter':[iter_],\n     'tol':[epsilon_stop]},\n    {'penalty': ['l2'],\n     #'C': C,\n     'solver': ['newton-cg', 'lbfgs', 'liblinear', 'sag', 'saga'], \n     'class_weight':['none', 'balanced'], \n     'multi_class': ['auto','ovr'], \n     'max_iter':[iter_],\n     'tol':[epsilon_stop]},\n    {'penalty': ['none'],\n     'C': C,\n     'solver': ['newton-cg', 'lbfgs', 'sag', 'saga'], \n     'class_weight':['none', 'balanced'], \n     'multi_class': ['auto','ovr'], \n     'max_iter':[iter_],\n     'tol':[epsilon_stop]},\n    {'penalty': ['elasticnet'],\n     'class_weight':['none', 'balanced'], \n     'C': C,\n     'solver': ['saga'], \n     'multi_class': ['auto','ovr'], \n     'max_iter':[iter_],\n     'tol':[epsilon_stop]},\n]","bd26bfe4":"# \u0418\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438:\nfrom sklearn.linear_model import LogisticRegression # \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438\nfrom sklearn import metrics # \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u043c\u043e\u0434\u0435\u043b\u0438\nfrom sklearn.model_selection import GridSearchCV","6dffa93c":"# \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c undersampling \u0438 oversampling\n\n#from imblearn.pipeline import Pipeline\nfrom imblearn.over_sampling import SMOTE\nfrom imblearn.under_sampling import RandomUnderSampler\n\n\n#rus = RandomUnderSampler(sampling_strategy=1, random_state=42)\n#X_us, y_us = rus.fit_resample(X, y)\n\nrus = SMOTE(sampling_strategy=1, random_state=42)\nX_us, y_us = rus.fit_resample(X, y)\n\n\nX_train_us, X_test_us, y_train_us, y_test_us = train_test_split(X_us, y_us, test_size=0.10, shuffle = True, random_state=random_seed)\n\nlogreg_us = LogisticRegression(solver='liblinear', max_iter=1000, random_state=random_seed)  # liblinear    saga\nlogreg_us.fit(X_train_us, y_train_us)\n\ny_pred_us = logreg_us.predict(X_test_us)","948d44f5":"#\u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u043e\u0448\u0438\u0431\u043e\u043a confusion_matrix\n\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import ConfusionMatrixDisplay\n\ncm = confusion_matrix(y_test_us,y_pred_us)\ncm_display = ConfusionMatrixDisplay(cm).plot()","97a16f6f":"from sklearn.metrics import classification_report\nclassification_report = classification_report(y_test_us,y_pred_us)\nprint(classification_report)","201db13d":"# \u041e\u0442\u0440\u0438\u0441\u043e\u0432\u0430\u0442\u044c ROC \u043a\u0440\u0438\u0432\u0443\u044e\nfrom sklearn.metrics import mean_squared_error, f1_score, accuracy_score, roc_curve, roc_auc_score\nfrom matplotlib import pyplot as plt\n\n# \u041f\u043e\u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f ROC \u043a\u0440\u0438\u0432\u043e\u0439 \u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u043f\u043e\u0434 \u043a\u0440\u0438\u0432\u043e\u0439 AUC\nfpr, tpr, thresholds = roc_curve(y_train_us,logreg_us.predict_proba(X_train_us).T[1])\nroc_auc = roc_auc_score(y_train_us,logreg_us.predict_proba(X_train_us).T[1])   \nplt.figure(figsize=(8, 8))\nplt.plot(fpr, tpr, label=f'AUC = {roc_auc:.4f}')\nplt.title('Receiver Operating Characteristic', fontsize=15)\nplt.xlabel('False positive rate (FPR)', fontsize=15)\nplt.ylabel('True positive rate (TPR)', fontsize=15)\nplt.legend(fontsize=15)","25a192f3":"# \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0443\u044e \u0442\u0430\u0431\u043b\u0438\u0446\u0443 \u0441 \u043a\u043e\u044d\u0444\u0438\u0446\u0438\u0435\u043d\u0442\u0430\u043c\u0438 (\u043a\u0430\u043a \u0432\u044b\u0434\u0430\u0435\u0442 \u043c\u043e\u0434\u0435\u043b\u044c)\n\ncoef_ = pd.DataFrame(logreg_us.coef_.T, \n             X_train.columns, \n             columns=['coef'])\\\n            .sort_values(by='coef', ascending=False)\n\n# \u0414\u0430\u043b\u0435\u0435 -- \u0440\u0430\u0437\u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u0443\u0435\u043c \u043a\u043e\u044d\u0444\u0444\u0435\u0446\u0438\u0435\u043d\u0442\u044b \u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 (\u0437\u0430 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435\u043c 'score_bki', \u0435\u0433\u043e \u043d\u0435 \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u043b\u0438 \u0440\u0430\u043d\u0435\u0435)\ncoef_.loc[num_cols] = np.exp(coef_.loc[num_cols])\ncoef_.iloc[0] = np.log(coef_.iloc[0])","fd26cfc6":"# \u0423\u0432\u0435\u043b\u0438\u0447\u0435\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u043d\u0430 1 (\u0448\u0430\u0433) \u0438\u043b\u0438 \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0443 \u0431\u0438\u043d\u0430\u0440\u043d\u043e\u0433\u043e\n# \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u0432\u0430\u0435\u0442 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044c \u0434\u0435\u0444\u043e\u043b\u0442\u0430 \u043d\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 'coef'\ncoef_","87b7109a":"logreg_us.intercept_","50581998":"# \u0412\u044b\u043a\u043b\u044e\u0447\u0435\u043d\u043e \u0434\u043b\u044f \u044d\u043a\u043e\u043d\u043e\u043c\u0438\u0438 \u0432\u0440\u0435\u043c\u0435\u043d\u0438\n\nfrom sklearn.model_selection import cross_validate\n\n#cv_metrics = cross_validate(logreg_us, X_train_us, y_train_us, cv=10, scoring='f1', return_train_score=True)\n\ndef plot_cv_metrics(cv_metrics):\n    avg_f1_train, std_f1_train = cv_metrics['train_score'].mean(), cv_metrics['train_score'].std()\n    avg_f1_valid, std_f1_valid = cv_metrics['test_score'].mean(), cv_metrics['test_score'].std()\n    print('[train] F1-score = {:.2f} +\/- {:.2f}'.format(avg_f1_train, std_f1_train))\n    print('[valid] F1-score = {:.2f} +\/- {:.2f}'.format(avg_f1_valid, std_f1_valid))\n    \n    plt.figure(figsize=(15, 5))\n\n    plt.plot(cv_metrics['train_score'], label='train', marker='.')\n    plt.plot(cv_metrics['test_score'], label='valid', marker='.')\n\n    plt.ylim([0., 1.]);\n    plt.xlabel('CV iteration', fontsize=15)\n    plt.ylabel('F1-score', fontsize=15)\n    plt.legend(fontsize=15)\n","52ad3414":"#plot_cv_metrics(cv_metrics)","850a4e0b":"# \u0435\u0441\u043b\u0438 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0430\u0441 \u0443\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u0442, \u043e\u0431\u0443\u0447\u0430\u0435\u043c \u0444\u0438\u043d\u0430\u043b\u044c\u043d\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0430 \u0432\u0441\u0435\u0445 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n#logreg_final = LogisticRegression(solver='liblinear', max_iter=1000,penalty='l2', C=0.51)\nrandom_seed = 42\n#logreg_final = LogisticRegression(solver='liblinear', max_iter=1000,class_weight='balanced', random_state=random_seed)\nlogreg_final = LogisticRegression(solver='saga', max_iter=1000,class_weight='balanced', random_state=random_seed)\n\nlogreg_final.fit(X, y)","97b4c01a":"#predict_submission = logreg_final.predict(test_data)\n#\u0414\u0435\u043b\u0430\u0435\u043c \u0444\u0438\u043d\u0430\u043b\u044c\u043d\u043e\u0435 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043c\u043e\u0434\u0435\u043b\u0438, \u043e\u0431\u0443\u0447\u0435\u043d\u043d\u043e\u0439 \u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 undersampling \npredict_submission = logreg_us.predict(test_data)","72d5daa3":"sample_submission['default'] = predict_submission\nsample_submission.to_csv('submission.csv', index=False)\nsample_submission.head(10)","63aac1cc":"sample_submission.describe()","c6f64a1a":"!kaggle competitions submit -c sf-scoring -f ssubmission.csv -m \"Message\"\n!kaggle competitions submit your-competition-name -f submission.csv -m 'My submission message'","02187fbf":"from pandas_profiling import ProfileReport","6275f9d4":"profile = ProfileReport(df_train)\n\nprofile.to_notebook_iframe()","aeb9f3b1":"[\u043a \u041e\u0413\u041b\u0410\u0412\u041b\u0415\u041d\u0418\u042e](#\u041e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u0435)\n## \u0414\u0435\u043b\u0435\u043d\u0438\u0435 \u0438 \u043c\u043e\u0434\u0435\u043b\u044c","35dfe6ee":"[\u043a \u041e\u0413\u041b\u0410\u0412\u041b\u0415\u041d\u0418\u042e](#\u041e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u0435)\n# Submission","5b31e709":"#### \u0417\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u044c \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 ","359232e8":"\n**\u0411\u044b\u043b\u043e \u0432 \u0431\u0430\u0437\u043e\u0432\u043e\u043c \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0435:**\n\n                  precision    recall  f1-score   support\n\n              0       0.88      1.00      0.93     12933\n              1       0.50      0.00      0.00      1827\n\n      accuracy                           0.88     14760\n \n     macro avg       0.69      0.50      0.47     14760\n\n    weighted avg     0.83      0.88      0.82     14760\n\n","dbd2a093":"### \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0438 \u0438\u0445 \u0441\u043c\u044b\u0441\u043b:\n    \n    client_id - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n    education - \u0443\u0440\u043e\u0432\u0435\u043d\u044c \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f\n    sex - \u043f\u043e\u043b \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430\n    age - \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430\n    car - \u0444\u043b\u0430\u0433 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f\n    car_type - \u0444\u043b\u0430\u0433 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f \u0438\u043d\u043e\u043c\u0430\u0440\u043a\u0438\n    decline_app_cnt - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0448\u043b\u044b\u0445 \u0437\u0430\u044f\u0432\u043e\u043a\n    good_work - \u0444\u043b\u0430\u0433 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u201c\u0445\u043e\u0440\u043e\u0448\u0435\u0439\u201d \u0440\u0430\u0431\u043e\u0442\u044b\n    bki_request_cnt - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u0411\u041a\u0418\n    home_address - \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0437\u0430\u0442\u043e\u0440 \u0434\u043e\u043c\u0430\u0448\u043d\u0435\u0433\u043e \u0430\u0434\u0440\u0435\u0441\u0430\n    work_address - \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0437\u0430\u0442\u043e\u0440 \u0440\u0430\u0431\u043e\u0447\u0435\u0433\u043e \u0430\u0434\u0440\u0435\u0441\u0430\n    income - \u0434\u043e\u0445\u043e\u0434 \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430\n    foreign_passport - \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0437\u0430\u0433\u0440\u0430\u043d\u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430\n    sna - \u0441\u0432\u044f\u0437\u044c \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430 \u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c\u0438 \u0431\u0430\u043d\u043a\u0430\n    first_time - \u0434\u0430\u0432\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0435\n    score_bki - \u0441\u043a\u043e\u0440\u0438\u043d\u0433\u043e\u0432\u044b\u0439 \u0431\u0430\u043b\u043b \u043f\u043e \u0434\u0430\u043d\u043d\u044b\u043c \u0438\u0437 \u0411\u041a\u0418\n    region_rating - \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0440\u0435\u0433\u0438\u043e\u043d\u0430\n    app_date - \u0434\u0430\u0442\u0430 \u043f\u043e\u0434\u0430\u0447\u0438 \u0437\u0430\u044f\u0432\u043a\u0438\n    default - \u0444\u043b\u0430\u0433 \u0434\u0435\u0444\u043e\u043b\u0442\u0430 \u043f\u043e \u043a\u0440\u0435\u0434\u0438\u0442\u0443","d3aa7489":"### \u0418\u0442\u043e\u0433 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438","8b782ef9":"##### \u0414\u0440\u0443\u0433\u0438\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 (\u0431\u0435\u0437 'education')\n> \u0438\u0445 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043a\u0430\u0436\u0435\u0442\u0441\u044f \u043d\u0435 \u043e\u0447\u0435\u043d\u044c \u0443\u043f\u043e\u0440\u044f\u0434\u043e\u0447\u0435\u043d\u043d\u044b\u043c","e5a04ffe":"[\u043a \u041e\u0413\u041b\u0410\u0412\u041b\u0415\u041d\u0418\u042e](#\u041e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u0435)\n### \u0421\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \n> \u043a\u0430\u043a\u0438\u0435 \u0438\u0437 \u043d\u0438\u0445 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043e\u0441\u043e\u0431\u043e \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u043c\u0438 \u0438 \u043d\u0435\u043f\u043e\u043b\u0435\u0437\u043d\u044b\u043c\u0438.","8dc4515c":"### \u041f\u0440\u043e\u043f\u0443\u0441\u043a\u0438","fd0ab7e9":"\u041e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u0435\n=================\n**(\u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u0440\u0430\u0431\u043e\u0442\u044b)**\n\n- [\u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u044b](#\u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f-\u0447\u0430\u0441\u0442\u044c-\u0440\u0430\u0431\u043e\u0442\u044b)\n    + [\u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0441\u0440\u0435\u0434\u044b \u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430](#\u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430-\u0441\u0440\u0435\u0434\u044b-\u0438-\u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430-\u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430)\n\n  * [\u041f\u0435\u0440\u0432\u044b\u0439 \u0432\u0437\u0433\u043b\u044f\u0434 \u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u0435](#\u041f\u0435\u0440\u0432\u044b\u0439-\u0432\u0437\u0433\u043b\u044f\u0434-\u043d\u0430-\u0434\u0430\u043d\u043d\u044b\u0435)\n    + [\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0438 \u0438\u0445 \u0441\u043c\u044b\u0441\u043b:](#\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u044f-\u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432-\u0438-\u0438\u0445-\u0441\u043c\u044b\u0441\u043b:)\n      - [\u041e\u0431\u0449\u0430\u044f \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430](#\u041e\u0431\u0449\u0430\u044f-\u043f\u0435\u0440\u0432\u0438\u0447\u043d\u0430\u044f-\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430-\u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430)\n\n  * [\u041e\u0431\u0437\u043e\u0440\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437](#\u041e\u0431\u0437\u043e\u0440\u043d\u044b\u0439-\u0430\u043d\u0430\u043b\u0438\u0437)\n    + [\u0426\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u0438 \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u044f \u0441 \u043d\u0435\u0439](#\u0426\u0435\u043b\u0435\u0432\u0430\u044f-\u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f-\u0438-\u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u044f-\u0441-\u043d\u0435\u0439)\n    + [\u0421\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435](#\u0421\u043c\u043e\u0442\u0440\u0438\u043c-\u043d\u0430-\u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435-\u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435)\n    + [\u0421\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435](#\u0421\u043c\u043e\u0442\u0440\u0438\u043c-\u043d\u0430-\u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435-\u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435)\n\n  * [\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432](#\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430-\u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432)\n\n  * [\u0414\u0435\u043b\u0435\u043d\u0438\u0435 \u0438 \u043c\u043e\u0434\u0435\u043b\u044c](#\u0414\u0435\u043b\u0435\u043d\u0438\u0435-\u0438-\u043c\u043e\u0434\u0435\u043b\u044c)\n    + [\u041b\u0443\u0447\u0448\u0438\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u043c\u043e\u0434\u0435\u043b\u0438](#\u041b\u0443\u0447\u0448\u0438\u0439-\u0432\u0430\u0440\u0438\u0430\u043d\u0442-\u043c\u043e\u0434\u0435\u043b\u0438)\n    + [\u0420\u0430\u0437\u0433\u043b\u044f\u0434\u044b\u0432\u0430\u0435\u043c \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442\u044b \u043c\u043e\u0434\u0435\u043b\u0438](#\u0420\u0430\u0437\u0433\u043b\u044f\u0434\u044b\u0432\u0430\u0435\u043c-\u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442\u044b-\u043c\u043e\u0434\u0435\u043b\u0438)\n    + [\u041a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f: \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043d\u0430 \u043f\u0435\u0440\u0435\u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435](#\u041a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f:-\u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c-\u043d\u0430-\u043f\u0435\u0440\u0435\u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435)\n\n\n\t\n- [Submission](#submission)\n\n- [\u041f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435: \u043e\u0442\u0447\u0435\u0442 \u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 \u043e\u0442 pandas_profiling](#\u041f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435:-pandas_profiling)","063024da":"**\u0418\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u044b\u0435 \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u044f:**\n * \u041c\u0435\u0434\u0438\u0430\u043d\u0430 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430 (age) \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0445 \u0447\u0443\u0442\u044c \u043d\u0438\u0436\u0435\n > \u043c\u043e\u043b\u043e\u0434\u044b\u0435 \u0431\u043e\u043b\u044c\u0448\u0435 \u0440\u0438\u0441\u043a\u0443\u044e\u0442 \u043f\u0440\u0438 \u043c\u0435\u043d\u044c\u0448\u0435\u043c \u043e\u043f\u044b\u0442\u0435\n\n * \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u043d\u044b\u0445 \u0437\u0430\u044f\u0432\u043e\u043a (decline_app_cnt): \n >  * \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0441\u043e\u0441\u0440\u0435\u0434\u043e\u0442\u043e\u0447\u0435\u043d\u044b \u0443 \u043d\u043e\u043b\u044f\n >  * \u0411\u0430\u043d\u043a \u043e\u0442\u043a\u043b\u043e\u043d\u044f\u0435\u0442 \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u043e \u0440\u0438\u0441\u043a\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0437\u0430\u044f\u0432\u043e\u043a\n >  * 7% \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0431\u0435\u0437 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u043d\u044b\u0445 \u0437\u0430\u044f\u0432\u043e\u043a \u043e\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u043c\u0438\n \n * \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u044b\u0445 \u0438\u0441\u0442\u043e\u0440\u0438\u0439 (bki_request_cnt) \u0443 \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0445 \u0441\u043a\u043e\u0440\u0435\u0435 \u043e\u0442\u043b\u0438\u0447\u043d\u043e \u043e\u0442 0\n > \u0438\u043c \u0435\u0441\u0442\u044c \u043e \u0447\u0435\u043c \u0431\u0435\u0441\u043f\u043e\u043a\u043e\u0438\u0442\u044c\u0441\u044f\n \n * \u0414\u043e\u0445\u043e\u0434 (income) \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0445 \u043e\u0436\u0438\u0434\u0430\u0435\u043c\u043e \u043d\u0438\u0436\u0435\n ","eb532290":"[\u043a \u041e\u0413\u041b\u0410\u0412\u041b\u0415\u041d\u0418\u042e](#\u041e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u0435)\n### \u0420\u0430\u0437\u0433\u043b\u044f\u0434\u044b\u0432\u0430\u0435\u043c \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442\u044b \u043c\u043e\u0434\u0435\u043b\u0438","8037edab":"#### \u041d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0437\u043d\u0430\u0447\u0438\u043c\u044b\u043c \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a score_bki. \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 (\u0438\u0437 \u0432\u0441\u0435\u0445) \u0432\u0430\u0436\u043d\u044b \u0434\u043b\u044f \u043d\u0435\u0433\u043e.","b17c752f":"#### \u0421\u043d\u0430\u0447\u0430\u043b\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u0438\u0445, \u0447\u0442\u043e\u0431 \u043e\u0446\u0435\u043d\u0438\u0442\u044c \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u044c \u0434\u043b\u044f \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439","b42a0a00":"[\u043a \u041e\u0413\u041b\u0410\u0412\u041b\u0415\u041d\u0418\u042e](#\u041e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u0435)\n## \u041e\u0431\u0437\u043e\u0440\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437","b10d4b65":"#### \u0417\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u044c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 ","e5dcf4a0":"[\u043a \u041e\u0413\u041b\u0410\u0412\u041b\u0415\u041d\u0418\u042e](#\u041e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u0435)\n### \u041b\u0443\u0447\u0448\u0438\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u043c\u043e\u0434\u0435\u043b\u0438\n> **\u0411\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438 \u043f\u043e \u0435\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f\u043c** -- \u0432\u0430\u0436\u043d\u0435\u0439\u0448\u0430\u044f \u043c\u0435\u0440\u0430 \u0434\u043b\u044f  \n> * \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u043f\u0440\u0435\u0434\u0441\u0442\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u043a\u0430\u043a \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0433\u043e \u0434\u0435\u0444\u043b\u043e\u0442\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u0442\u0430\u043a \u0438 \u043d\u0435-\u0434\u0435\u0444\u043e\u043b\u0442\u0430\n> * \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044f \u043e\u0431\u0449\u0435\u0439 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u043c\u043e\u0434\u0435\u043b\u0438","4de3c2f9":"#### \u0426\u0435\u043b\u044c \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0443\u0447\u0435\u0431\u043d\u043e\u0433\u043e Data Science \u043f\u0440\u043e\u0435\u043a\u0442\u0430\n * \u043f\u043e\u0441\u0442\u043e\u0440\u0438\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c \u043c\u0430\u0448\u0438\u043d\u043d\u043e\u0433\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043d\u0430 \u0438\u043c\u0435\u044e\u0449\u0438\u0445\u0441\u044f \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n * \u0434\u043e\u0441\u0442\u0438\u0447\u044c \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0438\u0445 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0435\u0439 \u043f\u043e \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u043c \u043c\u0435\u0442\u0440\u0438\u043a\u0430\u043c \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u043c\u043e\u0434\u0435\u043b\u0438\n\n#### \u0414\u043e\u0441\u0442\u0438\u0433\u043d\u0443\u0442\u044b\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b:\n\n**\u041c\u0435\u0442\u0440\u0438\u043a\u0438 \u0431\u0430\u0437\u043e\u0432\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0438 \u0431\u0430\u0437\u043e\u0432\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438:**\n\n![metrics base](attachment:2a47bef0-a45c-421e-81b9-71251fa638e0.png)\n\n**\u041c\u0435\u0442\u0440\u0438\u043a\u0438 \u043f\u043e\u0441\u043b\u0435 \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b (\u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0435):**\n\nConfusion Matrix\n\n![Confusion Matrix](attachment:b8acdfe3-6707-4af4-962c-eeefe9e0e422.png)\n\nClassification Report\n\n![Classification Report](attachment:3b473db3-9c2a-49b4-9d57-818973d1c12b.png)\n\nRoc Curve\n\n![Roc Curve](attachment:8a53cabd-86d3-4f56-90a0-352224e19260.png)\n\nCross Validation Metrics\n\n![Cross Validation Metrics](attachment:d5a8c2a4-e681-4cc7-bbc8-b79cc6292d70.png)\n\n> **\u042d\u0442\u043e \u0441\u0432\u0438\u0434\u0435\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u0443\u0435\u0442:**\n> * \u043e \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u043f\u0440\u0435\u0434\u0441\u0442\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u043a\u0430\u043a \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0433\u043e \u0434\u0435\u0444\u043b\u043e\u0442\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u0442\u0430\u043a \u0438 \u043d\u0435-\u0434\u0435\u0444\u043e\u043b\u0442\u0430\n> * \u0447\u0442\u043e \u044d\u0442\u0430 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u043c \u0440\u0430\u0432\u043d\u0430 79%\n> * \u0447\u0442\u043e \u043f\u0435\u0440\u0435\/\u043d\u0435\u0434\u043e-\u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043d\u0435\u0442 (\u043f\u043e\u043a\u0430\u0437\u0430\u043b\u0430 \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f)\n\n\n#### \u0427\u0442\u043e \u0441\u0434\u0435\u043b\u0430\u043d\u043e:\n> * \u043e\u0442\u0441\u0435\u0438\u0432\u0430\u043d\u0438\u0435 \u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u0443\u044e\u0449\u0438\u0445 \u0438 \u043c\u0435\u043d\u0435\u0435 \u0437\u043d\u0430\u0447\u0438\u043c\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n> * \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0438 \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n> * \u043f\u043e\u043b\u0438\u043d\u043e\u043c\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 (\u0436\u0430\u043b\u044c, \u043e\u043d\u0438 \u043d\u0435\u0438\u043d\u0442\u0440\u043f\u0440\u0435\u0442\u0438\u0440\u0443\u0435\u043c\u044b \u0438 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u044b \u0432 \u0444\u0438\u043d\u0430\u043b\u044c\u043d\u043e\u0439 \u0432\u0435\u0440\u0441\u0438\u0438)\n> * \u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438\n> * \u043f\u043e\u0434\u0431\u043e\u0440 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u043c\u043e\u0434\u0435\u043b\u0438","182322c2":"##### \u0411\u0438\u043d\u0430\u0440\u043d\u044b\u0435","08b03935":"## \u041a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f: \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043d\u0430 \u043f\u0435\u0440\u0435\u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435","95603e85":"[\u043a \u041e\u0413\u041b\u0410\u0412\u041b\u0415\u041d\u0418\u042e](#\u041e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u0435)\n# \u041f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435: pandas_profiling","820a6b39":"#### \u041e\u0431\u0449\u0430\u044f \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430\n> \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u0430\u044f (\u0432 \u0442\u043e\u043c \u0447\u0438\u0441\u043b\u0435) \u0434\u043b\u044f \u043e\u0431\u0437\u043e\u0440\u043d\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430","49232e92":"### \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0441\u0440\u0435\u0434\u044b \u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430","549e97c7":"#### \u0418\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u044b\u0435 \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u044f \u0438\u0437 \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430:\n  * \u041e\u0434\u0438\u043d \u0438\u0437 \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0437\u043d\u0430\u0447\u0438\u043c\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 -- \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0411\u041a\u0418 (score_bki)\n> \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 (\u0438\u0437 \u0432\u0441\u0435\u0445), \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0437\u0430\u043c\u0435\u0442\u043d\u043e \u043c\u0435\u043d\u044f\u044e\u0442\u0441\u044f \u0432\u043c\u0435\u0441\u0442\u0435 \u0441 \u043d\u0438\u043c : \n> * decline_app_cnt \n> * bki_request_cnt\n> * education_ACD\n> * car_type\n \n* \u041c\u0435\u0434\u0438\u0430\u043d\u0430 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430 (age) \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0431\u0430\u043d\u043a\u0430 \u0447\u0443\u0442\u044c \u043d\u0438\u0436\u0435\n > \u043c\u043e\u043b\u043e\u0434\u044b\u0435 \u0431\u043e\u043b\u044c\u0448\u0435 \u0440\u0438\u0441\u043a\u0443\u044e\u0442 \u043f\u0440\u0438 \u043c\u0435\u043d\u044c\u0448\u0435\u043c \u043e\u043f\u044b\u0442\u0435\n\n* \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u043d\u044b\u0445 \u0437\u0430\u044f\u0432\u043e\u043a (decline_app_cnt): \n >  * \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0441\u043e\u0441\u0440\u0435\u0434\u043e\u0442\u043e\u0447\u0435\u043d\u044b \u0443 \u043d\u043e\u043b\u044f\n >  * \u0411\u0430\u043d\u043a \u043e\u0442\u043a\u043b\u043e\u043d\u044f\u0435\u0442 \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u043e \u0440\u0438\u0441\u043a\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0437\u0430\u044f\u0432\u043e\u043a\n >  * 7% \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0431\u0435\u0437 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u043d\u044b\u0445 \u0437\u0430\u044f\u0432\u043e\u043a \u043e\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u043c\u0438\n \n* \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u044b\u0445 \u0438\u0441\u0442\u043e\u0440\u0438\u0439 (bki_request_cnt) \u0443 \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0445 \u0441\u043a\u043e\u0440\u0435\u0435 \u043e\u0442\u043b\u0438\u0447\u043d\u043e \u043e\u0442 0\n > \u0438\u043c \u0435\u0441\u0442\u044c \u043e \u0447\u0435\u043c \u0431\u0435\u0441\u043f\u043e\u043a\u043e\u0438\u0442\u044c\u0441\u044f\n \n* \u0414\u043e\u0445\u043e\u0434 (income) \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0445 \u043e\u0436\u0438\u0434\u0430\u0435\u043c\u043e \u043d\u0438\u0436\u0435\n \n ","5223d1ab":"#### \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u0430\u043a \u043e\u0442\u043b\u0438\u0447\u0430\u044e\u0442\u0441\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0445 \u0438 \u0434\u043b\u044f \u043d\u0435-\u0434\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432\n> \u0432\u043e\u0437\u044c\u043c\u0435\u043c \u0434\u0432\u0430\u0434\u0446\u0430\u0442\u043a\u0443 \u0441\u0430\u043c\u044b\u0445 \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0449\u0438\u0445\u0441\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439","5f61af71":"[\u043a \u041e\u0413\u041b\u0410\u0412\u041b\u0415\u041d\u0418\u042e](#\u041e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u0435)\n# \u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u044b","01679f12":"\u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u0438 \u0434\u0435\u0444\u043e\u043b\u0442\u0430 \u0431\u0430\u043d\u043a\u043e\u0432\u0441\u043a\u043e\u0433\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n====================================================\n## Bank credit scoring\nSkillFactory DST Project","920da54c":"![image.png](attachment:5fd35fe1-27d3-4fee-8426-f228c32d9657.png)","aecb6b94":"### \u0421\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \n> \u043a\u0430\u043a\u0438\u0435 \u0438\u0437 \u043d\u0438\u0445 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043e\u0441\u043e\u0431\u043e \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u043c\u0438 \u0438 \u043d\u0435\u043f\u043e\u043b\u0435\u0437\u043d\u044b\u043c\u0438 ","a29d3553":"### \u041d\u0435\u043c\u043d\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0438","352269bb":"#### \u041a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442\u044b \u043c\u043e\u0434\u0435\u043b\u0438 \n\n> \u0423\u0432\u0435\u043b\u0438\u0447\u0435\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u043d\u0430 1 (\u0438\u043b\u0438 \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0443 \u0431\u0438\u043d\u0430\u0440\u043d\u043e\u0433\u043e) \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u0432\u0430\u0435\u0442 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044c \u0434\u0435\u0444\u043e\u043b\u0442\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u043d\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 'coef'","0f3ea486":"### \u0420\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u0441 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u043c\u0438 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u043c\u0438","7a363168":"### \u0426\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u0438 \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u044f \u0441 \u043d\u0435\u0439","ed7816ff":"### \u0412\u043e\u0442 \u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f\u043c\u0438 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u043c\u0435\u0436\u0434\u0443 \u0441\u043e\u0431\u043e\u0439\n(\u0441\u043c. \u043f\u043e\u043b\u043d\u044b\u0439 \u043e\u0442\u0447\u0435\u0442 \u043e\u0442 pandas_profiling \u0432 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438\n[pandas_profiling](#\u041f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435:-pandas_profiling))\n\n**\u0423\u0434\u0430\u043b\u044f\u0442\u044c \u0431\u0443\u0434\u0435\u043c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0441 \u0432\u044b\u0441\u043e\u043a\u043e\u0439 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0435\u0439 \u0438 \u043c\u0435\u043d\u044c\u0448\u0435\u0439 \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u044c\u044e**\n\n> 'work_address', 'first_time', 'car'\n\n","7e9cca2f":"#### \u041a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 ","ee5eb5ff":"# \u0427\u0442\u043e \u0441\u0434\u0435\u043b\u0430\u043d\u043e","0b888478":"[\u043a \u041e\u0413\u041b\u0410\u0412\u041b\u0415\u041d\u0418\u042e](#\u041e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u0435)\n#### \u041e\u0434\u0438\u043d \u0438\u0437 \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0437\u043d\u0430\u0447\u0438\u043c\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 -- \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0411\u041a\u0418 (score_bki) \n**\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 (\u0438\u0437 \u0432\u0441\u0435\u0445) \u043c\u0435\u043d\u044f\u044e\u0442\u0441\u044f \u0432\u043c\u0435\u0441\u0442\u0435 \u0441 \u043d\u0438\u043c**\n> \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0437\u0430\u043c\u0435\u0442\u043d\u044b: \n> * decline_app_cnt \n> * bki_request_cnt\n> * education_\u0424\u0421\u0412\n> * car_type","1ce0bd9f":"<img src=\"https:\/\/www.nfcc.org\/wp-content\/uploads\/2020\/09\/bigstock-Credit-Score-Concept-Business-384487778-768x477.jpg\">","9fd5e5c8":"[\u043a \u041e\u0413\u041b\u0410\u0412\u041b\u0415\u041d\u0418\u042e](#\u041e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u0435)\n## \u041f\u0435\u0440\u0432\u044b\u0439 \u0432\u0437\u0433\u043b\u044f\u0434 \u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u0435","90ad33f4":"### \u0420\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u0441 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u043c\u0438","435839f4":"[\u043a \u041e\u0413\u041b\u0410\u0412\u041b\u0415\u041d\u0418\u042e](#\u041e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u0435)\n## \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432"}}