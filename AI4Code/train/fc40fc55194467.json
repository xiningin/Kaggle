{"cell_type":{"adffdd9a":"code","ace7b294":"code","64e6a8e9":"code","495170a7":"code","8445a4e1":"code","3e48b4a6":"code","512d9fca":"code","3773d9d2":"code","8d415d1b":"code","c372c076":"code","ff930657":"code","e4633c6d":"code","4662f308":"code","b6b6e4fb":"code","c3c7e757":"code","92aaa9ca":"code","864ba620":"code","41309522":"code","e27e843f":"code","432e95ca":"code","b1ba9b87":"code","808455aa":"markdown","950e3315":"markdown"},"source":{"adffdd9a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ace7b294":"import matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n%matplotlib inline\n\nimport tensorflow as tf\nfrom tensorflow.keras import models, layers\nimport PIL\nimport cv2","64e6a8e9":"test_df = pd.read_csv(\"\/kaggle\/input\/sign-language-mnist\/sign_mnist_test\/sign_mnist_test.csv\")\ntrain_df = pd.read_csv(\"\/kaggle\/input\/sign-language-mnist\/sign_mnist_train\/sign_mnist_train.csv\")","495170a7":"print(train_df.shape)\nprint(test_df.shape)","8445a4e1":"train_df.head()","3e48b4a6":"y_train = train_df['label']\nX_train = train_df.drop('label', axis='columns')","512d9fca":"y_test = test_df['label']\nX_test = test_df.drop('label', axis='columns')","3773d9d2":"alphapets=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\nlabels_dict={}\nfor count, values in enumerate(alphapets):\n    labels_dict[count] = values\n    \n\nprint(labels_dict)","8d415d1b":"y_trainn = tf.keras.utils.to_categorical(y_train)\ny_testt = tf.keras.utils.to_categorical(y_test)\nprint(\"Y Train Shape: \", y_trainn.shape)\nprint(\"Y Test Shape: \", y_testt.shape)","c372c076":"X_train_tt = X_train.values\nX_test_tt = X_test.values\nX_train_final = []\nX_test_final = []\n\n\nfor i in range(len(X_train)):\n    X_train_final.append(X_train_tt[i].reshape(28, 28, 1))\nfor i in range(len(X_test)):\n    X_test_final.append(X_test_tt[i].reshape(28, 28, 1))","ff930657":"def plot_image(X, y, num):\n    plt.imshow(X[num], cmap='gray')\n    plt.title(\"Predicted  \" + labels_dict[y[num]])","e4633c6d":"plot_image(X_train_finall, y_train, 1200)","4662f308":"# We'll just normalize our data just inn case\n\nX_train_finall = np.array(X_train_final) \/ 255\nX_test_finall = np.array(X_test_final) \/ 255","b6b6e4fb":"import seaborn as sns\nplt.figure(figsize=(14,8))\ng = sns.countplot(y_train)\ng.set(xlabel=\"Alphapets\", ylabel=\"How many times it occured\", )","c3c7e757":"CNN = models.Sequential([\n    layers.Conv2D(32, (3,3), padding='same', activation='relu', input_shape=(28,28,1)),\n    layers.MaxPooling2D((2,2)),\n    layers.Conv2D(64, (3,3), padding='same', activation='relu'),\n    layers.MaxPooling2D((2,2)),\n    layers.Conv2D(64, (3,3), padding='same', activation='relu'),\n    layers.MaxPooling2D((2,2)),\n    \n    layers.Flatten(),\n    layers.Dense(128, activation='relu'),\n    layers.Dense(25, activation='softmax')\n])","92aaa9ca":"CNN.compile(\n    optimizer='adam',\n    loss='categorical_crossentropy',\n    metrics=['accuracy']\n)","864ba620":"CNN.fit(X_train_finall, y_trainn, epochs=10)","41309522":"CNN.evaluate(X_test_finall, y_testt)","e27e843f":"y_preds = CNN.predict(X_test_finall)","432e95ca":"y_labels = [np.argmax(elem) for elem in y_preds]","b1ba9b87":"n = 122\nprint(\"Label: \", labels_dict[y_test[n]])\nplot_image(X_test_finall, y_labels, n)","808455aa":"### Now Let's train our model","950e3315":"Soooo after we dealt with our data and knew how to plot it (after so long) \nWe now have our training set and our test set too shuffelled and ready to go \nbut first let's just do some data analysis and see how our data look like"}}