{"cell_type":{"a6b85823":"code","22590219":"code","c6a35fa8":"code","781e0927":"code","ed61bf10":"code","eb4488ec":"code","ad6549ad":"code","2367eccd":"code","e7e7a28c":"code","3531d57a":"code","d61620c4":"code","40761a77":"code","7b375ee8":"code","653b6287":"code","c1204b50":"code","6d50d463":"code","05571c21":"code","cacda9bb":"code","a008fee2":"code","fd8016c3":"code","39e16552":"code","ce8a157f":"code","e3c734aa":"code","b66b4409":"code","9af63ad0":"markdown","c246e64e":"markdown","7b37206c":"markdown","9f62fc70":"markdown","701297be":"markdown"},"source":{"a6b85823":"%matplotlib inline\nimport pandas as pd\nimport datetime as dt\nimport numpy as np\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"all\"\nimport datetime as dt\nimport re\nfrom igraph import Graph\nimport plotly.graph_objects as go","22590219":"import matplotlib.pyplot as plt\nplt.rcParams['figure.figsize'] = [16, 10]\nplt.rcParams['font.size'] = 14\nimport seaborn as sns\nsns.set_palette(sns.color_palette('tab20', 20))\n\nstart = dt.datetime.now()\nheroes = ['Hunter', 'Paladin', 'Mage', 'Shaman', 'Warlock', 'Druid', 'Priest', 'Warrior', 'Rogue']\ndeck_size = 30\ncard_cols = [f'card_{i}' for i in range(deck_size)]","c6a35fa8":"decks = pd.read_csv('..\/input\/hearthstone-decks\/top_hearthstone_decks_20200221.csv')","781e0927":"card_sets = []\nfor _, deck in decks[card_cols].iterrows():\n    card_sets.append(set(card for card in deck.values if card is not None))\ndecks['card_sets'] = card_sets\ndecks['nunique_cards'] = decks.card_sets.map(len)\ndecks.head()\ndecks.shape","ed61bf10":"df = pd.concat([\n    decks.groupby('hero')[['games', 'wins']].sum(),\n    decks.groupby('hero')[['dust', 'nunique_cards']].mean()\n], axis=1)\ndf['wr'] = df.wins \/ df.games\ndf = df.sort_values(by='games', ascending=False)\ndf","eb4488ec":"data = [\n    go.Bar(\n        y=df['games'].values,\n        x=df.index,\n        marker=dict(\n            color=df['wr'].values,\n            colorscale='RdYlGn',\n            showscale=True\n        ),\n        text=np.round(df.wr.values * 100, 1),\n    )\n]\nlayout = go.Layout(\n    autosize=True,\n    title='Heroes (games and winrate)',\n    hovermode='closest',\n    xaxis=dict(title='Heroes', ticklen=5, zeroline=False, gridwidth=0),\n    yaxis=dict(title='Number of games', ticklen=5, gridwidth=2),\n    showlegend=False\n)\nfig = go.Figure(data=data, layout=layout)\nfig","ad6549ad":"df = pd.concat([\n    decks.groupby('type')[['games', 'wins']].sum(),\n    decks.groupby('type')[['dust', 'nunique_cards']].mean()\n], axis=1)\ndf['wr'] = df.wins \/ df.games\ndf = df.sort_values(by='games', ascending=False)\ndf","2367eccd":"top_archetypes = df[:20]\ndata = [\n    go.Bar(\n        y=top_archetypes['games'].values,\n        x=top_archetypes.index,\n        marker=dict(\n            color=top_archetypes['wr'].values,\n            colorscale='RdYlGn',\n            showscale=True\n        ),\n        text=np.round(top_archetypes.wr.values * 100, 1),\n    )\n]\nlayout = go.Layout(\n    autosize=True,\n    title='Most popular archetypes',\n    hovermode='closest',\n    xaxis=dict(title='Archetypes', ticklen=5, zeroline=False, gridwidth=0),\n    yaxis=dict(title='Number of games', ticklen=5, gridwidth=2),\n    showlegend=False\n)\nfig = go.Figure(data=data, layout=layout)\nfig","e7e7a28c":"def jaccard(s1, s2):\n    return len(s1 & s2) \/ len(s1 | s2)","3531d57a":"similarity_matrix = np.zeros((len(decks), len(decks)))\nedge_list = []\nfor i, card_set_i in enumerate(decks.card_sets.values):\n    for j, card_set_j in enumerate(decks.card_sets.values):\n        if i < j:\n            similarity = jaccard(card_set_i, card_set_j)\n            if (similarity > 0):\n                similarity_matrix[i, j] = similarity\n                edge = [i, j, similarity, len(card_set_i & card_set_j), card_set_i & card_set_j]\n                edge_list.append(edge)","d61620c4":"edge_df = pd.DataFrame(edge_list, columns=['i', 'j', 'similarity', 'k', 'intersection'])\nedge_df.shape\nedge_df.head()\nedge_df.mean()","40761a77":"edge_df[['k', 'similarity']].hist(bins=30)\nplt.suptitle('Similarity stats')\nplt.plot();","7b375ee8":"similarity_threshold = 0.2\nstrong_edges = edge_df[edge_df['similarity'] > similarity_threshold]\nstrong_edges.shape","653b6287":"g = Graph()\ng.add_vertices(len(decks))\ng.vs['type'] = decks.type\ng.add_edges(strong_edges[['i', 'j']].values)\ng.es['weight'] = strong_edges['similarity'].values\ndegrees = g.degree()\ng.summary()","c1204b50":"clusters = g.clusters()\nfor sg in clusters.subgraphs():\n    if sg.vcount() > 1:\n        sg.summary()","6d50d463":"graph_layout = g.layout('fr', weights='weight')\ncoords = np.array(graph_layout.coords)\ndeck_coords = pd.DataFrame(coords, columns=['x', 'y'])\ndecks['x'] = deck_coords.x\ndecks['y'] = deck_coords.y","05571c21":"data = []\nfor u1, u2 in strong_edges[['i', 'j']].values:\n    if degrees[u1] < 20 or degrees[u2] < 20 or np.random.rand() > 0.9:\n        trace = go.Scatter(\n            x = [deck_coords.loc[u1, 'x'], deck_coords.loc[u2, 'x']],\n            y = [deck_coords.loc[u1, 'y'], deck_coords.loc[u2, 'y']],\n            mode = 'lines',\n            name='edges',\n            opacity=0.5,\n            line=dict(color='grey', width=1))\n        data.append(trace)\n\nfor hero, df in decks.groupby('hero'):\n    data.append(\n        go.Scatter(\n            y=df['y'].values,\n            x=df['x'].values,\n            mode='markers',\n            name=hero,\n            marker=dict(sizemode='diameter',\n                        sizeref=2,\n                        size=df.games.values ** 0.3,\n                        color='black'\n                        ),\n            text=df.type.values,\n        )\n    )\nlayout = go.Layout(\n    autosize=True,\n    title='Top decks',\n    hovermode='closest',\n    yaxis = dict(showgrid=False, zeroline=False, showline=False, showticklabels=False),\n    xaxis = dict(showgrid=False, zeroline=False, showline=False, showticklabels=False),\n    showlegend=False\n)\nfig = go.Figure(data=data, layout=layout)\nfig","cacda9bb":"data = []\nfor hero, df in decks.groupby('hero'):\n    data.append(\n        go.Scatter(\n            y=df['y'].values,\n            x=df['x'].values,\n            mode='markers',\n            name=hero,\n            marker=dict(sizemode='diameter',\n                        sizeref=2,\n                        size=df.games.values ** 0.3,\n                        ),\n            text=df.type.values,\n        )\n    )\nlayout = go.Layout(\n    autosize=True,\n    title='Top decks',\n    hovermode='closest',\n    yaxis = dict(showgrid=False, zeroline=False, showline=False, showticklabels=False),\n    xaxis = dict(showgrid=False, zeroline=False, showline=False, showticklabels=False),\n    showlegend=True\n)\nfig = go.Figure(data=data, layout=layout)\nfig","a008fee2":"data = [\n    go.Scatter(\n        y=decks['y'].values,\n        x=decks['x'].values,\n        mode='markers',\n        marker=dict(sizemode='diameter',\n                    sizeref=2,\n                    size=decks.games.values ** 0.3,\n                    color=decks.wr.values,\n                    colorscale='RdYlGn',\n                    showscale=True\n                    ),\n        text=decks.type.values,\n    )\n]\nlayout = go.Layout(\n    autosize=True,\n    title='Top decks',\n    hovermode='closest',\n    yaxis = dict(showgrid=False, zeroline=False, showline=False, showticklabels=False),\n    xaxis = dict(showgrid=False, zeroline=False, showline=False, showticklabels=False),\n    showlegend=False\n)\nfig = go.Figure(data=data, layout=layout)\nfig","fd8016c3":"data = [\n    go.Scatter(\n        y=decks['y'].values,\n        x=decks['x'].values,\n        mode='markers',\n        marker=dict(sizemode='diameter',\n                    sizeref=2,\n                    size=decks.games.values ** 0.3,\n                    color=decks.dust.values,\n                    colorscale='Viridis',\n                    showscale=True\n                    ),\n        text=decks.type.values,\n    )\n]\nlayout = go.Layout(\n    autosize=True,\n    title='Top decks - Dust cost',\n    hovermode='closest',\n    yaxis = dict(showgrid=False, zeroline=False, showline=False, showticklabels=False),\n    xaxis = dict(showgrid=False, zeroline=False, showline=False, showticklabels=False),\n    showlegend=False\n)\nfig = go.Figure(data=data, layout=layout)\nfig","39e16552":"data = [\n    go.Scatter(\n        y=df['wr'].values,\n        x=df['dust'].values,\n        mode='markers',\n        name=hero,\n        marker=dict(sizemode='diameter',\n                    sizeref=2,\n                    size=df.games.values ** 0.3\n                    ),\n        text=decks.type.values,\n    ) for hero, df in decks.groupby('hero')\n]\nlayout = go.Layout(\n    autosize=True,\n    title='Top decks - Dust vs winrate',\n    hovermode='closest',\n    xaxis=dict(title='Dust', ticklen=5, zeroline=False, gridwidth=0),\n    yaxis=dict(title='Win rate', ticklen=5, gridwidth=2),\n    showlegend=True\n)\nfig = go.Figure(data=data, layout=layout)\nfig","ce8a157f":"decks['expected_star_per_turn'] = (3 * (2 * decks.wr - 1) + decks.wr * decks.wr * decks.wr) \/ 3\ndecks['star_speed'] = 60 * decks.expected_star_per_turn \/ decks.duration","e3c734aa":"decks.sort_values(by='star_speed', ascending=False)[[\n    'type', 'dust', 'wr', 'games', 'duration', 'expected_star_per_turn', 'star_speed']].head(10)\ndecks.sort_values(by='games', ascending=False)[[\n    'type', 'dust', 'wr', 'games', 'duration', 'expected_star_per_turn', 'star_speed']].head(10)","b66b4409":"end = dt.datetime.now()\nprint('Latest run {}.\\nTotal time {}s'.format(end, (end - start).seconds))","9af63ad0":"## Archetypes","c246e64e":"## Graph clustering","7b37206c":"## Deck similarity","9f62fc70":"![Hearthstone](https:\/\/static-cdn.jtvnw.net\/jtv_user_pictures\/679a6363-aa15-4211-9f2e-381c971c5473-profile_banner-480.png)\n\n# Hearthstone deck similarity\n\nSource: https:\/\/hsreplay.net\/decks\/","701297be":"# Star speed"}}