{"cell_type":{"8d484c7e":"code","1d653148":"code","092ee75b":"code","068073c6":"code","1faddb60":"code","2c7ec8ad":"code","d468dfb7":"code","70e8d6af":"code","dcb01fd5":"code","5f9d2478":"code","ce254f3f":"code","a11aaedf":"code","da0da134":"code","b7d65ef6":"code","a2d48313":"code","f74e70a6":"code","fc6fb6a1":"markdown","17a2cb13":"markdown","6a50b8a4":"markdown","7327fc11":"markdown","bbfb5b53":"markdown","2b08d155":"markdown"},"source":{"8d484c7e":"install.packages(\"BiocManager\")\nBiocManager::install(\"edgeR\")\nBiocManager::install(\"Glimma\")\nBiocManager::install(\"limma\")\nBiocManager::install(\"org.Hs.eg.db\")","1d653148":"# Load librarys\nlibrary('edgeR')\nlibrary('limma')\nlibrary('Glimma')\nlibrary('ggplot2')\nlibrary('RColorBrewer')\nlibrary('morpheus')\nlibrary('org.Hs.eg.db')\nlibrary(\"dplyr\")\nlibrary(\"gplots\")","092ee75b":"# Reading principal path L3 counts data to extrac txt files\nl3_count_main_path <- \"\/home\/jupyter\/end-als\/transcriptomics-data\/L3_counts\"\n# List of folder in L3_counts\nl3_count_main_path_list <- list.files(path = l3_count_main_path)\n# Declare variable just for concatenate txt files\nall_transcriptomic_counts <- \"Principal\"\nflag <- TRUE\nfor (folder in l3_count_main_path_list){\n    # Get sub-folder path\n    subfolder <- list.files(path=paste(l3_count_main_path, folder, sep='\/'))\n    # If the folder contains more than one file the is excluded\n    if (length(subfolder) > 1){\n        next\n    }\n    # Read last file this path contain the name of .txt file\n    exon_txt_file <- list.files(path=paste(l3_count_main_path, folder, subfolder, sep='\/'))\n    # Concatenate all path to read csv\n    complete_l3_count_path <- paste(l3_count_main_path, folder, subfolder, exon_txt_file, sep='\/')\n    \n    # Reading exo.txt file\n    l3_counts_per_id <- read.table(complete_l3_count_path, sep = \"\\t\", header=TRUE)\n    # Select genes columns and counts\n    l3_counts_per_id <- subset(l3_counts_per_id, select=(c(1,7)))\n    # Change the name of columns for genes for genes and counts per id\n    colnames(l3_counts_per_id) <- c(\"genes\", folder)\n    # If is the first iterarion then enter into if and save file in all_transcript_count to by concacatenate later\n    if(flag){\n        flag<- FALSE\n        all_transcriptomic_counts <- l3_counts_per_id\n        next\n    }\n    # Join all count in single file\n    all_transcriptomic_counts <- left_join(x = all_transcriptomic_counts, y = l3_counts_per_id, by = \"genes\", all.x = TRUE)\n}\n# Write csv file of raw counts\nwrite.csv(all_transcriptomic_counts, \"raw_L3counts_data.csv\")","068073c6":"# To performance MDS with color by case and ctrl is necesario get the groups from clinical data portal data\nclinical_data_portal <- read.csv('\/home\/jupyter\/end-als\/clinical-data\/filtered-metadata\/metadata\/aals_dataportal_datatable.csv')\n# Creating dataframe just with data that we need\n\n\nclinical_data_portal_subset <- data.frame(clinical_data_portal$Participant_ID, clinical_data_portal$Sex,\n                                         clinical_data_portal$Race, clinical_data_portal$Subject.Group, \n                                         clinical_data_portal$Site.of.Onset, clinical_data_portal$NEFH..SMI32.,\n                                         clinical_data_portal$ISL1, clinical_data_portal$`NKX6.1`, \n                                         clinical_data_portal$TUBB3..TuJ1., clinical_data_portal$s100b,\n                                         clinical_data_portal$ALSFRS.R.Baseline, clinical_data_portal$ALSFRS.R.Latest,\n                                         clinical_data_portal$ALSFRS.R.Progression.Slope,\n                                         clinical_data_portal$CBS.Baseline, clinical_data_portal$CBS.Latest,\n                                         clinical_data_portal$CBS.Progression.Slope)\n# Change col names\ncolnames(clinical_data_portal_subset) <- c(\"Participant_ID\", \"Sex\", \"Race\", \"SubjectGroup\", \"SiteOfOnset\", \"NEFH\",\n                                          \"ISL1\", \"NKX6\", \"TUBB3\", \"s100b\", \"ALSFRSBaseline\", \"ALSFRSLatest\", \"ALSFRSProgressionSlope\",\n                                            \"CBSBaseline\", \"CBSLatest\", \"CBS.Progression.Slope\")\n# Transpose data to join data portal and raw counts data\nall_transcriptomic_counts_transpose <- t(all_transcriptomic_counts)\n# Change the columns names for the ids\ncolnames(all_transcriptomic_counts_transpose) <- all_transcriptomic_counts_transpose[1, ]\n# Delete  ids from the first row \nall_transcriptomic_counts_transpose <- data.frame(all_transcriptomic_counts_transpose[-c(1), ])\n# set participant Id as columns\nall_transcriptomic_counts_transpose$Participant_ID <- rownames(all_transcriptomic_counts_transpose)\n# Join raw counts and data portal \nall_transcriptomic_counts_and_data_portal <- left_join(x = all_transcriptomic_counts_transpose, \n                                       y = clinical_data_portal_subset, by = \"Participant_ID\", all.x = TRUE)\n\n# Save transcripts groups to use latter in Difererntial expression analysis\ntranscripts_groups <- all_transcriptomic_counts_and_data_portal[c(\"Participant_ID\", \"Sex\", \"Race\", \n                                                                 \"SubjectGroup\", \"SiteOfOnset\", \"NEFH\",\n                                                                 \"ISL1\", \"NKX6\", \"TUBB3\", \"s100b\", \"ALSFRSBaseline\",\n                                                                 \"ALSFRSLatest\", \"ALSFRSProgressionSlope\", \"CBSBaseline\", \n                                                                 \"CBSLatest\", \"CBS.Progression.Slope\")]\n\ntranscripts_groups$SubjectGroup[which(transcripts_groups$SubjectGroup != \"Healthy Control\")]  <- \"ALS\"\n# Delete columns from raw counts\nall_transcriptomic_counts_and_data_portal <- subset(all_transcriptomic_counts_and_data_portal, select=-c( Sex, Race, \n                                                                 SubjectGroup, SiteOfOnset, NEFH,\n                                                                 ISL1, NKX6, TUBB3, s100b, ALSFRSBaseline,\n                                                                 ALSFRSLatest, ALSFRSProgressionSlope, CBSBaseline, \n                                                                 CBSLatest, CBS.Progression.Slope))","1faddb60":"# report process to transpose data\n\n# Transpose data to have id in columns\nall_transcriptomic_counts_and_data_portal <- t(all_transcriptomic_counts_and_data_portal)\n# Change the columns names for  ids patinets\ncolnames(all_transcriptomic_counts_and_data_portal) <- all_transcriptomic_counts_and_data_portal[60676, ]\n# Delete  ids from the last row \nall_transcriptomic_counts_and_data_portal <- all_transcriptomic_counts_and_data_portal[-c(60676), ]\n# Convert matrix to data frame\nall_transcriptomic_counts_and_data_portal <- data.frame(all_transcriptomic_counts_and_data_portal)\n# Set genes ids\ngenes_id <- rownames(all_transcriptomic_counts_and_data_portal)\n# # changing the type data chart to numeric\nall_transcriptomic_counts_and_data_portal <- as.data.frame(sapply(all_transcriptomic_counts_and_data_portal, as.numeric))\n# Set row names genes to the new data colletion\nrownames(all_transcriptomic_counts_and_data_portal) <- genes_id","2c7ec8ad":"# Filter just cases from raw data\nall_transcriptomic_counts_and_data_portal <- all_transcriptomic_counts_and_data_portal [transcripts_groups$SubjectGroup == 'ALS']\ntranscripts_groups <- transcripts_groups[transcripts_groups$SubjectGroup == 'ALS', ]\n\n# Filter by markers\n# it'is neccesary create boolean list of each marker to filter all missings values\n# NEFH marker filter\nNEFH_boolean_list <- !is.na(transcripts_groups$NEFH)\nall_transcriptomic_counts_and_data_portal <- all_transcriptomic_counts_and_data_portal [NEFH_boolean_list]\ntranscripts_groups <- transcripts_groups[NEFH_boolean_list, ]\n\n# ISL1 marker filter\nISL1_boolean_list <- !is.na(transcripts_groups$ISL1)\nall_transcriptomic_counts_and_data_portal <- all_transcriptomic_counts_and_data_portal [ISL1_boolean_list]\ntranscripts_groups <- transcripts_groups[ISL1_boolean_list, ]\n\n# NKX6 marker filter\nNKX6_boolean_list <- !is.na(transcripts_groups$NKX6)\nall_transcriptomic_counts_and_data_portal <- all_transcriptomic_counts_and_data_portal [NKX6_boolean_list]\ntranscripts_groups <- transcripts_groups[NKX6_boolean_list, ]\n\n# TUBB3 marker filter\nTUBB3_boolean_list <- !is.na(transcripts_groups$TUBB3)\nall_transcriptomic_counts_and_data_portal <- all_transcriptomic_counts_and_data_portal [TUBB3_boolean_list]\ntranscripts_groups <- transcripts_groups[TUBB3_boolean_list, ]\n\n# s100b marker filter\ns100b_boolean_list <- !is.na(transcripts_groups$s100b)\nall_transcriptomic_counts_and_data_portal <- all_transcriptomic_counts_and_data_portal [s100b_boolean_list]\ntranscripts_groups <- transcripts_groups[s100b_boolean_list, ]","d468dfb7":"dgelist_edgeR_normalize <- DGEList(counts = as.matrix(all_transcriptomic_counts_and_data_portal), group = transcripts_groups$SubjectGroup)\n# Filter data by cpm\nkeep_data<- filterByExpr(dgelist_edgeR_normalize)\ndgelist_edgeR_normalize<- dgelist_edgeR_normalize[keep_data, , keep.lib.sizes=FALSE]\n# Normalize Data\nedgeR_normalize_data <- calcNormFactors(dgelist_edgeR_normalize)\n#edgeR_normalize_data <- logcpm <- cpm(edgeR_normalize_data, log=TRUE)\ndgelist_edgeR_normalize <- DGEList(counts = as.matrix(edgeR_normalize_data), group = transcripts_groups$SubjectGroup)","70e8d6af":"# plot MDS\nplotMDS(dgelist_edgeR_normalize, col=as.numeric(dgelist_edgeR_normalize$samples$group))\nlegend(\"bottomleft\", as.character(unique(dgelist_edgeR_normalize$samples$group)), col=1:3, pch=20)","dcb01fd5":"# Calculate count per million and keep samples\ncpm_quantile_transform <- cpm(all_transcriptomic_counts_and_data_portal)\n# thresh_cpm to filter data\nthresh_cpm <- cpm_quantile_transform > 0.5\nkeep_quantile_data <- rowSums(thresh_cpm) >= 2\ncounts.keep_quantile_data<- all_transcriptomic_counts_and_data_portal[keep_quantile_data,]\n# Quantile normalization\nquantile_normalization_data <-normalizeQuantiles(counts.keep_quantile_data, ties=TRUE)\n# log transformation\nlog_quantile_norm_data <- log1p(quantile_normalization_data)\n#created dglist to make MDS\ndgelist_quantile_data <- DGEList(counts = as.matrix(log_quantile_norm_data), group = transcripts_groups$SubjectGroup)","5f9d2478":"# plot MDS\nplotMDS(dgelist_quantile_data, col=as.numeric(dgelist_quantile_data$samples$group))\nlegend(\"bottomleft\", as.character(unique(dgelist_quantile_data$samples$group)), col=1:3, pch=20)","ce254f3f":"heatmap_corrected_data <- heatmap.2(quantile_data_removeBatchEffect, dendrogram='both', distfun = function(x) dist(x, method=\"euclidean\"))","a11aaedf":"hc <- as.hclust( heatmap_corrected_data$colDendrogram )\nclusters <- cutree(hc, k=2 )\n# clusters_corrected_data <\ntranscripts_groups$clusters <- clusters","da0da134":"#statistical comparation\nlapply(transcripts_groups[,6:10], function(x) kruskal.test(x ~ clusters, data=transcripts_groups))","b7d65ef6":"lapply(transcripts_groups[,11:16], function(x) kruskal.test(x ~ clusters, data=transcripts_groups))","a2d48313":"# Diferential expression analisis\n# Declare covariantes\nNKX <- transcripts_groups$NEFH\nNEFH <- transcripts_groups$ISL1\nTUBB3 <- transcripts_groups$NKX6\nISL1 <- transcripts_groups$TUBB3\ns100b <- transcripts_groups$s100b\nsex <- transcripts_groups$Sex\nrace <- transcripts_groups$Race\nclusters <- factor(transcripts_groups$clusters)","f74e70a6":"design_matrix <- model.matrix(~0 + clusters + NKX + NEFH + TUBB3 + ISL1 + s100b + race + sex )\n\ncolnames(design_matrix) <- c('clusters_one1', 'clusters_one2','NKX', 'NEFH', 'TUBB3', 'ISL1', 's100b',\n                     'race1', 'race2',\n                        'race3', 'rece4', 'sex') \n\n\n# fit data\nfit_case_clusters <- lmFit(as.matrix(log_quantile_norm_data), design_matrix)\n# contrast case vs control data\ncont.matrix_cluster <- makeContrasts(clusters_one1-clusters_one2, levels = design_matrix)\nfit_case_clusters <- contrasts.fit(fit_case_clusters, cont.matrix_cluster)\nfit_case_clusters <- eBayes(fit_case_clusters)\n\n#cluster1 vs all\nDEP_SIG_ALS_cluster1_vs_cluster2 <- topTable(fit_case_clusters, adjust = \"BH\", coef = 1,\n                                           number = length(fit_case_clusters$coefficients)) \n# Filter by  p.adjust.val\nDEP_SIG_ALS_cluster1_vs_cluster2 <- DEP_SIG_ALS_cluster1_vs_cluster2[ DEP_SIG_ALS_cluster1_vs_cluster2$adj.P.Val < 0.05, ]\nDEP_SIG_ALS_cluster1_vs_cluster2\nwrite.csv(DEP_SIG_ALS_cluster1_vs_all, 'cluster1_vs_cluster2_corrected.csv') # Cluster","fc6fb6a1":"As quartile normalization, followed by log transformation of the data has been suggested as a good approach to remove batch effects, we implemented it using limma. When we included all the genes, we saw a homogeneous model, but after removing the low count genes, we also see heterogeneity. We decided to use this data for further analysis including the staining markers for cell differentiation as covariates as suggested in one of the Kaggle discussions. We also included sex and race as covariates, as they affect gene expression. We also wanted to include age, as it affects the transcriptomic profile, but this was not possible, as there were many missing values in the data set.","17a2cb13":"The next step was to perform the normalization on the raw count matrix in edgeR. For this we removed genes with low reads and then generated a new MDS, but we still saw the heterogeneity.","6a50b8a4":"# Discussion\nWe observed a significant difference in the ALSFRS progression slope between the identified gene expression clusters.\n\nWe did not find any differences in the ALSFRS value at baseline or latest time point. This lack of differences may be due to problems with clinical source documentation and patient followup data. Some individuals only have one clinic visit and the clinical values for the baseline observation and latest time point appear as the same in the data portal table. The number of clinic visits at which the latest point was collected is variable and it is ad hoc and retrospective, resulting in too much variability. Without having robust, complete clinical data from all patients and the information of how this data was calculated it is difficult to draw accurate conclusions, thus we suggest to develop a well designed clinical protocol for key reference centers and include this information in the future.\nFor all the differential expression analysis performed during this project we have corrected for the cell differentiation stages by including the staining markers as covariates.\n\nThere were significant differences in S100B, an astrocyte marker. High levels of extracellular S100B may induce autocrine astrocytic activation that turns astrocytes into a proinflammatory and neurodegenerative phenotype (Villarreal et al. J Neurochem. 2014 Oct;131(2):190-205.) It has also been suggested that S100B expression might be an early occurring event in the ALS (Serrano et al. Mediators Inflamm. 2017; 2017: 1626204), so it might also be playing a role in the progression of the disease. We observed a higher percentage of cells with SB100 staining in Cluster1, suggesting they have more neurodegeneration than Cluster2. Moreover, SB100 protein positively correlates with a worse prognosis of ALS. (Sussmuth et al. Neurology. 2010;74(12):982\u2013987)\nInterestingly, after the differential expression analysis, we found that L13a-mediated translational silencing of Ceruloplasmin expression is regulated differently in Cluster1 compared to Cluster2, suggesting a higher expression of ceruloplasmin in Cluster one compared to cluster2. Ceruloplasmin is known to be altered in neurological diseases, as ceruloplasmin is related to iron\/copper metabolism, it is linked to neurologic symptoms and signs. This result supports the idea that Cluster1 has more neurodegeneration and disease progression.\nSelenocysteine synthesis is another pathway relevant to ALS, as it has been shown that the cerebrospinal fluid of ALS patients contains elevated levels of selenium species. A recent study suggests that these elevated levels result from mutations causing ALS, as they only observed this in a patient with a mutation in TUBA4A (Mandrioli Et al. Neurodegener Dis 2017;17:171-180). A further study comparing the genetic mutation from patients in Cluster1 with Cluster2 could help us to assess if there is indeed a genetic component involved in this pathway.\n\nOther pathways potentially related to ALS include Response of EIF2AK4 (GCN2) to amino acid deficiency showing different regulation in Cluster1 compared to Cluster 2 are response of EIF2AK4 (GCN2) to amino acid deficiency, eukaryotic translation elongation and endosomal\/vacuolar pathway.\n\nOne of the major limitations of our study is the number of missing values in the clinical data. We correlated the clusters to the data available in the data portal metadata, but when we tried the same with the parameters from other tables, we had many missing values. We consider that a more complete dataset would allow us to better assess the clinical relevance of these clusters.\n\nIn conclusion, we identified two subgroups of ALS patients that have different transcriptomic profiles. Main difference between the groups seems to be the neurodegeneration levels, as most of the pathways identified are related to it. Additionally, we observed differences in parameters associated with disease progression as the ALSFRS progression slope and the percentage of cells stained with SB100 were correlated. The pathway analysis at Reactome identified the mechanisms in which these genes were involved stratifying by down- and up-regulated genes. The down-regulated genes are overrepresented significantly in multiple pathways (FILE). The gene expression results and the identification of Cluster1 and Cluster2 will allow the generation of hypotheses that will be tested in the current dataset.","7327fc11":"We extracted the individuals belonging to each cluster, Cluster1 contains 79 individuals, while Cluster2 has 45. To characterize the clusters and assess their clinical relevance and see if the differences were associated with the prognosis of ALS, we performed statistical tests comparing both clusters.","bbfb5b53":"# Summary\nWe hypothesized that the difference in ALS progression results from the interaction of multiple pathways and these interactions are captured in the gene expression profile of the individuals. By comparing gene expression in a patient population, we can identify subgroups of patients and it allows us to assess if they were progressing fast or slow according to their clinical data. To identify the mechanisms involved in disease progression, we performed a differential expression analysis followed by pathway overrepresentation analysis.\n\nWe had access to gene expression data from motor neurons that were derived from induced pluripotent stem cells generated from 134 ALS patients. To eliminate technical noise and capture only the biology in the data, we normalized it and corrected it for the differentiation stages of the iPScells. Next, we performed unsupervised hierarchical clustering and we identified two main gene expression clusters.\n\nWe performed different statistical tests to assess the clinical relevance of the clusters and found significant differences in the ALS functional rating scale (ALSFRS) progression slope and the marker SB100, which are associated with disease progression. We did not observe any significance difference in age of symptom onset, sex, race, Escorial criteria, anatomical site of onset, ALS functional rating scale (ALSFRS) at baseline or latest measurements, cognitive behavior screen (CBS) scores (at baseline, latest measurement or progression slope)or in the rest of cell differentiation markers. The limited data provided did not allow us to test more clinical or environmental parameters\n\nAfter observing the correlation of the clusters with variables related to disease progression, we assessed the difference in gene expression between the clusters. We identified 11366 genes that were differentially expressed after correcting for multiple testing (FDR<0.05). We then performed an overrepresentation pathways analysis at Reactome to identify the mechanisms in which these genes were involved stratifying by down- and up-regulated genes. The down-regulated genes are overrepresented significantly in multiple pathways (FILE).\n\n# Data analysis\n\nWe started the analysis by exploring the data and removing the technical artefacts when possible. It is known that transcriptomic data is prone to batch effects and the fact that the iPScells could be in different differentiation stages, made data exploration and normalization our priority.\n\nWe first explored the normalized Deseq2 dataset by removing possible batch effects with a Multidimensional scaling (MDS) analysis. We then decided to look directly at the gene counts. To achieve this, we first extracted all the gene counts per patient from the different folders and created a matrix with gene counts and eliminated the control group.","2b08d155":"We did not use this correction for the differential expression analysis as this function is not intended to be used prior to linear modelling. Thus, for the differential expression analysis we continued using the markers as covariates."}}