{"cell_type":{"e8b31b6e":"code","caec8f4d":"code","d9526877":"code","6a3b723c":"code","8e15f53d":"code","2a771a65":"code","ba6ed9c5":"code","e89f8761":"code","310e28c6":"code","cbacf8fd":"code","0cea441d":"code","976b683b":"code","f14ddfda":"code","9e8a8b82":"code","14525380":"code","b10c7e4d":"code","e761d908":"code","84330141":"code","ccde8072":"code","8a5c9b19":"code","b87decc2":"code","8b3b12ab":"code","83a96f11":"code","90f11292":"code","1289331b":"code","8c75d981":"code","e588c2b6":"code","b359ae61":"code","7c3a455e":"markdown","a2ef8248":"markdown","4e2e1617":"markdown","d1378dcc":"markdown","04e2cdaf":"markdown","97ac1d59":"markdown","e89c0641":"markdown","b8ac7405":"markdown","18acb7ca":"markdown","694ed02c":"markdown","b1203c4c":"markdown","282c48c0":"markdown","d565d3f3":"markdown","aab63270":"markdown"},"source":{"e8b31b6e":"import numpy as np\n\ndef get_poly_eqn(start_val, end_val, as_array: bool):\n    X = list(range(start_val, end_val+1))\n    y = []\n    \n    for i in X:\n        sample_poly_equation = 2*i**2 + i + 2 \n        # Y-Intercept = 2\n        # m1, m2 = 2, 1 respectively\n        y.append(sample_poly_equation)\n    \n    if as_array==True:\n        return np.array(X).reshape(-1, 1), np.array(y).reshape(-1, 1)\n    \n    else:\n        return X, y","caec8f4d":"X, y = get_poly_eqn(0, 10, as_array=True)","d9526877":"print(\"This is X: \", X)\nprint(\"\\nThis is Y: \", y)","6a3b723c":"import matplotlib.pyplot as plt\n\nplt.plot(X, y, 'r')\nplt.plot(X, y, 'bo')\nplt.xlabel(\"Values of X\")\nplt.ylabel(\"Values of Y\")\nplt.title(\"Visualizing Polynomial Regression\")\nplt.show()","8e15f53d":"## <-- WARNING : This is only for Visualizing that this problem CAN'T be solved by Linear\n##     Regression -->\n\nfrom sklearn.linear_model import LinearRegression\n\nlin_reg = LinearRegression()\nlin_reg.fit(X, y)","2a771a65":"print(\"Predicted Value:\", lin_reg.predict(np.array(X[2]).reshape(-1, 1)))\nprint(\"\\nActual Value:\", y[2])","ba6ed9c5":"plt.plot(X, y, 'bo')\nplt.plot(X, lin_reg.predict(np.array(X).reshape(-1, 1)))\nplt.show()","e89f8761":"lin_x, lin_y = get_poly_eqn(11, 50, as_array=True) ## Sample Data for predicting\ny_lin_pred = lin_reg.predict(lin_x)","310e28c6":"from sklearn.metrics import r2_score\n\nr2_score(lin_y, y_lin_pred)","cbacf8fd":"from sklearn.preprocessing import PolynomialFeatures\n\npoly_reg = LinearRegression()\npoly_features = PolynomialFeatures(degree=2)\nX_poly = poly_features.fit_transform(X)\npoly_reg.fit(X_poly, y)","0cea441d":"print(\"Predicted Value:\", poly_reg.predict(poly_features.fit_transform([X[2]])))\nprint(\"\\nActual Value:\", y[2])","976b683b":"new_x, new_y = get_poly_eqn(11, 50, as_array=True)","f14ddfda":"y_pred = poly_reg.predict(poly_features.fit_transform(new_x))","9e8a8b82":"from sklearn.metrics import r2_score\n\nr2_score(new_y, y_pred)","14525380":"plt.plot(new_x, new_y, 'bo')\nplt.plot(new_x, poly_reg.predict(poly_features.fit_transform(new_x)))\nplt.show()","b10c7e4d":"poly_reg.coef_","e761d908":"poly_reg.intercept_","84330141":"poly_features.get_feature_names()","ccde8072":"import pandas as pd\n\ndf = pd.read_csv(\"..\/input\/position-salary-dataset\/Position_Salaries.csv\")","8a5c9b19":"df.head()","b87decc2":"X_data = df.iloc[:, 1:2]\ny_data = df.iloc[:, -1]","8b3b12ab":"X_data = np.array(X_data)\ny_data = np.array(y_data)","83a96f11":"plt.plot(X_data, y_data, 'bo')\nplt.plot(X_data, y_data)\nplt.xlabel(\"Level\")\nplt.ylabel(\"Salaries\")\nplt.title(\"Position Salaries\")\nplt.show()","90f11292":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X_data, y_data, test_size=0.2, random_state=42)","1289331b":"poly_real = LinearRegression()\npoly_refe = PolynomialFeatures(degree=3)\nX_real = poly_refe.fit_transform(X_train)\npoly_real.fit(X_real, y_train)","8c75d981":"X_real","e588c2b6":"y_real_pred = poly_real.predict(poly_refe.fit_transform(X_test))","b359ae61":"from sklearn.metrics import r2_score\n\nr2_score(y_test, y_real_pred)","7c3a455e":"Okay, So this was the POWER of Polynomial Regression it has helped us to make our graph Non-Linear and cover more Data Points.Pretty Simple !!\n\nIn Real-World Data you will more often deal with this type of Non-Linear Data your data will not be always straight and even sometimes very Noisy. In our Case we have Choosen Polynomial Degree to be 2 and it worked very well... But in more Complex data you might increase your Degree to be more than 2 and it will more Precisely fit to your Data but keep one thing in mind, Increasing the Degree can help you to fit more Data Points but your model can Suck in Validation Set or in Prediction. It has Done very well in Training Doesn't mean that it always do better in Testing !!\n\nOnly way to solve it to make your Data as Clean as Possible their are many techniques by which you can make your Data a bit cleaner and bit easier to your model to fit to it more Precisely Like **Normalization, Standard Scalar, Removing Outliers,etc** are some of the Examples of Making your Data CLeaner.\n\nIn our Data, *2i^2 + i + 2* we predicted the Slopes to be,\n\n``\n poly_reg.coef_\n array([[0., 1., 2.]]) # Output\n``\n\nY-intercept to be,\n\n``\n poly_reg.intercept_\n array([2.]) # Output\n``\n\nWhich is Absolutely Correct !!","a2ef8248":"That's a very Nice Accuracy !!\n\nAssignemt :- Try Increasing the Degree of PolynomialFeatures and see what's the Change in Accuracy ?\n\n(Increasing Degree to 4 will give you 97% Accuracy. Try Yourself !!)","4e2e1617":"# USING REAL WORLD DATA\n\n##### Collecting Data (See 'Datasets' folder for csv file)","d1378dcc":"THIS IS NOT AT ALL GOOD, So for this we will use Polynomial Regression","04e2cdaf":"## MAKING POLYNOMIAL REGRESSOR","97ac1d59":"# Visualizing using graph","e89c0641":"## Let us try Linear Regression in this","b8ac7405":"### Yeahhhh, That's Perfect\n\nMaking New Data as a Validation Set\/for predictiom","18acb7ca":"### Visualizing Polynomial Regression","694ed02c":"Ohh... That's not at all right and even Close","b1203c4c":"# POLYNOMIAL REGRESSION","282c48c0":"## It's Perfectly Fitting with the data","d565d3f3":"# Preparing Data","aab63270":"## GRAPH"}}