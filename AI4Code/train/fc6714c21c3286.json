{"cell_type":{"cf30933c":"code","c691a196":"code","6bf1ab16":"code","e109f483":"code","6469b2aa":"code","75619ae2":"code","c548b976":"code","45513e7e":"code","525b7205":"code","979ea28e":"code","13a2b2a2":"code","54542df8":"code","8f77941d":"code","007e098e":"code","089e0e4e":"code","13a2086a":"code","4f9df9b8":"code","ee1a1f37":"code","ce058396":"code","68d02ca5":"code","fc76d1af":"code","9c10429a":"code","c2d0c59c":"code","a1fdc2f8":"code","800b38a8":"markdown","ea3a7bb2":"markdown","ef2d2e3d":"markdown","2a750610":"markdown","8d9e9c20":"markdown","e9618c89":"markdown","7aae70c3":"markdown","3a8f96fb":"markdown","1b1d9096":"markdown","8895e624":"markdown","6cc13691":"markdown","aa20bfa5":"markdown","f60f67ec":"markdown","09d0b325":"markdown","719b4db5":"markdown","69499aed":"markdown","e3790049":"markdown","292e3862":"markdown","8b8f0a8e":"markdown","1e11afc4":"markdown","bb71990d":"markdown","db3b00dc":"markdown","7d3caea3":"markdown","0258f1dd":"markdown","693f0243":"markdown","4e19513a":"markdown"},"source":{"cf30933c":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nplt.style.use('fivethirtyeight')\n\nimport seaborn as sns # for plot visualization\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom statsmodels.tsa.stattools import adfuller, acf, pacf\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\n\n# import os\n# print(os.listdir(\"..\/input\"))","c691a196":"weather_df = pd.read_csv('..\/input\/testset.csv', parse_dates=['datetime_utc'], index_col='datetime_utc')\nweather_df.head()","6bf1ab16":"weather_df = weather_df.loc[:,[' _conds', ' _hum', ' _tempm']]\nweather_df = weather_df.rename(index=str, columns={' _conds': 'condition', ' _hum': 'humidity', ' _pressurem': 'pressure', ' _tempm': 'temprature'})\nprint(f'dataset shape (rows, columns) - {weather_df.shape}')\nweather_df.head()","e109f483":"# lets check dtype of all columns, \nweather_df.dtypes, weather_df.index.dtype","6469b2aa":"weather_df.index = pd.to_datetime(weather_df.index)\nweather_df.index","75619ae2":"def list_and_visualize_missing_data(dataset):\n    # Listing total null items and its percent with respect to all nulls\n    total = dataset.isnull().sum().sort_values(ascending=False)\n    percent = ((dataset.isnull().sum())\/(dataset.isnull().count())).sort_values(ascending=False)\n    missing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\n    missing_data = missing_data[missing_data.Total > 0]\n    \n    missing_data.plot.bar(subplots=True, figsize=(16,9))\n\nlist_and_visualize_missing_data(weather_df)","c548b976":"# will fill with previous valid value\nweather_df.ffill(inplace=True)\nweather_df[weather_df.isnull()].count()","45513e7e":"weather_df.describe()","525b7205":"weather_df = weather_df[weather_df.temprature < 50]\nweather_df = weather_df[weather_df.humidity <= 100]","979ea28e":"weather_condition = (weather_df.condition.value_counts()\/(weather_df.condition.value_counts().sum()))*100\nweather_condition.plot.bar(figsize=(16,9))\nplt.xlabel('Weather Conditions')\nplt.ylabel('Percent')","13a2b2a2":"weather_df.plot(subplots=True, figsize=(20,12))","54542df8":"weather_df['2015':'2016'].resample('D').fillna(method='pad').plot(subplots=True, figsize=(20,12))","8f77941d":"train_df = weather_df['2000':'2015'].resample('M').mean().fillna(method='pad')\ntrain_df.drop(columns='humidity', axis=1, inplace=True)\ntest_df = weather_df['2016':'2017'].resample('M').mean().fillna(method='pad')\ntest_df.drop(columns='humidity', axis=1, inplace=True)","007e098e":"# check rolling mean and rolling standard deviation\ndef plot_rolling_mean_std(ts):\n    rolling_mean = ts.rolling(12).mean()\n    rolling_std = ts.rolling(12).std()\n    plt.figure(figsize=(22,10))\n\n    plt.plot(ts, label='Actual Mean')\n    plt.plot(rolling_mean, label='Rolling Mean')\n    plt.plot(rolling_std, label = 'Rolling Std')\n    plt.xlabel(\"Date\")\n    plt.ylabel(\"Mean Temperature\")\n    plt.title('Rolling Mean & Rolling Standard Deviation')\n    plt.legend()\n    plt.show()","089e0e4e":"# Augmented Dickey\u2013Fuller test\ndef perform_dickey_fuller_test(ts):\n    result = adfuller(ts, autolag='AIC')\n    print('Test statistic: ' , result[0])\n    print('Critical Values:' ,result[4])","13a2086a":"# check stationary: mean, variance(std)and adfuller test\nplot_rolling_mean_std(train_df.temprature)\nperform_dickey_fuller_test(train_df.temprature)","4f9df9b8":"# Original Series\nplt.rcParams.update({'figure.figsize':(9,7), 'figure.dpi':120})\n\nfig, axes = plt.subplots(3, 2, sharex=True)\naxes[0, 0].plot(train_df.values); \naxes[0, 0].set_title('Original Series')\nplot_acf(train_df.values, ax=axes[0, 1])\n\n# 1st Differencing\naxes[1, 0].plot(train_df.temprature.diff().values); \naxes[1, 0].set_title('1st Order Differencing')\nplot_acf(train_df.diff().dropna().values,ax=axes[1, 1])\n\n# 2nd Differencing\naxes[2, 0].plot(train_df.temprature.diff().diff().values); \naxes[2, 0].set_title('2nd Order Differencing')\nplot_acf(train_df.diff().diff().dropna().values,ax=axes[2, 1])\n\nplt.xticks(rotation='vertical')\nplt.show()","ee1a1f37":"# PACF plot of 1st differenced series\nplt.rcParams.update({'figure.figsize':(9,3), 'figure.dpi':120})\n\nfig, axes = plt.subplots(1, 2, sharex=True)\naxes[0].plot(train_df.diff().values); axes[0].set_title('1st Differencing')\naxes[1].set(ylim=(0,5))\nplot_pacf(train_df.diff().dropna().values, ax=axes[1])\n\nplt.show()","ce058396":"fig, axes = plt.subplots(1, 2, sharex=True)\naxes[0].plot(train_df.diff().values); axes[0].set_title('1st Differencing')\naxes[1].set(ylim=(0,1.2))\nplot_acf(train_df.diff().dropna().values, ax=axes[1])\n\nplt.show()","68d02ca5":"acf_lag = acf(train_df.diff().dropna().values, nlags=20)\npacf_lag = pacf(train_df.diff().dropna().values, nlags=20, method='ols')\n\nplt.figure(figsize=(22,10))\n\nplt.subplot(121)\nplt.plot(acf_lag)\nplt.axhline(y=0,linestyle='--',color='silver')\nplt.axhline(y=-1.96\/np.sqrt(len(train_df.diff().values)),linestyle='--',color='silver')\nplt.axhline(y=1.96\/np.sqrt(len(train_df.diff().values)),linestyle='--',color='silver')\nplt.title(\"Autocorrelation Function\")\n\nplt.subplot(122)\nplt.plot(pacf_lag)\nplt.axhline(y=0,linestyle='--',color='silver')\nplt.axhline(y=-1.96\/np.sqrt(len(train_df.diff().values)),linestyle='--',color='silver')\nplt.axhline(y=1.96\/np.sqrt(len(train_df.diff().values)),linestyle='--',color='silver')\nplt.title(\"Partial Autocorrelation Function\")\nplt.tight_layout()","fc76d1af":"model = ARIMA(train_df.values, order=(2,0,2))\nmodel_fit = model.fit(disp=0)\nprint(model_fit.summary())","9c10429a":"# Plot residual errors\nresiduals = pd.DataFrame(model_fit.resid)\nfig, ax = plt.subplots(1,2)\nresiduals.plot(title=\"Residuals\", ax=ax[0])\nresiduals.plot(kind='kde', title='Density', ax=ax[1])\nplt.show()","c2d0c59c":"# Actual vs Fitted\nmodel_fit.plot_predict(dynamic=False)\nplt.show()","a1fdc2f8":"# # Forecast\nfc, se, conf = model_fit.forecast(16, alpha=0.05)  # 95% conf\n\n# print(fc)\n# Make as pandas series\nfc_series = pd.Series(fc, index=test_df.index)\nlower_series = pd.Series(conf[:, 0], index=test_df.index)\nupper_series = pd.Series(conf[:, 1], index=test_df.index)\n\n# # Plot\nplt.figure(figsize=(12,5), dpi=100)\nplt.plot(train_df, label='training')\nplt.plot(test_df, label='actual')\nplt.plot(fc_series, label='forecast')\nplt.fill_between(lower_series.index, lower_series, upper_series, \n                 color='k', alpha=.15)\nplt.title('Forecast vs Actuals')\nplt.legend(loc='upper left', fontsize=8)\nplt.show()\n# test_df.index","800b38a8":"Let's checkout the most common weather condition type in Delhi.","ea3a7bb2":"It is showing maximum temprature as 90 and max humidity as 243 which is non-realistic, so is an outlier. We need to treat these outliers.","ef2d2e3d":"For prediction we are going to use one of the most popular model for time series, **Autoregressive Integrated Moving Average (ARIMA)** which is a standard statistical model for time series forecast and analysis.\nAn ARIMA model can be understood by outlining each of its components as follows:\n* **Autoregression (AR) -** refers to a model that shows a changing variable that regresses on its own lagged, or prior, values.<br\/>\nThe notation **AR(p)** indicates an autoregressive model of order p.\n\n    *Example*\u200a\u2014\u200aIf p is 3 the predictor for X(t) will be \n        X(t) = \u00b5 + X(t-1) + X(t-2) + X(t-3) + \u03b5t\n\n    Where \u03b5 is error term.\n* **Integrated (I) -** represents the differencing of raw observations to allow for the time series to become stationary, i.e., data values are replaced by the difference between the data values and the previous values.\n* **Moving average (MA) -** incorporates the dependency between an observation and a residual error from a moving average model applied to lagged observations.\n\n    The notation **MA(q)** refers to the moving average model of order q:<br\/>\n ![image.png](attachment:image.png)\n\n    *Example*\u200a\u2014\u200aIf q is 3 the predictor for X(t) will be \n        X(t) = \u00b5 + \u03b5t + \u03b81.\u03b5(t-1) + \u03b82.\u03b5(t-2) + \u03b83.\u03b5(t-3)\n    Here instead of difference from previous term, we take errer term (\u03b5) obtained from the difference from past term\nNow we need to figure out the values of p and q which are parameters of ARIMA model. We use below two methods to figure out these values  -\n\n**Autocorrelation Function (ACF):** It just measures the correlation between two consecutive (lagged version). example at lag 4, ACF will compare series at time instance t1\u2026t2 with series at instance t1\u20134\u2026t2\u20134\n\n**Partial Autocorrelation Function (PACF):** is used to measure the degree of association between X(t) and X(t-p).","2a750610":"There is column named **datetime_utc** in this dataset, we are going to read that as an index.","8d9e9c20":"## <a>Import required libraries<\/a>","e9618c89":"Looks Good. Next will explore auto ARIMA.\n\nPlease let me know if you have any feedback or questions re this.","7aae70c3":"So it shows that mid two quarter are hotter than first and last, humidity varies accordingly.","3a8f96fb":"Let's see how plot for all year's temprature and humidity looks like.","1b1d9096":"Hi guys, from past few days I am learning about Time series analysis and forcasting, So in this kernel going to share what I have learned so far. In layman terms, I can simply define it as 'time based analysis of any fact' and is required when target is mostly dependent on date & time variable.","8895e624":"## <a>Data Cleaning<\/a>","6cc13691":"We have constant Mean and Variance, and our Test statistic is less than Critical Values, so we already have stationary Time series. So our 'd' value will become 0 in ARIMA Model.\n\nConsider a case if it was non-stationary, in that case we would use below techniques to make it stationary\n\nMake Stationary\nFor non-stationary to stationary conversion, we can use any of the below technique :\n\n- Decomposing\n- Differencing\n\nHere, we are preferring Differencing because it is very straight forward. We would use below co-relation plots to identify the order of differencing","aa20bfa5":"Seems fine. Now lets check the total number (and percent) of missing values in each columns.","f60f67ec":"## <a>Feature Engineering<\/a>","09d0b325":"Oh, it is really bad that mostly Delhi has Hazy and smoky weather conditions, it shows the level of pollution city has.","719b4db5":"Here we are going to consider only few of the columns which seems important from some basic EDA and time series prediction's point of view. At the same time renaming with some better ones.","69499aed":"### Check Stationarity\nSo above plots shows that we do have seasonality but there is no trend. Let's check for below necessary conditions:\n\n* Constant mean\n* Constant variance\n* An auto co-variance that does not depend on time","e3790049":"### Timeseries Analysis (ARIMA Model)","292e3862":"It shows 'index' as object type which needs to be converted to datetime otherwise we won't be able to perform scaling during time series analysis.","8b8f0a8e":"These grey dotted line are confidence intervels which we are going to use to find out the value of p and q.\n\n__p__ - *the point where PACF crosses the upper confiednce level. In our case it seems to be 2. So we will take *p = 2.\n\n__q__ - the point where ACF crosses the upper confiednce level. In our case it seems to be 2. So we will take q = 2.\n\n__d__ - number of nonseasonal differences needed for stationarity. In this case we are going to take it as 0, since this series is already stationary.\n\nNow we are going fit time series for ARIMA Models. We will compare performance on the basis of RSS score and at last prefer the best one.","1e11afc4":"In Dickey-Fuller test, we need only test_statics and critical_value to know if it is stationary or not","bb71990d":"Not many values are missing, but it will still be great to fill the missing ones instead of removing entire row.","db3b00dc":"Below are the major steps that I am going to perform in this kernel : \n* **Import required libraries**\n* **Feature Engineering**\n* **Data Cleaning**\n* **Exploratory Data Analysis & Visualizations**\n* **Time series Prediction**","7d3caea3":"## <a>Exploratory Data Analysis & Visualizations<\/a>","0258f1dd":"If you are a begineer then I would suggest below resources to go through, they helped me alot.\n\nhttps:\/\/www.youtube.com\/watch?v=Aw77aMLj9uM\n\nhttps:\/\/www.analyticsvidhya.com\/blog\/2016\/02\/time-series-forecasting-codes-python\/","693f0243":"As you can see here the first series itself is perfectly stationary, So we don't need any differencing here","4e19513a":"It seems overplotted, let's plot for only two years 2015 and 2016, it will give us the clear picture of seasonality and tread."}}