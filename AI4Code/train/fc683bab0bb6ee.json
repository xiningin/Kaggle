{"cell_type":{"3d22f8c3":"code","429fd7df":"code","fa3a3d67":"code","671fca63":"code","e417a480":"code","ba2a61a7":"code","be9c5425":"code","f3020474":"code","8ed50527":"code","b2b43ee7":"code","44b5111a":"code","ac0899b0":"code","573bbaf2":"code","af315001":"code","8bd09454":"code","25e686e9":"code","d78bfbac":"code","4b1b56ca":"code","7a339084":"code","73a9a9e0":"code","267d3ecb":"code","d7489737":"code","fdf9052f":"code","1c454350":"markdown","56c8a4cc":"markdown","1541fa6f":"markdown","ec31aa19":"markdown","458fc2cf":"markdown"},"source":{"3d22f8c3":"! pip install pygam","429fd7df":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","fa3a3d67":"climbing_data = pd.read_csv(\"\/kaggle\/input\/mount-rainier-weather-and-climbing-data\/climbing_statistics.csv\")\nweather_data = pd.read_csv(\"\/kaggle\/input\/mount-rainier-weather-and-climbing-data\/Rainier_Weather.csv\")\n","671fca63":"climbing_data.head()","e417a480":"weather_data.head()","ba2a61a7":"weather_data.index[weather_data[\"Date\"]==\"12\/27\/2015\"]","be9c5425":"joined_table = pd.merge(climbing_data, weather_data, how=\"left\", on=[\"Date\"])","f3020474":"joined_table.head(10)","8ed50527":"joined_table.loc[joined_table[\"Succeeded\"]==1]\nsucceded_table = joined_table[[\"Route\",\"Succeeded\"]].groupby(\"Route\").sum().reset_index()\nsucceded_table.columns = [\"Routes\", \"Suceceeded\"]","b2b43ee7":"\n#fig = px.bar(succeded_table, x=\"Routes\", y =\"Suceceeded\")\n#fig.show()","44b5111a":"attempts_made_route = joined_table[[\"Route\",\"Attempted\"]].groupby(\"Route\").sum().reset_index()\nattempts_made_route.columns=[\"Routes\", \"Attempted\"]\n#fig = px.bar(attempts_made_route, x=\"Routes\", y=\"Attempted\")\n#fig.show()","ac0899b0":"import plotly.graph_objs as go\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\n\ndata = [go.Bar(x=attempts_made_route.Routes,\n               y=attempts_made_route.Attempted, name = \"Attempted\"),\n        go.Bar(x=succeded_table.Routes,\n               y=succeded_table.Suceceeded, name = 'Succeess'),]\n\nlayout = go.Layout(barmode='stack', title = 'Sucesss v\/s Attempt')\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","573bbaf2":"sucess_rate = pd.merge(attempts_made_route,succeded_table, how=\"left\", on=[\"Routes\"] )\n#sucess_rate.columns = [\"Route\", \"Success Percentage\"]\nsucess_rate[\"Sucess Percentage\"] = sucess_rate.Suceceeded \/ sucess_rate.Attempted *100\nsucess_rate.head(10)","af315001":"import plotly.express as px\nfig = px.bar(sucess_rate,x= \"Routes\", y = \"Sucess Percentage\")\n\nfig.show()\n","8bd09454":"data_4_analysis = joined_table.drop(columns=[\"Date\", \"Attempted\",\"Succeeded\", \"Battery Voltage AVG\"])\ndata_4_analysis = data_4_analysis.dropna()\ndata_4_analysis.head(5)","25e686e9":"data_4_analysis[\"Route\"] = data_4_analysis[\"Route\"].astype(\"category\")\ndata_4_analysis[\"Route_cat\"] = data_4_analysis[\"Route\"].cat.codes\nX = data_4_analysis.drop(columns=[\"Route\", \"Success Percentage\" ])\nY = data_4_analysis[\"Success Percentage\"]\n","d78bfbac":"import seaborn as sns\ncorr =data_4_analysis.drop(columns=[\"Route\"]).corr()\nplt.figure(figsize=(15, 10))\nsns.heatmap(corr,xticklabels=corr.columns.values,\n            yticklabels=corr.columns.values)","4b1b56ca":"from sklearn import preprocessing\nimport statsmodels.api as sm\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import explained_variance_score, r2_score\n\nminmax_scaler = preprocessing.MinMaxScaler()\nx_nor = minmax_scaler.fit_transform(X)\nX_normalized = pd.DataFrame(x_nor, columns=X.columns)\nX_normalized.head()\n\nX_train,  X_valid,Y_train, Y_valid = train_test_split(X_normalized, Y, test_size=0.01)","7a339084":"model = sm.OLS(Y_train.values, X_train.values)\nmodel_res = model.fit()\nprint(model_res.summary())\n","73a9a9e0":"predict = model_res.predict(X_valid.values)\nprint(f\"Explained vairance score is {explained_variance_score(Y_valid.values,predict)}\")\nprint(f\"Coefficient of determination is {r2_score(Y_valid.values, predict)}\")\n","267d3ecb":"from pygam import LinearGAM\n","d7489737":"gam_model = LinearGAM()\ngam_model.fit(X_train.values, Y_train.values)\ngam_predict = gam_model.predict(X_valid.values)\ngam_model.summary()","fdf9052f":"print(f\"Explained vairance for GAM model score is {explained_variance_score(Y_valid.values,gam_predict)}\")\nprint(f\"Coefficient of determination for GAM model is {r2_score(Y_valid.values, gam_predict)}\")\n","1c454350":"# General Additive Model\n\nThe package used for GAM model is pygam , detailed dcumentation for pygam can be found [here](https:\/\/pygam.readthedocs.io\/en\/latest\/?badge=latest)","56c8a4cc":"The analysis below will use PyGam","1541fa6f":"COnvert the Route from categorical to numerical vairable.","ec31aa19":"Now normalize training data","458fc2cf":"We will do left-merge of the two table to get a  final table that consists of weather as wel as climbing information. The Two tables will be merged in Date"}}