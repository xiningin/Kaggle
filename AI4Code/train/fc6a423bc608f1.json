{"cell_type":{"f5f978b4":"code","8e01323a":"code","41c8ef37":"code","4d6ff798":"code","9c0d7aec":"code","c3ad3a19":"code","24025cff":"code","b4364dde":"code","bd73383b":"code","224ee99a":"code","21bb1acc":"code","51dbf3ff":"code","af47337a":"code","020fe1f4":"code","4c9026f6":"code","8df53dee":"code","8331c004":"code","3bb89609":"code","6487f34c":"code","bbdd5ea8":"code","da9f0e2a":"code","e02c82b4":"code","f3729cc5":"code","f1275d6d":"code","6ca316e4":"code","df3f63dd":"code","09b24747":"code","f2463b6f":"code","57c57c43":"code","f6af7a15":"code","bd5db6ef":"code","0fd94871":"code","2f7bd2a4":"code","6e6a0e26":"code","d020f937":"code","88386fa6":"code","3ac6e6b2":"code","9b104f9d":"code","5ce700db":"code","ba404a51":"code","c04d8aa8":"markdown","4509b810":"markdown","75be4d30":"markdown","e34c7190":"markdown","74473d05":"markdown","1e4e5909":"markdown","f82f49fd":"markdown","8c9fce2c":"markdown","7542243a":"markdown","9a31bde8":"markdown","d129edff":"markdown","9373876b":"markdown","96f6fff1":"markdown","8f04ee99":"markdown","4b5b047a":"markdown","d4dc50c2":"markdown","bf555375":"markdown","9702cdc6":"markdown","19490bec":"markdown","34818ee3":"markdown","ef18426b":"markdown","f5b90a1e":"markdown","cb773945":"markdown","fca781f6":"markdown","47a8f36a":"markdown","a2c2fbeb":"markdown","52528fe8":"markdown","83c3c6eb":"markdown","845d1a86":"markdown","84441976":"markdown","a9d3ad2b":"markdown","a0778d1c":"markdown","72cdeff3":"markdown","1ddeac9c":"markdown","5f278634":"markdown","bdcc273c":"markdown","6388b1c7":"markdown","6dcaf19a":"markdown"},"source":{"f5f978b4":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","8e01323a":"df = pd.read_csv('\/kaggle\/input\/pima-indians-diabetes-database\/diabetes.csv')\ndf_copy = df.copy(deep=True)\ndf.head()","41c8ef37":"print(len(df))\ndf.info() ## no null value in dataset as total num of records = 768","4d6ff798":"df.describe().T","9c0d7aec":"features = df.drop('Outcome',axis=1).columns.values\nzero_features = []\nfor f in features:\n    if df[df[f]==0][f].count():\n        zero_features.append(f)\n    else:\n        pass\nzero_features","c3ad3a19":"preg_proportion = np.array(df['Pregnancies'].value_counts())\npreg_month = np.array(df['Pregnancies'].value_counts().index)\npreg_proportion_perc = np.array(np.round(preg_proportion\/sum(preg_proportion),3)*100,dtype=int)","24025cff":"preg = pd.DataFrame({'month':preg_month,'count_of_preg_prop':preg_proportion,'percentage_proportion':preg_proportion_perc})\npreg.set_index(['month'],inplace=True)\npreg.head(10)","b4364dde":"f,ax = plt.subplots(nrows=2,ncols=2,dpi=120,figsize = (8,6))\n\np00=sns.countplot('Pregnancies',data=df,hue='Outcome',ax=ax[0][0])\nax[0][0].set_title('Diab. VS Non-Diab.')\nax[0][0].set_xlabel('Month of Preg.')\nax[0][0].set_ylabel('Count')\n# p00.axes.legend(loc=1)\nplt.tight_layout()\n\np01 = sns.distplot(df['Pregnancies'],ax=ax[0][1])\nax[0][1].set_title('Pregnancies Distribution')\nax[0][1].set_xlabel('Pregnancy Class')\nax[0][1].set_ylabel('Freq\/Dist')\nplt.tight_layout()\n\np10 = sns.boxplot(x=df['Pregnancies'],ax=ax[1][0])\nax[1][0].set_title('Pregnancies')\nax[1][0].set_xlabel('Pregnancy')\nax[1][0].set_ylabel('Five Point Summary')\nplt.tight_layout()\n\np11 = sns.boxplot(x='Outcome',y='Pregnancies',data=df,ax=ax[1][1])\nax[1][1].set_title('Diab. VS Non-Diab.')\nax[1][1].set_xlabel('Pregnancy')\nax[1][1].set_ylabel('Five Point Summary')\nplt.tight_layout()\n\nplt.show()","bd73383b":"f,ax = plt.subplots(nrows=1,ncols=2,dpi=100,figsize = (8,4))\n\np00=sns.distplot(df[df['Outcome']==False]['Glucose'],ax=ax[0],color='green',label='Non Diab.')\nsns.distplot(df[df.Outcome==True]['Glucose'],ax=ax[0],color='red',label='Diab')\nax[0].set_title('Distribution of Glucose')\nax[0].set_xlabel('Glucose Class')\nax[0].set_ylabel('Count\/Dist.')\nplt.tight_layout()\n\n\np01=sns.boxplot(x='Outcome',y='Glucose',data=df,ax=ax[1])\nax[1].set_title(r'Numerical Summary (Outcome)')\nax[1].set_ylabel(r'Five Point Summary(Glucose)')\nax[1].set_xlabel('Category')\nplt.tight_layout()\n\nplt.show()","224ee99a":"fig,ax = plt.subplots(nrows=1,ncols=2,dpi=100,figsize = (8,4))\n\np00=sns.distplot(df[df['Outcome']==False]['BloodPressure'],ax=ax[0],color='green',label='Non Diab.')\nsns.distplot(df[df.Outcome==True]['BloodPressure'],ax=ax[0],color='red',label='Diab')\nax[0].set_title('Distribution of BP')\nax[0].set_xlabel('BP Class')\nax[0].set_ylabel('Count\/Dist.')\np00.axes.legend(loc=1)\nplt.tight_layout()\n\np01=sns.boxplot(x='Outcome',y='BloodPressure',data=df,ax=ax[1])\nax[1].set_title(r'Numerical Summary (Outcome)')\nax[1].set_ylabel(r'Five Point Summary(BP)')\nax[1].set_xlabel('Category')\nplt.tight_layout()\n\nplt.show()","21bb1acc":"f,ax = plt.subplots(nrows=1,ncols=2,dpi=100,figsize = (7,4))\n\np00=sns.distplot(df[df['Outcome']==False]['SkinThickness'],ax=ax[0],color='green',label='Non Diab.')\nsns.distplot(df[df.Outcome==True]['SkinThickness'],ax=ax[0],color='red',label='Diab')\nax[0].set_title('Distribution of SkinThickness')\nax[0].set_xlabel('SkinThickness Class')\nax[0].set_ylabel('Count\/Dist.')\np00.axes.legend(loc=1)\nplt.tight_layout()\n\n\np01=sns.boxplot(x='Outcome',y='SkinThickness',data=df,ax=ax[1])\nax[1].set_title(r'Numerical Summary (SkinThickness)')\nax[1].set_ylabel(r'Five Point Summary(SkinThickness)')\nplt.xticks(ticks=[0,1],labels=['Non-Diab.','Diab.'])\nax[1].set_xlabel('Category')\nplt.tight_layout()\n\nplt.show()","51dbf3ff":"f,ax = plt.subplots(nrows=1,ncols=2,dpi=100,figsize = (8,4))\n\np00=sns.distplot(df[df['Outcome']==False]['Insulin'],ax=ax[0],color='green',label='Non Diab.')\nsns.distplot(df[df.Outcome==True]['Insulin'],ax=ax[0],color='red',label='Diab')\nax[0].set_title('Distribution of Insulin')\nax[0].set_xlabel('Insulin Class')\nax[0].set_ylabel('Count\/Dist.')\np00.axes.legend(loc=1)\nplt.tight_layout()\n\n\np01=sns.boxplot(x='Outcome',y='Insulin',data=df,ax=ax[1])\nax[1].set_title(r'Numerical Summary (Insulin)')\nax[1].set_ylabel(r'Five Point Summary(Insulin)')\nplt.xticks(ticks=[0,1],labels=['Non-Diab.','Diab.'])\nax[1].set_xlabel('Category')\nplt.tight_layout()\n\nplt.show()","af47337a":"f,ax = plt.subplots(nrows=1,ncols=2,dpi=100,figsize = (8,4))\n\np00=sns.distplot(df[df['Outcome']==False]['BMI'],ax=ax[0],color='green',label='Non Diab.')\nsns.distplot(df[df.Outcome==True]['BMI'],ax=ax[0],color='red',label='Diab')\nax[0].set_title('Distribution of BMI')\nax[0].set_xlabel('BMI Class')\nax[0].set_ylabel('Count\/Dist.')\np00.axes.legend(loc=1)\nplt.tight_layout()\n\n\np01=sns.boxplot(x='Outcome',y='BMI',data=df,ax=ax[1])\nax[1].set_title(r'Numerical Summary (BMI)')\nax[1].set_ylabel(r'Five Point Summary(BMI)')\nplt.xticks(ticks=[0,1],labels=['Non-Diab.','Diab.'])\nax[1].set_xlabel('Category')\nplt.tight_layout()\n\nplt.show()","020fe1f4":"sns.pairplot(df,hue = 'Outcome',palette = 'plasma')\nplt.legend(['Non Diabetic','Diabetic'])\nplt.show()","4c9026f6":"sns.heatmap(df.corr(), fmt = \".2f\",annot=True, cmap='plasma')","8df53dee":"df.describe().T","8331c004":"print('Before',df[df['Glucose'] == 0]['Glucose'].count())\ndf['Glucose'] = df['Glucose'].replace(0,df['Glucose'].mean())\nprint('After:',df[df['Glucose'] == 0]['Glucose'].count())","3bb89609":"print('Before',df[df['BloodPressure'] == 0]['BloodPressure'].count())\ndf['BloodPressure'] = df['BloodPressure'].replace(0,df['BloodPressure'].median())\nprint('After:',df[df['BloodPressure'] == 0]['BloodPressure'].count())","6487f34c":"print('Before',df[df['SkinThickness'] == 0]['SkinThickness'].count())\ndf['SkinThickness'] = df['SkinThickness'].replace(0,df['SkinThickness'].mean())\nprint('After:',df[df['SkinThickness'] == 0]['SkinThickness'].count())","bbdd5ea8":"print('Before',df[df['Insulin'] == 0]['Insulin'].count())\ndf['Insulin'] = df['Insulin'].replace(0,df['Insulin'].median())\nprint('After:',df[df['Insulin'] == 0]['Insulin'].count())","da9f0e2a":"print('Before',df[df['BMI'] == 0]['BMI'].count())\ndf['BMI'] = df['BMI'].replace(0,df['BMI'].mean())\nprint('After:',df[df['BMI'] == 0]['BMI'].count())","e02c82b4":"df.describe().T","f3729cc5":"features = df.drop('Outcome',axis=1).columns.values\nfeatures","f1275d6d":"## detect outliers in dataset (IQR method)\ndef iqr_outliers(df):\n    out=[]\n    q1 = df.quantile(0.25)\n    q3 = df.quantile(0.75)\n    iqr = q3-q1\n    Lower_tail = q1 - 1.5 * iqr\n    Upper_tail = q3 + 1.5 * iqr\n    for i in df:\n        if i > Upper_tail or i < Lower_tail:\n            out.append(i)\n    print('Outliers:',out)\n    \nfor f in features:\n    print(f,' - ',end=' ')\n    iqr_outliers(df[f])\n    print('')","6ca316e4":"def del_outliers_IQR(df,colname):\n    q1 = df[colname].quantile(0.25)\n    q3 = df[colname].quantile(0.75)\n    iqr = q3-q1\n    Lower_tail = q1 - 1.5 * iqr\n    Upper_tail = q3 + 1.5 * iqr\n    \n    # dropping all values that are greater then the upper quartile range (75%)\n    df.drop(df[df[colname] > Upper_tail].index, inplace=True)\n    \n    # dropping all values that are smaller then the lower quartile range (25%)\n    df.drop(df[df[colname] < Lower_tail].index, inplace=True)","df3f63dd":"for f in features:\n    del_outliers_IQR(df,f)\nprint('Outliers removed from features.')","09b24747":"features","f2463b6f":"f,ax = plt.subplots(nrows=4,ncols=2,figsize=(15,12))\n\np00=sns.boxplot(x='Outcome',y='Pregnancies',data=df,ax=ax[0][0])\nax[0][0].set_title(r'Numerical Summary (Pregnancies)')\nax[0][0].set_ylabel(r'Five Point Summary(Pregnancies)')\nplt.xticks(ticks=[0,1],labels=['Non-Diab.','Diab.'])\nax[0][0].set_xlabel('Category')\nplt.tight_layout()\n\np01=sns.boxplot(x='Outcome',y='Glucose',data=df,ax=ax[0][1])\nax[0][1].set_title(r'Numerical Summary (Glucose)')\nax[0][1].set_ylabel(r'Five Point Summary(Glucose)')\nplt.xticks(ticks=[0,1],labels=['Non-Diab.','Diab.'])\nax[0][1].set_xlabel('Category')\nplt.tight_layout()\n\np10=sns.boxplot(x='Outcome',y='BloodPressure',data=df,ax=ax[1][0])\nax[1][0].set_title(r'Numerical Summary (BloodPressure)')\nax[1][0].set_ylabel(r'Five Point Summary(BloodPressure)')\nplt.xticks(ticks=[0,1],labels=['Non-Diab.','Diab.'])\nax[1][0].set_xlabel('Category')\nplt.tight_layout()\n\np11=sns.boxplot(x='Outcome',y='SkinThickness',data=df,ax=ax[1][1])\nax[1][1].set_title(r'Numerical Summary (SkinThickness)')\nax[1][1].set_ylabel(r'Five Point Summary(SkinThickness)')\nplt.xticks(ticks=[0,1],labels=['Non-Diab.','Diab.'])\nax[1][1].set_xlabel('Category')\nplt.tight_layout()\n\np20=sns.boxplot(x='Outcome',y='Insulin',data=df,ax=ax[2][0])\nax[2][0].set_title(r'Numerical Summary (Insulin)')\nax[2][0].set_ylabel(r'Five Point Summary(Insulin)')\nplt.xticks(ticks=[0,1],labels=['Non-Diab.','Diab.'])\nax[2][0].set_xlabel('Category')\nplt.tight_layout()\n\np21=sns.boxplot(x='Outcome',y='BMI',data=df,ax=ax[2][1])\nax[2][1].set_title(r'Numerical Summary (BMI)')\nax[2][1].set_ylabel(r'Five Point Summary(BMI)')\nplt.xticks(ticks=[0,1],labels=['Non-Diab.','Diab.'])\nax[2][1].set_xlabel('Category')\nplt.tight_layout()\n\np30=sns.boxplot(x='Outcome',y='DiabetesPedigreeFunction',data=df,ax=ax[3][0])\nax[3][0].set_title(r'Numerical Summary (DiabetesPedigreeFunction)')\nax[3][0].set_ylabel(r'Five Point Summary(DiabetesPedigreeFunction)')\nplt.xticks(ticks=[0,1],labels=['Non-Diab.','Diab.'])\nax[3][0].set_xlabel('Category')\nplt.tight_layout()\n\np31=sns.boxplot(x='Outcome',y='Age',data=df,ax=ax[3][1])\nax[3][1].set_title(r'Numerical Summary (Age)')\nax[3][1].set_ylabel(r'Five Point Summary(Age)')\nplt.xticks(ticks=[0,1],labels=['Non-Diab.','Diab.'])\nax[3][1].set_xlabel('Category')\nplt.tight_layout()\n\nplt.show()","57c57c43":"## We will standardize in case of large variance\ndf.var()","f6af7a15":"df.drop('DiabetesPedigreeFunction',axis=1,inplace=True)\ndf.head(2)","bd5db6ef":"X=df.iloc[:,:-1].values\ny=df.iloc[:,-1].values\n\nfrom sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size = 0.20, random_state = 0)\n\nprint(X_train.shape)\nprint(y_train.shape)\nprint(X_test.shape)\nprint(y_test.shape)","0fd94871":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\n\nX_train_std = scaler.fit_transform(X_train)\nX_test_std = scaler.transform(X_test)","2f7bd2a4":"## PCA to check models \n\nx= df.iloc[:,:-1].values\ny= df.iloc[:,-1].values\n\nfrom sklearn.decomposition import PCA\npca = PCA(n_components=2)\npca.fit(x)\n\nx_new = pca.transform(x)\n\nxs = x[:,0]\nys = x[:,1]\n\nplt.figure(dpi=100)\nsns.scatterplot(x=xs,y=ys,hue=y).set_title('Dependency of Data with Outcome')\nplt.xlabel('PCA Feature 1')\nplt.ylabel('PCA Feature 2')\nplt.show()","6e6a0e26":"## DecisionTreeClassifier\n\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import GridSearchCV\ndtc = DecisionTreeClassifier()\n\nparam_grid = {'criterion':['gini','entropy'],'max_depth':np.arange(2,10)}\n\ngrid_dtc = GridSearchCV(dtc,param_grid,scoring='accuracy',cv = 10,refit = True)","d020f937":"grid_dtc.fit(X_train_std,y_train)\nprint(\"Best Score ==> \", grid_dtc.best_score_)\nprint(\"Tuned Paramerers ==> \",grid_dtc.best_params_)\nprint(\"Accuracy on Train set ==> \", grid_dtc.score(X_train_std,y_train))\nprint(\"Accuracy on Test set ==> \", grid_dtc.score(X_test_std,y_test))","88386fa6":"## SVC\n\nfrom sklearn.svm import SVC\n\nsvc = SVC(probability=True)\n\nparam_grid = {'kernel':['rbf','linear'],'C':[0.01,0.1,1,0.001],'gamma':[0.1,0.01,0.2,0.4]}\n\ngrid_svc = GridSearchCV(svc,param_grid,scoring='accuracy',cv = 10,refit = True)","3ac6e6b2":"grid_svc.fit(X_train_std,y_train)\nprint(\"Best Score ==> \", grid_svc.best_score_)\nprint(\"Tuned Paramerers ==> \",grid_svc.best_params_)\nprint(\"Accuracy on Train set ==> \", grid_svc.score(X_train_std,y_train))\nprint(\"Accuracy on Test set ==> \", grid_svc.score(X_test_std,y_test))","9b104f9d":"## KNC\n\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn import metrics\nfrom sklearn.model_selection import GridSearchCV, RandomizedSearchCV\n\nknn = KNeighborsClassifier()\n\nparam_grid = {'n_neighbors':[5,10,15,25,30,50]}\n\ngrid_knn = GridSearchCV(knn,param_grid,scoring='accuracy',cv = 10,refit = True)","5ce700db":"grid_knn.fit(X_train_std,y_train)\nprint(\"Best Score ==> \", grid_knn.best_score_)\nprint(\"Tuned Paramerers ==> \",grid_knn.best_params_)\nprint(\"Accuracy on Train set ==> \", grid_knn.score(X_train_std,y_train))\nprint(\"Accuracy on Test set ==> \", grid_knn.score(X_test_std,y_test))","ba404a51":"##  combining these three using Voting Classifier\n\nfrom sklearn.ensemble import VotingClassifier\n\nclassifiers = [('knn',grid_knn),('tree',grid_dtc),('svc',grid_svc)]\n\nvtc = VotingClassifier(classifiers, voting='hard')\n\nvtc.fit(X_train_std,y_train)\nprint(\"Accuracy on Test set ==> \", vtc.score(X_test_std,y_test))","c04d8aa8":"**Who are Pima-indians**<br>\nAccording to Wikipedia, the Pima-indian are a group of Native Americans living in an area consisting of what is now central and southern Arizona, as well as northwestern Mexico in the states of Sonora and Chihuahua. <br> You can find more on [pima-indian](https:\/\/en.wikipedia.org\/wiki\/Pima_people)","4509b810":"# Analysis on Diabetic patients (Pima-Indians)","75be4d30":"We find that features ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI'] has value 0.<br>\nLogically **except Pregnancies**, all other features should have some value.<br> Now, we have 2 choices:\n1. Delete these rows having zero vals\n2. Impute a value (mean,median etc)\n\n<br>\nAlso, for **Pregnancies** the max value is 17 which is not general (outlier). <br>\n*But before doing any data pre-processing further, lets check data distribution for more insights*","e34c7190":"### Checking for missing value","74473d05":"## Introduction","1e4e5909":"### Glucose","f82f49fd":"## Multivariate analysis","8c9fce2c":"\nYou can find dataset using link:\n[pima-indians-diabetes-database](https:\/\/www.kaggle.com\/uciml\/pima-indians-diabetes-database)<br>\nThis dataset is originally from the National Institute of Diabetes and Digestive and Kidney Diseases. The objective of the dataset is to diagnostically predict whether or not a patient has diabetes, based on certain diagnostic measurements included in the dataset.<br>\nThis dataset consists of several medical predictor variables and one target variable, Outcome.","7542243a":"removing DiabetesPedigreeFunction as it has very low variance.","9a31bde8":"## Data Preprocessing & EDA","d129edff":"## Objectives","9373876b":"## Importing required modules","96f6fff1":"From above we can see that distribution is right skewed and centered at about 1.<br>Also, at higher pregnency month people have higher risk of diabeties (plot 1).<br> Outliers are present on the Upper end (value>12).","8f04ee99":"## Insulin","4b5b047a":"## Converting data into Pandas Dataframe","d4dc50c2":"Fitting a linear model to this data will not lead to better accuracy as data points are not linearly seperable,<br>Fitting a tree based model or neural network will help us to achieve more accuracy.","bf555375":"Till now KNeighborsClassifier is doing best","9702cdc6":"### Blood Pressure","19490bec":"We can see, except glucose all other features has outliers in their value.","34818ee3":"From above we can see that distribution is roughly following bell curved and centered at about 68.<br>Outliers are present on the lower end(BP ==0)","ef18426b":"**Diabetes**<br>According to WHO, Diabetes is a chronic disease that occurs either when the pancreas does not produce enough insulin or when the body cannot effectively use the insulin it produces. Insulin is a hormone that regulates blood sugar. Hyperglycaemia, or raised blood sugar, is a common effect of uncontrolled diabetes and over time leads to serious damage to many of the body's systems, especially the nerves and blood vessels.<br> With the help of this notebook, one can learn about the root causes.\n","f5b90a1e":"From above we can see that distribution is right skewed and centered at about 1.\n<br>Outliers are present on the upper end.","cb773945":"**1.** To determine which features are the most indicative of diabetes.<br>\n**2.** To experiment with different classification methods ( check for highest accuracy).<br>\n**3.** Classification of diabetes based on given features.","fca781f6":"### Outlier Detection","47a8f36a":"Pregnancies, Insulin, DBF and Age having skewed distribution probably due to presence of outliers.","a2c2fbeb":"## Building models","52528fe8":"## BMI","83c3c6eb":"## Imputing Zero values ","845d1a86":"## Univariate analysis","84441976":"From above we can see that distribution is roughly follow bell curved and centered at about 115.<br>Also, people with higher Glucose level have higher risk of Diabetes<br>Outliers are present on the lower end (Value=0).","a9d3ad2b":"## SkinThickness","a0778d1c":"## Dataset","72cdeff3":"From above we can see that distribution is roughly following bell curved and centered at about 32.\nOutliers are present.","1ddeac9c":"Now as we are done with outliers. I will check the variance of dataset features","5f278634":"From above we can see that distribution is roughly following bell curved and centered at about 20.<br>\nOutliers are present on the lower end(Value=0).","bdcc273c":"### Checking for datatype and null value","6388b1c7":"**KNeighborsClassifier is doing better then other two.**","6dcaf19a":"### Pregnancies"}}