{"cell_type":{"7625c6cc":"code","ddbf59fc":"code","676e8d3a":"code","ff8b0de1":"code","f56a01e8":"code","5415e642":"code","2afea1c0":"code","eb10d96b":"code","1de7fe20":"code","ae75b0a7":"code","b47c1fe5":"code","d732c94c":"code","766a1f0f":"code","a0707b6b":"code","beb33db1":"code","9a6eef0c":"code","f1bb281d":"code","d27b1536":"code","bea5354b":"code","4df2da6d":"code","5e8f65ed":"code","4bfd2f75":"code","2ce0034a":"code","e6e1c7ef":"markdown","436d3e65":"markdown","c7342411":"markdown","6cd2d819":"markdown"},"source":{"7625c6cc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ddbf59fc":"from sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import StandardScaler,OneHotEncoder\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\ntrain_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntrain_data.head()","676e8d3a":"X_full = train_data.copy()\nX_test_full = test_data.copy()\n\n#Separate target from predictors\ny = X_full.Survived\nX_full.drop(['Survived'], axis=1, inplace=True)","ff8b0de1":"X_full.describe()","f56a01e8":"#checking for correlation between numerical variables \ncor_numeric = X_full[['Age','Pclass','SibSp', 'Parch', 'Fare']]\ncorrelog = cor_numeric.corr()\ncorrelog #nothing higher than 0.7 so nothing to worry","5415e642":"X_full.info() # we can see that age, cabin, and embarked have missing values","2afea1c0":"X_full['Ticket'].value_counts() #better drop this one, high cardinality","eb10d96b":"X_full['Cabin'].value_counts() #also better drop, high cardinality and too many missing values","1de7fe20":"#Remove variables that won't be used\n\nvariables_drop = [ 'Name', 'Cabin', 'Ticket']\nX_full.drop(variables_drop, axis=1, inplace=True)\n","ae75b0a7":"# X and X_test should have the same columns\nX_test_full.drop(variables_drop, axis=1, inplace=True)\n","b47c1fe5":"X_train = X_full\nX_train.head()","d732c94c":"X_test = X_test_full\nX_test.head()","766a1f0f":"# Numerical and categorical columns shoud be treated separately\nnum_columns = X_train.select_dtypes(exclude='object').columns\ncat_columns = X_train.select_dtypes(include='object').columns","a0707b6b":"num_columns","beb33db1":"cat_columns","9a6eef0c":"#all numerical columns will receive the same imputer and transformers\n#categorical columns sex and embarked will be added constant to missing values and onehot encoder\n\noneHot_cat_cols = ['Sex', 'Embarked']\ntransf_num_cols = ['Pclass', 'Age', 'SibSp', 'Parch', 'Fare']\nmy_cols = (transf_num_cols + oneHot_cat_cols)\n\n    ","f1bb281d":"# Define transformers\n# Preprocessing for numerical data\nnumerical_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='constant', fill_value=0)),\n    ('scaler', StandardScaler())])\n\n# Preprocessing for categorical data\n\ncategorical_transformer_onehot =  Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='constant', fill_value='NA')),\n    ('onehot', OneHotEncoder(handle_unknown = 'ignore', sparse = False))\n])\n\n# Bundle preprocessing for numerical and categorical data\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numerical_transformer, transf_num_cols),\n        ('cat_onehot', categorical_transformer_onehot, oneHot_cat_cols)\n    ])","d27b1536":"# Copying data\nX_selected_train = X_train[my_cols].copy()\nX_selected_test = X_test[my_cols].copy()","bea5354b":"# Test different models\n\nfrom xgboost import XGBRegressor\n\nxgb_model = XGBRegressor(learning_rate = 0.05,\n                            n_estimators=1000,\n                            max_depth=5,\n                            random_state=0)\n\n# Create the Pipeline\n# Bundle preprocessing and modeling code in a pipeline\nmy_pipeline_xgb = Pipeline(steps=[('preprocessor', preprocessor),\n                            ('model', xgb_model)\n                             ])\n\n# Multiply by -1 since sklearn calculates *negative* MAE\nscores = -1 * cross_val_score(my_pipeline_xgb, X_selected_train, y,\n                              cv=5,\n                              scoring='neg_mean_absolute_error')\n\nprint(\"MAE score:\\n\", scores)\nprint(\"MAE mean: {}\".format(scores.mean()))","4df2da6d":"from sklearn.svm import SVC\n\nSVC_model = SVC(C=30, kernel = 'poly', random_state=0)\n\n# Create the Pipeline\n# Bundle preprocessing and modeling code in a pipeline\nmy_pipeline_SVC = Pipeline(steps=[('preprocessor', preprocessor),\n                            ('model', SVC_model)\n                             ])\n\n# Multiply by -1 since sklearn calculates *negative* MAE\nscores = -1 * cross_val_score(my_pipeline_SVC, X_selected_train, y,\n                              cv=5,\n                              scoring='neg_mean_absolute_error')\n\nprint(\"MAE score:\\n\", scores)\nprint(\"MAE mean: {}\".format(scores.mean()))","5e8f65ed":"# Fit the best model\nmy_pipeline_SVC.fit(X_selected_train, y)\n\n# Get predictions\npreds = my_pipeline_SVC.predict(X_selected_test)","4bfd2f75":"output = pd.DataFrame({'PassengerId': X_test.PassengerId,\n                       'Survived': preds})\n\noutput.to_csv('submission.csv', index=False)","2ce0034a":"import os\nos.chdir(r'..\/working')\nfrom IPython.display import FileLink\nFileLink(r'submission.csv')","e6e1c7ef":"Choosing a model","436d3e65":"Data preprocessing","c7342411":"Defining tranformes and pipelines","6cd2d819":"1. Quick Data Exploration"}}