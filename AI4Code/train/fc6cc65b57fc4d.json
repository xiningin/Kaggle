{"cell_type":{"189f000f":"code","03528fa7":"code","9a4bff57":"code","0a9079eb":"code","54372688":"code","974c808a":"code","eda6fdfc":"code","3a4c2d26":"code","c6dfbbff":"code","3ce249f0":"code","d22e88db":"code","e9deabb5":"code","964bf283":"code","4f2f92b4":"code","89c22674":"code","7c11f0a2":"code","06862511":"code","7287829c":"code","12121812":"code","07d81545":"code","100c5c7a":"code","55aafb5f":"code","eec59b8a":"code","d46d6d2d":"code","9d76760f":"code","f770da95":"code","44812a27":"code","3a2bec9b":"code","94250d8e":"code","5d5d8dcd":"code","0e735e8b":"code","ab5240c5":"code","49c0f114":"code","59e4fd43":"code","0c291b0d":"code","8e57b4d3":"code","e2ded234":"code","4d9076c7":"code","6c20417d":"code","80343f47":"code","b4758184":"markdown","4aaeaac4":"markdown","d0ad6c0d":"markdown","79160ffd":"markdown","89ab4fea":"markdown","85a83001":"markdown","d07726f5":"markdown","e769a208":"markdown","4aff6e62":"markdown","e5dc4fa8":"markdown","b11b8ee7":"markdown","31a6085d":"markdown","8e4d082a":"markdown","d726e7e9":"markdown","f85941a8":"markdown","275c8222":"markdown","c3b79c38":"markdown","c4e76bae":"markdown","828e28e8":"markdown","c1593cb2":"markdown","e516374c":"markdown","6534e100":"markdown","ba655e68":"markdown","ed50d804":"markdown","75a5ec7c":"markdown","2da73b5c":"markdown","fadbac98":"markdown","c421db0b":"markdown","1f41efa3":"markdown","8bcfae15":"markdown","f57258e0":"markdown","806100cc":"markdown"},"source":{"189f000f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns  # visualization tool\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n# plotly\nimport plotly.plotly as py\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\n# word cloud library\nfrom wordcloud import WordCloud\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","03528fa7":"#my work is based on \"Wine Reviews\" written by zackthoutt\ndata = pd.read_csv('..\/input\/winemag-data_first150k.csv')\n","9a4bff57":"data = data.drop(['Unnamed: 0'],axis=1)\ndata[\"total_value\"] = data.price + data.points\ndata.index.name = \"index_name\"\ndata.head()\n","0a9079eb":"data.info()","54372688":"data.describe()","974c808a":"data.corr()","eda6fdfc":"data.shape","3a4c2d26":"data.dtypes","c6dfbbff":"data.country = data.country.fillna(\"\")\ndata.country.replace([\"\"],\"Unknown\",inplace=True)\ndata.price= data.price.fillna(\"\")\ndata.price.replace([\"\"],0.0,inplace = True)\ndata.price =data.price.astype(float)\n#data.price\narea_list = list(data.country.unique())\narea_price_ratio = []\nfor i in area_list:\n    x = data[data.country==i]\n    area_price_rate = sum(x.price)\/len(x)\n    area_price_ratio.append(area_price_rate)\n    #print(i,len(x),area_price_rate)\n\ndata_1 = pd.DataFrame({'area_list': area_list,'area_price_ratio':area_price_ratio})\nnew_index = (data_1['area_price_ratio'].sort_values(ascending=False)).index.values\nsorted_data1 = data_1.reindex(new_index)\n\nplt.figure(figsize=(15,10))\nsns.barplot(x=sorted_data1['area_list'], y=sorted_data1['area_price_ratio'])\nplt.xticks(rotation= 90)\nplt.xlabel('Country',fontsize = 15,color='blue')\nplt.ylabel('Price Rate',fontsize = 15,color='blue')\nplt.title('Price Rate Given Countries',fontsize = 20,color='blue')\nplt.savefig('graph.png')\nplt.grid()  \n\n","3ce249f0":"ax=(data['country'].value_counts().head(15) \/ len(data)).plot.bar(figsize=(14,6))\nax.set_title(\"Percentage of Top 15 Countries\", fontsize=20,color= \"magenta\")\nplt.grid()","d22e88db":"\nax=data['province'].value_counts().head(10).plot.bar(figsize=(12,6))\nax.set_title(\"Top 10 Province\", fontsize=20,color =\"magenta\")\nplt.grid()","e9deabb5":"ax=data['winery'].value_counts().head(30).plot.bar(figsize=(14,6))\nax.set_title(\"Top 30 Wineries\", fontsize=20,color=\"magenta\")\nplt.xlabel('Name of Wineries',fontsize = 15,color='blue')\nplt.ylabel('Frequency',fontsize = 15,color='blue')\nplt.grid()","964bf283":"ax=data['variety'].value_counts().head(30).plot.bar(figsize=(14,6))\nax.set_title(\"Top 30 Wine Varieties\", fontsize=20,color=\"magenta\")\nplt.grid()","4f2f92b4":"plt.figure(figsize=(14,6))\nsns.countplot(data['points'])\nplt.title('Points',fontsize = 25,color='magenta')\nplt.xticks(rotation=90)\nplt.grid()\nplt.show()","89c22674":"ax= data['points'].value_counts().sort_index().plot.bar(\nfigsize=(14,6))\nax.set_title(\"Points\", fontsize=20,color=\"magenta\")\nplt.grid()","7c11f0a2":"ax= data['price'].value_counts().head(50).sort_index().plot.bar(\nfigsize=(25,6))\nax.set_title(\"Price under 100\", fontsize=20,color=\"magenta\")\nplt.grid()","06862511":"data.points= data.points.fillna(\"\")\ndata.points.replace([\"\"],0.0,inplace = True)\ndata.points =data.points.astype(float)\n#data.points\narea_list = list(data.country.unique())\narea_points_ratio = []\nfor i in area_list:\n    x = data[data.country==i]\n    area_points_rate = sum(x.points)\/len(x)\n    area_points_ratio.append(area_points_rate)\n    #print(i,len(x),area_price_rate)\n\ndata_2 = pd.DataFrame({'area_list': area_list,'area_points_ratio':area_points_ratio})\nnew_index = (data_2['area_points_ratio'].sort_values(ascending=True)).index.values\nsorted_data2 = data_2.reindex(new_index)\nsorted_data1['area_price_ratio'] = sorted_data1['area_price_ratio']\/max( sorted_data1['area_price_ratio'])\nsorted_data2['area_points_ratio'] = sorted_data2['area_points_ratio']\/max( sorted_data2['area_points_ratio'])\ndata_9 = pd.concat([sorted_data1,sorted_data2['area_points_ratio']],axis=1)\n#data.sort_values('area_points_ratio',inplace=True)\n# visualize\nf,ax1 = plt.subplots(figsize =(20,10))\nsns.pointplot(x='area_list',y='area_price_ratio',data=data_9,color='lime',alpha=0.8)\nsns.pointplot(x='area_list',y='area_points_ratio',data=data_9,color='red',alpha=0.8)\nplt.text(40,0.6,'price ratio',color='red',fontsize = 17,style = 'italic')\nplt.text(40,0.55,'points ratio',color='lime',fontsize = 18,style = 'italic')\nplt.xlabel('Country',fontsize = 15,color='blue')\nplt.ylabel('Values',fontsize = 15,color='blue')\nplt.title('Price vs Points',fontsize = 20,color='blue')\nplt.xticks(rotation= 90)\nplt.savefig('graph.png')\nplt.grid()\n\n","7287829c":"g = sns.jointplot(data_1.area_price_ratio, data_2.area_points_ratio, kind=\"kde\", size=7)\n\nplt.savefig('graph.png')\nplt.show()\n","12121812":"\n# kind : { \u201cscatter\u201d | \u201creg\u201d | \u201cresid\u201d | \u201ckde\u201d | \u201chex\u201d }\n\n\ng = sns.jointplot(\"area_price_ratio\", \"area_points_ratio\", data=data_9,size=7, ratio=3, color=\"r\",kind=\"hex\",gridsize=15)\nplt.savefig('graph.png')\nplt.show()","07d81545":"\nsns.lmplot(x=\"area_price_ratio\", y=\"area_points_ratio\", data=data_9,size=7)\nplt.savefig('graph.png')\nplt.show()","100c5c7a":"plt.subplots(figsize =(12,6))\nsns.violinplot(\n    x='variety',\n    y='points',\n    data=data[data.variety.isin(data.variety.value_counts()[:5].index)],\n   \n    )","55aafb5f":"plt.subplots(figsize =(12,6))\npal = sns.cubehelix_palette(2, rot=.5, dark=.6)\nsns.violinplot(data=data_9, palette=pal, inner=\"points\")\nplt.show()\n","eec59b8a":"df_hm = data.drop(['total_value'],axis=1)\nf,ax = plt.subplots(figsize=(7,7))\nsns.heatmap(df_hm.corr(), annot=True, linewidths=.8,linecolor=\"red\", fmt= '.1f',ax=ax)\nplt.show()","d46d6d2d":"\n\ndata['price'].value_counts().sort_index().head(100).plot(kind = 'line', color = 'r',\nlabel = 'price',linewidth=1,alpha = 0.6,grid = True,linestyle = \"-\",figsize=(18,5),)\nplt.legend(loc='upper right')   \nplt.xlabel('Price',fontsize = 15,color='black')             \nplt.ylabel('Quantity',fontsize = 15,color='black')\nplt.title('Quantity-Price Plot',fontsize = 20,color='black')\n\nplt.show()","9d76760f":"\ndata['points'].value_counts().sort_index().plot(kind = 'line',color = 'b',label = 'points',linewidth=1, alpha = 0.6,grid = True,linestyle = '-',figsize=(18,5))\nplt.legend(loc='upper right')   \nplt.xlabel('Points',fontsize = 15,color='black')             \nplt.ylabel('Quantity',fontsize = 15,color='black')\nplt.title('Quantity-Points Plot',fontsize = 20,color='black')            \nplt.show()\n","f770da95":"\n\ndata.plot(kind='scatter', x='points', y='price',alpha = 0.6,color = 'b',figsize = (12,8),s=50)\n\nplt.title('Points Price Scatter Plot') \nplt.xlabel('Points',fontsize = 15,color='blue')\nplt.ylabel('Price ',fontsize = 15,color='blue')\n\nplt.savefig('graph.png')\nplt.show()","44812a27":"\n\nfig, axes = plt.subplots(nrows=2,ncols=1)\ndata.plot(kind = \"hist\",y =\"price\",bins = 50,range= (0,250),normed = True,ax = axes[0],figsize = (14,6),color=\"orange\")\ndata.plot(kind = \"hist\",y =\"price\",bins = 50,range= (0,250),normed = True,ax = axes[1],cumulative = True,figsize = (14,6),color=\"orange\")\nplt.savefig('graph.png')\nplt.show()","3a2bec9b":"data.boxplot(column='price',by = 'points',figsize = (14,10))\nplt.xlabel('Points',fontsize = 15,color='blue')\nplt.ylabel('Price ',fontsize = 15,color='blue')\nplt.show()","94250d8e":"df = data[data.variety.isin(data.variety.value_counts().head(5).index)]\nplt.figure( figsize=(8,4), dpi=120)\nsns.boxplot(\n    x='variety',\n    y='points',\n    data=df\n)\nplt.xlabel('Variety',fontsize = 10,color='b')             \nplt.ylabel('Points',fontsize = 10,color='b')","5d5d8dcd":"plt.figure( figsize=(12,7), dpi=90)\nsns.swarmplot(x=\"points\", y=\"price\",hue=\"country\", data=data.head(500),)\nplt.xlabel('Points',fontsize = 15,color='b')             \nplt.ylabel('Price',fontsize = 15,color='b')\nplt.grid()\nplt.show()","0e735e8b":"\nsns.pairplot(data_9)\nplt.show()","ab5240c5":"data.country.dropna(inplace = True)\nlabels = data.country.value_counts().index\nlabels_1=(labels[0:12])\ncolors = ['grey','blue','red','yellow','green','brown',\"lime\",\"cyan\",\"magenta\",\"purple\",\"yellow\",\"pink\"]\nexplode = [0,0,0,0,0,0,0,0,0,0,0,0]\nsizes = data.country.value_counts().values\narray_1=(sizes[0:12])\n\n# visual\nplt.figure(figsize = (10,10))\nplt.pie(array_1, explode=explode, labels=labels_1, colors=colors, autopct='%1.1f%%')\nplt.title('Percentage per Country',color = 'blue',fontsize = 15)\nplt.savefig('graph.png')\nplt.show()","49c0f114":"\ndf = data.iloc[:100,:]\n\ndf.dropna(subset=['price', 'points',\"country\"],inplace=True)\n# import graph objects as \"go\"\nimport plotly.graph_objs as go\n\n# Creating trace1\ntrace1 = go.Scatter(\n                    x = df.index,\n                    y = df.points,\n                    mode = \"lines + markers\",\n                    name = \"points\",\n                    marker = dict(size=3,color = 'rgba(8, 134,56, 0.6)'),\n                    text= df.country)\n# Creating trace2\ntrace2 = go.Scatter(\n                    x = df.index,\n                    y = df.price,\n                    mode = \"lines+markers\",\n                    name = \"price\",\n                    marker = dict(size=8,color = 'rgba(89,66, 57, 0.6)'),\n                    text= df.country)\ndata_11 = [trace1, trace2]\nlayout = dict(title = 'Points and Prices vs. Wine Countries',\n              xaxis= dict(title= 'Index',ticklen= 10,zeroline= False), yaxis= dict(title= 'Price & Points',ticklen= 5,zeroline= False))\nfig = dict(data = data_11, layout = layout)\niplot(fig)","59e4fd43":"\nfirst_filter = data.price > 1000\nsecond_filter = data.points > 97\ndf_01 = data[first_filter & second_filter].iloc[:3,:]\n# import graph objects as \"go\"\nimport plotly.graph_objs as go\n\ntrace1 = go.Bar(\n                x = df_01.region_1,\n                y = df_01.total_value,\n                name = \"total_value\",\n                marker = dict(color = 'rgba(200, 74, 155, 0.7)',\n                             line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = df_01.winery)\n\ntrace2 = go.Bar(\n                x = df_01.region_1,\n                y = df_01.price,\n                name = \"price\",\n                marker = dict(color = 'rgba(17, 55, 128, 0.7)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = df_01.winery)\ndt_11 = [trace1, trace2]\nlayout = go.Layout(barmode = \"group\",title = 'Price & Points vs. Wineries of three most expensive wines',\n              xaxis= dict(title= 'Region',ticklen= 10,zeroline= False), yaxis= dict(title= 'Price & Points',ticklen= 5,zeroline= False))\nfig = go.Figure(data = dt_11, layout = layout)\niplot(fig)","0c291b0d":"df = data.iloc[:100,:]\ntrace1 = go.Scatter3d(\n    x=df.index,\n    y=df.price,\n    z=df.points,\n    mode='markers',\n    marker=dict(\n        size = df.country.value_counts().values,\n        color= df.total_value,\n        colorscale='Viridis',                # set color to an array\/list of desired values      \n    )\n)\n\ndata_10 = [trace1]\nlayout = go.Layout(\n    margin=dict(\n        l=0,\n        r=0,\n        b=0,\n        t=0  \n    )\n    \n)\nfig = go.Figure(data=data_10, layout=layout)\niplot(fig)","8e57b4d3":"df5 = data.iloc[:1000,:]\ntrace1 = go.Scatter(\n    x=df5.index,\n    y=df5.price,\n    name = \"price\"\n)\ntrace2 = go.Scatter(\n    x=df5.index,\n    y=df5.points,\n    xaxis='x2',\n    yaxis='y2',\n    name = \"points\"\n)\ntrace3 = go.Scatter(\n    x=df5.index,\n    y=df5.country.value_counts().values,\n    xaxis='x3',\n    yaxis='y3',\n    name = \"country\"\n)\ntrace4 = go.Scatter(\n    x=df5.index,\n    y=df5.total_value,\n    xaxis='x4',\n    yaxis='y4',\n    name = \"total_value\"\n)\ndata_05 = [trace1, trace2, trace3, trace4]\nlayout = go.Layout(\n    xaxis=dict(\n        domain=[0, 0.45]\n    ),\n    yaxis=dict(\n        domain=[0, 0.45]\n    ),\n    xaxis2=dict(\n        domain=[0.55, 1]\n    ),\n    xaxis3=dict(\n        domain=[0, 0.45],\n        anchor='y3'\n    ),\n    xaxis4=dict(\n        domain=[0.55, 1],\n        anchor='y4'\n    ),\n    yaxis2=dict(\n        domain=[0, 0.45],\n        anchor='x2'\n    ),\n    yaxis3=dict(\n        domain=[0.55, 1]\n    ),\n    yaxis4=dict(\n        domain=[0.55, 1],\n        anchor='x4'\n    ),\n    title = 'Price, Points, Country and Total_Value of Wines'\n)\nfig = go.Figure(data=data_05, layout=layout)\niplot(fig)","e2ded234":"df_01 = data.country[data.total_value >= 150]\nplt.subplots(figsize=(8,8))\nwordcloud = WordCloud(\n                          background_color='grey',\n                          width=512,\n                          height=384\n                         ).generate(\" \".join(df_01))\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.savefig('graph.png')\n\nplt.show()","4d9076c7":"df07 = pd.DataFrame(data['country'].value_counts()).reset_index()\ndf07.columns = ['country', 'total']\ndf07 = df07.reset_index().drop('index', axis=1)\n\ndata14 = [ dict(\n        type = 'choropleth',\n        locations = df07['country'],\n        locationmode = 'country names',\n        z = df07['total'],\n        text = df07['country'],\n      \n        colorscale=\"Viridis\",\n     \n        autocolorscale = False,\n        reversescale = True,\n        marker = dict(\n            line = dict (\n                color = 'rgb(180,180,180)',\n                width = 0.5\n            ) ),\n        colorbar = dict(\n            autotick = False,\n            tickprefix = '',\n            title = 'Total Wine'),\n      ) ]\n\nlayout = dict(\n    title = 'Wine  by Country',\n    geo = dict(\n        showframe = False,\n        showcoastlines = True,\n        projection = dict(\n            type ='equirectangular'\n        )\n    )\n)\n\nfig = dict( data=data14, layout=layout )\niplot( fig, validate=False)","6c20417d":"df09=df07.head(10)\ndf09[\"lon\"]=[-104.990250,9.189982,2.352222,-3.703790,-70.669266,-58.381557,-9.139337,151.209290,174.776230,16.373819]\ndf09[\"lat\"]=[39.739235,45.464203,48.856613,40.416775,-33.448891,-34.603683,38.722252,-33.868820,-41.286461,48.208176]\nda1 = [dict(\n    type='scattergeo',\n    lon = df09['lon'],\n    lat = df09['lat'],\n    hoverinfo = 'text',\n    text = \"Country: \" + df09.country ,\n    mode = 'markers',\n    marker=dict(\n        sizemode = 'area',\n        sizeref = 1,\n        size= 10 ,\n        line = dict(width=1,color = \"black\"),\n        color = \"cyan\",\n        opacity = 0.7),\n)]\nlayout = dict(\n    title = 'Top 10 Wine Countries ',\n    hovermode='closest',\n    geo = dict(showframe=False, showland=True, showcoastlines=True, showcountries=True,\n               countrywidth=1, projection=dict(type='equirectangular'),\n              landcolor = ' light grey',\n              subunitwidth=1,\n              showlakes = True,\n              lakecolor = 'light blue',\n              countrycolor=\"rgb(100, 5, 5)\")\n)\nfig = go.Figure(data=da1, layout=layout)\niplot(fig)","80343f47":"df19 = pd.DataFrame(data['winery'].value_counts()).reset_index()\ndf19.columns = ['winery', 'total']\ndf19 = df19.reset_index().drop('index', axis=1)\ndf18 = df19.head(15)\nfig = {\n  \"data\": [\n    {\n      \"values\": df18.total,\n      \"labels\": df18.winery,\n      \"domain\": {\"x\": [0, .5]},\n      \"name\": \"Percentage\",\n      \"hoverinfo\":\"label+percent+name\",\n      \"hole\": .2,\n      \"type\": \"pie\"\n    },],\n  \"layout\": {\n        \n        \"annotations\": [\n            { \"font\": { \"size\": 20},\n              \"showarrow\": False,\n              \"text\": \"Percentage by Wineries\",\n                \"x\": 0.13,\n                \"y\": 1.2\n            },\n        ]\n    }\n}\niplot(fig)","b4758184":"<a id=\"21\"><\/a> <br>\nSeaborn Swarm Plot","4aaeaac4":"<a id=\"10\"><\/a> <br>\nSeaborn Joint Plot  (hex)       #correlation","d0ad6c0d":"<a id=\"14\"><\/a> <br>\nSeabornHeatmap   # correlation","79160ffd":"\n<a id=\"27\"><\/a> <br>\nPlotly Inset Plot about 'Price, Points, Country and Total_Value of Wines'","89ab4fea":"<a id=\"15\"><\/a> <br>\nMatplotlib Line Plot about 'Quantity-Price Plot'","85a83001":"<a id=\"23\"><\/a> <br>\nMatplotlib Pie Chart about 'Percentage per Country'","d07726f5":"<a id=\"17\"><\/a> <br>\nMatplotlib Scatter Plot about 'Points Price Scatter Plot'","e769a208":"<a id=\"28\"><\/a> <br>\nWorld Cloud  Imshow","4aff6e62":"<a id=\"9\"><\/a> <br>\nSeaborn Joint Plot  (kde)       #correlation","e5dc4fa8":"<a id=\"24\"><\/a> <br>\nPlotly Scatter Plot about 'Points and Prices vs. Wine Countries'","b11b8ee7":"<a id=\"5\"><\/a> <br>\nBar Plot about \"Top 30 Wine Varieties\"","31a6085d":"<a id=\"7\"><\/a> <br>\nBar Plot about \"Price under 100\"","8e4d082a":"<a id=\"26\"><\/a> <br>\nPlotly 3D Scatter Plot","d726e7e9":"**This Kernel is about the Visualization of Wine Reviews **\n\n**Here below are the several types of Data Visualization methods listed:**\n\n[1.Seaborn Bar Plot about 'Price Rate Given Countries'](#1)\n\n[2.Bar Plot about \"Percentage of Top 15 Countries\"](#2)\n\n[3.Bar Plot about \"Top 10 Province\"](#3)\n\n[4.Bar Plot about \"Top 30 Wineries\"](#4)\n\n[5.Bar Plot about \"Top 30 Wine Varieties\"](#5)\n\n[6.Seaborn Count Plot and Matplotlib Bar Plot about \"Points\"](#6)\n\n[7.Bar Plot about \"Price under 100\"](#7)\n\n[8.Seaborn Point Plot about 'Price vs Points'](#8)\n\n[9.Seaborn Joint Plot  (kde)       #correlation](#9)\n\n[10.Seaborn Joint Plot  (hex)       #correlation](#10)\n\n[11.Seaborn Implot       #linear regression](#11)\n\n[12.Seaborn Violinplot    about Variety and Point](#12)\n\n[13.Seaborn Violinplot    about  Area_Price_Ratio % Area_Points_Ratio](#13)\n\n[14.SeabornHeatmap   # correlation](#14)\n\n[15.Matplotlib Line Plot about 'Quantity-Price Plot'](#15)\n\n[16.Matplotlib Line Plot about 'Quantity-Points Plot'](#16)\n\n[17.Matplotlib Scatter Plot about 'Points Price Scatter Plot'](#17)\n\n[18.Matplotlib Histogram ](#18)\n\n[19.Matplotlib Box Plot about 'Points and Price'](#19)\n\n[20.Seaborn Box Plot about 'Variety and Points'](#20)\n\n[21.Seaborn Swarm Plot](#21)\n\n[22.Seaborn Pair Plot](#22)\n\n[23.Matplotlib Pie Chart about 'Percentage per Country'](#23)\n\n[24.Plotly Scatter Plot about 'Points and Prices vs. Wine Countries'](#24)\n\n[25.Plotly ar Plot about 'Price & Points vs. Wineries of three most expensive wines'](#25)\n\n[26.Plotly 3D Scatter Plot](#26)\n\n[27.Plotly Inset Plot about 'Price, Points, Country and Total_Value of Wines'](#27)\n\n[28.World Cloud  Imshow](#28)\n\n[29.World Cloud  Choropleth](#29)\n\n[30.Plotly Scattergeo](#30)\n\n[31.Plotly Pie Chart about  Percentage by Wineries](#31)\n\n\n\n\n\n","f85941a8":"<a id=\"18\"><\/a> <br>\nMatplotlib Histogram ","275c8222":"<a id=\"22\"><\/a> <br>\nSeaborn Pair Plot","c3b79c38":"<a id=\"2\"><\/a> <br>\nBar Plot about \"Percentage of Top 15 Countries\"","c4e76bae":"<a id=\"31\"><\/a> <br>\nPlotly Pie Chart about  Percentage by Wineries","828e28e8":"<a id=\"19\"><\/a> <br>\nMatplotlib Box Plot about 'Points and Price'","c1593cb2":"<a id=\"12\"><\/a> <br>\nSeaborn Violinplot    about Variety and Points","e516374c":"<a id=\"13\"><\/a> <br>\nSeaborn Violinplot    about  Area_Price_Ratio % Area_Points_Ratio","6534e100":"<a id=\"1\"><\/a> <br>\nSeaborn Bar Plot about 'Price Rate Given Countries' :\n","ba655e68":"<a id=\"6\"><\/a> <br>\n\nSeaborn Count Plot and Matplotlib Bar Plot about \"Points\"","ed50d804":"<a id=\"29\"><\/a> <br>\nWorld Cloud  Choropleth","75a5ec7c":"<a id=\"11\"><\/a> <br>\nSeaborn Implot       #linear regression","2da73b5c":"<a id=\"25\"><\/a> <br>\nPlotly ar Plot about 'Price & Points vs. Wineries of three most expensive wines'","fadbac98":"<a id=\"3\"><\/a> <br>\nBar Plot about \"Top 10 Province\"","c421db0b":"<a id=\"20\"><\/a> <br>\nSeaborn Box Plot about 'Variety and Points'","1f41efa3":"<a id=\"16\"><\/a> <br>\nMatplotlib Line Plot about 'Quantity-Points Plot'","8bcfae15":"<a id=\"4\"><\/a> <br>\nBar Plot about \"Top 30 Wineries\"","f57258e0":"<a id=\"8\"><\/a> <br>\nSeaborn Point Plot about 'Price vs Points'","806100cc":"<a id=\"30\"><\/a> <br>\nPlotly Scattergeo"}}