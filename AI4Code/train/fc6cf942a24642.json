{"cell_type":{"d40f7a14":"code","9cbf620b":"code","e674e48d":"code","96aa0c00":"code","f04cf5d5":"code","edca4b35":"code","d3ad3d21":"code","0e0f805b":"code","fc4ab69d":"code","706a0c57":"code","0a3a0087":"code","45293005":"code","5b2b6237":"markdown","5c496838":"markdown","f5d97898":"markdown","014ceca0":"markdown","3311cdc6":"markdown","b7437412":"markdown"},"source":{"d40f7a14":"import pandas as pd  \nimport numpy as np\nimport random\nimport math\nimport os\n\nfrom sklearn.experimental import enable_hist_gradient_boosting\nfrom sklearn.ensemble import ExtraTreesRegressor, GradientBoostingRegressor, HistGradientBoostingRegressor, RandomForestRegressor, VotingRegressor\nfrom sklearn.model_selection import LeaveOneGroupOut\nfrom sklearn.preprocessing import StandardScaler, PowerTransformer\nfrom sklearn.metrics import mean_squared_error\n\nimport lightgbm as lgb\nimport xgboost as xgb\nimport catboost as cbt\n\nimport warnings\nwarnings.filterwarnings('ignore')","9cbf620b":"CFG = {\n    'seed': 2021,\n}","e674e48d":"def seed_everything(seed=42):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n\nseed_everything(CFG['seed'])","96aa0c00":"train = pd.read_csv(\"..\/input\/tabular-playground-series-jul-2021\/train.csv\", index_col=\"date_time\", parse_dates=True)\ntest = pd.read_csv(\"..\/input\/tabular-playground-series-jul-2021\/test.csv\", index_col=\"date_time\", parse_dates=True)\nsubmission = pd.read_csv(\"..\/input\/tabular-playground-series-jul-2021\/sample_submission.csv\", index_col=\"date_time\", parse_dates=True)\n\ntrain=train.loc[~(train.index=='2011-01-01 00:00:00')]","f04cf5d5":"all_df = pd.concat([train, test])","edca4b35":"def make_features(df, params):\n    df['deg_K'] = df['deg_C'] + 273.15\n    \n    df['sensor_6'] = (df['sensor_2'] - df['sensor_5']) \/ df['sensor_5']\n    df['sensor_7'] = (df['sensor_3'] - df['sensor_4']) \/ df['sensor_4']\n    \n    for periods in params[0]:\n        df[f'dt-{periods}'] = df['deg_C'] - df['deg_C'].shift(periods=periods, fill_value=0)\n\n    for periods in params[1]:\n        df[f'abshum-{periods}'] = df['absolute_humidity'] - df['absolute_humidity'].shift(periods=periods, fill_value=0)\n        df[f'relhum-{periods}'] = df['relative_humidity'] - df['relative_humidity'].shift(periods=periods, fill_value=0)\n    \n    for i in range(7):\n        for periods in params[2]:\n            df[f's{i+1}-{periods}'] = df[f'sensor_{i+1}'] - df[f'sensor_{i+1}'].shift(periods=periods, fill_value=0)\n\n            \n    df.drop(columns='deg_C', inplace=True)\n    \n    return df","d3ad3d21":"def pb_add(X):\n    X['day'] = X.index.weekday\n    X['is_odd'] = (X['sensor_4'] < 646) & (X['absolute_humidity'] < 0.238)\n    diff = X.index - X.index.min()\n    trend = diff.days\n    \n    for i in [1, 2, 3, 4]:\n        X[f'f{i}s'] = np.sin(trend * 2 * math.pi \/ (365 * i)) \n        X[f'f{i}c'] = np.cos(trend * 2 * math.pi \/ (365 * i))\n    for i in [1, 2, 3]:\n        X[f'fh{i}s'] = np.sin(diff.seconds * 2 * math.pi \/ ( 3600 * 24 * i))\n        X[f'fh{i}c'] = np.cos(diff.seconds * 2 * math.pi \/ ( 3600 * 24 * i))\n    \n    sensor_features = [\n        'deg_K', \n        'relative_humidity', 'absolute_humidity', \n        'sensor_1', 'sensor_2', 'sensor_3', 'sensor_4', 'sensor_5', 'sensor_6', 'sensor_7',\n    ]\n    \n    lags = [-1, -4, -24, -7*24]\n    for sensor_feature in sensor_features:\n        this = X[sensor_feature]\n        # look back\n        for lag in lags:\n            feature = f'{sensor_feature}_{abs(lag)}b'\n            this_f = X[sensor_feature].shift(lag)\n            X[feature] = (this_f - this).fillna(0)\n        # look forwards\n        for lag in lags:\n            feature = f'{sensor_feature}_{abs(-lag)}f'\n            this_f = X[sensor_feature].shift(-lag)\n            X[feature] = (this_f - this).fillna(0)\n            \n    return X","0e0f805b":"# The months will be used for folds split\nmonths = pd.Series(all_df.index.month[:len(train)])\n\nall_df[\"hour\"] = all_df.index.hour\nall_df['seconds'] = all_df['hour']*3600+all_df.index.minute*60+all_df.index.second\nall_df[\"working_hours\"] =  all_df[\"hour\"].isin(np.arange(8, 21, 1)).astype(\"int\")\nall_df['maximum_hours'] =  all_df['hour'].isin([8, 9, 17, 18, 19, 20]).astype('int')\nall_df[\"is_weekend\"] = (all_df.index.dayofweek >= 5).astype(\"int\")\nall_df['is_saturday'] = (all_df.index.dayofweek==5).astype(\"int\")\nall_df[\"SMC\"] = (all_df[\"absolute_humidity\"] * 100) \/ all_df[\"relative_humidity\"]\nall_df.drop(columns = 'hour', inplace = True)\n\nall_df = make_features(all_df.copy(), [[3, 6], [3, 6], [1]])\nall_df = pb_add(all_df.copy())","fc4ab69d":"features = [col for col in all_df.columns.tolist() if 'target_' not in col]\ntarget = [col for col in all_df.columns.tolist() if 'target_' in col]\n\npt = PowerTransformer(method='yeo-johnson', standardize=True)\nall_df[features] = pt.fit_transform(all_df[features])\n\nX = all_df[features][:len(train)].copy()\ny = np.log1p(all_df[target][:len(train)]).copy()\nX_test = all_df[features][len(train):]","706a0c57":"weights = {\n    'target_carbon_monoxide': [1.0, -0.3, 2.0, 0.7, 0.6, 0.4, -0.2],\n    'target_benzene': [1.0, -0.3, 2.0, 0.7, 0.6, 0.4, -0.2],\n    'target_nitrogen_oxides': [1.0, -0.3, 2.0, 0.7, 0.6, 0.4, -0.2],\n}","0a3a0087":"%%time\n\nn_splits = months.nunique()\n\nfor target in y.columns:\n    print(f\"===== {target} =====\")\n    \n    oof = np.zeros(X.shape[0])\n    pred = 0\n    logo = LeaveOneGroupOut()\n\n    for fold, (trn_idx, val_idx) in enumerate(logo.split(X, y, months)):\n        X_train, X_valid = X.iloc[trn_idx], X.iloc[val_idx]\n        y_train, y_valid = y.iloc[trn_idx][target], y.iloc[val_idx][target]\n        \n        model1 = lgb.LGBMRegressor(random_state=CFG['seed'], n_jobs=-1)\n        model2 = xgb.XGBRegressor(random_state=CFG['seed'], n_jobs=-1)\n        model3 = cbt.CatBoostRegressor(random_seed=CFG['seed'], verbose=False)\n        model4 = ExtraTreesRegressor(random_state=CFG['seed'], n_jobs=-1)\n        model5 = GradientBoostingRegressor(random_state=CFG['seed'])\n        model6 = RandomForestRegressor(random_state=CFG['seed'])\n        model7 = HistGradientBoostingRegressor(random_state=CFG['seed'])\n\n        model = VotingRegressor(\n            estimators=[\n                ('lgb', model1),\n                ('xgb', model2),\n                ('cbt', model3),\n                ('etr', model4),\n                ('gbr', model5),\n                ('rfr', model6),\n                ('hgb', model7)\n            ],\n            weights=weights[target],\n            n_jobs=-1,\n        )\n\n        model.fit(X_train, y_train)\n\n        pred += np.expm1(model.predict(X_test)) \/ n_splits\n        oof[val_idx] = model.predict(X_valid)\n        print(f\"FOLD {fold} rmsle {mean_squared_error(y_valid, oof[val_idx], squared=False):.6f}\")\n\n    print(\"-\"*40)\n    print(f\"rmsle {mean_squared_error(y[target], oof, squared=False):.6f}\")\n\n    submission[target] = pred","45293005":"submission.to_csv('submission.csv')\nsubmission","5b2b6237":"# VotingRegressor\n---","5c496838":"# Datasets\n---","f5d97898":"# Libraries\n---","014ceca0":"# Credits\n---\n[CatBoost_13Feature_Cross_Validation](https:\/\/www.kaggle.com\/andy6804tw\/catboost-13feature-cross-validation)  \n[CatBoost_14Feature_Cross_Validation + FE](https:\/\/www.kaggle.com\/paddykb\/catboost-14feature-cross-validation-fe)  ","3311cdc6":"# Feature engineering\n---","b7437412":"# Submission\n---"}}