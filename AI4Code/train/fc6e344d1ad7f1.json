{"cell_type":{"8ecc7447":"code","135e6917":"code","8ea5527d":"code","307525d6":"code","7970c1b5":"code","641a28d3":"code","d9e227b4":"code","ce03ccbc":"code","52ed4261":"code","3e74533a":"code","61645baf":"code","ec45017d":"code","5691959b":"code","84474158":"code","0371bf43":"code","c1062951":"code","ecd97f46":"code","c69a99f6":"code","1508ef13":"code","3dad93ee":"code","1a03a617":"code","3e86cc1f":"code","1cfc2935":"code","f7a82912":"code","3a0c5768":"code","0677a777":"code","55ad1fbd":"code","77bec8fc":"code","5369e7e6":"code","0661c0c1":"code","261f74ed":"code","dd1b8a27":"code","a8b5eae1":"code","cde9d9c2":"code","81f3b2aa":"code","926fea2f":"code","abb8444c":"code","9800dbd9":"code","b61a2431":"code","686c6084":"code","dbbc2026":"code","26741152":"code","395c08a6":"code","f17571ef":"code","379fa59c":"code","b326f40b":"code","d7a15802":"code","dde60b2d":"code","a2a9a9d9":"code","47df2f93":"code","ebb4ad62":"code","4ae57a57":"code","123b4cd8":"code","c318ee9a":"code","bb025450":"code","4a3737f2":"code","f499ebf8":"code","93537f11":"code","a43d9b89":"code","e087fd59":"code","626d19c5":"code","32409439":"code","ba72a19b":"code","2951a402":"code","41dce594":"code","fbae25fd":"code","f4da43ed":"code","7b83a9b2":"code","6b914c52":"code","783deccd":"code","39364fad":"code","4a55c685":"code","b4fc544e":"code","0169bfeb":"code","eb9ce98b":"code","e7bf80c7":"code","e1fd4f5e":"code","107909aa":"code","744df5b9":"code","6019e353":"code","eed9fcc5":"code","0ea5d981":"code","1639cc5e":"code","6bb9831d":"code","41152796":"code","c1c5560c":"code","befafef4":"code","de0801ee":"code","9eb7af70":"code","4af83345":"code","c3c826da":"code","9383070f":"code","d3a4a7ef":"code","e4770e22":"code","92242926":"code","509d863b":"code","e34802b6":"code","4bed1f24":"code","634b61c8":"code","5d147712":"code","0e57b6c6":"code","fb84001c":"code","e87de68a":"code","d1ebd227":"code","5666b31d":"code","9597c022":"code","86a4868b":"code","886b0c59":"code","f2b0c89e":"code","a563f105":"markdown","ca3fc59a":"markdown","e026aa2a":"markdown","94fc4d54":"markdown","56ce1d49":"markdown","a3200288":"markdown","101513b7":"markdown","a5745573":"markdown","ae818938":"markdown","fe43bae0":"markdown","d8bc26be":"markdown","3356257a":"markdown","5afdb619":"markdown","03087187":"markdown","4db043db":"markdown","549b270c":"markdown","12dbf39c":"markdown","e65e84a2":"markdown","a4e542cd":"markdown","9f2ea5d6":"markdown","a29d2024":"markdown","d899d599":"markdown","efa1d300":"markdown","bbcd64bf":"markdown","0a58213a":"markdown","bfb966d7":"markdown","dc4c285d":"markdown","1a3e1a25":"markdown","4fa54e68":"markdown","89bc9988":"markdown","657c30fd":"markdown","57b9d7ac":"markdown","142d0808":"markdown","aa354462":"markdown","dd0149ac":"markdown","c5ed4de0":"markdown","d1d3ad7e":"markdown","d97a3a67":"markdown","4398dbd3":"markdown","65fc6b0b":"markdown","7794a1b3":"markdown","411b4bae":"markdown","f899be7c":"markdown","9b9f920e":"markdown","7c93d831":"markdown","ce5ef4e7":"markdown","e7c44b8b":"markdown","ebe30b76":"markdown","fa086564":"markdown","71569985":"markdown","dadcf606":"markdown","5bad30bb":"markdown","facbc26d":"markdown","a8c8741c":"markdown","2d58f2e3":"markdown","16de7289":"markdown","c82f850c":"markdown","2933c41c":"markdown","a764b23b":"markdown","1f3b3900":"markdown","2ea500e7":"markdown","678e0779":"markdown","d17b5ff1":"markdown","ed530e4a":"markdown","369e53fd":"markdown","082dd671":"markdown","27e0584c":"markdown","dc2b93da":"markdown","fb85b2cd":"markdown","67daf717":"markdown","c49e4867":"markdown","78c2848c":"markdown","4400baa0":"markdown","a4a9c378":"markdown","e43c88d6":"markdown","173db63e":"markdown","ab671c0b":"markdown","876874d7":"markdown","6e41a41b":"markdown","662f0920":"markdown","8e506c58":"markdown","0e8fe925":"markdown","64a89e8a":"markdown","453e244d":"markdown","b141b0d6":"markdown","72c01774":"markdown","14571e20":"markdown","12dfcb9d":"markdown","465c7490":"markdown","cd6cba7b":"markdown","d52ba9b9":"markdown","3666be90":"markdown","f162f6b5":"markdown","b35f06e5":"markdown","ed77131a":"markdown","f38a9ef7":"markdown","833d8b3d":"markdown","e1f9780c":"markdown","8ab4170c":"markdown","6531cc71":"markdown","cd3330b0":"markdown","023cb208":"markdown","d487e4bc":"markdown","7a64ebdf":"markdown","b6ab5b9e":"markdown","b7e78922":"markdown","24e20037":"markdown"},"source":{"8ecc7447":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport plotly\nfrom plotly.offline import iplot,init_notebook_mode\nimport plotly.graph_objs as go\ninit_notebook_mode(connected=True)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n# Read the files into dataframe\nlistings = pd.read_csv(\"..\/input\/listings.csv\")\nreviews = pd.read_csv(\"..\/input\/reviews.csv\")\ncalendar = pd.read_csv(\"..\/input\/calendar.csv\")\n\n# Any results you write to the current directory are saved as output.","135e6917":"# Print info of listings\nprint(listings.info())\n# Preview of listings\nlistings.head()","8ea5527d":"reviews.sample(10)","307525d6":"# \"Host_Since\": converted from \"host_since\"\n# https:\/\/chrisalbon.com\/python\/basics\/strings_to_datetime\/\nfrom datetime import datetime, timedelta\nlistings[\"Host_Since\"] = pd.to_datetime(listings[\"host_since\"])\n\n# \"Listing_Age\"\n# https:\/\/stackoverflow.com\/questions\/42521107\/python-pandas-find-number-of-years-between-two-dates\nlistings[\"today\"] = pd.to_datetime(\"2019-02-11\")\nlistings[\"Hosting_Age\"] = np.round(((listings[\"today\"]- listings[\"Host_Since\"])\/timedelta(days=365)),2)\n\n# \"Host_Since_Year\": Extracted from \"Host_Since\"\n# https:\/\/stackoverflow.com\/questions\/30405413\/python-pandas-extract-year-from-datetime-dfyear-dfdate-year-is-not\/33757291\nlistings[\"Host_Since_Year\"] = listings[\"Host_Since\"].dt.year\n\n# \"Host_Since_Year_Month\": Extracted from \"Host_Since\"\n# https:\/\/datatofish.com\/concatenate-values-python\/\nlistings[\"Host_Since_Year_Month\"] = (listings[\"Host_Since\"].dt.year).map(str) + \"-\" + (listings[\"Host_Since\"].dt.month).map(str)\nlistings[\"Host_Since_Year_Month\"] = pd.to_datetime(listings[\"Host_Since_Year_Month\"])","7970c1b5":"# Description of \"id\"\nprint(\"Description of id\\n\",listings[\"id\"].describe())\n\nprint(\"-\"*25)\n# Calculate number of unique listings\nprint(\"Number of unique listings:\",listings[\"id\"].nunique())","641a28d3":"# Calculate unique number of listings group by \"neighbourhood_cleansed\"\ndistric_listings = listings[\"id\"].groupby(listings[\"neighbourhood_cleansed\"]).nunique()\ndis_listings = pd.DataFrame(distric_listings)\n\n# Convert index of a pandas dataframe into a column \n# https:\/\/stackoverflow.com\/questions\/20461165\/how-to-convert-index-of-a-pandas-dataframe-into-a-column\ndis_listings.reset_index(level=0, inplace=True) \ndis_listings","d9e227b4":"# Barchart of unique listings in each district\ntrace = go.Bar(\n                x = dis_listings.neighbourhood_cleansed,\n                y = dis_listings.id,\n                name = \"Num of listings\",\n                marker = dict(color = 'rgba(255, 14, 5, 1.0)'),\n                text = dis_listings.neighbourhood_cleansed)\n\nlayout = go.Layout(xaxis= dict(zeroline=False),\n                   yaxis= dict(title= 'Num of listings'),\n                   barmode=\"group\",# barmode=\"relative\"\n                   title = 'Number of Airbnb Beijing listings by district') \n\n# Convert trace(plotly.graph_objs._bar.Bar) to a list \ndata = [trace] \nfig = go.Figure(data=data,layout=layout)\niplot(fig)","ce03ccbc":"# Print the frequency of multi-listings\n(listings[\"calculated_host_listings_count\"]>1).value_counts()","52ed4261":"print(\"Number of unique hosts:\",listings[\"host_id\"].nunique())","3e74533a":"# Calculate number of unique hosts in different districts\ndistrict_hosts = listings[\"host_id\"].groupby(listings[\"neighbourhood_cleansed\"]).nunique()\ndis_hosts = pd.DataFrame(district_hosts)\ndis_hosts.reset_index(level=0,inplace=True)\ndis_hosts.head()","61645baf":"# Plot bar chart of unique hosts by district\ntrace = go.Bar(x=dis_hosts.neighbourhood_cleansed,\n               y=dis_hosts.host_id,\n               marker=dict(color=\"rgba(50,255,255,1.0)\"),\n               text=dis_hosts.neighbourhood_cleansed)\n        \nlayout = go.Layout(xaxis= dict(zeroline=False),\n                   yaxis= dict(title= 'Num of hosts',zeroline=False),\n                   barmode=\"group\",# barmode=\"relative\"\n                   title = 'Number of Airbnb Beijing hosts by district') \n                \ndata = [trace]\nfig = go.Figure(data=data,layout=layout)\niplot(fig)","ec45017d":"# Calculate the number of listings each host have\nhost_listing = pd.DataFrame(listings[\"calculated_host_listings_count\"].groupby(listings[\"host_id\"]).count())\nhost_listing = host_listing.reset_index()\nhost_listing.sort_values(by=\"calculated_host_listings_count\",ascending=False).head(10)","5691959b":"# Generate new feature host_group representing which group the host is in according to the listings they own.\n# https:\/\/datatofish.com\/if-condition-in-pandas-dataframe\/\n# To combine filtering conditions in Pandas, use bitwise operators ('&' and '|') not pure Python ones ('and' and 'or')\nhost_listing.loc[host_listing.calculated_host_listings_count<2,\"host_group\"]=\"1\"\nhost_listing.loc[(host_listing.calculated_host_listings_count>=2) & (host_listing.calculated_host_listings_count<5) ,\"host_group\"]=\"2-4\"\nhost_listing.loc[(host_listing.calculated_host_listings_count>=5) & (host_listing.calculated_host_listings_count<10) ,\"host_group\"]=\"5-9\"\nhost_listing.loc[(host_listing.calculated_host_listings_count>=10) & (host_listing.calculated_host_listings_count<20) ,\"host_group\"]=\"10-19\"\nhost_listing.loc[(host_listing.calculated_host_listings_count>=20) & (host_listing.calculated_host_listings_count<30) ,\"host_group\"]=\"20-29\"\nhost_listing.loc[(host_listing.calculated_host_listings_count>=30) & (host_listing.calculated_host_listings_count<40) ,\"host_group\"]=\"30-39\"\nhost_listing.loc[(host_listing.calculated_host_listings_count>=40) & (host_listing.calculated_host_listings_count<50) ,\"host_group\"]=\"40-49\"\nhost_listing.loc[(host_listing.calculated_host_listings_count>=50) & (host_listing.calculated_host_listings_count<100) ,\"host_group\"]=\"50-99\"\nhost_listing.loc[(host_listing.calculated_host_listings_count>=100) & (host_listing.calculated_host_listings_count<=222) ,\"host_group\"]=\"100-222\"","84474158":"group = pd.DataFrame(host_listing[\"host_group\"].value_counts())\ngroup = group.reset_index()\n\ntrace = go.Bar(x=group.host_group,\n               y=group[\"index\"],\n               marker=dict(color=\"orange\"),\n               orientation=\"h\",\n               name=\"Num of hosts\",\n               text=group[\"index\"])\n\nlayout = go.Layout(title=\"Number of hosts in each listing number group\",\n                   xaxis=dict(title=\"Number of hosts\"),\n                   yaxis=dict(title=\"Group\"))\n\ndata=[trace]\nfig = go.Figure(data=data,layout=layout)\n        \niplot(fig)","0371bf43":"(host_listing[\"calculated_host_listings_count\"]>1).value_counts()","c1062951":"print(\"Number of superhosts\",listings[listings[\"host_is_superhost\"]==\"t\"][\"host_id\"].nunique())\nprint(\"Number of listings from superhosts\",listings[listings[\"host_is_superhost\"]==\"t\"][\"id\"].nunique())","ecd97f46":"super_listings=pd.DataFrame(listings[listings[\"host_is_superhost\"]==\"t\"][\"id\"].groupby(listings.neighbourhood_cleansed).nunique())\nsuper_listings=super_listings.reset_index()\nnonsuper_listings=pd.DataFrame(listings[listings[\"host_is_superhost\"]==\"f\"][\"id\"].groupby(listings.neighbourhood_cleansed).nunique())\nnonsuper_listings=nonsuper_listings.reset_index()","c69a99f6":"trace1 = go.Bar(x=list(super_listings.neighbourhood_cleansed),\n                y=list(super_listings.id),\n                name=\"super listings\")\ntrace2 = go.Bar(x=list(nonsuper_listings.neighbourhood_cleansed),\n                y=list(nonsuper_listings.id),\n                name=\"unsuper listings\")\n\ndata = [trace1,trace2]\n\nlayout = go.Layout(xaxis = dict(zeroline=False),\n                   yaxis = dict(title=\"Num of listings\"),\n                   barmode = \"stack\",\n                   title = \"Distribution of super\/unsuper listings by district in Airbnb Beijing\")\nfig = go.Figure(data=data,layout=layout)\niplot(fig)","1508ef13":"print(listings[\"room_type\"].nunique())\nprint(listings[\"room_type\"].value_counts())","3dad93ee":"# How do room type distribute in different districts?\ndis_roomtype = listings[\"id\"].groupby([listings[\"neighbourhood_cleansed\"],listings[\"room_type\"]]).nunique()\ndis_roomtype = pd.DataFrame(dis_roomtype)\nnew_dis_roomtype = dis_roomtype.reset_index()\nnew_dis_roomtype","1a03a617":"# Pie chart of room type\ntrace = go.Pie(values=listings[\"room_type\"].value_counts(),\n               labels=[\"Entire home\/apt\",\"Private room\",\"Shared room\"])\nlayout = go.Layout(title=\"Percentage of room type in Airbnb Beijing\")\nfig = go.Figure([trace],layout)\niplot(fig)","3e86cc1f":"listings[\"accommodates\"].describe()","1cfc2935":"# Plot a histogram of accommodates\ntrace = go.Histogram(x=listings[\"accommodates\"],\n                     marker=dict(color=\"#ff3399\"))\n\nlayout = go.Layout(xaxis=dict(title=\"Accommodates\"),\n                   yaxis=dict(title=\"Num of accommodates\"),\n                   title=\"Histogram of accommodates\")\ndata = [trace]\nfig = go.Figure(data=data,layout=layout)\niplot(fig)","f7a82912":"a=listings[listings[\"room_type\"]=='Entire home\/apt']\nb=listings[listings[\"room_type\"]=='Private room']\n# Plot a histogram of accommodates\ntrace = go.Histogram(x=a[\"accommodates\"],\n                     marker=dict(color=\"#ff3399\"))\n\nlayout = go.Layout(xaxis=dict(title=\"Accommodates\"),\n                   yaxis=dict(title=\"Num of accommodates\"),\n                   title=\"Histogram of accommodates\")\ndata = [trace]\nfig = go.Figure(data=data,layout=layout)\niplot(fig)","3a0c5768":"print(listings[\"bathrooms\"].describe())\nprint(listings[\"bathrooms\"].value_counts())","0677a777":"# Plot a histogram of bathrooms\ntrace = go.Histogram(x=listings[\"bathrooms\"],\n                     marker=dict(color=\"#ff9900\"))\n\nlayout = go.Layout(xaxis=dict(title=\"Bathrooms\"),\n                   yaxis=dict(title=\"Num of bathrooms\"),\n                   title=\"Histogram of bathrooms\")\ndata = [trace]\nfig = go.Figure(data=data,layout=layout)\niplot(fig)","55ad1fbd":"# Divivde bathrooms into 2 groups, bathroom = 1 or bathroom >1\nlistings.loc[listings[\"bathrooms\"]<1,\"Bathroom\"]=\"1-\"\nlistings.loc[listings[\"bathrooms\"]==1,\"Bathroom\"]=\"1\"\nlistings.loc[listings[\"bathrooms\"]>1,\"Bathroom\"]=\"1+\"","77bec8fc":"listings[\"Bathroom\"].value_counts()","5369e7e6":"listings[\"bedrooms\"].describe()","0661c0c1":"listings[\"bedrooms\"].value_counts()","261f74ed":"# Plot a histogram of bathrooms\ntrace = go.Histogram(x=listings[\"bedrooms\"],\n                     marker=dict(color=\"#ff9900\"))\n\nlayout = go.Layout(xaxis=dict(title=\"Bedrooms\"),\n                   yaxis=dict(title=\"Num of bedrooms\"),\n                   title=\"Histogram of bedrooms\")\ndata = [trace]\nfig = go.Figure(data=data,layout=layout)\niplot(fig)","dd1b8a27":"listings[\"beds\"].describe()","a8b5eae1":"listings[\"beds\"].value_counts()","cde9d9c2":"# Plot a histogram of beds\ntrace = go.Histogram(x=listings[\"beds\"],\n                     marker=dict(color=\"#ff9900\"))\n\nlayout = go.Layout(xaxis=dict(title=\"Beds\"),\n                   yaxis=dict(title=\"Num of beds\"),\n                   title=\"Histogram of beds\")\ndata = [trace]\nfig = go.Figure(data=data,layout=layout)\niplot(fig)","81f3b2aa":"listings[[\"id\",\"availability_30\"]]","926fea2f":"print(\"Description of availability\",listings[\"availability_365\"].describe())\nprint(\"Available more than half a year\\n\",(listings[\"availability_365\"]>60).value_counts())","abb8444c":"# Plot a histogram of availability_365\ntrace = go.Histogram(x=listings[\"bedrooms\"],\n                     marker=dict(color=\"#ff9900\"))\n\nlayout = go.Layout(xaxis=dict(title=\"Bedrooms\"),\n                   yaxis=dict(title=\"Num of bedrooms\"),\n                   title=\"Histogram of bedrooms\")\ndata = [trace]\nfig = go.Figure(data=data,layout=layout)\niplot(fig)","9800dbd9":"listings[[\"security_deposit\"]].head(100)","b61a2431":"listings[[\"amenities\"]].head()","686c6084":"listings[\"number_of_reviews\"].describe()","dbbc2026":"listings[\"Hosting_Age\"].describe()","26741152":"# Draw a histogram to show the distribution of listing age\ntrace = go.Histogram(x=listings[\"Hosting_Age\"],\n                     xbins=dict(start=0,end=9,size=0.5),\n                     marker=dict(color=\"gold\"))\nlayout = go.Layout(xaxis=dict(title=\"Hosting_Age\"),\n                   yaxis=dict(title=\"Frequency\"),\n                   title=\"Distribution of Listing Age in Airbnb Beijing\")\ndata=[trace]\nfig = go.Figure(data=data,layout=layout)\niplot(fig)\n","395c08a6":"mean_age = pd.DataFrame(listings[\"Hosting_Age\"].groupby(listings[\"neighbourhood_cleansed\"]).mean())\nmean_age = mean_age.reset_index()","f17571ef":"# Plot bar chart of unique hosts by district\ntrace = go.Bar(x=mean_age[\"neighbourhood_cleansed\"],\n               y=mean_age[\"Hosting_Age\"],\n               marker=dict(color='pink'))\n        \nlayout = go.Layout(xaxis= dict(zeroline=False),\n                   yaxis= dict(title= 'Mean Age',zeroline=False),\n                   barmode=\"group\",# barmode=\"relative\"\n                   title = 'Mean Age of hosting by district') \n                \ndata = [trace]\nfig = go.Figure(data=data,layout=layout)\niplot(fig)","379fa59c":"trace1 = go.Bar(x=new_dis_roomtype[new_dis_roomtype[\"room_type\"]==\"Entire home\/apt\"].neighbourhood_cleansed,\n                y=new_dis_roomtype[new_dis_roomtype[\"room_type\"]==\"Entire home\/apt\"].id,\n                name=\"Entire home\/apt\")\ntrace2 = go.Bar(x=new_dis_roomtype[new_dis_roomtype[\"room_type\"]==\"Private room\"].neighbourhood_cleansed,\n                y=new_dis_roomtype[new_dis_roomtype[\"room_type\"]==\"Private room\"].id,\n                name=\"Private room\")\ntrace3 = go.Bar(x=new_dis_roomtype[new_dis_roomtype[\"room_type\"]==\"Shared room\"].neighbourhood_cleansed,\n                y=new_dis_roomtype[new_dis_roomtype[\"room_type\"]==\"Shared room\"].id,\n                name=\"Shared room\")\n\ndata = [trace1,trace2,trace3]\n\nlayout = go.Layout(xaxis = dict(zeroline=False),\n                   yaxis = dict(title=\"Num of listings\"),\n                   barmode = \"stack\",\n                   title = \"Distribution of room types by district in Airbnb Beijing\")\nfig = go.Figure(data=data,layout=layout)\niplot(fig)","b326f40b":"# \"Price\": price per night for number of included guests\n# https:\/\/stackoverflow.com\/questions\/42192323\/convert-pandas-dataframe-to-float-with-commas-and-negative-numbers\nlistings[\"Price\"] = listings.price.str.strip('$') # Why the scale of price is USD?\nlistings[\"Price\"] = listings.Price.str.replace(',','')\nlistings[\"Price\"] = pd.to_numeric(listings.Price,errors='coerce')\nlistings[\"Price\"].describe()\n\n# Security_deposit: another continous value assiociated with the cost\nlistings[\"Security_deposit\"] = listings.security_deposit.str.strip('$') \nlistings[\"Security_deposit\"] = listings.security_deposit.str.replace(',','')\nlistings[\"Security_deposit\"] = pd.to_numeric(listings.Security_deposit,errors='coerce')\nlistings[\"Security_deposit\"].describe()\n\n# Cleaning_fee: additional cost at the top of rent\nlistings[\"Cleaning_fee\"] = listings.cleaning_fee.str.strip('$') \nlistings[\"Cleaning_fee\"] = listings.cleaning_fee.str.replace(',','')\nlistings[\"Cleaning_fee\"] = pd.to_numeric(listings.Cleaning_fee,errors='coerce')\nlistings[\"Cleaning_fee\"].describe()\n\n# Extra_people: cost of additional person per night\nlistings[\"Extra_people\"] = listings.extra_people.str.strip('$') \nlistings[\"Extra_people\"] = listings.extra_people.str.replace(',','')\nlistings[\"Extra_people\"] = pd.to_numeric(listings.Extra_people,errors='coerce')\nlistings[\"Extra_people\"].describe()\n\n# Extra_people: cost of additional person per night\nlistings[\"Extra_people\"] = listings.extra_people.str.strip('$') \nlistings[\"Extra_people\"] = listings.extra_people.str.replace(',','')\nlistings[\"Extra_people\"] = pd.to_numeric(listings.Extra_people,errors='coerce')\nlistings[\"Extra_people\"].describe()","d7a15802":"# When is the earliest and latest listing in Beijing Airbnb data?\nprint(listings[\"Host_Since\"].min())\nprint(listings[\"Host_Since\"].max())","dde60b2d":"# Count unique numbers of listings Groupby \"Host_Since_Year\"\nlistings_year = pd.DataFrame(listings[\"id\"].groupby(listings[\"Host_Since_Year\"]).nunique())\nlistings_year = listings_year.reset_index()\n\n# Compute Cumulative Sum by date (year)\n# https:\/\/stackoverflow.com\/questions\/42691405\/cumulative-sum-by-date-month\nlistings_year[\"year_cumsum\"] = listings_year[\"id\"].cumsum()","a2a9a9d9":"# Draw a line to show the number of increased listings vs years since 2010\ntrace = go.Scatter(x=listings_year[\"Host_Since_Year\"],\n                   y=listings_year[\"id\"],\n                   mode = \"lines+markers\",\n                   name=\"Num of listings\",\n                   marker = dict(color = \"blue\"),\n                   text= listings_year.Host_Since_Year)\n\nlayout = go.Layout(xaxis=dict(title=\"Year\",zeroline=False),\n                   yaxis=dict(title=\"Num of listings\",zeroline=False,),\n                   title=\"Number of new listings in each year since 2010 in Airbnb Beijing\")\ndata=[trace]\nfig = go.Figure(data=data,layout=layout)\niplot(fig)","47df2f93":"# Calculate number of listings in each month period\nlistings_month = pd.DataFrame(listings[\"id\"].groupby(listings[\"Host_Since_Year_Month\"]).nunique())\nlistings_month = listings_month.reset_index()\nlistings_month[\"month_cumsum\"] = listings_month[\"id\"].cumsum()","ebb4ad62":"# Draw a line to show the increased number of listings vs months since 2010-08\ntrace = go.Scatter(x=listings_month[\"Host_Since_Year_Month\"],\n                   y=listings_month[\"id\"],\n                   mode = \"lines+markers\",\n                   name=\"Num of new listings\",\n                   marker = dict(color = 'purple'))\n\nlayout = go.Layout(xaxis=dict(title=\"Year-Month\",zeroline=False),\n                   yaxis=dict(title=\"Num of listings\",zeroline=False,),\n                   title=\"Number of new listings vs month in Airbnb Beijing\")\ndata=[trace]\nfig = go.Figure(data=data,layout=layout)\niplot(fig)","4ae57a57":"# Draw a line to show the number of accumulative listings vs years since 2010\ntrace = go.Scatter(x=listings_year[\"Host_Since_Year\"],\n                   y=listings_year[\"year_cumsum\"],\n                   mode = \"lines+markers\",\n                   name=\"Num of listings\",\n                   marker = dict(color = \"rgba(255, 112, 2, 1.0)\"),\n                   text= listings_year.Host_Since_Year)\n\nlayout = go.Layout(xaxis=dict(title=\"Year\",zeroline=False),\n                   yaxis=dict(title=\"Accumulative sum of listings\",zeroline=False,),\n                   title=\"Accumulative number of listings year by year since 2010 in Airbnb Beijing\")\ndata=[trace]\nfig = go.Figure(data=data,layout=layout)\niplot(fig)","123b4cd8":"# Draw 2 lines to show the number of new listings and totoal number of listings vs years since 2010\ntrace1 = go.Scatter(x=listings_year[\"Host_Since_Year\"],\n                   y=listings_year[\"id\"],\n                   mode = \"lines+markers\",\n                   name=\"Num of new listings\",\n                   marker = dict(color = \"blue\"),\n                   text= listings_year.Host_Since_Year)\n\ntrace2 = go.Scatter(x=listings_year[\"Host_Since_Year\"],\n                   y=listings_year[\"year_cumsum\"],\n                   mode = \"lines+markers\",\n                   name=\"Num of total listings\",\n                   marker=dict(color=\"rgba(255, 112, 2, 1.0)\"),\n                   text= listings_year.Host_Since_Year)\n\nlayout = go.Layout(xaxis=dict(title=\"Year\",zeroline=False),\n                   yaxis=dict(title=\"Num of listings\",zeroline=False,),\n                   title=\"Number of new listings and total listings since 2010 in Airbnb Beijing\")\ndata=[trace1,trace2]\nfig = go.Figure(data=data,layout=layout)\niplot(fig)","c318ee9a":"# Count unique numbers of listings Groupby \"Host_Since_Year\" and \"neighbourhood_cleansed\".\n# https:\/\/chrisalbon.com\/python\/data_wrangling\/pandas_apply_operations_to_groups\/\nlistings_dis_year = pd.DataFrame(listings[\"id\"].groupby([listings[\"neighbourhood_cleansed\"],listings[\"Host_Since_Year\"]]).nunique())\nlistings_dis_year = listings_dis_year.reset_index()","bb025450":"listings_dis_year","4a3737f2":"dis =  listings_dis_year[\"neighbourhood_cleansed\"].unique()\ncolors = [\"blue\",\"red\",\"yellow\",\"green\",\"pink\",\"grey\",\"black\",\n          \"#ff99ff\",\"#3399ff\",\"#0099cc\",\"#cc9900\",\"#ff3399\",\"#ff6600\",\"#009900\",\"#99cc00\",\"#ff9900\"]\n\ndef traces(a,df,column,colors):\n    data = []\n    for i in range(len(a)):\n        trace = go.Scatter(x=df[df[\"neighbourhood_cleansed\"]==a[i]].Host_Since_Year,\n                           y=df[df[\"neighbourhood_cleansed\"]==a[i]][column],\n                           mode = \"lines+markers\",\n                           name=a[i],\n                           marker = dict(color = colors[i]))\n        data.append(trace)\n    return data\n\ndata =traces(dis,listings_dis_year,\"id\",colors)\n\nlayout = go.Layout(xaxis=dict(title=\"Year\",zeroline=False),\n                   yaxis=dict(title=\"Num of listings\",zeroline=False,),\n                   title=\"Number of new listings by Year and by Geo in Airbnb Beijing\")\n\nfig = go.Figure(data=data,layout=layout)\niplot(fig)","f499ebf8":"reviews.info()","93537f11":"print(\"Number of unique reviews:\",reviews[\"id\"].nunique())\nprint(\"Number of unique listings with:\",reviews[\"listing_id\"].nunique())","a43d9b89":"reviews[reviews[\"reviewer_name\"].isnull()]","e087fd59":"reviews[reviews[\"comments\"].isnull()]","626d19c5":"# \"date\": converted from str type \"date\" to datetime type \"date\"\n# https:\/\/chrisalbon.com\/python\/basics\/strings_to_datetime\/\nfrom datetime import datetime, timedelta\nreviews[\"Date\"] = pd.to_datetime(reviews[\"date\"])","32409439":"# \"date_year\": Extracted from \"date\"\n# https:\/\/stackoverflow.com\/questions\/30405413\/python-pandas-extract-year-from-datetime-dfyear-dfdate-year-is-not\/33757291\nreviews[\"date_year\"] = reviews[\"Date\"].dt.year\n\n# \"date_year_month\": Extracted from \"date\"\n# https:\/\/datatofish.com\/concatenate-values-python\/\nreviews[\"date_year_month\"] = (reviews[\"Date\"].dt.year).map(str) + \"-\" + (reviews[\"Date\"].dt.month).map(str)\nreviews[\"date_year_month\"] = pd.to_datetime(reviews[\"date_year_month\"])","ba72a19b":"reviews.head()","2951a402":"# Count unique numbers of reviews Groupby \"date_year\"\nreview_year = pd.DataFrame(reviews[\"id\"].groupby(reviews[\"date_year\"]).nunique())\nreview_year = review_year.reset_index()\n\n# Compute Cumulative Sum by date (year)\n# https:\/\/stackoverflow.com\/questions\/42691405\/cumulative-sum-by-date-month\nreview_year[\"year_cumsum\"] = review_year[\"id\"].cumsum()\nreview_year","41dce594":"# Draw a line to show the number of new reviews by year since 2010\ntrace = go.Scatter(x=review_year[\"date_year\"],\n                   y=review_year[\"id\"],\n                   mode = \"lines+markers\",\n                   name=\"Num of reviews\",\n                   marker = dict(color = \"#ff8c66\"),\n                   text= review_year.date_year)\n\nlayout = go.Layout(xaxis=dict(title=\"Year\",zeroline=False),\n                   yaxis=dict(title=\"Num of reviews\",zeroline=False,),\n                   title=\"Number of new reviews in each year since 2010 in Airbnb Beijing\")\ndata=[trace]\nfig = go.Figure(data=data,layout=layout)\niplot(fig)","fbae25fd":"# Let's combine listing supply and demand together\ntrace1 = go.Scatter(x=review_year[\"date_year\"],\n                   y=review_year[\"id\"],\n                   mode = \"lines+markers\",\n                   name=\"Num of new reviews\",\n                   marker = dict(color = \"#ff8c66\"),\n                   text= review_year.date_year)\n\ntrace2 = go.Scatter(x=listings_year[\"Host_Since_Year\"],\n                   y=listings_year[\"id\"],\n                   mode = \"lines+markers\",\n                   name=\"Num of new listings\",\n                   marker = dict(color = \"blue\"),\n                   text= listings_year.Host_Since_Year)\n\nlayout = go.Layout(xaxis=dict(title=\"Year\",zeroline=False),\n                   yaxis=dict(title=\"Num of reviews\",zeroline=False,),\n                   title=\"Number of new reviews vs listings in each year since 2010 in Airbnb Beijing\")\n\ndata=[trace1,trace2]\nfig = go.Figure(data=data,layout=layout)\niplot(fig)","f4da43ed":"# Draw a line to show the number of total reviews by year since 2010\ntrace = go.Scatter(x=review_year[\"date_year\"],\n                   y=review_year[\"year_cumsum\"],\n                   mode = \"lines+markers\",\n                   name=\"Num of reviews\",\n                   marker = dict(color = \"#cc33ff\"),\n                   text= review_year.date_year)\n\nlayout = go.Layout(xaxis=dict(title=\"Year\",zeroline=False),\n                   yaxis=dict(title=\"Num of reviews\",zeroline=False,),\n                   title=\"Number of total reviews until each year since 2010 in Airbnb Beijing\")\ndata=[trace]\nfig = go.Figure(data=data,layout=layout)\niplot(fig)","7b83a9b2":"# Let's combine total listing supply and demand together\ntrace1 = go.Scatter(x=review_year[\"date_year\"],\n                   y=review_year[\"year_cumsum\"],\n                   mode = \"lines+markers\",\n                   name=\"Num of new reviews\",\n                   marker = dict(color = \"#cc33ff\"),\n                   text= review_year.date_year)\n\ntrace2 = go.Scatter(x=listings_year[\"Host_Since_Year\"],\n                   y=listings_year[\"year_cumsum\"],\n                   mode = \"lines+markers\",\n                   name=\"Num of new listings\",\n                   marker = dict(color = \"blue\"),\n                   text= listings_year.Host_Since_Year)\n\nlayout = go.Layout(xaxis=dict(title=\"Year\",zeroline=False),\n                   yaxis=dict(title=\"Num of reviews\",zeroline=False,),\n                   title=\"Number of total reviews vs listings until each year since 2010 in Airbnb Beijing\")\n\ndata=[trace1,trace2]\nfig = go.Figure(data=data,layout=layout)\niplot(fig)","6b914c52":"# Break down into months\n# Count unique numbers of reviews Groupby \"date_year_month\"\nreview_month = pd.DataFrame(reviews[\"id\"].groupby(reviews[\"date_year_month\"]).nunique())\nreview_month = review_month.reset_index()\n\n# Compute Cumulative Sum by date (year)\n# https:\/\/stackoverflow.com\/questions\/42691405\/cumulative-sum-by-date-month\nreview_month[\"month_cumsum\"] = review_month[\"id\"].cumsum()\nreview_month","783deccd":"# Draw a line to show the number of new reviews by month since 2010\ntrace = go.Scatter(x=review_month[\"date_year_month\"],\n                   y=review_month[\"id\"],\n                   mode = \"lines+markers\",\n                   name=\"Num of reviews\",\n                   marker = dict(color = \"#33cc33\"),\n                   text= review_month.date_year_month)\n\nlayout = go.Layout(xaxis=dict(title=\"Year\",zeroline=False),\n                   yaxis=dict(title=\"Num of reviews\",zeroline=False,),\n                   title=\"Number of new reviews in each month since 2010 in Airbnb Beijing\")\ndata=[trace]\nfig = go.Figure(data=data,layout=layout)\niplot(fig)","39364fad":"# Let's combine listing supply and demand together\ntrace1 = go.Scatter(x=review_month[\"date_year_month\"],\n                   y=review_month[\"id\"],\n                   mode = \"lines+markers\",\n                   name=\"Num of new reviews\",\n                   marker = dict(color = \"#ff8c66\"),\n                   text= review_month.date_year_month)\n\ntrace2 = go.Scatter(x=listings_month[\"Host_Since_Year_Month\"],\n                   y=listings_month[\"id\"],\n                   mode = \"lines+markers\",\n                   name=\"Num of new listings\",\n                   marker = dict(color = \"blue\"),\n                   text= listings_month.Host_Since_Year_Month)\n\nlayout = go.Layout(xaxis=dict(title=\"Year\",zeroline=False),\n                   yaxis=dict(title=\"Num of reviews\",zeroline=False,),\n                   title=\"Number of total reviews vs listings in each year since 2010 in Airbnb Beijing\")\n\ndata=[trace1,trace2]\nfig = go.Figure(data=data,layout=layout)\niplot(fig)","4a55c685":"# Draw a line to show the number of total reviews by month since 2010\ntrace = go.Scatter(x=review_month[\"date_year_month\"],\n                   y=review_month[\"id\"],\n                   mode = \"lines+markers\",\n                   name=\"Num of reviews\",\n                   marker = dict(color = \"#339933\"),\n                   text= review_month.date_year_month)\n\nlayout = go.Layout(xaxis=dict(title=\"Year\",zeroline=False),\n                   yaxis=dict(title=\"Num of reviews\",zeroline=False,),\n                   title=\"Number of total reviews until each month since 2010 in Airbnb Beijing\")\ndata=[trace]\nfig = go.Figure(data=data,layout=layout)\niplot(fig)","b4fc544e":"# Let's combine listing supply and demand together\ntrace1 = go.Scatter(x=review_month[\"date_year_month\"],\n                    y=review_month[\"month_cumsum\"],\n                    mode = \"lines+markers\",\n                    name=\"Num of total reviews\",\n                    marker = dict(color = \"#ff8c66\"),\n                    text= review_month.date_year_month)\n\ntrace2 = go.Scatter(x=listings_month[\"Host_Since_Year_Month\"],\n                    y=listings_month[\"month_cumsum\"],\n                    mode = \"lines+markers\",\n                    name=\"Num of total listings\",\n                    marker = dict(color = \"blue\"),\n                    text= listings_month.Host_Since_Year_Month)\n\nlayout = go.Layout(xaxis=dict(title=\"Year\",zeroline=False),\n                   yaxis=dict(title=\"Num of reviews\",zeroline=False,),\n                   title=\"Number of total reviews vs listings in each year since 2010 in Airbnb Beijing\")\n\ndata=[trace1,trace2]\nfig = go.Figure(data=data,layout=layout)\niplot(fig)","0169bfeb":"print(\"Description of Price\\n\",listings[\"Price\"].describe())\nprint(listings[\"Price\"].isnull().sum())","eb9ce98b":"# Plot a histogram of price\ntrace = go.Histogram(x=listings[\"Price\"],\n                     marker=dict(color=\"green\"))\n\nlayout = go.Layout(xaxis=dict(title=\"Price\"),\n                   yaxis=dict(title=\"Num of Listings\"),\n                   title=\"Histogram of Price\")\ndata = [trace]\nfig = go.Figure(data=data,layout=layout)\niplot(fig)","e7bf80c7":"# Let calculate the Natural logarithmic value of price\ntrace = go.Histogram(x=np.log(listings['Price']),\n                     marker=dict(color=\"green\"))\nlayout = go.Layout(xaxis=dict(title=\"Log_Price\"),\n                   yaxis=dict(title=\"Num of Listings\"),\n                   title=\"Histogram of Log Price\")\ndata = [trace]\nfig = go.Figure(data=data,layout=layout)\niplot(fig)","e1fd4f5e":"print(\"Median price of each district:\",listings.Price.groupby(listings.neighbourhood_cleansed).median())","107909aa":"# Draw a box plot showing the distribution of room price in each district\ntrace = go.Box(x=listings.neighbourhood_cleansed,\n               y=listings.Price,\n               name=\"Price\",\n               marker = dict(color = 'rgb(122, 12, 240)'))\n\nlayout = go.Layout(xaxis=dict(zeroline=False),\n                   yaxis=dict(title=\"Price(\u00a5)\"),\n                   title=\"Box chart of room price by district in Airbnb Beijing\")\n\ndata = [trace]\nfig = go.Figure(data=data,layout=layout)\niplot(fig)","744df5b9":"# Draw a box plot showing the distribution of room price in each type\ntrace = go.Box(x=listings.room_type,\n               y=listings.Price,\n               name=\"Price\",\n               marker = dict(color = 'rgba(3, 255, 240,1.0)'))\n\nlayout = go.Layout(xaxis=dict(zeroline=False),\n                   yaxis=dict(title=\"Price(\u00a5)\"),\n                   title=\"Box chart of room price by room type in Airbnb Beijing\")\n\ndata = [trace]\nfig = go.Figure(data=data,layout=layout)\niplot(fig)","6019e353":"price = listings[[\"id\",\"neighbourhood_cleansed\",\"host_is_superhost\",\n                  \"room_type\",\"accommodates\",\"bathrooms\",\"bedrooms\",\"beds\",\n                  \"review_scores_rating\",\"review_scores_accuracy\",\"review_scores_cleanliness\",\"review_scores_checkin\",\"review_scores_communication\",\"review_scores_location\",\n                  \"review_scores_value\",\n                  \"number_of_reviews\",\"Price\"]]\nprice.head()","eed9fcc5":"import plotly.figure_factory as ff\n\nprice_score = price.corr()\nfigure = ff.create_annotated_heatmap(\n    z=price_score.values,\n    x=list(price_score.columns),\n    y=list(price_score.index),\n    annotation_text=price_score.round(2).values,\n    showscale=True)\niplot(figure)","0ea5d981":"from sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import scale\n\nprice_origin = pd.get_dummies(price)\n\nprice_origin = price_origin.dropna(axis=0,)\n\nX = price_origin.drop(['Price'],axis=1, inplace=False)   \nX = np.array(X).astype(np.float)\n\nX_scaled = scale(X)\n\ny = price_origin[['Price']]  \ny = np.array(y).astype(np.float)\n\nX_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=.3, random_state=0)\n\nknn = KNeighborsRegressor(algorithm='brute')\n\nknn.fit(X_train, y_train)\n\ny_predicted = model.predict(X_test)\n","1639cc5e":"df = listings[[\"calculated_host_listings_count\",\"Price\"]]\ndf.loc[listings[\"calculated_host_listings_count\"]>1,\"group\"] = \"Multi-listing\"\ndf.loc[listings[\"calculated_host_listings_count\"]==1,\"group\"] = \"Mono-listing\"","6bb9831d":"# Draw a box plot showing the distribution of room price in Multi-listing group and mono-listing group\ntrace = go.Box(x=df.group,\n               y=listings.Price,\n               name=\"Price\",\n               marker = dict(color = 'rgba(100, 15, 24,1.0)'))\n\nlayout = go.Layout(xaxis=dict(zeroline=False),\n                   yaxis=dict(title=\"Price(\u00a5)\"),\n                   title=\"Box chart of room price by listing type in Airbnb Beijing\")\n\ndata = [trace]\nfig = go.Figure(data=data,layout=layout)\niplot(fig)","41152796":"print(\"Number of listings over 10K\",(listings[\"Price\"]>10000).value_counts())\nprint(\"Number of listings under 50\",(listings[\"Price\"]<50).value_counts())","c1c5560c":"Taregt: Price","befafef4":"listings[\"accommodates\"].value_counts()","de0801ee":"# Generate a \"group\" feature to divide number of reviews for each listing.\nlis_reviews.loc[lis_reviews[\"id\"]<5,\"Group\"]=\"1-4\"\nlis_reviews.loc[(lis_reviews[\"id\"]>=5) & (lis_reviews[\"id\"]<10),\"Group\"]=\"5-9\"\nlis_reviews.loc[(lis_reviews[\"id\"]>=10) & (lis_reviews[\"id\"]<20),\"Group\"]=\"10-19\"\nlis_reviews.loc[(lis_reviews[\"id\"]>=20) & (lis_reviews[\"id\"]<30),\"Group\"]=\"20-29\"\nlis_reviews.loc[(lis_reviews[\"id\"]>=30) & (lis_reviews[\"id\"]<40),\"Group\"]=\"30-39\"\nlis_reviews.loc[(lis_reviews[\"id\"]>=40) & (lis_reviews[\"id\"]<50),\"Group\"]=\"40-49\"\nlis_reviews.loc[(lis_reviews[\"id\"]>=50) & (lis_reviews[\"id\"]<100),\"Group\"]=\"50-99\"\nlis_reviews.loc[(lis_reviews[\"id\"]>=100) & (lis_reviews[\"id\"]<=312),\"Group\"]=\"100-312\"\ngroup_review = pd.DataFrame(lis_reviews[\"Group\"].value_counts(sort=False))\ngroup_review = group_review.reset_index()","9eb7af70":"trace = go.Bar(x=group_review[\"index\"],\n               y=group_review[\"Group\"],\n               name=\"Number of listings\",\n               text=group_review[\"index\"],\n               marker=dict(color=\"#ff0066\"))\nlayout = go.Layout(title=\"Number of listings in each review group\",\n                   xaxis=dict(title=\"Review group\"),\n                   yaxis=dict(title=\"Number of listings\"))\nfig = go.Figure([trace],layout)\niplot(fig)","4af83345":"# Generate 2 new features: review year and review year_month \nreviews[\"date\"] = pd.to_datetime(reviews[\"date\"])\nreviews[\"year\"] = reviews[\"date\"].dt.year\nreviews[\"year_month\"] = pd.to_datetime((reviews[\"date\"].dt.year).map(str) + '-' + (reviews[\"date\"].dt.month).map(str))","c3c826da":"reviews.head()","9383070f":"year_review = pd.DataFrame(reviews[\"id\"].groupby(reviews[\"year\"]).nunique())\nyear_review = year_review.reset_index()\nyear_review[\"year_sum\"] = year_review[\"id\"].cumsum()\nyear_review","d3a4a7ef":"month_review = pd.DataFrame(reviews[\"id\"].groupby(reviews[\"year_month\"]).nunique())\nmonth_review = month_review.reset_index()\nmonth_review[\"month_sum\"] = month_review[\"id\"].cumsum()\nmonth_review.head()","e4770e22":"# Draw a line to show the number of reviews in each year \ntrace = go.Scatter(x=year_review[\"year\"],\n                    y=year_review[\"id\"],\n                    name=\"Num of reviews in each year\",\n                    marker=dict(color=\"red\"))\n\n\nlayout = go.Layout(title=\"Number of reviews in each year and month\",\n                   xaxis=dict(title=\"Year\"),\n                   yaxis=dict(title=\"Num of reviews\"))\ndata = [trace]\nfig = go.Figure(data=data,layout=layout)\niplot(fig)","92242926":"#  Draw a line to show the number of reviews in each month \ntrace = go.Scatter(x=month_review[\"year_month\"],\n                    y=month_review[\"id\"],\n                    name=\"Num of reviews in each month\",\n                    marker=dict(color=\"blue\"))\n\nlayout = go.Layout(title=\"Number of reviews in each year and month\",\n                   xaxis=dict(title=\"Year\"),\n                   yaxis=dict(title=\"Num of reviews\"))\ndata = [trace]\nfig = go.Figure(data=data,layout=layout)\niplot(fig)","509d863b":"dis_review = pd.DataFrame(listings[\"number_of_reviews\"].groupby(listings[\"neighbourhood_cleansed\"]).sum())\ndis_review = dis_review.reset_index()\ndis_review","e34802b6":"# Draw a bar chart to show the distribution of reviews in different districts\ntrace = go.Bar(x=dis_review.neighbourhood_cleansed,\n               y=dis_review.number_of_reviews,\n               name=\"Number of reviews\",\n               marker=dict(color=\"#ff9900\"),\n               text=dis_review.neighbourhood_cleansed)\n\nlayout = go.Layout(title=\"Number of reviews in each district\",\n                   yaxis=dict(title=\"Number of reviews\"))\ndata=[trace]\nfig=go.Figure(data=data,layout=layout)\niplot(fig)","4bed1f24":"type_review = pd.DataFrame(listings[\"number_of_reviews\"].groupby(listings[\"room_type\"]).sum())\ntype_review = type_review.reset_index()\ntype_review","634b61c8":"# Pie chart of room type\ntrace = go.Pie(values=type_review[\"number_of_reviews\"],\n               labels=type_review[\"room_type\"])\n\nlayout = go.Layout(title=\"Percentage reviews in each room type\")\nfig = go.Figure([trace],layout)\niplot(fig)","5d147712":"reviews[\"comments\"][10]","0e57b6c6":"print(\"Number of listings without review score:\",listings[\"review_scores_rating\"].isnull().sum())\nprint(listings[\"review_scores_rating\"].describe())\nprint((listings[\"review_scores_rating\"]).value_counts())\n","fb84001c":"scores = listings[[\"review_scores_rating\",\"review_scores_accuracy\",\"review_scores_cleanliness\",\"review_scores_checkin\",\"review_scores_communication\",\"review_scores_location\",\"review_scores_value\",\"host_total_listings_count\",\"Price\",\"Hosting_Age\"]]\nscores.head()","e87de68a":"import plotly.figure_factory as ff\n\ncorr_scores = scores.corr()\nfigure = ff.create_annotated_heatmap(\n    z=corr_scores.values,\n    x=list(corr_scores.columns),\n    y=list(corr_scores.index),\n    annotation_text=corr_scores.round(2).values,\n    showscale=True)\niplot(figure)","d1ebd227":"score_group=listings[[\"review_scores_rating\"]]\n\n# Generate a new feature \"Group\"\n# https:\/\/stackoverflow.com\/questions\/5124376\/convert-nan-value-to-zero \nscore_group.loc[np.isnan(score_group.review_scores_rating),\"Group\"]=\"None\"\nscore_group.loc[(score_group.review_scores_rating >=1) & (score_group.review_scores_rating <50),\"Group\"]=\"1-50\"\nscore_group.loc[(score_group.review_scores_rating >=50) & (score_group.review_scores_rating <60),\"Group\"]=\"50-59\"\nscore_group.loc[(score_group.review_scores_rating >=60) & (score_group.review_scores_rating <70),\"Group\"]=\"60-69\"\nscore_group.loc[(score_group.review_scores_rating >=70) & (score_group.review_scores_rating <80),\"Group\"]=\"70-79\"\nscore_group.loc[(score_group.review_scores_rating >=80) & (score_group.review_scores_rating <90),\"Group\"]=\"80-89\"\nscore_group.loc[(score_group.review_scores_rating >=90) & (score_group.review_scores_rating <95),\"Group\"]=\"90-94\"\nscore_group.loc[(score_group.review_scores_rating >=95) & (score_group.review_scores_rating <100),\"Group\"]=\"95-99\"\nscore_group.loc[score_group.review_scores_rating==100,\"Group\"]=\"100\"","5666b31d":"df3 = pd.DataFrame(score_group.Group.value_counts())\ndf3 = df3.reset_index()\ndf3","9597c022":"# Draw a bar chart to show the distribution of \"review_scores_rating\"\n\ntrace = go.Bar(x=df3[\"index\"],\n               y=df3.Group,\n               name=\"Number of listings\",\n               marker=dict(color=\"#00ccff\"),\n               text=df3[\"index\"])\n\nlayout= go.Layout(title=\"Number of listings in different score group\")\n\ndata=[trace]\nfig = go.Figure(data=data,layout=layout)\niplot(fig)","86a4868b":"# Draw a box plot showing the distribution of room price in each district\ntrace = go.Box(x=listings.neighbourhood_cleansed,\n               y=listings.review_scores_rating,\n               name=\"Review Score\",\n               marker = dict(color = \"#ff3399\"))\n\nlayout = go.Layout(xaxis=dict(zeroline=False),\n                   yaxis=dict(title=\"Review Score\"),\n                   title=\"Box chart of Review Score by district in Airbnb Beijing\")\n\ndata = [trace]\nfig = go.Figure(data=data,layout=layout)\niplot(fig)","886b0c59":"# Draw a box plot showing the distribution of room price in each district\ntrace = go.Scatter(x=listings.number_of_reviews,\n                   y=listings.review_scores_rating,\n                   name=\"Review Score\",\n                   mode=\"markers\",\n                   marker = dict(color = \"#ff3399\"))\n\nlayout = go.Layout(xaxis=dict(title=\"Number of Reviews\"),\n                   yaxis=dict(title=\"Review Score\"),\n                   title=\"Scatter of Review Score vs Number of Reviews\")\n\ndata = [trace]\nfig = go.Figure(data=data,layout=layout)\niplot(fig)","f2b0c89e":"# Draw a box plot showing the distribution of room price in each district\ntrace = go.Scatter(x=listings.Price,\n                   y=listings.review_scores_rating,\n                   name=\"Price\",\n                   mode=\"markers\",\n                   marker = dict(color=\"#339933\"))\n\nlayout = go.Layout(xaxis=dict(zeroline=False),\n                   yaxis=dict(title=\"Price\"),\n                   title=\"Scatter of Review Score vs Price\")\n\ndata = [trace]\nfig = go.Figure(data=data,layout=layout)\niplot(fig)","a563f105":"## Supply","ca3fc59a":"## Security_deposit ","e026aa2a":"There are **25921** unique listings until 20190211 in Beijing Airbnb.","94fc4d54":"### What is the total number of listings until each end of the year?","56ce1d49":"* The largest number of listings one host have are **222**, which is so amazing.   \n* **3829(38.5%)** of total 9946 unique hosts are muti-listing with more than 1 listings and they own 76.4% of total listings in Qirbnb Beijing.","a3200288":"* The price of entire home\/apt is higher than priate or shared room. ","101513b7":"### How many new reviews in each year?","a5745573":"* No missing values in \"accomodates\"\n* Listings on Airbnb can accomocate guests from min 1 to max 16.\n* Most listings can accomocate 1-4 guests.","ae818938":"# Content","fe43bae0":"* Multi-listing rooms are more expensive than mono-listing room. ","d8bc26be":"# Beds","3356257a":"### How many new listings into Airbnb in each month?","5afdb619":"### How many multi-listings are there? \nIt seems that mono-listings are hosted by ordinary room owners and multi-listings are hosted by professinal landlords.","03087187":"### How many hosts are there in different districs in Beijing Airbnb?","4db043db":"### How does price distribute in different districts?","549b270c":"There are 56 listings more than 10K RMB per night and 10 listings under 50 RMB per night. \nWe'll draw a new box plot with exclusion of those \"outliers\" to show the distribution of price in each ","12dbf39c":"### Let's explore the review content!!!\nHow many positive\/negative reviews are there?\nWhat the commen words users chose to give a comment?","e65e84a2":"### How does price distribution?","a4e542cd":"### How does price distribute among different room types?","9f2ea5d6":"### How many hosts have more than 1 listings?","a29d2024":"* In the year of 2018, the number of reviews increased quite a lot. \n* In Jau of 2019, the number of monthly reviews reached the highest **14063** since 2010-08 even though there were only **458** new listings come into Airbnb. \n* In Feb of 2017,2018,2019, the number of monthly reviews dropped obviously, which might due to the Spring Festival in China in February. \n* In Aug, Oct and Jau of each year, the number of reviews would increase because of festivals and holidays.  ","d899d599":"* The distribution of log price is near normal.","efa1d300":"### What are the room types of listings?","bbcd64bf":"### Room Type","0a58213a":"# Occupancy\n\n","bfb966d7":"## Demand\n* Reviews are not bookings and since we cannot get the booking data of each listing from this dataset, we just analyze review info as a reflection of booking info and popularity info.  \n* Reviews are also the reflection of airbnb demand. ","dc4c285d":"* 5 missing values.  \n* 21688(83.7%) listings have 1 bathroom; 3877(15.0%) have more than 1 bathrooms; 351(1.4%) have less than 1 bathroom.","1a3e1a25":"<a id=\"1\"><\/a>\n# Part I: Explore Data and Analysis","4fa54e68":"## Hosts ","89bc9988":"* Chaoyang has the most reviews 79270(43.9%),which means it's the most attractive area for Airbnb users.  ","657c30fd":"## Review Count","57b9d7ac":"1. Airbnb listings in Beijing from 2010-08 to 2019-02  \n1) The growth of listings in Beijing year by year  \n2) The distribution of listings by Geography  \n3) The properties of listings including Room Type, Accommodates, Bathrooms, Bedrooms, Beds, \n\n2. Host of Airbnb in Beijing from 2010-08 to 2019-02 \n1) The growth of unique hosts and superhosts year by year\n2) \n\n3. Price of Airbnb listings and the asoociated factors\n\n4. Reviews of Airbnb listings","142d0808":"### How many unique lisitngs are there in different districs?","aa354462":"# Bathrooms","dd0149ac":"# What We Learn after Analysis","c5ed4de0":"### How many new listings come into Airbnb in each year?","d1d3ad7e":"**10168(39.2%)** of listings have no reviews.  \n**8348(32.2%)** of listings have 1-4 reviews.  \n**81.7%** of listings have reviews less than 10, which indicates that most listings cannot attract different people. ","d97a3a67":"### What is the dsitribution of review score?","4398dbd3":"### How many listings does each host have in Beijing Airbnb?","65fc6b0b":"# Dataset Description\n\nThe data is sourced from the [Inside Airbnb website](http:\/\/insideairbnb.com\/get-the-data.html),which is  an independent, non-commercial set of tools and data that allows you to explore how Airbnb is really being used in cities around the world. \nSince I'm from China, I just use part of the dataset, which is Beijing Data till 2019-02-11 for this analysis. \n\nThe dataset comprises of three main tables:\n\n* **listings** - Detailed listings data showing 25921 entries with 106 atttributes. Each row of lisitngs represents a unique lisitng in Beijing Aribnb.\n\n* **reviews** - Detailed reviews given by the guests consist of 180561 reviews with 6 attributes. Each row represents a review.\n\n* **calendar** - Provides details about 9461165 bookings for 25921 listings with 4 attributes. Each row represents a daily booking information for a listing in the next 365 days. So each unique listing_id has 365 rows of booking information. ","7794a1b3":"* **56%** reviews come from Entire room\/apt and **38%** reviews come from Private rooms. ","411b4bae":"### Compare total reviews(demand) and total listings(supply)?","f899be7c":"# Availability\nAn Airbnb host can setup a calendar for their listing such as it is only available for a few days or weeks a year.\n\nOther listings are available all year round (except for when it is already booked).\n\nEntire homes or apartments highly available year-round for tourists, probably don't have the owner present, could be illegal, and more importantly, are displacing residents.\n\nSee the disclaimers for how the Airbnb calendar may not be accurate.","9b9f920e":"Number of listings vary a lot among different districs in Airbnb Beijing.  \nTop 3 number of listings districs are **Chaoyang(10344)**,**Dongcheng(3178)** and **Haidian(2985)**.  \nBottom 3 number of listings districs are **Pinggu(116)**, **Mentougou(129)** and **Shijingshan(179)**.","7c93d831":"### Accommodates","ce5ef4e7":"### How many new listing come onto Airbnb in different districs in different years?","e7c44b8b":"Among total 9946 hosts, there are **1527(15.4%)** superhosts, having **4719(18.2%)** listings. ","ebe30b76":"* The most reviews of one listing can get is **312**.","fa086564":"1. Generate feature \"Price\"(int type) from feature \"price\"(str type), representing the room price.   \n2. Generate 3 datetime type features \"Host_Since\", \"Host_Since_Year\", \"Host_Since_Year_Month\" from str type \"host_since\", representing the year and year-month of hosting-since time.\n3. Generate feature \"Listing_Age\"(year,type float), representing the age of listings.","71569985":"### How many unique listings are there in Beijing Airbnb?","dadcf606":"### The relationship between review score and room price?","5bad30bb":"# Bedrooms","facbc26d":"### What is the distribution of superhost listings and non-superhost listings  in each districts?","a8c8741c":"* The mean of available days is 262. \n* 22481(86.7%) of listings are available more than 60 days. Rooms on Airbnb are highly available year-round for tourists, probably don't have the owner present, could be illegal, and more importantly, are displacing residents.","2d58f2e3":"# Review Scores Rating\n[How do star ratings work?](https:\/\/www.airbnb.com\/help\/article\/1257\/how-do-star-ratings-work)\nIn addition to written reviews, guests can submit an overall star rating and a set of category star ratings.  \n* review_scores_rating:What was your guest\u2019s overall rating?  \n* review_scores_accuracy:How accurately did your listing page represent your space?    \n* review_scores_cleanliness:Did your guests feel that your space was clean and tidy?   \n* review_scores_checkin:How did guests feel about the check-in process?\n* review_scores_communication:How well did you communicate with your guest before and during their stay?  \n* review_scores_location:How did guests feel about your neighborhood?\n* review_scores_value:Did your guest feel your listing provided good value for the price?","16de7289":"### The relationship between review score and number of reviews?","c82f850c":"* Airbnb hosts can list entire homes\/apartments, private or shared rooms.\n* Entire place: Guests have the whole place to themselves. This usually includes a bedroom, a bathroom, and a kitchen.\n* Private room: Guests have their own private room for sleeping. Other areas could be shared. \n* Shared room: Guests sleep in a bedroom or a common area that could be shared with others.\n* Entire home\/apt: **15312(59.1%)**; Private room: **9097(35.1%)**; Shared room: **1512(5.83%)**.  \n* <font color='red'> Near 60% of listings are Entire home\/apartment, which indicates that airbnb listings could be more like a hotel, disruptive for neighbours, taking away housing, and illegal.","2933c41c":"### Compare new reviews(demand) and new listings(supply)?","a764b23b":"### The distribution of hosting time?","1f3b3900":"### Mean hosting age in different districts? ","2ea500e7":"* Start with familiarizing ourselves with the columns in the dataset, to understand what each feature represents. \n* We will also try to focus on columns that we think are significant to provide much information without too many missing values. ","678e0779":"* Few listings are more than 5 years hosting age, which means hosts are very new to airbnb platform. ","d17b5ff1":"# Part III: Price Recommendation","ed530e4a":"* The **listings.cvs** file has **25921** entries with **106** features.   ","369e53fd":"### How does review score distribute in different districts?","082dd671":"### How many listings are over 10K or under 50RMB?","27e0584c":"* There are **19804(76.4%)** listings are multi-listings, which might be hosted by professional landlord.  \n* Only **(6117)23.6%** of total listings are mono-listngs, which might be hosted by room owners. \n* We hope to experience local life by airbnb and sleep in the room of local owners. But it's most likely that the room we live in is hosted by those professional landlord and we cannot have too many communications with them?","dc2b93da":"### Which kind of score contributes more to the overall rating socre? ","fb85b2cd":"### How many reviews are there in each year\/month?","67daf717":"* **180458** reviews were made to **15753** listings in Airbnb Beijing,which accounts for 60.8%.  \n* There are still **(10168)39.2%** of listings have no reviews.  ","c49e4867":"* The mean price of listings in Airbnb Beijing is 599.6RMB.   \n* The minimum of price is 0, which is very odd. We'll check for it later.  \n* The maximum of price is 68980, which is too much beyond the average. ","78c2848c":"1. [Part I: Explore Data and Analysis(EDA) ](#1)\n1. [Part II: Supply and Demand of Listings by Time and Geo](#2)\n1. [Part III: Build Models to Recommend Listing Prices](#3)\n1. [Part IV: Review Comments Mining](#4)","4400baa0":"* The accmulative number of listings grow obviously year by year. We can see an almost exponential increase from year 2016 to 2018, indicates an exponential increase in the supply.  \n* At the end of year 2018, there are totally **25439** unique listings in Airbnb Beijing.","a4a9c378":"### How many total reviews until each year?","e43c88d6":"* Among overall review score and other breakdown ratings by category, the correlation between review_scores_rating and review_scores_value are strongest(0.8), and then review_scores_rating andreview_scores_accuracy(0.78).   \n* For customers of Airbnb Beijing, they care more about the value of listings and accuracy of listing pages. ","173db63e":"### Where do people more likely to live in Airbnb Beijing?","ab671c0b":"* There are some records that either reviewer_name or comments is null value.\n* There are no records with both null reviewer_name and null comments.\n* Thus we consider the reviews with null reviewer_name but non-null comment or non-null reviewer_name non-null comment as effective reviews.","876874d7":"## Price","6e41a41b":"## Listings","662f0920":"### Compare total reviews(demand) and total listings(supply)?","8e506c58":"# Host_since","0e8fe925":"### How many superhosts are there?","64a89e8a":"### Basic info about review score","453e244d":"# Superhosts\n[How to become a superhost?](https:\/\/www.airbnb.com\/help\/article\/829\/how-do-i-become-a-superhost)","b141b0d6":"## Amenities","72c01774":"### How many new reviews in each month?","14571e20":"* Number of increased listings in months shows a seasonal pattern.   \n* Every year there are peaks and drop in the supply, indicating that certain months are busier compared to the others.   \n* Generally, in **July**, **Auguest** and **September**, the supply of listings are more sufficient than other months, which may results from the Summer holiday and National Day holiday.\n* Since Oct 2018, the number of new listings has dropped obviously.","12dfcb9d":"### How many unique hosts are there in Beijing Airbnb?\n","465c7490":"* As time goes on, the new listings in Beijing Airbnb in each districts grow gradually year by year. \n* Listings in Chaoyang increased fastest among all districs, which is near 3 times of the second district Dongcheng.  ","cd6cba7b":"* The mean hosting age are generallty between 1-2, and does not vary much maong different districts.","d52ba9b9":"* Seldom people score Airbnb Beijing listings lower than 80. ","3666be90":"* We can see at the begining of year 2019, the number of new listings has dropped a lot. \n* <font color='red'> The question: Is there any space to online new listings in Airbnb Beijing?","f162f6b5":"Top 3 number of hosts districs are **Chaoyang(4217)**, **Dongcheng(1276)** and **Haidian(1162)**.  \nBottom 3 number of hosts districs are **Pinggu(59)**, **Mentougou(66)** and **Shijingshan(110)**.","b35f06e5":"* **10168** listings have no review conment and **10559** listings have no review score, which means some users live comment without give any scores to his booking. Thus, using reviews as reflection of bookings are more propriate than using review score.  \n* How is the \"review_scores_rating\" calculated for each listing? We don't know!    \n* The median of review socre has reached 99, and 75% listings have review score more than 95, which is so amazing. If this is true, we can conclude that the user experience of Airbnb Beijing is generally very good.","ed77131a":"There are **9946** unique hosts in Beijing Airbnb.","f38a9ef7":"# Price Recommendation by KNeighborsRegressor","833d8b3d":"* The distribution of Price is much more skewed. ","e1f9780c":"### 7.3 How many reviews can a listing have?","8ab4170c":"### Basic description of price","6531cc71":"### Are multi-listings more expensive than mono-listings?","cd3330b0":"# Room Type","023cb208":"* Between price and other variables, we have not see some significant ones.","d487e4bc":"<a id=\"2\"><\/a>\n# Part II: Listing Supply by Time and Geo","7a64ebdf":"### What type of romm do people more likely to live in Airbnb Beijing?","b6ab5b9e":"* The newly increased number of listings grow obviously year by year, especially from 2016 to 2018.   \n* In 2018, there are **9253** new lisitngs in Airbnb Beijing.","b7e78922":"### How many total reviews until each year?","24e20037":"The earlist listing is on **2010-08-06**. The latest listing is on **2019-02-10**.  "}}