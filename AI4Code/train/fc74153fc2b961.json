{"cell_type":{"52936d38":"code","32bcafb5":"code","a69472a4":"code","ca6fc804":"code","cad38efe":"code","1f7d45c5":"code","404fead2":"code","9c63abdb":"code","da7de883":"code","c1b7f0cc":"code","89bafcf7":"code","9eea1daf":"code","f84b2917":"code","4faa659e":"code","be8c7440":"code","efe9de62":"code","6e8ac6d0":"code","08af80a8":"code","4323d312":"code","81c45104":"code","9c32cb9b":"code","1ca6d4a0":"code","964a987a":"code","99982eeb":"code","7d65ada7":"code","f95f3b9b":"code","5d480a1c":"code","27758875":"code","a0a10ebb":"code","339882d0":"code","701d27a9":"code","ae05c521":"code","ef122168":"code","daf7a60c":"code","53c2d66a":"code","7d38589a":"code","73c7563d":"code","60b8bf17":"code","9ed5b9c0":"code","83959577":"code","a815124f":"code","4ecd5683":"code","dd9e703c":"code","09608599":"code","e90cf1c1":"code","75098d2d":"code","281b8aa4":"code","7e99fb47":"code","03d0f88d":"code","ae181fc2":"code","87b1b57b":"code","6240f343":"code","530da103":"code","b100458c":"code","23ad9386":"code","c077da73":"code","60fc610a":"code","47c1924b":"code","405f91b6":"code","a422a109":"code","c5c93619":"code","07f5e45e":"code","c32b3c8b":"code","d792de97":"code","5be0a01f":"code","8039b413":"code","765768f2":"code","67cbca5d":"code","b6d09f46":"code","43380426":"code","81efdb13":"code","8493c2a1":"code","f275e4da":"code","85b62a00":"code","f98c7f33":"code","05df6fdb":"code","85068b5c":"markdown","2a8d4f82":"markdown","45b69672":"markdown","ac158583":"markdown","497f464e":"markdown","a2eeadf2":"markdown","87cb6d37":"markdown","28042ce2":"markdown","983b1db6":"markdown","8aefc0b0":"markdown","d84cb921":"markdown","ab45f773":"markdown","be39b7d7":"markdown","75400044":"markdown","57d148d5":"markdown","db0851a6":"markdown","ffa1f17e":"markdown","c6c50a36":"markdown","36c31ff8":"markdown"},"source":{"52936d38":"import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn import metrics\nimport seaborn as sns\nfrom imblearn.under_sampling import RandomUnderSampler # doctest: +NORMALIZE_WHITESPACE\nimport time\nimport joblib","32bcafb5":"import glob\n\nall_files = glob.glob(\"..\/input\/cicids2017\/MachineLearningCSV\/MachineLearningCVE\/*.csv\")\ndf_from_each_file = (pd.read_csv(f) for f in all_files)\nconcatenated_df = pd.concat(df_from_each_file, ignore_index=True)\nconcatenated_df.to_csv('full.csv')\n","a69472a4":"#file = \"..\/input\/cicids2017\/MachineLearningCSV\/MachineLearningCVE\/*.csv\"\nfile = \".\/full.csv\"","ca6fc804":"df = pd.read_csv(file)\ndf = df.reset_index()","cad38efe":"df.head()","1f7d45c5":"df.columns = df.columns.str.strip()\ndf.columns = df.columns.str.replace(' ', '_')\ndf.columns = map(str.lower, df.columns)","404fead2":"df = df.sample(frac=1).reset_index(drop=True)","9c63abdb":"null_columns=df.columns[df.isnull().any()]\ndf[null_columns].isnull().sum() ","da7de883":"df.head()","c1b7f0cc":"df.rename(columns={'fwd_avg_packets\/bulk':'fwd_packet\/bulk_avg', 'bwd_avg_bulk_rate':'bwd_bulk_rate_avg','fwd_avg_bulk_rate':'fwd_bulk_rate_avg', 'bwd_avg_packets\/bulk':'bwd_packet\/bulk_avg', 'fwd_avg_bytes\/bulk':'fwd_bytes\/bulk_avg', 'avg_bwd_segment_size':'bwd_segment_size_avg', 'avg_fwd_segment_size':'fwd_segment_size_avg','cwe_flag_count':'cwr_flag_count','total_length_of_bwd_packets':'total_length_of_bwd_packet','total_length_of_fwd_packets': 'total_length_of_fwd_packet','total_fwd_packets': 'total_fwd_packet','total_backward_packets': 'total_bwd_packets', 'init_win_bytes_forward': 'fwd_init_win_bytes', 'init_win_bytes_backward':'bwd_init_win_bytes', 'act_data_pkt_fwd':'fwd_act_data_pkts', 'min_seg_size_forward':'fwd_seg_size_min'}, inplace=True)","89bafcf7":"df['label'].value_counts()","9eea1daf":"#df['Label'] = df['Label'].replace(r'PortScan|Dos Hulk|DDos*|Web*|', 1)\ndf['label'] = df['label'].replace('DDoS', 1)\ndf['label'] = df['label'].replace('DoS Hulk', 1)\ndf['label'] = df['label'].replace('PortScan', 1)\ndf['label'] = df['label'].replace('DoS GoldenEye', 1)\ndf['label'] = df['label'].replace('DoS slowloris', 1)\ndf['label'] = df['label'].replace('DoS Slowhttptest', 1)\ndf['label'] = df['label'].replace('Web Attack \ufffd Brute Force', 1)\ndf['label'] = df['label'].replace('Web Attack \ufffd XSS', 1)\ndf['label'] = df['label'].replace('Infiltration', 1)\ndf['label'] = df['label'].replace('Web Attack \ufffd Sql Injection', 1)\ndf['label'] = df['label'].replace('Heartbleed', 1)\ndf['label'] = df['label'].replace('FTP-Patator', 1)\ndf['label'] = df['label'].replace('SSH-Patator', 1)\ndf['label'] = df['label'].replace('Bot', 1)\ndf['label'] = df['label'].replace('BENIGN', 0)","f84b2917":"df['label'].value_counts()","4faa659e":"#np.any(np.isnan(df))\ndf = df.dropna()\n","be8c7440":"df['label'].value_counts()","efe9de62":"col_mask=df.isnull().any(axis=0)\nrow_mask=df.isnull().any(axis=1)\ndf.loc[row_mask,col_mask]","6e8ac6d0":"df.shape","08af80a8":"df = df.dropna()","4323d312":"df = df.apply (pd.to_numeric, errors='coerce')\ndf = df.dropna()\ndf = df.reset_index(drop=True)","81c45104":"df.shape","9c32cb9b":"col_mask=df.isnull().any(axis=0)\nrow_mask=df.isnull().any(axis=1)\ndf.loc[row_mask,col_mask]","1ca6d4a0":"#np.any(np.isnan(df))","964a987a":"#np.all(np.isfinite(df))","99982eeb":"def clean_dataset(df):\n    assert isinstance(df, pd.DataFrame), \"df needs to be a pd.DataFrame\"\n    df.dropna(inplace=True)\n    indices_to_keep = ~df.isin([np.nan, np.inf, -np.inf]).any(1)\n    return df[indices_to_keep].astype(np.float64)","7d65ada7":"df = clean_dataset(df)","f95f3b9b":"df.shape","5d480a1c":"null_columns=df.columns[df.isnull().any()]\ndf[null_columns].isnull().sum() ","27758875":"np.all(np.isfinite(df))","a0a10ebb":"df.describe()","339882d0":"X = df.drop(['index','unnamed:_0','label','destination_port', 'min_packet_length', 'max_packet_length', 'fwd_header_length.1','bwd_avg_bytes\/bulk'], axis=1)\ny = df['label']","701d27a9":"down_dataset = {\n    0: 600000,\n    1: 556556\n}\ndown_df=RandomUnderSampler(sampling_strategy=down_dataset, random_state=0) ","ae05c521":"from imblearn import under_sampling\n\nrus = under_sampling.RandomUnderSampler(sampling_strategy=down_dataset)","ef122168":"test_percentage = 0.25\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_percentage)","daf7a60c":"y_train.value_counts()","53c2d66a":"X, y = down_df.fit_sample(X, y) ","7d38589a":"y.value_counts()","73c7563d":"X.loc[:, (X == 0).all()].describe()","60b8bf17":"drop_list = [\"bwd_psh_flags\", \"bwd_urg_flags\", \"fwd_bytes\/bulk_avg\", \"fwd_packet\/bulk_avg\", \"fwd_bulk_rate_avg\", \"bwd_packet\/bulk_avg\", \"bwd_bulk_rate_avg\"]\nlen(drop_list)","9ed5b9c0":"X = X.drop(drop_list, axis=1)","83959577":"X.shape","a815124f":"from sklearn.ensemble.forest import RandomForestClassifier\n","4ecd5683":"print(\"Total dataset: {}\".format(X.shape))\nprint(\"Training dataset: {}:\".format(X_train.shape))\nprint(\"Testing dataset: {}:\".format(X_test.shape))","dd9e703c":"X.shape","09608599":"rf = RandomForestClassifier(random_state=0, n_jobs=-1)\nrfModel = rf.fit(X,y)\n","e90cf1c1":"importance = rfModel.feature_importances_","75098d2d":"sorted(zip(map(lambda x: round(x, 4), rfModel.feature_importances_)), \n             reverse=True)","281b8aa4":"for i,v in enumerate(importance):\n\tprint('Feature: %0d, Score: %.5f' % (i,v))\n# plot feature importance\npyplot.bar([x for x in range(len(importance))], importance)\npyplot.show()","7e99fb47":"important","03d0f88d":"print(\"Total dataset: {}\".format(df.shape))\nprint(\"Training dataset: {}:\".format(X_train.shape))\nprint(\"Testing dataset: {}:\".format(X_test.shape))","ae181fc2":"print(\"------------------ LogisticRegression -----------------\")\nstart = time.time()","87b1b57b":"clf_lr = LogisticRegression( solver='newton-cg')\nclf_lr.fit(X_train, y_train)","6240f343":"print(\"Total time take {}\".format(time.time() - start))","530da103":"##Evaluating the model","b100458c":"y_pred = clf_lr.predict(X_test)\nprint(\"Model accuracy on test dataset\")\nclf_lr.score(X_test, y_test)","23ad9386":"tn, fp, fn, tp  = metrics.confusion_matrix(y_test, y_pred, labels=None, sample_weight=None).ravel()","c077da73":"print('true positives  rate {}'.format(tp))\nprint('false positives  rate {}'.format(fp))\nprint('true negatives  rate {}'.format(tn))\nprint('false negatives  rate {}'.format(fn))\nprint(\"F1 Score = {}\".format(metrics.f1_score(y_test, y_pred)))\nprint(\"Recall {}\".format(tp \/ (tp + fn)))\nprint(\"Precession {}\".format(tp \/ (tp + fp)))","60fc610a":"file_name = \"LogisticRegression.sav\"\njoblib.dump(clf_lr, file_name)","47c1924b":"from sklearn.ensemble import RandomForestClassifier","405f91b6":"print('------- RandomForest------------------\\n')","a422a109":"start = time.time()","c5c93619":"clf_rf = RandomForestClassifier(max_depth=2, random_state=0)\nclf_rf.fit(X_train, y_train)","07f5e45e":"print(\"Total time take for {}\".format(time.time() - start))","c32b3c8b":"y_pred = clf_rf.predict(X_test)\nprint(\"Model accuracy on test dataset\")\nclf_rf.score(X_test, y_test)","d792de97":"tn, fp, fn, tp  = metrics.confusion_matrix(y_test, y_pred, labels=None, sample_weight=None).ravel()","5be0a01f":"print('true positives  rate {}'.format(tp))\nprint('false positives  rate {}'.format(fp))\nprint('true negatives  rate {}'.format(tn))\nprint('false negatives  rate {}'.format(fn))\nprint(\"F1 Score = {}\".format(metrics.f1_score(y_test, y_pred)))\nprint(\"Recall {}\".format(tp \/ (tp + fn)))\nprint(\"Precession {}\".format(tp \/ (tp + fp)))","8039b413":"file_name = \"RF.sav\"\njoblib.dump(clf_rf, file_name)","765768f2":"from sklearn.naive_bayes import GaussianNB","67cbca5d":"print('------- Naive_Bayes------------------\\n')","b6d09f46":"start = time.time()","43380426":"gnb = GaussianNB()","81efdb13":"y_pred = gnb.fit(X_train, y_train)","8493c2a1":"print(\"Total time take for RF {}\".format(time.time() - start))","f275e4da":"y_pred = gnb.predict(X_test)\nprint(\"Model accuracy on test dataset\")\ngnb.score(X_test, y_test)","85b62a00":"tn, fp, fn, tp  = metrics.confusion_matrix(y_test, y_pred, labels=None, sample_weight=None).ravel()","f98c7f33":"print('true positives  rate {}'.format(tp))\nprint('false positives  rate {}'.format(fp))\nprint('true negatives  rate {}'.format(tn))\nprint('false negatives  rate {}'.format(fn))\nprint(\"F1 Score = {}\".format(metrics.f1_score(y_test, y_pred)))\nprint(\"Recall {}\".format(tp \/ (tp + fn)))\nprint(\"Precession {}\".format(tp \/ (tp + fp)))","05df6fdb":"file_name = \"gnb.sav\"\njoblib.dump(gnb, file_name)","85068b5c":"# Training the model","2a8d4f82":"### we remove 1509 rows with invalid data","45b69672":"## RandomForest Algorithm","ac158583":"# Loadig data","497f464e":"# Import necessary libraries","a2eeadf2":"### Fix some issues with nan and inf values with out dataset","87cb6d37":"### LogisticRegression Algorihtm","28042ce2":"#### As we can see we have a NaN values in the Flow_Bytes column, so we gonna deal with it","983b1db6":"#### here we remove the infinity values ","8aefc0b0":"## Naive_bayes","d84cb921":"# Splitting the data set ","ab45f773":"#### Check the `NaN` values","be39b7d7":"### Features Analysis","75400044":"# Specifying features and targets ","57d148d5":"### Features Reducation","db0851a6":"#### Check `infinity` values","ffa1f17e":"# Basci preprocessing","c6c50a36":"# Some data diagnosis","36c31ff8":"#### We have removed the NaN values in our dataset"}}