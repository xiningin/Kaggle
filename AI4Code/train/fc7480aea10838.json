{"cell_type":{"fb971b81":"code","60bd3686":"code","769a52ad":"code","132bd49a":"code","6b40aafe":"code","d4295e20":"code","fc4b1c7f":"code","cf7ab5b3":"code","5c4c65c8":"code","75aefaa6":"code","10e6f83f":"code","0263e10a":"code","984b1844":"code","16456cd6":"code","7c3c75dd":"code","3ff1b840":"code","338cdc05":"code","b21c2da3":"code","2392ebd3":"code","677f2ff7":"code","374a7e91":"code","c901a04c":"code","3634fe05":"code","e79c469b":"code","3cc00201":"code","69446065":"code","2dcaa953":"code","beb664c3":"code","7c5c0061":"code","ae6b773f":"code","59d91b79":"code","1392c57e":"code","7f003b48":"code","5dff0749":"code","102ac215":"code","d4a957ad":"code","a150d321":"code","b3e007a5":"code","9e91133c":"code","aa548097":"code","2125562e":"code","5259bbec":"code","3d9d4745":"code","eac95a06":"code","198f9874":"code","fe235c22":"code","6bc551ae":"code","e573e360":"code","b30733b2":"code","aa16266e":"code","0f559282":"code","e445228a":"code","a14dabcf":"code","6aaa2318":"code","71f45266":"markdown","a33f6d95":"markdown","482b33e8":"markdown","4986febb":"markdown","ad4c736b":"markdown","4546d4c1":"markdown","b827a1a9":"markdown","d17f48f9":"markdown","3450c949":"markdown","3777127b":"markdown","a2d36c11":"markdown","1caed33b":"markdown","9ebd75ee":"markdown","9b999685":"markdown","fde1f9dd":"markdown","de8d661b":"markdown","6c2c7c6f":"markdown","fce5db25":"markdown","8eaa12b8":"markdown","2dc38ac7":"markdown","0db5d1bf":"markdown","edbac514":"markdown","216ca3d9":"markdown","bdfd6e8d":"markdown","cecf4a54":"markdown","685d17e7":"markdown"},"source":{"fb971b81":"import sys\nprint(sys.executable)","60bd3686":"import string\nimport numpy as np\nfrom collections import Counter\nimport re\nimport numpy as np\nimport pandas as pd\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n# plotting\nimport seaborn as sns\nfrom wordcloud import WordCloud\nimport matplotlib.pyplot as plt\n# nltk\nfrom nltk.stem import WordNetLemmatizer\n# sklearn\nfrom sklearn.naive_bayes import BernoulliNB\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.metrics import confusion_matrix, classification_report","769a52ad":"rest_review = pd.read_csv(\"\/kaggle\/input\/zomato-restaurants-hyderabad\/Restaurant reviews.csv\")\n\nrest_review.head()","132bd49a":"# Check Restaurants Review Data Information\n\nrest_review.info()","6b40aafe":"# Remove Row which has Rating = Like as it is has just one\n\nrest_review = rest_review[rest_review[\"Rating\"] != \"Like\"]\nrest_review[\"Rating\"].value_counts()","d4295e20":"# Convert Rating Data Type to float\n\nrest_review[\"Rating\"] = rest_review[\"Rating\"].astype(\"float\")","fc4b1c7f":"# Examine Statistics\n\nrest_review.describe()","cf7ab5b3":"rest_name_info = pd.read_csv(\"\/kaggle\/input\/zomato-restaurants-hyderabad\/Restaurant names and Metadata.csv\")\n\nrest_name_info.head()","5c4c65c8":"# Check Restaurant Name and Information Dataset\n\nrest_name_info.info()","75aefaa6":"# Examine Statistics\n\nrest_name_info.describe()","10e6f83f":"# Drop Rows which has null values\n\nrest_review.dropna(how='any',inplace=True)\nrest_review.info()","0263e10a":"# Cnovert Metadata object type to str\n\nrest_review[\"Metadata\"] = rest_review[\"Metadata\"].astype(\"str\")","984b1844":"# Split Metadata Column in No_of_Reviews and No_of_Followers Column\n\nrest_review[['No_of_Reviews','No_of_Followers']] = rest_review[\"Metadata\"].str.split(\",\" , expand=True)\n\n# Delete Metadata Column\ndel rest_review[\"Metadata\"]\nrest_review[:3]","16456cd6":"# Delete characters from No_of_Reviews and No_of_Followers Column and Make it a numeric data type\n\nrest_review['No_of_Reviews'] = pd.to_numeric(rest_review['No_of_Reviews'].str.replace(r'\\D+', ''))\nrest_review['No_of_Followers'] = pd.to_numeric(rest_review['No_of_Followers'].str.replace(r'\\D+', '')) \nrest_review[:3]","7c3c75dd":"# Replace null values with 0 and convert column to int data type\nrest_review[\"No_of_Followers\"] = rest_review[\"No_of_Followers\"].replace(np.nan, 0)\nrest_review[\"No_of_Followers\"] = rest_review[\"No_of_Followers\"].astype(\"int\")","3ff1b840":"# Top 10 Rated Restaurants\ntrr = rest_review.groupby(\"Restaurant\")[\"Rating\"].agg(\"mean\").to_frame().reset_index().sort_values(by = \"Rating\", ascending = False)\ntrr_10 = trr[:10]\ntrr_10","338cdc05":"sns.set_style(\"white\")\nplt.figure(figsize = (18, 8))\nsns.barplot(x = \"Rating\", y = \"Restaurant\", data = trr_10, palette = \"gist_heat\")\nplt.title(\"10 Top Rated Restaurants\", size = 20)\nplt.xticks(size = 15)\nplt.yticks(size = 15)\nplt.xlabel(\"Rating\", size = 20)\nplt.ylabel(None)\nplt.savefig(\"10_Top_Rated_Restaurants.png\")\nplt.show()","b21c2da3":"# Top 10 Reviewed Restaurants\n\ntrer = rest_review.groupby(\"Restaurant\")[\"No_of_Reviews\"].agg(\"sum\").reset_index().sort_values(by = \"No_of_Reviews\", ascending = False)\ntrer_10 = trer[:10]\ntrer_10","2392ebd3":"plt.figure(figsize = (18, 8))\nsns.barplot(x = \"No_of_Reviews\", y = \"Restaurant\", data = trer_10, palette = \"spring\")\nplt.title(\"10 Top Reviewed Restaurants\", size = 20)\nplt.xticks(size = 15)\nplt.yticks(size = 15)\nplt.xlabel(\"Number of Reviews\", size = 20)\nplt.ylabel(None)\nplt.savefig(\"10_Top_Reviewed_Restaurants.png\")\nplt.show()","677f2ff7":"tfr = rest_review.groupby(\"Restaurant\")[\"No_of_Followers\"].agg(\"sum\").reset_index().sort_values(by = \"No_of_Followers\", ascending = False)\ntfr_10 = tfr[:10]\ntfr_10","374a7e91":"plt.figure(figsize = (18, 8))\nsns.barplot(x = \"No_of_Followers\", y = \"Restaurant\", data = tfr_10, palette = \"summer\")\nplt.title(\"10 Top Followed Restaurants\", size = 20)\nplt.xticks(size = 15)\nplt.yticks(size = 15)\nplt.xlabel(\"Number of Followers\", size = 20)\nplt.ylabel(None)\nplt.savefig(\"10_Top_Followed_Restaurants.png\")\nplt.show()","c901a04c":"stopwordlist = ['a', 'about', 'above', 'after', 'again', 'ain', 'all', 'am', 'an',\n             'and','any','are', 'as', 'at', 'be', 'because', 'been', 'before',\n             'being', 'below', 'between','both', 'by', 'can', 'd', 'did', 'do',\n             'does', 'doing', 'down', 'during', 'each','few', 'for', 'from',\n             'further', 'had', 'has', 'have', 'having', 'he', 'her', 'here',\n             'hers', 'herself', 'him', 'himself', 'his', 'how', 'i', 'if', 'in',\n             'into','is', 'it', 'its', 'itself', 'just', 'll', 'm', 'ma',\n             'me', 'more', 'most','my', 'myself', 'now', 'o', 'of', 'on', 'once',\n             'only', 'or', 'other', 'our', 'ours','ourselves', 'out', 'own', 're','s', 'same', 'she', \"shes\", 'should', \"shouldve\",'so', 'some', 'such',\n             't', 'than', 'that', \"thatll\", 'the', 'their', 'theirs', 'them',\n             'themselves', 'then', 'there', 'these', 'they', 'this', 'those',\n             'through', 'to', 'too','under', 'until', 'up', 've', 'very', 'was',\n             'we', 'were', 'what', 'when', 'where','which','while', 'who', 'whom',\n             'why', 'will', 'with', 'won', 'y', 'you', \"youd\",\"youll\", \"youre\",\n             \"youve\", 'your', 'yours', 'yourself', 'yourselves']","3634fe05":"STOPWORDS = set(stopwordlist)\n\ndef cleaning_stopwords(text):\n    return \" \".join([word for word in str(text).split() if word not in STOPWORDS])\n\nrest_review['Review'] = rest_review['Review'].apply(lambda text: cleaning_stopwords(text))\nrest_review['Review'].head()","e79c469b":"punctuations_list = string.punctuation\n\ndef cleaning_punctuations(text):\n    translator = str.maketrans('', '', punctuations_list)\n    return text.translate(translator)\n\nrest_review['Review'] = rest_review['Review'].apply(lambda x: cleaning_punctuations(x))\nrest_review['Review'].tail()","3cc00201":"def cleaning_repeating_char(text):\n    return re.sub(r'(.)1+', r'1', text)\n\nrest_review['Review'] = rest_review['Review'].apply(lambda x: cleaning_repeating_char(x))\nrest_review['Review'].tail()","69446065":"def cleaning_numbers(data):\n    return re.sub('[0-9]+', '', data)\n\nrest_review['Review'] = rest_review['Review'].apply(lambda x: cleaning_numbers(x))\nrest_review['Review'].tail()","2dcaa953":"text = ' '.join(rest_review[\"Review\"])\nwords = text.split()\n\ntwo_words = {' '.join(words):n for words,n in Counter(zip(words, words[1:])).items() if not  words[0][-1]==(',')}","beb664c3":"two_words_df = pd.DataFrame(two_words.items(), columns=['Reviews Words', 'Frequency'])\ntwo_words_df = two_words_df.sort_values(by = \"Frequency\", ascending = False)\ntwo_words_20 = two_words_df[:20]\ntwo_words_20","7c5c0061":"sns.set_style(\"whitegrid\")\nplt.figure(figsize = (18, 8))\nsns.barplot(y = \"Reviews Words\", x = \"Frequency\", data = two_words_20, palette = \"plasma\")\nplt.title(\"Top 20 Two-word Frequencies of Reviews\", size = 20)\nplt.xticks(size = 15)\nplt.yticks(size = 15)\nplt.xlabel(\"Reviews Words\", size = 20)\nplt.ylabel(None)\nplt.savefig(\"Top_20_Two-word_Frequencies_of_Reviews.png\")\nplt.show()","ae6b773f":"rest_name_info['Cuisines'] = rest_name_info['Cuisines'].apply(lambda text: cleaning_stopwords(text))\nrest_name_info['Cuisines'].head()","59d91b79":"rest_name_info['Cuisines'] = rest_name_info['Cuisines'].apply(lambda x: cleaning_punctuations(x))\nrest_name_info['Cuisines'].head()","1392c57e":"rest_name_info['Cuisines'] = rest_name_info['Cuisines'].apply(lambda x: cleaning_repeating_char(x))\nrest_name_info['Cuisines'].head()","7f003b48":"rest_name_info['Cuisines'] = rest_name_info['Cuisines'].apply(lambda x: cleaning_numbers(x))\nrest_name_info['Cuisines'].head()","5dff0749":"text = ' '.join(rest_name_info['Cuisines'])\nwords = text.split()\n\ntwo_words = {' '.join(words):n for words,n in Counter(zip(words, words[1:])).items() if not  words[0][-1]==(',')}","102ac215":"two_words_dfc = pd.DataFrame(two_words.items(), columns=['Cuisine Words', 'Frequency'])\ntwo_words_dfc = two_words_dfc.sort_values(by = \"Frequency\", ascending = False)\ntwo_words_20c = two_words_dfc[:20]\ntwo_words_20c","d4a957ad":"sns.set_style(\"whitegrid\")\nplt.figure(figsize = (18, 8))\nsns.barplot(y = \"Cuisine Words\", x = \"Frequency\", data = two_words_20c, palette = \"hsv\")\nplt.title(\"Top 20 Two-word Frequencies of Cuisines\", size = 20)\nplt.xticks(size = 15)\nplt.yticks(size = 15)\nplt.xlabel(\"Cuisine Words\", size = 20)\nplt.ylabel(None)\nplt.savefig(\"Top_20_Two-word_Frequencies_of_Cuisines.png\")\nplt.show()","a150d321":"# Import Restaurant Review Data\n\ndf1 = pd.read_csv('\/kaggle\/input\/zomato-restaurants-hyderabad\/Restaurant reviews.csv')","b3e007a5":"# Import Restaurant Name and Related Info Data\n\ndf2 = pd.read_csv(\"\/kaggle\/input\/zomato-restaurants-hyderabad\/Restaurant names and Metadata.csv\")","9e91133c":"# Examine Columns\n\ndf2[:3]","aa548097":"# Split Cusines Column by Cuisine\ndf2[\"Cuisines\"] = df2[\"Cuisines\"].str.split(\",\")\ndf2[:3]","2125562e":"df_c = df2.copy()\n\n# iterate in cuisine column\nfor index, row in df2.iterrows(): \n    for genre in row[\"Cuisines\"]:\n        df_c.at[index, genre] = 1\n        \n#Filling in the NaN values with 0 to show that a movie doesn't have that column's \ndf_c = df_c.fillna(0)\ndf_c.head().T","5259bbec":"userInput = [\n            {'Restaurant':\"Pakwaan Grand\", 'Rating':5},\n            {'Restaurant':\"Club Rogue\", 'Rating':3.5},\n            {'Restaurant':\"Flechazo\", 'Rating':2},\n            {'Restaurant':\"Green Bawarchi Restaurant\", 'Rating':5},\n            {'Restaurant':\"Dunkin' Donuts\", 'Rating':4.5}\n         ] \ninputRestaurant = pd.DataFrame(userInput)\ninputRestaurant","3d9d4745":"# Check Customer Input in Cuisine Data\n\ninput_res = df2[df2[\"Name\"].isin(inputRestaurant[\"Restaurant\"].to_list())]\ninput_res = input_res.rename(columns = {\"Name\": \"Restaurant\"})\ninput_res","eac95a06":"# Set Customer Input Restasurant as Index\n\ninputRestaurant = inputRestaurant.set_index(\"Restaurant\")","198f9874":"# Set Restaurant as Index\n\ninput_res = input_res.set_index(\"Restaurant\")","fe235c22":"# Merge Data on Restaurants\n\ninputRestaurant = pd.merge(inputRestaurant, input_res, left_index = True, right_index = True)\ninputRestaurant","6bc551ae":"# Show Necessary Columns\ninputRestaurant = inputRestaurant.reset_index()\ninputRestaurant = inputRestaurant[[\"Restaurant\", \"Cuisines\", \"Rating\"]] \ninputRestaurant","e573e360":"# Check Restaurants\nuser_Restaurants = df_c[df_c[\"Name\"].isin(inputRestaurant[\"Restaurant\"].to_list())]\nuser_Restaurants","b30733b2":"# Cuisine Table\n\nuser_Restaurants = user_Restaurants.reset_index(drop = True)\nuser_Restaurants  = user_Restaurants.drop(columns = [\"Name\", \"Links\", \"Cost\", \"Collections\", \"Cuisines\", \"Timings\"]) \nuser_Restaurants","aa16266e":"# Add weights to Cuisine\nuserProfile = user_Restaurants.transpose().dot(inputRestaurant[\"Rating\"])\nuserProfile","0f559282":"# Cuisine Table by Restaurants\n\nCuisineTable = df_c.set_index(df_c[\"Name\"])\nCuisineTable = CuisineTable.drop(columns = [\"Name\", \"Links\", \"Cost\", \"Collections\"])\nCuisineTable","e445228a":"# Multiply the genres by the weights and then take the weighted average\n\nrecommendationTable_df = ((CuisineTable*userProfile).sum(axis=1))\/(userProfile.sum())\nrecommendationTable_df.head()","a14dabcf":"#Sort our recommendations in descending order\nrecommendationTable_df = recommendationTable_df.sort_values(ascending=False)\n\n#Just a peek at the values\nrecommendationTable_df.head()","6aaa2318":"recommendations = df2.loc[df2['Name'].isin(recommendationTable_df.head(20).keys())]\nrecommendations = recommendations[[\"Name\", \"Cuisines\", \"Cost\"]]\nrecommendations.columns = [\"Restaurant\", \"Cuisines\", \"Cost\"]\nrecommendations[:20]","71f45266":"**Top Rated Restaurants**","a33f6d95":"### Read Dataset","482b33e8":"# Thank for visting plz upvote my notebook.","4986febb":"**Cleaning and removing the above stop words from the text\/body**","ad4c736b":"# Restaurant Recommender System","4546d4c1":"**Top 20 Two word Frequencies of Cuisines**","b827a1a9":"**Defining the set containing all the stopwords**","d17f48f9":"**Content Based Recommendor System**","3450c949":"### Import Libraries","3777127b":"**Cleaning and removing repeating characters**","a2d36c11":"**Cleaning and removing the above stop words list from the text\/body**","1caed33b":"### Recommendor System","9ebd75ee":"**Top Reviewed Restaurants**","9b999685":"### Identify Top 20 word frequencies for Cusines","fde1f9dd":"**The final recommendation Table**","de8d661b":"**Cleaning and Removing Punctuations**","6c2c7c6f":"**Cleaning and removing Numeric numbers**","fce5db25":"### Top Rated Restaurants","8eaa12b8":"**Cleaning and removing Numeric numbers**","2dc38ac7":"**Top Followed Restaurants**","0db5d1bf":"**Top 20 Two word Frequencies of Reviews** ","edbac514":"### Identify Top 20 word frequencies for Reviews","216ca3d9":"**Cleaning and removing repeating characters**","bdfd6e8d":"**Cleaning and removing punctuations**","cecf4a54":"**One Hot Encoding on Cuisines**","685d17e7":"**Preparing Data**"}}