{"cell_type":{"91fe37e1":"code","b738647b":"code","9e5af111":"code","2603efa1":"code","21700191":"code","6b338543":"code","9f09843f":"code","cd0555ac":"code","0ae758d7":"code","589d5bb3":"code","1936e735":"code","317f6e0f":"code","756db550":"code","c75ddf7a":"code","268cbd3a":"code","b8f030a7":"code","61609d85":"code","14ab6f45":"code","eb4b1333":"markdown","33a4d301":"markdown","ee699b0a":"markdown","07fbec61":"markdown","c6ece239":"markdown","5375bcd1":"markdown","df26d1c1":"markdown","70554bb6":"markdown","bff09349":"markdown","9be84b04":"markdown"},"source":{"91fe37e1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport wandb\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b738647b":"import torch\nfrom torch import nn\nfrom torch import optim\nfrom torch.utils import data\nimport wandb\nwandb.init(project=\"simple_regression\")","9e5af111":"train_data = pd.read_csv('\/kaggle\/input\/red-wine-quality-cortez-et-al-2009\/winequality-red.csv')\ntrain_data.head()","2603efa1":"n_train = train_data.shape[0]\nall_features = train_data.iloc[:, :-1]\nall_features = all_features.apply(lambda x: (x - x.mean()) \/ (x.std()))\ntrain_features = torch.tensor(all_features[:n_train].values, dtype=torch.float32)\ntrain_features","21700191":"trains_labels = train_data.quality.values.reshape(-1, 1)\ntrains_labels","6b338543":"trains_mean = trains_labels.mean()\ntrains_std = trains_labels.std()\ntrains_labels = (trains_labels - trains_mean) \/ trains_std\ntrain_labels = torch.tensor(trains_labels,\n                            dtype=torch.float32)\ntrain_labels","9f09843f":"n_features = train_data.shape[1]\nlinear_weights = torch.randn(1, requires_grad=True) # TODO, initialize a random tensor \nlinear_weights","cd0555ac":"def load_array(data_arrays, batch_size):\n    dataset = data.TensorDataset(*data_arrays)\n    return data.DataLoader(dataset, batch_size, shuffle=True)\n\nbatch_size = 32\ndata_iter = load_array((train_features, train_labels), batch_size)\ndata_iter","0ae758d7":"net = nn.Sequential(nn.Linear(11,1))\nnet[0].weight.data.normal_(0, 0.01)\nnet[0].bias.data.fill_(0)\nnet[0].weight.data","589d5bb3":"def _weights_init(m):\n    if isinstance(m, nn.Linear):\n        torch.nn.init.xavier_normal_(m.weight)\n        m.bias.data.zero_()\n    else:\n        print('not an linear?')\n\nnet.apply(_weights_init)\nnet[0].weight.data","1936e735":"net[0].bias.data","317f6e0f":"loss = nn.MSELoss()","756db550":"wandb.watch(net, log=\"all\", criterion=loss, log_freq=1,  log_graph=(True)) # wandb logging for model","c75ddf7a":"num_iterations = 512\nlr = 1e-2\noptim = torch.optim.SGD(net.parameters(), lr=lr)","268cbd3a":"next(net.parameters())","b8f030a7":"for i in range(num_iterations):\n    for X, y in data_iter:\n        l = loss(net(X), y)\n        optim.zero_grad() # important\n        l.backward()\n        optim.step()\n    with torch.no_grad():\n        l = loss(net(train_features), train_labels)\n        if((i % 100) == 0):\n            print(f'epoch {i + 1}, loss {l.item()}')\n        wandb.log({'loss': l.item()}, step=i)","61609d85":"prediction_values = []\n\nfor X in train_features:\n    prediction_values.append(net(X))\n   \npredictions = torch.Tensor(prediction_values)\npredictions = (predictions * trains_std) + trains_mean\npredictions","14ab6f45":"import matplotlib.pyplot as plt\nplt.clf()\nplt.plot(predictions, train_labels, 'go', label='Pred. vs True', alpha=0.5)\nplt.legend(loc='best')\nplt.show()","eb4b1333":"Our predictions seem very close to the ground truth!","33a4d301":"train_data = pd.read_csv('\/kaggle\/input\/red-wine-quality-cortez-et-al-2009\/winequality-red.csv')\ntrain_data.head()# Data Processing","ee699b0a":"First, we need to import Pytorch","07fbec61":"Training loop","c6ece239":"Get the real predictions","5375bcd1":"**To go further**: Stochastic Gradient Descent is not the optimal algorithm in terms of convergeance.\nIf you are curious, you can read this nice article about an improvement to SGD, momentum and try to implement it: https:\/\/distill.pub\/2017\/momentum\/","df26d1c1":"## Training","70554bb6":"We need to separate features from target","bff09349":"# Red Wine Quality\n\nKaggle link: https:\/\/www.kaggle.com\/uciml\/red-wine-quality-cortez-et-al-2009","9be84b04":"Initialize the weight of the linear regression"}}