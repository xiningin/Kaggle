{"cell_type":{"bda4096e":"code","d7c8cd2b":"code","665445f3":"code","0c7a0117":"code","bf82652a":"code","abc22250":"code","6b478e4d":"code","328efcb5":"code","df776e61":"code","0e3e38ae":"code","8f7dbf58":"code","c0f6f3fa":"code","6bd73ce8":"code","97504d9b":"code","9e0f0d6e":"code","5ba5d2c5":"code","46aa5c76":"code","ca8a0b1b":"code","634b3415":"code","1a3d435e":"code","5ba72b91":"markdown","363fe716":"markdown","427a6d26":"markdown","73e223f5":"markdown","ccd6521a":"markdown","fe362953":"markdown","7d4a0947":"markdown","6fdfe4f6":"markdown","f97f47e8":"markdown","c4748a87":"markdown","8563f48e":"markdown"},"source":{"bda4096e":"from keras.preprocessing.image import ImageDataGenerator, load_img\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPooling2D\nfrom keras.layers import Activation, Dropout, Flatten, Dense\nfrom keras import backend as K\n\nimport os\nimport numpy as np\nimport pandas as np\n\nimport matplotlib.pyplot as plt\n%matplotlib inline","d7c8cd2b":"print(os.listdir(\"..\/input\/chest_xray\/chest_xray\"))\n\nprint(os.listdir(\"..\/input\/chest_xray\/chest_xray\/train\"))\n\nprint(os.listdir(\"..\/input\/chest_xray\/chest_xray\/train\/\"))","665445f3":"img_name = 'NORMAL2-IM-0588-0001.jpeg'\nimg_normal = load_img('..\/input\/chest_xray\/chest_xray\/train\/NORMAL\/' + img_name)\n\nprint('NORMAL')\nplt.imshow(img_normal)\nplt.show()","0c7a0117":"img_name = 'person63_bacteria_306.jpeg'\nimg_pneumonia = load_img('..\/input\/chest_xray\/chest_xray\/train\/PNEUMONIA\/' + img_name)\n\nprint('PNEUMONIA')\nplt.imshow(img_pneumonia)\nplt.show()","bf82652a":"# dimensions of our images.\nimg_width, img_height = 150, 150","abc22250":"train_data_dir = '..\/input\/chest_xray\/chest_xray\/train'\nvalidation_data_dir = '..\/input\/chest_xray\/chest_xray\/val'\ntest_data_dir = '..\/input\/chest_xray\/chest_xray\/test'\n\nnb_train_samples = 5217\nnb_validation_samples = 17\nepochs = 20\nbatch_size = 16","6b478e4d":"if K.image_data_format() == 'channels_first':\n    input_shape = (3, img_width, img_height)\nelse:\n    input_shape = (img_width, img_height, 3)","328efcb5":"model = Sequential()\nmodel.add(Conv2D(32, (3, 3), input_shape=input_shape))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(Conv2D(32, (3, 3)))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(Conv2D(64, (3, 3)))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(Flatten())\nmodel.add(Dense(64))\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(1))\nmodel.add(Activation('sigmoid'))","df776e61":"model.layers","0e3e38ae":"model.input","8f7dbf58":"model.output","c0f6f3fa":"model.compile(loss='binary_crossentropy',\n              optimizer='rmsprop',\n              metrics=['accuracy'])","6bd73ce8":"# this is the augmentation configuration we will use for training\ntrain_datagen = ImageDataGenerator(\n    rescale=1. \/ 255,\n    shear_range=0.2,\n    zoom_range=0.2,\n    horizontal_flip=True)","97504d9b":"# this is the augmentation configuration we will use for testing:\n# only rescaling\ntest_datagen = ImageDataGenerator(rescale=1. \/ 255)","9e0f0d6e":"train_generator = train_datagen.flow_from_directory(\n    train_data_dir,\n    target_size=(img_width, img_height),\n    batch_size=batch_size,\n    class_mode='binary')","5ba5d2c5":"validation_generator = test_datagen.flow_from_directory(\n    validation_data_dir,\n    target_size=(img_width, img_height),\n    batch_size=batch_size,\n    class_mode='binary')","46aa5c76":"test_generator = test_datagen.flow_from_directory(\n    test_data_dir,\n    target_size=(img_width, img_height),\n    batch_size=batch_size,\n    class_mode='binary')","ca8a0b1b":"model.fit_generator(\n    train_generator,\n    steps_per_epoch=nb_train_samples \/\/ batch_size,\n    epochs=epochs,\n    validation_data=validation_generator,\n    validation_steps=nb_validation_samples \/\/ batch_size)","634b3415":"model.save_weights('first_try.h5')","1a3d435e":"# evaluate the model\nscores = model.evaluate_generator(test_generator)\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))","5ba72b91":"### Check information about model","363fe716":"# Binary classification with Keras neural network","427a6d26":"### Upload img","73e223f5":"### Import","ccd6521a":"### Create Sequential model","fe362953":"English is not my native language, so sorry for any mistake.\n\nIf you like my Kernel, give me some feedback and also votes up my kernel.","7d4a0947":"### Compile","6fdfe4f6":"### Fit model","f97f47e8":"### Img","c4748a87":"### Create variable","8563f48e":"### Save model`s weights"}}