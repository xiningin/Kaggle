{"cell_type":{"90e26466":"code","9e6b374b":"code","cbe4faf8":"code","58245033":"code","c83b7c1e":"code","87a1af2a":"code","aaac0472":"code","7888d7ba":"code","8b340c74":"markdown"},"source":{"90e26466":"import numpy as np\nimport pandas as pd\nimport pickle,time,copy\nimport pexpect\nimport matplotlib.pyplot as plt\nimport numpy.fft as fft\nfrom scipy import signal\nimport glob\ndir0='\/kaggle\/input\/liverpool-ion-switching\/'\ndir='\/kaggle\/input\/6th-place-ion\/'","9e6b374b":"def write_params(M,file_A,mu=np.zeros(1),var=np.zeros(1),n_para=0,K=4,level=1):\n    zopen=np.array([0,0,1,1],dtype='int32')\n    B=np.zeros((M+1,K**M))\n    for i in range(K**M):\n        cpi=np.zeros(M,dtype='int32')\n        tmpi=i\n        for j in range(M-1,-1,-1):\n            cpi[j]=tmpi\/K**j\n            tmpi=tmpi-cpi[j]*K**j\n        B[np.sum(zopen[cpi]),i]=1\n\n    A=np.fromfile(file_A)\n    if level==0:\n        pi=np.array([1.,0,0,0])\n    else:\n        pi=np.array([0,0,0,1.])\n    if mu[0]==0:\n        if M<10:\n            aa,bb=1.2346256990189566, -2.735787099027291\n        else:\n            #aa,bb=1.2334311467598833, -5.459027096569211\n            aa,bb=1.2334311467598833, -5.5\n        mu=aa*np.arange(M+1)+bb\n    if var[0]==0:\n        if M==1: var=0.0617*np.ones(1)\n        if M==3: var=0.0778*np.ones(1)\n        if M==5: var=0.0845*np.ones(1)\n        if M==10: var=0.165*np.ones(1) #\u3082\u3068\u3082\u30680.170\n    pi.tofile('pi'+'{0:03d}'.format(n_para)+'.bin')\n    A.tofile('A'+'{0:03d}'.format(n_para)+'.bin')\n    B.tofile('B'+'{0:03d}'.format(n_para)+'.bin')\n    mu.tofile('mu'+'{0:03d}'.format(n_para)+'.bin')\n    var.tofile('var'+'{0:03d}'.format(n_para)+'.bin')","cbe4faf8":"def clean_hum_noise_STFT(sig,pz,aa,bb,dd=1,nn=100000,nl=22500,thr=0.005):\n    nperseg=nl\n    hw=int(50*nperseg\/10000+0.000001)\n    noverlap=nperseg-10\n    pp=np.max(pz,axis=1)\n    cp=np.argmax(pz,axis=1)\n    sig_clean=copy.copy(sig)\n    x=sig-aa*cp-bb\n    f, t, Z = signal.stft(x,fs=10000,nperseg=nperseg,noverlap=noverlap)\n    Z1=copy.copy(Z)\n    Z1=np.mean(np.abs(Z1),axis=1)\n    tmp=np.where(Z1>thr)\n    Z[tmp]=0\n    _, sig_clean = signal.istft(Z,fs=10000,nperseg=nperseg,noverlap=noverlap)\n    plt.plot(x-sig_clean)\n    plt.show()\n    Z0=np.mean(np.abs(Z),axis=1)\n    plt.scatter(f[hw-5:hw+6],Z1[hw-5:hw+6])\n    plt.scatter(f[hw-5:hw+6],Z0[hw-5:hw+6])\n    plt.show()\n    plt.scatter(f,Z0)\n    plt.ylim([0,0.01])\n    plt.show()\n    return sig_clean+aa*cp+bb","58245033":"df_test = pd.read_csv(dir0+\"test.csv\")\nsignal_clean=df_test['signal'].values\nbatch=[0,1,4,6,7,8,10]\nx=np.arange(100000)\nfor i in batch:\n    if i!=10:\n        signal_clean[100000*i:100000*(i+1)]=df_test['signal'].values[100000*i:100000*(i+1)]-5*np.sin(np.pi*x\/500000)\n    else:\n        x=np.arange(500000)\n        signal_clean[100000*i:100000*(i+5)]=df_test['signal'].values[100000*i:100000*(i+5)]-5*np.sin(np.pi*x\/500000)\nplt.figure(figsize=(16,5))\nplt.plot(signal_clean)\nplt.show()\ndf_test['signal']=signal_clean","c83b7c1e":"level=[0,2,3,0,1, 4,3, 4,0,2,0,0,0,0,0,0,0,0,0,0]\nnoc = [3,3,5,3,1,10,5,10,3,3,3,3,3,3,3,3,3,3,3,3]\nnit = [10]*20\nnl  = [15000]*20\nnl[5]=22500\nnl[7]=22500\nthr,ratio=0.4, 1.\nfiles_A=[dir+'A000_lh30373.221.bin',dir+'\/A002_lh245363.418.bin',dir+'\/A003_lh672353.458.bin'\n         ,dir+'\/A015_lh937508.257.bin',dir+'\/A034_lh1323450.005.bin']\ncp=np.array(2000000,dtype='int64')\nw=np.ones(11)","87a1af2a":"for n in range(20):\n    sig=df_test['signal'].values[100000*n:100000*(n+1)]\n    for i in range(nit[n]):\n        n_para,M,K=n,noc[n],4\n        sig.tofile('sig'+'{0:03d}'.format(n_para)+'.bin') \n        if i==0:\n            write_params(M,files_A[level[n]],n_para=n_para,level=level[n])\n        else:\n            write_params(M,files_A[level[n]],mu=mu,var=var,n_para=n_para,level=level[n])\n        time.sleep(1.)\n        prc = pexpect.spawn(\"\/bin\/bash\")\n        prc.sendline(dir+\"a.out 0 \"+str(n_para)+\" \"+str(M)+\" \"+str(K)+\" \"+str(100000)+\" \"+str(1)+\" \"+\"5 >log\"\n                     +'{0:03d}'.format(n_para)+\"-\"+str(i)+\".txt\")\n        data0=''\n        time.sleep(2.)\n        f = open('log'+'{0:03d}'.format(n_para)+\"-\"+str(i)+'.txt')\n        while 1==1:\n            time.sleep(0.1)\n            data1 = f.read()\n            if data1!=data0 and data1!='':\n                data0=copy.copy(data1)\n                print(n_para,data1)#,data1[0:3]) \n            if 'END' in data1:\n                break\n        time.sleep(1.)\n\n        files_pz=sorted(glob.glob('pz'+'{0:03d}'.format(n_para)+'*.bin'))\n        if len(files_pz)>1: print('many files!')\n        pz=np.fromfile(files_pz[0]).reshape(-1,M+1)\n        files_mu=sorted(glob.glob('mu'+'{0:03d}'.format(n_para)+'*_opt.bin'))\n        mu=np.fromfile(files_mu[0])\n        aa,bb=mu[1]-mu[0],mu[0]\n        files_var=sorted(glob.glob('var'+'{0:03d}'.format(n_para)+'*_opt.bin'))\n        var=np.fromfile(files_var[0])\n        print(aa,bb,var,mu)\n        sig=df_test['signal'].values[100000*n:100000*(n+1)]\n        #sig=clean_hum_noise(sig,pz,aa,bb,thr,dd[n],ratio)\n        cp0=np.argmax(pz*w[0:noc[n]+1],axis=1)\n        sig=clean_hum_noise_STFT(sig,pz,aa,bb,nl=nl[n])\n        print(i,np.sum(abs(cp0-cw[100000*n:100000*(n+1)])))\n    cp[100000*n:100000*(n+1)]=np.argmax(pz*w[0:noc[n]+1],axis=1)","aaac0472":"plt.plot(cp)","7888d7ba":"df=pd.read_csv(dir+'submission.csv')\ndf['open_channels']=cp\ndf.to_csv('submission.csv',index=False,float_format='%.4f')","8b340c74":"This is the note book of the 6th place, whose Private score is 0.94553.  \nI have uploaded all source files to produce the score. \n\nThis notebook does not work on the kaggle kernel, although I tried to work it. \nThe executable file, 'a.out', may work on 64 bit a CeontOS machine with a Intel CPU.\nYou can make 'a.out' in your enviroment using the latest fortran complier, gfortran or Intel fortran compliler. \nWe use two FORTRAN source files to create the executable file. Below line is the example to create it on a linux machine. \n(Install the latest version of gfortran.)\n\n\\>gfortran FHMM_muvar.f90 FHMM_s.f90\n\nThese two files implement FHMM whose detailes are explain on the page below.  \nhttps:\/\/www.kaggle.com\/c\/liverpool-ion-switching\/discussion\/153932  \n\n(1) The transition probability A is obtained in the training pahse, which is implemented in the other notebook. \nhttps:\/\/www.kaggle.com\/shimizumasaki\/6th-place-solution-training-phase  \n(2) We think our noise removable is not good solution. \n"}}