{"cell_type":{"133570f6":"code","490e2555":"code","dee30c7c":"code","5782a45e":"code","d41bd869":"code","b2ec0c49":"code","39679e70":"code","e06e839e":"code","8fa55bfe":"code","c1d93a6a":"code","39f99d39":"code","b0a2bbda":"code","9207b89c":"code","15c529a3":"code","268903cf":"markdown","3bdde514":"markdown","7e2a7a25":"markdown","11421786":"markdown","ed510448":"markdown","a80e906a":"markdown","105abd1f":"markdown"},"source":{"133570f6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","490e2555":"import pandas as pd\nimport numpy as np\nimport nltk\nnltk.download('punkt')","dee30c7c":"train=pd.read_csv('\/kaggle\/input\/janatahack-independence-day-2020-ml-hackathon\/train.csv')\ntest=pd.read_csv('\/kaggle\/input\/janatahack-independence-day-2020-ml-hackathon\/test.csv')\ntest_original=pd.read_csv('\/kaggle\/input\/janatahack-independence-day-2020-ml-hackathon\/test.csv')","5782a45e":"text_train=train['TITLE']+train['ABSTRACT']\ntext_test=test['TITLE']+test['ABSTRACT']\ntext=pd.concat([text_train,text_test])","d41bd869":"# Replace numbers with 'numbr'\nprocessed_text =text.str.replace(r'\\d+(\\.\\d+)?', 'numbr')\n\n# Remove punctuation\nprocessed_text = processed_text.str.replace(r'[^\\w\\d\\s]', ' ')\n\n# Replace whitespace between terms with a single space\nprocessed_text = processed_text.str.replace(r'\\s+', ' ')\n\n# Remove leading and trailing whitespace\nprocessed_text = processed_text.str.replace(r'^\\s+|\\s+?$', '')\n\n# change words to lower case - Hello, HELLO, hello are all the same word\nprocessed_text = processed_text.str.lower()","b2ec0c49":"from nltk.corpus import stopwords\n\n# remove stop words from text messages\n\nstop_words = set(stopwords.words('english'))\n\nprocessed_text = processed_text.apply(lambda x: ' '.join(\n    term for term in x.split() if term not in stop_words))","39679e70":"# Modify words with Word Net Lemmatizer\nfrom nltk.stem import WordNetLemmatizer\nwordnet_lemmatizer = WordNetLemmatizer()\n\nprocessed_text=processed_text.apply(lambda x: ' '.join(\n    wordnet_lemmatizer.lemmatize(term) for term in x.split()))","e06e839e":"# Remove word stems using a Porter stemmer\nps = nltk.PorterStemmer()\n\nprocessed_text = processed_text.apply(lambda x: ' '.join(\n    ps.stem(term) for term in x.split()))","8fa55bfe":"processed_text_train=processed_text[:20972]\nprocessed_text_test=processed_text[20972:]","c1d93a6a":"total_size=train.shape[0]\ntrain_size=int(0.8*total_size)\n\nX_train=processed_text_train.head(train_size)\nX_test=processed_text_train.tail(total_size-train_size)\n\ny = train.iloc[:, 3:]\ny_train=y[0:train_size]\ny_test=y[train_size:total_size]","39f99d39":"from sklearn.feature_extraction.text import TfidfVectorizer\nvectorizer=TfidfVectorizer(min_df=1, smooth_idf=True, norm=\"l2\",\n                          tokenizer=lambda x: x.split(),sublinear_tf=True, ngram_range=(1,3))\n\nX_train_multilabel=vectorizer.fit_transform(X_train)\nX_test_multilabel=vectorizer.transform(X_test)","b0a2bbda":"from sklearn.multiclass import OneVsRestClassifier\nfrom sklearn.svm import LinearSVC\nfrom sklearn.metrics import f1_score\n\nclassifier=OneVsRestClassifier(LinearSVC(penalty=\"l2\",loss='hinge'), n_jobs=-1)\nclassifier.fit(X_train_multilabel,y_train)\npredictions=classifier.predict(X_test_multilabel)\n\nprint(f1_score(y_test,predictions, average='micro'))","9207b89c":"test_multilabel=vectorizer.transform(processed_text_test)\npredictions=classifier.predict(test_multilabel)","15c529a3":"submission=pd.DataFrame(predictions, columns=['Computer Science','Physics','Mathematics','Statistics','Quantitative Biology','Quantitative Finance'])\nsubmission=pd.concat([test_original['ID'],submission],axis=1)\nsubmission.to_csv(\"topic.csv\", index=False)\nprint(submission.shape)\nsubmission.head()","268903cf":"I have used OneVsRestClassifier along with LinearSVC. I tried using SGDClassifier, LogisticRegression, RandomForestClassifier,MultinomialNB,LGBMClassifier and XGBClassifier instead of LinearSVC, but LinearSVC gave the best result.","3bdde514":"This submission gives a micro F1 score of 83.46% on the Public Leaderboard.","7e2a7a25":"Fitting the model","11421786":"# Pre-processing and cleaning the Text","ed510448":"Splitting into train and test data","a80e906a":"# Final Submission","105abd1f":"# Predicting on the test data"}}