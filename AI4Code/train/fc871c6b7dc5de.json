{"cell_type":{"cae079dc":"code","f414a094":"code","8313eb8f":"code","813ece56":"code","638a213b":"code","8e5e296f":"code","03d006b2":"code","81d2538c":"code","90de31dc":"code","0b275a69":"code","cee97155":"code","783e3e0c":"code","5bef38c1":"code","ae958ecd":"code","6e86c1b8":"code","6b9fd755":"code","b5329eed":"code","5e4f5a0a":"code","897c9486":"code","5cbe1b67":"code","9365662a":"code","039248cf":"code","5104a908":"code","62498ce3":"code","c4600588":"code","1cac3500":"code","a378bdc9":"markdown","2e324a69":"markdown","4d7d8c97":"markdown","fb33077b":"markdown","76111d41":"markdown","50d822eb":"markdown","a9765945":"markdown"},"source":{"cae079dc":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport os","f414a094":"dataset_path = '\/kaggle\/input\/dry-beans-classification-iti-ai-pro-intake01\/'\ndf = pd.read_csv(os.path.join(dataset_path, 'train.csv'))\nprint(\"The shape of the dataset is {}.\\n\\n\".format(df.shape))","8313eb8f":"test_df = pd.read_csv(os.path.join(dataset_path, 'test.csv'))\nprint(\"The shape of the dataset is {}.\\n\\n\".format(test_df.shape))","813ece56":"df.columns","638a213b":"test_df.columns","8e5e296f":"df.info()","03d006b2":"df.drop(columns=['ID','y']).describe().T","81d2538c":"df.isna().sum()","90de31dc":"df.drop(columns=['ID','y']).duplicated().sum()","0b275a69":"df.y.unique()","cee97155":"df.y.value_counts().sort_values().plot(kind='barh')","783e3e0c":"features = df.drop(columns=['ID','y'],axis=1)\nlabels = df.y\nX_test= test_df.drop(columns=['ID'],axis=1)","5bef38c1":"corr = features.corr()\nplt.figure(figsize=(20,15))\nsns.heatmap(corr, annot=True, square=True)","ae958ecd":"features=features.drop(columns=['ConvexArea','ShapeFactor3'],axis=1)\nX_test=X_test.drop(columns=['ConvexArea','ShapeFactor3'],axis=1)","6e86c1b8":"feature_cols = features.columns\nsns.set(style='darkgrid')\nfig, ax_list = plt.subplots(nrows=4, ncols=3, sharey=False, figsize=(36,24))\nax_list = ax_list.flatten()\nfor name, ax in zip(feature_cols, ax_list):\n     g = sns.histplot(features, x=name, bins=10, ax=ax).set(title=name)","6b9fd755":"skew_columns = (features.skew().sort_values(ascending=False))\nskew_columns = skew_columns.loc[skew_columns > 0.8]\nskew_columns","b5329eed":"longTailCol = ['ShapeFactor4', 'Solidity', 'Eccentricity', 'roundness']","5e4f5a0a":"from sklearn.model_selection import train_test_split\nX_train,X_val, y_train, y_val = train_test_split(features, labels, test_size=0.2,stratify=labels, random_state=42)","897c9486":"#Resolve skew features  and log tail features\nfrom sklearn.preprocessing import PowerTransformer\ncol = skew_columns.index.tolist()+ longTailCol\npt = PowerTransformer()\nX_train[col] = pt.fit_transform(X_train[col])\nX_val[col] = pt.transform(X_val[col])\nX_test[col] = pt.transform(X_test[col])","5cbe1b67":"from sklearn.preprocessing import MinMaxScaler,StandardScaler\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.decomposition import PCA\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import classification_report,f1_score\nfrom sklearn.ensemble import RandomForestClassifier","9365662a":"scaler=MinMaxScaler()\nclassifier = SVC(gamma='scale',C=3,kernel='rbf',tol=0.2)\n\npipeline = make_pipeline(scaler, classifier).fit(X_train, y_train)\nprint(pipeline.score(X_train, y_train))\nprint(pipeline.score(X_val,y_val))","039248cf":"print(f1_score(y_train, pipeline.predict(X_train),average='macro'))\nprint(f1_score(y_val, pipeline.predict(X_val),average='macro'))","5104a908":"\nprint(classification_report(y_val,pipeline.predict(X_val)))","62498ce3":"from sklearn.metrics import plot_confusion_matrix,confusion_matrix\nfig, ax = plt.subplots(figsize=(10, 10))\nplot_confusion_matrix(pipeline,X_val,y_val, cmap=plt.cm.Blues, ax=ax)","c4600588":"y_test_predicted = pipeline.predict(X_test)\n\ntest_df['y'] = y_test_predicted\n\ntest_df['y'].value_counts()","1cac3500":"test_df[['ID', 'y']].to_csv('\/kaggle\/working\/submission.csv', index=False)","a378bdc9":"## Feature Engineer","2e324a69":"# **Dry Beans Classification**","4d7d8c97":"## Exploratory Data Analysis","fb33077b":"## Submission File Generation","76111d41":"## Import the libraries\n","50d822eb":"## Split Data","a9765945":"## Model Training "}}