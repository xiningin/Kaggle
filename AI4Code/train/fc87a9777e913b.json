{"cell_type":{"700c0748":"code","d6a20a83":"code","36c2878c":"code","3fb100a8":"code","0342b96e":"code","b609cab1":"code","ae23e5dd":"code","af8feefb":"code","5a04e083":"code","243ceb87":"code","66fd2b77":"code","df6e2ec4":"code","0729701e":"code","520ed5c7":"code","08177ff3":"code","9faf7aaf":"code","e22a9f5d":"code","21ec9a9a":"code","a2ac97a3":"code","936374c6":"code","bf02b9c6":"code","6e0bdf58":"code","78d15a56":"code","91f8c7f6":"code","91caf098":"code","aa546394":"code","47a43b59":"code","f536b33a":"code","d8a57a2b":"code","422f4bdc":"markdown","ec82b847":"markdown","03aef47e":"markdown","fd009061":"markdown","d4c48e49":"markdown","a232509c":"markdown","bdc56fee":"markdown","3f22aa9d":"markdown","1138b950":"markdown","192b7430":"markdown","dd50b577":"markdown","8d2acd3a":"markdown","d9feed8c":"markdown","04569d52":"markdown","5c6b7431":"markdown","f42115fb":"markdown","3d8f939b":"markdown","28dadfbf":"markdown","c2ddfa73":"markdown","47ee9194":"markdown","de2c4c48":"markdown","5cbd0610":"markdown","fceef9e1":"markdown","1580213f":"markdown","1d8544d6":"markdown","1901585d":"markdown","a65e4c71":"markdown","cc0ae8a5":"markdown","55bdab8a":"markdown","f7b7430f":"markdown","c9d50b57":"markdown","2ed09eb3":"markdown","c7bd73ab":"markdown","f4ca4983":"markdown"},"source":{"700c0748":"# Importing numpy, pandas and Series + DataFrame:\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Imports for plotly:\nimport plotly.graph_objs as go\nimport plotly.express as px\nimport plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots\n\n# To keep graph within the nobebook:\n%matplotlib inline\n\n# To hide warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n","d6a20a83":"# Import for datareading:\nimport pandas_datareader as web\nfrom pandas_datareader import data, wb\nimport requests\nimport datetime, dateutil.relativedelta","36c2878c":"# Set the date, from today to 1 year ago:\nend = datetime.datetime.now()\n\nend_t = datetime.datetime.now().strftime('%Y-%m-%d')\nstart = datetime.datetime(end.year - 1,end.month,end.day).strftime('%Y-%m-%d')","3fb100a8":"# Get the data for the following cryptocurrencies (making sure the price is in USD):\n\n# Bitcoin:\nbitcoin = globals()['BTC-USD'] = web.DataReader('BTC-USD', 'yahoo', start, end_t).reset_index()\n\n# Litecoin:\nlitecoin = globals()['LTC-USD'] = web.DataReader('LTC-USD', 'yahoo', start, end_t).reset_index()\n\n# Monero:\nmonero = globals()['XMR-USD'] = web.DataReader('XMR-USD', 'yahoo', start, end_t).reset_index()\n\n#Ethereum:\nethereum = globals()['ETH-USD'] = web.DataReader('ETH-USD', 'yahoo', start, end_t).reset_index()","0342b96e":"# To display first five rows of bitcoin dataset:\nbitcoin.head()","b609cab1":"# Function to describe variables\ndef desc(df):\n    d = pd.DataFrame(df.dtypes,columns=['Data_Types'])\n    d = d.reset_index()\n    d['Columns'] = d['index']\n    d = d[['Columns','Data_Types']]\n    d['Missing'] = df.isnull().sum().values    \n    d['Uniques'] = df.nunique().values\n    return d\n\n# Use desc() function to describe df:\ndesc(bitcoin)","ae23e5dd":"# To display statistical description of columns with numerical values: \nbitcoin.describe()","af8feefb":"# Print short summary about data:\nprint ('Over the last year, mean price of Bitcoin was ' + '$' + str(round(np.mean(bitcoin['Close']),2)) \n       + ', the highest price reached ' + '$' + str(round(max(bitcoin['Close']),2)) \n       + ' and the price dropped to minimum of ' + '$' + str(round(min(bitcoin['Close']),2)) + '.')    ","5a04e083":"# Create line graph (with dual axis) for Closing price of cryptocurrencies: \n\nfrom plotly.subplots import make_subplots\n\n# Create figure with secondary y-axis\nfig = make_subplots(specs=[[{'secondary_y': True}]])\n\n# Add traces\nfig.add_trace(go.Scatter(x=bitcoin['Date']\n                         , y=bitcoin['Adj Close']\n                         , name='Bitcoin'\n                        )\n             , secondary_y=False\n             )\n\nfig.add_trace(go.Scatter(x=litecoin['Date']\n                         , y=litecoin['Adj Close']\n                         , name='Litecoin'\n                        )\n             , secondary_y=True\n             )\n\nfig.add_trace(go.Scatter(x=monero['Date']\n                         , y=monero['Adj Close']\n                         , name='Monero'\n                        )\n             , secondary_y=True\n             )\n\nfig.add_trace(go.Scatter(x=ethereum['Date']\n                         , y=ethereum['Adj Close']\n                         , name='Ethereum'\n                        )\n              ,secondary_y=True,\n              )\n\n# Set slider selection buttons:\nfig.update_xaxes(\n    rangeslider_visible=True,\n    rangeselector=dict(\n        buttons=list([\n            dict(count=1, label='1m', step='month', stepmode='backward'),\n            dict(count=6, label='6m', step='month', stepmode='backward'),\n            dict(count=1, label='1y', step='year', stepmode='backward'),\n            dict(count=1, label='YTD', step='year', stepmode='todate')\n        ])\n    )\n)\n\n\n# Add figure title\nfig.update_layout(\n    title_text='Price of selected Cryptocurrencies'\n)\n\n# Set x-axis title\nfig.update_xaxes(title_text='Date')\n\n# Set y-axes titles\nfig.update_yaxes(title_text='Bitcoin ($)', secondary_y=False)\nfig.update_yaxes(title_text='Litecoin, Monero & Ethereum ($)', secondary_y=True)\n\nfig.show()","243ceb87":"# Moving average for 7, 10 and 30 days:\nma_day = [7,10,30]\ncrypto = [bitcoin, litecoin, monero, ethereum]\n\nfor ma in ma_day:\n    column_name = 'MA for %s days' %(str(ma))\n    \n    for i in crypto:\n        i[column_name] = i['Adj Close'].rolling(window=ma).mean()","66fd2b77":"# Simple 7 Days Moving Average:\n\nfig = go.Figure()\n\n# Add Traces\nfig.add_trace(go.Scatter(x=bitcoin['Date']\n                         , y=bitcoin['Adj Close']\n                         , name='Bitcoin - Adj Close'\n                         #, visible=True\n                        ))\n\nfig.add_trace(go.Scatter(x=bitcoin['Date']\n                         , y=bitcoin['MA for 7 days']\n                         , name='Bitcoin -7 days MA'\n                        # , visible=True\n                        ))\n\nfig.add_trace(go.Scatter(x=litecoin['Date']\n                         , y=litecoin['Adj Close']\n                         , name='Litecoin - Adj Close'\n                         , visible=False\n                        ))\n\nfig.add_trace(go.Scatter(x=litecoin['Date']\n                         , y=litecoin['MA for 7 days']\n                         , name='Litecoin - 7 days MA'\n                         , visible=False\n                        ))\n\nfig.add_trace(go.Scatter(x=ethereum['Date']\n                         , y=ethereum['Adj Close']\n                         , name='Ethereum - Adj Close'\n                         , visible=False\n                        ))\n\nfig.add_trace(go.Scatter(x=ethereum['Date']\n                         , y=ethereum['MA for 7 days']\n                         , name='Ethereum - 7 days MA'\n                         , visible=False\n                        ))\n\nfig.add_trace(go.Scatter(x=monero['Date']\n                         , y=monero['Adj Close']\n                         , name='Monero - Adj Close'\n                         , visible=False\n                        ))\n\nfig.add_trace(go.Scatter(x=monero['Date']\n                         , y=monero['MA for 7 days']\n                         , name='Monero - 7 days MA'\n                         , visible=False\n                        ))\n\n\n\n \n# Add Buttons\nfig.update_layout(\n    updatemenus=[\n        dict(\n            active=0,\n            buttons=list([ \n                \n                dict(label='bitcoin',\n                     method='update',\n                     args=[{'visible': [True, True, False, False, False, False, False, False]},\n                           {'title': '7 Days Moving Average (Bitcoin)'}]),\n                \n                \n                dict(label='litecoin',\n                     method='update',\n                     args=[{'visible': [False, False, True, True, False, False, False, False]},\n                           {'title': '7 Days Moving Average  (Litecoin)'}]),\n                \n                \n                dict(label='ethereum',\n                     method='update',\n                    args=[{'visible': [False,  False, False, False, True, True, False, False]},\n                           {'title': '7 Days Moving Average  (Ethereum)'}]),\n             \n                \n                dict(label='monero',\n                     method='update',\n                     args=[{'visible': [False, False, False, False, False, False, True, True]},\n                           {'title': '7 Days Moving Average  (Monero)'}])\n            ])\n           )\n    ])\n    \n# Set slider selection buttons:\nfig.update_xaxes(\n    rangeslider_visible=True,\n    rangeselector=dict(\n        buttons=list([\n            dict(count=1, label='1m', step='month', stepmode='backward'),\n            dict(count=6, label='6m', step='month', stepmode='backward'),\n            dict(count=1, label='1y', step='year', stepmode='backward'),\n            dict(count=1, label='YTD', step='year', stepmode='todate')\n        ])\n    )\n)\n\n\n# Set title\nfig.update_layout(title_text='Simple 7 Days Moving Average')\n\n# Set x and y-axis titles\nfig.update_xaxes(title_text='Date')\nfig.update_yaxes(title_text='Price ($)')\n\nfig.show()                ","df6e2ec4":"# Simple 10 Days Moving Average:\n\nfig = go.Figure()\n\n# Add Traces\nfig.add_trace(go.Scatter(x=bitcoin['Date']\n                         , y=bitcoin['Adj Close']\n                         , name='Bitcoin - Adj Close'\n                         #, visible=True\n                        ))\n\nfig.add_trace(go.Scatter(x=bitcoin['Date']\n                         , y=bitcoin['MA for 10 days']\n                         , name='Bitcoin - 10 days MA'\n                        # , visible=True\n                        ))\n\nfig.add_trace(go.Scatter(x=litecoin['Date']\n                         , y=litecoin['Adj Close']\n                         , name='Litecoin - Adj Close'\n                         , visible=False\n                        ))\n\nfig.add_trace(go.Scatter(x=litecoin['Date']\n                         , y=litecoin['MA for 10 days']\n                         , name='Litecoin - 10 days MA'\n                         , visible=False\n                        ))\n\nfig.add_trace(go.Scatter(x=ethereum['Date']\n                         , y=ethereum['Adj Close']\n                         , name='Ethereum - Adj Close'\n                         , visible=False\n                        ))\n\nfig.add_trace(go.Scatter(x=ethereum['Date']\n                         , y=ethereum['MA for 10 days']\n                         , name='Ethereum - 10 days MA'\n                         , visible=False\n                        ))\n\nfig.add_trace(go.Scatter(x=monero['Date']\n                         , y=monero['Adj Close']\n                         , name='Monero - Adj Close'\n                         , visible=False\n                        ))\n\nfig.add_trace(go.Scatter(x=monero['Date']\n                         , y=monero['MA for 10 days']\n                         , name='Monero - 10 days MA'\n                         , visible=False\n                        ))\n\n \n# Add Buttons\nfig.update_layout(\n    updatemenus=[\n        dict(\n            active=0,\n            buttons=list([ \n                \n                dict(label='bitcoin',\n                     method='update',\n                     args=[{'visible': [True, True, False, False, False, False, False, False]},\n                           {'title': '10 Days Moving Average (Bitcoin)'}]),\n\n                                dict(label='litecoin',\n                     method='update',\n                     args=[{'visible': [False, False, True, True, False, False, False, False]},\n                           {'title': '10 Days Moving Average  (Litecoin)'}]),\n                \n                \n                dict(label='ethereum',\n                     method='update',\n                    args=[{'visible': [False,  False, False, False, True, True, False, False]},\n                           {'title': '10 Days Moving Average  (Ethereum)'}]),\n             \n                \n                dict(label='monero',\n                     method='update',\n                     args=[{'visible': [False, False, False, False, False, False, True, True]},\n                           {'title': '10 Days Moving Average  (Monero)'}])\n            ])\n           )\n    ])\n    \n# Set slider selection buttons:\nfig.update_xaxes(\n    rangeslider_visible=True,\n    rangeselector=dict(\n        buttons=list([\n            dict(count=1, label='1m', step='month', stepmode='backward'),\n            dict(count=6, label='6m', step='month', stepmode='backward'),\n            dict(count=1, label='1y', step='year', stepmode='backward'),\n            dict(count=1, label='YTD', step='year', stepmode='todate')\n        ])\n    )\n)\n\n# Set title\nfig.update_layout(title_text='Simple 10 Days Moving Average')\n\n# Set x and y-axis titles\nfig.update_xaxes(title_text='Date')\nfig.update_yaxes(title_text='Price ($)')\n\nfig.show()                \n            ","0729701e":"# Simple 30 Days Moving Average:\n\nfig = go.Figure()\n\n# Add Traces\nfig.add_trace(go.Scatter(x=bitcoin['Date']\n                         , y=bitcoin['Adj Close']\n                         , name='Bitcoin - Adj Close'\n                         #, visible=True\n                        ))\n\nfig.add_trace(go.Scatter(x=bitcoin['Date']\n                         , y=bitcoin['MA for 30 days']\n                         , name='Bitcoin - 30 days MA'\n                        # , visible=True\n                        ))\n\nfig.add_trace(go.Scatter(x=litecoin['Date']\n                         , y=litecoin['Adj Close']\n                         , name='Litecoin - Adj Close'\n                         , visible=False\n                        ))\n\nfig.add_trace(go.Scatter(x=litecoin['Date']\n                         , y=litecoin['MA for 30 days']\n                         , name='Litecoin - 30 days MA'\n                         , visible=False\n                        ))\n\nfig.add_trace(go.Scatter(x=ethereum['Date']\n                         , y=ethereum['Adj Close']\n                         , name='Ethereum - Adj Close'\n                         , visible=False\n                        ))\n\nfig.add_trace(go.Scatter(x=ethereum['Date']\n                         , y=ethereum['MA for 30 days']\n                         , name='Ethereum - 30 days MA'\n                         , visible=False\n                        ))\n\nfig.add_trace(go.Scatter(x=monero['Date']\n                         , y=monero['Adj Close']\n                         , name='Monero - Adj Close'\n                         , visible=False\n                        ))\n\nfig.add_trace(go.Scatter(x=monero['Date']\n                         , y=monero['MA for 30 days']\n                         , name='Monero - 30 days MA'\n                         , visible=False\n                        ))\n\n \n# Add Buttons\nfig.update_layout(\n    updatemenus=[\n        dict(\n            active=0,\n            buttons=list([ \n                \n                dict(label='bitcoin',\n                     method='update',\n                     args=[{'visible': [True, True, False, False, False, False, False, False]},\n                           {'title': '30 Days Moving Average (Bitcoin)'}]),\n\n                                dict(label='litecoin',\n                     method='update',\n                     args=[{'visible': [False, False, True, True, False, False, False, False]},\n                           {'title': '30 Days Moving Average  (Litecoin)'}]),\n                \n                \n                dict(label='ethereum',\n                     method='update',\n                    args=[{'visible': [False,  False, False, False, True, True, False, False]},\n                           {'title': '30 Days Moving Average  (Ethereum)'}]),\n             \n                \n                dict(label='monero',\n                     method='update',\n                     args=[{'visible': [False, False, False, False, False, False, True, True]},\n                           {'title': '30 Days Moving Average  (Monero)'}])\n            ])\n           )\n    ])\n    \n# Set slider selection buttons:\nfig.update_xaxes(\n    rangeslider_visible=True,\n    rangeselector=dict(\n        buttons=list([\n            dict(count=1, label='1m', step='month', stepmode='backward'),\n            dict(count=6, label='6m', step='month', stepmode='backward'),\n            dict(count=1, label='1y', step='year', stepmode='backward'),\n            dict(count=1, label='YTD', step='year', stepmode='todate')\n        ])\n    )\n)\n\n# Set title\nfig.update_layout(title_text='Simple 30 Days Moving Average')\n\n# Set x and y-axis titles\nfig.update_xaxes(title_text='Date')\nfig.update_yaxes(title_text='Price ($)')\n\nfig.show()                \n                    ","520ed5c7":"# Candlestick charts for cryptocurrencies:\nfig = go.Figure()\n\n# Add Traces\nfig.add_trace(go.Candlestick(x=bitcoin['Date']\n                             , open=bitcoin['Open']\n                             , high=bitcoin['High']\n                             , low=bitcoin['Low']\n                             , close=bitcoin['Adj Close']\n                            # , visible = True\n                            ))\n\nfig.add_trace(go.Candlestick(x=litecoin['Date']\n                             , open=litecoin['Open']\n                             , high=litecoin['High']\n                             , low=litecoin['Low']\n                             , close=litecoin['Adj Close']\n                             , visible = False \n                            )) \n\nfig.add_trace(go.Candlestick(x=ethereum['Date']\n                             , open=ethereum['Open']\n                             , high=ethereum['High']\n                             , low=ethereum['Low']\n                             , close=ethereum['Adj Close']\n                             , visible = False \n                            ))\n\nfig.add_trace(go.Candlestick(x=monero['Date']\n                             , open=monero['Open']\n                             , high=monero['High']\n                             , low=monero['Low']\n                             , close=monero['Adj Close']\n                             , visible = False \n                            ))  \n \n\n# Add Buttons\nfig.update_layout(\n    updatemenus=[\n        dict(\n            active=0,\n            buttons=list([ \n                \n                dict(label='bitcoin',\n                     method='update',\n                     args=[{'visible': [True, False,False, False]},\n                           {'title': 'Candlestick chart (Bitcoin)'}]),\n                \n                dict(label='litecoin',\n                     method='update',\n                     args=[{'visible': [False, True, False, False]},\n                           {'title': 'Candlestick chart (Litecoin)'}]),\n                \n                dict(label='ethereum',\n                     method='update',\n                     args=[{'visible': [False,  False, True, False]},\n                           {'title': 'Candlestick chart (Ethereum)'}]),\n                \n                dict(label='monero',\n                     method='update',\n                     args=[{'visible': [False, False, False, True]},\n                           {'title': 'Candlestick chart (Monero)'}]),                            \n            ]),\n        )\n    ])\n\n# Set slider selection buttons:\nfig.update_xaxes(\n    rangeslider_visible=True,\n    rangeselector=dict(\n        buttons=list([\n            dict(count=1, label='1m', step='month', stepmode='backward'),\n            dict(count=6, label='6m', step='month', stepmode='backward'),\n            dict(count=1, label='1y', step='year', stepmode='backward'),\n            dict(count=1, label='YTD', step='year', stepmode='todate')\n        ])\n    )\n)\n\n\n# Set title\nfig.update_layout(title_text='Candlestick charts for selected cryptocurrency')\n\n# Set x and y-axis titles\nfig.update_xaxes(title_text='Date')\nfig.update_yaxes(title_text='Price ($)')\n\nfig.show()                ","08177ff3":"# Define Diff as a difference between Close and Open:\nfor i in crypto:\n    i['Diff'] = i['Close'] - i['Open']\n    i['Color'] = np.where(i['Diff']<0, 'red', 'green')","9faf7aaf":"# Bar charts for price difference:\n\nfig = go.Figure()\n\n# Add Traces\nfig.add_trace(go.Bar(x=bitcoin['Date']\n                     , y=bitcoin['Diff']\n                     , marker_color=bitcoin['Color']\n                    ))\n\nfig.add_trace(go.Bar(x=litecoin['Date']\n                     , y=litecoin['Diff']\n                     , marker_color=litecoin['Color']\n                     , visible=False\n                    ))\n\nfig.add_trace(go.Bar(x=ethereum['Date']\n                     , y=ethereum['Diff']\n                     , marker_color=ethereum['Color']\n                     , visible=False\n                    ))\n\nfig.add_trace(go.Bar(x=monero['Date']\n                     , y=monero['Diff']\n                     , marker_color=monero['Color']\n                     , visible=False\n                    ))\n\n# Add Buttons\nfig.update_layout(\n    updatemenus=[\n        dict(\n            active=0,\n            buttons=list([ \n                \n                dict(label='bitcoin',\n                     method='update',\n                     args=[{'visible': [True, False,False, False]},\n                           {'title': 'Price Difference (Bitcoin)'}]),\n                \n                dict(label='litecoin',\n                     method='update',\n                     args=[{'visible': [False, True, False, False]},\n                           {'title': 'Price Difference (Litecoin)'}]),\n                \n                dict(label='ethereum',\n                     method='update',\n                     args=[{'visible': [False,  False, True, False]},\n                           {'title': 'Price Difference (Ethereum)'}]),\n                \n                dict(label='monero',\n                     method='update',\n                     args=[{'visible': [False, False, False, True]},\n                           {'title': 'Price Difference (Monero)'}]),                            \n            ]),\n        )\n    ])\n# Set slider selection buttons:\nfig.update_xaxes(\n    rangeslider_visible=True,\n    rangeselector=dict(\n        buttons=list([\n            dict(count=1, label='1m', step='month', stepmode='backward'),\n            dict(count=6, label='6m', step='month', stepmode='backward'),\n            dict(count=1, label='1y', step='year', stepmode='backward'),\n            dict(count=1, label='YTD', step='year', stepmode='todate')\n        ])\n    )\n)\n\n\n# Set title\nfig.update_layout(title_text='Bar Charts for Price Difference')\n\n# Set x and y-axis titles\nfig.update_xaxes(title_text='Date')\nfig.update_yaxes(title_text='Price difference ($)')\n\nfig.show()                ","e22a9f5d":"fig = make_subplots(rows=2, cols=2)\n\ntrace0 = go.Histogram(x=bitcoin['Adj Close'], name='bitcoin', autobinx=True)\ntrace1 = go.Histogram(x=litecoin['Adj Close'], name='litecoin', autobinx=True)\ntrace2 = go.Histogram(x=ethereum['Adj Close'], name='ethereum', autobinx=True)\ntrace3 = go.Histogram(x=monero['Adj Close'], name='monero', autobinx=True)\n                     \n\nfig.append_trace(trace0, 1, 1)\nfig.append_trace(trace1, 1, 2)\nfig.append_trace(trace2, 2, 1)\nfig.append_trace(trace3, 2, 2)\n\n# Update xaxis properties\nfig.update_xaxes(title_text='Adj Close ($)', row=1, col=1)\nfig.update_xaxes(title_text='Adj Close ($)', row=1, col=2)\nfig.update_xaxes(title_text='Adj Close ($)',  row=2, col=1)\nfig.update_xaxes(title_text='Adj Close ($)',  row=2, col=2)\n\n# Update yaxis properties\nfig.update_yaxes(title_text='count', row=1, col=1)\nfig.update_yaxes(title_text='count', row=2, col=1)\n\n# Update title and height\nfig.update_layout(title_text='Distributions of Adj Close for', height=800)\n\n\nfig.show()\n","21ec9a9a":"# Create a DataFrame, that contains closing prices of all our cryptocurrencies: \ncryptocurrencies = ['BTC-USD', 'LTC-USD', 'XMR-USD', 'ETH-USD']\n\nclosing_df = web.DataReader(cryptocurrencies, 'yahoo', start, end_t)['Adj Close']","a2ac97a3":"closing_df.head()","936374c6":"# For easier manipulation, rename columns to:\nclosing_df.columns = ['Bitcoin', 'Ethereum', 'Litecoin', 'Monero']","bf02b9c6":"# Correlation Matrix\ncorr = closing_df.corr()","6e0bdf58":"l = list(corr.columns)\n\nfig = ff.create_annotated_heatmap(np.array(round(corr,4)), x=l, y=l, colorscale = 'Bluered', reversescale=True)\nfig.update_layout(title='Correlation of Adj Close')\n\nfig.show()","78d15a56":"# Import tensorflow and keras:\nimport tensorflow as tf\nfrom tensorflow import keras\nassert tf.__version__ >= \"2.0\"\n\nfrom sklearn.preprocessing import MinMaxScaler\nfrom tensorflow.keras.layers import  Dropout, Dense, LSTM\nfrom tensorflow.keras.models import Sequential\n\n# Initilise scaler:\nscaler = MinMaxScaler()","91f8c7f6":"# Fill in missing values and sort index by ascending in data:\ndata = bitcoin[['Adj Close']].fillna(method='backfill').sort_index(ascending=True, axis=0)\n\n# Reshape adj close (create one column array ) and overvrite values of Adj Close with scaled values:\nadj_price = data['Adj Close'].values.reshape(-1, 1)\ndata['Adj Close'] = scaler.fit_transform(adj_price)","91caf098":"# Split data into training and testing part:\nprediction_days = 10\n\ntraining = data[:len(data)-prediction_days]\ntesting = data[len(data)-prediction_days:]","aa546394":"# Define X_train, y_train:\ntraining_set = training.values\ntraining_set = scaler.fit_transform(training_set)\n\nX_train = training_set[0:len(training_set)-1]\nX_train = np.reshape(X_train, (len(X_train), 1, 1))\n\ny_train = training_set[1:len(training_set)]","47a43b59":"# Define the model network: \n\nmodel = Sequential()\n# Add the input layer and the LSTM layer\nmodel.add(LSTM(units = 4, activation = 'sigmoid', input_shape=(None, 1)))\n# Add the output layer\nmodel.add(Dense(units = 1))\n\n# Compile the model:\nmodel.compile(optimizer = 'adam', loss = 'mean_squared_error')\n\n# Using the training set to train the model:\nmodel.fit(X_train, y_train, batch_size = 5, epochs = 100)\n","f536b33a":"testing_set = testing.values\n\ninputs = np.reshape(testing_set, (len(testing_set), 1))\ninputs = scaler.transform(inputs)\ninputs = np.reshape(inputs, (len(inputs), 1, 1))\n\npredicted_price = model.predict(inputs)\npredicted_price = scaler.inverse_transform(predicted_price)","d8a57a2b":"\n\nfig = go.Figure()\n\n# Add Traces\nfig.add_trace(go.Scatter(x=[1,2,3,4,5,6,7,8,9,10]\n                         , y=testing_set[:, 0]\n                         , name='BTC Price - real'\n                         #, visible=True\n                        ))\n\nfig.add_trace(go.Scatter(x=[1,2,3,4,5,6,7,8,9,10]\n                         , y=predicted_price[:, 0]\n                         , name='BTC Price - predicted'\n                         #, visible=True\n                        ))\n\n# Set title\nfig.update_layout(title_text='Bitcoin Price Prediction')\n\n# Set x and y-axis titles\nfig.update_xaxes(title_text='# of Days')\nfig.update_yaxes(title_text='Price ($)')\n\nfig.show()   ","422f4bdc":"Moving averages are used to gauge the direction of the current trend. Every type of moving average is a mathematical result that is calculated by averaging a number of past data points. Once determined, the resulting average is then plotted onto a chart in order to allow traders to look at smoothed data rather than focusing on the day-to-day price fluctuations that are inherent in all financial markets. <br>\n<br>\nThe simplest form of a moving average, appropriately known as a simple moving average (SMA), is calculated by taking the arithmetic mean of a given set of values. In other words, a set of numbers, or prices in the case of financial instruments, are added together and then divided by the number of prices in the set. <br>\n<br>\nFor example, to calculate a basic 7-day moving average you would add up the closing prices from the past 7 days and then divide the result by 7. <br>\n<br>\nYou can find out more about moving averages on [investopedia](https:\/\/www.investopedia.com\/university\/movingaverage\/movingaverages1.asp).","ec82b847":"### C. Moving averages <a class=\"anchor\" id=\"section3.3\"><\/a>\n\n","03aef47e":"We would like to predict adj close price of bitcoin for 10 days, so we will assign 10 recent values to testing. Dataset training will consist of the rest of the values (without recent 10 days).","fd009061":"Here we use training part of data to define X_train and y_train. We can describe coordinates (X_train, y_train) as (training[Adj Close], training[Adj Close] for the following day).","d4c48e49":"### F. Histograms <a class=\"anchor\" id=\"section3.6\"><\/a>","a232509c":"### A. Exploring the data <a class=\"anchor\" id=\"section3.1\"><\/a>","bdc56fee":"## 1. Importing libraries <a class=\"anchor\" id=\"section1\"><\/a>\n\nBefore we start, we need to import couple of python libraries:","3f22aa9d":"### A. Imports <a class=\"anchor\" id=\"mlImports\"><\/a>","1138b950":"Creating candlestic chart for historical price of Bitcoin. ","192b7430":"### D. Model testing <a class=\"anchor\" id=\"mlTesting\"><\/a>","dd50b577":"To visualise daily difference between Close and Open price of Bitcoin we will use bar charts. ","8d2acd3a":"### B. Data preparation <a class=\"anchor\" id=\"mlData\"><\/a>","d9feed8c":"To display historical price of Bitcoin we will be using a line graph. A line graph is commonly used to display change over time as a series of data points connected by straight line segments on two axes.\n\nWe can compare a historical price movement for 2 or more cryptocurrencies. Since the price of Bitcoin is significatly higher than the price of other cryptocurrencies from our selection, we will use dual axis.\n\nOn the y axis on the left hand side we display Bitcoin price and on the right hand side is Litecoin, Monero and Ethereum's price. We add label for easier graph reading.","04569d52":"### D. Candlestick charts <a class=\"anchor\" id=\"section3.4\"><\/a>\n\n","5c6b7431":"## 2. Setting the data <a class=\"anchor\" id=\"section2\"><\/a>\n\nWe start by defining a timeframe for cryptocurrenies data. In our code start is set as 1 year ago and end is a current day (the day you rerun the code). <br>\nTo change start and end from timestamp into 'yyyy-mm-dd'format we use .strftime('%Y-%m-%d').","f42115fb":"### B. Line graphs <a class=\"anchor\" id=\"section3.2\"><\/a>\n","3d8f939b":"We have 7 columns in our DataFrame: Date, High, Low, Open, Close, Volume and Adj Close.","28dadfbf":"Scatterplots above just confirm a strong positive correlation between our cryptocurrenices.","c2ddfa73":"Following histograms give us an overview of closing price distribution for a given cryptocurrency with Price in $ on x-axis and Volume on y-axis.","47ee9194":"**Content:** \n\n1. [Importing libraries](#section1)\n2. [Setting the data](#section2)\n3. [Visualising data - Exploratory Data Analysis (EDA)](#section3) <br>\n    A. [Exploring the data](#section3.1) <br>\n    B. [Line graphs](#section3.2) <br>\n    C. [Moving averages](#section3.3) <br>\n    D. [Candlestick charts](#section3.4) <br>\n    E. [Bar charts](#section3.5) <br>\n    F. [Histograms](#section3.6) <br>\n    G. [Correlation](#section3.7)\n4. [Price Prediction](#section4)   \n    A. [Imports](#mlImports) <br>\n    B. [Data preparation](#mlData) <br>\n    C. [Model training](#mlTraining) <br>\n    D. [Model testing](#mlTesting) <br>","de2c4c48":"As we can see above, the correlation for selected cryptocurrenies is strong positive. This means that the price of cryptocurrencies has a strong tendency to move the same way (increasing or decreasing).","5cbd0610":"In the next part we will extract Adj Close from bitcoin dataframe and fill in missing values by backfill method.\n\nWe will also apply MinMaxScaler to rescale the data in Adj Close column.","fceef9e1":"## 4. Price prediction <a class=\"anchor\" id=\"section4\"><\/a>","1580213f":"To obtain historical data, we use the code below. Make sure that the price of each cryptocurrency is defined in the same currency (in this case $USD). <br>\nNext step is to .reset_index() this helps to change 'Date' into DataFrame column. ","1d8544d6":"# Bitcoin - Price Prediction & Analysing Historical Data","1901585d":"Correlation, in the finance and investment industries, is a statistic that measures the degree to which two securities move in relation to each other. Correlations are used in advanced portfolio management, computed as the correlation coefficient, which has a value that must fall between -1.0 and +1.0.<br>\n<br>\nTo find out more about correlation go to [investopedia](https:\/\/www.investopedia.com\/terms\/c\/correlation.asp).\n\nWe will have a look at correlation for Adj Close for our cryptocurrencies.","a65e4c71":"In this part we would like to predict bitcoin's Adj Close price for the following 10 days. To be able to measure accuracy we need to go a 10 days backwards and use already known prices.","cc0ae8a5":"The imports below allow us to read data from Yahoo Finance:","55bdab8a":"### E. Bar charts <a class=\"anchor\" id=\"section3.5\"><\/a>","f7b7430f":"A cryptocurrency is a digital or virtual currency that uses cryptography for security. They were never intended to be invited to the form we know them today. \nIt all started back in 2008 with Satoshi Nakamoto's attempt to create decentrelised peer 2 peer electronic cash system, known as Bitcoin. In 2018, 10 years later, there are more than 1,600 cryptocurrencies available.\n\nIn this project we will have a look at Bitcoin, Ethereum, Moneo and Litecoin. Considering historic price, we will find out what was the movement of the value of cryptocurrencies over the last year.\n\nWe start with importing python libraries and obtaining the data from yahoo finance for the last year. We also show some  trends by using linegraphs, moving averages and candlestick charts for closing price values. To show Open and Close price difference we will use bar graph. Heatmap will give us an overview of correlation between prices of our cryptocurrencies. \n\nIn the last part we will develop a simple model for bitcoin's closing price prediction.\n\n<img src='http:\/\/bit.ly\/2Wupsmv' width=900, heigth=800 align='center'\/>","c9d50b57":"A candlestick chart (also called Japanese candlestick chart) is a style of financial chart used to describe price movements of a security, derivative, or currency.\n\nFor creating candlestic chart we will use plotly. Plotly is Python graphing library that allows us to create interactive graphs. After zooming in the chart (by using slider) you will find someting like: \n\n<img src='https:\/\/www.forextrainingacademy.com\/wp-content\/uploads\/2013\/05\/forex-Candlesticks.jpg'  align='center'\/>","2ed09eb3":"## 3. Visualising data - Exploratory Data Analysis (EDA) <a class=\"anchor\" id=\"section3\"><\/a>","c7bd73ab":"### G. Correlation <a class=\"anchor\" id=\"section3.7\"><\/a>","f4ca4983":"### C. Model training <a class=\"anchor\" id=\"mlTraining\"><\/a>"}}