{"cell_type":{"341afe64":"code","d6a49b69":"code","1ae4f780":"code","512278d9":"code","b877079f":"code","af4542ed":"code","70268cda":"code","1bb9e22d":"code","2ab46ca6":"code","1ca18146":"code","1f591426":"code","0722a0fd":"code","97566274":"code","3e821ff8":"code","c5b6807d":"code","32ae8920":"code","c6c6a611":"markdown","9c6fc12d":"markdown"},"source":{"341afe64":"import tensorflow as tf\nfrom tensorflow import keras\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport numpy as np\nimport pandas as pd\nimport seaborn as sn\n","d6a49b69":"train=pd.read_csv('..\/input\/digit-recognizer\/train.csv')\ntrain.head(5)","1ae4f780":"test=pd.read_csv('..\/input\/digit-recognizer\/test.csv')\ntest.head(5)","512278d9":"print(train.shape)\nprint(test.shape)","b877079f":"y_train=train['label']\nx_train=train.drop(['label'],axis=1)\nx_test= test\n\nx_train.shape, x_test.shape, y_train.shape\n","af4542ed":"y_train","70268cda":"x_train = x_train.values.reshape(x_train.shape[0], 28, 28, 1) #or we can use -1 on the place of x_train.shape\nx_train=x_train\/255.0\nx_test = x_test.values.reshape(x_test.shape[0], 28, 28, 1)\nx_test=x_test\/255.0","1bb9e22d":"x_train.shape, x_test.shape","2ab46ca6":"#One Hot Encoding \ny_train= keras.utils.to_categorical(y_train,10)\ny_train.shape","1ca18146":"#Printing original labels \nprint(train['label'].head()) ","1f591426":"y_train","0722a0fd":"print(y_train[0:5,:])","97566274":"model = tf.keras.models.Sequential ([\n\ntf.keras.layers.Conv2D(32,(3,3), activation = 'relu', input_shape=(28,28,1)), \ntf.keras.layers. Conv2D(32, (3,3), activation = 'relu'),\ntf.keras.layers. MaxPooling2D(2,2),\ntf. keras.layers.Conv2D(64, (3,3), activation = \"relu\", padding = 'Same'), \ntf.keras.layers.Conv2D(64, (3,3), activation = 'relu', padding = 'Same'),\ntf. keras.layers. MaxPooling2D(pool_size = (2,2), strides = (2,2)),\ntf.keras.layers.Dropout (0.25),\ntf.keras.layers.Conv2D(64, (3,3), activation =\"relu\", padding= \"Same\"),\ntf.keras. layers.Conv2D(64, (3,3), activation = 'relu', padding = 'Same'), \ntf.keras.layers. MaxPooling2D(pool_size = (2,2), strides = (2,2)),\ntf.keras.layers.Dropout (0.25),\ntf.keras.layers. Flatten(),\ntf.keras.layers.Dense(256, activation='relu'),\n#tf.keras.layers.Dropout(0.58),\ntf.keras.layers.Dense(256, activation='relu'),\ntf.keras.layers.Dropout (0.50), \ntf.keras.layers.Dense(10, activation='softmax')\n\n])\n\nmodel.summary()","3e821ff8":"#Defining the callback function to stop our training once the acceptable accuracy is reached\n\nclass myCallback(keras.callbacks.Callback):\n    def on_end_epoch(self,epoch,logs={}):\n        if(logs.get('accuracy')>0.999):\n            print(\"\\n Reached 99.9% accuracy so cancelling our training! \")\n            self.model.stop_training= True\ncallbacks= myCallback()","c5b6807d":"#Compiling and model training with batch size = 50, epochs=20 and optimizer =adam\n\nOptimizer= keras.optimizers.Adam(\n            learning_rate=0.0005,\n            beta_1=0.9,\n            beta_2=0.999,\n            epsilon=1e-07,\n            name='Adam'\n)\n\nmodel.compile(optimizer=Optimizer, loss='categorical_crossentropy', metrics=['accuracy'])\nmodel.fit(x_train, y_train, batch_size=50, epochs=20, callbacks=[callbacks])","32ae8920":"results= model.predict(x_test)\n\n#to select the indexes with the maximum probability\nresults= np.argmax(results,axis=1)\nresults=pd.Series(results,name=\"Label\")\nresults","c6c6a611":"**Importing Modules**","9c6fc12d":"**Creating Model**"}}