{"cell_type":{"fdeb749d":"code","f8b49bfe":"code","45076233":"code","ee65c555":"code","360d3c8d":"code","c158236c":"code","da336ce2":"code","129b709d":"code","ba5716cf":"code","1aeea661":"code","7b66d85d":"code","5e6793a2":"code","4f816ccf":"code","f1c5e403":"code","edece233":"code","1521aad3":"code","c9e35516":"code","89d68af0":"code","5b266806":"code","e435669c":"code","d325aede":"code","fb875540":"code","343ba2e0":"code","adf75aed":"code","eba55316":"code","04d632f6":"code","7a0fe661":"code","62a53fb4":"code","38c42f6a":"code","04fe43d7":"code","920be163":"code","16dc350b":"code","115165e8":"code","b0326d0e":"code","de5f1c97":"code","f39132da":"code","9f280e96":"code","d0a53156":"code","cbf4ce86":"code","e5827db6":"code","f75da4ba":"code","d884f2da":"code","3ce49ae6":"code","cfc555d6":"code","1729f1c5":"code","86345b0d":"code","37414a65":"code","778d8e66":"code","f3bf4f6f":"code","fc2374fa":"code","b4340c20":"code","08855b36":"code","05eed5bf":"code","075d8706":"code","0bef9e3c":"code","7d95b916":"code","6c01ee66":"code","af32d883":"code","3deb2e04":"code","64921409":"code","782d8644":"code","3f658a20":"code","2e4b1594":"code","14f427e1":"code","d8345091":"code","01a0c77a":"code","54d4bdd9":"code","8573aee6":"code","7a50df7d":"code","41de3647":"code","07ea5a14":"code","f29c2da3":"code","ccbe259e":"code","87a69287":"code","5712320a":"code","9d580e18":"code","cdb4b172":"code","ca849d48":"code","37af629c":"code","358f56fb":"code","4fcfe1c6":"code","aca906e7":"code","59752609":"code","1f6d7786":"code","e44660e9":"code","d5614afd":"code","a7290678":"code","0a8ea7e5":"code","800ca040":"code","f536d09c":"code","f664e2ed":"code","c12e2eb8":"code","f40affcb":"code","39d44a92":"code","b8a6f367":"code","75693e5b":"code","744b4ceb":"code","d5a190a8":"code","bdbf7ee1":"code","05fdc069":"code","d3738cc3":"code","99458844":"code","26998f15":"code","1a57404a":"code","92607a83":"code","848fbb4f":"code","c238307e":"code","0cc33ebf":"code","a811cbd3":"code","b6754406":"code","b5a1e033":"code","9d3dfb9c":"code","4866b39c":"code","d9bd2228":"code","29bac20f":"code","c36fbfb4":"code","6591a772":"code","6ad85629":"code","32ff14a1":"code","7c6d5acd":"markdown","7bcb5a48":"markdown","22866848":"markdown","5460b3a1":"markdown","70cc0c47":"markdown","1e54b0cd":"markdown","9b0d2084":"markdown","bc82286b":"markdown","e960f66a":"markdown","444c84e4":"markdown","1c4432e5":"markdown","f0b09331":"markdown","e7c7b257":"markdown","38c20234":"markdown","d6b58755":"markdown","d0d3c753":"markdown","f2c888f7":"markdown","1f3b2130":"markdown","b7267767":"markdown","739ed2ea":"markdown","55501751":"markdown","63dc399b":"markdown","63846647":"markdown","513e0048":"markdown","4d4bc5e6":"markdown","9605107c":"markdown","7b54a2b6":"markdown","a5929419":"markdown","1bb7c6ee":"markdown","b9a3cd15":"markdown","8253ba03":"markdown"},"source":{"fdeb749d":"# data analysis libraries:\nimport numpy as np\nimport pandas as pd\n\n# data visualization libraries:\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# to ignore warnings:\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# to display all columns:\npd.set_option('display.max_columns', None)\n\nfrom sklearn.model_selection import train_test_split, GridSearchCV","f8b49bfe":"pwd","45076233":"# Read train and test data with pd.read_csv():\ntrain_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\n","ee65c555":"# copy data in order to avoid any change in the original:\ntrain=train_data.copy()\ntest=test_data.copy()","360d3c8d":"train.head()","c158236c":"test.head()","da336ce2":"train.info()","129b709d":"train.describe().T","ba5716cf":"train['Pclass'].value_counts()","1aeea661":"train[\"Sex\"].value_counts()","7b66d85d":"train[\"SibSp\"].value_counts()","5e6793a2":"train[\"Parch\"].value_counts()","4f816ccf":"train[\"Ticket\"].value_counts()","f1c5e403":"train[\"Cabin\"].value_counts()","edece233":"train[\"Embarked\"].value_counts()","1521aad3":"sns.barplot(x=\"Pclass\",y=\"Survived\", data=train) ;","c9e35516":"sns.barplot(x=\"SibSp\", y=\"Survived\" , data= train);","89d68af0":"sns.barplot(x= \"Parch\" , y=\"Survived\", data=train);","5b266806":"sns.barplot(x=\"Sex\",y=\"Survived\" , data= train);","e435669c":"train.info()","d325aede":"Age_visualization=train[\"Age\"].dropna()","fb875540":"sns.distplot(Age_visualization, kde = False);","343ba2e0":"sns.kdeplot(train[\"Fare\"], shade = True);","adf75aed":"(sns\n .FacetGrid(train,\n              hue = \"Survived\",\n              height = 7,\n              xlim = (0, 500))\n .map(sns.kdeplot, \"Fare\", shade= True)\n .add_legend()\n);","eba55316":"(sns\n .FacetGrid(train,\n              hue = \"Survived\",\n              height = 5,\n              xlim = (0, 90))\n .map(sns.kdeplot, \"Age\", shade= True)\n .add_legend()\n);","04d632f6":"train.head()","7a0fe661":"train= train.drop(\"Ticket\", axis=1)\ntest=test.drop(\"Ticket\", axis=1)\ntrain.head()\n","62a53fb4":"train.describe().T","38c42f6a":"sns.boxplot(x=train[\"Fare\"]);","04fe43d7":"Q1= train[\"Fare\"].quantile(0.25)\nQ3= train[\"Fare\"].quantile(0.75)\nIQR=Q3-Q1\n\nlower_limit=Q1-1.5*IQR\nupper_limit=Q3+1.5*IQR\nupper_limit","920be163":"test.isnull().sum()","16dc350b":"train.sort_values(\"Fare\", ascending=False).head(20)","115165e8":"train_Fare=train[\"Fare\"]","b0326d0e":"test_Fare=test[\"Fare\"]","de5f1c97":"upper_fare=263","f39132da":"aykiri_train = (train_Fare>upper_fare)\n","9f280e96":"aykiri_test = (test_Fare> upper_fare)\n","d0a53156":"train_Fare[aykiri_train] = upper_fare","cbf4ce86":"train[\"Fare\"]=train_Fare","e5827db6":"test_Fare[aykiri_test] = upper_fare","f75da4ba":"test[test[\"PassengerId\"]==1044]","d884f2da":"train.sort_values(\"Fare\", ascending=False).head(20)","3ce49ae6":"test.sort_values(\"Fare\", ascending=False).head()","cfc555d6":"train.isnull().sum()","1729f1c5":"test.isnull().sum()","86345b0d":"train[\"Title\"] = train[\"Name\"].str.extract(' ([A-Za-z]+)\\.', expand=False)\ntest[\"Title\"] = test[\"Name\"].str.extract(' ([A-Za-z]+)\\.', expand=False)","37414a65":"train.head()","778d8e66":"train['Title'] = train['Title'].replace([ 'Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Jonkheer', 'Dona'], 'Rare')\ntrain['Title'] = train['Title'].replace(['Countess', 'Lady', 'Sir'], 'Royal')\ntrain['Title'] = train['Title'].replace('Mlle', 'Miss')\ntrain['Title'] = train['Title'].replace('Ms', 'Miss')\ntrain['Title'] = train['Title'].replace('Mme', 'Mrs')","f3bf4f6f":"test['Title'] = test['Title'].replace([ 'Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Jonkheer', 'Dona'], 'Rare')\ntest['Title'] = test['Title'].replace(['Countess', 'Lady', 'Sir'], 'Royal')\ntest['Title'] = test['Title'].replace('Mlle', 'Miss')\ntest['Title'] = test['Title'].replace('Ms', 'Miss')\ntest['Title'] = test['Title'].replace('Mme', 'Mrs')","fc2374fa":"train[[\"Title\",\"Age\"]].groupby(\"Title\").mean()","b4340c20":"for i in train[\"Title\"]:\n    if i==\"Master\":\n        train[\"Age\"]=train[\"Age\"].fillna(4)\n    elif i==\"Miss\":\n        train[\"Age\"]=train[\"Age\"].fillna(22) \n    elif i==\"Mr\":\n        train[\"Age\"]=train[\"Age\"].fillna(32)\n    elif i==\"Mrs\":\n        train[\"Age\"]= train[\"Age\"].fillna(36)\n    elif i==\"Rare\":\n        train[\"Age\"]= train[\"Age\"].fillna(46)\n    else:\n        train[\"Age\"]=train[\"Age\"].fillna(41)","08855b36":"train.isnull().sum()","05eed5bf":"test[[\"Title\",\"Age\"]].groupby(\"Title\").mean()","075d8706":"for i in train[\"Title\"]:\n    if i==\"Master\":\n        test[\"Age\"]=test[\"Age\"].fillna(7)\n    elif i==\"Miss\":\n        test[\"Age\"]=test[\"Age\"].fillna(22) \n    elif i==\"Mr\":\n        test[\"Age\"]=test[\"Age\"].fillna(32)\n    elif i==\"Mrs\":\n        test[\"Age\"]= test[\"Age\"].fillna(38)\n    elif i==\"Rare\":\n        test[\"Age\"]= test[\"Age\"].fillna(44)\n    else:\n        test[\"Age\"]=test[\"Age\"].fillna(41)","0bef9e3c":"test.isnull().sum()","7d95b916":"test[[\"Pclass\",\"Fare\"]].groupby(\"Pclass\").mean()","6c01ee66":"test[\"Fare\"] = test[\"Fare\"].fillna(12)","af32d883":"test.isnull().sum()","3deb2e04":"train.isnull().sum()","64921409":"\ntrain[\"N_cabin\"] = (train[\"Cabin\"].notnull().astype('int'))\ntest[\"N_Cabin\"] = (test[\"Cabin\"].notnull().astype('int'))\n\ntrain = train.drop(['Cabin'], axis = 1)\ntest = test.drop(['Cabin'], axis = 1)\n\ntrain.head()","782d8644":"train.isnull().sum()","3f658a20":"test.isnull().sum()","2e4b1594":"train[\"Embarked\"].value_counts()","14f427e1":"train[\"Embarked\"]=train[\"Embarked\"].fillna(\"S\")","d8345091":"\nfrom sklearn import preprocessing\n\nlbe=preprocessing.LabelEncoder()\ntrain[\"Embarked\"]=lbe.fit_transform(train[\"Embarked\"])\ntest[\"Embarked\"]=lbe.fit_transform(test[\"Embarked\"])\n","01a0c77a":"train.head()","54d4bdd9":"Sex_mapping={\"male\":0,\"female\":1}\ntrain[\"Sex\"]=train[\"Sex\"].map(Sex_mapping)\ntest[\"Sex\"]=test[\"Sex\"].map(Sex_mapping)","8573aee6":"train.head()","7a50df7d":"train[[\"Title\",\"Survived\"]].groupby([\"Title\"], as_index=False).mean().sort_values(\"Survived\")","41de3647":"Title_mapping={\"Mr\":1,\"Rare\":2,\"Master\":3,\"Miss\":4,\"Mrs\":5,\"Royal\":2}\ntrain[\"Title\"]=train[\"Title\"].map(Title_mapping)\ntest[\"Title\"]=test[\"Title\"].map(Title_mapping)","07ea5a14":"train.head()","f29c2da3":"test.head()","ccbe259e":"train_name=train[\"Name\"]\nfor i in train['Name']:\n    train['Name']= train['Name'].replace(i,len(i))\n    \n      \n","87a69287":"train[\"Name\"]","5712320a":"for i in test['Name']:\n    test['Name']= test['Name'].replace(i,len(i))","9d580e18":"test[\"Name\"].describe()","cdb4b172":"bins = [0,25,40, np.inf]\nmylabels = ['s_name', 'm_name', 'l_name',]\ntrain[\"Name_len\"] = pd.cut(train[\"Name\"], bins, labels = mylabels)\ntest[\"Name_len\"] = pd.cut(test[\"Name\"], bins, labels = mylabels)","ca849d48":"train[\"Name_len\"].value_counts()","37af629c":"train[[\"Name_len\",\"Survived\"]].groupby(\"Name_len\").mean()","358f56fb":"Name_mapping = {'s_name': 1, 'm_name': 2 , 'l_name': 3}\ntrain['Name_len'] = train['Name_len'].map(Name_mapping)\ntest['Name_len'] = test['Name_len'].map(Name_mapping)","4fcfe1c6":"train.head()","aca906e7":"train = train.drop(['Name'], axis = 1)\ntest = test.drop(['Name'], axis = 1)","59752609":"sns.distplot(train[\"Age\"], kde = False);","1f6d7786":"sns.distplot(Age_visualization, kde = False);","e44660e9":"bins = [0, 5, 12, 18, 24, 35, 60, np.inf]\nmylabels = ['Baby', 'Child', 'Teenager', 'Student', 'Young Adult', 'Adult', 'Senior']\ntrain['AgeGroup'] = pd.cut(train[\"Age\"], bins, labels = mylabels)\ntest['AgeGroup'] = pd.cut(test[\"Age\"], bins, labels = mylabels)","d5614afd":"train[[\"AgeGroup\",\"Survived\"]].groupby(\"AgeGroup\").mean()","a7290678":"# Map each Age value to a numerical value:\nage_mapping = {'Baby': 1, 'Child': 2, 'Teenager': 3, 'Student': 4, 'Young Adult':5 , 'Adult': 6, 'Senior':7}\ntrain['AgeGroup'] = train['AgeGroup'].map(age_mapping)\ntest['AgeGroup'] = test['AgeGroup'].map(age_mapping)","0a8ea7e5":"train.head()","800ca040":"train['FareBand'] = pd.qcut(train['Fare'], 8, labels = [1, 2, 3, 4,5,6,7,8])\ntest['FareBand'] = pd.qcut(test['Fare'], 8, labels = [1, 2, 3, 4,5,6,7,8])","f536d09c":"train.head()","f664e2ed":"train.head()","c12e2eb8":"train[\"FamilySize\"] =train[\"SibSp\"]+train[\"Parch\"]+1\ntrain[\"FamilySize\"].mean()","f40affcb":"test[\"FamilySize\"] =test[\"SibSp\"]+test[\"Parch\"]+1\ntest[\"FamilySize\"].mean()","39d44a92":"sns.distplot(train[\"FamilySize\"], kde = False);","b8a6f367":"train['Single'] = train['FamilySize'].map(lambda s: 1 if s == 1 else 0)\ntrain['SmallFam'] = train['FamilySize'].map(lambda s: 1 if  s == 2  else 0)\ntrain['MedFam'] = train['FamilySize'].map(lambda s: 1 if 3 <= s <= 4 else 0)\ntrain['LargeFam'] = train['FamilySize'].map(lambda s: 1 if s >= 5 else 0)","75693e5b":"test['Single'] = test['FamilySize'].map(lambda s: 1 if s == 1 else 0)\ntest['SmallFam'] = test['FamilySize'].map(lambda s: 1 if  s == 2  else 0)\ntest['MedFam'] = test['FamilySize'].map(lambda s: 1 if 3 <= s <= 4 else 0)\ntest['LargeFam'] = test['FamilySize'].map(lambda s: 1 if s >= 5 else 0)\n","744b4ceb":"train.head()","d5a190a8":"train = pd.get_dummies(train, columns = [\"Title\"])\ntrain = pd.get_dummies(train, columns = [\"Embarked\"], prefix=\"Em\")\n","bdbf7ee1":"test = pd.get_dummies(test, columns = [\"Title\"])\ntest = pd.get_dummies(test, columns = [\"Embarked\"], prefix=\"Em\")\n","05fdc069":"train[\"Pclass\"] = train[\"Pclass\"].astype(\"category\")\ntrain = pd.get_dummies(train, columns = [\"Pclass\"],prefix=\"Pc\")","d3738cc3":"test[\"Pclass\"] = test[\"Pclass\"].astype(\"category\")\ntest = pd.get_dummies(test, columns = [\"Pclass\"],prefix=\"Pc\")","99458844":"train.head()","26998f15":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\npredictors = train.drop(['Survived', 'PassengerId'], axis=1)\ntarget = train[\"Survived\"]\nx_train, x_test, y_train, y_test = train_test_split(predictors, target, test_size = 0.20, random_state = 0)","1a57404a":"x_train.shape","92607a83":"x_test.shape","848fbb4f":"from sklearn.linear_model import LogisticRegression\n\nlogreg = LogisticRegression()\nlogreg.fit(x_train, y_train)\ny_pred = logreg.predict(x_test)\nacc_logreg = round(accuracy_score(y_pred, y_test) * 100, 2)\nprint(acc_logreg)","c238307e":"from sklearn.ensemble import RandomForestClassifier\n\nrandomforest = RandomForestClassifier()\nrandomforest.fit(x_train, y_train)\ny_pred = randomforest.predict(x_test)\nacc_randomforest = round(accuracy_score(y_pred, y_test) * 100, 2)\nprint(acc_randomforest)","0cc33ebf":"from sklearn.ensemble import GradientBoostingClassifier\n\ngbk = GradientBoostingClassifier()\n\ngbk.fit(x_train, y_train)\ny_pred = gbk.predict(x_test)\nacc_gbk = round(accuracy_score(y_pred, y_test) * 100, 2)\nprint(acc_gbk)","a811cbd3":"gbk","b6754406":"xgb_params = {\n        'n_estimators': [200, 500],\n        'subsample': [0.6, 1.0],\n        'max_depth': [2,5,8],\n        'learning_rate': [0.1,0.01,0.02],\n        \"min_samples_split\": [2,5,10]}","b5a1e033":"xgb = GradientBoostingClassifier()\n\nxgb_cv_model = GridSearchCV(xgb, xgb_params, cv = 10, n_jobs = -1, verbose = 2)","9d3dfb9c":"xgb_cv_model.fit(x_train, y_train)","4866b39c":"xgb_cv_model.best_params_","d9bd2228":"xgb = GradientBoostingClassifier(learning_rate = xgb_cv_model.best_params_[\"learning_rate\"], \n                    max_depth = xgb_cv_model.best_params_[\"max_depth\"],\n                    min_samples_split = xgb_cv_model.best_params_[\"min_samples_split\"],\n                    n_estimators = xgb_cv_model.best_params_[\"n_estimators\"],\n                    subsample = xgb_cv_model.best_params_[\"subsample\"])","29bac20f":"xgb_tuned =  xgb.fit(x_train,y_train)","c36fbfb4":"y_pred = xgb_tuned.predict(x_test)\nacc_gbk = round(accuracy_score(y_pred, y_test) * 100, 2)\nprint(acc_gbk)","6591a772":"test","6ad85629":"ids = test['PassengerId']\npredictions = xgb_tuned.predict(test.drop('PassengerId', axis=1))\n\n#set the output as a dataframe and convert to csv file named submission.csv\noutput = pd.DataFrame({ 'PassengerId' : ids, 'Survived': predictions })\noutput.to_csv('submission.csv', index=False)","32ff14a1":"output","7c6d5acd":"## Basic summary statistics about the numerical data","7bcb5a48":"# Variable Transformation","22866848":"# Data Preparations","5460b3a1":"## Loading Data","70cc0c47":"# Feature Engineering","1e54b0cd":"## Family Size","9b0d2084":"## Random Forest","bc82286b":"## Cabin","e960f66a":"## Embarked & Title &   Pclass","444c84e4":"# Data Understanding","1c4432e5":"## Name and Title","f0b09331":"## Spliting the train data","e7c7b257":"## Visualization","38c20234":"## Deleting Unnecessary Variables","d6b58755":"## Sex","d0d3c753":"# Modeling, Evaluation and Model Tuning","f2c888f7":"## Classes of some categorical variables","1f3b2130":"## Deployment","b7267767":"## Ticket","739ed2ea":"In general, barplot is used for categorical variables while histogram, density and boxplot are used for numerical data.","55501751":"## Embarked","63dc399b":"## Gradient Boosting Classifier","63846647":"# Missing Value Treatment","513e0048":"## AgeGroup","4d4bc5e6":"## Embarked","9605107c":"## Librarires","7b54a2b6":"## Logistic Regression","a5929419":"## Age ","1bb7c6ee":"## Outlier Treatment","b9a3cd15":"# Analysis and Visualization of Numeric and Categorical Variables","8253ba03":"## Fare "}}