{"cell_type":{"05a6ebb0":"code","5e71cf76":"code","c884dc3d":"code","16f6fd1b":"code","75863320":"code","934eabbe":"code","511d0880":"code","0c1f5d13":"code","025017cc":"code","45989115":"code","bb0ca974":"code","7487696b":"code","127964c8":"code","9d12de4f":"code","83aa7ddd":"code","b561456c":"code","66c14d8d":"code","dc308b82":"code","4b9861ff":"markdown","3d414f43":"markdown","0dbf8b80":"markdown"},"source":{"05a6ebb0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5e71cf76":"train_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntrain_df = train_data\ntrain_data.head()","c884dc3d":"test_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_df = test_data\ntest_data.head()","16f6fd1b":"combine = [train_df, test_df]\ntrain_df.head(5)","75863320":"train_df.info()","934eabbe":"# Age column\n# NaN -> 0\uc73c\ub85c \ucc44\uc6b0\uae30\n\n#new_train_data = train_data.copy()\n\nmean = 0\n\ntrain_df[\"Age\"].fillna(value=mean, inplace=True)\nprint(train_df[\"Age\"])\n\ntest_df[\"Age\"].fillna(value=mean, inplace=True)\nprint(test_df[\"Age\"])","511d0880":"# Fare column\n# NaN -> \ud3c9\uade0\uc73c\ub85c \ucc44\uc6b0\uae30\n# Class 1 \ud3c9\uade0 : 84.15\n# Class 2 \ud3c9\uade0 : 20.66\n# Class 3 \ud3c9\uade0 : 13.68\n\n# test data\uc5d0 1\uac1c missing\n\ntest_df[test_df[\"Fare\"].isnull()]\ntest_df[\"Fare\"][152] = 13.68","0c1f5d13":"# obtain Title from name (Mr, Mrs, Miss etc)\nfor dataset in combine:\n    dataset['Title'] = dataset.Name.str.extract(' ([A-Za-z]+)\\.', expand=False)\n\n\nfor dataset in combine:\n    dataset['Title'] = dataset['Title'].replace(['Lady', 'Countess', 'Dona'],'Royalty')\n    dataset['Title'] = dataset['Title'].replace(['Mme'], 'Mrs')\n    dataset['Title'] = dataset['Title'].replace(['Mlle','Ms'], 'Miss')\n    dataset['Title'] = dataset['Title'].replace(['Capt', 'Col', 'Major','Rev'], 'Officer')\n    dataset['Title'] = dataset['Title'].replace(['Jonkheer', 'Don','Sir'], 'Royalty')\n    dataset.loc[(dataset.Sex == 'male')   & (dataset.Title == 'Dr'),'Title'] = 'Mr'\n    dataset.loc[(dataset.Sex == 'female') & (dataset.Title == 'Dr'),'Title'] = 'Mrs'\n\n#: count survived rate for different titles\ntrain_df[['Title', 'Survived']].groupby(['Title'], as_index=False).mean().sort_values(by='Survived', ascending=False)","025017cc":"train_df[['Title', 'Age']].groupby(['Title'], as_index=False).mean().sort_values(by='Age', ascending=False)","45989115":"# Fill Missing Age with Title Mean\n# Title \ud3c9\uade0\uc73c\ub85c \ube48 Age \ucc44\uc6b0\uae30 \n\nOfficer_mean = 49.272727\nRoyalty_mean = 41.6\nMrs_mean = 35.909091\nMr_mean = 32.470223\nMiss_mean = 21.845638\nMaster_mean = 4.574167\n\nfor dataset in combine:\n    dataset.loc[(dataset.Title == 'Officer')   & (dataset.Age == 0.0),'Age'] = Officer_mean\n    dataset.loc[(dataset.Title == 'Royalty')   & (dataset.Age == 0.0),'Age'] = Royalty_mean\n    dataset.loc[(dataset.Title == 'Mrs')   & (dataset.Age == 0.0),'Age'] = Mrs_mean\n    dataset.loc[(dataset.Title == 'Mr')   & (dataset.Age == 0.0),'Age'] = Mr_mean\n    dataset.loc[(dataset.Title == 'Miss')   & (dataset.Age == 0.0),'Age'] = Miss_mean\n    dataset.loc[(dataset.Title == 'Master')   & (dataset.Age == 0.0),'Age'] = Master_mean","bb0ca974":"# Covert 'Title' to numbers (Mr->1, Miss->2 ...)\ntitle_mapping = {\"Mr\": 1, \"Miss\": 2, \"Mrs\": 3, \"Master\": 4, \"Royalty\":5, \"Officer\": 6}\nfor dataset in combine:\n    dataset['Title'] = dataset['Title'].map(title_mapping)\n    dataset['Title'] = dataset['Title'].fillna(0)\n\n# Remove 'Name' and 'PassengerId' in training data, and 'Name' in testing data\ntrain_df = train_df.drop(['Name', 'PassengerId'], axis=1)\ntest_df = test_df.drop(['Name'], axis=1)\ncombine = [train_df, test_df]\n\n# if age < 16, set 'Sex' to Child\nfor dataset in combine:\n    dataset.loc[(dataset.Age < 16) & (dataset.Sex == 'female'),'Sex'] = 'Girl'\n    dataset.loc[(dataset.Age < 16) & (dataset.Sex == 'male'),'Sex'] = 'Boy'\n    \n# Covert 'Sex' to numbers (female:1, male:2)\nfor dataset in combine:\n    dataset['Sex'] = dataset['Sex'].map( {'female': 1, 'male': 0, 'Boy': 2, 'Girl': 3} ).astype(int)\n","7487696b":"freq_port = train_df.Embarked.dropna().mode()[0]\nfor dataset in combine:\n    dataset['Embarked'] = dataset['Embarked'].fillna(freq_port)\ntrain_df[['Embarked', 'Survived']].groupby(['Embarked'], as_index=False).mean().sort_values(by='Survived', ascending=False)\n\nfor dataset in combine:\n    dataset['Embarked'] = dataset['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)","127964c8":"# Create family size from 'sibsq + parch + 1'\nfor dataset in combine:\n    dataset['FamilySize'] = dataset['SibSp'] + dataset['Parch'] + 1\n\ntrain_df[['FamilySize', 'Survived']].groupby(['FamilySize'], as_index=False).mean().sort_values(by='Survived', ascending=False)\n\n#create another feature called IsAlone\nfor dataset in combine:\n    dataset['IsAlone'] = 0\n    dataset.loc[(dataset['FamilySize'] == 1), 'IsAlone'] = 1\n    dataset.loc[(dataset['FamilySize'] > 4),  'IsAlone'] = 2\n\ntrain_df[['IsAlone','Survived']].groupby(['IsAlone'], as_index=False).mean()\n\ncombine = [train_df, test_df]\ntrain_df.head()","9d12de4f":"train_data = train_df\ntest_data = test_df","83aa7ddd":"train_data.head(20)","b561456c":"from sklearn.svm import SVC # support vector classification\n\ny = train_data[\"Survived\"]\n\nfeatures = [\"Pclass\", \"Sex\", \"Age\", \"Fare\", \"Title\", \"Embarked\", \"IsAlone\"]\nX = pd.get_dummies(train_data[features])\nX_test = pd.get_dummies(test_data[features])\n\nmodel = SVC(kernel='rbf',gamma='auto')\nmodel.fit(X, y)\npredictions = model.predict(X_test)","66c14d8d":"model.score(X, y)","dc308b82":"output = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\noutput.to_csv('Titanic_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","4b9861ff":"## Training","3d414f43":"## Missing Value","0dbf8b80":"### Create Title"}}