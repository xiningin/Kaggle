{"cell_type":{"63d0aeb9":"code","3d51792e":"code","a83c8375":"code","21dc2836":"code","79200226":"code","5d7626c8":"code","e589e6b8":"code","1582d796":"code","ea0d5935":"code","58676a9a":"code","7cacdebb":"code","f3d0bef6":"code","62fdb93a":"code","104481cb":"code","ff14c847":"code","6dcb7059":"code","bfd43535":"code","50b05af0":"code","4ae30f14":"code","e25770b5":"code","99d014f4":"code","d7ed3584":"code","6c70b3c7":"code","0fde8cd3":"code","923d9d39":"code","f077b98b":"code","ab28287d":"code","16d80ab6":"code","676558f7":"code","576baf90":"code","a178fea4":"code","9c8284f2":"code","349002c5":"code","e8696f6e":"code","1d200a8e":"code","1b625959":"code","4131aa57":"code","b206a2a7":"code","977ea3fd":"code","e5255cab":"code","a14b61af":"code","8466aa4e":"code","fcc0fc70":"code","e1a08056":"code","5ab19d0f":"code","8e6d56ad":"code","1bf17edc":"code","e9d0e2e4":"code","29cceb9d":"code","611e05cd":"code","442e225e":"code","cb114663":"code","41394b11":"code","95fdad9b":"code","6892eb02":"code","10a000b7":"code","c0059123":"code","d4577da2":"code","33f9a160":"code","fbfda13f":"code","46c0ca39":"code","242ffa20":"code","085387e6":"markdown","e525efbd":"markdown","57d191ba":"markdown","650d88fb":"markdown","e9ed1f49":"markdown","85e81b32":"markdown","84b95b34":"markdown","19d528ca":"markdown","6fbe7f98":"markdown","4914a31f":"markdown","9aa274bd":"markdown","2d285fd3":"markdown","67c1b762":"markdown","ef56e549":"markdown","f55d3862":"markdown","932d5701":"markdown","7a277270":"markdown","3f0770f9":"markdown","e6a2b0e5":"markdown","b7c6bb2a":"markdown","62712ffb":"markdown","f42e5e14":"markdown","c57de753":"markdown","73f3299f":"markdown","ea6dd820":"markdown","c5869811":"markdown","1b7266ba":"markdown","5437ac3c":"markdown","26a7f93e":"markdown","3083e52f":"markdown","bc878d77":"markdown","fbb7e81c":"markdown","ea8bb59c":"markdown","9f0147fc":"markdown","b377069f":"markdown","4004c5fa":"markdown","8757a375":"markdown","9e063c2a":"markdown","358ee3d7":"markdown","0ffa674a":"markdown","fc9c9ee4":"markdown","1c1ce503":"markdown","347262b1":"markdown","9f1a048b":"markdown","d236ac95":"markdown","1aea14e7":"markdown","d8df275d":"markdown","a915d228":"markdown","24c0d36c":"markdown","b2b1bda2":"markdown","ca5092cb":"markdown","965cd41e":"markdown","b51c3fa3":"markdown","64dbf277":"markdown","b8888b1d":"markdown","3c371525":"markdown","a00c63ea":"markdown","6c95b7fa":"markdown"},"source":{"63d0aeb9":"import math\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport datetime\nimport seaborn as sns\nimport re\nimport warnings\nfrom scipy import stats as st\nimport matplotlib.lines as mlines\n\nwarnings.filterwarnings('ignore')","3d51792e":"def fills_good(data, main_column, function, group_columns):\n    \"\"\"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439\n\n    \u0414\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u0435\u0439\n    \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b:\n    \n    data - \u043c\u0430\u0441\u0441\u0438\u0432 \u0434\u0430\u043d\u043d\u044b\u0445, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438;\n    main_column - \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u044b \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f;\n    function - \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0442\u044c\u0441\u044f \u043f\u0440\u0438\n         \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0438 \u043f\u0443\u0441\u0442\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0432 \u043a\u0430\u0432\u044b\u0447\u043a\u0430\u0445 ('mean','median'...);\n    group_columns - \u0441\u0442\u043e\u043b\u0431\u0446\u044b \u0434\u043b\u044f \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0432\u0438\u0434\u0435 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 [...] \n         \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u044c\u0441\u044f \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438\n         \u0441 \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u043e\u0439 \u043f\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u043c \u0441\u0442\u043e\u043b\u0431\u0446\u0430\u043c.\n    \"\"\"\n    \n    data[main_column] = data[main_column].fillna(data.groupby(group_columns)[main_column].transform(function))\n    \ndef pre_research(data, column, range_min=0, range_max=0, clr='blue'):\n    \"\"\"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445\n    \u0414\u0430\u043d\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u044b\u0432\u0435\u0434\u0435\u0442 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0433\u043e\n    \u0441\u0442\u043e\u043b\u0431\u0446\u0430 \u0438 \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u0442 \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u0443.\n\n    \u0414\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u0435\u0439\n    \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b:\n    \n    data - \u043c\u0430\u0441\u0441\u0438\u0432 \u0434\u0430\u043d\u043d\u044b\u0445, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0443\u0436\u043d\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c;\n    column - \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u0430, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u043f\u0440\u043e\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0430\u043d\u0430\u043b\u0438\u0437;\n    range_min, range_max - \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435\n        \u0433\u0440\u0430\u043d\u0438\u0447\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u0432\u044b\u0432\u043e\u0434\u0438\u043c\u044b\u0435 \u043d\u0430 \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u0443\n        \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0437\u0430\u0434\u0430\u044e\u0442\u0441\u044f \u043c\u0438\u043d\u0438\u043c\u0443\u043c\u043e\u043c \u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c\u043e\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0441\u0442\u043e\u043b\u0431\u0446\u0430, \n        \u043f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u043c\u043e\u0436\u043d\u043e \u0432\u043d\u0435\u0441\u0442\u0438 \u043d\u0443\u0436\u043d\u044b\u0435 \u0437\u0430\u043d\u0447\u0435\u043d\u0438\u044f \u0434\u043b\u044f \n        \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u044b.\n    clr - \u0446\u0432\u0435\u0442 \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u044b.\n    \"\"\"\n    \n    print(f'1% percentile: {data[column].quantile(.1)}')\n    print(f'50% percentile: {data[column].quantile(.50)}')\n    print(f'99% percentile: {data[column].quantile(.99)}')\n    # \u0412 \u0441\u0442\u043e\u043b\u0431\u0446\u0435 \u0435\u0441\u0442\u044c \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439, \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u0434\u043b\u044f \u0442\u043e\u0433\u043e, \n    # \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043d\u044f\u0442\u044c \u043a\u0430\u043a \u0447\u0430\u0441\u0442\u043e \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0442\u0441\u044f \u0431\u043e\u043b\u044c\u0448\u0438\u0435 \u0438 \u043e\u0447\u0435\u043d\u044c \u043c\u0430\u043b\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\n    data1 = data.copy()\n    fig = plt.figure(figsize=(15, 6)) \n    if range_min==range_max:\n        range_min = data[column].min()\n        range_max = data[column].max()\n    else:\n        data1 = data1[data1[column]<data1[column].quantile(range_max)]\n        data1 =  data1[data1[column]>data1[column].quantile(range_min)]\n    \n    sns.histplot(data1[column], kde=True, bins=len(data1[column].unique()), color=clr)\n    plt.title(f\"{column} histogram\")\n    plt.ylabel(f\"{column} count\")\n    plt.xlabel(column)\n\n    plt.show()\n    \n\ndef print_hist(series,bins, title):\n    \"\"\"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u044b\n\n    \u0414\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u0435\u0439\n    \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b:\n    \n    series - \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u044b;\n    bins - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0442\u0432\u043e \u043a\u043e\u0440\u0437\u0438\u043d;\n    title - \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0433\u0440\u0430\u0444\u0438\u043a\u0430.\n    \n        \u0414\u043b\u044f \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044f \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445\n    \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f\n    \u0441\u0447\u0438\u0442\u0430\u044e\u0442\u0441\u044f \u043f\u043e 1 \u0438 99\u043c\u0443 \u043f\u0435\u0440\u0441\u0435\u043d\u0442\u0438\u043b\u044e\n    \"\"\"   \n    \n    fig = plt.figure(figsize=(15, 6)) \n    min_range = series.quantile(.1)\n    max_range = series.quantile(.99)\n    hist = plt.hist(series, bins, range = (min_range,max_range))\n    grid1 = plt.grid(True)\n    plt.title(title)\n    plt.show()\n    print(f'Mean value: {round(series.mean(),2)}')\n    print(f'Median value: {round(series.median(),2)}')\n    \n\ndef print_matrix(data, sub_columns, min_size=9, max_size=9):\n    \"\"\"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u0434\u0438\u0430\u0433\u0440\u0430\u043c\u043c \u0440\u0430\u0441\u0441\u0435\u044f\u043d\u0438\u044f\n\n    \u0414\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u0435\u0439\n    \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b:\n    \n    data - \u043c\u0430\u0441\u0441\u0438\u0432 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445;\n    main_column - \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u0434\u0430\u043d\u043d\u044b\u0445, \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0431\u0443\u0434\u0435\u0442\n        \u043f\u0440\u043e\u0432\u043e\u0434\u0438\u0442\u044c\u0441\u044f \u0430\u043d\u0430\u043b\u0438\u0437 - '\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435_\u0441\u0442\u043e\u043b\u0431\u0446\u0430';\n    sub_columns - \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u044b, \u0432\u043b\u0438\u044f\u043d\u0438\u0435 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0430\n        \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u043c\u044b \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u043c - ['1','2','3',...];\n    min_size, max_size - \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0440\u0430\u0437\u043c\u0435\u0440\u0430\n        \u043a\u0430\u0436\u0434\u043e\u0439 \u044f\u0447\u0435\u0439\u043a\u0438 \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u0432 \u0434\u044e\u0439\u043c\u0430\u0445 (\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e - 9 \u0434\u044e\u0439\u043c\u043e\u0432).\n    \"\"\"\n    \n    #pivot_data = data.pivot_table(index = main_column, \n    #                        values = sub_columns)\n    pivot_data = data[sub_columns]\n    pd.plotting.scatter_matrix(pivot_data, diagonal = 'kde',figsize=(min_size, max_size)) \n\ndef print_scatter(data, x, y, labels, clr = \"g\", min_size=15, max_size=8):\n    \"\"\"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f \u0434\u0438\u0430\u0433\u0440\u0430\u043c\u043c \u0440\u0430\u0441\u0441\u0435\u044f\u043d\u0438\u044f\n\n    \u0414\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u0435\u0439\n    \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b:\n    \n    data - \u043c\u0430\u0441\u0441\u0438\u0432 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445;\n    x, y - \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432, \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0431\u0443\u0434\u0435\u0442\n        \u043f\u0440\u043e\u0432\u043e\u0434\u0438\u0442\u044c\u0441\u044f \u0430\u043d\u0430\u043b\u0438\u0437 - '\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435_\u0441\u0442\u043e\u043b\u0431\u0446\u0430';\n    labels - \u043c\u0430\u0441\u0441\u0438\u0432 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0439 \u0434\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u044b \u0438 \u043e\u0441\u0435\u0439 - ['\u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a','x_name','y_name'];\n    clr - \u0446\u0432\u0435\u0442 \u0442\u043e\u0447\u0435\u043a;\n    min_size, max_size - \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0440\u0430\u0437\u043c\u0435\u0440\u0430\n        \u043a\u0430\u0436\u0434\u043e\u0439 \u044f\u0447\u0435\u0439\u043a\u0438 \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u0432 \u0434\u044e\u0439\u043c\u0430\u0445 (\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e - 9 \u0434\u044e\u0439\u043c\u043e\u0432).\n    \"\"\"\n    \n    plt.figure(figsize=(min_size, max_size)) \n    plt.scatter( x, y, data=data,alpha=0.2,color=clr)\n    plt.title(labels[0],fontsize=15)\n    plt.xlabel(labels[1],fontsize=13)\n    plt.ylabel(labels[2],fontsize=13)\n    plt.grid()\n    plt.show()\n    \ndef print_plt_lines(data, categ_column, x, y, lines, labels=['','','']):\n    \"\"\"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u043b\u0438\u043d\u0435\u0439\u043d\u044b\u0445 \u0433\u0440\u0430\u0444\u0438\u043a\u043e\u0432 \u043d\u0430 \u043e\u0434\u043d\u0438\u0445 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u0430\u0445\n\n    \u0414\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u0435\u0439\n    \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b:\n    \n    data - \u043c\u0430\u0441\u0441\u0438\u0432 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445;\n    x, y - \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432, \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0431\u0443\u0434\u0435\u0442\n        \u043f\u0440\u043e\u0432\u043e\u0434\u0438\u0442\u044c\u0441\u044f \u0430\u043d\u0430\u043b\u0438\u0437 - '\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435_\u0441\u0442\u043e\u043b\u0431\u0446\u0430';\n    lines - \u043c\u0430\u0441\u0441\u0438\u0432 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0439 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 - ['name1','name2','name3'.....];\n    labels - \u043c\u0430\u0441\u0441\u0438\u0432 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0439 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 - ['\u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a','x_name','y_name'];\n\n    \"\"\"\n    \n    fig = plt.figure(figsize=(15, 6)) \n    for i in lines:\n        plot_data = data[data[categ_column]==i]\n        plt.plot( \n            plot_data[x],\n            plot_data[y], \n            linestyle= '-', \n#             marker='o',\n            linewidth=2, \n            alpha=0.9,\n            )\n    plt.grid(True)\n    plt.title(labels[0])\n    plt.xlabel(labels[1])\n    plt.ylabel(labels[2])\n    plt.legend(lines)\n    plt.show()\n\n    \ndef lolipop_plot(data, y, x,labels, color1='orange', color2='gray', color_lim=150):\n    \"\"\"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f Lolipop \u0433\u0440\u0430\u0444\u0438\u043a\u043e\u0432:\n\n    \u0414\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u0435\u0439\n    \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b:\n    \n    data - \u043c\u0430\u0441\u0441\u0438\u0432 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445;\n    x, y - \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432, \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0431\u0443\u0434\u0435\u0442\n        \u043f\u0440\u043e\u0432\u043e\u0434\u0438\u0442\u044c\u0441\u044f \u0430\u043d\u0430\u043b\u0438\u0437 - '\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435_\u0441\u0442\u043e\u043b\u0431\u0446\u0430';\n    labels - \u043c\u0430\u0441\u0441\u0438\u0432 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0439 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 - ['\u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a','x_name','y_name'];\n    color1 - \u0446\u0432\u0435\u0442 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0432\u044b\u0434\u0435\u043b\u0435\u043d\u0438\u044f, \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e - 'orange';\n    color2 - \u0446\u0432\u0435\u0442 \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u0432\u044b\u0434\u0435\u043b\u0435\u043d\u0438\u044f, \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e - 'gray'; \n    color_lim - \u0433\u0440\u0430\u043d\u0438\u0446\u0430 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0446\u0432\u0435\u0442\u0430 \u043f\u043e \u043e\u0441\u0438 \u0425, \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e - 150.\n\n    \"\"\"\n    \n    \n    data = data.sort_values(by = y)\n    \n    my_range=range(1,len(data.index)+1)\n    my_color=np.where(data[y] > color_lim, color1, color2)\n    fig = plt.figure(figsize=(15, 6)) \n    plt.hlines(y=my_range, xmin=0, xmax=data[y], color=my_color)\n    plt.scatter(data[y], my_range, color=my_color, alpha=1)\n    plt.yticks(my_range, data[x])\n    plt.title(labels[0])\n    plt.xlabel(labels[1])\n    plt.ylabel(labels[2])\n    plt.grid()\n    plt.show()","a83c8375":"df_sales = pd.read_csv('..\/input\/videogamesales\/vgsales.csv')","21dc2836":"df_sales['Name']","79200226":"df_score = pd.read_csv('..\/input\/video-game-sales-with-ratings\/Video_Games_Sales_as_at_22_Dec_2016.csv')","5d7626c8":"df_score = df_score.rename({\"Year_of_Release\":\"Year\"}, axis=1)","e589e6b8":"df = df_score.merge(df_sales, how='left')","1582d796":"df.info()","ea0d5935":"df","58676a9a":"df.columns = df.columns.str.lower()","7cacdebb":"df","f3d0bef6":"df = df.dropna(subset=['name'])","62fdb93a":"fills_good(df, 'year', 'median', 'platform')\ndf['year'] = df['year'].astype('int')","104481cb":"pre_research(df, 'year', clr='orange')","ff14c847":"pre_research(df, 'na_sales', range_max=0.99, clr='cyan')","6dcb7059":"df.loc[df['na_sales'] > df['na_sales'].quantile(.999)]","bfd43535":"pre_research(df, 'eu_sales', range_max=0.99, clr='blue')","50b05af0":"pre_research(df, 'jp_sales', range_max=0.99, clr='red')","4ae30f14":"pre_research(df, 'other_sales', range_max=0.99, clr='olive')","e25770b5":"pre_research(df, 'critic_score', clr='green')","99d014f4":"df.loc[df['user_score']=='tbd','user_score'] = np.nan\ndf['user_score'] = df['user_score'].astype('float')\n\n# Let's bring the user ratings to the same scale as the critics' ratings\n\ndf['user_score'] = df['user_score']*10","d7ed3584":"pre_research(df, 'user_score', clr='purple')","6c70b3c7":"df['rating'] = df['rating'].fillna('no_rate')","0fde8cd3":"df","923d9d39":"df['sum_sales'] = df[['na_sales','eu_sales','jp_sales','other_sales']].sum(axis=1)","f077b98b":"df","ab28287d":"pre_research(df, 'year')\ndf.groupby('year')['year'].count()\n","16d80ab6":"df = df.query('year >= 1995').copy()","676558f7":"df_sales_by_year = df.pivot_table(index = ['year',\n                                           'platform'], \n                                  values = 'sum_sales', \n                                  aggfunc = 'sum').reset_index()\ndf_sales_by_year\n","576baf90":"df_sales_by_year.groupby('platform')['platform'].count().sort_values(ascending = False)","a178fea4":"df_sales_by_year.groupby('platform')['sum_sales'].sum().sort_values(ascending = False)","9c8284f2":"labels = ['Total sales of PlayStation and PC games by year',\n          'Year',\n          'Number of games sold, mln.',\n          ]\nprint_plt_lines(df_sales_by_year, \n                'platform', \n                'year', \n                'sum_sales', \n                ['PS', \n                 'PS2', \n                 'PS3', \n                 'PS4', \n                 'PSP',\n                 'PSV',\n                 'PC',],\n               labels)","349002c5":"labels = ['Total sales of games on Xbox and PC platforms by year',\n          'Year',\n          'Number of games sold, mln.',\n          ]\nprint_plt_lines(df_sales_by_year, \n                'platform', \n                'year', \n                'sum_sales', \n                [ 'XB', \n                 'X360',\n                 'XOne',\n                 'PC',\n                ],\n               labels)","e8696f6e":"labels = ['Total sales of games on the Nintendo and PC platforms by year',\n          'Year',\n          'Number of games sold, mln.',\n          ]\nprint_plt_lines(df_sales_by_year, \n                'platform', \n                'year', \n                'sum_sales', \n                [ 'GB', \n                 'SNES',\n                 'N64',\n                 'Wii',\n                 'WiiU',\n                 'GC',\n                 'DS','PC',\n                ],\n               labels)","1d200a8e":"labels = ['Total sales of games on the Nintendo, Xbox, PS and PC platforms by year',\n          'Year',\n          'Number of games sold, mln.',\n          ]\nprint_plt_lines(df_sales_by_year, \n                'platform', \n                'year', \n                'sum_sales', \n                [ 'PS', \n                 'PS2', \n                 'PS3', \n                 'PS4', \n                 'XB', \n                 'X360',\n                 'XOne',\n                 'Wii',\n                 'WiiU',\n                 'PC',\n                ],\n               labels)","1b625959":"df_sales_by_year = df_sales_by_year.query('(year >=2004)&(platform in [\"PS3\",\"PS4\", \"X360\",\"XOne\", \"Wii\", \"WiiU\", \"PC\",\"DS\", \"PSP\", \"PSV\"])')","4131aa57":"df_sales_by_year['portable'] = 0\ndf_sales_by_year.loc[df_sales_by_year['platform'].apply(lambda x:x in [ 'DS', 'PSP', 'PSV']), 'portable'] = 1","b206a2a7":"labels = ['Total sales of games on the Nintendo, Xbox, PS and PC platforms by year',\n          'Year',\n          '\u043c',\n          ]\nprint_plt_lines(df_sales_by_year.query('year >=2005'), \n                'platform', \n                'year', \n                'sum_sales', \n                [ 'PS3', 'PS4', 'X360','XOne', 'Wii', 'WiiU', 'PC',\n                ],\n               labels)","977ea3fd":"labels = ['Total sales of games on portable consoles by year',\n          'Year',\n          'Number of games sold, mln.',\n          ]\nprint_plt_lines(df_sales_by_year, \n                'platform', \n                'year', \n                'sum_sales', \n                [ 'DS', 'PSP', 'PSV',\n                ],\n               labels)","e5255cab":"df_lolipop = df_sales_by_year.pivot_table(index = 'platform', \n                                          values = 'sum_sales', \n                                          aggfunc = 'sum').reset_index().sort_values(by = 'sum_sales')\ndf_lolipop['portable'] = 0\ndf_lolipop.loc[df_lolipop['platform'].apply(lambda x:x in [ 'DS', 'PSP', 'PSV']), 'portable'] = 1\n\nmy_range=range(1,len(df_lolipop.index)+1)\nmy_color=np.where(df_lolipop ['portable'] == 1, 'orange', 'green')\nfig = plt.figure(figsize=(15, 6)) \nplt.hlines(y=my_range, xmin=0, xmax=df_lolipop['sum_sales'], color=my_color)\nplt.scatter(df_lolipop['sum_sales'], my_range, color=my_color, alpha=1)\n \n\nplt.yticks(my_range, df_lolipop['platform'])\nplt.title(\"The total number of copies of games sold for the entire life cycle of the gaming device from 2005 to 2016.\")\nplt.xlabel('Number of copies of games sold, mln.')\nplt.ylabel('Gaming device')\nplt.grid()\n\n# We make the legend manually, we will enter the notation for the lines\n\norange_line = mlines.Line2D([], [], color='orange', marker='o',\n                          markersize=5, label='Portable console')\ngreen_line = mlines.Line2D([], [], color='green', marker='o',\n                          markersize=5, label='Stationary consoles and PCs')\nplt.legend(handles=[green_line,orange_line],loc=4)\nplt.show()","a14b61af":"stations = ['PS3', 'PS4', 'X360','XOne', 'Wii', 'WiiU', 'PC']\nportable = ['DS', 'PSP', 'PSV']\nall_platforms = stations + portable\npast_gen = ['Wii', 'PS3', 'X360']\nnext_gen = ['WiiU', 'PS4', 'XOne']","8466aa4e":"main_df = df[df['platform'].apply(lambda x: x in all_platforms) ]\nmain_df['portable'] = 0\nmain_df.loc[main_df['platform'].apply(lambda x:x in [ 'DS', 'PSP', 'PSV']), 'portable'] = 1","fcc0fc70":"fig = plt.figure(figsize=(15, 15)) \nax = sns.boxplot(x='platform', y='sum_sales', data=main_df, palette='rainbow_r')\nax = sns.stripplot(x='platform', y='sum_sales', data=main_df, palette='plasma', jitter=0.2, size=2.5)\nplt.title(\"Boxplot platform sales\")\nplt.grid()\nplt.show()","e1a08056":"mega_title = main_df.query('sum_sales > 40')\nmega_title","5ab19d0f":"main_df_drop_wii_sports = main_df.query('sum_sales < 40')\n\nfig = plt.figure(figsize=(15, 15)) \nax = sns.boxplot(x='platform', y='sum_sales', data=main_df_drop_wii_sports, palette='rainbow_r')\nax = sns.stripplot(x='platform', y='sum_sales', data=main_df_drop_wii_sports, palette='plasma', jitter=0.2, size=2.5)\nplt.title(\"Boxplot platform sales without wii sports\")\nplt.grid()\nplt.show()","8e6d56ad":"main_df_pg = main_df.query('sum_sales < 40')[main_df['platform'].apply(lambda x: x in past_gen)]\n\nfig = plt.figure(figsize=(15, 15)) \nax = sns.boxplot(x='platform', y='sum_sales', data=main_df_pg, palette='rainbow_r')\nax = sns.stripplot(x='platform', y='sum_sales', data=main_df_pg, palette='plasma', jitter=0.2, size=2.5)\nplt.title(\"Boxplot for consoles of the last generation\")\nplt.xlabel('Game platform')\nplt.ylabel('Number of copies of games sold')\nplt.grid()\nplt.show()","1bf17edc":"main_df_pg = main_df.query('sum_sales < 5')[main_df['platform'].apply(lambda x: x in past_gen)]\n\nfig = plt.figure(figsize=(15, 15)) \nax = sns.boxplot(x='platform', y='sum_sales', data=main_df_pg, palette='rainbow_r')\nax = sns.stripplot(x='platform', y='sum_sales', data=main_df_pg, palette='plasma', jitter=0.2, size=2.5)\nplt.title(\"Boxplot for consoles of the last generation \")\nplt.xlabel('Game platform')\nplt.ylabel('Number of copies of games sold')\nplt.grid()\nplt.show()","e9d0e2e4":"main_df_ng = main_df.query('sum_sales < 5')[main_df['platform'].apply(lambda x: x in next_gen)]\n\nfig = plt.figure(figsize=(15, 15)) \nax = sns.boxplot(x='platform', y='sum_sales', data=main_df_ng, palette='rainbow_r')\nax = sns.stripplot(x='platform', y='sum_sales', data=main_df_ng, palette='plasma', jitter=0.2, size=2.5)\nplt.title(\"Boxplot for consoles of the new generation \")\nplt.xlabel('Game platform')\nplt.ylabel('Number of copies of games sold')\nplt.grid()\nplt.show()","29cceb9d":"main_df_port = main_df.query('sum_sales < 40')[main_df['platform'].apply(lambda x: x in portable)]\n\nfig = plt.figure(figsize=(15, 15)) \nax = sns.boxplot(x='platform', y='sum_sales', data=main_df_port, palette='rainbow_r')\nax = sns.stripplot(x='platform', y='sum_sales', data=main_df_port, palette='plasma', jitter=0.2, size=2.5)\nplt.title(\"Boxplot for consoles of the portable consoles\")\nplt.xlabel('Game platform')\nplt.ylabel('Number of copies of games sold')\nplt.grid()\nplt.show()","611e05cd":"main_df_port = main_df.query('sum_sales < 2')[main_df['platform'].apply(lambda x: x in portable)]\n\nfig = plt.figure(figsize=(15, 15)) \nax = sns.boxplot(x='platform', y='sum_sales', data=main_df_port, palette='rainbow_r')\nax = sns.stripplot(x='platform', y='sum_sales', data=main_df_port, palette='plasma', jitter=0.2, size=2.5)\nplt.title(\"Boxplot for consoles of the portable consoles\")\nplt.xlabel('Game platform')\nplt.ylabel('Number of copies of games sold')\nplt.grid()\nplt.show()","442e225e":"data_to_plot = main_df.loc[main_df['platform'].apply(lambda x: x in next_gen),\n                           ['na_sales',\n                        'eu_sales',\n                        'jp_sales',\n                        'critic_score',\n                        'user_score',\n                        'platform']].sort_values(by='platform', ascending=True)\nmy_color={'PS4':'#3148FA', 'XOne':'#45DE6B','WiiU':'#FA737B'}\nmatrix_plot = sns.pairplot(data_to_plot,\n                           hue=\"platform\", \n                           kind='scatter', \n                           hue_order = ['PS4','XOne','WiiU'],\n                           diag_kind='auto', \n                           palette=my_color,\n                           plot_kws=dict(alpha=0.3),\n                           diag_kws=dict(alpha=1, fill=False),\n                          )\nmatrix_plot.fig.suptitle(\"Matrix of scattering diagrams for consoles of the current generation \\n 2012-2016.\", y = 1.05)\nplt.show()\n\n# In the data for this block, we will again remove the super popular Wii Sport game, we realized that it is fire, Nintendo fans will not be offended\n\ndata_to_plot = main_df.query('sum_sales < 40').loc[main_df['platform'].apply(lambda x: x in past_gen),\n                           ['na_sales',\n                        'eu_sales',\n                        'jp_sales',\n                        'critic_score',\n                        'user_score',\n                        'platform']].sort_values(by='platform', ascending=True)\nmy_color={'PS3':'#3148FA', 'X360':'#45DE6B','Wii':'#FA737B'}\nmatrix_plot = sns.pairplot(data_to_plot,\n                           hue=\"platform\", \n                           kind='scatter', \n                           hue_order = ['PS3','X360','Wii'],\n                           diag_kind='auto', \n                           palette=my_color,\n                           plot_kws=dict(alpha=0.3),\n                           diag_kws=dict(alpha=1, fill=False),\n                          )\nmatrix_plot.fig.suptitle(\"Matrix of scattering diagrams for consoles of the last generation \\n 2005-2016.\", y = 1.05)\nplt.show()\n\ndata_to_plot = main_df.loc[main_df['platform'].apply(lambda x: x in portable),\n                           ['na_sales',\n                        'eu_sales',\n                        'jp_sales',\n                        'critic_score',\n                        'user_score',\n                        'platform']].sort_values(by='platform', ascending=True)\nmy_color={'PSP':'#3148FA', 'DS':'#45DE6B','PSV':'#FA737B'}\nmatrix_plot = sns.pairplot(data_to_plot,\n                           hue=\"platform\", \n                           kind='scatter', \n                           hue_order = ['DS','PSP','PSV'],\n                           diag_kind='auto', \n                           palette=my_color,\n                           plot_kws=dict(alpha=0.3),\n                           diag_kws=dict(alpha=1, fill=False),\n                          )\nmatrix_plot.fig.suptitle(\"Matrix of scattering diagrams for portable consoles of the last generation \\n 2004-2016.\", y = 1.05)\nplt.show()","cb114663":"for i in all_platforms:\n    corr = main_df.loc[main_df['platform']== i, \n                          ['year',\n                           'sum_sales',\n                           'critic_score',\n                           'user_score']].corr()\n    fig = plt.figure(figsize=(6, 5))\n    sns.heatmap(corr, \n                annot=True, \n                annot_kws={\"size\": 11},\n                cmap=\"BuGn\"\n               )\n    plt.title(f\"Correlation matrix for consoles {i}\")\n    plt.show()","41394b11":"df_genre_by_year = df.pivot_table(index=['genre','year'], \n                                  values='sum_sales',\n                                 aggfunc = 'sum').reset_index()","95fdad9b":"df_genre_by_year['genre'].unique()","6892eb02":"labels = ['Total sales of games by genre',\n          'Year',\n          'Number of games sold, mln.',\n          ]\nprint_plt_lines(df_genre_by_year, \n                'genre', \n                'year', \n                'sum_sales', \n                [ \n       'Racing', 'Role-Playing', 'Shooter', 'Simulation', 'Sports',\n       'Strategy'\n                ],\n               labels)","10a000b7":"df_sales_by_year['platform'].unique()","c0059123":"labels = ['Total sales of games by genre',\n 'Year',\n 'Number of games sold, mln.',\n          ]\nprint_plt_lines(df_genre_by_year, \n                'genre', \n                'year', \n                'sum_sales', \n                [ 'Action', 'Adventure', 'Fighting', 'Misc', 'Platform', 'Puzzle',\n                ],\n               labels)","d4577da2":"df_lolipop = df_genre_by_year.pivot_table(index = 'genre', \n                                          values = 'sum_sales', \n                                          aggfunc = 'sum').reset_index().sort_values(by = 'sum_sales')\nlabels = ['Total number of copies of games sold by genre from 2005 to 2016',\n'Number of copies of games sold, million',\n'Genre']\nlolipop_plot(df_lolipop, 'sum_sales', 'genre',labels, color1='orange', color2='gray', color_lim=500)\n","33f9a160":"df_lolipop","fbfda13f":"df_lolipop_platform = main_df.pivot_table(index = 'platform', \n                                          values = ['na_sales', 'eu_sales','jp_sales'],\n                                          aggfunc = 'sum').reset_index().sort_values(by = 'na_sales')\nlabels = ['Total number of copies of games sold by platform type in North America from 2005 to 2016',\n'Number of copies of games sold, million',\n'Platform']\nlolipop_plot(df_lolipop_platform, 'na_sales', 'platform',labels, color_lim=150)\nprint(df_lolipop_platform[['platform','na_sales']].sort_values(by='na_sales', ascending = False).reset_index())\nlabels = ['Total number of copies of games sold by platform type in Europe from 2005 to 2016',\n'Number of copies of games sold, million',\n'Platform']\nlolipop_plot(df_lolipop_platform, 'eu_sales', 'platform',labels, color_lim=150)\nprint(df_lolipop_platform[['platform','eu_sales']].sort_values(by='eu_sales', ascending = False).reset_index())\n\nlabels = ['Total number of copies of games sold by platform type in Japan from 2005 to 2016',\n'Number of copies of games sold, million',\n'Platform']\nlolipop_plot(df_lolipop_platform, 'jp_sales', 'platform',labels, color_lim=50)\nprint(df_lolipop_platform[['platform','jp_sales']].sort_values(by='jp_sales', ascending = False).reset_index())\n","46c0ca39":"df_lolipop_genre = main_df.pivot_table(index = 'genre', \n                                          values = ['na_sales', 'eu_sales','jp_sales'],\n                                          aggfunc = 'sum').reset_index().sort_values(by = 'na_sales')\nlabels = ['Total number of copies of games sold by genre in North America from 2005 to 2016',\n'Number of copies of games sold, million',\n'Platform']\nlolipop_plot(df_lolipop_genre, 'na_sales', 'genre',labels, color_lim=150)\nprint(df_lolipop_genre[['genre','na_sales']].sort_values(by='na_sales', ascending = False).reset_index())\nlabels = ['Total number of copies of games sold by genre in Europe from 2005 to 2016',\n'Number of copies of games sold, million',\n'Platform']\nlolipop_plot(df_lolipop_genre, 'eu_sales', 'genre',labels, color_lim=110)\nprint(df_lolipop_genre[['genre','eu_sales']].sort_values(by='eu_sales', ascending = False).reset_index())\n\nlabels = ['Total number of copies of games sold by genre in Japan from 2005 to 2016',\n'Number of copies of games sold, million',\n'Platform']\nlolipop_plot(df_lolipop_genre, 'jp_sales', 'genre',labels, color_lim=25)\nprint(df_lolipop_genre[['genre','jp_sales']].sort_values(by='jp_sales', ascending = False).reset_index())\n","242ffa20":"df_lolipop_rating = main_df.pivot_table(index = 'rating', \n                                          values = ['na_sales', 'eu_sales','jp_sales'],\n                                          aggfunc = 'sum').reset_index().sort_values(by = 'na_sales')\nlabels = ['Total number of copies of games sold by ESRB rating in North America from 2005 to 2016',\n'Number of copies of games sold, million',\n'Rating']\nlolipop_plot(df_lolipop_rating, 'na_sales', 'rating',labels, color_lim=400)\nprint(df_lolipop_rating[['rating','na_sales']].sort_values(by='na_sales', ascending = False).reset_index())\nlabels = ['Total number of copies of games sold by ESRB rating in Europe from 2005 to 2016',\n'Number of copies of games sold, million',\n'Rating']\nlolipop_plot(df_lolipop_rating, 'eu_sales', 'rating',labels, color_lim=230)\nprint(df_lolipop_rating[['rating','eu_sales']].sort_values(by='eu_sales', ascending = False).reset_index())\n\nlabels = ['Total number of copies of games sold by ESRB rating in Japan from 2005 to 2016',\n'Number of copies of games sold, million',\n'Rating']\nlolipop_plot(df_lolipop_rating, 'jp_sales', 'rating',labels, color_lim=50)\nprint(df_lolipop_rating[['rating','jp_sales']].sort_values(by='jp_sales', ascending = False).reset_index())","085387e6":"\"E\" (\"Everyone\") \u2014 \"For everyone\": The content is quite suitable for the age category from 6 years. Such games may also appeal to adults. Games with this rating may contain minimal violence, mostly of a \"cartoon\" nature. The first game to receive this rating was The Simpsons Cartoon Studio, released in 1996. Originally \"K-A\" (\"Kids to Adults\")\n\n\"T\" (\"Teen\") \u2014 \"Teenagers\": The game is suitable for people from 13 years old. Projects from this category may contain violence, obscene scenes, rude humor, moderately explicit sexual content, blood or infrequent use of profanity.\n\n\"M\" (\"Mature\") \u2014 \"For adults\": The game materials are not suitable for teenagers under the age of 17. Projects with this rating may contain quite violent violence, a large amount of blood with dismemberment, obscene sex scenes or rude profanity that is undesirable for a younger audience. \n","e525efbd":"# Importing libraries","57d191ba":"----------------------\nFrom the data considered, we can determine the actual period for the study.\n\nWe will consider the video game market in accordance with the past and current generation of consoles, i.e. since 2004, as well as limit the choice of data \n\nLet's divide our data into 2 categories: stationary and portable consoles\n\nStationary: 'PS3', 'PS4', 'X360','XOne', 'Wii', 'WiiU', as well as 'PC'\n\nPortable: 'DS', 'PSP', 'PSV'\n\n\nLet's highlight the corresponding graphs in the table and set a mark on the portability of consoles for convenience","650d88fb":"From the presented correlation matrices, the following conclusions can be drawn:\n* For Xbox and Playstation consoles, critics' ratings are weak, but they affect the total sales of games;\n* For the Wii console, critics' ratings do not affect total game sales;\n* For all consoles, user ratings have almost no effect on total game sales;\n* Critics' ratings and user ratings correlate noticeably more on controversial consoles than on widespread ones;\n* On new-generation consoles, user ratings even have a negative correlation with sales, which confirms our conclusions regarding gaming hunger among gamers on new consoles.\n----------------","e9ed1f49":"Let's construct matrices of scattering diagrams","85e81b32":"The Wii console has some kind of game that sold more than 80 million copies, we will cut off this value when plotting graphs, but we will take into account that this title cannot be ignored when planning a strategy, it is very popular, let's see what kind of game it is\n","84b95b34":"There are tbd values in the data of the 'user_score' column, according to the metacritic site tbd is an insufficient number of ratings (below 4x), so we will replace these values in the column with NaN","19d528ca":"# Exploring data from a files","6fbe7f98":"# Local functions","4914a31f":"## Data description","9aa274bd":"# Data preprocessing","2d285fd3":"The graph shows that the games of the \"Action\" category have a large gap in sales from other genres, most likely such a jump is due to the fact that this is a fairly extensive genre and many games can be included in this category\n\nThe \"Sports\" genre owes its popularity to the previously reviewed Wii Sport\n\nIt is also possible to distinguish genres that are not popular - fighting games, simulators, adventures, strategies and puzzles, these are definitely niche genres of games, platformers could also be attributed to them, however, due to their diversity, platformers noticeably break ahead in sales and find their user","67c1b762":"    Name \u2014 the name of the game\n    Platform \u2014 videogame platform\n    year \u2014 year of release\n    Genre \u2014 genre of the game\n    NA_sales \u2014 sales in North America\n    EU_sales \u2014 sales in Europe\n    JP_sales \u2014 sales in Japan\n    Other_sales \u2014 sales in other countries (Russia for example)\n    Critic_Score \u2014 critic score (maximum - 100)\n    User_Score \u2014 user score (maximum - 10)\n    Rating rating from the ESRB organization (eng. Entertainment Software Rating Board). This association determines the rating of computer games and assigns them a suitable age category.\n\nThe data is collected from two sets from kaggle, in the description above the columns that we will use in EDA","ef56e549":"Nintendo consoles are clearly different from Xbox and PS, they released gaming consoles before 1995 and occupied their niche market with exclusive game series that fans of this company loved.\n\nWe also see that the cycle of production of Nintendo consoles is very different from competitors and the life cycle of each console of this company is unique\n\nIt is worth noting that the Nintendo DS console is a portable console, it should be taken into account only in comparison with other portable consoles, since most titles for this type of device come out at their own prices and are exclusive.","f55d3862":"# Video game success EDA ","932d5701":"Let's build a graph for stationary consoles","7a277270":"Wii Sport was a so-called system seller, he used all the technological capabilities of the new Wii console controllers, which caused a boom in sales of this title and consoles, respectively\n\nLet's build boxes with moustaches for different types of consoles:","3f0770f9":"It can be concluded that on Wii consoles, the distribution schedule is more compressed vertically, which means that most of the games sold are sold up to 1 million copies, in the case of Xbox 360 and PS3, we see that their sales spread is more vertically distributed, this is due to the fact that compared to Wii on the consoles in question, in addition to exclusive games, multiplatform games that simply do not exist on Wii are sold well","e6a2b0e5":"Let's form user portraits by region (NA, EU, JP), define:\n\n     The most popular platforms (top 5). Describe the differences in sales shares.\n     The most popular genres (top 5). Explain the difference.\n     Does the ESRB rating affect sales in a particular region?","b7c6bb2a":"Let's build the same graphics for the new generation of consoles:","62712ffb":"Let's build the \"Box with a mustache\" graphs for the types of consoles under study, for this we will select them from our main data table","f42e5e14":"From the graph, we can conclude that most of the games are sold in the amount of up to 3 million copies, we will limit the number of copies sold on the graph in order to examine the distribution in more detail","c57de753":"At the stage of data preprocessing, the following changes must be made:\n\n| col name        | Type replace           | Data gaps  |\n| ------------- |:-------------:| -----:|\n|  name     | not required | delete rows |\n| platform\t | not required    |    not required |\n| year\t | int    |   median replase |\n| genre\t | not required    |    delete rows |\n| na_sales\t | not required    |    not required |\n| eu_sales\t | not required    |    not required |\n| jp_sales\t | not required    |    not required |\n| other_sales\t | not required    |    not required |\n| critic_score\t | not required    |    not required |\n| user_score\t | float    |    not required |\n| rating\t | not required    |    fill- \"no_rate\" |","73f3299f":"From the charts by year, you can select favorites - these are 'Action', 'Sports', 'Role-Playing', 'Misc', 'Shooter', let's make sure of this by building a Lolipop chart by genre:","ea6dd820":"The picture is the same, a little more games are sold for PS4, a little worse for Xbox One and WiiU games are sold much worse and even visually you can see how much less games are being developed for this platform (orange dots on the graph).\n\nUnlike its predecessor, WiiU does not have a title in its arsenal that would sell this console and have sky-high sales, most likely this is a miscalculation by Nintendo.","c5869811":"Let's see which games are knocked out for the 999th percentile","1b7266ba":"Let's see how sales by platform have changed. Select the platforms with the highest total sales and build a distribution by year. For what characteristic period of time do new platforms appear and old ones disappear?","5437ac3c":"From the graph of total sales of games on all gaming devices, it can be seen that in the previous generation, the Xbox 360 leads by a small margin, with a slight lag in 2nd and 3rd place, the PS3 and Wii consoles are located\n\nAmong portable consoles, the total dominance of the Nintendo DS is noticeable, the PSP sold more than 2 times fewer games over the same period of time, the PS Vita lags behind all gaming devices.\n\nIn the new generation of consoles, PS4 is currently leading, twice ahead of its competitor in the face of Xbox One, WiiU is also a lagging console, games for it are not in demand around the world.","26a7f93e":"The differences between different markets are clearly visible. In Japan, they love Japanese consoles, in Europe they love everything, but they love PS more, in America they prefer American Xbox consoles, which are practically not used in Japan","3083e52f":"I hope you like what I did, I will be glad to comments.\n\nI judged the data not biased, as at the moment I have a ps5, xbox series s, nintendo switch and nintendo 3ds, yes, it's a bit overkill, but I like it)","bc878d77":"From the presented scatter plot matrices, it can be concluded that critics' ratings have a greater impact on sales, or they correspond more to reality, because critics evaluate the game unbiasedly (ideally) and this is confirmed by the market, as well as vice versa, the market sees critics' ratings and buys the game more often. This trend can be traced on all platforms in all years.\n\nAbout user ratings, we can say that on older platforms, their performance in comparison with sales tends to critics' ratings, but on new-generation consoles, gamers are hungry for games and, regardless of user ratings, sales of many games are large compared to other games in the same generation.","fbb7e81c":"The Nintendo DS console has a lot of games that have sold more than 5 million copies, while both Sony consoles have almost no such games","ea8bb59c":"Consider the total sales for each gaming device for the entire period of life under consideration","9f0147fc":"Let's compare the sales of games on stationary consoles Nintendo, Xbox and PS, as well as on PC.","b377069f":"## Exploring data","4004c5fa":"If you do not take into account the large titles of the Nintendo DS, it can be said that on average the PSP platform was almost as popular as the Nintendo DS\n\nThe PS Vita console can be considered a failure.","8757a375":"--------------------","9e063c2a":"Consider the impact of reviews from critics and users on the sale of games for various platforms, we will consider stationary consoles of the last generation:","358ee3d7":"**The description of the functions is written in Russian for an obvious reason - I'm from Russia)**","0ffa674a":"In 2007-2010, there was a noticeable surge in the game development market","fc9c9ee4":"Let's build a graph for portable consoles","1c1ce503":"-------------------------","347262b1":"Let's calculate the Pearson correlation coefficients and build their visualization","9f1a048b":"Let's look at how many games were released in different years.","d236ac95":"-------------\nWe will build various graphs to visualize and compare the indicators of different platforms","1aea14e7":"We will reduce the column names to lowercase:","d8df275d":"The graph shows that the previous generation of PS consoles is supported from 4 to 6 years\n\nThe peak of the number of copies of games sold on this platform = 2001-2005, just a year after the release of ps2, when video game manufacturers fully began to master the new hardware, in these years there were continuations of already iconic titles from ps1, as well as new games that later received sequels on new generations of consoles\n\nPSP and PSVita are portable consoles, it is not surprising that the sales charts of these consoles are lower than the rest of the charts\n\nPS Vita - Sony's most failed console","a915d228":"In this document, I tried to conduct a visual analysis of data from video game datasets.\n\n","24c0d36c":"We calculate the lifetime of different gaming platforms","b2b1bda2":"Consider the distribution by genre depending on the selected region:","ca5092cb":"We will not take into account the data below 1995 in the EDA, at that time there was the first noticeable growth of the gaming industry, which is most likely associated with the widespread distribution of CDs and consoles","965cd41e":"Microsoft entered the video game industry in 2000 with a competitor to the Playstation 2 console in the Xbox video.\n\nFrom the graphs, we can conclude about the colossal success in terms of selling Xbox 360 console games compared to the previous console, it's too early to judge sales on the new Xbox One console for 2014, but the dynamics of the first years of sales are not encouraging.\n\nXbox consoles are supported for 4 years after the release of the new version","b51c3fa3":"in 2005-2010, the Xbox 360 console was clearly ahead of its competitor in terms of game sales, this is due to the fact that Microsoft released its console a year earlier and the cost of the console was lower than the cost of the PS3. \n\nThere were also few good titles in the launch line of PS3 games, and the Xbox360 console had both new games and compatibility with old games and discs.\n\nBy 2010, Sony had already managed to release a sufficient number of exclusive games, which allowed it to outpace competitors in sales of games on the console.\n\nIf we compare the sales charts of games on the new generation of consoles, it is clearly visible that the PlayStation 4 console is 2 times ahead of the Xbox One console in sales in 2014-2016 (even if the fir provided incomplete data for 2016)\n\nPersonal computers have been lagging behind in terms of game sales for all years, most likely this is due to the ease of piracy on this type of device","64dbf277":"-------------------","b8888b1d":"There are genres that are popular all over the world: Action, Sports, RPG, but there are also outstanding values, for example, there are many platformer fans in Japan, this is due to the widespread use of portable consoles, platformers are most often played on them","3c371525":"Let's look at the general distribution of games by genre.","a00c63ea":"No emissions, all games are real mastodons of the market. Most of them are from Nintendo, who would doubt it)","6c95b7fa":"# Research data analysis"}}