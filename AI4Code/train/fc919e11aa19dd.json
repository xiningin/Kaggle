{"cell_type":{"1115cf1e":"code","c7a4eba0":"code","65367d66":"code","96e18984":"code","46d102b9":"code","933b91e2":"code","87621142":"code","059608c1":"code","89978e6b":"code","c144095f":"code","b9471129":"code","2e3e2ad0":"code","2a140101":"code","a6886303":"code","b3dbae65":"code","f47a7b96":"code","92ccc97b":"code","178dc267":"code","598dff2f":"code","2bf37b3e":"code","f29d8629":"code","3e1fa6a5":"code","a8140507":"code","37ef3785":"code","88bcc14a":"code","2d98a558":"code","0654641c":"code","ba5ca455":"code","3df2e0b5":"code","b5f6d0d6":"code","ac5faeb9":"code","31e61cfe":"code","355cde07":"code","e18d8fb6":"code","c0d3a497":"code","e2f5c2f9":"code","3000767a":"code","22d728b4":"code","1fa680d6":"code","827ae34a":"code","c885ad73":"code","ce1cfc8b":"code","24145594":"code","abe7442c":"code","d8156170":"code","d58d88a0":"code","c800d027":"code","757083db":"code","c075708d":"code","0a04a174":"code","47c66668":"code","fdccb076":"code","20351ff3":"code","417970a7":"code","1aa825ed":"code","705c5f15":"code","068e930c":"code","47e6c40e":"code","cd1e4f51":"code","353ce5db":"code","0b661b12":"code","bea21893":"code","7217c9b9":"code","497cd2ac":"code","c966c476":"code","394bf722":"code","94d3be5c":"code","6a913c42":"code","d5d6242d":"code","9c0c8025":"code","cd3ed703":"markdown","46aecf9d":"markdown","b1dabf75":"markdown","b30c7173":"markdown","de739770":"markdown","bc320433":"markdown"},"source":{"1115cf1e":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nsns.set()","c7a4eba0":"path='\/kaggle\/input\/titanic\/'\ndf=pd.read_csv(path+'train.csv')\ndf_test=pd.read_csv(path+'test.csv')","65367d66":"df.head()","96e18984":"sns.pairplot(df.drop('PassengerId',axis=1))","46d102b9":"df.info()","933b91e2":"df.describe().transpose()","87621142":"sns.heatmap(df.isnull())","059608c1":"#Pencentage of missing values in the dataframe\n(df.isnull().sum()*100)\/df.shape[0]","89978e6b":"#Cabin has to much missing information. I find that dropping it will be better\ndf.drop('Cabin',axis=1,inplace=True)\n\n#Doing the same for test dataset\ndf_test.drop('Cabin',axis=1,inplace=True)","c144095f":"df['Last Name']=df['Name'].apply(lambda name:name.split(',')[0])","b9471129":"df[df['Last Name']=='Abelson']","2e3e2ad0":"family_survival=df.groupby('Last Name')[['Survived']].sum()","2a140101":"family_survival","a6886303":"family_survival['number of people']=df.groupby('Last Name').count()['PassengerId']","b3dbae65":"family_survival['ratio survived']=family_survival['Survived']\/family_survival['number of people']","f47a7b96":"family_survival.head()","92ccc97b":"family_survival['number of people'].value_counts()","178dc267":"sns.boxplot(x='number of people',y='ratio survived', data=family_survival)","598dff2f":"sns.scatterplot(x='Age',y='Fare',data=df)","2bf37b3e":"g=sns.FacetGrid(df,col='Pclass')\ng.map(plt.hist,'Age',bins=50)","f29d8629":"df['Name'].apply(lambda name:name.split(',')[1].split('.')[0])","3e1fa6a5":"df['title name']=df['Name'].apply(lambda name:name.split(',')[1].split('.')[0])","a8140507":"other_titles=df['title name'].value_counts().index[4:].values","37ef3785":"df[df['title name'].isin(other_titles)].groupby('title name').describe()['Age']","88bcc14a":"df['title name'] = df['title name'].replace('Mlle', 'Miss')\ndf['title name'] = df['title name'].replace('Ms', 'Miss')\ndf['title name'] = df['title name'].replace('Mme', 'Mrs')\ndf['title name']=df['title name'].replace(other_titles,'Rare')","2d98a558":"#Doing the same for test\ndf_test['title name']=df_test['Name'].apply(lambda name:name.split(',')[1].split('.')[0])\nother_titles=df_test['title name'].value_counts().index[4:].values\ndf_test[df_test['title name'].isin(other_titles)].groupby('title name').describe()['Age']","0654641c":"df_test['title name'] = df_test['title name'].replace('Mlle', 'Miss')\ndf_test['title name'] = df_test['title name'].replace('Ms', 'Miss')\ndf_test['title name'] = df_test['title name'].replace('Mme', 'Mrs')\ndf_test['title name']=df_test['title name'].replace(other_titles,'Rare')","ba5ca455":"df_test['title name'].value_counts()","3df2e0b5":"df['title name'].value_counts()","b5f6d0d6":"plt.figure(figsize=(12,9))\nsns.boxplot(x='title name', y='Age', data=df)","ac5faeb9":"df['Age'] = df.groupby('title name')['Age'].apply(lambda x: x.fillna(x.mean()))\n#Doing the same for test dataset\ndf_test['Age'] = df_test.groupby('title name')['Age'].apply(lambda x: x.fillna(x.mean()))","31e61cfe":"df['Age'] = df['Age'].astype(int)\ndf_test['Age'] = df_test['Age'].astype(int)","355cde07":" # Mapping Age\ndf.loc[ df['Age'] <= 16, 'Age']= 0\ndf.loc[(df['Age'] > 16) & (df['Age'] <= 32), 'Age'] = 1\ndf.loc[(df['Age'] > 32) & (df['Age'] <= 48), 'Age'] = 2\ndf.loc[(df['Age'] > 48) & (df['Age'] <= 64), 'Age'] = 3\ndf.loc[ df['Age'] > 64, 'Age'] = 4 ;\n\ndf_test.loc[ df_test['Age'] <= 16, 'Age']= 0\ndf_test.loc[(df_test['Age'] > 16) & (df_test['Age'] <= 32), 'Age'] = 1\ndf_test.loc[(df_test['Age'] > 32) & (df_test['Age'] <= 48), 'Age'] = 2\ndf_test.loc[(df_test['Age'] > 48) & (df_test['Age'] <= 64), 'Age'] = 3\ndf_test.loc[ df_test['Age'] > 64, 'Age'] = 4 ;\n","e18d8fb6":"# Mapping titles\ntitle_mapping = {\" Mr\": 1, \" Miss\": 2, \" Mrs\": 3, \" Master\": 4, \"Rare\": 5}\ndf['title name'] = df['title name'].map(title_mapping)\ndf['title name'] = df['title name'].fillna(0)\n\ndf_test['title name'] = df_test['title name'].map(title_mapping)\ndf_test['title name'] = df_test['title name'].fillna(0)","c0d3a497":"# Mapping Embarked\ndf['Embarked'] = df['Embarked'].fillna('S')\ndf_test['Embarked'] = df_test['Embarked'].fillna('S')\n\ndf['Embarked'] = df['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)\ndf_test['Embarked'] = df_test['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)","e2f5c2f9":"df['Fare'] = df['Fare'].fillna(df['Fare'].median())\ndf_test['Fare'] = df_test['Fare'].fillna(df['Fare'].median())\n# Mapping Fare\ndf.loc[ df['Fare'] <= 7.91, 'Fare']= 0\ndf.loc[(df['Fare'] > 7.91) & (df['Fare'] <= 14.454), 'Fare'] = 1\ndf.loc[(df['Fare'] > 14.454) & (df['Fare'] <= 31), 'Fare']   = 2\ndf.loc[ df['Fare'] > 31, 'Fare']= 3\ndf['Fare'] = df['Fare'].astype(int)\n\ndf_test.loc[ df['Fare'] <= 7.91, 'Fare']= 0\ndf_test.loc[(df['Fare'] > 7.91) & (df_test['Fare'] <= 14.454), 'Fare'] = 1\ndf_test.loc[(df['Fare'] > 14.454) & (df_test['Fare'] <= 31), 'Fare']   = 2\ndf_test.loc[ df_test['Fare'] > 31, 'Fare']= 3\ndf_test['Fare'] = df_test['Fare'].astype(int)","3000767a":"df.head()","22d728b4":"sns.heatmap(df.isnull())","1fa680d6":"(df.isnull().sum()*100)\/df.shape[0]","827ae34a":"df_test.shape","c885ad73":"(df_test.isnull().sum()*100)\/df_test.shape[0]","ce1cfc8b":"(df_test.isnull().sum()*100)\/df_test.shape[0]","24145594":"df['size of family'] = df['SibSp'] + df['Parch'] + 1\ndf.drop('SibSp',inplace=True,axis=1)\n\ndf_test['size of family'] = df_test['SibSp'] + df_test['Parch'] + 1\ndf_test.drop('SibSp',inplace=True,axis=1)","abe7442c":"df['is alone']=df.apply((lambda row: 1 if (row['size of family']==1) else 0),axis=1)\ndf_test['is alone']=df_test.apply((lambda row: 1 if (row['size of family']==1) else 0),axis=1)","d8156170":"plt.figure(figsize=(12,8))\nsns.heatmap(df.corr(),cmap = sns.diverging_palette(220, 10, as_cmap=True),center=0,annot=True)","d58d88a0":"features=['Pclass','Sex','Age','Fare','Embarked','title name', 'size of family', 'is alone', 'Survived']\ndf_dummies= pd.get_dummies(df[features])\nfeatures=['Pclass','Sex','Age','Fare','Embarked','title name','size of family', 'is alone']\ndf_dummies_test = pd.get_dummies(df_test[features])","c800d027":"df_dummies.head()","757083db":"df_dummies.drop(['Sex_male'],axis=1,inplace=True)","c075708d":"df_dummies_test.drop(['Sex_male'],axis=1,inplace=True)","0a04a174":"df_dummies_test.head()","47c66668":"from sklearn.model_selection import train_test_split\nX = df_dummies.drop('Survived',axis=1).values\ny = df_dummies['Survived'].values\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33)","fdccb076":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\nscaler.fit(X_train)\nX_train = scaler.transform(X_train)\nX_test = scaler.transform(X_test)","20351ff3":"import tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Activation,Dropout","417970a7":"X_train.shape","1aa825ed":"X_test.shape","705c5f15":"model= Sequential()\n\nmodel.add(Dense(units=12,activation='relu'))\nmodel.add(Dropout(0.4))\n\nmodel.add(Dense(units=10,activation='relu'))\nmodel.add(Dropout(0.4))\n\nmodel.add(Dense(units=6,activation='relu'))\nmodel.add(Dropout(0.4))\n\nmodel.add(Dense(units=1,activation='sigmoid'))\n\nmodel.compile(loss='binary_crossentropy',optimizer='adam')","068e930c":"from tensorflow.keras.callbacks import EarlyStopping\nearly_stop = EarlyStopping(monitor='val_loss', mode='min', verbose=1, patience=100)","47e6c40e":"model.fit(x=X_train, \n          y=y_train,\n          epochs=600,\n          validation_data=(X_test, y_test), verbose=1,\n          callbacks=[early_stop]\n          )","cd1e4f51":"from sklearn.ensemble import RandomForestClassifier\nrfc = RandomForestClassifier(n_estimators=200,max_depth=12)\nrfc.fit(X_train,y_train)","353ce5db":"from sklearn.linear_model import LogisticRegression\nlogreg = LogisticRegression()\nlogreg.fit(X_train, y_train)","0b661b12":"model_loss = pd.DataFrame(model.history.history)\nmodel_loss.plot()","bea21893":"# ","7217c9b9":"predictions = model.predict_classes(X_test)\nfrom sklearn.metrics import classification_report,confusion_matrix\nprint(classification_report(y_test,predictions),'\\n')\nprint(confusion_matrix(y_test,predictions))","497cd2ac":"predictions = rfc.predict(X_test)\nfrom sklearn.metrics import classification_report,confusion_matrix\nprint(classification_report(y_test,predictions),'\\n')\nprint(confusion_matrix(y_test,predictions))","c966c476":"predictions = logreg.predict(X_test)\nfrom sklearn.metrics import classification_report,confusion_matrix\nprint(classification_report(y_test,predictions),'\\n')\nprint(confusion_matrix(y_test,predictions))","394bf722":"df_dummies_test.head()","94d3be5c":"X_val = scaler.transform(df_dummies_test.values)\npredictions = model.predict_classes(X_val)","6a913c42":"output = pd.DataFrame(columns=['PassengerId','Survived'],data=zip(df_test['PassengerId'].values,np.hstack(predictions)))","d5d6242d":"output.reset_index(inplace=True,drop=True)","9c0c8025":"output.to_csv('my_submission.csv', index=False)","cd3ed703":"## Model","46aecf9d":"## Split Data","b1dabf75":"BASELINE\n\n    precision    recall  f1-score   support\n\n           0       0.81      0.90      0.85       163\n           1       0.80      0.67      0.73       105\n\n    accuracy                           0.81       268\n   macro avg       0.81      0.78      0.79       268\nweighted avg       0.81      0.81      0.80       268\n\n[[146  17]\n [ 35  70]]","b30c7173":"### Scale data","de739770":"## Output","bc320433":"## Evaluation"}}