{"cell_type":{"693f94ab":"code","d63f8f2a":"code","728cd7da":"code","840cf1ed":"markdown","be7f5ae7":"markdown","7c45b537":"markdown","2c0f81e8":"markdown","6a32682a":"markdown"},"source":{"693f94ab":"# Configura o ambiente disponibilizado pelo Kaggle do Halite IV\nfrom kaggle_environments import evaluate, make\n# Declara a vari\u00e1vel que armazena informa\u00e7\u00f5es sobre o ambiente do jogo\nenv = make(\"halite\", configuration={ \"episodeSteps\": 400 }, debug=True)\n\n# Imprime as configura\u00e7\u00f5es do ambiente\nprint (env.configuration)","d63f8f2a":"%%writefile submission.py\n\nfrom kaggle_environments.envs.halite.helpers import *\nfrom random import choice\n\n# Fun\u00e7\u00e3o principal do agente: recebe observa\u00e7\u00e3o e configura\u00e7\u00e3o e retorna uma a\u00e7\u00e3o.\ndef agent(obs, config):\n    # Constr\u00f3i um objeto Board a partir da observa\u00e7\u00e3o e configura\u00e7\u00e3o.\n    board = Board(obs, config)\n    # Atribui \u00e0 vari\u00e1vel \"me\" o objeto do jogador da vez (no caso, o pr\u00f3prio agente)\n    me = board.current_player\n    \n    # Itera por todos os navios dispon\u00edveis para o agente\n    for ship in me.ships:\n        # Configura a pr\u00f3xima a\u00e7\u00e3o do navio para ser uma escolha aleat\u00f3ria entre norte, sul, leste, oeste ou n\u00e3o fazer nada.\n        ship.next_action = choice([ShipAction.NORTH, ShipAction.EAST, ShipAction.SOUTH, ShipAction.WEST, None])\n    \n    # Itera por todos os estaleiros dispon\u00edveis para o agente\n    for shipyard in me.shipyards:\n        # Define que a pr\u00f3xima a\u00e7\u00e3o deve ser n\u00e3o fazer nada.\n        shipyard.next_action = None\n    \n    # Retorna todas as a\u00e7\u00f5es definidas para cada um dos navios e estaleiros.\n    return me.next_actions","728cd7da":"# Utiliza do ambiente do jogo para rodar o bot contra outros 3 agentes aleat\u00f3rios\nenv.run([\"\/kaggle\/working\/submission.py\", \"random\",\"random\",\"random\"])\n# Renderiza uma caixa de visualiza\u00e7\u00e3o com o jogo logo abaixo\nenv.render(mode=\"ipython\", width=800, height=600)\n\n# \u00c9 poss\u00edvel ver as a\u00e7\u00f5es do bot no jogo abaixo (bot amarelo)","840cf1ed":"# Bot simples de Halite IV\n\n## Conte\u00fados\n* C\u00f3digo base para desenvolvimento de bots no Halite IV\n* Explica\u00e7\u00f5es sobre a linguagem python\n* Funcionalidades da biblioteca de ambiente utilizada pelo jogo.","be7f5ae7":"## Papel do agente\nNo c\u00f3digo podem haver muitas defini\u00e7\u00f5es de fun\u00e7\u00e3o, mas existe uma restri\u00e7\u00e3o apenas sobre a \u00faltima fun\u00e7\u00e3o declarada:\n* **A \u00faltima fun\u00e7\u00e3o deve receber dois argumentos:**\n    * Uma observa\u00e7\u00e3o do ambiente, isto \u00e9, a posi\u00e7\u00e3o de todos os inimigos, min\u00e9rios, etc (o estado do jogo).\n    * Uma configura\u00e7\u00e3o que cont\u00e9m metadados sobre a partida, isto \u00e9, quantos turnos at\u00e9 o final do jogo, etc.\n* **A \u00faltima fun\u00e7\u00e3o deve retornar a a\u00e7\u00e3o a ser executada pelo agente:**\n    * Um navio pode:\n        * Mineirar, isto \u00e9, ficar parado.\n        * Andar uma casa para o norte, o sul, o leste ou o oeste.\n        * Se transformar num estaleiro.\n    * Um estaleiro pode:\n        * Criar um novo navio.\n        * N\u00e3o fazer nada.\n\nEssa \u00faltima fun\u00e7\u00e3o ser\u00e1 executada a cada turno do jogo e ser\u00e1 a \u00fanica forma de intera\u00e7\u00e3o direta com o jogo.","7c45b537":"## La\u00e7os de repeti\u00e7\u00e3o em python\nAssim como em muitas outras linguagens de programa\u00e7\u00e3o, em python tamb\u00e9m existem os la\u00e7os **\"for\"** e\n**\"while\"**. O \"while\" funcona de forma muito similar, mas o \"for\" possui certas mudan\u00e7as.\n```python\n# Em python, os valores booleanos s\u00e3o True e False (capitalizados)\nwhile True:\n    # Loop infinito\n    print(\"infinito\")\n\n# Itera por uma s\u00e9rie de 10 n\u00fameros que v\u00e3o de 0 a 9 (fun\u00e7\u00e3o range(10))\nfor i in range(10):\n    # Imprime na tela \"Contador: 0\" na primeira itera\u00e7\u00e3o, \"Contador: 1\" na segunda, etc.\n    # Operador + concatena (junta) a string \"Contador: \" com a string do n\u00famero armazenado em i\n    # (str(i))\n    print(\"Contador: \" + str(i))\n\n# Itera por cada um dos n\u00fameros da lista e os imprime\nfor fib in [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]:\n    print(\"Fibonacci: \" + str(fib))\n```","2c0f81e8":"### Escopo em python\nEm muitas linguagens de programa\u00e7\u00e3o o escopo de uma fun\u00e7\u00e3o, ou de um la\u00e7o de repeti\u00e7\u00e3o \u00e9 definido\npelas chaves {}. Em python isso \u00e9 feito atrav\u00e9s da identa\u00e7\u00e3o, ou seja, para saber se um c\u00f3digo se\nencontra dentro ou fora de um escopo, basta verificar sua identa\u00e7\u00e3o (n\u00famero de espa\u00e7os do in\u00edcio da\nlinha at\u00e9 o primeiro caractere que n\u00e3o seja espa\u00e7o).\nDe maneira simples, se tudo estiver alinhado verticalmente conforme o que se espera, a identa\u00e7\u00e3o, e\nportanto os escopos, estar\u00e3o definidos corretamente.\n\n### Fun\u00e7\u00f5es em python\nEm python as fun\u00e7\u00f5es s\u00e3o definidas com a palavra **\"def\"** seguido do nome da fun\u00e7\u00e3o.\nDiferentemente de outras linguagens de programa\u00e7\u00e3o, uma fun\u00e7\u00e3o em python n\u00e3o tem tipo definido,\nisso significa que ela pode retornar qualquer tipo de dados e cabe ao programador saber qual\/quais\ntipo(s) pode(m) ser retornado(s) (para retornar um valor, se usa da palavra **\"return\"**).\nAl\u00e9m disso, fun\u00e7\u00f5es podem receber argumentos que devem ser listados dentro de par\u00eanteses (tamb\u00e9m sem\ntipo definido).\n\n#### Alguns exemplos de fun\u00e7\u00f5es\n```python\ndef soma (a, b):\n    # Repare na identa\u00e7\u00e3o que indica que esse return faz parte da fun\u00e7\u00e3o soma\n    return a + b\n\n# Fun\u00e7\u00e3o de multiplica\u00e7\u00e3o de dois n\u00fameros naturais atrav\u00e9s de somas consecutivas.\ndef mult(a, b):\n    # If n\u00e3o precisa de par\u00eantesis.\n    # Vale notar que em python, n\u00e3o existe o \"else if\" e ao inv\u00e9s se usa \"elif\" (mesma funcionalidade)\n    if b == 0:\n        return 0\n    else:\n        # Demonstra a capacidade recursiva da linguagem\n        return soma(a, mult(a, b-1))\n```","6a32682a":"### Vari\u00e1veis em Python\nAs vari\u00e1veis em python n\u00e3o possuem um \u00fanico tipo definido, ao inv\u00e9s disso, uma mesma\nvari\u00e1vel pode mudar de tipo durante a execu\u00e7\u00e3o do programa sem problemas. Essas vari\u00e1veis\ns\u00e3o declaradas simplesmente ao se atribuir valor a um nome de vari\u00e1vel ainda n\u00e3o existente.\nO texto na mesma linha e ap\u00f3s o '#' \u00e9 um coment\u00e1rio\n```python\nvar = 2 # Declara a vari\u00e1vel \"var\" como o n\u00famero 2\nvar = \"Alguma string\" # Muda o tipo de \"var\" para string.\n```"}}