{"cell_type":{"117f7ca4":"code","05cd2c01":"code","9684467f":"code","4c596a20":"code","f79ac01b":"code","8c7b3ba9":"code","12acddf5":"code","92ceffc5":"code","aeea6819":"code","7d1f0c12":"code","896fdc17":"code","bedf1409":"code","dddd4564":"code","30a48e0c":"code","5c2e7476":"code","21614619":"code","7ad2dae9":"code","14b0658c":"code","32e48c07":"code","6118476c":"code","56d6e45d":"code","7302f9ff":"code","0cebcd83":"code","03da46f7":"code","f94584e9":"code","fda84716":"code","6160e252":"code","bf2a2996":"code","1b77236d":"code","2d981e64":"code","b6491ffa":"code","4ec7c598":"markdown","deb780a6":"markdown","ef0ce5ae":"markdown","18005362":"markdown","c637d35e":"markdown","18ddc5cd":"markdown","4f8d06e3":"markdown","71d5e88a":"markdown","effaf4a6":"markdown","18a9afef":"markdown","578e8ee0":"markdown"},"source":{"117f7ca4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","05cd2c01":"import seaborn as sns\nfrom matplotlib import pyplot as plt\nimport plotly.express as px\nimport plotly\n# Display all cell outputs\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = 'all'\nimport os\n%matplotlib inline","9684467f":"pwd","4c596a20":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\n","f79ac01b":"dataset_indicators= pd.read_csv(\"\/kaggle\/input\/uncover\/UNCOVER\/HDE_update\/inform-covid-indicators.csv\")\n#dataset_indicator_test_performed= pd.read_csv(\"\/kaggle\/input\/uncover\/HDE\/total-covid-19-tests-performed-by-country.csv\")\ndataset_covid19_cases = pd.read_csv(\"\/kaggle\/input\/uncover\/UNCOVER\/johns_hopkins_csse\/johns-hopkins-covid-19-daily-dashboard-cases-by-country.csv\")\ndataset_covid_test_performed= pd.read_csv(\"\/kaggle\/input\/uncover\/UNCOVER\/HDE_update\/HDE\/total-covid-19-tests-performed-by-country.csv\")","8c7b3ba9":"dataset_indicators.tail(10)","12acddf5":"dataset_covid19_cases.tail(3)","92ceffc5":"dataset_covid_test_performed.tail(5)","aeea6819":"dataset_confirmed_cases_by_country = dataset_covid19_cases[['country_region', 'confirmed', 'deaths', 'recovered', 'active']]","7d1f0c12":"#Grouped the confirmed cases, deatjs and recovered cases by country\ndataset_confirmed_cases_by_country=dataset_confirmed_cases_by_country.groupby(['country_region']).sum()\ndataset_confirmed_cases_by_country.tail(10)","896fdc17":"#resetting the index\ndataset_confirmed_cases_by_country=dataset_confirmed_cases_by_country.reset_index()\ndataset_confirmed_cases_by_country.tail(10)","bedf1409":"data = [dict(type='choropleth',\n             locations = dataset_confirmed_cases_by_country['country_region'].astype(str),\n             z=dataset_confirmed_cases_by_country['confirmed'].astype(int),\n             locationmode='country names')]\n\n\n\n\nfig = dict(data=data, \n           layout_title_text=\"COVID-19 Confirmed cases\")\n\n\nplotly.offline.iplot(fig)","dddd4564":"data = [dict(type='choropleth',\n             locations = dataset_covid_test_performed['entity'].astype(str),\n             z=dataset_covid_test_performed['total_covid_19_tests'].astype(int),\n             locationmode='country names')]\n\nfig = dict(data=data, \n           layout_title_text=\"COVID-19 test performed\")\n\nplotly.offline.iplot(fig)","30a48e0c":"# cleaning the country names for joining\ndataset_confirmed_cases_by_country.loc[dataset_confirmed_cases_by_country.country_region=='US','country_region']='United States of America'\ndataset_indicators.loc[dataset_indicators.country=='Viet Nam','country']='Vietnam'\ndataset_indicators.loc[dataset_indicators.country=='Russian Federation','country']='Russia'\ndataset_indicators.loc[dataset_indicators.country=='Korea Republic of','country']='Korea, South'\ndataset_indicators.loc[dataset_indicators.country=='Moldova Republic of','country']='Moldova'\ndataset_covid_test_performed.loc[dataset_covid_test_performed.entity=='United States','entity']='United States of America'","5c2e7476":"#replace No Data with 0\ndataset_indicators=dataset_indicators.replace(\"No data\", 0)","21614619":"#renaming country column name to country_region for joing the two dataframes\ndataset_indicators.columns=['country_region', 'iso3', 'inform_risk',\n       'inform_p2p_hazard_and_exposure_dimension', 'population_density',\n       'population_living_in_urban_areas',\n       'proportion_of_population_with_basic_handwashing_facilities_on_premises',\n       'people_using_at_least_basic_sanitation_services',\n       'inform_vulnerability', 'inform_health_conditions',\n       'inform_epidemic_vulnerability', 'mortality_rate_under_5',\n       'prevalence_of_undernourishment', 'inform_lack_of_coping_capacity',\n       'inform_access_to_healthcare',\n       'inform_epidemic_lack_of_coping_capacity', 'physicians_density',\n       'current_health_expenditure_per_capita', 'maternal_mortality_ratio']","7ad2dae9":"# outer join between cases in different countries and countries health indicators\ndata_tmp=pd.merge(dataset_confirmed_cases_by_country,dataset_indicators,  on='country_region', how='outer')\ndata_tmp=pd.merge(data_tmp,dataset_covid_test_performed,  left_on='country_region', right_on='entity',how='left')\ndata_tmp.tail(2)","14b0658c":"#Cleaning the NaN data and data with x\ndata_tmp=data_tmp.replace(np.nan, 0)\ndata_tmp=data_tmp.replace('x', 0)\ndata_tmp.tail(40)","32e48c07":"#createing dataset with numeric values\ndata_k =data_tmp[['total_covid_19_tests', 'confirmed', 'deaths', 'recovered', 'active',\n                  'inform_risk', 'inform_p2p_hazard_and_exposure_dimension',\n       'population_density', 'population_living_in_urban_areas',\n       'proportion_of_population_with_basic_handwashing_facilities_on_premises',\n       'people_using_at_least_basic_sanitation_services',\n       'inform_vulnerability', 'inform_health_conditions',\n       'inform_epidemic_vulnerability', 'mortality_rate_under_5',\n       'prevalence_of_undernourishment', 'inform_lack_of_coping_capacity',\n       'inform_access_to_healthcare',                \n       'current_health_expenditure_per_capita', 'maternal_mortality_ratio']]","6118476c":"from sklearn.cluster import KMeans\n#calculating WCSS which is the sum of squares of the distances of each data point represeting a country\n#in all clusters to their respective centroids\nwcss=[]\nfor i in range(1,11):\n    kmeans = KMeans(n_clusters=i, init='k-means++', max_iter=300, n_init=10)\n    y_means = kmeans.fit(data_k)\n    wcss.append(y_means.inertia_)\n#Plotting WCSS to find the number of clusters\nplt.plot(range(1,11), wcss)\nplt.xlabel(\"No. of clusters\")\nplt.ylabel(\" Within Cluster Sum of Squares\")\nplt.show()","56d6e45d":"kmeans_covid = KMeans(n_clusters=5, init='k-means++', max_iter=300, n_init=10)\ny_kmeans = kmeans.fit_predict(data_k)\n\n# Fitting K-Means to the dataset\nkmeans = KMeans(n_clusters = 5, init = 'k-means++', random_state = 42)\ny_kmeans = kmeans.fit_predict(data_k)\n\n\n#beginning of  the cluster numbering with 1 instead of 0\ny_kmeans1=y_kmeans\ny_kmeans1=y_kmeans+1\n\n# New Dataframe called cluster\ncluster = pd.DataFrame(y_kmeans1)\n# Adding cluster to the Dataset1\ndata_k['cluster'] = cluster\n#Mean of clusters\nkmeans_mean_cluster = pd.DataFrame(round(data_k.groupby('cluster').mean(),1))\nkmeans_mean_cluster","7302f9ff":"plt.figure(figsize=(10, 8))\nplt.scatter(data_k.iloc[:,0], data_k.iloc[:,1],c=y_kmeans, cmap='rainbow')  # plot points with cluster dependent colors\nplt.title('Covid Clustering')\nplt.xlabel(\"Test Perfomed by the country\")\nplt.ylabel(\"No. of confirmed cases\")\nplt.show()","0cebcd83":"data_risk= pd.DataFrame()\ndata_risk[\"country\"]=data_tmp[\"country_region\"]\ndata_risk[\"Risk_Level\"]=y_kmeans1","03da46f7":"\nfor group in range(1,6):\n    countries=data_risk.loc[data_risk['Risk_Level']==group]\n    listofcoutries= list(countries['country'])\n    print(\"Group\", group, \":\", listofcoutries)","f94584e9":"data = [dict(type='choropleth',\n             colorscale='reds',\n             locations =data_risk['country'].astype(str),\n             z= data_risk['Risk_Level'].astype(int),\n             locationmode='country names')]\n\nfig = dict(data=data, \n           layout_title_text=\"Country grouped based on Health care quality, no. of COVID-19 cases and tests performed\")\n\nplotly.offline.iplot(fig)","fda84716":"# considered heath indicators and test perfomed to understand the impact on confirmed COVID-19 cases\nnames = ['total_covid_19_tests',  \n       'inform_risk', 'inform_p2p_hazard_and_exposure_dimension',\n       'population_density', 'population_living_in_urban_areas',\n       'proportion_of_population_with_basic_handwashing_facilities_on_premises',\n       'people_using_at_least_basic_sanitation_services',\n       'inform_vulnerability', 'inform_health_conditions',\n       'inform_epidemic_vulnerability', 'mortality_rate_under_5',\n       'prevalence_of_undernourishment', 'inform_lack_of_coping_capacity',\n       'inform_access_to_healthcare', 'current_health_expenditure_per_capita',\n       'maternal_mortality_ratio', 'cluster']","6160e252":"from sklearn.feature_selection import mutual_info_regression, mutual_info_classif\nfrom sklearn.feature_selection import SelectKBest, SelectPercentile\nmi = mutual_info_regression(data_k[names], data_k['deaths'] )\nmi = pd.Series(mi)\nmi.index = names\nmi.sort_values(ascending=False)\nmi.sort_values(ascending=False).plot.bar(figsize=(10, 4))\nplt.title(\" Factor impacting COVID-19 deaths\")","bf2a2996":"#createing dataset with numeric values\ndata_health =data_tmp[['inform_risk', 'inform_p2p_hazard_and_exposure_dimension',\n       'population_density', 'population_living_in_urban_areas',\n       'proportion_of_population_with_basic_handwashing_facilities_on_premises',\n       'people_using_at_least_basic_sanitation_services',\n       'inform_vulnerability', 'inform_health_conditions',\n       'inform_epidemic_vulnerability', 'mortality_rate_under_5',\n       'prevalence_of_undernourishment', 'inform_lack_of_coping_capacity',\n       'inform_access_to_healthcare',                \n       'current_health_expenditure_per_capita', 'maternal_mortality_ratio']]","1b77236d":"from sklearn.cluster import KMeans\n#calculating WCSS which is the sum of squares of the distances of each data point represeting a country\n#in all clusters to their respective centroids\nwcss=[]\nfor i in range(1,11):\n    kmeans = KMeans(n_clusters=i, init='k-means++', max_iter=300, n_init=10)\n    y_means = kmeans.fit(data_health)\n    wcss.append(y_means.inertia_)\n#Plotting WCSS to find the number of clusters\nplt.plot(range(1,11), wcss)\nplt.xlabel(\"No. of clusters\")\nplt.ylabel(\" Within Cluster Sum of Squares\")\nplt.show()","2d981e64":"# Fitting K-Means to the dataset\nkmeans = KMeans(n_clusters = 5, init = 'k-means++', random_state = 42)\ny_kmeans = kmeans.fit_predict(data_health)\n\n\n#beginning of  the cluster numbering with 1 instead of 0\ny_kmeans1=y_kmeans\ny_kmeans1=y_kmeans+1\n\n# New Dataframe called cluster\ncluster = pd.DataFrame(y_kmeans1)\n# Adding cluster to the Dataset1\ndata_health['cluster'] = cluster\n#Mean of clusters\nkmeans_mean_cluster = pd.DataFrame(round(data_health.groupby('cluster').mean(),1))\nkmeans_mean_cluster","b6491ffa":"group=1\nfor group in range(1, 6):\n    countries=data_risk.loc[data_risk['Risk_Level']==group]\n    listofcoutries= list(countries['country'])\n    print(listofcoutries)","4ec7c598":"## Plotting the groups of countries on world map","deb780a6":"## Matching Country Names from Covid cases and data indicator file to join the datasets","ef0ce5ae":"##### 5 groups of countries with different risk levels\n## Group 1: Countries like India, Denmark, Canada, Ecuador, Brazil, South Africa, etc.\nRepresents countries with\u00a0\n* Low no. of test performed,\u00a0\n* Less confirmed cases,\u00a0\n* least deaths\n* High population density\u00a0\n* Presence of undernourishment is higher and basic sanitation is low\n\n## Group 2: Germany and Italy\nRepresents countries with\u00a0\n* Highest no. of test performed\n* The highest number of active cases\n* A high number of deaths\n* Highest population density\n* Better health care condition\n\n## Group 3: China, France, Iran, Spain, and the United Kingdom\nRepresents countries with\n* Highest no. of test performed\n* A relatively high number of active cases\n* A relatively high number of deaths\n* A relatively high population density\n* Better health care condition\n\n## Group 4: Australia, Russia, United Arab Emirates\nRepresents countries with\n* High no. of test performed\n* Least number of active cases\n* The lowest number of deaths\n* A relatively low population density\n* Good health care condition\n## Group 5: United States of America\nRepresents countries with\n* High no. of test performed\n* The highest number of confirmed cases\n* The highest number of deaths\n* Lowest population density\n* Best health care condition","18005362":"## Plotting the no. of test performed across different countries","c637d35e":"1. ##### Grouping countries into 5 different clusters based on no. of test performed, cases confirmed, deaths and recovered cases and different health indicators showing the health care condition","18ddc5cd":"##  Outer join between cases in different countries and countries health indicators\n##  Left join the resultant dataset with no. of test performd in different countries","4f8d06e3":"## KMeans clustering to identify countries with similar risk level for Covid-19","71d5e88a":"## Displaying data from different datasets","effaf4a6":"## Feature importances for understanding risk to to different countries","18a9afef":"## Plotting the confirmed cases on the world map","578e8ee0":"## Aggregating the cases by countries to get the latest confirmed cases, deaths and recovered cases"}}