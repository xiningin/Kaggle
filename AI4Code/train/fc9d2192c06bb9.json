{"cell_type":{"78bd7457":"code","89c99e8b":"code","de01ef69":"code","b0e95a90":"code","7c6127ed":"markdown","ec697d80":"markdown","1f153896":"markdown","23dc343b":"markdown","b985504c":"markdown","38797c5a":"markdown","54c6dd01":"markdown","c24f8034":"markdown","a99906a6":"markdown","76d908ca":"markdown","3d289bb6":"markdown","19df5b99":"markdown","5bcebf8e":"markdown","81a73155":"markdown","9cc16a18":"markdown","b05fb410":"markdown","2adfb4a7":"markdown","e7421fce":"markdown","116cafdb":"markdown","82de38df":"markdown","2ae9daba":"markdown","33aafd7c":"markdown","9c88fef2":"markdown","31570547":"markdown","bb6ac47c":"markdown"},"source":{"78bd7457":"import os\nimport numpy as np\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","89c99e8b":"def jaacard(a, b):\n    pass","de01ef69":"a = np.array([1, 0, 0, 1, 1, 1, 1])\nb = np.array([0, 1, 1, 0, 1, 0, 0])\nc = np.array([1, 1 ,0, 1, 1, 1, 1])","b0e95a90":"print(jaacard(a, a))\nprint(jaacard(a, b))\nprint(jaacard(a, c))","7c6127ed":"22. Calculate `distances matrix` between artists usting [pairwise_distances](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.metrics.pairwise_distances.html).","ec697d80":"6. Find users which have listened to most number of unique songs.","1f153896":"7. Find 5 most listened artists according to dataset.","23dc343b":"21. In next task we will visualize artist similarities. For what else type of machine learning task `distances matrix` can be used?","b985504c":"5. Find 5 most listened songs.","38797c5a":"26. Download this notebook with outputs and send to us.","54c6dd01":"16. Collect all unique users and fit [LabelEncoder](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.preprocessing.LabelEncoder.html) with these.","c24f8034":"11. Discard all values longer than 60 minutes as we can assume that song is for sure shorter.","a99906a6":"12. Draw a chart with durations of this song. Choose chart type which will help us find correct song duration.","76d908ca":"Hello there!\nWe are glad that you've joined SNOD.DOG recruitment process. Below is small task for you! This should take no more than 2 hours. Good luck! Feel free to ask if you have any questions.\n\n1. Create account on [Kaggle](https:\/\/www.kaggle.com\/) and load this notebook with dataset from [link](https:\/\/www.kaggle.com\/mrugacz95\/snowdog-recruitment-task).\n\nFiles contain dataset based on LastFm. You are provided with two files:\n* track_title_artist.txt -  informations about tracks: track ID, track title and artist name,\n* user_track_time.txt - data about service usage: user ID, track ID, listen date.  \n\n\n2. Load datasets from `kaggle\/input` directory.","3d289bb6":"3. Check if data has loaded properly.","19df5b99":"Form Spotify we can find that duration of \"All I Need\" from Radiohead is 3 minutes and 49 seconds. Find out if we can retreive this information from dataset. \n\n9. First get all events from user with id `a674291a0de57facfb5b0bd8c9fa16ab`.","5bcebf8e":"13. For this time we only used data from one user. Can you do the same reseach with whole dataset? You don't have to care about removing last single users event duration as it will not affect results.\n\nAlso instead of drawing chart use [np.histogram](https:\/\/docs.scipy.org\/doc\/numpy\/reference\/generated\/numpy.histogram.html) function to find \"All I Need\" duration.","81a73155":"19. Create matrix filled with 100 rows and number of columns equal to number of unique users.","9cc16a18":"8. Count all users that have listened to all 3 most popular song from Pink Floyd.","b05fb410":"18. Find 100 most popular artist. Indices in this dataframe will be used in task 17.","2adfb4a7":"4. Deal with missing data if any.","e7421fce":"14. Write small summary if it worked and what other ideas about inforamtions can we retrive from events time.","116cafdb":"24. Visualize transformed data on chart.","82de38df":"25. From chart read 3 most similar artist to Guns N' Roses. Also write comment if visulization is accurate, basing on you knowledge of artist similarities. How can we improve it?","2ae9daba":"20. For every row fill matrix with 1 for users that were listening to such artist.\n\nExample:\n* Artists with users that were lisining to them:\n    \n```\nThe Rolling Stones: [user1, user2, user5]  \nPerl Jam: [user1, user2, user3, user5]  \nThe Who [user1, user4, user5]\n```\n* Result matrix:\n    \n|  |u1 |u2 | u3|u4 | u5|\n|---|---|---|---|---|---|\n|The Rolling Stones | 1 | 1 | 0 | 0 | 1 |\n|Perl Jam           | 1 | 1 | 1 | 0 | 1 |\n|The Who            | 1 | 0 | 0 | 1 | 1 |\n","33aafd7c":"23. Transform `distences matrix` using [TSNE](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.manifold.TSNE.html#sklearn.manifold.TSNE) with `n_components=2`.","9c88fef2":"10. Most often users are listening song one after one and rarely are skipping songs. Can you calculate time between listening songs for this user. Most often this will exact duration of song? \n\nTip: Use [shift](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.shift.html)","31570547":"17. Collect all unique users that were listening to The Rolling Stones and transform these with encoder.","bb6ac47c":"15. Jacaard index in statisic used for measuring similarity between sets.\n\n![Jacaard_index](https:\/\/wikimedia.org\/api\/rest_v1\/media\/math\/render\/svg\/eaef5aa86949f49e7dc6b9c8c3dd8b233332c9e7)\n\nwhere:\n* |A| is size of set A\n* A \u2229 B is intersection of sets A and B \n* A \u222a B is union of sets A and B\n\nThis measure is in range from 0 to 1, where 1 means that two sets are the same and 0 means that are different. \nInstead of using sets we will use array where 1 means that element is present and 0 otherwise.\nExamples:\n```\nA = [1, 0, 0, 1, 1, 1, 1] # eg. {'A', 'D', 'E', 'F', 'G', 'H'}\nB = [0, 1, 1, 0, 1, 0, 0] # eg. {'B', 'C', 'E'}\nC = [1, 1 ,0, 1, 1, 1, 1] # eg. {'A', 'B', 'D', 'E', 'F', 'G', 'H'}\nJ(A, B) = 7 \/ 7 = 1.0 # the same\nJ(A, B) = 1 \/ 7 \u2248 0.14 # not similar\nJ(A, C) = 6 \/ 7 \u2248 0.83 # very similar\n```\n\nImplement jacaard function which will take two numpy arrays as arguments and return its similarity."}}