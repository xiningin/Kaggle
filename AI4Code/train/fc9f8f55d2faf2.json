{"cell_type":{"31e18f5f":"code","f5dd25f2":"code","c220b961":"code","fadf9970":"code","1ba0990b":"code","4e3b4a44":"code","2313d3c7":"code","e5607cd8":"code","3b04fc44":"markdown","52aaee50":"markdown","b9005328":"markdown","65746b73":"markdown","936954c5":"markdown"},"source":{"31e18f5f":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.metrics import accuracy_score\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","f5dd25f2":"train = pd.read_csv('..\/input\/tabular-playground-series-apr-2021\/train.csv')\ntest = pd.read_csv('..\/input\/tabular-playground-series-apr-2021\/test.csv')\n\ntrain['is_train'] = True\ntest['is_train'] = False\n\ntnt = train.append(test).reset_index(drop = True)\n\ntnt","c220b961":"\ntnt['Cabin_Letter'] = tnt['Cabin'].str[0].fillna('unknown')\ntnt['Cabin_Number'] = tnt['Cabin'].str[1:].fillna(-1).astype('int')\ntnt['Embarked'] = tnt['Embarked'].fillna('unknown')\ntnt['Sex'] = tnt['Sex'].fillna('unknown')\ntnt['Parch'] = tnt['Parch'].astype('str')\ntnt['Fare'] = tnt['Fare'].fillna(tnt['Fare'].mean())\ntnt['Age'] = tnt['Age'].fillna(tnt['Age'].mean())\ntnt['SibSp'] = tnt['SibSp'].astype('str')\ntnt['Pclass'] = tnt['Pclass'].astype('str')\n\n# split Ticket in two parts\ntnt[['ticket_pt2','ticket_pt1']] = tnt['Ticket'].str[::-1].str.split(' ', expand=True)\ntnt['ticket_pt1'] = tnt['ticket_pt1'].str[::-1]\ntnt['ticket_pt2'] = tnt['ticket_pt2'].str[::-1]\n","fadf9970":"tnt.head()","1ba0990b":"#tnt.info()","4e3b4a44":"# select features for model\n\ntarget = ['Survived']\nfeatures = ['Sex', 'Embarked','Cabin_Letter',  \n            'Parch', 'Age', 'SibSp', 'Pclass', 'ticket_pt1', \n            'Cabin_Number', 'Fare']\n\ntnt = tnt[features + target +['is_train']]\n\n## ohe\ntnt = pd.get_dummies(tnt)\n\n## split into train and test dataset\ntt = tnt[tnt.is_train]\ntte = tnt[tnt.is_train==False]","2313d3c7":"%%time\n\nN_SPLITS = 5\nskf = StratifiedKFold(n_splits=N_SPLITS)\n\ntarget = ['Survived']\nfeatures = list(set(tnt.columns)-set(target))\n\nX = tt[features]\ny = tt[target].values\n\ntest_preds = np.zeros((tte.shape[0], N_SPLITS))\n\nacc_all = 0\n\nfor fold, (train_index, test_index) in enumerate(skf.split(X, y)):\n    X_train, X_test = X.iloc[train_index], X.iloc[test_index]\n    y_train, y_test = y[train_index].ravel(), y[test_index].ravel()\n\n    model = GradientBoostingClassifier(random_state=0,).fit(X_train, y_train)\n    \n    acc = accuracy_score(y_test, model.predict(X_test))\n    acc_all += acc \/ N_SPLITS\n    print(f'Accuracy of fold #{fold}: {acc}')\n    \n    test_preds[:, fold] = model.predict(tte[features])\n\ntte[target] = test_preds.mean(axis=1).round().astype('int')\nprint(f'\\nMean accuracy: {acc_all}')","e5607cd8":"submission = pd.read_csv('..\/input\/tabular-playground-series-apr-2021\/sample_submission.csv')\n\nsubmission.loc[:,'Survived'] = tte['Survived'].values\n\nsubmission.to_csv('submission.csv', index = False)\n\nsubmission.head()","3b04fc44":"## Train model and predict","52aaee50":"## Build some features","b9005328":"## Create submission","65746b73":"A simple, yet quick, baseline for the special edition of the titanic competition: https:\/\/www.kaggle.com\/c\/tabular-playground-series-apr-2021\n","936954c5":"## Load data"}}