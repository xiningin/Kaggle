{"cell_type":{"b8b82317":"code","d63aaf31":"code","02e0847e":"code","516d7df9":"code","59b5b6b1":"code","18ac81b9":"code","475368ab":"code","a65f203d":"code","aed7264c":"code","d7ae02c7":"code","ba7dd1e5":"code","34ac15c7":"code","ec3d1328":"code","e729e3e1":"code","297b609b":"code","de495996":"code","057f2aff":"code","73b2210d":"code","d1e1a048":"code","6c013afd":"markdown","336b7bb9":"markdown","58a63460":"markdown","34375afc":"markdown","d423d1b7":"markdown","eb1f8979":"markdown","13144861":"markdown","b6a28878":"markdown","9a7e3002":"markdown","a69c75d8":"markdown","965bfd03":"markdown","04cdfdcc":"markdown","d29b0e9c":"markdown","ce7f77a9":"markdown","54a0efd5":"markdown","86987c21":"markdown","e29cc5f0":"markdown","f0a2fbd2":"markdown","7103ba8d":"markdown","36216d85":"markdown","183db6ee":"markdown","9323d083":"markdown","9e29b65a":"markdown","2f4bb2a3":"markdown","d7a55e97":"markdown","26e920dc":"markdown","468548ac":"markdown","c29e3840":"markdown","e7142a7c":"markdown","acb57c1f":"markdown","31510738":"markdown","0aafd545":"markdown","217cfd43":"markdown"},"source":{"b8b82317":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Visualization\nfrom plotly.offline import init_notebook_mode, iplot\nimport plotly.graph_objs as go\nfrom plotly import tools\nimport plotly.figure_factory as ff\ninit_notebook_mode(connected=True)\nfrom wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\nimport matplotlib.pyplot as plt\n\n\nfrom IPython.display import display\n\nimport os\ninput_data = os.listdir(\"..\/input\")\n#print('Files: ', input_data)","d63aaf31":"kernels_df = pd.read_csv('..\/input\/Kernels.csv', usecols=['Id', 'AuthorUserId', 'CurrentKernelVersionId', 'ForkParentKernelVersionId', 'CreationDate', 'EvaluationDate', 'MadePublicDate', 'CurrentUrlSlug', 'Medal', 'MedalAwardDate', 'TotalVotes'])\n\ninit_nbr_kernels = len(kernels_df)\n\n# Parse Date Columns\nkernels_df['MadePublicDate'] = pd.to_datetime(kernels_df['MadePublicDate'])\nkernels_df['CreationDate'] = pd.to_datetime(kernels_df['CreationDate'])\nkernels_df['MedalAwardDate'] = pd.to_datetime(kernels_df['MedalAwardDate'])\n\n# Exclude Kernels without Url Slug ( just two for at the time of writing )\nkernels_df = kernels_df[~kernels_df['CurrentUrlSlug'].isnull()]\n\nusers_df = pd.read_csv('..\/input\/Users.csv', index_col='Id')\n\n# Exclude Kernels from the Kaggle Team\nnormal_users = users_df[users_df['PerformanceTier'] != 5]\n# Replace DisplayName with UserName where DisplayName is NaN\nnormal_user_kernels = kernels_df[kernels_df['AuthorUserId'].isin(normal_users.index)]\nnormal_user_kernels = normal_user_kernels.set_index('Id')\nfor i, r in normal_users[pd.isnull(normal_users['DisplayName'])].iterrows():\n    normal_users.at[i, 'DisplayName'] = r['UserName']\nassert not normal_users['DisplayName'].isnull().any()\n\n\n# Exclude Exercise Kernels which are Forked (most if not all are just forks of exercises to learn a topic from the section Kaggle Learn, they're not relevant to us)\nnormal_user_kernels = normal_user_kernels[ ~((normal_user_kernels['CurrentUrlSlug'].str.contains('exercise')) & (~normal_user_kernels['ForkParentKernelVersionId'].isnull()) ) ]\n#assert len(normal_user_kernels[ (~normal_user_kernels['ForkParentKernelVersionId'].isnull()) & (normal_user_kernels['CurrentUrlSlug'].str.contains('exercise'))]) == 0\n\n# Drop rows which have both dates (creation & madepublic) NULL ( ~ 190 at time of writing )\nnormal_user_kernels = normal_user_kernels.drop(normal_user_kernels[ (normal_user_kernels['MadePublicDate'].isnull()) & (normal_user_kernels['CreationDate'].isnull()) ].index)\n\n# Rows that have MadePublicDate NULL and CreationDate NOT NULL: we replace the NULL in MadePublicDate with the value of CreationDate\nfor i, r in normal_user_kernels.iterrows():\n    if pd.isnull(r['MadePublicDate']) and not pd.isnull(r['CreationDate']):\n        normal_user_kernels.at[i, 'MadePublicDate'] = r['CreationDate']\n\n# Replace NaN in 'Medal' with Zero\nnormal_user_kernels['Medal'] = normal_user_kernels['Medal'].fillna(0)        \n\n# Join Kernels with Authors ( to have the author name on the same row to make things easy)\nnormal_user_kernels = normal_user_kernels.join(users_df, on='AuthorUserId')\n\n\noldest_date = normal_user_kernels['MadePublicDate'].min()\nnewest_date = normal_user_kernels['MadePublicDate'].max()\nrange_dates_str = f\"{oldest_date.strftime('%b %Y')} ~ {newest_date.strftime('%b %Y')}\"\n\ndel kernels_df\ndel users_df\n\nafter_nbr_kernels = len(normal_user_kernels)\nprint('Number of Kernels after Filtering (', range_dates_str , '): ', after_nbr_kernels, f'({init_nbr_kernels - after_nbr_kernels} Kernels filtered)')\n","02e0847e":"# Pie Chats for Total Number of Kernels\n\nPLOT_BG_COLOR = '#f1f1f1'\n\nkernel_colors = ['#FF9999', '#66B3FF'] # ['awarded', 'not awarded']\nmedal_colors  = ['#ffd448', '#e9e9e9', '#f0ba7c' ] # ['Gold', 'Silver', 'Bronze']\n\nmedal_kernels = normal_user_kernels[normal_user_kernels['Medal'] > 0]\n\n# First Pie Chart: Awarded vs Not Awarded Kernels\nvals = []\nvals.append(len(medal_kernels))\nvals.append(len(normal_user_kernels[normal_user_kernels['Medal'] == 0]))\nchart1 = {\n            'type': 'pie',\n            'title': 'Awarded vs Not Awarded',\n            'titlefont': {'size': 16},\n            'labels': ['Kernels Awarded', 'Kernels Not Awarded'],\n            'values': vals,\n            'hoverinfo': 'label+value',\n            'textinfo': 'percent',\n            'textposition': 'inside',\n            'textfont': {'size': 12},\n            'marker': {'colors': kernel_colors, 'line': {'color': 'white', 'width': 2,}},\n            'domain': {'x': [0, 0.4], 'y': [0, 1]}\n        }\n\n# Second Pie Chart: Gold, Silver & Bronze Kernels\nvals = []\nvals.append(len(medal_kernels[medal_kernels['Medal'] == 1]))\nvals.append(len(medal_kernels[medal_kernels['Medal'] == 2]))\nvals.append(len(medal_kernels[medal_kernels['Medal'] == 3]))\n\n\n\nchart2 = {\n            'type': 'pie',\n            'title': 'Gold, Silver & Bronze',\n            'titlefont': {'size': 16},\n            'showlegend': False,\n            'labels': ['Gold', 'Silver', 'Bronze'],\n            'values': vals,\n            'hoverinfo': 'label+value',\n            'textinfo': 'percent+label',\n            'textfont': {'size': 12},\n            'marker': {'colors': medal_colors, 'line': {'color': 'white', 'width': .5,}},\n            'domain': {'x': [0.6, 1], 'y': [0,1]}\n        }\n\nfig = {\n    'data': [ chart1, chart2 ],\n    'layout': {\n        'height': 500,\n        'title': {\n            'text': f'Total number of Public Kernels ({range_dates_str})',\n            'font': {'size': 18}\n        }, 'legend': {\n            'orientation': 'h'\n        }\n    }\n}\n\niplot(fig)","516d7df9":"years = list(normal_user_kernels.MadePublicDate.dt.year.unique())\nyears.remove(2019) # Remove this year because it has just started and has few entries\nyears.sort()\nnbr_all_vals = []\nnbr_awarded_vals = []\nnbr_not_awarded_vals = []\nnbr_gold_vals = []\nnbr_silver_vals = []\nnbr_bronze_vals = []\n\nfor y in years:\n    if not np.isnan(y):\n        years_kernels = normal_user_kernels[normal_user_kernels['MadePublicDate'].dt.year == y]\n        nbr_all_vals.append(len(years_kernels))\n        golds = len(years_kernels[years_kernels['Medal'] == 1])\n        silvers = len(years_kernels[years_kernels['Medal'] == 2])\n        bronzes = len(years_kernels[years_kernels['Medal'] == 3])\n        nbr_awarded_vals.append(golds+silvers+bronzes)\n        nbr_not_awarded_vals.append(nbr_all_vals[-1] - nbr_awarded_vals[-1])\n        nbr_gold_vals.append(golds)\n        nbr_silver_vals.append(silvers)\n        nbr_bronze_vals.append(bronzes)\n#print(years, nbr_all_vals, nbr_awarded_vals, nbr_gold_vals, nbr_silver_vals, nbr_bronze_vals)","59b5b6b1":"# Bar Chart for Number of Kernels per year\n\nfig = { 'data': [\n        {   'type': 'bar',\n            'name': 'Kernels w\/o Awards',\n            'x': years,\n            'y': nbr_not_awarded_vals,\n            'marker': {'color': kernel_colors[1] },\n            'xaxis': 'x1',\n            'yaxis': 'y1'\n        },\n        {   'type': 'bar',\n            'name': 'Awarded Kernels',\n            'x': years,\n            'y': nbr_awarded_vals,\n            'marker': {'color': kernel_colors[0] },\n            #'line': {'color': '#ffd448' },\n            'xaxis': 'x1',\n            'yaxis': 'y1'\n        }\n], 'layout': {\n        'plot_bgcolor': PLOT_BG_COLOR,\n        'height': 600,\n        'title': 'Change of Number of Kernels per year',\n        'legend': {'orientation': 'h'},\n        'xaxis': {'dtick': 1},\n        'yaxis': {'dtick': 5000, 'title': 'Number of Kernels'}\n    }}\niplot(fig)","18ac81b9":"# Bar & Line Chart for Awarded Kernels per Year by Medal\n\nfig = { 'data': [\n        {\n            'type': 'bar',\n            'name': 'Gold',\n            'x': years,\n            'y': nbr_gold_vals,\n            'marker': {'color': medal_colors[0]},\n        },\n        {\n            'type': 'bar',\n            'name': 'Silver',\n            'x': years,\n            'y': nbr_silver_vals,\n            'marker': {'color': medal_colors[1]},\n        },\n        {\n            'type': 'bar',\n            'name': 'Bronze',\n            'x': years,\n            'y': nbr_bronze_vals,\n            'marker': {'color': medal_colors[2]},\n        },\n        {   'type': 'scatter',\n            'name': 'Number of Awarded Kernels',\n            'x': years,\n            'y': nbr_awarded_vals,\n            'line': {'color': kernel_colors[0] },\n        },\n    ], 'layout': {\n        'title': 'Change of Number of Awarded Kernel per year',\n        'legend': {'orientation': 'h'},\n        'height': 600,\n        'plot_bgcolor': PLOT_BG_COLOR,\n        'xaxis': {'dtick': 1},\n        'yaxis': {'dtick': 250, 'title': 'Number of Kernels'}\n        \n    }\n}\niplot(fig)","475368ab":"nbr_medals_per_author = pd.crosstab( [normal_user_kernels['AuthorUserId'], normal_user_kernels['DisplayName']], normal_user_kernels['Medal'])\nnbr_medals_per_author = nbr_medals_per_author.rename(columns={0: 'NotAwarded', 1.0: 'Gold', 2.0: 'Silver', 3.0: 'Bronze'})\nnbr_medals_per_author['Awarded'] = nbr_medals_per_author['Gold'] + nbr_medals_per_author['Silver'] + nbr_medals_per_author['Bronze']\nnbr_medals_per_author = nbr_medals_per_author.sort_values(by='Awarded', ascending=False)\nnbr_medals_per_author = nbr_medals_per_author.reset_index(level=1) # Make DisplayName a column\n\nn = 30\ntop = nbr_medals_per_author[:n]\n\n\nfig = {\n    'data': [\n        {\n            'type': 'bar',\n            'y': top['Bronze'].values,\n            'x': top['DisplayName'].values,\n            'name': 'Bronze',\n            'marker': {'color': medal_colors[2]}\n        }, {\n            'type': 'bar',\n            'y': top['Silver'].values,\n            'x': top['DisplayName'].values,\n            'name': 'Silver',\n            'marker': {'color': medal_colors[1]}\n        }, {\n            'type': 'bar',\n            'y': top['Gold'].values,\n            'x': top['DisplayName'].values,\n            'name': 'Gold',\n            'marker': {'color': medal_colors[0]}\n        }\n    ], 'layout': {\n        'title': f'Top {n} Kernel Authors ({range_dates_str})',\n        'barmode': 'stack',\n        'yaxis': {'title': 'Number of Awarded Kernels'},\n        'legend': {'x': 0.92, 'y': 1},\n        'margin': {'r': 0},\n        #'plot_bgcolor': PLOT_BG_COLOR,\n    }\n}\n\niplot(fig)","a65f203d":"\nfig = {\n    'data': [\n        {\n            'type': 'bar',\n            'y': top['NotAwarded'].values,\n            'x': top['DisplayName'].values,\n            'name': 'Not Awarded Kernels',\n            'marker': {'color': kernel_colors[1]}\n        },{\n            'type': 'bar',\n            'y': top['Awarded'].values,\n            'x': top['DisplayName'].values,\n            'name': 'Awarded Kernels',\n            'marker': {'color': kernel_colors[0]}\n        }\n    ], 'layout': {\n        'title': f'Top {n} Kernel Authors ({range_dates_str})',\n        'barmode': 'stack',\n        'yaxis': {'title': 'Number of Kernels'},\n        'legend': {'x': 0.78, 'y': 1},\n        'plot_bgcolor': PLOT_BG_COLOR,\n        'margin': {'r': 0}\n    }\n}\n\niplot(fig)","aed7264c":"nbr_awarded_kernels_per_tier = medal_kernels['PerformanceTier'].value_counts()\nnbr_awarded_kernels_per_tier = nbr_awarded_kernels_per_tier.sort_index()\n#nbr_awarded_kernels_per_tier\n\ntier_colors = ['#5AC995', '#00BBFF', '#976591', '#F96517', '#DCA917']\n\nfig = {\n    'data': [{\n        'type': 'pie',\n        'labels': ['Novices', 'Contributors', 'Experts', 'Masters', 'Grandmasters'],\n        'values': nbr_awarded_kernels_per_tier,\n        'hole': .3,\n        'textinfo': 'percent+label',\n        'marker': {'colors': tier_colors}\n    }],\n    'layout': {\n        'title': f'Number of Awarded Kernels by Author Tier',\n        'showlegend': False\n    }\n}\niplot(fig)","d7ae02c7":"# Date of first kernel\nn = 50\ntop = nbr_medals_per_author.head(n)\noldest_kernel_dates = []\nfor userid in top.index:\n    oldest_kernel_date = normal_user_kernels[normal_user_kernels['AuthorUserId'] == userid]['MadePublicDate'].min()\n    oldest_kernel_dates.append(oldest_kernel_date)\noldest_kernel_dates = pd.Series(oldest_kernel_dates, index=top.index).sort_values()\n\n# Date of first kernel\n\n#fig = ff.create_distplot(s, [f'Top {n} authors'])\n\n\nfig= {\n    'data': [\n        {\n            'type': 'histogram',\n            #'bin_size': .4,\n            'marker': {\"color\": 'red', 'line': {'color': 'white', 'width': 2}}, \n            'x': oldest_kernel_dates,\n            \"opacity\": 0.5, \n        }\n    ],\n    'layout': {\n        'title': f'Dates of First Published Kernel (top {n} Authors)',\n        'xaxis': {'title': 'Date of First Published Kernel'},\n        'yaxis': {'title': 'Number of Authors'}\n    }\n}\n\niplot(fig)","ba7dd1e5":"tags_df = pd.read_csv('..\/input\/Tags.csv')\nnormal_user_kernel_tags = pd.read_csv('..\/input\/KernelTags.csv')\nnormal_user_kernel_tags = normal_user_kernel_tags[normal_user_kernel_tags['KernelId'].isin(normal_user_kernels.index)]\nmedal_kernels_tag_ids = normal_user_kernel_tags[normal_user_kernel_tags['KernelId'].isin(medal_kernels.index)]['TagId']\ntags_df = tags_df.set_index('Id')\ntags_dic = tags_df[['Slug', 'Name']].to_dict('index')\nslugs = []\nfor tid in medal_kernels_tag_ids:\n    slugs.append(tags_dic[tid]['Slug'])\n\nwc=WordCloud(width=800, height=400).generate(' '.join(slugs))\nplt.clf()\nplt.figure( figsize=(16,9) )\nplt.title('Most used Tags in Awarded Kernels', fontsize=20)\nplt.imshow(wc)\nplt.axis('off')\nplt.show()","34ac15c7":"# Bar chart for Top used Tags in Awarded Kernels\n\nn = 30\nslug_counts = pd.Series(slugs).value_counts().head(n)\n\nfig = {\n    'data': [\n        {\n            'type': 'bar',\n            #'orientation': 'h',\n            'y': slug_counts,\n            'x': slug_counts.index,\n            'marker': {'color': slug_counts, 'colorscale': 'Viridis', 'showscale': True}\n        }\n    ], 'layout': {\n        'title': f'Top {n} most used Tags in Awarded Kernels',\n        'yaxis': {'title': 'Number of times used'}\n    }\n}\niplot(fig)","ec3d1328":"normal_user_kernel_versions = pd.read_csv('..\/input\/KernelVersions.csv', \n                                          usecols=['Id', 'KernelId', 'KernelLanguageId', 'AuthorUserId', 'VersionNumber', 'CreationDate'])\nnormal_user_kernel_versions.set_index('Id', inplace=True)\n\n#normal_user_kernels.set_index('Id', inplace=True)\n\n# Drop All versions which have KernelId NaN\nnormal_user_kernel_versions = normal_user_kernel_versions.drop(\n    normal_user_kernel_versions[normal_user_kernel_versions['KernelId'].isnull()].index, axis=0)\n\n# Drop All versions which have VersionNumber NaN\nnormal_user_kernel_versions = normal_user_kernel_versions.drop(\n    normal_user_kernel_versions[normal_user_kernel_versions['VersionNumber'].isnull() ].index, axis=0)\n\nkernel_ids_with_null_current_version = list(normal_user_kernels[pd.isnull(normal_user_kernels['CurrentKernelVersionId'])].index)\n#print('There are ', len(kernel_ids_with_null_current_version), 'Kernels with null CurrentKernelVersionId')\nnull_kvs = normal_user_kernel_versions[normal_user_kernel_versions['KernelId'].isin(kernel_ids_with_null_current_version)]\n\n# Try to find the CurrentKernelVersionId for the Kernels that have them NaN\nfor i, r in normal_user_kernels[normal_user_kernels.index.isin(kernel_ids_with_null_current_version)].iterrows():\n    kvs = null_kvs[null_kvs['KernelId'] == i]\n    if len(kvs) == 1:\n        normal_user_kernels.at[i, 'CurrentKernelVersionId'] = kvs.index.values[0]\n    elif len(kvs) == 0:\n        pass\n        #print('WTF: Kernel ', i )\n    else:\n        r= kvs[kvs['CreationDate'] == kvs['CreationDate'].max()]\n        if len(r) == 1:\n            normal_user_kernels.at[i, 'CurrentKernelVersionId'] = r.index.values[0]\n        else:\n            normal_user_kernels.at[i, 'CurrentKernelVersionId'] = r.iloc[0].index.values[0]\n\nkernel_languages_dic = pd.read_csv('..\/input\/KernelLanguages.csv', usecols=['Id', 'DisplayName'],index_col='Id')\nkernel_languages_dic = kernel_languages_dic.to_dict('index')\n\n# For each kernel which has a valid CurrentKernelVersionId, fill the language column with the appropriate Language\nnormal_user_kernels['KernelLanguage'] = 'Unknown'\nfor i,k in normal_user_kernels[normal_user_kernels['CurrentKernelVersionId'].isin(normal_user_kernel_versions.index)].iterrows():\n    kv_id = k['CurrentKernelVersionId']\n    x = normal_user_kernel_versions.loc[kv_id]\n    lan_id = x['KernelLanguageId']\n    #print(lan_id)\n    if lan_id in kernel_languages_dic.keys():\n        language = kernel_languages_dic[lan_id]['DisplayName']\n        normal_user_kernels.at[i, 'KernelLanguage'] = language\n","e729e3e1":"ct1 = pd.crosstab(normal_user_kernels['AuthorUserId'], normal_user_kernels['KernelLanguage'])\nct2 = pd.crosstab(normal_user_kernels['AuthorUserId'], normal_user_kernels['Medal'])\nauthor_stats = ct1.join(ct2)\nauthor_stats = author_stats.join(normal_users['DisplayName'])\nfor i, r in author_stats.iterrows():\n    if (r['Unknown'] > 0):\n        if r['Python'] != r['R']:\n            if r['Python'] > r['R']:\n                author_stats.at[i, 'Python'] = r['Python']+r['Unknown']\n            elif r['R'] > r['Python']:\n                author_stats.at[i, 'R'] = r['Unknown']+r['R']\n            author_stats.at[i, 'Unknown'] = 0\n        elif (r['Python'] == r['R']) and (r['Python'] > 0):\n            x = int(r['Unknown']\/2)\n            author_stats.at[i, 'Python'] = x\n            author_stats.at[i, 'R'] = x\n            author_stats.at[i, 'Unknown'] = 0 if x%2 == 0 else 1\nauthor_stats = author_stats.rename(columns={\n    0:'NbrNotAwardedKernels',\n    'Python':'NbrPythonKernels',\n    'R':'NbrRKernels',\n    'Unknown':'UnknownLanguageKernels',\n    'DisplayName': 'UserDisplayName',})\nauthor_stats['NbrAwardedKernels'] = author_stats[1] + author_stats[2] + author_stats[3]\nauthor_stats.drop([1,2,3], axis=1, inplace=True)\nmedal_author_stats = author_stats[author_stats['NbrAwardedKernels'] > 0]\nnbr_python_awarded_kernels = medal_author_stats['NbrPythonKernels'].sum()\nnbr_r_awarded_kernels = medal_author_stats['NbrRKernels'].sum()\nnbr_unknown_awarded_kernels = medal_author_stats['UnknownLanguageKernels'].sum()","297b609b":"\nfig = {\n    'data': [\n        {\n            'type': 'pie',\n            'values': [nbr_python_awarded_kernels, nbr_r_awarded_kernels, nbr_unknown_awarded_kernels],\n            'labels': ['Python', 'R', 'Other'],\n            'marker': {'colors': ['#FFD548','#2167BA', 'grey']},\n            'textinfo': 'percent+label',\n            'hole': .3,\n            'showlegend': False\n        }\n    ],\n    'layout': {\n        'title': 'Awarded Kernels by Language'\n    }\n\n}\n\niplot(fig)\n","de495996":"# Imports\nnormal_user_kernel_version_competitions = pd.read_csv('..\/input\/KernelVersionCompetitionSources.csv')\n#print(len(normal_user_kernel_version_competitions))\nnormal_user_kernel_version_competitions = normal_user_kernel_version_competitions[normal_user_kernel_version_competitions['KernelVersionId'].isin(normal_user_kernel_versions.index.values)]\n#print(len(normal_user_kernel_version_competitions))\n\nnormal_user_kernel_version_datasets = pd.read_csv('..\/input\/KernelVersionDatasetSources.csv')\n#print(len(normal_user_kernel_version_datasets))\nnormal_user_kernel_version_datasets = normal_user_kernel_version_datasets[normal_user_kernel_version_datasets['KernelVersionId'].isin(normal_user_kernel_versions.index.values)]\n#print(len(normal_user_kernel_version_datasets))\n\n#dataset_nbr_kernels = pd.read_csv('..\/input\/Datasets.csv', usecols=['Id', 'TotalKernels'], index_col='Id')\n#dataset_nbr_kernels['NbrAwardedKernels'] = 0\n\n#competition_nbr_kernels = pd.read_csv('..\/input\/Competitions.csv', usecols=['Id', 'HasKernels'], index_col='Id')\n#competition_nbr_kernels = competition_nbr_kernels[competition_nbr_kernels['HasKernels'] == True]\n#competition_nbr_kernels['NbrAwardedKernels'] = 0\n\n\n# Add NbrCompetitions & NbrDatasets to normal_user_kernels\nnormal_user_kernels['NbrCompetitions'] = 0\nnormal_user_kernels['NbrDatasets'] = 0\n\nfor i, r in normal_user_kernels.iterrows():\n    ckvid = r['CurrentKernelVersionId']\n    if not np.isnan(ckvid):\n        ckvid = int(ckvid)\n        comps = set(normal_user_kernel_version_competitions[normal_user_kernel_version_competitions['KernelVersionId'] == ckvid]['SourceCompetitionId'])\n        dats  = set(normal_user_kernel_version_datasets[normal_user_kernel_version_datasets['KernelVersionId'] == ckvid]['SourceDatasetVersionId'])\n        normal_user_kernels.at[i, 'NbrCompetitions'] += len(comps)\n        normal_user_kernels.at[i, 'NbrDatasets'] += len(dats)\n#        if r['Medal'] > 0:\n#            #print(ckvid)\n#        #    if nbr_comps > 0:\n#                for compID in comps:\n#                    if compID in competition_nbr_kernels.index.values:\n#                        competition_nbr_kernels.at[compID, 'NbrAwardedKernels'] += 1\n#            if nbr_dats > 0:\n#                for datID in dats:\n#                    if datID in dataset_nbr_kernels.index.values:\n#                        dataset_nbr_kernels.at[datID, 'NbrAwardedKernels'] += 1\n#                    else:\n#                        print(datID)\n\n\nmedal_kernels = normal_user_kernels[normal_user_kernels['Medal'] > 0]\n\nnbr_competitions = medal_kernels['NbrCompetitions'].sum()\nnbr_datasets = medal_kernels['NbrDatasets'].sum()\n","057f2aff":"\nfig = {\n    'data': [\n        {\n            'type': 'pie',\n            'values': [nbr_competitions, nbr_datasets],\n            'labels': ['Competitions', 'Datasets'],\n            'marker': {'colors': ['#FFCD07','#00BF77']},\n            'textinfo': 'percent+label',\n            'hole': .3,\n            'showlegend': False\n        }\n    ],\n    'layout': {\n        'title': 'Awarded Kernels by Data Source'\n    }\n\n}\n\niplot(fig)\n","73b2210d":"# Add MonthsOfExperience Field\noldest_kernel_dates = []\nfor userid in author_stats.index:\n    oldest_kernel_date = normal_user_kernels[normal_user_kernels['AuthorUserId'] == userid]['MadePublicDate'].min()\n    oldest_kernel_dates.append(oldest_kernel_date)\n\noldest_kernel_dates = pd.Series(oldest_kernel_dates, index=author_stats.index)\noldest_kernel_dates = ((pd.Timestamp.now() - oldest_kernel_dates)\/ np.timedelta64(1,'M')).astype('int')\nnbr_medals_per_author['MonthsOfExperience'] = oldest_kernel_dates\n#nbr_medals_per_author.head()\n\n# Add NumberPublishedKernels Field\nauthor_stats['NbrPublishedKernels'] = author_stats['NbrNotAwardedKernels'] + author_stats['NbrAwardedKernels']\n#author_stats.head()\n\ntop_tags = tags_df[tags_df['Slug'].isin(slug_counts.index)].index\n\nauthor_stats['NbrTopTagsUsed'] = 0\nfor userid in author_stats.index:\n    kernel_ids = list(normal_user_kernels[normal_user_kernels['AuthorUserId'] == userid].index.values)\n    tag_ids = normal_user_kernel_tags[normal_user_kernel_tags['KernelId'].isin(kernel_ids)]['TagId']\n    relevant_tag_ids = [tid for tid in tag_ids if tid in top_tags]\n    author_stats.at[userid, 'NbrTopTagsUsed'] = len(relevant_tag_ids)\n#author_stats.sample(5)\n\n","d1e1a048":"df = author_stats[['NbrAwardedKernels', 'NbrPublishedKernels', 'NbrTopTagsUsed', 'NbrPythonKernels', 'NbrRKernels', 'NbrNotAwardedKernels',]]\ncorr = df.corr()\nfig = {\n    'data': [\n        {\n            'type': 'heatmap',\n            'z': corr,\n            'x': df.columns,\n            'y': df.columns,\n            'colorscale': 'Reds'\n        }\n    ],\n    'layout': {\n        'title': 'Correlation Heatmap',\n        'margin':{\n            'l': 140\n        }\n    }\n}\n\niplot(fig)\n","6c013afd":"# 2. Medals are *<span style=\"color: #dca917\">RARE<\/span>* ! <a id=\"2\" \/>","336b7bb9":"# Introduction\nAlthough registered two years ago, I just started using the platform a couple of months ago, and was curious about how to become a Kaggle Expert or Master, so I decided to use the Kaggle Meta Dataset to dig into and examine some statistics related to Top Kernels and Top Kernel Authors.\n\nI hope this Kernel will be useful.\n\nNotes:\n* The Meta Kaggle Dataset is updated frequently, if you want to get the most up-to-date numbers, feel free to fork this kernel and run it.\n* I found a great amount of inconsistencies in the data, especially when it comes to KernelVersions. I write in the 'note' sections ([8](#8), [9](#9) )) how I deal with these inconsistencies, I hope that the Kaggle Team will look into them.. (Feel also free to check the code to see the details)","58a63460":"# 8. Python vs R <a id=\"8\" \/>","34375afc":"# 6. When did the Top Authors start publishing ?<a id=\"6\" \/>","d423d1b7":"# 5. You <span style=\"color: red\">CAN<\/span> do it too ! <a id=\"5\" \/>","eb1f8979":"# 7. Tags in Top Kernels <a id=\"7\" \/>","13144861":"# 10. Time for some Correlation ! <a id=\"10\" \/>","b6a28878":"# Conclusions:","9a7e3002":"# 1. Some Filtering <a id=\"1\" \/>\n","a69c75d8":"Let's now have a quick look at some of the Top Authors in Kaggle","965bfd03":"Most of us, beginners in Kaggle, might look at the Top Kernels and Top authors and think that getting Medals is easy. However, a quick look into the Meta Kaggle data shows that Kernels awarded with Medals are ***extremely RARE*** compared to the number of kernels without medals.\n\n**(You can hover to see the actual number values)**","04cdfdcc":"Another interesting thing to examine, is when did the Top authors start publishing their first Kernels. In other words, how much time did it take them to reach this level.","d29b0e9c":"### **<span style=\"color: red\">Observation<\/span>**:  There is no stark preference for either. Awarded Kernels use as Dataset Sources both Competition Datasets & Normal Datasets with approximately the same proportion.\n\n**Note**: \n* There are Kernels which have multiple sources, I counted all the sources of each kernel)*\n* Many *DatasetSourceIds* in *KernelVersionDatasetsources* are not present in the *Datasets* table.","ce7f77a9":"### **<span style=\"color: red\">Observation<\/span>**: Although the number of Kernels not awarded ***is much greater*** than the number of Kernels awarded, we can note a ***steady increase*** in the number of Awarded Kernels each year","54a0efd5":"### **<span style=\"color: red\">Observation<\/span>**:  Python is largely used and preferred in Awarded Kernels.\n\n\n#### **<span style=\"color: red\">Important Note<\/span>**\n\n***I found many inconsistencies in the KernelVersions table:***\n* Many Kernels have a NaN CurrentKernelVersionId (~32.000)\n* Many Kernels have no KernelVersions !\n* Many KernelVersions have unknown Kernel Language Ids\n\n***To mitigate the effect of those problems on the results, I did the following:***\n* I manually searched for and set the latest versions of Kernels who don't have a CurrentKernelVersionId \n* For the Kernels with unknown KernelLanguageId, I assumed that they were written in the language that their Authors wrote most of their kernels with.\n** *","86987c21":"### **<span style=\"color: red\">Observation<\/span>**:  We are interested in **Number of Awarded Kernels** and what it's most correlated with, and the results are :\n1. Number of Top Tags User\n2. Number of Published Kernels\n3. Number of Python Kernels\n4. Number of R Kernels\n5. Number of Not Awarded Kernels","e29cc5f0":"### **<span style=\"color: red\">Observation<\/span>**: <span style=\"color: #976591\"> Experts<\/span> produce the most number of Kernels ( probably because they want to become Masters). Then followed by <span style=\"color: #00BBFF\">Contributors<\/span> ! After them come <span style=\"color: #F96517\">Masters<\/span> and then <span style=\"color: #5AC995\">Novices<\/span> ! Lastly we have <span style=\"color: #DCA917\">Grandmasters<\/span> producing ~7.8% of the Awarded Kernels (probably because there only according to the [first chart](#2) only 8.5% of the authors have reached that level)","f0a2fbd2":"After seeing the last graph, one might think that those authors are ***Super Humans*** ! However, the **DATA** says that it's the product of **<span style=\"color: red\">HARDWORK<\/span>** and **<span style=\"color: red\">PASSION<\/span>**!\n\nThe following graph illustrates the proportion of Awarded & Not Awarded Kernels for each of the Top Authors :","7103ba8d":"\n* Most Awarded Kernels are Tutorials and Visualizations\n\n* Most Awarded Kernels are written in Python\n\n* There are of course many criteria other than the ones mentioned for a Kernel to be successful, for example: It must be written and formatted nicely, must add value to the reader and be interesting.\n\n* In Data Science as in Every Discipline, Success comes with two principal ingredients: **<span style=\"color: red\">PASSION & HARDWORK<\/span>**","36216d85":"### **<span style=\"color: red\">Observation<\/span>**:  **More than 50%** of the Top Authors started before January 2017 ( **more than one year ago** )\n\n(*Note: This only shows how much experience the top authors have on Kaggle, we're not taking into account their Data Science experience prior to Kaggle*)","183db6ee":"Let's now see which language is most used in Awarded Kernels","9323d083":"Kernels can have as a data source a **competition's dataset** or in a **normal dataset** ( or both ). Let's examine the data sources of Awarded Kernels.","9e29b65a":"# 9. Top Kernel Data Sources <a id=\"9\" \/>","2f4bb2a3":"### **<span style=\"color: red\">Impressive !<\/span> **   [Bojan Tunguz](https:\/\/www.kaggle.com\/tunguz\/kernels) comes in top with 72 Awarded Kernels, but there is a lot of competition between the Top 4.\n\n*(Note: There are many other great Kernel Authors not figuring in the list. You can fork this kernel and play with the n parameter in the code, to get the Top n Authors in terms of number of awarded Kernels)*","d7a55e97":"### **<span style=\"color: red\">Observation<\/span>**: Many Top Authors wrote *several non-awarded Kernels*. This shows that their success is the product of *<span style=\"color: red\">HARDWORK<\/span>* ! It's not always *<span style=\"color: #dca917\">GOLD<\/span>* !\n\n*(Note: It is possible that an author deletes some of his previously published Kernels. The graph is based on the Meta Kaggle dataset which only shows currently public Kernels )*","26e920dc":"## References:\n\n* [Kaggle Progression System](https:\/\/www.kaggle.com\/progression) (Page)\n* [Kaggle Trends](https:\/\/www.kaggle.com\/gaborfodor\/kaggle-trends) (Kernel)\n* [How to get upvotes in Kaggle](https:\/\/www.kaggle.com\/aleksandradeis\/how-to-get-upvotes-for-a-kernel-on-kaggle) (Kernel)","468548ac":"# 3. Who publishes Top Kernels ? <a id=\"3\" \/>","c29e3840":"In order to get the purest insights, we must take some time to clean the data we'll be working with. \nNot all Kernels in the dataset are relevant to us. We filter the kernels as follows:\n- **Exclude Kernels with no UrlSlug**\n- **Exclude Kernels whose authors are members of the Kaggle Team (we're interested in normal users and how they get medals)**\n- **Exclude Kernels which are solutions to exercises (from Kaggle Learn section)**\n- **Exclude Kernels where CreationDate & MadePublicDate are BOTH NULL ( we don't have any idea when they were created, maybe it's a Data Collection problem )**","e7142a7c":"### **<span style=\"color: red\">Observation<\/span>**:  It seems that top Kernels are directed towards **Beginners**, and are centered around **Exploratory Data Analysis** and **Visualization**","acb57c1f":"# Behind the Medals !\n\n\n*Hamza El Bouatmani*  - March 7th, 2019\n\n----\n\n","31510738":"# 4. It's not always **<span style=\"color: #dca917\">Gold<\/span>** ! <a id=\"4\" \/>","0aafd545":"Lastly, we examine the most used tags in the awarded Kernels.","217cfd43":"### One might also think that these Top Authors are the ones who publish the most in Kaggle. However, the **DATA** says something else !\n\nThe following graph shows the how many kernels were published by each Author Category (Preformance Tier):"}}