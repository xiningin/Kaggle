{"cell_type":{"7496e2b7":"code","47deb2b0":"code","58ef2f16":"code","e7e1d3ac":"code","f9ca656f":"code","a124cb6f":"code","94175c46":"code","d00e70f3":"code","6a18f0d8":"code","6e34ef57":"code","e8d6f272":"code","e34bc12f":"code","1ea81a7e":"code","88244d2a":"code","032f8762":"code","fa9b9445":"code","aaf8d9c5":"code","41379515":"code","ba4a116a":"code","89b88807":"code","bfbe560c":"code","ad50a975":"code","91ff0c54":"code","e7567ef2":"code","84f9aab6":"code","8cb75441":"code","e54c90e5":"code","79d0aeda":"code","319f7c3a":"code","36a9d839":"code","56a41992":"code","48f986db":"code","e72e4e5b":"code","be1a1798":"code","18418d41":"code","3da2b9df":"code","6544aaca":"code","3e096581":"code","1a194b00":"code","38267064":"code","9d21b0e5":"code","abd4e8d7":"code","03e0e172":"code","b459a543":"code","4afd59db":"code","bebe9450":"code","e33aa8dd":"code","f4bfdef1":"code","244a0b5c":"code","55c8f1f3":"code","e1c505d5":"code","1717dcf9":"code","0bb51c3d":"code","3f95f937":"code","1cf3defd":"code","07bd1580":"code","5d608f99":"code","b94d881d":"code","1a21e299":"code","626cc037":"code","fbc64f13":"code","c1663ab7":"code","59a17f84":"code","0da3a5d9":"code","3ed94cbd":"code","a0c0efd7":"code","540ee450":"code","a5b30814":"code","e9bbfd19":"code","872718c2":"code","6d69427b":"code","0816a4ed":"code","a04ff399":"code","66f6a0b8":"code","d2a5ca90":"code","99e31071":"code","3f54c9f5":"code","257b28a4":"code","e5c82ff3":"code","d88f2e3f":"code","0a84f639":"code","e62a2809":"code","cf1ac764":"code","49d92d80":"code","e100192b":"code","f5deab3a":"code","efbb8f5f":"code","f2bc2542":"code","8bf3c2e7":"code","c1abfad0":"code","eeb57b52":"code","7835eed4":"code","4160a9a3":"code","68e6b0cc":"code","9d759867":"code","af747d8d":"markdown","d004d069":"markdown","d3f932ad":"markdown","23a963a9":"markdown","afbd762b":"markdown","76d87c03":"markdown","27dc1091":"markdown","de1ba18c":"markdown","27b762ee":"markdown","59e19f30":"markdown","569f11fd":"markdown","d01d2694":"markdown","47135ec6":"markdown","9e83d8d4":"markdown","74789dbf":"markdown","4dedd2b7":"markdown"},"source":{"7496e2b7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","47deb2b0":"df = pd.read_csv('..\/input\/tabular-playground-series-jan-2022\/train.csv')\ntest = pd.read_csv('..\/input\/tabular-playground-series-jan-2022\/test.csv')","58ef2f16":"df","e7e1d3ac":"test","f9ca656f":"df.set_index('row_id',inplace=True)\ntest.set_index('row_id',inplace=True)","a124cb6f":"df","94175c46":"df.info(verbose=False)","d00e70f3":"df.describe()","6a18f0d8":"df.isnull().sum()","6e34ef57":"df['date'] = pd.to_datetime(df['date'])\ntest['date'] = pd.to_datetime(test['date'])","e8d6f272":"df['year'] = df['date'].dt.year\ndf['month'] = df['date'].dt.month\ntest['year'] = test['date'].dt.year\ntest['month'] = test['date'].dt.month","e34bc12f":"df","1ea81a7e":"df['year'].value_counts()","88244d2a":"df['country'].unique()","032f8762":"weekend_2015 = {1:[i for i in range(3,32,7)],\n                2:[i for i in range(7,29,7)],\n                3:[i for i in range(7,32,7)],\n                4:[i for i in range(4,31,7)],\n                5:[i for i in range(2,32,7)],\n                6:[i for i in range(6,31,7)],\n                7:[i for i in range(4,32,7)],\n                8:[i for i in range(1,32,7)],\n                9:[i for i in range(5,31,7)],\n                10:[i for i in range(3,32,7)],\n                11:[i for i in range(7,31,7)],\n                12:[i for i in range(5,32,7)],\n               }\nweekend_2016 = {1:[i for i in range(2,32,7)],\n                2:[i for i in range(6,30,7)],\n                3:[i for i in range(5,32,7)],\n                4:[i for i in range(2,31,7)],\n                5:[i for i in range(7,32,7)],\n                6:[i for i in range(4,31,7)],\n                7:[i for i in range(2,32,7)],\n                8:[i for i in range(6,32,7)],\n                9:[i for i in range(3,31,7)],\n                10:[i for i in range(1,32,7)],\n                11:[i for i in range(5,31,7)],\n                12:[i for i in range(3,32,7)],\n               }\nweekend_2017 = {1:[i for i in range(7,32,7)],\n                2:[i for i in range(4,29,7)],\n                3:[i for i in range(4,32,7)],\n                4:[i for i in range(1,31,7)],\n                5:[i for i in range(6,32,7)],\n                6:[i for i in range(3,31,7)],\n                7:[i for i in range(1,32,7)],\n                8:[i for i in range(5,32,7)],\n                9:[i for i in range(2,31,7)],\n                10:[i for i in range(7,32,7)],\n                11:[i for i in range(4,31,7)],\n                12:[i for i in range(2,32,7)],\n               }\nweekend_2018 = {1:[i for i in range(6,32,7)],\n                2:[i for i in range(3,29,7)],\n                3:[i for i in range(3,32,7)],\n                4:[i for i in range(7,31,7)],\n                5:[i for i in range(5,32,7)],\n                6:[i for i in range(2,31,7)],\n                7:[i for i in range(7,32,7)],\n                8:[i for i in range(4,32,7)],\n                9:[i for i in range(1,31,7)],\n                10:[i for i in range(6,32,7)],\n                11:[i for i in range(3,31,7)],\n                12:[i for i in range(1,32,7)],\n               }","fa9b9445":"weekend_2015","aaf8d9c5":"weekend_dict = {}\ndef weekend(date,month,year):\n    if year==2015:\n        if (date in weekend_2015[month])|((date-1) in weekend_2015[month]):\n            return 1\n        return 0\n    if year==2016:\n        if (date in weekend_2016[month])|((date-1) in weekend_2016[month]):\n            return 1\n        return 0\n    if year==2017:\n        if (date in weekend_2017[month])|((date-1) in weekend_2017[month]):\n            return 1\n        return 0\n    if year==2018:\n        if (date in weekend_2018[month])|((date-1) in weekend_2018[month]):\n            return 1\n        return 0","41379515":"def get_date(x):\n    return int(x.split('-')[2])\ndates = df['date'].astype(str).apply(get_date)","ba4a116a":"for i in range(len(df)):\n    weekend_dict[i] = weekend(dates.iloc[i],df['month'].iloc[i],df['year'].iloc[i])","89b88807":"weekend_dict","bfbe560c":"df.iloc[36]","ad50a975":"weekend_2015[1]","91ff0c54":"weekend_dict = pd.Series(weekend_dict)","e7567ef2":"weekend_dict","84f9aab6":"df['weekend'] = weekend_dict","8cb75441":"df","e54c90e5":"df['weekend'].value_counts()","79d0aeda":"test","319f7c3a":"test['year'].unique()","36a9d839":"weekend_2019 = {\n    1:[i for i in range(5,32,7)],\n    2:[i for i in range(2,29,7)],\n    3:[i for i in range(2,32,7)],\n    4:[i for i in range(6,31,7)],\n    5:[i for i in range(4,32,7)],\n    6:[i for i in range(1,31,7)],\n    7:[i for i in range(6,32,7)],\n    8:[i for i in range(3,32,7)],\n    9:[i for i in range(7,32,7)],\n    10:[i for i in range(5,32,7)],\n    11:[i for i in range(2,31,7)],\n    12:[i for i in range(7,32,7)]\n}","56a41992":"def weekend_test(date,month):\n    if date in weekend_2019[month]:\n        return 1\n    return 0","48f986db":"test_dates = test['date'].astype(str).apply(get_date)","e72e4e5b":"test_dates","be1a1798":"test_we_dict = {}\nfor i in range(26298,32868):\n    test_we_dict[i] = weekend_test(test_dates.loc[i],test['month'].loc[i])","18418d41":"test_we_dict","3da2b9df":"test_we_dict = pd.Series(test_we_dict)","6544aaca":"test_we_dict","3e096581":"test['weekend'] = test_we_dict","1a194b00":"test","38267064":"df.drop('date',axis=1,inplace=True)\ntest.drop('date',axis=1,inplace=True)","9d21b0e5":"df","abd4e8d7":"df['country'].unique()","03e0e172":"finland_festivals_dates = {\n    1 : [1],\n    6 : [20,25,26,27,28,10,14],\n    12 : [25,31],\n    8 : [14,15,16],\n    7 : [8,9,10,11,12,13,14,15,16,17,18,19],\n}\nnorway_festivals_dates = {\n    8 : [5,6,7,8,9,10,11,12,13],\n    6 : [29,30],\n    7 : [1,2,13,14,15,16,17],\n    1 : [1,28,29,30,31],\n    2 : [1,2,3,4,5,6],\n    12 : [13,25,31],\n}\nsweden_festivals_dates = {\n    1 : [1,5,6],\n    6 : [1,2,3,4,5,6,10,19,20,25],\n    7 : [17,18,19],\n    8 : [10,11,12],\n    4 : [10,11,12,13,30],\n    5 : [1,21,31],\n    10 : [9,10,11,12,13,14,15,16,17,18,30,31],\n    12 : [25,31]\n}","b459a543":"def festivals(country,date,month):\n    if country.lower()=='finland':\n        if month in finland_festivals_dates.keys():\n            if date in finland_festivals_dates[month]:\n                return 'F'\n        return 'NF'\n    if country.lower()=='sweden':\n        if month in sweden_festivals_dates.keys():\n            if date in sweden_festivals_dates[month]:\n                return 'S'\n        return 'NF'\n    if country.lower()=='norway':\n        if month in norway_festivals_dates.keys():\n            if date in norway_festivals_dates[month]:\n                return 'N'\n        return 'NF'","4afd59db":"df_festivals = {}\nfor i in range(len(df)):\n    df_festivals[i] = festivals(df['country'].iloc[i],dates.iloc[i],df['month'].iloc[i])","bebe9450":"df_festivals","e33aa8dd":"df_festivals = pd.Series(df_festivals)","f4bfdef1":"df['festivals'] = df_festivals","244a0b5c":"df","55c8f1f3":"test_festivals = {}\nfor i in range(26298,32868):\n    test_festivals[i] = festivals(test['country'].loc[i],test_dates.loc[i],test['month'].loc[i])","e1c505d5":"test_festivals","1717dcf9":"test_festivals = pd.Series(test_festivals)","0bb51c3d":"test['festivals'] = test_festivals","3f95f937":"test","1cf3defd":"df['product'].unique()","07bd1580":"df","5d608f99":"test","b94d881d":"plt.figure(figsize=(12,4),dpi=150)\nsns.countplot(x='country',data=df,hue='year');","1a21e299":"plt.figure(figsize=(12,4),dpi=150)\nsns.countplot(x='store',data=df,hue='year');","626cc037":"plt.figure(figsize=(12,4),dpi=150)\nsns.countplot(x='product',data=df,hue='store');","fbc64f13":"plt.figure(figsize=(12,8),dpi=150)\nsns.boxplot(x='store',y='num_sold',data=df)","c1663ab7":"plt.figure(figsize=(12,8),dpi=150)\nsns.boxplot(x='store',y='num_sold',data=df,hue='product');","59a17f84":"df.drop(df[df['store']=='KaggleRama']['num_sold'].idxmax(),inplace=True)","0da3a5d9":"df.drop(df[df['store']=='KaggleRama']['num_sold'].idxmax(),inplace=True)","3ed94cbd":"df.drop(df[df['store']=='KaggleRama']['num_sold'].idxmax(),inplace=True)","a0c0efd7":"df.drop(df[df['store']=='KaggleRama']['num_sold'].idxmax(),inplace=True)","540ee450":"plt.figure(figsize=(12,8),dpi=150)\nsns.boxplot(x='store',y='num_sold',data=df,hue='product')","a5b30814":"sns.countplot(x='month',data=df,hue='year')","e9bbfd19":"sns.boxplot(x='year',y='num_sold',data=df)","872718c2":"df[df['weekend']==1]['num_sold'].sum()\/len(df[df['weekend']==1]),df[df['weekend']==0]['num_sold'].sum()\/len(df[df['weekend']==0])","6d69427b":"df[~(df['festivals']=='NF')]['num_sold'].sum()\/len(df[~(df['festivals']=='NF')]),df[(df['festivals']=='NF')]['num_sold'].sum()\/len(df[(df['festivals']=='NF')])","0816a4ed":"# Sales in Finland during festival time\ndf[(df['country']=='Finland')&(df['festivals']=='F')]['num_sold'].sum()\/len(df[(df['country']=='Finland')&(df['festivals']=='F')])","a04ff399":"# Sales is Finland during normal days\ndf[(df['country']=='Finland')&(~(df['festivals']=='F'))]['num_sold'].sum()\/len(df[(df['country']=='Finland')&(~(df['festivals']=='F'))])","66f6a0b8":"df_enc = df.copy()","d2a5ca90":"df_enc = pd.get_dummies(df_enc,drop_first=True)","99e31071":"df_enc","3f54c9f5":"test = pd.get_dummies(test,drop_first=True)","257b28a4":"test","e5c82ff3":"from sklearn.model_selection import train_test_split","d88f2e3f":"X = df_enc.drop('num_sold',axis=1)\ny = df_enc['num_sold']","0a84f639":"X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.3,random_state=101)","e62a2809":"from sklearn.model_selection import cross_val_score\nfrom sklearn.linear_model import LinearRegression,Ridge,Lasso\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.pipeline import Pipeline","cf1ac764":"models = [LinearRegression(),Ridge(),Lasso(),KNeighborsRegressor(),DecisionTreeRegressor(),RandomForestRegressor()]\nfor m in models:\n    scores = cross_val_score(estimator = m,\n                             X = X_train,\n                             y = y_train,\n                             cv=5)\n    print(str(m)+' score is: %.3f+\/-%.3f'%(np.sum(scores),np.std(scores)))","49d92d80":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.preprocessing import StandardScaler\nmodels = [Ridge(),Lasso()]\nfor m in models:\n    pipe_m = Pipeline(steps=[('sc',StandardScaler()),(str(m)[:-2],m)])\n    param_grid = [{str(m)[:-2]+'__alpha':[0.001,0.01,0.1,1,10,100]}]\n    gm = GridSearchCV(estimator=pipe_m,\n                     param_grid=param_grid,\n                     cv=10)\n    gm.fit(X_train,y_train)\n    print('For '+str(m)+' best parameters are: \\n')\n    for i in gm.best_params_.keys():\n        print(str(i)+'-->'+str(gm.best_params_[i]))\n    print('For '+str(m)+' score is: %.3f'%(gm.best_score_))","e100192b":"from sklearn.pipeline import make_pipeline\npipe_ridge = make_pipeline(StandardScaler(),Ridge(alpha=10))\npipe_ridge.fit(X_train,y_train)\npred_ridge = pipe_ridge.predict(X_test)\npipe_lasso = make_pipeline(StandardScaler(),Lasso(alpha=0.1))\npipe_lasso.fit(X_train,y_train)\npred_lasso = pipe_lasso.predict(X_test)","f5deab3a":"from sklearn.metrics import mean_absolute_error,mean_squared_error\nmae = (mean_absolute_error(y_test,pred_ridge),mean_absolute_error(y_test,pred_lasso))\nrmse = (np.sqrt(mean_squared_error(y_test,pred_ridge)),np.sqrt(mean_squared_error(y_test,pred_lasso)))\nmae,rmse","efbb8f5f":"from sklearn.svm import SVR\nparam_grid = [\n    {'svr__kernel':['linear'],'svr__C':[0.01,0.1,1,10]},\n    {'svr__kernel':['rbf'],'svr__C':[0.01,0.1,1,10],'svr__gamma':[0.01,0.1,1,10]}\n]\npipe_svc = Pipeline(steps=[('sc',StandardScaler()),('svr',SVR())])\ngm = GridSearchCV(estimator=pipe_svc,\n                 param_grid=param_grid,\n                 cv=5)\ngm.fit(X_train,y_train)\ngm.best_score_","f2bc2542":"gm.best_estimator_","8bf3c2e7":"best_model = Pipeline(steps=[('sc',StandardScaler()),('svr',SVR(kernel='rbf',C=10,gamma=0.1))])\nbest_model.fit(X_train,y_train)\npred = best_model.predict(X_test)\nmean_absolute_error(y_test,pred)","c1abfad0":"final_model = Pipeline(steps=[('sc',StandardScaler()),('svr',SVR(kernel='rbf',C=10,gamma=0.1))])\nfinal_model.fit(X,y)","eeb57b52":"pred = final_model.predict(test)","7835eed4":"test['num_sold'] = pred","4160a9a3":"submission = pd.DataFrame(test['num_sold'])","68e6b0cc":"submission","9d759867":"submission.to_csv('submissions.csv')","af747d8d":"Let's select Ridge and Lasso","d004d069":"## Model fitting and hyperparameter tuning","d3f932ad":"**Kaggle Hat** seems to be the most **bought one**.","23a963a9":"## Finding weekends","afbd762b":"The above data shows that avg number of items sold is significantly higher during weekends","76d87c03":"Run the below cell four times","27dc1091":"Avg number of items sold is a little higher during the festivals and holidays time.","de1ba18c":"## EDA AND OUTLIER DETECTION","27b762ee":"Base model with no hyperparameter tuning","59e19f30":"## Encoding","569f11fd":"## DATA PREPROCESSING","d01d2694":"Let's try SVR() as well.","47135ec6":"## Finding festivals","9e83d8d4":"KaggleRama seems to be performing better than KaggleMart in the 'num_sold' field","74789dbf":"## Final Model","4dedd2b7":"The above two outputs confirm our inference"}}