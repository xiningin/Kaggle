{"cell_type":{"3800bb40":"code","e083361c":"code","f5d5e784":"code","a883fa83":"code","3b438157":"code","79c02990":"code","c9841d87":"code","6c2fb220":"code","43f1dc10":"code","8399a6e8":"code","02bdfe07":"code","1eb2517a":"code","d9d32a16":"code","f03177f3":"code","ed4ba3da":"code","d0fd653e":"code","2e83b9d0":"code","226ee3c5":"code","d72ba232":"code","c5a3bdc1":"code","47367c5c":"code","eb64a02a":"code","4fad7848":"code","b9cdcdf4":"code","56c609b5":"code","b12c00ee":"code","229a1bf2":"code","e726aa20":"code","5e9ac013":"code","080b3b96":"code","8cef37d1":"code","1305241d":"code","b8b561da":"code","3c841428":"markdown","38e1dcee":"markdown","f47dc297":"markdown","2f8762df":"markdown","50c53671":"markdown"},"source":{"3800bb40":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e083361c":"#Utils\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import classification_report, roc_auc_score, make_scorer, accuracy_score, roc_curve\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.calibration import CalibratedClassifierCV\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC \nfrom xgboost import XGBClassifier\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.cluster import KMeans\nfrom kmodes.kmodes import KModes\nfrom sklearn.preprocessing import PowerTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport lightgbm\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom scipy.stats import uniform as sp_uniform\nfrom scipy.stats import randint as sp_randint\nfrom scipy.stats import uniform as sp_uniform\nfrom sklearn.metrics import pairwise_distances\nfrom sklearn.metrics.pairwise import pairwise_kernels\nfrom sklearn.metrics.pairwise  import cosine_similarity\nfrom sklearn.metrics.pairwise import chi2_kernel\nfrom catboost import CatBoostClassifier\nimport seaborn as sns\nimport plotly.io as pio\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots\nfrom plotly.offline import init_notebook_mode, iplot\nfrom sklearn.manifold import TSNE\nfrom sklearn.ensemble import IsolationForest\nfrom sklearn.metrics import log_loss\nfrom sklearn.preprocessing import KBinsDiscretizer\nimport category_encoders as ce\nfrom tpot import TPOTClassifier\nimport timeit\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import StackingClassifier\nfrom sklearn.neural_network import MLPClassifier\nfrom tpot.builtins import ZeroCount\nfrom sklearn.preprocessing import RobustScaler","f5d5e784":"pd.set_option('display.max_rows', None)\npd.set_option('display.max_columns', None)","a883fa83":"import warnings\nwarnings.filterwarnings(\"ignore\")","3b438157":"train= pd.read_csv('\/kaggle\/input\/tabular-playground-series-jun-2021\/train.csv', sep=',')\ntrain = train.set_index('id')","79c02990":"test= pd.read_csv('\/kaggle\/input\/tabular-playground-series-jun-2021\/test.csv', sep=',')\ntest = test.set_index('id')","c9841d87":"fig = px.histogram(train, x=\"target\",\n                   width=600, \n                   height=400,\n                   histnorm='percent',\n                   template=\"simple_white\"\n                   )\nfig.update_layout(title=\"Target Description\", \n                  font_family=\"San Serif\",\n                  titlefont={'size': 20},\n                  showlegend=True,\n                  legend=dict(\n                      orientation=\"v\", \n                      y=1, \n                      yanchor=\"top\", \n                      x=1.0, \n                      xanchor=\"right\"\n                  )                \n                 ).update_xaxes(categoryorder='total descending')#\nfig.update_traces( \n                  marker_line_width=1.5, opacity=0.99)\nfig.show()","6c2fb220":"cols = train.columns[:-1] \ndf1= train[train['target']==train.target.unique()[0]]\ndf2= train[train['target']==train.target.unique()[1]]\ndf3= train[train['target']==train.target.unique()[2]]\ndf4= train[train['target']==train.target.unique()[3]]\n\nfig = make_subplots(specs=[[{\"secondary_y\": True}]])\nfig.add_trace(go.Scatter(y=df1[cols].mean(),\n                         x=cols,\n                         name = str(train.target.unique()[0]),\n                         line=dict(color='royalblue', width=2, dash='solid')\n                         ))\nfig.add_trace(go.Scatter(y=df2[cols].mean(),\n                         x=cols,\n                         name = str(train.target.unique()[1]),\n                         line=dict(color='red', width=2, dash='solid')\n                         ))\nfig.add_trace(go.Scatter(y=df3[cols].mean(),\n                         x=cols,\n                         name = str(train.target.unique()[2]),\n                         line=dict(color='orange', width=2, dash='solid')\n                         ))\nfig.add_trace(go.Scatter(y=df4[cols].mean(),\n                         x=cols,\n                         name = str(train.target.unique()[3]),\n                         line=dict(color='yellow', width=2, dash='solid')\n                         ))\nfig.add_trace(go.Scatter(y=df4[cols].mean(),\n                         x=cols,\n                         name = str(train.target.unique()[4]),\n                         line=dict(color='lightblue', width=2, dash='solid')\n                         ))\nfig.add_trace(go.Scatter(y=df4[cols].mean(),\n                         x=cols,\n                         name = str(train.target.unique()[5]),\n                         line=dict(color='grey', width=2, dash='solid')\n                         ))\nfig.add_trace(go.Scatter(y=df4[cols].mean(),\n                         x=cols,\n                         name = str(train.target.unique()[6]),\n                         line=dict(color='violet', width=2, dash='solid')\n                         ))\nfig.add_trace(go.Scatter(y=df4[cols].mean(),\n                         x=cols,\n                         name = str(train.target.unique()[7]),\n                         line=dict(color='green', width=2, dash='solid')\n                         ))\n\n\nfig.update_layout(title='<b>Average value by Class<b>',\n                  xaxis_title='Features',\n                  yaxis_title='Average Value',\n                  titlefont={'size': 28, 'family':'Serif'},\n                  template='simple_white',\n                  showlegend=True,\n                  width=900, height=500)\n\nfig.update_yaxes(title_text=\"<b>values<\/b>\", secondary_y=True)\n\nfig.show()    \n","43f1dc10":"train['sum_row'] = train[cols].sum(axis=1)\nfig = px.box(train,x='target', y=\"sum_row\")\n\nfig.update_layout(title='<b>Sum row wise by class<b>',\n                  xaxis_title='Class',\n                  yaxis_title='Sum of features',\n                  titlefont={'size': 28, 'family':'Serif'},\n                  template='simple_white',\n                  showlegend=True,\n                  width=900, height=500)\n\nfig.show()\ntrain = train.drop(columns=['sum_row'])","8399a6e8":"fig3 = make_subplots(specs=[[{\"secondary_y\": True}]])\nfig3.add_trace(go.Scatter(y=(train[cols]<0).sum(),\n                         x=cols,\n                         name = str(train.target.unique()[0]),\n                         line=dict(color='royalblue', width=2, dash='solid')\n                         ))\nfig3.update_layout(title='<b>#Negative istances by feature in training set<b>',\n                  xaxis_title='Feature',\n                  yaxis_title='#Negatives',\n                  titlefont={'size': 28, 'family':'Serif'},\n                  template='simple_white',\n                  showlegend=True,\n                  width=1000, height=500)\nfig3.show()","02bdfe07":"fig3 = make_subplots(specs=[[{\"secondary_y\": True}]])\nfig3.add_trace(go.Scatter(y=(test[cols]<0).sum(),\n                         x=cols,\n                         name = '#negative',\n                         line=dict(color='green', width=2, dash='solid')\n                         ))\nfig3.update_layout(title='<b>#Negative istances by feature in test set<b>',\n                  xaxis_title='Feature',\n                  yaxis_title='#Negatives',\n                  titlefont={'size': 28, 'family':'Serif'},\n                  template='simple_white',\n                  showlegend=True,\n                  width=1000, height=500)\nfig3.show()","1eb2517a":"df = pd.concat([train[cols], test[cols]], axis=0)","d9d32a16":"unique_df = pd.DataFrame(df.nunique()).reset_index()\nunique_df.columns=['features','count']\n\nfig1 = px.bar(unique_df, y='count', x=cols)\n\nfig1.update_layout(title='Feature cardinality in train+test set',\n                  xaxis_title='features',\n                  yaxis_title='# unique values',\n                  titlefont={'size': 28, 'family':'Serif'},\n                  template='simple_white',\n                  showlegend=True,\n                  width=1500, height=500)\nfig1.show()","f03177f3":"fig3 = make_subplots(specs=[[{\"secondary_y\": True}]])\nfig3.add_trace(go.Scatter(y=(train[cols]==0).mean(),\n                         x=cols,\n                         name = 'train_features=0',\n                         line=dict(color='royalblue', width=2, dash='solid')\n                         ))\nfig3.update_layout(title='<b>% features=0 in training Set set<b>',\n                  xaxis_title='Feature',\n                  yaxis_title='#Negatives',\n                  titlefont={'size': 28, 'family':'Serif'},\n                  template='simple_white',\n                  showlegend=True,\n                  width=1000, height=500)\nfig3.show()","ed4ba3da":"fig3 = make_subplots(specs=[[{\"secondary_y\": True}]])\nfig3.add_trace(go.Scatter(y=(test[cols]==0).mean(),\n                         x=cols,\n                         name = 'test_features=0',\n                         line=dict(color='green', width=2, dash='solid')\n                         ))\nfig3.update_layout(title='<b>% features=0 in test Set set<b>',\n                  xaxis_title='Feature',\n                  yaxis_title='#Negatives',\n                  titlefont={'size': 28, 'family':'Serif'},\n                  template='simple_white',\n                  showlegend=True,\n                  width=1000, height=500)\nfig3.show()","d0fd653e":"corr = train[train.columns[:-2]].corr()\nfig = go.Figure(data= go.Heatmap(z=corr,\n                                 x=corr.index.values,\n                                 y=corr.columns.values,\n                                 zmin=-0.3,\n                                 zmax=0.3\n                                 )\n                )\nfig.update_layout(title_text='<b>Correlation Matrix<b>',\n                  title_x=0.5,\n                  titlefont={'size': 24},\n                  width=900, height=800,\n                  xaxis_showgrid=False,\n                  yaxis_showgrid=False,\n                  yaxis_autorange='reversed', \n                  paper_bgcolor=None,\n                  )\nfig.show()","2e83b9d0":"train= pd.read_csv('\/kaggle\/input\/tabular-playground-series-jun-2021\/train.csv', sep=',')\ntrain = train.set_index('id')\ntest= pd.read_csv('\/kaggle\/input\/tabular-playground-series-jun-2021\/test.csv', sep=',')\ntest = test.set_index('id')","226ee3c5":"cols = train.columns[:-1]\ntarget = train['target']\ntrain = train[cols]","d72ba232":"!pip install -q -U matplotlib==3.1.3","c5a3bdc1":"!pip install -q -U git+https:\/\/github.com\/mljar\/mljar-supervised.git@master","47367c5c":"from supervised.automl import AutoML","eb64a02a":"automl = AutoML(\n    mode = \"Compete\",\n    algorithms=[\"CatBoost\", \"Xgboost\"],\n    total_time_limit=7*3600,\n    start_random_models=10,\n    hill_climbing_steps=3,\n    top_models_to_improve=3,\n    golden_features=False,\n    features_selection=False,\n    stack_models=True,\n    train_ensemble=True,\n    explain_level=1,\n    ml_task = 'multiclass_classification',\n    eval_metric='logloss',\n    validation_strategy={\n        \"validation_type\": \"kfold\",\n        \"k_folds\": 5,\n        \"shuffle\": False,\n        \"stratify\": True,\n    }\n)","4fad7848":"automl.fit(train, target)","b9cdcdf4":"automl.report()","56c609b5":"sub_sample = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jun-2021\/sample_submission.csv', sep=',')\nsub_sample = sub_sample.set_index('id')","b12c00ee":"predictions = automl.predict_all(test)","229a1bf2":"test= pd.read_csv('\/kaggle\/input\/tabular-playground-series-jun-2021\/test.csv', sep=',')\ntest = test.set_index('id')","e726aa20":"pred= predictions.set_index(test.index)","5e9ac013":"pred.head()","080b3b96":"sub_sample['Class_1'] = pred['prediction_Class_1']\nsub_sample['Class_2'] = pred['prediction_Class_2']\nsub_sample['Class_3'] = pred['prediction_Class_3']\nsub_sample['Class_4'] = pred['prediction_Class_4']\nsub_sample['Class_5'] = pred['prediction_Class_5']\nsub_sample['Class_6'] = pred['prediction_Class_6']\nsub_sample['Class_7'] = pred['prediction_Class_7']\nsub_sample['Class_8'] = pred['prediction_Class_8']\nsub_sample['Class_9'] = pred['prediction_Class_9']","8cef37d1":"sub_sample.head()","1305241d":"sub_sample = sub_sample.reset_index()","b8b561da":"sub_sample.to_csv('submission.csv',index=False)","3c841428":"features are more correlated in this competition. While in May TPS I set max and min euqal to 0.05","38e1dcee":"### Load Submission Sample","f47dc297":"### Predictions","2f8762df":"## MLJAR multiclass Classifier","50c53671":"### Load Data"}}