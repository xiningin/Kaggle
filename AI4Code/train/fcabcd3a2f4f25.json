{"cell_type":{"4b598a1e":"code","cdaa58d6":"code","032086fc":"code","b3b69244":"code","784e3485":"code","c9932861":"code","234bd1f2":"code","07b6fd7a":"code","e040f145":"code","2eb56223":"markdown","d787f260":"markdown","7c1dc1f5":"markdown","bcc4902d":"markdown","487994f9":"markdown","8829a55b":"markdown","be539d00":"markdown"},"source":{"4b598a1e":"import numpy as np\nimport pandas as pd\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\ntrain = pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-4\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-4\/test.csv\")","cdaa58d6":"train.info()\ntest.info()","032086fc":"train[\"Province_State\"] = train[\"Province_State\"].fillna('')\ntest[\"Province_State\"] = test[\"Province_State\"].fillna('')\n\ntrain[\"Month\"], train[\"Day\"] = 0, 0\nfor i in range(len(train)):\n    train[\"Month\"][i] = (train[\"Date\"][i]).split(\"-\")[1]\n    train[\"Day\"][i] = (train[\"Date\"][i]).split(\"-\")[2]\n    \ntest[\"Month\"], test[\"Day\"] = 0, 0\nfor i in range(len(test)):\n    test[\"Month\"][i] = (test[\"Date\"][i]).split(\"-\")[1]\n    test[\"Day\"][i] = (test[\"Date\"][i]).split(\"-\")[2]","b3b69244":"for i in range(len(train)):\n    if train[\"Province_State\"][i] != '':\n        train[\"Country_Region\"][i] = train[\"Province_State\"][i] + \" (\" + str(train[\"Country_Region\"][i]) + \")\"\n       \nfor i in range(len(test)):\n    if test[\"Province_State\"][i] != '':\n        test[\"Country_Region\"][i] = test[\"Province_State\"][i] + \" (\" + str(test[\"Country_Region\"][i]) + \")\"\n        \ntrain.drop(columns = \"Province_State\", inplace=True)\ntest.drop(columns = \"Province_State\", inplace=True)\n\ntrain.rename(columns = {\"Country_Region\" : \"Country\/State\"}, inplace=True)\ntest.rename(columns = {\"Country_Region\" : \"Country\/State\"}, inplace=True)\n","784e3485":"i = 0\nfor value in train[\"Country\/State\"].unique():\n    if i < len(train):\n        j = 1\n        while(train[\"Country\/State\"][i] == value):\n            train[\"Day\"][i] = j\n            j += 1; i += 1\n            if i == len(train):\n                break\n\ni = 0\nfor value in test[\"Country\/State\"].unique():\n    if i < len(test):\n        j = 72\n        while(test[\"Country\/State\"][i] == value):\n            test[\"Day\"][i] = j\n            j += 1; i += 1\n            if i == len(test):\n                break\n                \ntrain.rename(columns = {\"Day\" : \"No. of days\"}, inplace = True)\ntest.rename(columns = {\"Day\" : \"No. of days\"}, inplace = True)","c9932861":"train[\"Country\/State\"].loc[train[\"Country\/State\"] == \"Taiwan*\"] = \"Taiwan\"\ntest[\"Country\/State\"].loc[test[\"Country\/State\"] == \"Taiwan*\"] = \"Taiwan\"\n\ntrain = train.drop(columns = [\"Date\"])\ntest = test.drop(columns = [\"Date\"])\n\ncountriesorstates = train[\"Country\/State\"].unique()\nprint(countriesorstates)","234bd1f2":"import matplotlib.pyplot as plt\nimport random\nrandom_picks = random.choices(countriesorstates, k = 9)\nfor value in random_picks:\n    train_temp = train.loc[train[\"Country\/State\"] == value]\n    test_temp = test.loc[test[\"Country\/State\"] == value]\n    train_temp_cc = train_temp[\"ConfirmedCases\"].loc[train[\"Country\/State\"] == value]\n    train_temp_ft = train_temp[\"Fatalities\"].loc[train[\"Country\/State\"] == value]\n    \n    train_temp_X = train_temp.iloc[:, 5]\n    test_temp_X = test_temp.iloc[:, 3]\n    \n    x = train_temp_X.to_numpy(dtype = float)\n    y_1 = train_temp_cc.to_numpy(dtype = float)\n    y_2= train_temp_ft.to_numpy(dtype = float)\n    x = x.reshape(-1,)\n    \n    plt.plot(x, y_1, color ='red', label = value)\n    plt.xlabel(\"No. of days\")\n    plt.ylabel('Confirmed cases')\n    plt.legend()\n    plt.title(\"Place: \" + value)\n    plt.show()\n    \n    plt.plot(x, y_2, color ='black', label = value)\n    plt.xlabel(\"No. of days\")\n    plt.ylabel('Fatalities')\n    plt.legend()\n    plt.title(\"Place: \" + value)\n    plt.show()","07b6fd7a":"from sklearn.preprocessing import PolynomialFeatures\npoly_reg_cc = PolynomialFeatures(degree = 4)\npoly_reg_ft = PolynomialFeatures(degree = 4)\n\nfrom sklearn.linear_model import LinearRegression\nreg_cc = LinearRegression()\nreg_ft = LinearRegression()\n\nfrom sklearn.preprocessing import StandardScaler\n\nsub = pd.DataFrame({'ForecastId': [], 'ConfirmedCases': [], 'Fatalities': []})\nfor value in countriesorstates:\n    train_temp = train.loc[train[\"Country\/State\"] == value]\n    test_temp = test.loc[test[\"Country\/State\"] == value]\n    train_temp_cc = train_temp[\"ConfirmedCases\"].loc[train[\"Country\/State\"] == value].to_frame()\n    train_temp_ft = train_temp[\"Fatalities\"].loc[train[\"Country\/State\"] == value].to_frame()\n    \n    train_temp_X = train_temp.iloc[:, 4:6]\n    test_temp_X = test_temp.iloc[:, 2:4]\n    sc1 = StandardScaler()\n    train_temp_X = sc1.fit_transform(train_temp_X)\n    test_temp_X = sc1.transform(test_temp_X)\n    \n    sc_cc = StandardScaler()\n    sc_ft = StandardScaler()\n    train_temp_cc = sc_cc.fit_transform(train_temp_cc)\n    train_temp_ft = sc_ft.fit_transform(train_temp_ft)\n    \n    X_poly = poly_reg_cc.fit_transform(train_temp_X)\n    reg_cc.fit(X_poly, train_temp_cc)\n    test_cc = sc_cc.inverse_transform(reg_cc.predict(poly_reg_cc.fit_transform(test_temp_X)))\n    \n    X_poly = poly_reg_ft.fit_transform(train_temp_X)\n    reg_ft.fit(X_poly, train_temp_ft)\n    test_ft = sc_ft.inverse_transform(reg_ft.predict(poly_reg_ft.fit_transform(test_temp_X)))\n    \n    a = int(train[\"No. of days\"].loc[train[\"Country\/State\"] == \"India\"].max())\n    b = int(a - test_temp[\"No. of days\"].min())\n    \n    test_cc[0:b+1] = sc_cc.inverse_transform(train_temp_cc)[(a-b-1):(a)]\n    test_ft[0:b+1] = sc_ft.inverse_transform(train_temp_ft)[(a-b-1):(a)]\n    \n    test_cc = test_cc.flatten()\n    test_ft = test_ft.flatten()\n    sub_temp = pd.DataFrame({'ForecastId': test_temp[\"ForecastId\"].loc[test[\"Country\/State\"] == value],\n                             'ConfirmedCases': test_cc, 'Fatalities': test_ft})\n    sub = pd.concat([sub, sub_temp], axis = 0)","e040f145":"sub.ForecastId = sub.ForecastId.astype('int')\nfor i in range(len(sub)):\n    sub[\"ConfirmedCases\"][i] = int(round(sub[\"ConfirmedCases\"][i]))\n    sub[\"Fatalities\"][i] = int(round(sub[\"Fatalities\"][i]))\n\nsub.to_csv(\"submission.csv\", index = False)","2eb56223":"Most of the plots for ConfirmedCases and Fatalities look like a degree 2 or sometimes a degree 4 polynomial.<br>\nAs a starting model I am going to fit a degree 4 polynomial for them.","d787f260":"We do not need seperate columns for something that represents a place. So, we merge these columns. <br>\nA country can have several provinces\/states, so we add the country name in brackets along with the province\/state name","7c1dc1f5":"Let's convert all the values to int and export for submission.","bcc4902d":"We have nan values in \"Province_State\" column and we need to make the \"Date\" column more usable. <br>\nI have split the Date column into two columns \"Month\" and \"Day\"","487994f9":"We drop the \"Date\" column and print all the places once. <br>\nPS: I do not like asterisks","8829a55b":"We are done with most of the feature engineering part.<br>\nNow, we proceed to draw plots of target features vs No. of days for few of these places using the random module.","be539d00":"Now, we have a new column named \"Country\/State\" which contains the essence of the previous two seperate columns. <br>\nNext we convert the \"Day\" column to \"No. of days\" column using simple *for loop*."}}