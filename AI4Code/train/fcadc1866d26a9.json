{"cell_type":{"c0f55063":"code","51052160":"code","7778a116":"code","93f4ef0d":"code","b049e0f3":"code","c75b91bb":"code","0f15b199":"code","e5edaca6":"code","159718a6":"code","bdc0e3fc":"code","492626a0":"code","15bfdeb3":"code","31120fd9":"code","ee568047":"code","82f7f050":"code","221211c2":"code","5275cbe0":"code","d16126e6":"code","3090cf39":"code","5b5098ab":"markdown","7fcdd9e3":"markdown","fb918e0e":"markdown","4910a2ff":"markdown","70aa95cd":"markdown","f31fc25b":"markdown","0003b1a5":"markdown","463d492f":"markdown","e75abd9f":"markdown","7e555924":"markdown","87c67710":"markdown","69c9eac4":"markdown"},"source":{"c0f55063":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\n\nfrom sklearn.model_selection import train_test_split\n\n\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras.layers import Input, Dense, Embedding, CuDNNLSTM\nfrom keras.layers import Bidirectional, GlobalMaxPool1D, Dropout\nfrom keras.models import Model\n\n%load_ext autoreload\n%autoreload 2","51052160":"# Load in training and testing data\ntrain_df = pd.read_csv('..\/input\/train.csv')\ntrain_df.head()","7778a116":"# Sentiment analysis requires the nltk package\nimport nltk\nnltk.download('vader_lexicon')\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\n# Initialize the sentiment analyzer and define the sentiment extraction function\nsid = SentimentIntensityAnalyzer()\ndef extract_sentiment(text):\n    scores = sid.polarity_scores(text)\n    return scores['compound']\n\ntrain_df['sent'] = train_df['question_text'].apply(lambda x: extract_sentiment(x))","93f4ef0d":"print('The average sentiment score for sincere questions is {:0.4f}'.\\\n          format(np.mean(train_df[train_df['target']==0]['sent'])))\nprint('The average sentiment score for insincere questions is {:0.4f}'. \\\n          format(np.mean(train_df[train_df['target']==1]['sent'])))","b049e0f3":"sent_sinc = train_df[train_df['target']==0]['sent'].values\nsent_insinc = train_df[train_df['target']==1]['sent'].values\n\nsns.kdeplot(sent_sinc, shade=1, color=\"skyblue\", label=\"Sincere\")\nsns.kdeplot(sent_insinc, shade=1, color=\"red\", label=\"Insincere\")\n\n# Plot formatting\nplt.legend(prop={'size': 12}, title = 'Sincerity')\nplt.title('Sentiment Density Plot')\nplt.xlabel('Sentiment')\nplt.ylabel('Density')","c75b91bb":"train_df['word_count'] = train_df['question_text'].apply(lambda x: len(x.split()))","0f15b199":"print('The average word length of sincere questions in the training set is {0:.1f}.'\\\n          .format(np.mean(train_df[train_df['target']==0]['word_count'])))\nprint('The average word length of insincere questions in the training set is {0:.1f}.' \\\n          .format(np.mean(train_df[train_df['target']==1]['word_count'])))\nprint('The maximum word length for a question in the training set is {0:.0f}.'\\\n          .format(np.max(train_df['word_count'])))","e5edaca6":"wc_sinc = train_df[train_df['target']==0]['word_count'].values\nwc_insinc = train_df[train_df['target']==1]['word_count'].values\n\nsns.kdeplot(wc_sinc, shade=1, color=\"skyblue\", label=\"Sincere\")\nsns.kdeplot(wc_insinc, shade=1, color=\"red\", label=\"Insincere\")\n\n# Plot formatting\nplt.legend(prop={'size': 12}, title = 'Sincerity')\nplt.title('Word Count Density Plot')\nplt.xlabel('Word Count')\nplt.ylabel('Density')","159718a6":"from wordcloud import WordCloud,STOPWORDS\n\ndef wordcloud_draw(data, title, color='black'):\n    words = ' '.join(data)\n    wordcloud = WordCloud(stopwords=STOPWORDS,\n                      background_color=color,\n                      width=2500,\n                      height=2000\n                     ).generate(words)\n    plt.figure(1,figsize=(13, 13))\n    plt.imshow(wordcloud)\n    plt.title(title, fontdict={'fontsize':18})\n    plt.axis('off')\n    plt.show()\n\ntitle = \"Sincere words\"\nwordcloud_draw(train_df[train_df['target']==0]['question_text'], title, 'white')\ntitle = \"Insincere Words\"\nwordcloud_draw(train_df[train_df['target']==1]['question_text'], title, 'black')","bdc0e3fc":"# Extract the training data and corresponding labels\ntext = train_df['question_text'].fillna('unk').values\nlabels = train_df['target'].values\n\n# Split into training and validation sets by making use of the scikit-learn\n# function train_test_split\nX_train, X_val, y_train, y_val = train_test_split(text, labels,\\\n                                                  test_size=0.2)","492626a0":"embed_size = 300 # Size of each word vector\nmax_words = 50000 # how many unique words to use (i.e num rows in embedding vector)\nmaxlen = 100 # max number of words in a question to use","15bfdeb3":"## Tokenize the sentences\ntokenizer = Tokenizer(num_words=max_words)\ntokenizer.fit_on_texts(list(X_train))\n\n# The tokenizer will assign an integer value to each word in the dictionary\n# and then convert each string of words into a list of integer values\nX_train = tokenizer.texts_to_sequences(X_train)\nX_val = tokenizer.texts_to_sequences(X_val)\n\nword_index = tokenizer.word_index\nprint('The word index consists of {} unique tokens.'.format(len(word_index)))\n\n## Pad the sentences \nX_train = pad_sequences(X_train, maxlen=maxlen)\nX_val = pad_sequences(X_val, maxlen=maxlen)","31120fd9":"# Create the embedding dictionary from the word embedding file\nembedding_dict = {}\nfilename = os.path.join('..\/input\/embeddings\/', 'glove.840B.300d\/glove.840B.300d.txt')\nwith open(filename) as f:\n    for line in f:\n        line = line.split()\n        token = line[0]\n        try:\n            coefs = np.asarray(line[1:], dtype='float32')\n            embedding_dict[token] = coefs\n        except:\n            pass\nprint('The embedding dictionary has {} items'.format(len(embedding_dict)))","ee568047":"# Create the embedding layer weight matrix\nembed_mat = np.zeros(shape=[max_words, embed_size])\nfor word, idx in word_index.items():\n    # Word index is ordered from most frequent to least frequent\n    # Ignore words that occur less frequently\n    if idx >= max_words: continue\n    vector = embedding_dict.get(word)\n    if vector is not None:\n        embed_mat[idx] = vector","82f7f050":"def create_lstm():\n    input = Input(shape=(maxlen,))\n    \n    # Embedding layer has fixed weights, so set 'trainable' to False\n    x = Embedding(max_words, embed_size, weights=[embed_mat], trainable=False)(input)\n    x = Bidirectional(CuDNNLSTM(64, return_sequences=True))(x)\n    x = GlobalMaxPool1D()(x)\n    x = Dense(16, activation=\"relu\")(x)\n    x = Dropout(0.2)(x)\n    x = Dense(1, activation=\"sigmoid\")(x)\n    model = Model(inputs=input, outputs=x)\n    model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n    print(model.summary())\n    \n    return model","221211c2":"# Create and train network\nlstm = create_lstm()\nlstm.fit(X_train, y_train, validation_data=(X_val, y_val), epochs=3, batch_size=512)","5275cbe0":"test_df = pd.read_csv('..\/input\/test.csv')\nX_test = test_df['question_text'].values\n\n# Perform the same preprocessing as was done on the training set\nX_test = tokenizer.texts_to_sequences(X_test)\nX_test = pad_sequences(X_test, maxlen=maxlen)\n\n# Make predictions, ensure that predictions are in integer form\npreds = np.rint(lstm.predict([X_test], batch_size=1024, verbose=1)).astype('int')\ntest_df['prediction'] = preds","d16126e6":"n=5\nsin_sample = test_df.loc[test_df['prediction'] == 0]['question_text'].head(n)\nprint('Sincere Samples:')\nfor idx, row in enumerate(sin_sample):\n    print('{}'.format(idx+1), row)\n\nprint('\\n')\nprint('Insincere Samples:')\ninsin_sample = test_df.loc[test_df['prediction'] == 1]['question_text'].head(n)\nfor idx, row in enumerate(insin_sample):\n    print('{}'.format(idx+1), row)","3090cf39":"test_df = test_df.drop('question_text', axis=1)\ntest_df.to_csv('submission.csv', index=False)","5b5098ab":"From the plot below, we can see that the word count distribution for sincere questions has a much sharper peak. It appears that insincere questions tend to be a bit longer than sincere questions. ","7fcdd9e3":"## 1.3 Word Cloud\nBecause word clouds look cool.\n\nThe word clouds do present some interesting information. Specifically, the insincere questions have a much higher proportion of words relating to identities and politics, such as 'Muslim', 'Trump', 'Men', 'Women', 'Liberal', 'American', etc. Conversely, the sincere questions have more constructive words that indicate the user is trying to solve a problem: 'Will', 'Good', 'Use', 'Think', etc.","fb918e0e":"## 2.1 Create Word Embedding Matrix\nThe code in this section will identify the most commonly occurring words in the dataset. Then, it will extract the vectors for each one of these words from the GloVe pretrained word embedding and place them in an embedding layer matrix. This embedding layer will serve as the first layer of the neural network. \n\nRead more about GloVe word embeddings [here](https:\/\/nlp.stanford.edu\/projects\/glove\/).\n\nNote that other word embeddings are also available for this competition, however glove was chosen for this notebook. ","4910a2ff":"# 1. EDA\nThe following code will perform basic EDA to gain an understanding of the dataset and perhaps inspire the design of the neural network.\n\nNote: Section 1 is not required for the rest of the notebook and may be skipped if desired. ","70aa95cd":"## 1.2 Word Count\nThis code will analyze word count characteristics of the dataset and determine whether there is a distinction in word count between the sincere and insincere questions. ","f31fc25b":"From the density plot below, we can see that a large number of questions are classified as exactly neutral, with a sentiment score of 0.0. It would appear that there is no strong significant difference in sentiment between sincere and insincere questions","0003b1a5":"## 1.1 Sentiment Analysis\nThis subsection analyzes each question using the NLTK sentiment analyzer. The goal is to determine whether the sincere and insincere questions have a significant difference in sentiment. \n\nNote: The sentiment analyis takes about 3 minutes to run on my machine. Tips are welcome on how to increase the speed of this operation!","463d492f":"# 3. Neural Network Training\nThis network configuration uses the pretrained GloVe embedding layer as the first layer of the network. This is followed by a bidirectional LSTM and then pooling layer. Finally, there are 2 dense layers leading to the final prediction. Feel free to modify network parameters and architecture. This is merely a starting point that provides adequate results. ","e75abd9f":"# 2. Data Preparation\nThis section of the notebook is devoted to preprocessing the raw data into a form that the neural network can understand.","7e555924":"# LSTM Training\nThis notebook can be used to train an LSTM for text classification and generate predictions for the kaggle competition found [here](https:\/\/www.kaggle.com\/c\/quora-insincere-questions-classification). \n\nThe notebook utilizes Keras and GloVe for preprocessing using word embeddings. Then, Keras with Tensorflow backend is used for training a deep LSTM. Feel free to fork!","87c67710":"Let's examine a few examples of sincere predictions and insincere predictions. It appears that our network is making meaningful predictions.","69c9eac4":"# 4. Predictions\nThe remainder of this notebok will generate predictions from the test set and write them to a submission csv file for the kaggle competition."}}