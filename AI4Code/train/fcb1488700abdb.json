{"cell_type":{"e3d737f0":"code","2f7580f8":"code","e1819cc2":"code","ce56d385":"code","671af7a6":"code","0a9e2824":"code","ba31a92b":"code","4eb3822f":"code","3fb0154a":"code","d97a2bf6":"code","eb929b63":"code","b86eac94":"code","fe50bea5":"code","765c17c7":"code","24ec296b":"code","1a1c5f95":"code","c1116bb2":"code","74d9a1d1":"code","354d38fa":"code","d10db472":"markdown","210bd0dd":"markdown","6ebd9671":"markdown","215b1e03":"markdown","37c0ea5d":"markdown","2241f06e":"markdown","88f8323c":"markdown","5d7a58bd":"markdown","59a15e4f":"markdown","6902e6a9":"markdown","47e73f57":"markdown","a565f8a7":"markdown","74527adb":"markdown","83a2f9f2":"markdown","fbf74763":"markdown","e3d6bc75":"markdown","86a157e6":"markdown","993c87d6":"markdown"},"source":{"e3d737f0":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","2f7580f8":"train_X = pd.read_csv('..\/input\/X_train.csv').iloc[:,3:].values.reshape(-1,128,10)\ntest_X  = pd.read_csv('..\/input\/X_test.csv' ).iloc[:,3:].values.reshape(-1,128,10)\nprint('train_X shape:', train_X.shape, ', test_X shape:', test_X.shape)","e1819cc2":"df_train_y = pd.read_csv('..\/input\/y_train.csv')\n\n# build a dict to convert surface names into numbers\nsurface_names = df_train_y['surface'].unique()\nnum_surfaces = len(surface_names)\nsurface_to_numeric = dict(zip(surface_names, range(num_surfaces)))\nprint('Convert to numbers: ', surface_to_numeric)\n\n# y and group data as numeric values:\ntrain_y = df_train_y['surface'].replace(surface_to_numeric).values\ntrain_group = df_train_y['group_id'].values","ce56d385":"fig, axes = plt.subplots(1,4)\nfig.set_size_inches(20,3)\n\nfor i in range(4):\n    axes[i].plot(train_X[train_group == 17][:,:,i].reshape(-1))\n    axes[i].grid(True)","671af7a6":"def sq_dist(a,b):\n    ''' the squared euclidean distance between two samples '''\n    \n    return np.sum((a-b)**2, axis=1)\n\n\ndef find_run_edges(data, edge):\n    ''' examine links between samples. left\/right run edges are those samples which do not have a link on that side. '''\n\n    if edge == 'left':\n        border1 = 0\n        border2 = -1\n    elif edge == 'right':\n        border1 = -1\n        border2 = 0\n    else:\n        return False\n    \n    edge_list = []\n    linked_list = []\n    \n    for i in range(len(data)):\n        dist_list = sq_dist(data[i, border1, :4], data[:, border2, :4]) # distances to rest of samples\n        min_dist = np.min(dist_list)\n        closest_i   = np.argmin(dist_list) # this is i's closest neighbor\n        if closest_i == i: # this might happen and it's definitely wrong\n            print('Sample', i, 'linked with itself. Next closest sample used instead.')\n            closest_i = np.argsort(dist_list)[1]\n        dist_list = sq_dist(data[closest_i, border2, :4], data[:, border1, :4]) # now find closest_i's closest neighbor\n        rev_dist = np.min(dist_list)\n        closest_rev = np.argmin(dist_list) # here it is\n        if closest_rev == closest_i: # again a check\n            print('Sample', i, '(back-)linked with itself. Next closest sample used instead.')\n            closest_rev = np.argsort(dist_list)[1]\n        if (i != closest_rev): # we found an edge\n            edge_list.append(i)\n        else:\n            linked_list.append([i, closest_i, min_dist])\n            \n    return edge_list, linked_list\n\n\ndef find_runs(data, left_edges, right_edges):\n    ''' go through the list of samples & link the closest neighbors into a single run '''\n    \n    data_runs = []\n\n    for start_point in left_edges:\n        i = start_point\n        run_list = [i]\n        while i not in right_edges:\n            tmp = np.argmin(sq_dist(data[i, -1, :4], data[:, 0, :4]))\n            if tmp == i: # self-linked sample\n                tmp = np.argsort(sq_dist(data[i, -1, :4], data[:, 0, :4]))[1]\n            i = tmp\n            run_list.append(i)\n        data_runs.append(np.array(run_list))\n    \n    return data_runs","0a9e2824":"train_left_edges, train_left_linked  = find_run_edges(train_X, edge='left')\ntrain_right_edges, train_right_linked = find_run_edges(train_X, edge='right')\nprint('Found', len(train_left_edges), 'left edges and', len(train_right_edges), 'right edges.')","ba31a92b":"train_runs = find_runs(train_X, train_left_edges, train_right_edges)","4eb3822f":"flat_list = [series_id for run in train_runs for series_id in run]\nprint(len(flat_list), len(np.unique(flat_list)))","3fb0154a":"print([ len(np.unique(train_y[run])) for run in train_runs ])","d97a2bf6":"print([ len(np.unique(train_group[run])) for run in train_runs ])","eb929b63":"fig, axes = plt.subplots(10,1, sharex=True)\nfig.set_size_inches(20,15)\nfig.subplots_adjust(hspace=0)\n\nfor i in range(10):\n    axes[i].plot(train_X[train_runs[0]][:,:,i].reshape(-1))\n    axes[i].grid(True)","b86eac94":"df_train_y['run_id'] = 0\ndf_train_y['run_pos'] = 0\n\nfor run_id in range(len(train_runs)):\n    for run_pos in range(len(train_runs[run_id])):\n        series_id = train_runs[run_id][run_pos]\n        df_train_y.at[ series_id, 'run_id'  ] = run_id\n        df_train_y.at[ series_id, 'run_pos' ] = run_pos\n\ndf_train_y.to_csv('y_train_with_runs.csv', index=False)\ndf_train_y.tail()","fe50bea5":"test_left_edges, test_left_linked  = find_run_edges(test_X, edge='left')\ntest_right_edges, test_right_linked = find_run_edges(test_X, edge='right')\nprint('Found', len(test_left_edges), 'left edges and', len(test_right_edges), 'right edges.')","765c17c7":"test_runs = find_runs(test_X, test_left_edges, test_right_edges)","24ec296b":"flat_list = [series_id for run in test_runs for series_id in run]\nprint(len(flat_list), len(np.unique(flat_list)))","1a1c5f95":"lost_samples = np.array([ i for i in range(len(test_X)) if i not in np.concatenate(test_runs) ])\nprint(lost_samples)\nprint(len(lost_samples))","c1116bb2":"find_run_edges(test_X[lost_samples], edge='left')[1][0]","74d9a1d1":"lost_run = np.array(lost_samples[find_runs(test_X[lost_samples], [0], [5])[0]])\ntest_runs.append(lost_run)","354d38fa":"fig, axes = plt.subplots(10,1, sharex=True)\nfig.set_size_inches(20,15)\nfig.subplots_adjust(hspace=0)\n\nfor i in range(10):\n    axes[i].plot(test_X[test_runs[1]][:,:,i].reshape(-1))\n    axes[i].grid(True)","d10db472":"Well, that certainly looks like a jigsaw puzzle to me. And that leads to an idea: the euclidean distance in the 4-dimensional \"orientation space\" between, for example, the right edge of one sample and the left edge of its true neighbor should be a minimum, *ideally even among all samples*, not only the samples in its group. Same for left\/right. This should enable us to stitch the runs together again. All we have to do is link samples together which are *each other's* closest neighbors. Let's code:","210bd0dd":" 3816 - 3790 = 26 samples are not in any run and aren't edges. They must form a closed ring -> another run. find it:","6ebd9671":"Well, that certainly looks promising. Found 76 runs, similar number than the number of groups. Build the runs:","215b1e03":"Now for the real test. How many different surfaces are in each run? *Only 4 runs have more than one surface* (and if you look at them, you can easily split them by hand). This actually works!","37c0ea5d":"Oh yeah!","2241f06e":"Let's plot all 10 channels for one run.  Beautiful.","88f8323c":"Let's plot the 4 orientation channels of a random group in series:","5d7a58bd":"...But wait. Might this also work with the test data?","59a15e4f":"Again no samples are used twice, but we have lost some.","6902e6a9":"I'll leave you with a caution and an exercise:\nFirst, there are certainly some errors in the test runs. Two runs with different surfaces might have been stitched into one (as happened 4 times with the train data) by chance.\nSecond, might it even be possible to link *across train and test*? Well, see for yourself...","47e73f57":"Let's go:","a565f8a7":"First, let's get our raw data:","74527adb":"Interesting. Some runs contain  2, 3 and even 4 groups. So several groups were cut from one run:","83a2f9f2":"There have been many discussions about links between samples in the train and test data, because the robot's absolute orientation does not change much in one run. This means that a) it is dangerously easy to create a model which looks like it predicts surfaces when in fact it predicts orientation and b) we might gain some additional knowledge about the data.\n\nLet's settle this once and for all.","fbf74763":"Have we found all samples? Have we used any sample twice? The answer is yes, and no. Perfect.","e3d6bc75":"Let's add our new knowledge to train_y. Now you can use this info to train your models to even greater perfection. Enjoy!","86a157e6":"Perfect. Now we also have test runs. A nice plot to prove it:","993c87d6":"...and y \/ group data:"}}