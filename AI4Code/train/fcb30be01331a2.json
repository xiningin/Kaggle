{"cell_type":{"1c577619":"code","54390137":"code","7217d72d":"code","a5b06676":"code","11d42ee7":"code","cd5db628":"code","3b9c56a7":"code","7be89d78":"code","c66dbee4":"code","61232f91":"code","5406c92b":"code","180d636e":"code","68c5e189":"markdown"},"source":{"1c577619":"### Let us visualize the flight travels using a flight dataset","54390137":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7217d72d":"!pip install gcmap","a5b06676":"import pandas as pd\nfrom gcmap import GCMapper, Gradient\nfrom IPython.display import Image","11d42ee7":"filecols = ('lon_departure', 'lat_departure', 'lon_arrival', 'lat_arrival')\nflights = pd.read_csv('..\/input\/python-data-visualization-essentials-guide\/flights.csv', names=filecols,\n                     na_values=['\\\\N'], skiprows=1)\nflights.head()\n\nflights = flights.sort_values(['lon_departure',  'lat_departure', 'lon_arrival', 'lat_arrival'], \n                              ascending=[False, False, False, False])\n\nprint(flights.loc[10000])\nprint(flights.loc[9000])","cd5db628":"grad = Gradient(((0, 100, 200, 0), (0.5, 104, 0, 253), (1, 255, 104, 230)))\ngcm = GCMapper(cols=grad, height=2000, width=4000)\nfli1000 = flights[9000:10000]\ngcm.set_data(flights['lon_departure'], \n             flights['lat_departure'], \n             flights['lon_arrival'],\n             flights['lat_arrival'])\n# run & save\nimg = gcm.draw()\nimg.save('flights_routes_gcmap.png')\nImage(\"flights_routes_gcmap.png\")\n","3b9c56a7":"\ngcm.set_data(fli1000['lon_departure'], \n             fli1000['lat_departure'], \n             fli1000['lon_arrival'],\n             fli1000['lat_arrival'])\n# run & save\nimg = gcm.draw()\nimg.save('flights_routes_top1000_gcmap.png')\nImage(\"flights_routes_top1000_gcmap.png\")","7be89d78":"import matplotlib.pyplot as plt\nfrom mpl_toolkits.basemap import Basemap\n\nlongitudes = flights[\"lon_departure\"].tolist()\nlatitudes = flights[\"lat_departure\"].tolist()\nfig, ax = plt.subplots(figsize=(20,30))\nplt.title(\"Key Airports\")\nm = Basemap(projection='merc', \n            llcrnrlat=-85, \n            urcrnrlat=85, \n            llcrnrlon=-180, \n            urcrnrlon=180)\nx, y = m(longitudes, latitudes)\nm.scatter(x,y,s=1, marker='o', color='yellow')\nm.bluemarble()\nm.drawcoastlines()\nplt.show()","c66dbee4":"import plotly.express as px\nfig = px.scatter(flights, x='lon_departure', y='lat_departure', color='lon_arrival')\nfig","61232f91":"import plotly.express as px\nfig = px.scatter_3d(flights, x='lon_departure', y='lat_departure', z='lon_arrival', color='lat_arrival', title='3D-Scatter Plot of Arrival & Departure')\nfig","5406c92b":"fig = px.strip(flights, x='lon_departure', y='lon_arrival',title='Strip Plot')\nfig","180d636e":"%%capture\n!pip install xlrd\n!pip install autoviz\nimport pandas as pd \nfrom autoviz.AutoViz_Class import AutoViz_Class\nAV = AutoViz_Class()\ndf = AV.AutoViz(flights)","68c5e189":"# Let us try AutoViz for the data"}}