{"cell_type":{"ddc92338":"code","85a4633d":"code","100f09e7":"code","90f9fbb3":"code","f68df5d7":"code","11afd3a5":"code","397e3983":"code","bb7a7666":"code","1726cd64":"code","a31549ec":"code","c5e9d7da":"code","a9ddcd86":"code","947c6b4e":"code","a9787c77":"code","f21cb0c8":"code","a6dc26f6":"code","b5f5545a":"code","0175f52f":"code","caee1772":"code","fa62e04e":"code","4a69f36d":"code","485c1cca":"code","04322e8d":"code","61cf4377":"code","b866089c":"markdown","cbf26640":"markdown","37128459":"markdown","e031efb2":"markdown","96610b7e":"markdown","d8c6a6c1":"markdown","d495bd1f":"markdown","8eb968f6":"markdown","e0de92c3":"markdown","36e842c4":"markdown"},"source":{"ddc92338":"# Data Processing\nimport numpy as np\nimport pandas as pd\nimport datetime as dt\nimport functools\n\n# Data Visualizing\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport matplotlib.gridspec as gridspec\nfrom matplotlib.ticker import MaxNLocator\nfrom IPython.display import display, HTML\nimport plotly.express as px\nimport plotly.graph_objs as go\nfrom IPython.display import display, HTML\nfrom IPython.display import Image\n\n# Data Clustering\nfrom mlxtend.frequent_patterns import apriori # Data pattern exploration\nfrom mlxtend.frequent_patterns import association_rules # Association rules conversion\n\n# Data Modeling\nfrom sklearn.ensemble import RandomForestRegressor\n\n# Math\nfrom scipy import stats  # Computing the t and p values using scipy \nfrom statsmodels.stats import weightstats \n\n# Warning Removal\nimport warnings\ndef ignore_warn(*args, **kwargs):\n    pass\nwarnings.warn = ignore_warn #ignore annoying warning (from sklearn and seaborn)","85a4633d":"df1 = pd.read_csv('..\/input\/momo-data-process\/data process.csv')\ndf2 = pd.read_csv('..\/input\/momo-analytics1\/Momo_Analytics.csv')","100f09e7":"df1.rename(columns = {'user_id':'User_id'}, inplace=True)\ndf1.head()","90f9fbb3":"df2.head()","f68df5d7":"dfs = [df1, df2]\nCustomerTable = functools.reduce(lambda left,right: pd.merge(left,right,on='User_id', how='outer'), dfs)\nCustomerTable.dropna(inplace=True)","11afd3a5":"CustomerTable.head()","397e3983":"CustomerTable['firstservicedate'] = pd.to_datetime(CustomerTable['firstservicedate'])\nCustomerTable['secondservicedate'] = pd.to_datetime(CustomerTable['secondservicedate'])\nCustomerTable['lastservicedate'] = pd.to_datetime(CustomerTable['lastservicedate'])\nCustomerTable['Date'] = pd.to_datetime(CustomerTable['Date'])","bb7a7666":"CustomerTable.head()","1726cd64":"CustomerTable['Momo_age'] = 1 + (CustomerTable['lastservicedate']-CustomerTable['firstservicedate']).dt.days","a31549ec":"# Split customers into 4 categories of 100_Momo_age, 200_Momo_age, 300_Momo_age, 300_plus_Momo_age\n\nbins = [-1, 100, 200, 300, np.inf]\nnames = ['100_Momo_age', '200_Momo_age', '300_Momo_age', '300_plus_Momo_age']\nCustomerTable['Momo_age_bin'] = pd.cut(CustomerTable['Momo_age'], bins, labels=names)","c5e9d7da":"CustomerTable.head()","a9ddcd86":"CustomerTable.groupby(['Momo_age_bin','Serviceid'])[['User_id']].count().dropna()","947c6b4e":"# Grouping customers bases on categories of Momo_age_bin and servicedid, \n# in order to know which services were used most by each segment\nCustomerAgg = CustomerTable.groupby(['Momo_age_bin','Serviceid'])[['User_id']].count().dropna()\n\n# Source: https:\/\/stackoverflow.com\/questions\/27842613\/pandas-groupby-sort-within-groups\n# We group by the first level of the index:\ng = CustomerAgg['User_id'].groupby(level=0, group_keys=False)\n\n# Then we want to sort 'order' each group and take the first five elements:\n# Alternative:  res = g.apply(lambda x: x.order(ascending=False).head(5))\ng.nlargest(5)","a9787c77":"# CrossSale: https:\/\/www.youtube.com\/watch?v=VMavY0pBo2o\nCustomerTable.head()","f21cb0c8":"Cross_sale = CustomerTable[['User_id', 'Date', 'Serviceid']]\nCross_sale['User_id & Date'] = Cross_sale['User_id'].astype('str') + ' ' + Cross_sale['Date'].astype('str')\nCross_sale.drop(['User_id', 'Date'], axis=1, inplace=True)","a6dc26f6":"# To eliminate duplicate rows. For example, a customer use 1 particular serviceid twice a day, \n# all we need is to know the number of unique serviceids per day for each customer.\n# Another example, a customer usually buy 2 toothbrushes along with 1 toothpaste. Thus, we can cross-sell 2-item combo.\nCross_sale.drop_duplicates(inplace = True)","b5f5545a":"Cross_sale.set_index('User_id & Date', inplace=True)","0175f52f":"Cross_sale.head(10)","caee1772":"Cross_sale['Serviceid'] = Cross_sale['Serviceid'].astype('str')\n\nbasket = pd.get_dummies(Cross_sale)\nbasket.head()","fa62e04e":"basket_sets = pd.pivot_table(basket, index='User_id & Date', aggfunc='sum')\nbasket_sets","4a69f36d":"frequent_itemsets = apriori(basket_sets, min_support=0.03, use_colnames=True)\nfrequent_itemsets['length'] = frequent_itemsets['itemsets'].apply(lambda x: len(x))\nfrequent_itemsets","485c1cca":"# Advanced and strategical data frequent set selection\nfrequent_itemsets[ (frequent_itemsets['length'] > 1) &\n                   (frequent_itemsets['support'] >= 0.02)]","04322e8d":"# Generating the association_rules: rules\n# Selecting the important parameters for analysis\nrules = association_rules(frequent_itemsets, metric=\"lift\", min_threshold=1)\nrules[['antecedents', 'consequents', 'support', 'confidence', 'lift']].sort_values('support', ascending=False).head()","61cf4377":"# Visualizing the rules distribution color mapped by Lift\nplt.figure(figsize=(14, 8))\nplt.scatter(rules['support'], rules['confidence'], c=rules['lift'], alpha=0.9, cmap='YlOrRd');\nplt.title('Rules distribution color mapped by lift');\nplt.xlabel('Support')\nplt.ylabel('Confidence')\nplt.colorbar();","b866089c":"# ANALYSIS 1","cbf26640":"# MOMO ANALYTICS\n## Author: Vu Duong\n### Date: July, 07, 2020","37128459":"## 2. We would like to know which serviceid we can cross-sales to users?","e031efb2":"## 1.We would like to know whether users in different MoMo ages  have different serviceid cluster?","96610b7e":"# INTRODUCTION\nThe aim of the campaign is to know if the different MoMo ages have different serviceid cluster, and how we do cross-sale to customers\n\n## Data Description\n- Servicedid: The identity of the transaction\n- Date: the date that transaction is performed\n- User_id: The identity of the individual customer\n- Momo_age: the difference between LastServiceDate and FristServiceDate","d8c6a6c1":"# DATA EXPLORATION","d495bd1f":"#### Observation\n- Customer in 100_Momo_age group tend to use Serviceid of 667, 333, 1014, 487, 981\n- Customer in 200_Momo_age group tend to use Serviceid of 981, 20, 1014, 271, 666 \n- Customer in 300_Momo_age group tend to use Serviceid of 18, 333, 667, 981, 268\n- Customer in 300_plus_Momo_age group tend to use Serviceid of 981, 19, 271, 1014, 2","8eb968f6":"# LIBRARY","e0de92c3":"### Observations:\n- If a customer converts Serviceid_333, we suggest them the Serviceid_667 with Support of 20%, Confidence of 100%, Lift being greater than 1.\n- If a customer converts Serviceid_667, we suggest them the Serviceid_333 with Support of 20%, Confidence of 91.8%, Lift being greater than 1.\n- If a customer converts Serviceid_981, we suggest them the Serviceid_1014 with Support of 16.9%, Confidence of 61%, Lift being greater than 1.\n- Do the same with the following rows.\n- Further explaination: https:\/\/towardsdatascience.com\/association-rules-2-aa9a77241654","36e842c4":"## Result from the study\n1.We would like to know whether users in different MoMo ages have different serviceid cluster?\n- Customer in 100_Momo_age group tend to use Serviceid of 667, 333, 1014, 487, 981\n- Customer in 200_Momo_age group tend to use Serviceid of 981, 20, 1014, 271, 666 \n- Customer in 300_Momo_age group tend to use Serviceid of 18, 333, 667, 981, 268\n- Customer in 300_plus_Momo_age group tend to use Serviceid of 981, 19, 271, 1014, 2\n\n2.We would like to know which serviceid we can cross-sales to users?\n- If a customer converts Serviceid_333, we suggest them the Serviceid_667 with Support of 20%, Confidence of 100%, Lift being greater than 1.\n- If a customer converts Serviceid_667, we suggest them the Serviceid_333 with Support of 20%, Confidence of 91.8%, Lift being greater than 1.\n- If a customer converts Serviceid_981, we suggest them the Serviceid_1014 with Support of 16.9%, Confidence of 61%, Lift being greater than 1.\n- Do the same procedure for the rest of the table"}}