{"cell_type":{"861c4e86":"code","c5580868":"code","d6d3558e":"code","b64ca0f8":"code","5534551c":"code","d34a9fc1":"code","f4570f24":"code","951f93f9":"code","22fcd843":"code","b954d1fe":"code","1381ca17":"code","c0fcb25b":"code","02b0c5c1":"code","5826ee43":"code","ba36dbb4":"code","6f887a5d":"code","e886af82":"code","e16d8861":"code","36ef9787":"code","c9366a8d":"code","33f3093e":"code","f89ad177":"code","86d1154e":"code","1b045f46":"code","4e0b98b9":"code","d5c58a2f":"code","06fd9f64":"code","61373746":"code","e49f2499":"code","b4eff6fc":"code","3b48c835":"code","ec0bba8a":"code","5700be58":"markdown","4686adac":"markdown","551aade7":"markdown","b94d2c9a":"markdown","3d0cffd7":"markdown","6cdaa77a":"markdown","2f02ec5b":"markdown"},"source":{"861c4e86":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\nfrom tqdm import tqdm_notebook\nimport matplotlib.dates as dates\nfrom datetime import datetime\nimport matplotlib.pyplot as plt\n\n%matplotlib inline\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","c5580868":"row_data = pd.read_csv('\/kaggle\/input\/ecommerce-behavior-data-from-multi-category-store\/2019-Oct.csv') #import the dataset\n\n\nif (row_data.isnull().values.any() == True):  # checking missing values\n    print(row_data.isnull().sum())\nelse: \n    print(\"There is not any null number\")","d6d3558e":"#Total visitors number\n\ndf = row_data\nvisitors  = df['user_id'].nunique()\nprint(\"Number of visitors : {}\".format(visitors))","b64ca0f8":"# x = pd.Series(visitor_by_date.index.values).apply(lambda s: datetime.strptime(s, '%Y-%m-%d').date())\n# y = visitor_by_date[:]\n\n# print(type(visitor_by_date))\n# plt.rcParams['figure.figsize'] = (25,12)\n# plt.plot(x,y)\n# plt.show()","5534551c":"# purchase  = df.loc[df['event_type'] == 'purchase'] #getting only purchase event type \n# purchase = purchase.dropna(axis='rows') # dropping rows that have  at least one missing value\n\n# top_brands = purchase.groupby(['brand'])['brand'].agg(['count']).sort_values(by=['count'],ascending=False)\n# top_brands.head(25) # [samsung, apple, xiaomi, huawei, ...]\n    \n","d34a9fc1":"index = df[df['event_type'] == 'remove_from_cart'].index\ndf.drop(index=index,inplace=True)\ndf['user_session'] = df['user_session'].astype('category').cat.codes","f4570f24":"def take_column_products(multiarr,a):\n    array1 = []\n    for i in range(len(multiarr)):\n        array1.append(multiarr[i][a])\n    return array1\n","951f93f9":"def create_product_cols(sessions,df):\n    products_for_each_user = []\n    \n    \n    for i in sessions:\n        products_for_each_user.append(df.loc[df['user_session'] == i, 'product_id'].values)\n     \n    \n    print(products_for_each_user)\n        \n\n        \n    column1 = take_column_products(products_for_each_user,0) #product_id1\n    column2 = take_column_products(products_for_each_user,1) #product_id2\n    column3  = take_column_products(products_for_each_user,2) #product_id3\n    column4  = take_column_products(products_for_each_user,3) #product_id3\n    column5  = take_column_products(products_for_each_user,4) #product_id3\n    column6  = take_column_products(products_for_each_user,5) #product_id3       \n    column7  = take_column_products(products_for_each_user,6) #product_id3\n    column8  = take_column_products(products_for_each_user,7) #product_id3\n    column9  = take_column_products(products_for_each_user,8) #product_id3\n    column10  = take_column_products(products_for_each_user,9) #product_id3\n    column11  = take_column_products(products_for_each_user,10) #product_id3\n    column12  = take_column_products(products_for_each_user,11) #product_id3\n   # column13  = take_column_products(products_for_each_user,12) #product_id3\n\n    \n    \n    \n    \n    data = {'product_id1': column1, \n        'product_id2': column2, \n        'product_id3': column3,\n        'product_id4': column4,\n        'product_id5': column5,\n        'product_id6': column6,\n        'product_id7': column7,\n        'product_id8': column8,\n        'product_id9': column9,\n        'product_id10': column10,\n        'product_id11': column11,\n        'product_id12': column12,\n        } \n    \n    new_df = pd.DataFrame(data)\n    \n    \n    \n    \n#     df.insert(3,'product_id1',column1 )\n#     df.insert(4,'product_id2', column2)\n#     df.insert(5, 'product_id3' , column3)\n#     df.insert(6, 'product_id4' , column4)\n#     df.insert(7, 'product_id5' , column5)\n#     df.insert(8, 'product_id6' , column6)\n#     df.insert(9, 'product_id7' , column7)\n#     df.insert(10, 'product_id8' , column8)\n#     df.insert(11, 'product_id9' , column9)\n#     df.insert(12, 'product_id10' , column10)\n#     df.insert(13, 'product_id11' , column11)\n#     df.insert(14, 'product_id12' , column12)\n   # df.insert(15, 'product_id13' , column13)\n   \n    \n        \n     \n    return new_df\n","22fcd843":"\nimport numpy as np\n\ntarget_values = []\n\ndef generate_target(df , frequent_products):\n        for index, row in df.iterrows():\n            for i in range(1,13):\n                 if row['product_id'+  str(i)] in frequent_products:\n                        target_values.append(row['product_id'+  str(i)])\n        return target_values\n\n\ndef convert_product_to_Nan(df):\n    for index, row in df.iterrows():\n        for i in range(1,13):\n            if row['product_id'+  str(i)] == row['target']:\n               df.loc[index,'product_id' + str(i)] = np.nan\n            \n    return df\n\n           \n           \n        ","b954d1fe":"df = df.drop_duplicates(['user_session','product_id'])\n\nusers_interactions_count_df = df.groupby(['user_id', 'product_id' , 'user_session']).size().groupby('user_session').size()  #Ask question about event_time or product_id\nprint(\"Number of users: %d\" % len(users_interactions_count_df))\n\nusers_with_enough_interactions_df = users_interactions_count_df[users_interactions_count_df == 12].reset_index()[['user_session']]\nusers_with_enough_interactions_df\nprint(users_with_enough_interactions_df)\nprint('amount of  users with  13 interactions: %d' % len(users_with_enough_interactions_df))\nprint(round(len(users_with_enough_interactions_df) * 100 \/ len(users_interactions_count_df), 2) , \"%\")","1381ca17":"interactions_from_selected_users_df = df.merge(users_with_enough_interactions_df, \n                                           how = 'right',\n                                           left_on = 'user_session',\n                                           right_on = 'user_session'\n                                          )\nprint(interactions_from_selected_users_df)\n\nprint('# of interactions: %d' % len(df))\nprint('# of interactions from users with at least 12 interactions: %d' % len(interactions_from_selected_users_df))\ninteractions_from_selected_users_df = interactions_from_selected_users_df.drop(['event_type','event_time','category_id','brand', 'price'],axis=1)\ninteractions_from_selected_users_df = interactions_from_selected_users_df.drop(['category_code'],axis=1)","c0fcb25b":"interactions_from_selected_users_df['user_session'] = interactions_from_selected_users_df['user_session'].astype('category').cat.codes\ninteractions_from_selected_users_df[-13: -1]","02b0c5c1":"\ninteractions_from_selected_users_df.drop(interactions_from_selected_users_df[interactions_from_selected_users_df['user_session'] == 0].index,inplace=True)\ninteractions_from_selected_users_df.drop(interactions_from_selected_users_df[interactions_from_selected_users_df['user_session'] ==-1].index,inplace=True)\n\nprint(interactions_from_selected_users_df[-13 : -1])\n\ninteractions_from_selected_users_df = interactions_from_selected_users_df.sort_values(by=['user_session'])\nprint(interactions_from_selected_users_df)\nuser_session_values = interactions_from_selected_users_df['user_session'].values\nuser_session_values[-13:-1]\n","5826ee43":"df_new =interactions_from_selected_users_df.groupby(['product_id','user_session'],sort=True)['product_id'].count()\ndf_new=interactions_from_selected_users_df[['product_id']].apply(pd.Series.value_counts)\ndf_new = df_new.loc[df_new['product_id'] >=10].reset_index()\ndf_new.columns = (\"product_id\", 'count_of_products')\ndf_new","ba36dbb4":"from collections import Counter\n\nfrequent_products =df_new.product_id.values\nprint(len(frequent_products))\nprint(frequent_products)\n[item for item, count in Counter(frequent_products).items() if count > 1]","6f887a5d":"frequent_products_sessions_df = interactions_from_selected_users_df.merge(df_new, \n                                           how = 'right',\n                                           left_on = 'product_id',\n                                           right_on = 'product_id'\n                                          )\n\n\n\nfrequent_sessions = frequent_products_sessions_df['user_session']\nfrequent_sessions = frequent_sessions.sort_values(ascending=True)\n\nfrequent_sessions\n","e886af82":"print(len(frequent_sessions))","e16d8861":"prod_for_basket_whole_df = create_product_cols(frequent_sessions,interactions_from_selected_users_df)","36ef9787":"prod_for_basket_whole_df[:50]","c9366a8d":"df_for_target_df = prod_for_basket_whole_df.drop_duplicates()\n","33f3093e":"target_values = generate_target(df_for_target_df,frequent_products)\nprint(len(target_values))\nprint(target_values)","f89ad177":"def justify(a, invalid_val=0, axis=1, side='left'):    \n    \"\"\"\n    Justifies a 2D array\n\n    Parameters\n    ----------\n    A : ndarray\n        Input array to be justified\n    axis : int\n        Axis along which justification is to be made\n    side : str\n        Direction of justification. It could be 'left', 'right', 'up', 'down'\n        It should be 'left' or 'right' for axis=1 and 'up' or 'down' for axis=0.\n\n    \"\"\"\n\n    if invalid_val is np.nan:\n        #change to notnull\n        mask = pd.notnull(a)\n    else:\n        mask = a!=invalid_val\n    justified_mask = np.sort(mask,axis=axis)\n    if (side=='up') | (side=='left'):\n        justified_mask = np.flip(justified_mask,axis=axis)\n    #change dtype to object\n    out = np.full(a.shape, invalid_val, dtype=object)  \n    if axis==1:\n        out[justified_mask] = a[mask]\n    else:\n        out.T[justified_mask.T] = a.T[mask.T]\n    return out ","86d1154e":"\nprod_for_basket_whole_df['target'] = target_values","1b045f46":"prod_for_basket_whole_df","4e0b98b9":"prod_for_basket_whole_df = convert_product_to_Nan(prod_for_basket_whole_df)\nprod_for_basket_whole_df","d5c58a2f":"\nnew_df = prod_for_basket_whole_df.iloc[:, :12]\n\n\ndf = pd.DataFrame(justify(new_df.values, invalid_val=np.nan, side='left', axis=1), \n                  columns=new_df.columns)\n\n\ndf[:50]","06fd9f64":"df.dropna(axis=1 , inplace=True) \n\ndf = df.astype('int')\ndf","61373746":"from sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split\n\n\n\nX = df.values\ny = prod_for_basket_whole_df.target.values","e49f2499":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25,random_state=5 )\nnumber_of_train = X_train.shape[0]\nnumber_of_test = X_test.shape[0]\nprint(number_of_train, number_of_test)","b4eff6fc":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import validation_curve \nfrom scipy.stats import randint as sp_randint\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.model_selection import RepeatedStratifiedKFold\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import roc_curve, auc\nimport catboost as cb\nfrom catboost import CatBoostClassifier, Pool, cv\nfrom sklearn.metrics import accuracy_score\n","3b48c835":"\n# scores = []\n# neighbors= []\n\n# for n in range(1 , 400, 50):\n#     knn = KNeighborsClassifier(n_neighbors=n)\n#     neighbors.append(n)\n#     knn.fit(X_train, y_train)\n#     y_pred = knn.predict(X_test)\n#     score = accuracy_score(y_test,y_pred)\n#     scores.append(score)\n#     print(\"Accuracy in neighbor {0} : \".format(n) ,score)\n\n    \n# from matplotlib.legend_handler import HandlerLine2D\n\n# line1, = plt.plot(neighbors, scores, 'r', label=\"Test AUC\")\n\n# plt.legend(handler_map={line1: HandlerLine2D(numpoints=2)})\n# plt.ylabel(\"Accuracy score\")\n# plt.xlabel('n_neighbor')\n# plt.show()","ec0bba8a":"# scores = []\n# params= []\n\n# model = DecisionTreeClassifier()\n# model.fit(X_train, y_train)\n# y_pred = model.predict(X_test)\n# score = accuracy_score(y_test,y_pred)\n# scores.append(score)\n# print(\"Accuracy in max_depth {0} :  \" , score*100)\n\n    \n# # from matplotlib.legend_handler import HandlerLine2D\n\n# # line1, = plt.plot(params, scores, 'r', label=\"Test accuracy\")\n\n# # plt.legend(handler_map={line1: HandlerLine2D(numpoints=2)})\n# # plt.ylabel(\"Accuracy score\")\n# # plt.xlabel('n_neighbor')\n# # plt.show()","5700be58":"# Brand's popularity\n### Listing brands in a descending orderd according to items they sold.","4686adac":"# User's journey\n### We can get all information of an user from this table during user's session\n\nFrom below table we can get this information about user:\n\n* Items that user has viewed | purchased | added to basket\n* List of actions user has done during  one session ordered by time\n* All other interests of user such as:  expensive items, brand, category that user interested mostly","551aade7":"# Importing libraries \n### Importing necessary libraries.","b94d2c9a":"# Event Types\n\nVisualization of event types (view, cart, purchase) as percentage ","3d0cffd7":"# Visualization of Visitors Daily Trend\n### How does traffic flunctuate by date?\n### When most | least users visited the store\n","6cdaa77a":"# Insights we want to get\n\n* Brand's popularity\n* User's journey\n* Event types and visualizations of them (view , purchase , cart) \n***\n\n* How many user visit the site?\n* How user number changes by date? (Visitors Daily Trend)\n***\n\n* Which category is the most popular one?\n* Most purchased and viewed item in website?\n","2f02ec5b":"# ****Installing The Dataset & Finding Missing Values****\n\n* As we see from the output , there is not any missing value in columns  - [event_time , event_type, product_id, category_id , price, user_id]\n* There are a lot of missing values in columns - [category_code, brand] \n* Only 2 missing value in user_session column"}}