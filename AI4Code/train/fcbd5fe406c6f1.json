{"cell_type":{"75ef940a":"code","8bf30617":"code","449fbddd":"code","c68ef910":"code","255e5095":"code","58488b54":"code","a866fd51":"code","85950057":"code","68da767d":"code","5dae58c2":"code","0ee882e9":"code","325e0638":"code","2e5ab47f":"code","9473672e":"code","2c62e5e4":"code","f097255c":"code","a53a39cf":"code","5eaf34b8":"code","111b0609":"code","39e4d5e0":"code","80dda75e":"code","892ff4b3":"code","66925743":"code","ce7421a1":"code","244a7428":"code","43c72a46":"code","07179075":"code","d0b4ee3f":"code","fea7f947":"code","d6256c2f":"code","58f44e88":"code","b0ed7a0c":"code","9f26752e":"code","04f11443":"markdown","349ff97a":"markdown","97389a01":"markdown","b91b3888":"markdown","ed51b61e":"markdown","57fee0a4":"markdown"},"source":{"75ef940a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8bf30617":"tabby_dog = \"\\tI'm tabbed_in.\"\ncaucasian_dog = \"I'm split\\non a line.\"\nbackslash_cat = \"I'm \\\\ a \\\\ dog.\"\n\nfat_dog = \"\"\"\nI'll do a list:\n\\t* Dog food\n\\t* Meat\n\\t* Catnip\\n\\t* Grass\n\"\"\"\n\nprint(tabby_dog)\nprint(caucasian_dog)\nprint(backslash_cat)\nprint(fat_dog)","449fbddd":"print(\"How old are you?\", end='  ')\nage = input()\nprint(\"How much do you weight?\", end = '  ')\nweight = input()\nprint (\"How tall are you?\", end = '  ')\nheight = input ()\n\nprint (f\"So, you are {age} old, {weight} heavy aand {height} tall\")","c68ef910":"age = input(\"How old are you?  \")\nweight = input(\"How much do you weight?  \")\nheight = input (\"How tall are you?  \")\n\nprint (f\"So,you are {age} old, {weight} heavy and {height} tall.\")","255e5095":"from sys import argv\nfirst, second, third = argv\n\nprint(\"Your first variable is:\", first)\nprint(\"Your second variable is:\", second)\nprint(\"Your third variable is\", third)","58488b54":"from sys import argv\n\nscript, user_name, likes = argv\nprompt = '> '\n\nprint(f\"Hi {user_name}, I'm the {script} script.\")\nprint(\"I'd like to ask you a few questions.\")\nprint(f\"Do you like me {user_name}?\")\nlikes = input(prompt)\n\nprint(f\"Where do you live {user_name}?\")\nlives = input(prompt)\n\nprint(\"What kind of computer do you have?\")\ncomputer = input(prompt)\n\nprint(f\"\"\"\nAlright, so you said {likes} about liking me.\nYou live in {lives}. Not sure where that is.\nAnd you have a {computer} computer. Nice.\n\"\"\")","a866fd51":"#this one is like your scripts with argv\ndef print_two(*args):\n    arg1, arg2= args\n    print(f\"arg1: {arg1}, arg2: {arg2}\")\n    \n#that *args is actually pointless, we can just do this\ndef print_two_again (arg1, arg2):\n    print(f\"arg1: {arg1}, arg2: {arg2}\")\n    \n#this just takes one argument\ndef print_none(arg1):\n    print(f\"arg1: {arg1}\")\n    \n#this one takes no arguments\ndef print_none():\n    print(\"I got nothin'.\")\n    \nprint_two (\"Aleks\",\"Moroz\")\nprint_two_again (\"Aleks\", \"Moroz\")\n","85950057":"def beers_and_crackers (beers_count, boxes_of_crackers):\n    print(f\"You have {beers_count} beers!\")\n    print(f\"You have {boxes_of_crackers} boxes of crackers!\")\n    print(\"Man that's enough for a party!\")\n    print(\"Get a blanket.\\n\")\n    \nprint(\"We can just give the function numbers directly:\")\nbeers_and_crackers(17,44)\n\nprint(\"OR, we can use variables from our script:\")\namount_of_beer = 15\namount_of_crackers = 53\n\nbeers_and_crackers(amount_of_beer, amount_of_crackers)\n\nprint(\"We can even do math inside too:\")\nbeers_and_crackers(20+15, 215+56)\n\nprint(\"And we can combine the two, variables and math:\")\nbeers_and_crackers(amount_of_beer + 123, amount_of_crackers + 64)\n","68da767d":"from sys import argv\nscript, input_file = argv\ndef print_all (f):\n    print(f.read())\n    \ndef rewind(f):\n    f.seek(0)\n\ndef print_a_line (line_count, f):\n    print(line_count, f.readline())\n    \ncurrent_file = open(input_file)\n\nprint(\"First let's print the whole file:\\n\")\n\nprint_all(current_file)\n\nprint(\"Now let's rewind, kind of like a tape.\")\n\nrewind(current_file)\n\nprint(\"Let's print three lines:\")\n\ncurrent_line = 1\nprint_a_line(current_line, current_file)\n\ncurrent_line = current_line +1 \nprint_a_line(current_line, current_file)\n\ncurrent_line = current_line + 1\nprint_a_line (current_line, current_file)","5dae58c2":"def add(a, b):\n    print(f\"ADDING {a} + {b}\")\n                return = a + b\n\ndef subtract (a, b):\n          print(f\"SUBTRACTING {a} - {b})\n                return a - b\n                \ndef multiply (a, b):\n          print (f\"MULTIPLYING {a} * {b}\")\n                return a * b\n            \ndef divide (a, b):\n          print (f\"DIVIDING {a} \/ {b}\")\n                return a \/ b\n                \nprint(\"Let's do some math with just functions!\")\n                \nage = add (30, 5)\nheight = subtract (78,4)\nweight = multiply (90, 2)\niq = divide (100, 2)\n                \nprint (f\"Age: {age}, Height: {height}, Weight: {weight}, IQ: {iq})\n       \n# A puzzle for the extra credit, type it in anyway.\nprint (\"Here is a puzzle\")\n       \nwhat = add(age, substract(height, multiply (weight, divide (iq, height))))\n\nprint (\"That becomes:\", what, \"Can you do it by hand?\")\n                \n                ","0ee882e9":"print(\"Let's practice everything.\")\nprint('You\\'d need to know \\'bout escapes with \\\\ that do:')\nprint('\\n newlines and \\t tabs.')\n\npoem = \"\"\"\n\\tThe lovely world\nwith logic so firmly planted\ncannot discern \\n the needs of love\nnor comprehend passion from intuition\nand requires an explanation\n\\n\\t\\twhere there is none.\n\"\"\"\n\nprint(\"----------------\")\nprint(poem)\nprint(\"----------------\")\n\nfive = 10 - 2 + 3 - 6\nprint(f\"This should be five: {five}\")\n\ndef secret_formula(started):\n    jelly_beans = started * 500\n    jars = jelly_beans \/ 1000\n    crates = jars \/ 100\n    return jelly_beans, jars, crates\n\nstart_point = 10000\nbeans, jars, crates = secret_formula (start_point)\n\n#remember that this is another way to format a string\nprint(\"With a starting point of: {}\".format(start_point))\n#it's just like with an f\"\" string\nprint(f\"We'd have {beans} beans, {jars} jars, and {crates} crates\")\n\nstart_point = start_point \/ 10\n      \nprint(\"We can also do that this way:\")\nbeans, jars, crates = secret_formula (start_point)\n#this is an easy way to apply a list to a format string\nprint(\"We'd have {} beans, {} jars, and {} crates\".format(start_point))","325e0638":"def break_words (stuff) :\n    \"\"\"This function will break up words for us.\"\"\"\n    words = stuff.split('  ')\n    return words\n\ndef sort_words (words) :\n    \"\"\"Sorts the words.\"\"\"\n    return sorted(words)\n\ndef print_first_word (words) :\n    \"\"\"Prints the first word after popping it off.\"\"\"\n    word = words.pop (0)\n    print (word)\n    \ndef print_last_word (words) :\n    \"\"\"Print the last word after popping it off.\"\"\"\n    word = words.pop(-1)\n    print (word)\n    \ndef sort_sentence (sentence) :\n    \"\"\"Takes in a full sentence and returns the sorted words.\"\"\"\n    word = break_words (sentence)\n    return sort_words (words)\n    \ndef print_first_and_last (sentence) :\n    \"\"\"Prints the first last words of the sentence.\"\"\"\n    word = break_words (sentence)\n    print_first_word (words)\n    print_last_word (words)\n    \ndef print_first_and_last_sorted (sentence) :\n    \"\"\"Sort the words then prints the first and last one.\"\"\"\n    word = sort_sentence (sentence)\n    print_first_word (words)\n    print_last_word (words)","2e5ab47f":"True and True\nFalse and True\n1==1 and 2 == 1\n\"test\" != \"test\"\n1 == 1 or 2 != 1\nTrue and 1 != 1\nFalse and 0 != 0\nTrue or 1 != 1\n\"test\" != \"testing\"\n1 != 0 and 2 == 1\n\"test\" != \"testing\"\n\"test\" != 1\nnot (True and False)\nnot (1 != 1 and 0 != 1)\nnot (10 != 1 or 1000 == 1000)\nnot (1 != 10 or 3 == 4)\nnot (\"testing\" != \"testing\" and \"Alex\" != \"Cool Guy\")\n1 != 1 and (not (\"testing\" == 1 or 1 == 0))\n\"chunky\" != \"bacon\" and (not (3 != 4 or 3 != 3))\n3 != 4 and not (\"testing\" != \"test\" or \"Python\" != \"Python\")","9473672e":"people = 20\ncats = 30\ndogs = 15\n\nif people < cats:\n    print (\"Too many cats! The world is doomed!\")\n    \nif people > cats:\n    print (\"Not many cats! The world is saved!\")\n    \nif people < dogs: \n    print ( \"The world is drooled on!\")\n    \nif people > dogs:\n    print (\"The world is dry!\")\n    \ndogs += 5\n\nif people >= dogs:\n    print (\"People are greater than or equal to dogs.\")\n    \nif people <= dogs:\n    print (\"People are less than or equal to dogs.\")\n    \nif people == dogs:\n    print (\"People are dogs.\")","2c62e5e4":"people = 30\ncars = 140 \ntrucks = 15\n\nif cars > people:\n    print (\"We should take the cars.\")\nelif cars < people:\n    print (\"We should not take the cars.\")\nelse:\n    print (\"We can't decide.\")\n\nif trucks > cars: \n    print (\"That's too many trucks.\")\nelif trucks < cars:\n    print (\"Maybe we could take the trucks.\")\nelse:\n    print (\"We still can't decide.\")\n\nif people > trucks:\n    print (\"Alright, let's just take the trucks.\")\nelse: \n    print (\"Fine, let's stay home then.\")","f097255c":"print (\"\"\"You enter a dark room with two doors.\nDo you through door #1 or door #2?\"\"\")\n\ndoor = input (\"> \")\n\nif door == \"1\":\n    print (\"There's a giant bear here eating a cheese cake.\")\n    print (\"What do you do?\")\n    print (\"1. Take the cake.\")\n    print (\"2. Scream at the bear.\")\n    \n    bear = input (\"> \")\n    \nif bear == \"1\":\n    print (\"The bear eats yout face off. Good job!\")\nelif bear == \"2\":\n    print(\"The bear eats your legs off. Good job!\")\nelse:\n    print(f\"Well, doing {bear} is probably better.\")\n    print (\"Bear runs away.\")\n    \nif door == \"2\":\n    print (\"You stare into endless abyss at Cthulhu's retire\")\n    print (\"1. Blueberries.\")\n    print (\"2. Yellow jacket clothespins.\")\n    print (\"3. Understanding revolvers yelling melodies.\")\n    \n    insanity = input (\"> \")\n    if insanity == \"1\" or insanity == \"2\":\n        print (\"Your body survives powered by a mind of jello\")\n        print (\"Good job!\")\n    else:\n        print (\"The insanity rots your eyes into a pool of muses\")\n        print (\"Good job!\")\n    \nelse:\n    print (\"You stumble around and fall on a knife and die.\") ","a53a39cf":"the_count = [[1, 2, 3], [4, 5, 6]]\nfruits = ['apples', 'oranges', 'pears', 'apricots']\nchange = [1, 'pennies', 2, 'dimes', 3, 'quarters']\n\n# this first kind of for-loop goes through a list \nfor number in the_count:\n    print (f\"This is count {number}\")\n    \n#same as above\nfor fruit in fruits:\n    print(f\"A fruit of type: {fruit}\")\n\n#also we can go through mixed lists to\n#notice we have to use {} since we don't know what's in it\nfor i in change:\n    print(f\"I got {i}\")\n    \n#we can also build lists, first start with an empty one \nelements = []\n\n#then use the range function to do 0 to 5 counts\nfor i in range(0, 6):\n    print(f\"Adding {i} to the list.\")\n    #append is a function that lists understand\n    elements.append(i)\n    \n# now we can print them out too\nfor i in elements:\n    print(f\"Element was: {i}\")\n\n","5eaf34b8":"i = 0\nnumbers = []\n\nwhile i < 20:\n    print (f\"At the top i is {i}\")\n    numbers.append(i)\n    \n    i = i + 2\n    print (\"Numbers now: \", numbers)\n    print (f\"At the bottom i id {i}\")\n    \nprint (\"The numbers:  \")\n\nfor num in numbers:\n    print (num)","111b0609":"from sys import exit\n\ndef gold_room():\n    print (\"This room is full of gold. How much do you take?\")\n    \n    choice = input(\">  \")\n    if \"0\" in choice or \"1\" in choice:\n        how_much = int(choice)\n    else:\n        dead(\"Man, learn to type a number\")\n        \n    if how_much < 50:\n        print (\"Nice, you're not greedy, you win!\")\n        exit (0)\n    else:\n        dead (\"You greedy bastard!\")\n        \ndef bear_room():\n    print (\"There is a bear here.\")\n    print (\"The bear has a bunch of honey.\")\n    print (\"The fat bear is in front of another door.\")\n    print (\"How are you going to move the bear?\")\n    bear_moved = False\n    \n    while True:\n        choice = input (\"> \")\n        if choice == \"take honey\":\n            dead (\"The bear looks at you then slaps your face.\")\n        elif choice == \"taunt bear\" and not bear_moved:\n            print (\"The bear has moved from the door.\")\n            print (\"You can go through it now.\")\n            bear_moved = True\n        elif choice == \"taunt bear\" and bear_moved:\n            dead (\"The bear gets pissed off and chews your legs\")\n        elif choice == \"open door\" and bear_moved:\n            gold_room()\n        else:\n            print (\"I got no idea what that means.\")\n            \ndef cthulhu_room():\n    print (\"Here you see the great evil Cthulhu.\")\n    print (\"He, it, whatever stares at you and you go insane.\")\n    print (\"Do you flee for you life or eat your head?\")\n    \n    choice = input(\"> \")\n    \n    if \"flee\" in choice:\n        start()\n    elif \"head\" in choice:\n        dead (\"Well that was tasty!\")\n    else:\n        cthulhu_room()\n        \ndef dead (why):\n    print (why, \"Good job!\")\n    exit(0)\n    \ndef start ():\n    print (\"You are in a dark room.\")\n    print (\"There is a door to your right and left.\")\n    print (\"Which one do you take?\")\n    \n    choice = input (\"> \")\n    \n    if choice == \"left\":\n        bear_room ()\n    elif choice == \"right\":\n        cthulhu_room()\n    else: \n        dead (\"You stumble around the room until you starve.\")\n        \nstart ()\n        \n\n","39e4d5e0":"ten_things = \"Apples Oranges Crows Telephone Light Sugar\"\n\nprint(\"Wait there are not 10 things in that list. Let's fix it.\")\n\nstuff = ten_things.split (' ')\nmore_stuff = [\"Day\", \"Night\", \"Song\", \"Frisbee\", \n             \"Corn\", \"Banana\", \"Girl\", \"Boy\"]\n\nwhile len(stuff) != 10:\n    next_one = more_stuff.pop()\n    print(\"Adding:  \", next_one)\n    stuff.append(next_one)\n    print(f\"There are {len(stuff)} items now.\")\n    \nprint (\"There we go: \", stuff)\n\nprint(\"Let's do some things with stuff.\")\n\nprint (stuff[1])\nprint(stuff[-1]) #whoa! fancy\nprint (stuff.pop())\nprint(' '.join(stuff)) #what? cool!\nprint('#'.join(stuff[3:5])) # super stellar!\n    ","80dda75e":">>> things =['a', 'b', 'c', 'd']\n>>> print(things [1])\n\n>>> things [1]= 'z'\n>>> print(things[1])\n\n>>> things\n['a', 'z', 'c', 'd']","892ff4b3":">>> stuff = {'name': 'Alex', 'age': 32, 'height': 6*12+2}\n>>> print(stuff['name'])\n\n>>> print (stuff['age'])\n\n>>> print(stuff['height'])\n\n>>> stuff['city']=\"SF\"\n>>> print(stuff['city'])\n","66925743":">>> stuff[1]= \"Wow\"\n>>> stuff [2] = \"Neato\"\n>>> print(stuff[1])\n\n>>> print(stuff[2])","ce7421a1":">>> del stuff ['city']\n>>> del stuff [1]\n>>> del stuff [2]\n>>> stuff\n{'name': 'Alex', 'age': 39, 'height': 74}","244a7428":"#create a mapping of state to abbreviation\nstates = {\n    'Oregon': 'OR',\n    'Florida': 'FL',\n    'California': 'CA',\n    'New York': 'NY',\n    'Michigan': 'MI'\n}\n\n#create a basic set of states and some cities in them\ncities = {\n    'CA': 'San Francisco',\n    'MI': 'Detroit',\n    'FL': 'Jacksonville'\n}\n\n#add some more cities\ncities['NY'] = 'New York'\ncities['OR'] = 'Portland'\n\n#print out some cities\nprint('-' * 10)\nprint(\"NY state has: \", cities['NY'])\nprint(\"OR State has: \", cities ['OR'])\n\n#print some states\nprint('-' * 10)\nprint(\"Michigan's abbreviation is: \", states ['Michigan'])\nprint(\"Florida's abbreviation is: \", states['Florida'])\n\n# do it by using the state then cities dict\nprint('-' * 10)\nprint(\"Michigan has: \", cities[states ['Michigan']])\nprint(\"Florida has: \", cities[states['Florida']])\n\n#print every state abbreviation\nprint('-' * 10)\nfor state, abbrev in list(states.items()):\n    print(f\"{state} is abbreviated {abbrev}\")\n\n#print every city in state\nprint('-' * 10)\nfor abbrev, city in list(cities.items()):\n    print(f\"{abbrev} has the city {city}\")\n    \n#now do both at the same time\nprint('-' * 10)\nfor state, abbrev in list(states.items ()):\n    print(f\"{state} state is abbreviated {abbrev}\")\n    print(f\"and has city {cities[abbrev]}\")\n    \nprint('-' * 10)\n#safely get a abbreviation by state that might not be there\nstate =  states.get('Texas')\n\nif not state:\n    print(\"Sorry, no Texas.\")\n    \n#get a city with a default value\ncity = cities.get('TX', 'Does not Exist')\nprint(f\"The city for the state 'TX' is: {city}\")","43c72a46":"class song (object):\n    def __init__(self, lyrics):\n        self.lyrics = lyrics\n        \n    def sing_me_a_song(self):\n        for line in self.lyrics:\n            print(line)\n            \nhappy_bday = song([\"Happy birthday to you\",\n                  \"I don't want to get sued\",\n                  \"So I'll stop right there\"])\nbulls_on_parade = song([\"They rally around the family\",\n                       \"With pockets full of shells\"])\n\nhappy_bday.sing_me_a_song()\nbulls_on_parade.sing_me_a_song()","07179075":"import random \nfrom urllib.request import urlopen\nimport sys\n\nWORD_URL = \"http:\/\/learncodethehardway.org\/words.txt\"\nWORDS = []\n\nPHRASES = {\n    \"class %%%(%%%):\":\n    \"Make a class named %%% that is a %%%.\",\n    \"class %%% (object):\\n\\tdef __init_(self, ***)\":\n      \"class %%% has-a __init__ that takes self and *** para\"\n    \"class %%%(object):\\n\\tdef *** (self, @@@):\"\n      \"class %%% has-a function *** that takes self and @@@\"\n    \"*** = (@@@)\"\n      \"Set *** to an instance of class %%%.\",\n    \"***.*** = '****'\":\n      \"From *** get the *** attribute and set it to '***'.\"\n}\n\n# do they want to drill phrases first\nif len(sys.argv) == 2 and sys.argv[1] == \"english\":\n    PHRASE_FIRST = True\nelse:\n    PHRASE_FIRST = False\n    \n#load up the words from the website\nfor word in urlopen(WORD_URL).readlines():\n    WORDS.append(str(word.strip(), encoding=\"utf-8\"))\n    \ndef convert (snippet, phrase):\n    class_names = [w.capitalize() for w in\n                  random.sample(WORDS, snippet.count(\"%%%\"))]\n    other_names = random.sample (WORDS, snippet.count(\"%%%\"))\n    results = []\n    param_names = []\n    \n    for i in range (0, snippet.count(\"@@@\")):\n        param_count = random.randint(1,3)\n        param_names.append(', '.join(\n             random.sample(WORDS, param_count)))\n        \n    for sentence in snippet, phrase:\n        result = sentence[:]\n        \n        #fake class names\n        for word in class_names:\n            result = result.replace (\"%%%\", word, 1)\n        #fake other names\n        for word in other_names:\n            result = result.replace(\"%%%\", word, 1)\n            \n        #fake parameter lists \n        for word in param_names:\n            result = result.repalce(\"%%%\", word, 1)\n            \n        results.append(result)\n        \n    return results\n#keep going until they hit CTRL-D\ntry:\n    while True:\n        snippets =list(PHRASES.keys())\n        random.shuffle(snippets)\n        \n        for snippet in snippets:\n            phrase = PHRASES[snippet]\n            question, answer = convert (snippet, phrase)\n            if PHRASE_FIRST:\n                question, answer= answer, question\n                \n            print(question)\n            \n            input(\"> \")\n            print(f\"ANSWER: {answer}\\n\\n\")\n            \nexcept EOFError:\n    print(\"\\nBye\")","d0b4ee3f":"class Scene (object):\n    def enter (self):\n        pass\n    \nclass Engine (object):\n    \n    def __init__ (self, scene_map):\n        pass\n    \n    def play (self):\n        pass\n    \nclass Death (Scene):\n    \n    def enter (self):\n        pass\n    \nclass CentralCorridor (Scene):\n    \n    def enter(self):\n        pass\n    \nclass LaserWeaponArmory (Scene):\n    \n    def enter (self):\n        pass\n    \nclass TheBridge (Scene):\n    \n    def enter (self):\n        pass\n    \nclass EscapePod (Scene):\n    \n    def enter (self):\n        pass\n    \nclass Map (object):\n    def __init__ (self, start_scene):\n        pass\n    \n    def next_scene (self, scene_name):\n        pass\n    \n    def opening_scene (self):\n        pass\n    \na_map = Map('central_corridor')\na_game = Engine (a_map)\na_game.play ()","fea7f947":"class Parent (object):\n    \n    def implicit (self):\n        print (\"PARENT implicit ()\")\n\nclass Child(Parent):\n    pass\n\ndad = Parent ()\nson = Child ()\n\ndad.implicit ()\nson.implicit ()\n","d6256c2f":"class Parent (object):\n    \n    def override (self):\n        print (\"PARENT override ()\")\n        \nclass Child (Parent):\n    \n    def override (self):\n        print(\"CHILD override ()\")\n        \ndad = Parent ()\nson = Child ()\n\ndad.override ()\nson.override ()","58f44e88":"class Parent (object):\n    \n    def override (self):\n        print(\"PARENT override ()\")\n        \n    def implicit (self):\n        print (\"PARENT implicit ()\")\n        \n    def altered (self):\n        print(\"PARENT altered ()\")\n        \nclass Child (Parent):\n    \n    def override(self):\n        print (\"CHILD override ()\")\n        \n    def altered (self):\n        print(\"CHILD, BEFORE PARENT altered ()\")\n        super (Child, self).altered ()\n        print (\"CHILD, AFTER PARENT altered ()\")\n        \ndad = Parent ()\nson = Child ()\n    \ndad.implicit ()\nson.implicit ()\n    \ndad.override ()\nson.override ()\n    \ndad.altered ()\nson.altered ()","b0ed7a0c":"class Parent (object):\n    \n    def altered (self):\n        print (\"PARENT altered ()\")\n        \nclass Child (Parent):\n    \n    def altered (self):\n        print (\"CHILD, BEFORE PARENT altered ()\")\n        super (Child, self).altered()\n        print(\"CHILD, AFTER PARENT altered ()\")\n        \ndad = Parent ()\nson = Child ()\n\ndad.altered ()\nson.altered ()","9f26752e":"class Other (object):\n    \n    def override (self):\n        print(\"OTHER override ()\")\n        \n    def implicit (self):\n        print(\"OTHER implicit ()\")\n        \n    def altered (self):\n        print (\"OTHER altered ()\")\n        \nclass Child (object):\n    \n    def __init__(self):\n        self.other = Other ()\n        \n    def implicit (self):\n        self.other.implicit ()\n        \n    def override (self):\n        print(\"CHILD override ()\")\n        \n    def altered (self):\n        print(\"CHILD, BEFORE OTHER altered ()\")\n        self.other.altered ()\n        print (\"CHILD, AFTER OTHER altered ()\")\n\nson = Child ()\n\nson.implicit ()\nson.override ()\nson.altered ()","04f11443":"# Here's some new strange stuff, remember type it exactly\n\ndays= \"Monday Tuesday Wednesday Thursday Friday Saturday Sunday\"\nmonths = \"\\nJan\\nFeb\\nMar\\nApr\\nMay\\nJun\\nJul\\nAug\"\n\nprint(\"Here are the days:  \", days)\nprint(\"Here are the months:   \", months)\n\nprint(\"\"\"\nThere's something going on here.\nWith the three double-quotes.\nWe'll be able to type as much as we like\/\nEven 3,4,5,6,7 lines if we want.\n\"\"\")","349ff97a":"**Exercises from nice book \"Learn a Python 3 the hard way\" by Zed A. Shaw**","97389a01":"# print (\"How old are you?\", end = '  ')\nage = input()\nprint (\"How tall are you?\", end = '  ')\nheight = input()\nprint(\"How much do you weigh?\", end = '  ')\nweight = input()\n\nprint(f\"So, you\\'re {age} old, {height} tall and {weight} heavy.\")\n\nfrom sys import argv\nscript, filename, txt = argv\n\ntxt = open(filename)\n\nprint (\"Here\\'s your file {filename}:\")\nprint(txt.read())\n\nprint(\"Type the filename again:\")\nfile_again = input(\"> \")\ntxt_again = open(file_again)\n\nprint (txt_again_read())\n\nprint ('Let\\'s practice everything.')\nprint ('You\\'d need to know \\'bout escapes with \\\\ that do \\n newlines and \\t tabs.')\n       \npoem = \"\"\"\n\\t The lovely world \nwith logic so firmly planted\ncannot discern \\n the needs of love\nnor comprehenf passion from intuition\nand requires an explanation\n\\n\\t\\t where there is none.\n\"\"\"\n       \nprint (\"-----------\")\nprint (poem)\nprint (\"-----------\")\n       \nfive = 10 - 2 + 3 - 6\nprint (f\"This should be five: {five}\")\n    \ndef secret_formula (started):\n       jelly_beans = started * 500\n       jars = jelly_beans \/ 1000\n       crates = jars - 100\n       return jelly_beans, jars, crates\n       \nstart_point = 10000\nbeans, jars = secret_formula (start_point)\n\n#remember that this is another way to format a string\nprint(\"With a starting point of: {}\".format(start_point))\n#it's just like with an f\"\" stirng \nprint(f\"We\\'d have {beans} beans, {jars} jars, and {crates} crates.\".format(secret_formula))\n       \n       \n       \npeople = 20\ncates = 30\ndogs = 15\n       \nif people < cats:\n       print (\"Too many cats! The world is doomed!\")\n       \nif people > cats:\n       print (\"Not many cats! The world is saved!\")\n       \nif people < dogs:\n       print (\"The world is drooled on!\")\n       \nif people > dogs:\n       print(\"The world is dry!\")\n       \ndogs = dogs + 5\n\nif people >= dogs:\n       print (\"People are less than or equal to dogs.\")\n       \nif people <= dogs:\n       print(\"People are less than or equal to dogs.\")\n       \nif people != dogs:\n       print (\"People are dogs.\")\n    ","b91b3888":"print (\"How old are you?\", end = ' ') \nage = input() \nprint (\"How tall are you?\", end = ' ') \nheight = input() \nprint(\"How much do you weigh?\", end = ' ')\nweight = input()\n\nprint(f\"So, you're {age} old, {height} tall and {weight} heavy.\")\n\nfrom sys import argv \nscript, filename, txt = argv\n\ntxt = open(filename)\n\nprint (\"Here's your file {filename}:\") \nprint(txt.read())\n\nprint(\"Type the filename again:\") \nfile_again = input(\"> \") \ntxt_again = open(file_again)\n\nprint (txt_again_read())\n\nprint ('Let\\'s practice everything.') \nprint ('You\\'d need to know \\'bout escapes with \\\\ that do \\n newlines and \\t tabs.')\npoem = \"\"\" \\t The lovely world with logic so firmly planted cannot discern \n\\n the needs of love nor comprehenf passion from intuition and requires an explanation \n\\n\\t\\t where there is none. \"\"\"\n\nprint (\"-----------\") \nprint (poem)\nprint (\"-----------\")\n\nfive = 10 - 2 + 3 - 6 \nprint (f\"This should be five: {five}\")\n\ndef secret_formula (started): \n       jelly_beans = started * 500 \n       jars = jelly_beans \/ 1000 \n       crates = jars - 100 \n       return jelly_beans, jars, crates\n\nstart_point = 10000 \nbeans, jars = secret_formula (start_point)\n\n#remember that this is another way to format a string print(\"With a starting point of: {}\".format(start_point)) \n#it's just like with an f\"\" stirng print(f\"We'd have {beans} beans, {jars} jars, and {crates} crates.\".format(secret_formula))\n\npeople = 20 \ncates = 30 \ndogs = 15\n\nif people < cats: \n       print (\"Too many cats! The world is doomed!\")\n\nif people > cats: \n       print (\"Not many cats! The world is saved!\")\n\nif people < dogs: \n       print (\"The world is drooled on!\")\n\nif people > dogs: \n       print(\"The world is dry!\")\n\ndogs = dogs + 5\n\nif people >= dogs: \n       print (\"People are less than or equal to dogs.\")\n\nif people <= dogs: \n       print(\"People are less than or equal to dogs.\")\n\nif people != dogs: \n       print (\"People are dogs.\")","ed51b61e":"* Map\n* Engine\n* Scene\n* Map\n- next_scene\n- opening_scene\n* Engine\n- play\n* Scene\n- enter\n* Death\n* Central_Corridor\n* Laser_Weapon_Armory\n* The_Bridge\n* Escape_Pod","57fee0a4":"#                **Keywords in Python**\n# *Keyword*                   Description                             Example\nand                      Logical and                              True and False == True\nas               Part of the with-as statement                     with X as Y: pass\nassert          Assert (ensure) that something is true             assert False, \"Error!\"\nbreak           Stop this loop right now                           while True: break\nclass           Define a class                                     class Person(object)\ncontinue        Don't process more of the loop, do it again        while True: continue\ndef             Define a function                                  def X(): pass\ndel             Delete from dictionary                             del X[Y]\nelif            Else if condition                                  if: X; elif: Y; else: J\nelse            Else condition                                     if: X; elif: Y; else: J\nexcept          If an exception happens, do this                   except ValueError, e: print (e)\nexec            Run a string as Python                             exec 'print (\"Hello\")'\nfinally  Exceprtions or not,finally do this no matter what         finally: pass\nfor            Loop over a collection of things                    for X in Y: pass\nfrom       Importing specific parts of a module                    from x import Y\n"}}