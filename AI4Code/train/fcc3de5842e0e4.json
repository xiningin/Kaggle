{"cell_type":{"89f34973":"code","03e5ccb8":"code","07a76be8":"code","95ee5ebb":"code","f5a50c4d":"code","1114afec":"code","a4f97e58":"code","29c16397":"code","1c279b22":"code","24f12ee0":"code","6fa74072":"code","d9a13e96":"code","c7b36afe":"code","824baf68":"code","807e04e6":"code","0c6366ea":"markdown","80d0df9c":"markdown"},"source":{"89f34973":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_auc_score\n\n# instantiate labelencoder object\nle = LabelEncoder()\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","03e5ccb8":"# function used from this notebook - kaggle.com\/sunilsj99\/fraud-detection-ieee\/notebook\n\ndef reduce_mem_usage(props):\n    start_mem_usg = props.memory_usage().sum() \/ 1024**2 \n    print(\"Memory usage of properties dataframe is :\",start_mem_usg,\" MB\")\n    NAlist = [] # Keeps track of columns that have missing values filled in. \n    for col in props.columns:\n        if props[col].dtype != object:  # Exclude strings\n            \n            # Print current column type\n            print(\"******************************\")\n            print(\"Column: \",col)\n            print(\"dtype before: \",props[col].dtype)\n            \n            # make variables for Int, max and min\n            IsInt = False\n            mx = props[col].max()\n            mn = props[col].min()\n            \n            # Integer does not support NA, therefore, NA needs to be filled\n            if not np.isfinite(props[col]).all(): \n                NAlist.append(col)\n                props[col].fillna(mn-1,inplace=True)  \n                   \n            # test if column can be converted to an integer\n            asint = props[col].fillna(0).astype(np.int64)\n            result = (props[col] - asint)\n            result = result.sum()\n            if result > -0.01 and result < 0.01:\n                IsInt = True\n\n            \n            # Make Integer\/unsigned Integer datatypes\n            if IsInt:\n                if mn >= 0:\n                    if mx < 255:\n                        props[col] = props[col].astype(np.uint8)\n                    elif mx < 65535:\n                        props[col] = props[col].astype(np.uint16)\n                    elif mx < 4294967295:\n                        props[col] = props[col].astype(np.uint32)\n                    else:\n                        props[col] = props[col].astype(np.uint64)\n                else:\n                    if mn > np.iinfo(np.int8).min and mx < np.iinfo(np.int8).max:\n                        props[col] = props[col].astype(np.int8)\n                    elif mn > np.iinfo(np.int16).min and mx < np.iinfo(np.int16).max:\n                        props[col] = props[col].astype(np.int16)\n                    elif mn > np.iinfo(np.int32).min and mx < np.iinfo(np.int32).max:\n                        props[col] = props[col].astype(np.int32)\n                    elif mn > np.iinfo(np.int64).min and mx < np.iinfo(np.int64).max:\n                        props[col] = props[col].astype(np.int64)    \n            \n            # Make float datatypes 32 bit\n            else:\n                props[col] = props[col].astype(np.float32)\n            \n            # Print new column type\n            print(\"dtype after: \",props[col].dtype)\n            print(\"******************************\")\n    \n    # Print final result\n    print(\"___MEMORY USAGE AFTER COMPLETION:___\")\n    mem_usg = props.memory_usage().sum() \/ 1024**2 \n    print(\"Memory usage is: \",mem_usg,\" MB\")\n    print(\"This is \",100*mem_usg\/start_mem_usg,\"% of the initial size\")\n    return props","07a76be8":"train = pd.read_csv(\"\/kaggle\/input\/ieee-fraud-detection\/train_transaction.csv\", index_col=\"TransactionID\")\ntrain = reduce_mem_usage(train) ","95ee5ebb":"test = pd.read_csv(\"\/kaggle\/input\/ieee-fraud-detection\/test_transaction.csv\", index_col=\"TransactionID\")\ntest = reduce_mem_usage(test)","f5a50c4d":"print(train.shape)\nprint(test.shape)","1114afec":"# Delete feautres that have null values more than 50%\n\nnull_percent = (train.isnull().sum()\/train.shape[0])*100\ncolumns_to_drop = np.array(null_percent[null_percent > 50].index)\n\ncolumns_to_drop","a4f97e58":"# Drop columns \n\ntrain.drop(columns_to_drop, axis=1, inplace=True)\ntest.drop(columns_to_drop, axis=1, inplace=True)\n\nprint(train.shape)\nprint(test.shape)","29c16397":"# Fill columns with null values\nnull_percent = (train.isnull().sum()\/train.shape[0])*100\ncolumns_to_fill = np.array(null_percent[null_percent > 0].index) \ncolumns_to_fill","1c279b22":"# Fill columns with mode value (because all are categorical feautres i.e. dtype=object)\n\nfor i in columns_to_fill:\n    train[i] = train[i].replace(np.nan, train[i].mode()[0])\n    test[i]  = test[i].replace(np.nan, test[i].mode()[0])","24f12ee0":"cat_data = train.select_dtypes(include='object')\ncat_cols = cat_data.columns.values\n\nplt.figure(figsize=(20,15))\n\nj=1\nfor i in cat_cols:\n    \n    # plotted below\n    if (i == \"P_emaildomain\"):\n        continue\n    \n    plt.subplot(3,3,j)\n    sns.countplot(x=cat_data[i], palette=\"muted\")\n    j += 1\n    \nplt.show()\n    ","6fa74072":"plt.figure(figsize=(20,8))\nsns.countplot(x=cat_data['P_emaildomain'], palette='muted')\nplt.xticks(rotation = 90)\nplt.show()","d9a13e96":"# Numeric encoding features\n\ntrain[cat_cols] = train[cat_cols].apply(lambda col: le.fit_transform(col))","c7b36afe":"# garbage collection\n\ndel cat_data, columns_to_drop, null_percent, columns_to_fill, cat_cols","824baf68":"# print(train.shape)\n# print(test.shape)\n\nX_train = train.drop('isFraud', axis=1)\ny_train = train['isFraud']\n\nX_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size = 0.3, random_state=0)\n\nprint(X_train.shape)\nprint(X_val.shape)","807e04e6":"model = RandomForestClassifier(n_jobs=-1, n_estimators=200)\nmodel.fit(X_train, y_train)\n\nprint(roc_auc_score(y_val,model.predict_proba(X_val)[:,1] ))","0c6366ea":"## Random Forest Classifier\n\n****","80d0df9c":"## Categorical Data\n\nHere we will the plot following feautres\n\n - __ProductCD__   \n - __card4__\n - __card6__\n - __P_emaildomain__\n - __M1, M2, M3, M6__\n - __M4__\n  "}}