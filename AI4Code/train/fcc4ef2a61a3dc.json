{"cell_type":{"a35a5ecf":"code","09a953aa":"code","7ba0f2a9":"code","9f89716f":"code","103e643d":"code","26d9ee84":"code","cceae2b7":"code","3f4ef991":"code","8f60059d":"code","0a47c4c4":"code","22e18f89":"code","cdcc813c":"code","43225492":"code","86a75cfa":"code","20bd4f1f":"code","26131e1d":"code","eae33fd8":"code","55c4f779":"code","68dd550c":"code","0857c56b":"code","c23a942f":"code","18b0ebb3":"code","aa28d00c":"code","888791d9":"code","64744ea3":"code","f6e464d8":"code","04661edc":"code","f1e18273":"code","0abddd41":"code","ddc9f235":"code","0740d42d":"code","26f06425":"code","c0fc55b2":"code","d7336706":"code","e3084ca1":"code","cfb58cf2":"code","6df84fbc":"code","0b6abacf":"code","566921b5":"markdown","ea4190e1":"markdown","3b8b04d1":"markdown","f1a4aa17":"markdown","195a4126":"markdown","2071603d":"markdown","c24fe3a6":"markdown","a61c1624":"markdown","e15dcc2c":"markdown","9e82d17e":"markdown","d661765e":"markdown","e5e21d9c":"markdown","8c9ca6df":"markdown","aff83c0a":"markdown"},"source":{"a35a5ecf":"%%writefile libraries.py\n# Create a file allowing to import upper level(usefull throughout the whole solution) packages and functions with one line: %run libraries\n\nimport os #The functions that the OS module provides allows you to interface with the underlying operating system that Python is running on \n\nimport pickle # Fast saving\/loading data\n\nimport numpy as np\nimport pandas as pd\npd.set_option('display.max_rows', 500)\npd.set_option('display.max_columns', 100)\n\n# Import visualizations\nimport matplotlib.pyplot as plt\nplt.rcParams['figure.figsize'] = (30,5) # Set standard output figure size\nimport seaborn as sns # sns visualization library\nfrom IPython.display import display # Allows to nicely display\/output several figures or dataframes in one cell\n\n# Create an output' folder to save data from the notebook\ntry: os.mkdir('output') # Try to create\nexcept FileExistsError: pass # if already exist pass\n        \nprint('Upper level libraries loaded')","09a953aa":"%reset -f\n#reset magic function allows one to release all previously used memory. -f (force) parameter allows to run it without confirmation from the user\n\n%run libraries\n#jupyter magic function loading standard libraries from the created file.","7ba0f2a9":"# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","9f89716f":"#Load data from 'input' folder in the current directory\ntrain   = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/sales_train.csv')\nitems   = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/items.csv')\ncats    = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/item_categories.csv')\nshops   = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/shops.csv')\ntest    = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/test.csv')\nsample  = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/sample_submission.csv')","103e643d":"test = test.set_index('ID') #Set index to ID. This way we do not need to drop ID column every time in future calculations","26d9ee84":"# Show the Loaded Data\n# display() allows to output multiple dataframes in one cell\ndisplay('train',   train.shape,  train.head(),\n        'items',   items.shape,  items.head(),\n        'cats',    cats.shape,   cats.head(),\n        'shops',   shops.shape,  shops.head(),\n        'test',    test.shape,   test.head(),\n        'sample',  sample.shape, sample.head()) ","cceae2b7":"# Define dataframe information function\ndef df_info(df):\n    print('-------------------------------------------shape----------------------------------------------------------------')\n    print(df.shape)\n    print('-------------------------------------head() and tail(1)---------------------------------------------------------')\n    display(df.head(), df.tail(1))\n    print('------------------------------------------nunique()-------------------------------------------------------------')\n    print(df.nunique())\n    print('-------------------------------------describe().round()---------------------------------------------------------')\n    print(df.describe().round())\n    print('--------------------------------------------info()--------------------------------------------------------------')\n    print(df.info())\n    print('-------------------------------------------isnull()-------------------------------------------------------------')\n    print(df.isnull().sum())\n    print('--------------------------------------------isna()--------------------------------------------------------------')\n    print(df.isna().sum())\n    print('-----------------------------------------duplicated()-----------------------------------------------------------')\n    print(len(df[df.duplicated()]))\n    print('----------------------------------------------------------------------------------------------------------------')","3f4ef991":"df_info(train)","8f60059d":"# We see 6 duplicates in data, let's drop them\ntrain.drop_duplicates(inplace=True)","0a47c4c4":"# We see a possible typo in item price in train - negative value \ntrain[train.item_price <= 0 ]","22e18f89":"# Only one datapoint - it should be safe to simply remove it\ntrain = train[train.item_price > 0]","cdcc813c":"#check price distribution\nplt.plot(train.item_price)","43225492":"# There is one clear outlier\nprint(train[train.item_price > 100000])\nprint(items[items.item_id == 6066])","86a75cfa":"# As we see this is a sale of 522 packages in one pack (each one cost 307980\/522 = 59 ), let us correct this line\ntrain.item_cnt_day[train.item_id == 6066] = 522\ntrain.item_price[train.item_id == 6066] = 59","20bd4f1f":"# Now let us plot it again\nplt.plot(train.item_price)","26131e1d":"# Let us plot variation of the mean item price with time\nplt.plot(train.groupby(['date_block_num'])['item_price'].mean())","eae33fd8":"#We do not clearly see much variation of prices within one month of sales \nplt.plot(train[train.date_block_num == 33].item_price)","55c4f779":"#Let us see how price is changing for one of the arbitrary taken items\nid = 1000 # arbitrary id\nplt.figure(figsize=(10,4))\nsns.distplot(train[train.item_id == id].item_price, hist_kws={'log':True}, kde = False, bins = 100)\n\ntrain[train.item_id == id].sort_values(by=['date_block_num'])","68dd550c":"# Now let us plot item_cnt_day\nplt.plot(train.item_cnt_day)","0857c56b":"# Plot the logarithmic histograms for item_cnt_day\nsns.distplot(train.item_cnt_day, hist_kws={'log':True}, kde = False, bins = 200)","c23a942f":"#Couple outliers above 900\ntrain[train.item_cnt_day > 900]","18b0ebb3":"display(items[items.item_id == 9248])","aa28d00c":"display(items[items.item_id == 20949],\n        items[items.item_id == 11373])","888791d9":"# It's possible that a lot of packets and deliveries were done on some occasion but those have to be some holidays for example.\n# I think it's better to remove the points as outliers\ntrain = train[train.item_cnt_day < 900]","64744ea3":"# Now let us plot item_cnt_day\nplt.plot(train.item_cnt_day)","f6e464d8":"# Let us see sales distribution per month\nsns.countplot(x='date_block_num', data=train);","04661edc":"# Let us see sales distribution over one month\nsns.countplot(x='date', data=train[(train.date_block_num == 21)&(train.shop_id == 12)])","f1e18273":"# Let's see the sales per shop\nsns.countplot(x='shop_id', data=train)","0abddd41":"# Let us plot cumulative sales per shop over time. We will use red color for those shops, that are not present in test set.\n\nfig = plt.figure(figsize=(30,36))\nfor i in range(len(shops)):\n    ts=train[train.shop_id == i].groupby(['date_block_num'])['item_cnt_day'].sum()\n    plt.subplot(10, 6, i+1)\n    plt.bar(ts.index, ts.values)\n    plt.xlim((0, 33))\n    plt.ylim(0, 12000)\n    if i in set(test.shop_id):\n        plt.title(str(i) +' '+ shops.shop_name[i], color = 'k')\n    else: \n        plt.title(str(i) +' '+ shops.shop_name[i], color = 'r')\nplt.show()","ddc9f235":"# We see that data for some shops was mixed (intentionally I guess), let's fix it\n# \u042f\u043a\u0443\u0442\u0441\u043a \u041e\u0440\u0434\u0436\u043e\u043d\u0438\u043a\u0438\u0434\u0437\u0435, 56\ntrain.loc[train.shop_id == 0, 'shop_id'] = 57\ntest.loc[test.shop_id == 0, 'shop_id'] = 57\n# \u042f\u043a\u0443\u0442\u0441\u043a \u0422\u0426 \"\u0426\u0435\u043d\u0442\u0440\u0430\u043b\u044c\u043d\u044b\u0439\"\ntrain.loc[train.shop_id == 1, 'shop_id'] = 58\ntest.loc[test.shop_id == 1, 'shop_id'] = 58\n# \u0416\u0443\u043a\u043e\u0432\u0441\u043a\u0438\u0439 \u0443\u043b. \u0427\u043a\u0430\u043b\u043e\u0432\u0430 39\u043c\u00b2\ntrain.loc[train.shop_id == 10, 'shop_id'] = 11\ntest.loc[test.shop_id == 10, 'shop_id'] = 11\n# Now delete those shops from the shops dataframe:\nshops.drop([0, 1, 10], inplace = True)\n\n# I think it is also better to remove any data for outbound trade, \n# which is very unusual and misleading (we are not going to predict the outbound trade)\ntrain = train[train.shop_id != 9]\ntrain = train[train.shop_id != 20]\n# Now delete those shops from the shops dataframe:\nshops.drop([9, 20], inplace = True)\n\n# 12 and 55 are online stores - we cannot remove them because these shops are in test.","0740d42d":"# Let us add item_category_id to train and test sets\nitems_dict = dict(zip(items.item_id, items.item_category_id))\ntrain['item_category_id'] = train['item_id'].map(items_dict)\ntest['item_category_id'] = test['item_id'].map(items_dict)","26f06425":"# Plot the distribution for sold items relative to the category\nfig, ax =plt.subplots(2,1, figsize=(30,10))\nsns.countplot(train['item_category_id'], ax=ax[0])\nsns.countplot(test['item_category_id'], ax=ax[1])","c0fc55b2":"# We see that some categories are absent in test data but are present in train. Let us remove those categories from train data to make it closer to test.\nfor i in (set(train.item_category_id) - set(test.item_category_id)):\n    train = train[train.item_category_id != i]\n    items = items[items.item_category_id != i] # remove them from items\n    cats = cats[cats.item_category_id != i]    # remove from cats","d7336706":"# Plot the distribution again\nfig, ax =plt.subplots(2,1,  figsize=(30,10))\nsns.countplot(train['item_category_id'], ax=ax[0])\nsns.countplot(test['item_category_id'], ax=ax[1])","e3084ca1":"# How many samples in train now?\nlen(set(train.shop_id))","cfb58cf2":"fig = plt.figure(figsize=(30,60))\ni = 1\nfor shop_id in set(train.shop_id):\n    ts=train[train.shop_id == shop_id].groupby(['item_category_id'])['item_cnt_day'].sum()\n    plt.subplot(11, 5, i)\n    plt.bar(ts.index, ts.values)\n    plt.xlim((0, 82))\n    if shop_id in set(test.shop_id):\n        plt.title(str(shop_id) +' '+ shops.shop_name[shop_id], color = 'k')\n    else: \n        plt.title(str(shop_id) +' '+ shops.shop_name[shop_id], color = 'r')\n    i+=1\nplt.show()","6df84fbc":"# Shop # 40 showing very different trend from other shops, so let us remove it (it is closed long time ago anyway and we don't need to predict for this shop)\ntrain = train[train.shop_id != 40]\n# Now delete the shop from the shops dataframe:\nshops.drop([40], inplace = True)\n\n# we do not remove shops # 12 and 55 which are on-line shops and also show different distribution\n# shop #55 is an online shop for 1-C Software (business accounting software, #1 in Russia). The sales categories from this shop are only present for this shop and are not present in other shops:\nset(train[train.shop_id == 55].item_category_id)","0b6abacf":"# Now we will save the data, but we do not want to save modifications to data sets at this stage, here we only cleaned the data, so let us drop newly created columns from data. We will modify the data in the next: 2_FeatureEngineering section\ntrain.drop(columns = 'item_category_id', inplace = True)\ntest.drop(columns = 'item_category_id', inplace = True)\n\n# Save data to the folder to use it in the next part\nwith open(r'output\/1_EDA_data.pkl','wb') as f:\n    pickle.dump((train, items, cats, shops, test, sample), f)  \n    \n'''# Load the saved data in the next section as:\nwith open(r'output\/1_EDA_data.pkl', 'rb') as f:\n    (train, items, cats, shops, test, sample) = pickle.load(f)'''","566921b5":"## 1. EDA","ea4190e1":"### This is the first notebook '1_EDA' of the full solution for Predict Future Sales competition on Kaggle.\n## This notebook describes the first section of the solution: Exploratory Data Analysis and Data Cleaning\nThe full solution consists of 4 notebooks:\n- 1_EDA : Exploratory Data analysis and Data Cleaning\n- 2_FE: Feature Engineering\n- 3_HPO: Models Hyperparameter optimization\n- 4_Ensemble: Ensembling the models\n\nData:\n- The input data is in the 'input' folder of this directory\n- The output data is saved in the 'output' folder of this directory","3b8b04d1":"# Thank you for your time!\n## Please share your thoughts and comments, as well as suggestions for future improvements.","f1a4aa17":"We see step\/piecewise graph here with some outliers. The item price increase (probably because of the inflation of prices with time here - Russia suffered currency crisis in 2014.06-2014.12 with the drop of oil prices - Rubble dropped 2 times). So probably adding prices in USD would help the model.","195a4126":"Very clear trend in sales - low sales on monday, highest sales on saturday-sunday. Probably adding number of mondays, tuesdays, etc. as features in the particular month would help. Holidays also show higher sales - better take this into account.","2071603d":"We clearly see a pattern here - overall negative trend (crisis in Russia), with a 12 month period sinusoidal - year cycle. Peak sales - December, low sales on summer months.","c24fe3a6":"### Train.item_cnt_day","a61c1624":"### Train.item_price","e15dcc2c":"## Train","9e82d17e":"We can see the variation in price for a given month for different shops and also variation of price versus time, the price distribution is multimodal.","d661765e":"### Load Data\n\nData Description  \nYou are provided with daily historical sales data. The task is to forecast the total amount of products sold in every shop for the test set. Note that the list of shops and products slightly changes every month. Creating a robust model that can handle such situations is part of the challenge.\n\n#### Files description:  \n- sales_train.csv - the training set. Daily historical data from January 2013 to October 2015.  \n- test.csv - the test set. You need to forecast the sales for these shops and products for November 2015.  \n- sample_submission.csv - a sample submission file in the correct format. \n- items.csv - supplemental information about the items\/products.  \n- item_categories.csv  - supplemental information about the items categories.  \n- shops.csv- supplemental information about the shops.  \n\n#### Data fields:\n- ID - an Id that represents a (Shop, Item) tuple within the test set\n- shop_id - unique identifier of a shop\n- item_id - unique identifier of a product\n- item_category_id - unique identifier of item category\n- item_cnt_day - number of products sold. You are predicting a monthly amount of this measure\n- item_price - current price of an item\n- date - date in format dd\/mm\/yyyy\n- date_block_num - a consecutive month number, used for convenience. January 2013 is 0, February 2013 is 1,..., October 2015 is 33\n- item_name - name of item\n- shop_name - name of shop\n- item_category_name - name of item category","e5e21d9c":"We need to predict sales only for the shops which were not closed :). It might be a good idea to provide a model with a flag for open\/closed shops.","8c9ca6df":"We see the increase in price clearly here","aff83c0a":"We see that the distributions of Sales vs CategoryID are slightly different for Test and Train sets - e.g. category# 31 is big in test (many items picked up for test) but small in train (because of relatively low sales of those items)"}}