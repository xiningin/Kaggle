{"cell_type":{"66541f9e":"code","33a6b6d8":"code","16efc8ca":"code","521fee48":"code","cc329c97":"code","f4670f10":"code","5514b096":"code","dc21da87":"code","f73dd2d6":"code","c6208832":"code","62a2ad19":"code","be14a5a6":"code","e7b2dcc0":"code","06125315":"code","bce4e7cd":"code","e377cab2":"code","bb4fe8a9":"code","e2619aa9":"code","5bdbab4c":"code","61129cc0":"code","f2b18271":"code","f91fdb65":"code","f46a013b":"code","b5f48c9b":"code","78bd92d0":"code","b05925e5":"code","0cbf0a44":"code","0c852e84":"code","c8709d9d":"code","d99ddbd4":"code","293f7a80":"code","3458cb92":"code","54ea64ac":"code","82566c3b":"markdown","8478921d":"markdown","04dc821e":"markdown","c98dc4fb":"markdown","924a5cf0":"markdown","1df73b26":"markdown","2e350bc0":"markdown","8d57dc2e":"markdown","0b9351c9":"markdown","43f825e5":"markdown","890dbd7c":"markdown"},"source":{"66541f9e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","33a6b6d8":"import warnings\nwarnings.filterwarnings(\"ignore\")","16efc8ca":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nsns.set_palette(\"mako\")\n\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler, MinMaxScaler\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score, confusion_matrix","521fee48":"df = pd.read_csv('..\/input\/drugs-a-b-c-x-y-for-decision-trees\/drug200.csv')\ndf.head()","cc329c97":"df.shape","f4670f10":"df.info()","5514b096":"#in Rows\n((100 * (df.isna().sum(axis = 1) \/ df.shape[1]).round(2)) > 0).sum()","dc21da87":"#in Columns\n((100 * (df.isna().sum() \/ df.shape[1]).round(2)) > 0).sum()","f73dd2d6":"df.nunique()","c6208832":"#Imbalanced Set or Not\ndf['Drug'].value_counts()","62a2ad19":"df1 = df.copy()","be14a5a6":"df1.columns","e7b2dcc0":"#Encoding the Target variable using Label Encoder \n\nencoder = LabelEncoder()\ndf1['Drug'] = encoder.fit_transform(df1['Drug'])\n\ndf1.head()","06125315":"#Encoding Other Features using Get Dummies\n\ndummy = pd.get_dummies(data = df1[['Sex', 'BP', 'Cholesterol']], drop_first=True)\ndummy.head()","bce4e7cd":"df1 = df1.drop(['Sex', 'BP', 'Cholesterol'], axis = 1)\ndf1 = pd.concat([df1, dummy], axis = 1)\ndf1.head()","e377cab2":"numeric_columns = ['Age', 'Na_to_K']\ncategoric_columns = ['Sex', 'BP', 'Cholesterol']","bb4fe8a9":"sns.pairplot(data=df1, diag_kind='auto', hue='Drug', palette='icefire')","e2619aa9":"# Visualizing Categorical Columns wrt Target Feature\nfor i in categoric_columns:\n    plt.figure(figsize = (14,5))\n    sns.countplot(df[i], hue = df.Drug, hue_order = ['drugA', 'drugB', 'drugC', 'drugX', 'drugY'])\n    plt.title(i.upper(), fontsize=18, color = \"black\")\n    plt.show()","5bdbab4c":"# Plotting Numeric Data wrt Target Feature\nplt.figure(figsize=(8,8))\nsns.jointplot(data=df, x=\"Age\", y=\"Na_to_K\", hue=\"Drug\", palette='viridis')\nplt.title(\"AGE vs NA_TO_K wrt DRUG\", fontsize = 18, color = 'black', loc = 'left', pad = 60)\nplt.show()","61129cc0":"plt.figure(figsize=(12,5))\nk = 1\nfor i in numeric_columns:\n    plt.subplot(1,2,k)\n    sns.stripplot(x = \"Drug\", y = i, data = df, order = ['drugA', 'drugB', 'drugC', 'drugX', 'drugY'], palette=\"viridis\")\n    plt.title(i + \" vs DRUG\", fontsize = 18, color = 'black')\n    plt.tight_layout()\n    k = k+1","f2b18271":"#Plotting Target Variable to Check Distribution\nplt.figure(figsize = (12,6))\nsns.countplot(df['Drug'], order = ['drugA', 'drugB', 'drugC', 'drugX', 'drugY'], palette='ch:.25')\nplt.title(\"DISTRIBUTION OF TARGET FEATURE - DRUG\", fontsize = 18, color = 'indigo')\nplt.show()","f91fdb65":"#Visualizing the Correlation with a Heatmap\nplt.figure(figsize=(8,8))\nsns.heatmap(df1.corr(), annot=True, fmt='.3f', cmap='BuPu_r')\nplt.title(\"CORRELATION BETWEEN FEATURES\", fontsize=18, color='black', pad = 20)\nplt.show()","f46a013b":"X = df1.drop('Drug', axis=1)\ny = df1.Drug","b5f48c9b":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)\nprint(\"Shape of X_train\", X_train.shape)\nprint(\"Shape of X_test\", X_test.shape)\nprint(\"Shape of y_train\", y_train.shape)\nprint(\"Shape of y_test\", y_test.shape)","78bd92d0":"scaler = MinMaxScaler()\nX_train[numeric_columns] = scaler.fit_transform(X_train[numeric_columns])\nX_test[numeric_columns] = scaler.transform(X_test[numeric_columns])","b05925e5":"tree_clf = DecisionTreeClassifier()\ntree_clf.fit(X_train, y_train)","0cbf0a44":"#Training Accuracy Score\ny_train_pred = tree_clf.predict(X_train)\nprint(\"Accuracy Score on Training Data-\", accuracy_score(y_pred=y_train_pred, y_true=y_train))","0c852e84":"#Test Accuracy Score\ny_test_pred = tree_clf.predict(X_test)\nprint(\"Accuracy Score on Training Data-\", accuracy_score(y_pred=y_test_pred, y_true=y_test))","c8709d9d":"param_grid = {'criterion':['gini','entropy'],\n              'max_depth':[2,3,4]}\ngrid_cv = GridSearchCV(estimator=DecisionTreeClassifier(), param_grid=param_grid, cv = 5)\ngrid_cv.fit(X_train, y_train)","d99ddbd4":"grid_cv.best_params_","293f7a80":"grid_cv.best_estimator_","3458cb92":"y_train_gridCV_pred = grid_cv.predict(X_train)\nprint(\"Accuracy Score on Training Data-\", accuracy_score(y_pred=y_train_gridCV_pred, y_true=y_train))","54ea64ac":"y_test_gridCV_pred = grid_cv.predict(X_test)\nprint(\"Accuracy Score on Training Data-\", accuracy_score(y_pred=y_test_gridCV_pred, y_true=y_test))","82566c3b":"## Unique Values in Each Column","8478921d":"## Trying Grid Search to find best Hyperparameters","04dc821e":"# Machine Learning Model Building","c98dc4fb":"# Encoding Features","924a5cf0":"# Splitting and Scaling Features","1df73b26":"## DecisionTreeClassifier with max_depth = 4, and criterion = 'gini' was the best fit","2e350bc0":"# Loading and Understanding Data","8d57dc2e":"# EDA (Univariate and Multivariate Analysis)","0b9351c9":"# Imports","43f825e5":"## Missing Values in Rows and Columns","890dbd7c":"**Not such an Imbalanced set, so no need to resample**"}}