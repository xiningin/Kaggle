{"cell_type":{"aa553d5b":"code","0d6d9b74":"code","8cb3f2f7":"code","d48b29ea":"code","3dc7a988":"code","f4b386db":"code","d2291e24":"code","9e72f55c":"code","d7940d11":"code","67698d56":"code","d7bfa076":"code","dd4614f4":"code","99e54256":"code","67fe70eb":"code","790a9e53":"code","621b469a":"code","8fc6fa13":"code","2d51a0f6":"code","1da1dc46":"code","a029e570":"code","4b517403":"code","93a2cbb0":"code","ebef7bf1":"markdown","ea0a2aef":"markdown","af89e330":"markdown","401f8c72":"markdown","becf88e6":"markdown","93829392":"markdown","dc9c5a6f":"markdown","d8ec5728":"markdown","c024209f":"markdown","126d8b63":"markdown"},"source":{"aa553d5b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0d6d9b74":"import pandas as pd\nimport numpy as np\nimport seaborn as sn\nimport plotly.express as px\nfrom plotly.offline import iplot\nimport plotly.graph_objects as go\nimport matplotlib.pyplot as plt\n%matplotlib inline","8cb3f2f7":"pd.set_option('display.max_columns',None)\ndf = pd.read_csv('\/kaggle\/input\/top-women-chess-players\/top_women_chess_players_aug_2020.csv')\ndf.head()","d48b29ea":"data = df.loc[:100,:]\ndata.head()","3dc7a988":"data = data.drop(['Fide id','Gender','Inactive_flag'],axis = 1)\ndata.head(3)","f4b386db":"def replacement(value):\n    out = value.replace(',','')\n    return out","d2291e24":"data['Name'] = data['Name'].apply(lambda x: replacement(x))\ndata.head(2)","9e72f55c":"px.bar(data_frame=data,x = 'Name',y = 'Standard_Rating',labels={'x':'Name','y':'Standard Rating'},\n      color_discrete_sequence=['purple'],opacity=1)","d7940d11":"data['Curr_year'] = 2020\ndata['Age'] = data['Curr_year']-data['Year_of_birth']\ndata.head(2)","67698d56":"def barsubplots(df):\n    \n    trace1 = go.Bar(x = df.Name,\n                   y = df.Standard_Rating,\n                   name = 'Standard Rating of the Player',\n                   text = df.Name,\n                   )\n    trace2 = go.Bar(x = df.Name,\n                    y = df.Rapid_rating,\n                   name = 'Rapid Rating of the Player',\n                   text = df.Name,\n                   xaxis = 'x2',\n                   yaxis = 'y2',\n                   )\n    trace3 = go.Bar(x = df.Name,\n                   y = df.Blitz_rating,\n                   name = 'Blitz Rating of the Player',\n                   text = df.Name,\n                   xaxis = 'x3',\n                   yaxis = 'y3',\n                   )\n    trace4 = go.Bar(x = df.Name,\n                    y = df.Age,\n                   name = 'Age of the Player',\n                   text = df.Name,\n                   xaxis = 'x4',\n                   yaxis = 'y4',\n                   )\n    data = [trace1,trace2,trace3,trace4];\n    layout = go.Layout(xaxis=dict(domain = [0,0.45]),\n                       xaxis2 = dict(domain = [0.55,1]),\n                       xaxis3 = dict(domain = [0,0.45]),\n                       xaxis4 = dict(domain = [0.55,1]),\n                       yaxis = dict(domain = [0,0.45]),\n                       yaxis2 = dict(domain = [0,0.45],anchor = 'x2'),\n                       yaxis3 = dict(domain = [0.55,1],anchor = 'x3'),\n                       yaxis4 = dict(domain = [0.55,1],anchor = 'x4'),\n                      )\n    fig = go.Figure(data=data,layout=layout)\n    iplot(fig)","d7bfa076":"barsubplots(data)","dd4614f4":"sn.countplot(data=data,x= 'Title',palette='plasma')\n","99e54256":"df_gm = data.loc[(data['Title'] == 'GM')]\ndf_gm.shape","67fe70eb":"barsubplots(df_gm)","790a9e53":"sn.set_palette('plasma')\nplt.figure(figsize=(16,9))\nsn.set_style(style='darkgrid')\nsn.countplot(data=data,x = 'Federation',palette='plasma')","621b469a":"sn.set_palette('plasma')\nplt.figure(figsize=(16,9))\nsn.set_style(style='darkgrid')\nsn.countplot(data=df_gm,x = 'Federation',palette='plasma')","8fc6fa13":"df_gm[df_gm['Federation'] == 'IND'].style.background_gradient('plasma')","2d51a0f6":"df_gm[df_gm['Federation'] == 'CHN'].style.background_gradient('plasma')","1da1dc46":"df_gm[df_gm['Federation'] == 'RUS'].style.background_gradient('plasma')","a029e570":"df_gm[(df_gm['Age']>=20) & (df_gm['Age']<=23)].style.background_gradient('plasma')","4b517403":"def charts(df,i):\n    chart = px.pie(df,values = i,names = 'Name',height = 600)\n    chart.update_traces(textposition = 'inside',textinfo = 'percent+label')\n    \n    chart.update_layout(title_x = 0.5,\n                       geo = dict(\n                       showframe = True,\n                       showcoastlines = False,))\n    chart.show()","93a2cbb0":"rating = ['Standard_Rating','Rapid_rating','Blitz_rating']\nfor i in rating:\n    print(f' plots for the <{i}> are shown below \u2193')\n    charts(df_gm,i)\n    print(\"=\"*75)","ebef7bf1":"## BarSubPlots","ea0a2aef":"## Countplot for GrandMasters from their Nationalities","af89e330":"## GrandMasters from Russia","401f8c72":"## GrandMasters from India","becf88e6":"## Countplot for the top 100 Player's Nationality","93829392":"## GrandMasters Stats","dc9c5a6f":"## GrandMasters from China","d8ec5728":"## Data Visualisation of The Top Grandmasters","c024209f":"## Pie Chart Visualisation","126d8b63":"## Youngest GrandMasters"}}