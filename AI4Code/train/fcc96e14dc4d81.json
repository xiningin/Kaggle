{"cell_type":{"058a1cdd":"code","8b6fff3e":"code","20780efd":"code","ae5fa4e1":"code","67a41f27":"code","8d4bf592":"code","4cb1f1e3":"code","8cc273bd":"code","36db557f":"code","b906df95":"code","ac2462c5":"code","a86bf9da":"code","593741d9":"code","dd216693":"code","449ae853":"code","97db6ccd":"code","94373d5c":"code","df8e36a5":"code","7ddc88ad":"code","4138f44b":"code","ffae1f99":"code","8a5c2ee6":"code","f6c155af":"code","f6354448":"code","190dbb96":"code","ac234a5a":"code","5f8a2d79":"code","dca739e0":"code","a431f711":"code","d8893505":"code","a6b11e96":"code","cb6a25ac":"code","d097615e":"code","cb7b1cda":"code","fd18d375":"code","11894798":"code","81e18d19":"code","832e0692":"code","089c7b5c":"code","a003bf81":"code","6ccc7e50":"code","5e001616":"code","3eecc457":"code","040ae9c4":"code","5754de34":"code","f9575a7f":"code","5b4e551d":"code","69268f50":"code","a7c63cb8":"code","c942b301":"code","608c6a86":"code","4f9f9046":"code","b029d710":"code","d43da3fb":"code","8252903a":"code","0c8a97a3":"code","6a12850e":"code","b0033a25":"code","cd51eb8b":"code","89422062":"code","ad9e4f8b":"code","43a73715":"code","4c7a8149":"code","efd41c25":"code","e04ba242":"code","8dfca866":"code","63d12af8":"code","24848621":"code","11d885e1":"code","0bb2d197":"code","869b24f6":"code","5a593ad0":"markdown","7e898df9":"markdown","0f4eb3a4":"markdown","d6653556":"markdown","b413a033":"markdown","53090c4e":"markdown","06038af6":"markdown","1ed66a97":"markdown","bd9f5172":"markdown","099940bf":"markdown","dbb59f5a":"markdown"},"source":{"058a1cdd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8b6fff3e":"df=pd.read_csv(\"..\/input\/donorsprediction\/Raw_Data_for_train_test.csv\")","20780efd":"df","ae5fa4e1":"df.head()","67a41f27":"df.columns","8d4bf592":"df.describe()","4cb1f1e3":"df.isnull().sum()","8cc273bd":"df.columns[df.isnull().any()]","36db557f":"# create a list of our conditions\nconditions = [\n    (df['TARGET_D'] >= 50),\n    (df['TARGET_D'] >= 20) & (df['TARGET_D'] < 50),\n    (df['TARGET_D'] >= 13) & (df['TARGET_D'] < 20),\n    (df['TARGET_D'] >= 10) & (df['TARGET_D'] < 13),\n    (df['TARGET_D'] < 10)\n    ]\n\n# create a list of the values we want to assign for each condition\nvalues = ['A', 'B', 'C', 'D','E']\n\n# create a new column and use np.select to assign values to it using our lists as arguments\ndf['DONATION_TYPE'] = np.select(conditions, values)\n\n# display updated DataFrame\ndf.head()","b906df95":"df","ac2462c5":"df.SES.dtypes","a86bf9da":"df.isnull().sum()","593741d9":"df['TARGET_D']=df['TARGET_D'].fillna(df['TARGET_D'].mean())","dd216693":"# create a list of our conditions\nconditions = [\n    (df['TARGET_D'] >= 50),\n    (df['TARGET_D'] >= 20) & (df['TARGET_D'] < 50),\n    (df['TARGET_D'] >= 13) & (df['TARGET_D'] < 20),\n    (df['TARGET_D'] >= 10) & (df['TARGET_D'] < 13),\n    (df['TARGET_D'] < 10)\n    ]\n\n# create a list of the values we want to assign for each condition\nvalues = ['A', 'B', 'C', 'D','E']\n\n# create a new column and use np.select to assign values to it using our lists as arguments\ndf['DONATION_TYPE'] = np.select(conditions, values)\n\n# display updated DataFrame\ndf.head()","449ae853":"df.isnull().sum()","97db6ccd":"#target d contains a lot of null values ,so delete this column\ndf=df.drop(['TARGET_D'],axis=1)","94373d5c":"df=df.drop(['TARGET_B'],axis=1)","df8e36a5":"df=df.drop(['PUBLISHED_PHONE'],axis=1)","7ddc88ad":"df['DONOR_AGE']=df['DONOR_AGE'].fillna(df['DONOR_AGE'].mean())","4138f44b":"df['DONOR_AGE']=df['DONOR_AGE'].astype('int64')","ffae1f99":"df['INCOME_GROUP']=df['INCOME_GROUP'].fillna(df['INCOME_GROUP'].mode()[0])","8a5c2ee6":"df['INCOME_GROUP']=df['INCOME_GROUP'].astype('int64')","f6c155af":"df['WEALTH_RATING']=df['WEALTH_RATING'].fillna(df['WEALTH_RATING'].mode()[0])","f6354448":"df['WEALTH_RATING']=df['WEALTH_RATING'].astype('int64')","190dbb96":"df=df.dropna()","ac234a5a":"df.columns[df.isnull().any()]","5f8a2d79":"df","dca739e0":"len(df.SES.unique())","a431f711":"df['SES'].value_counts()","d8893505":"df['SES']=df['SES'].str.replace('?','2')\ndf['SES']=df['SES'].astype('int64')","a6b11e96":"df['URBANICITY'].value_counts()","cb6a25ac":"df['URBANICITY']=df['URBANICITY'].str.replace('?','S')","d097615e":"df['CLUSTER_CODE'].value_counts()","cb7b1cda":"df['CLUSTER_CODE']=df['CLUSTER_CODE'].str.replace('.','40')\ndf['CLUSTER_CODE']=df['CLUSTER_CODE'].astype('int64')","fd18d375":"df.dtypes","11894798":"# Get list of categorical variables\ns = (df.dtypes == 'object')\nobject_cols = list(s[s].index)\n\nprint(\"Categorical variables:\")\nprint(object_cols)","81e18d19":"from sklearn.preprocessing import LabelEncoder\nle=LabelEncoder()\nfor i in list(df.columns):\n    if df[i].dtype=='object':\n        df[i]=le.fit_transform(df[i])","832e0692":"df.dtypes","089c7b5c":"X=df.drop('SES', axis=1)\ny=df.SES","a003bf81":"X","6ccc7e50":"y","5e001616":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y)","3eecc457":"X_train","040ae9c4":"X_train.dtypes","5754de34":"para = list(range(100, 1001, 100))\nprint(para)","f9575a7f":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import classification_report, accuracy_score, f1_score\nresults = {}\nfor n in para:\n    print('para=', n)\n    model = RandomForestClassifier(n_estimators=n)\n    model.fit(X_train, y_train)\n    preds = model.predict(X_test)\n    accu = accuracy_score(y_true=y_test, y_pred=preds)\n    f1 = f1_score(y_true=y_test, y_pred=preds, average='micro')\n    print(classification_report(y_true=y_test, y_pred=preds))\n    print('--------------------------')\n    results[n] = f1","5b4e551d":"import matplotlib.pylab as plt\n# sorted by key, return a list of tuples\nlists = sorted(results.items()) \np, a = zip(*lists) # unpack a list of pairs into two tuples\nplt.plot(p, a)\nplt.show()","69268f50":"best_para = max(results, key=results.get)\nprint('best para', best_para)\nprint('value', results[best_para])","a7c63cb8":"test_df = pd.read_csv('..\/input\/donorsprediction\/Predict_donor.csv')\ntest_df.head()","c942b301":"test_df.dtypes","608c6a86":"test_df.columns[test_df.isnull().any()]","4f9f9046":"test_df=test_df.drop(['SES'],axis=1)","b029d710":"test_df['DONOR_AGE']=test_df['DONOR_AGE'].fillna(test_df['DONOR_AGE'].mean())","d43da3fb":"test_df['DONOR_AGE']=test_df['DONOR_AGE'].astype('int64')","8252903a":"test_df['INCOME_GROUP']=test_df['INCOME_GROUP'].fillna(test_df['INCOME_GROUP'].mode()[0])","0c8a97a3":"test_df['INCOME_GROUP']=test_df['INCOME_GROUP'].astype('int64')","6a12850e":"test_df['WEALTH_RATING']=test_df['WEALTH_RATING'].fillna(test_df['WEALTH_RATING'].mode()[0])","b0033a25":"test_df['WEALTH_RATING']=test_df['WEALTH_RATING'].astype('int64')","cd51eb8b":"test_df=test_df.dropna()","89422062":"test_df.columns[test_df.isnull().any()]","ad9e4f8b":"test_df","43a73715":"test_df.dtypes","4c7a8149":"test_df['URBANICITY']=test_df['URBANICITY'].str.replace('?','S')","efd41c25":"test_df['CLUSTER_CODE']=test_df['CLUSTER_CODE'].str.replace('.','40')\ntest_df['CLUSTER_CODE']=test_df['CLUSTER_CODE'].astype('int64')","e04ba242":"# Get list of categorical variables\ns = (test_df.dtypes == 'object')\nobject_cols = list(s[s].index)\n\nprint(\"Categorical variables:\")\nprint(object_cols)","8dfca866":"from sklearn.preprocessing import LabelEncoder\nle=LabelEncoder()\nfor i in list(test_df.columns):\n    if test_df[i].dtype=='object':\n        test_df[i]=le.fit_transform(test_df[i])","63d12af8":"test_df.dtypes","24848621":"Target = model.predict(test_df)\nTarget","11d885e1":"PREDICTED_df = pd.DataFrame()\nPREDICTED_df['SES'] = Target\nPREDICTED_df['CONTROL_NUMBER'] = test_df['CONTROL_NUMBER']\nPREDICTED_df.head()","0bb2d197":"PREDICTED_df","869b24f6":"PREDICTED_df.tail()","5a593ad0":"# Build model","7e898df9":"# Define X and y","0f4eb3a4":"create a new column called DONATION_TYPE","d6653556":"# Read Data","b413a033":"# Find missing values","53090c4e":"#  Hypter-parameter tuning","06038af6":"# Predict the test data","1ed66a97":"Spilt data into train and test","bd9f5172":"# Random Forest classifier","099940bf":"# make label encoder to categorical coulmns","dbb59f5a":"# Missing values"}}