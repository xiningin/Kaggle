{"cell_type":{"8c38a5f7":"code","94c2c66a":"code","97d6adec":"code","68ff9d3f":"code","6c193540":"code","c3b3ffca":"code","9cf409d0":"code","9430d5ae":"code","55a09319":"code","64d18326":"code","cf72d7e1":"code","99032a12":"code","f1b5a59a":"code","6628ab93":"code","997baa0b":"markdown","f774dc10":"markdown","ba50bac7":"markdown","396f7649":"markdown","94332062":"markdown","52fd356e":"markdown","5322a9fe":"markdown","83e5a38d":"markdown"},"source":{"8c38a5f7":"# importing libraries\nfrom __future__ import print_function\nimport pandas as pd\nimport numpy as np\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPooling2D\nfrom keras.layers.normalization import BatchNormalization\nfrom keras import backend as K\nimport matplotlib.pyplot as plt\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","94c2c66a":"# importing train dataset\ntrain = pd.read_csv('..\/input\/train.csv')\nprint('The dimensions of Train dataset are - ', train.shape)","97d6adec":"# importing test dataset\ntest = pd.read_csv('..\/input\/test.csv')\nprint('The dimensions of Test dataset are - ', test.shape)","68ff9d3f":"# setting the model parameters\nbatch_size = 128\nnum_classes = 10\nepochs = 10\nimg_rows, img_cols = 28, 28","6c193540":"# dropping the label column from train dataset\nX_train = train.drop(['label'], axis=1)\nX_test = test\n\ny_train = train['label']\n# converting each value of y_train to binary vector of size=10\n# for y=2 => [0,0,1,0,0,0,0,0,0,0]\ny_train = keras.utils.to_categorical(y_train, num_classes)","c3b3ffca":"# converting the pandas dataframe to numpy array\nX_train = np.array(X_train)\nX_test = np.array(X_test)","9cf409d0":"# resizing the train & test datasets\nif K.image_data_format() == 'channels_first':\n    X_train = X_train.reshape(X_train.shape[0], 1, img_rows, img_cols)\n    X_test = X_test.reshape(X_test.shape[0], 1, img_rows, img_cols)\n    input_shape = (1, img_rows, img_cols)\nelse:\n    X_train = X_train.reshape(X_train.shape[0], img_rows, img_cols, 1)\n    X_test = X_test.reshape(X_test.shape[0], img_rows, img_cols, 1)\n    input_shape = (img_rows, img_cols, 1)","9430d5ae":"print('The dimensions of the resized Train dataset is', X_train.shape)\nprint('The dimensions of the resized Test dataset is', X_train.shape)","55a09319":"# this function is used to update the plots for each epoch and error\ndef plt_dynamic(x, ty, ax, colors=['b']):\n    ax.plot(x, ty, 'r', label=\"Train Loss\")\n    plt.legend()\n    plt.grid()\n    fig.canvas.draw()","64d18326":"model = Sequential()\n# layer 1\nmodel.add(Conv2D(128, kernel_size=(5, 5),\n                 kernel_initializer='he_normal',\n                 activation='relu',\n                 padding='same',\n                 input_shape=input_shape))\nmodel.add(BatchNormalization())\n\n#layer 2\nmodel.add(Conv2D(64, kernel_size=(5, 5),\n                 kernel_initializer='he_normal',\n                 padding='same',\n                 activation='relu'\n                 ))\nmodel.add(BatchNormalization())\n\n#layer 3\nmodel.add(Conv2D(32, kernel_size=(5, 5),\n                 kernel_initializer='he_normal',\n                 padding='same',\n                 activation='relu'))\nmodel.add(BatchNormalization())\n\nmodel.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))\n\nmodel.add(Flatten())\n\nmodel.add(Dense(128, activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(rate=0.5))\n\nmodel.add(Dense(num_classes, activation='softmax'))\n\nmodel.compile(loss=keras.losses.categorical_crossentropy,\n              optimizer=keras.optimizers.Adadelta(),\n              metrics=['accuracy'])\n\nhistory = model.fit(X_train, y_train,\n          batch_size=batch_size,\n          epochs=epochs,\n          verbose=1)","cf72d7e1":"# epoch vs loss plot\nfig,ax = plt.subplots(1,1)\nax.set_xlabel('Epoch') \nax.set_ylabel('Categorical Crossentropy Loss')\n\n# list of epoch numbers\nx = list(range(1,epochs+1))\n\nty = history.history['loss']\nplt_dynamic(x, ty, ax)","99032a12":"# predicting the class labels\ny_pred = model.predict(X_test)\n\n# converting the probabilities to class labels\ny_classes = y_pred.argmax(axis=-1)","f1b5a59a":"# constructing the ID column for submission\nId = [x for x in range(1,28001)]","6628ab93":"output=pd.DataFrame({'ImageId':Id,'Label':y_classes})\noutput.to_csv('submission.csv', index=False)","997baa0b":"- In this case study, I trained a 3-layered Convolutional Neural Network that achieved 99.27% accuracy on Test data.\n- The size of the kernel used was 5x5 along with Padding.\n- The activation function used was Adam. \n- Techniques such as Batch Normalization, MaxPooling & Dropouts were used.","f774dc10":"<p style='text-align:center;font-size:20px'> <b>Kaggle Competition<b\/> <\/p>","ba50bac7":"1. **Result** - The model scored an accuracy of **99.27%** on Test dataset. ","396f7649":"**3 Convolution Layers + Kernel size=5 + Padding + Batch Norm. with Max Pooling**","94332062":"### Applying CNN model","52fd356e":"<p style='text-align:center;font-size:32px'> <b>Digit Recognizer<b\/> <\/p>","5322a9fe":"### Data Loading & Preprocessing","83e5a38d":"## Conclusion"}}