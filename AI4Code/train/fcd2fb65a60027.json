{"cell_type":{"294420ce":"code","aa7f2db9":"code","6fe0427d":"code","b8cada12":"code","b6a1e7ab":"code","dcc811fe":"code","ca7d58a7":"code","37fcfaf7":"code","55ad8b24":"code","33cd4e75":"code","e04c2a22":"code","58343382":"code","164270c2":"code","f955daa4":"markdown"},"source":{"294420ce":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","aa7f2db9":"# Loading the data\ndata = pd.read_csv('\/kaggle\/input\/calcofi\/bottle.csv', low_memory=False)\ndata.head()","6fe0427d":"data.info()","b8cada12":"## Creating a dataframe with two columns\nlinear_data = data[['Salnty', 'T_degC' ]]\nlinear_data.columns = ['Salinity', 'Temperature (C)']\nlinear_data.head()","b6a1e7ab":"#Imputing data\nfrom sklearn.impute import SimpleImputer\n\nmy_imputer = SimpleImputer(strategy='median')\nlinear_data = my_imputer.fit_transform(linear_data)\nX = linear_data[:,0].reshape(-1,1)\ny = linear_data[:,1]","dcc811fe":"#Plotting data\nimport matplotlib.pyplot as plt\nplt.scatter(linear_data[:,0], linear_data[:,1],color='#26547C', edgecolors='#E5DCC5', alpha=0.7)\nplt.title('Salinity vs Temperature', fontsize=18)\nplt.xlabel('Salinity', fontsize=14)\nplt.ylabel('Temperature (\u02daC)', fontsize=14)\nplt.xlim([30,37])","ca7d58a7":"##Splitting intro training and test data\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_absolute_error, r2_score\n\nX_train, X_valid, y_train, y_valid = train_test_split(X,y, train_size=0.8, test_size=0.2, random_state=0 )","37fcfaf7":"#Functions for scoring data and ploting models\ndef model_results(model, X_train, X_valid, y_train, y_valid):\n    linear_model = model\n    linear_model.fit(X_train, y_train)\n    preds = linear_model.predict(X_valid)\n    return linear_model.coef_, linear_model.intercept_, preds\n\ndef plot_model(model_name, model, X_train, X_valid, y_train, y_valid):\n    a, b, preds = model_results(model, X_train, X_valid, y_train, y_valid)\n    #plotting\n    fig,ax= plt.subplots(figsize=(8,6))\n    textstr = '\\n'.join((\n    r'$\\mathrm{Mean}\\; \\mathrm{Absolute} \\;\\mathrm{Value}=%.2f$' % (mean_absolute_error(y_valid, preds), ),\n    r'$R^2=%.2f$' % (r2_score(y_valid, preds), ),\n    r'$\\mathrm{Coeff}=%.2f$' % (a,),\n    r'$\\mathrm{Intercept}=%.2f$' % (b,)))\n    props = dict(boxstyle='round', facecolor='wheat', alpha=0.5)\n    # place a text box in upper left in axes coords\n    ax.text(0.02, 0.02, textstr, transform=ax.transAxes, fontsize=14,\n            verticalalignment='bottom', bbox=props)\n    x = list(range(30,38))\n    ax.scatter(linear_data[:,0], linear_data[:,1],color='#26547C', edgecolors='#E5DCC5', alpha=0.7)\n    ax.plot(x, a*x + b, color='#540804', label=model_name)\n    #plt.xlim([30,37])\n    plt.title('Salinity vs Temperature', fontsize=18)\n    plt.xlabel('Salinity', fontsize=14)\n    plt.ylabel('Temperature (\u02daC)', fontsize=14)\n    plt.legend(prop={'size': 14})\n    return a, b","55ad8b24":"from sklearn.linear_model import LinearRegression\n\nlinear_a, linear_b = plot_model('Linear Regression',LinearRegression(),X_train, X_valid, y_train, y_valid )","33cd4e75":"#Ridge regression\nfrom sklearn.linear_model import Ridge\n\nridge_a, ridge_b = plot_model('Ridge Regression', Ridge(alpha=1, solver='cholesky'), X_train, X_valid, y_train, y_valid )","e04c2a22":"#Lasso\nfrom sklearn.linear_model import Lasso\n\nlasso_a, lasso_b = plot_model('Lasso Regression', Lasso(alpha=0.1),X_train, X_valid, y_train, y_valid)","58343382":"#Elastic net\nfrom sklearn.linear_model import ElasticNet\n\nelastic_a, elsatic_b = plot_model('ElasticNet Regression', ElasticNet(alpha=0.1, l1_ratio=0.5), X_train, X_valid, y_train, y_valid)","164270c2":"#Plotting all models\nx = list(range(30,38))\nplt.figure(figsize=(8,6))\nplt.scatter(linear_data[:,0], linear_data[:,1], color='#26547C', edgecolors='#E5DCC5', alpha=0.7)\nplt.plot(x, linear_a * x + linear_b, color='#FF7D00', label='Linear Regression')\nplt.plot(x, ridge_a * x + ridge_b, color='#A0ECD0', label='Ridge Regression')\nplt.plot(x, lasso_a * x + lasso_b, color='#FCDC4D', label='Lasso Regression')\nplt.plot(x, elastic_a * x + elsatic_b, color='#540804', label='ElasticNet Regression')\n#plt.xlim([30,37])\nplt.title('Salinity vs Temperature', fontsize=18)\nplt.xlabel('Salinity', fontsize=14)\nplt.ylabel('Temperature (\u02daC)', fontsize=14)\nplt.legend(prop={'size': 14})","f955daa4":"* The first question of this problems asks us to find the relationship between water salinity and water temperature, so the only columns that matter to us are Salnty and T_degC"}}