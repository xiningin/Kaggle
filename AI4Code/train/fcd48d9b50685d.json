{"cell_type":{"ace4c94c":"code","34514a2d":"code","7145975c":"code","64840828":"code","f2d0d72c":"code","b159f213":"code","950f6663":"code","a88ba582":"code","dd4decf1":"code","ff3ff95c":"code","e517adb8":"code","73a7b3c2":"code","f620499b":"code","8f958902":"code","d18cf042":"code","e46b4f55":"code","00cbdfef":"code","df937010":"code","0e9bc6ba":"code","a8cc7d8e":"code","38bb4dd0":"code","3f8faeb2":"code","3c52bde9":"code","58a9caba":"code","7dd4392f":"code","5c77e5a1":"code","e9abb22c":"code","fe6e15d5":"code","4c3aa742":"code","b55fe521":"code","7b0c01d8":"code","28bc9cfc":"code","ecb6a9ab":"code","394f59c0":"code","1953f113":"code","e956cd77":"code","b21473e9":"code","64debe77":"code","37c08aa4":"code","04d0053b":"code","b9602397":"code","81c702bd":"code","bfbb82b9":"markdown"},"source":{"ace4c94c":"import tensorflow as tf","34514a2d":"import numpy as np\nimport cv2\nimport os\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.utils.np_utils import to_categorical\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.optimizers import Adam\nfrom keras.layers import Dropout,Flatten\nfrom keras.layers.convolutional import Conv2D,MaxPooling2D\nimport pickle","7145975c":"path1 =\"..\/input\/retinal-oct-c8\/RetinalOCT_Dataset\/train\"\npath2 =\"..\/input\/retinal-oct-c8\/RetinalOCT_Dataset\/test\"\npath3 =\"..\/input\/retinal-oct-c8\/RetinalOCT_Dataset\/val\"\ntest_ratio=0.2\nval_ratio=0.2\nimage_size=(128,128,3)","64840828":"myList = os.listdir(path1)\nprint(\"Total Number of Classes Detected :\",len(myList))\nprint(myList)","f2d0d72c":"noOfclasses= len(myList)","b159f213":"print(myList)","950f6663":"print(\"Importing Classes...\")","a88ba582":"images=[]\nclassNo=[]\nCATEGORIES = ['DR', 'AMD', 'CSR', 'DRUSEN', 'CNV', 'NORMAL', 'MH', 'DME']\nfor x in myList:\n    myPicList = os.listdir(path1+\"\/\"+str(x))\n    for y in myPicList:\n        curImg = cv2.imread(path1+\"\/\"+str(x)+\"\/\"+y)\n        curImg = cv2.resize(curImg,(image_size[0],image_size[1]))\n        images.append(curImg)\n        classNo.append(CATEGORIES.index(x))\n    print(x,end=\" \")","dd4decf1":"x_test=[]\ny_test=[]\nCATEGORIES = ['DR', 'AMD', 'CSR', 'DRUSEN', 'CNV', 'NORMAL', 'MH', 'DME']\nfor x in myList:\n    myPicList = os.listdir(path2+\"\/\"+str(x))\n    for y in myPicList:\n        curImg = cv2.imread(path2+\"\/\"+str(x)+\"\/\"+y)\n        curImg = cv2.resize(curImg,(image_size[0],image_size[1]))\n        x_test.append(curImg)\n        y_test.append(CATEGORIES.index(x))\n    print(x,end=\" \")","ff3ff95c":"x_val=[]\ny_val=[]\nCATEGORIES = ['DR', 'AMD', 'CSR', 'DRUSEN', 'CNV', 'NORMAL', 'MH', 'DME']\nfor x in myList:\n    myPicList = os.listdir(path3+\"\/\"+str(x))\n    for y in myPicList:\n        curImg = cv2.imread(path3+\"\/\"+str(x)+\"\/\"+y)\n        curImg = cv2.resize(curImg,(image_size[0],image_size[1]))\n        x_val.append(curImg)\n        y_val.append(CATEGORIES.index(x))\n    print(x,end=\" \")","e517adb8":"print(len(images))\nprint(len(classNo))","73a7b3c2":"x_train = np.array(images)\ny_train = np.array(classNo)","f620499b":"x_test = np.array(x_test)\ny_test = np.array(y_test)\nx_val = np.array(x_val)\ny_val = np.array(y_val)","8f958902":"print(x_train.shape)\nprint(x_test.shape)","d18cf042":"#x_train,x_test,y_train,y_test = train_test_split(images,classNo,test_size=test_ratio,random_state = 42,stratify=classNo)\n#x_train,x_validation,y_train,y_validation = train_test_split(x_train,y_train,test_size=val_ratio,random_state = 42,stratify=y_train)\n","e46b4f55":"del images\ndel classNo","00cbdfef":"print(x_train.shape)\nprint(x_test.shape)\nprint(x_val.shape)","df937010":"numofSamples=[]\nfor x in range(0,noOfclasses):\n    numofSamples.append(len(np.where(y_train==x)[0]))","0e9bc6ba":"print(numofSamples)","a8cc7d8e":"plt.figure(figsize=(10,5))\nplt.bar(range(0,noOfclasses),numofSamples)\nplt.title('No of Images for each Class')\nplt.xlabel(\"Class ID\")\nplt.ylabel(\"No of Images\")\nplt.show()","38bb4dd0":"from imblearn.under_sampling import RandomUnderSampler\nimport pandas as pd\nimport seaborn as sns\nX_trainShape = x_train.shape[1]*x_train.shape[2]*x_train.shape[3]\nX_trainFlat = x_train.reshape(x_train.shape[0], X_trainShape)\nY_train = y_train\nros = RandomUnderSampler()\nX_trainRos, Y_trainRos = ros.fit_sample(X_trainFlat, Y_train)\n# Encode labels to hot vectors (ex : 2 -> [0,0,1,0,0,0,0,0,0,0])\nY_trainRosHot = to_categorical(Y_trainRos, num_classes = 8)\n# Make Data 2D again\nfor i in range(len(X_trainRos)):\n    height, width, channels = image_size[0],image_size[1],3\n    X_trainRosReshaped = X_trainRos.reshape(len(X_trainRos),height,width,channels)\n# Plot Label Distribution\ndfRos = pd.DataFrame()\ndfRos[\"labels\"]=Y_trainRos\nlabRos = dfRos['labels']\nsns.countplot(labRos)","3f8faeb2":"def preProcessing(img):\n    img = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)\n    return img","3c52bde9":"del x_train\ndel y_train","58a9caba":"x_train = np.array(list(map(preProcessing,X_trainRosReshaped)))\nprint(x_train[0].shape)","7dd4392f":"x_test = np.array(list(map(preProcessing,x_test)))\nprint(x_test[0].shape)","5c77e5a1":"#print(x_validation[0].shape)\nx_validation = np.array(list(map(preProcessing,x_val)))\nprint(x_validation[0].shape)","e9abb22c":"print(x_train.shape)","fe6e15d5":"X_train = x_train.reshape(x_train.shape[0],x_train.shape[1],x_train.shape[2],1)\nprint(X_train.shape)","4c3aa742":"X_test = x_test.reshape(x_test.shape[0],x_test.shape[1],x_test.shape[2],1)\nX_validation = x_validation.reshape(x_validation.shape[0],x_validation.shape[1],x_validation.shape[2],1)","b55fe521":"del x_test\ndel x_train\ndel x_validation","7b0c01d8":"\"\"\"dataGen = ImageDataGenerator(width_shift_range=0.1,\n                             height_shift_range=0.1,\n                             zoom_range=0.2,\n                             shear_range=0.1,\n                             rotation_range=10)\"\"\"","28bc9cfc":"#dataGen.fit(X_train)\n","ecb6a9ab":"y_train = to_categorical(Y_trainRos,noOfclasses)\ny_test = to_categorical(y_test,noOfclasses)\ny_validation = to_categorical(y_val,noOfclasses)","394f59c0":"class CustomCallback(tf.keras.callbacks.Callback):\n    def __init__(self,fraction):\n        super(CustomCallback,self).__init__()\n        self.fraction = fraction\n        self.train_a = [];\n        self.val_a =[];\n        with open('log.txt','w') as f:\n            f.write('Starting of logging..\\n')\n            self.fig = plt.figure(figsize=(4,3))\n            self.ax = plt.subplot(1,1,1)\n            plt.ion()\n\n    def on_train_begin(self,logs=None):\n        self.fig.show()\n        self.fig.canvas.draw()\n\n    def on_train_end(self,logs=None):\n        with open('log.txt','a') as f:\n            f.write('End of logging..\\n')\n    def on_epoch_begin(self,epoch,logs=None):\n        lr= tf.keras.backend.get_value(self.model.optimizer.lr)\n        lr *= self.fraction\n        tf.keras.backend.set_value(self.model.optimizer.lr,lr)\n        with open('log.txt','a') as f:\n            f.write('At epoch {:02d}, learning rate changed to {:.4f}\\n'.format(epoch,lr))\n        def on_epoch_end(self,epoch,logs=None):\n            val_acc = logs.get('val_accuracy')\n            train_acc = logs.get('accuracy')\n            self.train_a.append(train_acc)\n            self.val_a.append(val_acc)\n            with open('log.txt','a') as f:\n                f.write('At epoch {:02d}, training accuracy: {:.3f}, validation accuracy: {:.3f}\\n'.format(epoch,train_acc,val_acc))\n            self.ax.clear()\n            self.ax.plot(range(1+epoch),self.train_a,label=\"Training\")\n            self.ax.plot(range(1+epoch),self.val_a,label=\"Validation\")\n            self.ax.set_xlabel('Epochs')\n            self.ax.set_ylabel('Accuracy')\n            self.ax.legend()\n            self.fig.canvas.draw()\n            self.fig.show()","1953f113":"def model():\n    filters=60\n    sizeoffilter1 = (5,5)\n    sizeoffilter2 = (4,4)\n    sizeoffilter3 = (3,3)\n    sizeofpool = (2,2)\n    node=5000\n\n    model = Sequential();\n    model.add((Conv2D(filters,sizeoffilter1,input_shape=(image_size[0],image_size[1],1)\n    ,activation=\"relu\")))\n\n    model.add((Conv2D(filters,sizeoffilter1,activation=\"relu\")))\n    model.add((Conv2D(filters\/\/2,sizeoffilter2,activation=\"relu\")))\n    model.add((Conv2D(filters\/\/2,sizeoffilter2,activation=\"relu\")))\n    model.add(MaxPooling2D(pool_size=sizeofpool))\n    model.add(Dropout(0.2))\n\n    model.add((Conv2D(filters,sizeoffilter1,activation=\"relu\")))\n    model.add((Conv2D(filters\/\/2,sizeoffilter2,activation=\"relu\")))\n    model.add((Conv2D(filters\/\/2,sizeoffilter2,activation=\"relu\")))\n    model.add(MaxPooling2D(pool_size=sizeofpool))\n    model.add(Dropout(0.2))\n\n    model.add((Conv2D(filters,sizeoffilter2,activation=\"relu\")))\n    model.add(MaxPooling2D(pool_size=sizeofpool))\n    model.add((Conv2D(filters\/\/2,sizeoffilter3,activation=\"relu\")))\n    model.add((Conv2D(filters\/\/2,sizeoffilter3,activation=\"relu\")))\n    model.add(MaxPooling2D(pool_size=sizeofpool))\n    model.add(Dropout(0.2))\n\n    model.add(Flatten())\n    model.add(Dense(node,activation=\"relu\"))\n    model.add(Dropout(0.2))\n    model.add(Dense(noOfclasses,activation=\"softmax\"))\n\n    model.compile(Adam(lr=0.001),loss=\"categorical_crossentropy\",metrics=['accuracy'])\n\n    return model\n\nmodel=model()","e956cd77":"model.summary()","b21473e9":"os.environ[\"CUDA_VISIBLE_DEVICES\"]=\"0\"","64debe77":"\nhistory = model.fit(X_train,Y_trainRosHot,epochs=50,validation_data =(X_validation,y_validation) ,batch_size=256,\n                    shuffle=True,\n                    max_queue_size=20,\n                    use_multiprocessing=True,\n                    workers=1,\n                   callbacks=[CustomCallback(fraction=0.9)])","37c08aa4":"plt.figure(1)\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.legend(['training','validation'])\nplt.title('Loss')\nplt.xlabel('epoch')\nplt.figure(2)\nplt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.legend(['training','validation'])\nplt.title('Accuracy')\nplt.xlabel('epoch')\nplt.show()\n","04d0053b":"score = model.evaluate(X_test,y_test,verbose=0)\nprint('Test Score = ',score[0])\nprint('Test Accuracy = ',score[1])","b9602397":"model.save('model5_3000trained100.model')","81c702bd":"model.save('model5_3000trained100.h5')","bfbb82b9":"#Spliting Data"}}