{"cell_type":{"3b7ae579":"code","140545ca":"code","18cb11c8":"code","d3a720d7":"code","5232516b":"code","70828d3d":"code","63a8184b":"code","b8dfa7c3":"code","ec272f4e":"code","3e5f7aba":"code","72f438e3":"code","56e920a8":"markdown","91969684":"markdown","8973bc25":"markdown","73da24fe":"markdown","db51cee1":"markdown","d2f2d3d0":"markdown","cf8a912c":"markdown","f95f27b1":"markdown","1cc28e45":"markdown","13012a6a":"markdown","b2d251f7":"markdown","388d07df":"markdown","32993020":"markdown","26948f53":"markdown","af1ec898":"markdown","b2f8bf87":"markdown","d99212a8":"markdown","a1edabc5":"markdown","3d6d5df3":"markdown","c6ec3063":"markdown","2de7a0d7":"markdown","e87db7c9":"markdown","60c25cdb":"markdown","0811fb80":"markdown","7848a170":"markdown","4e67e751":"markdown"},"source":{"3b7ae579":"#################################################################\n######################## Light Version ##########################\n#################################################################\n# - This installs a very light version of \ud83e\udd17 Transformers. \n# - In particular, no specific machine learning frameworks are installed. \n# - Since we\u2019ll be using a lot of different features of the library, \n#   we recommend installing the development version, which comes \n#   with all the required dependencies for pretty much \n#   any imaginable use case.\n# - Therefore we use transformers[sentencepiece] instead of transformers\n# - Note*: We use a -q argument to quiet the output that is displayed\n#################################################################\n# !pip install --upgrade transformers\n\n# Full Development Version\n!pip install -q --upgrade transformers[sentencepiece]\n\n# Install Flair NLP library - https:\/\/github.com\/flairNLP\/flair\n!pip install -q --upgrade flair","140545ca":"# Import the pipeline module from the transformers library\nfrom transformers import pipeline\n\n# Create a suitable pipeline for a given task. The currently accepted tasks are:\n#    - `\"audio-classification\"`\n#    - `\"automatic-speech-recognition\"`\n#    - `\"conversational\"`\n#    - `\"feature-extraction\"`\n#    - `\"fill-mask\"`\n#    - `\"image-classification\"`\n#    - `\"question-answering\"`\n#    - `\"table-question-answering\"`\n#    - `\"text2text-generation\"`\n#    - `\"text-classification\"`\n#    - `\"text-generation\"`\n#    - `\"token-classification\"`\n#    - `\"translation\"`\n#    - `\"translation_xx_to_yy\"`\n#    - `\"summarization\"`\n#    - `\"zero-shot-classification\"`\nclassifier = pipeline(\"sentiment-analysis\")\n\n# `call` the classifier for a positive and then a negative statement\nprint(\"\\n... INDIVIDUAL CALLS [POSITIVE FOLLOWED BY NEGATIVE] ...\\n\")\nprint('\\t', classifier(\"I've been waiting for a HuggingFace course my whole life.\"))\nprint('\\t', classifier(\"I hate this so much!\"))\n\n# `call` the classifier on a list containing the above two statements in a single call\nprint(\"\\n\\n... LIST CALL [POSITIVE FOLLOWED BY NEGATIVE] ...\\n\")\nprint('\\t', classifier([\n    \"I've been waiting for a HuggingFace course my whole life.\",\n    \"I hate this so much!\",\n]))","18cb11c8":"# No need to import the pipeline module as we have already done it above\ndef pretty_print_zero_shot(_classifier, _sequences, _candidate_labels):\n    \"\"\" Simple function to pretty print the output of zero shot classification \"\"\"\n    for k,v in classifier(\n        sequences=_sequences,\n        candidate_labels=_candidate_labels\n    ).items(): print(f\"\\t{k}:\\n\\t\\t--> {v}\")\n        \nexample_info = {\n    \"EXAMPLE 1\":{\n            \"sequences\":\"This is a course about the Transformers library\",\n            \"candidate_labels\":[\"education\", \"politics\", \"business\"],\n    }, \n    \"EXAMPLE 2\":{\n        \"sequences\":\"I don't have to work today. It's the weekend!\",\n        \"candidate_labels\":[\"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\", \"sunday\"],\n    }, \n    \"EXAMPLE 3\":{\n        \"sequences\":\"I hate when people celebrate hump day. Like, what's so special about today? It's just the middle of the week.\",\n        \"candidate_labels\":[\"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\", \"sunday\"],\n    }, \n    \"EXAMPLE 4\":{\n        \"sequences\":\"the lincoln memorial\",\n        \"candidate_labels\":[\"person\", \"place\", \"thing\"],\n    }, \n    \"EXAMPLE 5\":{\n        \"sequences\":\"2 + 2 =\",\n        \"candidate_labels\":[\"1\", \"2\", \"3\", \"4\", \"5\"],\n    }, \n    \"EXAMPLE 6\":{\n        \"sequences\":\"Hello, today I'm going to be talking about the majority of humans that own and operate cell phones on a daily basis.\",\n        \"candidate_labels\":[\"Lead\", \"Position\", \"Claim\", \"Counterclaim\", \"Rebuttal\", \"Evidence\", \"Concluding Statement\"],\n    }, \n    \"EXAMPLE 7\":{\n        \"sequences\":\"Chips and ice cream.\",\n        \"candidate_labels\":[\"Healthy Snack\", \"Unhealthy Snack\"],\n    }, \n    \"EXAMPLE 8\":{\n        \"sequences\":\"Celery and kale.\",\n        \"candidate_labels\":[\"Healthy Snack\", \"Unhealthy Snack\"],\n    }\n\n}\n\n# Instantiate the default zero-shot classifier\nclassifier = pipeline(\"zero-shot-classification\")\n\n# Loop over the examples above and pretty print the results\nfor ex_name,ex_map in example_info.items():\n    print(f\"\\n\\n\\n{ex_name}:\")\n    pretty_print_zero_shot(classifier, ex_map[\"sequences\"], ex_map[\"candidate_labels\"])","d3a720d7":"# No need to import the pipeline module as we have already done it above\n\n##########################\n# ?? ADD PRETTY PRINT ?? #\n##########################\n\n# Instantiate the default text-generation model\ngenerator = pipeline(\"text-generation\")\n\nprint(\"\\n\\n\\n\\n... EXAMPLE #1 ...\\n\")\noriginal_text = \"In this course, we will teach you how to\"\npred_text = generator(original_text, return_full_text=False, num_return_sequences=1)\nprint(f\"\\n===== Original Phrase =====\\n\\t--> {original_text} ... \")\nprint(f\"\\n----- Generated Text -----\\n\\t--> ...{pred_text[0]['generated_text']} ...\")\n\nprint(\"\\n\\n\\n\\n... EXAMPLE #2 ...\\n\")\noriginal_text = \"While Dumbledore began to climb the spiral staircase he motioned for Harry to follow\"\npred_text_seqs = generator(original_text,\n                             return_full_text=False, \n                             max_length=50, \n                             num_return_sequences=3)\nprint(f\"\\n===== Original Phrase =====\\n\\t--> {original_text} ... \")\nfor pred_text in pred_text_seqs:\n    print(f\"\\n----- Generated Text -----\\n\\t--> ...{pred_text['generated_text']} ...\")\n    \n    \nprint(\"\\n\\n\\n\\n... EXAMPLE #3 ...\\n\")\noriginal_text = \"Oh boy oh boy oh boy!\"\npred_text_seqs = generator(original_text,\n                             return_full_text=False, \n                             max_length=20, \n                             num_return_sequences=5)\nprint(f\"\\n===== Original Phrase =====\\n\\t--> {original_text} ... \")\nfor pred_text in pred_text_seqs:\n    print(f\"\\n----- Generated Text -----\\n\\t--> ...{pred_text['generated_text']} ...\")\n    \nprint(\"\\n\\n\\n\\n... EXAMPLE #4 ...\\n\")\noriginal_text = \"GPT thought God to be\"\npred_text_seqs = generator(original_text,\n                             return_full_text=False, \n                             max_length=100, \n                             num_return_sequences=5)\nprint(f\"\\n===== Original Phrase =====\\n\\t--> {original_text} ... \")\nfor pred_text in pred_text_seqs:\n    print(f\"\\n----- Generated Text -----\\n\\t--> ...{pred_text['generated_text']} ...\")\n    \nprint(\"\\n\\n\\n\\n... EXAMPLE #5 ...\\n\")\noriginal_text = \"Yeah, well, you know, that's just, like, your opinion, man.\"\npred_text_seqs = generator(original_text,\n                             return_full_text=False, \n                             max_length=100, \n                             num_return_sequences=5)\nprint(f\"\\n===== Original Phrase =====\\n\\t--> {original_text} ... \")\nfor pred_text in pred_text_seqs:\n    print(f\"\\n----- Generated Text -----\\n\\t--> ...{pred_text['generated_text']} ...\")","5232516b":"# Define the original text we will use as the seed for generation\noriginal_text = \"In this course, we will teach you how to\"\n\n# Default\nprint(\"\\n\\n\\n... DEFAULT MODEL (GPT2) EXAMPLE ...\\n\")\ngenerator = pipeline(\"text-generation\")\npred_text_seqs = generator(original_text,\n                             return_full_text=False, \n                             max_length=50, \n                             num_return_sequences=3)\nprint(f\"\\n===== Original Phrase =====\\n\\t--> {original_text} ... \")\nfor pred_text in pred_text_seqs:\n    print(f\"\\n----- Generated Text -----\\n\\t--> ...{pred_text['generated_text']} ...\")\n    \n\n\n# distilgpt2\nprint(\"\\n\\n\\n... DISTILGPT2 MODEL EXAMPLE ...\\n\")\ngenerator = pipeline(\"text-generation\", model=\"distilgpt2\")\npred_text_seqs = generator(original_text,\n                             return_full_text=False, \n                             max_length=50, \n                             num_return_sequences=3)\nprint(f\"\\n===== Original Phrase =====\\n\\t--> {original_text} ... \")\nfor pred_text in pred_text_seqs:\n    print(f\"\\n----- Generated Text -----\\n\\t--> ...{pred_text['generated_text']} ...\")\n    \n# distilgpt2 finetuned on wikipedia text\nprint(\"\\n\\n\\n... WIKI FINETUNED DISTILGPT2 MODEL EXAMPLE ...\\n\")\ngenerator = pipeline(\"text-generation\", model=\"rbhushan\/distilgpt2-finetuned-wikitext2\")\npred_text_seqs = generator(original_text,\n                             return_full_text=False, \n                             max_length=50, \n                             num_return_sequences=3)\nprint(f\"\\n===== Original Phrase =====\\n\\t--> {original_text} ... \")\nfor pred_text in pred_text_seqs:\n    print(f\"\\n----- Generated Text -----\\n\\t--> ...{pred_text['generated_text']} ...\")","70828d3d":"# No need to import the pipeline module as we have already done it above\n\n##########################\n# ?? ADD PRETTY PRINT ?? #\n##########################\n\n# Instantiate the default fill-mask model\nunmasker = pipeline(\"fill-mask\", model=\"bert-base-cased\")\nprint(\"\\n\\n\\n... EXAMPLE #1 - WITH BERT-BASE-CASED ...\")\ntry:\n    for k in unmasker(\"This course will teach you all about <mask> models.\", top_k=2): print(k)\nexcept:\n    print(\"This command raises an error because it can't find the [MASK] token...\\n\" \\\n          \"NOTE: this is a different token than the <mask> token we mentioned previously.\")\n\nunmasker = pipeline(\"fill-mask\")\nprint(\"\\n\\n\\n... EXAMPLE #1 - WITH DEFAULT MODEL ...\")\nfor k in unmasker(\"This course will teach you all about <mask> models.\", top_k=2): print(k)\n\nprint(\"\\n\\n\\n... EXAMPLE #2 ...\")\nfor k in unmasker(\"2+2=<mask>.\", top_k=2): print(k)\n    \nprint(\"\\n\\n\\n... EXAMPLE #3 ...\")\nfor k in unmasker(\"Vincent Van Gogh was a <mask>.\", top_k=2): print(k)\n\nprint(\"\\n\\n\\n... EXAMPLE #4 ...\")\nfor k in unmasker(\"Hugging Face engineers prefer to use the <mask> library when coding.\", top_k=2): print(k)\n    \nprint(\"\\n\\n\\n... EXAMPLE #5 ...\")\nfor k in unmasker(\"<mask> is one of the most devastating conditions known to man.\", top_k=2): print(k)\n    \nprint(\"\\n\\n\\n... EXAMPLE #6 ...\")\nfor k in unmasker(\"a b c d e f g <mask> i j k l m n o p q r s t u v w x y z\", top_k=2): print(k)\n    \nprint(\"\\n\\n\\n... EXAMPLE #7 ...\")\nfor k in unmasker(\"1 1 2 3 5 8 13 <mask> 34 55\", top_k=2): print(k)\n    \nprint(\"\\n\\n\\n... EXAMPLE #8 ...\")\nfor k in unmasker(\"The best and most beautiful things in the world cannot be seen or even touched \u2014 they must be felt with the <mask>. -Helen Keller\", top_k=2): print(k)","63a8184b":"# No need to import the pipeline module as we have already done it above\n# however we do import displacy from the spacy library to assist with visualization\n# we also import matplotlib to help us with colours for ner\nfrom spacy import displacy\nimport matplotlib\nimport matplotlib.pyplot as plt\n\n# Get discrete colour map with good colour distinction to match entities from our pos tagging model\nner_colors = {\n    \"CC\": 1, \"CD\": 2, \"DT\": 3, \"EX\": 4, \"FW\": 5, \"IN\": 6, \"JJ\": 7, \"JJR\": 8, \"JJS\": 9, \"MD\": 10, \"NN\": 11, \"NNP\": 12, \n    \"NNPS\": 13, \"NNS\": 14, \"O\": 0, \"PDT\": 15, \"POS\": 16, \"PRP\": 17, \"RB\": 18, \"RBR\": 19, \"RBS\": 20, \"RP\": 21, \"SYM\": 22,\n    \"TO\": 23, \"UH\": 24, \"VB\": 25, \"VBD\": 26, \"VBG\": 27, \"VBN\": 28, \"VBP\": 29, \"VBZ\": 30, \"WDT\": 31, \"WP\": 32, \"WRB\": 33\n}\ncmap = plt.cm.get_cmap('rainbow', len(ner_colors))\nner_colors = {k:matplotlib.colors.rgb2hex(cmap(v-1)) for k,v in ner_colors.items()}\n\n##########################\n# ?? ADD PRETTY PRINT ?? #\n##########################\ndef convert_hf_to_displacy_format(hf_pred, _original_text, _title=None):\n    \"\"\" Function to convert prediction to the displacy specific format \"\"\"\n    return [dict(\n        text=_original_text, \n        ents=[{\n            \"start\":ent[\"start\"], \n            \"end\":ent[\"end\"], \n            \"label\":ent[\"entity_group\"], \n            \"score\":ent[\"score\"]} for ent in hf_pred], \n        title=_title\n    ),]\n    \n# Instantiate the default Named-Entity-Recognition model\n#      --> dbmdz\/bert-large-cased-finetuned-conll03-english\nner_1 = pipeline(\"ner\", grouped_entities=True)\n\n# Instantiate a different Named-Entity-Recognition model\n#      --> mrm8488\/mobilebert-finetuned-pos\nner_2 = pipeline(\"ner\", model=\"mrm8488\/mobilebert-finetuned-pos\", grouped_entities=True)\n\nprint(\"\\n\\n... EXAMPLE #1 WITH DEFAULT MODEL ...\")\noriginal_text = \"My name is Sylvain and I work at Hugging Face in Brooklyn.\"\nner_pred = ner_1(original_text)\ndisplacy.render(convert_hf_to_displacy_format(ner_pred, original_text), style=\"ent\", manual=True)\n\nprint(\"\\n\\n... EXAMPLE #1 WITH FLAIR POS MODEL ...\")\nner_pred = ner_2(original_text)\ndisplacy.render(convert_hf_to_displacy_format(ner_pred, original_text), style=\"ent\", manual=True, options = {\"colors\": ner_colors})\n\n\nprint(\"\\n\\n\\n\\n... EXAMPLE #2 WITH DEFAULT MODEL...\")\noriginal_text =  \\\n    \"\"\" \n        Italy, officially the Italian Republic is a country consisting of a peninsula \n        delimited by the Alps and several islands surrounding it, whose territory \n        largely coincides with the homonymous geographical region. Italy is located \n        in the centre of the Mediterranean Sea, in Southern Europe; it is \n        also considered part of Western Europe. A unitary parliamentary republic \n        with Rome as its capital and largest city. The country covers a total area of \n        301,340 km2 (116,350 sq mi) and shares land borders with France, Switzerland, \n        Austria, Slovenia, as well as the enclaved microstates of Vatican City and San \n        Marino. Italy has a territorial exclave in Switzerland (Campione) and a maritime \n        exclave in Tunisian waters (Lampedusa). With around 60 million inhabitants, \n        Italy is the third-most populous member state of the European Union.\n    \"\"\"\nner_pred = ner_1(original_text)\ndisplacy.render(convert_hf_to_displacy_format(ner_pred, original_text), style=\"ent\", manual=True)\n\nprint(\"\\n\\n... EXAMPLE #2 WITH FLAIR POS MODEL ...\")\nner_pred = ner_2(original_text)\ndisplacy.render(convert_hf_to_displacy_format(ner_pred, original_text), style=\"ent\", manual=True, options = {\"colors\": ner_colors})","b8dfa7c3":"# No need to import the pipeline module as we have already done it above\n\ndef pretty_print_qa(_model, _questions, _context, show_context=True):\n    \"\"\" Simple function to pretty print the output of QA model \"\"\"\n    \n    # Coerce if necessary\n    if type(_questions)!=list: _questions=[_questions]\n        \n    # Show context if required\n    if show_context:\n        print(f\"\\n{'-'*100}\\nCONTEXT:\\n{'-'*100}\\n{_context}\\n{'-'*100}\")\n    \n    # Print QA\n    for i, _q in enumerate(_questions):\n        _a = _model(question=_q, context=_context )\n        print(f\"\\n\\tQUESTION #{i+1}: {_q}\")\n        print(f\"\\t\\tANSWER:\\t--> {_a['answer']}\")\n        print(f\"\\t\\tSCORE:\\t--> {_a['score']}\")\n\n# Instantiate the default question answering model\nquestion_answerer = pipeline(\"question-answering\")\n\n# Basic Example\nprint(\"\\n\\n\\n... EXAMPLE #1 ...\")\ncontext_text  = \"My name is Sylvain and I work at Hugging Face in Brooklyn\"\nquestion_text = \"Where do I work?\"\npretty_print_qa(question_answerer, question_text, context_text)\n\n# Example from Italy wikipedia. I'd say this is an example of simple QA\nprint(\"\\n\\n\\n\\n... EXAMPLE #2 ...\")\ncontext_text = \\\n    \"\"\"\n        Italy, officially the Italian Republic is a country consisting of a peninsula \n        delimited by the Alps and several islands surrounding it,[15] whose territory \n        largely coincides with the homonymous geographical region.[16] Italy is located \n        in the centre of the Mediterranean Sea, in Southern Europe;[17][18][19] it is \n        also considered part of Western Europe.[20][21] A unitary parliamentary republic \n        with Rome as its capital and largest city, the country covers a total area of \n        301,340 km2 (116,350 sq mi) and shares land borders with France, Switzerland, \n        Austria, Slovenia, as well as the enclaved microstates of Vatican City and San \n        Marino. Italy has a territorial exclave in Switzerland (Campione) and a maritime \n        exclave in Tunisian waters (Lampedusa). With around 60 million inhabitants, \n        Italy is the third-most populous member state of the European Union.\n    \"\"\"\nquestion_text = [\"Where is Italy located?\", \n                 \"What is the largest city in Italy?\", \n                 \"What is the most populous EU member state?\", \n                 \"What countries border Italy?\", \n                 \"How large is Italy?\", \n                 \"How large is Italy in Miles?\", \n                 \"What continent is Italy located within?\",\n                 \"Is Italy a country or state?\",\n                 \"What is the relationship between the enclaved microstates of Vatican City and Italy?\",\n                 \"What mountain range is close to Italy?\"]\npretty_print_qa(question_answerer, question_text, context_text)\n\n# Example from hard reading comprehension test - hard example\nprint(\"\\n\\n\\n\\n... EXAMPLE #3 ...\")\ncontext_text = \\\n    \"\"\"\n        'Strange Bedfellows!' lamented the title of a recent letter to Museum News, in which a certain\n        Harriet Sherman excoriated the National Gallery of Art in Washington for its handling of \n        200,000 tickets to the much-ballyhooed \u201cVan Gogh\u2019s van Goghs\u201d exhibit. A huge proportion \n        of the free tickets were snatched up by the opportunists in the dead of winter, who \n        then scalped those tickets at $85 apiece to less hardy connoiseurs. \n        Yet, Sherman\u2019s bedfellows are far from strange. Art, despite its religious and magical \n        origins, very soon became a commercial venture. From bourgeois patrons funding art they \n        barely understood in order to share their protegee\u2019s prestige, to museum curators \n        stage-managing the cult of artists in order to enhance the market value of museum \n        holdings, entrepreneurs have found validation and profit in big-name art. Speculators, \n        thieves, and promoters long ago created and fed a market where cultural icons could \n        be traded like commodities. This trend toward commodification of high-brow art took \n        an ominous, if predictable, turn in the 1980s during the Japanese 'bubble economy.' \n        At a time when Japanese share prices more than doubled, individual tycoons and industrial \n        giants alike invested record amounts in some of the West\u2019s greatest masterpieces. \n        Ryoei Saito, for example, purchased van Gogh\u2019s Portrait of Dr. Gachet for a record-breaking \n        $82.5 million. The work, then on loan to the Metropolitan Museum of Modern Art, suddenly \n        vanished from the public domain. Later learning that he owed the Japanese government $24 \n        million in taxes, Saito remarked that he would have the paining cremated with him to spare \n        his heirs the inheritance tax. This statement, which he later dismissed as a joke, alarmed \n        and enraged many. A representative of the Van Gogh museum, conceding that he had no legal \n        redress, made an ethical appeal to Mr. Saito, asserting, 'a work of art remains the \n        possession of the world at large'. Ethical appeals notwithstanding, great art will increasingly \n        devolve into big business. Firstly, great art can only be certified by its market value. \n        Moreover, the 'world at large' hasn\u2019t the means of acquisition. Only one museum currently \n        has the funding to contend for the best pieces\u2013the J. Paul Getty Museum, founded by the \n        billionaire oilman. The art may disappear into private hands, but its transfer will \n        disseminate once static fortunes into the hands of various investors, collectors, and \n        occasionally the artist.\n    \"\"\"\n\nquestion_text = [\"What is the main idea being communicated by this passage?\", \n                 \"Which museum might be able to afford to keep or obtain top art pieces?\",\n                 \"What famous artist does this article reference?\",\n                 \"What painting is referenced in this article?\",\n                 \"How much did Ryoei pay for Van Gogh's portrait of Dr. Gachet?\",\n                 \"What did Saito joke about?\",\n                 \"Why would Saito cremate a painting?\",\n                 \"Which group of people does the author of this article like the least?\"]\npretty_print_qa(question_answerer, question_text, context_text)","ec272f4e":"# No need to import the pipeline module as we have already done it above\ndef pretty_print_summary(_model, _text, show_text=True, **kwargs):\n    \"\"\" Simple function to pretty print the output of QA model \"\"\"\n    summary = _model(_text, **kwargs)[0][\"summary_text\"]\n    if show_text:\n        print(f\"\"\"\\n{'-'*100}\\nORIGINAL TEXT:\\n{'-'*100}\\n{_text}\\n{'-'*100}\"\"\")\n    print(f\"\"\"\\n{'-'*100}\\nSUMMARY TEXT:\\n{'-'*100}\\n{summary}\\n{'-'*100}\"\"\")\n\n# As we want to see the differences between extractive and abstractive\n# summarization we will instantiate two models\n#    - An abstractive summarizer --> Google's Pegasus Model\n#    - An extractive summarizer --> The Default HF Model (DistilBart)\nabstractive_summarizer = pipeline(\"summarization\", model=\"google\/pegasus-xsum\")\nextractive_summarizer = pipeline(\"summarization\")\n\ntext = \\\n    \"\"\"\n    America has changed dramatically during recent years. Not only has the number of \n    graduates in traditional engineering disciplines such as mechanical, civil, \n    electrical, chemical, and aeronautical engineering declined, but in most of \n    the premier American universities engineering curricula now concentrate on \n    and encourage largely the study of engineering science. As a result, there \n    are declining offerings in engineering subjects dealing with infrastructure, \n    the environment, and related issues, and greater concentration on high \n    technology subjects, largely supporting increasingly complex scientific \n    developments. While the latter is important, it should not be at the expense \n    of more traditional engineering.\n\n    Rapidly developing economies such as China and India, as well as other \n    industrial countries in Europe and Asia, continue to encourage and advance \n    the teaching of engineering. Both China and India, respectively, graduate \n    six and eight times as many traditional engineers as does the United States. \n    Other industrial countries at minimum maintain their output, while America \n    suffers an increasingly serious decline in the number of engineering graduates \n    and a lack of well-educated engineers.\n    \"\"\"\n\n# We don't include a 'short' answer as it will just be a truncated version of the default.\nprint(\"\\n\\n\\n... EXTRACTIVE MODEL - EXAMPLE #1 - DEFAULT ANSWER ...\")\npretty_print_summary(extractive_summarizer, text, show_text=True)\nprint(\"\\n\\n\\n... EXTRACTIVE MODEL - EXAMPLE #1 - LONG ANSWER ...\")\npretty_print_summary(extractive_summarizer, text, show_text=True, min_length=40, max_length=160)\nprint(\"\\n\\n... ABSTRACTIVE MODEL - EXAMPLE #1 - DEFAULT ANSWER ...\")\npretty_print_summary(abstractive_summarizer, text, show_text=True)\nprint(\"\\n\\n... ABSTRACTIVE MODEL - EXAMPLE #1 - LONG ANSWER ...\")\npretty_print_summary(abstractive_summarizer, text, show_text=True, min_length=40, max_length=160)\n\n\ntext = \\\n    \"\"\"\n        'Strange Bedfellows!' lamented the title of a recent letter to Museum News, in which a certain\n        Harriet Sherman excoriated the National Gallery of Art in Washington for its handling of \n        200,000 tickets to the much-ballyhooed \u201cVan Gogh\u2019s van Goghs\u201d exhibit. A huge proportion \n        of the free tickets were snatched up by the opportunists in the dead of winter, who \n        then scalped those tickets at $85 apiece to less hardy connoiseurs. \n        \n        Yet, Sherman\u2019s bedfellows are far from strange. Art, despite its religious and magical \n        origins, very soon became a commercial venture. From bourgeois patrons funding art they \n        barely understood in order to share their protegee\u2019s prestige, to museum curators \n        stage-managing the cult of artists in order to enhance the market value of museum \n        holdings, entrepreneurs have found validation and profit in big-name art. Speculators, \n        thieves, and promoters long ago created and fed a market where cultural icons could \n        be traded like commodities. This trend toward commodification of high-brow art took \n        an ominous, if predictable, turn in the 1980s during the Japanese 'bubble economy.' \n        At a time when Japanese share prices more than doubled, individual tycoons and industrial \n        giants alike invested record amounts in some of the West\u2019s greatest masterpieces. \n        \n        Ryoei Saito, for example, purchased van Gogh\u2019s Portrait of Dr. Gachet for a record-breaking \n        $82.5 million. The work, then on loan to the Metropolitan Museum of Modern Art, suddenly \n        vanished from the public domain. Later learning that he owed the Japanese government $24 \n        million in taxes, Saito remarked that he would have the paining cremated with him to spare \n        his heirs the inheritance tax. This statement, which he later dismissed as a joke, alarmed \n        and enraged many. A representative of the Van Gogh museum, conceding that he had no legal \n        redress, made an ethical appeal to Mr. Saito, asserting, 'a work of art remains the \n        possession of the world at large'. \n        \n        Ethical appeals notwithstanding, great art will increasingly devolve into big business. \n        Firstly, great art can only be certified by its market value. Moreover, the 'world at \n        large' hasn\u2019t the means of acquisition. Only one museum currently has the funding to \n        contend for the best pieces\u2013the J. Paul Getty Museum, founded by the billionaire oilman. \n        The art may disappear into private hands, but its transfer will disseminate once static \n        fortunes into the hands of various investors, collectors, and occasionally the artist.\n    \"\"\"\n\nprint(\"\\n\\n\\n... EXTRACTIVE MODEL - EXAMPLE #2 - DEFAULT ANSWER ...\")\npretty_print_summary(extractive_summarizer, text, show_text=True)\nprint(\"\\n\\n\\n... EXTRACTIVE MODEL - EXAMPLE #2 - LONG ANSWER ...\")\npretty_print_summary(extractive_summarizer, text, show_text=True, min_length=40, max_length=160)\nprint(\"\\n\\n... ABSTRACTIVE MODEL - EXAMPLE #2 - DEFAULT ANSWER ...\")\npretty_print_summary(abstractive_summarizer, text, show_text=True)\nprint(\"\\n\\n... ABSTRACTIVE MODEL - EXAMPLE #2 - LONG ANSWER ...\")\npretty_print_summary(abstractive_summarizer, text, show_text=True, min_length=40, max_length=160)\n\n\ntext = \\\n    \"\"\"\n        The painter Roy Lichtenstein helped to define pop art\u2014the movement that incorporated commonplace \n        objects and commercial-art techniques into paintings\u2014by paraphrasing the style of comic books in \n        his work. His merger of a popular genre with the forms and intentions of fine art generated a \n        complex result: while poking fun at the pretensions of the art world, Lichtenstein\u2019s work also \n        managed to convey a seriousness of theme that enabled it to transcend mere parody.\n        \n        That Lichtenstein\u2019s images were fine art was at first difficult to see, because, with their word \n        balloons and highly stylized figures, they looked like nothing more than the comic book panels \n        from which they were copied. Standard art history holds that pop art emerged as an impersonal \n        alternative to the histrionics of abstract expressionism, a movement in which painters conveyed \n        their private attitudes and emotions using nonrepresentational techniques. The truth is that by the \n        time pop art first appeared in the early 1960s, abstract expressionism had already lost much of its \n        force. Pop art painters weren\u2019t quarreling with the powerful early abstract expressionist work of the \n        late 1940s but with a second generation of abstract expressionists whose work seemed airy, high-minded, \n        and overly lyrical. Pop art paintings were full of simple black lines and large areas of primary color. \n        Lichtenstein\u2019s work was part of a general rebellion against the fading emotional power of abstract \n        expressionism, rather than an aloof attempt to ignore it.\n        \n        But if rebellion against previous art by means of the careful imitation of a popular genre were all \n        that characterized Lichtenstein\u2019s work, it would possess only the reflective power that parodies have \n        in relation to their subjects. Beneath its cartoonish methods, his work displayed an impulse toward \n        realism, an urge to say that what was missing from contemporary painting was the depiction of contemporary \n        life. The stilted romances and war stories portrayed in the comic books on which he based his canvases, \n        the stylized automobiles, hot dogs, and table lamps that appeared in his pictures, were reflections of the \n        culture Lichtenstein inhabited. But, in contrast to some pop art, Lichtenstein\u2019s work exuded not a jaded \n        cynicism about consumer culture, but a kind of deliberate naivet\u00e9, intended as a response to the excess \n        of sophistication he observed not only in the later abstract expressionists but in some other pop artists. \n        With the comics\u2014typically the domain of youth and innocence\u2014as his reference point, a nostalgia fills his \n        paintings that gives them, for all their surface bravado, an inner sweetness. \n    \"\"\"\n\nprint(\"\\n\\n\\n... EXTRACTIVE MODEL - EXAMPLE #3 - DEFAULT ANSWER ...\")\npretty_print_summary(extractive_summarizer, text, show_text=True)\nprint(\"\\n\\n\\n... EXTRACTIVE MODEL - EXAMPLE #3 - LONG ANSWER ...\")\npretty_print_summary(extractive_summarizer, text, show_text=True, min_length=40, max_length=160)\nprint(\"\\n\\n... ABSTRACTIVE MODEL - EXAMPLE #3 - DEFAULT ANSWER ...\")\npretty_print_summary(abstractive_summarizer, text, show_text=True)\nprint(\"\\n\\n... ABSTRACTIVE MODEL - EXAMPLE #3 - LONG ANSWER ...\")\npretty_print_summary(abstractive_summarizer, text, show_text=True, min_length=40, max_length=160)\n","3e5f7aba":"# No need to import the pipeline module as we have already done it above\n\n# Instantiate our translater (a french to english translation model)\ntranslator = pipeline(\"translation\", model=\"Helsinki-NLP\/opus-mt-fr-en\")\n\nprint(\"\\n\\n\\n... TRANSLATION - EXAMPLE #1 ...\")\nfr_text = \"Ce cours est produit par Hugging Face.\"\nen_text = translator(fr_text)[0][\"translation_text\"]\nprint(f\"\\tFRENCH --> '{fr_text}'\\n\\tENGLISH  --> '{en_text}'\")\n\nprint(\"\\n\\n\\n... TRANSLATION - EXAMPLE #2 ...\")\nfr_text = \\\n    \"\"\"\n            VOLTAIRE, pseudonyme de Fran\u00e7ois-Marie Arouet (1694-1778), romancier, historien, po\u00e8te, \n            dramaturge et pol\u00e9miste. Voltaire fut le g\u00e9nie universel des Lumi\u00e8res et une des figures \n            principales des cercles parisiens de la libre pens\u00e9e. Originaire d'un milieu bourgeois, \n            son p\u00e8re \u00e9tait notaire, il fait de brillantes \u00e9tudes chez les j\u00e9suites de Louis-Le-Grand. \n            Des vers irr\u00e9v\u00e9rencieux l'obligent \u00e0 rester en province, puis provoquent son incarc\u00e9ration \n            \u00e0 la Bastille (1717).\n    \"\"\"\nen_text = translator(fr_text)[0][\"translation_text\"]\nen_text = \\\n    f\"\"\"\n            {' '.join(en_text.split()[:12])}\n            {' '.join(en_text.split()[12:24])}\n            {' '.join(en_text.split()[24:36])}\n            {' '.join(en_text.split()[36:48])}\n            {' '.join(en_text.split()[48:60])}\n            {' '.join(en_text.split()[60:72])}\n    \"\"\"\nprint(f\"\\tFRENCH--> {fr_text}\\n\\tENGLISH  --> {en_text}\")","72f438e3":"unmasker = pipeline(\"fill-mask\", model=\"bert-base-uncased\")\n\nresult = unmasker(\"This man works as a [MASK].\")\nprint([r[\"token_str\"] for r in result])\n\nresult = unmasker(\"This woman works as a [MASK].\")\nprint([r[\"token_str\"] for r in result])","56e920a8":"<a id=\"1_8\"><\/a>\n\n<br><h3 style=\"font-family: Georgia; font-size: 20px; font-style: normal; font-weight: normal; text-decoration: none; text-transform: none; letter-spacing: 2px; color: black; background-color: #ffffff;\">1.8 BIAS AND LIMITATIONS&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"#chapter_1\">&#10514;<\/a><\/h3>\n\n---\n\n<p style=\"font-family: Georgia;\">If your intent is to use a pretrained model or a fine-tuned version in production, please be aware that, while these models are powerful tools, they come with limitations. The biggest of these is that, to enable pretraining on large amounts of data, researchers often scrape all the content they can find, taking the best as well as the worst of what is available on the internet.<\/p>\n\n<p style=\"font-family: Georgia;\">To give a quick illustration, let\u2019s go back the example of a <b><code>fill-mask<\/code><\/b> pipeline with the <b>BERT<\/b> model:<\/p>\n\n<p style=\"font-family: Georgia;\">*[Below], when asked to fill in the missing word in the two provided sentences, the model gives only one gender-free answer (waiter\/waitress). The others are work occupations usually associated with one specific gender <b>\u2014 and yes, prostitute ended up in the top 5 possibilities the model associates with \u201cwoman\u201d and \u201cwork.\u201d<\/b> This happens even though <b>BERT<\/b> is one of the rare Transformer models not built by scraping data from all over the internet, but rather using apparently neutral data (it\u2019s trained on the <a href=\"https:\/\/huggingface.co\/datasets\/wikipedia\"><b>English Wikipedia<\/b><\/a> and <b><a href=\"https:\/\/huggingface.co\/datasets\/bookcorpus\">BookCorpus<\/a><\/b> datasets).\n\nWhen you use the tools [below and pretty much any tool in your data science arsenal], you need to keep in the back of your mind that the original <b>model you are using could very easily generate sexist, racist, or homophobic content<\/b>. Fine-tuning the model on your data won\u2019t make this intrinsic bias disappear.","91969684":"<br><b style=\"font-family: Georgia; text-decoration: underline; font-size: 15px;\">FILL MASK<\/b>\n<p style=\"font-family: Georgia; font-size: 8px; color:dark-red;\">Text description below comes from this <a href=\"https:\/\/www.machinecurve.com\/index.php\/2021\/03\/02\/easy-masked-language-modeling-with-machine-learning-and-huggingface-transformers\/\" style=\"font-weight: bold;\">blog-post\/tutorial<\/a> and the course content.<\/p><br>\n\n<p style=\"font-family: Georgia;\">The next pipeline you\u2019ll try is fill-mask. The idea of this task is to fill in the blanks in a given text. The <b><code>top_k<\/code><\/b> argument controls how many possibilities you want to be displayed. Note that here the model fills in the special <b><code>&lt;mask><\/code><\/b> word, which is often referred to as a mask token. Other mask-filling models might have different mask tokens, so it\u2019s always good to verify the proper mask word when exploring other models. One way to check it is by looking at the mask word used in the widget.<\/p>\n\n<center><div class=\"alert alert-block alert-success\" style=\"margin: 2em; line-height: 1.5em; font-family: Georgia; font-size: 12px; \">\n    <br><b>\u270f\ufe0f&nbsp;&nbsp;<b style=\"color: black;\">TRY IT OUT!<\/b>&nbsp;&nbsp;&nbsp;&nbsp; Search for the <code>bert-base-cased<\/code> model on the <a href=\"https:\/\/huggingface.co\/models\" style=\"font-weight: bold;\">Hub<\/a> and identify its mask word in the Inference API widget. What does this model predict for the sentence in our pipeline example above?<\/b><br><br>\n<\/div><\/center>\n\n<p style=\"font-family: Georgia;\">Masked Language Modeling (MLM) is a language task very common in Transformer architectures today. It involves masking part of the input, then [teaching] a model to predict the missing tokens \u2013 essentially reconstructing the non-masked input. MLM is often used within pretraining tasks, to give models the opportunity to learn textual patterns from unlabeled data.<\/p>\n\n<p style=\"font-family: Georgia;\">Downstream tasks can benefit from models pretrained on MLM too. Suppose that you are faced with the task of reconstructing the contents of partially destroyed documents.<\/p>\n\n<p style=\"font-family: Georgia;\">Take the example [...] ---> <b>\u201cI am <span style=\"color: blue\">&lt;mask><\/span> to the bakery\u201d.<\/b><\/p><ul style=\"font-family: Georgia;\"><li><p style=\"font-family: Georgia;\"><b style=\"color:blue;\">\"going\"<\/b> is the expected missing value here<\/li><\/ul><\/p>\n\n<center><div class=\"alert alert-block alert-success\" style=\"margin: 2em; line-height: 1.5em; font-family: Georgia; font-size: 12px; \">\n    <br><b>\u270f\ufe0f&nbsp;&nbsp;<b style=\"color: black;\">TRY IT OUT!<\/b>&nbsp;&nbsp;&nbsp;&nbsp; Use the <code>top_k<\/code> argument to generate however many examples you want to fill in the blanks<\/b><br><br>\n<\/div><\/center>","8973bc25":"<br><b style=\"font-family: Georgia; text-decoration: underline; font-size: 15px;\">QUESTION ANSWERING<\/b>\n<p style=\"font-family: Georgia; font-size: 8px; color:dark-red;\">Text description below comes from this <a href=\"https:\/\/www.wikiwand.com\/en\/Question_answering\" style=\"font-weight: bold;\">blog-post\/tutorial<\/a> and the course content<\/p><br>\n\n<p style=\"font-family: Georgia;\">Question answering (QA) is a computer science discipline within the fields of information retrieval and natural language processing (NLP), which is concerned with building systems that automatically answer questions posed by humans in a natural language. The question-answering pipeline answers questions using information from a given context:Note that this pipeline works by extracting information from the provided context; it does not generate the answer.<\/p>","73da24fe":"<br><b style=\"font-family: Georgia; text-decoration: underline; font-size: 15px;\">TEXT GENERATION<\/b>\n\n<p style=\"font-family: Georgia;\">Now let\u2019s see how to use a pipeline to generate some text. The main idea here is that you provide a prompt and the model will auto-complete it by generating the remaining text. This is similar to the predictive text feature that is found on many phones. Text generation involves randomness, so it\u2019s normal if you don\u2019t get the same results as shown below.<\/p>\n\n<p style=\"font-family: Georgia;\"> You can control how many different sequences are generated with the argument <b><code>num_return_sequences<\/code><\/b> and the total length of the output text with the argument <b><code>max_length<\/code><\/b>.<\/p>\n\n<center><div class=\"alert alert-block alert-success\" style=\"margin: 2em; line-height: 1.5em; font-family: Georgia; font-size: 12px; \">\n    <br><b>\u270f\ufe0f&nbsp;&nbsp;<b style=\"color: black;\">TRY IT OUT!<\/b>&nbsp;&nbsp;&nbsp;&nbsp; Use the <code>num_return_sequences<\/code> and <code>max_length<\/code> arguments to *experiment.<\/b><br><br>\n<\/div><\/center>","db51cee1":"<a id=\"1_7\"><\/a>\n\n<br><h3 style=\"font-family: Georgia; font-size: 20px; font-style: normal; font-weight: normal; text-decoration: none; text-transform: none; letter-spacing: 2px; color: black; background-color: #ffffff;\">1.7 SEQUENCE-TO-SEQUENCE MODELS&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"#chapter_1\">&#10514;<\/a><\/h3>\n\n---\n\n- <a href=\"https:\/\/youtu.be\/0_4KEb08xrE\" style=\"font-family: Georgia; color: darkred; font-weight: bold;\">VIDEO LINK - SEQUENCE-TO-SEQUENCE TRANSFORMERS - HUGGING FACE CHANNEL<\/a><br>\n\n<p style=\"font-family: Georgia;\">Encoder-decoder models (also called <b><i>sequence-to-sequence<\/i><\/b> models) use both parts of the Transformer architecture. At each stage, the attention layers of the encoder can access all the words in the initial sentence, whereas the attention layers of the decoder can only access the words positioned before a given word in the input.<\/p>\n\n<p style=\"font-family: Georgia;\">The pretraining of these models can be done using the objectives of encoder or decoder models, but usually involves something a bit more complex. For instance, <a href=\"https:\/\/huggingface.co\/t5-base\"><b>T5<\/b><\/a> is pretrained by replacing random spans of text (that can contain several words) with a single mask special word, and the objective is then to predict the text that this mask word replaces.<\/p>\n\n<p style=\"font-family: Georgia;\">Sequence-to-sequence models are best suited for tasks revolving around generating new sentences depending on a given input, such as summarization, translation, or generative question answering.<\/p>\n\n<p style=\"font-family: Georgia;\"><b>Representatives of this family of models include:<\/b><\/p>\n\n<ul style=\"font-family: Georgia;\">\n    <li>\n        <b><a href=\"https:\/\/huggingface.co\/transformers\/model_doc\/bart.html\">BART<\/a><\/b>\n    <\/li>\n    <li>\n        <b><a href=\"https:\/\/huggingface.co\/transformers\/model_doc\/mbart.html\">mBART<\/a><\/b>\n    <\/li>\n    <li>\n        <b><a href=\"https:\/\/huggingface.co\/transformers\/model_doc\/marian.html\">Marian<\/a><\/b>\n    <\/li>\n    <li>\n        <b><a href=\"https:\/\/huggingface.co\/transformers\/model_doc\/t5.html\">T5<\/a><\/b>\n    <\/li>\n<\/ul>","d2f2d3d0":"<a id=\"0_2\"><\/a>\n\n<h3 style=\"font-family: Georgia; font-size: 20px; font-style: normal; font-weight: normal; text-decoration: none; text-transform: none; letter-spacing: 2px; color: black; background-color: #ffffff;\">0.2 PIP INSTALLS&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"#chapter_0\">&#10514;<\/a><\/h3>\n\n---\n\n<p style=\"font-family: Georgia;\">The next step is to install the libraries that we\u2019ll be using in this course. We\u2019ll use <b><code>pip<\/code><\/b> for the installation, which is the package manager for Python. In notebooks, you can run system commands by preceding them with the <b><code>!<\/code><\/b> character, so you can install the \ud83e\udd17 Transformers library as follows:<\/p>","cf8a912c":"<br><b style=\"font-family: Georgia; text-decoration: underline; font-size: 15px;\">USING ANY MODEL FROM THE HUB IN A PIPELINE<\/b>\n\n<p style=\"font-family: Georgia;\">The previous examples used the default model for the task at hand, but you can also choose a particular model from the Hub to use in a pipeline for a specific task \u2014 say, text generation. Go to the <a href=\"https:\/\/huggingface.co\/models\" style=\"font-weight: bold;\">Model Hub<\/a> and click on the corresponding tag on the left to display only the supported models for that task. You should get to a page like <a href=\"https:\/\/huggingface.co\/models?pipeline_tag=text-generation\" style=\"font-weight: bold;\">this one.<\/a><\/p>\n\n<p style=\"font-family: Georgia;\">Let\u2019s try the <a href=\"https:\/\/huggingface.co\/distilgpt2\"><code style=\"font-weight: bold;\">distilgpt2<\/code><\/a> model! Here\u2019s how to load it in the same pipeline as before:<\/p>","f95f27b1":"<a id=\"1_3\"><\/a>\n\n<h3 style=\"font-family: Georgia; font-size: 20px; font-style: normal; font-weight: normal; text-decoration: none; text-transform: none; letter-spacing: 2px; color: black; background-color: #ffffff;\">1.3 HOW DO TRANSFORMERS WORK?&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"#chapter_1\">&#10514;<\/a><\/h3>\n\n---\n\n<p style=\"font-family: Georgia;\">In this section, we will take a high-level look at the architecture of Transformer models.<\/p><br>\n\n<b style=\"font-family: Georgia; text-decoration: underline; text-transform: uppercase; font-size: 15px;\">A bit of Transformer history<\/b>\n\n<p style=\"font-family: Georgia;\">Here are some reference points in the (short) history of Transformer models:<\/p><br>\n\n<center><img src=\"https:\/\/huggingface.co\/course\/static\/chapter1\/transformers_chrono.png\" width=95%><\/center><br>\n\n<p style=\"font-family: Georgia;\">The <a href=\"https:\/\/arxiv.org\/abs\/1706.03762\"><b>Transformer Architecture<\/b><\/a> was introduced in June 2017. The focus of the original research was on translation tasks. This was followed by the introduction of several influential models, including:<\/p>\n\n<ul style=\"font-family: Georgia;\">\n    <li>\n        <b>June 2018: <a href=\"https:\/\/cdn.openai.com\/research-covers\/language-unsupervised\/language_understanding_paper.pdf\">GPT<\/a><\/b>, the first pretrained Transformer model, used for fine-tuning on various NLP tasks and obtained state-of-the-art results\n    <\/li>\n    <li>\n        <b>October 2018: <a href=\"https:\/\/arxiv.org\/abs\/1810.04805\">BERT<\/a><\/b>, another large pretrained model, this one designed to produce better summaries of sentences (more on this in the <a href=\"https:\/\/www.kaggle.com\/dschettler8845\/transformers-course-chapter-2-tf-torch\"><b>next chapter!<\/b><\/a>)\n    <\/li>\n    <li>\n        <b>February 2019: <a href=\"https:\/\/cdn.openai.com\/better-language-models\/language_models_are_unsupervised_multitask_learners.pdf\">GPT-2<\/a><\/b>, an improved (and bigger) version of GPT that was not immediately publicly released due to ethical concerns\n    <\/li>\n    <li>\n        <b>October 2019: <a href=\"https:\/\/arxiv.org\/abs\/1910.01108\">DistilBERT<\/a><\/b>, a distilled version of BERT that is 60% faster, 40% lighter in memory, and still retains 97% of BERT\u2019s performance\n    <\/li>\n    <li>\n        <b>October 2019: <a href=\"https:\/\/arxiv.org\/abs\/1910.13461\">BART<\/a> and <a href=\"https:\/\/arxiv.org\/abs\/1910.10683\">T5<\/a><\/b>, two large pretrained models using the same architecture as the original Transformer model (the first to do so)\n    <\/li>\n    <li>\n        <b>May 2020, <a href=\"https:\/\/arxiv.org\/abs\/2005.14165\">GPT-3<\/a><\/b>, an even bigger version of GPT-2 that is able to perform well on a variety of tasks without the need for fine-tuning (called zero-shot learning)\n    <\/li>\n<\/ul><br>\n\n<p style=\"font-family: Georgia;\">This list is far from comprehensive, and is just meant to highlight a few of the different kinds of Transformer models. Broadly, they can be grouped into three categories:<\/p>\n\n<ul style=\"font-family: Georgia;\">\n    <li>\n        <b>GPT-like<\/b> (also called <b>auto-regressive<\/b> Transformer models)\n    <\/li>\n    <li>\n        <b>BERT-like<\/b> (also called <b>auto-encoding<\/b> Transformer models)\n    <\/li>\n    <li>\n        <b>BART\/T5-like<\/b> (also called <b>sequence-to-sequence<\/b> Transformer models)\n    <\/li>\n<\/ul><br>\n\n<p style=\"font-family: Georgia;\">We will dive into these families in more depth later on.<\/p><br>\n\n\n<b style=\"font-family: Georgia; text-decoration: underline; text-transform: uppercase; font-size: 15px;\">Transformers Are Language Models<\/b>\n\n<p style=\"font-family: Georgia;\">All the Transformer models mentioned above (<b>GPT, BERT, BART, T5<\/b>, etc.) have been trained as <b><i>language models<\/i><\/b>. This means they have been trained on large amounts of raw text in a self-supervised fashion. Self-supervised learning is a type of training in which the objective is automatically computed from the inputs of the model. That means that humans are not needed to label the data!<\/p>\n\n<p style=\"font-family: Georgia;\">This type of model develops a statistical understanding of the language it has been trained on, but it\u2019s not very useful for specific practical tasks. Because of this, the general pretrained model then goes through a process called <b><i>transfer learning<\/i><\/b>. During this process, the model is fine-tuned in a supervised way \u2014 that is, using human-annotated labels \u2014 on a given task.<\/p>\n\n<p style=\"font-family: Georgia;\">An example of a task is predicting the next word in a sentence having read the <b><i>n<\/i><\/b> previous words. This is called <b><i>causal language modeling<\/i><\/b> because the output depends on the past and present inputs, but not the future ones.<\/p><br>\n\n<center><img src=\"https:\/\/huggingface.co\/course\/static\/chapter1\/causal_modeling.png\" width=80%><\/center><br>\n\n<p style=\"font-family: Georgia;\">Another example is <b><i>masked language modelling<\/i><\/b>, in which the model predicts a masked word in the sentence.<br>\n\n<center><img src=\"https:\/\/huggingface.co\/course\/static\/chapter1\/masked_modeling.png\" width=80%><\/center><br>\n    \n<b style=\"font-family: Georgia; text-decoration: underline; text-transform: uppercase; font-size: 15px;\">Transformers Are Big Models<\/b>\n\n<p style=\"font-family: Georgia;\">Apart from a few outliers (like <a href=\"https:\/\/arxiv.org\/abs\/1910.01108\" style=\"font-weight: bold;\">DistilBERT<\/a>), the general strategy to achieve better performance is by increasing the models\u2019 sizes as well as the amount of data they are pretrained on.<\/p>\n\n<center><img src=\"https:\/\/huggingface.co\/course\/static\/chapter1\/model_parameters.png\" width=95%><\/center><br>\n\n<br><p style=\"font-family: Georgia;\">Unfortunately, training a model, especially a large one, requires a large amount of data. This becomes very costly in terms of time and compute resources. It even translates to environmental impact, as can be seen in the following graph.<\/p><br>\n\n<center><img src=\"https:\/\/huggingface.co\/course\/static\/chapter1\/carbon_footprint.png\" width=95%><\/center>\n\n- <a href=\"https:\/\/youtu.be\/ftWlj4FBHTg\" style=\"font-family: Georgia; color: darkred; font-weight: bold;\">VIDEO LINK - THE CARBON FOOTPRINT OF TRANSFORMERS - HUGGING FACE CHANNEL<\/a><br>\n\n<p style=\"font-family: Georgia;\">And this is showing a project for a (very big) model led by a team consciously trying to reduce the environmental impact of pretraining. The footprint of running lots of trials to get the best hyperparameters would be even higher.<\/p>\n\n<p style=\"font-family: Georgia;\">Imagine if each time a research team, a student organization, or a company wanted to train a model, it did so from scratch. This would lead to huge, unnecessary global costs!<\/p>\n\n<p style=\"font-family: Georgia;\">This is why sharing language models is paramount: sharing the trained weights and building on top of already trained weights reduces the overall compute cost and carbon footprint of the community.<\/p><br>\n\n<b style=\"font-family: Georgia; text-decoration: underline; text-transform: uppercase; font-size: 15px;\">TRANSFER LEARNING<\/b>\n\n- <a href=\"https:\/\/youtu.be\/ftWlj4FBHTg\" style=\"font-family: Georgia; color: darkred; font-weight: bold;\">VIDEO LINK - TRANSFER LEARNING - HUGGING FACE CHANNEL<\/a><br>\n\n<p style=\"font-family: Georgia;\"><b><i>Pretraining<\/i><\/b> is the act of training a model from scratch: the weights are randomly initialized, and the training starts without any prior knowledge.<\/p>\n\n<center><img src=\"https:\/\/huggingface.co\/course\/static\/chapter1\/pretraining.png\" width=95%><\/center>\n\n<p style=\"font-family: Georgia;\">This pretraining is usually done on very large amounts of data. Therefore, it requires a very large corpus of data, and training can take up to several weeks.<\/p>\n\n<p style=\"font-family: Georgia;\"><b><i>Fine-tuning<\/i><\/b>, on the other hand, is the training done <b>AFTER<\/b> a model has been pretrained. To perform fine-tuning, you first acquire a pretrained language model, then perform additional training with a dataset specific to your task. Wait \u2014 why not simply train directly for the final task? There are a couple of reasons:<\/p>\n\n<ul style=\"font-family: Georgia;\">\n    <li>\n        The pretrained model was already trained on a dataset that has some similarities with the fine-tuning dataset. The fine-tuning process is thus able to take advantage of knowledge acquired by the initial model during pretraining (for instance, with NLP problems, the pretrained model will have some kind of statistical understanding of the language you are using for your task).\n    <\/li>\n    <li>\n        Since the pretrained model was already trained on lots of data, the fine-tuning requires way less data to get decent results.\n    <\/li>\n    <li>\n        For the same reason, the amount of time and resources needed to get good results are much lower.\n    <\/li>\n<\/ul><br>\n\n<p style=\"font-family: Georgia;\">For example, one could leverage a pretrained model trained on the English language and then fine-tune it on an arXiv corpus, resulting in a science\/research-based model. The fine-tuning will only require a limited amount of data: the knowledge the pretrained model has acquired is \u201ctransferred,\u201d hence the term <b><i>transfer learning<\/i><\/b>.<\/p>\n\n<center><img src=\"https:\/\/huggingface.co\/course\/static\/chapter1\/finetuning.png\" width=95%><\/center>\n\n<p style=\"font-family: Georgia;\">Fine-tuning a model therefore has lower time, data, financial, and environmental costs. It is also quicker and easier to iterate over different fine-tuning schemes, as the training is less constraining than a full pretraining.<\/p>\n\n<p style=\"font-family: Georgia;\">This process will also achieve better results than training from scratch (unless you have lots of data), which is why you should always try to leverage a pretrained model \u2014 one as close as possible to the task you have at hand \u2014 and fine-tune it.<\/p>","1cc28e45":"<a id=\"1_1\"><\/a>\n\n<h3 style=\"font-family: Georgia; font-size: 20px; font-style: normal; font-weight: normal; text-decoration: none; text-transform: none; letter-spacing: 2px; color: black; background-color: #ffffff;\">1.1 NATURAL LANGUAGE PROCESSING (NLP)&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"#chapter_1\">&#10514;<\/a><\/h3>\n\n---\n\n<p style=\"font-family: Georgia;\">Before jumping into Transformer models, let\u2019s do a quick overview of what natural language processing is and why we care about it.<\/p><br>\n\n<b style=\"font-family: Georgia; text-decoration: underline; font-size: 15px;\">WHAT IS NLP?<\/b>\n\n<p style=\"font-family: Georgia;\"><b>NLP<\/b> is a field of linguistics and machine learning focused on understanding everything related to human language. The aim of NLP tasks is not only to understand single words individually, but to be able to understand the context of those words.<\/p><br>\n\n<p style=\"font-family: Georgia;\">The following is a list of common NLP tasks, with some examples of each:<\/p>\n<ul style=\"font-family: Georgia;\">\n    <li>\n        <b>Classifying whole sentences:<\/b> Getting the sentiment of a review, detecting if an email is spam, determining if a sentence is grammatically correct or whether two sentences are logically related or not.\n    <\/li>\n    <li>\n        <b>Classifying each word in a sentence:<\/b> Identifying the grammatical components of a sentence (noun, verb, adjective), or the named entities (person, location, organization)\n    <\/li>\n    <li>\n        <b>Generating text content:<\/b> Completing a prompt with auto-generated text, filling in the blanks in a text with masked words\n    <\/li>\n    <li>\n        <b>Extracting an answer from a text:<\/b> Given a question and a context, extracting the answer to the question based on the information provided in the context\n    <\/li>\n    <li>\n        <b>Generating a new sentence from an input text:<\/b> Translating a text into another language, summarizing a text.\n    <\/li>\n<\/ul><br>\n\n<p style=\"font-family: Georgia;\">NLP isn\u2019t limited to written text though. It also tackles complex challenges in speech recognition and computer vision, such as generating a transcript of an audio sample or a description of an image.<\/p><br>\n\n<b style=\"font-family: Georgia; text-decoration: underline; font-size: 15px;\">WHY IS IT CHALLENGING?<\/b>\n\n<p style=\"font-family: Georgia;\">Computers don\u2019t process information in the same way as humans. For example, when we read the sentence \u201cI am hungry,\u201d we can easily understand its meaning. Similarly, given two sentences such as \u201cI am hungry\u201d and \u201cI am sad,\u201d we\u2019re able to easily determine how similar they are. For machine learning (ML) models, such tasks are more difficult. The text needs to be processed in a way that enables the model to learn from it. And because language is complex, we need to think carefully about how this processing must be done. There has been a lot of research done on how to represent text, and we will look at some methods in the next chapter.<\/p><br>\n","13012a6a":"<br><br>\n\n<a id=\"chapter_0\"><\/a>\n\n<h1 style=\"font-family: Georgia; font-size: 24px; font-style: normal; font-weight: bold; text-decoration: none; text-transform: none; letter-spacing: 3px; background-color: #ffffff; color: black;\" id=\"chapter_1\">CHAPTER #0 &nbsp;&nbsp;-&nbsp;&nbsp; SETUP A WORKING ENVIRONMENT&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"#toc\">&#10514;<\/a><\/h1>\n\n<br>\n\n<p style=\"font-family: Georgia\">\n    Welcome to the Hugging Face course! This introduction will guide you through setting up a working environment. If you\u2019re just starting the course, we recommend you first take a look at <a href=\"#chapter_1\" style=\"font-weight: bold;\">Chapter 1<\/a>, then come back and set up your environment so you can try the code yourself.\n    \n<\/p>\n\n<center><div class=\"alert alert-block alert-info\" style=\"margin: 2em; line-height: 1.5em; font-size: 12px; font-family: Georgia;\">\n    <br><b>\u26a0\ufe0f&nbsp;&nbsp;Some of the text in this section references setting things up on your local or on colab. The entirety of this course will be completed within a Kaggle Notebook. It is completely up to you if you'd like to adapt anything here to a different coding environment.<\/b><br><br><b>Any further reference to Colab notebooks, or how to set them up will be omitted or replaced with information on Kaggle Notebooks. Any insertions\/replacements will be noted with an asterisk.<\/b><br><br>\n<\/div><\/center>\n\n<p style=\"font-family: Georgia\">All the libraries that we\u2019ll be using in this course are available as Python packages, so here we\u2019ll show you how to set up a Python environment and install the specific libraries you\u2019ll need.<\/p>\n\n<p style=\"font-family: Georgia\">We\u2019ll cover two ways of setting up your working environment, using a <b>Kaggle Notebook<\/b> notebook or a Python virtual environment. Feel free to choose the one that resonates with you the most. For beginners, we strongly recommend that you get started by using a <b>Kaggle Notebook<\/b>.<\/p>\n\n<p style=\"font-family: Georgia\">Note that we will not be covering the Windows system. If you\u2019re running on Windows, we recommend following along using a <b>Kaggle Notebook<\/b>. If you\u2019re using a Linux distribution or macOS, you can use either approach described here.<\/p>\n\n<p style=\"font-family: Georgia\">Most of the course relies on you having a Hugging Face account. We recommend creating one now: <a src=\"https:\/\/huggingface.co\/join\" style=\"font-weight: bold; text-decoration: underline;\">create an account.<\/a><\/p>","b2d251f7":"<a id=\"1_6\"><\/a>\n\n<br><h3 style=\"font-family: Georgia; font-size: 20px; font-style: normal; font-weight: normal; text-decoration: none; text-transform: none; letter-spacing: 2px; color: black; background-color: #ffffff;\">1.6 DECODER MODELS&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"#chapter_1\">&#10514;<\/a><\/h3>\n\n---\n\n- <a href=\"https:\/\/youtu.be\/d_ixlCubqQw\" style=\"font-family: Georgia; color: darkred; font-weight: bold;\">VIDEO LINK - TRANSFORMER MODELS, THE DECODER - HUGGING FACE CHANNEL<\/a><br>\n\n<p style=\"font-family: Georgia;\">Decoder models use only the decoder of a Transformer model. At each stage, for a given word the attention layers can only access the words positioned before it in the sentence. These models are often called <b><i>auto-regressive models<\/i><\/b>.<\/p>\n\n<p style=\"font-family: Georgia;\">The pretraining of decoder models usually revolves around predicting the next word in the sentence.<\/p>\n\n<p style=\"font-family: Georgia;\">These models are best suited for tasks involving text generation.<\/p>\n\n<p style=\"font-family: Georgia;\"><b>Representatives of this family of models include:<\/b><\/p>\n\n<ul style=\"font-family: Georgia;\">\n    <li>\n        <b><a href=\"https:\/\/huggingface.co\/transformers\/model_doc\/ctrl.html\">CTRL<\/a><\/b>\n    <\/li>\n    <li>\n        <b><a href=\"https:\/\/huggingface.co\/transformers\/model_doc\/gpt.html\">GPT<\/a><\/b>\n    <\/li>\n    <li>\n        <b><a href=\"https:\/\/huggingface.co\/transformers\/model_doc\/gpt2.html\">GPT-2<\/a><\/b>\n    <\/li>\n    <li>\n        <b><a href=\"https:\/\/arxiv.org\/abs\/2005.14165\">GPT-3<\/a><\/b>\n    <\/li>\n    <li>\n        <b><a href=\"https:\/\/huggingface.co\/docs\/transformers\/model_doc\/transformerxl\">Transformer XL<\/a><\/b>\n    <\/li>\n<\/ul><br>\n","388d07df":"<br><b style=\"font-family: Georgia; text-decoration: underline; font-size: 15px;\">SANITY CHECK<\/b>\n\n<p style=\"font-family: Georgia;\">The pipelines shown so far are mostly for demonstrative purposes. They were programmed for specific tasks and cannot perform variations of them. In the <b><a href=\"https:\/\/www.kaggle.com\/dschettler8845\/transformers-course-chapter-2-tf-torch\">next chapter<\/a><\/b>, you\u2019ll learn what\u2019s inside a <b><code>pipeline()<\/code><\/b> function and how to customize its behavior.<\/p>","32993020":"<br><b style=\"font-family: Georgia; text-decoration: underline; font-size: 15px;\">ZERO-SHOT CLASSIFICATION<\/b>\n\n<p style=\"font-family: Georgia;\">We\u2019ll start by tackling a more challenging task where we need to classify texts that haven\u2019t been labelled. This is a common scenario in real-world projects because annotating text is usually time-consuming and requires domain expertise.<\/p>\n\n<p style=\"font-family: Georgia;\">For this use case, the zero-shot-classification pipeline is very powerful: it allows you to specify which labels to use for the classification, so you don\u2019t have to rely on the labels of the pretrained model. You\u2019ve already seen how the model can classify a sentence as positive or negative using those two labels \u2014 but it can also classify the text using any other set of labels you like.<\/p>\n\n<p style=\"font-family: Georgia;\">This pipeline is called zero-shot because you don\u2019t need to fine-tune the model on your data to use it. It can directly return probability scores for any list of labels you want!<\/p>\n\n<center><div class=\"alert alert-block alert-success\" style=\"margin: 2em; line-height: 1.5em; font-family: Georgia; font-size: 12px; \">\n    <br><b>\u270f\ufe0f&nbsp;&nbsp;<b style=\"color: black;\">TRY IT OUT!<\/b>&nbsp;&nbsp;&nbsp;&nbsp; Play around with your own sequences and labels and see how the model behaves.<\/b><br><br>\n<\/div><\/center>\n ","26948f53":"<a id=\"1_5\"><\/a>\n\n<br><h3 style=\"font-family: Georgia; font-size: 20px; font-style: normal; font-weight: normal; text-decoration: none; text-transform: none; letter-spacing: 2px; color: black; background-color: #ffffff;\">1.5 ENCODER MODELS&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"#chapter_1\">&#10514;<\/a><\/h3>\n\n---\n\n- <a href=\"https:\/\/youtu.be\/MUqNwgPjJvQ\" style=\"font-family: Georgia; color: darkred; font-weight: bold;\">VIDEO LINK - TRANSFORMER MODELS, THE ENCODER - HUGGING FACE CHANNEL<\/a><br>\n\n<p style=\"font-family: Georgia;\">Encoder models use only the encoder of a Transformer model. At each stage, the attention layers can access all the words in the initial sentence. These models are often characterized as having \u201cbi-directional\u201d attention, and are often called <b><i>auto-encoding models<\/i><\/b>.<\/p>\n\n<p style=\"font-family: Georgia;\">The pretraining of these models usually revolves around somehow corrupting a given sentence (for instance, by masking random words in it) and tasking the model with finding or reconstructing the initial sentence.<\/p>\n\n<p style=\"font-family: Georgia;\">Encoder models are best suited for tasks requiring an understanding of the full sentence, such as sentence classification, named entity recognition (and more generally word classification), and extractive question answering.<\/p>\n\n<p style=\"font-family: Georgia;\"><b>Representatives of this family of models include:<\/b><\/p>\n\n<ul style=\"font-family: Georgia;\">\n    <li>\n        <b><a href=\"https:\/\/huggingface.co\/transformers\/model_doc\/albert.html\">ALBERT<\/a><\/b>\n    <\/li>\n    <li>\n        <b><a href=\"https:\/\/huggingface.co\/transformers\/model_doc\/bert.html\">BERT<\/a><\/b>\n    <\/li>\n    <li>\n        <b><a href=\"https:\/\/huggingface.co\/transformers\/model_doc\/distilbert.html\">DistilBERT<\/a><\/b>\n    <\/li>\n    <li>\n        <b><a href=\"https:\/\/huggingface.co\/transformers\/model_doc\/electra.html\">ELECTRA<\/a><\/b>\n    <\/li>\n    <li>\n        <b><a href=\"https:\/\/huggingface.co\/transformers\/model_doc\/roberta.html\">RoBERTa<\/a><\/b>\n    <\/li>\n<\/ul>","af1ec898":"<a id=\"1_9\"><\/a>\n\n<br><h3 style=\"font-family: Georgia; font-size: 20px; font-style: normal; font-weight: normal; text-decoration: none; text-transform: none; letter-spacing: 2px; color: black; background-color: #ffffff;\">1.9 CHAPTER SUMMARY&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"#chapter_1\">&#10514;<\/a><\/h3>\n\n---\n\n<p style=\"font-family: Georgia;\">In this chapter, you saw how to approach different NLP tasks using the high-level <b><code>pipeline()<\/code><\/b> function from \ud83e\udd17 Transformers. You also saw how to search for and use models in the <b><a href=\"https:\/\/huggingface.co\/models\">Hub<\/a><\/b><\/p>\n\n<p style=\"font-family: Georgia;\">We discussed how Transformer models work at a high level, and talked about the importance of transfer learning and fine-tuning. A key aspect is that you can use the full architecture or only the encoder or decoder, depending on what kind of task you aim to solve. The following table summarizes this:<\/p><br>\n\n---\n\n<br><table style=\"font-family: Georgia; text-align:center;\">\n    <thead>\n        <tr>\n            <th>Model<\/th>\n            <th>Examples<\/th>\n            <th>Tasks<\/th>\n        <\/tr>\n    <\/thead>\n    <tbody>\n        <tr>\n            <td>Encoder<\/td>\n            <td>ALBERT, BERT, DistilBERT, ELECTRA, RoBERTa<\/td>\n            <td>Sentence classification, named entity recognition, extractive question answering<\/td>\n        <\/tr>\n        <tr>\n            <td>Decoder<\/td>\n            <td>CTRL, GPT, GPT-2, Transformer XL<\/td>\n            <td>Text generation<\/td><\/tr>\n        <tr>\n            <td>Encoder-decoder<\/td>\n            <td>BART, T5, Marian, mBART<\/td>\n            <td>Summarization, translation, generative question answering<\/td>\n        <\/tr>\n    <\/tbody>\n<\/table><br>\n\n---","b2f8bf87":"<br><br>\n\n<a id=\"chapter_1\"><\/a>\n\n<h1 style=\"font-family: Georgia; font-size: 24px; font-style: normal; font-weight: bold; text-decoration: none; text-transform: none; letter-spacing: 3px; background-color: #ffffff; color: black;\" id=\"chapter_1\">CHAPTER #1 &nbsp;&nbsp;-&nbsp;&nbsp; TRANSFORMER MODELS&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"#toc\">&#10514;<\/a><\/h1>\n\n<br>\n\n<p style=\"font-family: Georgia;\">This course will teach you about <b><i>Natural Language Processing (NLP)<\/i><\/b> using libraries from the <a href=\"https:\/\/huggingface.co\/\" style=\"font-weight: bold;\">Hugging Face<\/a> ecosystem \u2014 <a href=\"https:\/\/github.com\/huggingface\/transformers\" style=\"font-weight: bold;\">\ud83e\udd17 Transformers<\/a>, <a href=\"https:\/\/github.com\/huggingface\/datasets\" style=\"font-weight: bold;\">\ud83e\udd17 Datasets<\/a>, <a href=\"https:\/\/github.com\/huggingface\/tokenizers\" style=\"font-weight: bold;\">\ud83e\udd17 Tokenizers<\/a>, and <a href=\"https:\/\/github.com\/huggingface\/accelerate\" style=\"font-weight: bold;\">\ud83e\udd17 Accelerate<\/a> \u2014 as well as the <a href=\"https:\/\/huggingface.co\/models\" style=\"font-weight: bold;\">Hugging Face Hub<\/a>. It\u2019s completely free and without ads.<\/p>","d99212a8":"<br><b style=\"font-family: Georgia; text-decoration: underline; font-size: 15px;\">TRANSLATION<\/b>\n<p style=\"font-family: Georgia; font-size: 8px; color:dark-red;\">Text description below comes from this <a href=\"https:\/\/machinelearningmastery.com\/introduction-neural-machine-translation\/#:~:text=Machine%20translation%20is%20the%20task,of%20symbols%20in%20another%20language.\" style=\"font-weight: bold;\">blog-post\/tutorial<\/a> and the course content.<\/p><br>\n\n<p style=\"font-family: Georgia;\">Machine translation is the task of automatically converting source text in one language to text in another language. In a machine translation task, the input already consists of a sequence of symbols in some language, and the computer program must convert this into a sequence of symbols in another language.<\/p> \n\n<p style=\"font-family: Georgia;\">For translation, you can use a default model if you provide a language pair in the task name (such as <b><code>\"translation_en_to_fr\"<\/code><\/b>), but the easiest way is to pick the model you want to use on the <a href=\"https:\/\/huggingface.co\/models\" style=\"font-weight: bold;\">Model Hub<\/a>.<\/p>\n    \n<p style=\"font-family: Georgia;\">Here we\u2019ll try translating from French to English. *[Note that] like with text generation and summarization, you can specify a <b><code>max_length<\/code><\/b> or a <b><code>min_length<\/code><\/b> for the result.<\/p>\n\n<center><div class=\"alert alert-block alert-success\" style=\"margin: 2em; line-height: 1.5em; font-family: Georgia; font-size: 12px; \">\n    <br><b>\u270f\ufe0f&nbsp;&nbsp;<b style=\"color: black;\">TRY IT OUT!<\/b>&nbsp;&nbsp;&nbsp;&nbsp; Search for translation models in other languages and try to translate the example sentence(s) below into a few different languages.<\/b><br><br>\n<\/div><\/center>","a1edabc5":"<img src=\"https:\/\/repository-images.githubusercontent.com\/155220641\/a16c4880-a501-11ea-9e8f-646cf611702e\"><\/img>\n\n---\n\n<p style=\"font-family: Georgia;\">This collection of notebooks will walk you through the entire <a src=\"https:\/\/huggingface.co\/course\/chapter0\/1?fw=tf\" style=\"font-weight: bold;\"><b>Hugging Face Transformers Course:<\/b><\/a><\/p>\n\n---\n\n<br><b style=\"font-family: Georgia; text-transform: uppercase; font-size: 16px;\">Links To Chapter Notebooks&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: red; font-size: 11px;\">(This Notebook Will Cover Chapter 0 and Chapter 1)<\/span><\/b>\n<ul style=\"font-family: Georgia;\">\n    <li><a href=\"#toc\"><b>Chapter <span style=\"font-family: Courier New; font-size: 16px;\">0<\/span> &nbsp;&nbsp; - &nbsp;&nbsp;<span style=\"letter-spacing: 0.15em; text-transform: uppercase;\">SEtUP<\/span><\/b><\/a><\/li>\n    <li><a href=\"#toc\"><b>Chapter <span style=\"font-family: Courier New; font-size: 16px;\">1<\/span> &nbsp;&nbsp; - &nbsp;&nbsp;<span style=\"letter-spacing: 0.15em; text-transform: uppercase;\">Transformer Models<\/span><\/b><\/a><\/li>\n    <li><a href=\"https:\/\/www.kaggle.com\/dschettler8845\/transformers-course-chapter-2-tf-torch\"><b>Chapter <span style=\"font-family: Courier New; font-size: 16px;\">2<\/span> &nbsp;&nbsp; - &nbsp;&nbsp;<span style=\"letter-spacing: 0.15em; text-transform: uppercase;\">Using \ud83e\udd17 Transformers<\/span><\/b><\/a><\/li>\n    <li><a href=\"https:\/\/www.kaggle.com\/dschettler8845\/transformers-course-chapter-3-tf-torch\"><b>Chapter <span style=\"font-family: Courier New; font-size: 16px;\">3<\/span> &nbsp;&nbsp; - &nbsp;&nbsp;<span style=\"letter-spacing: 0.15em; text-transform: uppercase;\">Fine-Tuning A Pretrained Model<\/span><\/b><\/a><\/li>\n    <li><a href=\"#toc\"><b>Chapter <span style=\"font-family: Courier New; font-size: 16px;\">4<\/span> &nbsp;&nbsp; - &nbsp;&nbsp;<span style=\"letter-spacing: 0.15em; text-transform: uppercase;\">Sharing Models And Tokenizers<\/span><\/b><\/a><\/li>\n    <li><a href=\"#toc\"><b>Chapter <span style=\"font-family: Courier New; font-size: 16px;\">5<\/span> &nbsp;&nbsp; - &nbsp;&nbsp;<span style=\"letter-spacing: 0.15em; text-transform: uppercase;\">The \ud83e\udd17 Datasets Library<\/span><\/b><\/a><\/li>\n    <li><a href=\"#toc\"><b>Chapter <span style=\"font-family: Courier New; font-size: 16px;\">6<\/span> &nbsp;&nbsp; - &nbsp;&nbsp;<span style=\"letter-spacing: 0.15em; text-transform: uppercase;\">The \ud83e\udd17 Tokenizers Library<\/span><\/b><\/a><\/li>\n    <li><a href=\"#toc\"><b>Chapter <span style=\"font-family: Courier New; font-size: 16px;\">7<\/span> &nbsp;&nbsp; - &nbsp;&nbsp;<span style=\"letter-spacing: 0.15em; text-transform: uppercase;\">Main NLP Tasks<\/span><\/b><\/a><\/li>\n    <li><a href=\"#toc\"><b>Chapter <span style=\"font-family: Courier New; font-size: 16px;\">8<\/span> &nbsp;&nbsp; - &nbsp;&nbsp;<span style=\"letter-spacing: 0.15em; text-transform: uppercase;\">How To Ask For Help<\/span><\/b><\/a><\/li>    \n<\/ul><br>\n\n---\n\n<p style=\"font-family: Georgia;\">To find the original course please <a src=\"https:\/\/huggingface.co\/course\/chapter0\/1?fw=tf\" style=\"font-weight: bold; text-decoration: underline;\">>>>click here<<<<\/a><\/p>\n    \n---\n    \n<br>\n\n<center><div class=\"alert alert-block alert-info\" style=\"margin: 2em; line-height: 1.5em; font-family: Georgia; font-size: 12px;\">\n    <br><b>\u26a0\ufe0f&nbsp;&nbsp;The vast majority of the text in this notebook will come directly from the HuggingFace Transformers course. If I would like to add in (or change anything), I will insert the information in a blue-box similar to this one.<\/b><br><br>\n<\/div><\/center>\n   \n    \n<center><div class=\"alert alert-block alert-success\" style=\"margin: 2em; line-height: 1.5em; font-family: Georgia; font-size: 12px;\">\n    <br><b>\u26a0\ufe0f&nbsp;&nbsp;Hugging Face uses green blocks to inject notation into their course.<\/b><br><br>\n<\/div><\/center>\n","3d6d5df3":"<a id=\"1_0\"><\/a>\n\n<h3 style=\"font-family: Georgia; font-size: 20px; font-style: normal; font-weight: normal; text-decoration: none; text-transform: none; letter-spacing: 2px; color: black; background-color: #ffffff;\">1.0 WHAT TO EXPECT&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"#chapter_1\">&#10514;<\/a><\/h3>\n\n---\n\n<br><b style=\"font-family: Georgia; text-decoration: underline; font-size: 15px;\">BRIEF OVERVIEW*<\/b>\n\n<ul style=\"font-family: Georgia;\">\n    <li>\n        Chapters 1 to 4 provide an introduction to the main concepts of the \ud83e\udd17 Transformers library. By the end of this part of the course, you will be familiar with how Transformer models work and will know how to use a model from the Hugging Face Hub, fine-tune it on a dataset, and share your results on the Hub!\n    <\/li>\n    <li>\n        Chapters 5 to 8 teach the basics of \ud83e\udd17 Datasets and \ud83e\udd17 Tokenizers before diving into classic NLP tasks. By the end of this part, you will be able to tackle the most common NLP problems by yourself.\n    <\/li>\n    <li>\n        Chapters 9 to 12 dive even deeper, showcasing specialized architectures (memory efficiency, long sequences, etc.) and teaching you how to write custom objects for more exotic use cases. By the end of this part, you will be ready to solve complex NLP problems and make meaningful contributions to \ud83e\udd17 Transformers.\n    <\/li>\n<\/ul><br>\n\n<center><img src=\"https:\/\/huggingface.co\/course\/static\/chapter1\/summary.png\"><\/center><br>\n\n\n<b style=\"font-family: Georgia; text-decoration: underline; font-size: 15px;\">PREREQUISITES<\/b>\n<ul style=\"font-family: Georgia;\">\n    <li>\n        Requires a good knowledge of Python\n    <\/li>\n    <li>\n        Is better taken after an introductory deep learning course, such as fast.ai\u2019s Practical Deep Learning for Coders or one of the programs developed by DeepLearning.AI\n    <\/li>\n    <li>\n        Does not expect prior PyTorch or TensorFlow knowledge, though some familiarity with either of those will help\n    <\/li>\n<\/ul><br>\n\n\n<b style=\"font-family: Georgia; text-decoration: underline; font-size: 15px;\">ABOUT THE AUTHORS<\/b>\n<ul style=\"font-family: Georgia;\">\n    <li>\n        <b>Matthew Carrigan<\/b> is a Machine Learning Engineer at Hugging Face. He lives in Dublin, Ireland and previously worked as an ML engineer at Parse.ly and before that as a post-doctoral researcher at Trinity College Dublin. He does not believe we\u2019re going to get to AGI by scaling existing architectures, but has high hopes for robot immortality regardless.\n    <\/li><br>\n    <li>\n        <b>Lucile Saulnier<\/b> is a machine learning engineer at Hugging Face, developing and supporting the use of open source tools. She is also actively involved in many research projects in the field of Natural Language Processing such as collaborative training and BigScience.\n    <\/li><br>\n    <li>\n        <b>Sylvain Gugger<\/b> is a Research Engineer at Hugging Face and one of the core maintainers of the \ud83e\udd17 Transformers library. Previously he was a Research Scientist at fast.ai, and he co-wrote <a src=\"https:\/\/learning.oreilly.com\/library\/view\/deep-learning-for\/9781492045519\/\"><b>Deep Learning for Coders with fastai and PyTorch<\/b><\/a> with Jeremy Howard. The main focus of his research is on making deep learning more accessible, by designing and improving techniques that allow models to train fast on limited resources.\n    <\/li><br>\n    <li>\n        <b>Lysandre Debut<\/b> is a Machine Learning Engineer at Hugging Face and has been working on the \ud83e\udd17 Transformers library since the very early development stages. His aim is to make NLP accessible for everyone by developing tools with a very simple API.\n    <\/li><br>\n    <li>\n        <b>Merve Noyan<\/b> is a developer advocate at Hugging Face, working on developing tools and building content around them to democratize machine learning for everyone.\n    <\/li>\n    <br>\n    <li>\n        <b>Lewis Tunstall<\/b> is a machine learning engineer at Hugging Face, focused on developing open-source tools and making them accessible to the wider community. He is also a co-author of the <a href=\"https:\/\/www.oreilly.com\/library\/view\/natural-language-processing\/9781098103231\/\"><b>upcoming O\u2019Reilly book on Transformers<\/b><\/a>.\n    <\/li><br>\n    <li>\n        <b>Leandro von Werra<\/b> is a machine learning engineer in the open-source team at Hugging Face and also a co-author of the <a href=\"https:\/\/www.oreilly.com\/library\/view\/natural-language-processing\/9781098103231\/\"><b>upcoming O\u2019Reilly book on Transformers<\/b><\/a>. He has several years of industry experience bringing NLP projects to production by working across the whole machine learning stack.\n    <\/li>\n<\/ul><br>\n\n<b style=\"font-family: Georgia; text-decoration: underline; font-size: 15px;\">COMING UP IN THIS CHAPTER<\/b>\n<ul style=\"font-family: Georgia;\">\n    <li>\n        How to use the <b><code>pipeline()<\/code><\/b> function to solve NLP tasks such as text generation and classification\n    <\/li>\n    <li>\n        About the Transformer architecture\n    <\/li>\n    <li>\n        How to distinguish between encoder, decoder, and encoder-decoder architectures and use cases\n    <\/li>\n<\/ul>","c6ec3063":"<p id=\"toc\"><\/p>\n\n<br>\n\n<h1 style=\"font-family: Georgia; font-size: 30px; font-style: normal; font-weight: bold; text-decoration: none; text-transform: none; letter-spacing: 3px; color: black; background-color: #ffffff;\">TABLE OF CONTENTS<\/h1>\n\n---\n\n<h2 style=\"text-indent: 10vw; font-family: Georgia; font-size: 24px; font-style: normal; font-weight: bold; text-decoration: none; text-transform: none; letter-spacing: 2px; color: navy; background-color: #ffffff;\"><a href=\"#chapter_0\">CHAPTER &nbsp;#0&nbsp;&nbsp;&nbsp;-&nbsp;&nbsp;&nbsp;SETUP A WORKING ENVIRONMENT<\/a><\/h2>\n\n<h3 style=\"text-indent: 10vw; font-family: Georgia; font-size: 18px; font-style: normal; font-weight: normal; text-decoration: none; text-transform: none; letter-spacing: 2px; color: navy; background-color: #ffffff;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;&nbsp;&nbsp; <a href=\"#0_1\">0.1 USING A KAGGLE NOTEBOOK<\/a><\/h3>\n\n<h3 style=\"text-indent: 10vw; font-family: Georgia; font-size: 18px; font-style: normal; font-weight: normal; text-decoration: none; text-transform: none; letter-spacing: 2px; color: navy; background-color: #ffffff;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;&nbsp;&nbsp; <a href=\"#0_2\">0.2 USING A VIRTUAL ENVIRONMENT<\/a><\/h3>\n\n<h3 style=\"text-indent: 10vw; font-family: Georgia; font-size: 18px; font-style: normal; font-weight: normal; text-decoration: none; text-transform: none; letter-spacing: 2px; color: navy; background-color: #ffffff;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;&nbsp;&nbsp; <a href=\"#0_3\">0.3 PIP INSTALLS<\/a><\/h3>\n\n<br>\n\n<h2 style=\"text-indent: 10vw; font-family: Georgia; font-size: 24px; font-style: normal; font-weight: bolder; text-decoration: none; text-transform: none; letter-spacing: 2px; color:  navy; background-color: #ffffff;\"><a href=\"#chapter_1\">CHAPTER &nbsp;#1&nbsp;&nbsp;&nbsp;-&nbsp;&nbsp;&nbsp;TRANSFORMER MODELS<\/a><\/h2>\n\n<h3 style=\"text-indent: 10vw; font-family: Georgia; font-size: 18px; font-style: normal; font-weight: normal; text-decoration: none; text-transform: none; letter-spacing: 2px; color: navy; background-color: #ffffff;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;&nbsp;&nbsp; <a href=\"#1_0\">1.0 WHAT TO EXPECT?<\/a><\/h3>\n\n<h3 style=\"text-indent: 10vw; font-family: Georgia; font-size: 18px; font-style: normal; font-weight: normal; text-decoration: none; text-transform: none; letter-spacing: 2px; color: navy; background-color: #ffffff;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;&nbsp;&nbsp; <a href=\"#1_1\">1.1 NATURAL LANGUAGE PROCESSING (NLP)<\/a><\/h3>\n\n<h3 style=\"text-indent: 10vw; font-family: Georgia; font-size: 18px; font-style: normal; font-weight: normal; text-decoration: none; text-transform: none; letter-spacing: 2px; color: navy; background-color: #ffffff;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;&nbsp;&nbsp; <a href=\"#1_2\">1.2 TRANSFORMERS: WHAT CAN THEY DO?<\/a><\/h3>\n\n<h3 style=\"text-indent: 10vw; font-family: Georgia; font-size: 18px; font-style: normal; font-weight: normal; text-decoration: none; text-transform: none; letter-spacing: 2px; color: navy; background-color: #ffffff;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;&nbsp;&nbsp; <a href=\"#1_3\">1.3 HOW DO TRANSFORMERS WORK?<\/a><\/h3>\n\n<h3 style=\"text-indent: 10vw; font-family: Georgia; font-size: 18px; font-style: normal; font-weight: normal; text-decoration: none; text-transform: none; letter-spacing: 2px; color: navy; background-color: #ffffff;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;&nbsp;&nbsp; <a href=\"#1_4\">1.4 TRANSFORMER ARCHITECTURE<\/a><\/h3>\n\n<h3 style=\"text-indent: 10vw; font-family: Georgia; font-size: 18px; font-style: normal; font-weight: normal; text-decoration: none; text-transform: none; letter-spacing: 2px; color: navy; background-color: #ffffff;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;&nbsp;&nbsp; <a href=\"#1_5\">1.5 ENCODER MODELS<\/a><\/h3>\n\n<h3 style=\"text-indent: 10vw; font-family: Georgia; font-size: 18px; font-style: normal; font-weight: normal; text-decoration: none; text-transform: none; letter-spacing: 2px; color: navy; background-color: #ffffff;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;&nbsp;&nbsp; <a href=\"#1_6\">1.6 DECODER MODELS<\/a><\/h3>\n\n<h3 style=\"text-indent: 10vw; font-family: Georgia; font-size: 18px; font-style: normal; font-weight: normal; text-decoration: none; text-transform: none; letter-spacing: 2px; color: navy; background-color: #ffffff;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;&nbsp;&nbsp; <a href=\"#1_7\">1.7 SEQUENCE-TO-SEQUENCE MODELS<\/a><\/h3>\n\n<h3 style=\"text-indent: 10vw; font-family: Georgia; font-size: 18px; font-style: normal; font-weight: normal; text-decoration: none; text-transform: none; letter-spacing: 2px; color: navy; background-color: #ffffff;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;&nbsp;&nbsp; <a href=\"#1_8\">1.8 BIAS AND LIMITATIONS<\/a><\/h3>\n\n<h3 style=\"text-indent: 10vw; font-family: Georgia; font-size: 18px; font-style: normal; font-weight: normal; text-decoration: none; text-transform: none; letter-spacing: 2px; color: navy; background-color: #ffffff;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;&nbsp;&nbsp; <a href=\"#1_9\">1.9 CHAPTER SUMMARY<\/a><\/h3>","2de7a0d7":"<a id=\"0_1\"><\/a>\n\n\n<h3 style=\"font-family: Georgia; font-size: 20px; font-style: normal; font-weight: normal; text-decoration: none; text-transform: none; letter-spacing: 2px; color: black; background-color: #ffffff;\">0.1 USING A KAGGLE NOTEBOOK*&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"#chapter_0\">&#10514;<\/a><\/h3>\n\n---\n\n<p style=\"font-family: Georgia;\">For now we will simply refer everyone who is unfamiliar with the Kaggle environment to the <b><a href=\"https:\/\/www.kaggle.com\/docs\/notebooks#using-the-notebooks-editor\">relevant documentation<\/a><\/b>. This section may get an update once more of the body of the course has been completed.<\/p>\n","e87db7c9":"<br><b style=\"font-family: Georgia; text-decoration: underline; font-size: 15px;\">SUMMARIZATION<\/b>\n<p style=\"font-family: Georgia; font-size: 8px; color:dark-red;\">Text description below comes from this <a href=\"https:\/\/medium.com\/luisfredgs\/automatic-text-summarization-with-machine-learning-an-overview-68ded5717a25\" style=\"font-weight: bold;\">blog-post\/tutorial<\/a> and the course content.<\/p><br>\n\n<p style=\"font-family: Georgia;\">Summarization is the task of reducing a text into a shorter text while keeping all (or most) of the important aspects referenced in the text. Since manual text summarization is a time expensive and generally laborious task, the automatization of the task is gaining increasing popularity and therefore constitutes a strong motivation for academic research.<\/p>\n    \n<p style=\"font-family: Georgia;\">There are important applications for text summarization in various NLP related tasks such as text classification, question answering, legal texts summarization, news summarization, and headline generation. Moreover, the generation of summaries can be integrated into these systems as an intermediate stage which helps to reduce the length of the document.<\/p>\n    \n<p style=\"font-family: Georgia;\">In the big data era, there has been an explosion in the amount of text data from a variety of sources. This volume of text is an inestimable source of information and knowledge which needs to be effectively summarized to be useful. This increasing availability of documents has demanded exhaustive research in the NLP area for automatic text summarization. Automatic text summarization is the task of producing a concise and fluent summary without any human help while preserving the meaning of the original text document.<\/p>\n    \n<p style=\"font-family: Georgia;\">It is very challenging, because when we as humans summarize a piece of text, we usually read it entirely to develop our understanding, and then write a summary highlighting its main points. Since computers lack human knowledge and language capability, it makes automatic text summarization a very difficult and non-trivial task.<\/p>\n    \n<p style=\"font-family: Georgia;\">Various models based on machine learning have been proposed for this task. Most of these approaches model this problem as a classification problem which outputs whether to include a sentence in the summary or not. Other approaches have used topic information, Latent Semantic Analysis (LSA), Sequence to Sequence models, Reinforcement Learning and Adversarial processes.<\/p>\n\n<p style=\"font-family: Georgia;\">In general, there are two different approaches for automatic summarization:<\/p> \n<ul style=\"font-family: Georgia;\">\n    <li><b>Extractive Summarization<\/b> - Summarizes using extracted pieces of text from the original corpus that best represent the content.<\/li>\n    <li><b>Abstractive Summarization<\/b> - Summarizes using generated pieces of text that best represent the context of the original corpus<\/li>\n<\/ul>\n\n<center><div class=\"alert alert-block alert-success\" style=\"margin: 2em; line-height: 1.5em; font-family: Georgia; font-size: 12px; \">\n    <br><b>\u270f\ufe0f&nbsp;&nbsp;<b style=\"color: black;\">TRY IT OUT!<\/b>&nbsp;&nbsp;&nbsp;&nbsp; Use the <code>min_length<\/code> and <code>max_length<\/code> arguments to generate summaries with constrained lengths.<\/b><br><br>\n<\/div><\/center>","60c25cdb":"<a id=\"1_4\"><\/a>\n\n<br><h3 style=\"font-family: Georgia; font-size: 20px; font-style: normal; font-weight: normal; text-decoration: none; text-transform: none; letter-spacing: 2px; color: black; background-color: #ffffff;\">1.4 TRANSFORMER ARCHITECTURE&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"#chapter_1\">&#10514;<\/a><\/h3>\n\n---\n\n<p style=\"font-family: Georgia;\">In this section, we\u2019ll go over the general architecture of the Transformer model. Don\u2019t worry if you don\u2019t understand some of the concepts; there are detailed sections later covering each of the components.<\/p>\n\n- <a href=\"https:\/\/youtu.be\/ftWlj4FBHTg\" style=\"font-family: Georgia; color: darkred; font-weight: bold;\">VIDEO LINK - TRANSFER LEARNING - HUGGING FACE CHANNEL<\/a><br><br>\n\n<b style=\"font-family: Georgia; text-decoration: underline; text-transform: uppercase; font-size: 15px;\">ARCHITECTURE INTRODUCTION<\/b>\n\n<p style=\"font-family: Georgia;\">The model is primarily composed of two blocks:<\/p>\n\n<ul style=\"font-family: Georgia;\">\n    <li>\n        <b>Encoder (left):<\/b> The encoder receives an input and builds a representation of it (its features). This means that the model is optimized to acquire understanding from the input.\n    <\/li>\n    <li>\n        <b>Decoder (right):<\/b> The decoder uses the encoder\u2019s representation (features) along with other inputs to generate a target sequence. This means that the model is optimized for generating outputs.\n    <\/li>\n<\/ul><br>\n\n<center><img src=\"https:\/\/huggingface.co\/course\/static\/chapter1\/transformers_blocks.png\" width=25%><\/center><br>\n\n<p style=\"font-family: Georgia;\">Each of these parts can be used independently, depending on the task:<\/p>\n\n<ul style=\"font-family: Georgia;\">\n    <li>\n        <b>Encoder-Only Models:<\/b> Good for tasks that require understanding of the input, such as sentence classification and named entity recognition.\n    <\/li>\n    <li>\n        <b>Decoder-Only Models:<\/b> Good for generative tasks such as text generation.\n    <\/li>\n    <li>\n        <b>Encoder-Eecoder Models<\/b> or sequence-to-sequence models: Good for generative tasks that require an input, such as translation or summarization.\n    <\/li>\n<\/ul>\n\n<p style=\"font-family: Georgia;\">We will dive into those architectures independently in later sections.<\/p>\n\n<br><b style=\"font-family: Georgia; text-decoration: underline; text-transform: uppercase;\">ATTENTION LAYERS<\/b>\n\n<p style=\"font-family: Georgia;\">A key feature of Transformer models is that they are built with special layers called <b><i>attention layers<\/i><\/b>. In fact, the title of the paper introducing the Transformer architecture was <b><a href=\"https:\/\/arxiv.org\/abs\/1706.03762\">\u201cAttention Is All You Need\u201d<\/a>!<\/b> We will explore the details of attention layers later in the course; for now, all you need to know is that this layer will tell the model to pay specific attention to certain words in the sentence you passed it (and more or less ignore the others) when dealing with the representation of each word.<\/p>\n\n<p style=\"font-family: Georgia;\">To put this into context, consider the task of translating text from English to French. Given the input \u201cYou like this course\u201d, a translation model will need to also attend to the adjacent word \u201cYou\u201d to get the proper translation for the word \u201clike\u201d, because in French the verb \u201clike\u201d is conjugated differently depending on the subject. The rest of the sentence, however, is not useful for the translation of that word. In the same vein, when translating \u201cthis\u201d the model will also need to pay attention to the word \u201ccourse\u201d, because \u201cthis\u201d translates differently depending on whether the associated noun is masculine or feminine. Again, the other words in the sentence will not matter for the translation of \u201cthis\u201d. With more complex sentences (and more complex grammar rules), the model would need to pay special attention to words that might appear farther away in the sentence to properly translate each word.<\/p>\n\n<p style=\"font-family: Georgia;\">The same concept applies to any task associated with natural language: a word by itself has a meaning, but that meaning is deeply affected by the context, which can be any other word (or words) before or after the word being studied.<\/p>\n\n<p style=\"font-family: Georgia;\">Now that you have an idea of what attention layers are all about, let\u2019s take a closer look at the Transformer architecture.<\/p>\n\n<br><b style=\"font-family: Georgia; text-decoration: underline; text-transform: uppercase; font-size: 15px;\">THE ORIGINAL ARCHITECTURE<\/b>\n\n<p style=\"font-family: Georgia;\">The Transformer architecture was originally designed for translation. During training, the encoder receives inputs (sentences) in a certain language, while the decoder receives the same sentences in the desired target language. In the encoder, the attention layers can use all the words in a sentence (since, as we just saw, the translation of a given word can be dependent on what is after as well as before it in the sentence). The decoder, however, works sequentially and can only pay attention to the words in the sentence that it has already translated (so, only the words before the word currently being generated). For example, when we have predicted the first three words of the translated target, we give them to the decoder which then uses all the inputs of the encoder to try to predict the fourth word.<\/p>\n\n<p style=\"font-family: Georgia;\">To speed things up during training (when the model has access to target sentences), the decoder is fed the whole target, but it is not allowed to use future words (if it had access to the word at position 2 when trying to predict the word at position 2, the problem would not be very hard!). For instance, when trying to predict the fourth word, the attention layer will only have access to the words in positions 1 to 3.<\/p>\n\n<p style=\"font-family: Georgia;\">The original Transformer architecture looked like this, with the encoder on the left and the decoder on the right:<\/p>\n\n<br><center><img src=\"https:\/\/huggingface.co\/course\/static\/chapter1\/transformers.png\" width=35%><\/center><br>\n\n<p style=\"font-family: Georgia;\">Note that the the first attention layer in a decoder block pays attention to all (past) inputs to the decoder, but the second attention layer uses the output of the encoder. It can thus access the whole input sentence to best predict the current word. This is very useful as different languages can have grammatical rules that put the words in different orders, or some context provided later in the sentence may be helpful to determine the best translation of a given word.<\/p>\n\n<p style=\"font-family: Georgia;\">The <b><i>attention mask<\/i><\/b> can also be used in the encoder\/decoder to prevent the model from paying attention to some special words \u2014 for instance, the special padding word used to make all the inputs the same length when batching together sentences.<\/p>\n\n<br><b style=\"font-family: Georgia; text-decoration: underline; text-transform: uppercase; font-size: 15px;\">Architectures vs. checkpoints<\/b>\n\n<p style=\"font-family: Georgia;\">As we dive into Transformer models in this course, you\u2019ll see mentions of <i>architectures<\/i> and <i>checkpoints<\/i> as well as <i>models<\/i>. These terms all have slightly different meanings:<\/p>\n\n<ul style=\"font-family: Georgia;\">\n    <li>\n        <b>Architecture:<\/b> This is the skeleton of the model \u2014 the definition of each layer and each operation that happens within the model.\n    <\/li>\n    <li>\n        <b>Checkpoints:<\/b> These are the weights that will be loaded in a given architecture.\n    <\/li>\n    <li>\n        <b>Model:<\/b> This is an umbrella term that isn\u2019t as precise as \u201carchitecture\u201d or \u201ccheckpoint\u201d: it can mean both. This course will specify <i>architecture<\/i> or <i>checkpoint<\/i> when it matters to reduce ambiguity.\n    <\/li>\n<\/ul>\n\n<p style=\"font-family: Georgia;\">For example, <b>BERT<\/b> is an architecture while <b><code>bert-base-cased<\/code><\/b>, a set of weights trained by the Google team for the first release of <b>BERT<\/b>, is a checkpoint. However, one can say \u201cthe <b>BERT<\/b> model\u201d and \u201cthe <b><code>bert-base-cased<\/code><\/b> model.\u201d<\/p>\n\n","0811fb80":"<a id=\"0_3\"><\/a>\n\n<h3 style=\"font-family: Georgia; font-size: 20px; font-style: normal; font-weight: normal; text-decoration: none; text-transform: none; letter-spacing: 2px; color: black; background-color: #ffffff;\">0.3 USING A VIRTUAL ENVIRONMENT&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"#chapter_0\">&#10514;<\/a><\/h3>\n\n---\n\n<p style=\"font-family: Georgia;\">This section is pending and we will currently direct those interested in using a virtual environment to <a href=\"https:\/\/huggingface.co\/course\/chapter0\/1?fw=tf#using-a-python-virtual-environment\"><b>the original Hugging Face course section on this topic.<\/b><\/a><\/p>","7848a170":"<a id=\"1_2\"><\/a>\n\n<h3 style=\"font-family: Georgia; font-size: 20px; font-style: normal; font-weight: normal; text-decoration: none; text-transform: none; letter-spacing: 2px; color: black; background-color: #ffffff;\">1.2 TRANSFORMERS: WHAT CAN THEY DO?&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"#chapter_1\">&#10514;<\/a><\/h3>\n\n---\n\n<p style=\"font-family: Georgia;\">In this section, we will look at what Transformer models can do and use our first tool from the \ud83e\udd17 Transformers library: the pipeline() function.<\/p><br>\n\n<b style=\"font-family: Georgia; text-decoration: underline; font-size: 15px;\">TRANSFORMERS ARE EVERYWHERE!<\/b>\n\n<p style=\"font-family: Georgia;\">Transformer models are used to solve all kinds of NLP tasks, like the ones mentioned in the previous section. Here are some of the companies and organizations using Hugging Face and Transformer models, who also contribute back to the community by sharing their models:<\/p><br>\n\n<center><img src=\"https:\/\/huggingface.co\/course\/static\/chapter1\/companies.PNG\"><\/center><br>\n\n<p style=\"font-family: Georgia;\">The <a href=\"https:\/\/github.com\/huggingface\/transformers\" style=\"font-weight: bold;\">\ud83e\udd17 Transformers Library<\/a> provides the functionality to create and use those shared models. The <a href=\"https:\/\/huggingface.co\/models\" style=\"font-weight: bold;\">Model Hub<\/a> contains thousands of pretrained models that anyone can download and use. You can also upload your own models to the Hub!<\/p>\n\n<center><div class=\"alert alert-block alert-success\" style=\"margin: 2em; line-height: 1.5em; font-family: Georgia; font-size: 12px; \">\n    <br><b>\u26a0\ufe0f&nbsp;&nbsp;The <a href=\"https:\/\/huggingface.co\/models\">Hugging Face Hub<\/a> is not limited to Transformer models. Anyone can share any kind of models or datasets they want! Create a <a href=\"huggingface.co\">huggingface.co<\/a> account to benefit from all available features!<\/b><br><br>\n<\/div><\/center>\n\n<p style=\"font-family: Georgia;\">Before diving into how Transformer models work under the hood, let\u2019s look at a few examples of how they can be used to solve some interesting NLP problems.<\/p>\n\n<center><div class=\"alert alert-block alert-info\" style=\"margin: 2em; line-height: 1.5em; font-family: Georgia; font-size: 12px;\">\n    <br><b>\u26a0\ufe0f&nbsp;&nbsp;Video's cannot be rendered in Markdown (as far as I'm aware) and as a result I will not be embedding video links. I will simply share the link to the youtube video directly.<\/b><br><br>\n<\/div><\/center><br>\n\n<b style=\"font-family: Georgia; text-decoration: underline; font-size: 15px;\">WORKING WITH PIPELINES<\/b>\n\n- <a href=\"https:\/\/www.youtube.com\/watch?v=tiZFewofSLM\" style=\"font-family: Georgia; color: darkred; font-weight: bold;\">VIDEO LINK - THE PIPELINE FUNCTION - HUGGING FACE CHANNEL<\/a>\n\n<p style=\"font-family: Georgia;\">The most basic object in the \ud83e\udd17 Transformers library is the <b><code>pipeline()<\/code><\/b> function. It connects a model with its necessary preprocessing and postprocessing steps, allowing us to directly input any text (or lists of text statements) and get an intelligible answer.<\/p>\n\n<p style=\"font-family: Georgia;\">By default, the pipeline shown below selects a particular pretrained model that has been fine-tuned for sentiment analysis in English. The model is downloaded and cached when you create the classifier object. If you rerun the command, the cached model will be used instead and there is no need to download the model again.<p><br>\n    \n<p style=\"font-family: Georgia; font-weight: bold;\">There are three main steps involved when you pass some text to a pipeline:<\/p>\n\n<ol style=\"font-family: Georgia;\">\n    <li>The text is preprocessed into a format the model can understand.<\/li>\n    <li>The preprocessed inputs are passed to the model.<\/li>\n    <li>The predictions of the model are post-processed, so you can make sense of them.<\/li>\n<\/ol><br>\n    \n<p style=\"font-family: Georgia; font-weight: bold;\">Some of the currently available pipelines are:<\/p>\n\n<ul style=\"font-family: Georgia;\">\n    <li>sentiment-analysis<\/li>\n    <li>feature-extraction (get the vector representation of a text)<\/li>\n    <li>fill-mask<\/li>\n    <li>ner (named entity recognition)<\/li>\n    <li>question-answering<\/li>\n    <li>summarization<\/li>\n    <li>text-generation<\/li>\n    <li>translation<\/li>\n    <li>zero-shot-classification<\/li>\n<\/ul><br>\n\nLet\u2019s have a look at a few of these <b>starting with sentiment analysis<\/b>!!","4e67e751":"<br><b style=\"font-family: Georgia; text-decoration: underline; font-size: 15px;\">NAMED ENTITY RECOGNITION (NER)<\/b>\n<p style=\"font-family: Georgia; font-size: 8px; color:dark-red;\">Text description below comes from this <a href=\"https:\/\/medium.com\/mysuperai\/what-is-named-entity-recognition-ner-and-how-can-i-use-it-2b68cf6f545d\" style=\"font-weight: bold;\">blog-post\/tutorial.<\/a> and the course content.<\/p><br>\n\n<p style=\"font-family: Georgia;\">Named entity recognition (NER) is a task where the model has to find which parts of the input text correspond to entities such as persons, locations, or organizations.It is sometimes referred to as entity chunking, extraction, or identification. An entity can be any word or series of words that consistently refers to the same thing. Every detected entity is classified into a predetermined category. For example, an NER machine learning (ML) model might detect the word \u201csuper.AI\u201d in a text and classify it as a \u201cCompany\u201d.<\/p>\n\n<p style=\"font-family: Georgia;\">*In the first example below, the model correctly identified that Sylvain is a person (PER), Hugging Face an organization (ORG), and Brooklyn a location (LOC).<\/p>\n\n<p style=\"font-family: Georgia;\">We pass the option <b><code>grouped_entities=True<\/code><\/b> in the pipeline creation function to tell the pipeline to regroup together the parts of the sentence that correspond to the same entity: In the first example below, the model correctly grouped \u201cHugging\u201d and \u201cFace\u201d as a single organization, even though the name consists of multiple words. In fact, as we will see in the <b><a href=\"https:\/\/www.kaggle.com\/dschettler8845\/transformers-course-chapter-2-tf-torch\">next chapter<\/a><\/b>, the preprocessing even splits some words into smaller parts. For instance, Sylvain is split into four pieces: S, ##yl, ##va, and ##in. In the post-processing step, the pipeline successfully regrouped those pieces.<\/p>\n\n<center><div class=\"alert alert-block alert-success\" style=\"margin: 2em; line-height: 1.5em; font-family: Georgia; font-size: 12px; \">\n    <br><b>\u270f\ufe0f&nbsp;&nbsp;<b style=\"color: black;\">TRY IT OUT!<\/b>&nbsp;&nbsp;&nbsp;&nbsp; Search the <a href=\"https:\/\/huggingface.co\/models\" style=\"font-weight: bold;\">Model Hub<\/a> for a model able to do part-of-speech tagging (usually abbreviated as POS) in English. What does this model predict for the sentence in the first example below?<\/b><br><br>\n<\/div><\/center>\n"}}