{"cell_type":{"5ce64700":"code","4ea0fa34":"code","d6fbb8af":"code","371fa76c":"code","c144ff38":"code","c54829f9":"code","e635064d":"code","75cf1c7c":"code","ce6ee0ee":"code","3ac4da4b":"code","eb54315a":"code","1c518e0c":"code","b4987b48":"code","743e48e0":"code","a39e8874":"code","19074ad0":"code","9242c875":"code","16290047":"code","e24a326c":"code","0da80594":"code","aa244673":"code","f5a692a3":"code","11b0a78c":"code","1b811fe8":"code","6feefa11":"code","705c44fe":"code","b4a95cdc":"code","73dd9310":"code","4106c607":"code","4eb78c9b":"code","20c352dd":"code","d0d74e15":"code","d860ecfc":"code","934b1ff9":"code","735320d5":"code","774cd657":"code","5230e940":"code","aeb77de3":"code","bb5603b6":"code","3b949a6c":"code","0f22ff63":"code","ad13b329":"code","9a24231f":"code","8ee44251":"code","e327679f":"code","72074789":"code","45c264bc":"code","54bc9229":"code","6890e914":"code","1261417b":"markdown","5d69b731":"markdown","31da97aa":"markdown","0351f495":"markdown","a73d2ee1":"markdown","6ce71ab4":"markdown","14660e7b":"markdown","7a034871":"markdown","acac1eec":"markdown","06f0f738":"markdown","3cabd1c2":"markdown","380b76ce":"markdown","7fd187a9":"markdown","64cebc15":"markdown","2f1cc2c5":"markdown","1be4c788":"markdown","549dfc8c":"markdown","4fe7421e":"markdown","1e57d76a":"markdown","e7a82cd1":"markdown","d615192e":"markdown","395153d7":"markdown","a5f65821":"markdown","72ee2e84":"markdown","a933589b":"markdown","d6858928":"markdown","013f8038":"markdown","a5a0c4a0":"markdown","3e46844e":"markdown","7aeb5bc5":"markdown","873fae10":"markdown","dbdd40ec":"markdown","1b609fe3":"markdown","ce2202a9":"markdown","241f8c54":"markdown","f054c556":"markdown","663ff361":"markdown","028fce3c":"markdown","ffddeccf":"markdown","f6705904":"markdown","6d22a2ac":"markdown","32d1c31b":"markdown","df3e7dda":"markdown","375b5c76":"markdown","6e3dd4ef":"markdown","500e3f4a":"markdown","466a6203":"markdown","a153de0d":"markdown","55b83030":"markdown","1f14270c":"markdown","67a6097d":"markdown","9b33303d":"markdown"},"source":{"5ce64700":"import numpy as np  # useful for scientific computings in python\nimport pandas as pd # primary data structure library\n\n\n# use the inline backend to generate the plots within the browser\n%matplotlib inline \n\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt # library for creating plots\n\nmpl.style.use('ggplot') # optional: for ggplot-like style\n\n# check for latest version of Matplotlib\nprint ('Matplotlib version: ', mpl.__version__) # >= 2.0.0","4ea0fa34":"import os\n# os.chdir('\/kaggle\/working')\nos.getcwd()\nprint(os.listdir(\"..\/input\"))","d6fbb8af":"# there are three sheets in the imported excel file\n\n# the first sheet is Regions by Citizenship, \n# the second sheet is Canada by Citizenship, and \n# the third sheet is Canada by Citizenship2\n\n# In this Study we will focus on Canada by Citizenship, \n\n# we have skip first 20 rows as it contains poster of an organization \n# and also the last two rows as they contain information about immigrants from \"unknown\" region and the \"total\"\n# of all immigrants \n\n# We name our dataset \"df\"\n\ndf = pd.read_excel('..\/input\/immigration-to-canada-ibm-dataset\/Canada.xlsx',\n                     sheet_name='Canada by Citizenship',\n                     skiprows = range(20),\n                     skipfooter = 2)\n","371fa76c":"# to check if the data is imported correctly, with correct heaaders and formats\n\ndf.head(5)\n\n# viewing the last five rows of the data\ndf.tail(5)\n\n# to get a concise summary of the dataframe\n# df.info()\n\n# To get the list of column names \n# df.columns.values\n\n# size of dataframe (rows, columns)\n# df.shape   ","c144ff38":"# remove columns not important for the analysis\ndf.drop([\"Type\", \"Coverage\", \"AREA\", \"REG\", \"DEV\", \"DevName\"], axis = 1, inplace = True)\n\n# When inplace = True is used, it performs operation on data and nothing is returned.\n# When inplace=False is used, it performs operation on data and returns a new copy of data.\n\n# rename the columns to make them more clear\ndf.rename(columns={\"OdName\":\"Country_of_Origin\", \"RegName\":\"Region\", \"AreaName\": \"Continent\"}, inplace=True)\n# df.head(5)\n\n# add a 'Total' column that sums the total immigrants by country of origin over the entire period 1980 - 2013\ndf[\"Total\"] = df.iloc[:,3:37].sum(axis=1)\n# df.head(5)\n\n# to check the missing values in individual columns\n# df.isnull().sum()\n# We find that there are no null values in our dataset.\n\n# summary of all numerical columns in our dataframe \ndf.describe()\n\n# To get the list of indicies \ndf.index.values","c54829f9":"### Practice on Indexing of rows and columns in python\n\n# df[[\"Country_of_Origin\"]] # returns a dataframe\n# df.Country_of_Origin # returns a list\n# df[\"Country of Origin\"] # returns a list\n\n# filtering on the list of countries of origin and the data for years: 1980 - 1985\n\n#df.iloc[:3] # First 3 rows\n#df.iloc[3] # third row in the form of list\n#df.iloc[[3]] # third row in the form of dataframe\n#df.iloc[1,3:] # first row ans columns starting from 3 to end\n#df.iloc[[0,2], [1,3]] # zeroth and second row and first and third column\n\n# df.iloc[:, np.r_[1,3:9]] # columns 3 to 8, upper limit not included; np.r_ used to combine slices\n\n\n# Setting the index for the data\ndf.set_index('Country_of_Origin', inplace=True)\n# To reset the index, we can use df.reset_index()\n# optional: to remove the name of the index: df.index.name = None\n\n# Checking the data for the particular index \ndf.loc[[\"Australia\"]] # as dataframe\n# df.loc[\"Australia\"] # as a list\n\n# If Country_of_origin is not set as index then to access \"Australia\" then  to access data for Australia\n# print(df.loc[df[\"Country_of_Origin\"]=='Australia'])\n\n\n# View the number of immigrants from Australia (row 87) for years 1980 to 1985\nprint(df.loc[\"Australia\", [1980, 1981, 1982, 1983, 1984, 1985]])\n\n# year column names (1980 to 2013) are integers, but they are just names so convert them to strings\n# so converting 1980 to 2013 into strings: '1980' to '2013'.\n# df.iloc[:,4:38].columns = df.iloc[:,4:38].columns.astype(str)\n# df.info()\n\n# Practice on Filtering\n\n# Filtering based on a criteria\n# condition = df[\"Continent\"]== \"Oceania\"\n# df[condition]\n\n# Multiple conditions\n# df[(df[\"Continent\"]== \"Oceania\") & (df[\"Region\"]==\"Australia and New Zealand\")]\n","e635064d":"# Creating a list of all years from 1980 to 2013\nyears =  list(range(1980,2014))","75cf1c7c":"australia = df.loc[\"Australia\", years]\n# australia.index = australia.index.map(int)\naustralia.plot(kind='line')\n\nplt.title('Immigration from Australia')\nplt.ylabel('Number of immigrants')\nplt.xlabel('Years')\n# plt.text(2010, 6000, '2010 Earthquake') \nplt.show()","ce6ee0ee":"# australia # is the series with X axis labels, years as rows\n\nCI = df.loc[[\"China\", \"India\"], years] # Creating CI in the same way as haiti\n# CI # We see that  is a dataframe, with X axis labels as columns, so to convert it into the same form as haiti to \n# plot the graph we need to take the transpose\nCI = CI.transpose()\n\nCI.plot(kind='line')\n# CI.index =CI.index.map(int) # if we convert the years column names to string the\n\n\nplt.title('Immigration from China and India')\nplt.ylabel('Number of immigrants')\nplt.xlabel('Years')\nplt.legend()\nplt.show() ","3ac4da4b":"# df[\"Total\"].nlargest(5).index.values\n\ndf[\"Total\"].nlargest(5)\ntop5 = df.loc[['India', 'China','United Kingdom of Great Britain and Northern Ireland', 'Philippines', 'Pakistan'], years]\ntop5 = top5.transpose()\n\ntop5.plot(kind=\"line\", figsize= (15,14))\n\nplt.title(\"Trend of top 5 countries that contributed \\n the most to immigration to Canada\")\nplt.xlabel(\"Year\")\nplt.ylabel(\"Number of Immigrants\")\nplt.legend()\nplt.show()","eb54315a":"##### b1) using scripting layer (procedural method) i.e. matplotlib.pyplot as plt\n\ndf[\"Total\"].nlargest(5)\ntop5 = df.loc[['India','China','United Kingdom of Great Britain and Northern Ireland', 'Philippines', 'Pakistan'], years]\ntop5 = top5.transpose()\n\ntop5.plot(kind='area',\n                stacked=False, # default True; stacked= False, implies, all coutries start from origin, \n                            # displayed scale 0-40000, otherwise  0-120000\n                alpha=0.35, # 0-1, default value a= 0.5 \n                figsize=(20, 10), # pass a tuple (x, y) size\n             )\n\nplt.title('Trend of top 5 countries that contributed \\n the most to immigration to Canada')\nplt.ylabel('Number of Immigrants')\nplt.xlabel('Years')\n\nplt.show()\n\n##### b2) using artist layer to manipulate advanced aspects of the plots.\n# Use an Axes instance of our current plot and store it in a variable (eg. ax). We can add more elements\n# by calling methods by adding \"set_\" to the previous methods. For example, ax.set_title() instead of plt.title()\n# to add title, or ax.set_xlabel() instead of plt.xlabel() to add label to the x-axis.\n\n# df[\"Total\"].nlargest(5)\n# top5 = df.loc[['India','China','United Kingdom of Great Britain and Northern Ireland', 'Philippines', 'Pakistan'], years]\n# top5 = top5.transpose()\n\n# ax = top5.plot(kind='area', stacked= False, alpha=0.35, figsize=(20, 10))\n\n# ax.set_title('Immigration Trend of Top 5 Countries')\n# ax.set_ylabel('Number of Immigrants')\n# ax.set_xlabel('Years')","1c518e0c":"df[\"Total\"].nsmallest(5)","b4987b48":"# Plotting for the 5 countries with the least number of immigrants to Canada\n\n## b1) using scripting layer (procedural method) i.e. matplotlib.pyplot as plt\n\nbottom5 = df.loc[['San Marino','New Caledonia','Marshall Islands','Western Sahara','Palau'], years]\nbottom5 = bottom5.transpose()\n\nbottom5.plot(kind='area',\n#                  stacked=False, # default True; stacked= False, implies, all coutries start from origin, \n                            # displayed scale 0-40000, otherwise  0-120000\n                alpha=0.45, # 0-1, default value a= 0.5 \n                figsize=(20, 10), # pass a tuple (x, y) size\n             )\n\nplt.title('5 countries that contributed \\n the least to immigration to Canada')\nplt.ylabel('Number of Immigrants')\nplt.xlabel('Years')\n\nplt.show()\n\n##### b2) using artist layer to manipulate advanced aspects of the plots.\n# Use an Axes instance of our current plot and store it in a variable (eg. ax). We can add more elements\n# by calling methods by adding \"set_\" to the previous methods. For example, ax.set_title() instead of plt.title()\n# to add title, or ax.set_xlabel() instead of plt.xlabel() to add label to the x-axis.\n\n# df[\"Total\"].nsmallest(5)\n# bottom5 = df.loc[['San Marino','New Caledonia','Marshall Islands','Western Sahara','Palau'], years]\n# bottom5 = bottom5.transpose()\n\n# ax = bottom5.plot(kind='area', stacked= False, alpha=0.55, figsize=(20, 10))\n\n# ax.set_title('5 countries that contributed \\n the least to immigration to Canada')\n# ax.set_ylabel('Number of Immigrants')\n# ax.set_xlabel('Years')","743e48e0":"df_continents=df.groupby(df[\"Continent\"]).sum()\n# df_conti.transpose()\ncount, bin_edges = np.histogram(df_continents['Total'])\nprint(count)\nprint(bin_edges)\ndf_continents[\"Total\"].plot(kind='hist',\n                           figsize=(10, 6), \n                           color=\"dodgerblue\",\n                           edgecolor = 'white', linewidth=1,)\n\nplt.title('Histogram of Total number of immigrants \\n from 6 Continents \\n over the years 1986 to 2013')\nplt.ylabel('Number of Continents')\nplt.xlabel('Number of Immigrants')\nplt.show()\n# df_continents","a39e8874":"colors_list = ['gold', 'yellowgreen', 'lightcoral', 'lightskyblue', 'lightgreen', 'pink']\nexplode_list = [0.1, 0, 0, 0, 0.1, 0.1] # ratio for each continent with which to offset each wedge.\n\ndf_continents['Total'].plot(kind='pie',\n                            figsize=(15, 6),\n                            autopct='%1.1f%%', # autopct - is a string or function used to label the wedges with\n                            # their numeric value. The label will be placed inside the wedge. If it is a format \n                            # string, the label will be fmt%pct\n                            startangle=90, \n                            explode=explode_list, # 'explode' lowest 3 continents\n                            # Continents-their colored slice- their reference in explode_list start anticlockwise\n                            # from this 90 degree angle line\n                            # [gold piece (Africa) shifts by 0.1;'lightgreen' (Northern America) shifts by 0.1,\n                            # 'pink' (Oceania) shifts by 0.1]                            \n                            shadow=True,       \n                            labels=None,         # turn off labels on pie chart\n                            pctdistance=1.12,    # the ratio between the center of each pie slice and the start \n                            # of the text generated by autopct \n                            colors=colors_list  # add custom colors\n                           )\n\n# scale the title up by 12% to match pctdistance\nplt.title('Immigration to Canada by Continent [1980 - 2013]', y=1.12) \n\nplt.axis('equal') \n\n# add legend\nplt.legend(labels=df_continents.index, loc='upper left') \n\nplt.show()","19074ad0":"explode_list = [0.1, 0, 0, 0, 0.1, 0.2] # ratio for each continent with which to offset each wedge.\ndf_continents=df.groupby(df[\"Continent\"]).sum()\ndf_continents_2013 = df_continents[2013]\ndf_continents_2013.plot(kind = \"pie\", figsize = (15, 6),\n                       autopct =\"%1.1f%%\",\n                       labels=None,\n                       pctdistance = 1.12,\n                       startangle=90,\n                       explode=explode_list,\n                       shadow = False\n                       )\n# scale the title up by 12% to match pctdistance\nplt.title('Immigration to Canada by Continent in 2013', y=1.12)\nplt.axis('equal') \nplt.legend(labels=df_continents_2013.index, loc='upper left') \nplt.show()","9242c875":"df_CI =df.loc[[\"India\", \"China\"], years]\n# df_CI.plot(kind=\"hist\")\ndf_CI = df_CI.transpose()\ncount, bin_edges = np.histogram(df_CI, 15) # To get the default count and bin_edges for the data to be poltted\n# count, bin_edges = np.histogram(df_CI, 15) # To check the count and bin_edges change by increasing the bins to 15  \nprint(count)\nprint(bin_edges)\n\nxmin = bin_edges[0]-1000    #  first bin value is 1527.0, adding buffer of 1000 for aesthetic purposes \nxmax = bin_edges[-1]+1000   #  last bin value is 43584.0, adding buffer of 1000 for aesthetic purposes\nprint(xmin)\nprint(xmax)\n\ndf_CI.plot(kind='hist', figsize=(10, 6),\n#           bins=15,\n          stacked=True,alpha=0.8, \n          color=['tomato','midnightblue'], edgecolor=\"white\",\n          xlim= (xmin, xmax))\n\nplt.title('Histogram of Immigration from China and India from 1980 - 2013')\nplt.ylabel('Number of Years')\nplt.xlabel('Number of Immigrants')\n\nplt.show()","16290047":"df_CI.plot(kind='box', figsize=(6, 8),\n          color='dodgerblue', \n#         patch_artist=True, # To fill the color \n          vert=False)\nplt.title('Boxplots of Immigration \\n from China and India to Canada \\n from 1980 - 2013')\nplt.xlabel('Number of Immigrants')\n\nplt.show()","e24a326c":"# step 1: get the data\ndf_iceland = df.loc['Iceland', years]\ndf_iceland.head()\n\ndf_iceland.plot(kind='bar', figsize=(10, 6), rot=90) \n\nplt.xlabel('Year')\nplt.ylabel('Number of Immigrants')\nplt.title('Icelandic Immigrants to Canada from 1980 to 2013')\n\n# Annotate arrow\nplt.annotate('',                      # s: str. will leave it blank for no text\n             xy=(32, 70),             # place head of the arrow at point (year 2012 , pop 70)\n             xytext=(28, 20),         # place base of the arrow at point (year 2008 , pop 20)\n             xycoords='data',         # will use the coordinate system of the object being annotated \n             arrowprops=dict(arrowstyle='->', connectionstyle=\"arc3,rad=0.0\",color='blue', lw=2)\n            )\n\n# Annotate Text\nplt.annotate('2008 - 2011 Financial Crisis', # text to display\n             xy=(28, 30),                    # start the text at at point (year 2008 , pop 30)\n             rotation=72.8,                  # based on trial and error to match the arrow\n             va='bottom',                    # want the text to be vertically 'bottom' aligned\n             ha='left'                      # want the text to be horizontally 'left' algned.\n            )\n\nplt.show()\n# reference: https:\/\/matplotlib.org\/3.1.0\/gallery\/userdemo\/connectionstyle_demo.html","0da80594":"# Vertical Bar plot\n# top15 = df[\"Total\"].nlargest(15)\n# top15.plot(kind=\"bar\", figsize=(25,25), color=\"midnightblue\") # kind=\"bar\" for vertical plots and \"barh\" for horizontal plots\n\n# plt.xlabel('Country of Origin', fontweight=\"bold\", size=15)\n# plt.ylabel('Number of Immigrants', fontweight=\"bold\", size=15)\n# plt.title('Top 15 Countries Contributing to the Immigration to Canada between 1980 - 2013', \n#          size=15, fontweight=\"bold\")\n# plt.yticks(fontsize=12, rotation=0)\n# plt.xticks(fontsize=12, rotation=90)\n# for index, value in enumerate(top15): \n#     label = format(int(value), ',') # format int with commas\n    \n#     # place text at the end of bar (subtracting 47000 from x, and 0.1 from y to make it fit within the bar)\n#     plt.annotate(label, xy=(index, value-10000), color='white', size=15, fontweight=\"bold\", rotation =90)\n# top15\n\n# Horizontal Bar plot\ntop15 = df[\"Total\"].nlargest(15)\ntop15.plot(kind=\"barh\", figsize=(20,20), color=\"midnightblue\") # kind=\"bar\" for vertical plots and \"barh\" for horizontal plots\n\nplt.xlabel('Number of Immigrants', fontweight=\"bold\", size=15)\nplt.ylabel('Country of Origin', fontweight=\"bold\", size=15)\nplt.title('Top 15 Countries Contributing to the Immigration to Canada between 1980 - 2013', \n         size=15, fontweight=\"bold\")\nplt.yticks(fontsize=15, rotation=0)\nplt.xticks(fontsize=15, rotation=0)\nfor index, value in enumerate(top15): \n    label = format(int(value), ',') # format int with commas\n    \n    # place text at the end of bar (subtracting 47000 from x, and 0.1 from y to make it fit within the bar)\n    plt.annotate(label, xy=(value-48500, index-0.05), color='white', size=15, fontweight=\"bold\", rotation =0)\ntop15","aa244673":"df_japan = df.loc[[\"Japan\"], years]\ndf_japan = df_japan.transpose()\ndf_japan.plot(kind=\"box\")\nplt.title('Box plot of Japanese Immigrants from 1980 - 2013')\nplt.ylabel('Number of Immigrants')\ndf_japan.describe()","f5a692a3":"fig = plt.figure() # create figure\n\nax0 = fig.add_subplot(1, 2, 1) # add subplot 1 (1 row, 2 columns, first plot)\nax1 = fig.add_subplot(1, 2, 2) # add subplot 2 (1 row, 2 columns, second plot). See tip below**\n\n# Subplot 1: Box plot\ndf_CI.plot(kind='box', color='DarkGreen', vert=False, figsize=(15, 4), ax=ax0) # add to subplot 1\nax0.set_title('Box Plots of Immigrants from China and India (1980 - 2013)')\nax0.set_xlabel('Number of Immigrants')\nax0.set_ylabel('Countries')\n\n# Subplot 2: Line plot\ndf_CI.plot(kind='line', figsize=(15, 4), ax=ax1) # add to subplot 2\nax1.set_title ('Line Plots of Immigrants from China and India (1980 - 2013)')\nax1.set_ylabel('Number of Immigrants')\nax1.set_xlabel('Years')\n\nplt.show()","11b0a78c":"df_top15 = df.sort_values(['Total'], ascending=False, axis=0).head(15)\n# top15 = df[df[\"Total\"].nlargest(15)]\ndecade80s = list(range(1980,1990)) #Upper bound not included\ndecade90s = list(range(1990,2000)) #Upper bound not included\ndecade2000s = list(range(2000, 2010)) # Upper bound not included\ndf_group_80s = df_top15.loc[:, decade80s].sum(axis=1)\ndf_group_90s = df_top15.loc[:, decade90s].sum(axis=1)\ndf_group2000s = df_top15.loc[:, decade2000s].sum(axis=1)\n\ndf_new = pd.DataFrame({'1980s': df_group_80s, '1990s': df_group_90s, '2000s':df_group2000s}) \n\ndf_new.plot(kind=\"box\", figsize=(10,10))\nplt.title(\"Immigration from top 15 countries for decades 80s, 90s and 2000s\")\nplt.xlabel(\"Decades\")\nplt.ylabel(\" Number of Immigrants\")\nplt.show()\n\n\ndf_new.describe()","1b811fe8":"# let's check how many entries fall above the outlier threshold for the 2000s decade\ndf_new[df_new['2000s']> 209611.5]","6feefa11":"df_all = df.loc[:, years].sum(axis=0)\ndf_all =df_all.reset_index()\n\ndf_all.columns =[\"Year\", \"Total\"]\ndf_all.plot(kind='scatter', x='Year', y='Total', figsize=(10, 6), color='darkblue')\n\nplt.title('Total Immigration to Canada from 1980 - 2013')\nplt.xlabel('Year')\nplt.ylabel('Number of Immigrants')\n\nplt.show()","705c44fe":"x = df_all['Year']      # year on x-axis\ny = df_all['Total']     # total on y-axis\nfit = np.polyfit(x, y, deg=1)\n\nfit","b4a95cdc":"df_all.plot(kind='scatter', x='Year', y='Total', figsize=(10, 6), color='darkblue')\n\nplt.title('Total Immigration to Canada from 1980 - 2013')\nplt.xlabel('Year')\nplt.ylabel('Number of Immigrants')\n\n# plot line of best fit\nplt.plot(x, fit[0] * x + fit[1], color='red') # recall that x is the Years\nplt.annotate('y={0:.0f} x + {1:.0f}'.format(fit[0], fit[1]), xy=(2000, 150000))\n\nplt.show()","73dd9310":"df_dns_total = pd.DataFrame(df.loc[[\"Denmark\", \"Norway\", \"Sweden\"], years].sum(axis=0))\ndf_dns_total =df_dns_total.reset_index()\ndf_dns_total.columns = [\"Year\", \"Total\"]\ndf_dns_total\ndf_dns_total.plot(kind = \"scatter\", x=\"Year\", y=\"Total\", color=\"indigo\", figsize=(12, 6))\nplt.xlabel(\"Year\")\nplt.ylabel(\"Total number of \\n immigrants \")\nplt.title(\"Total immigration from \\n Denmark, Norway, and Sweden to Canada \\n from 1980 to 2013\")\nplt.show()\n# df_dns_Total","4106c607":"def create_waffle_chart(categories, values, height, width, colormap, value_sign=''):\n\n# Step 1. The first step into creating a waffle chart is determing the proportion of each category with respect\n# to the total.\n        \n    # compute the proportion of each category with respect to the total\n    total_values = sum(values)\n    category_proportions = [(float(value) \/ total_values) for value in values]\n\n# Step 2. The second step is defining the overall size of the waffle chart\n\n    # compute the total number of tiles\n    total_num_tiles = width * height # total number of tiles\n    print ('Total number of tiles is', total_num_tiles)\n\n# Step 3. The third step is using the proportion of each category to determine its respective number of tiles\n\n    # compute the number of tiles for each catagory\n    tiles_per_category = [round(proportion * total_num_tiles) for proportion in category_proportions]\n\n    # print out number of tiles per category\n    for i, tiles in enumerate(tiles_per_category):\n        print (data.index.values[i] + ': ' + str(tiles))\n        \n# Step 4. The fourth step is creating a matrix that resembles the waffle chart and populating it\n# initialize the waffle chart as an empty matrix\n    \n    # initialize the waffle chart as an empty matrix\n    waffle_chart = np.zeros((height, width))\n\n    # define indices to loop through waffle chart\n    category_index = 0\n    tile_index = 0\n\n    # populate the waffle chart\n    for col in range(width):\n        for row in range(height):\n            tile_index += 1\n\n            # if the number of tiles populated for the current category \n            # is equal to its corresponding allocated tiles...\n            if tile_index > sum(tiles_per_category[0:category_index]):\n                # ...proceed to the next category\n                category_index += 1       \n            \n            # set the class value to an integer, which increases with class\n            waffle_chart[row, col] = category_index\n\n# Step 5. Map the waffle chart matrix into a visual\n    import matplotlib.patches as mpatches\n    # instantiate a new figure object\n    fig = plt.figure()\n\n    # use matshow to display the waffle chart\n    colormap = plt.cm.coolwarm\n    plt.matshow(waffle_chart, cmap=colormap)\n    plt.colorbar()\n\n    # get the axis\n    ax = plt.gca()\n\n    # set minor ticks\n    ax.set_xticks(np.arange(-.5, (width), 1), minor=True)\n    ax.set_yticks(np.arange(-.5, (height), 1), minor=True)\n    \n    # add dridlines based on minor ticks\n    ax.grid(which='minor', color='w', linestyle='-', linewidth=2)\n\n    plt.xticks([])\n    plt.yticks([])\n\n    # compute cumulative sum of individual categories to match color schemes between chart and legend\n    values_cumsum = np.cumsum(values)\n    total_values = values_cumsum[len(values_cumsum) - 1]\n\n    # create legend\n    legend_handles = []\n    for i, category in enumerate(categories):\n        if value_sign == '%':\n            label_str = category + ' (' + str(values[i]) + value_sign + ')'\n        else:\n            label_str = category + ' (' + value_sign + str(values[i]) + ')'\n            \n        color_val = colormap(float(values_cumsum[i])\/total_values)\n        legend_handles.append(mpatches.Patch(color=color_val, label=label_str))\n\n    # add legend to chart\n    plt.legend(\n        handles=legend_handles,\n        loc='lower center', \n        ncol=len(categories),\n        bbox_to_anchor=(0., -0.2, 0.95, .1)\n    )","4eb78c9b":"df_dns = df.loc[[\"Denmark\", \"Norway\", \"Sweden\"], :]\ndata = df_dns\nwidth = 40 # width of chart\nheight = 10 # height of chart\n\ncategories = df_dns.index.values # categories\nvalues = df_dns['Total'] # correponding values of categories\n\ncolormap = plt.cm.coolwarm # color map class\ncreate_waffle_chart(categories, values, height, width, colormap)","20c352dd":"# Step 1: Get the data for Brazil and Argentina \n\ndf_ba = df.loc[[\"Brazil\", \"Argentina\"], years]\ndf_ba=df_ba.transpose()\ndf_ba.index.name = 'Year'\ndf_ba = df_ba.reset_index()\n\n# Step 2: Create the normalized weights (using feature scaling)\n\n# normalize Brazil data\nnorm_brazil = (df_ba['Brazil'] - df_ba['Brazil'].min()) \/ (df_ba['Brazil'].max() - df_ba['Brazil'].min())\n\n# normalize Argentina data\nnorm_argentina = (df_ba['Argentina'] - df_ba['Argentina'].min()) \/ (df_ba['Argentina'].max() - df_ba['Argentina'].min())\n\n# Step 3: Plot the data\nax0 = df_ba.plot(kind='scatter',\n                    x='Year',\n                    y='Brazil',\n                    figsize=(14, 8),\n                    alpha=0.5,                  # transparency\n                    color='green',\n                    s=norm_brazil * 600 + 10,  # pass in weights \n                    xlim=(1975, 2015)\n                   )\n\nax1 = df_ba.plot(kind='scatter',\n                    x='Year',\n                    y='Argentina',\n                    alpha=0.5,\n                    color=\"blue\",\n                    s=norm_argentina * 600 + 10,\n                    ax = ax0 # If we don't put this, separate figure is generated for Argentina but we want the\n                             # comparison in sme plot\n                   )\n\nax0.set_ylabel('Number of Immigrants')\nax0.set_title('Immigration from Brazil and Argentina from 1980 - 2013')\nax0.legend(['Brazil', 'Argentina'], loc='upper left', fontsize='x-large')","d0d74e15":"# Step 1: Get the data for Brazil and Argentina \n\ndf_CI = df.loc[[\"China\", \"India\"], years]\ndf_CI=df_CI.transpose()\ndf_CI.index.name = 'Year'\ndf_CI = df_CI.reset_index()\n\n# Step 2: Create the normalized weights (using feature scaling)\n\n# normalize Brazil data\nnorm_china = (df_CI['China'] - df_CI['China'].min()) \/ (df_CI['China'].max() - df_CI['China'].min())\n\n# normalize Argentina data\nnorm_india = (df_CI['India'] - df_CI['India'].min()) \/ (df_CI['India'].max() - df_CI['India'].min())\n\n# Step 3: Plot the data\nax0 = df_CI.plot(kind='scatter',\n                    x='Year',\n                    y='China',\n                    figsize=(14, 8),\n                    alpha=0.5,                  # transparency\n                    color='tomato',\n                    s=norm_china * 500 + 10,  # pass in weights \n                    xlim=(1975, 2015)\n                   )\n\nax1 = df_CI.plot(kind='scatter',\n                    x='Year',\n                    y='India',\n                    alpha=0.5,\n                    color=\"indigo\",\n                    s=norm_india * 500 + 10,\n                    ax = ax0 # If we don't put this, separate figure is generated for Argentina but we want the\n                             # comparison in sme plot\n                   )\n\nax0.set_ylabel('Number of Immigrants')\nax0.set_title('Immigration from China and India from 1980 - 2013')\nax0.legend(['Brazil', 'Argentina'], loc='upper left', fontsize='x-large')","d860ecfc":"# df.columns = list(map(str, df.columns))\n# df.columns.values\n# # checking the column labels types now, if they are all str type\n# all(isinstance(column, str) for column in df.columns)","934b1ff9":"\n# import os\n# os.getcwd()\n\n# # os.chdir('\/kaggle\/working')\n\n# print(os.listdir(\"..\/input\"))\nfrom PIL import Image # converting images into arrays\n    \n# download the image(mask) and save it to to canada_mask\ncanada_mask = np.array(Image.open(\"..\/input\/mapleleaf\/di45EGLBT.jpg\"))\n\nprint('Image downloaded and saved!')\n\nfig = plt.figure(figsize=(10,10), facecolor='w')\nfig.set_figwidth(10) # set width\nfig.set_figheight(10) # set height\n\nplt.imshow(canada_mask, cmap=plt.cm.gray, interpolation='bilinear')\n# wc.recolor(color_func=image_colors), \nplt.axis('off')\nplt.show()","735320d5":"# install wordcloud\n# !conda install -c conda-forge wordcloud==1.4.1 --yes\n\n# import package and its set of stopwords\nfrom wordcloud import WordCloud, STOPWORDS\n\nprint ('Wordcloud is installed and imported!')\n\ntotal_immigration = df['Total'].sum()\ntotal_immigration\n# Using countries with single-word names, let's duplicate each country's name based on how much they contribute \n# to the total immigration\nmax_words = 90\nword_string = ''\nfor country in df.index.values:\n    # check if country's name is a single-word name\n    if len(country.split(' ')) == 1:\n        # repeat_num_times = weight calculated * 200\n        repeat_num_times = int(df.loc[country, 'Total']\/float(total_immigration)*max_words)\n        word_string = word_string + ((country + ' ') * repeat_num_times)\n                                    \n# display the generated text\nword_string","774cd657":"# create the word cloud\ndef random_color_func(word=None, font_size=None, position=None,  orientation=None, font_path=None, random_state=None):\n    h = int(360.0 * 255.0 \/ 255.0)\n    s = int(100.0 * 255.0 \/ 255.0)\n    l = int(100.0 * float(random_state.randint(60, 120)) \/ 255.0)\n\n    return \"hsl({}, {}%, {}%)\".format(h, s, l)\nwordcloud = WordCloud(mask=canada_mask, contour_width=10,background_color=\"white\",\n                      contour_color='red',color_func=random_color_func).generate(word_string)\n# ,background_color=\"white\"\nprint('Word cloud created!')","5230e940":"# display the word cloud\n\nfig = plt.figure(facecolor=\"w\")\nfig.set_figwidth(8) # set width\nfig.set_figheight(10) # set height\n\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis('off')\n# plt.style.use('dark_background')\nplt.show()","aeb77de3":"# install seaborn\n# !conda install -c anaconda seaborn --yes\n\n# import library\nimport seaborn as sns\n\nprint('Seaborn installed and imported!')","bb5603b6":"# we can use the sum() method to get the total population per year\ndf_tot = pd.DataFrame(df[years].sum(axis=0))\n\n# change the years to type float (useful for regression later on)\n# df_tot.index = map(float, df_tot.index)\n\n# reset the index to put in back in as a column in the df_tot dataframe\ndf_tot.reset_index(inplace=True)\n\n# rename columns\ndf_tot.columns = ['year', 'total']\n\n# view the final dataframe\ndf_tot.head()","3b949a6c":"plt.figure(figsize=(15, 10))\n\n# increase the font size of the tickmark labels, the title, and the x- and y-labels \nsns.set(font_scale=1.5)\n# sns.set_style('ticks') # change background to white background\nsns.set_style('whitegrid')\n\nax = sns.regplot(x='year', y='total', data=df_tot, color='green', marker='+', scatter_kws={'s': 200})\nax.set(xlabel='Year', ylabel='Total Immigration')\nax.set_title('Total Immigration to Canada from 1980 - 2013')","0f22ff63":"df_dns_tot = pd.DataFrame(df.loc[[\"Denmark\",\"Norway\",\"Sweden\"], years].sum(axis=0))\n\ndf_dns_tot\n# reset the index to put in back in as a column in the df_tot dataframe\ndf_dns_tot.reset_index(inplace=True)\n\n# rename columns\ndf_dns_tot.columns = ['year', 'total']\n\n# view the final dataframe\ndf_dns_tot.head()\n","ad13b329":"plt.figure(figsize=(15, 8))\n\n# increase the font size of the tickmark labels, the title, and the x- and y-labels \nsns.set(font_scale=1.5)\n# sns.set_style('ticks') # change background to white background\nsns.set_style('whitegrid')\n\nax = sns.regplot(x='year', y='total', data=df_dns_tot, scatter_kws={'s': 100})\nax.set(xlabel='Year', ylabel='Total Immigration')\nax.set_title('Total Immigration from Denmark, Norway and Sweden to Canada from 1980 - 2013')","9a24231f":"# !conda install -c conda-forge folium=0.5.0 --yes\nimport folium\n\nprint('Folium installed and imported!')","8ee44251":"# define the world map\n# world_map = folium.Map()\n\n# define the world map centered around Canada with a low zoom level\nworld_map = folium.Map(location=[56.130, -106.35], zoom_start=8)\n\n# display world map\nworld_map","e327679f":"# Let's create a Stamen Toner map of canada with a zoom level of 4.\n\n# create a Stamen Toner map of the world centered around Canada\nworld_map = folium.Map(location=[56.130, -106.35], zoom_start=4, tiles='Stamen Toner')\n\n# display map\nworld_map","72074789":"# Let's create a Stamen Terrain map of Canada with zoom level 4\n# create a Stamen Toner map of the world centered around Canada\nworld_map = folium.Map(location=[56.130, -106.35], zoom_start=4, tiles='Stamen Terrain')\n\n# display map\nworld_map","45c264bc":"# Let's create a Mapbox Bright world map \n# These are maps that quite similar to the default style, except that the borders are not visible with a low zoom level. \n# create a world map with a Mapbox Bright style.\n\n# world_map = folium.Map(tiles='Mapbox Bright')\n\n# display the map\n# world_map","54bc9229":"# generate choropleth map using the total immigration of each country to Canada from 1980 to 2013\ndata1 = df\ndata1.reset_index(inplace=True)\n\nworld_geo = r'..\/input\/world-countries\/world-countries.json' # geojson file\n\n# create a plain world map\nworld_map = folium.Map(location=[0, 0], zoom_start=2, tiles='Mapbox Bright')\n\n# create a numpy array of length 6 and has linear spacing from the minium total immigration to the maximum total immigration\nthreshold_scale = np.linspace(data1['Total'].min(),\n                              data1['Total'].max(),\n                              6, dtype=int)\nthreshold_scale = threshold_scale.tolist() # change the numpy array to a list\nthreshold_scale[-1] = threshold_scale[-1] + 1 # make sure that the last value of the list is greater than the maximum immigration\n\n# let Folium determine the scale.\nworld_map = folium.Map(location=[0, 0], zoom_start=2, tiles='Mapbox Bright')\n\n# generate choropleth map using the total immigration of each country to Canada from 1980 to 2013\nworld_map.choropleth(\n    geo_data=world_geo,\n    data=data1,\n    columns=['Country_of_Origin', 'Total'],\n    key_on='feature.properties.name',\n    threshold_scale=threshold_scale,\n    fill_color='YlOrRd', \n    fill_opacity=0.7, \n    line_opacity=0.2,\n    legend_name='Immigration to Canada',\n    nan_fill_color='lavender',\n    reset=True\n)\nworld_map","6890e914":"# df.columns = list(map(str, df.columns))\n# [print (type(x)) for x in df.columns.values]","1261417b":"#### b) Boxplot","5d69b731":"### 7. Immigration distribution for 'India' and 'China' to Canada for years 1980 - 2013?","31da97aa":"> #### 5b) Summarizing using pi chart","0351f495":"Step 2: Plot the regression line on the scatter plot.","a73d2ee1":"### 16. Bubble plots of immigration from China and India to visualize any differences with time from 1980 to 2013. ","6ce71ab4":"##### Our dataset is yearly data from 1980 to 2013 for the flows of international immigrants to Canada.","14660e7b":"# Immigration to Canada from 1980 to 2013","7a034871":"China and India are both considered as outliers since their population for the decade exceeds 209,611.5.","acac1eec":"Column names that are integers (such as the years) might introduce some confusion. For example, when we are referencing the year 2013, one might confuse that when the 2013th positional index.\n\nTo avoid this ambuigity, let's convert the column names into strings: '1980' to '2013'.","06f0f738":"* ### 8. Number of immigrants  from 'Iceland' to Canada from year 1980 to 2013.","3cabd1c2":"### 1. Creating a plot for immigration from Australia from 1986 to 2013","380b76ce":"Now let's try to plot a linear line of best fit, and use it to predict the number of immigrants in 2015.\n\nStep 1: Get the equation of line of best fit. We will use Numpy's polyfit() method by passing in the following:\n\nx: x-coordinates of the data.\ny: y-coordinates of the data.\ndeg: Degree of fitting polynomial. 1 = linear, 2 = quadratic, and so on.","7fd187a9":"> #### 5a) Distribution of total number of immigrants from different 'continents' to Canada from 1980 to 2013 ","64cebc15":"#### Creating waffle chart for our data\nTo create a waffle chart for our data df_EU (Denmark, Norway, Sweden), all we have to do is to call the function create_waffle_chart. Let's define the input parameters:","2f1cc2c5":"#### a) Scatter plot of the total immigration from Denmark, Norway, and Sweden to Canada from 1980 to 2013","1be4c788":"## Filtering: Selecting specific rows and columns","549dfc8c":"### 6. Explore the proportion (percentage) of new immigrants grouped by continents in the year 2013.","4fe7421e":"## Understanding Data","1e57d76a":"The box plot differs from the summary table created. The box plot scans the data and identifies the outliers. In order to be an outlier, the data value must be:\n\nlarger than Q3 by at least 1.5 times the interquartile range (IQR), or,\nsmaller than Q1 by at least 1.5 times the IQR.\nLet's look at decade 2000s as an example:\n\nQ1 (25%) = 36,101.5\nQ3 (75%) = 105,505.5\nIQR = Q3 - Q1 = 69,404\nUsing the definition of outlier, any value that is greater than Q3 by 1.5 times IQR will be flagged as outlier.\n\nOutlier > 105,505.5 + (1.5 * 69,404)\nOutlier > 209,611.5","e7a82cd1":"##### Creating the list for all the year columns in our dataset to use it for plotting","d615192e":"## Importing the data file","395153d7":"## Importing the libraries","a5f65821":"Now to know the prediction for number of immigrants for the year 2015 we will use the equation of line of best fit:\n\nNo. Immigrants = 5567 * Year - 10926195\n\nNo. Immigrants = 5567 * 2015 - 10926195\n\nNo. Immigrants = 291,310","72ee2e84":"## Data Preparation","a933589b":"### 9. Horizontal bar plot showing the total number of immigrants to Canada from the top 15 countries, for the period 1980 - 2013. ","d6858928":"Let's do that using a bubble plot of immigration from Brazil and Argentina for the years 1980 - 2013. We will set the weights for the bubble as the normalized value of the population for each year.\n\nTo plot two different scatter plots in one plot, we can include the axes one plot into the other by passing it via the ax parameter.\n\nWe will also pass in the weights using the s parameter. Given that the normalized weights are between 0-1, they won't be visible on the plot. Therefore we will:\nmultiply weights by 800 to scale it up on the graph, and,add 10 to compensate for the min value (which has a 0 weight and therefore scale with x2000).","013f8038":"##### For consistency, ensure that all column labels of type string","a5a0c4a0":"### 2. Immigration from China and India over the years 1986 to 2013","3e46844e":"As per our Choropleth map legend, the darker the color of a country and the closer the color to red, the higher the number of immigrants from that country. Accordingly, the highest immigration over the course of 33 years (from 1980 to 2013) was from China, India, and the Philippines, followed by Poland, Pakistan, and interestingly, the US.","7aeb5bc5":"#### a) Total number of landed immigrants to Canada per year from 1980 to 2013 using seaborn","873fae10":"From the plot above, we can see a corresponding increase in immigration from Argentina during the 1998 - 2002 great depression. We can also observe a similar spike around 1985 to 1993. In fact, Argentina had suffered a great depression from 1974 - 1990, just before the onset of 1998 - 2002 great depression.\n\nOn a similar note, Brazil suffered the Samba Effect where the Brazilian real (currency) dropped nearly 35% in 1999. There was a fear of a South American financial crisis as many South American countries were heavily dependent on industrial exports from Brazil. The Brazilian government subsequently adopted an austerity program, and the economy slowly recovered over the years, culminating in a surge in 2010. The immigration data reflect these events.","dbdd40ec":"### 11. To visualize multiple plots together, we can create a figure (overall canvas) and divide it into subplots, each containing a plot. With subplots, we usually work with the artist layer instead of the scripting layer.","1b609fe3":"#### a) Line Plot","ce2202a9":"### 14. Immigration from Denmark, Norway, and Sweden to Canada from 1980 to 2013","241f8c54":"### 10. Box plot for the Japanese immigrants between 1980 - 2013","f054c556":"#### b) Visualize the total immigration from Denmark, Sweden, and Norway to Canada from 1980 to 2013 using scatter plot through seaborn","663ff361":"We can clearly observe an upward trend in the data implying that the total number of immigrants have increased over the years 1980 to 2013","028fce3c":"### 12. Create a box plot to visualize the distribution of the top 15 countries (based on total immigration) grouped by the decades 1980s, 1990s, and 2000s","ffddeccf":"### 13. Visualize the trend of total immigrantion to Canada (all countries combined) for the years 1980 - 2013.","f6705904":"#### b) Area Plot","6d22a2ac":"#### a) Histogram","32d1c31b":"#### b) Waffle Chart for depicting immigrations from \"Denmark\", \"Norway\", and \"Sweden\" to Canada from 1980 to 2013 ","df3e7dda":"In order to create a `Choropleth` map, we need a GeoJSON file that defines the areas\/boundaries of the state, county, or country that we are interested in. In our case, since we are endeavoring to create a world map, we want a GeoJSON that defines the boundaries of all world countries. For your convenience, we will be providing you with this file, so let's go ahead and download it. Let's name it **world_countries.json**.\n\nAnd to create a `Choropleth` map, we will use the *choropleth* method with the following main parameters:\n\n1. geo_data, which is the GeoJSON file.\n2. data, which is the dataframe containing the data.\n3. columns, which represents the columns in the dataframe that will be used to create the `Choropleth` map.\n4. key_on, which is the key or variable in the GeoJSON file that contains the name of the variable of interest. To determine that, you will need to open the GeoJSON file using any text editor and note the name of the key or variable that contains the name of the countries, since the countries are our variable of interest. In this case, **name** is the key in the GeoJSON file that contains the name of the countries. Note that this key is case_sensitive, so you need to pass exactly as it exists in the GeoJSON file.","375b5c76":"## Data Visualizations","6e3dd4ef":"#### 15. Argentina suffered a great depression from 1998 - 2002, which caused widespread unemployment, riots, the fall of the government, and a default on the country's foreign debt. In terms of income, over 50% of Argentines were poor, and seven out of ten Argentine children were poor at the depth of the crisis in 2002. Analyze the effect of this crisis, and compare Argentina's immigration to that of it's neighbour Brazil. ","500e3f4a":"### 3. Top 5 countries that contributed the most to immigration to Canada ","466a6203":"### 4.  Five countries that contributed the least to immigration to Canada from 1980 to 2013.","a153de0d":"### 18. Regression Plots : Total number of landed immigrants to Canada per year from 1980 to 2013.","55b83030":"We are not dealing with any stopwords here, so there is no need to pass them when creating the word cloud.","1f14270c":"### 5.Summarize the immigration data by Continent","67a6097d":"#### Creating function for making waffle charts","9b33303d":"### 17. Word Cloud for our dataset: Let's generate sample text data from our immigration dataset, say text data of 90 words."}}