{"cell_type":{"7e464638":"code","8d26bac0":"code","0c260407":"code","2eb95ea6":"code","f51e7eeb":"code","cb6c0813":"code","b3866e27":"code","31645b94":"code","06602320":"code","6916dcb9":"code","6dc8ccde":"code","4242e4ce":"code","4c34cf34":"code","da5d4363":"code","60c3a75c":"code","f3d9d32a":"code","dbe8d1d3":"code","ffc3a18b":"code","f89b0cc7":"code","d9ec262b":"code","dfc976ba":"code","e6c02c85":"code","2f80a333":"code","2f63ce37":"code","b9321e3d":"code","759d9ad3":"code","949ff2b8":"code","714ed05a":"code","3b13b626":"code","a8cc260a":"code","6c926ae8":"code","b0df1e70":"code","254bf006":"code","bc51137c":"code","b1b8fcb3":"code","df267c41":"code","755032e8":"code","5ab5d4ec":"code","ce6ea196":"code","fd78f89b":"code","37321677":"code","2f7910c4":"code","aac42344":"code","4785f630":"code","7159af31":"code","de9d23ed":"code","841aca3d":"code","e4c5ddbe":"code","5d1aa003":"code","5a3c1ae6":"code","b5e1af0c":"code","5d9788b9":"code","72a83d83":"code","8f6e4f1e":"code","1fafe221":"code","14bd859d":"code","5e37c88a":"code","eaeb3ab9":"code","3851a752":"code","1d6f05bd":"code","b3c88350":"code","628a201f":"code","1c1c38ee":"code","fd1d2db7":"code","e2fde1d5":"code","1067b0b1":"code","6aea6f84":"code","d31597a4":"code","f5661c64":"code","15540124":"code","b5d7d9a3":"code","91a0c8c9":"code","50403613":"code","8201ebf5":"code","f031e2b0":"code","8e64ebaa":"code","c324d9e9":"code","c8a82a2e":"code","204ade19":"code","95d8c15c":"code","0111410a":"code","f6b31666":"code","31e54293":"code","8af247ce":"code","011b8558":"code","53bffe40":"code","70a49abc":"code","7b53a42a":"code","db791c09":"code","ed07b4d7":"code","e1bc219e":"code","7326ffc6":"code","47632927":"code","75ce85d6":"code","2f45b107":"code","eca1b338":"code","62c04653":"code","41589a71":"code","c0fbf42c":"code","44b9fba8":"code","c1872806":"code","8642459a":"code","bdb62b75":"markdown","889a2020":"markdown","57dda4de":"markdown","01fc452c":"markdown","2be3770c":"markdown","a7fecc03":"markdown","a18b720d":"markdown","6c76a695":"markdown","f860b27e":"markdown","124fa62b":"markdown","704816cd":"markdown","d839ff50":"markdown","1ad99ba1":"markdown","778738a2":"markdown","224233c4":"markdown","cd3ebe60":"markdown","1124905b":"markdown","33125a87":"markdown","92fbfc9d":"markdown","76325836":"markdown","0b85d389":"markdown"},"source":{"7e464638":"#IMPORTING LIBRARIES:\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom scipy import stats","8d26bac0":"#Importing Dataset:\ndata_shopping= pd.read_csv(\"..\/input\/big-mart-sales-prediction\/Train.csv\")","0c260407":"data_shopping.head()","2eb95ea6":"#Making a Copy of Original Data\ndata =data_shopping.copy()","f51e7eeb":"#Lowering the down column names\ndata.columns = data.columns.str.lower()","cb6c0813":"#Calculating Missing Values\n(data.isnull().sum()\/len(data))*100","b3866e27":"group_mean_weight = data.pivot_table(index = [\"item_type\"], values = \"item_weight\", aggfunc = [np.mean])","31645b94":"group_mean_weight","06602320":"mean_weight = group_mean_weight.iloc[:,[0][0]]","6916dcb9":"mean_weight","6dc8ccde":"# Function to impute Missing Value in item_weight column:\n\ndef missing_value(cols):\n    item_type = cols[0]\n    item_weight =cols[1]\n    if pd.isnull(item_weight):\n        if item_type == \"Baking Goods\":\n            return 12.277\n        elif item_type == \"Breads\":\n            return 11.347\n        elif item_type == \"Breakfast\":\n            return 12.768\n        elif item_type == \"Canned\":\n            return 12.30\n        elif item_type == \"Dairy\":\n            return 13.42\n        elif item_type == \"Frozen Foods\":\n            return  12.867061\n        elif item_type == \"Fruits and Vegetables\":\n            return 13.224769\n        elif item_type == \"Hard Drinks\":\n            return 11.400328\n        elif item_type == \"Health and Hygiene\":\n            return 13.142314\n        elif item_type == \"Household\":\n            return 13.384736\n        elif item_type == \"Meat\":\n            return 12.817344\n        elif item_type == \"Others\":\n            return 13.853285\n        elif item_type == \"Seafood\":\n            return 12.552843\n        elif item_type == \"Snack Foods\":\n            return 12.987880\n        elif item_type == \"Soft Drinks\":\n            return 11.847460\n        elif item_type == \"Starchy Foods\":\n            return 13.690731\n    return item_weight   \n        \n       \n            \n            \n            \n            ","4242e4ce":"#Imputing the missing value by using defined function\ndata[\"item_weight\"] = data[[\"item_type\",\"item_weight\"]].apply(missing_value, axis = 1)","4c34cf34":"data.head()","da5d4363":"#FINDING FREQUENCY COUNT OF OUTLET TYPE\nsns.countplot(data = data, x = \"outlet_type\",hue = \"outlet_size\")\nplt.xticks(rotation =90)","60c3a75c":"# Function for Imputing Missing value in Outlet_Size column:\n\ndef impute_size(cols):\n    size = cols[0]\n    ot_type = cols[1]\n    if pd.isnull(size):\n        if ot_type == \"Supermarket Type1\":\n            return \"Small\"\n        elif ot_type == \"Supermarket Type2\":\n            return \"Medium\"\n        elif ot_type == \"Grocery Store\":\n            return \"Small\"\n        elif ot_type == \"Supermarket Type3\":\n            return \"Medium\"\n    return size    ","f3d9d32a":"#USING ABOVE DEFINED FUNCTION IMPUTE MISSING VALUES IN OUTLET SIZE COLUMNS\ndata[\"outlet_size\"] = data[[\"outlet_size\",\"outlet_type\"]].apply(impute_size, axis = 1)","dbe8d1d3":"data[\"item_fat_content\"].unique()","ffc3a18b":"data[\"item_fat_content\"] = data[\"item_fat_content\"].str.replace(\"LF\", \"low fat\").str.replace(\"reg\", \"regular\").str.lower()","f89b0cc7":"data[\"item_fat_content\"].unique()","d9ec262b":"data.head()","dfc976ba":"mean_visibility = data.pivot_table(index = \"item_identifier\",  values = \"item_visibility\")","e6c02c85":"data.loc[(data[\"item_visibility\"] == 0.0), \"item_visibility\"] = data.loc[(data[\"item_visibility\"] == 0.0), \"item_identifier\"].apply(lambda x : mean_visibility.at[x, \"item_visibility\"])\n                                                                                        ","2f80a333":"#understanding outlet_identifier depending on item_outlet_sales\nimport matplotlib.pyplot as plt\nplt.figure(figsize = (10,5))\nsns.barplot(data = data, x = \"outlet_identifier\", y= \"item_outlet_sales\")","2f63ce37":"#Understanding to ultet_establishment per year with respective to mean of each respective year item outlet sales\ndata.groupby(\"outlet_establishment_year\")[\"item_outlet_sales\"].mean().plot.bar()\nplt.ylabel(\"Mean of Item outlet sales\")","b9321e3d":"#Understanding to item_type per year with respective to mean of each respective year item outlet sales\ndata.groupby(\"item_type\")[\"item_outlet_sales\"].mean().plot.bar()\nplt.ylabel(\"Mean of Item outlet sales\")","759d9ad3":"#Understanding to outlet_type per year with respective to mean of each respective year item outlet sales\ndata.groupby(\"outlet_type\")[\"item_outlet_sales\"].mean().plot.bar()\nplt.ylabel(\"Mean of Item outlet sales\")","949ff2b8":"data.head()","714ed05a":"cols = ['item_identifier', 'item_fat_content',\n       'item_type', 'outlet_identifier',\n       'outlet_establishment_year', 'outlet_size', 'outlet_location_type',\n       'outlet_type']","3b13b626":"#MAPPING EACH CATEGORICAL COLUMN WITH RESPECTIVE FREQUENCY OF THE VALUES IN THE COLUMNS\nfor i in cols:\n    x  = data[i].value_counts().to_dict()\n    data[i] = data[i].map(x)","a8cc260a":"#RESULTING DATASET AFTER CATEGORICAL VALUES CONVERTED TO NUMERICAL COLUMN\ndata.head()","6c926ae8":"#COPYING DATA \nnew_data= data.copy()","b0df1e70":"#FINDING CORRELATION BETWEEN EACH COLUMNS BY USING HEATMAP\nplt.figure(figsize = (10,5))\nsns.heatmap(new_data.corr(), cmap = \"RdYlGn\", annot = True)","254bf006":"#REMOVING LESS CORRELATED COLUMNS \nnew_data =new_data.drop([\"item_weight\",\"item_identifier\", \"item_type\", \"item_fat_content\",\"outlet_location_type\"], axis = 1)","bc51137c":"new_data.head()","b1b8fcb3":"#CALCULATING THE SKEWNESS OF THE DATA\nnew_data.skew()","df267c41":"# Before Transformation\nfig, ax = plt.subplots(4,2,figsize = (15,15))\nsns.distplot(new_data[\"item_visibility\"], kde =True, ax=ax[0,0], color = \"red\")\nsns.distplot(new_data[\"item_mrp\"], kde =True, ax=ax[0,1], color = \"blue\")\nsns.distplot(new_data[\"outlet_identifier\"], kde =True, ax=ax[1,0], color = \"orange\")\nsns.distplot(new_data[\"outlet_type\"], kde =True, ax=ax[1,1], color = \"black\")\nsns.distplot(new_data[\"outlet_size\"], kde =True, ax=ax[2,0], color = \"magenta\")\nsns.distplot(new_data[\"outlet_establishment_year\"], kde =True, ax=ax[3,0])\nsns.distplot(new_data[\"item_outlet_sales\"], kde =True, ax=ax[3,1])\n\n","755032e8":"new_data.columns","5ab5d4ec":"for i in new_data.columns:\n    new_data[i] =np.log(new_data[i])","ce6ea196":"new_data.head()","fd78f89b":"# After Transformation\nfig, ax = plt.subplots(4,2,figsize = (15,15))\nsns.distplot(new_data[\"item_visibility\"], kde =True, ax=ax[0,0], color = \"red\")\nsns.distplot(new_data[\"item_mrp\"], kde =True, ax=ax[0,1], color = \"blue\")\nsns.distplot(new_data[\"outlet_identifier\"], kde =True, ax=ax[1,0], color = \"orange\")\nsns.distplot(new_data[\"outlet_type\"], kde =True, ax=ax[1,1], color = \"black\")\nsns.distplot(new_data[\"outlet_size\"], kde =True, ax=ax[2,0], color = \"magenta\")\nsns.distplot(new_data[\"outlet_establishment_year\"], kde =True, ax=ax[3,0])\nsns.distplot(new_data[\"item_outlet_sales\"], kde =True, ax=ax[3,1])","37321677":"new_data.skew()","2f7910c4":"#Independent Variables:\nx = new_data.drop(\"item_outlet_sales\", axis = 1) \n\n#Depenedent Variables \ny = new_data[\"item_outlet_sales\"].values.reshape(-1,1)\n","aac42344":"#Splitting The data  into Train and Test Dataset:\nfrom sklearn.model_selection import train_test_split\nx_train,x_test, y_train, y_test = train_test_split(x,y, test_size =0.20, random_state = 3)","4785f630":"#Applying Linear Regression Model\nfrom sklearn.linear_model import LinearRegression\nregressor =LinearRegression()\nregressor.fit(x_train, y_train)","7159af31":"#Prediction\ny_pred = regressor.predict(x_test)","de9d23ed":"#Accuracy of Model (Apply R2_score)\nfrom sklearn.metrics import r2_score, mean_squared_error\nr2_score(y_test, y_pred)","841aca3d":"#Checking Root Mean Square error\nfrom math import sqrt\nrmse = sqrt(mean_squared_error(y_test,  y_pred))\nrmse","e4c5ddbe":"#Residue of the Linear Regression Model \nresidue_lr = y_test -y_pred","5d1aa003":"#Plotting Residual Plot\nplt.scatter(y_test,residue_lr, c = \"red\")\nplt.xlabel(\"residual\")\nplt.ylabel(\"y_test\")\nplt.axhline(y = 0)","5a3c1ae6":"#Importing LASSO AND RIDGE from sklearn library:\n#Apply Lasso Regularization Technique\nfrom sklearn.linear_model import Lasso, Ridge\nls = Lasso(alpha = 0.009)\nls.fit(x_train, y_train)\n","b5e1af0c":"#prediction by LASSO model\nls_pred = ls.predict(x_test)","5d9788b9":"#Accuracy After Lasso(by R2_score)\nr2_score(y_test,ls_pred)","72a83d83":"#Root Mean Square Error\nrmse_lasso = sqrt(mean_squared_error(y_test, ls_pred))\nrmse_lasso","8f6e4f1e":"#Getting Lasso Coefficent\nlasso_coeff = pd.Series(ls.coef_, index =x.columns) ","1fafe221":"#Visualization of Coefficent after LASSO \nlasso_coeff.plot(kind = \"bar\")","14bd859d":"#RESHAPING THE PREDICTED VALUES\nls_pred= ls_pred.reshape(-1,1)\n\nls_pred","5e37c88a":"#RESIDUE VALUE AFTER LASSO REGRESSION\nresidue = y_test - ls_pred","eaeb3ab9":"plt.scatter(y_test.reshape(-1,1),residue, c = \"red\")\nplt.xlabel(\"residual\")\nplt.ylabel(\"y_test\")\nplt.axhline(y = 0)","3851a752":"#Ridge Regression\nrr = Ridge(alpha = 0.009)\nrr.fit(x_train, y_train)","1d6f05bd":"#Prediction AFTER Ridge regression\nrr_pred = rr.predict(x_test)","b3c88350":"#Accuracy score check\nr2_score(y_test, y_pred)","628a201f":"#RMSE\nrmse_ridge = sqrt(mean_squared_error(y_test, rr_pred))\nrmse_ridge","1c1c38ee":"#residue after ridge\nresidue_rr = y_test-rr_pred","fd1d2db7":"#plotting of residual graph after RIDGE REGRESSION\nplt.scatter(y_test,residue_rr, c = \"red\")\nplt.xlabel(\"residual\")\nplt.ylabel(\"y_test\")\nplt.axhline(y = 0)","e2fde1d5":"test_data = pd.read_csv(\"..\/input\/big-mart-sales-prediction\/Test.csv\")","1067b0b1":"test_data.head()","6aea6f84":"test = test_data.copy()","d31597a4":"#LOWERING THE COLUMNS NAMES \ntest.columns = test.columns.str.lower()","f5661c64":"#Calculating Missing Values\n(test.isnull().sum()\/len(test))*100","15540124":"#calculating the mean of item_weight with respective to item_type\ngroup_mean = test.pivot_table(index = [\"item_type\"], values = \"item_weight\", aggfunc = [np.mean])","b5d7d9a3":"group_mean","91a0c8c9":"mean_weigh = group_mean.iloc[:,[0][0]]","50403613":"mean_weigh","8201ebf5":"# Function to impute Missing Value in item_weight column:\n\ndef missing_value1(cols):\n    item_type = cols[0]\n    item_weight =cols[1]\n    if pd.isnull(item_weight):\n        if item_type == \"Baking Goods\":\n            return 12.277\n        elif item_type == \"Breads\":\n            return 10.86\n        elif item_type == \"Breakfast\":\n            return  13.759603\n        elif item_type == \"Canned\":\n            return 12.393565\n        elif item_type == \"Dairy\":\n            return 12.955040\n        elif item_type == \"Frozen Foods\":\n            return  12.101543\n        elif item_type == \"Fruits and Vegetables\":\n            return 13.146659\n        elif item_type == \"Hard Drinks\":\n            return 11.844417\n        elif item_type == \"Health and Hygiene\":\n            return 13.216929\n        elif item_type == \"Household\":\n            return 13.270504\n        elif item_type == \"Meat\":\n            return 12.702148\n        elif item_type == \"Others\":\n            return 14.009725\n        elif item_type == \"Seafood\":\n            return 13.241136\n        elif item_type == \"Snack Foods\":\n            return 12.684256\n        elif item_type == \"Soft Drinks\":\n            return 11.691965\n        elif item_type == \"Starchy Foods\":\n            return 13.618247\n    return item_weight  ","f031e2b0":"#applying the above function to the dataset\ntest[\"item_weight\"] = test[[\"item_type\",\"item_weight\"]].apply(missing_value1, axis = 1)","8e64ebaa":"#Frequency count of the outlet_type \nsns.countplot(data = test, x = \"outlet_type\",hue = \"outlet_size\")\nplt.xticks(rotation =90)","c324d9e9":"# Function for Imputing Missing value in Outlet_Size column:\n\ndef impute_size1(cols):\n    size = cols[0]\n    ot_type = cols[1]\n    if pd.isnull(size):\n        if ot_type == \"Supermarket Type1\":\n            return \"Small\"\n        elif ot_type == \"Supermarket Type2\":\n            return \"Medium\"\n        elif ot_type == \"Grocery Store\":\n            return \"Small\"\n        elif ot_type == \"Supermarket Type3\":\n            return \"Medium\"\n    return size    ","c8a82a2e":"test[\"outlet_size\"] = test[[\"outlet_size\",\"outlet_type\"]].apply(impute_size1, axis = 1)","204ade19":"test[\"item_fat_content\"].unique()","95d8c15c":"test[\"item_fat_content\"] = test[\"item_fat_content\"].str.replace(\"LF\", \"low fat\").str.replace(\"reg\", \"regular\").str.lower()","0111410a":"test[\"item_fat_content\"].unique()","f6b31666":"mean_item_visibility = test.pivot_table(index = \"item_identifier\",  values = \"item_visibility\")","31e54293":"mean_item_visibility.head()","8af247ce":"test_d = test.copy()","011b8558":"columns = ['item_identifier', 'item_fat_content',\n       'item_type', 'outlet_identifier',\n       'outlet_establishment_year', 'outlet_size', 'outlet_location_type',\n       'outlet_type']\nfor i in columns:\n    x  = test_d[i].value_counts().to_dict()\n    test_d[i] = test_d[i].map(x)","53bffe40":"test_d.head()","70a49abc":"new_test_data = test_d.copy()","7b53a42a":"new_test_data =new_test_data.drop([\"item_weight\",\"item_identifier\", \"item_type\", \"item_fat_content\",\"outlet_location_type\"], axis = 1)","db791c09":"new_test_data.head()","ed07b4d7":"#CHECKING THE SKEWNESS OF THE TEST DATA\nnew_test_data.skew()","e1bc219e":"#VISUALIZING THE SKEWNESS OF THE DATASET\n# Before Transformation\nfig, ax = plt.subplots(3,2,figsize = (15,15))\nsns.distplot(new_test_data[\"item_visibility\"], kde =True, ax=ax[0,0], color = \"red\")\nsns.distplot(new_test_data[\"item_mrp\"], kde =True, ax=ax[0,1], color = \"blue\")\nsns.distplot(new_test_data[\"outlet_identifier\"], kde =True, ax=ax[1,0], color = \"orange\")\nsns.distplot(new_test_data[\"outlet_type\"], kde =True, ax=ax[1,1], color = \"black\")\nsns.distplot(new_test_data[\"outlet_size\"], kde =True, ax=ax[2,0], color = \"magenta\")\nsns.distplot(new_test_data[\"outlet_establishment_year\"], kde =True, ax=ax[2,1])\n\n","7326ffc6":"new_test_data.columns","47632927":"#Applying the log transformation\nfor i in new_test_data.columns:\n    new_test_data[i] =np.log(new_test_data[i]+1)","75ce85d6":"#After Transformation \nfig, ax = plt.subplots(3,2,figsize = (15,15))\nsns.distplot(new_test_data[\"item_visibility\"], kde =True, ax=ax[0,0], color = \"red\")\nsns.distplot(new_test_data[\"item_mrp\"], kde =True, ax=ax[0,1], color = \"blue\")\nsns.distplot(new_test_data[\"outlet_identifier\"], kde =True, ax=ax[1,0], color = \"orange\")\nsns.distplot(new_test_data[\"outlet_type\"], kde =True, ax=ax[1,1], color = \"black\")\nsns.distplot(new_test_data[\"outlet_size\"], kde =True, ax=ax[2,0], color = \"magenta\")\nsns.distplot(new_test_data[\"outlet_establishment_year\"], kde =True, ax=ax[2,1])\n","2f45b107":"new_test_data.head()","eca1b338":"#Skewness After Transformation:\nnew_test_data.skew()","62c04653":"item_outsale_pred = regressor.predict(new_test_data)","41589a71":"item_outsale_pred","c0fbf42c":"#Performing inverse transformation\nactual_item_outsale = np.exp(item_outsale_pred+1)","44b9fba8":"actual_item_outsale","c1872806":"#ADDING THE PREDICTED ITEM_OUTLET_SALE COLUMNS TO TEST DATA\ntest[\"item_outlet_sale\"] = actual_item_outsale","8642459a":"test","bdb62b75":"# AFTER RIDGE REGRESSION\n# 1. R2_SCORE = 75.57%\n# 2. RMSE = 0.519","889a2020":"# Selcting The Better Model","57dda4de":"# 1. R2_Score = 75.70%\n# 2. RMSE  = 0.519","01fc452c":"# Regularization:\n\n### 1. **LASSO Regression**:","2be3770c":"---\nWhile exploring the **\"item_visibility\"** column, We Found many items visibility as **0.0** which is impossible. Hence, imputing these **0.0** values with **MEAN** of respective item of visibility.","a7fecc03":"**While exploring the item_fat_content, we founded \"4\" different unique values.**\nFollowing ARE:\nlow fat - represent LOW FAT\nreg - represent regular","a18b720d":"## DATA UNDERSTANDING THROUGH VISUALIZATION","6c76a695":"# Apply Model to the Test Data for Predicting The item Outsale Values:","f860b27e":"# AFTER LASSO REGRESSION\n# 1.R2_SCORE= 74.68%\n# 2.RMSE = 0.53","124fa62b":"### VISUALIZING THE SKEWNESSS OF THE DATASET","704816cd":"# Replacing The Categorical  Values Containing Columns With Their Respective Frequency or Count","d839ff50":"## 2. **RIDGE Regression**:\n","1ad99ba1":"### IMPUTING CATEGORICAL VALUES WITH FREQUENCY OF RESPECTIVE COLUMNS IN THE TEST DATA","778738a2":"# ITEM OUTLET SALES PREDICTION","224233c4":"## Imputation Of Missing Values in the Columns:","cd3ebe60":"### IMPUTATION OF MISSING VALUES","1124905b":"# Fitting Linear Regression Model:","33125a87":"## 1.From above three different model after applying LASSO AND RIDGE Regression,  we can accept the model which is giving the better  \"**RMSE SCORE**\" and higher accuracy (R2_SCORE). \n\n## 2. Lasso Regression is showing the low accuracy in terms of Linear regression.\n## 3. Ridge Regression is showing the similar accuracy in terms of Linear Regression.\n\n### HENCE, ACCEPTING THE LINEAR REGRESSION MODEL TO PREDICT THE TEST DATA ITEM OUTLET SALE.\n","92fbfc9d":"### From the above plot it is clear that many columns are not following the normal distribution and not properly scaled. Therefore, we will apply \"Logarithmic\" Transformation on above dataset to make it scale and reduce the skewness.","76325836":"## **Above predicted values are transformed values. Therefore, we need to inverse transform it to get actual predicted values.** ","0b85d389":"# LOADING TEST DATA"}}