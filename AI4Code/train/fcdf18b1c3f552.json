{"cell_type":{"2462c4f2":"code","8bdae872":"code","11400330":"code","0409b00f":"code","11d06a22":"code","313d6586":"code","83c15a4f":"code","7d03606f":"code","d2d4ebfe":"code","0c2ddef5":"code","8679e3a1":"code","5d717402":"code","db9662bc":"code","7fe6664e":"markdown","087b046c":"markdown","8391d0f2":"markdown","1aeefb19":"markdown","82e5fba8":"markdown","6e9a2f37":"markdown","5f1a802a":"markdown","01f85b77":"markdown","f95965eb":"markdown","6896bd0c":"markdown","25d3012a":"markdown","45cdc555":"markdown","68b809ca":"markdown","8ea06bbd":"markdown"},"source":{"2462c4f2":"import matplotlib.pyplot as plt\nimport numpy as np","8bdae872":"np.random.seed(24)","11400330":"points = np.vstack(((np.random.randn(100, 2) * 0.5 + np.array([1, 1])),\n                  (np.random.randn(100, 2) * 0.5 + np.array([3, 2])),\n                  (np.random.randn(100, 2) * 0.5 + np.array([1, 3]))))","0409b00f":"plt.scatter(points[:, 0], points[:, 1]);","11d06a22":"def initialize_centroids(points, k):\n    \"\"\"returns k centroids from the initial points\"\"\"\n    centroids = points.copy()\n    np.random.shuffle(centroids)\n    return centroids[:k]","313d6586":"plt.scatter(points[:, 0], points[:, 1]);\ncentroids = initialize_centroids(points, 3)\nplt.scatter(centroids[:, 0], centroids[:, 1], c='r', s=100, marker='*');","83c15a4f":"def closest_centroid(points, centroids):\n    \"\"\"returns an array containing the index to the nearest centroid for each point\"\"\"\n    distances = np.sqrt(((points - centroids[:, np.newaxis])**2).sum(axis=2))\n    return np.argmin(distances, axis=0)","7d03606f":"point_c = closest_centroid(points, centroids)","d2d4ebfe":"plt.scatter(points[:, 0], points[:, 1], c=point_c);\nplt.scatter(centroids[:, 0], centroids[:, 1], c='r', s=100, marker='*');","0c2ddef5":"def move_centroids(points, closest, centroids):\n    \"\"\"returns the new centroids assigned from the points closest to them\"\"\"\n    return np.array([points[closest==k].mean(axis=0) for k in range(centroids.shape[0])])","8679e3a1":"print('Old centroids:\\n', centroids)\ncentroids = move_centroids(points, point_c, centroids)\nprint('New centroids:\\n', centroids)","5d717402":"point_c = closest_centroid(points, centroids)\nplt.scatter(points[:, 0], points[:, 1], c=point_c);\nplt.scatter(centroids[:, 0], centroids[:, 1], c='r', s=100, marker='*');","db9662bc":"MOVES = 5\nK = 3\ncentroids = initialize_centroids(points, K)\nfor m in range(MOVES):\n    closest = closest_centroid(points, centroids)\n    centroids = move_centroids(points, closest, centroids)\n    plt.scatter(points[:, 0], points[:, 1], c=closest)\n    plt.scatter(centroids[:, 0], centroids[:, 1], c='r', s=100, marker='*')\n    plt.show()\n    print(centroids)","7fe6664e":"#### Ok. Summary time.\n\nNow we will plot what we have when we initialize centroids, when we first move them, and when repeat some moves.","087b046c":"#### Let try moving the centroids once","8391d0f2":"# Step 1. We initialize some random centroids\n\nI will randomly shuffle the points then take k first points. So we have ours random centroids.","1aeefb19":"# Step 2. Calculate the L2 distance of each point to the centroids. Find out what is its nearest centroid.","82e5fba8":"*Another 1 liner code. Try to explain it ;) Yoy might want to take a look at advanced indexing with NumPy.*","6e9a2f37":"#### And plot them","5f1a802a":"#### Let's take a look at our random centroids","01f85b77":"# Step 3. Move the centroids to the middle of points having it as the nearest centroid.","f95965eb":"Ok. So that means we have some work to do.","6896bd0c":"#### Let generate some data (Gaussian distribution as always)","25d3012a":"*Can you notice the np.newaxis thing? Try to explain it ;) If you can't, don't worry. I will explain it to you later ;)*|","45cdc555":"#### So we are importing NumPy and Matplotlib (for illustrative purpose)","68b809ca":"# And repeat step 3 till some requirements are met. Profit.\n\nAnd that's why we will have a lectures on loss functions and tolerances ;)","8ea06bbd":"#### Let set random seed so all of us see the same thing"}}