{"cell_type":{"e944a6d9":"code","4c5062b4":"code","e2086e24":"code","53efb8f0":"code","6b2798ac":"code","c72cfded":"code","2b3d3e4e":"code","b2a5cf0d":"code","c188878a":"code","51525bbf":"code","f2f7bf8c":"code","b797683c":"code","d2014700":"code","59a47283":"code","cd2bb595":"code","6b8b3c37":"code","4f170b12":"code","0106c033":"code","cccc0906":"code","cacd1e26":"code","a5ef7346":"code","24459dc1":"code","083dcafa":"code","e070f3ec":"code","29f836c8":"code","bc328d22":"code","b6d8e886":"code","c64607bc":"code","fce304ef":"code","1496c286":"code","1cb7ad8e":"markdown","8beafd92":"markdown","4dcf0ac3":"markdown","2df4da40":"markdown","a1597ed6":"markdown"},"source":{"e944a6d9":"from sklearn.datasets import fetch_california_housing\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nimport pandas as pd\nimport numpy as np\nimport tensorflow as tf\nimport matplotlib.pyplot as plt","4c5062b4":"housing=fetch_california_housing()","e2086e24":"print(housing.DESCR)","53efb8f0":"df=pd.DataFrame(data=housing.data,columns=housing.feature_names)\ntarget=pd.DataFrame(data=housing.target,columns=['target'])\ndf=pd.concat([df,target],sort=True,axis=1\n            )\ndf.head(15)","6b2798ac":"X_train_full,X_test, y_train_full,y_test=train_test_split(\n    housing.data, housing.target)\n\nX_train,X_valid, y_train,y_valid=train_test_split(\n    X_train_full,y_train_full)","c72cfded":"scaler1=StandardScaler()\nX_train=scaler1.fit_transform(X_train)\nX_valid=scaler1.transform(X_valid)\nx_test=scaler1.transform(X_test)","2b3d3e4e":"model=tf.keras.models.Sequential([\n    tf.keras.layers.Dense(30,activation='relu',input_shape=X_train.shape[1:]),\n    tf.keras.layers.Dense(10,activation='relu'),\n    tf.keras.layers.Dense(1)\n])","b2a5cf0d":"model.compile(loss=tf.keras.losses.mean_squared_error,optimizer='sgd'\n             )\nhistory=model.fit(X_train,y_train,epochs=20,\n                  validation_data=(X_valid,y_valid))","c188878a":"#mse_test = model.evaluate(X_test, y_test)","51525bbf":"X_new = X_test[:3] # pretend these are new instances\ny_pred = model.predict(X_new)\ny_pred","f2f7bf8c":"final_df=pd.DataFrame(history.history).plot(figsize=(13,5))\nplt.grid(True)\nplt.gca().set_ylim(0.25, 0.8) # set the vertical range to [0-1]\nplt.show()","b797683c":"input_=tf.keras.layers.Input(shape=X_train.shape[1:])\nhidden1=tf.keras.layers.Dense(30,activation='relu')(input_)\nhidden2=tf.keras.layers.Dense(10,activation='relu')(hidden1)\nconcat=tf.keras.layers.concatenate(inputs=[input_ , hidden2])\noutput=tf.keras.layers.Dense(1)(concat)\nmodel = tf.keras.Model(inputs=[input_], outputs=[output])","d2014700":"model.compile(loss=\"mse\", optimizer=tf.keras.optimizers.SGD(lr=1e-3))","59a47283":"history1=model.fit(X_train,y_train,epochs=20,\n         validation_data=(X_valid,y_valid))","cd2bb595":"final_df1=pd.DataFrame(history1.history).plot(figsize=(13,5))\nplt.grid(True)\nplt.gca().set_ylim(0, 2.2) # set the vertical range to [0-1]\nplt.show()","6b8b3c37":"input_A = tf.keras.layers.Input(shape=[5], name=\"wide_input\")\ninput_B = tf.keras.layers.Input(shape=[6], name=\"deep_input\")\nhidden1 = tf.keras.layers.Dense(30, activation=\"relu\")(input_B)\nhidden2 = tf.keras.layers.Dense(30, activation=\"relu\")(hidden1)\nconcat = tf.keras.layers.concatenate([input_A, hidden2])\noutput = tf.keras.layers.Dense(1, name=\"output\")(concat)\nmodel = tf.keras.Model(inputs=[input_A, input_B], outputs=[output])","4f170b12":"model.compile(loss=\"mse\", optimizer=tf.keras.optimizers.SGD(lr=1e-3))","0106c033":"X_train_A, X_train_B = X_train[:, :5], X_train[:, 2:]\nX_valid_A, X_valid_B = X_valid[:, :5], X_valid[:, 2:]\nX_test_A, X_test_B = X_test[:, :5], X_test[:, 2:]\nX_new_A, X_new_B = X_test_A[:3], X_test_B[:3]","cccc0906":"history2=model.fit((X_train_A, X_train_B), y_train, epochs=20,\n validation_data=((X_valid_A, X_valid_B), y_valid))","cacd1e26":"final_df2=pd.DataFrame(history2.history).plot(figsize=(13,5))\nplt.grid(True)\nplt.gca().set_ylim(0, 3.5) # set the vertical range to [0-1]\nplt.show()","a5ef7346":"input_A=tf.keras.layers.Input(shape=[5,], name='wide_input')\ninput_B=tf.keras.layers.Input(shape=[6,], name='deep_input')\nhidden1=tf.keras.layers.Dense(30,activation='relu')(input_B)\nhidden2=tf.keras.layers.Dense(30,activation='relu')(hidden1)\nconcat=tf.keras.layers.concatenate(inputs=[input_A,hidden2])\noutput =tf.keras.layers.Dense(1, name=\"output\")(concat)\naux_output=tf.keras.layers.Dense(1,name='aux_output')(hidden2)\nmodel=tf.keras.Model(inputs=[input_A,input_B],outputs=[output,aux_output])","24459dc1":"model.compile(loss=['mse','mse'],optimizer='sgd',loss_weights=[0.9,0.1])","083dcafa":"history3=model.fit([X_train_A,X_train_B],[y_train,y_train],epochs=20,\n          validation_data=([X_valid_A,X_valid_B],[y_valid,y_valid]))","e070f3ec":"y_pred_main, y_pred_aux = model.predict([X_new_A, X_new_B])\nprint('y_pred_main:',y_pred_main)\nprint('y_pred_aux:',y_pred_aux)","29f836c8":"final_df3=pd.DataFrame(history3.history).plot(figsize=(13,5))\nplt.grid(True)\nplt.gca().set_ylim(0.3, 1.99) # set the vertical range to [0-1]\nplt.show()","bc328d22":"class WideAndDeepModel(tf.keras.Model):\n    def __init__(self,units=30,activation='relu',**kwargs ):\n        super().__init__(**kwargs)\n        self.hidden1=tf.keras.layers.Dense(units=units,activation=activation)\n        self.hidden2=tf.keras.layers.Dense(units=(units\/2),activation=activation)\n        self.main_output = tf.keras.layers.Dense(1)\n        self.aux_output = tf.keras.layers.Dense(1)\n        \n    def call(self,inputs):\n        input_A, input_B = inputs\n        hidden1 = self.hidden1(input_B)\n        hidden2 = self.hidden2(hidden1)\n        concat = tf.keras.layers.concatenate([input_A, hidden2])\n        main_output = self.main_output(concat)\n        aux_output = self.aux_output(hidden2)\n        return main_output, aux_output\n    \n    \nmodel = WideAndDeepModel()","b6d8e886":"model.compile(loss=['mse','mse'],optimizer='sgd',loss_weights=[0.9,0.1])","c64607bc":"history4=model.fit([X_train_A,X_train_B],[y_train,y_train],epochs=20,\n          validation_data=([X_valid_A,X_valid_B],[y_valid,y_valid]))","fce304ef":"y_pred_main, y_pred_aux = model.predict([X_new_A, X_new_B])\nprint('y_pred_main:',y_pred_main)\nprint('y_pred_aux:',y_pred_aux)","1496c286":"final_df4=pd.DataFrame(history4.history).plot(figsize=(13,7))\nplt.grid(True)\nplt.gca().set_ylim(0.25, 2.3) # set the vertical range to [0-1]\nplt.show()","1cb7ad8e":"## Wide and deep model","8beafd92":"## Wide and deep model subclassing through keras","4dcf0ac3":"## Functional API","2df4da40":"## Sequential API","a1597ed6":"## Wide and deep model with auxilary output"}}