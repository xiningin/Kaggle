{"cell_type":{"fbcec474":"code","75f455b0":"code","c10697d8":"code","71c8750a":"code","981749a9":"code","2143a4b7":"code","a7e87fcd":"code","ef1d855f":"code","417e9b5f":"code","2327d14b":"code","a618266a":"code","abe360fb":"code","92e3871c":"code","51aecdd9":"code","a885a926":"code","12aa2a95":"markdown","09dc17bf":"markdown","e2ff5105":"markdown","56f76d37":"markdown","d4645401":"markdown","dbec664b":"markdown","73dc7ac0":"markdown"},"source":{"fbcec474":"### Loading required libraries\n\nfrom    pandas             import   read_csv, Grouper, DataFrame, concat\nimport  matplotlib.pyplot  as       plt\nimport  statsmodels.api          as       sm\nfrom   sklearn.metrics      import  mean_squared_error\nfrom   statsmodels.tsa.holtwinters     import  SimpleExpSmoothing,Holt, ExponentialSmoothing\nimport statsmodels.tsa.holtwinters     as      ets\nimport statsmodels.tools.eval_measures as      fa\nfrom statsmodels.tsa.stattools import adfuller\nfrom statsmodels.tsa.arima_model import ARIMA\n\nimport sys\nimport warnings\nimport itertools\nwarnings.filterwarnings(\"ignore\")\nimport statsmodels.tsa.api as smt\nimport statsmodels.formula.api as smf\n%matplotlib inline","75f455b0":"import numpy as np\nimport pandas as pd\nfrom datetime import datetime\nfrom pandas import Series","c10697d8":"# Read the time series data\n# We set parse_dates to make sure data is read as time-series and make time column as Index\n# We drop the id column, which is not usefull for us.\npredice = pd.read_csv('\/kaggle\/input\/predice-el-futuro\/train_csv.csv', header = 0, index_col = 1, parse_dates = True, squeeze = True)\npredice.drop(['id'],axis = 1,inplace = True)","71c8750a":"plt.figure(figsize=(12,6))\nplt.plot(predice.index, predice['feature'])\nplt.title('Feature v\/s Time Plot')\nplt.xlabel('Time')\nplt.ylabel('Feature')\nplt.grid(True)\nplt.show()","981749a9":"decompPred = sm.tsa.seasonal_decompose(predice.feature, model=\"additive\", freq=4)\ndecompPred.plot()\nplt.show()","2143a4b7":"#Splitting data to Test:Train\ntrain = predice[0:int(len(predice)*0.7)] \ntest = predice[int(len(predice)*0.7):]","a7e87fcd":"# extract out the time-series\nfeature_ts_train =  train['feature']\nfeature_ts_test =  test['feature']","ef1d855f":"dftest = adfuller(feature_ts_train)\ndftest\nprint('DF test statistic is %3.3f' %dftest[0])\nprint('DF test p-value is %1.4f' %dftest[1])","417e9b5f":"plt.figure(figsize=(8, 4))\nplt.plot(feature_ts_train.diff(periods=1))\nplt.xlabel('Time')\nplt.ylabel('Feature')","2327d14b":"dftest = adfuller(feature_ts_train)\ndftest\nprint('DF test statistic is %3.3f' %dftest[0])\nprint('DF test p-value is %1.4f' %dftest[1])","a618266a":"feature_ts_train_diff = feature_ts_train.diff(periods=1)\nfeature_ts_train_diff.dropna(inplace=True)\n\nfeature_ts_test_diff = feature_ts_test.diff(periods=1)\nfeature_ts_test_diff.dropna(inplace=True)","abe360fb":"fig, axes = plt.subplots(1, 2)\nfig.set_figwidth(12)\nfig.set_figheight(4)\nplt.xticks(range(0,30,1), rotation = 90)\nsmt.graphics.plot_acf(feature_ts_train_diff, lags=30, ax=axes[0])\nsmt.graphics.plot_pacf(feature_ts_train_diff, lags=30, ax=axes[1])\nplt.tight_layout()","92e3871c":"# Build Model \nmodel = ARIMA(feature_ts_train_diff, order=(1, 1, 0)) #Chosen this combination of p,q,d after trying other combinations \nfitted = model.fit()  \n\n# Forecast\nfc, se, conf = fitted.forecast(24, alpha=0.05)  \n\n# Make as pandas series\nfc_series = pd.Series(fc, index=test.index)\nlower_series = pd.Series(conf[:, 0], index=test.index)\nupper_series = pd.Series(conf[:, 1], index=test.index)\n\n# Plot\nplt.figure(figsize=(8,5), dpi=100)\nplt.plot(feature_ts_train_diff, label='training')\nplt.plot(feature_ts_test_diff, label='actual')\nplt.plot(fc_series, label='forecast')\nplt.fill_between(lower_series.index, lower_series, upper_series, \n                 color='k', alpha=.15)\nplt.title('Forecast vs Actuals')\nplt.legend(loc='upper left', fontsize=8)\nplt.show()","51aecdd9":"forecast = fitted.forecast(steps=40)[0]\npredice_to_pred = pd.read_csv('predice_el_futuro_test.csv')\npredice_to_pred['forecast'] = forecast\npredice_to_pred.head()","a885a926":"predice_to_pred.to_excel(\"Solution.xlsx\")  ","12aa2a95":"The data is Stationary now, let us apply ARIMA on the differenced data set.","09dc17bf":"#### Let's Decompose the Graph for better understanding","e2ff5105":"#### Let's now visualise the data","56f76d37":"#### By analysing the graphical representation of Feature v\/s Time and Decomposed graph, we see only a slight upward trend in the data.","d4645401":"Since p-value > 0.05. Null Hypothesis cannot be rejected.   \nLet us try differencing, to make the time-series Stationary. ","dbec664b":"### Inference\n\nThe above ACF has \u201cdecayed\u201d fast and remains within the significance range (blue band). This is indicative of a stationary series.    \n#### Starting to Implement ARIMA","73dc7ac0":"### In this notebook we will perform ARIMA on this dataset.\nStep 1 : Perform Dicky Fuller Test on the timeseries and verify the null hypothesis that the TS is non-stationary."}}