{"cell_type":{"de962cf4":"code","a9cef981":"code","c8327fa2":"code","51ed69ff":"code","48ed3142":"code","95fc00ed":"code","4fa87d9c":"code","d2774f8d":"code","d04f75b3":"code","346a8d6b":"code","c87333dc":"code","026049b1":"code","c805cbbe":"code","723f1bd5":"code","ef530527":"code","c7cc45a8":"code","d3520f42":"code","b035d840":"code","80f0c05b":"code","5f67dd8e":"code","3bf02f27":"code","d1461e4b":"code","4a9b36bc":"code","b62526f8":"code","51ffc51e":"code","689f3e43":"code","c5356694":"code","b3cffcc2":"code","b04ed2c0":"code","88746d17":"code","cc0291f0":"code","524282c4":"code","c0f3e116":"code","2af1cb4a":"code","3bab0d2f":"code","49ea5ba6":"code","ab188b0a":"code","62499bb5":"code","0fb4a8e8":"code","c8c41929":"code","f8870458":"code","1a6fea07":"code","335e63c0":"code","a2915beb":"code","e90d8e4b":"code","979bd2a3":"code","597f1040":"code","5f47dc61":"code","9986dc55":"code","112550e9":"code","edaa2c12":"code","850a819e":"code","34a64803":"code","0cfddaa8":"code","25c7c4b4":"code","ab59fc40":"code","15cc11a5":"code","841e4056":"code","f1d79330":"code","a55fb6ac":"code","8e80da09":"code","d9a66b19":"code","cafc6442":"code","1b76cb87":"code","0681491c":"code","91ba913d":"code","65d7d88d":"code","3ef4a5c9":"code","c30ba17f":"code","12f7315a":"code","f40e80b4":"code","c570b71f":"code","49b6d3d4":"code","fa272fa5":"code","bc5db778":"code","78e1a400":"code","0029b46b":"code","582e9f9d":"code","f6d5970b":"code","da117ed0":"code","7aba717f":"code","9de4b36c":"code","15289379":"code","0a3d20a2":"code","91a7d60b":"code","02833da7":"code","263393dd":"code","a4748e1f":"code","7b5cc150":"code","3a2de37f":"code","b90f5842":"code","eb9a65b8":"markdown","40da4ffc":"markdown","203d45cb":"markdown","0f606b4b":"markdown","4430708a":"markdown","dcfa5037":"markdown","0d43ecf0":"markdown","a0d8b8ef":"markdown","f3b9841c":"markdown","135399ff":"markdown","67e434f1":"markdown","6edcef6b":"markdown","e2766719":"markdown","119fa685":"markdown","338e81e5":"markdown","bbaefeca":"markdown","fa60d0a9":"markdown","1f1c742e":"markdown","928e14f6":"markdown","11d78dc1":"markdown","a75031b7":"markdown","f41423a3":"markdown","187f9cd5":"markdown"},"source":{"de962cf4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a9cef981":"import seaborn as sns\nimport plotly.express as px\nimport warnings\nwarnings.filterwarnings('ignore')","c8327fa2":"global_temp=pd.read_csv('..\/input\/global-climate-change\/GlobalTemperatures.csv')","51ed69ff":"global_temp.head()","48ed3142":"global_temp['dt'][0].split('-')[0]","95fc00ed":"def fetch_year(date):\n    return date.split('-')[0]","4fa87d9c":"global_temp['Year']= global_temp['dt'].apply(fetch_year)","d2774f8d":"global_temp.head()","d04f75b3":"data = global_temp.groupby('Year').agg({'LandAverageTemperature':'mean','LandAverageTemperatureUncertainty':'mean'}).reset_index()","346a8d6b":"data.head()","c87333dc":"## creating top and bottom temp uncertainity\n\ndata['Uncertainity_top'] = data['LandAverageTemperature']+ data['LandAverageTemperatureUncertainty']\ndata['Uncertainity_bottom'] = data['LandAverageTemperature']- data['LandAverageTemperatureUncertainty']","026049b1":"data.head()","c805cbbe":"fig = px.line(data, x='Year', y=['LandAverageTemperature','Uncertainity_top','Uncertainity_bottom'], title='World avg.Land Temp')\nfig.show()","723f1bd5":"## changing date column to datetime\n\nglobal_temp['dt'] = pd.to_datetime(global_temp['dt'])","ef530527":"global_temp.dtypes","c7cc45a8":"## creating month col from date col\nglobal_temp['month']=global_temp['dt'].dt.month","d3520f42":"## defining function to map seasons on month col\n\ndef get_season(month):\n    if month >= 3 and month <=4:\n        return 'spring'\n    elif month >=5 and month <=6:\n        return 'summer'\n    elif month >=7 and month <=8:\n        return 'rainy'\n    elif month >=9 and month <=11:\n        return 'autumn'\n    else:\n        return 'winter'","b035d840":"global_temp['season']=global_temp['month'].apply(get_season)","80f0c05b":"global_temp.head()","5f67dd8e":"## create a list of years\nyears = global_temp['Year'].unique()","3bf02f27":"## create empty season list\nspring_temp = []\nsummer_temp = []\nrainy_temp = []\nautumn_temp = []\nwinter_temp = []","d1461e4b":"for year in years:\n    current_df= global_temp[global_temp['Year']==year]\n    spring_temp.append(current_df[current_df['season']=='spring']['LandAverageTemperature'].mean())\n    summer_temp.append(current_df[current_df['season']=='summer']['LandAverageTemperature'].mean())\n    rainy_temp.append(current_df[current_df['season']=='rainy']['LandAverageTemperature'].mean())\n    autumn_temp.append(current_df[current_df['season']=='autumn']['LandAverageTemperature'].mean())\n    winter_temp.append(current_df[current_df['season']=='winter']['LandAverageTemperature'].mean())","4a9b36bc":"## creating a season df to store values of all seasons\nseason =pd.DataFrame()","b62526f8":"season['year']=years\nseason['spring_temp'] = spring_temp\nseason['summer_temp'] = summer_temp\nseason['rainy_temp'] = rainy_temp\nseason['autumn_temp'] = autumn_temp\nseason['winter_temp'] = winter_temp","51ffc51e":"season.head()","689f3e43":"fig=px.line(season, x='year', y=['spring_temp', 'summer_temp', 'rainy_temp', 'autumn_temp','winter_temp'],\n         title='Avg.temp across season')\nfig.show()","c5356694":"cities = pd.read_csv(\"..\/input\/global-climate-change\/GlobalLandTemperaturesByCity.csv\")","b3cffcc2":"cities.head()","b04ed2c0":"cities.shape","88746d17":"## filtering USA data\nusa = cities[cities['Country']== 'United States']","cc0291f0":"usa.shape","524282c4":"## extracting specific cities from usa data\n\ndata = ['New York','Los Angeles','San Francisco']\ndata2 = usa[usa['City'].isin(data)]","c0f3e116":"data2.head()","2af1cb4a":"data2=data2[['dt','AverageTemperature']]","3bab0d2f":"data2.head()","49ea5ba6":"## renaming columns\ndata2.columns=['Date','Temperature']","ab188b0a":"data2.head()","62499bb5":"data2.dtypes","0fb4a8e8":"## changing date column to datetime\ndata2['Date']=pd.to_datetime(data2['Date'])","c8c41929":"data2.shape","f8870458":"data2.isna().sum()","1a6fea07":"## since there are very few null values, therefore we'll drops the rows\ndata2.dropna(inplace=True)","335e63c0":"data2.shape","a2915beb":"## setting the date column as index for timeseries model.\ndata2.set_index('Date',inplace=True)","e90d8e4b":"data2.head()","979bd2a3":"## lets visulize the data with line plot\nsns.lineplot(x=data2.index, y=data2['Temperature'])","597f1040":"from statsmodels.tsa.stattools import adfuller","5f47dc61":"test_result=adfuller(data2['Temperature'])","9986dc55":"test_result","112550e9":"## making a copy\ndf = data2.copy()","edaa2c12":"df.head()","850a819e":"df['first_temp_diff']= df['Temperature']-df['Temperature'].shift(12)","34a64803":"df.head(20)","0cfddaa8":"df.shape","25c7c4b4":"df.dropna(inplace=True)","ab59fc40":"df.shape","15cc11a5":"test_result1=adfuller(df['first_temp_diff'])","841e4056":"test_result1","f1d79330":"df[['first_temp_diff']].plot(figsize=(25,12))","a55fb6ac":"## creating month column\ndata2['month']=data2.index.month\n\n## creating year column\ndata2['year']=data2.index.year","8e80da09":"data2.head()","d9a66b19":"pivot=data2.pivot_table(values='Temperature', index='month', columns='year')","cafc6442":"pivot","1b76cb87":"monthly_seasonality=pivot.mean(axis=1)","0681491c":"monthly_seasonality.plot(figsize=(20,6))","91ba913d":"## for time series model we need stationary data\ndf.head()","65d7d88d":"## subset the column first_temp_diff\ndf= df[['first_temp_diff']]","3ef4a5c9":"df.head()","c30ba17f":"## caluclating rolling mean\ndf['first_temp_diff'].rolling(window=5).mean()","12f7315a":"value = pd.DataFrame(df['first_temp_diff'])","f40e80b4":"## merging two results\ntemp_df= pd.concat([value, df['first_temp_diff'].rolling(window=5).mean()],axis=1)","c570b71f":"## renaming columns\ntemp_df.columns=['actual_temp','forcast_temp']","49b6d3d4":"temp_df.head()","fa272fa5":"from sklearn.metrics import mean_squared_error","bc5db778":"## calulating metrics from 5th row value excluding NaN\nnp.sqrt(mean_squared_error(temp_df['forcast_temp'][4:],temp_df['actual_temp'][4:]))","78e1a400":"from statsmodels.graphics.tsaplots import plot_acf,plot_pacf","0029b46b":"df.head()","582e9f9d":"plot_acf(df['first_temp_diff'].dropna())","f6d5970b":"plot_pacf(df['first_temp_diff'].dropna())","da117ed0":"df.isna().sum()","7aba717f":"from statsmodels.tsa.arima_model import ARIMA","9de4b36c":"df.shape","15289379":"## train test split\n\ntrain_data = df[0:6000]\ntest_data = df[6000:]","0a3d20a2":"arima = ARIMA(train_data, order=(2,1,3))","91a7d60b":"model = arima.fit()","02833da7":"## forcasting for 10 days on train data\n\nmodel.forecast(steps=10)[0]","263393dd":"predictions=model.forecast(steps=len(test_data))[0]","a4748e1f":"predictions","7b5cc150":"from pandas import DataFrame","3a2de37f":"predict = pd.DataFrame(predictions, columns=[\"pred\"])","b90f5842":"np.sqrt(mean_squared_error(test_data, predictions))","eb9a65b8":"### Making the data stationary","40da4ffc":"#### We can notice that the avg. temp has been increasing in the past 30 years, indicating a rapid increase in global warming.","203d45cb":"### Data Import & Reading","0f606b4b":"#### We can notice that from the past 3-4 decades avg. seasonal temepratures have been increasing worldwide.","4430708a":"### Forecasting on Test data","dcfa5037":"### Fetching year from date column","0d43ecf0":"### Augmented Dickey-Fuller test","a0d8b8ef":"### Data Stability Check","f3b9841c":"#### Based on the above test where p-vale is >0.05, we fail to reject the null hypothesis, data has unit root & is Non-stationary","135399ff":"### Analyzing avg.temperature across different season","67e434f1":"### Model Evaluation","6edcef6b":"#### From the above plot, we are not able to draw concrete inference about data stability, therefore we'll use statistical test to check it.","e2766719":"#### The p-value is almost zero and data seems to be stationary, we can verify it by plotting.","119fa685":"### Creating derieved columns","338e81e5":"### Conclusion:\n#### Compared to the moving avg method error rate of 2.39, ARIMA error rate is less and therefore a better model for temperature forecast.","bbaefeca":"#### The data shows monthly seasonality as the avg. temperature across all years show a rise in month of June to August.","fa60d0a9":"### Seasonality Check","1f1c742e":"### ARIMA Model","928e14f6":"### Moving Average Method","11d78dc1":"### Data Preprocessing\n#### For our timeseries model we'll use cities dataset.","a75031b7":"### Model Evaluation","f41423a3":"#### The above error rate indicates that on any given day there will be a (+\/-) 2.39 difference in temp.","187f9cd5":"#### year has a 12 month cycle therefore we are going to shift the temp by 12 places and then calculate the temp difference."}}