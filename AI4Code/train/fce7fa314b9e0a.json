{"cell_type":{"67eb8f04":"code","554b6f06":"code","50527415":"code","d552e851":"code","58cefc43":"code","454abc77":"code","bea71796":"code","bb34b4e0":"code","0414a03c":"code","7d50617f":"code","d5c5d576":"code","3e8875ae":"code","9819757b":"code","90098d24":"code","b82ff842":"code","6a39936e":"markdown","be9a93e3":"markdown","ed2aac22":"markdown","cf38695e":"markdown","f71cdf75":"markdown","db4ac940":"markdown"},"source":{"67eb8f04":"import numpy as np\nimport pandas as pd\n\nimport os\nimport json\nfrom pathlib import Path\n\nimport matplotlib.pyplot as plt\nfrom matplotlib import colors\nimport numpy as np","554b6f06":"from pathlib import Path\n\ndata_path = Path('\/kaggle\/input\/abstraction-and-reasoning-challenge\/')\ntraining_path = data_path \/ 'training'\nevaluation_path = data_path \/ 'evaluation'\ntest_path = data_path \/ 'test'\n\ntrain_tasks = sorted(os.listdir(training_path))\neval_tasks = sorted(os.listdir(evaluation_path))","50527415":"def plot_one(ax, i,train_or_test,input_or_output):\n    cmap = colors.ListedColormap(\n        ['#000000', '#0074D9','#FF4136','#2ECC40','#FFDC00',\n         '#AAAAAA', '#F012BE', '#FF851B', '#7FDBFF', '#870C25'])\n    norm = colors.Normalize(vmin=0, vmax=9)\n    \n    input_matrix = task[train_or_test][i][input_or_output]\n    ax.imshow(input_matrix, cmap=cmap, norm=norm)\n    ax.grid(True,which='both',color='lightgrey', linewidth=0.5)    \n    ax.set_yticks([x-0.5 for x in range(1+len(input_matrix))])\n    ax.set_xticks([x-0.5 for x in range(1+len(input_matrix[0]))])     \n    ax.set_xticklabels([])\n    ax.set_yticklabels([])\n    ax.set_title(train_or_test + ' '+input_or_output)\n    \n\ndef plot_task(task, data_set = 'train'):\n    \"\"\"\n    Plots the first train and test pairs of a specified task,\n    using same color scheme as the ARC app\n    \"\"\"    \n    num_train = len(task['train'])\n    fig, axs = plt.subplots(2, num_train, figsize=(3*num_train,3*2))\n    for i in range(num_train):     \n        plot_one(axs[0,i],i,'train','input')\n        plot_one(axs[1,i],i,'train','output')        \n    plt.tight_layout()\n    plt.show()        \n        \n    num_test = len(task['test'])\n    fig, axs = plt.subplots(2, num_test, figsize=(3*num_test,3*2))\n    if num_test==1: \n        plot_one(axs[0],0,'test','input')\n        if data_set == 'train':\n            plot_one(axs[1],0,'test','output')     \n    else:\n        for i in range(num_test):      \n            plot_one(axs[0,i],i,'test','input')\n            if data_set == 'train':\n                plot_one(axs[1,i],i,'test','output')  \n    plt.tight_layout()\n    plt.show() ","d552e851":"train_file = str(training_path \/ train_tasks[15])\n\nwith open(train_file, 'r') as f:\n    task = json.load(f)","58cefc43":"def flattener(pred):\n    str_pred = str([row for row in pred])\n    str_pred = str_pred.replace(', ', '')\n    str_pred = str_pred.replace('[[', '|')\n    str_pred = str_pred.replace('][', '|')\n    str_pred = str_pred.replace(']]', '|')\n    return str_pred","454abc77":"plot_task(task)","bea71796":"def find_count_tow_list(a,b):\n    count = 0\n    for i,j in enumerate(a):\n        if j == b[i]:\n            count+=1\n    return  count","bb34b4e0":"replace_color = {}\nfor k in range(len(task['train'])):\n    target = flattener(task['train'][k]['output'])\n    input_str = flattener(task['train'][k]['input'])\n    base_count = find_count_tow_list(input_str,target)\n    for i in range(10):\n        for j in range(10):\n            input_strr = input_str.replace(str(i),str(j))\n            new_count = find_count_tow_list(target,input_strr)\n            if new_count>base_count:\n                replace_color[i]=j\n#new_str = ''\ndata = [[replace_color[i] for i in j] for j in task['test'][0]['input']]","0414a03c":"def plot_one(ax, i,train_or_test,input_or_output):\n    cmap = colors.ListedColormap(\n        ['#000000', '#0074D9','#FF4136','#2ECC40','#FFDC00',\n         '#AAAAAA', '#F012BE', '#FF851B', '#7FDBFF', '#870C25'])\n    norm = colors.Normalize(vmin=0, vmax=9)\n    \n    input_matrix = task[train_or_test][i][input_or_output]\n    ax.imshow(input_matrix, cmap=cmap, norm=norm)\n    ax.grid(True,which='both',color='lightgrey', linewidth=0.5)    \n    ax.set_yticks([x-0.5 for x in range(1+len(input_matrix))])\n    ax.set_xticks([x-0.5 for x in range(1+len(input_matrix[0]))])     \n    ax.set_xticklabels([])\n    ax.set_yticklabels([])\n    ax.set_title(train_or_test + ' '+input_or_output)\n    \n\ndef plot_task(task, data_set = 'train'):\n    \"\"\"\n    Plots the first train and test pairs of a specified task,\n    using same color scheme as the ARC app\n    \"\"\"    \n    num_train = len(task['train'])\n    fig, axs = plt.subplots(2, num_train, figsize=(3*num_train,3*2))\n    for i in range(num_train):     \n        plot_one(axs[0,i],i,'train','input')\n        plot_one(axs[1,i],i,'train','output')        \n    plt.tight_layout()\n    plt.show()        \n        \n    num_test = len(task['test'])\n    fig, axs = plt.subplots(2, num_test, figsize=(3*num_test,3*2))\n    if num_test==1: \n        plot_one(axs[0],0,'test','input')\n        if data_set == 'train':\n            plot_one(axs[1],0,'test','output')     \n    else:\n        for i in range(num_test):      \n            plot_one(axs[0,i],i,'test','input')\n            if data_set == 'train':\n                plot_one(axs[1,i],i,'test','output')  \n    plt.tight_layout()\n    plt.show() ","7d50617f":"train_correct = len(train_tasks)\nfor i in range(len(train_tasks)):\n    train_file = str(training_path \/ train_tasks[i])\n    \n    with open(train_file, 'r') as f:\n        task = json.load(f)\n    \n    # Find the replace color rule\n    replace_color = {}\n    for k in range(len(task['train'])):\n        if len(flattener(task['train'][k]['output'])) == len(flattener(task['train'][k]['input'])):\n            target = flattener(task['train'][k]['output'])\n            input_str = flattener(task['train'][k]['input'])\n            base_count = find_count_tow_list(input_str,target)\n            for i in range(10):\n                for j in range(10):\n                    input_strr = input_str.replace(str(i),str(j))\n                    new_count = find_count_tow_list(target,input_strr)\n                    if new_count>base_count:\n                        replace_color[i]=j\n        else:\n            break\n    data = [[replace_color[i] if i in replace_color else i for i in j] for j in task['test'][0]['input']]\n    pred_1 = flattener(data)\n    \n    if pred_1 == flattener(task['test'][0]['output']):\n        print('file name = '+train_tasks[i])\n        plot_task(task)\n        train_correct-=1\n    \n    # copy paste first rows \n    for j in task['test'][0]['input']:\n        if not np.any(j==0):\n            temp_data = j\n    \n    data = [temp_data for j in range(len(task['test'][0]['input']))]  \n    pred_2 = flattener(data)\n    if pred_2 == flattener(task['test'][0]['output']):\n        print('file name = '+train_tasks[i])\n        plot_task(task)\n        train_correct-=1                   ","d5c5d576":"print (\"Training set error rate ==> {}, detect tasks {} \/ {}\".format(train_correct\/len(train_tasks),len(train_tasks) - train_correct,len(train_tasks)))","3e8875ae":"eval_correct = len(eval_tasks)\nfor i in range(len(eval_tasks)):\n    eval_file = str(evaluation_path \/ eval_tasks[i])\n    \n    with open(eval_file, 'r') as f:\n        task = json.load(f)\n        \n    # Find the replace color rule    \n    replace_color = {}\n    for k in range(len(task['train'])):\n        if len(flattener(task['train'][k]['output'])) == len(flattener(task['train'][k]['input'])):\n            target = flattener(task['train'][k]['output'])\n            input_str = flattener(task['train'][k]['input'])\n            base_count = find_count_tow_list(input_str,target)\n            for i in range(10):\n                for j in range(10):\n                    input_strr = input_str.replace(str(i),str(j))\n                    new_count = find_count_tow_list(target,input_strr)\n                    if new_count>base_count:\n                        replace_color[i]=j\n        else:\n            break\n    data = [[replace_color[i] if i in replace_color else i for i in j] for j in task['test'][0]['input']]\n    pred_1 = flattener(data)\n    if pred_1 == flattener(task['test'][0]['output']):\n        print('file name = '+train_tasks[i])\n        plot_task(task)\n        eval_correct-=1\n        \n    # copy paste first rows \n    for j in task['test'][0]['input']:\n        if not np.any(j==0):\n            temp_data = j\n    data = [temp_data for j in range(len(task['test'][0]['input']))]  \n    pred_2 = flattener(data)\n    if pred_2 == flattener(task['test'][0]['output']):\n        print('file name = '+train_tasks[i])\n        plot_task(task)\n        eval_correct-=1                   ","9819757b":"print (\"Evaluate set error rate ==> {}, detect tasks {} \/ {}\".format(eval_correct\/len(eval_tasks),len(eval_tasks) - eval_correct,len(eval_tasks)))","90098d24":"submission = pd.read_csv(data_path \/ 'sample_submission.csv', index_col='output_id')\ndisplay(submission.head())","b82ff842":"count = 0\nfor output_id in submission.index:\n    task_id = output_id.split('_')[0]\n    pair_id = int(output_id.split('_')[1])\n    f = str(test_path \/ str(task_id + '.json'))\n    with open(f, 'r') as read_file:\n        task = json.load(read_file)\n    \n    # Find the replace color rule \n    replace_color = {}\n    for k in range(len(task['train'])):\n        if len(flattener(task['train'][k]['output'])) == len(flattener(task['train'][k]['input'])):\n            target = flattener(task['train'][k]['output'])\n            input_str = flattener(task['train'][k]['input'])\n            base_count = find_count_tow_list(input_str,target)\n            for i in range(10):\n                for j in range(10):\n                    input_strr = input_str.replace(str(i),str(j))\n                    new_count = find_count_tow_list(target,input_strr)\n                    if new_count>base_count:\n                        replace_color[i]=j\n        else:\n            break\n    data = [[replace_color[i] if i in replace_color else i for i in j] for j in task['test'][pair_id]['input']]\n    pred_1 = flattener(data)\n    \n    # copy paste first rows \n    for j in task['test'][0]['input']:\n        if not np.any(j==0):\n            temp_data = j\n    data = [temp_data for j in range(len(task['test'][0]['input']))]  \n    pred_2 = flattener(data)\n\n    data = [[0 for i in j] for j in data]\n    pred_3 = flattener(data)\n    \n    pred = pred_1 + ' ' + pred_2 + ' ' + pred_3 + ' ' \n    submission.loc[output_id, 'output'] = pred\n    \n\nsubmission.to_csv('submission.csv')","6a39936e":"## This shows easy function to find the rule of input and output color change","be9a93e3":"## Write a function that auto detect color change rule","ed2aac22":"### Plot function","cf38695e":"## Test set Submit","f71cdf75":"### Training set detect and predict","db4ac940":"### Evaluate set detect and predict"}}