{"cell_type":{"295461fe":"code","7fe81986":"code","1f41b135":"code","cfd5f40d":"code","29e4a9ba":"code","05002317":"code","980a475d":"code","5b8c19e2":"code","a29a65d5":"code","5190a505":"code","a6340a00":"code","446aa368":"code","4ce7da2b":"code","7f5ee6da":"code","454acbbe":"code","0dba1609":"code","1465675d":"code","1f093efc":"code","362ee165":"code","d032899f":"code","aecb4e13":"code","d0dbee9a":"code","555f8545":"code","eabbdbad":"code","fa3b892e":"code","fa528a93":"code","eee7ab2e":"code","837daf46":"markdown","305d38c3":"markdown","1fec916e":"markdown","5488c3d6":"markdown","96e55222":"markdown","3baf1578":"markdown","21de2359":"markdown","9c6b4a8f":"markdown","80dc5cfd":"markdown","be89c872":"markdown","385f5c49":"markdown","a8dd9fd0":"markdown","aae5bf02":"markdown","e09fb438":"markdown","512e5e09":"markdown"},"source":{"295461fe":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7fe81986":"import os\nimport requests\n\nimport os\nimport gc\nimport glob\n\nfrom tqdm.notebook import tqdm\ntqdm.pandas()\n\nimport plotly.express as px\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True) \nimport plotly.graph_objs as go\n\nfrom plotnine import *\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly\nimport plotly.express as px\nimport plotly.graph_objs as go\nfrom geopy.geocoders import Nominatim\nimport folium\nfrom folium.plugins import HeatMap\nfrom folium.plugins import FastMarkerCluster\nfrom plotly import tools\nimport re\nfrom plotly.offline import init_notebook_mode, plot, iplot\nfrom wordcloud import WordCloud, STOPWORDS \nfrom warnings import filterwarnings\nfilterwarnings('ignore')\nimport missingno as msno\nimport glob\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport plotly.graph_objs as go\nimport plotly.express as px\nimport PIL.Image\nimport cv2\nimport urllib\nfrom IPython.display import Image, display\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport urllib\n\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)","1f41b135":"os.listdir('..\/input\/wikipedia-image-caption\/')","cfd5f40d":"test_file = pd.read_csv('..\/input\/wikipedia-image-caption\/test.tsv', sep='\\t')\ntest_file.head(1)","29e4a9ba":"tesdt_file = pd.read_csv('..\/input\/wikipedia-image-caption\/test_caption_list.csv')\ntesdt_file.head()","05002317":"wiki_df = pd.read_csv('..\/input\/wikipedia-image-caption\/image_data_test\/image_pixels\/test_image_pixels_part-00000.csv', \n                      sep='\\t', names=['image_url', 'b64_bytes', 'metadata_url'])\ndf = pd.read_csv('..\/input\/wikipedia-image-caption\/image_data_test\/image_pixels\/test_image_pixels_part-00000.csv', sep='\\t', names=['image_url', 'b64_bytes', 'metadata_url'])\ndf\nwiki_df.head(1)","980a475d":"sub_file = pd.read_csv('..\/input\/wikipedia-image-caption\/sample_submission.csv')\nsub_file.head(1)","5b8c19e2":"print(\"the shape of the wiki file is : \" , wiki_df.shape)\nprint(\"the shape of the test file is : \", test_file.shape)\nprint(\"the shape of the sub file is  : \" ,sub_file.shape)","a29a65d5":"def get_links(df, num):\n    return df.image_url[:num].values\n\nlinks = get_links(df, 10)\n\n\ndef load_images(links):\n    images = []\n    \n    for link in links:\n        URL = link\n        try:\n\n            with urllib.request.urlopen(URL) as url:\n                with open('.\/temp.jpg', 'wb') as f:\n                    f.write(url.read())\n\n            img = PIL.Image.open('.\/temp.jpg')\n            img = np.asarray(img)\n            images.append(img)\n        except:\n            continue\n    return images\n\ndef display_images(images, title=None): \n    f, ax = plt.subplots(2,5, figsize=(18,12))\n    if title:\n        f.suptitle(title, fontsize = 30)\n\n    for i, image_id in enumerate(images):\n        ax[i\/\/5, i%5].imshow(image_id) \n   \n        ax[i\/\/5, i%5].axis('off')\n\n    plt.show()","5190a505":"images = load_images(links)","a6340a00":"display_images(images)","446aa368":"links = df.image_url[20:32].values\nimages = load_images(links)\ndisplay_images(images)","4ce7da2b":"# from matplotlib import rcParams\n\n# a = sns.displot(x='language', data=test_file,color='#73C6B6',height=8, aspect=20\/8)","7f5ee6da":"# import plotly.graph_objects as go    \n\n# fig = go.Figure(\n#     data=[ go.Bar(x=test_file['language'].value_counts().index, \n#             y=test_file['language'].value_counts().values,\n#             text=test_file['language'].value_counts().values,\n#             textposition='auto',name='Count',\n#            marker_color='#73C6B6')],\n#     layout_title_text=\"Language Distribution : using plotly v2\"\n# )\n# fig.show()","454acbbe":"# import matplotlib.pyplot as plt\n# import squarify    # pip install squarify (algorithm for treemap)\n# plt.figure(figsize=(25,8))\n# squarify.plot(sizes=test_file['language'].value_counts().values, \n#               label=test_file['language'].value_counts().index, \n#               color=[\"#73C6B6\",\"lightgreen\",\"cyan\", \"c\"],\n#               alpha=.8 )\n# plt.title(\"A square graph for the same :D\")\n# plt.axis('off')\n# plt.show()","0dba1609":"df = pd.read_csv('..\/input\/wikipedia-image-caption\/train-00000-of-00005.tsv', sep='\\t',nrows=10000)\ndf.head(1)","1465675d":"df = df[df['language']==\"en\"]\ndf.head(1)","1f093efc":"def display_images(images, title=None): \n    f, ax = plt.subplots(1,1, figsize=(18,12))\n    if title:\n        f.suptitle(title, fontsize = 30)\n\n    for i, image_id in enumerate(images):\n        ax.imshow(image_id) \n        ax.axis('off')\n\n    plt.show()\n\nlinks = df.image_url[0:1]\nimages = load_images(links)\nprint(\"The title of the image is \",df.page_title[0:1])\ndisplay_images(images)\n\n","362ee165":"import plotly.graph_objects as go    \n\nfig = go.Figure(\n    data=[ go.Bar(x=df['page_changed_recently'].value_counts().index, \n            y=df['page_changed_recently'].value_counts().values,\n            text=df['page_changed_recently'].value_counts().values,\n            textposition='auto',name='Count',\n           marker_color='#73C6B6')],\n    layout_title_text=\"Has the page been changed recently?\"\n)\nfig.show()","d032899f":"import plotly.graph_objects as go    \n\nfig = go.Figure(\n    data=[ go.Bar(x=df['mime_type'].value_counts().index, \n            y=df['mime_type'].value_counts().values,\n            text=df['mime_type'].value_counts().values,\n            textposition='auto',name='Count',\n           marker_color='#73C6B6')],\n    layout_title_text=\"What is the Distribution of the various file types\"\n)\nfig.show()","aecb4e13":"import plotly.graph_objects as go    \n\nfig = go.Figure(\n    data=[ go.Bar(x=df['is_main_image'].value_counts().index, \n            y=df['is_main_image'].value_counts().values,\n            text=df['is_main_image'].value_counts().values,\n            textposition='auto',name='Count',\n           marker_color='#73C6B6')],\n    layout_title_text=\"Is the image the main image of the article?\"\n)\nfig.show()","d0dbee9a":"cloud = WordCloud(width=1440, height=1080,stopwords={'nan'},colormap='Greens',background_color='white').generate(\" \".join(df['page_title'].astype(str)))\nplt.figure(figsize=(16, 10))\nplt.title('A WordCloud of the various pages in the file',fontsize=20,pad=40)\nplt.imshow(cloud)\nplt.axis('off')","555f8545":"cloud = WordCloud(width=1440, height=1080,stopwords={'nan'},colormap='Greens',background_color='white').generate(\" \".join(df['section_title'].astype(str)))\nplt.figure(figsize=(16, 10))\nplt.title('A WordCloud of the various section for the pages in the file',fontsize=20,pad=40)\nplt.imshow(cloud)\nplt.axis('off')","eabbdbad":"df = pd.read_csv('..\/input\/wikipedia-image-caption\/train-00000-of-00005.tsv', sep='\\t',nrows=10000)\ndf.head(1)\ndf = df[df['language']==\"de\"]\ndf.head(1)","fa3b892e":"def display_images(images, title=None): \n    f, ax = plt.subplots(1,1, figsize=(18,12))\n    if title:\n        f.suptitle(title, fontsize = 30)\n\n    for i, image_id in enumerate(images):\n        ax.imshow(image_id) \n        ax.axis('off')\n\n    plt.show()\n\nlinks = df.image_url[0:1]\nimages = load_images(links)\nprint(\"The title of the image is \",df.page_title[0:1])\ndisplay_images(images)\n\n","fa528a93":"cloud = WordCloud(width=1440, height=1080,stopwords={'nan'},colormap='Greens',background_color='white').generate(\" \".join(df['page_title'].astype(str)))\nplt.figure(figsize=(16, 10))\nplt.title('A WordCloud of the various pages in the file',fontsize=20,pad=40)\nplt.imshow(cloud)\nplt.axis('off')","eee7ab2e":"%%html\n<marquee style='width: 90% ;height:70%; color: #45B39D ;'>\n    <b>Do UPVOTE if you like my work, I will be adding some more content to this kernel post understanding the files :) <\/b><\/marquee>","837daf46":"## Wikipedia - Image\/Caption Matching\n### Retrieve captions based on images\n\n\n### Description\nA picture is worth a thousand words, yet sometimes a few will do. We all rely on online images for knowledge sharing, learning, and understanding. Even the largest websites are missing visual content and metadata to pair with their images. Captions and \u201calt text\u201d increase accessibility and enable better search. The majority of images on Wikipedia articles, for example, don't have any written context connected to the image. Open models could help anyone improve accessibility and learning for all.\n\nCurrent solutions rely on simple methods based on translations or page interlinks, which have limited coverage. Even the most advanced computer vision image captioning isn't suitable for images with complex semantics.\n\n### Data\nThe objective of this competition is to predict the target caption_title_and_reference_description given information about an images. The targets for this competition are in multiple languages.\n\n### Files\n- train-{0000x}-of-00005.tsv - the training data (tab delimited)\n- test.tsv - the test data; the objective is to predict the target caption_title_and_reference_description for each row id\n- sample_submission.csv - a sample submission file in the correct format; note that multiple predictions (up to 5) are allowed for each id in the test data.\n- image_data_test\/\n - image_pixels\/test_image_pixels_part-{0000x}.csv.gz\n - image_url: url to the original image file, e.g. https:\/\/upload.wikimedia.org\/wikipedia\/commons\/e\/ec\/Hovden.jpg\n - b64_bytes: base64 encoded bytes of the image file at a 300px resolution\n - metadata_url: url to the commons page of the image, e.g. https:\/\/commons.wikimedia.org\/wiki\/File:Hovden.jpg\n - resnet_embeddings\/test_resnet_embeddings_part-{0000x}.csv.gz\n - image_url: url to the original image file, e.g. https:\/\/upload.wikimedia.org\/wikipedia\/commons\/e\/ec\/Hovden.jpg\n - embedding: a comma separated list of 2048 float values\n- image_data_train - Due to the size of the training image data (~275 Gb), it is hosted separately and can be found here. Note that not all of the training observations have corresponding image data.\n \n*kaggle competitions download -c wikipedia-image-caption*\n\n### Submission\nSubmissions will be evaluated using NDCG@5 (Normalized Discounted Cumulative Gain).\n\nThe submission should be a list of id,caption_title_and_reference_description pairs ranked from top to bottom according to their relevance (i.e., the top id is the most relevant caption_title_and_reference_description), with up to 5 predictions per id. Each line should be a single id,caption_title_and_reference_description pair.\n\n## Prizes\nThe top three winning teams will receive Wikipedia-branded merchandise","305d38c3":"**Loading the Submission data**","1fec916e":"**Loading the wiki data**","5488c3d6":"If there are any suggesion for the notebook please comment, that would be helpful. Also please upvote if you liked it! Thank you!!\n\nSome of my other works:\n\n* [TPS- APR](https:\/\/www.kaggle.com\/udbhavpangotra\/tps-apr21-eda-model) \n* [HEART ATTACKS](https:\/\/www.kaggle.com\/udbhavpangotra\/heart-attacks-extensive-eda-and-visualizations) \n* [YOUTUBE DATA EXPLORATION](https:\/\/www.kaggle.com\/udbhavpangotra\/what-do-people-use-youtube-for-in-great-britain)\n* [TPS MAY](https:\/\/www.kaggle.com\/udbhavpangotra\/tps-may-21-extensive-eda-catboost-shap)\n* [COVID-19 DIGITAL LEARNING](https:\/\/www.kaggle.com\/udbhavpangotra\/how-did-covid-19-impact-digital-learning-eda)\n* [TPS - SEPT](https:\/\/www.kaggle.com\/udbhavpangotra\/extensive-eda-baseline-shap)\n\n* [also try this dataset ReliefWeb Crisis Figures Data](https:\/\/www.kaggle.com\/udbhavpangotra\/reliefweb-crisis-figures-data)","96e55222":"## Exploring the test file\n### Languages in the test file\n\nthis won't work after the data was updated","3baf1578":"## Loading the images and exploring the images ","21de2359":"**Shape of the data we have!**","9c6b4a8f":"# EDA","80dc5cfd":"# Importing the libs and data ","be89c872":"## We look at a English artices in a bit more detail, I will be using just the first 10000 rows ","385f5c49":"I'll try to read the whole tsv","a8dd9fd0":"## Now looking at some data with German language ","aae5bf02":"# About the competition","e09fb438":"Credits to the people who did some EDA before me helping me in doing the same! \n\n1.  [KALILUR RAHMAN](https:\/\/www.kaggle.com\/kalilurrahman\/wikimedia-image-text-matching-eda), I loved the square plot! \n2.  [RADMIR ZOSIMOV](https:\/\/www.kaggle.com\/hijest\/wikipedia-image-caption-matching-starter-eda)\n3.  [MAR\u00cdLIA PRATA](https:\/\/www.kaggle.com\/mpwolke\/wikimedia-urllib)","512e5e09":"**Loading the test data**"}}