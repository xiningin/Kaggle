{"cell_type":{"e42e5075":"code","a83bae3e":"code","7de07c71":"code","1dab1117":"code","d3594c50":"code","497f95a7":"code","ac99e50f":"code","d36bf311":"code","0d2532c2":"code","f2c2ff56":"code","d46d0de4":"code","61e31c01":"code","227bdad4":"code","8904c111":"code","ecf231a6":"code","88b9ea26":"code","82e389e8":"code","f78027bb":"code","5e06f57a":"code","430a555b":"code","347d8e4b":"code","445066b1":"code","62ddc3e4":"code","147943e6":"code","b7747f0f":"code","d7e15715":"code","623061f4":"code","85399bdf":"code","4cf0fff8":"markdown","c927b622":"markdown","64aaa642":"markdown","5419b4b6":"markdown","fc4fee36":"markdown","65c7adc0":"markdown","dbae1ec2":"markdown","d56918c1":"markdown","a6dddf4e":"markdown","4b916025":"markdown","a6123977":"markdown","75010478":"markdown"},"source":{"e42e5075":"import numpy as np\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.layers import Dropout\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.preprocessing import image_dataset_from_directory\nimport scipy.ndimage\nimport pandas as pd\nimport glob, os, random\nfrom matplotlib import image, pyplot\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go","a83bae3e":"base_path = '\/kaggle\/input\/garbage-classification\/Garbage classification\/Garbage classification'\nlabels = os.listdir(base_path)","7de07c71":"labels","1dab1117":"for label in labels:\n    directory = os.path.join(base_path, label)\n    print(len(os.listdir(directory)), \"\\t\" + label)","d3594c50":"for label in labels:\n    directory = os.path.join(base_path, label)\n    path = os.path.join(directory, os.listdir(directory)[0])\n    i = image.imread(path)\n    print(i.shape, \"\\t\" + label)","497f95a7":"num_categories = len(labels)\nsize_y = 100\nsize_x = 100\nimage_size = (size_y, size_x)\nbatch_size = 16\n","ac99e50f":"from tensorflow.keras.preprocessing.image import ImageDataGenerator\ntrain_datagen = ImageDataGenerator(\n    horizontal_flip=True,\n    vertical_flip=True,\n    rotation_range=15,\n    zoom_range=0.1,\n    width_shift_range=0.15,\n    height_shift_range=0.15,\n    shear_range=0.1,\n    fill_mode=\"nearest\",\n    rescale=1.\/255., \n    validation_split=0.2\n)\ntrain_generator = train_datagen.flow_from_directory(\n    base_path,\n    target_size=image_size,\n    batch_size=batch_size,\n    class_mode='binary',\n    subset='training'\n)\nvalidation_generator = train_datagen.flow_from_directory(\n    base_path,\n    target_size=image_size,\n    batch_size=batch_size,\n    class_mode='binary',\n    subset='validation'\n)","d36bf311":"model = Sequential(\n    [\n        layers.Flatten(input_shape=(size_y, size_x, 3)),\n        layers.Dense(256, activation=\"relu\"),\n        layers.BatchNormalization(),\n        layers.Dropout(0.2),\n        layers.Dense(512, activation=\"relu\"),\n        layers.BatchNormalization(),\n        layers.Dropout(0.4),\n        \n        layers.Dense(num_categories, activation=\"softmax\"),\n    ]\n)\n\nmodel.build((size_y, size_x))\nmodel.summary()","0d2532c2":"optimizer = keras.optimizers.Adam(learning_rate=0.001)\nmodel.compile(loss='sparse_categorical_crossentropy', optimizer=optimizer, metrics=['accuracy'])","f2c2ff56":"history = model.fit(\n    train_generator,\n    epochs=10,\n    batch_size=batch_size,\n    verbose=1,\n    validation_data=validation_generator\n)","d46d0de4":"fig = make_subplots(rows=1, cols=2)\n\nfig.add_trace(go.Scatter(\n    y=history.history['loss'],\n    mode='lines+markers',\n    name='training loss'\n), row=1, col=1)\n\nfig.add_trace(go.Scatter(\n    y=history.history['val_loss'],\n    mode='lines+markers',\n    name='validation loss'\n), row=1, col=1)\n\n\nfig.add_trace(go.Scatter(\n    y=history.history['accuracy'],\n    mode='lines+markers',\n    name='training accuracy'\n), row=1, col=2)\n\nfig.add_trace(go.Scatter(\n    y=history.history['val_accuracy'],\n    mode='lines+markers',\n    name='validation accuracy'\n), row=1, col=2)\n\nfig.update_xaxes(title_text='Epoch')\nfig.update_layout(title_text=\"Training History Metrics\")\nfig.show()","61e31c01":"from keras.preprocessing.image import load_img, img_to_array, ImageDataGenerator\nfrom keras.applications.vgg16 import preprocess_input\n\noriginal_image = load_img('\/kaggle\/input\/garbage-classification\/Garbage classification\/Garbage classification\/metal\/metal111.jpg', target_size=(size_y, size_x))\nmy_image = img_to_array(original_image)\nmy_image = my_image.reshape((1, my_image.shape[0], my_image.shape[1], my_image.shape[2]))\nmy_image = preprocess_input(my_image)\nprediction = model.predict(my_image)\npredicted_label = labels[np.argmax(prediction)]\npyplot.imshow(original_image)\nprint(\"Expected : metal, Predicted: \" + predicted_label)","227bdad4":"all_datagen = ImageDataGenerator(rescale=1.\/255.)\nall_generator = all_datagen.flow_from_directory(\n        base_path,\n        target_size=(size_y, size_x),\n        batch_size=1,\n        class_mode='categorical'\n)","8904c111":"all_generator.labels","ecf231a6":"filenames =all_generator.filenames\nnb_samples = len(filenames)","88b9ea26":"predictions = model.predict(all_generator)","82e389e8":"predictions","f78027bb":"predicted_classes=np.argmax(predictions,axis=1)\npredicted_classes","5e06f57a":"from sklearn.metrics import confusion_matrix\ncm = confusion_matrix(all_generator.labels, predicted_classes)\ncm","430a555b":"import seaborn as sns\nfigure = pyplot.figure(figsize=(8, 8))\nsns.heatmap(cm, annot=True,cmap=pyplot.cm.Blues)\npyplot.tight_layout()\npyplot.ylabel('True label')\npyplot.xlabel('Predicted label')\npyplot.show()","347d8e4b":"train_ds = image_dataset_from_directory(\n    base_path,\n    subset=\"training\",\n    seed=8,\n    image_size=image_size,\n    batch_size=batch_size,\n    label_mode=\"categorical\",\n    class_names=labels,\n    validation_split=0.2\n)","445066b1":"validation_ds = image_dataset_from_directory(\n    base_path,\n    subset=\"validation\",\n    seed=8,\n    image_size=image_size,\n    batch_size=batch_size,\n    label_mode=\"categorical\",\n    class_names=labels,\n    validation_split=0.2\n)","62ddc3e4":"modelo_cnn = Sequential(\n    [\n        layers.Conv2D(32, (3, 3), activation='relu', input_shape=(size_x, size_y, 3)),\n        layers.BatchNormalization(),\n        layers.Conv2D(32, (3, 3), activation='relu'),\n    \n        layers.Conv2D(64, (3, 3), activation='relu'),\n        layers.BatchNormalization(),\n        layers.MaxPooling2D(2, 2),\n        layers.Dropout(0.2),\n        \n        layers.Conv2D(128, (3, 3), activation='relu'),\n        layers.BatchNormalization(),\n        layers.MaxPooling2D(2, 2),\n        layers.Dropout(0.4),\n        \n        layers.Flatten(),\n        layers.Dense(512, activation='relu'),\n        layers.BatchNormalization(),\n        layers.Dropout(0.4),\n        layers.Dense(6, activation='softmax')\n    ]\n)\n\nmodelo_cnn.build((size_y, size_x))\nmodelo_cnn.summary()","147943e6":"optimizer_cnn = keras.optimizers.Adam(learning_rate=0.001)\nmodelo_cnn.compile(loss='categorical_crossentropy', optimizer=optimizer_cnn, metrics=['accuracy'])","b7747f0f":"history_cnn = modelo_cnn.fit(\n    train_ds,\n    epochs=10,\n    shuffle=True,\n    verbose=1,\n    validation_data=validation_ds\n)","d7e15715":"validation_samples = sum([batch_size for [_, _] in validation_ds])\nvalidation_samples","623061f4":"y_validation = []\ny_validation_pred = []\n\n\nfor images, targets in train_ds.take(validation_samples \/\/ batch_size):\n    for i in range (batch_size):\n        img_array = images[i].numpy().astype(\"uint8\")\n        prediction = modelo_cnn.predict(np.array([img_array]))\n        y_validation_pred.append(np.argmax(prediction))\n        y_validation.append(np.argmax(targets[i]))","85399bdf":"from sklearn.metrics import confusion_matrix\nimport plotly.express as px\ncm = confusion_matrix(y_validation, y_validation_pred)\nfig = px.imshow(cm, x=labels, y=labels, title=\"Validation\")\nfig.show()","4cf0fff8":"## 2. Investigue para que funciona la capa DropOut y utilicela en caso de ser necesario (2 pts).","c927b622":"### Cantidad de im\u00e1genes","64aaa642":"# Red Neuronal Convolucional","5419b4b6":"El DropOut descarta conexiones de manera aleatoria entre neuronas con el prop\u00f3sito de minimizar el efecto de sobreajuste en una red entrenada. En el presente modelo se incluyeron varias capas de DropOut.","fc4fee36":"# Red Neuronal","65c7adc0":"### Matriz de confusi\u00f3n","dbae1ec2":"# [Ir a Parte B](https:\/\/www.kaggle.com\/acuamarco\/ia02-mrodriguez-2-b)","d56918c1":"## 3. Muestre sus resultados con una matriz de confusi\u00f3n o un reporte (4 pts)","a6dddf4e":"### Tama\u00f1o de las im\u00e1genes","4b916025":"# Utilice el dataset Garbage Classification para predecir cada uno de los materiales reciclables.","a6123977":"# [Ir a Parte B](https:\/\/www.kaggle.com\/acuamarco\/ia02-mrodriguez-2-b)","75010478":"## 1. Implemente la arquitectura de una red neuronal de multiples capas con Keras (4 pts) para realizar la clasificaci\u00f3n."}}