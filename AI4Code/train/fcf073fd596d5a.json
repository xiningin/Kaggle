{"cell_type":{"f0785078":"code","49a16238":"code","5c7bd2f3":"code","f4ff9891":"code","1560a153":"code","b17e0588":"code","b0e462c1":"code","e444f033":"code","79d1950c":"code","cd2536ba":"code","40aff275":"code","9bb51f25":"code","1ac4a909":"code","7b13c46a":"code","02e7dafd":"code","6dc171fc":"code","a2d522de":"code","c4a18bda":"code","af94759a":"code","3dc09fe0":"code","4db7c66d":"code","a8deddff":"code","a8aa0f17":"code","908ad43f":"markdown","74b82301":"markdown","cdcbabd8":"markdown","f487ac23":"markdown","66008a64":"markdown","77be1cbf":"markdown","a5116adf":"markdown","400d67cc":"markdown","094a594d":"markdown","60b4a94a":"markdown","bca194ef":"markdown"},"source":{"f0785078":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","49a16238":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings('ignore')\n## Display all the features of the Dataset\npd.set_option('display.max_columns',None)","5c7bd2f3":"dataset = pd.read_csv('\/kaggle\/input\/advance-house-price-prediction\/train.csv')","f4ff9891":"## shape of the dataset\ndataset.shape","1560a153":"## top five rows of dataset\ndataset.head()","b17e0588":"# here we will check the percentage of NaN values in every feature\n# step-1 create a list of features which has missing values\ndf = dataset.copy()\nfeature_with_nan = [feature for feature in df.columns if df[feature].isnull().sum()>0]\n\n# step-2 print the features name and percentage of missing values\nfor feature in feature_with_nan:\n    print(feature, np.round(df[feature].isnull().mean()*100,4),\"% missing values\")","b0e462c1":"color = sns.color_palette()\nfor feature in feature_with_nan:\n    df = dataset.copy()\n    # Let's make a variable that indicates the 1 if the variable is missing and zero otherwise\n    df[feature] = np.where(df[feature].isnull(),1,0)\n    \n    # Let's calculate the mean SalePrice where the information is missing or present\n\n    df.groupby(feature)['SalePrice'].median().plot.bar(color=color)\n    #sns.barplot(x=feature, y='SalePrice', data=df, ci=False, estimator=np.median )\n    plt.title(feature)\n    plt.show()\n    \n    #Instead of :    data.groupby(feature)['SalePrice'].median().plot.bar()\n    #Use:            sns.barplot(x=feature,y='SalePrice', data=df, ci=False, estimator=np.median)","e444f033":"print(\"Id of Houses is: {}\".format(len(df['Id'])))","79d1950c":"# List of numerical variables\nnumerical_features = [feature for feature in df.columns if df[feature].dtypes!='O']\nprint(\"Number of Numerical Variables: \",len(numerical_features))\n\ndf[numerical_features].head()","cd2536ba":"## List of features which contain year information\nyear_feature = [feature for feature in numerical_features if 'Yr' in feature or 'Year' in feature]\n\nyear_feature","40aff275":"# Let's explore the content of these year variables\nfor feature in year_feature:\n    print(feature, df[feature].unique())","9bb51f25":"# Let's analyze the Temporal Datetime variables\n# I'll check weather there is a relationship between year the house is sold and the output variable SalePrice\nsns.lineplot(x='YrSold', y='SalePrice', data=df, estimator=np.median, ci=False)\n#df.groupby(['YrSold'])['SalePrice'].median().plot()\nplt.xlabel('Year Sold', size=15)\nplt.ylabel('Median House Price', size=15)\nplt.title('House Price VS Year Sold', size=20)\nplt.show()","1ac4a909":"# Here i will try to compare the difference between all years features with SalePrice\nfor feature in year_feature:\n    df = df.copy()\n    # I will capture the difference between year variable and year the house was sold for\n    df[feature] = df['YrSold']-df[feature]\n    \n    #plt.scatter(df[feature], df['SalePrice'])\n    sns.scatterplot(x=feature, y='SalePrice', data=df)\n    plt.xlabel(feature)\n    plt.ylabel('SalePrice')\n    plt.show()","7b13c46a":"# Numerical Variables are usually of 2 types\n# 2. Discrete Variables\n# 1. Continuous Variables","02e7dafd":"discrete_features = [feature for feature in numerical_features if len(df[feature].unique())<25 and feature not in year_feature+['Id']]\nprint(\"Discrete Variables count:{} \".format(len(discrete_features)))","6dc171fc":"discrete_features","a2d522de":"df[discrete_features].head()","c4a18bda":"# Let's find the relationship between them and SalePrice\ncolor = sns.color_palette()\nfor feature in discrete_features:\n    df = df.copy()\n    \n    df.groupby(feature)['SalePrice'].median().plot.bar(color=color)\n    #sns.barplot(x=feature, y='SalePrice', data=df, saturation=1, errwidth=0, estimator=np.median)\n    plt.xlabel(feature, size=15)\n    plt.ylabel('SalePrice', size=15)\n    plt.show()","af94759a":"continuouse_features = [feature for feature in numerical_features if feature not in discrete_features+year_feature+['Id']]\nprint(\"Continuous Features count {}\".format(len(continuouse_features)))","3dc09fe0":"continuouse_features","4db7c66d":"# for continuous variables we see distribution so i use histogram to see this\nfor feature in continuouse_features:\n    df = df.copy()\n    sns.displot(df[feature], kde=False, bins=20)\n    #df[feature].hist()\n    plt.xlabel(feature, size=15)\n    plt.ylabel('Count', size=15)\n    plt.title(feature, size=20)\n    plt.show()","a8deddff":"# I will be using Logarithmic Transformation\n# For making tha continuouse_features into guassian distribution form\n\n\nfor feature in continuouse_features:\n    df = df.copy()\n    if 0 in df[feature].unique():\n        pass\n    else:\n        df[feature] = np.log(df[feature])\n        #df['SalePrice'] = np.log(df['SalePrice'])\n        \n        #plt.scatter(df[feature], df['SalePrice'])\n        sns.scatterplot(x=feature, y='SalePrice', data=df, color='brown')\n        #plt.xlabel(feature, size=15)\n        plt.ylabel('Sale Price', size=15)\n        plt.title(feature, size=20)\n        plt.show()\n    ","a8aa0f17":"for feature in continuouse_features:\n    if 0 in df[feature].unique():\n        pass\n    else:\n        df[feature] = np.log(df[feature])\n        sns.boxplot(df[feature])\n        #plt.boxplot(df[feature])\n        plt.ylabel(feature)\n        plt.title(feature)\n        plt.show()","908ad43f":"## **Missing Values**","74b82301":"From the above dataset some of the features like 'Id' is not required So we can drop this","cdcbabd8":"## **Numerical Variables**","f487ac23":"## ***Discrete Variables***\nA discrete variable is a variable whose value is obtained by counting. Examples: number of students present. number of red marbles in a jar. number of heads when flipping three coins. students' grade level.","66008a64":"### **In Data Analysis we will Analyze to fine out the below stuff**\n1. Missing Values\n2. All The Numerical Variables\n3. Distribution of the Numerical Variables\n4. Categorical Variables\n5. Cardinality of Categorical Variables\n6. Outliers\n7. Relationship between Independent & Dependent Feature(Sale Price)","77be1cbf":"## ***Outliers***","a5116adf":"## ***Continuouse Variables***","400d67cc":"Here with the relation between the missing values and dependent variables is clearely visible that the every feature which has nan value impact on the SalePrice either it becomes low or either it becomes high so we can't drop them. So we need to replace these nan values with something meaningful which is the part of feature engineering.","094a594d":"### **Temporal Variables (Eg: Datetime Variables)**\nIn dataset i have 4 year variables. I have extract information from the Datetime variables like no of years or no of days. \nOne example in this specific scenario can be difference in years between year the house was built to year the house was sold. I will perform this analysis in the feature engineering.","60b4a94a":"##### **Since there are many missing values so we need to find out the relationship between missing values and SalePrice**\nLet's plot some diagrams for this relationship","bca194ef":"## **Libraries**"}}