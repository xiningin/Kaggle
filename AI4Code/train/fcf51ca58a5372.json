{"cell_type":{"a450c0f0":"code","8e27a6e2":"code","1ffa1d45":"code","9fa54df5":"code","495e9a8f":"code","ca35e587":"code","6b0b4719":"code","b1b71e7a":"code","1f4f51da":"code","98abba50":"code","5fc6a7d7":"code","6bb285be":"code","3fffbc68":"code","2c156453":"code","715165d4":"code","80609620":"code","069cf852":"code","438bd060":"code","54ce481d":"code","24dc2bc1":"code","41796bc4":"code","c919c205":"code","db96fe3d":"markdown","5e621265":"markdown","790f7ff7":"markdown","b13349bc":"markdown","3cc63bc2":"markdown"},"source":{"a450c0f0":"import numpy as np\nimport pandas as pd\nimport os\nimport matplotlib.pyplot as plt\nimport cv2\nimport tqdm","8e27a6e2":"from pathlib import Path\nhome = str(Path.home())\nprint(\"HOME_FOLDER is \", home)\n\nif not os.path.exists(home+\"\/.deepface\"):\n    os.mkdir(home+\"\/.deepface\")\n    \nif not os.path.exists(home+\"\/.deepface\/weights\"):    \n    os.mkdir(home+\"\/.deepface\/weights\")\n\nimport shutil\n#shutil.copy(\"..\/input\/pretrained-models\/vgg_face_weights.h5\", home+\"\/.deepface\/weights\")\n#shutil.copy(\"..\/input\/pretrained-models\/facenet_weights.h5\", home+\"\/.deepface\/weights\")\nshutil.copy(\"..\/input\/pretrained-models\/arcface_weights.h5\", home+\"\/.deepface\/weights\")","1ffa1d45":"faces = np.load(\"\/kaggle\/input\/olivetti\/olivetti_faces.npy\")\nlabels = np.load(\"\/kaggle\/input\/olivetti\/olivetti_faces_target.npy\")\nidentities = list(np.unique(labels))","9fa54df5":"print(\"There are \",faces.shape[0],\" samples of \", len(identities),\" unique identities\")","495e9a8f":"df = pd.DataFrame(labels, columns = [\"label\"])","ca35e587":"for person_id in identities:\n    idx = list(df[df[\"label\"] == person_id].index)\n\n    print(\"Person \", person_id)\n\n    fig = plt.figure(figsize = (20, 20))\n\n    imgs = faces[idx]\n    for i, img in enumerate(imgs):\n        ax1 = fig.add_subplot(1, len(imgs), i+1)\n        plt.imshow(img, cmap='gray')\n        plt.axis('off')\n    \n    plt.show()\n    print(\"-----------------------------------\")\n    \n    if person_id >= 3:\n        break","6b0b4719":"df = df.reset_index()","b1b71e7a":"#create pairs for same person\npositive_pairs = df.merge(df, on = [\"label\"], how = 'left')\npositive_pairs = positive_pairs[positive_pairs[\"index_x\"] != positive_pairs[\"index_y\"]]\npositive_pairs = positive_pairs[[\"index_x\", \"index_y\", \"label\"]]\npositive_pairs = positive_pairs.drop(columns = [\"label\"])\npositive_pairs[\"same_person\"] = 1","1f4f51da":"#create pairs form different persons\ndf['dummy'] = 1\nnegative_pairs = df.merge(df, on =[\"dummy\"], how = 'left')\nnegative_pairs = negative_pairs[negative_pairs[\"label_x\"] != negative_pairs[\"label_y\"]]\nnegative_pairs = negative_pairs[[\"index_x\", \"index_y\"]]\nnegative_pairs[\"same_person\"] = 0","98abba50":"#number of negative pairs is much greater than number of positive instances. subsample it\nnegative_pairs = negative_pairs.sample(positive_pairs.shape[0], random_state = 17)","5fc6a7d7":"pairs = pd.concat([positive_pairs, negative_pairs])","6bb285be":"pairs.sample(10)","3fffbc68":"pairs.shape","2c156453":"!pip install gdown==3.10.1 --no-deps\n!pip install mtcnn==0.1.0 --no-deps\n!pip install deepface==0.0.51 --no-deps","715165d4":"from deepface import DeepFace","80609620":"model_name = \"ArcFace\"\nmodel = DeepFace.build_model(model_name)","069cf852":"pairs = pairs.sample(1000, random_state = 17)","438bd060":"distances = []\nfor index, instance in tqdm.tqdm(pairs.iterrows(), total = pairs.shape[0]):\n    \n    if index >= 0:\n    \n        p1 = faces[instance[\"index_x\"]]\n        p2 = faces[instance[\"index_y\"]]\n\n        #deepface expects rgb images as input\n        p1_rgb = cv2.cvtColor(p1, cv2.COLOR_GRAY2RGB)\n        p2_rgb = cv2.cvtColor(p2, cv2.COLOR_GRAY2RGB)\n\n        #------------------------------\n        \"\"\"\n        fig = plt.figure()\n\n        ax1 = fig.add_subplot(1, 2, 1)\n        plt.imshow(p1_rgb)\n        plt.axis('off')\n\n        ax1 = fig.add_subplot(1, 2, 2)\n        plt.imshow(p2_rgb)\n        plt.axis('off')\n\n        plt.show()\n        \"\"\"\n        #------------------------------\n\n        obj = DeepFace.verify(p1_rgb, p2_rgb, model_name = model_name, model = model, enforce_detection = False, distance_metric = 'euclidean')\n        \n        distances.append(obj[\"distance\"])\n\npairs[\"distance\"] = distances","54ce481d":"pairs.head()","24dc2bc1":"pairs[pairs[\"same_person\"] == 1][\"distance\"].plot(kind='kde', title = \"distance distributions\", label = 'same_person', legend = True)\npairs[pairs[\"same_person\"] == 0][\"distance\"].plot(kind='kde', title = \"distance distributions\", label = 'different_persons', legend = True)","41796bc4":"pairs[pairs[\"same_person\"] == 1][\"distance\"].mean()","c919c205":"pairs[pairs[\"same_person\"] == 0][\"distance\"].mean()","db96fe3d":"# DeepFace","5e621265":"# Thresholds","790f7ff7":"# Create face pairs","b13349bc":"## DeepFace\n\n[**DeepFace**](https:\/\/github.com\/serengil\/deepface) is a lightweight face recognition and facial attribute analysis framework for Python.\n\nIt wraps several state-of-the-art face recognition models: **VGG-Face**, **Google FaceNet**, **Dlib** and **ArcFace**. Those models already reached and passed the human level accuracy.\n\nIt can also analyze some demography including age, gender, emotion and race.\n\nGitHub repo: https:\/\/github.com\/serengil\/deepface\n\nThere are many ways to support a project - starring\u2b50\ufe0f it is just one.","3cc63bc2":"# Pre-trained models\n\ndeepface will download pre-trained weights from Google Drive source but I copied the weights to the inputs folder to skip downloading step"}}