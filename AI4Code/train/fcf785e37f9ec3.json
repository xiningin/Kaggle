{"cell_type":{"002c0cae":"code","6f2a37c5":"code","521e152f":"code","43f9ad1a":"code","1ff4a744":"code","493483bb":"code","6a488849":"code","422577cb":"code","cc60ebc4":"code","25e8bfdb":"code","1450b9d6":"code","9fd814b5":"code","9df0a381":"code","c916b434":"code","fec65569":"code","617d64ab":"code","cf15a85e":"code","0a472ab5":"code","df376089":"code","7105e910":"code","98c32241":"markdown","28ebc0d3":"markdown","edc66708":"markdown","fd36bc8a":"markdown","4ca13b62":"markdown","1c20ca2c":"markdown","43f25324":"markdown","e468b093":"markdown","ec8d3866":"markdown","bfff118a":"markdown","7b289cc2":"markdown","1e2c2583":"markdown","a42bd45b":"markdown","5ec77e51":"markdown","316ec4f2":"markdown","2d4f0307":"markdown","f4d65769":"markdown","32bf097d":"markdown","218f5054":"markdown","3bd4677c":"markdown","d27d745e":"markdown","3262aae5":"markdown","8d6bb368":"markdown"},"source":{"002c0cae":"import numpy as np \nimport pandas as pd \nimport json\n\n\nfifa20 = pd.read_csv('..\/input\/fifa-player-stats-database\/FIFA20_official_data.csv')\nfifa21 = pd.read_csv('..\/input\/fifa-2021-complete-player-data\/FIFA-21 Complete.csv',sep = ';')\n\n#The FPL datasets are JSONs and we need to read them from line and use the JSON library to convert it to a Pandas DataFrame. \nfpl2020_file = open('..\/input\/fantasy-epl-new-season-research-2020-2021\/FPL_2019_20_season_stats.jscsrc')\nfpl2020 = fpl2020_file.read()\nfpl2020 = json.loads(fpl2020)\nfpl2021_file = open('..\/input\/fantasy-epl-new-season-research-2020-2021\/FPL_2020_21_player_list.jscsrc')\nfpl2021 = fpl2021_file.read()\nfpl2021 = json.loads(fpl2021)\nteams2020 = pd.DataFrame(fpl2020['teams'])\nplayers2020 = pd.DataFrame(fpl2020['elements'])","6f2a37c5":"fifa20.head()","521e152f":"fifa21.head()","43f9ad1a":"fifa20_abbr = fifa20[['ID','Name','Nationality','Best Position','Overall','Age','Potential','Club']].copy()\n# I have selected Best Position over Position since the Position column had values like SUB which aren't ideal. \nfifa21_abbr = fifa21.drop(['hits'],axis = 1)\nfifa20_abbr.columns = fifa21_abbr.columns\nfifa21_abbr['position'] = fifa21_abbr['position'].apply(lambda x: x.split('|')[0])\n# Another eyecheck\nfifa20_abbr.head()","1ff4a744":"#Merge FPL players data with FPL teams data \nplayers_wteams =  players2020.merge(teams2020, how = 'left', left_on = 'team_code',right_on = 'code',suffixes = ['','_team'])\n#Drop players with 0 points \nplayers_wteams = players_wteams[players_wteams['total_points']!=0]\n#Drop players with ppg less than 1. Since we are not interested in substitute appearances which do not produce any points\nplayers_wteams = players_wteams[players_wteams['points_per_game'].astype('float')>1]","493483bb":"team_overall = fifa21_abbr.groupby(by='team',axis = 0,)['player_id'].count()\nteam_overall.describe()","6a488849":"fifa20_teams = team_overall[team_overall>22]\n\nfpl20_teams = players_wteams.name.unique()\n\nfpl20_teamnames = ['Arsenal', 'Aston Villa', 'Bournemouth', 'Brighton & Hove Albion', 'Burnley',\n       'Chelsea', 'Crystal Palace', 'Everton', 'Leicester City', 'Liverpool',\n       'Manchester City', 'Manchester United', 'Newcastle United', 'Norwich City', 'Sheffield United',\n       'Southampton', 'Tottenham Hotspurs', 'Watford', 'West Ham United', 'Wolverhampton Wanderers']\nfullnames_df = pd.DataFrame(data = [fpl20_teams,fpl20_teamnames])\nfullnames_df = fullnames_df.transpose()\nfullnames_df.columns = ['name','full_club_name']\n\nplayers_wteamnames = players_wteams.merge(fullnames_df,on = ['name'])","422577cb":"from fuzzywuzzy import fuzz\nfrom fuzzywuzzy import process\n#Create matching fpl team column for each FIFA club. \nfifa21_abbr['matching_fpl_team'] = fifa21_abbr['team'].apply(lambda x: process.extractOne(str(x),fpl20_teamnames))\n\n# Extract the name of the club and score for the matched club. \nfifa21_abbr['matching_fpl_team_name'] = fifa21_abbr['matching_fpl_team'].apply(lambda x: x[0])\nfifa21_abbr['matching_fpl_team_score'] = fifa21_abbr['matching_fpl_team'].apply(lambda x: x[1])\n\n#Sort the fifa clubs by the match score and retain the highest match as the correct result. \nfifa21_abbr_epl_teams = fifa21_abbr.sort_values('matching_fpl_team_score',ascending = False).groupby(['matching_fpl_team_name']).apply(lambda df: df.iloc[0])","cc60ebc4":"#Select only matched teams from FIFA \nfifa21_abbr_epl = fifa21_abbr[fifa21_abbr['team'].isin(fifa21_abbr_epl_teams['team'])]\n\nplayers_wteamnames['fullname'] = players_wteamnames['first_name'] + ' ' + players_wteamnames['second_name']\n#Fuzzywuzzy matching similar to club name\nplayers_wteamnames['name_matching'] = players_wteamnames.apply(lambda row : process.extractOne(str(row['web_name']),fifa21_abbr_epl[fifa21_abbr_epl['matching_fpl_team_name']==row['full_club_name']]['name'].tolist()),axis = 1 )\nplayers_wteamnames['name_match_score'] = players_wteamnames['name_matching'].apply(lambda x: x[1])\nplayers_wteamnames['name_match_name'] = players_wteamnames['name_matching'].apply(lambda x: x[0])\n#Merge on player name\nplayers_merged = players_wteamnames.merge(fifa21_abbr_epl,left_on = 'name_match_name',right_on = 'name',suffixes = ('','_fifa'))\n#Pick the highest match in case a player matches with multiple players\nplayers_merged = players_merged.groupby('player_id',as_index = False).apply(lambda df: df.sort_values('name_match_score',ascending = False).iloc[0])","25e8bfdb":"players = players_merged[['code','dreamteam_count', 'element_type','first_name','id', 'now_cost',\n                          'second_name', 'points_per_game', 'special', 'squad_number',\n    'status', 'team', 'team_code', 'total_points', 'transfers_in', 'transfers_out', \n    'web_name', 'minutes', 'goals_scored',\n    'assists', 'clean_sheets', 'goals_conceded', 'own_goals',\n    'penalties_saved', 'penalties_missed', 'yellow_cards', 'red_cards',\n    'saves', 'bonus', 'bps', 'influence', 'creativity', 'threat',\n    'ict_index', 'name',  'points', 'position', 'win','played','draw', 'loss',\n    'short_name', 'strength', 'full_club_name','player_id', 'name_fifa', \n    'nationality', 'position_fifa', 'overall',\n    'age', 'potential', 'team_fifa','cost_change_start']].copy()\n#Get the starting cost of the player\nplayers['starting_cost'] = players['now_cost'] - players['cost_change_start']","1450b9d6":"players['points_per_game'] = players['points_per_game'].astype('float')\nplayers.sort_values('overall')\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nplt.figure(figsize=(15,10))\n\nsns.regplot(x = players['overall'], y = players['points_per_game'])\n\nplt.title('Points per game vs FIFA Overall Rating')\nplt.xlabel('FIFA Overall Rating')\nplt.ylabel('Points per game')\n\nplt.show()","9fd814b5":"plt.figure(figsize=(15,10))\nplt.title(\"Clubs by Average Player Rating in FIFA\")\nclub_overall = players.groupby('short_name')['overall'].mean().sort_values(ascending = False)\nimport seaborn as sns\nplt.ylabel(\"Team FIFA Rating\")\nplt.xlabel(\"FPL Club\")\nsns.barplot(x=club_overall.index, y=club_overall).set(ylim = (65,85))\nplt.show()","9df0a381":"club_pos_overall = players.groupby(by = ['short_name','element_type'],as_index = False)['overall'].mean()\n#club_pos_overall['pos'] = club_pos_overall['element_type'].replace({1:'GK',2:'DEF',3:'MID',4:'FWD'})\nclub_pos_overall\nclub_pos_overall = club_pos_overall.pivot_table(values = 'overall',index = ['element_type'],columns = 'short_name')\nclub_pos_overall.sort_index(ascending = False)\nclub_pos_overall.index = ['GK','DEF','MID','FWD']\nplt.figure(figsize=(20,5))\nplt.title(\"Average Player Rating\")\n\nsns.heatmap(data=club_pos_overall, annot=True, cmap = 'coolwarm')\n\n# Add label for horizontal axis\nplt.xlabel(\"FPL Club\")\nplt.ylabel(\"FPL Position 2019-20\")\nplt.show()","c916b434":"club_pos_overall = players.groupby(by = ['short_name','element_type'],as_index = False)['overall'].max()\n#club_pos_overall['pos'] = club_pos_overall['element_type'].replace({1:'GK',2:'DEF',3:'MID',4:'FWD'})\nclub_pos_overall\nclub_pos_overall = club_pos_overall.pivot_table(values = 'overall',index = ['element_type'],columns = 'short_name')\nclub_pos_overall.sort_index(ascending = False)\nclub_pos_overall.index = ['GK','DEF','MID','FWD']\nplt.figure(figsize=(20,5))\nplt.title(\"Best Player Rating\")\n\nsns.heatmap(data=club_pos_overall, annot=True, cmap = 'coolwarm')\n\n# Add label for horizontal axis\nplt.xlabel(\"FPL Club\")\nplt.show()","fec65569":"model_data = players[['code', 'element_type','first_name','id','starting_cost','second_name', 'points_per_game',\n                      'status', 'team', 'team_code', 'web_name','bps', 'name', 'short_name', 'full_club_name',\n                      'player_id', 'name_fifa', 'nationality', 'position_fifa', 'overall','age', 'potential', \n                      'team_fifa']].copy()\n\nfrom sklearn.model_selection import train_test_split\ny = model_data['points_per_game'].astype('float')\nX = model_data.drop(['points_per_game','bps'],axis = 1)\nX_train, X_test, y_train, y_test = train_test_split(X,y,train_size = 0.8, random_state = 0)","617d64ab":"model_1_columns = ['starting_cost','overall','age','potential']\nX_train_model_1 = X_train[model_1_columns]\nfrom xgboost import XGBRegressor\nmodel_1 = XGBRegressor(random_state = 0,learning_rate = 0.05)\nmodel_1.fit(X_train_model_1,y_train)\npreds = model_1.predict(X_test[model_1_columns])\nfrom sklearn.metrics import mean_absolute_error , mean_squared_error\nerror = mean_absolute_error(y_test,preds)\n#sum([ abs(x - y) for x,y in zip(y_test.values,preds)])","cf15a85e":"model_2_columns = ['starting_cost','overall','age','potential','element_type']\nX_train_model_2 = X_train[model_2_columns].reset_index()\nX_test_model_2 = X_test[model_2_columns].reset_index()\n\nfrom sklearn.preprocessing import OneHotEncoder\nOH_encoder = OneHotEncoder(handle_unknown='ignore', sparse=False)\nOH_position = OH_encoder.fit_transform(X_train_model_2['element_type'].values.reshape(-1,1))\nposition_df_xtrain = pd.DataFrame(OH_position,columns = ['GK','DEF','MID','FWD'])\nX_train_model_2_encoded = pd.concat([X_train_model_2,position_df_xtrain],axis = 1,ignore_index=False)\nX_train_model_2_encoded.drop(['index','element_type'],axis = 1)\n\nmodel_2 = XGBRegressor(random_state = 0,learning_rate = 0.05)\nmodel_2.fit(X_train_model_2_encoded,y_train)\n\nposition_df_xtest = OH_encoder.transform(X_test_model_2['element_type'].values.reshape(-1,1))\nposition_df_xtest = pd.DataFrame(position_df_xtest,columns = ['GK','DEF','MID','FWD'])\nX_test_model_2_encoded = pd.concat([X_test_model_2,position_df_xtest],axis = 1,ignore_index=False)\nX_test_model_2_encoded.drop(['index','element_type'],axis = 1)\npreds = model_2.predict(X_test_model_2_encoded)\nerror = mean_absolute_error(y_test,preds)\n#sum([ abs(x - y) for x,y in zip(y_test.values,preds)])\nerror","0a472ab5":"model_3_columns = ['starting_cost','overall','age','potential','element_type','short_name']\nX_train_model_3 = X_train[model_3_columns].reset_index()\nX_test_model_3 = X_test[model_3_columns].reset_index()\nfrom sklearn.preprocessing import OneHotEncoder\nOH_encoder = OneHotEncoder(handle_unknown='ignore', sparse=False)\n\nOH_pos_club = OH_encoder.fit_transform(X_train_model_3[['element_type','short_name']])\nclub_pos_df_xtrain = pd.DataFrame(OH_pos_club)\n\nX_train_model_3_encoded = pd.concat([X_train_model_3,club_pos_df_xtrain],axis = 1,ignore_index=False)\nX_train_model_3_encoded = X_train_model_3_encoded.drop(['index','element_type','short_name'],axis = 1)\n\nmodel_3 = XGBRegressor(random_state = 0,learning_rate = 0.05)\nmodel_3.fit(X_train_model_3_encoded,y_train)\n\nclub_pos_df_xtest = OH_encoder.transform(X_test_model_3[['element_type','short_name']])\n\nclub_pos_df_xtest = pd.DataFrame(club_pos_df_xtest)\n\nX_test_model_3_encoded = pd.concat([X_test_model_3,club_pos_df_xtest],axis = 1,ignore_index=False)\nX_test_model_3_encoded = X_test_model_3_encoded.drop(['index','element_type','short_name'],axis = 1)\n\npreds3 = model_3.predict(X_test_model_3_encoded)\nerror = mean_absolute_error(y_test,preds3)\n","df376089":"errors_df_model_3 = pd.DataFrame(y_test.values,preds3).reset_index()\nerrors_df_model_3.columns = ['actual','predicted']\nhigher_ppg_errors = errors_df_model_3[errors_df_model_3['predicted']>2]\nmae_value = mean_absolute_error(higher_ppg_errors.actual,higher_ppg_errors.predicted)","7105e910":"fifa_row = ['Ziyech' in name for name in fifa21_abbr['name']].index(True)\nfifa_details = fifa21_abbr.loc[fifa_row]\nfifa_details['overall']\nplayer_df = pd.DataFrame(np.array([fifa_details['player_id'],80,fifa_details['overall'],fifa_details['age'],fifa_details['potential'],3,'CHE']).reshape(1,-1),columns = X_test_model_3.columns).apply(pd.to_numeric,errors = 'ignore')\nplayer_transformed = OH_encoder.transform(player_df[['element_type','short_name']])\nclub_pos_player = pd.DataFrame(player_transformed)\nplayer_encoded = pd.concat([player_df,club_pos_player],axis = 1,ignore_index=False)\nplayer_encoded = player_encoded.drop(['index','element_type','short_name'],axis = 1)\nplayer_pred = model_3.predict(player_encoded)\n","98c32241":"In the interest of avoiding repetition refer to my previous notebook [Gearing up for FPL 2020-21](https:\/\/www.kaggle.com\/scientistdat\/gearing-up-for-fpl-2020-21) for an intro to the FPL datasets. \n\nLet's have a look at the FIFA datasets. FIFA 20 and then FIFA 21","28ebc0d3":"In my previous workbook, [Gearing up for FPL 2020-21](https:\/\/www.kaggle.com\/scientistdat\/gearing-up-for-fpl-2020-21): I compared the Fantasy assets based on their performance in FPL last year. It does not provide any context on new players coming to the EPL. Man City fixed their defensive woes with the signing of Ake. Chelsea went on a buying spree that can only be matched by a teenage shopoholic. Even Arsenal have fleeting dipped their toes in the frenzy. \n\nSo my intent here is to provide some sort of framework to predict fantasy potential based on the qualities of a player as given by FIFA. \n\nCredits to [BryanB](https:\/\/www.kaggle.com\/bryanb) for [FIFA 20 dataset](https:\/\/www.kaggle.com\/bryanb\/fifa-player-stats-database) and to [Aaysh Mishra](https:\/\/www.kaggle.com\/aayushmishra1512) for [FIFA 21 dataset](https:\/\/www.kaggle.com\/aayushmishra1512\/fifa-2021-complete-player-data). The FPL dataset comes directly from Fantasy Premier League and can be found [here](https:\/\/www.kaggle.com\/scientistdat\/fantasy-epl-new-season-research-2020-2021). I request you to kindly upvote the datasets as they are absolutely crucial to the Kaggle ecosystem.\n\nAs usual there is a lot of data manipulation involved in the file so if you are not interested in reading the grunt work go to <a href='#Analysis'>here<\/a>.\n","edc66708":"The next task is a painful ordeal. We now have to map a player from FIFA 20 dataset to same player the FPL 19-20 dataset. And we do not have a primary key, so we will have to be resoruceful. \n\nLet's first match the clubs. Recognize that the names in the FIFA dataset are full club names and in the Fantasy PL dataset are short names. We will change those to full names and try to match those. Before we do that let's clean the data not required. ","fd36bc8a":"<a id='Prediction'>","4ca13b62":"For a direct prediction for Ziyech jump to <a href='#Prediction'>here<\/a>","1c20ca2c":"At this stage, a bit of football knowledge (Subject Matter Expertise is handy). Typically most football clubs have 23 man squads. So any club with lesser players either is a team that is not captured adequately by FIFA. If you have ever played FIFA you know that it has the most obsucre players. So we are going to drop any club that has less than 23 players. We can see that its 25% of the dataset. \n\nAlso notice that FIFA has full club e.g. Tottenham Hotspur but FPL has short names e.g. Spurs. So we need to add the full names to the FPL data.","43f25324":"Now starts the tricky part. We are going to use the Fuzzywuzzy library to generate a match score for the club names in FPL and FIFA. For each club in FIFA, we are going to look for the best matched club name in FPL. Fuzzywuzzy also gives a match score. We are going to select the matching club with the highest score as the correct match. ","e468b093":"# Does FIFA Rating translate to Fantasy Points? \n ## Can we then use it to predict FPL performance?","ec8d3866":"<a id='Analysis'><\/a>\nNow we are good to go!! \nLet's first look at the relationship between the Points per game in FPL vs the FIFA Overall Rating\n","bfff118a":"That error of 0.65 is less than ideal. Over 38 gws that amounts to an average error of about 25 points. For a base model first attempt where our only inputs were overall, potentail, age, and price, I would not say it's too shabby either. \n\nLet's add a bit more details to our model. We will factor in player position. Also I did a bit of tuning to get that learning rate of 0.05. That is just a fancy way of saying I changed it manually to check for values between 0.01 and 0.10 and settled on 0.05. In the future, we will automate that tuning. \n\nThe position of the player is given by element type. It is a numeric field but carries label data and hence we need to encode that using onehot encoding. ","7b289cc2":"When we added club names, we saw a relatively substaintial lift in accuracy as compared to just the positions. Intuitively also that makes sense, two players with the same price, and same positions will have different outputs for points per game if they play for a top club vs a bottom one. ","1e2c2583":"## FIFA ratings charts for FPL","a42bd45b":"The surprises in the club rankings come from the fact that this shows the average rating of the whole squad as opposed to the best 11. \n\nLet's look at this ratings at a more granular level.","5ec77e51":"We are going to use XGBoost which is a fairly powerful framework for building simple regression models. Let's start with a very simple approach and just focus player price, age, fifa overall and fifa potential. ","316ec4f2":"We also should filter the FIFA dataset since we will be matching that to the FPL dataset. Let's have a look at the distribution of the team size of every club in the FIFA dataset. ","2d4f0307":"This splits the above bar chart into a position-wise representation of the average rating. We can see that City, Liverpool has fantastic forward players and midfielders. \n\nSince this is an average, it is hard to tell who has the best players. The chart below gives the rating for the best player in each position. As an FPL rule, it is crucial to have as many as these as possible. \n","f4d65769":"As you can instantly notice, the 2021 dataset has very very few features (columns) where as the FIFA 20 dataset is a 65 feature dataset. \nHence we are going to limit ourselves to the predictive power of the features in the FIFA 21 dataset only. The nomenclature in both datasets is different, so we need to make that consistent. \nAlso the FIFA datasets have information about all the players in the world but we just need EPL players.\n\nNotice that in FIFA 21, there are multiple positions listed per player. We are going to assume (quite safely) that the first position is the main position of the player and discard the rest. ","32bf097d":"## Data Preparation","218f5054":"That is almost a negligible decline in the error. Similar to what we did above, we will add the team name to the features. ","3bd4677c":"By this model Ziyech would produce about 5.13 points per game this season. Of course we have an error of 0.5 ppg to account for, so it could be anywhere between 4.63 to 5.63. Very close to what Pulisic offers. \n\nOf course, this model has several limitations, the key limitation being lack of data. The model is trained on just about 400 datapoints. We need much more datapoints and features to even begin feeling confident about accuracy. As a consequence the error is too high and results in a broad range of outputs. \n\nThere are some additional features that can be built if anyone wants to explore further. One possible improvement is to create a squad comprising say 2 GKs, 7 DEFs, 7 MIDs, 2 FWDs and then use the position wise average fifa rating as 4 new features. Feel free to reach out to me to exchange ideas. \n","d27d745e":"Thankfully there seems to be a slight evidence of some relationship. Before we dive into that let's look at some other information about the FIFA ratings of FPL teams. ","3262aae5":"With a slightly increased understanding of the squad and position strenghts, lets dive into some modeling. \n\nWe are going to train an XGboost model on this dataset with the y variable as output. If you want to look at the finished product head over to <a href='#Prediction'>here<\/a> . If you are interested in understand the rationale behind the model continue with this section. \n\nFirst we want to only use the features that we know before the season starts. Our prediction is about the number of FPL points per game that a player will earn at the end of the season. Note that we are predicting points per game and not total points since, the total points will depend a lot on various factors that occur over the season, e.g. number of minutes player, risk of injury, rotation, etc. \n\nBut we should remove all other features that we will only know after the season is over.\n\nWe will split the dataset into test,train and then start the modeling process.","8d6bb368":"Now that we have matched the FIFA and FPL clubs, to match players, we will again use Fuzzywuzzy to match the player name from FIFA to that from FPL. Once we have that, we will merge the FIFA dataset on the player name. "}}