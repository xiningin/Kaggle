{"cell_type":{"c3f0a442":"code","8c8b21fd":"code","d23f3bcf":"code","dc93c0ee":"code","cb7f0b37":"code","7ad39377":"code","2135a85e":"code","6b8c2b0f":"code","e1d1c12f":"code","b018618f":"code","5acbf40f":"code","ef72733c":"code","955e2d49":"code","ec4b325d":"code","fb63923b":"code","bfd8f9d2":"code","e848aa95":"markdown"},"source":{"c3f0a442":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","8c8b21fd":"sample=pd.read_csv('\/kaggle\/input\/data-science-nigeria-ai-in-citie\/sample_submission.csv', delimiter=',')\ntrain=pd.read_csv('\/kaggle\/input\/data-science-nigeria-ai-in-citie\/train.csv', delimiter=',')\ntest=pd.read_csv('\/kaggle\/input\/data-science-nigeria-ai-in-citie\/test.csv', delimiter=',')\n","d23f3bcf":"#The shape of the train and test dataset\nprint('This is the shape of the Train dataset:', train.shape)\nprint('This is the shape of the Test dataset:', test.shape)\n\n#Info about the dataset\nprint('The Train Info of the Dataset')\nprint(train.info())\nprint('')\nprint('+'*60)\nprint('')\nprint('The Test Info of the Dataset')\nprint(test.info())","dc93c0ee":"#Creating a new column name Title from the name column \ntest['Title'] = test.name.str.extract(' ([A-Za-z]+)\\.', expand=False)\ntest['Title'] = test['Title'].replace(['Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Title')\ntest['Title'] = test['Title'].replace('Mlle', 'Miss')\ntest['Title'] = test['Title'].replace('Ms', 'Miss')\ntest['Title'] = test['Title'].replace(['Mme','Lady'], 'Mrs')\n\ntrain['Title'] = train.name.str.extract(' ([A-Za-z]+)\\.', expand=False)\ntrain['Title'] = train['Title'].replace(['Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Title')\ntrain['Title'] = train['Title'].replace('Mlle', 'Miss')\ntrain['Title'] = train['Title'].replace('Ms', 'Miss')\ntrain['Title'] = train['Title'].replace(['Mme','Lady'], 'Mrs')\n\n#A boxplot which shows the outliers present in each of the ticket class before filling the Nan values with either mean or median\nimport seaborn as sns\nsns.boxplot(x='ticket_class', y='age', data=test);","cb7f0b37":"#filling the empty value in the age column\ntrain.age=train.age.fillna(train.age.mean())\n\n#filling the empty value in the age column\ntest.age=test.age.fillna(test.age.mean())\n\n##filling the empty value in the fare column with the mode since it does not give a Gaussian curve from the kde plot\ntrain.fare=train.fare.fillna((train.fare.mode()[0]+train.fare.mode()[1])\/2)\ntest.fare=test.fare.fillna(test.fare.mode())\n\n#filling the empty value in the embarked  column\ntrain.embarked=train.embarked.fillna(value='S')\ntest.embarked=test.embarked.fillna(value='S')\n\ntrain['MedBoat']=train['MedBoat'].isnull()\ntest['MedBoat']=test['MedBoat'].isnull()","7ad39377":"#A countplot showing the effect of MedBoat to people that survived\n'''\nFrom thi countplot we could say that people on the MedBoat Column\ntends to survive than people not on the MedBoat\n\n'''\nsns.countplot(train['MedBoat'], hue=train['Survived'])","2135a85e":"train_object=train.select_dtypes(include='object')\ntest_object=test.select_dtypes(include='object')\n\ntrain_num = train.drop(labels=['name', 'sex', 'TickNum', 'embarked',], axis=1)\ntest_num = test.drop(labels=['name', 'sex', 'TickNum', 'embarked'], axis=1)\n\n#Checking the correlation between the Numeric features to the survived column\ntrain_num_corr=train.corr()\ntrain_num_corr","6b8c2b0f":"#A Heatmap showing the correlation of the numerical features\nimport matplotlib.pyplot as plt\ncolormap = plt.cm.viridis\nplt.figure(figsize=(12,12));\nplt.title(' Correlation of Features', y=1.05, size=15);\nsns.heatmap(train_num_corr,linewidths=0.1,vmax=1.0, square=True, cmap=colormap, linecolor='white', annot=True);","e1d1c12f":"#A countplot of the Gender to the Survived column\n'''\nFrom this graph we can imply that Female tends to survive that male \n'''\nsns.countplot(train.Survived, hue=train.sex,palette='rainbow' ,saturation=1)","b018618f":"train_num_drop =train_num.drop(['traveller_ID', 'Survived'], axis=1)\ntest_num\ntrain_num_drop\n\nfrom sklearn.preprocessing import LabelEncoder\nle=LabelEncoder()\n\n#Creating new column from the categorical column using pandas built in function get_dummies \ntrain_num[[ 'Male']]=pd.get_dummies(train.sex, drop_first=True).astype('int64')\ntest_num[[ 'Male']]=pd.get_dummies(test.sex,drop_first=True).astype('int64')\n\ntrain_num[['S','Q']]=pd.get_dummies(train.embarked,drop_first=True).astype('int64')\ntest_num[['S','Q']]=pd.get_dummies(test.embarked,drop_first=True).astype('int64')\n\ntrain_num[[2,1]]=pd.get_dummies(train.ticket_class,drop_first=True).astype('int64')\ntest_num[[2,1]]=pd.get_dummies(test.ticket_class,drop_first=True).astype('int64')\n\n#Converting the Title Column to an Integer using the LabelEncoder\ntrain.Title=le.fit_transform(train.Title).astype('int64')\ntest.Title=le.transform(test.Title).astype('int64')\ntest_num['Title']=test.Title\ntrain_num['Title']=train.Title\n\n#Converting the MedBoat Column to an Integer using the LabelEncoder\ntrain.MedBoat=le.fit_transform(train.MedBoat).astype('int64')\ntest.MedBoat=le.transform(test.MedBoat).astype('int64')\ntest_num['MedBoat']=test.MedBoat\ntrain_num['MedBoat']=train.MedBoat\n\ntrain.Title.value_counts()","5acbf40f":"test_num","ef72733c":"#assigniong pur Numerical Feature to our Dependent and Independent Variables for prediction\nX = train_num[['age','Siblings_spouses','Parchil','fare','MedBoat','Title','Male','S','Q',2,1]]\ny=train['Survived']\nX.head(1)\n\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split( X, y, test_size=0.30, random_state=101,shuffle=True)\n\nprint(X_train.shape)\nprint(y_train.shape)","955e2d49":"test_num=test_num.drop(labels=['ticket_class'], axis=1)\ntest_num=test_num.drop(labels=['traveller_ID'], axis=1)\ntest_num=test_num.drop(labels=['cabin'], axis=1)","ec4b325d":"from sklearn.preprocessing import StandardScaler\nsc_X=StandardScaler()\ncol=X_train.columns\n\n#Scaling our dataset beforoe fitting into our Algorithm\nX =sc_X.fit_transform(X_train)\ny=sc_X.transform(test_num)\ny=pd.DataFrame(test_num, columns=col)\nX=pd.DataFrame(X, columns=col)\n\nX_train.info()","fb63923b":"'''\nUsing Random Forest Classifier for the prediction and passing\nour Dependent and Independet variable into our Machine Learning Algorithm\n\n'''\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn import metrics\nfrom sklearn.metrics import roc_curve\nfrom sklearn.metrics import auc\nclassifier = RandomForestClassifier(min_samples_leaf=5,max_features='auto',n_estimators = 50, criterion = 'entropy', random_state =42)\nclassifier.fit(X_train, y_train)\ny_pred = classifier.predict(X_test)\n\nprint(\"Accuracy: \", metrics.accuracy_score(y_test, y_pred)*100)\nprint(\"Precision: \", metrics.precision_score(y_test, y_pred)*100)\nprint(\"Recall: \", metrics.recall_score(y_test, y_pred)*100)\nfpr, tpr, thresholds = roc_curve (y_test, y_pred)\nroc_auc= auc (fpr, tpr)\nprint  (\"ROC AUC\", roc_auc*100)\n\n#Random Forest Algorithm\nsubmission_file=sample\nfrom sklearn.metrics import f1_score\npred2=classifier.predict(X_train)\npred3=classifier.predict(X_test)\nprint('F1 Score for Training dataset:', f1_score(y_train, pred2)*100)\nprint('F1 Score for Testing dataset:', f1_score(y_test, pred3)*100)\n\n#Confusion Matrix\nplt.title('Confusion matrix')\nsns.heatmap(metrics.confusion_matrix(y_test, y_pred), annot=True, cmap='coolwarm');\nplt.ylabel('GroundTruth');\nplt.xlabel('Predicted');\nplt.figure(figsize=(3,2))","bfd8f9d2":"#Passing our Prediction into our a csv file for submission\nnewrf=sample.copy()\nnewrf.Survived =classifier.predict(y)\nnewrf.to_csv('newrf.csv', index=False)\nnewrf=pd.read_csv('newrf.csv', delimiter=',')\nprint('This is the shape of the dataset:',newrf.shape)\nprint('This is the amount of people that did not Survived:',newrf.Survived.value_counts()[0])\nprint('This is the amount of people that did Survived:',newrf.Survived.value_counts()[1])\nsns.countplot(newrf.Survived, saturation=1);","e848aa95":"## Machine Learning Algorithm"}}