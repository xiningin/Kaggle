{"cell_type":{"47b9abb1":"code","660bca60":"code","a6c9db6a":"code","d18cfba6":"code","ddcb46ed":"code","f011f266":"code","34c695d6":"code","803c94db":"code","a628d127":"code","5512593a":"code","ed8d6da4":"code","594dbd52":"code","e4f640d5":"code","8af62c47":"code","b44013ee":"code","b86ed836":"code","09b837b0":"code","d85cefeb":"markdown","5e25fc85":"markdown","f984ea2f":"markdown","781e3686":"markdown","fcdd5867":"markdown","e7d60c0f":"markdown","c8ae7913":"markdown","014803ff":"markdown"},"source":{"47b9abb1":"!git clone https:\/\/github.com\/rkuo2000\/yolov5\n%cd yolov5","660bca60":"# for storing labels (.txt) converted from annotation (.xml)\n!mkdir -p Dataset\/BCCD\/Labels ","a6c9db6a":"import os\nimport numpy as np\nfrom pathlib import Path\nfrom xml.dom.minidom import parse\nfrom shutil import copyfile","d18cfba6":"FILE_ROOT = \"\/kaggle\/input\/bccd-dataset\/BCCD_Dataset-master\/\"\n\nIMAGE_SET_ROOT = FILE_ROOT + \"BCCD\/ImageSets\/Main\"  \nIMAGE_PATH = FILE_ROOT + \"BCCD\/JPEGImages\"  \nANNOTATIONS_PATH = FILE_ROOT + \"BCCD\/Annotations\"\n\nDATA_ROOT = \"Dataset\/\"\nLABELS_ROOT = DATA_ROOT + \"BCCD\/Labels\"\n\nDEST_IMAGES_PATH = \"images\"\nDEST_LABELS_PATH = \"labels\" ","ddcb46ed":"classes = ['Platelets', 'RBC', 'WBC']","f011f266":"def cord_converter(size, box):\n    \"\"\"\n    convert xml annotation to darknet format coordinates\n    :param size\uff1a [w,h]\n    :param box: anchor box coordinates [upper-left x,uppler-left y,lower-right x, lower-right y]\n    :return: converted [x,y,w,h]\n    \"\"\"\n    x1 = int(box[0])\n    y1 = int(box[1])\n    x2 = int(box[2])\n    y2 = int(box[3])\n\n    dw = np.float32(1. \/ int(size[0]))\n    dh = np.float32(1. \/ int(size[1]))\n\n    w = x2 - x1\n    h = y2 - y1\n    x = x1 + (w \/ 2)\n    y = y1 + (h \/ 2)\n\n    x = x * dw\n    w = w * dw\n    y = y * dh\n    h = h * dh\n    return [x, y, w, h]\n\ndef save_file(img_jpg_file_name, size, img_box):\n    save_file_name = LABELS_ROOT + '\/' + img_jpg_file_name + '.txt'\n    print(save_file_name)\n    file_path = open(save_file_name, \"a+\")\n    for box in img_box:\n\n        cls_num = classes.index(box[0]) # find class_id\n\n        new_box = cord_converter(size, box[1:]) # convert box coord into YOLO x,y,w,h\n\n        file_path.write(f\"{cls_num} {new_box[0]} {new_box[1]} {new_box[2]} {new_box[3]}\\n\")\n\n    file_path.flush()\n    file_path.close()\n    \ndef get_xml_data(file_path, img_xml_file):\n    img_path = file_path + '\/' + img_xml_file + '.xml'\n    print(img_path)\n\n    dom = parse(img_path)\n    root = dom.documentElement\n    img_name = root.getElementsByTagName(\"filename\")[0].childNodes[0].data\n    img_size = root.getElementsByTagName(\"size\")[0]\n    objects = root.getElementsByTagName(\"object\")\n    img_w = img_size.getElementsByTagName(\"width\")[0].childNodes[0].data\n    img_h = img_size.getElementsByTagName(\"height\")[0].childNodes[0].data\n    img_c = img_size.getElementsByTagName(\"depth\")[0].childNodes[0].data\n    # print(\"img_name:\", img_name)\n    # print(\"image_info:(w,h,c)\", img_w, img_h, img_c)\n    img_box = []\n    for box in objects:\n        cls_name = box.getElementsByTagName(\"name\")[0].childNodes[0].data\n        x1 = int(box.getElementsByTagName(\"xmin\")[0].childNodes[0].data)\n        y1 = int(box.getElementsByTagName(\"ymin\")[0].childNodes[0].data)\n        x2 = int(box.getElementsByTagName(\"xmax\")[0].childNodes[0].data)\n        y2 = int(box.getElementsByTagName(\"ymax\")[0].childNodes[0].data)\n        # print(\"box:(c,xmin,ymin,xmax,ymax)\", cls_name, x1, y1, x2, y2)\n        img_jpg_file_name = img_xml_file + '.jpg'\n        img_box.append([cls_name, x1, y1, x2, y2])\n    # print(img_box)\n\n    # test_dataset_box_feature(img_jpg_file_name, img_box)\n    save_file(img_xml_file, [img_w, img_h], img_box)","34c695d6":"files = os.listdir(ANNOTATIONS_PATH)\nfor file in files:\n    print(\"file name: \", file)\n    file_xml = file.split(\".\")\n    get_xml_data(ANNOTATIONS_PATH, file_xml[0])","803c94db":"def copy_data(img_set_source, img_labels_root, imgs_source, type):\n    file_name = img_set_source + '\/' + type + \".txt\"\n    file = open(file_name)\n\n    root_file = Path(DATA_ROOT + DEST_IMAGES_PATH + '\/' + type)\n    if not root_file.exists():\n        print(f\"Path {root_file} is not exit\")\n        os.makedirs(root_file)\n\n    root_file = Path(DATA_ROOT + DEST_LABELS_PATH + '\/' + type)\n    if not root_file.exists():\n        print(f\"Path {root_file} is not exit\")\n        os.makedirs(root_file)\n\n    for line in file.readlines():\n        print(line)\n        img_name = line.strip('\\n')\n        img_sor_file = imgs_source + '\/' + img_name + '.jpg'          \n        label_sor_file = img_labels_root + '\/' + img_name + '.txt'\n\n        # print(img_sor_file)\n        # print(label_sor_file)\n        # im = Image.open(rf\"{img_sor_file}\")\n        # im.show()\n\n        # Copy image\n        DICT_DIR = DATA_ROOT + DEST_IMAGES_PATH + '\/' + type\n        img_dict_file = DICT_DIR + '\/' + img_name + '.jpg'\n\n        copyfile(img_sor_file, img_dict_file)\n\n        # Copy label\n        DICT_DIR = DATA_ROOT + DEST_LABELS_PATH + '\/' + type\n        img_dict_file = DICT_DIR + '\/' + img_name + '.txt'\n        copyfile(label_sor_file, img_dict_file)","a628d127":"copy_data(IMAGE_SET_ROOT, LABELS_ROOT, IMAGE_PATH, \"train\")\ncopy_data(IMAGE_SET_ROOT, LABELS_ROOT, IMAGE_PATH, \"val\")\ncopy_data(IMAGE_SET_ROOT, LABELS_ROOT, IMAGE_PATH, \"test\")","5512593a":"print(len(os.listdir('Dataset\/images\/train')))\nprint(len(os.listdir('Dataset\/images\/val')))\nprint(len(os.listdir('Dataset\/images\/test')))","ed8d6da4":"!echo \"train: Dataset\/images\/train\\n\" > data\/bccd.yaml\n!echo \"val:   Dataset\/images\/val\\n\" >> data\/bccd.yaml\n!echo \"nc : 3\\n\" >> data\/bccd.yaml\n!echo \"names: ['Platelets', 'RBC', 'WBC']\\n\" >> data\/bccd.yaml\n\n!cat data\/bccd.yaml","594dbd52":"!python train.py --img 640 --batch 8 --epochs 300 --data data\/bccd.yaml --cfg models\/yolov5s.yaml","e4f640d5":"!python detect.py --source Dataset\/images\/test --img-size 640 --conf 0.4 --weights runs\/train\/exp\/weights\/best.pt ","8af62c47":"from IPython.display import Image","b44013ee":"Image('runs\/detect\/exp\/BloodImage_00007.jpg')","b86ed836":"Image('runs\/detect\/exp\/BloodImage_00011.jpg')","09b837b0":"Image('runs\/detect\/exp\/BloodImage_00407.jpg')","d85cefeb":"## Create data\/bccd.yaml","5e25fc85":"## [BCCD Dataset](https:\/\/github.com\/Shenggan\/BCCD_Dataset)\n![image.png](attachment:image.png)","f984ea2f":"## YOLOv5 Detect","781e3686":"## Repro [YOLOv5](https:\/\/github.com\/ultralytics\/yolov5)","fcdd5867":"### copy images & labels","e7d60c0f":"## Train YOLOv5","c8ae7913":"### convert annotations (from COCO .xml to YOLO format .txt)","014803ff":"## Create Dataset"}}