{"cell_type":{"3922624c":"code","ac812e1c":"code","fb8f9a96":"code","49cf09e1":"code","2fba1b54":"code","c89aa84c":"code","50b91ed3":"code","5d1cf6a4":"code","a42480a7":"code","0bc09397":"code","db891e57":"code","99eaf267":"code","b707ae30":"code","6a0aa7f4":"code","44f33dc7":"code","9632758e":"code","8dbaaf14":"code","102f407f":"code","79d23629":"code","c04d54f8":"code","8afda71a":"code","5a2bf2ac":"code","7e6c6cda":"code","be8b3d78":"code","e2355dbe":"code","f18001a0":"code","31b9503e":"code","fd2c6ca5":"code","a70f6a1e":"code","76fd0467":"code","cc695249":"code","b1f8ad4d":"code","895dedf4":"code","c01f7113":"code","5f3df89a":"code","836fda0a":"code","77aeb21b":"code","78c2f207":"code","55705e85":"code","780054f4":"code","9e8dbaf5":"code","2b1289bd":"code","2229f79a":"code","aea84e92":"code","764384a5":"code","49cb318a":"code","debeea0d":"code","24059cfc":"code","4719f174":"code","40de4b18":"code","def2eae3":"code","f7004fde":"code","449bb994":"code","e8f4763e":"code","e3ce8fe8":"code","f47d9899":"code","2101ee5e":"code","b3d08aa8":"code","cc9d4007":"code","6d4ecaaf":"code","e9a37832":"code","fe109054":"code","a6a47a68":"code","78e127c2":"code","8730d109":"code","3afcbf2f":"code","a291b2c9":"code","5a09e8e8":"code","c513615d":"code","93561adf":"code","b09e7a33":"code","473bc7c2":"code","3914cdc8":"code","3321c274":"code","c70a126f":"code","74b0ba26":"code","9f126710":"code","a4e9bc48":"code","812d4061":"code","413fb0cb":"code","35cba72a":"code","30dba114":"code","aadd10c6":"code","8d38382b":"code","d4d76950":"code","ae31fb35":"code","28e25dbd":"code","bd7da171":"code","f3bfab12":"code","70a7b201":"code","ff70fb90":"code","a5ea466f":"code","cbb53cd3":"code","1df44769":"code","b7dc6d4f":"code","33e8bf0f":"code","8b7bb950":"code","b62e2544":"code","145691e7":"code","b5c8cfae":"markdown","bea7de77":"markdown","d3b1ffdb":"markdown","5bc4cd0e":"markdown","76de62c8":"markdown","2a73ff57":"markdown","3d8b541b":"markdown","03749853":"markdown","1410b660":"markdown","d50498c1":"markdown","e93a148a":"markdown","d725ca21":"markdown","c95c86a7":"markdown","44e3799e":"markdown","ae1edc3c":"markdown","5fd40af0":"markdown","d3cf940e":"markdown","cd14ce60":"markdown","ff8f6952":"markdown","cd4d1350":"markdown","c5b78960":"markdown","b4822b5d":"markdown","4c31cb37":"markdown","3de40bc7":"markdown","9c1ff9b1":"markdown","c736c9d8":"markdown","0947af93":"markdown","03ae5bed":"markdown","920327bc":"markdown","2a37e74c":"markdown","db28e8a6":"markdown","80e357c8":"markdown","6aae4614":"markdown","69811de3":"markdown","a9050ed4":"markdown","60d09496":"markdown","91c49704":"markdown","0ea1ef37":"markdown","60dfc4d6":"markdown","653f2556":"markdown","e4857a6f":"markdown","8eb1d262":"markdown","ba58698d":"markdown","d2f406c6":"markdown","1a97e050":"markdown","229c8f63":"markdown","0f4ee86f":"markdown","45519ce0":"markdown","0dc97710":"markdown","0cf49169":"markdown","7b49cae8":"markdown","9df3ffd1":"markdown","dba9af33":"markdown","56b95544":"markdown","11d3d3c7":"markdown","593f7e0e":"markdown","f428c354":"markdown","03b966fb":"markdown","d7ce4635":"markdown","b738e935":"markdown","9bc60962":"markdown","9d857386":"markdown","08a8541d":"markdown","ccaa3946":"markdown","acf99c0e":"markdown","01cab681":"markdown","f85a2537":"markdown","90b96f4a":"markdown","b17d7070":"markdown"},"source":{"3922624c":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt \nimport matplotlib.style as style\nstyle.use('fivethirtyeight')\nfrom matplotlib.ticker import FuncFormatter\nimport seaborn as sns\nimport warnings\nimport plotly.express as px\n%matplotlib inline\nwarnings.filterwarnings('ignore')\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","ac812e1c":"test=pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')\ntrain=pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')","fb8f9a96":"test.shape,train.shape","49cf09e1":"train.head()","2fba1b54":"#unnecassary column\nids=test['Id']\ntrain.drop(['Id'],axis=1,inplace=True)\ntest.drop(['Id'],axis=1,inplace=True)","c89aa84c":"from scipy.stats import norm\nplt.figure(figsize=(12,6))\nmu, sigma = norm.fit(train['SalePrice'])\nsns.distplot(train['SalePrice'],fit=norm,color='b',rug=True,kde_kws={'shade':True,'color':'b','alpha':.2})\nplt.legend(['$\\mu=$ {:.3f} and $\\sigma=$ {:.3f}'.format(mu, sigma)],fontsize=14)\nplt.title('Distribution of Sale Price')\nplt.tight_layout();","50b91ed3":"train['SalePrice'].describe()","5d1cf6a4":"corrs=train.drop('SalePrice',axis=1).corrwith(train['SalePrice']).sort_values(ascending=False)","a42480a7":"fig,axes=plt.subplots(1,1,figsize=(12,9))\naxes.axhline(corrs[corrs>0].mean(), ls=':',color='black',linewidth=2)\naxes.text(25.5,corrs[corrs>0].mean()+.015, \"Average = {:.3f}\".format(corrs[corrs>0].mean()),color='black',size=14)\naxes.axhline(corrs[corrs<0].mean(), ls=':',color='black',linewidth=2)\naxes.text(25.5,corrs[corrs<0].mean()-.035, \"Average = {:.3f}\".format(corrs[corrs<0].mean()),color='black',size=14)\nsns.barplot(y=corrs,x=corrs.index,palette='Spectral')\nplt.title('Correlation of Sale Price to other Features',size=20,color='black',y=1.03)\nplt.xticks(rotation=90)\nfor p in axes.patches:\n            value = p.get_height()\n            if value <=.5:\n                continue\n            x = p.get_x() + p.get_width()-.9\n            y = p.get_y() + p.get_height()+(.02*value)\n            axes.text(x, y, str(value)[1:5], ha=\"left\",fontsize=12,color='#000000')\nplt.tight_layout();","0bc09397":"corrs.head()","db891e57":"plt.figure(figsize=(11,6))\nsns.boxplot(data=train, y='SalePrice',x='OverallQual')\nplt.tight_layout()\nplt.title('Overall Quality');","99eaf267":"plt.figure(figsize=(12,6))\np1=sns.regplot(x='GrLivArea',y='SalePrice',data=train,line_kws={'color':'#252525','linewidth':2},ci=0,marker='o')\nfor index in [523,1298]:\n    p1.text(train['GrLivArea'][index]+50, train['SalePrice'][index],s=train['GrLivArea'][index] ,size=14, color='red')\nplt.title('GrLivArea',size=20)\nplt.tight_layout();","b707ae30":"train[train['GrLivArea']>4675][['OverallQual','GarageCars','GarageArea','SalePrice']]","6a0aa7f4":"plt.figure(figsize=(12,6))\nsns.boxplot(data=train, y='SalePrice',x='GarageCars')\nplt.tight_layout()\nplt.title('GarageCars');","44f33dc7":"plt.figure(figsize=(12,6))\np1=sns.regplot(x='GarageArea',y='SalePrice',data=train,line_kws={'color':'#252525','linewidth':2},ci=0,marker='o')\n\np1.text(train['GarageArea'][691]+15, train['SalePrice'][691],s=train['GarageArea'][691] ,size=14, color='red')\np1.text(train['GarageArea'][1182]-65, train['SalePrice'][1182]-35000,s=train['GarageArea'][1182] ,size=14, color='red')\np1.text(train['GarageArea'][1061]-65, train['SalePrice'][1061]-35000,s=train['GarageArea'][1061] ,size=14, color='red')\nplt.title('GarageArea',size=20)\nplt.tight_layout();","9632758e":"train[((train['SalePrice']>700000) & (train['GarageArea']>800)) | ((train['SalePrice']<100000) & (train['GarageArea']>1200)) ][['OverallQual','GarageCars','GarageArea','SalePrice']]","8dbaaf14":"plt.figure(figsize=(12,6))\np1=sns.regplot(x='TotalBsmtSF',y='SalePrice',data=train,line_kws={'color':'#252525','linewidth':2},ci=0,marker='o')\np1.text(train['TotalBsmtSF'][1298]-65, train['SalePrice'][1298]-35000,s=train['TotalBsmtSF'][1298] ,size=14, color='red')\nplt.tight_layout()\nplt.title('TotalBsmtSF',size=20);","102f407f":"train[((train['SalePrice']<200000) & (train['TotalBsmtSF']>6000))][['OverallQual','GarageCars','GarageArea','SalePrice']]","79d23629":"plt.figure(figsize=(12,9))\ncorrmat = train.corr()\ntop_corr_features = corrmat.index[abs(corrmat[\"SalePrice\"])>0.5]\nsns.heatmap(train[top_corr_features].corr(),annot=True,cmap='inferno',square=True,linewidths=1)\nplt.title('Correlations',size=25,y=1.03)\nplt.tight_layout();\n","c04d54f8":"train.drop(index=[523,1298],inplace=True)","8afda71a":"ntrain = train.shape[0] #for recreating data later\nntest = test.shape[0] #for recreating data later","5a2bf2ac":"all_df = pd.concat((train, test)).reset_index(drop=True)","7e6c6cda":"plt.figure(figsize=(12,6))\nsns.heatmap(all_df.isnull(),yticklabels=False,cbar=False,cmap='cividis')\nplt.xticks(ha='center')\nplt.tight_layout();","be8b3d78":"#percentage of missing values for each column\nna_ratio=all_df.isnull().sum()[all_df.isnull().sum()>0].sort_values(ascending=False)\/len(all_df)*100\n#number of missing values for each column\nna_sum=all_df.isnull().sum()[all_df.isnull().sum()>0].sort_values(ascending=False)","e2355dbe":"pd.DataFrame(na_ratio,index=na_ratio.index,columns=['Missing Value Ratio']).head(5)","f18001a0":"fig,axes=plt.subplots(1,1,figsize=(12,6))\n# axes.grid(color='#909090',linestyle=':',linewidth=2)\nplt.xticks(rotation=90)\nsns.barplot(x=na_ratio.index,y=na_ratio,palette='coolwarm_r')\nplt.title('Missing Value Ratio',color=('#000000'),y=1.03)\nplt.tight_layout();","31b9503e":"fig,axes=plt.subplots(1,1,figsize=(12,12))\nsns.barplot(x=na_sum,y=na_sum.index,palette='brg')\nfor p in axes.patches:\n            value = p.get_width()\n            x = p.get_x() + p.get_width()+30\n            y = p.get_y() + p.get_height()-.2\n            axes.text(x, y, int(value), ha=\"left\",fontsize=11,color='#000000',bbox=dict(facecolor='#dddddd', edgecolor='black',boxstyle='round', linewidth=.5))\nplt.title('Total Missing Values',color=('#000000'),y=1.03)\nplt.tight_layout();","fd2c6ca5":"for i in ['Alley','PoolQC','Fence','MiscFeature','FireplaceQu']:\n    all_df[i]=all_df[i].apply(lambda x: 'None' if str(x)=='nan' else x)","a70f6a1e":"fig,axes=plt.subplots(1,1,figsize=(12,6))\n\nplt.xticks(fontsize=13)\nplt.yticks(fontsize=13)\nplt.ylabel('LotFrontage',size=15)\nplt.xlabel('Neighborhood',size=15)\nmean_lot=all_df.groupby(\"Neighborhood\").mean()['LotFrontage']\nsns.barplot(x=mean_lot.index,y=mean_lot)\nfor p in axes.patches:\n            value = p.get_height()\n            x = p.get_x() +.12\n            y = p.get_y() + p.get_height()-5\n            axes.text(x, y, int(value), ha=\"left\",fontsize=15,color='#000000')\nplt.xticks(rotation=90)\nplt.title('Mean LotFrontage',color='black')\nplt.tight_layout();","76fd0467":"means=dict(all_df.groupby(\"Neighborhood\").mean()['LotFrontage'])","cc695249":"def LotFrontage(row):\n    neigh=row[0]\n    lot=row[1]\n    if pd.isnull(lot):\n        return means[neigh]\n    else:\n        return lot","b1f8ad4d":"all_df['LotFrontage']=all_df[['Neighborhood','LotFrontage']].apply(LotFrontage,axis=1)","895dedf4":"for i in ('GarageType','GarageFinish','GarageQual','GarageCond'):\n    all_df[i].fillna('None',inplace=True)","c01f7113":"for i in ('GarageYrBlt', 'GarageArea', 'GarageCars'):\n    all_df[i].fillna(0,inplace=True)","5f3df89a":"for i in ('BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2'):\n    all_df[i].fillna('None',inplace=True)\nfor i in ('BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF','TotalBsmtSF', 'BsmtFullBath', 'BsmtHalfBath'):\n    all_df[i].fillna(0,inplace=True)","836fda0a":"all_df[\"MasVnrType\"].fillna(\"None\",inplace=True)\nall_df[\"MasVnrArea\"].fillna(0,inplace=True)","77aeb21b":"for i in ('MSZoning','Electrical','KitchenQual','Exterior1st','Exterior2nd','SaleType'):\n    all_df[i].fillna(all_df[i].mode()[0],inplace=True)","78c2f207":"all_df.isnull().sum().sort_values(ascending=False)","55705e85":"for i in ('Utilities','Functional'):\n    all_df[i].fillna(all_df[i].mode()[0],inplace=True)","780054f4":"all_df.isnull().sum().sort_values(ascending=False)","9e8dbaf5":"fig,axes=plt.subplots(1,1,figsize=(12,6))\nplt.xticks(fontsize=13)\nplt.yticks(fontsize=13)\nsns.barplot(data=all_df,x='MSSubClass',y='SalePrice',palette='magma',ci=0)\naxes.text(2,all_df['SalePrice'].mean()+4500, \"Average={}\".format(int(all_df['SalePrice'].mean())),color='black',size=13)\naxes.axhline(all_df['SalePrice'].mean(), ls=':',color='red',linewidth=2.5)\nplt.xlabel('MSSubClass',size=15)\nplt.ylabel('SalePrice',size=15)\nplt.tight_layout();","2b1289bd":"     x=  { 20:'1-STORY 1946 & NEWER ALL STYLES',\n        30:'1-STORY 1945 & OLDER',\n        40:'1-STORY W\/FINISHED ATTIC ALL AGES',\n        45:'1-1\/2 STORY - UNFINISHED ALL AGES',\n        50:'1-1\/2 STORY FINISHED ALL AGES',\n        60:'2-STORY 1946 & NEWER',\n        70:'2-STORY 1945 & OLDER',\n        75:'2-1\/2 STORY',\n        80:'SPLIT',\n        85:'SPLIT FOYER',\n        90:'DUPLEX',\n       120:'1-STORY PUD',\n       150:'1-1\/2 STORY PUD',\n       160:'2-STORY PUD',\n       180:'PUD - MULTILEVEL',\n       190:'2 FAMILY CONVERSION'}","2229f79a":"all_df['MSSubClass']=all_df['MSSubClass'].map(x)","aea84e92":"fig,axes=plt.subplots(2,1,figsize=(12,12))\nsns.barplot(data=all_df,x='YrSold',y='SalePrice',ax=axes[0],palette='inferno',ci=0)\nsns.barplot(data=all_df,x='MoSold',y='SalePrice',ax=axes[1],palette='plasma_r',ci=0)\naxes[0].axhline(all_df['SalePrice'].mean(), ls=':',color='red',linewidth=2.5)\naxes[0].text(3.2,all_df['SalePrice'].mean()+4500, \"Average={}\".format(int(all_df['SalePrice'].mean())),color='black',size=13)\naxes[1].axhline(all_df['SalePrice'].mean(), ls=':',color='red',linewidth=2.5)\naxes[1].text(3.2,all_df['SalePrice'].mean()+4500, \"Average={}\".format(int(all_df['SalePrice'].mean())),color='black',size=13)\nplt.tight_layout();","764384a5":"all_df['MoSold'] = all_df['MoSold'].apply(str)\nall_df['YrSold'] = all_df['YrSold'].apply(str)","49cb318a":"all_df['TotalBathrooms'] = (all_df['FullBath'] + (0.5 * all_df['HalfBath']) + all_df['BsmtFullBath'] + (0.5 * all_df['BsmtHalfBath']))","debeea0d":"all_df['TotalHomeQuality'] = all_df['OverallQual'] + all_df['OverallCond']","24059cfc":"all_df['HouseAge']=all_df['YrSold'].apply(int)-all_df['YearRemodAdd']","4719f174":"all_df['TotalSF'] = all_df['TotalBsmtSF'] + all_df['GrLivArea']","40de4b18":"all_df['TotalPorchSF'] = all_df['OpenPorchSF'] + all_df['EnclosedPorch'] + all_df['3SsnPorch'] + all_df['ScreenPorch']","def2eae3":"all_df['2ndfloor'] = all_df['2ndFlrSF'].apply(lambda x: 1 if x > 0 else 0)","f7004fde":"data=['TotalBathrooms','TotalHomeQuality','HouseAge','TotalSF','TotalPorchSF','2ndfloor']\nfig,axes=plt.subplots(ncols=2,nrows=3,figsize=(12,12))\nfor i, feature in enumerate(all_df[data]):\n    row = int(i\/2)\n    col = i%2\n    sns.regplot(x=all_df[feature],y=all_df['SalePrice'], ax=axes[row][col],ci=0,line_kws={'color':'#000000','linewidth':2},marker='o')\nplt.suptitle('New Features',y=1,size=20)\nall_df[data].iloc[:, i]\nplt.tight_layout()","449bb994":"from scipy.special import boxcox1p\nfrom scipy.stats import boxcox_normmax","e8f4763e":"all_df.drop('SalePrice',axis=1,inplace=True)","e3ce8fe8":"skewed=dict(all_df.skew().sort_values(ascending=False))","f47d9899":"pd.DataFrame(data=skewed.values(),index=skewed.keys(),columns=['Skew Values']).head(10)","2101ee5e":"numeric_dtypes = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\nnumeric = []\nfor i in all_df.columns:\n    if all_df[i].dtype in numeric_dtypes:\n        numeric.append(i)","b3d08aa8":"for i in skewed.keys():\n       if skewed[i]<.8 or i=='MSSubClass':\n            continue\n       else:\n            all_df[i] = boxcox1p(all_df[i], boxcox_normmax(all_df[i] + 1))","cc9d4007":"skewed=dict(all_df.skew().sort_values(ascending=False))\npd.DataFrame(data=skewed.values(),index=skewed.keys(),columns=['Skew Values']).head(10)","6d4ecaaf":"from scipy import stats","e9a37832":"train['SalePrice'].skew()","fe109054":"plt.figure(figsize=(12,6))\nstats.probplot(train['SalePrice'],plot=plt);\nplt.figure(figsize=(12,6))\nmu, sigma = norm.fit(train['SalePrice'])\nsns.distplot(train['SalePrice'],fit=norm,color='b',rug=True,kde_kws={'shade':True,'color':'b','alpha':.2})\nplt.legend(['$\\mu=$ {:.3f} and $\\sigma=$ {:.3f}'.format(mu, sigma)],fontsize=14)\nplt.title('Sale Price',size=20)\nplt.tight_layout();","a6a47a68":"train['SalePrice']=np.log1p(train['SalePrice'])","78e127c2":"y_train=train['SalePrice'].reset_index(drop=True)","8730d109":"plt.figure(figsize=(12,6))\nstats.probplot(train['SalePrice'],plot=plt);\nplt.figure(figsize=(12,6))\nmu, sigma = norm.fit(train['SalePrice'])\nsns.distplot(train['SalePrice'],fit=norm,color='b',rug=True,kde_kws={'shade':True,'color':'b','alpha':.2})\nplt.legend(['$\\mu=$ {:.3f} and $\\sigma=$ {:.3f}'.format(mu, sigma)],fontsize=14)\nplt.title('Sale Price',size=20)\nplt.tight_layout();","3afcbf2f":"train['SalePrice'].skew()","a291b2c9":"all_df=pd.get_dummies(all_df,drop_first=True)","5a09e8e8":"all_df.isnull().sum()","c513615d":"X_train = all_df[:ntrain]\nX_test = all_df[ntrain:]","93561adf":"y_train.isnull().sum()","b09e7a33":"y_train.shape,X_train.shape,X_test.shape","473bc7c2":"X_train","3914cdc8":"from sklearn.linear_model import Lasso,ElasticNet\nfrom sklearn.svm import SVR\nfrom sklearn.ensemble import GradientBoostingRegressor,StackingRegressor,RandomForestRegressor\nimport lightgbm as lgb\nfrom lightgbm import LGBMRegressor\nfrom xgboost import XGBRegressor \nfrom sklearn.model_selection import cross_val_score,train_test_split,KFold,GridSearchCV\nfrom sklearn.pipeline import make_pipeline ,Pipeline\nfrom sklearn.preprocessing import RobustScaler,StandardScaler","3321c274":"kf = KFold(5, shuffle=True, random_state=42)\ndef rmsecv(model):\n    rmse= np.sqrt(-cross_val_score(model, X_train, y_train, cv = kf,scoring='neg_mean_squared_error',error_score='raise'))\n    scores.append(['{:3f}'.format(rmse.mean()),'{:3f}'.format(rmse.std())])","c70a126f":"from hyperopt import hp, fmin, tpe, STATUS_OK, Trials","74b0ba26":"\n# space = {\n# 'n_estimators': hp.randint('n_estimators',4000,5000),\n# 'random_state':hp.choice('random_state',[42]),\n#     'bagging_fraction':hp.uniform('bagging_fraction',.7,1),\n#     'learning_rate':hp.uniform('learning_rate',0.002,.006),\n#     'bagging_freq':hp.randint('bagging_freq',1,30),\n#     'bagging_seed':hp.randint('bagging_seed ',1,30),\n\n#     'boosting_type':hp.choice('boosting_type',['gbdt']),\n#     'feature_fraction':hp.uniform('feature_fraction',.01,.5),\n#     'feature_fraction_seed':hp.randint('feature_fraction_seed',1,50),\n#         'min_sum_hessian_in_leaf':hp.randint('min_sum_hessian_in_leaf',1,50),\n# 'num_leaves':hp.randint('num_leaves',1,50),\n# 'objective':hp.choice('objective',['regression'])}\n\n# def objective(space):\n#     model = LGBMRegressor(\n#         n_estimators = space['n_estimators'],\n#         random_state=space['random_state'],\n#         bagging_fraction=space['bagging_fraction'], \n#         learning_rate=space['learning_rate'],\n#         boosting_type=space['boosting_type'],\n#         bagging_seed=space['bagging_seed'],\n#         feature_fraction=space['feature_fraction'],\n#         feature_fraction_seed=space['feature_fraction_seed'],\n#         min_sum_hessian_in_leaf =space['min_sum_hessian_in_leaf'],\n#         num_leaves=space['num_leaves'],\n#     objective=space['objective'])\n    \n#     rmse = (np.sqrt(-cross_val_score(model, X_train, y_train, cv = kf,scoring='neg_mean_squared_error')).mean())\n#     return {'loss': rmse, 'status': STATUS_OK }\n    \n# trials = Trials()\n# best = fmin(fn= objective,\n#             space= space,\n#             algo= tpe.suggest,\n#             max_evals = 100,\n#             trials= trials)\n# best\n","9f126710":"lasso=make_pipeline(RobustScaler(),Lasso(alpha= 0.0005395401757154939,\n                                         max_iter= 2713,\n                                         normalize= False,\n                                         positive= False,\n                                         random_state= 42,\n                                         selection= 'random',\n                                         tol= 0.006902489174276111,\n                                         warm_start= False,copy_X=True,fit_intercept=True,precompute=False))\nelasticnet=make_pipeline(RobustScaler(),ElasticNet(alpha= 0.006528654958339889,\n                                                   l1_ratio= 0.027196526024128087,\n                                                   max_iter= 2286,\n                                                   normalize=False,\n                                                   positive=False,\n                                                   random_state= 42,\n                                                   selection= 'cyclic',\n                                                   tol= 0.003954468580556897,\n                                                  warm_start= False,copy_X=False,fit_intercept=True,precompute=False))\n\n\n\nsvr = make_pipeline(RobustScaler(), SVR(C= 26.25, epsilon= 0.0215, gamma=0.000235))\n","a4e9bc48":"gbr=GradientBoostingRegressor(n_estimators=6500,\n                                  learning_rate=0.008,\n                                  max_depth=3,\n                                  max_features='sqrt',\n                                  criterion='friedman_mse',\n                                  min_samples_leaf=15,\n                                  min_samples_split=11,\n                                  loss='huber',random_state=42)","812d4061":"lgbm=LGBMRegressor(bagging_fraction = 0.9396546294370978,\n             bagging_freq= 20,\n             bagging_seed= 26,\n             boosting_type='gbdt',\n             feature_fraction=0.18000984904260108,\n             feature_fraction_seed= 24,\n             learning_rate= 0.0040468864436411135,\n             min_sum_hessian_in_leaf=7,\n             n_estimators= 4014,\n             num_leaves= 13,\n             objective='regression',\n             random_state= 42,\n                     verbosity=-1)","413fb0cb":"xgb=XGBRegressor(random_state=42,verbosity=0,\n            n_estimators=8025,\n            learning_rate=0.005959814917079281, \n            colsample_bytree=0.0780460264599038, \n            gamma=0.0051170320540329977, \n            max_depth=5, \n            min_child_weight=0.7706298621431724, \n            reg_alpha=0.011645470627696723, \n            reg_lambda=0.9138427702529622,\n            subsample=0.297642172460661)","35cba72a":"est=[      ('lasso',lasso),\n           ('enet',elasticnet),\n           ('svr',svr),\n           ('gbr',gbr),\n           ('lgbm',lgbm),\n           ('xgb',xgb)\n    ]\nstacked=StackingRegressor(cv=kf,estimators=est,passthrough=False,final_estimator=xgb)","30dba114":"models=[\n        lasso,\n        elasticnet,\n        svr,\n        gbr,\n        lgbm,\n        xgb,\n        ]","aadd10c6":"%%time\nscores=[]\nfor i in models:\n    try:\n        rmsecv(i)\n    except Exception as e:\n        print(i,'\\n',e)","8d38382b":"scores","d4d76950":"mods=['Lasso','ElasticNet','SVR','GBR','LightGBM','XGBoost']\nscores\ndf=(pd.DataFrame(scores,index=mods,columns=['RMSE','STD']))\ndf['RMSE'] = df['RMSE'].astype(float, errors = 'raise')","ae31fb35":"fig,axes=plt.subplots(1,1,figsize=(12,6))\nsns.barplot(x=df['RMSE'],y=df.index,palette='gnuplot')\nfor p in axes.patches:\n            value = '{:.5f}'.format(p.get_width())\n            x = p.get_x() + p.get_width()-.012\n            y = p.get_y() + p.get_height()-.3\n            axes.text(x, y, (value), ha=\"left\",fontsize=14,color='#ffffff')\nplt.title('RMSE');","28e25dbd":"lasso.fit(X_train,y_train)\npred_lasso=np.expm1(lasso.predict(X_test))","bd7da171":"elasticnet.fit(X_train,y_train)\npred_enet=np.expm1(elasticnet.predict(X_test))","f3bfab12":"svr.fit(X_train,y_train)\npred_svr=np.expm1(svr.predict(X_test))","70a7b201":"gbr.fit(X_train,y_train)\npred_gbr=np.expm1(gbr.predict(X_test))","ff70fb90":"lgbm.fit(X_train,y_train)\npred_lgbm=np.expm1(lgbm.predict(X_test))","a5ea466f":"xgb.fit(X_train,y_train)\npred_xgb=np.expm1(xgb.predict(X_test))","cbb53cd3":"stacked.fit(X_train,y_train)\npred_stacked=np.expm1(stacked.predict(X_test))","1df44769":"plt.figure(figsize=(12,6))\nsns.regplot(y=pred_lasso,x=pred_xgb,ci=0,line_kws={'color':'black','linewidth':2})\nplt.title('SVR-XGB Predictions')\nplt.xlabel('XGB')\nplt.ylabel('SVR');","b7dc6d4f":"avg_pred=(pred_enet+pred_lasso+pred_svr+pred_gbr+pred_lgbm+pred_xgb+pred_stacked)\/7","33e8bf0f":"plt.figure(figsize=(12,6))\nplt.scatter(y=avg_pred,x=ids)\nplt.title('Average Predictions');","8b7bb950":"submissions=pd.DataFrame({'Id': ids, 'SalePrice': avg_pred})","b62e2544":"submissions.reset_index()","145691e7":"submissions.to_csv('submission.csv',index=False)","b5c8cfae":"## 6.3 Averaging Predictions","bea7de77":"MSZoning: Identifies the general zoning classification of the sale.<br>\nElectrical: Electrical system<br>\nKitchenQual: Kitchen quality<br>\nExterior1st: Exterior covering on house<br>\nExterior2nd: Exterior covering on house (if more than one material)<br>\nSaleType: Type of sale<br>\nWe can fill Na values of above features with their most repeating value.","d3b1ffdb":"Target values comes log transformed. We reverse it with <b><a href=\"https:\/\/numpy.org\/doc\/stable\/reference\/generated\/numpy.expm1.html\">expm1<\/a><\/b>","5bc4cd0e":"# 5.Feature Engineering","76de62c8":"LotFrontage is linear feet of street connected to property. Imputing missing values by the mean LotFrontage of the neighborhood seems best option.","2a73ff57":"# 3.Exploring Important Features","3d8b541b":"Some of our models like Lasso etc. is sensitive to the outliers. We try to ignore this situation with Robust Scaler.<br>\nAlso it can be done with Standard Scaler.<br>\nMaking pipeline for Lasso, ElasticNet and SVR.<br>\n* <b><a href=\"https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.preprocessing.RobustScaler.html\">Robust Scaler<\/a><\/b>\n* <b><a href=\"https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.preprocessing.StandardScaler.html\">Standart Scaler<\/a><\/b>\n* <b><a href=\"https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.pipeline.make_pipeline.html\">Make Pipeline<\/a><\/b>","03749853":"# 6.Modelling","1410b660":"Submissions are evaluated on Root-Mean-Squared-Error (RMSE) between the logarithm of the predicted value and the logarithm of the observed sales price.<br>(Taking logs means that errors in predicting expensive houses and cheap houses will affect the result equally.)","d50498c1":"### 5.2 Adding new features","e93a148a":"We can safely fill Na values of GarageType,GarageFinish,GarageQual,GarageCond with 'None'","d725ca21":"Checks for any missing data.","c95c86a7":"### Bsmt","44e3799e":"In skewed data, the tail region may act as an outlier for the statistical model and that <br>outliers adversely affect the model\u2019s performance especially regression-based models.<br>\nWe transform the skewed data with boxcox to improve model.<br>\nIt can be done with log1p transform too. I prefer boxcox for this notebook.<br>\n* <b><a href=\"https:\/\/docs.scipy.org\/doc\/scipy\/reference\/generated\/scipy.stats.boxcox.html-\">boxcox<\/a><\/b>\n* <b><a href=\"https:\/\/numpy.org\/doc\/stable\/reference\/generated\/numpy.log1p.html\">log1p<\/a><\/b>","ae1edc3c":"### 5.4 Transforming target value","5fd40af0":"### 6.2.3 Stacked Regressor","d3cf940e":"MSSubClass: Identifies the type of dwelling involved in the sale. Keeping this feature numeric does not improve the model.<br>\nSo we convert them into string.","cd14ce60":"Test data might has some outliers like we discovered in train data. So deleting this outliers may affect badly to the model.<br>\nHowever this outliers can be observe more than one features.(GrLivArea,TotalBsmtSF and the features we create later)<br>\nI believe deleting them improve the model.\n","ff8f6952":"Creating new features that we think will improve our model.","cd4d1350":"MSSubClass\n*         20\t1-STORY 1946 & NEWER ALL STYLES\n*         30\t1-STORY 1945 & OLDER\n*         40\t1-STORY W\/FINISHED ATTIC ALL AGES\n*         45\t1-1\/2 STORY - UNFINISHED ALL AGES\n*         50\t1-1\/2 STORY FINISHED ALL AGES\n*         60\t2-STORY 1946 & NEWER\n*         70\t2-STORY 1945 & OLDER\n*         75\t2-1\/2 STORY ALL AGES\n*         80\tSPLIT OR MULTI-LEVEL\n*         85\tSPLIT FOYER\n*         90\tDUPLEX - ALL STYLES AND AGES\n*        120\t1-STORY PUD (Planned Unit Development) - 1946 & NEWER\n*        150\t1-1\/2 STORY PUD - ALL AGES\n*        160\t2-STORY PUD - 1946 & NEWER\n*        180\tPUD - MULTILEVEL - INCL SPLIT LEV\/FOYER\n*        190\t2 FAMILY CONVERSION - ALL STYLES AND AGES\n       \nMSSubClass: Identifies the type of dwelling involved in the sale.","c5b78960":"Target variable is right skewed. Regression models work better with normal distributed data. We'll deal this before modelling.","b4822b5d":"Imputing Utilities and Functional with their mode.","4c31cb37":"### MSZoning,Electrical,KitchenQual,Exterior,SaleType","3de40bc7":"## 1.2 Goal","9c1ff9b1":"I tried to impute missing values according to <b><a href=\"https:\/\/www.kaggle.com\/c\/house-prices-advanced-regression-techniques\/data?select=data_description.txt\">description<\/a><\/b> as best i could.","c736c9d8":"There is a 2 outliers with huge GrLivArea and extremely low SalePrice compared to others. Index 523 and 1298.","0947af93":"There is no missing value except the SalePrice coming from test data.","03ae5bed":"<b><a href=\"https:\/\/www.kaggle.com\/c\/house-prices-advanced-regression-techniques\/data?select=data_description.txt\">House Prices - Advanced Regression Techniques<\/a><\/b>","920327bc":"Exploring the features that highly correlated with the target value is important. Because they effect model performance more than other features.","2a37e74c":"YrSold: Year Sold (YYYY)\nMoSold: Month Sold (MM)","db28e8a6":"We can fill the Na values of Bsmt Features with None and 0 since there is no basement","80e357c8":"Regression models works better with normally distributed features. We transform our target value with log(1+x) transform.<br>\n* <b><a href=\"https:\/\/numpy.org\/doc\/stable\/reference\/generated\/numpy.log1p.html\">log1p<\/a><\/b>","6aae4614":"## 4.1 Imputing missing values","69811de3":"### Alley,PoolQC,Fence,MiscFeature,FireplaceQu","a9050ed4":"If there is no garage there is no GarageYrBlt,GarageArea,GarageCars","60d09496":"Stacked generalization consists in stacking the output of individual estimator and use a regressor to compute the final prediction.<br>\nStacking allows to use the strength of each individual estimator by using their output as input of a final estimator.<br>\n* <b><a href=\"https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.ensemble.StackingRegressor.html\">Stacking Regressor<\/a><\/b>","91c49704":"### Garage","0ea1ef37":"### Utilities,Functional","60dfc4d6":"## 1.4 About Data","653f2556":"### 5.1.1 MSSubClass","e4857a6f":"Imports","8eb1d262":"## 1.1 Description","ba58698d":"## 3.1 Dropping Outliers","d2f406c6":"### 5.3 Skewed data","1a97e050":"# 4.Missing data","229c8f63":"## 6.1 Preparing data","0f4ee86f":"Estimating the selling price for each id in the test set based on house charecteristics.","45519ce0":"### 6.2.4 Cross Validation","0dc97710":"Taking 1\/7 of each prediction to averaging predictions.","0cf49169":"# 2-Loading Data ","7b49cae8":"Data description says:<br>\n-Alley : NA means \"no alley access\"<br>\n-PoolQC : NA means \"no Pool\".<br>\n-Fence : NA means \"no fence\"<br>\n-MiscFeature : NA means \"no misc feature\"<br>\n-FireplaceQu : NA means \"no fireplace\"<br>\nSo we can fill all NA values of this features with 'None'","9df3ffd1":"MasVnrType: Masonry veneer type.<br>\nMasVnrArea: Masonry veneer area in square feet.<br>\nWe can fill 0 for the area and None for the type.","dba9af33":"### 5.1.2 YrSold-MoSold","56b95544":"### Masvnr","11d3d3c7":"### 6.2.2 Making Pipelines","593f7e0e":"Month sold shouldn't be numeric. Cause january not better than july. Bu we can't tell same thing about year sold. However we convert it either.","f428c354":"Getting dummies","03b966fb":"### 6.2.1 Hyperparameter Tuning","d7ce4635":"## 1.3 Metric","b738e935":"According to description:<br>","9bc60962":"## 5.1 Changing some numeric variables","9d857386":"## 6.2 Predictions","08a8541d":"There are 3 variables that are seems numeric but should actually be categorical in the data.<br>\nMSSubClass,YrSold and MoSold.<br>","ccaa3946":"### LotFrontage","acf99c0e":"I used hyperparameter tuning to finding better parameters for some models.<br>\n* <b><a href=\"https:\/\/www.kaggle.com\/pavansanagapati\/automated-hyperparameter-tuning\/notebook#notebook-container\">Automated Hyperparameter Tuning<\/a><\/b>","01cab681":"Ask a home buyer to describe their dream house, and they probably won't begin with the height of the basement ceiling or the proximity to an east-west railroad.<br>\nBut this playground competition's dataset proves that much more influences price negotiations than the number of bedrooms or a white-picket fence.<br>\nWith 79 explanatory variables describing (almost) every aspect of residential homes in Ames, Iowa, this competition challenges you to predict the final price of each home.","f85a2537":"Cross validation function","90b96f4a":"Recreating data","b17d7070":"# 1-Introduction"}}