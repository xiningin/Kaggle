{"cell_type":{"4386f400":"code","00998caa":"code","c28ba895":"code","32a68ce6":"code","9b19958e":"code","b55fc77a":"code","f0bc90f0":"code","dcc472dc":"code","d3cfa063":"code","fa8471da":"code","d929cd68":"code","174eb9ee":"code","a245ccbe":"code","fd2be3ec":"code","e1dbb704":"code","d27d8540":"code","49b19b6f":"code","0c7259ae":"code","706fa923":"code","fb88678d":"code","54eeda3a":"code","de1e0a61":"code","81b9110b":"code","021f5369":"code","61191c76":"code","67f8a5cf":"code","79c5f4d3":"code","13b3bdb9":"code","649f7b9e":"code","6f67bb54":"code","0f35f9c5":"code","c35b3eca":"markdown","9048c171":"markdown","5b520f33":"markdown","05b9bbf6":"markdown","b1efd955":"markdown","59b6449c":"markdown","b3db6ec5":"markdown","416fc9f6":"markdown","9b23a66a":"markdown","173de379":"markdown","54a16ccf":"markdown","c36cb2fd":"markdown","a729c639":"markdown","40679f93":"markdown","9d615ccd":"markdown","7f11ec8a":"markdown","eb54c835":"markdown","fc9838f4":"markdown","c4d865bc":"markdown","2b8441a8":"markdown","1e544423":"markdown"},"source":{"4386f400":"'''\nCOVID-19 Data analysis\n'''\n\nfrom IPython.core.display import HTML\nimport folium\nimport datetime\nfrom datetime import datetime\nimport requests\nfrom bs4 import BeautifulSoup\nimport lxml.html as lh\nimport pandas as pd\nimport re\nimport time\nimport psutil\nimport json\n\nimport numpy as np\nfrom PIL import Image\nimport os\nfrom os import path\nimport matplotlib.pyplot as plt\nfrom scipy.integrate import solve_ivp\n\nimport plotly.graph_objects as go\nfrom pandas.plotting import register_matplotlib_converters\nimport plotly.express as px\nfrom IPython.display import display, Markdown, Latex\nimport matplotlib as plot\nfrom matplotlib.pyplot import figure\nimport seaborn as sns\n\nregister_matplotlib_converters()\nfrom IPython.display import Markdown\n\n\ndataset = pd.DataFrame()","00998caa":"import sys\n\nif not sys.warnoptions:\n    import warnings\n    warnings.simplefilter(\"ignore\")","c28ba895":"def statelat(sate):\n    lat = {\n        \"Maharashtra\":19.7515,\n        \"Delhi\":28.7041,\n        \"Tamil Nadu\":11.1271,\n        \"Rajasthan\":27.0238,\n        \"Madhya Pradesh\":22.9734,\n        \"Telangana\":18.1124,\n        \"Gujarat\":22.2587,\n        \"Uttar Pradesh\":26.8467,\n        \"Andhra Pradesh\":15.9129,\n        \"Kerala\":10.8505,\n        \"Jammu and Kashmir\":33.7782,\n        \"Karnataka\":15.3173,\n        \"Haryana\":29.0588,\n        \"Punjab\":31.1471,\n        \"West Bengal\":22.9868,\n        \"Bihar\":25.0961,\n        \"Odisha\":20.9517,\n        \"Uttarakhand\":30.0668,\n        \"Himachal Pradesh\":31.1048,\n        \"Assam\":26.2006,\n        \"Chhattisgarh\":22.0797,\n        \"Chandigarh\":30.7333,\n        \"Jharkhand\":23.6102,\n        \"Ladakh\":34.152588,\n        \"Andaman and Nicobar Islands\":11.7401,\n        \"Goa\":15.2993,\n        \"Puducherry\":11.9416,\n        \"Manipur\":24.6637,\n        \"Tripura\":23.9408,\n        \"Mizoram\":23.1645,\n        \"Arunachal Pradesh\":28.2180,\n        \"Dadra and Nagar Haveli\":20.1809,\n        \"Nagaland\":26.1584,\n        \"Daman and Diu\":20.4283,\n        \"Lakshadweep\":8.295441,\n        \"Meghalaya\":25.4670,\n        \"Sikkim\":27.5330\n    }\n    return lat[sate]","32a68ce6":"def statelong(sate):\n    long = {\n        \"Maharashtra\":75.7139,\n        \"Delhi\":77.1025,\n        \"Tamil Nadu\":78.6569,\n        \"Rajasthan\":74.2179,\n        \"Madhya Pradesh\":78.6569,\n        \"Telangana\":79.0193,\n        \"Gujarat\":71.1924,\n        \"Uttar Pradesh\":80.9462,\n        \"Andhra Pradesh\":79.7400,\n        \"Kerala\":76.2711,\n        \"Jammu and Kashmir\":76.5762,\n        \"Karnataka\":75.7139,\n        \"Haryana\":76.0856,\n        \"Punjab\":75.3412,\n        \"West Bengal\":87.8550,\n        \"Bihar\":85.3131,\n        \"Odisha\":85.0985,\n        \"Uttarakhand\":79.0193,\n        \"Himachal Pradesh\":77.1734,\n        \"Assam\":92.9376,\n        \"Chhattisgarh\":82.1409,\n        \"Chandigarh\":76.7794,\n        \"Jharkhand\":85.2799,\n        \"Ladakh\":77.577049,\n        \"Andaman and Nicobar Islands\":92.6586,\n        \"Goa\":74.1240,\n        \"Puducherry\":79.8083,\n        \"Manipur\":93.9063,\n        \"Tripura\":91.9882,\n        \"Mizoram\":92.9376,\n        \"Arunachal Pradesh\":94.7278,\n        \"Dadra and Nagar Haveli\":73.0169,\n        \"Nagaland\":94.5624,\n        \"Daman and Diu\":72.8397,\n        \"Lakshadweep\":73.048973,\n        \"Meghalaya\":91.3662,\n        \"Sikkim\":88.5122\n    }\n    return long[sate]","9b19958e":"%%HTML\n<div class=\"flourish-embed flourish-bar-chart-race\" data-src=\"visualisation\/2061549\" data-url=\"https:\/\/flo.uri.sh\/visualisation\/2061549\/embed\"><script src=\"https:\/\/public.flourish.studio\/resources\/embed.js\"><\/script><\/div>","b55fc77a":"df = pd.read_csv('..\/input\/covid19-in-india\/covid_19_india.csv')\ndata = df.copy()\ndata['Date'] = data['Date'].apply(pd.to_datetime)\ndata.drop(['Sno', 'Time'],axis=1,inplace=True)\n\n# collect present data\nfrom datetime import date\ndata_apr = data[data['Date'] > pd.Timestamp(date(2020,4,12))]\n\n# prepaing data state wise\nstate_cases = data_apr.groupby('State\/UnionTerritory')['Confirmed','Deaths','Cured'].max().reset_index()\nstate_cases['Active'] = state_cases['Confirmed'] - (state_cases['Deaths']- state_cases['Cured'])\nstate_cases[\"Death Rate (per 100)\"] = np.round(100*state_cases[\"Deaths\"]\/state_cases[\"Confirmed\"],2)\nstate_cases[\"Cure Rate (per 100)\"] = np.round(100*state_cases[\"Cured\"]\/state_cases[\"Confirmed\"],2)","f0bc90f0":"indiaLiveJson = 'https:\/\/api.covid19india.org\/data.json'\nr = requests.get(indiaLiveJson)\nindiaData = r.json()\n\n\ndisplay(Markdown(\"# Todays Condition in India: Testing for of 2019-nCoV\"))\nif r.json()['tested'][len(r.json()['tested'])-1]['samplereportedtoday'] != '':\n    display(Markdown(\"**Time Stamp**                   :<font color='red'>{}<\/font>\".format(r.json()['tested'][len(r.json()['tested'])-1]['updatetimestamp'])))\n    display(Markdown(\"**Individals Tested**            :<font color='red'>{}<\/font>\".format(r.json()['tested'][len(r.json()['tested'])-1]['samplereportedtoday'])))\n    display(Markdown(\"**Individals Found Positive**    :<font color='red'>{}<\/font>\".format(r.json()['tested'][len(r.json()['tested'])-1]['positivecasesfromsamplesreported'])))\nelse:\n    display(Markdown(\"**Time Stamp**                   :<font color='red'>{}<\/font>\".format(r.json()['tested'][len(r.json()['tested'])-2]['updatetimestamp'])))\n    display(Markdown(\"**Individals Tested**            :<font color='red'>{}<\/font>\".format(r.json()['tested'][len(r.json()['tested'])-2]['samplereportedtoday'])))\n    display(Markdown(\"**Individals Found Positive**    :<font color='red'>{}<\/font>\".format(r.json()['tested'][len(r.json()['tested'])-2]['positivecasesfromsamplesreported'])))\n    \n    \ndisplay(Markdown(\"# Todays Condition in India: 2019-nCoV\"))\ndisplay(Markdown(\"**Time Stamp**               :<font color='red'>{}<\/font>\".format(r.json()['cases_time_series'][len(r.json()['cases_time_series'])-1]['date'])))\ndisplay(Markdown(\"**Positive Reported Today**  :<font color='red'>{}<\/font>\".format(r.json()['cases_time_series'][len(r.json()['cases_time_series'])-1]['dailyconfirmed'])))\ndisplay(Markdown(\"**Deceased Today**           :<font color='red'>{}<\/font>\".format(r.json()['cases_time_series'][len(r.json()['cases_time_series'])-1]['dailydeceased'])))\ndisplay(Markdown(\"**Recoverd Today**           :<font color='red'>{}<\/font>\".format(r.json()['cases_time_series'][len(r.json()['cases_time_series'])-1]['dailyrecovered'])))         ","dcc472dc":"testingHistory = pd.DataFrame()\ntestingNO = []\ntestedPos = []\ntimeStamp = []\nfor index in range(len(indiaData['tested'])):\n    try:\n        testingNO.append(int(re.sub(',','',indiaData['tested'][index]['totalindividualstested'])))\n        testedPos.append(int(re.sub(',','',indiaData['tested'][index]['totalpositivecases'])))\n    except:\n        testingNO.append(testingNO[len(testingNO)-1])\n        testedPos.append(testedPos[len(testedPos)-1])\n        \n    timeStamp.append(indiaData['tested'][index]['updatetimestamp'][:-9])\n    \ntestingHistory['testing_no'] = testingNO[:-1]\ntestingHistory['testing_pos'] = testedPos\ntestingHistory['time_stamp'] = timeStamp\n\ntestingHistory.drop_duplicates(subset =\"time_stamp\", \n                     keep = False, inplace = True) \n\n\nfig = go.Figure()\n\nfig = fig.add_trace(go.Scatter(y=testingHistory['testing_no'], x=testingHistory['time_stamp'],\n                    mode='lines+markers',\n                    name='Testing Pattern'))\n\nfig = fig.add_trace(go.Scatter(y=testingHistory['testing_pos'], x=testingHistory['time_stamp'],\n                    mode='lines+markers',\n                    name='Tested Positive'))\n\nfig = fig.update_layout(\n    title=\"India COVID-19 Testing History\",\n    xaxis_title=\"Testing\",\n    yaxis_title=\"Date\",\n    \n)\n\n\nfig.show()","d3cfa063":"total_test = pd.read_csv('..\/input\/globaltestcovid19\/full-list-total-tests-for-covid-19.csv')\ntotal_test['Date'] = total_test['Date'].apply(pd.to_datetime)\ntotal_test.set_index([\"Entity\"], inplace = True)\ntotal_test = total_test.loc[['India','South Korea']]\ntotal_test.reset_index(inplace = True)\ntotal_test.sort_values('Date', ascending= True,inplace=True)\n\n# plot\n'''\nfig = go.Figure()\n\nfig = fig.add_trace(go.Scatter(y=total_test['Cumulative total tests'], x=total_test['Date'],\n                    mode='lines+markers',\n                    name='sk'))\n\nfig = fig.add_trace(go.Scatter(y=testingHistory['testing_pos'], x=testingHistory['time_stamp'],\n                    mode='lines+markers',\n                    name='in'))\n'''\n\n\nfig = px.scatter(total_test, \n                 x='Date', \n                 y='Cumulative total tests', \n                 color='Entity')\n\nfig.update_traces(marker=dict(size=3.5),\n                  mode='lines+markers')\n\n\nfig = fig.add_trace(go.Scatter(y=testingHistory['testing_no'], x=testingHistory['time_stamp'],\n                    mode='lines+markers',\n                    name='Testing Pattern'))\n\nfig.add_annotation( # add a text callout with arrow\n    text=\"Initial Rapid Testing pattern\", x='2020-03-01', y=100000, arrowhead=1, showarrow=True\n)\n\n\nfig.add_annotation( # add a text callout with arrow\n    text=\"Lack of inital rapid testing\", x='2020-04-03', y=69245, arrowhead=4, ax=0,\n            ay=-40,showarrow=True\n)\n\n\nfig.update_layout(template = 'plotly_white', title_text = '<b>Total Tests for COVID-19<\/b>',\n                  font=dict(family=\"Arial, Balto, Courier New, Droid Sans\",color='black'))\nfig.show()\n","fa8471da":"indiaConfirmed = []\nindiaRecovered = []\nindiaDeseased = []\ntimeStamp = []\nfor index in range(len(indiaData['cases_time_series'])):\n    indiaConfirmed.append(int(re.sub(',','',indiaData['cases_time_series'][index]['totalconfirmed'])))\n    indiaRecovered.append(int(re.sub(',','',indiaData['cases_time_series'][index]['totalrecovered'])))\n    indiaDeseased.append(int(re.sub(',','',indiaData['cases_time_series'][index]['totaldeceased'])))\n    \n    timeStamp.append(indiaData['cases_time_series'][index]['date'])\n    \n\nfig = go.Figure()\n#fig = px.scatter(testingHistory,x=\"time_stamp\", y=\"testing_no\")\n\nfig = fig.add_trace(go.Scatter(x=timeStamp, y=indiaConfirmed,\n                    mode='lines+markers',\n                    name='Confirmed Cases'))\nfig = fig.add_trace(go.Scatter(x=timeStamp, y=indiaRecovered,\n                    mode='lines+markers',\n                    name='Recoverd Patients'))\nfig = fig.add_trace(go.Scatter(x=timeStamp, y=indiaDeseased,\n                    mode='lines+markers',\n                    name='Deseased Patients'))\n\nfig = fig.update_layout(\n    title=\"India COVID-19 \",\n    xaxis_title=\"Date\",\n    yaxis_title=\"Testing\",\n    \n)\n\n\nfig.show()","d929cd68":"indiaPrediction = pd.DataFrame()\nindiaConfirmed = []\nindiaRecovered = []\nindiaDeseased = []\ntimeStamp = []\nfor index in range(len(indiaData['cases_time_series'])):\n    indiaConfirmed.append(int(re.sub(',','',indiaData['cases_time_series'][index]['totalconfirmed'])))\n    indiaRecovered.append(int(re.sub(',','',indiaData['cases_time_series'][index]['totalrecovered'])))\n    indiaDeseased.append(int(re.sub(',','',indiaData['cases_time_series'][index]['totaldeceased'])))\n    \n    timeStamp.append(datetime.strptime(datetime.strptime(indiaData['cases_time_series'][index]['date']+'2020',\"%d %B %Y\").strftime(\"%m\/%d\/%Y\"),'%m\/%d\/%Y'))\n\n    #print datetime.datetime.strptime(\"%d %B %Y\",\"April 28,2015\").strftime(\"%m\/%d\/%y\")\nindiaPrediction['total confirmed'] = indiaConfirmed\nindiaPrediction['total recovered'] = indiaRecovered\nindiaPrediction['total deceased'] = indiaDeseased\nindiaPrediction['Date'] = timeStamp\n\nindiaPrediction['Date'] = indiaPrediction['Date'].map(datetime.toordinal).tolist()\n\n\n\nx = np.array(indiaPrediction['Date'])\ny = np.array(indiaPrediction['total confirmed'])\n\nz = np.polyfit(x, y,15)\nf = np.poly1d(z)\n\n\n\nx_new = np.linspace(x[0], x[-1]+(150),50)\ny_new = f(x_new)\n\n\nx = np.array(indiaPrediction['Date'])\ny = np.array(indiaPrediction['total recovered'])\n\nz = np.polyfit(x, y,15)\nf = np.poly1d(z)\n\n\n\nx_new2 = np.linspace(x[0], x[-1]+(150),50)\ny_new2 = f(x_new)\n\n\nx = np.array(indiaPrediction['Date'])\ny = np.array(indiaPrediction['total deceased'])\n\nz = np.polyfit(x, y,15)\nf = np.poly1d(z)\n\n\n\nx_new3 = np.linspace(x[0], x[-1]+(150),50)\ny_new3 = f(x_new)\n\n\nindiaPrediction['Date'] = indiaPrediction['Date'].apply(lambda x: datetime.fromordinal(x))\n\n\npred1 = pd.DataFrame(columns = ['Date'])\npred1['Date'] = x_new\n\ny1 = pd.DataFrame(columns = ['Count'])\ny1['Count'] = y_new\n\n\npred2 = pd.DataFrame(columns = ['Date'])\npred2['Date'] = x_new2\n\ny2 = pd.DataFrame(columns = ['Count'])\ny2['Count'] = y_new2\n\n\npred3 = pd.DataFrame(columns = ['Date'])\npred3['Date'] = x_new3\n\ny3 = pd.DataFrame(columns = ['Count'])\ny3['Count'] = y_new3\n\npred1['Date'] = pred1['Date'].apply(lambda x: datetime.fromordinal(int(x)))\npred2['Date'] = pred2['Date'].apply(lambda x: datetime.fromordinal(int(x)))\npred3['Date'] = pred3['Date'].apply(lambda x: datetime.fromordinal(int(x)))\n\n#fig = px.scatter(indiaPrediction, y=\"total confirmed\", x=\"Date\")\n\n\n\nfig = go.Figure()\n#fig = px.scatter(testingHistory,x=\"time_stamp\", y=\"testing_no\")\n\nfig = fig.add_trace(go.Scatter(x=timeStamp, y=indiaConfirmed,\n                    mode='markers',\n                    name='Confirmed Cases'))\nfig = fig.add_trace(go.Scatter(x=timeStamp, y=indiaRecovered,\n                    mode='markers',\n                    name='Recoverd Patients'))\nfig = fig.add_trace(go.Scatter(x=timeStamp, y=indiaDeseased,\n                    mode='markers',\n                    name='Deseased Patients'))\n\nHospitalbeds = pd.read_csv('..\/input\/covid19-in-india\/HospitalBedsIndia.csv')\nHospitalbeds = Hospitalbeds[-1:]\ntotalBeds = sum((Hospitalbeds['NumRuralBeds_NHP18']+Hospitalbeds['NumUrbanBeds_NHP18']).tolist())\n\nfig = fig.add_shape(\n        # Line Horizontal\n            type=\"line\",\n            x0=min(pred1['Date'].tolist()),\n            y0=totalBeds,\n            x1=max(pred1['Date'].tolist()),\n            y1=totalBeds,\n            line=dict(\n                color=\"LightSeaGreen\",\n                width=4,\n                dash=\"dashdot\",\n            ),\n    )\n\nfig = fig.add_trace(go.Scatter(\n    x=pred1['Date'].tolist(),\n    y=y1['Count'].tolist(),\n    mode='lines',\n    name='Coronavirus Infected Trend Line'\n))\n\nfig = fig.add_trace(go.Scatter(\n    x=pred2['Date'].tolist(),\n    y=y2['Count'].tolist(),\n    mode='lines',\n    name='Coronavirus Cured Trend Line'\n))\n\nfig = fig.add_trace(go.Scatter(\n    x=pred3['Date'].tolist(),\n    y=y3['Count'].tolist(),\n    mode='lines',\n    name='Coronavirus deceased Trend Line'\n))\n\n#fig = add_trace(trendline)\n\nfig = fig.add_annotation( # add a text callout with arrow\n    text=\"Total Hospital beds availble in India\", x='2020-07-30', y=709250, arrowhead=4, ax=0,\n            ay=-40,showarrow=True\n)\n\nfig = fig.update_layout(\n    title=\"India COVID-19 \",\n    xaxis_title=\"Date\",\n    yaxis_title=\"Cases\"  \n)\n\n\nfig.show()","174eb9ee":"def base_seir_model(init_vals, params, t):\n    S_0, E_0, I_0, R_0 = init_vals\n    S, E, I, R = [S_0], [E_0], [I_0], [R_0]\n    alpha, beta, gamma = params\n    dt = t[1] - t[0]\n    for _ in t[1:]:\n        next_S = S[-1] - (beta*S[-1]*I[-1])*dt\n        next_E = E[-1] + (beta*S[-1]*I[-1] - alpha*E[-1])*dt\n        next_I = I[-1] + (alpha*E[-1] - gamma*I[-1])*dt\n        next_R = R[-1] + (gamma*I[-1])*dt\n        S.append(next_S)\n        E.append(next_E)\n        I.append(next_I)\n        R.append(next_R)\n    return [S,E, I,R]","a245ccbe":"# Define parameters\nt_max = 100\ndt = .1\nt = np.linspace(0, t_max, int(t_max\/dt) + 1)\nN = 10000\ninit_vals = 1 - 1\/N, 1\/N, 0, 0\nalpha = 0.2\nbeta = 1.75\ngamma = 0.5\nparams = alpha, beta, gamma\n# Run simulation\nresults = base_seir_model(init_vals, params, t)\n#results\n\nfig = go.Figure()\n#fig = px.scatter(testingHistory,x=\"time_stamp\", y=\"testing_no\")\n\nfig = fig.add_trace(go.Scatter(x=t, y=results[0],\n                    mode='lines',\n                    name='Susceptibles'))\nfig = fig.add_trace(go.Scatter(x=t, y=results[1],\n                    mode='lines',\n                    name='Exposed'))\nfig = fig.add_trace(go.Scatter(x=t, y=results[2],\n                    mode='lines',\n                    name='Infectious'))\nfig = fig.add_trace(go.Scatter(x=t, y=results[3],\n                    mode='lines',\n                    name='Recovered'))\nfig = fig.update_layout(\n    yaxis_title =\"Populaton Fraction\",\n    xaxis_title =\"Days\"  \n)\n\nfig.show()","fd2be3ec":"def seir_model_with_soc_dist(init_vals, params, t):\n    S_0, E_0, I_0, R_0 = init_vals\n    S, E, I, R = [S_0], [E_0], [I_0], [R_0]\n    alpha, beta, gamma, rho = params\n    dt = t[1] - t[0]\n    for _ in t[1:]:\n        next_S = S[-1] - (rho*beta*S[-1]*I[-1])*dt\n        next_E = E[-1] + (rho*beta*S[-1]*I[-1] - alpha*E[-1])*dt\n        next_I = I[-1] + (alpha*E[-1] - gamma*I[-1])*dt\n        next_R = R[-1] + (gamma*I[-1])*dt\n        S.append(next_S)\n        E.append(next_E)\n        I.append(next_I)\n        R.append(next_R)\n    return [S, E, I, R]","e1dbb704":"#sum((Hospitalbeds['NumRuralBeds_NHP18']+Hospitalbeds['NumUrbanBeds_NHP18']).tolist())\/1352600000","d27d8540":"# Define parameters\nt_max = 100\ndt = .1\nt = np.linspace(0, t_max, int(t_max\/dt) + 1)\nN = 10000\ninit_vals = 1 - 1\/N, 1\/N, 0, 0\nalpha = 0.2\nbeta = 1.75\ngamma = 0.5\nrho = 0.6\nparams = alpha, beta, gamma, rho\n# Run simulation\nresults = seir_model_with_soc_dist(init_vals, params, t)\n#results\n\nfig = go.Figure()\n\n'''Hospitalbeds = pd.read_csv('..\/input\/covid19-in-india\/HospitalBedsIndia.csv')\nHospitalbeds = Hospitalbeds[-1:]\ntotalBedsperpatient = 5\/1000\nfig = fig.add_shape(\n        # Line Horizontal\n            type=\"line\",\n            x0=0,\n            y0=totalBedsperpatient,\n            x1=t_max,\n            y1=totalBedsperpatient,\n            line=dict(\n                color=\"LightSeaGreen\",\n                width=4,\n                dash=\"dashdot\",\n            ),\n    )'''\n\n\n'''fig = fig.add_annotation( # add a text callout with arrow\n    text=\"Total Hospital beds availble in India\", x='2020-07-30', y=709250, arrowhead=4, ax=0,\n            ay=-40,showarrow=True\n)'''\n\nrho = 1\nparams = alpha, beta, gamma, rho\n# Run simulation\nresults = seir_model_with_soc_dist(init_vals, params, t)\n\n'''fig = fig.add_trace(go.Scatter(x=t, y=results[0],\n                    mode='lines',\n                    name='Susceptibles (\u03c1  = 1)'))'''\nfig = fig.add_trace(go.Scatter(x=t, y=results[1],\n                    mode='lines',\n                    name='Exposed (\u03c1  = 1)',\n                   line = dict(color='red', width=1, dash='dash')))\nfig = fig.add_trace(go.Scatter(x=t, y=results[2],\n                    mode='lines',\n                    name='Infectious (\u03c1  = 1)',\n                   line = dict(color='red', width=1, dash='dash')))\n'''fig = fig.add_trace(go.Scatter(x=t, y=results[3],\n                    mode='lines',\n                    name='Recovered (\u03c1  = 1)'))'''\n\n\nrho = 0.8\nparams = alpha, beta, gamma, rho\n# Run simulation\nresults = seir_model_with_soc_dist(init_vals, params, t)\n\n'''fig = fig.add_trace(go.Scatter(x=t, y=results[0],\n                    mode='lines',\n                    name='Susceptibles (\u03c1  = 0.8)'))'''\nfig = fig.add_trace(go.Scatter(x=t, y=results[1],\n                    mode='lines',\n                    name='Exposed (\u03c1  = 0.8)',\n                   line = dict(color='blue', width=1, dash='dash')))\nfig = fig.add_trace(go.Scatter(x=t, y=results[2],\n                    mode='lines',\n                    name='Infectious (\u03c1  = 0.8)',\n                   line = dict(color='blue', width=1, dash='dash')))\n'''fig = fig.add_trace(go.Scatter(x=t, y=results[3],\n                    mode='lines',\n                    name='Recovered (\u03c1  = 0.8)'))\n'''\nrho = 0.5\nparams = alpha, beta, gamma, rho\n# Run simulation\nresults = seir_model_with_soc_dist(init_vals, params, t)\n\n'''fig = fig.add_trace(go.Scatter(x=t, y=results[0],\n                    mode='lines',\n                    name='Susceptibles (\u03c1  = 0.5)'))'''\nfig = fig.add_trace(go.Scatter(x=t, y=results[1],\n                    mode='lines',\n                    name='Exposed (\u03c1  = 0.5)',\n                   line = dict(color='green', width=1)))\nfig = fig.add_trace(go.Scatter(x=t, y=results[2],\n                    mode='lines',\n                    name='Infectious (\u03c1  = 0.5)',\n                   line = dict(color='green', width=1)))\n'''fig = fig.add_trace(go.Scatter(x=t, y=results[3],\n                    mode='lines',\n                    name='Recovered (\u03c1  = 0.5)'))'''\n\nfig = fig.update_layout(\n    xaxis_title=\"Populaton Fraction\",\n    yaxis_title=\"Days\"  \n)\nfig.show()","49b19b6f":"def base_sird_model(init_vals, params, t):\n    S_0, E_0, I_0, R_0,D_0 = init_vals\n    S, E, I, R,D = [S_0], [E_0], [I_0], [R_0], [D_0]\n    alpha, beta, gamma, myu = params\n    dt = t[1] - t[0]\n    for _ in t[1:]:\n        next_S = S[-1] - (beta*S[-1]*I[-1])*dt\n        next_E = E[-1] + (beta*S[-1]*I[-1] - alpha*E[-1])*dt\n        next_I = I[-1] + (alpha*E[-1] - gamma*I[-1])*dt - (myu*I[-1])*dt\n        next_R = R[-1] + (gamma*I[-1])*dt\n        next_D = D[-1] + (myu*I[-1])*dt\n        S.append(next_S)\n        E.append(next_E)\n        I.append(next_I)\n        R.append(next_R)\n        D.append(next_D)\n    return [S,I,R,D]","0c7259ae":"# Define parameters\nt_max = 100\ndt = .1\nt = np.linspace(0, t_max, int(t_max\/dt) + 1)\nN = 10000\ninit_vals = 1 - 1\/N, 1\/N, 0, 0,0\nalpha = 0.2\nbeta = 1.75\ngamma = 0.5\nmyu = 0.05\nparams = alpha, beta, gamma,myu\n# Run simulation\nresults = base_sird_model(init_vals, params, t)\n#results\n\nfig = go.Figure()\n#fig = px.scatter(testingHistory,x=\"time_stamp\", y=\"testing_no\")\n\nfig = fig.add_trace(go.Scatter(x=t, y=results[0],\n                    mode='lines',\n                    name='Susceptibles'))\nfig = fig.add_trace(go.Scatter(x=t, y=results[1],\n                    mode='lines',\n                    name='Infectious'))\nfig = fig.add_trace(go.Scatter(x=t, y=results[2],\n                    mode='lines',\n                    name='Recovered'))\nfig = fig.add_trace(go.Scatter(x=t, y=results[3],\n                    mode='lines',\n                    name='Dead'))\nfig = fig.update_layout(\n    yaxis_title =\"Populaton Fraction\",\n    xaxis_title =\"Days\"  \n)\n\nfig.show()","706fa923":"def sird_model_with_soc_dist(init_vals, params, t):\n    S_0, E_0, I_0, R_0,D_0 = init_vals\n    S, E, I, R, D = [S_0], [E_0], [I_0], [R_0], [D_0]\n    alpha, beta, gamma, rho, myu = params\n    dt = t[1] - t[0]\n    for _ in t[1:]:\n        next_S = S[-1] - (rho*beta*S[-1]*I[-1])*dt\n        next_E = E[-1] + (rho*beta*S[-1]*I[-1] - alpha*E[-1])*dt\n        next_I = I[-1] + (alpha*E[-1] - gamma*I[-1])*dt\n        next_R = R[-1] + (gamma*I[-1])*dt\n        next_D = D[-1] + (myu*I[-1])*dt\n        S.append(next_S)\n        E.append(next_E)\n        I.append(next_I)\n        R.append(next_R)\n    return [S, I, R, D]","fb88678d":"# Define parameters\nt_max = 100\ndt = .1\nt = np.linspace(0, t_max, int(t_max\/dt) + 1)\nN = 10000\ninit_vals = 1 - 1\/N, 1\/N, 0, 0, 0\nalpha = 0.2\nbeta = 1.75\ngamma = 0.5\nrho = 0.6\nmyu = 0.05\nparams = alpha, beta, gamma, rho, myu\n# Run simulation\nresults = sird_model_with_soc_dist(init_vals, params, t)\n#results\n\nfig = go.Figure()\n\n'''Hospitalbeds = pd.read_csv('..\/input\/covid19-in-india\/HospitalBedsIndia.csv')\nHospitalbeds = Hospitalbeds[-1:]\ntotalBedsperpatient = 5\/1000\nfig = fig.add_shape(\n        # Line Horizontal\n            type=\"line\",\n            x0=0,\n            y0=totalBedsperpatient,\n            x1=t_max,\n            y1=totalBedsperpatient,\n            line=dict(\n                color=\"LightSeaGreen\",\n                width=4,\n                dash=\"dashdot\",\n            ),\n    )'''\n\n\n'''fig = fig.add_annotation( # add a text callout with arrow\n    text=\"Total Hospital beds availble in India\", x='2020-07-30', y=709250, arrowhead=4, ax=0,\n            ay=-40,showarrow=True\n)'''\n\nrho = 1\nparams = alpha, beta, gamma, rho, myu\n# Run simulation\nresults = sird_model_with_soc_dist(init_vals, params, t)\n\n'''fig = fig.add_trace(go.Scatter(x=t, y=results[0],\n                    mode='lines',\n                    name='Susceptibles (\u03c1  = 1)'))'''\nfig = fig.add_trace(go.Scatter(x=t, y=results[1],\n                    mode='lines',\n                    name='Infectious (\u03c1  = 1)',\n                   line = dict(color='red', width=1, dash='dash')))\nfig = fig.add_trace(go.Scatter(x=t, y=results[2],\n                    mode='lines',\n                    name='Recovered (\u03c1  = 1)',\n                   line = dict(color='red', width=1, dash='dash')))\nfig = fig.add_trace(go.Scatter(x=t, y=results[3],\n                    mode='lines',\n                    name='Dead (\u03c1  = 1)'))\n\n\nrho = 0.8\nparams = alpha, beta, gamma, rho, myu\n# Run simulation\nresults = sird_model_with_soc_dist(init_vals, params, t)\n\n'''fig = fig.add_trace(go.Scatter(x=t, y=results[0],\n                    mode='lines',\n                    name='Susceptibles (\u03c1  = 0.8)'))'''\nfig = fig.add_trace(go.Scatter(x=t, y=results[1],\n                    mode='lines',\n                    name='Infectious (\u03c1  = 0.8)',\n                   line = dict(color='blue', width=1, dash='dash')))\nfig = fig.add_trace(go.Scatter(x=t, y=results[2],\n                    mode='lines',\n                    name='Recovered (\u03c1  = 0.8)',\n                   line = dict(color='blue', width=1, dash='dash')))\nfig = fig.add_trace(go.Scatter(x=t, y=results[3],\n                    mode='lines',\n                    name='Dead (\u03c1  = 0.8)'))\n\nrho = 0.5\nparams = alpha, beta, gamma, rho, myu\n# Run simulation\nresults = sird_model_with_soc_dist(init_vals, params, t)\n\n'''fig = fig.add_trace(go.Scatter(x=t, y=results[0],\n                    mode='lines',\n                    name='Susceptibles (\u03c1  = 0.5)'))'''\nfig = fig.add_trace(go.Scatter(x=t, y=results[1],\n                    mode='lines',\n                    name='Infectious (\u03c1  = 0.5)',\n                   line = dict(color='green', width=1)))\nfig = fig.add_trace(go.Scatter(x=t, y=results[2],\n                    mode='lines',\n                    name='Recovered (\u03c1  = 0.5)',\n                   line = dict(color='green', width=1)))\nfig = fig.add_trace(go.Scatter(x=t, y=results[3],\n                    mode='lines',\n                    name='Dead (\u03c1  = 0.5)'))\n\nfig = fig.update_layout(\n    xaxis_title=\"Populaton Fraction\",\n    yaxis_title=\"Days\"  \n)\nfig.show()","54eeda3a":"display(Markdown(\"** STATE WISE CONFIRMED, DEATH AND CURED CASES of 2019-nCoV**\"))\nstate_cases.sort_values('Confirmed', ascending= False).fillna(0).style.background_gradient(cmap='YlOrBr',subset=[\"Confirmed\"])\\\n                        .background_gradient(cmap='Reds',subset=[\"Deaths\"])\\\n                        .background_gradient(cmap='Greens',subset=[\"Cured\"])\\\n                        .background_gradient(cmap='Blues',subset=[\"Active\"])\\\n                        .background_gradient(cmap='Purples',subset=[\"Death Rate (per 100)\"])\\\n                        .background_gradient(cmap='Greens',subset=[\"Cure Rate (per 100)\"])","de1e0a61":"states = []\nactive = []\nconfirmed = []\ndeaths = []\nfor index in range(len(indiaData['statewise'])):\n    if index == 0:\n        continue\n    states.append(str(re.sub(',','',indiaData['statewise'][index]['state'])))\n    active.append(int(re.sub(',','',indiaData['statewise'][index]['active'])))\n    confirmed.append(int(re.sub(',','',indiaData['statewise'][index]['confirmed'])))\n    deaths.append(int(re.sub(',','',indiaData['statewise'][index]['deaths'])))\n    \nsates = state_cases\nindia_map = pd.DataFrame()\n\n\n\n\nindia_map['States'] = states\nindia_map['lat'] = india_map['States'].apply(lambda x : statelat(x))\nindia_map['long'] = india_map['States'].apply(lambda x : statelong(x))\nindia_map['Confirmed'] = confirmed\nindia_map['Recovered'] = list(np.array(confirmed) - np.array(active))\nindia_map['Deaths'] = deaths\n\n","81b9110b":"indiaMap = folium.Map(location=[23,80], tiles=\"Stamen Toner\", zoom_start=4)\n\nfor lat, lon, value1,value2,value3, name in zip(india_map['lat'], india_map['long'], india_map['Confirmed'],india_map['Recovered'],india_map['Deaths'], india_map['States']):\n    folium.CircleMarker([lat, lon],\n                        radius= (int((np.log(value1+1.00001))))*4,\n                        popup = ('<strong>States<\/strong>: ' + str(name).capitalize() + '<br>'\n                                '<strong>Confirmed Cases<\/strong>: ' + str(value1) + '<br>'),\n                        color='#ff6600',\n                        \n                        fill_color='#ff8533',\n                        fill_opacity=0.5 ).add_to(indiaMap)\n    folium.CircleMarker([lat, lon],\n                        radius= (int((np.log(value2+1.00001))))*4,\n                        popup = ('<strong>States<\/strong>: ' + str(name).capitalize() + '<br>'\n                                '<strong>Confirmed Recovered<\/strong>: ' + str(value2) + '<br>'),\n                        color='#008000',\n                        \n                        fill_color='#008000',\n                        fill_opacity=0.4 ).add_to(indiaMap)\n    folium.CircleMarker([lat, lon],\n                        radius= (int((np.log(value3+1.00001))))*4,\n                        popup = ('<strong>States<\/strong>: ' + str(name).capitalize() + '<br>'\n                                '<strong>Confirmed Deaths<\/strong>: ' + str(value3) + '<br>'),\n                        color='#0000A0',\n                        \n                        fill_color='#0000A0',\n                        fill_opacity=0.4 ).add_to(indiaMap)\nindiaMap","021f5369":"df = pd.read_csv('\/kaggle\/input\/covid19-in-india\/covid_19_india.csv')\ndf['Date'] = pd.to_datetime(df['Date'],format='%d\/%m\/%y')\ndf['Date'] = df['Date'].dt.date\ndf.rename(columns={'Date':'date','State\/UnionTerritory':'state','ConfirmedIndianNational':'confirmed_in',\\\n                   'ConfirmedForeignNational':'confirmed_fr'}, inplace=True)\ndf.drop(['Sno','Time'],axis=1,inplace=True)\ndf['state'] = df.apply(lambda x: 'Nagaland' if x['state']=='Nagaland#' else 'Jharkhand' if x['state']=='Jharkhand#' else x['state'], axis=1)\ndf = df[df['state']!='Unassigned']\ndf.reset_index(inplace=True)\ndf_states = df.copy()\ndef add_days(df,new_col,basis):\n    states = {}\n    df[new_col] = 0\n    for i in range(len(df_states)):\n        if df_states.loc[i,'state'] in states:\n            df_states.loc[i,new_col] = (df_states.loc[i,'date'] - states[df_states.loc[i,'state']]).days\n        else:\n            if df_states.loc[i,basis] > 0:\n                states[df_states.loc[i,'state']] = df_states.loc[i,'date']\n    return df\ndf_states = add_days(df_states,'day_since_inf','Confirmed')\ndf_states = add_days(df_states,'day_since_death','Deaths')\ndf_states = add_days(df_states,'day_since_cure','Cured')\n\n\n\nfig = px.line(df_states,x='day_since_inf',y='Confirmed',color='state',title='Cumulative cases over time')\nfig.update_layout(template=\"simple_white\")\nfig.update_xaxes(title_text='Days since first infection was reported')\nfig.update_yaxes(title_text='No. of Confirmed cases')\nfig.show()\n\n\nfig = px.line(df_states,x='day_since_death',y='Deaths',color='state',title='Cumulative deaths over time')\nfig.update_layout(template=\"simple_white\")\nfig.update_xaxes(title_text='Days since first death was reported')\nfig.update_yaxes(title_text='No. of Confirmed deaths')\nfig.show()\n\nfig = px.line(df_states,x='day_since_cure',y='Cured',color='state',title='Cumulative recoveries over time')\nfig.update_layout(template=\"simple_white\")\nfig.update_xaxes(title_text='Days since first recovery was reported')\nfig.update_yaxes(title_text='No. of Confirmed recoveries')\nfig.show()\n","61191c76":"def add_daily_measures(df):\n    has_state=False\n    if 'state' in df.columns:\n        states = []\n        has_state = True\n    df.loc[0,'Daily Cases'] = df.loc[0,'Confirmed']\n    df.loc[0,'Daily Deaths'] = df.loc[0,'Deaths']\n    df.loc[0,'Daily Cured'] = df.loc[0,'Cured']\n    for i in range(1,len(df)):\n        if has_state:\n            if df.loc[i,'state'] in states:\n                df.loc[i,'Daily Cases'] = df.loc[i,'Confirmed'] - df.loc[i-1,'Confirmed']\n                df.loc[i,'Daily Deaths'] = df.loc[i,'Deaths'] - df.loc[i-1,'Deaths'] \n                df.loc[i,'Daily Cured'] = df.loc[i,'Cured'] - df.loc[i-1,'Cured']\n            else:\n                states.append(df.loc[i,'state'])\n                df.loc[i,'Daily Cases'] = df.loc[i,'Confirmed']\n                df.loc[i,'Daily Deaths'] = df.loc[i,'Deaths']\n                df.loc[i,'Daily Cured'] = df.loc[i,'Cured']\n        else:\n            df.loc[i,'Daily Cases'] = df.loc[i,'Confirmed'] - df.loc[i-1,'Confirmed']\n            df.loc[i,'Daily Deaths'] = df.loc[i,'Deaths'] - df.loc[i-1,'Deaths'] \n            df.loc[i,'Daily Cured'] = df.loc[i,'Cured'] - df.loc[i-1,'Cured']\n    #Make the first row as 0 because we don't know the previous value\n    df.loc[0,'Daily Cases'] = 0\n    df.loc[0,'Daily Deaths'] = 0\n    df.loc[0,'Daily Cured'] = 0\n    return df","67f8a5cf":"df_states.sort_values(by=['state','date'],inplace=True)\ndf_states.reset_index(inplace=True,drop=True)\ndf_states_daily = add_daily_measures(df_states)\ndf_states_daily.fillna(0,inplace=True)\n\nstates = df_states_daily['state'].unique().tolist()\ndf_roll = pd.DataFrame()\nfor state in states:\n    df_state = df_states_daily[df_states_daily['state']==state]\n    df_state['roll_avg_c'] = np.round(df_state['Daily Cases'].rolling(7).mean())\n    df_state['roll_avg_d'] = np.round(df_state['Daily Deaths'].rolling(7).mean())\n    df_state['roll_avg_r'] = np.round(df_state['Daily Cured'].rolling(7).mean())\n    df_roll = df_roll.append(df_state,ignore_index=True)\n    \nfig = px.line(df_roll,x='day_since_inf',y='roll_avg_c',color='state',title='Daily cases over time')\nfig.update_layout(template=\"simple_white\")\nfig.update_xaxes(title_text='Days since first infection was reported')\nfig.update_yaxes(title_text='7-Day Rolling average')\nfig.show()\n\nfig = px.line(df_roll,x='day_since_inf',y='roll_avg_d',color='state',title='Daily deaths over time')\nfig.update_layout(template=\"simple_white\")\nfig.update_xaxes(title_text='Days since first infection was reported')\nfig.update_yaxes(title_text='7-Day Rolling average')\nfig.show()\n\nfig = px.line(df_roll,x='day_since_inf',y='roll_avg_r',color='state',title='Daily recoveries over time')\nfig.update_layout(template=\"simple_white\")\nfig.update_xaxes(title_text='Days since first infection was reported')\nfig.update_yaxes(title_text='7-Day Rolling average')\nfig.show()","79c5f4d3":"state_cases.sort_values('Confirmed', ascending= False).head(15).style.background_gradient(cmap='YlOrBr',subset=[\"Confirmed\"])\\\n                        .background_gradient(cmap='Reds',subset=[\"Deaths\"])\\\n                        .background_gradient(cmap='Greens',subset=[\"Cured\"])\\\n                        .background_gradient(cmap='Blues',subset=[\"Active\"])\\\n                        .background_gradient(cmap='Purples',subset=[\"Death Rate (per 100)\"])\\\n                        .background_gradient(cmap='Greens',subset=[\"Cure Rate (per 100)\"])\n","13b3bdb9":"Hospitalbeds = pd.read_csv('..\/input\/covid19-in-india\/HospitalBedsIndia.csv')\nHospitalbeds = Hospitalbeds[:-1]\n\n\nstates = []\nactive = []\n\nfor index in range(len(indiaData['statewise'])):\n    if index == 0:\n        continue\n    states.append(str(re.sub(',','',indiaData['statewise'][index]['state'])))\n    active.append(int(re.sub(',','',indiaData['statewise'][index]['active'])))\n\nindiaActive = pd.DataFrame()  \nindiaActive['States'] = states\nindiaActive['active'] = active\n\n\n\nstate_cases['State\/UnionTerritory'] = state_cases['State\/UnionTerritory'].apply(lambda x: re.sub(' and ',' & ',x))\nactivelist = []\nfor state in Hospitalbeds['State\/UT'].tolist():\n    try:\n        activelist.append(indiaActive[indiaActive['States'] == state]['active'].values[0])\n    except:\n        try:\n            activelist.append(state_cases[state_cases['State\/UnionTerritory'] == state]['Active'].values[0])\n        except:\n            activelist.append(0)\n\n    \nHospitalbeds['active'] = activelist\n\nfig = go.Figure(data=[go.Bar(\n            y= (Hospitalbeds['NumRuralBeds_NHP18']+Hospitalbeds['NumUrbanBeds_NHP18']).tolist(), \n            x=Hospitalbeds['State\/UT'].tolist(),\n            name='Beds availible in states',\n            marker_color='#000000'),\n            \n            go.Bar(\n            y=Hospitalbeds['active'].tolist(), \n            x=Hospitalbeds['State\/UT'].tolist(),\n            name='Positve Cases',\n            marker_color='#FF0000')\n                     ])\n\n# Change the bar mode\nfig.update_layout(barmode='stack', template=\"ggplot2\", title_text = '<b>Sample Tested for COVID-19 in India (Day Wise)<\/b>',\n                  font=dict(family=\"Arial, Balto, Courier New, Droid Sans\",color='black'))\nfig.show()","649f7b9e":"medicalFacility = pd.read_csv('..\/input\/indian-medical-facility-dataset\/phcdoclabasstpharma2012mar.csv')\nmedicalFacility = medicalFacility.head(len(medicalFacility)-1)\nfig = go.Figure(data=[go.Bar(\n            y= (medicalFacility['Number of PHCs functioning with 4+ doctors']).tolist(), \n            x=medicalFacility['State\/UT'].tolist(),\n            name='Number of PHCs functioning with 4+ doctors',\n            marker_color='#00ff00'),\n            \n            go.Bar(\n            y= (medicalFacility['Number of PHCs functioning with 3 doctors']).tolist(), \n            x=medicalFacility['State\/UT'].tolist(),\n            name='Number of PHCs functioning with 3 doctors',\n            marker_color='#7bff00'),\n                \n            go.Bar(\n            y= (medicalFacility['Number of PHCs functioning with 2 doctors']).tolist(), \n            x=medicalFacility['State\/UT'].tolist(),\n            name='Number of PHCs functioning with 2 doctors',\n            marker_color='#e5ff00'),\n                \n            go.Bar(\n            y= (medicalFacility['Number of PHCs functioning with 1 doctor']).tolist(), \n            x=medicalFacility['State\/UT'].tolist(),\n            name='Number of PHCs functioning with 1 doctors',\n            marker_color='#ffb300'),\n                \n            go.Bar(\n            y= (medicalFacility['Number of PHCs functioning without doctor']).tolist(), \n            x=medicalFacility['State\/UT'].tolist(),\n            name='Number of PHCs functioning without doctor',\n            marker_color='#ff2f00')\n                     ])\n\n# Change the bar mode\nfig.update_layout(barmode='stack', template=\"ggplot2\", title_text = '<b>Sample Tested for COVID-19 in India (Day Wise)<\/b>',\n                  font=dict(family=\"Arial, Balto, Courier New, Droid Sans\",color='black'))\nfig.show()","6f67bb54":"def makeitstring(line):\n    newLine = []\n    for x in line:\n        count = True\n        y = ''\n        for l in str(x):\n            if l == '.' and count == True:\n                count = False\n                y = y+l\n            elif l == '.' and count == False:\n                continue\n            else:\n                y = y+l\n                \n        newLine.append(str(y))\n        \n    return newLine\n\ndef makeitfloat(line):\n    newLine = []\n    for x in line:\n        newLine.append(float(x))\n        \n    return newLine\n","0f35f9c5":"medicalFacility = pd.read_csv('..\/input\/indian-medical-facility-dataset\/geocode_health_centre.csv')\n\n\nmedicalFacility['ActiveFlag_C'] = medicalFacility['ActiveFlag_C'].apply(lambda x: 1 if x=='Y' else 0)\n\n#medicalFacility['Latitude'] = makeitfloat(makeitstring(medicalFacility['Latitude']))\n#medicalFacility['Longitude'] = makeitfloat(makeitstring(medicalFacility['Latitude']))\n\nfig = px.density_mapbox(medicalFacility, lat='Latitude', lon='Longitude', z='ActiveFlag_C', radius=1,\n                        center=dict(lat=20.05, lon=75.9), zoom=5,\n                        mapbox_style=\"stamen-terrain\")\n\nfig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0},    width=1100,height=1100)\n\n#fig.update_geos()\nfig.show()","c35b3eca":"## System When there is NO SOCIAL DISTANCING","9048c171":"# States and Trends","5b520f33":"# SEIR \nCOVID-19 has been spreading rapidly around the world. Italy has now gone into lock down, California has declared a state of emergency, schools and universities around the globe have canceled in person classes and events, and businesses have reduced travel and pushed work from home policies. All of this is designed to slow the spread of the disease. These efforts are broadly referred to as** social distancing**.\n\n![](https:\/\/miro.medium.com\/max\/1056\/1*dXCHv_pSYiMG90efXiFNPQ.png)\n![](https:\/\/miro.medium.com\/max\/922\/1*K0qnrBZup_ToQeODajV-aw.png)\nEquation (1) is the change in people susceptible to the disease and is moderated by the number of infected people and their contact with the infected. Equation (2) gives the people who have been exposed to the disease. It grows based on the contact rate and decreases based on the incubation period whereby people then become infected.\n\nEquation (3) gives us the change in infected people based on the exposed population and the incubation period. It decreases based on the infectious period, so the higher \u03b3 is, the more quickly people die\/recover and move on to the final stage in Equation (4). The final equation, number (5), is a constraint that indicates there are no birth\/migration effects in the model; we have a fixed population from beginning to end.\n\n    Incubation period = 5 days -> \u03b1 = 0.2\n    R0 = 3.5\n    \n    \u03b1 is the inverse of the incubation period (1\/t_incubation)\n    \u03b2 is the average contact rate in the population\n    \u03b3 is the inverse of the mean infectious period (1\/t_infectious)\n\n![](https:\/\/miro.medium.com\/max\/1296\/1*kc4-Bv2nzIvb9xG6ELHuzA.png)\n\n\nFor any system of ODE\u2019s, we need to provide initial values. We\u2019ll use normalized population values for our S_0, E_0, etc. So if we assume we have 10k people in our population, and we begin with one exposed person and the remaining 9,999 susceptible,\n","05b9bbf6":"\n\n\n# How Kerala Flattened Curve\nKerala will most probably become the first state in India to flatten the COVID-19 curve. It is a huge turnaround for the coastal state, which reported the first coronavirus case in India on January 30. The patient was a student who had returned from ground zero of the virus -- Wuhan in China. By February 3, two more students who had returned from Wuhan, and were in home quarantine, tested positive.\n\nBut the spread was largely contained until March 8, when a family of three that returned from Italy to Pathanamthitta, tested positive. Five of their primary contacts were infected, including their elderly parents and a nurse treating them. However, all have recovered and are back home.\n\nA majority of the cases in Kerala are people who returned from abroad - which is around 232.\n\nFrom releasing exhaustive route maps of positive cases, to mobile tracking applications of people in quarantine, to massive mobilisation of police force to enforce the lockdown as well as essential services,  Kerala has been shown itself to be firmly in control of the global pandemic. Over 30,000 health workers, including Accredited Social Health Activists (ASHA) workers intensified their follow-up with families in isolation.\n\nWith Rapid testing and exhaustive route maps kerala  was able to achive a mile stone but sadly this journy is far from over!! ","b1efd955":"## System with SOCIAL DISTANCING \nSocial distancing includes avoiding large gatherings, physical contact, and other efforts to mitigate the spread of infectious disease. According to our model, the term this is going to impact is our contact rate, \u03b2.\n\nLet\u2019s introduce a new value, \u03c1, to capture our social distancing effect. This is going to be a constant term between 0\u20131, where 0 indicates everyone is locked down and quarantined while 1 is equivalent to our base case above. To introduce this into our model, we\u2019ll modify Equations (1) and (2) above by multiplying this with our \u03b2 and writing Equations (1') and (2').\n\n\nIf we set \u03c1 to 1, 0.8, and 0.5, we can visualize the flattening effect as we increase our efforts to contain the disease through simple, every day actions.\n\n","59b6449c":"# India: A State Level Analysis","b3db6ec5":"## System When there is NO SOCIAL DISTANCING","416fc9f6":"### Final observation:\nFrom the above data analysis I can see which country has better odds at survival of COVID-19. The data is constently changing so the code should be able to analysis the data with these changes. This also means any country can take uphand. using visualisation I could compair between the countries and correlation of each facture with each other. If the number new cases reduces and the total recovary increases then that country is winning the battle against COVID-19.","9b23a66a":"# Prediction \n\n**The conditons for given for prediction**\n\n### <font color= 'red'>IF SAME SITUATAION WITHOUT ANY CHANGES CONTINUES HOW IN HOW MAY DAYS MEDICAL SYSTEM WILL BE EXHAUSTED??<\/font>\n\n*Note- This a wild case scenario!! just a worst dream!!!!!*\n\n\n<font color= 'green'>Findings: <\/font>\n\n\n<font color= 'blue'>It is been obsereved that if the infectious rate ie r0 = 2.24 as maintined as it within the end of August 2020 all the beds in india fill be filled with covid 19 patient. But by looking into Italy Spain and US when infection spreads into stage 4 and 5 infectivity increases very high so convergance can be expected before that<\/font>","173de379":"# SIRD Model\n\n![](https:\/\/www.researchgate.net\/profile\/Aboubakary_Diakhaby\/publication\/280141961\/figure\/fig1\/AS:669979791863820@1536747038195\/The-SIRD-model-flow-chart-Basic-model-with-death-and-the-recovered-becoming-susceptible.ppm)\n\nThe Susceptible-Infected-Recovered-Deceased-Model differentiates between Recovered (meaning specifically individuals having survived the disease and now immune) and Deceased.This model uses the following system of differential equations: \n![](https:\/\/wikimedia.org\/api\/rest_v1\/media\/math\/render\/svg\/1211c5146940bacb8a0df97780330a2599eb4625)","54a16ccf":"![](https:\/\/static01.nyt.com\/images\/2020\/03\/22\/science\/11SCI-VIRUS-CURVE1\/11SCI-VIRUS-TRACKER1-superJumbo.jpg)","c36cb2fd":"# Task to be done\n![](https:\/\/storage.googleapis.com\/twg-content\/documents\/dothefive.gif)\n    1. Effect of lockdown and isolation in India v\/s world wide\n    2. PPE reqquired India v\/s availible\n    3. Play Ground Simulation of COVID-19\n\n\n## Upvote and Comment to know about further updates\n\n![](https:\/\/thumbs.gfycat.com\/AlienatedHappygoluckyInvisiblerail-size_restricted.gif)\n","a729c639":"# India","40679f93":"# <font color = 'blue'> <center>Live COVID -19 Tracking World and India <\/center><\/font>\n\n## <font color = 'red'> FIRST <\/font>\n![](https:\/\/www.who.int\/images\/default-source\/searo---images\/emergencies\/covid19\/how-to-protect\/covid-how-to-protect-yourself-02.gif?sfvrsn=c78ba713_2)\n\n## <font color = 'green'> THEN <\/font>\n![](https:\/\/pbs.twimg.com\/media\/ES_cfEWWkAAHnCr.jpg)\nThe 2019\u201320 coronavirus pandemic is an ongoing pandemic of coronavirus disease 2019 (COVID-19) caused by severe acute respiratory syndrome coronavirus 2 (SARS-CoV-2). The outbreak was identified in Wuhan, China, in December 2019, declared to be a Public Health Emergency of International Concern on 30 January 2020, and recognized as a pandemic by the World Health Organization on 11 March 2020. As of 16 April 2020, more than 2.1 million cases of COVID-19 have been reported in 210 countries and territories, resulting in more than 140,000 deaths. More than 532,000 people have recovered, although there may be a possibility of relapse or reinfection. The deaths per diagnosed cases varies significantly between countries.\n\nThe virus is primarily spread between people during close contact, often via small droplets produced by coughing, sneezing, or talking. While these droplets are produced when breathing out, they usually fall to the ground or onto surfaces rather than being infectious over long distances. People may also become infected by touching a contaminated surface and then touching their eyes, nose or mouth. The virus can survive on surfaces, up to 72 hours on some It is most contagious during the first three days after the onset of symptoms, although spread may be possible before symptoms appear and in later stages of the disease Common symptoms include fever, cough and shortness of breath. Complications may include pneumonia and acute respiratory distress syndrome.The time from exposure to onset of symptoms is typically around five days, but may range from two to fourteen days There is no known vaccine or specific antiviral treatment. Primary treatment is symptomatic and supportive therapy.\n\nRecommended preventive measures include hand washing, covering one's mouth when coughing, maintaining distance from other people, and monitoring and self-isolation for people who suspect they are infected. Authorities worldwide have responded by implementing travel restrictions, quarantines, curfews and stay-at-home orders, workplace hazard controls, and facility closures. \n","9d615ccd":"## India: Cases vs Recoverd vs Deseased\n","7f11ec8a":"# India Testing History\n India\u2019s tally of Covid-19-positive cases has reached 9,240 and the number of fatalities currently stands at 331. The country has so far tested 179,374 samples (as on 11 April) \u2014 implying 4.7 per cent of the samples tested have been found to be positive for Covid-19.\n\nIndia is constantly upgrading its testing capabilities to keep a check on the spread of coronavirus infections in the country. The number of tests conducted has grown almost four times since April 1 to an average 15,000 daily in the past five days.\n\n While Maharashtra has conducted the highest number of tests on an absolute basis, Delhi tops the charts with highest Covid-19 tests on a per-capita basis. Delhi has so far conducted 11,709 tests, which translates into 7 tests per 10,000 population. It is followed by Kerala and Rajasthan, with ratios of 4.2 and 3.6, respectively, on the same metrics.\n\nWest Bengal and Uttar Pradesh have the lowest density, with 0.5 and 0.3 Covid-19 tests per 10,000 population. Overall, India has a ratio of 1.3 tests per 10,000 population.","eb54c835":"## System with SOCIAL DISTANCING \nSocial distancing includes avoiding large gatherings, physical contact, and other efforts to mitigate the spread of infectious disease. According to our model, the term this is going to impact is our contact rate, \u03b2.\n\nLet\u2019s introduce a new value, \u03c1, to capture our social distancing effect. This is going to be a constant term between 0\u20131, where 0 indicates everyone is locked down and quarantined while 1 is equivalent to our base case above. To introduce this into our model, we\u2019ll modify Equations (1) and (2) above by multiplying this with our \u03b2 and writing Equations (1') and (2').\n\n\nIf we set \u03c1 to 1, 0.8, and 0.5, we can visualize the flattening effect as we increase our efforts to contain the disease through simple, every day actions.\n\n","fc9838f4":"# CNN Detector using X-Ray - Upcoming","c4d865bc":"# Maximum Medical Fecility avalible per State in India","2b8441a8":"# Meidcal Facility Indian Heatmap ","1e544423":"# India vs South Korea Testing Pattern\n South Korea immediately began testing hundreds of thousands of asymptomatic people, including at drive-through centres. South Korea employed a central tracking app, Corona 100m, that publicly informs citizens of known cases within 100 metres of where they are. Surprisingly, a culture that has often rebelliously rejected authoritarianism has embraced intrusive measures. \n \nBut in india Testing must be ramped up soon which is an essential methodology to stop coronavirus spreading. It can be achieved by creating drive in tests or booth tests which can safe gaurd medical professionals and general public from a clinical spread"}}