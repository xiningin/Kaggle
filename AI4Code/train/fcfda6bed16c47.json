{"cell_type":{"8e292790":"code","7ddc8dcc":"code","925c2bd8":"code","647efacd":"code","ecc6db71":"code","503dcf40":"code","a9efc52f":"code","62aabe3a":"code","f65118bf":"code","9214b2aa":"code","38865ba5":"code","d890afe0":"code","4f7d9272":"code","353228e6":"code","f96248f2":"code","6b69fd71":"code","bff9ed66":"code","082995b1":"code","98df3fa7":"code","ed042aa4":"markdown"},"source":{"8e292790":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import StratifiedKFold, KFold\n\nimport xgboost as xgb\nimport lightgbm as lgbm\nimport catboost as cb\n\nnp.random.seed(42)","7ddc8dcc":"train_df = pd.read_csv('..\/input\/train.csv')\ntest_df = pd.read_csv('..\/input\/test.csv')\n\ntrain_df.shape, test_df.shape","925c2bd8":"train_df.head()","647efacd":"used_columns = ['Pclass', 'Name', 'Sex', 'SibSp', 'Parch', 'Ticket', 'Fare', 'Embarked']","ecc6db71":"y_train = train_df[['Survived']]\ny_train.shape","503dcf40":"X_all = train_df[used_columns].append(test_df[used_columns])\nX_all.shape","a9efc52f":"X_all.isna().sum()","62aabe3a":"X_all['Embarked'].value_counts()","f65118bf":"X_all['Embarked'].fillna('S', inplace=True)\nX_all['Fare'].fillna(X_all['Fare'].median(), inplace=True)","9214b2aa":"X_all['Title'] = X_all['Name'].str.extract(' ([A-Za-z]+)\\.')\nX_all['Title'] = X_all['Title'].replace(['Ms', 'Mlle'], 'Miss')\nX_all['Title'] = X_all['Title'].replace(['Mme', 'Countess', 'Lady', 'Dona'], 'Mrs')\nX_all['Title'] = X_all['Title'].replace(['Dr', 'Major', 'Col', 'Sir', 'Rev', 'Jonkheer', 'Capt', 'Don'], 'Mr')","38865ba5":"# X_all = pd.concat([X_all, pd.get_dummies(X_all[['Sex', 'Embarked']])], axis=1)\nX_all[\"Sex\"] = X_all[\"Sex\"].map({\"male\": 1, \"female\": 0}).astype(int)    \nX_all[\"Embarked\"] = X_all[\"Embarked\"].map({\"S\": 1, \"C\": 2, \"Q\": 3}).astype(int)    \nX_all['Title'] = X_all['Title'].map({'Mr': 0, 'Miss': 1, 'Mrs': 2, 'Master': 3}).astype(int)   ","d890afe0":"X_all['TicketNumber'] = X_all['Ticket'].str.split()\nX_all['TicketNumber'] = X_all['TicketNumber'].str[-1]\nX_all['TicketNumber'] = LabelEncoder().fit_transform(X_all['TicketNumber'])","4f7d9272":"X_all.head()","353228e6":"X_all.drop(['Name', 'Ticket'], axis=1, inplace=True)\nX_all.head()","f96248f2":"X_all['FamilySize'] = X_all['SibSp'] + X_all['Parch'] + 1\nX_all['IsAlone'] = X_all['FamilySize'].apply(lambda x: 1 if x == 1 else 0)\nX_all.head()","6b69fd71":"X_train = X_all[0:y_train.shape[0]]\nX_test = X_all[y_train.shape[0]:]\nX_train.shape, y_train.shape, X_test.shape","bff9ed66":"y_train = np.ravel(y_train)","082995b1":"%%time\n\npars = {\n    'colsample_bytree': 1,                 \n    'learning_rate': 0.05,\n    'max_depth': 5,\n    'subsample': 1,\n    'objective': 'binary:logistic',\n}\n\nkf = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n\nxgb_models = []\nfor train_index, val_index in kf.split(X_train, y_train):\n    train_X = X_train.iloc[train_index]\n    val_X = X_train.iloc[val_index]\n    train_y = y_train[train_index]\n    val_y = y_train[val_index]\n    xgb_train = xgb.DMatrix(train_X, train_y)\n    xgb_eval = xgb.DMatrix(val_X, val_y)\n    xgb_model = xgb.train(pars,\n                  xgb_train,\n                  num_boost_round=200,\n                  evals=[(xgb_train, 'train'), (xgb_eval, 'val')],\n                  verbose_eval=10,\n                  early_stopping_rounds=20\n                 )\n    xgb_models.append(xgb_model)\n\n    \naccuracy_score(y_train, np.round(np.sum([xgb_model.predict(xgb.DMatrix(X_train), ntree_limit=xgb_model.best_iteration) for xgb_model in xgb_models],axis=0) \/ 5).astype(int))","98df3fa7":"submission = pd.DataFrame(\n    {\n        'PassengerId': test_df['PassengerId'], \n        'Survived': np.round(np.sum([xgb_model.predict(xgb.DMatrix(X_test), ntree_limit=xgb_model.best_iteration) for xgb_model in xgb_models],axis=0) \/ 5).astype(int)\n    }\n)\nsubmission.to_csv(\"submission_xgboost.csv\", index=False)\n","ed042aa4":"### XGBoost"}}