{"cell_type":{"f0673669":"code","5ab70991":"code","f5137b40":"code","116bf4ff":"code","cf479c6d":"code","efec453f":"code","d692dbc5":"code","d110641e":"code","9bae17ef":"code","85c2e199":"code","9f98d7e4":"code","2c9524ab":"code","3e6fbefb":"code","6794c960":"code","e77d8820":"code","f25fe781":"code","d15c4e00":"code","4d2e8cdd":"code","75b4c0d5":"code","ad098ae9":"code","0ac49303":"code","2a058663":"code","8646992c":"code","480082bb":"code","e4149f74":"code","5034f7f9":"code","67eff112":"markdown","cf16f594":"markdown","be81f487":"markdown","39cb55f9":"markdown","25de9f12":"markdown","69169361":"markdown","6f45f85e":"markdown"},"source":{"f0673669":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5ab70991":"# import libraries\n\nimport seaborn as sns\nimport sklearn","f5137b40":"from sklearn.datasets import load_boston","116bf4ff":"boston=load_boston()","cf479c6d":"type(boston)","efec453f":"dir(boston)","d692dbc5":"boston.DESCR","d110641e":"boston.data[0:5]","9bae17ef":"boston.feature_names","85c2e199":"boston.filename","9f98d7e4":"boston.target\n# this is our target dataset which we have to predict","2c9524ab":"# making dataframe from boston.data\n\ndf=pd.DataFrame(boston.data)","3e6fbefb":"# Renaming column names with feature_names of boston data\ndf.columns=boston.feature_names","6794c960":"df.head()","e77d8820":"df['target']=boston.target","f25fe781":"df.head(3)","d15c4e00":"# Extracting dependent and independent variables\n\nX=df.drop('target',axis=1)\ny=df.target","4d2e8cdd":"from sklearn.preprocessing import StandardScaler\nss=StandardScaler()","75b4c0d5":"# Scaling input data\nX=ss.fit_transform(X)","ad098ae9":"from sklearn.model_selection import train_test_split\n\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.25)","0ac49303":"from sklearn.linear_model import Ridge","2a058663":"ridge_model=Ridge(alpha=0.5,solver='auto')","8646992c":"ridge_model.fit(X_train,y_train)","480082bb":"# model trainning score\nridge_model.score(X_train,y_train)","e4149f74":"# model test score\nridge_model.score(X_test,y_test)","5034f7f9":"# defining prediction vector\ny_pred=ridge_model.predict(X_test)","67eff112":"This was a simple python implementation of Ridge regression.","cf16f594":"Ridge regression is a regularization technique that performs L2 regularization. \nIt modifies the loss function by adding the penalty (shrinkage quantity) equivalent to the square of the magnitude of coefficients.\n\nit is also known as Tikhonov regularization\n\nIn simple terms it is an improvement of Linear Regression.","be81f487":"Now we will try to print each one of them one by one","39cb55f9":"It is a bunch of several datasets as we can see in the output above, now we will try to print each attributes of this bunch, see below codes","25de9f12":"feature_names printed above are basically column names, we will assign these column names after defining our dataframe","69169361":"Here, Value of alpha (0.5) denotes the strength of regularisation.","6f45f85e":"We will use inbuilt data of sklearn libraries \"boston\"\nBelow we are going to import and load this dataset from sklearn"}}