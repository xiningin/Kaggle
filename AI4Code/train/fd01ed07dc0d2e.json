{"cell_type":{"50126bd1":"code","8bfe7b58":"code","bb52cb7f":"code","a1b0a759":"code","81c19a7e":"code","e5e81ede":"code","723970e5":"code","157f6ba8":"code","a01cc7d1":"code","e2683eb7":"code","69bbf916":"code","9382618b":"code","4833dec7":"code","ed54df90":"code","ce25bbb3":"code","326b1421":"code","4281e42b":"code","269ea35c":"code","fcec1733":"code","b1df536c":"code","1f846664":"code","c1e36d2d":"code","1613be12":"code","ce355f65":"code","4240b864":"code","a7ef6726":"code","7befe33b":"code","5d72759e":"code","fa20ad51":"code","bb6ae400":"code","3e1bef94":"code","472f25db":"code","7e41d2f6":"code","28573d9b":"code","c15b051a":"code","0ccb7399":"code","4f19b9db":"code","a4cd1f2b":"code","18e67c5a":"code","5b97c35d":"code","d204b807":"code","adf00be4":"code","babf879f":"code","d57bf945":"code","9448e766":"code","9e190c8d":"code","6f98e2c3":"markdown","de9701cf":"markdown","0d49d279":"markdown","21ef289d":"markdown","821bf3bb":"markdown","f896295e":"markdown","f3dafac9":"markdown","bc714500":"markdown","d7008c9b":"markdown","2c9298fb":"markdown","3082e3d5":"markdown","bb42c4dd":"markdown","8b805f5c":"markdown","6d5512fa":"markdown"},"source":{"50126bd1":"# Importing required libraries and making few changes for stylling.\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport missingno as msn\nimport seaborn as sns\n\npd.set_option('display.max_rows', None)\npd.set_option('display.max_columns', None)\n\nplt.style.use('dark_background')\nplt.rcParams[\"image.cmap\"] = \"Set1\"\nplt.rcParams['figure.figsize'] = 18, 7\n# plt.rcParams.keys()","8bfe7b58":"#Read the data\n\npurchase = pd.read_csv('..\/input\/quantium-data-analytics-virtual-experience-program\/PurchaseBehaviour.csv')\ntrans = pd.read_csv('..\/input\/quantium-data-analytics-virtual-experience-program\/Transactions.csv')","bb52cb7f":"print(purchase.shape)\npurchase.sample(5)","a1b0a759":"#Statistics for purchase DataFrame\n\npurchase.describe(include = 'all')","81c19a7e":"purchase.info()","e5e81ede":"# Changed the object dtype to category dtype\n\npurchase[['LIFESTAGE', 'PREMIUM_CUSTOMER']] = purchase[['LIFESTAGE', 'PREMIUM_CUSTOMER']].astype('category')","723970e5":"check = purchase.copy()      # just to see lylty column if it was a categorical column\ncheck['LYLTY_CARD_NBR'] = check['LYLTY_CARD_NBR'].astype('category')\ndisplay(check.describe(include = 'all', ))\ndel check  ","157f6ba8":"# Number of customers in the purchase dataframe\n\npurchase['LYLTY_CARD_NBR'].nunique()","a01cc7d1":"# Graph to show the value counts of Lifestage column in purchase dataframe\n\n(purchase['LIFESTAGE'].value_counts(normalize = True) * 100).plot(kind = 'bar')\nplt.xticks(rotation = 0)\nplt.show()","e2683eb7":"# Graph to show the value counts of Premium customer in purchase dataframe\n\n(purchase['PREMIUM_CUSTOMER'].value_counts() * 100).plot(kind = 'bar')\nplt.xticks(rotation = 0)\nplt.show()","69bbf916":"print(trans.shape)\ntrans.sample(5)","9382618b":"# Statistics of transaction dataframe\n\ntrans.describe(include= 'all')","4833dec7":"trans.info()","ed54df90":"# Code to convert DATE column to datetime dtype\n\nimport datetime\n\n# import pandas as pd\n\n# def convert_excel_time(excel_time):\n#     '''\n#     converts excel float format to pandas datetime object\n#     round to '1min' with \n#     .dt.round('1min') to correct floating point conversion innaccuracy\n#     '''\n    \n#     return pd.to_datetime('1899-12-30') + pd.to_timedelta(excel_time,'D')\n\ndef xldate_to_datetime(xldate):\n\ttemp = datetime.datetime(1899, 12, 30)\n\tdelta = datetime.timedelta(days=xldate)\n\treturn temp+delta\n\ntrans['DATE'] = trans['DATE'].apply(xldate_to_datetime)\ntrans.head()","ce25bbb3":"# Statistics of date column in trans dataframe\n\nprint(trans['DATE'].dtypes)\ntrans['DATE'].describe()","326b1421":"# days on which most transactions were done\n\n(trans['DATE'].value_counts(normalize = True, ascending = False) * 100).head(10).plot(kind = 'bar', figsize = (22, 8))\nplt.xticks(rotation = 0)\nplt.show()","4281e42b":"check = trans['DATE'].nunique()\nprint(f'number of days in the data: {check}')\ndel check","269ea35c":"missing_dates = pd.date_range(start = '2018-07-01', end = '2019-06-30').difference(trans['DATE'])\nprint(f'This date is not present in DATE feature: {missing_dates}')","fcec1733":"# Number of stores in the dataframe\n\nno_of_stores = trans['STORE_NBR'].nunique()\nprint(f'The dataframe contains {no_of_stores} shops\/stores.')","b1df536c":"check = sorted(trans['STORE_NBR'].unique())\nfor num in range(min(check), max(check) + 1):\n    if num in check:\n         pass\n    else:\n        print(f'this store number is not present in data: {num}')","1f846664":"(trans['STORE_NBR'].value_counts() * 100).head(10).plot(kind = 'bar')\nplt.xticks(rotation = 0)\nplt.show()","c1e36d2d":"a = sorted(trans['LYLTY_CARD_NBR'].unique())","1613be12":"b = sorted(purchase['LYLTY_CARD_NBR'].unique())","ce355f65":"if a == b:\n    print('Both the dataframes contain same user card numbers')\nelse:\n    print('There are some users present only in one dataframe')","4240b864":"trans['TXN_ID'].nunique()","a7ef6726":"trans['TXN_ID'].value_counts().head(10).plot(kind = 'bar')\nplt.xticks(rotation = 0)\nplt.show()","7befe33b":"print(trans['PROD_NBR'].nunique())","5d72759e":"trans['PROD_NBR'].plot(kind = 'hist')\nplt.show()","fa20ad51":"trans['PROD_NBR'].value_counts().head(10).plot(kind = 'bar')\nplt.xticks(rotation = 0)\nplt.show()","bb6ae400":"trans['PROD_NAME'].nunique()","3e1bef94":"# top 20 most sold products\n\nmost_sold_products = trans['PROD_NAME'].value_counts().head(20)\nmost_sold_products","472f25db":"print(f'The most sold products are {most_sold_products.index.values[0]}, {most_sold_products.index.values[1]}')","7e41d2f6":"# Convert dtype of prod_name from object to category\n\ntrans['PROD_NAME'] = trans['PROD_NAME'].astype('category')","28573d9b":"print(trans['PROD_QTY'].nunique())\nprint(trans['PROD_QTY'].unique())","c15b051a":"check = pd.DataFrame(trans['PROD_QTY'].value_counts())\ncheck['percentage'] = trans['PROD_QTY'].value_counts(normalize = True) * 100\ndisplay(check.head(6))\ncheck['PROD_QTY'].plot(kind = 'bar')\ndel check","0ccb7399":"trans[trans['PROD_QTY'] == 200]  #may be outliers ","4f19b9db":"trans[trans['LYLTY_CARD_NBR'] == 226000]     #the person who brought outliers","a4cd1f2b":"trans['TOT_SALES'].nunique()","18e67c5a":"display(trans['TOT_SALES'].value_counts().head(10))\nprint(min(trans['TOT_SALES']), max(trans['TOT_SALES']))","5b97c35d":"(trans['PROD_NAME'].value_counts(normalize = True, ascending = False) * 100).plot(kind = 'barh', figsize = (22,28))","d204b807":"df = pd.merge(trans, purchase, on = 'LYLTY_CARD_NBR')\ndisplay(df.describe(include = 'all'))","adf00be4":"df.info()\n","babf879f":"df['LIFESTAGE'].value_counts().plot(kind = 'bar')\nplt.xticks(rotation = 0)\nplt.show()","d57bf945":"df['PREMIUM_CUSTOMER'].value_counts().plot(kind = 'bar')\nplt.xticks(rotation = 0)\nplt.show()","9448e766":"cd \/content\/drive\/My Drive\/Quantium Internship\/Data","9e190c8d":"df.to_csv('df.csv', index = False)","6f98e2c3":"The store 226, 88 and 93 has lot of transactions. Must look into it further later, why these shops have so high transaction rate (may be they are on ground floor, or children freindly etc)","de9701cf":"Therefore there are 72637 customers in the dataframe","0d49d279":"The person who brought outliers brought only outliers (he does not have any other transaction in the datset.) He might be a retailer buying in bulk.","21ef289d":" We can clearly see that the most of the transactions are around christmas!","821bf3bb":"The customers having loyalty card are most mainstream customers > Budget > Premium","f896295e":"The dataframe contains 364 days. Therefore we have data of 1 year with one day missing (Maybe a government holiday\/strike)","f3dafac9":"Usually customer buys just 2 or 3 packs of chips from the store.","bc714500":"The customers love to buy 2 packets at once. ","d7008c9b":"In this notebook, I saw both the dataframes and changed few datatypes and later combined both into one dataframe called df on lylty card number.","2c9298fb":"There are 114 different products in the dataframe. ","3082e3d5":"Product 102, 108 and 33 are most sold. The favorite product in the customer segment.","bb42c4dd":"                              QUANTIUM TASK - 1\n                Data Preparation and Customer Analytics\n                                Code in Python","8b805f5c":"Most of the customers in the dataframe are in Retiress lifestage and the second is Older singles\/couples. We can see that elder members have more loyalty cards than other lifestage customers (Maybe there childrens gave them the card for shopping since they might not have a regular income).","6d5512fa":"'It is christmas!!. The mall was closed on christmas"}}