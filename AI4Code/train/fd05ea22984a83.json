{"cell_type":{"de0628b7":"code","c5a3c5a1":"code","940496bf":"code","7059a1e7":"code","04255aa7":"code","17c19e4f":"code","c09bd2f3":"code","0ef9a07e":"code","8d0903f3":"code","57e27e3f":"code","e77c6861":"code","1d97b821":"code","8009dca0":"code","b4307220":"code","b2244712":"code","9875adef":"code","c1cdd4c2":"markdown","2ff02194":"markdown","f9462d2c":"markdown","084073de":"markdown","4e804860":"markdown"},"source":{"de0628b7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c5a3c5a1":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt \n\nfrom sklearn.cluster import KMeans\nfrom scipy.cluster.hierarchy import linkage, dendrogram\n\nfrom sklearn.cluster import AgglomerativeClustering","940496bf":"menu = pd.read_csv(\"\/kaggle\/input\/starbucks-menu\/starbucks_drinkMenu_expanded.csv\")\nmenu.head()","7059a1e7":"menu.shape","04255aa7":"menu = menu.replace('Varies', np.nan) \nmenu = menu.replace('varies', np.nan) \nmenu = menu.dropna(axis=0)","17c19e4f":"menu.info()","c09bd2f3":"menu2 = menu.iloc[:,[3,17]]\nmenu2['Caffeine'] = menu['Caffeine (mg)']\nmenu2 = menu2.drop('Caffeine (mg)',axis=1)\n\nmenu2 = menu2.astype('int64')","0ef9a07e":"menu2","8d0903f3":"plt.figure(figsize=(6,6))\nplt.scatter(menu2['Calories'],menu2['Caffeine'], color='green')\nplt.xlabel(\"Calories\")\nplt.ylabel(\"Caffeine (mg)\")\nplt.tight_layout()\nplt.show()","57e27e3f":"wcss = []\n\nfor k in range(1,15):\n    kmeans = KMeans(n_clusters=k)\n    kmeans.fit(menu2)\n    wcss.append(kmeans.inertia_)\nplt.figure(figsize=(6,6))\nplt.plot(range(1,15),wcss)\nplt.xlabel(\"Number of k (cluster) value\")\nplt.ylabel(\"wcss\")\nplt.show()","e77c6861":"# We can take elbow as 4\nkmean2 = KMeans(n_clusters=4)\nclusters = kmean2.fit_predict(menu2)\n\nmenu2['labels'] = clusters","1d97b821":"plt.figure(figsize=(7,6))\ncolors = {0:\"red\", 1:\"blue\", 2:\"green\", 3:\"purple\"}\nfor label,color in colors.items():\n    plt.scatter(menu2.Calories[menu2.labels == label],\n                menu2.Caffeine[menu2.labels == label], color = color)\nplt.scatter(kmean2.cluster_centers_[:,0], kmean2.cluster_centers_[:,1],color='black',marker='*',linewidths=2)\nplt.show()","8009dca0":"menu3 = menu2.iloc[:,menu2.columns != 'labels']","b4307220":"merg = linkage(menu3, method='ward')\ndendrogram(merg,leaf_rotation=90)\nplt.xlabel(\"Data points\")\nplt.ylabel('Euclidean Distance')\nplt.show()","b2244712":"hierarc_cluster = AgglomerativeClustering(n_clusters=4, affinity='euclidean', linkage='ward')\nclust = hierarc_cluster.fit_predict(menu3)\n\nmenu3['labels'] = clust","9875adef":"plt.figure(figsize=(7,6))\ncolors = {0:\"red\", 1:\"blue\", 2:\"green\", 3:\"purple\"}\nfor label,color in colors.items():\n    plt.scatter(menu3.Calories[menu3.labels == label],\n                menu3.Caffeine[menu3.labels == label], color = color)\n\nplt.show()","c1cdd4c2":"# 1.Importing Data","2ff02194":"# 4. KMeans","f9462d2c":"# 2. Preprocessing","084073de":"# 3. Visualization","4e804860":"# 5. Hierarchial Clustering"}}