{"cell_type":{"d3e8556b":"code","040ba275":"code","137b92f7":"code","1f6c82cd":"code","def2073e":"code","b8282200":"code","ef3c1901":"code","026e2239":"code","e7cc9cee":"code","a9241821":"code","7fc8bc47":"code","b8e737c6":"code","3484a2d7":"code","06e2526d":"code","7b4f30b3":"code","67c423f3":"code","2549de5d":"code","b0593418":"code","e52a4f30":"code","a40274b5":"code","2a59a2d6":"code","f9a7e7bb":"code","9600f2b1":"code","b5477fa7":"code","f67b4d90":"code","4c272f26":"code","0de37e6b":"code","6a6c3bc5":"markdown"},"source":{"d3e8556b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","040ba275":"import os\nfrom numpy.lib.shape_base import column_stack\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom pandas.core.tools import numeric\nimport seaborn as sns\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout\nfrom keras.callbacks import History","137b92f7":"df_train = pd.read_csv('..\/input\/rossmann-store-sales\/train.csv', low_memory=False, parse_dates=['Date'])\ndf_store = pd.read_csv('..\/input\/rossmann-store-sales\/store.csv', header=0)\ndf_train.head()\ndf_store.head()","1f6c82cd":"df_new = df_train.merge(df_store, on=['Store'], how='inner')\ndf_new.head()","def2073e":"df_new.shape","b8282200":"df_new['Date'] = pd.to_datetime(df_new['Date'], infer_datetime_format=True)\ndf_new['Date']","ef3c1901":"df_new['Week'] = df_new['Date'].dt.isocalendar().week\ndf_new['Week']","026e2239":"df_new['Month'] = df_new['Date'].dt.month\ndf_new['Month']","e7cc9cee":"df_new['Year'] = df_new['Date'].dt.year\ndf_new['Year']","a9241821":"df_new['Quarter'] = df_new['Date'].dt.quarter\ndf_new['Quarter']","7fc8bc47":"df_new['Day'] = df_new['Date'].dt.day\ndf_new['Day']","b8e737c6":"df_new['Season'] = np.where(df_new['Month'].isin([3, 4, 5]), 'Spring',\n                    np.where(df_new['Month'].isin([6, 7, 8]), 'Summer',\n                    np.where(df_new['Month'].isin([9, 10, 11]), 'Fall',\n                    np.where(df_new['Month'].isin([12, 1, 2]), 'Winter', 'None'))))","3484a2d7":"df_new['CompetitionDistance'] = df_new['CompetitionDistance'].fillna(df_new['CompetitionDistance'].mode()[0])\ndf_new['CompetitionDistance']","06e2526d":"target = ['Sales']\nnumeric_columns = ['Customers', 'Open', 'Promo', 'Promo2', 'StateHoliday', 'SchoolHoliday', 'CompetitionDistance']\ncategorical_columns = ['DayOfWeek', 'Quarter', 'Month', 'Year', 'StoreType', 'Assortment', 'Season']","7b4f30b3":"def create_ohe(df, col):\n    le = LabelEncoder()\n    a = le.fit_transform(df_new[col]).reshape(-1, 1)\n    ohe = OneHotEncoder(sparse=False)\n    column_names = [col + ' ' + str(i) for i in le.classes_]\n    return pd.DataFrame(ohe.fit_transform(a), columns=column_names)","67c423f3":"temp = df_new[numeric_columns]\nfor column in categorical_columns:\n    temp_df = create_ohe(df_new, column)\n    temp = pd.concat([temp, temp_df], axis=1)","2549de5d":"print(temp['StateHoliday'].unique())\ntemp['StateHoliday'] = np.where(temp['StateHoliday']=='0', 0, 1)\nprint(temp.dtypes.unique())\n\nx_train, x_test, y_train, y_test = train_test_split(temp, df_new[target], test_size=0.2, random_state=2018)\nx_train, x_val, y_train, y_val = train_test_split(x_train, y_train, test_size=0.1, random_state=2018)\n\nprint('Shape of x_train:{0}'.format(x_train.shape))\nprint('Shape of x_val:{0}'.format(x_val.shape))\nprint('Shape of x_test:{0}'.format(x_test.shape))\nprint('Shape of y_train:{0}'.format(y_train.shape))\nprint('Shape of y_val:{0}'.format(y_val.shape))\nprint('Shape of y_test:{0}'.format(y_test.shape))","b0593418":"mean_scales = y_train.mean()\nprint('Average Sales:{0}'.format(mean_scales))\nprint('MAE for Test Data:{0}'.format(abs(y_test - mean_scales).mean()[0]))","e52a4f30":"history = History()\nmodel = Sequential()\nmodel.add(Dense(350, input_dim=44, activation='relu'))\nmodel.add(Dense(350, activation='relu'))\nmodel.add(Dense(350, activation='relu'))\nmodel.add(Dense(350, activation='relu'))\nmodel.add(Dense(350, activation='relu'))\nmodel.add(Dense(1, activation='linear'))\nmodel.compile(optimizer='adam', loss='mean_squared_error', metrics=['mean_absolute_error'])\nmodel.fit(x_train.values, y_train.values, validation_data=(x_val, y_val), epochs=11, batch_size=64, callbacks=[history])","a40274b5":"result = model.evaluate(x_test.values, y_test.values)\nfor i in range(len(model.metrics_names)):\n    print('Metrics ', model.metrics_names[i], ':', str(round(result[i], 2)))","2a59a2d6":"plt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title(\"Model's Training & Validation loss across epochs\")\nplt.ylabel('Loss')\nplt.xlabel('Epochs')\nplt.legend(['Train', 'Validation'], loc='upper right')\nplt.show()","f9a7e7bb":"y_test['Prediction'] = model.predict(x_test)\ny_test.columns = ['Actual Sales', 'Sales']\nprint(y_test.head(10))\n\nprint('MSE:{0}'.format(mean_squared_error(y_test['Actual Sales'].values, y_test['Sales'].values)))\nprint('MAE:{0}'.format(mean_absolute_error(y_test['Actual Sales'].values, y_test['Sales'].values)))","9600f2b1":"y_test.shape\ny_test","b5477fa7":"y_test.index.set_names(['Id'], inplace=True)\ny_test","f67b4d90":"y_test.drop(['Actual Sales', 'Prediction'], axis=1, inplace=True)\ny_test","4c272f26":"y_test.rename(columns={'Predicted Sales': 'Sales'})","0de37e6b":"y_test.to_csv('submission.csv')","6a6c3bc5":"### end"}}