{"cell_type":{"b99c7b1a":"code","8056bc7a":"code","c4fe34aa":"code","f4bc5069":"code","d094fbd1":"code","5bcd65cd":"code","22891ef7":"code","d022ded8":"code","8f68f326":"code","dcb0cc3a":"code","af128265":"code","a7756521":"code","4e0132cc":"code","50a39600":"code","ceb8c9b0":"code","3ed4943f":"code","00f88414":"code","71644970":"code","4bf8e64a":"code","12de5eb1":"code","00d869ed":"code","acc1d71a":"code","4e6329c9":"code","a593791c":"code","d726a343":"code","731faf0e":"code","6c645e8f":"code","28274103":"code","1e54af36":"code","5b0c9035":"code","57e6d18e":"code","c55cff29":"code","e9b22840":"code","d9476cf9":"code","05a7dcb2":"code","776ab3b6":"code","4c2d6a30":"code","0b635f19":"code","a1a16903":"code","b9e9b590":"code","e7cee40f":"code","4f993cc8":"code","d52917ed":"code","7f051dbd":"code","03c457a9":"markdown","702f049c":"markdown","6e81decc":"markdown","baff122e":"markdown","74106598":"markdown","0ffbe91b":"markdown","62fd0b5f":"markdown"},"source":{"b99c7b1a":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","8056bc7a":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","c4fe34aa":"df = pd.read_csv('\/kaggle\/input\/iris\/Iris.csv')","f4bc5069":"df.head()","d094fbd1":"df.info()","5bcd65cd":"df.describe()","22891ef7":"print('Total Number of Unique Species: ', df.Species.nunique())\nprint('Unique Species: ', df.Species.unique())","d022ded8":"sns.boxplot(x = 'Species',y = 'SepalLengthCm', data = df)","8f68f326":"sns.boxplot(x = 'Species',y = 'SepalWidthCm', data = df)","dcb0cc3a":"sns.boxplot(x = 'Species',y = 'PetalLengthCm', data = df)","af128265":"sns.boxplot(x = 'Species',y = 'PetalWidthCm', data = df)","a7756521":"sns.swarmplot(x = 'Species',y = 'SepalLengthCm', data = df)","4e0132cc":"sns.swarmplot(x = 'Species',y = 'SepalWidthCm', data = df)","50a39600":"sns.swarmplot(x = 'Species',y = 'PetalLengthCm', data = df)","ceb8c9b0":"sns.swarmplot(x = 'Species',y = 'PetalWidthCm', data = df)","3ed4943f":"sns.violinplot(x = 'Species',y = 'SepalLengthCm', data = df)","00f88414":"sns.violinplot(x = 'Species',y = 'SepalWidthCm', data = df)","71644970":"sns.violinplot(x = 'Species',y = 'PetalLengthCm', data = df)","4bf8e64a":"sns.violinplot(x = 'Species',y = 'PetalWidthCm', data = df)","12de5eb1":"df.head()","00d869ed":"features = ['SepalLengthCm','SepalWidthCm','PetalLengthCm','PetalWidthCm']","acc1d71a":"X = df[features]","4e6329c9":"y = df['Species']","a593791c":"from sklearn.preprocessing import LabelEncoder","d726a343":"encoder = LabelEncoder()\ny = encoder.fit_transform(y)\ny","731faf0e":"from sklearn.model_selection import train_test_split\nX_train, X_test, Y_train, Y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)","6c645e8f":"from sklearn.preprocessing import StandardScaler\nsc_X = StandardScaler()\nX_train = sc_X.fit_transform(X_train)\nX_test = sc_X.transform(X_test)","28274103":"from sklearn.ensemble import RandomForestClassifier\nclassifier = RandomForestClassifier(max_depth=2, random_state=42)\nclassifier.fit(X_train, Y_train)\n#predecting the test set\ny_pred = classifier.predict(X_test)\nprint('Model Accuracy: ', classifier.score(X_train, Y_train))","1e54af36":"from sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import zero_one_loss\nfrom sklearn.metrics import multilabel_confusion_matrix\nfrom sklearn.metrics import plot_confusion_matrix\ncm = confusion_matrix(Y_test, y_pred)\ncm","5b0c9035":"print('Number of Correctly Classified Samples: ', \n      accuracy_score(Y_test, y_pred, normalize=False), \n      ' out of ', len(y_pred))","57e6d18e":"accuracy_score(Y_test, y_pred, normalize=True)\n# If True return the fraction of correctly classified samples.\n# 1.0 means 100% accuracy of the model.","c55cff29":"zero_one_loss(Y_test, y_pred, normalize=True)\n# If False, returns the number of the misclassifications. \n# If True, returns the fraction of the misclassifications.","e9b22840":"print('Model Accuracy: ', classifier.score(X_train, Y_train))","d9476cf9":"from sklearn.svm import SVC\nclassifier = SVC(gamma='auto')\nclassifier.fit(X_train, Y_train)\n\n#predecting the test set\ny_pred = classifier.predict(X_test)","05a7dcb2":"print('Model Accuracy: ', classifier.score(X_train, Y_train))","776ab3b6":"print('Number of Correctly Classified Samples: ', \n      accuracy_score(Y_test, y_pred, normalize=False), \n      ' out of ', len(y_pred))\nprint('Number of Support Vectors for each Class: ', classifier.n_support_)","4c2d6a30":"plot_confusion_matrix(classifier, X_test, Y_test)","0b635f19":"from sklearn.neighbors import KNeighborsClassifier\nclassifiers = KNeighborsClassifier(n_neighbors = 5, metric = 'minkowski', p = 2)\nclassifiers.fit(X_train, Y_train)\n\n#predecting the test set\ny_pred = classifiers.predict(X_test)\n\n#Making the confusion matrix\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(Y_test, y_pred)\ncm","a1a16903":"print('Model Accuracy: ', classifier.score(X_train, Y_train))","b9e9b590":"from sklearn.linear_model import LogisticRegression\nclassifier = LogisticRegression(random_state = 0)\nclassifier.fit(X_train, Y_train)\n\n#predecting the test set\ny_pred = classifier.predict(X_test)\n\n#Making the confusion matrix\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(Y_test, y_pred)\ncm","e7cee40f":"print('Model Accuracy: ', classifier.score(X_train, Y_train))","4f993cc8":"from sklearn.naive_bayes import GaussianNB\nclassifier = GaussianNB()\nclassifier.fit(X_train, Y_train)\n\n#predecting the test set\ny_pred = classifier.predict(X_test)\n\n#Making the confusion matrix\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(Y_test, y_pred)\ncm","d52917ed":"print('Model Accuracy: ', classifier.score(X_train, Y_train))","7f051dbd":"plot_confusion_matrix(classifier, X_test, Y_test)","03c457a9":"**Gaussian Naive Bayes (GaussianNB)**","702f049c":"**Random forest Classifier**","6e81decc":"**Data preprocessing**","baff122e":"**Data visualisation**","74106598":"**Logistic Regression**","0ffbe91b":"**k-nearest neighbors**","62fd0b5f":"**Support Vector Classifier**"}}