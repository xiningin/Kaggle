{"cell_type":{"e1ed63cf":"code","339a06b6":"code","2ab7f703":"markdown"},"source":{"e1ed63cf":"#Upvote --> https:\/\/www.kaggle.com\/indranilbhattacharya\/bojan-chris-cv\nimport numpy as np\nimport pandas as pd \nfrom sklearn import svm, neighbors, linear_model, neural_network\nfrom sklearn.feature_selection import VarianceThreshold\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import roc_auc_score\n\ntrain = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')","339a06b6":"oof_svnu = np.zeros(len(train)) \npred_te_svnu = np.zeros(len(test))\n\noof_svc = np.zeros(len(train)) \npred_te_svc = np.zeros(len(test))\n\noof_knn = np.zeros(len(train)) \npred_te_knn = np.zeros(len(test))\n\noof_lr = np.zeros(len(train)) \npred_te_lr = np.zeros(len(test))\n\ncols = [c for c in train.columns if c not in [\"id\" , \"target\" , \"wheezy-copper-turtle-magic\"]] \n\nfor i in range(512):\n    train2 = train[train['wheezy-copper-turtle-magic'] == i]\n    test2 = test[test['wheezy-copper-turtle-magic'] == i]\n    \n    id_tr = train2.index ## row indexes\n    id_te = test2.index\n    \n    train2.reset_index(drop=True,inplace=True) # check\n    sel = VarianceThreshold(threshold=1.5).fit(train2[cols]) #### need to check whats going on here\n    train3 = sel.transform(train2[cols])\n    test3 = sel.transform(test2[cols])\n    \n    ### stratified k fold ###\n    skf = StratifiedKFold(n_splits=5, random_state=42)\n    for train_index, test_index in skf.split(train3, train2['target']):\n        \n        knn = neighbors.KNeighborsClassifier(n_neighbors=17, p=2.9)\n        knn.fit(train3[train_index,:],train2.loc[train_index]['target'])\n        \n        svnu = svm.NuSVC(probability=True, kernel='poly', degree=4, gamma='auto', random_state=42, nu=0.6, coef0=0.6) \n        svnu.fit(train3[train_index,:],train2.loc[train_index]['target'])\n        \n        #lr = linear_model.LogisticRegression(solver='liblinear',penalty='l1',C=0.1)\n        lr = neural_network.MLPClassifier(random_state=3,  activation='relu', solver='lbfgs', tol=1e-06, hidden_layer_sizes=(250, ))\n        lr.fit(train3[train_index,:],train2.loc[train_index]['target'])\n        \n        svc = svm.SVC(probability=True, kernel='poly', degree=4, gamma='auto', random_state=42)\n        svc.fit(train3[train_index,:],train2.loc[train_index]['target'])\n    \n        \n        oof_svnu[id_tr[test_index]] = svnu.predict_proba(train3[test_index,:])[:,1]\n        pred_te_svnu[id_te] += svnu.predict_proba(test3)[:,1] \/ skf.n_splits\n        \n        oof_svc[id_tr[test_index]] = svc.predict_proba(train3[test_index,:])[:,1]\n        pred_te_svc[id_te] += svc.predict_proba(test3)[:,1] \/ skf.n_splits\n        \n        oof_knn[id_tr[test_index]] = knn.predict_proba(train3[test_index,:])[:,1]\n        pred_te_knn[id_te] += knn.predict_proba(test3)[:,1] \/ skf.n_splits\n        \n        oof_lr[id_tr[test_index]] = lr.predict_proba(train3[test_index,:])[:,1]\n        pred_te_lr[id_te] += lr.predict_proba(test3)[:,1] \/ skf.n_splits\n        \nprint('CV score svnu=',round(roc_auc_score(train['target'],oof_svnu),5))\nprint('CV score svc=',round(roc_auc_score(train['target'],oof_svc),5))\nprint('CV score knn=',round(roc_auc_score(train['target'],oof_knn),5))\nprint('CV score lr=',round(roc_auc_score(train['target'],oof_lr),5))\nprint('CV score ensemble=',round(roc_auc_score(train['target'],oof_svnu*0.6 + oof_svc*0.1 + oof_knn*0.2 + oof_lr*0.1),5))\n\nsub = pd.read_csv('..\/input\/sample_submission.csv')\nsub['target'] = pred_te_svnu*0.65 + pred_te_svc*0.1 + pred_te_knn*0.2 + pred_te_lr*0.05\nsub.to_csv('submission.csv',index=False)","2ab7f703":"[If you like it upvote the original kernel too](https:\/\/www.kaggle.com\/indranilbhattacharya\/bojan-chris-cv)"}}