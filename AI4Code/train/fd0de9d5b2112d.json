{"cell_type":{"9a535458":"code","59b8f85d":"code","11d97d66":"code","6cfd6dc7":"code","0b241c74":"markdown"},"source":{"9a535458":"!pip install --quiet --no-index --find-links ..\/input\/pip-download-torchio\/ --requirement ..\/input\/pip-download-torchio\/requirements.txt","59b8f85d":"import os\nimport csv\nimport nibabel as nib\nimport torchio as tio\nimport tensorflow as tf\nfrom pathlib import Path","11d97d66":"# functions\ndef read_nifti_file(filepath):\n    \"\"\"Read and load volume\"\"\"\n    # Read file\n    scan = nib.load(filepath)\n    # Get raw data\n    scan = scan.get_fdata()\n    return scan\n\ndef add_batch_channel(volume):\n    \"\"\"Process validation data by adding a channel.\"\"\"\n    volume = tf.expand_dims(volume, axis=-1)\n    volume = tf.expand_dims(volume, axis=0)\n    return volume\n\ndef process_scan(filepath):\n    scan = read_nifti_file(filepath)\n    volume = add_batch_channel(scan)\n    return volume","6cfd6dc7":"# Set up directories\ndata_dir   = '\/kaggle\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/'\ntest_dir   = f'{data_dir}test'\npatients = os.listdir(test_dir)\nprint(f'Total patients: {len(patients)}\\n\\n')\n\nout_dir  = '\/kaggle\/working\/processed'\n\nscan_types = ['FLAIR', 'T1w', 'T1wCE', 'T2w']\nscan_types = ['T1wCE']\n\nfor scan_type in scan_types:\n    f = open(f'\/kaggle\/working\/submission.csv', 'w')\n    writer = csv.writer(f)\n    writer.writerow(['BraTS21ID','MGMT_value'])\n    for patient in patients:\n        # dicom to nifiti\n        scan_src  = f'{test_dir}\/{patient}\/{scan_type}\/'\n        scan_dest = f'{out_dir}\/test\/{patient}\/{scan_type}\/'\n        Path(scan_dest).mkdir(parents=True, exist_ok=True)\n        image = tio.ScalarImage(scan_src)  # subclass of Image\n        transforms = [\n            tio.ToCanonical(),\n            tio.Resample(1),\n            tio.ZNormalization(masking_method=tio.ZNormalization.mean),\n            tio.CropOrPad((128,128,64)),\n            tio.RescaleIntensity((-1, 1)),\n        ]\n        transform = tio.Compose(transforms)\n        preprocessed = transform(image)\n        filepath = f'{scan_dest}\/{scan_type}.nii.gz'\n        preprocessed.save(filepath)\n        \n        # process_scan\n        case = process_scan(filepath)\n\n        # tf model\n        model = tf.keras.models.load_model(f'..\/input\/dataset-to-model-with-tensorflow\/models\/{scan_type}\/')\n\n        # get prediction\n        prediction = model.predict(case)\n        \n        # write prediction\n        print(f'{patient},{prediction[0][0]}')\n        writer.writerow([patient, prediction[0][0]])\n\n    f.close()   ","0b241c74":"This kernel uses the model to predict the test set and write results to submission.csv\n\nThis is part of a larger solution found at: https:\/\/www.kaggle.com\/ohbewise\/a-rsna-mri-solution-from-dicom-to-submission"}}